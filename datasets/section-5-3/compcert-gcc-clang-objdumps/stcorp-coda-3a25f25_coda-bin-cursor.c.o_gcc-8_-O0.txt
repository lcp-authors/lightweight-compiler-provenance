
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <read_bits>:
     204:	strd	r4, [sp, #-32]!	; 0xffffffe0
     208:	strd	r6, [sp, #8]
     20c:	strd	r8, [sp, #16]
     210:	str	fp, [sp, #24]
     214:	str	lr, [sp, #28]
     218:	add	fp, sp, #28
     21c:	sub	sp, sp, #136	; 0x88
     220:	str	r0, [fp, #-80]	; 0xffffffb0
     224:	strd	r2, [fp, #-92]	; 0xffffffa4
     228:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     22c:	mov	r2, #7
     230:	mov	r3, #0
     234:	and	r4, r0, r2
     238:	and	r5, r1, r3
     23c:	ldrd	r2, [fp, #4]
     240:	adds	r6, r2, r4
     244:	adc	r7, r3, r5
     248:	strd	r6, [fp, #-44]	; 0xffffffd4
     24c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     250:	rsb	r3, r3, #0
     254:	and	r3, r3, #7
     258:	str	r3, [fp, #-48]	; 0xffffffd0
     25c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     260:	cmp	r2, #9
     264:	sbcs	r3, r3, #0
     268:	bge	33c <read_bits+0x138>
     26c:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     270:	mov	r2, #0
     274:	mov	r3, #0
     278:	lsr	r2, r0, #3
     27c:	orr	r2, r2, r1, lsl #29
     280:	asr	r3, r1, #3
     284:	ldr	r1, [fp, #12]
     288:	str	r1, [sp, #8]
     28c:	mov	r0, #1
     290:	mov	r1, #0
     294:	strd	r0, [sp]
     298:	ldr	r0, [fp, #-80]	; 0xffffffb0
     29c:	bl	0 <read_bytes>
     2a0:	mov	r3, r0
     2a4:	cmp	r3, #0
     2a8:	beq	2b4 <read_bits+0xb0>
     2ac:	mvn	r3, #0
     2b0:	b	7fc <read_bits+0x5f8>
     2b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2b8:	cmp	r3, #0
     2bc:	beq	2e0 <read_bits+0xdc>
     2c0:	ldr	r3, [fp, #12]
     2c4:	ldrb	r3, [r3]
     2c8:	mov	r2, r3
     2cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
     2d0:	asr	r3, r2, r3
     2d4:	uxtb	r2, r3
     2d8:	ldr	r3, [fp, #12]
     2dc:	strb	r2, [r3]
     2e0:	ldrd	r2, [fp, #4]
     2e4:	mov	r0, #7
     2e8:	mov	r1, #0
     2ec:	and	r8, r2, r0
     2f0:	and	r9, r3, r1
     2f4:	orrs	r3, r8, r9
     2f8:	beq	7f8 <read_bits+0x5f4>
     2fc:	ldr	r3, [fp, #12]
     300:	ldrb	r3, [r3]
     304:	sxtb	r2, r3
     308:	ldr	r3, [fp, #4]
     30c:	mov	r1, #1
     310:	lsl	r3, r1, r3
     314:	uxtb	r3, r3
     318:	sub	r3, r3, #1
     31c:	uxtb	r3, r3
     320:	sxtb	r3, r3
     324:	and	r3, r3, r2
     328:	sxtb	r3, r3
     32c:	uxtb	r2, r3
     330:	ldr	r3, [fp, #12]
     334:	strb	r2, [r3]
     338:	b	7f8 <read_bits+0x5f4>
     33c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     340:	cmp	r3, #0
     344:	bne	4c8 <read_bits+0x2c4>
     348:	ldrd	r2, [fp, #4]
     34c:	mov	r0, #7
     350:	mov	r1, #0
     354:	and	ip, r2, r0
     358:	str	ip, [fp, #-100]	; 0xffffff9c
     35c:	and	r3, r3, r1
     360:	str	r3, [fp, #-96]	; 0xffffffa0
     364:	ldrd	r2, [fp, #-100]	; 0xffffff9c
     368:	orrs	r3, r2, r3
     36c:	beq	458 <read_bits+0x254>
     370:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     374:	mov	r2, #0
     378:	mov	r3, #0
     37c:	lsr	r2, r0, #3
     380:	orr	r2, r2, r1, lsl #29
     384:	asr	r3, r1, #3
     388:	sub	r1, fp, #65	; 0x41
     38c:	str	r1, [sp, #8]
     390:	mov	r0, #1
     394:	mov	r1, #0
     398:	strd	r0, [sp]
     39c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     3a0:	bl	0 <read_bytes>
     3a4:	mov	r3, r0
     3a8:	cmp	r3, #0
     3ac:	beq	3b8 <read_bits+0x1b4>
     3b0:	mvn	r3, #0
     3b4:	b	7fc <read_bits+0x5f8>
     3b8:	ldr	r3, [fp, #4]
     3bc:	and	r3, r3, #7
     3c0:	str	r3, [fp, #-52]	; 0xffffffcc
     3c4:	mov	r2, #1
     3c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
     3cc:	lsl	r3, r2, r3
     3d0:	uxtb	r3, r3
     3d4:	sub	r3, r3, #1
     3d8:	uxtb	r3, r3
     3dc:	sxtb	r2, r3
     3e0:	ldrb	r3, [fp, #-65]	; 0xffffffbf
     3e4:	sxtb	r3, r3
     3e8:	and	r3, r3, r2
     3ec:	sxtb	r3, r3
     3f0:	uxtb	r2, r3
     3f4:	ldr	r3, [fp, #12]
     3f8:	strb	r2, [r3]
     3fc:	ldr	r3, [fp, #12]
     400:	add	r3, r3, #1
     404:	str	r3, [fp, #12]
     408:	ldr	r3, [fp, #-52]	; 0xffffffcc
     40c:	mov	r2, r3
     410:	mov	r3, #0
     414:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     418:	adds	ip, r0, r2
     41c:	str	ip, [fp, #-108]	; 0xffffff94
     420:	adc	r3, r1, r3
     424:	str	r3, [fp, #-104]	; 0xffffff98
     428:	ldrd	r2, [fp, #-108]	; 0xffffff94
     42c:	strd	r2, [fp, #-92]	; 0xffffffa4
     430:	ldr	r3, [fp, #-52]	; 0xffffffcc
     434:	mov	r2, r3
     438:	mov	r3, #0
     43c:	ldrd	r0, [fp, #4]
     440:	subs	ip, r0, r2
     444:	str	ip, [fp, #-116]	; 0xffffff8c
     448:	sbc	r3, r1, r3
     44c:	str	r3, [fp, #-112]	; 0xffffff90
     450:	ldrd	r2, [fp, #-116]	; 0xffffff8c
     454:	strd	r2, [fp, #4]
     458:	ldrd	r2, [fp, #4]
     45c:	cmp	r2, #1
     460:	sbcs	r3, r3, #0
     464:	blt	7f8 <read_bits+0x5f4>
     468:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     46c:	mov	r0, #0
     470:	mov	r1, #0
     474:	lsr	r0, r2, #3
     478:	orr	r0, r0, r3, lsl #29
     47c:	asr	r1, r3, #3
     480:	ldrd	r4, [fp, #4]
     484:	mov	r2, #0
     488:	mov	r3, #0
     48c:	lsr	r2, r4, #3
     490:	orr	r2, r2, r5, lsl #29
     494:	asr	r3, r5, #3
     498:	ldr	ip, [fp, #12]
     49c:	str	ip, [sp, #8]
     4a0:	strd	r2, [sp]
     4a4:	mov	r2, r0
     4a8:	mov	r3, r1
     4ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4b0:	bl	0 <read_bytes>
     4b4:	mov	r3, r0
     4b8:	cmp	r3, #0
     4bc:	beq	7f8 <read_bits+0x5f4>
     4c0:	mvn	r3, #0
     4c4:	b	7fc <read_bits+0x5f8>
     4c8:	ldrd	r0, [fp, #4]
     4cc:	mov	r2, #24
     4d0:	mov	r3, #0
     4d4:	bl	0 <__aeabi_ldivmod>
     4d8:	orrs	r3, r2, r3
     4dc:	beq	7e8 <read_bits+0x5e4>
     4e0:	ldrd	r0, [fp, #4]
     4e4:	mov	r2, #24
     4e8:	mov	r3, #0
     4ec:	bl	0 <__aeabi_ldivmod>
     4f0:	mov	r3, r2
     4f4:	str	r3, [fp, #-56]	; 0xffffffc8
     4f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
     4fc:	and	r2, r3, #7
     500:	ldr	r3, [fp, #-56]	; 0xffffffc8
     504:	add	r3, r2, r3
     508:	lsr	r3, r3, #3
     50c:	ldrb	r2, [fp, #-92]	; 0xffffffa4
     510:	and	r2, r2, #7
     514:	uxtb	r1, r2
     518:	ldr	r2, [fp, #-56]	; 0xffffffc8
     51c:	uxtb	r2, r2
     520:	add	r2, r1, r2
     524:	uxtb	r2, r2
     528:	and	r2, r2, #7
     52c:	cmp	r2, #0
     530:	movne	r2, #1
     534:	moveq	r2, #0
     538:	uxtb	r2, r2
     53c:	add	r3, r3, r2
     540:	str	r3, [fp, #-60]	; 0xffffffc4
     544:	ldr	r3, [fp, #-56]	; 0xffffffc8
     548:	lsr	r3, r3, #3
     54c:	ldr	r2, [fp, #-56]	; 0xffffffc8
     550:	uxtb	r2, r2
     554:	and	r2, r2, #7
     558:	cmp	r2, #0
     55c:	movne	r2, #1
     560:	moveq	r2, #0
     564:	uxtb	r2, r2
     568:	add	r3, r3, r2
     56c:	str	r3, [fp, #-64]	; 0xffffffc0
     570:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     574:	mov	r2, #0
     578:	mov	r3, #0
     57c:	lsr	r2, r0, #3
     580:	orr	r2, r2, r1, lsl #29
     584:	asr	r3, r1, #3
     588:	ldr	r1, [fp, #-60]	; 0xffffffc4
     58c:	mov	r0, r1
     590:	mov	r1, #0
     594:	sub	ip, fp, #72	; 0x48
     598:	str	ip, [sp, #8]
     59c:	strd	r0, [sp]
     5a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
     5a4:	bl	0 <read_bytes>
     5a8:	mov	r3, r0
     5ac:	cmp	r3, #0
     5b0:	beq	5bc <read_bits+0x3b8>
     5b4:	mvn	r3, #0
     5b8:	b	7fc <read_bits+0x5f8>
     5bc:	mov	r3, #0
     5c0:	str	r3, [fp, #-76]	; 0xffffffb4
     5c4:	mov	r3, #0
     5c8:	str	r3, [fp, #-32]	; 0xffffffe0
     5cc:	b	600 <read_bits+0x3fc>
     5d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5d4:	rsb	r3, r3, #3
     5d8:	sub	r1, fp, #72	; 0x48
     5dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
     5e0:	add	r2, r1, r2
     5e4:	ldrb	r2, [r2]
     5e8:	sub	r1, fp, #28
     5ec:	add	r3, r1, r3
     5f0:	strb	r2, [r3, #-48]	; 0xffffffd0
     5f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     5f8:	add	r3, r3, #1
     5fc:	str	r3, [fp, #-32]	; 0xffffffe0
     600:	ldr	r2, [fp, #-32]	; 0xffffffe0
     604:	ldr	r3, [fp, #-60]	; 0xffffffc4
     608:	cmp	r2, r3
     60c:	bcc	5d0 <read_bits+0x3cc>
     610:	ldr	r2, [fp, #-76]	; 0xffffffb4
     614:	ldr	r3, [fp, #-60]	; 0xffffffc4
     618:	lsl	r3, r3, #3
     61c:	rsb	r1, r3, #0
     620:	ldr	r3, [fp, #-48]	; 0xffffffd0
     624:	add	r3, r1, r3
     628:	add	r3, r3, #32
     62c:	lsr	r3, r2, r3
     630:	mov	r1, #1
     634:	ldr	r2, [fp, #-56]	; 0xffffffc8
     638:	lsl	r2, r1, r2
     63c:	sub	r2, r2, #1
     640:	and	r3, r3, r2
     644:	str	r3, [fp, #-76]	; 0xffffffb4
     648:	mov	r3, #0
     64c:	str	r3, [fp, #-32]	; 0xffffffe0
     650:	b	68c <read_bits+0x488>
     654:	ldr	r2, [fp, #-64]	; 0xffffffc0
     658:	ldr	r3, [fp, #-32]	; 0xffffffe0
     65c:	sub	r3, r2, r3
     660:	sub	r2, r3, #1
     664:	ldr	r1, [fp, #12]
     668:	ldr	r3, [fp, #-32]	; 0xffffffe0
     66c:	add	r3, r1, r3
     670:	sub	r1, fp, #28
     674:	add	r2, r1, r2
     678:	ldrb	r2, [r2, #-48]	; 0xffffffd0
     67c:	strb	r2, [r3]
     680:	ldr	r3, [fp, #-32]	; 0xffffffe0
     684:	add	r3, r3, #1
     688:	str	r3, [fp, #-32]	; 0xffffffe0
     68c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     690:	ldr	r3, [fp, #-64]	; 0xffffffc0
     694:	cmp	r2, r3
     698:	bcc	654 <read_bits+0x450>
     69c:	ldr	r2, [fp, #12]
     6a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
     6a4:	add	r3, r2, r3
     6a8:	str	r3, [fp, #12]
     6ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6b0:	mov	r2, r3
     6b4:	mov	r3, #0
     6b8:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     6bc:	adds	ip, r0, r2
     6c0:	str	ip, [fp, #-124]	; 0xffffff84
     6c4:	adc	r3, r1, r3
     6c8:	str	r3, [fp, #-120]	; 0xffffff88
     6cc:	ldrd	r2, [fp, #-124]	; 0xffffff84
     6d0:	strd	r2, [fp, #-92]	; 0xffffffa4
     6d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     6d8:	mov	r2, r3
     6dc:	mov	r3, #0
     6e0:	ldrd	r0, [fp, #4]
     6e4:	subs	ip, r0, r2
     6e8:	str	ip, [fp, #-132]	; 0xffffff7c
     6ec:	sbc	r3, r1, r3
     6f0:	str	r3, [fp, #-128]	; 0xffffff80
     6f4:	ldrd	r2, [fp, #-132]	; 0xffffff7c
     6f8:	strd	r2, [fp, #4]
     6fc:	b	7e8 <read_bits+0x5e4>
     700:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     704:	mov	r2, #0
     708:	mov	r3, #0
     70c:	lsr	r2, r0, #3
     710:	orr	r2, r2, r1, lsl #29
     714:	asr	r3, r1, #3
     718:	sub	r1, fp, #72	; 0x48
     71c:	str	r1, [sp, #8]
     720:	mov	r0, #4
     724:	mov	r1, #0
     728:	strd	r0, [sp]
     72c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     730:	bl	0 <read_bytes>
     734:	mov	r3, r0
     738:	cmp	r3, #0
     73c:	beq	748 <read_bits+0x544>
     740:	mvn	r3, #0
     744:	b	7fc <read_bits+0x5f8>
     748:	ldrb	r3, [fp, #-69]	; 0xffffffbb
     74c:	strb	r3, [fp, #-76]	; 0xffffffb4
     750:	ldrb	r3, [fp, #-70]	; 0xffffffba
     754:	strb	r3, [fp, #-75]	; 0xffffffb5
     758:	ldrb	r3, [fp, #-71]	; 0xffffffb9
     75c:	strb	r3, [fp, #-74]	; 0xffffffb6
     760:	ldrb	r3, [fp, #-72]	; 0xffffffb8
     764:	strb	r3, [fp, #-73]	; 0xffffffb7
     768:	ldr	r2, [fp, #-76]	; 0xffffffb4
     76c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     770:	lsr	r3, r2, r3
     774:	str	r3, [fp, #-76]	; 0xffffffb4
     778:	ldrb	r2, [fp, #-74]	; 0xffffffb6
     77c:	ldr	r3, [fp, #12]
     780:	strb	r2, [r3]
     784:	ldr	r3, [fp, #12]
     788:	add	r3, r3, #1
     78c:	ldrb	r2, [fp, #-75]	; 0xffffffb5
     790:	strb	r2, [r3]
     794:	ldr	r3, [fp, #12]
     798:	add	r3, r3, #2
     79c:	ldrb	r2, [fp, #-76]	; 0xffffffb4
     7a0:	strb	r2, [r3]
     7a4:	ldr	r3, [fp, #12]
     7a8:	add	r3, r3, #3
     7ac:	str	r3, [fp, #12]
     7b0:	ldrd	r2, [fp, #-92]	; 0xffffffa4
     7b4:	adds	r1, r2, #24
     7b8:	str	r1, [fp, #-140]	; 0xffffff74
     7bc:	adc	r3, r3, #0
     7c0:	str	r3, [fp, #-136]	; 0xffffff78
     7c4:	ldrd	r2, [fp, #-140]	; 0xffffff74
     7c8:	strd	r2, [fp, #-92]	; 0xffffffa4
     7cc:	ldrd	r2, [fp, #4]
     7d0:	subs	r1, r2, #24
     7d4:	str	r1, [fp, #-148]	; 0xffffff6c
     7d8:	sbc	r3, r3, #0
     7dc:	str	r3, [fp, #-144]	; 0xffffff70
     7e0:	ldrd	r2, [fp, #-148]	; 0xffffff6c
     7e4:	strd	r2, [fp, #4]
     7e8:	ldrd	r2, [fp, #4]
     7ec:	cmp	r2, #1
     7f0:	sbcs	r3, r3, #0
     7f4:	bge	700 <read_bits+0x4fc>
     7f8:	mov	r3, #0
     7fc:	mov	r0, r3
     800:	sub	sp, fp, #28
     804:	ldrd	r4, [sp]
     808:	ldrd	r6, [sp, #8]
     80c:	ldrd	r8, [sp, #16]
     810:	ldr	fp, [sp, #24]
     814:	add	sp, sp, #28
     818:	pop	{pc}		; (ldr pc, [sp], #4)

0000081c <read_array>:
     81c:	str	fp, [sp, #-8]!
     820:	str	lr, [sp, #4]
     824:	add	fp, sp, #4
     828:	sub	sp, sp, #632	; 0x278
     82c:	str	r0, [fp, #-624]	; 0xfffffd90
     830:	str	r1, [fp, #-628]	; 0xfffffd8c
     834:	str	r2, [fp, #-632]	; 0xfffffd88
     838:	str	r3, [fp, #-636]	; 0xfffffd84
     83c:	sub	r2, fp, #580	; 0x244
     840:	sub	r3, fp, #584	; 0x248
     844:	mov	r1, r3
     848:	ldr	r0, [fp, #-624]	; 0xfffffd90
     84c:	bl	0 <coda_cursor_get_array_dim>
     850:	mov	r3, r0
     854:	cmp	r3, #0
     858:	beq	864 <read_array+0x48>
     85c:	mvn	r3, #0
     860:	b	c10 <read_array+0x3f4>
     864:	ldr	r2, [fp, #-624]	; 0xfffffd90
     868:	sub	r3, fp, #548	; 0x224
     86c:	mov	r1, r2
     870:	mov	r2, #520	; 0x208
     874:	mov	r0, r3
     878:	bl	0 <memcpy>
     87c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     880:	cmp	r3, #1
     884:	ble	894 <read_array+0x78>
     888:	ldr	r3, [fp, #4]
     88c:	cmp	r3, #1
     890:	beq	9b0 <read_array+0x194>
     894:	mov	r3, #1
     898:	str	r3, [fp, #-8]
     89c:	mov	r3, #0
     8a0:	str	r3, [fp, #-12]
     8a4:	b	8d4 <read_array+0xb8>
     8a8:	ldr	r3, [fp, #-12]
     8ac:	lsl	r3, r3, #2
     8b0:	sub	r2, fp, #4
     8b4:	add	r3, r2, r3
     8b8:	ldr	r2, [r3, #-576]	; 0xfffffdc0
     8bc:	ldr	r3, [fp, #-8]
     8c0:	mul	r3, r2, r3
     8c4:	str	r3, [fp, #-8]
     8c8:	ldr	r3, [fp, #-12]
     8cc:	add	r3, r3, #1
     8d0:	str	r3, [fp, #-12]
     8d4:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     8d8:	ldr	r2, [fp, #-12]
     8dc:	cmp	r2, r3
     8e0:	blt	8a8 <read_array+0x8c>
     8e4:	ldr	r3, [fp, #-8]
     8e8:	cmp	r3, #0
     8ec:	ble	c0c <read_array+0x3f0>
     8f0:	sub	r3, fp, #548	; 0x224
     8f4:	mov	r1, #0
     8f8:	mov	r0, r3
     8fc:	bl	0 <coda_cursor_goto_array_element_by_index>
     900:	mov	r3, r0
     904:	cmp	r3, #0
     908:	beq	914 <read_array+0xf8>
     90c:	mvn	r3, #0
     910:	b	c10 <read_array+0x3f4>
     914:	mov	r3, #0
     918:	str	r3, [fp, #-12]
     91c:	b	99c <read_array+0x180>
     920:	ldr	r3, [fp, #-12]
     924:	ldr	r2, [fp, #-636]	; 0xfffffd84
     928:	mul	r3, r2, r3
     92c:	mov	r2, r3
     930:	ldr	r3, [fp, #-632]	; 0xfffffd88
     934:	add	r1, r3, r2
     938:	sub	r2, fp, #548	; 0x224
     93c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     940:	mov	r0, r2
     944:	blx	r3
     948:	mov	r3, r0
     94c:	cmp	r3, #0
     950:	beq	95c <read_array+0x140>
     954:	mvn	r3, #0
     958:	b	c10 <read_array+0x3f4>
     95c:	ldr	r3, [fp, #-8]
     960:	sub	r3, r3, #1
     964:	ldr	r2, [fp, #-12]
     968:	cmp	r2, r3
     96c:	bge	990 <read_array+0x174>
     970:	sub	r3, fp, #548	; 0x224
     974:	mov	r0, r3
     978:	bl	0 <coda_cursor_goto_next_array_element>
     97c:	mov	r3, r0
     980:	cmp	r3, #0
     984:	beq	990 <read_array+0x174>
     988:	mvn	r3, #0
     98c:	b	c10 <read_array+0x3f4>
     990:	ldr	r3, [fp, #-12]
     994:	add	r3, r3, #1
     998:	str	r3, [fp, #-12]
     99c:	ldr	r2, [fp, #-12]
     9a0:	ldr	r3, [fp, #-8]
     9a4:	cmp	r2, r3
     9a8:	blt	920 <read_array+0x104>
     9ac:	b	c0c <read_array+0x3f0>
     9b0:	mov	r3, #1
     9b4:	str	r3, [fp, #-620]	; 0xfffffd94
     9b8:	mov	r3, #0
     9bc:	str	r3, [fp, #-12]
     9c0:	b	a14 <read_array+0x1f8>
     9c4:	ldr	r3, [fp, #-12]
     9c8:	lsl	r3, r3, #2
     9cc:	sub	r2, fp, #4
     9d0:	add	r3, r2, r3
     9d4:	ldr	r2, [r3, #-616]	; 0xfffffd98
     9d8:	ldr	r3, [fp, #-12]
     9dc:	lsl	r3, r3, #2
     9e0:	sub	r1, fp, #4
     9e4:	add	r3, r1, r3
     9e8:	ldr	r1, [r3, #-576]	; 0xfffffdc0
     9ec:	ldr	r3, [fp, #-12]
     9f0:	add	r3, r3, #1
     9f4:	mul	r2, r1, r2
     9f8:	lsl	r3, r3, #2
     9fc:	sub	r1, fp, #4
     a00:	add	r3, r1, r3
     a04:	str	r2, [r3, #-616]	; 0xfffffd98
     a08:	ldr	r3, [fp, #-12]
     a0c:	add	r3, r3, #1
     a10:	str	r3, [fp, #-12]
     a14:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     a18:	ldr	r2, [fp, #-12]
     a1c:	cmp	r2, r3
     a20:	blt	9c4 <read_array+0x1a8>
     a24:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     a28:	sub	r3, r3, #1
     a2c:	lsl	r3, r3, #2
     a30:	sub	r2, fp, #4
     a34:	add	r3, r2, r3
     a38:	ldr	r3, [r3, #-616]	; 0xfffffd98
     a3c:	str	r3, [fp, #-24]	; 0xffffffe8
     a40:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     a44:	lsl	r3, r3, #2
     a48:	sub	r2, fp, #4
     a4c:	add	r3, r2, r3
     a50:	ldr	r3, [r3, #-616]	; 0xfffffd98
     a54:	str	r3, [fp, #-8]
     a58:	ldr	r3, [fp, #-8]
     a5c:	cmp	r3, #0
     a60:	ble	c0c <read_array+0x3f0>
     a64:	mov	r3, #0
     a68:	str	r3, [fp, #-16]
     a6c:	mov	r3, #0
     a70:	str	r3, [fp, #-20]	; 0xffffffec
     a74:	sub	r3, fp, #548	; 0x224
     a78:	mov	r1, #0
     a7c:	mov	r0, r3
     a80:	bl	0 <coda_cursor_goto_array_element_by_index>
     a84:	mov	r3, r0
     a88:	cmp	r3, #0
     a8c:	beq	a98 <read_array+0x27c>
     a90:	mvn	r3, #0
     a94:	b	c10 <read_array+0x3f4>
     a98:	ldr	r3, [fp, #-20]	; 0xffffffec
     a9c:	ldr	r2, [fp, #-636]	; 0xfffffd84
     aa0:	mul	r3, r2, r3
     aa4:	mov	r2, r3
     aa8:	ldr	r3, [fp, #-632]	; 0xfffffd88
     aac:	add	r1, r3, r2
     ab0:	sub	r2, fp, #548	; 0x224
     ab4:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     ab8:	mov	r0, r2
     abc:	blx	r3
     ac0:	mov	r3, r0
     ac4:	cmp	r3, #0
     ac8:	beq	ad4 <read_array+0x2b8>
     acc:	mvn	r3, #0
     ad0:	b	c10 <read_array+0x3f4>
     ad4:	ldr	r3, [fp, #-16]
     ad8:	add	r3, r3, #1
     adc:	str	r3, [fp, #-16]
     ae0:	ldr	r2, [fp, #-16]
     ae4:	ldr	r3, [fp, #-8]
     ae8:	cmp	r2, r3
     aec:	bge	b10 <read_array+0x2f4>
     af0:	sub	r3, fp, #548	; 0x224
     af4:	mov	r0, r3
     af8:	bl	0 <coda_cursor_goto_next_array_element>
     afc:	mov	r3, r0
     b00:	cmp	r3, #0
     b04:	beq	b10 <read_array+0x2f4>
     b08:	mvn	r3, #0
     b0c:	b	c10 <read_array+0x3f4>
     b10:	ldr	r2, [fp, #-20]	; 0xffffffec
     b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b18:	add	r3, r2, r3
     b1c:	str	r3, [fp, #-20]	; 0xffffffec
     b20:	ldr	r2, [fp, #-20]	; 0xffffffec
     b24:	ldr	r3, [fp, #-8]
     b28:	cmp	r2, r3
     b2c:	blt	a98 <read_array+0x27c>
     b30:	ldr	r2, [fp, #-16]
     b34:	ldr	r3, [fp, #-8]
     b38:	cmp	r2, r3
     b3c:	beq	c08 <read_array+0x3ec>
     b40:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     b44:	sub	r3, r3, #2
     b48:	lsl	r3, r3, #2
     b4c:	sub	r2, fp, #4
     b50:	add	r3, r2, r3
     b54:	ldr	r2, [r3, #-616]	; 0xfffffd98
     b58:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     b5c:	lsl	r3, r3, #2
     b60:	sub	r1, fp, #4
     b64:	add	r3, r1, r3
     b68:	ldr	r3, [r3, #-616]	; 0xfffffd98
     b6c:	sub	r3, r2, r3
     b70:	ldr	r2, [fp, #-20]	; 0xffffffec
     b74:	add	r3, r2, r3
     b78:	str	r3, [fp, #-20]	; 0xffffffec
     b7c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     b80:	sub	r3, r3, #3
     b84:	str	r3, [fp, #-12]
     b88:	b	bd4 <read_array+0x3b8>
     b8c:	ldr	r3, [fp, #-12]
     b90:	lsl	r3, r3, #2
     b94:	sub	r2, fp, #4
     b98:	add	r3, r2, r3
     b9c:	ldr	r2, [r3, #-616]	; 0xfffffd98
     ba0:	ldr	r3, [fp, #-12]
     ba4:	add	r3, r3, #2
     ba8:	lsl	r3, r3, #2
     bac:	sub	r1, fp, #4
     bb0:	add	r3, r1, r3
     bb4:	ldr	r3, [r3, #-616]	; 0xfffffd98
     bb8:	sub	r3, r2, r3
     bbc:	ldr	r2, [fp, #-20]	; 0xffffffec
     bc0:	add	r3, r2, r3
     bc4:	str	r3, [fp, #-20]	; 0xffffffec
     bc8:	ldr	r3, [fp, #-12]
     bcc:	sub	r3, r3, #1
     bd0:	str	r3, [fp, #-12]
     bd4:	ldr	r3, [fp, #-12]
     bd8:	cmp	r3, #0
     bdc:	blt	a98 <read_array+0x27c>
     be0:	ldr	r3, [fp, #-12]
     be4:	add	r3, r3, #2
     be8:	lsl	r3, r3, #2
     bec:	sub	r2, fp, #4
     bf0:	add	r3, r2, r3
     bf4:	ldr	r3, [r3, #-616]	; 0xfffffd98
     bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
     bfc:	cmp	r2, r3
     c00:	bge	b8c <read_array+0x370>
     c04:	b	a98 <read_array+0x27c>
     c08:	nop	{0}
     c0c:	mov	r3, #0
     c10:	mov	r0, r3
     c14:	sub	sp, fp, #4
     c18:	ldr	fp, [sp]
     c1c:	add	sp, sp, #4
     c20:	pop	{pc}		; (ldr pc, [sp], #4)

00000c24 <read_partial_array>:
     c24:	str	fp, [sp, #-8]!
     c28:	str	lr, [sp, #4]
     c2c:	add	fp, sp, #4
     c30:	sub	sp, sp, #544	; 0x220
     c34:	str	r0, [fp, #-536]	; 0xfffffde8
     c38:	str	r1, [fp, #-540]	; 0xfffffde4
     c3c:	str	r2, [fp, #-544]	; 0xfffffde0
     c40:	str	r3, [fp, #-548]	; 0xfffffddc
     c44:	ldr	r2, [fp, #-536]	; 0xfffffde8
     c48:	sub	r3, fp, #532	; 0x214
     c4c:	mov	r1, r2
     c50:	mov	r2, #520	; 0x208
     c54:	mov	r0, r3
     c58:	bl	0 <memcpy>
     c5c:	ldr	r3, [fp, #-548]	; 0xfffffddc
     c60:	cmp	r3, #0
     c64:	ble	d24 <read_partial_array+0x100>
     c68:	sub	r3, fp, #532	; 0x214
     c6c:	ldr	r1, [fp, #-544]	; 0xfffffde0
     c70:	mov	r0, r3
     c74:	bl	0 <coda_cursor_goto_array_element_by_index>
     c78:	mov	r3, r0
     c7c:	cmp	r3, #0
     c80:	beq	c8c <read_partial_array+0x68>
     c84:	mvn	r3, #0
     c88:	b	d28 <read_partial_array+0x104>
     c8c:	mov	r3, #0
     c90:	str	r3, [fp, #-8]
     c94:	b	d14 <read_partial_array+0xf0>
     c98:	ldr	r3, [fp, #-8]
     c9c:	ldr	r2, [fp, #8]
     ca0:	mul	r3, r2, r3
     ca4:	mov	r2, r3
     ca8:	ldr	r3, [fp, #4]
     cac:	add	r1, r3, r2
     cb0:	sub	r2, fp, #532	; 0x214
     cb4:	ldr	r3, [fp, #-540]	; 0xfffffde4
     cb8:	mov	r0, r2
     cbc:	blx	r3
     cc0:	mov	r3, r0
     cc4:	cmp	r3, #0
     cc8:	beq	cd4 <read_partial_array+0xb0>
     ccc:	mvn	r3, #0
     cd0:	b	d28 <read_partial_array+0x104>
     cd4:	ldr	r3, [fp, #-548]	; 0xfffffddc
     cd8:	sub	r3, r3, #1
     cdc:	ldr	r2, [fp, #-8]
     ce0:	cmp	r2, r3
     ce4:	bge	d08 <read_partial_array+0xe4>
     ce8:	sub	r3, fp, #532	; 0x214
     cec:	mov	r0, r3
     cf0:	bl	0 <coda_cursor_goto_next_array_element>
     cf4:	mov	r3, r0
     cf8:	cmp	r3, #0
     cfc:	beq	d08 <read_partial_array+0xe4>
     d00:	mvn	r3, #0
     d04:	b	d28 <read_partial_array+0x104>
     d08:	ldr	r3, [fp, #-8]
     d0c:	add	r3, r3, #1
     d10:	str	r3, [fp, #-8]
     d14:	ldr	r2, [fp, #-8]
     d18:	ldr	r3, [fp, #-548]	; 0xfffffddc
     d1c:	cmp	r2, r3
     d20:	blt	c98 <read_partial_array+0x74>
     d24:	mov	r3, #0
     d28:	mov	r0, r3
     d2c:	sub	sp, fp, #4
     d30:	ldr	fp, [sp]
     d34:	add	sp, sp, #4
     d38:	pop	{pc}		; (ldr pc, [sp], #4)

00000d3c <transpose_array>:
     d3c:	str	fp, [sp, #-8]!
     d40:	str	lr, [sp, #4]
     d44:	add	fp, sp, #4
     d48:	sub	sp, sp, #208	; 0xd0
     d4c:	str	r0, [fp, #-192]	; 0xffffff40
     d50:	str	r1, [fp, #-196]	; 0xffffff3c
     d54:	str	r2, [fp, #-200]	; 0xffffff38
     d58:	mov	r3, #0
     d5c:	str	r3, [fp, #-12]
     d60:	sub	r2, fp, #72	; 0x48
     d64:	sub	r3, fp, #76	; 0x4c
     d68:	mov	r1, r3
     d6c:	ldr	r0, [fp, #-192]	; 0xffffff40
     d70:	bl	0 <coda_cursor_get_array_dim>
     d74:	mov	r3, r0
     d78:	cmp	r3, #0
     d7c:	beq	d88 <transpose_array+0x4c>
     d80:	mvn	r3, #0
     d84:	b	160c <transpose_array+0x8d0>
     d88:	ldr	r3, [fp, #-76]	; 0xffffffb4
     d8c:	cmp	r3, #1
     d90:	bgt	d9c <transpose_array+0x60>
     d94:	mov	r3, #0
     d98:	b	160c <transpose_array+0x8d0>
     d9c:	ldr	r3, [fp, #-196]	; 0xffffff3c
     da0:	str	r3, [fp, #-36]	; 0xffffffdc
     da4:	mov	r3, #1
     da8:	str	r3, [fp, #-8]
     dac:	mov	r3, #0
     db0:	str	r3, [fp, #-16]
     db4:	b	e30 <transpose_array+0xf4>
     db8:	ldr	r3, [fp, #-16]
     dbc:	lsl	r3, r3, #2
     dc0:	sub	r2, fp, #4
     dc4:	add	r3, r2, r3
     dc8:	ldr	r2, [r3, #-68]	; 0xffffffbc
     dcc:	ldr	r3, [fp, #-8]
     dd0:	mul	r3, r2, r3
     dd4:	str	r3, [fp, #-8]
     dd8:	ldr	r3, [fp, #-16]
     ddc:	lsl	r3, r3, #2
     de0:	sub	r2, fp, #4
     de4:	add	r3, r2, r3
     de8:	mov	r2, #0
     dec:	str	r2, [r3, #-144]	; 0xffffff70
     df0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     df4:	sub	r2, r3, #1
     df8:	ldr	r3, [fp, #-16]
     dfc:	sub	r3, r2, r3
     e00:	lsl	r3, r3, #2
     e04:	sub	r2, fp, #4
     e08:	add	r3, r2, r3
     e0c:	ldr	r2, [r3, #-68]	; 0xffffffbc
     e10:	ldr	r3, [fp, #-16]
     e14:	lsl	r3, r3, #2
     e18:	sub	r1, fp, #4
     e1c:	add	r3, r1, r3
     e20:	str	r2, [r3, #-180]	; 0xffffff4c
     e24:	ldr	r3, [fp, #-16]
     e28:	add	r3, r3, #1
     e2c:	str	r3, [fp, #-16]
     e30:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e34:	ldr	r2, [fp, #-16]
     e38:	cmp	r2, r3
     e3c:	blt	db8 <transpose_array+0x7c>
     e40:	ldr	r3, [fp, #-8]
     e44:	cmp	r3, #1
     e48:	bgt	e54 <transpose_array+0x118>
     e4c:	mov	r3, #0
     e50:	b	160c <transpose_array+0x8d0>
     e54:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e58:	lsl	r3, r3, #2
     e5c:	sub	r2, fp, #4
     e60:	add	r3, r2, r3
     e64:	mov	r2, #1
     e68:	str	r2, [r3, #-108]	; 0xffffff94
     e6c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e70:	lsl	r3, r3, #2
     e74:	sub	r2, fp, #4
     e78:	add	r3, r2, r3
     e7c:	mov	r2, #1
     e80:	str	r2, [r3, #-180]	; 0xffffff4c
     e84:	ldr	r3, [fp, #-76]	; 0xffffffb4
     e88:	str	r3, [fp, #-16]
     e8c:	b	ee0 <transpose_array+0x1a4>
     e90:	ldr	r3, [fp, #-16]
     e94:	lsl	r3, r3, #2
     e98:	sub	r2, fp, #4
     e9c:	add	r3, r2, r3
     ea0:	ldr	r2, [r3, #-108]	; 0xffffff94
     ea4:	ldr	r3, [fp, #-16]
     ea8:	lsl	r3, r3, #2
     eac:	sub	r1, fp, #4
     eb0:	add	r3, r1, r3
     eb4:	ldr	r1, [r3, #-180]	; 0xffffff4c
     eb8:	ldr	r3, [fp, #-16]
     ebc:	sub	r3, r3, #1
     ec0:	mul	r2, r1, r2
     ec4:	lsl	r3, r3, #2
     ec8:	sub	r1, fp, #4
     ecc:	add	r3, r1, r3
     ed0:	str	r2, [r3, #-108]	; 0xffffff94
     ed4:	ldr	r3, [fp, #-16]
     ed8:	sub	r3, r3, #1
     edc:	str	r3, [fp, #-16]
     ee0:	ldr	r3, [fp, #-16]
     ee4:	cmp	r3, #0
     ee8:	bgt	e90 <transpose_array+0x154>
     eec:	ldr	r3, [fp, #-76]	; 0xffffffb4
     ef0:	lsl	r3, r3, #2
     ef4:	sub	r2, fp, #4
     ef8:	add	r3, r2, r3
     efc:	mov	r2, #0
     f00:	str	r2, [r3, #-180]	; 0xffffff4c
     f04:	ldr	r3, [fp, #-76]	; 0xffffffb4
     f08:	lsl	r3, r3, #2
     f0c:	sub	r2, fp, #4
     f10:	add	r3, r2, r3
     f14:	mov	r2, #0
     f18:	str	r2, [r3, #-144]	; 0xffffff70
     f1c:	ldr	r3, [fp, #-8]
     f20:	ldr	r2, [fp, #-200]	; 0xffffff38
     f24:	mul	r3, r2, r3
     f28:	mov	r0, r3
     f2c:	bl	0 <malloc>
     f30:	mov	r3, r0
     f34:	str	r3, [fp, #-40]	; 0xffffffd8
     f38:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f3c:	cmp	r3, #0
     f40:	bne	f78 <transpose_array+0x23c>
     f44:	ldr	r3, [fp, #-8]
     f48:	ldr	r2, [fp, #-200]	; 0xffffff38
     f4c:	mul	r2, r2, r3
     f50:	mov	r3, #93	; 0x5d
     f54:	str	r3, [sp]
     f58:	movw	r3, #0
     f5c:	movt	r3, #0
     f60:	movw	r1, #0
     f64:	movt	r1, #0
     f68:	mvn	r0, #0
     f6c:	bl	0 <coda_set_error>
     f70:	mvn	r3, #0
     f74:	b	160c <transpose_array+0x8d0>
     f78:	ldr	r3, [fp, #-200]	; 0xffffff38
     f7c:	sub	r3, r3, #1
     f80:	cmp	r3, #7
     f84:	ldrls	pc, [pc, r3, lsl #2]
     f88:	b	15c4 <transpose_array+0x888>
     f8c:	.word	0x00000fac
     f90:	.word	0x0000112c
     f94:	.word	0x000015c4
     f98:	.word	0x000012b4
     f9c:	.word	0x000015c4
     fa0:	.word	0x000015c4
     fa4:	.word	0x000015c4
     fa8:	.word	0x0000143c
     fac:	mov	r3, #0
     fb0:	str	r3, [fp, #-16]
     fb4:	b	1118 <transpose_array+0x3dc>
     fb8:	mov	r3, #0
     fbc:	str	r3, [fp, #-20]	; 0xffffffec
     fc0:	ldr	r3, [fp, #-16]
     fc4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     fc8:	add	r2, r2, r3
     fcc:	ldr	r3, [fp, #-12]
     fd0:	ldr	r1, [fp, #-40]	; 0xffffffd8
     fd4:	add	r3, r1, r3
     fd8:	ldrb	r2, [r2]
     fdc:	strb	r2, [r3]
     fe0:	ldr	r3, [fp, #-20]	; 0xffffffec
     fe4:	lsl	r3, r3, #2
     fe8:	sub	r2, fp, #4
     fec:	add	r3, r2, r3
     ff0:	ldr	r3, [r3, #-108]	; 0xffffff94
     ff4:	ldr	r2, [fp, #-12]
     ff8:	add	r3, r2, r3
     ffc:	str	r3, [fp, #-12]
    1000:	ldr	r3, [fp, #-20]	; 0xffffffec
    1004:	lsl	r3, r3, #2
    1008:	sub	r2, fp, #4
    100c:	add	r3, r2, r3
    1010:	ldr	r3, [r3, #-144]	; 0xffffff70
    1014:	add	r2, r3, #1
    1018:	ldr	r3, [fp, #-20]	; 0xffffffec
    101c:	lsl	r3, r3, #2
    1020:	sub	r1, fp, #4
    1024:	add	r3, r1, r3
    1028:	str	r2, [r3, #-144]	; 0xffffff70
    102c:	b	10d8 <transpose_array+0x39c>
    1030:	ldr	r3, [fp, #-20]	; 0xffffffec
    1034:	lsl	r3, r3, #2
    1038:	sub	r2, fp, #4
    103c:	add	r3, r2, r3
    1040:	mov	r2, #0
    1044:	str	r2, [r3, #-144]	; 0xffffff70
    1048:	ldr	r3, [fp, #-20]	; 0xffffffec
    104c:	lsl	r3, r3, #2
    1050:	sub	r2, fp, #4
    1054:	add	r3, r2, r3
    1058:	ldr	r2, [r3, #-108]	; 0xffffff94
    105c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1060:	lsl	r3, r3, #2
    1064:	sub	r1, fp, #4
    1068:	add	r3, r1, r3
    106c:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1070:	mul	r3, r3, r2
    1074:	ldr	r2, [fp, #-12]
    1078:	sub	r3, r2, r3
    107c:	str	r3, [fp, #-12]
    1080:	ldr	r3, [fp, #-20]	; 0xffffffec
    1084:	add	r3, r3, #1
    1088:	str	r3, [fp, #-20]	; 0xffffffec
    108c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1090:	lsl	r3, r3, #2
    1094:	sub	r2, fp, #4
    1098:	add	r3, r2, r3
    109c:	ldr	r3, [r3, #-108]	; 0xffffff94
    10a0:	ldr	r2, [fp, #-12]
    10a4:	add	r3, r2, r3
    10a8:	str	r3, [fp, #-12]
    10ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    10b0:	lsl	r3, r3, #2
    10b4:	sub	r2, fp, #4
    10b8:	add	r3, r2, r3
    10bc:	ldr	r3, [r3, #-144]	; 0xffffff70
    10c0:	add	r2, r3, #1
    10c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    10c8:	lsl	r3, r3, #2
    10cc:	sub	r1, fp, #4
    10d0:	add	r3, r1, r3
    10d4:	str	r2, [r3, #-144]	; 0xffffff70
    10d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    10dc:	lsl	r3, r3, #2
    10e0:	sub	r2, fp, #4
    10e4:	add	r3, r2, r3
    10e8:	ldr	r2, [r3, #-144]	; 0xffffff70
    10ec:	ldr	r3, [fp, #-20]	; 0xffffffec
    10f0:	lsl	r3, r3, #2
    10f4:	sub	r1, fp, #4
    10f8:	add	r3, r1, r3
    10fc:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1100:	cmp	r2, r3
    1104:	beq	1030 <transpose_array+0x2f4>
    1108:	nop	{0}
    110c:	ldr	r3, [fp, #-16]
    1110:	add	r3, r3, #1
    1114:	str	r3, [fp, #-16]
    1118:	ldr	r2, [fp, #-16]
    111c:	ldr	r3, [fp, #-8]
    1120:	cmp	r2, r3
    1124:	blt	fb8 <transpose_array+0x27c>
    1128:	b	15e4 <transpose_array+0x8a8>
    112c:	mov	r3, #0
    1130:	str	r3, [fp, #-16]
    1134:	b	12a0 <transpose_array+0x564>
    1138:	mov	r3, #0
    113c:	str	r3, [fp, #-24]	; 0xffffffe8
    1140:	ldr	r3, [fp, #-16]
    1144:	lsl	r3, r3, #1
    1148:	ldr	r2, [fp, #-36]	; 0xffffffdc
    114c:	add	r2, r2, r3
    1150:	ldr	r3, [fp, #-12]
    1154:	lsl	r3, r3, #1
    1158:	ldr	r1, [fp, #-40]	; 0xffffffd8
    115c:	add	r3, r1, r3
    1160:	ldrh	r2, [r2]
    1164:	strh	r2, [r3]
    1168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    116c:	lsl	r3, r3, #2
    1170:	sub	r2, fp, #4
    1174:	add	r3, r2, r3
    1178:	ldr	r3, [r3, #-108]	; 0xffffff94
    117c:	ldr	r2, [fp, #-12]
    1180:	add	r3, r2, r3
    1184:	str	r3, [fp, #-12]
    1188:	ldr	r3, [fp, #-24]	; 0xffffffe8
    118c:	lsl	r3, r3, #2
    1190:	sub	r2, fp, #4
    1194:	add	r3, r2, r3
    1198:	ldr	r3, [r3, #-144]	; 0xffffff70
    119c:	add	r2, r3, #1
    11a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11a4:	lsl	r3, r3, #2
    11a8:	sub	r1, fp, #4
    11ac:	add	r3, r1, r3
    11b0:	str	r2, [r3, #-144]	; 0xffffff70
    11b4:	b	1260 <transpose_array+0x524>
    11b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11bc:	lsl	r3, r3, #2
    11c0:	sub	r2, fp, #4
    11c4:	add	r3, r2, r3
    11c8:	mov	r2, #0
    11cc:	str	r2, [r3, #-144]	; 0xffffff70
    11d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11d4:	lsl	r3, r3, #2
    11d8:	sub	r2, fp, #4
    11dc:	add	r3, r2, r3
    11e0:	ldr	r2, [r3, #-108]	; 0xffffff94
    11e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11e8:	lsl	r3, r3, #2
    11ec:	sub	r1, fp, #4
    11f0:	add	r3, r1, r3
    11f4:	ldr	r3, [r3, #-180]	; 0xffffff4c
    11f8:	mul	r3, r3, r2
    11fc:	ldr	r2, [fp, #-12]
    1200:	sub	r3, r2, r3
    1204:	str	r3, [fp, #-12]
    1208:	ldr	r3, [fp, #-24]	; 0xffffffe8
    120c:	add	r3, r3, #1
    1210:	str	r3, [fp, #-24]	; 0xffffffe8
    1214:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1218:	lsl	r3, r3, #2
    121c:	sub	r2, fp, #4
    1220:	add	r3, r2, r3
    1224:	ldr	r3, [r3, #-108]	; 0xffffff94
    1228:	ldr	r2, [fp, #-12]
    122c:	add	r3, r2, r3
    1230:	str	r3, [fp, #-12]
    1234:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1238:	lsl	r3, r3, #2
    123c:	sub	r2, fp, #4
    1240:	add	r3, r2, r3
    1244:	ldr	r3, [r3, #-144]	; 0xffffff70
    1248:	add	r2, r3, #1
    124c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1250:	lsl	r3, r3, #2
    1254:	sub	r1, fp, #4
    1258:	add	r3, r1, r3
    125c:	str	r2, [r3, #-144]	; 0xffffff70
    1260:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1264:	lsl	r3, r3, #2
    1268:	sub	r2, fp, #4
    126c:	add	r3, r2, r3
    1270:	ldr	r2, [r3, #-144]	; 0xffffff70
    1274:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1278:	lsl	r3, r3, #2
    127c:	sub	r1, fp, #4
    1280:	add	r3, r1, r3
    1284:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1288:	cmp	r2, r3
    128c:	beq	11b8 <transpose_array+0x47c>
    1290:	nop	{0}
    1294:	ldr	r3, [fp, #-16]
    1298:	add	r3, r3, #1
    129c:	str	r3, [fp, #-16]
    12a0:	ldr	r2, [fp, #-16]
    12a4:	ldr	r3, [fp, #-8]
    12a8:	cmp	r2, r3
    12ac:	blt	1138 <transpose_array+0x3fc>
    12b0:	b	15e4 <transpose_array+0x8a8>
    12b4:	mov	r3, #0
    12b8:	str	r3, [fp, #-16]
    12bc:	b	1428 <transpose_array+0x6ec>
    12c0:	mov	r3, #0
    12c4:	str	r3, [fp, #-28]	; 0xffffffe4
    12c8:	ldr	r3, [fp, #-16]
    12cc:	lsl	r3, r3, #2
    12d0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    12d4:	add	r2, r2, r3
    12d8:	ldr	r3, [fp, #-12]
    12dc:	lsl	r3, r3, #2
    12e0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    12e4:	add	r3, r1, r3
    12e8:	ldr	r2, [r2]
    12ec:	str	r2, [r3]
    12f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    12f4:	lsl	r3, r3, #2
    12f8:	sub	r2, fp, #4
    12fc:	add	r3, r2, r3
    1300:	ldr	r3, [r3, #-108]	; 0xffffff94
    1304:	ldr	r2, [fp, #-12]
    1308:	add	r3, r2, r3
    130c:	str	r3, [fp, #-12]
    1310:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1314:	lsl	r3, r3, #2
    1318:	sub	r2, fp, #4
    131c:	add	r3, r2, r3
    1320:	ldr	r3, [r3, #-144]	; 0xffffff70
    1324:	add	r2, r3, #1
    1328:	ldr	r3, [fp, #-28]	; 0xffffffe4
    132c:	lsl	r3, r3, #2
    1330:	sub	r1, fp, #4
    1334:	add	r3, r1, r3
    1338:	str	r2, [r3, #-144]	; 0xffffff70
    133c:	b	13e8 <transpose_array+0x6ac>
    1340:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1344:	lsl	r3, r3, #2
    1348:	sub	r2, fp, #4
    134c:	add	r3, r2, r3
    1350:	mov	r2, #0
    1354:	str	r2, [r3, #-144]	; 0xffffff70
    1358:	ldr	r3, [fp, #-28]	; 0xffffffe4
    135c:	lsl	r3, r3, #2
    1360:	sub	r2, fp, #4
    1364:	add	r3, r2, r3
    1368:	ldr	r2, [r3, #-108]	; 0xffffff94
    136c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1370:	lsl	r3, r3, #2
    1374:	sub	r1, fp, #4
    1378:	add	r3, r1, r3
    137c:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1380:	mul	r3, r3, r2
    1384:	ldr	r2, [fp, #-12]
    1388:	sub	r3, r2, r3
    138c:	str	r3, [fp, #-12]
    1390:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1394:	add	r3, r3, #1
    1398:	str	r3, [fp, #-28]	; 0xffffffe4
    139c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13a0:	lsl	r3, r3, #2
    13a4:	sub	r2, fp, #4
    13a8:	add	r3, r2, r3
    13ac:	ldr	r3, [r3, #-108]	; 0xffffff94
    13b0:	ldr	r2, [fp, #-12]
    13b4:	add	r3, r2, r3
    13b8:	str	r3, [fp, #-12]
    13bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13c0:	lsl	r3, r3, #2
    13c4:	sub	r2, fp, #4
    13c8:	add	r3, r2, r3
    13cc:	ldr	r3, [r3, #-144]	; 0xffffff70
    13d0:	add	r2, r3, #1
    13d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13d8:	lsl	r3, r3, #2
    13dc:	sub	r1, fp, #4
    13e0:	add	r3, r1, r3
    13e4:	str	r2, [r3, #-144]	; 0xffffff70
    13e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    13ec:	lsl	r3, r3, #2
    13f0:	sub	r2, fp, #4
    13f4:	add	r3, r2, r3
    13f8:	ldr	r2, [r3, #-144]	; 0xffffff70
    13fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1400:	lsl	r3, r3, #2
    1404:	sub	r1, fp, #4
    1408:	add	r3, r1, r3
    140c:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1410:	cmp	r2, r3
    1414:	beq	1340 <transpose_array+0x604>
    1418:	nop	{0}
    141c:	ldr	r3, [fp, #-16]
    1420:	add	r3, r3, #1
    1424:	str	r3, [fp, #-16]
    1428:	ldr	r2, [fp, #-16]
    142c:	ldr	r3, [fp, #-8]
    1430:	cmp	r2, r3
    1434:	blt	12c0 <transpose_array+0x584>
    1438:	b	15e4 <transpose_array+0x8a8>
    143c:	mov	r3, #0
    1440:	str	r3, [fp, #-16]
    1444:	b	15b0 <transpose_array+0x874>
    1448:	mov	r3, #0
    144c:	str	r3, [fp, #-32]	; 0xffffffe0
    1450:	ldr	r3, [fp, #-16]
    1454:	lsl	r3, r3, #3
    1458:	ldr	r2, [fp, #-36]	; 0xffffffdc
    145c:	add	r3, r2, r3
    1460:	ldr	r2, [fp, #-12]
    1464:	lsl	r2, r2, #3
    1468:	ldr	r1, [fp, #-40]	; 0xffffffd8
    146c:	add	r1, r1, r2
    1470:	ldrd	r2, [r3]
    1474:	strd	r2, [r1]
    1478:	ldr	r3, [fp, #-32]	; 0xffffffe0
    147c:	lsl	r3, r3, #2
    1480:	sub	r2, fp, #4
    1484:	add	r3, r2, r3
    1488:	ldr	r3, [r3, #-108]	; 0xffffff94
    148c:	ldr	r2, [fp, #-12]
    1490:	add	r3, r2, r3
    1494:	str	r3, [fp, #-12]
    1498:	ldr	r3, [fp, #-32]	; 0xffffffe0
    149c:	lsl	r3, r3, #2
    14a0:	sub	r2, fp, #4
    14a4:	add	r3, r2, r3
    14a8:	ldr	r3, [r3, #-144]	; 0xffffff70
    14ac:	add	r2, r3, #1
    14b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14b4:	lsl	r3, r3, #2
    14b8:	sub	r1, fp, #4
    14bc:	add	r3, r1, r3
    14c0:	str	r2, [r3, #-144]	; 0xffffff70
    14c4:	b	1570 <transpose_array+0x834>
    14c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14cc:	lsl	r3, r3, #2
    14d0:	sub	r2, fp, #4
    14d4:	add	r3, r2, r3
    14d8:	mov	r2, #0
    14dc:	str	r2, [r3, #-144]	; 0xffffff70
    14e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14e4:	lsl	r3, r3, #2
    14e8:	sub	r2, fp, #4
    14ec:	add	r3, r2, r3
    14f0:	ldr	r2, [r3, #-108]	; 0xffffff94
    14f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    14f8:	lsl	r3, r3, #2
    14fc:	sub	r1, fp, #4
    1500:	add	r3, r1, r3
    1504:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1508:	mul	r3, r3, r2
    150c:	ldr	r2, [fp, #-12]
    1510:	sub	r3, r2, r3
    1514:	str	r3, [fp, #-12]
    1518:	ldr	r3, [fp, #-32]	; 0xffffffe0
    151c:	add	r3, r3, #1
    1520:	str	r3, [fp, #-32]	; 0xffffffe0
    1524:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1528:	lsl	r3, r3, #2
    152c:	sub	r2, fp, #4
    1530:	add	r3, r2, r3
    1534:	ldr	r3, [r3, #-108]	; 0xffffff94
    1538:	ldr	r2, [fp, #-12]
    153c:	add	r3, r2, r3
    1540:	str	r3, [fp, #-12]
    1544:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1548:	lsl	r3, r3, #2
    154c:	sub	r2, fp, #4
    1550:	add	r3, r2, r3
    1554:	ldr	r3, [r3, #-144]	; 0xffffff70
    1558:	add	r2, r3, #1
    155c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1560:	lsl	r3, r3, #2
    1564:	sub	r1, fp, #4
    1568:	add	r3, r1, r3
    156c:	str	r2, [r3, #-144]	; 0xffffff70
    1570:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1574:	lsl	r3, r3, #2
    1578:	sub	r2, fp, #4
    157c:	add	r3, r2, r3
    1580:	ldr	r2, [r3, #-144]	; 0xffffff70
    1584:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1588:	lsl	r3, r3, #2
    158c:	sub	r1, fp, #4
    1590:	add	r3, r1, r3
    1594:	ldr	r3, [r3, #-180]	; 0xffffff4c
    1598:	cmp	r2, r3
    159c:	beq	14c8 <transpose_array+0x78c>
    15a0:	nop	{0}
    15a4:	ldr	r3, [fp, #-16]
    15a8:	add	r3, r3, #1
    15ac:	str	r3, [fp, #-16]
    15b0:	ldr	r2, [fp, #-16]
    15b4:	ldr	r3, [fp, #-8]
    15b8:	cmp	r2, r3
    15bc:	blt	1448 <transpose_array+0x70c>
    15c0:	b	15e4 <transpose_array+0x8a8>
    15c4:	movw	r3, #0
    15c8:	movt	r3, #0
    15cc:	mov	r2, #172	; 0xac
    15d0:	movw	r1, #0
    15d4:	movt	r1, #0
    15d8:	movw	r0, #0
    15dc:	movt	r0, #0
    15e0:	bl	0 <__assert_fail>
    15e4:	ldr	r3, [fp, #-8]
    15e8:	ldr	r2, [fp, #-200]	; 0xffffff38
    15ec:	mul	r3, r2, r3
    15f0:	mov	r2, r3
    15f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    15f8:	ldr	r0, [fp, #-196]	; 0xffffff3c
    15fc:	bl	0 <memcpy>
    1600:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1604:	bl	0 <free>
    1608:	mov	r3, #0
    160c:	mov	r0, r3
    1610:	sub	sp, fp, #4
    1614:	ldr	fp, [sp]
    1618:	add	sp, sp, #4
    161c:	pop	{pc}		; (ldr pc, [sp], #4)

00001620 <coda_bin_cursor_get_bit_size>:
    1620:	str	fp, [sp, #-8]!
    1624:	str	lr, [sp, #4]
    1628:	add	fp, sp, #4
    162c:	sub	sp, sp, #536	; 0x218
    1630:	str	r0, [fp, #-536]	; 0xfffffde8
    1634:	str	r1, [fp, #-540]	; 0xfffffde4
    1638:	ldr	r3, [fp, #-536]	; 0xfffffde8
    163c:	ldr	r3, [r3, #4]
    1640:	sub	r3, r3, #1
    1644:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1648:	lsl	r3, r3, #4
    164c:	add	r3, r2, r3
    1650:	ldr	r3, [r3, #8]
    1654:	ldr	r3, [r3]
    1658:	cmp	r3, #99	; 0x63
    165c:	bhi	1680 <coda_bin_cursor_get_bit_size+0x60>
    1660:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1664:	ldr	r3, [r3, #4]
    1668:	sub	r3, r3, #1
    166c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1670:	lsl	r3, r3, #4
    1674:	add	r3, r2, r3
    1678:	ldr	r3, [r3, #8]
    167c:	b	16a0 <coda_bin_cursor_get_bit_size+0x80>
    1680:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1684:	ldr	r3, [r3, #4]
    1688:	sub	r3, r3, #1
    168c:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1690:	lsl	r3, r3, #4
    1694:	add	r3, r2, r3
    1698:	ldr	r3, [r3, #8]
    169c:	ldr	r3, [r3, #4]
    16a0:	str	r3, [fp, #-8]
    16a4:	ldr	r3, [fp, #-8]
    16a8:	ldrd	r2, [r3, #24]
    16ac:	cmp	r2, #0
    16b0:	sbcs	r3, r3, #0
    16b4:	blt	16d0 <coda_bin_cursor_get_bit_size+0xb0>
    16b8:	ldr	r3, [fp, #-8]
    16bc:	ldrd	r2, [r3, #24]
    16c0:	ldr	r1, [fp, #-540]	; 0xfffffde4
    16c4:	strd	r2, [r1]
    16c8:	mov	r3, #0
    16cc:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    16d0:	ldr	r3, [fp, #-8]
    16d4:	ldr	r3, [r3, #8]
    16d8:	cmp	r3, #6
    16dc:	ldrls	pc, [pc, r3, lsl #2]
    16e0:	b	1868 <coda_bin_cursor_get_bit_size+0x248>
    16e4:	.word	0x00001700
    16e8:	.word	0x00001700
    16ec:	.word	0x00001714
    16f0:	.word	0x00001714
    16f4:	.word	0x00001714
    16f8:	.word	0x00001714
    16fc:	.word	0x00001800
    1700:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1704:	ldr	r0, [fp, #-536]	; 0xfffffde8
    1708:	bl	0 <coda_ascbin_cursor_get_bit_size>
    170c:	mov	r3, r0
    1710:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    1714:	ldr	r3, [fp, #-8]
    1718:	ldr	r3, [r3, #32]
    171c:	cmp	r3, #0
    1720:	bne	1738 <coda_bin_cursor_get_bit_size+0x118>
    1724:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1728:	mvn	r2, #0
    172c:	mvn	r3, #0
    1730:	strd	r2, [r1]
    1734:	b	185c <coda_bin_cursor_get_bit_size+0x23c>
    1738:	ldr	r3, [fp, #-8]
    173c:	ldr	r3, [r3, #32]
    1740:	ldr	r2, [fp, #-540]	; 0xfffffde4
    1744:	ldr	r1, [fp, #-536]	; 0xfffffde8
    1748:	mov	r0, r3
    174c:	bl	0 <coda_expression_eval_integer>
    1750:	mov	r3, r0
    1754:	cmp	r3, #0
    1758:	beq	1778 <coda_bin_cursor_get_bit_size+0x158>
    175c:	movw	r0, #0
    1760:	movt	r0, #0
    1764:	bl	0 <coda_add_error_message>
    1768:	ldr	r0, [fp, #-536]	; 0xfffffde8
    176c:	bl	0 <coda_cursor_add_to_error_message>
    1770:	mvn	r3, #0
    1774:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    1778:	ldr	r3, [fp, #-8]
    177c:	ldrd	r2, [r3, #24]
    1780:	mvn	r0, #7
    1784:	mvn	r1, #0
    1788:	cmp	r3, r1
    178c:	cmpeq	r2, r0
    1790:	bne	17b8 <coda_bin_cursor_get_bit_size+0x198>
    1794:	ldr	r3, [fp, #-540]	; 0xfffffde4
    1798:	ldrd	r0, [r3]
    179c:	mov	r2, #0
    17a0:	mov	r3, #0
    17a4:	lsl	r3, r1, #3
    17a8:	orr	r3, r3, r0, lsr #29
    17ac:	lsl	r2, r0, #3
    17b0:	ldr	r1, [fp, #-540]	; 0xfffffde4
    17b4:	strd	r2, [r1]
    17b8:	ldr	r3, [fp, #-540]	; 0xfffffde4
    17bc:	ldrd	r2, [r3]
    17c0:	cmp	r2, #0
    17c4:	sbcs	r3, r3, #0
    17c8:	bge	185c <coda_bin_cursor_get_bit_size+0x23c>
    17cc:	ldr	r3, [fp, #-540]	; 0xfffffde4
    17d0:	ldrd	r2, [r3]
    17d4:	mov	r3, r2
    17d8:	mov	r2, r3
    17dc:	movw	r1, #0
    17e0:	movt	r1, #0
    17e4:	movw	r0, #65236	; 0xfed4
    17e8:	movt	r0, #65535	; 0xffff
    17ec:	bl	0 <coda_set_error>
    17f0:	ldr	r0, [fp, #-536]	; 0xfffffde8
    17f4:	bl	0 <coda_cursor_add_to_error_message>
    17f8:	mvn	r3, #0
    17fc:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    1800:	ldr	r2, [fp, #-536]	; 0xfffffde8
    1804:	sub	r3, fp, #532	; 0x214
    1808:	mov	r1, r2
    180c:	mov	r2, #520	; 0x208
    1810:	mov	r0, r3
    1814:	bl	0 <memcpy>
    1818:	sub	r3, fp, #532	; 0x214
    181c:	mov	r0, r3
    1820:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
    1824:	mov	r3, r0
    1828:	cmp	r3, #0
    182c:	beq	1838 <coda_bin_cursor_get_bit_size+0x218>
    1830:	mvn	r3, #0
    1834:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    1838:	sub	r3, fp, #532	; 0x214
    183c:	ldr	r1, [fp, #-540]	; 0xfffffde4
    1840:	mov	r0, r3
    1844:	bl	0 <coda_cursor_get_bit_size>
    1848:	mov	r3, r0
    184c:	cmp	r3, #0
    1850:	beq	1864 <coda_bin_cursor_get_bit_size+0x244>
    1854:	mvn	r3, #0
    1858:	b	186c <coda_bin_cursor_get_bit_size+0x24c>
    185c:	nop	{0}
    1860:	b	1868 <coda_bin_cursor_get_bit_size+0x248>
    1864:	nop	{0}
    1868:	mov	r3, #0
    186c:	mov	r0, r3
    1870:	sub	sp, fp, #4
    1874:	ldr	fp, [sp]
    1878:	add	sp, sp, #4
    187c:	pop	{pc}		; (ldr pc, [sp], #4)

00001880 <coda_bin_cursor_get_string_length>:
    1880:	str	fp, [sp, #-8]!
    1884:	str	lr, [sp, #4]
    1888:	add	fp, sp, #4
    188c:	sub	sp, sp, #16
    1890:	str	r0, [fp, #-16]
    1894:	str	r1, [fp, #-20]	; 0xffffffec
    1898:	sub	r3, fp, #12
    189c:	mov	r1, r3
    18a0:	ldr	r0, [fp, #-16]
    18a4:	bl	1620 <coda_bin_cursor_get_bit_size>
    18a8:	mov	r3, r0
    18ac:	cmp	r3, #0
    18b0:	beq	18bc <coda_bin_cursor_get_string_length+0x3c>
    18b4:	mvn	r3, #0
    18b8:	b	1900 <coda_bin_cursor_get_string_length+0x80>
    18bc:	ldrd	r2, [fp, #-12]
    18c0:	cmp	r2, #0
    18c4:	sbcs	r3, r3, #0
    18c8:	bge	18dc <coda_bin_cursor_get_string_length+0x5c>
    18cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    18d0:	mvn	r2, #0
    18d4:	str	r2, [r3]
    18d8:	b	18fc <coda_bin_cursor_get_string_length+0x7c>
    18dc:	ldrd	r0, [fp, #-12]
    18e0:	mov	r2, #0
    18e4:	mov	r3, #0
    18e8:	lsr	r2, r0, #3
    18ec:	orr	r2, r2, r1, lsl #29
    18f0:	asr	r3, r1, #3
    18f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    18f8:	str	r2, [r3]
    18fc:	mov	r3, #0
    1900:	mov	r0, r3
    1904:	sub	sp, fp, #4
    1908:	ldr	fp, [sp]
    190c:	add	sp, sp, #4
    1910:	pop	{pc}		; (ldr pc, [sp], #4)

00001914 <coda_bin_cursor_get_num_elements>:
    1914:	str	fp, [sp, #-8]!
    1918:	str	lr, [sp, #4]
    191c:	add	fp, sp, #4
    1920:	sub	sp, sp, #8
    1924:	str	r0, [fp, #-8]
    1928:	str	r1, [fp, #-12]
    192c:	ldr	r3, [fp, #-8]
    1930:	ldr	r3, [r3, #4]
    1934:	sub	r3, r3, #1
    1938:	ldr	r2, [fp, #-8]
    193c:	lsl	r3, r3, #4
    1940:	add	r3, r2, r3
    1944:	ldr	r3, [r3, #8]
    1948:	ldr	r3, [r3]
    194c:	cmp	r3, #99	; 0x63
    1950:	bhi	1974 <coda_bin_cursor_get_num_elements+0x60>
    1954:	ldr	r3, [fp, #-8]
    1958:	ldr	r3, [r3, #4]
    195c:	sub	r3, r3, #1
    1960:	ldr	r2, [fp, #-8]
    1964:	lsl	r3, r3, #4
    1968:	add	r3, r2, r3
    196c:	ldr	r3, [r3, #8]
    1970:	b	1994 <coda_bin_cursor_get_num_elements+0x80>
    1974:	ldr	r3, [fp, #-8]
    1978:	ldr	r3, [r3, #4]
    197c:	sub	r3, r3, #1
    1980:	ldr	r2, [fp, #-8]
    1984:	lsl	r3, r3, #4
    1988:	add	r3, r2, r3
    198c:	ldr	r3, [r3, #8]
    1990:	ldr	r3, [r3, #4]
    1994:	ldr	r3, [r3, #8]
    1998:	cmp	r3, #1
    199c:	bhi	19b4 <coda_bin_cursor_get_num_elements+0xa0>
    19a0:	ldr	r1, [fp, #-12]
    19a4:	ldr	r0, [fp, #-8]
    19a8:	bl	0 <coda_ascbin_cursor_get_num_elements>
    19ac:	mov	r3, r0
    19b0:	b	19c8 <coda_bin_cursor_get_num_elements+0xb4>
    19b4:	ldr	r3, [fp, #-12]
    19b8:	mov	r2, #1
    19bc:	str	r2, [r3]
    19c0:	nop	{0}
    19c4:	mov	r3, #0
    19c8:	mov	r0, r3
    19cc:	sub	sp, fp, #4
    19d0:	ldr	fp, [sp]
    19d4:	add	sp, sp, #4
    19d8:	pop	{pc}		; (ldr pc, [sp], #4)

000019dc <coda_bin_cursor_read_int8>:
    19dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    19e0:	strd	r6, [sp, #8]
    19e4:	str	fp, [sp, #16]
    19e8:	str	lr, [sp, #20]
    19ec:	add	fp, sp, #20
    19f0:	sub	sp, sp, #104	; 0x68
    19f4:	str	r0, [fp, #-104]	; 0xffffff98
    19f8:	str	r1, [fp, #-108]	; 0xffffff94
    19fc:	ldr	r3, [fp, #-104]	; 0xffffff98
    1a00:	ldr	r3, [r3, #4]
    1a04:	sub	r3, r3, #1
    1a08:	ldr	r2, [fp, #-104]	; 0xffffff98
    1a0c:	lsl	r3, r3, #4
    1a10:	add	r3, r2, r3
    1a14:	ldr	r3, [r3, #8]
    1a18:	ldr	r3, [r3]
    1a1c:	cmp	r3, #99	; 0x63
    1a20:	bhi	1a44 <coda_bin_cursor_read_int8+0x68>
    1a24:	ldr	r3, [fp, #-104]	; 0xffffff98
    1a28:	ldr	r3, [r3, #4]
    1a2c:	sub	r3, r3, #1
    1a30:	ldr	r2, [fp, #-104]	; 0xffffff98
    1a34:	lsl	r3, r3, #4
    1a38:	add	r3, r2, r3
    1a3c:	ldr	r3, [r3, #8]
    1a40:	b	1a64 <coda_bin_cursor_read_int8+0x88>
    1a44:	ldr	r3, [fp, #-104]	; 0xffffff98
    1a48:	ldr	r3, [r3, #4]
    1a4c:	sub	r3, r3, #1
    1a50:	ldr	r2, [fp, #-104]	; 0xffffff98
    1a54:	lsl	r3, r3, #4
    1a58:	add	r3, r2, r3
    1a5c:	ldr	r3, [r3, #8]
    1a60:	ldr	r3, [r3, #4]
    1a64:	str	r3, [fp, #-24]	; 0xffffffe8
    1a68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a6c:	ldrd	r2, [r3, #24]
    1a70:	strd	r2, [fp, #-52]	; 0xffffffcc
    1a74:	ldr	r3, [fp, #-104]	; 0xffffff98
    1a78:	ldr	r3, [r3, #4]
    1a7c:	sub	r3, r3, #1
    1a80:	ldr	r2, [fp, #-104]	; 0xffffff98
    1a84:	add	r3, r3, #1
    1a88:	lsl	r3, r3, #4
    1a8c:	add	r3, r2, r3
    1a90:	ldrd	r2, [r3]
    1a94:	strd	r2, [fp, #-36]	; 0xffffffdc
    1a98:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1a9c:	cmp	r2, #0
    1aa0:	sbcs	r3, r3, #0
    1aa4:	bge	1b90 <coda_bin_cursor_read_int8+0x1b4>
    1aa8:	sub	r3, fp, #52	; 0x34
    1aac:	mov	r1, r3
    1ab0:	ldr	r0, [fp, #-104]	; 0xffffff98
    1ab4:	bl	1620 <coda_bin_cursor_get_bit_size>
    1ab8:	mov	r3, r0
    1abc:	cmp	r3, #0
    1ac0:	beq	1acc <coda_bin_cursor_read_int8+0xf0>
    1ac4:	mvn	r3, #0
    1ac8:	b	1d2c <coda_bin_cursor_read_int8+0x350>
    1acc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1ad0:	cmp	r2, #0
    1ad4:	sbcs	r3, r3, #0
    1ad8:	blt	1aec <coda_bin_cursor_read_int8+0x110>
    1adc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1ae0:	cmp	r2, #9
    1ae4:	sbcs	r3, r3, #0
    1ae8:	blt	1b90 <coda_bin_cursor_read_int8+0x1b4>
    1aec:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    1af0:	sub	r3, fp, #76	; 0x4c
    1af4:	mov	r2, r3
    1af8:	bl	0 <coda_str64>
    1afc:	ldr	r3, [fp, #-104]	; 0xffffff98
    1b00:	ldr	r3, [r3, #4]
    1b04:	sub	r3, r3, #1
    1b08:	ldr	r2, [fp, #-104]	; 0xffffff98
    1b0c:	add	r3, r3, #1
    1b10:	lsl	r3, r3, #4
    1b14:	add	r3, r2, r3
    1b18:	ldrd	r2, [r3]
    1b1c:	mov	r0, #0
    1b20:	mov	r1, #0
    1b24:	lsr	r0, r2, #3
    1b28:	orr	r0, r0, r3, lsl #29
    1b2c:	asr	r1, r3, #3
    1b30:	sub	r3, fp, #100	; 0x64
    1b34:	mov	r2, r3
    1b38:	bl	0 <coda_str64>
    1b3c:	ldr	r3, [fp, #-104]	; 0xffffff98
    1b40:	ldr	r3, [r3, #4]
    1b44:	sub	r3, r3, #1
    1b48:	ldr	r2, [fp, #-104]	; 0xffffff98
    1b4c:	add	r3, r3, #1
    1b50:	lsl	r3, r3, #4
    1b54:	add	r3, r2, r3
    1b58:	ldrd	r2, [r3]
    1b5c:	mov	r3, r2
    1b60:	and	r3, r3, #7
    1b64:	sub	r1, fp, #100	; 0x64
    1b68:	sub	r2, fp, #76	; 0x4c
    1b6c:	str	r3, [sp]
    1b70:	mov	r3, r1
    1b74:	movw	r1, #0
    1b78:	movt	r1, #0
    1b7c:	movw	r0, #65236	; 0xfed4
    1b80:	movt	r0, #65535	; 0xffff
    1b84:	bl	0 <coda_set_error>
    1b88:	mvn	r3, #0
    1b8c:	b	1d2c <coda_bin_cursor_read_int8+0x350>
    1b90:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1b94:	mov	r0, #7
    1b98:	mov	r1, #0
    1b9c:	and	r6, r2, r0
    1ba0:	and	r7, r3, r1
    1ba4:	orrs	r3, r6, r7
    1ba8:	bne	1bbc <coda_bin_cursor_read_int8+0x1e0>
    1bac:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1bb0:	cmp	r3, #0
    1bb4:	cmpeq	r2, #8
    1bb8:	beq	1c6c <coda_bin_cursor_read_int8+0x290>
    1bbc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    1bc0:	mov	r2, #0
    1bc4:	mov	r3, #0
    1bc8:	lsr	r2, r0, #3
    1bcc:	orr	r2, r2, r1, lsl #29
    1bd0:	asr	r3, r1, #3
    1bd4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    1bd8:	uxtb	r1, r0
    1bdc:	and	r1, r1, #7
    1be0:	cmp	r1, #0
    1be4:	movne	r1, #1
    1be8:	moveq	r1, #0
    1bec:	uxtb	r1, r1
    1bf0:	uxtb	r0, r1
    1bf4:	mov	r1, #0
    1bf8:	adds	r4, r2, r0
    1bfc:	adc	r5, r3, r1
    1c00:	cmp	r4, #2
    1c04:	sbcs	r3, r5, #0
    1c08:	blt	1c2c <coda_bin_cursor_read_int8+0x250>
    1c0c:	movw	r3, #0
    1c10:	movt	r3, #0
    1c14:	mov	r2, #177	; 0xb1
    1c18:	movw	r1, #0
    1c1c:	movt	r1, #0
    1c20:	movw	r0, #0
    1c24:	movt	r0, #0
    1c28:	bl	0 <__assert_fail>
    1c2c:	ldr	r3, [fp, #-108]	; 0xffffff94
    1c30:	mov	r2, #0
    1c34:	strb	r2, [r3]
    1c38:	ldr	r3, [fp, #-104]	; 0xffffff98
    1c3c:	ldr	r0, [r3]
    1c40:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1c44:	ldr	r1, [fp, #-108]	; 0xffffff94
    1c48:	str	r1, [sp, #8]
    1c4c:	strd	r2, [sp]
    1c50:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1c54:	bl	204 <read_bits>
    1c58:	mov	r3, r0
    1c5c:	cmp	r3, #0
    1c60:	beq	1cbc <coda_bin_cursor_read_int8+0x2e0>
    1c64:	mvn	r3, #0
    1c68:	b	1d2c <coda_bin_cursor_read_int8+0x350>
    1c6c:	ldr	r3, [fp, #-104]	; 0xffffff98
    1c70:	ldr	ip, [r3]
    1c74:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1c78:	mov	r2, #0
    1c7c:	mov	r3, #0
    1c80:	lsr	r2, r0, #3
    1c84:	orr	r2, r2, r1, lsl #29
    1c88:	asr	r3, r1, #3
    1c8c:	ldr	r1, [fp, #-108]	; 0xffffff94
    1c90:	str	r1, [sp, #8]
    1c94:	mov	r0, #1
    1c98:	mov	r1, #0
    1c9c:	strd	r0, [sp]
    1ca0:	mov	r0, ip
    1ca4:	bl	0 <read_bytes>
    1ca8:	mov	r3, r0
    1cac:	cmp	r3, #0
    1cb0:	beq	1cbc <coda_bin_cursor_read_int8+0x2e0>
    1cb4:	mvn	r3, #0
    1cb8:	b	1d2c <coda_bin_cursor_read_int8+0x350>
    1cbc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1cc0:	cmp	r2, #8
    1cc4:	sbcs	r3, r3, #0
    1cc8:	bge	1d28 <coda_bin_cursor_read_int8+0x34c>
    1ccc:	ldr	r3, [fp, #-108]	; 0xffffff94
    1cd0:	ldrb	r3, [r3]
    1cd4:	strb	r3, [fp, #-37]	; 0xffffffdb
    1cd8:	ldrb	r1, [fp, #-37]	; 0xffffffdb
    1cdc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1ce0:	mov	r3, r2
    1ce4:	sub	r3, r3, #1
    1ce8:	asr	r3, r1, r3
    1cec:	and	r3, r3, #1
    1cf0:	cmp	r3, #0
    1cf4:	beq	1d28 <coda_bin_cursor_read_int8+0x34c>
    1cf8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1cfc:	mov	r3, #1
    1d00:	lsl	r3, r3, r2
    1d04:	uxtb	r3, r3
    1d08:	rsb	r3, r3, #0
    1d0c:	uxtb	r3, r3
    1d10:	sxtb	r2, r3
    1d14:	ldrsb	r3, [fp, #-37]	; 0xffffffdb
    1d18:	orr	r3, r2, r3
    1d1c:	sxtb	r2, r3
    1d20:	ldr	r3, [fp, #-108]	; 0xffffff94
    1d24:	strb	r2, [r3]
    1d28:	mov	r3, #0
    1d2c:	mov	r0, r3
    1d30:	sub	sp, fp, #20
    1d34:	ldrd	r4, [sp]
    1d38:	ldrd	r6, [sp, #8]
    1d3c:	ldr	fp, [sp, #16]
    1d40:	add	sp, sp, #20
    1d44:	pop	{pc}		; (ldr pc, [sp], #4)

00001d48 <coda_bin_cursor_read_uint8>:
    1d48:	strd	r4, [sp, #-24]!	; 0xffffffe8
    1d4c:	strd	r6, [sp, #8]
    1d50:	str	fp, [sp, #16]
    1d54:	str	lr, [sp, #20]
    1d58:	add	fp, sp, #20
    1d5c:	sub	sp, sp, #96	; 0x60
    1d60:	str	r0, [fp, #-96]	; 0xffffffa0
    1d64:	str	r1, [fp, #-100]	; 0xffffff9c
    1d68:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1d6c:	ldr	r3, [r3, #4]
    1d70:	sub	r3, r3, #1
    1d74:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1d78:	lsl	r3, r3, #4
    1d7c:	add	r3, r2, r3
    1d80:	ldr	r3, [r3, #8]
    1d84:	ldr	r3, [r3]
    1d88:	cmp	r3, #99	; 0x63
    1d8c:	bhi	1db0 <coda_bin_cursor_read_uint8+0x68>
    1d90:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1d94:	ldr	r3, [r3, #4]
    1d98:	sub	r3, r3, #1
    1d9c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1da0:	lsl	r3, r3, #4
    1da4:	add	r3, r2, r3
    1da8:	ldr	r3, [r3, #8]
    1dac:	b	1dd0 <coda_bin_cursor_read_uint8+0x88>
    1db0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1db4:	ldr	r3, [r3, #4]
    1db8:	sub	r3, r3, #1
    1dbc:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1dc0:	lsl	r3, r3, #4
    1dc4:	add	r3, r2, r3
    1dc8:	ldr	r3, [r3, #8]
    1dcc:	ldr	r3, [r3, #4]
    1dd0:	str	r3, [fp, #-24]	; 0xffffffe8
    1dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dd8:	ldrd	r2, [r3, #24]
    1ddc:	strd	r2, [fp, #-44]	; 0xffffffd4
    1de0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1de4:	ldr	r3, [r3, #4]
    1de8:	sub	r3, r3, #1
    1dec:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1df0:	add	r3, r3, #1
    1df4:	lsl	r3, r3, #4
    1df8:	add	r3, r2, r3
    1dfc:	ldrd	r2, [r3]
    1e00:	strd	r2, [fp, #-36]	; 0xffffffdc
    1e04:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1e08:	mvn	r0, #0
    1e0c:	mvn	r1, #0
    1e10:	cmp	r3, r1
    1e14:	cmpeq	r2, r0
    1e18:	bne	1f04 <coda_bin_cursor_read_uint8+0x1bc>
    1e1c:	sub	r3, fp, #44	; 0x2c
    1e20:	mov	r1, r3
    1e24:	ldr	r0, [fp, #-96]	; 0xffffffa0
    1e28:	bl	1620 <coda_bin_cursor_get_bit_size>
    1e2c:	mov	r3, r0
    1e30:	cmp	r3, #0
    1e34:	beq	1e40 <coda_bin_cursor_read_uint8+0xf8>
    1e38:	mvn	r3, #0
    1e3c:	b	2034 <coda_bin_cursor_read_uint8+0x2ec>
    1e40:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1e44:	cmp	r2, #0
    1e48:	sbcs	r3, r3, #0
    1e4c:	blt	1e60 <coda_bin_cursor_read_uint8+0x118>
    1e50:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1e54:	cmp	r2, #9
    1e58:	sbcs	r3, r3, #0
    1e5c:	blt	1f04 <coda_bin_cursor_read_uint8+0x1bc>
    1e60:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1e64:	sub	r3, fp, #68	; 0x44
    1e68:	mov	r2, r3
    1e6c:	bl	0 <coda_str64>
    1e70:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1e74:	ldr	r3, [r3, #4]
    1e78:	sub	r3, r3, #1
    1e7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1e80:	add	r3, r3, #1
    1e84:	lsl	r3, r3, #4
    1e88:	add	r3, r2, r3
    1e8c:	ldrd	r2, [r3]
    1e90:	mov	r0, #0
    1e94:	mov	r1, #0
    1e98:	lsr	r0, r2, #3
    1e9c:	orr	r0, r0, r3, lsl #29
    1ea0:	asr	r1, r3, #3
    1ea4:	sub	r3, fp, #92	; 0x5c
    1ea8:	mov	r2, r3
    1eac:	bl	0 <coda_str64>
    1eb0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1eb4:	ldr	r3, [r3, #4]
    1eb8:	sub	r3, r3, #1
    1ebc:	ldr	r2, [fp, #-96]	; 0xffffffa0
    1ec0:	add	r3, r3, #1
    1ec4:	lsl	r3, r3, #4
    1ec8:	add	r3, r2, r3
    1ecc:	ldrd	r2, [r3]
    1ed0:	mov	r3, r2
    1ed4:	and	r3, r3, #7
    1ed8:	sub	r1, fp, #92	; 0x5c
    1edc:	sub	r2, fp, #68	; 0x44
    1ee0:	str	r3, [sp]
    1ee4:	mov	r3, r1
    1ee8:	movw	r1, #0
    1eec:	movt	r1, #0
    1ef0:	movw	r0, #65236	; 0xfed4
    1ef4:	movt	r0, #65535	; 0xffff
    1ef8:	bl	0 <coda_set_error>
    1efc:	mvn	r3, #0
    1f00:	b	2034 <coda_bin_cursor_read_uint8+0x2ec>
    1f04:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1f08:	mov	r0, #7
    1f0c:	mov	r1, #0
    1f10:	and	r6, r2, r0
    1f14:	and	r7, r3, r1
    1f18:	orrs	r3, r6, r7
    1f1c:	bne	1f30 <coda_bin_cursor_read_uint8+0x1e8>
    1f20:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1f24:	cmp	r3, #0
    1f28:	cmpeq	r2, #8
    1f2c:	beq	1fe0 <coda_bin_cursor_read_uint8+0x298>
    1f30:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1f34:	mov	r2, #0
    1f38:	mov	r3, #0
    1f3c:	lsr	r2, r0, #3
    1f40:	orr	r2, r2, r1, lsl #29
    1f44:	asr	r3, r1, #3
    1f48:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    1f4c:	uxtb	r1, r0
    1f50:	and	r1, r1, #7
    1f54:	cmp	r1, #0
    1f58:	movne	r1, #1
    1f5c:	moveq	r1, #0
    1f60:	uxtb	r1, r1
    1f64:	uxtb	r0, r1
    1f68:	mov	r1, #0
    1f6c:	adds	r4, r2, r0
    1f70:	adc	r5, r3, r1
    1f74:	cmp	r4, #2
    1f78:	sbcs	r3, r5, #0
    1f7c:	blt	1fa0 <coda_bin_cursor_read_uint8+0x258>
    1f80:	movw	r3, #0
    1f84:	movt	r3, #0
    1f88:	mov	r2, #233	; 0xe9
    1f8c:	movw	r1, #0
    1f90:	movt	r1, #0
    1f94:	movw	r0, #0
    1f98:	movt	r0, #0
    1f9c:	bl	0 <__assert_fail>
    1fa0:	ldr	r3, [fp, #-100]	; 0xffffff9c
    1fa4:	mov	r2, #0
    1fa8:	strb	r2, [r3]
    1fac:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1fb0:	ldr	r0, [r3]
    1fb4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1fb8:	ldr	r1, [fp, #-100]	; 0xffffff9c
    1fbc:	str	r1, [sp, #8]
    1fc0:	strd	r2, [sp]
    1fc4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1fc8:	bl	204 <read_bits>
    1fcc:	mov	r3, r0
    1fd0:	cmp	r3, #0
    1fd4:	beq	2030 <coda_bin_cursor_read_uint8+0x2e8>
    1fd8:	mvn	r3, #0
    1fdc:	b	2034 <coda_bin_cursor_read_uint8+0x2ec>
    1fe0:	ldr	r3, [fp, #-96]	; 0xffffffa0
    1fe4:	ldr	ip, [r3]
    1fe8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1fec:	mov	r2, #0
    1ff0:	mov	r3, #0
    1ff4:	lsr	r2, r0, #3
    1ff8:	orr	r2, r2, r1, lsl #29
    1ffc:	asr	r3, r1, #3
    2000:	ldr	r1, [fp, #-100]	; 0xffffff9c
    2004:	str	r1, [sp, #8]
    2008:	mov	r0, #1
    200c:	mov	r1, #0
    2010:	strd	r0, [sp]
    2014:	mov	r0, ip
    2018:	bl	0 <read_bytes>
    201c:	mov	r3, r0
    2020:	cmp	r3, #0
    2024:	beq	2030 <coda_bin_cursor_read_uint8+0x2e8>
    2028:	mvn	r3, #0
    202c:	b	2034 <coda_bin_cursor_read_uint8+0x2ec>
    2030:	mov	r3, #0
    2034:	mov	r0, r3
    2038:	sub	sp, fp, #20
    203c:	ldrd	r4, [sp]
    2040:	ldrd	r6, [sp, #8]
    2044:	ldr	fp, [sp, #16]
    2048:	add	sp, sp, #20
    204c:	pop	{pc}		; (ldr pc, [sp], #4)

00002050 <coda_bin_cursor_read_int16>:
    2050:	strd	r4, [sp, #-16]!
    2054:	str	fp, [sp, #8]
    2058:	str	lr, [sp, #12]
    205c:	add	fp, sp, #12
    2060:	sub	sp, sp, #112	; 0x70
    2064:	str	r0, [fp, #-104]	; 0xffffff98
    2068:	str	r1, [fp, #-108]	; 0xffffff94
    206c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2070:	ldr	r3, [r3, #4]
    2074:	sub	r3, r3, #1
    2078:	ldr	r2, [fp, #-104]	; 0xffffff98
    207c:	lsl	r3, r3, #4
    2080:	add	r3, r2, r3
    2084:	ldr	r3, [r3, #8]
    2088:	ldr	r3, [r3]
    208c:	cmp	r3, #99	; 0x63
    2090:	bhi	20b4 <coda_bin_cursor_read_int16+0x64>
    2094:	ldr	r3, [fp, #-104]	; 0xffffff98
    2098:	ldr	r3, [r3, #4]
    209c:	sub	r3, r3, #1
    20a0:	ldr	r2, [fp, #-104]	; 0xffffff98
    20a4:	lsl	r3, r3, #4
    20a8:	add	r3, r2, r3
    20ac:	ldr	r3, [r3, #8]
    20b0:	b	20d4 <coda_bin_cursor_read_int16+0x84>
    20b4:	ldr	r3, [fp, #-104]	; 0xffffff98
    20b8:	ldr	r3, [r3, #4]
    20bc:	sub	r3, r3, #1
    20c0:	ldr	r2, [fp, #-104]	; 0xffffff98
    20c4:	lsl	r3, r3, #4
    20c8:	add	r3, r2, r3
    20cc:	ldr	r3, [r3, #8]
    20d0:	ldr	r3, [r3, #4]
    20d4:	str	r3, [fp, #-20]	; 0xffffffec
    20d8:	ldr	r3, [fp, #-20]	; 0xffffffec
    20dc:	ldrd	r2, [r3, #24]
    20e0:	strd	r2, [fp, #-44]	; 0xffffffd4
    20e4:	ldr	r3, [fp, #-104]	; 0xffffff98
    20e8:	ldr	r3, [r3, #4]
    20ec:	sub	r3, r3, #1
    20f0:	ldr	r2, [fp, #-104]	; 0xffffff98
    20f4:	add	r3, r3, #1
    20f8:	lsl	r3, r3, #4
    20fc:	add	r3, r2, r3
    2100:	ldrd	r2, [r3]
    2104:	strd	r2, [fp, #-28]	; 0xffffffe4
    2108:	ldr	r3, [fp, #-20]	; 0xffffffec
    210c:	ldr	r3, [r3, #44]	; 0x2c
    2110:	str	r3, [fp, #-32]	; 0xffffffe0
    2114:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2118:	mvn	r0, #0
    211c:	mvn	r1, #0
    2120:	cmp	r3, r1
    2124:	cmpeq	r2, r0
    2128:	bne	2214 <coda_bin_cursor_read_int16+0x1c4>
    212c:	sub	r3, fp, #44	; 0x2c
    2130:	mov	r1, r3
    2134:	ldr	r0, [fp, #-104]	; 0xffffff98
    2138:	bl	1620 <coda_bin_cursor_get_bit_size>
    213c:	mov	r3, r0
    2140:	cmp	r3, #0
    2144:	beq	2150 <coda_bin_cursor_read_int16+0x100>
    2148:	mvn	r3, #0
    214c:	b	23d4 <coda_bin_cursor_read_int16+0x384>
    2150:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2154:	cmp	r2, #0
    2158:	sbcs	r3, r3, #0
    215c:	blt	2170 <coda_bin_cursor_read_int16+0x120>
    2160:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2164:	cmp	r2, #17
    2168:	sbcs	r3, r3, #0
    216c:	blt	2214 <coda_bin_cursor_read_int16+0x1c4>
    2170:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2174:	sub	r3, fp, #68	; 0x44
    2178:	mov	r2, r3
    217c:	bl	0 <coda_str64>
    2180:	ldr	r3, [fp, #-104]	; 0xffffff98
    2184:	ldr	r3, [r3, #4]
    2188:	sub	r3, r3, #1
    218c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2190:	add	r3, r3, #1
    2194:	lsl	r3, r3, #4
    2198:	add	r3, r2, r3
    219c:	ldrd	r2, [r3]
    21a0:	mov	r0, #0
    21a4:	mov	r1, #0
    21a8:	lsr	r0, r2, #3
    21ac:	orr	r0, r0, r3, lsl #29
    21b0:	asr	r1, r3, #3
    21b4:	sub	r3, fp, #92	; 0x5c
    21b8:	mov	r2, r3
    21bc:	bl	0 <coda_str64>
    21c0:	ldr	r3, [fp, #-104]	; 0xffffff98
    21c4:	ldr	r3, [r3, #4]
    21c8:	sub	r3, r3, #1
    21cc:	ldr	r2, [fp, #-104]	; 0xffffff98
    21d0:	add	r3, r3, #1
    21d4:	lsl	r3, r3, #4
    21d8:	add	r3, r2, r3
    21dc:	ldrd	r2, [r3]
    21e0:	mov	r3, r2
    21e4:	and	r3, r3, #7
    21e8:	sub	r1, fp, #92	; 0x5c
    21ec:	sub	r2, fp, #68	; 0x44
    21f0:	str	r3, [sp]
    21f4:	mov	r3, r1
    21f8:	movw	r1, #0
    21fc:	movt	r1, #0
    2200:	movw	r0, #65236	; 0xfed4
    2204:	movt	r0, #65535	; 0xffff
    2208:	bl	0 <coda_set_error>
    220c:	mvn	r3, #0
    2210:	b	23d4 <coda_bin_cursor_read_int16+0x384>
    2214:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2218:	mov	r0, #7
    221c:	mov	r1, #0
    2220:	and	r4, r2, r0
    2224:	and	r5, r3, r1
    2228:	orrs	r3, r4, r5
    222c:	bne	2240 <coda_bin_cursor_read_int16+0x1f0>
    2230:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2234:	cmp	r3, #0
    2238:	cmpeq	r2, #16
    223c:	beq	22e0 <coda_bin_cursor_read_int16+0x290>
    2240:	ldr	r3, [fp, #-108]	; 0xffffff94
    2244:	str	r3, [fp, #-16]
    2248:	ldr	r3, [fp, #-32]	; 0xffffffe0
    224c:	cmp	r3, #0
    2250:	bne	22a0 <coda_bin_cursor_read_int16+0x250>
    2254:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2258:	mov	r2, #0
    225c:	mov	r3, #0
    2260:	lsr	r2, r0, #3
    2264:	orr	r2, r2, r1, lsl #29
    2268:	asr	r3, r1, #3
    226c:	mov	r1, r2
    2270:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2274:	uxtb	r3, r2
    2278:	and	r3, r3, #7
    227c:	cmp	r3, #0
    2280:	movne	r3, #1
    2284:	moveq	r3, #0
    2288:	uxtb	r3, r3
    228c:	add	r3, r1, r3
    2290:	rsb	r3, r3, #2
    2294:	ldr	r2, [fp, #-108]	; 0xffffff94
    2298:	add	r3, r2, r3
    229c:	str	r3, [fp, #-16]
    22a0:	ldr	r3, [fp, #-108]	; 0xffffff94
    22a4:	mov	r2, #0
    22a8:	strh	r2, [r3]
    22ac:	ldr	r3, [fp, #-104]	; 0xffffff98
    22b0:	ldr	r0, [r3]
    22b4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    22b8:	ldr	r1, [fp, #-16]
    22bc:	str	r1, [sp, #8]
    22c0:	strd	r2, [sp]
    22c4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    22c8:	bl	204 <read_bits>
    22cc:	mov	r3, r0
    22d0:	cmp	r3, #0
    22d4:	beq	2330 <coda_bin_cursor_read_int16+0x2e0>
    22d8:	mvn	r3, #0
    22dc:	b	23d4 <coda_bin_cursor_read_int16+0x384>
    22e0:	ldr	r3, [fp, #-104]	; 0xffffff98
    22e4:	ldr	ip, [r3]
    22e8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    22ec:	mov	r2, #0
    22f0:	mov	r3, #0
    22f4:	lsr	r2, r0, #3
    22f8:	orr	r2, r2, r1, lsl #29
    22fc:	asr	r3, r1, #3
    2300:	ldr	r1, [fp, #-108]	; 0xffffff94
    2304:	str	r1, [sp, #8]
    2308:	mov	r0, #2
    230c:	mov	r1, #0
    2310:	strd	r0, [sp]
    2314:	mov	r0, ip
    2318:	bl	0 <read_bytes>
    231c:	mov	r3, r0
    2320:	cmp	r3, #0
    2324:	beq	2334 <coda_bin_cursor_read_int16+0x2e4>
    2328:	mvn	r3, #0
    232c:	b	23d4 <coda_bin_cursor_read_int16+0x384>
    2330:	nop	{0}
    2334:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2338:	cmp	r3, #0
    233c:	bne	2364 <coda_bin_cursor_read_int16+0x314>
    2340:	ldr	r3, [fp, #-108]	; 0xffffff94
    2344:	ldrb	r3, [r3, #1]
    2348:	strb	r3, [fp, #-96]	; 0xffffffa0
    234c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2350:	ldrb	r3, [r3]
    2354:	strb	r3, [fp, #-95]	; 0xffffffa1
    2358:	ldrsh	r2, [fp, #-96]	; 0xffffffa0
    235c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2360:	strh	r2, [r3]
    2364:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2368:	cmp	r2, #16
    236c:	sbcs	r3, r3, #0
    2370:	bge	23d0 <coda_bin_cursor_read_int16+0x380>
    2374:	ldr	r3, [fp, #-108]	; 0xffffff94
    2378:	ldrh	r3, [r3]
    237c:	strh	r3, [fp, #-34]	; 0xffffffde
    2380:	ldrh	r1, [fp, #-34]	; 0xffffffde
    2384:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2388:	mov	r3, r2
    238c:	sub	r3, r3, #1
    2390:	asr	r3, r1, r3
    2394:	and	r3, r3, #1
    2398:	cmp	r3, #0
    239c:	beq	23d0 <coda_bin_cursor_read_int16+0x380>
    23a0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    23a4:	mov	r3, #1
    23a8:	lsl	r3, r3, r2
    23ac:	uxth	r3, r3
    23b0:	rsb	r3, r3, #0
    23b4:	uxth	r3, r3
    23b8:	sxth	r2, r3
    23bc:	ldrsh	r3, [fp, #-34]	; 0xffffffde
    23c0:	orr	r3, r2, r3
    23c4:	sxth	r2, r3
    23c8:	ldr	r3, [fp, #-108]	; 0xffffff94
    23cc:	strh	r2, [r3]
    23d0:	mov	r3, #0
    23d4:	mov	r0, r3
    23d8:	sub	sp, fp, #12
    23dc:	ldrd	r4, [sp]
    23e0:	ldr	fp, [sp, #8]
    23e4:	add	sp, sp, #12
    23e8:	pop	{pc}		; (ldr pc, [sp], #4)

000023ec <coda_bin_cursor_read_uint16>:
    23ec:	strd	r4, [sp, #-16]!
    23f0:	str	fp, [sp, #8]
    23f4:	str	lr, [sp, #12]
    23f8:	add	fp, sp, #12
    23fc:	sub	sp, sp, #112	; 0x70
    2400:	str	r0, [fp, #-104]	; 0xffffff98
    2404:	str	r1, [fp, #-108]	; 0xffffff94
    2408:	ldr	r3, [fp, #-104]	; 0xffffff98
    240c:	ldr	r3, [r3, #4]
    2410:	sub	r3, r3, #1
    2414:	ldr	r2, [fp, #-104]	; 0xffffff98
    2418:	lsl	r3, r3, #4
    241c:	add	r3, r2, r3
    2420:	ldr	r3, [r3, #8]
    2424:	ldr	r3, [r3]
    2428:	cmp	r3, #99	; 0x63
    242c:	bhi	2450 <coda_bin_cursor_read_uint16+0x64>
    2430:	ldr	r3, [fp, #-104]	; 0xffffff98
    2434:	ldr	r3, [r3, #4]
    2438:	sub	r3, r3, #1
    243c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2440:	lsl	r3, r3, #4
    2444:	add	r3, r2, r3
    2448:	ldr	r3, [r3, #8]
    244c:	b	2470 <coda_bin_cursor_read_uint16+0x84>
    2450:	ldr	r3, [fp, #-104]	; 0xffffff98
    2454:	ldr	r3, [r3, #4]
    2458:	sub	r3, r3, #1
    245c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2460:	lsl	r3, r3, #4
    2464:	add	r3, r2, r3
    2468:	ldr	r3, [r3, #8]
    246c:	ldr	r3, [r3, #4]
    2470:	str	r3, [fp, #-20]	; 0xffffffec
    2474:	ldr	r3, [fp, #-20]	; 0xffffffec
    2478:	ldrd	r2, [r3, #24]
    247c:	strd	r2, [fp, #-44]	; 0xffffffd4
    2480:	ldr	r3, [fp, #-104]	; 0xffffff98
    2484:	ldr	r3, [r3, #4]
    2488:	sub	r3, r3, #1
    248c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2490:	add	r3, r3, #1
    2494:	lsl	r3, r3, #4
    2498:	add	r3, r2, r3
    249c:	ldrd	r2, [r3]
    24a0:	strd	r2, [fp, #-28]	; 0xffffffe4
    24a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    24a8:	ldr	r3, [r3, #44]	; 0x2c
    24ac:	str	r3, [fp, #-32]	; 0xffffffe0
    24b0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    24b4:	mvn	r0, #0
    24b8:	mvn	r1, #0
    24bc:	cmp	r3, r1
    24c0:	cmpeq	r2, r0
    24c4:	bne	25b0 <coda_bin_cursor_read_uint16+0x1c4>
    24c8:	sub	r3, fp, #44	; 0x2c
    24cc:	mov	r1, r3
    24d0:	ldr	r0, [fp, #-104]	; 0xffffff98
    24d4:	bl	1620 <coda_bin_cursor_get_bit_size>
    24d8:	mov	r3, r0
    24dc:	cmp	r3, #0
    24e0:	beq	24ec <coda_bin_cursor_read_uint16+0x100>
    24e4:	mvn	r3, #0
    24e8:	b	2704 <coda_bin_cursor_read_uint16+0x318>
    24ec:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    24f0:	cmp	r2, #0
    24f4:	sbcs	r3, r3, #0
    24f8:	blt	250c <coda_bin_cursor_read_uint16+0x120>
    24fc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2500:	cmp	r2, #17
    2504:	sbcs	r3, r3, #0
    2508:	blt	25b0 <coda_bin_cursor_read_uint16+0x1c4>
    250c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2510:	sub	r3, fp, #68	; 0x44
    2514:	mov	r2, r3
    2518:	bl	0 <coda_str64>
    251c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2520:	ldr	r3, [r3, #4]
    2524:	sub	r3, r3, #1
    2528:	ldr	r2, [fp, #-104]	; 0xffffff98
    252c:	add	r3, r3, #1
    2530:	lsl	r3, r3, #4
    2534:	add	r3, r2, r3
    2538:	ldrd	r2, [r3]
    253c:	mov	r0, #0
    2540:	mov	r1, #0
    2544:	lsr	r0, r2, #3
    2548:	orr	r0, r0, r3, lsl #29
    254c:	asr	r1, r3, #3
    2550:	sub	r3, fp, #92	; 0x5c
    2554:	mov	r2, r3
    2558:	bl	0 <coda_str64>
    255c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2560:	ldr	r3, [r3, #4]
    2564:	sub	r3, r3, #1
    2568:	ldr	r2, [fp, #-104]	; 0xffffff98
    256c:	add	r3, r3, #1
    2570:	lsl	r3, r3, #4
    2574:	add	r3, r2, r3
    2578:	ldrd	r2, [r3]
    257c:	mov	r3, r2
    2580:	and	r3, r3, #7
    2584:	sub	r1, fp, #92	; 0x5c
    2588:	sub	r2, fp, #68	; 0x44
    258c:	str	r3, [sp]
    2590:	mov	r3, r1
    2594:	movw	r1, #0
    2598:	movt	r1, #0
    259c:	movw	r0, #65236	; 0xfed4
    25a0:	movt	r0, #65535	; 0xffff
    25a4:	bl	0 <coda_set_error>
    25a8:	mvn	r3, #0
    25ac:	b	2704 <coda_bin_cursor_read_uint16+0x318>
    25b0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    25b4:	mov	r0, #7
    25b8:	mov	r1, #0
    25bc:	and	r4, r2, r0
    25c0:	and	r5, r3, r1
    25c4:	orrs	r3, r4, r5
    25c8:	bne	25dc <coda_bin_cursor_read_uint16+0x1f0>
    25cc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    25d0:	cmp	r3, #0
    25d4:	cmpeq	r2, #16
    25d8:	beq	267c <coda_bin_cursor_read_uint16+0x290>
    25dc:	ldr	r3, [fp, #-108]	; 0xffffff94
    25e0:	str	r3, [fp, #-16]
    25e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    25e8:	cmp	r3, #0
    25ec:	bne	263c <coda_bin_cursor_read_uint16+0x250>
    25f0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    25f4:	mov	r2, #0
    25f8:	mov	r3, #0
    25fc:	lsr	r2, r0, #3
    2600:	orr	r2, r2, r1, lsl #29
    2604:	asr	r3, r1, #3
    2608:	mov	r1, r2
    260c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2610:	uxtb	r3, r2
    2614:	and	r3, r3, #7
    2618:	cmp	r3, #0
    261c:	movne	r3, #1
    2620:	moveq	r3, #0
    2624:	uxtb	r3, r3
    2628:	add	r3, r1, r3
    262c:	rsb	r3, r3, #2
    2630:	ldr	r2, [fp, #-108]	; 0xffffff94
    2634:	add	r3, r2, r3
    2638:	str	r3, [fp, #-16]
    263c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2640:	mov	r2, #0
    2644:	strh	r2, [r3]
    2648:	ldr	r3, [fp, #-104]	; 0xffffff98
    264c:	ldr	r0, [r3]
    2650:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2654:	ldr	r1, [fp, #-16]
    2658:	str	r1, [sp, #8]
    265c:	strd	r2, [sp]
    2660:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2664:	bl	204 <read_bits>
    2668:	mov	r3, r0
    266c:	cmp	r3, #0
    2670:	beq	26cc <coda_bin_cursor_read_uint16+0x2e0>
    2674:	mvn	r3, #0
    2678:	b	2704 <coda_bin_cursor_read_uint16+0x318>
    267c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2680:	ldr	ip, [r3]
    2684:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    2688:	mov	r2, #0
    268c:	mov	r3, #0
    2690:	lsr	r2, r0, #3
    2694:	orr	r2, r2, r1, lsl #29
    2698:	asr	r3, r1, #3
    269c:	ldr	r1, [fp, #-108]	; 0xffffff94
    26a0:	str	r1, [sp, #8]
    26a4:	mov	r0, #2
    26a8:	mov	r1, #0
    26ac:	strd	r0, [sp]
    26b0:	mov	r0, ip
    26b4:	bl	0 <read_bytes>
    26b8:	mov	r3, r0
    26bc:	cmp	r3, #0
    26c0:	beq	26d0 <coda_bin_cursor_read_uint16+0x2e4>
    26c4:	mvn	r3, #0
    26c8:	b	2704 <coda_bin_cursor_read_uint16+0x318>
    26cc:	nop	{0}
    26d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    26d4:	cmp	r3, #0
    26d8:	bne	2700 <coda_bin_cursor_read_uint16+0x314>
    26dc:	ldr	r3, [fp, #-108]	; 0xffffff94
    26e0:	ldrb	r3, [r3, #1]
    26e4:	strb	r3, [fp, #-96]	; 0xffffffa0
    26e8:	ldr	r3, [fp, #-108]	; 0xffffff94
    26ec:	ldrb	r3, [r3]
    26f0:	strb	r3, [fp, #-95]	; 0xffffffa1
    26f4:	ldrh	r2, [fp, #-96]	; 0xffffffa0
    26f8:	ldr	r3, [fp, #-108]	; 0xffffff94
    26fc:	strh	r2, [r3]
    2700:	mov	r3, #0
    2704:	mov	r0, r3
    2708:	sub	sp, fp, #12
    270c:	ldrd	r4, [sp]
    2710:	ldr	fp, [sp, #8]
    2714:	add	sp, sp, #12
    2718:	pop	{pc}		; (ldr pc, [sp], #4)

0000271c <coda_bin_cursor_read_int32>:
    271c:	strd	r4, [sp, #-16]!
    2720:	str	fp, [sp, #8]
    2724:	str	lr, [sp, #12]
    2728:	add	fp, sp, #12
    272c:	sub	sp, sp, #112	; 0x70
    2730:	str	r0, [fp, #-104]	; 0xffffff98
    2734:	str	r1, [fp, #-108]	; 0xffffff94
    2738:	ldr	r3, [fp, #-104]	; 0xffffff98
    273c:	ldr	r3, [r3, #4]
    2740:	sub	r3, r3, #1
    2744:	ldr	r2, [fp, #-104]	; 0xffffff98
    2748:	lsl	r3, r3, #4
    274c:	add	r3, r2, r3
    2750:	ldr	r3, [r3, #8]
    2754:	ldr	r3, [r3]
    2758:	cmp	r3, #99	; 0x63
    275c:	bhi	2780 <coda_bin_cursor_read_int32+0x64>
    2760:	ldr	r3, [fp, #-104]	; 0xffffff98
    2764:	ldr	r3, [r3, #4]
    2768:	sub	r3, r3, #1
    276c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2770:	lsl	r3, r3, #4
    2774:	add	r3, r2, r3
    2778:	ldr	r3, [r3, #8]
    277c:	b	27a0 <coda_bin_cursor_read_int32+0x84>
    2780:	ldr	r3, [fp, #-104]	; 0xffffff98
    2784:	ldr	r3, [r3, #4]
    2788:	sub	r3, r3, #1
    278c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2790:	lsl	r3, r3, #4
    2794:	add	r3, r2, r3
    2798:	ldr	r3, [r3, #8]
    279c:	ldr	r3, [r3, #4]
    27a0:	str	r3, [fp, #-20]	; 0xffffffec
    27a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    27a8:	ldrd	r2, [r3, #24]
    27ac:	strd	r2, [fp, #-44]	; 0xffffffd4
    27b0:	ldr	r3, [fp, #-104]	; 0xffffff98
    27b4:	ldr	r3, [r3, #4]
    27b8:	sub	r3, r3, #1
    27bc:	ldr	r2, [fp, #-104]	; 0xffffff98
    27c0:	add	r3, r3, #1
    27c4:	lsl	r3, r3, #4
    27c8:	add	r3, r2, r3
    27cc:	ldrd	r2, [r3]
    27d0:	strd	r2, [fp, #-28]	; 0xffffffe4
    27d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    27d8:	ldr	r3, [r3, #44]	; 0x2c
    27dc:	str	r3, [fp, #-32]	; 0xffffffe0
    27e0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    27e4:	mvn	r0, #0
    27e8:	mvn	r1, #0
    27ec:	cmp	r3, r1
    27f0:	cmpeq	r2, r0
    27f4:	bne	28e0 <coda_bin_cursor_read_int32+0x1c4>
    27f8:	sub	r3, fp, #44	; 0x2c
    27fc:	mov	r1, r3
    2800:	ldr	r0, [fp, #-104]	; 0xffffff98
    2804:	bl	1620 <coda_bin_cursor_get_bit_size>
    2808:	mov	r3, r0
    280c:	cmp	r3, #0
    2810:	beq	281c <coda_bin_cursor_read_int32+0x100>
    2814:	mvn	r3, #0
    2818:	b	2ab8 <coda_bin_cursor_read_int32+0x39c>
    281c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2820:	cmp	r2, #0
    2824:	sbcs	r3, r3, #0
    2828:	blt	283c <coda_bin_cursor_read_int32+0x120>
    282c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2830:	cmp	r2, #33	; 0x21
    2834:	sbcs	r3, r3, #0
    2838:	blt	28e0 <coda_bin_cursor_read_int32+0x1c4>
    283c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2840:	sub	r3, fp, #68	; 0x44
    2844:	mov	r2, r3
    2848:	bl	0 <coda_str64>
    284c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2850:	ldr	r3, [r3, #4]
    2854:	sub	r3, r3, #1
    2858:	ldr	r2, [fp, #-104]	; 0xffffff98
    285c:	add	r3, r3, #1
    2860:	lsl	r3, r3, #4
    2864:	add	r3, r2, r3
    2868:	ldrd	r2, [r3]
    286c:	mov	r0, #0
    2870:	mov	r1, #0
    2874:	lsr	r0, r2, #3
    2878:	orr	r0, r0, r3, lsl #29
    287c:	asr	r1, r3, #3
    2880:	sub	r3, fp, #92	; 0x5c
    2884:	mov	r2, r3
    2888:	bl	0 <coda_str64>
    288c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2890:	ldr	r3, [r3, #4]
    2894:	sub	r3, r3, #1
    2898:	ldr	r2, [fp, #-104]	; 0xffffff98
    289c:	add	r3, r3, #1
    28a0:	lsl	r3, r3, #4
    28a4:	add	r3, r2, r3
    28a8:	ldrd	r2, [r3]
    28ac:	mov	r3, r2
    28b0:	and	r3, r3, #7
    28b4:	sub	r1, fp, #92	; 0x5c
    28b8:	sub	r2, fp, #68	; 0x44
    28bc:	str	r3, [sp]
    28c0:	mov	r3, r1
    28c4:	movw	r1, #0
    28c8:	movt	r1, #0
    28cc:	movw	r0, #65236	; 0xfed4
    28d0:	movt	r0, #65535	; 0xffff
    28d4:	bl	0 <coda_set_error>
    28d8:	mvn	r3, #0
    28dc:	b	2ab8 <coda_bin_cursor_read_int32+0x39c>
    28e0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    28e4:	mov	r0, #7
    28e8:	mov	r1, #0
    28ec:	and	r4, r2, r0
    28f0:	and	r5, r3, r1
    28f4:	orrs	r3, r4, r5
    28f8:	bne	290c <coda_bin_cursor_read_int32+0x1f0>
    28fc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2900:	cmp	r3, #0
    2904:	cmpeq	r2, #32
    2908:	beq	29ac <coda_bin_cursor_read_int32+0x290>
    290c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2910:	str	r3, [fp, #-16]
    2914:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2918:	cmp	r3, #0
    291c:	bne	296c <coda_bin_cursor_read_int32+0x250>
    2920:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2924:	mov	r2, #0
    2928:	mov	r3, #0
    292c:	lsr	r2, r0, #3
    2930:	orr	r2, r2, r1, lsl #29
    2934:	asr	r3, r1, #3
    2938:	mov	r1, r2
    293c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2940:	uxtb	r3, r2
    2944:	and	r3, r3, #7
    2948:	cmp	r3, #0
    294c:	movne	r3, #1
    2950:	moveq	r3, #0
    2954:	uxtb	r3, r3
    2958:	add	r3, r1, r3
    295c:	rsb	r3, r3, #4
    2960:	ldr	r2, [fp, #-108]	; 0xffffff94
    2964:	add	r3, r2, r3
    2968:	str	r3, [fp, #-16]
    296c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2970:	mov	r2, #0
    2974:	str	r2, [r3]
    2978:	ldr	r3, [fp, #-104]	; 0xffffff98
    297c:	ldr	r0, [r3]
    2980:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2984:	ldr	r1, [fp, #-16]
    2988:	str	r1, [sp, #8]
    298c:	strd	r2, [sp]
    2990:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2994:	bl	204 <read_bits>
    2998:	mov	r3, r0
    299c:	cmp	r3, #0
    29a0:	beq	29fc <coda_bin_cursor_read_int32+0x2e0>
    29a4:	mvn	r3, #0
    29a8:	b	2ab8 <coda_bin_cursor_read_int32+0x39c>
    29ac:	ldr	r3, [fp, #-104]	; 0xffffff98
    29b0:	ldr	ip, [r3]
    29b4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    29b8:	mov	r2, #0
    29bc:	mov	r3, #0
    29c0:	lsr	r2, r0, #3
    29c4:	orr	r2, r2, r1, lsl #29
    29c8:	asr	r3, r1, #3
    29cc:	ldr	r1, [fp, #-108]	; 0xffffff94
    29d0:	str	r1, [sp, #8]
    29d4:	mov	r0, #4
    29d8:	mov	r1, #0
    29dc:	strd	r0, [sp]
    29e0:	mov	r0, ip
    29e4:	bl	0 <read_bytes>
    29e8:	mov	r3, r0
    29ec:	cmp	r3, #0
    29f0:	beq	2a00 <coda_bin_cursor_read_int32+0x2e4>
    29f4:	mvn	r3, #0
    29f8:	b	2ab8 <coda_bin_cursor_read_int32+0x39c>
    29fc:	nop	{0}
    2a00:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2a04:	cmp	r3, #0
    2a08:	bne	2a48 <coda_bin_cursor_read_int32+0x32c>
    2a0c:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a10:	ldrb	r3, [r3, #3]
    2a14:	strb	r3, [fp, #-96]	; 0xffffffa0
    2a18:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a1c:	ldrb	r3, [r3, #2]
    2a20:	strb	r3, [fp, #-95]	; 0xffffffa1
    2a24:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a28:	ldrb	r3, [r3, #1]
    2a2c:	strb	r3, [fp, #-94]	; 0xffffffa2
    2a30:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a34:	ldrb	r3, [r3]
    2a38:	strb	r3, [fp, #-93]	; 0xffffffa3
    2a3c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    2a40:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a44:	str	r2, [r3]
    2a48:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2a4c:	cmp	r2, #32
    2a50:	sbcs	r3, r3, #0
    2a54:	bge	2ab4 <coda_bin_cursor_read_int32+0x398>
    2a58:	ldr	r3, [fp, #-108]	; 0xffffff94
    2a5c:	ldr	r3, [r3]
    2a60:	str	r3, [fp, #-36]	; 0xffffffdc
    2a64:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2a68:	mov	r3, r2
    2a6c:	sub	r3, r3, #1
    2a70:	mov	r2, #1
    2a74:	lsl	r3, r2, r3
    2a78:	mov	r2, r3
    2a7c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2a80:	and	r3, r3, r2
    2a84:	cmp	r3, #0
    2a88:	beq	2ab4 <coda_bin_cursor_read_int32+0x398>
    2a8c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2a90:	mov	r3, #1
    2a94:	lsl	r3, r3, r2
    2a98:	rsb	r3, r3, #0
    2a9c:	mov	r2, r3
    2aa0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2aa4:	orr	r3, r2, r3
    2aa8:	mov	r2, r3
    2aac:	ldr	r3, [fp, #-108]	; 0xffffff94
    2ab0:	str	r2, [r3]
    2ab4:	mov	r3, #0
    2ab8:	mov	r0, r3
    2abc:	sub	sp, fp, #12
    2ac0:	ldrd	r4, [sp]
    2ac4:	ldr	fp, [sp, #8]
    2ac8:	add	sp, sp, #12
    2acc:	pop	{pc}		; (ldr pc, [sp], #4)

00002ad0 <coda_bin_cursor_read_uint32>:
    2ad0:	strd	r4, [sp, #-16]!
    2ad4:	str	fp, [sp, #8]
    2ad8:	str	lr, [sp, #12]
    2adc:	add	fp, sp, #12
    2ae0:	sub	sp, sp, #112	; 0x70
    2ae4:	str	r0, [fp, #-104]	; 0xffffff98
    2ae8:	str	r1, [fp, #-108]	; 0xffffff94
    2aec:	ldr	r3, [fp, #-104]	; 0xffffff98
    2af0:	ldr	r3, [r3, #4]
    2af4:	sub	r3, r3, #1
    2af8:	ldr	r2, [fp, #-104]	; 0xffffff98
    2afc:	lsl	r3, r3, #4
    2b00:	add	r3, r2, r3
    2b04:	ldr	r3, [r3, #8]
    2b08:	ldr	r3, [r3]
    2b0c:	cmp	r3, #99	; 0x63
    2b10:	bhi	2b34 <coda_bin_cursor_read_uint32+0x64>
    2b14:	ldr	r3, [fp, #-104]	; 0xffffff98
    2b18:	ldr	r3, [r3, #4]
    2b1c:	sub	r3, r3, #1
    2b20:	ldr	r2, [fp, #-104]	; 0xffffff98
    2b24:	lsl	r3, r3, #4
    2b28:	add	r3, r2, r3
    2b2c:	ldr	r3, [r3, #8]
    2b30:	b	2b54 <coda_bin_cursor_read_uint32+0x84>
    2b34:	ldr	r3, [fp, #-104]	; 0xffffff98
    2b38:	ldr	r3, [r3, #4]
    2b3c:	sub	r3, r3, #1
    2b40:	ldr	r2, [fp, #-104]	; 0xffffff98
    2b44:	lsl	r3, r3, #4
    2b48:	add	r3, r2, r3
    2b4c:	ldr	r3, [r3, #8]
    2b50:	ldr	r3, [r3, #4]
    2b54:	str	r3, [fp, #-20]	; 0xffffffec
    2b58:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b5c:	ldrd	r2, [r3, #24]
    2b60:	strd	r2, [fp, #-44]	; 0xffffffd4
    2b64:	ldr	r3, [fp, #-104]	; 0xffffff98
    2b68:	ldr	r3, [r3, #4]
    2b6c:	sub	r3, r3, #1
    2b70:	ldr	r2, [fp, #-104]	; 0xffffff98
    2b74:	add	r3, r3, #1
    2b78:	lsl	r3, r3, #4
    2b7c:	add	r3, r2, r3
    2b80:	ldrd	r2, [r3]
    2b84:	strd	r2, [fp, #-28]	; 0xffffffe4
    2b88:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b8c:	ldr	r3, [r3, #44]	; 0x2c
    2b90:	str	r3, [fp, #-32]	; 0xffffffe0
    2b94:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2b98:	mvn	r0, #0
    2b9c:	mvn	r1, #0
    2ba0:	cmp	r3, r1
    2ba4:	cmpeq	r2, r0
    2ba8:	bne	2c94 <coda_bin_cursor_read_uint32+0x1c4>
    2bac:	sub	r3, fp, #44	; 0x2c
    2bb0:	mov	r1, r3
    2bb4:	ldr	r0, [fp, #-104]	; 0xffffff98
    2bb8:	bl	1620 <coda_bin_cursor_get_bit_size>
    2bbc:	mov	r3, r0
    2bc0:	cmp	r3, #0
    2bc4:	beq	2bd0 <coda_bin_cursor_read_uint32+0x100>
    2bc8:	mvn	r3, #0
    2bcc:	b	2e00 <coda_bin_cursor_read_uint32+0x330>
    2bd0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2bd4:	cmp	r2, #0
    2bd8:	sbcs	r3, r3, #0
    2bdc:	blt	2bf0 <coda_bin_cursor_read_uint32+0x120>
    2be0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2be4:	cmp	r2, #33	; 0x21
    2be8:	sbcs	r3, r3, #0
    2bec:	blt	2c94 <coda_bin_cursor_read_uint32+0x1c4>
    2bf0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2bf4:	sub	r3, fp, #68	; 0x44
    2bf8:	mov	r2, r3
    2bfc:	bl	0 <coda_str64>
    2c00:	ldr	r3, [fp, #-104]	; 0xffffff98
    2c04:	ldr	r3, [r3, #4]
    2c08:	sub	r3, r3, #1
    2c0c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2c10:	add	r3, r3, #1
    2c14:	lsl	r3, r3, #4
    2c18:	add	r3, r2, r3
    2c1c:	ldrd	r2, [r3]
    2c20:	mov	r0, #0
    2c24:	mov	r1, #0
    2c28:	lsr	r0, r2, #3
    2c2c:	orr	r0, r0, r3, lsl #29
    2c30:	asr	r1, r3, #3
    2c34:	sub	r3, fp, #92	; 0x5c
    2c38:	mov	r2, r3
    2c3c:	bl	0 <coda_str64>
    2c40:	ldr	r3, [fp, #-104]	; 0xffffff98
    2c44:	ldr	r3, [r3, #4]
    2c48:	sub	r3, r3, #1
    2c4c:	ldr	r2, [fp, #-104]	; 0xffffff98
    2c50:	add	r3, r3, #1
    2c54:	lsl	r3, r3, #4
    2c58:	add	r3, r2, r3
    2c5c:	ldrd	r2, [r3]
    2c60:	mov	r3, r2
    2c64:	and	r3, r3, #7
    2c68:	sub	r1, fp, #92	; 0x5c
    2c6c:	sub	r2, fp, #68	; 0x44
    2c70:	str	r3, [sp]
    2c74:	mov	r3, r1
    2c78:	movw	r1, #0
    2c7c:	movt	r1, #0
    2c80:	movw	r0, #65236	; 0xfed4
    2c84:	movt	r0, #65535	; 0xffff
    2c88:	bl	0 <coda_set_error>
    2c8c:	mvn	r3, #0
    2c90:	b	2e00 <coda_bin_cursor_read_uint32+0x330>
    2c94:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2c98:	mov	r0, #7
    2c9c:	mov	r1, #0
    2ca0:	and	r4, r2, r0
    2ca4:	and	r5, r3, r1
    2ca8:	orrs	r3, r4, r5
    2cac:	bne	2cc0 <coda_bin_cursor_read_uint32+0x1f0>
    2cb0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2cb4:	cmp	r3, #0
    2cb8:	cmpeq	r2, #32
    2cbc:	beq	2d60 <coda_bin_cursor_read_uint32+0x290>
    2cc0:	ldr	r3, [fp, #-108]	; 0xffffff94
    2cc4:	str	r3, [fp, #-16]
    2cc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2ccc:	cmp	r3, #0
    2cd0:	bne	2d20 <coda_bin_cursor_read_uint32+0x250>
    2cd4:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    2cd8:	mov	r2, #0
    2cdc:	mov	r3, #0
    2ce0:	lsr	r2, r0, #3
    2ce4:	orr	r2, r2, r1, lsl #29
    2ce8:	asr	r3, r1, #3
    2cec:	mov	r1, r2
    2cf0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2cf4:	uxtb	r3, r2
    2cf8:	and	r3, r3, #7
    2cfc:	cmp	r3, #0
    2d00:	movne	r3, #1
    2d04:	moveq	r3, #0
    2d08:	uxtb	r3, r3
    2d0c:	add	r3, r1, r3
    2d10:	rsb	r3, r3, #4
    2d14:	ldr	r2, [fp, #-108]	; 0xffffff94
    2d18:	add	r3, r2, r3
    2d1c:	str	r3, [fp, #-16]
    2d20:	ldr	r3, [fp, #-108]	; 0xffffff94
    2d24:	mov	r2, #0
    2d28:	str	r2, [r3]
    2d2c:	ldr	r3, [fp, #-104]	; 0xffffff98
    2d30:	ldr	r0, [r3]
    2d34:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2d38:	ldr	r1, [fp, #-16]
    2d3c:	str	r1, [sp, #8]
    2d40:	strd	r2, [sp]
    2d44:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2d48:	bl	204 <read_bits>
    2d4c:	mov	r3, r0
    2d50:	cmp	r3, #0
    2d54:	beq	2db0 <coda_bin_cursor_read_uint32+0x2e0>
    2d58:	mvn	r3, #0
    2d5c:	b	2e00 <coda_bin_cursor_read_uint32+0x330>
    2d60:	ldr	r3, [fp, #-104]	; 0xffffff98
    2d64:	ldr	ip, [r3]
    2d68:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    2d6c:	mov	r2, #0
    2d70:	mov	r3, #0
    2d74:	lsr	r2, r0, #3
    2d78:	orr	r2, r2, r1, lsl #29
    2d7c:	asr	r3, r1, #3
    2d80:	ldr	r1, [fp, #-108]	; 0xffffff94
    2d84:	str	r1, [sp, #8]
    2d88:	mov	r0, #4
    2d8c:	mov	r1, #0
    2d90:	strd	r0, [sp]
    2d94:	mov	r0, ip
    2d98:	bl	0 <read_bytes>
    2d9c:	mov	r3, r0
    2da0:	cmp	r3, #0
    2da4:	beq	2db4 <coda_bin_cursor_read_uint32+0x2e4>
    2da8:	mvn	r3, #0
    2dac:	b	2e00 <coda_bin_cursor_read_uint32+0x330>
    2db0:	nop	{0}
    2db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2db8:	cmp	r3, #0
    2dbc:	bne	2dfc <coda_bin_cursor_read_uint32+0x32c>
    2dc0:	ldr	r3, [fp, #-108]	; 0xffffff94
    2dc4:	ldrb	r3, [r3, #3]
    2dc8:	strb	r3, [fp, #-96]	; 0xffffffa0
    2dcc:	ldr	r3, [fp, #-108]	; 0xffffff94
    2dd0:	ldrb	r3, [r3, #2]
    2dd4:	strb	r3, [fp, #-95]	; 0xffffffa1
    2dd8:	ldr	r3, [fp, #-108]	; 0xffffff94
    2ddc:	ldrb	r3, [r3, #1]
    2de0:	strb	r3, [fp, #-94]	; 0xffffffa2
    2de4:	ldr	r3, [fp, #-108]	; 0xffffff94
    2de8:	ldrb	r3, [r3]
    2dec:	strb	r3, [fp, #-93]	; 0xffffffa3
    2df0:	ldr	r2, [fp, #-96]	; 0xffffffa0
    2df4:	ldr	r3, [fp, #-108]	; 0xffffff94
    2df8:	str	r2, [r3]
    2dfc:	mov	r3, #0
    2e00:	mov	r0, r3
    2e04:	sub	sp, fp, #12
    2e08:	ldrd	r4, [sp]
    2e0c:	ldr	fp, [sp, #8]
    2e10:	add	sp, sp, #12
    2e14:	pop	{pc}		; (ldr pc, [sp], #4)

00002e18 <coda_bin_cursor_read_int64>:
    2e18:	strd	r4, [sp, #-32]!	; 0xffffffe0
    2e1c:	strd	r6, [sp, #8]
    2e20:	strd	r8, [sp, #16]
    2e24:	str	fp, [sp, #24]
    2e28:	str	lr, [sp, #28]
    2e2c:	add	fp, sp, #28
    2e30:	sub	sp, sp, #128	; 0x80
    2e34:	str	r0, [fp, #-128]	; 0xffffff80
    2e38:	str	r1, [fp, #-132]	; 0xffffff7c
    2e3c:	ldr	r3, [fp, #-128]	; 0xffffff80
    2e40:	ldr	r3, [r3, #4]
    2e44:	sub	r3, r3, #1
    2e48:	ldr	r2, [fp, #-128]	; 0xffffff80
    2e4c:	lsl	r3, r3, #4
    2e50:	add	r3, r2, r3
    2e54:	ldr	r3, [r3, #8]
    2e58:	ldr	r3, [r3]
    2e5c:	cmp	r3, #99	; 0x63
    2e60:	bhi	2e84 <coda_bin_cursor_read_int64+0x6c>
    2e64:	ldr	r3, [fp, #-128]	; 0xffffff80
    2e68:	ldr	r3, [r3, #4]
    2e6c:	sub	r3, r3, #1
    2e70:	ldr	r2, [fp, #-128]	; 0xffffff80
    2e74:	lsl	r3, r3, #4
    2e78:	add	r3, r2, r3
    2e7c:	ldr	r3, [r3, #8]
    2e80:	b	2ea4 <coda_bin_cursor_read_int64+0x8c>
    2e84:	ldr	r3, [fp, #-128]	; 0xffffff80
    2e88:	ldr	r3, [r3, #4]
    2e8c:	sub	r3, r3, #1
    2e90:	ldr	r2, [fp, #-128]	; 0xffffff80
    2e94:	lsl	r3, r3, #4
    2e98:	add	r3, r2, r3
    2e9c:	ldr	r3, [r3, #8]
    2ea0:	ldr	r3, [r3, #4]
    2ea4:	str	r3, [fp, #-36]	; 0xffffffdc
    2ea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2eac:	ldrd	r2, [r3, #24]
    2eb0:	strd	r2, [fp, #-68]	; 0xffffffbc
    2eb4:	ldr	r3, [fp, #-128]	; 0xffffff80
    2eb8:	ldr	r3, [r3, #4]
    2ebc:	sub	r3, r3, #1
    2ec0:	ldr	r2, [fp, #-128]	; 0xffffff80
    2ec4:	add	r3, r3, #1
    2ec8:	lsl	r3, r3, #4
    2ecc:	add	r3, r2, r3
    2ed0:	ldrd	r2, [r3]
    2ed4:	strd	r2, [fp, #-44]	; 0xffffffd4
    2ed8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2edc:	ldr	r3, [r3, #44]	; 0x2c
    2ee0:	str	r3, [fp, #-48]	; 0xffffffd0
    2ee4:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2ee8:	mvn	r0, #0
    2eec:	mvn	r1, #0
    2ef0:	cmp	r3, r1
    2ef4:	cmpeq	r2, r0
    2ef8:	bne	2fe4 <coda_bin_cursor_read_int64+0x1cc>
    2efc:	sub	r3, fp, #68	; 0x44
    2f00:	mov	r1, r3
    2f04:	ldr	r0, [fp, #-128]	; 0xffffff80
    2f08:	bl	1620 <coda_bin_cursor_get_bit_size>
    2f0c:	mov	r3, r0
    2f10:	cmp	r3, #0
    2f14:	beq	2f20 <coda_bin_cursor_read_int64+0x108>
    2f18:	mvn	r3, #0
    2f1c:	b	3218 <coda_bin_cursor_read_int64+0x400>
    2f20:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2f24:	cmp	r2, #0
    2f28:	sbcs	r3, r3, #0
    2f2c:	blt	2f40 <coda_bin_cursor_read_int64+0x128>
    2f30:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    2f34:	cmp	r2, #65	; 0x41
    2f38:	sbcs	r3, r3, #0
    2f3c:	blt	2fe4 <coda_bin_cursor_read_int64+0x1cc>
    2f40:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    2f44:	sub	r3, fp, #92	; 0x5c
    2f48:	mov	r2, r3
    2f4c:	bl	0 <coda_str64>
    2f50:	ldr	r3, [fp, #-128]	; 0xffffff80
    2f54:	ldr	r3, [r3, #4]
    2f58:	sub	r3, r3, #1
    2f5c:	ldr	r2, [fp, #-128]	; 0xffffff80
    2f60:	add	r3, r3, #1
    2f64:	lsl	r3, r3, #4
    2f68:	add	r3, r2, r3
    2f6c:	ldrd	r2, [r3]
    2f70:	mov	r0, #0
    2f74:	mov	r1, #0
    2f78:	lsr	r0, r2, #3
    2f7c:	orr	r0, r0, r3, lsl #29
    2f80:	asr	r1, r3, #3
    2f84:	sub	r3, fp, #116	; 0x74
    2f88:	mov	r2, r3
    2f8c:	bl	0 <coda_str64>
    2f90:	ldr	r3, [fp, #-128]	; 0xffffff80
    2f94:	ldr	r3, [r3, #4]
    2f98:	sub	r3, r3, #1
    2f9c:	ldr	r2, [fp, #-128]	; 0xffffff80
    2fa0:	add	r3, r3, #1
    2fa4:	lsl	r3, r3, #4
    2fa8:	add	r3, r2, r3
    2fac:	ldrd	r2, [r3]
    2fb0:	mov	r3, r2
    2fb4:	and	r3, r3, #7
    2fb8:	sub	r1, fp, #116	; 0x74
    2fbc:	sub	r2, fp, #92	; 0x5c
    2fc0:	str	r3, [sp]
    2fc4:	mov	r3, r1
    2fc8:	movw	r1, #0
    2fcc:	movt	r1, #0
    2fd0:	movw	r0, #65236	; 0xfed4
    2fd4:	movt	r0, #65535	; 0xffff
    2fd8:	bl	0 <coda_set_error>
    2fdc:	mvn	r3, #0
    2fe0:	b	3218 <coda_bin_cursor_read_int64+0x400>
    2fe4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    2fe8:	mov	r0, #7
    2fec:	mov	r1, #0
    2ff0:	and	r8, r2, r0
    2ff4:	and	r9, r3, r1
    2ff8:	orrs	r3, r8, r9
    2ffc:	bne	3010 <coda_bin_cursor_read_int64+0x1f8>
    3000:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3004:	cmp	r3, #0
    3008:	cmpeq	r2, #64	; 0x40
    300c:	beq	30b4 <coda_bin_cursor_read_int64+0x29c>
    3010:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3014:	str	r3, [fp, #-32]	; 0xffffffe0
    3018:	ldr	r3, [fp, #-48]	; 0xffffffd0
    301c:	cmp	r3, #0
    3020:	bne	3070 <coda_bin_cursor_read_int64+0x258>
    3024:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    3028:	mov	r2, #0
    302c:	mov	r3, #0
    3030:	lsr	r2, r0, #3
    3034:	orr	r2, r2, r1, lsl #29
    3038:	asr	r3, r1, #3
    303c:	mov	r1, r2
    3040:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3044:	uxtb	r3, r2
    3048:	and	r3, r3, #7
    304c:	cmp	r3, #0
    3050:	movne	r3, #1
    3054:	moveq	r3, #0
    3058:	uxtb	r3, r3
    305c:	add	r3, r1, r3
    3060:	rsb	r3, r3, #8
    3064:	ldr	r2, [fp, #-132]	; 0xffffff7c
    3068:	add	r3, r2, r3
    306c:	str	r3, [fp, #-32]	; 0xffffffe0
    3070:	ldr	r1, [fp, #-132]	; 0xffffff7c
    3074:	mov	r2, #0
    3078:	mov	r3, #0
    307c:	strd	r2, [r1]
    3080:	ldr	r3, [fp, #-128]	; 0xffffff80
    3084:	ldr	r0, [r3]
    3088:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    308c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3090:	str	r1, [sp, #8]
    3094:	strd	r2, [sp]
    3098:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    309c:	bl	204 <read_bits>
    30a0:	mov	r3, r0
    30a4:	cmp	r3, #0
    30a8:	beq	3104 <coda_bin_cursor_read_int64+0x2ec>
    30ac:	mvn	r3, #0
    30b0:	b	3218 <coda_bin_cursor_read_int64+0x400>
    30b4:	ldr	r3, [fp, #-128]	; 0xffffff80
    30b8:	ldr	ip, [r3]
    30bc:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    30c0:	mov	r2, #0
    30c4:	mov	r3, #0
    30c8:	lsr	r2, r0, #3
    30cc:	orr	r2, r2, r1, lsl #29
    30d0:	asr	r3, r1, #3
    30d4:	ldr	r1, [fp, #-132]	; 0xffffff7c
    30d8:	str	r1, [sp, #8]
    30dc:	mov	r0, #8
    30e0:	mov	r1, #0
    30e4:	strd	r0, [sp]
    30e8:	mov	r0, ip
    30ec:	bl	0 <read_bytes>
    30f0:	mov	r3, r0
    30f4:	cmp	r3, #0
    30f8:	beq	3108 <coda_bin_cursor_read_int64+0x2f0>
    30fc:	mvn	r3, #0
    3100:	b	3218 <coda_bin_cursor_read_int64+0x400>
    3104:	nop	{0}
    3108:	ldr	r3, [fp, #-48]	; 0xffffffd0
    310c:	cmp	r3, #0
    3110:	bne	3180 <coda_bin_cursor_read_int64+0x368>
    3114:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3118:	ldrb	r3, [r3, #7]
    311c:	strb	r3, [fp, #-124]	; 0xffffff84
    3120:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3124:	ldrb	r3, [r3, #6]
    3128:	strb	r3, [fp, #-123]	; 0xffffff85
    312c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3130:	ldrb	r3, [r3, #5]
    3134:	strb	r3, [fp, #-122]	; 0xffffff86
    3138:	ldr	r3, [fp, #-132]	; 0xffffff7c
    313c:	ldrb	r3, [r3, #4]
    3140:	strb	r3, [fp, #-121]	; 0xffffff87
    3144:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3148:	ldrb	r3, [r3, #3]
    314c:	strb	r3, [fp, #-120]	; 0xffffff88
    3150:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3154:	ldrb	r3, [r3, #2]
    3158:	strb	r3, [fp, #-119]	; 0xffffff89
    315c:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3160:	ldrb	r3, [r3, #1]
    3164:	strb	r3, [fp, #-118]	; 0xffffff8a
    3168:	ldr	r3, [fp, #-132]	; 0xffffff7c
    316c:	ldrb	r3, [r3]
    3170:	strb	r3, [fp, #-117]	; 0xffffff8b
    3174:	ldrd	r2, [fp, #-124]	; 0xffffff84
    3178:	ldr	r1, [fp, #-132]	; 0xffffff7c
    317c:	strd	r2, [r1]
    3180:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3184:	cmp	r2, #64	; 0x40
    3188:	sbcs	r3, r3, #0
    318c:	bge	3214 <coda_bin_cursor_read_int64+0x3fc>
    3190:	ldr	r3, [fp, #-132]	; 0xffffff7c
    3194:	ldrd	r2, [r3]
    3198:	strd	r2, [fp, #-60]	; 0xffffffc4
    319c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    31a0:	mov	r3, r2
    31a4:	sub	r1, r3, #1
    31a8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    31ac:	rsb	ip, r1, #32
    31b0:	sub	r0, r1, #32
    31b4:	lsr	r4, r2, r1
    31b8:	orr	r4, r4, r3, lsl ip
    31bc:	orr	r4, r4, r3, lsr r0
    31c0:	lsr	r5, r3, r1
    31c4:	mov	r2, #1
    31c8:	mov	r3, #0
    31cc:	and	r6, r4, r2
    31d0:	and	r7, r5, r3
    31d4:	orrs	r3, r6, r7
    31d8:	beq	3214 <coda_bin_cursor_read_int64+0x3fc>
    31dc:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    31e0:	mov	r3, #1
    31e4:	lsl	r3, r3, r2
    31e8:	rsb	r3, r3, #0
    31ec:	mov	r0, r3
    31f0:	asr	r1, r0, #31
    31f4:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    31f8:	orr	ip, r0, r2
    31fc:	str	ip, [fp, #-140]	; 0xffffff74
    3200:	orr	r3, r1, r3
    3204:	str	r3, [fp, #-136]	; 0xffffff78
    3208:	ldrd	r2, [fp, #-140]	; 0xffffff74
    320c:	ldr	r1, [fp, #-132]	; 0xffffff7c
    3210:	strd	r2, [r1]
    3214:	mov	r3, #0
    3218:	mov	r0, r3
    321c:	sub	sp, fp, #28
    3220:	ldrd	r4, [sp]
    3224:	ldrd	r6, [sp, #8]
    3228:	ldrd	r8, [sp, #16]
    322c:	ldr	fp, [sp, #24]
    3230:	add	sp, sp, #28
    3234:	pop	{pc}		; (ldr pc, [sp], #4)

00003238 <coda_bin_cursor_read_uint64>:
    3238:	strd	r4, [sp, #-16]!
    323c:	str	fp, [sp, #8]
    3240:	str	lr, [sp, #12]
    3244:	add	fp, sp, #12
    3248:	sub	sp, sp, #112	; 0x70
    324c:	str	r0, [fp, #-104]	; 0xffffff98
    3250:	str	r1, [fp, #-108]	; 0xffffff94
    3254:	ldr	r3, [fp, #-104]	; 0xffffff98
    3258:	ldr	r3, [r3, #4]
    325c:	sub	r3, r3, #1
    3260:	ldr	r2, [fp, #-104]	; 0xffffff98
    3264:	lsl	r3, r3, #4
    3268:	add	r3, r2, r3
    326c:	ldr	r3, [r3, #8]
    3270:	ldr	r3, [r3]
    3274:	cmp	r3, #99	; 0x63
    3278:	bhi	329c <coda_bin_cursor_read_uint64+0x64>
    327c:	ldr	r3, [fp, #-104]	; 0xffffff98
    3280:	ldr	r3, [r3, #4]
    3284:	sub	r3, r3, #1
    3288:	ldr	r2, [fp, #-104]	; 0xffffff98
    328c:	lsl	r3, r3, #4
    3290:	add	r3, r2, r3
    3294:	ldr	r3, [r3, #8]
    3298:	b	32bc <coda_bin_cursor_read_uint64+0x84>
    329c:	ldr	r3, [fp, #-104]	; 0xffffff98
    32a0:	ldr	r3, [r3, #4]
    32a4:	sub	r3, r3, #1
    32a8:	ldr	r2, [fp, #-104]	; 0xffffff98
    32ac:	lsl	r3, r3, #4
    32b0:	add	r3, r2, r3
    32b4:	ldr	r3, [r3, #8]
    32b8:	ldr	r3, [r3, #4]
    32bc:	str	r3, [fp, #-20]	; 0xffffffec
    32c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    32c4:	ldrd	r2, [r3, #24]
    32c8:	strd	r2, [fp, #-44]	; 0xffffffd4
    32cc:	ldr	r3, [fp, #-104]	; 0xffffff98
    32d0:	ldr	r3, [r3, #4]
    32d4:	sub	r3, r3, #1
    32d8:	ldr	r2, [fp, #-104]	; 0xffffff98
    32dc:	add	r3, r3, #1
    32e0:	lsl	r3, r3, #4
    32e4:	add	r3, r2, r3
    32e8:	ldrd	r2, [r3]
    32ec:	strd	r2, [fp, #-28]	; 0xffffffe4
    32f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    32f4:	ldr	r3, [r3, #44]	; 0x2c
    32f8:	str	r3, [fp, #-32]	; 0xffffffe0
    32fc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3300:	mvn	r0, #0
    3304:	mvn	r1, #0
    3308:	cmp	r3, r1
    330c:	cmpeq	r2, r0
    3310:	bne	33fc <coda_bin_cursor_read_uint64+0x1c4>
    3314:	sub	r3, fp, #44	; 0x2c
    3318:	mov	r1, r3
    331c:	ldr	r0, [fp, #-104]	; 0xffffff98
    3320:	bl	1620 <coda_bin_cursor_get_bit_size>
    3324:	mov	r3, r0
    3328:	cmp	r3, #0
    332c:	beq	3338 <coda_bin_cursor_read_uint64+0x100>
    3330:	mvn	r3, #0
    3334:	b	359c <coda_bin_cursor_read_uint64+0x364>
    3338:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    333c:	cmp	r2, #0
    3340:	sbcs	r3, r3, #0
    3344:	blt	3358 <coda_bin_cursor_read_uint64+0x120>
    3348:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    334c:	cmp	r2, #65	; 0x41
    3350:	sbcs	r3, r3, #0
    3354:	blt	33fc <coda_bin_cursor_read_uint64+0x1c4>
    3358:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    335c:	sub	r3, fp, #68	; 0x44
    3360:	mov	r2, r3
    3364:	bl	0 <coda_str64>
    3368:	ldr	r3, [fp, #-104]	; 0xffffff98
    336c:	ldr	r3, [r3, #4]
    3370:	sub	r3, r3, #1
    3374:	ldr	r2, [fp, #-104]	; 0xffffff98
    3378:	add	r3, r3, #1
    337c:	lsl	r3, r3, #4
    3380:	add	r3, r2, r3
    3384:	ldrd	r2, [r3]
    3388:	mov	r0, #0
    338c:	mov	r1, #0
    3390:	lsr	r0, r2, #3
    3394:	orr	r0, r0, r3, lsl #29
    3398:	asr	r1, r3, #3
    339c:	sub	r3, fp, #92	; 0x5c
    33a0:	mov	r2, r3
    33a4:	bl	0 <coda_str64>
    33a8:	ldr	r3, [fp, #-104]	; 0xffffff98
    33ac:	ldr	r3, [r3, #4]
    33b0:	sub	r3, r3, #1
    33b4:	ldr	r2, [fp, #-104]	; 0xffffff98
    33b8:	add	r3, r3, #1
    33bc:	lsl	r3, r3, #4
    33c0:	add	r3, r2, r3
    33c4:	ldrd	r2, [r3]
    33c8:	mov	r3, r2
    33cc:	and	r3, r3, #7
    33d0:	sub	r1, fp, #92	; 0x5c
    33d4:	sub	r2, fp, #68	; 0x44
    33d8:	str	r3, [sp]
    33dc:	mov	r3, r1
    33e0:	movw	r1, #0
    33e4:	movt	r1, #0
    33e8:	movw	r0, #65236	; 0xfed4
    33ec:	movt	r0, #65535	; 0xffff
    33f0:	bl	0 <coda_set_error>
    33f4:	mvn	r3, #0
    33f8:	b	359c <coda_bin_cursor_read_uint64+0x364>
    33fc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    3400:	mov	r0, #7
    3404:	mov	r1, #0
    3408:	and	r4, r2, r0
    340c:	and	r5, r3, r1
    3410:	orrs	r3, r4, r5
    3414:	bne	3428 <coda_bin_cursor_read_uint64+0x1f0>
    3418:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    341c:	cmp	r3, #0
    3420:	cmpeq	r2, #64	; 0x40
    3424:	beq	34cc <coda_bin_cursor_read_uint64+0x294>
    3428:	ldr	r3, [fp, #-108]	; 0xffffff94
    342c:	str	r3, [fp, #-16]
    3430:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3434:	cmp	r3, #0
    3438:	bne	3488 <coda_bin_cursor_read_uint64+0x250>
    343c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3440:	mov	r2, #0
    3444:	mov	r3, #0
    3448:	lsr	r2, r0, #3
    344c:	orr	r2, r2, r1, lsl #29
    3450:	asr	r3, r1, #3
    3454:	mov	r1, r2
    3458:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    345c:	uxtb	r3, r2
    3460:	and	r3, r3, #7
    3464:	cmp	r3, #0
    3468:	movne	r3, #1
    346c:	moveq	r3, #0
    3470:	uxtb	r3, r3
    3474:	add	r3, r1, r3
    3478:	rsb	r3, r3, #8
    347c:	ldr	r2, [fp, #-108]	; 0xffffff94
    3480:	add	r3, r2, r3
    3484:	str	r3, [fp, #-16]
    3488:	ldr	r1, [fp, #-108]	; 0xffffff94
    348c:	mov	r2, #0
    3490:	mov	r3, #0
    3494:	strd	r2, [r1]
    3498:	ldr	r3, [fp, #-104]	; 0xffffff98
    349c:	ldr	r0, [r3]
    34a0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    34a4:	ldr	r1, [fp, #-16]
    34a8:	str	r1, [sp, #8]
    34ac:	strd	r2, [sp]
    34b0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    34b4:	bl	204 <read_bits>
    34b8:	mov	r3, r0
    34bc:	cmp	r3, #0
    34c0:	beq	351c <coda_bin_cursor_read_uint64+0x2e4>
    34c4:	mvn	r3, #0
    34c8:	b	359c <coda_bin_cursor_read_uint64+0x364>
    34cc:	ldr	r3, [fp, #-104]	; 0xffffff98
    34d0:	ldr	ip, [r3]
    34d4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    34d8:	mov	r2, #0
    34dc:	mov	r3, #0
    34e0:	lsr	r2, r0, #3
    34e4:	orr	r2, r2, r1, lsl #29
    34e8:	asr	r3, r1, #3
    34ec:	ldr	r1, [fp, #-108]	; 0xffffff94
    34f0:	str	r1, [sp, #8]
    34f4:	mov	r0, #8
    34f8:	mov	r1, #0
    34fc:	strd	r0, [sp]
    3500:	mov	r0, ip
    3504:	bl	0 <read_bytes>
    3508:	mov	r3, r0
    350c:	cmp	r3, #0
    3510:	beq	3520 <coda_bin_cursor_read_uint64+0x2e8>
    3514:	mvn	r3, #0
    3518:	b	359c <coda_bin_cursor_read_uint64+0x364>
    351c:	nop	{0}
    3520:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3524:	cmp	r3, #0
    3528:	bne	3598 <coda_bin_cursor_read_uint64+0x360>
    352c:	ldr	r3, [fp, #-108]	; 0xffffff94
    3530:	ldrb	r3, [r3, #7]
    3534:	strb	r3, [fp, #-100]	; 0xffffff9c
    3538:	ldr	r3, [fp, #-108]	; 0xffffff94
    353c:	ldrb	r3, [r3, #6]
    3540:	strb	r3, [fp, #-99]	; 0xffffff9d
    3544:	ldr	r3, [fp, #-108]	; 0xffffff94
    3548:	ldrb	r3, [r3, #5]
    354c:	strb	r3, [fp, #-98]	; 0xffffff9e
    3550:	ldr	r3, [fp, #-108]	; 0xffffff94
    3554:	ldrb	r3, [r3, #4]
    3558:	strb	r3, [fp, #-97]	; 0xffffff9f
    355c:	ldr	r3, [fp, #-108]	; 0xffffff94
    3560:	ldrb	r3, [r3, #3]
    3564:	strb	r3, [fp, #-96]	; 0xffffffa0
    3568:	ldr	r3, [fp, #-108]	; 0xffffff94
    356c:	ldrb	r3, [r3, #2]
    3570:	strb	r3, [fp, #-95]	; 0xffffffa1
    3574:	ldr	r3, [fp, #-108]	; 0xffffff94
    3578:	ldrb	r3, [r3, #1]
    357c:	strb	r3, [fp, #-94]	; 0xffffffa2
    3580:	ldr	r3, [fp, #-108]	; 0xffffff94
    3584:	ldrb	r3, [r3]
    3588:	strb	r3, [fp, #-93]	; 0xffffffa3
    358c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    3590:	ldr	r1, [fp, #-108]	; 0xffffff94
    3594:	strd	r2, [r1]
    3598:	mov	r3, #0
    359c:	mov	r0, r3
    35a0:	sub	sp, fp, #12
    35a4:	ldrd	r4, [sp]
    35a8:	ldr	fp, [sp, #8]
    35ac:	add	sp, sp, #12
    35b0:	pop	{pc}		; (ldr pc, [sp], #4)

000035b4 <coda_bin_cursor_read_float>:
    35b4:	strd	r4, [sp, #-16]!
    35b8:	str	fp, [sp, #8]
    35bc:	str	lr, [sp, #12]
    35c0:	add	fp, sp, #12
    35c4:	sub	sp, sp, #48	; 0x30
    35c8:	str	r0, [fp, #-40]	; 0xffffffd8
    35cc:	str	r1, [fp, #-44]	; 0xffffffd4
    35d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    35d4:	ldr	r1, [r1, #4]
    35d8:	sub	r1, r1, #1
    35dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    35e0:	lsl	r1, r1, #4
    35e4:	add	r1, r0, r1
    35e8:	ldr	r1, [r1, #8]
    35ec:	ldr	r1, [r1]
    35f0:	cmp	r1, #99	; 0x63
    35f4:	bhi	3618 <coda_bin_cursor_read_float+0x64>
    35f8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    35fc:	ldr	r1, [r1, #4]
    3600:	sub	r1, r1, #1
    3604:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3608:	lsl	r1, r1, #4
    360c:	add	r1, r0, r1
    3610:	ldr	r1, [r1, #8]
    3614:	b	3638 <coda_bin_cursor_read_float+0x84>
    3618:	ldr	r1, [fp, #-40]	; 0xffffffd8
    361c:	ldr	r1, [r1, #4]
    3620:	sub	r1, r1, #1
    3624:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3628:	lsl	r1, r1, #4
    362c:	add	r1, r0, r1
    3630:	ldr	r1, [r1, #8]
    3634:	ldr	r1, [r1, #4]
    3638:	str	r1, [fp, #-16]
    363c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3640:	ldr	r1, [r1, #4]
    3644:	sub	r1, r1, #1
    3648:	ldr	r0, [fp, #-40]	; 0xffffffd8
    364c:	add	r1, r1, #1
    3650:	lsl	r1, r1, #4
    3654:	add	r1, r0, r1
    3658:	ldrd	r0, [r1]
    365c:	strd	r0, [fp, #-28]	; 0xffffffe4
    3660:	ldr	r1, [fp, #-16]
    3664:	ldr	r1, [r1, #44]	; 0x2c
    3668:	str	r1, [fp, #-32]	; 0xffffffe0
    366c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3670:	mov	r4, #7
    3674:	mov	r5, #0
    3678:	and	r2, r0, r4
    367c:	and	r3, r1, r5
    3680:	orrs	r3, r2, r3
    3684:	beq	36c4 <coda_bin_cursor_read_float+0x110>
    3688:	ldr	r3, [fp, #-40]	; 0xffffffd8
    368c:	ldr	r1, [r3]
    3690:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3694:	str	r3, [sp, #8]
    3698:	mov	r2, #32
    369c:	mov	r3, #0
    36a0:	strd	r2, [sp]
    36a4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    36a8:	mov	r0, r1
    36ac:	bl	204 <read_bits>
    36b0:	mov	r3, r0
    36b4:	cmp	r3, #0
    36b8:	beq	3714 <coda_bin_cursor_read_float+0x160>
    36bc:	mvn	r3, #0
    36c0:	b	3760 <coda_bin_cursor_read_float+0x1ac>
    36c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    36c8:	ldr	ip, [r3]
    36cc:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    36d0:	mov	r2, #0
    36d4:	mov	r3, #0
    36d8:	lsr	r2, r0, #3
    36dc:	orr	r2, r2, r1, lsl #29
    36e0:	asr	r3, r1, #3
    36e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    36e8:	str	r1, [sp, #8]
    36ec:	mov	r0, #4
    36f0:	mov	r1, #0
    36f4:	strd	r0, [sp]
    36f8:	mov	r0, ip
    36fc:	bl	0 <read_bytes>
    3700:	mov	r3, r0
    3704:	cmp	r3, #0
    3708:	beq	3714 <coda_bin_cursor_read_float+0x160>
    370c:	mvn	r3, #0
    3710:	b	3760 <coda_bin_cursor_read_float+0x1ac>
    3714:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3718:	cmp	r3, #0
    371c:	bne	375c <coda_bin_cursor_read_float+0x1a8>
    3720:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3724:	ldrb	r3, [r3, #3]
    3728:	strb	r3, [fp, #-36]	; 0xffffffdc
    372c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3730:	ldrb	r3, [r3, #2]
    3734:	strb	r3, [fp, #-35]	; 0xffffffdd
    3738:	ldr	r3, [fp, #-44]	; 0xffffffd4
    373c:	ldrb	r3, [r3, #1]
    3740:	strb	r3, [fp, #-34]	; 0xffffffde
    3744:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3748:	ldrb	r3, [r3]
    374c:	strb	r3, [fp, #-33]	; 0xffffffdf
    3750:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3754:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3758:	str	r2, [r3]
    375c:	mov	r3, #0
    3760:	mov	r0, r3
    3764:	sub	sp, fp, #12
    3768:	ldrd	r4, [sp]
    376c:	ldr	fp, [sp, #8]
    3770:	add	sp, sp, #12
    3774:	pop	{pc}		; (ldr pc, [sp], #4)

00003778 <read_double>:
    3778:	strd	r4, [sp, #-16]!
    377c:	str	fp, [sp, #8]
    3780:	str	lr, [sp, #12]
    3784:	add	fp, sp, #12
    3788:	sub	sp, sp, #56	; 0x38
    378c:	str	r0, [fp, #-48]	; 0xffffffd0
    3790:	str	r1, [fp, #-52]	; 0xffffffcc
    3794:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3798:	ldr	r1, [r1, #4]
    379c:	sub	r1, r1, #1
    37a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37a4:	lsl	r1, r1, #4
    37a8:	add	r1, r0, r1
    37ac:	ldr	r1, [r1, #8]
    37b0:	ldr	r1, [r1]
    37b4:	cmp	r1, #99	; 0x63
    37b8:	bhi	37dc <read_double+0x64>
    37bc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    37c0:	ldr	r1, [r1, #4]
    37c4:	sub	r1, r1, #1
    37c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37cc:	lsl	r1, r1, #4
    37d0:	add	r1, r0, r1
    37d4:	ldr	r1, [r1, #8]
    37d8:	b	37fc <read_double+0x84>
    37dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    37e0:	ldr	r1, [r1, #4]
    37e4:	sub	r1, r1, #1
    37e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37ec:	lsl	r1, r1, #4
    37f0:	add	r1, r0, r1
    37f4:	ldr	r1, [r1, #8]
    37f8:	ldr	r1, [r1, #4]
    37fc:	str	r1, [fp, #-16]
    3800:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3804:	ldr	r1, [r1, #4]
    3808:	sub	r1, r1, #1
    380c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3810:	add	r1, r1, #1
    3814:	lsl	r1, r1, #4
    3818:	add	r1, r0, r1
    381c:	ldrd	r0, [r1]
    3820:	strd	r0, [fp, #-28]	; 0xffffffe4
    3824:	ldr	r1, [fp, #-16]
    3828:	ldr	r1, [r1, #44]	; 0x2c
    382c:	str	r1, [fp, #-32]	; 0xffffffe0
    3830:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3834:	mov	r4, #7
    3838:	mov	r5, #0
    383c:	and	r2, r0, r4
    3840:	and	r3, r1, r5
    3844:	orrs	r3, r2, r3
    3848:	beq	3888 <read_double+0x110>
    384c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3850:	ldr	r1, [r3]
    3854:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3858:	str	r3, [sp, #8]
    385c:	mov	r2, #64	; 0x40
    3860:	mov	r3, #0
    3864:	strd	r2, [sp]
    3868:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    386c:	mov	r0, r1
    3870:	bl	204 <read_bits>
    3874:	mov	r3, r0
    3878:	cmp	r3, #0
    387c:	beq	38d8 <read_double+0x160>
    3880:	mvn	r3, #0
    3884:	b	3954 <read_double+0x1dc>
    3888:	ldr	r3, [fp, #-48]	; 0xffffffd0
    388c:	ldr	ip, [r3]
    3890:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    3894:	mov	r2, #0
    3898:	mov	r3, #0
    389c:	lsr	r2, r0, #3
    38a0:	orr	r2, r2, r1, lsl #29
    38a4:	asr	r3, r1, #3
    38a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    38ac:	str	r1, [sp, #8]
    38b0:	mov	r0, #8
    38b4:	mov	r1, #0
    38b8:	strd	r0, [sp]
    38bc:	mov	r0, ip
    38c0:	bl	0 <read_bytes>
    38c4:	mov	r3, r0
    38c8:	cmp	r3, #0
    38cc:	beq	38d8 <read_double+0x160>
    38d0:	mvn	r3, #0
    38d4:	b	3954 <read_double+0x1dc>
    38d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    38dc:	cmp	r3, #0
    38e0:	bne	3950 <read_double+0x1d8>
    38e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    38e8:	ldrb	r3, [r3, #7]
    38ec:	strb	r3, [fp, #-44]	; 0xffffffd4
    38f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
    38f4:	ldrb	r3, [r3, #6]
    38f8:	strb	r3, [fp, #-43]	; 0xffffffd5
    38fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3900:	ldrb	r3, [r3, #5]
    3904:	strb	r3, [fp, #-42]	; 0xffffffd6
    3908:	ldr	r3, [fp, #-52]	; 0xffffffcc
    390c:	ldrb	r3, [r3, #4]
    3910:	strb	r3, [fp, #-41]	; 0xffffffd7
    3914:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3918:	ldrb	r3, [r3, #3]
    391c:	strb	r3, [fp, #-40]	; 0xffffffd8
    3920:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3924:	ldrb	r3, [r3, #2]
    3928:	strb	r3, [fp, #-39]	; 0xffffffd9
    392c:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3930:	ldrb	r3, [r3, #1]
    3934:	strb	r3, [fp, #-38]	; 0xffffffda
    3938:	ldr	r3, [fp, #-52]	; 0xffffffcc
    393c:	ldrb	r3, [r3]
    3940:	strb	r3, [fp, #-37]	; 0xffffffdb
    3944:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3948:	ldr	r1, [fp, #-52]	; 0xffffffcc
    394c:	strd	r2, [r1]
    3950:	mov	r3, #0
    3954:	mov	r0, r3
    3958:	sub	sp, fp, #12
    395c:	ldrd	r4, [sp]
    3960:	ldr	fp, [sp, #8]
    3964:	add	sp, sp, #12
    3968:	pop	{pc}		; (ldr pc, [sp], #4)

0000396c <coda_bin_cursor_read_double>:
    396c:	str	fp, [sp, #-8]!
    3970:	str	lr, [sp, #4]
    3974:	add	fp, sp, #4
    3978:	sub	sp, sp, #8
    397c:	str	r0, [fp, #-8]
    3980:	str	r1, [fp, #-12]
    3984:	ldr	r1, [fp, #-12]
    3988:	ldr	r0, [fp, #-8]
    398c:	bl	3778 <read_double>
    3990:	mov	r3, r0
    3994:	mov	r0, r3
    3998:	sub	sp, fp, #4
    399c:	ldr	fp, [sp]
    39a0:	add	sp, sp, #4
    39a4:	pop	{pc}		; (ldr pc, [sp], #4)

000039a8 <coda_bin_cursor_read_char>:
    39a8:	str	fp, [sp, #-8]!
    39ac:	str	lr, [sp, #4]
    39b0:	add	fp, sp, #4
    39b4:	sub	sp, sp, #8
    39b8:	str	r0, [fp, #-8]
    39bc:	str	r1, [fp, #-12]
    39c0:	ldr	r1, [fp, #-12]
    39c4:	ldr	r0, [fp, #-8]
    39c8:	bl	1d48 <coda_bin_cursor_read_uint8>
    39cc:	mov	r3, r0
    39d0:	mov	r0, r3
    39d4:	sub	sp, fp, #4
    39d8:	ldr	fp, [sp]
    39dc:	add	sp, sp, #4
    39e0:	pop	{pc}		; (ldr pc, [sp], #4)

000039e4 <coda_bin_cursor_read_string>:
    39e4:	strd	r4, [sp, #-16]!
    39e8:	str	fp, [sp, #8]
    39ec:	str	lr, [sp, #12]
    39f0:	add	fp, sp, #12
    39f4:	sub	sp, sp, #112	; 0x70
    39f8:	str	r0, [fp, #-96]	; 0xffffffa0
    39fc:	str	r1, [fp, #-100]	; 0xffffff9c
    3a00:	str	r2, [fp, #-104]	; 0xffffff98
    3a04:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3a08:	ldr	r3, [r3, #4]
    3a0c:	sub	r3, r3, #1
    3a10:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3a14:	lsl	r3, r3, #4
    3a18:	add	r3, r2, r3
    3a1c:	ldr	r3, [r3, #8]
    3a20:	ldr	r3, [r3]
    3a24:	cmp	r3, #99	; 0x63
    3a28:	bhi	3a4c <coda_bin_cursor_read_string+0x68>
    3a2c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3a30:	ldr	r3, [r3, #4]
    3a34:	sub	r3, r3, #1
    3a38:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3a3c:	lsl	r3, r3, #4
    3a40:	add	r3, r2, r3
    3a44:	ldr	r3, [r3, #8]
    3a48:	b	3a6c <coda_bin_cursor_read_string+0x88>
    3a4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3a50:	ldr	r3, [r3, #4]
    3a54:	sub	r3, r3, #1
    3a58:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3a5c:	lsl	r3, r3, #4
    3a60:	add	r3, r2, r3
    3a64:	ldr	r3, [r3, #8]
    3a68:	ldr	r3, [r3, #4]
    3a6c:	str	r3, [fp, #-24]	; 0xffffffe8
    3a70:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3a74:	ldr	r3, [r3, #4]
    3a78:	sub	r3, r3, #1
    3a7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3a80:	add	r3, r3, #1
    3a84:	lsl	r3, r3, #4
    3a88:	add	r3, r2, r3
    3a8c:	ldrd	r2, [r3]
    3a90:	strd	r2, [fp, #-36]	; 0xffffffdc
    3a94:	mov	r2, #0
    3a98:	mov	r3, #0
    3a9c:	strd	r2, [fp, #-20]	; 0xffffffec
    3aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3aa4:	ldrd	r2, [r3, #24]
    3aa8:	cmp	r2, #0
    3aac:	sbcs	r3, r3, #0
    3ab0:	bge	3be4 <coda_bin_cursor_read_string+0x200>
    3ab4:	sub	r3, fp, #44	; 0x2c
    3ab8:	mov	r1, r3
    3abc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    3ac0:	bl	1620 <coda_bin_cursor_get_bit_size>
    3ac4:	mov	r3, r0
    3ac8:	cmp	r3, #0
    3acc:	beq	3ad8 <coda_bin_cursor_read_string+0xf4>
    3ad0:	mvn	r3, #0
    3ad4:	b	3cb8 <coda_bin_cursor_read_string+0x2d4>
    3ad8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3adc:	cmp	r2, #0
    3ae0:	sbcs	r3, r3, #0
    3ae4:	bge	3b8c <coda_bin_cursor_read_string+0x1a8>
    3ae8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3aec:	sub	r3, fp, #68	; 0x44
    3af0:	mov	r2, r3
    3af4:	bl	0 <coda_str64>
    3af8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3afc:	ldr	r3, [r3, #4]
    3b00:	sub	r3, r3, #1
    3b04:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3b08:	add	r3, r3, #1
    3b0c:	lsl	r3, r3, #4
    3b10:	add	r3, r2, r3
    3b14:	ldrd	r2, [r3]
    3b18:	mov	r0, #0
    3b1c:	mov	r1, #0
    3b20:	lsr	r0, r2, #3
    3b24:	orr	r0, r0, r3, lsl #29
    3b28:	asr	r1, r3, #3
    3b2c:	sub	r3, fp, #92	; 0x5c
    3b30:	mov	r2, r3
    3b34:	bl	0 <coda_str64>
    3b38:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3b3c:	ldr	r3, [r3, #4]
    3b40:	sub	r3, r3, #1
    3b44:	ldr	r2, [fp, #-96]	; 0xffffffa0
    3b48:	add	r3, r3, #1
    3b4c:	lsl	r3, r3, #4
    3b50:	add	r3, r2, r3
    3b54:	ldrd	r2, [r3]
    3b58:	mov	r3, r2
    3b5c:	and	r3, r3, #7
    3b60:	sub	r1, fp, #92	; 0x5c
    3b64:	sub	r2, fp, #68	; 0x44
    3b68:	str	r3, [sp]
    3b6c:	mov	r3, r1
    3b70:	movw	r1, #0
    3b74:	movt	r1, #0
    3b78:	movw	r0, #65236	; 0xfed4
    3b7c:	movt	r0, #65535	; 0xffff
    3b80:	bl	0 <coda_set_error>
    3b84:	mvn	r3, #0
    3b88:	b	3cb8 <coda_bin_cursor_read_string+0x2d4>
    3b8c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    3b90:	mov	r0, #7
    3b94:	mov	r1, #0
    3b98:	and	r4, r2, r0
    3b9c:	and	r5, r3, r1
    3ba0:	orrs	r3, r4, r5
    3ba4:	beq	3bc4 <coda_bin_cursor_read_string+0x1e0>
    3ba8:	movw	r1, #0
    3bac:	movt	r1, #0
    3bb0:	movw	r0, #65236	; 0xfed4
    3bb4:	movt	r0, #65535	; 0xffff
    3bb8:	bl	0 <coda_set_error>
    3bbc:	mvn	r3, #0
    3bc0:	b	3cb8 <coda_bin_cursor_read_string+0x2d4>
    3bc4:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3bc8:	mov	r2, #0
    3bcc:	mov	r3, #0
    3bd0:	lsr	r2, r0, #3
    3bd4:	orr	r2, r2, r1, lsl #29
    3bd8:	asr	r3, r1, #3
    3bdc:	strd	r2, [fp, #-20]	; 0xffffffec
    3be0:	b	3c04 <coda_bin_cursor_read_string+0x220>
    3be4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3be8:	ldrd	r0, [r3, #24]
    3bec:	mov	r2, #0
    3bf0:	mov	r3, #0
    3bf4:	lsr	r2, r0, #3
    3bf8:	orr	r2, r2, r1, lsl #29
    3bfc:	asr	r3, r1, #3
    3c00:	strd	r2, [fp, #-20]	; 0xffffffec
    3c04:	ldr	r3, [fp, #-104]	; 0xffffff98
    3c08:	mov	r2, r3
    3c0c:	asr	r3, r2, #31
    3c10:	ldrd	r0, [fp, #-20]	; 0xffffffec
    3c14:	cmp	r0, r2
    3c18:	sbcs	r3, r1, r3
    3c1c:	blt	3c34 <coda_bin_cursor_read_string+0x250>
    3c20:	ldr	r3, [fp, #-104]	; 0xffffff98
    3c24:	sub	r3, r3, #1
    3c28:	mov	r2, r3
    3c2c:	asr	r3, r2, #31
    3c30:	strd	r2, [fp, #-20]	; 0xffffffec
    3c34:	ldrd	r2, [fp, #-20]	; 0xffffffec
    3c38:	cmp	r2, #1
    3c3c:	sbcs	r3, r3, #0
    3c40:	blt	3ca8 <coda_bin_cursor_read_string+0x2c4>
    3c44:	ldr	r3, [fp, #-96]	; 0xffffffa0
    3c48:	ldr	ip, [r3]
    3c4c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    3c50:	mov	r2, #0
    3c54:	mov	r3, #0
    3c58:	lsl	r3, r1, #3
    3c5c:	orr	r3, r3, r0, lsr #29
    3c60:	lsl	r2, r0, #3
    3c64:	ldr	r1, [fp, #-100]	; 0xffffff9c
    3c68:	str	r1, [sp, #8]
    3c6c:	strd	r2, [sp]
    3c70:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    3c74:	mov	r0, ip
    3c78:	bl	204 <read_bits>
    3c7c:	mov	r3, r0
    3c80:	cmp	r3, #0
    3c84:	beq	3c90 <coda_bin_cursor_read_string+0x2ac>
    3c88:	mvn	r3, #0
    3c8c:	b	3cb8 <coda_bin_cursor_read_string+0x2d4>
    3c90:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c94:	ldr	r2, [fp, #-100]	; 0xffffff9c
    3c98:	add	r3, r2, r3
    3c9c:	mov	r2, #0
    3ca0:	strb	r2, [r3]
    3ca4:	b	3cb4 <coda_bin_cursor_read_string+0x2d0>
    3ca8:	ldr	r3, [fp, #-100]	; 0xffffff9c
    3cac:	mov	r2, #0
    3cb0:	strb	r2, [r3]
    3cb4:	mov	r3, #0
    3cb8:	mov	r0, r3
    3cbc:	sub	sp, fp, #12
    3cc0:	ldrd	r4, [sp]
    3cc4:	ldr	fp, [sp, #8]
    3cc8:	add	sp, sp, #12
    3ccc:	pop	{pc}		; (ldr pc, [sp], #4)

00003cd0 <coda_bin_cursor_read_bits>:
    3cd0:	strd	r4, [sp, #-16]!
    3cd4:	str	fp, [sp, #8]
    3cd8:	str	lr, [sp, #12]
    3cdc:	add	fp, sp, #12
    3ce0:	sub	sp, sp, #32
    3ce4:	str	r0, [fp, #-16]
    3ce8:	str	r1, [fp, #-20]	; 0xffffffec
    3cec:	strd	r2, [fp, #-28]	; 0xffffffe4
    3cf0:	ldr	r3, [fp, #-16]
    3cf4:	ldr	ip, [r3]
    3cf8:	ldr	r3, [fp, #-16]
    3cfc:	ldr	r3, [r3, #4]
    3d00:	sub	r3, r3, #1
    3d04:	ldr	r2, [fp, #-16]
    3d08:	add	r3, r3, #1
    3d0c:	lsl	r3, r3, #4
    3d10:	add	r3, r2, r3
    3d14:	ldrd	r0, [r3]
    3d18:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    3d1c:	adds	r4, r0, r2
    3d20:	adc	r5, r1, r3
    3d24:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d28:	str	r3, [sp, #8]
    3d2c:	ldrd	r2, [fp, #4]
    3d30:	strd	r2, [sp]
    3d34:	mov	r2, r4
    3d38:	mov	r3, r5
    3d3c:	mov	r0, ip
    3d40:	bl	204 <read_bits>
    3d44:	mov	r3, r0
    3d48:	mov	r0, r3
    3d4c:	sub	sp, fp, #12
    3d50:	ldrd	r4, [sp]
    3d54:	ldr	fp, [sp, #8]
    3d58:	add	sp, sp, #12
    3d5c:	pop	{pc}		; (ldr pc, [sp], #4)

00003d60 <coda_bin_cursor_read_bytes>:
    3d60:	strd	r4, [sp, #-24]!	; 0xffffffe8
    3d64:	strd	r6, [sp, #8]
    3d68:	str	fp, [sp, #16]
    3d6c:	str	lr, [sp, #20]
    3d70:	add	fp, sp, #20
    3d74:	sub	sp, sp, #32
    3d78:	str	r0, [fp, #-24]	; 0xffffffe8
    3d7c:	str	r1, [fp, #-28]	; 0xffffffe4
    3d80:	strd	r2, [fp, #-36]	; 0xffffffdc
    3d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d88:	ldr	r3, [r3, #4]
    3d8c:	sub	r3, r3, #1
    3d90:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d94:	add	r3, r3, #1
    3d98:	lsl	r3, r3, #4
    3d9c:	add	r3, r2, r3
    3da0:	ldrd	r2, [r3]
    3da4:	mov	r0, #7
    3da8:	mov	r1, #0
    3dac:	and	r4, r2, r0
    3db0:	and	r5, r3, r1
    3db4:	orrs	r3, r4, r5
    3db8:	beq	3e0c <coda_bin_cursor_read_bytes+0xac>
    3dbc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    3dc0:	mov	r0, #0
    3dc4:	mov	r1, #0
    3dc8:	lsl	r1, r3, #3
    3dcc:	orr	r1, r1, r2, lsr #29
    3dd0:	lsl	r0, r2, #3
    3dd4:	ldrd	r4, [fp, #4]
    3dd8:	mov	r2, #0
    3ddc:	mov	r3, #0
    3de0:	lsl	r3, r5, #3
    3de4:	orr	r3, r3, r4, lsr #29
    3de8:	lsl	r2, r4, #3
    3dec:	strd	r2, [sp]
    3df0:	mov	r2, r0
    3df4:	mov	r3, r1
    3df8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3dfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e00:	bl	3cd0 <coda_bin_cursor_read_bits>
    3e04:	mov	r3, r0
    3e08:	b	3e78 <coda_bin_cursor_read_bytes+0x118>
    3e0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e10:	ldr	ip, [r3]
    3e14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3e18:	ldr	r3, [r3, #4]
    3e1c:	sub	r3, r3, #1
    3e20:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3e24:	add	r3, r3, #1
    3e28:	lsl	r3, r3, #4
    3e2c:	add	r3, r2, r3
    3e30:	ldrd	r0, [r3]
    3e34:	mov	r2, #0
    3e38:	mov	r3, #0
    3e3c:	lsr	r2, r0, #3
    3e40:	orr	r2, r2, r1, lsl #29
    3e44:	asr	r3, r1, #3
    3e48:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    3e4c:	adds	r6, r2, r0
    3e50:	adc	r7, r3, r1
    3e54:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3e58:	str	r3, [sp, #8]
    3e5c:	ldrd	r2, [fp, #4]
    3e60:	strd	r2, [sp]
    3e64:	mov	r2, r6
    3e68:	mov	r3, r7
    3e6c:	mov	r0, ip
    3e70:	bl	0 <read_bytes>
    3e74:	mov	r3, r0
    3e78:	mov	r0, r3
    3e7c:	sub	sp, fp, #20
    3e80:	ldrd	r4, [sp]
    3e84:	ldrd	r6, [sp, #8]
    3e88:	ldr	fp, [sp, #16]
    3e8c:	add	sp, sp, #20
    3e90:	pop	{pc}		; (ldr pc, [sp], #4)

00003e94 <coda_bin_cursor_read_int8_array>:
    3e94:	str	fp, [sp, #-8]!
    3e98:	str	lr, [sp, #4]
    3e9c:	add	fp, sp, #4
    3ea0:	sub	sp, sp, #32
    3ea4:	str	r0, [fp, #-16]
    3ea8:	str	r1, [fp, #-20]	; 0xffffffec
    3eac:	str	r2, [fp, #-24]	; 0xffffffe8
    3eb0:	ldr	r3, [fp, #-16]
    3eb4:	ldr	r3, [r3, #4]
    3eb8:	sub	r3, r3, #1
    3ebc:	ldr	r2, [fp, #-16]
    3ec0:	lsl	r3, r3, #4
    3ec4:	add	r3, r2, r3
    3ec8:	ldr	r3, [r3, #8]
    3ecc:	ldr	r3, [r3]
    3ed0:	cmp	r3, #99	; 0x63
    3ed4:	bhi	3ef8 <coda_bin_cursor_read_int8_array+0x64>
    3ed8:	ldr	r3, [fp, #-16]
    3edc:	ldr	r3, [r3, #4]
    3ee0:	sub	r3, r3, #1
    3ee4:	ldr	r2, [fp, #-16]
    3ee8:	lsl	r3, r3, #4
    3eec:	add	r3, r2, r3
    3ef0:	ldr	r3, [r3, #8]
    3ef4:	b	3f18 <coda_bin_cursor_read_int8_array+0x84>
    3ef8:	ldr	r3, [fp, #-16]
    3efc:	ldr	r3, [r3, #4]
    3f00:	sub	r3, r3, #1
    3f04:	ldr	r2, [fp, #-16]
    3f08:	lsl	r3, r3, #4
    3f0c:	add	r3, r2, r3
    3f10:	ldr	r3, [r3, #8]
    3f14:	ldr	r3, [r3, #4]
    3f18:	str	r3, [fp, #-8]
    3f1c:	ldr	r3, [fp, #-8]
    3f20:	ldr	r3, [r3, #40]	; 0x28
    3f24:	ldr	r3, [r3]
    3f28:	cmp	r3, #1
    3f2c:	bne	3f58 <coda_bin_cursor_read_int8_array+0xc4>
    3f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f34:	str	r3, [sp]
    3f38:	mov	r3, #1
    3f3c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f40:	movw	r1, #0
    3f44:	movt	r1, #0
    3f48:	ldr	r0, [fp, #-16]
    3f4c:	bl	81c <read_array>
    3f50:	mov	r3, r0
    3f54:	b	3ff4 <coda_bin_cursor_read_int8_array+0x160>
    3f58:	ldr	r3, [fp, #-8]
    3f5c:	ldr	r3, [r3, #40]	; 0x28
    3f60:	ldr	r3, [r3]
    3f64:	cmp	r3, #0
    3f68:	beq	3f8c <coda_bin_cursor_read_int8_array+0xf8>
    3f6c:	movw	r3, #0
    3f70:	movt	r3, #0
    3f74:	movw	r2, #906	; 0x38a
    3f78:	movw	r1, #0
    3f7c:	movt	r1, #0
    3f80:	movw	r0, #0
    3f84:	movt	r0, #0
    3f88:	bl	0 <__assert_fail>
    3f8c:	mov	r3, #0
    3f90:	str	r3, [sp]
    3f94:	mov	r3, #1
    3f98:	ldr	r2, [fp, #-20]	; 0xffffffec
    3f9c:	movw	r1, #0
    3fa0:	movt	r1, #0
    3fa4:	ldr	r0, [fp, #-16]
    3fa8:	bl	81c <read_array>
    3fac:	mov	r3, r0
    3fb0:	cmp	r3, #0
    3fb4:	beq	3fc0 <coda_bin_cursor_read_int8_array+0x12c>
    3fb8:	mvn	r3, #0
    3fbc:	b	3ff4 <coda_bin_cursor_read_int8_array+0x160>
    3fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3fc4:	cmp	r3, #0
    3fc8:	beq	3ff0 <coda_bin_cursor_read_int8_array+0x15c>
    3fcc:	mov	r2, #1
    3fd0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3fd4:	ldr	r0, [fp, #-16]
    3fd8:	bl	d3c <transpose_array>
    3fdc:	mov	r3, r0
    3fe0:	cmp	r3, #0
    3fe4:	beq	3ff0 <coda_bin_cursor_read_int8_array+0x15c>
    3fe8:	mvn	r3, #0
    3fec:	b	3ff4 <coda_bin_cursor_read_int8_array+0x160>
    3ff0:	mov	r3, #0
    3ff4:	mov	r0, r3
    3ff8:	sub	sp, fp, #4
    3ffc:	ldr	fp, [sp]
    4000:	add	sp, sp, #4
    4004:	pop	{pc}		; (ldr pc, [sp], #4)

00004008 <coda_bin_cursor_read_uint8_array>:
    4008:	str	fp, [sp, #-8]!
    400c:	str	lr, [sp, #4]
    4010:	add	fp, sp, #4
    4014:	sub	sp, sp, #32
    4018:	str	r0, [fp, #-16]
    401c:	str	r1, [fp, #-20]	; 0xffffffec
    4020:	str	r2, [fp, #-24]	; 0xffffffe8
    4024:	ldr	r3, [fp, #-16]
    4028:	ldr	r3, [r3, #4]
    402c:	sub	r3, r3, #1
    4030:	ldr	r2, [fp, #-16]
    4034:	lsl	r3, r3, #4
    4038:	add	r3, r2, r3
    403c:	ldr	r3, [r3, #8]
    4040:	ldr	r3, [r3]
    4044:	cmp	r3, #99	; 0x63
    4048:	bhi	406c <coda_bin_cursor_read_uint8_array+0x64>
    404c:	ldr	r3, [fp, #-16]
    4050:	ldr	r3, [r3, #4]
    4054:	sub	r3, r3, #1
    4058:	ldr	r2, [fp, #-16]
    405c:	lsl	r3, r3, #4
    4060:	add	r3, r2, r3
    4064:	ldr	r3, [r3, #8]
    4068:	b	408c <coda_bin_cursor_read_uint8_array+0x84>
    406c:	ldr	r3, [fp, #-16]
    4070:	ldr	r3, [r3, #4]
    4074:	sub	r3, r3, #1
    4078:	ldr	r2, [fp, #-16]
    407c:	lsl	r3, r3, #4
    4080:	add	r3, r2, r3
    4084:	ldr	r3, [r3, #8]
    4088:	ldr	r3, [r3, #4]
    408c:	str	r3, [fp, #-8]
    4090:	ldr	r3, [fp, #-8]
    4094:	ldr	r3, [r3, #40]	; 0x28
    4098:	ldr	r3, [r3]
    409c:	cmp	r3, #1
    40a0:	bne	40cc <coda_bin_cursor_read_uint8_array+0xc4>
    40a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    40a8:	str	r3, [sp]
    40ac:	mov	r3, #1
    40b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    40b4:	movw	r1, #0
    40b8:	movt	r1, #0
    40bc:	ldr	r0, [fp, #-16]
    40c0:	bl	81c <read_array>
    40c4:	mov	r3, r0
    40c8:	b	4168 <coda_bin_cursor_read_uint8_array+0x160>
    40cc:	ldr	r3, [fp, #-8]
    40d0:	ldr	r3, [r3, #40]	; 0x28
    40d4:	ldr	r3, [r3]
    40d8:	cmp	r3, #0
    40dc:	beq	4100 <coda_bin_cursor_read_uint8_array+0xf8>
    40e0:	movw	r3, #0
    40e4:	movt	r3, #0
    40e8:	mov	r2, #932	; 0x3a4
    40ec:	movw	r1, #0
    40f0:	movt	r1, #0
    40f4:	movw	r0, #0
    40f8:	movt	r0, #0
    40fc:	bl	0 <__assert_fail>
    4100:	mov	r3, #0
    4104:	str	r3, [sp]
    4108:	mov	r3, #1
    410c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4110:	movw	r1, #0
    4114:	movt	r1, #0
    4118:	ldr	r0, [fp, #-16]
    411c:	bl	81c <read_array>
    4120:	mov	r3, r0
    4124:	cmp	r3, #0
    4128:	beq	4134 <coda_bin_cursor_read_uint8_array+0x12c>
    412c:	mvn	r3, #0
    4130:	b	4168 <coda_bin_cursor_read_uint8_array+0x160>
    4134:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4138:	cmp	r3, #0
    413c:	beq	4164 <coda_bin_cursor_read_uint8_array+0x15c>
    4140:	mov	r2, #1
    4144:	ldr	r1, [fp, #-20]	; 0xffffffec
    4148:	ldr	r0, [fp, #-16]
    414c:	bl	d3c <transpose_array>
    4150:	mov	r3, r0
    4154:	cmp	r3, #0
    4158:	beq	4164 <coda_bin_cursor_read_uint8_array+0x15c>
    415c:	mvn	r3, #0
    4160:	b	4168 <coda_bin_cursor_read_uint8_array+0x160>
    4164:	mov	r3, #0
    4168:	mov	r0, r3
    416c:	sub	sp, fp, #4
    4170:	ldr	fp, [sp]
    4174:	add	sp, sp, #4
    4178:	pop	{pc}		; (ldr pc, [sp], #4)

0000417c <coda_bin_cursor_read_int16_array>:
    417c:	str	fp, [sp, #-8]!
    4180:	str	lr, [sp, #4]
    4184:	add	fp, sp, #4
    4188:	sub	sp, sp, #32
    418c:	str	r0, [fp, #-16]
    4190:	str	r1, [fp, #-20]	; 0xffffffec
    4194:	str	r2, [fp, #-24]	; 0xffffffe8
    4198:	ldr	r3, [fp, #-16]
    419c:	ldr	r3, [r3, #4]
    41a0:	sub	r3, r3, #1
    41a4:	ldr	r2, [fp, #-16]
    41a8:	lsl	r3, r3, #4
    41ac:	add	r3, r2, r3
    41b0:	ldr	r3, [r3, #8]
    41b4:	ldr	r3, [r3]
    41b8:	cmp	r3, #99	; 0x63
    41bc:	bhi	41e0 <coda_bin_cursor_read_int16_array+0x64>
    41c0:	ldr	r3, [fp, #-16]
    41c4:	ldr	r3, [r3, #4]
    41c8:	sub	r3, r3, #1
    41cc:	ldr	r2, [fp, #-16]
    41d0:	lsl	r3, r3, #4
    41d4:	add	r3, r2, r3
    41d8:	ldr	r3, [r3, #8]
    41dc:	b	4200 <coda_bin_cursor_read_int16_array+0x84>
    41e0:	ldr	r3, [fp, #-16]
    41e4:	ldr	r3, [r3, #4]
    41e8:	sub	r3, r3, #1
    41ec:	ldr	r2, [fp, #-16]
    41f0:	lsl	r3, r3, #4
    41f4:	add	r3, r2, r3
    41f8:	ldr	r3, [r3, #8]
    41fc:	ldr	r3, [r3, #4]
    4200:	str	r3, [fp, #-8]
    4204:	ldr	r3, [fp, #-8]
    4208:	ldr	r3, [r3, #40]	; 0x28
    420c:	ldr	r3, [r3]
    4210:	cmp	r3, #1
    4214:	bne	4240 <coda_bin_cursor_read_int16_array+0xc4>
    4218:	ldr	r3, [fp, #-24]	; 0xffffffe8
    421c:	str	r3, [sp]
    4220:	mov	r3, #2
    4224:	ldr	r2, [fp, #-20]	; 0xffffffec
    4228:	movw	r1, #0
    422c:	movt	r1, #0
    4230:	ldr	r0, [fp, #-16]
    4234:	bl	81c <read_array>
    4238:	mov	r3, r0
    423c:	b	42dc <coda_bin_cursor_read_int16_array+0x160>
    4240:	ldr	r3, [fp, #-8]
    4244:	ldr	r3, [r3, #40]	; 0x28
    4248:	ldr	r3, [r3]
    424c:	cmp	r3, #0
    4250:	beq	4274 <coda_bin_cursor_read_int16_array+0xf8>
    4254:	movw	r3, #0
    4258:	movt	r3, #0
    425c:	movw	r2, #958	; 0x3be
    4260:	movw	r1, #0
    4264:	movt	r1, #0
    4268:	movw	r0, #0
    426c:	movt	r0, #0
    4270:	bl	0 <__assert_fail>
    4274:	mov	r3, #0
    4278:	str	r3, [sp]
    427c:	mov	r3, #2
    4280:	ldr	r2, [fp, #-20]	; 0xffffffec
    4284:	movw	r1, #0
    4288:	movt	r1, #0
    428c:	ldr	r0, [fp, #-16]
    4290:	bl	81c <read_array>
    4294:	mov	r3, r0
    4298:	cmp	r3, #0
    429c:	beq	42a8 <coda_bin_cursor_read_int16_array+0x12c>
    42a0:	mvn	r3, #0
    42a4:	b	42dc <coda_bin_cursor_read_int16_array+0x160>
    42a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42ac:	cmp	r3, #0
    42b0:	beq	42d8 <coda_bin_cursor_read_int16_array+0x15c>
    42b4:	mov	r2, #2
    42b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    42bc:	ldr	r0, [fp, #-16]
    42c0:	bl	d3c <transpose_array>
    42c4:	mov	r3, r0
    42c8:	cmp	r3, #0
    42cc:	beq	42d8 <coda_bin_cursor_read_int16_array+0x15c>
    42d0:	mvn	r3, #0
    42d4:	b	42dc <coda_bin_cursor_read_int16_array+0x160>
    42d8:	mov	r3, #0
    42dc:	mov	r0, r3
    42e0:	sub	sp, fp, #4
    42e4:	ldr	fp, [sp]
    42e8:	add	sp, sp, #4
    42ec:	pop	{pc}		; (ldr pc, [sp], #4)

000042f0 <coda_bin_cursor_read_uint16_array>:
    42f0:	str	fp, [sp, #-8]!
    42f4:	str	lr, [sp, #4]
    42f8:	add	fp, sp, #4
    42fc:	sub	sp, sp, #32
    4300:	str	r0, [fp, #-16]
    4304:	str	r1, [fp, #-20]	; 0xffffffec
    4308:	str	r2, [fp, #-24]	; 0xffffffe8
    430c:	ldr	r3, [fp, #-16]
    4310:	ldr	r3, [r3, #4]
    4314:	sub	r3, r3, #1
    4318:	ldr	r2, [fp, #-16]
    431c:	lsl	r3, r3, #4
    4320:	add	r3, r2, r3
    4324:	ldr	r3, [r3, #8]
    4328:	ldr	r3, [r3]
    432c:	cmp	r3, #99	; 0x63
    4330:	bhi	4354 <coda_bin_cursor_read_uint16_array+0x64>
    4334:	ldr	r3, [fp, #-16]
    4338:	ldr	r3, [r3, #4]
    433c:	sub	r3, r3, #1
    4340:	ldr	r2, [fp, #-16]
    4344:	lsl	r3, r3, #4
    4348:	add	r3, r2, r3
    434c:	ldr	r3, [r3, #8]
    4350:	b	4374 <coda_bin_cursor_read_uint16_array+0x84>
    4354:	ldr	r3, [fp, #-16]
    4358:	ldr	r3, [r3, #4]
    435c:	sub	r3, r3, #1
    4360:	ldr	r2, [fp, #-16]
    4364:	lsl	r3, r3, #4
    4368:	add	r3, r2, r3
    436c:	ldr	r3, [r3, #8]
    4370:	ldr	r3, [r3, #4]
    4374:	str	r3, [fp, #-8]
    4378:	ldr	r3, [fp, #-8]
    437c:	ldr	r3, [r3, #40]	; 0x28
    4380:	ldr	r3, [r3]
    4384:	cmp	r3, #1
    4388:	bne	43b4 <coda_bin_cursor_read_uint16_array+0xc4>
    438c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4390:	str	r3, [sp]
    4394:	mov	r3, #2
    4398:	ldr	r2, [fp, #-20]	; 0xffffffec
    439c:	movw	r1, #0
    43a0:	movt	r1, #0
    43a4:	ldr	r0, [fp, #-16]
    43a8:	bl	81c <read_array>
    43ac:	mov	r3, r0
    43b0:	b	4450 <coda_bin_cursor_read_uint16_array+0x160>
    43b4:	ldr	r3, [fp, #-8]
    43b8:	ldr	r3, [r3, #40]	; 0x28
    43bc:	ldr	r3, [r3]
    43c0:	cmp	r3, #0
    43c4:	beq	43e8 <coda_bin_cursor_read_uint16_array+0xf8>
    43c8:	movw	r3, #0
    43cc:	movt	r3, #0
    43d0:	mov	r2, #984	; 0x3d8
    43d4:	movw	r1, #0
    43d8:	movt	r1, #0
    43dc:	movw	r0, #0
    43e0:	movt	r0, #0
    43e4:	bl	0 <__assert_fail>
    43e8:	mov	r3, #0
    43ec:	str	r3, [sp]
    43f0:	mov	r3, #2
    43f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    43f8:	movw	r1, #0
    43fc:	movt	r1, #0
    4400:	ldr	r0, [fp, #-16]
    4404:	bl	81c <read_array>
    4408:	mov	r3, r0
    440c:	cmp	r3, #0
    4410:	beq	441c <coda_bin_cursor_read_uint16_array+0x12c>
    4414:	mvn	r3, #0
    4418:	b	4450 <coda_bin_cursor_read_uint16_array+0x160>
    441c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4420:	cmp	r3, #0
    4424:	beq	444c <coda_bin_cursor_read_uint16_array+0x15c>
    4428:	mov	r2, #2
    442c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4430:	ldr	r0, [fp, #-16]
    4434:	bl	d3c <transpose_array>
    4438:	mov	r3, r0
    443c:	cmp	r3, #0
    4440:	beq	444c <coda_bin_cursor_read_uint16_array+0x15c>
    4444:	mvn	r3, #0
    4448:	b	4450 <coda_bin_cursor_read_uint16_array+0x160>
    444c:	mov	r3, #0
    4450:	mov	r0, r3
    4454:	sub	sp, fp, #4
    4458:	ldr	fp, [sp]
    445c:	add	sp, sp, #4
    4460:	pop	{pc}		; (ldr pc, [sp], #4)

00004464 <coda_bin_cursor_read_int32_array>:
    4464:	str	fp, [sp, #-8]!
    4468:	str	lr, [sp, #4]
    446c:	add	fp, sp, #4
    4470:	sub	sp, sp, #32
    4474:	str	r0, [fp, #-16]
    4478:	str	r1, [fp, #-20]	; 0xffffffec
    447c:	str	r2, [fp, #-24]	; 0xffffffe8
    4480:	ldr	r3, [fp, #-16]
    4484:	ldr	r3, [r3, #4]
    4488:	sub	r3, r3, #1
    448c:	ldr	r2, [fp, #-16]
    4490:	lsl	r3, r3, #4
    4494:	add	r3, r2, r3
    4498:	ldr	r3, [r3, #8]
    449c:	ldr	r3, [r3]
    44a0:	cmp	r3, #99	; 0x63
    44a4:	bhi	44c8 <coda_bin_cursor_read_int32_array+0x64>
    44a8:	ldr	r3, [fp, #-16]
    44ac:	ldr	r3, [r3, #4]
    44b0:	sub	r3, r3, #1
    44b4:	ldr	r2, [fp, #-16]
    44b8:	lsl	r3, r3, #4
    44bc:	add	r3, r2, r3
    44c0:	ldr	r3, [r3, #8]
    44c4:	b	44e8 <coda_bin_cursor_read_int32_array+0x84>
    44c8:	ldr	r3, [fp, #-16]
    44cc:	ldr	r3, [r3, #4]
    44d0:	sub	r3, r3, #1
    44d4:	ldr	r2, [fp, #-16]
    44d8:	lsl	r3, r3, #4
    44dc:	add	r3, r2, r3
    44e0:	ldr	r3, [r3, #8]
    44e4:	ldr	r3, [r3, #4]
    44e8:	str	r3, [fp, #-8]
    44ec:	ldr	r3, [fp, #-8]
    44f0:	ldr	r3, [r3, #40]	; 0x28
    44f4:	ldr	r3, [r3]
    44f8:	cmp	r3, #1
    44fc:	bne	4528 <coda_bin_cursor_read_int32_array+0xc4>
    4500:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4504:	str	r3, [sp]
    4508:	mov	r3, #4
    450c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4510:	movw	r1, #0
    4514:	movt	r1, #0
    4518:	ldr	r0, [fp, #-16]
    451c:	bl	81c <read_array>
    4520:	mov	r3, r0
    4524:	b	45c4 <coda_bin_cursor_read_int32_array+0x160>
    4528:	ldr	r3, [fp, #-8]
    452c:	ldr	r3, [r3, #40]	; 0x28
    4530:	ldr	r3, [r3]
    4534:	cmp	r3, #0
    4538:	beq	455c <coda_bin_cursor_read_int32_array+0xf8>
    453c:	movw	r3, #0
    4540:	movt	r3, #0
    4544:	movw	r2, #1010	; 0x3f2
    4548:	movw	r1, #0
    454c:	movt	r1, #0
    4550:	movw	r0, #0
    4554:	movt	r0, #0
    4558:	bl	0 <__assert_fail>
    455c:	mov	r3, #0
    4560:	str	r3, [sp]
    4564:	mov	r3, #4
    4568:	ldr	r2, [fp, #-20]	; 0xffffffec
    456c:	movw	r1, #0
    4570:	movt	r1, #0
    4574:	ldr	r0, [fp, #-16]
    4578:	bl	81c <read_array>
    457c:	mov	r3, r0
    4580:	cmp	r3, #0
    4584:	beq	4590 <coda_bin_cursor_read_int32_array+0x12c>
    4588:	mvn	r3, #0
    458c:	b	45c4 <coda_bin_cursor_read_int32_array+0x160>
    4590:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4594:	cmp	r3, #0
    4598:	beq	45c0 <coda_bin_cursor_read_int32_array+0x15c>
    459c:	mov	r2, #4
    45a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    45a4:	ldr	r0, [fp, #-16]
    45a8:	bl	d3c <transpose_array>
    45ac:	mov	r3, r0
    45b0:	cmp	r3, #0
    45b4:	beq	45c0 <coda_bin_cursor_read_int32_array+0x15c>
    45b8:	mvn	r3, #0
    45bc:	b	45c4 <coda_bin_cursor_read_int32_array+0x160>
    45c0:	mov	r3, #0
    45c4:	mov	r0, r3
    45c8:	sub	sp, fp, #4
    45cc:	ldr	fp, [sp]
    45d0:	add	sp, sp, #4
    45d4:	pop	{pc}		; (ldr pc, [sp], #4)

000045d8 <coda_bin_cursor_read_uint32_array>:
    45d8:	str	fp, [sp, #-8]!
    45dc:	str	lr, [sp, #4]
    45e0:	add	fp, sp, #4
    45e4:	sub	sp, sp, #32
    45e8:	str	r0, [fp, #-16]
    45ec:	str	r1, [fp, #-20]	; 0xffffffec
    45f0:	str	r2, [fp, #-24]	; 0xffffffe8
    45f4:	ldr	r3, [fp, #-16]
    45f8:	ldr	r3, [r3, #4]
    45fc:	sub	r3, r3, #1
    4600:	ldr	r2, [fp, #-16]
    4604:	lsl	r3, r3, #4
    4608:	add	r3, r2, r3
    460c:	ldr	r3, [r3, #8]
    4610:	ldr	r3, [r3]
    4614:	cmp	r3, #99	; 0x63
    4618:	bhi	463c <coda_bin_cursor_read_uint32_array+0x64>
    461c:	ldr	r3, [fp, #-16]
    4620:	ldr	r3, [r3, #4]
    4624:	sub	r3, r3, #1
    4628:	ldr	r2, [fp, #-16]
    462c:	lsl	r3, r3, #4
    4630:	add	r3, r2, r3
    4634:	ldr	r3, [r3, #8]
    4638:	b	465c <coda_bin_cursor_read_uint32_array+0x84>
    463c:	ldr	r3, [fp, #-16]
    4640:	ldr	r3, [r3, #4]
    4644:	sub	r3, r3, #1
    4648:	ldr	r2, [fp, #-16]
    464c:	lsl	r3, r3, #4
    4650:	add	r3, r2, r3
    4654:	ldr	r3, [r3, #8]
    4658:	ldr	r3, [r3, #4]
    465c:	str	r3, [fp, #-8]
    4660:	ldr	r3, [fp, #-8]
    4664:	ldr	r3, [r3, #40]	; 0x28
    4668:	ldr	r3, [r3]
    466c:	cmp	r3, #1
    4670:	bne	469c <coda_bin_cursor_read_uint32_array+0xc4>
    4674:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4678:	str	r3, [sp]
    467c:	mov	r3, #4
    4680:	ldr	r2, [fp, #-20]	; 0xffffffec
    4684:	movw	r1, #0
    4688:	movt	r1, #0
    468c:	ldr	r0, [fp, #-16]
    4690:	bl	81c <read_array>
    4694:	mov	r3, r0
    4698:	b	4738 <coda_bin_cursor_read_uint32_array+0x160>
    469c:	ldr	r3, [fp, #-8]
    46a0:	ldr	r3, [r3, #40]	; 0x28
    46a4:	ldr	r3, [r3]
    46a8:	cmp	r3, #0
    46ac:	beq	46d0 <coda_bin_cursor_read_uint32_array+0xf8>
    46b0:	movw	r3, #0
    46b4:	movt	r3, #0
    46b8:	movw	r2, #1036	; 0x40c
    46bc:	movw	r1, #0
    46c0:	movt	r1, #0
    46c4:	movw	r0, #0
    46c8:	movt	r0, #0
    46cc:	bl	0 <__assert_fail>
    46d0:	mov	r3, #0
    46d4:	str	r3, [sp]
    46d8:	mov	r3, #4
    46dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    46e0:	movw	r1, #0
    46e4:	movt	r1, #0
    46e8:	ldr	r0, [fp, #-16]
    46ec:	bl	81c <read_array>
    46f0:	mov	r3, r0
    46f4:	cmp	r3, #0
    46f8:	beq	4704 <coda_bin_cursor_read_uint32_array+0x12c>
    46fc:	mvn	r3, #0
    4700:	b	4738 <coda_bin_cursor_read_uint32_array+0x160>
    4704:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4708:	cmp	r3, #0
    470c:	beq	4734 <coda_bin_cursor_read_uint32_array+0x15c>
    4710:	mov	r2, #4
    4714:	ldr	r1, [fp, #-20]	; 0xffffffec
    4718:	ldr	r0, [fp, #-16]
    471c:	bl	d3c <transpose_array>
    4720:	mov	r3, r0
    4724:	cmp	r3, #0
    4728:	beq	4734 <coda_bin_cursor_read_uint32_array+0x15c>
    472c:	mvn	r3, #0
    4730:	b	4738 <coda_bin_cursor_read_uint32_array+0x160>
    4734:	mov	r3, #0
    4738:	mov	r0, r3
    473c:	sub	sp, fp, #4
    4740:	ldr	fp, [sp]
    4744:	add	sp, sp, #4
    4748:	pop	{pc}		; (ldr pc, [sp], #4)

0000474c <coda_bin_cursor_read_int64_array>:
    474c:	str	fp, [sp, #-8]!
    4750:	str	lr, [sp, #4]
    4754:	add	fp, sp, #4
    4758:	sub	sp, sp, #32
    475c:	str	r0, [fp, #-16]
    4760:	str	r1, [fp, #-20]	; 0xffffffec
    4764:	str	r2, [fp, #-24]	; 0xffffffe8
    4768:	ldr	r3, [fp, #-16]
    476c:	ldr	r3, [r3, #4]
    4770:	sub	r3, r3, #1
    4774:	ldr	r2, [fp, #-16]
    4778:	lsl	r3, r3, #4
    477c:	add	r3, r2, r3
    4780:	ldr	r3, [r3, #8]
    4784:	ldr	r3, [r3]
    4788:	cmp	r3, #99	; 0x63
    478c:	bhi	47b0 <coda_bin_cursor_read_int64_array+0x64>
    4790:	ldr	r3, [fp, #-16]
    4794:	ldr	r3, [r3, #4]
    4798:	sub	r3, r3, #1
    479c:	ldr	r2, [fp, #-16]
    47a0:	lsl	r3, r3, #4
    47a4:	add	r3, r2, r3
    47a8:	ldr	r3, [r3, #8]
    47ac:	b	47d0 <coda_bin_cursor_read_int64_array+0x84>
    47b0:	ldr	r3, [fp, #-16]
    47b4:	ldr	r3, [r3, #4]
    47b8:	sub	r3, r3, #1
    47bc:	ldr	r2, [fp, #-16]
    47c0:	lsl	r3, r3, #4
    47c4:	add	r3, r2, r3
    47c8:	ldr	r3, [r3, #8]
    47cc:	ldr	r3, [r3, #4]
    47d0:	str	r3, [fp, #-8]
    47d4:	ldr	r3, [fp, #-8]
    47d8:	ldr	r3, [r3, #40]	; 0x28
    47dc:	ldr	r3, [r3]
    47e0:	cmp	r3, #1
    47e4:	bne	4810 <coda_bin_cursor_read_int64_array+0xc4>
    47e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    47ec:	str	r3, [sp]
    47f0:	mov	r3, #8
    47f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    47f8:	movw	r1, #0
    47fc:	movt	r1, #0
    4800:	ldr	r0, [fp, #-16]
    4804:	bl	81c <read_array>
    4808:	mov	r3, r0
    480c:	b	48ac <coda_bin_cursor_read_int64_array+0x160>
    4810:	ldr	r3, [fp, #-8]
    4814:	ldr	r3, [r3, #40]	; 0x28
    4818:	ldr	r3, [r3]
    481c:	cmp	r3, #0
    4820:	beq	4844 <coda_bin_cursor_read_int64_array+0xf8>
    4824:	movw	r3, #0
    4828:	movt	r3, #0
    482c:	movw	r2, #1062	; 0x426
    4830:	movw	r1, #0
    4834:	movt	r1, #0
    4838:	movw	r0, #0
    483c:	movt	r0, #0
    4840:	bl	0 <__assert_fail>
    4844:	mov	r3, #0
    4848:	str	r3, [sp]
    484c:	mov	r3, #8
    4850:	ldr	r2, [fp, #-20]	; 0xffffffec
    4854:	movw	r1, #0
    4858:	movt	r1, #0
    485c:	ldr	r0, [fp, #-16]
    4860:	bl	81c <read_array>
    4864:	mov	r3, r0
    4868:	cmp	r3, #0
    486c:	beq	4878 <coda_bin_cursor_read_int64_array+0x12c>
    4870:	mvn	r3, #0
    4874:	b	48ac <coda_bin_cursor_read_int64_array+0x160>
    4878:	ldr	r3, [fp, #-24]	; 0xffffffe8
    487c:	cmp	r3, #0
    4880:	beq	48a8 <coda_bin_cursor_read_int64_array+0x15c>
    4884:	mov	r2, #8
    4888:	ldr	r1, [fp, #-20]	; 0xffffffec
    488c:	ldr	r0, [fp, #-16]
    4890:	bl	d3c <transpose_array>
    4894:	mov	r3, r0
    4898:	cmp	r3, #0
    489c:	beq	48a8 <coda_bin_cursor_read_int64_array+0x15c>
    48a0:	mvn	r3, #0
    48a4:	b	48ac <coda_bin_cursor_read_int64_array+0x160>
    48a8:	mov	r3, #0
    48ac:	mov	r0, r3
    48b0:	sub	sp, fp, #4
    48b4:	ldr	fp, [sp]
    48b8:	add	sp, sp, #4
    48bc:	pop	{pc}		; (ldr pc, [sp], #4)

000048c0 <coda_bin_cursor_read_uint64_array>:
    48c0:	str	fp, [sp, #-8]!
    48c4:	str	lr, [sp, #4]
    48c8:	add	fp, sp, #4
    48cc:	sub	sp, sp, #32
    48d0:	str	r0, [fp, #-16]
    48d4:	str	r1, [fp, #-20]	; 0xffffffec
    48d8:	str	r2, [fp, #-24]	; 0xffffffe8
    48dc:	ldr	r3, [fp, #-16]
    48e0:	ldr	r3, [r3, #4]
    48e4:	sub	r3, r3, #1
    48e8:	ldr	r2, [fp, #-16]
    48ec:	lsl	r3, r3, #4
    48f0:	add	r3, r2, r3
    48f4:	ldr	r3, [r3, #8]
    48f8:	ldr	r3, [r3]
    48fc:	cmp	r3, #99	; 0x63
    4900:	bhi	4924 <coda_bin_cursor_read_uint64_array+0x64>
    4904:	ldr	r3, [fp, #-16]
    4908:	ldr	r3, [r3, #4]
    490c:	sub	r3, r3, #1
    4910:	ldr	r2, [fp, #-16]
    4914:	lsl	r3, r3, #4
    4918:	add	r3, r2, r3
    491c:	ldr	r3, [r3, #8]
    4920:	b	4944 <coda_bin_cursor_read_uint64_array+0x84>
    4924:	ldr	r3, [fp, #-16]
    4928:	ldr	r3, [r3, #4]
    492c:	sub	r3, r3, #1
    4930:	ldr	r2, [fp, #-16]
    4934:	lsl	r3, r3, #4
    4938:	add	r3, r2, r3
    493c:	ldr	r3, [r3, #8]
    4940:	ldr	r3, [r3, #4]
    4944:	str	r3, [fp, #-8]
    4948:	ldr	r3, [fp, #-8]
    494c:	ldr	r3, [r3, #40]	; 0x28
    4950:	ldr	r3, [r3]
    4954:	cmp	r3, #1
    4958:	bne	4984 <coda_bin_cursor_read_uint64_array+0xc4>
    495c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4960:	str	r3, [sp]
    4964:	mov	r3, #8
    4968:	ldr	r2, [fp, #-20]	; 0xffffffec
    496c:	movw	r1, #0
    4970:	movt	r1, #0
    4974:	ldr	r0, [fp, #-16]
    4978:	bl	81c <read_array>
    497c:	mov	r3, r0
    4980:	b	4a20 <coda_bin_cursor_read_uint64_array+0x160>
    4984:	ldr	r3, [fp, #-8]
    4988:	ldr	r3, [r3, #40]	; 0x28
    498c:	ldr	r3, [r3]
    4990:	cmp	r3, #0
    4994:	beq	49b8 <coda_bin_cursor_read_uint64_array+0xf8>
    4998:	movw	r3, #0
    499c:	movt	r3, #0
    49a0:	mov	r2, #1088	; 0x440
    49a4:	movw	r1, #0
    49a8:	movt	r1, #0
    49ac:	movw	r0, #0
    49b0:	movt	r0, #0
    49b4:	bl	0 <__assert_fail>
    49b8:	mov	r3, #0
    49bc:	str	r3, [sp]
    49c0:	mov	r3, #8
    49c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    49c8:	movw	r1, #0
    49cc:	movt	r1, #0
    49d0:	ldr	r0, [fp, #-16]
    49d4:	bl	81c <read_array>
    49d8:	mov	r3, r0
    49dc:	cmp	r3, #0
    49e0:	beq	49ec <coda_bin_cursor_read_uint64_array+0x12c>
    49e4:	mvn	r3, #0
    49e8:	b	4a20 <coda_bin_cursor_read_uint64_array+0x160>
    49ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    49f0:	cmp	r3, #0
    49f4:	beq	4a1c <coda_bin_cursor_read_uint64_array+0x15c>
    49f8:	mov	r2, #8
    49fc:	ldr	r1, [fp, #-20]	; 0xffffffec
    4a00:	ldr	r0, [fp, #-16]
    4a04:	bl	d3c <transpose_array>
    4a08:	mov	r3, r0
    4a0c:	cmp	r3, #0
    4a10:	beq	4a1c <coda_bin_cursor_read_uint64_array+0x15c>
    4a14:	mvn	r3, #0
    4a18:	b	4a20 <coda_bin_cursor_read_uint64_array+0x160>
    4a1c:	mov	r3, #0
    4a20:	mov	r0, r3
    4a24:	sub	sp, fp, #4
    4a28:	ldr	fp, [sp]
    4a2c:	add	sp, sp, #4
    4a30:	pop	{pc}		; (ldr pc, [sp], #4)

00004a34 <coda_bin_cursor_read_float_array>:
    4a34:	str	fp, [sp, #-8]!
    4a38:	str	lr, [sp, #4]
    4a3c:	add	fp, sp, #4
    4a40:	sub	sp, sp, #32
    4a44:	str	r0, [fp, #-16]
    4a48:	str	r1, [fp, #-20]	; 0xffffffec
    4a4c:	str	r2, [fp, #-24]	; 0xffffffe8
    4a50:	ldr	r3, [fp, #-16]
    4a54:	ldr	r3, [r3, #4]
    4a58:	sub	r3, r3, #1
    4a5c:	ldr	r2, [fp, #-16]
    4a60:	lsl	r3, r3, #4
    4a64:	add	r3, r2, r3
    4a68:	ldr	r3, [r3, #8]
    4a6c:	ldr	r3, [r3]
    4a70:	cmp	r3, #99	; 0x63
    4a74:	bhi	4a98 <coda_bin_cursor_read_float_array+0x64>
    4a78:	ldr	r3, [fp, #-16]
    4a7c:	ldr	r3, [r3, #4]
    4a80:	sub	r3, r3, #1
    4a84:	ldr	r2, [fp, #-16]
    4a88:	lsl	r3, r3, #4
    4a8c:	add	r3, r2, r3
    4a90:	ldr	r3, [r3, #8]
    4a94:	b	4ab8 <coda_bin_cursor_read_float_array+0x84>
    4a98:	ldr	r3, [fp, #-16]
    4a9c:	ldr	r3, [r3, #4]
    4aa0:	sub	r3, r3, #1
    4aa4:	ldr	r2, [fp, #-16]
    4aa8:	lsl	r3, r3, #4
    4aac:	add	r3, r2, r3
    4ab0:	ldr	r3, [r3, #8]
    4ab4:	ldr	r3, [r3, #4]
    4ab8:	str	r3, [fp, #-8]
    4abc:	ldr	r3, [fp, #-8]
    4ac0:	ldr	r3, [r3, #40]	; 0x28
    4ac4:	ldr	r3, [r3]
    4ac8:	cmp	r3, #1
    4acc:	bne	4af8 <coda_bin_cursor_read_float_array+0xc4>
    4ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ad4:	str	r3, [sp]
    4ad8:	mov	r3, #4
    4adc:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ae0:	movw	r1, #0
    4ae4:	movt	r1, #0
    4ae8:	ldr	r0, [fp, #-16]
    4aec:	bl	81c <read_array>
    4af0:	mov	r3, r0
    4af4:	b	4b94 <coda_bin_cursor_read_float_array+0x160>
    4af8:	ldr	r3, [fp, #-8]
    4afc:	ldr	r3, [r3, #40]	; 0x28
    4b00:	ldr	r3, [r3]
    4b04:	cmp	r3, #0
    4b08:	beq	4b2c <coda_bin_cursor_read_float_array+0xf8>
    4b0c:	movw	r3, #0
    4b10:	movt	r3, #0
    4b14:	movw	r2, #1114	; 0x45a
    4b18:	movw	r1, #0
    4b1c:	movt	r1, #0
    4b20:	movw	r0, #0
    4b24:	movt	r0, #0
    4b28:	bl	0 <__assert_fail>
    4b2c:	mov	r3, #0
    4b30:	str	r3, [sp]
    4b34:	mov	r3, #4
    4b38:	ldr	r2, [fp, #-20]	; 0xffffffec
    4b3c:	movw	r1, #0
    4b40:	movt	r1, #0
    4b44:	ldr	r0, [fp, #-16]
    4b48:	bl	81c <read_array>
    4b4c:	mov	r3, r0
    4b50:	cmp	r3, #0
    4b54:	beq	4b60 <coda_bin_cursor_read_float_array+0x12c>
    4b58:	mvn	r3, #0
    4b5c:	b	4b94 <coda_bin_cursor_read_float_array+0x160>
    4b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b64:	cmp	r3, #0
    4b68:	beq	4b90 <coda_bin_cursor_read_float_array+0x15c>
    4b6c:	mov	r2, #4
    4b70:	ldr	r1, [fp, #-20]	; 0xffffffec
    4b74:	ldr	r0, [fp, #-16]
    4b78:	bl	d3c <transpose_array>
    4b7c:	mov	r3, r0
    4b80:	cmp	r3, #0
    4b84:	beq	4b90 <coda_bin_cursor_read_float_array+0x15c>
    4b88:	mvn	r3, #0
    4b8c:	b	4b94 <coda_bin_cursor_read_float_array+0x160>
    4b90:	mov	r3, #0
    4b94:	mov	r0, r3
    4b98:	sub	sp, fp, #4
    4b9c:	ldr	fp, [sp]
    4ba0:	add	sp, sp, #4
    4ba4:	pop	{pc}		; (ldr pc, [sp], #4)

00004ba8 <coda_bin_cursor_read_double_array>:
    4ba8:	str	fp, [sp, #-8]!
    4bac:	str	lr, [sp, #4]
    4bb0:	add	fp, sp, #4
    4bb4:	sub	sp, sp, #32
    4bb8:	str	r0, [fp, #-16]
    4bbc:	str	r1, [fp, #-20]	; 0xffffffec
    4bc0:	str	r2, [fp, #-24]	; 0xffffffe8
    4bc4:	ldr	r3, [fp, #-16]
    4bc8:	ldr	r3, [r3, #4]
    4bcc:	sub	r3, r3, #1
    4bd0:	ldr	r2, [fp, #-16]
    4bd4:	lsl	r3, r3, #4
    4bd8:	add	r3, r2, r3
    4bdc:	ldr	r3, [r3, #8]
    4be0:	ldr	r3, [r3]
    4be4:	cmp	r3, #99	; 0x63
    4be8:	bhi	4c0c <coda_bin_cursor_read_double_array+0x64>
    4bec:	ldr	r3, [fp, #-16]
    4bf0:	ldr	r3, [r3, #4]
    4bf4:	sub	r3, r3, #1
    4bf8:	ldr	r2, [fp, #-16]
    4bfc:	lsl	r3, r3, #4
    4c00:	add	r3, r2, r3
    4c04:	ldr	r3, [r3, #8]
    4c08:	b	4c2c <coda_bin_cursor_read_double_array+0x84>
    4c0c:	ldr	r3, [fp, #-16]
    4c10:	ldr	r3, [r3, #4]
    4c14:	sub	r3, r3, #1
    4c18:	ldr	r2, [fp, #-16]
    4c1c:	lsl	r3, r3, #4
    4c20:	add	r3, r2, r3
    4c24:	ldr	r3, [r3, #8]
    4c28:	ldr	r3, [r3, #4]
    4c2c:	str	r3, [fp, #-8]
    4c30:	ldr	r3, [fp, #-8]
    4c34:	ldr	r3, [r3, #40]	; 0x28
    4c38:	ldr	r3, [r3]
    4c3c:	cmp	r3, #1
    4c40:	bne	4c6c <coda_bin_cursor_read_double_array+0xc4>
    4c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c48:	str	r3, [sp]
    4c4c:	mov	r3, #8
    4c50:	ldr	r2, [fp, #-20]	; 0xffffffec
    4c54:	movw	r1, #0
    4c58:	movt	r1, #0
    4c5c:	ldr	r0, [fp, #-16]
    4c60:	bl	81c <read_array>
    4c64:	mov	r3, r0
    4c68:	b	4d08 <coda_bin_cursor_read_double_array+0x160>
    4c6c:	ldr	r3, [fp, #-8]
    4c70:	ldr	r3, [r3, #40]	; 0x28
    4c74:	ldr	r3, [r3]
    4c78:	cmp	r3, #0
    4c7c:	beq	4ca0 <coda_bin_cursor_read_double_array+0xf8>
    4c80:	movw	r3, #0
    4c84:	movt	r3, #0
    4c88:	movw	r2, #1140	; 0x474
    4c8c:	movw	r1, #0
    4c90:	movt	r1, #0
    4c94:	movw	r0, #0
    4c98:	movt	r0, #0
    4c9c:	bl	0 <__assert_fail>
    4ca0:	mov	r3, #0
    4ca4:	str	r3, [sp]
    4ca8:	mov	r3, #8
    4cac:	ldr	r2, [fp, #-20]	; 0xffffffec
    4cb0:	movw	r1, #0
    4cb4:	movt	r1, #0
    4cb8:	ldr	r0, [fp, #-16]
    4cbc:	bl	81c <read_array>
    4cc0:	mov	r3, r0
    4cc4:	cmp	r3, #0
    4cc8:	beq	4cd4 <coda_bin_cursor_read_double_array+0x12c>
    4ccc:	mvn	r3, #0
    4cd0:	b	4d08 <coda_bin_cursor_read_double_array+0x160>
    4cd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4cd8:	cmp	r3, #0
    4cdc:	beq	4d04 <coda_bin_cursor_read_double_array+0x15c>
    4ce0:	mov	r2, #8
    4ce4:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ce8:	ldr	r0, [fp, #-16]
    4cec:	bl	d3c <transpose_array>
    4cf0:	mov	r3, r0
    4cf4:	cmp	r3, #0
    4cf8:	beq	4d04 <coda_bin_cursor_read_double_array+0x15c>
    4cfc:	mvn	r3, #0
    4d00:	b	4d08 <coda_bin_cursor_read_double_array+0x160>
    4d04:	mov	r3, #0
    4d08:	mov	r0, r3
    4d0c:	sub	sp, fp, #4
    4d10:	ldr	fp, [sp]
    4d14:	add	sp, sp, #4
    4d18:	pop	{pc}		; (ldr pc, [sp], #4)

00004d1c <coda_bin_cursor_read_char_array>:
    4d1c:	str	fp, [sp, #-8]!
    4d20:	str	lr, [sp, #4]
    4d24:	add	fp, sp, #4
    4d28:	sub	sp, sp, #32
    4d2c:	str	r0, [fp, #-16]
    4d30:	str	r1, [fp, #-20]	; 0xffffffec
    4d34:	str	r2, [fp, #-24]	; 0xffffffe8
    4d38:	ldr	r3, [fp, #-16]
    4d3c:	ldr	r3, [r3, #4]
    4d40:	sub	r3, r3, #1
    4d44:	ldr	r2, [fp, #-16]
    4d48:	lsl	r3, r3, #4
    4d4c:	add	r3, r2, r3
    4d50:	ldr	r3, [r3, #8]
    4d54:	ldr	r3, [r3]
    4d58:	cmp	r3, #99	; 0x63
    4d5c:	bhi	4d80 <coda_bin_cursor_read_char_array+0x64>
    4d60:	ldr	r3, [fp, #-16]
    4d64:	ldr	r3, [r3, #4]
    4d68:	sub	r3, r3, #1
    4d6c:	ldr	r2, [fp, #-16]
    4d70:	lsl	r3, r3, #4
    4d74:	add	r3, r2, r3
    4d78:	ldr	r3, [r3, #8]
    4d7c:	b	4da0 <coda_bin_cursor_read_char_array+0x84>
    4d80:	ldr	r3, [fp, #-16]
    4d84:	ldr	r3, [r3, #4]
    4d88:	sub	r3, r3, #1
    4d8c:	ldr	r2, [fp, #-16]
    4d90:	lsl	r3, r3, #4
    4d94:	add	r3, r2, r3
    4d98:	ldr	r3, [r3, #8]
    4d9c:	ldr	r3, [r3, #4]
    4da0:	str	r3, [fp, #-8]
    4da4:	ldr	r3, [fp, #-8]
    4da8:	ldr	r3, [r3, #40]	; 0x28
    4dac:	ldr	r3, [r3]
    4db0:	cmp	r3, #1
    4db4:	bne	4de0 <coda_bin_cursor_read_char_array+0xc4>
    4db8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4dbc:	str	r3, [sp]
    4dc0:	mov	r3, #1
    4dc4:	ldr	r2, [fp, #-20]	; 0xffffffec
    4dc8:	movw	r1, #0
    4dcc:	movt	r1, #0
    4dd0:	ldr	r0, [fp, #-16]
    4dd4:	bl	81c <read_array>
    4dd8:	mov	r3, r0
    4ddc:	b	4e7c <coda_bin_cursor_read_char_array+0x160>
    4de0:	ldr	r3, [fp, #-8]
    4de4:	ldr	r3, [r3, #40]	; 0x28
    4de8:	ldr	r3, [r3]
    4dec:	cmp	r3, #0
    4df0:	beq	4e14 <coda_bin_cursor_read_char_array+0xf8>
    4df4:	movw	r3, #0
    4df8:	movt	r3, #0
    4dfc:	movw	r2, #1166	; 0x48e
    4e00:	movw	r1, #0
    4e04:	movt	r1, #0
    4e08:	movw	r0, #0
    4e0c:	movt	r0, #0
    4e10:	bl	0 <__assert_fail>
    4e14:	mov	r3, #0
    4e18:	str	r3, [sp]
    4e1c:	mov	r3, #1
    4e20:	ldr	r2, [fp, #-20]	; 0xffffffec
    4e24:	movw	r1, #0
    4e28:	movt	r1, #0
    4e2c:	ldr	r0, [fp, #-16]
    4e30:	bl	81c <read_array>
    4e34:	mov	r3, r0
    4e38:	cmp	r3, #0
    4e3c:	beq	4e48 <coda_bin_cursor_read_char_array+0x12c>
    4e40:	mvn	r3, #0
    4e44:	b	4e7c <coda_bin_cursor_read_char_array+0x160>
    4e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4e4c:	cmp	r3, #0
    4e50:	beq	4e78 <coda_bin_cursor_read_char_array+0x15c>
    4e54:	mov	r2, #1
    4e58:	ldr	r1, [fp, #-20]	; 0xffffffec
    4e5c:	ldr	r0, [fp, #-16]
    4e60:	bl	d3c <transpose_array>
    4e64:	mov	r3, r0
    4e68:	cmp	r3, #0
    4e6c:	beq	4e78 <coda_bin_cursor_read_char_array+0x15c>
    4e70:	mvn	r3, #0
    4e74:	b	4e7c <coda_bin_cursor_read_char_array+0x160>
    4e78:	mov	r3, #0
    4e7c:	mov	r0, r3
    4e80:	sub	sp, fp, #4
    4e84:	ldr	fp, [sp]
    4e88:	add	sp, sp, #4
    4e8c:	pop	{pc}		; (ldr pc, [sp], #4)

00004e90 <coda_bin_cursor_read_int8_partial_array>:
    4e90:	str	fp, [sp, #-8]!
    4e94:	str	lr, [sp, #4]
    4e98:	add	fp, sp, #4
    4e9c:	sub	sp, sp, #32
    4ea0:	str	r0, [fp, #-16]
    4ea4:	str	r1, [fp, #-20]	; 0xffffffec
    4ea8:	str	r2, [fp, #-24]	; 0xffffffe8
    4eac:	str	r3, [fp, #-28]	; 0xffffffe4
    4eb0:	ldr	r3, [fp, #-16]
    4eb4:	ldr	r3, [r3, #4]
    4eb8:	sub	r3, r3, #1
    4ebc:	ldr	r2, [fp, #-16]
    4ec0:	lsl	r3, r3, #4
    4ec4:	add	r3, r2, r3
    4ec8:	ldr	r3, [r3, #8]
    4ecc:	ldr	r3, [r3]
    4ed0:	cmp	r3, #99	; 0x63
    4ed4:	bhi	4ef8 <coda_bin_cursor_read_int8_partial_array+0x68>
    4ed8:	ldr	r3, [fp, #-16]
    4edc:	ldr	r3, [r3, #4]
    4ee0:	sub	r3, r3, #1
    4ee4:	ldr	r2, [fp, #-16]
    4ee8:	lsl	r3, r3, #4
    4eec:	add	r3, r2, r3
    4ef0:	ldr	r3, [r3, #8]
    4ef4:	b	4f18 <coda_bin_cursor_read_int8_partial_array+0x88>
    4ef8:	ldr	r3, [fp, #-16]
    4efc:	ldr	r3, [r3, #4]
    4f00:	sub	r3, r3, #1
    4f04:	ldr	r2, [fp, #-16]
    4f08:	lsl	r3, r3, #4
    4f0c:	add	r3, r2, r3
    4f10:	ldr	r3, [r3, #8]
    4f14:	ldr	r3, [r3, #4]
    4f18:	str	r3, [fp, #-8]
    4f1c:	ldr	r3, [fp, #-8]
    4f20:	ldr	r3, [r3, #40]	; 0x28
    4f24:	ldr	r3, [r3]
    4f28:	cmp	r3, #1
    4f2c:	bne	4f60 <coda_bin_cursor_read_int8_partial_array+0xd0>
    4f30:	mov	r3, #1
    4f34:	str	r3, [sp, #4]
    4f38:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4f3c:	str	r3, [sp]
    4f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4f44:	ldr	r2, [fp, #-20]	; 0xffffffec
    4f48:	movw	r1, #0
    4f4c:	movt	r1, #0
    4f50:	ldr	r0, [fp, #-16]
    4f54:	bl	c24 <read_partial_array>
    4f58:	mov	r3, r0
    4f5c:	b	4fc0 <coda_bin_cursor_read_int8_partial_array+0x130>
    4f60:	ldr	r3, [fp, #-8]
    4f64:	ldr	r3, [r3, #40]	; 0x28
    4f68:	ldr	r3, [r3]
    4f6c:	cmp	r3, #0
    4f70:	beq	4f94 <coda_bin_cursor_read_int8_partial_array+0x104>
    4f74:	movw	r3, #0
    4f78:	movt	r3, #0
    4f7c:	movw	r2, #1192	; 0x4a8
    4f80:	movw	r1, #0
    4f84:	movt	r1, #0
    4f88:	movw	r0, #0
    4f8c:	movt	r0, #0
    4f90:	bl	0 <__assert_fail>
    4f94:	mov	r3, #1
    4f98:	str	r3, [sp, #4]
    4f9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4fa0:	str	r3, [sp]
    4fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    4fac:	movw	r1, #0
    4fb0:	movt	r1, #0
    4fb4:	ldr	r0, [fp, #-16]
    4fb8:	bl	c24 <read_partial_array>
    4fbc:	mov	r3, r0
    4fc0:	mov	r0, r3
    4fc4:	sub	sp, fp, #4
    4fc8:	ldr	fp, [sp]
    4fcc:	add	sp, sp, #4
    4fd0:	pop	{pc}		; (ldr pc, [sp], #4)

00004fd4 <coda_bin_cursor_read_uint8_partial_array>:
    4fd4:	str	fp, [sp, #-8]!
    4fd8:	str	lr, [sp, #4]
    4fdc:	add	fp, sp, #4
    4fe0:	sub	sp, sp, #32
    4fe4:	str	r0, [fp, #-16]
    4fe8:	str	r1, [fp, #-20]	; 0xffffffec
    4fec:	str	r2, [fp, #-24]	; 0xffffffe8
    4ff0:	str	r3, [fp, #-28]	; 0xffffffe4
    4ff4:	ldr	r3, [fp, #-16]
    4ff8:	ldr	r3, [r3, #4]
    4ffc:	sub	r3, r3, #1
    5000:	ldr	r2, [fp, #-16]
    5004:	lsl	r3, r3, #4
    5008:	add	r3, r2, r3
    500c:	ldr	r3, [r3, #8]
    5010:	ldr	r3, [r3]
    5014:	cmp	r3, #99	; 0x63
    5018:	bhi	503c <coda_bin_cursor_read_uint8_partial_array+0x68>
    501c:	ldr	r3, [fp, #-16]
    5020:	ldr	r3, [r3, #4]
    5024:	sub	r3, r3, #1
    5028:	ldr	r2, [fp, #-16]
    502c:	lsl	r3, r3, #4
    5030:	add	r3, r2, r3
    5034:	ldr	r3, [r3, #8]
    5038:	b	505c <coda_bin_cursor_read_uint8_partial_array+0x88>
    503c:	ldr	r3, [fp, #-16]
    5040:	ldr	r3, [r3, #4]
    5044:	sub	r3, r3, #1
    5048:	ldr	r2, [fp, #-16]
    504c:	lsl	r3, r3, #4
    5050:	add	r3, r2, r3
    5054:	ldr	r3, [r3, #8]
    5058:	ldr	r3, [r3, #4]
    505c:	str	r3, [fp, #-8]
    5060:	ldr	r3, [fp, #-8]
    5064:	ldr	r3, [r3, #40]	; 0x28
    5068:	ldr	r3, [r3]
    506c:	cmp	r3, #1
    5070:	bne	50a4 <coda_bin_cursor_read_uint8_partial_array+0xd0>
    5074:	mov	r3, #1
    5078:	str	r3, [sp, #4]
    507c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5080:	str	r3, [sp]
    5084:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5088:	ldr	r2, [fp, #-20]	; 0xffffffec
    508c:	movw	r1, #0
    5090:	movt	r1, #0
    5094:	ldr	r0, [fp, #-16]
    5098:	bl	c24 <read_partial_array>
    509c:	mov	r3, r0
    50a0:	b	5104 <coda_bin_cursor_read_uint8_partial_array+0x130>
    50a4:	ldr	r3, [fp, #-8]
    50a8:	ldr	r3, [r3, #40]	; 0x28
    50ac:	ldr	r3, [r3]
    50b0:	cmp	r3, #0
    50b4:	beq	50d8 <coda_bin_cursor_read_uint8_partial_array+0x104>
    50b8:	movw	r3, #0
    50bc:	movt	r3, #0
    50c0:	movw	r2, #1206	; 0x4b6
    50c4:	movw	r1, #0
    50c8:	movt	r1, #0
    50cc:	movw	r0, #0
    50d0:	movt	r0, #0
    50d4:	bl	0 <__assert_fail>
    50d8:	mov	r3, #1
    50dc:	str	r3, [sp, #4]
    50e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    50e4:	str	r3, [sp]
    50e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    50ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    50f0:	movw	r1, #0
    50f4:	movt	r1, #0
    50f8:	ldr	r0, [fp, #-16]
    50fc:	bl	c24 <read_partial_array>
    5100:	mov	r3, r0
    5104:	mov	r0, r3
    5108:	sub	sp, fp, #4
    510c:	ldr	fp, [sp]
    5110:	add	sp, sp, #4
    5114:	pop	{pc}		; (ldr pc, [sp], #4)

00005118 <coda_bin_cursor_read_int16_partial_array>:
    5118:	str	fp, [sp, #-8]!
    511c:	str	lr, [sp, #4]
    5120:	add	fp, sp, #4
    5124:	sub	sp, sp, #32
    5128:	str	r0, [fp, #-16]
    512c:	str	r1, [fp, #-20]	; 0xffffffec
    5130:	str	r2, [fp, #-24]	; 0xffffffe8
    5134:	str	r3, [fp, #-28]	; 0xffffffe4
    5138:	ldr	r3, [fp, #-16]
    513c:	ldr	r3, [r3, #4]
    5140:	sub	r3, r3, #1
    5144:	ldr	r2, [fp, #-16]
    5148:	lsl	r3, r3, #4
    514c:	add	r3, r2, r3
    5150:	ldr	r3, [r3, #8]
    5154:	ldr	r3, [r3]
    5158:	cmp	r3, #99	; 0x63
    515c:	bhi	5180 <coda_bin_cursor_read_int16_partial_array+0x68>
    5160:	ldr	r3, [fp, #-16]
    5164:	ldr	r3, [r3, #4]
    5168:	sub	r3, r3, #1
    516c:	ldr	r2, [fp, #-16]
    5170:	lsl	r3, r3, #4
    5174:	add	r3, r2, r3
    5178:	ldr	r3, [r3, #8]
    517c:	b	51a0 <coda_bin_cursor_read_int16_partial_array+0x88>
    5180:	ldr	r3, [fp, #-16]
    5184:	ldr	r3, [r3, #4]
    5188:	sub	r3, r3, #1
    518c:	ldr	r2, [fp, #-16]
    5190:	lsl	r3, r3, #4
    5194:	add	r3, r2, r3
    5198:	ldr	r3, [r3, #8]
    519c:	ldr	r3, [r3, #4]
    51a0:	str	r3, [fp, #-8]
    51a4:	ldr	r3, [fp, #-8]
    51a8:	ldr	r3, [r3, #40]	; 0x28
    51ac:	ldr	r3, [r3]
    51b0:	cmp	r3, #1
    51b4:	bne	51e8 <coda_bin_cursor_read_int16_partial_array+0xd0>
    51b8:	mov	r3, #2
    51bc:	str	r3, [sp, #4]
    51c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    51c4:	str	r3, [sp]
    51c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    51cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    51d0:	movw	r1, #0
    51d4:	movt	r1, #0
    51d8:	ldr	r0, [fp, #-16]
    51dc:	bl	c24 <read_partial_array>
    51e0:	mov	r3, r0
    51e4:	b	5248 <coda_bin_cursor_read_int16_partial_array+0x130>
    51e8:	ldr	r3, [fp, #-8]
    51ec:	ldr	r3, [r3, #40]	; 0x28
    51f0:	ldr	r3, [r3]
    51f4:	cmp	r3, #0
    51f8:	beq	521c <coda_bin_cursor_read_int16_partial_array+0x104>
    51fc:	movw	r3, #0
    5200:	movt	r3, #0
    5204:	movw	r2, #1220	; 0x4c4
    5208:	movw	r1, #0
    520c:	movt	r1, #0
    5210:	movw	r0, #0
    5214:	movt	r0, #0
    5218:	bl	0 <__assert_fail>
    521c:	mov	r3, #2
    5220:	str	r3, [sp, #4]
    5224:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5228:	str	r3, [sp]
    522c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5230:	ldr	r2, [fp, #-20]	; 0xffffffec
    5234:	movw	r1, #0
    5238:	movt	r1, #0
    523c:	ldr	r0, [fp, #-16]
    5240:	bl	c24 <read_partial_array>
    5244:	mov	r3, r0
    5248:	mov	r0, r3
    524c:	sub	sp, fp, #4
    5250:	ldr	fp, [sp]
    5254:	add	sp, sp, #4
    5258:	pop	{pc}		; (ldr pc, [sp], #4)

0000525c <coda_bin_cursor_read_uint16_partial_array>:
    525c:	str	fp, [sp, #-8]!
    5260:	str	lr, [sp, #4]
    5264:	add	fp, sp, #4
    5268:	sub	sp, sp, #32
    526c:	str	r0, [fp, #-16]
    5270:	str	r1, [fp, #-20]	; 0xffffffec
    5274:	str	r2, [fp, #-24]	; 0xffffffe8
    5278:	str	r3, [fp, #-28]	; 0xffffffe4
    527c:	ldr	r3, [fp, #-16]
    5280:	ldr	r3, [r3, #4]
    5284:	sub	r3, r3, #1
    5288:	ldr	r2, [fp, #-16]
    528c:	lsl	r3, r3, #4
    5290:	add	r3, r2, r3
    5294:	ldr	r3, [r3, #8]
    5298:	ldr	r3, [r3]
    529c:	cmp	r3, #99	; 0x63
    52a0:	bhi	52c4 <coda_bin_cursor_read_uint16_partial_array+0x68>
    52a4:	ldr	r3, [fp, #-16]
    52a8:	ldr	r3, [r3, #4]
    52ac:	sub	r3, r3, #1
    52b0:	ldr	r2, [fp, #-16]
    52b4:	lsl	r3, r3, #4
    52b8:	add	r3, r2, r3
    52bc:	ldr	r3, [r3, #8]
    52c0:	b	52e4 <coda_bin_cursor_read_uint16_partial_array+0x88>
    52c4:	ldr	r3, [fp, #-16]
    52c8:	ldr	r3, [r3, #4]
    52cc:	sub	r3, r3, #1
    52d0:	ldr	r2, [fp, #-16]
    52d4:	lsl	r3, r3, #4
    52d8:	add	r3, r2, r3
    52dc:	ldr	r3, [r3, #8]
    52e0:	ldr	r3, [r3, #4]
    52e4:	str	r3, [fp, #-8]
    52e8:	ldr	r3, [fp, #-8]
    52ec:	ldr	r3, [r3, #40]	; 0x28
    52f0:	ldr	r3, [r3]
    52f4:	cmp	r3, #1
    52f8:	bne	532c <coda_bin_cursor_read_uint16_partial_array+0xd0>
    52fc:	mov	r3, #2
    5300:	str	r3, [sp, #4]
    5304:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5308:	str	r3, [sp]
    530c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5310:	ldr	r2, [fp, #-20]	; 0xffffffec
    5314:	movw	r1, #0
    5318:	movt	r1, #0
    531c:	ldr	r0, [fp, #-16]
    5320:	bl	c24 <read_partial_array>
    5324:	mov	r3, r0
    5328:	b	538c <coda_bin_cursor_read_uint16_partial_array+0x130>
    532c:	ldr	r3, [fp, #-8]
    5330:	ldr	r3, [r3, #40]	; 0x28
    5334:	ldr	r3, [r3]
    5338:	cmp	r3, #0
    533c:	beq	5360 <coda_bin_cursor_read_uint16_partial_array+0x104>
    5340:	movw	r3, #0
    5344:	movt	r3, #0
    5348:	movw	r2, #1234	; 0x4d2
    534c:	movw	r1, #0
    5350:	movt	r1, #0
    5354:	movw	r0, #0
    5358:	movt	r0, #0
    535c:	bl	0 <__assert_fail>
    5360:	mov	r3, #2
    5364:	str	r3, [sp, #4]
    5368:	ldr	r3, [fp, #-28]	; 0xffffffe4
    536c:	str	r3, [sp]
    5370:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5374:	ldr	r2, [fp, #-20]	; 0xffffffec
    5378:	movw	r1, #0
    537c:	movt	r1, #0
    5380:	ldr	r0, [fp, #-16]
    5384:	bl	c24 <read_partial_array>
    5388:	mov	r3, r0
    538c:	mov	r0, r3
    5390:	sub	sp, fp, #4
    5394:	ldr	fp, [sp]
    5398:	add	sp, sp, #4
    539c:	pop	{pc}		; (ldr pc, [sp], #4)

000053a0 <coda_bin_cursor_read_int32_partial_array>:
    53a0:	str	fp, [sp, #-8]!
    53a4:	str	lr, [sp, #4]
    53a8:	add	fp, sp, #4
    53ac:	sub	sp, sp, #32
    53b0:	str	r0, [fp, #-16]
    53b4:	str	r1, [fp, #-20]	; 0xffffffec
    53b8:	str	r2, [fp, #-24]	; 0xffffffe8
    53bc:	str	r3, [fp, #-28]	; 0xffffffe4
    53c0:	ldr	r3, [fp, #-16]
    53c4:	ldr	r3, [r3, #4]
    53c8:	sub	r3, r3, #1
    53cc:	ldr	r2, [fp, #-16]
    53d0:	lsl	r3, r3, #4
    53d4:	add	r3, r2, r3
    53d8:	ldr	r3, [r3, #8]
    53dc:	ldr	r3, [r3]
    53e0:	cmp	r3, #99	; 0x63
    53e4:	bhi	5408 <coda_bin_cursor_read_int32_partial_array+0x68>
    53e8:	ldr	r3, [fp, #-16]
    53ec:	ldr	r3, [r3, #4]
    53f0:	sub	r3, r3, #1
    53f4:	ldr	r2, [fp, #-16]
    53f8:	lsl	r3, r3, #4
    53fc:	add	r3, r2, r3
    5400:	ldr	r3, [r3, #8]
    5404:	b	5428 <coda_bin_cursor_read_int32_partial_array+0x88>
    5408:	ldr	r3, [fp, #-16]
    540c:	ldr	r3, [r3, #4]
    5410:	sub	r3, r3, #1
    5414:	ldr	r2, [fp, #-16]
    5418:	lsl	r3, r3, #4
    541c:	add	r3, r2, r3
    5420:	ldr	r3, [r3, #8]
    5424:	ldr	r3, [r3, #4]
    5428:	str	r3, [fp, #-8]
    542c:	ldr	r3, [fp, #-8]
    5430:	ldr	r3, [r3, #40]	; 0x28
    5434:	ldr	r3, [r3]
    5438:	cmp	r3, #1
    543c:	bne	5470 <coda_bin_cursor_read_int32_partial_array+0xd0>
    5440:	mov	r3, #4
    5444:	str	r3, [sp, #4]
    5448:	ldr	r3, [fp, #-28]	; 0xffffffe4
    544c:	str	r3, [sp]
    5450:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5454:	ldr	r2, [fp, #-20]	; 0xffffffec
    5458:	movw	r1, #0
    545c:	movt	r1, #0
    5460:	ldr	r0, [fp, #-16]
    5464:	bl	c24 <read_partial_array>
    5468:	mov	r3, r0
    546c:	b	54d0 <coda_bin_cursor_read_int32_partial_array+0x130>
    5470:	ldr	r3, [fp, #-8]
    5474:	ldr	r3, [r3, #40]	; 0x28
    5478:	ldr	r3, [r3]
    547c:	cmp	r3, #0
    5480:	beq	54a4 <coda_bin_cursor_read_int32_partial_array+0x104>
    5484:	movw	r3, #0
    5488:	movt	r3, #0
    548c:	mov	r2, #1248	; 0x4e0
    5490:	movw	r1, #0
    5494:	movt	r1, #0
    5498:	movw	r0, #0
    549c:	movt	r0, #0
    54a0:	bl	0 <__assert_fail>
    54a4:	mov	r3, #4
    54a8:	str	r3, [sp, #4]
    54ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
    54b0:	str	r3, [sp]
    54b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    54bc:	movw	r1, #0
    54c0:	movt	r1, #0
    54c4:	ldr	r0, [fp, #-16]
    54c8:	bl	c24 <read_partial_array>
    54cc:	mov	r3, r0
    54d0:	mov	r0, r3
    54d4:	sub	sp, fp, #4
    54d8:	ldr	fp, [sp]
    54dc:	add	sp, sp, #4
    54e0:	pop	{pc}		; (ldr pc, [sp], #4)

000054e4 <coda_bin_cursor_read_uint32_partial_array>:
    54e4:	str	fp, [sp, #-8]!
    54e8:	str	lr, [sp, #4]
    54ec:	add	fp, sp, #4
    54f0:	sub	sp, sp, #32
    54f4:	str	r0, [fp, #-16]
    54f8:	str	r1, [fp, #-20]	; 0xffffffec
    54fc:	str	r2, [fp, #-24]	; 0xffffffe8
    5500:	str	r3, [fp, #-28]	; 0xffffffe4
    5504:	ldr	r3, [fp, #-16]
    5508:	ldr	r3, [r3, #4]
    550c:	sub	r3, r3, #1
    5510:	ldr	r2, [fp, #-16]
    5514:	lsl	r3, r3, #4
    5518:	add	r3, r2, r3
    551c:	ldr	r3, [r3, #8]
    5520:	ldr	r3, [r3]
    5524:	cmp	r3, #99	; 0x63
    5528:	bhi	554c <coda_bin_cursor_read_uint32_partial_array+0x68>
    552c:	ldr	r3, [fp, #-16]
    5530:	ldr	r3, [r3, #4]
    5534:	sub	r3, r3, #1
    5538:	ldr	r2, [fp, #-16]
    553c:	lsl	r3, r3, #4
    5540:	add	r3, r2, r3
    5544:	ldr	r3, [r3, #8]
    5548:	b	556c <coda_bin_cursor_read_uint32_partial_array+0x88>
    554c:	ldr	r3, [fp, #-16]
    5550:	ldr	r3, [r3, #4]
    5554:	sub	r3, r3, #1
    5558:	ldr	r2, [fp, #-16]
    555c:	lsl	r3, r3, #4
    5560:	add	r3, r2, r3
    5564:	ldr	r3, [r3, #8]
    5568:	ldr	r3, [r3, #4]
    556c:	str	r3, [fp, #-8]
    5570:	ldr	r3, [fp, #-8]
    5574:	ldr	r3, [r3, #40]	; 0x28
    5578:	ldr	r3, [r3]
    557c:	cmp	r3, #1
    5580:	bne	55b4 <coda_bin_cursor_read_uint32_partial_array+0xd0>
    5584:	mov	r3, #4
    5588:	str	r3, [sp, #4]
    558c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5590:	str	r3, [sp]
    5594:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5598:	ldr	r2, [fp, #-20]	; 0xffffffec
    559c:	movw	r1, #0
    55a0:	movt	r1, #0
    55a4:	ldr	r0, [fp, #-16]
    55a8:	bl	c24 <read_partial_array>
    55ac:	mov	r3, r0
    55b0:	b	5614 <coda_bin_cursor_read_uint32_partial_array+0x130>
    55b4:	ldr	r3, [fp, #-8]
    55b8:	ldr	r3, [r3, #40]	; 0x28
    55bc:	ldr	r3, [r3]
    55c0:	cmp	r3, #0
    55c4:	beq	55e8 <coda_bin_cursor_read_uint32_partial_array+0x104>
    55c8:	movw	r3, #0
    55cc:	movt	r3, #0
    55d0:	movw	r2, #1262	; 0x4ee
    55d4:	movw	r1, #0
    55d8:	movt	r1, #0
    55dc:	movw	r0, #0
    55e0:	movt	r0, #0
    55e4:	bl	0 <__assert_fail>
    55e8:	mov	r3, #4
    55ec:	str	r3, [sp, #4]
    55f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    55f4:	str	r3, [sp]
    55f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    55fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    5600:	movw	r1, #0
    5604:	movt	r1, #0
    5608:	ldr	r0, [fp, #-16]
    560c:	bl	c24 <read_partial_array>
    5610:	mov	r3, r0
    5614:	mov	r0, r3
    5618:	sub	sp, fp, #4
    561c:	ldr	fp, [sp]
    5620:	add	sp, sp, #4
    5624:	pop	{pc}		; (ldr pc, [sp], #4)

00005628 <coda_bin_cursor_read_int64_partial_array>:
    5628:	str	fp, [sp, #-8]!
    562c:	str	lr, [sp, #4]
    5630:	add	fp, sp, #4
    5634:	sub	sp, sp, #32
    5638:	str	r0, [fp, #-16]
    563c:	str	r1, [fp, #-20]	; 0xffffffec
    5640:	str	r2, [fp, #-24]	; 0xffffffe8
    5644:	str	r3, [fp, #-28]	; 0xffffffe4
    5648:	ldr	r3, [fp, #-16]
    564c:	ldr	r3, [r3, #4]
    5650:	sub	r3, r3, #1
    5654:	ldr	r2, [fp, #-16]
    5658:	lsl	r3, r3, #4
    565c:	add	r3, r2, r3
    5660:	ldr	r3, [r3, #8]
    5664:	ldr	r3, [r3]
    5668:	cmp	r3, #99	; 0x63
    566c:	bhi	5690 <coda_bin_cursor_read_int64_partial_array+0x68>
    5670:	ldr	r3, [fp, #-16]
    5674:	ldr	r3, [r3, #4]
    5678:	sub	r3, r3, #1
    567c:	ldr	r2, [fp, #-16]
    5680:	lsl	r3, r3, #4
    5684:	add	r3, r2, r3
    5688:	ldr	r3, [r3, #8]
    568c:	b	56b0 <coda_bin_cursor_read_int64_partial_array+0x88>
    5690:	ldr	r3, [fp, #-16]
    5694:	ldr	r3, [r3, #4]
    5698:	sub	r3, r3, #1
    569c:	ldr	r2, [fp, #-16]
    56a0:	lsl	r3, r3, #4
    56a4:	add	r3, r2, r3
    56a8:	ldr	r3, [r3, #8]
    56ac:	ldr	r3, [r3, #4]
    56b0:	str	r3, [fp, #-8]
    56b4:	ldr	r3, [fp, #-8]
    56b8:	ldr	r3, [r3, #40]	; 0x28
    56bc:	ldr	r3, [r3]
    56c0:	cmp	r3, #1
    56c4:	bne	56f8 <coda_bin_cursor_read_int64_partial_array+0xd0>
    56c8:	mov	r3, #8
    56cc:	str	r3, [sp, #4]
    56d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    56d4:	str	r3, [sp]
    56d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    56dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    56e0:	movw	r1, #0
    56e4:	movt	r1, #0
    56e8:	ldr	r0, [fp, #-16]
    56ec:	bl	c24 <read_partial_array>
    56f0:	mov	r3, r0
    56f4:	b	5758 <coda_bin_cursor_read_int64_partial_array+0x130>
    56f8:	ldr	r3, [fp, #-8]
    56fc:	ldr	r3, [r3, #40]	; 0x28
    5700:	ldr	r3, [r3]
    5704:	cmp	r3, #0
    5708:	beq	572c <coda_bin_cursor_read_int64_partial_array+0x104>
    570c:	movw	r3, #0
    5710:	movt	r3, #0
    5714:	movw	r2, #1276	; 0x4fc
    5718:	movw	r1, #0
    571c:	movt	r1, #0
    5720:	movw	r0, #0
    5724:	movt	r0, #0
    5728:	bl	0 <__assert_fail>
    572c:	mov	r3, #8
    5730:	str	r3, [sp, #4]
    5734:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5738:	str	r3, [sp]
    573c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5740:	ldr	r2, [fp, #-20]	; 0xffffffec
    5744:	movw	r1, #0
    5748:	movt	r1, #0
    574c:	ldr	r0, [fp, #-16]
    5750:	bl	c24 <read_partial_array>
    5754:	mov	r3, r0
    5758:	mov	r0, r3
    575c:	sub	sp, fp, #4
    5760:	ldr	fp, [sp]
    5764:	add	sp, sp, #4
    5768:	pop	{pc}		; (ldr pc, [sp], #4)

0000576c <coda_bin_cursor_read_uint64_partial_array>:
    576c:	str	fp, [sp, #-8]!
    5770:	str	lr, [sp, #4]
    5774:	add	fp, sp, #4
    5778:	sub	sp, sp, #32
    577c:	str	r0, [fp, #-16]
    5780:	str	r1, [fp, #-20]	; 0xffffffec
    5784:	str	r2, [fp, #-24]	; 0xffffffe8
    5788:	str	r3, [fp, #-28]	; 0xffffffe4
    578c:	ldr	r3, [fp, #-16]
    5790:	ldr	r3, [r3, #4]
    5794:	sub	r3, r3, #1
    5798:	ldr	r2, [fp, #-16]
    579c:	lsl	r3, r3, #4
    57a0:	add	r3, r2, r3
    57a4:	ldr	r3, [r3, #8]
    57a8:	ldr	r3, [r3]
    57ac:	cmp	r3, #99	; 0x63
    57b0:	bhi	57d4 <coda_bin_cursor_read_uint64_partial_array+0x68>
    57b4:	ldr	r3, [fp, #-16]
    57b8:	ldr	r3, [r3, #4]
    57bc:	sub	r3, r3, #1
    57c0:	ldr	r2, [fp, #-16]
    57c4:	lsl	r3, r3, #4
    57c8:	add	r3, r2, r3
    57cc:	ldr	r3, [r3, #8]
    57d0:	b	57f4 <coda_bin_cursor_read_uint64_partial_array+0x88>
    57d4:	ldr	r3, [fp, #-16]
    57d8:	ldr	r3, [r3, #4]
    57dc:	sub	r3, r3, #1
    57e0:	ldr	r2, [fp, #-16]
    57e4:	lsl	r3, r3, #4
    57e8:	add	r3, r2, r3
    57ec:	ldr	r3, [r3, #8]
    57f0:	ldr	r3, [r3, #4]
    57f4:	str	r3, [fp, #-8]
    57f8:	ldr	r3, [fp, #-8]
    57fc:	ldr	r3, [r3, #40]	; 0x28
    5800:	ldr	r3, [r3]
    5804:	cmp	r3, #1
    5808:	bne	583c <coda_bin_cursor_read_uint64_partial_array+0xd0>
    580c:	mov	r3, #8
    5810:	str	r3, [sp, #4]
    5814:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5818:	str	r3, [sp]
    581c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5820:	ldr	r2, [fp, #-20]	; 0xffffffec
    5824:	movw	r1, #0
    5828:	movt	r1, #0
    582c:	ldr	r0, [fp, #-16]
    5830:	bl	c24 <read_partial_array>
    5834:	mov	r3, r0
    5838:	b	589c <coda_bin_cursor_read_uint64_partial_array+0x130>
    583c:	ldr	r3, [fp, #-8]
    5840:	ldr	r3, [r3, #40]	; 0x28
    5844:	ldr	r3, [r3]
    5848:	cmp	r3, #0
    584c:	beq	5870 <coda_bin_cursor_read_uint64_partial_array+0x104>
    5850:	movw	r3, #0
    5854:	movt	r3, #0
    5858:	movw	r2, #1290	; 0x50a
    585c:	movw	r1, #0
    5860:	movt	r1, #0
    5864:	movw	r0, #0
    5868:	movt	r0, #0
    586c:	bl	0 <__assert_fail>
    5870:	mov	r3, #8
    5874:	str	r3, [sp, #4]
    5878:	ldr	r3, [fp, #-28]	; 0xffffffe4
    587c:	str	r3, [sp]
    5880:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5884:	ldr	r2, [fp, #-20]	; 0xffffffec
    5888:	movw	r1, #0
    588c:	movt	r1, #0
    5890:	ldr	r0, [fp, #-16]
    5894:	bl	c24 <read_partial_array>
    5898:	mov	r3, r0
    589c:	mov	r0, r3
    58a0:	sub	sp, fp, #4
    58a4:	ldr	fp, [sp]
    58a8:	add	sp, sp, #4
    58ac:	pop	{pc}		; (ldr pc, [sp], #4)

000058b0 <coda_bin_cursor_read_float_partial_array>:
    58b0:	str	fp, [sp, #-8]!
    58b4:	str	lr, [sp, #4]
    58b8:	add	fp, sp, #4
    58bc:	sub	sp, sp, #32
    58c0:	str	r0, [fp, #-16]
    58c4:	str	r1, [fp, #-20]	; 0xffffffec
    58c8:	str	r2, [fp, #-24]	; 0xffffffe8
    58cc:	str	r3, [fp, #-28]	; 0xffffffe4
    58d0:	ldr	r3, [fp, #-16]
    58d4:	ldr	r3, [r3, #4]
    58d8:	sub	r3, r3, #1
    58dc:	ldr	r2, [fp, #-16]
    58e0:	lsl	r3, r3, #4
    58e4:	add	r3, r2, r3
    58e8:	ldr	r3, [r3, #8]
    58ec:	ldr	r3, [r3]
    58f0:	cmp	r3, #99	; 0x63
    58f4:	bhi	5918 <coda_bin_cursor_read_float_partial_array+0x68>
    58f8:	ldr	r3, [fp, #-16]
    58fc:	ldr	r3, [r3, #4]
    5900:	sub	r3, r3, #1
    5904:	ldr	r2, [fp, #-16]
    5908:	lsl	r3, r3, #4
    590c:	add	r3, r2, r3
    5910:	ldr	r3, [r3, #8]
    5914:	b	5938 <coda_bin_cursor_read_float_partial_array+0x88>
    5918:	ldr	r3, [fp, #-16]
    591c:	ldr	r3, [r3, #4]
    5920:	sub	r3, r3, #1
    5924:	ldr	r2, [fp, #-16]
    5928:	lsl	r3, r3, #4
    592c:	add	r3, r2, r3
    5930:	ldr	r3, [r3, #8]
    5934:	ldr	r3, [r3, #4]
    5938:	str	r3, [fp, #-8]
    593c:	ldr	r3, [fp, #-8]
    5940:	ldr	r3, [r3, #40]	; 0x28
    5944:	ldr	r3, [r3]
    5948:	cmp	r3, #1
    594c:	bne	5980 <coda_bin_cursor_read_float_partial_array+0xd0>
    5950:	mov	r3, #4
    5954:	str	r3, [sp, #4]
    5958:	ldr	r3, [fp, #-28]	; 0xffffffe4
    595c:	str	r3, [sp]
    5960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5964:	ldr	r2, [fp, #-20]	; 0xffffffec
    5968:	movw	r1, #0
    596c:	movt	r1, #0
    5970:	ldr	r0, [fp, #-16]
    5974:	bl	c24 <read_partial_array>
    5978:	mov	r3, r0
    597c:	b	59e0 <coda_bin_cursor_read_float_partial_array+0x130>
    5980:	ldr	r3, [fp, #-8]
    5984:	ldr	r3, [r3, #40]	; 0x28
    5988:	ldr	r3, [r3]
    598c:	cmp	r3, #0
    5990:	beq	59b4 <coda_bin_cursor_read_float_partial_array+0x104>
    5994:	movw	r3, #0
    5998:	movt	r3, #0
    599c:	movw	r2, #1304	; 0x518
    59a0:	movw	r1, #0
    59a4:	movt	r1, #0
    59a8:	movw	r0, #0
    59ac:	movt	r0, #0
    59b0:	bl	0 <__assert_fail>
    59b4:	mov	r3, #4
    59b8:	str	r3, [sp, #4]
    59bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    59c0:	str	r3, [sp]
    59c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    59cc:	movw	r1, #0
    59d0:	movt	r1, #0
    59d4:	ldr	r0, [fp, #-16]
    59d8:	bl	c24 <read_partial_array>
    59dc:	mov	r3, r0
    59e0:	mov	r0, r3
    59e4:	sub	sp, fp, #4
    59e8:	ldr	fp, [sp]
    59ec:	add	sp, sp, #4
    59f0:	pop	{pc}		; (ldr pc, [sp], #4)

000059f4 <coda_bin_cursor_read_double_partial_array>:
    59f4:	str	fp, [sp, #-8]!
    59f8:	str	lr, [sp, #4]
    59fc:	add	fp, sp, #4
    5a00:	sub	sp, sp, #32
    5a04:	str	r0, [fp, #-16]
    5a08:	str	r1, [fp, #-20]	; 0xffffffec
    5a0c:	str	r2, [fp, #-24]	; 0xffffffe8
    5a10:	str	r3, [fp, #-28]	; 0xffffffe4
    5a14:	ldr	r3, [fp, #-16]
    5a18:	ldr	r3, [r3, #4]
    5a1c:	sub	r3, r3, #1
    5a20:	ldr	r2, [fp, #-16]
    5a24:	lsl	r3, r3, #4
    5a28:	add	r3, r2, r3
    5a2c:	ldr	r3, [r3, #8]
    5a30:	ldr	r3, [r3]
    5a34:	cmp	r3, #99	; 0x63
    5a38:	bhi	5a5c <coda_bin_cursor_read_double_partial_array+0x68>
    5a3c:	ldr	r3, [fp, #-16]
    5a40:	ldr	r3, [r3, #4]
    5a44:	sub	r3, r3, #1
    5a48:	ldr	r2, [fp, #-16]
    5a4c:	lsl	r3, r3, #4
    5a50:	add	r3, r2, r3
    5a54:	ldr	r3, [r3, #8]
    5a58:	b	5a7c <coda_bin_cursor_read_double_partial_array+0x88>
    5a5c:	ldr	r3, [fp, #-16]
    5a60:	ldr	r3, [r3, #4]
    5a64:	sub	r3, r3, #1
    5a68:	ldr	r2, [fp, #-16]
    5a6c:	lsl	r3, r3, #4
    5a70:	add	r3, r2, r3
    5a74:	ldr	r3, [r3, #8]
    5a78:	ldr	r3, [r3, #4]
    5a7c:	str	r3, [fp, #-8]
    5a80:	ldr	r3, [fp, #-8]
    5a84:	ldr	r3, [r3, #40]	; 0x28
    5a88:	ldr	r3, [r3]
    5a8c:	cmp	r3, #1
    5a90:	bne	5ac4 <coda_bin_cursor_read_double_partial_array+0xd0>
    5a94:	mov	r3, #8
    5a98:	str	r3, [sp, #4]
    5a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5aa0:	str	r3, [sp]
    5aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5aa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    5aac:	movw	r1, #0
    5ab0:	movt	r1, #0
    5ab4:	ldr	r0, [fp, #-16]
    5ab8:	bl	c24 <read_partial_array>
    5abc:	mov	r3, r0
    5ac0:	b	5b24 <coda_bin_cursor_read_double_partial_array+0x130>
    5ac4:	ldr	r3, [fp, #-8]
    5ac8:	ldr	r3, [r3, #40]	; 0x28
    5acc:	ldr	r3, [r3]
    5ad0:	cmp	r3, #0
    5ad4:	beq	5af8 <coda_bin_cursor_read_double_partial_array+0x104>
    5ad8:	movw	r3, #0
    5adc:	movt	r3, #0
    5ae0:	movw	r2, #1318	; 0x526
    5ae4:	movw	r1, #0
    5ae8:	movt	r1, #0
    5aec:	movw	r0, #0
    5af0:	movt	r0, #0
    5af4:	bl	0 <__assert_fail>
    5af8:	mov	r3, #8
    5afc:	str	r3, [sp, #4]
    5b00:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5b04:	str	r3, [sp]
    5b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5b0c:	ldr	r2, [fp, #-20]	; 0xffffffec
    5b10:	movw	r1, #0
    5b14:	movt	r1, #0
    5b18:	ldr	r0, [fp, #-16]
    5b1c:	bl	c24 <read_partial_array>
    5b20:	mov	r3, r0
    5b24:	mov	r0, r3
    5b28:	sub	sp, fp, #4
    5b2c:	ldr	fp, [sp]
    5b30:	add	sp, sp, #4
    5b34:	pop	{pc}		; (ldr pc, [sp], #4)

00005b38 <coda_bin_cursor_read_char_partial_array>:
    5b38:	str	fp, [sp, #-8]!
    5b3c:	str	lr, [sp, #4]
    5b40:	add	fp, sp, #4
    5b44:	sub	sp, sp, #32
    5b48:	str	r0, [fp, #-16]
    5b4c:	str	r1, [fp, #-20]	; 0xffffffec
    5b50:	str	r2, [fp, #-24]	; 0xffffffe8
    5b54:	str	r3, [fp, #-28]	; 0xffffffe4
    5b58:	ldr	r3, [fp, #-16]
    5b5c:	ldr	r3, [r3, #4]
    5b60:	sub	r3, r3, #1
    5b64:	ldr	r2, [fp, #-16]
    5b68:	lsl	r3, r3, #4
    5b6c:	add	r3, r2, r3
    5b70:	ldr	r3, [r3, #8]
    5b74:	ldr	r3, [r3]
    5b78:	cmp	r3, #99	; 0x63
    5b7c:	bhi	5ba0 <coda_bin_cursor_read_char_partial_array+0x68>
    5b80:	ldr	r3, [fp, #-16]
    5b84:	ldr	r3, [r3, #4]
    5b88:	sub	r3, r3, #1
    5b8c:	ldr	r2, [fp, #-16]
    5b90:	lsl	r3, r3, #4
    5b94:	add	r3, r2, r3
    5b98:	ldr	r3, [r3, #8]
    5b9c:	b	5bc0 <coda_bin_cursor_read_char_partial_array+0x88>
    5ba0:	ldr	r3, [fp, #-16]
    5ba4:	ldr	r3, [r3, #4]
    5ba8:	sub	r3, r3, #1
    5bac:	ldr	r2, [fp, #-16]
    5bb0:	lsl	r3, r3, #4
    5bb4:	add	r3, r2, r3
    5bb8:	ldr	r3, [r3, #8]
    5bbc:	ldr	r3, [r3, #4]
    5bc0:	str	r3, [fp, #-8]
    5bc4:	ldr	r3, [fp, #-8]
    5bc8:	ldr	r3, [r3, #40]	; 0x28
    5bcc:	ldr	r3, [r3]
    5bd0:	cmp	r3, #1
    5bd4:	bne	5c08 <coda_bin_cursor_read_char_partial_array+0xd0>
    5bd8:	mov	r3, #1
    5bdc:	str	r3, [sp, #4]
    5be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5be4:	str	r3, [sp]
    5be8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5bec:	ldr	r2, [fp, #-20]	; 0xffffffec
    5bf0:	movw	r1, #0
    5bf4:	movt	r1, #0
    5bf8:	ldr	r0, [fp, #-16]
    5bfc:	bl	c24 <read_partial_array>
    5c00:	mov	r3, r0
    5c04:	b	5c68 <coda_bin_cursor_read_char_partial_array+0x130>
    5c08:	ldr	r3, [fp, #-8]
    5c0c:	ldr	r3, [r3, #40]	; 0x28
    5c10:	ldr	r3, [r3]
    5c14:	cmp	r3, #0
    5c18:	beq	5c3c <coda_bin_cursor_read_char_partial_array+0x104>
    5c1c:	movw	r3, #0
    5c20:	movt	r3, #0
    5c24:	movw	r2, #1332	; 0x534
    5c28:	movw	r1, #0
    5c2c:	movt	r1, #0
    5c30:	movw	r0, #0
    5c34:	movt	r0, #0
    5c38:	bl	0 <__assert_fail>
    5c3c:	mov	r3, #1
    5c40:	str	r3, [sp, #4]
    5c44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5c48:	str	r3, [sp]
    5c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c50:	ldr	r2, [fp, #-20]	; 0xffffffec
    5c54:	movw	r1, #0
    5c58:	movt	r1, #0
    5c5c:	ldr	r0, [fp, #-16]
    5c60:	bl	c24 <read_partial_array>
    5c64:	mov	r3, r0
    5c68:	mov	r0, r3
    5c6c:	sub	sp, fp, #4
    5c70:	ldr	fp, [sp]
    5c74:	add	sp, sp, #4
    5c78:	pop	{pc}		; (ldr pc, [sp], #4)
