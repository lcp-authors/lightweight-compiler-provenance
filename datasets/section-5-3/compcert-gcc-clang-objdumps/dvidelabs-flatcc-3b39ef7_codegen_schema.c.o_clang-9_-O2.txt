
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_codegen_bfbs_to_buffer>:
       0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #232	; 0xe8
       c:	mov	r5, sp
      10:	mov	r7, r0
      14:	mov	r8, r3
      18:	mov	r4, r2
      1c:	mov	r6, r1
      20:	mov	r0, r5
      24:	bl	0 <flatcc_builder_init>
      28:	mov	r0, r5
      2c:	mov	r1, r7
      30:	mov	r2, r6
      34:	bl	78 <export_schema>
      38:	ldr	r2, [r8]
      3c:	mov	r0, r5
      40:	mov	r1, r4
      44:	bl	0 <flatcc_builder_copy_buffer>
      48:	cmp	r0, #0
      4c:	movne	r0, r4
      50:	blne	ef8 <sort_fields>
      54:	mov	r5, sp
      58:	mov	r0, r5
      5c:	bl	0 <flatcc_builder_get_buffer_size>
      60:	str	r0, [r8]
      64:	mov	r0, r5
      68:	bl	0 <flatcc_builder_clear>
      6c:	mov	r0, r4
      70:	sub	sp, fp, #24
      74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000078 <export_schema>:
      78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
      7c:	add	fp, sp, #28
      80:	sub	sp, sp, #4
      84:	vpush	{d8}
      88:	sub	sp, sp, #104	; 0x68
      8c:	vmov.i32	q8, #0	; 0x00000000
      90:	add	r6, sp, #56	; 0x38
      94:	str	r1, [sp, #48]	; 0x30
      98:	ldr	r3, [r1, #184]	; 0xb8
      9c:	str	r0, [sp, #52]	; 0x34
      a0:	ldr	r0, [r2, #60]	; 0x3c
      a4:	str	r2, [sp, #8]
      a8:	add	r1, r6, #20
      ac:	vst1.32	{d16-d17}, [r1]
      b0:	orr	r1, r6, #4
      b4:	vst1.32	{d16-d17}, [r1]
      b8:	mov	r1, #0
      bc:	mov	r5, r0
      c0:	str	r1, [sp, #92]	; 0x5c
      c4:	movw	r1, #0
      c8:	str	r2, [sp, #96]	; 0x60
      cc:	mov	r2, r6
      d0:	str	r3, [sp, #56]	; 0x38
      d4:	movt	r1, #0
      d8:	bl	0 <fb_scope_table_visit>
      dc:	ldr	r9, [sp, #60]	; 0x3c
      e0:	mov	r1, #8
      e4:	mov	r0, r9
      e8:	bl	0 <calloc>
      ec:	str	r0, [sp, #72]	; 0x48
      f0:	mov	r7, r0
      f4:	mov	r1, #8
      f8:	ldr	sl, [sp, #64]	; 0x40
      fc:	mov	r0, sl
     100:	bl	0 <calloc>
     104:	str	r0, [sp, #76]	; 0x4c
     108:	mov	r4, r0
     10c:	ldr	r8, [sp, #68]	; 0x44
     110:	mov	r0, r8
     114:	bl	0 <malloc>
     118:	cmp	r9, #1
     11c:	str	r0, [sp, #92]	; 0x5c
     120:	str	r4, [sp, #88]	; 0x58
     124:	str	r7, [sp, #84]	; 0x54
     128:	str	r0, [sp, #80]	; 0x50
     12c:	blt	138 <export_schema+0xc0>
     130:	cmp	r7, #0
     134:	beq	16c <export_schema+0xf4>
     138:	cmp	sl, #1
     13c:	blt	148 <export_schema+0xd0>
     140:	cmp	r4, #0
     144:	beq	158 <export_schema+0xe0>
     148:	cmp	r8, #0
     14c:	beq	1bc <export_schema+0x144>
     150:	cmp	r0, #0
     154:	bne	1bc <export_schema+0x144>
     158:	cmp	r7, #0
     15c:	beq	16c <export_schema+0xf4>
     160:	mov	r0, r7
     164:	bl	0 <free>
     168:	ldr	r4, [sp, #76]	; 0x4c
     16c:	cmp	r4, #0
     170:	beq	17c <export_schema+0x104>
     174:	mov	r0, r4
     178:	bl	0 <free>
     17c:	ldr	r0, [sp, #80]	; 0x50
     180:	cmp	r0, #0
     184:	beq	18c <export_schema+0x114>
     188:	bl	0 <free>
     18c:	vmov.i32	q8, #0	; 0x00000000
     190:	mov	r0, #28
     194:	add	r1, r6, #16
     198:	vst1.64	{d16-d17}, [r6], r0
     19c:	vst1.32	{d16-d17}, [r6]
     1a0:	vst1.64	{d16-d17}, [r1]
     1a4:	mvn	r4, #0
     1a8:	mov	r0, r4
     1ac:	sub	sp, fp, #40	; 0x28
     1b0:	vpop	{d8}
     1b4:	add	sp, sp, #4
     1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1bc:	movw	r1, #0
     1c0:	add	r2, sp, #56	; 0x38
     1c4:	mov	r0, r5
     1c8:	movt	r1, #0
     1cc:	bl	0 <fb_scope_table_visit>
     1d0:	ldr	r4, [sp, #60]	; 0x3c
     1d4:	ldr	r6, [sp, #72]	; 0x48
     1d8:	movw	r3, #0
     1dc:	mov	r2, #8
     1e0:	movt	r3, #0
     1e4:	mov	r0, r6
     1e8:	mov	r1, r4
     1ec:	bl	0 <qsort>
     1f0:	ldr	r9, [sp, #52]	; 0x34
     1f4:	cmp	r4, #1
     1f8:	blt	278 <export_schema+0x200>
     1fc:	sub	r2, r4, #1
     200:	and	r0, r4, #3
     204:	mov	r1, #0
     208:	cmp	r2, #3
     20c:	bcc	25c <export_schema+0x1e4>
     210:	sub	r2, r4, r0
     214:	add	r3, r6, #16
     218:	mov	r1, #0
     21c:	ldr	r7, [r3, #-16]
     220:	add	r5, r1, #1
     224:	str	r1, [r7, #124]	; 0x7c
     228:	ldr	r7, [r3, #-8]
     22c:	str	r5, [r7, #124]	; 0x7c
     230:	add	r5, r1, #2
     234:	ldr	r7, [r3]
     238:	str	r5, [r7, #124]	; 0x7c
     23c:	add	r5, r1, #3
     240:	add	r1, r1, #4
     244:	ldr	r7, [r3, #8]
     248:	add	r3, r3, #32
     24c:	cmp	r2, r1
     250:	str	r5, [r7, #124]	; 0x7c
     254:	bne	21c <export_schema+0x1a4>
     258:	ldr	r9, [sp, #52]	; 0x34
     25c:	cmp	r0, #0
     260:	beq	278 <export_schema+0x200>
     264:	ldr	r2, [r6, r1, lsl #3]
     268:	subs	r0, r0, #1
     26c:	str	r1, [r2, #124]	; 0x7c
     270:	add	r1, r1, #1
     274:	bne	264 <export_schema+0x1ec>
     278:	ldr	r4, [sp, #64]	; 0x40
     27c:	ldr	r6, [sp, #76]	; 0x4c
     280:	movw	r3, #0
     284:	mov	r2, #8
     288:	movt	r3, #0
     28c:	mov	r0, r6
     290:	mov	r1, r4
     294:	bl	0 <qsort>
     298:	cmp	r4, #1
     29c:	blt	31c <export_schema+0x2a4>
     2a0:	sub	r2, r4, #1
     2a4:	and	r0, r4, #3
     2a8:	mov	r1, #0
     2ac:	cmp	r2, #3
     2b0:	bcc	300 <export_schema+0x288>
     2b4:	sub	r2, r4, r0
     2b8:	add	r3, r6, #16
     2bc:	mov	r1, #0
     2c0:	ldr	r7, [r3, #-16]
     2c4:	add	r5, r1, #1
     2c8:	str	r1, [r7, #124]	; 0x7c
     2cc:	ldr	r7, [r3, #-8]
     2d0:	str	r5, [r7, #124]	; 0x7c
     2d4:	add	r5, r1, #2
     2d8:	ldr	r7, [r3]
     2dc:	str	r5, [r7, #124]	; 0x7c
     2e0:	add	r5, r1, #3
     2e4:	add	r1, r1, #4
     2e8:	ldr	r7, [r3, #8]
     2ec:	add	r3, r3, #32
     2f0:	cmp	r2, r1
     2f4:	str	r5, [r7, #124]	; 0x7c
     2f8:	bne	2c0 <export_schema+0x248>
     2fc:	ldr	r9, [sp, #52]	; 0x34
     300:	cmp	r0, #0
     304:	beq	31c <export_schema+0x2a4>
     308:	ldr	r2, [r6, r1, lsl #3]
     30c:	subs	r0, r0, #1
     310:	str	r1, [r2, #124]	; 0x7c
     314:	add	r1, r1, #1
     318:	bne	308 <export_schema+0x290>
     31c:	ldr	r0, [sp, #60]	; 0x3c
     320:	cmp	r0, #1
     324:	blt	340 <export_schema+0x2c8>
     328:	lsl	r0, r0, #2
     32c:	bl	0 <malloc>
     330:	cmp	r0, #0
     334:	beq	de8 <export_schema+0xd70>
     338:	mov	r6, r0
     33c:	b	344 <export_schema+0x2cc>
     340:	mov	r6, #0
     344:	ldr	r0, [sp, #48]	; 0x30
     348:	movw	r1, #0
     34c:	mov	r2, #0
     350:	movt	r1, #0
     354:	ldr	r0, [r0, #188]	; 0xbc
     358:	cmp	r0, #0
     35c:	mov	r0, r9
     360:	moveq	r3, #0
     364:	movne	r3, #2
     368:	bl	0 <flatcc_builder_start_buffer>
     36c:	cmp	r0, #0
     370:	bne	380 <export_schema+0x308>
     374:	mov	r0, r9
     378:	mov	r1, #5
     37c:	bl	0 <flatcc_builder_start_table>
     380:	ldr	r1, [sp, #8]
     384:	ldrh	r0, [r1, #16]
     388:	cmp	r0, #2
     38c:	bne	3d0 <export_schema+0x358>
     390:	ldr	r0, [sp, #8]
     394:	ldrd	r2, [r0, #8]
     398:	mov	r0, r9
     39c:	mov	r1, r2
     3a0:	mov	r2, r3
     3a4:	bl	0 <flatcc_builder_create_string>
     3a8:	ldr	r1, [sp, #8]
     3ac:	cmp	r0, #0
     3b0:	beq	3d0 <export_schema+0x358>
     3b4:	mov	r4, r0
     3b8:	mov	r0, r9
     3bc:	mov	r1, #2
     3c0:	bl	0 <flatcc_builder_table_add_offset>
     3c4:	ldr	r1, [sp, #8]
     3c8:	cmp	r0, #0
     3cc:	strne	r4, [r0]
     3d0:	ldrh	r0, [r1, #32]
     3d4:	cmp	r0, #2
     3d8:	bne	414 <export_schema+0x39c>
     3dc:	ldr	r0, [sp, #8]
     3e0:	ldrd	r2, [r0, #24]
     3e4:	mov	r0, r9
     3e8:	mov	r1, r2
     3ec:	mov	r2, r3
     3f0:	bl	0 <flatcc_builder_create_string>
     3f4:	cmp	r0, #0
     3f8:	beq	414 <export_schema+0x39c>
     3fc:	mov	r4, r0
     400:	mov	r0, r9
     404:	mov	r1, #3
     408:	bl	0 <flatcc_builder_table_add_offset>
     40c:	cmp	r0, #0
     410:	strne	r4, [r0]
     414:	ldr	r0, [sp, #60]	; 0x3c
     418:	str	r6, [sp, #20]
     41c:	cmp	r0, #1
     420:	str	r0, [sp, #16]
     424:	blt	a3c <export_schema+0x9c4>
     428:	ldr	r0, [sp, #72]	; 0x48
     42c:	mov	r1, #0
     430:	str	r0, [sp, #12]
     434:	ldr	r4, [sp, #12]
     438:	str	r1, [sp, #24]
     43c:	mov	r0, r9
     440:	ldr	sl, [r4, r1, lsl #3]!
     444:	mov	r1, #5
     448:	bl	0 <flatcc_builder_start_table>
     44c:	ldr	r1, [r4, #4]
     450:	mov	r0, r9
     454:	bl	0 <flatcc_builder_create_string_str>
     458:	cmp	r0, #0
     45c:	beq	478 <export_schema+0x400>
     460:	mov	r7, r0
     464:	mov	r0, r9
     468:	mov	r1, #0
     46c:	bl	0 <flatcc_builder_table_add_offset>
     470:	cmp	r0, #0
     474:	strne	r7, [r0]
     478:	mov	r0, r9
     47c:	bl	0 <flatcc_builder_start_offset_vector>
     480:	ldr	r5, [sl, #20]
     484:	cmp	r5, #0
     488:	beq	958 <export_schema+0x8e0>
     48c:	mov	r7, #0
     490:	str	sl, [sp, #28]
     494:	b	4a8 <export_schema+0x430>
     498:	ldr	r5, [r5]
     49c:	orr	r7, r7, r8
     4a0:	cmp	r5, #0
     4a4:	beq	958 <export_schema+0x8e0>
     4a8:	mov	sl, r5
     4ac:	ldrh	r0, [sl, #24]!
     4b0:	ldrh	r6, [sl, #48]	; 0x30
     4b4:	sub	r4, sl, #8
     4b8:	cmp	r0, #14
     4bc:	ubfx	r1, r6, #2, #1
     4c0:	str	r1, [sp, #48]	; 0x30
     4c4:	ubfx	r1, r6, #8, #1
     4c8:	str	r1, [sp, #32]
     4cc:	add	r1, sl, #72	; 0x48
     4d0:	str	r1, [sp, #44]	; 0x2c
     4d4:	bne	63c <export_schema+0x5c4>
     4d8:	ldr	r0, [r4]
     4dc:	ldrh	r0, [r0, #8]
     4e0:	cmp	r0, #4
     4e4:	bne	63c <export_schema+0x5c4>
     4e8:	mov	r0, r9
     4ec:	mov	r1, #9
     4f0:	str	r4, [sp, #40]	; 0x28
     4f4:	mov	r8, r7
     4f8:	bl	0 <flatcc_builder_start_table>
     4fc:	mov	r0, r9
     500:	bl	0 <flatcc_builder_start_string>
     504:	ldr	r0, [r5, #4]
     508:	ldm	r0, {r1, r2}
     50c:	mov	r0, r9
     510:	bl	0 <flatcc_builder_append_string>
     514:	movw	r1, #0
     518:	mov	r0, r9
     51c:	mov	r2, #5
     520:	movt	r1, #0
     524:	bl	0 <flatcc_builder_append_string>
     528:	mov	r0, r9
     52c:	bl	0 <flatcc_builder_end_string>
     530:	cmp	r0, #0
     534:	beq	550 <export_schema+0x4d8>
     538:	mov	r7, r0
     53c:	mov	r0, r9
     540:	mov	r1, #0
     544:	bl	0 <flatcc_builder_table_add_offset>
     548:	cmp	r0, #0
     54c:	strne	r7, [r0]
     550:	mov	r0, r9
     554:	mov	r1, #3
     558:	bl	0 <flatcc_builder_start_table>
     55c:	cmp	r0, #0
     560:	beq	778 <export_schema+0x700>
     564:	ldr	r0, [sp, #44]	; 0x2c
     568:	mov	r1, #2
     56c:	ldrh	r0, [r0]
     570:	add	r7, r1, r0, lsl #1
     574:	movw	r0, #65535	; 0xffff
     578:	tst	r7, r0
     57c:	beq	59c <export_schema+0x524>
     580:	ldr	r0, [sp, #52]	; 0x34
     584:	mov	r1, #3
     588:	mov	r2, #2
     58c:	mov	r3, #2
     590:	bl	0 <flatcc_builder_table_add>
     594:	cmp	r0, #0
     598:	strhne	r7, [r0]
     59c:	ldr	r0, [sp, #44]	; 0x2c
     5a0:	mov	r7, r8
     5a4:	ldrh	r0, [r0]
     5a8:	sub	r9, r0, #1
     5ac:	movw	r0, #65535	; 0xffff
     5b0:	tst	r9, r0
     5b4:	beq	5d4 <export_schema+0x55c>
     5b8:	ldr	r0, [sp, #52]	; 0x34
     5bc:	mov	r1, #2
     5c0:	mov	r2, #2
     5c4:	mov	r3, #2
     5c8:	bl	0 <flatcc_builder_table_add>
     5cc:	cmp	r0, #0
     5d0:	strhne	r9, [r0]
     5d4:	ldr	r8, [sp, #48]	; 0x30
     5d8:	ldr	r9, [sp, #52]	; 0x34
     5dc:	cmp	r8, #0
     5e0:	beq	600 <export_schema+0x588>
     5e4:	mov	r0, r9
     5e8:	mov	r1, #6
     5ec:	mov	r2, #1
     5f0:	mov	r3, #1
     5f4:	bl	0 <flatcc_builder_table_add>
     5f8:	cmp	r0, #0
     5fc:	strbne	r8, [r0]
     600:	movw	r1, #0
     604:	mov	r0, r9
     608:	mov	r2, #2
     60c:	movt	r1, #0
     610:	bl	0 <flatcc_builder_check_required>
     614:	cmp	r0, #0
     618:	beq	e38 <export_schema+0xdc0>
     61c:	mov	r0, r9
     620:	bl	0 <flatcc_builder_end_table>
     624:	ldr	r4, [sp, #40]	; 0x28
     628:	cmp	r0, #0
     62c:	beq	63c <export_schema+0x5c4>
     630:	mov	r1, r0
     634:	mov	r0, r9
     638:	bl	0 <flatcc_builder_offset_vector_push>
     63c:	uxtb	r0, r7
     640:	mov	r1, #9
     644:	str	r7, [sp, #40]	; 0x28
     648:	clz	r8, r0
     64c:	mov	r0, r9
     650:	bl	0 <flatcc_builder_start_table>
     654:	ldr	r0, [r5, #4]
     658:	str	r5, [sp, #36]	; 0x24
     65c:	ldm	r0, {r1, r2}
     660:	mov	r0, r9
     664:	bl	0 <flatcc_builder_create_string>
     668:	cmp	r0, #0
     66c:	beq	688 <export_schema+0x610>
     670:	mov	r7, r0
     674:	mov	r0, r9
     678:	mov	r1, #0
     67c:	bl	0 <flatcc_builder_table_add_offset>
     680:	cmp	r0, #0
     684:	strne	r7, [r0]
     688:	lsr	r5, r8, #5
     68c:	ldrd	r2, [r4]
     690:	ldr	r8, [sl]
     694:	ldr	r1, [sl, #4]
     698:	mov	r0, r9
     69c:	uxtb	r6, r6
     6a0:	str	r8, [sp]
     6a4:	str	r1, [sp, #4]
     6a8:	bl	151c <export_type>
     6ac:	cmp	r0, #0
     6b0:	beq	6cc <export_schema+0x654>
     6b4:	mov	r7, r0
     6b8:	ldr	r0, [sp, #52]	; 0x34
     6bc:	mov	r1, #1
     6c0:	bl	0 <flatcc_builder_table_add_offset>
     6c4:	cmp	r0, #0
     6c8:	strne	r7, [r0]
     6cc:	add	r0, sl, #24
     6d0:	ldr	sl, [sp, #28]
     6d4:	and	r8, r5, r6, lsr #7
     6d8:	ldrh	r1, [sl, #8]
     6dc:	cmp	r1, #1
     6e0:	beq	734 <export_schema+0x6bc>
     6e4:	ldr	r9, [sp, #52]	; 0x34
     6e8:	ldr	r7, [sp, #40]	; 0x28
     6ec:	ldr	r5, [sp, #36]	; 0x24
     6f0:	ldr	r6, [sp, #48]	; 0x30
     6f4:	cmp	r1, #0
     6f8:	bne	8f8 <export_schema+0x880>
     6fc:	ldrh	r1, [r5, #56]	; 0x38
     700:	sub	r1, r1, #3
     704:	cmp	r1, #3
     708:	bhi	840 <export_schema+0x7c8>
     70c:	add	r2, pc, #0
     710:	ldr	pc, [r2, r1, lsl #2]
     714:	.word	0x000007e4
     718:	.word	0x00000724
     71c:	.word	0x00000724
     720:	.word	0x00000814
     724:	ldm	r0, {r4, r9}
     728:	orrs	r0, r4, r9
     72c:	bne	824 <export_schema+0x7ac>
     730:	b	840 <export_schema+0x7c8>
     734:	ldrh	r4, [r0, #32]
     738:	ldr	r9, [sp, #52]	; 0x34
     73c:	ldr	r7, [sp, #40]	; 0x28
     740:	ldr	r5, [sp, #36]	; 0x24
     744:	ldr	r6, [sp, #48]	; 0x30
     748:	cmp	r4, #0
     74c:	beq	8f8 <export_schema+0x880>
     750:	mov	r0, r9
     754:	mov	r1, #3
     758:	mov	r2, #2
     75c:	mov	r3, #2
     760:	bl	0 <flatcc_builder_table_add>
     764:	cmp	r0, #0
     768:	strhne	r4, [r0]
     76c:	cmp	r6, #0
     770:	bne	900 <export_schema+0x888>
     774:	b	91c <export_schema+0x8a4>
     778:	mov	r0, r9
     77c:	mov	r1, #0
     780:	mov	r2, #1
     784:	mov	r3, #1
     788:	bl	0 <flatcc_builder_table_add>
     78c:	cmp	r0, #0
     790:	beq	564 <export_schema+0x4ec>
     794:	mov	r1, #1
     798:	mov	r2, #0
     79c:	strb	r1, [r0]
     7a0:	movw	r1, #0
     7a4:	mov	r0, r9
     7a8:	movt	r1, #0
     7ac:	bl	0 <flatcc_builder_check_required>
     7b0:	cmp	r0, #0
     7b4:	beq	e78 <export_schema+0xe00>
     7b8:	mov	r0, r9
     7bc:	bl	0 <flatcc_builder_end_table>
     7c0:	cmp	r0, #0
     7c4:	beq	564 <export_schema+0x4ec>
     7c8:	mov	r7, r0
     7cc:	mov	r0, r9
     7d0:	mov	r1, #1
     7d4:	bl	0 <flatcc_builder_table_add_offset>
     7d8:	cmp	r0, #0
     7dc:	strne	r7, [r0]
     7e0:	b	564 <export_schema+0x4ec>
     7e4:	vldr	d8, [r0]
     7e8:	vcmp.f64	d8, #0.0
     7ec:	vmrs	APSR_nzcv, fpscr
     7f0:	beq	840 <export_schema+0x7c8>
     7f4:	ldr	r0, [sp, #52]	; 0x34
     7f8:	mov	r1, #5
     7fc:	mov	r2, #8
     800:	mov	r3, #8
     804:	bl	0 <flatcc_builder_table_add>
     808:	cmp	r0, #0
     80c:	vstrne	d8, [r0]
     810:	b	840 <export_schema+0x7c8>
     814:	ldrb	r4, [r0]
     818:	mov	r9, #0
     81c:	orrs	r0, r4, r9
     820:	beq	840 <export_schema+0x7c8>
     824:	ldr	r0, [sp, #52]	; 0x34
     828:	mov	r1, #4
     82c:	mov	r2, #8
     830:	mov	r3, #8
     834:	bl	0 <flatcc_builder_table_add>
     838:	cmp	r0, #0
     83c:	stmne	r0, {r4, r9}
     840:	ldr	r0, [sp, #44]	; 0x2c
     844:	ldr	r9, [sp, #52]	; 0x34
     848:	ldrh	r4, [r0]
     84c:	cmp	r4, #0
     850:	beq	870 <export_schema+0x7f8>
     854:	mov	r0, r9
     858:	mov	r1, #2
     85c:	mov	r2, #2
     860:	mov	r3, #2
     864:	bl	0 <flatcc_builder_table_add>
     868:	cmp	r0, #0
     86c:	strhne	r4, [r0]
     870:	ldr	r0, [sp, #44]	; 0x2c
     874:	mov	r1, #4
     878:	ldrh	r0, [r0]
     87c:	add	r4, r1, r0, lsl #1
     880:	movw	r0, #65535	; 0xffff
     884:	tst	r4, r0
     888:	beq	8a8 <export_schema+0x830>
     88c:	mov	r0, r9
     890:	mov	r1, #3
     894:	mov	r2, #2
     898:	mov	r3, #2
     89c:	bl	0 <flatcc_builder_table_add>
     8a0:	cmp	r0, #0
     8a4:	strhne	r4, [r0]
     8a8:	cmp	r8, #0
     8ac:	beq	8cc <export_schema+0x854>
     8b0:	mov	r0, r9
     8b4:	mov	r1, #8
     8b8:	mov	r2, #1
     8bc:	mov	r3, #1
     8c0:	bl	0 <flatcc_builder_table_add>
     8c4:	cmp	r0, #0
     8c8:	strbne	r8, [r0]
     8cc:	ldr	r0, [sp, #32]
     8d0:	cmp	r0, #0
     8d4:	beq	8f8 <export_schema+0x880>
     8d8:	mov	r0, r9
     8dc:	mov	r1, #7
     8e0:	mov	r2, #1
     8e4:	mov	r3, #1
     8e8:	bl	0 <flatcc_builder_table_add>
     8ec:	cmp	r0, #0
     8f0:	ldrne	r1, [sp, #32]
     8f4:	strbne	r1, [r0]
     8f8:	cmp	r6, #0
     8fc:	beq	91c <export_schema+0x8a4>
     900:	mov	r0, r9
     904:	mov	r1, #6
     908:	mov	r2, #1
     90c:	mov	r3, #1
     910:	bl	0 <flatcc_builder_table_add>
     914:	cmp	r0, #0
     918:	strbne	r6, [r0]
     91c:	movw	r1, #0
     920:	mov	r0, r9
     924:	mov	r2, #2
     928:	movt	r1, #0
     92c:	bl	0 <flatcc_builder_check_required>
     930:	cmp	r0, #0
     934:	beq	e38 <export_schema+0xdc0>
     938:	mov	r0, r9
     93c:	bl	0 <flatcc_builder_end_table>
     940:	cmp	r0, #0
     944:	beq	498 <export_schema+0x420>
     948:	mov	r1, r0
     94c:	mov	r0, r9
     950:	bl	0 <flatcc_builder_offset_vector_push>
     954:	b	498 <export_schema+0x420>
     958:	mov	r0, r9
     95c:	bl	0 <flatcc_builder_end_offset_vector>
     960:	cmp	r0, #0
     964:	beq	980 <export_schema+0x908>
     968:	mov	r7, r0
     96c:	mov	r0, r9
     970:	mov	r1, #1
     974:	bl	0 <flatcc_builder_table_add_offset>
     978:	cmp	r0, #0
     97c:	strne	r7, [r0]
     980:	ldrh	r0, [sl, #8]
     984:	ldr	r6, [sp, #20]
     988:	cmp	r0, #1
     98c:	bne	9d8 <export_schema+0x960>
     990:	ldr	r4, [sl, #112]	; 0x70
     994:	cmp	r4, #0
     998:	beq	9b8 <export_schema+0x940>
     99c:	mov	r0, r9
     9a0:	mov	r1, #4
     9a4:	mov	r2, #4
     9a8:	mov	r3, #4
     9ac:	bl	0 <flatcc_builder_table_add>
     9b0:	cmp	r0, #0
     9b4:	strne	r4, [r0]
     9b8:	mov	r0, r9
     9bc:	mov	r1, #2
     9c0:	mov	r2, #1
     9c4:	mov	r3, #1
     9c8:	bl	0 <flatcc_builder_table_add>
     9cc:	cmp	r0, #0
     9d0:	movne	r1, #1
     9d4:	strbne	r1, [r0]
     9d8:	ldrh	r4, [sl, #104]	; 0x68
     9dc:	cmp	r4, #0
     9e0:	beq	a00 <export_schema+0x988>
     9e4:	mov	r0, r9
     9e8:	mov	r1, #3
     9ec:	mov	r2, #4
     9f0:	mov	r3, #4
     9f4:	bl	0 <flatcc_builder_table_add>
     9f8:	cmp	r0, #0
     9fc:	strne	r4, [r0]
     a00:	movw	r1, #0
     a04:	mov	r0, r9
     a08:	mov	r2, #2
     a0c:	movt	r1, #0
     a10:	bl	0 <flatcc_builder_check_required>
     a14:	cmp	r0, #0
     a18:	beq	e98 <export_schema+0xe20>
     a1c:	mov	r0, r9
     a20:	bl	0 <flatcc_builder_end_table>
     a24:	ldr	r1, [sp, #24]
     a28:	str	r0, [r6, r1, lsl #2]
     a2c:	ldr	r0, [sp, #16]
     a30:	add	r1, r1, #1
     a34:	cmp	r1, r0
     a38:	bne	434 <export_schema+0x3bc>
     a3c:	ldr	r2, [sp, #16]
     a40:	mov	r0, r9
     a44:	mov	r1, r6
     a48:	bl	0 <flatcc_builder_create_offset_vector>
     a4c:	cmp	r0, #0
     a50:	beq	a6c <export_schema+0x9f4>
     a54:	mov	r4, r0
     a58:	mov	r0, r9
     a5c:	mov	r1, #0
     a60:	bl	0 <flatcc_builder_table_add_offset>
     a64:	cmp	r0, #0
     a68:	strne	r4, [r0]
     a6c:	ldr	r0, [sp, #76]	; 0x4c
     a70:	ldr	r4, [sp, #64]	; 0x40
     a74:	str	r0, [sp, #40]	; 0x28
     a78:	mov	r0, r9
     a7c:	bl	0 <flatcc_builder_start_offset_vector>
     a80:	cmp	r4, #1
     a84:	str	r4, [sp, #44]	; 0x2c
     a88:	blt	ce4 <export_schema+0xc6c>
     a8c:	movw	r6, #0
     a90:	mov	r4, #0
     a94:	movt	r6, #0
     a98:	b	aac <export_schema+0xa34>
     a9c:	ldr	r0, [sp, #44]	; 0x2c
     aa0:	add	r4, r4, #1
     aa4:	cmp	r4, r0
     aa8:	beq	ce4 <export_schema+0xc6c>
     aac:	ldr	r5, [sp, #40]	; 0x28
     ab0:	mov	r1, #4
     ab4:	ldr	r8, [r5, r4, lsl #3]!
     ab8:	ldrh	r0, [r8, #8]
     abc:	str	r0, [sp, #48]	; 0x30
     ac0:	ldr	r0, [sp, #52]	; 0x34
     ac4:	bl	0 <flatcc_builder_start_table>
     ac8:	ldr	r1, [r5, #4]
     acc:	ldr	r5, [sp, #52]	; 0x34
     ad0:	mov	r0, r5
     ad4:	bl	0 <flatcc_builder_create_string_str>
     ad8:	cmp	r0, #0
     adc:	beq	af8 <export_schema+0xa80>
     ae0:	mov	r7, r0
     ae4:	mov	r0, r5
     ae8:	mov	r1, #0
     aec:	bl	0 <flatcc_builder_table_add_offset>
     af0:	cmp	r0, #0
     af4:	strne	r7, [r0]
     af8:	mov	r0, r5
     afc:	bl	0 <flatcc_builder_start_offset_vector>
     b00:	ldr	sl, [r8, #20]
     b04:	cmp	sl, #0
     b08:	beq	c10 <export_schema+0xb98>
     b0c:	ldr	r0, [sp, #48]	; 0x30
     b10:	mov	r9, #0
     b14:	cmp	r0, #4
     b18:	ldr	r0, [sp, #20]
     b1c:	moveq	r9, r0
     b20:	b	b30 <export_schema+0xab8>
     b24:	ldr	sl, [sl]
     b28:	cmp	sl, #0
     b2c:	beq	c10 <export_schema+0xb98>
     b30:	mov	r0, r5
     b34:	mov	r1, #3
     b38:	bl	0 <flatcc_builder_start_table>
     b3c:	ldr	r0, [sl, #4]
     b40:	ldm	r0, {r1, r2}
     b44:	mov	r0, r5
     b48:	bl	0 <flatcc_builder_create_string>
     b4c:	cmp	r0, #0
     b50:	beq	b6c <export_schema+0xaf4>
     b54:	mov	r7, r0
     b58:	mov	r0, r5
     b5c:	mov	r1, #0
     b60:	bl	0 <flatcc_builder_table_add_offset>
     b64:	cmp	r0, #0
     b68:	strne	r7, [r0]
     b6c:	cmp	r9, #0
     b70:	beq	ba8 <export_schema+0xb30>
     b74:	ldrh	r0, [sl, #24]
     b78:	cmp	r0, #14
     b7c:	bne	ba8 <export_schema+0xb30>
     b80:	ldr	r0, [sl, #16]
     b84:	ldr	r0, [r0, #124]	; 0x7c
     b88:	ldr	r5, [r9, r0, lsl #2]
     b8c:	cmp	r5, #0
     b90:	beq	ba8 <export_schema+0xb30>
     b94:	ldr	r0, [sp, #52]	; 0x34
     b98:	mov	r1, #2
     b9c:	bl	0 <flatcc_builder_table_add_offset>
     ba0:	cmp	r0, #0
     ba4:	strne	r5, [r0]
     ba8:	ldr	r5, [sl, #48]	; 0x30
     bac:	ldr	r7, [sl, #52]	; 0x34
     bb0:	orrs	r0, r5, r7
     bb4:	beq	bd4 <export_schema+0xb5c>
     bb8:	ldr	r0, [sp, #52]	; 0x34
     bbc:	mov	r1, #1
     bc0:	mov	r2, #8
     bc4:	mov	r3, #8
     bc8:	bl	0 <flatcc_builder_table_add>
     bcc:	cmp	r0, #0
     bd0:	stmne	r0, {r5, r7}
     bd4:	ldr	r5, [sp, #52]	; 0x34
     bd8:	mov	r1, r6
     bdc:	mov	r2, #1
     be0:	mov	r0, r5
     be4:	bl	0 <flatcc_builder_check_required>
     be8:	cmp	r0, #0
     bec:	beq	e58 <export_schema+0xde0>
     bf0:	mov	r0, r5
     bf4:	bl	0 <flatcc_builder_end_table>
     bf8:	cmp	r0, #0
     bfc:	beq	b24 <export_schema+0xaac>
     c00:	mov	r1, r0
     c04:	mov	r0, r5
     c08:	bl	0 <flatcc_builder_offset_vector_push>
     c0c:	b	b24 <export_schema+0xaac>
     c10:	mov	r0, r5
     c14:	bl	0 <flatcc_builder_end_offset_vector>
     c18:	cmp	r0, #0
     c1c:	beq	c38 <export_schema+0xbc0>
     c20:	mov	r7, r0
     c24:	mov	r0, r5
     c28:	mov	r1, #1
     c2c:	bl	0 <flatcc_builder_table_add_offset>
     c30:	cmp	r0, #0
     c34:	strne	r7, [r0]
     c38:	ldr	r0, [sp, #48]	; 0x30
     c3c:	add	r5, r8, #40	; 0x28
     c40:	subs	r7, r0, #4
     c44:	bne	c6c <export_schema+0xbf4>
     c48:	ldr	r0, [sp, #52]	; 0x34
     c4c:	mov	r1, #2
     c50:	mov	r2, #1
     c54:	mov	r3, #1
     c58:	bl	0 <flatcc_builder_table_add>
     c5c:	cmp	r0, #0
     c60:	clzne	r1, r7
     c64:	lsrne	r1, r1, #5
     c68:	strbne	r1, [r0]
     c6c:	ldr	r0, [r5, #8]
     c70:	ldr	r9, [sp, #52]	; 0x34
     c74:	ldm	r5, {r2, r3}
     c78:	ldr	r1, [r5, #12]
     c7c:	stm	sp, {r0, r1}
     c80:	mov	r0, r9
     c84:	bl	151c <export_type>
     c88:	cmp	r0, #0
     c8c:	beq	ca8 <export_schema+0xc30>
     c90:	mov	r7, r0
     c94:	mov	r0, r9
     c98:	mov	r1, #3
     c9c:	bl	0 <flatcc_builder_table_add_offset>
     ca0:	cmp	r0, #0
     ca4:	strne	r7, [r0]
     ca8:	movw	r1, #0
     cac:	mov	r0, r9
     cb0:	mov	r2, #3
     cb4:	movt	r1, #0
     cb8:	bl	0 <flatcc_builder_check_required>
     cbc:	cmp	r0, #0
     cc0:	beq	eb8 <export_schema+0xe40>
     cc4:	mov	r0, r9
     cc8:	bl	0 <flatcc_builder_end_table>
     ccc:	cmp	r0, #0
     cd0:	beq	a9c <export_schema+0xa24>
     cd4:	mov	r1, r0
     cd8:	mov	r0, r9
     cdc:	bl	0 <flatcc_builder_offset_vector_push>
     ce0:	b	a9c <export_schema+0xa24>
     ce4:	mov	r0, r9
     ce8:	bl	0 <flatcc_builder_end_offset_vector>
     cec:	cmp	r0, #0
     cf0:	beq	d0c <export_schema+0xc94>
     cf4:	mov	r4, r0
     cf8:	mov	r0, r9
     cfc:	mov	r1, #1
     d00:	bl	0 <flatcc_builder_table_add_offset>
     d04:	cmp	r0, #0
     d08:	strne	r4, [r0]
     d0c:	ldr	r0, [sp, #8]
     d10:	ldr	r6, [sp, #20]
     d14:	ldr	r0, [r0, #52]	; 0x34
     d18:	cmp	r0, #0
     d1c:	beq	d50 <export_schema+0xcd8>
     d20:	ldrh	r1, [r0, #8]
     d24:	cmp	r1, #0
     d28:	bne	d50 <export_schema+0xcd8>
     d2c:	ldr	r0, [r0, #124]	; 0x7c
     d30:	ldr	r4, [r6, r0, lsl #2]
     d34:	cmp	r4, #0
     d38:	beq	d50 <export_schema+0xcd8>
     d3c:	mov	r0, r9
     d40:	mov	r1, #4
     d44:	bl	0 <flatcc_builder_table_add_offset>
     d48:	cmp	r0, #0
     d4c:	strne	r4, [r0]
     d50:	movw	r1, #0
     d54:	mov	r0, r9
     d58:	mov	r2, #2
     d5c:	movt	r1, #0
     d60:	bl	0 <flatcc_builder_check_required>
     d64:	cmp	r0, #0
     d68:	beq	ed8 <export_schema+0xe60>
     d6c:	mov	r0, r9
     d70:	bl	0 <flatcc_builder_end_table>
     d74:	mov	r1, r0
     d78:	mov	r0, r9
     d7c:	bl	0 <flatcc_builder_end_buffer>
     d80:	ldr	r0, [sp, #72]	; 0x48
     d84:	cmp	r0, #0
     d88:	beq	d90 <export_schema+0xd18>
     d8c:	bl	0 <free>
     d90:	ldr	r0, [sp, #76]	; 0x4c
     d94:	cmp	r0, #0
     d98:	beq	da0 <export_schema+0xd28>
     d9c:	bl	0 <free>
     da0:	ldr	r0, [sp, #80]	; 0x50
     da4:	cmp	r0, #0
     da8:	beq	db0 <export_schema+0xd38>
     dac:	bl	0 <free>
     db0:	vmov.i32	q8, #0	; 0x00000000
     db4:	add	r1, sp, #56	; 0x38
     db8:	mov	r0, #28
     dbc:	mov	r4, #0
     dc0:	cmp	r6, #0
     dc4:	mov	r2, r1
     dc8:	add	r1, r1, #16
     dcc:	vst1.64	{d16-d17}, [r2], r0
     dd0:	vst1.32	{d16-d17}, [r2]
     dd4:	vst1.64	{d16-d17}, [r1]
     dd8:	beq	1a8 <export_schema+0x130>
     ddc:	mov	r0, r6
     de0:	bl	0 <free>
     de4:	b	1a8 <export_schema+0x130>
     de8:	ldr	r0, [sp, #72]	; 0x48
     dec:	cmp	r0, #0
     df0:	beq	df8 <export_schema+0xd80>
     df4:	bl	0 <free>
     df8:	ldr	r0, [sp, #76]	; 0x4c
     dfc:	cmp	r0, #0
     e00:	beq	e08 <export_schema+0xd90>
     e04:	bl	0 <free>
     e08:	ldr	r0, [sp, #80]	; 0x50
     e0c:	cmp	r0, #0
     e10:	beq	e18 <export_schema+0xda0>
     e14:	bl	0 <free>
     e18:	vmov.i32	q8, #0	; 0x00000000
     e1c:	add	r1, sp, #56	; 0x38
     e20:	mov	r0, #28
     e24:	mov	r2, r1
     e28:	add	r1, r1, #16
     e2c:	vst1.64	{d16-d17}, [r2], r0
     e30:	vst1.32	{d16-d17}, [r2]
     e34:	b	1a0 <export_schema+0x128>
     e38:	movw	r0, #0
     e3c:	movw	r1, #0
     e40:	movw	r3, #0
     e44:	mov	r2, #29
     e48:	movt	r0, #0
     e4c:	movt	r1, #0
     e50:	movt	r3, #0
     e54:	bl	0 <__assert_fail>
     e58:	movw	r0, #0
     e5c:	movw	r1, #0
     e60:	movw	r3, #0
     e64:	mov	r2, #25
     e68:	movt	r0, #0
     e6c:	movt	r1, #0
     e70:	movt	r3, #0
     e74:	bl	0 <__assert_fail>
     e78:	movw	r0, #0
     e7c:	movw	r1, #0
     e80:	movw	r3, #0
     e84:	mov	r2, #23
     e88:	movt	r0, #0
     e8c:	movt	r1, #0
     e90:	movt	r3, #0
     e94:	bl	0 <__assert_fail>
     e98:	movw	r0, #0
     e9c:	movw	r1, #0
     ea0:	movw	r3, #0
     ea4:	mov	r2, #31
     ea8:	movt	r0, #0
     eac:	movt	r1, #0
     eb0:	movt	r3, #0
     eb4:	bl	0 <__assert_fail>
     eb8:	movw	r0, #0
     ebc:	movw	r1, #0
     ec0:	movw	r3, #0
     ec4:	mov	r2, #27
     ec8:	movt	r0, #0
     ecc:	movt	r1, #0
     ed0:	movt	r3, #0
     ed4:	bl	0 <__assert_fail>
     ed8:	movw	r0, #0
     edc:	movw	r1, #0
     ee0:	movw	r3, #0
     ee4:	mov	r2, #33	; 0x21
     ee8:	movt	r0, #0
     eec:	movt	r1, #0
     ef0:	movt	r3, #0
     ef4:	bl	0 <__assert_fail>

00000ef8 <sort_fields>:
     ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     efc:	add	fp, sp, #28
     f00:	sub	sp, sp, #12
     f04:	cmp	r0, #0
     f08:	beq	108c <sort_fields+0x194>
     f0c:	ldr	r1, [r0, #4]
     f10:	movw	r2, #17986	; 0x4642
     f14:	movt	r2, #21314	; 0x5342
     f18:	cmp	r1, r2
     f1c:	bne	108c <sort_fields+0x194>
     f20:	ldr	r1, [r0]
     f24:	ldr	r2, [r0, r1]!
     f28:	mov	r1, r0
     f2c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     f30:	cmp	r2, #5
     f34:	bls	1098 <sort_fields+0x1a0>
     f38:	ldrh	r1, [r1, #4]
     f3c:	cmp	r1, #0
     f40:	beq	1098 <sort_fields+0x1a0>
     f44:	ldr	r1, [r0, r1]!
     f48:	ldr	r1, [r0, r1]!
     f4c:	cmp	r1, #0
     f50:	beq	1064 <sort_fields+0x16c>
     f54:	add	r1, r0, #4
     f58:	mov	r2, #0
     f5c:	str	r1, [sp, #8]
     f60:	str	r1, [sp]
     f64:	b	f8c <sort_fields+0x94>
     f68:	ldr	r0, [sp, #8]
     f6c:	ldr	r1, [sp]
     f70:	ldr	r2, [sp, #4]
     f74:	add	r0, r0, #4
     f78:	add	r2, r2, #1
     f7c:	str	r0, [sp, #8]
     f80:	ldr	r0, [r1, #-4]
     f84:	cmp	r2, r0
     f88:	bcs	1064 <sort_fields+0x16c>
     f8c:	mov	r0, r1
     f90:	str	r2, [sp, #4]
     f94:	ldr	r7, [r0, r2, lsl #2]!
     f98:	ldr	r2, [r0, r7]!
     f9c:	mov	r1, r0
     fa0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     fa4:	cmp	r2, #8
     fa8:	bcc	106c <sort_fields+0x174>
     fac:	ldrh	r9, [r1, #6]
     fb0:	cmp	r9, #0
     fb4:	beq	106c <sort_fields+0x174>
     fb8:	ldr	r8, [r0, r9]!
     fbc:	ldr	sl, [r0, r8]!
     fc0:	cmp	sl, #0
     fc4:	beq	f68 <sort_fields+0x70>
     fc8:	add	r4, r0, #4
     fcc:	lsr	r6, sl, #1
     fd0:	sub	r5, sl, #1
     fd4:	mov	r0, r4
     fd8:	mov	r1, r6
     fdc:	mov	r2, r5
     fe0:	bl	17ec <__reflection_Field_sort_by_name__heap_sift_down>
     fe4:	sub	r6, r6, #1
     fe8:	cmn	r6, #1
     fec:	bne	fd4 <sort_fields+0xdc>
     ff0:	cmp	r5, #0
     ff4:	beq	f68 <sort_fields+0x70>
     ff8:	mvn	r0, #3
     ffc:	mov	r1, r8
    1000:	sub	r5, sl, #2
    1004:	add	r6, r0, sl, lsl #2
    1008:	mov	r0, #4
    100c:	sub	r8, r0, sl, lsl #2
    1010:	add	r0, r1, r7
    1014:	ldr	r1, [sp, #8]
    1018:	add	r0, r0, sl, lsl #2
    101c:	add	r0, r0, r9
    1020:	add	r7, r1, r0
    1024:	ldr	r0, [r7]
    1028:	ldr	r1, [r4]
    102c:	mov	r2, r5
    1030:	add	r0, r6, r0
    1034:	str	r0, [r4]
    1038:	add	r0, r8, r1
    103c:	mov	r1, #0
    1040:	str	r0, [r7], #-4
    1044:	mov	r0, r4
    1048:	bl	17ec <__reflection_Field_sort_by_name__heap_sift_down>
    104c:	sub	r5, r5, #1
    1050:	sub	r6, r6, #4
    1054:	add	r8, r8, #4
    1058:	cmn	r5, #1
    105c:	bne	1024 <sort_fields+0x12c>
    1060:	b	f68 <sort_fields+0x70>
    1064:	sub	sp, fp, #28
    1068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    106c:	movw	r0, #0
    1070:	movw	r1, #0
    1074:	movw	r3, #0
    1078:	mov	r2, #224	; 0xe0
    107c:	movt	r0, #0
    1080:	movt	r1, #0
    1084:	movt	r3, #0
    1088:	bl	0 <__assert_fail>
    108c:	movw	r0, #0
    1090:	movt	r0, #0
    1094:	b	10a0 <sort_fields+0x1a8>
    1098:	movw	r0, #0
    109c:	movt	r0, #0
    10a0:	movw	r1, #0
    10a4:	movw	r3, #0
    10a8:	mov	r2, #237	; 0xed
    10ac:	movt	r1, #0
    10b0:	movt	r3, #0
    10b4:	bl	0 <__assert_fail>

000010b8 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
    10b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    10bc:	add	fp, sp, #24
    10c0:	sub	sp, sp, #232	; 0xe8
    10c4:	mov	r7, sp
    10c8:	mov	r6, r0
    10cc:	mov	r5, r2
    10d0:	mov	r4, r1
    10d4:	mov	r0, r7
    10d8:	bl	0 <flatcc_builder_init>
    10dc:	mov	r0, r7
    10e0:	mov	r1, r6
    10e4:	mov	r2, r4
    10e8:	bl	78 <export_schema>
    10ec:	mov	r4, #0
    10f0:	cmp	r0, #0
    10f4:	bne	1118 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x60>
    10f8:	mov	r0, sp
    10fc:	mov	r1, r5
    1100:	bl	0 <flatcc_builder_finalize_buffer>
    1104:	cmp	r0, #0
    1108:	beq	1118 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x60>
    110c:	mov	r5, r0
    1110:	bl	ef8 <sort_fields>
    1114:	mov	r4, r5
    1118:	mov	r0, sp
    111c:	bl	0 <flatcc_builder_clear>
    1120:	mov	r0, r4
    1124:	sub	sp, fp, #24
    1128:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000112c <__flatcc_fb_codegen_bfbs_to_file>:
    112c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1130:	add	fp, sp, #24
    1134:	sub	sp, sp, #248	; 0xf8
    1138:	mov	r6, r0
    113c:	mov	r8, r1
    1140:	ldr	r0, [r0, #108]	; 0x6c
    1144:	movw	r9, #0
    1148:	movw	r4, #0
    114c:	ldr	r1, [r6, #216]	; 0xd8
    1150:	movt	r9, #0
    1154:	movt	r4, #0
    1158:	cmp	r1, #0
    115c:	movne	r4, r1
    1160:	cmp	r0, #0
    1164:	beq	11fc <__flatcc_fb_codegen_bfbs_to_file+0xd0>
    1168:	ldr	r4, [r9]
    116c:	cmp	r4, #0
    1170:	beq	1270 <__flatcc_fb_codegen_bfbs_to_file+0x144>
    1174:	add	r5, sp, #12
    1178:	mov	r0, r5
    117c:	bl	0 <flatcc_builder_init>
    1180:	mov	r0, r5
    1184:	mov	r1, r6
    1188:	mov	r2, r8
    118c:	bl	78 <export_schema>
    1190:	mov	r5, #0
    1194:	cmp	r0, #0
    1198:	bne	11bc <__flatcc_fb_codegen_bfbs_to_file+0x90>
    119c:	add	r0, sp, #12
    11a0:	add	r1, sp, #8
    11a4:	bl	0 <flatcc_builder_finalize_buffer>
    11a8:	cmp	r0, #0
    11ac:	beq	11bc <__flatcc_fb_codegen_bfbs_to_file+0x90>
    11b0:	mov	r6, r0
    11b4:	bl	ef8 <sort_fields>
    11b8:	mov	r5, r6
    11bc:	add	r0, sp, #12
    11c0:	bl	0 <flatcc_builder_clear>
    11c4:	cmp	r5, #0
    11c8:	beq	1278 <__flatcc_fb_codegen_bfbs_to_file+0x14c>
    11cc:	ldr	r7, [sp, #8]
    11d0:	mov	r0, r5
    11d4:	mov	r1, #1
    11d8:	mov	r3, r4
    11dc:	mov	r2, r7
    11e0:	bl	0 <fwrite>
    11e4:	mov	r6, #0
    11e8:	cmp	r7, r0
    11ec:	bne	12a8 <__flatcc_fb_codegen_bfbs_to_file+0x17c>
    11f0:	mov	r0, r5
    11f4:	bl	0 <free>
    11f8:	b	1288 <__flatcc_fb_codegen_bfbs_to_file+0x15c>
    11fc:	ldr	r7, [r8, #160]	; 0xa0
    1200:	mov	r0, r7
    1204:	bl	0 <strlen>
    1208:	mov	r5, r0
    120c:	mov	r0, r4
    1210:	bl	0 <strlen>
    1214:	movw	r2, #0
    1218:	mov	r1, r0
    121c:	mov	r0, #1
    1220:	mov	r3, r5
    1224:	movt	r2, #0
    1228:	str	r0, [sp, #4]
    122c:	mov	r0, r4
    1230:	str	r2, [sp]
    1234:	mov	r2, r7
    1238:	bl	0 <__flatcc_fb_create_join_path_n>
    123c:	cmp	r0, #0
    1240:	beq	12f0 <__flatcc_fb_codegen_bfbs_to_file+0x1c4>
    1244:	movw	r1, #0
    1248:	mov	r7, r0
    124c:	movt	r1, #0
    1250:	bl	0 <fopen>
    1254:	mov	r4, r0
    1258:	cmp	r0, #0
    125c:	beq	12d0 <__flatcc_fb_codegen_bfbs_to_file+0x1a4>
    1260:	mov	r0, r7
    1264:	bl	0 <free>
    1268:	cmp	r4, #0
    126c:	bne	1174 <__flatcc_fb_codegen_bfbs_to_file+0x48>
    1270:	mvn	r6, #0
    1274:	b	129c <__flatcc_fb_codegen_bfbs_to_file+0x170>
    1278:	movw	r0, #0
    127c:	movt	r0, #0
    1280:	bl	0 <puts>
    1284:	mvn	r6, #0
    1288:	ldr	r0, [r9]
    128c:	cmp	r0, r4
    1290:	beq	129c <__flatcc_fb_codegen_bfbs_to_file+0x170>
    1294:	mov	r0, r4
    1298:	bl	0 <fclose>
    129c:	mov	r0, r6
    12a0:	sub	sp, fp, #24
    12a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    12a8:	movw	r0, #0
    12ac:	mov	r1, #38	; 0x26
    12b0:	mov	r2, #1
    12b4:	movt	r0, #0
    12b8:	ldr	r3, [r0]
    12bc:	movw	r0, #0
    12c0:	movt	r0, #0
    12c4:	bl	0 <fwrite>
    12c8:	mvn	r6, #0
    12cc:	b	11f0 <__flatcc_fb_codegen_bfbs_to_file+0xc4>
    12d0:	movw	r0, #0
    12d4:	movw	r1, #0
    12d8:	mov	r2, r7
    12dc:	movt	r0, #0
    12e0:	movt	r1, #0
    12e4:	ldr	r0, [r0]
    12e8:	bl	0 <fprintf>
    12ec:	b	1260 <__flatcc_fb_codegen_bfbs_to_file+0x134>
    12f0:	movw	r0, #0
    12f4:	mov	r1, #34	; 0x22
    12f8:	mov	r2, #1
    12fc:	movt	r0, #0
    1300:	ldr	r3, [r0]
    1304:	movw	r0, #0
    1308:	movt	r0, #0
    130c:	bl	0 <fwrite>
    1310:	mov	r0, #1
    1314:	bl	0 <exit>

00001318 <count_symbols>:
    1318:	mov	r2, r0
    131c:	add	r0, r1, #4
    1320:	movw	r1, #0
    1324:	movt	r1, #0
    1328:	b	0 <fb_symbol_table_visit>

0000132c <install_symbols>:
    132c:	mov	r2, r0
    1330:	add	r0, r1, #4
    1334:	movw	r1, #0
    1338:	movt	r1, #0
    133c:	b	0 <fb_symbol_table_visit>

00001340 <count_symbol>:
    1340:	push	{r4, r5, fp, lr}
    1344:	add	fp, sp, #8
    1348:	mov	r4, r0
    134c:	ldrh	r0, [r1, #8]
    1350:	cmp	r0, #4
    1354:	bhi	1408 <count_symbol+0xc8>
    1358:	ldr	r0, [r4, #40]	; 0x28
    135c:	mov	r5, r1
    1360:	ldr	r1, [r1, #16]
    1364:	add	r0, r0, #172	; 0xac
    1368:	bl	0 <ptr_set_find_item>
    136c:	cmp	r0, #0
    1370:	popeq	{r4, r5, fp, pc}
    1374:	ldr	r1, [r4]
    1378:	mov	r0, #1
    137c:	cmp	r1, #0
    1380:	beq	13bc <count_symbol+0x7c>
    1384:	ldr	r1, [r5, #12]
    1388:	ldr	r1, [r1]
    138c:	cmp	r1, #0
    1390:	beq	13bc <count_symbol+0x7c>
    1394:	mov	r0, #0
    1398:	ldr	r2, [r1]
    139c:	ldr	r1, [r1, #4]
    13a0:	ldr	r1, [r1, #4]
    13a4:	cmp	r2, #0
    13a8:	add	r0, r0, r1
    13ac:	mov	r1, r2
    13b0:	add	r0, r0, #1
    13b4:	bne	1398 <count_symbol+0x58>
    13b8:	add	r0, r0, #1
    13bc:	ldr	r1, [r5, #4]
    13c0:	ldr	r1, [r1, #4]
    13c4:	add	r0, r0, r1
    13c8:	ldr	r1, [r4, #12]
    13cc:	add	r0, r0, r1
    13d0:	str	r0, [r4, #12]
    13d4:	ldrh	r0, [r5, #8]
    13d8:	sub	r1, r0, #3
    13dc:	cmp	r1, #2
    13e0:	bcc	13fc <count_symbol+0xbc>
    13e4:	cmp	r0, #1
    13e8:	bhi	1408 <count_symbol+0xc8>
    13ec:	ldr	r0, [r4, #4]
    13f0:	add	r0, r0, #1
    13f4:	str	r0, [r4, #4]
    13f8:	pop	{r4, r5, fp, pc}
    13fc:	ldr	r0, [r4, #8]
    1400:	add	r0, r0, #1
    1404:	str	r0, [r4, #8]
    1408:	pop	{r4, r5, fp, pc}

0000140c <install_symbol>:
    140c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1410:	add	fp, sp, #28
    1414:	sub	sp, sp, #4
    1418:	mov	r9, r0
    141c:	ldrh	r0, [r1, #8]
    1420:	cmp	r0, #4
    1424:	bhi	1508 <install_symbol+0xfc>
    1428:	ldr	r0, [r9, #40]	; 0x28
    142c:	mov	sl, r1
    1430:	ldr	r1, [r1, #16]
    1434:	add	r0, r0, #172	; 0xac
    1438:	bl	0 <ptr_set_find_item>
    143c:	cmp	r0, #0
    1440:	beq	1508 <install_symbol+0xfc>
    1444:	ldr	r0, [r9]
    1448:	ldr	r8, [r9, #36]	; 0x24
    144c:	cmp	r0, #0
    1450:	mov	r6, r8
    1454:	beq	149c <install_symbol+0x90>
    1458:	ldr	r0, [sl, #12]
    145c:	mov	r6, r8
    1460:	ldr	r4, [r0]
    1464:	cmp	r4, #0
    1468:	beq	149c <install_symbol+0x90>
    146c:	mov	r5, #46	; 0x2e
    1470:	mov	r6, r8
    1474:	ldr	r0, [r4, #4]
    1478:	ldm	r0, {r1, r7}
    147c:	mov	r0, r6
    1480:	mov	r2, r7
    1484:	bl	0 <memcpy>
    1488:	strb	r5, [r6, r7]!
    148c:	ldr	r4, [r4]
    1490:	add	r6, r6, #1
    1494:	cmp	r4, #0
    1498:	bne	1474 <install_symbol+0x68>
    149c:	ldr	r0, [sl, #4]
    14a0:	ldm	r0, {r1, r7}
    14a4:	mov	r0, r6
    14a8:	mov	r2, r7
    14ac:	bl	0 <memcpy>
    14b0:	mov	r0, #0
    14b4:	strb	r0, [r6, r7]!
    14b8:	add	r0, r6, #1
    14bc:	str	r0, [r9, #36]	; 0x24
    14c0:	ldrh	r0, [sl, #8]
    14c4:	sub	r1, r0, #3
    14c8:	cmp	r1, #2
    14cc:	bcc	14f4 <install_symbol+0xe8>
    14d0:	cmp	r0, #1
    14d4:	bhi	1508 <install_symbol+0xfc>
    14d8:	ldr	r0, [r9, #28]
    14dc:	str	sl, [r0]
    14e0:	str	r8, [r0, #4]
    14e4:	add	r0, r0, #8
    14e8:	str	r0, [r9, #28]
    14ec:	sub	sp, fp, #28
    14f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14f4:	ldr	r0, [r9, #32]
    14f8:	str	sl, [r0]
    14fc:	str	r8, [r0, #4]
    1500:	add	r0, r0, #8
    1504:	str	r0, [r9, #32]
    1508:	sub	sp, fp, #28
    150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001510 <compare_entries>:
    1510:	ldr	r1, [r1, #4]
    1514:	ldr	r0, [r0, #4]
    1518:	b	0 <strcmp>

0000151c <export_type>:
    151c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1520:	add	fp, sp, #24
    1524:	mov	r4, r0
    1528:	ldrh	r0, [fp, #8]
    152c:	mov	r8, #0
    1530:	mvn	r9, #0
    1534:	sub	r5, r0, #2
    1538:	cmp	r5, #13
    153c:	bhi	1640 <export_type+0x124>
    1540:	add	r6, pc, #16
    1544:	mov	r1, #13
    1548:	mov	r0, #0
    154c:	mov	r3, #13
    1550:	mov	r7, #0
    1554:	ldr	pc, [r6, r5, lsl #2]
    1558:	.word	0x0000170c
    155c:	.word	0x00001710
    1560:	.word	0x00001710
    1564:	.word	0x00001710
    1568:	.word	0x00001710
    156c:	.word	0x00001590
    1570:	.word	0x00001594
    1574:	.word	0x000016f8
    1578:	.word	0x00001710
    157c:	.word	0x00001710
    1580:	.word	0x00001710
    1584:	.word	0x00001710
    1588:	.word	0x0000160c
    158c:	.word	0x000015e8
    1590:	mov	r0, #14
    1594:	sub	r2, r2, #1
    1598:	mov	r1, #0
    159c:	cmp	r2, #10
    15a0:	bhi	16e4 <export_type+0x1c8>
    15a4:	add	r1, pc, #0
    15a8:	ldr	pc, [r1, r2, lsl #2]
    15ac:	.word	0x000015d8
    15b0:	.word	0x000016a0
    15b4:	.word	0x00001670
    15b8:	.word	0x00001680
    15bc:	.word	0x00001648
    15c0:	.word	0x000016b0
    15c4:	.word	0x000016c0
    15c8:	.word	0x00001690
    15cc:	.word	0x000016d0
    15d0:	.word	0x00001658
    15d4:	.word	0x000016e0
    15d8:	mov	r1, #10
    15dc:	cmp	r0, #0
    15e0:	bne	16ec <export_type+0x1d0>
    15e4:	b	1664 <export_type+0x148>
    15e8:	ldrh	r0, [r2, #8]
    15ec:	ldr	r9, [r2, #124]	; 0x7c
    15f0:	mov	r1, #15
    15f4:	cmp	r0, #2
    15f8:	bcc	16f8 <export_type+0x1dc>
    15fc:	cmp	r0, #3
    1600:	bne	1640 <export_type+0x124>
    1604:	ldr	r2, [r2, #40]	; 0x28
    1608:	b	1590 <export_type+0x74>
    160c:	ldrh	r1, [r2, #8]
    1610:	ldr	r0, [r2, #124]	; 0x7c
    1614:	mov	r3, #15
    1618:	cmp	r1, #2
    161c:	bcc	1708 <export_type+0x1ec>
    1620:	cmp	r1, #4
    1624:	beq	1704 <export_type+0x1e8>
    1628:	cmp	r1, #3
    162c:	bne	1640 <export_type+0x124>
    1630:	ldr	r2, [r2, #40]	; 0x28
    1634:	mov	r9, r0
    1638:	mov	r0, #0
    163c:	b	1594 <export_type+0x78>
    1640:	mov	r7, #0
    1644:	b	1710 <export_type+0x1f4>
    1648:	mov	r1, #2
    164c:	cmp	r0, #0
    1650:	bne	16ec <export_type+0x1d0>
    1654:	b	1664 <export_type+0x148>
    1658:	mov	r1, #12
    165c:	cmp	r0, #0
    1660:	bne	16ec <export_type+0x1d0>
    1664:	mov	r7, r1
    1668:	mov	r8, #0
    166c:	b	1710 <export_type+0x1f4>
    1670:	mov	r1, #6
    1674:	cmp	r0, #0
    1678:	bne	16ec <export_type+0x1d0>
    167c:	b	1664 <export_type+0x148>
    1680:	mov	r1, #4
    1684:	cmp	r0, #0
    1688:	bne	16ec <export_type+0x1d0>
    168c:	b	1664 <export_type+0x148>
    1690:	mov	r1, #5
    1694:	cmp	r0, #0
    1698:	bne	16ec <export_type+0x1d0>
    169c:	b	1664 <export_type+0x148>
    16a0:	mov	r1, #8
    16a4:	cmp	r0, #0
    16a8:	bne	16ec <export_type+0x1d0>
    16ac:	b	1664 <export_type+0x148>
    16b0:	mov	r1, #9
    16b4:	cmp	r0, #0
    16b8:	bne	16ec <export_type+0x1d0>
    16bc:	b	1664 <export_type+0x148>
    16c0:	mov	r1, #7
    16c4:	cmp	r0, #0
    16c8:	bne	16ec <export_type+0x1d0>
    16cc:	b	1664 <export_type+0x148>
    16d0:	mov	r1, #3
    16d4:	cmp	r0, #0
    16d8:	bne	16ec <export_type+0x1d0>
    16dc:	b	1664 <export_type+0x148>
    16e0:	mov	r1, #11
    16e4:	cmp	r0, #0
    16e8:	beq	1664 <export_type+0x148>
    16ec:	cmp	r0, #14
    16f0:	mov	r3, r0
    16f4:	bne	170c <export_type+0x1f0>
    16f8:	mov	r7, #14
    16fc:	mov	r8, r1
    1700:	b	1710 <export_type+0x1f4>
    1704:	mov	r3, #16
    1708:	mov	r9, r0
    170c:	mov	r7, r3
    1710:	mov	r0, r4
    1714:	mov	r1, #3
    1718:	bl	0 <flatcc_builder_start_table>
    171c:	cmp	r0, #0
    1720:	beq	172c <export_type+0x210>
    1724:	mov	r0, #0
    1728:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    172c:	cmn	r9, #1
    1730:	beq	1754 <export_type+0x238>
    1734:	mov	r0, r4
    1738:	mov	r1, #2
    173c:	mov	r2, #4
    1740:	mov	r3, #4
    1744:	bl	0 <flatcc_builder_table_add>
    1748:	cmp	r0, #0
    174c:	beq	1724 <export_type+0x208>
    1750:	str	r9, [r0]
    1754:	cmp	r7, #0
    1758:	beq	177c <export_type+0x260>
    175c:	mov	r0, r4
    1760:	mov	r1, #0
    1764:	mov	r2, #1
    1768:	mov	r3, #1
    176c:	bl	0 <flatcc_builder_table_add>
    1770:	cmp	r0, #0
    1774:	beq	1724 <export_type+0x208>
    1778:	strb	r7, [r0]
    177c:	cmp	r8, #0
    1780:	beq	17a4 <export_type+0x288>
    1784:	mov	r0, r4
    1788:	mov	r1, #1
    178c:	mov	r2, #1
    1790:	mov	r3, #1
    1794:	bl	0 <flatcc_builder_table_add>
    1798:	cmp	r0, #0
    179c:	beq	1724 <export_type+0x208>
    17a0:	strb	r8, [r0]
    17a4:	movw	r1, #0
    17a8:	mov	r0, r4
    17ac:	mov	r2, #0
    17b0:	movt	r1, #0
    17b4:	bl	0 <flatcc_builder_check_required>
    17b8:	cmp	r0, #0
    17bc:	beq	17cc <export_type+0x2b0>
    17c0:	mov	r0, r4
    17c4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    17c8:	b	0 <flatcc_builder_end_table>
    17cc:	movw	r0, #0
    17d0:	movw	r1, #0
    17d4:	movw	r3, #0
    17d8:	mov	r2, #23
    17dc:	movt	r0, #0
    17e0:	movt	r1, #0
    17e4:	movt	r3, #0
    17e8:	bl	0 <__assert_fail>

000017ec <__reflection_Field_sort_by_name__heap_sift_down>:
    17ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f0:	add	fp, sp, #28
    17f4:	sub	sp, sp, #20
    17f8:	cmp	r2, r1, lsl #1
    17fc:	bcs	1808 <__reflection_Field_sort_by_name__heap_sift_down+0x1c>
    1800:	sub	sp, fp, #28
    1804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1808:	mov	sl, r2
    180c:	lsl	r7, r1, #1
    1810:	str	r0, [sp, #4]
    1814:	str	r2, [sp]
    1818:	cmp	r7, sl
    181c:	bcs	18e4 <__reflection_Field_sort_by_name__heap_sift_down+0xf8>
    1820:	cmp	r0, #0
    1824:	ldrne	r8, [r0, #-4]
    1828:	cmpne	r8, r7
    182c:	bls	1a04 <__reflection_Field_sort_by_name__heap_sift_down+0x218>
    1830:	mov	r4, r0
    1834:	ldr	r2, [r4, r7, lsl #2]!
    1838:	ldr	r2, [r4, r2]!
    183c:	mov	r3, r4
    1840:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    1844:	cmp	r2, #6
    1848:	bcc	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    184c:	ldrh	r2, [r3, #4]
    1850:	cmp	r2, #0
    1854:	beq	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    1858:	orr	r5, r7, #1
    185c:	cmp	r8, r5
    1860:	bls	1a04 <__reflection_Field_sort_by_name__heap_sift_down+0x218>
    1864:	mov	r9, r1
    1868:	mov	r1, r0
    186c:	ldr	r3, [r1, r5, lsl #2]!
    1870:	ldr	r6, [r1, r3]!
    1874:	mov	r3, r1
    1878:	ldrh	r6, [r3, -r6]!	; <UNPREDICTABLE>
    187c:	cmp	r6, #6
    1880:	bcc	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    1884:	ldrh	r3, [r3, #4]
    1888:	cmp	r3, #0
    188c:	beq	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    1890:	ldr	r2, [r4, r2]!
    1894:	add	r0, r4, r2
    1898:	ldr	r2, [r1, r3]!
    189c:	add	r0, r0, #4
    18a0:	ldr	r4, [r0, #-4]
    18a4:	ldr	r6, [r1, r2]!
    18a8:	add	r1, r1, #4
    18ac:	cmp	r4, r6
    18b0:	mov	r2, r6
    18b4:	movcc	r2, r4
    18b8:	bl	0 <strncmp>
    18bc:	cmp	r0, #0
    18c0:	mov	r0, r5
    18c4:	mov	r1, r9
    18c8:	movne	r0, r7
    18cc:	movmi	r0, r5
    18d0:	movne	r7, r0
    18d4:	cmp	r4, r6
    18d8:	movcc	r7, r0
    18dc:	ldr	r0, [sp, #4]
    18e0:	b	18f0 <__reflection_Field_sort_by_name__heap_sift_down+0x104>
    18e4:	cmp	r0, #0
    18e8:	beq	1a04 <__reflection_Field_sort_by_name__heap_sift_down+0x218>
    18ec:	ldr	r8, [r0, #-4]
    18f0:	mov	r5, r7
    18f4:	cmp	r8, r1
    18f8:	bls	1a04 <__reflection_Field_sort_by_name__heap_sift_down+0x218>
    18fc:	mov	r9, r0
    1900:	ldr	r4, [r9, r1, lsl #2]!
    1904:	mov	r7, r9
    1908:	ldr	r2, [r7, r4]!
    190c:	mov	r3, r7
    1910:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    1914:	cmp	r2, #6
    1918:	bcc	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    191c:	ldrh	r6, [r3, #4]
    1920:	cmp	r6, #0
    1924:	beq	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    1928:	cmp	r8, r5
    192c:	bls	1a04 <__reflection_Field_sort_by_name__heap_sift_down+0x218>
    1930:	str	r4, [sp, #8]
    1934:	mov	r4, r0
    1938:	str	r5, [sp, #12]
    193c:	str	r1, [sp, #16]
    1940:	ldr	r8, [r4, r5, lsl #2]!
    1944:	mov	r3, r4
    1948:	ldr	r5, [r3, r8]!
    194c:	mov	r2, r3
    1950:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
    1954:	cmp	r5, #6
    1958:	bcc	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    195c:	ldrh	r2, [r2, #4]
    1960:	cmp	r2, #0
    1964:	beq	1a24 <__reflection_Field_sort_by_name__heap_sift_down+0x238>
    1968:	ldr	r1, [r7, r6]!
    196c:	add	r0, r7, r1
    1970:	ldr	r1, [r3, r2]!
    1974:	add	r0, r0, #4
    1978:	ldr	sl, [r0, #-4]
    197c:	ldr	r5, [r3, r1]!
    1980:	add	r1, r3, #4
    1984:	cmp	sl, r5
    1988:	mov	r2, r5
    198c:	movcc	r2, sl
    1990:	bl	0 <strncmp>
    1994:	cmp	r0, #1
    1998:	mov	r1, #0
    199c:	mov	r2, #0
    19a0:	movwlt	r1, #1
    19a4:	cmp	r0, #0
    19a8:	movwne	r0, #1
    19ac:	cmp	sl, r5
    19b0:	ldr	sl, [sp]
    19b4:	movwcc	r2, #1
    19b8:	orr	r0, r2, r0
    19bc:	ldr	r2, [sp, #16]
    19c0:	cmp	r0, #1
    19c4:	ldr	r0, [sp, #4]
    19c8:	bne	1800 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    19cc:	cmp	r1, #0
    19d0:	beq	1800 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    19d4:	ldr	r3, [sp, #12]
    19d8:	sub	r2, r2, r3
    19dc:	cmp	sl, r3, lsl #1
    19e0:	lsl	r7, r3, #1
    19e4:	sub	r1, r8, r2, lsl #2
    19e8:	str	r1, [r9]
    19ec:	ldr	r1, [sp, #8]
    19f0:	add	r1, r1, r2, lsl #2
    19f4:	str	r1, [r4]
    19f8:	mov	r1, r3
    19fc:	bcs	1818 <__reflection_Field_sort_by_name__heap_sift_down+0x2c>
    1a00:	b	1800 <__reflection_Field_sort_by_name__heap_sift_down+0x14>
    1a04:	movw	r0, #0
    1a08:	movw	r1, #0
    1a0c:	movw	r3, #0
    1a10:	mov	r2, #192	; 0xc0
    1a14:	movt	r0, #0
    1a18:	movt	r1, #0
    1a1c:	movt	r3, #0
    1a20:	bl	0 <__assert_fail>
    1a24:	movw	r0, #0
    1a28:	movw	r1, #0
    1a2c:	movw	r3, #0
    1a30:	mov	r2, #195	; 0xc3
    1a34:	movt	r0, #0
    1a38:	movt	r1, #0
    1a3c:	movt	r3, #0
    1a40:	bl	0 <__assert_fail>
