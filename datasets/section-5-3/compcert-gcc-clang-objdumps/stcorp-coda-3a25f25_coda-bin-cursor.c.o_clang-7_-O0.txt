
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-bin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_bin_cursor_get_bit_size>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #552	; 0x228
       c:	str	r0, [fp, #-16]
      10:	str	r1, [fp, #-20]	; 0xffffffec
      14:	ldr	r0, [fp, #-16]
      18:	add	r1, r0, #8
      1c:	ldr	r0, [r0, #4]
      20:	sub	r0, r0, #1
      24:	add	r0, r1, r0, lsl #4
      28:	ldr	r0, [r0]
      2c:	ldr	r0, [r0]
      30:	cmp	r0, #100	; 0x64
      34:	bcs	58 <coda_bin_cursor_get_bit_size+0x58>
      38:	ldr	r0, [fp, #-16]
      3c:	add	r1, r0, #8
      40:	ldr	r0, [r0, #4]
      44:	sub	r0, r0, #1
      48:	add	r0, r1, r0, lsl #4
      4c:	ldr	r0, [r0]
      50:	str	r0, [sp, #12]
      54:	b	78 <coda_bin_cursor_get_bit_size+0x78>
      58:	ldr	r0, [fp, #-16]
      5c:	add	r1, r0, #8
      60:	ldr	r0, [r0, #4]
      64:	sub	r0, r0, #1
      68:	add	r0, r1, r0, lsl #4
      6c:	ldr	r0, [r0]
      70:	ldr	r0, [r0, #4]
      74:	str	r0, [sp, #12]
      78:	ldr	r0, [sp, #12]
      7c:	str	r0, [fp, #-24]	; 0xffffffe8
      80:	ldr	r0, [fp, #-24]	; 0xffffffe8
      84:	ldr	r0, [r0, #28]
      88:	cmp	r0, #0
      8c:	blt	b8 <coda_bin_cursor_get_bit_size+0xb8>
      90:	b	94 <coda_bin_cursor_get_bit_size+0x94>
      94:	ldr	r0, [fp, #-24]	; 0xffffffe8
      98:	ldr	r1, [r0, #24]
      9c:	ldr	r0, [r0, #28]
      a0:	ldr	r2, [fp, #-20]	; 0xffffffec
      a4:	str	r0, [r2, #4]
      a8:	str	r1, [r2]
      ac:	movw	r0, #0
      b0:	str	r0, [fp, #-12]
      b4:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
      b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
      bc:	ldr	r0, [r0, #8]
      c0:	cmp	r0, #2
      c4:	str	r0, [sp, #8]
      c8:	bcc	f4 <coda_bin_cursor_get_bit_size+0xf4>
      cc:	b	d0 <coda_bin_cursor_get_bit_size+0xd0>
      d0:	ldr	r0, [sp, #8]
      d4:	sub	r1, r0, #2
      d8:	cmp	r1, #4
      dc:	bcc	108 <coda_bin_cursor_get_bit_size+0x108>
      e0:	b	e4 <coda_bin_cursor_get_bit_size+0xe4>
      e4:	ldr	r0, [sp, #8]
      e8:	cmp	r0, #6
      ec:	beq	1fc <coda_bin_cursor_get_bit_size+0x1fc>
      f0:	b	264 <coda_bin_cursor_get_bit_size+0x264>
      f4:	ldr	r0, [fp, #-16]
      f8:	ldr	r1, [fp, #-20]	; 0xffffffec
      fc:	bl	0 <coda_ascbin_cursor_get_bit_size>
     100:	str	r0, [fp, #-12]
     104:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     108:	ldr	r0, [fp, #-24]	; 0xffffffe8
     10c:	ldr	r0, [r0, #32]
     110:	movw	r1, #0
     114:	cmp	r0, r1
     118:	bne	130 <coda_bin_cursor_get_bit_size+0x130>
     11c:	ldr	r0, [fp, #-20]	; 0xffffffec
     120:	mvn	r1, #0
     124:	str	r1, [r0, #4]
     128:	str	r1, [r0]
     12c:	b	1f8 <coda_bin_cursor_get_bit_size+0x1f8>
     130:	ldr	r0, [fp, #-24]	; 0xffffffe8
     134:	ldr	r0, [r0, #32]
     138:	ldr	r1, [fp, #-16]
     13c:	ldr	r2, [fp, #-20]	; 0xffffffec
     140:	bl	0 <coda_expression_eval_integer>
     144:	cmp	r0, #0
     148:	beq	16c <coda_bin_cursor_get_bit_size+0x16c>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	bl	0 <coda_add_error_message>
     158:	ldr	r0, [fp, #-16]
     15c:	bl	0 <coda_cursor_add_to_error_message>
     160:	mvn	r0, #0
     164:	str	r0, [fp, #-12]
     168:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     16c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     170:	ldr	r1, [r0, #24]
     174:	ldr	r0, [r0, #28]
     178:	mvn	r2, #7
     17c:	eor	r1, r1, r2
     180:	mvn	r0, r0
     184:	orr	r0, r1, r0
     188:	cmp	r0, #0
     18c:	bne	1b4 <coda_bin_cursor_get_bit_size+0x1b4>
     190:	b	194 <coda_bin_cursor_get_bit_size+0x194>
     194:	ldr	r0, [fp, #-20]	; 0xffffffec
     198:	ldr	r1, [r0]
     19c:	ldr	r2, [r0, #4]
     1a0:	lsl	r2, r2, #3
     1a4:	orr	r2, r2, r1, lsr #29
     1a8:	lsl	r1, r1, #3
     1ac:	str	r1, [r0]
     1b0:	str	r2, [r0, #4]
     1b4:	ldr	r0, [fp, #-20]	; 0xffffffec
     1b8:	ldr	r0, [r0, #4]
     1bc:	cmn	r0, #1
     1c0:	bgt	1f4 <coda_bin_cursor_get_bit_size+0x1f4>
     1c4:	b	1c8 <coda_bin_cursor_get_bit_size+0x1c8>
     1c8:	ldr	r0, [pc, #168]	; 278 <coda_bin_cursor_get_bit_size+0x278>
     1cc:	ldr	r1, [fp, #-20]	; 0xffffffec
     1d0:	ldr	r2, [r1]
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	bl	0 <coda_set_error>
     1e0:	ldr	r0, [fp, #-16]
     1e4:	bl	0 <coda_cursor_add_to_error_message>
     1e8:	mvn	r0, #0
     1ec:	str	r0, [fp, #-12]
     1f0:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     1f4:	b	1f8 <coda_bin_cursor_get_bit_size+0x1f8>
     1f8:	b	264 <coda_bin_cursor_get_bit_size+0x264>
     1fc:	ldr	r0, [fp, #-16]
     200:	add	r1, sp, #16
     204:	mov	r2, r1
     208:	str	r0, [sp, #4]
     20c:	mov	r0, r2
     210:	ldr	r2, [sp, #4]
     214:	str	r1, [sp]
     218:	mov	r1, r2
     21c:	movw	r2, #520	; 0x208
     220:	bl	0 <memcpy>
     224:	ldr	r0, [sp]
     228:	bl	0 <coda_ascbin_cursor_use_base_type_of_special_type>
     22c:	cmp	r0, #0
     230:	beq	240 <coda_bin_cursor_get_bit_size+0x240>
     234:	mvn	r0, #0
     238:	str	r0, [fp, #-12]
     23c:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     240:	ldr	r1, [fp, #-20]	; 0xffffffec
     244:	add	r0, sp, #16
     248:	bl	0 <coda_cursor_get_bit_size>
     24c:	cmp	r0, #0
     250:	beq	260 <coda_bin_cursor_get_bit_size+0x260>
     254:	mvn	r0, #0
     258:	str	r0, [fp, #-12]
     25c:	b	26c <coda_bin_cursor_get_bit_size+0x26c>
     260:	b	264 <coda_bin_cursor_get_bit_size+0x264>
     264:	movw	r0, #0
     268:	str	r0, [fp, #-12]
     26c:	ldr	r0, [fp, #-12]
     270:	sub	sp, fp, #8
     274:	pop	{r4, r5, fp, pc}
     278:	.word	0xfffffed4

0000027c <coda_bin_cursor_get_string_length>:
     27c:	push	{fp, lr}
     280:	mov	fp, sp
     284:	sub	sp, sp, #24
     288:	str	r0, [fp, #-8]
     28c:	str	r1, [sp, #12]
     290:	ldr	r0, [fp, #-8]
     294:	mov	r1, sp
     298:	bl	0 <coda_bin_cursor_get_bit_size>
     29c:	cmp	r0, #0
     2a0:	beq	2b0 <coda_bin_cursor_get_string_length+0x34>
     2a4:	mvn	r0, #0
     2a8:	str	r0, [fp, #-4]
     2ac:	b	2f0 <coda_bin_cursor_get_string_length+0x74>
     2b0:	ldr	r0, [sp, #4]
     2b4:	cmn	r0, #1
     2b8:	bgt	2d0 <coda_bin_cursor_get_string_length+0x54>
     2bc:	b	2c0 <coda_bin_cursor_get_string_length+0x44>
     2c0:	ldr	r0, [sp, #12]
     2c4:	mvn	r1, #0
     2c8:	str	r1, [r0]
     2cc:	b	2e8 <coda_bin_cursor_get_string_length+0x6c>
     2d0:	ldr	r0, [sp]
     2d4:	ldr	r1, [sp, #4]
     2d8:	lsr	r0, r0, #3
     2dc:	orr	r0, r0, r1, lsl #29
     2e0:	ldr	r1, [sp, #12]
     2e4:	str	r0, [r1]
     2e8:	movw	r0, #0
     2ec:	str	r0, [fp, #-4]
     2f0:	ldr	r0, [fp, #-4]
     2f4:	mov	sp, fp
     2f8:	pop	{fp, pc}

000002fc <coda_bin_cursor_get_num_elements>:
     2fc:	push	{fp, lr}
     300:	mov	fp, sp
     304:	sub	sp, sp, #16
     308:	str	r0, [sp, #8]
     30c:	str	r1, [sp, #4]
     310:	ldr	r0, [sp, #8]
     314:	add	r1, r0, #8
     318:	ldr	r0, [r0, #4]
     31c:	sub	r0, r0, #1
     320:	add	r0, r1, r0, lsl #4
     324:	ldr	r0, [r0]
     328:	ldr	r0, [r0]
     32c:	cmp	r0, #100	; 0x64
     330:	bcs	354 <coda_bin_cursor_get_num_elements+0x58>
     334:	ldr	r0, [sp, #8]
     338:	add	r1, r0, #8
     33c:	ldr	r0, [r0, #4]
     340:	sub	r0, r0, #1
     344:	add	r0, r1, r0, lsl #4
     348:	ldr	r0, [r0]
     34c:	str	r0, [sp]
     350:	b	374 <coda_bin_cursor_get_num_elements+0x78>
     354:	ldr	r0, [sp, #8]
     358:	add	r1, r0, #8
     35c:	ldr	r0, [r0, #4]
     360:	sub	r0, r0, #1
     364:	add	r0, r1, r0, lsl #4
     368:	ldr	r0, [r0]
     36c:	ldr	r0, [r0, #4]
     370:	str	r0, [sp]
     374:	ldr	r0, [sp]
     378:	ldr	r0, [r0, #8]
     37c:	cmp	r0, #1
     380:	bhi	39c <coda_bin_cursor_get_num_elements+0xa0>
     384:	b	388 <coda_bin_cursor_get_num_elements+0x8c>
     388:	ldr	r0, [sp, #8]
     38c:	ldr	r1, [sp, #4]
     390:	bl	0 <coda_ascbin_cursor_get_num_elements>
     394:	str	r0, [fp, #-4]
     398:	b	3b0 <coda_bin_cursor_get_num_elements+0xb4>
     39c:	ldr	r0, [sp, #4]
     3a0:	movw	r1, #1
     3a4:	str	r1, [r0]
     3a8:	movw	r0, #0
     3ac:	str	r0, [fp, #-4]
     3b0:	ldr	r0, [fp, #-4]
     3b4:	mov	sp, fp
     3b8:	pop	{fp, pc}

000003bc <coda_bin_cursor_read_int8>:
     3bc:	push	{r4, sl, fp, lr}
     3c0:	add	fp, sp, #8
     3c4:	sub	sp, sp, #136	; 0x88
     3c8:	str	r0, [fp, #-16]
     3cc:	str	r1, [fp, #-20]	; 0xffffffec
     3d0:	ldr	r0, [fp, #-16]
     3d4:	add	r1, r0, #8
     3d8:	ldr	r0, [r0, #4]
     3dc:	sub	r0, r0, #1
     3e0:	add	r0, r1, r0, lsl #4
     3e4:	ldr	r0, [r0]
     3e8:	ldr	r0, [r0]
     3ec:	cmp	r0, #100	; 0x64
     3f0:	bcs	414 <coda_bin_cursor_read_int8+0x58>
     3f4:	ldr	r0, [fp, #-16]
     3f8:	add	r1, r0, #8
     3fc:	ldr	r0, [r0, #4]
     400:	sub	r0, r0, #1
     404:	add	r0, r1, r0, lsl #4
     408:	ldr	r0, [r0]
     40c:	str	r0, [sp, #56]	; 0x38
     410:	b	434 <coda_bin_cursor_read_int8+0x78>
     414:	ldr	r0, [fp, #-16]
     418:	add	r1, r0, #8
     41c:	ldr	r0, [r0, #4]
     420:	sub	r0, r0, #1
     424:	add	r0, r1, r0, lsl #4
     428:	ldr	r0, [r0]
     42c:	ldr	r0, [r0, #4]
     430:	str	r0, [sp, #56]	; 0x38
     434:	ldr	r0, [sp, #56]	; 0x38
     438:	str	r0, [fp, #-24]	; 0xffffffe8
     43c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     440:	ldr	r1, [r0, #24]
     444:	ldr	r0, [r0, #28]
     448:	str	r0, [fp, #-28]	; 0xffffffe4
     44c:	str	r1, [fp, #-32]	; 0xffffffe0
     450:	ldr	r0, [fp, #-16]
     454:	ldr	r1, [r0, #4]
     458:	ldr	r1, [r0, r1, lsl #4]!
     45c:	ldr	r0, [r0, #4]
     460:	str	r0, [fp, #-36]	; 0xffffffdc
     464:	str	r1, [fp, #-40]	; 0xffffffd8
     468:	ldr	r0, [fp, #-28]	; 0xffffffe4
     46c:	cmn	r0, #1
     470:	bgt	56c <coda_bin_cursor_read_int8+0x1b0>
     474:	b	478 <coda_bin_cursor_read_int8+0xbc>
     478:	ldr	r0, [fp, #-16]
     47c:	sub	r1, fp, #32
     480:	bl	0 <coda_bin_cursor_get_bit_size>
     484:	cmp	r0, #0
     488:	beq	498 <coda_bin_cursor_read_int8+0xdc>
     48c:	mvn	r0, #0
     490:	str	r0, [fp, #-12]
     494:	b	730 <coda_bin_cursor_read_int8+0x374>
     498:	ldr	r0, [fp, #-28]	; 0xffffffe4
     49c:	cmp	r0, #0
     4a0:	blt	4c8 <coda_bin_cursor_read_int8+0x10c>
     4a4:	b	4a8 <coda_bin_cursor_read_int8+0xec>
     4a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
     4b0:	subs	r0, r0, #9
     4b4:	sbcs	r1, r1, #0
     4b8:	str	r0, [sp, #52]	; 0x34
     4bc:	str	r1, [sp, #48]	; 0x30
     4c0:	blt	568 <coda_bin_cursor_read_int8+0x1ac>
     4c4:	b	4c8 <coda_bin_cursor_read_int8+0x10c>
     4c8:	ldr	r0, [pc, #620]	; 73c <coda_bin_cursor_read_int8+0x380>
     4cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
     4d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     4d4:	sub	r3, fp, #61	; 0x3d
     4d8:	str	r0, [sp, #44]	; 0x2c
     4dc:	mov	r0, r1
     4e0:	mov	r1, r2
     4e4:	mov	r2, r3
     4e8:	str	r3, [sp, #40]	; 0x28
     4ec:	bl	0 <coda_str64>
     4f0:	ldr	r0, [fp, #-16]
     4f4:	ldr	r1, [r0, #4]
     4f8:	ldr	r1, [r0, r1, lsl #4]!
     4fc:	ldr	r0, [r0, #4]
     500:	lsr	r1, r1, #3
     504:	orr	r1, r1, r0, lsl #29
     508:	asr	r0, r0, #3
     50c:	add	r2, sp, #62	; 0x3e
     510:	str	r0, [sp, #36]	; 0x24
     514:	mov	r0, r1
     518:	ldr	r1, [sp, #36]	; 0x24
     51c:	str	r2, [sp, #32]
     520:	bl	0 <coda_str64>
     524:	ldr	r0, [fp, #-16]
     528:	ldr	r1, [r0, #4]
     52c:	ldr	r0, [r0, r1, lsl #4]
     530:	and	r0, r0, #7
     534:	ldr	r1, [sp, #44]	; 0x2c
     538:	str	r0, [sp, #28]
     53c:	mov	r0, r1
     540:	movw	r1, #0
     544:	movt	r1, #0
     548:	ldr	r2, [sp, #40]	; 0x28
     54c:	ldr	r3, [sp, #32]
     550:	ldr	lr, [sp, #28]
     554:	str	lr, [sp]
     558:	bl	0 <coda_set_error>
     55c:	mvn	r0, #0
     560:	str	r0, [fp, #-12]
     564:	b	730 <coda_bin_cursor_read_int8+0x374>
     568:	b	56c <coda_bin_cursor_read_int8+0x1b0>
     56c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     570:	tst	r0, #7
     574:	bne	598 <coda_bin_cursor_read_int8+0x1dc>
     578:	b	57c <coda_bin_cursor_read_int8+0x1c0>
     57c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     580:	ldr	r1, [fp, #-28]	; 0xffffffe4
     584:	eor	r0, r0, #8
     588:	orr	r0, r0, r1
     58c:	cmp	r0, #0
     590:	beq	658 <coda_bin_cursor_read_int8+0x29c>
     594:	b	598 <coda_bin_cursor_read_int8+0x1dc>
     598:	ldr	r0, [fp, #-32]	; 0xffffffe0
     59c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     5a0:	lsr	r2, r0, #3
     5a4:	orr	r2, r2, r1, lsl #29
     5a8:	asr	r1, r1, #3
     5ac:	and	r0, r0, #7
     5b0:	adds	r3, r2, #1
     5b4:	adc	ip, r1, #0
     5b8:	cmp	r0, #0
     5bc:	movne	r2, r3
     5c0:	cmp	r0, #0
     5c4:	movne	r1, ip
     5c8:	rsbs	r0, r2, #1
     5cc:	rscs	r1, r1, #0
     5d0:	str	r0, [sp, #24]
     5d4:	str	r1, [sp, #20]
     5d8:	blt	5e4 <coda_bin_cursor_read_int8+0x228>
     5dc:	b	5e0 <coda_bin_cursor_read_int8+0x224>
     5e0:	b	604 <coda_bin_cursor_read_int8+0x248>
     5e4:	movw	r0, #0
     5e8:	movt	r0, #0
     5ec:	movw	r1, #0
     5f0:	movt	r1, #0
     5f4:	movw	r2, #177	; 0xb1
     5f8:	movw	r3, #0
     5fc:	movt	r3, #0
     600:	bl	0 <__assert_fail>
     604:	ldr	r0, [fp, #-20]	; 0xffffffec
     608:	mov	r1, #0
     60c:	strb	r1, [r0]
     610:	ldr	r0, [fp, #-16]
     614:	ldr	r0, [r0]
     618:	ldr	r2, [fp, #-40]	; 0xffffffd8
     61c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     620:	ldr	r1, [fp, #-32]	; 0xffffffe0
     624:	ldr	ip, [fp, #-28]	; 0xffffffe4
     628:	ldr	lr, [fp, #-20]	; 0xffffffec
     62c:	mov	r4, sp
     630:	str	lr, [r4, #8]
     634:	str	ip, [r4, #4]
     638:	str	r1, [r4]
     63c:	bl	740 <read_bits>
     640:	cmp	r0, #0
     644:	beq	654 <coda_bin_cursor_read_int8+0x298>
     648:	mvn	r0, #0
     64c:	str	r0, [fp, #-12]
     650:	b	730 <coda_bin_cursor_read_int8+0x374>
     654:	b	6b0 <coda_bin_cursor_read_int8+0x2f4>
     658:	ldr	r0, [fp, #-16]
     65c:	ldr	r0, [r0]
     660:	ldr	r1, [fp, #-40]	; 0xffffffd8
     664:	ldr	r2, [fp, #-36]	; 0xffffffdc
     668:	lsr	r1, r1, #3
     66c:	orr	r1, r1, r2, lsl #29
     670:	asr	r3, r2, #3
     674:	ldr	r2, [fp, #-20]	; 0xffffffec
     678:	mov	ip, sp
     67c:	str	r2, [ip, #8]
     680:	mov	r2, #0
     684:	str	r2, [ip, #4]
     688:	mov	r2, #1
     68c:	str	r2, [ip]
     690:	mov	r2, r1
     694:	bl	d0c <read_bytes>
     698:	cmp	r0, #0
     69c:	beq	6ac <coda_bin_cursor_read_int8+0x2f0>
     6a0:	mvn	r0, #0
     6a4:	str	r0, [fp, #-12]
     6a8:	b	730 <coda_bin_cursor_read_int8+0x374>
     6ac:	b	6b0 <coda_bin_cursor_read_int8+0x2f4>
     6b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     6b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     6b8:	rsbs	r0, r0, #7
     6bc:	rscs	r1, r1, #0
     6c0:	str	r0, [sp, #16]
     6c4:	str	r1, [sp, #12]
     6c8:	blt	728 <coda_bin_cursor_read_int8+0x36c>
     6cc:	b	6d0 <coda_bin_cursor_read_int8+0x314>
     6d0:	ldr	r0, [fp, #-20]	; 0xffffffec
     6d4:	ldrb	r0, [r0]
     6d8:	strb	r0, [sp, #61]	; 0x3d
     6dc:	ldrb	r0, [sp, #61]	; 0x3d
     6e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     6e4:	sub	r1, r1, #1
     6e8:	movw	r2, #1
     6ec:	lsl	r1, r2, r1
     6f0:	and	r0, r0, r1
     6f4:	cmp	r0, #0
     6f8:	beq	724 <coda_bin_cursor_read_int8+0x368>
     6fc:	ldrb	r0, [sp, #61]	; 0x3d
     700:	ldr	r1, [fp, #-32]	; 0xffffffe0
     704:	movw	r2, #1
     708:	lsl	r1, r2, r1
     70c:	sub	r1, r1, #1
     710:	mvn	r2, #0
     714:	eor	r1, r1, r2
     718:	orr	r0, r0, r1
     71c:	ldr	r1, [fp, #-20]	; 0xffffffec
     720:	strb	r0, [r1]
     724:	b	728 <coda_bin_cursor_read_int8+0x36c>
     728:	movw	r0, #0
     72c:	str	r0, [fp, #-12]
     730:	ldr	r0, [fp, #-12]
     734:	sub	sp, fp, #8
     738:	pop	{r4, sl, fp, pc}
     73c:	.word	0xfffffed4

00000740 <read_bits>:
     740:	push	{r4, r5, r6, sl, fp, lr}
     744:	add	fp, sp, #16
     748:	sub	sp, sp, #136	; 0x88
     74c:	ldr	r1, [fp, #12]
     750:	ldr	ip, [fp, #8]
     754:	ldr	lr, [fp, #16]
     758:	str	r0, [fp, #-24]	; 0xffffffe8
     75c:	str	r3, [fp, #-28]	; 0xffffffe4
     760:	str	r2, [fp, #-32]	; 0xffffffe0
     764:	str	r1, [fp, #-36]	; 0xffffffdc
     768:	str	ip, [fp, #-40]	; 0xffffffd8
     76c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     770:	and	r0, r0, #7
     774:	ldr	r1, [fp, #-40]	; 0xffffffd8
     778:	ldr	r2, [fp, #-36]	; 0xffffffdc
     77c:	adds	r0, r0, r1
     780:	adc	r1, r2, #0
     784:	str	r0, [fp, #-56]	; 0xffffffc8
     788:	str	r1, [fp, #-52]	; 0xffffffcc
     78c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     790:	rsb	r0, r0, #0
     794:	and	r0, r0, #7
     798:	str	r0, [fp, #-44]	; 0xffffffd4
     79c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     7a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
     7a4:	rsbs	r0, r0, #8
     7a8:	rscs	r1, r1, #0
     7ac:	str	lr, [sp, #60]	; 0x3c
     7b0:	str	r0, [sp, #56]	; 0x38
     7b4:	str	r1, [sp, #52]	; 0x34
     7b8:	blt	864 <read_bits+0x124>
     7bc:	b	7c0 <read_bits+0x80>
     7c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     7c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     7cc:	lsr	r1, r1, #3
     7d0:	orr	r1, r1, r2, lsl #29
     7d4:	asr	r3, r2, #3
     7d8:	ldr	r2, [fp, #16]
     7dc:	mov	ip, sp
     7e0:	str	r2, [ip, #8]
     7e4:	mov	r2, #0
     7e8:	str	r2, [ip, #4]
     7ec:	mov	r2, #1
     7f0:	str	r2, [ip]
     7f4:	mov	r2, r1
     7f8:	bl	d0c <read_bytes>
     7fc:	cmp	r0, #0
     800:	beq	810 <read_bits+0xd0>
     804:	mvn	r0, #0
     808:	str	r0, [fp, #-20]	; 0xffffffec
     80c:	b	d00 <read_bits+0x5c0>
     810:	ldr	r0, [fp, #-44]	; 0xffffffd4
     814:	cmp	r0, #0
     818:	beq	830 <read_bits+0xf0>
     81c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     820:	ldr	r1, [fp, #16]
     824:	ldrb	r2, [r1]
     828:	asr	r0, r2, r0
     82c:	strb	r0, [r1]
     830:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     834:	tst	r0, #7
     838:	beq	860 <read_bits+0x120>
     83c:	b	840 <read_bits+0x100>
     840:	ldr	r0, [fp, #-40]	; 0xffffffd8
     844:	movw	r1, #1
     848:	lsl	r0, r1, r0
     84c:	sub	r0, r0, #1
     850:	ldr	r1, [fp, #16]
     854:	ldrb	r2, [r1]
     858:	and	r0, r2, r0
     85c:	strb	r0, [r1]
     860:	b	cf8 <read_bits+0x5b8>
     864:	ldr	r0, [fp, #-44]	; 0xffffffd4
     868:	cmp	r0, #0
     86c:	bne	9c4 <read_bits+0x284>
     870:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     874:	tst	r0, #7
     878:	beq	940 <read_bits+0x200>
     87c:	b	880 <read_bits+0x140>
     880:	ldr	r0, [fp, #-24]	; 0xffffffe8
     884:	ldr	r1, [fp, #-32]	; 0xffffffe0
     888:	ldr	r2, [fp, #-28]	; 0xffffffe4
     88c:	lsr	r1, r1, #3
     890:	orr	r1, r1, r2, lsl #29
     894:	asr	r3, r2, #3
     898:	mov	r2, sp
     89c:	sub	ip, fp, #61	; 0x3d
     8a0:	str	ip, [r2, #8]
     8a4:	mov	ip, #0
     8a8:	str	ip, [r2, #4]
     8ac:	mov	ip, #1
     8b0:	str	ip, [r2]
     8b4:	mov	r2, r1
     8b8:	bl	d0c <read_bytes>
     8bc:	cmp	r0, #0
     8c0:	beq	8d0 <read_bits+0x190>
     8c4:	mvn	r0, #0
     8c8:	str	r0, [fp, #-20]	; 0xffffffec
     8cc:	b	d00 <read_bits+0x5c0>
     8d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     8d4:	and	r0, r0, #7
     8d8:	str	r0, [fp, #-60]	; 0xffffffc4
     8dc:	ldrb	r0, [fp, #-61]	; 0xffffffc3
     8e0:	ldr	r1, [fp, #-60]	; 0xffffffc4
     8e4:	mov	r2, #1
     8e8:	mvn	r3, #0
     8ec:	add	r1, r3, r2, lsl r1
     8f0:	and	r0, r0, r1
     8f4:	ldr	r1, [fp, #16]
     8f8:	strb	r0, [r1]
     8fc:	ldr	r0, [fp, #16]
     900:	add	r0, r0, #1
     904:	str	r0, [fp, #16]
     908:	ldr	r0, [fp, #-60]	; 0xffffffc4
     90c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     910:	ldr	r2, [fp, #-28]	; 0xffffffe4
     914:	adds	r0, r1, r0
     918:	adc	r1, r2, #0
     91c:	str	r0, [fp, #-32]	; 0xffffffe0
     920:	str	r1, [fp, #-28]	; 0xffffffe4
     924:	ldr	r0, [fp, #-60]	; 0xffffffc4
     928:	ldr	r1, [fp, #-40]	; 0xffffffd8
     92c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     930:	subs	r0, r1, r0
     934:	sbc	r1, r2, #0
     938:	str	r0, [fp, #-40]	; 0xffffffd8
     93c:	str	r1, [fp, #-36]	; 0xffffffdc
     940:	ldr	r0, [fp, #-40]	; 0xffffffd8
     944:	ldr	r1, [fp, #-36]	; 0xffffffdc
     948:	subs	r0, r0, #1
     94c:	sbcs	r1, r1, #0
     950:	str	r0, [sp, #48]	; 0x30
     954:	str	r1, [sp, #44]	; 0x2c
     958:	blt	9c0 <read_bits+0x280>
     95c:	b	960 <read_bits+0x220>
     960:	ldr	r0, [fp, #-24]	; 0xffffffe8
     964:	ldr	r1, [fp, #-32]	; 0xffffffe0
     968:	ldr	r2, [fp, #-28]	; 0xffffffe4
     96c:	lsr	r1, r1, #3
     970:	orr	r1, r1, r2, lsl #29
     974:	asr	r3, r2, #3
     978:	ldr	r2, [fp, #-40]	; 0xffffffd8
     97c:	ldr	ip, [fp, #-36]	; 0xffffffdc
     980:	lsr	r2, r2, #3
     984:	orr	r2, r2, ip, lsl #29
     988:	asr	ip, ip, #3
     98c:	ldr	lr, [fp, #16]
     990:	mov	r4, sp
     994:	str	lr, [r4, #8]
     998:	str	ip, [r4, #4]
     99c:	str	r2, [r4]
     9a0:	mov	r2, r1
     9a4:	bl	d0c <read_bytes>
     9a8:	cmp	r0, #0
     9ac:	beq	9bc <read_bits+0x27c>
     9b0:	mvn	r0, #0
     9b4:	str	r0, [fp, #-20]	; 0xffffffec
     9b8:	b	d00 <read_bits+0x5c0>
     9bc:	b	9c0 <read_bits+0x280>
     9c0:	b	cf4 <read_bits+0x5b4>
     9c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     9c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     9cc:	mov	r2, #24
     9d0:	mov	r3, #0
     9d4:	bl	0 <__aeabi_ldivmod>
     9d8:	orr	r2, r2, r3
     9dc:	cmp	r2, #0
     9e0:	str	r0, [sp, #40]	; 0x28
     9e4:	str	r1, [sp, #36]	; 0x24
     9e8:	beq	be8 <read_bits+0x4a8>
     9ec:	b	9f0 <read_bits+0x2b0>
     9f0:	sub	r0, fp, #65	; 0x41
     9f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     9f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     9fc:	mov	r3, #24
     a00:	mov	ip, #0
     a04:	str	r0, [sp, #32]
     a08:	mov	r0, r1
     a0c:	mov	r1, r2
     a10:	mov	r2, r3
     a14:	mov	r3, ip
     a18:	str	ip, [sp, #28]
     a1c:	bl	0 <__aeabi_ldivmod>
     a20:	str	r2, [sp, #76]	; 0x4c
     a24:	ldr	r2, [fp, #-32]	; 0xffffffe0
     a28:	and	r2, r2, #7
     a2c:	ldr	r3, [sp, #76]	; 0x4c
     a30:	add	r2, r2, r3
     a34:	lsr	r3, r2, #3
     a38:	mov	ip, #1
     a3c:	add	lr, ip, r2, lsr #3
     a40:	tst	r2, #7
     a44:	movne	r3, lr
     a48:	str	r3, [sp, #72]	; 0x48
     a4c:	ldr	r2, [sp, #76]	; 0x4c
     a50:	lsr	r3, r2, #3
     a54:	add	ip, ip, r2, lsr #3
     a58:	tst	r2, #7
     a5c:	movne	r3, ip
     a60:	str	r3, [sp, #68]	; 0x44
     a64:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a6c:	ldr	ip, [fp, #-28]	; 0xffffffe4
     a70:	lsr	r3, r3, #3
     a74:	orr	r3, r3, ip, lsl #29
     a78:	asr	ip, ip, #3
     a7c:	ldr	lr, [sp, #72]	; 0x48
     a80:	mov	r4, sp
     a84:	ldr	r5, [sp, #32]
     a88:	str	r5, [r4, #8]
     a8c:	ldr	r6, [sp, #28]
     a90:	str	r6, [r4, #4]
     a94:	str	lr, [r4]
     a98:	str	r0, [sp, #24]
     a9c:	mov	r0, r2
     aa0:	mov	r2, r3
     aa4:	mov	r3, ip
     aa8:	str	r1, [sp, #20]
     aac:	bl	d0c <read_bytes>
     ab0:	cmp	r0, #0
     ab4:	beq	ac4 <read_bits+0x384>
     ab8:	mvn	r0, #0
     abc:	str	r0, [fp, #-20]	; 0xffffffec
     ac0:	b	d00 <read_bits+0x5c0>
     ac4:	movw	r0, #0
     ac8:	str	r0, [fp, #-72]	; 0xffffffb8
     acc:	str	r0, [sp, #64]	; 0x40
     ad0:	ldr	r0, [sp, #64]	; 0x40
     ad4:	ldr	r1, [sp, #72]	; 0x48
     ad8:	cmp	r0, r1
     adc:	bcs	b18 <read_bits+0x3d8>
     ae0:	ldr	r0, [sp, #64]	; 0x40
     ae4:	sub	r1, fp, #65	; 0x41
     ae8:	add	r0, r1, r0
     aec:	ldrb	r0, [r0]
     af0:	sub	r1, fp, #72	; 0x48
     af4:	ldr	r2, [sp, #64]	; 0x40
     af8:	movw	r3, #3
     afc:	sub	r2, r3, r2
     b00:	add	r1, r1, r2
     b04:	strb	r0, [r1]
     b08:	ldr	r0, [sp, #64]	; 0x40
     b0c:	add	r0, r0, #1
     b10:	str	r0, [sp, #64]	; 0x40
     b14:	b	ad0 <read_bits+0x390>
     b18:	ldr	r0, [fp, #-72]	; 0xffffffb8
     b1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
     b20:	ldr	r2, [sp, #72]	; 0x48
     b24:	rsb	r2, r2, #4
     b28:	lsl	r2, r2, #3
     b2c:	add	r1, r1, r2
     b30:	lsr	r0, r0, r1
     b34:	ldr	r1, [sp, #76]	; 0x4c
     b38:	movw	r2, #1
     b3c:	lsl	r1, r2, r1
     b40:	sub	r1, r1, #1
     b44:	and	r0, r0, r1
     b48:	str	r0, [fp, #-72]	; 0xffffffb8
     b4c:	movw	r0, #0
     b50:	str	r0, [sp, #64]	; 0x40
     b54:	ldr	r0, [sp, #64]	; 0x40
     b58:	ldr	r1, [sp, #68]	; 0x44
     b5c:	cmp	r0, r1
     b60:	bcs	ba0 <read_bits+0x460>
     b64:	sub	r0, fp, #72	; 0x48
     b68:	ldr	r1, [sp, #68]	; 0x44
     b6c:	sub	r1, r1, #1
     b70:	ldr	r2, [sp, #64]	; 0x40
     b74:	sub	r1, r1, r2
     b78:	add	r0, r0, r1
     b7c:	ldrb	r0, [r0]
     b80:	ldr	r1, [fp, #16]
     b84:	ldr	r2, [sp, #64]	; 0x40
     b88:	add	r1, r1, r2
     b8c:	strb	r0, [r1]
     b90:	ldr	r0, [sp, #64]	; 0x40
     b94:	add	r0, r0, #1
     b98:	str	r0, [sp, #64]	; 0x40
     b9c:	b	b54 <read_bits+0x414>
     ba0:	ldr	r0, [sp, #68]	; 0x44
     ba4:	ldr	r1, [fp, #16]
     ba8:	add	r0, r1, r0
     bac:	str	r0, [fp, #16]
     bb0:	ldr	r0, [sp, #76]	; 0x4c
     bb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     bb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bbc:	adds	r0, r1, r0
     bc0:	adc	r1, r2, #0
     bc4:	str	r0, [fp, #-32]	; 0xffffffe0
     bc8:	str	r1, [fp, #-28]	; 0xffffffe4
     bcc:	ldr	r0, [sp, #76]	; 0x4c
     bd0:	ldr	r1, [fp, #-40]	; 0xffffffd8
     bd4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     bd8:	subs	r0, r1, r0
     bdc:	sbc	r1, r2, #0
     be0:	str	r0, [fp, #-40]	; 0xffffffd8
     be4:	str	r1, [fp, #-36]	; 0xffffffdc
     be8:	b	bec <read_bits+0x4ac>
     bec:	ldr	r0, [fp, #-40]	; 0xffffffd8
     bf0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     bf4:	subs	r0, r0, #1
     bf8:	sbcs	r1, r1, #0
     bfc:	str	r0, [sp, #16]
     c00:	str	r1, [sp, #12]
     c04:	blt	cf0 <read_bits+0x5b0>
     c08:	b	c0c <read_bits+0x4cc>
     c0c:	sub	r0, fp, #65	; 0x41
     c10:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c14:	ldr	r2, [fp, #-32]	; 0xffffffe0
     c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c1c:	lsr	r2, r2, #3
     c20:	orr	r2, r2, r3, lsl #29
     c24:	asr	r3, r3, #3
     c28:	mov	ip, sp
     c2c:	str	r0, [ip, #8]
     c30:	mov	r0, #0
     c34:	str	r0, [ip, #4]
     c38:	mov	r0, #4
     c3c:	str	r0, [ip]
     c40:	mov	r0, r1
     c44:	bl	d0c <read_bytes>
     c48:	cmp	r0, #0
     c4c:	beq	c5c <read_bits+0x51c>
     c50:	mvn	r0, #0
     c54:	str	r0, [fp, #-20]	; 0xffffffec
     c58:	b	d00 <read_bits+0x5c0>
     c5c:	ldrb	r0, [fp, #-62]	; 0xffffffc2
     c60:	strb	r0, [fp, #-72]	; 0xffffffb8
     c64:	ldrb	r0, [fp, #-63]	; 0xffffffc1
     c68:	strb	r0, [fp, #-71]	; 0xffffffb9
     c6c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
     c70:	strb	r0, [fp, #-70]	; 0xffffffba
     c74:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     c78:	strb	r0, [fp, #-69]	; 0xffffffbb
     c7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     c80:	ldr	r1, [fp, #-72]	; 0xffffffb8
     c84:	lsr	r0, r1, r0
     c88:	str	r0, [fp, #-72]	; 0xffffffb8
     c8c:	ldrb	r0, [fp, #-70]	; 0xffffffba
     c90:	ldr	r1, [fp, #16]
     c94:	strb	r0, [r1]
     c98:	ldrb	r0, [fp, #-71]	; 0xffffffb9
     c9c:	ldr	r1, [fp, #16]
     ca0:	strb	r0, [r1, #1]
     ca4:	ldrb	r0, [fp, #-72]	; 0xffffffb8
     ca8:	ldr	r1, [fp, #16]
     cac:	strb	r0, [r1, #2]
     cb0:	ldr	r0, [fp, #16]
     cb4:	add	r0, r0, #3
     cb8:	str	r0, [fp, #16]
     cbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
     cc4:	adds	r0, r0, #24
     cc8:	adc	r1, r1, #0
     ccc:	str	r0, [fp, #-32]	; 0xffffffe0
     cd0:	str	r1, [fp, #-28]	; 0xffffffe4
     cd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     cd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     cdc:	subs	r0, r0, #24
     ce0:	sbc	r1, r1, #0
     ce4:	str	r0, [fp, #-40]	; 0xffffffd8
     ce8:	str	r1, [fp, #-36]	; 0xffffffdc
     cec:	b	bec <read_bits+0x4ac>
     cf0:	b	cf4 <read_bits+0x5b4>
     cf4:	b	cf8 <read_bits+0x5b8>
     cf8:	movw	r0, #0
     cfc:	str	r0, [fp, #-20]	; 0xffffffec
     d00:	ldr	r0, [fp, #-20]	; 0xffffffec
     d04:	sub	sp, fp, #16
     d08:	pop	{r4, r5, r6, sl, fp, pc}

00000d0c <read_bytes>:
     d0c:	push	{fp, lr}
     d10:	mov	fp, sp
     d14:	sub	sp, sp, #128	; 0x80
     d18:	ldr	r1, [fp, #12]
     d1c:	ldr	ip, [fp, #8]
     d20:	ldr	lr, [fp, #16]
     d24:	str	r0, [fp, #-8]
     d28:	str	r3, [fp, #-12]
     d2c:	str	r2, [fp, #-16]
     d30:	str	r1, [fp, #-20]	; 0xffffffec
     d34:	str	ip, [fp, #-24]	; 0xffffffe8
     d38:	ldr	r0, [fp, #-8]
     d3c:	ldr	r0, [r0, #48]	; 0x30
     d40:	movw	r1, #0
     d44:	cmp	r0, r1
     d48:	str	lr, [sp, #36]	; 0x24
     d4c:	beq	e6c <read_bytes+0x160>
     d50:	ldr	r0, [fp, #-16]
     d54:	ldr	r1, [fp, #-12]
     d58:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
     d60:	adds	r0, r0, r2
     d64:	adc	r1, r1, r3
     d68:	ldr	r2, [fp, #-8]
     d6c:	ldr	r3, [r2, #40]	; 0x28
     d70:	ldr	r2, [r2, #44]	; 0x2c
     d74:	subs	r0, r3, r0
     d78:	sbcs	r1, r2, r1
     d7c:	str	r0, [sp, #32]
     d80:	str	r1, [sp, #28]
     d84:	bcs	e4c <read_bytes+0x140>
     d88:	b	d8c <read_bytes+0x80>
     d8c:	ldr	r0, [fp, #-8]
     d90:	ldr	r0, [r0, #16]
     d94:	cmp	r0, #0
     d98:	beq	dac <read_bytes+0xa0>
     d9c:	ldr	r0, [fp, #-8]
     da0:	ldr	r0, [r0, #16]
     da4:	cmp	r0, #1
     da8:	bne	dc8 <read_bytes+0xbc>
     dac:	mvn	r0, #300	; 0x12c
     db0:	movw	r1, #0
     db4:	movt	r1, #0
     db8:	bl	0 <coda_set_error>
     dbc:	mvn	r0, #0
     dc0:	str	r0, [fp, #-4]
     dc4:	b	f68 <read_bytes+0x25c>
     dc8:	add	r2, sp, #41	; 0x29
     dcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     dd0:	ldr	r1, [fp, #-20]	; 0xffffffec
     dd4:	sub	r3, fp, #45	; 0x2d
     dd8:	str	r2, [sp, #24]
     ddc:	mov	r2, r3
     de0:	bl	0 <coda_str64>
     de4:	ldr	r0, [fp, #-16]
     de8:	ldr	r1, [fp, #-12]
     dec:	add	r2, sp, #62	; 0x3e
     df0:	bl	0 <coda_str64>
     df4:	ldr	r0, [fp, #-8]
     df8:	ldr	r1, [r0, #40]	; 0x28
     dfc:	ldr	r0, [r0, #44]	; 0x2c
     e00:	str	r0, [sp, #20]
     e04:	mov	r0, r1
     e08:	ldr	r1, [sp, #20]
     e0c:	ldr	r2, [sp, #24]
     e10:	bl	0 <coda_str64>
     e14:	add	r0, sp, #41	; 0x29
     e18:	add	r3, sp, #62	; 0x3e
     e1c:	sub	r2, fp, #45	; 0x2d
     e20:	mvn	r1, #300	; 0x12c
     e24:	str	r0, [sp, #16]
     e28:	mov	r0, r1
     e2c:	movw	r1, #0
     e30:	movt	r1, #0
     e34:	ldr	lr, [sp, #16]
     e38:	str	lr, [sp]
     e3c:	bl	0 <coda_set_error>
     e40:	mvn	r0, #0
     e44:	str	r0, [fp, #-4]
     e48:	b	f68 <read_bytes+0x25c>
     e4c:	ldr	r0, [fp, #16]
     e50:	ldr	r1, [fp, #-8]
     e54:	ldr	r1, [r1, #48]	; 0x30
     e58:	ldr	r2, [fp, #-16]
     e5c:	add	r1, r1, r2
     e60:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e64:	bl	0 <memcpy>
     e68:	b	f60 <read_bytes+0x254>
     e6c:	ldr	r0, [fp, #-8]
     e70:	ldr	r0, [r0, #16]
     e74:	cmp	r0, #0
     e78:	beq	e8c <read_bytes+0x180>
     e7c:	ldr	r0, [fp, #-8]
     e80:	ldr	r0, [r0, #16]
     e84:	cmp	r0, #1
     e88:	bne	e90 <read_bytes+0x184>
     e8c:	b	eb0 <read_bytes+0x1a4>
     e90:	movw	r0, #0
     e94:	movt	r0, #0
     e98:	movw	r1, #0
     e9c:	movt	r1, #0
     ea0:	movw	r2, #83	; 0x53
     ea4:	movw	r3, #0
     ea8:	movt	r3, #0
     eac:	bl	0 <__assert_fail>
     eb0:	ldr	r0, [fp, #-16]
     eb4:	ldr	r1, [fp, #-12]
     eb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ec0:	adds	r0, r0, r2
     ec4:	adc	r1, r1, r3
     ec8:	ldr	r2, [fp, #-8]
     ecc:	ldr	r3, [r2, #8]
     ed0:	ldr	r2, [r2, #12]
     ed4:	subs	r0, r3, r0
     ed8:	sbcs	r1, r2, r1
     edc:	str	r0, [sp, #12]
     ee0:	str	r1, [sp, #8]
     ee4:	bcs	f08 <read_bytes+0x1fc>
     ee8:	b	eec <read_bytes+0x1e0>
     eec:	mvn	r0, #300	; 0x12c
     ef0:	movw	r1, #0
     ef4:	movt	r1, #0
     ef8:	bl	0 <coda_set_error>
     efc:	mvn	r0, #0
     f00:	str	r0, [fp, #-4]
     f04:	b	f68 <read_bytes+0x25c>
     f08:	ldr	r0, [fp, #-8]
     f0c:	ldr	r0, [r0, #56]	; 0x38
     f10:	ldr	r1, [fp, #16]
     f14:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f18:	ldr	r3, [fp, #-16]
     f1c:	bl	0 <pread>
     f20:	cmp	r0, #0
     f24:	bge	f5c <read_bytes+0x250>
     f28:	bl	0 <__errno_location>
     f2c:	ldr	r0, [r0]
     f30:	bl	0 <strerror>
     f34:	mvn	lr, #21
     f38:	str	r0, [sp, #4]
     f3c:	mov	r0, lr
     f40:	movw	r1, #0
     f44:	movt	r1, #0
     f48:	ldr	r2, [sp, #4]
     f4c:	bl	0 <coda_set_error>
     f50:	mvn	r0, #0
     f54:	str	r0, [fp, #-4]
     f58:	b	f68 <read_bytes+0x25c>
     f5c:	b	f60 <read_bytes+0x254>
     f60:	movw	r0, #0
     f64:	str	r0, [fp, #-4]
     f68:	ldr	r0, [fp, #-4]
     f6c:	mov	sp, fp
     f70:	pop	{fp, pc}

00000f74 <coda_bin_cursor_read_uint8>:
     f74:	push	{r4, sl, fp, lr}
     f78:	add	fp, sp, #8
     f7c:	sub	sp, sp, #128	; 0x80
     f80:	str	r0, [fp, #-16]
     f84:	str	r1, [fp, #-20]	; 0xffffffec
     f88:	ldr	r0, [fp, #-16]
     f8c:	add	r1, r0, #8
     f90:	ldr	r0, [r0, #4]
     f94:	sub	r0, r0, #1
     f98:	add	r0, r1, r0, lsl #4
     f9c:	ldr	r0, [r0]
     fa0:	ldr	r0, [r0]
     fa4:	cmp	r0, #100	; 0x64
     fa8:	bcs	fcc <coda_bin_cursor_read_uint8+0x58>
     fac:	ldr	r0, [fp, #-16]
     fb0:	add	r1, r0, #8
     fb4:	ldr	r0, [r0, #4]
     fb8:	sub	r0, r0, #1
     fbc:	add	r0, r1, r0, lsl #4
     fc0:	ldr	r0, [r0]
     fc4:	str	r0, [sp, #48]	; 0x30
     fc8:	b	fec <coda_bin_cursor_read_uint8+0x78>
     fcc:	ldr	r0, [fp, #-16]
     fd0:	add	r1, r0, #8
     fd4:	ldr	r0, [r0, #4]
     fd8:	sub	r0, r0, #1
     fdc:	add	r0, r1, r0, lsl #4
     fe0:	ldr	r0, [r0]
     fe4:	ldr	r0, [r0, #4]
     fe8:	str	r0, [sp, #48]	; 0x30
     fec:	ldr	r0, [sp, #48]	; 0x30
     ff0:	str	r0, [fp, #-24]	; 0xffffffe8
     ff4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ff8:	ldr	r1, [r0, #24]
     ffc:	ldr	r0, [r0, #28]
    1000:	str	r0, [fp, #-28]	; 0xffffffe4
    1004:	str	r1, [fp, #-32]	; 0xffffffe0
    1008:	ldr	r0, [fp, #-16]
    100c:	ldr	r1, [r0, #4]
    1010:	ldr	r1, [r0, r1, lsl #4]!
    1014:	ldr	r0, [r0, #4]
    1018:	str	r0, [fp, #-36]	; 0xffffffdc
    101c:	str	r1, [fp, #-40]	; 0xffffffd8
    1020:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1024:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1028:	and	r0, r0, r1
    102c:	cmn	r0, #1
    1030:	bne	112c <coda_bin_cursor_read_uint8+0x1b8>
    1034:	b	1038 <coda_bin_cursor_read_uint8+0xc4>
    1038:	ldr	r0, [fp, #-16]
    103c:	sub	r1, fp, #32
    1040:	bl	0 <coda_bin_cursor_get_bit_size>
    1044:	cmp	r0, #0
    1048:	beq	1058 <coda_bin_cursor_read_uint8+0xe4>
    104c:	mvn	r0, #0
    1050:	str	r0, [fp, #-12]
    1054:	b	1278 <coda_bin_cursor_read_uint8+0x304>
    1058:	ldr	r0, [fp, #-28]	; 0xffffffe4
    105c:	cmp	r0, #0
    1060:	blt	1088 <coda_bin_cursor_read_uint8+0x114>
    1064:	b	1068 <coda_bin_cursor_read_uint8+0xf4>
    1068:	ldr	r0, [fp, #-32]	; 0xffffffe0
    106c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1070:	subs	r0, r0, #9
    1074:	sbcs	r1, r1, #0
    1078:	str	r0, [sp, #44]	; 0x2c
    107c:	str	r1, [sp, #40]	; 0x28
    1080:	blt	1128 <coda_bin_cursor_read_uint8+0x1b4>
    1084:	b	1088 <coda_bin_cursor_read_uint8+0x114>
    1088:	ldr	r0, [pc, #500]	; 1284 <coda_bin_cursor_read_uint8+0x310>
    108c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1090:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1094:	sub	r3, fp, #61	; 0x3d
    1098:	str	r0, [sp, #36]	; 0x24
    109c:	mov	r0, r1
    10a0:	mov	r1, r2
    10a4:	mov	r2, r3
    10a8:	str	r3, [sp, #32]
    10ac:	bl	0 <coda_str64>
    10b0:	ldr	r0, [fp, #-16]
    10b4:	ldr	r1, [r0, #4]
    10b8:	ldr	r1, [r0, r1, lsl #4]!
    10bc:	ldr	r0, [r0, #4]
    10c0:	lsr	r1, r1, #3
    10c4:	orr	r1, r1, r0, lsl #29
    10c8:	asr	r0, r0, #3
    10cc:	add	r2, sp, #54	; 0x36
    10d0:	str	r0, [sp, #28]
    10d4:	mov	r0, r1
    10d8:	ldr	r1, [sp, #28]
    10dc:	str	r2, [sp, #24]
    10e0:	bl	0 <coda_str64>
    10e4:	ldr	r0, [fp, #-16]
    10e8:	ldr	r1, [r0, #4]
    10ec:	ldr	r0, [r0, r1, lsl #4]
    10f0:	and	r0, r0, #7
    10f4:	ldr	r1, [sp, #36]	; 0x24
    10f8:	str	r0, [sp, #20]
    10fc:	mov	r0, r1
    1100:	movw	r1, #0
    1104:	movt	r1, #0
    1108:	ldr	r2, [sp, #32]
    110c:	ldr	r3, [sp, #24]
    1110:	ldr	lr, [sp, #20]
    1114:	str	lr, [sp]
    1118:	bl	0 <coda_set_error>
    111c:	mvn	r0, #0
    1120:	str	r0, [fp, #-12]
    1124:	b	1278 <coda_bin_cursor_read_uint8+0x304>
    1128:	b	112c <coda_bin_cursor_read_uint8+0x1b8>
    112c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1130:	tst	r0, #7
    1134:	bne	1158 <coda_bin_cursor_read_uint8+0x1e4>
    1138:	b	113c <coda_bin_cursor_read_uint8+0x1c8>
    113c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1140:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1144:	eor	r0, r0, #8
    1148:	orr	r0, r0, r1
    114c:	cmp	r0, #0
    1150:	beq	1218 <coda_bin_cursor_read_uint8+0x2a4>
    1154:	b	1158 <coda_bin_cursor_read_uint8+0x1e4>
    1158:	ldr	r0, [fp, #-32]	; 0xffffffe0
    115c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1160:	lsr	r2, r0, #3
    1164:	orr	r2, r2, r1, lsl #29
    1168:	asr	r1, r1, #3
    116c:	and	r0, r0, #7
    1170:	adds	r3, r2, #1
    1174:	adc	ip, r1, #0
    1178:	cmp	r0, #0
    117c:	movne	r2, r3
    1180:	cmp	r0, #0
    1184:	movne	r1, ip
    1188:	rsbs	r0, r2, #1
    118c:	rscs	r1, r1, #0
    1190:	str	r0, [sp, #16]
    1194:	str	r1, [sp, #12]
    1198:	blt	11a4 <coda_bin_cursor_read_uint8+0x230>
    119c:	b	11a0 <coda_bin_cursor_read_uint8+0x22c>
    11a0:	b	11c4 <coda_bin_cursor_read_uint8+0x250>
    11a4:	movw	r0, #0
    11a8:	movt	r0, #0
    11ac:	movw	r1, #0
    11b0:	movt	r1, #0
    11b4:	movw	r2, #233	; 0xe9
    11b8:	movw	r3, #0
    11bc:	movt	r3, #0
    11c0:	bl	0 <__assert_fail>
    11c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    11c8:	mov	r1, #0
    11cc:	strb	r1, [r0]
    11d0:	ldr	r0, [fp, #-16]
    11d4:	ldr	r0, [r0]
    11d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    11dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    11e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    11e4:	ldr	ip, [fp, #-28]	; 0xffffffe4
    11e8:	ldr	lr, [fp, #-20]	; 0xffffffec
    11ec:	mov	r4, sp
    11f0:	str	lr, [r4, #8]
    11f4:	str	ip, [r4, #4]
    11f8:	str	r1, [r4]
    11fc:	bl	740 <read_bits>
    1200:	cmp	r0, #0
    1204:	beq	1214 <coda_bin_cursor_read_uint8+0x2a0>
    1208:	mvn	r0, #0
    120c:	str	r0, [fp, #-12]
    1210:	b	1278 <coda_bin_cursor_read_uint8+0x304>
    1214:	b	1270 <coda_bin_cursor_read_uint8+0x2fc>
    1218:	ldr	r0, [fp, #-16]
    121c:	ldr	r0, [r0]
    1220:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1224:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1228:	lsr	r1, r1, #3
    122c:	orr	r1, r1, r2, lsl #29
    1230:	asr	r3, r2, #3
    1234:	ldr	r2, [fp, #-20]	; 0xffffffec
    1238:	mov	ip, sp
    123c:	str	r2, [ip, #8]
    1240:	mov	r2, #0
    1244:	str	r2, [ip, #4]
    1248:	mov	r2, #1
    124c:	str	r2, [ip]
    1250:	mov	r2, r1
    1254:	bl	d0c <read_bytes>
    1258:	cmp	r0, #0
    125c:	beq	126c <coda_bin_cursor_read_uint8+0x2f8>
    1260:	mvn	r0, #0
    1264:	str	r0, [fp, #-12]
    1268:	b	1278 <coda_bin_cursor_read_uint8+0x304>
    126c:	b	1270 <coda_bin_cursor_read_uint8+0x2fc>
    1270:	movw	r0, #0
    1274:	str	r0, [fp, #-12]
    1278:	ldr	r0, [fp, #-12]
    127c:	sub	sp, fp, #8
    1280:	pop	{r4, sl, fp, pc}
    1284:	.word	0xfffffed4

00001288 <coda_bin_cursor_read_int16>:
    1288:	push	{r4, sl, fp, lr}
    128c:	add	fp, sp, #8
    1290:	sub	sp, sp, #144	; 0x90
    1294:	str	r0, [fp, #-16]
    1298:	str	r1, [fp, #-20]	; 0xffffffec
    129c:	ldr	r0, [fp, #-16]
    12a0:	add	r1, r0, #8
    12a4:	ldr	r0, [r0, #4]
    12a8:	sub	r0, r0, #1
    12ac:	add	r0, r1, r0, lsl #4
    12b0:	ldr	r0, [r0]
    12b4:	ldr	r0, [r0]
    12b8:	cmp	r0, #100	; 0x64
    12bc:	bcs	12e0 <coda_bin_cursor_read_int16+0x58>
    12c0:	ldr	r0, [fp, #-16]
    12c4:	add	r1, r0, #8
    12c8:	ldr	r0, [r0, #4]
    12cc:	sub	r0, r0, #1
    12d0:	add	r0, r1, r0, lsl #4
    12d4:	ldr	r0, [r0]
    12d8:	str	r0, [sp, #48]	; 0x30
    12dc:	b	1300 <coda_bin_cursor_read_int16+0x78>
    12e0:	ldr	r0, [fp, #-16]
    12e4:	add	r1, r0, #8
    12e8:	ldr	r0, [r0, #4]
    12ec:	sub	r0, r0, #1
    12f0:	add	r0, r1, r0, lsl #4
    12f4:	ldr	r0, [r0]
    12f8:	ldr	r0, [r0, #4]
    12fc:	str	r0, [sp, #48]	; 0x30
    1300:	ldr	r0, [sp, #48]	; 0x30
    1304:	str	r0, [fp, #-24]	; 0xffffffe8
    1308:	ldr	r0, [fp, #-24]	; 0xffffffe8
    130c:	ldr	r1, [r0, #24]
    1310:	ldr	r0, [r0, #28]
    1314:	str	r0, [fp, #-28]	; 0xffffffe4
    1318:	str	r1, [fp, #-32]	; 0xffffffe0
    131c:	ldr	r0, [fp, #-16]
    1320:	ldr	r1, [r0, #4]
    1324:	ldr	r1, [r0, r1, lsl #4]!
    1328:	ldr	r0, [r0, #4]
    132c:	str	r0, [fp, #-36]	; 0xffffffdc
    1330:	str	r1, [fp, #-40]	; 0xffffffd8
    1334:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1338:	ldr	r0, [r0, #44]	; 0x2c
    133c:	str	r0, [fp, #-44]	; 0xffffffd4
    1340:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1344:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1348:	and	r0, r0, r1
    134c:	cmn	r0, #1
    1350:	bne	144c <coda_bin_cursor_read_int16+0x1c4>
    1354:	b	1358 <coda_bin_cursor_read_int16+0xd0>
    1358:	ldr	r0, [fp, #-16]
    135c:	sub	r1, fp, #32
    1360:	bl	0 <coda_bin_cursor_get_bit_size>
    1364:	cmp	r0, #0
    1368:	beq	1378 <coda_bin_cursor_read_int16+0xf0>
    136c:	mvn	r0, #0
    1370:	str	r0, [fp, #-12]
    1374:	b	1614 <coda_bin_cursor_read_int16+0x38c>
    1378:	ldr	r0, [fp, #-28]	; 0xffffffe4
    137c:	cmp	r0, #0
    1380:	blt	13a8 <coda_bin_cursor_read_int16+0x120>
    1384:	b	1388 <coda_bin_cursor_read_int16+0x100>
    1388:	ldr	r0, [fp, #-32]	; 0xffffffe0
    138c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1390:	subs	r0, r0, #17
    1394:	sbcs	r1, r1, #0
    1398:	str	r0, [sp, #44]	; 0x2c
    139c:	str	r1, [sp, #40]	; 0x28
    13a0:	blt	1448 <coda_bin_cursor_read_int16+0x1c0>
    13a4:	b	13a8 <coda_bin_cursor_read_int16+0x120>
    13a8:	ldr	r0, [pc, #624]	; 1620 <coda_bin_cursor_read_int16+0x398>
    13ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
    13b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    13b4:	sub	r3, fp, #65	; 0x41
    13b8:	str	r0, [sp, #36]	; 0x24
    13bc:	mov	r0, r1
    13c0:	mov	r1, r2
    13c4:	mov	r2, r3
    13c8:	str	r3, [sp, #32]
    13cc:	bl	0 <coda_str64>
    13d0:	ldr	r0, [fp, #-16]
    13d4:	ldr	r1, [r0, #4]
    13d8:	ldr	r1, [r0, r1, lsl #4]!
    13dc:	ldr	r0, [r0, #4]
    13e0:	lsr	r1, r1, #3
    13e4:	orr	r1, r1, r0, lsl #29
    13e8:	asr	r0, r0, #3
    13ec:	add	r2, sp, #66	; 0x42
    13f0:	str	r0, [sp, #28]
    13f4:	mov	r0, r1
    13f8:	ldr	r1, [sp, #28]
    13fc:	str	r2, [sp, #24]
    1400:	bl	0 <coda_str64>
    1404:	ldr	r0, [fp, #-16]
    1408:	ldr	r1, [r0, #4]
    140c:	ldr	r0, [r0, r1, lsl #4]
    1410:	and	r0, r0, #7
    1414:	ldr	r1, [sp, #36]	; 0x24
    1418:	str	r0, [sp, #20]
    141c:	mov	r0, r1
    1420:	movw	r1, #0
    1424:	movt	r1, #0
    1428:	ldr	r2, [sp, #32]
    142c:	ldr	r3, [sp, #24]
    1430:	ldr	lr, [sp, #20]
    1434:	str	lr, [sp]
    1438:	bl	0 <coda_set_error>
    143c:	mvn	r0, #0
    1440:	str	r0, [fp, #-12]
    1444:	b	1614 <coda_bin_cursor_read_int16+0x38c>
    1448:	b	144c <coda_bin_cursor_read_int16+0x1c4>
    144c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1450:	tst	r0, #7
    1454:	bne	1478 <coda_bin_cursor_read_int16+0x1f0>
    1458:	b	145c <coda_bin_cursor_read_int16+0x1d4>
    145c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1460:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1464:	eor	r0, r0, #16
    1468:	orr	r0, r0, r1
    146c:	cmp	r0, #0
    1470:	beq	150c <coda_bin_cursor_read_int16+0x284>
    1474:	b	1478 <coda_bin_cursor_read_int16+0x1f0>
    1478:	ldr	r0, [fp, #-20]	; 0xffffffec
    147c:	str	r0, [sp, #60]	; 0x3c
    1480:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1484:	cmp	r0, #0
    1488:	bne	14b8 <coda_bin_cursor_read_int16+0x230>
    148c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1490:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1494:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1498:	lsr	r3, r1, #3
    149c:	orr	r2, r3, r2, lsl #29
    14a0:	add	r3, r2, #1
    14a4:	tst	r1, #7
    14a8:	movne	r2, r3
    14ac:	rsb	r1, r2, #2
    14b0:	add	r0, r0, r1
    14b4:	str	r0, [sp, #60]	; 0x3c
    14b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    14bc:	mov	r1, #0
    14c0:	strh	r1, [r0]
    14c4:	ldr	r0, [fp, #-16]
    14c8:	ldr	r0, [r0]
    14cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    14d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    14d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    14d8:	ldr	ip, [fp, #-28]	; 0xffffffe4
    14dc:	ldr	lr, [sp, #60]	; 0x3c
    14e0:	mov	r4, sp
    14e4:	str	lr, [r4, #8]
    14e8:	str	ip, [r4, #4]
    14ec:	str	r1, [r4]
    14f0:	bl	740 <read_bits>
    14f4:	cmp	r0, #0
    14f8:	beq	1508 <coda_bin_cursor_read_int16+0x280>
    14fc:	mvn	r0, #0
    1500:	str	r0, [fp, #-12]
    1504:	b	1614 <coda_bin_cursor_read_int16+0x38c>
    1508:	b	1564 <coda_bin_cursor_read_int16+0x2dc>
    150c:	ldr	r0, [fp, #-16]
    1510:	ldr	r0, [r0]
    1514:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1518:	ldr	r2, [fp, #-36]	; 0xffffffdc
    151c:	lsr	r1, r1, #3
    1520:	orr	r1, r1, r2, lsl #29
    1524:	asr	r3, r2, #3
    1528:	ldr	r2, [fp, #-20]	; 0xffffffec
    152c:	mov	ip, sp
    1530:	str	r2, [ip, #8]
    1534:	mov	r2, #0
    1538:	str	r2, [ip, #4]
    153c:	mov	r2, #2
    1540:	str	r2, [ip]
    1544:	mov	r2, r1
    1548:	bl	d0c <read_bytes>
    154c:	cmp	r0, #0
    1550:	beq	1560 <coda_bin_cursor_read_int16+0x2d8>
    1554:	mvn	r0, #0
    1558:	str	r0, [fp, #-12]
    155c:	b	1614 <coda_bin_cursor_read_int16+0x38c>
    1560:	b	1564 <coda_bin_cursor_read_int16+0x2dc>
    1564:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1568:	cmp	r0, #0
    156c:	bne	1594 <coda_bin_cursor_read_int16+0x30c>
    1570:	ldr	r0, [fp, #-20]	; 0xffffffec
    1574:	ldrb	r0, [r0, #1]
    1578:	strb	r0, [sp, #56]	; 0x38
    157c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1580:	ldrb	r0, [r0]
    1584:	strb	r0, [sp, #57]	; 0x39
    1588:	ldrh	r0, [sp, #56]	; 0x38
    158c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1590:	strh	r0, [r1]
    1594:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1598:	ldr	r1, [fp, #-28]	; 0xffffffe4
    159c:	rsbs	r0, r0, #15
    15a0:	rscs	r1, r1, #0
    15a4:	str	r0, [sp, #16]
    15a8:	str	r1, [sp, #12]
    15ac:	blt	160c <coda_bin_cursor_read_int16+0x384>
    15b0:	b	15b4 <coda_bin_cursor_read_int16+0x32c>
    15b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    15b8:	ldrh	r0, [r0]
    15bc:	strh	r0, [sp, #54]	; 0x36
    15c0:	ldrh	r0, [sp, #54]	; 0x36
    15c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    15c8:	sub	r1, r1, #1
    15cc:	movw	r2, #1
    15d0:	lsl	r1, r2, r1
    15d4:	and	r0, r0, r1
    15d8:	cmp	r0, #0
    15dc:	beq	1608 <coda_bin_cursor_read_int16+0x380>
    15e0:	ldrh	r0, [sp, #54]	; 0x36
    15e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    15e8:	movw	r2, #1
    15ec:	lsl	r1, r2, r1
    15f0:	sub	r1, r1, #1
    15f4:	mvn	r2, #0
    15f8:	eor	r1, r1, r2
    15fc:	orr	r0, r0, r1
    1600:	ldr	r1, [fp, #-20]	; 0xffffffec
    1604:	strh	r0, [r1]
    1608:	b	160c <coda_bin_cursor_read_int16+0x384>
    160c:	movw	r0, #0
    1610:	str	r0, [fp, #-12]
    1614:	ldr	r0, [fp, #-12]
    1618:	sub	sp, fp, #8
    161c:	pop	{r4, sl, fp, pc}
    1620:	.word	0xfffffed4

00001624 <coda_bin_cursor_read_uint16>:
    1624:	push	{r4, sl, fp, lr}
    1628:	add	fp, sp, #8
    162c:	sub	sp, sp, #136	; 0x88
    1630:	str	r0, [fp, #-16]
    1634:	str	r1, [fp, #-20]	; 0xffffffec
    1638:	ldr	r0, [fp, #-16]
    163c:	add	r1, r0, #8
    1640:	ldr	r0, [r0, #4]
    1644:	sub	r0, r0, #1
    1648:	add	r0, r1, r0, lsl #4
    164c:	ldr	r0, [r0]
    1650:	ldr	r0, [r0]
    1654:	cmp	r0, #100	; 0x64
    1658:	bcs	167c <coda_bin_cursor_read_uint16+0x58>
    165c:	ldr	r0, [fp, #-16]
    1660:	add	r1, r0, #8
    1664:	ldr	r0, [r0, #4]
    1668:	sub	r0, r0, #1
    166c:	add	r0, r1, r0, lsl #4
    1670:	ldr	r0, [r0]
    1674:	str	r0, [sp, #44]	; 0x2c
    1678:	b	169c <coda_bin_cursor_read_uint16+0x78>
    167c:	ldr	r0, [fp, #-16]
    1680:	add	r1, r0, #8
    1684:	ldr	r0, [r0, #4]
    1688:	sub	r0, r0, #1
    168c:	add	r0, r1, r0, lsl #4
    1690:	ldr	r0, [r0]
    1694:	ldr	r0, [r0, #4]
    1698:	str	r0, [sp, #44]	; 0x2c
    169c:	ldr	r0, [sp, #44]	; 0x2c
    16a0:	str	r0, [fp, #-24]	; 0xffffffe8
    16a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16a8:	ldr	r1, [r0, #24]
    16ac:	ldr	r0, [r0, #28]
    16b0:	str	r0, [fp, #-28]	; 0xffffffe4
    16b4:	str	r1, [fp, #-32]	; 0xffffffe0
    16b8:	ldr	r0, [fp, #-16]
    16bc:	ldr	r1, [r0, #4]
    16c0:	ldr	r1, [r0, r1, lsl #4]!
    16c4:	ldr	r0, [r0, #4]
    16c8:	str	r0, [fp, #-36]	; 0xffffffdc
    16cc:	str	r1, [fp, #-40]	; 0xffffffd8
    16d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16d4:	ldr	r0, [r0, #44]	; 0x2c
    16d8:	str	r0, [fp, #-44]	; 0xffffffd4
    16dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    16e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    16e4:	and	r0, r0, r1
    16e8:	cmn	r0, #1
    16ec:	bne	17e8 <coda_bin_cursor_read_uint16+0x1c4>
    16f0:	b	16f4 <coda_bin_cursor_read_uint16+0xd0>
    16f4:	ldr	r0, [fp, #-16]
    16f8:	sub	r1, fp, #32
    16fc:	bl	0 <coda_bin_cursor_get_bit_size>
    1700:	cmp	r0, #0
    1704:	beq	1714 <coda_bin_cursor_read_uint16+0xf0>
    1708:	mvn	r0, #0
    170c:	str	r0, [fp, #-12]
    1710:	b	1938 <coda_bin_cursor_read_uint16+0x314>
    1714:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1718:	cmp	r0, #0
    171c:	blt	1744 <coda_bin_cursor_read_uint16+0x120>
    1720:	b	1724 <coda_bin_cursor_read_uint16+0x100>
    1724:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1728:	ldr	r1, [fp, #-28]	; 0xffffffe4
    172c:	subs	r0, r0, #17
    1730:	sbcs	r1, r1, #0
    1734:	str	r0, [sp, #40]	; 0x28
    1738:	str	r1, [sp, #36]	; 0x24
    173c:	blt	17e4 <coda_bin_cursor_read_uint16+0x1c0>
    1740:	b	1744 <coda_bin_cursor_read_uint16+0x120>
    1744:	ldr	r0, [pc, #504]	; 1944 <coda_bin_cursor_read_uint16+0x320>
    1748:	ldr	r1, [fp, #-32]	; 0xffffffe0
    174c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1750:	sub	r3, fp, #65	; 0x41
    1754:	str	r0, [sp, #32]
    1758:	mov	r0, r1
    175c:	mov	r1, r2
    1760:	mov	r2, r3
    1764:	str	r3, [sp, #28]
    1768:	bl	0 <coda_str64>
    176c:	ldr	r0, [fp, #-16]
    1770:	ldr	r1, [r0, #4]
    1774:	ldr	r1, [r0, r1, lsl #4]!
    1778:	ldr	r0, [r0, #4]
    177c:	lsr	r1, r1, #3
    1780:	orr	r1, r1, r0, lsl #29
    1784:	asr	r0, r0, #3
    1788:	add	r2, sp, #58	; 0x3a
    178c:	str	r0, [sp, #24]
    1790:	mov	r0, r1
    1794:	ldr	r1, [sp, #24]
    1798:	str	r2, [sp, #20]
    179c:	bl	0 <coda_str64>
    17a0:	ldr	r0, [fp, #-16]
    17a4:	ldr	r1, [r0, #4]
    17a8:	ldr	r0, [r0, r1, lsl #4]
    17ac:	and	r0, r0, #7
    17b0:	ldr	r1, [sp, #32]
    17b4:	str	r0, [sp, #16]
    17b8:	mov	r0, r1
    17bc:	movw	r1, #0
    17c0:	movt	r1, #0
    17c4:	ldr	r2, [sp, #28]
    17c8:	ldr	r3, [sp, #20]
    17cc:	ldr	lr, [sp, #16]
    17d0:	str	lr, [sp]
    17d4:	bl	0 <coda_set_error>
    17d8:	mvn	r0, #0
    17dc:	str	r0, [fp, #-12]
    17e0:	b	1938 <coda_bin_cursor_read_uint16+0x314>
    17e4:	b	17e8 <coda_bin_cursor_read_uint16+0x1c4>
    17e8:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    17ec:	tst	r0, #7
    17f0:	bne	1814 <coda_bin_cursor_read_uint16+0x1f0>
    17f4:	b	17f8 <coda_bin_cursor_read_uint16+0x1d4>
    17f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    17fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1800:	eor	r0, r0, #16
    1804:	orr	r0, r0, r1
    1808:	cmp	r0, #0
    180c:	beq	18a8 <coda_bin_cursor_read_uint16+0x284>
    1810:	b	1814 <coda_bin_cursor_read_uint16+0x1f0>
    1814:	ldr	r0, [fp, #-20]	; 0xffffffec
    1818:	str	r0, [sp, #52]	; 0x34
    181c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1820:	cmp	r0, #0
    1824:	bne	1854 <coda_bin_cursor_read_uint16+0x230>
    1828:	ldr	r0, [fp, #-20]	; 0xffffffec
    182c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1830:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1834:	lsr	r3, r1, #3
    1838:	orr	r2, r3, r2, lsl #29
    183c:	add	r3, r2, #1
    1840:	tst	r1, #7
    1844:	movne	r2, r3
    1848:	rsb	r1, r2, #2
    184c:	add	r0, r0, r1
    1850:	str	r0, [sp, #52]	; 0x34
    1854:	ldr	r0, [fp, #-20]	; 0xffffffec
    1858:	mov	r1, #0
    185c:	strh	r1, [r0]
    1860:	ldr	r0, [fp, #-16]
    1864:	ldr	r0, [r0]
    1868:	ldr	r2, [fp, #-40]	; 0xffffffd8
    186c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1870:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1874:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1878:	ldr	lr, [sp, #52]	; 0x34
    187c:	mov	r4, sp
    1880:	str	lr, [r4, #8]
    1884:	str	ip, [r4, #4]
    1888:	str	r1, [r4]
    188c:	bl	740 <read_bits>
    1890:	cmp	r0, #0
    1894:	beq	18a4 <coda_bin_cursor_read_uint16+0x280>
    1898:	mvn	r0, #0
    189c:	str	r0, [fp, #-12]
    18a0:	b	1938 <coda_bin_cursor_read_uint16+0x314>
    18a4:	b	1900 <coda_bin_cursor_read_uint16+0x2dc>
    18a8:	ldr	r0, [fp, #-16]
    18ac:	ldr	r0, [r0]
    18b0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    18b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    18b8:	lsr	r1, r1, #3
    18bc:	orr	r1, r1, r2, lsl #29
    18c0:	asr	r3, r2, #3
    18c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    18c8:	mov	ip, sp
    18cc:	str	r2, [ip, #8]
    18d0:	mov	r2, #0
    18d4:	str	r2, [ip, #4]
    18d8:	mov	r2, #2
    18dc:	str	r2, [ip]
    18e0:	mov	r2, r1
    18e4:	bl	d0c <read_bytes>
    18e8:	cmp	r0, #0
    18ec:	beq	18fc <coda_bin_cursor_read_uint16+0x2d8>
    18f0:	mvn	r0, #0
    18f4:	str	r0, [fp, #-12]
    18f8:	b	1938 <coda_bin_cursor_read_uint16+0x314>
    18fc:	b	1900 <coda_bin_cursor_read_uint16+0x2dc>
    1900:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1904:	cmp	r0, #0
    1908:	bne	1930 <coda_bin_cursor_read_uint16+0x30c>
    190c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1910:	ldrb	r0, [r0, #1]
    1914:	strb	r0, [sp, #48]	; 0x30
    1918:	ldr	r0, [fp, #-20]	; 0xffffffec
    191c:	ldrb	r0, [r0]
    1920:	strb	r0, [sp, #49]	; 0x31
    1924:	ldrh	r0, [sp, #48]	; 0x30
    1928:	ldr	r1, [fp, #-20]	; 0xffffffec
    192c:	strh	r0, [r1]
    1930:	movw	r0, #0
    1934:	str	r0, [fp, #-12]
    1938:	ldr	r0, [fp, #-12]
    193c:	sub	sp, fp, #8
    1940:	pop	{r4, sl, fp, pc}
    1944:	.word	0xfffffed4

00001948 <coda_bin_cursor_read_int32>:
    1948:	push	{r4, sl, fp, lr}
    194c:	add	fp, sp, #8
    1950:	sub	sp, sp, #144	; 0x90
    1954:	str	r0, [fp, #-16]
    1958:	str	r1, [fp, #-20]	; 0xffffffec
    195c:	ldr	r0, [fp, #-16]
    1960:	add	r1, r0, #8
    1964:	ldr	r0, [r0, #4]
    1968:	sub	r0, r0, #1
    196c:	add	r0, r1, r0, lsl #4
    1970:	ldr	r0, [r0]
    1974:	ldr	r0, [r0]
    1978:	cmp	r0, #100	; 0x64
    197c:	bcs	19a0 <coda_bin_cursor_read_int32+0x58>
    1980:	ldr	r0, [fp, #-16]
    1984:	add	r1, r0, #8
    1988:	ldr	r0, [r0, #4]
    198c:	sub	r0, r0, #1
    1990:	add	r0, r1, r0, lsl #4
    1994:	ldr	r0, [r0]
    1998:	str	r0, [sp, #48]	; 0x30
    199c:	b	19c0 <coda_bin_cursor_read_int32+0x78>
    19a0:	ldr	r0, [fp, #-16]
    19a4:	add	r1, r0, #8
    19a8:	ldr	r0, [r0, #4]
    19ac:	sub	r0, r0, #1
    19b0:	add	r0, r1, r0, lsl #4
    19b4:	ldr	r0, [r0]
    19b8:	ldr	r0, [r0, #4]
    19bc:	str	r0, [sp, #48]	; 0x30
    19c0:	ldr	r0, [sp, #48]	; 0x30
    19c4:	str	r0, [fp, #-24]	; 0xffffffe8
    19c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19cc:	ldr	r1, [r0, #24]
    19d0:	ldr	r0, [r0, #28]
    19d4:	str	r0, [fp, #-28]	; 0xffffffe4
    19d8:	str	r1, [fp, #-32]	; 0xffffffe0
    19dc:	ldr	r0, [fp, #-16]
    19e0:	ldr	r1, [r0, #4]
    19e4:	ldr	r1, [r0, r1, lsl #4]!
    19e8:	ldr	r0, [r0, #4]
    19ec:	str	r0, [fp, #-36]	; 0xffffffdc
    19f0:	str	r1, [fp, #-40]	; 0xffffffd8
    19f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19f8:	ldr	r0, [r0, #44]	; 0x2c
    19fc:	str	r0, [fp, #-44]	; 0xffffffd4
    1a00:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1a04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1a08:	and	r0, r0, r1
    1a0c:	cmn	r0, #1
    1a10:	bne	1b0c <coda_bin_cursor_read_int32+0x1c4>
    1a14:	b	1a18 <coda_bin_cursor_read_int32+0xd0>
    1a18:	ldr	r0, [fp, #-16]
    1a1c:	sub	r1, fp, #32
    1a20:	bl	0 <coda_bin_cursor_get_bit_size>
    1a24:	cmp	r0, #0
    1a28:	beq	1a38 <coda_bin_cursor_read_int32+0xf0>
    1a2c:	mvn	r0, #0
    1a30:	str	r0, [fp, #-12]
    1a34:	b	1cec <coda_bin_cursor_read_int32+0x3a4>
    1a38:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1a3c:	cmp	r0, #0
    1a40:	blt	1a68 <coda_bin_cursor_read_int32+0x120>
    1a44:	b	1a48 <coda_bin_cursor_read_int32+0x100>
    1a48:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1a4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1a50:	subs	r0, r0, #33	; 0x21
    1a54:	sbcs	r1, r1, #0
    1a58:	str	r0, [sp, #44]	; 0x2c
    1a5c:	str	r1, [sp, #40]	; 0x28
    1a60:	blt	1b08 <coda_bin_cursor_read_int32+0x1c0>
    1a64:	b	1a68 <coda_bin_cursor_read_int32+0x120>
    1a68:	ldr	r0, [pc, #648]	; 1cf8 <coda_bin_cursor_read_int32+0x3b0>
    1a6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1a70:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1a74:	sub	r3, fp, #65	; 0x41
    1a78:	str	r0, [sp, #36]	; 0x24
    1a7c:	mov	r0, r1
    1a80:	mov	r1, r2
    1a84:	mov	r2, r3
    1a88:	str	r3, [sp, #32]
    1a8c:	bl	0 <coda_str64>
    1a90:	ldr	r0, [fp, #-16]
    1a94:	ldr	r1, [r0, #4]
    1a98:	ldr	r1, [r0, r1, lsl #4]!
    1a9c:	ldr	r0, [r0, #4]
    1aa0:	lsr	r1, r1, #3
    1aa4:	orr	r1, r1, r0, lsl #29
    1aa8:	asr	r0, r0, #3
    1aac:	add	r2, sp, #66	; 0x42
    1ab0:	str	r0, [sp, #28]
    1ab4:	mov	r0, r1
    1ab8:	ldr	r1, [sp, #28]
    1abc:	str	r2, [sp, #24]
    1ac0:	bl	0 <coda_str64>
    1ac4:	ldr	r0, [fp, #-16]
    1ac8:	ldr	r1, [r0, #4]
    1acc:	ldr	r0, [r0, r1, lsl #4]
    1ad0:	and	r0, r0, #7
    1ad4:	ldr	r1, [sp, #36]	; 0x24
    1ad8:	str	r0, [sp, #20]
    1adc:	mov	r0, r1
    1ae0:	movw	r1, #0
    1ae4:	movt	r1, #0
    1ae8:	ldr	r2, [sp, #32]
    1aec:	ldr	r3, [sp, #24]
    1af0:	ldr	lr, [sp, #20]
    1af4:	str	lr, [sp]
    1af8:	bl	0 <coda_set_error>
    1afc:	mvn	r0, #0
    1b00:	str	r0, [fp, #-12]
    1b04:	b	1cec <coda_bin_cursor_read_int32+0x3a4>
    1b08:	b	1b0c <coda_bin_cursor_read_int32+0x1c4>
    1b0c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1b10:	tst	r0, #7
    1b14:	bne	1b38 <coda_bin_cursor_read_int32+0x1f0>
    1b18:	b	1b1c <coda_bin_cursor_read_int32+0x1d4>
    1b1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1b20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1b24:	eor	r0, r0, #32
    1b28:	orr	r0, r0, r1
    1b2c:	cmp	r0, #0
    1b30:	beq	1bcc <coda_bin_cursor_read_int32+0x284>
    1b34:	b	1b38 <coda_bin_cursor_read_int32+0x1f0>
    1b38:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b3c:	str	r0, [sp, #60]	; 0x3c
    1b40:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1b44:	cmp	r0, #0
    1b48:	bne	1b78 <coda_bin_cursor_read_int32+0x230>
    1b4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b50:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1b54:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1b58:	lsr	r3, r1, #3
    1b5c:	orr	r2, r3, r2, lsl #29
    1b60:	add	r3, r2, #1
    1b64:	tst	r1, #7
    1b68:	movne	r2, r3
    1b6c:	rsb	r1, r2, #4
    1b70:	add	r0, r0, r1
    1b74:	str	r0, [sp, #60]	; 0x3c
    1b78:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b7c:	mov	r1, #0
    1b80:	str	r1, [r0]
    1b84:	ldr	r0, [fp, #-16]
    1b88:	ldr	r0, [r0]
    1b8c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1b90:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1b94:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1b98:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1b9c:	ldr	lr, [sp, #60]	; 0x3c
    1ba0:	mov	r4, sp
    1ba4:	str	lr, [r4, #8]
    1ba8:	str	ip, [r4, #4]
    1bac:	str	r1, [r4]
    1bb0:	bl	740 <read_bits>
    1bb4:	cmp	r0, #0
    1bb8:	beq	1bc8 <coda_bin_cursor_read_int32+0x280>
    1bbc:	mvn	r0, #0
    1bc0:	str	r0, [fp, #-12]
    1bc4:	b	1cec <coda_bin_cursor_read_int32+0x3a4>
    1bc8:	b	1c24 <coda_bin_cursor_read_int32+0x2dc>
    1bcc:	ldr	r0, [fp, #-16]
    1bd0:	ldr	r0, [r0]
    1bd4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1bd8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1bdc:	lsr	r1, r1, #3
    1be0:	orr	r1, r1, r2, lsl #29
    1be4:	asr	r3, r2, #3
    1be8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1bec:	mov	ip, sp
    1bf0:	str	r2, [ip, #8]
    1bf4:	mov	r2, #0
    1bf8:	str	r2, [ip, #4]
    1bfc:	mov	r2, #4
    1c00:	str	r2, [ip]
    1c04:	mov	r2, r1
    1c08:	bl	d0c <read_bytes>
    1c0c:	cmp	r0, #0
    1c10:	beq	1c20 <coda_bin_cursor_read_int32+0x2d8>
    1c14:	mvn	r0, #0
    1c18:	str	r0, [fp, #-12]
    1c1c:	b	1cec <coda_bin_cursor_read_int32+0x3a4>
    1c20:	b	1c24 <coda_bin_cursor_read_int32+0x2dc>
    1c24:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1c28:	cmp	r0, #0
    1c2c:	bne	1c6c <coda_bin_cursor_read_int32+0x324>
    1c30:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c34:	ldrb	r0, [r0, #3]
    1c38:	strb	r0, [sp, #56]	; 0x38
    1c3c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c40:	ldrb	r0, [r0, #2]
    1c44:	strb	r0, [sp, #57]	; 0x39
    1c48:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c4c:	ldrb	r0, [r0, #1]
    1c50:	strb	r0, [sp, #58]	; 0x3a
    1c54:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c58:	ldrb	r0, [r0]
    1c5c:	strb	r0, [sp, #59]	; 0x3b
    1c60:	ldr	r0, [sp, #56]	; 0x38
    1c64:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c68:	str	r0, [r1]
    1c6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1c70:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1c74:	rsbs	r0, r0, #31
    1c78:	rscs	r1, r1, #0
    1c7c:	str	r0, [sp, #16]
    1c80:	str	r1, [sp, #12]
    1c84:	blt	1ce4 <coda_bin_cursor_read_int32+0x39c>
    1c88:	b	1c8c <coda_bin_cursor_read_int32+0x344>
    1c8c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c90:	ldr	r0, [r0]
    1c94:	str	r0, [sp, #52]	; 0x34
    1c98:	ldr	r0, [sp, #52]	; 0x34
    1c9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1ca0:	sub	r1, r1, #1
    1ca4:	movw	r2, #1
    1ca8:	lsl	r1, r2, r1
    1cac:	and	r0, r0, r1
    1cb0:	cmp	r0, #0
    1cb4:	beq	1ce0 <coda_bin_cursor_read_int32+0x398>
    1cb8:	ldr	r0, [sp, #52]	; 0x34
    1cbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1cc0:	movw	r2, #1
    1cc4:	lsl	r1, r2, r1
    1cc8:	sub	r1, r1, #1
    1ccc:	mvn	r2, #0
    1cd0:	eor	r1, r1, r2
    1cd4:	orr	r0, r0, r1
    1cd8:	ldr	r1, [fp, #-20]	; 0xffffffec
    1cdc:	str	r0, [r1]
    1ce0:	b	1ce4 <coda_bin_cursor_read_int32+0x39c>
    1ce4:	movw	r0, #0
    1ce8:	str	r0, [fp, #-12]
    1cec:	ldr	r0, [fp, #-12]
    1cf0:	sub	sp, fp, #8
    1cf4:	pop	{r4, sl, fp, pc}
    1cf8:	.word	0xfffffed4

00001cfc <coda_bin_cursor_read_uint32>:
    1cfc:	push	{r4, sl, fp, lr}
    1d00:	add	fp, sp, #8
    1d04:	sub	sp, sp, #136	; 0x88
    1d08:	str	r0, [fp, #-16]
    1d0c:	str	r1, [fp, #-20]	; 0xffffffec
    1d10:	ldr	r0, [fp, #-16]
    1d14:	add	r1, r0, #8
    1d18:	ldr	r0, [r0, #4]
    1d1c:	sub	r0, r0, #1
    1d20:	add	r0, r1, r0, lsl #4
    1d24:	ldr	r0, [r0]
    1d28:	ldr	r0, [r0]
    1d2c:	cmp	r0, #100	; 0x64
    1d30:	bcs	1d54 <coda_bin_cursor_read_uint32+0x58>
    1d34:	ldr	r0, [fp, #-16]
    1d38:	add	r1, r0, #8
    1d3c:	ldr	r0, [r0, #4]
    1d40:	sub	r0, r0, #1
    1d44:	add	r0, r1, r0, lsl #4
    1d48:	ldr	r0, [r0]
    1d4c:	str	r0, [sp, #44]	; 0x2c
    1d50:	b	1d74 <coda_bin_cursor_read_uint32+0x78>
    1d54:	ldr	r0, [fp, #-16]
    1d58:	add	r1, r0, #8
    1d5c:	ldr	r0, [r0, #4]
    1d60:	sub	r0, r0, #1
    1d64:	add	r0, r1, r0, lsl #4
    1d68:	ldr	r0, [r0]
    1d6c:	ldr	r0, [r0, #4]
    1d70:	str	r0, [sp, #44]	; 0x2c
    1d74:	ldr	r0, [sp, #44]	; 0x2c
    1d78:	str	r0, [fp, #-24]	; 0xffffffe8
    1d7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d80:	ldr	r1, [r0, #24]
    1d84:	ldr	r0, [r0, #28]
    1d88:	str	r0, [fp, #-28]	; 0xffffffe4
    1d8c:	str	r1, [fp, #-32]	; 0xffffffe0
    1d90:	ldr	r0, [fp, #-16]
    1d94:	ldr	r1, [r0, #4]
    1d98:	ldr	r1, [r0, r1, lsl #4]!
    1d9c:	ldr	r0, [r0, #4]
    1da0:	str	r0, [fp, #-36]	; 0xffffffdc
    1da4:	str	r1, [fp, #-40]	; 0xffffffd8
    1da8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1dac:	ldr	r0, [r0, #44]	; 0x2c
    1db0:	str	r0, [fp, #-44]	; 0xffffffd4
    1db4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1db8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1dbc:	and	r0, r0, r1
    1dc0:	cmn	r0, #1
    1dc4:	bne	1ec0 <coda_bin_cursor_read_uint32+0x1c4>
    1dc8:	b	1dcc <coda_bin_cursor_read_uint32+0xd0>
    1dcc:	ldr	r0, [fp, #-16]
    1dd0:	sub	r1, fp, #32
    1dd4:	bl	0 <coda_bin_cursor_get_bit_size>
    1dd8:	cmp	r0, #0
    1ddc:	beq	1dec <coda_bin_cursor_read_uint32+0xf0>
    1de0:	mvn	r0, #0
    1de4:	str	r0, [fp, #-12]
    1de8:	b	2028 <coda_bin_cursor_read_uint32+0x32c>
    1dec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1df0:	cmp	r0, #0
    1df4:	blt	1e1c <coda_bin_cursor_read_uint32+0x120>
    1df8:	b	1dfc <coda_bin_cursor_read_uint32+0x100>
    1dfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1e00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1e04:	subs	r0, r0, #33	; 0x21
    1e08:	sbcs	r1, r1, #0
    1e0c:	str	r0, [sp, #40]	; 0x28
    1e10:	str	r1, [sp, #36]	; 0x24
    1e14:	blt	1ebc <coda_bin_cursor_read_uint32+0x1c0>
    1e18:	b	1e1c <coda_bin_cursor_read_uint32+0x120>
    1e1c:	ldr	r0, [pc, #528]	; 2034 <coda_bin_cursor_read_uint32+0x338>
    1e20:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1e24:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1e28:	sub	r3, fp, #65	; 0x41
    1e2c:	str	r0, [sp, #32]
    1e30:	mov	r0, r1
    1e34:	mov	r1, r2
    1e38:	mov	r2, r3
    1e3c:	str	r3, [sp, #28]
    1e40:	bl	0 <coda_str64>
    1e44:	ldr	r0, [fp, #-16]
    1e48:	ldr	r1, [r0, #4]
    1e4c:	ldr	r1, [r0, r1, lsl #4]!
    1e50:	ldr	r0, [r0, #4]
    1e54:	lsr	r1, r1, #3
    1e58:	orr	r1, r1, r0, lsl #29
    1e5c:	asr	r0, r0, #3
    1e60:	add	r2, sp, #58	; 0x3a
    1e64:	str	r0, [sp, #24]
    1e68:	mov	r0, r1
    1e6c:	ldr	r1, [sp, #24]
    1e70:	str	r2, [sp, #20]
    1e74:	bl	0 <coda_str64>
    1e78:	ldr	r0, [fp, #-16]
    1e7c:	ldr	r1, [r0, #4]
    1e80:	ldr	r0, [r0, r1, lsl #4]
    1e84:	and	r0, r0, #7
    1e88:	ldr	r1, [sp, #32]
    1e8c:	str	r0, [sp, #16]
    1e90:	mov	r0, r1
    1e94:	movw	r1, #0
    1e98:	movt	r1, #0
    1e9c:	ldr	r2, [sp, #28]
    1ea0:	ldr	r3, [sp, #20]
    1ea4:	ldr	lr, [sp, #16]
    1ea8:	str	lr, [sp]
    1eac:	bl	0 <coda_set_error>
    1eb0:	mvn	r0, #0
    1eb4:	str	r0, [fp, #-12]
    1eb8:	b	2028 <coda_bin_cursor_read_uint32+0x32c>
    1ebc:	b	1ec0 <coda_bin_cursor_read_uint32+0x1c4>
    1ec0:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    1ec4:	tst	r0, #7
    1ec8:	bne	1eec <coda_bin_cursor_read_uint32+0x1f0>
    1ecc:	b	1ed0 <coda_bin_cursor_read_uint32+0x1d4>
    1ed0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1ed4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1ed8:	eor	r0, r0, #32
    1edc:	orr	r0, r0, r1
    1ee0:	cmp	r0, #0
    1ee4:	beq	1f80 <coda_bin_cursor_read_uint32+0x284>
    1ee8:	b	1eec <coda_bin_cursor_read_uint32+0x1f0>
    1eec:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ef0:	str	r0, [sp, #52]	; 0x34
    1ef4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1ef8:	cmp	r0, #0
    1efc:	bne	1f2c <coda_bin_cursor_read_uint32+0x230>
    1f00:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f04:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1f08:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1f0c:	lsr	r3, r1, #3
    1f10:	orr	r2, r3, r2, lsl #29
    1f14:	add	r3, r2, #1
    1f18:	tst	r1, #7
    1f1c:	movne	r2, r3
    1f20:	rsb	r1, r2, #4
    1f24:	add	r0, r0, r1
    1f28:	str	r0, [sp, #52]	; 0x34
    1f2c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f30:	mov	r1, #0
    1f34:	str	r1, [r0]
    1f38:	ldr	r0, [fp, #-16]
    1f3c:	ldr	r0, [r0]
    1f40:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1f44:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1f48:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1f4c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    1f50:	ldr	lr, [sp, #52]	; 0x34
    1f54:	mov	r4, sp
    1f58:	str	lr, [r4, #8]
    1f5c:	str	ip, [r4, #4]
    1f60:	str	r1, [r4]
    1f64:	bl	740 <read_bits>
    1f68:	cmp	r0, #0
    1f6c:	beq	1f7c <coda_bin_cursor_read_uint32+0x280>
    1f70:	mvn	r0, #0
    1f74:	str	r0, [fp, #-12]
    1f78:	b	2028 <coda_bin_cursor_read_uint32+0x32c>
    1f7c:	b	1fd8 <coda_bin_cursor_read_uint32+0x2dc>
    1f80:	ldr	r0, [fp, #-16]
    1f84:	ldr	r0, [r0]
    1f88:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1f8c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f90:	lsr	r1, r1, #3
    1f94:	orr	r1, r1, r2, lsl #29
    1f98:	asr	r3, r2, #3
    1f9c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fa0:	mov	ip, sp
    1fa4:	str	r2, [ip, #8]
    1fa8:	mov	r2, #0
    1fac:	str	r2, [ip, #4]
    1fb0:	mov	r2, #4
    1fb4:	str	r2, [ip]
    1fb8:	mov	r2, r1
    1fbc:	bl	d0c <read_bytes>
    1fc0:	cmp	r0, #0
    1fc4:	beq	1fd4 <coda_bin_cursor_read_uint32+0x2d8>
    1fc8:	mvn	r0, #0
    1fcc:	str	r0, [fp, #-12]
    1fd0:	b	2028 <coda_bin_cursor_read_uint32+0x32c>
    1fd4:	b	1fd8 <coda_bin_cursor_read_uint32+0x2dc>
    1fd8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1fdc:	cmp	r0, #0
    1fe0:	bne	2020 <coda_bin_cursor_read_uint32+0x324>
    1fe4:	ldr	r0, [fp, #-20]	; 0xffffffec
    1fe8:	ldrb	r0, [r0, #3]
    1fec:	strb	r0, [sp, #48]	; 0x30
    1ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ff4:	ldrb	r0, [r0, #2]
    1ff8:	strb	r0, [sp, #49]	; 0x31
    1ffc:	ldr	r0, [fp, #-20]	; 0xffffffec
    2000:	ldrb	r0, [r0, #1]
    2004:	strb	r0, [sp, #50]	; 0x32
    2008:	ldr	r0, [fp, #-20]	; 0xffffffec
    200c:	ldrb	r0, [r0]
    2010:	strb	r0, [sp, #51]	; 0x33
    2014:	ldr	r0, [sp, #48]	; 0x30
    2018:	ldr	r1, [fp, #-20]	; 0xffffffec
    201c:	str	r0, [r1]
    2020:	movw	r0, #0
    2024:	str	r0, [fp, #-12]
    2028:	ldr	r0, [fp, #-12]
    202c:	sub	sp, fp, #8
    2030:	pop	{r4, sl, fp, pc}
    2034:	.word	0xfffffed4

00002038 <coda_bin_cursor_read_int64>:
    2038:	push	{r4, sl, fp, lr}
    203c:	add	fp, sp, #8
    2040:	sub	sp, sp, #160	; 0xa0
    2044:	str	r0, [fp, #-16]
    2048:	str	r1, [fp, #-20]	; 0xffffffec
    204c:	ldr	r0, [fp, #-16]
    2050:	add	r1, r0, #8
    2054:	ldr	r0, [r0, #4]
    2058:	sub	r0, r0, #1
    205c:	add	r0, r1, r0, lsl #4
    2060:	ldr	r0, [r0]
    2064:	ldr	r0, [r0]
    2068:	cmp	r0, #100	; 0x64
    206c:	bcs	2090 <coda_bin_cursor_read_int64+0x58>
    2070:	ldr	r0, [fp, #-16]
    2074:	add	r1, r0, #8
    2078:	ldr	r0, [r0, #4]
    207c:	sub	r0, r0, #1
    2080:	add	r0, r1, r0, lsl #4
    2084:	ldr	r0, [r0]
    2088:	str	r0, [sp, #52]	; 0x34
    208c:	b	20b0 <coda_bin_cursor_read_int64+0x78>
    2090:	ldr	r0, [fp, #-16]
    2094:	add	r1, r0, #8
    2098:	ldr	r0, [r0, #4]
    209c:	sub	r0, r0, #1
    20a0:	add	r0, r1, r0, lsl #4
    20a4:	ldr	r0, [r0]
    20a8:	ldr	r0, [r0, #4]
    20ac:	str	r0, [sp, #52]	; 0x34
    20b0:	ldr	r0, [sp, #52]	; 0x34
    20b4:	str	r0, [fp, #-24]	; 0xffffffe8
    20b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20bc:	ldr	r1, [r0, #24]
    20c0:	ldr	r0, [r0, #28]
    20c4:	str	r0, [fp, #-28]	; 0xffffffe4
    20c8:	str	r1, [fp, #-32]	; 0xffffffe0
    20cc:	ldr	r0, [fp, #-16]
    20d0:	ldr	r1, [r0, #4]
    20d4:	ldr	r1, [r0, r1, lsl #4]!
    20d8:	ldr	r0, [r0, #4]
    20dc:	str	r0, [fp, #-36]	; 0xffffffdc
    20e0:	str	r1, [fp, #-40]	; 0xffffffd8
    20e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    20e8:	ldr	r0, [r0, #44]	; 0x2c
    20ec:	str	r0, [fp, #-44]	; 0xffffffd4
    20f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    20f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    20f8:	and	r0, r0, r1
    20fc:	cmn	r0, #1
    2100:	bne	21fc <coda_bin_cursor_read_int64+0x1c4>
    2104:	b	2108 <coda_bin_cursor_read_int64+0xd0>
    2108:	ldr	r0, [fp, #-16]
    210c:	sub	r1, fp, #32
    2110:	bl	0 <coda_bin_cursor_get_bit_size>
    2114:	cmp	r0, #0
    2118:	beq	2128 <coda_bin_cursor_read_int64+0xf0>
    211c:	mvn	r0, #0
    2120:	str	r0, [fp, #-12]
    2124:	b	2454 <coda_bin_cursor_read_int64+0x41c>
    2128:	ldr	r0, [fp, #-28]	; 0xffffffe4
    212c:	cmp	r0, #0
    2130:	blt	2158 <coda_bin_cursor_read_int64+0x120>
    2134:	b	2138 <coda_bin_cursor_read_int64+0x100>
    2138:	ldr	r0, [fp, #-32]	; 0xffffffe0
    213c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2140:	subs	r0, r0, #65	; 0x41
    2144:	sbcs	r1, r1, #0
    2148:	str	r0, [sp, #48]	; 0x30
    214c:	str	r1, [sp, #44]	; 0x2c
    2150:	blt	21f8 <coda_bin_cursor_read_int64+0x1c0>
    2154:	b	2158 <coda_bin_cursor_read_int64+0x120>
    2158:	ldr	r0, [pc, #768]	; 2460 <coda_bin_cursor_read_int64+0x428>
    215c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2160:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2164:	sub	r3, fp, #65	; 0x41
    2168:	str	r0, [sp, #40]	; 0x28
    216c:	mov	r0, r1
    2170:	mov	r1, r2
    2174:	mov	r2, r3
    2178:	str	r3, [sp, #36]	; 0x24
    217c:	bl	0 <coda_str64>
    2180:	ldr	r0, [fp, #-16]
    2184:	ldr	r1, [r0, #4]
    2188:	ldr	r1, [r0, r1, lsl #4]!
    218c:	ldr	r0, [r0, #4]
    2190:	lsr	r1, r1, #3
    2194:	orr	r1, r1, r0, lsl #29
    2198:	asr	r0, r0, #3
    219c:	add	r2, sp, #82	; 0x52
    21a0:	str	r0, [sp, #32]
    21a4:	mov	r0, r1
    21a8:	ldr	r1, [sp, #32]
    21ac:	str	r2, [sp, #28]
    21b0:	bl	0 <coda_str64>
    21b4:	ldr	r0, [fp, #-16]
    21b8:	ldr	r1, [r0, #4]
    21bc:	ldr	r0, [r0, r1, lsl #4]
    21c0:	and	r0, r0, #7
    21c4:	ldr	r1, [sp, #40]	; 0x28
    21c8:	str	r0, [sp, #24]
    21cc:	mov	r0, r1
    21d0:	movw	r1, #0
    21d4:	movt	r1, #0
    21d8:	ldr	r2, [sp, #36]	; 0x24
    21dc:	ldr	r3, [sp, #28]
    21e0:	ldr	lr, [sp, #24]
    21e4:	str	lr, [sp]
    21e8:	bl	0 <coda_set_error>
    21ec:	mvn	r0, #0
    21f0:	str	r0, [fp, #-12]
    21f4:	b	2454 <coda_bin_cursor_read_int64+0x41c>
    21f8:	b	21fc <coda_bin_cursor_read_int64+0x1c4>
    21fc:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    2200:	tst	r0, #7
    2204:	bne	2228 <coda_bin_cursor_read_int64+0x1f0>
    2208:	b	220c <coda_bin_cursor_read_int64+0x1d4>
    220c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2210:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2214:	eor	r0, r0, #64	; 0x40
    2218:	orr	r0, r0, r1
    221c:	cmp	r0, #0
    2220:	beq	22c0 <coda_bin_cursor_read_int64+0x288>
    2224:	b	2228 <coda_bin_cursor_read_int64+0x1f0>
    2228:	ldr	r0, [fp, #-20]	; 0xffffffec
    222c:	str	r0, [sp, #76]	; 0x4c
    2230:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2234:	cmp	r0, #0
    2238:	bne	2268 <coda_bin_cursor_read_int64+0x230>
    223c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2240:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2244:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2248:	lsr	r3, r1, #3
    224c:	orr	r2, r3, r2, lsl #29
    2250:	add	r3, r2, #1
    2254:	tst	r1, #7
    2258:	movne	r2, r3
    225c:	rsb	r1, r2, #8
    2260:	add	r0, r0, r1
    2264:	str	r0, [sp, #76]	; 0x4c
    2268:	ldr	r0, [fp, #-20]	; 0xffffffec
    226c:	mov	r1, #0
    2270:	str	r1, [r0, #4]
    2274:	str	r1, [r0]
    2278:	ldr	r0, [fp, #-16]
    227c:	ldr	r0, [r0]
    2280:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2284:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2288:	ldr	r1, [fp, #-32]	; 0xffffffe0
    228c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    2290:	ldr	lr, [sp, #76]	; 0x4c
    2294:	mov	r4, sp
    2298:	str	lr, [r4, #8]
    229c:	str	ip, [r4, #4]
    22a0:	str	r1, [r4]
    22a4:	bl	740 <read_bits>
    22a8:	cmp	r0, #0
    22ac:	beq	22bc <coda_bin_cursor_read_int64+0x284>
    22b0:	mvn	r0, #0
    22b4:	str	r0, [fp, #-12]
    22b8:	b	2454 <coda_bin_cursor_read_int64+0x41c>
    22bc:	b	2318 <coda_bin_cursor_read_int64+0x2e0>
    22c0:	ldr	r0, [fp, #-16]
    22c4:	ldr	r0, [r0]
    22c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    22cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    22d0:	lsr	r1, r1, #3
    22d4:	orr	r1, r1, r2, lsl #29
    22d8:	asr	r3, r2, #3
    22dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    22e0:	mov	ip, sp
    22e4:	str	r2, [ip, #8]
    22e8:	mov	r2, #0
    22ec:	str	r2, [ip, #4]
    22f0:	mov	r2, #8
    22f4:	str	r2, [ip]
    22f8:	mov	r2, r1
    22fc:	bl	d0c <read_bytes>
    2300:	cmp	r0, #0
    2304:	beq	2314 <coda_bin_cursor_read_int64+0x2dc>
    2308:	mvn	r0, #0
    230c:	str	r0, [fp, #-12]
    2310:	b	2454 <coda_bin_cursor_read_int64+0x41c>
    2314:	b	2318 <coda_bin_cursor_read_int64+0x2e0>
    2318:	ldr	r0, [fp, #-44]	; 0xffffffd4
    231c:	cmp	r0, #0
    2320:	bne	2398 <coda_bin_cursor_read_int64+0x360>
    2324:	ldr	r0, [fp, #-20]	; 0xffffffec
    2328:	ldrb	r0, [r0, #7]
    232c:	strb	r0, [sp, #64]	; 0x40
    2330:	ldr	r0, [fp, #-20]	; 0xffffffec
    2334:	ldrb	r0, [r0, #6]
    2338:	strb	r0, [sp, #65]	; 0x41
    233c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2340:	ldrb	r0, [r0, #5]
    2344:	strb	r0, [sp, #66]	; 0x42
    2348:	ldr	r0, [fp, #-20]	; 0xffffffec
    234c:	ldrb	r0, [r0, #4]
    2350:	strb	r0, [sp, #67]	; 0x43
    2354:	ldr	r0, [fp, #-20]	; 0xffffffec
    2358:	ldrb	r0, [r0, #3]
    235c:	strb	r0, [sp, #68]	; 0x44
    2360:	ldr	r0, [fp, #-20]	; 0xffffffec
    2364:	ldrb	r0, [r0, #2]
    2368:	strb	r0, [sp, #69]	; 0x45
    236c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2370:	ldrb	r0, [r0, #1]
    2374:	strb	r0, [sp, #70]	; 0x46
    2378:	ldr	r0, [fp, #-20]	; 0xffffffec
    237c:	ldrb	r0, [r0]
    2380:	strb	r0, [sp, #71]	; 0x47
    2384:	ldr	r0, [sp, #64]	; 0x40
    2388:	ldr	r1, [sp, #68]	; 0x44
    238c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2390:	str	r1, [r2, #4]
    2394:	str	r0, [r2]
    2398:	ldr	r0, [fp, #-32]	; 0xffffffe0
    239c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    23a0:	rsbs	r0, r0, #63	; 0x3f
    23a4:	rscs	r1, r1, #0
    23a8:	str	r0, [sp, #20]
    23ac:	str	r1, [sp, #16]
    23b0:	blt	244c <coda_bin_cursor_read_int64+0x414>
    23b4:	b	23b8 <coda_bin_cursor_read_int64+0x380>
    23b8:	ldr	r0, [fp, #-20]	; 0xffffffec
    23bc:	ldr	r1, [r0]
    23c0:	ldr	r0, [r0, #4]
    23c4:	str	r0, [sp, #60]	; 0x3c
    23c8:	str	r1, [sp, #56]	; 0x38
    23cc:	ldr	r0, [sp, #56]	; 0x38
    23d0:	ldr	r1, [sp, #60]	; 0x3c
    23d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    23d8:	sub	r3, r2, #1
    23dc:	mov	ip, #1
    23e0:	lsl	r3, ip, r3
    23e4:	sub	lr, r2, #33	; 0x21
    23e8:	cmp	lr, #0
    23ec:	movwge	r3, #0
    23f0:	rsb	r2, r2, #33	; 0x21
    23f4:	lsr	r2, ip, r2
    23f8:	cmp	lr, #0
    23fc:	lslge	r2, ip, lr
    2400:	and	r1, r1, r2
    2404:	and	r0, r0, r3
    2408:	orr	r0, r0, r1
    240c:	cmp	r0, #0
    2410:	beq	2448 <coda_bin_cursor_read_int64+0x410>
    2414:	b	2418 <coda_bin_cursor_read_int64+0x3e0>
    2418:	ldr	r0, [sp, #56]	; 0x38
    241c:	ldr	r1, [sp, #60]	; 0x3c
    2420:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2424:	mov	r3, #1
    2428:	mvn	ip, #0
    242c:	add	r2, ip, r3, lsl r2
    2430:	mvn	r2, r2
    2434:	orr	r0, r0, r2
    2438:	orr	r1, r1, r2, asr #31
    243c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2440:	str	r1, [r2, #4]
    2444:	str	r0, [r2]
    2448:	b	244c <coda_bin_cursor_read_int64+0x414>
    244c:	movw	r0, #0
    2450:	str	r0, [fp, #-12]
    2454:	ldr	r0, [fp, #-12]
    2458:	sub	sp, fp, #8
    245c:	pop	{r4, sl, fp, pc}
    2460:	.word	0xfffffed4

00002464 <coda_bin_cursor_read_uint64>:
    2464:	push	{r4, sl, fp, lr}
    2468:	add	fp, sp, #8
    246c:	sub	sp, sp, #144	; 0x90
    2470:	str	r0, [fp, #-16]
    2474:	str	r1, [fp, #-20]	; 0xffffffec
    2478:	ldr	r0, [fp, #-16]
    247c:	add	r1, r0, #8
    2480:	ldr	r0, [r0, #4]
    2484:	sub	r0, r0, #1
    2488:	add	r0, r1, r0, lsl #4
    248c:	ldr	r0, [r0]
    2490:	ldr	r0, [r0]
    2494:	cmp	r0, #100	; 0x64
    2498:	bcs	24bc <coda_bin_cursor_read_uint64+0x58>
    249c:	ldr	r0, [fp, #-16]
    24a0:	add	r1, r0, #8
    24a4:	ldr	r0, [r0, #4]
    24a8:	sub	r0, r0, #1
    24ac:	add	r0, r1, r0, lsl #4
    24b0:	ldr	r0, [r0]
    24b4:	str	r0, [sp, #44]	; 0x2c
    24b8:	b	24dc <coda_bin_cursor_read_uint64+0x78>
    24bc:	ldr	r0, [fp, #-16]
    24c0:	add	r1, r0, #8
    24c4:	ldr	r0, [r0, #4]
    24c8:	sub	r0, r0, #1
    24cc:	add	r0, r1, r0, lsl #4
    24d0:	ldr	r0, [r0]
    24d4:	ldr	r0, [r0, #4]
    24d8:	str	r0, [sp, #44]	; 0x2c
    24dc:	ldr	r0, [sp, #44]	; 0x2c
    24e0:	str	r0, [fp, #-24]	; 0xffffffe8
    24e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    24e8:	ldr	r1, [r0, #24]
    24ec:	ldr	r0, [r0, #28]
    24f0:	str	r0, [fp, #-28]	; 0xffffffe4
    24f4:	str	r1, [fp, #-32]	; 0xffffffe0
    24f8:	ldr	r0, [fp, #-16]
    24fc:	ldr	r1, [r0, #4]
    2500:	ldr	r1, [r0, r1, lsl #4]!
    2504:	ldr	r0, [r0, #4]
    2508:	str	r0, [fp, #-36]	; 0xffffffdc
    250c:	str	r1, [fp, #-40]	; 0xffffffd8
    2510:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2514:	ldr	r0, [r0, #44]	; 0x2c
    2518:	str	r0, [fp, #-44]	; 0xffffffd4
    251c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2520:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2524:	and	r0, r0, r1
    2528:	cmn	r0, #1
    252c:	bne	2628 <coda_bin_cursor_read_uint64+0x1c4>
    2530:	b	2534 <coda_bin_cursor_read_uint64+0xd0>
    2534:	ldr	r0, [fp, #-16]
    2538:	sub	r1, fp, #32
    253c:	bl	0 <coda_bin_cursor_get_bit_size>
    2540:	cmp	r0, #0
    2544:	beq	2554 <coda_bin_cursor_read_uint64+0xf0>
    2548:	mvn	r0, #0
    254c:	str	r0, [fp, #-12]
    2550:	b	27cc <coda_bin_cursor_read_uint64+0x368>
    2554:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2558:	cmp	r0, #0
    255c:	blt	2584 <coda_bin_cursor_read_uint64+0x120>
    2560:	b	2564 <coda_bin_cursor_read_uint64+0x100>
    2564:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2568:	ldr	r1, [fp, #-28]	; 0xffffffe4
    256c:	subs	r0, r0, #65	; 0x41
    2570:	sbcs	r1, r1, #0
    2574:	str	r0, [sp, #40]	; 0x28
    2578:	str	r1, [sp, #36]	; 0x24
    257c:	blt	2624 <coda_bin_cursor_read_uint64+0x1c0>
    2580:	b	2584 <coda_bin_cursor_read_uint64+0x120>
    2584:	ldr	r0, [pc, #588]	; 27d8 <coda_bin_cursor_read_uint64+0x374>
    2588:	ldr	r1, [fp, #-32]	; 0xffffffe0
    258c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2590:	sub	r3, fp, #65	; 0x41
    2594:	str	r0, [sp, #32]
    2598:	mov	r0, r1
    259c:	mov	r1, r2
    25a0:	mov	r2, r3
    25a4:	str	r3, [sp, #28]
    25a8:	bl	0 <coda_str64>
    25ac:	ldr	r0, [fp, #-16]
    25b0:	ldr	r1, [r0, #4]
    25b4:	ldr	r1, [r0, r1, lsl #4]!
    25b8:	ldr	r0, [r0, #4]
    25bc:	lsr	r1, r1, #3
    25c0:	orr	r1, r1, r0, lsl #29
    25c4:	asr	r0, r0, #3
    25c8:	add	r2, sp, #66	; 0x42
    25cc:	str	r0, [sp, #24]
    25d0:	mov	r0, r1
    25d4:	ldr	r1, [sp, #24]
    25d8:	str	r2, [sp, #20]
    25dc:	bl	0 <coda_str64>
    25e0:	ldr	r0, [fp, #-16]
    25e4:	ldr	r1, [r0, #4]
    25e8:	ldr	r0, [r0, r1, lsl #4]
    25ec:	and	r0, r0, #7
    25f0:	ldr	r1, [sp, #32]
    25f4:	str	r0, [sp, #16]
    25f8:	mov	r0, r1
    25fc:	movw	r1, #0
    2600:	movt	r1, #0
    2604:	ldr	r2, [sp, #28]
    2608:	ldr	r3, [sp, #20]
    260c:	ldr	lr, [sp, #16]
    2610:	str	lr, [sp]
    2614:	bl	0 <coda_set_error>
    2618:	mvn	r0, #0
    261c:	str	r0, [fp, #-12]
    2620:	b	27cc <coda_bin_cursor_read_uint64+0x368>
    2624:	b	2628 <coda_bin_cursor_read_uint64+0x1c4>
    2628:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    262c:	tst	r0, #7
    2630:	bne	2654 <coda_bin_cursor_read_uint64+0x1f0>
    2634:	b	2638 <coda_bin_cursor_read_uint64+0x1d4>
    2638:	ldr	r0, [fp, #-32]	; 0xffffffe0
    263c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2640:	eor	r0, r0, #64	; 0x40
    2644:	orr	r0, r0, r1
    2648:	cmp	r0, #0
    264c:	beq	26ec <coda_bin_cursor_read_uint64+0x288>
    2650:	b	2654 <coda_bin_cursor_read_uint64+0x1f0>
    2654:	ldr	r0, [fp, #-20]	; 0xffffffec
    2658:	str	r0, [sp, #60]	; 0x3c
    265c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2660:	cmp	r0, #0
    2664:	bne	2694 <coda_bin_cursor_read_uint64+0x230>
    2668:	ldr	r0, [fp, #-20]	; 0xffffffec
    266c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2670:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2674:	lsr	r3, r1, #3
    2678:	orr	r2, r3, r2, lsl #29
    267c:	add	r3, r2, #1
    2680:	tst	r1, #7
    2684:	movne	r2, r3
    2688:	rsb	r1, r2, #8
    268c:	add	r0, r0, r1
    2690:	str	r0, [sp, #60]	; 0x3c
    2694:	ldr	r0, [fp, #-20]	; 0xffffffec
    2698:	mov	r1, #0
    269c:	str	r1, [r0, #4]
    26a0:	str	r1, [r0]
    26a4:	ldr	r0, [fp, #-16]
    26a8:	ldr	r0, [r0]
    26ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
    26b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    26b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    26b8:	ldr	ip, [fp, #-28]	; 0xffffffe4
    26bc:	ldr	lr, [sp, #60]	; 0x3c
    26c0:	mov	r4, sp
    26c4:	str	lr, [r4, #8]
    26c8:	str	ip, [r4, #4]
    26cc:	str	r1, [r4]
    26d0:	bl	740 <read_bits>
    26d4:	cmp	r0, #0
    26d8:	beq	26e8 <coda_bin_cursor_read_uint64+0x284>
    26dc:	mvn	r0, #0
    26e0:	str	r0, [fp, #-12]
    26e4:	b	27cc <coda_bin_cursor_read_uint64+0x368>
    26e8:	b	2744 <coda_bin_cursor_read_uint64+0x2e0>
    26ec:	ldr	r0, [fp, #-16]
    26f0:	ldr	r0, [r0]
    26f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    26f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    26fc:	lsr	r1, r1, #3
    2700:	orr	r1, r1, r2, lsl #29
    2704:	asr	r3, r2, #3
    2708:	ldr	r2, [fp, #-20]	; 0xffffffec
    270c:	mov	ip, sp
    2710:	str	r2, [ip, #8]
    2714:	mov	r2, #0
    2718:	str	r2, [ip, #4]
    271c:	mov	r2, #8
    2720:	str	r2, [ip]
    2724:	mov	r2, r1
    2728:	bl	d0c <read_bytes>
    272c:	cmp	r0, #0
    2730:	beq	2740 <coda_bin_cursor_read_uint64+0x2dc>
    2734:	mvn	r0, #0
    2738:	str	r0, [fp, #-12]
    273c:	b	27cc <coda_bin_cursor_read_uint64+0x368>
    2740:	b	2744 <coda_bin_cursor_read_uint64+0x2e0>
    2744:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2748:	cmp	r0, #0
    274c:	bne	27c4 <coda_bin_cursor_read_uint64+0x360>
    2750:	ldr	r0, [fp, #-20]	; 0xffffffec
    2754:	ldrb	r0, [r0, #7]
    2758:	strb	r0, [sp, #48]	; 0x30
    275c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2760:	ldrb	r0, [r0, #6]
    2764:	strb	r0, [sp, #49]	; 0x31
    2768:	ldr	r0, [fp, #-20]	; 0xffffffec
    276c:	ldrb	r0, [r0, #5]
    2770:	strb	r0, [sp, #50]	; 0x32
    2774:	ldr	r0, [fp, #-20]	; 0xffffffec
    2778:	ldrb	r0, [r0, #4]
    277c:	strb	r0, [sp, #51]	; 0x33
    2780:	ldr	r0, [fp, #-20]	; 0xffffffec
    2784:	ldrb	r0, [r0, #3]
    2788:	strb	r0, [sp, #52]	; 0x34
    278c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2790:	ldrb	r0, [r0, #2]
    2794:	strb	r0, [sp, #53]	; 0x35
    2798:	ldr	r0, [fp, #-20]	; 0xffffffec
    279c:	ldrb	r0, [r0, #1]
    27a0:	strb	r0, [sp, #54]	; 0x36
    27a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    27a8:	ldrb	r0, [r0]
    27ac:	strb	r0, [sp, #55]	; 0x37
    27b0:	ldr	r0, [sp, #48]	; 0x30
    27b4:	ldr	r1, [sp, #52]	; 0x34
    27b8:	ldr	r2, [fp, #-20]	; 0xffffffec
    27bc:	str	r1, [r2, #4]
    27c0:	str	r0, [r2]
    27c4:	movw	r0, #0
    27c8:	str	r0, [fp, #-12]
    27cc:	ldr	r0, [fp, #-12]
    27d0:	sub	sp, fp, #8
    27d4:	pop	{r4, sl, fp, pc}
    27d8:	.word	0xfffffed4

000027dc <coda_bin_cursor_read_float>:
    27dc:	push	{fp, lr}
    27e0:	mov	fp, sp
    27e4:	sub	sp, sp, #48	; 0x30
    27e8:	str	r0, [fp, #-8]
    27ec:	str	r1, [fp, #-12]
    27f0:	ldr	r0, [fp, #-8]
    27f4:	add	r1, r0, #8
    27f8:	ldr	r0, [r0, #4]
    27fc:	sub	r0, r0, #1
    2800:	add	r0, r1, r0, lsl #4
    2804:	ldr	r0, [r0]
    2808:	ldr	r0, [r0]
    280c:	cmp	r0, #100	; 0x64
    2810:	bcs	2834 <coda_bin_cursor_read_float+0x58>
    2814:	ldr	r0, [fp, #-8]
    2818:	add	r1, r0, #8
    281c:	ldr	r0, [r0, #4]
    2820:	sub	r0, r0, #1
    2824:	add	r0, r1, r0, lsl #4
    2828:	ldr	r0, [r0]
    282c:	str	r0, [sp, #12]
    2830:	b	2854 <coda_bin_cursor_read_float+0x78>
    2834:	ldr	r0, [fp, #-8]
    2838:	add	r1, r0, #8
    283c:	ldr	r0, [r0, #4]
    2840:	sub	r0, r0, #1
    2844:	add	r0, r1, r0, lsl #4
    2848:	ldr	r0, [r0]
    284c:	ldr	r0, [r0, #4]
    2850:	str	r0, [sp, #12]
    2854:	ldr	r0, [sp, #12]
    2858:	str	r0, [fp, #-16]
    285c:	ldr	r0, [fp, #-8]
    2860:	ldr	r1, [r0, #4]
    2864:	ldr	r1, [r0, r1, lsl #4]!
    2868:	ldr	r0, [r0, #4]
    286c:	str	r0, [sp, #28]
    2870:	str	r1, [sp, #24]
    2874:	ldr	r0, [fp, #-16]
    2878:	ldr	r0, [r0, #44]	; 0x2c
    287c:	str	r0, [sp, #20]
    2880:	ldrb	r0, [sp, #24]
    2884:	tst	r0, #7
    2888:	beq	28d8 <coda_bin_cursor_read_float+0xfc>
    288c:	b	2890 <coda_bin_cursor_read_float+0xb4>
    2890:	ldr	r0, [fp, #-8]
    2894:	ldr	r0, [r0]
    2898:	ldr	r2, [sp, #24]
    289c:	ldr	r3, [sp, #28]
    28a0:	ldr	r1, [fp, #-12]
    28a4:	mov	ip, sp
    28a8:	str	r1, [ip, #8]
    28ac:	mov	r1, #0
    28b0:	str	r1, [ip, #4]
    28b4:	mov	r1, #32
    28b8:	str	r1, [ip]
    28bc:	bl	740 <read_bits>
    28c0:	cmp	r0, #0
    28c4:	beq	28d4 <coda_bin_cursor_read_float+0xf8>
    28c8:	mvn	r0, #0
    28cc:	str	r0, [fp, #-4]
    28d0:	b	2980 <coda_bin_cursor_read_float+0x1a4>
    28d4:	b	2930 <coda_bin_cursor_read_float+0x154>
    28d8:	ldr	r0, [fp, #-8]
    28dc:	ldr	r0, [r0]
    28e0:	ldr	r1, [sp, #24]
    28e4:	ldr	r2, [sp, #28]
    28e8:	lsr	r1, r1, #3
    28ec:	orr	r1, r1, r2, lsl #29
    28f0:	asr	r3, r2, #3
    28f4:	ldr	r2, [fp, #-12]
    28f8:	mov	ip, sp
    28fc:	str	r2, [ip, #8]
    2900:	mov	r2, #0
    2904:	str	r2, [ip, #4]
    2908:	mov	r2, #4
    290c:	str	r2, [ip]
    2910:	mov	r2, r1
    2914:	bl	d0c <read_bytes>
    2918:	cmp	r0, #0
    291c:	beq	292c <coda_bin_cursor_read_float+0x150>
    2920:	mvn	r0, #0
    2924:	str	r0, [fp, #-4]
    2928:	b	2980 <coda_bin_cursor_read_float+0x1a4>
    292c:	b	2930 <coda_bin_cursor_read_float+0x154>
    2930:	ldr	r0, [sp, #20]
    2934:	cmp	r0, #0
    2938:	bne	2978 <coda_bin_cursor_read_float+0x19c>
    293c:	ldr	r0, [fp, #-12]
    2940:	ldrb	r0, [r0, #3]
    2944:	strb	r0, [sp, #16]
    2948:	ldr	r0, [fp, #-12]
    294c:	ldrb	r0, [r0, #2]
    2950:	strb	r0, [sp, #17]
    2954:	ldr	r0, [fp, #-12]
    2958:	ldrb	r0, [r0, #1]
    295c:	strb	r0, [sp, #18]
    2960:	ldr	r0, [fp, #-12]
    2964:	ldrb	r0, [r0]
    2968:	strb	r0, [sp, #19]
    296c:	vldr	s0, [sp, #16]
    2970:	ldr	r0, [fp, #-12]
    2974:	vstr	s0, [r0]
    2978:	movw	r0, #0
    297c:	str	r0, [fp, #-4]
    2980:	ldr	r0, [fp, #-4]
    2984:	mov	sp, fp
    2988:	pop	{fp, pc}

0000298c <coda_bin_cursor_read_double>:
    298c:	push	{fp, lr}
    2990:	mov	fp, sp
    2994:	sub	sp, sp, #8
    2998:	str	r0, [sp, #4]
    299c:	str	r1, [sp]
    29a0:	ldr	r0, [sp, #4]
    29a4:	ldr	r1, [sp]
    29a8:	bl	29b4 <read_double>
    29ac:	mov	sp, fp
    29b0:	pop	{fp, pc}

000029b4 <read_double>:
    29b4:	push	{fp, lr}
    29b8:	mov	fp, sp
    29bc:	sub	sp, sp, #56	; 0x38
    29c0:	str	r0, [fp, #-8]
    29c4:	str	r1, [fp, #-12]
    29c8:	ldr	r0, [fp, #-8]
    29cc:	add	r1, r0, #8
    29d0:	ldr	r0, [r0, #4]
    29d4:	sub	r0, r0, #1
    29d8:	add	r0, r1, r0, lsl #4
    29dc:	ldr	r0, [r0]
    29e0:	ldr	r0, [r0]
    29e4:	cmp	r0, #100	; 0x64
    29e8:	bcs	2a0c <read_double+0x58>
    29ec:	ldr	r0, [fp, #-8]
    29f0:	add	r1, r0, #8
    29f4:	ldr	r0, [r0, #4]
    29f8:	sub	r0, r0, #1
    29fc:	add	r0, r1, r0, lsl #4
    2a00:	ldr	r0, [r0]
    2a04:	str	r0, [sp, #12]
    2a08:	b	2a2c <read_double+0x78>
    2a0c:	ldr	r0, [fp, #-8]
    2a10:	add	r1, r0, #8
    2a14:	ldr	r0, [r0, #4]
    2a18:	sub	r0, r0, #1
    2a1c:	add	r0, r1, r0, lsl #4
    2a20:	ldr	r0, [r0]
    2a24:	ldr	r0, [r0, #4]
    2a28:	str	r0, [sp, #12]
    2a2c:	ldr	r0, [sp, #12]
    2a30:	str	r0, [fp, #-16]
    2a34:	ldr	r0, [fp, #-8]
    2a38:	ldr	r1, [r0, #4]
    2a3c:	ldr	r1, [r0, r1, lsl #4]!
    2a40:	ldr	r0, [r0, #4]
    2a44:	str	r0, [fp, #-20]	; 0xffffffec
    2a48:	str	r1, [fp, #-24]	; 0xffffffe8
    2a4c:	ldr	r0, [fp, #-16]
    2a50:	ldr	r0, [r0, #44]	; 0x2c
    2a54:	str	r0, [sp, #28]
    2a58:	ldrb	r0, [fp, #-24]	; 0xffffffe8
    2a5c:	tst	r0, #7
    2a60:	beq	2ab0 <read_double+0xfc>
    2a64:	b	2a68 <read_double+0xb4>
    2a68:	ldr	r0, [fp, #-8]
    2a6c:	ldr	r0, [r0]
    2a70:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2a74:	ldr	r3, [fp, #-20]	; 0xffffffec
    2a78:	ldr	r1, [fp, #-12]
    2a7c:	mov	ip, sp
    2a80:	str	r1, [ip, #8]
    2a84:	mov	r1, #0
    2a88:	str	r1, [ip, #4]
    2a8c:	mov	r1, #64	; 0x40
    2a90:	str	r1, [ip]
    2a94:	bl	740 <read_bits>
    2a98:	cmp	r0, #0
    2a9c:	beq	2aac <read_double+0xf8>
    2aa0:	mvn	r0, #0
    2aa4:	str	r0, [fp, #-4]
    2aa8:	b	2b88 <read_double+0x1d4>
    2aac:	b	2b08 <read_double+0x154>
    2ab0:	ldr	r0, [fp, #-8]
    2ab4:	ldr	r0, [r0]
    2ab8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2abc:	ldr	r2, [fp, #-20]	; 0xffffffec
    2ac0:	lsr	r1, r1, #3
    2ac4:	orr	r1, r1, r2, lsl #29
    2ac8:	asr	r3, r2, #3
    2acc:	ldr	r2, [fp, #-12]
    2ad0:	mov	ip, sp
    2ad4:	str	r2, [ip, #8]
    2ad8:	mov	r2, #0
    2adc:	str	r2, [ip, #4]
    2ae0:	mov	r2, #8
    2ae4:	str	r2, [ip]
    2ae8:	mov	r2, r1
    2aec:	bl	d0c <read_bytes>
    2af0:	cmp	r0, #0
    2af4:	beq	2b04 <read_double+0x150>
    2af8:	mvn	r0, #0
    2afc:	str	r0, [fp, #-4]
    2b00:	b	2b88 <read_double+0x1d4>
    2b04:	b	2b08 <read_double+0x154>
    2b08:	ldr	r0, [sp, #28]
    2b0c:	cmp	r0, #0
    2b10:	bne	2b80 <read_double+0x1cc>
    2b14:	ldr	r0, [fp, #-12]
    2b18:	ldrb	r0, [r0, #7]
    2b1c:	strb	r0, [sp, #16]
    2b20:	ldr	r0, [fp, #-12]
    2b24:	ldrb	r0, [r0, #6]
    2b28:	strb	r0, [sp, #17]
    2b2c:	ldr	r0, [fp, #-12]
    2b30:	ldrb	r0, [r0, #5]
    2b34:	strb	r0, [sp, #18]
    2b38:	ldr	r0, [fp, #-12]
    2b3c:	ldrb	r0, [r0, #4]
    2b40:	strb	r0, [sp, #19]
    2b44:	ldr	r0, [fp, #-12]
    2b48:	ldrb	r0, [r0, #3]
    2b4c:	strb	r0, [sp, #20]
    2b50:	ldr	r0, [fp, #-12]
    2b54:	ldrb	r0, [r0, #2]
    2b58:	strb	r0, [sp, #21]
    2b5c:	ldr	r0, [fp, #-12]
    2b60:	ldrb	r0, [r0, #1]
    2b64:	strb	r0, [sp, #22]
    2b68:	ldr	r0, [fp, #-12]
    2b6c:	ldrb	r0, [r0]
    2b70:	strb	r0, [sp, #23]
    2b74:	vldr	d16, [sp, #16]
    2b78:	ldr	r0, [fp, #-12]
    2b7c:	vstr	d16, [r0]
    2b80:	movw	r0, #0
    2b84:	str	r0, [fp, #-4]
    2b88:	ldr	r0, [fp, #-4]
    2b8c:	mov	sp, fp
    2b90:	pop	{fp, pc}

00002b94 <coda_bin_cursor_read_char>:
    2b94:	push	{fp, lr}
    2b98:	mov	fp, sp
    2b9c:	sub	sp, sp, #8
    2ba0:	str	r0, [sp, #4]
    2ba4:	str	r1, [sp]
    2ba8:	ldr	r0, [sp, #4]
    2bac:	ldr	r1, [sp]
    2bb0:	bl	f74 <coda_bin_cursor_read_uint8>
    2bb4:	mov	sp, fp
    2bb8:	pop	{fp, pc}

00002bbc <coda_bin_cursor_read_string>:
    2bbc:	push	{r4, sl, fp, lr}
    2bc0:	add	fp, sp, #8
    2bc4:	sub	sp, sp, #144	; 0x90
    2bc8:	str	r0, [fp, #-16]
    2bcc:	str	r1, [fp, #-20]	; 0xffffffec
    2bd0:	str	r2, [fp, #-24]	; 0xffffffe8
    2bd4:	ldr	r0, [fp, #-16]
    2bd8:	add	r1, r0, #8
    2bdc:	ldr	r0, [r0, #4]
    2be0:	sub	r0, r0, #1
    2be4:	add	r0, r1, r0, lsl #4
    2be8:	ldr	r0, [r0]
    2bec:	ldr	r0, [r0]
    2bf0:	cmp	r0, #100	; 0x64
    2bf4:	bcs	2c18 <coda_bin_cursor_read_string+0x5c>
    2bf8:	ldr	r0, [fp, #-16]
    2bfc:	add	r1, r0, #8
    2c00:	ldr	r0, [r0, #4]
    2c04:	sub	r0, r0, #1
    2c08:	add	r0, r1, r0, lsl #4
    2c0c:	ldr	r0, [r0]
    2c10:	str	r0, [sp, #48]	; 0x30
    2c14:	b	2c38 <coda_bin_cursor_read_string+0x7c>
    2c18:	ldr	r0, [fp, #-16]
    2c1c:	add	r1, r0, #8
    2c20:	ldr	r0, [r0, #4]
    2c24:	sub	r0, r0, #1
    2c28:	add	r0, r1, r0, lsl #4
    2c2c:	ldr	r0, [r0]
    2c30:	ldr	r0, [r0, #4]
    2c34:	str	r0, [sp, #48]	; 0x30
    2c38:	ldr	r0, [sp, #48]	; 0x30
    2c3c:	str	r0, [fp, #-28]	; 0xffffffe4
    2c40:	ldr	r0, [fp, #-16]
    2c44:	ldr	r1, [r0, #4]
    2c48:	ldr	r1, [r0, r1, lsl #4]!
    2c4c:	ldr	r0, [r0, #4]
    2c50:	str	r0, [fp, #-36]	; 0xffffffdc
    2c54:	str	r1, [fp, #-40]	; 0xffffffd8
    2c58:	mov	r0, #0
    2c5c:	str	r0, [fp, #-44]	; 0xffffffd4
    2c60:	str	r0, [fp, #-48]	; 0xffffffd0
    2c64:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2c68:	ldr	r0, [r0, #28]
    2c6c:	cmn	r0, #1
    2c70:	bgt	2d94 <coda_bin_cursor_read_string+0x1d8>
    2c74:	b	2c78 <coda_bin_cursor_read_string+0xbc>
    2c78:	ldr	r0, [fp, #-16]
    2c7c:	sub	r1, fp, #56	; 0x38
    2c80:	bl	0 <coda_bin_cursor_get_bit_size>
    2c84:	cmp	r0, #0
    2c88:	beq	2c98 <coda_bin_cursor_read_string+0xdc>
    2c8c:	mvn	r0, #0
    2c90:	str	r0, [fp, #-12]
    2c94:	b	2e90 <coda_bin_cursor_read_string+0x2d4>
    2c98:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2c9c:	cmn	r0, #1
    2ca0:	bgt	2d48 <coda_bin_cursor_read_string+0x18c>
    2ca4:	b	2ca8 <coda_bin_cursor_read_string+0xec>
    2ca8:	ldr	r0, [pc, #492]	; 2e9c <coda_bin_cursor_read_string+0x2e0>
    2cac:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2cb0:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2cb4:	add	r3, sp, #75	; 0x4b
    2cb8:	str	r0, [sp, #44]	; 0x2c
    2cbc:	mov	r0, r1
    2cc0:	mov	r1, r2
    2cc4:	mov	r2, r3
    2cc8:	str	r3, [sp, #40]	; 0x28
    2ccc:	bl	0 <coda_str64>
    2cd0:	ldr	r0, [fp, #-16]
    2cd4:	ldr	r1, [r0, #4]
    2cd8:	ldr	r1, [r0, r1, lsl #4]!
    2cdc:	ldr	r0, [r0, #4]
    2ce0:	lsr	r1, r1, #3
    2ce4:	orr	r1, r1, r0, lsl #29
    2ce8:	asr	r0, r0, #3
    2cec:	add	r2, sp, #54	; 0x36
    2cf0:	str	r0, [sp, #36]	; 0x24
    2cf4:	mov	r0, r1
    2cf8:	ldr	r1, [sp, #36]	; 0x24
    2cfc:	str	r2, [sp, #32]
    2d00:	bl	0 <coda_str64>
    2d04:	ldr	r0, [fp, #-16]
    2d08:	ldr	r1, [r0, #4]
    2d0c:	ldr	r0, [r0, r1, lsl #4]
    2d10:	and	r0, r0, #7
    2d14:	ldr	r1, [sp, #44]	; 0x2c
    2d18:	str	r0, [sp, #28]
    2d1c:	mov	r0, r1
    2d20:	movw	r1, #0
    2d24:	movt	r1, #0
    2d28:	ldr	r2, [sp, #40]	; 0x28
    2d2c:	ldr	r3, [sp, #32]
    2d30:	ldr	lr, [sp, #28]
    2d34:	str	lr, [sp]
    2d38:	bl	0 <coda_set_error>
    2d3c:	mvn	r0, #0
    2d40:	str	r0, [fp, #-12]
    2d44:	b	2e90 <coda_bin_cursor_read_string+0x2d4>
    2d48:	ldrb	r0, [fp, #-56]	; 0xffffffc8
    2d4c:	tst	r0, #7
    2d50:	beq	2d74 <coda_bin_cursor_read_string+0x1b8>
    2d54:	b	2d58 <coda_bin_cursor_read_string+0x19c>
    2d58:	ldr	r0, [pc, #316]	; 2e9c <coda_bin_cursor_read_string+0x2e0>
    2d5c:	movw	r1, #0
    2d60:	movt	r1, #0
    2d64:	bl	0 <coda_set_error>
    2d68:	mvn	r0, #0
    2d6c:	str	r0, [fp, #-12]
    2d70:	b	2e90 <coda_bin_cursor_read_string+0x2d4>
    2d74:	ldr	r0, [fp, #-56]	; 0xffffffc8
    2d78:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2d7c:	lsr	r0, r0, #3
    2d80:	orr	r0, r0, r1, lsl #29
    2d84:	asr	r1, r1, #3
    2d88:	str	r1, [fp, #-44]	; 0xffffffd4
    2d8c:	str	r0, [fp, #-48]	; 0xffffffd0
    2d90:	b	2db4 <coda_bin_cursor_read_string+0x1f8>
    2d94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2d98:	ldr	r1, [r0, #24]
    2d9c:	ldr	r0, [r0, #28]
    2da0:	lsr	r1, r1, #3
    2da4:	orr	r1, r1, r0, lsl #29
    2da8:	asr	r0, r0, #3
    2dac:	str	r0, [fp, #-44]	; 0xffffffd4
    2db0:	str	r1, [fp, #-48]	; 0xffffffd0
    2db4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2db8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2dbc:	adds	r0, r0, #1
    2dc0:	adc	r1, r1, #0
    2dc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2dc8:	subs	r0, r2, r0
    2dcc:	rscs	r1, r1, r2, asr #31
    2dd0:	str	r0, [sp, #24]
    2dd4:	str	r1, [sp, #20]
    2dd8:	bge	2df4 <coda_bin_cursor_read_string+0x238>
    2ddc:	b	2de0 <coda_bin_cursor_read_string+0x224>
    2de0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2de4:	sub	r0, r0, #1
    2de8:	asr	r1, r0, #31
    2dec:	str	r0, [fp, #-48]	; 0xffffffd0
    2df0:	str	r1, [fp, #-44]	; 0xffffffd4
    2df4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2df8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2dfc:	subs	r0, r0, #1
    2e00:	sbcs	r1, r1, #0
    2e04:	str	r0, [sp, #16]
    2e08:	str	r1, [sp, #12]
    2e0c:	blt	2e7c <coda_bin_cursor_read_string+0x2c0>
    2e10:	b	2e14 <coda_bin_cursor_read_string+0x258>
    2e14:	ldr	r0, [fp, #-16]
    2e18:	ldr	r0, [r0]
    2e1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2e20:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2e24:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2e28:	ldr	ip, [fp, #-44]	; 0xffffffd4
    2e2c:	lsl	ip, ip, #3
    2e30:	orr	ip, ip, r1, lsr #29
    2e34:	lsl	r1, r1, #3
    2e38:	ldr	lr, [fp, #-20]	; 0xffffffec
    2e3c:	mov	r4, sp
    2e40:	str	lr, [r4, #8]
    2e44:	str	ip, [r4, #4]
    2e48:	str	r1, [r4]
    2e4c:	bl	740 <read_bits>
    2e50:	cmp	r0, #0
    2e54:	beq	2e64 <coda_bin_cursor_read_string+0x2a8>
    2e58:	mvn	r0, #0
    2e5c:	str	r0, [fp, #-12]
    2e60:	b	2e90 <coda_bin_cursor_read_string+0x2d4>
    2e64:	ldr	r0, [fp, #-20]	; 0xffffffec
    2e68:	ldr	r1, [fp, #-48]	; 0xffffffd0
    2e6c:	add	r0, r0, r1
    2e70:	movw	r1, #0
    2e74:	strb	r1, [r0]
    2e78:	b	2e88 <coda_bin_cursor_read_string+0x2cc>
    2e7c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2e80:	movw	r1, #0
    2e84:	strb	r1, [r0]
    2e88:	movw	r0, #0
    2e8c:	str	r0, [fp, #-12]
    2e90:	ldr	r0, [fp, #-12]
    2e94:	sub	sp, fp, #8
    2e98:	pop	{r4, sl, fp, pc}
    2e9c:	.word	0xfffffed4

00002ea0 <coda_bin_cursor_read_bits>:
    2ea0:	push	{r4, sl, fp, lr}
    2ea4:	add	fp, sp, #8
    2ea8:	sub	sp, sp, #40	; 0x28
    2eac:	ldr	ip, [fp, #12]
    2eb0:	ldr	lr, [fp, #8]
    2eb4:	str	r0, [fp, #-12]
    2eb8:	str	r1, [fp, #-16]
    2ebc:	str	r3, [sp, #28]
    2ec0:	str	r2, [sp, #24]
    2ec4:	str	ip, [sp, #20]
    2ec8:	str	lr, [sp, #16]
    2ecc:	ldr	r0, [fp, #-12]
    2ed0:	ldr	r1, [r0]
    2ed4:	ldr	r2, [r0, #4]
    2ed8:	ldr	r2, [r0, r2, lsl #4]!
    2edc:	ldr	r0, [r0, #4]
    2ee0:	ldr	r3, [sp, #24]
    2ee4:	ldr	ip, [sp, #28]
    2ee8:	adds	r2, r2, r3
    2eec:	adc	r3, r0, ip
    2ef0:	ldr	r0, [sp, #16]
    2ef4:	ldr	ip, [sp, #20]
    2ef8:	ldr	lr, [fp, #-16]
    2efc:	mov	r4, sp
    2f00:	str	lr, [r4, #8]
    2f04:	str	ip, [r4, #4]
    2f08:	str	r0, [r4]
    2f0c:	mov	r0, r1
    2f10:	bl	740 <read_bits>
    2f14:	sub	sp, fp, #8
    2f18:	pop	{r4, sl, fp, pc}

00002f1c <coda_bin_cursor_read_bytes>:
    2f1c:	push	{r4, sl, fp, lr}
    2f20:	add	fp, sp, #8
    2f24:	sub	sp, sp, #48	; 0x30
    2f28:	ldr	ip, [fp, #12]
    2f2c:	ldr	lr, [fp, #8]
    2f30:	str	r0, [fp, #-16]
    2f34:	str	r1, [fp, #-20]	; 0xffffffec
    2f38:	str	r3, [sp, #28]
    2f3c:	str	r2, [sp, #24]
    2f40:	str	ip, [sp, #20]
    2f44:	str	lr, [sp, #16]
    2f48:	ldr	r0, [fp, #-16]
    2f4c:	ldr	r1, [r0, #4]
    2f50:	ldrb	r0, [r0, r1, lsl #4]
    2f54:	tst	r0, #7
    2f58:	beq	2fa8 <coda_bin_cursor_read_bytes+0x8c>
    2f5c:	b	2f60 <coda_bin_cursor_read_bytes+0x44>
    2f60:	ldr	r0, [fp, #-16]
    2f64:	ldr	r1, [fp, #-20]	; 0xffffffec
    2f68:	ldr	r2, [sp, #24]
    2f6c:	ldr	r3, [sp, #28]
    2f70:	lsl	r3, r3, #3
    2f74:	orr	r3, r3, r2, lsr #29
    2f78:	lsl	r2, r2, #3
    2f7c:	ldr	ip, [sp, #16]
    2f80:	ldr	lr, [sp, #20]
    2f84:	lsl	lr, lr, #3
    2f88:	orr	lr, lr, ip, lsr #29
    2f8c:	lsl	ip, ip, #3
    2f90:	mov	r4, sp
    2f94:	str	lr, [r4, #4]
    2f98:	str	ip, [r4]
    2f9c:	bl	2ea0 <coda_bin_cursor_read_bits>
    2fa0:	str	r0, [fp, #-12]
    2fa4:	b	3000 <coda_bin_cursor_read_bytes+0xe4>
    2fa8:	ldr	r0, [fp, #-16]
    2fac:	ldr	r1, [r0]
    2fb0:	ldr	r2, [r0, #4]
    2fb4:	ldr	r2, [r0, r2, lsl #4]!
    2fb8:	ldr	r0, [r0, #4]
    2fbc:	lsr	r2, r2, #3
    2fc0:	orr	r2, r2, r0, lsl #29
    2fc4:	asr	r0, r0, #3
    2fc8:	ldr	r3, [sp, #24]
    2fcc:	ldr	ip, [sp, #28]
    2fd0:	adds	r2, r2, r3
    2fd4:	adc	r3, r0, ip
    2fd8:	ldr	r0, [sp, #16]
    2fdc:	ldr	ip, [sp, #20]
    2fe0:	ldr	lr, [fp, #-20]	; 0xffffffec
    2fe4:	mov	r4, sp
    2fe8:	str	lr, [r4, #8]
    2fec:	str	ip, [r4, #4]
    2ff0:	str	r0, [r4]
    2ff4:	mov	r0, r1
    2ff8:	bl	d0c <read_bytes>
    2ffc:	str	r0, [fp, #-12]
    3000:	ldr	r0, [fp, #-12]
    3004:	sub	sp, fp, #8
    3008:	pop	{r4, sl, fp, pc}

0000300c <coda_bin_cursor_read_int8_array>:
    300c:	push	{fp, lr}
    3010:	mov	fp, sp
    3014:	sub	sp, sp, #32
    3018:	str	r0, [fp, #-8]
    301c:	str	r1, [fp, #-12]
    3020:	str	r2, [sp, #16]
    3024:	ldr	r0, [fp, #-8]
    3028:	add	r1, r0, #8
    302c:	ldr	r0, [r0, #4]
    3030:	sub	r0, r0, #1
    3034:	add	r0, r1, r0, lsl #4
    3038:	ldr	r0, [r0]
    303c:	ldr	r0, [r0]
    3040:	cmp	r0, #100	; 0x64
    3044:	bcs	3068 <coda_bin_cursor_read_int8_array+0x5c>
    3048:	ldr	r0, [fp, #-8]
    304c:	add	r1, r0, #8
    3050:	ldr	r0, [r0, #4]
    3054:	sub	r0, r0, #1
    3058:	add	r0, r1, r0, lsl #4
    305c:	ldr	r0, [r0]
    3060:	str	r0, [sp, #8]
    3064:	b	3088 <coda_bin_cursor_read_int8_array+0x7c>
    3068:	ldr	r0, [fp, #-8]
    306c:	add	r1, r0, #8
    3070:	ldr	r0, [r0, #4]
    3074:	sub	r0, r0, #1
    3078:	add	r0, r1, r0, lsl #4
    307c:	ldr	r0, [r0]
    3080:	ldr	r0, [r0, #4]
    3084:	str	r0, [sp, #8]
    3088:	ldr	r0, [sp, #8]
    308c:	str	r0, [sp, #12]
    3090:	ldr	r0, [sp, #12]
    3094:	ldr	r0, [r0, #40]	; 0x28
    3098:	ldr	r0, [r0]
    309c:	cmp	r0, #1
    30a0:	bne	30d8 <coda_bin_cursor_read_int8_array+0xcc>
    30a4:	ldr	r0, [fp, #-8]
    30a8:	ldr	r2, [fp, #-12]
    30ac:	ldr	r1, [sp, #16]
    30b0:	movw	r3, #0
    30b4:	movt	r3, #0
    30b8:	str	r1, [sp, #4]
    30bc:	mov	r1, r3
    30c0:	movw	r3, #1
    30c4:	ldr	ip, [sp, #4]
    30c8:	str	ip, [sp]
    30cc:	bl	318c <read_array>
    30d0:	str	r0, [fp, #-4]
    30d4:	b	3180 <coda_bin_cursor_read_int8_array+0x174>
    30d8:	ldr	r0, [sp, #12]
    30dc:	ldr	r0, [r0, #40]	; 0x28
    30e0:	ldr	r0, [r0]
    30e4:	cmp	r0, #0
    30e8:	bne	30f0 <coda_bin_cursor_read_int8_array+0xe4>
    30ec:	b	3110 <coda_bin_cursor_read_int8_array+0x104>
    30f0:	movw	r0, #0
    30f4:	movt	r0, #0
    30f8:	movw	r1, #0
    30fc:	movt	r1, #0
    3100:	movw	r2, #906	; 0x38a
    3104:	movw	r3, #0
    3108:	movt	r3, #0
    310c:	bl	0 <__assert_fail>
    3110:	ldr	r0, [fp, #-8]
    3114:	ldr	r2, [fp, #-12]
    3118:	movw	r1, #0
    311c:	movt	r1, #0
    3120:	movw	r3, #1
    3124:	movw	ip, #0
    3128:	str	ip, [sp]
    312c:	bl	318c <read_array>
    3130:	cmp	r0, #0
    3134:	beq	3144 <coda_bin_cursor_read_int8_array+0x138>
    3138:	mvn	r0, #0
    313c:	str	r0, [fp, #-4]
    3140:	b	3180 <coda_bin_cursor_read_int8_array+0x174>
    3144:	ldr	r0, [sp, #16]
    3148:	cmp	r0, #0
    314c:	beq	3178 <coda_bin_cursor_read_int8_array+0x16c>
    3150:	ldr	r0, [fp, #-8]
    3154:	ldr	r1, [fp, #-12]
    3158:	movw	r2, #1
    315c:	bl	3570 <transpose_array>
    3160:	cmp	r0, #0
    3164:	beq	3174 <coda_bin_cursor_read_int8_array+0x168>
    3168:	mvn	r0, #0
    316c:	str	r0, [fp, #-4]
    3170:	b	3180 <coda_bin_cursor_read_int8_array+0x174>
    3174:	b	3178 <coda_bin_cursor_read_int8_array+0x16c>
    3178:	movw	r0, #0
    317c:	str	r0, [fp, #-4]
    3180:	ldr	r0, [fp, #-4]
    3184:	mov	sp, fp
    3188:	pop	{fp, pc}

0000318c <read_array>:
    318c:	push	{r4, r5, fp, lr}
    3190:	add	fp, sp, #8
    3194:	sub	sp, sp, #664	; 0x298
    3198:	ldr	ip, [fp, #8]
    319c:	add	lr, sp, #88	; 0x58
    31a0:	str	r0, [fp, #-16]
    31a4:	str	r1, [fp, #-20]	; 0xffffffec
    31a8:	str	r2, [fp, #-24]	; 0xffffffe8
    31ac:	str	r3, [fp, #-28]	; 0xffffffe4
    31b0:	ldr	r0, [fp, #-16]
    31b4:	add	r1, sp, #84	; 0x54
    31b8:	mov	r2, lr
    31bc:	str	ip, [sp, #24]
    31c0:	bl	0 <coda_cursor_get_array_dim>
    31c4:	cmp	r0, #0
    31c8:	beq	31d8 <read_array+0x4c>
    31cc:	mvn	r0, #0
    31d0:	str	r0, [fp, #-12]
    31d4:	b	3564 <read_array+0x3d8>
    31d8:	ldr	r0, [fp, #-16]
    31dc:	add	r1, sp, #120	; 0x78
    31e0:	str	r0, [sp, #20]
    31e4:	mov	r0, r1
    31e8:	ldr	r1, [sp, #20]
    31ec:	movw	r2, #520	; 0x208
    31f0:	bl	0 <memcpy>
    31f4:	ldr	r0, [sp, #84]	; 0x54
    31f8:	cmp	r0, #1
    31fc:	ble	320c <read_array+0x80>
    3200:	ldr	r0, [fp, #8]
    3204:	cmp	r0, #1
    3208:	beq	332c <read_array+0x1a0>
    320c:	movw	r0, #1
    3210:	str	r0, [sp, #80]	; 0x50
    3214:	movw	r0, #0
    3218:	str	r0, [sp, #76]	; 0x4c
    321c:	ldr	r0, [sp, #76]	; 0x4c
    3220:	ldr	r1, [sp, #84]	; 0x54
    3224:	cmp	r0, r1
    3228:	bge	3258 <read_array+0xcc>
    322c:	ldr	r0, [sp, #76]	; 0x4c
    3230:	add	r1, sp, #88	; 0x58
    3234:	add	r0, r1, r0, lsl #2
    3238:	ldr	r0, [r0]
    323c:	ldr	r1, [sp, #80]	; 0x50
    3240:	mul	r0, r1, r0
    3244:	str	r0, [sp, #80]	; 0x50
    3248:	ldr	r0, [sp, #76]	; 0x4c
    324c:	add	r0, r0, #1
    3250:	str	r0, [sp, #76]	; 0x4c
    3254:	b	321c <read_array+0x90>
    3258:	ldr	r0, [sp, #80]	; 0x50
    325c:	cmp	r0, #0
    3260:	ble	3328 <read_array+0x19c>
    3264:	add	r0, sp, #120	; 0x78
    3268:	movw	r1, #0
    326c:	bl	0 <coda_cursor_goto_array_element_by_index>
    3270:	cmp	r0, #0
    3274:	beq	3284 <read_array+0xf8>
    3278:	mvn	r0, #0
    327c:	str	r0, [fp, #-12]
    3280:	b	3564 <read_array+0x3d8>
    3284:	movw	r0, #0
    3288:	str	r0, [sp, #76]	; 0x4c
    328c:	ldr	r0, [sp, #76]	; 0x4c
    3290:	ldr	r1, [sp, #80]	; 0x50
    3294:	cmp	r0, r1
    3298:	bge	3324 <read_array+0x198>
    329c:	ldr	r0, [fp, #-20]	; 0xffffffec
    32a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    32a4:	ldr	r2, [sp, #76]	; 0x4c
    32a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    32ac:	mul	r2, r2, r3
    32b0:	add	r1, r1, r2
    32b4:	add	r2, sp, #120	; 0x78
    32b8:	str	r0, [sp, #16]
    32bc:	mov	r0, r2
    32c0:	ldr	r2, [sp, #16]
    32c4:	blx	r2
    32c8:	cmp	r0, #0
    32cc:	beq	32dc <read_array+0x150>
    32d0:	mvn	r0, #0
    32d4:	str	r0, [fp, #-12]
    32d8:	b	3564 <read_array+0x3d8>
    32dc:	ldr	r0, [sp, #76]	; 0x4c
    32e0:	ldr	r1, [sp, #80]	; 0x50
    32e4:	sub	r1, r1, #1
    32e8:	cmp	r0, r1
    32ec:	bge	3310 <read_array+0x184>
    32f0:	add	r0, sp, #120	; 0x78
    32f4:	bl	0 <coda_cursor_goto_next_array_element>
    32f8:	cmp	r0, #0
    32fc:	beq	330c <read_array+0x180>
    3300:	mvn	r0, #0
    3304:	str	r0, [fp, #-12]
    3308:	b	3564 <read_array+0x3d8>
    330c:	b	3310 <read_array+0x184>
    3310:	b	3314 <read_array+0x188>
    3314:	ldr	r0, [sp, #76]	; 0x4c
    3318:	add	r0, r0, #1
    331c:	str	r0, [sp, #76]	; 0x4c
    3320:	b	328c <read_array+0x100>
    3324:	b	3328 <read_array+0x19c>
    3328:	b	355c <read_array+0x3d0>
    332c:	movw	r0, #1
    3330:	str	r0, [sp, #40]	; 0x28
    3334:	movw	r0, #0
    3338:	str	r0, [sp, #76]	; 0x4c
    333c:	ldr	r0, [sp, #76]	; 0x4c
    3340:	ldr	r1, [sp, #84]	; 0x54
    3344:	cmp	r0, r1
    3348:	bge	3380 <read_array+0x1f4>
    334c:	ldr	r0, [sp, #76]	; 0x4c
    3350:	add	r1, sp, #40	; 0x28
    3354:	ldr	r2, [r1, r0, lsl #2]
    3358:	add	r3, sp, #88	; 0x58
    335c:	ldr	r3, [r3, r0, lsl #2]
    3360:	mul	r2, r2, r3
    3364:	add	r0, r0, #1
    3368:	add	r0, r1, r0, lsl #2
    336c:	str	r2, [r0]
    3370:	ldr	r0, [sp, #76]	; 0x4c
    3374:	add	r0, r0, #1
    3378:	str	r0, [sp, #76]	; 0x4c
    337c:	b	333c <read_array+0x1b0>
    3380:	ldr	r0, [sp, #84]	; 0x54
    3384:	add	r1, sp, #40	; 0x28
    3388:	add	r0, r1, r0, lsl #2
    338c:	ldr	r0, [r0, #-4]
    3390:	str	r0, [sp, #36]	; 0x24
    3394:	ldr	r0, [sp, #84]	; 0x54
    3398:	add	r0, r1, r0, lsl #2
    339c:	ldr	r0, [r0]
    33a0:	str	r0, [sp, #80]	; 0x50
    33a4:	ldr	r0, [sp, #80]	; 0x50
    33a8:	cmp	r0, #0
    33ac:	ble	3558 <read_array+0x3cc>
    33b0:	movw	r0, #0
    33b4:	str	r0, [sp, #32]
    33b8:	str	r0, [sp, #28]
    33bc:	add	r1, sp, #120	; 0x78
    33c0:	str	r0, [sp, #12]
    33c4:	mov	r0, r1
    33c8:	ldr	r1, [sp, #12]
    33cc:	bl	0 <coda_cursor_goto_array_element_by_index>
    33d0:	cmp	r0, #0
    33d4:	beq	33e4 <read_array+0x258>
    33d8:	mvn	r0, #0
    33dc:	str	r0, [fp, #-12]
    33e0:	b	3564 <read_array+0x3d8>
    33e4:	b	33e8 <read_array+0x25c>
    33e8:	b	33ec <read_array+0x260>
    33ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    33f0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    33f4:	ldr	r2, [sp, #28]
    33f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    33fc:	mul	r2, r2, r3
    3400:	add	r1, r1, r2
    3404:	add	r2, sp, #120	; 0x78
    3408:	str	r0, [sp, #8]
    340c:	mov	r0, r2
    3410:	ldr	r2, [sp, #8]
    3414:	blx	r2
    3418:	cmp	r0, #0
    341c:	beq	342c <read_array+0x2a0>
    3420:	mvn	r0, #0
    3424:	str	r0, [fp, #-12]
    3428:	b	3564 <read_array+0x3d8>
    342c:	ldr	r0, [sp, #32]
    3430:	add	r0, r0, #1
    3434:	str	r0, [sp, #32]
    3438:	ldr	r0, [sp, #32]
    343c:	ldr	r1, [sp, #80]	; 0x50
    3440:	cmp	r0, r1
    3444:	bge	3468 <read_array+0x2dc>
    3448:	add	r0, sp, #120	; 0x78
    344c:	bl	0 <coda_cursor_goto_next_array_element>
    3450:	cmp	r0, #0
    3454:	beq	3464 <read_array+0x2d8>
    3458:	mvn	r0, #0
    345c:	str	r0, [fp, #-12]
    3460:	b	3564 <read_array+0x3d8>
    3464:	b	3468 <read_array+0x2dc>
    3468:	ldr	r0, [sp, #36]	; 0x24
    346c:	ldr	r1, [sp, #28]
    3470:	add	r0, r1, r0
    3474:	str	r0, [sp, #28]
    3478:	ldr	r0, [sp, #28]
    347c:	ldr	r1, [sp, #80]	; 0x50
    3480:	cmp	r0, r1
    3484:	blt	33ec <read_array+0x260>
    3488:	ldr	r0, [sp, #32]
    348c:	ldr	r1, [sp, #80]	; 0x50
    3490:	cmp	r0, r1
    3494:	bne	349c <read_array+0x310>
    3498:	b	3554 <read_array+0x3c8>
    349c:	ldr	r0, [sp, #84]	; 0x54
    34a0:	add	r1, sp, #40	; 0x28
    34a4:	add	r0, r1, r0, lsl #2
    34a8:	ldr	r1, [r0, #-8]
    34ac:	ldr	r0, [r0]
    34b0:	sub	r0, r1, r0
    34b4:	ldr	r1, [sp, #28]
    34b8:	add	r0, r1, r0
    34bc:	str	r0, [sp, #28]
    34c0:	ldr	r0, [sp, #84]	; 0x54
    34c4:	sub	r0, r0, #3
    34c8:	str	r0, [sp, #76]	; 0x4c
    34cc:	ldr	r0, [sp, #76]	; 0x4c
    34d0:	cmp	r0, #0
    34d4:	movw	r0, #0
    34d8:	str	r0, [sp, #4]
    34dc:	blt	3508 <read_array+0x37c>
    34e0:	ldr	r0, [sp, #28]
    34e4:	ldr	r1, [sp, #76]	; 0x4c
    34e8:	add	r1, r1, #2
    34ec:	add	r2, sp, #40	; 0x28
    34f0:	add	r1, r2, r1, lsl #2
    34f4:	ldr	r1, [r1]
    34f8:	cmp	r0, r1
    34fc:	movw	r0, #0
    3500:	movge	r0, #1
    3504:	str	r0, [sp, #4]
    3508:	ldr	r0, [sp, #4]
    350c:	tst	r0, #1
    3510:	beq	3550 <read_array+0x3c4>
    3514:	ldr	r0, [sp, #76]	; 0x4c
    3518:	add	r1, sp, #40	; 0x28
    351c:	ldr	r2, [r1, r0, lsl #2]
    3520:	add	r0, r0, #2
    3524:	add	r0, r1, r0, lsl #2
    3528:	ldr	r0, [r0]
    352c:	sub	r0, r2, r0
    3530:	ldr	r1, [sp, #28]
    3534:	add	r0, r1, r0
    3538:	str	r0, [sp, #28]
    353c:	ldr	r0, [sp, #76]	; 0x4c
    3540:	mvn	r1, #0
    3544:	add	r0, r0, r1
    3548:	str	r0, [sp, #76]	; 0x4c
    354c:	b	34cc <read_array+0x340>
    3550:	b	33e8 <read_array+0x25c>
    3554:	b	3558 <read_array+0x3cc>
    3558:	b	355c <read_array+0x3d0>
    355c:	movw	r0, #0
    3560:	str	r0, [fp, #-12]
    3564:	ldr	r0, [fp, #-12]
    3568:	sub	sp, fp, #8
    356c:	pop	{r4, r5, fp, pc}

00003570 <transpose_array>:
    3570:	push	{fp, lr}
    3574:	mov	fp, sp
    3578:	sub	sp, sp, #208	; 0xd0
    357c:	sub	r3, fp, #48	; 0x30
    3580:	str	r0, [fp, #-8]
    3584:	str	r1, [fp, #-12]
    3588:	str	r2, [fp, #-16]
    358c:	movw	r0, #0
    3590:	str	r0, [sp, #40]	; 0x28
    3594:	ldr	r0, [fp, #-8]
    3598:	sub	r1, fp, #52	; 0x34
    359c:	mov	r2, r3
    35a0:	bl	0 <coda_cursor_get_array_dim>
    35a4:	cmp	r0, #0
    35a8:	beq	35b8 <transpose_array+0x48>
    35ac:	mvn	r0, #0
    35b0:	str	r0, [fp, #-4]
    35b4:	b	3c14 <transpose_array+0x6a4>
    35b8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    35bc:	cmp	r0, #1
    35c0:	bgt	35d0 <transpose_array+0x60>
    35c4:	movw	r0, #0
    35c8:	str	r0, [fp, #-4]
    35cc:	b	3c14 <transpose_array+0x6a4>
    35d0:	ldr	r0, [fp, #-12]
    35d4:	str	r0, [sp, #32]
    35d8:	movw	r0, #1
    35dc:	str	r0, [fp, #-56]	; 0xffffffc8
    35e0:	movw	r0, #0
    35e4:	str	r0, [sp, #36]	; 0x24
    35e8:	ldr	r0, [sp, #36]	; 0x24
    35ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
    35f0:	cmp	r0, r1
    35f4:	bge	3650 <transpose_array+0xe0>
    35f8:	ldr	r0, [sp, #36]	; 0x24
    35fc:	sub	r1, fp, #48	; 0x30
    3600:	ldr	r0, [r1, r0, lsl #2]
    3604:	ldr	r2, [fp, #-56]	; 0xffffffc8
    3608:	mul	r0, r2, r0
    360c:	str	r0, [fp, #-56]	; 0xffffffc8
    3610:	ldr	r0, [sp, #36]	; 0x24
    3614:	add	r2, sp, #80	; 0x50
    3618:	mov	r3, #0
    361c:	str	r3, [r2, r0, lsl #2]
    3620:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3624:	sub	r0, r0, #1
    3628:	ldr	r2, [sp, #36]	; 0x24
    362c:	sub	r0, r0, r2
    3630:	ldr	r0, [r1, r0, lsl #2]
    3634:	add	r1, sp, #44	; 0x2c
    3638:	add	r1, r1, r2, lsl #2
    363c:	str	r0, [r1]
    3640:	ldr	r0, [sp, #36]	; 0x24
    3644:	add	r0, r0, #1
    3648:	str	r0, [sp, #36]	; 0x24
    364c:	b	35e8 <transpose_array+0x78>
    3650:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3654:	cmp	r0, #1
    3658:	bgt	3668 <transpose_array+0xf8>
    365c:	movw	r0, #0
    3660:	str	r0, [fp, #-4]
    3664:	b	3c14 <transpose_array+0x6a4>
    3668:	ldr	r0, [fp, #-52]	; 0xffffffcc
    366c:	sub	r1, fp, #92	; 0x5c
    3670:	mov	r2, #1
    3674:	str	r2, [r1, r0, lsl #2]
    3678:	ldr	r0, [fp, #-52]	; 0xffffffcc
    367c:	add	r1, sp, #44	; 0x2c
    3680:	add	r0, r1, r0, lsl #2
    3684:	movw	r1, #1
    3688:	str	r1, [r0]
    368c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3690:	str	r0, [sp, #36]	; 0x24
    3694:	ldr	r0, [sp, #36]	; 0x24
    3698:	cmp	r0, #0
    369c:	ble	36d8 <transpose_array+0x168>
    36a0:	ldr	r0, [sp, #36]	; 0x24
    36a4:	sub	r1, fp, #92	; 0x5c
    36a8:	ldr	r2, [r1, r0, lsl #2]
    36ac:	add	r3, sp, #44	; 0x2c
    36b0:	ldr	r3, [r3, r0, lsl #2]
    36b4:	mul	r2, r2, r3
    36b8:	sub	r0, r0, #1
    36bc:	add	r0, r1, r0, lsl #2
    36c0:	str	r2, [r0]
    36c4:	ldr	r0, [sp, #36]	; 0x24
    36c8:	mvn	r1, #0
    36cc:	add	r0, r0, r1
    36d0:	str	r0, [sp, #36]	; 0x24
    36d4:	b	3694 <transpose_array+0x124>
    36d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    36dc:	add	r1, sp, #44	; 0x2c
    36e0:	mov	r2, #0
    36e4:	str	r2, [r1, r0, lsl #2]
    36e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    36ec:	add	r1, sp, #80	; 0x50
    36f0:	add	r0, r1, r0, lsl #2
    36f4:	movw	r1, #0
    36f8:	str	r1, [r0]
    36fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3700:	ldr	r1, [fp, #-16]
    3704:	mul	r0, r0, r1
    3708:	bl	0 <malloc>
    370c:	str	r0, [sp, #28]
    3710:	ldr	r0, [sp, #28]
    3714:	movw	r1, #0
    3718:	cmp	r0, r1
    371c:	bne	3758 <transpose_array+0x1e8>
    3720:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3724:	ldr	r1, [fp, #-16]
    3728:	mul	r2, r0, r1
    372c:	mvn	r0, #0
    3730:	movw	r1, #0
    3734:	movt	r1, #0
    3738:	movw	r3, #0
    373c:	movt	r3, #0
    3740:	movw	ip, #93	; 0x5d
    3744:	str	ip, [sp]
    3748:	bl	0 <coda_set_error>
    374c:	mvn	r0, #0
    3750:	str	r0, [fp, #-4]
    3754:	b	3c14 <transpose_array+0x6a4>
    3758:	ldr	r0, [fp, #-16]
    375c:	sub	r0, r0, #1
    3760:	cmp	r0, #7
    3764:	str	r0, [sp, #8]
    3768:	bhi	3bcc <transpose_array+0x65c>
    376c:	add	r0, pc, #8
    3770:	ldr	r1, [sp, #8]
    3774:	ldr	r0, [r0, r1, lsl #2]
    3778:	mov	pc, r0
    377c:	.word	0x0000379c
    3780:	.word	0x000038a4
    3784:	.word	0x00003bcc
    3788:	.word	0x000039b4
    378c:	.word	0x00003bcc
    3790:	.word	0x00003bcc
    3794:	.word	0x00003bcc
    3798:	.word	0x00003abc
    379c:	movw	r0, #0
    37a0:	str	r0, [sp, #36]	; 0x24
    37a4:	ldr	r0, [sp, #36]	; 0x24
    37a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    37ac:	cmp	r0, r1
    37b0:	bge	38a0 <transpose_array+0x330>
    37b4:	mov	r0, #0
    37b8:	str	r0, [sp, #24]
    37bc:	ldr	r0, [sp, #32]
    37c0:	ldr	r1, [sp, #36]	; 0x24
    37c4:	ldrb	r0, [r0, r1]
    37c8:	ldr	r1, [sp, #28]
    37cc:	ldr	r2, [sp, #40]	; 0x28
    37d0:	strb	r0, [r1, r2]
    37d4:	ldr	r0, [sp, #24]
    37d8:	sub	r1, fp, #92	; 0x5c
    37dc:	ldr	r0, [r1, r0, lsl #2]
    37e0:	ldr	r1, [sp, #40]	; 0x28
    37e4:	add	r0, r1, r0
    37e8:	str	r0, [sp, #40]	; 0x28
    37ec:	ldr	r0, [sp, #24]
    37f0:	add	r1, sp, #80	; 0x50
    37f4:	add	r0, r1, r0, lsl #2
    37f8:	ldr	r1, [r0]
    37fc:	add	r1, r1, #1
    3800:	str	r1, [r0]
    3804:	ldr	r0, [sp, #24]
    3808:	add	r1, sp, #80	; 0x50
    380c:	ldr	r1, [r1, r0, lsl #2]
    3810:	add	r2, sp, #44	; 0x2c
    3814:	add	r0, r2, r0, lsl #2
    3818:	ldr	r0, [r0]
    381c:	cmp	r1, r0
    3820:	bne	388c <transpose_array+0x31c>
    3824:	ldr	r0, [sp, #24]
    3828:	add	r1, sp, #80	; 0x50
    382c:	mov	r2, #0
    3830:	str	r2, [r1, r0, lsl #2]
    3834:	ldr	r0, [sp, #24]
    3838:	sub	r2, fp, #92	; 0x5c
    383c:	ldr	r3, [r2, r0, lsl #2]
    3840:	add	ip, sp, #44	; 0x2c
    3844:	ldr	r0, [ip, r0, lsl #2]
    3848:	ldr	ip, [sp, #40]	; 0x28
    384c:	mls	r0, r3, r0, ip
    3850:	str	r0, [sp, #40]	; 0x28
    3854:	ldr	r0, [sp, #24]
    3858:	add	r0, r0, #1
    385c:	str	r0, [sp, #24]
    3860:	ldr	r0, [sp, #24]
    3864:	ldr	r0, [r2, r0, lsl #2]
    3868:	ldr	r2, [sp, #40]	; 0x28
    386c:	add	r0, r2, r0
    3870:	str	r0, [sp, #40]	; 0x28
    3874:	ldr	r0, [sp, #24]
    3878:	add	r0, r1, r0, lsl #2
    387c:	ldr	r1, [r0]
    3880:	add	r1, r1, #1
    3884:	str	r1, [r0]
    3888:	b	3804 <transpose_array+0x294>
    388c:	b	3890 <transpose_array+0x320>
    3890:	ldr	r0, [sp, #36]	; 0x24
    3894:	add	r0, r0, #1
    3898:	str	r0, [sp, #36]	; 0x24
    389c:	b	37a4 <transpose_array+0x234>
    38a0:	b	3bec <transpose_array+0x67c>
    38a4:	movw	r0, #0
    38a8:	str	r0, [sp, #36]	; 0x24
    38ac:	ldr	r0, [sp, #36]	; 0x24
    38b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
    38b4:	cmp	r0, r1
    38b8:	bge	39b0 <transpose_array+0x440>
    38bc:	mov	r0, #0
    38c0:	str	r0, [sp, #20]
    38c4:	ldr	r0, [sp, #32]
    38c8:	ldr	r1, [sp, #36]	; 0x24
    38cc:	add	r0, r0, r1, lsl #1
    38d0:	ldrh	r0, [r0]
    38d4:	ldr	r1, [sp, #28]
    38d8:	ldr	r2, [sp, #40]	; 0x28
    38dc:	add	r1, r1, r2, lsl #1
    38e0:	strh	r0, [r1]
    38e4:	ldr	r0, [sp, #20]
    38e8:	sub	r1, fp, #92	; 0x5c
    38ec:	ldr	r0, [r1, r0, lsl #2]
    38f0:	ldr	r1, [sp, #40]	; 0x28
    38f4:	add	r0, r1, r0
    38f8:	str	r0, [sp, #40]	; 0x28
    38fc:	ldr	r0, [sp, #20]
    3900:	add	r1, sp, #80	; 0x50
    3904:	add	r0, r1, r0, lsl #2
    3908:	ldr	r1, [r0]
    390c:	add	r1, r1, #1
    3910:	str	r1, [r0]
    3914:	ldr	r0, [sp, #20]
    3918:	add	r1, sp, #80	; 0x50
    391c:	ldr	r1, [r1, r0, lsl #2]
    3920:	add	r2, sp, #44	; 0x2c
    3924:	add	r0, r2, r0, lsl #2
    3928:	ldr	r0, [r0]
    392c:	cmp	r1, r0
    3930:	bne	399c <transpose_array+0x42c>
    3934:	ldr	r0, [sp, #20]
    3938:	add	r1, sp, #80	; 0x50
    393c:	mov	r2, #0
    3940:	str	r2, [r1, r0, lsl #2]
    3944:	ldr	r0, [sp, #20]
    3948:	sub	r2, fp, #92	; 0x5c
    394c:	ldr	r3, [r2, r0, lsl #2]
    3950:	add	ip, sp, #44	; 0x2c
    3954:	ldr	r0, [ip, r0, lsl #2]
    3958:	ldr	ip, [sp, #40]	; 0x28
    395c:	mls	r0, r3, r0, ip
    3960:	str	r0, [sp, #40]	; 0x28
    3964:	ldr	r0, [sp, #20]
    3968:	add	r0, r0, #1
    396c:	str	r0, [sp, #20]
    3970:	ldr	r0, [sp, #20]
    3974:	ldr	r0, [r2, r0, lsl #2]
    3978:	ldr	r2, [sp, #40]	; 0x28
    397c:	add	r0, r2, r0
    3980:	str	r0, [sp, #40]	; 0x28
    3984:	ldr	r0, [sp, #20]
    3988:	add	r0, r1, r0, lsl #2
    398c:	ldr	r1, [r0]
    3990:	add	r1, r1, #1
    3994:	str	r1, [r0]
    3998:	b	3914 <transpose_array+0x3a4>
    399c:	b	39a0 <transpose_array+0x430>
    39a0:	ldr	r0, [sp, #36]	; 0x24
    39a4:	add	r0, r0, #1
    39a8:	str	r0, [sp, #36]	; 0x24
    39ac:	b	38ac <transpose_array+0x33c>
    39b0:	b	3bec <transpose_array+0x67c>
    39b4:	movw	r0, #0
    39b8:	str	r0, [sp, #36]	; 0x24
    39bc:	ldr	r0, [sp, #36]	; 0x24
    39c0:	ldr	r1, [fp, #-56]	; 0xffffffc8
    39c4:	cmp	r0, r1
    39c8:	bge	3ab8 <transpose_array+0x548>
    39cc:	mov	r0, #0
    39d0:	str	r0, [sp, #16]
    39d4:	ldr	r0, [sp, #32]
    39d8:	ldr	r1, [sp, #36]	; 0x24
    39dc:	ldr	r0, [r0, r1, lsl #2]
    39e0:	ldr	r1, [sp, #28]
    39e4:	ldr	r2, [sp, #40]	; 0x28
    39e8:	str	r0, [r1, r2, lsl #2]
    39ec:	ldr	r0, [sp, #16]
    39f0:	sub	r1, fp, #92	; 0x5c
    39f4:	ldr	r0, [r1, r0, lsl #2]
    39f8:	ldr	r1, [sp, #40]	; 0x28
    39fc:	add	r0, r1, r0
    3a00:	str	r0, [sp, #40]	; 0x28
    3a04:	ldr	r0, [sp, #16]
    3a08:	add	r1, sp, #80	; 0x50
    3a0c:	add	r0, r1, r0, lsl #2
    3a10:	ldr	r1, [r0]
    3a14:	add	r1, r1, #1
    3a18:	str	r1, [r0]
    3a1c:	ldr	r0, [sp, #16]
    3a20:	add	r1, sp, #80	; 0x50
    3a24:	ldr	r1, [r1, r0, lsl #2]
    3a28:	add	r2, sp, #44	; 0x2c
    3a2c:	add	r0, r2, r0, lsl #2
    3a30:	ldr	r0, [r0]
    3a34:	cmp	r1, r0
    3a38:	bne	3aa4 <transpose_array+0x534>
    3a3c:	ldr	r0, [sp, #16]
    3a40:	add	r1, sp, #80	; 0x50
    3a44:	mov	r2, #0
    3a48:	str	r2, [r1, r0, lsl #2]
    3a4c:	ldr	r0, [sp, #16]
    3a50:	sub	r2, fp, #92	; 0x5c
    3a54:	ldr	r3, [r2, r0, lsl #2]
    3a58:	add	ip, sp, #44	; 0x2c
    3a5c:	ldr	r0, [ip, r0, lsl #2]
    3a60:	ldr	ip, [sp, #40]	; 0x28
    3a64:	mls	r0, r3, r0, ip
    3a68:	str	r0, [sp, #40]	; 0x28
    3a6c:	ldr	r0, [sp, #16]
    3a70:	add	r0, r0, #1
    3a74:	str	r0, [sp, #16]
    3a78:	ldr	r0, [sp, #16]
    3a7c:	ldr	r0, [r2, r0, lsl #2]
    3a80:	ldr	r2, [sp, #40]	; 0x28
    3a84:	add	r0, r2, r0
    3a88:	str	r0, [sp, #40]	; 0x28
    3a8c:	ldr	r0, [sp, #16]
    3a90:	add	r0, r1, r0, lsl #2
    3a94:	ldr	r1, [r0]
    3a98:	add	r1, r1, #1
    3a9c:	str	r1, [r0]
    3aa0:	b	3a1c <transpose_array+0x4ac>
    3aa4:	b	3aa8 <transpose_array+0x538>
    3aa8:	ldr	r0, [sp, #36]	; 0x24
    3aac:	add	r0, r0, #1
    3ab0:	str	r0, [sp, #36]	; 0x24
    3ab4:	b	39bc <transpose_array+0x44c>
    3ab8:	b	3bec <transpose_array+0x67c>
    3abc:	movw	r0, #0
    3ac0:	str	r0, [sp, #36]	; 0x24
    3ac4:	ldr	r0, [sp, #36]	; 0x24
    3ac8:	ldr	r1, [fp, #-56]	; 0xffffffc8
    3acc:	cmp	r0, r1
    3ad0:	bge	3bc8 <transpose_array+0x658>
    3ad4:	mov	r0, #0
    3ad8:	str	r0, [sp, #12]
    3adc:	ldr	r0, [sp, #32]
    3ae0:	ldr	r1, [sp, #36]	; 0x24
    3ae4:	ldr	r1, [r0, r1, lsl #3]!
    3ae8:	ldr	r0, [r0, #4]
    3aec:	ldr	r2, [sp, #28]
    3af0:	ldr	r3, [sp, #40]	; 0x28
    3af4:	str	r1, [r2, r3, lsl #3]!
    3af8:	str	r0, [r2, #4]
    3afc:	ldr	r0, [sp, #12]
    3b00:	sub	r1, fp, #92	; 0x5c
    3b04:	ldr	r0, [r1, r0, lsl #2]
    3b08:	ldr	r1, [sp, #40]	; 0x28
    3b0c:	add	r0, r1, r0
    3b10:	str	r0, [sp, #40]	; 0x28
    3b14:	ldr	r0, [sp, #12]
    3b18:	add	r1, sp, #80	; 0x50
    3b1c:	add	r0, r1, r0, lsl #2
    3b20:	ldr	r1, [r0]
    3b24:	add	r1, r1, #1
    3b28:	str	r1, [r0]
    3b2c:	ldr	r0, [sp, #12]
    3b30:	add	r1, sp, #80	; 0x50
    3b34:	ldr	r1, [r1, r0, lsl #2]
    3b38:	add	r2, sp, #44	; 0x2c
    3b3c:	add	r0, r2, r0, lsl #2
    3b40:	ldr	r0, [r0]
    3b44:	cmp	r1, r0
    3b48:	bne	3bb4 <transpose_array+0x644>
    3b4c:	ldr	r0, [sp, #12]
    3b50:	add	r1, sp, #80	; 0x50
    3b54:	mov	r2, #0
    3b58:	str	r2, [r1, r0, lsl #2]
    3b5c:	ldr	r0, [sp, #12]
    3b60:	sub	r2, fp, #92	; 0x5c
    3b64:	ldr	r3, [r2, r0, lsl #2]
    3b68:	add	ip, sp, #44	; 0x2c
    3b6c:	ldr	r0, [ip, r0, lsl #2]
    3b70:	ldr	ip, [sp, #40]	; 0x28
    3b74:	mls	r0, r3, r0, ip
    3b78:	str	r0, [sp, #40]	; 0x28
    3b7c:	ldr	r0, [sp, #12]
    3b80:	add	r0, r0, #1
    3b84:	str	r0, [sp, #12]
    3b88:	ldr	r0, [sp, #12]
    3b8c:	ldr	r0, [r2, r0, lsl #2]
    3b90:	ldr	r2, [sp, #40]	; 0x28
    3b94:	add	r0, r2, r0
    3b98:	str	r0, [sp, #40]	; 0x28
    3b9c:	ldr	r0, [sp, #12]
    3ba0:	add	r0, r1, r0, lsl #2
    3ba4:	ldr	r1, [r0]
    3ba8:	add	r1, r1, #1
    3bac:	str	r1, [r0]
    3bb0:	b	3b2c <transpose_array+0x5bc>
    3bb4:	b	3bb8 <transpose_array+0x648>
    3bb8:	ldr	r0, [sp, #36]	; 0x24
    3bbc:	add	r0, r0, #1
    3bc0:	str	r0, [sp, #36]	; 0x24
    3bc4:	b	3ac4 <transpose_array+0x554>
    3bc8:	b	3bec <transpose_array+0x67c>
    3bcc:	movw	r0, #0
    3bd0:	movt	r0, #0
    3bd4:	movw	r1, #0
    3bd8:	movt	r1, #0
    3bdc:	movw	r2, #172	; 0xac
    3be0:	movw	r3, #0
    3be4:	movt	r3, #0
    3be8:	bl	0 <__assert_fail>
    3bec:	ldr	r0, [fp, #-12]
    3bf0:	ldr	r1, [sp, #28]
    3bf4:	ldr	r2, [fp, #-56]	; 0xffffffc8
    3bf8:	ldr	r3, [fp, #-16]
    3bfc:	mul	r2, r2, r3
    3c00:	bl	0 <memcpy>
    3c04:	ldr	r0, [sp, #28]
    3c08:	bl	0 <free>
    3c0c:	movw	r0, #0
    3c10:	str	r0, [fp, #-4]
    3c14:	ldr	r0, [fp, #-4]
    3c18:	mov	sp, fp
    3c1c:	pop	{fp, pc}

00003c20 <coda_bin_cursor_read_uint8_array>:
    3c20:	push	{fp, lr}
    3c24:	mov	fp, sp
    3c28:	sub	sp, sp, #32
    3c2c:	str	r0, [fp, #-8]
    3c30:	str	r1, [fp, #-12]
    3c34:	str	r2, [sp, #16]
    3c38:	ldr	r0, [fp, #-8]
    3c3c:	add	r1, r0, #8
    3c40:	ldr	r0, [r0, #4]
    3c44:	sub	r0, r0, #1
    3c48:	add	r0, r1, r0, lsl #4
    3c4c:	ldr	r0, [r0]
    3c50:	ldr	r0, [r0]
    3c54:	cmp	r0, #100	; 0x64
    3c58:	bcs	3c7c <coda_bin_cursor_read_uint8_array+0x5c>
    3c5c:	ldr	r0, [fp, #-8]
    3c60:	add	r1, r0, #8
    3c64:	ldr	r0, [r0, #4]
    3c68:	sub	r0, r0, #1
    3c6c:	add	r0, r1, r0, lsl #4
    3c70:	ldr	r0, [r0]
    3c74:	str	r0, [sp, #8]
    3c78:	b	3c9c <coda_bin_cursor_read_uint8_array+0x7c>
    3c7c:	ldr	r0, [fp, #-8]
    3c80:	add	r1, r0, #8
    3c84:	ldr	r0, [r0, #4]
    3c88:	sub	r0, r0, #1
    3c8c:	add	r0, r1, r0, lsl #4
    3c90:	ldr	r0, [r0]
    3c94:	ldr	r0, [r0, #4]
    3c98:	str	r0, [sp, #8]
    3c9c:	ldr	r0, [sp, #8]
    3ca0:	str	r0, [sp, #12]
    3ca4:	ldr	r0, [sp, #12]
    3ca8:	ldr	r0, [r0, #40]	; 0x28
    3cac:	ldr	r0, [r0]
    3cb0:	cmp	r0, #1
    3cb4:	bne	3cec <coda_bin_cursor_read_uint8_array+0xcc>
    3cb8:	ldr	r0, [fp, #-8]
    3cbc:	ldr	r2, [fp, #-12]
    3cc0:	ldr	r1, [sp, #16]
    3cc4:	movw	r3, #0
    3cc8:	movt	r3, #0
    3ccc:	str	r1, [sp, #4]
    3cd0:	mov	r1, r3
    3cd4:	movw	r3, #1
    3cd8:	ldr	ip, [sp, #4]
    3cdc:	str	ip, [sp]
    3ce0:	bl	318c <read_array>
    3ce4:	str	r0, [fp, #-4]
    3ce8:	b	3d94 <coda_bin_cursor_read_uint8_array+0x174>
    3cec:	ldr	r0, [sp, #12]
    3cf0:	ldr	r0, [r0, #40]	; 0x28
    3cf4:	ldr	r0, [r0]
    3cf8:	cmp	r0, #0
    3cfc:	bne	3d04 <coda_bin_cursor_read_uint8_array+0xe4>
    3d00:	b	3d24 <coda_bin_cursor_read_uint8_array+0x104>
    3d04:	movw	r0, #0
    3d08:	movt	r0, #0
    3d0c:	movw	r1, #0
    3d10:	movt	r1, #0
    3d14:	movw	r2, #932	; 0x3a4
    3d18:	movw	r3, #0
    3d1c:	movt	r3, #0
    3d20:	bl	0 <__assert_fail>
    3d24:	ldr	r0, [fp, #-8]
    3d28:	ldr	r2, [fp, #-12]
    3d2c:	movw	r1, #0
    3d30:	movt	r1, #0
    3d34:	movw	r3, #1
    3d38:	movw	ip, #0
    3d3c:	str	ip, [sp]
    3d40:	bl	318c <read_array>
    3d44:	cmp	r0, #0
    3d48:	beq	3d58 <coda_bin_cursor_read_uint8_array+0x138>
    3d4c:	mvn	r0, #0
    3d50:	str	r0, [fp, #-4]
    3d54:	b	3d94 <coda_bin_cursor_read_uint8_array+0x174>
    3d58:	ldr	r0, [sp, #16]
    3d5c:	cmp	r0, #0
    3d60:	beq	3d8c <coda_bin_cursor_read_uint8_array+0x16c>
    3d64:	ldr	r0, [fp, #-8]
    3d68:	ldr	r1, [fp, #-12]
    3d6c:	movw	r2, #1
    3d70:	bl	3570 <transpose_array>
    3d74:	cmp	r0, #0
    3d78:	beq	3d88 <coda_bin_cursor_read_uint8_array+0x168>
    3d7c:	mvn	r0, #0
    3d80:	str	r0, [fp, #-4]
    3d84:	b	3d94 <coda_bin_cursor_read_uint8_array+0x174>
    3d88:	b	3d8c <coda_bin_cursor_read_uint8_array+0x16c>
    3d8c:	movw	r0, #0
    3d90:	str	r0, [fp, #-4]
    3d94:	ldr	r0, [fp, #-4]
    3d98:	mov	sp, fp
    3d9c:	pop	{fp, pc}

00003da0 <coda_bin_cursor_read_int16_array>:
    3da0:	push	{fp, lr}
    3da4:	mov	fp, sp
    3da8:	sub	sp, sp, #40	; 0x28
    3dac:	str	r0, [fp, #-8]
    3db0:	str	r1, [fp, #-12]
    3db4:	str	r2, [fp, #-16]
    3db8:	ldr	r0, [fp, #-8]
    3dbc:	add	r1, r0, #8
    3dc0:	ldr	r0, [r0, #4]
    3dc4:	sub	r0, r0, #1
    3dc8:	add	r0, r1, r0, lsl #4
    3dcc:	ldr	r0, [r0]
    3dd0:	ldr	r0, [r0]
    3dd4:	cmp	r0, #100	; 0x64
    3dd8:	bcs	3dfc <coda_bin_cursor_read_int16_array+0x5c>
    3ddc:	ldr	r0, [fp, #-8]
    3de0:	add	r1, r0, #8
    3de4:	ldr	r0, [r0, #4]
    3de8:	sub	r0, r0, #1
    3dec:	add	r0, r1, r0, lsl #4
    3df0:	ldr	r0, [r0]
    3df4:	str	r0, [sp, #16]
    3df8:	b	3e1c <coda_bin_cursor_read_int16_array+0x7c>
    3dfc:	ldr	r0, [fp, #-8]
    3e00:	add	r1, r0, #8
    3e04:	ldr	r0, [r0, #4]
    3e08:	sub	r0, r0, #1
    3e0c:	add	r0, r1, r0, lsl #4
    3e10:	ldr	r0, [r0]
    3e14:	ldr	r0, [r0, #4]
    3e18:	str	r0, [sp, #16]
    3e1c:	ldr	r0, [sp, #16]
    3e20:	str	r0, [sp, #20]
    3e24:	ldr	r0, [sp, #20]
    3e28:	ldr	r0, [r0, #40]	; 0x28
    3e2c:	ldr	r0, [r0]
    3e30:	cmp	r0, #1
    3e34:	bne	3e78 <coda_bin_cursor_read_int16_array+0xd8>
    3e38:	movw	r0, #0
    3e3c:	movt	r0, #0
    3e40:	ldr	r1, [fp, #-8]
    3e44:	ldr	r2, [fp, #-12]
    3e48:	ldr	r3, [fp, #-16]
    3e4c:	str	r0, [sp, #12]
    3e50:	mov	r0, r1
    3e54:	ldr	r1, [sp, #12]
    3e58:	movw	ip, #2
    3e5c:	str	r3, [sp, #8]
    3e60:	mov	r3, ip
    3e64:	ldr	ip, [sp, #8]
    3e68:	str	ip, [sp]
    3e6c:	bl	318c <read_array>
    3e70:	str	r0, [fp, #-4]
    3e74:	b	3f2c <coda_bin_cursor_read_int16_array+0x18c>
    3e78:	ldr	r0, [sp, #20]
    3e7c:	ldr	r0, [r0, #40]	; 0x28
    3e80:	ldr	r0, [r0]
    3e84:	cmp	r0, #0
    3e88:	bne	3e90 <coda_bin_cursor_read_int16_array+0xf0>
    3e8c:	b	3eb0 <coda_bin_cursor_read_int16_array+0x110>
    3e90:	movw	r0, #0
    3e94:	movt	r0, #0
    3e98:	movw	r1, #0
    3e9c:	movt	r1, #0
    3ea0:	movw	r2, #958	; 0x3be
    3ea4:	movw	r3, #0
    3ea8:	movt	r3, #0
    3eac:	bl	0 <__assert_fail>
    3eb0:	movw	r0, #0
    3eb4:	movt	r0, #0
    3eb8:	ldr	r1, [fp, #-8]
    3ebc:	ldr	r2, [fp, #-12]
    3ec0:	str	r0, [sp, #4]
    3ec4:	mov	r0, r1
    3ec8:	ldr	r1, [sp, #4]
    3ecc:	movw	r3, #2
    3ed0:	movw	ip, #0
    3ed4:	str	ip, [sp]
    3ed8:	bl	318c <read_array>
    3edc:	cmp	r0, #0
    3ee0:	beq	3ef0 <coda_bin_cursor_read_int16_array+0x150>
    3ee4:	mvn	r0, #0
    3ee8:	str	r0, [fp, #-4]
    3eec:	b	3f2c <coda_bin_cursor_read_int16_array+0x18c>
    3ef0:	ldr	r0, [fp, #-16]
    3ef4:	cmp	r0, #0
    3ef8:	beq	3f24 <coda_bin_cursor_read_int16_array+0x184>
    3efc:	ldr	r0, [fp, #-8]
    3f00:	ldr	r1, [fp, #-12]
    3f04:	movw	r2, #2
    3f08:	bl	3570 <transpose_array>
    3f0c:	cmp	r0, #0
    3f10:	beq	3f20 <coda_bin_cursor_read_int16_array+0x180>
    3f14:	mvn	r0, #0
    3f18:	str	r0, [fp, #-4]
    3f1c:	b	3f2c <coda_bin_cursor_read_int16_array+0x18c>
    3f20:	b	3f24 <coda_bin_cursor_read_int16_array+0x184>
    3f24:	movw	r0, #0
    3f28:	str	r0, [fp, #-4]
    3f2c:	ldr	r0, [fp, #-4]
    3f30:	mov	sp, fp
    3f34:	pop	{fp, pc}

00003f38 <coda_bin_cursor_read_uint16_array>:
    3f38:	push	{fp, lr}
    3f3c:	mov	fp, sp
    3f40:	sub	sp, sp, #40	; 0x28
    3f44:	str	r0, [fp, #-8]
    3f48:	str	r1, [fp, #-12]
    3f4c:	str	r2, [fp, #-16]
    3f50:	ldr	r0, [fp, #-8]
    3f54:	add	r1, r0, #8
    3f58:	ldr	r0, [r0, #4]
    3f5c:	sub	r0, r0, #1
    3f60:	add	r0, r1, r0, lsl #4
    3f64:	ldr	r0, [r0]
    3f68:	ldr	r0, [r0]
    3f6c:	cmp	r0, #100	; 0x64
    3f70:	bcs	3f94 <coda_bin_cursor_read_uint16_array+0x5c>
    3f74:	ldr	r0, [fp, #-8]
    3f78:	add	r1, r0, #8
    3f7c:	ldr	r0, [r0, #4]
    3f80:	sub	r0, r0, #1
    3f84:	add	r0, r1, r0, lsl #4
    3f88:	ldr	r0, [r0]
    3f8c:	str	r0, [sp, #16]
    3f90:	b	3fb4 <coda_bin_cursor_read_uint16_array+0x7c>
    3f94:	ldr	r0, [fp, #-8]
    3f98:	add	r1, r0, #8
    3f9c:	ldr	r0, [r0, #4]
    3fa0:	sub	r0, r0, #1
    3fa4:	add	r0, r1, r0, lsl #4
    3fa8:	ldr	r0, [r0]
    3fac:	ldr	r0, [r0, #4]
    3fb0:	str	r0, [sp, #16]
    3fb4:	ldr	r0, [sp, #16]
    3fb8:	str	r0, [sp, #20]
    3fbc:	ldr	r0, [sp, #20]
    3fc0:	ldr	r0, [r0, #40]	; 0x28
    3fc4:	ldr	r0, [r0]
    3fc8:	cmp	r0, #1
    3fcc:	bne	4010 <coda_bin_cursor_read_uint16_array+0xd8>
    3fd0:	movw	r0, #0
    3fd4:	movt	r0, #0
    3fd8:	ldr	r1, [fp, #-8]
    3fdc:	ldr	r2, [fp, #-12]
    3fe0:	ldr	r3, [fp, #-16]
    3fe4:	str	r0, [sp, #12]
    3fe8:	mov	r0, r1
    3fec:	ldr	r1, [sp, #12]
    3ff0:	movw	ip, #2
    3ff4:	str	r3, [sp, #8]
    3ff8:	mov	r3, ip
    3ffc:	ldr	ip, [sp, #8]
    4000:	str	ip, [sp]
    4004:	bl	318c <read_array>
    4008:	str	r0, [fp, #-4]
    400c:	b	40c4 <coda_bin_cursor_read_uint16_array+0x18c>
    4010:	ldr	r0, [sp, #20]
    4014:	ldr	r0, [r0, #40]	; 0x28
    4018:	ldr	r0, [r0]
    401c:	cmp	r0, #0
    4020:	bne	4028 <coda_bin_cursor_read_uint16_array+0xf0>
    4024:	b	4048 <coda_bin_cursor_read_uint16_array+0x110>
    4028:	movw	r0, #0
    402c:	movt	r0, #0
    4030:	movw	r1, #0
    4034:	movt	r1, #0
    4038:	movw	r2, #984	; 0x3d8
    403c:	movw	r3, #0
    4040:	movt	r3, #0
    4044:	bl	0 <__assert_fail>
    4048:	movw	r0, #0
    404c:	movt	r0, #0
    4050:	ldr	r1, [fp, #-8]
    4054:	ldr	r2, [fp, #-12]
    4058:	str	r0, [sp, #4]
    405c:	mov	r0, r1
    4060:	ldr	r1, [sp, #4]
    4064:	movw	r3, #2
    4068:	movw	ip, #0
    406c:	str	ip, [sp]
    4070:	bl	318c <read_array>
    4074:	cmp	r0, #0
    4078:	beq	4088 <coda_bin_cursor_read_uint16_array+0x150>
    407c:	mvn	r0, #0
    4080:	str	r0, [fp, #-4]
    4084:	b	40c4 <coda_bin_cursor_read_uint16_array+0x18c>
    4088:	ldr	r0, [fp, #-16]
    408c:	cmp	r0, #0
    4090:	beq	40bc <coda_bin_cursor_read_uint16_array+0x184>
    4094:	ldr	r0, [fp, #-8]
    4098:	ldr	r1, [fp, #-12]
    409c:	movw	r2, #2
    40a0:	bl	3570 <transpose_array>
    40a4:	cmp	r0, #0
    40a8:	beq	40b8 <coda_bin_cursor_read_uint16_array+0x180>
    40ac:	mvn	r0, #0
    40b0:	str	r0, [fp, #-4]
    40b4:	b	40c4 <coda_bin_cursor_read_uint16_array+0x18c>
    40b8:	b	40bc <coda_bin_cursor_read_uint16_array+0x184>
    40bc:	movw	r0, #0
    40c0:	str	r0, [fp, #-4]
    40c4:	ldr	r0, [fp, #-4]
    40c8:	mov	sp, fp
    40cc:	pop	{fp, pc}

000040d0 <coda_bin_cursor_read_int32_array>:
    40d0:	push	{fp, lr}
    40d4:	mov	fp, sp
    40d8:	sub	sp, sp, #40	; 0x28
    40dc:	str	r0, [fp, #-8]
    40e0:	str	r1, [fp, #-12]
    40e4:	str	r2, [fp, #-16]
    40e8:	ldr	r0, [fp, #-8]
    40ec:	add	r1, r0, #8
    40f0:	ldr	r0, [r0, #4]
    40f4:	sub	r0, r0, #1
    40f8:	add	r0, r1, r0, lsl #4
    40fc:	ldr	r0, [r0]
    4100:	ldr	r0, [r0]
    4104:	cmp	r0, #100	; 0x64
    4108:	bcs	412c <coda_bin_cursor_read_int32_array+0x5c>
    410c:	ldr	r0, [fp, #-8]
    4110:	add	r1, r0, #8
    4114:	ldr	r0, [r0, #4]
    4118:	sub	r0, r0, #1
    411c:	add	r0, r1, r0, lsl #4
    4120:	ldr	r0, [r0]
    4124:	str	r0, [sp, #16]
    4128:	b	414c <coda_bin_cursor_read_int32_array+0x7c>
    412c:	ldr	r0, [fp, #-8]
    4130:	add	r1, r0, #8
    4134:	ldr	r0, [r0, #4]
    4138:	sub	r0, r0, #1
    413c:	add	r0, r1, r0, lsl #4
    4140:	ldr	r0, [r0]
    4144:	ldr	r0, [r0, #4]
    4148:	str	r0, [sp, #16]
    414c:	ldr	r0, [sp, #16]
    4150:	str	r0, [sp, #20]
    4154:	ldr	r0, [sp, #20]
    4158:	ldr	r0, [r0, #40]	; 0x28
    415c:	ldr	r0, [r0]
    4160:	cmp	r0, #1
    4164:	bne	41a8 <coda_bin_cursor_read_int32_array+0xd8>
    4168:	movw	r0, #0
    416c:	movt	r0, #0
    4170:	ldr	r1, [fp, #-8]
    4174:	ldr	r2, [fp, #-12]
    4178:	ldr	r3, [fp, #-16]
    417c:	str	r0, [sp, #12]
    4180:	mov	r0, r1
    4184:	ldr	r1, [sp, #12]
    4188:	movw	ip, #4
    418c:	str	r3, [sp, #8]
    4190:	mov	r3, ip
    4194:	ldr	ip, [sp, #8]
    4198:	str	ip, [sp]
    419c:	bl	318c <read_array>
    41a0:	str	r0, [fp, #-4]
    41a4:	b	425c <coda_bin_cursor_read_int32_array+0x18c>
    41a8:	ldr	r0, [sp, #20]
    41ac:	ldr	r0, [r0, #40]	; 0x28
    41b0:	ldr	r0, [r0]
    41b4:	cmp	r0, #0
    41b8:	bne	41c0 <coda_bin_cursor_read_int32_array+0xf0>
    41bc:	b	41e0 <coda_bin_cursor_read_int32_array+0x110>
    41c0:	movw	r0, #0
    41c4:	movt	r0, #0
    41c8:	movw	r1, #0
    41cc:	movt	r1, #0
    41d0:	movw	r2, #1010	; 0x3f2
    41d4:	movw	r3, #0
    41d8:	movt	r3, #0
    41dc:	bl	0 <__assert_fail>
    41e0:	movw	r0, #0
    41e4:	movt	r0, #0
    41e8:	ldr	r1, [fp, #-8]
    41ec:	ldr	r2, [fp, #-12]
    41f0:	str	r0, [sp, #4]
    41f4:	mov	r0, r1
    41f8:	ldr	r1, [sp, #4]
    41fc:	movw	r3, #4
    4200:	movw	ip, #0
    4204:	str	ip, [sp]
    4208:	bl	318c <read_array>
    420c:	cmp	r0, #0
    4210:	beq	4220 <coda_bin_cursor_read_int32_array+0x150>
    4214:	mvn	r0, #0
    4218:	str	r0, [fp, #-4]
    421c:	b	425c <coda_bin_cursor_read_int32_array+0x18c>
    4220:	ldr	r0, [fp, #-16]
    4224:	cmp	r0, #0
    4228:	beq	4254 <coda_bin_cursor_read_int32_array+0x184>
    422c:	ldr	r0, [fp, #-8]
    4230:	ldr	r1, [fp, #-12]
    4234:	movw	r2, #4
    4238:	bl	3570 <transpose_array>
    423c:	cmp	r0, #0
    4240:	beq	4250 <coda_bin_cursor_read_int32_array+0x180>
    4244:	mvn	r0, #0
    4248:	str	r0, [fp, #-4]
    424c:	b	425c <coda_bin_cursor_read_int32_array+0x18c>
    4250:	b	4254 <coda_bin_cursor_read_int32_array+0x184>
    4254:	movw	r0, #0
    4258:	str	r0, [fp, #-4]
    425c:	ldr	r0, [fp, #-4]
    4260:	mov	sp, fp
    4264:	pop	{fp, pc}

00004268 <coda_bin_cursor_read_uint32_array>:
    4268:	push	{fp, lr}
    426c:	mov	fp, sp
    4270:	sub	sp, sp, #40	; 0x28
    4274:	str	r0, [fp, #-8]
    4278:	str	r1, [fp, #-12]
    427c:	str	r2, [fp, #-16]
    4280:	ldr	r0, [fp, #-8]
    4284:	add	r1, r0, #8
    4288:	ldr	r0, [r0, #4]
    428c:	sub	r0, r0, #1
    4290:	add	r0, r1, r0, lsl #4
    4294:	ldr	r0, [r0]
    4298:	ldr	r0, [r0]
    429c:	cmp	r0, #100	; 0x64
    42a0:	bcs	42c4 <coda_bin_cursor_read_uint32_array+0x5c>
    42a4:	ldr	r0, [fp, #-8]
    42a8:	add	r1, r0, #8
    42ac:	ldr	r0, [r0, #4]
    42b0:	sub	r0, r0, #1
    42b4:	add	r0, r1, r0, lsl #4
    42b8:	ldr	r0, [r0]
    42bc:	str	r0, [sp, #16]
    42c0:	b	42e4 <coda_bin_cursor_read_uint32_array+0x7c>
    42c4:	ldr	r0, [fp, #-8]
    42c8:	add	r1, r0, #8
    42cc:	ldr	r0, [r0, #4]
    42d0:	sub	r0, r0, #1
    42d4:	add	r0, r1, r0, lsl #4
    42d8:	ldr	r0, [r0]
    42dc:	ldr	r0, [r0, #4]
    42e0:	str	r0, [sp, #16]
    42e4:	ldr	r0, [sp, #16]
    42e8:	str	r0, [sp, #20]
    42ec:	ldr	r0, [sp, #20]
    42f0:	ldr	r0, [r0, #40]	; 0x28
    42f4:	ldr	r0, [r0]
    42f8:	cmp	r0, #1
    42fc:	bne	4340 <coda_bin_cursor_read_uint32_array+0xd8>
    4300:	movw	r0, #0
    4304:	movt	r0, #0
    4308:	ldr	r1, [fp, #-8]
    430c:	ldr	r2, [fp, #-12]
    4310:	ldr	r3, [fp, #-16]
    4314:	str	r0, [sp, #12]
    4318:	mov	r0, r1
    431c:	ldr	r1, [sp, #12]
    4320:	movw	ip, #4
    4324:	str	r3, [sp, #8]
    4328:	mov	r3, ip
    432c:	ldr	ip, [sp, #8]
    4330:	str	ip, [sp]
    4334:	bl	318c <read_array>
    4338:	str	r0, [fp, #-4]
    433c:	b	43f4 <coda_bin_cursor_read_uint32_array+0x18c>
    4340:	ldr	r0, [sp, #20]
    4344:	ldr	r0, [r0, #40]	; 0x28
    4348:	ldr	r0, [r0]
    434c:	cmp	r0, #0
    4350:	bne	4358 <coda_bin_cursor_read_uint32_array+0xf0>
    4354:	b	4378 <coda_bin_cursor_read_uint32_array+0x110>
    4358:	movw	r0, #0
    435c:	movt	r0, #0
    4360:	movw	r1, #0
    4364:	movt	r1, #0
    4368:	movw	r2, #1036	; 0x40c
    436c:	movw	r3, #0
    4370:	movt	r3, #0
    4374:	bl	0 <__assert_fail>
    4378:	movw	r0, #0
    437c:	movt	r0, #0
    4380:	ldr	r1, [fp, #-8]
    4384:	ldr	r2, [fp, #-12]
    4388:	str	r0, [sp, #4]
    438c:	mov	r0, r1
    4390:	ldr	r1, [sp, #4]
    4394:	movw	r3, #4
    4398:	movw	ip, #0
    439c:	str	ip, [sp]
    43a0:	bl	318c <read_array>
    43a4:	cmp	r0, #0
    43a8:	beq	43b8 <coda_bin_cursor_read_uint32_array+0x150>
    43ac:	mvn	r0, #0
    43b0:	str	r0, [fp, #-4]
    43b4:	b	43f4 <coda_bin_cursor_read_uint32_array+0x18c>
    43b8:	ldr	r0, [fp, #-16]
    43bc:	cmp	r0, #0
    43c0:	beq	43ec <coda_bin_cursor_read_uint32_array+0x184>
    43c4:	ldr	r0, [fp, #-8]
    43c8:	ldr	r1, [fp, #-12]
    43cc:	movw	r2, #4
    43d0:	bl	3570 <transpose_array>
    43d4:	cmp	r0, #0
    43d8:	beq	43e8 <coda_bin_cursor_read_uint32_array+0x180>
    43dc:	mvn	r0, #0
    43e0:	str	r0, [fp, #-4]
    43e4:	b	43f4 <coda_bin_cursor_read_uint32_array+0x18c>
    43e8:	b	43ec <coda_bin_cursor_read_uint32_array+0x184>
    43ec:	movw	r0, #0
    43f0:	str	r0, [fp, #-4]
    43f4:	ldr	r0, [fp, #-4]
    43f8:	mov	sp, fp
    43fc:	pop	{fp, pc}

00004400 <coda_bin_cursor_read_int64_array>:
    4400:	push	{fp, lr}
    4404:	mov	fp, sp
    4408:	sub	sp, sp, #40	; 0x28
    440c:	str	r0, [fp, #-8]
    4410:	str	r1, [fp, #-12]
    4414:	str	r2, [fp, #-16]
    4418:	ldr	r0, [fp, #-8]
    441c:	add	r1, r0, #8
    4420:	ldr	r0, [r0, #4]
    4424:	sub	r0, r0, #1
    4428:	add	r0, r1, r0, lsl #4
    442c:	ldr	r0, [r0]
    4430:	ldr	r0, [r0]
    4434:	cmp	r0, #100	; 0x64
    4438:	bcs	445c <coda_bin_cursor_read_int64_array+0x5c>
    443c:	ldr	r0, [fp, #-8]
    4440:	add	r1, r0, #8
    4444:	ldr	r0, [r0, #4]
    4448:	sub	r0, r0, #1
    444c:	add	r0, r1, r0, lsl #4
    4450:	ldr	r0, [r0]
    4454:	str	r0, [sp, #16]
    4458:	b	447c <coda_bin_cursor_read_int64_array+0x7c>
    445c:	ldr	r0, [fp, #-8]
    4460:	add	r1, r0, #8
    4464:	ldr	r0, [r0, #4]
    4468:	sub	r0, r0, #1
    446c:	add	r0, r1, r0, lsl #4
    4470:	ldr	r0, [r0]
    4474:	ldr	r0, [r0, #4]
    4478:	str	r0, [sp, #16]
    447c:	ldr	r0, [sp, #16]
    4480:	str	r0, [sp, #20]
    4484:	ldr	r0, [sp, #20]
    4488:	ldr	r0, [r0, #40]	; 0x28
    448c:	ldr	r0, [r0]
    4490:	cmp	r0, #1
    4494:	bne	44d8 <coda_bin_cursor_read_int64_array+0xd8>
    4498:	movw	r0, #0
    449c:	movt	r0, #0
    44a0:	ldr	r1, [fp, #-8]
    44a4:	ldr	r2, [fp, #-12]
    44a8:	ldr	r3, [fp, #-16]
    44ac:	str	r0, [sp, #12]
    44b0:	mov	r0, r1
    44b4:	ldr	r1, [sp, #12]
    44b8:	movw	ip, #8
    44bc:	str	r3, [sp, #8]
    44c0:	mov	r3, ip
    44c4:	ldr	ip, [sp, #8]
    44c8:	str	ip, [sp]
    44cc:	bl	318c <read_array>
    44d0:	str	r0, [fp, #-4]
    44d4:	b	458c <coda_bin_cursor_read_int64_array+0x18c>
    44d8:	ldr	r0, [sp, #20]
    44dc:	ldr	r0, [r0, #40]	; 0x28
    44e0:	ldr	r0, [r0]
    44e4:	cmp	r0, #0
    44e8:	bne	44f0 <coda_bin_cursor_read_int64_array+0xf0>
    44ec:	b	4510 <coda_bin_cursor_read_int64_array+0x110>
    44f0:	movw	r0, #0
    44f4:	movt	r0, #0
    44f8:	movw	r1, #0
    44fc:	movt	r1, #0
    4500:	movw	r2, #1062	; 0x426
    4504:	movw	r3, #0
    4508:	movt	r3, #0
    450c:	bl	0 <__assert_fail>
    4510:	movw	r0, #0
    4514:	movt	r0, #0
    4518:	ldr	r1, [fp, #-8]
    451c:	ldr	r2, [fp, #-12]
    4520:	str	r0, [sp, #4]
    4524:	mov	r0, r1
    4528:	ldr	r1, [sp, #4]
    452c:	movw	r3, #8
    4530:	movw	ip, #0
    4534:	str	ip, [sp]
    4538:	bl	318c <read_array>
    453c:	cmp	r0, #0
    4540:	beq	4550 <coda_bin_cursor_read_int64_array+0x150>
    4544:	mvn	r0, #0
    4548:	str	r0, [fp, #-4]
    454c:	b	458c <coda_bin_cursor_read_int64_array+0x18c>
    4550:	ldr	r0, [fp, #-16]
    4554:	cmp	r0, #0
    4558:	beq	4584 <coda_bin_cursor_read_int64_array+0x184>
    455c:	ldr	r0, [fp, #-8]
    4560:	ldr	r1, [fp, #-12]
    4564:	movw	r2, #8
    4568:	bl	3570 <transpose_array>
    456c:	cmp	r0, #0
    4570:	beq	4580 <coda_bin_cursor_read_int64_array+0x180>
    4574:	mvn	r0, #0
    4578:	str	r0, [fp, #-4]
    457c:	b	458c <coda_bin_cursor_read_int64_array+0x18c>
    4580:	b	4584 <coda_bin_cursor_read_int64_array+0x184>
    4584:	movw	r0, #0
    4588:	str	r0, [fp, #-4]
    458c:	ldr	r0, [fp, #-4]
    4590:	mov	sp, fp
    4594:	pop	{fp, pc}

00004598 <coda_bin_cursor_read_uint64_array>:
    4598:	push	{fp, lr}
    459c:	mov	fp, sp
    45a0:	sub	sp, sp, #40	; 0x28
    45a4:	str	r0, [fp, #-8]
    45a8:	str	r1, [fp, #-12]
    45ac:	str	r2, [fp, #-16]
    45b0:	ldr	r0, [fp, #-8]
    45b4:	add	r1, r0, #8
    45b8:	ldr	r0, [r0, #4]
    45bc:	sub	r0, r0, #1
    45c0:	add	r0, r1, r0, lsl #4
    45c4:	ldr	r0, [r0]
    45c8:	ldr	r0, [r0]
    45cc:	cmp	r0, #100	; 0x64
    45d0:	bcs	45f4 <coda_bin_cursor_read_uint64_array+0x5c>
    45d4:	ldr	r0, [fp, #-8]
    45d8:	add	r1, r0, #8
    45dc:	ldr	r0, [r0, #4]
    45e0:	sub	r0, r0, #1
    45e4:	add	r0, r1, r0, lsl #4
    45e8:	ldr	r0, [r0]
    45ec:	str	r0, [sp, #16]
    45f0:	b	4614 <coda_bin_cursor_read_uint64_array+0x7c>
    45f4:	ldr	r0, [fp, #-8]
    45f8:	add	r1, r0, #8
    45fc:	ldr	r0, [r0, #4]
    4600:	sub	r0, r0, #1
    4604:	add	r0, r1, r0, lsl #4
    4608:	ldr	r0, [r0]
    460c:	ldr	r0, [r0, #4]
    4610:	str	r0, [sp, #16]
    4614:	ldr	r0, [sp, #16]
    4618:	str	r0, [sp, #20]
    461c:	ldr	r0, [sp, #20]
    4620:	ldr	r0, [r0, #40]	; 0x28
    4624:	ldr	r0, [r0]
    4628:	cmp	r0, #1
    462c:	bne	4670 <coda_bin_cursor_read_uint64_array+0xd8>
    4630:	movw	r0, #0
    4634:	movt	r0, #0
    4638:	ldr	r1, [fp, #-8]
    463c:	ldr	r2, [fp, #-12]
    4640:	ldr	r3, [fp, #-16]
    4644:	str	r0, [sp, #12]
    4648:	mov	r0, r1
    464c:	ldr	r1, [sp, #12]
    4650:	movw	ip, #8
    4654:	str	r3, [sp, #8]
    4658:	mov	r3, ip
    465c:	ldr	ip, [sp, #8]
    4660:	str	ip, [sp]
    4664:	bl	318c <read_array>
    4668:	str	r0, [fp, #-4]
    466c:	b	4724 <coda_bin_cursor_read_uint64_array+0x18c>
    4670:	ldr	r0, [sp, #20]
    4674:	ldr	r0, [r0, #40]	; 0x28
    4678:	ldr	r0, [r0]
    467c:	cmp	r0, #0
    4680:	bne	4688 <coda_bin_cursor_read_uint64_array+0xf0>
    4684:	b	46a8 <coda_bin_cursor_read_uint64_array+0x110>
    4688:	movw	r0, #0
    468c:	movt	r0, #0
    4690:	movw	r1, #0
    4694:	movt	r1, #0
    4698:	movw	r2, #1088	; 0x440
    469c:	movw	r3, #0
    46a0:	movt	r3, #0
    46a4:	bl	0 <__assert_fail>
    46a8:	movw	r0, #0
    46ac:	movt	r0, #0
    46b0:	ldr	r1, [fp, #-8]
    46b4:	ldr	r2, [fp, #-12]
    46b8:	str	r0, [sp, #4]
    46bc:	mov	r0, r1
    46c0:	ldr	r1, [sp, #4]
    46c4:	movw	r3, #8
    46c8:	movw	ip, #0
    46cc:	str	ip, [sp]
    46d0:	bl	318c <read_array>
    46d4:	cmp	r0, #0
    46d8:	beq	46e8 <coda_bin_cursor_read_uint64_array+0x150>
    46dc:	mvn	r0, #0
    46e0:	str	r0, [fp, #-4]
    46e4:	b	4724 <coda_bin_cursor_read_uint64_array+0x18c>
    46e8:	ldr	r0, [fp, #-16]
    46ec:	cmp	r0, #0
    46f0:	beq	471c <coda_bin_cursor_read_uint64_array+0x184>
    46f4:	ldr	r0, [fp, #-8]
    46f8:	ldr	r1, [fp, #-12]
    46fc:	movw	r2, #8
    4700:	bl	3570 <transpose_array>
    4704:	cmp	r0, #0
    4708:	beq	4718 <coda_bin_cursor_read_uint64_array+0x180>
    470c:	mvn	r0, #0
    4710:	str	r0, [fp, #-4]
    4714:	b	4724 <coda_bin_cursor_read_uint64_array+0x18c>
    4718:	b	471c <coda_bin_cursor_read_uint64_array+0x184>
    471c:	movw	r0, #0
    4720:	str	r0, [fp, #-4]
    4724:	ldr	r0, [fp, #-4]
    4728:	mov	sp, fp
    472c:	pop	{fp, pc}

00004730 <coda_bin_cursor_read_float_array>:
    4730:	push	{fp, lr}
    4734:	mov	fp, sp
    4738:	sub	sp, sp, #40	; 0x28
    473c:	str	r0, [fp, #-8]
    4740:	str	r1, [fp, #-12]
    4744:	str	r2, [fp, #-16]
    4748:	ldr	r0, [fp, #-8]
    474c:	add	r1, r0, #8
    4750:	ldr	r0, [r0, #4]
    4754:	sub	r0, r0, #1
    4758:	add	r0, r1, r0, lsl #4
    475c:	ldr	r0, [r0]
    4760:	ldr	r0, [r0]
    4764:	cmp	r0, #100	; 0x64
    4768:	bcs	478c <coda_bin_cursor_read_float_array+0x5c>
    476c:	ldr	r0, [fp, #-8]
    4770:	add	r1, r0, #8
    4774:	ldr	r0, [r0, #4]
    4778:	sub	r0, r0, #1
    477c:	add	r0, r1, r0, lsl #4
    4780:	ldr	r0, [r0]
    4784:	str	r0, [sp, #16]
    4788:	b	47ac <coda_bin_cursor_read_float_array+0x7c>
    478c:	ldr	r0, [fp, #-8]
    4790:	add	r1, r0, #8
    4794:	ldr	r0, [r0, #4]
    4798:	sub	r0, r0, #1
    479c:	add	r0, r1, r0, lsl #4
    47a0:	ldr	r0, [r0]
    47a4:	ldr	r0, [r0, #4]
    47a8:	str	r0, [sp, #16]
    47ac:	ldr	r0, [sp, #16]
    47b0:	str	r0, [sp, #20]
    47b4:	ldr	r0, [sp, #20]
    47b8:	ldr	r0, [r0, #40]	; 0x28
    47bc:	ldr	r0, [r0]
    47c0:	cmp	r0, #1
    47c4:	bne	4808 <coda_bin_cursor_read_float_array+0xd8>
    47c8:	movw	r0, #0
    47cc:	movt	r0, #0
    47d0:	ldr	r1, [fp, #-8]
    47d4:	ldr	r2, [fp, #-12]
    47d8:	ldr	r3, [fp, #-16]
    47dc:	str	r0, [sp, #12]
    47e0:	mov	r0, r1
    47e4:	ldr	r1, [sp, #12]
    47e8:	movw	ip, #4
    47ec:	str	r3, [sp, #8]
    47f0:	mov	r3, ip
    47f4:	ldr	ip, [sp, #8]
    47f8:	str	ip, [sp]
    47fc:	bl	318c <read_array>
    4800:	str	r0, [fp, #-4]
    4804:	b	48bc <coda_bin_cursor_read_float_array+0x18c>
    4808:	ldr	r0, [sp, #20]
    480c:	ldr	r0, [r0, #40]	; 0x28
    4810:	ldr	r0, [r0]
    4814:	cmp	r0, #0
    4818:	bne	4820 <coda_bin_cursor_read_float_array+0xf0>
    481c:	b	4840 <coda_bin_cursor_read_float_array+0x110>
    4820:	movw	r0, #0
    4824:	movt	r0, #0
    4828:	movw	r1, #0
    482c:	movt	r1, #0
    4830:	movw	r2, #1114	; 0x45a
    4834:	movw	r3, #0
    4838:	movt	r3, #0
    483c:	bl	0 <__assert_fail>
    4840:	movw	r0, #0
    4844:	movt	r0, #0
    4848:	ldr	r1, [fp, #-8]
    484c:	ldr	r2, [fp, #-12]
    4850:	str	r0, [sp, #4]
    4854:	mov	r0, r1
    4858:	ldr	r1, [sp, #4]
    485c:	movw	r3, #4
    4860:	movw	ip, #0
    4864:	str	ip, [sp]
    4868:	bl	318c <read_array>
    486c:	cmp	r0, #0
    4870:	beq	4880 <coda_bin_cursor_read_float_array+0x150>
    4874:	mvn	r0, #0
    4878:	str	r0, [fp, #-4]
    487c:	b	48bc <coda_bin_cursor_read_float_array+0x18c>
    4880:	ldr	r0, [fp, #-16]
    4884:	cmp	r0, #0
    4888:	beq	48b4 <coda_bin_cursor_read_float_array+0x184>
    488c:	ldr	r0, [fp, #-8]
    4890:	ldr	r1, [fp, #-12]
    4894:	movw	r2, #4
    4898:	bl	3570 <transpose_array>
    489c:	cmp	r0, #0
    48a0:	beq	48b0 <coda_bin_cursor_read_float_array+0x180>
    48a4:	mvn	r0, #0
    48a8:	str	r0, [fp, #-4]
    48ac:	b	48bc <coda_bin_cursor_read_float_array+0x18c>
    48b0:	b	48b4 <coda_bin_cursor_read_float_array+0x184>
    48b4:	movw	r0, #0
    48b8:	str	r0, [fp, #-4]
    48bc:	ldr	r0, [fp, #-4]
    48c0:	mov	sp, fp
    48c4:	pop	{fp, pc}

000048c8 <coda_bin_cursor_read_double_array>:
    48c8:	push	{fp, lr}
    48cc:	mov	fp, sp
    48d0:	sub	sp, sp, #40	; 0x28
    48d4:	str	r0, [fp, #-8]
    48d8:	str	r1, [fp, #-12]
    48dc:	str	r2, [fp, #-16]
    48e0:	ldr	r0, [fp, #-8]
    48e4:	add	r1, r0, #8
    48e8:	ldr	r0, [r0, #4]
    48ec:	sub	r0, r0, #1
    48f0:	add	r0, r1, r0, lsl #4
    48f4:	ldr	r0, [r0]
    48f8:	ldr	r0, [r0]
    48fc:	cmp	r0, #100	; 0x64
    4900:	bcs	4924 <coda_bin_cursor_read_double_array+0x5c>
    4904:	ldr	r0, [fp, #-8]
    4908:	add	r1, r0, #8
    490c:	ldr	r0, [r0, #4]
    4910:	sub	r0, r0, #1
    4914:	add	r0, r1, r0, lsl #4
    4918:	ldr	r0, [r0]
    491c:	str	r0, [sp, #16]
    4920:	b	4944 <coda_bin_cursor_read_double_array+0x7c>
    4924:	ldr	r0, [fp, #-8]
    4928:	add	r1, r0, #8
    492c:	ldr	r0, [r0, #4]
    4930:	sub	r0, r0, #1
    4934:	add	r0, r1, r0, lsl #4
    4938:	ldr	r0, [r0]
    493c:	ldr	r0, [r0, #4]
    4940:	str	r0, [sp, #16]
    4944:	ldr	r0, [sp, #16]
    4948:	str	r0, [sp, #20]
    494c:	ldr	r0, [sp, #20]
    4950:	ldr	r0, [r0, #40]	; 0x28
    4954:	ldr	r0, [r0]
    4958:	cmp	r0, #1
    495c:	bne	49a0 <coda_bin_cursor_read_double_array+0xd8>
    4960:	movw	r0, #0
    4964:	movt	r0, #0
    4968:	ldr	r1, [fp, #-8]
    496c:	ldr	r2, [fp, #-12]
    4970:	ldr	r3, [fp, #-16]
    4974:	str	r0, [sp, #12]
    4978:	mov	r0, r1
    497c:	ldr	r1, [sp, #12]
    4980:	movw	ip, #8
    4984:	str	r3, [sp, #8]
    4988:	mov	r3, ip
    498c:	ldr	ip, [sp, #8]
    4990:	str	ip, [sp]
    4994:	bl	318c <read_array>
    4998:	str	r0, [fp, #-4]
    499c:	b	4a54 <coda_bin_cursor_read_double_array+0x18c>
    49a0:	ldr	r0, [sp, #20]
    49a4:	ldr	r0, [r0, #40]	; 0x28
    49a8:	ldr	r0, [r0]
    49ac:	cmp	r0, #0
    49b0:	bne	49b8 <coda_bin_cursor_read_double_array+0xf0>
    49b4:	b	49d8 <coda_bin_cursor_read_double_array+0x110>
    49b8:	movw	r0, #0
    49bc:	movt	r0, #0
    49c0:	movw	r1, #0
    49c4:	movt	r1, #0
    49c8:	movw	r2, #1140	; 0x474
    49cc:	movw	r3, #0
    49d0:	movt	r3, #0
    49d4:	bl	0 <__assert_fail>
    49d8:	movw	r0, #0
    49dc:	movt	r0, #0
    49e0:	ldr	r1, [fp, #-8]
    49e4:	ldr	r2, [fp, #-12]
    49e8:	str	r0, [sp, #4]
    49ec:	mov	r0, r1
    49f0:	ldr	r1, [sp, #4]
    49f4:	movw	r3, #8
    49f8:	movw	ip, #0
    49fc:	str	ip, [sp]
    4a00:	bl	318c <read_array>
    4a04:	cmp	r0, #0
    4a08:	beq	4a18 <coda_bin_cursor_read_double_array+0x150>
    4a0c:	mvn	r0, #0
    4a10:	str	r0, [fp, #-4]
    4a14:	b	4a54 <coda_bin_cursor_read_double_array+0x18c>
    4a18:	ldr	r0, [fp, #-16]
    4a1c:	cmp	r0, #0
    4a20:	beq	4a4c <coda_bin_cursor_read_double_array+0x184>
    4a24:	ldr	r0, [fp, #-8]
    4a28:	ldr	r1, [fp, #-12]
    4a2c:	movw	r2, #8
    4a30:	bl	3570 <transpose_array>
    4a34:	cmp	r0, #0
    4a38:	beq	4a48 <coda_bin_cursor_read_double_array+0x180>
    4a3c:	mvn	r0, #0
    4a40:	str	r0, [fp, #-4]
    4a44:	b	4a54 <coda_bin_cursor_read_double_array+0x18c>
    4a48:	b	4a4c <coda_bin_cursor_read_double_array+0x184>
    4a4c:	movw	r0, #0
    4a50:	str	r0, [fp, #-4]
    4a54:	ldr	r0, [fp, #-4]
    4a58:	mov	sp, fp
    4a5c:	pop	{fp, pc}

00004a60 <coda_bin_cursor_read_char_array>:
    4a60:	push	{fp, lr}
    4a64:	mov	fp, sp
    4a68:	sub	sp, sp, #32
    4a6c:	str	r0, [fp, #-8]
    4a70:	str	r1, [fp, #-12]
    4a74:	str	r2, [sp, #16]
    4a78:	ldr	r0, [fp, #-8]
    4a7c:	add	r1, r0, #8
    4a80:	ldr	r0, [r0, #4]
    4a84:	sub	r0, r0, #1
    4a88:	add	r0, r1, r0, lsl #4
    4a8c:	ldr	r0, [r0]
    4a90:	ldr	r0, [r0]
    4a94:	cmp	r0, #100	; 0x64
    4a98:	bcs	4abc <coda_bin_cursor_read_char_array+0x5c>
    4a9c:	ldr	r0, [fp, #-8]
    4aa0:	add	r1, r0, #8
    4aa4:	ldr	r0, [r0, #4]
    4aa8:	sub	r0, r0, #1
    4aac:	add	r0, r1, r0, lsl #4
    4ab0:	ldr	r0, [r0]
    4ab4:	str	r0, [sp, #8]
    4ab8:	b	4adc <coda_bin_cursor_read_char_array+0x7c>
    4abc:	ldr	r0, [fp, #-8]
    4ac0:	add	r1, r0, #8
    4ac4:	ldr	r0, [r0, #4]
    4ac8:	sub	r0, r0, #1
    4acc:	add	r0, r1, r0, lsl #4
    4ad0:	ldr	r0, [r0]
    4ad4:	ldr	r0, [r0, #4]
    4ad8:	str	r0, [sp, #8]
    4adc:	ldr	r0, [sp, #8]
    4ae0:	str	r0, [sp, #12]
    4ae4:	ldr	r0, [sp, #12]
    4ae8:	ldr	r0, [r0, #40]	; 0x28
    4aec:	ldr	r0, [r0]
    4af0:	cmp	r0, #1
    4af4:	bne	4b2c <coda_bin_cursor_read_char_array+0xcc>
    4af8:	ldr	r0, [fp, #-8]
    4afc:	ldr	r2, [fp, #-12]
    4b00:	ldr	r1, [sp, #16]
    4b04:	movw	r3, #0
    4b08:	movt	r3, #0
    4b0c:	str	r1, [sp, #4]
    4b10:	mov	r1, r3
    4b14:	movw	r3, #1
    4b18:	ldr	ip, [sp, #4]
    4b1c:	str	ip, [sp]
    4b20:	bl	318c <read_array>
    4b24:	str	r0, [fp, #-4]
    4b28:	b	4bd4 <coda_bin_cursor_read_char_array+0x174>
    4b2c:	ldr	r0, [sp, #12]
    4b30:	ldr	r0, [r0, #40]	; 0x28
    4b34:	ldr	r0, [r0]
    4b38:	cmp	r0, #0
    4b3c:	bne	4b44 <coda_bin_cursor_read_char_array+0xe4>
    4b40:	b	4b64 <coda_bin_cursor_read_char_array+0x104>
    4b44:	movw	r0, #0
    4b48:	movt	r0, #0
    4b4c:	movw	r1, #0
    4b50:	movt	r1, #0
    4b54:	movw	r2, #1166	; 0x48e
    4b58:	movw	r3, #0
    4b5c:	movt	r3, #0
    4b60:	bl	0 <__assert_fail>
    4b64:	ldr	r0, [fp, #-8]
    4b68:	ldr	r2, [fp, #-12]
    4b6c:	movw	r1, #0
    4b70:	movt	r1, #0
    4b74:	movw	r3, #1
    4b78:	movw	ip, #0
    4b7c:	str	ip, [sp]
    4b80:	bl	318c <read_array>
    4b84:	cmp	r0, #0
    4b88:	beq	4b98 <coda_bin_cursor_read_char_array+0x138>
    4b8c:	mvn	r0, #0
    4b90:	str	r0, [fp, #-4]
    4b94:	b	4bd4 <coda_bin_cursor_read_char_array+0x174>
    4b98:	ldr	r0, [sp, #16]
    4b9c:	cmp	r0, #0
    4ba0:	beq	4bcc <coda_bin_cursor_read_char_array+0x16c>
    4ba4:	ldr	r0, [fp, #-8]
    4ba8:	ldr	r1, [fp, #-12]
    4bac:	movw	r2, #1
    4bb0:	bl	3570 <transpose_array>
    4bb4:	cmp	r0, #0
    4bb8:	beq	4bc8 <coda_bin_cursor_read_char_array+0x168>
    4bbc:	mvn	r0, #0
    4bc0:	str	r0, [fp, #-4]
    4bc4:	b	4bd4 <coda_bin_cursor_read_char_array+0x174>
    4bc8:	b	4bcc <coda_bin_cursor_read_char_array+0x16c>
    4bcc:	movw	r0, #0
    4bd0:	str	r0, [fp, #-4]
    4bd4:	ldr	r0, [fp, #-4]
    4bd8:	mov	sp, fp
    4bdc:	pop	{fp, pc}

00004be0 <coda_bin_cursor_read_int8_partial_array>:
    4be0:	push	{fp, lr}
    4be4:	mov	fp, sp
    4be8:	sub	sp, sp, #48	; 0x30
    4bec:	str	r0, [fp, #-8]
    4bf0:	str	r1, [fp, #-12]
    4bf4:	str	r2, [fp, #-16]
    4bf8:	str	r3, [fp, #-20]	; 0xffffffec
    4bfc:	ldr	r0, [fp, #-8]
    4c00:	add	r1, r0, #8
    4c04:	ldr	r0, [r0, #4]
    4c08:	sub	r0, r0, #1
    4c0c:	add	r0, r1, r0, lsl #4
    4c10:	ldr	r0, [r0]
    4c14:	ldr	r0, [r0]
    4c18:	cmp	r0, #100	; 0x64
    4c1c:	bcs	4c40 <coda_bin_cursor_read_int8_partial_array+0x60>
    4c20:	ldr	r0, [fp, #-8]
    4c24:	add	r1, r0, #8
    4c28:	ldr	r0, [r0, #4]
    4c2c:	sub	r0, r0, #1
    4c30:	add	r0, r1, r0, lsl #4
    4c34:	ldr	r0, [r0]
    4c38:	str	r0, [sp, #20]
    4c3c:	b	4c60 <coda_bin_cursor_read_int8_partial_array+0x80>
    4c40:	ldr	r0, [fp, #-8]
    4c44:	add	r1, r0, #8
    4c48:	ldr	r0, [r0, #4]
    4c4c:	sub	r0, r0, #1
    4c50:	add	r0, r1, r0, lsl #4
    4c54:	ldr	r0, [r0]
    4c58:	ldr	r0, [r0, #4]
    4c5c:	str	r0, [sp, #20]
    4c60:	ldr	r0, [sp, #20]
    4c64:	str	r0, [sp, #24]
    4c68:	ldr	r0, [sp, #24]
    4c6c:	ldr	r0, [r0, #40]	; 0x28
    4c70:	ldr	r0, [r0]
    4c74:	cmp	r0, #1
    4c78:	bne	4cb8 <coda_bin_cursor_read_int8_partial_array+0xd8>
    4c7c:	ldr	r0, [fp, #-8]
    4c80:	ldr	r2, [fp, #-12]
    4c84:	ldr	r3, [fp, #-16]
    4c88:	ldr	r1, [fp, #-20]	; 0xffffffec
    4c8c:	movw	ip, #0
    4c90:	movt	ip, #0
    4c94:	str	r1, [sp, #16]
    4c98:	mov	r1, ip
    4c9c:	ldr	ip, [sp, #16]
    4ca0:	str	ip, [sp]
    4ca4:	movw	lr, #1
    4ca8:	str	lr, [sp, #4]
    4cac:	bl	4d34 <read_partial_array>
    4cb0:	str	r0, [fp, #-4]
    4cb4:	b	4d28 <coda_bin_cursor_read_int8_partial_array+0x148>
    4cb8:	ldr	r0, [sp, #24]
    4cbc:	ldr	r0, [r0, #40]	; 0x28
    4cc0:	ldr	r0, [r0]
    4cc4:	cmp	r0, #0
    4cc8:	bne	4cd0 <coda_bin_cursor_read_int8_partial_array+0xf0>
    4ccc:	b	4cf0 <coda_bin_cursor_read_int8_partial_array+0x110>
    4cd0:	movw	r0, #0
    4cd4:	movt	r0, #0
    4cd8:	movw	r1, #0
    4cdc:	movt	r1, #0
    4ce0:	movw	r2, #1192	; 0x4a8
    4ce4:	movw	r3, #0
    4ce8:	movt	r3, #0
    4cec:	bl	0 <__assert_fail>
    4cf0:	ldr	r0, [fp, #-8]
    4cf4:	ldr	r2, [fp, #-12]
    4cf8:	ldr	r3, [fp, #-16]
    4cfc:	ldr	r1, [fp, #-20]	; 0xffffffec
    4d00:	movw	ip, #0
    4d04:	movt	ip, #0
    4d08:	str	r1, [sp, #12]
    4d0c:	mov	r1, ip
    4d10:	ldr	ip, [sp, #12]
    4d14:	str	ip, [sp]
    4d18:	movw	lr, #1
    4d1c:	str	lr, [sp, #4]
    4d20:	bl	4d34 <read_partial_array>
    4d24:	str	r0, [fp, #-4]
    4d28:	ldr	r0, [fp, #-4]
    4d2c:	mov	sp, fp
    4d30:	pop	{fp, pc}

00004d34 <read_partial_array>:
    4d34:	push	{r4, r5, fp, lr}
    4d38:	add	fp, sp, #8
    4d3c:	sub	sp, sp, #568	; 0x238
    4d40:	ldr	ip, [fp, #12]
    4d44:	ldr	lr, [fp, #8]
    4d48:	str	r0, [fp, #-16]
    4d4c:	str	r1, [fp, #-20]	; 0xffffffec
    4d50:	str	r2, [fp, #-24]	; 0xffffffe8
    4d54:	str	r3, [fp, #-28]	; 0xffffffe4
    4d58:	ldr	r0, [fp, #-16]
    4d5c:	add	r1, sp, #24
    4d60:	str	r0, [sp, #16]
    4d64:	mov	r0, r1
    4d68:	ldr	r1, [sp, #16]
    4d6c:	movw	r2, #520	; 0x208
    4d70:	str	lr, [sp, #12]
    4d74:	str	ip, [sp, #8]
    4d78:	bl	0 <memcpy>
    4d7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    4d80:	cmp	r0, #0
    4d84:	ble	4e4c <read_partial_array+0x118>
    4d88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4d8c:	add	r0, sp, #24
    4d90:	bl	0 <coda_cursor_goto_array_element_by_index>
    4d94:	cmp	r0, #0
    4d98:	beq	4da8 <read_partial_array+0x74>
    4d9c:	mvn	r0, #0
    4da0:	str	r0, [fp, #-12]
    4da4:	b	4e54 <read_partial_array+0x120>
    4da8:	movw	r0, #0
    4dac:	str	r0, [sp, #20]
    4db0:	ldr	r0, [sp, #20]
    4db4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4db8:	cmp	r0, r1
    4dbc:	bge	4e48 <read_partial_array+0x114>
    4dc0:	ldr	r0, [fp, #-20]	; 0xffffffec
    4dc4:	ldr	r1, [fp, #8]
    4dc8:	ldr	r2, [sp, #20]
    4dcc:	ldr	r3, [fp, #12]
    4dd0:	mul	r2, r2, r3
    4dd4:	add	r1, r1, r2
    4dd8:	add	r2, sp, #24
    4ddc:	str	r0, [sp, #4]
    4de0:	mov	r0, r2
    4de4:	ldr	r2, [sp, #4]
    4de8:	blx	r2
    4dec:	cmp	r0, #0
    4df0:	beq	4e00 <read_partial_array+0xcc>
    4df4:	mvn	r0, #0
    4df8:	str	r0, [fp, #-12]
    4dfc:	b	4e54 <read_partial_array+0x120>
    4e00:	ldr	r0, [sp, #20]
    4e04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    4e08:	sub	r1, r1, #1
    4e0c:	cmp	r0, r1
    4e10:	bge	4e34 <read_partial_array+0x100>
    4e14:	add	r0, sp, #24
    4e18:	bl	0 <coda_cursor_goto_next_array_element>
    4e1c:	cmp	r0, #0
    4e20:	beq	4e30 <read_partial_array+0xfc>
    4e24:	mvn	r0, #0
    4e28:	str	r0, [fp, #-12]
    4e2c:	b	4e54 <read_partial_array+0x120>
    4e30:	b	4e34 <read_partial_array+0x100>
    4e34:	b	4e38 <read_partial_array+0x104>
    4e38:	ldr	r0, [sp, #20]
    4e3c:	add	r0, r0, #1
    4e40:	str	r0, [sp, #20]
    4e44:	b	4db0 <read_partial_array+0x7c>
    4e48:	b	4e4c <read_partial_array+0x118>
    4e4c:	movw	r0, #0
    4e50:	str	r0, [fp, #-12]
    4e54:	ldr	r0, [fp, #-12]
    4e58:	sub	sp, fp, #8
    4e5c:	pop	{r4, r5, fp, pc}

00004e60 <coda_bin_cursor_read_uint8_partial_array>:
    4e60:	push	{fp, lr}
    4e64:	mov	fp, sp
    4e68:	sub	sp, sp, #48	; 0x30
    4e6c:	str	r0, [fp, #-8]
    4e70:	str	r1, [fp, #-12]
    4e74:	str	r2, [fp, #-16]
    4e78:	str	r3, [fp, #-20]	; 0xffffffec
    4e7c:	ldr	r0, [fp, #-8]
    4e80:	add	r1, r0, #8
    4e84:	ldr	r0, [r0, #4]
    4e88:	sub	r0, r0, #1
    4e8c:	add	r0, r1, r0, lsl #4
    4e90:	ldr	r0, [r0]
    4e94:	ldr	r0, [r0]
    4e98:	cmp	r0, #100	; 0x64
    4e9c:	bcs	4ec0 <coda_bin_cursor_read_uint8_partial_array+0x60>
    4ea0:	ldr	r0, [fp, #-8]
    4ea4:	add	r1, r0, #8
    4ea8:	ldr	r0, [r0, #4]
    4eac:	sub	r0, r0, #1
    4eb0:	add	r0, r1, r0, lsl #4
    4eb4:	ldr	r0, [r0]
    4eb8:	str	r0, [sp, #20]
    4ebc:	b	4ee0 <coda_bin_cursor_read_uint8_partial_array+0x80>
    4ec0:	ldr	r0, [fp, #-8]
    4ec4:	add	r1, r0, #8
    4ec8:	ldr	r0, [r0, #4]
    4ecc:	sub	r0, r0, #1
    4ed0:	add	r0, r1, r0, lsl #4
    4ed4:	ldr	r0, [r0]
    4ed8:	ldr	r0, [r0, #4]
    4edc:	str	r0, [sp, #20]
    4ee0:	ldr	r0, [sp, #20]
    4ee4:	str	r0, [sp, #24]
    4ee8:	ldr	r0, [sp, #24]
    4eec:	ldr	r0, [r0, #40]	; 0x28
    4ef0:	ldr	r0, [r0]
    4ef4:	cmp	r0, #1
    4ef8:	bne	4f38 <coda_bin_cursor_read_uint8_partial_array+0xd8>
    4efc:	ldr	r0, [fp, #-8]
    4f00:	ldr	r2, [fp, #-12]
    4f04:	ldr	r3, [fp, #-16]
    4f08:	ldr	r1, [fp, #-20]	; 0xffffffec
    4f0c:	movw	ip, #0
    4f10:	movt	ip, #0
    4f14:	str	r1, [sp, #16]
    4f18:	mov	r1, ip
    4f1c:	ldr	ip, [sp, #16]
    4f20:	str	ip, [sp]
    4f24:	movw	lr, #1
    4f28:	str	lr, [sp, #4]
    4f2c:	bl	4d34 <read_partial_array>
    4f30:	str	r0, [fp, #-4]
    4f34:	b	4fa8 <coda_bin_cursor_read_uint8_partial_array+0x148>
    4f38:	ldr	r0, [sp, #24]
    4f3c:	ldr	r0, [r0, #40]	; 0x28
    4f40:	ldr	r0, [r0]
    4f44:	cmp	r0, #0
    4f48:	bne	4f50 <coda_bin_cursor_read_uint8_partial_array+0xf0>
    4f4c:	b	4f70 <coda_bin_cursor_read_uint8_partial_array+0x110>
    4f50:	movw	r0, #0
    4f54:	movt	r0, #0
    4f58:	movw	r1, #0
    4f5c:	movt	r1, #0
    4f60:	movw	r2, #1206	; 0x4b6
    4f64:	movw	r3, #0
    4f68:	movt	r3, #0
    4f6c:	bl	0 <__assert_fail>
    4f70:	ldr	r0, [fp, #-8]
    4f74:	ldr	r2, [fp, #-12]
    4f78:	ldr	r3, [fp, #-16]
    4f7c:	ldr	r1, [fp, #-20]	; 0xffffffec
    4f80:	movw	ip, #0
    4f84:	movt	ip, #0
    4f88:	str	r1, [sp, #12]
    4f8c:	mov	r1, ip
    4f90:	ldr	ip, [sp, #12]
    4f94:	str	ip, [sp]
    4f98:	movw	lr, #1
    4f9c:	str	lr, [sp, #4]
    4fa0:	bl	4d34 <read_partial_array>
    4fa4:	str	r0, [fp, #-4]
    4fa8:	ldr	r0, [fp, #-4]
    4fac:	mov	sp, fp
    4fb0:	pop	{fp, pc}

00004fb4 <coda_bin_cursor_read_int16_partial_array>:
    4fb4:	push	{fp, lr}
    4fb8:	mov	fp, sp
    4fbc:	sub	sp, sp, #48	; 0x30
    4fc0:	str	r0, [fp, #-8]
    4fc4:	str	r1, [fp, #-12]
    4fc8:	str	r2, [fp, #-16]
    4fcc:	str	r3, [fp, #-20]	; 0xffffffec
    4fd0:	ldr	r0, [fp, #-8]
    4fd4:	add	r1, r0, #8
    4fd8:	ldr	r0, [r0, #4]
    4fdc:	sub	r0, r0, #1
    4fe0:	add	r0, r1, r0, lsl #4
    4fe4:	ldr	r0, [r0]
    4fe8:	ldr	r0, [r0]
    4fec:	cmp	r0, #100	; 0x64
    4ff0:	bcs	5014 <coda_bin_cursor_read_int16_partial_array+0x60>
    4ff4:	ldr	r0, [fp, #-8]
    4ff8:	add	r1, r0, #8
    4ffc:	ldr	r0, [r0, #4]
    5000:	sub	r0, r0, #1
    5004:	add	r0, r1, r0, lsl #4
    5008:	ldr	r0, [r0]
    500c:	str	r0, [sp, #20]
    5010:	b	5034 <coda_bin_cursor_read_int16_partial_array+0x80>
    5014:	ldr	r0, [fp, #-8]
    5018:	add	r1, r0, #8
    501c:	ldr	r0, [r0, #4]
    5020:	sub	r0, r0, #1
    5024:	add	r0, r1, r0, lsl #4
    5028:	ldr	r0, [r0]
    502c:	ldr	r0, [r0, #4]
    5030:	str	r0, [sp, #20]
    5034:	ldr	r0, [sp, #20]
    5038:	str	r0, [sp, #24]
    503c:	ldr	r0, [sp, #24]
    5040:	ldr	r0, [r0, #40]	; 0x28
    5044:	ldr	r0, [r0]
    5048:	cmp	r0, #1
    504c:	bne	508c <coda_bin_cursor_read_int16_partial_array+0xd8>
    5050:	movw	r0, #0
    5054:	movt	r0, #0
    5058:	ldr	r1, [fp, #-8]
    505c:	ldr	r2, [fp, #-12]
    5060:	ldr	r3, [fp, #-16]
    5064:	ldr	ip, [fp, #-20]	; 0xffffffec
    5068:	str	r0, [sp, #16]
    506c:	mov	r0, r1
    5070:	ldr	r1, [sp, #16]
    5074:	str	ip, [sp]
    5078:	movw	ip, #2
    507c:	str	ip, [sp, #4]
    5080:	bl	4d34 <read_partial_array>
    5084:	str	r0, [fp, #-4]
    5088:	b	50fc <coda_bin_cursor_read_int16_partial_array+0x148>
    508c:	ldr	r0, [sp, #24]
    5090:	ldr	r0, [r0, #40]	; 0x28
    5094:	ldr	r0, [r0]
    5098:	cmp	r0, #0
    509c:	bne	50a4 <coda_bin_cursor_read_int16_partial_array+0xf0>
    50a0:	b	50c4 <coda_bin_cursor_read_int16_partial_array+0x110>
    50a4:	movw	r0, #0
    50a8:	movt	r0, #0
    50ac:	movw	r1, #0
    50b0:	movt	r1, #0
    50b4:	movw	r2, #1220	; 0x4c4
    50b8:	movw	r3, #0
    50bc:	movt	r3, #0
    50c0:	bl	0 <__assert_fail>
    50c4:	movw	r0, #0
    50c8:	movt	r0, #0
    50cc:	ldr	r1, [fp, #-8]
    50d0:	ldr	r2, [fp, #-12]
    50d4:	ldr	r3, [fp, #-16]
    50d8:	ldr	ip, [fp, #-20]	; 0xffffffec
    50dc:	str	r0, [sp, #12]
    50e0:	mov	r0, r1
    50e4:	ldr	r1, [sp, #12]
    50e8:	str	ip, [sp]
    50ec:	movw	ip, #2
    50f0:	str	ip, [sp, #4]
    50f4:	bl	4d34 <read_partial_array>
    50f8:	str	r0, [fp, #-4]
    50fc:	ldr	r0, [fp, #-4]
    5100:	mov	sp, fp
    5104:	pop	{fp, pc}

00005108 <coda_bin_cursor_read_uint16_partial_array>:
    5108:	push	{fp, lr}
    510c:	mov	fp, sp
    5110:	sub	sp, sp, #48	; 0x30
    5114:	str	r0, [fp, #-8]
    5118:	str	r1, [fp, #-12]
    511c:	str	r2, [fp, #-16]
    5120:	str	r3, [fp, #-20]	; 0xffffffec
    5124:	ldr	r0, [fp, #-8]
    5128:	add	r1, r0, #8
    512c:	ldr	r0, [r0, #4]
    5130:	sub	r0, r0, #1
    5134:	add	r0, r1, r0, lsl #4
    5138:	ldr	r0, [r0]
    513c:	ldr	r0, [r0]
    5140:	cmp	r0, #100	; 0x64
    5144:	bcs	5168 <coda_bin_cursor_read_uint16_partial_array+0x60>
    5148:	ldr	r0, [fp, #-8]
    514c:	add	r1, r0, #8
    5150:	ldr	r0, [r0, #4]
    5154:	sub	r0, r0, #1
    5158:	add	r0, r1, r0, lsl #4
    515c:	ldr	r0, [r0]
    5160:	str	r0, [sp, #20]
    5164:	b	5188 <coda_bin_cursor_read_uint16_partial_array+0x80>
    5168:	ldr	r0, [fp, #-8]
    516c:	add	r1, r0, #8
    5170:	ldr	r0, [r0, #4]
    5174:	sub	r0, r0, #1
    5178:	add	r0, r1, r0, lsl #4
    517c:	ldr	r0, [r0]
    5180:	ldr	r0, [r0, #4]
    5184:	str	r0, [sp, #20]
    5188:	ldr	r0, [sp, #20]
    518c:	str	r0, [sp, #24]
    5190:	ldr	r0, [sp, #24]
    5194:	ldr	r0, [r0, #40]	; 0x28
    5198:	ldr	r0, [r0]
    519c:	cmp	r0, #1
    51a0:	bne	51e0 <coda_bin_cursor_read_uint16_partial_array+0xd8>
    51a4:	movw	r0, #0
    51a8:	movt	r0, #0
    51ac:	ldr	r1, [fp, #-8]
    51b0:	ldr	r2, [fp, #-12]
    51b4:	ldr	r3, [fp, #-16]
    51b8:	ldr	ip, [fp, #-20]	; 0xffffffec
    51bc:	str	r0, [sp, #16]
    51c0:	mov	r0, r1
    51c4:	ldr	r1, [sp, #16]
    51c8:	str	ip, [sp]
    51cc:	movw	ip, #2
    51d0:	str	ip, [sp, #4]
    51d4:	bl	4d34 <read_partial_array>
    51d8:	str	r0, [fp, #-4]
    51dc:	b	5250 <coda_bin_cursor_read_uint16_partial_array+0x148>
    51e0:	ldr	r0, [sp, #24]
    51e4:	ldr	r0, [r0, #40]	; 0x28
    51e8:	ldr	r0, [r0]
    51ec:	cmp	r0, #0
    51f0:	bne	51f8 <coda_bin_cursor_read_uint16_partial_array+0xf0>
    51f4:	b	5218 <coda_bin_cursor_read_uint16_partial_array+0x110>
    51f8:	movw	r0, #0
    51fc:	movt	r0, #0
    5200:	movw	r1, #0
    5204:	movt	r1, #0
    5208:	movw	r2, #1234	; 0x4d2
    520c:	movw	r3, #0
    5210:	movt	r3, #0
    5214:	bl	0 <__assert_fail>
    5218:	movw	r0, #0
    521c:	movt	r0, #0
    5220:	ldr	r1, [fp, #-8]
    5224:	ldr	r2, [fp, #-12]
    5228:	ldr	r3, [fp, #-16]
    522c:	ldr	ip, [fp, #-20]	; 0xffffffec
    5230:	str	r0, [sp, #12]
    5234:	mov	r0, r1
    5238:	ldr	r1, [sp, #12]
    523c:	str	ip, [sp]
    5240:	movw	ip, #2
    5244:	str	ip, [sp, #4]
    5248:	bl	4d34 <read_partial_array>
    524c:	str	r0, [fp, #-4]
    5250:	ldr	r0, [fp, #-4]
    5254:	mov	sp, fp
    5258:	pop	{fp, pc}

0000525c <coda_bin_cursor_read_int32_partial_array>:
    525c:	push	{fp, lr}
    5260:	mov	fp, sp
    5264:	sub	sp, sp, #48	; 0x30
    5268:	str	r0, [fp, #-8]
    526c:	str	r1, [fp, #-12]
    5270:	str	r2, [fp, #-16]
    5274:	str	r3, [fp, #-20]	; 0xffffffec
    5278:	ldr	r0, [fp, #-8]
    527c:	add	r1, r0, #8
    5280:	ldr	r0, [r0, #4]
    5284:	sub	r0, r0, #1
    5288:	add	r0, r1, r0, lsl #4
    528c:	ldr	r0, [r0]
    5290:	ldr	r0, [r0]
    5294:	cmp	r0, #100	; 0x64
    5298:	bcs	52bc <coda_bin_cursor_read_int32_partial_array+0x60>
    529c:	ldr	r0, [fp, #-8]
    52a0:	add	r1, r0, #8
    52a4:	ldr	r0, [r0, #4]
    52a8:	sub	r0, r0, #1
    52ac:	add	r0, r1, r0, lsl #4
    52b0:	ldr	r0, [r0]
    52b4:	str	r0, [sp, #20]
    52b8:	b	52dc <coda_bin_cursor_read_int32_partial_array+0x80>
    52bc:	ldr	r0, [fp, #-8]
    52c0:	add	r1, r0, #8
    52c4:	ldr	r0, [r0, #4]
    52c8:	sub	r0, r0, #1
    52cc:	add	r0, r1, r0, lsl #4
    52d0:	ldr	r0, [r0]
    52d4:	ldr	r0, [r0, #4]
    52d8:	str	r0, [sp, #20]
    52dc:	ldr	r0, [sp, #20]
    52e0:	str	r0, [sp, #24]
    52e4:	ldr	r0, [sp, #24]
    52e8:	ldr	r0, [r0, #40]	; 0x28
    52ec:	ldr	r0, [r0]
    52f0:	cmp	r0, #1
    52f4:	bne	5334 <coda_bin_cursor_read_int32_partial_array+0xd8>
    52f8:	movw	r0, #0
    52fc:	movt	r0, #0
    5300:	ldr	r1, [fp, #-8]
    5304:	ldr	r2, [fp, #-12]
    5308:	ldr	r3, [fp, #-16]
    530c:	ldr	ip, [fp, #-20]	; 0xffffffec
    5310:	str	r0, [sp, #16]
    5314:	mov	r0, r1
    5318:	ldr	r1, [sp, #16]
    531c:	str	ip, [sp]
    5320:	movw	ip, #4
    5324:	str	ip, [sp, #4]
    5328:	bl	4d34 <read_partial_array>
    532c:	str	r0, [fp, #-4]
    5330:	b	53a4 <coda_bin_cursor_read_int32_partial_array+0x148>
    5334:	ldr	r0, [sp, #24]
    5338:	ldr	r0, [r0, #40]	; 0x28
    533c:	ldr	r0, [r0]
    5340:	cmp	r0, #0
    5344:	bne	534c <coda_bin_cursor_read_int32_partial_array+0xf0>
    5348:	b	536c <coda_bin_cursor_read_int32_partial_array+0x110>
    534c:	movw	r0, #0
    5350:	movt	r0, #0
    5354:	movw	r1, #0
    5358:	movt	r1, #0
    535c:	movw	r2, #1248	; 0x4e0
    5360:	movw	r3, #0
    5364:	movt	r3, #0
    5368:	bl	0 <__assert_fail>
    536c:	movw	r0, #0
    5370:	movt	r0, #0
    5374:	ldr	r1, [fp, #-8]
    5378:	ldr	r2, [fp, #-12]
    537c:	ldr	r3, [fp, #-16]
    5380:	ldr	ip, [fp, #-20]	; 0xffffffec
    5384:	str	r0, [sp, #12]
    5388:	mov	r0, r1
    538c:	ldr	r1, [sp, #12]
    5390:	str	ip, [sp]
    5394:	movw	ip, #4
    5398:	str	ip, [sp, #4]
    539c:	bl	4d34 <read_partial_array>
    53a0:	str	r0, [fp, #-4]
    53a4:	ldr	r0, [fp, #-4]
    53a8:	mov	sp, fp
    53ac:	pop	{fp, pc}

000053b0 <coda_bin_cursor_read_uint32_partial_array>:
    53b0:	push	{fp, lr}
    53b4:	mov	fp, sp
    53b8:	sub	sp, sp, #48	; 0x30
    53bc:	str	r0, [fp, #-8]
    53c0:	str	r1, [fp, #-12]
    53c4:	str	r2, [fp, #-16]
    53c8:	str	r3, [fp, #-20]	; 0xffffffec
    53cc:	ldr	r0, [fp, #-8]
    53d0:	add	r1, r0, #8
    53d4:	ldr	r0, [r0, #4]
    53d8:	sub	r0, r0, #1
    53dc:	add	r0, r1, r0, lsl #4
    53e0:	ldr	r0, [r0]
    53e4:	ldr	r0, [r0]
    53e8:	cmp	r0, #100	; 0x64
    53ec:	bcs	5410 <coda_bin_cursor_read_uint32_partial_array+0x60>
    53f0:	ldr	r0, [fp, #-8]
    53f4:	add	r1, r0, #8
    53f8:	ldr	r0, [r0, #4]
    53fc:	sub	r0, r0, #1
    5400:	add	r0, r1, r0, lsl #4
    5404:	ldr	r0, [r0]
    5408:	str	r0, [sp, #20]
    540c:	b	5430 <coda_bin_cursor_read_uint32_partial_array+0x80>
    5410:	ldr	r0, [fp, #-8]
    5414:	add	r1, r0, #8
    5418:	ldr	r0, [r0, #4]
    541c:	sub	r0, r0, #1
    5420:	add	r0, r1, r0, lsl #4
    5424:	ldr	r0, [r0]
    5428:	ldr	r0, [r0, #4]
    542c:	str	r0, [sp, #20]
    5430:	ldr	r0, [sp, #20]
    5434:	str	r0, [sp, #24]
    5438:	ldr	r0, [sp, #24]
    543c:	ldr	r0, [r0, #40]	; 0x28
    5440:	ldr	r0, [r0]
    5444:	cmp	r0, #1
    5448:	bne	5488 <coda_bin_cursor_read_uint32_partial_array+0xd8>
    544c:	movw	r0, #0
    5450:	movt	r0, #0
    5454:	ldr	r1, [fp, #-8]
    5458:	ldr	r2, [fp, #-12]
    545c:	ldr	r3, [fp, #-16]
    5460:	ldr	ip, [fp, #-20]	; 0xffffffec
    5464:	str	r0, [sp, #16]
    5468:	mov	r0, r1
    546c:	ldr	r1, [sp, #16]
    5470:	str	ip, [sp]
    5474:	movw	ip, #4
    5478:	str	ip, [sp, #4]
    547c:	bl	4d34 <read_partial_array>
    5480:	str	r0, [fp, #-4]
    5484:	b	54f8 <coda_bin_cursor_read_uint32_partial_array+0x148>
    5488:	ldr	r0, [sp, #24]
    548c:	ldr	r0, [r0, #40]	; 0x28
    5490:	ldr	r0, [r0]
    5494:	cmp	r0, #0
    5498:	bne	54a0 <coda_bin_cursor_read_uint32_partial_array+0xf0>
    549c:	b	54c0 <coda_bin_cursor_read_uint32_partial_array+0x110>
    54a0:	movw	r0, #0
    54a4:	movt	r0, #0
    54a8:	movw	r1, #0
    54ac:	movt	r1, #0
    54b0:	movw	r2, #1262	; 0x4ee
    54b4:	movw	r3, #0
    54b8:	movt	r3, #0
    54bc:	bl	0 <__assert_fail>
    54c0:	movw	r0, #0
    54c4:	movt	r0, #0
    54c8:	ldr	r1, [fp, #-8]
    54cc:	ldr	r2, [fp, #-12]
    54d0:	ldr	r3, [fp, #-16]
    54d4:	ldr	ip, [fp, #-20]	; 0xffffffec
    54d8:	str	r0, [sp, #12]
    54dc:	mov	r0, r1
    54e0:	ldr	r1, [sp, #12]
    54e4:	str	ip, [sp]
    54e8:	movw	ip, #4
    54ec:	str	ip, [sp, #4]
    54f0:	bl	4d34 <read_partial_array>
    54f4:	str	r0, [fp, #-4]
    54f8:	ldr	r0, [fp, #-4]
    54fc:	mov	sp, fp
    5500:	pop	{fp, pc}

00005504 <coda_bin_cursor_read_int64_partial_array>:
    5504:	push	{fp, lr}
    5508:	mov	fp, sp
    550c:	sub	sp, sp, #48	; 0x30
    5510:	str	r0, [fp, #-8]
    5514:	str	r1, [fp, #-12]
    5518:	str	r2, [fp, #-16]
    551c:	str	r3, [fp, #-20]	; 0xffffffec
    5520:	ldr	r0, [fp, #-8]
    5524:	add	r1, r0, #8
    5528:	ldr	r0, [r0, #4]
    552c:	sub	r0, r0, #1
    5530:	add	r0, r1, r0, lsl #4
    5534:	ldr	r0, [r0]
    5538:	ldr	r0, [r0]
    553c:	cmp	r0, #100	; 0x64
    5540:	bcs	5564 <coda_bin_cursor_read_int64_partial_array+0x60>
    5544:	ldr	r0, [fp, #-8]
    5548:	add	r1, r0, #8
    554c:	ldr	r0, [r0, #4]
    5550:	sub	r0, r0, #1
    5554:	add	r0, r1, r0, lsl #4
    5558:	ldr	r0, [r0]
    555c:	str	r0, [sp, #20]
    5560:	b	5584 <coda_bin_cursor_read_int64_partial_array+0x80>
    5564:	ldr	r0, [fp, #-8]
    5568:	add	r1, r0, #8
    556c:	ldr	r0, [r0, #4]
    5570:	sub	r0, r0, #1
    5574:	add	r0, r1, r0, lsl #4
    5578:	ldr	r0, [r0]
    557c:	ldr	r0, [r0, #4]
    5580:	str	r0, [sp, #20]
    5584:	ldr	r0, [sp, #20]
    5588:	str	r0, [sp, #24]
    558c:	ldr	r0, [sp, #24]
    5590:	ldr	r0, [r0, #40]	; 0x28
    5594:	ldr	r0, [r0]
    5598:	cmp	r0, #1
    559c:	bne	55dc <coda_bin_cursor_read_int64_partial_array+0xd8>
    55a0:	movw	r0, #0
    55a4:	movt	r0, #0
    55a8:	ldr	r1, [fp, #-8]
    55ac:	ldr	r2, [fp, #-12]
    55b0:	ldr	r3, [fp, #-16]
    55b4:	ldr	ip, [fp, #-20]	; 0xffffffec
    55b8:	str	r0, [sp, #16]
    55bc:	mov	r0, r1
    55c0:	ldr	r1, [sp, #16]
    55c4:	str	ip, [sp]
    55c8:	movw	ip, #8
    55cc:	str	ip, [sp, #4]
    55d0:	bl	4d34 <read_partial_array>
    55d4:	str	r0, [fp, #-4]
    55d8:	b	564c <coda_bin_cursor_read_int64_partial_array+0x148>
    55dc:	ldr	r0, [sp, #24]
    55e0:	ldr	r0, [r0, #40]	; 0x28
    55e4:	ldr	r0, [r0]
    55e8:	cmp	r0, #0
    55ec:	bne	55f4 <coda_bin_cursor_read_int64_partial_array+0xf0>
    55f0:	b	5614 <coda_bin_cursor_read_int64_partial_array+0x110>
    55f4:	movw	r0, #0
    55f8:	movt	r0, #0
    55fc:	movw	r1, #0
    5600:	movt	r1, #0
    5604:	movw	r2, #1276	; 0x4fc
    5608:	movw	r3, #0
    560c:	movt	r3, #0
    5610:	bl	0 <__assert_fail>
    5614:	movw	r0, #0
    5618:	movt	r0, #0
    561c:	ldr	r1, [fp, #-8]
    5620:	ldr	r2, [fp, #-12]
    5624:	ldr	r3, [fp, #-16]
    5628:	ldr	ip, [fp, #-20]	; 0xffffffec
    562c:	str	r0, [sp, #12]
    5630:	mov	r0, r1
    5634:	ldr	r1, [sp, #12]
    5638:	str	ip, [sp]
    563c:	movw	ip, #8
    5640:	str	ip, [sp, #4]
    5644:	bl	4d34 <read_partial_array>
    5648:	str	r0, [fp, #-4]
    564c:	ldr	r0, [fp, #-4]
    5650:	mov	sp, fp
    5654:	pop	{fp, pc}

00005658 <coda_bin_cursor_read_uint64_partial_array>:
    5658:	push	{fp, lr}
    565c:	mov	fp, sp
    5660:	sub	sp, sp, #48	; 0x30
    5664:	str	r0, [fp, #-8]
    5668:	str	r1, [fp, #-12]
    566c:	str	r2, [fp, #-16]
    5670:	str	r3, [fp, #-20]	; 0xffffffec
    5674:	ldr	r0, [fp, #-8]
    5678:	add	r1, r0, #8
    567c:	ldr	r0, [r0, #4]
    5680:	sub	r0, r0, #1
    5684:	add	r0, r1, r0, lsl #4
    5688:	ldr	r0, [r0]
    568c:	ldr	r0, [r0]
    5690:	cmp	r0, #100	; 0x64
    5694:	bcs	56b8 <coda_bin_cursor_read_uint64_partial_array+0x60>
    5698:	ldr	r0, [fp, #-8]
    569c:	add	r1, r0, #8
    56a0:	ldr	r0, [r0, #4]
    56a4:	sub	r0, r0, #1
    56a8:	add	r0, r1, r0, lsl #4
    56ac:	ldr	r0, [r0]
    56b0:	str	r0, [sp, #20]
    56b4:	b	56d8 <coda_bin_cursor_read_uint64_partial_array+0x80>
    56b8:	ldr	r0, [fp, #-8]
    56bc:	add	r1, r0, #8
    56c0:	ldr	r0, [r0, #4]
    56c4:	sub	r0, r0, #1
    56c8:	add	r0, r1, r0, lsl #4
    56cc:	ldr	r0, [r0]
    56d0:	ldr	r0, [r0, #4]
    56d4:	str	r0, [sp, #20]
    56d8:	ldr	r0, [sp, #20]
    56dc:	str	r0, [sp, #24]
    56e0:	ldr	r0, [sp, #24]
    56e4:	ldr	r0, [r0, #40]	; 0x28
    56e8:	ldr	r0, [r0]
    56ec:	cmp	r0, #1
    56f0:	bne	5730 <coda_bin_cursor_read_uint64_partial_array+0xd8>
    56f4:	movw	r0, #0
    56f8:	movt	r0, #0
    56fc:	ldr	r1, [fp, #-8]
    5700:	ldr	r2, [fp, #-12]
    5704:	ldr	r3, [fp, #-16]
    5708:	ldr	ip, [fp, #-20]	; 0xffffffec
    570c:	str	r0, [sp, #16]
    5710:	mov	r0, r1
    5714:	ldr	r1, [sp, #16]
    5718:	str	ip, [sp]
    571c:	movw	ip, #8
    5720:	str	ip, [sp, #4]
    5724:	bl	4d34 <read_partial_array>
    5728:	str	r0, [fp, #-4]
    572c:	b	57a0 <coda_bin_cursor_read_uint64_partial_array+0x148>
    5730:	ldr	r0, [sp, #24]
    5734:	ldr	r0, [r0, #40]	; 0x28
    5738:	ldr	r0, [r0]
    573c:	cmp	r0, #0
    5740:	bne	5748 <coda_bin_cursor_read_uint64_partial_array+0xf0>
    5744:	b	5768 <coda_bin_cursor_read_uint64_partial_array+0x110>
    5748:	movw	r0, #0
    574c:	movt	r0, #0
    5750:	movw	r1, #0
    5754:	movt	r1, #0
    5758:	movw	r2, #1290	; 0x50a
    575c:	movw	r3, #0
    5760:	movt	r3, #0
    5764:	bl	0 <__assert_fail>
    5768:	movw	r0, #0
    576c:	movt	r0, #0
    5770:	ldr	r1, [fp, #-8]
    5774:	ldr	r2, [fp, #-12]
    5778:	ldr	r3, [fp, #-16]
    577c:	ldr	ip, [fp, #-20]	; 0xffffffec
    5780:	str	r0, [sp, #12]
    5784:	mov	r0, r1
    5788:	ldr	r1, [sp, #12]
    578c:	str	ip, [sp]
    5790:	movw	ip, #8
    5794:	str	ip, [sp, #4]
    5798:	bl	4d34 <read_partial_array>
    579c:	str	r0, [fp, #-4]
    57a0:	ldr	r0, [fp, #-4]
    57a4:	mov	sp, fp
    57a8:	pop	{fp, pc}

000057ac <coda_bin_cursor_read_float_partial_array>:
    57ac:	push	{fp, lr}
    57b0:	mov	fp, sp
    57b4:	sub	sp, sp, #48	; 0x30
    57b8:	str	r0, [fp, #-8]
    57bc:	str	r1, [fp, #-12]
    57c0:	str	r2, [fp, #-16]
    57c4:	str	r3, [fp, #-20]	; 0xffffffec
    57c8:	ldr	r0, [fp, #-8]
    57cc:	add	r1, r0, #8
    57d0:	ldr	r0, [r0, #4]
    57d4:	sub	r0, r0, #1
    57d8:	add	r0, r1, r0, lsl #4
    57dc:	ldr	r0, [r0]
    57e0:	ldr	r0, [r0]
    57e4:	cmp	r0, #100	; 0x64
    57e8:	bcs	580c <coda_bin_cursor_read_float_partial_array+0x60>
    57ec:	ldr	r0, [fp, #-8]
    57f0:	add	r1, r0, #8
    57f4:	ldr	r0, [r0, #4]
    57f8:	sub	r0, r0, #1
    57fc:	add	r0, r1, r0, lsl #4
    5800:	ldr	r0, [r0]
    5804:	str	r0, [sp, #20]
    5808:	b	582c <coda_bin_cursor_read_float_partial_array+0x80>
    580c:	ldr	r0, [fp, #-8]
    5810:	add	r1, r0, #8
    5814:	ldr	r0, [r0, #4]
    5818:	sub	r0, r0, #1
    581c:	add	r0, r1, r0, lsl #4
    5820:	ldr	r0, [r0]
    5824:	ldr	r0, [r0, #4]
    5828:	str	r0, [sp, #20]
    582c:	ldr	r0, [sp, #20]
    5830:	str	r0, [sp, #24]
    5834:	ldr	r0, [sp, #24]
    5838:	ldr	r0, [r0, #40]	; 0x28
    583c:	ldr	r0, [r0]
    5840:	cmp	r0, #1
    5844:	bne	5884 <coda_bin_cursor_read_float_partial_array+0xd8>
    5848:	movw	r0, #0
    584c:	movt	r0, #0
    5850:	ldr	r1, [fp, #-8]
    5854:	ldr	r2, [fp, #-12]
    5858:	ldr	r3, [fp, #-16]
    585c:	ldr	ip, [fp, #-20]	; 0xffffffec
    5860:	str	r0, [sp, #16]
    5864:	mov	r0, r1
    5868:	ldr	r1, [sp, #16]
    586c:	str	ip, [sp]
    5870:	movw	ip, #4
    5874:	str	ip, [sp, #4]
    5878:	bl	4d34 <read_partial_array>
    587c:	str	r0, [fp, #-4]
    5880:	b	58f4 <coda_bin_cursor_read_float_partial_array+0x148>
    5884:	ldr	r0, [sp, #24]
    5888:	ldr	r0, [r0, #40]	; 0x28
    588c:	ldr	r0, [r0]
    5890:	cmp	r0, #0
    5894:	bne	589c <coda_bin_cursor_read_float_partial_array+0xf0>
    5898:	b	58bc <coda_bin_cursor_read_float_partial_array+0x110>
    589c:	movw	r0, #0
    58a0:	movt	r0, #0
    58a4:	movw	r1, #0
    58a8:	movt	r1, #0
    58ac:	movw	r2, #1304	; 0x518
    58b0:	movw	r3, #0
    58b4:	movt	r3, #0
    58b8:	bl	0 <__assert_fail>
    58bc:	movw	r0, #0
    58c0:	movt	r0, #0
    58c4:	ldr	r1, [fp, #-8]
    58c8:	ldr	r2, [fp, #-12]
    58cc:	ldr	r3, [fp, #-16]
    58d0:	ldr	ip, [fp, #-20]	; 0xffffffec
    58d4:	str	r0, [sp, #12]
    58d8:	mov	r0, r1
    58dc:	ldr	r1, [sp, #12]
    58e0:	str	ip, [sp]
    58e4:	movw	ip, #4
    58e8:	str	ip, [sp, #4]
    58ec:	bl	4d34 <read_partial_array>
    58f0:	str	r0, [fp, #-4]
    58f4:	ldr	r0, [fp, #-4]
    58f8:	mov	sp, fp
    58fc:	pop	{fp, pc}

00005900 <coda_bin_cursor_read_double_partial_array>:
    5900:	push	{fp, lr}
    5904:	mov	fp, sp
    5908:	sub	sp, sp, #48	; 0x30
    590c:	str	r0, [fp, #-8]
    5910:	str	r1, [fp, #-12]
    5914:	str	r2, [fp, #-16]
    5918:	str	r3, [fp, #-20]	; 0xffffffec
    591c:	ldr	r0, [fp, #-8]
    5920:	add	r1, r0, #8
    5924:	ldr	r0, [r0, #4]
    5928:	sub	r0, r0, #1
    592c:	add	r0, r1, r0, lsl #4
    5930:	ldr	r0, [r0]
    5934:	ldr	r0, [r0]
    5938:	cmp	r0, #100	; 0x64
    593c:	bcs	5960 <coda_bin_cursor_read_double_partial_array+0x60>
    5940:	ldr	r0, [fp, #-8]
    5944:	add	r1, r0, #8
    5948:	ldr	r0, [r0, #4]
    594c:	sub	r0, r0, #1
    5950:	add	r0, r1, r0, lsl #4
    5954:	ldr	r0, [r0]
    5958:	str	r0, [sp, #20]
    595c:	b	5980 <coda_bin_cursor_read_double_partial_array+0x80>
    5960:	ldr	r0, [fp, #-8]
    5964:	add	r1, r0, #8
    5968:	ldr	r0, [r0, #4]
    596c:	sub	r0, r0, #1
    5970:	add	r0, r1, r0, lsl #4
    5974:	ldr	r0, [r0]
    5978:	ldr	r0, [r0, #4]
    597c:	str	r0, [sp, #20]
    5980:	ldr	r0, [sp, #20]
    5984:	str	r0, [sp, #24]
    5988:	ldr	r0, [sp, #24]
    598c:	ldr	r0, [r0, #40]	; 0x28
    5990:	ldr	r0, [r0]
    5994:	cmp	r0, #1
    5998:	bne	59d8 <coda_bin_cursor_read_double_partial_array+0xd8>
    599c:	movw	r0, #0
    59a0:	movt	r0, #0
    59a4:	ldr	r1, [fp, #-8]
    59a8:	ldr	r2, [fp, #-12]
    59ac:	ldr	r3, [fp, #-16]
    59b0:	ldr	ip, [fp, #-20]	; 0xffffffec
    59b4:	str	r0, [sp, #16]
    59b8:	mov	r0, r1
    59bc:	ldr	r1, [sp, #16]
    59c0:	str	ip, [sp]
    59c4:	movw	ip, #8
    59c8:	str	ip, [sp, #4]
    59cc:	bl	4d34 <read_partial_array>
    59d0:	str	r0, [fp, #-4]
    59d4:	b	5a48 <coda_bin_cursor_read_double_partial_array+0x148>
    59d8:	ldr	r0, [sp, #24]
    59dc:	ldr	r0, [r0, #40]	; 0x28
    59e0:	ldr	r0, [r0]
    59e4:	cmp	r0, #0
    59e8:	bne	59f0 <coda_bin_cursor_read_double_partial_array+0xf0>
    59ec:	b	5a10 <coda_bin_cursor_read_double_partial_array+0x110>
    59f0:	movw	r0, #0
    59f4:	movt	r0, #0
    59f8:	movw	r1, #0
    59fc:	movt	r1, #0
    5a00:	movw	r2, #1318	; 0x526
    5a04:	movw	r3, #0
    5a08:	movt	r3, #0
    5a0c:	bl	0 <__assert_fail>
    5a10:	movw	r0, #0
    5a14:	movt	r0, #0
    5a18:	ldr	r1, [fp, #-8]
    5a1c:	ldr	r2, [fp, #-12]
    5a20:	ldr	r3, [fp, #-16]
    5a24:	ldr	ip, [fp, #-20]	; 0xffffffec
    5a28:	str	r0, [sp, #12]
    5a2c:	mov	r0, r1
    5a30:	ldr	r1, [sp, #12]
    5a34:	str	ip, [sp]
    5a38:	movw	ip, #8
    5a3c:	str	ip, [sp, #4]
    5a40:	bl	4d34 <read_partial_array>
    5a44:	str	r0, [fp, #-4]
    5a48:	ldr	r0, [fp, #-4]
    5a4c:	mov	sp, fp
    5a50:	pop	{fp, pc}

00005a54 <coda_bin_cursor_read_char_partial_array>:
    5a54:	push	{fp, lr}
    5a58:	mov	fp, sp
    5a5c:	sub	sp, sp, #48	; 0x30
    5a60:	str	r0, [fp, #-8]
    5a64:	str	r1, [fp, #-12]
    5a68:	str	r2, [fp, #-16]
    5a6c:	str	r3, [fp, #-20]	; 0xffffffec
    5a70:	ldr	r0, [fp, #-8]
    5a74:	add	r1, r0, #8
    5a78:	ldr	r0, [r0, #4]
    5a7c:	sub	r0, r0, #1
    5a80:	add	r0, r1, r0, lsl #4
    5a84:	ldr	r0, [r0]
    5a88:	ldr	r0, [r0]
    5a8c:	cmp	r0, #100	; 0x64
    5a90:	bcs	5ab4 <coda_bin_cursor_read_char_partial_array+0x60>
    5a94:	ldr	r0, [fp, #-8]
    5a98:	add	r1, r0, #8
    5a9c:	ldr	r0, [r0, #4]
    5aa0:	sub	r0, r0, #1
    5aa4:	add	r0, r1, r0, lsl #4
    5aa8:	ldr	r0, [r0]
    5aac:	str	r0, [sp, #20]
    5ab0:	b	5ad4 <coda_bin_cursor_read_char_partial_array+0x80>
    5ab4:	ldr	r0, [fp, #-8]
    5ab8:	add	r1, r0, #8
    5abc:	ldr	r0, [r0, #4]
    5ac0:	sub	r0, r0, #1
    5ac4:	add	r0, r1, r0, lsl #4
    5ac8:	ldr	r0, [r0]
    5acc:	ldr	r0, [r0, #4]
    5ad0:	str	r0, [sp, #20]
    5ad4:	ldr	r0, [sp, #20]
    5ad8:	str	r0, [sp, #24]
    5adc:	ldr	r0, [sp, #24]
    5ae0:	ldr	r0, [r0, #40]	; 0x28
    5ae4:	ldr	r0, [r0]
    5ae8:	cmp	r0, #1
    5aec:	bne	5b2c <coda_bin_cursor_read_char_partial_array+0xd8>
    5af0:	ldr	r0, [fp, #-8]
    5af4:	ldr	r2, [fp, #-12]
    5af8:	ldr	r3, [fp, #-16]
    5afc:	ldr	r1, [fp, #-20]	; 0xffffffec
    5b00:	movw	ip, #0
    5b04:	movt	ip, #0
    5b08:	str	r1, [sp, #16]
    5b0c:	mov	r1, ip
    5b10:	ldr	ip, [sp, #16]
    5b14:	str	ip, [sp]
    5b18:	movw	lr, #1
    5b1c:	str	lr, [sp, #4]
    5b20:	bl	4d34 <read_partial_array>
    5b24:	str	r0, [fp, #-4]
    5b28:	b	5b9c <coda_bin_cursor_read_char_partial_array+0x148>
    5b2c:	ldr	r0, [sp, #24]
    5b30:	ldr	r0, [r0, #40]	; 0x28
    5b34:	ldr	r0, [r0]
    5b38:	cmp	r0, #0
    5b3c:	bne	5b44 <coda_bin_cursor_read_char_partial_array+0xf0>
    5b40:	b	5b64 <coda_bin_cursor_read_char_partial_array+0x110>
    5b44:	movw	r0, #0
    5b48:	movt	r0, #0
    5b4c:	movw	r1, #0
    5b50:	movt	r1, #0
    5b54:	movw	r2, #1332	; 0x534
    5b58:	movw	r3, #0
    5b5c:	movt	r3, #0
    5b60:	bl	0 <__assert_fail>
    5b64:	ldr	r0, [fp, #-8]
    5b68:	ldr	r2, [fp, #-12]
    5b6c:	ldr	r3, [fp, #-16]
    5b70:	ldr	r1, [fp, #-20]	; 0xffffffec
    5b74:	movw	ip, #0
    5b78:	movt	ip, #0
    5b7c:	str	r1, [sp, #12]
    5b80:	mov	r1, ip
    5b84:	ldr	ip, [sp, #12]
    5b88:	str	ip, [sp]
    5b8c:	movw	lr, #1
    5b90:	str	lr, [sp, #4]
    5b94:	bl	4d34 <read_partial_array>
    5b98:	str	r0, [fp, #-4]
    5b9c:	ldr	r0, [fp, #-4]
    5ba0:	mov	sp, fp
    5ba4:	pop	{fp, pc}
