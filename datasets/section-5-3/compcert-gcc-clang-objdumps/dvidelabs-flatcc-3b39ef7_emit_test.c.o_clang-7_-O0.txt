
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #40	; 0x28
       c:	ldr	ip, [fp, #8]
      10:	str	r0, [fp, #-4]
      14:	str	r1, [fp, #-8]
      18:	str	r2, [fp, #-12]
      1c:	str	r3, [fp, #-16]
      20:	ldr	r1, [fp, #-12]
      24:	ldr	r2, [fp, #-16]
      28:	ldr	r3, [fp, #8]
      2c:	movw	r0, #0
      30:	movt	r0, #0
      34:	str	ip, [sp, #16]
      38:	bl	0 <printf>
      3c:	movw	r1, #0
      40:	str	r1, [sp, #20]
      44:	str	r0, [sp, #12]
      48:	ldr	r0, [sp, #20]
      4c:	ldr	r1, [fp, #-12]
      50:	cmp	r0, r1
      54:	bge	108 <dbg_emitter+0x108>
      58:	ldr	r0, [fp, #-8]
      5c:	ldr	r1, [sp, #20]
      60:	add	r0, r0, r1, lsl #3
      64:	ldr	r0, [r0]
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	cmp	r0, r1
      74:	bne	9c <dbg_emitter+0x9c>
      78:	ldr	r1, [fp, #-16]
      7c:	ldr	r0, [fp, #-8]
      80:	ldr	r2, [sp, #20]
      84:	add	r0, r0, r2, lsl #3
      88:	ldr	r2, [r0, #4]
      8c:	movw	r0, #0
      90:	movt	r0, #0
      94:	bl	0 <printf>
      98:	str	r0, [sp, #8]
      9c:	ldr	r0, [fp, #-8]
      a0:	ldr	r1, [sp, #20]
      a4:	add	r0, r0, r1, lsl #3
      a8:	ldr	r0, [r0]
      ac:	movw	r1, #0
      b0:	cmp	r0, r1
      b4:	bne	dc <dbg_emitter+0xdc>
      b8:	ldr	r1, [fp, #-16]
      bc:	ldr	r0, [fp, #-8]
      c0:	ldr	r2, [sp, #20]
      c4:	add	r0, r0, r2, lsl #3
      c8:	ldr	r2, [r0, #4]
      cc:	movw	r0, #0
      d0:	movt	r0, #0
      d4:	bl	0 <printf>
      d8:	str	r0, [sp, #4]
      dc:	ldr	r0, [fp, #-8]
      e0:	ldr	r1, [sp, #20]
      e4:	add	r0, r0, r1, lsl #3
      e8:	ldr	r0, [r0, #4]
      ec:	ldr	r1, [fp, #-16]
      f0:	add	r0, r1, r0
      f4:	str	r0, [fp, #-16]
      f8:	ldr	r0, [sp, #20]
      fc:	add	r0, r0, #1
     100:	str	r0, [sp, #20]
     104:	b	48 <dbg_emitter+0x48>
     108:	movw	r0, #0
     10c:	mov	sp, fp
     110:	pop	{fp, pc}

00000114 <debug_test>:
     114:	push	{r4, r5, fp, lr}
     118:	add	fp, sp, #8
     11c:	sub	sp, sp, #304	; 0x130
     120:	add	r0, sp, #28
     124:	movw	r1, #0
     128:	and	r1, r1, #255	; 0xff
     12c:	movw	r2, #40	; 0x28
     130:	bl	0 <memset>
     134:	add	r0, sp, #72	; 0x48
     138:	str	r0, [sp, #68]	; 0x44
     13c:	movw	r0, #0
     140:	movt	r0, #0
     144:	bl	0 <printf>
     148:	ldr	r1, [sp, #68]	; 0x44
     14c:	str	r0, [sp, #24]
     150:	mov	r0, r1
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	movw	r2, #0
     160:	str	r2, [sp, #20]
     164:	ldr	r3, [sp, #20]
     168:	ldr	lr, [sp, #20]
     16c:	str	lr, [sp]
     170:	bl	0 <flatcc_builder_custom_init>
     174:	add	r1, sp, #28
     178:	ldr	r2, [sp, #68]	; 0x44
     17c:	ldr	r3, [sp, #68]	; 0x44
     180:	str	r0, [sp, #16]
     184:	mov	r0, r3
     188:	movw	r3, #10
     18c:	str	r2, [sp, #12]
     190:	mov	r2, r3
     194:	bl	274 <flatbuffers_float_vec_create>
     198:	mov	r1, sp
     19c:	str	r0, [r1, #4]
     1a0:	mov	r0, #1
     1a4:	str	r0, [r1]
     1a8:	mov	r2, #42	; 0x2a
     1ac:	mov	r3, #0
     1b0:	ldr	r0, [sp, #12]
     1b4:	bl	1d4 <main_create_as_root>
     1b8:	ldr	r1, [sp, #68]	; 0x44
     1bc:	str	r0, [sp, #8]
     1c0:	mov	r0, r1
     1c4:	bl	0 <flatcc_builder_clear>
     1c8:	movw	r0, #0
     1cc:	sub	sp, fp, #8
     1d0:	pop	{r4, r5, fp, pc}

000001d4 <main_create_as_root>:
     1d4:	push	{r4, sl, fp, lr}
     1d8:	add	fp, sp, #8
     1dc:	sub	sp, sp, #40	; 0x28
     1e0:	ldr	r1, [fp, #12]
     1e4:	ldr	ip, [fp, #8]
     1e8:	str	r0, [fp, #-16]
     1ec:	str	r3, [sp, #28]
     1f0:	str	r2, [sp, #24]
     1f4:	strb	ip, [sp, #23]
     1f8:	ldr	r0, [fp, #-16]
     1fc:	movw	r2, #0
     200:	str	r1, [sp, #16]
     204:	mov	r1, r2
     208:	bl	d14 <flatbuffers_buffer_start>
     20c:	cmp	r0, #0
     210:	beq	220 <main_create_as_root+0x4c>
     214:	movw	r0, #0
     218:	str	r0, [fp, #-12]
     21c:	b	268 <main_create_as_root+0x94>
     220:	ldr	r0, [fp, #-16]
     224:	mov	r1, r0
     228:	ldr	r2, [sp, #24]
     22c:	ldr	r3, [sp, #28]
     230:	ldrb	ip, [sp, #23]
     234:	ldr	lr, [fp, #12]
     238:	mov	r4, sp
     23c:	str	lr, [r4, #4]
     240:	uxtb	ip, ip
     244:	str	ip, [r4]
     248:	str	r1, [sp, #12]
     24c:	bl	d70 <main_create>
     250:	ldr	r1, [sp, #12]
     254:	str	r0, [sp, #8]
     258:	mov	r0, r1
     25c:	ldr	r1, [sp, #8]
     260:	bl	d48 <flatbuffers_buffer_end>
     264:	str	r0, [fp, #-12]
     268:	ldr	r0, [fp, #-12]
     26c:	sub	sp, fp, #8
     270:	pop	{r4, sl, fp, pc}

00000274 <flatbuffers_float_vec_create>:
     274:	push	{fp, lr}
     278:	mov	fp, sp
     27c:	sub	sp, sp, #24
     280:	ldr	r3, [pc, #64]	; 2c8 <flatbuffers_float_vec_create+0x54>
     284:	str	r0, [fp, #-4]
     288:	str	r1, [fp, #-8]
     28c:	str	r2, [sp, #12]
     290:	ldr	r0, [fp, #-4]
     294:	ldr	r1, [fp, #-8]
     298:	ldr	r2, [sp, #12]
     29c:	movw	ip, #4
     2a0:	str	r3, [sp, #8]
     2a4:	mov	r3, ip
     2a8:	movw	ip, #4
     2ac:	uxth	ip, ip
     2b0:	str	ip, [sp]
     2b4:	ldr	ip, [sp, #8]
     2b8:	str	ip, [sp, #4]
     2bc:	bl	0 <flatcc_builder_create_vector>
     2c0:	mov	sp, fp
     2c4:	pop	{fp, pc}
     2c8:	.word	0x3fffffff

000002cc <emit_test>:
     2cc:	push	{r4, r5, fp, lr}
     2d0:	add	fp, sp, #8
     2d4:	sub	sp, sp, #376	; 0x178
     2d8:	sub	r0, fp, #71	; 0x47
     2dc:	movw	r1, #0
     2e0:	movt	r1, #0
     2e4:	movw	r2, #59	; 0x3b
     2e8:	bl	0 <memcpy>
     2ec:	movw	r0, #0
     2f0:	movt	r0, #0
     2f4:	ldr	r1, [r0]
     2f8:	str	r1, [sp, #44]	; 0x2c
     2fc:	ldr	r1, [r0, #4]
     300:	str	r1, [sp, #48]	; 0x30
     304:	ldr	r1, [r0, #8]
     308:	str	r1, [sp, #52]	; 0x34
     30c:	ldr	r0, [r0, #12]
     310:	str	r0, [sp, #56]	; 0x38
     314:	add	r0, sp, #68	; 0x44
     318:	str	r0, [sp, #64]	; 0x40
     31c:	ldr	r0, [sp, #64]	; 0x40
     320:	bl	0 <flatcc_builder_init>
     324:	ldr	r1, [sp, #64]	; 0x40
     328:	str	r0, [sp, #28]
     32c:	mov	r0, r1
     330:	bl	0 <flatcc_builder_get_emit_context>
     334:	add	r1, sp, #44	; 0x2c
     338:	str	r0, [fp, #-84]	; 0xffffffac
     33c:	ldr	r0, [sp, #64]	; 0x40
     340:	movw	r2, #4
     344:	bl	274 <flatbuffers_float_vec_create>
     348:	str	r0, [sp, #60]	; 0x3c
     34c:	ldr	r0, [sp, #64]	; 0x40
     350:	ldr	r1, [sp, #60]	; 0x3c
     354:	mov	r2, sp
     358:	str	r1, [r2, #4]
     35c:	mov	r1, #1
     360:	str	r1, [r2]
     364:	mov	r2, #42	; 0x2a
     368:	mov	r3, #0
     36c:	bl	1d4 <main_create_as_root>
     370:	ldr	r1, [fp, #-84]	; 0xffffffac
     374:	str	r0, [sp, #24]
     378:	mov	r0, r1
     37c:	sub	r1, fp, #76	; 0x4c
     380:	bl	660 <flatcc_emitter_get_direct_buffer>
     384:	str	r0, [fp, #-80]	; 0xffffffb0
     388:	ldr	r0, [fp, #-80]	; 0xffffffb0
     38c:	movw	r1, #0
     390:	cmp	r0, r1
     394:	bne	3a4 <emit_test+0xd8>
     398:	mvn	r0, #0
     39c:	str	r0, [fp, #-12]
     3a0:	b	650 <emit_test+0x384>
     3a4:	b	3a8 <emit_test+0xdc>
     3a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
     3ac:	ldr	r1, [fp, #-84]	; 0xffffffac
     3b0:	str	r0, [sp, #20]
     3b4:	mov	r0, r1
     3b8:	bl	6e4 <flatcc_emitter_get_buffer_size>
     3bc:	ldr	r1, [sp, #20]
     3c0:	cmp	r1, r0
     3c4:	beq	3e8 <emit_test+0x11c>
     3c8:	movw	r0, #0
     3cc:	movt	r0, #0
     3d0:	movw	r1, #0
     3d4:	movt	r1, #0
     3d8:	movw	r2, #100	; 0x64
     3dc:	movw	r3, #0
     3e0:	movt	r3, #0
     3e4:	bl	0 <__assert_fail>
     3e8:	b	3ec <emit_test+0x120>
     3ec:	b	3f0 <emit_test+0x124>
     3f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
     3f4:	ldr	r1, [sp, #64]	; 0x40
     3f8:	str	r0, [sp, #16]
     3fc:	mov	r0, r1
     400:	bl	0 <flatcc_builder_get_buffer_size>
     404:	ldr	r1, [sp, #16]
     408:	cmp	r1, r0
     40c:	beq	430 <emit_test+0x164>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	movw	r1, #0
     41c:	movt	r1, #0
     420:	movw	r2, #101	; 0x65
     424:	movw	r3, #0
     428:	movt	r3, #0
     42c:	bl	0 <__assert_fail>
     430:	b	434 <emit_test+0x168>
     434:	movw	r0, #0
     438:	movt	r0, #0
     43c:	ldr	r0, [r0]
     440:	ldr	r2, [fp, #-76]	; 0xffffffb4
     444:	movw	r1, #0
     448:	movt	r1, #0
     44c:	bl	0 <fprintf>
     450:	ldr	r1, [fp, #-80]	; 0xffffffb0
     454:	ldr	r2, [fp, #-76]	; 0xffffffb4
     458:	movw	lr, #0
     45c:	movt	lr, #0
     460:	ldr	r3, [lr]
     464:	movw	lr, #0
     468:	movt	lr, #0
     46c:	str	r0, [sp, #12]
     470:	mov	r0, lr
     474:	bl	6fc <hexdump>
     478:	ldr	r0, [fp, #-76]	; 0xffffffb4
     47c:	cmp	r0, #58	; 0x3a
     480:	beq	4a4 <emit_test+0x1d8>
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	movw	r1, #0
     490:	movt	r1, #0
     494:	movw	r2, #106	; 0x6a
     498:	movw	r3, #0
     49c:	movt	r3, #0
     4a0:	bl	0 <__assert_fail>
     4a4:	b	4a8 <emit_test+0x1dc>
     4a8:	b	4ac <emit_test+0x1e0>
     4ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
     4b0:	movw	r1, #58	; 0x3a
     4b4:	cmp	r1, r0
     4b8:	beq	4dc <emit_test+0x210>
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	movw	r1, #0
     4c8:	movt	r1, #0
     4cc:	movw	r2, #107	; 0x6b
     4d0:	movw	r3, #0
     4d4:	movt	r3, #0
     4d8:	bl	0 <__assert_fail>
     4dc:	b	4e0 <emit_test+0x214>
     4e0:	b	4e4 <emit_test+0x218>
     4e4:	sub	r1, fp, #71	; 0x47
     4e8:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
     4f0:	bl	0 <memcmp>
     4f4:	movw	r1, #0
     4f8:	cmp	r1, r0
     4fc:	beq	520 <emit_test+0x254>
     500:	movw	r0, #0
     504:	movt	r0, #0
     508:	movw	r1, #0
     50c:	movt	r1, #0
     510:	movw	r2, #108	; 0x6c
     514:	movw	r3, #0
     518:	movt	r3, #0
     51c:	bl	0 <__assert_fail>
     520:	b	524 <emit_test+0x258>
     524:	ldr	r0, [fp, #-80]	; 0xffffffb0
     528:	bl	8f0 <main_as_root>
     52c:	str	r0, [sp, #40]	; 0x28
     530:	ldr	r0, [sp, #40]	; 0x28
     534:	bl	960 <main_time>
     538:	str	r1, [sp, #36]	; 0x24
     53c:	str	r0, [sp, #32]
     540:	ldr	r0, [sp, #32]
     544:	ldr	r1, [sp, #36]	; 0x24
     548:	eor	r0, r0, #42	; 0x2a
     54c:	orr	r0, r0, r1
     550:	cmp	r0, #0
     554:	beq	57c <emit_test+0x2b0>
     558:	b	55c <emit_test+0x290>
     55c:	movw	r0, #0
     560:	movt	r0, #0
     564:	movw	r1, #0
     568:	movt	r1, #0
     56c:	movw	r2, #112	; 0x70
     570:	movw	r3, #0
     574:	movt	r3, #0
     578:	bl	0 <__assert_fail>
     57c:	b	580 <emit_test+0x2b4>
     580:	b	584 <emit_test+0x2b8>
     584:	ldr	r0, [sp, #40]	; 0x28
     588:	bl	a5c <main_device>
     58c:	and	r0, r0, #255	; 0xff
     590:	cmp	r0, #1
     594:	beq	5b8 <emit_test+0x2ec>
     598:	movw	r0, #0
     59c:	movt	r0, #0
     5a0:	movw	r1, #0
     5a4:	movt	r1, #0
     5a8:	movw	r2, #113	; 0x71
     5ac:	movw	r3, #0
     5b0:	movt	r3, #0
     5b4:	bl	0 <__assert_fail>
     5b8:	b	5bc <emit_test+0x2f0>
     5bc:	b	5c0 <emit_test+0x2f4>
     5c0:	ldr	r0, [sp, #40]	; 0x28
     5c4:	bl	b64 <main_samples>
     5c8:	bl	b44 <flatbuffers_float_vec_len>
     5cc:	cmp	r0, #4
     5d0:	beq	5f4 <emit_test+0x328>
     5d4:	movw	r0, #0
     5d8:	movt	r0, #0
     5dc:	movw	r1, #0
     5e0:	movt	r1, #0
     5e4:	movw	r2, #114	; 0x72
     5e8:	movw	r3, #0
     5ec:	movt	r3, #0
     5f0:	bl	0 <__assert_fail>
     5f4:	b	5f8 <emit_test+0x32c>
     5f8:	b	5fc <emit_test+0x330>
     5fc:	ldr	r0, [sp, #40]	; 0x28
     600:	bl	b64 <main_samples>
     604:	movw	r1, #2
     608:	bl	c60 <flatbuffers_float_vec_at>
     60c:	vldr	s2, [pc, #72]	; 65c <emit_test+0x390>
     610:	vcmp.f32	s0, s2
     614:	vmrs	APSR_nzcv, fpscr
     618:	beq	63c <emit_test+0x370>
     61c:	movw	r0, #0
     620:	movt	r0, #0
     624:	movw	r1, #0
     628:	movt	r1, #0
     62c:	movw	r2, #115	; 0x73
     630:	movw	r3, #0
     634:	movt	r3, #0
     638:	bl	0 <__assert_fail>
     63c:	b	640 <emit_test+0x374>
     640:	ldr	r0, [sp, #64]	; 0x40
     644:	bl	0 <flatcc_builder_clear>
     648:	movw	r0, #0
     64c:	str	r0, [fp, #-12]
     650:	ldr	r0, [fp, #-12]
     654:	sub	sp, fp, #8
     658:	pop	{r4, r5, fp, pc}
     65c:	.word	0x3f99999a

00000660 <flatcc_emitter_get_direct_buffer>:
     660:	sub	sp, sp, #12
     664:	str	r0, [sp, #4]
     668:	str	r1, [sp]
     66c:	ldr	r0, [sp, #4]
     670:	ldr	r0, [r0]
     674:	ldr	r1, [sp, #4]
     678:	ldr	r1, [r1, #4]
     67c:	cmp	r0, r1
     680:	bne	6b4 <flatcc_emitter_get_direct_buffer+0x54>
     684:	ldr	r0, [sp]
     688:	movw	r1, #0
     68c:	cmp	r0, r1
     690:	beq	6a4 <flatcc_emitter_get_direct_buffer+0x44>
     694:	ldr	r0, [sp, #4]
     698:	ldr	r0, [r0, #24]
     69c:	ldr	r1, [sp]
     6a0:	str	r0, [r1]
     6a4:	ldr	r0, [sp, #4]
     6a8:	ldr	r0, [r0, #8]
     6ac:	str	r0, [sp, #8]
     6b0:	b	6d8 <flatcc_emitter_get_direct_buffer+0x78>
     6b4:	ldr	r0, [sp]
     6b8:	movw	r1, #0
     6bc:	cmp	r0, r1
     6c0:	beq	6d0 <flatcc_emitter_get_direct_buffer+0x70>
     6c4:	ldr	r0, [sp]
     6c8:	movw	r1, #0
     6cc:	str	r1, [r0]
     6d0:	movw	r0, #0
     6d4:	str	r0, [sp, #8]
     6d8:	ldr	r0, [sp, #8]
     6dc:	add	sp, sp, #12
     6e0:	bx	lr

000006e4 <flatcc_emitter_get_buffer_size>:
     6e4:	sub	sp, sp, #4
     6e8:	str	r0, [sp]
     6ec:	ldr	r0, [sp]
     6f0:	ldr	r0, [r0, #24]
     6f4:	add	sp, sp, #4
     6f8:	bx	lr

000006fc <hexdump>:
     6fc:	push	{fp, lr}
     700:	mov	fp, sp
     704:	sub	sp, sp, #72	; 0x48
     708:	str	r0, [fp, #-4]
     70c:	str	r1, [fp, #-8]
     710:	str	r2, [fp, #-12]
     714:	str	r3, [fp, #-16]
     718:	ldr	r0, [fp, #-8]
     71c:	str	r0, [sp, #28]
     720:	ldr	r0, [fp, #-4]
     724:	movw	r1, #0
     728:	cmp	r0, r1
     72c:	beq	748 <hexdump+0x4c>
     730:	ldr	r0, [fp, #-16]
     734:	ldr	r2, [fp, #-4]
     738:	movw	r1, #0
     73c:	movt	r1, #0
     740:	bl	0 <fprintf>
     744:	str	r0, [sp, #24]
     748:	movw	r0, #0
     74c:	str	r0, [fp, #-20]	; 0xffffffec
     750:	ldr	r0, [fp, #-20]	; 0xffffffec
     754:	ldr	r1, [fp, #-12]
     758:	cmp	r0, r1
     75c:	bcs	898 <hexdump+0x19c>
     760:	ldr	r0, [fp, #-20]	; 0xffffffec
     764:	and	r0, r0, #15
     768:	cmp	r0, #0
     76c:	bne	7b0 <hexdump+0xb4>
     770:	ldr	r0, [fp, #-20]	; 0xffffffec
     774:	cmp	r0, #0
     778:	beq	794 <hexdump+0x98>
     77c:	add	r2, sp, #35	; 0x23
     780:	ldr	r0, [fp, #-16]
     784:	movw	r1, #0
     788:	movt	r1, #0
     78c:	bl	0 <fprintf>
     790:	str	r0, [sp, #20]
     794:	ldr	r0, [fp, #-16]
     798:	ldr	r2, [fp, #-20]	; 0xffffffec
     79c:	movw	r1, #0
     7a0:	movt	r1, #0
     7a4:	bl	0 <fprintf>
     7a8:	str	r0, [sp, #16]
     7ac:	b	7d8 <hexdump+0xdc>
     7b0:	ldr	r0, [fp, #-20]	; 0xffffffec
     7b4:	and	r0, r0, #7
     7b8:	cmp	r0, #0
     7bc:	bne	7d4 <hexdump+0xd8>
     7c0:	ldr	r0, [fp, #-16]
     7c4:	movw	r1, #0
     7c8:	movt	r1, #0
     7cc:	bl	0 <fprintf>
     7d0:	str	r0, [sp, #12]
     7d4:	b	7d8 <hexdump+0xdc>
     7d8:	ldr	r0, [fp, #-16]
     7dc:	ldr	r1, [sp, #28]
     7e0:	ldr	r2, [fp, #-20]	; 0xffffffec
     7e4:	add	r1, r1, r2
     7e8:	ldrb	r2, [r1]
     7ec:	movw	r1, #0
     7f0:	movt	r1, #0
     7f4:	bl	0 <fprintf>
     7f8:	ldr	r1, [sp, #28]
     7fc:	ldr	r2, [fp, #-20]	; 0xffffffec
     800:	add	r1, r1, r2
     804:	ldrb	r1, [r1]
     808:	cmp	r1, #32
     80c:	str	r0, [sp, #8]
     810:	blt	82c <hexdump+0x130>
     814:	ldr	r0, [sp, #28]
     818:	ldr	r1, [fp, #-20]	; 0xffffffec
     81c:	add	r0, r0, r1
     820:	ldrb	r0, [r0]
     824:	cmp	r0, #126	; 0x7e
     828:	ble	848 <hexdump+0x14c>
     82c:	ldr	r0, [fp, #-20]	; 0xffffffec
     830:	and	r0, r0, #15
     834:	add	r1, sp, #35	; 0x23
     838:	add	r0, r1, r0
     83c:	movw	r1, #46	; 0x2e
     840:	strb	r1, [r0]
     844:	b	86c <hexdump+0x170>
     848:	ldr	r0, [sp, #28]
     84c:	ldr	r1, [fp, #-20]	; 0xffffffec
     850:	add	r0, r0, r1
     854:	ldrb	r0, [r0]
     858:	ldr	r1, [fp, #-20]	; 0xffffffec
     85c:	and	r1, r1, #15
     860:	add	r2, sp, #35	; 0x23
     864:	add	r1, r2, r1
     868:	strb	r0, [r1]
     86c:	ldr	r0, [fp, #-20]	; 0xffffffec
     870:	and	r0, r0, #15
     874:	add	r0, r0, #1
     878:	add	r1, sp, #35	; 0x23
     87c:	add	r0, r1, r0
     880:	movw	r1, #0
     884:	strb	r1, [r0]
     888:	ldr	r0, [fp, #-20]	; 0xffffffec
     88c:	add	r0, r0, #1
     890:	str	r0, [fp, #-20]	; 0xffffffec
     894:	b	750 <hexdump+0x54>
     898:	b	89c <hexdump+0x1a0>
     89c:	ldr	r0, [fp, #-20]	; 0xffffffec
     8a0:	and	r0, r0, #15
     8a4:	cmp	r0, #0
     8a8:	beq	8d0 <hexdump+0x1d4>
     8ac:	ldr	r0, [fp, #-16]
     8b0:	movw	r1, #0
     8b4:	movt	r1, #0
     8b8:	bl	0 <fprintf>
     8bc:	ldr	r1, [fp, #-20]	; 0xffffffec
     8c0:	add	r1, r1, #1
     8c4:	str	r1, [fp, #-20]	; 0xffffffec
     8c8:	str	r0, [sp, #4]
     8cc:	b	89c <hexdump+0x1a0>
     8d0:	add	r2, sp, #35	; 0x23
     8d4:	ldr	r0, [fp, #-16]
     8d8:	movw	r1, #0
     8dc:	movt	r1, #0
     8e0:	bl	0 <fprintf>
     8e4:	str	r0, [sp]
     8e8:	mov	sp, fp
     8ec:	pop	{fp, pc}

000008f0 <main_as_root>:
     8f0:	push	{fp, lr}
     8f4:	mov	fp, sp
     8f8:	sub	sp, sp, #16
     8fc:	str	r0, [fp, #-4]
     900:	movw	r0, #0
     904:	str	r0, [sp, #8]
     908:	ldr	r1, [fp, #-4]
     90c:	cmp	r1, r0
     910:	beq	928 <main_as_root+0x38>
     914:	ldr	r0, [fp, #-4]
     918:	ldr	r1, [sp, #8]
     91c:	bl	10b8 <flatbuffers_has_identifier>
     920:	cmp	r0, #0
     924:	bne	934 <main_as_root+0x44>
     928:	movw	r0, #0
     92c:	str	r0, [sp, #4]
     930:	b	954 <main_as_root+0x64>
     934:	ldr	r0, [fp, #-4]
     938:	ldr	r1, [fp, #-4]
     93c:	str	r0, [sp]
     940:	mov	r0, r1
     944:	bl	1164 <__flatbuffers_uoffset_read_from_pe>
     948:	ldr	r1, [sp]
     94c:	add	r0, r1, r0
     950:	str	r0, [sp, #4]
     954:	ldr	r0, [sp, #4]
     958:	mov	sp, fp
     95c:	pop	{fp, pc}

00000960 <main_time>:
     960:	push	{fp, lr}
     964:	mov	fp, sp
     968:	sub	sp, sp, #32
     96c:	str	r0, [fp, #-4]
     970:	movw	r0, #0
     974:	strh	r0, [fp, #-6]
     978:	ldr	r0, [fp, #-4]
     97c:	movw	r1, #0
     980:	cmp	r0, r1
     984:	beq	990 <main_time+0x30>
     988:	b	98c <main_time+0x2c>
     98c:	b	9b0 <main_time+0x50>
     990:	movw	r0, #0
     994:	movt	r0, #0
     998:	movw	r1, #0
     99c:	movt	r1, #0
     9a0:	movw	r2, #41	; 0x29
     9a4:	movw	r3, #0
     9a8:	movt	r3, #0
     9ac:	bl	0 <__assert_fail>
     9b0:	mov	r0, #0
     9b4:	strh	r0, [fp, #-8]
     9b8:	ldr	r0, [fp, #-4]
     9bc:	str	r0, [sp, #16]
     9c0:	bl	11e8 <__flatbuffers_soffset_read_from_pe>
     9c4:	ldr	lr, [sp, #16]
     9c8:	sub	r0, lr, r0
     9cc:	str	r0, [fp, #-12]
     9d0:	ldr	r0, [fp, #-12]
     9d4:	bl	120c <__flatbuffers_voffset_read_from_pe>
     9d8:	ldrh	lr, [fp, #-8]
     9dc:	add	lr, lr, #3
     9e0:	lsl	lr, lr, #1
     9e4:	cmp	r0, lr
     9e8:	bcc	a04 <main_time+0xa4>
     9ec:	ldr	r0, [fp, #-12]
     9f0:	ldrh	r1, [fp, #-8]
     9f4:	add	r0, r0, r1, lsl #1
     9f8:	add	r0, r0, #4
     9fc:	bl	120c <__flatbuffers_voffset_read_from_pe>
     a00:	strh	r0, [fp, #-6]
     a04:	ldrh	r0, [fp, #-6]
     a08:	cmp	r0, #0
     a0c:	beq	a2c <main_time+0xcc>
     a10:	ldr	r0, [fp, #-4]
     a14:	ldrh	r1, [fp, #-6]
     a18:	add	r0, r0, r1
     a1c:	bl	1234 <flatbuffers_int64_read_from_pe>
     a20:	str	r0, [sp, #12]
     a24:	str	r1, [sp, #8]
     a28:	b	a40 <main_time+0xe0>
     a2c:	mov	r0, #0
     a30:	mov	r1, r0
     a34:	str	r1, [sp, #12]
     a38:	str	r0, [sp, #8]
     a3c:	b	a40 <main_time+0xe0>
     a40:	ldr	r0, [sp, #8]
     a44:	ldr	r1, [sp, #12]
     a48:	str	r0, [sp, #4]
     a4c:	mov	r0, r1
     a50:	ldr	r1, [sp, #4]
     a54:	mov	sp, fp
     a58:	pop	{fp, pc}

00000a5c <main_device>:
     a5c:	push	{fp, lr}
     a60:	mov	fp, sp
     a64:	sub	sp, sp, #24
     a68:	str	r0, [fp, #-4]
     a6c:	movw	r0, #0
     a70:	strh	r0, [fp, #-6]
     a74:	ldr	r0, [fp, #-4]
     a78:	movw	r1, #0
     a7c:	cmp	r0, r1
     a80:	beq	a8c <main_device+0x30>
     a84:	b	a88 <main_device+0x2c>
     a88:	b	aac <main_device+0x50>
     a8c:	movw	r0, #0
     a90:	movt	r0, #0
     a94:	movw	r1, #0
     a98:	movt	r1, #0
     a9c:	movw	r2, #42	; 0x2a
     aa0:	movw	r3, #0
     aa4:	movt	r3, #0
     aa8:	bl	0 <__assert_fail>
     aac:	mov	r0, #1
     ab0:	strh	r0, [fp, #-8]
     ab4:	ldr	r0, [fp, #-4]
     ab8:	str	r0, [sp, #8]
     abc:	bl	11e8 <__flatbuffers_soffset_read_from_pe>
     ac0:	ldr	lr, [sp, #8]
     ac4:	sub	r0, lr, r0
     ac8:	str	r0, [sp, #12]
     acc:	ldr	r0, [sp, #12]
     ad0:	bl	120c <__flatbuffers_voffset_read_from_pe>
     ad4:	ldrh	lr, [fp, #-8]
     ad8:	add	lr, lr, #3
     adc:	lsl	lr, lr, #1
     ae0:	cmp	r0, lr
     ae4:	bcc	b00 <main_device+0xa4>
     ae8:	ldr	r0, [sp, #12]
     aec:	ldrh	r1, [fp, #-8]
     af0:	add	r0, r0, r1, lsl #1
     af4:	add	r0, r0, #4
     af8:	bl	120c <__flatbuffers_voffset_read_from_pe>
     afc:	strh	r0, [fp, #-6]
     b00:	ldrh	r0, [fp, #-6]
     b04:	cmp	r0, #0
     b08:	beq	b28 <main_device+0xcc>
     b0c:	ldr	r0, [fp, #-4]
     b10:	ldrh	r1, [fp, #-6]
     b14:	add	r0, r0, r1
     b18:	bl	12ac <flatbuffers_uint8_read_from_pe>
     b1c:	and	r0, r0, #255	; 0xff
     b20:	str	r0, [sp, #4]
     b24:	b	b34 <main_device+0xd8>
     b28:	movw	r0, #0
     b2c:	str	r0, [sp, #4]
     b30:	b	b34 <main_device+0xd8>
     b34:	ldr	r0, [sp, #4]
     b38:	and	r0, r0, #255	; 0xff
     b3c:	mov	sp, fp
     b40:	pop	{fp, pc}

00000b44 <flatbuffers_float_vec_len>:
     b44:	push	{fp, lr}
     b48:	mov	fp, sp
     b4c:	sub	sp, sp, #8
     b50:	str	r0, [sp, #4]
     b54:	ldr	r0, [sp, #4]
     b58:	bl	12e8 <flatbuffers_vec_len>
     b5c:	mov	sp, fp
     b60:	pop	{fp, pc}

00000b64 <main_samples>:
     b64:	push	{fp, lr}
     b68:	mov	fp, sp
     b6c:	sub	sp, sp, #32
     b70:	str	r0, [fp, #-8]
     b74:	movw	r0, #0
     b78:	strh	r0, [fp, #-14]
     b7c:	ldr	r0, [fp, #-8]
     b80:	movw	r1, #0
     b84:	cmp	r0, r1
     b88:	beq	b94 <main_samples+0x30>
     b8c:	b	b90 <main_samples+0x2c>
     b90:	b	bb4 <main_samples+0x50>
     b94:	movw	r0, #0
     b98:	movt	r0, #0
     b9c:	movw	r1, #0
     ba0:	movt	r1, #0
     ba4:	movw	r2, #43	; 0x2b
     ba8:	movw	r3, #0
     bac:	movt	r3, #0
     bb0:	bl	0 <__assert_fail>
     bb4:	mov	r0, #2
     bb8:	strh	r0, [sp, #16]
     bbc:	ldr	r0, [fp, #-8]
     bc0:	str	r0, [sp, #8]
     bc4:	bl	11e8 <__flatbuffers_soffset_read_from_pe>
     bc8:	ldr	lr, [sp, #8]
     bcc:	sub	r0, lr, r0
     bd0:	str	r0, [sp, #12]
     bd4:	ldr	r0, [sp, #12]
     bd8:	bl	120c <__flatbuffers_voffset_read_from_pe>
     bdc:	ldrh	lr, [sp, #16]
     be0:	add	lr, lr, #3
     be4:	lsl	lr, lr, #1
     be8:	cmp	r0, lr
     bec:	bcc	c08 <main_samples+0xa4>
     bf0:	ldr	r0, [sp, #12]
     bf4:	ldrh	r1, [sp, #16]
     bf8:	add	r0, r0, r1, lsl #1
     bfc:	add	r0, r0, #4
     c00:	bl	120c <__flatbuffers_voffset_read_from_pe>
     c04:	strh	r0, [fp, #-14]
     c08:	ldrsh	r0, [fp, #-14]
     c0c:	cmp	r0, #0
     c10:	beq	c4c <main_samples+0xe8>
     c14:	ldr	r0, [fp, #-8]
     c18:	ldrh	r1, [fp, #-14]
     c1c:	add	r0, r0, r1
     c20:	str	r0, [fp, #-12]
     c24:	ldr	r0, [fp, #-12]
     c28:	add	r0, r0, #4
     c2c:	ldr	r1, [fp, #-12]
     c30:	str	r0, [sp, #4]
     c34:	mov	r0, r1
     c38:	bl	1164 <__flatbuffers_uoffset_read_from_pe>
     c3c:	ldr	r1, [sp, #4]
     c40:	add	r0, r1, r0
     c44:	str	r0, [fp, #-4]
     c48:	b	c54 <main_samples+0xf0>
     c4c:	movw	r0, #0
     c50:	str	r0, [fp, #-4]
     c54:	ldr	r0, [fp, #-4]
     c58:	mov	sp, fp
     c5c:	pop	{fp, pc}

00000c60 <flatbuffers_float_vec_at>:
     c60:	push	{fp, lr}
     c64:	mov	fp, sp
     c68:	sub	sp, sp, #8
     c6c:	str	r0, [sp, #4]
     c70:	str	r1, [sp]
     c74:	ldr	r0, [sp, #4]
     c78:	bl	12e8 <flatbuffers_vec_len>
     c7c:	ldr	r1, [sp]
     c80:	cmp	r0, r1
     c84:	bls	c90 <flatbuffers_float_vec_at+0x30>
     c88:	b	c8c <flatbuffers_float_vec_at+0x2c>
     c8c:	b	cb0 <flatbuffers_float_vec_at+0x50>
     c90:	movw	r0, #0
     c94:	movt	r0, #0
     c98:	movw	r1, #0
     c9c:	movt	r1, #0
     ca0:	movw	r2, #403	; 0x193
     ca4:	movw	r3, #0
     ca8:	movt	r3, #0
     cac:	bl	0 <__assert_fail>
     cb0:	ldr	r0, [sp, #4]
     cb4:	ldr	r1, [sp]
     cb8:	add	r0, r0, r1, lsl #2
     cbc:	bl	1338 <flatbuffers_float_read_from_pe>
     cc0:	mov	sp, fp
     cc4:	pop	{fp, pc}

00000cc8 <main>:
     cc8:	push	{fp, lr}
     ccc:	mov	fp, sp
     cd0:	sub	sp, sp, #16
     cd4:	movw	r2, #0
     cd8:	str	r2, [fp, #-4]
     cdc:	str	r0, [sp, #8]
     ce0:	str	r1, [sp, #4]
     ce4:	str	r2, [sp]
     ce8:	bl	114 <debug_test>
     cec:	ldr	r1, [sp]
     cf0:	orr	r0, r1, r0
     cf4:	str	r0, [sp]
     cf8:	bl	2cc <emit_test>
     cfc:	ldr	r1, [sp]
     d00:	orr	r0, r1, r0
     d04:	str	r0, [sp]
     d08:	ldr	r0, [sp]
     d0c:	mov	sp, fp
     d10:	pop	{fp, pc}

00000d14 <flatbuffers_buffer_start>:
     d14:	push	{fp, lr}
     d18:	mov	fp, sp
     d1c:	sub	sp, sp, #8
     d20:	str	r0, [sp, #4]
     d24:	str	r1, [sp]
     d28:	ldr	r0, [sp, #4]
     d2c:	ldr	r1, [sp]
     d30:	movw	r2, #0
     d34:	uxth	r2, r2
     d38:	movw	r3, #0
     d3c:	bl	0 <flatcc_builder_start_buffer>
     d40:	mov	sp, fp
     d44:	pop	{fp, pc}

00000d48 <flatbuffers_buffer_end>:
     d48:	push	{fp, lr}
     d4c:	mov	fp, sp
     d50:	sub	sp, sp, #8
     d54:	str	r0, [sp, #4]
     d58:	str	r1, [sp]
     d5c:	ldr	r0, [sp, #4]
     d60:	ldr	r1, [sp]
     d64:	bl	0 <flatcc_builder_end_buffer>
     d68:	mov	sp, fp
     d6c:	pop	{fp, pc}

00000d70 <main_create>:
     d70:	push	{fp, lr}
     d74:	mov	fp, sp
     d78:	sub	sp, sp, #24
     d7c:	ldr	r1, [fp, #12]
     d80:	ldr	ip, [fp, #8]
     d84:	str	r0, [fp, #-8]
     d88:	str	r3, [sp, #12]
     d8c:	str	r2, [sp, #8]
     d90:	strb	ip, [sp, #7]
     d94:	ldr	r0, [fp, #-8]
     d98:	str	r1, [sp]
     d9c:	bl	e0c <main_start>
     da0:	cmp	r0, #0
     da4:	bne	de8 <main_create+0x78>
     da8:	ldr	r0, [fp, #-8]
     dac:	ldr	r2, [sp, #8]
     db0:	ldr	r3, [sp, #12]
     db4:	bl	e30 <main_time_add>
     db8:	cmp	r0, #0
     dbc:	bne	de8 <main_create+0x78>
     dc0:	ldr	r0, [fp, #-8]
     dc4:	ldr	r1, [fp, #12]
     dc8:	bl	ec8 <main_samples_add>
     dcc:	cmp	r0, #0
     dd0:	bne	de8 <main_create+0x78>
     dd4:	ldr	r0, [fp, #-8]
     dd8:	ldrb	r1, [sp, #7]
     ddc:	bl	f34 <main_device_add>
     de0:	cmp	r0, #0
     de4:	beq	df4 <main_create+0x84>
     de8:	movw	r0, #0
     dec:	str	r0, [fp, #-4]
     df0:	b	e00 <main_create+0x90>
     df4:	ldr	r0, [fp, #-8]
     df8:	bl	fbc <main_end>
     dfc:	str	r0, [fp, #-4]
     e00:	ldr	r0, [fp, #-4]
     e04:	mov	sp, fp
     e08:	pop	{fp, pc}

00000e0c <main_start>:
     e0c:	push	{fp, lr}
     e10:	mov	fp, sp
     e14:	sub	sp, sp, #8
     e18:	str	r0, [sp, #4]
     e1c:	ldr	r0, [sp, #4]
     e20:	movw	r1, #3
     e24:	bl	0 <flatcc_builder_start_table>
     e28:	mov	sp, fp
     e2c:	pop	{fp, pc}

00000e30 <main_time_add>:
     e30:	push	{fp, lr}
     e34:	mov	fp, sp
     e38:	sub	sp, sp, #24
     e3c:	str	r0, [fp, #-8]
     e40:	str	r3, [sp, #12]
     e44:	str	r2, [sp, #8]
     e48:	ldr	r0, [sp, #8]
     e4c:	ldr	r2, [sp, #12]
     e50:	orr	r0, r0, r2
     e54:	cmp	r0, #0
     e58:	bne	e6c <main_time_add+0x3c>
     e5c:	b	e60 <main_time_add+0x30>
     e60:	movw	r0, #0
     e64:	str	r0, [fp, #-4]
     e68:	b	ebc <main_time_add+0x8c>
     e6c:	ldr	r0, [fp, #-8]
     e70:	movw	r1, #0
     e74:	movw	r2, #8
     e78:	movw	r3, #8
     e7c:	uxth	r3, r3
     e80:	bl	0 <flatcc_builder_table_add>
     e84:	str	r0, [sp, #4]
     e88:	movw	r1, #0
     e8c:	cmp	r0, r1
     e90:	bne	ea0 <main_time_add+0x70>
     e94:	mvn	r0, #0
     e98:	str	r0, [fp, #-4]
     e9c:	b	ebc <main_time_add+0x8c>
     ea0:	ldr	r0, [sp, #4]
     ea4:	ldr	r2, [sp, #8]
     ea8:	ldr	r3, [sp, #12]
     eac:	bl	101c <flatbuffers_int64_assign_to_pe>
     eb0:	movw	r2, #0
     eb4:	str	r2, [fp, #-4]
     eb8:	str	r0, [sp]
     ebc:	ldr	r0, [fp, #-4]
     ec0:	mov	sp, fp
     ec4:	pop	{fp, pc}

00000ec8 <main_samples_add>:
     ec8:	push	{fp, lr}
     ecc:	mov	fp, sp
     ed0:	sub	sp, sp, #16
     ed4:	str	r0, [fp, #-4]
     ed8:	str	r1, [sp, #8]
     edc:	ldr	r0, [sp, #8]
     ee0:	cmp	r0, #0
     ee4:	beq	f1c <main_samples_add+0x54>
     ee8:	ldr	r0, [fp, #-4]
     eec:	movw	r1, #2
     ef0:	bl	0 <flatcc_builder_table_add_offset>
     ef4:	str	r0, [sp, #4]
     ef8:	movw	r1, #0
     efc:	cmp	r0, r1
     f00:	beq	f1c <main_samples_add+0x54>
     f04:	ldr	r0, [sp, #8]
     f08:	ldr	r1, [sp, #4]
     f0c:	str	r0, [r1]
     f10:	movw	r0, #0
     f14:	str	r0, [sp]
     f18:	b	f28 <main_samples_add+0x60>
     f1c:	mvn	r0, #0
     f20:	str	r0, [sp]
     f24:	b	f28 <main_samples_add+0x60>
     f28:	ldr	r0, [sp]
     f2c:	mov	sp, fp
     f30:	pop	{fp, pc}

00000f34 <main_device_add>:
     f34:	push	{fp, lr}
     f38:	mov	fp, sp
     f3c:	sub	sp, sp, #24
     f40:	str	r0, [fp, #-8]
     f44:	strb	r1, [fp, #-9]
     f48:	ldrb	r0, [fp, #-9]
     f4c:	cmp	r0, #0
     f50:	bne	f60 <main_device_add+0x2c>
     f54:	movw	r0, #0
     f58:	str	r0, [fp, #-4]
     f5c:	b	fb0 <main_device_add+0x7c>
     f60:	ldr	r0, [fp, #-8]
     f64:	movw	r1, #1
     f68:	str	r1, [sp, #4]
     f6c:	ldr	r2, [sp, #4]
     f70:	movw	r3, #1
     f74:	uxth	r3, r3
     f78:	bl	0 <flatcc_builder_table_add>
     f7c:	str	r0, [sp, #8]
     f80:	movw	r1, #0
     f84:	cmp	r0, r1
     f88:	bne	f98 <main_device_add+0x64>
     f8c:	mvn	r0, #0
     f90:	str	r0, [fp, #-4]
     f94:	b	fb0 <main_device_add+0x7c>
     f98:	ldr	r0, [sp, #8]
     f9c:	ldrb	r1, [fp, #-9]
     fa0:	bl	1074 <flatbuffers_uint8_assign_to_pe>
     fa4:	movw	r1, #0
     fa8:	str	r1, [fp, #-4]
     fac:	str	r0, [sp]
     fb0:	ldr	r0, [fp, #-4]
     fb4:	mov	sp, fp
     fb8:	pop	{fp, pc}

00000fbc <main_end>:
     fbc:	push	{fp, lr}
     fc0:	mov	fp, sp
     fc4:	sub	sp, sp, #8
     fc8:	str	r0, [sp, #4]
     fcc:	ldr	r0, [sp, #4]
     fd0:	movw	r1, #0
     fd4:	movt	r1, #0
     fd8:	movw	r2, #0
     fdc:	bl	0 <flatcc_builder_check_required>
     fe0:	cmp	r0, #0
     fe4:	beq	fec <main_end+0x30>
     fe8:	b	100c <main_end+0x50>
     fec:	movw	r0, #0
     ff0:	movt	r0, #0
     ff4:	movw	r1, #0
     ff8:	movt	r1, #0
     ffc:	movw	r2, #21
    1000:	movw	r3, #0
    1004:	movt	r3, #0
    1008:	bl	0 <__assert_fail>
    100c:	ldr	r0, [sp, #4]
    1010:	bl	0 <flatcc_builder_end_table>
    1014:	mov	sp, fp
    1018:	pop	{fp, pc}

0000101c <flatbuffers_int64_assign_to_pe>:
    101c:	push	{fp, lr}
    1020:	mov	fp, sp
    1024:	sub	sp, sp, #16
    1028:	str	r0, [fp, #-4]
    102c:	str	r3, [sp, #4]
    1030:	str	r2, [sp]
    1034:	ldr	r0, [sp]
    1038:	ldr	r1, [sp, #4]
    103c:	bl	1058 <flatbuffers_int64_cast_to_pe>
    1040:	ldr	r2, [fp, #-4]
    1044:	str	r1, [r2, #4]
    1048:	str	r0, [r2]
    104c:	ldr	r0, [fp, #-4]
    1050:	mov	sp, fp
    1054:	pop	{fp, pc}

00001058 <flatbuffers_int64_cast_to_pe>:
    1058:	sub	sp, sp, #8
    105c:	str	r0, [sp]
    1060:	str	r1, [sp, #4]
    1064:	ldr	r0, [sp]
    1068:	ldr	r1, [sp, #4]
    106c:	add	sp, sp, #8
    1070:	bx	lr

00001074 <flatbuffers_uint8_assign_to_pe>:
    1074:	push	{fp, lr}
    1078:	mov	fp, sp
    107c:	sub	sp, sp, #8
    1080:	str	r0, [sp, #4]
    1084:	strb	r1, [sp, #3]
    1088:	ldrb	r0, [sp, #3]
    108c:	bl	10a4 <flatbuffers_uint8_cast_to_pe>
    1090:	ldr	r1, [sp, #4]
    1094:	strb	r0, [r1]
    1098:	ldr	r0, [sp, #4]
    109c:	mov	sp, fp
    10a0:	pop	{fp, pc}

000010a4 <flatbuffers_uint8_cast_to_pe>:
    10a4:	sub	sp, sp, #4
    10a8:	strb	r0, [sp, #3]
    10ac:	ldrb	r0, [sp, #3]
    10b0:	add	sp, sp, #4
    10b4:	bx	lr

000010b8 <flatbuffers_has_identifier>:
    10b8:	push	{fp, lr}
    10bc:	mov	fp, sp
    10c0:	sub	sp, sp, #32
    10c4:	str	r0, [fp, #-8]
    10c8:	str	r1, [fp, #-12]
    10cc:	movw	r0, #0
    10d0:	str	r0, [sp, #12]
    10d4:	ldr	r1, [fp, #-12]
    10d8:	cmp	r1, r0
    10dc:	bne	10ec <flatbuffers_has_identifier+0x34>
    10e0:	movw	r0, #1
    10e4:	str	r0, [fp, #-4]
    10e8:	b	1158 <flatbuffers_has_identifier+0xa0>
    10ec:	add	r0, sp, #12
    10f0:	ldr	r1, [fp, #-12]
    10f4:	movw	r2, #4
    10f8:	bl	0 <strncpy>
    10fc:	ldr	r1, [sp, #12]
    1100:	str	r0, [sp, #8]
    1104:	mov	r0, r1
    1108:	bl	1188 <__flatbuffers_thash_cast_from_le>
    110c:	str	r0, [sp, #12]
    1110:	ldr	r0, [fp, #-8]
    1114:	add	r0, r0, #4
    1118:	bl	119c <__flatbuffers_thash_read_from_pe>
    111c:	str	r0, [sp, #16]
    1120:	ldr	r0, [sp, #12]
    1124:	cmp	r0, #0
    1128:	movw	r0, #1
    112c:	str	r0, [sp, #4]
    1130:	beq	114c <flatbuffers_has_identifier+0x94>
    1134:	ldr	r0, [sp, #16]
    1138:	ldr	r1, [sp, #12]
    113c:	cmp	r0, r1
    1140:	movw	r0, #0
    1144:	moveq	r0, #1
    1148:	str	r0, [sp, #4]
    114c:	ldr	r0, [sp, #4]
    1150:	and	r0, r0, #1
    1154:	str	r0, [fp, #-4]
    1158:	ldr	r0, [fp, #-4]
    115c:	mov	sp, fp
    1160:	pop	{fp, pc}

00001164 <__flatbuffers_uoffset_read_from_pe>:
    1164:	push	{fp, lr}
    1168:	mov	fp, sp
    116c:	sub	sp, sp, #8
    1170:	str	r0, [sp, #4]
    1174:	ldr	r0, [sp, #4]
    1178:	ldr	r0, [r0]
    117c:	bl	11d4 <__flatbuffers_uoffset_cast_from_pe>
    1180:	mov	sp, fp
    1184:	pop	{fp, pc}

00001188 <__flatbuffers_thash_cast_from_le>:
    1188:	sub	sp, sp, #4
    118c:	str	r0, [sp]
    1190:	ldr	r0, [sp]
    1194:	add	sp, sp, #4
    1198:	bx	lr

0000119c <__flatbuffers_thash_read_from_pe>:
    119c:	push	{fp, lr}
    11a0:	mov	fp, sp
    11a4:	sub	sp, sp, #8
    11a8:	str	r0, [sp, #4]
    11ac:	ldr	r0, [sp, #4]
    11b0:	ldr	r0, [r0]
    11b4:	bl	11c0 <__flatbuffers_thash_cast_from_pe>
    11b8:	mov	sp, fp
    11bc:	pop	{fp, pc}

000011c0 <__flatbuffers_thash_cast_from_pe>:
    11c0:	sub	sp, sp, #4
    11c4:	str	r0, [sp]
    11c8:	ldr	r0, [sp]
    11cc:	add	sp, sp, #4
    11d0:	bx	lr

000011d4 <__flatbuffers_uoffset_cast_from_pe>:
    11d4:	sub	sp, sp, #4
    11d8:	str	r0, [sp]
    11dc:	ldr	r0, [sp]
    11e0:	add	sp, sp, #4
    11e4:	bx	lr

000011e8 <__flatbuffers_soffset_read_from_pe>:
    11e8:	push	{fp, lr}
    11ec:	mov	fp, sp
    11f0:	sub	sp, sp, #8
    11f4:	str	r0, [sp, #4]
    11f8:	ldr	r0, [sp, #4]
    11fc:	ldr	r0, [r0]
    1200:	bl	1268 <__flatbuffers_soffset_cast_from_pe>
    1204:	mov	sp, fp
    1208:	pop	{fp, pc}

0000120c <__flatbuffers_voffset_read_from_pe>:
    120c:	push	{fp, lr}
    1210:	mov	fp, sp
    1214:	sub	sp, sp, #8
    1218:	str	r0, [sp, #4]
    121c:	ldr	r0, [sp, #4]
    1220:	ldrh	r0, [r0]
    1224:	bl	127c <__flatbuffers_voffset_cast_from_pe>
    1228:	uxth	r0, r0
    122c:	mov	sp, fp
    1230:	pop	{fp, pc}

00001234 <flatbuffers_int64_read_from_pe>:
    1234:	push	{fp, lr}
    1238:	mov	fp, sp
    123c:	sub	sp, sp, #8
    1240:	str	r0, [sp, #4]
    1244:	ldr	r0, [sp, #4]
    1248:	ldr	r1, [r0]
    124c:	ldr	r0, [r0, #4]
    1250:	str	r0, [sp]
    1254:	mov	r0, r1
    1258:	ldr	r1, [sp]
    125c:	bl	1290 <flatbuffers_int64_cast_from_pe>
    1260:	mov	sp, fp
    1264:	pop	{fp, pc}

00001268 <__flatbuffers_soffset_cast_from_pe>:
    1268:	sub	sp, sp, #4
    126c:	str	r0, [sp]
    1270:	ldr	r0, [sp]
    1274:	add	sp, sp, #4
    1278:	bx	lr

0000127c <__flatbuffers_voffset_cast_from_pe>:
    127c:	sub	sp, sp, #4
    1280:	strh	r0, [sp, #2]
    1284:	ldrh	r0, [sp, #2]
    1288:	add	sp, sp, #4
    128c:	bx	lr

00001290 <flatbuffers_int64_cast_from_pe>:
    1290:	sub	sp, sp, #8
    1294:	str	r0, [sp]
    1298:	str	r1, [sp, #4]
    129c:	ldr	r0, [sp]
    12a0:	ldr	r1, [sp, #4]
    12a4:	add	sp, sp, #8
    12a8:	bx	lr

000012ac <flatbuffers_uint8_read_from_pe>:
    12ac:	push	{fp, lr}
    12b0:	mov	fp, sp
    12b4:	sub	sp, sp, #8
    12b8:	str	r0, [sp, #4]
    12bc:	ldr	r0, [sp, #4]
    12c0:	ldrb	r0, [r0]
    12c4:	bl	12d4 <flatbuffers_uint8_cast_from_pe>
    12c8:	and	r0, r0, #255	; 0xff
    12cc:	mov	sp, fp
    12d0:	pop	{fp, pc}

000012d4 <flatbuffers_uint8_cast_from_pe>:
    12d4:	sub	sp, sp, #4
    12d8:	strb	r0, [sp, #3]
    12dc:	ldrb	r0, [sp, #3]
    12e0:	add	sp, sp, #4
    12e4:	bx	lr

000012e8 <flatbuffers_vec_len>:
    12e8:	push	{fp, lr}
    12ec:	mov	fp, sp
    12f0:	sub	sp, sp, #8
    12f4:	str	r0, [sp, #4]
    12f8:	ldr	r0, [sp, #4]
    12fc:	movw	r1, #0
    1300:	cmp	r0, r1
    1304:	beq	1320 <flatbuffers_vec_len+0x38>
    1308:	ldr	r0, [sp, #4]
    130c:	mvn	r1, #3
    1310:	add	r0, r0, r1
    1314:	bl	1164 <__flatbuffers_uoffset_read_from_pe>
    1318:	str	r0, [sp]
    131c:	b	132c <flatbuffers_vec_len+0x44>
    1320:	movw	r0, #0
    1324:	str	r0, [sp]
    1328:	b	132c <flatbuffers_vec_len+0x44>
    132c:	ldr	r0, [sp]
    1330:	mov	sp, fp
    1334:	pop	{fp, pc}

00001338 <flatbuffers_float_read_from_pe>:
    1338:	push	{fp, lr}
    133c:	mov	fp, sp
    1340:	sub	sp, sp, #8
    1344:	str	r0, [sp, #4]
    1348:	ldr	r0, [sp, #4]
    134c:	vldr	s0, [r0]
    1350:	bl	135c <flatbuffers_float_cast_from_pe>
    1354:	mov	sp, fp
    1358:	pop	{fp, pc}

0000135c <flatbuffers_float_cast_from_pe>:
    135c:	sub	sp, sp, #8
    1360:	vstr	s0, [sp, #4]
    1364:	vldr	s0, [sp, #4]
    1368:	vstr	s0, [sp]
    136c:	ldr	r0, [sp]
    1370:	str	r0, [sp]
    1374:	vldr	s0, [sp]
    1378:	add	sp, sp, #8
    137c:	bx	lr
