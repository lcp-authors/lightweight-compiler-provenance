
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uql.dir/__/__/src/runtime/emitter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <advance_front>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	mov	r4, r0
  18:	ldr	r0, [r4]
  1c:	cmp	r0, #0
  20:	beq	40 <advance_front+0x40>
  24:	ldr	ip, [r4]
  28:	ldr	r2, [ip, #2948]	; 0xb84
  2c:	ldr	r3, [r4, #4]
  30:	cmp	r2, r3
  34:	movne	ip, #1
  38:	moveq	ip, #0
  3c:	b	44 <advance_front+0x44>
  40:	mov	ip, #0
  44:	cmp	ip, #0
  48:	beq	74 <advance_front+0x74>
  4c:	ldr	r2, [r4]
  50:	ldr	r3, [r2, #2948]	; 0xb84
  54:	ldr	r1, [r4]
  58:	ldr	r1, [r1, #2952]	; 0xb88
  5c:	sub	r2, r1, #2944	; 0xb80
  60:	str	r2, [r3, #2952]	; 0xb88
  64:	ldr	ip, [r4]
  68:	ldr	r2, [ip, #2948]	; 0xb84
  6c:	str	r2, [r4]
  70:	b	c8 <advance_front+0xc8>
  74:	movw	r0, #2956	; 0xb8c
  78:	bl	0 <malloc>
  7c:	cmp	r0, #0
  80:	bne	8c <advance_front+0x8c>
  84:	mvn	r0, #0
  88:	b	144 <advance_front+0x144>
  8c:	ldr	r1, [r4, #28]
  90:	add	r1, r1, #2944	; 0xb80
  94:	str	r1, [r4, #28]
  98:	ldr	r2, [r4]
  9c:	cmp	r2, #0
  a0:	beq	fc <advance_front+0xfc>
  a4:	ldr	r1, [r4, #4]
  a8:	str	r1, [r0, #2948]	; 0xb84
  ac:	ldr	r1, [r4]
  b0:	str	r1, [r0, #2944]	; 0xb80
  b4:	ldr	r3, [r4]
  b8:	str	r0, [r3, #2948]	; 0xb84
  bc:	ldr	r1, [r4, #4]
  c0:	str	r0, [r1, #2944]	; 0xb80
  c4:	str	r0, [r4]
  c8:	ldr	r0, [r4]
  cc:	add	r1, r0, #2944	; 0xb80
  d0:	str	r1, [r4, #8]
  d4:	mov	ip, #2944	; 0xb80
  d8:	str	ip, [r4, #12]
  dc:	ldr	r2, [r4]
  e0:	ldr	ip, [r4]
  e4:	ldr	r1, [ip, #2944]	; 0xb80
  e8:	ldr	r1, [r1, #2952]	; 0xb88
  ec:	sub	r3, r1, #2944	; 0xb80
  f0:	str	r3, [r2, #2952]	; 0xb88
  f4:	mov	r0, #0
  f8:	b	144 <advance_front+0x144>
  fc:	str	r0, [r4]
 100:	str	r0, [r4, #4]
 104:	str	r0, [r0, #2944]	; 0xb80
 108:	str	r0, [r0, #2948]	; 0xb84
 10c:	ldr	ip, [r4]
 110:	add	r3, ip, #1472	; 0x5c0
 114:	str	r3, [r4, #8]
 118:	ldr	r3, [r4, #8]
 11c:	str	r3, [r4, #16]
 120:	mov	r2, #1472	; 0x5c0
 124:	str	r2, [r4, #12]
 128:	ldr	ip, [r4, #12]
 12c:	rsb	r3, ip, #2944	; 0xb80
 130:	str	r3, [r4, #20]
 134:	ldr	r1, [r4, #12]
 138:	rsb	r1, r1, #0
 13c:	str	r1, [r0, #2952]	; 0xb88
 140:	mov	r0, #0
 144:	ldr	r4, [sp, #8]
 148:	ldr	lr, [sp, #4]
 14c:	add	sp, sp, #16
 150:	bx	lr

00000154 <advance_back>:
 154:	mov	ip, sp
 158:	sub	sp, sp, #16
 15c:	str	ip, [sp]
 160:	str	lr, [sp, #4]
 164:	str	r4, [sp, #8]
 168:	mov	r4, r0
 16c:	ldr	r3, [r4, #4]
 170:	cmp	r3, #0
 174:	beq	194 <advance_back+0x40>
 178:	ldr	r2, [r4, #4]
 17c:	ldr	r1, [r2, #2944]	; 0xb80
 180:	ldr	r2, [r4]
 184:	cmp	r1, r2
 188:	movne	r1, #1
 18c:	moveq	r1, #0
 190:	b	198 <advance_back+0x44>
 194:	mov	r1, #0
 198:	cmp	r1, #0
 19c:	beq	1b0 <advance_back+0x5c>
 1a0:	ldr	r0, [r4, #4]
 1a4:	ldr	r3, [r0, #2944]	; 0xb80
 1a8:	str	r3, [r4, #4]
 1ac:	b	204 <advance_back+0xb0>
 1b0:	movw	r0, #2956	; 0xb8c
 1b4:	bl	0 <malloc>
 1b8:	cmp	r0, #0
 1bc:	bne	1c8 <advance_back+0x74>
 1c0:	mvn	r0, #0
 1c4:	b	27c <advance_back+0x128>
 1c8:	ldr	ip, [r4, #28]
 1cc:	add	r2, ip, #2944	; 0xb80
 1d0:	str	r2, [r4, #28]
 1d4:	ldr	r1, [r4, #4]
 1d8:	cmp	r1, #0
 1dc:	beq	234 <advance_back+0xe0>
 1e0:	ldr	r3, [r4, #4]
 1e4:	str	r3, [r0, #2948]	; 0xb84
 1e8:	ldr	r2, [r4]
 1ec:	str	r2, [r0, #2944]	; 0xb80
 1f0:	ldr	r3, [r4]
 1f4:	str	r0, [r3, #2948]	; 0xb84
 1f8:	ldr	r3, [r4, #4]
 1fc:	str	r0, [r3, #2944]	; 0xb80
 200:	str	r0, [r4, #4]
 204:	ldr	r1, [r4, #4]
 208:	str	r1, [r4, #16]
 20c:	mov	r1, #2944	; 0xb80
 210:	str	r1, [r4, #20]
 214:	ldr	r1, [r4, #4]
 218:	ldr	r0, [r4, #4]
 21c:	ldr	ip, [r0, #2948]	; 0xb84
 220:	ldr	r3, [ip, #2952]	; 0xb88
 224:	add	r0, r3, #2944	; 0xb80
 228:	str	r0, [r1, #2952]	; 0xb88
 22c:	mov	r0, #0
 230:	b	27c <advance_back+0x128>
 234:	str	r0, [r4]
 238:	str	r0, [r4, #4]
 23c:	str	r0, [r0, #2944]	; 0xb80
 240:	str	r0, [r0, #2948]	; 0xb84
 244:	ldr	ip, [r4]
 248:	add	r1, ip, #1472	; 0x5c0
 24c:	str	r1, [r4, #8]
 250:	ldr	r1, [r4, #8]
 254:	str	r1, [r4, #16]
 258:	mov	r1, #1472	; 0x5c0
 25c:	str	r1, [r4, #12]
 260:	ldr	r2, [r4, #12]
 264:	rsb	ip, r2, #2944	; 0xb80
 268:	str	ip, [r4, #20]
 26c:	ldr	r2, [r4, #12]
 270:	rsb	ip, r2, #0
 274:	str	ip, [r0, #2952]	; 0xb88
 278:	mov	r0, #0
 27c:	ldr	r4, [sp, #8]
 280:	ldr	lr, [sp, #4]
 284:	add	sp, sp, #16
 288:	bx	lr

0000028c <copy_front>:
 28c:	mov	ip, sp
 290:	sub	sp, sp, #24
 294:	str	ip, [sp]
 298:	str	lr, [sp, #4]
 29c:	str	r4, [sp, #8]
 2a0:	str	r5, [sp, #12]
 2a4:	str	r6, [sp, #16]
 2a8:	mov	r6, r2
 2ac:	mov	r4, r0
 2b0:	add	r5, r1, r6
 2b4:	cmp	r6, #0
 2b8:	beq	320 <copy_front+0x94>
 2bc:	mov	r2, r6
 2c0:	ldr	r1, [r4, #12]
 2c4:	cmp	r2, r1
 2c8:	bls	2f0 <copy_front+0x64>
 2cc:	ldr	r2, [r4, #12]
 2d0:	cmp	r2, #0
 2d4:	bne	2f0 <copy_front+0x64>
 2d8:	mov	r0, r4
 2dc:	bl	0 <advance_front>
 2e0:	cmp	r0, #0
 2e4:	beq	2b4 <copy_front+0x28>
 2e8:	mvn	r0, #0
 2ec:	b	324 <copy_front+0x98>
 2f0:	ldr	r0, [r4, #8]
 2f4:	sub	ip, r0, r2
 2f8:	str	ip, [r4, #8]
 2fc:	ldr	r1, [r4, #12]
 300:	sub	r0, r1, r2
 304:	str	r0, [r4, #12]
 308:	sub	r5, r5, r2
 30c:	sub	r6, r6, r2
 310:	ldr	r0, [r4, #8]
 314:	mov	r1, r5
 318:	bl	0 <memcpy>
 31c:	b	2b4 <copy_front+0x28>
 320:	mov	r0, #0
 324:	ldr	r4, [sp, #8]
 328:	ldr	r5, [sp, #12]
 32c:	ldr	r6, [sp, #16]
 330:	ldr	lr, [sp, #4]
 334:	add	sp, sp, #24
 338:	bx	lr

0000033c <copy_back>:
 33c:	mov	ip, sp
 340:	sub	sp, sp, #24
 344:	str	ip, [sp]
 348:	str	lr, [sp, #4]
 34c:	str	r4, [sp, #8]
 350:	str	r5, [sp, #12]
 354:	str	r6, [sp, #16]
 358:	str	r7, [sp, #20]
 35c:	mov	r5, r2
 360:	mov	r6, r1
 364:	mov	r4, r0
 368:	cmp	r5, #0
 36c:	beq	3d8 <copy_back+0x9c>
 370:	mov	r7, r5
 374:	ldr	r1, [r4, #20]
 378:	cmp	r7, r1
 37c:	bls	3a4 <copy_back+0x68>
 380:	ldr	r7, [r4, #20]
 384:	cmp	r7, #0
 388:	bne	3a4 <copy_back+0x68>
 38c:	mov	r0, r4
 390:	bl	154 <advance_back>
 394:	cmp	r0, #0
 398:	beq	368 <copy_back+0x2c>
 39c:	mvn	r0, #0
 3a0:	b	3dc <copy_back+0xa0>
 3a4:	ldr	r0, [r4, #16]
 3a8:	mov	r2, r7
 3ac:	mov	r1, r6
 3b0:	bl	0 <memcpy>
 3b4:	sub	r5, r5, r7
 3b8:	add	r6, r6, r7
 3bc:	ldr	r0, [r4, #16]
 3c0:	add	r3, r0, r7
 3c4:	str	r3, [r4, #16]
 3c8:	ldr	r0, [r4, #20]
 3cc:	sub	r2, r0, r7
 3d0:	str	r2, [r4, #20]
 3d4:	b	368 <copy_back+0x2c>
 3d8:	mov	r0, #0
 3dc:	ldr	r4, [sp, #8]
 3e0:	ldr	r5, [sp, #12]
 3e4:	ldr	r6, [sp, #16]
 3e8:	ldr	r7, [sp, #20]
 3ec:	ldr	lr, [sp, #4]
 3f0:	add	sp, sp, #24
 3f4:	bx	lr

000003f8 <flatcc_emitter_recycle_page>:
 3f8:	mov	ip, sp
 3fc:	sub	sp, sp, #8
 400:	str	ip, [sp]
 404:	str	lr, [sp, #4]
 408:	ldr	r3, [r0]
 40c:	cmp	r1, r3
 410:	beq	428 <flatcc_emitter_recycle_page+0x30>
 414:	ldr	r2, [r0, #4]
 418:	cmp	r1, r2
 41c:	moveq	r3, #1
 420:	movne	r3, #0
 424:	b	42c <flatcc_emitter_recycle_page+0x34>
 428:	mov	r3, #1
 42c:	cmp	r3, #0
 430:	beq	43c <flatcc_emitter_recycle_page+0x44>
 434:	mvn	r0, #0
 438:	b	47c <flatcc_emitter_recycle_page+0x84>
 43c:	ldr	r2, [r1, #2944]	; 0xb80
 440:	ldr	r3, [r1, #2948]	; 0xb84
 444:	str	r3, [r2, #2948]	; 0xb84
 448:	ldr	r2, [r1, #2948]	; 0xb84
 44c:	ldr	ip, [r1, #2944]	; 0xb80
 450:	str	ip, [r2, #2944]	; 0xb80
 454:	ldr	r2, [r0]
 458:	ldr	r2, [r2, #2948]	; 0xb84
 45c:	str	r2, [r1, #2948]	; 0xb84
 460:	ldr	ip, [r0]
 464:	str	ip, [r1, #2944]	; 0xb80
 468:	ldr	r2, [r1, #2948]	; 0xb84
 46c:	str	r1, [r2, #2944]	; 0xb80
 470:	ldr	r0, [r1, #2944]	; 0xb80
 474:	str	r1, [r0, #2948]	; 0xb84
 478:	mov	r0, #0
 47c:	ldr	lr, [sp, #4]
 480:	add	sp, sp, #8
 484:	bx	lr

00000488 <flatcc_emitter_reset>:
 488:	mov	ip, sp
 48c:	sub	sp, sp, #16
 490:	str	ip, [sp]
 494:	str	lr, [sp, #4]
 498:	str	r4, [sp, #8]
 49c:	mov	r4, r0
 4a0:	ldr	r1, [r4]
 4a4:	cmp	r1, #0
 4a8:	beq	58c <flatcc_emitter_reset+0x104>
 4ac:	ldr	r2, [r4]
 4b0:	str	r2, [r4, #4]
 4b4:	ldr	r3, [r4]
 4b8:	add	ip, r3, #1472	; 0x5c0
 4bc:	str	ip, [r4, #8]
 4c0:	ldr	r0, [r4, #8]
 4c4:	str	r0, [r4, #16]
 4c8:	mov	ip, #1472	; 0x5c0
 4cc:	str	ip, [r4, #12]
 4d0:	mov	r2, #1472	; 0x5c0
 4d4:	str	r2, [r4, #20]
 4d8:	ldr	r2, [r4]
 4dc:	ldr	r1, [r4, #12]
 4e0:	rsb	ip, r1, #0
 4e4:	str	ip, [r2, #2952]	; 0xb88
 4e8:	ldr	r1, [r4, #32]
 4ec:	cmp	r1, #0
 4f0:	bne	4fc <flatcc_emitter_reset+0x74>
 4f4:	ldr	r3, [r4, #24]
 4f8:	str	r3, [r4, #32]
 4fc:	ldr	r2, [r4, #24]
 500:	lsr	r0, r2, #2
 504:	ldr	r2, [r4, #32]
 508:	add	ip, r2, r2, lsl #1
 50c:	add	r3, r0, ip, lsr #2
 510:	str	r3, [r4, #32]
 514:	mov	r0, #0
 518:	str	r0, [r4, #24]
 51c:	ldr	r0, [r4, #32]
 520:	lsl	r2, r0, #1
 524:	ldr	r0, [r4, #28]
 528:	cmp	r2, r0
 52c:	bcs	54c <flatcc_emitter_reset+0xc4>
 530:	ldr	r0, [r4, #4]
 534:	ldr	r2, [r0, #2944]	; 0xb80
 538:	ldr	r1, [r4]
 53c:	cmp	r2, r1
 540:	movne	r1, #1
 544:	moveq	r1, #0
 548:	b	550 <flatcc_emitter_reset+0xc8>
 54c:	mov	r1, #0
 550:	cmp	r1, #0
 554:	beq	58c <flatcc_emitter_reset+0x104>
 558:	ldr	r0, [r4, #4]
 55c:	ldr	r0, [r0, #2944]	; 0xb80
 560:	ldr	ip, [r4, #4]
 564:	ldr	r2, [r0, #2944]	; 0xb80
 568:	str	r2, [ip, #2944]	; 0xb80
 56c:	ldr	r3, [r0, #2944]	; 0xb80
 570:	ldr	ip, [r4, #4]
 574:	str	ip, [r3, #2948]	; 0xb84
 578:	bl	0 <free>
 57c:	ldr	ip, [r4, #28]
 580:	sub	r3, ip, #2944	; 0xb80
 584:	str	r3, [r4, #28]
 588:	b	51c <flatcc_emitter_reset+0x94>
 58c:	ldr	r4, [sp, #8]
 590:	ldr	lr, [sp, #4]
 594:	add	sp, sp, #16
 598:	bx	lr

0000059c <flatcc_emitter_clear>:
 59c:	mov	ip, sp
 5a0:	sub	sp, sp, #16
 5a4:	str	ip, [sp]
 5a8:	str	lr, [sp, #4]
 5ac:	str	r4, [sp, #8]
 5b0:	str	r5, [sp, #12]
 5b4:	mov	r4, r0
 5b8:	ldr	r5, [r4]
 5bc:	cmp	r5, #0
 5c0:	beq	604 <flatcc_emitter_clear+0x68>
 5c4:	ldr	r3, [r5, #2948]	; 0xb84
 5c8:	mov	r0, #0
 5cc:	str	r0, [r3, #2944]	; 0xb80
 5d0:	ldr	r2, [r5, #2944]	; 0xb80
 5d4:	cmp	r2, #0
 5d8:	beq	5ec <flatcc_emitter_clear+0x50>
 5dc:	ldr	r5, [r5, #2944]	; 0xb80
 5e0:	ldr	r0, [r5, #2948]	; 0xb84
 5e4:	bl	0 <free>
 5e8:	b	5d0 <flatcc_emitter_clear+0x34>
 5ec:	mov	r0, r5
 5f0:	bl	0 <free>
 5f4:	mov	r1, #0
 5f8:	mov	r2, #36	; 0x24
 5fc:	mov	r0, r4
 600:	bl	0 <memset>
 604:	ldr	r4, [sp, #8]
 608:	ldr	r5, [sp, #12]
 60c:	ldr	lr, [sp, #4]
 610:	add	sp, sp, #16
 614:	bx	lr

00000618 <flatcc_emitter>:
 618:	mov	ip, sp
 61c:	sub	sp, sp, #24
 620:	str	ip, [sp]
 624:	str	lr, [sp, #4]
 628:	str	r4, [sp, #8]
 62c:	str	r5, [sp, #12]
 630:	str	r6, [sp, #16]
 634:	str	r7, [sp, #20]
 638:	mov	r6, r0
 63c:	ldr	r0, [ip]
 640:	mov	r4, r2
 644:	mov	r5, r1
 648:	ldr	ip, [r6, #24]
 64c:	add	ip, ip, r0
 650:	str	ip, [r6, #24]
 654:	cmp	r3, #0
 658:	bge	6c0 <flatcc_emitter+0xa8>
 65c:	ldr	ip, [r6, #12]
 660:	cmp	r0, ip
 664:	bhi	688 <flatcc_emitter+0x70>
 668:	ldr	r1, [r6, #8]
 66c:	sub	r1, r1, r0
 670:	str	r1, [r6, #8]
 674:	ldr	r2, [r6, #12]
 678:	sub	r0, r2, r0
 67c:	str	r0, [r6, #12]
 680:	ldr	r7, [r6, #8]
 684:	b	6e8 <flatcc_emitter+0xd0>
 688:	add	r5, r5, r4, lsl #3
 68c:	mov	r2, r4
 690:	sub	r4, r2, #1
 694:	cmp	r2, #0
 698:	beq	758 <flatcc_emitter+0x140>
 69c:	sub	r5, r5, #8
 6a0:	ldr	r1, [r5]
 6a4:	ldr	r2, [r5, #4]
 6a8:	mov	r0, r6
 6ac:	bl	28c <copy_front>
 6b0:	cmp	r0, #0
 6b4:	beq	68c <flatcc_emitter+0x74>
 6b8:	mvn	r0, #0
 6bc:	b	75c <flatcc_emitter+0x144>
 6c0:	ldr	r3, [r6, #20]
 6c4:	cmp	r0, r3
 6c8:	bhi	720 <flatcc_emitter+0x108>
 6cc:	ldr	r7, [r6, #16]
 6d0:	ldr	ip, [r6, #16]
 6d4:	add	r2, ip, r0
 6d8:	str	r2, [r6, #16]
 6dc:	ldr	r3, [r6, #20]
 6e0:	sub	r1, r3, r0
 6e4:	str	r1, [r6, #20]
 6e8:	mov	r0, r4
 6ec:	sub	r4, r0, #1
 6f0:	cmp	r0, #0
 6f4:	beq	718 <flatcc_emitter+0x100>
 6f8:	ldr	r1, [r5]
 6fc:	ldr	r2, [r5, #4]
 700:	mov	r0, r7
 704:	bl	0 <memcpy>
 708:	ldr	r0, [r5, #4]
 70c:	add	r7, r7, r0
 710:	add	r5, r5, #8
 714:	b	6e8 <flatcc_emitter+0xd0>
 718:	mov	r0, #0
 71c:	b	75c <flatcc_emitter+0x144>
 720:	mov	r1, r4
 724:	sub	r4, r1, #1
 728:	cmp	r1, #0
 72c:	beq	758 <flatcc_emitter+0x140>
 730:	ldr	r1, [r5]
 734:	ldr	r2, [r5, #4]
 738:	mov	r0, r6
 73c:	bl	33c <copy_back>
 740:	cmp	r0, #0
 744:	beq	750 <flatcc_emitter+0x138>
 748:	mvn	r0, #0
 74c:	b	75c <flatcc_emitter+0x144>
 750:	add	r5, r5, #8
 754:	b	720 <flatcc_emitter+0x108>
 758:	mov	r0, #0
 75c:	ldr	r4, [sp, #8]
 760:	ldr	r5, [sp, #12]
 764:	ldr	r6, [sp, #16]
 768:	ldr	r7, [sp, #20]
 76c:	ldr	lr, [sp, #4]
 770:	add	sp, sp, #24
 774:	bx	lr

00000778 <flatcc_emitter_copy_buffer>:
 778:	mov	ip, sp
 77c:	sub	sp, sp, #24
 780:	str	ip, [sp]
 784:	str	lr, [sp, #4]
 788:	str	r4, [sp, #8]
 78c:	str	r5, [sp, #12]
 790:	str	r6, [sp, #16]
 794:	mov	r4, r1
 798:	mov	r5, r0
 79c:	ldr	r3, [r5, #24]
 7a0:	cmp	r2, r3
 7a4:	bcs	7b0 <flatcc_emitter_copy_buffer+0x38>
 7a8:	mov	r4, #0
 7ac:	b	848 <flatcc_emitter_copy_buffer+0xd0>
 7b0:	ldr	ip, [r5]
 7b4:	cmp	ip, #0
 7b8:	bne	7c4 <flatcc_emitter_copy_buffer+0x4c>
 7bc:	mov	r4, #0
 7c0:	b	848 <flatcc_emitter_copy_buffer+0xd0>
 7c4:	ldr	r1, [r5]
 7c8:	ldr	r3, [r5, #4]
 7cc:	cmp	r1, r3
 7d0:	bne	7e8 <flatcc_emitter_copy_buffer+0x70>
 7d4:	ldr	r1, [r5, #8]
 7d8:	ldr	r2, [r5, #24]
 7dc:	mov	r0, r4
 7e0:	bl	0 <memcpy>
 7e4:	b	848 <flatcc_emitter_copy_buffer+0xd0>
 7e8:	ldr	r0, [r5, #12]
 7ec:	rsb	r6, r0, #2944	; 0xb80
 7f0:	ldr	r1, [r5, #8]
 7f4:	mov	r2, r6
 7f8:	mov	r0, r4
 7fc:	bl	0 <memcpy>
 800:	add	r4, r4, r6
 804:	ldr	r1, [r5]
 808:	ldr	r6, [r1, #2944]	; 0xb80
 80c:	ldr	r2, [r5, #4]
 810:	cmp	r6, r2
 814:	beq	834 <flatcc_emitter_copy_buffer+0xbc>
 818:	mov	r2, #2944	; 0xb80
 81c:	mov	r1, r6
 820:	mov	r0, r4
 824:	bl	0 <memcpy>
 828:	add	r4, r4, #2944	; 0xb80
 82c:	ldr	r6, [r6, #2944]	; 0xb80
 830:	b	80c <flatcc_emitter_copy_buffer+0x94>
 834:	ldr	r1, [r5, #20]
 838:	rsb	r2, r1, #2944	; 0xb80
 83c:	mov	r1, r6
 840:	mov	r0, r4
 844:	bl	0 <memcpy>
 848:	mov	r0, r4
 84c:	ldr	r4, [sp, #8]
 850:	ldr	r5, [sp, #12]
 854:	ldr	r6, [sp, #16]
 858:	ldr	lr, [sp, #4]
 85c:	add	sp, sp, #24
 860:	bx	lr
