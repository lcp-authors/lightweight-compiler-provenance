
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-sp3.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ingest_info_cleanup>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #8
      10:	str	r0, [fp, #-8]
      14:	ldr	r3, [fp, #-8]
      18:	ldr	r3, [r3]
      1c:	cmp	r3, #0
      20:	beq	34 <ingest_info_cleanup+0x34>
      24:	ldr	r3, [fp, #-8]
      28:	ldr	r3, [r3]
      2c:	mov	r0, r3
      30:	bl	0 <fclose>
      34:	ldr	r3, [fp, #-8]
      38:	ldr	r3, [r3, #8]
      3c:	cmp	r3, #0
      40:	beq	54 <ingest_info_cleanup+0x54>
      44:	ldr	r3, [fp, #-8]
      48:	ldr	r3, [r3, #8]
      4c:	mov	r0, r3
      50:	bl	0 <coda_dynamic_type_delete>
      54:	ldr	r3, [fp, #-8]
      58:	ldr	r3, [r3, #12]
      5c:	cmp	r3, #0
      60:	beq	74 <ingest_info_cleanup+0x74>
      64:	ldr	r3, [fp, #-8]
      68:	ldr	r3, [r3, #12]
      6c:	mov	r0, r3
      70:	bl	0 <coda_dynamic_type_delete>
      74:	ldr	r3, [fp, #-8]
      78:	ldr	r3, [r3, #16]
      7c:	cmp	r3, #0
      80:	beq	94 <ingest_info_cleanup+0x94>
      84:	ldr	r3, [fp, #-8]
      88:	ldr	r3, [r3, #16]
      8c:	mov	r0, r3
      90:	bl	0 <coda_dynamic_type_delete>
      94:	ldr	r3, [fp, #-8]
      98:	ldr	r3, [r3, #20]
      9c:	cmp	r3, #0
      a0:	beq	b4 <ingest_info_cleanup+0xb4>
      a4:	ldr	r3, [fp, #-8]
      a8:	ldr	r3, [r3, #20]
      ac:	mov	r0, r3
      b0:	bl	0 <coda_dynamic_type_delete>
      b4:	ldr	r3, [fp, #-8]
      b8:	ldr	r3, [r3, #24]
      bc:	cmp	r3, #0
      c0:	beq	d4 <ingest_info_cleanup+0xd4>
      c4:	ldr	r3, [fp, #-8]
      c8:	ldr	r3, [r3, #24]
      cc:	mov	r0, r3
      d0:	bl	0 <coda_dynamic_type_delete>
      d4:	ldr	r3, [fp, #-8]
      d8:	ldr	r3, [r3, #28]
      dc:	cmp	r3, #0
      e0:	beq	f4 <ingest_info_cleanup+0xf4>
      e4:	ldr	r3, [fp, #-8]
      e8:	ldr	r3, [r3, #28]
      ec:	mov	r0, r3
      f0:	bl	0 <coda_dynamic_type_delete>
      f4:	ldr	r3, [fp, #-8]
      f8:	ldr	r3, [r3, #32]
      fc:	cmp	r3, #0
     100:	beq	114 <ingest_info_cleanup+0x114>
     104:	ldr	r3, [fp, #-8]
     108:	ldr	r3, [r3, #32]
     10c:	mov	r0, r3
     110:	bl	0 <coda_dynamic_type_delete>
     114:	ldr	r3, [fp, #-8]
     118:	ldr	r3, [r3, #36]	; 0x24
     11c:	cmp	r3, #0
     120:	beq	134 <ingest_info_cleanup+0x134>
     124:	ldr	r3, [fp, #-8]
     128:	ldr	r3, [r3, #36]	; 0x24
     12c:	mov	r0, r3
     130:	bl	0 <coda_dynamic_type_delete>
     134:	nop	{0}
     138:	sub	sp, fp, #4
     13c:	ldr	fp, [sp]
     140:	add	sp, sp, #4
     144:	pop	{pc}		; (ldr pc, [sp], #4)

00000148 <ingest_info_init>:
     148:	push	{fp}		; (str fp, [sp, #-4]!)
     14c:	add	fp, sp, #0
     150:	sub	sp, sp, #12
     154:	str	r0, [fp, #-8]
     158:	ldr	r3, [fp, #-8]
     15c:	mov	r2, #0
     160:	str	r2, [r3]
     164:	ldr	r3, [fp, #-8]
     168:	mov	r2, #0
     16c:	str	r2, [r3, #8]
     170:	ldr	r3, [fp, #-8]
     174:	mov	r2, #0
     178:	str	r2, [r3, #12]
     17c:	ldr	r3, [fp, #-8]
     180:	mov	r2, #0
     184:	str	r2, [r3, #16]
     188:	ldr	r3, [fp, #-8]
     18c:	mov	r2, #0
     190:	str	r2, [r3, #20]
     194:	ldr	r3, [fp, #-8]
     198:	mov	r2, #0
     19c:	str	r2, [r3, #24]
     1a0:	ldr	r3, [fp, #-8]
     1a4:	mov	r2, #0
     1a8:	str	r2, [r3, #28]
     1ac:	ldr	r3, [fp, #-8]
     1b0:	mov	r2, #0
     1b4:	str	r2, [r3, #32]
     1b8:	ldr	r3, [fp, #-8]
     1bc:	mov	r2, #0
     1c0:	str	r2, [r3, #36]	; 0x24
     1c4:	ldr	r3, [fp, #-8]
     1c8:	mov	r2, #0
     1cc:	str	r2, [r3, #40]	; 0x28
     1d0:	ldr	r3, [fp, #-8]
     1d4:	mov	r2, #0
     1d8:	str	r2, [r3, #48]	; 0x30
     1dc:	ldr	r3, [fp, #-8]
     1e0:	mov	r2, #0
     1e4:	str	r2, [r3, #52]	; 0x34
     1e8:	nop	{0}
     1ec:	add	sp, fp, #0
     1f0:	pop	{fp}		; (ldr fp, [sp], #4)
     1f4:	bx	lr

000001f8 <sp3_init>:
     1f8:	str	r4, [sp, #-12]!
     1fc:	str	fp, [sp, #4]
     200:	str	lr, [sp, #8]
     204:	add	fp, sp, #8
     208:	sub	sp, sp, #28
     20c:	mrc	15, 0, r3, cr13, cr0, {3}
     210:	ldr	r2, [pc, #128]	; 298 <sp3_init+0xa0>
     214:	ldr	r3, [r3, r2]
     218:	cmp	r3, #0
     21c:	beq	228 <sp3_init+0x30>
     220:	mov	r3, #0
     224:	b	4170 <sp3_init+0x3f78>
     228:	mov	r3, #1
     22c:	str	r3, [fp, #-20]	; 0xffffffec
     230:	mov	r0, #300	; 0x12c
     234:	bl	0 <malloc>
     238:	mov	r3, r0
     23c:	mov	r1, r3
     240:	mrc	15, 0, r3, cr13, cr0, {3}
     244:	ldr	r2, [pc, #76]	; 298 <sp3_init+0xa0>
     248:	str	r1, [r3, r2]
     24c:	mrc	15, 0, r3, cr13, cr0, {3}
     250:	ldr	r2, [pc, #64]	; 298 <sp3_init+0xa0>
     254:	ldr	r3, [r3, r2]
     258:	cmp	r3, #0
     25c:	bne	28c <sp3_init+0x94>
     260:	mov	r3, #230	; 0xe6
     264:	str	r3, [sp]
     268:	movw	r3, #0
     26c:	movt	r3, #0
     270:	mov	r2, #300	; 0x12c
     274:	movw	r1, #0
     278:	movt	r1, #0
     27c:	mvn	r0, #0
     280:	bl	0 <coda_set_error>
     284:	mvn	r3, #0
     288:	b	4170 <sp3_init+0x3f78>
     28c:	mov	r3, #0
     290:	str	r3, [fp, #-16]
     294:	b	2c8 <sp3_init+0xd0>
     298:	.word	0x00000000
     29c:	mrc	15, 0, r3, cr13, cr0, {3}
     2a0:	ldr	r2, [pc, #-16]	; 298 <sp3_init+0xa0>
     2a4:	ldr	r2, [r3, r2]
     2a8:	ldr	r3, [fp, #-16]
     2ac:	lsl	r3, r3, #2
     2b0:	add	r3, r2, r3
     2b4:	mov	r2, #0
     2b8:	str	r2, [r3]
     2bc:	ldr	r3, [fp, #-16]
     2c0:	add	r3, r3, #1
     2c4:	str	r3, [fp, #-16]
     2c8:	ldr	r3, [fp, #-16]
     2cc:	cmp	r3, #74	; 0x4a
     2d0:	ble	29c <sp3_init+0xa4>
     2d4:	mrc	15, 0, r3, cr13, cr0, {3}
     2d8:	ldr	r2, [pc, #-72]	; 298 <sp3_init+0xa0>
     2dc:	ldr	r4, [r3, r2]
     2e0:	mov	r0, #9
     2e4:	bl	0 <coda_type_text_new>
     2e8:	mov	r3, r0
     2ec:	str	r3, [r4]
     2f0:	mrc	15, 0, r3, cr13, cr0, {3}
     2f4:	ldr	r2, [pc, #-100]	; 298 <sp3_init+0xa0>
     2f8:	ldr	r3, [r3, r2]
     2fc:	ldr	r1, [r3]
     300:	mov	r2, #1
     304:	mov	r3, #0
     308:	mov	r0, r1
     30c:	bl	0 <coda_type_set_byte_size>
     310:	mrc	15, 0, r3, cr13, cr0, {3}
     314:	ldr	r2, [pc, #-132]	; 298 <sp3_init+0xa0>
     318:	ldr	r3, [r3, r2]
     31c:	ldr	r3, [r3]
     320:	movw	r1, #0
     324:	movt	r1, #0
     328:	mov	r0, r3
     32c:	bl	0 <coda_type_set_description>
     330:	mrc	15, 0, r3, cr13, cr0, {3}
     334:	ldr	r2, [pc, #-164]	; 298 <sp3_init+0xa0>
     338:	ldr	r3, [r3, r2]
     33c:	add	r4, r3, #4
     340:	mov	r0, #9
     344:	bl	0 <coda_type_text_new>
     348:	mov	r3, r0
     34c:	str	r3, [r4]
     350:	mov	r3, #0
     354:	str	r3, [fp, #-28]	; 0xffffffe4
     358:	sub	r3, fp, #28
     35c:	mov	r1, r3
     360:	movw	r0, #0
     364:	movt	r0, #0
     368:	bl	0 <coda_expression_from_string>
     36c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     370:	mrc	15, 0, r3, cr13, cr0, {3}
     374:	ldr	r2, [pc, #-228]	; 298 <sp3_init+0xa0>
     378:	ldr	r3, [r3, r2]
     37c:	add	r4, r3, #8
     380:	mov	r0, #9
     384:	bl	0 <coda_type_time_new>
     388:	mov	r3, r0
     38c:	str	r3, [r4]
     390:	mrc	15, 0, r3, cr13, cr0, {3}
     394:	ldr	r2, [pc, #-260]	; 298 <sp3_init+0xa0>
     398:	ldr	r3, [r3, r2]
     39c:	add	r3, r3, #8
     3a0:	ldr	r0, [r3]
     3a4:	mrc	15, 0, r3, cr13, cr0, {3}
     3a8:	ldr	r2, [pc, #-280]	; 298 <sp3_init+0xa0>
     3ac:	ldr	r3, [r3, r2]
     3b0:	add	r3, r3, #4
     3b4:	ldr	r3, [r3]
     3b8:	mov	r1, r3
     3bc:	bl	0 <coda_type_time_set_base_type>
     3c0:	mrc	15, 0, r3, cr13, cr0, {3}
     3c4:	ldr	r2, [pc, #-308]	; 298 <sp3_init+0xa0>
     3c8:	ldr	r3, [r3, r2]
     3cc:	add	r3, r3, #8
     3d0:	ldr	r3, [r3]
     3d4:	movw	r1, #0
     3d8:	movt	r1, #0
     3dc:	mov	r0, r3
     3e0:	bl	0 <coda_type_set_description>
     3e4:	mrc	15, 0, r3, cr13, cr0, {3}
     3e8:	ldr	r2, [pc, #-344]	; 298 <sp3_init+0xa0>
     3ec:	ldr	r3, [r3, r2]
     3f0:	add	r4, r3, #12
     3f4:	mov	r1, #2
     3f8:	mov	r0, #9
     3fc:	bl	0 <coda_type_number_new>
     400:	mov	r3, r0
     404:	str	r3, [r4]
     408:	mrc	15, 0, r3, cr13, cr0, {3}
     40c:	ldr	r2, [pc, #-380]	; 298 <sp3_init+0xa0>
     410:	ldr	r3, [r3, r2]
     414:	add	r3, r3, #12
     418:	ldr	r3, [r3]
     41c:	ldr	r1, [fp, #-20]	; 0xffffffec
     420:	mov	r0, r3
     424:	bl	0 <coda_type_number_set_endianness>
     428:	mrc	15, 0, r3, cr13, cr0, {3}
     42c:	ldr	r2, [pc, #-412]	; 298 <sp3_init+0xa0>
     430:	ldr	r3, [r3, r2]
     434:	add	r3, r3, #12
     438:	ldr	r3, [r3]
     43c:	mov	r1, #4
     440:	mov	r0, r3
     444:	bl	0 <coda_type_set_read_type>
     448:	mrc	15, 0, r3, cr13, cr0, {3}
     44c:	ldr	r2, [pc, #-444]	; 298 <sp3_init+0xa0>
     450:	ldr	r3, [r3, r2]
     454:	add	r3, r3, #12
     458:	ldr	r1, [r3]
     45c:	mov	r2, #32
     460:	mov	r3, #0
     464:	mov	r0, r1
     468:	bl	0 <coda_type_set_bit_size>
     46c:	mrc	15, 0, r3, cr13, cr0, {3}
     470:	ldr	r2, [pc, #-480]	; 298 <sp3_init+0xa0>
     474:	ldr	r3, [r3, r2]
     478:	add	r3, r3, #12
     47c:	ldr	r3, [r3]
     480:	movw	r1, #0
     484:	movt	r1, #0
     488:	mov	r0, r3
     48c:	bl	0 <coda_type_set_description>
     490:	mrc	15, 0, r3, cr13, cr0, {3}
     494:	ldr	r2, [pc, #-516]	; 298 <sp3_init+0xa0>
     498:	ldr	r3, [r3, r2]
     49c:	add	r4, r3, #16
     4a0:	mov	r0, #9
     4a4:	bl	0 <coda_type_text_new>
     4a8:	mov	r3, r0
     4ac:	str	r3, [r4]
     4b0:	mrc	15, 0, r3, cr13, cr0, {3}
     4b4:	ldr	r2, [pc, #-548]	; 298 <sp3_init+0xa0>
     4b8:	ldr	r3, [r3, r2]
     4bc:	add	r3, r3, #16
     4c0:	ldr	r1, [r3]
     4c4:	mov	r2, #5
     4c8:	mov	r3, #0
     4cc:	mov	r0, r1
     4d0:	bl	0 <coda_type_set_byte_size>
     4d4:	mrc	15, 0, r3, cr13, cr0, {3}
     4d8:	ldr	r2, [pc, #-584]	; 298 <sp3_init+0xa0>
     4dc:	ldr	r3, [r3, r2]
     4e0:	add	r3, r3, #16
     4e4:	ldr	r3, [r3]
     4e8:	movw	r1, #0
     4ec:	movt	r1, #0
     4f0:	mov	r0, r3
     4f4:	bl	0 <coda_type_set_description>
     4f8:	mrc	15, 0, r3, cr13, cr0, {3}
     4fc:	ldr	r2, [pc, #-620]	; 298 <sp3_init+0xa0>
     500:	ldr	r3, [r3, r2]
     504:	add	r4, r3, #20
     508:	mov	r0, #9
     50c:	bl	0 <coda_type_text_new>
     510:	mov	r3, r0
     514:	str	r3, [r4]
     518:	mrc	15, 0, r3, cr13, cr0, {3}
     51c:	ldr	r2, [pc, #-652]	; 298 <sp3_init+0xa0>
     520:	ldr	r3, [r3, r2]
     524:	add	r3, r3, #20
     528:	ldr	r1, [r3]
     52c:	mov	r2, #5
     530:	mov	r3, #0
     534:	mov	r0, r1
     538:	bl	0 <coda_type_set_byte_size>
     53c:	mrc	15, 0, r3, cr13, cr0, {3}
     540:	ldr	r2, [pc, #-688]	; 298 <sp3_init+0xa0>
     544:	ldr	r3, [r3, r2]
     548:	add	r3, r3, #20
     54c:	ldr	r3, [r3]
     550:	movw	r1, #0
     554:	movt	r1, #0
     558:	mov	r0, r3
     55c:	bl	0 <coda_type_set_description>
     560:	mrc	15, 0, r3, cr13, cr0, {3}
     564:	ldr	r2, [pc, #-724]	; 298 <sp3_init+0xa0>
     568:	ldr	r3, [r3, r2]
     56c:	add	r4, r3, #24
     570:	mov	r0, #9
     574:	bl	0 <coda_type_text_new>
     578:	mov	r3, r0
     57c:	str	r3, [r4]
     580:	mrc	15, 0, r3, cr13, cr0, {3}
     584:	ldr	r2, [pc, #-756]	; 298 <sp3_init+0xa0>
     588:	ldr	r3, [r3, r2]
     58c:	add	r3, r3, #24
     590:	ldr	r1, [r3]
     594:	mov	r2, #3
     598:	mov	r3, #0
     59c:	mov	r0, r1
     5a0:	bl	0 <coda_type_set_byte_size>
     5a4:	mrc	15, 0, r3, cr13, cr0, {3}
     5a8:	ldr	r2, [pc, #-792]	; 298 <sp3_init+0xa0>
     5ac:	ldr	r3, [r3, r2]
     5b0:	add	r3, r3, #24
     5b4:	ldr	r3, [r3]
     5b8:	movw	r1, #0
     5bc:	movt	r1, #0
     5c0:	mov	r0, r3
     5c4:	bl	0 <coda_type_set_description>
     5c8:	mrc	15, 0, r3, cr13, cr0, {3}
     5cc:	ldr	r2, [pc, #-828]	; 298 <sp3_init+0xa0>
     5d0:	ldr	r3, [r3, r2]
     5d4:	add	r4, r3, #28
     5d8:	mov	r0, #9
     5dc:	bl	0 <coda_type_text_new>
     5e0:	mov	r3, r0
     5e4:	str	r3, [r4]
     5e8:	mrc	15, 0, r3, cr13, cr0, {3}
     5ec:	ldr	r2, [pc, #-860]	; 298 <sp3_init+0xa0>
     5f0:	ldr	r3, [r3, r2]
     5f4:	add	r3, r3, #28
     5f8:	ldr	r1, [r3]
     5fc:	mov	r2, #4
     600:	mov	r3, #0
     604:	mov	r0, r1
     608:	bl	0 <coda_type_set_byte_size>
     60c:	mrc	15, 0, r3, cr13, cr0, {3}
     610:	ldr	r2, [pc, #-896]	; 298 <sp3_init+0xa0>
     614:	ldr	r3, [r3, r2]
     618:	add	r3, r3, #28
     61c:	ldr	r3, [r3]
     620:	movw	r1, #0
     624:	movt	r1, #0
     628:	mov	r0, r3
     62c:	bl	0 <coda_type_set_description>
     630:	mrc	15, 0, r3, cr13, cr0, {3}
     634:	ldr	r2, [pc, #-932]	; 298 <sp3_init+0xa0>
     638:	ldr	r3, [r3, r2]
     63c:	add	r4, r3, #32
     640:	mov	r1, #2
     644:	mov	r0, #9
     648:	bl	0 <coda_type_number_new>
     64c:	mov	r3, r0
     650:	str	r3, [r4]
     654:	mrc	15, 0, r3, cr13, cr0, {3}
     658:	ldr	r2, [pc, #-968]	; 298 <sp3_init+0xa0>
     65c:	ldr	r3, [r3, r2]
     660:	add	r3, r3, #32
     664:	ldr	r3, [r3]
     668:	ldr	r1, [fp, #-20]	; 0xffffffec
     66c:	mov	r0, r3
     670:	bl	0 <coda_type_number_set_endianness>
     674:	mrc	15, 0, r3, cr13, cr0, {3}
     678:	ldr	r2, [pc, #-1000]	; 298 <sp3_init+0xa0>
     67c:	ldr	r3, [r3, r2]
     680:	add	r3, r3, #32
     684:	ldr	r3, [r3]
     688:	mov	r1, #2
     68c:	mov	r0, r3
     690:	bl	0 <coda_type_set_read_type>
     694:	mrc	15, 0, r3, cr13, cr0, {3}
     698:	ldr	r2, [pc, #-1032]	; 298 <sp3_init+0xa0>
     69c:	ldr	r3, [r3, r2]
     6a0:	add	r3, r3, #32
     6a4:	ldr	r1, [r3]
     6a8:	mov	r2, #16
     6ac:	mov	r3, #0
     6b0:	mov	r0, r1
     6b4:	bl	0 <coda_type_set_bit_size>
     6b8:	mrc	15, 0, r3, cr13, cr0, {3}
     6bc:	ldr	r2, [pc, #-1068]	; 298 <sp3_init+0xa0>
     6c0:	ldr	r3, [r3, r2]
     6c4:	add	r3, r3, #32
     6c8:	ldr	r3, [r3]
     6cc:	movw	r1, #0
     6d0:	movt	r1, #0
     6d4:	mov	r0, r3
     6d8:	bl	0 <coda_type_set_description>
     6dc:	mrc	15, 0, r3, cr13, cr0, {3}
     6e0:	ldr	r2, [pc, #-1104]	; 298 <sp3_init+0xa0>
     6e4:	ldr	r3, [r3, r2]
     6e8:	add	r4, r3, #36	; 0x24
     6ec:	mov	r1, #3
     6f0:	mov	r0, #9
     6f4:	bl	0 <coda_type_number_new>
     6f8:	mov	r3, r0
     6fc:	str	r3, [r4]
     700:	mrc	15, 0, r3, cr13, cr0, {3}
     704:	ldr	r2, [pc, #-1140]	; 298 <sp3_init+0xa0>
     708:	ldr	r3, [r3, r2]
     70c:	add	r3, r3, #36	; 0x24
     710:	ldr	r3, [r3]
     714:	ldr	r1, [fp, #-20]	; 0xffffffec
     718:	mov	r0, r3
     71c:	bl	0 <coda_type_number_set_endianness>
     720:	mrc	15, 0, r3, cr13, cr0, {3}
     724:	ldr	r2, [pc, #-1172]	; 298 <sp3_init+0xa0>
     728:	ldr	r3, [r3, r2]
     72c:	add	r3, r3, #36	; 0x24
     730:	ldr	r1, [r3]
     734:	mov	r2, #64	; 0x40
     738:	mov	r3, #0
     73c:	mov	r0, r1
     740:	bl	0 <coda_type_set_bit_size>
     744:	mrc	15, 0, r3, cr13, cr0, {3}
     748:	ldr	r2, [pc, #-1208]	; 298 <sp3_init+0xa0>
     74c:	ldr	r3, [r3, r2]
     750:	add	r3, r3, #36	; 0x24
     754:	ldr	r3, [r3]
     758:	movw	r1, #0
     75c:	movt	r1, #0
     760:	mov	r0, r3
     764:	bl	0 <coda_type_set_description>
     768:	mrc	15, 0, r3, cr13, cr0, {3}
     76c:	ldr	r2, [pc, #-1244]	; 298 <sp3_init+0xa0>
     770:	ldr	r3, [r3, r2]
     774:	add	r4, r3, #40	; 0x28
     778:	mov	r1, #3
     77c:	mov	r0, #9
     780:	bl	0 <coda_type_number_new>
     784:	mov	r3, r0
     788:	str	r3, [r4]
     78c:	mrc	15, 0, r3, cr13, cr0, {3}
     790:	ldr	r2, [pc, #-1280]	; 298 <sp3_init+0xa0>
     794:	ldr	r3, [r3, r2]
     798:	add	r3, r3, #40	; 0x28
     79c:	ldr	r3, [r3]
     7a0:	ldr	r1, [fp, #-20]	; 0xffffffec
     7a4:	mov	r0, r3
     7a8:	bl	0 <coda_type_number_set_endianness>
     7ac:	mrc	15, 0, r3, cr13, cr0, {3}
     7b0:	ldr	r2, [pc, #-1312]	; 298 <sp3_init+0xa0>
     7b4:	ldr	r3, [r3, r2]
     7b8:	add	r3, r3, #40	; 0x28
     7bc:	ldr	r1, [r3]
     7c0:	mov	r2, #64	; 0x40
     7c4:	mov	r3, #0
     7c8:	mov	r0, r1
     7cc:	bl	0 <coda_type_set_bit_size>
     7d0:	mrc	15, 0, r3, cr13, cr0, {3}
     7d4:	ldr	r2, [pc, #-1348]	; 298 <sp3_init+0xa0>
     7d8:	ldr	r3, [r3, r2]
     7dc:	add	r3, r3, #40	; 0x28
     7e0:	ldr	r3, [r3]
     7e4:	movw	r1, #0
     7e8:	movt	r1, #0
     7ec:	mov	r0, r3
     7f0:	bl	0 <coda_type_set_description>
     7f4:	mrc	15, 0, r3, cr13, cr0, {3}
     7f8:	ldr	r2, [pc, #-1384]	; 298 <sp3_init+0xa0>
     7fc:	ldr	r3, [r3, r2]
     800:	add	r4, r3, #44	; 0x2c
     804:	mov	r1, #2
     808:	mov	r0, #9
     80c:	bl	0 <coda_type_number_new>
     810:	mov	r3, r0
     814:	str	r3, [r4]
     818:	mrc	15, 0, r3, cr13, cr0, {3}
     81c:	ldr	r2, [pc, #-1420]	; 298 <sp3_init+0xa0>
     820:	ldr	r3, [r3, r2]
     824:	add	r3, r3, #44	; 0x2c
     828:	ldr	r3, [r3]
     82c:	ldr	r1, [fp, #-20]	; 0xffffffec
     830:	mov	r0, r3
     834:	bl	0 <coda_type_number_set_endianness>
     838:	mrc	15, 0, r3, cr13, cr0, {3}
     83c:	ldr	r2, [pc, #-1452]	; 298 <sp3_init+0xa0>
     840:	ldr	r3, [r3, r2]
     844:	add	r3, r3, #44	; 0x2c
     848:	ldr	r3, [r3]
     84c:	mov	r1, #4
     850:	mov	r0, r3
     854:	bl	0 <coda_type_set_read_type>
     858:	mrc	15, 0, r3, cr13, cr0, {3}
     85c:	ldr	r2, [pc, #-1484]	; 298 <sp3_init+0xa0>
     860:	ldr	r3, [r3, r2]
     864:	add	r3, r3, #44	; 0x2c
     868:	ldr	r1, [r3]
     86c:	mov	r2, #32
     870:	mov	r3, #0
     874:	mov	r0, r1
     878:	bl	0 <coda_type_set_bit_size>
     87c:	mrc	15, 0, r3, cr13, cr0, {3}
     880:	ldr	r2, [pc, #-1520]	; 298 <sp3_init+0xa0>
     884:	ldr	r3, [r3, r2]
     888:	add	r3, r3, #44	; 0x2c
     88c:	ldr	r3, [r3]
     890:	movw	r1, #0
     894:	movt	r1, #0
     898:	mov	r0, r3
     89c:	bl	0 <coda_type_set_description>
     8a0:	mrc	15, 0, r3, cr13, cr0, {3}
     8a4:	ldr	r2, [pc, #-1556]	; 298 <sp3_init+0xa0>
     8a8:	ldr	r3, [r3, r2]
     8ac:	add	r4, r3, #48	; 0x30
     8b0:	mov	r1, #3
     8b4:	mov	r0, #9
     8b8:	bl	0 <coda_type_number_new>
     8bc:	mov	r3, r0
     8c0:	str	r3, [r4]
     8c4:	mrc	15, 0, r3, cr13, cr0, {3}
     8c8:	ldr	r2, [pc, #-1592]	; 298 <sp3_init+0xa0>
     8cc:	ldr	r3, [r3, r2]
     8d0:	add	r3, r3, #48	; 0x30
     8d4:	ldr	r3, [r3]
     8d8:	ldr	r1, [fp, #-20]	; 0xffffffec
     8dc:	mov	r0, r3
     8e0:	bl	0 <coda_type_number_set_endianness>
     8e4:	mrc	15, 0, r3, cr13, cr0, {3}
     8e8:	ldr	r2, [pc, #-1624]	; 298 <sp3_init+0xa0>
     8ec:	ldr	r3, [r3, r2]
     8f0:	add	r3, r3, #48	; 0x30
     8f4:	ldr	r1, [r3]
     8f8:	mov	r2, #64	; 0x40
     8fc:	mov	r3, #0
     900:	mov	r0, r1
     904:	bl	0 <coda_type_set_bit_size>
     908:	mrc	15, 0, r3, cr13, cr0, {3}
     90c:	ldr	r2, [pc, #-1660]	; 298 <sp3_init+0xa0>
     910:	ldr	r3, [r3, r2]
     914:	add	r3, r3, #48	; 0x30
     918:	ldr	r3, [r3]
     91c:	movw	r1, #0
     920:	movt	r1, #0
     924:	mov	r0, r3
     928:	bl	0 <coda_type_set_description>
     92c:	mrc	15, 0, r3, cr13, cr0, {3}
     930:	ldr	r2, [pc, #-1696]	; 298 <sp3_init+0xa0>
     934:	ldr	r3, [r3, r2]
     938:	add	r4, r3, #52	; 0x34
     93c:	mov	r1, #2
     940:	mov	r0, #9
     944:	bl	0 <coda_type_number_new>
     948:	mov	r3, r0
     94c:	str	r3, [r4]
     950:	mrc	15, 0, r3, cr13, cr0, {3}
     954:	ldr	r2, [pc, #-1732]	; 298 <sp3_init+0xa0>
     958:	ldr	r3, [r3, r2]
     95c:	add	r3, r3, #52	; 0x34
     960:	ldr	r3, [r3]
     964:	ldr	r1, [fp, #-20]	; 0xffffffec
     968:	mov	r0, r3
     96c:	bl	0 <coda_type_number_set_endianness>
     970:	mrc	15, 0, r3, cr13, cr0, {3}
     974:	ldr	r2, [pc, #-1764]	; 298 <sp3_init+0xa0>
     978:	ldr	r3, [r3, r2]
     97c:	add	r3, r3, #52	; 0x34
     980:	ldr	r3, [r3]
     984:	mov	r1, #1
     988:	mov	r0, r3
     98c:	bl	0 <coda_type_set_read_type>
     990:	mrc	15, 0, r3, cr13, cr0, {3}
     994:	ldr	r2, [pc, #-1796]	; 298 <sp3_init+0xa0>
     998:	ldr	r3, [r3, r2]
     99c:	add	r3, r3, #52	; 0x34
     9a0:	ldr	r1, [r3]
     9a4:	mov	r2, #8
     9a8:	mov	r3, #0
     9ac:	mov	r0, r1
     9b0:	bl	0 <coda_type_set_bit_size>
     9b4:	mrc	15, 0, r3, cr13, cr0, {3}
     9b8:	ldr	r2, [pc, #-1832]	; 298 <sp3_init+0xa0>
     9bc:	ldr	r3, [r3, r2]
     9c0:	add	r3, r3, #52	; 0x34
     9c4:	ldr	r3, [r3]
     9c8:	movw	r1, #0
     9cc:	movt	r1, #0
     9d0:	mov	r0, r3
     9d4:	bl	0 <coda_type_set_description>
     9d8:	mrc	15, 0, r3, cr13, cr0, {3}
     9dc:	ldr	r2, [pc, #-1868]	; 298 <sp3_init+0xa0>
     9e0:	ldr	r3, [r3, r2]
     9e4:	add	r4, r3, #56	; 0x38
     9e8:	mov	r0, #9
     9ec:	bl	0 <coda_type_text_new>
     9f0:	mov	r3, r0
     9f4:	str	r3, [r4]
     9f8:	mrc	15, 0, r3, cr13, cr0, {3}
     9fc:	ldr	r2, [pc, #-1900]	; 298 <sp3_init+0xa0>
     a00:	ldr	r3, [r3, r2]
     a04:	add	r3, r3, #56	; 0x38
     a08:	ldr	r1, [r3]
     a0c:	mov	r2, #3
     a10:	mov	r3, #0
     a14:	mov	r0, r1
     a18:	bl	0 <coda_type_set_byte_size>
     a1c:	mrc	15, 0, r3, cr13, cr0, {3}
     a20:	ldr	r2, [pc, #-1936]	; 298 <sp3_init+0xa0>
     a24:	ldr	r3, [r3, r2]
     a28:	add	r3, r3, #56	; 0x38
     a2c:	ldr	r3, [r3]
     a30:	movw	r1, #0
     a34:	movt	r1, #0
     a38:	mov	r0, r3
     a3c:	bl	0 <coda_type_set_description>
     a40:	mrc	15, 0, r3, cr13, cr0, {3}
     a44:	ldr	r2, [pc, #-1972]	; 298 <sp3_init+0xa0>
     a48:	ldr	r3, [r3, r2]
     a4c:	add	r4, r3, #64	; 0x40
     a50:	mov	r1, #2
     a54:	mov	r0, #9
     a58:	bl	0 <coda_type_number_new>
     a5c:	mov	r3, r0
     a60:	str	r3, [r4]
     a64:	mrc	15, 0, r3, cr13, cr0, {3}
     a68:	ldr	r2, [pc, #-2008]	; 298 <sp3_init+0xa0>
     a6c:	ldr	r3, [r3, r2]
     a70:	add	r3, r3, #64	; 0x40
     a74:	ldr	r3, [r3]
     a78:	ldr	r1, [fp, #-20]	; 0xffffffec
     a7c:	mov	r0, r3
     a80:	bl	0 <coda_type_number_set_endianness>
     a84:	mrc	15, 0, r3, cr13, cr0, {3}
     a88:	ldr	r2, [pc, #-2040]	; 298 <sp3_init+0xa0>
     a8c:	ldr	r3, [r3, r2]
     a90:	add	r3, r3, #64	; 0x40
     a94:	ldr	r3, [r3]
     a98:	mov	r1, #2
     a9c:	mov	r0, r3
     aa0:	bl	0 <coda_type_set_read_type>
     aa4:	mrc	15, 0, r3, cr13, cr0, {3}
     aa8:	ldr	r2, [pc, #-2072]	; 298 <sp3_init+0xa0>
     aac:	ldr	r3, [r3, r2]
     ab0:	add	r3, r3, #64	; 0x40
     ab4:	ldr	r1, [r3]
     ab8:	mov	r2, #16
     abc:	mov	r3, #0
     ac0:	mov	r0, r1
     ac4:	bl	0 <coda_type_set_bit_size>
     ac8:	mrc	15, 0, r3, cr13, cr0, {3}
     acc:	ldr	r2, [pc, #-2108]	; 298 <sp3_init+0xa0>
     ad0:	ldr	r3, [r3, r2]
     ad4:	add	r3, r3, #64	; 0x40
     ad8:	ldr	r3, [r3]
     adc:	movw	r1, #0
     ae0:	movt	r1, #0
     ae4:	mov	r0, r3
     ae8:	bl	0 <coda_type_set_description>
     aec:	mrc	15, 0, r3, cr13, cr0, {3}
     af0:	ldr	r2, [pc, #-2144]	; 298 <sp3_init+0xa0>
     af4:	ldr	r3, [r3, r2]
     af8:	add	r4, r3, #72	; 0x48
     afc:	mov	r0, #9
     b00:	bl	0 <coda_type_text_new>
     b04:	mov	r3, r0
     b08:	str	r3, [r4]
     b0c:	mrc	15, 0, r3, cr13, cr0, {3}
     b10:	ldr	r2, [pc, #-2176]	; 298 <sp3_init+0xa0>
     b14:	ldr	r3, [r3, r2]
     b18:	add	r3, r3, #72	; 0x48
     b1c:	ldr	r1, [r3]
     b20:	mov	r2, #2
     b24:	mov	r3, #0
     b28:	mov	r0, r1
     b2c:	bl	0 <coda_type_set_byte_size>
     b30:	mrc	15, 0, r3, cr13, cr0, {3}
     b34:	ldr	r2, [pc, #-2212]	; 298 <sp3_init+0xa0>
     b38:	ldr	r3, [r3, r2]
     b3c:	add	r3, r3, #72	; 0x48
     b40:	ldr	r3, [r3]
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	mov	r0, r3
     b50:	bl	0 <coda_type_set_description>
     b54:	mrc	15, 0, r3, cr13, cr0, {3}
     b58:	ldr	r2, [pc, #-2248]	; 298 <sp3_init+0xa0>
     b5c:	ldr	r3, [r3, r2]
     b60:	add	r4, r3, #76	; 0x4c
     b64:	mov	r0, #9
     b68:	bl	0 <coda_type_text_new>
     b6c:	mov	r3, r0
     b70:	str	r3, [r4]
     b74:	mrc	15, 0, r3, cr13, cr0, {3}
     b78:	ldr	r2, [pc, #-2280]	; 298 <sp3_init+0xa0>
     b7c:	ldr	r3, [r3, r2]
     b80:	add	r3, r3, #76	; 0x4c
     b84:	ldr	r1, [r3]
     b88:	mov	r2, #3
     b8c:	mov	r3, #0
     b90:	mov	r0, r1
     b94:	bl	0 <coda_type_set_byte_size>
     b98:	mrc	15, 0, r3, cr13, cr0, {3}
     b9c:	ldr	r2, [pc, #-2316]	; 298 <sp3_init+0xa0>
     ba0:	ldr	r3, [r3, r2]
     ba4:	add	r3, r3, #76	; 0x4c
     ba8:	ldr	r3, [r3]
     bac:	movw	r1, #0
     bb0:	movt	r1, #0
     bb4:	mov	r0, r3
     bb8:	bl	0 <coda_type_set_description>
     bbc:	mrc	15, 0, r3, cr13, cr0, {3}
     bc0:	ldr	r2, [pc, #-2352]	; 298 <sp3_init+0xa0>
     bc4:	ldr	r3, [r3, r2]
     bc8:	add	r4, r3, #80	; 0x50
     bcc:	mov	r1, #3
     bd0:	mov	r0, #9
     bd4:	bl	0 <coda_type_number_new>
     bd8:	mov	r3, r0
     bdc:	str	r3, [r4]
     be0:	mrc	15, 0, r3, cr13, cr0, {3}
     be4:	ldr	r2, [pc, #-2388]	; 298 <sp3_init+0xa0>
     be8:	ldr	r3, [r3, r2]
     bec:	add	r3, r3, #80	; 0x50
     bf0:	ldr	r3, [r3]
     bf4:	ldr	r1, [fp, #-20]	; 0xffffffec
     bf8:	mov	r0, r3
     bfc:	bl	0 <coda_type_number_set_endianness>
     c00:	mrc	15, 0, r3, cr13, cr0, {3}
     c04:	ldr	r2, [pc, #-2420]	; 298 <sp3_init+0xa0>
     c08:	ldr	r3, [r3, r2]
     c0c:	add	r3, r3, #80	; 0x50
     c10:	ldr	r1, [r3]
     c14:	mov	r2, #64	; 0x40
     c18:	mov	r3, #0
     c1c:	mov	r0, r1
     c20:	bl	0 <coda_type_set_bit_size>
     c24:	mrc	15, 0, r3, cr13, cr0, {3}
     c28:	ldr	r2, [pc, #-2456]	; 298 <sp3_init+0xa0>
     c2c:	ldr	r3, [r3, r2]
     c30:	add	r3, r3, #80	; 0x50
     c34:	ldr	r3, [r3]
     c38:	movw	r1, #0
     c3c:	movt	r1, #0
     c40:	mov	r0, r3
     c44:	bl	0 <coda_type_set_description>
     c48:	mrc	15, 0, r3, cr13, cr0, {3}
     c4c:	ldr	r2, [pc, #-2492]	; 298 <sp3_init+0xa0>
     c50:	ldr	r3, [r3, r2]
     c54:	add	r4, r3, #84	; 0x54
     c58:	mov	r1, #3
     c5c:	mov	r0, #9
     c60:	bl	0 <coda_type_number_new>
     c64:	mov	r3, r0
     c68:	str	r3, [r4]
     c6c:	mrc	15, 0, r3, cr13, cr0, {3}
     c70:	ldr	r2, [pc, #-2528]	; 298 <sp3_init+0xa0>
     c74:	ldr	r3, [r3, r2]
     c78:	add	r3, r3, #84	; 0x54
     c7c:	ldr	r3, [r3]
     c80:	ldr	r1, [fp, #-20]	; 0xffffffec
     c84:	mov	r0, r3
     c88:	bl	0 <coda_type_number_set_endianness>
     c8c:	mrc	15, 0, r3, cr13, cr0, {3}
     c90:	ldr	r2, [pc, #-2560]	; 298 <sp3_init+0xa0>
     c94:	ldr	r3, [r3, r2]
     c98:	add	r3, r3, #84	; 0x54
     c9c:	ldr	r1, [r3]
     ca0:	mov	r2, #64	; 0x40
     ca4:	mov	r3, #0
     ca8:	mov	r0, r1
     cac:	bl	0 <coda_type_set_bit_size>
     cb0:	mrc	15, 0, r3, cr13, cr0, {3}
     cb4:	ldr	r2, [pc, #-2596]	; 298 <sp3_init+0xa0>
     cb8:	ldr	r3, [r3, r2]
     cbc:	add	r3, r3, #84	; 0x54
     cc0:	ldr	r3, [r3]
     cc4:	movw	r1, #0
     cc8:	movt	r1, #0
     ccc:	mov	r0, r3
     cd0:	bl	0 <coda_type_set_description>
     cd4:	mrc	15, 0, r3, cr13, cr0, {3}
     cd8:	ldr	r2, [pc, #-2632]	; 298 <sp3_init+0xa0>
     cdc:	ldr	r3, [r3, r2]
     ce0:	add	r4, r3, #260	; 0x104
     ce4:	mov	r0, #9
     ce8:	bl	0 <coda_type_text_new>
     cec:	mov	r3, r0
     cf0:	str	r3, [r4]
     cf4:	mov	r3, #0
     cf8:	str	r3, [fp, #-28]	; 0xffffffe4
     cfc:	sub	r3, fp, #28
     d00:	mov	r1, r3
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	bl	0 <coda_expression_from_string>
     d10:	ldr	r1, [fp, #-28]	; 0xffffffe4
     d14:	mrc	15, 0, r3, cr13, cr0, {3}
     d18:	ldr	r2, [pc, #-2696]	; 298 <sp3_init+0xa0>
     d1c:	ldr	r3, [r3, r2]
     d20:	add	r4, r3, #264	; 0x108
     d24:	mov	r0, #9
     d28:	bl	0 <coda_type_time_new>
     d2c:	mov	r3, r0
     d30:	str	r3, [r4]
     d34:	mrc	15, 0, r3, cr13, cr0, {3}
     d38:	ldr	r2, [pc, #-2728]	; 298 <sp3_init+0xa0>
     d3c:	ldr	r3, [r3, r2]
     d40:	add	r3, r3, #264	; 0x108
     d44:	ldr	r0, [r3]
     d48:	mrc	15, 0, r3, cr13, cr0, {3}
     d4c:	ldr	r2, [pc, #-2748]	; 298 <sp3_init+0xa0>
     d50:	ldr	r3, [r3, r2]
     d54:	add	r3, r3, #260	; 0x104
     d58:	ldr	r3, [r3]
     d5c:	mov	r1, r3
     d60:	bl	0 <coda_type_time_set_base_type>
     d64:	mrc	15, 0, r3, cr13, cr0, {3}
     d68:	ldr	r2, [pc, #-2776]	; 298 <sp3_init+0xa0>
     d6c:	ldr	r3, [r3, r2]
     d70:	add	r3, r3, #264	; 0x108
     d74:	ldr	r3, [r3]
     d78:	movw	r1, #0
     d7c:	movt	r1, #0
     d80:	mov	r0, r3
     d84:	bl	0 <coda_type_set_description>
     d88:	mrc	15, 0, r3, cr13, cr0, {3}
     d8c:	ldr	r2, [pc, #-2812]	; 298 <sp3_init+0xa0>
     d90:	ldr	r3, [r3, r2]
     d94:	add	r4, r3, #88	; 0x58
     d98:	mov	r0, #9
     d9c:	bl	0 <coda_type_text_new>
     da0:	mov	r3, r0
     da4:	str	r3, [r4]
     da8:	mrc	15, 0, r3, cr13, cr0, {3}
     dac:	ldr	r2, [pc, #-2844]	; 298 <sp3_init+0xa0>
     db0:	ldr	r3, [r3, r2]
     db4:	add	r3, r3, #88	; 0x58
     db8:	ldr	r1, [r3]
     dbc:	mov	r2, #3
     dc0:	mov	r3, #0
     dc4:	mov	r0, r1
     dc8:	bl	0 <coda_type_set_byte_size>
     dcc:	mrc	15, 0, r3, cr13, cr0, {3}
     dd0:	ldr	r2, [pc, #-2880]	; 298 <sp3_init+0xa0>
     dd4:	ldr	r3, [r3, r2]
     dd8:	add	r3, r3, #88	; 0x58
     ddc:	ldr	r3, [r3]
     de0:	movw	r1, #0
     de4:	movt	r1, #0
     de8:	mov	r0, r3
     dec:	bl	0 <coda_type_set_description>
     df0:	mrc	15, 0, r3, cr13, cr0, {3}
     df4:	ldr	r2, [pc, #-2916]	; 298 <sp3_init+0xa0>
     df8:	ldr	r3, [r3, r2]
     dfc:	add	r4, r3, #92	; 0x5c
     e00:	mov	r1, #3
     e04:	mov	r0, #9
     e08:	bl	0 <coda_type_number_new>
     e0c:	mov	r3, r0
     e10:	str	r3, [r4]
     e14:	mrc	15, 0, r3, cr13, cr0, {3}
     e18:	ldr	r2, [pc, #-2952]	; 298 <sp3_init+0xa0>
     e1c:	ldr	r3, [r3, r2]
     e20:	add	r3, r3, #92	; 0x5c
     e24:	ldr	r3, [r3]
     e28:	ldr	r1, [fp, #-20]	; 0xffffffec
     e2c:	mov	r0, r3
     e30:	bl	0 <coda_type_number_set_endianness>
     e34:	mrc	15, 0, r3, cr13, cr0, {3}
     e38:	ldr	r2, [pc, #-2984]	; 298 <sp3_init+0xa0>
     e3c:	ldr	r3, [r3, r2]
     e40:	add	r3, r3, #92	; 0x5c
     e44:	ldr	r1, [r3]
     e48:	mov	r2, #64	; 0x40
     e4c:	mov	r3, #0
     e50:	mov	r0, r1
     e54:	bl	0 <coda_type_set_bit_size>
     e58:	mrc	15, 0, r3, cr13, cr0, {3}
     e5c:	ldr	r2, [pc, #-3020]	; 298 <sp3_init+0xa0>
     e60:	ldr	r3, [r3, r2]
     e64:	add	r3, r3, #92	; 0x5c
     e68:	ldr	r3, [r3]
     e6c:	movw	r1, #0
     e70:	movt	r1, #0
     e74:	mov	r0, r3
     e78:	bl	0 <coda_type_set_description>
     e7c:	mrc	15, 0, r3, cr13, cr0, {3}
     e80:	ldr	r2, [pc, #-3056]	; 298 <sp3_init+0xa0>
     e84:	ldr	r3, [r3, r2]
     e88:	add	r3, r3, #92	; 0x5c
     e8c:	ldr	r3, [r3]
     e90:	movw	r1, #0
     e94:	movt	r1, #0
     e98:	mov	r0, r3
     e9c:	bl	0 <coda_type_number_set_unit>
     ea0:	mrc	15, 0, r3, cr13, cr0, {3}
     ea4:	ldr	r2, [pc, #-3092]	; 298 <sp3_init+0xa0>
     ea8:	ldr	r3, [r3, r2]
     eac:	add	r4, r3, #96	; 0x60
     eb0:	mov	r1, #3
     eb4:	mov	r0, #9
     eb8:	bl	0 <coda_type_number_new>
     ebc:	mov	r3, r0
     ec0:	str	r3, [r4]
     ec4:	mrc	15, 0, r3, cr13, cr0, {3}
     ec8:	ldr	r2, [pc, #-3128]	; 298 <sp3_init+0xa0>
     ecc:	ldr	r3, [r3, r2]
     ed0:	add	r3, r3, #96	; 0x60
     ed4:	ldr	r3, [r3]
     ed8:	ldr	r1, [fp, #-20]	; 0xffffffec
     edc:	mov	r0, r3
     ee0:	bl	0 <coda_type_number_set_endianness>
     ee4:	mrc	15, 0, r3, cr13, cr0, {3}
     ee8:	ldr	r2, [pc, #-3160]	; 298 <sp3_init+0xa0>
     eec:	ldr	r3, [r3, r2]
     ef0:	add	r3, r3, #96	; 0x60
     ef4:	ldr	r1, [r3]
     ef8:	mov	r2, #64	; 0x40
     efc:	mov	r3, #0
     f00:	mov	r0, r1
     f04:	bl	0 <coda_type_set_bit_size>
     f08:	mrc	15, 0, r3, cr13, cr0, {3}
     f0c:	ldr	r2, [pc, #-3196]	; 298 <sp3_init+0xa0>
     f10:	ldr	r3, [r3, r2]
     f14:	add	r3, r3, #96	; 0x60
     f18:	ldr	r3, [r3]
     f1c:	movw	r1, #0
     f20:	movt	r1, #0
     f24:	mov	r0, r3
     f28:	bl	0 <coda_type_set_description>
     f2c:	mrc	15, 0, r3, cr13, cr0, {3}
     f30:	ldr	r2, [pc, #-3232]	; 298 <sp3_init+0xa0>
     f34:	ldr	r3, [r3, r2]
     f38:	add	r3, r3, #96	; 0x60
     f3c:	ldr	r3, [r3]
     f40:	movw	r1, #0
     f44:	movt	r1, #0
     f48:	mov	r0, r3
     f4c:	bl	0 <coda_type_number_set_unit>
     f50:	mrc	15, 0, r3, cr13, cr0, {3}
     f54:	ldr	r2, [pc, #-3268]	; 298 <sp3_init+0xa0>
     f58:	ldr	r3, [r3, r2]
     f5c:	add	r4, r3, #100	; 0x64
     f60:	mov	r1, #3
     f64:	mov	r0, #9
     f68:	bl	0 <coda_type_number_new>
     f6c:	mov	r3, r0
     f70:	str	r3, [r4]
     f74:	mrc	15, 0, r3, cr13, cr0, {3}
     f78:	ldr	r2, [pc, #-3304]	; 298 <sp3_init+0xa0>
     f7c:	ldr	r3, [r3, r2]
     f80:	add	r3, r3, #100	; 0x64
     f84:	ldr	r3, [r3]
     f88:	ldr	r1, [fp, #-20]	; 0xffffffec
     f8c:	mov	r0, r3
     f90:	bl	0 <coda_type_number_set_endianness>
     f94:	mrc	15, 0, r3, cr13, cr0, {3}
     f98:	ldr	r2, [pc, #-3336]	; 298 <sp3_init+0xa0>
     f9c:	ldr	r3, [r3, r2]
     fa0:	add	r3, r3, #100	; 0x64
     fa4:	ldr	r1, [r3]
     fa8:	mov	r2, #64	; 0x40
     fac:	mov	r3, #0
     fb0:	mov	r0, r1
     fb4:	bl	0 <coda_type_set_bit_size>
     fb8:	mrc	15, 0, r3, cr13, cr0, {3}
     fbc:	ldr	r2, [pc, #-3372]	; 298 <sp3_init+0xa0>
     fc0:	ldr	r3, [r3, r2]
     fc4:	add	r3, r3, #100	; 0x64
     fc8:	ldr	r3, [r3]
     fcc:	movw	r1, #0
     fd0:	movt	r1, #0
     fd4:	mov	r0, r3
     fd8:	bl	0 <coda_type_set_description>
     fdc:	mrc	15, 0, r3, cr13, cr0, {3}
     fe0:	ldr	r2, [pc, #-3408]	; 298 <sp3_init+0xa0>
     fe4:	ldr	r3, [r3, r2]
     fe8:	add	r3, r3, #100	; 0x64
     fec:	ldr	r3, [r3]
     ff0:	movw	r1, #0
     ff4:	movt	r1, #0
     ff8:	mov	r0, r3
     ffc:	bl	0 <coda_type_number_set_unit>
    1000:	mrc	15, 0, r3, cr13, cr0, {3}
    1004:	ldr	r2, [pc, #-3444]	; 298 <sp3_init+0xa0>
    1008:	ldr	r3, [r3, r2]
    100c:	add	r4, r3, #104	; 0x68
    1010:	mov	r1, #3
    1014:	mov	r0, #9
    1018:	bl	0 <coda_type_number_new>
    101c:	mov	r3, r0
    1020:	str	r3, [r4]
    1024:	mrc	15, 0, r3, cr13, cr0, {3}
    1028:	ldr	r2, [pc, #-3480]	; 298 <sp3_init+0xa0>
    102c:	ldr	r3, [r3, r2]
    1030:	add	r3, r3, #104	; 0x68
    1034:	ldr	r3, [r3]
    1038:	ldr	r1, [fp, #-20]	; 0xffffffec
    103c:	mov	r0, r3
    1040:	bl	0 <coda_type_number_set_endianness>
    1044:	mrc	15, 0, r3, cr13, cr0, {3}
    1048:	ldr	r2, [pc, #-3512]	; 298 <sp3_init+0xa0>
    104c:	ldr	r3, [r3, r2]
    1050:	add	r3, r3, #104	; 0x68
    1054:	ldr	r1, [r3]
    1058:	mov	r2, #64	; 0x40
    105c:	mov	r3, #0
    1060:	mov	r0, r1
    1064:	bl	0 <coda_type_set_bit_size>
    1068:	mrc	15, 0, r3, cr13, cr0, {3}
    106c:	ldr	r2, [pc, #-3548]	; 298 <sp3_init+0xa0>
    1070:	ldr	r3, [r3, r2]
    1074:	add	r3, r3, #104	; 0x68
    1078:	ldr	r3, [r3]
    107c:	movw	r1, #0
    1080:	movt	r1, #0
    1084:	mov	r0, r3
    1088:	bl	0 <coda_type_set_description>
    108c:	mrc	15, 0, r3, cr13, cr0, {3}
    1090:	ldr	r2, [pc, #-3584]	; 298 <sp3_init+0xa0>
    1094:	ldr	r3, [r3, r2]
    1098:	add	r3, r3, #104	; 0x68
    109c:	ldr	r3, [r3]
    10a0:	movw	r1, #0
    10a4:	movt	r1, #0
    10a8:	mov	r0, r3
    10ac:	bl	0 <coda_type_number_set_unit>
    10b0:	mrc	15, 0, r3, cr13, cr0, {3}
    10b4:	ldr	r2, [pc, #-3620]	; 298 <sp3_init+0xa0>
    10b8:	ldr	r3, [r3, r2]
    10bc:	add	r4, r3, #108	; 0x6c
    10c0:	mov	r1, #2
    10c4:	mov	r0, #9
    10c8:	bl	0 <coda_type_number_new>
    10cc:	mov	r3, r0
    10d0:	str	r3, [r4]
    10d4:	mrc	15, 0, r3, cr13, cr0, {3}
    10d8:	ldr	r2, [pc, #-3656]	; 298 <sp3_init+0xa0>
    10dc:	ldr	r3, [r3, r2]
    10e0:	add	r3, r3, #108	; 0x6c
    10e4:	ldr	r3, [r3]
    10e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    10ec:	mov	r0, r3
    10f0:	bl	0 <coda_type_number_set_endianness>
    10f4:	mrc	15, 0, r3, cr13, cr0, {3}
    10f8:	ldr	r2, [pc, #-3688]	; 298 <sp3_init+0xa0>
    10fc:	ldr	r3, [r3, r2]
    1100:	add	r3, r3, #108	; 0x6c
    1104:	ldr	r3, [r3]
    1108:	mov	r1, #0
    110c:	mov	r0, r3
    1110:	bl	0 <coda_type_set_read_type>
    1114:	mrc	15, 0, r3, cr13, cr0, {3}
    1118:	ldr	r2, [pc, #-3720]	; 298 <sp3_init+0xa0>
    111c:	ldr	r3, [r3, r2]
    1120:	add	r3, r3, #108	; 0x6c
    1124:	ldr	r1, [r3]
    1128:	mov	r2, #8
    112c:	mov	r3, #0
    1130:	mov	r0, r1
    1134:	bl	0 <coda_type_set_bit_size>
    1138:	mrc	15, 0, r3, cr13, cr0, {3}
    113c:	ldr	r2, [pc, #-3756]	; 298 <sp3_init+0xa0>
    1140:	ldr	r3, [r3, r2]
    1144:	add	r3, r3, #108	; 0x6c
    1148:	ldr	r3, [r3]
    114c:	movw	r1, #0
    1150:	movt	r1, #0
    1154:	mov	r0, r3
    1158:	bl	0 <coda_type_set_description>
    115c:	mrc	15, 0, r3, cr13, cr0, {3}
    1160:	ldr	r2, [pc, #-3792]	; 298 <sp3_init+0xa0>
    1164:	ldr	r3, [r3, r2]
    1168:	add	r4, r3, #112	; 0x70
    116c:	mov	r1, #2
    1170:	mov	r0, #9
    1174:	bl	0 <coda_type_number_new>
    1178:	mov	r3, r0
    117c:	str	r3, [r4]
    1180:	mrc	15, 0, r3, cr13, cr0, {3}
    1184:	ldr	r2, [pc, #-3828]	; 298 <sp3_init+0xa0>
    1188:	ldr	r3, [r3, r2]
    118c:	add	r3, r3, #112	; 0x70
    1190:	ldr	r3, [r3]
    1194:	ldr	r1, [fp, #-20]	; 0xffffffec
    1198:	mov	r0, r3
    119c:	bl	0 <coda_type_number_set_endianness>
    11a0:	mrc	15, 0, r3, cr13, cr0, {3}
    11a4:	ldr	r2, [pc, #-3860]	; 298 <sp3_init+0xa0>
    11a8:	ldr	r3, [r3, r2]
    11ac:	add	r3, r3, #112	; 0x70
    11b0:	ldr	r3, [r3]
    11b4:	mov	r1, #0
    11b8:	mov	r0, r3
    11bc:	bl	0 <coda_type_set_read_type>
    11c0:	mrc	15, 0, r3, cr13, cr0, {3}
    11c4:	ldr	r2, [pc, #-3892]	; 298 <sp3_init+0xa0>
    11c8:	ldr	r3, [r3, r2]
    11cc:	add	r3, r3, #112	; 0x70
    11d0:	ldr	r1, [r3]
    11d4:	mov	r2, #8
    11d8:	mov	r3, #0
    11dc:	mov	r0, r1
    11e0:	bl	0 <coda_type_set_bit_size>
    11e4:	mrc	15, 0, r3, cr13, cr0, {3}
    11e8:	ldr	r2, [pc, #-3928]	; 298 <sp3_init+0xa0>
    11ec:	ldr	r3, [r3, r2]
    11f0:	add	r3, r3, #112	; 0x70
    11f4:	ldr	r3, [r3]
    11f8:	movw	r1, #0
    11fc:	movt	r1, #0
    1200:	mov	r0, r3
    1204:	bl	0 <coda_type_set_description>
    1208:	mrc	15, 0, r3, cr13, cr0, {3}
    120c:	ldr	r2, [pc, #-3964]	; 298 <sp3_init+0xa0>
    1210:	ldr	r3, [r3, r2]
    1214:	add	r4, r3, #116	; 0x74
    1218:	mov	r1, #2
    121c:	mov	r0, #9
    1220:	bl	0 <coda_type_number_new>
    1224:	mov	r3, r0
    1228:	str	r3, [r4]
    122c:	mrc	15, 0, r3, cr13, cr0, {3}
    1230:	ldr	r2, [pc, #-4000]	; 298 <sp3_init+0xa0>
    1234:	ldr	r3, [r3, r2]
    1238:	add	r3, r3, #116	; 0x74
    123c:	ldr	r3, [r3]
    1240:	ldr	r1, [fp, #-20]	; 0xffffffec
    1244:	mov	r0, r3
    1248:	bl	0 <coda_type_number_set_endianness>
    124c:	mrc	15, 0, r3, cr13, cr0, {3}
    1250:	ldr	r2, [pc, #-4032]	; 298 <sp3_init+0xa0>
    1254:	ldr	r3, [r3, r2]
    1258:	add	r3, r3, #116	; 0x74
    125c:	ldr	r3, [r3]
    1260:	mov	r1, #0
    1264:	mov	r0, r3
    1268:	bl	0 <coda_type_set_read_type>
    126c:	mrc	15, 0, r3, cr13, cr0, {3}
    1270:	ldr	r2, [pc, #-4064]	; 298 <sp3_init+0xa0>
    1274:	ldr	r3, [r3, r2]
    1278:	add	r3, r3, #116	; 0x74
    127c:	ldr	r1, [r3]
    1280:	mov	r2, #8
    1284:	mov	r3, #0
    1288:	mov	r0, r1
    128c:	bl	0 <coda_type_set_bit_size>
    1290:	mrc	15, 0, r3, cr13, cr0, {3}
    1294:	ldr	r2, [pc, #4084]	; 2290 <sp3_init+0x2098>
    1298:	ldr	r3, [r3, r2]
    129c:	add	r3, r3, #116	; 0x74
    12a0:	ldr	r3, [r3]
    12a4:	movw	r1, #0
    12a8:	movt	r1, #0
    12ac:	mov	r0, r3
    12b0:	bl	0 <coda_type_set_description>
    12b4:	mrc	15, 0, r3, cr13, cr0, {3}
    12b8:	ldr	r2, [pc, #4048]	; 2290 <sp3_init+0x2098>
    12bc:	ldr	r3, [r3, r2]
    12c0:	add	r4, r3, #120	; 0x78
    12c4:	mov	r1, #2
    12c8:	mov	r0, #9
    12cc:	bl	0 <coda_type_number_new>
    12d0:	mov	r3, r0
    12d4:	str	r3, [r4]
    12d8:	mrc	15, 0, r3, cr13, cr0, {3}
    12dc:	ldr	r2, [pc, #4012]	; 2290 <sp3_init+0x2098>
    12e0:	ldr	r3, [r3, r2]
    12e4:	add	r3, r3, #120	; 0x78
    12e8:	ldr	r3, [r3]
    12ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    12f0:	mov	r0, r3
    12f4:	bl	0 <coda_type_number_set_endianness>
    12f8:	mrc	15, 0, r3, cr13, cr0, {3}
    12fc:	ldr	r2, [pc, #3980]	; 2290 <sp3_init+0x2098>
    1300:	ldr	r3, [r3, r2]
    1304:	add	r3, r3, #120	; 0x78
    1308:	ldr	r3, [r3]
    130c:	mov	r1, #2
    1310:	mov	r0, r3
    1314:	bl	0 <coda_type_set_read_type>
    1318:	mrc	15, 0, r3, cr13, cr0, {3}
    131c:	ldr	r2, [pc, #3948]	; 2290 <sp3_init+0x2098>
    1320:	ldr	r3, [r3, r2]
    1324:	add	r3, r3, #120	; 0x78
    1328:	ldr	r1, [r3]
    132c:	mov	r2, #16
    1330:	mov	r3, #0
    1334:	mov	r0, r1
    1338:	bl	0 <coda_type_set_bit_size>
    133c:	mrc	15, 0, r3, cr13, cr0, {3}
    1340:	ldr	r2, [pc, #3912]	; 2290 <sp3_init+0x2098>
    1344:	ldr	r3, [r3, r2]
    1348:	add	r3, r3, #120	; 0x78
    134c:	ldr	r3, [r3]
    1350:	movw	r1, #0
    1354:	movt	r1, #0
    1358:	mov	r0, r3
    135c:	bl	0 <coda_type_set_description>
    1360:	mrc	15, 0, r3, cr13, cr0, {3}
    1364:	ldr	r2, [pc, #3876]	; 2290 <sp3_init+0x2098>
    1368:	ldr	r3, [r3, r2]
    136c:	add	r4, r3, #124	; 0x7c
    1370:	mov	r0, #9
    1374:	bl	0 <coda_type_text_new>
    1378:	mov	r3, r0
    137c:	str	r3, [r4]
    1380:	mrc	15, 0, r3, cr13, cr0, {3}
    1384:	ldr	r2, [pc, #3844]	; 2290 <sp3_init+0x2098>
    1388:	ldr	r3, [r3, r2]
    138c:	add	r3, r3, #124	; 0x7c
    1390:	ldr	r1, [r3]
    1394:	mov	r2, #1
    1398:	mov	r3, #0
    139c:	mov	r0, r1
    13a0:	bl	0 <coda_type_set_byte_size>
    13a4:	mrc	15, 0, r3, cr13, cr0, {3}
    13a8:	ldr	r2, [pc, #3808]	; 2290 <sp3_init+0x2098>
    13ac:	ldr	r3, [r3, r2]
    13b0:	add	r3, r3, #124	; 0x7c
    13b4:	ldr	r3, [r3]
    13b8:	movw	r1, #0
    13bc:	movt	r1, #0
    13c0:	mov	r0, r3
    13c4:	bl	0 <coda_type_set_description>
    13c8:	mrc	15, 0, r3, cr13, cr0, {3}
    13cc:	ldr	r2, [pc, #3772]	; 2290 <sp3_init+0x2098>
    13d0:	ldr	r3, [r3, r2]
    13d4:	add	r4, r3, #128	; 0x80
    13d8:	mov	r0, #9
    13dc:	bl	0 <coda_type_text_new>
    13e0:	mov	r3, r0
    13e4:	str	r3, [r4]
    13e8:	mrc	15, 0, r3, cr13, cr0, {3}
    13ec:	ldr	r2, [pc, #3740]	; 2290 <sp3_init+0x2098>
    13f0:	ldr	r3, [r3, r2]
    13f4:	add	r3, r3, #128	; 0x80
    13f8:	ldr	r1, [r3]
    13fc:	mov	r2, #1
    1400:	mov	r3, #0
    1404:	mov	r0, r1
    1408:	bl	0 <coda_type_set_byte_size>
    140c:	mrc	15, 0, r3, cr13, cr0, {3}
    1410:	ldr	r2, [pc, #3704]	; 2290 <sp3_init+0x2098>
    1414:	ldr	r3, [r3, r2]
    1418:	add	r3, r3, #128	; 0x80
    141c:	ldr	r3, [r3]
    1420:	movw	r1, #0
    1424:	movt	r1, #0
    1428:	mov	r0, r3
    142c:	bl	0 <coda_type_set_description>
    1430:	mrc	15, 0, r3, cr13, cr0, {3}
    1434:	ldr	r2, [pc, #3668]	; 2290 <sp3_init+0x2098>
    1438:	ldr	r3, [r3, r2]
    143c:	add	r4, r3, #132	; 0x84
    1440:	mov	r0, #9
    1444:	bl	0 <coda_type_text_new>
    1448:	mov	r3, r0
    144c:	str	r3, [r4]
    1450:	mrc	15, 0, r3, cr13, cr0, {3}
    1454:	ldr	r2, [pc, #3636]	; 2290 <sp3_init+0x2098>
    1458:	ldr	r3, [r3, r2]
    145c:	add	r3, r3, #132	; 0x84
    1460:	ldr	r1, [r3]
    1464:	mov	r2, #1
    1468:	mov	r3, #0
    146c:	mov	r0, r1
    1470:	bl	0 <coda_type_set_byte_size>
    1474:	mrc	15, 0, r3, cr13, cr0, {3}
    1478:	ldr	r2, [pc, #3600]	; 2290 <sp3_init+0x2098>
    147c:	ldr	r3, [r3, r2]
    1480:	add	r3, r3, #132	; 0x84
    1484:	ldr	r3, [r3]
    1488:	movw	r1, #0
    148c:	movt	r1, #0
    1490:	mov	r0, r3
    1494:	bl	0 <coda_type_set_description>
    1498:	mrc	15, 0, r3, cr13, cr0, {3}
    149c:	ldr	r2, [pc, #3564]	; 2290 <sp3_init+0x2098>
    14a0:	ldr	r3, [r3, r2]
    14a4:	add	r4, r3, #136	; 0x88
    14a8:	mov	r0, #9
    14ac:	bl	0 <coda_type_text_new>
    14b0:	mov	r3, r0
    14b4:	str	r3, [r4]
    14b8:	mrc	15, 0, r3, cr13, cr0, {3}
    14bc:	ldr	r2, [pc, #3532]	; 2290 <sp3_init+0x2098>
    14c0:	ldr	r3, [r3, r2]
    14c4:	add	r3, r3, #136	; 0x88
    14c8:	ldr	r1, [r3]
    14cc:	mov	r2, #1
    14d0:	mov	r3, #0
    14d4:	mov	r0, r1
    14d8:	bl	0 <coda_type_set_byte_size>
    14dc:	mrc	15, 0, r3, cr13, cr0, {3}
    14e0:	ldr	r2, [pc, #3496]	; 2290 <sp3_init+0x2098>
    14e4:	ldr	r3, [r3, r2]
    14e8:	add	r3, r3, #136	; 0x88
    14ec:	ldr	r3, [r3]
    14f0:	movw	r1, #0
    14f4:	movt	r1, #0
    14f8:	mov	r0, r3
    14fc:	bl	0 <coda_type_set_description>
    1500:	mrc	15, 0, r3, cr13, cr0, {3}
    1504:	ldr	r2, [pc, #3460]	; 2290 <sp3_init+0x2098>
    1508:	ldr	r3, [r3, r2]
    150c:	add	r4, r3, #144	; 0x90
    1510:	mov	r1, #2
    1514:	mov	r0, #9
    1518:	bl	0 <coda_type_number_new>
    151c:	mov	r3, r0
    1520:	str	r3, [r4]
    1524:	mrc	15, 0, r3, cr13, cr0, {3}
    1528:	ldr	r2, [pc, #3424]	; 2290 <sp3_init+0x2098>
    152c:	ldr	r3, [r3, r2]
    1530:	add	r3, r3, #144	; 0x90
    1534:	ldr	r3, [r3]
    1538:	ldr	r1, [fp, #-20]	; 0xffffffec
    153c:	mov	r0, r3
    1540:	bl	0 <coda_type_number_set_endianness>
    1544:	mrc	15, 0, r3, cr13, cr0, {3}
    1548:	ldr	r2, [pc, #3392]	; 2290 <sp3_init+0x2098>
    154c:	ldr	r3, [r3, r2]
    1550:	add	r3, r3, #144	; 0x90
    1554:	ldr	r3, [r3]
    1558:	mov	r1, #2
    155c:	mov	r0, r3
    1560:	bl	0 <coda_type_set_read_type>
    1564:	mrc	15, 0, r3, cr13, cr0, {3}
    1568:	ldr	r2, [pc, #3360]	; 2290 <sp3_init+0x2098>
    156c:	ldr	r3, [r3, r2]
    1570:	add	r3, r3, #144	; 0x90
    1574:	ldr	r1, [r3]
    1578:	mov	r2, #16
    157c:	mov	r3, #0
    1580:	mov	r0, r1
    1584:	bl	0 <coda_type_set_bit_size>
    1588:	mrc	15, 0, r3, cr13, cr0, {3}
    158c:	ldr	r2, [pc, #3324]	; 2290 <sp3_init+0x2098>
    1590:	ldr	r3, [r3, r2]
    1594:	add	r3, r3, #144	; 0x90
    1598:	ldr	r3, [r3]
    159c:	movw	r1, #0
    15a0:	movt	r1, #0
    15a4:	mov	r0, r3
    15a8:	bl	0 <coda_type_set_description>
    15ac:	mrc	15, 0, r3, cr13, cr0, {3}
    15b0:	ldr	r2, [pc, #3288]	; 2290 <sp3_init+0x2098>
    15b4:	ldr	r3, [r3, r2]
    15b8:	add	r3, r3, #144	; 0x90
    15bc:	ldr	r3, [r3]
    15c0:	movw	r1, #0
    15c4:	movt	r1, #0
    15c8:	mov	r0, r3
    15cc:	bl	0 <coda_type_number_set_unit>
    15d0:	mrc	15, 0, r3, cr13, cr0, {3}
    15d4:	ldr	r2, [pc, #3252]	; 2290 <sp3_init+0x2098>
    15d8:	ldr	r3, [r3, r2]
    15dc:	add	r4, r3, #148	; 0x94
    15e0:	mov	r1, #2
    15e4:	mov	r0, #9
    15e8:	bl	0 <coda_type_number_new>
    15ec:	mov	r3, r0
    15f0:	str	r3, [r4]
    15f4:	mrc	15, 0, r3, cr13, cr0, {3}
    15f8:	ldr	r2, [pc, #3216]	; 2290 <sp3_init+0x2098>
    15fc:	ldr	r3, [r3, r2]
    1600:	add	r3, r3, #148	; 0x94
    1604:	ldr	r3, [r3]
    1608:	ldr	r1, [fp, #-20]	; 0xffffffec
    160c:	mov	r0, r3
    1610:	bl	0 <coda_type_number_set_endianness>
    1614:	mrc	15, 0, r3, cr13, cr0, {3}
    1618:	ldr	r2, [pc, #3184]	; 2290 <sp3_init+0x2098>
    161c:	ldr	r3, [r3, r2]
    1620:	add	r3, r3, #148	; 0x94
    1624:	ldr	r3, [r3]
    1628:	mov	r1, #2
    162c:	mov	r0, r3
    1630:	bl	0 <coda_type_set_read_type>
    1634:	mrc	15, 0, r3, cr13, cr0, {3}
    1638:	ldr	r2, [pc, #3152]	; 2290 <sp3_init+0x2098>
    163c:	ldr	r3, [r3, r2]
    1640:	add	r3, r3, #148	; 0x94
    1644:	ldr	r1, [r3]
    1648:	mov	r2, #16
    164c:	mov	r3, #0
    1650:	mov	r0, r1
    1654:	bl	0 <coda_type_set_bit_size>
    1658:	mrc	15, 0, r3, cr13, cr0, {3}
    165c:	ldr	r2, [pc, #3116]	; 2290 <sp3_init+0x2098>
    1660:	ldr	r3, [r3, r2]
    1664:	add	r3, r3, #148	; 0x94
    1668:	ldr	r3, [r3]
    166c:	movw	r1, #0
    1670:	movt	r1, #0
    1674:	mov	r0, r3
    1678:	bl	0 <coda_type_set_description>
    167c:	mrc	15, 0, r3, cr13, cr0, {3}
    1680:	ldr	r2, [pc, #3080]	; 2290 <sp3_init+0x2098>
    1684:	ldr	r3, [r3, r2]
    1688:	add	r3, r3, #148	; 0x94
    168c:	ldr	r3, [r3]
    1690:	movw	r1, #0
    1694:	movt	r1, #0
    1698:	mov	r0, r3
    169c:	bl	0 <coda_type_number_set_unit>
    16a0:	mrc	15, 0, r3, cr13, cr0, {3}
    16a4:	ldr	r2, [pc, #3044]	; 2290 <sp3_init+0x2098>
    16a8:	ldr	r3, [r3, r2]
    16ac:	add	r4, r3, #152	; 0x98
    16b0:	mov	r1, #2
    16b4:	mov	r0, #9
    16b8:	bl	0 <coda_type_number_new>
    16bc:	mov	r3, r0
    16c0:	str	r3, [r4]
    16c4:	mrc	15, 0, r3, cr13, cr0, {3}
    16c8:	ldr	r2, [pc, #3008]	; 2290 <sp3_init+0x2098>
    16cc:	ldr	r3, [r3, r2]
    16d0:	add	r3, r3, #152	; 0x98
    16d4:	ldr	r3, [r3]
    16d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    16dc:	mov	r0, r3
    16e0:	bl	0 <coda_type_number_set_endianness>
    16e4:	mrc	15, 0, r3, cr13, cr0, {3}
    16e8:	ldr	r2, [pc, #2976]	; 2290 <sp3_init+0x2098>
    16ec:	ldr	r3, [r3, r2]
    16f0:	add	r3, r3, #152	; 0x98
    16f4:	ldr	r3, [r3]
    16f8:	mov	r1, #2
    16fc:	mov	r0, r3
    1700:	bl	0 <coda_type_set_read_type>
    1704:	mrc	15, 0, r3, cr13, cr0, {3}
    1708:	ldr	r2, [pc, #2944]	; 2290 <sp3_init+0x2098>
    170c:	ldr	r3, [r3, r2]
    1710:	add	r3, r3, #152	; 0x98
    1714:	ldr	r1, [r3]
    1718:	mov	r2, #16
    171c:	mov	r3, #0
    1720:	mov	r0, r1
    1724:	bl	0 <coda_type_set_bit_size>
    1728:	mrc	15, 0, r3, cr13, cr0, {3}
    172c:	ldr	r2, [pc, #2908]	; 2290 <sp3_init+0x2098>
    1730:	ldr	r3, [r3, r2]
    1734:	add	r3, r3, #152	; 0x98
    1738:	ldr	r3, [r3]
    173c:	movw	r1, #0
    1740:	movt	r1, #0
    1744:	mov	r0, r3
    1748:	bl	0 <coda_type_set_description>
    174c:	mrc	15, 0, r3, cr13, cr0, {3}
    1750:	ldr	r2, [pc, #2872]	; 2290 <sp3_init+0x2098>
    1754:	ldr	r3, [r3, r2]
    1758:	add	r3, r3, #152	; 0x98
    175c:	ldr	r3, [r3]
    1760:	movw	r1, #0
    1764:	movt	r1, #0
    1768:	mov	r0, r3
    176c:	bl	0 <coda_type_number_set_unit>
    1770:	mrc	15, 0, r3, cr13, cr0, {3}
    1774:	ldr	r2, [pc, #2836]	; 2290 <sp3_init+0x2098>
    1778:	ldr	r3, [r3, r2]
    177c:	add	r4, r3, #156	; 0x9c
    1780:	mov	r1, #2
    1784:	mov	r0, #9
    1788:	bl	0 <coda_type_number_new>
    178c:	mov	r3, r0
    1790:	str	r3, [r4]
    1794:	mrc	15, 0, r3, cr13, cr0, {3}
    1798:	ldr	r2, [pc, #2800]	; 2290 <sp3_init+0x2098>
    179c:	ldr	r3, [r3, r2]
    17a0:	add	r3, r3, #156	; 0x9c
    17a4:	ldr	r3, [r3]
    17a8:	ldr	r1, [fp, #-20]	; 0xffffffec
    17ac:	mov	r0, r3
    17b0:	bl	0 <coda_type_number_set_endianness>
    17b4:	mrc	15, 0, r3, cr13, cr0, {3}
    17b8:	ldr	r2, [pc, #2768]	; 2290 <sp3_init+0x2098>
    17bc:	ldr	r3, [r3, r2]
    17c0:	add	r3, r3, #156	; 0x9c
    17c4:	ldr	r3, [r3]
    17c8:	mov	r1, #4
    17cc:	mov	r0, r3
    17d0:	bl	0 <coda_type_set_read_type>
    17d4:	mrc	15, 0, r3, cr13, cr0, {3}
    17d8:	ldr	r2, [pc, #2736]	; 2290 <sp3_init+0x2098>
    17dc:	ldr	r3, [r3, r2]
    17e0:	add	r3, r3, #156	; 0x9c
    17e4:	ldr	r1, [r3]
    17e8:	mov	r2, #32
    17ec:	mov	r3, #0
    17f0:	mov	r0, r1
    17f4:	bl	0 <coda_type_set_bit_size>
    17f8:	mrc	15, 0, r3, cr13, cr0, {3}
    17fc:	ldr	r2, [pc, #2700]	; 2290 <sp3_init+0x2098>
    1800:	ldr	r3, [r3, r2]
    1804:	add	r3, r3, #156	; 0x9c
    1808:	ldr	r3, [r3]
    180c:	movw	r1, #0
    1810:	movt	r1, #0
    1814:	mov	r0, r3
    1818:	bl	0 <coda_type_set_description>
    181c:	mrc	15, 0, r3, cr13, cr0, {3}
    1820:	ldr	r2, [pc, #2664]	; 2290 <sp3_init+0x2098>
    1824:	ldr	r3, [r3, r2]
    1828:	add	r3, r3, #156	; 0x9c
    182c:	ldr	r3, [r3]
    1830:	movw	r1, #0
    1834:	movt	r1, #0
    1838:	mov	r0, r3
    183c:	bl	0 <coda_type_number_set_unit>
    1840:	mrc	15, 0, r3, cr13, cr0, {3}
    1844:	ldr	r2, [pc, #2628]	; 2290 <sp3_init+0x2098>
    1848:	ldr	r3, [r3, r2]
    184c:	add	r4, r3, #160	; 0xa0
    1850:	mov	r1, #2
    1854:	mov	r0, #9
    1858:	bl	0 <coda_type_number_new>
    185c:	mov	r3, r0
    1860:	str	r3, [r4]
    1864:	mrc	15, 0, r3, cr13, cr0, {3}
    1868:	ldr	r2, [pc, #2592]	; 2290 <sp3_init+0x2098>
    186c:	ldr	r3, [r3, r2]
    1870:	add	r3, r3, #160	; 0xa0
    1874:	ldr	r3, [r3]
    1878:	ldr	r1, [fp, #-20]	; 0xffffffec
    187c:	mov	r0, r3
    1880:	bl	0 <coda_type_number_set_endianness>
    1884:	mrc	15, 0, r3, cr13, cr0, {3}
    1888:	ldr	r2, [pc, #2560]	; 2290 <sp3_init+0x2098>
    188c:	ldr	r3, [r3, r2]
    1890:	add	r3, r3, #160	; 0xa0
    1894:	ldr	r3, [r3]
    1898:	mov	r1, #4
    189c:	mov	r0, r3
    18a0:	bl	0 <coda_type_set_read_type>
    18a4:	mrc	15, 0, r3, cr13, cr0, {3}
    18a8:	ldr	r2, [pc, #2528]	; 2290 <sp3_init+0x2098>
    18ac:	ldr	r3, [r3, r2]
    18b0:	add	r3, r3, #160	; 0xa0
    18b4:	ldr	r1, [r3]
    18b8:	mov	r2, #32
    18bc:	mov	r3, #0
    18c0:	mov	r0, r1
    18c4:	bl	0 <coda_type_set_bit_size>
    18c8:	mrc	15, 0, r3, cr13, cr0, {3}
    18cc:	ldr	r2, [pc, #2492]	; 2290 <sp3_init+0x2098>
    18d0:	ldr	r3, [r3, r2]
    18d4:	add	r3, r3, #160	; 0xa0
    18d8:	ldr	r3, [r3]
    18dc:	movw	r1, #0
    18e0:	movt	r1, #0
    18e4:	mov	r0, r3
    18e8:	bl	0 <coda_type_set_description>
    18ec:	mrc	15, 0, r3, cr13, cr0, {3}
    18f0:	ldr	r2, [pc, #2456]	; 2290 <sp3_init+0x2098>
    18f4:	ldr	r3, [r3, r2]
    18f8:	add	r4, r3, #164	; 0xa4
    18fc:	mov	r1, #2
    1900:	mov	r0, #9
    1904:	bl	0 <coda_type_number_new>
    1908:	mov	r3, r0
    190c:	str	r3, [r4]
    1910:	mrc	15, 0, r3, cr13, cr0, {3}
    1914:	ldr	r2, [pc, #2420]	; 2290 <sp3_init+0x2098>
    1918:	ldr	r3, [r3, r2]
    191c:	add	r3, r3, #164	; 0xa4
    1920:	ldr	r3, [r3]
    1924:	ldr	r1, [fp, #-20]	; 0xffffffec
    1928:	mov	r0, r3
    192c:	bl	0 <coda_type_number_set_endianness>
    1930:	mrc	15, 0, r3, cr13, cr0, {3}
    1934:	ldr	r2, [pc, #2388]	; 2290 <sp3_init+0x2098>
    1938:	ldr	r3, [r3, r2]
    193c:	add	r3, r3, #164	; 0xa4
    1940:	ldr	r3, [r3]
    1944:	mov	r1, #4
    1948:	mov	r0, r3
    194c:	bl	0 <coda_type_set_read_type>
    1950:	mrc	15, 0, r3, cr13, cr0, {3}
    1954:	ldr	r2, [pc, #2356]	; 2290 <sp3_init+0x2098>
    1958:	ldr	r3, [r3, r2]
    195c:	add	r3, r3, #164	; 0xa4
    1960:	ldr	r1, [r3]
    1964:	mov	r2, #32
    1968:	mov	r3, #0
    196c:	mov	r0, r1
    1970:	bl	0 <coda_type_set_bit_size>
    1974:	mrc	15, 0, r3, cr13, cr0, {3}
    1978:	ldr	r2, [pc, #2320]	; 2290 <sp3_init+0x2098>
    197c:	ldr	r3, [r3, r2]
    1980:	add	r3, r3, #164	; 0xa4
    1984:	ldr	r3, [r3]
    1988:	movw	r1, #0
    198c:	movt	r1, #0
    1990:	mov	r0, r3
    1994:	bl	0 <coda_type_set_description>
    1998:	mrc	15, 0, r3, cr13, cr0, {3}
    199c:	ldr	r2, [pc, #2284]	; 2290 <sp3_init+0x2098>
    19a0:	ldr	r3, [r3, r2]
    19a4:	add	r4, r3, #168	; 0xa8
    19a8:	mov	r1, #2
    19ac:	mov	r0, #9
    19b0:	bl	0 <coda_type_number_new>
    19b4:	mov	r3, r0
    19b8:	str	r3, [r4]
    19bc:	mrc	15, 0, r3, cr13, cr0, {3}
    19c0:	ldr	r2, [pc, #2248]	; 2290 <sp3_init+0x2098>
    19c4:	ldr	r3, [r3, r2]
    19c8:	add	r3, r3, #168	; 0xa8
    19cc:	ldr	r3, [r3]
    19d0:	ldr	r1, [fp, #-20]	; 0xffffffec
    19d4:	mov	r0, r3
    19d8:	bl	0 <coda_type_number_set_endianness>
    19dc:	mrc	15, 0, r3, cr13, cr0, {3}
    19e0:	ldr	r2, [pc, #2216]	; 2290 <sp3_init+0x2098>
    19e4:	ldr	r3, [r3, r2]
    19e8:	add	r3, r3, #168	; 0xa8
    19ec:	ldr	r3, [r3]
    19f0:	mov	r1, #4
    19f4:	mov	r0, r3
    19f8:	bl	0 <coda_type_set_read_type>
    19fc:	mrc	15, 0, r3, cr13, cr0, {3}
    1a00:	ldr	r2, [pc, #2184]	; 2290 <sp3_init+0x2098>
    1a04:	ldr	r3, [r3, r2]
    1a08:	add	r3, r3, #168	; 0xa8
    1a0c:	ldr	r1, [r3]
    1a10:	mov	r2, #32
    1a14:	mov	r3, #0
    1a18:	mov	r0, r1
    1a1c:	bl	0 <coda_type_set_bit_size>
    1a20:	mrc	15, 0, r3, cr13, cr0, {3}
    1a24:	ldr	r2, [pc, #2148]	; 2290 <sp3_init+0x2098>
    1a28:	ldr	r3, [r3, r2]
    1a2c:	add	r3, r3, #168	; 0xa8
    1a30:	ldr	r3, [r3]
    1a34:	movw	r1, #0
    1a38:	movt	r1, #0
    1a3c:	mov	r0, r3
    1a40:	bl	0 <coda_type_set_description>
    1a44:	mrc	15, 0, r3, cr13, cr0, {3}
    1a48:	ldr	r2, [pc, #2112]	; 2290 <sp3_init+0x2098>
    1a4c:	ldr	r3, [r3, r2]
    1a50:	add	r4, r3, #172	; 0xac
    1a54:	mov	r1, #2
    1a58:	mov	r0, #9
    1a5c:	bl	0 <coda_type_number_new>
    1a60:	mov	r3, r0
    1a64:	str	r3, [r4]
    1a68:	mrc	15, 0, r3, cr13, cr0, {3}
    1a6c:	ldr	r2, [pc, #2076]	; 2290 <sp3_init+0x2098>
    1a70:	ldr	r3, [r3, r2]
    1a74:	add	r3, r3, #172	; 0xac
    1a78:	ldr	r3, [r3]
    1a7c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a80:	mov	r0, r3
    1a84:	bl	0 <coda_type_number_set_endianness>
    1a88:	mrc	15, 0, r3, cr13, cr0, {3}
    1a8c:	ldr	r2, [pc, #2044]	; 2290 <sp3_init+0x2098>
    1a90:	ldr	r3, [r3, r2]
    1a94:	add	r3, r3, #172	; 0xac
    1a98:	ldr	r3, [r3]
    1a9c:	mov	r1, #4
    1aa0:	mov	r0, r3
    1aa4:	bl	0 <coda_type_set_read_type>
    1aa8:	mrc	15, 0, r3, cr13, cr0, {3}
    1aac:	ldr	r2, [pc, #2012]	; 2290 <sp3_init+0x2098>
    1ab0:	ldr	r3, [r3, r2]
    1ab4:	add	r3, r3, #172	; 0xac
    1ab8:	ldr	r1, [r3]
    1abc:	mov	r2, #32
    1ac0:	mov	r3, #0
    1ac4:	mov	r0, r1
    1ac8:	bl	0 <coda_type_set_bit_size>
    1acc:	mrc	15, 0, r3, cr13, cr0, {3}
    1ad0:	ldr	r2, [pc, #1976]	; 2290 <sp3_init+0x2098>
    1ad4:	ldr	r3, [r3, r2]
    1ad8:	add	r3, r3, #172	; 0xac
    1adc:	ldr	r3, [r3]
    1ae0:	movw	r1, #0
    1ae4:	movt	r1, #0
    1ae8:	mov	r0, r3
    1aec:	bl	0 <coda_type_set_description>
    1af0:	mrc	15, 0, r3, cr13, cr0, {3}
    1af4:	ldr	r2, [pc, #1940]	; 2290 <sp3_init+0x2098>
    1af8:	ldr	r3, [r3, r2]
    1afc:	add	r4, r3, #176	; 0xb0
    1b00:	mov	r1, #2
    1b04:	mov	r0, #9
    1b08:	bl	0 <coda_type_number_new>
    1b0c:	mov	r3, r0
    1b10:	str	r3, [r4]
    1b14:	mrc	15, 0, r3, cr13, cr0, {3}
    1b18:	ldr	r2, [pc, #1904]	; 2290 <sp3_init+0x2098>
    1b1c:	ldr	r3, [r3, r2]
    1b20:	add	r3, r3, #176	; 0xb0
    1b24:	ldr	r3, [r3]
    1b28:	ldr	r1, [fp, #-20]	; 0xffffffec
    1b2c:	mov	r0, r3
    1b30:	bl	0 <coda_type_number_set_endianness>
    1b34:	mrc	15, 0, r3, cr13, cr0, {3}
    1b38:	ldr	r2, [pc, #1872]	; 2290 <sp3_init+0x2098>
    1b3c:	ldr	r3, [r3, r2]
    1b40:	add	r3, r3, #176	; 0xb0
    1b44:	ldr	r3, [r3]
    1b48:	mov	r1, #4
    1b4c:	mov	r0, r3
    1b50:	bl	0 <coda_type_set_read_type>
    1b54:	mrc	15, 0, r3, cr13, cr0, {3}
    1b58:	ldr	r2, [pc, #1840]	; 2290 <sp3_init+0x2098>
    1b5c:	ldr	r3, [r3, r2]
    1b60:	add	r3, r3, #176	; 0xb0
    1b64:	ldr	r1, [r3]
    1b68:	mov	r2, #32
    1b6c:	mov	r3, #0
    1b70:	mov	r0, r1
    1b74:	bl	0 <coda_type_set_bit_size>
    1b78:	mrc	15, 0, r3, cr13, cr0, {3}
    1b7c:	ldr	r2, [pc, #1804]	; 2290 <sp3_init+0x2098>
    1b80:	ldr	r3, [r3, r2]
    1b84:	add	r3, r3, #176	; 0xb0
    1b88:	ldr	r3, [r3]
    1b8c:	movw	r1, #0
    1b90:	movt	r1, #0
    1b94:	mov	r0, r3
    1b98:	bl	0 <coda_type_set_description>
    1b9c:	mrc	15, 0, r3, cr13, cr0, {3}
    1ba0:	ldr	r2, [pc, #1768]	; 2290 <sp3_init+0x2098>
    1ba4:	ldr	r3, [r3, r2]
    1ba8:	add	r4, r3, #180	; 0xb4
    1bac:	mov	r1, #2
    1bb0:	mov	r0, #9
    1bb4:	bl	0 <coda_type_number_new>
    1bb8:	mov	r3, r0
    1bbc:	str	r3, [r4]
    1bc0:	mrc	15, 0, r3, cr13, cr0, {3}
    1bc4:	ldr	r2, [pc, #1732]	; 2290 <sp3_init+0x2098>
    1bc8:	ldr	r3, [r3, r2]
    1bcc:	add	r3, r3, #180	; 0xb4
    1bd0:	ldr	r3, [r3]
    1bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1bd8:	mov	r0, r3
    1bdc:	bl	0 <coda_type_number_set_endianness>
    1be0:	mrc	15, 0, r3, cr13, cr0, {3}
    1be4:	ldr	r2, [pc, #1700]	; 2290 <sp3_init+0x2098>
    1be8:	ldr	r3, [r3, r2]
    1bec:	add	r3, r3, #180	; 0xb4
    1bf0:	ldr	r3, [r3]
    1bf4:	mov	r1, #4
    1bf8:	mov	r0, r3
    1bfc:	bl	0 <coda_type_set_read_type>
    1c00:	mrc	15, 0, r3, cr13, cr0, {3}
    1c04:	ldr	r2, [pc, #1668]	; 2290 <sp3_init+0x2098>
    1c08:	ldr	r3, [r3, r2]
    1c0c:	add	r3, r3, #180	; 0xb4
    1c10:	ldr	r1, [r3]
    1c14:	mov	r2, #32
    1c18:	mov	r3, #0
    1c1c:	mov	r0, r1
    1c20:	bl	0 <coda_type_set_bit_size>
    1c24:	mrc	15, 0, r3, cr13, cr0, {3}
    1c28:	ldr	r2, [pc, #1632]	; 2290 <sp3_init+0x2098>
    1c2c:	ldr	r3, [r3, r2]
    1c30:	add	r3, r3, #180	; 0xb4
    1c34:	ldr	r3, [r3]
    1c38:	movw	r1, #0
    1c3c:	movt	r1, #0
    1c40:	mov	r0, r3
    1c44:	bl	0 <coda_type_set_description>
    1c48:	mrc	15, 0, r3, cr13, cr0, {3}
    1c4c:	ldr	r2, [pc, #1596]	; 2290 <sp3_init+0x2098>
    1c50:	ldr	r3, [r3, r2]
    1c54:	add	r4, r3, #184	; 0xb8
    1c58:	mov	r1, #3
    1c5c:	mov	r0, #9
    1c60:	bl	0 <coda_type_number_new>
    1c64:	mov	r3, r0
    1c68:	str	r3, [r4]
    1c6c:	mrc	15, 0, r3, cr13, cr0, {3}
    1c70:	ldr	r2, [pc, #1560]	; 2290 <sp3_init+0x2098>
    1c74:	ldr	r3, [r3, r2]
    1c78:	add	r3, r3, #184	; 0xb8
    1c7c:	ldr	r3, [r3]
    1c80:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c84:	mov	r0, r3
    1c88:	bl	0 <coda_type_number_set_endianness>
    1c8c:	mrc	15, 0, r3, cr13, cr0, {3}
    1c90:	ldr	r2, [pc, #1528]	; 2290 <sp3_init+0x2098>
    1c94:	ldr	r3, [r3, r2]
    1c98:	add	r3, r3, #184	; 0xb8
    1c9c:	ldr	r1, [r3]
    1ca0:	mov	r2, #64	; 0x40
    1ca4:	mov	r3, #0
    1ca8:	mov	r0, r1
    1cac:	bl	0 <coda_type_set_bit_size>
    1cb0:	mrc	15, 0, r3, cr13, cr0, {3}
    1cb4:	ldr	r2, [pc, #1492]	; 2290 <sp3_init+0x2098>
    1cb8:	ldr	r3, [r3, r2]
    1cbc:	add	r3, r3, #184	; 0xb8
    1cc0:	ldr	r3, [r3]
    1cc4:	movw	r1, #0
    1cc8:	movt	r1, #0
    1ccc:	mov	r0, r3
    1cd0:	bl	0 <coda_type_set_description>
    1cd4:	mrc	15, 0, r3, cr13, cr0, {3}
    1cd8:	ldr	r2, [pc, #1456]	; 2290 <sp3_init+0x2098>
    1cdc:	ldr	r3, [r3, r2]
    1ce0:	add	r3, r3, #184	; 0xb8
    1ce4:	ldr	r3, [r3]
    1ce8:	movw	r1, #0
    1cec:	movt	r1, #0
    1cf0:	mov	r0, r3
    1cf4:	bl	0 <coda_type_number_set_unit>
    1cf8:	mrc	15, 0, r3, cr13, cr0, {3}
    1cfc:	ldr	r2, [pc, #1420]	; 2290 <sp3_init+0x2098>
    1d00:	ldr	r3, [r3, r2]
    1d04:	add	r4, r3, #188	; 0xbc
    1d08:	mov	r1, #3
    1d0c:	mov	r0, #9
    1d10:	bl	0 <coda_type_number_new>
    1d14:	mov	r3, r0
    1d18:	str	r3, [r4]
    1d1c:	mrc	15, 0, r3, cr13, cr0, {3}
    1d20:	ldr	r2, [pc, #1384]	; 2290 <sp3_init+0x2098>
    1d24:	ldr	r3, [r3, r2]
    1d28:	add	r3, r3, #188	; 0xbc
    1d2c:	ldr	r3, [r3]
    1d30:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d34:	mov	r0, r3
    1d38:	bl	0 <coda_type_number_set_endianness>
    1d3c:	mrc	15, 0, r3, cr13, cr0, {3}
    1d40:	ldr	r2, [pc, #1352]	; 2290 <sp3_init+0x2098>
    1d44:	ldr	r3, [r3, r2]
    1d48:	add	r3, r3, #188	; 0xbc
    1d4c:	ldr	r1, [r3]
    1d50:	mov	r2, #64	; 0x40
    1d54:	mov	r3, #0
    1d58:	mov	r0, r1
    1d5c:	bl	0 <coda_type_set_bit_size>
    1d60:	mrc	15, 0, r3, cr13, cr0, {3}
    1d64:	ldr	r2, [pc, #1316]	; 2290 <sp3_init+0x2098>
    1d68:	ldr	r3, [r3, r2]
    1d6c:	add	r3, r3, #188	; 0xbc
    1d70:	ldr	r3, [r3]
    1d74:	movw	r1, #0
    1d78:	movt	r1, #0
    1d7c:	mov	r0, r3
    1d80:	bl	0 <coda_type_set_description>
    1d84:	mrc	15, 0, r3, cr13, cr0, {3}
    1d88:	ldr	r2, [pc, #1280]	; 2290 <sp3_init+0x2098>
    1d8c:	ldr	r3, [r3, r2]
    1d90:	add	r3, r3, #188	; 0xbc
    1d94:	ldr	r3, [r3]
    1d98:	movw	r1, #0
    1d9c:	movt	r1, #0
    1da0:	mov	r0, r3
    1da4:	bl	0 <coda_type_number_set_unit>
    1da8:	mrc	15, 0, r3, cr13, cr0, {3}
    1dac:	ldr	r2, [pc, #1244]	; 2290 <sp3_init+0x2098>
    1db0:	ldr	r3, [r3, r2]
    1db4:	add	r4, r3, #192	; 0xc0
    1db8:	mov	r1, #3
    1dbc:	mov	r0, #9
    1dc0:	bl	0 <coda_type_number_new>
    1dc4:	mov	r3, r0
    1dc8:	str	r3, [r4]
    1dcc:	mrc	15, 0, r3, cr13, cr0, {3}
    1dd0:	ldr	r2, [pc, #1208]	; 2290 <sp3_init+0x2098>
    1dd4:	ldr	r3, [r3, r2]
    1dd8:	add	r3, r3, #192	; 0xc0
    1ddc:	ldr	r3, [r3]
    1de0:	ldr	r1, [fp, #-20]	; 0xffffffec
    1de4:	mov	r0, r3
    1de8:	bl	0 <coda_type_number_set_endianness>
    1dec:	mrc	15, 0, r3, cr13, cr0, {3}
    1df0:	ldr	r2, [pc, #1176]	; 2290 <sp3_init+0x2098>
    1df4:	ldr	r3, [r3, r2]
    1df8:	add	r3, r3, #192	; 0xc0
    1dfc:	ldr	r1, [r3]
    1e00:	mov	r2, #64	; 0x40
    1e04:	mov	r3, #0
    1e08:	mov	r0, r1
    1e0c:	bl	0 <coda_type_set_bit_size>
    1e10:	mrc	15, 0, r3, cr13, cr0, {3}
    1e14:	ldr	r2, [pc, #1140]	; 2290 <sp3_init+0x2098>
    1e18:	ldr	r3, [r3, r2]
    1e1c:	add	r3, r3, #192	; 0xc0
    1e20:	ldr	r3, [r3]
    1e24:	movw	r1, #0
    1e28:	movt	r1, #0
    1e2c:	mov	r0, r3
    1e30:	bl	0 <coda_type_set_description>
    1e34:	mrc	15, 0, r3, cr13, cr0, {3}
    1e38:	ldr	r2, [pc, #1104]	; 2290 <sp3_init+0x2098>
    1e3c:	ldr	r3, [r3, r2]
    1e40:	add	r3, r3, #192	; 0xc0
    1e44:	ldr	r3, [r3]
    1e48:	movw	r1, #0
    1e4c:	movt	r1, #0
    1e50:	mov	r0, r3
    1e54:	bl	0 <coda_type_number_set_unit>
    1e58:	mrc	15, 0, r3, cr13, cr0, {3}
    1e5c:	ldr	r2, [pc, #1068]	; 2290 <sp3_init+0x2098>
    1e60:	ldr	r3, [r3, r2]
    1e64:	add	r4, r3, #196	; 0xc4
    1e68:	mov	r1, #3
    1e6c:	mov	r0, #9
    1e70:	bl	0 <coda_type_number_new>
    1e74:	mov	r3, r0
    1e78:	str	r3, [r4]
    1e7c:	mrc	15, 0, r3, cr13, cr0, {3}
    1e80:	ldr	r2, [pc, #1032]	; 2290 <sp3_init+0x2098>
    1e84:	ldr	r3, [r3, r2]
    1e88:	add	r3, r3, #196	; 0xc4
    1e8c:	ldr	r3, [r3]
    1e90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1e94:	mov	r0, r3
    1e98:	bl	0 <coda_type_number_set_endianness>
    1e9c:	mrc	15, 0, r3, cr13, cr0, {3}
    1ea0:	ldr	r2, [pc, #1000]	; 2290 <sp3_init+0x2098>
    1ea4:	ldr	r3, [r3, r2]
    1ea8:	add	r3, r3, #196	; 0xc4
    1eac:	ldr	r1, [r3]
    1eb0:	mov	r2, #64	; 0x40
    1eb4:	mov	r3, #0
    1eb8:	mov	r0, r1
    1ebc:	bl	0 <coda_type_set_bit_size>
    1ec0:	mrc	15, 0, r3, cr13, cr0, {3}
    1ec4:	ldr	r2, [pc, #964]	; 2290 <sp3_init+0x2098>
    1ec8:	ldr	r3, [r3, r2]
    1ecc:	add	r3, r3, #196	; 0xc4
    1ed0:	ldr	r3, [r3]
    1ed4:	movw	r1, #0
    1ed8:	movt	r1, #0
    1edc:	mov	r0, r3
    1ee0:	bl	0 <coda_type_set_description>
    1ee4:	mrc	15, 0, r3, cr13, cr0, {3}
    1ee8:	ldr	r2, [pc, #928]	; 2290 <sp3_init+0x2098>
    1eec:	ldr	r3, [r3, r2]
    1ef0:	add	r3, r3, #196	; 0xc4
    1ef4:	ldr	r3, [r3]
    1ef8:	movw	r1, #0
    1efc:	movt	r1, #0
    1f00:	mov	r0, r3
    1f04:	bl	0 <coda_type_number_set_unit>
    1f08:	mrc	15, 0, r3, cr13, cr0, {3}
    1f0c:	ldr	r2, [pc, #892]	; 2290 <sp3_init+0x2098>
    1f10:	ldr	r3, [r3, r2]
    1f14:	add	r4, r3, #200	; 0xc8
    1f18:	mov	r1, #2
    1f1c:	mov	r0, #9
    1f20:	bl	0 <coda_type_number_new>
    1f24:	mov	r3, r0
    1f28:	str	r3, [r4]
    1f2c:	mrc	15, 0, r3, cr13, cr0, {3}
    1f30:	ldr	r2, [pc, #856]	; 2290 <sp3_init+0x2098>
    1f34:	ldr	r3, [r3, r2]
    1f38:	add	r3, r3, #200	; 0xc8
    1f3c:	ldr	r3, [r3]
    1f40:	ldr	r1, [fp, #-20]	; 0xffffffec
    1f44:	mov	r0, r3
    1f48:	bl	0 <coda_type_number_set_endianness>
    1f4c:	mrc	15, 0, r3, cr13, cr0, {3}
    1f50:	ldr	r2, [pc, #824]	; 2290 <sp3_init+0x2098>
    1f54:	ldr	r3, [r3, r2]
    1f58:	add	r3, r3, #200	; 0xc8
    1f5c:	ldr	r3, [r3]
    1f60:	mov	r1, #0
    1f64:	mov	r0, r3
    1f68:	bl	0 <coda_type_set_read_type>
    1f6c:	mrc	15, 0, r3, cr13, cr0, {3}
    1f70:	ldr	r2, [pc, #792]	; 2290 <sp3_init+0x2098>
    1f74:	ldr	r3, [r3, r2]
    1f78:	add	r3, r3, #200	; 0xc8
    1f7c:	ldr	r1, [r3]
    1f80:	mov	r2, #8
    1f84:	mov	r3, #0
    1f88:	mov	r0, r1
    1f8c:	bl	0 <coda_type_set_bit_size>
    1f90:	mrc	15, 0, r3, cr13, cr0, {3}
    1f94:	ldr	r2, [pc, #756]	; 2290 <sp3_init+0x2098>
    1f98:	ldr	r3, [r3, r2]
    1f9c:	add	r3, r3, #200	; 0xc8
    1fa0:	ldr	r3, [r3]
    1fa4:	movw	r1, #0
    1fa8:	movt	r1, #0
    1fac:	mov	r0, r3
    1fb0:	bl	0 <coda_type_set_description>
    1fb4:	mrc	15, 0, r3, cr13, cr0, {3}
    1fb8:	ldr	r2, [pc, #720]	; 2290 <sp3_init+0x2098>
    1fbc:	ldr	r3, [r3, r2]
    1fc0:	add	r4, r3, #204	; 0xcc
    1fc4:	mov	r1, #2
    1fc8:	mov	r0, #9
    1fcc:	bl	0 <coda_type_number_new>
    1fd0:	mov	r3, r0
    1fd4:	str	r3, [r4]
    1fd8:	mrc	15, 0, r3, cr13, cr0, {3}
    1fdc:	ldr	r2, [pc, #684]	; 2290 <sp3_init+0x2098>
    1fe0:	ldr	r3, [r3, r2]
    1fe4:	add	r3, r3, #204	; 0xcc
    1fe8:	ldr	r3, [r3]
    1fec:	ldr	r1, [fp, #-20]	; 0xffffffec
    1ff0:	mov	r0, r3
    1ff4:	bl	0 <coda_type_number_set_endianness>
    1ff8:	mrc	15, 0, r3, cr13, cr0, {3}
    1ffc:	ldr	r2, [pc, #652]	; 2290 <sp3_init+0x2098>
    2000:	ldr	r3, [r3, r2]
    2004:	add	r3, r3, #204	; 0xcc
    2008:	ldr	r3, [r3]
    200c:	mov	r1, #0
    2010:	mov	r0, r3
    2014:	bl	0 <coda_type_set_read_type>
    2018:	mrc	15, 0, r3, cr13, cr0, {3}
    201c:	ldr	r2, [pc, #620]	; 2290 <sp3_init+0x2098>
    2020:	ldr	r3, [r3, r2]
    2024:	add	r3, r3, #204	; 0xcc
    2028:	ldr	r1, [r3]
    202c:	mov	r2, #8
    2030:	mov	r3, #0
    2034:	mov	r0, r1
    2038:	bl	0 <coda_type_set_bit_size>
    203c:	mrc	15, 0, r3, cr13, cr0, {3}
    2040:	ldr	r2, [pc, #584]	; 2290 <sp3_init+0x2098>
    2044:	ldr	r3, [r3, r2]
    2048:	add	r3, r3, #204	; 0xcc
    204c:	ldr	r3, [r3]
    2050:	movw	r1, #0
    2054:	movt	r1, #0
    2058:	mov	r0, r3
    205c:	bl	0 <coda_type_set_description>
    2060:	mrc	15, 0, r3, cr13, cr0, {3}
    2064:	ldr	r2, [pc, #548]	; 2290 <sp3_init+0x2098>
    2068:	ldr	r3, [r3, r2]
    206c:	add	r4, r3, #208	; 0xd0
    2070:	mov	r1, #2
    2074:	mov	r0, #9
    2078:	bl	0 <coda_type_number_new>
    207c:	mov	r3, r0
    2080:	str	r3, [r4]
    2084:	mrc	15, 0, r3, cr13, cr0, {3}
    2088:	ldr	r2, [pc, #512]	; 2290 <sp3_init+0x2098>
    208c:	ldr	r3, [r3, r2]
    2090:	add	r3, r3, #208	; 0xd0
    2094:	ldr	r3, [r3]
    2098:	ldr	r1, [fp, #-20]	; 0xffffffec
    209c:	mov	r0, r3
    20a0:	bl	0 <coda_type_number_set_endianness>
    20a4:	mrc	15, 0, r3, cr13, cr0, {3}
    20a8:	ldr	r2, [pc, #480]	; 2290 <sp3_init+0x2098>
    20ac:	ldr	r3, [r3, r2]
    20b0:	add	r3, r3, #208	; 0xd0
    20b4:	ldr	r3, [r3]
    20b8:	mov	r1, #0
    20bc:	mov	r0, r3
    20c0:	bl	0 <coda_type_set_read_type>
    20c4:	mrc	15, 0, r3, cr13, cr0, {3}
    20c8:	ldr	r2, [pc, #448]	; 2290 <sp3_init+0x2098>
    20cc:	ldr	r3, [r3, r2]
    20d0:	add	r3, r3, #208	; 0xd0
    20d4:	ldr	r1, [r3]
    20d8:	mov	r2, #8
    20dc:	mov	r3, #0
    20e0:	mov	r0, r1
    20e4:	bl	0 <coda_type_set_bit_size>
    20e8:	mrc	15, 0, r3, cr13, cr0, {3}
    20ec:	ldr	r2, [pc, #412]	; 2290 <sp3_init+0x2098>
    20f0:	ldr	r3, [r3, r2]
    20f4:	add	r3, r3, #208	; 0xd0
    20f8:	ldr	r3, [r3]
    20fc:	movw	r1, #0
    2100:	movt	r1, #0
    2104:	mov	r0, r3
    2108:	bl	0 <coda_type_set_description>
    210c:	mrc	15, 0, r3, cr13, cr0, {3}
    2110:	ldr	r2, [pc, #376]	; 2290 <sp3_init+0x2098>
    2114:	ldr	r3, [r3, r2]
    2118:	add	r4, r3, #212	; 0xd4
    211c:	mov	r1, #2
    2120:	mov	r0, #9
    2124:	bl	0 <coda_type_number_new>
    2128:	mov	r3, r0
    212c:	str	r3, [r4]
    2130:	mrc	15, 0, r3, cr13, cr0, {3}
    2134:	ldr	r2, [pc, #340]	; 2290 <sp3_init+0x2098>
    2138:	ldr	r3, [r3, r2]
    213c:	add	r3, r3, #212	; 0xd4
    2140:	ldr	r3, [r3]
    2144:	ldr	r1, [fp, #-20]	; 0xffffffec
    2148:	mov	r0, r3
    214c:	bl	0 <coda_type_number_set_endianness>
    2150:	mrc	15, 0, r3, cr13, cr0, {3}
    2154:	ldr	r2, [pc, #308]	; 2290 <sp3_init+0x2098>
    2158:	ldr	r3, [r3, r2]
    215c:	add	r3, r3, #212	; 0xd4
    2160:	ldr	r3, [r3]
    2164:	mov	r1, #2
    2168:	mov	r0, r3
    216c:	bl	0 <coda_type_set_read_type>
    2170:	mrc	15, 0, r3, cr13, cr0, {3}
    2174:	ldr	r2, [pc, #276]	; 2290 <sp3_init+0x2098>
    2178:	ldr	r3, [r3, r2]
    217c:	add	r3, r3, #212	; 0xd4
    2180:	ldr	r1, [r3]
    2184:	mov	r2, #16
    2188:	mov	r3, #0
    218c:	mov	r0, r1
    2190:	bl	0 <coda_type_set_bit_size>
    2194:	mrc	15, 0, r3, cr13, cr0, {3}
    2198:	ldr	r2, [pc, #240]	; 2290 <sp3_init+0x2098>
    219c:	ldr	r3, [r3, r2]
    21a0:	add	r3, r3, #212	; 0xd4
    21a4:	ldr	r3, [r3]
    21a8:	movw	r1, #0
    21ac:	movt	r1, #0
    21b0:	mov	r0, r3
    21b4:	bl	0 <coda_type_set_description>
    21b8:	mrc	15, 0, r3, cr13, cr0, {3}
    21bc:	ldr	r2, [pc, #204]	; 2290 <sp3_init+0x2098>
    21c0:	ldr	r3, [r3, r2]
    21c4:	add	r4, r3, #220	; 0xdc
    21c8:	mov	r1, #2
    21cc:	mov	r0, #9
    21d0:	bl	0 <coda_type_number_new>
    21d4:	mov	r3, r0
    21d8:	str	r3, [r4]
    21dc:	mrc	15, 0, r3, cr13, cr0, {3}
    21e0:	ldr	r2, [pc, #168]	; 2290 <sp3_init+0x2098>
    21e4:	ldr	r3, [r3, r2]
    21e8:	add	r3, r3, #220	; 0xdc
    21ec:	ldr	r3, [r3]
    21f0:	ldr	r1, [fp, #-20]	; 0xffffffec
    21f4:	mov	r0, r3
    21f8:	bl	0 <coda_type_number_set_endianness>
    21fc:	mrc	15, 0, r3, cr13, cr0, {3}
    2200:	ldr	r2, [pc, #136]	; 2290 <sp3_init+0x2098>
    2204:	ldr	r3, [r3, r2]
    2208:	add	r3, r3, #220	; 0xdc
    220c:	ldr	r3, [r3]
    2210:	mov	r1, #2
    2214:	mov	r0, r3
    2218:	bl	0 <coda_type_set_read_type>
    221c:	mrc	15, 0, r3, cr13, cr0, {3}
    2220:	ldr	r2, [pc, #104]	; 2290 <sp3_init+0x2098>
    2224:	ldr	r3, [r3, r2]
    2228:	add	r3, r3, #220	; 0xdc
    222c:	ldr	r1, [r3]
    2230:	mov	r2, #16
    2234:	mov	r3, #0
    2238:	mov	r0, r1
    223c:	bl	0 <coda_type_set_bit_size>
    2240:	mrc	15, 0, r3, cr13, cr0, {3}
    2244:	ldr	r2, [pc, #68]	; 2290 <sp3_init+0x2098>
    2248:	ldr	r3, [r3, r2]
    224c:	add	r3, r3, #220	; 0xdc
    2250:	ldr	r3, [r3]
    2254:	movw	r1, #0
    2258:	movt	r1, #0
    225c:	mov	r0, r3
    2260:	bl	0 <coda_type_set_description>
    2264:	mrc	15, 0, r3, cr13, cr0, {3}
    2268:	ldr	r2, [pc, #32]	; 2290 <sp3_init+0x2098>
    226c:	ldr	r3, [r3, r2]
    2270:	add	r3, r3, #220	; 0xdc
    2274:	ldr	r3, [r3]
    2278:	movw	r1, #0
    227c:	movt	r1, #0
    2280:	mov	r0, r3
    2284:	bl	0 <coda_type_number_set_unit>
    2288:	mrc	15, 0, r3, cr13, cr0, {3}
    228c:	b	2294 <sp3_init+0x209c>
    2290:	.word	0x00000000
    2294:	ldr	r2, [pc, #-12]	; 2290 <sp3_init+0x2098>
    2298:	ldr	r3, [r3, r2]
    229c:	add	r4, r3, #224	; 0xe0
    22a0:	mov	r1, #2
    22a4:	mov	r0, #9
    22a8:	bl	0 <coda_type_number_new>
    22ac:	mov	r3, r0
    22b0:	str	r3, [r4]
    22b4:	mrc	15, 0, r3, cr13, cr0, {3}
    22b8:	ldr	r2, [pc, #-48]	; 2290 <sp3_init+0x2098>
    22bc:	ldr	r3, [r3, r2]
    22c0:	add	r3, r3, #224	; 0xe0
    22c4:	ldr	r3, [r3]
    22c8:	ldr	r1, [fp, #-20]	; 0xffffffec
    22cc:	mov	r0, r3
    22d0:	bl	0 <coda_type_number_set_endianness>
    22d4:	mrc	15, 0, r3, cr13, cr0, {3}
    22d8:	ldr	r2, [pc, #-80]	; 2290 <sp3_init+0x2098>
    22dc:	ldr	r3, [r3, r2]
    22e0:	add	r3, r3, #224	; 0xe0
    22e4:	ldr	r3, [r3]
    22e8:	mov	r1, #2
    22ec:	mov	r0, r3
    22f0:	bl	0 <coda_type_set_read_type>
    22f4:	mrc	15, 0, r3, cr13, cr0, {3}
    22f8:	ldr	r2, [pc, #-112]	; 2290 <sp3_init+0x2098>
    22fc:	ldr	r3, [r3, r2]
    2300:	add	r3, r3, #224	; 0xe0
    2304:	ldr	r1, [r3]
    2308:	mov	r2, #16
    230c:	mov	r3, #0
    2310:	mov	r0, r1
    2314:	bl	0 <coda_type_set_bit_size>
    2318:	mrc	15, 0, r3, cr13, cr0, {3}
    231c:	ldr	r2, [pc, #-148]	; 2290 <sp3_init+0x2098>
    2320:	ldr	r3, [r3, r2]
    2324:	add	r3, r3, #224	; 0xe0
    2328:	ldr	r3, [r3]
    232c:	movw	r1, #0
    2330:	movt	r1, #0
    2334:	mov	r0, r3
    2338:	bl	0 <coda_type_set_description>
    233c:	mrc	15, 0, r3, cr13, cr0, {3}
    2340:	ldr	r2, [pc, #-184]	; 2290 <sp3_init+0x2098>
    2344:	ldr	r3, [r3, r2]
    2348:	add	r3, r3, #224	; 0xe0
    234c:	ldr	r3, [r3]
    2350:	movw	r1, #0
    2354:	movt	r1, #0
    2358:	mov	r0, r3
    235c:	bl	0 <coda_type_number_set_unit>
    2360:	mrc	15, 0, r3, cr13, cr0, {3}
    2364:	ldr	r2, [pc, #-220]	; 2290 <sp3_init+0x2098>
    2368:	ldr	r3, [r3, r2]
    236c:	add	r4, r3, #228	; 0xe4
    2370:	mov	r1, #2
    2374:	mov	r0, #9
    2378:	bl	0 <coda_type_number_new>
    237c:	mov	r3, r0
    2380:	str	r3, [r4]
    2384:	mrc	15, 0, r3, cr13, cr0, {3}
    2388:	ldr	r2, [pc, #-256]	; 2290 <sp3_init+0x2098>
    238c:	ldr	r3, [r3, r2]
    2390:	add	r3, r3, #228	; 0xe4
    2394:	ldr	r3, [r3]
    2398:	ldr	r1, [fp, #-20]	; 0xffffffec
    239c:	mov	r0, r3
    23a0:	bl	0 <coda_type_number_set_endianness>
    23a4:	mrc	15, 0, r3, cr13, cr0, {3}
    23a8:	ldr	r2, [pc, #-288]	; 2290 <sp3_init+0x2098>
    23ac:	ldr	r3, [r3, r2]
    23b0:	add	r3, r3, #228	; 0xe4
    23b4:	ldr	r3, [r3]
    23b8:	mov	r1, #2
    23bc:	mov	r0, r3
    23c0:	bl	0 <coda_type_set_read_type>
    23c4:	mrc	15, 0, r3, cr13, cr0, {3}
    23c8:	ldr	r2, [pc, #-320]	; 2290 <sp3_init+0x2098>
    23cc:	ldr	r3, [r3, r2]
    23d0:	add	r3, r3, #228	; 0xe4
    23d4:	ldr	r1, [r3]
    23d8:	mov	r2, #16
    23dc:	mov	r3, #0
    23e0:	mov	r0, r1
    23e4:	bl	0 <coda_type_set_bit_size>
    23e8:	mrc	15, 0, r3, cr13, cr0, {3}
    23ec:	ldr	r2, [pc, #-356]	; 2290 <sp3_init+0x2098>
    23f0:	ldr	r3, [r3, r2]
    23f4:	add	r3, r3, #228	; 0xe4
    23f8:	ldr	r3, [r3]
    23fc:	movw	r1, #0
    2400:	movt	r1, #0
    2404:	mov	r0, r3
    2408:	bl	0 <coda_type_set_description>
    240c:	mrc	15, 0, r3, cr13, cr0, {3}
    2410:	ldr	r2, [pc, #-392]	; 2290 <sp3_init+0x2098>
    2414:	ldr	r3, [r3, r2]
    2418:	add	r3, r3, #228	; 0xe4
    241c:	ldr	r3, [r3]
    2420:	movw	r1, #0
    2424:	movt	r1, #0
    2428:	mov	r0, r3
    242c:	bl	0 <coda_type_number_set_unit>
    2430:	mrc	15, 0, r3, cr13, cr0, {3}
    2434:	ldr	r2, [pc, #-428]	; 2290 <sp3_init+0x2098>
    2438:	ldr	r3, [r3, r2]
    243c:	add	r4, r3, #232	; 0xe8
    2440:	mov	r1, #2
    2444:	mov	r0, #9
    2448:	bl	0 <coda_type_number_new>
    244c:	mov	r3, r0
    2450:	str	r3, [r4]
    2454:	mrc	15, 0, r3, cr13, cr0, {3}
    2458:	ldr	r2, [pc, #-464]	; 2290 <sp3_init+0x2098>
    245c:	ldr	r3, [r3, r2]
    2460:	add	r3, r3, #232	; 0xe8
    2464:	ldr	r3, [r3]
    2468:	ldr	r1, [fp, #-20]	; 0xffffffec
    246c:	mov	r0, r3
    2470:	bl	0 <coda_type_number_set_endianness>
    2474:	mrc	15, 0, r3, cr13, cr0, {3}
    2478:	ldr	r2, [pc, #-496]	; 2290 <sp3_init+0x2098>
    247c:	ldr	r3, [r3, r2]
    2480:	add	r3, r3, #232	; 0xe8
    2484:	ldr	r3, [r3]
    2488:	mov	r1, #2
    248c:	mov	r0, r3
    2490:	bl	0 <coda_type_set_read_type>
    2494:	mrc	15, 0, r3, cr13, cr0, {3}
    2498:	ldr	r2, [pc, #-528]	; 2290 <sp3_init+0x2098>
    249c:	ldr	r3, [r3, r2]
    24a0:	add	r3, r3, #232	; 0xe8
    24a4:	ldr	r1, [r3]
    24a8:	mov	r2, #16
    24ac:	mov	r3, #0
    24b0:	mov	r0, r1
    24b4:	bl	0 <coda_type_set_bit_size>
    24b8:	mrc	15, 0, r3, cr13, cr0, {3}
    24bc:	ldr	r2, [pc, #-564]	; 2290 <sp3_init+0x2098>
    24c0:	ldr	r3, [r3, r2]
    24c4:	add	r3, r3, #232	; 0xe8
    24c8:	ldr	r3, [r3]
    24cc:	movw	r1, #0
    24d0:	movt	r1, #0
    24d4:	mov	r0, r3
    24d8:	bl	0 <coda_type_set_description>
    24dc:	mrc	15, 0, r3, cr13, cr0, {3}
    24e0:	ldr	r2, [pc, #-600]	; 2290 <sp3_init+0x2098>
    24e4:	ldr	r3, [r3, r2]
    24e8:	add	r3, r3, #232	; 0xe8
    24ec:	ldr	r3, [r3]
    24f0:	movw	r1, #0
    24f4:	movt	r1, #0
    24f8:	mov	r0, r3
    24fc:	bl	0 <coda_type_number_set_unit>
    2500:	mrc	15, 0, r3, cr13, cr0, {3}
    2504:	ldr	r2, [pc, #-636]	; 2290 <sp3_init+0x2098>
    2508:	ldr	r3, [r3, r2]
    250c:	add	r4, r3, #236	; 0xec
    2510:	mov	r1, #2
    2514:	mov	r0, #9
    2518:	bl	0 <coda_type_number_new>
    251c:	mov	r3, r0
    2520:	str	r3, [r4]
    2524:	mrc	15, 0, r3, cr13, cr0, {3}
    2528:	ldr	r2, [pc, #-672]	; 2290 <sp3_init+0x2098>
    252c:	ldr	r3, [r3, r2]
    2530:	add	r3, r3, #236	; 0xec
    2534:	ldr	r3, [r3]
    2538:	ldr	r1, [fp, #-20]	; 0xffffffec
    253c:	mov	r0, r3
    2540:	bl	0 <coda_type_number_set_endianness>
    2544:	mrc	15, 0, r3, cr13, cr0, {3}
    2548:	ldr	r2, [pc, #-704]	; 2290 <sp3_init+0x2098>
    254c:	ldr	r3, [r3, r2]
    2550:	add	r3, r3, #236	; 0xec
    2554:	ldr	r3, [r3]
    2558:	mov	r1, #4
    255c:	mov	r0, r3
    2560:	bl	0 <coda_type_set_read_type>
    2564:	mrc	15, 0, r3, cr13, cr0, {3}
    2568:	ldr	r2, [pc, #-736]	; 2290 <sp3_init+0x2098>
    256c:	ldr	r3, [r3, r2]
    2570:	add	r3, r3, #236	; 0xec
    2574:	ldr	r1, [r3]
    2578:	mov	r2, #32
    257c:	mov	r3, #0
    2580:	mov	r0, r1
    2584:	bl	0 <coda_type_set_bit_size>
    2588:	mrc	15, 0, r3, cr13, cr0, {3}
    258c:	ldr	r2, [pc, #-772]	; 2290 <sp3_init+0x2098>
    2590:	ldr	r3, [r3, r2]
    2594:	add	r3, r3, #236	; 0xec
    2598:	ldr	r3, [r3]
    259c:	movw	r1, #0
    25a0:	movt	r1, #0
    25a4:	mov	r0, r3
    25a8:	bl	0 <coda_type_set_description>
    25ac:	mrc	15, 0, r3, cr13, cr0, {3}
    25b0:	ldr	r2, [pc, #-808]	; 2290 <sp3_init+0x2098>
    25b4:	ldr	r3, [r3, r2]
    25b8:	add	r4, r3, #240	; 0xf0
    25bc:	mov	r1, #2
    25c0:	mov	r0, #9
    25c4:	bl	0 <coda_type_number_new>
    25c8:	mov	r3, r0
    25cc:	str	r3, [r4]
    25d0:	mrc	15, 0, r3, cr13, cr0, {3}
    25d4:	ldr	r2, [pc, #-844]	; 2290 <sp3_init+0x2098>
    25d8:	ldr	r3, [r3, r2]
    25dc:	add	r3, r3, #240	; 0xf0
    25e0:	ldr	r3, [r3]
    25e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    25e8:	mov	r0, r3
    25ec:	bl	0 <coda_type_number_set_endianness>
    25f0:	mrc	15, 0, r3, cr13, cr0, {3}
    25f4:	ldr	r2, [pc, #-876]	; 2290 <sp3_init+0x2098>
    25f8:	ldr	r3, [r3, r2]
    25fc:	add	r3, r3, #240	; 0xf0
    2600:	ldr	r3, [r3]
    2604:	mov	r1, #4
    2608:	mov	r0, r3
    260c:	bl	0 <coda_type_set_read_type>
    2610:	mrc	15, 0, r3, cr13, cr0, {3}
    2614:	ldr	r2, [pc, #-908]	; 2290 <sp3_init+0x2098>
    2618:	ldr	r3, [r3, r2]
    261c:	add	r3, r3, #240	; 0xf0
    2620:	ldr	r1, [r3]
    2624:	mov	r2, #32
    2628:	mov	r3, #0
    262c:	mov	r0, r1
    2630:	bl	0 <coda_type_set_bit_size>
    2634:	mrc	15, 0, r3, cr13, cr0, {3}
    2638:	ldr	r2, [pc, #-944]	; 2290 <sp3_init+0x2098>
    263c:	ldr	r3, [r3, r2]
    2640:	add	r3, r3, #240	; 0xf0
    2644:	ldr	r3, [r3]
    2648:	movw	r1, #0
    264c:	movt	r1, #0
    2650:	mov	r0, r3
    2654:	bl	0 <coda_type_set_description>
    2658:	mrc	15, 0, r3, cr13, cr0, {3}
    265c:	ldr	r2, [pc, #-980]	; 2290 <sp3_init+0x2098>
    2660:	ldr	r3, [r3, r2]
    2664:	add	r4, r3, #244	; 0xf4
    2668:	mov	r1, #2
    266c:	mov	r0, #9
    2670:	bl	0 <coda_type_number_new>
    2674:	mov	r3, r0
    2678:	str	r3, [r4]
    267c:	mrc	15, 0, r3, cr13, cr0, {3}
    2680:	ldr	r2, [pc, #-1016]	; 2290 <sp3_init+0x2098>
    2684:	ldr	r3, [r3, r2]
    2688:	add	r3, r3, #244	; 0xf4
    268c:	ldr	r3, [r3]
    2690:	ldr	r1, [fp, #-20]	; 0xffffffec
    2694:	mov	r0, r3
    2698:	bl	0 <coda_type_number_set_endianness>
    269c:	mrc	15, 0, r3, cr13, cr0, {3}
    26a0:	ldr	r2, [pc, #-1048]	; 2290 <sp3_init+0x2098>
    26a4:	ldr	r3, [r3, r2]
    26a8:	add	r3, r3, #244	; 0xf4
    26ac:	ldr	r3, [r3]
    26b0:	mov	r1, #4
    26b4:	mov	r0, r3
    26b8:	bl	0 <coda_type_set_read_type>
    26bc:	mrc	15, 0, r3, cr13, cr0, {3}
    26c0:	ldr	r2, [pc, #-1080]	; 2290 <sp3_init+0x2098>
    26c4:	ldr	r3, [r3, r2]
    26c8:	add	r3, r3, #244	; 0xf4
    26cc:	ldr	r1, [r3]
    26d0:	mov	r2, #32
    26d4:	mov	r3, #0
    26d8:	mov	r0, r1
    26dc:	bl	0 <coda_type_set_bit_size>
    26e0:	mrc	15, 0, r3, cr13, cr0, {3}
    26e4:	ldr	r2, [pc, #-1116]	; 2290 <sp3_init+0x2098>
    26e8:	ldr	r3, [r3, r2]
    26ec:	add	r3, r3, #244	; 0xf4
    26f0:	ldr	r3, [r3]
    26f4:	movw	r1, #0
    26f8:	movt	r1, #0
    26fc:	mov	r0, r3
    2700:	bl	0 <coda_type_set_description>
    2704:	mrc	15, 0, r3, cr13, cr0, {3}
    2708:	ldr	r2, [pc, #-1152]	; 2290 <sp3_init+0x2098>
    270c:	ldr	r3, [r3, r2]
    2710:	add	r4, r3, #248	; 0xf8
    2714:	mov	r1, #2
    2718:	mov	r0, #9
    271c:	bl	0 <coda_type_number_new>
    2720:	mov	r3, r0
    2724:	str	r3, [r4]
    2728:	mrc	15, 0, r3, cr13, cr0, {3}
    272c:	ldr	r2, [pc, #-1188]	; 2290 <sp3_init+0x2098>
    2730:	ldr	r3, [r3, r2]
    2734:	add	r3, r3, #248	; 0xf8
    2738:	ldr	r3, [r3]
    273c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2740:	mov	r0, r3
    2744:	bl	0 <coda_type_number_set_endianness>
    2748:	mrc	15, 0, r3, cr13, cr0, {3}
    274c:	ldr	r2, [pc, #-1220]	; 2290 <sp3_init+0x2098>
    2750:	ldr	r3, [r3, r2]
    2754:	add	r3, r3, #248	; 0xf8
    2758:	ldr	r3, [r3]
    275c:	mov	r1, #4
    2760:	mov	r0, r3
    2764:	bl	0 <coda_type_set_read_type>
    2768:	mrc	15, 0, r3, cr13, cr0, {3}
    276c:	ldr	r2, [pc, #-1252]	; 2290 <sp3_init+0x2098>
    2770:	ldr	r3, [r3, r2]
    2774:	add	r3, r3, #248	; 0xf8
    2778:	ldr	r1, [r3]
    277c:	mov	r2, #32
    2780:	mov	r3, #0
    2784:	mov	r0, r1
    2788:	bl	0 <coda_type_set_bit_size>
    278c:	mrc	15, 0, r3, cr13, cr0, {3}
    2790:	ldr	r2, [pc, #-1288]	; 2290 <sp3_init+0x2098>
    2794:	ldr	r3, [r3, r2]
    2798:	add	r3, r3, #248	; 0xf8
    279c:	ldr	r3, [r3]
    27a0:	movw	r1, #0
    27a4:	movt	r1, #0
    27a8:	mov	r0, r3
    27ac:	bl	0 <coda_type_set_description>
    27b0:	mrc	15, 0, r3, cr13, cr0, {3}
    27b4:	ldr	r2, [pc, #-1324]	; 2290 <sp3_init+0x2098>
    27b8:	ldr	r3, [r3, r2]
    27bc:	add	r4, r3, #252	; 0xfc
    27c0:	mov	r1, #2
    27c4:	mov	r0, #9
    27c8:	bl	0 <coda_type_number_new>
    27cc:	mov	r3, r0
    27d0:	str	r3, [r4]
    27d4:	mrc	15, 0, r3, cr13, cr0, {3}
    27d8:	ldr	r2, [pc, #-1360]	; 2290 <sp3_init+0x2098>
    27dc:	ldr	r3, [r3, r2]
    27e0:	add	r3, r3, #252	; 0xfc
    27e4:	ldr	r3, [r3]
    27e8:	ldr	r1, [fp, #-20]	; 0xffffffec
    27ec:	mov	r0, r3
    27f0:	bl	0 <coda_type_number_set_endianness>
    27f4:	mrc	15, 0, r3, cr13, cr0, {3}
    27f8:	ldr	r2, [pc, #-1392]	; 2290 <sp3_init+0x2098>
    27fc:	ldr	r3, [r3, r2]
    2800:	add	r3, r3, #252	; 0xfc
    2804:	ldr	r3, [r3]
    2808:	mov	r1, #4
    280c:	mov	r0, r3
    2810:	bl	0 <coda_type_set_read_type>
    2814:	mrc	15, 0, r3, cr13, cr0, {3}
    2818:	ldr	r2, [pc, #-1424]	; 2290 <sp3_init+0x2098>
    281c:	ldr	r3, [r3, r2]
    2820:	add	r3, r3, #252	; 0xfc
    2824:	ldr	r1, [r3]
    2828:	mov	r2, #32
    282c:	mov	r3, #0
    2830:	mov	r0, r1
    2834:	bl	0 <coda_type_set_bit_size>
    2838:	mrc	15, 0, r3, cr13, cr0, {3}
    283c:	ldr	r2, [pc, #-1460]	; 2290 <sp3_init+0x2098>
    2840:	ldr	r3, [r3, r2]
    2844:	add	r3, r3, #252	; 0xfc
    2848:	ldr	r3, [r3]
    284c:	movw	r1, #0
    2850:	movt	r1, #0
    2854:	mov	r0, r3
    2858:	bl	0 <coda_type_set_description>
    285c:	mrc	15, 0, r3, cr13, cr0, {3}
    2860:	ldr	r2, [pc, #-1496]	; 2290 <sp3_init+0x2098>
    2864:	ldr	r3, [r3, r2]
    2868:	add	r4, r3, #256	; 0x100
    286c:	mov	r1, #2
    2870:	mov	r0, #9
    2874:	bl	0 <coda_type_number_new>
    2878:	mov	r3, r0
    287c:	str	r3, [r4]
    2880:	mrc	15, 0, r3, cr13, cr0, {3}
    2884:	ldr	r2, [pc, #-1532]	; 2290 <sp3_init+0x2098>
    2888:	ldr	r3, [r3, r2]
    288c:	add	r3, r3, #256	; 0x100
    2890:	ldr	r3, [r3]
    2894:	ldr	r1, [fp, #-20]	; 0xffffffec
    2898:	mov	r0, r3
    289c:	bl	0 <coda_type_number_set_endianness>
    28a0:	mrc	15, 0, r3, cr13, cr0, {3}
    28a4:	ldr	r2, [pc, #-1564]	; 2290 <sp3_init+0x2098>
    28a8:	ldr	r3, [r3, r2]
    28ac:	add	r3, r3, #256	; 0x100
    28b0:	ldr	r3, [r3]
    28b4:	mov	r1, #4
    28b8:	mov	r0, r3
    28bc:	bl	0 <coda_type_set_read_type>
    28c0:	mrc	15, 0, r3, cr13, cr0, {3}
    28c4:	ldr	r2, [pc, #-1596]	; 2290 <sp3_init+0x2098>
    28c8:	ldr	r3, [r3, r2]
    28cc:	add	r3, r3, #256	; 0x100
    28d0:	ldr	r1, [r3]
    28d4:	mov	r2, #32
    28d8:	mov	r3, #0
    28dc:	mov	r0, r1
    28e0:	bl	0 <coda_type_set_bit_size>
    28e4:	mrc	15, 0, r3, cr13, cr0, {3}
    28e8:	ldr	r2, [pc, #-1632]	; 2290 <sp3_init+0x2098>
    28ec:	ldr	r3, [r3, r2]
    28f0:	add	r3, r3, #256	; 0x100
    28f4:	ldr	r3, [r3]
    28f8:	movw	r1, #0
    28fc:	movt	r1, #0
    2900:	mov	r0, r3
    2904:	bl	0 <coda_type_set_description>
    2908:	mrc	15, 0, r3, cr13, cr0, {3}
    290c:	ldr	r2, [pc, #-1668]	; 2290 <sp3_init+0x2098>
    2910:	ldr	r3, [r3, r2]
    2914:	add	r4, r3, #60	; 0x3c
    2918:	mov	r0, #9
    291c:	bl	0 <coda_type_array_new>
    2920:	mov	r3, r0
    2924:	str	r3, [r4]
    2928:	mrc	15, 0, r3, cr13, cr0, {3}
    292c:	ldr	r2, [pc, #-1700]	; 2290 <sp3_init+0x2098>
    2930:	ldr	r3, [r3, r2]
    2934:	add	r3, r3, #60	; 0x3c
    2938:	ldr	r3, [r3]
    293c:	mov	r1, #0
    2940:	mov	r0, r3
    2944:	bl	0 <coda_type_array_add_variable_dimension>
    2948:	mrc	15, 0, r3, cr13, cr0, {3}
    294c:	ldr	r2, [pc, #-1732]	; 2290 <sp3_init+0x2098>
    2950:	ldr	r3, [r3, r2]
    2954:	add	r3, r3, #60	; 0x3c
    2958:	ldr	r0, [r3]
    295c:	mrc	15, 0, r3, cr13, cr0, {3}
    2960:	ldr	r2, [pc, #-1752]	; 2290 <sp3_init+0x2098>
    2964:	ldr	r3, [r3, r2]
    2968:	add	r3, r3, #56	; 0x38
    296c:	ldr	r3, [r3]
    2970:	mov	r1, r3
    2974:	bl	0 <coda_type_array_set_base_type>
    2978:	mrc	15, 0, r3, cr13, cr0, {3}
    297c:	ldr	r2, [pc, #-1780]	; 2290 <sp3_init+0x2098>
    2980:	ldr	r3, [r3, r2]
    2984:	add	r4, r3, #68	; 0x44
    2988:	mov	r0, #9
    298c:	bl	0 <coda_type_array_new>
    2990:	mov	r3, r0
    2994:	str	r3, [r4]
    2998:	mrc	15, 0, r3, cr13, cr0, {3}
    299c:	ldr	r2, [pc, #-1812]	; 2290 <sp3_init+0x2098>
    29a0:	ldr	r3, [r3, r2]
    29a4:	add	r3, r3, #68	; 0x44
    29a8:	ldr	r3, [r3]
    29ac:	mov	r1, #0
    29b0:	mov	r0, r3
    29b4:	bl	0 <coda_type_array_add_variable_dimension>
    29b8:	mrc	15, 0, r3, cr13, cr0, {3}
    29bc:	ldr	r2, [pc, #-1844]	; 2290 <sp3_init+0x2098>
    29c0:	ldr	r3, [r3, r2]
    29c4:	add	r3, r3, #68	; 0x44
    29c8:	ldr	r0, [r3]
    29cc:	mrc	15, 0, r3, cr13, cr0, {3}
    29d0:	ldr	r2, [pc, #-1864]	; 2290 <sp3_init+0x2098>
    29d4:	ldr	r3, [r3, r2]
    29d8:	add	r3, r3, #64	; 0x40
    29dc:	ldr	r3, [r3]
    29e0:	mov	r1, r3
    29e4:	bl	0 <coda_type_array_set_base_type>
    29e8:	mrc	15, 0, r3, cr13, cr0, {3}
    29ec:	ldr	r2, [pc, #-1892]	; 2290 <sp3_init+0x2098>
    29f0:	ldr	r3, [r3, r2]
    29f4:	add	r4, r3, #284	; 0x11c
    29f8:	mov	r0, #9
    29fc:	bl	0 <coda_type_record_new>
    2a00:	mov	r3, r0
    2a04:	str	r3, [r4]
    2a08:	movw	r0, #0
    2a0c:	movt	r0, #0
    2a10:	bl	0 <coda_type_record_field_new>
    2a14:	str	r0, [fp, #-24]	; 0xffffffe8
    2a18:	mrc	15, 0, r3, cr13, cr0, {3}
    2a1c:	ldr	r2, [pc, #-1940]	; 2290 <sp3_init+0x2098>
    2a20:	ldr	r3, [r3, r2]
    2a24:	ldr	r3, [r3]
    2a28:	mov	r1, r3
    2a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a30:	bl	0 <coda_type_record_field_set_type>
    2a34:	mrc	15, 0, r3, cr13, cr0, {3}
    2a38:	ldr	r2, [pc, #-1968]	; 2290 <sp3_init+0x2098>
    2a3c:	ldr	r3, [r3, r2]
    2a40:	add	r3, r3, #284	; 0x11c
    2a44:	ldr	r3, [r3]
    2a48:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a4c:	mov	r0, r3
    2a50:	bl	0 <coda_type_record_add_field>
    2a54:	movw	r0, #0
    2a58:	movt	r0, #0
    2a5c:	bl	0 <coda_type_record_field_new>
    2a60:	str	r0, [fp, #-24]	; 0xffffffe8
    2a64:	mrc	15, 0, r3, cr13, cr0, {3}
    2a68:	ldr	r2, [pc, #-2016]	; 2290 <sp3_init+0x2098>
    2a6c:	ldr	r3, [r3, r2]
    2a70:	add	r3, r3, #8
    2a74:	ldr	r3, [r3]
    2a78:	mov	r1, r3
    2a7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a80:	bl	0 <coda_type_record_field_set_type>
    2a84:	mrc	15, 0, r3, cr13, cr0, {3}
    2a88:	ldr	r2, [pc, #-2048]	; 2290 <sp3_init+0x2098>
    2a8c:	ldr	r3, [r3, r2]
    2a90:	add	r3, r3, #284	; 0x11c
    2a94:	ldr	r3, [r3]
    2a98:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a9c:	mov	r0, r3
    2aa0:	bl	0 <coda_type_record_add_field>
    2aa4:	movw	r0, #0
    2aa8:	movt	r0, #0
    2aac:	bl	0 <coda_type_record_field_new>
    2ab0:	str	r0, [fp, #-24]	; 0xffffffe8
    2ab4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ab8:	ldr	r2, [pc, #-2096]	; 2290 <sp3_init+0x2098>
    2abc:	ldr	r3, [r3, r2]
    2ac0:	add	r3, r3, #12
    2ac4:	ldr	r3, [r3]
    2ac8:	mov	r1, r3
    2acc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ad0:	bl	0 <coda_type_record_field_set_type>
    2ad4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ad8:	ldr	r2, [pc, #-2128]	; 2290 <sp3_init+0x2098>
    2adc:	ldr	r3, [r3, r2]
    2ae0:	add	r3, r3, #284	; 0x11c
    2ae4:	ldr	r3, [r3]
    2ae8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2aec:	mov	r0, r3
    2af0:	bl	0 <coda_type_record_add_field>
    2af4:	movw	r0, #0
    2af8:	movt	r0, #0
    2afc:	bl	0 <coda_type_record_field_new>
    2b00:	str	r0, [fp, #-24]	; 0xffffffe8
    2b04:	mrc	15, 0, r3, cr13, cr0, {3}
    2b08:	ldr	r2, [pc, #-2176]	; 2290 <sp3_init+0x2098>
    2b0c:	ldr	r3, [r3, r2]
    2b10:	add	r3, r3, #16
    2b14:	ldr	r3, [r3]
    2b18:	mov	r1, r3
    2b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b20:	bl	0 <coda_type_record_field_set_type>
    2b24:	mrc	15, 0, r3, cr13, cr0, {3}
    2b28:	ldr	r2, [pc, #-2208]	; 2290 <sp3_init+0x2098>
    2b2c:	ldr	r3, [r3, r2]
    2b30:	add	r3, r3, #284	; 0x11c
    2b34:	ldr	r3, [r3]
    2b38:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2b3c:	mov	r0, r3
    2b40:	bl	0 <coda_type_record_add_field>
    2b44:	movw	r0, #0
    2b48:	movt	r0, #0
    2b4c:	bl	0 <coda_type_record_field_new>
    2b50:	str	r0, [fp, #-24]	; 0xffffffe8
    2b54:	mrc	15, 0, r3, cr13, cr0, {3}
    2b58:	ldr	r2, [pc, #-2256]	; 2290 <sp3_init+0x2098>
    2b5c:	ldr	r3, [r3, r2]
    2b60:	add	r3, r3, #20
    2b64:	ldr	r3, [r3]
    2b68:	mov	r1, r3
    2b6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b70:	bl	0 <coda_type_record_field_set_type>
    2b74:	mrc	15, 0, r3, cr13, cr0, {3}
    2b78:	ldr	r2, [pc, #-2288]	; 2290 <sp3_init+0x2098>
    2b7c:	ldr	r3, [r3, r2]
    2b80:	add	r3, r3, #284	; 0x11c
    2b84:	ldr	r3, [r3]
    2b88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2b8c:	mov	r0, r3
    2b90:	bl	0 <coda_type_record_add_field>
    2b94:	movw	r0, #0
    2b98:	movt	r0, #0
    2b9c:	bl	0 <coda_type_record_field_new>
    2ba0:	str	r0, [fp, #-24]	; 0xffffffe8
    2ba4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ba8:	ldr	r2, [pc, #-2336]	; 2290 <sp3_init+0x2098>
    2bac:	ldr	r3, [r3, r2]
    2bb0:	add	r3, r3, #24
    2bb4:	ldr	r3, [r3]
    2bb8:	mov	r1, r3
    2bbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2bc0:	bl	0 <coda_type_record_field_set_type>
    2bc4:	mrc	15, 0, r3, cr13, cr0, {3}
    2bc8:	ldr	r2, [pc, #-2368]	; 2290 <sp3_init+0x2098>
    2bcc:	ldr	r3, [r3, r2]
    2bd0:	add	r3, r3, #284	; 0x11c
    2bd4:	ldr	r3, [r3]
    2bd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2bdc:	mov	r0, r3
    2be0:	bl	0 <coda_type_record_add_field>
    2be4:	movw	r0, #0
    2be8:	movt	r0, #0
    2bec:	bl	0 <coda_type_record_field_new>
    2bf0:	str	r0, [fp, #-24]	; 0xffffffe8
    2bf4:	mrc	15, 0, r3, cr13, cr0, {3}
    2bf8:	ldr	r2, [pc, #-2416]	; 2290 <sp3_init+0x2098>
    2bfc:	ldr	r3, [r3, r2]
    2c00:	add	r3, r3, #28
    2c04:	ldr	r3, [r3]
    2c08:	mov	r1, r3
    2c0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2c10:	bl	0 <coda_type_record_field_set_type>
    2c14:	mrc	15, 0, r3, cr13, cr0, {3}
    2c18:	ldr	r2, [pc, #-2448]	; 2290 <sp3_init+0x2098>
    2c1c:	ldr	r3, [r3, r2]
    2c20:	add	r3, r3, #284	; 0x11c
    2c24:	ldr	r3, [r3]
    2c28:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2c2c:	mov	r0, r3
    2c30:	bl	0 <coda_type_record_add_field>
    2c34:	movw	r0, #0
    2c38:	movt	r0, #0
    2c3c:	bl	0 <coda_type_record_field_new>
    2c40:	str	r0, [fp, #-24]	; 0xffffffe8
    2c44:	mrc	15, 0, r3, cr13, cr0, {3}
    2c48:	ldr	r2, [pc, #-2496]	; 2290 <sp3_init+0x2098>
    2c4c:	ldr	r3, [r3, r2]
    2c50:	add	r3, r3, #32
    2c54:	ldr	r3, [r3]
    2c58:	mov	r1, r3
    2c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2c60:	bl	0 <coda_type_record_field_set_type>
    2c64:	mrc	15, 0, r3, cr13, cr0, {3}
    2c68:	ldr	r2, [pc, #-2528]	; 2290 <sp3_init+0x2098>
    2c6c:	ldr	r3, [r3, r2]
    2c70:	add	r3, r3, #284	; 0x11c
    2c74:	ldr	r3, [r3]
    2c78:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2c7c:	mov	r0, r3
    2c80:	bl	0 <coda_type_record_add_field>
    2c84:	movw	r0, #0
    2c88:	movt	r0, #0
    2c8c:	bl	0 <coda_type_record_field_new>
    2c90:	str	r0, [fp, #-24]	; 0xffffffe8
    2c94:	mrc	15, 0, r3, cr13, cr0, {3}
    2c98:	ldr	r2, [pc, #-2576]	; 2290 <sp3_init+0x2098>
    2c9c:	ldr	r3, [r3, r2]
    2ca0:	add	r3, r3, #36	; 0x24
    2ca4:	ldr	r3, [r3]
    2ca8:	mov	r1, r3
    2cac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2cb0:	bl	0 <coda_type_record_field_set_type>
    2cb4:	mrc	15, 0, r3, cr13, cr0, {3}
    2cb8:	ldr	r2, [pc, #-2608]	; 2290 <sp3_init+0x2098>
    2cbc:	ldr	r3, [r3, r2]
    2cc0:	add	r3, r3, #284	; 0x11c
    2cc4:	ldr	r3, [r3]
    2cc8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2ccc:	mov	r0, r3
    2cd0:	bl	0 <coda_type_record_add_field>
    2cd4:	movw	r0, #0
    2cd8:	movt	r0, #0
    2cdc:	bl	0 <coda_type_record_field_new>
    2ce0:	str	r0, [fp, #-24]	; 0xffffffe8
    2ce4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ce8:	ldr	r2, [pc, #-2656]	; 2290 <sp3_init+0x2098>
    2cec:	ldr	r3, [r3, r2]
    2cf0:	add	r3, r3, #40	; 0x28
    2cf4:	ldr	r3, [r3]
    2cf8:	mov	r1, r3
    2cfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d00:	bl	0 <coda_type_record_field_set_type>
    2d04:	mrc	15, 0, r3, cr13, cr0, {3}
    2d08:	ldr	r2, [pc, #-2688]	; 2290 <sp3_init+0x2098>
    2d0c:	ldr	r3, [r3, r2]
    2d10:	add	r3, r3, #284	; 0x11c
    2d14:	ldr	r3, [r3]
    2d18:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2d1c:	mov	r0, r3
    2d20:	bl	0 <coda_type_record_add_field>
    2d24:	movw	r0, #0
    2d28:	movt	r0, #0
    2d2c:	bl	0 <coda_type_record_field_new>
    2d30:	str	r0, [fp, #-24]	; 0xffffffe8
    2d34:	mrc	15, 0, r3, cr13, cr0, {3}
    2d38:	ldr	r2, [pc, #-2736]	; 2290 <sp3_init+0x2098>
    2d3c:	ldr	r3, [r3, r2]
    2d40:	add	r3, r3, #44	; 0x2c
    2d44:	ldr	r3, [r3]
    2d48:	mov	r1, r3
    2d4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2d50:	bl	0 <coda_type_record_field_set_type>
    2d54:	mrc	15, 0, r3, cr13, cr0, {3}
    2d58:	ldr	r2, [pc, #-2768]	; 2290 <sp3_init+0x2098>
    2d5c:	ldr	r3, [r3, r2]
    2d60:	add	r3, r3, #284	; 0x11c
    2d64:	ldr	r3, [r3]
    2d68:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2d6c:	mov	r0, r3
    2d70:	bl	0 <coda_type_record_add_field>
    2d74:	movw	r0, #0
    2d78:	movt	r0, #0
    2d7c:	bl	0 <coda_type_record_field_new>
    2d80:	str	r0, [fp, #-24]	; 0xffffffe8
    2d84:	mrc	15, 0, r3, cr13, cr0, {3}
    2d88:	ldr	r2, [pc, #-2816]	; 2290 <sp3_init+0x2098>
    2d8c:	ldr	r3, [r3, r2]
    2d90:	add	r3, r3, #48	; 0x30
    2d94:	ldr	r3, [r3]
    2d98:	mov	r1, r3
    2d9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2da0:	bl	0 <coda_type_record_field_set_type>
    2da4:	mrc	15, 0, r3, cr13, cr0, {3}
    2da8:	ldr	r2, [pc, #-2848]	; 2290 <sp3_init+0x2098>
    2dac:	ldr	r3, [r3, r2]
    2db0:	add	r3, r3, #284	; 0x11c
    2db4:	ldr	r3, [r3]
    2db8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2dbc:	mov	r0, r3
    2dc0:	bl	0 <coda_type_record_add_field>
    2dc4:	movw	r0, #0
    2dc8:	movt	r0, #0
    2dcc:	bl	0 <coda_type_record_field_new>
    2dd0:	str	r0, [fp, #-24]	; 0xffffffe8
    2dd4:	mrc	15, 0, r3, cr13, cr0, {3}
    2dd8:	ldr	r2, [pc, #-2896]	; 2290 <sp3_init+0x2098>
    2ddc:	ldr	r3, [r3, r2]
    2de0:	add	r3, r3, #52	; 0x34
    2de4:	ldr	r3, [r3]
    2de8:	mov	r1, r3
    2dec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2df0:	bl	0 <coda_type_record_field_set_type>
    2df4:	mrc	15, 0, r3, cr13, cr0, {3}
    2df8:	ldr	r2, [pc, #-2928]	; 2290 <sp3_init+0x2098>
    2dfc:	ldr	r3, [r3, r2]
    2e00:	add	r3, r3, #284	; 0x11c
    2e04:	ldr	r3, [r3]
    2e08:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e0c:	mov	r0, r3
    2e10:	bl	0 <coda_type_record_add_field>
    2e14:	movw	r0, #0
    2e18:	movt	r0, #0
    2e1c:	bl	0 <coda_type_record_field_new>
    2e20:	str	r0, [fp, #-24]	; 0xffffffe8
    2e24:	mrc	15, 0, r3, cr13, cr0, {3}
    2e28:	ldr	r2, [pc, #-2976]	; 2290 <sp3_init+0x2098>
    2e2c:	ldr	r3, [r3, r2]
    2e30:	add	r3, r3, #60	; 0x3c
    2e34:	ldr	r3, [r3]
    2e38:	mov	r1, r3
    2e3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e40:	bl	0 <coda_type_record_field_set_type>
    2e44:	mrc	15, 0, r3, cr13, cr0, {3}
    2e48:	ldr	r2, [pc, #-3008]	; 2290 <sp3_init+0x2098>
    2e4c:	ldr	r3, [r3, r2]
    2e50:	add	r3, r3, #284	; 0x11c
    2e54:	ldr	r3, [r3]
    2e58:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e5c:	mov	r0, r3
    2e60:	bl	0 <coda_type_record_add_field>
    2e64:	movw	r0, #0
    2e68:	movt	r0, #0
    2e6c:	bl	0 <coda_type_record_field_new>
    2e70:	str	r0, [fp, #-24]	; 0xffffffe8
    2e74:	mrc	15, 0, r3, cr13, cr0, {3}
    2e78:	ldr	r2, [pc, #-3056]	; 2290 <sp3_init+0x2098>
    2e7c:	ldr	r3, [r3, r2]
    2e80:	add	r3, r3, #68	; 0x44
    2e84:	ldr	r3, [r3]
    2e88:	mov	r1, r3
    2e8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2e90:	bl	0 <coda_type_record_field_set_type>
    2e94:	mrc	15, 0, r3, cr13, cr0, {3}
    2e98:	ldr	r2, [pc, #-3088]	; 2290 <sp3_init+0x2098>
    2e9c:	ldr	r3, [r3, r2]
    2ea0:	add	r3, r3, #284	; 0x11c
    2ea4:	ldr	r3, [r3]
    2ea8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2eac:	mov	r0, r3
    2eb0:	bl	0 <coda_type_record_add_field>
    2eb4:	movw	r0, #0
    2eb8:	movt	r0, #0
    2ebc:	bl	0 <coda_type_record_field_new>
    2ec0:	str	r0, [fp, #-24]	; 0xffffffe8
    2ec4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ec8:	ldr	r2, [pc, #-3136]	; 2290 <sp3_init+0x2098>
    2ecc:	ldr	r3, [r3, r2]
    2ed0:	add	r3, r3, #72	; 0x48
    2ed4:	ldr	r3, [r3]
    2ed8:	mov	r1, r3
    2edc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ee0:	bl	0 <coda_type_record_field_set_type>
    2ee4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ee8:	ldr	r2, [pc, #-3168]	; 2290 <sp3_init+0x2098>
    2eec:	ldr	r3, [r3, r2]
    2ef0:	add	r3, r3, #284	; 0x11c
    2ef4:	ldr	r3, [r3]
    2ef8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2efc:	mov	r0, r3
    2f00:	bl	0 <coda_type_record_add_field>
    2f04:	movw	r0, #0
    2f08:	movt	r0, #0
    2f0c:	bl	0 <coda_type_record_field_new>
    2f10:	str	r0, [fp, #-24]	; 0xffffffe8
    2f14:	mrc	15, 0, r3, cr13, cr0, {3}
    2f18:	ldr	r2, [pc, #-3216]	; 2290 <sp3_init+0x2098>
    2f1c:	ldr	r3, [r3, r2]
    2f20:	add	r3, r3, #76	; 0x4c
    2f24:	ldr	r3, [r3]
    2f28:	mov	r1, r3
    2f2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f30:	bl	0 <coda_type_record_field_set_type>
    2f34:	mrc	15, 0, r3, cr13, cr0, {3}
    2f38:	ldr	r2, [pc, #-3248]	; 2290 <sp3_init+0x2098>
    2f3c:	ldr	r3, [r3, r2]
    2f40:	add	r3, r3, #284	; 0x11c
    2f44:	ldr	r3, [r3]
    2f48:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2f4c:	mov	r0, r3
    2f50:	bl	0 <coda_type_record_add_field>
    2f54:	movw	r0, #0
    2f58:	movt	r0, #0
    2f5c:	bl	0 <coda_type_record_field_new>
    2f60:	str	r0, [fp, #-24]	; 0xffffffe8
    2f64:	mrc	15, 0, r3, cr13, cr0, {3}
    2f68:	ldr	r2, [pc, #-3296]	; 2290 <sp3_init+0x2098>
    2f6c:	ldr	r3, [r3, r2]
    2f70:	add	r3, r3, #80	; 0x50
    2f74:	ldr	r3, [r3]
    2f78:	mov	r1, r3
    2f7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2f80:	bl	0 <coda_type_record_field_set_type>
    2f84:	mrc	15, 0, r3, cr13, cr0, {3}
    2f88:	ldr	r2, [pc, #-3328]	; 2290 <sp3_init+0x2098>
    2f8c:	ldr	r3, [r3, r2]
    2f90:	add	r3, r3, #284	; 0x11c
    2f94:	ldr	r3, [r3]
    2f98:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2f9c:	mov	r0, r3
    2fa0:	bl	0 <coda_type_record_add_field>
    2fa4:	movw	r0, #0
    2fa8:	movt	r0, #0
    2fac:	bl	0 <coda_type_record_field_new>
    2fb0:	str	r0, [fp, #-24]	; 0xffffffe8
    2fb4:	mrc	15, 0, r3, cr13, cr0, {3}
    2fb8:	ldr	r2, [pc, #-3376]	; 2290 <sp3_init+0x2098>
    2fbc:	ldr	r3, [r3, r2]
    2fc0:	add	r3, r3, #84	; 0x54
    2fc4:	ldr	r3, [r3]
    2fc8:	mov	r1, r3
    2fcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fd0:	bl	0 <coda_type_record_field_set_type>
    2fd4:	mrc	15, 0, r3, cr13, cr0, {3}
    2fd8:	ldr	r2, [pc, #-3408]	; 2290 <sp3_init+0x2098>
    2fdc:	ldr	r3, [r3, r2]
    2fe0:	add	r3, r3, #284	; 0x11c
    2fe4:	ldr	r3, [r3]
    2fe8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2fec:	mov	r0, r3
    2ff0:	bl	0 <coda_type_record_add_field>
    2ff4:	mrc	15, 0, r3, cr13, cr0, {3}
    2ff8:	ldr	r2, [pc, #-3440]	; 2290 <sp3_init+0x2098>
    2ffc:	ldr	r3, [r3, r2]
    3000:	add	r4, r3, #140	; 0x8c
    3004:	mov	r0, #9
    3008:	bl	0 <coda_type_record_new>
    300c:	mov	r3, r0
    3010:	str	r3, [r4]
    3014:	movw	r0, #0
    3018:	movt	r0, #0
    301c:	bl	0 <coda_type_record_field_new>
    3020:	str	r0, [fp, #-24]	; 0xffffffe8
    3024:	mrc	15, 0, r3, cr13, cr0, {3}
    3028:	ldr	r2, [pc, #-3488]	; 2290 <sp3_init+0x2098>
    302c:	ldr	r3, [r3, r2]
    3030:	add	r3, r3, #144	; 0x90
    3034:	ldr	r3, [r3]
    3038:	mov	r1, r3
    303c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3040:	bl	0 <coda_type_record_field_set_type>
    3044:	mrc	15, 0, r3, cr13, cr0, {3}
    3048:	ldr	r2, [pc, #-3520]	; 2290 <sp3_init+0x2098>
    304c:	ldr	r3, [r3, r2]
    3050:	add	r3, r3, #140	; 0x8c
    3054:	ldr	r3, [r3]
    3058:	ldr	r1, [fp, #-24]	; 0xffffffe8
    305c:	mov	r0, r3
    3060:	bl	0 <coda_type_record_add_field>
    3064:	movw	r0, #0
    3068:	movt	r0, #0
    306c:	bl	0 <coda_type_record_field_new>
    3070:	str	r0, [fp, #-24]	; 0xffffffe8
    3074:	mrc	15, 0, r3, cr13, cr0, {3}
    3078:	ldr	r2, [pc, #-3568]	; 2290 <sp3_init+0x2098>
    307c:	ldr	r3, [r3, r2]
    3080:	add	r3, r3, #148	; 0x94
    3084:	ldr	r3, [r3]
    3088:	mov	r1, r3
    308c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3090:	bl	0 <coda_type_record_field_set_type>
    3094:	mrc	15, 0, r3, cr13, cr0, {3}
    3098:	ldr	r2, [pc, #-3600]	; 2290 <sp3_init+0x2098>
    309c:	ldr	r3, [r3, r2]
    30a0:	add	r3, r3, #140	; 0x8c
    30a4:	ldr	r3, [r3]
    30a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    30ac:	mov	r0, r3
    30b0:	bl	0 <coda_type_record_add_field>
    30b4:	movw	r0, #0
    30b8:	movt	r0, #0
    30bc:	bl	0 <coda_type_record_field_new>
    30c0:	str	r0, [fp, #-24]	; 0xffffffe8
    30c4:	mrc	15, 0, r3, cr13, cr0, {3}
    30c8:	ldr	r2, [pc, #-3648]	; 2290 <sp3_init+0x2098>
    30cc:	ldr	r3, [r3, r2]
    30d0:	add	r3, r3, #152	; 0x98
    30d4:	ldr	r3, [r3]
    30d8:	mov	r1, r3
    30dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    30e0:	bl	0 <coda_type_record_field_set_type>
    30e4:	mrc	15, 0, r3, cr13, cr0, {3}
    30e8:	ldr	r2, [pc, #-3680]	; 2290 <sp3_init+0x2098>
    30ec:	ldr	r3, [r3, r2]
    30f0:	add	r3, r3, #140	; 0x8c
    30f4:	ldr	r3, [r3]
    30f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    30fc:	mov	r0, r3
    3100:	bl	0 <coda_type_record_add_field>
    3104:	movw	r0, #0
    3108:	movt	r0, #0
    310c:	bl	0 <coda_type_record_field_new>
    3110:	str	r0, [fp, #-24]	; 0xffffffe8
    3114:	mrc	15, 0, r3, cr13, cr0, {3}
    3118:	ldr	r2, [pc, #-3728]	; 2290 <sp3_init+0x2098>
    311c:	ldr	r3, [r3, r2]
    3120:	add	r3, r3, #156	; 0x9c
    3124:	ldr	r3, [r3]
    3128:	mov	r1, r3
    312c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3130:	bl	0 <coda_type_record_field_set_type>
    3134:	mrc	15, 0, r3, cr13, cr0, {3}
    3138:	ldr	r2, [pc, #-3760]	; 2290 <sp3_init+0x2098>
    313c:	ldr	r3, [r3, r2]
    3140:	add	r3, r3, #140	; 0x8c
    3144:	ldr	r3, [r3]
    3148:	ldr	r1, [fp, #-24]	; 0xffffffe8
    314c:	mov	r0, r3
    3150:	bl	0 <coda_type_record_add_field>
    3154:	movw	r0, #0
    3158:	movt	r0, #0
    315c:	bl	0 <coda_type_record_field_new>
    3160:	str	r0, [fp, #-24]	; 0xffffffe8
    3164:	mrc	15, 0, r3, cr13, cr0, {3}
    3168:	ldr	r2, [pc, #-3808]	; 2290 <sp3_init+0x2098>
    316c:	ldr	r3, [r3, r2]
    3170:	add	r3, r3, #160	; 0xa0
    3174:	ldr	r3, [r3]
    3178:	mov	r1, r3
    317c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3180:	bl	0 <coda_type_record_field_set_type>
    3184:	mrc	15, 0, r3, cr13, cr0, {3}
    3188:	ldr	r2, [pc, #-3840]	; 2290 <sp3_init+0x2098>
    318c:	ldr	r3, [r3, r2]
    3190:	add	r3, r3, #140	; 0x8c
    3194:	ldr	r3, [r3]
    3198:	ldr	r1, [fp, #-24]	; 0xffffffe8
    319c:	mov	r0, r3
    31a0:	bl	0 <coda_type_record_add_field>
    31a4:	movw	r0, #0
    31a8:	movt	r0, #0
    31ac:	bl	0 <coda_type_record_field_new>
    31b0:	str	r0, [fp, #-24]	; 0xffffffe8
    31b4:	mrc	15, 0, r3, cr13, cr0, {3}
    31b8:	ldr	r2, [pc, #-3888]	; 2290 <sp3_init+0x2098>
    31bc:	ldr	r3, [r3, r2]
    31c0:	add	r3, r3, #164	; 0xa4
    31c4:	ldr	r3, [r3]
    31c8:	mov	r1, r3
    31cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    31d0:	bl	0 <coda_type_record_field_set_type>
    31d4:	mrc	15, 0, r3, cr13, cr0, {3}
    31d8:	ldr	r2, [pc, #-3920]	; 2290 <sp3_init+0x2098>
    31dc:	ldr	r3, [r3, r2]
    31e0:	add	r3, r3, #140	; 0x8c
    31e4:	ldr	r3, [r3]
    31e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    31ec:	mov	r0, r3
    31f0:	bl	0 <coda_type_record_add_field>
    31f4:	movw	r0, #0
    31f8:	movt	r0, #0
    31fc:	bl	0 <coda_type_record_field_new>
    3200:	str	r0, [fp, #-24]	; 0xffffffe8
    3204:	mrc	15, 0, r3, cr13, cr0, {3}
    3208:	ldr	r2, [pc, #-3968]	; 2290 <sp3_init+0x2098>
    320c:	ldr	r3, [r3, r2]
    3210:	add	r3, r3, #168	; 0xa8
    3214:	ldr	r3, [r3]
    3218:	mov	r1, r3
    321c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3220:	bl	0 <coda_type_record_field_set_type>
    3224:	mrc	15, 0, r3, cr13, cr0, {3}
    3228:	ldr	r2, [pc, #-4000]	; 2290 <sp3_init+0x2098>
    322c:	ldr	r3, [r3, r2]
    3230:	add	r3, r3, #140	; 0x8c
    3234:	ldr	r3, [r3]
    3238:	ldr	r1, [fp, #-24]	; 0xffffffe8
    323c:	mov	r0, r3
    3240:	bl	0 <coda_type_record_add_field>
    3244:	movw	r0, #0
    3248:	movt	r0, #0
    324c:	bl	0 <coda_type_record_field_new>
    3250:	str	r0, [fp, #-24]	; 0xffffffe8
    3254:	mrc	15, 0, r3, cr13, cr0, {3}
    3258:	ldr	r2, [pc, #-4048]	; 2290 <sp3_init+0x2098>
    325c:	ldr	r3, [r3, r2]
    3260:	add	r3, r3, #172	; 0xac
    3264:	ldr	r3, [r3]
    3268:	mov	r1, r3
    326c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3270:	bl	0 <coda_type_record_field_set_type>
    3274:	mrc	15, 0, r3, cr13, cr0, {3}
    3278:	ldr	r2, [pc, #-4080]	; 2290 <sp3_init+0x2098>
    327c:	ldr	r3, [r3, r2]
    3280:	add	r3, r3, #140	; 0x8c
    3284:	ldr	r3, [r3]
    3288:	ldr	r1, [fp, #-24]	; 0xffffffe8
    328c:	mov	r0, r3
    3290:	bl	0 <coda_type_record_add_field>
    3294:	movw	r0, #0
    3298:	movt	r0, #0
    329c:	bl	0 <coda_type_record_field_new>
    32a0:	str	r0, [fp, #-24]	; 0xffffffe8
    32a4:	mrc	15, 0, r3, cr13, cr0, {3}
    32a8:	ldr	r2, [pc, #3800]	; 4188 <sp3_init+0x3f90>
    32ac:	ldr	r3, [r3, r2]
    32b0:	add	r3, r3, #176	; 0xb0
    32b4:	ldr	r3, [r3]
    32b8:	mov	r1, r3
    32bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    32c0:	bl	0 <coda_type_record_field_set_type>
    32c4:	mrc	15, 0, r3, cr13, cr0, {3}
    32c8:	ldr	r2, [pc, #3768]	; 4188 <sp3_init+0x3f90>
    32cc:	ldr	r3, [r3, r2]
    32d0:	add	r3, r3, #140	; 0x8c
    32d4:	ldr	r3, [r3]
    32d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    32dc:	mov	r0, r3
    32e0:	bl	0 <coda_type_record_add_field>
    32e4:	movw	r0, #0
    32e8:	movt	r0, #0
    32ec:	bl	0 <coda_type_record_field_new>
    32f0:	str	r0, [fp, #-24]	; 0xffffffe8
    32f4:	mrc	15, 0, r3, cr13, cr0, {3}
    32f8:	ldr	r2, [pc, #3720]	; 4188 <sp3_init+0x3f90>
    32fc:	ldr	r3, [r3, r2]
    3300:	add	r3, r3, #180	; 0xb4
    3304:	ldr	r3, [r3]
    3308:	mov	r1, r3
    330c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3310:	bl	0 <coda_type_record_field_set_type>
    3314:	mrc	15, 0, r3, cr13, cr0, {3}
    3318:	ldr	r2, [pc, #3688]	; 4188 <sp3_init+0x3f90>
    331c:	ldr	r3, [r3, r2]
    3320:	add	r3, r3, #140	; 0x8c
    3324:	ldr	r3, [r3]
    3328:	ldr	r1, [fp, #-24]	; 0xffffffe8
    332c:	mov	r0, r3
    3330:	bl	0 <coda_type_record_add_field>
    3334:	mrc	15, 0, r3, cr13, cr0, {3}
    3338:	ldr	r2, [pc, #3656]	; 4188 <sp3_init+0x3f90>
    333c:	ldr	r3, [r3, r2]
    3340:	add	r4, r3, #268	; 0x10c
    3344:	mov	r0, #9
    3348:	bl	0 <coda_type_record_new>
    334c:	mov	r3, r0
    3350:	str	r3, [r4]
    3354:	movw	r0, #0
    3358:	movt	r0, #0
    335c:	bl	0 <coda_type_record_field_new>
    3360:	str	r0, [fp, #-24]	; 0xffffffe8
    3364:	mrc	15, 0, r3, cr13, cr0, {3}
    3368:	ldr	r2, [pc, #3608]	; 4188 <sp3_init+0x3f90>
    336c:	ldr	r3, [r3, r2]
    3370:	add	r3, r3, #88	; 0x58
    3374:	ldr	r3, [r3]
    3378:	mov	r1, r3
    337c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3380:	bl	0 <coda_type_record_field_set_type>
    3384:	mrc	15, 0, r3, cr13, cr0, {3}
    3388:	ldr	r2, [pc, #3576]	; 4188 <sp3_init+0x3f90>
    338c:	ldr	r3, [r3, r2]
    3390:	add	r3, r3, #268	; 0x10c
    3394:	ldr	r3, [r3]
    3398:	ldr	r1, [fp, #-24]	; 0xffffffe8
    339c:	mov	r0, r3
    33a0:	bl	0 <coda_type_record_add_field>
    33a4:	movw	r0, #0
    33a8:	movt	r0, #0
    33ac:	bl	0 <coda_type_record_field_new>
    33b0:	str	r0, [fp, #-24]	; 0xffffffe8
    33b4:	mrc	15, 0, r3, cr13, cr0, {3}
    33b8:	ldr	r2, [pc, #3528]	; 4188 <sp3_init+0x3f90>
    33bc:	ldr	r3, [r3, r2]
    33c0:	add	r3, r3, #92	; 0x5c
    33c4:	ldr	r3, [r3]
    33c8:	mov	r1, r3
    33cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    33d0:	bl	0 <coda_type_record_field_set_type>
    33d4:	mrc	15, 0, r3, cr13, cr0, {3}
    33d8:	ldr	r2, [pc, #3496]	; 4188 <sp3_init+0x3f90>
    33dc:	ldr	r3, [r3, r2]
    33e0:	add	r3, r3, #268	; 0x10c
    33e4:	ldr	r3, [r3]
    33e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    33ec:	mov	r0, r3
    33f0:	bl	0 <coda_type_record_add_field>
    33f4:	movw	r0, #0
    33f8:	movt	r0, #0
    33fc:	bl	0 <coda_type_record_field_new>
    3400:	str	r0, [fp, #-24]	; 0xffffffe8
    3404:	mrc	15, 0, r3, cr13, cr0, {3}
    3408:	ldr	r2, [pc, #3448]	; 4188 <sp3_init+0x3f90>
    340c:	ldr	r3, [r3, r2]
    3410:	add	r3, r3, #96	; 0x60
    3414:	ldr	r3, [r3]
    3418:	mov	r1, r3
    341c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3420:	bl	0 <coda_type_record_field_set_type>
    3424:	mrc	15, 0, r3, cr13, cr0, {3}
    3428:	ldr	r2, [pc, #3416]	; 4188 <sp3_init+0x3f90>
    342c:	ldr	r3, [r3, r2]
    3430:	add	r3, r3, #268	; 0x10c
    3434:	ldr	r3, [r3]
    3438:	ldr	r1, [fp, #-24]	; 0xffffffe8
    343c:	mov	r0, r3
    3440:	bl	0 <coda_type_record_add_field>
    3444:	movw	r0, #0
    3448:	movt	r0, #0
    344c:	bl	0 <coda_type_record_field_new>
    3450:	str	r0, [fp, #-24]	; 0xffffffe8
    3454:	mrc	15, 0, r3, cr13, cr0, {3}
    3458:	ldr	r2, [pc, #3368]	; 4188 <sp3_init+0x3f90>
    345c:	ldr	r3, [r3, r2]
    3460:	add	r3, r3, #100	; 0x64
    3464:	ldr	r3, [r3]
    3468:	mov	r1, r3
    346c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3470:	bl	0 <coda_type_record_field_set_type>
    3474:	mrc	15, 0, r3, cr13, cr0, {3}
    3478:	ldr	r2, [pc, #3336]	; 4188 <sp3_init+0x3f90>
    347c:	ldr	r3, [r3, r2]
    3480:	add	r3, r3, #268	; 0x10c
    3484:	ldr	r3, [r3]
    3488:	ldr	r1, [fp, #-24]	; 0xffffffe8
    348c:	mov	r0, r3
    3490:	bl	0 <coda_type_record_add_field>
    3494:	movw	r0, #0
    3498:	movt	r0, #0
    349c:	bl	0 <coda_type_record_field_new>
    34a0:	str	r0, [fp, #-24]	; 0xffffffe8
    34a4:	mrc	15, 0, r3, cr13, cr0, {3}
    34a8:	ldr	r2, [pc, #3288]	; 4188 <sp3_init+0x3f90>
    34ac:	ldr	r3, [r3, r2]
    34b0:	add	r3, r3, #104	; 0x68
    34b4:	ldr	r3, [r3]
    34b8:	mov	r1, r3
    34bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    34c0:	bl	0 <coda_type_record_field_set_type>
    34c4:	mrc	15, 0, r3, cr13, cr0, {3}
    34c8:	ldr	r2, [pc, #3256]	; 4188 <sp3_init+0x3f90>
    34cc:	ldr	r3, [r3, r2]
    34d0:	add	r3, r3, #268	; 0x10c
    34d4:	ldr	r3, [r3]
    34d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    34dc:	mov	r0, r3
    34e0:	bl	0 <coda_type_record_add_field>
    34e4:	movw	r0, #0
    34e8:	movt	r0, #0
    34ec:	bl	0 <coda_type_record_field_new>
    34f0:	str	r0, [fp, #-24]	; 0xffffffe8
    34f4:	mrc	15, 0, r3, cr13, cr0, {3}
    34f8:	ldr	r2, [pc, #3208]	; 4188 <sp3_init+0x3f90>
    34fc:	ldr	r3, [r3, r2]
    3500:	add	r3, r3, #108	; 0x6c
    3504:	ldr	r3, [r3]
    3508:	mov	r1, r3
    350c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3510:	bl	0 <coda_type_record_field_set_type>
    3514:	mrc	15, 0, r3, cr13, cr0, {3}
    3518:	ldr	r2, [pc, #3176]	; 4188 <sp3_init+0x3f90>
    351c:	ldr	r3, [r3, r2]
    3520:	add	r3, r3, #268	; 0x10c
    3524:	ldr	r3, [r3]
    3528:	ldr	r1, [fp, #-24]	; 0xffffffe8
    352c:	mov	r0, r3
    3530:	bl	0 <coda_type_record_add_field>
    3534:	movw	r0, #0
    3538:	movt	r0, #0
    353c:	bl	0 <coda_type_record_field_new>
    3540:	str	r0, [fp, #-24]	; 0xffffffe8
    3544:	mrc	15, 0, r3, cr13, cr0, {3}
    3548:	ldr	r2, [pc, #3128]	; 4188 <sp3_init+0x3f90>
    354c:	ldr	r3, [r3, r2]
    3550:	add	r3, r3, #112	; 0x70
    3554:	ldr	r3, [r3]
    3558:	mov	r1, r3
    355c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3560:	bl	0 <coda_type_record_field_set_type>
    3564:	mrc	15, 0, r3, cr13, cr0, {3}
    3568:	ldr	r2, [pc, #3096]	; 4188 <sp3_init+0x3f90>
    356c:	ldr	r3, [r3, r2]
    3570:	add	r3, r3, #268	; 0x10c
    3574:	ldr	r3, [r3]
    3578:	ldr	r1, [fp, #-24]	; 0xffffffe8
    357c:	mov	r0, r3
    3580:	bl	0 <coda_type_record_add_field>
    3584:	movw	r0, #0
    3588:	movt	r0, #0
    358c:	bl	0 <coda_type_record_field_new>
    3590:	str	r0, [fp, #-24]	; 0xffffffe8
    3594:	mrc	15, 0, r3, cr13, cr0, {3}
    3598:	ldr	r2, [pc, #3048]	; 4188 <sp3_init+0x3f90>
    359c:	ldr	r3, [r3, r2]
    35a0:	add	r3, r3, #116	; 0x74
    35a4:	ldr	r3, [r3]
    35a8:	mov	r1, r3
    35ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    35b0:	bl	0 <coda_type_record_field_set_type>
    35b4:	mrc	15, 0, r3, cr13, cr0, {3}
    35b8:	ldr	r2, [pc, #3016]	; 4188 <sp3_init+0x3f90>
    35bc:	ldr	r3, [r3, r2]
    35c0:	add	r3, r3, #268	; 0x10c
    35c4:	ldr	r3, [r3]
    35c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    35cc:	mov	r0, r3
    35d0:	bl	0 <coda_type_record_add_field>
    35d4:	movw	r0, #0
    35d8:	movt	r0, #0
    35dc:	bl	0 <coda_type_record_field_new>
    35e0:	str	r0, [fp, #-24]	; 0xffffffe8
    35e4:	mrc	15, 0, r3, cr13, cr0, {3}
    35e8:	ldr	r2, [pc, #2968]	; 4188 <sp3_init+0x3f90>
    35ec:	ldr	r3, [r3, r2]
    35f0:	add	r3, r3, #120	; 0x78
    35f4:	ldr	r3, [r3]
    35f8:	mov	r1, r3
    35fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3600:	bl	0 <coda_type_record_field_set_type>
    3604:	mrc	15, 0, r3, cr13, cr0, {3}
    3608:	ldr	r2, [pc, #2936]	; 4188 <sp3_init+0x3f90>
    360c:	ldr	r3, [r3, r2]
    3610:	add	r3, r3, #268	; 0x10c
    3614:	ldr	r3, [r3]
    3618:	ldr	r1, [fp, #-24]	; 0xffffffe8
    361c:	mov	r0, r3
    3620:	bl	0 <coda_type_record_add_field>
    3624:	movw	r0, #0
    3628:	movt	r0, #0
    362c:	bl	0 <coda_type_record_field_new>
    3630:	str	r0, [fp, #-24]	; 0xffffffe8
    3634:	mrc	15, 0, r3, cr13, cr0, {3}
    3638:	ldr	r2, [pc, #2888]	; 4188 <sp3_init+0x3f90>
    363c:	ldr	r3, [r3, r2]
    3640:	add	r3, r3, #124	; 0x7c
    3644:	ldr	r3, [r3]
    3648:	mov	r1, r3
    364c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3650:	bl	0 <coda_type_record_field_set_type>
    3654:	mrc	15, 0, r3, cr13, cr0, {3}
    3658:	ldr	r2, [pc, #2856]	; 4188 <sp3_init+0x3f90>
    365c:	ldr	r3, [r3, r2]
    3660:	add	r3, r3, #268	; 0x10c
    3664:	ldr	r3, [r3]
    3668:	ldr	r1, [fp, #-24]	; 0xffffffe8
    366c:	mov	r0, r3
    3670:	bl	0 <coda_type_record_add_field>
    3674:	movw	r0, #0
    3678:	movt	r0, #0
    367c:	bl	0 <coda_type_record_field_new>
    3680:	str	r0, [fp, #-24]	; 0xffffffe8
    3684:	mrc	15, 0, r3, cr13, cr0, {3}
    3688:	ldr	r2, [pc, #2808]	; 4188 <sp3_init+0x3f90>
    368c:	ldr	r3, [r3, r2]
    3690:	add	r3, r3, #128	; 0x80
    3694:	ldr	r3, [r3]
    3698:	mov	r1, r3
    369c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36a0:	bl	0 <coda_type_record_field_set_type>
    36a4:	mrc	15, 0, r3, cr13, cr0, {3}
    36a8:	ldr	r2, [pc, #2776]	; 4188 <sp3_init+0x3f90>
    36ac:	ldr	r3, [r3, r2]
    36b0:	add	r3, r3, #268	; 0x10c
    36b4:	ldr	r3, [r3]
    36b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    36bc:	mov	r0, r3
    36c0:	bl	0 <coda_type_record_add_field>
    36c4:	movw	r0, #0
    36c8:	movt	r0, #0
    36cc:	bl	0 <coda_type_record_field_new>
    36d0:	str	r0, [fp, #-24]	; 0xffffffe8
    36d4:	mrc	15, 0, r3, cr13, cr0, {3}
    36d8:	ldr	r2, [pc, #2728]	; 4188 <sp3_init+0x3f90>
    36dc:	ldr	r3, [r3, r2]
    36e0:	add	r3, r3, #132	; 0x84
    36e4:	ldr	r3, [r3]
    36e8:	mov	r1, r3
    36ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    36f0:	bl	0 <coda_type_record_field_set_type>
    36f4:	mrc	15, 0, r3, cr13, cr0, {3}
    36f8:	ldr	r2, [pc, #2696]	; 4188 <sp3_init+0x3f90>
    36fc:	ldr	r3, [r3, r2]
    3700:	add	r3, r3, #268	; 0x10c
    3704:	ldr	r3, [r3]
    3708:	ldr	r1, [fp, #-24]	; 0xffffffe8
    370c:	mov	r0, r3
    3710:	bl	0 <coda_type_record_add_field>
    3714:	movw	r0, #0
    3718:	movt	r0, #0
    371c:	bl	0 <coda_type_record_field_new>
    3720:	str	r0, [fp, #-24]	; 0xffffffe8
    3724:	mrc	15, 0, r3, cr13, cr0, {3}
    3728:	ldr	r2, [pc, #2648]	; 4188 <sp3_init+0x3f90>
    372c:	ldr	r3, [r3, r2]
    3730:	add	r3, r3, #136	; 0x88
    3734:	ldr	r3, [r3]
    3738:	mov	r1, r3
    373c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3740:	bl	0 <coda_type_record_field_set_type>
    3744:	mrc	15, 0, r3, cr13, cr0, {3}
    3748:	ldr	r2, [pc, #2616]	; 4188 <sp3_init+0x3f90>
    374c:	ldr	r3, [r3, r2]
    3750:	add	r3, r3, #268	; 0x10c
    3754:	ldr	r3, [r3]
    3758:	ldr	r1, [fp, #-24]	; 0xffffffe8
    375c:	mov	r0, r3
    3760:	bl	0 <coda_type_record_add_field>
    3764:	movw	r0, #0
    3768:	movt	r0, #0
    376c:	bl	0 <coda_type_record_field_new>
    3770:	str	r0, [fp, #-24]	; 0xffffffe8
    3774:	mrc	15, 0, r3, cr13, cr0, {3}
    3778:	ldr	r2, [pc, #2568]	; 4188 <sp3_init+0x3f90>
    377c:	ldr	r3, [r3, r2]
    3780:	add	r3, r3, #140	; 0x8c
    3784:	ldr	r3, [r3]
    3788:	mov	r1, r3
    378c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3790:	bl	0 <coda_type_record_field_set_type>
    3794:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3798:	bl	0 <coda_type_record_field_set_optional>
    379c:	mrc	15, 0, r3, cr13, cr0, {3}
    37a0:	ldr	r2, [pc, #2528]	; 4188 <sp3_init+0x3f90>
    37a4:	ldr	r3, [r3, r2]
    37a8:	add	r3, r3, #268	; 0x10c
    37ac:	ldr	r3, [r3]
    37b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    37b4:	mov	r0, r3
    37b8:	bl	0 <coda_type_record_add_field>
    37bc:	mrc	15, 0, r3, cr13, cr0, {3}
    37c0:	ldr	r2, [pc, #2496]	; 4188 <sp3_init+0x3f90>
    37c4:	ldr	r3, [r3, r2]
    37c8:	add	r4, r3, #272	; 0x110
    37cc:	mov	r0, #9
    37d0:	bl	0 <coda_type_array_new>
    37d4:	mov	r3, r0
    37d8:	str	r3, [r4]
    37dc:	mrc	15, 0, r3, cr13, cr0, {3}
    37e0:	ldr	r2, [pc, #2464]	; 4188 <sp3_init+0x3f90>
    37e4:	ldr	r3, [r3, r2]
    37e8:	add	r3, r3, #272	; 0x110
    37ec:	ldr	r3, [r3]
    37f0:	mov	r1, #0
    37f4:	mov	r0, r3
    37f8:	bl	0 <coda_type_array_add_variable_dimension>
    37fc:	mrc	15, 0, r3, cr13, cr0, {3}
    3800:	ldr	r2, [pc, #2432]	; 4188 <sp3_init+0x3f90>
    3804:	ldr	r3, [r3, r2]
    3808:	add	r3, r3, #272	; 0x110
    380c:	ldr	r0, [r3]
    3810:	mrc	15, 0, r3, cr13, cr0, {3}
    3814:	ldr	r2, [pc, #2412]	; 4188 <sp3_init+0x3f90>
    3818:	ldr	r3, [r3, r2]
    381c:	add	r3, r3, #268	; 0x10c
    3820:	ldr	r3, [r3]
    3824:	mov	r1, r3
    3828:	bl	0 <coda_type_array_set_base_type>
    382c:	mrc	15, 0, r3, cr13, cr0, {3}
    3830:	ldr	r2, [pc, #2384]	; 4188 <sp3_init+0x3f90>
    3834:	ldr	r3, [r3, r2]
    3838:	add	r4, r3, #216	; 0xd8
    383c:	mov	r0, #9
    3840:	bl	0 <coda_type_record_new>
    3844:	mov	r3, r0
    3848:	str	r3, [r4]
    384c:	movw	r0, #0
    3850:	movt	r0, #0
    3854:	bl	0 <coda_type_record_field_new>
    3858:	str	r0, [fp, #-24]	; 0xffffffe8
    385c:	mrc	15, 0, r3, cr13, cr0, {3}
    3860:	ldr	r2, [pc, #2336]	; 4188 <sp3_init+0x3f90>
    3864:	ldr	r3, [r3, r2]
    3868:	add	r3, r3, #220	; 0xdc
    386c:	ldr	r3, [r3]
    3870:	mov	r1, r3
    3874:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3878:	bl	0 <coda_type_record_field_set_type>
    387c:	mrc	15, 0, r3, cr13, cr0, {3}
    3880:	ldr	r2, [pc, #2304]	; 4188 <sp3_init+0x3f90>
    3884:	ldr	r3, [r3, r2]
    3888:	add	r3, r3, #216	; 0xd8
    388c:	ldr	r3, [r3]
    3890:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3894:	mov	r0, r3
    3898:	bl	0 <coda_type_record_add_field>
    389c:	movw	r0, #0
    38a0:	movt	r0, #0
    38a4:	bl	0 <coda_type_record_field_new>
    38a8:	str	r0, [fp, #-24]	; 0xffffffe8
    38ac:	mrc	15, 0, r3, cr13, cr0, {3}
    38b0:	ldr	r2, [pc, #2256]	; 4188 <sp3_init+0x3f90>
    38b4:	ldr	r3, [r3, r2]
    38b8:	add	r3, r3, #224	; 0xe0
    38bc:	ldr	r3, [r3]
    38c0:	mov	r1, r3
    38c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    38c8:	bl	0 <coda_type_record_field_set_type>
    38cc:	mrc	15, 0, r3, cr13, cr0, {3}
    38d0:	ldr	r2, [pc, #2224]	; 4188 <sp3_init+0x3f90>
    38d4:	ldr	r3, [r3, r2]
    38d8:	add	r3, r3, #216	; 0xd8
    38dc:	ldr	r3, [r3]
    38e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    38e4:	mov	r0, r3
    38e8:	bl	0 <coda_type_record_add_field>
    38ec:	movw	r0, #0
    38f0:	movt	r0, #0
    38f4:	bl	0 <coda_type_record_field_new>
    38f8:	str	r0, [fp, #-24]	; 0xffffffe8
    38fc:	mrc	15, 0, r3, cr13, cr0, {3}
    3900:	ldr	r2, [pc, #2176]	; 4188 <sp3_init+0x3f90>
    3904:	ldr	r3, [r3, r2]
    3908:	add	r3, r3, #228	; 0xe4
    390c:	ldr	r3, [r3]
    3910:	mov	r1, r3
    3914:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3918:	bl	0 <coda_type_record_field_set_type>
    391c:	mrc	15, 0, r3, cr13, cr0, {3}
    3920:	ldr	r2, [pc, #2144]	; 4188 <sp3_init+0x3f90>
    3924:	ldr	r3, [r3, r2]
    3928:	add	r3, r3, #216	; 0xd8
    392c:	ldr	r3, [r3]
    3930:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3934:	mov	r0, r3
    3938:	bl	0 <coda_type_record_add_field>
    393c:	movw	r0, #0
    3940:	movt	r0, #0
    3944:	bl	0 <coda_type_record_field_new>
    3948:	str	r0, [fp, #-24]	; 0xffffffe8
    394c:	mrc	15, 0, r3, cr13, cr0, {3}
    3950:	ldr	r2, [pc, #2096]	; 4188 <sp3_init+0x3f90>
    3954:	ldr	r3, [r3, r2]
    3958:	add	r3, r3, #232	; 0xe8
    395c:	ldr	r3, [r3]
    3960:	mov	r1, r3
    3964:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3968:	bl	0 <coda_type_record_field_set_type>
    396c:	mrc	15, 0, r3, cr13, cr0, {3}
    3970:	ldr	r2, [pc, #2064]	; 4188 <sp3_init+0x3f90>
    3974:	ldr	r3, [r3, r2]
    3978:	add	r3, r3, #216	; 0xd8
    397c:	ldr	r3, [r3]
    3980:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3984:	mov	r0, r3
    3988:	bl	0 <coda_type_record_add_field>
    398c:	movw	r0, #0
    3990:	movt	r0, #0
    3994:	bl	0 <coda_type_record_field_new>
    3998:	str	r0, [fp, #-24]	; 0xffffffe8
    399c:	mrc	15, 0, r3, cr13, cr0, {3}
    39a0:	ldr	r2, [pc, #2016]	; 4188 <sp3_init+0x3f90>
    39a4:	ldr	r3, [r3, r2]
    39a8:	add	r3, r3, #236	; 0xec
    39ac:	ldr	r3, [r3]
    39b0:	mov	r1, r3
    39b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    39b8:	bl	0 <coda_type_record_field_set_type>
    39bc:	mrc	15, 0, r3, cr13, cr0, {3}
    39c0:	ldr	r2, [pc, #1984]	; 4188 <sp3_init+0x3f90>
    39c4:	ldr	r3, [r3, r2]
    39c8:	add	r3, r3, #216	; 0xd8
    39cc:	ldr	r3, [r3]
    39d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    39d4:	mov	r0, r3
    39d8:	bl	0 <coda_type_record_add_field>
    39dc:	movw	r0, #0
    39e0:	movt	r0, #0
    39e4:	bl	0 <coda_type_record_field_new>
    39e8:	str	r0, [fp, #-24]	; 0xffffffe8
    39ec:	mrc	15, 0, r3, cr13, cr0, {3}
    39f0:	ldr	r2, [pc, #1936]	; 4188 <sp3_init+0x3f90>
    39f4:	ldr	r3, [r3, r2]
    39f8:	add	r3, r3, #240	; 0xf0
    39fc:	ldr	r3, [r3]
    3a00:	mov	r1, r3
    3a04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a08:	bl	0 <coda_type_record_field_set_type>
    3a0c:	mrc	15, 0, r3, cr13, cr0, {3}
    3a10:	ldr	r2, [pc, #1904]	; 4188 <sp3_init+0x3f90>
    3a14:	ldr	r3, [r3, r2]
    3a18:	add	r3, r3, #216	; 0xd8
    3a1c:	ldr	r3, [r3]
    3a20:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3a24:	mov	r0, r3
    3a28:	bl	0 <coda_type_record_add_field>
    3a2c:	movw	r0, #0
    3a30:	movt	r0, #0
    3a34:	bl	0 <coda_type_record_field_new>
    3a38:	str	r0, [fp, #-24]	; 0xffffffe8
    3a3c:	mrc	15, 0, r3, cr13, cr0, {3}
    3a40:	ldr	r2, [pc, #1856]	; 4188 <sp3_init+0x3f90>
    3a44:	ldr	r3, [r3, r2]
    3a48:	add	r3, r3, #244	; 0xf4
    3a4c:	ldr	r3, [r3]
    3a50:	mov	r1, r3
    3a54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3a58:	bl	0 <coda_type_record_field_set_type>
    3a5c:	mrc	15, 0, r3, cr13, cr0, {3}
    3a60:	ldr	r2, [pc, #1824]	; 4188 <sp3_init+0x3f90>
    3a64:	ldr	r3, [r3, r2]
    3a68:	add	r3, r3, #216	; 0xd8
    3a6c:	ldr	r3, [r3]
    3a70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3a74:	mov	r0, r3
    3a78:	bl	0 <coda_type_record_add_field>
    3a7c:	movw	r0, #0
    3a80:	movt	r0, #0
    3a84:	bl	0 <coda_type_record_field_new>
    3a88:	str	r0, [fp, #-24]	; 0xffffffe8
    3a8c:	mrc	15, 0, r3, cr13, cr0, {3}
    3a90:	ldr	r2, [pc, #1776]	; 4188 <sp3_init+0x3f90>
    3a94:	ldr	r3, [r3, r2]
    3a98:	add	r3, r3, #248	; 0xf8
    3a9c:	ldr	r3, [r3]
    3aa0:	mov	r1, r3
    3aa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3aa8:	bl	0 <coda_type_record_field_set_type>
    3aac:	mrc	15, 0, r3, cr13, cr0, {3}
    3ab0:	ldr	r2, [pc, #1744]	; 4188 <sp3_init+0x3f90>
    3ab4:	ldr	r3, [r3, r2]
    3ab8:	add	r3, r3, #216	; 0xd8
    3abc:	ldr	r3, [r3]
    3ac0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3ac4:	mov	r0, r3
    3ac8:	bl	0 <coda_type_record_add_field>
    3acc:	movw	r0, #0
    3ad0:	movt	r0, #0
    3ad4:	bl	0 <coda_type_record_field_new>
    3ad8:	str	r0, [fp, #-24]	; 0xffffffe8
    3adc:	mrc	15, 0, r3, cr13, cr0, {3}
    3ae0:	ldr	r2, [pc, #1696]	; 4188 <sp3_init+0x3f90>
    3ae4:	ldr	r3, [r3, r2]
    3ae8:	add	r3, r3, #252	; 0xfc
    3aec:	ldr	r3, [r3]
    3af0:	mov	r1, r3
    3af4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3af8:	bl	0 <coda_type_record_field_set_type>
    3afc:	mrc	15, 0, r3, cr13, cr0, {3}
    3b00:	ldr	r2, [pc, #1664]	; 4188 <sp3_init+0x3f90>
    3b04:	ldr	r3, [r3, r2]
    3b08:	add	r3, r3, #216	; 0xd8
    3b0c:	ldr	r3, [r3]
    3b10:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3b14:	mov	r0, r3
    3b18:	bl	0 <coda_type_record_add_field>
    3b1c:	movw	r0, #0
    3b20:	movt	r0, #0
    3b24:	bl	0 <coda_type_record_field_new>
    3b28:	str	r0, [fp, #-24]	; 0xffffffe8
    3b2c:	mrc	15, 0, r3, cr13, cr0, {3}
    3b30:	ldr	r2, [pc, #1616]	; 4188 <sp3_init+0x3f90>
    3b34:	ldr	r3, [r3, r2]
    3b38:	add	r3, r3, #256	; 0x100
    3b3c:	ldr	r3, [r3]
    3b40:	mov	r1, r3
    3b44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3b48:	bl	0 <coda_type_record_field_set_type>
    3b4c:	mrc	15, 0, r3, cr13, cr0, {3}
    3b50:	ldr	r2, [pc, #1584]	; 4188 <sp3_init+0x3f90>
    3b54:	ldr	r3, [r3, r2]
    3b58:	add	r3, r3, #216	; 0xd8
    3b5c:	ldr	r3, [r3]
    3b60:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3b64:	mov	r0, r3
    3b68:	bl	0 <coda_type_record_add_field>
    3b6c:	mrc	15, 0, r3, cr13, cr0, {3}
    3b70:	ldr	r2, [pc, #1552]	; 4188 <sp3_init+0x3f90>
    3b74:	ldr	r3, [r3, r2]
    3b78:	add	r4, r3, #276	; 0x114
    3b7c:	mov	r0, #9
    3b80:	bl	0 <coda_type_record_new>
    3b84:	mov	r3, r0
    3b88:	str	r3, [r4]
    3b8c:	movw	r0, #0
    3b90:	movt	r0, #0
    3b94:	bl	0 <coda_type_record_field_new>
    3b98:	str	r0, [fp, #-24]	; 0xffffffe8
    3b9c:	mrc	15, 0, r3, cr13, cr0, {3}
    3ba0:	ldr	r2, [pc, #1504]	; 4188 <sp3_init+0x3f90>
    3ba4:	ldr	r3, [r3, r2]
    3ba8:	add	r3, r3, #88	; 0x58
    3bac:	ldr	r3, [r3]
    3bb0:	mov	r1, r3
    3bb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3bb8:	bl	0 <coda_type_record_field_set_type>
    3bbc:	mrc	15, 0, r3, cr13, cr0, {3}
    3bc0:	ldr	r2, [pc, #1472]	; 4188 <sp3_init+0x3f90>
    3bc4:	ldr	r3, [r3, r2]
    3bc8:	add	r3, r3, #276	; 0x114
    3bcc:	ldr	r3, [r3]
    3bd0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3bd4:	mov	r0, r3
    3bd8:	bl	0 <coda_type_record_add_field>
    3bdc:	movw	r0, #0
    3be0:	movt	r0, #0
    3be4:	bl	0 <coda_type_record_field_new>
    3be8:	str	r0, [fp, #-24]	; 0xffffffe8
    3bec:	mrc	15, 0, r3, cr13, cr0, {3}
    3bf0:	ldr	r2, [pc, #1424]	; 4188 <sp3_init+0x3f90>
    3bf4:	ldr	r3, [r3, r2]
    3bf8:	add	r3, r3, #184	; 0xb8
    3bfc:	ldr	r3, [r3]
    3c00:	mov	r1, r3
    3c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c08:	bl	0 <coda_type_record_field_set_type>
    3c0c:	mrc	15, 0, r3, cr13, cr0, {3}
    3c10:	ldr	r2, [pc, #1392]	; 4188 <sp3_init+0x3f90>
    3c14:	ldr	r3, [r3, r2]
    3c18:	add	r3, r3, #276	; 0x114
    3c1c:	ldr	r3, [r3]
    3c20:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3c24:	mov	r0, r3
    3c28:	bl	0 <coda_type_record_add_field>
    3c2c:	movw	r0, #0
    3c30:	movt	r0, #0
    3c34:	bl	0 <coda_type_record_field_new>
    3c38:	str	r0, [fp, #-24]	; 0xffffffe8
    3c3c:	mrc	15, 0, r3, cr13, cr0, {3}
    3c40:	ldr	r2, [pc, #1344]	; 4188 <sp3_init+0x3f90>
    3c44:	ldr	r3, [r3, r2]
    3c48:	add	r3, r3, #188	; 0xbc
    3c4c:	ldr	r3, [r3]
    3c50:	mov	r1, r3
    3c54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c58:	bl	0 <coda_type_record_field_set_type>
    3c5c:	mrc	15, 0, r3, cr13, cr0, {3}
    3c60:	ldr	r2, [pc, #1312]	; 4188 <sp3_init+0x3f90>
    3c64:	ldr	r3, [r3, r2]
    3c68:	add	r3, r3, #276	; 0x114
    3c6c:	ldr	r3, [r3]
    3c70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3c74:	mov	r0, r3
    3c78:	bl	0 <coda_type_record_add_field>
    3c7c:	movw	r0, #0
    3c80:	movt	r0, #0
    3c84:	bl	0 <coda_type_record_field_new>
    3c88:	str	r0, [fp, #-24]	; 0xffffffe8
    3c8c:	mrc	15, 0, r3, cr13, cr0, {3}
    3c90:	ldr	r2, [pc, #1264]	; 4188 <sp3_init+0x3f90>
    3c94:	ldr	r3, [r3, r2]
    3c98:	add	r3, r3, #192	; 0xc0
    3c9c:	ldr	r3, [r3]
    3ca0:	mov	r1, r3
    3ca4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3ca8:	bl	0 <coda_type_record_field_set_type>
    3cac:	mrc	15, 0, r3, cr13, cr0, {3}
    3cb0:	ldr	r2, [pc, #1232]	; 4188 <sp3_init+0x3f90>
    3cb4:	ldr	r3, [r3, r2]
    3cb8:	add	r3, r3, #276	; 0x114
    3cbc:	ldr	r3, [r3]
    3cc0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3cc4:	mov	r0, r3
    3cc8:	bl	0 <coda_type_record_add_field>
    3ccc:	movw	r0, #0
    3cd0:	movt	r0, #0
    3cd4:	bl	0 <coda_type_record_field_new>
    3cd8:	str	r0, [fp, #-24]	; 0xffffffe8
    3cdc:	mrc	15, 0, r3, cr13, cr0, {3}
    3ce0:	ldr	r2, [pc, #1184]	; 4188 <sp3_init+0x3f90>
    3ce4:	ldr	r3, [r3, r2]
    3ce8:	add	r3, r3, #196	; 0xc4
    3cec:	ldr	r3, [r3]
    3cf0:	mov	r1, r3
    3cf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cf8:	bl	0 <coda_type_record_field_set_type>
    3cfc:	mrc	15, 0, r3, cr13, cr0, {3}
    3d00:	ldr	r2, [pc, #1152]	; 4188 <sp3_init+0x3f90>
    3d04:	ldr	r3, [r3, r2]
    3d08:	add	r3, r3, #276	; 0x114
    3d0c:	ldr	r3, [r3]
    3d10:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3d14:	mov	r0, r3
    3d18:	bl	0 <coda_type_record_add_field>
    3d1c:	movw	r0, #0
    3d20:	movt	r0, #0
    3d24:	bl	0 <coda_type_record_field_new>
    3d28:	str	r0, [fp, #-24]	; 0xffffffe8
    3d2c:	mrc	15, 0, r3, cr13, cr0, {3}
    3d30:	ldr	r2, [pc, #1104]	; 4188 <sp3_init+0x3f90>
    3d34:	ldr	r3, [r3, r2]
    3d38:	add	r3, r3, #200	; 0xc8
    3d3c:	ldr	r3, [r3]
    3d40:	mov	r1, r3
    3d44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3d48:	bl	0 <coda_type_record_field_set_type>
    3d4c:	mrc	15, 0, r3, cr13, cr0, {3}
    3d50:	ldr	r2, [pc, #1072]	; 4188 <sp3_init+0x3f90>
    3d54:	ldr	r3, [r3, r2]
    3d58:	add	r3, r3, #276	; 0x114
    3d5c:	ldr	r3, [r3]
    3d60:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3d64:	mov	r0, r3
    3d68:	bl	0 <coda_type_record_add_field>
    3d6c:	movw	r0, #0
    3d70:	movt	r0, #0
    3d74:	bl	0 <coda_type_record_field_new>
    3d78:	str	r0, [fp, #-24]	; 0xffffffe8
    3d7c:	mrc	15, 0, r3, cr13, cr0, {3}
    3d80:	ldr	r2, [pc, #1024]	; 4188 <sp3_init+0x3f90>
    3d84:	ldr	r3, [r3, r2]
    3d88:	add	r3, r3, #204	; 0xcc
    3d8c:	ldr	r3, [r3]
    3d90:	mov	r1, r3
    3d94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3d98:	bl	0 <coda_type_record_field_set_type>
    3d9c:	mrc	15, 0, r3, cr13, cr0, {3}
    3da0:	ldr	r2, [pc, #992]	; 4188 <sp3_init+0x3f90>
    3da4:	ldr	r3, [r3, r2]
    3da8:	add	r3, r3, #276	; 0x114
    3dac:	ldr	r3, [r3]
    3db0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3db4:	mov	r0, r3
    3db8:	bl	0 <coda_type_record_add_field>
    3dbc:	movw	r0, #0
    3dc0:	movt	r0, #0
    3dc4:	bl	0 <coda_type_record_field_new>
    3dc8:	str	r0, [fp, #-24]	; 0xffffffe8
    3dcc:	mrc	15, 0, r3, cr13, cr0, {3}
    3dd0:	ldr	r2, [pc, #944]	; 4188 <sp3_init+0x3f90>
    3dd4:	ldr	r3, [r3, r2]
    3dd8:	add	r3, r3, #208	; 0xd0
    3ddc:	ldr	r3, [r3]
    3de0:	mov	r1, r3
    3de4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3de8:	bl	0 <coda_type_record_field_set_type>
    3dec:	mrc	15, 0, r3, cr13, cr0, {3}
    3df0:	ldr	r2, [pc, #912]	; 4188 <sp3_init+0x3f90>
    3df4:	ldr	r3, [r3, r2]
    3df8:	add	r3, r3, #276	; 0x114
    3dfc:	ldr	r3, [r3]
    3e00:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3e04:	mov	r0, r3
    3e08:	bl	0 <coda_type_record_add_field>
    3e0c:	movw	r0, #0
    3e10:	movt	r0, #0
    3e14:	bl	0 <coda_type_record_field_new>
    3e18:	str	r0, [fp, #-24]	; 0xffffffe8
    3e1c:	mrc	15, 0, r3, cr13, cr0, {3}
    3e20:	ldr	r2, [pc, #864]	; 4188 <sp3_init+0x3f90>
    3e24:	ldr	r3, [r3, r2]
    3e28:	add	r3, r3, #212	; 0xd4
    3e2c:	ldr	r3, [r3]
    3e30:	mov	r1, r3
    3e34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e38:	bl	0 <coda_type_record_field_set_type>
    3e3c:	mrc	15, 0, r3, cr13, cr0, {3}
    3e40:	ldr	r2, [pc, #832]	; 4188 <sp3_init+0x3f90>
    3e44:	ldr	r3, [r3, r2]
    3e48:	add	r3, r3, #276	; 0x114
    3e4c:	ldr	r3, [r3]
    3e50:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3e54:	mov	r0, r3
    3e58:	bl	0 <coda_type_record_add_field>
    3e5c:	movw	r0, #0
    3e60:	movt	r0, #0
    3e64:	bl	0 <coda_type_record_field_new>
    3e68:	str	r0, [fp, #-24]	; 0xffffffe8
    3e6c:	mrc	15, 0, r3, cr13, cr0, {3}
    3e70:	ldr	r2, [pc, #784]	; 4188 <sp3_init+0x3f90>
    3e74:	ldr	r3, [r3, r2]
    3e78:	add	r3, r3, #216	; 0xd8
    3e7c:	ldr	r3, [r3]
    3e80:	mov	r1, r3
    3e84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e88:	bl	0 <coda_type_record_field_set_type>
    3e8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3e90:	bl	0 <coda_type_record_field_set_optional>
    3e94:	mrc	15, 0, r3, cr13, cr0, {3}
    3e98:	ldr	r2, [pc, #744]	; 4188 <sp3_init+0x3f90>
    3e9c:	ldr	r3, [r3, r2]
    3ea0:	add	r3, r3, #276	; 0x114
    3ea4:	ldr	r3, [r3]
    3ea8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3eac:	mov	r0, r3
    3eb0:	bl	0 <coda_type_record_add_field>
    3eb4:	mrc	15, 0, r3, cr13, cr0, {3}
    3eb8:	ldr	r2, [pc, #712]	; 4188 <sp3_init+0x3f90>
    3ebc:	ldr	r3, [r3, r2]
    3ec0:	add	r4, r3, #280	; 0x118
    3ec4:	mov	r0, #9
    3ec8:	bl	0 <coda_type_array_new>
    3ecc:	mov	r3, r0
    3ed0:	str	r3, [r4]
    3ed4:	mrc	15, 0, r3, cr13, cr0, {3}
    3ed8:	ldr	r2, [pc, #680]	; 4188 <sp3_init+0x3f90>
    3edc:	ldr	r3, [r3, r2]
    3ee0:	add	r3, r3, #280	; 0x118
    3ee4:	ldr	r3, [r3]
    3ee8:	mov	r1, #0
    3eec:	mov	r0, r3
    3ef0:	bl	0 <coda_type_array_add_variable_dimension>
    3ef4:	mrc	15, 0, r3, cr13, cr0, {3}
    3ef8:	ldr	r2, [pc, #648]	; 4188 <sp3_init+0x3f90>
    3efc:	ldr	r3, [r3, r2]
    3f00:	add	r3, r3, #280	; 0x118
    3f04:	ldr	r0, [r3]
    3f08:	mrc	15, 0, r3, cr13, cr0, {3}
    3f0c:	ldr	r2, [pc, #628]	; 4188 <sp3_init+0x3f90>
    3f10:	ldr	r3, [r3, r2]
    3f14:	add	r3, r3, #276	; 0x114
    3f18:	ldr	r3, [r3]
    3f1c:	mov	r1, r3
    3f20:	bl	0 <coda_type_array_set_base_type>
    3f24:	mrc	15, 0, r3, cr13, cr0, {3}
    3f28:	ldr	r2, [pc, #600]	; 4188 <sp3_init+0x3f90>
    3f2c:	ldr	r3, [r3, r2]
    3f30:	add	r4, r3, #292	; 0x124
    3f34:	mov	r0, #9
    3f38:	bl	0 <coda_type_record_new>
    3f3c:	mov	r3, r0
    3f40:	str	r3, [r4]
    3f44:	movw	r0, #0
    3f48:	movt	r0, #0
    3f4c:	bl	0 <coda_type_record_field_new>
    3f50:	str	r0, [fp, #-24]	; 0xffffffe8
    3f54:	mrc	15, 0, r3, cr13, cr0, {3}
    3f58:	ldr	r2, [pc, #552]	; 4188 <sp3_init+0x3f90>
    3f5c:	ldr	r3, [r3, r2]
    3f60:	add	r3, r3, #264	; 0x108
    3f64:	ldr	r3, [r3]
    3f68:	mov	r1, r3
    3f6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3f70:	bl	0 <coda_type_record_field_set_type>
    3f74:	mrc	15, 0, r3, cr13, cr0, {3}
    3f78:	ldr	r2, [pc, #520]	; 4188 <sp3_init+0x3f90>
    3f7c:	ldr	r3, [r3, r2]
    3f80:	add	r3, r3, #292	; 0x124
    3f84:	ldr	r3, [r3]
    3f88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3f8c:	mov	r0, r3
    3f90:	bl	0 <coda_type_record_add_field>
    3f94:	movw	r0, #0
    3f98:	movt	r0, #0
    3f9c:	bl	0 <coda_type_record_field_new>
    3fa0:	str	r0, [fp, #-24]	; 0xffffffe8
    3fa4:	mrc	15, 0, r3, cr13, cr0, {3}
    3fa8:	ldr	r2, [pc, #472]	; 4188 <sp3_init+0x3f90>
    3fac:	ldr	r3, [r3, r2]
    3fb0:	add	r3, r3, #272	; 0x110
    3fb4:	ldr	r3, [r3]
    3fb8:	mov	r1, r3
    3fbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3fc0:	bl	0 <coda_type_record_field_set_type>
    3fc4:	mrc	15, 0, r3, cr13, cr0, {3}
    3fc8:	ldr	r2, [pc, #440]	; 4188 <sp3_init+0x3f90>
    3fcc:	ldr	r3, [r3, r2]
    3fd0:	add	r3, r3, #292	; 0x124
    3fd4:	ldr	r3, [r3]
    3fd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3fdc:	mov	r0, r3
    3fe0:	bl	0 <coda_type_record_add_field>
    3fe4:	movw	r0, #0
    3fe8:	movt	r0, #0
    3fec:	bl	0 <coda_type_record_field_new>
    3ff0:	str	r0, [fp, #-24]	; 0xffffffe8
    3ff4:	mrc	15, 0, r3, cr13, cr0, {3}
    3ff8:	ldr	r2, [pc, #392]	; 4188 <sp3_init+0x3f90>
    3ffc:	ldr	r3, [r3, r2]
    4000:	add	r3, r3, #280	; 0x118
    4004:	ldr	r3, [r3]
    4008:	mov	r1, r3
    400c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4010:	bl	0 <coda_type_record_field_set_type>
    4014:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4018:	bl	0 <coda_type_record_field_set_optional>
    401c:	mrc	15, 0, r3, cr13, cr0, {3}
    4020:	ldr	r2, [pc, #352]	; 4188 <sp3_init+0x3f90>
    4024:	ldr	r3, [r3, r2]
    4028:	add	r3, r3, #292	; 0x124
    402c:	ldr	r3, [r3]
    4030:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4034:	mov	r0, r3
    4038:	bl	0 <coda_type_record_add_field>
    403c:	mrc	15, 0, r3, cr13, cr0, {3}
    4040:	ldr	r2, [pc, #320]	; 4188 <sp3_init+0x3f90>
    4044:	ldr	r3, [r3, r2]
    4048:	add	r4, r3, #288	; 0x120
    404c:	mov	r0, #9
    4050:	bl	0 <coda_type_array_new>
    4054:	mov	r3, r0
    4058:	str	r3, [r4]
    405c:	mrc	15, 0, r3, cr13, cr0, {3}
    4060:	ldr	r2, [pc, #288]	; 4188 <sp3_init+0x3f90>
    4064:	ldr	r3, [r3, r2]
    4068:	add	r3, r3, #288	; 0x120
    406c:	ldr	r3, [r3]
    4070:	mov	r1, #0
    4074:	mov	r0, r3
    4078:	bl	0 <coda_type_array_add_variable_dimension>
    407c:	mrc	15, 0, r3, cr13, cr0, {3}
    4080:	ldr	r2, [pc, #256]	; 4188 <sp3_init+0x3f90>
    4084:	ldr	r3, [r3, r2]
    4088:	add	r3, r3, #288	; 0x120
    408c:	ldr	r0, [r3]
    4090:	mrc	15, 0, r3, cr13, cr0, {3}
    4094:	ldr	r2, [pc, #236]	; 4188 <sp3_init+0x3f90>
    4098:	ldr	r3, [r3, r2]
    409c:	add	r3, r3, #292	; 0x124
    40a0:	ldr	r3, [r3]
    40a4:	mov	r1, r3
    40a8:	bl	0 <coda_type_array_set_base_type>
    40ac:	mrc	15, 0, r3, cr13, cr0, {3}
    40b0:	ldr	r2, [pc, #208]	; 4188 <sp3_init+0x3f90>
    40b4:	ldr	r3, [r3, r2]
    40b8:	add	r4, r3, #296	; 0x128
    40bc:	mov	r0, #9
    40c0:	bl	0 <coda_type_record_new>
    40c4:	mov	r3, r0
    40c8:	str	r3, [r4]
    40cc:	movw	r0, #0
    40d0:	movt	r0, #0
    40d4:	bl	0 <coda_type_record_field_new>
    40d8:	str	r0, [fp, #-24]	; 0xffffffe8
    40dc:	mrc	15, 0, r3, cr13, cr0, {3}
    40e0:	ldr	r2, [pc, #160]	; 4188 <sp3_init+0x3f90>
    40e4:	ldr	r3, [r3, r2]
    40e8:	add	r3, r3, #284	; 0x11c
    40ec:	ldr	r3, [r3]
    40f0:	mov	r1, r3
    40f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    40f8:	bl	0 <coda_type_record_field_set_type>
    40fc:	mrc	15, 0, r3, cr13, cr0, {3}
    4100:	ldr	r2, [pc, #128]	; 4188 <sp3_init+0x3f90>
    4104:	ldr	r3, [r3, r2]
    4108:	add	r3, r3, #296	; 0x128
    410c:	ldr	r3, [r3]
    4110:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4114:	mov	r0, r3
    4118:	bl	0 <coda_type_record_add_field>
    411c:	movw	r0, #0
    4120:	movt	r0, #0
    4124:	bl	0 <coda_type_record_field_new>
    4128:	str	r0, [fp, #-24]	; 0xffffffe8
    412c:	mrc	15, 0, r3, cr13, cr0, {3}
    4130:	ldr	r2, [pc, #80]	; 4188 <sp3_init+0x3f90>
    4134:	ldr	r3, [r3, r2]
    4138:	add	r3, r3, #288	; 0x120
    413c:	ldr	r3, [r3]
    4140:	mov	r1, r3
    4144:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4148:	bl	0 <coda_type_record_field_set_type>
    414c:	mrc	15, 0, r3, cr13, cr0, {3}
    4150:	ldr	r2, [pc, #48]	; 4188 <sp3_init+0x3f90>
    4154:	ldr	r3, [r3, r2]
    4158:	add	r3, r3, #296	; 0x128
    415c:	ldr	r3, [r3]
    4160:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4164:	mov	r0, r3
    4168:	bl	0 <coda_type_record_add_field>
    416c:	mov	r3, #0
    4170:	mov	r0, r3
    4174:	sub	sp, fp, #8
    4178:	ldr	r4, [sp]
    417c:	ldr	fp, [sp, #4]
    4180:	add	sp, sp, #8
    4184:	pop	{pc}		; (ldr pc, [sp], #4)
    4188:	.word	0x00000000

0000418c <coda_sp3_done>:
    418c:	str	fp, [sp, #-8]!
    4190:	str	lr, [sp, #4]
    4194:	add	fp, sp, #4
    4198:	sub	sp, sp, #8
    419c:	mrc	15, 0, r3, cr13, cr0, {3}
    41a0:	ldr	r2, [pc, #208]	; 4278 <coda_sp3_done+0xec>
    41a4:	ldr	r3, [r3, r2]
    41a8:	cmp	r3, #0
    41ac:	beq	4264 <coda_sp3_done+0xd8>
    41b0:	mov	r3, #0
    41b4:	str	r3, [fp, #-8]
    41b8:	b	4230 <coda_sp3_done+0xa4>
    41bc:	mrc	15, 0, r3, cr13, cr0, {3}
    41c0:	ldr	r2, [pc, #176]	; 4278 <coda_sp3_done+0xec>
    41c4:	ldr	r2, [r3, r2]
    41c8:	ldr	r3, [fp, #-8]
    41cc:	lsl	r3, r3, #2
    41d0:	add	r3, r2, r3
    41d4:	ldr	r3, [r3]
    41d8:	cmp	r3, #0
    41dc:	beq	4224 <coda_sp3_done+0x98>
    41e0:	mrc	15, 0, r3, cr13, cr0, {3}
    41e4:	ldr	r2, [pc, #140]	; 4278 <coda_sp3_done+0xec>
    41e8:	ldr	r2, [r3, r2]
    41ec:	ldr	r3, [fp, #-8]
    41f0:	lsl	r3, r3, #2
    41f4:	add	r3, r2, r3
    41f8:	ldr	r3, [r3]
    41fc:	mov	r0, r3
    4200:	bl	0 <coda_type_release>
    4204:	mrc	15, 0, r3, cr13, cr0, {3}
    4208:	ldr	r2, [pc, #104]	; 4278 <coda_sp3_done+0xec>
    420c:	ldr	r2, [r3, r2]
    4210:	ldr	r3, [fp, #-8]
    4214:	lsl	r3, r3, #2
    4218:	add	r3, r2, r3
    421c:	mov	r2, #0
    4220:	str	r2, [r3]
    4224:	ldr	r3, [fp, #-8]
    4228:	add	r3, r3, #1
    422c:	str	r3, [fp, #-8]
    4230:	ldr	r3, [fp, #-8]
    4234:	cmp	r3, #74	; 0x4a
    4238:	ble	41bc <coda_sp3_done+0x30>
    423c:	mrc	15, 0, r3, cr13, cr0, {3}
    4240:	ldr	r2, [pc, #48]	; 4278 <coda_sp3_done+0xec>
    4244:	ldr	r3, [r3, r2]
    4248:	mov	r0, r3
    424c:	bl	0 <free>
    4250:	mrc	15, 0, r3, cr13, cr0, {3}
    4254:	ldr	r2, [pc, #28]	; 4278 <coda_sp3_done+0xec>
    4258:	mov	r1, #0
    425c:	str	r1, [r3, r2]
    4260:	b	4268 <coda_sp3_done+0xdc>
    4264:	nop	{0}
    4268:	sub	sp, fp, #4
    426c:	ldr	fp, [sp]
    4270:	add	sp, sp, #4
    4274:	pop	{pc}		; (ldr pc, [sp], #4)
    4278:	.word	0x00000000

0000427c <get_line>:
    427c:	str	fp, [sp, #-8]!
    4280:	str	lr, [sp, #4]
    4284:	add	fp, sp, #4
    4288:	sub	sp, sp, #16
    428c:	str	r0, [fp, #-16]
    4290:	str	r1, [fp, #-20]	; 0xffffffec
    4294:	ldr	r2, [fp, #-16]
    4298:	mov	r1, #1000	; 0x3e8
    429c:	ldr	r0, [fp, #-20]	; 0xffffffec
    42a0:	bl	0 <fgets>
    42a4:	mov	r3, r0
    42a8:	cmp	r3, #0
    42ac:	bne	430c <get_line+0x90>
    42b0:	ldr	r0, [fp, #-16]
    42b4:	bl	0 <ferror>
    42b8:	mov	r3, r0
    42bc:	cmp	r3, #0
    42c0:	beq	42f8 <get_line+0x7c>
    42c4:	bl	0 <__errno_location>
    42c8:	mov	r3, r0
    42cc:	ldr	r3, [r3]
    42d0:	mov	r0, r3
    42d4:	bl	0 <strerror>
    42d8:	mov	r3, r0
    42dc:	mov	r2, r3
    42e0:	movw	r1, #0
    42e4:	movt	r1, #0
    42e8:	mvn	r0, #21
    42ec:	bl	0 <coda_set_error>
    42f0:	mvn	r3, #0
    42f4:	b	43b8 <get_line+0x13c>
    42f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    42fc:	mov	r2, #0
    4300:	strb	r2, [r3]
    4304:	mov	r3, #0
    4308:	b	43b8 <get_line+0x13c>
    430c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4310:	bl	0 <strlen>
    4314:	mov	r3, r0
    4318:	str	r3, [fp, #-8]
    431c:	ldr	r3, [fp, #-8]
    4320:	cmp	r3, #0
    4324:	ble	4368 <get_line+0xec>
    4328:	ldr	r3, [fp, #-8]
    432c:	sub	r3, r3, #1
    4330:	ldr	r2, [fp, #-20]	; 0xffffffec
    4334:	add	r3, r2, r3
    4338:	ldrb	r3, [r3]
    433c:	cmp	r3, #10
    4340:	bne	4368 <get_line+0xec>
    4344:	ldr	r3, [fp, #-8]
    4348:	sub	r3, r3, #1
    434c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4350:	add	r3, r2, r3
    4354:	mov	r2, #0
    4358:	strb	r2, [r3]
    435c:	ldr	r3, [fp, #-8]
    4360:	sub	r3, r3, #1
    4364:	str	r3, [fp, #-8]
    4368:	ldr	r3, [fp, #-8]
    436c:	cmp	r3, #0
    4370:	ble	43b4 <get_line+0x138>
    4374:	ldr	r3, [fp, #-8]
    4378:	sub	r3, r3, #1
    437c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4380:	add	r3, r2, r3
    4384:	ldrb	r3, [r3]
    4388:	cmp	r3, #13
    438c:	bne	43b4 <get_line+0x138>
    4390:	ldr	r3, [fp, #-8]
    4394:	sub	r3, r3, #1
    4398:	ldr	r2, [fp, #-20]	; 0xffffffec
    439c:	add	r3, r2, r3
    43a0:	mov	r2, #0
    43a4:	strb	r2, [r3]
    43a8:	ldr	r3, [fp, #-8]
    43ac:	sub	r3, r3, #1
    43b0:	str	r3, [fp, #-8]
    43b4:	ldr	r3, [fp, #-8]
    43b8:	mov	r0, r3
    43bc:	sub	sp, fp, #4
    43c0:	ldr	fp, [sp]
    43c4:	add	sp, sp, #4
    43c8:	pop	{pc}		; (ldr pc, [sp], #4)

000043cc <read_header>:
    43cc:	str	fp, [sp, #-8]!
    43d0:	str	lr, [sp, #4]
    43d4:	add	fp, sp, #4
    43d8:	sub	sp, sp, #1120	; 0x460
    43dc:	str	r0, [fp, #-1112]	; 0xfffffba8
    43e0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    43e4:	ldr	r3, [r3]
    43e8:	mov	r0, r3
    43ec:	bl	0 <ftell>
    43f0:	mov	r2, r0
    43f4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    43f8:	str	r2, [r3, #52]	; 0x34
    43fc:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4400:	ldr	r3, [r3, #48]	; 0x30
    4404:	add	r2, r3, #1
    4408:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    440c:	str	r2, [r3, #48]	; 0x30
    4410:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4414:	ldr	r3, [r3]
    4418:	sub	r2, fp, #1024	; 0x400
    441c:	mov	r1, r2
    4420:	mov	r0, r3
    4424:	bl	427c <get_line>
    4428:	str	r0, [fp, #-12]
    442c:	ldr	r3, [fp, #-12]
    4430:	cmp	r3, #0
    4434:	bge	4440 <read_header+0x74>
    4438:	mvn	r3, #0
    443c:	b	5884 <read_header+0x14b8>
    4440:	ldr	r3, [fp, #-12]
    4444:	cmp	r3, #59	; 0x3b
    4448:	bgt	4480 <read_header+0xb4>
    444c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4450:	ldr	r2, [r3, #48]	; 0x30
    4454:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4458:	ldr	r3, [r3, #52]	; 0x34
    445c:	str	r3, [sp]
    4460:	mov	r3, r2
    4464:	ldr	r2, [fp, #-12]
    4468:	movw	r1, #0
    446c:	movt	r1, #0
    4470:	mvn	r0, #21
    4474:	bl	0 <coda_set_error>
    4478:	mvn	r3, #0
    447c:	b	5884 <read_header+0x14b8>
    4480:	ldrb	r2, [fp, #-1022]	; 0xfffffc02
    4484:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4488:	strb	r2, [r3, #44]	; 0x2c
    448c:	ldrb	r3, [fp, #-1022]	; 0xfffffc02
    4490:	strb	r3, [fp, #-1108]	; 0xfffffbac
    4494:	mov	r3, #0
    4498:	strb	r3, [fp, #-1107]	; 0xfffffbad
    449c:	mrc	15, 0, r3, cr13, cr0, {3}
    44a0:	ldr	r2, [pc, #3896]	; 53e0 <read_header+0x1014>
    44a4:	ldr	r3, [r3, r2]
    44a8:	ldr	r0, [r3]
    44ac:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    44b0:	ldr	r2, [r3, #4]
    44b4:	sub	r3, fp, #1104	; 0x450
    44b8:	sub	r3, r3, #4
    44bc:	mov	r1, #0
    44c0:	bl	0 <coda_mem_string_new>
    44c4:	str	r0, [fp, #-16]
    44c8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    44cc:	ldr	r0, [r3, #8]
    44d0:	mov	r3, #0
    44d4:	ldr	r2, [fp, #-16]
    44d8:	movw	r1, #0
    44dc:	movt	r1, #0
    44e0:	bl	0 <coda_mem_record_add_field>
    44e4:	sub	r3, fp, #1024	; 0x400
    44e8:	add	r1, r3, #3
    44ec:	sub	r3, fp, #1104	; 0x450
    44f0:	sub	r3, r3, #4
    44f4:	mov	r2, #28
    44f8:	mov	r0, r3
    44fc:	bl	0 <memcpy>
    4500:	mov	r3, #0
    4504:	strb	r3, [fp, #-1080]	; 0xfffffbc8
    4508:	mrc	15, 0, r3, cr13, cr0, {3}
    450c:	ldr	r2, [pc, #3788]	; 53e0 <read_header+0x1014>
    4510:	ldr	r3, [r3, r2]
    4514:	add	r3, r3, #4
    4518:	ldr	r0, [r3]
    451c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4520:	ldr	r2, [r3, #4]
    4524:	sub	r3, fp, #1104	; 0x450
    4528:	sub	r3, r3, #4
    452c:	mov	r1, #0
    4530:	bl	0 <coda_mem_string_new>
    4534:	str	r0, [fp, #-20]	; 0xffffffec
    4538:	mrc	15, 0, r3, cr13, cr0, {3}
    453c:	ldr	r2, [pc, #3740]	; 53e0 <read_header+0x1014>
    4540:	ldr	r3, [r3, r2]
    4544:	add	r3, r3, #8
    4548:	ldr	r3, [r3]
    454c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4550:	mov	r1, #0
    4554:	mov	r0, r3
    4558:	bl	0 <coda_mem_time_new>
    455c:	str	r0, [fp, #-16]
    4560:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4564:	ldr	r0, [r3, #8]
    4568:	mov	r3, #0
    456c:	ldr	r2, [fp, #-16]
    4570:	movw	r1, #0
    4574:	movt	r1, #0
    4578:	bl	0 <coda_mem_record_add_field>
    457c:	sub	r2, fp, #1040	; 0x410
    4580:	sub	r2, r2, #4
    4584:	sub	r3, fp, #1024	; 0x400
    4588:	add	r0, r3, #32
    458c:	mov	r3, #0
    4590:	mov	r1, #7
    4594:	bl	0 <coda_ascii_parse_int64>
    4598:	mov	r3, r0
    459c:	cmp	r3, #0
    45a0:	bge	45d0 <read_header+0x204>
    45a4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    45a8:	ldr	r1, [r3, #48]	; 0x30
    45ac:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    45b0:	ldr	r3, [r3, #52]	; 0x34
    45b4:	add	r3, r3, #32
    45b8:	mov	r2, r3
    45bc:	movw	r0, #0
    45c0:	movt	r0, #0
    45c4:	bl	0 <coda_add_error_message>
    45c8:	mvn	r3, #0
    45cc:	b	5884 <read_header+0x14b8>
    45d0:	mrc	15, 0, r3, cr13, cr0, {3}
    45d4:	ldr	r2, [pc, #3588]	; 53e0 <read_header+0x1014>
    45d8:	ldr	r3, [r3, r2]
    45dc:	add	r3, r3, #12
    45e0:	ldr	r0, [r3]
    45e4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    45e8:	ldr	r1, [r3, #4]
    45ec:	sub	r3, fp, #1040	; 0x410
    45f0:	sub	r3, r3, #4
    45f4:	ldrd	r2, [r3]
    45f8:	mov	r3, r2
    45fc:	mov	r2, r1
    4600:	mov	r1, #0
    4604:	bl	0 <coda_mem_int32_new>
    4608:	str	r0, [fp, #-16]
    460c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4610:	ldr	r0, [r3, #8]
    4614:	mov	r3, #0
    4618:	ldr	r2, [fp, #-16]
    461c:	movw	r1, #0
    4620:	movt	r1, #0
    4624:	bl	0 <coda_mem_record_add_field>
    4628:	sub	r3, fp, #1024	; 0x400
    462c:	add	r1, r3, #40	; 0x28
    4630:	sub	r3, fp, #1104	; 0x450
    4634:	sub	r3, r3, #4
    4638:	mov	r2, #5
    463c:	mov	r0, r3
    4640:	bl	0 <memcpy>
    4644:	mov	r3, #0
    4648:	strb	r3, [fp, #-1103]	; 0xfffffbb1
    464c:	mrc	15, 0, r3, cr13, cr0, {3}
    4650:	ldr	r2, [pc, #3464]	; 53e0 <read_header+0x1014>
    4654:	ldr	r3, [r3, r2]
    4658:	add	r3, r3, #16
    465c:	ldr	r0, [r3]
    4660:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4664:	ldr	r2, [r3, #4]
    4668:	sub	r3, fp, #1104	; 0x450
    466c:	sub	r3, r3, #4
    4670:	mov	r1, #0
    4674:	bl	0 <coda_mem_string_new>
    4678:	str	r0, [fp, #-16]
    467c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4680:	ldr	r0, [r3, #8]
    4684:	mov	r3, #0
    4688:	ldr	r2, [fp, #-16]
    468c:	movw	r1, #0
    4690:	movt	r1, #0
    4694:	bl	0 <coda_mem_record_add_field>
    4698:	sub	r3, fp, #1024	; 0x400
    469c:	add	r1, r3, #46	; 0x2e
    46a0:	sub	r3, fp, #1104	; 0x450
    46a4:	sub	r3, r3, #4
    46a8:	mov	r2, #5
    46ac:	mov	r0, r3
    46b0:	bl	0 <memcpy>
    46b4:	mov	r3, #0
    46b8:	strb	r3, [fp, #-1103]	; 0xfffffbb1
    46bc:	mrc	15, 0, r3, cr13, cr0, {3}
    46c0:	ldr	r2, [pc, #3352]	; 53e0 <read_header+0x1014>
    46c4:	ldr	r3, [r3, r2]
    46c8:	add	r3, r3, #20
    46cc:	ldr	r0, [r3]
    46d0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    46d4:	ldr	r2, [r3, #4]
    46d8:	sub	r3, fp, #1104	; 0x450
    46dc:	sub	r3, r3, #4
    46e0:	mov	r1, #0
    46e4:	bl	0 <coda_mem_string_new>
    46e8:	str	r0, [fp, #-16]
    46ec:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    46f0:	ldr	r0, [r3, #8]
    46f4:	mov	r3, #0
    46f8:	ldr	r2, [fp, #-16]
    46fc:	movw	r1, #0
    4700:	movt	r1, #0
    4704:	bl	0 <coda_mem_record_add_field>
    4708:	sub	r3, fp, #1024	; 0x400
    470c:	add	r1, r3, #52	; 0x34
    4710:	sub	r3, fp, #1104	; 0x450
    4714:	sub	r3, r3, #4
    4718:	mov	r2, #3
    471c:	mov	r0, r3
    4720:	bl	0 <memcpy>
    4724:	mov	r3, #0
    4728:	strb	r3, [fp, #-1105]	; 0xfffffbaf
    472c:	mrc	15, 0, r3, cr13, cr0, {3}
    4730:	ldr	r2, [pc, #3240]	; 53e0 <read_header+0x1014>
    4734:	ldr	r3, [r3, r2]
    4738:	add	r3, r3, #24
    473c:	ldr	r0, [r3]
    4740:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4744:	ldr	r2, [r3, #4]
    4748:	sub	r3, fp, #1104	; 0x450
    474c:	sub	r3, r3, #4
    4750:	mov	r1, #0
    4754:	bl	0 <coda_mem_string_new>
    4758:	str	r0, [fp, #-16]
    475c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4760:	ldr	r0, [r3, #8]
    4764:	mov	r3, #0
    4768:	ldr	r2, [fp, #-16]
    476c:	movw	r1, #0
    4770:	movt	r1, #0
    4774:	bl	0 <coda_mem_record_add_field>
    4778:	ldr	r3, [fp, #-968]	; 0xfffffc38
    477c:	str	r3, [fp, #-1108]	; 0xfffffbac
    4780:	mov	r3, #0
    4784:	strb	r3, [fp, #-1104]	; 0xfffffbb0
    4788:	mrc	15, 0, r3, cr13, cr0, {3}
    478c:	ldr	r2, [pc, #3148]	; 53e0 <read_header+0x1014>
    4790:	ldr	r3, [r3, r2]
    4794:	add	r3, r3, #28
    4798:	ldr	r0, [r3]
    479c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    47a0:	ldr	r2, [r3, #4]
    47a4:	sub	r3, fp, #1104	; 0x450
    47a8:	sub	r3, r3, #4
    47ac:	mov	r1, #0
    47b0:	bl	0 <coda_mem_string_new>
    47b4:	str	r0, [fp, #-16]
    47b8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    47bc:	ldr	r0, [r3, #8]
    47c0:	mov	r3, #0
    47c4:	ldr	r2, [fp, #-16]
    47c8:	movw	r1, #0
    47cc:	movt	r1, #0
    47d0:	bl	0 <coda_mem_record_add_field>
    47d4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    47d8:	ldr	r3, [r3]
    47dc:	mov	r0, r3
    47e0:	bl	0 <ftell>
    47e4:	mov	r2, r0
    47e8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    47ec:	str	r2, [r3, #52]	; 0x34
    47f0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    47f4:	ldr	r3, [r3, #48]	; 0x30
    47f8:	add	r2, r3, #1
    47fc:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4800:	str	r2, [r3, #48]	; 0x30
    4804:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4808:	ldr	r3, [r3]
    480c:	sub	r2, fp, #1024	; 0x400
    4810:	mov	r1, r2
    4814:	mov	r0, r3
    4818:	bl	427c <get_line>
    481c:	str	r0, [fp, #-12]
    4820:	ldr	r3, [fp, #-12]
    4824:	cmp	r3, #0
    4828:	bge	4834 <read_header+0x468>
    482c:	mvn	r3, #0
    4830:	b	5884 <read_header+0x14b8>
    4834:	ldr	r3, [fp, #-12]
    4838:	cmp	r3, #59	; 0x3b
    483c:	bgt	4874 <read_header+0x4a8>
    4840:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4844:	ldr	r2, [r3, #48]	; 0x30
    4848:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    484c:	ldr	r3, [r3, #52]	; 0x34
    4850:	str	r3, [sp]
    4854:	mov	r3, r2
    4858:	ldr	r2, [fp, #-12]
    485c:	movw	r1, #0
    4860:	movt	r1, #0
    4864:	mvn	r0, #21
    4868:	bl	0 <coda_set_error>
    486c:	mvn	r3, #0
    4870:	b	5884 <read_header+0x14b8>
    4874:	sub	r3, fp, #1024	; 0x400
    4878:	mov	r2, #3
    487c:	movw	r1, #0
    4880:	movt	r1, #0
    4884:	mov	r0, r3
    4888:	bl	0 <memcmp>
    488c:	mov	r3, r0
    4890:	cmp	r3, #0
    4894:	beq	48c0 <read_header+0x4f4>
    4898:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    489c:	ldr	r2, [r3, #48]	; 0x30
    48a0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    48a4:	ldr	r3, [r3, #52]	; 0x34
    48a8:	movw	r1, #0
    48ac:	movt	r1, #0
    48b0:	mvn	r0, #21
    48b4:	bl	0 <coda_set_error>
    48b8:	mvn	r3, #0
    48bc:	b	5884 <read_header+0x14b8>
    48c0:	sub	r2, fp, #1040	; 0x410
    48c4:	sub	r2, r2, #4
    48c8:	sub	r3, fp, #1024	; 0x400
    48cc:	add	r0, r3, #3
    48d0:	mov	r3, #0
    48d4:	mov	r1, #4
    48d8:	bl	0 <coda_ascii_parse_int64>
    48dc:	mov	r3, r0
    48e0:	cmp	r3, #0
    48e4:	bge	4914 <read_header+0x548>
    48e8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    48ec:	ldr	r1, [r3, #48]	; 0x30
    48f0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    48f4:	ldr	r3, [r3, #52]	; 0x34
    48f8:	add	r3, r3, #3
    48fc:	mov	r2, r3
    4900:	movw	r0, #0
    4904:	movt	r0, #0
    4908:	bl	0 <coda_add_error_message>
    490c:	mvn	r3, #0
    4910:	b	5884 <read_header+0x14b8>
    4914:	mrc	15, 0, r3, cr13, cr0, {3}
    4918:	ldr	r2, [pc, #2752]	; 53e0 <read_header+0x1014>
    491c:	ldr	r3, [r3, r2]
    4920:	add	r3, r3, #32
    4924:	ldr	r0, [r3]
    4928:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    492c:	ldr	r1, [r3, #4]
    4930:	sub	r3, fp, #1040	; 0x410
    4934:	sub	r3, r3, #4
    4938:	ldrd	r2, [r3]
    493c:	sxth	r3, r2
    4940:	mov	r2, r1
    4944:	mov	r1, #0
    4948:	bl	0 <coda_mem_int16_new>
    494c:	str	r0, [fp, #-16]
    4950:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4954:	ldr	r0, [r3, #8]
    4958:	mov	r3, #0
    495c:	ldr	r2, [fp, #-16]
    4960:	movw	r1, #0
    4964:	movt	r1, #0
    4968:	bl	0 <coda_mem_record_add_field>
    496c:	sub	r2, fp, #1024	; 0x400
    4970:	sub	r2, r2, #4
    4974:	sub	r2, r2, #8
    4978:	sub	r3, fp, #1024	; 0x400
    497c:	add	r0, r3, #8
    4980:	mov	r3, #0
    4984:	mov	r1, #15
    4988:	bl	0 <coda_ascii_parse_double>
    498c:	mov	r3, r0
    4990:	cmp	r3, #0
    4994:	bge	49c4 <read_header+0x5f8>
    4998:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    499c:	ldr	r1, [r3, #48]	; 0x30
    49a0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    49a4:	ldr	r3, [r3, #52]	; 0x34
    49a8:	add	r3, r3, #8
    49ac:	mov	r2, r3
    49b0:	movw	r0, #0
    49b4:	movt	r0, #0
    49b8:	bl	0 <coda_add_error_message>
    49bc:	mvn	r3, #0
    49c0:	b	5884 <read_header+0x14b8>
    49c4:	mrc	15, 0, r3, cr13, cr0, {3}
    49c8:	ldr	r2, [pc, #2576]	; 53e0 <read_header+0x1014>
    49cc:	ldr	r3, [r3, r2]
    49d0:	add	r3, r3, #36	; 0x24
    49d4:	ldr	r0, [r3]
    49d8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    49dc:	ldr	r3, [r3, #4]
    49e0:	sub	r2, fp, #1024	; 0x400
    49e4:	sub	r2, r2, #4
    49e8:	vldr	d7, [r2, #-8]
    49ec:	vmov.f64	d0, d7
    49f0:	mov	r2, r3
    49f4:	mov	r1, #0
    49f8:	bl	0 <coda_mem_double_new>
    49fc:	str	r0, [fp, #-16]
    4a00:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4a04:	ldr	r0, [r3, #8]
    4a08:	mov	r3, #0
    4a0c:	ldr	r2, [fp, #-16]
    4a10:	movw	r1, #0
    4a14:	movt	r1, #0
    4a18:	bl	0 <coda_mem_record_add_field>
    4a1c:	sub	r2, fp, #1024	; 0x400
    4a20:	sub	r2, r2, #4
    4a24:	sub	r2, r2, #8
    4a28:	sub	r3, fp, #1024	; 0x400
    4a2c:	add	r0, r3, #24
    4a30:	mov	r3, #0
    4a34:	mov	r1, #14
    4a38:	bl	0 <coda_ascii_parse_double>
    4a3c:	mov	r3, r0
    4a40:	cmp	r3, #0
    4a44:	bge	4a74 <read_header+0x6a8>
    4a48:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4a4c:	ldr	r1, [r3, #48]	; 0x30
    4a50:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4a54:	ldr	r3, [r3, #52]	; 0x34
    4a58:	add	r3, r3, #24
    4a5c:	mov	r2, r3
    4a60:	movw	r0, #0
    4a64:	movt	r0, #0
    4a68:	bl	0 <coda_add_error_message>
    4a6c:	mvn	r3, #0
    4a70:	b	5884 <read_header+0x14b8>
    4a74:	mrc	15, 0, r3, cr13, cr0, {3}
    4a78:	ldr	r2, [pc, #2400]	; 53e0 <read_header+0x1014>
    4a7c:	ldr	r3, [r3, r2]
    4a80:	add	r3, r3, #40	; 0x28
    4a84:	ldr	r0, [r3]
    4a88:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4a8c:	ldr	r3, [r3, #4]
    4a90:	sub	r2, fp, #1024	; 0x400
    4a94:	sub	r2, r2, #4
    4a98:	vldr	d7, [r2, #-8]
    4a9c:	vmov.f64	d0, d7
    4aa0:	mov	r2, r3
    4aa4:	mov	r1, #0
    4aa8:	bl	0 <coda_mem_double_new>
    4aac:	str	r0, [fp, #-16]
    4ab0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4ab4:	ldr	r0, [r3, #8]
    4ab8:	mov	r3, #0
    4abc:	ldr	r2, [fp, #-16]
    4ac0:	movw	r1, #0
    4ac4:	movt	r1, #0
    4ac8:	bl	0 <coda_mem_record_add_field>
    4acc:	sub	r2, fp, #1040	; 0x410
    4ad0:	sub	r2, r2, #4
    4ad4:	sub	r3, fp, #1024	; 0x400
    4ad8:	add	r0, r3, #39	; 0x27
    4adc:	mov	r3, #0
    4ae0:	mov	r1, #5
    4ae4:	bl	0 <coda_ascii_parse_int64>
    4ae8:	mov	r3, r0
    4aec:	cmp	r3, #0
    4af0:	bge	4b20 <read_header+0x754>
    4af4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4af8:	ldr	r1, [r3, #48]	; 0x30
    4afc:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4b00:	ldr	r3, [r3, #52]	; 0x34
    4b04:	add	r3, r3, #39	; 0x27
    4b08:	mov	r2, r3
    4b0c:	movw	r0, #0
    4b10:	movt	r0, #0
    4b14:	bl	0 <coda_add_error_message>
    4b18:	mvn	r3, #0
    4b1c:	b	5884 <read_header+0x14b8>
    4b20:	mrc	15, 0, r3, cr13, cr0, {3}
    4b24:	ldr	r2, [pc, #2228]	; 53e0 <read_header+0x1014>
    4b28:	ldr	r3, [r3, r2]
    4b2c:	add	r3, r3, #44	; 0x2c
    4b30:	ldr	r0, [r3]
    4b34:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4b38:	ldr	r1, [r3, #4]
    4b3c:	sub	r3, fp, #1040	; 0x410
    4b40:	sub	r3, r3, #4
    4b44:	ldrd	r2, [r3]
    4b48:	mov	r3, r2
    4b4c:	mov	r2, r1
    4b50:	mov	r1, #0
    4b54:	bl	0 <coda_mem_int32_new>
    4b58:	str	r0, [fp, #-16]
    4b5c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4b60:	ldr	r0, [r3, #8]
    4b64:	mov	r3, #0
    4b68:	ldr	r2, [fp, #-16]
    4b6c:	movw	r1, #0
    4b70:	movt	r1, #0
    4b74:	bl	0 <coda_mem_record_add_field>
    4b78:	sub	r2, fp, #1024	; 0x400
    4b7c:	sub	r2, r2, #4
    4b80:	sub	r2, r2, #8
    4b84:	sub	r3, fp, #1024	; 0x400
    4b88:	add	r0, r3, #45	; 0x2d
    4b8c:	mov	r3, #0
    4b90:	mov	r1, #15
    4b94:	bl	0 <coda_ascii_parse_double>
    4b98:	mov	r3, r0
    4b9c:	cmp	r3, #0
    4ba0:	bge	4bd0 <read_header+0x804>
    4ba4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4ba8:	ldr	r1, [r3, #48]	; 0x30
    4bac:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4bb0:	ldr	r3, [r3, #52]	; 0x34
    4bb4:	add	r3, r3, #45	; 0x2d
    4bb8:	mov	r2, r3
    4bbc:	movw	r0, #0
    4bc0:	movt	r0, #0
    4bc4:	bl	0 <coda_add_error_message>
    4bc8:	mvn	r3, #0
    4bcc:	b	5884 <read_header+0x14b8>
    4bd0:	mrc	15, 0, r3, cr13, cr0, {3}
    4bd4:	ldr	r2, [pc, #2052]	; 53e0 <read_header+0x1014>
    4bd8:	ldr	r3, [r3, r2]
    4bdc:	add	r3, r3, #48	; 0x30
    4be0:	ldr	r0, [r3]
    4be4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4be8:	ldr	r3, [r3, #4]
    4bec:	sub	r2, fp, #1024	; 0x400
    4bf0:	sub	r2, r2, #4
    4bf4:	vldr	d7, [r2, #-8]
    4bf8:	vmov.f64	d0, d7
    4bfc:	mov	r2, r3
    4c00:	mov	r1, #0
    4c04:	bl	0 <coda_mem_double_new>
    4c08:	str	r0, [fp, #-16]
    4c0c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c10:	ldr	r0, [r3, #8]
    4c14:	mov	r3, #0
    4c18:	ldr	r2, [fp, #-16]
    4c1c:	movw	r1, #0
    4c20:	movt	r1, #0
    4c24:	bl	0 <coda_mem_record_add_field>
    4c28:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c2c:	ldr	r3, [r3]
    4c30:	mov	r0, r3
    4c34:	bl	0 <ftell>
    4c38:	mov	r2, r0
    4c3c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c40:	str	r2, [r3, #52]	; 0x34
    4c44:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c48:	ldr	r3, [r3, #48]	; 0x30
    4c4c:	add	r2, r3, #1
    4c50:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c54:	str	r2, [r3, #48]	; 0x30
    4c58:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c5c:	ldr	r3, [r3]
    4c60:	sub	r2, fp, #1024	; 0x400
    4c64:	mov	r1, r2
    4c68:	mov	r0, r3
    4c6c:	bl	427c <get_line>
    4c70:	str	r0, [fp, #-12]
    4c74:	ldr	r3, [fp, #-12]
    4c78:	cmp	r3, #0
    4c7c:	bge	4c88 <read_header+0x8bc>
    4c80:	mvn	r3, #0
    4c84:	b	5884 <read_header+0x14b8>
    4c88:	ldr	r3, [fp, #-12]
    4c8c:	cmp	r3, #59	; 0x3b
    4c90:	bgt	4cc8 <read_header+0x8fc>
    4c94:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4c98:	ldr	r2, [r3, #48]	; 0x30
    4c9c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4ca0:	ldr	r3, [r3, #52]	; 0x34
    4ca4:	str	r3, [sp]
    4ca8:	mov	r3, r2
    4cac:	ldr	r2, [fp, #-12]
    4cb0:	movw	r1, #0
    4cb4:	movt	r1, #0
    4cb8:	mvn	r0, #21
    4cbc:	bl	0 <coda_set_error>
    4cc0:	mvn	r3, #0
    4cc4:	b	5884 <read_header+0x14b8>
    4cc8:	sub	r3, fp, #1024	; 0x400
    4ccc:	mov	r2, #4
    4cd0:	movw	r1, #0
    4cd4:	movt	r1, #0
    4cd8:	mov	r0, r3
    4cdc:	bl	0 <memcmp>
    4ce0:	mov	r3, r0
    4ce4:	cmp	r3, #0
    4ce8:	beq	4d14 <read_header+0x948>
    4cec:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4cf0:	ldr	r2, [r3, #48]	; 0x30
    4cf4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4cf8:	ldr	r3, [r3, #52]	; 0x34
    4cfc:	movw	r1, #0
    4d00:	movt	r1, #0
    4d04:	mvn	r0, #21
    4d08:	bl	0 <coda_set_error>
    4d0c:	mvn	r3, #0
    4d10:	b	5884 <read_header+0x14b8>
    4d14:	sub	r2, fp, #1040	; 0x410
    4d18:	sub	r2, r2, #4
    4d1c:	sub	r3, fp, #1024	; 0x400
    4d20:	add	r0, r3, #4
    4d24:	mov	r3, #0
    4d28:	mov	r1, #2
    4d2c:	bl	0 <coda_ascii_parse_int64>
    4d30:	mov	r3, r0
    4d34:	cmp	r3, #0
    4d38:	bge	4d68 <read_header+0x99c>
    4d3c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4d40:	ldr	r1, [r3, #48]	; 0x30
    4d44:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4d48:	ldr	r3, [r3, #52]	; 0x34
    4d4c:	add	r3, r3, #4
    4d50:	mov	r2, r3
    4d54:	movw	r0, #0
    4d58:	movt	r0, #0
    4d5c:	bl	0 <coda_add_error_message>
    4d60:	mvn	r3, #0
    4d64:	b	5884 <read_header+0x14b8>
    4d68:	mrc	15, 0, r3, cr13, cr0, {3}
    4d6c:	ldr	r2, [pc, #1644]	; 53e0 <read_header+0x1014>
    4d70:	ldr	r3, [r3, r2]
    4d74:	add	r3, r3, #52	; 0x34
    4d78:	ldr	r0, [r3]
    4d7c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4d80:	ldr	r1, [r3, #4]
    4d84:	sub	r3, fp, #1040	; 0x410
    4d88:	sub	r3, r3, #4
    4d8c:	ldrd	r2, [r3]
    4d90:	uxtb	r3, r2
    4d94:	mov	r2, r1
    4d98:	mov	r1, #0
    4d9c:	bl	0 <coda_mem_uint8_new>
    4da0:	str	r0, [fp, #-16]
    4da4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4da8:	ldr	r0, [r3, #8]
    4dac:	mov	r3, #0
    4db0:	ldr	r2, [fp, #-16]
    4db4:	movw	r1, #0
    4db8:	movt	r1, #0
    4dbc:	bl	0 <coda_mem_record_add_field>
    4dc0:	sub	r3, fp, #1040	; 0x410
    4dc4:	sub	r3, r3, #4
    4dc8:	ldrd	r2, [r3]
    4dcc:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4dd0:	str	r2, [r3, #40]	; 0x28
    4dd4:	mrc	15, 0, r3, cr13, cr0, {3}
    4dd8:	ldr	r2, [pc, #1536]	; 53e0 <read_header+0x1014>
    4ddc:	ldr	r3, [r3, r2]
    4de0:	add	r3, r3, #60	; 0x3c
    4de4:	ldr	r3, [r3]
    4de8:	mov	r1, #0
    4dec:	mov	r0, r3
    4df0:	bl	0 <coda_mem_array_new>
    4df4:	str	r0, [fp, #-24]	; 0xffffffe8
    4df8:	mov	r3, #0
    4dfc:	str	r3, [fp, #-8]
    4e00:	b	5004 <read_header+0xc38>
    4e04:	ldr	r1, [fp, #-8]
    4e08:	movw	r3, #30841	; 0x7879
    4e0c:	movt	r3, #30840	; 0x7878
    4e10:	smull	r2, r3, r3, r1
    4e14:	asr	r2, r3, #3
    4e18:	asr	r3, r1, #31
    4e1c:	sub	r2, r2, r3
    4e20:	mov	r3, r2
    4e24:	lsl	r3, r3, #4
    4e28:	add	r3, r3, r2
    4e2c:	sub	r2, r1, r3
    4e30:	cmp	r2, #0
    4e34:	bne	4f48 <read_header+0xb7c>
    4e38:	ldr	r3, [fp, #-8]
    4e3c:	cmp	r3, #0
    4e40:	ble	4f48 <read_header+0xb7c>
    4e44:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4e48:	ldr	r3, [r3]
    4e4c:	mov	r0, r3
    4e50:	bl	0 <ftell>
    4e54:	mov	r2, r0
    4e58:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4e5c:	str	r2, [r3, #52]	; 0x34
    4e60:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4e64:	ldr	r3, [r3, #48]	; 0x30
    4e68:	add	r2, r3, #1
    4e6c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4e70:	str	r2, [r3, #48]	; 0x30
    4e74:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4e78:	ldr	r3, [r3]
    4e7c:	sub	r2, fp, #1024	; 0x400
    4e80:	mov	r1, r2
    4e84:	mov	r0, r3
    4e88:	bl	427c <get_line>
    4e8c:	str	r0, [fp, #-12]
    4e90:	ldr	r3, [fp, #-12]
    4e94:	cmp	r3, #0
    4e98:	bge	4eac <read_header+0xae0>
    4e9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4ea0:	bl	0 <coda_dynamic_type_delete>
    4ea4:	mvn	r3, #0
    4ea8:	b	5884 <read_header+0x14b8>
    4eac:	ldr	r3, [fp, #-12]
    4eb0:	cmp	r3, #59	; 0x3b
    4eb4:	bgt	4ef4 <read_header+0xb28>
    4eb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4ebc:	bl	0 <coda_dynamic_type_delete>
    4ec0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4ec4:	ldr	r2, [r3, #48]	; 0x30
    4ec8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4ecc:	ldr	r3, [r3, #52]	; 0x34
    4ed0:	str	r3, [sp]
    4ed4:	mov	r3, r2
    4ed8:	ldr	r2, [fp, #-12]
    4edc:	movw	r1, #0
    4ee0:	movt	r1, #0
    4ee4:	mvn	r0, #21
    4ee8:	bl	0 <coda_set_error>
    4eec:	mvn	r3, #0
    4ef0:	b	5884 <read_header+0x14b8>
    4ef4:	sub	r3, fp, #1024	; 0x400
    4ef8:	mov	r2, #9
    4efc:	movw	r1, #0
    4f00:	movt	r1, #0
    4f04:	mov	r0, r3
    4f08:	bl	0 <memcmp>
    4f0c:	mov	r3, r0
    4f10:	cmp	r3, #0
    4f14:	beq	4f48 <read_header+0xb7c>
    4f18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4f1c:	bl	0 <coda_dynamic_type_delete>
    4f20:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4f24:	ldr	r2, [r3, #48]	; 0x30
    4f28:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4f2c:	ldr	r3, [r3, #52]	; 0x34
    4f30:	movw	r1, #0
    4f34:	movt	r1, #0
    4f38:	mvn	r0, #21
    4f3c:	bl	0 <coda_set_error>
    4f40:	mvn	r3, #0
    4f44:	b	5884 <read_header+0x14b8>
    4f48:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4f4c:	ldr	r3, [r3, #40]	; 0x28
    4f50:	ldr	r2, [fp, #-8]
    4f54:	cmp	r2, r3
    4f58:	bge	4ff8 <read_header+0xc2c>
    4f5c:	ldr	r1, [fp, #-8]
    4f60:	movw	r3, #30841	; 0x7879
    4f64:	movt	r3, #30840	; 0x7878
    4f68:	smull	r2, r3, r3, r1
    4f6c:	asr	r2, r3, #3
    4f70:	asr	r3, r1, #31
    4f74:	sub	r3, r2, r3
    4f78:	mov	r2, r3
    4f7c:	lsl	r2, r2, #4
    4f80:	add	r2, r2, r3
    4f84:	sub	r3, r1, r2
    4f88:	mov	r2, r3
    4f8c:	lsl	r2, r2, #1
    4f90:	add	r3, r2, r3
    4f94:	add	r3, r3, #9
    4f98:	sub	r2, fp, #1024	; 0x400
    4f9c:	add	r1, r2, r3
    4fa0:	sub	r3, fp, #1104	; 0x450
    4fa4:	sub	r3, r3, #4
    4fa8:	mov	r2, #3
    4fac:	mov	r0, r3
    4fb0:	bl	0 <memcpy>
    4fb4:	mov	r3, #0
    4fb8:	strb	r3, [fp, #-1105]	; 0xfffffbaf
    4fbc:	mrc	15, 0, r3, cr13, cr0, {3}
    4fc0:	ldr	r2, [pc, #1048]	; 53e0 <read_header+0x1014>
    4fc4:	ldr	r3, [r3, r2]
    4fc8:	add	r3, r3, #56	; 0x38
    4fcc:	ldr	r0, [r3]
    4fd0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    4fd4:	ldr	r2, [r3, #4]
    4fd8:	sub	r3, fp, #1104	; 0x450
    4fdc:	sub	r3, r3, #4
    4fe0:	mov	r1, #0
    4fe4:	bl	0 <coda_mem_string_new>
    4fe8:	str	r0, [fp, #-16]
    4fec:	ldr	r1, [fp, #-16]
    4ff0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4ff4:	bl	0 <coda_mem_array_add_element>
    4ff8:	ldr	r3, [fp, #-8]
    4ffc:	add	r3, r3, #1
    5000:	str	r3, [fp, #-8]
    5004:	ldr	r3, [fp, #-8]
    5008:	cmp	r3, #84	; 0x54
    500c:	ble	4e04 <read_header+0xa38>
    5010:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5014:	ldr	r0, [r3, #8]
    5018:	mov	r3, #0
    501c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5020:	movw	r1, #0
    5024:	movt	r1, #0
    5028:	bl	0 <coda_mem_record_add_field>
    502c:	mrc	15, 0, r3, cr13, cr0, {3}
    5030:	ldr	r2, [pc, #936]	; 53e0 <read_header+0x1014>
    5034:	ldr	r3, [r3, r2]
    5038:	add	r3, r3, #68	; 0x44
    503c:	ldr	r3, [r3]
    5040:	mov	r1, #0
    5044:	mov	r0, r3
    5048:	bl	0 <coda_mem_array_new>
    504c:	str	r0, [fp, #-24]	; 0xffffffe8
    5050:	mov	r3, #0
    5054:	str	r3, [fp, #-8]
    5058:	b	52cc <read_header+0xf00>
    505c:	ldr	r1, [fp, #-8]
    5060:	movw	r3, #30841	; 0x7879
    5064:	movt	r3, #30840	; 0x7878
    5068:	smull	r2, r3, r3, r1
    506c:	asr	r2, r3, #3
    5070:	asr	r3, r1, #31
    5074:	sub	r2, r2, r3
    5078:	mov	r3, r2
    507c:	lsl	r3, r3, #4
    5080:	add	r3, r3, r2
    5084:	sub	r2, r1, r3
    5088:	cmp	r2, #0
    508c:	bne	5194 <read_header+0xdc8>
    5090:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5094:	ldr	r3, [r3]
    5098:	mov	r0, r3
    509c:	bl	0 <ftell>
    50a0:	mov	r2, r0
    50a4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    50a8:	str	r2, [r3, #52]	; 0x34
    50ac:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    50b0:	ldr	r3, [r3, #48]	; 0x30
    50b4:	add	r2, r3, #1
    50b8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    50bc:	str	r2, [r3, #48]	; 0x30
    50c0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    50c4:	ldr	r3, [r3]
    50c8:	sub	r2, fp, #1024	; 0x400
    50cc:	mov	r1, r2
    50d0:	mov	r0, r3
    50d4:	bl	427c <get_line>
    50d8:	str	r0, [fp, #-12]
    50dc:	ldr	r3, [fp, #-12]
    50e0:	cmp	r3, #0
    50e4:	bge	50f8 <read_header+0xd2c>
    50e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    50ec:	bl	0 <coda_dynamic_type_delete>
    50f0:	mvn	r3, #0
    50f4:	b	5884 <read_header+0x14b8>
    50f8:	ldr	r3, [fp, #-12]
    50fc:	cmp	r3, #59	; 0x3b
    5100:	bgt	5140 <read_header+0xd74>
    5104:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5108:	bl	0 <coda_dynamic_type_delete>
    510c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5110:	ldr	r2, [r3, #48]	; 0x30
    5114:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5118:	ldr	r3, [r3, #52]	; 0x34
    511c:	str	r3, [sp]
    5120:	mov	r3, r2
    5124:	ldr	r2, [fp, #-12]
    5128:	movw	r1, #0
    512c:	movt	r1, #0
    5130:	mvn	r0, #21
    5134:	bl	0 <coda_set_error>
    5138:	mvn	r3, #0
    513c:	b	5884 <read_header+0x14b8>
    5140:	sub	r3, fp, #1024	; 0x400
    5144:	mov	r2, #9
    5148:	movw	r1, #0
    514c:	movt	r1, #0
    5150:	mov	r0, r3
    5154:	bl	0 <memcmp>
    5158:	mov	r3, r0
    515c:	cmp	r3, #0
    5160:	beq	5194 <read_header+0xdc8>
    5164:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5168:	bl	0 <coda_dynamic_type_delete>
    516c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5170:	ldr	r2, [r3, #48]	; 0x30
    5174:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5178:	ldr	r3, [r3, #52]	; 0x34
    517c:	movw	r1, #0
    5180:	movt	r1, #0
    5184:	mvn	r0, #21
    5188:	bl	0 <coda_set_error>
    518c:	mvn	r3, #0
    5190:	b	5884 <read_header+0x14b8>
    5194:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5198:	ldr	r3, [r3, #40]	; 0x28
    519c:	ldr	r2, [fp, #-8]
    51a0:	cmp	r2, r3
    51a4:	bge	52c0 <read_header+0xef4>
    51a8:	ldr	r1, [fp, #-8]
    51ac:	movw	r3, #30841	; 0x7879
    51b0:	movt	r3, #30840	; 0x7878
    51b4:	smull	r2, r3, r3, r1
    51b8:	asr	r2, r3, #3
    51bc:	asr	r3, r1, #31
    51c0:	sub	r3, r2, r3
    51c4:	mov	r2, r3
    51c8:	lsl	r2, r2, #4
    51cc:	add	r2, r2, r3
    51d0:	sub	r3, r1, r2
    51d4:	mov	r2, r3
    51d8:	lsl	r2, r2, #1
    51dc:	add	r3, r2, r3
    51e0:	add	r3, r3, #9
    51e4:	sub	r2, fp, #1024	; 0x400
    51e8:	add	r0, r2, r3
    51ec:	sub	r2, fp, #1040	; 0x410
    51f0:	sub	r2, r2, #4
    51f4:	mov	r3, #0
    51f8:	mov	r1, #3
    51fc:	bl	0 <coda_ascii_parse_int64>
    5200:	mov	r3, r0
    5204:	cmp	r3, #0
    5208:	bge	5278 <read_header+0xeac>
    520c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5210:	ldr	ip, [r3, #48]	; 0x30
    5214:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5218:	ldr	r3, [r3, #52]	; 0x34
    521c:	add	r0, r3, #9
    5220:	ldr	r1, [fp, #-8]
    5224:	movw	r3, #30841	; 0x7879
    5228:	movt	r3, #30840	; 0x7878
    522c:	smull	r2, r3, r3, r1
    5230:	asr	r2, r3, #3
    5234:	asr	r3, r1, #31
    5238:	sub	r3, r2, r3
    523c:	mov	r2, r3
    5240:	lsl	r2, r2, #4
    5244:	add	r2, r2, r3
    5248:	sub	r3, r1, r2
    524c:	mov	r2, r3
    5250:	lsl	r2, r2, #1
    5254:	add	r3, r2, r3
    5258:	add	r3, r0, r3
    525c:	mov	r2, r3
    5260:	mov	r1, ip
    5264:	movw	r0, #0
    5268:	movt	r0, #0
    526c:	bl	0 <coda_add_error_message>
    5270:	mvn	r3, #0
    5274:	b	5884 <read_header+0x14b8>
    5278:	mrc	15, 0, r3, cr13, cr0, {3}
    527c:	ldr	r2, [pc, #348]	; 53e0 <read_header+0x1014>
    5280:	ldr	r3, [r3, r2]
    5284:	add	r3, r3, #64	; 0x40
    5288:	ldr	r0, [r3]
    528c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5290:	ldr	r1, [r3, #4]
    5294:	sub	r3, fp, #1040	; 0x410
    5298:	sub	r3, r3, #4
    529c:	ldrd	r2, [r3]
    52a0:	sxth	r3, r2
    52a4:	mov	r2, r1
    52a8:	mov	r1, #0
    52ac:	bl	0 <coda_mem_int16_new>
    52b0:	str	r0, [fp, #-16]
    52b4:	ldr	r1, [fp, #-16]
    52b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    52bc:	bl	0 <coda_mem_array_add_element>
    52c0:	ldr	r3, [fp, #-8]
    52c4:	add	r3, r3, #1
    52c8:	str	r3, [fp, #-8]
    52cc:	ldr	r3, [fp, #-8]
    52d0:	cmp	r3, #84	; 0x54
    52d4:	ble	505c <read_header+0xc90>
    52d8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    52dc:	ldr	r0, [r3, #8]
    52e0:	mov	r3, #0
    52e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    52e8:	movw	r1, #0
    52ec:	movt	r1, #0
    52f0:	bl	0 <coda_mem_record_add_field>
    52f4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    52f8:	ldr	r3, [r3]
    52fc:	mov	r0, r3
    5300:	bl	0 <ftell>
    5304:	mov	r2, r0
    5308:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    530c:	str	r2, [r3, #52]	; 0x34
    5310:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5314:	ldr	r3, [r3, #48]	; 0x30
    5318:	add	r2, r3, #1
    531c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5320:	str	r2, [r3, #48]	; 0x30
    5324:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5328:	ldr	r3, [r3]
    532c:	sub	r2, fp, #1024	; 0x400
    5330:	mov	r1, r2
    5334:	mov	r0, r3
    5338:	bl	427c <get_line>
    533c:	str	r0, [fp, #-12]
    5340:	ldr	r3, [fp, #-12]
    5344:	cmp	r3, #0
    5348:	bge	5354 <read_header+0xf88>
    534c:	mvn	r3, #0
    5350:	b	5884 <read_header+0x14b8>
    5354:	ldr	r3, [fp, #-12]
    5358:	cmp	r3, #59	; 0x3b
    535c:	bgt	5394 <read_header+0xfc8>
    5360:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5364:	ldr	r2, [r3, #48]	; 0x30
    5368:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    536c:	ldr	r3, [r3, #52]	; 0x34
    5370:	str	r3, [sp]
    5374:	mov	r3, r2
    5378:	ldr	r2, [fp, #-12]
    537c:	movw	r1, #0
    5380:	movt	r1, #0
    5384:	mvn	r0, #21
    5388:	bl	0 <coda_set_error>
    538c:	mvn	r3, #0
    5390:	b	5884 <read_header+0x14b8>
    5394:	sub	r3, fp, #1024	; 0x400
    5398:	mov	r2, #3
    539c:	movw	r1, #0
    53a0:	movt	r1, #0
    53a4:	mov	r0, r3
    53a8:	bl	0 <memcmp>
    53ac:	mov	r3, r0
    53b0:	cmp	r3, #0
    53b4:	beq	53e4 <read_header+0x1018>
    53b8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    53bc:	ldr	r2, [r3, #48]	; 0x30
    53c0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    53c4:	ldr	r3, [r3, #52]	; 0x34
    53c8:	movw	r1, #0
    53cc:	movt	r1, #0
    53d0:	mvn	r0, #21
    53d4:	bl	0 <coda_set_error>
    53d8:	mvn	r3, #0
    53dc:	b	5884 <read_header+0x14b8>
    53e0:	.word	0x00000000
    53e4:	sub	r3, fp, #4
    53e8:	sub	r3, r3, #1020	; 0x3fc
    53ec:	ldrh	r3, [r3, #3]
    53f0:	uxth	r2, r3
    53f4:	sub	r3, fp, #4
    53f8:	sub	r3, r3, #1104	; 0x450
    53fc:	strh	r2, [r3]
    5400:	mov	r3, #0
    5404:	strb	r3, [fp, #-1106]	; 0xfffffbae
    5408:	mrc	15, 0, r3, cr13, cr0, {3}
    540c:	ldr	r2, [pc, #-52]	; 53e0 <read_header+0x1014>
    5410:	ldr	r3, [r3, r2]
    5414:	add	r3, r3, #72	; 0x48
    5418:	ldr	r0, [r3]
    541c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5420:	ldr	r2, [r3, #4]
    5424:	sub	r3, fp, #1104	; 0x450
    5428:	sub	r3, r3, #4
    542c:	mov	r1, #0
    5430:	bl	0 <coda_mem_string_new>
    5434:	str	r0, [fp, #-16]
    5438:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    543c:	ldr	r0, [r3, #8]
    5440:	mov	r3, #0
    5444:	ldr	r2, [fp, #-16]
    5448:	movw	r1, #0
    544c:	movt	r1, #0
    5450:	bl	0 <coda_mem_record_add_field>
    5454:	sub	r3, fp, #1024	; 0x400
    5458:	add	r1, r3, #9
    545c:	sub	r3, fp, #1104	; 0x450
    5460:	sub	r3, r3, #4
    5464:	mov	r2, #3
    5468:	mov	r0, r3
    546c:	bl	0 <memcpy>
    5470:	mov	r3, #0
    5474:	strb	r3, [fp, #-1105]	; 0xfffffbaf
    5478:	mrc	15, 0, r3, cr13, cr0, {3}
    547c:	ldr	r2, [pc, #-164]	; 53e0 <read_header+0x1014>
    5480:	ldr	r3, [r3, r2]
    5484:	add	r3, r3, #76	; 0x4c
    5488:	ldr	r0, [r3]
    548c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5490:	ldr	r2, [r3, #4]
    5494:	sub	r3, fp, #1104	; 0x450
    5498:	sub	r3, r3, #4
    549c:	mov	r1, #0
    54a0:	bl	0 <coda_mem_string_new>
    54a4:	str	r0, [fp, #-16]
    54a8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54ac:	ldr	r0, [r3, #8]
    54b0:	mov	r3, #0
    54b4:	ldr	r2, [fp, #-16]
    54b8:	movw	r1, #0
    54bc:	movt	r1, #0
    54c0:	bl	0 <coda_mem_record_add_field>
    54c4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54c8:	ldr	r3, [r3]
    54cc:	mov	r0, r3
    54d0:	bl	0 <ftell>
    54d4:	mov	r2, r0
    54d8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54dc:	str	r2, [r3, #52]	; 0x34
    54e0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54e4:	ldr	r3, [r3, #48]	; 0x30
    54e8:	add	r2, r3, #1
    54ec:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54f0:	str	r2, [r3, #48]	; 0x30
    54f4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    54f8:	ldr	r3, [r3]
    54fc:	sub	r2, fp, #1024	; 0x400
    5500:	mov	r1, r2
    5504:	mov	r0, r3
    5508:	bl	427c <get_line>
    550c:	str	r0, [fp, #-12]
    5510:	ldr	r3, [fp, #-12]
    5514:	cmp	r3, #0
    5518:	bge	5524 <read_header+0x1158>
    551c:	mvn	r3, #0
    5520:	b	5884 <read_header+0x14b8>
    5524:	ldr	r3, [fp, #-12]
    5528:	cmp	r3, #59	; 0x3b
    552c:	bgt	5564 <read_header+0x1198>
    5530:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5534:	ldr	r2, [r3, #48]	; 0x30
    5538:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    553c:	ldr	r3, [r3, #52]	; 0x34
    5540:	str	r3, [sp]
    5544:	mov	r3, r2
    5548:	ldr	r2, [fp, #-12]
    554c:	movw	r1, #0
    5550:	movt	r1, #0
    5554:	mvn	r0, #21
    5558:	bl	0 <coda_set_error>
    555c:	mvn	r3, #0
    5560:	b	5884 <read_header+0x14b8>
    5564:	sub	r3, fp, #1024	; 0x400
    5568:	mov	r2, #3
    556c:	movw	r1, #0
    5570:	movt	r1, #0
    5574:	mov	r0, r3
    5578:	bl	0 <memcmp>
    557c:	mov	r3, r0
    5580:	cmp	r3, #0
    5584:	beq	55b0 <read_header+0x11e4>
    5588:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    558c:	ldr	r2, [r3, #48]	; 0x30
    5590:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5594:	ldr	r3, [r3, #52]	; 0x34
    5598:	movw	r1, #0
    559c:	movt	r1, #0
    55a0:	mvn	r0, #21
    55a4:	bl	0 <coda_set_error>
    55a8:	mvn	r3, #0
    55ac:	b	5884 <read_header+0x14b8>
    55b0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    55b4:	ldr	r3, [r3]
    55b8:	mov	r0, r3
    55bc:	bl	0 <ftell>
    55c0:	mov	r2, r0
    55c4:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    55c8:	str	r2, [r3, #52]	; 0x34
    55cc:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    55d0:	ldr	r3, [r3, #48]	; 0x30
    55d4:	add	r2, r3, #1
    55d8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    55dc:	str	r2, [r3, #48]	; 0x30
    55e0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    55e4:	ldr	r3, [r3]
    55e8:	sub	r2, fp, #1024	; 0x400
    55ec:	mov	r1, r2
    55f0:	mov	r0, r3
    55f4:	bl	427c <get_line>
    55f8:	str	r0, [fp, #-12]
    55fc:	ldr	r3, [fp, #-12]
    5600:	cmp	r3, #0
    5604:	bge	5610 <read_header+0x1244>
    5608:	mvn	r3, #0
    560c:	b	5884 <read_header+0x14b8>
    5610:	ldr	r3, [fp, #-12]
    5614:	cmp	r3, #59	; 0x3b
    5618:	bgt	5650 <read_header+0x1284>
    561c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5620:	ldr	r2, [r3, #48]	; 0x30
    5624:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5628:	ldr	r3, [r3, #52]	; 0x34
    562c:	str	r3, [sp]
    5630:	mov	r3, r2
    5634:	ldr	r2, [fp, #-12]
    5638:	movw	r1, #0
    563c:	movt	r1, #0
    5640:	mvn	r0, #21
    5644:	bl	0 <coda_set_error>
    5648:	mvn	r3, #0
    564c:	b	5884 <read_header+0x14b8>
    5650:	sub	r3, fp, #1024	; 0x400
    5654:	mov	r2, #3
    5658:	movw	r1, #0
    565c:	movt	r1, #0
    5660:	mov	r0, r3
    5664:	bl	0 <memcmp>
    5668:	mov	r3, r0
    566c:	cmp	r3, #0
    5670:	beq	569c <read_header+0x12d0>
    5674:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5678:	ldr	r2, [r3, #48]	; 0x30
    567c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5680:	ldr	r3, [r3, #52]	; 0x34
    5684:	movw	r1, #0
    5688:	movt	r1, #0
    568c:	mvn	r0, #21
    5690:	bl	0 <coda_set_error>
    5694:	mvn	r3, #0
    5698:	b	5884 <read_header+0x14b8>
    569c:	sub	r2, fp, #1024	; 0x400
    56a0:	sub	r2, r2, #4
    56a4:	sub	r2, r2, #8
    56a8:	sub	r3, fp, #1024	; 0x400
    56ac:	add	r0, r3, #3
    56b0:	mov	r3, #0
    56b4:	mov	r1, #10
    56b8:	bl	0 <coda_ascii_parse_double>
    56bc:	mov	r3, r0
    56c0:	cmp	r3, #0
    56c4:	bge	56f4 <read_header+0x1328>
    56c8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    56cc:	ldr	r1, [r3, #48]	; 0x30
    56d0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    56d4:	ldr	r3, [r3, #52]	; 0x34
    56d8:	add	r3, r3, #3
    56dc:	mov	r2, r3
    56e0:	movw	r0, #0
    56e4:	movt	r0, #0
    56e8:	bl	0 <coda_add_error_message>
    56ec:	mvn	r3, #0
    56f0:	b	5884 <read_header+0x14b8>
    56f4:	mrc	15, 0, r3, cr13, cr0, {3}
    56f8:	ldr	r2, [pc, #-800]	; 53e0 <read_header+0x1014>
    56fc:	ldr	r3, [r3, r2]
    5700:	add	r3, r3, #80	; 0x50
    5704:	ldr	r0, [r3]
    5708:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    570c:	ldr	r3, [r3, #4]
    5710:	sub	r2, fp, #1024	; 0x400
    5714:	sub	r2, r2, #4
    5718:	vldr	d7, [r2, #-8]
    571c:	vmov.f64	d0, d7
    5720:	mov	r2, r3
    5724:	mov	r1, #0
    5728:	bl	0 <coda_mem_double_new>
    572c:	str	r0, [fp, #-16]
    5730:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5734:	ldr	r0, [r3, #8]
    5738:	mov	r3, #0
    573c:	ldr	r2, [fp, #-16]
    5740:	movw	r1, #0
    5744:	movt	r1, #0
    5748:	bl	0 <coda_mem_record_add_field>
    574c:	sub	r2, fp, #1024	; 0x400
    5750:	sub	r2, r2, #4
    5754:	sub	r2, r2, #8
    5758:	sub	r3, fp, #1024	; 0x400
    575c:	add	r0, r3, #14
    5760:	mov	r3, #0
    5764:	mov	r1, #12
    5768:	bl	0 <coda_ascii_parse_double>
    576c:	mov	r3, r0
    5770:	cmp	r3, #0
    5774:	bge	57a4 <read_header+0x13d8>
    5778:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    577c:	ldr	r1, [r3, #48]	; 0x30
    5780:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5784:	ldr	r3, [r3, #52]	; 0x34
    5788:	add	r3, r3, #14
    578c:	mov	r2, r3
    5790:	movw	r0, #0
    5794:	movt	r0, #0
    5798:	bl	0 <coda_add_error_message>
    579c:	mvn	r3, #0
    57a0:	b	5884 <read_header+0x14b8>
    57a4:	mrc	15, 0, r3, cr13, cr0, {3}
    57a8:	ldr	r2, [pc, #-976]	; 53e0 <read_header+0x1014>
    57ac:	ldr	r3, [r3, r2]
    57b0:	add	r3, r3, #84	; 0x54
    57b4:	ldr	r0, [r3]
    57b8:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    57bc:	ldr	r3, [r3, #4]
    57c0:	sub	r2, fp, #1024	; 0x400
    57c4:	sub	r2, r2, #4
    57c8:	vldr	d7, [r2, #-8]
    57cc:	vmov.f64	d0, d7
    57d0:	mov	r2, r3
    57d4:	mov	r1, #0
    57d8:	bl	0 <coda_mem_double_new>
    57dc:	str	r0, [fp, #-16]
    57e0:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    57e4:	ldr	r0, [r3, #8]
    57e8:	mov	r3, #0
    57ec:	ldr	r2, [fp, #-16]
    57f0:	movw	r1, #0
    57f4:	movt	r1, #0
    57f8:	bl	0 <coda_mem_record_add_field>
    57fc:	mov	r3, #0
    5800:	str	r3, [fp, #-8]
    5804:	b	5874 <read_header+0x14a8>
    5808:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    580c:	ldr	r3, [r3]
    5810:	mov	r0, r3
    5814:	bl	0 <ftell>
    5818:	mov	r2, r0
    581c:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5820:	str	r2, [r3, #52]	; 0x34
    5824:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5828:	ldr	r3, [r3, #48]	; 0x30
    582c:	add	r2, r3, #1
    5830:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    5834:	str	r2, [r3, #48]	; 0x30
    5838:	ldr	r3, [fp, #-1112]	; 0xfffffba8
    583c:	ldr	r3, [r3]
    5840:	sub	r2, fp, #1024	; 0x400
    5844:	mov	r1, r2
    5848:	mov	r0, r3
    584c:	bl	427c <get_line>
    5850:	str	r0, [fp, #-12]
    5854:	ldr	r3, [fp, #-12]
    5858:	cmp	r3, #0
    585c:	bge	5868 <read_header+0x149c>
    5860:	mvn	r3, #0
    5864:	b	5884 <read_header+0x14b8>
    5868:	ldr	r3, [fp, #-8]
    586c:	add	r3, r3, #1
    5870:	str	r3, [fp, #-8]
    5874:	ldr	r3, [fp, #-8]
    5878:	cmp	r3, #6
    587c:	ble	5808 <read_header+0x143c>
    5880:	mov	r3, #0
    5884:	mov	r0, r3
    5888:	sub	sp, fp, #4
    588c:	ldr	fp, [sp]
    5890:	add	sp, sp, #4
    5894:	pop	{pc}		; (ldr pc, [sp], #4)

00005898 <read_records>:
    5898:	str	fp, [sp, #-8]!
    589c:	str	lr, [sp, #4]
    58a0:	add	fp, sp, #4
    58a4:	sub	sp, sp, #1104	; 0x450
    58a8:	sub	sp, sp, #8
    58ac:	str	r0, [fp, #-1104]	; 0xfffffbb0
    58b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    58b4:	ldr	r3, [r3]
    58b8:	mov	r0, r3
    58bc:	bl	0 <ftell>
    58c0:	mov	r2, r0
    58c4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    58c8:	str	r2, [r3, #52]	; 0x34
    58cc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    58d0:	ldr	r3, [r3, #48]	; 0x30
    58d4:	add	r2, r3, #1
    58d8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    58dc:	str	r2, [r3, #48]	; 0x30
    58e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    58e4:	ldr	r3, [r3]
    58e8:	sub	r2, fp, #1016	; 0x3f8
    58ec:	mov	r1, r2
    58f0:	mov	r0, r3
    58f4:	bl	427c <get_line>
    58f8:	str	r0, [fp, #-8]
    58fc:	ldr	r3, [fp, #-8]
    5900:	cmp	r3, #0
    5904:	bge	838c <read_records+0x2af4>
    5908:	mvn	r3, #0
    590c:	b	8444 <read_records+0x2bac>
    5910:	ldrb	r3, [fp, #-1016]	; 0xfffffc08
    5914:	cmp	r3, #42	; 0x2a
    5918:	bne	5b34 <read_records+0x29c>
    591c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5920:	ldr	r3, [r3, #16]
    5924:	cmp	r3, #0
    5928:	beq	59bc <read_records+0x124>
    592c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5930:	ldr	r0, [r3, #16]
    5934:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5938:	ldr	r2, [r3, #20]
    593c:	mov	r3, #0
    5940:	movw	r1, #0
    5944:	movt	r1, #0
    5948:	bl	0 <coda_mem_record_add_field>
    594c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5950:	mov	r2, #0
    5954:	str	r2, [r3, #20]
    5958:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    595c:	ldr	r3, [r3, #28]
    5960:	cmp	r3, #0
    5964:	beq	5994 <read_records+0xfc>
    5968:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    596c:	ldr	r0, [r3, #16]
    5970:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5974:	ldr	r2, [r3, #28]
    5978:	mov	r3, #0
    597c:	movw	r1, #0
    5980:	movt	r1, #0
    5984:	bl	0 <coda_mem_record_add_field>
    5988:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    598c:	mov	r2, #0
    5990:	str	r2, [r3, #28]
    5994:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5998:	ldr	r2, [r3, #12]
    599c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    59a0:	ldr	r3, [r3, #16]
    59a4:	mov	r1, r3
    59a8:	mov	r0, r2
    59ac:	bl	0 <coda_mem_array_add_element>
    59b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    59b4:	mov	r2, #0
    59b8:	str	r2, [r3, #16]
    59bc:	mrc	15, 0, r3, cr13, cr0, {3}
    59c0:	ldr	r2, [pc, #4024]	; 6980 <read_records+0x10e8>
    59c4:	ldr	r3, [r3, r2]
    59c8:	add	r3, r3, #272	; 0x110
    59cc:	ldr	r3, [r3]
    59d0:	mov	r1, #0
    59d4:	mov	r0, r3
    59d8:	bl	0 <coda_mem_array_new>
    59dc:	mov	r2, r0
    59e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    59e4:	str	r2, [r3, #20]
    59e8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    59ec:	ldrb	r3, [r3, #44]	; 0x2c
    59f0:	cmp	r3, #86	; 0x56
    59f4:	bne	5a24 <read_records+0x18c>
    59f8:	mrc	15, 0, r3, cr13, cr0, {3}
    59fc:	ldr	r2, [pc, #3964]	; 6980 <read_records+0x10e8>
    5a00:	ldr	r3, [r3, r2]
    5a04:	add	r3, r3, #280	; 0x118
    5a08:	ldr	r3, [r3]
    5a0c:	mov	r1, #0
    5a10:	mov	r0, r3
    5a14:	bl	0 <coda_mem_array_new>
    5a18:	mov	r2, r0
    5a1c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5a20:	str	r2, [r3, #28]
    5a24:	mrc	15, 0, r3, cr13, cr0, {3}
    5a28:	ldr	r2, [pc, #3920]	; 6980 <read_records+0x10e8>
    5a2c:	ldr	r3, [r3, r2]
    5a30:	add	r3, r3, #292	; 0x124
    5a34:	ldr	r3, [r3]
    5a38:	mov	r1, #0
    5a3c:	mov	r0, r3
    5a40:	bl	0 <coda_mem_record_new>
    5a44:	mov	r2, r0
    5a48:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5a4c:	str	r2, [r3, #16]
    5a50:	ldr	r3, [fp, #-8]
    5a54:	cmp	r3, #30
    5a58:	bgt	5a90 <read_records+0x1f8>
    5a5c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5a60:	ldr	r2, [r3, #48]	; 0x30
    5a64:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5a68:	ldr	r3, [r3, #52]	; 0x34
    5a6c:	str	r3, [sp]
    5a70:	mov	r3, r2
    5a74:	ldr	r2, [fp, #-8]
    5a78:	movw	r1, #0
    5a7c:	movt	r1, #0
    5a80:	mvn	r0, #21
    5a84:	bl	0 <coda_set_error>
    5a88:	mvn	r3, #0
    5a8c:	b	8444 <read_records+0x2bac>
    5a90:	sub	r3, fp, #1016	; 0x3f8
    5a94:	add	r1, r3, #3
    5a98:	sub	r3, fp, #1088	; 0x440
    5a9c:	sub	r3, r3, #4
    5aa0:	sub	r3, r3, #8
    5aa4:	mov	r2, #28
    5aa8:	mov	r0, r3
    5aac:	bl	0 <memcpy>
    5ab0:	mov	r3, #0
    5ab4:	strb	r3, [fp, #-1072]	; 0xfffffbd0
    5ab8:	mrc	15, 0, r3, cr13, cr0, {3}
    5abc:	ldr	r2, [pc, #3772]	; 6980 <read_records+0x10e8>
    5ac0:	ldr	r3, [r3, r2]
    5ac4:	add	r3, r3, #260	; 0x104
    5ac8:	ldr	r0, [r3]
    5acc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5ad0:	ldr	r2, [r3, #4]
    5ad4:	sub	r3, fp, #1088	; 0x440
    5ad8:	sub	r3, r3, #4
    5adc:	sub	r3, r3, #8
    5ae0:	mov	r1, #0
    5ae4:	bl	0 <coda_mem_string_new>
    5ae8:	str	r0, [fp, #-12]
    5aec:	mrc	15, 0, r3, cr13, cr0, {3}
    5af0:	ldr	r2, [pc, #3720]	; 6980 <read_records+0x10e8>
    5af4:	ldr	r3, [r3, r2]
    5af8:	add	r3, r3, #264	; 0x108
    5afc:	ldr	r3, [r3]
    5b00:	ldr	r2, [fp, #-12]
    5b04:	mov	r1, #0
    5b08:	mov	r0, r3
    5b0c:	bl	0 <coda_mem_time_new>
    5b10:	str	r0, [fp, #-16]
    5b14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5b18:	ldr	r0, [r3, #16]
    5b1c:	mov	r3, #0
    5b20:	ldr	r2, [fp, #-16]
    5b24:	movw	r1, #0
    5b28:	movt	r1, #0
    5b2c:	bl	0 <coda_mem_record_add_field>
    5b30:	b	6d08 <read_records+0x1470>
    5b34:	ldrb	r3, [fp, #-1016]	; 0xfffffc08
    5b38:	cmp	r3, #80	; 0x50
    5b3c:	bne	64c8 <read_records+0xc30>
    5b40:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5b44:	ldr	r3, [r3, #20]
    5b48:	cmp	r3, #0
    5b4c:	bne	5b78 <read_records+0x2e0>
    5b50:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5b54:	ldr	r2, [r3, #48]	; 0x30
    5b58:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5b5c:	ldr	r3, [r3, #52]	; 0x34
    5b60:	movw	r1, #0
    5b64:	movt	r1, #0
    5b68:	mvn	r0, #21
    5b6c:	bl	0 <coda_set_error>
    5b70:	mvn	r3, #0
    5b74:	b	8444 <read_records+0x2bac>
    5b78:	mrc	15, 0, r3, cr13, cr0, {3}
    5b7c:	ldr	r2, [pc, #3580]	; 6980 <read_records+0x10e8>
    5b80:	ldr	r3, [r3, r2]
    5b84:	add	r3, r3, #268	; 0x10c
    5b88:	ldr	r3, [r3]
    5b8c:	mov	r1, #0
    5b90:	mov	r0, r3
    5b94:	bl	0 <coda_mem_record_new>
    5b98:	mov	r2, r0
    5b9c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5ba0:	str	r2, [r3, #24]
    5ba4:	ldr	r3, [fp, #-8]
    5ba8:	cmp	r3, #59	; 0x3b
    5bac:	bgt	5be4 <read_records+0x34c>
    5bb0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5bb4:	ldr	r2, [r3, #48]	; 0x30
    5bb8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5bbc:	ldr	r3, [r3, #52]	; 0x34
    5bc0:	str	r3, [sp]
    5bc4:	mov	r3, r2
    5bc8:	ldr	r2, [fp, #-8]
    5bcc:	movw	r1, #0
    5bd0:	movt	r1, #0
    5bd4:	mvn	r0, #21
    5bd8:	bl	0 <coda_set_error>
    5bdc:	mvn	r3, #0
    5be0:	b	8444 <read_records+0x2bac>
    5be4:	sub	r3, fp, #1016	; 0x3f8
    5be8:	add	r1, r3, #1
    5bec:	sub	r3, fp, #1088	; 0x440
    5bf0:	sub	r3, r3, #4
    5bf4:	sub	r3, r3, #8
    5bf8:	mov	r2, #3
    5bfc:	mov	r0, r3
    5c00:	bl	0 <memcpy>
    5c04:	mov	r3, #0
    5c08:	strb	r3, [fp, #-1097]	; 0xfffffbb7
    5c0c:	mrc	15, 0, r3, cr13, cr0, {3}
    5c10:	ldr	r2, [pc, #3432]	; 6980 <read_records+0x10e8>
    5c14:	ldr	r3, [r3, r2]
    5c18:	add	r3, r3, #88	; 0x58
    5c1c:	ldr	r0, [r3]
    5c20:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5c24:	ldr	r2, [r3, #4]
    5c28:	sub	r3, fp, #1088	; 0x440
    5c2c:	sub	r3, r3, #4
    5c30:	sub	r3, r3, #8
    5c34:	mov	r1, #0
    5c38:	bl	0 <coda_mem_string_new>
    5c3c:	str	r0, [fp, #-16]
    5c40:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5c44:	ldr	r0, [r3, #24]
    5c48:	mov	r3, #0
    5c4c:	ldr	r2, [fp, #-16]
    5c50:	movw	r1, #0
    5c54:	movt	r1, #0
    5c58:	bl	0 <coda_mem_record_add_field>
    5c5c:	sub	r2, fp, #1024	; 0x400
    5c60:	sub	r2, r2, #4
    5c64:	sub	r3, fp, #1016	; 0x3f8
    5c68:	add	r0, r3, #4
    5c6c:	mov	r3, #0
    5c70:	mov	r1, #14
    5c74:	bl	0 <coda_ascii_parse_double>
    5c78:	mov	r3, r0
    5c7c:	cmp	r3, #0
    5c80:	bge	5cb0 <read_records+0x418>
    5c84:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5c88:	ldr	r1, [r3, #48]	; 0x30
    5c8c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5c90:	ldr	r3, [r3, #52]	; 0x34
    5c94:	add	r3, r3, #4
    5c98:	mov	r2, r3
    5c9c:	movw	r0, #0
    5ca0:	movt	r0, #0
    5ca4:	bl	0 <coda_add_error_message>
    5ca8:	mvn	r3, #0
    5cac:	b	8444 <read_records+0x2bac>
    5cb0:	mrc	15, 0, r3, cr13, cr0, {3}
    5cb4:	ldr	r2, [pc, #3268]	; 6980 <read_records+0x10e8>
    5cb8:	ldr	r3, [r3, r2]
    5cbc:	add	r3, r3, #92	; 0x5c
    5cc0:	ldr	r0, [r3]
    5cc4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5cc8:	ldr	r3, [r3, #4]
    5ccc:	sub	r2, fp, #1024	; 0x400
    5cd0:	sub	r2, r2, #4
    5cd4:	vldr	d7, [r2]
    5cd8:	vmov.f64	d0, d7
    5cdc:	mov	r2, r3
    5ce0:	mov	r1, #0
    5ce4:	bl	0 <coda_mem_double_new>
    5ce8:	str	r0, [fp, #-16]
    5cec:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5cf0:	ldr	r0, [r3, #24]
    5cf4:	mov	r3, #0
    5cf8:	ldr	r2, [fp, #-16]
    5cfc:	movw	r1, #0
    5d00:	movt	r1, #0
    5d04:	bl	0 <coda_mem_record_add_field>
    5d08:	sub	r2, fp, #1024	; 0x400
    5d0c:	sub	r2, r2, #4
    5d10:	sub	r3, fp, #1016	; 0x3f8
    5d14:	add	r0, r3, #18
    5d18:	mov	r3, #0
    5d1c:	mov	r1, #14
    5d20:	bl	0 <coda_ascii_parse_double>
    5d24:	mov	r3, r0
    5d28:	cmp	r3, #0
    5d2c:	bge	5d5c <read_records+0x4c4>
    5d30:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5d34:	ldr	r1, [r3, #48]	; 0x30
    5d38:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5d3c:	ldr	r3, [r3, #52]	; 0x34
    5d40:	add	r3, r3, #18
    5d44:	mov	r2, r3
    5d48:	movw	r0, #0
    5d4c:	movt	r0, #0
    5d50:	bl	0 <coda_add_error_message>
    5d54:	mvn	r3, #0
    5d58:	b	8444 <read_records+0x2bac>
    5d5c:	mrc	15, 0, r3, cr13, cr0, {3}
    5d60:	ldr	r2, [pc, #3096]	; 6980 <read_records+0x10e8>
    5d64:	ldr	r3, [r3, r2]
    5d68:	add	r3, r3, #96	; 0x60
    5d6c:	ldr	r0, [r3]
    5d70:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5d74:	ldr	r3, [r3, #4]
    5d78:	sub	r2, fp, #1024	; 0x400
    5d7c:	sub	r2, r2, #4
    5d80:	vldr	d7, [r2]
    5d84:	vmov.f64	d0, d7
    5d88:	mov	r2, r3
    5d8c:	mov	r1, #0
    5d90:	bl	0 <coda_mem_double_new>
    5d94:	str	r0, [fp, #-16]
    5d98:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5d9c:	ldr	r0, [r3, #24]
    5da0:	mov	r3, #0
    5da4:	ldr	r2, [fp, #-16]
    5da8:	movw	r1, #0
    5dac:	movt	r1, #0
    5db0:	bl	0 <coda_mem_record_add_field>
    5db4:	sub	r2, fp, #1024	; 0x400
    5db8:	sub	r2, r2, #4
    5dbc:	sub	r3, fp, #1016	; 0x3f8
    5dc0:	add	r0, r3, #32
    5dc4:	mov	r3, #0
    5dc8:	mov	r1, #14
    5dcc:	bl	0 <coda_ascii_parse_double>
    5dd0:	mov	r3, r0
    5dd4:	cmp	r3, #0
    5dd8:	bge	5e08 <read_records+0x570>
    5ddc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5de0:	ldr	r1, [r3, #48]	; 0x30
    5de4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5de8:	ldr	r3, [r3, #52]	; 0x34
    5dec:	add	r3, r3, #32
    5df0:	mov	r2, r3
    5df4:	movw	r0, #0
    5df8:	movt	r0, #0
    5dfc:	bl	0 <coda_add_error_message>
    5e00:	mvn	r3, #0
    5e04:	b	8444 <read_records+0x2bac>
    5e08:	mrc	15, 0, r3, cr13, cr0, {3}
    5e0c:	ldr	r2, [pc, #2924]	; 6980 <read_records+0x10e8>
    5e10:	ldr	r3, [r3, r2]
    5e14:	add	r3, r3, #100	; 0x64
    5e18:	ldr	r0, [r3]
    5e1c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5e20:	ldr	r3, [r3, #4]
    5e24:	sub	r2, fp, #1024	; 0x400
    5e28:	sub	r2, r2, #4
    5e2c:	vldr	d7, [r2]
    5e30:	vmov.f64	d0, d7
    5e34:	mov	r2, r3
    5e38:	mov	r1, #0
    5e3c:	bl	0 <coda_mem_double_new>
    5e40:	str	r0, [fp, #-16]
    5e44:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5e48:	ldr	r0, [r3, #24]
    5e4c:	mov	r3, #0
    5e50:	ldr	r2, [fp, #-16]
    5e54:	movw	r1, #0
    5e58:	movt	r1, #0
    5e5c:	bl	0 <coda_mem_record_add_field>
    5e60:	sub	r2, fp, #1024	; 0x400
    5e64:	sub	r2, r2, #4
    5e68:	sub	r3, fp, #1016	; 0x3f8
    5e6c:	add	r0, r3, #46	; 0x2e
    5e70:	mov	r3, #0
    5e74:	mov	r1, #14
    5e78:	bl	0 <coda_ascii_parse_double>
    5e7c:	mov	r3, r0
    5e80:	cmp	r3, #0
    5e84:	bge	5eb4 <read_records+0x61c>
    5e88:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5e8c:	ldr	r1, [r3, #48]	; 0x30
    5e90:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5e94:	ldr	r3, [r3, #52]	; 0x34
    5e98:	add	r3, r3, #46	; 0x2e
    5e9c:	mov	r2, r3
    5ea0:	movw	r0, #0
    5ea4:	movt	r0, #0
    5ea8:	bl	0 <coda_add_error_message>
    5eac:	mvn	r3, #0
    5eb0:	b	8444 <read_records+0x2bac>
    5eb4:	mrc	15, 0, r3, cr13, cr0, {3}
    5eb8:	ldr	r2, [pc, #2752]	; 6980 <read_records+0x10e8>
    5ebc:	ldr	r3, [r3, r2]
    5ec0:	add	r3, r3, #104	; 0x68
    5ec4:	ldr	r0, [r3]
    5ec8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5ecc:	ldr	r3, [r3, #4]
    5ed0:	sub	r2, fp, #1024	; 0x400
    5ed4:	sub	r2, r2, #4
    5ed8:	vldr	d7, [r2]
    5edc:	vmov.f64	d0, d7
    5ee0:	mov	r2, r3
    5ee4:	mov	r1, #0
    5ee8:	bl	0 <coda_mem_double_new>
    5eec:	str	r0, [fp, #-16]
    5ef0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5ef4:	ldr	r0, [r3, #24]
    5ef8:	mov	r3, #0
    5efc:	ldr	r2, [fp, #-16]
    5f00:	movw	r1, #0
    5f04:	movt	r1, #0
    5f08:	bl	0 <coda_mem_record_add_field>
    5f0c:	ldr	r3, [fp, #-8]
    5f10:	cmp	r3, #63	; 0x3f
    5f14:	ble	5f40 <read_records+0x6a8>
    5f18:	sub	r3, fp, #1016	; 0x3f8
    5f1c:	add	r3, r3, #61	; 0x3d
    5f20:	mov	r2, #2
    5f24:	movw	r1, #0
    5f28:	movt	r1, #0
    5f2c:	mov	r0, r3
    5f30:	bl	0 <memcmp>
    5f34:	mov	r3, r0
    5f38:	cmp	r3, #0
    5f3c:	bne	5f5c <read_records+0x6c4>
    5f40:	sub	r3, fp, #1024	; 0x400
    5f44:	sub	r3, r3, #4
    5f48:	mov	r1, r3
    5f4c:	mov	r2, #0
    5f50:	mov	r3, #0
    5f54:	strd	r2, [r1, #-8]
    5f58:	b	5fb4 <read_records+0x71c>
    5f5c:	sub	r2, fp, #1024	; 0x400
    5f60:	sub	r2, r2, #4
    5f64:	sub	r2, r2, #8
    5f68:	sub	r3, fp, #1016	; 0x3f8
    5f6c:	add	r0, r3, #61	; 0x3d
    5f70:	mov	r3, #0
    5f74:	mov	r1, #2
    5f78:	bl	0 <coda_ascii_parse_int64>
    5f7c:	mov	r3, r0
    5f80:	cmp	r3, #0
    5f84:	bge	5fb4 <read_records+0x71c>
    5f88:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5f8c:	ldr	r1, [r3, #48]	; 0x30
    5f90:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5f94:	ldr	r3, [r3, #52]	; 0x34
    5f98:	add	r3, r3, #61	; 0x3d
    5f9c:	mov	r2, r3
    5fa0:	movw	r0, #0
    5fa4:	movt	r0, #0
    5fa8:	bl	0 <coda_add_error_message>
    5fac:	mvn	r3, #0
    5fb0:	b	8444 <read_records+0x2bac>
    5fb4:	mrc	15, 0, r3, cr13, cr0, {3}
    5fb8:	ldr	r2, [pc, #2496]	; 6980 <read_records+0x10e8>
    5fbc:	ldr	r3, [r3, r2]
    5fc0:	add	r3, r3, #108	; 0x6c
    5fc4:	ldr	r0, [r3]
    5fc8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5fcc:	ldr	r1, [r3, #4]
    5fd0:	sub	r3, fp, #1024	; 0x400
    5fd4:	sub	r3, r3, #4
    5fd8:	ldrd	r2, [r3, #-8]
    5fdc:	sxtb	r3, r2
    5fe0:	mov	r2, r1
    5fe4:	mov	r1, #0
    5fe8:	bl	0 <coda_mem_int8_new>
    5fec:	str	r0, [fp, #-16]
    5ff0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    5ff4:	ldr	r0, [r3, #24]
    5ff8:	mov	r3, #0
    5ffc:	ldr	r2, [fp, #-16]
    6000:	movw	r1, #0
    6004:	movt	r1, #0
    6008:	bl	0 <coda_mem_record_add_field>
    600c:	ldr	r3, [fp, #-8]
    6010:	cmp	r3, #65	; 0x41
    6014:	ble	6040 <read_records+0x7a8>
    6018:	sub	r3, fp, #1016	; 0x3f8
    601c:	add	r3, r3, #64	; 0x40
    6020:	mov	r2, #2
    6024:	movw	r1, #0
    6028:	movt	r1, #0
    602c:	mov	r0, r3
    6030:	bl	0 <memcmp>
    6034:	mov	r3, r0
    6038:	cmp	r3, #0
    603c:	bne	605c <read_records+0x7c4>
    6040:	sub	r3, fp, #1024	; 0x400
    6044:	sub	r3, r3, #4
    6048:	mov	r1, r3
    604c:	mov	r2, #0
    6050:	mov	r3, #0
    6054:	strd	r2, [r1, #-8]
    6058:	b	60b4 <read_records+0x81c>
    605c:	sub	r2, fp, #1024	; 0x400
    6060:	sub	r2, r2, #4
    6064:	sub	r2, r2, #8
    6068:	sub	r3, fp, #1016	; 0x3f8
    606c:	add	r0, r3, #64	; 0x40
    6070:	mov	r3, #0
    6074:	mov	r1, #2
    6078:	bl	0 <coda_ascii_parse_int64>
    607c:	mov	r3, r0
    6080:	cmp	r3, #0
    6084:	bge	60b4 <read_records+0x81c>
    6088:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    608c:	ldr	r1, [r3, #48]	; 0x30
    6090:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6094:	ldr	r3, [r3, #52]	; 0x34
    6098:	add	r3, r3, #64	; 0x40
    609c:	mov	r2, r3
    60a0:	movw	r0, #0
    60a4:	movt	r0, #0
    60a8:	bl	0 <coda_add_error_message>
    60ac:	mvn	r3, #0
    60b0:	b	8444 <read_records+0x2bac>
    60b4:	mrc	15, 0, r3, cr13, cr0, {3}
    60b8:	ldr	r2, [pc, #2240]	; 6980 <read_records+0x10e8>
    60bc:	ldr	r3, [r3, r2]
    60c0:	add	r3, r3, #112	; 0x70
    60c4:	ldr	r0, [r3]
    60c8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    60cc:	ldr	r1, [r3, #4]
    60d0:	sub	r3, fp, #1024	; 0x400
    60d4:	sub	r3, r3, #4
    60d8:	ldrd	r2, [r3, #-8]
    60dc:	sxtb	r3, r2
    60e0:	mov	r2, r1
    60e4:	mov	r1, #0
    60e8:	bl	0 <coda_mem_int8_new>
    60ec:	str	r0, [fp, #-16]
    60f0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    60f4:	ldr	r0, [r3, #24]
    60f8:	mov	r3, #0
    60fc:	ldr	r2, [fp, #-16]
    6100:	movw	r1, #0
    6104:	movt	r1, #0
    6108:	bl	0 <coda_mem_record_add_field>
    610c:	ldr	r3, [fp, #-8]
    6110:	cmp	r3, #68	; 0x44
    6114:	ble	6140 <read_records+0x8a8>
    6118:	sub	r3, fp, #1016	; 0x3f8
    611c:	add	r3, r3, #67	; 0x43
    6120:	mov	r2, #2
    6124:	movw	r1, #0
    6128:	movt	r1, #0
    612c:	mov	r0, r3
    6130:	bl	0 <memcmp>
    6134:	mov	r3, r0
    6138:	cmp	r3, #0
    613c:	bne	615c <read_records+0x8c4>
    6140:	sub	r3, fp, #1024	; 0x400
    6144:	sub	r3, r3, #4
    6148:	mov	r1, r3
    614c:	mov	r2, #0
    6150:	mov	r3, #0
    6154:	strd	r2, [r1, #-8]
    6158:	b	61b4 <read_records+0x91c>
    615c:	sub	r2, fp, #1024	; 0x400
    6160:	sub	r2, r2, #4
    6164:	sub	r2, r2, #8
    6168:	sub	r3, fp, #1016	; 0x3f8
    616c:	add	r0, r3, #67	; 0x43
    6170:	mov	r3, #0
    6174:	mov	r1, #2
    6178:	bl	0 <coda_ascii_parse_int64>
    617c:	mov	r3, r0
    6180:	cmp	r3, #0
    6184:	bge	61b4 <read_records+0x91c>
    6188:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    618c:	ldr	r1, [r3, #48]	; 0x30
    6190:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6194:	ldr	r3, [r3, #52]	; 0x34
    6198:	add	r3, r3, #67	; 0x43
    619c:	mov	r2, r3
    61a0:	movw	r0, #0
    61a4:	movt	r0, #0
    61a8:	bl	0 <coda_add_error_message>
    61ac:	mvn	r3, #0
    61b0:	b	8444 <read_records+0x2bac>
    61b4:	mrc	15, 0, r3, cr13, cr0, {3}
    61b8:	ldr	r2, [pc, #1984]	; 6980 <read_records+0x10e8>
    61bc:	ldr	r3, [r3, r2]
    61c0:	add	r3, r3, #116	; 0x74
    61c4:	ldr	r0, [r3]
    61c8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    61cc:	ldr	r1, [r3, #4]
    61d0:	sub	r3, fp, #1024	; 0x400
    61d4:	sub	r3, r3, #4
    61d8:	ldrd	r2, [r3, #-8]
    61dc:	sxtb	r3, r2
    61e0:	mov	r2, r1
    61e4:	mov	r1, #0
    61e8:	bl	0 <coda_mem_int8_new>
    61ec:	str	r0, [fp, #-16]
    61f0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    61f4:	ldr	r0, [r3, #24]
    61f8:	mov	r3, #0
    61fc:	ldr	r2, [fp, #-16]
    6200:	movw	r1, #0
    6204:	movt	r1, #0
    6208:	bl	0 <coda_mem_record_add_field>
    620c:	ldr	r3, [fp, #-8]
    6210:	cmp	r3, #72	; 0x48
    6214:	ble	6240 <read_records+0x9a8>
    6218:	sub	r3, fp, #1016	; 0x3f8
    621c:	add	r3, r3, #70	; 0x46
    6220:	mov	r2, #3
    6224:	movw	r1, #0
    6228:	movt	r1, #0
    622c:	mov	r0, r3
    6230:	bl	0 <memcmp>
    6234:	mov	r3, r0
    6238:	cmp	r3, #0
    623c:	bne	625c <read_records+0x9c4>
    6240:	sub	r3, fp, #1024	; 0x400
    6244:	sub	r3, r3, #4
    6248:	mov	r1, r3
    624c:	mov	r2, #0
    6250:	mov	r3, #0
    6254:	strd	r2, [r1, #-8]
    6258:	b	62b4 <read_records+0xa1c>
    625c:	sub	r2, fp, #1024	; 0x400
    6260:	sub	r2, r2, #4
    6264:	sub	r2, r2, #8
    6268:	sub	r3, fp, #1016	; 0x3f8
    626c:	add	r0, r3, #70	; 0x46
    6270:	mov	r3, #0
    6274:	mov	r1, #3
    6278:	bl	0 <coda_ascii_parse_int64>
    627c:	mov	r3, r0
    6280:	cmp	r3, #0
    6284:	bge	62b4 <read_records+0xa1c>
    6288:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    628c:	ldr	r1, [r3, #48]	; 0x30
    6290:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6294:	ldr	r3, [r3, #52]	; 0x34
    6298:	add	r3, r3, #70	; 0x46
    629c:	mov	r2, r3
    62a0:	movw	r0, #0
    62a4:	movt	r0, #0
    62a8:	bl	0 <coda_add_error_message>
    62ac:	mvn	r3, #0
    62b0:	b	8444 <read_records+0x2bac>
    62b4:	mrc	15, 0, r3, cr13, cr0, {3}
    62b8:	ldr	r2, [pc, #1728]	; 6980 <read_records+0x10e8>
    62bc:	ldr	r3, [r3, r2]
    62c0:	add	r3, r3, #120	; 0x78
    62c4:	ldr	r0, [r3]
    62c8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    62cc:	ldr	r1, [r3, #4]
    62d0:	sub	r3, fp, #1024	; 0x400
    62d4:	sub	r3, r3, #4
    62d8:	ldrd	r2, [r3, #-8]
    62dc:	sxth	r3, r2
    62e0:	mov	r2, r1
    62e4:	mov	r1, #0
    62e8:	bl	0 <coda_mem_int16_new>
    62ec:	str	r0, [fp, #-16]
    62f0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    62f4:	ldr	r0, [r3, #24]
    62f8:	mov	r3, #0
    62fc:	ldr	r2, [fp, #-16]
    6300:	movw	r1, #0
    6304:	movt	r1, #0
    6308:	bl	0 <coda_mem_record_add_field>
    630c:	ldr	r3, [fp, #-8]
    6310:	cmp	r3, #74	; 0x4a
    6314:	ble	6320 <read_records+0xa88>
    6318:	ldrb	r3, [fp, #-942]	; 0xfffffc52
    631c:	b	6324 <read_records+0xa8c>
    6320:	mov	r3, #32
    6324:	strb	r3, [fp, #-1100]	; 0xfffffbb4
    6328:	mov	r3, #0
    632c:	strb	r3, [fp, #-1099]	; 0xfffffbb5
    6330:	mrc	15, 0, r3, cr13, cr0, {3}
    6334:	ldr	r2, [pc, #1604]	; 6980 <read_records+0x10e8>
    6338:	ldr	r3, [r3, r2]
    633c:	add	r3, r3, #124	; 0x7c
    6340:	ldr	r0, [r3]
    6344:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6348:	ldr	r2, [r3, #4]
    634c:	sub	r3, fp, #1088	; 0x440
    6350:	sub	r3, r3, #4
    6354:	sub	r3, r3, #8
    6358:	mov	r1, #0
    635c:	bl	0 <coda_mem_string_new>
    6360:	str	r0, [fp, #-16]
    6364:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6368:	ldr	r0, [r3, #24]
    636c:	mov	r3, #0
    6370:	ldr	r2, [fp, #-16]
    6374:	movw	r1, #0
    6378:	movt	r1, #0
    637c:	bl	0 <coda_mem_record_add_field>
    6380:	ldr	r3, [fp, #-8]
    6384:	cmp	r3, #75	; 0x4b
    6388:	ble	6394 <read_records+0xafc>
    638c:	ldrb	r3, [fp, #-941]	; 0xfffffc53
    6390:	b	6398 <read_records+0xb00>
    6394:	mov	r3, #32
    6398:	strb	r3, [fp, #-1100]	; 0xfffffbb4
    639c:	mrc	15, 0, r3, cr13, cr0, {3}
    63a0:	ldr	r2, [pc, #1496]	; 6980 <read_records+0x10e8>
    63a4:	ldr	r3, [r3, r2]
    63a8:	add	r3, r3, #128	; 0x80
    63ac:	ldr	r0, [r3]
    63b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    63b4:	ldr	r2, [r3, #4]
    63b8:	sub	r3, fp, #1088	; 0x440
    63bc:	sub	r3, r3, #4
    63c0:	sub	r3, r3, #8
    63c4:	mov	r1, #0
    63c8:	bl	0 <coda_mem_string_new>
    63cc:	str	r0, [fp, #-16]
    63d0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    63d4:	ldr	r0, [r3, #24]
    63d8:	mov	r3, #0
    63dc:	ldr	r2, [fp, #-16]
    63e0:	movw	r1, #0
    63e4:	movt	r1, #0
    63e8:	bl	0 <coda_mem_record_add_field>
    63ec:	ldr	r3, [fp, #-8]
    63f0:	cmp	r3, #78	; 0x4e
    63f4:	ble	6400 <read_records+0xb68>
    63f8:	ldrb	r3, [fp, #-938]	; 0xfffffc56
    63fc:	b	6404 <read_records+0xb6c>
    6400:	mov	r3, #32
    6404:	strb	r3, [fp, #-1100]	; 0xfffffbb4
    6408:	mrc	15, 0, r3, cr13, cr0, {3}
    640c:	ldr	r2, [pc, #1388]	; 6980 <read_records+0x10e8>
    6410:	ldr	r3, [r3, r2]
    6414:	add	r3, r3, #132	; 0x84
    6418:	ldr	r0, [r3]
    641c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6420:	ldr	r2, [r3, #4]
    6424:	sub	r3, fp, #1088	; 0x440
    6428:	sub	r3, r3, #4
    642c:	sub	r3, r3, #8
    6430:	mov	r1, #0
    6434:	bl	0 <coda_mem_string_new>
    6438:	str	r0, [fp, #-16]
    643c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6440:	ldr	r0, [r3, #24]
    6444:	mov	r3, #0
    6448:	ldr	r2, [fp, #-16]
    644c:	movw	r1, #0
    6450:	movt	r1, #0
    6454:	bl	0 <coda_mem_record_add_field>
    6458:	ldr	r3, [fp, #-8]
    645c:	cmp	r3, #79	; 0x4f
    6460:	ble	646c <read_records+0xbd4>
    6464:	ldrb	r3, [fp, #-937]	; 0xfffffc57
    6468:	b	6470 <read_records+0xbd8>
    646c:	mov	r3, #32
    6470:	strb	r3, [fp, #-1100]	; 0xfffffbb4
    6474:	mrc	15, 0, r3, cr13, cr0, {3}
    6478:	ldr	r2, [pc, #1280]	; 6980 <read_records+0x10e8>
    647c:	ldr	r3, [r3, r2]
    6480:	add	r3, r3, #136	; 0x88
    6484:	ldr	r0, [r3]
    6488:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    648c:	ldr	r2, [r3, #4]
    6490:	sub	r3, fp, #1088	; 0x440
    6494:	sub	r3, r3, #4
    6498:	sub	r3, r3, #8
    649c:	mov	r1, #0
    64a0:	bl	0 <coda_mem_string_new>
    64a4:	str	r0, [fp, #-16]
    64a8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    64ac:	ldr	r0, [r3, #24]
    64b0:	mov	r3, #0
    64b4:	ldr	r2, [fp, #-16]
    64b8:	movw	r1, #0
    64bc:	movt	r1, #0
    64c0:	bl	0 <coda_mem_record_add_field>
    64c4:	b	6d08 <read_records+0x1470>
    64c8:	ldrb	r3, [fp, #-1016]	; 0xfffffc08
    64cc:	cmp	r3, #86	; 0x56
    64d0:	bne	6ce0 <read_records+0x1448>
    64d4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    64d8:	ldrb	r3, [r3, #44]	; 0x2c
    64dc:	cmp	r3, #86	; 0x56
    64e0:	beq	650c <read_records+0xc74>
    64e4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    64e8:	ldr	r2, [r3, #48]	; 0x30
    64ec:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    64f0:	ldr	r3, [r3, #52]	; 0x34
    64f4:	movw	r1, #0
    64f8:	movt	r1, #0
    64fc:	mvn	r0, #21
    6500:	bl	0 <coda_set_error>
    6504:	mvn	r3, #0
    6508:	b	8444 <read_records+0x2bac>
    650c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6510:	ldr	r3, [r3, #28]
    6514:	cmp	r3, #0
    6518:	bne	6544 <read_records+0xcac>
    651c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6520:	ldr	r2, [r3, #48]	; 0x30
    6524:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6528:	ldr	r3, [r3, #52]	; 0x34
    652c:	movw	r1, #0
    6530:	movt	r1, #0
    6534:	mvn	r0, #21
    6538:	bl	0 <coda_set_error>
    653c:	mvn	r3, #0
    6540:	b	8444 <read_records+0x2bac>
    6544:	mrc	15, 0, r3, cr13, cr0, {3}
    6548:	ldr	r2, [pc, #1072]	; 6980 <read_records+0x10e8>
    654c:	ldr	r3, [r3, r2]
    6550:	add	r3, r3, #276	; 0x114
    6554:	ldr	r3, [r3]
    6558:	mov	r1, #0
    655c:	mov	r0, r3
    6560:	bl	0 <coda_mem_record_new>
    6564:	mov	r2, r0
    6568:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    656c:	str	r2, [r3, #32]
    6570:	ldr	r3, [fp, #-8]
    6574:	cmp	r3, #59	; 0x3b
    6578:	bgt	65b0 <read_records+0xd18>
    657c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6580:	ldr	r2, [r3, #48]	; 0x30
    6584:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6588:	ldr	r3, [r3, #52]	; 0x34
    658c:	str	r3, [sp]
    6590:	mov	r3, r2
    6594:	ldr	r2, [fp, #-8]
    6598:	movw	r1, #0
    659c:	movt	r1, #0
    65a0:	mvn	r0, #21
    65a4:	bl	0 <coda_set_error>
    65a8:	mvn	r3, #0
    65ac:	b	8444 <read_records+0x2bac>
    65b0:	sub	r3, fp, #1016	; 0x3f8
    65b4:	add	r1, r3, #1
    65b8:	sub	r3, fp, #1088	; 0x440
    65bc:	sub	r3, r3, #4
    65c0:	sub	r3, r3, #8
    65c4:	mov	r2, #3
    65c8:	mov	r0, r3
    65cc:	bl	0 <memcpy>
    65d0:	mov	r3, #0
    65d4:	strb	r3, [fp, #-1097]	; 0xfffffbb7
    65d8:	mrc	15, 0, r3, cr13, cr0, {3}
    65dc:	ldr	r2, [pc, #924]	; 6980 <read_records+0x10e8>
    65e0:	ldr	r3, [r3, r2]
    65e4:	add	r3, r3, #88	; 0x58
    65e8:	ldr	r0, [r3]
    65ec:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    65f0:	ldr	r2, [r3, #4]
    65f4:	sub	r3, fp, #1088	; 0x440
    65f8:	sub	r3, r3, #4
    65fc:	sub	r3, r3, #8
    6600:	mov	r1, #0
    6604:	bl	0 <coda_mem_string_new>
    6608:	str	r0, [fp, #-16]
    660c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6610:	ldr	r0, [r3, #32]
    6614:	mov	r3, #0
    6618:	ldr	r2, [fp, #-16]
    661c:	movw	r1, #0
    6620:	movt	r1, #0
    6624:	bl	0 <coda_mem_record_add_field>
    6628:	sub	r2, fp, #1024	; 0x400
    662c:	sub	r2, r2, #4
    6630:	sub	r3, fp, #1016	; 0x3f8
    6634:	add	r0, r3, #4
    6638:	mov	r3, #0
    663c:	mov	r1, #14
    6640:	bl	0 <coda_ascii_parse_double>
    6644:	mov	r3, r0
    6648:	cmp	r3, #0
    664c:	bge	667c <read_records+0xde4>
    6650:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6654:	ldr	r1, [r3, #48]	; 0x30
    6658:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    665c:	ldr	r3, [r3, #52]	; 0x34
    6660:	add	r3, r3, #4
    6664:	mov	r2, r3
    6668:	movw	r0, #0
    666c:	movt	r0, #0
    6670:	bl	0 <coda_add_error_message>
    6674:	mvn	r3, #0
    6678:	b	8444 <read_records+0x2bac>
    667c:	mrc	15, 0, r3, cr13, cr0, {3}
    6680:	ldr	r2, [pc, #760]	; 6980 <read_records+0x10e8>
    6684:	ldr	r3, [r3, r2]
    6688:	add	r3, r3, #184	; 0xb8
    668c:	ldr	r0, [r3]
    6690:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6694:	ldr	r3, [r3, #4]
    6698:	sub	r2, fp, #1024	; 0x400
    669c:	sub	r2, r2, #4
    66a0:	vldr	d7, [r2]
    66a4:	vmov.f64	d0, d7
    66a8:	mov	r2, r3
    66ac:	mov	r1, #0
    66b0:	bl	0 <coda_mem_double_new>
    66b4:	str	r0, [fp, #-16]
    66b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    66bc:	ldr	r0, [r3, #32]
    66c0:	mov	r3, #0
    66c4:	ldr	r2, [fp, #-16]
    66c8:	movw	r1, #0
    66cc:	movt	r1, #0
    66d0:	bl	0 <coda_mem_record_add_field>
    66d4:	sub	r2, fp, #1024	; 0x400
    66d8:	sub	r2, r2, #4
    66dc:	sub	r3, fp, #1016	; 0x3f8
    66e0:	add	r0, r3, #18
    66e4:	mov	r3, #0
    66e8:	mov	r1, #14
    66ec:	bl	0 <coda_ascii_parse_double>
    66f0:	mov	r3, r0
    66f4:	cmp	r3, #0
    66f8:	bge	6728 <read_records+0xe90>
    66fc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6700:	ldr	r1, [r3, #48]	; 0x30
    6704:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6708:	ldr	r3, [r3, #52]	; 0x34
    670c:	add	r3, r3, #18
    6710:	mov	r2, r3
    6714:	movw	r0, #0
    6718:	movt	r0, #0
    671c:	bl	0 <coda_add_error_message>
    6720:	mvn	r3, #0
    6724:	b	8444 <read_records+0x2bac>
    6728:	mrc	15, 0, r3, cr13, cr0, {3}
    672c:	ldr	r2, [pc, #588]	; 6980 <read_records+0x10e8>
    6730:	ldr	r3, [r3, r2]
    6734:	add	r3, r3, #188	; 0xbc
    6738:	ldr	r0, [r3]
    673c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6740:	ldr	r3, [r3, #4]
    6744:	sub	r2, fp, #1024	; 0x400
    6748:	sub	r2, r2, #4
    674c:	vldr	d7, [r2]
    6750:	vmov.f64	d0, d7
    6754:	mov	r2, r3
    6758:	mov	r1, #0
    675c:	bl	0 <coda_mem_double_new>
    6760:	str	r0, [fp, #-16]
    6764:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6768:	ldr	r0, [r3, #32]
    676c:	mov	r3, #0
    6770:	ldr	r2, [fp, #-16]
    6774:	movw	r1, #0
    6778:	movt	r1, #0
    677c:	bl	0 <coda_mem_record_add_field>
    6780:	sub	r2, fp, #1024	; 0x400
    6784:	sub	r2, r2, #4
    6788:	sub	r3, fp, #1016	; 0x3f8
    678c:	add	r0, r3, #32
    6790:	mov	r3, #0
    6794:	mov	r1, #14
    6798:	bl	0 <coda_ascii_parse_double>
    679c:	mov	r3, r0
    67a0:	cmp	r3, #0
    67a4:	bge	67d4 <read_records+0xf3c>
    67a8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    67ac:	ldr	r1, [r3, #48]	; 0x30
    67b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    67b4:	ldr	r3, [r3, #52]	; 0x34
    67b8:	add	r3, r3, #32
    67bc:	mov	r2, r3
    67c0:	movw	r0, #0
    67c4:	movt	r0, #0
    67c8:	bl	0 <coda_add_error_message>
    67cc:	mvn	r3, #0
    67d0:	b	8444 <read_records+0x2bac>
    67d4:	mrc	15, 0, r3, cr13, cr0, {3}
    67d8:	ldr	r2, [pc, #416]	; 6980 <read_records+0x10e8>
    67dc:	ldr	r3, [r3, r2]
    67e0:	add	r3, r3, #192	; 0xc0
    67e4:	ldr	r0, [r3]
    67e8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    67ec:	ldr	r3, [r3, #4]
    67f0:	sub	r2, fp, #1024	; 0x400
    67f4:	sub	r2, r2, #4
    67f8:	vldr	d7, [r2]
    67fc:	vmov.f64	d0, d7
    6800:	mov	r2, r3
    6804:	mov	r1, #0
    6808:	bl	0 <coda_mem_double_new>
    680c:	str	r0, [fp, #-16]
    6810:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6814:	ldr	r0, [r3, #32]
    6818:	mov	r3, #0
    681c:	ldr	r2, [fp, #-16]
    6820:	movw	r1, #0
    6824:	movt	r1, #0
    6828:	bl	0 <coda_mem_record_add_field>
    682c:	sub	r2, fp, #1024	; 0x400
    6830:	sub	r2, r2, #4
    6834:	sub	r3, fp, #1016	; 0x3f8
    6838:	add	r0, r3, #46	; 0x2e
    683c:	mov	r3, #0
    6840:	mov	r1, #14
    6844:	bl	0 <coda_ascii_parse_double>
    6848:	mov	r3, r0
    684c:	cmp	r3, #0
    6850:	bge	6880 <read_records+0xfe8>
    6854:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6858:	ldr	r1, [r3, #48]	; 0x30
    685c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6860:	ldr	r3, [r3, #52]	; 0x34
    6864:	add	r3, r3, #46	; 0x2e
    6868:	mov	r2, r3
    686c:	movw	r0, #0
    6870:	movt	r0, #0
    6874:	bl	0 <coda_add_error_message>
    6878:	mvn	r3, #0
    687c:	b	8444 <read_records+0x2bac>
    6880:	mrc	15, 0, r3, cr13, cr0, {3}
    6884:	ldr	r2, [pc, #244]	; 6980 <read_records+0x10e8>
    6888:	ldr	r3, [r3, r2]
    688c:	add	r3, r3, #196	; 0xc4
    6890:	ldr	r0, [r3]
    6894:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6898:	ldr	r3, [r3, #4]
    689c:	sub	r2, fp, #1024	; 0x400
    68a0:	sub	r2, r2, #4
    68a4:	vldr	d7, [r2]
    68a8:	vmov.f64	d0, d7
    68ac:	mov	r2, r3
    68b0:	mov	r1, #0
    68b4:	bl	0 <coda_mem_double_new>
    68b8:	str	r0, [fp, #-16]
    68bc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    68c0:	ldr	r0, [r3, #32]
    68c4:	mov	r3, #0
    68c8:	ldr	r2, [fp, #-16]
    68cc:	movw	r1, #0
    68d0:	movt	r1, #0
    68d4:	bl	0 <coda_mem_record_add_field>
    68d8:	ldr	r3, [fp, #-8]
    68dc:	cmp	r3, #62	; 0x3e
    68e0:	ble	690c <read_records+0x1074>
    68e4:	sub	r3, fp, #1016	; 0x3f8
    68e8:	add	r3, r3, #61	; 0x3d
    68ec:	mov	r2, #2
    68f0:	movw	r1, #0
    68f4:	movt	r1, #0
    68f8:	mov	r0, r3
    68fc:	bl	0 <memcmp>
    6900:	mov	r3, r0
    6904:	cmp	r3, #0
    6908:	bne	6928 <read_records+0x1090>
    690c:	sub	r3, fp, #1024	; 0x400
    6910:	sub	r3, r3, #4
    6914:	mov	r1, r3
    6918:	mov	r2, #0
    691c:	mov	r3, #0
    6920:	strd	r2, [r1, #-8]
    6924:	b	6984 <read_records+0x10ec>
    6928:	sub	r2, fp, #1024	; 0x400
    692c:	sub	r2, r2, #4
    6930:	sub	r2, r2, #8
    6934:	sub	r3, fp, #1016	; 0x3f8
    6938:	add	r0, r3, #61	; 0x3d
    693c:	mov	r3, #0
    6940:	mov	r1, #2
    6944:	bl	0 <coda_ascii_parse_int64>
    6948:	mov	r3, r0
    694c:	cmp	r3, #0
    6950:	bge	6984 <read_records+0x10ec>
    6954:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6958:	ldr	r1, [r3, #48]	; 0x30
    695c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6960:	ldr	r3, [r3, #52]	; 0x34
    6964:	add	r3, r3, #61	; 0x3d
    6968:	mov	r2, r3
    696c:	movw	r0, #0
    6970:	movt	r0, #0
    6974:	bl	0 <coda_add_error_message>
    6978:	mvn	r3, #0
    697c:	b	8444 <read_records+0x2bac>
    6980:	.word	0x00000000
    6984:	mrc	15, 0, r3, cr13, cr0, {3}
    6988:	ldr	r2, [pc, #-16]	; 6980 <read_records+0x10e8>
    698c:	ldr	r3, [r3, r2]
    6990:	add	r3, r3, #200	; 0xc8
    6994:	ldr	r0, [r3]
    6998:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    699c:	ldr	r1, [r3, #4]
    69a0:	sub	r3, fp, #1024	; 0x400
    69a4:	sub	r3, r3, #4
    69a8:	ldrd	r2, [r3, #-8]
    69ac:	sxtb	r3, r2
    69b0:	mov	r2, r1
    69b4:	mov	r1, #0
    69b8:	bl	0 <coda_mem_int8_new>
    69bc:	str	r0, [fp, #-16]
    69c0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    69c4:	ldr	r0, [r3, #32]
    69c8:	mov	r3, #0
    69cc:	ldr	r2, [fp, #-16]
    69d0:	movw	r1, #0
    69d4:	movt	r1, #0
    69d8:	bl	0 <coda_mem_record_add_field>
    69dc:	ldr	r3, [fp, #-8]
    69e0:	cmp	r3, #65	; 0x41
    69e4:	ble	6a10 <read_records+0x1178>
    69e8:	sub	r3, fp, #1016	; 0x3f8
    69ec:	add	r3, r3, #64	; 0x40
    69f0:	mov	r2, #2
    69f4:	movw	r1, #0
    69f8:	movt	r1, #0
    69fc:	mov	r0, r3
    6a00:	bl	0 <memcmp>
    6a04:	mov	r3, r0
    6a08:	cmp	r3, #0
    6a0c:	bne	6a2c <read_records+0x1194>
    6a10:	sub	r3, fp, #1024	; 0x400
    6a14:	sub	r3, r3, #4
    6a18:	mov	r1, r3
    6a1c:	mov	r2, #0
    6a20:	mov	r3, #0
    6a24:	strd	r2, [r1, #-8]
    6a28:	b	6a84 <read_records+0x11ec>
    6a2c:	sub	r2, fp, #1024	; 0x400
    6a30:	sub	r2, r2, #4
    6a34:	sub	r2, r2, #8
    6a38:	sub	r3, fp, #1016	; 0x3f8
    6a3c:	add	r0, r3, #64	; 0x40
    6a40:	mov	r3, #0
    6a44:	mov	r1, #2
    6a48:	bl	0 <coda_ascii_parse_int64>
    6a4c:	mov	r3, r0
    6a50:	cmp	r3, #0
    6a54:	bge	6a84 <read_records+0x11ec>
    6a58:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6a5c:	ldr	r1, [r3, #48]	; 0x30
    6a60:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6a64:	ldr	r3, [r3, #52]	; 0x34
    6a68:	add	r3, r3, #64	; 0x40
    6a6c:	mov	r2, r3
    6a70:	movw	r0, #0
    6a74:	movt	r0, #0
    6a78:	bl	0 <coda_add_error_message>
    6a7c:	mvn	r3, #0
    6a80:	b	8444 <read_records+0x2bac>
    6a84:	mrc	15, 0, r3, cr13, cr0, {3}
    6a88:	ldr	r2, [pc, #-272]	; 6980 <read_records+0x10e8>
    6a8c:	ldr	r3, [r3, r2]
    6a90:	add	r3, r3, #204	; 0xcc
    6a94:	ldr	r0, [r3]
    6a98:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6a9c:	ldr	r1, [r3, #4]
    6aa0:	sub	r3, fp, #1024	; 0x400
    6aa4:	sub	r3, r3, #4
    6aa8:	ldrd	r2, [r3, #-8]
    6aac:	sxtb	r3, r2
    6ab0:	mov	r2, r1
    6ab4:	mov	r1, #0
    6ab8:	bl	0 <coda_mem_int8_new>
    6abc:	str	r0, [fp, #-16]
    6ac0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6ac4:	ldr	r0, [r3, #32]
    6ac8:	mov	r3, #0
    6acc:	ldr	r2, [fp, #-16]
    6ad0:	movw	r1, #0
    6ad4:	movt	r1, #0
    6ad8:	bl	0 <coda_mem_record_add_field>
    6adc:	ldr	r3, [fp, #-8]
    6ae0:	cmp	r3, #68	; 0x44
    6ae4:	ble	6b10 <read_records+0x1278>
    6ae8:	sub	r3, fp, #1016	; 0x3f8
    6aec:	add	r3, r3, #67	; 0x43
    6af0:	mov	r2, #2
    6af4:	movw	r1, #0
    6af8:	movt	r1, #0
    6afc:	mov	r0, r3
    6b00:	bl	0 <memcmp>
    6b04:	mov	r3, r0
    6b08:	cmp	r3, #0
    6b0c:	bne	6b2c <read_records+0x1294>
    6b10:	sub	r3, fp, #1024	; 0x400
    6b14:	sub	r3, r3, #4
    6b18:	mov	r1, r3
    6b1c:	mov	r2, #0
    6b20:	mov	r3, #0
    6b24:	strd	r2, [r1, #-8]
    6b28:	b	6b84 <read_records+0x12ec>
    6b2c:	sub	r2, fp, #1024	; 0x400
    6b30:	sub	r2, r2, #4
    6b34:	sub	r2, r2, #8
    6b38:	sub	r3, fp, #1016	; 0x3f8
    6b3c:	add	r0, r3, #67	; 0x43
    6b40:	mov	r3, #0
    6b44:	mov	r1, #2
    6b48:	bl	0 <coda_ascii_parse_int64>
    6b4c:	mov	r3, r0
    6b50:	cmp	r3, #0
    6b54:	bge	6b84 <read_records+0x12ec>
    6b58:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6b5c:	ldr	r1, [r3, #48]	; 0x30
    6b60:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6b64:	ldr	r3, [r3, #52]	; 0x34
    6b68:	add	r3, r3, #67	; 0x43
    6b6c:	mov	r2, r3
    6b70:	movw	r0, #0
    6b74:	movt	r0, #0
    6b78:	bl	0 <coda_add_error_message>
    6b7c:	mvn	r3, #0
    6b80:	b	8444 <read_records+0x2bac>
    6b84:	mrc	15, 0, r3, cr13, cr0, {3}
    6b88:	ldr	r2, [pc, #-528]	; 6980 <read_records+0x10e8>
    6b8c:	ldr	r3, [r3, r2]
    6b90:	add	r3, r3, #208	; 0xd0
    6b94:	ldr	r0, [r3]
    6b98:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6b9c:	ldr	r1, [r3, #4]
    6ba0:	sub	r3, fp, #1024	; 0x400
    6ba4:	sub	r3, r3, #4
    6ba8:	ldrd	r2, [r3, #-8]
    6bac:	sxtb	r3, r2
    6bb0:	mov	r2, r1
    6bb4:	mov	r1, #0
    6bb8:	bl	0 <coda_mem_int8_new>
    6bbc:	str	r0, [fp, #-16]
    6bc0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6bc4:	ldr	r0, [r3, #32]
    6bc8:	mov	r3, #0
    6bcc:	ldr	r2, [fp, #-16]
    6bd0:	movw	r1, #0
    6bd4:	movt	r1, #0
    6bd8:	bl	0 <coda_mem_record_add_field>
    6bdc:	ldr	r3, [fp, #-8]
    6be0:	cmp	r3, #72	; 0x48
    6be4:	ble	6c10 <read_records+0x1378>
    6be8:	sub	r3, fp, #1016	; 0x3f8
    6bec:	add	r3, r3, #70	; 0x46
    6bf0:	mov	r2, #3
    6bf4:	movw	r1, #0
    6bf8:	movt	r1, #0
    6bfc:	mov	r0, r3
    6c00:	bl	0 <memcmp>
    6c04:	mov	r3, r0
    6c08:	cmp	r3, #0
    6c0c:	bne	6c2c <read_records+0x1394>
    6c10:	sub	r3, fp, #1024	; 0x400
    6c14:	sub	r3, r3, #4
    6c18:	mov	r1, r3
    6c1c:	mov	r2, #0
    6c20:	mov	r3, #0
    6c24:	strd	r2, [r1, #-8]
    6c28:	b	6c84 <read_records+0x13ec>
    6c2c:	sub	r2, fp, #1024	; 0x400
    6c30:	sub	r2, r2, #4
    6c34:	sub	r2, r2, #8
    6c38:	sub	r3, fp, #1016	; 0x3f8
    6c3c:	add	r0, r3, #70	; 0x46
    6c40:	mov	r3, #0
    6c44:	mov	r1, #3
    6c48:	bl	0 <coda_ascii_parse_int64>
    6c4c:	mov	r3, r0
    6c50:	cmp	r3, #0
    6c54:	bge	6c84 <read_records+0x13ec>
    6c58:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6c5c:	ldr	r1, [r3, #48]	; 0x30
    6c60:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6c64:	ldr	r3, [r3, #52]	; 0x34
    6c68:	add	r3, r3, #70	; 0x46
    6c6c:	mov	r2, r3
    6c70:	movw	r0, #0
    6c74:	movt	r0, #0
    6c78:	bl	0 <coda_add_error_message>
    6c7c:	mvn	r3, #0
    6c80:	b	8444 <read_records+0x2bac>
    6c84:	mrc	15, 0, r3, cr13, cr0, {3}
    6c88:	ldr	r2, [pc, #-784]	; 6980 <read_records+0x10e8>
    6c8c:	ldr	r3, [r3, r2]
    6c90:	add	r3, r3, #212	; 0xd4
    6c94:	ldr	r0, [r3]
    6c98:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6c9c:	ldr	r1, [r3, #4]
    6ca0:	sub	r3, fp, #1024	; 0x400
    6ca4:	sub	r3, r3, #4
    6ca8:	ldrd	r2, [r3, #-8]
    6cac:	sxth	r3, r2
    6cb0:	mov	r2, r1
    6cb4:	mov	r1, #0
    6cb8:	bl	0 <coda_mem_int16_new>
    6cbc:	str	r0, [fp, #-16]
    6cc0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6cc4:	ldr	r0, [r3, #32]
    6cc8:	mov	r3, #0
    6ccc:	ldr	r2, [fp, #-16]
    6cd0:	movw	r1, #0
    6cd4:	movt	r1, #0
    6cd8:	bl	0 <coda_mem_record_add_field>
    6cdc:	b	6d08 <read_records+0x1470>
    6ce0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6ce4:	ldr	r2, [r3, #48]	; 0x30
    6ce8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6cec:	ldr	r3, [r3, #52]	; 0x34
    6cf0:	movw	r1, #0
    6cf4:	movt	r1, #0
    6cf8:	mvn	r0, #21
    6cfc:	bl	0 <coda_set_error>
    6d00:	mvn	r3, #0
    6d04:	b	8444 <read_records+0x2bac>
    6d08:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d0c:	ldr	r3, [r3]
    6d10:	mov	r0, r3
    6d14:	bl	0 <ftell>
    6d18:	mov	r2, r0
    6d1c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d20:	str	r2, [r3, #52]	; 0x34
    6d24:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d28:	ldr	r3, [r3, #48]	; 0x30
    6d2c:	add	r2, r3, #1
    6d30:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d34:	str	r2, [r3, #48]	; 0x30
    6d38:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d3c:	ldr	r3, [r3]
    6d40:	sub	r2, fp, #1016	; 0x3f8
    6d44:	mov	r1, r2
    6d48:	mov	r0, r3
    6d4c:	bl	427c <get_line>
    6d50:	str	r0, [fp, #-8]
    6d54:	ldr	r3, [fp, #-8]
    6d58:	cmp	r3, #0
    6d5c:	bge	6d68 <read_records+0x14d0>
    6d60:	mvn	r3, #0
    6d64:	b	8444 <read_records+0x2bac>
    6d68:	ldrb	r3, [fp, #-1016]	; 0xfffffc08
    6d6c:	cmp	r3, #69	; 0x45
    6d70:	bne	831c <read_records+0x2a84>
    6d74:	ldrb	r3, [fp, #-1015]	; 0xfffffc09
    6d78:	cmp	r3, #80	; 0x50
    6d7c:	beq	6d8c <read_records+0x14f4>
    6d80:	ldrb	r3, [fp, #-1015]	; 0xfffffc09
    6d84:	cmp	r3, #86	; 0x56
    6d88:	bne	831c <read_records+0x2a84>
    6d8c:	ldrb	r3, [fp, #-1015]	; 0xfffffc09
    6d90:	cmp	r3, #80	; 0x50
    6d94:	bne	782c <read_records+0x1f94>
    6d98:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6d9c:	ldr	r3, [r3, #24]
    6da0:	cmp	r3, #0
    6da4:	bne	6dd0 <read_records+0x1538>
    6da8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6dac:	ldr	r2, [r3, #48]	; 0x30
    6db0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6db4:	ldr	r3, [r3, #52]	; 0x34
    6db8:	movw	r1, #0
    6dbc:	movt	r1, #0
    6dc0:	mvn	r0, #21
    6dc4:	bl	0 <coda_set_error>
    6dc8:	mvn	r3, #0
    6dcc:	b	8444 <read_records+0x2bac>
    6dd0:	mrc	15, 0, r3, cr13, cr0, {3}
    6dd4:	ldr	r2, [pc, #-1116]	; 6980 <read_records+0x10e8>
    6dd8:	ldr	r3, [r3, r2]
    6ddc:	add	r3, r3, #140	; 0x8c
    6de0:	ldr	r3, [r3]
    6de4:	mov	r1, #0
    6de8:	mov	r0, r3
    6dec:	bl	0 <coda_mem_record_new>
    6df0:	mov	r2, r0
    6df4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6df8:	str	r2, [r3, #36]	; 0x24
    6dfc:	ldr	r3, [fp, #-8]
    6e00:	cmp	r3, #7
    6e04:	ble	6e30 <read_records+0x1598>
    6e08:	sub	r3, fp, #1016	; 0x3f8
    6e0c:	add	r3, r3, #4
    6e10:	mov	r2, #4
    6e14:	movw	r1, #0
    6e18:	movt	r1, #0
    6e1c:	mov	r0, r3
    6e20:	bl	0 <memcmp>
    6e24:	mov	r3, r0
    6e28:	cmp	r3, #0
    6e2c:	bne	6e4c <read_records+0x15b4>
    6e30:	sub	r3, fp, #1024	; 0x400
    6e34:	sub	r3, r3, #4
    6e38:	mov	r1, r3
    6e3c:	mov	r2, #0
    6e40:	mov	r3, #0
    6e44:	strd	r2, [r1, #-8]
    6e48:	b	6ea4 <read_records+0x160c>
    6e4c:	sub	r2, fp, #1024	; 0x400
    6e50:	sub	r2, r2, #4
    6e54:	sub	r2, r2, #8
    6e58:	sub	r3, fp, #1016	; 0x3f8
    6e5c:	add	r0, r3, #4
    6e60:	mov	r3, #0
    6e64:	mov	r1, #4
    6e68:	bl	0 <coda_ascii_parse_int64>
    6e6c:	mov	r3, r0
    6e70:	cmp	r3, #0
    6e74:	bge	6ea4 <read_records+0x160c>
    6e78:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6e7c:	ldr	r1, [r3, #48]	; 0x30
    6e80:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6e84:	ldr	r3, [r3, #52]	; 0x34
    6e88:	add	r3, r3, #4
    6e8c:	mov	r2, r3
    6e90:	movw	r0, #0
    6e94:	movt	r0, #0
    6e98:	bl	0 <coda_add_error_message>
    6e9c:	mvn	r3, #0
    6ea0:	b	8444 <read_records+0x2bac>
    6ea4:	mrc	15, 0, r3, cr13, cr0, {3}
    6ea8:	ldr	r2, [pc, #-1328]	; 6980 <read_records+0x10e8>
    6eac:	ldr	r3, [r3, r2]
    6eb0:	add	r3, r3, #144	; 0x90
    6eb4:	ldr	r0, [r3]
    6eb8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6ebc:	ldr	r1, [r3, #4]
    6ec0:	sub	r3, fp, #1024	; 0x400
    6ec4:	sub	r3, r3, #4
    6ec8:	ldrd	r2, [r3, #-8]
    6ecc:	sxth	r3, r2
    6ed0:	mov	r2, r1
    6ed4:	mov	r1, #0
    6ed8:	bl	0 <coda_mem_int16_new>
    6edc:	str	r0, [fp, #-16]
    6ee0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6ee4:	ldr	r0, [r3, #36]	; 0x24
    6ee8:	mov	r3, #0
    6eec:	ldr	r2, [fp, #-16]
    6ef0:	movw	r1, #0
    6ef4:	movt	r1, #0
    6ef8:	bl	0 <coda_mem_record_add_field>
    6efc:	ldr	r3, [fp, #-8]
    6f00:	cmp	r3, #12
    6f04:	ble	6f30 <read_records+0x1698>
    6f08:	sub	r3, fp, #1016	; 0x3f8
    6f0c:	add	r3, r3, #9
    6f10:	mov	r2, #4
    6f14:	movw	r1, #0
    6f18:	movt	r1, #0
    6f1c:	mov	r0, r3
    6f20:	bl	0 <memcmp>
    6f24:	mov	r3, r0
    6f28:	cmp	r3, #0
    6f2c:	bne	6f4c <read_records+0x16b4>
    6f30:	sub	r3, fp, #1024	; 0x400
    6f34:	sub	r3, r3, #4
    6f38:	mov	r1, r3
    6f3c:	mov	r2, #0
    6f40:	mov	r3, #0
    6f44:	strd	r2, [r1, #-8]
    6f48:	b	6fa4 <read_records+0x170c>
    6f4c:	sub	r2, fp, #1024	; 0x400
    6f50:	sub	r2, r2, #4
    6f54:	sub	r2, r2, #8
    6f58:	sub	r3, fp, #1016	; 0x3f8
    6f5c:	add	r0, r3, #9
    6f60:	mov	r3, #0
    6f64:	mov	r1, #4
    6f68:	bl	0 <coda_ascii_parse_int64>
    6f6c:	mov	r3, r0
    6f70:	cmp	r3, #0
    6f74:	bge	6fa4 <read_records+0x170c>
    6f78:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6f7c:	ldr	r1, [r3, #48]	; 0x30
    6f80:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6f84:	ldr	r3, [r3, #52]	; 0x34
    6f88:	add	r3, r3, #9
    6f8c:	mov	r2, r3
    6f90:	movw	r0, #0
    6f94:	movt	r0, #0
    6f98:	bl	0 <coda_add_error_message>
    6f9c:	mvn	r3, #0
    6fa0:	b	8444 <read_records+0x2bac>
    6fa4:	mrc	15, 0, r3, cr13, cr0, {3}
    6fa8:	ldr	r2, [pc, #-1584]	; 6980 <read_records+0x10e8>
    6fac:	ldr	r3, [r3, r2]
    6fb0:	add	r3, r3, #148	; 0x94
    6fb4:	ldr	r0, [r3]
    6fb8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6fbc:	ldr	r1, [r3, #4]
    6fc0:	sub	r3, fp, #1024	; 0x400
    6fc4:	sub	r3, r3, #4
    6fc8:	ldrd	r2, [r3, #-8]
    6fcc:	sxth	r3, r2
    6fd0:	mov	r2, r1
    6fd4:	mov	r1, #0
    6fd8:	bl	0 <coda_mem_int16_new>
    6fdc:	str	r0, [fp, #-16]
    6fe0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    6fe4:	ldr	r0, [r3, #36]	; 0x24
    6fe8:	mov	r3, #0
    6fec:	ldr	r2, [fp, #-16]
    6ff0:	movw	r1, #0
    6ff4:	movt	r1, #0
    6ff8:	bl	0 <coda_mem_record_add_field>
    6ffc:	ldr	r3, [fp, #-8]
    7000:	cmp	r3, #17
    7004:	ble	7030 <read_records+0x1798>
    7008:	sub	r3, fp, #1016	; 0x3f8
    700c:	add	r3, r3, #14
    7010:	mov	r2, #4
    7014:	movw	r1, #0
    7018:	movt	r1, #0
    701c:	mov	r0, r3
    7020:	bl	0 <memcmp>
    7024:	mov	r3, r0
    7028:	cmp	r3, #0
    702c:	bne	704c <read_records+0x17b4>
    7030:	sub	r3, fp, #1024	; 0x400
    7034:	sub	r3, r3, #4
    7038:	mov	r1, r3
    703c:	mov	r2, #0
    7040:	mov	r3, #0
    7044:	strd	r2, [r1, #-8]
    7048:	b	70a4 <read_records+0x180c>
    704c:	sub	r2, fp, #1024	; 0x400
    7050:	sub	r2, r2, #4
    7054:	sub	r2, r2, #8
    7058:	sub	r3, fp, #1016	; 0x3f8
    705c:	add	r0, r3, #14
    7060:	mov	r3, #0
    7064:	mov	r1, #4
    7068:	bl	0 <coda_ascii_parse_int64>
    706c:	mov	r3, r0
    7070:	cmp	r3, #0
    7074:	bge	70a4 <read_records+0x180c>
    7078:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    707c:	ldr	r1, [r3, #48]	; 0x30
    7080:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7084:	ldr	r3, [r3, #52]	; 0x34
    7088:	add	r3, r3, #14
    708c:	mov	r2, r3
    7090:	movw	r0, #0
    7094:	movt	r0, #0
    7098:	bl	0 <coda_add_error_message>
    709c:	mvn	r3, #0
    70a0:	b	8444 <read_records+0x2bac>
    70a4:	mrc	15, 0, r3, cr13, cr0, {3}
    70a8:	ldr	r2, [pc, #-1840]	; 6980 <read_records+0x10e8>
    70ac:	ldr	r3, [r3, r2]
    70b0:	add	r3, r3, #152	; 0x98
    70b4:	ldr	r0, [r3]
    70b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    70bc:	ldr	r1, [r3, #4]
    70c0:	sub	r3, fp, #1024	; 0x400
    70c4:	sub	r3, r3, #4
    70c8:	ldrd	r2, [r3, #-8]
    70cc:	sxth	r3, r2
    70d0:	mov	r2, r1
    70d4:	mov	r1, #0
    70d8:	bl	0 <coda_mem_int16_new>
    70dc:	str	r0, [fp, #-16]
    70e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    70e4:	ldr	r0, [r3, #36]	; 0x24
    70e8:	mov	r3, #0
    70ec:	ldr	r2, [fp, #-16]
    70f0:	movw	r1, #0
    70f4:	movt	r1, #0
    70f8:	bl	0 <coda_mem_record_add_field>
    70fc:	ldr	r3, [fp, #-8]
    7100:	cmp	r3, #25
    7104:	ble	7130 <read_records+0x1898>
    7108:	sub	r3, fp, #1016	; 0x3f8
    710c:	add	r3, r3, #19
    7110:	mov	r2, #7
    7114:	movw	r1, #0
    7118:	movt	r1, #0
    711c:	mov	r0, r3
    7120:	bl	0 <memcmp>
    7124:	mov	r3, r0
    7128:	cmp	r3, #0
    712c:	bne	714c <read_records+0x18b4>
    7130:	sub	r3, fp, #1024	; 0x400
    7134:	sub	r3, r3, #4
    7138:	mov	r1, r3
    713c:	mov	r2, #0
    7140:	mov	r3, #0
    7144:	strd	r2, [r1, #-8]
    7148:	b	71a4 <read_records+0x190c>
    714c:	sub	r2, fp, #1024	; 0x400
    7150:	sub	r2, r2, #4
    7154:	sub	r2, r2, #8
    7158:	sub	r3, fp, #1016	; 0x3f8
    715c:	add	r0, r3, #19
    7160:	mov	r3, #0
    7164:	mov	r1, #7
    7168:	bl	0 <coda_ascii_parse_int64>
    716c:	mov	r3, r0
    7170:	cmp	r3, #0
    7174:	bge	71a4 <read_records+0x190c>
    7178:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    717c:	ldr	r1, [r3, #48]	; 0x30
    7180:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7184:	ldr	r3, [r3, #52]	; 0x34
    7188:	add	r3, r3, #19
    718c:	mov	r2, r3
    7190:	movw	r0, #0
    7194:	movt	r0, #0
    7198:	bl	0 <coda_add_error_message>
    719c:	mvn	r3, #0
    71a0:	b	8444 <read_records+0x2bac>
    71a4:	mrc	15, 0, r3, cr13, cr0, {3}
    71a8:	ldr	r2, [pc, #-2096]	; 6980 <read_records+0x10e8>
    71ac:	ldr	r3, [r3, r2]
    71b0:	add	r3, r3, #156	; 0x9c
    71b4:	ldr	r0, [r3]
    71b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    71bc:	ldr	r1, [r3, #4]
    71c0:	sub	r3, fp, #1024	; 0x400
    71c4:	sub	r3, r3, #4
    71c8:	ldrd	r2, [r3, #-8]
    71cc:	mov	r3, r2
    71d0:	mov	r2, r1
    71d4:	mov	r1, #0
    71d8:	bl	0 <coda_mem_int32_new>
    71dc:	str	r0, [fp, #-16]
    71e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    71e4:	ldr	r0, [r3, #36]	; 0x24
    71e8:	mov	r3, #0
    71ec:	ldr	r2, [fp, #-16]
    71f0:	movw	r1, #0
    71f4:	movt	r1, #0
    71f8:	bl	0 <coda_mem_record_add_field>
    71fc:	ldr	r3, [fp, #-8]
    7200:	cmp	r3, #34	; 0x22
    7204:	ble	7230 <read_records+0x1998>
    7208:	sub	r3, fp, #1016	; 0x3f8
    720c:	add	r3, r3, #27
    7210:	mov	r2, #8
    7214:	movw	r1, #0
    7218:	movt	r1, #0
    721c:	mov	r0, r3
    7220:	bl	0 <memcmp>
    7224:	mov	r3, r0
    7228:	cmp	r3, #0
    722c:	bne	724c <read_records+0x19b4>
    7230:	sub	r3, fp, #1024	; 0x400
    7234:	sub	r3, r3, #4
    7238:	mov	r1, r3
    723c:	mov	r2, #0
    7240:	mov	r3, #0
    7244:	strd	r2, [r1, #-8]
    7248:	b	72a4 <read_records+0x1a0c>
    724c:	sub	r2, fp, #1024	; 0x400
    7250:	sub	r2, r2, #4
    7254:	sub	r2, r2, #8
    7258:	sub	r3, fp, #1016	; 0x3f8
    725c:	add	r0, r3, #27
    7260:	mov	r3, #0
    7264:	mov	r1, #8
    7268:	bl	0 <coda_ascii_parse_int64>
    726c:	mov	r3, r0
    7270:	cmp	r3, #0
    7274:	bge	72a4 <read_records+0x1a0c>
    7278:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    727c:	ldr	r1, [r3, #48]	; 0x30
    7280:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7284:	ldr	r3, [r3, #52]	; 0x34
    7288:	add	r3, r3, #27
    728c:	mov	r2, r3
    7290:	movw	r0, #0
    7294:	movt	r0, #0
    7298:	bl	0 <coda_add_error_message>
    729c:	mvn	r3, #0
    72a0:	b	8444 <read_records+0x2bac>
    72a4:	mrc	15, 0, r3, cr13, cr0, {3}
    72a8:	ldr	r2, [pc, #-2352]	; 6980 <read_records+0x10e8>
    72ac:	ldr	r3, [r3, r2]
    72b0:	add	r3, r3, #160	; 0xa0
    72b4:	ldr	r0, [r3]
    72b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    72bc:	ldr	r1, [r3, #4]
    72c0:	sub	r3, fp, #1024	; 0x400
    72c4:	sub	r3, r3, #4
    72c8:	ldrd	r2, [r3, #-8]
    72cc:	mov	r3, r2
    72d0:	mov	r2, r1
    72d4:	mov	r1, #0
    72d8:	bl	0 <coda_mem_int32_new>
    72dc:	str	r0, [fp, #-16]
    72e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    72e4:	ldr	r0, [r3, #36]	; 0x24
    72e8:	mov	r3, #0
    72ec:	ldr	r2, [fp, #-16]
    72f0:	movw	r1, #0
    72f4:	movt	r1, #0
    72f8:	bl	0 <coda_mem_record_add_field>
    72fc:	ldr	r3, [fp, #-8]
    7300:	cmp	r3, #43	; 0x2b
    7304:	ble	7330 <read_records+0x1a98>
    7308:	sub	r3, fp, #1016	; 0x3f8
    730c:	add	r3, r3, #36	; 0x24
    7310:	mov	r2, #8
    7314:	movw	r1, #0
    7318:	movt	r1, #0
    731c:	mov	r0, r3
    7320:	bl	0 <memcmp>
    7324:	mov	r3, r0
    7328:	cmp	r3, #0
    732c:	bne	734c <read_records+0x1ab4>
    7330:	sub	r3, fp, #1024	; 0x400
    7334:	sub	r3, r3, #4
    7338:	mov	r1, r3
    733c:	mov	r2, #0
    7340:	mov	r3, #0
    7344:	strd	r2, [r1, #-8]
    7348:	b	73a4 <read_records+0x1b0c>
    734c:	sub	r2, fp, #1024	; 0x400
    7350:	sub	r2, r2, #4
    7354:	sub	r2, r2, #8
    7358:	sub	r3, fp, #1016	; 0x3f8
    735c:	add	r0, r3, #36	; 0x24
    7360:	mov	r3, #0
    7364:	mov	r1, #8
    7368:	bl	0 <coda_ascii_parse_int64>
    736c:	mov	r3, r0
    7370:	cmp	r3, #0
    7374:	bge	73a4 <read_records+0x1b0c>
    7378:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    737c:	ldr	r1, [r3, #48]	; 0x30
    7380:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7384:	ldr	r3, [r3, #52]	; 0x34
    7388:	add	r3, r3, #36	; 0x24
    738c:	mov	r2, r3
    7390:	movw	r0, #0
    7394:	movt	r0, #0
    7398:	bl	0 <coda_add_error_message>
    739c:	mvn	r3, #0
    73a0:	b	8444 <read_records+0x2bac>
    73a4:	mrc	15, 0, r3, cr13, cr0, {3}
    73a8:	ldr	r2, [pc, #-2608]	; 6980 <read_records+0x10e8>
    73ac:	ldr	r3, [r3, r2]
    73b0:	add	r3, r3, #164	; 0xa4
    73b4:	ldr	r0, [r3]
    73b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    73bc:	ldr	r1, [r3, #4]
    73c0:	sub	r3, fp, #1024	; 0x400
    73c4:	sub	r3, r3, #4
    73c8:	ldrd	r2, [r3, #-8]
    73cc:	mov	r3, r2
    73d0:	mov	r2, r1
    73d4:	mov	r1, #0
    73d8:	bl	0 <coda_mem_int32_new>
    73dc:	str	r0, [fp, #-16]
    73e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    73e4:	ldr	r0, [r3, #36]	; 0x24
    73e8:	mov	r3, #0
    73ec:	ldr	r2, [fp, #-16]
    73f0:	movw	r1, #0
    73f4:	movt	r1, #0
    73f8:	bl	0 <coda_mem_record_add_field>
    73fc:	ldr	r3, [fp, #-8]
    7400:	cmp	r3, #52	; 0x34
    7404:	ble	7430 <read_records+0x1b98>
    7408:	sub	r3, fp, #1016	; 0x3f8
    740c:	add	r3, r3, #45	; 0x2d
    7410:	mov	r2, #8
    7414:	movw	r1, #0
    7418:	movt	r1, #0
    741c:	mov	r0, r3
    7420:	bl	0 <memcmp>
    7424:	mov	r3, r0
    7428:	cmp	r3, #0
    742c:	bne	744c <read_records+0x1bb4>
    7430:	sub	r3, fp, #1024	; 0x400
    7434:	sub	r3, r3, #4
    7438:	mov	r1, r3
    743c:	mov	r2, #0
    7440:	mov	r3, #0
    7444:	strd	r2, [r1, #-8]
    7448:	b	74a4 <read_records+0x1c0c>
    744c:	sub	r2, fp, #1024	; 0x400
    7450:	sub	r2, r2, #4
    7454:	sub	r2, r2, #8
    7458:	sub	r3, fp, #1016	; 0x3f8
    745c:	add	r0, r3, #45	; 0x2d
    7460:	mov	r3, #0
    7464:	mov	r1, #8
    7468:	bl	0 <coda_ascii_parse_int64>
    746c:	mov	r3, r0
    7470:	cmp	r3, #0
    7474:	bge	74a4 <read_records+0x1c0c>
    7478:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    747c:	ldr	r1, [r3, #48]	; 0x30
    7480:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7484:	ldr	r3, [r3, #52]	; 0x34
    7488:	add	r3, r3, #45	; 0x2d
    748c:	mov	r2, r3
    7490:	movw	r0, #0
    7494:	movt	r0, #0
    7498:	bl	0 <coda_add_error_message>
    749c:	mvn	r3, #0
    74a0:	b	8444 <read_records+0x2bac>
    74a4:	mrc	15, 0, r3, cr13, cr0, {3}
    74a8:	ldr	r2, [pc, #-2864]	; 6980 <read_records+0x10e8>
    74ac:	ldr	r3, [r3, r2]
    74b0:	add	r3, r3, #168	; 0xa8
    74b4:	ldr	r0, [r3]
    74b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    74bc:	ldr	r1, [r3, #4]
    74c0:	sub	r3, fp, #1024	; 0x400
    74c4:	sub	r3, r3, #4
    74c8:	ldrd	r2, [r3, #-8]
    74cc:	mov	r3, r2
    74d0:	mov	r2, r1
    74d4:	mov	r1, #0
    74d8:	bl	0 <coda_mem_int32_new>
    74dc:	str	r0, [fp, #-16]
    74e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    74e4:	ldr	r0, [r3, #36]	; 0x24
    74e8:	mov	r3, #0
    74ec:	ldr	r2, [fp, #-16]
    74f0:	movw	r1, #0
    74f4:	movt	r1, #0
    74f8:	bl	0 <coda_mem_record_add_field>
    74fc:	ldr	r3, [fp, #-8]
    7500:	cmp	r3, #61	; 0x3d
    7504:	ble	7530 <read_records+0x1c98>
    7508:	sub	r3, fp, #1016	; 0x3f8
    750c:	add	r3, r3, #54	; 0x36
    7510:	mov	r2, #8
    7514:	movw	r1, #0
    7518:	movt	r1, #0
    751c:	mov	r0, r3
    7520:	bl	0 <memcmp>
    7524:	mov	r3, r0
    7528:	cmp	r3, #0
    752c:	bne	754c <read_records+0x1cb4>
    7530:	sub	r3, fp, #1024	; 0x400
    7534:	sub	r3, r3, #4
    7538:	mov	r1, r3
    753c:	mov	r2, #0
    7540:	mov	r3, #0
    7544:	strd	r2, [r1, #-8]
    7548:	b	75a4 <read_records+0x1d0c>
    754c:	sub	r2, fp, #1024	; 0x400
    7550:	sub	r2, r2, #4
    7554:	sub	r2, r2, #8
    7558:	sub	r3, fp, #1016	; 0x3f8
    755c:	add	r0, r3, #54	; 0x36
    7560:	mov	r3, #0
    7564:	mov	r1, #8
    7568:	bl	0 <coda_ascii_parse_int64>
    756c:	mov	r3, r0
    7570:	cmp	r3, #0
    7574:	bge	75a4 <read_records+0x1d0c>
    7578:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    757c:	ldr	r1, [r3, #48]	; 0x30
    7580:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7584:	ldr	r3, [r3, #52]	; 0x34
    7588:	add	r3, r3, #54	; 0x36
    758c:	mov	r2, r3
    7590:	movw	r0, #0
    7594:	movt	r0, #0
    7598:	bl	0 <coda_add_error_message>
    759c:	mvn	r3, #0
    75a0:	b	8444 <read_records+0x2bac>
    75a4:	mrc	15, 0, r3, cr13, cr0, {3}
    75a8:	ldr	r2, [pc, #-3120]	; 6980 <read_records+0x10e8>
    75ac:	ldr	r3, [r3, r2]
    75b0:	add	r3, r3, #172	; 0xac
    75b4:	ldr	r0, [r3]
    75b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    75bc:	ldr	r1, [r3, #4]
    75c0:	sub	r3, fp, #1024	; 0x400
    75c4:	sub	r3, r3, #4
    75c8:	ldrd	r2, [r3, #-8]
    75cc:	mov	r3, r2
    75d0:	mov	r2, r1
    75d4:	mov	r1, #0
    75d8:	bl	0 <coda_mem_int32_new>
    75dc:	str	r0, [fp, #-16]
    75e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    75e4:	ldr	r0, [r3, #36]	; 0x24
    75e8:	mov	r3, #0
    75ec:	ldr	r2, [fp, #-16]
    75f0:	movw	r1, #0
    75f4:	movt	r1, #0
    75f8:	bl	0 <coda_mem_record_add_field>
    75fc:	ldr	r3, [fp, #-8]
    7600:	cmp	r3, #70	; 0x46
    7604:	ble	7630 <read_records+0x1d98>
    7608:	sub	r3, fp, #1016	; 0x3f8
    760c:	add	r3, r3, #63	; 0x3f
    7610:	mov	r2, #8
    7614:	movw	r1, #0
    7618:	movt	r1, #0
    761c:	mov	r0, r3
    7620:	bl	0 <memcmp>
    7624:	mov	r3, r0
    7628:	cmp	r3, #0
    762c:	bne	764c <read_records+0x1db4>
    7630:	sub	r3, fp, #1024	; 0x400
    7634:	sub	r3, r3, #4
    7638:	mov	r1, r3
    763c:	mov	r2, #0
    7640:	mov	r3, #0
    7644:	strd	r2, [r1, #-8]
    7648:	b	76a4 <read_records+0x1e0c>
    764c:	sub	r2, fp, #1024	; 0x400
    7650:	sub	r2, r2, #4
    7654:	sub	r2, r2, #8
    7658:	sub	r3, fp, #1016	; 0x3f8
    765c:	add	r0, r3, #63	; 0x3f
    7660:	mov	r3, #0
    7664:	mov	r1, #8
    7668:	bl	0 <coda_ascii_parse_int64>
    766c:	mov	r3, r0
    7670:	cmp	r3, #0
    7674:	bge	76a4 <read_records+0x1e0c>
    7678:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    767c:	ldr	r1, [r3, #48]	; 0x30
    7680:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7684:	ldr	r3, [r3, #52]	; 0x34
    7688:	add	r3, r3, #63	; 0x3f
    768c:	mov	r2, r3
    7690:	movw	r0, #0
    7694:	movt	r0, #0
    7698:	bl	0 <coda_add_error_message>
    769c:	mvn	r3, #0
    76a0:	b	8444 <read_records+0x2bac>
    76a4:	mrc	15, 0, r3, cr13, cr0, {3}
    76a8:	ldr	r2, [pc, #-3376]	; 6980 <read_records+0x10e8>
    76ac:	ldr	r3, [r3, r2]
    76b0:	add	r3, r3, #176	; 0xb0
    76b4:	ldr	r0, [r3]
    76b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    76bc:	ldr	r1, [r3, #4]
    76c0:	sub	r3, fp, #1024	; 0x400
    76c4:	sub	r3, r3, #4
    76c8:	ldrd	r2, [r3, #-8]
    76cc:	mov	r3, r2
    76d0:	mov	r2, r1
    76d4:	mov	r1, #0
    76d8:	bl	0 <coda_mem_int32_new>
    76dc:	str	r0, [fp, #-16]
    76e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    76e4:	ldr	r0, [r3, #36]	; 0x24
    76e8:	mov	r3, #0
    76ec:	ldr	r2, [fp, #-16]
    76f0:	movw	r1, #0
    76f4:	movt	r1, #0
    76f8:	bl	0 <coda_mem_record_add_field>
    76fc:	ldr	r3, [fp, #-8]
    7700:	cmp	r3, #79	; 0x4f
    7704:	ble	7730 <read_records+0x1e98>
    7708:	sub	r3, fp, #1016	; 0x3f8
    770c:	add	r3, r3, #72	; 0x48
    7710:	mov	r2, #8
    7714:	movw	r1, #0
    7718:	movt	r1, #0
    771c:	mov	r0, r3
    7720:	bl	0 <memcmp>
    7724:	mov	r3, r0
    7728:	cmp	r3, #0
    772c:	bne	774c <read_records+0x1eb4>
    7730:	sub	r3, fp, #1024	; 0x400
    7734:	sub	r3, r3, #4
    7738:	mov	r1, r3
    773c:	mov	r2, #0
    7740:	mov	r3, #0
    7744:	strd	r2, [r1, #-8]
    7748:	b	77a4 <read_records+0x1f0c>
    774c:	sub	r2, fp, #1024	; 0x400
    7750:	sub	r2, r2, #4
    7754:	sub	r2, r2, #8
    7758:	sub	r3, fp, #1016	; 0x3f8
    775c:	add	r0, r3, #72	; 0x48
    7760:	mov	r3, #0
    7764:	mov	r1, #8
    7768:	bl	0 <coda_ascii_parse_int64>
    776c:	mov	r3, r0
    7770:	cmp	r3, #0
    7774:	bge	77a4 <read_records+0x1f0c>
    7778:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    777c:	ldr	r1, [r3, #48]	; 0x30
    7780:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7784:	ldr	r3, [r3, #52]	; 0x34
    7788:	add	r3, r3, #72	; 0x48
    778c:	mov	r2, r3
    7790:	movw	r0, #0
    7794:	movt	r0, #0
    7798:	bl	0 <coda_add_error_message>
    779c:	mvn	r3, #0
    77a0:	b	8444 <read_records+0x2bac>
    77a4:	mrc	15, 0, r3, cr13, cr0, {3}
    77a8:	ldr	r2, [pc, #-3632]	; 6980 <read_records+0x10e8>
    77ac:	ldr	r3, [r3, r2]
    77b0:	add	r3, r3, #180	; 0xb4
    77b4:	ldr	r0, [r3]
    77b8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    77bc:	ldr	r1, [r3, #4]
    77c0:	sub	r3, fp, #1024	; 0x400
    77c4:	sub	r3, r3, #4
    77c8:	ldrd	r2, [r3, #-8]
    77cc:	mov	r3, r2
    77d0:	mov	r2, r1
    77d4:	mov	r1, #0
    77d8:	bl	0 <coda_mem_int32_new>
    77dc:	str	r0, [fp, #-16]
    77e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    77e4:	ldr	r0, [r3, #36]	; 0x24
    77e8:	mov	r3, #0
    77ec:	ldr	r2, [fp, #-16]
    77f0:	movw	r1, #0
    77f4:	movt	r1, #0
    77f8:	bl	0 <coda_mem_record_add_field>
    77fc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7800:	ldr	r0, [r3, #24]
    7804:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7808:	ldr	r2, [r3, #36]	; 0x24
    780c:	mov	r3, #0
    7810:	movw	r1, #0
    7814:	movt	r1, #0
    7818:	bl	0 <coda_mem_record_add_field>
    781c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7820:	mov	r2, #0
    7824:	str	r2, [r3, #36]	; 0x24
    7828:	b	82bc <read_records+0x2a24>
    782c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7830:	ldr	r3, [r3, #32]
    7834:	cmp	r3, #0
    7838:	bne	7864 <read_records+0x1fcc>
    783c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7840:	ldr	r2, [r3, #48]	; 0x30
    7844:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7848:	ldr	r3, [r3, #52]	; 0x34
    784c:	movw	r1, #0
    7850:	movt	r1, #0
    7854:	mvn	r0, #21
    7858:	bl	0 <coda_set_error>
    785c:	mvn	r3, #0
    7860:	b	8444 <read_records+0x2bac>
    7864:	mrc	15, 0, r3, cr13, cr0, {3}
    7868:	ldr	r2, [pc, #-3824]	; 6980 <read_records+0x10e8>
    786c:	ldr	r3, [r3, r2]
    7870:	add	r3, r3, #216	; 0xd8
    7874:	ldr	r3, [r3]
    7878:	mov	r1, #0
    787c:	mov	r0, r3
    7880:	bl	0 <coda_mem_record_new>
    7884:	mov	r2, r0
    7888:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    788c:	str	r2, [r3, #36]	; 0x24
    7890:	ldr	r3, [fp, #-8]
    7894:	cmp	r3, #7
    7898:	ble	78c4 <read_records+0x202c>
    789c:	sub	r3, fp, #1016	; 0x3f8
    78a0:	add	r3, r3, #4
    78a4:	mov	r2, #4
    78a8:	movw	r1, #0
    78ac:	movt	r1, #0
    78b0:	mov	r0, r3
    78b4:	bl	0 <memcmp>
    78b8:	mov	r3, r0
    78bc:	cmp	r3, #0
    78c0:	bne	78e0 <read_records+0x2048>
    78c4:	sub	r3, fp, #1024	; 0x400
    78c8:	sub	r3, r3, #4
    78cc:	mov	r1, r3
    78d0:	mov	r2, #0
    78d4:	mov	r3, #0
    78d8:	strd	r2, [r1, #-8]
    78dc:	b	7938 <read_records+0x20a0>
    78e0:	sub	r2, fp, #1024	; 0x400
    78e4:	sub	r2, r2, #4
    78e8:	sub	r2, r2, #8
    78ec:	sub	r3, fp, #1016	; 0x3f8
    78f0:	add	r0, r3, #4
    78f4:	mov	r3, #0
    78f8:	mov	r1, #4
    78fc:	bl	0 <coda_ascii_parse_int64>
    7900:	mov	r3, r0
    7904:	cmp	r3, #0
    7908:	bge	7938 <read_records+0x20a0>
    790c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7910:	ldr	r1, [r3, #48]	; 0x30
    7914:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7918:	ldr	r3, [r3, #52]	; 0x34
    791c:	add	r3, r3, #4
    7920:	mov	r2, r3
    7924:	movw	r0, #0
    7928:	movt	r0, #0
    792c:	bl	0 <coda_add_error_message>
    7930:	mvn	r3, #0
    7934:	b	8444 <read_records+0x2bac>
    7938:	mrc	15, 0, r3, cr13, cr0, {3}
    793c:	ldr	r2, [pc, #-4036]	; 6980 <read_records+0x10e8>
    7940:	ldr	r3, [r3, r2]
    7944:	add	r3, r3, #220	; 0xdc
    7948:	ldr	r0, [r3]
    794c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7950:	ldr	r1, [r3, #4]
    7954:	sub	r3, fp, #1024	; 0x400
    7958:	sub	r3, r3, #4
    795c:	ldrd	r2, [r3, #-8]
    7960:	sxth	r3, r2
    7964:	mov	r2, r1
    7968:	mov	r1, #0
    796c:	bl	0 <coda_mem_int16_new>
    7970:	str	r0, [fp, #-16]
    7974:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7978:	ldr	r0, [r3, #36]	; 0x24
    797c:	mov	r3, #0
    7980:	ldr	r2, [fp, #-16]
    7984:	movw	r1, #0
    7988:	movt	r1, #0
    798c:	bl	0 <coda_mem_record_add_field>
    7990:	ldr	r3, [fp, #-8]
    7994:	cmp	r3, #12
    7998:	ble	79c4 <read_records+0x212c>
    799c:	sub	r3, fp, #1016	; 0x3f8
    79a0:	add	r3, r3, #9
    79a4:	mov	r2, #4
    79a8:	movw	r1, #0
    79ac:	movt	r1, #0
    79b0:	mov	r0, r3
    79b4:	bl	0 <memcmp>
    79b8:	mov	r3, r0
    79bc:	cmp	r3, #0
    79c0:	bne	79e0 <read_records+0x2148>
    79c4:	sub	r3, fp, #1024	; 0x400
    79c8:	sub	r3, r3, #4
    79cc:	mov	r1, r3
    79d0:	mov	r2, #0
    79d4:	mov	r3, #0
    79d8:	strd	r2, [r1, #-8]
    79dc:	b	7a38 <read_records+0x21a0>
    79e0:	sub	r2, fp, #1024	; 0x400
    79e4:	sub	r2, r2, #4
    79e8:	sub	r2, r2, #8
    79ec:	sub	r3, fp, #1016	; 0x3f8
    79f0:	add	r0, r3, #9
    79f4:	mov	r3, #0
    79f8:	mov	r1, #4
    79fc:	bl	0 <coda_ascii_parse_int64>
    7a00:	mov	r3, r0
    7a04:	cmp	r3, #0
    7a08:	bge	7a38 <read_records+0x21a0>
    7a0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7a10:	ldr	r1, [r3, #48]	; 0x30
    7a14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7a18:	ldr	r3, [r3, #52]	; 0x34
    7a1c:	add	r3, r3, #9
    7a20:	mov	r2, r3
    7a24:	movw	r0, #0
    7a28:	movt	r0, #0
    7a2c:	bl	0 <coda_add_error_message>
    7a30:	mvn	r3, #0
    7a34:	b	8444 <read_records+0x2bac>
    7a38:	mrc	15, 0, r3, cr13, cr0, {3}
    7a3c:	ldr	r2, [pc, #2580]	; 8458 <read_records+0x2bc0>
    7a40:	ldr	r3, [r3, r2]
    7a44:	add	r3, r3, #224	; 0xe0
    7a48:	ldr	r0, [r3]
    7a4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7a50:	ldr	r1, [r3, #4]
    7a54:	sub	r3, fp, #1024	; 0x400
    7a58:	sub	r3, r3, #4
    7a5c:	ldrd	r2, [r3, #-8]
    7a60:	sxth	r3, r2
    7a64:	mov	r2, r1
    7a68:	mov	r1, #0
    7a6c:	bl	0 <coda_mem_int16_new>
    7a70:	str	r0, [fp, #-16]
    7a74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7a78:	ldr	r0, [r3, #36]	; 0x24
    7a7c:	mov	r3, #0
    7a80:	ldr	r2, [fp, #-16]
    7a84:	movw	r1, #0
    7a88:	movt	r1, #0
    7a8c:	bl	0 <coda_mem_record_add_field>
    7a90:	ldr	r3, [fp, #-8]
    7a94:	cmp	r3, #17
    7a98:	ble	7ac4 <read_records+0x222c>
    7a9c:	sub	r3, fp, #1016	; 0x3f8
    7aa0:	add	r3, r3, #14
    7aa4:	mov	r2, #4
    7aa8:	movw	r1, #0
    7aac:	movt	r1, #0
    7ab0:	mov	r0, r3
    7ab4:	bl	0 <memcmp>
    7ab8:	mov	r3, r0
    7abc:	cmp	r3, #0
    7ac0:	bne	7ae0 <read_records+0x2248>
    7ac4:	sub	r3, fp, #1024	; 0x400
    7ac8:	sub	r3, r3, #4
    7acc:	mov	r1, r3
    7ad0:	mov	r2, #0
    7ad4:	mov	r3, #0
    7ad8:	strd	r2, [r1, #-8]
    7adc:	b	7b38 <read_records+0x22a0>
    7ae0:	sub	r2, fp, #1024	; 0x400
    7ae4:	sub	r2, r2, #4
    7ae8:	sub	r2, r2, #8
    7aec:	sub	r3, fp, #1016	; 0x3f8
    7af0:	add	r0, r3, #14
    7af4:	mov	r3, #0
    7af8:	mov	r1, #4
    7afc:	bl	0 <coda_ascii_parse_int64>
    7b00:	mov	r3, r0
    7b04:	cmp	r3, #0
    7b08:	bge	7b38 <read_records+0x22a0>
    7b0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7b10:	ldr	r1, [r3, #48]	; 0x30
    7b14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7b18:	ldr	r3, [r3, #52]	; 0x34
    7b1c:	add	r3, r3, #14
    7b20:	mov	r2, r3
    7b24:	movw	r0, #0
    7b28:	movt	r0, #0
    7b2c:	bl	0 <coda_add_error_message>
    7b30:	mvn	r3, #0
    7b34:	b	8444 <read_records+0x2bac>
    7b38:	mrc	15, 0, r3, cr13, cr0, {3}
    7b3c:	ldr	r2, [pc, #2324]	; 8458 <read_records+0x2bc0>
    7b40:	ldr	r3, [r3, r2]
    7b44:	add	r3, r3, #228	; 0xe4
    7b48:	ldr	r0, [r3]
    7b4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7b50:	ldr	r1, [r3, #4]
    7b54:	sub	r3, fp, #1024	; 0x400
    7b58:	sub	r3, r3, #4
    7b5c:	ldrd	r2, [r3, #-8]
    7b60:	sxth	r3, r2
    7b64:	mov	r2, r1
    7b68:	mov	r1, #0
    7b6c:	bl	0 <coda_mem_int16_new>
    7b70:	str	r0, [fp, #-16]
    7b74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7b78:	ldr	r0, [r3, #36]	; 0x24
    7b7c:	mov	r3, #0
    7b80:	ldr	r2, [fp, #-16]
    7b84:	movw	r1, #0
    7b88:	movt	r1, #0
    7b8c:	bl	0 <coda_mem_record_add_field>
    7b90:	ldr	r3, [fp, #-8]
    7b94:	cmp	r3, #27
    7b98:	ble	7bc4 <read_records+0x232c>
    7b9c:	sub	r3, fp, #1016	; 0x3f8
    7ba0:	add	r3, r3, #19
    7ba4:	mov	r2, #7
    7ba8:	movw	r1, #0
    7bac:	movt	r1, #0
    7bb0:	mov	r0, r3
    7bb4:	bl	0 <memcmp>
    7bb8:	mov	r3, r0
    7bbc:	cmp	r3, #0
    7bc0:	bne	7be0 <read_records+0x2348>
    7bc4:	sub	r3, fp, #1024	; 0x400
    7bc8:	sub	r3, r3, #4
    7bcc:	mov	r1, r3
    7bd0:	mov	r2, #0
    7bd4:	mov	r3, #0
    7bd8:	strd	r2, [r1, #-8]
    7bdc:	b	7c38 <read_records+0x23a0>
    7be0:	sub	r2, fp, #1024	; 0x400
    7be4:	sub	r2, r2, #4
    7be8:	sub	r2, r2, #8
    7bec:	sub	r3, fp, #1016	; 0x3f8
    7bf0:	add	r0, r3, #19
    7bf4:	mov	r3, #0
    7bf8:	mov	r1, #7
    7bfc:	bl	0 <coda_ascii_parse_int64>
    7c00:	mov	r3, r0
    7c04:	cmp	r3, #0
    7c08:	bge	7c38 <read_records+0x23a0>
    7c0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7c10:	ldr	r1, [r3, #48]	; 0x30
    7c14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7c18:	ldr	r3, [r3, #52]	; 0x34
    7c1c:	add	r3, r3, #19
    7c20:	mov	r2, r3
    7c24:	movw	r0, #0
    7c28:	movt	r0, #0
    7c2c:	bl	0 <coda_add_error_message>
    7c30:	mvn	r3, #0
    7c34:	b	8444 <read_records+0x2bac>
    7c38:	mrc	15, 0, r3, cr13, cr0, {3}
    7c3c:	ldr	r2, [pc, #2068]	; 8458 <read_records+0x2bc0>
    7c40:	ldr	r3, [r3, r2]
    7c44:	add	r3, r3, #232	; 0xe8
    7c48:	ldr	r0, [r3]
    7c4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7c50:	ldr	r1, [r3, #4]
    7c54:	sub	r3, fp, #1024	; 0x400
    7c58:	sub	r3, r3, #4
    7c5c:	ldrd	r2, [r3, #-8]
    7c60:	sxth	r3, r2
    7c64:	mov	r2, r1
    7c68:	mov	r1, #0
    7c6c:	bl	0 <coda_mem_int16_new>
    7c70:	str	r0, [fp, #-16]
    7c74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7c78:	ldr	r0, [r3, #36]	; 0x24
    7c7c:	mov	r3, #0
    7c80:	ldr	r2, [fp, #-16]
    7c84:	movw	r1, #0
    7c88:	movt	r1, #0
    7c8c:	bl	0 <coda_mem_record_add_field>
    7c90:	ldr	r3, [fp, #-8]
    7c94:	cmp	r3, #34	; 0x22
    7c98:	ble	7cc4 <read_records+0x242c>
    7c9c:	sub	r3, fp, #1016	; 0x3f8
    7ca0:	add	r3, r3, #27
    7ca4:	mov	r2, #8
    7ca8:	movw	r1, #0
    7cac:	movt	r1, #0
    7cb0:	mov	r0, r3
    7cb4:	bl	0 <memcmp>
    7cb8:	mov	r3, r0
    7cbc:	cmp	r3, #0
    7cc0:	bne	7ce0 <read_records+0x2448>
    7cc4:	sub	r3, fp, #1024	; 0x400
    7cc8:	sub	r3, r3, #4
    7ccc:	mov	r1, r3
    7cd0:	mov	r2, #0
    7cd4:	mov	r3, #0
    7cd8:	strd	r2, [r1, #-8]
    7cdc:	b	7d38 <read_records+0x24a0>
    7ce0:	sub	r2, fp, #1024	; 0x400
    7ce4:	sub	r2, r2, #4
    7ce8:	sub	r2, r2, #8
    7cec:	sub	r3, fp, #1016	; 0x3f8
    7cf0:	add	r0, r3, #27
    7cf4:	mov	r3, #0
    7cf8:	mov	r1, #8
    7cfc:	bl	0 <coda_ascii_parse_int64>
    7d00:	mov	r3, r0
    7d04:	cmp	r3, #0
    7d08:	bge	7d38 <read_records+0x24a0>
    7d0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7d10:	ldr	r1, [r3, #48]	; 0x30
    7d14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7d18:	ldr	r3, [r3, #52]	; 0x34
    7d1c:	add	r3, r3, #27
    7d20:	mov	r2, r3
    7d24:	movw	r0, #0
    7d28:	movt	r0, #0
    7d2c:	bl	0 <coda_add_error_message>
    7d30:	mvn	r3, #0
    7d34:	b	8444 <read_records+0x2bac>
    7d38:	mrc	15, 0, r3, cr13, cr0, {3}
    7d3c:	ldr	r2, [pc, #1812]	; 8458 <read_records+0x2bc0>
    7d40:	ldr	r3, [r3, r2]
    7d44:	add	r3, r3, #236	; 0xec
    7d48:	ldr	r0, [r3]
    7d4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7d50:	ldr	r1, [r3, #4]
    7d54:	sub	r3, fp, #1024	; 0x400
    7d58:	sub	r3, r3, #4
    7d5c:	ldrd	r2, [r3, #-8]
    7d60:	mov	r3, r2
    7d64:	mov	r2, r1
    7d68:	mov	r1, #0
    7d6c:	bl	0 <coda_mem_int32_new>
    7d70:	str	r0, [fp, #-16]
    7d74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7d78:	ldr	r0, [r3, #36]	; 0x24
    7d7c:	mov	r3, #0
    7d80:	ldr	r2, [fp, #-16]
    7d84:	movw	r1, #0
    7d88:	movt	r1, #0
    7d8c:	bl	0 <coda_mem_record_add_field>
    7d90:	ldr	r3, [fp, #-8]
    7d94:	cmp	r3, #43	; 0x2b
    7d98:	ble	7dc4 <read_records+0x252c>
    7d9c:	sub	r3, fp, #1016	; 0x3f8
    7da0:	add	r3, r3, #36	; 0x24
    7da4:	mov	r2, #8
    7da8:	movw	r1, #0
    7dac:	movt	r1, #0
    7db0:	mov	r0, r3
    7db4:	bl	0 <memcmp>
    7db8:	mov	r3, r0
    7dbc:	cmp	r3, #0
    7dc0:	bne	7de0 <read_records+0x2548>
    7dc4:	sub	r3, fp, #1024	; 0x400
    7dc8:	sub	r3, r3, #4
    7dcc:	mov	r1, r3
    7dd0:	mov	r2, #0
    7dd4:	mov	r3, #0
    7dd8:	strd	r2, [r1, #-8]
    7ddc:	b	7e38 <read_records+0x25a0>
    7de0:	sub	r2, fp, #1024	; 0x400
    7de4:	sub	r2, r2, #4
    7de8:	sub	r2, r2, #8
    7dec:	sub	r3, fp, #1016	; 0x3f8
    7df0:	add	r0, r3, #36	; 0x24
    7df4:	mov	r3, #0
    7df8:	mov	r1, #8
    7dfc:	bl	0 <coda_ascii_parse_int64>
    7e00:	mov	r3, r0
    7e04:	cmp	r3, #0
    7e08:	bge	7e38 <read_records+0x25a0>
    7e0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7e10:	ldr	r1, [r3, #48]	; 0x30
    7e14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7e18:	ldr	r3, [r3, #52]	; 0x34
    7e1c:	add	r3, r3, #36	; 0x24
    7e20:	mov	r2, r3
    7e24:	movw	r0, #0
    7e28:	movt	r0, #0
    7e2c:	bl	0 <coda_add_error_message>
    7e30:	mvn	r3, #0
    7e34:	b	8444 <read_records+0x2bac>
    7e38:	mrc	15, 0, r3, cr13, cr0, {3}
    7e3c:	ldr	r2, [pc, #1556]	; 8458 <read_records+0x2bc0>
    7e40:	ldr	r3, [r3, r2]
    7e44:	add	r3, r3, #240	; 0xf0
    7e48:	ldr	r0, [r3]
    7e4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7e50:	ldr	r1, [r3, #4]
    7e54:	sub	r3, fp, #1024	; 0x400
    7e58:	sub	r3, r3, #4
    7e5c:	ldrd	r2, [r3, #-8]
    7e60:	mov	r3, r2
    7e64:	mov	r2, r1
    7e68:	mov	r1, #0
    7e6c:	bl	0 <coda_mem_int32_new>
    7e70:	str	r0, [fp, #-16]
    7e74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7e78:	ldr	r0, [r3, #36]	; 0x24
    7e7c:	mov	r3, #0
    7e80:	ldr	r2, [fp, #-16]
    7e84:	movw	r1, #0
    7e88:	movt	r1, #0
    7e8c:	bl	0 <coda_mem_record_add_field>
    7e90:	ldr	r3, [fp, #-8]
    7e94:	cmp	r3, #52	; 0x34
    7e98:	ble	7ec4 <read_records+0x262c>
    7e9c:	sub	r3, fp, #1016	; 0x3f8
    7ea0:	add	r3, r3, #45	; 0x2d
    7ea4:	mov	r2, #8
    7ea8:	movw	r1, #0
    7eac:	movt	r1, #0
    7eb0:	mov	r0, r3
    7eb4:	bl	0 <memcmp>
    7eb8:	mov	r3, r0
    7ebc:	cmp	r3, #0
    7ec0:	bne	7ee0 <read_records+0x2648>
    7ec4:	sub	r3, fp, #1024	; 0x400
    7ec8:	sub	r3, r3, #4
    7ecc:	mov	r1, r3
    7ed0:	mov	r2, #0
    7ed4:	mov	r3, #0
    7ed8:	strd	r2, [r1, #-8]
    7edc:	b	7f38 <read_records+0x26a0>
    7ee0:	sub	r2, fp, #1024	; 0x400
    7ee4:	sub	r2, r2, #4
    7ee8:	sub	r2, r2, #8
    7eec:	sub	r3, fp, #1016	; 0x3f8
    7ef0:	add	r0, r3, #45	; 0x2d
    7ef4:	mov	r3, #0
    7ef8:	mov	r1, #8
    7efc:	bl	0 <coda_ascii_parse_int64>
    7f00:	mov	r3, r0
    7f04:	cmp	r3, #0
    7f08:	bge	7f38 <read_records+0x26a0>
    7f0c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7f10:	ldr	r1, [r3, #48]	; 0x30
    7f14:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7f18:	ldr	r3, [r3, #52]	; 0x34
    7f1c:	add	r3, r3, #45	; 0x2d
    7f20:	mov	r2, r3
    7f24:	movw	r0, #0
    7f28:	movt	r0, #0
    7f2c:	bl	0 <coda_add_error_message>
    7f30:	mvn	r3, #0
    7f34:	b	8444 <read_records+0x2bac>
    7f38:	mrc	15, 0, r3, cr13, cr0, {3}
    7f3c:	ldr	r2, [pc, #1300]	; 8458 <read_records+0x2bc0>
    7f40:	ldr	r3, [r3, r2]
    7f44:	add	r3, r3, #244	; 0xf4
    7f48:	ldr	r0, [r3]
    7f4c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7f50:	ldr	r1, [r3, #4]
    7f54:	sub	r3, fp, #1024	; 0x400
    7f58:	sub	r3, r3, #4
    7f5c:	ldrd	r2, [r3, #-8]
    7f60:	mov	r3, r2
    7f64:	mov	r2, r1
    7f68:	mov	r1, #0
    7f6c:	bl	0 <coda_mem_int32_new>
    7f70:	str	r0, [fp, #-16]
    7f74:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    7f78:	ldr	r0, [r3, #36]	; 0x24
    7f7c:	mov	r3, #0
    7f80:	ldr	r2, [fp, #-16]
    7f84:	movw	r1, #0
    7f88:	movt	r1, #0
    7f8c:	bl	0 <coda_mem_record_add_field>
    7f90:	ldr	r3, [fp, #-8]
    7f94:	cmp	r3, #61	; 0x3d
    7f98:	ble	7fc4 <read_records+0x272c>
    7f9c:	sub	r3, fp, #1016	; 0x3f8
    7fa0:	add	r3, r3, #54	; 0x36
    7fa4:	mov	r2, #8
    7fa8:	movw	r1, #0
    7fac:	movt	r1, #0
    7fb0:	mov	r0, r3
    7fb4:	bl	0 <memcmp>
    7fb8:	mov	r3, r0
    7fbc:	cmp	r3, #0
    7fc0:	bne	7fe0 <read_records+0x2748>
    7fc4:	sub	r3, fp, #1024	; 0x400
    7fc8:	sub	r3, r3, #4
    7fcc:	mov	r1, r3
    7fd0:	mov	r2, #0
    7fd4:	mov	r3, #0
    7fd8:	strd	r2, [r1, #-8]
    7fdc:	b	8038 <read_records+0x27a0>
    7fe0:	sub	r2, fp, #1024	; 0x400
    7fe4:	sub	r2, r2, #4
    7fe8:	sub	r2, r2, #8
    7fec:	sub	r3, fp, #1016	; 0x3f8
    7ff0:	add	r0, r3, #54	; 0x36
    7ff4:	mov	r3, #0
    7ff8:	mov	r1, #8
    7ffc:	bl	0 <coda_ascii_parse_int64>
    8000:	mov	r3, r0
    8004:	cmp	r3, #0
    8008:	bge	8038 <read_records+0x27a0>
    800c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8010:	ldr	r1, [r3, #48]	; 0x30
    8014:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8018:	ldr	r3, [r3, #52]	; 0x34
    801c:	add	r3, r3, #54	; 0x36
    8020:	mov	r2, r3
    8024:	movw	r0, #0
    8028:	movt	r0, #0
    802c:	bl	0 <coda_add_error_message>
    8030:	mvn	r3, #0
    8034:	b	8444 <read_records+0x2bac>
    8038:	mrc	15, 0, r3, cr13, cr0, {3}
    803c:	ldr	r2, [pc, #1044]	; 8458 <read_records+0x2bc0>
    8040:	ldr	r3, [r3, r2]
    8044:	add	r3, r3, #248	; 0xf8
    8048:	ldr	r0, [r3]
    804c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8050:	ldr	r1, [r3, #4]
    8054:	sub	r3, fp, #1024	; 0x400
    8058:	sub	r3, r3, #4
    805c:	ldrd	r2, [r3, #-8]
    8060:	mov	r3, r2
    8064:	mov	r2, r1
    8068:	mov	r1, #0
    806c:	bl	0 <coda_mem_int32_new>
    8070:	str	r0, [fp, #-16]
    8074:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8078:	ldr	r0, [r3, #36]	; 0x24
    807c:	mov	r3, #0
    8080:	ldr	r2, [fp, #-16]
    8084:	movw	r1, #0
    8088:	movt	r1, #0
    808c:	bl	0 <coda_mem_record_add_field>
    8090:	ldr	r3, [fp, #-8]
    8094:	cmp	r3, #70	; 0x46
    8098:	ble	80c4 <read_records+0x282c>
    809c:	sub	r3, fp, #1016	; 0x3f8
    80a0:	add	r3, r3, #63	; 0x3f
    80a4:	mov	r2, #8
    80a8:	movw	r1, #0
    80ac:	movt	r1, #0
    80b0:	mov	r0, r3
    80b4:	bl	0 <memcmp>
    80b8:	mov	r3, r0
    80bc:	cmp	r3, #0
    80c0:	bne	80e0 <read_records+0x2848>
    80c4:	sub	r3, fp, #1024	; 0x400
    80c8:	sub	r3, r3, #4
    80cc:	mov	r1, r3
    80d0:	mov	r2, #0
    80d4:	mov	r3, #0
    80d8:	strd	r2, [r1, #-8]
    80dc:	b	8138 <read_records+0x28a0>
    80e0:	sub	r2, fp, #1024	; 0x400
    80e4:	sub	r2, r2, #4
    80e8:	sub	r2, r2, #8
    80ec:	sub	r3, fp, #1016	; 0x3f8
    80f0:	add	r0, r3, #63	; 0x3f
    80f4:	mov	r3, #0
    80f8:	mov	r1, #8
    80fc:	bl	0 <coda_ascii_parse_int64>
    8100:	mov	r3, r0
    8104:	cmp	r3, #0
    8108:	bge	8138 <read_records+0x28a0>
    810c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8110:	ldr	r1, [r3, #48]	; 0x30
    8114:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8118:	ldr	r3, [r3, #52]	; 0x34
    811c:	add	r3, r3, #63	; 0x3f
    8120:	mov	r2, r3
    8124:	movw	r0, #0
    8128:	movt	r0, #0
    812c:	bl	0 <coda_add_error_message>
    8130:	mvn	r3, #0
    8134:	b	8444 <read_records+0x2bac>
    8138:	mrc	15, 0, r3, cr13, cr0, {3}
    813c:	ldr	r2, [pc, #788]	; 8458 <read_records+0x2bc0>
    8140:	ldr	r3, [r3, r2]
    8144:	add	r3, r3, #252	; 0xfc
    8148:	ldr	r0, [r3]
    814c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8150:	ldr	r1, [r3, #4]
    8154:	sub	r3, fp, #1024	; 0x400
    8158:	sub	r3, r3, #4
    815c:	ldrd	r2, [r3, #-8]
    8160:	mov	r3, r2
    8164:	mov	r2, r1
    8168:	mov	r1, #0
    816c:	bl	0 <coda_mem_int32_new>
    8170:	str	r0, [fp, #-16]
    8174:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8178:	ldr	r0, [r3, #36]	; 0x24
    817c:	mov	r3, #0
    8180:	ldr	r2, [fp, #-16]
    8184:	movw	r1, #0
    8188:	movt	r1, #0
    818c:	bl	0 <coda_mem_record_add_field>
    8190:	ldr	r3, [fp, #-8]
    8194:	cmp	r3, #79	; 0x4f
    8198:	ble	81c4 <read_records+0x292c>
    819c:	sub	r3, fp, #1016	; 0x3f8
    81a0:	add	r3, r3, #72	; 0x48
    81a4:	mov	r2, #8
    81a8:	movw	r1, #0
    81ac:	movt	r1, #0
    81b0:	mov	r0, r3
    81b4:	bl	0 <memcmp>
    81b8:	mov	r3, r0
    81bc:	cmp	r3, #0
    81c0:	bne	81e0 <read_records+0x2948>
    81c4:	sub	r3, fp, #1024	; 0x400
    81c8:	sub	r3, r3, #4
    81cc:	mov	r1, r3
    81d0:	mov	r2, #0
    81d4:	mov	r3, #0
    81d8:	strd	r2, [r1, #-8]
    81dc:	b	8238 <read_records+0x29a0>
    81e0:	sub	r2, fp, #1024	; 0x400
    81e4:	sub	r2, r2, #4
    81e8:	sub	r2, r2, #8
    81ec:	sub	r3, fp, #1016	; 0x3f8
    81f0:	add	r0, r3, #72	; 0x48
    81f4:	mov	r3, #0
    81f8:	mov	r1, #8
    81fc:	bl	0 <coda_ascii_parse_int64>
    8200:	mov	r3, r0
    8204:	cmp	r3, #0
    8208:	bge	8238 <read_records+0x29a0>
    820c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8210:	ldr	r1, [r3, #48]	; 0x30
    8214:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8218:	ldr	r3, [r3, #52]	; 0x34
    821c:	add	r3, r3, #72	; 0x48
    8220:	mov	r2, r3
    8224:	movw	r0, #0
    8228:	movt	r0, #0
    822c:	bl	0 <coda_add_error_message>
    8230:	mvn	r3, #0
    8234:	b	8444 <read_records+0x2bac>
    8238:	mrc	15, 0, r3, cr13, cr0, {3}
    823c:	ldr	r2, [pc, #532]	; 8458 <read_records+0x2bc0>
    8240:	ldr	r3, [r3, r2]
    8244:	add	r3, r3, #256	; 0x100
    8248:	ldr	r0, [r3]
    824c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8250:	ldr	r1, [r3, #4]
    8254:	sub	r3, fp, #1024	; 0x400
    8258:	sub	r3, r3, #4
    825c:	ldrd	r2, [r3, #-8]
    8260:	mov	r3, r2
    8264:	mov	r2, r1
    8268:	mov	r1, #0
    826c:	bl	0 <coda_mem_int32_new>
    8270:	str	r0, [fp, #-16]
    8274:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8278:	ldr	r0, [r3, #36]	; 0x24
    827c:	mov	r3, #0
    8280:	ldr	r2, [fp, #-16]
    8284:	movw	r1, #0
    8288:	movt	r1, #0
    828c:	bl	0 <coda_mem_record_add_field>
    8290:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8294:	ldr	r0, [r3, #32]
    8298:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    829c:	ldr	r2, [r3, #36]	; 0x24
    82a0:	mov	r3, #0
    82a4:	movw	r1, #0
    82a8:	movt	r1, #0
    82ac:	bl	0 <coda_mem_record_add_field>
    82b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82b4:	mov	r2, #0
    82b8:	str	r2, [r3, #36]	; 0x24
    82bc:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82c0:	ldr	r3, [r3]
    82c4:	mov	r0, r3
    82c8:	bl	0 <ftell>
    82cc:	mov	r2, r0
    82d0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82d4:	str	r2, [r3, #52]	; 0x34
    82d8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82dc:	ldr	r3, [r3, #48]	; 0x30
    82e0:	add	r2, r3, #1
    82e4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82e8:	str	r2, [r3, #48]	; 0x30
    82ec:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    82f0:	ldr	r3, [r3]
    82f4:	sub	r2, fp, #1016	; 0x3f8
    82f8:	mov	r1, r2
    82fc:	mov	r0, r3
    8300:	bl	427c <get_line>
    8304:	str	r0, [fp, #-8]
    8308:	ldr	r3, [fp, #-8]
    830c:	cmp	r3, #0
    8310:	bge	831c <read_records+0x2a84>
    8314:	mvn	r3, #0
    8318:	b	8444 <read_records+0x2bac>
    831c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8320:	ldr	r3, [r3, #24]
    8324:	cmp	r3, #0
    8328:	beq	8354 <read_records+0x2abc>
    832c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8330:	ldr	r2, [r3, #20]
    8334:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8338:	ldr	r3, [r3, #24]
    833c:	mov	r1, r3
    8340:	mov	r0, r2
    8344:	bl	0 <coda_mem_array_add_element>
    8348:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    834c:	mov	r2, #0
    8350:	str	r2, [r3, #24]
    8354:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8358:	ldr	r3, [r3, #32]
    835c:	cmp	r3, #0
    8360:	beq	838c <read_records+0x2af4>
    8364:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8368:	ldr	r2, [r3, #28]
    836c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8370:	ldr	r3, [r3, #32]
    8374:	mov	r1, r3
    8378:	mov	r0, r2
    837c:	bl	0 <coda_mem_array_add_element>
    8380:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8384:	mov	r2, #0
    8388:	str	r2, [r3, #32]
    838c:	sub	r3, fp, #1016	; 0x3f8
    8390:	mov	r2, #3
    8394:	movw	r1, #0
    8398:	movt	r1, #0
    839c:	mov	r0, r3
    83a0:	bl	0 <memcmp>
    83a4:	mov	r3, r0
    83a8:	cmp	r3, #0
    83ac:	bne	5910 <read_records+0x78>
    83b0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83b4:	ldr	r3, [r3, #16]
    83b8:	cmp	r3, #0
    83bc:	beq	8440 <read_records+0x2ba8>
    83c0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83c4:	ldr	r0, [r3, #16]
    83c8:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83cc:	ldr	r2, [r3, #20]
    83d0:	mov	r3, #0
    83d4:	movw	r1, #0
    83d8:	movt	r1, #0
    83dc:	bl	0 <coda_mem_record_add_field>
    83e0:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83e4:	mov	r2, #0
    83e8:	str	r2, [r3, #20]
    83ec:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83f0:	ldr	r0, [r3, #16]
    83f4:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    83f8:	ldr	r2, [r3, #28]
    83fc:	mov	r3, #0
    8400:	movw	r1, #0
    8404:	movt	r1, #0
    8408:	bl	0 <coda_mem_record_add_field>
    840c:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8410:	mov	r2, #0
    8414:	str	r2, [r3, #28]
    8418:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    841c:	ldr	r2, [r3, #12]
    8420:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8424:	ldr	r3, [r3, #16]
    8428:	mov	r1, r3
    842c:	mov	r0, r2
    8430:	bl	0 <coda_mem_array_add_element>
    8434:	ldr	r3, [fp, #-1104]	; 0xfffffbb0
    8438:	mov	r2, #0
    843c:	str	r2, [r3, #16]
    8440:	mov	r3, #0
    8444:	mov	r0, r3
    8448:	sub	sp, fp, #4
    844c:	ldr	fp, [sp]
    8450:	add	sp, sp, #4
    8454:	pop	{pc}		; (ldr pc, [sp], #4)
    8458:	.word	0x00000000

0000845c <read_file>:
    845c:	str	fp, [sp, #-8]!
    8460:	str	lr, [sp, #4]
    8464:	add	fp, sp, #4
    8468:	sub	sp, sp, #72	; 0x48
    846c:	str	r0, [fp, #-72]	; 0xffffffb8
    8470:	mov	r3, #0
    8474:	str	r3, [fp, #-8]
    8478:	sub	r3, fp, #64	; 0x40
    847c:	mov	r0, r3
    8480:	bl	148 <ingest_info_init>
    8484:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8488:	str	r3, [fp, #-60]	; 0xffffffc4
    848c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    8490:	ldr	r3, [r3]
    8494:	movw	r1, #0
    8498:	movt	r1, #0
    849c:	mov	r0, r3
    84a0:	bl	0 <fopen>
    84a4:	mov	r3, r0
    84a8:	str	r3, [fp, #-64]	; 0xffffffc0
    84ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
    84b0:	cmp	r3, #0
    84b4:	bne	84dc <read_file+0x80>
    84b8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    84bc:	ldr	r3, [r3]
    84c0:	mov	r2, r3
    84c4:	movw	r1, #0
    84c8:	movt	r1, #0
    84cc:	mvn	r0, #20
    84d0:	bl	0 <coda_set_error>
    84d4:	mvn	r3, #0
    84d8:	b	8604 <read_file+0x1a8>
    84dc:	mrc	15, 0, r3, cr13, cr0, {3}
    84e0:	ldr	r2, [pc, #304]	; 8618 <read_file+0x1bc>
    84e4:	ldr	r3, [r3, r2]
    84e8:	add	r3, r3, #284	; 0x11c
    84ec:	ldr	r3, [r3]
    84f0:	mov	r1, #0
    84f4:	mov	r0, r3
    84f8:	bl	0 <coda_mem_record_new>
    84fc:	mov	r3, r0
    8500:	str	r3, [fp, #-56]	; 0xffffffc8
    8504:	mrc	15, 0, r3, cr13, cr0, {3}
    8508:	ldr	r2, [pc, #264]	; 8618 <read_file+0x1bc>
    850c:	ldr	r3, [r3, r2]
    8510:	add	r3, r3, #288	; 0x120
    8514:	ldr	r3, [r3]
    8518:	mov	r1, #0
    851c:	mov	r0, r3
    8520:	bl	0 <coda_mem_array_new>
    8524:	mov	r3, r0
    8528:	str	r3, [fp, #-52]	; 0xffffffcc
    852c:	sub	r3, fp, #64	; 0x40
    8530:	mov	r0, r3
    8534:	bl	43cc <read_header>
    8538:	mov	r3, r0
    853c:	cmp	r3, #0
    8540:	beq	8558 <read_file+0xfc>
    8544:	sub	r3, fp, #64	; 0x40
    8548:	mov	r0, r3
    854c:	bl	0 <ingest_info_cleanup>
    8550:	mvn	r3, #0
    8554:	b	8604 <read_file+0x1a8>
    8558:	sub	r3, fp, #64	; 0x40
    855c:	mov	r0, r3
    8560:	bl	5898 <read_records>
    8564:	mov	r3, r0
    8568:	cmp	r3, #0
    856c:	beq	8584 <read_file+0x128>
    8570:	sub	r3, fp, #64	; 0x40
    8574:	mov	r0, r3
    8578:	bl	0 <ingest_info_cleanup>
    857c:	mvn	r3, #0
    8580:	b	8604 <read_file+0x1a8>
    8584:	mrc	15, 0, r3, cr13, cr0, {3}
    8588:	ldr	r2, [pc, #136]	; 8618 <read_file+0x1bc>
    858c:	ldr	r3, [r3, r2]
    8590:	add	r3, r3, #296	; 0x128
    8594:	ldr	r3, [r3]
    8598:	mov	r1, #0
    859c:	mov	r0, r3
    85a0:	bl	0 <coda_mem_record_new>
    85a4:	str	r0, [fp, #-8]
    85a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    85ac:	mov	r3, #0
    85b0:	movw	r1, #0
    85b4:	movt	r1, #0
    85b8:	ldr	r0, [fp, #-8]
    85bc:	bl	0 <coda_mem_record_add_field>
    85c0:	mov	r3, #0
    85c4:	str	r3, [fp, #-56]	; 0xffffffc8
    85c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
    85cc:	mov	r3, #0
    85d0:	movw	r1, #0
    85d4:	movt	r1, #0
    85d8:	ldr	r0, [fp, #-8]
    85dc:	bl	0 <coda_mem_record_add_field>
    85e0:	mov	r3, #0
    85e4:	str	r3, [fp, #-52]	; 0xffffffcc
    85e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    85ec:	ldr	r2, [fp, #-8]
    85f0:	str	r2, [r3, #20]
    85f4:	sub	r3, fp, #64	; 0x40
    85f8:	mov	r0, r3
    85fc:	bl	0 <ingest_info_cleanup>
    8600:	mov	r3, #0
    8604:	mov	r0, r3
    8608:	sub	sp, fp, #4
    860c:	ldr	fp, [sp]
    8610:	add	sp, sp, #4
    8614:	pop	{pc}		; (ldr pc, [sp], #4)
    8618:	.word	0x00000000

0000861c <coda_sp3_reopen>:
    861c:	str	fp, [sp, #-8]!
    8620:	str	lr, [sp, #4]
    8624:	add	fp, sp, #4
    8628:	sub	sp, sp, #24
    862c:	str	r0, [fp, #-16]
    8630:	bl	1f8 <sp3_init>
    8634:	mov	r3, r0
    8638:	cmp	r3, #0
    863c:	beq	8658 <coda_sp3_reopen+0x3c>
    8640:	ldr	r3, [fp, #-16]
    8644:	ldr	r3, [r3]
    8648:	mov	r0, r3
    864c:	bl	0 <coda_close>
    8650:	mvn	r3, #0
    8654:	b	87dc <coda_sp3_reopen+0x1c0>
    8658:	mov	r0, #56	; 0x38
    865c:	bl	0 <malloc>
    8660:	mov	r3, r0
    8664:	str	r3, [fp, #-8]
    8668:	ldr	r3, [fp, #-8]
    866c:	cmp	r3, #0
    8670:	bne	86b0 <coda_sp3_reopen+0x94>
    8674:	movw	r3, #1946	; 0x79a
    8678:	str	r3, [sp]
    867c:	movw	r3, #0
    8680:	movt	r3, #0
    8684:	mov	r2, #56	; 0x38
    8688:	movw	r1, #0
    868c:	movt	r1, #0
    8690:	mvn	r0, #0
    8694:	bl	0 <coda_set_error>
    8698:	ldr	r3, [fp, #-16]
    869c:	ldr	r3, [r3]
    86a0:	mov	r0, r3
    86a4:	bl	0 <coda_close>
    86a8:	mvn	r3, #0
    86ac:	b	87dc <coda_sp3_reopen+0x1c0>
    86b0:	ldr	r3, [fp, #-8]
    86b4:	mov	r2, #0
    86b8:	str	r2, [r3]
    86bc:	ldr	r3, [fp, #-16]
    86c0:	ldr	r3, [r3]
    86c4:	ldrd	r2, [r3, #8]
    86c8:	ldr	r1, [fp, #-8]
    86cc:	strd	r2, [r1, #8]
    86d0:	ldr	r3, [fp, #-8]
    86d4:	mov	r2, #9
    86d8:	str	r2, [r3, #16]
    86dc:	ldr	r3, [fp, #-8]
    86e0:	mov	r2, #0
    86e4:	str	r2, [r3, #20]
    86e8:	ldr	r3, [fp, #-8]
    86ec:	mov	r2, #0
    86f0:	str	r2, [r3, #24]
    86f4:	ldr	r3, [fp, #-8]
    86f8:	mov	r2, #0
    86fc:	str	r2, [r3, #28]
    8700:	ldr	r3, [fp, #-8]
    8704:	mov	r2, #0
    8708:	str	r2, [r3, #32]
    870c:	ldr	r1, [fp, #-8]
    8710:	mov	r2, #0
    8714:	mov	r3, #0
    8718:	strd	r2, [r1, #40]	; 0x28
    871c:	ldr	r3, [fp, #-8]
    8720:	mov	r2, #0
    8724:	str	r2, [r3, #48]	; 0x30
    8728:	ldr	r3, [fp, #-16]
    872c:	ldr	r3, [r3]
    8730:	ldr	r3, [r3]
    8734:	mov	r0, r3
    8738:	bl	0 <strdup>
    873c:	mov	r3, r0
    8740:	mov	r2, r3
    8744:	ldr	r3, [fp, #-8]
    8748:	str	r2, [r3]
    874c:	ldr	r3, [fp, #-8]
    8750:	ldr	r3, [r3]
    8754:	cmp	r3, #0
    8758:	bne	8798 <coda_sp3_reopen+0x17c>
    875c:	movw	r3, #1964	; 0x7ac
    8760:	movw	r2, #0
    8764:	movt	r2, #0
    8768:	movw	r1, #0
    876c:	movt	r1, #0
    8770:	mvn	r0, #0
    8774:	bl	0 <coda_set_error>
    8778:	ldr	r0, [fp, #-8]
    877c:	bl	0 <coda_close>
    8780:	ldr	r3, [fp, #-16]
    8784:	ldr	r3, [r3]
    8788:	mov	r0, r3
    878c:	bl	0 <coda_close>
    8790:	mvn	r3, #0
    8794:	b	87dc <coda_sp3_reopen+0x1c0>
    8798:	ldr	r3, [fp, #-16]
    879c:	ldr	r3, [r3]
    87a0:	mov	r0, r3
    87a4:	bl	0 <coda_close>
    87a8:	ldr	r0, [fp, #-8]
    87ac:	bl	845c <read_file>
    87b0:	mov	r3, r0
    87b4:	cmp	r3, #0
    87b8:	beq	87cc <coda_sp3_reopen+0x1b0>
    87bc:	ldr	r0, [fp, #-8]
    87c0:	bl	0 <coda_close>
    87c4:	mvn	r3, #0
    87c8:	b	87dc <coda_sp3_reopen+0x1c0>
    87cc:	ldr	r3, [fp, #-16]
    87d0:	ldr	r2, [fp, #-8]
    87d4:	str	r2, [r3]
    87d8:	mov	r3, #0
    87dc:	mov	r0, r3
    87e0:	sub	sp, fp, #4
    87e4:	ldr	fp, [sp]
    87e8:	add	sp, sp, #4
    87ec:	pop	{pc}		; (ldr pc, [sp], #4)

000087f0 <coda_sp3_close>:
    87f0:	str	fp, [sp, #-8]!
    87f4:	str	lr, [sp, #4]
    87f8:	add	fp, sp, #4
    87fc:	sub	sp, sp, #8
    8800:	str	r0, [fp, #-8]
    8804:	ldr	r3, [fp, #-8]
    8808:	ldr	r3, [r3, #20]
    880c:	cmp	r3, #0
    8810:	beq	8824 <coda_sp3_close+0x34>
    8814:	ldr	r3, [fp, #-8]
    8818:	ldr	r3, [r3, #20]
    881c:	mov	r0, r3
    8820:	bl	0 <coda_dynamic_type_delete>
    8824:	ldr	r3, [fp, #-8]
    8828:	ldr	r3, [r3]
    882c:	cmp	r3, #0
    8830:	beq	8844 <coda_sp3_close+0x54>
    8834:	ldr	r3, [fp, #-8]
    8838:	ldr	r3, [r3]
    883c:	mov	r0, r3
    8840:	bl	0 <free>
    8844:	ldr	r0, [fp, #-8]
    8848:	bl	0 <free>
    884c:	mov	r3, #0
    8850:	mov	r0, r3
    8854:	sub	sp, fp, #4
    8858:	ldr	fp, [sp]
    885c:	add	sp, sp, #4
    8860:	pop	{pc}		; (ldr pc, [sp], #4)

00008864 <coda_sp3_cursor_set_product>:
    8864:	push	{fp}		; (str fp, [sp, #-4]!)
    8868:	add	fp, sp, #0
    886c:	sub	sp, sp, #12
    8870:	str	r0, [fp, #-8]
    8874:	str	r1, [fp, #-12]
    8878:	ldr	r3, [fp, #-8]
    887c:	ldr	r2, [fp, #-12]
    8880:	str	r2, [r3]
    8884:	ldr	r3, [fp, #-8]
    8888:	mov	r2, #1
    888c:	str	r2, [r3, #4]
    8890:	ldr	r3, [fp, #-12]
    8894:	ldr	r2, [r3, #20]
    8898:	ldr	r3, [fp, #-8]
    889c:	str	r2, [r3, #8]
    88a0:	ldr	r3, [fp, #-8]
    88a4:	mvn	r2, #0
    88a8:	str	r2, [r3, #12]
    88ac:	ldr	r1, [fp, #-8]
    88b0:	mvn	r2, #0
    88b4:	mvn	r3, #0
    88b8:	strd	r2, [r1, #16]
    88bc:	mov	r3, #0
    88c0:	mov	r0, r3
    88c4:	add	sp, fp, #0
    88c8:	pop	{fp}		; (ldr fp, [sp], #4)
    88cc:	bx	lr
