
../compcert-repos/prog2/CMakeFiles/9.dir/Aula09_Filas_de_Prioridade_e_Heaps/priorityqueue.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fp_insere.part.0>:
   0:	push	{r4, r5, r6, r7, r8, lr}
   4:	mov	r5, r0
   8:	mov	r0, r2
   c:	bl	0 <elemento_cria>
  10:	ldr	r3, [r5]
  14:	cmp	r3, #0
  18:	mov	r6, r0
  1c:	ble	94 <fp_insere.part.0+0x94>
  20:	mov	r4, #0
  24:	b	34 <fp_insere.part.0+0x34>
  28:	add	r4, r4, #1
  2c:	cmp	r4, r3
  30:	bge	8c <fp_insere.part.0+0x8c>
  34:	ldr	r3, [r5, #8]
  38:	mov	r1, r6
  3c:	lsl	r7, r4, #2
  40:	ldr	r0, [r3, r4, lsl #2]
  44:	bl	0 <maior_que>
  48:	ldr	r3, [r5]
  4c:	cmp	r0, #0
  50:	bne	28 <fp_insere.part.0+0x28>
  54:	cmp	r4, r3
  58:	add	r2, r3, #1
  5c:	ldr	r0, [r5, #8]
  60:	bgt	7c <fp_insere.part.0+0x7c>
  64:	add	r4, r0, r4, lsl #2
  68:	add	r3, r0, r2, lsl #2
  6c:	ldr	r1, [r3, #-4]!
  70:	cmp	r3, r4
  74:	str	r1, [r3, #4]
  78:	bne	6c <fp_insere.part.0+0x6c>
  7c:	str	r6, [r0, r7]
  80:	mov	r0, #1
  84:	str	r2, [r5]
  88:	pop	{r4, r5, r6, r7, r8, pc}
  8c:	lsl	r7, r4, #2
  90:	b	54 <fp_insere.part.0+0x54>
  94:	mov	r7, #0
  98:	mov	r4, r7
  9c:	b	54 <fp_insere.part.0+0x54>

000000a0 <heap_insere.part.1>:
  a0:	push	{r4, r5, r6, r7, r8, lr}
  a4:	mov	r5, r0
  a8:	mov	r8, r1
  ac:	mov	r0, r3
  b0:	mov	r1, r2
  b4:	bl	0 <elemento_cria>
  b8:	ldr	r2, [r5]
  bc:	cmp	r2, #0
  c0:	movgt	r4, #0
  c4:	mov	r6, r0
  c8:	bgt	e0 <heap_insere.part.1+0x40>
  cc:	b	14c <heap_insere.part.1+0xac>
  d0:	ldr	r2, [r5]
  d4:	add	r4, r4, #1
  d8:	cmp	r4, r2
  dc:	bge	13c <heap_insere.part.1+0x9c>
  e0:	ldr	r3, [r5, #8]
  e4:	mov	r1, r6
  e8:	lsl	r7, r4, #2
  ec:	ldr	r0, [r3, r4, lsl #2]
  f0:	blx	r8
  f4:	cmp	r0, #1
  f8:	bne	d0 <heap_insere.part.1+0x30>
  fc:	cmp	r4, #0
 100:	ldr	r2, [r5]
 104:	ble	144 <heap_insere.part.1+0xa4>
 108:	ldr	ip, [r5, #8]
 10c:	add	r3, r4, #1
 110:	add	r0, ip, #4
 114:	add	r3, ip, r3, lsl #2
 118:	ldr	r1, [r3, #-4]!
 11c:	cmp	r0, r3
 120:	str	r1, [r3, #4]
 124:	bne	118 <heap_insere.part.1+0x78>
 128:	add	r2, r2, #1
 12c:	str	r6, [ip, r7]
 130:	mov	r0, r4
 134:	str	r2, [r5]
 138:	pop	{r4, r5, r6, r7, r8, pc}
 13c:	lsl	r7, r4, #2
 140:	b	108 <heap_insere.part.1+0x68>
 144:	ldr	ip, [r5, #8]
 148:	b	128 <heap_insere.part.1+0x88>
 14c:	mov	r7, #0
 150:	mov	r4, r7
 154:	ldr	ip, [r5, #8]
 158:	b	128 <heap_insere.part.1+0x88>

0000015c <fp_insere>:
 15c:	subs	r3, r0, #0
 160:	beq	180 <fp_insere+0x24>
 164:	ldr	ip, [r3]
 168:	ldr	r3, [r3, #4]
 16c:	cmp	ip, r3
 170:	beq	178 <fp_insere+0x1c>
 174:	b	0 <fp_insere.part.0>
 178:	mov	r0, #0
 17c:	bx	lr
 180:	mvn	r0, #0
 184:	bx	lr

00000188 <fp_remove>:
 188:	cmp	r0, #0
 18c:	bxeq	lr
 190:	ldr	ip, [r0]
 194:	cmp	ip, #0
 198:	beq	1d0 <fp_remove+0x48>
 19c:	ldr	r3, [r0, #8]
 1a0:	push	{lr}		; (str lr, [sp, #-4]!)
 1a4:	addgt	r1, r3, ip, lsl #2
 1a8:	ldr	lr, [r3]
 1ac:	ble	1c0 <fp_remove+0x38>
 1b0:	ldr	r2, [r3, #4]
 1b4:	str	r2, [r3], #4
 1b8:	cmp	r3, r1
 1bc:	bne	1b0 <fp_remove+0x28>
 1c0:	sub	ip, ip, #1
 1c4:	str	ip, [r0]
 1c8:	ldr	r0, [lr, #4]
 1cc:	pop	{pc}		; (ldr pc, [sp], #4)
 1d0:	mov	r0, ip
 1d4:	bx	lr

000001d8 <fp_carrega>:
 1d8:	mov	r3, r1
 1dc:	push	{r4, r5, r6, r7, r8, lr}
 1e0:	mov	r4, r0
 1e4:	sub	sp, sp, #264	; 0x108
 1e8:	ldr	r1, [pc, #152]	; 288 <fp_carrega+0xb0>
 1ec:	mov	r0, r3
 1f0:	bl	0 <fopen>
 1f4:	subs	r5, r0, #0
 1f8:	movne	r8, #256	; 0x100
 1fc:	ldrne	r7, [pc, #136]	; 28c <fp_carrega+0xb4>
 200:	beq	27c <fp_carrega+0xa4>
 204:	mov	r0, r5
 208:	bl	0 <feof>
 20c:	add	r2, sp, #4
 210:	mov	r1, r7
 214:	subs	r6, r0, #0
 218:	mov	r0, r5
 21c:	bne	270 <fp_carrega+0x98>
 220:	bl	0 <__isoc99_fscanf>
 224:	mov	r1, r8
 228:	mov	r2, r5
 22c:	add	r0, sp, #8
 230:	bl	0 <fgets>
 234:	add	r0, sp, #8
 238:	bl	0 <strlen>
 23c:	add	r3, sp, #264	; 0x108
 240:	cmp	r4, #0
 244:	add	r1, sp, #8
 248:	add	r3, r3, r0
 24c:	mov	r0, r4
 250:	strb	r6, [r3, #-257]	; 0xfffffeff
 254:	beq	204 <fp_carrega+0x2c>
 258:	ldm	r4, {r2, r3}
 25c:	cmp	r2, r3
 260:	beq	204 <fp_carrega+0x2c>
 264:	ldr	r2, [sp, #4]
 268:	bl	0 <fp_insere.part.0>
 26c:	b	204 <fp_carrega+0x2c>
 270:	bl	0 <fclose>
 274:	add	sp, sp, #264	; 0x108
 278:	pop	{r4, r5, r6, r7, r8, pc}
 27c:	ldr	r0, [pc, #12]	; 290 <fp_carrega+0xb8>
 280:	bl	0 <puts>
 284:	b	274 <fp_carrega+0x9c>
 288:	.word	0x00000000
 28c:	.word	0x00000028
 290:	.word	0x00000004

00000294 <heap_insere>:
 294:	push	{lr}		; (str lr, [sp, #-4]!)
 298:	ldr	ip, [r0, #4]
 29c:	ldr	lr, [r0]
 2a0:	cmp	lr, ip
 2a4:	beq	2b0 <heap_insere+0x1c>
 2a8:	pop	{lr}		; (ldr lr, [sp], #4)
 2ac:	b	a0 <heap_insere.part.1>
 2b0:	mov	r0, #0
 2b4:	pop	{pc}		; (ldr pc, [sp], #4)

000002b8 <heap_remove>:
 2b8:	mov	r0, #0
 2bc:	bx	lr

000002c0 <heap_carrega>:
 2c0:	push	{r4, r5, r6, r7, r8, r9, lr}
 2c4:	mov	r5, r0
 2c8:	sub	sp, sp, #268	; 0x10c
 2cc:	mov	r9, r1
 2d0:	mov	r0, r2
 2d4:	ldr	r1, [pc, #148]	; 370 <heap_carrega+0xb0>
 2d8:	bl	0 <fopen>
 2dc:	subs	r4, r0, #0
 2e0:	movne	r8, #256	; 0x100
 2e4:	ldrne	r7, [pc, #136]	; 374 <heap_carrega+0xb4>
 2e8:	bne	324 <heap_carrega+0x64>
 2ec:	b	364 <heap_carrega+0xa4>
 2f0:	bl	0 <__isoc99_fscanf>
 2f4:	mov	r2, r4
 2f8:	mov	r1, r8
 2fc:	add	r0, sp, #8
 300:	bl	0 <fgets>
 304:	add	r0, sp, #8
 308:	bl	0 <strlen>
 30c:	ldm	r5, {r2, r3}
 310:	cmp	r2, r3
 314:	add	r3, sp, #264	; 0x108
 318:	add	r0, r3, r0
 31c:	strb	r6, [r0, #-257]	; 0xfffffeff
 320:	bne	34c <heap_carrega+0x8c>
 324:	mov	r0, r4
 328:	bl	0 <feof>
 32c:	add	r2, sp, #4
 330:	mov	r1, r7
 334:	subs	r6, r0, #0
 338:	mov	r0, r4
 33c:	beq	2f0 <heap_carrega+0x30>
 340:	bl	0 <fclose>
 344:	add	sp, sp, #268	; 0x10c
 348:	pop	{r4, r5, r6, r7, r8, r9, pc}
 34c:	ldr	r3, [sp, #4]
 350:	add	r2, sp, #8
 354:	mov	r1, r9
 358:	mov	r0, r5
 35c:	bl	a0 <heap_insere.part.1>
 360:	b	324 <heap_carrega+0x64>
 364:	ldr	r0, [pc, #12]	; 378 <heap_carrega+0xb8>
 368:	bl	0 <puts>
 36c:	b	344 <heap_carrega+0x84>
 370:	.word	0x00000000
 374:	.word	0x00000028
 378:	.word	0x00000004

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, r5, r6, lr}
   4:	mov	r0, #42	; 0x2a
   8:	bl	0 <vetor_cria>
   c:	ldr	r5, [pc, #620]	; 280 <main+0x280>
  10:	mov	r4, r0
  14:	ldr	r0, [pc, #616]	; 284 <main+0x284>
  18:	bl	0 <puts>
  1c:	mov	r0, r4
  20:	ldr	r1, [pc, #608]	; 288 <main+0x288>
  24:	bl	1d8 <main+0x1d8>
  28:	ldr	r1, [r5]
  2c:	ldr	r0, [pc, #600]	; 28c <main+0x28c>
  30:	bl	0 <printf>
  34:	mov	r0, r4
  38:	bl	0 <vetor_imprime>
  3c:	ldr	r3, [r4]
  40:	cmp	r3, #42	; 0x2a
  44:	beq	5c <main+0x5c>
  48:	ldr	r0, [pc, #576]	; 290 <main+0x290>
  4c:	bl	0 <puts>
  50:	mov	r6, #1
  54:	mov	r0, r6
  58:	pop	{r4, r5, r6, pc}
  5c:	mov	r0, r4
  60:	bl	188 <main+0x188>
  64:	mov	r1, r0
  68:	ldr	r0, [pc, #548]	; 294 <main+0x294>
  6c:	bl	0 <strcmp>
  70:	subs	r6, r0, #0
  74:	bne	260 <main+0x260>
  78:	mov	r0, r4
  7c:	str	r6, [r5]
  80:	bl	188 <main+0x188>
  84:	ldr	r1, [r5]
  88:	ldr	r0, [pc, #520]	; 298 <main+0x298>
  8c:	bl	0 <printf>
  90:	ldm	r4, {r2, r3}
  94:	str	r6, [r5]
  98:	cmp	r2, r3
  9c:	beq	b0 <main+0xb0>
  a0:	mov	r2, #99	; 0x63
  a4:	ldr	r1, [pc, #496]	; 29c <main+0x29c>
  a8:	mov	r0, r4
  ac:	bl	0 <main>
  b0:	ldr	r1, [r5]
  b4:	ldr	r0, [pc, #484]	; 2a0 <main+0x2a0>
  b8:	bl	0 <printf>
  bc:	mov	r0, r4
  c0:	bl	188 <main+0x188>
  c4:	ldm	r4, {r1, r3}
  c8:	mov	r2, #0
  cc:	str	r2, [r5]
  d0:	cmp	r1, r3
  d4:	beq	e4 <main+0xe4>
  d8:	ldr	r1, [pc, #444]	; 29c <main+0x29c>
  dc:	mov	r0, r4
  e0:	bl	0 <main>
  e4:	ldr	r1, [r5]
  e8:	ldr	r0, [pc, #436]	; 2a4 <main+0x2a4>
  ec:	bl	0 <printf>
  f0:	mov	r0, r4
  f4:	bl	188 <main+0x188>
  f8:	ldr	r2, [r4]
  fc:	ldr	r1, [r4, #4]
 100:	mov	r3, #0
 104:	cmp	r1, r2
 108:	str	r3, [r5]
 10c:	beq	120 <main+0x120>
 110:	mov	r0, r4
 114:	mov	r2, #42	; 0x2a
 118:	ldr	r1, [pc, #380]	; 29c <main+0x29c>
 11c:	bl	0 <main>
 120:	ldr	r1, [r5]
 124:	ldr	r0, [pc, #380]	; 2a8 <main+0x2a8>
 128:	bl	0 <printf>
 12c:	ldr	r0, [pc, #376]	; 2ac <main+0x2ac>
 130:	bl	0 <puts>
 134:	mov	r0, #42	; 0x2a
 138:	bl	0 <vetor_criaHeap>
 13c:	ldr	r2, [pc, #324]	; 288 <main+0x288>
 140:	ldr	r1, [pc, #360]	; 2b0 <main+0x2b0>
 144:	mov	r4, r0
 148:	bl	2c0 <main+0x2c0>
 14c:	ldr	r1, [r5]
 150:	ldr	r0, [pc, #348]	; 2b4 <main+0x2b4>
 154:	bl	0 <printf>
 158:	mov	r0, r4
 15c:	bl	0 <vetor_imprimeHeap>
 160:	ldr	r3, [r4]
 164:	cmp	r3, #42	; 0x2a
 168:	bne	270 <main+0x270>
 16c:	mov	r1, #0
 170:	ldr	r0, [pc, #284]	; 294 <main+0x294>
 174:	bl	0 <strcmp>
 178:	subs	r6, r0, #0
 17c:	bne	260 <main+0x260>
 180:	mov	r1, r6
 184:	ldr	r0, [pc, #300]	; 2b8 <main+0x2b8>
 188:	str	r6, [r5]
 18c:	bl	0 <printf>
 190:	ldm	r4, {r2, r3}
 194:	str	r6, [r5]
 198:	cmp	r2, r3
 19c:	beq	1b4 <main+0x1b4>
 1a0:	mov	r3, #99	; 0x63
 1a4:	ldr	r2, [pc, #240]	; 29c <main+0x29c>
 1a8:	ldr	r1, [pc, #256]	; 2b0 <main+0x2b0>
 1ac:	mov	r0, r4
 1b0:	bl	a0 <main+0xa0>
 1b4:	ldr	r1, [r5]
 1b8:	ldr	r0, [pc, #252]	; 2bc <main+0x2bc>
 1bc:	bl	0 <printf>
 1c0:	ldm	r4, {r1, r2}
 1c4:	mov	r3, #0
 1c8:	str	r3, [r5]
 1cc:	cmp	r1, r2
 1d0:	beq	1e4 <main+0x1e4>
 1d4:	ldr	r2, [pc, #192]	; 29c <main+0x29c>
 1d8:	ldr	r1, [pc, #208]	; 2b0 <main+0x2b0>
 1dc:	mov	r0, r4
 1e0:	bl	a0 <main+0xa0>
 1e4:	ldr	r1, [r5]
 1e8:	ldr	r0, [pc, #208]	; 2c0 <main+0x2c0>
 1ec:	bl	0 <printf>
 1f0:	ldm	r4, {r1, r2}
 1f4:	mov	r3, #0
 1f8:	str	r3, [r5]
 1fc:	cmp	r1, r2
 200:	beq	218 <main+0x218>
 204:	mov	r0, r4
 208:	mov	r3, #42	; 0x2a
 20c:	ldr	r2, [pc, #136]	; 29c <main+0x29c>
 210:	ldr	r1, [pc, #152]	; 2b0 <main+0x2b0>
 214:	bl	a0 <main+0xa0>
 218:	ldr	r1, [r5]
 21c:	ldr	r0, [pc, #132]	; 2a8 <main+0x2a8>
 220:	bl	0 <printf>
 224:	mov	r0, #42	; 0x2a
 228:	bl	0 <vetor_criaHeap>
 22c:	ldr	r2, [pc, #84]	; 288 <main+0x288>
 230:	ldr	r1, [pc, #140]	; 2c4 <main+0x2c4>
 234:	bl	2c0 <main+0x2c0>
 238:	ldr	r1, [r5]
 23c:	ldr	r0, [pc, #112]	; 2b4 <main+0x2b4>
 240:	bl	0 <printf>
 244:	mov	r4, #42	; 0x2a
 248:	mov	r5, #0
 24c:	mov	r0, r5
 250:	bl	0 <puts>
 254:	subs	r4, r4, #1
 258:	bne	24c <main+0x24c>
 25c:	b	54 <main+0x54>
 260:	ldr	r0, [pc, #96]	; 2c8 <main+0x2c8>
 264:	bl	0 <puts>
 268:	mov	r6, #1
 26c:	b	54 <main+0x54>
 270:	ldr	r0, [pc, #84]	; 2cc <main+0x2cc>
 274:	bl	0 <puts>
 278:	mov	r6, #1
 27c:	b	54 <main+0x54>
 280:	.word	0x00000000
 284:	.word	0x0000002c
 288:	.word	0x00000064
 28c:	.word	0x00000070
 290:	.word	0x000000a8
 294:	.word	0x000000d0
 298:	.word	0x00000128
 29c:	.word	0x0000015c
 2a0:	.word	0x0000016c
 2a4:	.word	0x000001b4
 2a8:	.word	0x000001fc
 2ac:	.word	0x00000244
 2b0:	.word	0x00000000
 2b4:	.word	0x0000027c
 2b8:	.word	0x000002dc
 2bc:	.word	0x00000310
 2c0:	.word	0x00000358
 2c4:	.word	0x00000000
 2c8:	.word	0x000000e4
 2cc:	.word	0x000002b4
