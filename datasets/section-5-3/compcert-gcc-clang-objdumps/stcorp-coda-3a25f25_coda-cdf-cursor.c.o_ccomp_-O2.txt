
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #112	; 0x70
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	ldr	r7, [ip, #8]
      2c:	ldr	r9, [ip, #4]
      30:	ldr	r4, [ip]
      34:	mov	r8, r3
      38:	mov	r6, r2
      3c:	mov	r5, r0
      40:	ldr	ip, [r5, #48]	; 0x30
      44:	cmp	ip, #0
      48:	bne	f8 <read_bytes+0xf8>
      4c:	ldr	r0, [r5, #16]
      50:	cmp	r0, #0
      54:	beq	74 <read_bytes+0x74>
      58:	cmp	r0, #1
      5c:	beq	74 <read_bytes+0x74>
      60:	ldr	r0, [pc, #388]	; 1ec <read_bytes+0x1ec>
      64:	ldr	r1, [pc, #380]	; 1e8 <read_bytes+0x1e8>
      68:	mov	r2, #83	; 0x53
      6c:	ldr	r3, [pc, #368]	; 1e4 <read_bytes+0x1e4>
      70:	bl	0 <__assert_fail>
      74:	adds	r0, r6, r4
      78:	adc	r1, r8, r9
      7c:	ldr	r2, [r5, #8]
      80:	ldr	ip, [r5, #12]
      84:	cmp	r1, ip
      88:	bne	98 <read_bytes+0x98>
      8c:	cmp	r0, r2
      90:	bhi	a0 <read_bytes+0xa0>
      94:	b	b4 <read_bytes+0xb4>
      98:	cmp	r1, ip
      9c:	bls	b4 <read_bytes+0xb4>
      a0:	mvn	r0, #300	; 0x12c
      a4:	ldr	r1, [pc, #304]	; 1dc <read_bytes+0x1dc>
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r0, #0
      b0:	b	1b8 <read_bytes+0x1b8>
      b4:	ldr	r0, [r5, #56]	; 0x38
      b8:	mov	r2, r4
      bc:	mov	r3, r6
      c0:	mov	r1, r7
      c4:	bl	0 <pread>
      c8:	cmp	r0, #0
      cc:	bge	1b4 <read_bytes+0x1b4>
      d0:	bl	0 <__errno_location>
      d4:	ldr	r0, [r0]
      d8:	bl	0 <strerror>
      dc:	mvn	r3, #21
      e0:	ldr	r1, [pc, #248]	; 1e0 <read_bytes+0x1e0>
      e4:	mov	r2, r0
      e8:	mov	r0, r3
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	b	1b8 <read_bytes+0x1b8>
      f8:	adds	ip, r6, r4
      fc:	adc	r1, r8, r9
     100:	ldr	r2, [r5, #40]	; 0x28
     104:	ldr	r3, [r5, #44]	; 0x2c
     108:	cmp	r1, r3
     10c:	bne	11c <read_bytes+0x11c>
     110:	cmp	ip, r2
     114:	bhi	124 <read_bytes+0x124>
     118:	b	1a0 <read_bytes+0x1a0>
     11c:	cmp	r1, r3
     120:	bls	1a0 <read_bytes+0x1a0>
     124:	ldr	r3, [r5, #16]
     128:	cmp	r3, #0
     12c:	beq	18c <read_bytes+0x18c>
     130:	cmp	r3, #1
     134:	beq	18c <read_bytes+0x18c>
     138:	add	r2, sp, #64	; 0x40
     13c:	mov	r1, r9
     140:	mov	r0, r4
     144:	bl	0 <coda_str64>
     148:	add	r2, sp, #88	; 0x58
     14c:	mov	r1, r8
     150:	mov	r0, r6
     154:	bl	0 <coda_str64>
     158:	ldr	r0, [r5, #40]	; 0x28
     15c:	ldr	r1, [r5, #44]	; 0x2c
     160:	add	r2, sp, #40	; 0x28
     164:	bl	0 <coda_str64>
     168:	mvn	r0, #300	; 0x12c
     16c:	ldr	r1, [pc, #124]	; 1f0 <read_bytes+0x1f0>
     170:	add	r2, sp, #64	; 0x40
     174:	add	r3, sp, #88	; 0x58
     178:	add	ip, sp, #40	; 0x28
     17c:	str	ip, [sp]
     180:	bl	0 <coda_set_error>
     184:	mvn	r0, #0
     188:	b	1b8 <read_bytes+0x1b8>
     18c:	mvn	r0, #300	; 0x12c
     190:	ldr	r1, [pc, #68]	; 1dc <read_bytes+0x1dc>
     194:	bl	0 <coda_set_error>
     198:	mvn	r0, #0
     19c:	b	1b8 <read_bytes+0x1b8>
     1a0:	ldr	r0, [r5, #48]	; 0x30
     1a4:	add	r1, r0, r6
     1a8:	mov	r2, r4
     1ac:	mov	r0, r7
     1b0:	bl	0 <memcpy>
     1b4:	mov	r0, #0
     1b8:	ldr	r4, [sp, #16]
     1bc:	ldr	r5, [sp, #20]
     1c0:	ldr	r6, [sp, #24]
     1c4:	ldr	r7, [sp, #28]
     1c8:	ldr	r8, [sp, #32]
     1cc:	ldr	r9, [sp, #36]	; 0x24
     1d0:	ldr	lr, [sp, #8]
     1d4:	add	sp, sp, #112	; 0x70
     1d8:	bx	lr
     1dc:	.word	0x0000017d
     1e0:	.word	0x00000050
     1e4:	.word	0x00000254
     1e8:	.word	0x0000006e
     1ec:	.word	0x000001a7
     1f0:	.word	0x000000cd

000001f4 <swap2>:
     1f4:	mov	ip, sp
     1f8:	sub	sp, sp, #8
     1fc:	str	ip, [sp]
     200:	str	lr, [sp, #4]
     204:	ldrb	ip, [r0]
     208:	ldrb	r1, [r0, #1]
     20c:	eor	r1, ip, r1
     210:	strb	r1, [r0]
     214:	ldrb	r2, [r0, #1]
     218:	eor	r1, r1, r2
     21c:	strb	r1, [r0, #1]
     220:	ldrb	r3, [r0]
     224:	eor	r2, r3, r1
     228:	strb	r2, [r0]
     22c:	ldr	lr, [sp, #4]
     230:	add	sp, sp, #8
     234:	bx	lr

00000238 <swap4>:
     238:	mov	ip, sp
     23c:	sub	sp, sp, #8
     240:	str	ip, [sp]
     244:	str	lr, [sp, #4]
     248:	ldrb	r2, [r0]
     24c:	ldrb	r1, [r0, #3]
     250:	eor	r2, r2, r1
     254:	strb	r2, [r0]
     258:	ldrb	r3, [r0, #3]
     25c:	eor	r1, r2, r3
     260:	strb	r1, [r0, #3]
     264:	ldrb	r2, [r0]
     268:	eor	r3, r2, r1
     26c:	strb	r3, [r0]
     270:	ldrb	r3, [r0, #1]
     274:	ldrb	ip, [r0, #2]
     278:	eor	ip, r3, ip
     27c:	strb	ip, [r0, #1]
     280:	ldrb	r1, [r0, #2]
     284:	eor	r1, ip, r1
     288:	strb	r1, [r0, #2]
     28c:	ldrb	r3, [r0, #1]
     290:	eor	r1, r3, r1
     294:	strb	r1, [r0, #1]
     298:	ldr	lr, [sp, #4]
     29c:	add	sp, sp, #8
     2a0:	bx	lr

000002a4 <swap8>:
     2a4:	mov	ip, sp
     2a8:	sub	sp, sp, #8
     2ac:	str	ip, [sp]
     2b0:	str	lr, [sp, #4]
     2b4:	ldrb	r1, [r0]
     2b8:	ldrb	r2, [r0, #7]
     2bc:	eor	r2, r1, r2
     2c0:	strb	r2, [r0]
     2c4:	ldrb	r3, [r0, #7]
     2c8:	eor	r1, r2, r3
     2cc:	strb	r1, [r0, #7]
     2d0:	ldrb	r3, [r0]
     2d4:	eor	r1, r3, r1
     2d8:	strb	r1, [r0]
     2dc:	ldrb	r1, [r0, #1]
     2e0:	ldrb	r2, [r0, #6]
     2e4:	eor	ip, r1, r2
     2e8:	strb	ip, [r0, #1]
     2ec:	ldrb	r1, [r0, #6]
     2f0:	eor	r2, ip, r1
     2f4:	strb	r2, [r0, #6]
     2f8:	ldrb	r1, [r0, #1]
     2fc:	eor	r3, r1, r2
     300:	strb	r3, [r0, #1]
     304:	ldrb	r3, [r0, #2]
     308:	ldrb	r1, [r0, #5]
     30c:	eor	ip, r3, r1
     310:	strb	ip, [r0, #2]
     314:	ldrb	r1, [r0, #5]
     318:	eor	r3, ip, r1
     31c:	strb	r3, [r0, #5]
     320:	ldrb	r2, [r0, #2]
     324:	eor	r1, r2, r3
     328:	strb	r1, [r0, #2]
     32c:	ldrb	r1, [r0, #3]
     330:	ldrb	r2, [r0, #4]
     334:	eor	r1, r1, r2
     338:	strb	r1, [r0, #3]
     33c:	ldrb	ip, [r0, #4]
     340:	eor	r1, r1, ip
     344:	strb	r1, [r0, #4]
     348:	ldrb	r2, [r0, #3]
     34c:	eor	r1, r2, r1
     350:	strb	r1, [r0, #3]
     354:	ldr	lr, [sp, #4]
     358:	add	sp, sp, #8
     35c:	bx	lr

00000360 <coda_cdf_cursor_set_product>:
     360:	mov	ip, sp
     364:	sub	sp, sp, #8
     368:	str	ip, [sp]
     36c:	str	lr, [sp, #4]
     370:	str	r1, [r0]
     374:	mov	r3, #1
     378:	str	r3, [r0, #4]
     37c:	ldr	r2, [r1, #20]
     380:	str	r2, [r0, #8]
     384:	mvn	ip, #0
     388:	str	ip, [r0, #12]
     38c:	mvn	r2, #0
     390:	mvn	r1, #0
     394:	str	r1, [r0, #16]
     398:	str	r2, [r0, #20]
     39c:	mov	r0, #0
     3a0:	ldr	lr, [sp, #4]
     3a4:	add	sp, sp, #8
     3a8:	bx	lr

000003ac <coda_cdf_cursor_goto_array_element>:
     3ac:	mov	ip, sp
     3b0:	sub	sp, sp, #64	; 0x40
     3b4:	str	ip, [sp]
     3b8:	str	lr, [sp, #4]
     3bc:	str	r4, [sp, #8]
     3c0:	str	r5, [sp, #12]
     3c4:	str	r6, [sp, #16]
     3c8:	mov	r5, r2
     3cc:	mov	r6, r1
     3d0:	mov	r4, r0
     3d4:	ldr	r2, [r4, #4]
     3d8:	lsl	r0, r2, #4
     3dc:	add	r1, r4, r0
     3e0:	sub	lr, r1, #4096	; 0x1000
     3e4:	ldr	r3, [lr, #4088]	; 0xff8
     3e8:	ldr	r0, [r3, #4]
     3ec:	add	r1, sp, #24
     3f0:	add	r2, sp, #32
     3f4:	bl	0 <coda_type_get_array_dim>
     3f8:	cmp	r0, #0
     3fc:	beq	408 <coda_cdf_cursor_goto_array_element+0x5c>
     400:	mvn	r0, #0
     404:	b	4fc <coda_cdf_cursor_goto_array_element+0x150>
     408:	ldr	r3, [sp, #24]
     40c:	cmp	r6, r3
     410:	beq	42c <coda_cdf_cursor_goto_array_element+0x80>
     414:	mvn	r0, #105	; 0x69
     418:	ldr	r1, [pc, #248]	; 518 <coda_cdf_cursor_goto_array_element+0x16c>
     41c:	mov	r2, r6
     420:	bl	0 <coda_set_error>
     424:	mvn	r0, #0
     428:	b	4fc <coda_cdf_cursor_goto_array_element+0x150>
     42c:	mov	r1, #0
     430:	mov	ip, #0
     434:	ldr	r2, [sp, #24]
     438:	cmp	ip, r2
     43c:	bge	498 <coda_cdf_cursor_goto_array_element+0xec>
     440:	ldr	r0, [r5, ip, lsl #2]
     444:	cmp	r0, #0
     448:	blt	478 <coda_cdf_cursor_goto_array_element+0xcc>
     44c:	add	r2, sp, #32
     450:	ldr	r3, [r2, ip, lsl #2]
     454:	cmp	r0, r3
     458:	bge	478 <coda_cdf_cursor_goto_array_element+0xcc>
     45c:	cmp	ip, #0
     460:	ble	468 <coda_cdf_cursor_goto_array_element+0xbc>
     464:	mul	r1, r1, r3
     468:	ldr	r0, [r5, ip, lsl #2]
     46c:	add	r1, r1, r0
     470:	add	ip, ip, #1
     474:	b	434 <coda_cdf_cursor_goto_array_element+0x88>
     478:	mvn	r0, #106	; 0x6a
     47c:	ldr	r1, [pc, #144]	; 514 <coda_cdf_cursor_goto_array_element+0x168>
     480:	ldr	r2, [r5, ip, lsl #2]
     484:	add	r3, sp, #32
     488:	ldr	r3, [r3, ip, lsl #2]
     48c:	bl	0 <coda_set_error>
     490:	mvn	r0, #0
     494:	b	4fc <coda_cdf_cursor_goto_array_element+0x150>
     498:	ldr	r2, [r4, #4]
     49c:	lsl	r3, r2, #4
     4a0:	add	r3, r4, r3
     4a4:	sub	lr, r3, #4096	; 0x1000
     4a8:	ldr	ip, [lr, #4088]	; 0xff8
     4ac:	ldr	r0, [ip, #16]
     4b0:	add	ip, r2, #1
     4b4:	str	ip, [r4, #4]
     4b8:	lsl	r2, ip, #4
     4bc:	add	r3, r4, r2
     4c0:	sub	lr, r3, #4096	; 0x1000
     4c4:	str	r0, [lr, #4088]	; 0xff8
     4c8:	ldr	r2, [r4, #4]
     4cc:	lsl	r3, r2, #4
     4d0:	add	ip, r4, r3
     4d4:	sub	lr, ip, #4096	; 0x1000
     4d8:	str	r1, [lr, #4092]	; 0xffc
     4dc:	ldr	ip, [r4, #4]
     4e0:	lsl	r0, ip, #4
     4e4:	add	r2, r4, r0
     4e8:	mvn	r1, #0
     4ec:	mvn	r0, #0
     4f0:	str	r0, [r2]
     4f4:	str	r1, [r2, #4]
     4f8:	mov	r0, #0
     4fc:	ldr	r4, [sp, #8]
     500:	ldr	r5, [sp, #12]
     504:	ldr	r6, [sp, #16]
     508:	ldr	lr, [sp, #4]
     50c:	add	sp, sp, #64	; 0x40
     510:	bx	lr
     514:	.word	0x00000000
     518:	.word	0x00000108

0000051c <coda_cdf_cursor_goto_array_element_by_index>:
     51c:	mov	ip, sp
     520:	sub	sp, sp, #8
     524:	str	ip, [sp]
     528:	str	lr, [sp, #4]
     52c:	mov	r2, r1
     530:	ldr	ip, [pc, #208]	; 608 <coda_cdf_cursor_goto_array_element_by_index+0xec>
     534:	ldr	r3, [ip]
     538:	cmp	r3, #0
     53c:	beq	594 <coda_cdf_cursor_goto_array_element_by_index+0x78>
     540:	ldr	r3, [r0, #4]
     544:	lsl	r1, r3, #4
     548:	add	r3, r0, r1
     54c:	sub	lr, r3, #4096	; 0x1000
     550:	ldr	r1, [lr, #4088]	; 0xff8
     554:	ldr	r3, [r1, #4]
     558:	ldr	r3, [r3, #44]	; 0x2c
     55c:	mov	ip, #1
     560:	cmp	r2, r3
     564:	movge	r1, #1
     568:	movlt	r1, #0
     56c:	cmp	r2, #0
     570:	movlt	r1, ip
     574:	movge	r1, r1
     578:	cmp	r1, #0
     57c:	beq	594 <coda_cdf_cursor_goto_array_element_by_index+0x78>
     580:	mvn	r0, #106	; 0x6a
     584:	ldr	r1, [pc, #120]	; 604 <coda_cdf_cursor_goto_array_element_by_index+0xe8>
     588:	bl	0 <coda_set_error>
     58c:	mvn	r0, #0
     590:	b	5f8 <coda_cdf_cursor_goto_array_element_by_index+0xdc>
     594:	ldr	r3, [r0, #4]
     598:	lsl	r1, r3, #4
     59c:	add	ip, r0, r1
     5a0:	sub	lr, ip, #4096	; 0x1000
     5a4:	ldr	r1, [lr, #4088]	; 0xff8
     5a8:	ldr	ip, [r1, #16]
     5ac:	add	r3, r3, #1
     5b0:	str	r3, [r0, #4]
     5b4:	lsl	r1, r3, #4
     5b8:	add	r3, r0, r1
     5bc:	sub	lr, r3, #4096	; 0x1000
     5c0:	str	ip, [lr, #4088]	; 0xff8
     5c4:	ldr	r1, [r0, #4]
     5c8:	lsl	r1, r1, #4
     5cc:	add	r3, r0, r1
     5d0:	sub	lr, r3, #4096	; 0x1000
     5d4:	str	r2, [lr, #4092]	; 0xffc
     5d8:	ldr	r2, [r0, #4]
     5dc:	lsl	r1, r2, #4
     5e0:	add	ip, r0, r1
     5e4:	mvn	r1, #0
     5e8:	mvn	r0, #0
     5ec:	str	r0, [ip]
     5f0:	str	r1, [ip, #4]
     5f4:	mov	r0, #0
     5f8:	ldr	lr, [sp, #4]
     5fc:	add	sp, sp, #8
     600:	bx	lr
	...

0000060c <coda_cdf_cursor_goto_next_array_element>:
     60c:	mov	ip, sp
     610:	sub	sp, sp, #8
     614:	str	ip, [sp]
     618:	str	lr, [sp, #4]
     61c:	ldr	r3, [pc, #156]	; 6c0 <coda_cdf_cursor_goto_next_array_element+0xb4>
     620:	ldr	r1, [r3]
     624:	cmp	r1, #0
     628:	beq	68c <coda_cdf_cursor_goto_next_array_element+0x80>
     62c:	ldr	r2, [r0, #4]
     630:	lsl	r2, r2, #4
     634:	add	r1, r0, r2
     638:	sub	lr, r1, #4096	; 0x1000
     63c:	ldr	r2, [lr, #4092]	; 0xffc
     640:	add	r2, r2, #1
     644:	sub	lr, r1, #4096	; 0x1000
     648:	ldr	r1, [lr, #4072]	; 0xfe8
     64c:	ldr	ip, [r1, #4]
     650:	ldr	r3, [ip, #44]	; 0x2c
     654:	mov	ip, #1
     658:	cmp	r2, r3
     65c:	movge	r1, #1
     660:	movlt	r1, #0
     664:	cmp	r2, #0
     668:	movlt	r1, ip
     66c:	movge	r1, r1
     670:	cmp	r1, #0
     674:	beq	68c <coda_cdf_cursor_goto_next_array_element+0x80>
     678:	mvn	r0, #106	; 0x6a
     67c:	ldr	r1, [pc, #56]	; 6bc <coda_cdf_cursor_goto_next_array_element+0xb0>
     680:	bl	0 <coda_set_error>
     684:	mvn	r0, #0
     688:	b	6b0 <coda_cdf_cursor_goto_next_array_element+0xa4>
     68c:	ldr	r3, [r0, #4]
     690:	lsl	r3, r3, #4
     694:	add	r0, r0, r3
     698:	sub	lr, r0, #4096	; 0x1000
     69c:	ldr	ip, [lr, #4092]	; 0xffc
     6a0:	add	r2, ip, #1
     6a4:	sub	lr, r0, #4096	; 0x1000
     6a8:	str	r2, [lr, #4092]	; 0xffc
     6ac:	mov	r0, #0
     6b0:	ldr	lr, [sp, #4]
     6b4:	add	sp, sp, #8
     6b8:	bx	lr
	...

000006c4 <coda_cdf_cursor_goto_attributes>:
     6c4:	mov	ip, sp
     6c8:	sub	sp, sp, #16
     6cc:	str	ip, [sp]
     6d0:	str	lr, [sp, #4]
     6d4:	str	r4, [sp, #8]
     6d8:	mov	r4, r0
     6dc:	ldr	r2, [r4, #4]
     6e0:	lsl	r3, r2, #4
     6e4:	add	r3, r4, r3
     6e8:	sub	lr, r3, #4096	; 0x1000
     6ec:	ldr	r1, [lr, #4088]	; 0xff8
     6f0:	add	r3, r2, #1
     6f4:	str	r3, [r4, #4]
     6f8:	ldr	r0, [r1, #8]
     6fc:	cmp	r0, #2
     700:	bne	724 <coda_cdf_cursor_goto_attributes+0x60>
     704:	ldr	ip, [r1, #12]
     708:	cmp	ip, #0
     70c:	beq	724 <coda_cdf_cursor_goto_attributes+0x60>
     710:	lsl	r3, r3, #4
     714:	add	r0, r4, r3
     718:	sub	lr, r0, #4096	; 0x1000
     71c:	str	ip, [lr, #4088]	; 0xff8
     720:	b	740 <coda_cdf_cursor_goto_attributes+0x7c>
     724:	mov	r0, #5
     728:	bl	0 <coda_mem_empty_record>
     72c:	ldr	ip, [r4, #4]
     730:	lsl	r1, ip, #4
     734:	add	ip, r4, r1
     738:	sub	lr, ip, #4096	; 0x1000
     73c:	str	r0, [lr, #4088]	; 0xff8
     740:	ldr	r2, [r4, #4]
     744:	lsl	r1, r2, #4
     748:	add	r3, r4, r1
     74c:	mvn	r1, #0
     750:	sub	lr, r3, #4096	; 0x1000
     754:	str	r1, [lr, #4092]	; 0xffc
     758:	ldr	ip, [r4, #4]
     75c:	lsl	r0, ip, #4
     760:	add	r3, r4, r0
     764:	mvn	r1, #0
     768:	mvn	r0, #0
     76c:	str	r0, [r3]
     770:	str	r1, [r3, #4]
     774:	mov	r0, #0
     778:	ldr	r4, [sp, #8]
     77c:	ldr	lr, [sp, #4]
     780:	add	sp, sp, #16
     784:	bx	lr

00000788 <coda_cdf_cursor_use_base_type_of_special_type>:
     788:	mov	ip, sp
     78c:	sub	sp, sp, #8
     790:	str	ip, [sp]
     794:	str	lr, [sp, #4]
     798:	ldr	ip, [r0, #4]
     79c:	lsl	r1, ip, #4
     7a0:	add	r0, r0, r1
     7a4:	sub	lr, r0, #4096	; 0x1000
     7a8:	ldr	r2, [lr, #4088]	; 0xff8
     7ac:	ldr	r3, [r2, #12]
     7b0:	sub	lr, r0, #4096	; 0x1000
     7b4:	str	r3, [lr, #4088]	; 0xff8
     7b8:	mov	r0, #0
     7bc:	ldr	lr, [sp, #4]
     7c0:	add	sp, sp, #8
     7c4:	bx	lr

000007c8 <coda_cdf_cursor_get_num_elements>:
     7c8:	mov	ip, sp
     7cc:	sub	sp, sp, #8
     7d0:	str	ip, [sp]
     7d4:	str	lr, [sp, #4]
     7d8:	ldr	r3, [r0, #4]
     7dc:	lsl	r2, r3, #4
     7e0:	add	r2, r0, r2
     7e4:	sub	lr, r2, #4096	; 0x1000
     7e8:	ldr	r2, [lr, #4088]	; 0xff8
     7ec:	ldr	r0, [r2, #4]
     7f0:	ldr	r3, [r0, #8]
     7f4:	cmp	r3, #1
     7f8:	bne	808 <coda_cdf_cursor_get_num_elements+0x40>
     7fc:	ldr	ip, [r0, #44]	; 0x2c
     800:	str	ip, [r1]
     804:	b	810 <coda_cdf_cursor_get_num_elements+0x48>
     808:	mov	r0, #1
     80c:	str	r0, [r1]
     810:	mov	r0, #0
     814:	ldr	lr, [sp, #4]
     818:	add	sp, sp, #8
     81c:	bx	lr

00000820 <coda_cdf_cursor_get_string_length>:
     820:	mov	ip, sp
     824:	sub	sp, sp, #8
     828:	str	ip, [sp]
     82c:	str	lr, [sp, #4]
     830:	ldr	ip, [r0, #4]
     834:	lsl	r3, ip, #4
     838:	add	r2, r0, r3
     83c:	sub	lr, r2, #4096	; 0x1000
     840:	ldr	r0, [lr, #4088]	; 0xff8
     844:	ldr	r0, [r0, #4]
     848:	ldr	lr, [sp, #4]
     84c:	add	sp, sp, #8
     850:	b	0 <coda_type_get_string_length>

00000854 <coda_cdf_cursor_get_array_dim>:
     854:	mov	ip, sp
     858:	sub	sp, sp, #8
     85c:	str	ip, [sp]
     860:	str	lr, [sp, #4]
     864:	ldr	r3, [r0, #4]
     868:	lsl	r3, r3, #4
     86c:	add	r0, r0, r3
     870:	sub	lr, r0, #4096	; 0x1000
     874:	ldr	r3, [lr, #4088]	; 0xff8
     878:	ldr	r0, [r3, #4]
     87c:	ldr	lr, [sp, #4]
     880:	add	sp, sp, #8
     884:	b	0 <coda_type_get_array_dim>

00000888 <read_array>:
     888:	mov	ip, sp
     88c:	sub	sp, sp, #56	; 0x38
     890:	str	ip, [sp, #12]
     894:	str	lr, [sp, #16]
     898:	str	r4, [sp, #24]
     89c:	str	r5, [sp, #28]
     8a0:	str	r6, [sp, #32]
     8a4:	str	r7, [sp, #36]	; 0x24
     8a8:	str	r8, [sp, #40]	; 0x28
     8ac:	str	r9, [sp, #44]	; 0x2c
     8b0:	str	sl, [sp, #48]	; 0x30
     8b4:	str	fp, [sp, #52]	; 0x34
     8b8:	mov	r5, r1
     8bc:	mov	r4, r0
     8c0:	ldr	r3, [r4, #4]
     8c4:	lsl	r0, r3, #4
     8c8:	add	r2, r4, r0
     8cc:	sub	lr, r2, #4096	; 0x1000
     8d0:	ldr	r8, [lr, #4088]	; 0xff8
     8d4:	ldr	r3, [r8, #24]
     8d8:	ldr	r2, [r8, #28]
     8dc:	mul	r9, r3, r2
     8e0:	ldr	r2, [r8, #8]
     8e4:	cmp	r2, #2
     8e8:	beq	900 <read_array+0x78>
     8ec:	ldr	r0, [pc, #464]	; ac4 <read_array+0x23c>
     8f0:	ldr	r1, [pc, #472]	; ad0 <read_array+0x248>
     8f4:	mov	r2, #215	; 0xd7
     8f8:	ldr	r3, [pc, #456]	; ac8 <read_array+0x240>
     8fc:	bl	0 <__assert_fail>
     900:	ldr	r0, [r8, #16]
     904:	cmp	r0, #0
     908:	beq	918 <read_array+0x90>
     90c:	ldr	r0, [r0, #4]
     910:	ldr	r7, [r0, #8]
     914:	b	920 <read_array+0x98>
     918:	ldr	ip, [r8, #4]
     91c:	ldr	r7, [ip, #8]
     920:	mov	r6, #0
     924:	ldr	ip, [r8, #20]
     928:	cmp	r6, ip
     92c:	bge	9b4 <read_array+0x12c>
     930:	ldr	r0, [r8, #36]	; 0x24
     934:	add	r3, r0, r6, lsl #3
     938:	ldr	r2, [r3]
     93c:	ldr	r3, [r3, #4]
     940:	cmp	r3, #0
     944:	bge	95c <read_array+0xd4>
     948:	mvn	r0, #199	; 0xc7
     94c:	ldr	r1, [pc, #376]	; acc <read_array+0x244>
     950:	bl	0 <coda_set_error>
     954:	mvn	r0, #0
     958:	b	a94 <read_array+0x20c>
     95c:	ldr	r1, [r8, #40]	; 0x28
     960:	cmp	r1, #0
     964:	bne	99c <read_array+0x114>
     968:	ldr	r1, [r4]
     96c:	ldr	r0, [r1, #52]	; 0x34
     970:	mov	r1, r9
     974:	asr	sl, r1, #31
     978:	mla	fp, r6, r9, r5
     97c:	str	fp, [sp, #8]
     980:	str	sl, [sp, #4]
     984:	str	r1, [sp]
     988:	bl	0 <read_bytes>
     98c:	cmp	r0, #0
     990:	beq	9ac <read_array+0x124>
     994:	mvn	r0, #0
     998:	b	a94 <read_array+0x20c>
     99c:	mla	r0, r6, r9, r5
     9a0:	add	r1, r1, r2
     9a4:	mov	r2, r9
     9a8:	bl	0 <memcpy>
     9ac:	add	r6, r6, #1
     9b0:	b	924 <read_array+0x9c>
     9b4:	cmp	r7, #4
     9b8:	beq	a90 <read_array+0x208>
     9bc:	ldr	r1, [r4]
     9c0:	ldr	r0, [r1, #68]	; 0x44
     9c4:	cmp	r0, #1
     9c8:	beq	a90 <read_array+0x208>
     9cc:	ldr	r3, [r8, #28]
     9d0:	cmp	r3, #4
     9d4:	bcs	a10 <read_array+0x188>
     9d8:	cmp	r3, #1
     9dc:	beq	a90 <read_array+0x208>
     9e0:	cmp	r3, #2
     9e4:	bne	a48 <read_array+0x1c0>
     9e8:	mov	r4, #0
     9ec:	ldr	r1, [r8, #20]
     9f0:	ldr	r0, [r8, #24]
     9f4:	mul	r1, r1, r0
     9f8:	cmp	r4, r1
     9fc:	bge	a90 <read_array+0x208>
     a00:	add	r0, r5, r4, lsl #1
     a04:	bl	1f4 <swap2>
     a08:	add	r4, r4, #1
     a0c:	b	9ec <read_array+0x164>
     a10:	cmp	r3, #4
     a14:	beq	a68 <read_array+0x1e0>
     a18:	cmp	r3, #8
     a1c:	bne	a48 <read_array+0x1c0>
     a20:	mov	r4, #0
     a24:	ldr	ip, [r8, #20]
     a28:	ldr	r0, [r8, #24]
     a2c:	mul	r3, ip, r0
     a30:	cmp	r4, r3
     a34:	bge	a90 <read_array+0x208>
     a38:	add	r0, r5, r4, lsl #3
     a3c:	bl	2a4 <swap8>
     a40:	add	r4, r4, #1
     a44:	b	a24 <read_array+0x19c>
     a48:	ldr	r0, [pc, #112]	; ac0 <read_array+0x238>
     a4c:	ldr	r1, [pc, #124]	; ad0 <read_array+0x248>
     a50:	movw	r2, #278	; 0x116
     a54:	ldr	r3, [pc, #108]	; ac8 <read_array+0x240>
     a58:	bl	0 <__assert_fail>
     a5c:	mov	r0, #1
     a60:	bl	0 <exit>
     a64:	b	a90 <read_array+0x208>
     a68:	mov	r4, #0
     a6c:	ldr	r1, [r8, #20]
     a70:	ldr	ip, [r8, #24]
     a74:	mul	r1, r1, ip
     a78:	cmp	r4, r1
     a7c:	bge	a90 <read_array+0x208>
     a80:	add	r0, r5, r4, lsl #2
     a84:	bl	238 <swap4>
     a88:	add	r4, r4, #1
     a8c:	b	a6c <read_array+0x1e4>
     a90:	mov	r0, #0
     a94:	ldr	r4, [sp, #24]
     a98:	ldr	r5, [sp, #28]
     a9c:	ldr	r6, [sp, #32]
     aa0:	ldr	r7, [sp, #36]	; 0x24
     aa4:	ldr	r8, [sp, #40]	; 0x28
     aa8:	ldr	r9, [sp, #44]	; 0x2c
     aac:	ldr	sl, [sp, #48]	; 0x30
     ab0:	ldr	fp, [sp, #52]	; 0x34
     ab4:	ldr	lr, [sp, #16]
     ab8:	add	sp, sp, #56	; 0x38
     abc:	bx	lr
     ac0:	.word	0x0000017b
     ac4:	.word	0x0000002e
     ac8:	.word	0x0000025f
     acc:	.word	0x0000014d
     ad0:	.word	0x000001f5

00000ad4 <read_partial_array>:
     ad4:	mov	ip, sp
     ad8:	sub	sp, sp, #80	; 0x50
     adc:	str	ip, [sp, #12]
     ae0:	str	lr, [sp, #16]
     ae4:	str	r4, [sp, #48]	; 0x30
     ae8:	str	r5, [sp, #52]	; 0x34
     aec:	str	r6, [sp, #56]	; 0x38
     af0:	str	r7, [sp, #60]	; 0x3c
     af4:	str	r8, [sp, #64]	; 0x40
     af8:	str	r9, [sp, #68]	; 0x44
     afc:	str	sl, [sp, #72]	; 0x48
     b00:	str	fp, [sp, #76]	; 0x4c
     b04:	mov	sl, r3
     b08:	mov	fp, r2
     b0c:	mov	r8, r1
     b10:	str	r0, [sp, #28]
     b14:	ldr	r0, [sp, #28]
     b18:	ldr	r1, [r0, #4]
     b1c:	lsl	r2, r1, #4
     b20:	add	r0, r0, r2
     b24:	sub	lr, r0, #4096	; 0x1000
     b28:	ldr	r9, [lr, #4088]	; 0xff8
     b2c:	ldr	ip, [r9, #24]
     b30:	ldr	r0, [r9, #28]
     b34:	mul	r1, ip, r0
     b38:	str	r1, [sp, #44]	; 0x2c
     b3c:	ldr	r2, [r9, #8]
     b40:	cmp	r2, #2
     b44:	beq	b5c <read_partial_array+0x88>
     b48:	ldr	r0, [pc, #668]	; dec <read_partial_array+0x318>
     b4c:	ldr	r1, [pc, #672]	; df4 <read_partial_array+0x320>
     b50:	mov	r2, #296	; 0x128
     b54:	ldr	r3, [pc, #648]	; de4 <read_partial_array+0x310>
     b58:	bl	0 <__assert_fail>
     b5c:	ldr	r3, [r9, #16]
     b60:	cmp	r3, #0
     b64:	beq	b78 <read_partial_array+0xa4>
     b68:	ldr	ip, [r3, #4]
     b6c:	ldr	r3, [ip, #8]
     b70:	str	r3, [sp, #32]
     b74:	b	b84 <read_partial_array+0xb0>
     b78:	ldr	r1, [r9, #4]
     b7c:	ldr	ip, [r1, #8]
     b80:	str	ip, [sp, #32]
     b84:	ldr	r5, [r9, #24]
     b88:	mov	r0, r8
     b8c:	mov	r1, r5
     b90:	bl	0 <__aeabi_idiv>
     b94:	mov	r4, r0
     b98:	add	r0, r8, fp
     b9c:	mov	r1, r5
     ba0:	bl	0 <__aeabi_idiv>
     ba4:	str	r0, [sp, #40]	; 0x28
     ba8:	mov	r2, #0
     bac:	mov	r7, #0
     bb0:	str	r2, [sp, #36]	; 0x24
     bb4:	ldr	r0, [sp, #40]	; 0x28
     bb8:	cmp	r4, r0
     bbc:	bgt	cf4 <read_partial_array+0x220>
     bc0:	mov	r3, #0
     bc4:	mov	r2, #0
     bc8:	ldr	r5, [sp, #44]	; 0x2c
     bcc:	asr	r6, r5, #31
     bd0:	ldr	ip, [r9, #36]	; 0x24
     bd4:	add	ip, ip, r4, lsl #3
     bd8:	ldr	ip, [ip, #4]
     bdc:	cmp	ip, #0
     be0:	bge	bf8 <read_partial_array+0x124>
     be4:	mvn	r0, #199	; 0xc7
     be8:	ldr	r1, [pc, #512]	; df0 <read_partial_array+0x31c>
     bec:	bl	0 <coda_set_error>
     bf0:	mvn	r0, #0
     bf4:	b	db8 <read_partial_array+0x2e4>
     bf8:	add	r1, r8, fp
     bfc:	add	ip, r4, #1
     c00:	ldr	r0, [r9, #24]
     c04:	mul	ip, ip, r0
     c08:	cmp	r1, ip
     c0c:	bge	c24 <read_partial_array+0x150>
     c10:	mul	ip, r4, r0
     c14:	sub	ip, r1, ip
     c18:	ldr	r1, [r9, #28]
     c1c:	mul	r5, ip, r1
     c20:	asr	r6, r5, #31
     c24:	ldr	r0, [r9, #24]
     c28:	mul	r0, r4, r0
     c2c:	cmp	r8, r0
     c30:	ble	c4c <read_partial_array+0x178>
     c34:	sub	r2, r8, r0
     c38:	ldr	r0, [r9, #28]
     c3c:	mul	r2, r2, r0
     c40:	asr	r3, r2, #31
     c44:	subs	r5, r5, r2
     c48:	sbc	r6, r6, r3
     c4c:	ldr	r1, [r9, #40]	; 0x28
     c50:	cmp	r1, #0
     c54:	bne	ca8 <read_partial_array+0x1d4>
     c58:	ldr	r1, [sp, #28]
     c5c:	ldr	r1, [r1]
     c60:	ldr	ip, [r1, #52]	; 0x34
     c64:	mov	r1, ip
     c68:	ldr	r0, [r9, #36]	; 0x24
     c6c:	add	ip, r0, r4, lsl #3
     c70:	ldr	r0, [ip]
     c74:	ldr	ip, [ip, #4]
     c78:	adds	r2, r0, r2
     c7c:	adc	r3, ip, r3
     c80:	add	r0, sl, r7
     c84:	str	r0, [sp, #8]
     c88:	str	r6, [sp, #4]
     c8c:	str	r5, [sp]
     c90:	mov	r0, r1
     c94:	bl	0 <read_bytes>
     c98:	cmp	r0, #0
     c9c:	beq	cdc <read_partial_array+0x208>
     ca0:	mvn	r0, #0
     ca4:	b	db8 <read_partial_array+0x2e4>
     ca8:	add	ip, sl, r7
     cac:	str	ip, [sp, #24]
     cb0:	ldr	r0, [r9, #36]	; 0x24
     cb4:	add	r0, r0, r4, lsl #3
     cb8:	ldr	ip, [r0]
     cbc:	ldr	r0, [r0, #4]
     cc0:	adds	r2, ip, r2
     cc4:	adc	r3, r0, r3
     cc8:	add	ip, r1, r2
     ccc:	mov	r2, r5
     cd0:	mov	r1, ip
     cd4:	ldr	r0, [sp, #24]
     cd8:	bl	0 <memcpy>
     cdc:	ldr	ip, [sp, #36]	; 0x24
     ce0:	adds	r7, r7, r5
     ce4:	adc	r3, ip, r6
     ce8:	str	r3, [sp, #36]	; 0x24
     cec:	add	r4, r4, #1
     cf0:	b	bb4 <read_partial_array+0xe0>
     cf4:	ldr	r2, [sp, #32]
     cf8:	cmp	r2, #4
     cfc:	beq	db4 <read_partial_array+0x2e0>
     d00:	ldr	r1, [sp, #28]
     d04:	ldr	r3, [r1]
     d08:	ldr	ip, [r3, #68]	; 0x44
     d0c:	cmp	ip, #1
     d10:	beq	db4 <read_partial_array+0x2e0>
     d14:	ldr	r3, [r9, #28]
     d18:	cmp	r3, #4
     d1c:	bcs	d4c <read_partial_array+0x278>
     d20:	cmp	r3, #1
     d24:	beq	db4 <read_partial_array+0x2e0>
     d28:	cmp	r3, #2
     d2c:	bne	d78 <read_partial_array+0x2a4>
     d30:	mov	r4, #0
     d34:	cmp	r4, fp
     d38:	bge	db4 <read_partial_array+0x2e0>
     d3c:	add	r0, sl, r4, lsl #1
     d40:	bl	1f4 <swap2>
     d44:	add	r4, r4, #1
     d48:	b	d34 <read_partial_array+0x260>
     d4c:	cmp	r3, #4
     d50:	beq	d98 <read_partial_array+0x2c4>
     d54:	cmp	r3, #8
     d58:	bne	d78 <read_partial_array+0x2a4>
     d5c:	mov	r4, #0
     d60:	cmp	r4, fp
     d64:	bge	db4 <read_partial_array+0x2e0>
     d68:	add	r0, sl, r4, lsl #3
     d6c:	bl	2a4 <swap8>
     d70:	add	r4, r4, #1
     d74:	b	d60 <read_partial_array+0x28c>
     d78:	ldr	r0, [pc, #104]	; de8 <read_partial_array+0x314>
     d7c:	ldr	r1, [pc, #112]	; df4 <read_partial_array+0x320>
     d80:	movw	r2, #379	; 0x17b
     d84:	ldr	r3, [pc, #88]	; de4 <read_partial_array+0x310>
     d88:	bl	0 <__assert_fail>
     d8c:	mov	r0, #1
     d90:	bl	0 <exit>
     d94:	b	db4 <read_partial_array+0x2e0>
     d98:	mov	r4, #0
     d9c:	cmp	r4, fp
     da0:	bge	db4 <read_partial_array+0x2e0>
     da4:	add	r0, sl, r4, lsl #2
     da8:	bl	238 <swap4>
     dac:	add	r4, r4, #1
     db0:	b	d9c <read_partial_array+0x2c8>
     db4:	mov	r0, #0
     db8:	ldr	r4, [sp, #48]	; 0x30
     dbc:	ldr	r5, [sp, #52]	; 0x34
     dc0:	ldr	r6, [sp, #56]	; 0x38
     dc4:	ldr	r7, [sp, #60]	; 0x3c
     dc8:	ldr	r8, [sp, #64]	; 0x40
     dcc:	ldr	r9, [sp, #68]	; 0x44
     dd0:	ldr	sl, [sp, #72]	; 0x48
     dd4:	ldr	fp, [sp, #76]	; 0x4c
     dd8:	ldr	lr, [sp, #16]
     ddc:	add	sp, sp, #80	; 0x50
     de0:	bx	lr
     de4:	.word	0x0000026a
     de8:	.word	0x0000017b
     dec:	.word	0x0000002e
     df0:	.word	0x0000014d
     df4:	.word	0x000001f5

00000df8 <read_basic_type>:
     df8:	mov	ip, sp
     dfc:	sub	sp, sp, #56	; 0x38
     e00:	str	ip, [sp, #12]
     e04:	str	lr, [sp, #16]
     e08:	str	r4, [sp, #24]
     e0c:	str	r5, [sp, #28]
     e10:	str	r6, [sp, #32]
     e14:	str	r7, [sp, #36]	; 0x24
     e18:	str	r8, [sp, #40]	; 0x28
     e1c:	str	r9, [sp, #44]	; 0x2c
     e20:	str	sl, [sp, #48]	; 0x30
     e24:	mov	r5, r2
     e28:	mov	r4, r1
     e2c:	mov	r7, r0
     e30:	ldr	r1, [r7, #4]
     e34:	lsl	r0, r1, #4
     e38:	add	r0, r7, r0
     e3c:	sub	lr, r0, #4096	; 0x1000
     e40:	ldr	r6, [lr, #4088]	; 0xff8
     e44:	mov	r8, #0
     e48:	ldr	r3, [r6, #8]
     e4c:	cmp	r3, #0
     e50:	bne	e64 <read_basic_type+0x6c>
     e54:	sub	lr, r0, #4096	; 0x1000
     e58:	ldr	r6, [lr, #4072]	; 0xfe8
     e5c:	sub	lr, r0, #4096	; 0x1000
     e60:	ldr	r8, [lr, #4092]	; 0xffc
     e64:	ldr	r2, [r6, #8]
     e68:	cmp	r2, #2
     e6c:	beq	e84 <read_basic_type+0x8c>
     e70:	ldr	r0, [pc, #428]	; 1024 <read_basic_type+0x22c>
     e74:	ldr	r1, [pc, #436]	; 1030 <read_basic_type+0x238>
     e78:	movw	r2, #403	; 0x193
     e7c:	ldr	r3, [pc, #424]	; 102c <read_basic_type+0x234>
     e80:	bl	0 <__assert_fail>
     e84:	ldr	ip, [r6, #16]
     e88:	cmp	ip, #0
     e8c:	beq	e9c <read_basic_type+0xa4>
     e90:	ldr	ip, [ip, #4]
     e94:	ldr	r9, [ip, #8]
     e98:	b	ea4 <read_basic_type+0xac>
     e9c:	ldr	r2, [r6, #4]
     ea0:	ldr	r9, [r2, #8]
     ea4:	ldr	sl, [r6, #24]
     ea8:	mov	r0, r8
     eac:	mov	r1, sl
     eb0:	bl	0 <__aeabi_idiv>
     eb4:	mul	r3, r0, sl
     eb8:	sub	r1, r8, r3
     ebc:	ldr	ip, [r6, #28]
     ec0:	ldr	r2, [r6, #36]	; 0x24
     ec4:	add	r0, r2, r0, lsl #3
     ec8:	ldr	r3, [r0]
     ecc:	ldr	r2, [r0, #4]
     ed0:	cmp	r2, #0
     ed4:	bge	eec <read_basic_type+0xf4>
     ed8:	mvn	r0, #199	; 0xc7
     edc:	ldr	r1, [pc, #324]	; 1028 <read_basic_type+0x230>
     ee0:	bl	0 <coda_set_error>
     ee4:	mvn	r0, #0
     ee8:	b	ff8 <read_basic_type+0x200>
     eec:	mul	r0, r1, ip
     ef0:	asr	r1, r0, #31
     ef4:	adds	lr, r3, r0
     ef8:	adc	r3, r2, r1
     efc:	mov	r2, lr
     f00:	cmp	r5, ip
     f04:	movlt	r1, #1
     f08:	movge	r1, #0
     f0c:	mov	r0, #0
     f10:	cmp	r5, #0
     f14:	movge	r0, r1
     f18:	movlt	r0, r0
     f1c:	cmp	r0, #0
     f20:	movne	ip, r5
     f24:	moveq	ip, ip
     f28:	ldr	r0, [r6, #40]	; 0x28
     f2c:	cmp	r0, #0
     f30:	bne	f60 <read_basic_type+0x168>
     f34:	ldr	r1, [r7]
     f38:	ldr	r0, [r1, #52]	; 0x34
     f3c:	asr	r1, ip, #31
     f40:	str	r4, [sp, #8]
     f44:	str	r1, [sp, #4]
     f48:	str	ip, [sp]
     f4c:	bl	0 <read_bytes>
     f50:	cmp	r0, #0
     f54:	beq	f70 <read_basic_type+0x178>
     f58:	mvn	r0, #0
     f5c:	b	ff8 <read_basic_type+0x200>
     f60:	add	r1, r0, r2
     f64:	mov	r2, ip
     f68:	mov	r0, r4
     f6c:	bl	0 <memcpy>
     f70:	cmp	r9, #4
     f74:	beq	ff4 <read_basic_type+0x1fc>
     f78:	ldr	r0, [r7]
     f7c:	ldr	r3, [r0, #68]	; 0x44
     f80:	cmp	r3, #0
     f84:	bne	ff4 <read_basic_type+0x1fc>
     f88:	ldr	r0, [r6, #28]
     f8c:	cmp	r0, #4
     f90:	bcs	fb0 <read_basic_type+0x1b8>
     f94:	cmp	r0, #1
     f98:	beq	ff4 <read_basic_type+0x1fc>
     f9c:	cmp	r0, #2
     fa0:	bne	fcc <read_basic_type+0x1d4>
     fa4:	mov	r0, r4
     fa8:	bl	1f4 <swap2>
     fac:	b	ff4 <read_basic_type+0x1fc>
     fb0:	cmp	r0, #4
     fb4:	beq	fec <read_basic_type+0x1f4>
     fb8:	cmp	r0, #8
     fbc:	bne	fcc <read_basic_type+0x1d4>
     fc0:	mov	r0, r4
     fc4:	bl	2a4 <swap8>
     fc8:	b	ff4 <read_basic_type+0x1fc>
     fcc:	ldr	r0, [pc, #76]	; 1020 <read_basic_type+0x228>
     fd0:	ldr	r1, [pc, #88]	; 1030 <read_basic_type+0x238>
     fd4:	movw	r2, #462	; 0x1ce
     fd8:	ldr	r3, [pc, #76]	; 102c <read_basic_type+0x234>
     fdc:	bl	0 <__assert_fail>
     fe0:	mov	r0, #1
     fe4:	bl	0 <exit>
     fe8:	b	ff4 <read_basic_type+0x1fc>
     fec:	mov	r0, r4
     ff0:	bl	238 <swap4>
     ff4:	mov	r0, #0
     ff8:	ldr	r4, [sp, #24]
     ffc:	ldr	r5, [sp, #28]
    1000:	ldr	r6, [sp, #32]
    1004:	ldr	r7, [sp, #36]	; 0x24
    1008:	ldr	r8, [sp, #40]	; 0x28
    100c:	ldr	r9, [sp, #44]	; 0x2c
    1010:	ldr	sl, [sp, #48]	; 0x30
    1014:	ldr	lr, [sp, #16]
    1018:	add	sp, sp, #56	; 0x38
    101c:	bx	lr
    1020:	.word	0x0000017b
    1024:	.word	0x0000002e
    1028:	.word	0x0000014d
    102c:	.word	0x0000027d
    1030:	.word	0x000001f5

00001034 <coda_cdf_cursor_read_int8>:
    1034:	mov	ip, sp
    1038:	sub	sp, sp, #8
    103c:	str	ip, [sp]
    1040:	str	lr, [sp, #4]
    1044:	mvn	r2, #0
    1048:	ldr	lr, [sp, #4]
    104c:	add	sp, sp, #8
    1050:	b	df8 <read_basic_type>

00001054 <coda_cdf_cursor_read_uint8>:
    1054:	mov	ip, sp
    1058:	sub	sp, sp, #8
    105c:	str	ip, [sp]
    1060:	str	lr, [sp, #4]
    1064:	mvn	r2, #0
    1068:	ldr	lr, [sp, #4]
    106c:	add	sp, sp, #8
    1070:	b	df8 <read_basic_type>

00001074 <coda_cdf_cursor_read_int16>:
    1074:	mov	ip, sp
    1078:	sub	sp, sp, #8
    107c:	str	ip, [sp]
    1080:	str	lr, [sp, #4]
    1084:	mvn	r2, #0
    1088:	ldr	lr, [sp, #4]
    108c:	add	sp, sp, #8
    1090:	b	df8 <read_basic_type>

00001094 <coda_cdf_cursor_read_uint16>:
    1094:	mov	ip, sp
    1098:	sub	sp, sp, #8
    109c:	str	ip, [sp]
    10a0:	str	lr, [sp, #4]
    10a4:	mvn	r2, #0
    10a8:	ldr	lr, [sp, #4]
    10ac:	add	sp, sp, #8
    10b0:	b	df8 <read_basic_type>

000010b4 <coda_cdf_cursor_read_int32>:
    10b4:	mov	ip, sp
    10b8:	sub	sp, sp, #8
    10bc:	str	ip, [sp]
    10c0:	str	lr, [sp, #4]
    10c4:	mvn	r2, #0
    10c8:	ldr	lr, [sp, #4]
    10cc:	add	sp, sp, #8
    10d0:	b	df8 <read_basic_type>

000010d4 <coda_cdf_cursor_read_uint32>:
    10d4:	mov	ip, sp
    10d8:	sub	sp, sp, #8
    10dc:	str	ip, [sp]
    10e0:	str	lr, [sp, #4]
    10e4:	mvn	r2, #0
    10e8:	ldr	lr, [sp, #4]
    10ec:	add	sp, sp, #8
    10f0:	b	df8 <read_basic_type>

000010f4 <coda_cdf_cursor_read_int64>:
    10f4:	mov	ip, sp
    10f8:	sub	sp, sp, #8
    10fc:	str	ip, [sp]
    1100:	str	lr, [sp, #4]
    1104:	mvn	r2, #0
    1108:	ldr	lr, [sp, #4]
    110c:	add	sp, sp, #8
    1110:	b	df8 <read_basic_type>

00001114 <coda_cdf_cursor_read_float>:
    1114:	mov	ip, sp
    1118:	sub	sp, sp, #8
    111c:	str	ip, [sp]
    1120:	str	lr, [sp, #4]
    1124:	mvn	r2, #0
    1128:	ldr	lr, [sp, #4]
    112c:	add	sp, sp, #8
    1130:	b	df8 <read_basic_type>

00001134 <coda_cdf_cursor_read_double>:
    1134:	mov	ip, sp
    1138:	sub	sp, sp, #8
    113c:	str	ip, [sp]
    1140:	str	lr, [sp, #4]
    1144:	mvn	r2, #0
    1148:	ldr	lr, [sp, #4]
    114c:	add	sp, sp, #8
    1150:	b	df8 <read_basic_type>

00001154 <coda_cdf_cursor_read_char>:
    1154:	mov	ip, sp
    1158:	sub	sp, sp, #8
    115c:	str	ip, [sp]
    1160:	str	lr, [sp, #4]
    1164:	mvn	r2, #0
    1168:	ldr	lr, [sp, #4]
    116c:	add	sp, sp, #8
    1170:	b	df8 <read_basic_type>

00001174 <coda_cdf_cursor_read_string>:
    1174:	mov	ip, sp
    1178:	sub	sp, sp, #16
    117c:	str	ip, [sp]
    1180:	str	lr, [sp, #4]
    1184:	str	r4, [sp, #8]
    1188:	str	r5, [sp, #12]
    118c:	mov	r4, r2
    1190:	mov	r5, r1
    1194:	mov	r2, r4
    1198:	mov	r1, r5
    119c:	bl	df8 <read_basic_type>
    11a0:	cmp	r0, #0
    11a4:	beq	11b0 <coda_cdf_cursor_read_string+0x3c>
    11a8:	mvn	r0, #0
    11ac:	b	11c4 <coda_cdf_cursor_read_string+0x50>
    11b0:	add	r3, r5, r4
    11b4:	mov	r1, #0
    11b8:	sub	lr, r3, #4096	; 0x1000
    11bc:	strb	r1, [lr, #4095]	; 0xfff
    11c0:	mov	r0, #0
    11c4:	ldr	r4, [sp, #8]
    11c8:	ldr	r5, [sp, #12]
    11cc:	ldr	lr, [sp, #4]
    11d0:	add	sp, sp, #16
    11d4:	bx	lr

000011d8 <coda_cdf_cursor_read_int8_array>:
    11d8:	mov	ip, sp
    11dc:	sub	sp, sp, #8
    11e0:	str	ip, [sp]
    11e4:	str	lr, [sp, #4]
    11e8:	ldr	lr, [sp, #4]
    11ec:	add	sp, sp, #8
    11f0:	b	888 <read_array>

000011f4 <coda_cdf_cursor_read_uint8_array>:
    11f4:	mov	ip, sp
    11f8:	sub	sp, sp, #8
    11fc:	str	ip, [sp]
    1200:	str	lr, [sp, #4]
    1204:	ldr	lr, [sp, #4]
    1208:	add	sp, sp, #8
    120c:	b	888 <read_array>

00001210 <coda_cdf_cursor_read_int16_array>:
    1210:	mov	ip, sp
    1214:	sub	sp, sp, #8
    1218:	str	ip, [sp]
    121c:	str	lr, [sp, #4]
    1220:	ldr	lr, [sp, #4]
    1224:	add	sp, sp, #8
    1228:	b	888 <read_array>

0000122c <coda_cdf_cursor_read_uint16_array>:
    122c:	mov	ip, sp
    1230:	sub	sp, sp, #8
    1234:	str	ip, [sp]
    1238:	str	lr, [sp, #4]
    123c:	ldr	lr, [sp, #4]
    1240:	add	sp, sp, #8
    1244:	b	888 <read_array>

00001248 <coda_cdf_cursor_read_int32_array>:
    1248:	mov	ip, sp
    124c:	sub	sp, sp, #8
    1250:	str	ip, [sp]
    1254:	str	lr, [sp, #4]
    1258:	ldr	lr, [sp, #4]
    125c:	add	sp, sp, #8
    1260:	b	888 <read_array>

00001264 <coda_cdf_cursor_read_uint32_array>:
    1264:	mov	ip, sp
    1268:	sub	sp, sp, #8
    126c:	str	ip, [sp]
    1270:	str	lr, [sp, #4]
    1274:	ldr	lr, [sp, #4]
    1278:	add	sp, sp, #8
    127c:	b	888 <read_array>

00001280 <coda_cdf_cursor_read_int64_array>:
    1280:	mov	ip, sp
    1284:	sub	sp, sp, #8
    1288:	str	ip, [sp]
    128c:	str	lr, [sp, #4]
    1290:	ldr	lr, [sp, #4]
    1294:	add	sp, sp, #8
    1298:	b	888 <read_array>

0000129c <coda_cdf_cursor_read_float_array>:
    129c:	mov	ip, sp
    12a0:	sub	sp, sp, #8
    12a4:	str	ip, [sp]
    12a8:	str	lr, [sp, #4]
    12ac:	ldr	lr, [sp, #4]
    12b0:	add	sp, sp, #8
    12b4:	b	888 <read_array>

000012b8 <coda_cdf_cursor_read_double_array>:
    12b8:	mov	ip, sp
    12bc:	sub	sp, sp, #8
    12c0:	str	ip, [sp]
    12c4:	str	lr, [sp, #4]
    12c8:	ldr	lr, [sp, #4]
    12cc:	add	sp, sp, #8
    12d0:	b	888 <read_array>

000012d4 <coda_cdf_cursor_read_char_array>:
    12d4:	mov	ip, sp
    12d8:	sub	sp, sp, #8
    12dc:	str	ip, [sp]
    12e0:	str	lr, [sp, #4]
    12e4:	ldr	lr, [sp, #4]
    12e8:	add	sp, sp, #8
    12ec:	b	888 <read_array>

000012f0 <coda_cdf_cursor_read_int8_partial_array>:
    12f0:	mov	ip, sp
    12f4:	sub	sp, sp, #8
    12f8:	str	ip, [sp]
    12fc:	str	lr, [sp, #4]
    1300:	ldr	lr, [sp, #4]
    1304:	add	sp, sp, #8
    1308:	b	ad4 <read_partial_array>

0000130c <coda_cdf_cursor_read_uint8_partial_array>:
    130c:	mov	ip, sp
    1310:	sub	sp, sp, #8
    1314:	str	ip, [sp]
    1318:	str	lr, [sp, #4]
    131c:	ldr	lr, [sp, #4]
    1320:	add	sp, sp, #8
    1324:	b	ad4 <read_partial_array>

00001328 <coda_cdf_cursor_read_int16_partial_array>:
    1328:	mov	ip, sp
    132c:	sub	sp, sp, #8
    1330:	str	ip, [sp]
    1334:	str	lr, [sp, #4]
    1338:	ldr	lr, [sp, #4]
    133c:	add	sp, sp, #8
    1340:	b	ad4 <read_partial_array>

00001344 <coda_cdf_cursor_read_uint16_partial_array>:
    1344:	mov	ip, sp
    1348:	sub	sp, sp, #8
    134c:	str	ip, [sp]
    1350:	str	lr, [sp, #4]
    1354:	ldr	lr, [sp, #4]
    1358:	add	sp, sp, #8
    135c:	b	ad4 <read_partial_array>

00001360 <coda_cdf_cursor_read_int32_partial_array>:
    1360:	mov	ip, sp
    1364:	sub	sp, sp, #8
    1368:	str	ip, [sp]
    136c:	str	lr, [sp, #4]
    1370:	ldr	lr, [sp, #4]
    1374:	add	sp, sp, #8
    1378:	b	ad4 <read_partial_array>

0000137c <coda_cdf_cursor_read_uint32_partial_array>:
    137c:	mov	ip, sp
    1380:	sub	sp, sp, #8
    1384:	str	ip, [sp]
    1388:	str	lr, [sp, #4]
    138c:	ldr	lr, [sp, #4]
    1390:	add	sp, sp, #8
    1394:	b	ad4 <read_partial_array>

00001398 <coda_cdf_cursor_read_int64_partial_array>:
    1398:	mov	ip, sp
    139c:	sub	sp, sp, #8
    13a0:	str	ip, [sp]
    13a4:	str	lr, [sp, #4]
    13a8:	ldr	lr, [sp, #4]
    13ac:	add	sp, sp, #8
    13b0:	b	ad4 <read_partial_array>

000013b4 <coda_cdf_cursor_read_float_partial_array>:
    13b4:	mov	ip, sp
    13b8:	sub	sp, sp, #8
    13bc:	str	ip, [sp]
    13c0:	str	lr, [sp, #4]
    13c4:	ldr	lr, [sp, #4]
    13c8:	add	sp, sp, #8
    13cc:	b	ad4 <read_partial_array>

000013d0 <coda_cdf_cursor_read_double_partial_array>:
    13d0:	mov	ip, sp
    13d4:	sub	sp, sp, #8
    13d8:	str	ip, [sp]
    13dc:	str	lr, [sp, #4]
    13e0:	ldr	lr, [sp, #4]
    13e4:	add	sp, sp, #8
    13e8:	b	ad4 <read_partial_array>

000013ec <coda_cdf_cursor_read_char_partial_array>:
    13ec:	mov	ip, sp
    13f0:	sub	sp, sp, #8
    13f4:	str	ip, [sp]
    13f8:	str	lr, [sp, #4]
    13fc:	ldr	lr, [sp, #4]
    1400:	add	sp, sp, #8
    1404:	b	ad4 <read_partial_array>
