
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/lex.yy.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_lex>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #44	; 0x2c
       c:	str	r0, [r1, #92]	; 0x5c
      10:	mov	lr, r1
      14:	ldr	r0, [r1, #40]	; 0x28
      18:	cmp	r0, #0
      1c:	bne	15c <coda_expression_lex+0x15c>
      20:	mov	r0, #1
      24:	str	r0, [lr, #40]	; 0x28
      28:	ldr	r1, [lr, #44]	; 0x2c
      2c:	cmp	r1, #0
      30:	streq	r0, [lr, #44]	; 0x2c
      34:	ldr	r5, [lr, #4]
      38:	cmp	r5, #0
      3c:	bne	50 <coda_expression_lex+0x50>
      40:	movw	r0, #0
      44:	movt	r0, #0
      48:	ldr	r5, [r0]
      4c:	str	r5, [lr, #4]
      50:	ldr	r0, [lr, #8]
      54:	cmp	r0, #0
      58:	bne	6c <coda_expression_lex+0x6c>
      5c:	movw	r0, #0
      60:	movt	r0, #0
      64:	ldr	r0, [r0]
      68:	str	r0, [lr, #8]
      6c:	ldr	r0, [lr, #20]
      70:	cmp	r0, #0
      74:	beq	d8 <coda_expression_lex+0xd8>
      78:	ldr	r1, [lr, #12]
      7c:	ldr	r2, [r0, r1, lsl #2]
      80:	cmp	r2, #0
      84:	bne	134 <coda_expression_lex+0x134>
      88:	ldr	r2, [lr, #16]
      8c:	sub	r3, r2, #1
      90:	cmp	r1, r3
      94:	bcc	108 <coda_expression_lex+0x108>
      98:	add	r5, r2, #8
      9c:	mov	r4, lr
      a0:	lsl	r1, r5, #2
      a4:	bl	0 <realloc>
      a8:	cmp	r0, #0
      ac:	str	r0, [r4, #20]
      b0:	beq	12ec <coda_expression_lex+0x12ec>
      b4:	ldr	r1, [r4, #16]
      b8:	vmov.i32	q8, #0	; 0x00000000
      bc:	mov	lr, r4
      c0:	add	r0, r0, r1, lsl #2
      c4:	vst1.32	{d16-d17}, [r0]!
      c8:	vst1.32	{d16-d17}, [r0]
      cc:	str	r5, [r4, #16]
      d0:	ldr	r5, [r4, #4]
      d4:	b	108 <coda_expression_lex+0x108>
      d8:	mov	r0, #4
      dc:	mov	r4, lr
      e0:	bl	0 <malloc>
      e4:	cmp	r0, #0
      e8:	str	r0, [r4, #20]
      ec:	beq	12ec <coda_expression_lex+0x12ec>
      f0:	mov	r1, #0
      f4:	mov	lr, r4
      f8:	str	r1, [r0]
      fc:	mov	r0, #1
     100:	str	r1, [r4, #12]
     104:	str	r0, [r4, #16]
     108:	mov	r0, r5
     10c:	mov	r1, #16384	; 0x4000
     110:	mov	r2, lr
     114:	mov	r4, lr
     118:	bl	12f8 <coda_expression__create_buffer>
     11c:	ldr	r1, [r4, #12]
     120:	ldr	r2, [r4, #20]
     124:	mov	lr, r4
     128:	str	r0, [r2, r1, lsl #2]
     12c:	ldr	r0, [r4, #20]
     130:	ldr	r2, [r0, r1, lsl #2]
     134:	ldr	r3, [r2, #16]
     138:	str	r3, [lr, #28]
     13c:	ldr	r2, [r2, #8]
     140:	str	r2, [lr, #80]	; 0x50
     144:	str	r2, [lr, #36]	; 0x24
     148:	ldr	r0, [r0, r1, lsl #2]
     14c:	ldr	r0, [r0]
     150:	str	r0, [lr, #4]
     154:	ldrb	r0, [r2]
     158:	strb	r0, [lr, #24]
     15c:	movw	ip, #0
     160:	movw	r7, #0
     164:	movw	r5, #0
     168:	movw	r9, #0
     16c:	movw	r4, #0
     170:	movw	r8, #0
     174:	movw	sl, #274	; 0x112
     178:	movt	ip, #0
     17c:	movt	r7, #0
     180:	movt	r5, #0
     184:	movt	r9, #0
     188:	movt	r4, #0
     18c:	movt	r8, #0
     190:	ldr	r6, [lr, #36]	; 0x24
     194:	ldrb	r0, [lr, #24]
     198:	strb	r0, [r6]
     19c:	str	r6, [fp, #-32]	; 0xffffffe0
     1a0:	ldr	r0, [lr, #44]	; 0x2c
     1a4:	b	1d8 <coda_expression_lex+0x1d8>
     1a8:	movw	r7, #0
     1ac:	movw	r4, #0
     1b0:	movt	r7, #0
     1b4:	movt	r4, #0
     1b8:	add	r0, r4, r3, lsl #1
     1bc:	movw	r2, #307	; 0x133
     1c0:	add	r6, r6, #1
     1c4:	ldrsh	r0, [r0]
     1c8:	add	r1, r5, r0, lsl #1
     1cc:	ldrh	r1, [r1]
     1d0:	cmp	r1, r2
     1d4:	beq	25c <coda_expression_lex+0x25c>
     1d8:	add	r2, r7, r0, lsl #1
     1dc:	ldrb	r1, [r6]
     1e0:	ldrh	r2, [r2]
     1e4:	ldrb	r1, [ip, r1]
     1e8:	cmp	r2, #0
     1ec:	add	r2, r5, r0, lsl #1
     1f0:	strne	r0, [lr, #64]	; 0x40
     1f4:	strne	r6, [lr, #68]	; 0x44
     1f8:	ldrsh	r2, [r2]
     1fc:	add	r3, r2, r1
     200:	add	r2, r9, r3, lsl #1
     204:	ldrsh	r2, [r2]
     208:	cmp	r0, r2
     20c:	beq	1b8 <coda_expression_lex+0x1b8>
     210:	mov	r2, r1
     214:	b	23c <coda_expression_lex+0x23c>
     218:	add	r1, r5, r0, lsl #1
     21c:	uxth	r7, r0
     220:	ldrsh	r1, [r1]
     224:	uxtab	r3, r1, r2
     228:	add	r1, r9, r3, lsl #1
     22c:	ldrh	r4, [r1]
     230:	uxtb	r1, r2
     234:	cmp	r7, r4
     238:	beq	1a8 <coda_expression_lex+0x1a8>
     23c:	add	r0, r8, r0, lsl #1
     240:	ldrsh	r0, [r0]
     244:	cmp	r0, sl
     248:	blt	218 <coda_expression_lex+0x218>
     24c:	movw	r2, #0
     250:	movt	r2, #0
     254:	ldrb	r2, [r2, r1]
     258:	b	218 <coda_expression_lex+0x218>
     25c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     260:	add	r0, r7, r0, lsl #1
     264:	ldrh	r0, [r0]
     268:	cmp	r0, #0
     26c:	bne	280 <coda_expression_lex+0x280>
     270:	ldr	r0, [lr, #64]	; 0x40
     274:	ldr	r6, [lr, #68]	; 0x44
     278:	add	r0, r7, r0, lsl #1
     27c:	ldrh	r0, [r0]
     280:	sub	r1, r6, r2
     284:	str	r2, [lr, #80]	; 0x50
     288:	sxth	r0, r0
     28c:	str	r1, [lr, #32]
     290:	ldrb	r1, [r6]
     294:	strb	r1, [lr, #24]
     298:	mov	r1, #0
     29c:	strb	r1, [r6]
     2a0:	str	r6, [lr, #36]	; 0x24
     2a4:	cmp	r0, #76	; 0x4c
     2a8:	bhi	12a8 <coda_expression_lex+0x12a8>
     2ac:	add	r1, pc, #0
     2b0:	ldr	pc, [r1, r0, lsl #2]
     2b4:	.word	0x00000aa8
     2b8:	.word	0x00000ff4
     2bc:	.word	0x0000104c
     2c0:	.word	0x0000107c
     2c4:	.word	0x00001088
     2c8:	.word	0x00000fa0
     2cc:	.word	0x00001094
     2d0:	.word	0x00000fac
     2d4:	.word	0x00000fb8
     2d8:	.word	0x000010e4
     2dc:	.word	0x000010a0
     2e0:	.word	0x00000f58
     2e4:	.word	0x000010ac
     2e8:	.word	0x0000112c
     2ec:	.word	0x00000f94
     2f0:	.word	0x000010f0
     2f4:	.word	0x00000f64
     2f8:	.word	0x00001138
     2fc:	.word	0x00000fc4
     300:	.word	0x00001058
     304:	.word	0x00001144
     308:	.word	0x00000fd0
     30c:	.word	0x00000fdc
     310:	.word	0x000010fc
     314:	.word	0x00001150
     318:	.word	0x00000f70
     31c:	.word	0x00000f7c
     320:	.word	0x00001180
     324:	.word	0x00001234
     328:	.word	0x0000118c
     32c:	.word	0x00001198
     330:	.word	0x00001108
     334:	.word	0x000010b8
     338:	.word	0x00001114
     33c:	.word	0x00000f30
     340:	.word	0x00000f0c
     344:	.word	0x0000121c
     348:	.word	0x00000ef4
     34c:	.word	0x00000ee8
     350:	.word	0x000011f8
     354:	.word	0x000011bc
     358:	.word	0x00001064
     35c:	.word	0x00001120
     360:	.word	0x000011c8
     364:	.word	0x00000edc
     368:	.word	0x00000f88
     36c:	.word	0x000011a4
     370:	.word	0x00001228
     374:	.word	0x00000f00
     378:	.word	0x00000fe8
     37c:	.word	0x00001070
     380:	.word	0x0000124c
     384:	.word	0x00001258
     388:	.word	0x00001264
     38c:	.word	0x00000f18
     390:	.word	0x00001240
     394:	.word	0x00001270
     398:	.word	0x00000f3c
     39c:	.word	0x00001204
     3a0:	.word	0x0000115c
     3a4:	.word	0x00001210
     3a8:	.word	0x00001168
     3ac:	.word	0x000011d4
     3b0:	.word	0x000011e0
     3b4:	.word	0x000011b0
     3b8:	.word	0x00001174
     3bc:	.word	0x000011ec
     3c0:	.word	0x00000f24
     3c4:	.word	0x000010c4
     3c8:	.word	0x00001288
     3cc:	.word	0x00000e9c
     3d0:	.word	0x00000ebc
     3d4:	.word	0x00000190
     3d8:	.word	0x00000f48
     3dc:	.word	0x00000e6c
     3e0:	.word	0x000003e8
     3e4:	.word	0x0000127c
     3e8:	ldrb	r0, [lr, #24]
     3ec:	str	r2, [sp, #16]
     3f0:	ldr	r2, [lr, #80]	; 0x50
     3f4:	strb	r0, [r6]
     3f8:	str	r2, [sp, #8]
     3fc:	ldr	r1, [lr, #12]
     400:	ldr	r0, [lr, #20]
     404:	ldr	r3, [r0, r1, lsl #2]
     408:	str	r1, [fp, #-32]	; 0xffffffe0
     40c:	str	r0, [sp, #12]
     410:	ldr	r1, [r3, #44]	; 0x2c
     414:	cmp	r1, #0
     418:	beq	424 <coda_expression_lex+0x424>
     41c:	ldr	r1, [lr, #28]
     420:	b	444 <coda_expression_lex+0x444>
     424:	ldr	r1, [r3, #16]
     428:	str	r1, [lr, #28]
     42c:	ldr	r2, [lr, #4]
     430:	str	r2, [r3]
     434:	ldr	r2, [fp, #-32]	; 0xffffffe0
     438:	ldr	r3, [r0, r2, lsl #2]
     43c:	mov	r0, #1
     440:	str	r0, [r3, #44]	; 0x2c
     444:	ldr	r0, [r3, #4]
     448:	str	r1, [sp, #28]
     44c:	str	r3, [sp, #32]
     450:	ldr	r3, [lr, #80]	; 0x50
     454:	add	r2, r0, r1
     458:	ldr	r1, [lr, #36]	; 0x24
     45c:	str	r3, [fp, #-32]	; 0xffffffe0
     460:	cmp	r1, r2
     464:	bls	abc <coda_expression_lex+0xabc>
     468:	add	r2, r2, #1
     46c:	cmp	r1, r2
     470:	bhi	12b4 <coda_expression_lex+0x12b4>
     474:	ldr	r2, [fp, #-32]	; 0xffffffe0
     478:	str	r1, [sp, #20]
     47c:	sub	r3, r1, r2
     480:	ldr	r1, [sp, #32]
     484:	ldr	r2, [r1, #40]	; 0x28
     488:	cmp	r2, #0
     48c:	beq	5d4 <coda_expression_lex+0x5d4>
     490:	ldr	r2, [sp, #32]
     494:	sub	r1, r3, #1
     498:	str	r3, [sp, #28]
     49c:	str	lr, [sp, #36]	; 0x24
     4a0:	cmp	r1, #1
     4a4:	str	r1, [sp, #24]
     4a8:	blt	680 <coda_expression_lex+0x680>
     4ac:	ldr	ip, [fp, #-32]	; 0xffffffe0
     4b0:	ldr	r2, [sp, #20]
     4b4:	mov	lr, #0
     4b8:	mvn	r1, ip
     4bc:	add	r1, r1, r2
     4c0:	mov	r2, r1
     4c4:	cmp	r1, #16
     4c8:	bcc	5e4 <coda_expression_lex+0x5e4>
     4cc:	ldr	r1, [sp, #20]
     4d0:	sub	r1, r1, #1
     4d4:	cmp	r0, r1
     4d8:	addcc	r1, r0, r3
     4dc:	subcc	r1, r1, #1
     4e0:	cmpcc	ip, r1
     4e4:	bcc	5e4 <coda_expression_lex+0x5e4>
     4e8:	bic	lr, r2, #15
     4ec:	mov	r1, #1
     4f0:	str	r2, [sp, #4]
     4f4:	mov	r3, #0
     4f8:	sub	r4, lr, #16
     4fc:	add	r2, r1, r4, lsr #4
     500:	cmp	r4, #48	; 0x30
     504:	and	r1, r2, #3
     508:	str	r1, [sp, #12]
     50c:	bcc	578 <coda_expression_lex+0x578>
     510:	ldr	r1, [sp, #12]
     514:	mov	r3, #0
     518:	sub	r2, r1, r2
     51c:	add	r4, ip, r3
     520:	mov	r7, #48	; 0x30
     524:	add	ip, r0, r3
     528:	adds	r2, r2, #4
     52c:	add	r3, r3, #64	; 0x40
     530:	mov	r1, r4
     534:	vld1.8	{d16-d17}, [r1], r7
     538:	str	r1, [sp, #32]
     53c:	mov	r1, ip
     540:	vst1.8	{d16-d17}, [r1], r7
     544:	add	r7, r4, #16
     548:	add	r4, r4, #32
     54c:	vld1.8	{d16-d17}, [r7]
     550:	add	r7, ip, #16
     554:	vst1.8	{d16-d17}, [r7]
     558:	add	r7, ip, #32
     55c:	ldr	ip, [fp, #-32]	; 0xffffffe0
     560:	vld1.8	{d16-d17}, [r4]
     564:	ldr	r4, [sp, #32]
     568:	vst1.8	{d16-d17}, [r7]
     56c:	vld1.8	{d16-d17}, [r4]
     570:	vst1.8	{d16-d17}, [r1]
     574:	bne	51c <coda_expression_lex+0x51c>
     578:	ldr	r1, [sp, #12]
     57c:	movw	r4, #0
     580:	movt	r4, #0
     584:	cmp	r1, #0
     588:	beq	5a8 <coda_expression_lex+0x5a8>
     58c:	add	r2, r0, r3
     590:	add	r3, ip, r3
     594:	rsb	r1, r1, #0
     598:	vld1.8	{d16-d17}, [r3]!
     59c:	adds	r1, r1, #1
     5a0:	vst1.8	{d16-d17}, [r2]!
     5a4:	bcc	598 <coda_expression_lex+0x598>
     5a8:	ldr	r2, [sp, #4]
     5ac:	movw	ip, #0
     5b0:	movw	r7, #0
     5b4:	movt	ip, #0
     5b8:	movt	r7, #0
     5bc:	cmp	r2, lr
     5c0:	beq	668 <coda_expression_lex+0x668>
     5c4:	ldr	ip, [fp, #-32]	; 0xffffffe0
     5c8:	add	r0, r0, lr
     5cc:	add	r3, ip, lr
     5d0:	b	5e8 <coda_expression_lex+0x5e8>
     5d4:	ldr	r2, [sp, #16]
     5d8:	cmp	r3, #1
     5dc:	beq	a64 <coda_expression_lex+0xa64>
     5e0:	b	c64 <coda_expression_lex+0xc64>
     5e4:	mov	r3, ip
     5e8:	ldr	r1, [sp, #20]
     5ec:	ands	r2, r2, #3
     5f0:	sub	r1, r1, lr
     5f4:	sub	r1, r1, ip
     5f8:	sub	ip, r1, #2
     5fc:	beq	614 <coda_expression_lex+0x614>
     600:	ldrb	r1, [r3], #1
     604:	subs	r2, r2, #1
     608:	add	lr, lr, #1
     60c:	strb	r1, [r0], #1
     610:	bne	600 <coda_expression_lex+0x600>
     614:	cmp	ip, #3
     618:	movw	ip, #0
     61c:	movt	ip, #0
     620:	bcc	668 <coda_expression_lex+0x668>
     624:	ldr	r1, [fp, #-32]	; 0xffffffe0
     628:	ldr	r2, [sp, #20]
     62c:	add	r1, lr, r1
     630:	sub	r1, r1, r2
     634:	add	r1, r1, #1
     638:	ldrb	r2, [r3]
     63c:	adds	r1, r1, #4
     640:	strb	r2, [r0]
     644:	ldrb	r2, [r3, #1]
     648:	strb	r2, [r0, #1]
     64c:	ldrb	r2, [r3, #2]
     650:	strb	r2, [r0, #2]
     654:	ldrb	r2, [r3, #3]
     658:	add	r3, r3, #4
     65c:	strb	r2, [r0, #3]
     660:	add	r0, r0, #4
     664:	bne	638 <coda_expression_lex+0x638>
     668:	ldr	lr, [sp, #36]	; 0x24
     66c:	ldr	r3, [sp, #28]
     670:	ldr	r1, [lr, #20]
     674:	ldr	r0, [lr, #12]
     678:	ldr	r2, [r1, r0, lsl #2]
     67c:	str	r1, [sp, #12]
     680:	ldr	r0, [r2, #44]	; 0x2c
     684:	cmp	r0, #2
     688:	bne	69c <coda_expression_lex+0x69c>
     68c:	mov	r0, #0
     690:	str	r0, [lr, #28]
     694:	str	r0, [r2, #16]
     698:	b	930 <coda_expression_lex+0x930>
     69c:	ldr	ip, [r2, #12]
     6a0:	mov	r4, r2
     6a4:	sub	r3, ip, r3
     6a8:	cmp	r3, #0
     6ac:	ble	6b8 <coda_expression_lex+0x6b8>
     6b0:	ldr	r0, [sp, #12]
     6b4:	b	74c <coda_expression_lex+0x74c>
     6b8:	ldr	r2, [lr, #36]	; 0x24
     6bc:	ldr	r1, [r4, #20]
     6c0:	cmp	r1, #0
     6c4:	beq	12c0 <coda_expression_lex+0x12c0>
     6c8:	ldr	r0, [r4, #4]
     6cc:	cmp	ip, #0
     6d0:	str	r2, [sp, #32]
     6d4:	ble	6e0 <coda_expression_lex+0x6e0>
     6d8:	lsl	r1, ip, #1
     6dc:	b	6ec <coda_expression_lex+0x6ec>
     6e0:	asr	r1, ip, #31
     6e4:	add	r1, ip, r1, lsr #29
     6e8:	add	r1, ip, r1, asr #3
     6ec:	str	r1, [r4, #12]
     6f0:	add	r1, r1, #2
     6f4:	mov	r7, r4
     6f8:	mov	r4, r0
     6fc:	bl	0 <realloc>
     700:	cmp	r0, #0
     704:	str	r0, [r7, #4]
     708:	beq	12c8 <coda_expression_lex+0x12c8>
     70c:	ldr	r1, [sp, #32]
     710:	ldr	lr, [sp, #36]	; 0x24
     714:	movw	r7, #0
     718:	movt	r7, #0
     71c:	sub	r1, r1, r4
     720:	add	r2, r0, r1
     724:	str	r2, [lr, #36]	; 0x24
     728:	ldr	r0, [lr, #12]
     72c:	ldr	r1, [lr, #20]
     730:	ldr	r4, [r1, r0, lsl #2]
     734:	mov	r0, r1
     738:	ldr	r1, [sp, #28]
     73c:	ldr	ip, [r4, #12]
     740:	sub	r3, ip, r1
     744:	cmp	r3, #1
     748:	blt	6bc <coda_expression_lex+0x6bc>
     74c:	mov	r1, r0
     750:	ldr	r0, [r4, #24]
     754:	cmp	r3, #8192	; 0x2000
     758:	movge	r3, #8192	; 0x2000
     75c:	str	r3, [sp, #32]
     760:	cmp	r0, #0
     764:	beq	80c <coda_expression_lex+0x80c>
     768:	ldr	r0, [fp, #-32]	; 0xffffffe0
     76c:	ldr	r1, [sp, #20]
     770:	mov	r4, #0
     774:	mvn	r0, r0
     778:	add	r0, r0, r1
     77c:	str	r0, [fp, #-32]	; 0xffffffe0
     780:	ldr	r0, [lr, #4]
     784:	bl	0 <getc>
     788:	cmn	r0, #1
     78c:	cmpne	r0, #10
     790:	beq	7c8 <coda_expression_lex+0x7c8>
     794:	ldr	lr, [sp, #36]	; 0x24
     798:	ldr	r3, [sp, #32]
     79c:	ldr	r1, [lr, #12]
     7a0:	ldr	r2, [lr, #20]
     7a4:	ldr	r1, [r2, r1, lsl #2]
     7a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
     7ac:	ldr	r1, [r1, #4]
     7b0:	add	r1, r1, r2
     7b4:	strb	r0, [r1, r4]
     7b8:	add	r4, r4, #1
     7bc:	cmp	r4, r3
     7c0:	blt	780 <coda_expression_lex+0x780>
     7c4:	b	7cc <coda_expression_lex+0x7cc>
     7c8:	ldr	lr, [sp, #36]	; 0x24
     7cc:	cmn	r0, #1
     7d0:	beq	8e8 <coda_expression_lex+0x8e8>
     7d4:	cmp	r0, #10
     7d8:	bne	800 <coda_expression_lex+0x800>
     7dc:	ldr	r0, [lr, #12]
     7e0:	ldr	r1, [lr, #20]
     7e4:	ldr	r0, [r1, r0, lsl #2]
     7e8:	ldr	r1, [sp, #24]
     7ec:	ldr	r0, [r0, #4]
     7f0:	add	r0, r0, r1
     7f4:	mov	r1, #10
     7f8:	strb	r1, [r0, r4]
     7fc:	add	r4, r4, #1
     800:	movw	ip, #0
     804:	movt	ip, #0
     808:	b	904 <coda_expression_lex+0x904>
     80c:	mov	r4, r1
     810:	bl	0 <__errno_location>
     814:	mov	r1, #0
     818:	str	r0, [fp, #-32]	; 0xffffffe0
     81c:	ldr	r2, [sp, #32]
     820:	str	r1, [r0]
     824:	ldr	r0, [sp, #36]	; 0x24
     828:	ldr	r1, [sp, #24]
     82c:	ldr	r3, [r0, #4]
     830:	ldr	r0, [sp, #36]	; 0x24
     834:	ldr	r0, [r0, #12]
     838:	ldr	r0, [r4, r0, lsl #2]
     83c:	ldr	r0, [r0, #4]
     840:	add	r0, r0, r1
     844:	mov	r1, #1
     848:	bl	0 <fread>
     84c:	ldr	lr, [sp, #36]	; 0x24
     850:	movw	ip, #0
     854:	mov	r4, r0
     858:	cmp	r0, #0
     85c:	movt	ip, #0
     860:	str	r0, [lr, #28]
     864:	bne	908 <coda_expression_lex+0x908>
     868:	ldr	r0, [lr, #4]
     86c:	mov	r4, r0
     870:	bl	0 <ferror>
     874:	cmp	r0, #0
     878:	beq	a94 <coda_expression_lex+0xa94>
     87c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     880:	ldr	r0, [r1]
     884:	cmp	r0, #4
     888:	bne	12d4 <coda_expression_lex+0x12d4>
     88c:	mov	r0, #0
     890:	str	r0, [r1]
     894:	mov	r0, r4
     898:	bl	0 <clearerr>
     89c:	ldr	r7, [sp, #36]	; 0x24
     8a0:	ldr	r2, [sp, #32]
     8a4:	ldr	r0, [r7, #12]
     8a8:	ldr	r1, [r7, #20]
     8ac:	ldr	r3, [r7, #4]
     8b0:	ldr	r0, [r1, r0, lsl #2]
     8b4:	ldr	r1, [sp, #24]
     8b8:	ldr	r0, [r0, #4]
     8bc:	add	r0, r0, r1
     8c0:	mov	r1, #1
     8c4:	bl	0 <fread>
     8c8:	mov	lr, r7
     8cc:	str	r0, [r7, #28]
     8d0:	movw	r7, #0
     8d4:	cmp	r0, #0
     8d8:	movt	r7, #0
     8dc:	beq	868 <coda_expression_lex+0x868>
     8e0:	mov	r4, r0
     8e4:	b	a9c <coda_expression_lex+0xa9c>
     8e8:	ldr	r0, [lr, #4]
     8ec:	bl	0 <ferror>
     8f0:	ldr	lr, [sp, #36]	; 0x24
     8f4:	movw	ip, #0
     8f8:	cmp	r0, #0
     8fc:	movt	ip, #0
     900:	bne	12d4 <coda_expression_lex+0x12d4>
     904:	str	r4, [lr, #28]
     908:	ldr	r0, [lr, #12]
     90c:	ldr	r1, [lr, #20]
     910:	cmp	r4, #0
     914:	ldr	r2, [r1, r0, lsl #2]
     918:	mov	r1, r4
     91c:	mov	r0, #0
     920:	str	r4, [r2, #16]
     924:	movw	r4, #0
     928:	movt	r4, #0
     92c:	bne	990 <coda_expression_lex+0x990>
     930:	ldr	r0, [sp, #24]
     934:	cmp	r0, #0
     938:	beq	94c <coda_expression_lex+0x94c>
     93c:	mov	r0, #2
     940:	mov	r1, #0
     944:	str	r0, [r2, #44]	; 0x2c
     948:	b	990 <coda_expression_lex+0x990>
     94c:	ldr	r0, [lr, #4]
     950:	mov	r1, lr
     954:	mov	r4, lr
     958:	mov	r7, ip
     95c:	bl	1444 <coda_expression_restart>
     960:	mov	lr, r4
     964:	movw	r4, #0
     968:	mov	ip, r7
     96c:	movw	r7, #0
     970:	ldr	r0, [lr, #12]
     974:	ldr	r1, [lr, #20]
     978:	ldr	r3, [lr, #28]
     97c:	movt	r7, #0
     980:	movt	r4, #0
     984:	ldr	r2, [r1, r0, lsl #2]
     988:	mov	r1, r3
     98c:	mov	r0, #1
     990:	str	r0, [sp, #32]
     994:	ldr	r0, [sp, #24]
     998:	mov	r3, r1
     99c:	add	r1, r1, r0
     9a0:	ldr	r0, [r2, #12]
     9a4:	cmp	r1, r0
     9a8:	ble	a10 <coda_expression_lex+0xa10>
     9ac:	ldr	r0, [r2, #4]
     9b0:	add	r1, r1, r3, asr #1
     9b4:	mov	r7, ip
     9b8:	mov	r4, r1
     9bc:	bl	0 <realloc>
     9c0:	ldr	lr, [sp, #36]	; 0x24
     9c4:	ldr	r1, [lr, #12]
     9c8:	ldr	r2, [lr, #20]
     9cc:	ldr	r3, [r2, r1, lsl #2]
     9d0:	str	r0, [r3, #4]
     9d4:	ldr	r1, [r2, r1, lsl #2]
     9d8:	ldr	r0, [r1, #4]
     9dc:	cmp	r0, #0
     9e0:	beq	12e0 <coda_expression_lex+0x12e0>
     9e4:	sub	r2, r4, #2
     9e8:	movw	r4, #0
     9ec:	mov	ip, r7
     9f0:	movw	r7, #0
     9f4:	str	r2, [r1, #12]
     9f8:	ldr	r2, [sp, #24]
     9fc:	movt	r7, #0
     a00:	movt	r4, #0
     a04:	ldr	r1, [lr, #28]
     a08:	add	r1, r1, r2
     a0c:	b	a14 <coda_expression_lex+0xa14>
     a10:	ldr	r0, [r2, #4]
     a14:	mov	r2, #0
     a18:	str	r1, [lr, #28]
     a1c:	strb	r2, [r0, r1]
     a20:	ldr	r0, [lr, #12]
     a24:	ldr	r1, [lr, #20]
     a28:	ldr	r3, [lr, #28]
     a2c:	ldr	r0, [r1, r0, lsl #2]
     a30:	ldr	r0, [r0, #4]
     a34:	add	r0, r3, r0
     a38:	strb	r2, [r0, #1]
     a3c:	ldr	r0, [lr, #12]
     a40:	ldr	r1, [lr, #20]
     a44:	ldr	r2, [r1, r0, lsl #2]
     a48:	ldr	r2, [r2, #4]
     a4c:	str	r2, [fp, #-32]	; 0xffffffe0
     a50:	str	r2, [lr, #80]	; 0x50
     a54:	ldr	r2, [sp, #32]
     a58:	cmp	r2, #1
     a5c:	bne	c44 <coda_expression_lex+0xc44>
     a60:	ldr	r2, [sp, #16]
     a64:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a68:	mov	r1, #76	; 0x4c
     a6c:	str	r0, [lr, #36]	; 0x24
     a70:	mov	r0, #0
     a74:	str	r0, [lr, #48]	; 0x30
     a78:	ldr	r0, [lr, #44]	; 0x2c
     a7c:	sub	r0, r0, #1
     a80:	add	r0, r0, r0, lsr #31
     a84:	add	r0, r1, r0, asr #1
     a88:	cmp	r0, #76	; 0x4c
     a8c:	bls	2ac <coda_expression_lex+0x2ac>
     a90:	b	12a8 <coda_expression_lex+0x12a8>
     a94:	ldr	lr, [sp, #36]	; 0x24
     a98:	mov	r4, #0
     a9c:	movw	ip, #0
     aa0:	movt	ip, #0
     aa4:	b	908 <coda_expression_lex+0x908>
     aa8:	ldrb	r0, [lr, #24]
     aac:	strb	r0, [r6]
     ab0:	ldr	r0, [lr, #64]	; 0x40
     ab4:	ldr	r6, [lr, #68]	; 0x44
     ab8:	b	260 <coda_expression_lex+0x260>
     abc:	ldr	r0, [sp, #8]
     ac0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     ac4:	mvn	r0, r0
     ac8:	add	r1, r0, r6
     acc:	add	r6, r2, r1
     ad0:	cmp	r1, #1
     ad4:	str	r6, [lr, #36]	; 0x24
     ad8:	ldr	r0, [lr, #44]	; 0x2c
     adc:	blt	bb4 <coda_expression_lex+0xbb4>
     ae0:	mov	ip, r2
     ae4:	b	b0c <coda_expression_lex+0xb0c>
     ae8:	movw	r7, #0
     aec:	movw	r4, #0
     af0:	movt	r7, #0
     af4:	movt	r4, #0
     af8:	add	r0, r4, r1, lsl #1
     afc:	add	ip, ip, #1
     b00:	cmp	ip, r6
     b04:	ldrsh	r0, [r0]
     b08:	bcs	bac <coda_expression_lex+0xbac>
     b0c:	ldrb	r1, [ip]
     b10:	cmp	r1, #0
     b14:	beq	b28 <coda_expression_lex+0xb28>
     b18:	movw	r2, #0
     b1c:	movt	r2, #0
     b20:	ldrb	r2, [r2, r1]
     b24:	b	b2c <coda_expression_lex+0xb2c>
     b28:	mov	r2, #1
     b2c:	add	r1, r7, r0, lsl #1
     b30:	ldrh	r1, [r1]
     b34:	cmp	r1, #0
     b38:	add	r1, r5, r0, lsl #1
     b3c:	strne	r0, [lr, #64]	; 0x40
     b40:	strne	ip, [lr, #68]	; 0x44
     b44:	ldrsh	r1, [r1]
     b48:	add	r1, r1, r2
     b4c:	add	r3, r9, r1, lsl #1
     b50:	ldrsh	r3, [r3]
     b54:	cmp	r0, r3
     b58:	beq	af8 <coda_expression_lex+0xaf8>
     b5c:	mov	r3, r2
     b60:	b	b88 <coda_expression_lex+0xb88>
     b64:	add	r1, r5, r0, lsl #1
     b68:	uxth	r4, r0
     b6c:	ldrsh	r1, [r1]
     b70:	uxtab	r1, r1, r3
     b74:	add	r2, r9, r1, lsl #1
     b78:	ldrh	r7, [r2]
     b7c:	uxtb	r2, r3
     b80:	cmp	r4, r7
     b84:	beq	ae8 <coda_expression_lex+0xae8>
     b88:	add	r0, r8, r0, lsl #1
     b8c:	movw	r1, #274	; 0x112
     b90:	ldrsh	r0, [r0]
     b94:	cmp	r0, r1
     b98:	blt	b64 <coda_expression_lex+0xb64>
     b9c:	movw	r1, #0
     ba0:	movt	r1, #0
     ba4:	ldrb	r3, [r1, r2]
     ba8:	b	b64 <coda_expression_lex+0xb64>
     bac:	movw	ip, #0
     bb0:	movt	ip, #0
     bb4:	add	r1, r7, r0, lsl #1
     bb8:	ldrh	r1, [r1]
     bbc:	cmp	r1, #0
     bc0:	add	r1, r5, r0, lsl #1
     bc4:	strne	r0, [lr, #64]	; 0x40
     bc8:	strne	r6, [lr, #68]	; 0x44
     bcc:	ldrsh	r1, [r1]
     bd0:	add	r1, r1, #1
     bd4:	add	r2, r9, r1, lsl #1
     bd8:	ldrsh	r2, [r2]
     bdc:	cmp	r0, r2
     be0:	beq	c10 <coda_expression_lex+0xc10>
     be4:	mov	r2, r0
     be8:	add	r1, r8, r2, lsl #1
     bec:	ldrh	r3, [r1]
     bf0:	sxth	r2, r3
     bf4:	add	r1, r5, r2, lsl #1
     bf8:	ldrsh	r1, [r1]
     bfc:	add	r1, r1, #1
     c00:	add	r7, r9, r1, lsl #1
     c04:	ldrh	r7, [r7]
     c08:	cmp	r3, r7
     c0c:	bne	be8 <coda_expression_lex+0xbe8>
     c10:	ldr	r3, [fp, #-32]	; 0xffffffe0
     c14:	movw	r7, #0
     c18:	cmp	r1, #0
     c1c:	movt	r7, #0
     c20:	mov	r2, r3
     c24:	beq	260 <coda_expression_lex+0x260>
     c28:	add	r1, r4, r1, lsl #1
     c2c:	movw	r2, #273	; 0x111
     c30:	ldrh	r1, [r1]
     c34:	cmp	r1, r2
     c38:	mov	r2, r3
     c3c:	beq	260 <coda_expression_lex+0x260>
     c40:	b	e5c <coda_expression_lex+0xe5c>
     c44:	cmp	r2, #0
     c48:	beq	d60 <coda_expression_lex+0xd60>
     c4c:	cmp	r2, #2
     c50:	bne	190 <coda_expression_lex+0x190>
     c54:	ldr	r0, [r1, r0, lsl #2]
     c58:	ldr	r1, [lr, #28]
     c5c:	ldr	r0, [r0, #4]
     c60:	str	r1, [sp, #28]
     c64:	ldr	r1, [sp, #28]
     c68:	add	r6, r0, r1
     c6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
     c70:	str	r6, [lr, #36]	; 0x24
     c74:	ldr	r0, [lr, #44]	; 0x2c
     c78:	cmp	r1, r6
     c7c:	mov	r2, r1
     c80:	bcs	260 <coda_expression_lex+0x260>
     c84:	mov	ip, r1
     c88:	b	cb0 <coda_expression_lex+0xcb0>
     c8c:	movw	r7, #0
     c90:	movw	r4, #0
     c94:	movt	r7, #0
     c98:	movt	r4, #0
     c9c:	add	r0, r4, r1, lsl #1
     ca0:	add	ip, ip, #1
     ca4:	cmp	ip, r6
     ca8:	ldrsh	r0, [r0]
     cac:	beq	d50 <coda_expression_lex+0xd50>
     cb0:	ldrb	r1, [ip]
     cb4:	cmp	r1, #0
     cb8:	beq	ccc <coda_expression_lex+0xccc>
     cbc:	movw	r2, #0
     cc0:	movt	r2, #0
     cc4:	ldrb	r2, [r2, r1]
     cc8:	b	cd0 <coda_expression_lex+0xcd0>
     ccc:	mov	r2, #1
     cd0:	add	r1, r7, r0, lsl #1
     cd4:	ldrh	r1, [r1]
     cd8:	cmp	r1, #0
     cdc:	add	r1, r5, r0, lsl #1
     ce0:	strne	r0, [lr, #64]	; 0x40
     ce4:	strne	ip, [lr, #68]	; 0x44
     ce8:	ldrsh	r1, [r1]
     cec:	add	r1, r1, r2
     cf0:	add	r3, r9, r1, lsl #1
     cf4:	ldrsh	r3, [r3]
     cf8:	cmp	r0, r3
     cfc:	beq	c9c <coda_expression_lex+0xc9c>
     d00:	mov	r3, r2
     d04:	b	d2c <coda_expression_lex+0xd2c>
     d08:	add	r1, r5, r0, lsl #1
     d0c:	uxth	r4, r0
     d10:	ldrsh	r1, [r1]
     d14:	uxtab	r1, r1, r3
     d18:	add	r2, r9, r1, lsl #1
     d1c:	ldrh	r7, [r2]
     d20:	uxtb	r2, r3
     d24:	cmp	r4, r7
     d28:	beq	c8c <coda_expression_lex+0xc8c>
     d2c:	add	r0, r8, r0, lsl #1
     d30:	movw	r1, #274	; 0x112
     d34:	ldrsh	r0, [r0]
     d38:	cmp	r0, r1
     d3c:	blt	d08 <coda_expression_lex+0xd08>
     d40:	movw	r1, #0
     d44:	movt	r1, #0
     d48:	ldrb	r3, [r1, r2]
     d4c:	b	d08 <coda_expression_lex+0xd08>
     d50:	ldr	r2, [fp, #-32]	; 0xffffffe0
     d54:	movw	ip, #0
     d58:	movt	ip, #0
     d5c:	b	260 <coda_expression_lex+0x260>
     d60:	ldr	r0, [sp, #8]
     d64:	mvn	r0, r0
     d68:	add	r1, r0, r6
     d6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     d70:	cmp	r1, #1
     d74:	add	r6, r0, r1
     d78:	str	r6, [lr, #36]	; 0x24
     d7c:	ldr	r0, [lr, #44]	; 0x2c
     d80:	blt	1d8 <coda_expression_lex+0x1d8>
     d84:	ldr	ip, [fp, #-32]	; 0xffffffe0
     d88:	b	db0 <coda_expression_lex+0xdb0>
     d8c:	movw	r7, #0
     d90:	movw	r4, #0
     d94:	movt	r7, #0
     d98:	movt	r4, #0
     d9c:	add	r0, r4, r1, lsl #1
     da0:	add	ip, ip, #1
     da4:	cmp	ip, r6
     da8:	ldrsh	r0, [r0]
     dac:	bcs	e50 <coda_expression_lex+0xe50>
     db0:	ldrb	r1, [ip]
     db4:	cmp	r1, #0
     db8:	beq	dcc <coda_expression_lex+0xdcc>
     dbc:	movw	r2, #0
     dc0:	movt	r2, #0
     dc4:	ldrb	r2, [r2, r1]
     dc8:	b	dd0 <coda_expression_lex+0xdd0>
     dcc:	mov	r2, #1
     dd0:	add	r1, r7, r0, lsl #1
     dd4:	ldrh	r1, [r1]
     dd8:	cmp	r1, #0
     ddc:	add	r1, r5, r0, lsl #1
     de0:	strne	r0, [lr, #64]	; 0x40
     de4:	strne	ip, [lr, #68]	; 0x44
     de8:	ldrsh	r1, [r1]
     dec:	add	r1, r1, r2
     df0:	add	r3, r9, r1, lsl #1
     df4:	ldrsh	r3, [r3]
     df8:	cmp	r0, r3
     dfc:	beq	d9c <coda_expression_lex+0xd9c>
     e00:	mov	r3, r2
     e04:	b	e2c <coda_expression_lex+0xe2c>
     e08:	add	r1, r5, r0, lsl #1
     e0c:	uxth	r4, r0
     e10:	ldrsh	r1, [r1]
     e14:	uxtab	r1, r1, r3
     e18:	add	r2, r9, r1, lsl #1
     e1c:	ldrh	r7, [r2]
     e20:	uxtb	r2, r3
     e24:	cmp	r4, r7
     e28:	beq	d8c <coda_expression_lex+0xd8c>
     e2c:	add	r0, r8, r0, lsl #1
     e30:	movw	r1, #274	; 0x112
     e34:	ldrsh	r0, [r0]
     e38:	cmp	r0, r1
     e3c:	blt	e08 <coda_expression_lex+0xe08>
     e40:	movw	r1, #0
     e44:	movt	r1, #0
     e48:	ldrb	r3, [r1, r2]
     e4c:	b	e08 <coda_expression_lex+0xe08>
     e50:	movw	ip, #0
     e54:	movt	ip, #0
     e58:	b	1d8 <coda_expression_lex+0x1d8>
     e5c:	add	r6, r6, #1
     e60:	sxth	r0, r1
     e64:	str	r6, [lr, #36]	; 0x24
     e68:	b	1d8 <coda_expression_lex+0x1d8>
     e6c:	ldr	r3, [lr, #8]
     e70:	ldr	r1, [lr, #32]
     e74:	ldr	r0, [lr, #80]	; 0x50
     e78:	mov	r2, #1
     e7c:	mov	r4, lr
     e80:	mov	r6, ip
     e84:	bl	0 <fwrite>
     e88:	mov	lr, r4
     e8c:	movw	r4, #0
     e90:	mov	ip, r6
     e94:	movt	r4, #0
     e98:	b	190 <coda_expression_lex+0x190>
     e9c:	ldr	r0, [lr, #80]	; 0x50
     ea0:	mov	r4, lr
     ea4:	bl	0 <strdup>
     ea8:	ldr	r1, [r4, #92]	; 0x5c
     eac:	str	r0, [r1]
     eb0:	movw	r0, #258	; 0x102
     eb4:	sub	sp, fp, #28
     eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ebc:	ldr	r0, [lr, #80]	; 0x50
     ec0:	mov	r4, lr
     ec4:	bl	0 <strdup>
     ec8:	ldr	r1, [r4, #92]	; 0x5c
     ecc:	str	r0, [r1]
     ed0:	movw	r0, #259	; 0x103
     ed4:	sub	sp, fp, #28
     ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     edc:	movw	r0, #306	; 0x132
     ee0:	sub	sp, fp, #28
     ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ee8:	mov	r0, #300	; 0x12c
     eec:	sub	sp, fp, #28
     ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef4:	movw	r0, #299	; 0x12b
     ef8:	sub	sp, fp, #28
     efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f00:	movw	r0, #310	; 0x136
     f04:	sub	sp, fp, #28
     f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f0c:	movw	r0, #297	; 0x129
     f10:	sub	sp, fp, #28
     f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f18:	mov	r0, #316	; 0x13c
     f1c:	sub	sp, fp, #28
     f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f24:	movw	r0, #329	; 0x149
     f28:	sub	sp, fp, #28
     f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f30:	mov	r0, #296	; 0x128
     f34:	sub	sp, fp, #28
     f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f3c:	movw	r0, #319	; 0x13f
     f40:	sub	sp, fp, #28
     f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f48:	ldr	r0, [lr, #80]	; 0x50
     f4c:	ldrb	r0, [r0]
     f50:	sub	sp, fp, #28
     f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f58:	movw	r0, #273	; 0x111
     f5c:	sub	sp, fp, #28
     f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f64:	movw	r0, #278	; 0x116
     f68:	sub	sp, fp, #28
     f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f70:	movw	r0, #287	; 0x11f
     f74:	sub	sp, fp, #28
     f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f7c:	mov	r0, #288	; 0x120
     f80:	sub	sp, fp, #28
     f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f88:	movw	r0, #307	; 0x133
     f8c:	sub	sp, fp, #28
     f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f94:	mov	r0, #276	; 0x114
     f98:	sub	sp, fp, #28
     f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fa0:	movw	r0, #269	; 0x10d
     fa4:	sub	sp, fp, #28
     fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fac:	movw	r0, #271	; 0x10f
     fb0:	sub	sp, fp, #28
     fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fb8:	movw	r0, #263	; 0x107
     fbc:	sub	sp, fp, #28
     fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fc4:	mov	r0, #280	; 0x118
     fc8:	sub	sp, fp, #28
     fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fd0:	movw	r0, #283	; 0x11b
     fd4:	sub	sp, fp, #28
     fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fdc:	mov	r0, #284	; 0x11c
     fe0:	sub	sp, fp, #28
     fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fe8:	movw	r0, #311	; 0x137
     fec:	sub	sp, fp, #28
     ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ff4:	ldr	r0, [lr, #32]
     ff8:	mov	r4, lr
     ffc:	sub	r0, r0, #1
    1000:	bl	0 <malloc>
    1004:	ldr	r1, [r4, #92]	; 0x5c
    1008:	str	r0, [r1]
    100c:	ldr	r0, [r4, #92]	; 0x5c
    1010:	ldr	r2, [r4, #32]
    1014:	ldr	r1, [r4, #80]	; 0x50
    1018:	ldr	r0, [r0]
    101c:	add	r1, r1, #1
    1020:	sub	r2, r2, #2
    1024:	bl	0 <memcpy>
    1028:	ldr	r1, [r4, #92]	; 0x5c
    102c:	ldr	r0, [r4, #32]
    1030:	ldr	r1, [r1]
    1034:	add	r0, r0, r1
    1038:	mov	r1, #0
    103c:	strb	r1, [r0, #-2]
    1040:	mov	r0, #260	; 0x104
    1044:	sub	sp, fp, #28
    1048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    104c:	movw	r0, #266	; 0x10a
    1050:	sub	sp, fp, #28
    1054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1058:	movw	r0, #281	; 0x119
    105c:	sub	sp, fp, #28
    1060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1064:	movw	r0, #303	; 0x12f
    1068:	sub	sp, fp, #28
    106c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1070:	mov	r0, #312	; 0x138
    1074:	sub	sp, fp, #28
    1078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    107c:	movw	r0, #267	; 0x10b
    1080:	sub	sp, fp, #28
    1084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1088:	mov	r0, #268	; 0x10c
    108c:	sub	sp, fp, #28
    1090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1094:	movw	r0, #270	; 0x10e
    1098:	sub	sp, fp, #28
    109c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a0:	movw	r0, #265	; 0x109
    10a4:	sub	sp, fp, #28
    10a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10ac:	movw	r0, #274	; 0x112
    10b0:	sub	sp, fp, #28
    10b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10b8:	movw	r0, #294	; 0x126
    10bc:	sub	sp, fp, #28
    10c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10c4:	ldr	r0, [lr, #80]	; 0x50
    10c8:	mov	r4, lr
    10cc:	bl	0 <strdup>
    10d0:	ldr	r1, [r4, #92]	; 0x5c
    10d4:	str	r0, [r1]
    10d8:	movw	r0, #262	; 0x106
    10dc:	sub	sp, fp, #28
    10e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10e4:	mov	r0, #264	; 0x108
    10e8:	sub	sp, fp, #28
    10ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f0:	movw	r0, #277	; 0x115
    10f4:	sub	sp, fp, #28
    10f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10fc:	movw	r0, #285	; 0x11d
    1100:	sub	sp, fp, #28
    1104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1108:	movw	r0, #293	; 0x125
    110c:	sub	sp, fp, #28
    1110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1114:	movw	r0, #295	; 0x127
    1118:	sub	sp, fp, #28
    111c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1120:	mov	r0, #304	; 0x130
    1124:	sub	sp, fp, #28
    1128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    112c:	movw	r0, #275	; 0x113
    1130:	sub	sp, fp, #28
    1134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1138:	movw	r0, #279	; 0x117
    113c:	sub	sp, fp, #28
    1140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1144:	movw	r0, #282	; 0x11a
    1148:	sub	sp, fp, #28
    114c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1150:	movw	r0, #286	; 0x11e
    1154:	sub	sp, fp, #28
    1158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    115c:	movw	r0, #321	; 0x141
    1160:	sub	sp, fp, #28
    1164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1168:	movw	r0, #323	; 0x143
    116c:	sub	sp, fp, #28
    1170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1174:	movw	r0, #327	; 0x147
    1178:	sub	sp, fp, #28
    117c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1180:	movw	r0, #289	; 0x121
    1184:	sub	sp, fp, #28
    1188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118c:	movw	r0, #291	; 0x123
    1190:	sub	sp, fp, #28
    1194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1198:	mov	r0, #292	; 0x124
    119c:	sub	sp, fp, #28
    11a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11a4:	mov	r0, #308	; 0x134
    11a8:	sub	sp, fp, #28
    11ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b0:	movw	r0, #326	; 0x146
    11b4:	sub	sp, fp, #28
    11b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11bc:	movw	r0, #302	; 0x12e
    11c0:	sub	sp, fp, #28
    11c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11c8:	movw	r0, #305	; 0x131
    11cc:	sub	sp, fp, #28
    11d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11d4:	mov	r0, #324	; 0x144
    11d8:	sub	sp, fp, #28
    11dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11e0:	movw	r0, #325	; 0x145
    11e4:	sub	sp, fp, #28
    11e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ec:	mov	r0, #328	; 0x148
    11f0:	sub	sp, fp, #28
    11f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11f8:	movw	r0, #301	; 0x12d
    11fc:	sub	sp, fp, #28
    1200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1204:	mov	r0, #320	; 0x140
    1208:	sub	sp, fp, #28
    120c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1210:	movw	r0, #322	; 0x142
    1214:	sub	sp, fp, #28
    1218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    121c:	movw	r0, #298	; 0x12a
    1220:	sub	sp, fp, #28
    1224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1228:	movw	r0, #309	; 0x135
    122c:	sub	sp, fp, #28
    1230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1234:	movw	r0, #290	; 0x122
    1238:	sub	sp, fp, #28
    123c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1240:	movw	r0, #317	; 0x13d
    1244:	sub	sp, fp, #28
    1248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    124c:	movw	r0, #313	; 0x139
    1250:	sub	sp, fp, #28
    1254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1258:	movw	r0, #314	; 0x13a
    125c:	sub	sp, fp, #28
    1260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1264:	movw	r0, #315	; 0x13b
    1268:	sub	sp, fp, #28
    126c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1270:	movw	r0, #318	; 0x13e
    1274:	sub	sp, fp, #28
    1278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	mov	r0, #0
    1280:	sub	sp, fp, #28
    1284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1288:	ldr	r0, [lr, #80]	; 0x50
    128c:	mov	r4, lr
    1290:	bl	0 <strdup>
    1294:	ldr	r1, [r4, #92]	; 0x5c
    1298:	str	r0, [r1]
    129c:	movw	r0, #261	; 0x105
    12a0:	sub	sp, fp, #28
    12a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a8:	movw	r0, #0
    12ac:	movt	r0, #0
    12b0:	bl	1418 <yy_fatal_error>
    12b4:	movw	r0, #0
    12b8:	movt	r0, #0
    12bc:	bl	1418 <yy_fatal_error>
    12c0:	mov	r0, #0
    12c4:	str	r0, [r4, #4]
    12c8:	movw	r0, #0
    12cc:	movt	r0, #0
    12d0:	bl	1418 <yy_fatal_error>
    12d4:	movw	r0, #0
    12d8:	movt	r0, #0
    12dc:	bl	1418 <yy_fatal_error>
    12e0:	movw	r0, #0
    12e4:	movt	r0, #0
    12e8:	bl	1418 <yy_fatal_error>
    12ec:	movw	r0, #0
    12f0:	movt	r0, #0
    12f4:	bl	1418 <yy_fatal_error>

000012f8 <coda_expression__create_buffer>:
    12f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    12fc:	add	fp, sp, #24
    1300:	mov	r8, r0
    1304:	mov	r0, #48	; 0x30
    1308:	mov	r5, r2
    130c:	mov	r7, r1
    1310:	bl	0 <malloc>
    1314:	cmp	r0, #0
    1318:	beq	140c <coda_expression__create_buffer+0x114>
    131c:	mov	r4, r0
    1320:	str	r7, [r0, #12]
    1324:	add	r0, r7, #2
    1328:	bl	0 <malloc>
    132c:	cmp	r0, #0
    1330:	str	r0, [r4, #4]
    1334:	beq	140c <coda_expression__create_buffer+0x114>
    1338:	mov	r6, #1
    133c:	mov	r7, r0
    1340:	str	r6, [r4, #20]
    1344:	bl	0 <__errno_location>
    1348:	mov	r3, #0
    134c:	ldr	r1, [r0]
    1350:	str	r3, [r4, #16]
    1354:	str	r7, [r4, #8]
    1358:	str	r6, [r4, #28]
    135c:	strh	r3, [r7]
    1360:	str	r3, [r4, #44]	; 0x2c
    1364:	ldr	r2, [r5, #20]
    1368:	cmp	r2, #0
    136c:	beq	1378 <coda_expression__create_buffer+0x80>
    1370:	ldr	r3, [r5, #12]
    1374:	ldr	r3, [r2, r3, lsl #2]
    1378:	cmp	r3, r4
    137c:	beq	139c <coda_expression__create_buffer+0xa4>
    1380:	mov	r3, #1
    1384:	cmp	r2, #0
    1388:	str	r3, [r4, #40]	; 0x28
    138c:	str	r8, [r4]
    1390:	beq	13e0 <coda_expression__create_buffer+0xe8>
    1394:	ldr	r3, [r5, #12]
    1398:	b	13d8 <coda_expression__create_buffer+0xe0>
    139c:	ldr	r3, [r5, #12]
    13a0:	ldr	r7, [r2, r3, lsl #2]
    13a4:	ldr	r6, [r7, #16]
    13a8:	str	r6, [r5, #28]
    13ac:	ldr	r7, [r7, #8]
    13b0:	str	r7, [r5, #36]	; 0x24
    13b4:	str	r7, [r5, #80]	; 0x50
    13b8:	ldr	r6, [r2, r3, lsl #2]
    13bc:	ldr	r6, [r6]
    13c0:	str	r6, [r5, #4]
    13c4:	ldrb	r7, [r7]
    13c8:	strb	r7, [r5, #24]
    13cc:	mov	r7, #1
    13d0:	str	r7, [r4, #40]	; 0x28
    13d4:	str	r8, [r4]
    13d8:	ldr	r2, [r2, r3, lsl #2]
    13dc:	b	13e4 <coda_expression__create_buffer+0xec>
    13e0:	mov	r2, #0
    13e4:	cmp	r2, r4
    13e8:	movne	r3, #1
    13ec:	movne	r2, #0
    13f0:	strne	r3, [r4, #32]
    13f4:	strne	r2, [r4, #36]	; 0x24
    13f8:	mov	r2, #1
    13fc:	str	r2, [r4, #24]
    1400:	str	r1, [r0]
    1404:	mov	r0, r4
    1408:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    140c:	movw	r0, #0
    1410:	movt	r0, #0
    1414:	bl	1418 <yy_fatal_error>

00001418 <yy_fatal_error>:
    1418:	push	{fp, lr}
    141c:	mov	fp, sp
    1420:	mov	r2, r0
    1424:	movw	r0, #0
    1428:	movw	r1, #0
    142c:	movt	r0, #0
    1430:	movt	r1, #0
    1434:	ldr	r0, [r0]
    1438:	bl	0 <fprintf>
    143c:	mov	r0, #2
    1440:	bl	0 <exit>

00001444 <coda_expression_restart>:
    1444:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1448:	add	fp, sp, #24
    144c:	mov	r8, r0
    1450:	ldr	r0, [r1, #20]
    1454:	mov	r4, r1
    1458:	cmp	r0, #0
    145c:	beq	14b4 <coda_expression_restart+0x70>
    1460:	ldr	r1, [r4, #12]
    1464:	ldr	r2, [r0, r1, lsl #2]
    1468:	cmp	r2, #0
    146c:	bne	1504 <coda_expression_restart+0xc0>
    1470:	ldr	r2, [r4, #16]
    1474:	sub	r3, r2, #1
    1478:	cmp	r1, r3
    147c:	bcc	14dc <coda_expression_restart+0x98>
    1480:	add	r6, r2, #8
    1484:	lsl	r1, r6, #2
    1488:	bl	0 <realloc>
    148c:	cmp	r0, #0
    1490:	str	r0, [r4, #20]
    1494:	beq	1620 <coda_expression_restart+0x1dc>
    1498:	ldr	r1, [r4, #16]
    149c:	vmov.i32	q8, #0	; 0x00000000
    14a0:	add	r0, r0, r1, lsl #2
    14a4:	vst1.32	{d16-d17}, [r0]!
    14a8:	vst1.32	{d16-d17}, [r0]
    14ac:	str	r6, [r4, #16]
    14b0:	b	14dc <coda_expression_restart+0x98>
    14b4:	mov	r0, #4
    14b8:	bl	0 <malloc>
    14bc:	cmp	r0, #0
    14c0:	str	r0, [r4, #20]
    14c4:	beq	1620 <coda_expression_restart+0x1dc>
    14c8:	mov	r1, #0
    14cc:	str	r1, [r0]
    14d0:	mov	r0, #1
    14d4:	str	r1, [r4, #12]
    14d8:	str	r0, [r4, #16]
    14dc:	ldr	r0, [r4, #4]
    14e0:	mov	r1, #16384	; 0x4000
    14e4:	mov	r2, r4
    14e8:	bl	12f8 <coda_expression__create_buffer>
    14ec:	ldr	r1, [r4, #12]
    14f0:	ldr	r2, [r4, #20]
    14f4:	str	r0, [r2, r1, lsl #2]
    14f8:	ldr	r0, [r4, #20]
    14fc:	cmp	r0, #0
    1500:	beq	161c <coda_expression_restart+0x1d8>
    1504:	ldr	r6, [r0, r1, lsl #2]
    1508:	bl	0 <__errno_location>
    150c:	cmp	r6, #0
    1510:	beq	161c <coda_expression_restart+0x1d8>
    1514:	mov	r3, #0
    1518:	ldr	r1, [r0]
    151c:	str	r3, [r6, #16]
    1520:	ldr	r2, [r6, #4]
    1524:	strb	r3, [r2]
    1528:	ldr	r2, [r6, #4]
    152c:	strb	r3, [r2, #1]
    1530:	mov	r2, #1
    1534:	str	r3, [r6, #44]	; 0x2c
    1538:	str	r2, [r6, #28]
    153c:	ldr	r2, [r6, #4]
    1540:	str	r2, [r6, #8]
    1544:	ldr	r2, [r4, #20]
    1548:	cmp	r2, #0
    154c:	beq	1558 <coda_expression_restart+0x114>
    1550:	ldr	r3, [r4, #12]
    1554:	ldr	r3, [r2, r3, lsl #2]
    1558:	cmp	r3, r6
    155c:	beq	157c <coda_expression_restart+0x138>
    1560:	mov	r3, #1
    1564:	cmp	r2, #0
    1568:	str	r3, [r6, #40]	; 0x28
    156c:	str	r8, [r6]
    1570:	beq	15c0 <coda_expression_restart+0x17c>
    1574:	ldr	r3, [r4, #12]
    1578:	b	15b8 <coda_expression_restart+0x174>
    157c:	ldr	r3, [r4, #12]
    1580:	ldr	r5, [r2, r3, lsl #2]
    1584:	ldr	r7, [r5, #16]
    1588:	str	r7, [r4, #28]
    158c:	ldr	r7, [r5, #8]
    1590:	str	r7, [r4, #36]	; 0x24
    1594:	str	r7, [r4, #80]	; 0x50
    1598:	ldr	r5, [r2, r3, lsl #2]
    159c:	ldr	r5, [r5]
    15a0:	str	r5, [r4, #4]
    15a4:	ldrb	r7, [r7]
    15a8:	strb	r7, [r4, #24]
    15ac:	mov	r7, #1
    15b0:	str	r7, [r6, #40]	; 0x28
    15b4:	str	r8, [r6]
    15b8:	ldr	r3, [r2, r3, lsl #2]
    15bc:	b	15c8 <coda_expression_restart+0x184>
    15c0:	mov	r2, #0
    15c4:	mov	r3, #0
    15c8:	cmp	r3, r6
    15cc:	movne	r7, #1
    15d0:	movne	r3, #0
    15d4:	strne	r7, [r6, #32]
    15d8:	strne	r3, [r6, #36]	; 0x24
    15dc:	mov	r3, #1
    15e0:	str	r3, [r6, #24]
    15e4:	str	r1, [r0]
    15e8:	ldr	r0, [r4, #12]
    15ec:	ldr	r1, [r2, r0, lsl #2]
    15f0:	ldr	r3, [r1, #16]
    15f4:	str	r3, [r4, #28]
    15f8:	ldr	r1, [r1, #8]
    15fc:	str	r1, [r4, #36]	; 0x24
    1600:	str	r1, [r4, #80]	; 0x50
    1604:	ldr	r0, [r2, r0, lsl #2]
    1608:	ldr	r0, [r0]
    160c:	str	r0, [r4, #4]
    1610:	ldrb	r0, [r1]
    1614:	strb	r0, [r4, #24]
    1618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    161c:	udf	#65006	; 0xfdee
    1620:	movw	r0, #0
    1624:	movt	r0, #0
    1628:	bl	1418 <yy_fatal_error>

0000162c <coda_expression__switch_to_buffer>:
    162c:	push	{r4, r5, r6, sl, fp, lr}
    1630:	add	fp, sp, #16
    1634:	mov	r5, r0
    1638:	ldr	r0, [r1, #20]
    163c:	mov	r4, r1
    1640:	cmp	r0, #0
    1644:	beq	1690 <coda_expression__switch_to_buffer+0x64>
    1648:	ldr	r1, [r4, #16]
    164c:	ldr	r2, [r4, #12]
    1650:	sub	r3, r1, #1
    1654:	cmp	r2, r3
    1658:	bcc	16b8 <coda_expression__switch_to_buffer+0x8c>
    165c:	add	r6, r1, #8
    1660:	lsl	r1, r6, #2
    1664:	bl	0 <realloc>
    1668:	cmp	r0, #0
    166c:	str	r0, [r4, #20]
    1670:	beq	1744 <coda_expression__switch_to_buffer+0x118>
    1674:	ldr	r1, [r4, #16]
    1678:	vmov.i32	q8, #0	; 0x00000000
    167c:	add	r1, r0, r1, lsl #2
    1680:	vst1.32	{d16-d17}, [r1]!
    1684:	vst1.32	{d16-d17}, [r1]
    1688:	str	r6, [r4, #16]
    168c:	b	16b8 <coda_expression__switch_to_buffer+0x8c>
    1690:	mov	r0, #4
    1694:	bl	0 <malloc>
    1698:	cmp	r0, #0
    169c:	str	r0, [r4, #20]
    16a0:	beq	1744 <coda_expression__switch_to_buffer+0x118>
    16a4:	mov	r1, #0
    16a8:	mov	r2, #1
    16ac:	str	r1, [r0]
    16b0:	str	r1, [r4, #12]
    16b4:	str	r2, [r4, #16]
    16b8:	ldr	r1, [r4, #12]
    16bc:	ldr	r1, [r0, r1, lsl #2]
    16c0:	cmp	r1, r5
    16c4:	beq	1740 <coda_expression__switch_to_buffer+0x114>
    16c8:	ldr	r1, [r4, #12]
    16cc:	ldr	r2, [r0, r1, lsl #2]
    16d0:	cmp	r2, #0
    16d4:	beq	1704 <coda_expression__switch_to_buffer+0xd8>
    16d8:	ldr	r0, [r4, #36]	; 0x24
    16dc:	ldrb	r1, [r4, #24]
    16e0:	strb	r1, [r0]
    16e4:	ldr	r1, [r4, #12]
    16e8:	ldr	r0, [r4, #20]
    16ec:	ldr	r2, [r4, #36]	; 0x24
    16f0:	ldr	r3, [r0, r1, lsl #2]
    16f4:	str	r2, [r3, #8]
    16f8:	ldr	r2, [r0, r1, lsl #2]
    16fc:	ldr	r3, [r4, #28]
    1700:	str	r3, [r2, #16]
    1704:	str	r5, [r0, r1, lsl #2]
    1708:	ldr	r0, [r4, #20]
    170c:	ldr	r2, [r0, r1, lsl #2]
    1710:	ldr	r3, [r2, #16]
    1714:	str	r3, [r4, #28]
    1718:	ldr	r2, [r2, #8]
    171c:	str	r2, [r4, #36]	; 0x24
    1720:	str	r2, [r4, #80]	; 0x50
    1724:	ldr	r0, [r0, r1, lsl #2]
    1728:	mov	r1, #1
    172c:	ldr	r0, [r0]
    1730:	str	r0, [r4, #4]
    1734:	ldrb	r0, [r2]
    1738:	str	r1, [r4, #48]	; 0x30
    173c:	strb	r0, [r4, #24]
    1740:	pop	{r4, r5, r6, sl, fp, pc}
    1744:	movw	r0, #0
    1748:	movt	r0, #0
    174c:	bl	1418 <yy_fatal_error>

00001750 <coda_expression_alloc>:
    1750:	b	0 <malloc>

00001754 <coda_expression__delete_buffer>:
    1754:	cmp	r0, #0
    1758:	bxeq	lr
    175c:	push	{r4, sl, fp, lr}
    1760:	add	fp, sp, #8
    1764:	mov	r4, r0
    1768:	ldr	r0, [r1, #20]
    176c:	cmp	r0, #0
    1770:	beq	17b0 <coda_expression__delete_buffer+0x5c>
    1774:	ldr	r2, [r1, #12]
    1778:	ldr	r2, [r0, r2, lsl #2]
    177c:	cmp	r2, r4
    1780:	bne	1790 <coda_expression__delete_buffer+0x3c>
    1784:	ldr	r1, [r1, #12]
    1788:	mov	r2, #0
    178c:	str	r2, [r0, r1, lsl #2]
    1790:	ldr	r0, [r4, #20]
    1794:	cmp	r0, #0
    1798:	beq	17a4 <coda_expression__delete_buffer+0x50>
    179c:	ldr	r0, [r4, #4]
    17a0:	bl	0 <free>
    17a4:	mov	r0, r4
    17a8:	pop	{r4, sl, fp, lr}
    17ac:	b	0 <free>
    17b0:	mov	r2, #0
    17b4:	cmp	r2, r4
    17b8:	bne	1790 <coda_expression__delete_buffer+0x3c>
    17bc:	b	1784 <coda_expression__delete_buffer+0x30>

000017c0 <coda_expression_free>:
    17c0:	b	0 <free>

000017c4 <coda_expression__flush_buffer>:
    17c4:	cmp	r0, #0
    17c8:	beq	1844 <coda_expression__flush_buffer+0x80>
    17cc:	mov	r3, #0
    17d0:	str	r3, [r0, #16]
    17d4:	ldr	r2, [r0, #4]
    17d8:	strb	r3, [r2]
    17dc:	ldr	r2, [r0, #4]
    17e0:	strb	r3, [r2, #1]
    17e4:	mov	r2, #1
    17e8:	str	r3, [r0, #44]	; 0x2c
    17ec:	str	r2, [r0, #28]
    17f0:	ldr	r2, [r0, #4]
    17f4:	str	r2, [r0, #8]
    17f8:	ldr	r2, [r1, #20]
    17fc:	cmp	r2, #0
    1800:	beq	180c <coda_expression__flush_buffer+0x48>
    1804:	ldr	r3, [r1, #12]
    1808:	ldr	r3, [r2, r3, lsl #2]
    180c:	cmp	r3, r0
    1810:	bxne	lr
    1814:	ldr	ip, [r1, #12]
    1818:	ldr	r3, [r2, ip, lsl #2]
    181c:	ldr	r0, [r3, #16]
    1820:	str	r0, [r1, #28]
    1824:	ldr	r0, [r3, #8]
    1828:	str	r0, [r1, #36]	; 0x24
    182c:	str	r0, [r1, #80]	; 0x50
    1830:	ldr	r2, [r2, ip, lsl #2]
    1834:	ldr	r2, [r2]
    1838:	str	r2, [r1, #4]
    183c:	ldrb	r0, [r0]
    1840:	strb	r0, [r1, #24]
    1844:	bx	lr

00001848 <coda_expression_push_buffer_state>:
    1848:	push	{r4, r5, r6, r7, fp, lr}
    184c:	add	fp, sp, #16
    1850:	cmp	r0, #0
    1854:	beq	1970 <coda_expression_push_buffer_state+0x128>
    1858:	mov	r5, r0
    185c:	ldr	r0, [r1, #20]
    1860:	mov	r4, r1
    1864:	cmp	r0, #0
    1868:	beq	18bc <coda_expression_push_buffer_state+0x74>
    186c:	mov	r6, r4
    1870:	ldr	r1, [r6, #12]!
    1874:	ldr	r2, [r6, #4]
    1878:	sub	r3, r2, #1
    187c:	cmp	r1, r3
    1880:	bcc	18e8 <coda_expression_push_buffer_state+0xa0>
    1884:	add	r7, r2, #8
    1888:	lsl	r1, r7, #2
    188c:	bl	0 <realloc>
    1890:	cmp	r0, #0
    1894:	str	r0, [r4, #20]
    1898:	beq	1974 <coda_expression_push_buffer_state+0x12c>
    189c:	ldr	r1, [r4, #16]
    18a0:	vmov.i32	q8, #0	; 0x00000000
    18a4:	add	r1, r0, r1, lsl #2
    18a8:	vst1.32	{d16-d17}, [r1]!
    18ac:	vst1.32	{d16-d17}, [r1]
    18b0:	str	r7, [r4, #16]
    18b4:	ldr	r1, [r4, #12]
    18b8:	b	18e8 <coda_expression_push_buffer_state+0xa0>
    18bc:	mov	r0, #4
    18c0:	bl	0 <malloc>
    18c4:	cmp	r0, #0
    18c8:	str	r0, [r4, #20]
    18cc:	beq	1974 <coda_expression_push_buffer_state+0x12c>
    18d0:	mov	r1, #0
    18d4:	mov	r6, r4
    18d8:	mov	r2, #1
    18dc:	str	r1, [r0]
    18e0:	str	r1, [r6, #12]!
    18e4:	str	r2, [r6, #4]
    18e8:	ldr	r2, [r0, r1, lsl #2]
    18ec:	cmp	r2, #0
    18f0:	beq	1924 <coda_expression_push_buffer_state+0xdc>
    18f4:	ldr	r0, [r4, #36]	; 0x24
    18f8:	ldrb	r1, [r4, #24]
    18fc:	strb	r1, [r0]
    1900:	ldr	r1, [r4, #12]
    1904:	ldr	r0, [r4, #20]
    1908:	ldr	r2, [r4, #36]	; 0x24
    190c:	ldr	r3, [r0, r1, lsl #2]
    1910:	str	r2, [r3, #8]
    1914:	ldr	r2, [r0, r1, lsl #2]
    1918:	ldr	r3, [r4, #28]
    191c:	str	r3, [r2, #16]
    1920:	b	1928 <coda_expression_push_buffer_state+0xe0>
    1924:	ldr	r2, [r0, r1, lsl #2]
    1928:	cmp	r2, #0
    192c:	addne	r1, r1, #1
    1930:	strne	r1, [r6]
    1934:	str	r5, [r0, r1, lsl #2]
    1938:	ldr	r0, [r4, #20]
    193c:	ldr	r2, [r0, r1, lsl #2]
    1940:	ldr	r3, [r2, #16]
    1944:	str	r3, [r4, #28]
    1948:	ldr	r2, [r2, #8]
    194c:	str	r2, [r4, #36]	; 0x24
    1950:	str	r2, [r4, #80]	; 0x50
    1954:	ldr	r0, [r0, r1, lsl #2]
    1958:	mov	r1, #1
    195c:	ldr	r0, [r0]
    1960:	str	r0, [r4, #4]
    1964:	ldrb	r0, [r2]
    1968:	str	r1, [r4, #48]	; 0x30
    196c:	strb	r0, [r4, #24]
    1970:	pop	{r4, r5, r6, r7, fp, pc}
    1974:	movw	r0, #0
    1978:	movt	r0, #0
    197c:	bl	1418 <yy_fatal_error>

00001980 <coda_expression_pop_buffer_state>:
    1980:	push	{r4, r5, r6, sl, fp, lr}
    1984:	add	fp, sp, #16
    1988:	mov	r4, r0
    198c:	ldr	r0, [r0, #20]
    1990:	cmp	r0, #0
    1994:	beq	1a2c <coda_expression_pop_buffer_state+0xac>
    1998:	ldr	r1, [r4, #12]
    199c:	ldr	r5, [r0, r1, lsl #2]
    19a0:	cmp	r5, #0
    19a4:	beq	1a2c <coda_expression_pop_buffer_state+0xac>
    19a8:	mov	r6, #0
    19ac:	str	r6, [r0, r1, lsl #2]
    19b0:	ldr	r0, [r5, #20]
    19b4:	cmp	r0, #0
    19b8:	beq	19c4 <coda_expression_pop_buffer_state+0x44>
    19bc:	ldr	r0, [r5, #4]
    19c0:	bl	0 <free>
    19c4:	mov	r0, r5
    19c8:	bl	0 <free>
    19cc:	ldr	r0, [r4, #12]
    19d0:	ldr	r1, [r4, #20]
    19d4:	cmp	r0, #0
    19d8:	str	r6, [r1, r0, lsl #2]
    19dc:	subne	r6, r0, #1
    19e0:	strne	r6, [r4, #12]
    19e4:	ldr	r0, [r4, #20]
    19e8:	cmp	r0, #0
    19ec:	beq	1a2c <coda_expression_pop_buffer_state+0xac>
    19f0:	ldr	r1, [r0, r6, lsl #2]
    19f4:	cmp	r1, #0
    19f8:	beq	1a2c <coda_expression_pop_buffer_state+0xac>
    19fc:	ldr	r2, [r1, #16]
    1a00:	str	r2, [r4, #28]
    1a04:	ldr	r1, [r1, #8]
    1a08:	str	r1, [r4, #80]	; 0x50
    1a0c:	str	r1, [r4, #36]	; 0x24
    1a10:	ldr	r0, [r0, r6, lsl #2]
    1a14:	ldr	r0, [r0]
    1a18:	str	r0, [r4, #4]
    1a1c:	ldrb	r0, [r1]
    1a20:	mov	r1, #1
    1a24:	str	r1, [r4, #48]	; 0x30
    1a28:	strb	r0, [r4, #24]
    1a2c:	pop	{r4, r5, r6, sl, fp, pc}

00001a30 <coda_expression__scan_buffer>:
    1a30:	push	{r4, r5, r6, r7, fp, lr}
    1a34:	add	fp, sp, #16
    1a38:	mov	r4, #0
    1a3c:	cmp	r1, #2
    1a40:	bcc	1a68 <coda_expression__scan_buffer+0x38>
    1a44:	sub	r7, r1, #2
    1a48:	mov	r6, r0
    1a4c:	ldrb	r0, [r0, r7]
    1a50:	cmp	r0, #0
    1a54:	bne	1a68 <coda_expression__scan_buffer+0x38>
    1a58:	add	r0, r1, r6
    1a5c:	ldrb	r0, [r0, #-1]
    1a60:	cmp	r0, #0
    1a64:	beq	1a70 <coda_expression__scan_buffer+0x40>
    1a68:	mov	r0, r4
    1a6c:	pop	{r4, r5, r6, r7, fp, pc}
    1a70:	mov	r0, #48	; 0x30
    1a74:	mov	r5, r2
    1a78:	bl	0 <malloc>
    1a7c:	cmp	r0, #0
    1a80:	beq	1ac8 <coda_expression__scan_buffer+0x98>
    1a84:	mov	r4, r0
    1a88:	mov	r0, #0
    1a8c:	mov	r1, #1
    1a90:	str	r0, [r4, #40]	; 0x28
    1a94:	str	r0, [r4, #44]	; 0x2c
    1a98:	stm	r4, {r0, r6}
    1a9c:	str	r6, [r4, #8]
    1aa0:	str	r7, [r4, #12]
    1aa4:	str	r7, [r4, #16]
    1aa8:	str	r0, [r4, #20]
    1aac:	str	r0, [r4, #24]
    1ab0:	str	r1, [r4, #28]
    1ab4:	mov	r0, r4
    1ab8:	mov	r1, r5
    1abc:	bl	162c <coda_expression__switch_to_buffer>
    1ac0:	mov	r0, r4
    1ac4:	pop	{r4, r5, r6, r7, fp, pc}
    1ac8:	movw	r0, #0
    1acc:	movt	r0, #0
    1ad0:	bl	1418 <yy_fatal_error>

00001ad4 <coda_expression__scan_string>:
    1ad4:	push	{r4, r5, fp, lr}
    1ad8:	add	fp, sp, #8
    1adc:	mov	r4, r1
    1ae0:	mov	r5, r0
    1ae4:	bl	0 <strlen>
    1ae8:	mov	r1, r0
    1aec:	mov	r0, r5
    1af0:	mov	r2, r4
    1af4:	pop	{r4, r5, fp, lr}
    1af8:	b	1afc <coda_expression__scan_bytes>

00001afc <coda_expression__scan_bytes>:
    1afc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1b00:	add	fp, sp, #24
    1b04:	add	r7, r1, #2
    1b08:	mov	r4, r0
    1b0c:	mov	r8, r2
    1b10:	mov	r5, r1
    1b14:	mov	r0, r7
    1b18:	bl	0 <malloc>
    1b1c:	cmp	r0, #0
    1b20:	beq	1bac <coda_expression__scan_bytes+0xb0>
    1b24:	mov	r6, r0
    1b28:	cmp	r5, #1
    1b2c:	blt	1b40 <coda_expression__scan_bytes+0x44>
    1b30:	mov	r0, r6
    1b34:	mov	r1, r4
    1b38:	mov	r2, r5
    1b3c:	bl	0 <memcpy>
    1b40:	cmp	r7, #2
    1b44:	add	r0, r6, r5
    1b48:	mov	r1, #0
    1b4c:	strh	r1, [r0]
    1b50:	bcc	1bb8 <coda_expression__scan_bytes+0xbc>
    1b54:	mov	r0, #48	; 0x30
    1b58:	bl	0 <malloc>
    1b5c:	cmp	r0, #0
    1b60:	beq	1bc4 <coda_expression__scan_bytes+0xc8>
    1b64:	mov	r7, r0
    1b68:	mov	r0, #0
    1b6c:	mov	r4, #1
    1b70:	mov	r1, r8
    1b74:	str	r0, [r7, #40]	; 0x28
    1b78:	str	r0, [r7, #44]	; 0x2c
    1b7c:	stm	r7, {r0, r6}
    1b80:	str	r6, [r7, #8]
    1b84:	str	r5, [r7, #12]
    1b88:	str	r5, [r7, #16]
    1b8c:	str	r0, [r7, #20]
    1b90:	str	r0, [r7, #24]
    1b94:	mov	r0, r7
    1b98:	str	r4, [r7, #28]
    1b9c:	bl	162c <coda_expression__switch_to_buffer>
    1ba0:	mov	r0, r7
    1ba4:	str	r4, [r7, #20]
    1ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1bac:	movw	r0, #0
    1bb0:	movt	r0, #0
    1bb4:	bl	1418 <yy_fatal_error>
    1bb8:	movw	r0, #0
    1bbc:	movt	r0, #0
    1bc0:	bl	1418 <yy_fatal_error>
    1bc4:	movw	r0, #0
    1bc8:	movt	r0, #0
    1bcc:	bl	1418 <yy_fatal_error>

00001bd0 <coda_expression_get_extra>:
    1bd0:	ldr	r0, [r0]
    1bd4:	bx	lr

00001bd8 <coda_expression_get_lineno>:
    1bd8:	ldr	r2, [r0, #20]
    1bdc:	mov	r1, r0
    1be0:	mov	r0, #0
    1be4:	cmp	r2, #0
    1be8:	bxeq	lr
    1bec:	ldr	r1, [r1, #12]
    1bf0:	ldr	r1, [r2, r1, lsl #2]
    1bf4:	cmp	r1, #0
    1bf8:	ldrne	r0, [r1, #32]
    1bfc:	bx	lr

00001c00 <coda_expression_get_column>:
    1c00:	ldr	r2, [r0, #20]
    1c04:	mov	r1, r0
    1c08:	mov	r0, #0
    1c0c:	cmp	r2, #0
    1c10:	bxeq	lr
    1c14:	ldr	r1, [r1, #12]
    1c18:	ldr	r1, [r2, r1, lsl #2]
    1c1c:	cmp	r1, #0
    1c20:	ldrne	r0, [r1, #36]	; 0x24
    1c24:	bx	lr

00001c28 <coda_expression_get_in>:
    1c28:	ldr	r0, [r0, #4]
    1c2c:	bx	lr

00001c30 <coda_expression_get_out>:
    1c30:	ldr	r0, [r0, #8]
    1c34:	bx	lr

00001c38 <coda_expression_get_leng>:
    1c38:	ldr	r0, [r0, #32]
    1c3c:	bx	lr

00001c40 <coda_expression_get_text>:
    1c40:	ldr	r0, [r0, #80]	; 0x50
    1c44:	bx	lr

00001c48 <coda_expression_set_extra>:
    1c48:	str	r0, [r1]
    1c4c:	bx	lr

00001c50 <coda_expression_set_lineno>:
    1c50:	push	{fp, lr}
    1c54:	mov	fp, sp
    1c58:	ldr	r2, [r1, #20]
    1c5c:	cmp	r2, #0
    1c60:	ldrne	r1, [r1, #12]
    1c64:	ldrne	r1, [r2, r1, lsl #2]
    1c68:	cmpne	r1, #0
    1c6c:	bne	1c7c <coda_expression_set_lineno+0x2c>
    1c70:	movw	r0, #0
    1c74:	movt	r0, #0
    1c78:	bl	1418 <yy_fatal_error>
    1c7c:	str	r0, [r1, #32]
    1c80:	pop	{fp, pc}

00001c84 <coda_expression_set_column>:
    1c84:	push	{fp, lr}
    1c88:	mov	fp, sp
    1c8c:	ldr	r2, [r1, #20]
    1c90:	cmp	r2, #0
    1c94:	ldrne	r1, [r1, #12]
    1c98:	ldrne	r1, [r2, r1, lsl #2]
    1c9c:	cmpne	r1, #0
    1ca0:	bne	1cb0 <coda_expression_set_column+0x2c>
    1ca4:	movw	r0, #0
    1ca8:	movt	r0, #0
    1cac:	bl	1418 <yy_fatal_error>
    1cb0:	str	r0, [r1, #36]	; 0x24
    1cb4:	pop	{fp, pc}

00001cb8 <coda_expression_set_in>:
    1cb8:	str	r0, [r1, #4]
    1cbc:	bx	lr

00001cc0 <coda_expression_set_out>:
    1cc0:	str	r0, [r1, #8]
    1cc4:	bx	lr

00001cc8 <coda_expression_get_debug>:
    1cc8:	ldr	r0, [r0, #76]	; 0x4c
    1ccc:	bx	lr

00001cd0 <coda_expression_set_debug>:
    1cd0:	str	r0, [r1, #76]	; 0x4c
    1cd4:	bx	lr

00001cd8 <coda_expression_get_lval>:
    1cd8:	ldr	r0, [r0, #92]	; 0x5c
    1cdc:	bx	lr

00001ce0 <coda_expression_set_lval>:
    1ce0:	str	r0, [r1, #92]	; 0x5c
    1ce4:	bx	lr

00001ce8 <coda_expression_lex_init>:
    1ce8:	push	{r4, sl, fp, lr}
    1cec:	add	fp, sp, #8
    1cf0:	cmp	r0, #0
    1cf4:	beq	1d4c <coda_expression_lex_init+0x64>
    1cf8:	mov	r4, r0
    1cfc:	mov	r0, #96	; 0x60
    1d00:	bl	0 <malloc>
    1d04:	cmp	r0, #0
    1d08:	str	r0, [r4]
    1d0c:	beq	1d58 <coda_expression_lex_init+0x70>
    1d10:	vmov.i32	q8, #0	; 0x00000000
    1d14:	mov	r1, #80	; 0x50
    1d18:	mov	r2, r0
    1d1c:	vst1.8	{d16-d17}, [r2], r1
    1d20:	add	r1, r0, #64	; 0x40
    1d24:	vst1.8	{d16-d17}, [r1]
    1d28:	add	r1, r0, #48	; 0x30
    1d2c:	vst1.8	{d16-d17}, [r2]
    1d30:	vst1.8	{d16-d17}, [r1]
    1d34:	add	r1, r0, #32
    1d38:	add	r0, r0, #16
    1d3c:	vst1.8	{d16-d17}, [r0]
    1d40:	mov	r0, #0
    1d44:	vst1.8	{d16-d17}, [r1]
    1d48:	pop	{r4, sl, fp, pc}
    1d4c:	bl	0 <__errno_location>
    1d50:	mov	r1, #22
    1d54:	b	1d60 <coda_expression_lex_init+0x78>
    1d58:	bl	0 <__errno_location>
    1d5c:	mov	r1, #12
    1d60:	str	r1, [r0]
    1d64:	mov	r0, #1
    1d68:	pop	{r4, sl, fp, pc}

00001d6c <coda_expression_lex_init_extra>:
    1d6c:	push	{r4, r5, fp, lr}
    1d70:	add	fp, sp, #8
    1d74:	cmp	r1, #0
    1d78:	beq	1df8 <coda_expression_lex_init_extra+0x8c>
    1d7c:	mov	r4, r0
    1d80:	mov	r0, #96	; 0x60
    1d84:	mov	r5, r1
    1d88:	bl	0 <malloc>
    1d8c:	cmp	r0, #0
    1d90:	str	r0, [r5]
    1d94:	beq	1e04 <coda_expression_lex_init_extra+0x98>
    1d98:	vmov.i32	q8, #0	; 0x00000000
    1d9c:	add	r1, r0, #56	; 0x38
    1da0:	add	r2, r0, #72	; 0x48
    1da4:	vst1.8	{d16-d17}, [r1]
    1da8:	add	r1, r0, #40	; 0x28
    1dac:	vst1.8	{d16-d17}, [r1]
    1db0:	add	r1, r0, #24
    1db4:	vst1.8	{d16-d17}, [r1]
    1db8:	mov	r1, #0
    1dbc:	str	r1, [r0, #92]	; 0x5c
    1dc0:	str	r1, [r0, #88]	; 0x58
    1dc4:	str	r4, [r0]
    1dc8:	str	r1, [r0, #20]
    1dcc:	vst1.8	{d16-d17}, [r2]
    1dd0:	add	r2, r0, #4
    1dd4:	vst1.32	{d16-d17}, [r2]
    1dd8:	str	r1, [r0, #52]	; 0x34
    1ddc:	str	r1, [r0, #56]	; 0x38
    1de0:	str	r1, [r0, #60]	; 0x3c
    1de4:	str	r1, [r0, #36]	; 0x24
    1de8:	str	r1, [r0, #40]	; 0x28
    1dec:	str	r1, [r0, #44]	; 0x2c
    1df0:	mov	r0, r1
    1df4:	pop	{r4, r5, fp, pc}
    1df8:	bl	0 <__errno_location>
    1dfc:	mov	r1, #22
    1e00:	b	1e0c <coda_expression_lex_init_extra+0xa0>
    1e04:	bl	0 <__errno_location>
    1e08:	mov	r1, #12
    1e0c:	str	r1, [r0]
    1e10:	mov	r1, #1
    1e14:	mov	r0, r1
    1e18:	pop	{r4, r5, fp, pc}

00001e1c <coda_expression_lex_destroy>:
    1e1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1e20:	add	fp, sp, #24
    1e24:	ldr	r1, [r0, #20]
    1e28:	mov	r4, r0
    1e2c:	mov	r8, #0
    1e30:	mov	r0, #0
    1e34:	cmp	r1, #0
    1e38:	beq	1f40 <coda_expression_lex_destroy+0x124>
    1e3c:	ldr	r0, [r4, #12]
    1e40:	mov	r2, r1
    1e44:	ldr	r5, [r2, r0, lsl #2]!
    1e48:	mov	r0, r1
    1e4c:	cmp	r5, #0
    1e50:	beq	1f40 <coda_expression_lex_destroy+0x124>
    1e54:	mov	r7, #0
    1e58:	mov	r6, #1
    1e5c:	b	1e70 <coda_expression_lex_destroy+0x54>
    1e60:	mov	r0, r2
    1e64:	ldr	r5, [r2, r1, lsl #2]!
    1e68:	cmp	r5, #0
    1e6c:	beq	1f40 <coda_expression_lex_destroy+0x124>
    1e70:	str	r7, [r2]
    1e74:	ldr	r0, [r5, #20]
    1e78:	cmp	r0, #0
    1e7c:	beq	1e88 <coda_expression_lex_destroy+0x6c>
    1e80:	ldr	r0, [r5, #4]
    1e84:	bl	0 <free>
    1e88:	mov	r0, r5
    1e8c:	bl	0 <free>
    1e90:	ldr	r1, [r4, #12]
    1e94:	ldr	r2, [r4, #20]
    1e98:	mov	r0, #0
    1e9c:	str	r0, [r2, r1, lsl #2]
    1ea0:	ldr	r2, [r4, #20]
    1ea4:	cmp	r2, #0
    1ea8:	beq	1f40 <coda_expression_lex_destroy+0x124>
    1eac:	ldr	r5, [r2, r1, lsl #2]
    1eb0:	cmp	r5, #0
    1eb4:	beq	1e60 <coda_expression_lex_destroy+0x44>
    1eb8:	str	r7, [r2, r1, lsl #2]
    1ebc:	ldr	r0, [r5, #20]
    1ec0:	cmp	r0, #0
    1ec4:	beq	1ed0 <coda_expression_lex_destroy+0xb4>
    1ec8:	ldr	r0, [r5, #4]
    1ecc:	bl	0 <free>
    1ed0:	mov	r0, r5
    1ed4:	bl	0 <free>
    1ed8:	ldr	r2, [r4, #12]
    1edc:	ldr	r1, [r4, #20]
    1ee0:	mov	r0, #0
    1ee4:	cmp	r2, #0
    1ee8:	str	r0, [r1, r2, lsl #2]
    1eec:	mov	r1, #0
    1ef0:	subne	r1, r2, #1
    1ef4:	strne	r1, [r4, #12]
    1ef8:	ldr	r2, [r4, #20]
    1efc:	cmp	r2, #0
    1f00:	beq	1f40 <coda_expression_lex_destroy+0x124>
    1f04:	ldr	r0, [r2, r1, lsl #2]
    1f08:	cmp	r0, #0
    1f0c:	beq	1e60 <coda_expression_lex_destroy+0x44>
    1f10:	ldr	r3, [r0, #16]
    1f14:	str	r3, [r4, #28]
    1f18:	ldr	r0, [r0, #8]
    1f1c:	str	r0, [r4, #80]	; 0x50
    1f20:	str	r0, [r4, #36]	; 0x24
    1f24:	ldr	r3, [r2, r1, lsl #2]
    1f28:	ldr	r3, [r3]
    1f2c:	str	r3, [r4, #4]
    1f30:	ldrb	r0, [r0]
    1f34:	str	r6, [r4, #48]	; 0x30
    1f38:	strb	r0, [r4, #24]
    1f3c:	b	1e60 <coda_expression_lex_destroy+0x44>
    1f40:	bl	0 <free>
    1f44:	str	r8, [r4, #20]
    1f48:	ldr	r0, [r4, #60]	; 0x3c
    1f4c:	bl	0 <free>
    1f50:	mov	r0, r4
    1f54:	bl	0 <free>
    1f58:	mov	r0, #0
    1f5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001f60 <coda_expression_realloc>:
    1f60:	b	0 <realloc>
