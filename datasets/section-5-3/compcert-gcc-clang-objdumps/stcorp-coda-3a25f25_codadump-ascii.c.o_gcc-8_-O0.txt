
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_index>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #24
      10:	str	r0, [fp, #-24]	; 0xffffffe8
      14:	mov	r3, #0
      18:	str	r3, [fp, #-8]
      1c:	mov	r3, #0
      20:	str	r3, [fp, #-12]
      24:	b	114 <write_index+0x114>
      28:	movw	r3, #0
      2c:	movt	r3, #0
      30:	ldr	r2, [fp, #-12]
      34:	add	r2, r2, #2
      38:	ldr	r3, [r3, r2, lsl #2]
      3c:	sub	r2, fp, #20
      40:	mov	r1, r2
      44:	mov	r0, r3
      48:	bl	0 <coda_type_get_class>
      4c:	mov	r3, r0
      50:	cmp	r3, #0
      54:	beq	5c <write_index+0x5c>
      58:	bl	0 <handle_coda_error>
      5c:	ldr	r3, [fp, #-20]	; 0xffffffec
      60:	cmp	r3, #1
      64:	bne	108 <write_index+0x108>
      68:	mov	r3, #0
      6c:	str	r3, [fp, #-16]
      70:	b	c8 <write_index+0xc8>
      74:	movw	r2, #0
      78:	movt	r2, #0
      7c:	ldr	r1, [fp, #-8]
      80:	mov	r3, r1
      84:	lsl	r3, r3, #2
      88:	add	r3, r3, r1
      8c:	lsl	r3, r3, #2
      90:	ldr	r1, [fp, #-16]
      94:	add	r3, r3, r1
      98:	add	r3, r3, #212	; 0xd4
      9c:	ldr	r2, [r2, r3, lsl #2]
      a0:	movw	r3, #0
      a4:	movt	r3, #0
      a8:	ldr	r3, [r3]
      ac:	movw	r1, #0
      b0:	movt	r1, #0
      b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
      b8:	bl	0 <fprintf>
      bc:	ldr	r3, [fp, #-16]
      c0:	add	r3, r3, #1
      c4:	str	r3, [fp, #-16]
      c8:	movw	r2, #0
      cc:	movt	r2, #0
      d0:	ldr	r1, [fp, #-8]
      d4:	mov	r3, r1
      d8:	lsl	r3, r3, #2
      dc:	add	r3, r3, r1
      e0:	lsl	r3, r3, #4
      e4:	add	r3, r2, r3
      e8:	add	r3, r3, #804	; 0x324
      ec:	ldr	r3, [r3]
      f0:	ldr	r2, [fp, #-16]
      f4:	cmp	r2, r3
      f8:	blt	74 <write_index+0x74>
      fc:	ldr	r3, [fp, #-8]
     100:	add	r3, r3, #1
     104:	str	r3, [fp, #-8]
     108:	ldr	r3, [fp, #-12]
     10c:	add	r3, r3, #1
     110:	str	r3, [fp, #-12]
     114:	movw	r3, #0
     118:	movt	r3, #0
     11c:	ldr	r3, [r3, #136]	; 0x88
     120:	ldr	r2, [fp, #-12]
     124:	cmp	r2, r3
     128:	blt	28 <write_index+0x28>
     12c:	nop	{0}
     130:	sub	sp, fp, #4
     134:	ldr	fp, [sp]
     138:	add	sp, sp, #4
     13c:	pop	{pc}		; (ldr pc, [sp], #4)

00000140 <write_basic_data>:
     140:	strd	r4, [sp, #-32]!	; 0xffffffe0
     144:	strd	r6, [sp, #8]
     148:	strd	r8, [sp, #16]
     14c:	str	fp, [sp, #24]
     150:	str	lr, [sp, #28]
     154:	add	fp, sp, #28
     158:	sub	sp, sp, #216	; 0xd8
     15c:	str	r0, [fp, #-224]	; 0xffffff20
     160:	str	r1, [fp, #-228]	; 0xffffff1c
     164:	movw	r3, #0
     168:	movt	r3, #0
     16c:	ldr	r3, [r3]
     170:	cmp	r3, #0
     174:	beq	180 <write_basic_data+0x40>
     178:	ldr	r0, [fp, #-224]	; 0xffffff20
     17c:	bl	0 <write_index>
     180:	movw	r3, #0
     184:	movt	r3, #0
     188:	ldr	r2, [fp, #-228]	; 0xffffff1c
     18c:	add	r2, r2, #2
     190:	ldr	r3, [r3, r2, lsl #2]
     194:	sub	r2, fp, #56	; 0x38
     198:	mov	r1, r2
     19c:	mov	r0, r3
     1a0:	bl	0 <coda_type_get_class>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	beq	1b4 <write_basic_data+0x74>
     1b0:	bl	0 <handle_coda_error>
     1b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
     1b8:	cmp	r3, #6
     1bc:	ldrls	pc, [pc, r3, lsl #2]
     1c0:	b	9e8 <write_basic_data+0x8a8>
     1c4:	.word	0x000009bc
     1c8:	.word	0x000009bc
     1cc:	.word	0x000001e0
     1d0:	.word	0x000001e0
     1d4:	.word	0x000001e0
     1d8:	.word	0x000001e0
     1dc:	.word	0x000007d4
     1e0:	movw	r3, #0
     1e4:	movt	r3, #0
     1e8:	ldr	r2, [fp, #-228]	; 0xffffff1c
     1ec:	add	r2, r2, #2
     1f0:	ldr	r3, [r3, r2, lsl #2]
     1f4:	sub	r2, fp, #60	; 0x3c
     1f8:	mov	r1, r2
     1fc:	mov	r0, r3
     200:	bl	0 <coda_type_get_read_type>
     204:	mov	r3, r0
     208:	cmp	r3, #0
     20c:	beq	214 <write_basic_data+0xd4>
     210:	bl	0 <handle_coda_error>
     214:	ldr	r3, [fp, #-60]	; 0xffffffc4
     218:	add	r3, r3, #1
     21c:	cmp	r3, #13
     220:	ldrls	pc, [pc, r3, lsl #2]
     224:	b	9dc <write_basic_data+0x89c>
     228:	.word	0x000007b0
     22c:	.word	0x00000654
     230:	.word	0x00000690
     234:	.word	0x00000654
     238:	.word	0x00000690
     23c:	.word	0x00000654
     240:	.word	0x00000690
     244:	.word	0x000006cc
     248:	.word	0x00000710
     24c:	.word	0x00000754
     250:	.word	0x00000754
     254:	.word	0x00000260
     258:	.word	0x000002c4
     25c:	.word	0x000003a0
     260:	sub	r3, fp, #61	; 0x3d
     264:	mov	r1, r3
     268:	ldr	r0, [pc, #1956]	; a14 <write_basic_data+0x8d4>
     26c:	bl	0 <coda_cursor_read_char>
     270:	mov	r3, r0
     274:	cmp	r3, #0
     278:	beq	280 <write_basic_data+0x140>
     27c:	bl	0 <handle_coda_error>
     280:	movw	r3, #0
     284:	movt	r3, #0
     288:	ldr	r3, [r3]
     28c:	cmp	r3, #0
     290:	beq	2b0 <write_basic_data+0x170>
     294:	ldrb	r3, [fp, #-61]	; 0xffffffc3
     298:	mov	r2, r3
     29c:	movw	r1, #0
     2a0:	movt	r1, #0
     2a4:	ldr	r0, [fp, #-224]	; 0xffffff20
     2a8:	bl	0 <fprintf>
     2ac:	b	7d0 <write_basic_data+0x690>
     2b0:	ldrb	r3, [fp, #-61]	; 0xffffffc3
     2b4:	ldr	r1, [fp, #-224]	; 0xffffff20
     2b8:	mov	r0, r3
     2bc:	bl	0 <fputc>
     2c0:	b	7d0 <write_basic_data+0x690>
     2c4:	sub	r3, fp, #68	; 0x44
     2c8:	mov	r1, r3
     2cc:	ldr	r0, [pc, #1856]	; a14 <write_basic_data+0x8d4>
     2d0:	bl	0 <coda_cursor_get_string_length>
     2d4:	mov	r3, r0
     2d8:	cmp	r3, #0
     2dc:	beq	2e4 <write_basic_data+0x1a4>
     2e0:	bl	0 <handle_coda_error>
     2e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
     2e8:	add	r3, r3, #1
     2ec:	mov	r0, r3
     2f0:	bl	0 <malloc>
     2f4:	mov	r3, r0
     2f8:	str	r3, [fp, #-36]	; 0xffffffdc
     2fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     300:	cmp	r3, #0
     304:	bne	334 <write_basic_data+0x1f4>
     308:	ldr	r3, [fp, #-68]	; 0xffffffbc
     30c:	add	r2, r3, #1
     310:	mov	r3, #126	; 0x7e
     314:	str	r3, [sp]
     318:	movw	r3, #0
     31c:	movt	r3, #0
     320:	movw	r1, #0
     324:	movt	r1, #0
     328:	mvn	r0, #0
     32c:	bl	0 <coda_set_error>
     330:	bl	0 <handle_coda_error>
     334:	ldr	r3, [fp, #-68]	; 0xffffffbc
     338:	add	r3, r3, #1
     33c:	mov	r2, r3
     340:	ldr	r1, [fp, #-36]	; 0xffffffdc
     344:	ldr	r0, [pc, #1736]	; a14 <write_basic_data+0x8d4>
     348:	bl	0 <coda_cursor_read_string>
     34c:	mov	r3, r0
     350:	cmp	r3, #0
     354:	beq	35c <write_basic_data+0x21c>
     358:	bl	0 <handle_coda_error>
     35c:	movw	r3, #0
     360:	movt	r3, #0
     364:	ldr	r3, [r3]
     368:	cmp	r3, #0
     36c:	beq	388 <write_basic_data+0x248>
     370:	ldr	r2, [fp, #-36]	; 0xffffffdc
     374:	movw	r1, #0
     378:	movt	r1, #0
     37c:	ldr	r0, [fp, #-224]	; 0xffffff20
     380:	bl	0 <fprintf>
     384:	b	394 <write_basic_data+0x254>
     388:	ldr	r1, [fp, #-224]	; 0xffffff20
     38c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     390:	bl	0 <fputs>
     394:	ldr	r0, [fp, #-36]	; 0xffffffdc
     398:	bl	0 <free>
     39c:	b	7d0 <write_basic_data+0x690>
     3a0:	sub	r3, fp, #76	; 0x4c
     3a4:	mov	r1, r3
     3a8:	ldr	r0, [pc, #1636]	; a14 <write_basic_data+0x8d4>
     3ac:	bl	0 <coda_cursor_get_bit_size>
     3b0:	mov	r3, r0
     3b4:	cmp	r3, #0
     3b8:	beq	3c0 <write_basic_data+0x280>
     3bc:	bl	0 <handle_coda_error>
     3c0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
     3c4:	mov	r2, #0
     3c8:	mov	r3, #0
     3cc:	lsr	r2, r0, #3
     3d0:	orr	r2, r2, r1, lsl #29
     3d4:	asr	r3, r1, #3
     3d8:	ldrd	r0, [fp, #-76]	; 0xffffffb4
     3dc:	mov	r8, #7
     3e0:	mov	r9, #0
     3e4:	and	r6, r0, r8
     3e8:	and	r7, r1, r9
     3ec:	orrs	r1, r6, r7
     3f0:	beq	400 <write_basic_data+0x2c0>
     3f4:	mov	r0, #1
     3f8:	mov	r1, #0
     3fc:	b	408 <write_basic_data+0x2c8>
     400:	mov	r0, #0
     404:	mov	r1, #0
     408:	adds	r4, r0, r2
     40c:	adc	r5, r1, r3
     410:	strd	r4, [fp, #-44]	; 0xffffffd4
     414:	ldr	r3, [fp, #-44]	; 0xffffffd4
     418:	mov	r0, r3
     41c:	bl	0 <malloc>
     420:	mov	r3, r0
     424:	str	r3, [fp, #-48]	; 0xffffffd0
     428:	ldr	r3, [fp, #-48]	; 0xffffffd0
     42c:	cmp	r3, #0
     430:	bne	45c <write_basic_data+0x31c>
     434:	ldr	r2, [fp, #-44]	; 0xffffffd4
     438:	mov	r3, #163	; 0xa3
     43c:	str	r3, [sp]
     440:	movw	r3, #0
     444:	movt	r3, #0
     448:	movw	r1, #0
     44c:	movt	r1, #0
     450:	mvn	r0, #0
     454:	bl	0 <coda_set_error>
     458:	bl	0 <handle_coda_error>
     45c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
     460:	strd	r2, [sp]
     464:	mov	r2, #0
     468:	mov	r3, #0
     46c:	ldr	r1, [fp, #-48]	; 0xffffffd0
     470:	ldr	r0, [pc, #1436]	; a14 <write_basic_data+0x8d4>
     474:	bl	0 <coda_cursor_read_bits>
     478:	mov	r3, r0
     47c:	cmp	r3, #0
     480:	beq	488 <write_basic_data+0x348>
     484:	bl	0 <handle_coda_error>
     488:	mov	r3, #0
     48c:	str	r3, [fp, #-32]	; 0xffffffe0
     490:	b	62c <write_basic_data+0x4ec>
     494:	ldr	r3, [fp, #-32]	; 0xffffffe0
     498:	ldr	r2, [fp, #-48]	; 0xffffffd0
     49c:	add	r3, r2, r3
     4a0:	ldrb	r3, [r3]
     4a4:	strb	r3, [fp, #-49]	; 0xffffffcf
     4a8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
     4ac:	cmp	r3, #10
     4b0:	beq	550 <write_basic_data+0x410>
     4b4:	cmp	r3, #10
     4b8:	bgt	4d8 <write_basic_data+0x398>
     4bc:	cmp	r3, #8
     4c0:	beq	518 <write_basic_data+0x3d8>
     4c4:	cmp	r3, #8
     4c8:	bgt	534 <write_basic_data+0x3f4>
     4cc:	cmp	r3, #7
     4d0:	beq	4fc <write_basic_data+0x3bc>
     4d4:	b	5dc <write_basic_data+0x49c>
     4d8:	cmp	r3, #12
     4dc:	beq	588 <write_basic_data+0x448>
     4e0:	cmp	r3, #12
     4e4:	blt	56c <write_basic_data+0x42c>
     4e8:	cmp	r3, #13
     4ec:	beq	5a4 <write_basic_data+0x464>
     4f0:	cmp	r3, #92	; 0x5c
     4f4:	beq	5c0 <write_basic_data+0x480>
     4f8:	b	5dc <write_basic_data+0x49c>
     4fc:	ldr	r3, [fp, #-224]	; 0xffffff20
     500:	mov	r2, #2
     504:	mov	r1, #1
     508:	movw	r0, #0
     50c:	movt	r0, #0
     510:	bl	0 <fwrite>
     514:	b	620 <write_basic_data+0x4e0>
     518:	ldr	r3, [fp, #-224]	; 0xffffff20
     51c:	mov	r2, #2
     520:	mov	r1, #1
     524:	movw	r0, #0
     528:	movt	r0, #0
     52c:	bl	0 <fwrite>
     530:	b	620 <write_basic_data+0x4e0>
     534:	ldr	r3, [fp, #-224]	; 0xffffff20
     538:	mov	r2, #2
     53c:	mov	r1, #1
     540:	movw	r0, #0
     544:	movt	r0, #0
     548:	bl	0 <fwrite>
     54c:	b	620 <write_basic_data+0x4e0>
     550:	ldr	r3, [fp, #-224]	; 0xffffff20
     554:	mov	r2, #2
     558:	mov	r1, #1
     55c:	movw	r0, #0
     560:	movt	r0, #0
     564:	bl	0 <fwrite>
     568:	b	620 <write_basic_data+0x4e0>
     56c:	ldr	r3, [fp, #-224]	; 0xffffff20
     570:	mov	r2, #2
     574:	mov	r1, #1
     578:	movw	r0, #0
     57c:	movt	r0, #0
     580:	bl	0 <fwrite>
     584:	b	620 <write_basic_data+0x4e0>
     588:	ldr	r3, [fp, #-224]	; 0xffffff20
     58c:	mov	r2, #2
     590:	mov	r1, #1
     594:	movw	r0, #0
     598:	movt	r0, #0
     59c:	bl	0 <fwrite>
     5a0:	b	620 <write_basic_data+0x4e0>
     5a4:	ldr	r3, [fp, #-224]	; 0xffffff20
     5a8:	mov	r2, #2
     5ac:	mov	r1, #1
     5b0:	movw	r0, #0
     5b4:	movt	r0, #0
     5b8:	bl	0 <fwrite>
     5bc:	b	620 <write_basic_data+0x4e0>
     5c0:	ldr	r3, [fp, #-224]	; 0xffffff20
     5c4:	mov	r2, #2
     5c8:	mov	r1, #1
     5cc:	movw	r0, #0
     5d0:	movt	r0, #0
     5d4:	bl	0 <fwrite>
     5d8:	b	620 <write_basic_data+0x4e0>
     5dc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
     5e0:	cmp	r3, #31
     5e4:	bls	608 <write_basic_data+0x4c8>
     5e8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
     5ec:	cmp	r3, #126	; 0x7e
     5f0:	bhi	608 <write_basic_data+0x4c8>
     5f4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
     5f8:	ldr	r1, [fp, #-224]	; 0xffffff20
     5fc:	mov	r0, r3
     600:	bl	0 <fputc>
     604:	b	620 <write_basic_data+0x4e0>
     608:	ldrb	r3, [fp, #-49]	; 0xffffffcf
     60c:	mov	r2, r3
     610:	movw	r1, #0
     614:	movt	r1, #0
     618:	ldr	r0, [fp, #-224]	; 0xffffff20
     61c:	bl	0 <fprintf>
     620:	ldr	r3, [fp, #-32]	; 0xffffffe0
     624:	add	r3, r3, #1
     628:	str	r3, [fp, #-32]	; 0xffffffe0
     62c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     630:	mov	r0, r3
     634:	asr	r1, r0, #31
     638:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     63c:	cmp	r0, r2
     640:	sbcs	r3, r1, r3
     644:	blt	494 <write_basic_data+0x354>
     648:	ldr	r0, [fp, #-48]	; 0xffffffd0
     64c:	bl	0 <free>
     650:	b	7d0 <write_basic_data+0x690>
     654:	sub	r3, fp, #80	; 0x50
     658:	mov	r1, r3
     65c:	ldr	r0, [pc, #944]	; a14 <write_basic_data+0x8d4>
     660:	bl	0 <coda_cursor_read_int32>
     664:	mov	r3, r0
     668:	cmp	r3, #0
     66c:	beq	674 <write_basic_data+0x534>
     670:	bl	0 <handle_coda_error>
     674:	ldr	r3, [fp, #-80]	; 0xffffffb0
     678:	mov	r2, r3
     67c:	movw	r1, #0
     680:	movt	r1, #0
     684:	ldr	r0, [fp, #-224]	; 0xffffff20
     688:	bl	0 <fprintf>
     68c:	b	7d0 <write_basic_data+0x690>
     690:	sub	r3, fp, #84	; 0x54
     694:	mov	r1, r3
     698:	ldr	r0, [pc, #884]	; a14 <write_basic_data+0x8d4>
     69c:	bl	0 <coda_cursor_read_uint32>
     6a0:	mov	r3, r0
     6a4:	cmp	r3, #0
     6a8:	beq	6b0 <write_basic_data+0x570>
     6ac:	bl	0 <handle_coda_error>
     6b0:	ldr	r3, [fp, #-84]	; 0xffffffac
     6b4:	mov	r2, r3
     6b8:	movw	r1, #0
     6bc:	movt	r1, #0
     6c0:	ldr	r0, [fp, #-224]	; 0xffffff20
     6c4:	bl	0 <fprintf>
     6c8:	b	7d0 <write_basic_data+0x690>
     6cc:	sub	r3, fp, #92	; 0x5c
     6d0:	mov	r1, r3
     6d4:	ldr	r0, [pc, #824]	; a14 <write_basic_data+0x8d4>
     6d8:	bl	0 <coda_cursor_read_int64>
     6dc:	mov	r3, r0
     6e0:	cmp	r3, #0
     6e4:	beq	6ec <write_basic_data+0x5ac>
     6e8:	bl	0 <handle_coda_error>
     6ec:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     6f0:	sub	r3, fp, #116	; 0x74
     6f4:	mov	r2, r3
     6f8:	bl	0 <coda_str64>
     6fc:	sub	r3, fp, #116	; 0x74
     700:	ldr	r1, [fp, #-224]	; 0xffffff20
     704:	mov	r0, r3
     708:	bl	0 <fputs>
     70c:	b	7d0 <write_basic_data+0x690>
     710:	sub	r3, fp, #124	; 0x7c
     714:	mov	r1, r3
     718:	ldr	r0, [pc, #756]	; a14 <write_basic_data+0x8d4>
     71c:	bl	0 <coda_cursor_read_uint64>
     720:	mov	r3, r0
     724:	cmp	r3, #0
     728:	beq	730 <write_basic_data+0x5f0>
     72c:	bl	0 <handle_coda_error>
     730:	ldrd	r0, [fp, #-124]	; 0xffffff84
     734:	sub	r3, fp, #148	; 0x94
     738:	mov	r2, r3
     73c:	bl	0 <coda_str64u>
     740:	sub	r3, fp, #148	; 0x94
     744:	ldr	r1, [fp, #-224]	; 0xffffff20
     748:	mov	r0, r3
     74c:	bl	0 <fputs>
     750:	b	7d0 <write_basic_data+0x690>
     754:	sub	r3, fp, #156	; 0x9c
     758:	mov	r1, r3
     75c:	ldr	r0, [pc, #688]	; a14 <write_basic_data+0x8d4>
     760:	bl	0 <coda_cursor_read_double>
     764:	mov	r3, r0
     768:	cmp	r3, #0
     76c:	beq	774 <write_basic_data+0x634>
     770:	bl	0 <handle_coda_error>
     774:	ldr	r3, [fp, #-60]	; 0xffffffc4
     778:	cmp	r3, #8
     77c:	bne	798 <write_basic_data+0x658>
     780:	ldrd	r2, [fp, #-156]	; 0xffffff64
     784:	movw	r1, #0
     788:	movt	r1, #0
     78c:	ldr	r0, [fp, #-224]	; 0xffffff20
     790:	bl	0 <fprintf>
     794:	b	7d0 <write_basic_data+0x690>
     798:	ldrd	r2, [fp, #-156]	; 0xffffff64
     79c:	movw	r1, #0
     7a0:	movt	r1, #0
     7a4:	ldr	r0, [fp, #-224]	; 0xffffff20
     7a8:	bl	0 <fprintf>
     7ac:	b	7d0 <write_basic_data+0x690>
     7b0:	movw	r3, #0
     7b4:	movt	r3, #0
     7b8:	movw	r2, #294	; 0x126
     7bc:	movw	r1, #0
     7c0:	movt	r1, #0
     7c4:	movw	r0, #0
     7c8:	movt	r0, #0
     7cc:	bl	0 <__assert_fail>
     7d0:	b	9dc <write_basic_data+0x89c>
     7d4:	movw	r3, #0
     7d8:	movt	r3, #0
     7dc:	ldr	r2, [fp, #-228]	; 0xffffff1c
     7e0:	add	r2, r2, #2
     7e4:	ldr	r3, [r3, r2, lsl #2]
     7e8:	sub	r2, fp, #160	; 0xa0
     7ec:	mov	r1, r2
     7f0:	mov	r0, r3
     7f4:	bl	0 <coda_type_get_special_type>
     7f8:	mov	r3, r0
     7fc:	cmp	r3, #0
     800:	beq	808 <write_basic_data+0x6c8>
     804:	bl	0 <handle_coda_error>
     808:	ldr	r3, [fp, #-160]	; 0xffffff60
     80c:	cmp	r3, #3
     810:	ldrls	pc, [pc, r3, lsl #2]
     814:	b	9e4 <write_basic_data+0x8a4>
     818:	.word	0x000009b4
     81c:	.word	0x00000828
     820:	.word	0x00000828
     824:	.word	0x0000095c
     828:	sub	r3, fp, #172	; 0xac
     82c:	mov	r1, r3
     830:	ldr	r0, [pc, #476]	; a14 <write_basic_data+0x8d4>
     834:	bl	0 <coda_cursor_read_double>
     838:	mov	r3, r0
     83c:	cmp	r3, #0
     840:	beq	848 <write_basic_data+0x708>
     844:	bl	0 <handle_coda_error>
     848:	ldr	r3, [fp, #-160]	; 0xffffff60
     84c:	cmp	r3, #2
     850:	bne	940 <write_basic_data+0x800>
     854:	movw	r3, #0
     858:	movt	r3, #0
     85c:	ldr	r3, [r3]
     860:	cmp	r3, #0
     864:	beq	940 <write_basic_data+0x800>
     868:	vldr	d7, [fp, #-172]	; 0xffffff54
     86c:	vmov.f64	d0, d7
     870:	bl	0 <coda_isNaN>
     874:	mov	r3, r0
     878:	cmp	r3, #0
     87c:	bne	898 <write_basic_data+0x758>
     880:	vldr	d7, [fp, #-172]	; 0xffffff54
     884:	vmov.f64	d0, d7
     888:	bl	0 <coda_isInf>
     88c:	mov	r3, r0
     890:	cmp	r3, #0
     894:	beq	8d0 <write_basic_data+0x790>
     898:	movw	r2, #0
     89c:	movt	r2, #0
     8a0:	sub	r3, fp, #200	; 0xc8
     8a4:	ldrd	r0, [r2]
     8a8:	strd	r0, [r3]
     8ac:	ldrd	r0, [r2, #8]
     8b0:	strd	r0, [r3, #8]
     8b4:	ldrd	r0, [r2, #16]
     8b8:	strd	r0, [r3, #16]
     8bc:	ldrh	r1, [r2, #24]
     8c0:	strh	r1, [r3, #24]
     8c4:	ldrb	r2, [r2, #26]
     8c8:	strb	r2, [r3, #26]
     8cc:	b	8fc <write_basic_data+0x7bc>
     8d0:	vldr	d7, [fp, #-172]	; 0xffffff54
     8d4:	sub	r3, fp, #200	; 0xc8
     8d8:	mov	r1, r3
     8dc:	movw	r0, #0
     8e0:	movt	r0, #0
     8e4:	vmov.f64	d0, d7
     8e8:	bl	0 <coda_time_double_to_string>
     8ec:	mov	r3, r0
     8f0:	cmp	r3, #0
     8f4:	beq	8fc <write_basic_data+0x7bc>
     8f8:	bl	0 <handle_coda_error>
     8fc:	movw	r3, #0
     900:	movt	r3, #0
     904:	ldr	r3, [r3]
     908:	cmp	r3, #0
     90c:	beq	92c <write_basic_data+0x7ec>
     910:	sub	r3, fp, #200	; 0xc8
     914:	mov	r2, r3
     918:	movw	r1, #0
     91c:	movt	r1, #0
     920:	ldr	r0, [fp, #-224]	; 0xffffff20
     924:	bl	0 <fprintf>
     928:	b	958 <write_basic_data+0x818>
     92c:	sub	r3, fp, #200	; 0xc8
     930:	ldr	r1, [fp, #-224]	; 0xffffff20
     934:	mov	r0, r3
     938:	bl	0 <fputs>
     93c:	b	958 <write_basic_data+0x818>
     940:	ldrd	r2, [fp, #-172]	; 0xffffff54
     944:	movw	r1, #0
     948:	movt	r1, #0
     94c:	ldr	r0, [fp, #-224]	; 0xffffff20
     950:	bl	0 <fprintf>
     954:	b	9b8 <write_basic_data+0x878>
     958:	b	9b8 <write_basic_data+0x878>
     95c:	sub	r3, fp, #220	; 0xdc
     960:	mov	r1, r3
     964:	ldr	r0, [pc, #168]	; a14 <write_basic_data+0x8d4>
     968:	bl	0 <coda_cursor_read_complex_double_pair>
     96c:	mov	r3, r0
     970:	cmp	r3, #0
     974:	beq	97c <write_basic_data+0x83c>
     978:	bl	0 <handle_coda_error>
     97c:	ldrd	r0, [fp, #-220]	; 0xffffff24
     980:	movw	r3, #0
     984:	movt	r3, #0
     988:	ldr	ip, [r3]
     98c:	ldrd	r2, [fp, #-212]	; 0xffffff2c
     990:	strd	r2, [sp, #8]
     994:	str	ip, [sp]
     998:	mov	r2, r0
     99c:	mov	r3, r1
     9a0:	movw	r1, #0
     9a4:	movt	r1, #0
     9a8:	ldr	r0, [fp, #-224]	; 0xffffff20
     9ac:	bl	0 <fprintf>
     9b0:	b	9b8 <write_basic_data+0x878>
     9b4:	nop	{0}
     9b8:	b	9e4 <write_basic_data+0x8a4>
     9bc:	movw	r3, #0
     9c0:	movt	r3, #0
     9c4:	mov	r2, #368	; 0x170
     9c8:	movw	r1, #0
     9cc:	movt	r1, #0
     9d0:	movw	r0, #0
     9d4:	movt	r0, #0
     9d8:	bl	0 <__assert_fail>
     9dc:	nop	{0}
     9e0:	b	9e8 <write_basic_data+0x8a8>
     9e4:	nop	{0}
     9e8:	ldr	r1, [fp, #-224]	; 0xffffff20
     9ec:	mov	r0, #10
     9f0:	bl	0 <fputc>
     9f4:	nop	{0}
     9f8:	sub	sp, fp, #28
     9fc:	ldrd	r4, [sp]
     a00:	ldrd	r6, [sp, #8]
     a04:	ldrd	r8, [sp, #16]
     a08:	ldr	fp, [sp, #24]
     a0c:	add	sp, sp, #28
     a10:	pop	{pc}		; (ldr pc, [sp], #4)
     a14:	.word	0x00000090

00000a18 <write_data>:
     a18:	str	fp, [sp, #-8]!
     a1c:	str	lr, [sp, #4]
     a20:	add	fp, sp, #4
     a24:	sub	sp, sp, #80	; 0x50
     a28:	str	r0, [fp, #-72]	; 0xffffffb8
     a2c:	str	r1, [fp, #-76]	; 0xffffffb4
     a30:	str	r2, [fp, #-80]	; 0xffffffb0
     a34:	str	r3, [fp, #-84]	; 0xffffffac
     a38:	movw	r3, #0
     a3c:	movt	r3, #0
     a40:	ldr	r2, [fp, #-76]	; 0xffffffb4
     a44:	add	r2, r2, #2
     a48:	ldr	r3, [r3, r2, lsl #2]
     a4c:	sub	r2, fp, #32
     a50:	mov	r1, r2
     a54:	mov	r0, r3
     a58:	bl	0 <coda_type_get_class>
     a5c:	mov	r3, r0
     a60:	cmp	r3, #0
     a64:	beq	a6c <write_data+0x54>
     a68:	bl	0 <handle_coda_error>
     a6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a70:	cmp	r3, #0
     a74:	beq	e38 <write_data+0x420>
     a78:	cmp	r3, #1
     a7c:	bne	ee0 <write_data+0x4c8>
     a80:	ldr	r2, [fp, #-80]	; 0xffffffb0
     a84:	mov	r3, r2
     a88:	lsl	r3, r3, #2
     a8c:	add	r3, r3, r2
     a90:	lsl	r3, r3, #4
     a94:	add	r2, r3, #800	; 0x320
     a98:	movw	r3, #0
     a9c:	movt	r3, #0
     aa0:	add	r3, r2, r3
     aa4:	str	r3, [fp, #-20]	; 0xffffffec
     aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
     aac:	ldr	r3, [r3]
     ab0:	str	r3, [fp, #-24]	; 0xffffffe8
     ab4:	ldr	r3, [fp, #-80]	; 0xffffffb0
     ab8:	cmp	r3, #0
     abc:	bne	acc <write_data+0xb4>
     ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ac4:	mov	r2, #0
     ac8:	str	r2, [r3, #44]	; 0x2c
     acc:	movw	r3, #0
     ad0:	movt	r3, #0
     ad4:	ldr	r2, [r3, #104]	; 0x68
     ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
     adc:	ldr	r1, [r3, #4]
     ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ae4:	add	r3, r1, r3
     ae8:	cmp	r2, r3
     aec:	movge	r3, #1
     af0:	movlt	r3, #0
     af4:	uxtb	r3, r3
     af8:	str	r3, [fp, #-28]	; 0xffffffe4
     afc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b00:	cmp	r3, #0
     b04:	beq	b64 <write_data+0x14c>
     b08:	movw	r3, #0
     b0c:	movt	r3, #0
     b10:	ldr	r3, [r3, #3360]	; 0xd20
     b14:	sub	r3, r3, #1
     b18:	ldr	r2, [fp, #-80]	; 0xffffffb0
     b1c:	cmp	r2, r3
     b20:	bge	b64 <write_data+0x14c>
     b24:	ldr	r3, [fp, #-20]	; 0xffffffec
     b28:	ldr	r3, [r3, #44]	; 0x2c
     b2c:	ldr	r2, [fp, #-20]	; 0xffffffec
     b30:	ldr	r2, [r2, #40]	; 0x28
     b34:	ldr	r1, [fp, #-80]	; 0xffffffb0
     b38:	add	r1, r1, #1
     b3c:	mul	r0, r2, r3
     b40:	movw	r2, #0
     b44:	movt	r2, #0
     b48:	mov	r3, r1
     b4c:	lsl	r3, r3, #2
     b50:	add	r3, r3, r1
     b54:	lsl	r3, r3, #4
     b58:	add	r3, r2, r3
     b5c:	add	r3, r3, #844	; 0x34c
     b60:	str	r0, [r3]
     b64:	mov	r3, #1
     b68:	str	r3, [fp, #-8]
     b6c:	mov	r3, #0
     b70:	str	r3, [fp, #-12]
     b74:	b	c60 <write_data+0x248>
     b78:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b7c:	ldr	r3, [fp, #-12]
     b80:	add	r2, r2, r3
     b84:	movw	r3, #0
     b88:	movt	r3, #0
     b8c:	add	r2, r2, #18
     b90:	ldr	r3, [r3, r2, lsl #2]
     b94:	cmp	r3, #0
     b98:	beq	bec <write_data+0x1d4>
     b9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ba0:	ldr	r3, [fp, #-12]
     ba4:	add	r3, r2, r3
     ba8:	movw	r2, #0
     bac:	movt	r2, #0
     bb0:	add	r3, r3, #26
     bb4:	lsl	r3, r3, #2
     bb8:	add	r3, r2, r3
     bbc:	ldr	r2, [r3, #4]
     bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
     bc4:	ldr	r3, [r3, #44]	; 0x2c
     bc8:	lsl	r3, r3, #2
     bcc:	add	r3, r2, r3
     bd0:	ldr	r2, [r3]
     bd4:	ldr	r3, [fp, #-12]
     bd8:	lsl	r3, r3, #2
     bdc:	sub	r1, fp, #4
     be0:	add	r3, r1, r3
     be4:	str	r2, [r3, #-64]	; 0xffffffc0
     be8:	b	c20 <write_data+0x208>
     bec:	ldr	r2, [fp, #-24]	; 0xffffffe8
     bf0:	ldr	r3, [fp, #-12]
     bf4:	add	r3, r2, r3
     bf8:	movw	r2, #0
     bfc:	movt	r2, #0
     c00:	lsl	r3, r3, #2
     c04:	add	r3, r2, r3
     c08:	ldr	r2, [r3, #4]
     c0c:	ldr	r3, [fp, #-12]
     c10:	lsl	r3, r3, #2
     c14:	sub	r1, fp, #4
     c18:	add	r3, r1, r3
     c1c:	str	r2, [r3, #-64]	; 0xffffffc0
     c20:	ldr	r3, [fp, #-12]
     c24:	lsl	r3, r3, #2
     c28:	sub	r2, fp, #4
     c2c:	add	r3, r2, r3
     c30:	ldr	r2, [r3, #-64]	; 0xffffffc0
     c34:	ldr	r3, [fp, #-8]
     c38:	mul	r3, r2, r3
     c3c:	str	r3, [fp, #-8]
     c40:	ldr	r3, [fp, #-20]	; 0xffffffec
     c44:	ldr	r2, [fp, #-12]
     c48:	add	r2, r2, #12
     c4c:	mov	r1, #0
     c50:	str	r1, [r3, r2, lsl #2]
     c54:	ldr	r3, [fp, #-12]
     c58:	add	r3, r3, #1
     c5c:	str	r3, [fp, #-12]
     c60:	ldr	r3, [fp, #-20]	; 0xffffffec
     c64:	ldr	r3, [r3, #4]
     c68:	ldr	r2, [fp, #-12]
     c6c:	cmp	r2, r3
     c70:	blt	b78 <write_data+0x160>
     c74:	ldr	r3, [fp, #-8]
     c78:	cmp	r3, #0
     c7c:	beq	ef8 <write_data+0x4e0>
     c80:	ldr	r0, [pc, #640]	; f08 <write_data+0x4f0>
     c84:	bl	0 <coda_cursor_goto_first_array_element>
     c88:	mov	r3, r0
     c8c:	cmp	r3, #0
     c90:	beq	c98 <write_data+0x280>
     c94:	bl	0 <handle_coda_error>
     c98:	mov	r3, #0
     c9c:	str	r3, [fp, #-12]
     ca0:	b	e1c <write_data+0x404>
     ca4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     ca8:	add	r1, r3, #1
     cac:	ldr	r3, [fp, #-80]	; 0xffffffb0
     cb0:	add	r2, r3, #1
     cb4:	ldr	r3, [fp, #-84]	; 0xffffffac
     cb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
     cbc:	bl	a18 <write_data>
     cc0:	ldr	r3, [fp, #-8]
     cc4:	sub	r3, r3, #1
     cc8:	ldr	r2, [fp, #-12]
     ccc:	cmp	r2, r3
     cd0:	bge	e10 <write_data+0x3f8>
     cd4:	ldr	r0, [pc, #556]	; f08 <write_data+0x4f0>
     cd8:	bl	0 <coda_cursor_goto_next_array_element>
     cdc:	mov	r3, r0
     ce0:	cmp	r3, #0
     ce4:	beq	cec <write_data+0x2d4>
     ce8:	bl	0 <handle_coda_error>
     cec:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cf0:	cmp	r3, #0
     cf4:	beq	d68 <write_data+0x350>
     cf8:	movw	r3, #0
     cfc:	movt	r3, #0
     d00:	ldr	r3, [r3, #3360]	; 0xd20
     d04:	sub	r3, r3, #1
     d08:	ldr	r2, [fp, #-80]	; 0xffffffb0
     d0c:	cmp	r2, r3
     d10:	bge	d68 <write_data+0x350>
     d14:	ldr	r3, [fp, #-80]	; 0xffffffb0
     d18:	add	r1, r3, #1
     d1c:	movw	r2, #0
     d20:	movt	r2, #0
     d24:	mov	r3, r1
     d28:	lsl	r3, r3, #2
     d2c:	add	r3, r3, r1
     d30:	lsl	r3, r3, #4
     d34:	add	r3, r2, r3
     d38:	add	r3, r3, #844	; 0x34c
     d3c:	ldr	r3, [r3]
     d40:	add	r0, r3, #1
     d44:	movw	r2, #0
     d48:	movt	r2, #0
     d4c:	mov	r3, r1
     d50:	lsl	r3, r3, #2
     d54:	add	r3, r3, r1
     d58:	lsl	r3, r3, #4
     d5c:	add	r3, r2, r3
     d60:	add	r3, r3, #844	; 0x34c
     d64:	str	r0, [r3]
     d68:	movw	r3, #0
     d6c:	movt	r3, #0
     d70:	ldr	r3, [r3]
     d74:	cmp	r3, #0
     d78:	beq	e10 <write_data+0x3f8>
     d7c:	ldr	r3, [fp, #-20]	; 0xffffffec
     d80:	ldr	r3, [r3, #4]
     d84:	sub	r3, r3, #1
     d88:	str	r3, [fp, #-16]
     d8c:	b	dfc <write_data+0x3e4>
     d90:	ldr	r3, [fp, #-20]	; 0xffffffec
     d94:	ldr	r2, [fp, #-16]
     d98:	add	r2, r2, #12
     d9c:	ldr	r3, [r3, r2, lsl #2]
     da0:	add	r1, r3, #1
     da4:	ldr	r3, [fp, #-20]	; 0xffffffec
     da8:	ldr	r2, [fp, #-16]
     dac:	add	r2, r2, #12
     db0:	str	r1, [r3, r2, lsl #2]
     db4:	ldr	r3, [fp, #-20]	; 0xffffffec
     db8:	ldr	r2, [fp, #-16]
     dbc:	add	r2, r2, #12
     dc0:	ldr	r2, [r3, r2, lsl #2]
     dc4:	ldr	r3, [fp, #-16]
     dc8:	lsl	r3, r3, #2
     dcc:	sub	r1, fp, #4
     dd0:	add	r3, r1, r3
     dd4:	ldr	r3, [r3, #-64]	; 0xffffffc0
     dd8:	cmp	r2, r3
     ddc:	bne	e0c <write_data+0x3f4>
     de0:	ldr	r3, [fp, #-16]
     de4:	sub	r2, r3, #1
     de8:	str	r2, [fp, #-16]
     dec:	ldr	r2, [fp, #-20]	; 0xffffffec
     df0:	add	r3, r3, #12
     df4:	mov	r1, #0
     df8:	str	r1, [r2, r3, lsl #2]
     dfc:	ldr	r3, [fp, #-16]
     e00:	cmp	r3, #0
     e04:	bge	d90 <write_data+0x378>
     e08:	b	e10 <write_data+0x3f8>
     e0c:	nop	{0}
     e10:	ldr	r3, [fp, #-12]
     e14:	add	r3, r3, #1
     e18:	str	r3, [fp, #-12]
     e1c:	ldr	r2, [fp, #-12]
     e20:	ldr	r3, [fp, #-8]
     e24:	cmp	r2, r3
     e28:	blt	ca4 <write_data+0x28c>
     e2c:	ldr	r0, [pc, #212]	; f08 <write_data+0x4f0>
     e30:	bl	0 <coda_cursor_goto_parent>
     e34:	b	ef8 <write_data+0x4e0>
     e38:	movw	r2, #0
     e3c:	movt	r2, #0
     e40:	ldr	r3, [fp, #-84]	; 0xffffffac
     e44:	add	r3, r3, #872	; 0x368
     e48:	lsl	r3, r3, #2
     e4c:	add	r3, r2, r3
     e50:	ldr	r3, [r3, #4]
     e54:	sub	r2, fp, #36	; 0x24
     e58:	mov	r1, r3
     e5c:	ldr	r0, [pc, #164]	; f08 <write_data+0x4f0>
     e60:	bl	0 <coda_cursor_get_record_field_available_status>
     e64:	mov	r3, r0
     e68:	cmp	r3, #0
     e6c:	beq	e74 <write_data+0x45c>
     e70:	bl	0 <handle_coda_error>
     e74:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e78:	cmp	r3, #0
     e7c:	beq	ef4 <write_data+0x4dc>
     e80:	movw	r2, #0
     e84:	movt	r2, #0
     e88:	ldr	r3, [fp, #-84]	; 0xffffffac
     e8c:	add	r3, r3, #872	; 0x368
     e90:	lsl	r3, r3, #2
     e94:	add	r3, r2, r3
     e98:	ldr	r3, [r3, #4]
     e9c:	mov	r1, r3
     ea0:	ldr	r0, [pc, #96]	; f08 <write_data+0x4f0>
     ea4:	bl	0 <coda_cursor_goto_record_field_by_index>
     ea8:	mov	r3, r0
     eac:	cmp	r3, #0
     eb0:	beq	eb8 <write_data+0x4a0>
     eb4:	bl	0 <handle_coda_error>
     eb8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     ebc:	add	r1, r3, #1
     ec0:	ldr	r3, [fp, #-84]	; 0xffffffac
     ec4:	add	r3, r3, #1
     ec8:	ldr	r2, [fp, #-80]	; 0xffffffb0
     ecc:	ldr	r0, [fp, #-72]	; 0xffffffb8
     ed0:	bl	a18 <write_data>
     ed4:	ldr	r0, [pc, #44]	; f08 <write_data+0x4f0>
     ed8:	bl	0 <coda_cursor_goto_parent>
     edc:	b	ef4 <write_data+0x4dc>
     ee0:	ldr	r1, [fp, #-76]	; 0xffffffb4
     ee4:	ldr	r0, [fp, #-72]	; 0xffffffb8
     ee8:	bl	140 <write_basic_data>
     eec:	nop	{0}
     ef0:	b	ef8 <write_data+0x4e0>
     ef4:	nop	{0}
     ef8:	sub	sp, fp, #4
     efc:	ldr	fp, [sp]
     f00:	add	sp, sp, #4
     f04:	pop	{pc}		; (ldr pc, [sp], #4)
     f08:	.word	0x00000090

00000f0c <export_data_element_to_ascii>:
     f0c:	str	fp, [sp, #-8]!
     f10:	str	lr, [sp, #4]
     f14:	add	fp, sp, #4
     f18:	movw	r3, #0
     f1c:	movt	r3, #0
     f20:	ldr	r3, [r3]
     f24:	cmp	r3, #0
     f28:	beq	f40 <export_data_element_to_ascii+0x34>
     f2c:	movw	r3, #0
     f30:	movt	r3, #0
     f34:	mov	r2, #0
     f38:	str	r2, [r3]
     f3c:	b	f58 <export_data_element_to_ascii+0x4c>
     f40:	movw	r3, #0
     f44:	movt	r3, #0
     f48:	ldr	r3, [r3]
     f4c:	mov	r1, r3
     f50:	mov	r0, #10
     f54:	bl	0 <fputc>
     f58:	movw	r3, #0
     f5c:	movt	r3, #0
     f60:	ldr	r3, [r3]
     f64:	cmp	r3, #0
     f68:	beq	fa0 <export_data_element_to_ascii+0x94>
     f6c:	movw	r3, #0
     f70:	movt	r3, #0
     f74:	ldr	r3, [r3]
     f78:	mov	r2, #0
     f7c:	mov	r1, #2
     f80:	mov	r0, r3
     f84:	bl	0 <print_full_field_name>
     f88:	movw	r3, #0
     f8c:	movt	r3, #0
     f90:	ldr	r3, [r3]
     f94:	mov	r1, r3
     f98:	mov	r0, #10
     f9c:	bl	0 <fputc>
     fa0:	movw	r3, #0
     fa4:	movt	r3, #0
     fa8:	ldr	r3, [r3]
     fac:	cmp	r3, #0
     fb0:	ble	fe4 <export_data_element_to_ascii+0xd8>
     fb4:	movw	r3, #0
     fb8:	movt	r3, #0
     fbc:	ldr	r3, [r3]
     fc0:	sub	r2, r3, #1
     fc4:	movw	r3, #0
     fc8:	movt	r3, #0
     fcc:	add	r2, r2, #38	; 0x26
     fd0:	lsl	r2, r2, #3
     fd4:	add	r3, r3, r2
     fd8:	ldrd	r2, [r3]
     fdc:	orrs	r3, r2, r3
     fe0:	beq	1004 <export_data_element_to_ascii+0xf8>
     fe4:	movw	r3, #0
     fe8:	movt	r3, #0
     fec:	ldr	r0, [r3]
     ff0:	mov	r3, #0
     ff4:	mov	r2, #0
     ff8:	mov	r1, #0
     ffc:	bl	a18 <write_data>
    1000:	b	1008 <export_data_element_to_ascii+0xfc>
    1004:	nop	{0}
    1008:	sub	sp, fp, #4
    100c:	ldr	fp, [sp]
    1010:	add	sp, sp, #4
    1014:	pop	{pc}		; (ldr pc, [sp], #4)
