
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <elapsed_realtime>:
   0:	push	{r4, lr}
   4:	sub	sp, sp, #8
   8:	mov	r1, #0
   c:	mov	r0, sp
  10:	bl	0 <gettimeofday>
  14:	ldr	r2, [pc, #84]	; 70 <elapsed_realtime+0x70>
  18:	vldr	d5, [pc, #72]	; 68 <elapsed_realtime+0x68>
  1c:	ldr	r3, [r2]
  20:	cmp	r3, #0
  24:	moveq	r4, sp
  28:	ldr	r3, [sp, #4]
  2c:	ldmeq	r4, {r0, r1}
  30:	stmeq	r2, {r0, r1}
  34:	ldr	r1, [r2, #4]
  38:	ldr	r2, [r2]
  3c:	sub	r3, r3, r1
  40:	vmov	s14, r3
  44:	ldr	r3, [sp]
  48:	sub	r3, r3, r2
  4c:	vcvt.f64.s32	d7, s14
  50:	vmov	s0, r3
  54:	vcvt.f64.s32	d0, s0
  58:	vdiv.f64	d6, d7, d5
  5c:	vadd.f64	d0, d6, d0
  60:	add	sp, sp, #8
  64:	pop	{r4, pc}
  68:	.word	0x00000000
  6c:	.word	0x412e8480
  70:	.word	0x00000000

00000074 <create_root_monster>:
  74:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  78:	mov	r4, r0
  7c:	bl	0 <flatcc_builder_reset>
  80:	mov	r3, #0
  84:	mov	r0, r4
  88:	mov	r2, r3
  8c:	ldr	r1, [pc, #448]	; 254 <create_root_monster+0x1e0>
  90:	bl	0 <flatcc_builder_start_buffer>
  94:	cmp	r0, #0
  98:	bne	a8 <create_root_monster+0x34>
  9c:	mov	r1, #36	; 0x24
  a0:	mov	r0, r4
  a4:	bl	0 <flatcc_builder_start_table>
  a8:	ldr	r1, [pc, #424]	; 258 <create_root_monster+0x1e4>
  ac:	mov	r0, r4
  b0:	bl	0 <flatcc_builder_create_string_str>
  b4:	subs	r5, r0, #0
  b8:	beq	d0 <create_root_monster+0x5c>
  bc:	mov	r1, #3
  c0:	mov	r0, r4
  c4:	bl	0 <flatcc_builder_table_add_offset>
  c8:	cmp	r0, #0
  cc:	strne	r5, [r0]
  d0:	mov	r0, r4
  d4:	bl	0 <flatcc_builder_start_offset_vector>
  d8:	ldr	r8, [pc, #380]	; 25c <create_root_monster+0x1e8>
  dc:	ldr	r7, [pc, #380]	; 260 <create_root_monster+0x1ec>
  e0:	mov	r9, #1000	; 0x3e8
  e4:	mov	r6, #7
  e8:	mov	sl, #1
  ec:	mov	r1, #36	; 0x24
  f0:	mov	r0, r4
  f4:	bl	0 <flatcc_builder_start_table>
  f8:	mov	r0, r4
  fc:	bl	0 <flatcc_builder_start_string>
 100:	mov	r5, #100	; 0x64
 104:	mov	r2, r6
 108:	mov	r1, r8
 10c:	mov	r0, r4
 110:	bl	0 <flatcc_builder_append_string>
 114:	subs	r5, r5, #1
 118:	bne	104 <create_root_monster+0x90>
 11c:	mov	r0, r4
 120:	bl	0 <flatcc_builder_end_string>
 124:	subs	r5, r0, #0
 128:	beq	140 <create_root_monster+0xcc>
 12c:	mov	r1, #3
 130:	mov	r0, r4
 134:	bl	0 <flatcc_builder_table_add_offset>
 138:	cmp	r0, #0
 13c:	strne	r5, [r0]
 140:	mvn	r3, #0
 144:	mov	r2, sl
 148:	mov	r1, #1
 14c:	mov	r0, r4
 150:	bl	0 <flatcc_builder_start_vector>
 154:	mov	r5, #100	; 0x64
 158:	mov	fp, #1000	; 0x3e8
 15c:	mov	r2, fp
 160:	mov	r1, r7
 164:	mov	r0, r4
 168:	bl	0 <flatcc_builder_append_vector>
 16c:	subs	r5, r5, #1
 170:	bne	15c <create_root_monster+0xe8>
 174:	mov	r0, r4
 178:	bl	0 <flatcc_builder_end_vector>
 17c:	subs	r5, r0, #0
 180:	beq	198 <create_root_monster+0x124>
 184:	mov	r1, #5
 188:	mov	r0, r4
 18c:	bl	0 <flatcc_builder_table_add_offset>
 190:	cmp	r0, #0
 194:	strne	r5, [r0]
 198:	mov	r2, sl
 19c:	ldr	r1, [pc, #192]	; 264 <create_root_monster+0x1f0>
 1a0:	mov	r0, r4
 1a4:	bl	0 <flatcc_builder_check_required>
 1a8:	cmp	r0, #0
 1ac:	beq	23c <create_root_monster+0x1c8>
 1b0:	mov	r0, r4
 1b4:	bl	0 <flatcc_builder_end_table>
 1b8:	subs	r1, r0, #0
 1bc:	beq	228 <create_root_monster+0x1b4>
 1c0:	mov	r0, r4
 1c4:	bl	0 <flatcc_builder_offset_vector_push>
 1c8:	subs	r9, r9, #1
 1cc:	bne	ec <create_root_monster+0x78>
 1d0:	mov	r0, r4
 1d4:	bl	0 <flatcc_builder_end_offset_vector>
 1d8:	subs	r5, r0, #0
 1dc:	beq	240 <create_root_monster+0x1cc>
 1e0:	mov	r1, #11
 1e4:	mov	r0, r4
 1e8:	bl	0 <flatcc_builder_table_add_offset>
 1ec:	mov	r2, #1
 1f0:	ldr	r1, [pc, #108]	; 264 <create_root_monster+0x1f0>
 1f4:	cmp	r0, #0
 1f8:	strne	r5, [r0]
 1fc:	mov	r0, r4
 200:	bl	0 <flatcc_builder_check_required>
 204:	cmp	r0, #0
 208:	beq	23c <create_root_monster+0x1c8>
 20c:	mov	r0, r4
 210:	bl	0 <flatcc_builder_end_table>
 214:	mov	r1, r0
 218:	mov	r0, r4
 21c:	bl	0 <flatcc_builder_end_buffer>
 220:	mov	r0, #0
 224:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 228:	ldr	r3, [pc, #56]	; 268 <create_root_monster+0x1f4>
 22c:	mov	r2, #42	; 0x2a
 230:	ldr	r1, [pc, #52]	; 26c <create_root_monster+0x1f8>
 234:	ldr	r0, [pc, #52]	; 270 <create_root_monster+0x1fc>
 238:	bl	0 <__assert_fail>
 23c:	bl	28 <elapsed_realtime+0x28>
 240:	ldr	r3, [pc, #44]	; 274 <create_root_monster+0x200>
 244:	mov	r2, #56	; 0x38
 248:	ldr	r1, [pc, #28]	; 26c <create_root_monster+0x1f8>
 24c:	ldr	r0, [pc, #36]	; 278 <create_root_monster+0x204>
 250:	bl	0 <__assert_fail>
 254:	.word	0x000001a0
 258:	.word	0x000001a8
 25c:	.word	0x000001b8
 260:	.word	0x00000008
 264:	.word	0x00000038
 268:	.word	0x0000003c
 26c:	.word	0x000001c0
 270:	.word	0x00000214
 274:	.word	0x0000004c
 278:	.word	0x00000218

Disassembly of section .text.unlikely:

00000000 <MyGame_Example_Monster_name.part.0>:
   0:	push	{r4, lr}
   4:	ldr	r3, [pc, #12]	; 18 <MyGame_Example_Monster_name.part.0+0x18>
   8:	ldr	r2, [pc, #12]	; 1c <MyGame_Example_Monster_name.part.0+0x1c>
   c:	ldr	r1, [pc, #12]	; 20 <MyGame_Example_Monster_name.part.0+0x20>
  10:	ldr	r0, [pc, #12]	; 24 <MyGame_Example_Monster_name.part.0+0x24>
  14:	bl	0 <__assert_fail>
  18:	.word	0x00000000
  1c:	.word	0x000002bb
  20:	.word	0x00000000
  24:	.word	0x00000068

00000028 <MyGame_Example_Monster_end.part.1>:
  28:	push	{r4, lr}
  2c:	mov	r2, #235	; 0xeb
  30:	ldr	r3, [pc, #8]	; 40 <MyGame_Example_Monster_end.part.1+0x18>
  34:	ldr	r1, [pc, #8]	; 44 <MyGame_Example_Monster_end.part.1+0x1c>
  38:	ldr	r0, [pc, #8]	; 48 <MyGame_Example_Monster_end.part.1+0x20>
  3c:	bl	0 <__assert_fail>
  40:	.word	0x0000001c
  44:	.word	0x00000090
  48:	.word	0x000000fc

Disassembly of section .text.startup:

00000000 <main>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	vpush	{d8-d10}
   8:	sub	sp, sp, #260	; 0x104
   c:	add	r0, sp, #24
  10:	bl	0 <flatcc_builder_init>
  14:	add	r0, sp, #24
  18:	bl	74 <main+0x74>
  1c:	add	r1, sp, #20
  20:	add	r0, sp, #24
  24:	bl	0 <flatcc_builder_finalize_buffer>
  28:	ldr	r1, [pc, #1144]	; 4a8 <main+0x4a8>
  2c:	str	r0, [sp, #4]
  30:	mov	r5, r0
  34:	ldr	r0, [pc, #1136]	; 4ac <main+0x4ac>
  38:	bl	0 <fopen>
  3c:	subs	r4, r0, #0
  40:	beq	470 <main+0x470>
  44:	mov	r3, r4
  48:	ldr	r2, [sp, #20]
  4c:	mov	r1, #1
  50:	mov	r0, r5
  54:	bl	0 <fwrite>
  58:	ldr	r5, [sp, #20]
  5c:	mov	r6, r0
  60:	mov	r0, r4
  64:	bl	0 <fclose>
  68:	cmp	r6, r5
  6c:	beq	9c <main+0x9c>
  70:	add	r0, sp, #24
  74:	bl	0 <flatcc_builder_clear>
  78:	ldr	r0, [sp, #4]
  7c:	bl	0 <free>
  80:	mov	r4, #1
  84:	ldr	r0, [pc, #1060]	; 4b0 <main+0x4b0>
  88:	bl	0 <puts>
  8c:	mov	r0, r4
  90:	add	sp, sp, #260	; 0x104
  94:	vpop	{d8-d10}
  98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  9c:	ldr	r1, [sp, #20]
  a0:	ldr	r0, [pc, #1036]	; 4b4 <main+0x4b4>
  a4:	bl	0 <printf>
  a8:	ldr	r0, [pc, #1032]	; 4b8 <main+0x4b8>
  ac:	bl	0 <puts>
  b0:	bl	0 <main>
  b4:	ldr	r6, [pc, #1024]	; 4bc <main+0x4bc>
  b8:	ldr	r9, [pc, #1024]	; 4c0 <main+0x4c0>
  bc:	mov	r3, #10
  c0:	str	r3, [sp, #12]
  c4:	vmov.f64	d8, d0
  c8:	add	r0, sp, #24
  cc:	bl	74 <main+0x74>
  d0:	ldr	r4, [sp, #4]
  d4:	ldr	r2, [sp, #20]
  d8:	mov	r1, r4
  dc:	add	r0, sp, #24
  e0:	bl	0 <flatcc_builder_copy_buffer>
  e4:	ldr	r3, [r4, #4]
  e8:	ldr	r2, [pc, #980]	; 4c4 <main+0x4c4>
  ec:	cmp	r3, r2
  f0:	beq	f8 <main+0xf8>
  f4:	bl	0 <main>
  f8:	ldr	r2, [sp, #4]
  fc:	ldr	r3, [r2]
 100:	adds	fp, r2, r3
 104:	beq	f4 <main+0xf4>
 108:	ldr	r2, [sp, #4]
 10c:	ldr	r4, [r2, r3]
 110:	sub	r4, fp, r4
 114:	ldrh	r5, [r4]
 118:	cmp	r5, #11
 11c:	bhi	134 <main+0x134>
 120:	ldr	r3, [pc, #928]	; 4c8 <main+0x4c8>
 124:	ldr	r2, [pc, #928]	; 4cc <main+0x4cc>
 128:	ldr	r1, [pc, #928]	; 4d0 <main+0x4d0>
 12c:	ldr	r0, [pc, #928]	; 4d4 <main+0x4d4>
 130:	bl	0 <__assert_fail>
 134:	ldrh	r3, [r4, #10]
 138:	cmp	r3, #0
 13c:	beq	120 <main+0x120>
 140:	ldr	r0, [fp, r3]
 144:	add	r3, fp, r3
 148:	add	r0, r0, #4
 14c:	add	r0, r3, r0
 150:	ldr	r1, [pc, #896]	; 4d8 <main+0x4d8>
 154:	bl	0 <strcmp>
 158:	cmp	r0, #0
 15c:	bne	438 <main+0x438>
 160:	cmp	r5, #27
 164:	bhi	17c <main+0x17c>
 168:	ldr	r3, [pc, #876]	; 4dc <main+0x4dc>
 16c:	mov	r2, #143	; 0x8f
 170:	ldr	r1, [pc, #872]	; 4e0 <main+0x4e0>
 174:	ldr	r0, [pc, #872]	; 4e4 <main+0x4e4>
 178:	bl	0 <__assert_fail>
 17c:	ldrh	r3, [r4, #26]
 180:	cmp	r3, #0
 184:	beq	168 <main+0x168>
 188:	ldr	r2, [fp, r3]
 18c:	add	fp, fp, r3
 190:	add	r3, r2, #4
 194:	adds	fp, fp, r3
 198:	beq	168 <main+0x168>
 19c:	ldr	r8, [fp, #-4]
 1a0:	cmp	r8, #1000	; 0x3e8
 1a4:	bne	168 <main+0x168>
 1a8:	mov	r7, #7
 1ac:	add	r3, fp, #4000	; 0xfa0
 1b0:	str	fp, [sp]
 1b4:	str	r3, [sp, #8]
 1b8:	ldr	r3, [sp]
 1bc:	mov	r2, r3
 1c0:	add	r3, r3, #4
 1c4:	ldr	r1, [r2]
 1c8:	str	r3, [sp]
 1cc:	adds	r3, r2, r1
 1d0:	beq	f4 <main+0xf4>
 1d4:	ldr	r2, [r2, r1]
 1d8:	sub	r2, r3, r2
 1dc:	ldrh	r0, [r2]
 1e0:	cmp	r0, #11
 1e4:	bls	120 <main+0x120>
 1e8:	ldrh	r1, [r2, #10]
 1ec:	cmp	r1, #0
 1f0:	beq	120 <main+0x120>
 1f4:	ldr	sl, [r3, r1]
 1f8:	cmp	r0, #15
 1fc:	add	sl, sl, #4
 200:	add	r1, r3, r1
 204:	add	sl, r1, sl
 208:	bls	3a8 <main+0x3a8>
 20c:	ldrh	r2, [r2, #14]
 210:	cmp	r2, #0
 214:	beq	3c8 <main+0x3c8>
 218:	ldr	r4, [r3, r2]
 21c:	cmp	sl, #0
 220:	add	r3, r3, r2
 224:	add	r4, r4, #4
 228:	add	r4, r3, r4
 22c:	beq	3b4 <main+0x3b4>
 230:	ldr	r3, [sl, #-4]
 234:	cmp	r3, #700	; 0x2bc
 238:	bne	3b4 <main+0x3b4>
 23c:	cmp	r4, #0
 240:	beq	3dc <main+0x3dc>
 244:	ldr	r3, [r4, #-4]
 248:	ldr	r2, [pc, #664]	; 4e8 <main+0x4e8>
 24c:	cmp	r3, r2
 250:	bne	3dc <main+0x3dc>
 254:	mov	r5, sl
 258:	mov	fp, #0
 25c:	mov	r2, r7
 260:	mov	r1, r6
 264:	mov	r0, r5
 268:	bl	0 <memcmp>
 26c:	cmp	r0, #0
 270:	bne	3f0 <main+0x3f0>
 274:	add	fp, fp, #1
 278:	cmp	fp, #100	; 0x64
 27c:	add	r5, r5, #7
 280:	bne	25c <main+0x25c>
 284:	add	r5, r4, #99328	; 0x18400
 288:	add	r5, r5, #672	; 0x2a0
 28c:	mov	r2, r8
 290:	mov	r1, r9
 294:	mov	r0, r4
 298:	bl	0 <memcmp>
 29c:	cmp	r0, #0
 2a0:	bne	424 <main+0x424>
 2a4:	add	r4, r4, #1000	; 0x3e8
 2a8:	cmp	r4, r5
 2ac:	bne	28c <main+0x28c>
 2b0:	ldr	r3, [sp]
 2b4:	ldr	r2, [sp, #8]
 2b8:	cmp	r3, r2
 2bc:	bne	1b8 <main+0x1b8>
 2c0:	ldr	r3, [sp, #12]
 2c4:	subs	r3, r3, #1
 2c8:	str	r3, [sp, #12]
 2cc:	bne	c8 <main+0xc8>
 2d0:	mov	r4, r0
 2d4:	bl	0 <main>
 2d8:	ldr	r1, [pc, #524]	; 4ec <main+0x4ec>
 2dc:	ldr	r0, [pc, #524]	; 4f0 <main+0x4f0>
 2e0:	ldr	r5, [sp, #20]
 2e4:	vldr	d9, [pc, #412]	; 488 <main+0x488>
 2e8:	vldr	d10, [pc, #416]	; 490 <main+0x490>
 2ec:	vsub.f64	d8, d0, d8
 2f0:	bl	0 <printf>
 2f4:	ldr	r0, [pc, #504]	; 4f4 <main+0x4f4>
 2f8:	vmov	r2, r3, d8
 2fc:	bl	0 <printf>
 300:	mov	r1, #10
 304:	ldr	r0, [pc, #492]	; 4f8 <main+0x4f8>
 308:	bl	0 <printf>
 30c:	mov	r1, r5
 310:	ldr	r0, [pc, #484]	; 4fc <main+0x4fc>
 314:	bl	0 <printf>
 318:	vmov	s15, r5
 31c:	ldr	r0, [pc, #476]	; 500 <main+0x500>
 320:	vcvt.f64.u32	d7, s15
 324:	vmul.f64	d7, d7, d9
 328:	vdiv.f64	d6, d7, d10
 32c:	vdiv.f64	d7, d6, d8
 330:	vmov	r2, r3, d7
 334:	bl	0 <printf>
 338:	vdiv.f64	d7, d9, d8
 33c:	ldr	r0, [pc, #448]	; 504 <main+0x504>
 340:	vmov	r2, r3, d7
 344:	bl	0 <printf>
 348:	vldr	d6, [pc, #328]	; 498 <main+0x498>
 34c:	vldr	d5, [pc, #332]	; 4a0 <main+0x4a0>
 350:	vmul.f64	d8, d8, d6
 354:	vdiv.f64	d7, d8, d9
 358:	vcmpe.f64	d7, d5
 35c:	vmrs	APSR_nzcv, fpscr
 360:	bmi	460 <main+0x460>
 364:	vcmpe.f64	d7, d10
 368:	vmrs	APSR_nzcv, fpscr
 36c:	bmi	44c <main+0x44c>
 370:	vcmpe.f64	d7, d6
 374:	vmrs	APSR_nzcv, fpscr
 378:	vdivmi.f64	d6, d7, d10
 37c:	ldrmi	r0, [pc, #388]	; 508 <main+0x508>
 380:	ldrpl	r0, [pc, #388]	; 50c <main+0x50c>
 384:	vdivpl.f64	d5, d7, d6
 388:	vmovmi	r2, r3, d6
 38c:	vmovpl	r2, r3, d5
 390:	bl	0 <printf>
 394:	add	r0, sp, #24
 398:	bl	0 <flatcc_builder_clear>
 39c:	ldr	r0, [sp, #4]
 3a0:	bl	0 <free>
 3a4:	b	8c <main+0x8c>
 3a8:	cmp	sl, #0
 3ac:	mov	r4, #0
 3b0:	bne	230 <main+0x230>
 3b4:	ldr	r3, [pc, #340]	; 510 <main+0x510>
 3b8:	mov	r2, #74	; 0x4a
 3bc:	ldr	r1, [pc, #284]	; 4e0 <main+0x4e0>
 3c0:	ldr	r0, [pc, #332]	; 514 <main+0x514>
 3c4:	bl	0 <__assert_fail>
 3c8:	cmp	sl, #0
 3cc:	beq	3b4 <main+0x3b4>
 3d0:	ldr	r3, [sl, #-4]
 3d4:	cmp	r3, #700	; 0x2bc
 3d8:	bne	3b4 <main+0x3b4>
 3dc:	ldr	r3, [pc, #300]	; 510 <main+0x510>
 3e0:	mov	r2, #78	; 0x4e
 3e4:	ldr	r1, [pc, #244]	; 4e0 <main+0x4e0>
 3e8:	ldr	r0, [pc, #292]	; 514 <main+0x514>
 3ec:	bl	0 <__assert_fail>
 3f0:	mov	r2, sl
 3f4:	mov	r1, fp
 3f8:	ldr	r0, [pc, #280]	; 518 <main+0x518>
 3fc:	bl	0 <printf>
 400:	ldr	r3, [sp, #4]
 404:	ldr	r0, [pc, #272]	; 51c <main+0x51c>
 408:	sub	r1, r5, r3
 40c:	bl	0 <printf>
 410:	ldr	r3, [pc, #248]	; 510 <main+0x510>
 414:	mov	r2, #85	; 0x55
 418:	ldr	r1, [pc, #192]	; 4e0 <main+0x4e0>
 41c:	ldr	r0, [pc, #240]	; 514 <main+0x514>
 420:	bl	0 <__assert_fail>
 424:	ldr	r3, [pc, #228]	; 510 <main+0x510>
 428:	mov	r2, #91	; 0x5b
 42c:	ldr	r1, [pc, #172]	; 4e0 <main+0x4e0>
 430:	ldr	r0, [pc, #220]	; 514 <main+0x514>
 434:	bl	0 <__assert_fail>
 438:	ldr	r3, [pc, #156]	; 4dc <main+0x4dc>
 43c:	mov	r2, #139	; 0x8b
 440:	ldr	r1, [pc, #152]	; 4e0 <main+0x4e0>
 444:	ldr	r0, [pc, #152]	; 4e4 <main+0x4e4>
 448:	bl	0 <__assert_fail>
 44c:	vdiv.f64	d6, d7, d5
 450:	ldr	r0, [pc, #200]	; 520 <main+0x520>
 454:	vmov	r2, r3, d6
 458:	bl	0 <printf>
 45c:	b	394 <main+0x394>
 460:	vmov	r2, r3, d7
 464:	ldr	r0, [pc, #184]	; 524 <main+0x524>
 468:	bl	0 <printf>
 46c:	b	394 <main+0x394>
 470:	add	r0, sp, #24
 474:	bl	0 <flatcc_builder_clear>
 478:	ldr	r0, [sp, #4]
 47c:	bl	0 <free>
 480:	mvn	r4, #0
 484:	b	84 <main+0x84>
 488:	.word	0x00000000
 48c:	.word	0x40240000
 490:	.word	0x00000000
 494:	.word	0x412e8480
 498:	.word	0x00000000
 49c:	.word	0x41cdcd65
 4a0:	.word	0x00000000
 4a4:	.word	0x408f4000
 4a8:	.word	0x0000021c
 4ac:	.word	0x00000220
 4b0:	.word	0x000003d8
 4b4:	.word	0x00000238
 4b8:	.word	0x0000024c
 4bc:	.word	0x000001b8
 4c0:	.word	0x00000008
 4c4:	.word	0x534e4f4d
 4c8:	.word	0x00000000
 4cc:	.word	0x000002bb
 4d0:	.word	0x00000000
 4d4:	.word	0x00000260
 4d8:	.word	0x000001a8
 4dc:	.word	0x00000060
 4e0:	.word	0x000001c0
 4e4:	.word	0x00000284
 4e8:	.word	0x000186a0
 4ec:	.word	0x000002c4
 4f0:	.word	0x000002f0
 4f4:	.word	0x00000300
 4f8:	.word	0x00000318
 4fc:	.word	0x00000328
 500:	.word	0x0000033c
 504:	.word	0x00000354
 508:	.word	0x000003a8
 50c:	.word	0x000003c0
 510:	.word	0x00000068
 514:	.word	0x00000290
 518:	.word	0x00000294
 51c:	.word	0x000002b4
 520:	.word	0x00000390
 524:	.word	0x00000378
