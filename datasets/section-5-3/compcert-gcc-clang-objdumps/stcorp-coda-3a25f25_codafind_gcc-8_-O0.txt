
../compcert-repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

00010888 <.init>:
   10888:	push	{r3, lr}
   1088c:	bl	109d4 <_start@@Base+0x3c>
   10890:	pop	{r3, pc}

Disassembly of section .plt:

00010894 <coda_match_filefilter@plt-0x14>:
   10894:	push	{lr}		; (str lr, [sp, #-4]!)
   10898:	ldr	lr, [pc, #4]	; 108a4 <coda_match_filefilter@plt-0x4>
   1089c:	add	lr, pc, lr
   108a0:	ldr	pc, [lr, #8]!
   108a4:	andeq	r1, r1, ip, asr r7

000108a8 <coda_match_filefilter@plt>:
   108a8:	add	ip, pc, #0, 12
   108ac:	add	ip, ip, #69632	; 0x11000
   108b0:	ldr	pc, [ip, #1884]!	; 0x75c

000108b4 <strcmp@plt>:
   108b4:	add	ip, pc, #0, 12
   108b8:	add	ip, ip, #69632	; 0x11000
   108bc:	ldr	pc, [ip, #1876]!	; 0x754

000108c0 <printf@plt>:
   108c0:	add	ip, pc, #0, 12
   108c4:	add	ip, ip, #69632	; 0x11000
   108c8:	ldr	pc, [ip, #1868]!	; 0x74c

000108cc <coda_set_definition_path_conditional@plt>:
   108cc:	add	ip, pc, #0, 12
   108d0:	add	ip, ip, #69632	; 0x11000
   108d4:	ldr	pc, [ip, #1860]!	; 0x744

000108d8 <coda_set_definition_path@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1852]!	; 0x73c

000108e4 <fwrite@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1844]!	; 0x734

000108f0 <coda_done@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1836]!	; 0x72c

000108fc <puts@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1828]!	; 0x724

00010908 <__libc_start_main@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1820]!	; 0x71c

00010914 <__gmon_start__@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1812]!	; 0x714

00010920 <exit@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1804]!	; 0x70c

0001092c <fprintf@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1796]!	; 0x704

00010938 <coda_init@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1788]!	; 0x6fc

00010944 <coda_set_option_perform_conversions@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1780]!	; 0x6f4

00010950 <putchar@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1772]!	; 0x6ec

0001095c <coda_errno_to_string@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1764]!	; 0x6e4

00010968 <coda_get_libcoda_version@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1756]!	; 0x6dc

00010974 <coda_get_errno@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1748]!	; 0x6d4

00010980 <abort@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1740]!	; 0x6cc

0001098c <__assert_fail@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1732]!	; 0x6c4

Disassembly of section .text:

00010998 <_start@@Base>:
   10998:	mov	fp, #0
   1099c:	mov	lr, #0
   109a0:	pop	{r1}		; (ldr r1, [sp], #4)
   109a4:	mov	r2, sp
   109a8:	push	{r2}		; (str r2, [sp, #-4]!)
   109ac:	push	{r0}		; (str r0, [sp, #-4]!)
   109b0:	ldr	ip, [pc, #16]	; 109c8 <_start@@Base+0x30>
   109b4:	push	{ip}		; (str ip, [sp, #-4]!)
   109b8:	ldr	r0, [pc, #12]	; 109cc <_start@@Base+0x34>
   109bc:	ldr	r3, [pc, #12]	; 109d0 <_start@@Base+0x38>
   109c0:	bl	10908 <__libc_start_main@plt>
   109c4:	bl	10980 <abort@plt>
   109c8:	andeq	r1, r1, r0, asr r3
   109cc:			; <UNDEFINED> instruction: 0x00010db8
   109d0:	strdeq	r1, [r1], -r0
   109d4:	ldr	r3, [pc, #20]	; 109f0 <_start@@Base+0x58>
   109d8:	ldr	r2, [pc, #20]	; 109f4 <_start@@Base+0x5c>
   109dc:	add	r3, pc, r3
   109e0:	ldr	r2, [r3, r2]
   109e4:	cmp	r2, #0
   109e8:	bxeq	lr
   109ec:	b	10914 <__gmon_start__@plt>
   109f0:	andeq	r1, r1, ip, lsl r6
   109f4:	andeq	r0, r0, ip, asr r0
   109f8:	ldr	r0, [pc, #24]	; 10a18 <_start@@Base+0x80>
   109fc:	ldr	r3, [pc, #24]	; 10a1c <_start@@Base+0x84>
   10a00:	cmp	r3, r0
   10a04:	bxeq	lr
   10a08:	ldr	r3, [pc, #16]	; 10a20 <_start@@Base+0x88>
   10a0c:	cmp	r3, #0
   10a10:	bxeq	lr
   10a14:	bx	r3
   10a18:	andeq	r2, r2, r8, rrx
   10a1c:	andeq	r2, r2, r8, rrx
   10a20:	andeq	r0, r0, r0
   10a24:	ldr	r0, [pc, #36]	; 10a50 <_start@@Base+0xb8>
   10a28:	ldr	r1, [pc, #36]	; 10a54 <_start@@Base+0xbc>
   10a2c:	sub	r1, r1, r0
   10a30:	asr	r1, r1, #2
   10a34:	add	r1, r1, r1, lsr #31
   10a38:	asrs	r1, r1, #1
   10a3c:	bxeq	lr
   10a40:	ldr	r3, [pc, #16]	; 10a58 <_start@@Base+0xc0>
   10a44:	cmp	r3, #0
   10a48:	bxeq	lr
   10a4c:	bx	r3
   10a50:	andeq	r2, r2, r8, rrx
   10a54:	andeq	r2, r2, r8, rrx
   10a58:	andeq	r0, r0, r0
   10a5c:	push	{r4, lr}
   10a60:	ldr	r4, [pc, #24]	; 10a80 <_start@@Base+0xe8>
   10a64:	ldrb	r3, [r4]
   10a68:	cmp	r3, #0
   10a6c:	popne	{r4, pc}
   10a70:	bl	109f8 <_start@@Base+0x60>
   10a74:	mov	r3, #1
   10a78:	strb	r3, [r4]
   10a7c:	pop	{r4, pc}
   10a80:	andeq	r2, r2, ip, rrx
   10a84:	b	10a24 <_start@@Base+0x8c>
   10a88:	str	fp, [sp, #-8]!
   10a8c:	str	lr, [sp, #4]
   10a90:	add	fp, sp, #4
   10a94:	bl	10968 <coda_get_libcoda_version@plt>
   10a98:	mov	r3, r0
   10a9c:	mov	r1, r3
   10aa0:	movw	r0, #4960	; 0x1360
   10aa4:	movt	r0, #1
   10aa8:	bl	108c0 <printf@plt>
   10aac:	movw	r0, #4976	; 0x1370
   10ab0:	movt	r0, #1
   10ab4:	bl	108fc <puts@plt>
   10ab8:	mov	r0, #10
   10abc:	bl	10950 <putchar@plt>
   10ac0:	nop	{0}
   10ac4:	sub	sp, fp, #4
   10ac8:	ldr	fp, [sp]
   10acc:	add	sp, sp, #4
   10ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   10ad4:	str	fp, [sp, #-8]!
   10ad8:	str	lr, [sp, #4]
   10adc:	add	fp, sp, #4
   10ae0:	movw	r0, #5024	; 0x13a0
   10ae4:	movt	r0, #1
   10ae8:	bl	108fc <puts@plt>
   10aec:	movw	r0, #5032	; 0x13a8
   10af0:	movt	r0, #1
   10af4:	bl	108fc <puts@plt>
   10af8:	movw	r0, #5100	; 0x13ec
   10afc:	movt	r0, #1
   10b00:	bl	108fc <puts@plt>
   10b04:	movw	r0, #5180	; 0x143c
   10b08:	movt	r0, #1
   10b0c:	bl	108fc <puts@plt>
   10b10:	mov	r0, #10
   10b14:	bl	10950 <putchar@plt>
   10b18:	movw	r0, #5204	; 0x1454
   10b1c:	movt	r0, #1
   10b20:	bl	108fc <puts@plt>
   10b24:	movw	r0, #5224	; 0x1468
   10b28:	movt	r0, #1
   10b2c:	bl	108fc <puts@plt>
   10b30:	movw	r0, #5264	; 0x1490
   10b34:	movt	r0, #1
   10b38:	bl	108fc <puts@plt>
   10b3c:	movw	r0, #5324	; 0x14cc
   10b40:	movt	r0, #1
   10b44:	bl	108fc <puts@plt>
   10b48:	movw	r0, #5372	; 0x14fc
   10b4c:	movt	r0, #1
   10b50:	bl	108fc <puts@plt>
   10b54:	movw	r0, #5444	; 0x1544
   10b58:	movt	r0, #1
   10b5c:	bl	108fc <puts@plt>
   10b60:	movw	r0, #5524	; 0x1594
   10b64:	movt	r0, #1
   10b68:	bl	108fc <puts@plt>
   10b6c:	movw	r0, #5568	; 0x15c0
   10b70:	movt	r0, #1
   10b74:	bl	108fc <puts@plt>
   10b78:	movw	r0, #5596	; 0x15dc
   10b7c:	movt	r0, #1
   10b80:	bl	108fc <puts@plt>
   10b84:	mov	r0, #10
   10b88:	bl	10950 <putchar@plt>
   10b8c:	movw	r0, #5652	; 0x1614
   10b90:	movt	r0, #1
   10b94:	bl	108fc <puts@plt>
   10b98:	movw	r0, #5676	; 0x162c
   10b9c:	movt	r0, #1
   10ba0:	bl	108fc <puts@plt>
   10ba4:	mov	r0, #10
   10ba8:	bl	10950 <putchar@plt>
   10bac:	movw	r0, #5708	; 0x164c
   10bb0:	movt	r0, #1
   10bb4:	bl	108fc <puts@plt>
   10bb8:	movw	r0, #5736	; 0x1668
   10bbc:	movt	r0, #1
   10bc0:	bl	108fc <puts@plt>
   10bc4:	mov	r0, #10
   10bc8:	bl	10950 <putchar@plt>
   10bcc:	movw	r0, #5788	; 0x169c
   10bd0:	movt	r0, #1
   10bd4:	bl	108fc <puts@plt>
   10bd8:	movw	r0, #5868	; 0x16ec
   10bdc:	movt	r0, #1
   10be0:	bl	108fc <puts@plt>
   10be4:	movw	r0, #5944	; 0x1738
   10be8:	movt	r0, #1
   10bec:	bl	108fc <puts@plt>
   10bf0:	movw	r0, #5988	; 0x1764
   10bf4:	movt	r0, #1
   10bf8:	bl	108fc <puts@plt>
   10bfc:	movw	r0, #6064	; 0x17b0
   10c00:	movt	r0, #1
   10c04:	bl	108fc <puts@plt>
   10c08:	movw	r0, #6136	; 0x17f8
   10c0c:	movt	r0, #1
   10c10:	bl	108fc <puts@plt>
   10c14:	movw	r0, #6200	; 0x1838
   10c18:	movt	r0, #1
   10c1c:	bl	108fc <puts@plt>
   10c20:	mov	r0, #10
   10c24:	bl	10950 <putchar@plt>
   10c28:	nop	{0}
   10c2c:	sub	sp, fp, #4
   10c30:	ldr	fp, [sp]
   10c34:	add	sp, sp, #4
   10c38:	pop	{pc}		; (ldr pc, [sp], #4)

00010c3c <callback@@Base>:
   10c3c:	str	fp, [sp, #-8]!
   10c40:	str	lr, [sp, #4]
   10c44:	add	fp, sp, #4
   10c48:	sub	sp, sp, #16
   10c4c:	str	r0, [fp, #-8]
   10c50:	str	r1, [fp, #-12]
   10c54:	str	r2, [fp, #-16]
   10c58:	str	r3, [fp, #-20]	; 0xffffffec
   10c5c:	ldr	r3, [fp, #-12]
   10c60:	cmp	r3, #0
   10c64:	bne	10c8c <callback@@Base+0x50>
   10c68:	movw	r3, #8296	; 0x2068
   10c6c:	movt	r3, #2
   10c70:	ldr	r0, [r3]
   10c74:	ldr	r3, [fp, #-16]
   10c78:	ldr	r2, [fp, #-8]
   10c7c:	movw	r1, #6264	; 0x1878
   10c80:	movt	r1, #1
   10c84:	bl	1092c <fprintf@plt>
   10c88:	b	10da0 <callback@@Base+0x164>
   10c8c:	ldr	r3, [fp, #-12]
   10c90:	cmp	r3, #2
   10c94:	bne	10cbc <callback@@Base+0x80>
   10c98:	movw	r3, #8296	; 0x2068
   10c9c:	movt	r3, #2
   10ca0:	ldr	r3, [r3]
   10ca4:	ldr	r2, [fp, #-8]
   10ca8:	movw	r1, #6272	; 0x1880
   10cac:	movt	r1, #1
   10cb0:	mov	r0, r3
   10cb4:	bl	1092c <fprintf@plt>
   10cb8:	b	10da0 <callback@@Base+0x164>
   10cbc:	ldr	r3, [fp, #-12]
   10cc0:	cmp	r3, #1
   10cc4:	bne	10cec <callback@@Base+0xb0>
   10cc8:	movw	r3, #8296	; 0x2068
   10ccc:	movt	r3, #2
   10cd0:	ldr	r0, [r3]
   10cd4:	ldr	r3, [fp, #-16]
   10cd8:	ldr	r2, [fp, #-8]
   10cdc:	movw	r1, #6304	; 0x18a0
   10ce0:	movt	r1, #1
   10ce4:	bl	1092c <fprintf@plt>
   10ce8:	b	10da0 <callback@@Base+0x164>
   10cec:	movw	r3, #8304	; 0x2070
   10cf0:	movt	r3, #2
   10cf4:	ldr	r3, [r3]
   10cf8:	cmp	r3, #0
   10cfc:	beq	10d8c <callback@@Base+0x150>
   10d00:	ldr	r1, [fp, #-8]
   10d04:	movw	r0, #6336	; 0x18c0
   10d08:	movt	r0, #1
   10d0c:	bl	108c0 <printf@plt>
   10d10:	ldr	r3, [fp, #-12]
   10d14:	cmp	r3, #5
   10d18:	ldrls	pc, [pc, r3, lsl #2]
   10d1c:	b	10da0 <callback@@Base+0x164>
   10d20:	andeq	r0, r1, r8, lsr sp
   10d24:	andeq	r0, r1, r8, lsr sp
   10d28:	andeq	r0, r1, r8, lsr sp
   10d2c:	andeq	r0, r1, r8, asr sp
   10d30:	andeq	r0, r1, r8, ror sp
   10d34:	andeq	r0, r1, r8, ror #26
   10d38:	movw	r3, #6628	; 0x19e4
   10d3c:	movt	r3, #1
   10d40:	mov	r2, #110	; 0x6e
   10d44:	movw	r1, #6344	; 0x18c8
   10d48:	movt	r1, #1
   10d4c:	movw	r0, #6424	; 0x1918
   10d50:	movt	r0, #1
   10d54:	bl	1098c <__assert_fail@plt>
   10d58:	movw	r0, #6428	; 0x191c
   10d5c:	movt	r0, #1
   10d60:	bl	108fc <puts@plt>
   10d64:	b	10da0 <callback@@Base+0x164>
   10d68:	movw	r0, #6448	; 0x1930
   10d6c:	movt	r0, #1
   10d70:	bl	108fc <puts@plt>
   10d74:	b	10da0 <callback@@Base+0x164>
   10d78:	movw	r0, #6460	; 0x193c
   10d7c:	movt	r0, #1
   10d80:	bl	108fc <puts@plt>
   10d84:	nop	{0}
   10d88:	b	10da0 <callback@@Base+0x164>
   10d8c:	ldr	r3, [fp, #-12]
   10d90:	cmp	r3, #4
   10d94:	bne	10da0 <callback@@Base+0x164>
   10d98:	ldr	r0, [fp, #-8]
   10d9c:	bl	108fc <puts@plt>
   10da0:	mov	r3, #0
   10da4:	mov	r0, r3
   10da8:	sub	sp, fp, #4
   10dac:	ldr	fp, [sp]
   10db0:	add	sp, sp, #4
   10db4:	pop	{pc}		; (ldr pc, [sp], #4)

00010db8 <main@@Base>:
   10db8:	str	r4, [sp, #-12]!
   10dbc:	str	fp, [sp, #4]
   10dc0:	str	lr, [sp, #8]
   10dc4:	add	fp, sp, #8
   10dc8:	sub	sp, sp, #36	; 0x24
   10dcc:	str	r0, [fp, #-32]	; 0xffffffe0
   10dd0:	str	r1, [fp, #-36]	; 0xffffffdc
   10dd4:	mov	r3, #0
   10dd8:	str	r3, [fp, #-16]
   10ddc:	movw	r3, #8304	; 0x2070
   10de0:	movt	r3, #2
   10de4:	mov	r2, #0
   10de8:	str	r2, [r3]
   10dec:	mov	r3, #1
   10df0:	str	r3, [fp, #-20]	; 0xffffffec
   10df4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10df8:	cmp	r3, #1
   10dfc:	beq	10e50 <main@@Base+0x98>
   10e00:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e04:	add	r3, r3, #4
   10e08:	ldr	r3, [r3]
   10e0c:	movw	r1, #6468	; 0x1944
   10e10:	movt	r1, #1
   10e14:	mov	r0, r3
   10e18:	bl	108b4 <strcmp@plt>
   10e1c:	mov	r3, r0
   10e20:	cmp	r3, #0
   10e24:	beq	10e50 <main@@Base+0x98>
   10e28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e2c:	add	r3, r3, #4
   10e30:	ldr	r3, [r3]
   10e34:	movw	r1, #6472	; 0x1948
   10e38:	movt	r1, #1
   10e3c:	mov	r0, r3
   10e40:	bl	108b4 <strcmp@plt>
   10e44:	mov	r3, r0
   10e48:	cmp	r3, #0
   10e4c:	bne	10e5c <main@@Base+0xa4>
   10e50:	bl	10ad4 <_start@@Base+0x13c>
   10e54:	mov	r0, #0
   10e58:	bl	10920 <exit@plt>
   10e5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e60:	add	r3, r3, #4
   10e64:	ldr	r3, [r3]
   10e68:	movw	r1, #6480	; 0x1950
   10e6c:	movt	r1, #1
   10e70:	mov	r0, r3
   10e74:	bl	108b4 <strcmp@plt>
   10e78:	mov	r3, r0
   10e7c:	cmp	r3, #0
   10e80:	beq	10eac <main@@Base+0xf4>
   10e84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10e88:	add	r3, r3, #4
   10e8c:	ldr	r3, [r3]
   10e90:	movw	r1, #6484	; 0x1954
   10e94:	movt	r1, #1
   10e98:	mov	r0, r3
   10e9c:	bl	108b4 <strcmp@plt>
   10ea0:	mov	r3, r0
   10ea4:	cmp	r3, #0
   10ea8:	bne	10eb8 <main@@Base+0x100>
   10eac:	bl	10a88 <_start@@Base+0xf0>
   10eb0:	mov	r0, #0
   10eb4:	bl	10920 <exit@plt>
   10eb8:	mov	r3, #1
   10ebc:	str	r3, [fp, #-24]	; 0xffffffe8
   10ec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10ec4:	add	r3, r3, #1
   10ec8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   10ecc:	cmp	r2, r3
   10ed0:	ble	10f34 <main@@Base+0x17c>
   10ed4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10ed8:	lsl	r3, r3, #2
   10edc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10ee0:	add	r3, r2, r3
   10ee4:	ldr	r3, [r3]
   10ee8:	movw	r1, #6496	; 0x1960
   10eec:	movt	r1, #1
   10ef0:	mov	r0, r3
   10ef4:	bl	108b4 <strcmp@plt>
   10ef8:	mov	r3, r0
   10efc:	cmp	r3, #0
   10f00:	bne	10f34 <main@@Base+0x17c>
   10f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10f08:	add	r3, r3, #1
   10f0c:	lsl	r3, r3, #2
   10f10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10f14:	add	r3, r2, r3
   10f18:	ldr	r3, [r3]
   10f1c:	mov	r0, r3
   10f20:	bl	108d8 <coda_set_definition_path@plt>
   10f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10f28:	add	r3, r3, #2
   10f2c:	str	r3, [fp, #-24]	; 0xffffffe8
   10f30:	b	10fa4 <main@@Base+0x1ec>
   10f34:	movw	r3, #6500	; 0x1964
   10f38:	movt	r3, #1
   10f3c:	str	r3, [fp, #-28]	; 0xffffffe4
   10f40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10f44:	ldr	r3, [r3]
   10f48:	ldr	r2, [fp, #-28]	; 0xffffffe4
   10f4c:	mov	r1, #0
   10f50:	mov	r0, r3
   10f54:	bl	108cc <coda_set_definition_path_conditional@plt>
   10f58:	mov	r3, r0
   10f5c:	cmp	r3, #0
   10f60:	beq	111a4 <main@@Base+0x3ec>
   10f64:	movw	r3, #8296	; 0x2068
   10f68:	movt	r3, #2
   10f6c:	ldr	r4, [r3]
   10f70:	bl	10974 <coda_get_errno@plt>
   10f74:	mov	r3, r0
   10f78:	ldr	r3, [r3]
   10f7c:	mov	r0, r3
   10f80:	bl	1095c <coda_errno_to_string@plt>
   10f84:	mov	r3, r0
   10f88:	mov	r2, r3
   10f8c:	movw	r1, #6528	; 0x1980
   10f90:	movt	r1, #1
   10f94:	mov	r0, r4
   10f98:	bl	1092c <fprintf@plt>
   10f9c:	mov	r0, #1
   10fa0:	bl	10920 <exit@plt>
   10fa4:	b	111a4 <main@@Base+0x3ec>
   10fa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10fac:	lsl	r3, r3, #2
   10fb0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10fb4:	add	r3, r2, r3
   10fb8:	ldr	r3, [r3]
   10fbc:	movw	r1, #6540	; 0x198c
   10fc0:	movt	r1, #1
   10fc4:	mov	r0, r3
   10fc8:	bl	108b4 <strcmp@plt>
   10fcc:	mov	r3, r0
   10fd0:	cmp	r3, #0
   10fd4:	beq	11008 <main@@Base+0x250>
   10fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   10fdc:	lsl	r3, r3, #2
   10fe0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   10fe4:	add	r3, r2, r3
   10fe8:	ldr	r3, [r3]
   10fec:	movw	r1, #6544	; 0x1990
   10ff0:	movt	r1, #1
   10ff4:	mov	r0, r3
   10ff8:	bl	108b4 <strcmp@plt>
   10ffc:	mov	r3, r0
   11000:	cmp	r3, #0
   11004:	bne	11014 <main@@Base+0x25c>
   11008:	mov	r3, #0
   1100c:	str	r3, [fp, #-20]	; 0xffffffec
   11010:	b	11198 <main@@Base+0x3e0>
   11014:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11018:	lsl	r3, r3, #2
   1101c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11020:	add	r3, r2, r3
   11024:	ldr	r3, [r3]
   11028:	movw	r1, #6568	; 0x19a8
   1102c:	movt	r1, #1
   11030:	mov	r0, r3
   11034:	bl	108b4 <strcmp@plt>
   11038:	mov	r3, r0
   1103c:	cmp	r3, #0
   11040:	beq	11074 <main@@Base+0x2bc>
   11044:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11048:	lsl	r3, r3, #2
   1104c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11050:	add	r3, r2, r3
   11054:	ldr	r3, [r3]
   11058:	movw	r1, #6572	; 0x19ac
   1105c:	movt	r1, #1
   11060:	mov	r0, r3
   11064:	bl	108b4 <strcmp@plt>
   11068:	mov	r3, r0
   1106c:	cmp	r3, #0
   11070:	bne	110d8 <main@@Base+0x320>
   11074:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11078:	add	r3, r3, #1
   1107c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11080:	cmp	r2, r3
   11084:	ble	110d8 <main@@Base+0x320>
   11088:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1108c:	add	r3, r3, #1
   11090:	lsl	r3, r3, #2
   11094:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11098:	add	r3, r2, r3
   1109c:	ldr	r3, [r3]
   110a0:	ldrb	r3, [r3]
   110a4:	cmp	r3, #45	; 0x2d
   110a8:	beq	110d8 <main@@Base+0x320>
   110ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110b0:	add	r3, r3, #1
   110b4:	lsl	r3, r3, #2
   110b8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   110bc:	add	r3, r2, r3
   110c0:	ldr	r3, [r3]
   110c4:	str	r3, [fp, #-16]
   110c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110cc:	add	r3, r3, #1
   110d0:	str	r3, [fp, #-24]	; 0xffffffe8
   110d4:	b	11198 <main@@Base+0x3e0>
   110d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   110dc:	lsl	r3, r3, #2
   110e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   110e4:	add	r3, r2, r3
   110e8:	ldr	r3, [r3]
   110ec:	movw	r1, #6584	; 0x19b8
   110f0:	movt	r1, #1
   110f4:	mov	r0, r3
   110f8:	bl	108b4 <strcmp@plt>
   110fc:	mov	r3, r0
   11100:	cmp	r3, #0
   11104:	beq	11138 <main@@Base+0x380>
   11108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1110c:	lsl	r3, r3, #2
   11110:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11114:	add	r3, r2, r3
   11118:	ldr	r3, [r3]
   1111c:	movw	r1, #6588	; 0x19bc
   11120:	movt	r1, #1
   11124:	mov	r0, r3
   11128:	bl	108b4 <strcmp@plt>
   1112c:	mov	r3, r0
   11130:	cmp	r3, #0
   11134:	bne	1114c <main@@Base+0x394>
   11138:	movw	r3, #8304	; 0x2070
   1113c:	movt	r3, #2
   11140:	mov	r2, #1
   11144:	str	r2, [r3]
   11148:	b	11198 <main@@Base+0x3e0>
   1114c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	lsl	r3, r3, #2
   11154:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11158:	add	r3, r2, r3
   1115c:	ldr	r3, [r3]
   11160:	ldrb	r3, [r3]
   11164:	cmp	r3, #45	; 0x2d
   11168:	bne	111b8 <main@@Base+0x400>
   1116c:	movw	r3, #8296	; 0x2068
   11170:	movt	r3, #2
   11174:	ldr	r3, [r3]
   11178:	mov	r2, #25
   1117c:	mov	r1, #1
   11180:	movw	r0, #6600	; 0x19c8
   11184:	movt	r0, #1
   11188:	bl	108e4 <fwrite@plt>
   1118c:	bl	10ad4 <_start@@Base+0x13c>
   11190:	mov	r0, #1
   11194:	bl	10920 <exit@plt>
   11198:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1119c:	add	r3, r3, #1
   111a0:	str	r3, [fp, #-24]	; 0xffffffe8
   111a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   111a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   111ac:	cmp	r2, r3
   111b0:	blt	10fa8 <main@@Base+0x1f0>
   111b4:	b	111bc <main@@Base+0x404>
   111b8:	nop	{0}
   111bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   111c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   111c4:	cmp	r2, r3
   111c8:	bne	111f8 <main@@Base+0x440>
   111cc:	movw	r3, #8296	; 0x2068
   111d0:	movt	r3, #2
   111d4:	ldr	r3, [r3]
   111d8:	mov	r2, #25
   111dc:	mov	r1, #1
   111e0:	movw	r0, #6600	; 0x19c8
   111e4:	movt	r0, #1
   111e8:	bl	108e4 <fwrite@plt>
   111ec:	bl	10ad4 <_start@@Base+0x13c>
   111f0:	mov	r0, #1
   111f4:	bl	10920 <exit@plt>
   111f8:	bl	10938 <coda_init@plt>
   111fc:	mov	r3, r0
   11200:	cmp	r3, #0
   11204:	beq	11248 <main@@Base+0x490>
   11208:	movw	r3, #8296	; 0x2068
   1120c:	movt	r3, #2
   11210:	ldr	r4, [r3]
   11214:	bl	10974 <coda_get_errno@plt>
   11218:	mov	r3, r0
   1121c:	ldr	r3, [r3]
   11220:	mov	r0, r3
   11224:	bl	1095c <coda_errno_to_string@plt>
   11228:	mov	r3, r0
   1122c:	mov	r2, r3
   11230:	movw	r1, #6528	; 0x1980
   11234:	movt	r1, #1
   11238:	mov	r0, r4
   1123c:	bl	1092c <fprintf@plt>
   11240:	mov	r0, #1
   11244:	bl	10920 <exit@plt>
   11248:	ldr	r0, [fp, #-20]	; 0xffffffec
   1124c:	bl	10944 <coda_set_option_perform_conversions@plt>
   11250:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11258:	sub	r1, r2, r3
   1125c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11260:	lsl	r3, r3, #2
   11264:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11268:	add	r2, r2, r3
   1126c:	mov	r3, #0
   11270:	str	r3, [sp]
   11274:	movw	r3, #3132	; 0xc3c
   11278:	movt	r3, #1
   1127c:	ldr	r0, [fp, #-16]
   11280:	bl	108a8 <coda_match_filefilter@plt>
   11284:	mov	r3, r0
   11288:	cmp	r3, #0
   1128c:	beq	112d0 <main@@Base+0x518>
   11290:	movw	r3, #8296	; 0x2068
   11294:	movt	r3, #2
   11298:	ldr	r4, [r3]
   1129c:	bl	10974 <coda_get_errno@plt>
   112a0:	mov	r3, r0
   112a4:	ldr	r3, [r3]
   112a8:	mov	r0, r3
   112ac:	bl	1095c <coda_errno_to_string@plt>
   112b0:	mov	r3, r0
   112b4:	mov	r2, r3
   112b8:	movw	r1, #6528	; 0x1980
   112bc:	movt	r1, #1
   112c0:	mov	r0, r4
   112c4:	bl	1092c <fprintf@plt>
   112c8:	mov	r0, #1
   112cc:	bl	10920 <exit@plt>
   112d0:	bl	108f0 <coda_done@plt>
   112d4:	mov	r3, #0
   112d8:	mov	r0, r3
   112dc:	sub	sp, fp, #8
   112e0:	ldr	r4, [sp]
   112e4:	ldr	fp, [sp, #4]
   112e8:	add	sp, sp, #8
   112ec:	pop	{pc}		; (ldr pc, [sp], #4)

000112f0 <__libc_csu_init@@Base>:
   112f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   112f4:	mov	r7, r0
   112f8:	ldr	r6, [pc, #72]	; 11348 <__libc_csu_init@@Base+0x58>
   112fc:	ldr	r5, [pc, #72]	; 1134c <__libc_csu_init@@Base+0x5c>
   11300:	add	r6, pc, r6
   11304:	add	r5, pc, r5
   11308:	sub	r6, r6, r5
   1130c:	mov	r8, r1
   11310:	mov	r9, r2
   11314:	bl	10888 <coda_match_filefilter@plt-0x20>
   11318:	asrs	r6, r6, #2
   1131c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11320:	mov	r4, #0
   11324:	add	r4, r4, #1
   11328:	ldr	r3, [r5], #4
   1132c:	mov	r2, r9
   11330:	mov	r1, r8
   11334:	mov	r0, r7
   11338:	blx	r3
   1133c:	cmp	r6, r4
   11340:	bne	11324 <__libc_csu_init@@Base+0x34>
   11344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11348:	strdeq	r0, [r1], -r4
   1134c:	andeq	r0, r1, ip, ror #23

00011350 <__libc_csu_fini@@Base>:
   11350:	bx	lr

Disassembly of section .fini:

00011354 <.fini>:
   11354:	push	{r3, lr}
   11358:	pop	{r3, pc}
