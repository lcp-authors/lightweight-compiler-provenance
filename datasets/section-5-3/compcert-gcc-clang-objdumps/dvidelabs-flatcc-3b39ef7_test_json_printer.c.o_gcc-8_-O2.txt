
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_json_printer.dir/test_json_printer.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <MyGame_InParentNamespace_print_json_table>:
       0:	bx	lr

00000004 <MyGame_Example_TestJSONPrefix_print_json_table>:
       4:	movw	ip, #0
       8:	movt	ip, #0
       c:	strd	r4, [sp, #-16]!
      10:	str	r6, [sp, #8]
      14:	mov	r2, #0
      18:	movw	r3, #0
      1c:	movt	r3, #0
      20:	str	lr, [sp, #12]
      24:	sub	sp, sp, #8
      28:	mov	lr, #21
      2c:	mov	r4, r0
      30:	mov	r5, r1
      34:	mov	r6, #22
      38:	str	lr, [sp]
      3c:	str	ip, [sp, #4]
      40:	bl	0 <flatcc_json_printer_table_field>
      44:	movw	r2, #0
      48:	movt	r2, #0
      4c:	str	r6, [sp]
      50:	mov	r1, r5
      54:	mov	r0, r4
      58:	movw	r3, #0
      5c:	movt	r3, #0
      60:	str	r2, [sp, #4]
      64:	mov	r2, #1
      68:	bl	0 <flatcc_json_printer_table_field>
      6c:	movw	r2, #0
      70:	movt	r2, #0
      74:	str	r6, [sp]
      78:	mov	r1, r5
      7c:	mov	r0, r4
      80:	movw	r3, #0
      84:	movt	r3, #0
      88:	str	r2, [sp, #4]
      8c:	mov	r2, #2
      90:	bl	0 <flatcc_json_printer_table_field>
      94:	add	sp, sp, #8
      98:	ldrd	r4, [sp]
      9c:	ldr	r6, [sp, #8]
      a0:	add	sp, sp, #12
      a4:	pop	{pc}		; (ldr pc, [sp], #4)

000000a8 <Fantasy_Attacker_print_json_table>:
      a8:	mov	ip, #0
      ac:	push	{lr}		; (str lr, [sp, #-4]!)
      b0:	mov	lr, #19
      b4:	sub	sp, sp, #12
      b8:	mov	r2, ip
      bc:	movw	r3, #0
      c0:	movt	r3, #0
      c4:	str	lr, [sp]
      c8:	str	ip, [sp, #4]
      cc:	bl	0 <flatcc_json_printer_int32_field>
      d0:	add	sp, sp, #12
      d4:	pop	{pc}		; (ldr pc, [sp], #4)

000000d8 <MyGame_Example_TestJSONPrefixParsing3_print_json_table>:
      d8:	mov	r2, #15
      dc:	strd	r4, [sp, #-20]!	; 0xffffffec
      e0:	movw	r3, #0
      e4:	movt	r3, #0
      e8:	strd	r6, [sp, #8]
      ec:	mov	r6, #0
      f0:	mov	r7, #0
      f4:	str	lr, [sp, #16]
      f8:	sub	sp, sp, #20
      fc:	mov	r4, r0
     100:	mov	r5, r1
     104:	str	r2, [sp]
     108:	mov	r2, #0
     10c:	strd	r6, [sp, #8]
     110:	bl	0 <flatcc_json_printer_int64_field>
     114:	mov	ip, #0
     118:	mov	r2, #21
     11c:	mov	r1, r5
     120:	mov	r0, r4
     124:	movw	r3, #0
     128:	movt	r3, #0
     12c:	stm	sp, {r2, ip}
     130:	mov	r2, #1
     134:	bl	0 <flatcc_json_printer_uint32_field>
     138:	add	sp, sp, #20
     13c:	ldrd	r4, [sp]
     140:	ldrd	r6, [sp, #8]
     144:	add	sp, sp, #16
     148:	pop	{pc}		; (ldr pc, [sp], #4)

0000014c <MyGame_Example_TestJSONPrefixParsing2_print_json_table>:
     14c:	mov	r2, #15
     150:	strd	r4, [sp, #-20]!	; 0xffffffec
     154:	movw	r3, #0
     158:	movt	r3, #0
     15c:	strd	r6, [sp, #8]
     160:	mov	r6, #0
     164:	mov	r7, #0
     168:	str	lr, [sp, #16]
     16c:	sub	sp, sp, #20
     170:	mov	r4, r0
     174:	mov	r5, r1
     178:	str	r2, [sp]
     17c:	mov	r2, #0
     180:	strd	r6, [sp, #8]
     184:	bl	0 <flatcc_json_printer_int64_field>
     188:	mov	ip, #0
     18c:	mov	r2, #16
     190:	mov	r1, r5
     194:	mov	r0, r4
     198:	movw	r3, #0
     19c:	movt	r3, #0
     1a0:	stm	sp, {r2, ip}
     1a4:	mov	r2, #1
     1a8:	bl	0 <flatcc_json_printer_uint32_field>
     1ac:	add	sp, sp, #20
     1b0:	ldrd	r4, [sp]
     1b4:	ldrd	r6, [sp, #8]
     1b8:	add	sp, sp, #16
     1bc:	pop	{pc}		; (ldr pc, [sp], #4)

000001c0 <MyGame_Example_TestJSONPrefixParsing_print_json_table>:
     1c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
     1c4:	movw	r3, #0
     1c8:	movt	r3, #0
     1cc:	strd	r6, [sp, #8]
     1d0:	mov	r7, #4
     1d4:	mov	r4, r0
     1d8:	strd	r8, [sp, #16]
     1dc:	mov	r5, r1
     1e0:	mov	r6, #8
     1e4:	strd	sl, [sp, #24]
     1e8:	mov	sl, #0
     1ec:	mov	fp, #9
     1f0:	str	lr, [sp, #32]
     1f4:	sub	sp, sp, #20
     1f8:	mov	r2, sl
     1fc:	mov	r8, #0
     200:	mov	r9, #0
     204:	str	r7, [sp]
     208:	bl	0 <flatcc_json_printer_string_field>
     20c:	mov	r1, r5
     210:	mov	r0, r4
     214:	str	fp, [sp]
     218:	mov	r2, #1
     21c:	movw	r3, #0
     220:	movt	r3, #0
     224:	str	sl, [sp, #4]
     228:	bl	0 <flatcc_json_printer_uint32_field>
     22c:	mov	r1, r5
     230:	mov	r0, r4
     234:	str	r7, [sp]
     238:	mov	r2, #2
     23c:	movw	r3, #0
     240:	movt	r3, #0
     244:	bl	0 <flatcc_json_printer_string_field>
     248:	mov	r1, r5
     24c:	mov	r0, r4
     250:	str	r6, [sp]
     254:	mov	r2, #3
     258:	movw	r3, #0
     25c:	movt	r3, #0
     260:	strd	r8, [sp, #8]
     264:	bl	0 <flatcc_json_printer_int64_field>
     268:	mov	r2, r7
     26c:	mov	r1, r5
     270:	str	r7, [sp]
     274:	mov	r0, r4
     278:	movw	r3, #0
     27c:	movt	r3, #0
     280:	bl	0 <flatcc_json_printer_string_field>
     284:	mov	r1, r5
     288:	mov	r0, r4
     28c:	str	r6, [sp]
     290:	mov	r2, #5
     294:	movw	r3, #0
     298:	movt	r3, #0
     29c:	strd	r8, [sp, #8]
     2a0:	bl	0 <flatcc_json_printer_int64_field>
     2a4:	mov	r1, r5
     2a8:	mov	r0, r4
     2ac:	str	fp, [sp]
     2b0:	mov	r2, #6
     2b4:	movw	r3, #0
     2b8:	movt	r3, #0
     2bc:	str	sl, [sp, #4]
     2c0:	bl	0 <flatcc_json_printer_uint32_field>
     2c4:	mov	r1, r5
     2c8:	mov	r0, r4
     2cc:	str	r6, [sp]
     2d0:	mov	r2, #7
     2d4:	movw	r3, #0
     2d8:	movt	r3, #0
     2dc:	strd	r8, [sp, #8]
     2e0:	bl	0 <flatcc_json_printer_int64_field>
     2e4:	mov	r2, r6
     2e8:	mov	r1, r5
     2ec:	str	fp, [sp]
     2f0:	mov	r0, r4
     2f4:	movw	r3, #0
     2f8:	movt	r3, #0
     2fc:	str	sl, [sp, #4]
     300:	bl	0 <flatcc_json_printer_uint32_field>
     304:	add	sp, sp, #20
     308:	ldrd	r4, [sp]
     30c:	ldrd	r6, [sp, #8]
     310:	ldrd	r8, [sp, #16]
     314:	ldrd	sl, [sp, #24]
     318:	add	sp, sp, #32
     31c:	pop	{pc}		; (ldr pc, [sp], #4)

00000320 <MyGame_Example_Monster_print_json_table>:
     320:	movw	ip, #0
     324:	movt	ip, #0
     328:	strd	r4, [sp, #-36]!	; 0xffffffdc
     32c:	strd	r6, [sp, #8]
     330:	mov	r2, #0
     334:	movw	r3, #0
     338:	movt	r3, #0
     33c:	strd	r8, [sp, #16]
     340:	mov	r8, #3
     344:	strd	sl, [sp, #24]
     348:	mov	r4, r0
     34c:	mov	r5, r1
     350:	str	lr, [sp, #32]
     354:	sub	sp, sp, #28
     358:	mov	r7, #4
     35c:	mov	fp, #9
     360:	mov	r6, #17
     364:	stm	sp, {r8, ip}
     368:	movw	sl, #0
     36c:	movt	sl, #0
     370:	bl	0 <flatcc_json_printer_struct_field>
     374:	mov	ip, #150	; 0x96
     378:	mov	r1, r5
     37c:	mov	r0, r4
     380:	mov	r2, #1
     384:	movw	r3, #0
     388:	movt	r3, #0
     38c:	stm	sp, {r7, ip}
     390:	bl	0 <flatcc_json_printer_int16_field>
     394:	mov	lr, #100	; 0x64
     398:	mov	ip, #2
     39c:	mov	r2, ip
     3a0:	mov	r1, r5
     3a4:	stm	sp, {ip, lr}
     3a8:	movw	ip, #0
     3ac:	movt	ip, #0
     3b0:	mov	r0, r4
     3b4:	movw	r3, #0
     3b8:	movt	r3, #0
     3bc:	str	ip, [sp, #20]
     3c0:	mov	r9, #0
     3c4:	bl	0 <flatcc_json_printer_int16_field>
     3c8:	mov	r2, r8
     3cc:	mov	r1, r5
     3d0:	str	r7, [sp]
     3d4:	mov	r0, r4
     3d8:	movw	r3, #0
     3dc:	movt	r3, #0
     3e0:	mov	r8, #16
     3e4:	bl	0 <flatcc_json_printer_string_field>
     3e8:	mov	r1, r5
     3ec:	mov	r0, r4
     3f0:	str	fp, [sp]
     3f4:	mov	r2, #5
     3f8:	movw	r3, #0
     3fc:	movt	r3, #0
     400:	bl	0 <flatcc_json_printer_uint8_vector_field>
     404:	mov	lr, #8
     408:	mov	r3, #5
     40c:	movw	r2, #0
     410:	movt	r2, #0
     414:	mov	r1, r5
     418:	mov	r0, r4
     41c:	stm	sp, {r3, lr}
     420:	movw	r3, #0
     424:	movt	r3, #0
     428:	str	r2, [sp, #8]
     42c:	mov	r2, #6
     430:	bl	0 <flatcc_json_printer_int8_enum_field>
     434:	movw	r0, #0
     438:	movt	r0, #0
     43c:	str	r7, [sp]
     440:	movw	r3, #0
     444:	movt	r3, #0
     448:	mov	r1, r5
     44c:	mov	r2, #8
     450:	str	r3, [sp, #4]
     454:	movw	r3, #0
     458:	movt	r3, #0
     45c:	str	r0, [sp, #8]
     460:	mov	r0, r4
     464:	bl	0 <flatcc_json_printer_union_field>
     468:	ldr	ip, [sp, #20]
     46c:	mov	r3, #5
     470:	mov	r2, fp
     474:	mov	r1, r5
     478:	mov	r0, r4
     47c:	stm	sp, {r3, r7, ip}
     480:	movw	r3, #0
     484:	movt	r3, #0
     488:	bl	0 <flatcc_json_printer_struct_vector_field>
     48c:	mov	r1, r5
     490:	mov	r0, r4
     494:	str	r6, [sp]
     498:	mov	r2, #10
     49c:	movw	r3, #0
     4a0:	movt	r3, #0
     4a4:	bl	0 <flatcc_json_printer_string_vector_field>
     4a8:	mov	r1, r5
     4ac:	mov	r0, r4
     4b0:	stm	sp, {r6, sl}
     4b4:	mov	r2, #11
     4b8:	movw	r3, #0
     4bc:	movt	r3, #0
     4c0:	bl	0 <flatcc_json_printer_table_vector_field>
     4c4:	mov	r3, #5
     4c8:	mov	r1, r5
     4cc:	mov	r0, r4
     4d0:	mov	r2, #12
     4d4:	stm	sp, {r3, sl}
     4d8:	movw	r3, #0
     4dc:	movt	r3, #0
     4e0:	bl	0 <flatcc_json_printer_table_field>
     4e4:	mov	r2, #20
     4e8:	mov	r1, r5
     4ec:	mov	r0, r4
     4f0:	movw	r3, #0
     4f4:	movt	r3, #0
     4f8:	stm	sp, {r2, r9, sl}
     4fc:	mov	r2, #13
     500:	mov	sl, #0
     504:	bl	0 <flatcc_json_printer_table_as_nested_root>
     508:	movw	r2, #0
     50c:	movt	r2, #0
     510:	str	fp, [sp]
     514:	mov	r1, r5
     518:	mov	r0, r4
     51c:	movw	r3, #0
     520:	movt	r3, #0
     524:	str	r2, [sp, #4]
     528:	mov	r2, #14
     52c:	mov	fp, #0
     530:	bl	0 <flatcc_json_printer_table_field>
     534:	mov	lr, #8
     538:	mov	r2, #1
     53c:	mov	r1, r5
     540:	mov	r0, r4
     544:	movw	r3, #0
     548:	movt	r3, #0
     54c:	str	lr, [sp]
     550:	str	r2, [sp, #4]
     554:	mov	r2, #15
     558:	bl	0 <flatcc_json_printer_bool_field>
     55c:	mov	r1, r5
     560:	mov	r0, r4
     564:	strd	r8, [sp]
     568:	mov	r2, r8
     56c:	movw	r3, #0
     570:	movt	r3, #0
     574:	bl	0 <flatcc_json_printer_int32_field>
     578:	mov	r2, r6
     57c:	mov	r1, r5
     580:	strd	r8, [sp]
     584:	mov	r0, r4
     588:	movw	r3, #0
     58c:	movt	r3, #0
     590:	bl	0 <flatcc_json_printer_uint32_field>
     594:	mov	r1, r5
     598:	mov	r0, r4
     59c:	str	r8, [sp]
     5a0:	mov	r2, #18
     5a4:	movw	r3, #0
     5a8:	movt	r3, #0
     5ac:	strd	sl, [sp, #8]
     5b0:	bl	0 <flatcc_json_printer_int64_field>
     5b4:	mov	r1, r5
     5b8:	mov	r0, r4
     5bc:	str	r8, [sp]
     5c0:	mov	r2, #19
     5c4:	movw	r3, #0
     5c8:	movt	r3, #0
     5cc:	strd	sl, [sp, #8]
     5d0:	bl	0 <flatcc_json_printer_uint64_field>
     5d4:	mov	r1, r5
     5d8:	mov	r0, r4
     5dc:	stm	sp, {r6, r9}
     5e0:	mov	r2, #20
     5e4:	movw	r3, #0
     5e8:	movt	r3, #0
     5ec:	bl	0 <flatcc_json_printer_int32_field>
     5f0:	mov	r1, r5
     5f4:	mov	r0, r4
     5f8:	stm	sp, {r6, r9}
     5fc:	mov	r2, #21
     600:	movw	r3, #0
     604:	movt	r3, #0
     608:	bl	0 <flatcc_json_printer_uint32_field>
     60c:	mov	r1, r5
     610:	mov	r0, r4
     614:	str	r6, [sp]
     618:	mov	r2, #22
     61c:	movw	r3, #0
     620:	movt	r3, #0
     624:	strd	sl, [sp, #8]
     628:	bl	0 <flatcc_json_printer_int64_field>
     62c:	mov	r1, r5
     630:	mov	r0, r4
     634:	str	r6, [sp]
     638:	mov	r2, #23
     63c:	movw	r3, #0
     640:	movt	r3, #0
     644:	strd	sl, [sp, #8]
     648:	bl	0 <flatcc_json_printer_uint64_field>
     64c:	str	r8, [sp]
     650:	mov	r8, #5
     654:	mov	r1, r5
     658:	mov	r0, r4
     65c:	mov	r2, #24
     660:	movw	r3, #0
     664:	movt	r3, #0
     668:	bl	0 <flatcc_json_printer_bool_vector_field>
     66c:	mov	r1, r5
     670:	mov	r0, r4
     674:	vldr	s0, [pc, #412]	; 818 <MyGame_Example_Monster_print_json_table+0x4f8>
     678:	mov	r2, #25
     67c:	movw	r3, #0
     680:	movt	r3, #0
     684:	str	r8, [sp]
     688:	bl	0 <flatcc_json_printer_float_field>
     68c:	mov	r2, #6
     690:	mov	r1, r5
     694:	vldr	s0, [pc, #384]	; 81c <MyGame_Example_Monster_print_json_table+0x4fc>
     698:	mov	r9, r2
     69c:	mov	r0, r4
     6a0:	movw	r3, #0
     6a4:	movt	r3, #0
     6a8:	str	r2, [sp]
     6ac:	mov	r2, #26
     6b0:	bl	0 <flatcc_json_printer_float_field>
     6b4:	vldr	s0, [pc, #356]	; 820 <MyGame_Example_Monster_print_json_table+0x500>
     6b8:	mov	r1, r5
     6bc:	mov	r0, r4
     6c0:	mov	r2, #27
     6c4:	movw	r3, #0
     6c8:	movt	r3, #0
     6cc:	str	r9, [sp]
     6d0:	bl	0 <flatcc_json_printer_float_field>
     6d4:	mov	ip, #18
     6d8:	mov	r1, r5
     6dc:	mov	r0, r4
     6e0:	mov	r2, #28
     6e4:	movw	r3, #0
     6e8:	movt	r3, #0
     6ec:	str	ip, [sp]
     6f0:	bl	0 <flatcc_json_printer_string_vector_field>
     6f4:	mov	lr, #8
     6f8:	movw	ip, #0
     6fc:	movt	ip, #0
     700:	mov	r1, r5
     704:	str	lr, [sp, #4]
     708:	mov	lr, #23
     70c:	mov	r0, r4
     710:	mov	r2, #29
     714:	movw	r3, #0
     718:	movt	r3, #0
     71c:	str	lr, [sp]
     720:	str	ip, [sp, #8]
     724:	bl	0 <flatcc_json_printer_struct_vector_field>
     728:	mov	r1, r5
     72c:	mov	r0, r4
     730:	str	r7, [sp]
     734:	mov	r2, #30
     738:	movw	r3, #0
     73c:	movt	r3, #0
     740:	bl	0 <flatcc_json_printer_uint8_vector_field>
     744:	ldr	ip, [sp, #20]
     748:	mov	r1, r5
     74c:	mov	r0, r4
     750:	mov	r2, #31
     754:	movw	r3, #0
     758:	movt	r3, #0
     75c:	str	r8, [sp]
     760:	stmib	sp, {r7, ip}
     764:	bl	0 <flatcc_json_printer_struct_vector_field>
     768:	mov	ip, #15
     76c:	mov	r1, r5
     770:	mov	r0, r4
     774:	mov	r2, #32
     778:	movw	r3, #0
     77c:	movt	r3, #0
     780:	str	ip, [sp]
     784:	bl	0 <flatcc_json_printer_int64_vector_field>
     788:	mov	r1, r5
     78c:	mov	r0, r4
     790:	str	r6, [sp]
     794:	mov	r2, #33	; 0x21
     798:	movw	r3, #0
     79c:	movt	r3, #0
     7a0:	bl	0 <flatcc_json_printer_double_vector_field>
     7a4:	mov	lr, #21
     7a8:	movw	ip, #0
     7ac:	movt	ip, #0
     7b0:	mov	r1, r5
     7b4:	mov	r0, r4
     7b8:	mov	r2, #34	; 0x22
     7bc:	str	lr, [sp]
     7c0:	movw	r3, #0
     7c4:	movt	r3, #0
     7c8:	str	ip, [sp, #4]
     7cc:	bl	0 <flatcc_json_printer_table_field>
     7d0:	mov	lr, #10
     7d4:	movw	ip, #0
     7d8:	movt	ip, #0
     7dc:	mov	r1, r5
     7e0:	mov	r0, r4
     7e4:	mov	r2, #35	; 0x23
     7e8:	str	lr, [sp]
     7ec:	movw	r3, #0
     7f0:	movt	r3, #0
     7f4:	str	ip, [sp, #4]
     7f8:	bl	0 <flatcc_json_printer_table_field>
     7fc:	add	sp, sp, #28
     800:	ldrd	r4, [sp]
     804:	ldrd	r6, [sp, #8]
     808:	ldrd	r8, [sp, #16]
     80c:	ldrd	sl, [sp, #24]
     810:	add	sp, sp, #32
     814:	pop	{pc}		; (ldr pc, [sp], #4)
     818:	.word	0x489965e0
     81c:	.word	0x40400000
     820:	.word	0x00000000

00000824 <MyGame_Example_TestBase64_print_json_table>:
     824:	mov	ip, #4
     828:	strd	r4, [sp, #-16]!
     82c:	mov	r4, #0
     830:	str	r6, [sp, #8]
     834:	mov	r2, r4
     838:	movw	r3, #0
     83c:	movt	r3, #0
     840:	str	lr, [sp, #12]
     844:	sub	sp, sp, #8
     848:	mov	r5, r0
     84c:	mov	r6, r1
     850:	str	ip, [sp]
     854:	str	r4, [sp, #4]
     858:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     85c:	mov	ip, #1
     860:	mov	r3, #7
     864:	mov	r1, r6
     868:	mov	r0, r5
     86c:	mov	r2, ip
     870:	stm	sp, {r3, ip}
     874:	movw	r3, #0
     878:	movt	r3, #0
     87c:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     880:	mov	ip, #6
     884:	mov	r1, r6
     888:	mov	r0, r5
     88c:	mov	r2, #2
     890:	movw	r3, #0
     894:	movt	r3, #0
     898:	str	ip, [sp]
     89c:	str	r4, [sp, #4]
     8a0:	bl	0 <flatcc_json_printer_uint8_vector_base64_field>
     8a4:	add	sp, sp, #8
     8a8:	ldrd	r4, [sp]
     8ac:	ldr	r6, [sp, #8]
     8b0:	add	sp, sp, #12
     8b4:	pop	{pc}		; (ldr pc, [sp], #4)

000008b8 <MyGame_Example_Ability_print_json_struct>:
     8b8:	movw	ip, #0
     8bc:	movt	ip, #0
     8c0:	strd	r4, [sp, #-12]!
     8c4:	str	lr, [sp, #8]
     8c8:	sub	sp, sp, #12
     8cc:	mov	lr, #2
     8d0:	mov	r3, #0
     8d4:	mov	r4, r1
     8d8:	mov	r2, r1
     8dc:	mov	r1, r3
     8e0:	stm	sp, {ip, lr}
     8e4:	mov	r5, r0
     8e8:	bl	0 <flatcc_json_printer_uint32_struct_field>
     8ec:	mov	ip, #8
     8f0:	movw	r1, #0
     8f4:	movt	r1, #0
     8f8:	mov	r2, r4
     8fc:	mov	r0, r5
     900:	mov	r3, #4
     904:	stm	sp, {r1, ip}
     908:	mov	r1, #1
     90c:	bl	0 <flatcc_json_printer_uint32_struct_field>
     910:	add	sp, sp, #12
     914:	ldrd	r4, [sp]
     918:	add	sp, sp, #8
     91c:	pop	{pc}		; (ldr pc, [sp], #4)

00000920 <MyGame_Example_Stat_print_json_table>:
     920:	strd	r4, [sp, #-24]!	; 0xffffffe8
     924:	mov	r2, #0
     928:	movw	r3, #0
     92c:	movt	r3, #0
     930:	str	r6, [sp, #8]
     934:	mov	r6, #2
     938:	strd	r8, [sp, #12]
     93c:	mov	r4, r0
     940:	mov	r5, r1
     944:	str	lr, [sp, #20]
     948:	sub	sp, sp, #16
     94c:	mov	r8, #0
     950:	mov	r9, #0
     954:	str	r6, [sp]
     958:	bl	0 <flatcc_json_printer_string_field>
     95c:	mov	r3, #3
     960:	mov	r1, r5
     964:	mov	r0, r4
     968:	mov	r2, #1
     96c:	str	r3, [sp]
     970:	movw	r3, #0
     974:	movt	r3, #0
     978:	strd	r8, [sp, #8]
     97c:	bl	0 <flatcc_json_printer_int64_field>
     980:	mov	ip, #0
     984:	mov	lr, #5
     988:	mov	r2, r6
     98c:	mov	r1, r5
     990:	mov	r0, r4
     994:	movw	r3, #0
     998:	movt	r3, #0
     99c:	str	lr, [sp]
     9a0:	str	ip, [sp, #4]
     9a4:	bl	0 <flatcc_json_printer_uint16_field>
     9a8:	add	sp, sp, #16
     9ac:	ldrd	r4, [sp]
     9b0:	ldr	r6, [sp, #8]
     9b4:	ldrd	r8, [sp, #12]
     9b8:	add	sp, sp, #20
     9bc:	pop	{pc}		; (ldr pc, [sp], #4)

000009c0 <MyGame_Example_Test_print_json_struct>:
     9c0:	movw	ip, #0
     9c4:	movt	ip, #0
     9c8:	strd	r4, [sp, #-16]!
     9cc:	mov	r4, #1
     9d0:	str	r6, [sp, #8]
     9d4:	mov	r3, #0
     9d8:	str	lr, [sp, #12]
     9dc:	sub	sp, sp, #8
     9e0:	mov	r5, r1
     9e4:	mov	r2, r1
     9e8:	mov	r1, r3
     9ec:	str	ip, [sp]
     9f0:	mov	r6, r0
     9f4:	str	r4, [sp, #4]
     9f8:	bl	0 <flatcc_json_printer_int16_struct_field>
     9fc:	movw	ip, #0
     a00:	movt	ip, #0
     a04:	mov	r2, r5
     a08:	mov	r1, r4
     a0c:	mov	r0, r6
     a10:	mov	r3, #2
     a14:	str	ip, [sp]
     a18:	str	r4, [sp, #4]
     a1c:	bl	0 <flatcc_json_printer_int8_struct_field>
     a20:	add	sp, sp, #8
     a24:	ldrd	r4, [sp]
     a28:	ldr	r6, [sp, #8]
     a2c:	add	sp, sp, #12
     a30:	pop	{pc}		; (ldr pc, [sp], #4)

00000a34 <MyGame_Example_Any_print_json_union>:
     a34:	ldrb	r3, [r1, #8]
     a38:	sub	r3, r3, #1
     a3c:	cmp	r3, #3
     a40:	ldrls	pc, [pc, r3, lsl #2]
     a44:	b	a88 <MyGame_Example_Any_print_json_union+0x54>
     a48:	.word	0x00000a7c
     a4c:	.word	0x00000a70
     a50:	.word	0x00000a64
     a54:	.word	0x00000a58
     a58:	movw	r2, #0
     a5c:	movt	r2, #0
     a60:	b	0 <flatcc_json_printer_union_table>
     a64:	movw	r2, #0
     a68:	movt	r2, #0
     a6c:	b	0 <flatcc_json_printer_union_table>
     a70:	movw	r2, #0
     a74:	movt	r2, #0
     a78:	b	0 <flatcc_json_printer_union_table>
     a7c:	movw	r2, #0
     a80:	movt	r2, #0
     a84:	b	0 <flatcc_json_printer_union_table>
     a88:	bx	lr

00000a8c <MyGame_Example_Alt_print_json_table>:
     a8c:	movw	ip, #0
     a90:	movt	ip, #0
     a94:	strd	r4, [sp, #-12]!
     a98:	str	lr, [sp, #8]
     a9c:	sub	sp, sp, #20
     aa0:	mov	lr, #6
     aa4:	mov	r2, #0
     aa8:	movw	r3, #0
     aac:	movt	r3, #0
     ab0:	str	lr, [sp]
     ab4:	mov	r4, r0
     ab8:	str	ip, [sp, #4]
     abc:	mov	r5, r1
     ac0:	bl	0 <flatcc_json_printer_table_field>
     ac4:	mov	r2, #5
     ac8:	movw	r3, #0
     acc:	movt	r3, #0
     ad0:	mov	r1, r5
     ad4:	mov	r0, r4
     ad8:	strd	r2, [sp]
     adc:	mov	r2, #1
     ae0:	movw	r3, #0
     ae4:	movt	r3, #0
     ae8:	bl	0 <flatcc_json_printer_table_field>
     aec:	mov	lr, #7
     af0:	movw	r3, #0
     af4:	movt	r3, #0
     af8:	movw	ip, #0
     afc:	movt	ip, #0
     b00:	mov	r1, r5
     b04:	str	lr, [sp]
     b08:	mov	r0, r4
     b0c:	mov	r2, #3
     b10:	str	ip, [sp, #4]
     b14:	str	r3, [sp, #8]
     b18:	movw	r3, #0
     b1c:	movt	r3, #0
     b20:	bl	0 <flatcc_json_printer_union_vector_field>
     b24:	add	sp, sp, #20
     b28:	ldrd	r4, [sp]
     b2c:	add	sp, sp, #8
     b30:	pop	{pc}		; (ldr pc, [sp], #4)

00000b34 <Fantasy_Movie_print_json_table>:
     b34:	mov	r2, #14
     b38:	strd	r4, [sp, #-28]!	; 0xffffffe4
     b3c:	movw	r4, #0
     b40:	movt	r4, #0
     b44:	movw	r5, #0
     b48:	movt	r5, #0
     b4c:	strd	r6, [sp, #8]
     b50:	movw	r3, #0
     b54:	movt	r3, #0
     b58:	strd	r8, [sp, #16]
     b5c:	mov	r8, #10
     b60:	str	lr, [sp, #24]
     b64:	sub	sp, sp, #20
     b68:	mov	r6, r0
     b6c:	mov	r7, r1
     b70:	mov	r9, #9
     b74:	stm	sp, {r2, r5}
     b78:	mov	r2, #1
     b7c:	str	r4, [sp, #8]
     b80:	bl	0 <flatcc_json_printer_union_field>
     b84:	mov	r1, r7
     b88:	mov	r0, r6
     b8c:	str	r8, [sp]
     b90:	mov	r2, #3
     b94:	movw	r3, #0
     b98:	movt	r3, #0
     b9c:	str	r5, [sp, #4]
     ba0:	str	r4, [sp, #8]
     ba4:	bl	0 <flatcc_json_printer_union_field>
     ba8:	mov	r1, r7
     bac:	mov	r0, r6
     bb0:	str	r9, [sp]
     bb4:	mov	r2, #5
     bb8:	movw	r3, #0
     bbc:	movt	r3, #0
     bc0:	str	r5, [sp, #4]
     bc4:	str	r4, [sp, #8]
     bc8:	bl	0 <flatcc_json_printer_union_field>
     bcc:	mov	r2, #5
     bd0:	mov	r1, r7
     bd4:	mov	r0, r6
     bd8:	movw	r3, #0
     bdc:	movt	r3, #0
     be0:	stm	sp, {r2, r5}
     be4:	mov	r2, #7
     be8:	str	r4, [sp, #8]
     bec:	bl	0 <flatcc_json_printer_union_field>
     bf0:	mov	r2, r9
     bf4:	mov	r1, r7
     bf8:	str	r8, [sp]
     bfc:	mov	r0, r6
     c00:	movw	r3, #0
     c04:	movt	r3, #0
     c08:	str	r5, [sp, #4]
     c0c:	str	r4, [sp, #8]
     c10:	bl	0 <flatcc_json_printer_union_vector_field>
     c14:	add	sp, sp, #20
     c18:	ldrd	r4, [sp]
     c1c:	ldrd	r6, [sp, #8]
     c20:	ldrd	r8, [sp, #16]
     c24:	add	sp, sp, #24
     c28:	pop	{pc}		; (ldr pc, [sp], #4)

00000c2c <Fantasy_Character_print_json_union>:
     c2c:	ldrb	r3, [r1, #8]
     c30:	mov	r2, r1
     c34:	mov	ip, r0
     c38:	cmp	r3, #10
     c3c:	bhi	c64 <Fantasy_Character_print_json_union+0x38>
     c40:	cmp	r3, #9
     c44:	bcs	c88 <Fantasy_Character_print_json_union+0x5c>
     c48:	cmp	r3, #2
     c4c:	beq	c94 <Fantasy_Character_print_json_union+0x68>
     c50:	cmp	r3, #8
     c54:	bne	c80 <Fantasy_Character_print_json_union+0x54>
     c58:	movw	r2, #0
     c5c:	movt	r2, #0
     c60:	b	0 <flatcc_json_printer_union_struct>
     c64:	cmp	r3, #11
     c68:	beq	c74 <Fantasy_Character_print_json_union+0x48>
     c6c:	cmp	r3, #255	; 0xff
     c70:	bne	c84 <Fantasy_Character_print_json_union+0x58>
     c74:	mov	r1, r2
     c78:	mov	r0, ip
     c7c:	b	0 <flatcc_json_printer_union_string>
     c80:	bx	lr
     c84:	bx	lr
     c88:	movw	r2, #0
     c8c:	movt	r2, #0
     c90:	b	0 <flatcc_json_printer_union_struct>
     c94:	movw	r2, #0
     c98:	movt	r2, #0
     c9c:	b	0 <flatcc_json_printer_union_table>

00000ca0 <Fantasy_BookReader_print_json_struct>:
     ca0:	movw	ip, #0
     ca4:	movt	ip, #0
     ca8:	push	{lr}		; (str lr, [sp, #-4]!)
     cac:	mov	lr, #10
     cb0:	sub	sp, sp, #12
     cb4:	mov	r3, #0
     cb8:	mov	r2, r1
     cbc:	mov	r1, r3
     cc0:	stm	sp, {ip, lr}
     cc4:	bl	0 <flatcc_json_printer_int32_struct_field>
     cc8:	add	sp, sp, #12
     ccc:	pop	{pc}		; (ldr pc, [sp], #4)

00000cd0 <Fantasy_Rapunzel_print_json_struct>:
     cd0:	movw	ip, #0
     cd4:	movt	ip, #0
     cd8:	push	{lr}		; (str lr, [sp, #-4]!)
     cdc:	mov	lr, #11
     ce0:	sub	sp, sp, #12
     ce4:	mov	r3, #0
     ce8:	mov	r2, r1
     cec:	mov	r1, r3
     cf0:	stm	sp, {ip, lr}
     cf4:	bl	0 <flatcc_json_printer_uint16_struct_field>
     cf8:	add	sp, sp, #12
     cfc:	pop	{pc}		; (ldr pc, [sp], #4)

00000d00 <Fantasy_Character_print_json_union_type>:
     d00:	cmp	r1, #9
     d04:	mov	r3, r0
     d08:	beq	d54 <Fantasy_Character_print_json_union_type+0x54>
     d0c:	bls	d34 <Fantasy_Character_print_json_union_type+0x34>
     d10:	cmp	r1, #11
     d14:	beq	d64 <Fantasy_Character_print_json_union_type+0x64>
     d18:	bcc	d74 <Fantasy_Character_print_json_union_type+0x74>
     d1c:	cmp	r1, #255	; 0xff
     d20:	bne	d84 <Fantasy_Character_print_json_union_type+0x84>
     d24:	movw	r1, #0
     d28:	movt	r1, #0
     d2c:	mov	r2, #6
     d30:	b	0 <flatcc_json_printer_enum>
     d34:	cmp	r1, #2
     d38:	beq	d98 <Fantasy_Character_print_json_union_type+0x98>
     d3c:	cmp	r1, #8
     d40:	bne	d84 <Fantasy_Character_print_json_union_type+0x84>
     d44:	mov	r2, r1
     d48:	movw	r1, #0
     d4c:	movt	r1, #0
     d50:	b	0 <flatcc_json_printer_enum>
     d54:	movw	r1, #0
     d58:	movt	r1, #0
     d5c:	mov	r2, #5
     d60:	b	0 <flatcc_json_printer_enum>
     d64:	movw	r1, #0
     d68:	movt	r1, #0
     d6c:	mov	r2, #5
     d70:	b	0 <flatcc_json_printer_enum>
     d74:	movw	r1, #0
     d78:	movt	r1, #0
     d7c:	mov	r2, #7
     d80:	b	0 <flatcc_json_printer_enum>
     d84:	movw	r1, #0
     d88:	movt	r1, #0
     d8c:	mov	r0, r3
     d90:	mov	r2, #4
     d94:	b	0 <flatcc_json_printer_enum>
     d98:	movw	r1, #0
     d9c:	movt	r1, #0
     da0:	mov	r2, #5
     da4:	b	0 <flatcc_json_printer_enum>

00000da8 <MyGame_Example_TestSimpleTableWithEnum_print_json_table>:
     da8:	mov	ip, #5
     dac:	strd	r4, [sp, #-20]!	; 0xffffffec
     db0:	mov	r4, #2
     db4:	movw	r5, #0
     db8:	movt	r5, #0
     dbc:	strd	r6, [sp, #8]
     dc0:	str	lr, [sp, #16]
     dc4:	sub	sp, sp, #20
     dc8:	mov	r2, #0
     dcc:	movw	r3, #0
     dd0:	movt	r3, #0
     dd4:	str	ip, [sp]
     dd8:	mov	r6, r0
     ddc:	mov	r7, r1
     de0:	strd	r4, [sp, #4]
     de4:	bl	0 <flatcc_json_printer_int8_enum_field>
     de8:	mov	r2, #6
     dec:	mov	r1, r7
     df0:	mov	r0, r6
     df4:	movw	r3, #0
     df8:	movt	r3, #0
     dfc:	stm	sp, {r2, r4, r5}
     e00:	mov	r2, #1
     e04:	bl	0 <flatcc_json_printer_int8_enum_field>
     e08:	mov	r2, r4
     e0c:	mov	r1, r7
     e10:	str	r4, [sp]
     e14:	mov	r0, r6
     e18:	movw	r3, #0
     e1c:	movt	r3, #0
     e20:	str	r4, [sp, #4]
     e24:	bl	0 <flatcc_json_printer_uint8_field>
     e28:	mov	ip, #3
     e2c:	mov	r1, r7
     e30:	mov	r0, r6
     e34:	mov	r2, ip
     e38:	movw	r3, #0
     e3c:	movt	r3, #0
     e40:	str	ip, [sp]
     e44:	str	r4, [sp, #4]
     e48:	bl	0 <flatcc_json_printer_uint8_field>
     e4c:	add	sp, sp, #20
     e50:	ldrd	r4, [sp]
     e54:	ldrd	r6, [sp, #8]
     e58:	add	sp, sp, #16
     e5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000e60 <MyGame_Example_Color_print_json_enum>:
     e60:	strd	r4, [sp, #-24]!	; 0xffffffe8
     e64:	uxtb	r4, r1
     e68:	tst	r4, #244	; 0xf4
     e6c:	strd	r6, [sp, #8]
     e70:	movne	r5, #1
     e74:	moveq	r5, #0
     e78:	str	r8, [sp, #16]
     e7c:	cmp	r4, #0
     e80:	str	lr, [sp, #20]
     e84:	moveq	r5, #1
     e88:	cmp	r5, #0
     e8c:	beq	ea8 <MyGame_Example_Color_print_json_enum+0x48>
     e90:	ldrd	r4, [sp]
     e94:	ldrd	r6, [sp, #8]
     e98:	ldr	r8, [sp, #16]
     e9c:	ldr	lr, [sp, #20]
     ea0:	add	sp, sp, #24
     ea4:	b	0 <flatcc_json_printer_int8>
     ea8:	sub	r3, r4, #1
     eac:	mov	r6, r0
     eb0:	tst	r3, r4
     eb4:	movne	r7, #1
     eb8:	moveq	r7, #0
     ebc:	mov	r1, r7
     ec0:	bl	0 <flatcc_json_printer_delimit_enum_flags>
     ec4:	ands	r1, r4, #1
     ec8:	bne	efc <MyGame_Example_Color_print_json_enum+0x9c>
     ecc:	tst	r4, #2
     ed0:	bne	f20 <MyGame_Example_Color_print_json_enum+0xc0>
     ed4:	tst	r4, #8
     ed8:	bne	f44 <MyGame_Example_Color_print_json_enum+0xe4>
     edc:	mov	r1, r7
     ee0:	mov	r0, r6
     ee4:	ldrd	r4, [sp]
     ee8:	ldrd	r6, [sp, #8]
     eec:	ldr	r8, [sp, #16]
     ef0:	ldr	lr, [sp, #20]
     ef4:	add	sp, sp, #24
     ef8:	b	0 <flatcc_json_printer_delimit_enum_flags>
     efc:	mov	r1, r5
     f00:	movw	r2, #0
     f04:	movt	r2, #0
     f08:	mov	r3, #3
     f0c:	mov	r0, r6
     f10:	bl	0 <flatcc_json_printer_enum_flag>
     f14:	tst	r4, #2
     f18:	mov	r1, #1
     f1c:	beq	ed4 <MyGame_Example_Color_print_json_enum+0x74>
     f20:	movw	r2, #0
     f24:	movt	r2, #0
     f28:	mov	r3, #5
     f2c:	mov	r0, r6
     f30:	add	r5, r1, #1
     f34:	bl	0 <flatcc_json_printer_enum_flag>
     f38:	tst	r4, #8
     f3c:	mov	r1, r5
     f40:	beq	edc <MyGame_Example_Color_print_json_enum+0x7c>
     f44:	movw	r2, #0
     f48:	movt	r2, #0
     f4c:	mov	r3, #4
     f50:	mov	r0, r6
     f54:	bl	0 <flatcc_json_printer_enum_flag>
     f58:	b	edc <MyGame_Example_Color_print_json_enum+0x7c>

00000f5c <MyGame_Example_Vec3_print_json_struct>:
     f5c:	movw	ip, #0
     f60:	movt	ip, #0
     f64:	strd	r4, [sp, #-16]!
     f68:	str	r6, [sp, #8]
     f6c:	mov	r6, #1
     f70:	mov	r3, #0
     f74:	str	lr, [sp, #12]
     f78:	sub	sp, sp, #16
     f7c:	mov	r4, r1
     f80:	mov	r2, r1
     f84:	mov	r1, r3
     f88:	str	ip, [sp]
     f8c:	mov	r5, r0
     f90:	str	r6, [sp, #4]
     f94:	bl	0 <flatcc_json_printer_float_struct_field>
     f98:	movw	r3, #0
     f9c:	movt	r3, #0
     fa0:	mov	r2, r4
     fa4:	mov	r1, r6
     fa8:	mov	r0, r5
     fac:	stm	sp, {r3, r6}
     fb0:	mov	r3, #4
     fb4:	bl	0 <flatcc_json_printer_float_struct_field>
     fb8:	movw	ip, #0
     fbc:	movt	ip, #0
     fc0:	mov	r2, r4
     fc4:	mov	r0, r5
     fc8:	mov	r3, #8
     fcc:	mov	r1, #2
     fd0:	str	ip, [sp]
     fd4:	str	r6, [sp, #4]
     fd8:	mov	r6, #5
     fdc:	bl	0 <flatcc_json_printer_float_struct_field>
     fe0:	movw	r1, #0
     fe4:	movt	r1, #0
     fe8:	mov	r2, r4
     fec:	mov	r0, r5
     ff0:	mov	r3, #16
     ff4:	stm	sp, {r1, r6}
     ff8:	mov	r1, #3
     ffc:	bl	0 <flatcc_json_printer_double_struct_field>
    1000:	movw	r3, #0
    1004:	movt	r3, #0
    1008:	movw	r1, #0
    100c:	movt	r1, #0
    1010:	mov	r2, r4
    1014:	mov	r0, r5
    1018:	stm	sp, {r1, r6}
    101c:	mov	r1, #4
    1020:	str	r3, [sp, #8]
    1024:	mov	r3, #24
    1028:	bl	0 <flatcc_json_printer_int8_enum_struct_field>
    102c:	movw	r3, #0
    1030:	movt	r3, #0
    1034:	str	r6, [sp, #4]
    1038:	movw	ip, #0
    103c:	movt	ip, #0
    1040:	mov	r2, r4
    1044:	mov	r1, r6
    1048:	mov	r0, r5
    104c:	str	ip, [sp]
    1050:	str	r3, [sp, #8]
    1054:	mov	r3, #26
    1058:	bl	0 <flatcc_json_printer_embedded_struct_field>
    105c:	add	sp, sp, #16
    1060:	ldrd	r4, [sp]
    1064:	ldr	r6, [sp, #8]
    1068:	add	sp, sp, #12
    106c:	pop	{pc}		; (ldr pc, [sp], #4)

00001070 <MyGame_Example_Any_print_json_union_type>:
    1070:	sub	r1, r1, #1
    1074:	cmp	r1, #3
    1078:	ldrls	pc, [pc, r1, lsl #2]
    107c:	b	10d0 <MyGame_Example_Any_print_json_union_type+0x60>
    1080:	.word	0x000010c0
    1084:	.word	0x000010b0
    1088:	.word	0x000010a0
    108c:	.word	0x00001090
    1090:	movw	r1, #0
    1094:	movt	r1, #0
    1098:	mov	r2, #3
    109c:	b	0 <flatcc_json_printer_enum>
    10a0:	movw	r1, #0
    10a4:	movt	r1, #0
    10a8:	mov	r2, #8
    10ac:	b	0 <flatcc_json_printer_enum>
    10b0:	movw	r1, #0
    10b4:	movt	r1, #0
    10b8:	mov	r2, #23
    10bc:	b	0 <flatcc_json_printer_enum>
    10c0:	movw	r1, #0
    10c4:	movt	r1, #0
    10c8:	mov	r2, #7
    10cc:	b	0 <flatcc_json_printer_enum>
    10d0:	movw	r1, #0
    10d4:	movt	r1, #0
    10d8:	mov	r2, #4
    10dc:	b	0 <flatcc_json_printer_enum>

000010e0 <readfile.constprop.5>:
    10e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    10e4:	strd	r6, [sp, #8]
    10e8:	str	r8, [sp, #16]
    10ec:	mov	r8, r1
    10f0:	movw	r1, #0
    10f4:	movt	r1, #0
    10f8:	str	lr, [sp, #20]
    10fc:	bl	0 <fopen>
    1100:	subs	r6, r0, #0
    1104:	beq	11c0 <readfile.constprop.5+0xe0>
    1108:	mov	r2, #2
    110c:	mov	r1, #0
    1110:	bl	0 <fseek>
    1114:	mov	r0, r6
    1118:	bl	0 <ftell>
    111c:	mov	r5, r0
    1120:	mov	r0, r6
    1124:	cmp	r5, #10240	; 0x2800
    1128:	str	r5, [r8]
    112c:	bhi	11b8 <readfile.constprop.5+0xd8>
    1130:	bl	0 <rewind>
    1134:	cmp	r5, #0
    1138:	movne	r0, r5
    113c:	moveq	r0, #1
    1140:	bl	0 <malloc>
    1144:	subs	r7, r0, #0
    1148:	beq	11c8 <readfile.constprop.5+0xe8>
    114c:	mov	r4, #0
    1150:	b	1158 <readfile.constprop.5+0x78>
    1154:	add	r4, r4, r0
    1158:	mov	r3, r6
    115c:	sub	r2, r5, r4
    1160:	mov	r1, #1
    1164:	add	r0, r7, r4
    1168:	bl	0 <fread>
    116c:	cmp	r0, #0
    1170:	bne	1154 <readfile.constprop.5+0x74>
    1174:	cmp	r5, r4
    1178:	mov	r0, r6
    117c:	bne	11a0 <readfile.constprop.5+0xc0>
    1180:	bl	0 <fclose>
    1184:	str	r5, [r8]
    1188:	mov	r0, r7
    118c:	ldrd	r4, [sp]
    1190:	ldrd	r6, [sp, #8]
    1194:	ldr	r8, [sp, #16]
    1198:	add	sp, sp, #20
    119c:	pop	{pc}		; (ldr pc, [sp], #4)
    11a0:	bl	0 <fclose>
    11a4:	mov	r0, r7
    11a8:	bl	0 <free>
    11ac:	mov	r7, #0
    11b0:	str	r5, [r8]
    11b4:	b	1188 <readfile.constprop.5+0xa8>
    11b8:	bl	0 <fclose>
    11bc:	b	11ac <readfile.constprop.5+0xcc>
    11c0:	mov	r5, r6
    11c4:	b	11ac <readfile.constprop.5+0xcc>
    11c8:	mov	r0, r6
    11cc:	bl	0 <fclose>
    11d0:	b	11ac <readfile.constprop.5+0xcc>

000011d4 <MyGame_Example2_Monster_print_json_table>:
    11d4:	bx	lr

000011d8 <test_print>:
    11d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
    11dc:	movw	r4, #0
    11e0:	movt	r4, #0
    11e4:	mov	r3, #0
    11e8:	ldr	r0, [r4]
    11ec:	movw	r1, #0
    11f0:	movt	r1, #0
    11f4:	strd	r6, [sp, #8]
    11f8:	strd	r8, [sp, #16]
    11fc:	str	lr, [sp, #24]
    1200:	sub	sp, sp, #76	; 0x4c
    1204:	str	r3, [sp, #12]
    1208:	str	r3, [sp, #16]
    120c:	str	r3, [sp, #20]
    1210:	bl	0 <fopen>
    1214:	subs	r7, r0, #0
    1218:	beq	1470 <test_print+0x298>
    121c:	mov	r1, r7
    1220:	add	r0, sp, #24
    1224:	movw	r5, #0
    1228:	movt	r5, #0
    122c:	bl	0 <flatcc_json_printer_init>
    1230:	ldr	r6, [r5]
    1234:	mov	r2, #2
    1238:	mov	r3, #1
    123c:	strb	r2, [sp, #49]	; 0x31
    1240:	strh	r3, [sp, #50]	; 0x32
    1244:	cmp	r6, #0
    1248:	beq	1264 <test_print+0x8c>
    124c:	movw	r1, #0
    1250:	movt	r1, #0
    1254:	mov	r0, r6
    1258:	bl	0 <strcmp>
    125c:	cmp	r0, #0
    1260:	bne	137c <test_print+0x1a4>
    1264:	mov	r3, #288	; 0x120
    1268:	movw	r6, #0
    126c:	movt	r6, #0
    1270:	str	r3, [sp, #12]
    1274:	add	r1, sp, #16
    1278:	ldr	r0, [r4, #4]
    127c:	bl	10e0 <readfile.constprop.5>
    1280:	subs	r8, r0, #0
    1284:	beq	13fc <test_print+0x224>
    1288:	movw	r0, #0
    128c:	movt	r0, #0
    1290:	ldr	r2, [sp, #12]
    1294:	mov	r1, r6
    1298:	movw	r3, #0
    129c:	movt	r3, #0
    12a0:	str	r0, [sp]
    12a4:	add	r0, sp, #24
    12a8:	bl	0 <flatcc_json_printer_table_as_root>
    12ac:	mov	r1, #1
    12b0:	add	r0, sp, #24
    12b4:	ldr	r3, [sp, #68]	; 0x44
    12b8:	blx	r3
    12bc:	ldr	r3, [sp, #60]	; 0x3c
    12c0:	cmp	r3, #0
    12c4:	bne	13c4 <test_print+0x1ec>
    12c8:	mov	r0, r7
    12cc:	bl	0 <fclose>
    12d0:	add	r1, sp, #20
    12d4:	ldr	r0, [r4]
    12d8:	bl	10e0 <readfile.constprop.5>
    12dc:	subs	r7, r0, #0
    12e0:	beq	1438 <test_print+0x260>
    12e4:	ldr	r1, [sp, #16]
    12e8:	movw	r3, #0
    12ec:	movt	r3, #0
    12f0:	ldr	r2, [sp, #20]
    12f4:	ldr	r9, [r3]
    12f8:	cmp	r2, r1
    12fc:	bne	1310 <test_print+0x138>
    1300:	mov	r1, r8
    1304:	bl	0 <memcmp>
    1308:	subs	r4, r0, #0
    130c:	beq	13e0 <test_print+0x208>
    1310:	movw	r0, #0
    1314:	movt	r0, #0
    1318:	mov	r3, r9
    131c:	mov	r2, #54	; 0x36
    1320:	mov	r1, #1
    1324:	mvn	r4, #0
    1328:	bl	0 <fwrite>
    132c:	add	r0, sp, #24
    1330:	bl	0 <flatcc_json_printer_clear>
    1334:	ldr	r3, [r5]
    1338:	cmp	r3, #0
    133c:	beq	13d4 <test_print+0x1fc>
    1340:	mov	r0, r6
    1344:	bl	0 <free>
    1348:	mov	r0, r8
    134c:	bl	0 <free>
    1350:	cmp	r7, #0
    1354:	beq	1360 <test_print+0x188>
    1358:	mov	r0, r7
    135c:	bl	0 <free>
    1360:	mov	r0, r4
    1364:	add	sp, sp, #76	; 0x4c
    1368:	ldrd	r4, [sp]
    136c:	ldrd	r6, [sp, #8]
    1370:	ldrd	r8, [sp, #16]
    1374:	add	sp, sp, #24
    1378:	pop	{pc}		; (ldr pc, [sp], #4)
    137c:	mov	r0, r6
    1380:	add	r1, sp, #12
    1384:	bl	10e0 <readfile.constprop.5>
    1388:	subs	r6, r0, #0
    138c:	bne	1274 <test_print+0x9c>
    1390:	movw	r3, #0
    1394:	movt	r3, #0
    1398:	ldr	r2, [r5]
    139c:	movw	r1, #0
    13a0:	movt	r1, #0
    13a4:	ldr	r0, [r3]
    13a8:	bl	0 <fprintf>
    13ac:	add	r0, sp, #24
    13b0:	bl	0 <flatcc_json_printer_clear>
    13b4:	mov	r0, r7
    13b8:	mvn	r4, #0
    13bc:	bl	0 <fclose>
    13c0:	b	1360 <test_print+0x188>
    13c4:	movw	r0, #0
    13c8:	movt	r0, #0
    13cc:	bl	0 <puts>
    13d0:	b	12c8 <test_print+0xf0>
    13d4:	mov	r0, r8
    13d8:	bl	0 <free>
    13dc:	b	1358 <test_print+0x180>
    13e0:	mov	r3, r9
    13e4:	movw	r0, #0
    13e8:	movt	r0, #0
    13ec:	mov	r2, #26
    13f0:	mov	r1, #1
    13f4:	bl	0 <fwrite>
    13f8:	b	132c <test_print+0x154>
    13fc:	movw	r3, #0
    1400:	movt	r3, #0
    1404:	ldr	r2, [r4, #4]
    1408:	movw	r1, #0
    140c:	movt	r1, #0
    1410:	ldr	r0, [r3]
    1414:	bl	0 <fprintf>
    1418:	add	r0, sp, #24
    141c:	bl	0 <flatcc_json_printer_clear>
    1420:	ldr	r3, [r5]
    1424:	cmp	r3, #0
    1428:	beq	13b4 <test_print+0x1dc>
    142c:	mov	r0, r6
    1430:	bl	0 <free>
    1434:	b	13b4 <test_print+0x1dc>
    1438:	movw	r3, #0
    143c:	movt	r3, #0
    1440:	ldr	r2, [r4]
    1444:	movw	r1, #0
    1448:	movt	r1, #0
    144c:	ldr	r0, [r3]
    1450:	mvn	r4, #0
    1454:	bl	0 <fprintf>
    1458:	add	r0, sp, #24
    145c:	bl	0 <flatcc_json_printer_clear>
    1460:	ldr	r3, [r5]
    1464:	cmp	r3, #0
    1468:	bne	1340 <test_print+0x168>
    146c:	b	1348 <test_print+0x170>
    1470:	movw	r3, #0
    1474:	movt	r3, #0
    1478:	ldr	r2, [r4]
    147c:	movw	r1, #0
    1480:	movt	r1, #0
    1484:	ldr	r0, [r3]
    1488:	mvn	r4, #0
    148c:	bl	0 <fprintf>
    1490:	b	1360 <test_print+0x188>

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-16]!
   4:	movw	r4, #0
   8:	movt	r4, #0
   c:	mov	r5, r0
  10:	mov	r2, #24
  14:	str	r6, [sp, #8]
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	ldr	r3, [r4]
  24:	mov	r6, r1
  28:	mov	r1, #1
  2c:	str	lr, [sp, #12]
  30:	bl	0 <fwrite>
  34:	cmp	r5, #1
  38:	cmpne	r5, #4
  3c:	bne	80 <main+0x80>
  40:	cmp	r5, #4
  44:	bne	6c <main+0x6c>
  48:	ldr	ip, [r6, #4]
  4c:	movw	r2, #0
  50:	movt	r2, #0
  54:	movw	r3, #0
  58:	movt	r3, #0
  5c:	ldrd	r0, [r6, #8]
  60:	str	ip, [r2]
  64:	str	r1, [r3]
  68:	str	r0, [r3, #4]
  6c:	ldrd	r4, [sp]
  70:	ldr	r6, [sp, #8]
  74:	ldr	lr, [sp, #12]
  78:	add	sp, sp, #16
  7c:	b	11d8 <test_print>
  80:	movw	r0, #0
  84:	movt	r0, #0
  88:	ldr	r3, [r4]
  8c:	mov	r2, #191	; 0xbf
  90:	mov	r1, #1
  94:	bl	0 <fwrite>
  98:	mov	r0, #1
  9c:	bl	0 <exit>
