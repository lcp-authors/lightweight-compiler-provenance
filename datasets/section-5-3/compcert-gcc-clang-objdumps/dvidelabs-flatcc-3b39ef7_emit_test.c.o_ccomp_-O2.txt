
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #24
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	str	r5, [sp, #12]
  18:	str	r6, [sp, #16]
  1c:	str	r7, [sp, #20]
  20:	mov	r4, r3
  24:	ldr	r3, [ip]
  28:	mov	r5, r2
  2c:	mov	r6, r1
  30:	ldr	r0, [pc, #148]	; cc <dbg_emitter+0xcc>
  34:	mov	r2, r4
  38:	mov	r1, r5
  3c:	bl	0 <printf>
  40:	mov	r7, #0
  44:	cmp	r7, r5
  48:	bge	a4 <dbg_emitter+0xa4>
  4c:	ldr	r3, [r6, r7, lsl #3]
  50:	ldr	r0, [pc, #120]	; d0 <dbg_emitter+0xd0>
  54:	cmp	r3, r0
  58:	bne	70 <dbg_emitter+0x70>
  5c:	ldr	r0, [pc, #96]	; c4 <dbg_emitter+0xc4>
  60:	add	r2, r6, r7, lsl #3
  64:	ldr	r2, [r2, #4]
  68:	mov	r1, r4
  6c:	bl	0 <printf>
  70:	ldr	r0, [r6, r7, lsl #3]
  74:	cmp	r0, #0
  78:	bne	90 <dbg_emitter+0x90>
  7c:	ldr	r0, [pc, #68]	; c8 <dbg_emitter+0xc8>
  80:	add	r1, r6, r7, lsl #3
  84:	ldr	r2, [r1, #4]
  88:	mov	r1, r4
  8c:	bl	0 <printf>
  90:	add	r2, r6, r7, lsl #3
  94:	ldr	r1, [r2, #4]
  98:	add	r4, r4, r1
  9c:	add	r7, r7, #1
  a0:	b	44 <dbg_emitter+0x44>
  a4:	mov	r0, #0
  a8:	ldr	r4, [sp, #8]
  ac:	ldr	r5, [sp, #12]
  b0:	ldr	r6, [sp, #16]
  b4:	ldr	r7, [sp, #20]
  b8:	ldr	lr, [sp, #4]
  bc:	add	sp, sp, #24
  c0:	bx	lr
  c4:	.word	0x00000300
  c8:	.word	0x0000038d
  cc:	.word	0x00000218
  d0:	.word	0x00000000

000000d4 <debug_test>:
  d4:	mov	ip, sp
  d8:	sub	sp, sp, #320	; 0x140
  dc:	str	ip, [sp, #8]
  e0:	str	lr, [sp, #12]
  e4:	str	r4, [sp, #16]
  e8:	str	r5, [sp, #20]
  ec:	str	r6, [sp, #24]
  f0:	str	r7, [sp, #28]
  f4:	str	r8, [sp, #32]
  f8:	str	r9, [sp, #36]	; 0x24
  fc:	vldr	s0, [pc, #516]	; 308 <debug_test+0x234>
 100:	vstr	s0, [sp, #40]	; 0x28
 104:	vstr	s0, [sp, #44]	; 0x2c
 108:	vstr	s0, [sp, #48]	; 0x30
 10c:	vstr	s0, [sp, #52]	; 0x34
 110:	vstr	s0, [sp, #56]	; 0x38
 114:	vstr	s0, [sp, #60]	; 0x3c
 118:	vstr	s0, [sp, #64]	; 0x40
 11c:	vstr	s0, [sp, #68]	; 0x44
 120:	vstr	s0, [sp, #72]	; 0x48
 124:	vstr	s0, [sp, #76]	; 0x4c
 128:	add	r8, sp, #80	; 0x50
 12c:	ldr	r0, [pc, #460]	; 300 <debug_test+0x22c>
 130:	bl	0 <printf>
 134:	ldr	r1, [pc, #444]	; 2f8 <debug_test+0x224>
 138:	mov	r2, #0
 13c:	mov	r3, #0
 140:	mov	r0, #0
 144:	str	r0, [sp]
 148:	mov	r0, r8
 14c:	bl	0 <flatcc_builder_custom_init>
 150:	mov	r5, #10
 154:	add	r6, sp, #40	; 0x28
 158:	add	r7, sp, #80	; 0x50
 15c:	mov	r1, #4
 160:	mov	r4, #4
 164:	mov	r9, #4
 168:	mvn	r0, #0
 16c:	bl	0 <__aeabi_uidiv>
 170:	str	r0, [sp, #4]
 174:	str	r9, [sp]
 178:	mov	r3, r4
 17c:	mov	r2, r5
 180:	mov	r1, r6
 184:	mov	r0, r7
 188:	bl	0 <flatcc_builder_create_vector>
 18c:	mov	r4, r0
 190:	mov	r6, #0
 194:	mov	r5, #42	; 0x2a
 198:	mov	r1, #0
 19c:	add	r0, sp, #80	; 0x50
 1a0:	mov	r2, #0
 1a4:	mov	r3, #0
 1a8:	bl	0 <flatcc_builder_start_buffer>
 1ac:	cmp	r0, #0
 1b0:	bne	2c0 <debug_test+0x1ec>
 1b4:	add	r0, sp, #80	; 0x50
 1b8:	mov	r1, #3
 1bc:	bl	0 <flatcc_builder_start_table>
 1c0:	cmp	r0, #0
 1c4:	bne	2a8 <debug_test+0x1d4>
 1c8:	add	r0, sp, #80	; 0x50
 1cc:	mov	r1, #0
 1d0:	mov	r2, #8
 1d4:	mov	r3, #8
 1d8:	bl	0 <flatcc_builder_table_add>
 1dc:	cmp	r0, #0
 1e0:	bne	1ec <debug_test+0x118>
 1e4:	mvn	r3, #0
 1e8:	b	1f8 <debug_test+0x124>
 1ec:	str	r5, [r0]
 1f0:	str	r6, [r0, #4]
 1f4:	mov	r3, #0
 1f8:	cmp	r3, #0
 1fc:	bne	2a8 <debug_test+0x1d4>
 200:	add	r0, sp, #80	; 0x50
 204:	cmp	r4, #0
 208:	beq	228 <debug_test+0x154>
 20c:	mov	r1, #2
 210:	bl	0 <flatcc_builder_table_add_offset>
 214:	cmp	r0, #0
 218:	beq	228 <debug_test+0x154>
 21c:	str	r4, [r0]
 220:	mov	r1, #0
 224:	b	22c <debug_test+0x158>
 228:	mvn	r1, #0
 22c:	cmp	r1, #0
 230:	bne	2a8 <debug_test+0x1d4>
 234:	add	r0, sp, #80	; 0x50
 238:	mov	r1, #1
 23c:	mov	r2, #1
 240:	mov	r3, #1
 244:	bl	0 <flatcc_builder_table_add>
 248:	cmp	r0, #0
 24c:	bne	258 <debug_test+0x184>
 250:	mvn	r2, #0
 254:	b	264 <debug_test+0x190>
 258:	mov	r3, #1
 25c:	strb	r3, [r0]
 260:	mov	r2, #0
 264:	cmp	r2, #0
 268:	bne	2a8 <debug_test+0x1d4>
 26c:	add	r4, sp, #80	; 0x50
 270:	ldr	r1, [pc, #132]	; 2fc <debug_test+0x228>
 274:	mov	r2, #0
 278:	mov	r0, r4
 27c:	bl	0 <flatcc_builder_check_required>
 280:	cmp	r0, #0
 284:	bne	29c <debug_test+0x1c8>
 288:	ldr	r0, [pc, #116]	; 304 <debug_test+0x230>
 28c:	ldr	r1, [pc, #92]	; 2f0 <debug_test+0x21c>
 290:	mov	r2, #21
 294:	ldr	r3, [pc, #88]	; 2f4 <debug_test+0x220>
 298:	bl	0 <__assert_fail>
 29c:	mov	r0, r4
 2a0:	bl	0 <flatcc_builder_end_table>
 2a4:	b	2ac <debug_test+0x1d8>
 2a8:	mov	r0, #0
 2ac:	add	r1, sp, #80	; 0x50
 2b0:	mov	r2, r0
 2b4:	mov	r0, r1
 2b8:	mov	r1, r2
 2bc:	bl	0 <flatcc_builder_end_buffer>
 2c0:	mov	r0, r8
 2c4:	bl	0 <flatcc_builder_clear>
 2c8:	mov	r0, #0
 2cc:	ldr	r4, [sp, #16]
 2d0:	ldr	r5, [sp, #20]
 2d4:	ldr	r6, [sp, #24]
 2d8:	ldr	r7, [sp, #28]
 2dc:	ldr	r8, [sp, #32]
 2e0:	ldr	r9, [sp, #36]	; 0x24
 2e4:	ldr	lr, [sp, #12]
 2e8:	add	sp, sp, #320	; 0x140
 2ec:	bx	lr
 2f0:	.word	0x00000000
 2f4:	.word	0x0000044c
 2f8:	.word	0x00000000
 2fc:	.word	0x0000044a
 300:	.word	0x000003bb
 304:	.word	0x00000321
 308:	.word	0x00000000

0000030c <emit_test>:
 30c:	mov	ip, sp
 310:	sub	sp, sp, #392	; 0x188
 314:	str	ip, [sp, #8]
 318:	str	lr, [sp, #12]
 31c:	str	r4, [sp, #16]
 320:	str	r5, [sp, #20]
 324:	str	r6, [sp, #24]
 328:	str	r7, [sp, #28]
 32c:	str	r8, [sp, #32]
 330:	str	r9, [sp, #36]	; 0x24
 334:	str	sl, [sp, #40]	; 0x28
 338:	mov	r0, #4
 33c:	strb	r0, [sp, #72]	; 0x48
 340:	mov	r0, #0
 344:	strb	r0, [sp, #73]	; 0x49
 348:	mov	r0, #0
 34c:	strb	r0, [sp, #74]	; 0x4a
 350:	mov	r0, #0
 354:	strb	r0, [sp, #75]	; 0x4b
 358:	mov	r0, #212	; 0xd4
 35c:	strb	r0, [sp, #76]	; 0x4c
 360:	mov	r0, #255	; 0xff
 364:	strb	r0, [sp, #77]	; 0x4d
 368:	mov	r0, #255	; 0xff
 36c:	strb	r0, [sp, #78]	; 0x4e
 370:	mov	r0, #255	; 0xff
 374:	strb	r0, [sp, #79]	; 0x4f
 378:	mov	r0, #42	; 0x2a
 37c:	strb	r0, [sp, #80]	; 0x50
 380:	mov	r0, #0
 384:	strb	r0, [sp, #81]	; 0x51
 388:	mov	r0, #0
 38c:	strb	r0, [sp, #82]	; 0x52
 390:	mov	r0, #0
 394:	strb	r0, [sp, #83]	; 0x53
 398:	mov	r0, #0
 39c:	strb	r0, [sp, #84]	; 0x54
 3a0:	mov	r0, #0
 3a4:	strb	r0, [sp, #85]	; 0x55
 3a8:	mov	r0, #0
 3ac:	strb	r0, [sp, #86]	; 0x56
 3b0:	mov	r0, #0
 3b4:	strb	r0, [sp, #87]	; 0x57
 3b8:	mov	r0, #12
 3bc:	strb	r0, [sp, #88]	; 0x58
 3c0:	mov	r0, #0
 3c4:	strb	r0, [sp, #89]	; 0x59
 3c8:	mov	r0, #0
 3cc:	strb	r0, [sp, #90]	; 0x5a
 3d0:	mov	r0, #0
 3d4:	strb	r0, [sp, #91]	; 0x5b
 3d8:	mov	r0, #1
 3dc:	strb	r0, [sp, #92]	; 0x5c
 3e0:	mov	r0, #0
 3e4:	strb	r0, [sp, #93]	; 0x5d
 3e8:	mov	r0, #0
 3ec:	strb	r0, [sp, #94]	; 0x5e
 3f0:	mov	r0, #0
 3f4:	strb	r0, [sp, #95]	; 0x5f
 3f8:	mov	r0, #0
 3fc:	strb	r0, [sp, #96]	; 0x60
 400:	mov	r0, #0
 404:	strb	r0, [sp, #97]	; 0x61
 408:	mov	r0, #0
 40c:	strb	r0, [sp, #98]	; 0x62
 410:	mov	r0, #0
 414:	strb	r0, [sp, #99]	; 0x63
 418:	mov	r0, #4
 41c:	strb	r0, [sp, #100]	; 0x64
 420:	mov	r0, #0
 424:	strb	r0, [sp, #101]	; 0x65
 428:	mov	r0, #0
 42c:	strb	r0, [sp, #102]	; 0x66
 430:	mov	r0, #0
 434:	strb	r0, [sp, #103]	; 0x67
 438:	mov	r0, #0
 43c:	strb	r0, [sp, #104]	; 0x68
 440:	mov	r0, #0
 444:	strb	r0, [sp, #105]	; 0x69
 448:	mov	r0, #128	; 0x80
 44c:	strb	r0, [sp, #106]	; 0x6a
 450:	mov	r0, #63	; 0x3f
 454:	strb	r0, [sp, #107]	; 0x6b
 458:	mov	r0, #205	; 0xcd
 45c:	strb	r0, [sp, #108]	; 0x6c
 460:	mov	r0, #204	; 0xcc
 464:	strb	r0, [sp, #109]	; 0x6d
 468:	mov	r0, #140	; 0x8c
 46c:	strb	r0, [sp, #110]	; 0x6e
 470:	mov	r0, #63	; 0x3f
 474:	strb	r0, [sp, #111]	; 0x6f
 478:	mov	r0, #154	; 0x9a
 47c:	strb	r0, [sp, #112]	; 0x70
 480:	mov	r0, #153	; 0x99
 484:	strb	r0, [sp, #113]	; 0x71
 488:	mov	r0, #153	; 0x99
 48c:	strb	r0, [sp, #114]	; 0x72
 490:	mov	r0, #63	; 0x3f
 494:	strb	r0, [sp, #115]	; 0x73
 498:	mov	r0, #102	; 0x66
 49c:	strb	r0, [sp, #116]	; 0x74
 4a0:	mov	r0, #102	; 0x66
 4a4:	strb	r0, [sp, #117]	; 0x75
 4a8:	mov	r0, #166	; 0xa6
 4ac:	strb	r0, [sp, #118]	; 0x76
 4b0:	mov	r0, #63	; 0x3f
 4b4:	strb	r0, [sp, #119]	; 0x77
 4b8:	mov	r0, #10
 4bc:	strb	r0, [sp, #120]	; 0x78
 4c0:	mov	r0, #0
 4c4:	strb	r0, [sp, #121]	; 0x79
 4c8:	mov	r0, #17
 4cc:	strb	r0, [sp, #122]	; 0x7a
 4d0:	mov	r0, #0
 4d4:	strb	r0, [sp, #123]	; 0x7b
 4d8:	mov	r0, #4
 4dc:	strb	r0, [sp, #124]	; 0x7c
 4e0:	mov	r0, #0
 4e4:	strb	r0, [sp, #125]	; 0x7d
 4e8:	mov	r0, #16
 4ec:	strb	r0, [sp, #126]	; 0x7e
 4f0:	mov	r0, #0
 4f4:	strb	r0, [sp, #127]	; 0x7f
 4f8:	mov	r0, #12
 4fc:	strb	r0, [sp, #128]	; 0x80
 500:	mov	r0, #0
 504:	strb	r0, [sp, #129]	; 0x81
 508:	mov	r0, #0
 50c:	strb	r0, [sp, #130]	; 0x82
 510:	vmov.f32	s0, #112	; 0x3f800000  1.0
 514:	vstr	s0, [sp, #56]	; 0x38
 518:	vldr	s0, [pc, #808]	; 848 <emit_test+0x53c>
 51c:	vstr	s0, [sp, #60]	; 0x3c
 520:	vldr	s0, [pc, #808]	; 850 <emit_test+0x544>
 524:	vstr	s0, [sp, #64]	; 0x40
 528:	vldr	s0, [pc, #796]	; 84c <emit_test+0x540>
 52c:	vstr	s0, [sp, #68]	; 0x44
 530:	add	r7, sp, #136	; 0x88
 534:	mov	r0, r7
 538:	bl	0 <flatcc_builder_init>
 53c:	mov	r0, r7
 540:	bl	0 <flatcc_builder_get_emit_context>
 544:	mov	r4, r0
 548:	mov	r9, #4
 54c:	add	sl, sp, #56	; 0x38
 550:	add	r8, sp, #136	; 0x88
 554:	mov	r1, #4
 558:	mov	r6, #4
 55c:	mov	r5, #4
 560:	mvn	r0, #0
 564:	bl	0 <__aeabi_uidiv>
 568:	str	r0, [sp, #4]
 56c:	str	r5, [sp]
 570:	mov	r3, r6
 574:	mov	r2, r9
 578:	mov	r1, sl
 57c:	mov	r0, r8
 580:	bl	0 <flatcc_builder_create_vector>
 584:	mov	r8, r0
 588:	mov	r6, #0
 58c:	mov	r5, #42	; 0x2a
 590:	mov	r1, #0
 594:	add	r0, sp, #136	; 0x88
 598:	mov	r2, #0
 59c:	mov	r3, #0
 5a0:	bl	0 <flatcc_builder_start_buffer>
 5a4:	cmp	r0, #0
 5a8:	bne	6b4 <emit_test+0x3a8>
 5ac:	add	r0, sp, #136	; 0x88
 5b0:	mov	r1, #3
 5b4:	bl	0 <flatcc_builder_start_table>
 5b8:	cmp	r0, #0
 5bc:	bne	6a0 <emit_test+0x394>
 5c0:	add	r0, sp, #136	; 0x88
 5c4:	mov	r1, #0
 5c8:	mov	r2, #8
 5cc:	mov	r3, #8
 5d0:	bl	0 <flatcc_builder_table_add>
 5d4:	cmp	r0, #0
 5d8:	bne	5e4 <emit_test+0x2d8>
 5dc:	mvn	r2, #0
 5e0:	b	5f0 <emit_test+0x2e4>
 5e4:	str	r5, [r0]
 5e8:	str	r6, [r0, #4]
 5ec:	mov	r2, #0
 5f0:	cmp	r2, #0
 5f4:	bne	6a0 <emit_test+0x394>
 5f8:	add	r0, sp, #136	; 0x88
 5fc:	cmp	r8, #0
 600:	beq	620 <emit_test+0x314>
 604:	mov	r1, #2
 608:	bl	0 <flatcc_builder_table_add_offset>
 60c:	cmp	r0, #0
 610:	beq	620 <emit_test+0x314>
 614:	str	r8, [r0]
 618:	mov	r2, #0
 61c:	b	624 <emit_test+0x318>
 620:	mvn	r2, #0
 624:	cmp	r2, #0
 628:	bne	6a0 <emit_test+0x394>
 62c:	add	r0, sp, #136	; 0x88
 630:	mov	r1, #1
 634:	mov	r2, #1
 638:	mov	r3, #1
 63c:	bl	0 <flatcc_builder_table_add>
 640:	cmp	r0, #0
 644:	bne	650 <emit_test+0x344>
 648:	mvn	r0, #0
 64c:	b	65c <emit_test+0x350>
 650:	mov	r1, #1
 654:	strb	r1, [r0]
 658:	mov	r0, #0
 65c:	cmp	r0, #0
 660:	bne	6a0 <emit_test+0x394>
 664:	add	r5, sp, #136	; 0x88
 668:	ldr	r1, [pc, #440]	; 828 <emit_test+0x51c>
 66c:	mov	r2, #0
 670:	mov	r0, r5
 674:	bl	0 <flatcc_builder_check_required>
 678:	cmp	r0, #0
 67c:	bne	694 <emit_test+0x388>
 680:	ldr	r0, [pc, #428]	; 834 <emit_test+0x528>
 684:	ldr	r1, [pc, #396]	; 818 <emit_test+0x50c>
 688:	mov	r2, #21
 68c:	ldr	r3, [pc, #396]	; 820 <emit_test+0x514>
 690:	bl	0 <__assert_fail>
 694:	mov	r0, r5
 698:	bl	0 <flatcc_builder_end_table>
 69c:	b	6a4 <emit_test+0x398>
 6a0:	mov	r0, #0
 6a4:	add	r2, sp, #136	; 0x88
 6a8:	mov	r1, r0
 6ac:	mov	r0, r2
 6b0:	bl	0 <flatcc_builder_end_buffer>
 6b4:	ldr	ip, [r4]
 6b8:	ldr	r2, [r4, #4]
 6bc:	cmp	ip, r2
 6c0:	bne	6d4 <emit_test+0x3c8>
 6c4:	ldr	r0, [r4, #24]
 6c8:	str	r0, [sp, #48]	; 0x30
 6cc:	ldr	r6, [r4, #8]
 6d0:	b	6e0 <emit_test+0x3d4>
 6d4:	mov	r0, #0
 6d8:	str	r0, [sp, #48]	; 0x30
 6dc:	mov	r6, #0
 6e0:	cmp	r6, #0
 6e4:	bne	6f0 <emit_test+0x3e4>
 6e8:	mvn	r0, #0
 6ec:	b	ce8 <emit_test+0x9dc>
 6f0:	ldr	r3, [r4, #24]
 6f4:	ldr	ip, [sp, #48]	; 0x30
 6f8:	cmp	ip, r3
 6fc:	beq	71c <emit_test+0x410>
 700:	ldr	r0, [pc, #264]	; 810 <emit_test+0x504>
 704:	ldr	r1, [pc, #264]	; 814 <emit_test+0x508>
 708:	mov	r2, #100	; 0x64
 70c:	ldr	r3, [pc, #248]	; 80c <emit_test+0x500>
 710:	bl	0 <__assert_fail>
 714:	mvn	r0, #0
 718:	b	ce8 <emit_test+0x9dc>
 71c:	mov	r0, r7
 720:	bl	0 <flatcc_builder_get_buffer_size>
 724:	ldr	r2, [sp, #48]	; 0x30
 728:	cmp	r2, r0
 72c:	beq	74c <emit_test+0x440>
 730:	ldr	r0, [pc, #216]	; 810 <emit_test+0x504>
 734:	ldr	r1, [pc, #216]	; 814 <emit_test+0x508>
 738:	mov	r2, #101	; 0x65
 73c:	ldr	r3, [pc, #200]	; 80c <emit_test+0x500>
 740:	bl	0 <__assert_fail>
 744:	mvn	r0, #0
 748:	b	ce8 <emit_test+0x9dc>
 74c:	ldr	r1, [pc, #200]	; 81c <emit_test+0x510>
 750:	ldr	r0, [r1]
 754:	ldr	r1, [pc, #224]	; 83c <emit_test+0x530>
 758:	bl	0 <fprintf>
 75c:	ldr	r2, [pc, #220]	; 840 <emit_test+0x534>
 760:	ldr	r8, [sp, #48]	; 0x30
 764:	ldr	r3, [pc, #176]	; 81c <emit_test+0x510>
 768:	ldr	r4, [r3]
 76c:	mov	r9, r6
 770:	ldr	r1, [pc, #204]	; 844 <emit_test+0x538>
 774:	mov	r0, r4
 778:	bl	0 <fprintf>
 77c:	mov	r5, #0
 780:	cmp	r5, r8
 784:	bcs	880 <emit_test+0x574>
 788:	and	r1, r5, #15
 78c:	cmp	r1, #0
 790:	bne	7c0 <emit_test+0x4b4>
 794:	cmp	r5, #0
 798:	beq	7ac <emit_test+0x4a0>
 79c:	ldr	r1, [pc, #128]	; 824 <emit_test+0x518>
 7a0:	add	r2, sp, #368	; 0x170
 7a4:	mov	r0, r4
 7a8:	bl	0 <fprintf>
 7ac:	ldr	r1, [pc, #120]	; 82c <emit_test+0x520>
 7b0:	mov	r2, r5
 7b4:	mov	r0, r4
 7b8:	bl	0 <fprintf>
 7bc:	b	7d8 <emit_test+0x4cc>
 7c0:	and	r1, r5, #7
 7c4:	cmp	r1, #0
 7c8:	bne	7d8 <emit_test+0x4cc>
 7cc:	ldr	r1, [pc, #92]	; 830 <emit_test+0x524>
 7d0:	mov	r0, r4
 7d4:	bl	0 <fprintf>
 7d8:	ldr	r1, [pc, #88]	; 838 <emit_test+0x52c>
 7dc:	ldrb	r2, [r9, r5]
 7e0:	mov	r0, r4
 7e4:	bl	0 <fprintf>
 7e8:	ldrb	r3, [r9, r5]
 7ec:	cmp	r3, #32
 7f0:	blt	854 <emit_test+0x548>
 7f4:	cmp	r3, #126	; 0x7e
 7f8:	bgt	854 <emit_test+0x548>
 7fc:	add	ip, sp, #368	; 0x170
 800:	and	r2, r5, #15
 804:	strb	r3, [ip, r2]
 808:	b	864 <emit_test+0x558>
 80c:	.word	0x00000455
 810:	.word	0x000002c7
 814:	.word	0x00000262
	...
 820:	.word	0x0000044c
 824:	.word	0x00000212
 828:	.word	0x0000044a
 82c:	.word	0x0000015e
 830:	.word	0x00000249
 834:	.word	0x00000321
 838:	.word	0x000001fd
 83c:	.word	0x000000f6
 840:	.word	0x00000203
 844:	.word	0x0000020d
 848:	.word	0x3f8ccccd
 84c:	.word	0x3fa66666
 850:	.word	0x3f99999a
 854:	add	r3, sp, #368	; 0x170
 858:	and	ip, r5, #15
 85c:	mov	r2, #46	; 0x2e
 860:	strb	r2, [r3, ip]
 864:	add	r3, sp, #368	; 0x170
 868:	and	r1, r5, #15
 86c:	add	r0, r3, r1
 870:	mov	ip, #0
 874:	strb	ip, [r0, #1]
 878:	add	r5, r5, #1
 87c:	b	780 <emit_test+0x474>
 880:	and	ip, r5, #15
 884:	cmp	ip, #0
 888:	beq	8a0 <emit_test+0x594>
 88c:	ldr	r1, [pc, #1180]	; d30 <emit_test+0xa24>
 890:	mov	r0, r4
 894:	bl	0 <fprintf>
 898:	add	r5, r5, #1
 89c:	b	880 <emit_test+0x574>
 8a0:	ldr	r1, [pc, #1172]	; d3c <emit_test+0xa30>
 8a4:	add	r2, sp, #368	; 0x170
 8a8:	mov	r0, r4
 8ac:	bl	0 <fprintf>
 8b0:	ldr	r2, [sp, #48]	; 0x30
 8b4:	cmp	r2, #58	; 0x3a
 8b8:	beq	8d8 <emit_test+0x5cc>
 8bc:	ldr	r0, [pc, #1108]	; d18 <emit_test+0xa0c>
 8c0:	ldr	r1, [pc, #1112]	; d20 <emit_test+0xa14>
 8c4:	mov	r2, #106	; 0x6a
 8c8:	ldr	r3, [pc, #1092]	; d14 <emit_test+0xa08>
 8cc:	bl	0 <__assert_fail>
 8d0:	mvn	r0, #0
 8d4:	b	ce8 <emit_test+0x9dc>
 8d8:	cmp	r2, #58	; 0x3a
 8dc:	beq	8fc <emit_test+0x5f0>
 8e0:	ldr	r0, [pc, #1072]	; d18 <emit_test+0xa0c>
 8e4:	ldr	r1, [pc, #1076]	; d20 <emit_test+0xa14>
 8e8:	mov	r2, #107	; 0x6b
 8ec:	ldr	r3, [pc, #1056]	; d14 <emit_test+0xa08>
 8f0:	bl	0 <__assert_fail>
 8f4:	mvn	r0, #0
 8f8:	b	ce8 <emit_test+0x9dc>
 8fc:	add	r1, sp, #72	; 0x48
 900:	mov	r0, r6
 904:	bl	0 <memcmp>
 908:	cmp	r0, #0
 90c:	beq	92c <emit_test+0x620>
 910:	ldr	r0, [pc, #1024]	; d18 <emit_test+0xa0c>
 914:	ldr	r1, [pc, #1028]	; d20 <emit_test+0xa14>
 918:	mov	r2, #108	; 0x6c
 91c:	ldr	r3, [pc, #1008]	; d14 <emit_test+0xa08>
 920:	bl	0 <__assert_fail>
 924:	mvn	r0, #0
 928:	b	ce8 <emit_test+0x9dc>
 92c:	cmp	r6, #0
 930:	beq	958 <emit_test+0x64c>
 934:	mov	r2, #0
 938:	str	r2, [sp, #368]	; 0x170
 93c:	mov	r0, #1
 940:	eor	r1, r0, #1
 944:	cmp	r1, #0
 948:	bne	958 <emit_test+0x64c>
 94c:	ldr	r0, [r6]
 950:	add	r4, r6, r0
 954:	b	95c <emit_test+0x650>
 958:	mov	r4, #0
 95c:	mov	r5, #0
 960:	ldr	r0, [pc, #972]	; d34 <emit_test+0xa28>
 964:	cmp	r0, #0
 968:	movne	r2, #1
 96c:	moveq	r2, #0
 970:	mov	r3, #0
 974:	cmp	r4, #0
 978:	movne	ip, r2
 97c:	moveq	ip, r3
 980:	cmp	ip, #0
 984:	bne	99c <emit_test+0x690>
 988:	ldr	r0, [pc, #952]	; d48 <emit_test+0xa3c>
 98c:	ldr	r1, [pc, #904]	; d1c <emit_test+0xa10>
 990:	mov	r2, #41	; 0x29
 994:	ldr	r3, [pc, #904]	; d24 <emit_test+0xa18>
 998:	bl	0 <__assert_fail>
 99c:	mov	ip, r4
 9a0:	ldr	r0, [ip]
 9a4:	sub	r3, r4, r0
 9a8:	ldrh	ip, [r3]
 9ac:	bic	r2, ip, #16711680	; 0xff0000
 9b0:	bic	r2, r2, #-16777216	; 0xff000000
 9b4:	cmp	r2, #6
 9b8:	bcc	9c8 <emit_test+0x6bc>
 9bc:	ldrh	r1, [r3, #4]
 9c0:	bic	r5, r1, #16711680	; 0xff0000
 9c4:	bic	r5, r5, #-16777216	; 0xff000000
 9c8:	cmp	r5, #0
 9cc:	beq	9e0 <emit_test+0x6d4>
 9d0:	add	r2, r4, r5
 9d4:	ldr	r1, [r2]
 9d8:	ldr	r2, [r2, #4]
 9dc:	b	9e8 <emit_test+0x6dc>
 9e0:	mov	r2, #0
 9e4:	mov	r1, #0
 9e8:	eor	r3, r1, #42	; 0x2a
 9ec:	orr	r0, r2, r3
 9f0:	cmp	r0, #0
 9f4:	beq	a14 <emit_test+0x708>
 9f8:	ldr	r0, [pc, #792]	; d18 <emit_test+0xa0c>
 9fc:	ldr	r1, [pc, #796]	; d20 <emit_test+0xa14>
 a00:	mov	r2, #112	; 0x70
 a04:	ldr	r3, [pc, #776]	; d14 <emit_test+0xa08>
 a08:	bl	0 <__assert_fail>
 a0c:	mvn	r0, #0
 a10:	b	ce8 <emit_test+0x9dc>
 a14:	mov	r5, #0
 a18:	ldr	r3, [pc, #788]	; d34 <emit_test+0xa28>
 a1c:	cmp	r3, #0
 a20:	movne	r3, #1
 a24:	moveq	r3, #0
 a28:	mov	r0, #0
 a2c:	cmp	r4, #0
 a30:	movne	r1, r3
 a34:	moveq	r1, r0
 a38:	cmp	r1, #0
 a3c:	bne	a54 <emit_test+0x748>
 a40:	ldr	r0, [pc, #768]	; d48 <emit_test+0xa3c>
 a44:	ldr	r1, [pc, #720]	; d1c <emit_test+0xa10>
 a48:	mov	r2, #42	; 0x2a
 a4c:	ldr	r3, [pc, #764]	; d50 <emit_test+0xa44>
 a50:	bl	0 <__assert_fail>
 a54:	mov	r0, r4
 a58:	ldr	ip, [r0]
 a5c:	sub	ip, r4, ip
 a60:	ldrh	r0, [ip]
 a64:	bic	r2, r0, #16711680	; 0xff0000
 a68:	bic	r2, r2, #-16777216	; 0xff000000
 a6c:	cmp	r2, #8
 a70:	bcc	a80 <emit_test+0x774>
 a74:	ldrh	ip, [ip, #6]
 a78:	bic	r5, ip, #16711680	; 0xff0000
 a7c:	bic	r5, r5, #-16777216	; 0xff000000
 a80:	cmp	r5, #0
 a84:	beq	a94 <emit_test+0x788>
 a88:	add	r1, r4, r5
 a8c:	ldrb	r1, [r1]
 a90:	b	a98 <emit_test+0x78c>
 a94:	mov	r1, #0
 a98:	and	r1, r1, #255	; 0xff
 a9c:	cmp	r1, #1
 aa0:	beq	ac0 <emit_test+0x7b4>
 aa4:	ldr	r0, [pc, #620]	; d18 <emit_test+0xa0c>
 aa8:	ldr	r1, [pc, #624]	; d20 <emit_test+0xa14>
 aac:	mov	r2, #113	; 0x71
 ab0:	ldr	r3, [pc, #604]	; d14 <emit_test+0xa08>
 ab4:	bl	0 <__assert_fail>
 ab8:	mvn	r0, #0
 abc:	b	ce8 <emit_test+0x9dc>
 ac0:	mov	r6, r4
 ac4:	mov	r5, #0
 ac8:	ldr	r3, [pc, #612]	; d34 <emit_test+0xa28>
 acc:	cmp	r3, #0
 ad0:	movne	r1, #1
 ad4:	moveq	r1, #0
 ad8:	mov	r3, #0
 adc:	cmp	r6, #0
 ae0:	movne	ip, r1
 ae4:	moveq	ip, r3
 ae8:	cmp	ip, #0
 aec:	bne	b04 <emit_test+0x7f8>
 af0:	ldr	r0, [pc, #592]	; d48 <emit_test+0xa3c>
 af4:	ldr	r1, [pc, #544]	; d1c <emit_test+0xa10>
 af8:	mov	r2, #43	; 0x2b
 afc:	ldr	r3, [pc, #548]	; d28 <emit_test+0xa1c>
 b00:	bl	0 <__assert_fail>
 b04:	ldr	r1, [r6]
 b08:	sub	r3, r6, r1
 b0c:	ldrh	r2, [r3]
 b10:	bic	r0, r2, #16711680	; 0xff0000
 b14:	bic	r0, r0, #-16777216	; 0xff000000
 b18:	cmp	r0, #10
 b1c:	bcc	b2c <emit_test+0x820>
 b20:	ldrh	ip, [r3, #8]
 b24:	bic	r5, ip, #16711680	; 0xff0000
 b28:	bic	r5, r5, #-16777216	; 0xff000000
 b2c:	cmp	r5, #0
 b30:	beq	b48 <emit_test+0x83c>
 b34:	add	ip, r6, r5
 b38:	ldr	r3, [ip]
 b3c:	add	r0, ip, r3
 b40:	add	r3, r0, #4
 b44:	b	b6c <emit_test+0x860>
 b48:	ldr	r3, [pc, #448]	; d10 <emit_test+0xa04>
 b4c:	cmp	r3, #0
 b50:	bne	b68 <emit_test+0x85c>
 b54:	ldr	r0, [pc, #484]	; d40 <emit_test+0xa34>
 b58:	ldr	r1, [pc, #444]	; d1c <emit_test+0xa10>
 b5c:	mov	r2, #43	; 0x2b
 b60:	ldr	r3, [pc, #448]	; d28 <emit_test+0xa1c>
 b64:	bl	0 <__assert_fail>
 b68:	mov	r3, #0
 b6c:	cmp	r3, #0
 b70:	beq	cd0 <emit_test+0x9c4>
 b74:	sub	lr, r3, #4096	; 0x1000
 b78:	ldr	r1, [lr, #4092]	; 0xffc
 b7c:	cmp	r1, #4
 b80:	bne	cd0 <emit_test+0x9c4>
 b84:	mov	r5, #0
 b88:	ldr	r1, [pc, #420]	; d34 <emit_test+0xa28>
 b8c:	cmp	r1, #0
 b90:	movne	r2, #1
 b94:	moveq	r2, #0
 b98:	mov	r3, #0
 b9c:	cmp	r4, #0
 ba0:	movne	r0, r2
 ba4:	moveq	r0, r3
 ba8:	cmp	r0, #0
 bac:	bne	bc4 <emit_test+0x8b8>
 bb0:	ldr	r0, [pc, #400]	; d48 <emit_test+0xa3c>
 bb4:	ldr	r1, [pc, #352]	; d1c <emit_test+0xa10>
 bb8:	mov	r2, #43	; 0x2b
 bbc:	ldr	r3, [pc, #356]	; d28 <emit_test+0xa1c>
 bc0:	bl	0 <__assert_fail>
 bc4:	ldr	ip, [r4]
 bc8:	sub	r0, r4, ip
 bcc:	ldrh	r1, [r0]
 bd0:	bic	ip, r1, #16711680	; 0xff0000
 bd4:	bic	ip, ip, #-16777216	; 0xff000000
 bd8:	cmp	ip, #10
 bdc:	bcc	bec <emit_test+0x8e0>
 be0:	ldrh	r3, [r0, #8]
 be4:	bic	r5, r3, #16711680	; 0xff0000
 be8:	bic	r5, r5, #-16777216	; 0xff000000
 bec:	cmp	r5, #0
 bf0:	beq	c08 <emit_test+0x8fc>
 bf4:	add	ip, r4, r5
 bf8:	ldr	r3, [ip]
 bfc:	add	r1, ip, r3
 c00:	add	r4, r1, #4
 c04:	b	c2c <emit_test+0x920>
 c08:	ldr	ip, [pc, #256]	; d10 <emit_test+0xa04>
 c0c:	cmp	ip, #0
 c10:	bne	c28 <emit_test+0x91c>
 c14:	ldr	r0, [pc, #292]	; d40 <emit_test+0xa34>
 c18:	ldr	r1, [pc, #252]	; d1c <emit_test+0xa10>
 c1c:	mov	r2, #43	; 0x2b
 c20:	ldr	r3, [pc, #256]	; d28 <emit_test+0xa1c>
 c24:	bl	0 <__assert_fail>
 c28:	mov	r4, #0
 c2c:	cmp	r4, #0
 c30:	beq	c40 <emit_test+0x934>
 c34:	sub	lr, r4, #4096	; 0x1000
 c38:	ldr	ip, [lr, #4092]	; 0xffc
 c3c:	b	c44 <emit_test+0x938>
 c40:	mov	ip, #0
 c44:	ldr	r0, [pc, #248]	; d44 <emit_test+0xa38>
 c48:	cmp	r0, #0
 c4c:	movne	r3, #1
 c50:	moveq	r3, #0
 c54:	mov	r2, #0
 c58:	cmp	ip, #2
 c5c:	movhi	r0, r3
 c60:	movls	r0, r2
 c64:	cmp	r0, #0
 c68:	bne	c80 <emit_test+0x974>
 c6c:	ldr	r0, [pc, #216]	; d4c <emit_test+0xa40>
 c70:	ldr	r1, [pc, #192]	; d38 <emit_test+0xa2c>
 c74:	movw	r2, #403	; 0x193
 c78:	ldr	r3, [pc, #172]	; d2c <emit_test+0xa20>
 c7c:	bl	0 <__assert_fail>
 c80:	vldr	s0, [r4, #8]
 c84:	vstr	s0, [sp, #368]	; 0x170
 c88:	ldr	r3, [sp, #368]	; 0x170
 c8c:	str	r3, [sp, #368]	; 0x170
 c90:	vldr	s2, [sp, #368]	; 0x170
 c94:	vldr	s6, [pc, #184]	; d54 <emit_test+0xa48>
 c98:	vcmp.f32	s2, s6
 c9c:	vmrs	APSR_nzcv, fpscr
 ca0:	beq	cc0 <emit_test+0x9b4>
 ca4:	ldr	r0, [pc, #108]	; d18 <emit_test+0xa0c>
 ca8:	ldr	r1, [pc, #112]	; d20 <emit_test+0xa14>
 cac:	mov	r2, #115	; 0x73
 cb0:	ldr	r3, [pc, #92]	; d14 <emit_test+0xa08>
 cb4:	bl	0 <__assert_fail>
 cb8:	mvn	r0, #0
 cbc:	b	ce8 <emit_test+0x9dc>
 cc0:	mov	r0, r7
 cc4:	bl	0 <flatcc_builder_clear>
 cc8:	mov	r0, #0
 ccc:	b	ce8 <emit_test+0x9dc>
 cd0:	ldr	r0, [pc, #64]	; d18 <emit_test+0xa0c>
 cd4:	ldr	r1, [pc, #68]	; d20 <emit_test+0xa14>
 cd8:	mov	r2, #114	; 0x72
 cdc:	ldr	r3, [pc, #48]	; d14 <emit_test+0xa08>
 ce0:	bl	0 <__assert_fail>
 ce4:	mvn	r0, #0
 ce8:	ldr	r4, [sp, #16]
 cec:	ldr	r5, [sp, #20]
 cf0:	ldr	r6, [sp, #24]
 cf4:	ldr	r7, [sp, #28]
 cf8:	ldr	r8, [sp, #32]
 cfc:	ldr	r9, [sp, #36]	; 0x24
 d00:	ldr	sl, [sp, #40]	; 0x28
 d04:	ldr	lr, [sp, #12]
 d08:	add	sp, sp, #392	; 0x188
 d0c:	bx	lr
 d10:	.word	0x0000024b
 d14:	.word	0x00000455
 d18:	.word	0x000002c7
 d1c:	.word	0x00000166
 d20:	.word	0x00000262
 d24:	.word	0x00000427
 d28:	.word	0x0000043d
 d2c:	.word	0x0000040e
 d30:	.word	0x00000107
 d34:	.word	0x00000144
 d38:	.word	0x00000077
 d3c:	.word	0x00000212
 d40:	.word	0x000001dc
 d44:	.word	0x00000131
 d48:	.word	0x0000010b
 d4c:	.word	0x000002c9
 d50:	.word	0x00000431
 d54:	.word	0x3f99999a

00000d58 <main>:
 d58:	mov	ip, sp
 d5c:	sub	sp, sp, #16
 d60:	str	ip, [sp]
 d64:	str	lr, [sp, #4]
 d68:	str	r4, [sp, #8]
 d6c:	bl	d4 <debug_test>
 d70:	mov	r4, r0
 d74:	bl	30c <emit_test>
 d78:	orr	r0, r4, r0
 d7c:	ldr	r4, [sp, #8]
 d80:	ldr	lr, [sp, #4]
 d84:	add	sp, sp, #16
 d88:	bx	lr
