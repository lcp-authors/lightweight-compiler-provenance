
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #344	; 0x158
       c:	movw	r2, #0
      10:	str	r2, [fp, #-12]
      14:	str	r0, [fp, #-16]
      18:	str	r1, [fp, #-20]	; 0xffffffec
      1c:	movw	r0, #10
      20:	str	r0, [sp, #52]	; 0x34
      24:	str	r2, [sp, #44]	; 0x2c
      28:	add	r0, sp, #88	; 0x58
      2c:	str	r0, [sp, #84]	; 0x54
      30:	ldr	r0, [sp, #84]	; 0x54
      34:	bl	0 <flatcc_builder_init>
      38:	ldr	r1, [sp, #84]	; 0x54
      3c:	str	r0, [sp, #36]	; 0x24
      40:	mov	r0, r1
      44:	bl	334 <create_root_monster>
      48:	ldr	r1, [sp, #84]	; 0x54
      4c:	str	r0, [sp, #32]
      50:	mov	r0, r1
      54:	sub	r1, fp, #32
      58:	bl	0 <flatcc_builder_finalize_buffer>
      5c:	str	r0, [fp, #-28]	; 0xffffffe4
      60:	movw	r0, #0
      64:	movt	r0, #0
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	bl	0 <fopen>
      74:	str	r0, [fp, #-24]	; 0xffffffe8
      78:	ldr	r0, [fp, #-24]	; 0xffffffe8
      7c:	movw	r1, #0
      80:	cmp	r0, r1
      84:	bne	94 <main+0x94>
      88:	mvn	r0, #0
      8c:	str	r0, [sp, #44]	; 0x2c
      90:	b	300 <main+0x300>
      94:	ldr	r0, [fp, #-32]	; 0xffffffe0
      98:	ldr	r1, [fp, #-28]	; 0xffffffe4
      9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
      a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
      a4:	str	r0, [sp, #28]
      a8:	mov	r0, r1
      ac:	movw	r1, #1
      b0:	bl	0 <fwrite>
      b4:	ldr	r1, [sp, #28]
      b8:	cmp	r1, r0
      bc:	movw	r0, #0
      c0:	movne	r0, #1
      c4:	and	r0, r0, #1
      c8:	ldr	r2, [sp, #44]	; 0x2c
      cc:	orr	r0, r2, r0
      d0:	str	r0, [sp, #44]	; 0x2c
      d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
      d8:	bl	0 <fclose>
      dc:	ldr	r1, [sp, #44]	; 0x2c
      e0:	cmp	r1, #0
      e4:	beq	ec <main+0xec>
      e8:	b	300 <main+0x300>
      ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
      f0:	movw	r0, #0
      f4:	movt	r0, #0
      f8:	bl	0 <printf>
      fc:	movw	r1, #0
     100:	movt	r1, #0
     104:	str	r0, [sp, #24]
     108:	mov	r0, r1
     10c:	bl	0 <printf>
     110:	str	r0, [sp, #20]
     114:	bl	3e8 <elapsed_realtime>
     118:	vstr	d0, [sp, #64]	; 0x40
     11c:	movw	r0, #0
     120:	str	r0, [sp, #48]	; 0x30
     124:	ldr	r0, [sp, #48]	; 0x30
     128:	ldr	r1, [sp, #52]	; 0x34
     12c:	cmp	r0, r1
     130:	bge	2d8 <main+0x2d8>
     134:	ldr	r0, [sp, #84]	; 0x54
     138:	bl	334 <create_root_monster>
     13c:	ldr	r1, [sp, #84]	; 0x54
     140:	ldr	r2, [fp, #-28]	; 0xffffffe4
     144:	ldr	r3, [fp, #-32]	; 0xffffffe0
     148:	str	r0, [sp, #16]
     14c:	mov	r0, r1
     150:	mov	r1, r2
     154:	mov	r2, r3
     158:	bl	0 <flatcc_builder_copy_buffer>
     15c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     160:	str	r0, [sp, #12]
     164:	mov	r0, r1
     168:	bl	478 <MyGame_Example_Monster_as_root>
     16c:	str	r0, [sp, #80]	; 0x50
     170:	ldr	r0, [sp, #80]	; 0x50
     174:	bl	4f0 <MyGame_Example_Monster_name>
     178:	movw	r1, #0
     17c:	movt	r1, #0
     180:	bl	0 <strcmp>
     184:	ldr	r1, [sp, #44]	; 0x2c
     188:	orr	r0, r1, r0
     18c:	str	r0, [sp, #44]	; 0x2c
     190:	ldr	r0, [sp, #44]	; 0x2c
     194:	cmp	r0, #0
     198:	bne	1a0 <main+0x1a0>
     19c:	b	1c0 <main+0x1c0>
     1a0:	movw	r0, #0
     1a4:	movt	r0, #0
     1a8:	movw	r1, #0
     1ac:	movt	r1, #0
     1b0:	movw	r2, #139	; 0x8b
     1b4:	movw	r3, #0
     1b8:	movt	r3, #0
     1bc:	bl	0 <__assert_fail>
     1c0:	ldr	r0, [sp, #80]	; 0x50
     1c4:	bl	5f8 <MyGame_Example_Monster_testarrayoftables>
     1c8:	str	r0, [sp, #76]	; 0x4c
     1cc:	ldr	r0, [sp, #76]	; 0x4c
     1d0:	bl	6f4 <MyGame_Example_Monster_vec_len>
     1d4:	cmp	r0, #1000	; 0x3e8
     1d8:	movw	r0, #0
     1dc:	movne	r0, #1
     1e0:	and	r0, r0, #1
     1e4:	ldr	r1, [sp, #44]	; 0x2c
     1e8:	orr	r0, r1, r0
     1ec:	str	r0, [sp, #44]	; 0x2c
     1f0:	ldr	r0, [sp, #44]	; 0x2c
     1f4:	cmp	r0, #0
     1f8:	bne	200 <main+0x200>
     1fc:	b	220 <main+0x220>
     200:	movw	r0, #0
     204:	movt	r0, #0
     208:	movw	r1, #0
     20c:	movt	r1, #0
     210:	movw	r2, #143	; 0x8f
     214:	movw	r3, #0
     218:	movt	r3, #0
     21c:	bl	0 <__assert_fail>
     220:	movw	r0, #0
     224:	str	r0, [sp, #40]	; 0x28
     228:	ldr	r0, [sp, #40]	; 0x28
     22c:	cmp	r0, #1000	; 0x3e8
     230:	bge	2b4 <main+0x2b4>
     234:	ldr	r0, [fp, #-28]	; 0xffffffe4
     238:	ldr	r1, [sp, #76]	; 0x4c
     23c:	ldr	r2, [sp, #40]	; 0x28
     240:	str	r0, [sp, #8]
     244:	mov	r0, r1
     248:	mov	r1, r2
     24c:	bl	958 <MyGame_Example_Monster_vec_at>
     250:	ldr	r1, [sp, #8]
     254:	str	r0, [sp, #4]
     258:	mov	r0, r1
     25c:	ldr	r1, [sp, #4]
     260:	bl	744 <verify_monster>
     264:	ldr	r1, [sp, #44]	; 0x2c
     268:	orr	r0, r1, r0
     26c:	str	r0, [sp, #44]	; 0x2c
     270:	ldr	r0, [sp, #44]	; 0x2c
     274:	cmp	r0, #0
     278:	bne	280 <main+0x280>
     27c:	b	2a0 <main+0x2a0>
     280:	movw	r0, #0
     284:	movt	r0, #0
     288:	movw	r1, #0
     28c:	movt	r1, #0
     290:	movw	r2, #147	; 0x93
     294:	movw	r3, #0
     298:	movt	r3, #0
     29c:	bl	0 <__assert_fail>
     2a0:	b	2a4 <main+0x2a4>
     2a4:	ldr	r0, [sp, #40]	; 0x28
     2a8:	add	r0, r0, #1
     2ac:	str	r0, [sp, #40]	; 0x28
     2b0:	b	228 <main+0x228>
     2b4:	ldr	r0, [sp, #44]	; 0x2c
     2b8:	cmp	r0, #0
     2bc:	beq	2c4 <main+0x2c4>
     2c0:	b	300 <main+0x300>
     2c4:	b	2c8 <main+0x2c8>
     2c8:	ldr	r0, [sp, #48]	; 0x30
     2cc:	add	r0, r0, #1
     2d0:	str	r0, [sp, #48]	; 0x30
     2d4:	b	124 <main+0x124>
     2d8:	bl	3e8 <elapsed_realtime>
     2dc:	vstr	d0, [sp, #56]	; 0x38
     2e0:	vldr	d0, [sp, #64]	; 0x40
     2e4:	vldr	d1, [sp, #56]	; 0x38
     2e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     2ec:	ldr	r2, [sp, #52]	; 0x34
     2f0:	movw	r0, #0
     2f4:	movt	r0, #0
     2f8:	movw	r3, #0
     2fc:	bl	9e0 <show_benchmark>
     300:	ldr	r0, [sp, #84]	; 0x54
     304:	bl	0 <flatcc_builder_clear>
     308:	ldr	r0, [fp, #-28]	; 0xffffffe4
     30c:	bl	0 <free>
     310:	ldr	r0, [sp, #44]	; 0x2c
     314:	cmp	r0, #0
     318:	beq	328 <main+0x328>
     31c:	movw	r0, #0
     320:	movt	r0, #0
     324:	bl	0 <printf>
     328:	ldr	r0, [sp, #44]	; 0x2c
     32c:	sub	sp, fp, #8
     330:	pop	{r4, r5, fp, pc}

00000334 <create_root_monster>:
     334:	push	{fp, lr}
     338:	mov	fp, sp
     33c:	sub	sp, sp, #32
     340:	str	r0, [fp, #-4]
     344:	ldr	r0, [fp, #-4]
     348:	bl	0 <flatcc_builder_reset>
     34c:	ldr	r1, [fp, #-4]
     350:	str	r0, [fp, #-12]
     354:	mov	r0, r1
     358:	bl	c18 <MyGame_Example_Monster_start_as_root>
     35c:	ldr	r1, [fp, #-4]
     360:	str	r0, [sp, #16]
     364:	mov	r0, r1
     368:	movw	r1, #0
     36c:	movt	r1, #0
     370:	bl	c64 <MyGame_Example_Monster_name_create_str>
     374:	ldr	r1, [fp, #-4]
     378:	str	r0, [sp, #12]
     37c:	mov	r0, r1
     380:	bl	cb0 <create_monsters>
     384:	str	r0, [fp, #-8]
     388:	ldr	r0, [fp, #-8]
     38c:	cmp	r0, #0
     390:	beq	398 <create_root_monster+0x64>
     394:	b	3b8 <create_root_monster+0x84>
     398:	movw	r0, #0
     39c:	movt	r0, #0
     3a0:	movw	r1, #0
     3a4:	movt	r1, #0
     3a8:	movw	r2, #56	; 0x38
     3ac:	movw	r3, #0
     3b0:	movt	r3, #0
     3b4:	bl	0 <__assert_fail>
     3b8:	ldr	r0, [fp, #-4]
     3bc:	ldr	r1, [fp, #-8]
     3c0:	bl	d44 <MyGame_Example_Monster_testarrayoftables_add>
     3c4:	ldr	r1, [fp, #-4]
     3c8:	str	r0, [sp, #8]
     3cc:	mov	r0, r1
     3d0:	bl	db0 <MyGame_Example_Monster_end_as_root>
     3d4:	movw	r1, #0
     3d8:	str	r0, [sp, #4]
     3dc:	mov	r0, r1
     3e0:	mov	sp, fp
     3e4:	pop	{fp, pc}

000003e8 <elapsed_realtime>:
     3e8:	push	{fp, lr}
     3ec:	mov	fp, sp
     3f0:	sub	sp, sp, #8
     3f4:	mov	r0, sp
     3f8:	movw	r1, #0
     3fc:	bl	0 <gettimeofday>
     400:	movw	r1, #0
     404:	movt	r1, #0
     408:	ldr	r1, [r1]
     40c:	cmp	r1, #0
     410:	bne	42c <elapsed_realtime+0x44>
     414:	ldr	r0, [sp]
     418:	movw	r1, #0
     41c:	movt	r1, #0
     420:	str	r0, [r1]
     424:	ldr	r0, [sp, #4]
     428:	str	r0, [r1, #4]
     42c:	vldr	d16, [pc, #60]	; 470 <elapsed_realtime+0x88>
     430:	ldr	r0, [sp]
     434:	movw	r1, #0
     438:	movt	r1, #0
     43c:	ldr	r2, [r1]
     440:	sub	r0, r0, r2
     444:	vmov	s0, r0
     448:	vcvt.f64.s32	d17, s0
     44c:	ldr	r0, [sp, #4]
     450:	ldr	r1, [r1, #4]
     454:	sub	r0, r0, r1
     458:	vmov	s0, r0
     45c:	vcvt.f64.s32	d18, s0
     460:	vdiv.f64	d16, d18, d16
     464:	vadd.f64	d0, d17, d16
     468:	mov	sp, fp
     46c:	pop	{fp, pc}
     470:	.word	0x00000000
     474:	.word	0x412e8480

00000478 <MyGame_Example_Monster_as_root>:
     478:	push	{fp, lr}
     47c:	mov	fp, sp
     480:	sub	sp, sp, #16
     484:	str	r0, [fp, #-4]
     488:	movw	r0, #0
     48c:	movt	r0, #0
     490:	str	r0, [sp, #8]
     494:	ldr	r0, [fp, #-4]
     498:	movw	r1, #0
     49c:	cmp	r0, r1
     4a0:	beq	4b8 <MyGame_Example_Monster_as_root+0x40>
     4a4:	ldr	r0, [fp, #-4]
     4a8:	ldr	r1, [sp, #8]
     4ac:	bl	1274 <flatbuffers_has_identifier>
     4b0:	cmp	r0, #0
     4b4:	bne	4c4 <MyGame_Example_Monster_as_root+0x4c>
     4b8:	movw	r0, #0
     4bc:	str	r0, [sp, #4]
     4c0:	b	4e4 <MyGame_Example_Monster_as_root+0x6c>
     4c4:	ldr	r0, [fp, #-4]
     4c8:	ldr	r1, [fp, #-4]
     4cc:	str	r0, [sp]
     4d0:	mov	r0, r1
     4d4:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
     4d8:	ldr	r1, [sp]
     4dc:	add	r0, r1, r0
     4e0:	str	r0, [sp, #4]
     4e4:	ldr	r0, [sp, #4]
     4e8:	mov	sp, fp
     4ec:	pop	{fp, pc}

000004f0 <MyGame_Example_Monster_name>:
     4f0:	push	{fp, lr}
     4f4:	mov	fp, sp
     4f8:	sub	sp, sp, #24
     4fc:	str	r0, [fp, #-4]
     500:	movw	r0, #0
     504:	strh	r0, [fp, #-10]
     508:	ldr	r0, [fp, #-4]
     50c:	movw	r1, #0
     510:	cmp	r0, r1
     514:	beq	520 <MyGame_Example_Monster_name+0x30>
     518:	b	51c <MyGame_Example_Monster_name+0x2c>
     51c:	b	540 <MyGame_Example_Monster_name+0x50>
     520:	movw	r0, #0
     524:	movt	r0, #0
     528:	movw	r1, #0
     52c:	movt	r1, #0
     530:	movw	r2, #699	; 0x2bb
     534:	movw	r3, #0
     538:	movt	r3, #0
     53c:	bl	0 <__assert_fail>
     540:	mov	r0, #3
     544:	strh	r0, [sp, #12]
     548:	ldr	r0, [fp, #-4]
     54c:	str	r0, [sp, #4]
     550:	bl	13a4 <__flatbuffers_soffset_read_from_pe>
     554:	ldr	r1, [sp, #4]
     558:	sub	r0, r1, r0
     55c:	str	r0, [sp, #8]
     560:	ldr	r0, [sp, #8]
     564:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
     568:	ldrh	r1, [sp, #12]
     56c:	add	r1, r1, #3
     570:	lsl	r1, r1, #1
     574:	cmp	r0, r1
     578:	bcc	594 <MyGame_Example_Monster_name+0xa4>
     57c:	ldr	r0, [sp, #8]
     580:	ldrh	r1, [sp, #12]
     584:	add	r0, r0, r1, lsl #1
     588:	add	r0, r0, #4
     58c:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
     590:	strh	r0, [fp, #-10]
     594:	ldrsh	r0, [fp, #-10]
     598:	cmp	r0, #0
     59c:	beq	5d8 <MyGame_Example_Monster_name+0xe8>
     5a0:	ldr	r0, [fp, #-4]
     5a4:	ldrh	r1, [fp, #-10]
     5a8:	add	r0, r0, r1
     5ac:	str	r0, [fp, #-8]
     5b0:	ldr	r0, [fp, #-8]
     5b4:	add	r0, r0, #4
     5b8:	ldr	r1, [fp, #-8]
     5bc:	str	r0, [sp]
     5c0:	mov	r0, r1
     5c4:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
     5c8:	ldr	r1, [sp]
     5cc:	add	r0, r1, r0
     5d0:	mov	sp, fp
     5d4:	pop	{fp, pc}
     5d8:	movw	r0, #0
     5dc:	movt	r0, #0
     5e0:	movw	r1, #0
     5e4:	movt	r1, #0
     5e8:	movw	r2, #699	; 0x2bb
     5ec:	movw	r3, #0
     5f0:	movt	r3, #0
     5f4:	bl	0 <__assert_fail>

000005f8 <MyGame_Example_Monster_testarrayoftables>:
     5f8:	push	{fp, lr}
     5fc:	mov	fp, sp
     600:	sub	sp, sp, #32
     604:	str	r0, [fp, #-8]
     608:	movw	r0, #0
     60c:	strh	r0, [fp, #-14]
     610:	ldr	r0, [fp, #-8]
     614:	movw	r1, #0
     618:	cmp	r0, r1
     61c:	beq	628 <MyGame_Example_Monster_testarrayoftables+0x30>
     620:	b	624 <MyGame_Example_Monster_testarrayoftables+0x2c>
     624:	b	648 <MyGame_Example_Monster_testarrayoftables+0x50>
     628:	movw	r0, #0
     62c:	movt	r0, #0
     630:	movw	r1, #0
     634:	movt	r1, #0
     638:	movw	r2, #711	; 0x2c7
     63c:	movw	r3, #0
     640:	movt	r3, #0
     644:	bl	0 <__assert_fail>
     648:	mov	r0, #11
     64c:	strh	r0, [sp, #16]
     650:	ldr	r0, [fp, #-8]
     654:	str	r0, [sp, #8]
     658:	bl	13a4 <__flatbuffers_soffset_read_from_pe>
     65c:	ldr	r1, [sp, #8]
     660:	sub	r0, r1, r0
     664:	str	r0, [sp, #12]
     668:	ldr	r0, [sp, #12]
     66c:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
     670:	ldrh	r1, [sp, #16]
     674:	add	r1, r1, #3
     678:	lsl	r1, r1, #1
     67c:	cmp	r0, r1
     680:	bcc	69c <MyGame_Example_Monster_testarrayoftables+0xa4>
     684:	ldr	r0, [sp, #12]
     688:	ldrh	r1, [sp, #16]
     68c:	add	r0, r0, r1, lsl #1
     690:	add	r0, r0, #4
     694:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
     698:	strh	r0, [fp, #-14]
     69c:	ldrsh	r0, [fp, #-14]
     6a0:	cmp	r0, #0
     6a4:	beq	6e0 <MyGame_Example_Monster_testarrayoftables+0xe8>
     6a8:	ldr	r0, [fp, #-8]
     6ac:	ldrh	r1, [fp, #-14]
     6b0:	add	r0, r0, r1
     6b4:	str	r0, [fp, #-12]
     6b8:	ldr	r0, [fp, #-12]
     6bc:	add	r0, r0, #4
     6c0:	ldr	r1, [fp, #-12]
     6c4:	str	r0, [sp, #4]
     6c8:	mov	r0, r1
     6cc:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
     6d0:	ldr	r1, [sp, #4]
     6d4:	add	r0, r1, r0
     6d8:	str	r0, [fp, #-4]
     6dc:	b	6e8 <MyGame_Example_Monster_testarrayoftables+0xf0>
     6e0:	movw	r0, #0
     6e4:	str	r0, [fp, #-4]
     6e8:	ldr	r0, [fp, #-4]
     6ec:	mov	sp, fp
     6f0:	pop	{fp, pc}

000006f4 <MyGame_Example_Monster_vec_len>:
     6f4:	push	{fp, lr}
     6f8:	mov	fp, sp
     6fc:	sub	sp, sp, #8
     700:	str	r0, [sp, #4]
     704:	ldr	r0, [sp, #4]
     708:	movw	r1, #0
     70c:	cmp	r0, r1
     710:	beq	72c <MyGame_Example_Monster_vec_len+0x38>
     714:	ldr	r0, [sp, #4]
     718:	mvn	r1, #3
     71c:	add	r0, r0, r1
     720:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
     724:	str	r0, [sp]
     728:	b	738 <MyGame_Example_Monster_vec_len+0x44>
     72c:	movw	r0, #0
     730:	str	r0, [sp]
     734:	b	738 <MyGame_Example_Monster_vec_len+0x44>
     738:	ldr	r0, [sp]
     73c:	mov	sp, fp
     740:	pop	{fp, pc}

00000744 <verify_monster>:
     744:	push	{fp, lr}
     748:	mov	fp, sp
     74c:	sub	sp, sp, #40	; 0x28
     750:	str	r0, [fp, #-4]
     754:	str	r1, [fp, #-8]
     758:	ldr	r0, [fp, #-8]
     75c:	bl	4f0 <MyGame_Example_Monster_name>
     760:	str	r0, [fp, #-16]
     764:	ldr	r0, [fp, #-8]
     768:	bl	1418 <MyGame_Example_Monster_inventory>
     76c:	str	r0, [sp, #20]
     770:	ldr	r0, [fp, #-16]
     774:	bl	1514 <flatbuffers_string_len>
     778:	cmp	r0, #700	; 0x2bc
     77c:	beq	7a0 <verify_monster+0x5c>
     780:	movw	r0, #0
     784:	movt	r0, #0
     788:	movw	r1, #0
     78c:	movt	r1, #0
     790:	movw	r2, #74	; 0x4a
     794:	movw	r3, #0
     798:	movt	r3, #0
     79c:	bl	0 <__assert_fail>
     7a0:	ldr	r0, [sp, #20]
     7a4:	bl	1564 <flatbuffers_uint8_vec_len>
     7a8:	ldr	r1, [pc, #420]	; 954 <verify_monster+0x210>
     7ac:	cmp	r0, r1
     7b0:	beq	7d4 <verify_monster+0x90>
     7b4:	movw	r0, #0
     7b8:	movt	r0, #0
     7bc:	movw	r1, #0
     7c0:	movt	r1, #0
     7c4:	movw	r2, #78	; 0x4e
     7c8:	movw	r3, #0
     7cc:	movt	r3, #0
     7d0:	bl	0 <__assert_fail>
     7d4:	movw	r0, #0
     7d8:	str	r0, [fp, #-12]
     7dc:	ldr	r0, [fp, #-12]
     7e0:	cmp	r0, #100	; 0x64
     7e4:	bcs	8d4 <verify_monster+0x190>
     7e8:	ldr	r0, [fp, #-16]
     7ec:	ldr	r1, [fp, #-12]
     7f0:	movw	r2, #7
     7f4:	mul	r1, r1, r2
     7f8:	add	r0, r0, r1
     7fc:	movw	r1, #0
     800:	movt	r1, #0
     804:	mov	r2, #7
     808:	bl	0 <memcmp>
     80c:	cmp	r0, #0
     810:	beq	8c0 <verify_monster+0x17c>
     814:	ldr	r1, [fp, #-12]
     818:	ldr	r0, [fp, #-16]
     81c:	movw	r2, #0
     820:	cmp	r0, r2
     824:	str	r1, [sp, #16]
     828:	beq	838 <verify_monster+0xf4>
     82c:	ldr	r0, [fp, #-16]
     830:	str	r0, [sp, #12]
     834:	b	848 <verify_monster+0x104>
     838:	movw	r0, #0
     83c:	movt	r0, #0
     840:	str	r0, [sp, #12]
     844:	b	848 <verify_monster+0x104>
     848:	ldr	r0, [sp, #12]
     84c:	movw	r1, #0
     850:	movt	r1, #0
     854:	str	r0, [sp, #8]
     858:	mov	r0, r1
     85c:	ldr	r1, [sp, #16]
     860:	ldr	r2, [sp, #8]
     864:	bl	0 <printf>
     868:	ldr	r1, [fp, #-16]
     86c:	ldr	r2, [fp, #-12]
     870:	movw	r3, #7
     874:	mul	r2, r2, r3
     878:	add	r1, r1, r2
     87c:	ldr	r2, [fp, #-4]
     880:	sub	r1, r1, r2
     884:	movw	r2, #0
     888:	movt	r2, #0
     88c:	str	r0, [sp, #4]
     890:	mov	r0, r2
     894:	bl	0 <printf>
     898:	movw	r1, #0
     89c:	movt	r1, #0
     8a0:	str	r0, [sp]
     8a4:	mov	r0, r1
     8a8:	movw	r1, #0
     8ac:	movt	r1, #0
     8b0:	movw	r2, #85	; 0x55
     8b4:	movw	r3, #0
     8b8:	movt	r3, #0
     8bc:	bl	0 <__assert_fail>
     8c0:	b	8c4 <verify_monster+0x180>
     8c4:	ldr	r0, [fp, #-12]
     8c8:	add	r0, r0, #1
     8cc:	str	r0, [fp, #-12]
     8d0:	b	7dc <verify_monster+0x98>
     8d4:	movw	r0, #0
     8d8:	str	r0, [fp, #-12]
     8dc:	ldr	r0, [fp, #-12]
     8e0:	cmp	r0, #100	; 0x64
     8e4:	bcs	948 <verify_monster+0x204>
     8e8:	ldr	r0, [sp, #20]
     8ec:	ldr	r1, [fp, #-12]
     8f0:	movw	r2, #1000	; 0x3e8
     8f4:	mul	r1, r1, r2
     8f8:	add	r0, r0, r1
     8fc:	movw	r1, #0
     900:	movt	r1, #0
     904:	mov	r2, #1000	; 0x3e8
     908:	bl	0 <memcmp>
     90c:	cmp	r0, #0
     910:	beq	934 <verify_monster+0x1f0>
     914:	movw	r0, #0
     918:	movt	r0, #0
     91c:	movw	r1, #0
     920:	movt	r1, #0
     924:	movw	r2, #91	; 0x5b
     928:	movw	r3, #0
     92c:	movt	r3, #0
     930:	bl	0 <__assert_fail>
     934:	b	938 <verify_monster+0x1f4>
     938:	ldr	r0, [fp, #-12]
     93c:	add	r0, r0, #1
     940:	str	r0, [fp, #-12]
     944:	b	8dc <verify_monster+0x198>
     948:	movw	r0, #0
     94c:	mov	sp, fp
     950:	pop	{fp, pc}
     954:	.word	0x000186a0

00000958 <MyGame_Example_Monster_vec_at>:
     958:	push	{fp, lr}
     95c:	mov	fp, sp
     960:	sub	sp, sp, #16
     964:	str	r0, [fp, #-4]
     968:	str	r1, [sp, #8]
     96c:	ldr	r0, [fp, #-4]
     970:	ldr	r1, [sp, #8]
     974:	add	r0, r0, r1, lsl #2
     978:	str	r0, [sp, #4]
     97c:	ldr	r0, [fp, #-4]
     980:	bl	1584 <flatbuffers_vec_len>
     984:	ldr	r1, [sp, #8]
     988:	cmp	r0, r1
     98c:	bls	998 <MyGame_Example_Monster_vec_at+0x40>
     990:	b	994 <MyGame_Example_Monster_vec_at+0x3c>
     994:	b	9b8 <MyGame_Example_Monster_vec_at+0x60>
     998:	movw	r0, #0
     99c:	movt	r0, #0
     9a0:	movw	r1, #0
     9a4:	movt	r1, #0
     9a8:	movw	r2, #693	; 0x2b5
     9ac:	movw	r3, #0
     9b0:	movt	r3, #0
     9b4:	bl	0 <__assert_fail>
     9b8:	ldr	r0, [sp, #4]
     9bc:	ldr	r1, [sp, #4]
     9c0:	str	r0, [sp]
     9c4:	mov	r0, r1
     9c8:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
     9cc:	ldr	r1, [sp]
     9d0:	add	r0, r1, r0
     9d4:	mov	sp, fp
     9d8:	pop	{fp, pc}
     9dc:	nop	{0}

000009e0 <show_benchmark>:
     9e0:	push	{fp, lr}
     9e4:	mov	fp, sp
     9e8:	sub	sp, sp, #80	; 0x50
     9ec:	str	r0, [fp, #-4]
     9f0:	vstr	d0, [fp, #-16]
     9f4:	vstr	d1, [fp, #-24]	; 0xffffffe8
     9f8:	str	r1, [fp, #-28]	; 0xffffffe4
     9fc:	str	r2, [fp, #-32]	; 0xffffffe0
     a00:	str	r3, [fp, #-36]	; 0xffffffdc
     a04:	vldr	d16, [fp, #-24]	; 0xffffffe8
     a08:	vldr	d17, [fp, #-16]
     a0c:	vsub.f64	d16, d16, d17
     a10:	vstr	d16, [sp, #32]
     a14:	ldr	r1, [fp, #-4]
     a18:	movw	r0, #0
     a1c:	movt	r0, #0
     a20:	bl	0 <printf>
     a24:	vldr	d16, [sp, #32]
     a28:	movw	r1, #0
     a2c:	movt	r1, #0
     a30:	str	r0, [sp, #20]
     a34:	mov	r0, r1
     a38:	vmov	r2, r3, d16
     a3c:	bl	0 <printf>
     a40:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a44:	movw	r2, #0
     a48:	movt	r2, #0
     a4c:	str	r0, [sp, #16]
     a50:	mov	r0, r2
     a54:	bl	0 <printf>
     a58:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a5c:	movw	r2, #0
     a60:	movt	r2, #0
     a64:	str	r0, [sp, #12]
     a68:	mov	r0, r2
     a6c:	bl	0 <printf>
     a70:	vldr	d16, [pc, #392]	; c00 <show_benchmark+0x220>
     a74:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a78:	vmov	s4, r1
     a7c:	vcvt.f64.s32	d17, s4
     a80:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a84:	vmov	s4, r1
     a88:	vcvt.f64.u32	d18, s4
     a8c:	vmul.f64	d17, d17, d18
     a90:	vdiv.f64	d16, d17, d16
     a94:	vldr	d17, [sp, #32]
     a98:	vdiv.f64	d16, d16, d17
     a9c:	movw	r1, #0
     aa0:	movt	r1, #0
     aa4:	str	r0, [sp, #8]
     aa8:	mov	r0, r1
     aac:	vmov	r2, r3, d16
     ab0:	bl	0 <printf>
     ab4:	ldr	r1, [fp, #-32]	; 0xffffffe0
     ab8:	vmov	s4, r1
     abc:	vcvt.f64.s32	d16, s4
     ac0:	vldr	d17, [sp, #32]
     ac4:	vdiv.f64	d16, d16, d17
     ac8:	movw	r1, #0
     acc:	movt	r1, #0
     ad0:	str	r0, [sp, #4]
     ad4:	mov	r0, r1
     ad8:	vmov	r2, r3, d16
     adc:	bl	0 <printf>
     ae0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     ae4:	movw	r2, #0
     ae8:	cmp	r1, r2
     aec:	beq	b1c <show_benchmark+0x13c>
     af0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     af4:	cmp	r0, #1
     af8:	beq	b1c <show_benchmark+0x13c>
     afc:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b00:	vldr	d16, [sp, #32]
     b04:	vmov.f64	d17, #112	; 0x3f800000  1.0
     b08:	vdiv.f64	d16, d17, d16
     b0c:	movw	r0, #0
     b10:	movt	r0, #0
     b14:	vmov	r2, r3, d16
     b18:	bl	0 <printf>
     b1c:	vldr	d16, [pc, #228]	; c08 <show_benchmark+0x228>
     b20:	vldr	d17, [pc, #232]	; c10 <show_benchmark+0x230>
     b24:	vldr	d18, [sp, #32]
     b28:	vmul.f64	d17, d18, d17
     b2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b30:	vmov	s0, r0
     b34:	vcvt.f64.s32	d18, s0
     b38:	vdiv.f64	d17, d17, d18
     b3c:	vstr	d17, [sp, #24]
     b40:	vldr	d17, [sp, #24]
     b44:	vcmpe.f64	d17, d16
     b48:	vmrs	APSR_nzcv, fpscr
     b4c:	bpl	b68 <show_benchmark+0x188>
     b50:	vldr	d16, [sp, #24]
     b54:	movw	r0, #0
     b58:	movt	r0, #0
     b5c:	vmov	r2, r3, d16
     b60:	bl	0 <printf>
     b64:	b	bf4 <show_benchmark+0x214>
     b68:	vldr	d16, [pc, #144]	; c00 <show_benchmark+0x220>
     b6c:	vldr	d17, [sp, #24]
     b70:	vcmpe.f64	d17, d16
     b74:	vmrs	APSR_nzcv, fpscr
     b78:	bpl	b9c <show_benchmark+0x1bc>
     b7c:	vldr	d16, [pc, #132]	; c08 <show_benchmark+0x228>
     b80:	vldr	d17, [sp, #24]
     b84:	vdiv.f64	d16, d17, d16
     b88:	movw	r0, #0
     b8c:	movt	r0, #0
     b90:	vmov	r2, r3, d16
     b94:	bl	0 <printf>
     b98:	b	bf0 <show_benchmark+0x210>
     b9c:	vldr	d16, [pc, #108]	; c10 <show_benchmark+0x230>
     ba0:	vldr	d17, [sp, #24]
     ba4:	vcmpe.f64	d17, d16
     ba8:	vmrs	APSR_nzcv, fpscr
     bac:	bpl	bd0 <show_benchmark+0x1f0>
     bb0:	vldr	d16, [pc, #72]	; c00 <show_benchmark+0x220>
     bb4:	vldr	d17, [sp, #24]
     bb8:	vdiv.f64	d16, d17, d16
     bbc:	movw	r0, #0
     bc0:	movt	r0, #0
     bc4:	vmov	r2, r3, d16
     bc8:	bl	0 <printf>
     bcc:	b	bec <show_benchmark+0x20c>
     bd0:	vldr	d16, [pc, #56]	; c10 <show_benchmark+0x230>
     bd4:	vldr	d17, [sp, #24]
     bd8:	vdiv.f64	d16, d17, d16
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	vmov	r2, r3, d16
     be8:	bl	0 <printf>
     bec:	b	bf0 <show_benchmark+0x210>
     bf0:	b	bf4 <show_benchmark+0x214>
     bf4:	movw	r0, #0
     bf8:	mov	sp, fp
     bfc:	pop	{fp, pc}
     c00:	.word	0x00000000
     c04:	.word	0x412e8480
     c08:	.word	0x00000000
     c0c:	.word	0x408f4000
     c10:	.word	0x00000000
     c14:	.word	0x41cdcd65

00000c18 <MyGame_Example_Monster_start_as_root>:
     c18:	push	{fp, lr}
     c1c:	mov	fp, sp
     c20:	sub	sp, sp, #8
     c24:	str	r0, [sp, #4]
     c28:	ldr	r0, [sp, #4]
     c2c:	movw	r1, #0
     c30:	movt	r1, #0
     c34:	bl	df0 <flatbuffers_buffer_start>
     c38:	cmp	r0, #0
     c3c:	beq	c4c <MyGame_Example_Monster_start_as_root+0x34>
     c40:	mvn	r0, #0
     c44:	str	r0, [sp]
     c48:	b	c58 <MyGame_Example_Monster_start_as_root+0x40>
     c4c:	ldr	r0, [sp, #4]
     c50:	bl	e24 <MyGame_Example_Monster_start>
     c54:	str	r0, [sp]
     c58:	ldr	r0, [sp]
     c5c:	mov	sp, fp
     c60:	pop	{fp, pc}

00000c64 <MyGame_Example_Monster_name_create_str>:
     c64:	push	{fp, lr}
     c68:	mov	fp, sp
     c6c:	sub	sp, sp, #16
     c70:	str	r0, [fp, #-4]
     c74:	str	r1, [sp, #8]
     c78:	ldr	r0, [fp, #-4]
     c7c:	ldr	r1, [fp, #-4]
     c80:	ldr	r2, [sp, #8]
     c84:	str	r0, [sp, #4]
     c88:	mov	r0, r1
     c8c:	mov	r1, r2
     c90:	bl	0 <flatcc_builder_create_string_str>
     c94:	ldr	r1, [sp, #4]
     c98:	str	r0, [sp]
     c9c:	mov	r0, r1
     ca0:	ldr	r1, [sp]
     ca4:	bl	e48 <MyGame_Example_Monster_name_add>
     ca8:	mov	sp, fp
     cac:	pop	{fp, pc}

00000cb0 <create_monsters>:
     cb0:	push	{fp, lr}
     cb4:	mov	fp, sp
     cb8:	sub	sp, sp, #16
     cbc:	str	r0, [fp, #-4]
     cc0:	ldr	r0, [fp, #-4]
     cc4:	bl	eb4 <MyGame_Example_Monster_vec_start>
     cc8:	movw	r1, #0
     ccc:	str	r1, [sp, #8]
     cd0:	ldr	r0, [sp, #8]
     cd4:	cmp	r0, #1000	; 0x3e8
     cd8:	bcs	d34 <create_monsters+0x84>
     cdc:	ldr	r0, [fp, #-4]
     ce0:	bl	ed4 <create_monster>
     ce4:	str	r0, [sp, #4]
     ce8:	ldr	r0, [sp, #4]
     cec:	cmp	r0, #0
     cf0:	beq	cf8 <create_monsters+0x48>
     cf4:	b	d18 <create_monsters+0x68>
     cf8:	movw	r0, #0
     cfc:	movt	r0, #0
     d00:	movw	r1, #0
     d04:	movt	r1, #0
     d08:	movw	r2, #42	; 0x2a
     d0c:	movw	r3, #0
     d10:	movt	r3, #0
     d14:	bl	0 <__assert_fail>
     d18:	ldr	r0, [fp, #-4]
     d1c:	ldr	r1, [sp, #4]
     d20:	bl	fa4 <MyGame_Example_Monster_vec_push>
     d24:	ldr	r0, [sp, #8]
     d28:	add	r0, r0, #1
     d2c:	str	r0, [sp, #8]
     d30:	b	cd0 <create_monsters+0x20>
     d34:	ldr	r0, [fp, #-4]
     d38:	bl	ff0 <MyGame_Example_Monster_vec_end>
     d3c:	mov	sp, fp
     d40:	pop	{fp, pc}

00000d44 <MyGame_Example_Monster_testarrayoftables_add>:
     d44:	push	{fp, lr}
     d48:	mov	fp, sp
     d4c:	sub	sp, sp, #16
     d50:	str	r0, [fp, #-4]
     d54:	str	r1, [sp, #8]
     d58:	ldr	r0, [sp, #8]
     d5c:	cmp	r0, #0
     d60:	beq	d98 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     d64:	ldr	r0, [fp, #-4]
     d68:	movw	r1, #11
     d6c:	bl	0 <flatcc_builder_table_add_offset>
     d70:	str	r0, [sp, #4]
     d74:	movw	r1, #0
     d78:	cmp	r0, r1
     d7c:	beq	d98 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     d80:	ldr	r0, [sp, #8]
     d84:	ldr	r1, [sp, #4]
     d88:	str	r0, [r1]
     d8c:	movw	r0, #0
     d90:	str	r0, [sp]
     d94:	b	da4 <MyGame_Example_Monster_testarrayoftables_add+0x60>
     d98:	mvn	r0, #0
     d9c:	str	r0, [sp]
     da0:	b	da4 <MyGame_Example_Monster_testarrayoftables_add+0x60>
     da4:	ldr	r0, [sp]
     da8:	mov	sp, fp
     dac:	pop	{fp, pc}

00000db0 <MyGame_Example_Monster_end_as_root>:
     db0:	push	{fp, lr}
     db4:	mov	fp, sp
     db8:	sub	sp, sp, #16
     dbc:	str	r0, [fp, #-4]
     dc0:	ldr	r0, [fp, #-4]
     dc4:	ldr	r1, [fp, #-4]
     dc8:	str	r0, [sp, #8]
     dcc:	mov	r0, r1
     dd0:	bl	1130 <MyGame_Example_Monster_end>
     dd4:	ldr	r1, [sp, #8]
     dd8:	str	r0, [sp, #4]
     ddc:	mov	r0, r1
     de0:	ldr	r1, [sp, #4]
     de4:	bl	124c <flatbuffers_buffer_end>
     de8:	mov	sp, fp
     dec:	pop	{fp, pc}

00000df0 <flatbuffers_buffer_start>:
     df0:	push	{fp, lr}
     df4:	mov	fp, sp
     df8:	sub	sp, sp, #8
     dfc:	str	r0, [sp, #4]
     e00:	str	r1, [sp]
     e04:	ldr	r0, [sp, #4]
     e08:	ldr	r1, [sp]
     e0c:	movw	r2, #0
     e10:	uxth	r2, r2
     e14:	movw	r3, #0
     e18:	bl	0 <flatcc_builder_start_buffer>
     e1c:	mov	sp, fp
     e20:	pop	{fp, pc}

00000e24 <MyGame_Example_Monster_start>:
     e24:	push	{fp, lr}
     e28:	mov	fp, sp
     e2c:	sub	sp, sp, #8
     e30:	str	r0, [sp, #4]
     e34:	ldr	r0, [sp, #4]
     e38:	movw	r1, #36	; 0x24
     e3c:	bl	0 <flatcc_builder_start_table>
     e40:	mov	sp, fp
     e44:	pop	{fp, pc}

00000e48 <MyGame_Example_Monster_name_add>:
     e48:	push	{fp, lr}
     e4c:	mov	fp, sp
     e50:	sub	sp, sp, #16
     e54:	str	r0, [fp, #-4]
     e58:	str	r1, [sp, #8]
     e5c:	ldr	r0, [sp, #8]
     e60:	cmp	r0, #0
     e64:	beq	e9c <MyGame_Example_Monster_name_add+0x54>
     e68:	ldr	r0, [fp, #-4]
     e6c:	movw	r1, #3
     e70:	bl	0 <flatcc_builder_table_add_offset>
     e74:	str	r0, [sp, #4]
     e78:	movw	r1, #0
     e7c:	cmp	r0, r1
     e80:	beq	e9c <MyGame_Example_Monster_name_add+0x54>
     e84:	ldr	r0, [sp, #8]
     e88:	ldr	r1, [sp, #4]
     e8c:	str	r0, [r1]
     e90:	movw	r0, #0
     e94:	str	r0, [sp]
     e98:	b	ea8 <MyGame_Example_Monster_name_add+0x60>
     e9c:	mvn	r0, #0
     ea0:	str	r0, [sp]
     ea4:	b	ea8 <MyGame_Example_Monster_name_add+0x60>
     ea8:	ldr	r0, [sp]
     eac:	mov	sp, fp
     eb0:	pop	{fp, pc}

00000eb4 <MyGame_Example_Monster_vec_start>:
     eb4:	push	{fp, lr}
     eb8:	mov	fp, sp
     ebc:	sub	sp, sp, #8
     ec0:	str	r0, [sp, #4]
     ec4:	ldr	r0, [sp, #4]
     ec8:	bl	0 <flatcc_builder_start_offset_vector>
     ecc:	mov	sp, fp
     ed0:	pop	{fp, pc}

00000ed4 <create_monster>:
     ed4:	push	{fp, lr}
     ed8:	mov	fp, sp
     edc:	sub	sp, sp, #24
     ee0:	str	r0, [fp, #-4]
     ee4:	ldr	r0, [fp, #-4]
     ee8:	bl	e24 <MyGame_Example_Monster_start>
     eec:	ldr	r1, [fp, #-4]
     ef0:	str	r0, [sp, #12]
     ef4:	mov	r0, r1
     ef8:	bl	1010 <MyGame_Example_Monster_name_start>
     efc:	movw	r1, #0
     f00:	str	r1, [fp, #-8]
     f04:	ldr	r0, [fp, #-8]
     f08:	cmp	r0, #100	; 0x64
     f0c:	bcs	f34 <create_monster+0x60>
     f10:	ldr	r0, [fp, #-4]
     f14:	movw	r1, #0
     f18:	movt	r1, #0
     f1c:	movw	r2, #7
     f20:	bl	1030 <flatbuffers_string_append>
     f24:	ldr	r0, [fp, #-8]
     f28:	add	r0, r0, #1
     f2c:	str	r0, [fp, #-8]
     f30:	b	f04 <create_monster+0x30>
     f34:	ldr	r0, [fp, #-4]
     f38:	bl	1060 <MyGame_Example_Monster_name_end>
     f3c:	ldr	r1, [fp, #-4]
     f40:	str	r0, [sp, #8]
     f44:	mov	r0, r1
     f48:	bl	10a0 <MyGame_Example_Monster_inventory_start>
     f4c:	movw	r1, #0
     f50:	str	r1, [fp, #-8]
     f54:	ldr	r0, [fp, #-8]
     f58:	cmp	r0, #100	; 0x64
     f5c:	bcs	f84 <create_monster+0xb0>
     f60:	ldr	r0, [fp, #-4]
     f64:	movw	r1, #0
     f68:	movt	r1, #0
     f6c:	movw	r2, #1000	; 0x3e8
     f70:	bl	10c0 <flatbuffers_uint8_vec_append>
     f74:	ldr	r0, [fp, #-8]
     f78:	add	r0, r0, #1
     f7c:	str	r0, [fp, #-8]
     f80:	b	f54 <create_monster+0x80>
     f84:	ldr	r0, [fp, #-4]
     f88:	bl	10f0 <MyGame_Example_Monster_inventory_end>
     f8c:	ldr	r1, [fp, #-4]
     f90:	str	r0, [sp, #4]
     f94:	mov	r0, r1
     f98:	bl	1130 <MyGame_Example_Monster_end>
     f9c:	mov	sp, fp
     fa0:	pop	{fp, pc}

00000fa4 <MyGame_Example_Monster_vec_push>:
     fa4:	push	{fp, lr}
     fa8:	mov	fp, sp
     fac:	sub	sp, sp, #16
     fb0:	str	r0, [fp, #-4]
     fb4:	str	r1, [sp, #8]
     fb8:	ldr	r0, [sp, #8]
     fbc:	cmp	r0, #0
     fc0:	beq	fd8 <MyGame_Example_Monster_vec_push+0x34>
     fc4:	ldr	r0, [fp, #-4]
     fc8:	ldr	r1, [sp, #8]
     fcc:	bl	0 <flatcc_builder_offset_vector_push>
     fd0:	str	r0, [sp, #4]
     fd4:	b	fe4 <MyGame_Example_Monster_vec_push+0x40>
     fd8:	movw	r0, #0
     fdc:	str	r0, [sp, #4]
     fe0:	b	fe4 <MyGame_Example_Monster_vec_push+0x40>
     fe4:	ldr	r0, [sp, #4]
     fe8:	mov	sp, fp
     fec:	pop	{fp, pc}

00000ff0 <MyGame_Example_Monster_vec_end>:
     ff0:	push	{fp, lr}
     ff4:	mov	fp, sp
     ff8:	sub	sp, sp, #8
     ffc:	str	r0, [sp, #4]
    1000:	ldr	r0, [sp, #4]
    1004:	bl	0 <flatcc_builder_end_offset_vector>
    1008:	mov	sp, fp
    100c:	pop	{fp, pc}

00001010 <MyGame_Example_Monster_name_start>:
    1010:	push	{fp, lr}
    1014:	mov	fp, sp
    1018:	sub	sp, sp, #8
    101c:	str	r0, [sp, #4]
    1020:	ldr	r0, [sp, #4]
    1024:	bl	0 <flatcc_builder_start_string>
    1028:	mov	sp, fp
    102c:	pop	{fp, pc}

00001030 <flatbuffers_string_append>:
    1030:	push	{fp, lr}
    1034:	mov	fp, sp
    1038:	sub	sp, sp, #16
    103c:	str	r0, [fp, #-4]
    1040:	str	r1, [sp, #8]
    1044:	str	r2, [sp, #4]
    1048:	ldr	r0, [fp, #-4]
    104c:	ldr	r1, [sp, #8]
    1050:	ldr	r2, [sp, #4]
    1054:	bl	0 <flatcc_builder_append_string>
    1058:	mov	sp, fp
    105c:	pop	{fp, pc}

00001060 <MyGame_Example_Monster_name_end>:
    1060:	push	{fp, lr}
    1064:	mov	fp, sp
    1068:	sub	sp, sp, #16
    106c:	str	r0, [fp, #-4]
    1070:	ldr	r0, [fp, #-4]
    1074:	ldr	r1, [fp, #-4]
    1078:	str	r0, [sp, #8]
    107c:	mov	r0, r1
    1080:	bl	0 <flatcc_builder_end_string>
    1084:	ldr	r1, [sp, #8]
    1088:	str	r0, [sp, #4]
    108c:	mov	r0, r1
    1090:	ldr	r1, [sp, #4]
    1094:	bl	e48 <MyGame_Example_Monster_name_add>
    1098:	mov	sp, fp
    109c:	pop	{fp, pc}

000010a0 <MyGame_Example_Monster_inventory_start>:
    10a0:	push	{fp, lr}
    10a4:	mov	fp, sp
    10a8:	sub	sp, sp, #8
    10ac:	str	r0, [sp, #4]
    10b0:	ldr	r0, [sp, #4]
    10b4:	bl	1190 <flatbuffers_uint8_vec_start>
    10b8:	mov	sp, fp
    10bc:	pop	{fp, pc}

000010c0 <flatbuffers_uint8_vec_append>:
    10c0:	push	{fp, lr}
    10c4:	mov	fp, sp
    10c8:	sub	sp, sp, #16
    10cc:	str	r0, [fp, #-4]
    10d0:	str	r1, [sp, #8]
    10d4:	str	r2, [sp, #4]
    10d8:	ldr	r0, [fp, #-4]
    10dc:	ldr	r1, [sp, #8]
    10e0:	ldr	r2, [sp, #4]
    10e4:	bl	0 <flatcc_builder_append_vector>
    10e8:	mov	sp, fp
    10ec:	pop	{fp, pc}

000010f0 <MyGame_Example_Monster_inventory_end>:
    10f0:	push	{fp, lr}
    10f4:	mov	fp, sp
    10f8:	sub	sp, sp, #16
    10fc:	str	r0, [fp, #-4]
    1100:	ldr	r0, [fp, #-4]
    1104:	ldr	r1, [fp, #-4]
    1108:	str	r0, [sp, #8]
    110c:	mov	r0, r1
    1110:	bl	122c <flatbuffers_uint8_vec_end>
    1114:	ldr	r1, [sp, #8]
    1118:	str	r0, [sp, #4]
    111c:	mov	r0, r1
    1120:	ldr	r1, [sp, #4]
    1124:	bl	11c0 <MyGame_Example_Monster_inventory_add>
    1128:	mov	sp, fp
    112c:	pop	{fp, pc}

00001130 <MyGame_Example_Monster_end>:
    1130:	push	{fp, lr}
    1134:	mov	fp, sp
    1138:	sub	sp, sp, #8
    113c:	str	r0, [sp, #4]
    1140:	ldr	r0, [sp, #4]
    1144:	movw	r1, #0
    1148:	movt	r1, #0
    114c:	movw	r2, #1
    1150:	bl	0 <flatcc_builder_check_required>
    1154:	cmp	r0, #0
    1158:	beq	1160 <MyGame_Example_Monster_end+0x30>
    115c:	b	1180 <MyGame_Example_Monster_end+0x50>
    1160:	movw	r0, #0
    1164:	movt	r0, #0
    1168:	movw	r1, #0
    116c:	movt	r1, #0
    1170:	movw	r2, #235	; 0xeb
    1174:	movw	r3, #0
    1178:	movt	r3, #0
    117c:	bl	0 <__assert_fail>
    1180:	ldr	r0, [sp, #4]
    1184:	bl	0 <flatcc_builder_end_table>
    1188:	mov	sp, fp
    118c:	pop	{fp, pc}

00001190 <flatbuffers_uint8_vec_start>:
    1190:	push	{fp, lr}
    1194:	mov	fp, sp
    1198:	sub	sp, sp, #8
    119c:	str	r0, [sp, #4]
    11a0:	ldr	r0, [sp, #4]
    11a4:	movw	r1, #1
    11a8:	movw	r2, #1
    11ac:	uxth	r2, r2
    11b0:	mvn	r3, #0
    11b4:	bl	0 <flatcc_builder_start_vector>
    11b8:	mov	sp, fp
    11bc:	pop	{fp, pc}

000011c0 <MyGame_Example_Monster_inventory_add>:
    11c0:	push	{fp, lr}
    11c4:	mov	fp, sp
    11c8:	sub	sp, sp, #16
    11cc:	str	r0, [fp, #-4]
    11d0:	str	r1, [sp, #8]
    11d4:	ldr	r0, [sp, #8]
    11d8:	cmp	r0, #0
    11dc:	beq	1214 <MyGame_Example_Monster_inventory_add+0x54>
    11e0:	ldr	r0, [fp, #-4]
    11e4:	movw	r1, #5
    11e8:	bl	0 <flatcc_builder_table_add_offset>
    11ec:	str	r0, [sp, #4]
    11f0:	movw	r1, #0
    11f4:	cmp	r0, r1
    11f8:	beq	1214 <MyGame_Example_Monster_inventory_add+0x54>
    11fc:	ldr	r0, [sp, #8]
    1200:	ldr	r1, [sp, #4]
    1204:	str	r0, [r1]
    1208:	movw	r0, #0
    120c:	str	r0, [sp]
    1210:	b	1220 <MyGame_Example_Monster_inventory_add+0x60>
    1214:	mvn	r0, #0
    1218:	str	r0, [sp]
    121c:	b	1220 <MyGame_Example_Monster_inventory_add+0x60>
    1220:	ldr	r0, [sp]
    1224:	mov	sp, fp
    1228:	pop	{fp, pc}

0000122c <flatbuffers_uint8_vec_end>:
    122c:	push	{fp, lr}
    1230:	mov	fp, sp
    1234:	sub	sp, sp, #8
    1238:	str	r0, [sp, #4]
    123c:	ldr	r0, [sp, #4]
    1240:	bl	0 <flatcc_builder_end_vector>
    1244:	mov	sp, fp
    1248:	pop	{fp, pc}

0000124c <flatbuffers_buffer_end>:
    124c:	push	{fp, lr}
    1250:	mov	fp, sp
    1254:	sub	sp, sp, #8
    1258:	str	r0, [sp, #4]
    125c:	str	r1, [sp]
    1260:	ldr	r0, [sp, #4]
    1264:	ldr	r1, [sp]
    1268:	bl	0 <flatcc_builder_end_buffer>
    126c:	mov	sp, fp
    1270:	pop	{fp, pc}

00001274 <flatbuffers_has_identifier>:
    1274:	push	{fp, lr}
    1278:	mov	fp, sp
    127c:	sub	sp, sp, #32
    1280:	str	r0, [fp, #-8]
    1284:	str	r1, [fp, #-12]
    1288:	movw	r0, #0
    128c:	str	r0, [sp, #12]
    1290:	ldr	r1, [fp, #-12]
    1294:	cmp	r1, r0
    1298:	bne	12a8 <flatbuffers_has_identifier+0x34>
    129c:	movw	r0, #1
    12a0:	str	r0, [fp, #-4]
    12a4:	b	1314 <flatbuffers_has_identifier+0xa0>
    12a8:	add	r0, sp, #12
    12ac:	ldr	r1, [fp, #-12]
    12b0:	movw	r2, #4
    12b4:	bl	0 <strncpy>
    12b8:	ldr	r1, [sp, #12]
    12bc:	str	r0, [sp, #8]
    12c0:	mov	r0, r1
    12c4:	bl	1344 <__flatbuffers_thash_cast_from_le>
    12c8:	str	r0, [sp, #12]
    12cc:	ldr	r0, [fp, #-8]
    12d0:	add	r0, r0, #4
    12d4:	bl	1358 <__flatbuffers_thash_read_from_pe>
    12d8:	str	r0, [sp, #16]
    12dc:	ldr	r0, [sp, #12]
    12e0:	cmp	r0, #0
    12e4:	movw	r0, #1
    12e8:	str	r0, [sp, #4]
    12ec:	beq	1308 <flatbuffers_has_identifier+0x94>
    12f0:	ldr	r0, [sp, #16]
    12f4:	ldr	r1, [sp, #12]
    12f8:	cmp	r0, r1
    12fc:	movw	r0, #0
    1300:	moveq	r0, #1
    1304:	str	r0, [sp, #4]
    1308:	ldr	r0, [sp, #4]
    130c:	and	r0, r0, #1
    1310:	str	r0, [fp, #-4]
    1314:	ldr	r0, [fp, #-4]
    1318:	mov	sp, fp
    131c:	pop	{fp, pc}

00001320 <__flatbuffers_uoffset_read_from_pe>:
    1320:	push	{fp, lr}
    1324:	mov	fp, sp
    1328:	sub	sp, sp, #8
    132c:	str	r0, [sp, #4]
    1330:	ldr	r0, [sp, #4]
    1334:	ldr	r0, [r0]
    1338:	bl	1390 <__flatbuffers_uoffset_cast_from_pe>
    133c:	mov	sp, fp
    1340:	pop	{fp, pc}

00001344 <__flatbuffers_thash_cast_from_le>:
    1344:	sub	sp, sp, #4
    1348:	str	r0, [sp]
    134c:	ldr	r0, [sp]
    1350:	add	sp, sp, #4
    1354:	bx	lr

00001358 <__flatbuffers_thash_read_from_pe>:
    1358:	push	{fp, lr}
    135c:	mov	fp, sp
    1360:	sub	sp, sp, #8
    1364:	str	r0, [sp, #4]
    1368:	ldr	r0, [sp, #4]
    136c:	ldr	r0, [r0]
    1370:	bl	137c <__flatbuffers_thash_cast_from_pe>
    1374:	mov	sp, fp
    1378:	pop	{fp, pc}

0000137c <__flatbuffers_thash_cast_from_pe>:
    137c:	sub	sp, sp, #4
    1380:	str	r0, [sp]
    1384:	ldr	r0, [sp]
    1388:	add	sp, sp, #4
    138c:	bx	lr

00001390 <__flatbuffers_uoffset_cast_from_pe>:
    1390:	sub	sp, sp, #4
    1394:	str	r0, [sp]
    1398:	ldr	r0, [sp]
    139c:	add	sp, sp, #4
    13a0:	bx	lr

000013a4 <__flatbuffers_soffset_read_from_pe>:
    13a4:	push	{fp, lr}
    13a8:	mov	fp, sp
    13ac:	sub	sp, sp, #8
    13b0:	str	r0, [sp, #4]
    13b4:	ldr	r0, [sp, #4]
    13b8:	ldr	r0, [r0]
    13bc:	bl	13f0 <__flatbuffers_soffset_cast_from_pe>
    13c0:	mov	sp, fp
    13c4:	pop	{fp, pc}

000013c8 <__flatbuffers_voffset_read_from_pe>:
    13c8:	push	{fp, lr}
    13cc:	mov	fp, sp
    13d0:	sub	sp, sp, #8
    13d4:	str	r0, [sp, #4]
    13d8:	ldr	r0, [sp, #4]
    13dc:	ldrh	r0, [r0]
    13e0:	bl	1404 <__flatbuffers_voffset_cast_from_pe>
    13e4:	uxth	r0, r0
    13e8:	mov	sp, fp
    13ec:	pop	{fp, pc}

000013f0 <__flatbuffers_soffset_cast_from_pe>:
    13f0:	sub	sp, sp, #4
    13f4:	str	r0, [sp]
    13f8:	ldr	r0, [sp]
    13fc:	add	sp, sp, #4
    1400:	bx	lr

00001404 <__flatbuffers_voffset_cast_from_pe>:
    1404:	sub	sp, sp, #4
    1408:	strh	r0, [sp, #2]
    140c:	ldrh	r0, [sp, #2]
    1410:	add	sp, sp, #4
    1414:	bx	lr

00001418 <MyGame_Example_Monster_inventory>:
    1418:	push	{fp, lr}
    141c:	mov	fp, sp
    1420:	sub	sp, sp, #32
    1424:	str	r0, [fp, #-8]
    1428:	movw	r0, #0
    142c:	strh	r0, [fp, #-14]
    1430:	ldr	r0, [fp, #-8]
    1434:	movw	r1, #0
    1438:	cmp	r0, r1
    143c:	beq	1448 <MyGame_Example_Monster_inventory+0x30>
    1440:	b	1444 <MyGame_Example_Monster_inventory+0x2c>
    1444:	b	1468 <MyGame_Example_Monster_inventory+0x50>
    1448:	movw	r0, #0
    144c:	movt	r0, #0
    1450:	movw	r1, #0
    1454:	movt	r1, #0
    1458:	movw	r2, #706	; 0x2c2
    145c:	movw	r3, #0
    1460:	movt	r3, #0
    1464:	bl	0 <__assert_fail>
    1468:	mov	r0, #5
    146c:	strh	r0, [sp, #16]
    1470:	ldr	r0, [fp, #-8]
    1474:	str	r0, [sp, #8]
    1478:	bl	13a4 <__flatbuffers_soffset_read_from_pe>
    147c:	ldr	r1, [sp, #8]
    1480:	sub	r0, r1, r0
    1484:	str	r0, [sp, #12]
    1488:	ldr	r0, [sp, #12]
    148c:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
    1490:	ldrh	r1, [sp, #16]
    1494:	add	r1, r1, #3
    1498:	lsl	r1, r1, #1
    149c:	cmp	r0, r1
    14a0:	bcc	14bc <MyGame_Example_Monster_inventory+0xa4>
    14a4:	ldr	r0, [sp, #12]
    14a8:	ldrh	r1, [sp, #16]
    14ac:	add	r0, r0, r1, lsl #1
    14b0:	add	r0, r0, #4
    14b4:	bl	13c8 <__flatbuffers_voffset_read_from_pe>
    14b8:	strh	r0, [fp, #-14]
    14bc:	ldrsh	r0, [fp, #-14]
    14c0:	cmp	r0, #0
    14c4:	beq	1500 <MyGame_Example_Monster_inventory+0xe8>
    14c8:	ldr	r0, [fp, #-8]
    14cc:	ldrh	r1, [fp, #-14]
    14d0:	add	r0, r0, r1
    14d4:	str	r0, [fp, #-12]
    14d8:	ldr	r0, [fp, #-12]
    14dc:	add	r0, r0, #4
    14e0:	ldr	r1, [fp, #-12]
    14e4:	str	r0, [sp, #4]
    14e8:	mov	r0, r1
    14ec:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
    14f0:	ldr	r1, [sp, #4]
    14f4:	add	r0, r1, r0
    14f8:	str	r0, [fp, #-4]
    14fc:	b	1508 <MyGame_Example_Monster_inventory+0xf0>
    1500:	movw	r0, #0
    1504:	str	r0, [fp, #-4]
    1508:	ldr	r0, [fp, #-4]
    150c:	mov	sp, fp
    1510:	pop	{fp, pc}

00001514 <flatbuffers_string_len>:
    1514:	push	{fp, lr}
    1518:	mov	fp, sp
    151c:	sub	sp, sp, #8
    1520:	str	r0, [sp, #4]
    1524:	ldr	r0, [sp, #4]
    1528:	movw	r1, #0
    152c:	cmp	r0, r1
    1530:	beq	154c <flatbuffers_string_len+0x38>
    1534:	ldr	r0, [sp, #4]
    1538:	mvn	r1, #3
    153c:	add	r0, r0, r1
    1540:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
    1544:	str	r0, [sp]
    1548:	b	1558 <flatbuffers_string_len+0x44>
    154c:	movw	r0, #0
    1550:	str	r0, [sp]
    1554:	b	1558 <flatbuffers_string_len+0x44>
    1558:	ldr	r0, [sp]
    155c:	mov	sp, fp
    1560:	pop	{fp, pc}

00001564 <flatbuffers_uint8_vec_len>:
    1564:	push	{fp, lr}
    1568:	mov	fp, sp
    156c:	sub	sp, sp, #8
    1570:	str	r0, [sp, #4]
    1574:	ldr	r0, [sp, #4]
    1578:	bl	1584 <flatbuffers_vec_len>
    157c:	mov	sp, fp
    1580:	pop	{fp, pc}

00001584 <flatbuffers_vec_len>:
    1584:	push	{fp, lr}
    1588:	mov	fp, sp
    158c:	sub	sp, sp, #8
    1590:	str	r0, [sp, #4]
    1594:	ldr	r0, [sp, #4]
    1598:	movw	r1, #0
    159c:	cmp	r0, r1
    15a0:	beq	15bc <flatbuffers_vec_len+0x38>
    15a4:	ldr	r0, [sp, #4]
    15a8:	mvn	r1, #3
    15ac:	add	r0, r0, r1
    15b0:	bl	1320 <__flatbuffers_uoffset_read_from_pe>
    15b4:	str	r0, [sp]
    15b8:	b	15c8 <flatbuffers_vec_len+0x44>
    15bc:	movw	r0, #0
    15c0:	str	r0, [sp]
    15c4:	b	15c8 <flatbuffers_vec_len+0x44>
    15c8:	ldr	r0, [sp]
    15cc:	mov	sp, fp
    15d0:	pop	{fp, pc}
