
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_int8>:
       0:	ldr	r2, [r0, #4]
       4:	str	r4, [sp, #-8]!
       8:	add	r3, r0, r2, lsl #4
       c:	ldr	r3, [r3, #-8]
      10:	ldr	r3, [r3]
      14:	str	lr, [sp, #4]
      18:	cmp	r3, #101	; 0x65
      1c:	beq	70 <read_int8+0x70>
      20:	bhi	4c <read_int8+0x4c>
      24:	cmp	r3, #1
      28:	beq	8c <read_int8+0x8c>
      2c:	cmp	r3, #0
      30:	beq	9c <read_int8+0x9c>
      34:	cmp	r3, #100	; 0x64
      38:	bne	d8 <read_int8+0xd8>
      3c:	ldr	r4, [sp]
      40:	ldr	lr, [sp, #4]
      44:	add	sp, sp, #8
      48:	b	0 <coda_mem_cursor_read_int8>
      4c:	cmp	r3, #103	; 0x67
      50:	beq	ac <read_int8+0xac>
      54:	bcc	bc <read_int8+0xbc>
      58:	cmp	r3, #104	; 0x68
      5c:	bne	d8 <read_int8+0xd8>
      60:	ldr	r4, [sp]
      64:	ldr	lr, [sp, #4]
      68:	add	sp, sp, #8
      6c:	b	0 <coda_netcdf_cursor_read_int8>
      70:	mvn	r0, #10
      74:	mov	r1, #0
      78:	bl	0 <coda_set_error>
      7c:	ldr	r4, [sp]
      80:	add	sp, sp, #4
      84:	mvn	r0, #0
      88:	pop	{pc}		; (ldr pc, [sp], #4)
      8c:	ldr	r4, [sp]
      90:	ldr	lr, [sp, #4]
      94:	add	sp, sp, #8
      98:	b	0 <coda_bin_cursor_read_int8>
      9c:	ldr	r4, [sp]
      a0:	ldr	lr, [sp, #4]
      a4:	add	sp, sp, #8
      a8:	b	0 <coda_ascii_cursor_read_int8>
      ac:	ldr	r4, [sp]
      b0:	ldr	lr, [sp, #4]
      b4:	add	sp, sp, #8
      b8:	b	0 <coda_cdf_cursor_read_int8>
      bc:	mvn	r0, #12
      c0:	mov	r1, #0
      c4:	bl	0 <coda_set_error>
      c8:	ldr	r4, [sp]
      cc:	add	sp, sp, #4
      d0:	mvn	r0, #0
      d4:	pop	{pc}		; (ldr pc, [sp], #4)
      d8:	movw	r3, #0
      dc:	movt	r3, #0
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	movw	r0, #0
      ec:	movt	r0, #0
      f0:	movw	r2, #359	; 0x167
      f4:	bl	0 <__assert_fail>

000000f8 <read_uint8>:
      f8:	ldr	r2, [r0, #4]
      fc:	add	r3, r0, r2, lsl #4
     100:	ldr	r3, [r3, #-8]
     104:	ldr	r3, [r3]
     108:	cmp	r3, #100	; 0x64
     10c:	beq	160 <read_uint8+0x68>
     110:	str	r4, [sp, #-8]!
     114:	str	lr, [sp, #4]
     118:	bls	140 <read_uint8+0x48>
     11c:	cmp	r3, #102	; 0x66
     120:	beq	164 <read_uint8+0x6c>
     124:	bcc	180 <read_uint8+0x88>
     128:	cmp	r3, #103	; 0x67
     12c:	bne	1ac <read_uint8+0xb4>
     130:	ldr	r4, [sp]
     134:	ldr	lr, [sp, #4]
     138:	add	sp, sp, #8
     13c:	b	0 <coda_cdf_cursor_read_uint8>
     140:	cmp	r3, #0
     144:	beq	19c <read_uint8+0xa4>
     148:	cmp	r3, #1
     14c:	bne	1ac <read_uint8+0xb4>
     150:	ldr	r4, [sp]
     154:	ldr	lr, [sp, #4]
     158:	add	sp, sp, #8
     15c:	b	0 <coda_bin_cursor_read_uint8>
     160:	b	0 <coda_mem_cursor_read_uint8>
     164:	mvn	r0, #12
     168:	mov	r1, #0
     16c:	bl	0 <coda_set_error>
     170:	ldr	r4, [sp]
     174:	add	sp, sp, #4
     178:	mvn	r0, #0
     17c:	pop	{pc}		; (ldr pc, [sp], #4)
     180:	mvn	r0, #10
     184:	mov	r1, #0
     188:	bl	0 <coda_set_error>
     18c:	ldr	r4, [sp]
     190:	add	sp, sp, #4
     194:	mvn	r0, #0
     198:	pop	{pc}		; (ldr pc, [sp], #4)
     19c:	ldr	r4, [sp]
     1a0:	ldr	lr, [sp, #4]
     1a4:	add	sp, sp, #8
     1a8:	b	0 <coda_ascii_cursor_read_uint8>
     1ac:	movw	r1, #0
     1b0:	movt	r1, #0
     1b4:	ldr	r3, [pc, #12]	; 1c8 <read_uint8+0xd0>
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	movw	r2, #394	; 0x18a
     1c4:	bl	0 <__assert_fail>
     1c8:	.word	0x0000000c

000001cc <read_int16>:
     1cc:	ldr	r2, [r0, #4]
     1d0:	str	r4, [sp, #-8]!
     1d4:	add	r3, r0, r2, lsl #4
     1d8:	ldr	r3, [r3, #-8]
     1dc:	ldr	r3, [r3]
     1e0:	str	lr, [sp, #4]
     1e4:	cmp	r3, #101	; 0x65
     1e8:	beq	254 <read_int16+0x88>
     1ec:	bls	214 <read_int16+0x48>
     1f0:	cmp	r3, #103	; 0x67
     1f4:	beq	270 <read_int16+0xa4>
     1f8:	bcc	280 <read_int16+0xb4>
     1fc:	cmp	r3, #104	; 0x68
     200:	bne	23c <read_int16+0x70>
     204:	ldr	r4, [sp]
     208:	ldr	lr, [sp, #4]
     20c:	add	sp, sp, #8
     210:	b	0 <coda_netcdf_cursor_read_int16>
     214:	cmp	r3, #1
     218:	beq	29c <read_int16+0xd0>
     21c:	cmp	r3, #0
     220:	beq	2ac <read_int16+0xe0>
     224:	cmp	r3, #100	; 0x64
     228:	bne	244 <read_int16+0x78>
     22c:	ldr	r4, [sp]
     230:	ldr	lr, [sp, #4]
     234:	add	sp, sp, #8
     238:	b	0 <coda_mem_cursor_read_int16>
     23c:	cmp	r3, #105	; 0x69
     240:	beq	2bc <read_int16+0xf0>
     244:	ldr	r4, [sp]
     248:	add	sp, sp, #4
     24c:	mov	r0, #0
     250:	pop	{pc}		; (ldr pc, [sp], #4)
     254:	mvn	r0, #10
     258:	mov	r1, #0
     25c:	bl	0 <coda_set_error>
     260:	ldr	r4, [sp]
     264:	add	sp, sp, #4
     268:	mvn	r0, #0
     26c:	pop	{pc}		; (ldr pc, [sp], #4)
     270:	ldr	r4, [sp]
     274:	ldr	lr, [sp, #4]
     278:	add	sp, sp, #8
     27c:	b	0 <coda_cdf_cursor_read_int16>
     280:	mvn	r0, #12
     284:	mov	r1, #0
     288:	bl	0 <coda_set_error>
     28c:	ldr	r4, [sp]
     290:	add	sp, sp, #4
     294:	mvn	r0, #0
     298:	pop	{pc}		; (ldr pc, [sp], #4)
     29c:	ldr	r4, [sp]
     2a0:	ldr	lr, [sp, #4]
     2a4:	add	sp, sp, #8
     2a8:	b	0 <coda_bin_cursor_read_int16>
     2ac:	ldr	r4, [sp]
     2b0:	ldr	lr, [sp, #4]
     2b4:	add	sp, sp, #8
     2b8:	b	0 <coda_ascii_cursor_read_int16>
     2bc:	movw	r1, #0
     2c0:	movt	r1, #0
     2c4:	ldr	r3, [pc, #12]	; 2d8 <read_int16+0x10c>
     2c8:	movw	r0, #0
     2cc:	movt	r0, #0
     2d0:	movw	r2, #427	; 0x1ab
     2d4:	bl	0 <__assert_fail>
     2d8:	.word	0x00000018

000002dc <read_uint16>:
     2dc:	ldr	r2, [r0, #4]
     2e0:	add	r3, r0, r2, lsl #4
     2e4:	ldr	r3, [r3, #-8]
     2e8:	ldr	r3, [r3]
     2ec:	cmp	r3, #100	; 0x64
     2f0:	beq	344 <read_uint16+0x68>
     2f4:	str	r4, [sp, #-8]!
     2f8:	str	lr, [sp, #4]
     2fc:	bls	324 <read_uint16+0x48>
     300:	cmp	r3, #102	; 0x66
     304:	beq	348 <read_uint16+0x6c>
     308:	bcc	364 <read_uint16+0x88>
     30c:	cmp	r3, #103	; 0x67
     310:	bne	390 <read_uint16+0xb4>
     314:	ldr	r4, [sp]
     318:	ldr	lr, [sp, #4]
     31c:	add	sp, sp, #8
     320:	b	0 <coda_cdf_cursor_read_uint16>
     324:	cmp	r3, #0
     328:	beq	380 <read_uint16+0xa4>
     32c:	cmp	r3, #1
     330:	bne	390 <read_uint16+0xb4>
     334:	ldr	r4, [sp]
     338:	ldr	lr, [sp, #4]
     33c:	add	sp, sp, #8
     340:	b	0 <coda_bin_cursor_read_uint16>
     344:	b	0 <coda_mem_cursor_read_uint16>
     348:	mvn	r0, #12
     34c:	mov	r1, #0
     350:	bl	0 <coda_set_error>
     354:	ldr	r4, [sp]
     358:	add	sp, sp, #4
     35c:	mvn	r0, #0
     360:	pop	{pc}		; (ldr pc, [sp], #4)
     364:	mvn	r0, #10
     368:	mov	r1, #0
     36c:	bl	0 <coda_set_error>
     370:	ldr	r4, [sp]
     374:	add	sp, sp, #4
     378:	mvn	r0, #0
     37c:	pop	{pc}		; (ldr pc, [sp], #4)
     380:	ldr	r4, [sp]
     384:	ldr	lr, [sp, #4]
     388:	add	sp, sp, #8
     38c:	b	0 <coda_ascii_cursor_read_uint16>
     390:	movw	r1, #0
     394:	movt	r1, #0
     398:	ldr	r3, [pc, #12]	; 3ac <read_uint16+0xd0>
     39c:	movw	r0, #0
     3a0:	movt	r0, #0
     3a4:	movw	r2, #465	; 0x1d1
     3a8:	bl	0 <__assert_fail>
     3ac:	.word	0x00000024

000003b0 <read_int32>:
     3b0:	ldr	r2, [r0, #4]
     3b4:	str	r4, [sp, #-8]!
     3b8:	add	r3, r0, r2, lsl #4
     3bc:	ldr	r3, [r3, #-8]
     3c0:	ldr	r3, [r3]
     3c4:	str	lr, [sp, #4]
     3c8:	cmp	r3, #101	; 0x65
     3cc:	beq	438 <read_int32+0x88>
     3d0:	bls	3f8 <read_int32+0x48>
     3d4:	cmp	r3, #103	; 0x67
     3d8:	beq	454 <read_int32+0xa4>
     3dc:	bcc	464 <read_int32+0xb4>
     3e0:	cmp	r3, #104	; 0x68
     3e4:	bne	420 <read_int32+0x70>
     3e8:	ldr	r4, [sp]
     3ec:	ldr	lr, [sp, #4]
     3f0:	add	sp, sp, #8
     3f4:	b	0 <coda_netcdf_cursor_read_int32>
     3f8:	cmp	r3, #1
     3fc:	beq	480 <read_int32+0xd0>
     400:	cmp	r3, #0
     404:	beq	490 <read_int32+0xe0>
     408:	cmp	r3, #100	; 0x64
     40c:	bne	428 <read_int32+0x78>
     410:	ldr	r4, [sp]
     414:	ldr	lr, [sp, #4]
     418:	add	sp, sp, #8
     41c:	b	0 <coda_mem_cursor_read_int32>
     420:	cmp	r3, #105	; 0x69
     424:	beq	4a0 <read_int32+0xf0>
     428:	ldr	r4, [sp]
     42c:	add	sp, sp, #4
     430:	mov	r0, #0
     434:	pop	{pc}		; (ldr pc, [sp], #4)
     438:	mvn	r0, #10
     43c:	mov	r1, #0
     440:	bl	0 <coda_set_error>
     444:	ldr	r4, [sp]
     448:	add	sp, sp, #4
     44c:	mvn	r0, #0
     450:	pop	{pc}		; (ldr pc, [sp], #4)
     454:	ldr	r4, [sp]
     458:	ldr	lr, [sp, #4]
     45c:	add	sp, sp, #8
     460:	b	0 <coda_cdf_cursor_read_int32>
     464:	mvn	r0, #12
     468:	mov	r1, #0
     46c:	bl	0 <coda_set_error>
     470:	ldr	r4, [sp]
     474:	add	sp, sp, #4
     478:	mvn	r0, #0
     47c:	pop	{pc}		; (ldr pc, [sp], #4)
     480:	ldr	r4, [sp]
     484:	ldr	lr, [sp, #4]
     488:	add	sp, sp, #8
     48c:	b	0 <coda_bin_cursor_read_int32>
     490:	ldr	r4, [sp]
     494:	ldr	lr, [sp, #4]
     498:	add	sp, sp, #8
     49c:	b	0 <coda_ascii_cursor_read_int32>
     4a0:	movw	r1, #0
     4a4:	movt	r1, #0
     4a8:	ldr	r3, [pc, #12]	; 4bc <read_int32+0x10c>
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	movw	r2, #499	; 0x1f3
     4b8:	bl	0 <__assert_fail>
     4bc:	.word	0x00000030

000004c0 <read_uint32>:
     4c0:	ldr	r2, [r0, #4]
     4c4:	add	r3, r0, r2, lsl #4
     4c8:	ldr	r3, [r3, #-8]
     4cc:	ldr	r3, [r3]
     4d0:	cmp	r3, #100	; 0x64
     4d4:	beq	528 <read_uint32+0x68>
     4d8:	str	r4, [sp, #-8]!
     4dc:	str	lr, [sp, #4]
     4e0:	bls	508 <read_uint32+0x48>
     4e4:	cmp	r3, #102	; 0x66
     4e8:	beq	52c <read_uint32+0x6c>
     4ec:	bcc	548 <read_uint32+0x88>
     4f0:	cmp	r3, #103	; 0x67
     4f4:	bne	574 <read_uint32+0xb4>
     4f8:	ldr	r4, [sp]
     4fc:	ldr	lr, [sp, #4]
     500:	add	sp, sp, #8
     504:	b	0 <coda_cdf_cursor_read_uint32>
     508:	cmp	r3, #0
     50c:	beq	564 <read_uint32+0xa4>
     510:	cmp	r3, #1
     514:	bne	574 <read_uint32+0xb4>
     518:	ldr	r4, [sp]
     51c:	ldr	lr, [sp, #4]
     520:	add	sp, sp, #8
     524:	b	0 <coda_bin_cursor_read_uint32>
     528:	b	0 <coda_mem_cursor_read_uint32>
     52c:	mvn	r0, #12
     530:	mov	r1, #0
     534:	bl	0 <coda_set_error>
     538:	ldr	r4, [sp]
     53c:	add	sp, sp, #4
     540:	mvn	r0, #0
     544:	pop	{pc}		; (ldr pc, [sp], #4)
     548:	mvn	r0, #10
     54c:	mov	r1, #0
     550:	bl	0 <coda_set_error>
     554:	ldr	r4, [sp]
     558:	add	sp, sp, #4
     55c:	mvn	r0, #0
     560:	pop	{pc}		; (ldr pc, [sp], #4)
     564:	ldr	r4, [sp]
     568:	ldr	lr, [sp, #4]
     56c:	add	sp, sp, #8
     570:	b	0 <coda_ascii_cursor_read_uint32>
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	ldr	r3, [pc, #12]	; 590 <read_uint32+0xd0>
     580:	movw	r0, #0
     584:	movt	r0, #0
     588:	movw	r2, #537	; 0x219
     58c:	bl	0 <__assert_fail>
     590:	.word	0x0000003c

00000594 <read_int64>:
     594:	ldr	r2, [r0, #4]
     598:	add	r3, r0, r2, lsl #4
     59c:	ldr	r3, [r3, #-8]
     5a0:	ldr	r3, [r3]
     5a4:	cmp	r3, #100	; 0x64
     5a8:	beq	5fc <read_int64+0x68>
     5ac:	str	r4, [sp, #-8]!
     5b0:	str	lr, [sp, #4]
     5b4:	bls	5dc <read_int64+0x48>
     5b8:	cmp	r3, #102	; 0x66
     5bc:	beq	600 <read_int64+0x6c>
     5c0:	bcc	61c <read_int64+0x88>
     5c4:	cmp	r3, #103	; 0x67
     5c8:	bne	648 <read_int64+0xb4>
     5cc:	ldr	r4, [sp]
     5d0:	ldr	lr, [sp, #4]
     5d4:	add	sp, sp, #8
     5d8:	b	0 <coda_cdf_cursor_read_int64>
     5dc:	cmp	r3, #0
     5e0:	beq	638 <read_int64+0xa4>
     5e4:	cmp	r3, #1
     5e8:	bne	648 <read_int64+0xb4>
     5ec:	ldr	r4, [sp]
     5f0:	ldr	lr, [sp, #4]
     5f4:	add	sp, sp, #8
     5f8:	b	0 <coda_bin_cursor_read_int64>
     5fc:	b	0 <coda_mem_cursor_read_int64>
     600:	mvn	r0, #12
     604:	mov	r1, #0
     608:	bl	0 <coda_set_error>
     60c:	ldr	r4, [sp]
     610:	add	sp, sp, #4
     614:	mvn	r0, #0
     618:	pop	{pc}		; (ldr pc, [sp], #4)
     61c:	mvn	r0, #10
     620:	mov	r1, #0
     624:	bl	0 <coda_set_error>
     628:	ldr	r4, [sp]
     62c:	add	sp, sp, #4
     630:	mvn	r0, #0
     634:	pop	{pc}		; (ldr pc, [sp], #4)
     638:	ldr	r4, [sp]
     63c:	ldr	lr, [sp, #4]
     640:	add	sp, sp, #8
     644:	b	0 <coda_ascii_cursor_read_int64>
     648:	movw	r1, #0
     64c:	movt	r1, #0
     650:	ldr	r3, [pc, #12]	; 664 <read_int64+0xd0>
     654:	movw	r0, #0
     658:	movt	r0, #0
     65c:	mov	r2, #572	; 0x23c
     660:	bl	0 <__assert_fail>
     664:	.word	0x00000048

00000668 <read_float>:
     668:	ldr	r2, [r0, #4]
     66c:	str	r4, [sp, #-8]!
     670:	add	r3, r0, r2, lsl #4
     674:	ldr	r3, [r3, #-8]
     678:	ldr	r3, [r3]
     67c:	str	lr, [sp, #4]
     680:	cmp	r3, #101	; 0x65
     684:	beq	6e0 <read_float+0x78>
     688:	bls	6b8 <read_float+0x50>
     68c:	cmp	r3, #103	; 0x67
     690:	beq	6fc <read_float+0x94>
     694:	bcc	70c <read_float+0xa4>
     698:	cmp	r3, #104	; 0x68
     69c:	beq	728 <read_float+0xc0>
     6a0:	cmp	r3, #105	; 0x69
     6a4:	bne	758 <read_float+0xf0>
     6a8:	ldr	r4, [sp]
     6ac:	ldr	lr, [sp, #4]
     6b0:	add	sp, sp, #8
     6b4:	b	0 <coda_grib_cursor_read_float>
     6b8:	cmp	r3, #1
     6bc:	beq	738 <read_float+0xd0>
     6c0:	cmp	r3, #0
     6c4:	beq	748 <read_float+0xe0>
     6c8:	cmp	r3, #100	; 0x64
     6cc:	bne	758 <read_float+0xf0>
     6d0:	ldr	r4, [sp]
     6d4:	ldr	lr, [sp, #4]
     6d8:	add	sp, sp, #8
     6dc:	b	0 <coda_mem_cursor_read_float>
     6e0:	mvn	r0, #10
     6e4:	mov	r1, #0
     6e8:	bl	0 <coda_set_error>
     6ec:	ldr	r4, [sp]
     6f0:	add	sp, sp, #4
     6f4:	mvn	r0, #0
     6f8:	pop	{pc}		; (ldr pc, [sp], #4)
     6fc:	ldr	r4, [sp]
     700:	ldr	lr, [sp, #4]
     704:	add	sp, sp, #8
     708:	b	0 <coda_cdf_cursor_read_float>
     70c:	mvn	r0, #12
     710:	mov	r1, #0
     714:	bl	0 <coda_set_error>
     718:	ldr	r4, [sp]
     71c:	add	sp, sp, #4
     720:	mvn	r0, #0
     724:	pop	{pc}		; (ldr pc, [sp], #4)
     728:	ldr	r4, [sp]
     72c:	ldr	lr, [sp, #4]
     730:	add	sp, sp, #8
     734:	b	0 <coda_netcdf_cursor_read_float>
     738:	ldr	r4, [sp]
     73c:	ldr	lr, [sp, #4]
     740:	add	sp, sp, #8
     744:	b	0 <coda_bin_cursor_read_float>
     748:	ldr	r4, [sp]
     74c:	ldr	lr, [sp, #4]
     750:	add	sp, sp, #8
     754:	b	0 <coda_ascii_cursor_read_float>
     758:	movw	r1, #0
     75c:	movt	r1, #0
     760:	ldr	r3, [pc, #12]	; 774 <read_float+0x10c>
     764:	movw	r0, #0
     768:	movt	r0, #0
     76c:	movw	r2, #642	; 0x282
     770:	bl	0 <__assert_fail>
     774:	.word	0x00000054

00000778 <read_time>:
     778:	strd	r4, [sp, #-12]!
     77c:	mov	r2, #520	; 0x208
     780:	mov	r4, r0
     784:	str	lr, [sp, #8]
     788:	sub	sp, sp, #524	; 0x20c
     78c:	mov	r5, r1
     790:	mov	r1, r0
     794:	mov	r0, sp
     798:	bl	0 <memcpy>
     79c:	ldr	r3, [r4, #4]
     7a0:	mov	r0, sp
     7a4:	add	r4, r4, r3, lsl #4
     7a8:	ldr	r4, [r4, #-8]
     7ac:	ldr	r3, [r4]
     7b0:	cmp	r3, #99	; 0x63
     7b4:	ldrhi	r4, [r4, #4]
     7b8:	bl	0 <coda_cursor_use_base_type_of_special_type>
     7bc:	cmp	r0, #0
     7c0:	bne	7e4 <read_time+0x6c>
     7c4:	mov	r2, r5
     7c8:	mov	r1, sp
     7cc:	ldr	r0, [r4, #52]	; 0x34
     7d0:	bl	0 <coda_expression_eval_float>
     7d4:	add	sp, sp, #524	; 0x20c
     7d8:	ldrd	r4, [sp]
     7dc:	add	sp, sp, #8
     7e0:	pop	{pc}		; (ldr pc, [sp], #4)
     7e4:	mvn	r0, #0
     7e8:	b	7d4 <read_time+0x5c>

000007ec <transpose_array>:
     7ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
     7f0:	strd	r6, [sp, #8]
     7f4:	mov	r6, r2
     7f8:	strd	r8, [sp, #16]
     7fc:	strd	sl, [sp, #24]
     800:	str	lr, [sp, #32]
     804:	sub	sp, sp, #164	; 0xa4
     808:	add	r5, sp, #20
     80c:	mov	r2, r5
     810:	str	r1, [sp, #8]
     814:	add	r1, sp, #16
     818:	bl	0 <coda_cursor_get_array_dim>
     81c:	subs	r4, r0, #0
     820:	bne	b54 <transpose_array+0x368>
     824:	ldr	r9, [sp, #16]
     828:	cmp	r9, #1
     82c:	ble	9ac <transpose_array+0x1c0>
     830:	sub	r3, r9, #-1073741823	; 0xc0000001
     834:	add	r1, sp, #16
     838:	lsl	r2, r3, #2
     83c:	add	ip, sp, #84	; 0x54
     840:	add	r0, sp, #120	; 0x78
     844:	mov	r7, #1
     848:	mov	r8, r4
     84c:	add	r3, r5, r2
     850:	cmp	r3, r5
     854:	ldr	sl, [r1, #4]!
     858:	str	r8, [ip, #4]!
     85c:	ldr	lr, [r3], #-4
     860:	mul	r7, sl, r7
     864:	str	lr, [r0, #4]!
     868:	bne	850 <transpose_array+0x64>
     86c:	cmp	r7, #1
     870:	ble	9ac <transpose_array+0x1c0>
     874:	lsl	r9, r9, #2
     878:	add	r3, sp, #160	; 0xa0
     87c:	mov	lr, #1
     880:	add	ip, sp, #52	; 0x34
     884:	mov	r1, lr
     888:	add	r5, r3, r9
     88c:	add	r3, sp, #124	; 0x7c
     890:	add	r0, r3, r2
     894:	add	r3, ip, r2
     898:	mov	r2, lr
     89c:	str	lr, [r5, #-108]	; 0xffffff94
     8a0:	str	lr, [r5, #-36]	; 0xffffffdc
     8a4:	b	8ac <transpose_array+0xc0>
     8a8:	ldr	r1, [r0], #-4
     8ac:	mul	r2, r1, r2
     8b0:	cmp	r3, ip
     8b4:	str	r2, [r3], #-4
     8b8:	bne	8a8 <transpose_array+0xbc>
     8bc:	mul	r0, r6, r7
     8c0:	add	r3, sp, #160	; 0xa0
     8c4:	add	r9, r3, r9
     8c8:	mov	r3, #0
     8cc:	str	r3, [r9, #-72]	; 0xffffffb8
     8d0:	str	r3, [r9, #-36]	; 0xffffffdc
     8d4:	str	r0, [sp, #12]
     8d8:	bl	0 <malloc>
     8dc:	subs	r5, r0, #0
     8e0:	beq	b5c <transpose_array+0x370>
     8e4:	sub	r6, r6, #1
     8e8:	cmp	r6, #7
     8ec:	ldrls	pc, [pc, r6, lsl #2]
     8f0:	b	b88 <transpose_array+0x39c>
     8f4:	.word	0x000009cc
     8f8:	.word	0x00000a50
     8fc:	.word	0x00000b88
     900:	.word	0x00000ad4
     904:	.word	0x00000b88
     908:	.word	0x00000b88
     90c:	.word	0x00000b88
     910:	.word	0x00000914
     914:	ldr	r6, [sp, #8]
     918:	mov	r3, #0
     91c:	mov	lr, r3
     920:	ldr	r8, [sp, #52]	; 0x34
     924:	add	ip, r6, r7, lsl #3
     928:	ldr	r7, [sp, #124]	; 0x7c
     92c:	lsl	r9, r3, #3
     930:	add	r3, r3, r8
     934:	ldr	r2, [sp, #88]	; 0x58
     938:	ldrd	r0, [r6], #8
     93c:	add	r2, r2, #1
     940:	cmp	r2, r7
     944:	strd	r0, [r5, r9]
     948:	str	r2, [sp, #88]	; 0x58
     94c:	bne	98c <transpose_array+0x1a0>
     950:	add	r2, sp, #88	; 0x58
     954:	add	sl, sp, #56	; 0x38
     958:	add	r9, sp, #128	; 0x80
     95c:	mov	r0, r8
     960:	mov	r1, r7
     964:	str	lr, [r2]
     968:	mls	r3, r0, r1, r3
     96c:	ldr	fp, [r2, #4]!
     970:	ldr	r1, [r9], #4
     974:	ldr	r0, [sl], #4
     978:	add	fp, fp, #1
     97c:	cmp	fp, r1
     980:	str	fp, [r2]
     984:	add	r3, r0, r3
     988:	beq	964 <transpose_array+0x178>
     98c:	cmp	r6, ip
     990:	bne	92c <transpose_array+0x140>
     994:	mov	r1, r5
     998:	ldr	r0, [sp, #8]
     99c:	ldr	r2, [sp, #12]
     9a0:	bl	0 <memcpy>
     9a4:	mov	r0, r5
     9a8:	bl	0 <free>
     9ac:	mov	r0, r4
     9b0:	add	sp, sp, #164	; 0xa4
     9b4:	ldrd	r4, [sp]
     9b8:	ldrd	r6, [sp, #8]
     9bc:	ldrd	r8, [sp, #16]
     9c0:	ldrd	sl, [sp, #24]
     9c4:	add	sp, sp, #32
     9c8:	pop	{pc}		; (ldr pc, [sp], #4)
     9cc:	ldr	r3, [sp, #8]
     9d0:	mov	r2, #0
     9d4:	mov	r8, r2
     9d8:	ldr	fp, [sp, #52]	; 0x34
     9dc:	ldr	sl, [sp, #124]	; 0x7c
     9e0:	sub	r9, r3, #1
     9e4:	add	r7, r9, r7
     9e8:	ldr	r3, [sp, #88]	; 0x58
     9ec:	ldrb	r1, [r9, #1]!
     9f0:	add	r3, r3, #1
     9f4:	cmp	r3, sl
     9f8:	strb	r1, [r5, r2]
     9fc:	add	r2, r2, fp
     a00:	str	r3, [sp, #88]	; 0x58
     a04:	bne	a44 <transpose_array+0x258>
     a08:	add	r1, sp, #88	; 0x58
     a0c:	add	r6, sp, #56	; 0x38
     a10:	add	lr, sp, #128	; 0x80
     a14:	mov	ip, fp
     a18:	mov	r0, sl
     a1c:	str	r8, [r1]
     a20:	mls	r2, ip, r0, r2
     a24:	ldr	r3, [r1, #4]!
     a28:	ldr	r0, [lr], #4
     a2c:	ldr	ip, [r6], #4
     a30:	add	r3, r3, #1
     a34:	cmp	r3, r0
     a38:	str	r3, [r1]
     a3c:	add	r2, ip, r2
     a40:	beq	a1c <transpose_array+0x230>
     a44:	cmp	r7, r9
     a48:	bne	9e8 <transpose_array+0x1fc>
     a4c:	b	994 <transpose_array+0x1a8>
     a50:	ldr	r9, [sp, #8]
     a54:	mov	r2, #0
     a58:	mov	r8, r2
     a5c:	ldr	fp, [sp, #52]	; 0x34
     a60:	ldr	sl, [sp, #124]	; 0x7c
     a64:	add	r7, r9, r7, lsl #1
     a68:	ldr	r3, [sp, #88]	; 0x58
     a6c:	lsl	r1, r2, #1
     a70:	add	r2, r2, fp
     a74:	ldrh	r0, [r9], #2
     a78:	add	r3, r3, #1
     a7c:	cmp	r3, sl
     a80:	strh	r0, [r5, r1]
     a84:	str	r3, [sp, #88]	; 0x58
     a88:	bne	ac8 <transpose_array+0x2dc>
     a8c:	add	r1, sp, #88	; 0x58
     a90:	add	r6, sp, #56	; 0x38
     a94:	add	lr, sp, #128	; 0x80
     a98:	mov	ip, fp
     a9c:	mov	r0, sl
     aa0:	str	r8, [r1]
     aa4:	mls	r2, ip, r0, r2
     aa8:	ldr	r3, [r1, #4]!
     aac:	ldr	r0, [lr], #4
     ab0:	ldr	ip, [r6], #4
     ab4:	add	r3, r3, #1
     ab8:	cmp	r3, r0
     abc:	str	r3, [r1]
     ac0:	add	r2, ip, r2
     ac4:	beq	aa0 <transpose_array+0x2b4>
     ac8:	cmp	r9, r7
     acc:	bne	a68 <transpose_array+0x27c>
     ad0:	b	994 <transpose_array+0x1a8>
     ad4:	ldr	r9, [sp, #8]
     ad8:	mov	r2, #0
     adc:	mov	r8, r2
     ae0:	ldr	fp, [sp, #52]	; 0x34
     ae4:	ldr	sl, [sp, #124]	; 0x7c
     ae8:	add	r7, r9, r7, lsl #2
     aec:	ldr	r3, [sp, #88]	; 0x58
     af0:	ldr	r1, [r9], #4
     af4:	add	r3, r3, #1
     af8:	cmp	sl, r3
     afc:	str	r1, [r5, r2, lsl #2]
     b00:	add	r2, r2, fp
     b04:	str	r3, [sp, #88]	; 0x58
     b08:	bne	b48 <transpose_array+0x35c>
     b0c:	add	r1, sp, #88	; 0x58
     b10:	add	r6, sp, #56	; 0x38
     b14:	add	lr, sp, #128	; 0x80
     b18:	mov	ip, fp
     b1c:	mov	r0, sl
     b20:	str	r8, [r1]
     b24:	mls	r2, ip, r0, r2
     b28:	ldr	r3, [r1, #4]!
     b2c:	ldr	r0, [lr], #4
     b30:	ldr	ip, [r6], #4
     b34:	add	r3, r3, #1
     b38:	cmp	r3, r0
     b3c:	str	r3, [r1]
     b40:	add	r2, ip, r2
     b44:	beq	b20 <transpose_array+0x334>
     b48:	cmp	r7, r9
     b4c:	bne	aec <transpose_array+0x300>
     b50:	b	994 <transpose_array+0x1a8>
     b54:	mvn	r4, #0
     b58:	b	9ac <transpose_array+0x1c0>
     b5c:	mov	r0, #93	; 0x5d
     b60:	movw	r3, #0
     b64:	movt	r3, #0
     b68:	movw	r1, #0
     b6c:	movt	r1, #0
     b70:	str	r0, [sp]
     b74:	mvn	r0, #0
     b78:	ldr	r2, [sp, #12]
     b7c:	mov	r4, r0
     b80:	bl	0 <coda_set_error>
     b84:	b	9ac <transpose_array+0x1c0>
     b88:	movw	r1, #0
     b8c:	movt	r1, #0
     b90:	ldr	r3, [pc, #12]	; ba4 <transpose_array+0x3b8>
     b94:	movw	r0, #0
     b98:	movt	r0, #0
     b9c:	mov	r2, #172	; 0xac
     ba0:	bl	0 <__assert_fail>
     ba4:	.word	0x00000060

00000ba8 <read_int8_array>:
     ba8:	ldr	r3, [r0, #4]
     bac:	strd	r4, [sp, #-16]!
     bb0:	add	r3, r0, r3, lsl #4
     bb4:	ldr	r3, [r3, #-8]
     bb8:	ldr	r3, [r3]
     bbc:	str	r6, [sp, #8]
     bc0:	str	lr, [sp, #12]
     bc4:	cmp	r3, #101	; 0x65
     bc8:	beq	cb8 <read_int8_array+0x110>
     bcc:	mov	r4, r0
     bd0:	mov	r6, r1
     bd4:	mov	r5, r2
     bd8:	bls	c10 <read_int8_array+0x68>
     bdc:	cmp	r3, #103	; 0x67
     be0:	beq	cd8 <read_int8_array+0x130>
     be4:	bcc	c98 <read_int8_array+0xf0>
     be8:	cmp	r3, #104	; 0x68
     bec:	bne	c3c <read_int8_array+0x94>
     bf0:	bl	0 <coda_netcdf_cursor_read_int8_array>
     bf4:	cmp	r0, #0
     bf8:	beq	c44 <read_int8_array+0x9c>
     bfc:	mvn	r0, #0
     c00:	ldrd	r4, [sp]
     c04:	ldr	r6, [sp, #8]
     c08:	add	sp, sp, #12
     c0c:	pop	{pc}		; (ldr pc, [sp], #4)
     c10:	cmp	r3, #1
     c14:	beq	c70 <read_int8_array+0xc8>
     c18:	cmp	r3, #0
     c1c:	beq	c84 <read_int8_array+0xdc>
     c20:	cmp	r3, #100	; 0x64
     c24:	bne	c44 <read_int8_array+0x9c>
     c28:	ldrd	r4, [sp]
     c2c:	ldr	r6, [sp, #8]
     c30:	ldr	lr, [sp, #12]
     c34:	add	sp, sp, #16
     c38:	b	0 <coda_mem_cursor_read_int8_array>
     c3c:	cmp	r3, #105	; 0x69
     c40:	beq	ce8 <read_int8_array+0x140>
     c44:	cmp	r5, #0
     c48:	moveq	r0, r5
     c4c:	beq	c00 <read_int8_array+0x58>
     c50:	mov	r1, r6
     c54:	mov	r0, r4
     c58:	ldrd	r4, [sp]
     c5c:	mov	r2, #1
     c60:	ldr	r6, [sp, #8]
     c64:	ldr	lr, [sp, #12]
     c68:	add	sp, sp, #16
     c6c:	b	7ec <transpose_array>
     c70:	ldrd	r4, [sp]
     c74:	ldr	r6, [sp, #8]
     c78:	ldr	lr, [sp, #12]
     c7c:	add	sp, sp, #16
     c80:	b	0 <coda_bin_cursor_read_int8_array>
     c84:	ldrd	r4, [sp]
     c88:	ldr	r6, [sp, #8]
     c8c:	ldr	lr, [sp, #12]
     c90:	add	sp, sp, #16
     c94:	b	0 <coda_ascii_cursor_read_int8_array>
     c98:	mvn	r0, #12
     c9c:	mov	r1, #0
     ca0:	bl	0 <coda_set_error>
     ca4:	ldrd	r4, [sp]
     ca8:	mvn	r0, #0
     cac:	ldr	r6, [sp, #8]
     cb0:	add	sp, sp, #12
     cb4:	pop	{pc}		; (ldr pc, [sp], #4)
     cb8:	mvn	r0, #10
     cbc:	mov	r1, #0
     cc0:	bl	0 <coda_set_error>
     cc4:	ldrd	r4, [sp]
     cc8:	mvn	r0, #0
     ccc:	ldr	r6, [sp, #8]
     cd0:	add	sp, sp, #12
     cd4:	pop	{pc}		; (ldr pc, [sp], #4)
     cd8:	bl	0 <coda_cdf_cursor_read_int8_array>
     cdc:	cmp	r0, #0
     ce0:	beq	c44 <read_int8_array+0x9c>
     ce4:	b	bfc <read_int8_array+0x54>
     ce8:	movw	r1, #0
     cec:	movt	r1, #0
     cf0:	ldr	r3, [pc, #12]	; d04 <read_int8_array+0x15c>
     cf4:	movw	r0, #0
     cf8:	movt	r0, #0
     cfc:	movw	r2, #807	; 0x327
     d00:	bl	0 <__assert_fail>
     d04:	.word	0x00000070

00000d08 <read_uint8_array>:
     d08:	ldr	r3, [r0, #4]
     d0c:	strd	r4, [sp, #-16]!
     d10:	add	r3, r0, r3, lsl #4
     d14:	ldr	r3, [r3, #-8]
     d18:	ldr	r3, [r3]
     d1c:	str	r6, [sp, #8]
     d20:	str	lr, [sp, #12]
     d24:	cmp	r3, #101	; 0x65
     d28:	beq	ddc <read_uint8_array+0xd4>
     d2c:	mov	r4, r0
     d30:	mov	r6, r1
     d34:	mov	r5, r2
     d38:	bhi	d68 <read_uint8_array+0x60>
     d3c:	cmp	r3, #1
     d40:	beq	dfc <read_uint8_array+0xf4>
     d44:	cmp	r3, #0
     d48:	beq	e10 <read_uint8_array+0x108>
     d4c:	cmp	r3, #100	; 0x64
     d50:	bne	d9c <read_uint8_array+0x94>
     d54:	ldrd	r4, [sp]
     d58:	ldr	r6, [sp, #8]
     d5c:	ldr	lr, [sp, #12]
     d60:	add	sp, sp, #16
     d64:	b	0 <coda_mem_cursor_read_uint8_array>
     d68:	cmp	r3, #103	; 0x67
     d6c:	beq	dc8 <read_uint8_array+0xc0>
     d70:	bcs	d94 <read_uint8_array+0x8c>
     d74:	mvn	r0, #12
     d78:	mov	r1, #0
     d7c:	bl	0 <coda_set_error>
     d80:	mvn	r0, #0
     d84:	ldrd	r4, [sp]
     d88:	ldr	r6, [sp, #8]
     d8c:	add	sp, sp, #12
     d90:	pop	{pc}		; (ldr pc, [sp], #4)
     d94:	cmp	r3, #105	; 0x69
     d98:	bls	e24 <read_uint8_array+0x11c>
     d9c:	cmp	r5, #0
     da0:	moveq	r0, r5
     da4:	beq	d84 <read_uint8_array+0x7c>
     da8:	mov	r1, r6
     dac:	mov	r0, r4
     db0:	ldrd	r4, [sp]
     db4:	mov	r2, #1
     db8:	ldr	r6, [sp, #8]
     dbc:	ldr	lr, [sp, #12]
     dc0:	add	sp, sp, #16
     dc4:	b	7ec <transpose_array>
     dc8:	bl	0 <coda_cdf_cursor_read_uint8_array>
     dcc:	cmp	r0, #0
     dd0:	beq	d9c <read_uint8_array+0x94>
     dd4:	mvn	r0, #0
     dd8:	b	d84 <read_uint8_array+0x7c>
     ddc:	mvn	r0, #10
     de0:	mov	r1, #0
     de4:	bl	0 <coda_set_error>
     de8:	ldrd	r4, [sp]
     dec:	mvn	r0, #0
     df0:	ldr	r6, [sp, #8]
     df4:	add	sp, sp, #12
     df8:	pop	{pc}		; (ldr pc, [sp], #4)
     dfc:	ldrd	r4, [sp]
     e00:	ldr	r6, [sp, #8]
     e04:	ldr	lr, [sp, #12]
     e08:	add	sp, sp, #16
     e0c:	b	0 <coda_bin_cursor_read_uint8_array>
     e10:	ldrd	r4, [sp]
     e14:	ldr	r6, [sp, #8]
     e18:	ldr	lr, [sp, #12]
     e1c:	add	sp, sp, #16
     e20:	b	0 <coda_ascii_cursor_read_uint8_array>
     e24:	movw	r1, #0
     e28:	movt	r1, #0
     e2c:	ldr	r3, [pc, #12]	; e40 <read_uint8_array+0x138>
     e30:	movw	r0, #0
     e34:	movt	r0, #0
     e38:	movw	r2, #859	; 0x35b
     e3c:	bl	0 <__assert_fail>
     e40:	.word	0x00000080

00000e44 <read_int16_array>:
     e44:	ldr	r3, [r0, #4]
     e48:	strd	r4, [sp, #-16]!
     e4c:	add	r3, r0, r3, lsl #4
     e50:	ldr	r3, [r3, #-8]
     e54:	ldr	r3, [r3]
     e58:	str	r6, [sp, #8]
     e5c:	str	lr, [sp, #12]
     e60:	cmp	r3, #101	; 0x65
     e64:	beq	f54 <read_int16_array+0x110>
     e68:	mov	r4, r0
     e6c:	mov	r6, r1
     e70:	mov	r5, r2
     e74:	bls	eac <read_int16_array+0x68>
     e78:	cmp	r3, #103	; 0x67
     e7c:	beq	f74 <read_int16_array+0x130>
     e80:	bcc	f34 <read_int16_array+0xf0>
     e84:	cmp	r3, #104	; 0x68
     e88:	bne	ed8 <read_int16_array+0x94>
     e8c:	bl	0 <coda_netcdf_cursor_read_int16_array>
     e90:	cmp	r0, #0
     e94:	beq	ee0 <read_int16_array+0x9c>
     e98:	mvn	r0, #0
     e9c:	ldrd	r4, [sp]
     ea0:	ldr	r6, [sp, #8]
     ea4:	add	sp, sp, #12
     ea8:	pop	{pc}		; (ldr pc, [sp], #4)
     eac:	cmp	r3, #1
     eb0:	beq	f0c <read_int16_array+0xc8>
     eb4:	cmp	r3, #0
     eb8:	beq	f20 <read_int16_array+0xdc>
     ebc:	cmp	r3, #100	; 0x64
     ec0:	bne	ee0 <read_int16_array+0x9c>
     ec4:	ldrd	r4, [sp]
     ec8:	ldr	r6, [sp, #8]
     ecc:	ldr	lr, [sp, #12]
     ed0:	add	sp, sp, #16
     ed4:	b	0 <coda_mem_cursor_read_int16_array>
     ed8:	cmp	r3, #105	; 0x69
     edc:	beq	f84 <read_int16_array+0x140>
     ee0:	cmp	r5, #0
     ee4:	moveq	r0, r5
     ee8:	beq	e9c <read_int16_array+0x58>
     eec:	mov	r1, r6
     ef0:	mov	r0, r4
     ef4:	ldrd	r4, [sp]
     ef8:	mov	r2, #2
     efc:	ldr	r6, [sp, #8]
     f00:	ldr	lr, [sp, #12]
     f04:	add	sp, sp, #16
     f08:	b	7ec <transpose_array>
     f0c:	ldrd	r4, [sp]
     f10:	ldr	r6, [sp, #8]
     f14:	ldr	lr, [sp, #12]
     f18:	add	sp, sp, #16
     f1c:	b	0 <coda_bin_cursor_read_int16_array>
     f20:	ldrd	r4, [sp]
     f24:	ldr	r6, [sp, #8]
     f28:	ldr	lr, [sp, #12]
     f2c:	add	sp, sp, #16
     f30:	b	0 <coda_ascii_cursor_read_int16_array>
     f34:	mvn	r0, #12
     f38:	mov	r1, #0
     f3c:	bl	0 <coda_set_error>
     f40:	ldrd	r4, [sp]
     f44:	mvn	r0, #0
     f48:	ldr	r6, [sp, #8]
     f4c:	add	sp, sp, #12
     f50:	pop	{pc}		; (ldr pc, [sp], #4)
     f54:	mvn	r0, #10
     f58:	mov	r1, #0
     f5c:	bl	0 <coda_set_error>
     f60:	ldrd	r4, [sp]
     f64:	mvn	r0, #0
     f68:	ldr	r6, [sp, #8]
     f6c:	add	sp, sp, #12
     f70:	pop	{pc}		; (ldr pc, [sp], #4)
     f74:	bl	0 <coda_cdf_cursor_read_int16_array>
     f78:	cmp	r0, #0
     f7c:	beq	ee0 <read_int16_array+0x9c>
     f80:	b	e98 <read_int16_array+0x54>
     f84:	movw	r1, #0
     f88:	movt	r1, #0
     f8c:	ldr	r3, [pc, #12]	; fa0 <read_int16_array+0x15c>
     f90:	movw	r0, #0
     f94:	movt	r0, #0
     f98:	mov	r2, #916	; 0x394
     f9c:	bl	0 <__assert_fail>
     fa0:	.word	0x00000094

00000fa4 <read_uint16_array>:
     fa4:	ldr	r3, [r0, #4]
     fa8:	strd	r4, [sp, #-16]!
     fac:	add	r3, r0, r3, lsl #4
     fb0:	ldr	r3, [r3, #-8]
     fb4:	ldr	r3, [r3]
     fb8:	str	r6, [sp, #8]
     fbc:	str	lr, [sp, #12]
     fc0:	cmp	r3, #101	; 0x65
     fc4:	beq	1078 <read_uint16_array+0xd4>
     fc8:	mov	r4, r0
     fcc:	mov	r6, r1
     fd0:	mov	r5, r2
     fd4:	bhi	1004 <read_uint16_array+0x60>
     fd8:	cmp	r3, #1
     fdc:	beq	1098 <read_uint16_array+0xf4>
     fe0:	cmp	r3, #0
     fe4:	beq	10ac <read_uint16_array+0x108>
     fe8:	cmp	r3, #100	; 0x64
     fec:	bne	1038 <read_uint16_array+0x94>
     ff0:	ldrd	r4, [sp]
     ff4:	ldr	r6, [sp, #8]
     ff8:	ldr	lr, [sp, #12]
     ffc:	add	sp, sp, #16
    1000:	b	0 <coda_mem_cursor_read_uint16_array>
    1004:	cmp	r3, #103	; 0x67
    1008:	beq	1064 <read_uint16_array+0xc0>
    100c:	bcs	1030 <read_uint16_array+0x8c>
    1010:	mvn	r0, #12
    1014:	mov	r1, #0
    1018:	bl	0 <coda_set_error>
    101c:	mvn	r0, #0
    1020:	ldrd	r4, [sp]
    1024:	ldr	r6, [sp, #8]
    1028:	add	sp, sp, #12
    102c:	pop	{pc}		; (ldr pc, [sp], #4)
    1030:	cmp	r3, #105	; 0x69
    1034:	bls	10c0 <read_uint16_array+0x11c>
    1038:	cmp	r5, #0
    103c:	moveq	r0, r5
    1040:	beq	1020 <read_uint16_array+0x7c>
    1044:	mov	r1, r6
    1048:	mov	r0, r4
    104c:	ldrd	r4, [sp]
    1050:	mov	r2, #2
    1054:	ldr	r6, [sp, #8]
    1058:	ldr	lr, [sp, #12]
    105c:	add	sp, sp, #16
    1060:	b	7ec <transpose_array>
    1064:	bl	0 <coda_cdf_cursor_read_uint16_array>
    1068:	cmp	r0, #0
    106c:	beq	1038 <read_uint16_array+0x94>
    1070:	mvn	r0, #0
    1074:	b	1020 <read_uint16_array+0x7c>
    1078:	mvn	r0, #10
    107c:	mov	r1, #0
    1080:	bl	0 <coda_set_error>
    1084:	ldrd	r4, [sp]
    1088:	mvn	r0, #0
    108c:	ldr	r6, [sp, #8]
    1090:	add	sp, sp, #12
    1094:	pop	{pc}		; (ldr pc, [sp], #4)
    1098:	ldrd	r4, [sp]
    109c:	ldr	r6, [sp, #8]
    10a0:	ldr	lr, [sp, #12]
    10a4:	add	sp, sp, #16
    10a8:	b	0 <coda_bin_cursor_read_uint16_array>
    10ac:	ldrd	r4, [sp]
    10b0:	ldr	r6, [sp, #8]
    10b4:	ldr	lr, [sp, #12]
    10b8:	add	sp, sp, #16
    10bc:	b	0 <coda_ascii_cursor_read_uint16_array>
    10c0:	movw	r1, #0
    10c4:	movt	r1, #0
    10c8:	ldr	r3, [pc, #12]	; 10dc <read_uint16_array+0x138>
    10cc:	movw	r0, #0
    10d0:	movt	r0, #0
    10d4:	mov	r2, #968	; 0x3c8
    10d8:	bl	0 <__assert_fail>
    10dc:	.word	0x000000a8

000010e0 <read_int32_array>:
    10e0:	ldr	r3, [r0, #4]
    10e4:	strd	r4, [sp, #-16]!
    10e8:	add	r3, r0, r3, lsl #4
    10ec:	ldr	r3, [r3, #-8]
    10f0:	ldr	r3, [r3]
    10f4:	str	r6, [sp, #8]
    10f8:	str	lr, [sp, #12]
    10fc:	cmp	r3, #101	; 0x65
    1100:	beq	11f0 <read_int32_array+0x110>
    1104:	mov	r4, r0
    1108:	mov	r6, r1
    110c:	mov	r5, r2
    1110:	bls	1148 <read_int32_array+0x68>
    1114:	cmp	r3, #103	; 0x67
    1118:	beq	1210 <read_int32_array+0x130>
    111c:	bcc	11d0 <read_int32_array+0xf0>
    1120:	cmp	r3, #104	; 0x68
    1124:	bne	1174 <read_int32_array+0x94>
    1128:	bl	0 <coda_netcdf_cursor_read_int32_array>
    112c:	cmp	r0, #0
    1130:	beq	117c <read_int32_array+0x9c>
    1134:	mvn	r0, #0
    1138:	ldrd	r4, [sp]
    113c:	ldr	r6, [sp, #8]
    1140:	add	sp, sp, #12
    1144:	pop	{pc}		; (ldr pc, [sp], #4)
    1148:	cmp	r3, #1
    114c:	beq	11a8 <read_int32_array+0xc8>
    1150:	cmp	r3, #0
    1154:	beq	11bc <read_int32_array+0xdc>
    1158:	cmp	r3, #100	; 0x64
    115c:	bne	117c <read_int32_array+0x9c>
    1160:	ldrd	r4, [sp]
    1164:	ldr	r6, [sp, #8]
    1168:	ldr	lr, [sp, #12]
    116c:	add	sp, sp, #16
    1170:	b	0 <coda_mem_cursor_read_int32_array>
    1174:	cmp	r3, #105	; 0x69
    1178:	beq	1220 <read_int32_array+0x140>
    117c:	cmp	r5, #0
    1180:	moveq	r0, r5
    1184:	beq	1138 <read_int32_array+0x58>
    1188:	mov	r1, r6
    118c:	mov	r0, r4
    1190:	ldrd	r4, [sp]
    1194:	mov	r2, #4
    1198:	ldr	r6, [sp, #8]
    119c:	ldr	lr, [sp, #12]
    11a0:	add	sp, sp, #16
    11a4:	b	7ec <transpose_array>
    11a8:	ldrd	r4, [sp]
    11ac:	ldr	r6, [sp, #8]
    11b0:	ldr	lr, [sp, #12]
    11b4:	add	sp, sp, #16
    11b8:	b	0 <coda_bin_cursor_read_int32_array>
    11bc:	ldrd	r4, [sp]
    11c0:	ldr	r6, [sp, #8]
    11c4:	ldr	lr, [sp, #12]
    11c8:	add	sp, sp, #16
    11cc:	b	0 <coda_ascii_cursor_read_int32_array>
    11d0:	mvn	r0, #12
    11d4:	mov	r1, #0
    11d8:	bl	0 <coda_set_error>
    11dc:	ldrd	r4, [sp]
    11e0:	mvn	r0, #0
    11e4:	ldr	r6, [sp, #8]
    11e8:	add	sp, sp, #12
    11ec:	pop	{pc}		; (ldr pc, [sp], #4)
    11f0:	mvn	r0, #10
    11f4:	mov	r1, #0
    11f8:	bl	0 <coda_set_error>
    11fc:	ldrd	r4, [sp]
    1200:	mvn	r0, #0
    1204:	ldr	r6, [sp, #8]
    1208:	add	sp, sp, #12
    120c:	pop	{pc}		; (ldr pc, [sp], #4)
    1210:	bl	0 <coda_cdf_cursor_read_int32_array>
    1214:	cmp	r0, #0
    1218:	beq	117c <read_int32_array+0x9c>
    121c:	b	1134 <read_int32_array+0x54>
    1220:	movw	r1, #0
    1224:	movt	r1, #0
    1228:	ldr	r3, [pc, #12]	; 123c <read_int32_array+0x15c>
    122c:	movw	r0, #0
    1230:	movt	r0, #0
    1234:	movw	r2, #1025	; 0x401
    1238:	bl	0 <__assert_fail>
    123c:	.word	0x000000bc

00001240 <read_uint32_array>:
    1240:	ldr	r3, [r0, #4]
    1244:	strd	r4, [sp, #-16]!
    1248:	add	r3, r0, r3, lsl #4
    124c:	ldr	r3, [r3, #-8]
    1250:	ldr	r3, [r3]
    1254:	str	r6, [sp, #8]
    1258:	str	lr, [sp, #12]
    125c:	cmp	r3, #101	; 0x65
    1260:	beq	1314 <read_uint32_array+0xd4>
    1264:	mov	r4, r0
    1268:	mov	r6, r1
    126c:	mov	r5, r2
    1270:	bhi	12a0 <read_uint32_array+0x60>
    1274:	cmp	r3, #1
    1278:	beq	1334 <read_uint32_array+0xf4>
    127c:	cmp	r3, #0
    1280:	beq	1348 <read_uint32_array+0x108>
    1284:	cmp	r3, #100	; 0x64
    1288:	bne	12d4 <read_uint32_array+0x94>
    128c:	ldrd	r4, [sp]
    1290:	ldr	r6, [sp, #8]
    1294:	ldr	lr, [sp, #12]
    1298:	add	sp, sp, #16
    129c:	b	0 <coda_mem_cursor_read_uint32_array>
    12a0:	cmp	r3, #103	; 0x67
    12a4:	beq	1300 <read_uint32_array+0xc0>
    12a8:	bcs	12cc <read_uint32_array+0x8c>
    12ac:	mvn	r0, #12
    12b0:	mov	r1, #0
    12b4:	bl	0 <coda_set_error>
    12b8:	mvn	r0, #0
    12bc:	ldrd	r4, [sp]
    12c0:	ldr	r6, [sp, #8]
    12c4:	add	sp, sp, #12
    12c8:	pop	{pc}		; (ldr pc, [sp], #4)
    12cc:	cmp	r3, #105	; 0x69
    12d0:	bls	135c <read_uint32_array+0x11c>
    12d4:	cmp	r5, #0
    12d8:	moveq	r0, r5
    12dc:	beq	12bc <read_uint32_array+0x7c>
    12e0:	mov	r1, r6
    12e4:	mov	r0, r4
    12e8:	ldrd	r4, [sp]
    12ec:	mov	r2, #4
    12f0:	ldr	r6, [sp, #8]
    12f4:	ldr	lr, [sp, #12]
    12f8:	add	sp, sp, #16
    12fc:	b	7ec <transpose_array>
    1300:	bl	0 <coda_cdf_cursor_read_uint32_array>
    1304:	cmp	r0, #0
    1308:	beq	12d4 <read_uint32_array+0x94>
    130c:	mvn	r0, #0
    1310:	b	12bc <read_uint32_array+0x7c>
    1314:	mvn	r0, #10
    1318:	mov	r1, #0
    131c:	bl	0 <coda_set_error>
    1320:	ldrd	r4, [sp]
    1324:	mvn	r0, #0
    1328:	ldr	r6, [sp, #8]
    132c:	add	sp, sp, #12
    1330:	pop	{pc}		; (ldr pc, [sp], #4)
    1334:	ldrd	r4, [sp]
    1338:	ldr	r6, [sp, #8]
    133c:	ldr	lr, [sp, #12]
    1340:	add	sp, sp, #16
    1344:	b	0 <coda_bin_cursor_read_uint32_array>
    1348:	ldrd	r4, [sp]
    134c:	ldr	r6, [sp, #8]
    1350:	ldr	lr, [sp, #12]
    1354:	add	sp, sp, #16
    1358:	b	0 <coda_ascii_cursor_read_uint32_array>
    135c:	movw	r1, #0
    1360:	movt	r1, #0
    1364:	ldr	r3, [pc, #12]	; 1378 <read_uint32_array+0x138>
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	movw	r2, #1077	; 0x435
    1374:	bl	0 <__assert_fail>
    1378:	.word	0x000000d0

0000137c <read_int64_array>:
    137c:	ldr	r3, [r0, #4]
    1380:	strd	r4, [sp, #-16]!
    1384:	add	r3, r0, r3, lsl #4
    1388:	ldr	r3, [r3, #-8]
    138c:	ldr	r3, [r3]
    1390:	str	r6, [sp, #8]
    1394:	str	lr, [sp, #12]
    1398:	cmp	r3, #101	; 0x65
    139c:	beq	1450 <read_int64_array+0xd4>
    13a0:	mov	r4, r0
    13a4:	mov	r6, r1
    13a8:	mov	r5, r2
    13ac:	bhi	13dc <read_int64_array+0x60>
    13b0:	cmp	r3, #1
    13b4:	beq	1470 <read_int64_array+0xf4>
    13b8:	cmp	r3, #0
    13bc:	beq	1484 <read_int64_array+0x108>
    13c0:	cmp	r3, #100	; 0x64
    13c4:	bne	1410 <read_int64_array+0x94>
    13c8:	ldrd	r4, [sp]
    13cc:	ldr	r6, [sp, #8]
    13d0:	ldr	lr, [sp, #12]
    13d4:	add	sp, sp, #16
    13d8:	b	0 <coda_mem_cursor_read_int64_array>
    13dc:	cmp	r3, #103	; 0x67
    13e0:	beq	143c <read_int64_array+0xc0>
    13e4:	bcs	1408 <read_int64_array+0x8c>
    13e8:	mvn	r0, #12
    13ec:	mov	r1, #0
    13f0:	bl	0 <coda_set_error>
    13f4:	mvn	r0, #0
    13f8:	ldrd	r4, [sp]
    13fc:	ldr	r6, [sp, #8]
    1400:	add	sp, sp, #12
    1404:	pop	{pc}		; (ldr pc, [sp], #4)
    1408:	cmp	r3, #105	; 0x69
    140c:	bls	1498 <read_int64_array+0x11c>
    1410:	cmp	r5, #0
    1414:	moveq	r0, r5
    1418:	beq	13f8 <read_int64_array+0x7c>
    141c:	mov	r1, r6
    1420:	mov	r0, r4
    1424:	ldrd	r4, [sp]
    1428:	mov	r2, #8
    142c:	ldr	r6, [sp, #8]
    1430:	ldr	lr, [sp, #12]
    1434:	add	sp, sp, #16
    1438:	b	7ec <transpose_array>
    143c:	bl	0 <coda_cdf_cursor_read_int64_array>
    1440:	cmp	r0, #0
    1444:	beq	1410 <read_int64_array+0x94>
    1448:	mvn	r0, #0
    144c:	b	13f8 <read_int64_array+0x7c>
    1450:	mvn	r0, #10
    1454:	mov	r1, #0
    1458:	bl	0 <coda_set_error>
    145c:	ldrd	r4, [sp]
    1460:	mvn	r0, #0
    1464:	ldr	r6, [sp, #8]
    1468:	add	sp, sp, #12
    146c:	pop	{pc}		; (ldr pc, [sp], #4)
    1470:	ldrd	r4, [sp]
    1474:	ldr	r6, [sp, #8]
    1478:	ldr	lr, [sp, #12]
    147c:	add	sp, sp, #16
    1480:	b	0 <coda_bin_cursor_read_int64_array>
    1484:	ldrd	r4, [sp]
    1488:	ldr	r6, [sp, #8]
    148c:	ldr	lr, [sp, #12]
    1490:	add	sp, sp, #16
    1494:	b	0 <coda_ascii_cursor_read_int64_array>
    1498:	movw	r1, #0
    149c:	movt	r1, #0
    14a0:	ldr	r3, [pc, #12]	; 14b4 <read_int64_array+0x138>
    14a4:	movw	r0, #0
    14a8:	movt	r0, #0
    14ac:	movw	r2, #1129	; 0x469
    14b0:	bl	0 <__assert_fail>
    14b4:	.word	0x000000e4

000014b8 <read_uint64_array>:
    14b8:	ldr	r3, [r0, #4]
    14bc:	str	r4, [sp, #-8]!
    14c0:	add	r3, r0, r3, lsl #4
    14c4:	ldr	r3, [r3, #-8]
    14c8:	ldr	r3, [r3]
    14cc:	str	lr, [sp, #4]
    14d0:	cmp	r3, #101	; 0x65
    14d4:	beq	1564 <read_uint64_array+0xac>
    14d8:	mov	ip, r0
    14dc:	mov	r4, r1
    14e0:	mov	lr, r2
    14e4:	bhi	1510 <read_uint64_array+0x58>
    14e8:	cmp	r3, #1
    14ec:	beq	1580 <read_uint64_array+0xc8>
    14f0:	cmp	r3, #0
    14f4:	beq	1590 <read_uint64_array+0xd8>
    14f8:	cmp	r3, #100	; 0x64
    14fc:	bne	153c <read_uint64_array+0x84>
    1500:	ldr	r4, [sp]
    1504:	ldr	lr, [sp, #4]
    1508:	add	sp, sp, #8
    150c:	b	0 <coda_mem_cursor_read_uint64_array>
    1510:	cmp	r3, #102	; 0x66
    1514:	bne	1534 <read_uint64_array+0x7c>
    1518:	mvn	r0, #12
    151c:	mov	r1, #0
    1520:	bl	0 <coda_set_error>
    1524:	mvn	r0, #0
    1528:	ldr	r4, [sp]
    152c:	add	sp, sp, #4
    1530:	pop	{pc}		; (ldr pc, [sp], #4)
    1534:	cmp	r3, #105	; 0x69
    1538:	bls	15a0 <read_uint64_array+0xe8>
    153c:	cmp	lr, #0
    1540:	moveq	r0, lr
    1544:	beq	1528 <read_uint64_array+0x70>
    1548:	mov	r1, r4
    154c:	mov	r0, ip
    1550:	ldr	r4, [sp]
    1554:	mov	r2, #8
    1558:	ldr	lr, [sp, #4]
    155c:	add	sp, sp, #8
    1560:	b	7ec <transpose_array>
    1564:	mvn	r0, #10
    1568:	mov	r1, #0
    156c:	bl	0 <coda_set_error>
    1570:	ldr	r4, [sp]
    1574:	add	sp, sp, #4
    1578:	mvn	r0, #0
    157c:	pop	{pc}		; (ldr pc, [sp], #4)
    1580:	ldr	r4, [sp]
    1584:	ldr	lr, [sp, #4]
    1588:	add	sp, sp, #8
    158c:	b	0 <coda_bin_cursor_read_uint64_array>
    1590:	ldr	r4, [sp]
    1594:	ldr	lr, [sp, #4]
    1598:	add	sp, sp, #8
    159c:	b	0 <coda_ascii_cursor_read_uint64_array>
    15a0:	movw	r1, #0
    15a4:	movt	r1, #0
    15a8:	ldr	r3, [pc, #12]	; 15bc <read_uint64_array+0x104>
    15ac:	movw	r0, #0
    15b0:	movt	r0, #0
    15b4:	movw	r2, #1176	; 0x498
    15b8:	bl	0 <__assert_fail>
    15bc:	.word	0x000000f8

000015c0 <read_float_array>:
    15c0:	ldr	r3, [r0, #4]
    15c4:	strd	r4, [sp, #-16]!
    15c8:	add	r3, r0, r3, lsl #4
    15cc:	ldr	r3, [r3, #-8]
    15d0:	ldr	r3, [r3]
    15d4:	str	r6, [sp, #8]
    15d8:	str	lr, [sp, #12]
    15dc:	cmp	r3, #101	; 0x65
    15e0:	beq	1678 <read_float_array+0xb8>
    15e4:	mov	r4, r0
    15e8:	mov	r6, r1
    15ec:	mov	r5, r2
    15f0:	bls	1638 <read_float_array+0x78>
    15f4:	cmp	r3, #103	; 0x67
    15f8:	beq	16c0 <read_float_array+0x100>
    15fc:	bcc	16d0 <read_float_array+0x110>
    1600:	cmp	r3, #104	; 0x68
    1604:	beq	16ac <read_float_array+0xec>
    1608:	cmp	r3, #105	; 0x69
    160c:	bne	161c <read_float_array+0x5c>
    1610:	bl	0 <coda_grib_cursor_read_float_array>
    1614:	cmp	r0, #0
    1618:	bne	16b8 <read_float_array+0xf8>
    161c:	cmp	r5, #0
    1620:	moveq	r0, r5
    1624:	bne	16f0 <read_float_array+0x130>
    1628:	ldrd	r4, [sp]
    162c:	ldr	r6, [sp, #8]
    1630:	add	sp, sp, #12
    1634:	pop	{pc}		; (ldr pc, [sp], #4)
    1638:	cmp	r3, #1
    163c:	beq	1698 <read_float_array+0xd8>
    1640:	cmp	r3, #0
    1644:	beq	1664 <read_float_array+0xa4>
    1648:	cmp	r3, #100	; 0x64
    164c:	bne	161c <read_float_array+0x5c>
    1650:	ldrd	r4, [sp]
    1654:	ldr	r6, [sp, #8]
    1658:	ldr	lr, [sp, #12]
    165c:	add	sp, sp, #16
    1660:	b	0 <coda_mem_cursor_read_float_array>
    1664:	ldrd	r4, [sp]
    1668:	ldr	r6, [sp, #8]
    166c:	ldr	lr, [sp, #12]
    1670:	add	sp, sp, #16
    1674:	b	0 <coda_ascii_cursor_read_float_array>
    1678:	mvn	r0, #10
    167c:	mov	r1, #0
    1680:	bl	0 <coda_set_error>
    1684:	ldrd	r4, [sp]
    1688:	mvn	r0, #0
    168c:	ldr	r6, [sp, #8]
    1690:	add	sp, sp, #12
    1694:	pop	{pc}		; (ldr pc, [sp], #4)
    1698:	ldrd	r4, [sp]
    169c:	ldr	r6, [sp, #8]
    16a0:	ldr	lr, [sp, #12]
    16a4:	add	sp, sp, #16
    16a8:	b	0 <coda_bin_cursor_read_float_array>
    16ac:	bl	0 <coda_netcdf_cursor_read_float_array>
    16b0:	cmp	r0, #0
    16b4:	beq	161c <read_float_array+0x5c>
    16b8:	mvn	r0, #0
    16bc:	b	1628 <read_float_array+0x68>
    16c0:	bl	0 <coda_cdf_cursor_read_float_array>
    16c4:	cmp	r0, #0
    16c8:	beq	161c <read_float_array+0x5c>
    16cc:	b	16b8 <read_float_array+0xf8>
    16d0:	mvn	r0, #12
    16d4:	mov	r1, #0
    16d8:	bl	0 <coda_set_error>
    16dc:	ldrd	r4, [sp]
    16e0:	mvn	r0, #0
    16e4:	ldr	r6, [sp, #8]
    16e8:	add	sp, sp, #12
    16ec:	pop	{pc}		; (ldr pc, [sp], #4)
    16f0:	mov	r1, r6
    16f4:	mov	r0, r4
    16f8:	ldrd	r4, [sp]
    16fc:	mov	r2, #4
    1700:	ldr	r6, [sp, #8]
    1704:	ldr	lr, [sp, #12]
    1708:	add	sp, sp, #16
    170c:	b	7ec <transpose_array>

00001710 <read_array>:
    1710:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1714:	mov	r4, r0
    1718:	strd	r6, [sp, #8]
    171c:	mov	r7, r1
    1720:	mov	r6, r2
    1724:	strd	r8, [sp, #16]
    1728:	mov	r8, r3
    172c:	strd	sl, [sp, #24]
    1730:	str	lr, [sp, #32]
    1734:	sub	sp, sp, #596	; 0x254
    1738:	mov	r1, sp
    173c:	add	r2, sp, #4
    1740:	bl	0 <coda_cursor_get_array_dim>
    1744:	subs	r9, r0, #0
    1748:	bne	1828 <read_array+0x118>
    174c:	mov	r1, r4
    1750:	mov	r2, #520	; 0x208
    1754:	add	r0, sp, #72	; 0x48
    1758:	bl	0 <memcpy>
    175c:	ldr	r1, [sp]
    1760:	ldr	r2, [sp, #632]	; 0x278
    1764:	cmp	r1, #1
    1768:	movgt	r3, #0
    176c:	movle	r3, #1
    1770:	cmp	r2, #1
    1774:	orrne	r3, r3, #1
    1778:	cmp	r3, #0
    177c:	beq	1830 <read_array+0x120>
    1780:	cmp	r1, #0
    1784:	ble	17cc <read_array+0xbc>
    1788:	mov	r3, sp
    178c:	mov	r4, #1
    1790:	add	r1, r3, r1, lsl #2
    1794:	ldr	r2, [r3, #4]!
    1798:	cmp	r1, r3
    179c:	mul	r4, r2, r4
    17a0:	bne	1794 <read_array+0x84>
    17a4:	cmp	r4, #0
    17a8:	bgt	17d0 <read_array+0xc0>
    17ac:	mov	r0, r9
    17b0:	add	sp, sp, #596	; 0x254
    17b4:	ldrd	r4, [sp]
    17b8:	ldrd	r6, [sp, #8]
    17bc:	ldrd	r8, [sp, #16]
    17c0:	ldrd	sl, [sp, #24]
    17c4:	add	sp, sp, #32
    17c8:	pop	{pc}		; (ldr pc, [sp], #4)
    17cc:	mov	r4, #1
    17d0:	mov	r1, #0
    17d4:	add	r0, sp, #72	; 0x48
    17d8:	bl	0 <coda_cursor_goto_array_element_by_index>
    17dc:	subs	r5, r0, #0
    17e0:	bne	1828 <read_array+0x118>
    17e4:	sub	sl, r4, #1
    17e8:	b	17f8 <read_array+0xe8>
    17ec:	cmp	r5, r4
    17f0:	add	r6, r6, r8
    17f4:	bge	17ac <read_array+0x9c>
    17f8:	mov	r1, r6
    17fc:	add	r0, sp, #72	; 0x48
    1800:	blx	r7
    1804:	cmp	r0, #0
    1808:	add	r0, sp, #72	; 0x48
    180c:	bne	1828 <read_array+0x118>
    1810:	cmp	sl, r5
    1814:	add	r5, r5, #1
    1818:	ble	17ec <read_array+0xdc>
    181c:	bl	0 <coda_cursor_goto_next_array_element>
    1820:	cmp	r0, #0
    1824:	beq	17ec <read_array+0xdc>
    1828:	mvn	r9, #0
    182c:	b	17ac <read_array+0x9c>
    1830:	mov	lr, #1
    1834:	mov	r3, sp
    1838:	mov	r0, lr
    183c:	add	ip, sp, #40	; 0x28
    1840:	mov	r2, r9
    1844:	str	lr, [sp, #36]	; 0x24
    1848:	ldr	lr, [r3, #4]!
    184c:	add	r2, r2, #1
    1850:	cmp	r1, r2
    1854:	mul	r0, lr, r0
    1858:	str	r0, [ip], #4
    185c:	bgt	1848 <read_array+0x138>
    1860:	add	r3, sp, #592	; 0x250
    1864:	add	r3, r3, r1, lsl #2
    1868:	ldr	r5, [r3, #-556]	; 0xfffffdd4
    186c:	cmp	r5, #0
    1870:	ble	17ac <read_array+0x9c>
    1874:	add	r3, sp, #592	; 0x250
    1878:	add	r0, sp, #72	; 0x48
    187c:	add	r3, r3, r1, lsl #2
    1880:	mov	r1, #0
    1884:	ldr	sl, [r3, #-560]	; 0xfffffdd0
    1888:	bl	0 <coda_cursor_goto_array_element_by_index>
    188c:	subs	fp, r0, #0
    1890:	bne	1828 <read_array+0x118>
    1894:	mov	r4, fp
    1898:	mla	r1, r8, r4, r6
    189c:	add	r0, sp, #72	; 0x48
    18a0:	blx	r7
    18a4:	cmp	r0, #0
    18a8:	bne	1828 <read_array+0x118>
    18ac:	add	fp, fp, #1
    18b0:	cmp	r5, fp
    18b4:	bgt	193c <read_array+0x22c>
    18b8:	add	r4, r4, sl
    18bc:	cmp	r5, r4
    18c0:	bgt	1898 <read_array+0x188>
    18c4:	cmp	r5, fp
    18c8:	beq	17ac <read_array+0x9c>
    18cc:	ldr	r3, [sp]
    18d0:	add	r2, sp, #592	; 0x250
    18d4:	add	r2, r2, r3, lsl #2
    18d8:	subs	r1, r3, #3
    18dc:	ldr	r0, [r2, #-556]	; 0xfffffdd4
    18e0:	ldr	r2, [r2, #-564]	; 0xfffffdcc
    18e4:	sub	r2, r2, r0
    18e8:	add	r4, r4, r2
    18ec:	bmi	1898 <read_array+0x188>
    18f0:	add	r2, sp, #592	; 0x250
    18f4:	add	r2, r2, r3, lsl #2
    18f8:	ldr	r0, [r2, #-560]	; 0xfffffdd0
    18fc:	cmp	r0, r4
    1900:	bgt	1898 <read_array+0x188>
    1904:	sub	r3, r3, #-1073741822	; 0xc0000002
    1908:	add	r2, sp, #36	; 0x24
    190c:	add	r3, r2, r3, lsl #2
    1910:	b	1920 <read_array+0x210>
    1914:	ldr	r0, [r3, #4]
    1918:	cmp	r0, r4
    191c:	bgt	1898 <read_array+0x188>
    1920:	ldr	r2, [r3, #-4]!
    1924:	sub	r1, r1, #1
    1928:	cmn	r1, #1
    192c:	sub	r2, r2, r0
    1930:	add	r4, r4, r2
    1934:	bne	1914 <read_array+0x204>
    1938:	b	1898 <read_array+0x188>
    193c:	add	r0, sp, #72	; 0x48
    1940:	bl	0 <coda_cursor_goto_next_array_element>
    1944:	cmp	r0, #0
    1948:	bne	1828 <read_array+0x118>
    194c:	add	r4, r4, sl
    1950:	cmp	r4, r5
    1954:	blt	1898 <read_array+0x188>
    1958:	b	18cc <read_array+0x1bc>

0000195c <read_double_array>:
    195c:	ldr	r3, [r0, #4]
    1960:	strd	r4, [sp, #-16]!
    1964:	mov	r5, r2
    1968:	mov	r4, r0
    196c:	add	r3, r0, r3, lsl #4
    1970:	ldr	r2, [r3, #-8]
    1974:	ldr	r3, [r2]
    1978:	str	r6, [sp, #8]
    197c:	mov	r6, r1
    1980:	str	lr, [sp, #12]
    1984:	sub	sp, sp, #8
    1988:	cmp	r3, #99	; 0x63
    198c:	ldrhi	r2, [r2, #4]
    1990:	ldr	r2, [r2, #40]	; 0x28
    1994:	ldr	r2, [r2, #8]
    1998:	cmp	r2, #6
    199c:	beq	1a50 <read_double_array+0xf4>
    19a0:	cmp	r3, #101	; 0x65
    19a4:	beq	1a6c <read_double_array+0x110>
    19a8:	bls	19e4 <read_double_array+0x88>
    19ac:	cmp	r3, #103	; 0x67
    19b0:	beq	1a80 <read_double_array+0x124>
    19b4:	bcc	1ac8 <read_double_array+0x16c>
    19b8:	cmp	r3, #104	; 0x68
    19bc:	bne	1a18 <read_double_array+0xbc>
    19c0:	bl	0 <coda_netcdf_cursor_read_double_array>
    19c4:	cmp	r0, #0
    19c8:	beq	1a20 <read_double_array+0xc4>
    19cc:	mvn	r0, #0
    19d0:	add	sp, sp, #8
    19d4:	ldrd	r4, [sp]
    19d8:	ldr	r6, [sp, #8]
    19dc:	add	sp, sp, #12
    19e0:	pop	{pc}		; (ldr pc, [sp], #4)
    19e4:	cmp	r3, #1
    19e8:	beq	1a90 <read_double_array+0x134>
    19ec:	cmp	r3, #0
    19f0:	beq	1aac <read_double_array+0x150>
    19f4:	cmp	r3, #100	; 0x64
    19f8:	bne	1a20 <read_double_array+0xc4>
    19fc:	mov	r2, r5
    1a00:	add	sp, sp, #8
    1a04:	ldrd	r4, [sp]
    1a08:	ldr	r6, [sp, #8]
    1a0c:	ldr	lr, [sp, #12]
    1a10:	add	sp, sp, #16
    1a14:	b	0 <coda_mem_cursor_read_double_array>
    1a18:	cmp	r3, #105	; 0x69
    1a1c:	beq	1adc <read_double_array+0x180>
    1a20:	cmp	r5, #0
    1a24:	moveq	r0, r5
    1a28:	beq	19d0 <read_double_array+0x74>
    1a2c:	mov	r1, r6
    1a30:	mov	r0, r4
    1a34:	mov	r2, #8
    1a38:	add	sp, sp, #8
    1a3c:	ldrd	r4, [sp]
    1a40:	ldr	r6, [sp, #8]
    1a44:	ldr	lr, [sp, #12]
    1a48:	add	sp, sp, #16
    1a4c:	b	7ec <transpose_array>
    1a50:	mov	r2, r1
    1a54:	mov	r3, #8
    1a58:	str	r5, [sp]
    1a5c:	movw	r1, #0
    1a60:	movt	r1, #0
    1a64:	bl	1710 <read_array>
    1a68:	b	19d0 <read_double_array+0x74>
    1a6c:	mvn	r0, #10
    1a70:	mov	r1, #0
    1a74:	bl	0 <coda_set_error>
    1a78:	mvn	r0, #0
    1a7c:	b	19d0 <read_double_array+0x74>
    1a80:	bl	0 <coda_cdf_cursor_read_double_array>
    1a84:	cmp	r0, #0
    1a88:	beq	1a20 <read_double_array+0xc4>
    1a8c:	b	19cc <read_double_array+0x70>
    1a90:	mov	r2, r5
    1a94:	add	sp, sp, #8
    1a98:	ldrd	r4, [sp]
    1a9c:	ldr	r6, [sp, #8]
    1aa0:	ldr	lr, [sp, #12]
    1aa4:	add	sp, sp, #16
    1aa8:	b	0 <coda_bin_cursor_read_double_array>
    1aac:	mov	r2, r5
    1ab0:	add	sp, sp, #8
    1ab4:	ldrd	r4, [sp]
    1ab8:	ldr	r6, [sp, #8]
    1abc:	ldr	lr, [sp, #12]
    1ac0:	add	sp, sp, #16
    1ac4:	b	0 <coda_ascii_cursor_read_double_array>
    1ac8:	mvn	r0, #12
    1acc:	mov	r1, #0
    1ad0:	bl	0 <coda_set_error>
    1ad4:	mvn	r0, #0
    1ad8:	b	19d0 <read_double_array+0x74>
    1adc:	movw	r1, #0
    1ae0:	movt	r1, #0
    1ae4:	ldr	r3, [pc, #12]	; 1af8 <read_double_array+0x19c>
    1ae8:	movw	r0, #0
    1aec:	movt	r0, #0
    1af0:	movw	r2, #1301	; 0x515
    1af4:	bl	0 <__assert_fail>
    1af8:	.word	0x0000010c

00001afc <read_int8_partial_array>:
    1afc:	str	r4, [sp, #-8]!
    1b00:	str	lr, [sp, #4]
    1b04:	ldr	lr, [r0, #4]
    1b08:	add	ip, r0, lr, lsl #4
    1b0c:	ldr	ip, [ip, #-8]
    1b10:	ldr	ip, [ip]
    1b14:	cmp	ip, #101	; 0x65
    1b18:	beq	1b6c <read_int8_partial_array+0x70>
    1b1c:	bhi	1b48 <read_int8_partial_array+0x4c>
    1b20:	cmp	ip, #1
    1b24:	beq	1b88 <read_int8_partial_array+0x8c>
    1b28:	cmp	ip, #0
    1b2c:	beq	1b98 <read_int8_partial_array+0x9c>
    1b30:	cmp	ip, #100	; 0x64
    1b34:	bne	1bd4 <read_int8_partial_array+0xd8>
    1b38:	ldr	r4, [sp]
    1b3c:	ldr	lr, [sp, #4]
    1b40:	add	sp, sp, #8
    1b44:	b	0 <coda_mem_cursor_read_int8_partial_array>
    1b48:	cmp	ip, #103	; 0x67
    1b4c:	beq	1ba8 <read_int8_partial_array+0xac>
    1b50:	bcc	1bb8 <read_int8_partial_array+0xbc>
    1b54:	cmp	ip, #104	; 0x68
    1b58:	bne	1bd4 <read_int8_partial_array+0xd8>
    1b5c:	ldr	r4, [sp]
    1b60:	ldr	lr, [sp, #4]
    1b64:	add	sp, sp, #8
    1b68:	b	0 <coda_netcdf_cursor_read_int8_partial_array>
    1b6c:	mvn	r0, #10
    1b70:	mov	r1, #0
    1b74:	bl	0 <coda_set_error>
    1b78:	ldr	r4, [sp]
    1b7c:	add	sp, sp, #4
    1b80:	mvn	r0, #0
    1b84:	pop	{pc}		; (ldr pc, [sp], #4)
    1b88:	ldr	r4, [sp]
    1b8c:	ldr	lr, [sp, #4]
    1b90:	add	sp, sp, #8
    1b94:	b	0 <coda_bin_cursor_read_int8_partial_array>
    1b98:	ldr	r4, [sp]
    1b9c:	ldr	lr, [sp, #4]
    1ba0:	add	sp, sp, #8
    1ba4:	b	0 <coda_ascii_cursor_read_int8_partial_array>
    1ba8:	ldr	r4, [sp]
    1bac:	ldr	lr, [sp, #4]
    1bb0:	add	sp, sp, #8
    1bb4:	b	0 <coda_cdf_cursor_read_int8_partial_array>
    1bb8:	mvn	r0, #12
    1bbc:	mov	r1, #0
    1bc0:	bl	0 <coda_set_error>
    1bc4:	ldr	r4, [sp]
    1bc8:	add	sp, sp, #4
    1bcc:	mvn	r0, #0
    1bd0:	pop	{pc}		; (ldr pc, [sp], #4)
    1bd4:	movw	r1, #0
    1bd8:	movt	r1, #0
    1bdc:	ldr	r3, [pc, #12]	; 1bf0 <read_int8_partial_array+0xf4>
    1be0:	movw	r0, #0
    1be4:	movt	r0, #0
    1be8:	mov	r2, #1392	; 0x570
    1bec:	bl	0 <__assert_fail>
    1bf0:	.word	0x00000120

00001bf4 <read_uint8_partial_array>:
    1bf4:	str	r4, [sp, #-8]!
    1bf8:	str	lr, [sp, #4]
    1bfc:	ldr	lr, [r0, #4]
    1c00:	add	ip, r0, lr, lsl #4
    1c04:	ldr	ip, [ip, #-8]
    1c08:	ldr	ip, [ip]
    1c0c:	cmp	ip, #100	; 0x64
    1c10:	beq	1c5c <read_uint8_partial_array+0x68>
    1c14:	bls	1c3c <read_uint8_partial_array+0x48>
    1c18:	cmp	ip, #102	; 0x66
    1c1c:	beq	1c6c <read_uint8_partial_array+0x78>
    1c20:	bcc	1c88 <read_uint8_partial_array+0x94>
    1c24:	cmp	ip, #103	; 0x67
    1c28:	bne	1cb4 <read_uint8_partial_array+0xc0>
    1c2c:	ldr	r4, [sp]
    1c30:	ldr	lr, [sp, #4]
    1c34:	add	sp, sp, #8
    1c38:	b	0 <coda_cdf_cursor_read_uint8_partial_array>
    1c3c:	cmp	ip, #0
    1c40:	beq	1ca4 <read_uint8_partial_array+0xb0>
    1c44:	cmp	ip, #1
    1c48:	bne	1cb4 <read_uint8_partial_array+0xc0>
    1c4c:	ldr	r4, [sp]
    1c50:	ldr	lr, [sp, #4]
    1c54:	add	sp, sp, #8
    1c58:	b	0 <coda_bin_cursor_read_uint8_partial_array>
    1c5c:	ldr	r4, [sp]
    1c60:	ldr	lr, [sp, #4]
    1c64:	add	sp, sp, #8
    1c68:	b	0 <coda_mem_cursor_read_uint8_partial_array>
    1c6c:	mvn	r0, #12
    1c70:	mov	r1, #0
    1c74:	bl	0 <coda_set_error>
    1c78:	ldr	r4, [sp]
    1c7c:	add	sp, sp, #4
    1c80:	mvn	r0, #0
    1c84:	pop	{pc}		; (ldr pc, [sp], #4)
    1c88:	mvn	r0, #10
    1c8c:	mov	r1, #0
    1c90:	bl	0 <coda_set_error>
    1c94:	ldr	r4, [sp]
    1c98:	add	sp, sp, #4
    1c9c:	mvn	r0, #0
    1ca0:	pop	{pc}		; (ldr pc, [sp], #4)
    1ca4:	ldr	r4, [sp]
    1ca8:	ldr	lr, [sp, #4]
    1cac:	add	sp, sp, #8
    1cb0:	b	0 <coda_ascii_cursor_read_uint8_partial_array>
    1cb4:	movw	r1, #0
    1cb8:	movt	r1, #0
    1cbc:	ldr	r3, [pc, #12]	; 1cd0 <read_uint8_partial_array+0xdc>
    1cc0:	movw	r0, #0
    1cc4:	movt	r0, #0
    1cc8:	movw	r2, #1427	; 0x593
    1ccc:	bl	0 <__assert_fail>
    1cd0:	.word	0x00000138

00001cd4 <read_int16_partial_array>:
    1cd4:	str	r4, [sp, #-8]!
    1cd8:	str	lr, [sp, #4]
    1cdc:	ldr	lr, [r0, #4]
    1ce0:	add	ip, r0, lr, lsl #4
    1ce4:	ldr	ip, [ip, #-8]
    1ce8:	ldr	ip, [ip]
    1cec:	cmp	ip, #101	; 0x65
    1cf0:	beq	1d44 <read_int16_partial_array+0x70>
    1cf4:	bhi	1d20 <read_int16_partial_array+0x4c>
    1cf8:	cmp	ip, #1
    1cfc:	beq	1d60 <read_int16_partial_array+0x8c>
    1d00:	cmp	ip, #0
    1d04:	beq	1d70 <read_int16_partial_array+0x9c>
    1d08:	cmp	ip, #100	; 0x64
    1d0c:	bne	1dac <read_int16_partial_array+0xd8>
    1d10:	ldr	r4, [sp]
    1d14:	ldr	lr, [sp, #4]
    1d18:	add	sp, sp, #8
    1d1c:	b	0 <coda_mem_cursor_read_int16_partial_array>
    1d20:	cmp	ip, #103	; 0x67
    1d24:	beq	1d80 <read_int16_partial_array+0xac>
    1d28:	bcc	1d90 <read_int16_partial_array+0xbc>
    1d2c:	cmp	ip, #104	; 0x68
    1d30:	bne	1dac <read_int16_partial_array+0xd8>
    1d34:	ldr	r4, [sp]
    1d38:	ldr	lr, [sp, #4]
    1d3c:	add	sp, sp, #8
    1d40:	b	0 <coda_netcdf_cursor_read_int16_partial_array>
    1d44:	mvn	r0, #10
    1d48:	mov	r1, #0
    1d4c:	bl	0 <coda_set_error>
    1d50:	ldr	r4, [sp]
    1d54:	add	sp, sp, #4
    1d58:	mvn	r0, #0
    1d5c:	pop	{pc}		; (ldr pc, [sp], #4)
    1d60:	ldr	r4, [sp]
    1d64:	ldr	lr, [sp, #4]
    1d68:	add	sp, sp, #8
    1d6c:	b	0 <coda_bin_cursor_read_int16_partial_array>
    1d70:	ldr	r4, [sp]
    1d74:	ldr	lr, [sp, #4]
    1d78:	add	sp, sp, #8
    1d7c:	b	0 <coda_ascii_cursor_read_int16_partial_array>
    1d80:	ldr	r4, [sp]
    1d84:	ldr	lr, [sp, #4]
    1d88:	add	sp, sp, #8
    1d8c:	b	0 <coda_cdf_cursor_read_int16_partial_array>
    1d90:	mvn	r0, #12
    1d94:	mov	r1, #0
    1d98:	bl	0 <coda_set_error>
    1d9c:	ldr	r4, [sp]
    1da0:	add	sp, sp, #4
    1da4:	mvn	r0, #0
    1da8:	pop	{pc}		; (ldr pc, [sp], #4)
    1dac:	movw	r1, #0
    1db0:	movt	r1, #0
    1db4:	ldr	r3, [pc, #12]	; 1dc8 <read_int16_partial_array+0xf4>
    1db8:	movw	r0, #0
    1dbc:	movt	r0, #0
    1dc0:	movw	r2, #1463	; 0x5b7
    1dc4:	bl	0 <__assert_fail>
    1dc8:	.word	0x00000154

00001dcc <read_uint16_partial_array>:
    1dcc:	str	r4, [sp, #-8]!
    1dd0:	str	lr, [sp, #4]
    1dd4:	ldr	lr, [r0, #4]
    1dd8:	add	ip, r0, lr, lsl #4
    1ddc:	ldr	ip, [ip, #-8]
    1de0:	ldr	ip, [ip]
    1de4:	cmp	ip, #100	; 0x64
    1de8:	beq	1e34 <read_uint16_partial_array+0x68>
    1dec:	bls	1e14 <read_uint16_partial_array+0x48>
    1df0:	cmp	ip, #102	; 0x66
    1df4:	beq	1e44 <read_uint16_partial_array+0x78>
    1df8:	bcc	1e60 <read_uint16_partial_array+0x94>
    1dfc:	cmp	ip, #103	; 0x67
    1e00:	bne	1e8c <read_uint16_partial_array+0xc0>
    1e04:	ldr	r4, [sp]
    1e08:	ldr	lr, [sp, #4]
    1e0c:	add	sp, sp, #8
    1e10:	b	0 <coda_cdf_cursor_read_uint16_partial_array>
    1e14:	cmp	ip, #0
    1e18:	beq	1e7c <read_uint16_partial_array+0xb0>
    1e1c:	cmp	ip, #1
    1e20:	bne	1e8c <read_uint16_partial_array+0xc0>
    1e24:	ldr	r4, [sp]
    1e28:	ldr	lr, [sp, #4]
    1e2c:	add	sp, sp, #8
    1e30:	b	0 <coda_bin_cursor_read_uint16_partial_array>
    1e34:	ldr	r4, [sp]
    1e38:	ldr	lr, [sp, #4]
    1e3c:	add	sp, sp, #8
    1e40:	b	0 <coda_mem_cursor_read_uint16_partial_array>
    1e44:	mvn	r0, #12
    1e48:	mov	r1, #0
    1e4c:	bl	0 <coda_set_error>
    1e50:	ldr	r4, [sp]
    1e54:	add	sp, sp, #4
    1e58:	mvn	r0, #0
    1e5c:	pop	{pc}		; (ldr pc, [sp], #4)
    1e60:	mvn	r0, #10
    1e64:	mov	r1, #0
    1e68:	bl	0 <coda_set_error>
    1e6c:	ldr	r4, [sp]
    1e70:	add	sp, sp, #4
    1e74:	mvn	r0, #0
    1e78:	pop	{pc}		; (ldr pc, [sp], #4)
    1e7c:	ldr	r4, [sp]
    1e80:	ldr	lr, [sp, #4]
    1e84:	add	sp, sp, #8
    1e88:	b	0 <coda_ascii_cursor_read_uint16_partial_array>
    1e8c:	movw	r1, #0
    1e90:	movt	r1, #0
    1e94:	ldr	r3, [pc, #12]	; 1ea8 <read_uint16_partial_array+0xdc>
    1e98:	movw	r0, #0
    1e9c:	movt	r0, #0
    1ea0:	movw	r2, #1498	; 0x5da
    1ea4:	bl	0 <__assert_fail>
    1ea8:	.word	0x00000170

00001eac <read_int32_partial_array>:
    1eac:	str	r4, [sp, #-8]!
    1eb0:	str	lr, [sp, #4]
    1eb4:	ldr	lr, [r0, #4]
    1eb8:	add	ip, r0, lr, lsl #4
    1ebc:	ldr	ip, [ip, #-8]
    1ec0:	ldr	ip, [ip]
    1ec4:	cmp	ip, #101	; 0x65
    1ec8:	beq	1f1c <read_int32_partial_array+0x70>
    1ecc:	bhi	1ef8 <read_int32_partial_array+0x4c>
    1ed0:	cmp	ip, #1
    1ed4:	beq	1f38 <read_int32_partial_array+0x8c>
    1ed8:	cmp	ip, #0
    1edc:	beq	1f48 <read_int32_partial_array+0x9c>
    1ee0:	cmp	ip, #100	; 0x64
    1ee4:	bne	1f84 <read_int32_partial_array+0xd8>
    1ee8:	ldr	r4, [sp]
    1eec:	ldr	lr, [sp, #4]
    1ef0:	add	sp, sp, #8
    1ef4:	b	0 <coda_mem_cursor_read_int32_partial_array>
    1ef8:	cmp	ip, #103	; 0x67
    1efc:	beq	1f58 <read_int32_partial_array+0xac>
    1f00:	bcc	1f68 <read_int32_partial_array+0xbc>
    1f04:	cmp	ip, #104	; 0x68
    1f08:	bne	1f84 <read_int32_partial_array+0xd8>
    1f0c:	ldr	r4, [sp]
    1f10:	ldr	lr, [sp, #4]
    1f14:	add	sp, sp, #8
    1f18:	b	0 <coda_netcdf_cursor_read_int32_partial_array>
    1f1c:	mvn	r0, #10
    1f20:	mov	r1, #0
    1f24:	bl	0 <coda_set_error>
    1f28:	ldr	r4, [sp]
    1f2c:	add	sp, sp, #4
    1f30:	mvn	r0, #0
    1f34:	pop	{pc}		; (ldr pc, [sp], #4)
    1f38:	ldr	r4, [sp]
    1f3c:	ldr	lr, [sp, #4]
    1f40:	add	sp, sp, #8
    1f44:	b	0 <coda_bin_cursor_read_int32_partial_array>
    1f48:	ldr	r4, [sp]
    1f4c:	ldr	lr, [sp, #4]
    1f50:	add	sp, sp, #8
    1f54:	b	0 <coda_ascii_cursor_read_int32_partial_array>
    1f58:	ldr	r4, [sp]
    1f5c:	ldr	lr, [sp, #4]
    1f60:	add	sp, sp, #8
    1f64:	b	0 <coda_cdf_cursor_read_int32_partial_array>
    1f68:	mvn	r0, #12
    1f6c:	mov	r1, #0
    1f70:	bl	0 <coda_set_error>
    1f74:	ldr	r4, [sp]
    1f78:	add	sp, sp, #4
    1f7c:	mvn	r0, #0
    1f80:	pop	{pc}		; (ldr pc, [sp], #4)
    1f84:	movw	r1, #0
    1f88:	movt	r1, #0
    1f8c:	ldr	r3, [pc, #12]	; 1fa0 <read_int32_partial_array+0xf4>
    1f90:	movw	r0, #0
    1f94:	movt	r0, #0
    1f98:	movw	r2, #1534	; 0x5fe
    1f9c:	bl	0 <__assert_fail>
    1fa0:	.word	0x0000018c

00001fa4 <read_uint32_partial_array>:
    1fa4:	str	r4, [sp, #-8]!
    1fa8:	str	lr, [sp, #4]
    1fac:	ldr	lr, [r0, #4]
    1fb0:	add	ip, r0, lr, lsl #4
    1fb4:	ldr	ip, [ip, #-8]
    1fb8:	ldr	ip, [ip]
    1fbc:	cmp	ip, #100	; 0x64
    1fc0:	beq	200c <read_uint32_partial_array+0x68>
    1fc4:	bls	1fec <read_uint32_partial_array+0x48>
    1fc8:	cmp	ip, #102	; 0x66
    1fcc:	beq	201c <read_uint32_partial_array+0x78>
    1fd0:	bcc	2038 <read_uint32_partial_array+0x94>
    1fd4:	cmp	ip, #103	; 0x67
    1fd8:	bne	2064 <read_uint32_partial_array+0xc0>
    1fdc:	ldr	r4, [sp]
    1fe0:	ldr	lr, [sp, #4]
    1fe4:	add	sp, sp, #8
    1fe8:	b	0 <coda_cdf_cursor_read_uint32_partial_array>
    1fec:	cmp	ip, #0
    1ff0:	beq	2054 <read_uint32_partial_array+0xb0>
    1ff4:	cmp	ip, #1
    1ff8:	bne	2064 <read_uint32_partial_array+0xc0>
    1ffc:	ldr	r4, [sp]
    2000:	ldr	lr, [sp, #4]
    2004:	add	sp, sp, #8
    2008:	b	0 <coda_bin_cursor_read_uint32_partial_array>
    200c:	ldr	r4, [sp]
    2010:	ldr	lr, [sp, #4]
    2014:	add	sp, sp, #8
    2018:	b	0 <coda_mem_cursor_read_uint32_partial_array>
    201c:	mvn	r0, #12
    2020:	mov	r1, #0
    2024:	bl	0 <coda_set_error>
    2028:	ldr	r4, [sp]
    202c:	add	sp, sp, #4
    2030:	mvn	r0, #0
    2034:	pop	{pc}		; (ldr pc, [sp], #4)
    2038:	mvn	r0, #10
    203c:	mov	r1, #0
    2040:	bl	0 <coda_set_error>
    2044:	ldr	r4, [sp]
    2048:	add	sp, sp, #4
    204c:	mvn	r0, #0
    2050:	pop	{pc}		; (ldr pc, [sp], #4)
    2054:	ldr	r4, [sp]
    2058:	ldr	lr, [sp, #4]
    205c:	add	sp, sp, #8
    2060:	b	0 <coda_ascii_cursor_read_uint32_partial_array>
    2064:	movw	r1, #0
    2068:	movt	r1, #0
    206c:	ldr	r3, [pc, #12]	; 2080 <read_uint32_partial_array+0xdc>
    2070:	movw	r0, #0
    2074:	movt	r0, #0
    2078:	movw	r2, #1569	; 0x621
    207c:	bl	0 <__assert_fail>
    2080:	.word	0x000001a8

00002084 <read_int64_partial_array>:
    2084:	str	r4, [sp, #-8]!
    2088:	str	lr, [sp, #4]
    208c:	ldr	lr, [r0, #4]
    2090:	add	ip, r0, lr, lsl #4
    2094:	ldr	ip, [ip, #-8]
    2098:	ldr	ip, [ip]
    209c:	cmp	ip, #100	; 0x64
    20a0:	beq	20ec <read_int64_partial_array+0x68>
    20a4:	bls	20cc <read_int64_partial_array+0x48>
    20a8:	cmp	ip, #102	; 0x66
    20ac:	beq	20fc <read_int64_partial_array+0x78>
    20b0:	bcc	2118 <read_int64_partial_array+0x94>
    20b4:	cmp	ip, #103	; 0x67
    20b8:	bne	2144 <read_int64_partial_array+0xc0>
    20bc:	ldr	r4, [sp]
    20c0:	ldr	lr, [sp, #4]
    20c4:	add	sp, sp, #8
    20c8:	b	0 <coda_cdf_cursor_read_int64_partial_array>
    20cc:	cmp	ip, #0
    20d0:	beq	2134 <read_int64_partial_array+0xb0>
    20d4:	cmp	ip, #1
    20d8:	bne	2144 <read_int64_partial_array+0xc0>
    20dc:	ldr	r4, [sp]
    20e0:	ldr	lr, [sp, #4]
    20e4:	add	sp, sp, #8
    20e8:	b	0 <coda_bin_cursor_read_int64_partial_array>
    20ec:	ldr	r4, [sp]
    20f0:	ldr	lr, [sp, #4]
    20f4:	add	sp, sp, #8
    20f8:	b	0 <coda_mem_cursor_read_int64_partial_array>
    20fc:	mvn	r0, #12
    2100:	mov	r1, #0
    2104:	bl	0 <coda_set_error>
    2108:	ldr	r4, [sp]
    210c:	add	sp, sp, #4
    2110:	mvn	r0, #0
    2114:	pop	{pc}		; (ldr pc, [sp], #4)
    2118:	mvn	r0, #10
    211c:	mov	r1, #0
    2120:	bl	0 <coda_set_error>
    2124:	ldr	r4, [sp]
    2128:	add	sp, sp, #4
    212c:	mvn	r0, #0
    2130:	pop	{pc}		; (ldr pc, [sp], #4)
    2134:	ldr	r4, [sp]
    2138:	ldr	lr, [sp, #4]
    213c:	add	sp, sp, #8
    2140:	b	0 <coda_ascii_cursor_read_int64_partial_array>
    2144:	movw	r1, #0
    2148:	movt	r1, #0
    214c:	ldr	r3, [pc, #12]	; 2160 <read_int64_partial_array+0xdc>
    2150:	movw	r0, #0
    2154:	movt	r0, #0
    2158:	movw	r2, #1604	; 0x644
    215c:	bl	0 <__assert_fail>
    2160:	.word	0x000001c4

00002164 <read_uint64_partial_array>:
    2164:	str	r4, [sp, #-8]!
    2168:	str	lr, [sp, #4]
    216c:	ldr	lr, [r0, #4]
    2170:	add	ip, r0, lr, lsl #4
    2174:	ldr	ip, [ip, #-8]
    2178:	ldr	ip, [ip]
    217c:	cmp	ip, #100	; 0x64
    2180:	beq	21d4 <read_uint64_partial_array+0x70>
    2184:	bhi	21a8 <read_uint64_partial_array+0x44>
    2188:	cmp	ip, #0
    218c:	beq	21e4 <read_uint64_partial_array+0x80>
    2190:	cmp	ip, #1
    2194:	bne	2210 <read_uint64_partial_array+0xac>
    2198:	ldr	r4, [sp]
    219c:	ldr	lr, [sp, #4]
    21a0:	add	sp, sp, #8
    21a4:	b	0 <coda_bin_cursor_read_uint64_partial_array>
    21a8:	cmp	ip, #101	; 0x65
    21ac:	beq	21f4 <read_uint64_partial_array+0x90>
    21b0:	cmp	ip, #102	; 0x66
    21b4:	bne	2210 <read_uint64_partial_array+0xac>
    21b8:	mvn	r0, #12
    21bc:	mov	r1, #0
    21c0:	bl	0 <coda_set_error>
    21c4:	ldr	r4, [sp]
    21c8:	add	sp, sp, #4
    21cc:	mvn	r0, #0
    21d0:	pop	{pc}		; (ldr pc, [sp], #4)
    21d4:	ldr	r4, [sp]
    21d8:	ldr	lr, [sp, #4]
    21dc:	add	sp, sp, #8
    21e0:	b	0 <coda_mem_cursor_read_uint64_partial_array>
    21e4:	ldr	r4, [sp]
    21e8:	ldr	lr, [sp, #4]
    21ec:	add	sp, sp, #8
    21f0:	b	0 <coda_ascii_cursor_read_uint64_partial_array>
    21f4:	mvn	r0, #10
    21f8:	mov	r1, #0
    21fc:	bl	0 <coda_set_error>
    2200:	ldr	r4, [sp]
    2204:	add	sp, sp, #4
    2208:	mvn	r0, #0
    220c:	pop	{pc}		; (ldr pc, [sp], #4)
    2210:	movw	r1, #0
    2214:	movt	r1, #0
    2218:	ldr	r3, [pc, #12]	; 222c <read_uint64_partial_array+0xc8>
    221c:	movw	r0, #0
    2220:	movt	r0, #0
    2224:	movw	r2, #1638	; 0x666
    2228:	bl	0 <__assert_fail>
    222c:	.word	0x000001e0

00002230 <read_float_partial_array>:
    2230:	str	r4, [sp, #-8]!
    2234:	str	lr, [sp, #4]
    2238:	ldr	lr, [r0, #4]
    223c:	add	ip, r0, lr, lsl #4
    2240:	ldr	ip, [ip, #-8]
    2244:	ldr	ip, [ip]
    2248:	cmp	ip, #101	; 0x65
    224c:	beq	22a8 <read_float_partial_array+0x78>
    2250:	bls	2280 <read_float_partial_array+0x50>
    2254:	cmp	ip, #103	; 0x67
    2258:	beq	22c4 <read_float_partial_array+0x94>
    225c:	bcc	22d4 <read_float_partial_array+0xa4>
    2260:	cmp	ip, #104	; 0x68
    2264:	beq	22f0 <read_float_partial_array+0xc0>
    2268:	cmp	ip, #105	; 0x69
    226c:	bne	2320 <read_float_partial_array+0xf0>
    2270:	ldr	r4, [sp]
    2274:	ldr	lr, [sp, #4]
    2278:	add	sp, sp, #8
    227c:	b	0 <coda_grib_cursor_read_float_partial_array>
    2280:	cmp	ip, #1
    2284:	beq	2300 <read_float_partial_array+0xd0>
    2288:	cmp	ip, #0
    228c:	beq	2310 <read_float_partial_array+0xe0>
    2290:	cmp	ip, #100	; 0x64
    2294:	bne	2320 <read_float_partial_array+0xf0>
    2298:	ldr	r4, [sp]
    229c:	ldr	lr, [sp, #4]
    22a0:	add	sp, sp, #8
    22a4:	b	0 <coda_mem_cursor_read_float_partial_array>
    22a8:	mvn	r0, #10
    22ac:	mov	r1, #0
    22b0:	bl	0 <coda_set_error>
    22b4:	ldr	r4, [sp]
    22b8:	add	sp, sp, #4
    22bc:	mvn	r0, #0
    22c0:	pop	{pc}		; (ldr pc, [sp], #4)
    22c4:	ldr	r4, [sp]
    22c8:	ldr	lr, [sp, #4]
    22cc:	add	sp, sp, #8
    22d0:	b	0 <coda_cdf_cursor_read_float_partial_array>
    22d4:	mvn	r0, #12
    22d8:	mov	r1, #0
    22dc:	bl	0 <coda_set_error>
    22e0:	ldr	r4, [sp]
    22e4:	add	sp, sp, #4
    22e8:	mvn	r0, #0
    22ec:	pop	{pc}		; (ldr pc, [sp], #4)
    22f0:	ldr	r4, [sp]
    22f4:	ldr	lr, [sp, #4]
    22f8:	add	sp, sp, #8
    22fc:	b	0 <coda_netcdf_cursor_read_float_partial_array>
    2300:	ldr	r4, [sp]
    2304:	ldr	lr, [sp, #4]
    2308:	add	sp, sp, #8
    230c:	b	0 <coda_bin_cursor_read_float_partial_array>
    2310:	ldr	r4, [sp]
    2314:	ldr	lr, [sp, #4]
    2318:	add	sp, sp, #8
    231c:	b	0 <coda_ascii_cursor_read_float_partial_array>
    2320:	movw	r1, #0
    2324:	movt	r1, #0
    2328:	ldr	r3, [pc, #12]	; 233c <read_float_partial_array+0x10c>
    232c:	movw	r0, #0
    2330:	movt	r0, #0
    2334:	movw	r2, #1674	; 0x68a
    2338:	bl	0 <__assert_fail>
    233c:	.word	0x000001fc

00002340 <read_uint64>:
    2340:	ldr	r2, [r0, #4]
    2344:	add	r3, r0, r2, lsl #4
    2348:	ldr	r3, [r3, #-8]
    234c:	ldr	r3, [r3]
    2350:	cmp	r3, #100	; 0x64
    2354:	beq	23b0 <read_uint64+0x70>
    2358:	str	r4, [sp, #-8]!
    235c:	str	lr, [sp, #4]
    2360:	bhi	2384 <read_uint64+0x44>
    2364:	cmp	r3, #0
    2368:	beq	23b4 <read_uint64+0x74>
    236c:	cmp	r3, #1
    2370:	bne	23e0 <read_uint64+0xa0>
    2374:	ldr	r4, [sp]
    2378:	ldr	lr, [sp, #4]
    237c:	add	sp, sp, #8
    2380:	b	0 <coda_bin_cursor_read_uint64>
    2384:	cmp	r3, #101	; 0x65
    2388:	beq	23c4 <read_uint64+0x84>
    238c:	cmp	r3, #102	; 0x66
    2390:	bne	23e0 <read_uint64+0xa0>
    2394:	mvn	r0, #12
    2398:	mov	r1, #0
    239c:	bl	0 <coda_set_error>
    23a0:	ldr	r4, [sp]
    23a4:	add	sp, sp, #4
    23a8:	mvn	r0, #0
    23ac:	pop	{pc}		; (ldr pc, [sp], #4)
    23b0:	b	0 <coda_mem_cursor_read_uint64>
    23b4:	ldr	r4, [sp]
    23b8:	ldr	lr, [sp, #4]
    23bc:	add	sp, sp, #8
    23c0:	b	0 <coda_ascii_cursor_read_uint64>
    23c4:	mvn	r0, #10
    23c8:	mov	r1, #0
    23cc:	bl	0 <coda_set_error>
    23d0:	ldr	r4, [sp]
    23d4:	add	sp, sp, #4
    23d8:	mvn	r0, #0
    23dc:	pop	{pc}		; (ldr pc, [sp], #4)
    23e0:	movw	r1, #0
    23e4:	movt	r1, #0
    23e8:	ldr	r3, [pc, #12]	; 23fc <read_uint64+0xbc>
    23ec:	movw	r0, #0
    23f0:	movt	r0, #0
    23f4:	movw	r2, #606	; 0x25e
    23f8:	bl	0 <__assert_fail>
    23fc:	.word	0x00000218

00002400 <coda_cursor_read_int8>:
    2400:	cmp	r0, #0
    2404:	str	r4, [sp, #-8]!
    2408:	str	lr, [sp, #4]
    240c:	beq	24cc <coda_cursor_read_int8+0xcc>
    2410:	ldr	r3, [r0, #4]
    2414:	cmp	r3, #0
    2418:	ble	24cc <coda_cursor_read_int8+0xcc>
    241c:	add	r3, r0, r3, lsl #4
    2420:	ldr	r3, [r3, #-8]
    2424:	cmp	r3, #0
    2428:	beq	24cc <coda_cursor_read_int8+0xcc>
    242c:	cmp	r1, #0
    2430:	beq	24f0 <coda_cursor_read_int8+0xf0>
    2434:	ldr	r2, [r3]
    2438:	cmp	r2, #99	; 0x63
    243c:	ldrhi	r3, [r3, #4]
    2440:	ldr	r2, [r3, #8]
    2444:	sub	r2, r2, #2
    2448:	cmp	r2, #1
    244c:	bls	2478 <coda_cursor_read_int8+0x78>
    2450:	ldr	r3, [r3, #12]
    2454:	cmp	r3, #0
    2458:	bne	24a0 <coda_cursor_read_int8+0xa0>
    245c:	bl	0 <read_int8>
    2460:	adds	r0, r0, #0
    2464:	movne	r0, #1
    2468:	rsb	r0, r0, #0
    246c:	ldr	r4, [sp]
    2470:	add	sp, sp, #4
    2474:	pop	{pc}		; (ldr pc, [sp], #4)
    2478:	ldr	r2, [pc, #148]	; 2514 <coda_cursor_read_int8+0x114>
    247c:	mrc	15, 0, ip, cr13, cr0, {3}
    2480:	ldr	r2, [pc, r2]
    2484:	ldr	r2, [ip, r2]
    2488:	cmp	r2, #0
    248c:	beq	2450 <coda_cursor_read_int8+0x50>
    2490:	ldr	r2, [r3, #48]	; 0x30
    2494:	cmp	r2, #0
    2498:	movne	r3, #9
    249c:	beq	2450 <coda_cursor_read_int8+0x50>
    24a0:	mov	r0, r3
    24a4:	bl	0 <coda_type_get_native_type_name>
    24a8:	mov	r2, r0
    24ac:	movw	r1, #0
    24b0:	movt	r1, #0
    24b4:	mvn	r0, #104	; 0x68
    24b8:	bl	0 <coda_set_error>
    24bc:	ldr	r4, [sp]
    24c0:	add	sp, sp, #4
    24c4:	mvn	r0, #0
    24c8:	pop	{pc}		; (ldr pc, [sp], #4)
    24cc:	mvn	r0, #99	; 0x63
    24d0:	movw	r2, #0
    24d4:	movt	r2, #0
    24d8:	movw	r1, #0
    24dc:	movt	r1, #0
    24e0:	movw	r3, #1773	; 0x6ed
    24e4:	bl	0 <coda_set_error>
    24e8:	mvn	r0, #0
    24ec:	b	246c <coda_cursor_read_int8+0x6c>
    24f0:	mvn	r0, #99	; 0x63
    24f4:	movw	r2, #0
    24f8:	movt	r2, #0
    24fc:	movw	r1, #0
    2500:	movt	r1, #0
    2504:	movw	r3, #1778	; 0x6f2
    2508:	bl	0 <coda_set_error>
    250c:	mvn	r0, #0
    2510:	b	246c <coda_cursor_read_int8+0x6c>
    2514:	.word	0x0000008c

00002518 <coda_cursor_read_uint8>:
    2518:	cmp	r0, #0
    251c:	str	r4, [sp, #-8]!
    2520:	str	lr, [sp, #4]
    2524:	beq	25e4 <coda_cursor_read_uint8+0xcc>
    2528:	ldr	r3, [r0, #4]
    252c:	cmp	r3, #0
    2530:	ble	25e4 <coda_cursor_read_uint8+0xcc>
    2534:	add	r3, r0, r3, lsl #4
    2538:	ldr	r3, [r3, #-8]
    253c:	cmp	r3, #0
    2540:	beq	25e4 <coda_cursor_read_uint8+0xcc>
    2544:	cmp	r1, #0
    2548:	beq	2608 <coda_cursor_read_uint8+0xf0>
    254c:	ldr	r2, [r3]
    2550:	cmp	r2, #99	; 0x63
    2554:	ldrhi	r3, [r3, #4]
    2558:	ldr	r2, [r3, #8]
    255c:	sub	r2, r2, #2
    2560:	cmp	r2, #1
    2564:	bls	2590 <coda_cursor_read_uint8+0x78>
    2568:	ldr	r3, [r3, #12]
    256c:	cmp	r3, #1
    2570:	bne	25b8 <coda_cursor_read_uint8+0xa0>
    2574:	bl	f8 <read_uint8>
    2578:	adds	r0, r0, #0
    257c:	movne	r0, #1
    2580:	rsb	r0, r0, #0
    2584:	ldr	r4, [sp]
    2588:	add	sp, sp, #4
    258c:	pop	{pc}		; (ldr pc, [sp], #4)
    2590:	ldr	r2, [pc, #148]	; 262c <coda_cursor_read_uint8+0x114>
    2594:	mrc	15, 0, ip, cr13, cr0, {3}
    2598:	ldr	r2, [pc, r2]
    259c:	ldr	r2, [ip, r2]
    25a0:	cmp	r2, #0
    25a4:	beq	2568 <coda_cursor_read_uint8+0x50>
    25a8:	ldr	r2, [r3, #48]	; 0x30
    25ac:	cmp	r2, #0
    25b0:	movne	r3, #9
    25b4:	beq	2568 <coda_cursor_read_uint8+0x50>
    25b8:	mov	r0, r3
    25bc:	bl	0 <coda_type_get_native_type_name>
    25c0:	mov	r2, r0
    25c4:	movw	r1, #0
    25c8:	movt	r1, #0
    25cc:	mvn	r0, #104	; 0x68
    25d0:	bl	0 <coda_set_error>
    25d4:	ldr	r4, [sp]
    25d8:	add	sp, sp, #4
    25dc:	mvn	r0, #0
    25e0:	pop	{pc}		; (ldr pc, [sp], #4)
    25e4:	mvn	r0, #99	; 0x63
    25e8:	movw	r2, #0
    25ec:	movt	r2, #0
    25f0:	movw	r1, #0
    25f4:	movt	r1, #0
    25f8:	movw	r3, #1820	; 0x71c
    25fc:	bl	0 <coda_set_error>
    2600:	mvn	r0, #0
    2604:	b	2584 <coda_cursor_read_uint8+0x6c>
    2608:	mvn	r0, #99	; 0x63
    260c:	movw	r2, #0
    2610:	movt	r2, #0
    2614:	movw	r1, #0
    2618:	movt	r1, #0
    261c:	movw	r3, #1825	; 0x721
    2620:	bl	0 <coda_set_error>
    2624:	mvn	r0, #0
    2628:	b	2584 <coda_cursor_read_uint8+0x6c>
    262c:	.word	0x0000008c

00002630 <coda_cursor_read_int16>:
    2630:	cmp	r0, #0
    2634:	str	r4, [sp, #-8]!
    2638:	str	lr, [sp, #4]
    263c:	sub	sp, sp, #8
    2640:	beq	2774 <coda_cursor_read_int16+0x144>
    2644:	ldr	r3, [r0, #4]
    2648:	cmp	r3, #0
    264c:	ble	2774 <coda_cursor_read_int16+0x144>
    2650:	add	r3, r0, r3, lsl #4
    2654:	ldr	r3, [r3, #-8]
    2658:	cmp	r3, #0
    265c:	beq	2774 <coda_cursor_read_int16+0x144>
    2660:	cmp	r1, #0
    2664:	mov	r4, r1
    2668:	beq	2798 <coda_cursor_read_int16+0x168>
    266c:	ldr	r2, [r3]
    2670:	cmp	r2, #99	; 0x63
    2674:	ldrhi	r3, [r3, #4]
    2678:	ldr	r2, [r3, #8]
    267c:	sub	r2, r2, #2
    2680:	cmp	r2, #1
    2684:	bls	26d4 <coda_cursor_read_int16+0xa4>
    2688:	ldr	r3, [r3, #12]
    268c:	cmp	r3, #1
    2690:	beq	274c <coda_cursor_read_int16+0x11c>
    2694:	cmp	r3, #2
    2698:	beq	2728 <coda_cursor_read_int16+0xf8>
    269c:	cmp	r3, #0
    26a0:	beq	2700 <coda_cursor_read_int16+0xd0>
    26a4:	mov	r0, r3
    26a8:	bl	0 <coda_type_get_native_type_name>
    26ac:	mov	r2, r0
    26b0:	movw	r1, #0
    26b4:	movt	r1, #0
    26b8:	mvn	r0, #104	; 0x68
    26bc:	bl	0 <coda_set_error>
    26c0:	mvn	r0, #0
    26c4:	add	sp, sp, #8
    26c8:	ldr	r4, [sp]
    26cc:	add	sp, sp, #4
    26d0:	pop	{pc}		; (ldr pc, [sp], #4)
    26d4:	ldr	r2, [pc, #224]	; 27bc <coda_cursor_read_int16+0x18c>
    26d8:	mrc	15, 0, r1, cr13, cr0, {3}
    26dc:	ldr	r2, [pc, r2]
    26e0:	ldr	r2, [r1, r2]
    26e4:	cmp	r2, #0
    26e8:	beq	2688 <coda_cursor_read_int16+0x58>
    26ec:	ldr	r2, [r3, #48]	; 0x30
    26f0:	cmp	r2, #0
    26f4:	movne	r3, #9
    26f8:	bne	26a4 <coda_cursor_read_int16+0x74>
    26fc:	b	2688 <coda_cursor_read_int16+0x58>
    2700:	add	r1, sp, #7
    2704:	bl	0 <read_int8>
    2708:	cmp	r0, #0
    270c:	bne	26c0 <coda_cursor_read_int16+0x90>
    2710:	ldrsb	r3, [sp, #7]
    2714:	strh	r3, [r4]
    2718:	add	sp, sp, #8
    271c:	ldr	r4, [sp]
    2720:	add	sp, sp, #4
    2724:	pop	{pc}		; (ldr pc, [sp], #4)
    2728:	mov	r1, r4
    272c:	bl	1cc <read_int16>
    2730:	adds	r0, r0, #0
    2734:	movne	r0, #1
    2738:	rsb	r0, r0, #0
    273c:	add	sp, sp, #8
    2740:	ldr	r4, [sp]
    2744:	add	sp, sp, #4
    2748:	pop	{pc}		; (ldr pc, [sp], #4)
    274c:	add	r1, sp, #7
    2750:	bl	f8 <read_uint8>
    2754:	cmp	r0, #0
    2758:	bne	26c0 <coda_cursor_read_int16+0x90>
    275c:	ldrb	r3, [sp, #7]
    2760:	strh	r3, [r4]
    2764:	add	sp, sp, #8
    2768:	ldr	r4, [sp]
    276c:	add	sp, sp, #4
    2770:	pop	{pc}		; (ldr pc, [sp], #4)
    2774:	mvn	r0, #99	; 0x63
    2778:	movw	r2, #0
    277c:	movt	r2, #0
    2780:	movw	r1, #0
    2784:	movt	r1, #0
    2788:	movw	r3, #1869	; 0x74d
    278c:	bl	0 <coda_set_error>
    2790:	mvn	r0, #0
    2794:	b	26c4 <coda_cursor_read_int16+0x94>
    2798:	mvn	r0, #99	; 0x63
    279c:	movw	r2, #0
    27a0:	movt	r2, #0
    27a4:	movw	r1, #0
    27a8:	movt	r1, #0
    27ac:	movw	r3, #1874	; 0x752
    27b0:	bl	0 <coda_set_error>
    27b4:	mvn	r0, #0
    27b8:	b	26c4 <coda_cursor_read_int16+0x94>
    27bc:	.word	0x000000d8

000027c0 <coda_cursor_read_uint16>:
    27c0:	cmp	r0, #0
    27c4:	str	r4, [sp, #-8]!
    27c8:	str	lr, [sp, #4]
    27cc:	sub	sp, sp, #8
    27d0:	beq	28d4 <coda_cursor_read_uint16+0x114>
    27d4:	ldr	r3, [r0, #4]
    27d8:	cmp	r3, #0
    27dc:	ble	28d4 <coda_cursor_read_uint16+0x114>
    27e0:	add	r3, r0, r3, lsl #4
    27e4:	ldr	r3, [r3, #-8]
    27e8:	cmp	r3, #0
    27ec:	beq	28d4 <coda_cursor_read_uint16+0x114>
    27f0:	cmp	r1, #0
    27f4:	mov	r4, r1
    27f8:	beq	28f8 <coda_cursor_read_uint16+0x138>
    27fc:	ldr	r2, [r3]
    2800:	cmp	r2, #99	; 0x63
    2804:	ldrhi	r3, [r3, #4]
    2808:	ldr	r2, [r3, #8]
    280c:	sub	r2, r2, #2
    2810:	cmp	r2, #1
    2814:	bls	2880 <coda_cursor_read_uint16+0xc0>
    2818:	ldr	r3, [r3, #12]
    281c:	cmp	r3, #1
    2820:	beq	28ac <coda_cursor_read_uint16+0xec>
    2824:	cmp	r3, #3
    2828:	beq	285c <coda_cursor_read_uint16+0x9c>
    282c:	mov	r0, r3
    2830:	bl	0 <coda_type_get_native_type_name>
    2834:	mov	r2, r0
    2838:	movw	r1, #0
    283c:	movt	r1, #0
    2840:	mvn	r0, #104	; 0x68
    2844:	bl	0 <coda_set_error>
    2848:	mvn	r0, #0
    284c:	add	sp, sp, #8
    2850:	ldr	r4, [sp]
    2854:	add	sp, sp, #4
    2858:	pop	{pc}		; (ldr pc, [sp], #4)
    285c:	mov	r1, r4
    2860:	bl	2dc <read_uint16>
    2864:	adds	r0, r0, #0
    2868:	movne	r0, #1
    286c:	rsb	r0, r0, #0
    2870:	add	sp, sp, #8
    2874:	ldr	r4, [sp]
    2878:	add	sp, sp, #4
    287c:	pop	{pc}		; (ldr pc, [sp], #4)
    2880:	ldr	r2, [pc, #148]	; 291c <coda_cursor_read_uint16+0x15c>
    2884:	mrc	15, 0, r1, cr13, cr0, {3}
    2888:	ldr	r2, [pc, r2]
    288c:	ldr	r2, [r1, r2]
    2890:	cmp	r2, #0
    2894:	beq	2818 <coda_cursor_read_uint16+0x58>
    2898:	ldr	r2, [r3, #48]	; 0x30
    289c:	cmp	r2, #0
    28a0:	movne	r3, #9
    28a4:	bne	282c <coda_cursor_read_uint16+0x6c>
    28a8:	b	2818 <coda_cursor_read_uint16+0x58>
    28ac:	add	r1, sp, #7
    28b0:	bl	f8 <read_uint8>
    28b4:	cmp	r0, #0
    28b8:	bne	2848 <coda_cursor_read_uint16+0x88>
    28bc:	ldrb	r3, [sp, #7]
    28c0:	strh	r3, [r4]
    28c4:	add	sp, sp, #8
    28c8:	ldr	r4, [sp]
    28cc:	add	sp, sp, #4
    28d0:	pop	{pc}		; (ldr pc, [sp], #4)
    28d4:	mvn	r0, #99	; 0x63
    28d8:	movw	r2, #0
    28dc:	movt	r2, #0
    28e0:	movw	r1, #0
    28e4:	movt	r1, #0
    28e8:	movw	r3, #1939	; 0x793
    28ec:	bl	0 <coda_set_error>
    28f0:	mvn	r0, #0
    28f4:	b	284c <coda_cursor_read_uint16+0x8c>
    28f8:	mvn	r0, #99	; 0x63
    28fc:	movw	r2, #0
    2900:	movt	r2, #0
    2904:	movw	r1, #0
    2908:	movt	r1, #0
    290c:	movw	r3, #1944	; 0x798
    2910:	bl	0 <coda_set_error>
    2914:	mvn	r0, #0
    2918:	b	284c <coda_cursor_read_uint16+0x8c>
    291c:	.word	0x0000008c

00002920 <coda_cursor_read_int32>:
    2920:	cmp	r0, #0
    2924:	str	r4, [sp, #-8]!
    2928:	str	lr, [sp, #4]
    292c:	sub	sp, sp, #8
    2930:	beq	2ab8 <coda_cursor_read_int32+0x198>
    2934:	ldr	r3, [r0, #4]
    2938:	cmp	r3, #0
    293c:	ble	2ab8 <coda_cursor_read_int32+0x198>
    2940:	add	r3, r0, r3, lsl #4
    2944:	ldr	r3, [r3, #-8]
    2948:	cmp	r3, #0
    294c:	beq	2ab8 <coda_cursor_read_int32+0x198>
    2950:	cmp	r1, #0
    2954:	mov	r4, r1
    2958:	beq	2adc <coda_cursor_read_int32+0x1bc>
    295c:	ldr	r2, [r3]
    2960:	cmp	r2, #99	; 0x63
    2964:	ldrhi	r3, [r3, #4]
    2968:	ldr	r2, [r3, #8]
    296c:	sub	r2, r2, #2
    2970:	cmp	r2, #1
    2974:	bls	299c <coda_cursor_read_int32+0x7c>
    2978:	ldr	r3, [r3, #12]
    297c:	cmp	r3, #4
    2980:	ldrls	pc, [pc, r3, lsl #2]
    2984:	b	29c4 <coda_cursor_read_int32+0xa4>
    2988:	.word	0x00002a18
    298c:	.word	0x00002a40
    2990:	.word	0x00002a68
    2994:	.word	0x00002a90
    2998:	.word	0x000029f4
    299c:	ldr	r2, [pc, #348]	; 2b00 <coda_cursor_read_int32+0x1e0>
    29a0:	mrc	15, 0, r1, cr13, cr0, {3}
    29a4:	ldr	r2, [pc, r2]
    29a8:	ldr	r2, [r1, r2]
    29ac:	cmp	r2, #0
    29b0:	beq	2978 <coda_cursor_read_int32+0x58>
    29b4:	ldr	r2, [r3, #48]	; 0x30
    29b8:	cmp	r2, #0
    29bc:	movne	r3, #9
    29c0:	beq	2978 <coda_cursor_read_int32+0x58>
    29c4:	mov	r0, r3
    29c8:	bl	0 <coda_type_get_native_type_name>
    29cc:	mov	r2, r0
    29d0:	movw	r1, #0
    29d4:	movt	r1, #0
    29d8:	mvn	r0, #104	; 0x68
    29dc:	bl	0 <coda_set_error>
    29e0:	mvn	r0, #0
    29e4:	add	sp, sp, #8
    29e8:	ldr	r4, [sp]
    29ec:	add	sp, sp, #4
    29f0:	pop	{pc}		; (ldr pc, [sp], #4)
    29f4:	mov	r1, r4
    29f8:	bl	3b0 <read_int32>
    29fc:	adds	r0, r0, #0
    2a00:	movne	r0, #1
    2a04:	rsb	r0, r0, #0
    2a08:	add	sp, sp, #8
    2a0c:	ldr	r4, [sp]
    2a10:	add	sp, sp, #4
    2a14:	pop	{pc}		; (ldr pc, [sp], #4)
    2a18:	add	r1, sp, #6
    2a1c:	bl	0 <read_int8>
    2a20:	cmp	r0, #0
    2a24:	bne	29e0 <coda_cursor_read_int32+0xc0>
    2a28:	ldrsb	r3, [sp, #6]
    2a2c:	str	r3, [r4]
    2a30:	add	sp, sp, #8
    2a34:	ldr	r4, [sp]
    2a38:	add	sp, sp, #4
    2a3c:	pop	{pc}		; (ldr pc, [sp], #4)
    2a40:	add	r1, sp, #6
    2a44:	bl	f8 <read_uint8>
    2a48:	cmp	r0, #0
    2a4c:	bne	29e0 <coda_cursor_read_int32+0xc0>
    2a50:	ldrb	r3, [sp, #6]
    2a54:	str	r3, [r4]
    2a58:	add	sp, sp, #8
    2a5c:	ldr	r4, [sp]
    2a60:	add	sp, sp, #4
    2a64:	pop	{pc}		; (ldr pc, [sp], #4)
    2a68:	add	r1, sp, #6
    2a6c:	bl	1cc <read_int16>
    2a70:	cmp	r0, #0
    2a74:	bne	29e0 <coda_cursor_read_int32+0xc0>
    2a78:	ldrsh	r3, [sp, #6]
    2a7c:	str	r3, [r4]
    2a80:	add	sp, sp, #8
    2a84:	ldr	r4, [sp]
    2a88:	add	sp, sp, #4
    2a8c:	pop	{pc}		; (ldr pc, [sp], #4)
    2a90:	add	r1, sp, #6
    2a94:	bl	2dc <read_uint16>
    2a98:	cmp	r0, #0
    2a9c:	bne	29e0 <coda_cursor_read_int32+0xc0>
    2aa0:	ldrh	r3, [sp, #6]
    2aa4:	str	r3, [r4]
    2aa8:	add	sp, sp, #8
    2aac:	ldr	r4, [sp]
    2ab0:	add	sp, sp, #4
    2ab4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ab8:	mvn	r0, #99	; 0x63
    2abc:	movw	r2, #0
    2ac0:	movt	r2, #0
    2ac4:	movw	r1, #0
    2ac8:	movt	r1, #0
    2acc:	movw	r3, #2001	; 0x7d1
    2ad0:	bl	0 <coda_set_error>
    2ad4:	mvn	r0, #0
    2ad8:	b	29e4 <coda_cursor_read_int32+0xc4>
    2adc:	mvn	r0, #99	; 0x63
    2ae0:	movw	r2, #0
    2ae4:	movt	r2, #0
    2ae8:	movw	r1, #0
    2aec:	movt	r1, #0
    2af0:	movw	r3, #2006	; 0x7d6
    2af4:	bl	0 <coda_set_error>
    2af8:	mvn	r0, #0
    2afc:	b	29e4 <coda_cursor_read_int32+0xc4>
    2b00:	.word	0x00000154

00002b04 <coda_cursor_read_uint32>:
    2b04:	cmp	r0, #0
    2b08:	str	r4, [sp, #-8]!
    2b0c:	str	lr, [sp, #4]
    2b10:	sub	sp, sp, #8
    2b14:	beq	2c48 <coda_cursor_read_uint32+0x144>
    2b18:	ldr	r3, [r0, #4]
    2b1c:	cmp	r3, #0
    2b20:	ble	2c48 <coda_cursor_read_uint32+0x144>
    2b24:	add	r3, r0, r3, lsl #4
    2b28:	ldr	r3, [r3, #-8]
    2b2c:	cmp	r3, #0
    2b30:	beq	2c48 <coda_cursor_read_uint32+0x144>
    2b34:	cmp	r1, #0
    2b38:	mov	r4, r1
    2b3c:	beq	2c6c <coda_cursor_read_uint32+0x168>
    2b40:	ldr	r2, [r3]
    2b44:	cmp	r2, #99	; 0x63
    2b48:	ldrhi	r3, [r3, #4]
    2b4c:	ldr	r2, [r3, #8]
    2b50:	sub	r2, r2, #2
    2b54:	cmp	r2, #1
    2b58:	bls	2ba8 <coda_cursor_read_uint32+0xa4>
    2b5c:	ldr	r3, [r3, #12]
    2b60:	cmp	r3, #3
    2b64:	beq	2c20 <coda_cursor_read_uint32+0x11c>
    2b68:	cmp	r3, #5
    2b6c:	beq	2bfc <coda_cursor_read_uint32+0xf8>
    2b70:	cmp	r3, #1
    2b74:	beq	2bd4 <coda_cursor_read_uint32+0xd0>
    2b78:	mov	r0, r3
    2b7c:	bl	0 <coda_type_get_native_type_name>
    2b80:	mov	r2, r0
    2b84:	movw	r1, #0
    2b88:	movt	r1, #0
    2b8c:	mvn	r0, #104	; 0x68
    2b90:	bl	0 <coda_set_error>
    2b94:	mvn	r0, #0
    2b98:	add	sp, sp, #8
    2b9c:	ldr	r4, [sp]
    2ba0:	add	sp, sp, #4
    2ba4:	pop	{pc}		; (ldr pc, [sp], #4)
    2ba8:	ldr	r2, [pc, #224]	; 2c90 <coda_cursor_read_uint32+0x18c>
    2bac:	mrc	15, 0, r1, cr13, cr0, {3}
    2bb0:	ldr	r2, [pc, r2]
    2bb4:	ldr	r2, [r1, r2]
    2bb8:	cmp	r2, #0
    2bbc:	beq	2b5c <coda_cursor_read_uint32+0x58>
    2bc0:	ldr	r2, [r3, #48]	; 0x30
    2bc4:	cmp	r2, #0
    2bc8:	movne	r3, #9
    2bcc:	bne	2b78 <coda_cursor_read_uint32+0x74>
    2bd0:	b	2b5c <coda_cursor_read_uint32+0x58>
    2bd4:	add	r1, sp, #6
    2bd8:	bl	f8 <read_uint8>
    2bdc:	cmp	r0, #0
    2be0:	bne	2b94 <coda_cursor_read_uint32+0x90>
    2be4:	ldrb	r3, [sp, #6]
    2be8:	str	r3, [r4]
    2bec:	add	sp, sp, #8
    2bf0:	ldr	r4, [sp]
    2bf4:	add	sp, sp, #4
    2bf8:	pop	{pc}		; (ldr pc, [sp], #4)
    2bfc:	mov	r1, r4
    2c00:	bl	4c0 <read_uint32>
    2c04:	adds	r0, r0, #0
    2c08:	movne	r0, #1
    2c0c:	rsb	r0, r0, #0
    2c10:	add	sp, sp, #8
    2c14:	ldr	r4, [sp]
    2c18:	add	sp, sp, #4
    2c1c:	pop	{pc}		; (ldr pc, [sp], #4)
    2c20:	add	r1, sp, #6
    2c24:	bl	2dc <read_uint16>
    2c28:	cmp	r0, #0
    2c2c:	bne	2b94 <coda_cursor_read_uint32+0x90>
    2c30:	ldrh	r3, [sp, #6]
    2c34:	str	r3, [r4]
    2c38:	add	sp, sp, #8
    2c3c:	ldr	r4, [sp]
    2c40:	add	sp, sp, #4
    2c44:	pop	{pc}		; (ldr pc, [sp], #4)
    2c48:	mvn	r0, #99	; 0x63
    2c4c:	movw	r2, #0
    2c50:	movt	r2, #0
    2c54:	movw	r1, #0
    2c58:	movt	r1, #0
    2c5c:	movw	r3, #2094	; 0x82e
    2c60:	bl	0 <coda_set_error>
    2c64:	mvn	r0, #0
    2c68:	b	2b98 <coda_cursor_read_uint32+0x94>
    2c6c:	mvn	r0, #99	; 0x63
    2c70:	movw	r2, #0
    2c74:	movt	r2, #0
    2c78:	movw	r1, #0
    2c7c:	movt	r1, #0
    2c80:	movw	r3, #2099	; 0x833
    2c84:	bl	0 <coda_set_error>
    2c88:	mvn	r0, #0
    2c8c:	b	2b98 <coda_cursor_read_uint32+0x94>
    2c90:	.word	0x000000d8

00002c94 <coda_cursor_read_int64>:
    2c94:	cmp	r0, #0
    2c98:	str	r4, [sp, #-8]!
    2c9c:	str	lr, [sp, #4]
    2ca0:	sub	sp, sp, #8
    2ca4:	beq	2e9c <coda_cursor_read_int64+0x208>
    2ca8:	ldr	r3, [r0, #4]
    2cac:	cmp	r3, #0
    2cb0:	ble	2e9c <coda_cursor_read_int64+0x208>
    2cb4:	add	r3, r0, r3, lsl #4
    2cb8:	ldr	r3, [r3, #-8]
    2cbc:	cmp	r3, #0
    2cc0:	beq	2e9c <coda_cursor_read_int64+0x208>
    2cc4:	cmp	r1, #0
    2cc8:	mov	r4, r1
    2ccc:	beq	2ec0 <coda_cursor_read_int64+0x22c>
    2cd0:	ldr	r2, [r3]
    2cd4:	cmp	r2, #99	; 0x63
    2cd8:	ldrhi	r3, [r3, #4]
    2cdc:	ldr	r2, [r3, #8]
    2ce0:	sub	r2, r2, #2
    2ce4:	cmp	r2, #1
    2ce8:	bls	2d18 <coda_cursor_read_int64+0x84>
    2cec:	ldr	r3, [r3, #12]
    2cf0:	cmp	r3, #6
    2cf4:	ldrls	pc, [pc, r3, lsl #2]
    2cf8:	b	2d40 <coda_cursor_read_int64+0xac>
    2cfc:	.word	0x00002d94
    2d00:	.word	0x00002dc0
    2d04:	.word	0x00002dec
    2d08:	.word	0x00002e18
    2d0c:	.word	0x00002e44
    2d10:	.word	0x00002e70
    2d14:	.word	0x00002d70
    2d18:	ldr	r2, [pc, #452]	; 2ee4 <coda_cursor_read_int64+0x250>
    2d1c:	mrc	15, 0, r1, cr13, cr0, {3}
    2d20:	ldr	r2, [pc, r2]
    2d24:	ldr	r2, [r1, r2]
    2d28:	cmp	r2, #0
    2d2c:	beq	2cec <coda_cursor_read_int64+0x58>
    2d30:	ldr	r2, [r3, #48]	; 0x30
    2d34:	cmp	r2, #0
    2d38:	movne	r3, #9
    2d3c:	beq	2cec <coda_cursor_read_int64+0x58>
    2d40:	mov	r0, r3
    2d44:	bl	0 <coda_type_get_native_type_name>
    2d48:	mov	r2, r0
    2d4c:	movw	r1, #0
    2d50:	movt	r1, #0
    2d54:	mvn	r0, #104	; 0x68
    2d58:	bl	0 <coda_set_error>
    2d5c:	mvn	r0, #0
    2d60:	add	sp, sp, #8
    2d64:	ldr	r4, [sp]
    2d68:	add	sp, sp, #4
    2d6c:	pop	{pc}		; (ldr pc, [sp], #4)
    2d70:	mov	r1, r4
    2d74:	bl	594 <read_int64>
    2d78:	adds	r0, r0, #0
    2d7c:	movne	r0, #1
    2d80:	rsb	r0, r0, #0
    2d84:	add	sp, sp, #8
    2d88:	ldr	r4, [sp]
    2d8c:	add	sp, sp, #4
    2d90:	pop	{pc}		; (ldr pc, [sp], #4)
    2d94:	add	r1, sp, #4
    2d98:	bl	0 <read_int8>
    2d9c:	cmp	r0, #0
    2da0:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2da4:	ldrsb	r2, [sp, #4]
    2da8:	asr	r3, r2, #31
    2dac:	strd	r2, [r4]
    2db0:	add	sp, sp, #8
    2db4:	ldr	r4, [sp]
    2db8:	add	sp, sp, #4
    2dbc:	pop	{pc}		; (ldr pc, [sp], #4)
    2dc0:	add	r1, sp, #4
    2dc4:	bl	f8 <read_uint8>
    2dc8:	cmp	r0, #0
    2dcc:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2dd0:	ldrb	r2, [sp, #4]
    2dd4:	mov	r3, #0
    2dd8:	strd	r2, [r4]
    2ddc:	add	sp, sp, #8
    2de0:	ldr	r4, [sp]
    2de4:	add	sp, sp, #4
    2de8:	pop	{pc}		; (ldr pc, [sp], #4)
    2dec:	add	r1, sp, #4
    2df0:	bl	1cc <read_int16>
    2df4:	cmp	r0, #0
    2df8:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2dfc:	ldrsh	r2, [sp, #4]
    2e00:	asr	r3, r2, #31
    2e04:	strd	r2, [r4]
    2e08:	add	sp, sp, #8
    2e0c:	ldr	r4, [sp]
    2e10:	add	sp, sp, #4
    2e14:	pop	{pc}		; (ldr pc, [sp], #4)
    2e18:	add	r1, sp, #4
    2e1c:	bl	2dc <read_uint16>
    2e20:	cmp	r0, #0
    2e24:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2e28:	ldrh	r2, [sp, #4]
    2e2c:	mov	r3, #0
    2e30:	strd	r2, [r4]
    2e34:	add	sp, sp, #8
    2e38:	ldr	r4, [sp]
    2e3c:	add	sp, sp, #4
    2e40:	pop	{pc}		; (ldr pc, [sp], #4)
    2e44:	add	r1, sp, #4
    2e48:	bl	3b0 <read_int32>
    2e4c:	cmp	r0, #0
    2e50:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2e54:	ldr	r2, [sp, #4]
    2e58:	asr	r3, r2, #31
    2e5c:	strd	r2, [r4]
    2e60:	add	sp, sp, #8
    2e64:	ldr	r4, [sp]
    2e68:	add	sp, sp, #4
    2e6c:	pop	{pc}		; (ldr pc, [sp], #4)
    2e70:	add	r1, sp, #4
    2e74:	bl	4c0 <read_uint32>
    2e78:	cmp	r0, #0
    2e7c:	bne	2d5c <coda_cursor_read_int64+0xc8>
    2e80:	ldr	r3, [sp, #4]
    2e84:	str	r3, [r4]
    2e88:	str	r0, [r4, #4]
    2e8c:	add	sp, sp, #8
    2e90:	ldr	r4, [sp]
    2e94:	add	sp, sp, #4
    2e98:	pop	{pc}		; (ldr pc, [sp], #4)
    2e9c:	mvn	r0, #99	; 0x63
    2ea0:	movw	r2, #0
    2ea4:	movt	r2, #0
    2ea8:	movw	r1, #0
    2eac:	movt	r1, #0
    2eb0:	movw	r3, #2169	; 0x879
    2eb4:	bl	0 <coda_set_error>
    2eb8:	mvn	r0, #0
    2ebc:	b	2d60 <coda_cursor_read_int64+0xcc>
    2ec0:	mvn	r0, #99	; 0x63
    2ec4:	movw	r2, #0
    2ec8:	movt	r2, #0
    2ecc:	movw	r1, #0
    2ed0:	movt	r1, #0
    2ed4:	movw	r3, #2174	; 0x87e
    2ed8:	bl	0 <coda_set_error>
    2edc:	mvn	r0, #0
    2ee0:	b	2d60 <coda_cursor_read_int64+0xcc>
    2ee4:	.word	0x000001bc

00002ee8 <coda_cursor_read_uint64>:
    2ee8:	cmp	r0, #0
    2eec:	str	r4, [sp, #-8]!
    2ef0:	str	lr, [sp, #4]
    2ef4:	sub	sp, sp, #8
    2ef8:	beq	3070 <coda_cursor_read_uint64+0x188>
    2efc:	ldr	r3, [r0, #4]
    2f00:	cmp	r3, #0
    2f04:	ble	3070 <coda_cursor_read_uint64+0x188>
    2f08:	add	r3, r0, r3, lsl #4
    2f0c:	ldr	r3, [r3, #-8]
    2f10:	cmp	r3, #0
    2f14:	beq	3070 <coda_cursor_read_uint64+0x188>
    2f18:	cmp	r1, #0
    2f1c:	mov	r4, r1
    2f20:	beq	3094 <coda_cursor_read_uint64+0x1ac>
    2f24:	ldr	r2, [r3]
    2f28:	cmp	r2, #99	; 0x63
    2f2c:	ldrhi	r3, [r3, #4]
    2f30:	ldr	r2, [r3, #8]
    2f34:	sub	r2, r2, #2
    2f38:	cmp	r2, #1
    2f3c:	bls	2f70 <coda_cursor_read_uint64+0x88>
    2f40:	ldr	r2, [r3, #12]
    2f44:	sub	r3, r2, #1
    2f48:	cmp	r3, #6
    2f4c:	ldrls	pc, [pc, r3, lsl #2]
    2f50:	b	2f98 <coda_cursor_read_uint64+0xb0>
    2f54:	.word	0x00002fec
    2f58:	.word	0x00002f98
    2f5c:	.word	0x00003018
    2f60:	.word	0x00002f98
    2f64:	.word	0x00003044
    2f68:	.word	0x00002f98
    2f6c:	.word	0x00002fc8
    2f70:	ldr	r2, [pc, #320]	; 30b8 <coda_cursor_read_uint64+0x1d0>
    2f74:	mrc	15, 0, r1, cr13, cr0, {3}
    2f78:	ldr	r2, [pc, r2]
    2f7c:	ldr	r2, [r1, r2]
    2f80:	cmp	r2, #0
    2f84:	beq	2f40 <coda_cursor_read_uint64+0x58>
    2f88:	ldr	r2, [r3, #48]	; 0x30
    2f8c:	cmp	r2, #0
    2f90:	movne	r2, #9
    2f94:	beq	2f40 <coda_cursor_read_uint64+0x58>
    2f98:	mov	r0, r2
    2f9c:	bl	0 <coda_type_get_native_type_name>
    2fa0:	mov	r2, r0
    2fa4:	movw	r1, #0
    2fa8:	movt	r1, #0
    2fac:	mvn	r0, #104	; 0x68
    2fb0:	bl	0 <coda_set_error>
    2fb4:	mvn	r0, #0
    2fb8:	add	sp, sp, #8
    2fbc:	ldr	r4, [sp]
    2fc0:	add	sp, sp, #4
    2fc4:	pop	{pc}		; (ldr pc, [sp], #4)
    2fc8:	mov	r1, r4
    2fcc:	bl	2340 <read_uint64>
    2fd0:	adds	r0, r0, #0
    2fd4:	movne	r0, #1
    2fd8:	rsb	r0, r0, #0
    2fdc:	add	sp, sp, #8
    2fe0:	ldr	r4, [sp]
    2fe4:	add	sp, sp, #4
    2fe8:	pop	{pc}		; (ldr pc, [sp], #4)
    2fec:	add	r1, sp, #4
    2ff0:	bl	f8 <read_uint8>
    2ff4:	cmp	r0, #0
    2ff8:	bne	2fb4 <coda_cursor_read_uint64+0xcc>
    2ffc:	ldrb	r2, [sp, #4]
    3000:	mov	r3, #0
    3004:	strd	r2, [r4]
    3008:	add	sp, sp, #8
    300c:	ldr	r4, [sp]
    3010:	add	sp, sp, #4
    3014:	pop	{pc}		; (ldr pc, [sp], #4)
    3018:	add	r1, sp, #4
    301c:	bl	2dc <read_uint16>
    3020:	cmp	r0, #0
    3024:	bne	2fb4 <coda_cursor_read_uint64+0xcc>
    3028:	ldrh	r2, [sp, #4]
    302c:	mov	r3, #0
    3030:	strd	r2, [r4]
    3034:	add	sp, sp, #8
    3038:	ldr	r4, [sp]
    303c:	add	sp, sp, #4
    3040:	pop	{pc}		; (ldr pc, [sp], #4)
    3044:	add	r1, sp, #4
    3048:	bl	4c0 <read_uint32>
    304c:	cmp	r0, #0
    3050:	bne	2fb4 <coda_cursor_read_uint64+0xcc>
    3054:	ldr	r3, [sp, #4]
    3058:	str	r3, [r4]
    305c:	str	r0, [r4, #4]
    3060:	add	sp, sp, #8
    3064:	ldr	r4, [sp]
    3068:	add	sp, sp, #4
    306c:	pop	{pc}		; (ldr pc, [sp], #4)
    3070:	mvn	r0, #99	; 0x63
    3074:	movw	r2, #0
    3078:	movt	r2, #0
    307c:	movw	r1, #0
    3080:	movt	r1, #0
    3084:	movw	r3, #2285	; 0x8ed
    3088:	bl	0 <coda_set_error>
    308c:	mvn	r0, #0
    3090:	b	2fb8 <coda_cursor_read_uint64+0xd0>
    3094:	mvn	r0, #99	; 0x63
    3098:	movw	r2, #0
    309c:	movt	r2, #0
    30a0:	movw	r1, #0
    30a4:	movt	r1, #0
    30a8:	movw	r3, #2290	; 0x8f2
    30ac:	bl	0 <coda_set_error>
    30b0:	mvn	r0, #0
    30b4:	b	2fb8 <coda_cursor_read_uint64+0xd0>
    30b8:	.word	0x00000138

000030bc <coda_cursor_read_double>:
    30bc:	cmp	r0, #0
    30c0:	strd	r4, [sp, #-12]!
    30c4:	str	lr, [sp, #8]
    30c8:	sub	sp, sp, #12
    30cc:	beq	330c <coda_cursor_read_double+0x250>
    30d0:	ldr	r3, [r0, #4]
    30d4:	cmp	r3, #0
    30d8:	ble	330c <coda_cursor_read_double+0x250>
    30dc:	add	r3, r0, r3, lsl #4
    30e0:	ldr	r3, [r3, #-8]
    30e4:	cmp	r3, #0
    30e8:	beq	330c <coda_cursor_read_double+0x250>
    30ec:	cmp	r1, #0
    30f0:	mov	r5, r1
    30f4:	beq	3330 <coda_cursor_read_double+0x274>
    30f8:	ldr	r2, [r3]
    30fc:	cmp	r2, #99	; 0x63
    3100:	ldrhi	r3, [r3, #4]
    3104:	ldr	r2, [r3, #8]
    3108:	ldr	r1, [r3, #12]
    310c:	sub	r2, r2, #2
    3110:	cmp	r2, #1
    3114:	movhi	r4, #0
    3118:	bhi	3134 <coda_cursor_read_double+0x78>
    311c:	ldr	r2, [pc, #596]	; 3378 <coda_cursor_read_double+0x2bc>
    3120:	mrc	15, 0, ip, cr13, cr0, {3}
    3124:	ldr	r2, [pc, r2]
    3128:	ldr	r4, [ip, r2]
    312c:	cmp	r4, #0
    3130:	ldrne	r4, [r3, #48]	; 0x30
    3134:	cmp	r1, #9
    3138:	ldrls	pc, [pc, r1, lsl #2]
    313c:	b	3354 <coda_cursor_read_double+0x298>
    3140:	.word	0x000031c8
    3144:	.word	0x000031ec
    3148:	.word	0x00003210
    314c:	.word	0x00003234
    3150:	.word	0x00003258
    3154:	.word	0x00003278
    3158:	.word	0x00003298
    315c:	.word	0x000032b8
    3160:	.word	0x000032d0
    3164:	.word	0x00003168
    3168:	mov	r1, r5
    316c:	bl	3480 <read_double>
    3170:	cmp	r0, #0
    3174:	bne	32c8 <coda_cursor_read_double+0x20c>
    3178:	cmp	r4, #0
    317c:	moveq	r0, r4
    3180:	beq	31b8 <coda_cursor_read_double+0xfc>
    3184:	vldr	d7, [r5]
    3188:	vldr	d6, [r4, #24]
    318c:	vcmp.f64	d7, d6
    3190:	vmrs	APSR_nzcv, fpscr
    3194:	beq	32f0 <coda_cursor_read_double+0x234>
    3198:	vldr	d6, [r4]
    319c:	mov	r0, #0
    31a0:	vldr	d4, [r4, #8]
    31a4:	vldr	d5, [r4, #16]
    31a8:	vmul.f64	d7, d7, d6
    31ac:	vdiv.f64	d6, d7, d4
    31b0:	vadd.f64	d6, d6, d5
    31b4:	vstr	d6, [r5]
    31b8:	add	sp, sp, #12
    31bc:	ldrd	r4, [sp]
    31c0:	add	sp, sp, #8
    31c4:	pop	{pc}		; (ldr pc, [sp], #4)
    31c8:	mov	r1, sp
    31cc:	bl	0 <read_int8>
    31d0:	cmp	r0, #0
    31d4:	bne	32c8 <coda_cursor_read_double+0x20c>
    31d8:	ldrsb	r3, [sp]
    31dc:	vmov	s14, r3
    31e0:	vcvt.f64.s32	d7, s14
    31e4:	vstr	d7, [r5]
    31e8:	b	3178 <coda_cursor_read_double+0xbc>
    31ec:	mov	r1, sp
    31f0:	bl	f8 <read_uint8>
    31f4:	cmp	r0, #0
    31f8:	bne	32c8 <coda_cursor_read_double+0x20c>
    31fc:	ldrb	r3, [sp]
    3200:	vmov	s14, r3
    3204:	vcvt.f64.u32	d7, s14
    3208:	vstr	d7, [r5]
    320c:	b	3178 <coda_cursor_read_double+0xbc>
    3210:	mov	r1, sp
    3214:	bl	1cc <read_int16>
    3218:	cmp	r0, #0
    321c:	bne	32c8 <coda_cursor_read_double+0x20c>
    3220:	ldrsh	r3, [sp]
    3224:	vmov	s14, r3
    3228:	vcvt.f64.s32	d7, s14
    322c:	vstr	d7, [r5]
    3230:	b	3178 <coda_cursor_read_double+0xbc>
    3234:	mov	r1, sp
    3238:	bl	2dc <read_uint16>
    323c:	cmp	r0, #0
    3240:	bne	32c8 <coda_cursor_read_double+0x20c>
    3244:	ldrh	r3, [sp]
    3248:	vmov	s14, r3
    324c:	vcvt.f64.u32	d7, s14
    3250:	vstr	d7, [r5]
    3254:	b	3178 <coda_cursor_read_double+0xbc>
    3258:	mov	r1, sp
    325c:	bl	3b0 <read_int32>
    3260:	cmp	r0, #0
    3264:	bne	32c8 <coda_cursor_read_double+0x20c>
    3268:	vldr	s15, [sp]
    326c:	vcvt.f64.s32	d7, s15
    3270:	vstr	d7, [r5]
    3274:	b	3178 <coda_cursor_read_double+0xbc>
    3278:	mov	r1, sp
    327c:	bl	4c0 <read_uint32>
    3280:	cmp	r0, #0
    3284:	bne	32c8 <coda_cursor_read_double+0x20c>
    3288:	vldr	s15, [sp]
    328c:	vcvt.f64.u32	d7, s15
    3290:	vstr	d7, [r5]
    3294:	b	3178 <coda_cursor_read_double+0xbc>
    3298:	mov	r1, sp
    329c:	bl	594 <read_int64>
    32a0:	cmp	r0, #0
    32a4:	bne	32c8 <coda_cursor_read_double+0x20c>
    32a8:	ldrd	r0, [sp]
    32ac:	bl	0 <__aeabi_l2d>
    32b0:	strd	r0, [r5]
    32b4:	b	3178 <coda_cursor_read_double+0xbc>
    32b8:	mov	r1, sp
    32bc:	bl	2340 <read_uint64>
    32c0:	cmp	r0, #0
    32c4:	beq	32a8 <coda_cursor_read_double+0x1ec>
    32c8:	mvn	r0, #0
    32cc:	b	31b8 <coda_cursor_read_double+0xfc>
    32d0:	mov	r1, sp
    32d4:	bl	668 <read_float>
    32d8:	cmp	r0, #0
    32dc:	bne	32c8 <coda_cursor_read_double+0x20c>
    32e0:	vldr	s14, [sp]
    32e4:	vcvt.f64.f32	d7, s14
    32e8:	vstr	d7, [r5]
    32ec:	b	3178 <coda_cursor_read_double+0xbc>
    32f0:	bl	0 <coda_NaN>
    32f4:	mov	r0, #0
    32f8:	vstr	d0, [r5]
    32fc:	add	sp, sp, #12
    3300:	ldrd	r4, [sp]
    3304:	add	sp, sp, #8
    3308:	pop	{pc}		; (ldr pc, [sp], #4)
    330c:	mvn	r0, #99	; 0x63
    3310:	movw	r2, #0
    3314:	movt	r2, #0
    3318:	movw	r1, #0
    331c:	movt	r1, #0
    3320:	movw	r3, #2543	; 0x9ef
    3324:	bl	0 <coda_set_error>
    3328:	mvn	r0, #0
    332c:	b	31b8 <coda_cursor_read_double+0xfc>
    3330:	mvn	r0, #99	; 0x63
    3334:	movw	r2, #0
    3338:	movt	r2, #0
    333c:	movw	r1, #0
    3340:	movt	r1, #0
    3344:	movw	r3, #2548	; 0x9f4
    3348:	bl	0 <coda_set_error>
    334c:	mvn	r0, #0
    3350:	b	31b8 <coda_cursor_read_double+0xfc>
    3354:	mov	r0, r1
    3358:	bl	0 <coda_type_get_native_type_name>
    335c:	mov	r2, r0
    3360:	movw	r1, #0
    3364:	movt	r1, #0
    3368:	mvn	r0, #104	; 0x68
    336c:	bl	0 <coda_set_error>
    3370:	mvn	r0, #0
    3374:	b	31b8 <coda_cursor_read_double+0xfc>
    3378:	.word	0x0000024c

0000337c <read_vsf_integer>:
    337c:	str	r4, [sp, #-8]!
    3380:	mov	r2, #520	; 0x208
    3384:	mov	r4, r1
    3388:	str	lr, [sp, #4]
    338c:	sub	sp, sp, #536	; 0x218
    3390:	mov	r1, r0
    3394:	add	r0, sp, #16
    3398:	bl	0 <memcpy>
    339c:	add	r0, sp, #16
    33a0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    33a4:	cmp	r0, #0
    33a8:	bne	3464 <read_vsf_integer+0xe8>
    33ac:	add	r0, sp, #16
    33b0:	bl	0 <coda_cursor_goto_first_record_field>
    33b4:	cmp	r0, #0
    33b8:	bne	3464 <read_vsf_integer+0xe8>
    33bc:	add	r1, sp, #4
    33c0:	add	r0, sp, #16
    33c4:	bl	2920 <coda_cursor_read_int32>
    33c8:	cmp	r0, #0
    33cc:	bne	3464 <read_vsf_integer+0xe8>
    33d0:	add	r0, sp, #16
    33d4:	bl	0 <coda_cursor_goto_next_record_field>
    33d8:	cmp	r0, #0
    33dc:	bne	3464 <read_vsf_integer+0xe8>
    33e0:	add	r0, sp, #16
    33e4:	add	r1, sp, #8
    33e8:	bl	30bc <coda_cursor_read_double>
    33ec:	cmp	r0, #0
    33f0:	bne	3464 <read_vsf_integer+0xe8>
    33f4:	ldr	r3, [sp, #4]
    33f8:	cmp	r3, #0
    33fc:	bgt	343c <read_vsf_integer+0xc0>
    3400:	mvn	r3, r3
    3404:	vldr	d7, [pc, #100]	; 3470 <read_vsf_integer+0xf4>
    3408:	beq	3420 <read_vsf_integer+0xa4>
    340c:	vldr	d6, [pc, #100]	; 3478 <read_vsf_integer+0xfc>
    3410:	sub	r3, r3, #1
    3414:	vmul.f64	d7, d7, d6
    3418:	cmn	r3, #1
    341c:	bne	3410 <read_vsf_integer+0x94>
    3420:	vldr	d6, [sp, #8]
    3424:	vmul.f64	d7, d6, d7
    3428:	vstr	d7, [r4]
    342c:	add	sp, sp, #536	; 0x218
    3430:	ldr	r4, [sp]
    3434:	add	sp, sp, #4
    3438:	pop	{pc}		; (ldr pc, [sp], #4)
    343c:	vldr	d6, [pc, #44]	; 3470 <read_vsf_integer+0xf4>
    3440:	rsb	r3, r3, #1
    3444:	vldr	d7, [pc, #44]	; 3478 <read_vsf_integer+0xfc>
    3448:	add	r3, r3, #1
    344c:	vmul.f64	d6, d6, d7
    3450:	cmp	r3, #1
    3454:	bne	3448 <read_vsf_integer+0xcc>
    3458:	vldr	d5, [pc, #16]	; 3470 <read_vsf_integer+0xf4>
    345c:	vdiv.f64	d7, d5, d6
    3460:	b	3420 <read_vsf_integer+0xa4>
    3464:	mvn	r0, #0
    3468:	b	342c <read_vsf_integer+0xb0>
    346c:	nop	{0}
    3470:	.word	0x00000000
    3474:	.word	0x3ff00000
    3478:	.word	0x00000000
    347c:	.word	0x40240000

00003480 <read_double>:
    3480:	ldr	r3, [r0, #4]
    3484:	add	r3, r0, r3, lsl #4
    3488:	ldr	r2, [r3, #-8]
    348c:	ldr	r3, [r2]
    3490:	cmp	r3, #99	; 0x63
    3494:	ldrhi	r2, [r2, #4]
    3498:	ldr	ip, [r2, #8]
    349c:	cmp	ip, #6
    34a0:	beq	3504 <read_double+0x84>
    34a4:	cmp	r3, #101	; 0x65
    34a8:	str	r4, [sp, #-8]!
    34ac:	str	lr, [sp, #4]
    34b0:	beq	3568 <read_double+0xe8>
    34b4:	bhi	34e0 <read_double+0x60>
    34b8:	cmp	r3, #1
    34bc:	beq	3558 <read_double+0xd8>
    34c0:	cmp	r3, #0
    34c4:	beq	351c <read_double+0x9c>
    34c8:	cmp	r3, #100	; 0x64
    34cc:	bne	3588 <read_double+0x108>
    34d0:	ldr	r4, [sp]
    34d4:	ldr	lr, [sp, #4]
    34d8:	add	sp, sp, #8
    34dc:	b	0 <coda_mem_cursor_read_double>
    34e0:	cmp	r3, #103	; 0x67
    34e4:	beq	3548 <read_double+0xc8>
    34e8:	bcc	352c <read_double+0xac>
    34ec:	cmp	r3, #104	; 0x68
    34f0:	bne	3588 <read_double+0x108>
    34f4:	ldr	r4, [sp]
    34f8:	ldr	lr, [sp, #4]
    34fc:	add	sp, sp, #8
    3500:	b	0 <coda_netcdf_cursor_read_double>
    3504:	ldr	r2, [r2, #40]	; 0x28
    3508:	cmp	r2, #2
    350c:	beq	3584 <read_double+0x104>
    3510:	cmp	r2, #1
    3514:	bne	34a4 <read_double+0x24>
    3518:	b	337c <read_vsf_integer>
    351c:	ldr	r4, [sp]
    3520:	ldr	lr, [sp, #4]
    3524:	add	sp, sp, #8
    3528:	b	0 <coda_ascii_cursor_read_double>
    352c:	mvn	r0, #12
    3530:	mov	r1, #0
    3534:	bl	0 <coda_set_error>
    3538:	ldr	r4, [sp]
    353c:	add	sp, sp, #4
    3540:	mvn	r0, #0
    3544:	pop	{pc}		; (ldr pc, [sp], #4)
    3548:	ldr	r4, [sp]
    354c:	ldr	lr, [sp, #4]
    3550:	add	sp, sp, #8
    3554:	b	0 <coda_cdf_cursor_read_double>
    3558:	ldr	r4, [sp]
    355c:	ldr	lr, [sp, #4]
    3560:	add	sp, sp, #8
    3564:	b	0 <coda_bin_cursor_read_double>
    3568:	mvn	r0, #10
    356c:	mov	r1, #0
    3570:	bl	0 <coda_set_error>
    3574:	ldr	r4, [sp]
    3578:	add	sp, sp, #4
    357c:	mvn	r0, #0
    3580:	pop	{pc}		; (ldr pc, [sp], #4)
    3584:	b	778 <read_time>
    3588:	movw	r1, #0
    358c:	movt	r1, #0
    3590:	ldr	r3, [pc, #12]	; 35a4 <read_double+0x124>
    3594:	movw	r0, #0
    3598:	movt	r0, #0
    359c:	mov	r2, #692	; 0x2b4
    35a0:	bl	0 <__assert_fail>
    35a4:	.word	0x00000224

000035a8 <read_partial_array.constprop.3>:
    35a8:	strd	r4, [sp, #-20]!	; 0xffffffec
    35ac:	mov	r4, r1
    35b0:	mov	r1, r0
    35b4:	strd	r6, [sp, #8]
    35b8:	mov	r6, r2
    35bc:	mov	r2, #520	; 0x208
    35c0:	str	lr, [sp, #16]
    35c4:	sub	sp, sp, #524	; 0x20c
    35c8:	mov	r5, r3
    35cc:	mov	r0, sp
    35d0:	bl	0 <memcpy>
    35d4:	cmp	r6, #0
    35d8:	bgt	35f4 <read_partial_array.constprop.3+0x4c>
    35dc:	mov	r0, #0
    35e0:	add	sp, sp, #524	; 0x20c
    35e4:	ldrd	r4, [sp]
    35e8:	ldrd	r6, [sp, #8]
    35ec:	add	sp, sp, #16
    35f0:	pop	{pc}		; (ldr pc, [sp], #4)
    35f4:	mov	r1, r4
    35f8:	mov	r0, sp
    35fc:	bl	0 <coda_cursor_goto_array_element_by_index>
    3600:	subs	r4, r0, #0
    3604:	subeq	r7, r6, #1
    3608:	beq	361c <read_partial_array.constprop.3+0x74>
    360c:	b	364c <read_partial_array.constprop.3+0xa4>
    3610:	cmp	r6, r4
    3614:	add	r5, r5, #8
    3618:	beq	35dc <read_partial_array.constprop.3+0x34>
    361c:	mov	r1, r5
    3620:	mov	r0, sp
    3624:	bl	3480 <read_double>
    3628:	cmp	r0, #0
    362c:	mov	r0, sp
    3630:	bne	364c <read_partial_array.constprop.3+0xa4>
    3634:	cmp	r7, r4
    3638:	add	r4, r4, #1
    363c:	ble	3610 <read_partial_array.constprop.3+0x68>
    3640:	bl	0 <coda_cursor_goto_next_array_element>
    3644:	cmp	r0, #0
    3648:	beq	3610 <read_partial_array.constprop.3+0x68>
    364c:	mvn	r0, #0
    3650:	b	35e0 <read_partial_array.constprop.3+0x38>

00003654 <read_double_partial_array>:
    3654:	ldr	ip, [r0, #4]
    3658:	str	r4, [sp, #-8]!
    365c:	str	lr, [sp, #4]
    3660:	add	ip, r0, ip, lsl #4
    3664:	ldr	lr, [ip, #-8]
    3668:	ldr	ip, [lr]
    366c:	cmp	ip, #99	; 0x63
    3670:	ldrhi	lr, [lr, #4]
    3674:	ldr	lr, [lr, #40]	; 0x28
    3678:	ldr	lr, [lr, #8]
    367c:	cmp	lr, #6
    3680:	beq	3744 <read_double_partial_array+0xf0>
    3684:	cmp	ip, #101	; 0x65
    3688:	beq	3718 <read_double_partial_array+0xc4>
    368c:	bhi	36b8 <read_double_partial_array+0x64>
    3690:	cmp	ip, #1
    3694:	beq	3734 <read_double_partial_array+0xe0>
    3698:	cmp	ip, #0
    369c:	beq	36dc <read_double_partial_array+0x88>
    36a0:	cmp	ip, #100	; 0x64
    36a4:	bne	3754 <read_double_partial_array+0x100>
    36a8:	ldr	r4, [sp]
    36ac:	ldr	lr, [sp, #4]
    36b0:	add	sp, sp, #8
    36b4:	b	0 <coda_mem_cursor_read_double_partial_array>
    36b8:	cmp	ip, #103	; 0x67
    36bc:	beq	3708 <read_double_partial_array+0xb4>
    36c0:	bcc	36ec <read_double_partial_array+0x98>
    36c4:	cmp	ip, #104	; 0x68
    36c8:	bne	3754 <read_double_partial_array+0x100>
    36cc:	ldr	r4, [sp]
    36d0:	ldr	lr, [sp, #4]
    36d4:	add	sp, sp, #8
    36d8:	b	0 <coda_netcdf_cursor_read_double_partial_array>
    36dc:	ldr	r4, [sp]
    36e0:	ldr	lr, [sp, #4]
    36e4:	add	sp, sp, #8
    36e8:	b	0 <coda_ascii_cursor_read_double_partial_array>
    36ec:	mvn	r0, #12
    36f0:	mov	r1, #0
    36f4:	bl	0 <coda_set_error>
    36f8:	ldr	r4, [sp]
    36fc:	add	sp, sp, #4
    3700:	mvn	r0, #0
    3704:	pop	{pc}		; (ldr pc, [sp], #4)
    3708:	ldr	r4, [sp]
    370c:	ldr	lr, [sp, #4]
    3710:	add	sp, sp, #8
    3714:	b	0 <coda_cdf_cursor_read_double_partial_array>
    3718:	mvn	r0, #10
    371c:	mov	r1, #0
    3720:	bl	0 <coda_set_error>
    3724:	ldr	r4, [sp]
    3728:	add	sp, sp, #4
    372c:	mvn	r0, #0
    3730:	pop	{pc}		; (ldr pc, [sp], #4)
    3734:	ldr	r4, [sp]
    3738:	ldr	lr, [sp, #4]
    373c:	add	sp, sp, #8
    3740:	b	0 <coda_bin_cursor_read_double_partial_array>
    3744:	ldr	r4, [sp]
    3748:	ldr	lr, [sp, #4]
    374c:	add	sp, sp, #8
    3750:	b	35a8 <read_partial_array.constprop.3>
    3754:	movw	r1, #0
    3758:	movt	r1, #0
    375c:	ldr	r3, [pc, #12]	; 3770 <read_double_partial_array+0x11c>
    3760:	movw	r0, #0
    3764:	movt	r0, #0
    3768:	movw	r2, #1718	; 0x6b6
    376c:	bl	0 <__assert_fail>
    3770:	.word	0x00000230

00003774 <coda_cursor_read_float>:
    3774:	cmp	r0, #0
    3778:	strd	r4, [sp, #-12]!
    377c:	str	lr, [sp, #8]
    3780:	sub	sp, sp, #12
    3784:	beq	398c <coda_cursor_read_float+0x218>
    3788:	ldr	r3, [r0, #4]
    378c:	cmp	r3, #0
    3790:	ble	398c <coda_cursor_read_float+0x218>
    3794:	add	r3, r0, r3, lsl #4
    3798:	ldr	r3, [r3, #-8]
    379c:	cmp	r3, #0
    37a0:	beq	398c <coda_cursor_read_float+0x218>
    37a4:	cmp	r1, #0
    37a8:	mov	r4, r1
    37ac:	beq	39b0 <coda_cursor_read_float+0x23c>
    37b0:	ldr	r2, [r3]
    37b4:	cmp	r2, #99	; 0x63
    37b8:	ldrhi	r3, [r3, #4]
    37bc:	ldr	r2, [r3, #8]
    37c0:	ldr	r1, [r3, #12]
    37c4:	sub	r2, r2, #2
    37c8:	cmp	r2, #1
    37cc:	bls	3804 <coda_cursor_read_float+0x90>
    37d0:	cmp	r1, #9
    37d4:	ldrls	pc, [pc, r1, lsl #2]
    37d8:	b	39d4 <coda_cursor_read_float+0x260>
    37dc:	.word	0x00003850
    37e0:	.word	0x00003874
    37e4:	.word	0x00003898
    37e8:	.word	0x000038bc
    37ec:	.word	0x000038e0
    37f0:	.word	0x00003900
    37f4:	.word	0x00003920
    37f8:	.word	0x00003940
    37fc:	.word	0x00003954
    3800:	.word	0x0000396c
    3804:	ldr	r2, [pc, #492]	; 39f8 <coda_cursor_read_float+0x284>
    3808:	mrc	15, 0, ip, cr13, cr0, {3}
    380c:	ldr	r2, [pc, r2]
    3810:	ldr	r2, [ip, r2]
    3814:	cmp	r2, #0
    3818:	beq	37d0 <coda_cursor_read_float+0x5c>
    381c:	ldr	r3, [r3, #48]	; 0x30
    3820:	cmp	r3, #0
    3824:	beq	37d0 <coda_cursor_read_float+0x5c>
    3828:	mov	r1, sp
    382c:	bl	30bc <coda_cursor_read_double>
    3830:	subs	r5, r0, #0
    3834:	beq	397c <coda_cursor_read_float+0x208>
    3838:	mvn	r5, #0
    383c:	mov	r0, r5
    3840:	add	sp, sp, #12
    3844:	ldrd	r4, [sp]
    3848:	add	sp, sp, #8
    384c:	pop	{pc}		; (ldr pc, [sp], #4)
    3850:	mov	r1, sp
    3854:	bl	0 <read_int8>
    3858:	subs	r5, r0, #0
    385c:	bne	3838 <coda_cursor_read_float+0xc4>
    3860:	ldrsb	r3, [sp]
    3864:	vmov	s15, r3
    3868:	vcvt.f32.s32	s15, s15
    386c:	vstr	s15, [r4]
    3870:	b	383c <coda_cursor_read_float+0xc8>
    3874:	mov	r1, sp
    3878:	bl	f8 <read_uint8>
    387c:	subs	r5, r0, #0
    3880:	bne	3838 <coda_cursor_read_float+0xc4>
    3884:	ldrb	r3, [sp]
    3888:	vmov	s15, r3
    388c:	vcvt.f32.u32	s15, s15
    3890:	vstr	s15, [r4]
    3894:	b	383c <coda_cursor_read_float+0xc8>
    3898:	mov	r1, sp
    389c:	bl	1cc <read_int16>
    38a0:	subs	r5, r0, #0
    38a4:	bne	3838 <coda_cursor_read_float+0xc4>
    38a8:	ldrsh	r3, [sp]
    38ac:	vmov	s15, r3
    38b0:	vcvt.f32.s32	s15, s15
    38b4:	vstr	s15, [r4]
    38b8:	b	383c <coda_cursor_read_float+0xc8>
    38bc:	mov	r1, sp
    38c0:	bl	2dc <read_uint16>
    38c4:	subs	r5, r0, #0
    38c8:	bne	3838 <coda_cursor_read_float+0xc4>
    38cc:	ldrh	r3, [sp]
    38d0:	vmov	s15, r3
    38d4:	vcvt.f32.u32	s15, s15
    38d8:	vstr	s15, [r4]
    38dc:	b	383c <coda_cursor_read_float+0xc8>
    38e0:	mov	r1, sp
    38e4:	bl	3b0 <read_int32>
    38e8:	subs	r5, r0, #0
    38ec:	bne	3838 <coda_cursor_read_float+0xc4>
    38f0:	vldr	s15, [sp]
    38f4:	vcvt.f32.s32	s15, s15
    38f8:	vstr	s15, [r4]
    38fc:	b	383c <coda_cursor_read_float+0xc8>
    3900:	mov	r1, sp
    3904:	bl	4c0 <read_uint32>
    3908:	subs	r5, r0, #0
    390c:	bne	3838 <coda_cursor_read_float+0xc4>
    3910:	vldr	s15, [sp]
    3914:	vcvt.f32.u32	s15, s15
    3918:	vstr	s15, [r4]
    391c:	b	383c <coda_cursor_read_float+0xc8>
    3920:	mov	r1, sp
    3924:	bl	594 <read_int64>
    3928:	subs	r5, r0, #0
    392c:	bne	3838 <coda_cursor_read_float+0xc4>
    3930:	ldrd	r0, [sp]
    3934:	bl	0 <__aeabi_l2f>
    3938:	str	r0, [r4]
    393c:	b	383c <coda_cursor_read_float+0xc8>
    3940:	mov	r1, sp
    3944:	bl	2340 <read_uint64>
    3948:	subs	r5, r0, #0
    394c:	beq	3930 <coda_cursor_read_float+0x1bc>
    3950:	b	3838 <coda_cursor_read_float+0xc4>
    3954:	mov	r1, r4
    3958:	bl	668 <read_float>
    395c:	adds	r0, r0, #0
    3960:	movne	r0, #1
    3964:	rsb	r5, r0, #0
    3968:	b	383c <coda_cursor_read_float+0xc8>
    396c:	mov	r1, sp
    3970:	bl	3480 <read_double>
    3974:	subs	r5, r0, #0
    3978:	bne	3838 <coda_cursor_read_float+0xc4>
    397c:	vldr	d7, [sp]
    3980:	vcvt.f32.f64	s14, d7
    3984:	vstr	s14, [r4]
    3988:	b	383c <coda_cursor_read_float+0xc8>
    398c:	movw	r2, #0
    3990:	movt	r2, #0
    3994:	movw	r1, #0
    3998:	movt	r1, #0
    399c:	movw	r3, #2375	; 0x947
    39a0:	mvn	r0, #99	; 0x63
    39a4:	bl	0 <coda_set_error>
    39a8:	mvn	r5, #0
    39ac:	b	383c <coda_cursor_read_float+0xc8>
    39b0:	movw	r2, #0
    39b4:	movt	r2, #0
    39b8:	movw	r1, #0
    39bc:	movt	r1, #0
    39c0:	movw	r3, #2380	; 0x94c
    39c4:	mvn	r0, #99	; 0x63
    39c8:	bl	0 <coda_set_error>
    39cc:	mvn	r5, #0
    39d0:	b	383c <coda_cursor_read_float+0xc8>
    39d4:	mov	r0, r1
    39d8:	mvn	r5, #0
    39dc:	bl	0 <coda_type_get_native_type_name>
    39e0:	mov	r2, r0
    39e4:	movw	r1, #0
    39e8:	movt	r1, #0
    39ec:	mvn	r0, #104	; 0x68
    39f0:	bl	0 <coda_set_error>
    39f4:	b	383c <coda_cursor_read_float+0xc8>
    39f8:	.word	0x000001e4

000039fc <read_double_pair>:
    39fc:	ldr	r3, [r0, #4]
    3a00:	str	r4, [sp, #-8]!
    3a04:	add	r3, r0, r3, lsl #4
    3a08:	ldr	r3, [r3, #-8]
    3a0c:	ldr	r2, [r3, #8]
    3a10:	str	lr, [sp, #4]
    3a14:	sub	sp, sp, #520	; 0x208
    3a18:	cmp	r2, #6
    3a1c:	bne	3ab4 <read_double_pair+0xb8>
    3a20:	ldr	r3, [r3, #40]	; 0x28
    3a24:	cmp	r3, #3
    3a28:	bne	3ab4 <read_double_pair+0xb8>
    3a2c:	mov	r2, #520	; 0x208
    3a30:	mov	r4, r1
    3a34:	mov	r1, r0
    3a38:	mov	r0, sp
    3a3c:	bl	0 <memcpy>
    3a40:	mov	r0, sp
    3a44:	bl	0 <coda_cursor_use_base_type_of_special_type>
    3a48:	subs	r1, r0, #0
    3a4c:	bne	3aac <read_double_pair+0xb0>
    3a50:	mov	r0, sp
    3a54:	bl	0 <coda_cursor_goto_record_field_by_index>
    3a58:	cmp	r0, #0
    3a5c:	bne	3aac <read_double_pair+0xb0>
    3a60:	mov	r1, r4
    3a64:	mov	r0, sp
    3a68:	bl	30bc <coda_cursor_read_double>
    3a6c:	cmp	r0, #0
    3a70:	bne	3aac <read_double_pair+0xb0>
    3a74:	mov	r0, sp
    3a78:	bl	0 <coda_cursor_goto_next_record_field>
    3a7c:	cmp	r0, #0
    3a80:	bne	3aac <read_double_pair+0xb0>
    3a84:	add	r1, r4, #8
    3a88:	mov	r0, sp
    3a8c:	bl	30bc <coda_cursor_read_double>
    3a90:	adds	r0, r0, #0
    3a94:	movne	r0, #1
    3a98:	rsb	r0, r0, #0
    3a9c:	add	sp, sp, #520	; 0x208
    3aa0:	ldr	r4, [sp]
    3aa4:	add	sp, sp, #4
    3aa8:	pop	{pc}		; (ldr pc, [sp], #4)
    3aac:	mvn	r0, #0
    3ab0:	b	3a9c <read_double_pair+0xa0>
    3ab4:	mvn	r0, #104	; 0x68
    3ab8:	movw	r1, #0
    3abc:	movt	r1, #0
    3ac0:	bl	0 <coda_set_error>
    3ac4:	mvn	r0, #0
    3ac8:	b	3a9c <read_double_pair+0xa0>

00003acc <read_split_array.constprop.2>:
    3acc:	strd	r4, [sp, #-36]!	; 0xffffffdc
    3ad0:	mov	r5, r1
    3ad4:	mov	r4, r3
    3ad8:	strd	r6, [sp, #8]
    3adc:	mov	r6, r2
    3ae0:	mov	r7, r0
    3ae4:	strd	r8, [sp, #16]
    3ae8:	strd	sl, [sp, #24]
    3aec:	str	lr, [sp, #32]
    3af0:	sub	sp, sp, #620	; 0x26c
    3af4:	add	r1, sp, #8
    3af8:	add	r2, sp, #28
    3afc:	bl	0 <coda_cursor_get_array_dim>
    3b00:	subs	r8, r0, #0
    3b04:	bne	3c04 <read_split_array.constprop.2+0x138>
    3b08:	mov	r1, r7
    3b0c:	add	r0, sp, #96	; 0x60
    3b10:	mov	r2, #520	; 0x208
    3b14:	bl	0 <memcpy>
    3b18:	ldr	r1, [sp, #8]
    3b1c:	cmp	r1, #1
    3b20:	movgt	r3, #0
    3b24:	movle	r3, #1
    3b28:	cmp	r4, #1
    3b2c:	orrne	r3, r3, #1
    3b30:	cmp	r3, #0
    3b34:	beq	3c0c <read_split_array.constprop.2+0x140>
    3b38:	cmp	r1, #0
    3b3c:	ble	3b84 <read_split_array.constprop.2+0xb8>
    3b40:	add	r3, sp, #24
    3b44:	mov	r4, #1
    3b48:	add	r1, r3, r1, lsl #2
    3b4c:	ldr	r2, [r3, #4]!
    3b50:	cmp	r1, r3
    3b54:	mul	r4, r2, r4
    3b58:	bne	3b4c <read_split_array.constprop.2+0x80>
    3b5c:	cmp	r4, #0
    3b60:	bgt	3b88 <read_split_array.constprop.2+0xbc>
    3b64:	mov	r0, r8
    3b68:	add	sp, sp, #620	; 0x26c
    3b6c:	ldrd	r4, [sp]
    3b70:	ldrd	r6, [sp, #8]
    3b74:	ldrd	r8, [sp, #16]
    3b78:	ldrd	sl, [sp, #24]
    3b7c:	add	sp, sp, #32
    3b80:	pop	{pc}		; (ldr pc, [sp], #4)
    3b84:	mov	r4, #1
    3b88:	mov	r1, #0
    3b8c:	add	r0, sp, #96	; 0x60
    3b90:	bl	0 <coda_cursor_goto_array_element_by_index>
    3b94:	subs	r9, r0, #0
    3b98:	bne	3c04 <read_split_array.constprop.2+0x138>
    3b9c:	sub	sl, r4, #1
    3ba0:	add	r7, sp, #12
    3ba4:	add	fp, sp, #20
    3ba8:	b	3bb8 <read_split_array.constprop.2+0xec>
    3bac:	cmp	r9, r4
    3bb0:	add	r6, r6, #8
    3bb4:	bge	3b64 <read_split_array.constprop.2+0x98>
    3bb8:	mov	r1, r7
    3bbc:	add	r0, sp, #96	; 0x60
    3bc0:	bl	39fc <read_double_pair>
    3bc4:	ldr	r3, [r7]
    3bc8:	cmp	r9, sl
    3bcc:	add	r0, sp, #96	; 0x60
    3bd0:	add	r9, r9, #1
    3bd4:	add	r5, r5, #8
    3bd8:	ldr	r2, [fp]
    3bdc:	ldr	r1, [r7, #4]
    3be0:	str	r3, [r5, #-8]
    3be4:	ldr	r3, [fp, #4]
    3be8:	str	r1, [r5, #-4]
    3bec:	str	r2, [r6]
    3bf0:	str	r3, [r6, #4]
    3bf4:	bge	3bac <read_split_array.constprop.2+0xe0>
    3bf8:	bl	0 <coda_cursor_goto_next_array_element>
    3bfc:	cmp	r0, #0
    3c00:	beq	3bac <read_split_array.constprop.2+0xe0>
    3c04:	mvn	r8, #0
    3c08:	b	3b64 <read_split_array.constprop.2+0x98>
    3c0c:	mov	lr, #1
    3c10:	add	ip, sp, #24
    3c14:	mov	r2, lr
    3c18:	add	r0, sp, #64	; 0x40
    3c1c:	mov	r3, r8
    3c20:	str	lr, [sp, #60]	; 0x3c
    3c24:	ldr	lr, [ip, #4]!
    3c28:	add	r3, r3, #1
    3c2c:	cmp	r1, r3
    3c30:	mul	r2, lr, r2
    3c34:	str	r2, [r0], #4
    3c38:	bgt	3c24 <read_split_array.constprop.2+0x158>
    3c3c:	add	r3, sp, #616	; 0x268
    3c40:	add	r3, r3, r1, lsl #2
    3c44:	ldr	r9, [r3, #-556]	; 0xfffffdd4
    3c48:	cmp	r9, #0
    3c4c:	ble	3b64 <read_split_array.constprop.2+0x98>
    3c50:	add	r3, sp, #616	; 0x268
    3c54:	add	r0, sp, #96	; 0x60
    3c58:	add	r3, r3, r1, lsl #2
    3c5c:	mov	r1, #0
    3c60:	ldr	r3, [r3, #-560]	; 0xfffffdd0
    3c64:	str	r3, [sp, #4]
    3c68:	bl	0 <coda_cursor_goto_array_element_by_index>
    3c6c:	subs	sl, r0, #0
    3c70:	bne	3c04 <read_split_array.constprop.2+0x138>
    3c74:	mov	r4, sl
    3c78:	add	r7, sp, #12
    3c7c:	add	fp, sp, #20
    3c80:	mov	r1, r7
    3c84:	add	r0, sp, #96	; 0x60
    3c88:	bl	39fc <read_double_pair>
    3c8c:	ldrd	r0, [r7]
    3c90:	lsl	r3, r4, #3
    3c94:	add	sl, sl, #1
    3c98:	cmp	r9, sl
    3c9c:	ldr	lr, [fp]
    3ca0:	add	ip, r5, r3
    3ca4:	add	r3, r6, r3
    3ca8:	str	r0, [r5, r4, lsl #3]
    3cac:	ldr	r0, [fp, #4]
    3cb0:	str	r1, [ip, #4]
    3cb4:	str	lr, [r6, r4, lsl #3]
    3cb8:	str	r0, [r3, #4]
    3cbc:	bgt	3d48 <read_split_array.constprop.2+0x27c>
    3cc0:	ldr	r3, [sp, #4]
    3cc4:	add	r4, r4, r3
    3cc8:	cmp	r9, r4
    3ccc:	bgt	3c80 <read_split_array.constprop.2+0x1b4>
    3cd0:	cmp	r9, sl
    3cd4:	beq	3b64 <read_split_array.constprop.2+0x98>
    3cd8:	ldr	r3, [sp, #8]
    3cdc:	add	r2, sp, #616	; 0x268
    3ce0:	add	r1, r2, r3, lsl #2
    3ce4:	subs	r0, r3, #3
    3ce8:	mov	ip, r1
    3cec:	ldr	r1, [r1, #-564]	; 0xfffffdcc
    3cf0:	ldr	ip, [ip, #-556]	; 0xfffffdd4
    3cf4:	sub	r1, r1, ip
    3cf8:	add	r4, r4, r1
    3cfc:	bmi	3c80 <read_split_array.constprop.2+0x1b4>
    3d00:	add	r1, r2, r3, lsl #2
    3d04:	ldr	r1, [r1, #-560]	; 0xfffffdd0
    3d08:	cmp	r1, r4
    3d0c:	bgt	3c80 <read_split_array.constprop.2+0x1b4>
    3d10:	sub	r3, r3, #-1073741822	; 0xc0000002
    3d14:	add	r2, sp, #60	; 0x3c
    3d18:	add	r3, r2, r3, lsl #2
    3d1c:	b	3d2c <read_split_array.constprop.2+0x260>
    3d20:	ldr	r1, [r3, #4]
    3d24:	cmp	r1, r4
    3d28:	bgt	3c80 <read_split_array.constprop.2+0x1b4>
    3d2c:	ldr	ip, [r3, #-4]!
    3d30:	sub	r0, r0, #1
    3d34:	cmn	r0, #1
    3d38:	sub	r1, ip, r1
    3d3c:	add	r4, r4, r1
    3d40:	bne	3d20 <read_split_array.constprop.2+0x254>
    3d44:	b	3c80 <read_split_array.constprop.2+0x1b4>
    3d48:	add	r0, sp, #96	; 0x60
    3d4c:	bl	0 <coda_cursor_goto_next_array_element>
    3d50:	cmp	r0, #0
    3d54:	bne	3c04 <read_split_array.constprop.2+0x138>
    3d58:	ldr	r3, [sp, #4]
    3d5c:	add	r4, r4, r3
    3d60:	cmp	r9, r4
    3d64:	bgt	3c80 <read_split_array.constprop.2+0x1b4>
    3d68:	b	3cd8 <read_split_array.constprop.2+0x20c>

00003d6c <coda_cursor_read_char>:
    3d6c:	cmp	r0, #0
    3d70:	str	r4, [sp, #-8]!
    3d74:	str	lr, [sp, #4]
    3d78:	beq	3ec4 <coda_cursor_read_char+0x158>
    3d7c:	ldr	r3, [r0, #4]
    3d80:	cmp	r3, #0
    3d84:	ble	3ec4 <coda_cursor_read_char+0x158>
    3d88:	add	r3, r0, r3, lsl #4
    3d8c:	ldr	r2, [r3, #-8]
    3d90:	cmp	r2, #0
    3d94:	beq	3ec4 <coda_cursor_read_char+0x158>
    3d98:	cmp	r1, #0
    3d9c:	beq	3ee8 <coda_cursor_read_char+0x17c>
    3da0:	ldr	r3, [r2]
    3da4:	cmp	r3, #99	; 0x63
    3da8:	ldrhi	r2, [r2, #4]
    3dac:	ldr	ip, [r2, #8]
    3db0:	sub	ip, ip, #2
    3db4:	cmp	ip, #1
    3db8:	bls	3e34 <coda_cursor_read_char+0xc8>
    3dbc:	ldr	r2, [r2, #12]
    3dc0:	cmp	r2, #10
    3dc4:	bne	3e5c <coda_cursor_read_char+0xf0>
    3dc8:	cmp	r3, #100	; 0x64
    3dcc:	beq	3ebc <coda_cursor_read_char+0x150>
    3dd0:	bls	3e08 <coda_cursor_read_char+0x9c>
    3dd4:	cmp	r3, #103	; 0x67
    3dd8:	beq	3eb4 <coda_cursor_read_char+0x148>
    3ddc:	cmp	r3, #104	; 0x68
    3de0:	beq	3e90 <coda_cursor_read_char+0x124>
    3de4:	cmp	r3, #101	; 0x65
    3de8:	beq	3e98 <coda_cursor_read_char+0x12c>
    3dec:	movw	r1, #0
    3df0:	movt	r1, #0
    3df4:	ldr	r3, [pc, #272]	; 3f0c <coda_cursor_read_char+0x1a0>
    3df8:	movw	r0, #0
    3dfc:	movt	r0, #0
    3e00:	movw	r2, #722	; 0x2d2
    3e04:	bl	0 <__assert_fail>
    3e08:	cmp	r3, #0
    3e0c:	beq	3e88 <coda_cursor_read_char+0x11c>
    3e10:	cmp	r3, #1
    3e14:	bne	3dec <coda_cursor_read_char+0x80>
    3e18:	bl	0 <coda_bin_cursor_read_char>
    3e1c:	adds	r0, r0, #0
    3e20:	movne	r0, #1
    3e24:	rsb	r0, r0, #0
    3e28:	ldr	r4, [sp]
    3e2c:	add	sp, sp, #4
    3e30:	pop	{pc}		; (ldr pc, [sp], #4)
    3e34:	ldr	ip, [pc, #212]	; 3f10 <coda_cursor_read_char+0x1a4>
    3e38:	mrc	15, 0, lr, cr13, cr0, {3}
    3e3c:	ldr	ip, [pc, ip]
    3e40:	ldr	ip, [lr, ip]
    3e44:	cmp	ip, #0
    3e48:	beq	3dbc <coda_cursor_read_char+0x50>
    3e4c:	ldr	ip, [r2, #48]	; 0x30
    3e50:	cmp	ip, #0
    3e54:	movne	r2, #9
    3e58:	beq	3dbc <coda_cursor_read_char+0x50>
    3e5c:	mov	r0, r2
    3e60:	bl	0 <coda_type_get_native_type_name>
    3e64:	mov	r2, r0
    3e68:	movw	r1, #0
    3e6c:	movt	r1, #0
    3e70:	mvn	r0, #104	; 0x68
    3e74:	bl	0 <coda_set_error>
    3e78:	ldr	r4, [sp]
    3e7c:	add	sp, sp, #4
    3e80:	mvn	r0, #0
    3e84:	pop	{pc}		; (ldr pc, [sp], #4)
    3e88:	bl	0 <coda_ascii_cursor_read_char>
    3e8c:	b	3e1c <coda_cursor_read_char+0xb0>
    3e90:	bl	0 <coda_netcdf_cursor_read_char>
    3e94:	b	3e1c <coda_cursor_read_char+0xb0>
    3e98:	mvn	r0, #10
    3e9c:	mov	r1, #0
    3ea0:	bl	0 <coda_set_error>
    3ea4:	ldr	r4, [sp]
    3ea8:	add	sp, sp, #4
    3eac:	mvn	r0, #0
    3eb0:	pop	{pc}		; (ldr pc, [sp], #4)
    3eb4:	bl	0 <coda_cdf_cursor_read_char>
    3eb8:	b	3e1c <coda_cursor_read_char+0xb0>
    3ebc:	bl	0 <coda_mem_cursor_read_char>
    3ec0:	b	3e1c <coda_cursor_read_char+0xb0>
    3ec4:	mvn	r0, #99	; 0x63
    3ec8:	movw	r2, #0
    3ecc:	movt	r2, #0
    3ed0:	movw	r1, #0
    3ed4:	movt	r1, #0
    3ed8:	movw	r3, #2698	; 0xa8a
    3edc:	bl	0 <coda_set_error>
    3ee0:	mvn	r0, #0
    3ee4:	b	3e28 <coda_cursor_read_char+0xbc>
    3ee8:	mvn	r0, #99	; 0x63
    3eec:	movw	r2, #0
    3ef0:	movt	r2, #0
    3ef4:	movw	r1, #0
    3ef8:	movt	r1, #0
    3efc:	movw	r3, #2703	; 0xa8f
    3f00:	bl	0 <coda_set_error>
    3f04:	mvn	r0, #0
    3f08:	b	3e28 <coda_cursor_read_char+0xbc>
    3f0c:	.word	0x0000024c
    3f10:	.word	0x000000cc

00003f14 <coda_cursor_read_string>:
    3f14:	strd	r4, [sp, #-16]!
    3f18:	str	r6, [sp, #8]
    3f1c:	subs	r6, r1, #0
    3f20:	str	lr, [sp, #12]
    3f24:	sub	sp, sp, #16
    3f28:	beq	407c <coda_cursor_read_string+0x168>
    3f2c:	cmp	r2, #0
    3f30:	mov	r5, r2
    3f34:	ble	4054 <coda_cursor_read_string+0x140>
    3f38:	add	r1, sp, #12
    3f3c:	mov	r4, r0
    3f40:	bl	0 <coda_cursor_has_ascii_content>
    3f44:	subs	r1, r0, #0
    3f48:	bne	4034 <coda_cursor_read_string+0x120>
    3f4c:	ldr	r3, [sp, #12]
    3f50:	cmp	r3, #0
    3f54:	beq	403c <coda_cursor_read_string+0x128>
    3f58:	ldr	r3, [r4, #4]
    3f5c:	add	r3, r4, r3, lsl #4
    3f60:	ldr	r3, [r3, #-8]
    3f64:	ldr	r3, [r3]
    3f68:	cmp	r3, #101	; 0x65
    3f6c:	beq	4010 <coda_cursor_read_string+0xfc>
    3f70:	bhi	3fa0 <coda_cursor_read_string+0x8c>
    3f74:	cmp	r3, #1
    3f78:	beq	3ffc <coda_cursor_read_string+0xe8>
    3f7c:	cmp	r3, #0
    3f80:	beq	3fd8 <coda_cursor_read_string+0xc4>
    3f84:	cmp	r3, #100	; 0x64
    3f88:	bne	40a0 <coda_cursor_read_string+0x18c>
    3f8c:	mov	r2, r5
    3f90:	mov	r1, r6
    3f94:	mov	r0, r4
    3f98:	bl	0 <coda_mem_cursor_read_string>
    3f9c:	b	3fc4 <coda_cursor_read_string+0xb0>
    3fa0:	cmp	r3, #103	; 0x67
    3fa4:	beq	4020 <coda_cursor_read_string+0x10c>
    3fa8:	bcc	3fec <coda_cursor_read_string+0xd8>
    3fac:	cmp	r3, #104	; 0x68
    3fb0:	bne	40a0 <coda_cursor_read_string+0x18c>
    3fb4:	mov	r2, r5
    3fb8:	mov	r1, r6
    3fbc:	mov	r0, r4
    3fc0:	bl	0 <coda_netcdf_cursor_read_string>
    3fc4:	add	sp, sp, #16
    3fc8:	ldrd	r4, [sp]
    3fcc:	ldr	r6, [sp, #8]
    3fd0:	add	sp, sp, #12
    3fd4:	pop	{pc}		; (ldr pc, [sp], #4)
    3fd8:	mov	r2, r5
    3fdc:	mov	r1, r6
    3fe0:	mov	r0, r4
    3fe4:	bl	0 <coda_ascii_cursor_read_string>
    3fe8:	b	3fc4 <coda_cursor_read_string+0xb0>
    3fec:	mvn	r0, #12
    3ff0:	bl	0 <coda_set_error>
    3ff4:	mvn	r0, #0
    3ff8:	b	3fc4 <coda_cursor_read_string+0xb0>
    3ffc:	mov	r2, r5
    4000:	mov	r1, r6
    4004:	mov	r0, r4
    4008:	bl	0 <coda_bin_cursor_read_string>
    400c:	b	3fc4 <coda_cursor_read_string+0xb0>
    4010:	mvn	r0, #10
    4014:	bl	0 <coda_set_error>
    4018:	mvn	r0, #0
    401c:	b	3fc4 <coda_cursor_read_string+0xb0>
    4020:	mov	r2, r5
    4024:	mov	r1, r6
    4028:	mov	r0, r4
    402c:	bl	0 <coda_cdf_cursor_read_string>
    4030:	b	3fc4 <coda_cursor_read_string+0xb0>
    4034:	mvn	r0, #0
    4038:	b	3fc4 <coda_cursor_read_string+0xb0>
    403c:	mvn	r0, #104	; 0x68
    4040:	movw	r1, #0
    4044:	movt	r1, #0
    4048:	bl	0 <coda_set_error>
    404c:	mvn	r0, #0
    4050:	b	3fc4 <coda_cursor_read_string+0xb0>
    4054:	movw	ip, #2753	; 0xac1
    4058:	mvn	r0, #99	; 0x63
    405c:	movw	r3, #0
    4060:	movt	r3, #0
    4064:	movw	r1, #0
    4068:	movt	r1, #0
    406c:	str	ip, [sp]
    4070:	bl	0 <coda_set_error>
    4074:	mvn	r0, #0
    4078:	b	3fc4 <coda_cursor_read_string+0xb0>
    407c:	mvn	r0, #99	; 0x63
    4080:	movw	r2, #0
    4084:	movt	r2, #0
    4088:	movw	r1, #0
    408c:	movt	r1, #0
    4090:	movw	r3, #2747	; 0xabb
    4094:	bl	0 <coda_set_error>
    4098:	mvn	r0, #0
    409c:	b	3fc4 <coda_cursor_read_string+0xb0>
    40a0:	movw	r1, #0
    40a4:	movt	r1, #0
    40a8:	ldr	r3, [pc, #12]	; 40bc <coda_cursor_read_string+0x1a8>
    40ac:	movw	r0, #0
    40b0:	movt	r0, #0
    40b4:	movw	r2, #758	; 0x2f6
    40b8:	bl	0 <__assert_fail>
    40bc:	.word	0x00000258

000040c0 <coda_cursor_read_bits>:
    40c0:	subs	ip, r0, #0
    40c4:	strd	r4, [sp, #-16]!
    40c8:	str	r6, [sp, #8]
    40cc:	str	lr, [sp, #12]
    40d0:	ldrd	r4, [sp, #16]
    40d4:	beq	41a0 <coda_cursor_read_bits+0xe0>
    40d8:	ldr	lr, [ip, #4]
    40dc:	cmp	lr, #0
    40e0:	ble	41a0 <coda_cursor_read_bits+0xe0>
    40e4:	add	ip, ip, lr, lsl #4
    40e8:	ldr	ip, [ip, #-8]
    40ec:	cmp	ip, #0
    40f0:	beq	41a0 <coda_cursor_read_bits+0xe0>
    40f4:	cmp	r1, #0
    40f8:	beq	41e8 <coda_cursor_read_bits+0x128>
    40fc:	cmp	r4, #0
    4100:	sbcs	lr, r5, #0
    4104:	blt	41c4 <coda_cursor_read_bits+0x104>
    4108:	orrs	lr, r4, r5
    410c:	beq	4150 <coda_cursor_read_bits+0x90>
    4110:	ldr	ip, [ip]
    4114:	cmp	ip, #1
    4118:	beq	418c <coda_cursor_read_bits+0xcc>
    411c:	cmp	ip, #0
    4120:	beq	4178 <coda_cursor_read_bits+0xb8>
    4124:	cmp	ip, #100	; 0x64
    4128:	beq	4164 <coda_cursor_read_bits+0xa4>
    412c:	mvn	r0, #104	; 0x68
    4130:	movw	r1, #0
    4134:	movt	r1, #0
    4138:	bl	0 <coda_set_error>
    413c:	ldrd	r4, [sp]
    4140:	mvn	r0, #0
    4144:	ldr	r6, [sp, #8]
    4148:	add	sp, sp, #12
    414c:	pop	{pc}		; (ldr pc, [sp], #4)
    4150:	mov	r0, #0
    4154:	ldrd	r4, [sp]
    4158:	ldr	r6, [sp, #8]
    415c:	add	sp, sp, #12
    4160:	pop	{pc}		; (ldr pc, [sp], #4)
    4164:	ldrd	r4, [sp]
    4168:	ldr	r6, [sp, #8]
    416c:	ldr	lr, [sp, #12]
    4170:	add	sp, sp, #16
    4174:	b	0 <coda_mem_cursor_read_bits>
    4178:	ldrd	r4, [sp]
    417c:	ldr	r6, [sp, #8]
    4180:	ldr	lr, [sp, #12]
    4184:	add	sp, sp, #16
    4188:	b	0 <coda_ascii_cursor_read_bits>
    418c:	ldrd	r4, [sp]
    4190:	ldr	r6, [sp, #8]
    4194:	ldr	lr, [sp, #12]
    4198:	add	sp, sp, #16
    419c:	b	0 <coda_bin_cursor_read_bits>
    41a0:	mvn	r0, #99	; 0x63
    41a4:	movw	r2, #0
    41a8:	movt	r2, #0
    41ac:	movw	r1, #0
    41b0:	movt	r1, #0
    41b4:	movw	r3, #2789	; 0xae5
    41b8:	bl	0 <coda_set_error>
    41bc:	mvn	r0, #0
    41c0:	b	4154 <coda_cursor_read_bits+0x94>
    41c4:	mvn	r0, #99	; 0x63
    41c8:	movw	r2, #0
    41cc:	movt	r2, #0
    41d0:	movw	r1, #0
    41d4:	movt	r1, #0
    41d8:	movw	r3, #2799	; 0xaef
    41dc:	bl	0 <coda_set_error>
    41e0:	mvn	r0, #0
    41e4:	b	4154 <coda_cursor_read_bits+0x94>
    41e8:	mvn	r0, #99	; 0x63
    41ec:	movw	r2, #0
    41f0:	movt	r2, #0
    41f4:	movw	r1, #0
    41f8:	movt	r1, #0
    41fc:	movw	r3, #2794	; 0xaea
    4200:	bl	0 <coda_set_error>
    4204:	mvn	r0, #0
    4208:	b	4154 <coda_cursor_read_bits+0x94>

0000420c <coda_cursor_read_bytes>:
    420c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    4210:	strd	r6, [sp, #8]
    4214:	str	lr, [sp, #28]
    4218:	subs	lr, r0, #0
    421c:	strd	r8, [sp, #16]
    4220:	str	sl, [sp, #24]
    4224:	ldrd	r4, [sp, #32]
    4228:	beq	431c <coda_cursor_read_bytes+0x110>
    422c:	ldr	ip, [lr, #4]
    4230:	cmp	ip, #0
    4234:	ble	431c <coda_cursor_read_bytes+0x110>
    4238:	add	ip, lr, ip, lsl #4
    423c:	ldr	ip, [ip, #-8]
    4240:	cmp	ip, #0
    4244:	beq	431c <coda_cursor_read_bytes+0x110>
    4248:	cmp	r1, #0
    424c:	beq	4388 <coda_cursor_read_bytes+0x17c>
    4250:	cmp	r2, #0
    4254:	sbcs	r9, r3, #0
    4258:	blt	4364 <coda_cursor_read_bytes+0x158>
    425c:	cmp	r4, #0
    4260:	sbcs	r9, r5, #0
    4264:	blt	4340 <coda_cursor_read_bytes+0x134>
    4268:	orrs	r9, r4, r5
    426c:	beq	42a4 <coda_cursor_read_bytes+0x98>
    4270:	ldr	ip, [ip]
    4274:	cmp	ip, #1
    4278:	beq	4300 <coda_cursor_read_bytes+0xf4>
    427c:	cmp	ip, #0
    4280:	beq	42e4 <coda_cursor_read_bytes+0xd8>
    4284:	cmp	ip, #100	; 0x64
    4288:	beq	42c0 <coda_cursor_read_bytes+0xb4>
    428c:	mvn	r0, #104	; 0x68
    4290:	movw	r1, #0
    4294:	movt	r1, #0
    4298:	bl	0 <coda_set_error>
    429c:	mvn	r0, #0
    42a0:	b	42a8 <coda_cursor_read_bytes+0x9c>
    42a4:	mov	r0, #0
    42a8:	ldrd	r4, [sp]
    42ac:	ldrd	r6, [sp, #8]
    42b0:	ldrd	r8, [sp, #16]
    42b4:	ldr	sl, [sp, #24]
    42b8:	add	sp, sp, #28
    42bc:	pop	{pc}		; (ldr pc, [sp], #4)
    42c0:	mov	r0, lr
    42c4:	strd	r4, [sp, #32]
    42c8:	ldrd	r4, [sp]
    42cc:	ldrd	r6, [sp, #8]
    42d0:	ldrd	r8, [sp, #16]
    42d4:	ldr	sl, [sp, #24]
    42d8:	ldr	lr, [sp, #28]
    42dc:	add	sp, sp, #32
    42e0:	b	0 <coda_mem_cursor_read_bytes>
    42e4:	ldrd	r4, [sp]
    42e8:	ldrd	r6, [sp, #8]
    42ec:	ldrd	r8, [sp, #16]
    42f0:	ldr	sl, [sp, #24]
    42f4:	ldr	lr, [sp, #28]
    42f8:	add	sp, sp, #32
    42fc:	b	0 <coda_ascii_cursor_read_bytes>
    4300:	ldrd	r4, [sp]
    4304:	ldrd	r6, [sp, #8]
    4308:	ldrd	r8, [sp, #16]
    430c:	ldr	sl, [sp, #24]
    4310:	ldr	lr, [sp, #28]
    4314:	add	sp, sp, #32
    4318:	b	0 <coda_bin_cursor_read_bytes>
    431c:	mvn	r0, #99	; 0x63
    4320:	movw	r2, #0
    4324:	movt	r2, #0
    4328:	movw	r1, #0
    432c:	movt	r1, #0
    4330:	movw	r3, #2845	; 0xb1d
    4334:	bl	0 <coda_set_error>
    4338:	mvn	r0, #0
    433c:	b	42a8 <coda_cursor_read_bytes+0x9c>
    4340:	mvn	r0, #99	; 0x63
    4344:	movw	r2, #0
    4348:	movt	r2, #0
    434c:	movw	r1, #0
    4350:	movt	r1, #0
    4354:	movw	r3, #2860	; 0xb2c
    4358:	bl	0 <coda_set_error>
    435c:	mvn	r0, #0
    4360:	b	42a8 <coda_cursor_read_bytes+0x9c>
    4364:	mvn	r0, #99	; 0x63
    4368:	movw	r2, #0
    436c:	movt	r2, #0
    4370:	movw	r1, #0
    4374:	movt	r1, #0
    4378:	movw	r3, #2855	; 0xb27
    437c:	bl	0 <coda_set_error>
    4380:	mvn	r0, #0
    4384:	b	42a8 <coda_cursor_read_bytes+0x9c>
    4388:	mvn	r0, #99	; 0x63
    438c:	movw	r2, #0
    4390:	movt	r2, #0
    4394:	movw	r1, #0
    4398:	movt	r1, #0
    439c:	movw	r3, #2850	; 0xb22
    43a0:	bl	0 <coda_set_error>
    43a4:	mvn	r0, #0
    43a8:	b	42a8 <coda_cursor_read_bytes+0x9c>

000043ac <coda_cursor_read_int8_array>:
    43ac:	cmp	r0, #0
    43b0:	str	r4, [sp, #-8]!
    43b4:	str	lr, [sp, #4]
    43b8:	beq	4488 <coda_cursor_read_int8_array+0xdc>
    43bc:	ldr	r3, [r0, #4]
    43c0:	cmp	r3, #0
    43c4:	ble	4488 <coda_cursor_read_int8_array+0xdc>
    43c8:	add	r3, r0, r3, lsl #4
    43cc:	ldr	r3, [r3, #-8]
    43d0:	cmp	r3, #0
    43d4:	beq	4488 <coda_cursor_read_int8_array+0xdc>
    43d8:	cmp	r1, #0
    43dc:	beq	44d0 <coda_cursor_read_int8_array+0x124>
    43e0:	ldr	ip, [r3]
    43e4:	cmp	ip, #99	; 0x63
    43e8:	ldrhi	r3, [r3, #4]
    43ec:	ldr	ip, [r3, #8]
    43f0:	cmp	ip, #1
    43f4:	bne	44ac <coda_cursor_read_int8_array+0x100>
    43f8:	ldr	ip, [r3, #40]	; 0x28
    43fc:	ldr	r3, [ip, #8]
    4400:	sub	r3, r3, #2
    4404:	cmp	r3, #1
    4408:	bls	4434 <coda_cursor_read_int8_array+0x88>
    440c:	ldr	r3, [ip, #12]
    4410:	cmp	r3, #0
    4414:	bne	445c <coda_cursor_read_int8_array+0xb0>
    4418:	bl	ba8 <read_int8_array>
    441c:	adds	r0, r0, #0
    4420:	movne	r0, #1
    4424:	rsb	r0, r0, #0
    4428:	ldr	r4, [sp]
    442c:	add	sp, sp, #4
    4430:	pop	{pc}		; (ldr pc, [sp], #4)
    4434:	ldr	r3, [pc, #184]	; 44f4 <coda_cursor_read_int8_array+0x148>
    4438:	mrc	15, 0, lr, cr13, cr0, {3}
    443c:	ldr	r3, [pc, r3]
    4440:	ldr	r3, [lr, r3]
    4444:	cmp	r3, #0
    4448:	beq	440c <coda_cursor_read_int8_array+0x60>
    444c:	ldr	r3, [ip, #48]	; 0x30
    4450:	cmp	r3, #0
    4454:	movne	r3, #9
    4458:	beq	440c <coda_cursor_read_int8_array+0x60>
    445c:	mov	r0, r3
    4460:	bl	0 <coda_type_get_native_type_name>
    4464:	mov	r2, r0
    4468:	movw	r1, #0
    446c:	movt	r1, #0
    4470:	mvn	r0, #104	; 0x68
    4474:	bl	0 <coda_set_error>
    4478:	ldr	r4, [sp]
    447c:	add	sp, sp, #4
    4480:	mvn	r0, #0
    4484:	pop	{pc}		; (ldr pc, [sp], #4)
    4488:	mvn	r0, #99	; 0x63
    448c:	movw	r2, #0
    4490:	movt	r2, #0
    4494:	movw	r1, #0
    4498:	movt	r1, #0
    449c:	movw	r3, #2908	; 0xb5c
    44a0:	bl	0 <coda_set_error>
    44a4:	mvn	r0, #0
    44a8:	b	4428 <coda_cursor_read_int8_array+0x7c>
    44ac:	mov	r0, ip
    44b0:	bl	0 <coda_type_get_class_name>
    44b4:	mov	r2, r0
    44b8:	movw	r1, #0
    44bc:	movt	r1, #0
    44c0:	mvn	r0, #104	; 0x68
    44c4:	bl	0 <coda_set_error>
    44c8:	mvn	r0, #0
    44cc:	b	4428 <coda_cursor_read_int8_array+0x7c>
    44d0:	mvn	r0, #99	; 0x63
    44d4:	movw	r2, #0
    44d8:	movt	r2, #0
    44dc:	movw	r1, #0
    44e0:	movt	r1, #0
    44e4:	movw	r3, #2913	; 0xb61
    44e8:	bl	0 <coda_set_error>
    44ec:	mvn	r0, #0
    44f0:	b	4428 <coda_cursor_read_int8_array+0x7c>
    44f4:	.word	0x000000b0

000044f8 <coda_cursor_read_uint8_array>:
    44f8:	cmp	r0, #0
    44fc:	str	r4, [sp, #-8]!
    4500:	str	lr, [sp, #4]
    4504:	beq	45d4 <coda_cursor_read_uint8_array+0xdc>
    4508:	ldr	r3, [r0, #4]
    450c:	cmp	r3, #0
    4510:	ble	45d4 <coda_cursor_read_uint8_array+0xdc>
    4514:	add	r3, r0, r3, lsl #4
    4518:	ldr	r3, [r3, #-8]
    451c:	cmp	r3, #0
    4520:	beq	45d4 <coda_cursor_read_uint8_array+0xdc>
    4524:	cmp	r1, #0
    4528:	beq	461c <coda_cursor_read_uint8_array+0x124>
    452c:	ldr	ip, [r3]
    4530:	cmp	ip, #99	; 0x63
    4534:	ldrhi	r3, [r3, #4]
    4538:	ldr	ip, [r3, #8]
    453c:	cmp	ip, #1
    4540:	bne	45f8 <coda_cursor_read_uint8_array+0x100>
    4544:	ldr	ip, [r3, #40]	; 0x28
    4548:	ldr	r3, [ip, #8]
    454c:	sub	r3, r3, #2
    4550:	cmp	r3, #1
    4554:	bls	4580 <coda_cursor_read_uint8_array+0x88>
    4558:	ldr	r3, [ip, #12]
    455c:	cmp	r3, #1
    4560:	bne	45a8 <coda_cursor_read_uint8_array+0xb0>
    4564:	bl	d08 <read_uint8_array>
    4568:	adds	r0, r0, #0
    456c:	movne	r0, #1
    4570:	rsb	r0, r0, #0
    4574:	ldr	r4, [sp]
    4578:	add	sp, sp, #4
    457c:	pop	{pc}		; (ldr pc, [sp], #4)
    4580:	ldr	r3, [pc, #184]	; 4640 <coda_cursor_read_uint8_array+0x148>
    4584:	mrc	15, 0, lr, cr13, cr0, {3}
    4588:	ldr	r3, [pc, r3]
    458c:	ldr	r3, [lr, r3]
    4590:	cmp	r3, #0
    4594:	beq	4558 <coda_cursor_read_uint8_array+0x60>
    4598:	ldr	r3, [ip, #48]	; 0x30
    459c:	cmp	r3, #0
    45a0:	movne	r3, #9
    45a4:	beq	4558 <coda_cursor_read_uint8_array+0x60>
    45a8:	mov	r0, r3
    45ac:	bl	0 <coda_type_get_native_type_name>
    45b0:	mov	r2, r0
    45b4:	movw	r1, #0
    45b8:	movt	r1, #0
    45bc:	mvn	r0, #104	; 0x68
    45c0:	bl	0 <coda_set_error>
    45c4:	ldr	r4, [sp]
    45c8:	add	sp, sp, #4
    45cc:	mvn	r0, #0
    45d0:	pop	{pc}		; (ldr pc, [sp], #4)
    45d4:	mvn	r0, #99	; 0x63
    45d8:	movw	r2, #0
    45dc:	movt	r2, #0
    45e0:	movw	r1, #0
    45e4:	movt	r1, #0
    45e8:	movw	r3, #2967	; 0xb97
    45ec:	bl	0 <coda_set_error>
    45f0:	mvn	r0, #0
    45f4:	b	4574 <coda_cursor_read_uint8_array+0x7c>
    45f8:	mov	r0, ip
    45fc:	bl	0 <coda_type_get_class_name>
    4600:	mov	r2, r0
    4604:	movw	r1, #0
    4608:	movt	r1, #0
    460c:	mvn	r0, #104	; 0x68
    4610:	bl	0 <coda_set_error>
    4614:	mvn	r0, #0
    4618:	b	4574 <coda_cursor_read_uint8_array+0x7c>
    461c:	mvn	r0, #99	; 0x63
    4620:	movw	r2, #0
    4624:	movt	r2, #0
    4628:	movw	r1, #0
    462c:	movt	r1, #0
    4630:	movw	r3, #2972	; 0xb9c
    4634:	bl	0 <coda_set_error>
    4638:	mvn	r0, #0
    463c:	b	4574 <coda_cursor_read_uint8_array+0x7c>
    4640:	.word	0x000000b0

00004644 <coda_cursor_read_int16_array>:
    4644:	strd	r4, [sp, #-12]!
    4648:	subs	r5, r0, #0
    464c:	str	lr, [sp, #8]
    4650:	sub	sp, sp, #12
    4654:	beq	47fc <coda_cursor_read_int16_array+0x1b8>
    4658:	ldr	r3, [r5, #4]
    465c:	cmp	r3, #0
    4660:	ble	47fc <coda_cursor_read_int16_array+0x1b8>
    4664:	add	r3, r5, r3, lsl #4
    4668:	ldr	r3, [r3, #-8]
    466c:	cmp	r3, #0
    4670:	beq	47fc <coda_cursor_read_int16_array+0x1b8>
    4674:	cmp	r1, #0
    4678:	mov	r4, r1
    467c:	beq	4840 <coda_cursor_read_int16_array+0x1fc>
    4680:	ldr	r1, [r3]
    4684:	cmp	r1, #99	; 0x63
    4688:	ldrhi	r3, [r3, #4]
    468c:	ldr	r0, [r3, #8]
    4690:	cmp	r0, #1
    4694:	bne	4820 <coda_cursor_read_int16_array+0x1dc>
    4698:	ldr	r1, [r3, #40]	; 0x28
    469c:	ldr	r3, [r1, #8]
    46a0:	sub	r3, r3, #2
    46a4:	cmp	r3, #1
    46a8:	bls	46f4 <coda_cursor_read_int16_array+0xb0>
    46ac:	ldr	r0, [r1, #12]
    46b0:	cmp	r0, #1
    46b4:	beq	47a8 <coda_cursor_read_int16_array+0x164>
    46b8:	cmp	r0, #2
    46bc:	beq	4780 <coda_cursor_read_int16_array+0x13c>
    46c0:	cmp	r0, #0
    46c4:	beq	4720 <coda_cursor_read_int16_array+0xdc>
    46c8:	bl	0 <coda_type_get_native_type_name>
    46cc:	mov	r2, r0
    46d0:	movw	r1, #0
    46d4:	movt	r1, #0
    46d8:	mvn	r0, #104	; 0x68
    46dc:	bl	0 <coda_set_error>
    46e0:	mvn	r0, #0
    46e4:	add	sp, sp, #12
    46e8:	ldrd	r4, [sp]
    46ec:	add	sp, sp, #8
    46f0:	pop	{pc}		; (ldr pc, [sp], #4)
    46f4:	ldr	r3, [pc, #360]	; 4864 <coda_cursor_read_int16_array+0x220>
    46f8:	mrc	15, 0, r0, cr13, cr0, {3}
    46fc:	ldr	r3, [pc, r3]
    4700:	ldr	r3, [r0, r3]
    4704:	cmp	r3, #0
    4708:	beq	46ac <coda_cursor_read_int16_array+0x68>
    470c:	ldr	r3, [r1, #48]	; 0x30
    4710:	cmp	r3, #0
    4714:	movne	r0, #9
    4718:	bne	46c8 <coda_cursor_read_int16_array+0x84>
    471c:	b	46ac <coda_cursor_read_int16_array+0x68>
    4720:	mov	r1, r4
    4724:	mov	r0, r5
    4728:	bl	ba8 <read_int8_array>
    472c:	cmp	r0, #0
    4730:	bne	46e0 <coda_cursor_read_int16_array+0x9c>
    4734:	mov	r0, r5
    4738:	add	r1, sp, #4
    473c:	bl	0 <coda_cursor_get_num_elements>
    4740:	cmp	r0, #0
    4744:	bne	46e0 <coda_cursor_read_int16_array+0x9c>
    4748:	ldr	r2, [sp, #4]
    474c:	cmp	r2, #0
    4750:	addgt	r3, r4, r2
    4754:	addgt	r2, r3, r2
    4758:	ble	476c <coda_cursor_read_int16_array+0x128>
    475c:	ldrsb	r1, [r3, #-1]!
    4760:	cmp	r4, r3
    4764:	strh	r1, [r2, #-2]!
    4768:	bne	475c <coda_cursor_read_int16_array+0x118>
    476c:	mov	r0, #0
    4770:	add	sp, sp, #12
    4774:	ldrd	r4, [sp]
    4778:	add	sp, sp, #8
    477c:	pop	{pc}		; (ldr pc, [sp], #4)
    4780:	mov	r1, r4
    4784:	mov	r0, r5
    4788:	bl	e44 <read_int16_array>
    478c:	adds	r0, r0, #0
    4790:	movne	r0, #1
    4794:	rsb	r0, r0, #0
    4798:	add	sp, sp, #12
    479c:	ldrd	r4, [sp]
    47a0:	add	sp, sp, #8
    47a4:	pop	{pc}		; (ldr pc, [sp], #4)
    47a8:	mov	r1, r4
    47ac:	mov	r0, r5
    47b0:	bl	d08 <read_uint8_array>
    47b4:	cmp	r0, #0
    47b8:	bne	46e0 <coda_cursor_read_int16_array+0x9c>
    47bc:	mov	r0, r5
    47c0:	add	r1, sp, #4
    47c4:	bl	0 <coda_cursor_get_num_elements>
    47c8:	cmp	r0, #0
    47cc:	bne	46e0 <coda_cursor_read_int16_array+0x9c>
    47d0:	ldr	r2, [sp, #4]
    47d4:	cmp	r2, #0
    47d8:	ble	476c <coda_cursor_read_int16_array+0x128>
    47dc:	add	r3, r4, r2
    47e0:	add	r2, r3, r2
    47e4:	ldrb	r1, [r3, #-1]!
    47e8:	cmp	r3, r4
    47ec:	strh	r1, [r2, #-2]!
    47f0:	bne	47e4 <coda_cursor_read_int16_array+0x1a0>
    47f4:	mov	r0, #0
    47f8:	b	4770 <coda_cursor_read_int16_array+0x12c>
    47fc:	mvn	r0, #99	; 0x63
    4800:	movw	r2, #0
    4804:	movt	r2, #0
    4808:	movw	r1, #0
    480c:	movt	r1, #0
    4810:	movw	r3, #3030	; 0xbd6
    4814:	bl	0 <coda_set_error>
    4818:	mvn	r0, #0
    481c:	b	46e4 <coda_cursor_read_int16_array+0xa0>
    4820:	bl	0 <coda_type_get_class_name>
    4824:	mov	r2, r0
    4828:	movw	r1, #0
    482c:	movt	r1, #0
    4830:	mvn	r0, #104	; 0x68
    4834:	bl	0 <coda_set_error>
    4838:	mvn	r0, #0
    483c:	b	46e4 <coda_cursor_read_int16_array+0xa0>
    4840:	mvn	r0, #99	; 0x63
    4844:	movw	r2, #0
    4848:	movt	r2, #0
    484c:	movw	r1, #0
    4850:	movt	r1, #0
    4854:	movw	r3, #3035	; 0xbdb
    4858:	bl	0 <coda_set_error>
    485c:	mvn	r0, #0
    4860:	b	46e4 <coda_cursor_read_int16_array+0xa0>
    4864:	.word	0x00000160

00004868 <coda_cursor_read_uint16_array>:
    4868:	strd	r4, [sp, #-12]!
    486c:	subs	r5, r0, #0
    4870:	str	lr, [sp, #8]
    4874:	sub	sp, sp, #12
    4878:	beq	49c0 <coda_cursor_read_uint16_array+0x158>
    487c:	ldr	r3, [r5, #4]
    4880:	cmp	r3, #0
    4884:	ble	49c0 <coda_cursor_read_uint16_array+0x158>
    4888:	add	r3, r5, r3, lsl #4
    488c:	ldr	r3, [r3, #-8]
    4890:	cmp	r3, #0
    4894:	beq	49c0 <coda_cursor_read_uint16_array+0x158>
    4898:	cmp	r1, #0
    489c:	mov	r4, r1
    48a0:	beq	4a04 <coda_cursor_read_uint16_array+0x19c>
    48a4:	ldr	r1, [r3]
    48a8:	cmp	r1, #99	; 0x63
    48ac:	ldrhi	r3, [r3, #4]
    48b0:	ldr	r0, [r3, #8]
    48b4:	cmp	r0, #1
    48b8:	bne	49e4 <coda_cursor_read_uint16_array+0x17c>
    48bc:	ldr	r1, [r3, #40]	; 0x28
    48c0:	ldr	r3, [r1, #8]
    48c4:	sub	r3, r3, #2
    48c8:	cmp	r3, #1
    48cc:	bls	4938 <coda_cursor_read_uint16_array+0xd0>
    48d0:	ldr	r0, [r1, #12]
    48d4:	cmp	r0, #1
    48d8:	beq	4964 <coda_cursor_read_uint16_array+0xfc>
    48dc:	cmp	r0, #3
    48e0:	beq	4910 <coda_cursor_read_uint16_array+0xa8>
    48e4:	bl	0 <coda_type_get_native_type_name>
    48e8:	mov	r2, r0
    48ec:	movw	r1, #0
    48f0:	movt	r1, #0
    48f4:	mvn	r0, #104	; 0x68
    48f8:	bl	0 <coda_set_error>
    48fc:	mvn	r0, #0
    4900:	add	sp, sp, #12
    4904:	ldrd	r4, [sp]
    4908:	add	sp, sp, #8
    490c:	pop	{pc}		; (ldr pc, [sp], #4)
    4910:	mov	r1, r4
    4914:	mov	r0, r5
    4918:	bl	fa4 <read_uint16_array>
    491c:	adds	r0, r0, #0
    4920:	movne	r0, #1
    4924:	rsb	r0, r0, #0
    4928:	add	sp, sp, #12
    492c:	ldrd	r4, [sp]
    4930:	add	sp, sp, #8
    4934:	pop	{pc}		; (ldr pc, [sp], #4)
    4938:	ldr	r3, [pc, #232]	; 4a28 <coda_cursor_read_uint16_array+0x1c0>
    493c:	mrc	15, 0, r0, cr13, cr0, {3}
    4940:	ldr	r3, [pc, r3]
    4944:	ldr	r3, [r0, r3]
    4948:	cmp	r3, #0
    494c:	beq	48d0 <coda_cursor_read_uint16_array+0x68>
    4950:	ldr	r3, [r1, #48]	; 0x30
    4954:	cmp	r3, #0
    4958:	movne	r0, #9
    495c:	bne	48e4 <coda_cursor_read_uint16_array+0x7c>
    4960:	b	48d0 <coda_cursor_read_uint16_array+0x68>
    4964:	mov	r1, r4
    4968:	mov	r0, r5
    496c:	bl	d08 <read_uint8_array>
    4970:	cmp	r0, #0
    4974:	bne	48fc <coda_cursor_read_uint16_array+0x94>
    4978:	mov	r0, r5
    497c:	add	r1, sp, #4
    4980:	bl	0 <coda_cursor_get_num_elements>
    4984:	cmp	r0, #0
    4988:	bne	48fc <coda_cursor_read_uint16_array+0x94>
    498c:	ldr	r2, [sp, #4]
    4990:	cmp	r2, #0
    4994:	ble	4900 <coda_cursor_read_uint16_array+0x98>
    4998:	add	r3, r4, r2
    499c:	add	r2, r3, r2
    49a0:	ldrb	r1, [r3, #-1]!
    49a4:	cmp	r3, r4
    49a8:	strh	r1, [r2, #-2]!
    49ac:	bne	49a0 <coda_cursor_read_uint16_array+0x138>
    49b0:	add	sp, sp, #12
    49b4:	ldrd	r4, [sp]
    49b8:	add	sp, sp, #8
    49bc:	pop	{pc}		; (ldr pc, [sp], #4)
    49c0:	mvn	r0, #99	; 0x63
    49c4:	movw	r2, #0
    49c8:	movt	r2, #0
    49cc:	movw	r1, #0
    49d0:	movt	r1, #0
    49d4:	mov	r3, #3120	; 0xc30
    49d8:	bl	0 <coda_set_error>
    49dc:	mvn	r0, #0
    49e0:	b	4900 <coda_cursor_read_uint16_array+0x98>
    49e4:	bl	0 <coda_type_get_class_name>
    49e8:	mov	r2, r0
    49ec:	movw	r1, #0
    49f0:	movt	r1, #0
    49f4:	mvn	r0, #104	; 0x68
    49f8:	bl	0 <coda_set_error>
    49fc:	mvn	r0, #0
    4a00:	b	4900 <coda_cursor_read_uint16_array+0x98>
    4a04:	mvn	r0, #99	; 0x63
    4a08:	movw	r2, #0
    4a0c:	movt	r2, #0
    4a10:	movw	r1, #0
    4a14:	movt	r1, #0
    4a18:	movw	r3, #3125	; 0xc35
    4a1c:	bl	0 <coda_set_error>
    4a20:	mvn	r0, #0
    4a24:	b	4900 <coda_cursor_read_uint16_array+0x98>
    4a28:	.word	0x000000e0

00004a2c <coda_cursor_read_int32_array>:
    4a2c:	strd	r4, [sp, #-12]!
    4a30:	subs	r5, r0, #0
    4a34:	str	lr, [sp, #8]
    4a38:	sub	sp, sp, #12
    4a3c:	beq	4c98 <coda_cursor_read_int32_array+0x26c>
    4a40:	ldr	r3, [r5, #4]
    4a44:	cmp	r3, #0
    4a48:	ble	4c98 <coda_cursor_read_int32_array+0x26c>
    4a4c:	add	r3, r5, r3, lsl #4
    4a50:	ldr	r3, [r3, #-8]
    4a54:	cmp	r3, #0
    4a58:	beq	4c98 <coda_cursor_read_int32_array+0x26c>
    4a5c:	cmp	r1, #0
    4a60:	mov	r4, r1
    4a64:	beq	4cdc <coda_cursor_read_int32_array+0x2b0>
    4a68:	ldr	r1, [r3]
    4a6c:	cmp	r1, #99	; 0x63
    4a70:	ldrhi	r3, [r3, #4]
    4a74:	ldr	r0, [r3, #8]
    4a78:	cmp	r0, #1
    4a7c:	bne	4cbc <coda_cursor_read_int32_array+0x290>
    4a80:	ldr	r1, [r3, #40]	; 0x28
    4a84:	ldr	r3, [r1, #8]
    4a88:	sub	r3, r3, #2
    4a8c:	cmp	r3, #1
    4a90:	bls	4ab8 <coda_cursor_read_int32_array+0x8c>
    4a94:	ldr	r0, [r1, #12]
    4a98:	cmp	r0, #4
    4a9c:	ldrls	pc, [pc, r0, lsl #2]
    4aa0:	b	4ae0 <coda_cursor_read_int32_array+0xb4>
    4aa4:	.word	0x00004b0c
    4aa8:	.word	0x00004b6c
    4aac:	.word	0x00004bc0
    4ab0:	.word	0x00004c18
    4ab4:	.word	0x00004c70
    4ab8:	ldr	r3, [pc, #576]	; 4d00 <coda_cursor_read_int32_array+0x2d4>
    4abc:	mrc	15, 0, r0, cr13, cr0, {3}
    4ac0:	ldr	r3, [pc, r3]
    4ac4:	ldr	r3, [r0, r3]
    4ac8:	cmp	r3, #0
    4acc:	beq	4a94 <coda_cursor_read_int32_array+0x68>
    4ad0:	ldr	r3, [r1, #48]	; 0x30
    4ad4:	cmp	r3, #0
    4ad8:	movne	r0, #9
    4adc:	beq	4a94 <coda_cursor_read_int32_array+0x68>
    4ae0:	bl	0 <coda_type_get_native_type_name>
    4ae4:	mov	r2, r0
    4ae8:	movw	r1, #0
    4aec:	movt	r1, #0
    4af0:	mvn	r0, #104	; 0x68
    4af4:	bl	0 <coda_set_error>
    4af8:	mvn	r0, #0
    4afc:	add	sp, sp, #12
    4b00:	ldrd	r4, [sp]
    4b04:	add	sp, sp, #8
    4b08:	pop	{pc}		; (ldr pc, [sp], #4)
    4b0c:	mov	r1, r4
    4b10:	mov	r0, r5
    4b14:	bl	ba8 <read_int8_array>
    4b18:	cmp	r0, #0
    4b1c:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4b20:	mov	r0, r5
    4b24:	add	r1, sp, #4
    4b28:	bl	0 <coda_cursor_get_num_elements>
    4b2c:	cmp	r0, #0
    4b30:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4b34:	ldr	r3, [sp, #4]
    4b38:	cmp	r3, #0
    4b3c:	addgt	r2, r4, r3, lsl #2
    4b40:	addgt	r3, r4, r3
    4b44:	ble	4b58 <coda_cursor_read_int32_array+0x12c>
    4b48:	ldrsb	r1, [r3, #-1]!
    4b4c:	cmp	r4, r3
    4b50:	str	r1, [r2, #-4]!
    4b54:	bne	4b48 <coda_cursor_read_int32_array+0x11c>
    4b58:	mov	r0, #0
    4b5c:	add	sp, sp, #12
    4b60:	ldrd	r4, [sp]
    4b64:	add	sp, sp, #8
    4b68:	pop	{pc}		; (ldr pc, [sp], #4)
    4b6c:	mov	r1, r4
    4b70:	mov	r0, r5
    4b74:	bl	d08 <read_uint8_array>
    4b78:	cmp	r0, #0
    4b7c:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4b80:	mov	r0, r5
    4b84:	add	r1, sp, #4
    4b88:	bl	0 <coda_cursor_get_num_elements>
    4b8c:	cmp	r0, #0
    4b90:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4b94:	ldr	r3, [sp, #4]
    4b98:	cmp	r3, #0
    4b9c:	ble	4b58 <coda_cursor_read_int32_array+0x12c>
    4ba0:	add	r2, r4, r3, lsl #2
    4ba4:	add	r3, r4, r3
    4ba8:	ldrb	r1, [r3, #-1]!
    4bac:	cmp	r4, r3
    4bb0:	str	r1, [r2, #-4]!
    4bb4:	bne	4ba8 <coda_cursor_read_int32_array+0x17c>
    4bb8:	mov	r0, #0
    4bbc:	b	4b5c <coda_cursor_read_int32_array+0x130>
    4bc0:	mov	r1, r4
    4bc4:	mov	r0, r5
    4bc8:	bl	e44 <read_int16_array>
    4bcc:	cmp	r0, #0
    4bd0:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4bd4:	mov	r0, r5
    4bd8:	add	r1, sp, #4
    4bdc:	bl	0 <coda_cursor_get_num_elements>
    4be0:	cmp	r0, #0
    4be4:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4be8:	ldr	r2, [sp, #4]
    4bec:	cmp	r2, #0
    4bf0:	ble	4b58 <coda_cursor_read_int32_array+0x12c>
    4bf4:	lsl	r2, r2, #1
    4bf8:	add	r3, r4, r2
    4bfc:	add	r2, r3, r2
    4c00:	ldrsh	r1, [r3, #-2]!
    4c04:	cmp	r3, r4
    4c08:	str	r1, [r2, #-4]!
    4c0c:	bne	4c00 <coda_cursor_read_int32_array+0x1d4>
    4c10:	mov	r0, #0
    4c14:	b	4b5c <coda_cursor_read_int32_array+0x130>
    4c18:	mov	r1, r4
    4c1c:	mov	r0, r5
    4c20:	bl	fa4 <read_uint16_array>
    4c24:	cmp	r0, #0
    4c28:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4c2c:	mov	r0, r5
    4c30:	add	r1, sp, #4
    4c34:	bl	0 <coda_cursor_get_num_elements>
    4c38:	cmp	r0, #0
    4c3c:	bne	4af8 <coda_cursor_read_int32_array+0xcc>
    4c40:	ldr	r2, [sp, #4]
    4c44:	cmp	r2, #0
    4c48:	ble	4b58 <coda_cursor_read_int32_array+0x12c>
    4c4c:	lsl	r2, r2, #1
    4c50:	add	r3, r4, r2
    4c54:	add	r2, r3, r2
    4c58:	ldrh	r1, [r3, #-2]!
    4c5c:	cmp	r3, r4
    4c60:	str	r1, [r2, #-4]!
    4c64:	bne	4c58 <coda_cursor_read_int32_array+0x22c>
    4c68:	mov	r0, #0
    4c6c:	b	4b5c <coda_cursor_read_int32_array+0x130>
    4c70:	mov	r1, r4
    4c74:	mov	r0, r5
    4c78:	bl	10e0 <read_int32_array>
    4c7c:	adds	r0, r0, #0
    4c80:	movne	r0, #1
    4c84:	rsb	r0, r0, #0
    4c88:	add	sp, sp, #12
    4c8c:	ldrd	r4, [sp]
    4c90:	add	sp, sp, #8
    4c94:	pop	{pc}		; (ldr pc, [sp], #4)
    4c98:	mvn	r0, #99	; 0x63
    4c9c:	movw	r2, #0
    4ca0:	movt	r2, #0
    4ca4:	movw	r1, #0
    4ca8:	movt	r1, #0
    4cac:	movw	r3, #3199	; 0xc7f
    4cb0:	bl	0 <coda_set_error>
    4cb4:	mvn	r0, #0
    4cb8:	b	4afc <coda_cursor_read_int32_array+0xd0>
    4cbc:	bl	0 <coda_type_get_class_name>
    4cc0:	mov	r2, r0
    4cc4:	movw	r1, #0
    4cc8:	movt	r1, #0
    4ccc:	mvn	r0, #104	; 0x68
    4cd0:	bl	0 <coda_set_error>
    4cd4:	mvn	r0, #0
    4cd8:	b	4afc <coda_cursor_read_int32_array+0xd0>
    4cdc:	mvn	r0, #99	; 0x63
    4ce0:	movw	r2, #0
    4ce4:	movt	r2, #0
    4ce8:	movw	r1, #0
    4cec:	movt	r1, #0
    4cf0:	movw	r3, #3204	; 0xc84
    4cf4:	bl	0 <coda_set_error>
    4cf8:	mvn	r0, #0
    4cfc:	b	4afc <coda_cursor_read_int32_array+0xd0>
    4d00:	.word	0x00000238

00004d04 <coda_cursor_read_uint32_array>:
    4d04:	strd	r4, [sp, #-12]!
    4d08:	subs	r5, r0, #0
    4d0c:	str	lr, [sp, #8]
    4d10:	sub	sp, sp, #12
    4d14:	beq	4ec0 <coda_cursor_read_uint32_array+0x1bc>
    4d18:	ldr	r3, [r5, #4]
    4d1c:	cmp	r3, #0
    4d20:	ble	4ec0 <coda_cursor_read_uint32_array+0x1bc>
    4d24:	add	r3, r5, r3, lsl #4
    4d28:	ldr	r3, [r3, #-8]
    4d2c:	cmp	r3, #0
    4d30:	beq	4ec0 <coda_cursor_read_uint32_array+0x1bc>
    4d34:	cmp	r1, #0
    4d38:	mov	r4, r1
    4d3c:	beq	4f04 <coda_cursor_read_uint32_array+0x200>
    4d40:	ldr	r1, [r3]
    4d44:	cmp	r1, #99	; 0x63
    4d48:	ldrhi	r3, [r3, #4]
    4d4c:	ldr	r0, [r3, #8]
    4d50:	cmp	r0, #1
    4d54:	bne	4ee4 <coda_cursor_read_uint32_array+0x1e0>
    4d58:	ldr	r1, [r3, #40]	; 0x28
    4d5c:	ldr	r3, [r1, #8]
    4d60:	sub	r3, r3, #2
    4d64:	cmp	r3, #1
    4d68:	bls	4db4 <coda_cursor_read_uint32_array+0xb0>
    4d6c:	ldr	r0, [r1, #12]
    4d70:	cmp	r0, #3
    4d74:	beq	4e68 <coda_cursor_read_uint32_array+0x164>
    4d78:	cmp	r0, #5
    4d7c:	beq	4e40 <coda_cursor_read_uint32_array+0x13c>
    4d80:	cmp	r0, #1
    4d84:	beq	4de0 <coda_cursor_read_uint32_array+0xdc>
    4d88:	bl	0 <coda_type_get_native_type_name>
    4d8c:	mov	r2, r0
    4d90:	movw	r1, #0
    4d94:	movt	r1, #0
    4d98:	mvn	r0, #104	; 0x68
    4d9c:	bl	0 <coda_set_error>
    4da0:	mvn	r0, #0
    4da4:	add	sp, sp, #12
    4da8:	ldrd	r4, [sp]
    4dac:	add	sp, sp, #8
    4db0:	pop	{pc}		; (ldr pc, [sp], #4)
    4db4:	ldr	r3, [pc, #364]	; 4f28 <coda_cursor_read_uint32_array+0x224>
    4db8:	mrc	15, 0, r0, cr13, cr0, {3}
    4dbc:	ldr	r3, [pc, r3]
    4dc0:	ldr	r3, [r0, r3]
    4dc4:	cmp	r3, #0
    4dc8:	beq	4d6c <coda_cursor_read_uint32_array+0x68>
    4dcc:	ldr	r3, [r1, #48]	; 0x30
    4dd0:	cmp	r3, #0
    4dd4:	movne	r0, #9
    4dd8:	bne	4d88 <coda_cursor_read_uint32_array+0x84>
    4ddc:	b	4d6c <coda_cursor_read_uint32_array+0x68>
    4de0:	mov	r1, r4
    4de4:	mov	r0, r5
    4de8:	bl	d08 <read_uint8_array>
    4dec:	cmp	r0, #0
    4df0:	bne	4da0 <coda_cursor_read_uint32_array+0x9c>
    4df4:	mov	r0, r5
    4df8:	add	r1, sp, #4
    4dfc:	bl	0 <coda_cursor_get_num_elements>
    4e00:	cmp	r0, #0
    4e04:	bne	4da0 <coda_cursor_read_uint32_array+0x9c>
    4e08:	ldr	r3, [sp, #4]
    4e0c:	cmp	r3, #0
    4e10:	addgt	r2, r4, r3, lsl #2
    4e14:	addgt	r3, r4, r3
    4e18:	ble	4e2c <coda_cursor_read_uint32_array+0x128>
    4e1c:	ldrb	r1, [r3, #-1]!
    4e20:	cmp	r4, r3
    4e24:	str	r1, [r2, #-4]!
    4e28:	bne	4e1c <coda_cursor_read_uint32_array+0x118>
    4e2c:	mov	r0, #0
    4e30:	add	sp, sp, #12
    4e34:	ldrd	r4, [sp]
    4e38:	add	sp, sp, #8
    4e3c:	pop	{pc}		; (ldr pc, [sp], #4)
    4e40:	mov	r1, r4
    4e44:	mov	r0, r5
    4e48:	bl	1240 <read_uint32_array>
    4e4c:	adds	r0, r0, #0
    4e50:	movne	r0, #1
    4e54:	rsb	r0, r0, #0
    4e58:	add	sp, sp, #12
    4e5c:	ldrd	r4, [sp]
    4e60:	add	sp, sp, #8
    4e64:	pop	{pc}		; (ldr pc, [sp], #4)
    4e68:	mov	r1, r4
    4e6c:	mov	r0, r5
    4e70:	bl	fa4 <read_uint16_array>
    4e74:	cmp	r0, #0
    4e78:	bne	4da0 <coda_cursor_read_uint32_array+0x9c>
    4e7c:	mov	r0, r5
    4e80:	add	r1, sp, #4
    4e84:	bl	0 <coda_cursor_get_num_elements>
    4e88:	cmp	r0, #0
    4e8c:	bne	4da0 <coda_cursor_read_uint32_array+0x9c>
    4e90:	ldr	r2, [sp, #4]
    4e94:	cmp	r2, #0
    4e98:	ble	4e2c <coda_cursor_read_uint32_array+0x128>
    4e9c:	lsl	r2, r2, #1
    4ea0:	add	r3, r4, r2
    4ea4:	add	r2, r3, r2
    4ea8:	ldrh	r1, [r3, #-2]!
    4eac:	cmp	r3, r4
    4eb0:	str	r1, [r2, #-4]!
    4eb4:	bne	4ea8 <coda_cursor_read_uint32_array+0x1a4>
    4eb8:	mov	r0, #0
    4ebc:	b	4e30 <coda_cursor_read_uint32_array+0x12c>
    4ec0:	mvn	r0, #99	; 0x63
    4ec4:	movw	r2, #0
    4ec8:	movt	r2, #0
    4ecc:	movw	r1, #0
    4ed0:	movt	r1, #0
    4ed4:	movw	r3, #3318	; 0xcf6
    4ed8:	bl	0 <coda_set_error>
    4edc:	mvn	r0, #0
    4ee0:	b	4da4 <coda_cursor_read_uint32_array+0xa0>
    4ee4:	bl	0 <coda_type_get_class_name>
    4ee8:	mov	r2, r0
    4eec:	movw	r1, #0
    4ef0:	movt	r1, #0
    4ef4:	mvn	r0, #104	; 0x68
    4ef8:	bl	0 <coda_set_error>
    4efc:	mvn	r0, #0
    4f00:	b	4da4 <coda_cursor_read_uint32_array+0xa0>
    4f04:	mvn	r0, #99	; 0x63
    4f08:	movw	r2, #0
    4f0c:	movt	r2, #0
    4f10:	movw	r1, #0
    4f14:	movt	r1, #0
    4f18:	movw	r3, #3323	; 0xcfb
    4f1c:	bl	0 <coda_set_error>
    4f20:	mvn	r0, #0
    4f24:	b	4da4 <coda_cursor_read_uint32_array+0xa0>
    4f28:	.word	0x00000164

00004f2c <coda_cursor_read_int64_array>:
    4f2c:	strd	r4, [sp, #-12]!
    4f30:	subs	r5, r0, #0
    4f34:	str	lr, [sp, #8]
    4f38:	sub	sp, sp, #12
    4f3c:	beq	524c <coda_cursor_read_int64_array+0x320>
    4f40:	ldr	r3, [r5, #4]
    4f44:	cmp	r3, #0
    4f48:	ble	524c <coda_cursor_read_int64_array+0x320>
    4f4c:	add	r3, r5, r3, lsl #4
    4f50:	ldr	r3, [r3, #-8]
    4f54:	cmp	r3, #0
    4f58:	beq	524c <coda_cursor_read_int64_array+0x320>
    4f5c:	cmp	r1, #0
    4f60:	mov	r4, r1
    4f64:	beq	5290 <coda_cursor_read_int64_array+0x364>
    4f68:	ldr	r1, [r3]
    4f6c:	cmp	r1, #99	; 0x63
    4f70:	ldrhi	r3, [r3, #4]
    4f74:	ldr	r0, [r3, #8]
    4f78:	cmp	r0, #1
    4f7c:	bne	5270 <coda_cursor_read_int64_array+0x344>
    4f80:	ldr	r1, [r3, #40]	; 0x28
    4f84:	ldr	r3, [r1, #8]
    4f88:	sub	r3, r3, #2
    4f8c:	cmp	r3, #1
    4f90:	bls	4fc0 <coda_cursor_read_int64_array+0x94>
    4f94:	ldr	r0, [r1, #12]
    4f98:	cmp	r0, #6
    4f9c:	ldrls	pc, [pc, r0, lsl #2]
    4fa0:	b	4fe8 <coda_cursor_read_int64_array+0xbc>
    4fa4:	.word	0x00005014
    4fa8:	.word	0x00005078
    4fac:	.word	0x000050cc
    4fb0:	.word	0x00005120
    4fb4:	.word	0x00005174
    4fb8:	.word	0x000051cc
    4fbc:	.word	0x00005224
    4fc0:	ldr	r3, [pc, #748]	; 52b4 <coda_cursor_read_int64_array+0x388>
    4fc4:	mrc	15, 0, r0, cr13, cr0, {3}
    4fc8:	ldr	r3, [pc, r3]
    4fcc:	ldr	r3, [r0, r3]
    4fd0:	cmp	r3, #0
    4fd4:	beq	4f94 <coda_cursor_read_int64_array+0x68>
    4fd8:	ldr	r3, [r1, #48]	; 0x30
    4fdc:	cmp	r3, #0
    4fe0:	movne	r0, #9
    4fe4:	beq	4f94 <coda_cursor_read_int64_array+0x68>
    4fe8:	bl	0 <coda_type_get_native_type_name>
    4fec:	mov	r2, r0
    4ff0:	movw	r1, #0
    4ff4:	movt	r1, #0
    4ff8:	mvn	r0, #104	; 0x68
    4ffc:	bl	0 <coda_set_error>
    5000:	mvn	r0, #0
    5004:	add	sp, sp, #12
    5008:	ldrd	r4, [sp]
    500c:	add	sp, sp, #8
    5010:	pop	{pc}		; (ldr pc, [sp], #4)
    5014:	mov	r1, r4
    5018:	mov	r0, r5
    501c:	bl	ba8 <read_int8_array>
    5020:	cmp	r0, #0
    5024:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    5028:	mov	r0, r5
    502c:	add	r1, sp, #4
    5030:	bl	0 <coda_cursor_get_num_elements>
    5034:	cmp	r0, #0
    5038:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    503c:	ldr	r3, [sp, #4]
    5040:	cmp	r3, #0
    5044:	addgt	r2, r4, r3, lsl #3
    5048:	addgt	r3, r4, r3
    504c:	ble	5064 <coda_cursor_read_int64_array+0x138>
    5050:	ldrsb	r0, [r3, #-1]!
    5054:	asr	r1, r0, #31
    5058:	cmp	r4, r3
    505c:	strd	r0, [r2, #-8]!
    5060:	bne	5050 <coda_cursor_read_int64_array+0x124>
    5064:	mov	r0, #0
    5068:	add	sp, sp, #12
    506c:	ldrd	r4, [sp]
    5070:	add	sp, sp, #8
    5074:	pop	{pc}		; (ldr pc, [sp], #4)
    5078:	mov	r1, r4
    507c:	mov	r0, r5
    5080:	bl	d08 <read_uint8_array>
    5084:	cmp	r0, #0
    5088:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    508c:	mov	r0, r5
    5090:	add	r1, sp, #4
    5094:	bl	0 <coda_cursor_get_num_elements>
    5098:	cmp	r0, #0
    509c:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    50a0:	ldr	r3, [sp, #4]
    50a4:	cmp	r3, #0
    50a8:	ble	5064 <coda_cursor_read_int64_array+0x138>
    50ac:	add	r2, r4, r3, lsl #3
    50b0:	add	r3, r4, r3
    50b4:	ldrb	r0, [r3, #-1]!
    50b8:	mov	r1, #0
    50bc:	cmp	r4, r3
    50c0:	strd	r0, [r2, #-8]!
    50c4:	bne	50b4 <coda_cursor_read_int64_array+0x188>
    50c8:	b	5064 <coda_cursor_read_int64_array+0x138>
    50cc:	mov	r1, r4
    50d0:	mov	r0, r5
    50d4:	bl	e44 <read_int16_array>
    50d8:	cmp	r0, #0
    50dc:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    50e0:	mov	r0, r5
    50e4:	add	r1, sp, #4
    50e8:	bl	0 <coda_cursor_get_num_elements>
    50ec:	cmp	r0, #0
    50f0:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    50f4:	ldr	r2, [sp, #4]
    50f8:	cmp	r2, #0
    50fc:	ble	5064 <coda_cursor_read_int64_array+0x138>
    5100:	add	r3, r4, r2, lsl #1
    5104:	add	r2, r4, r2, lsl #3
    5108:	ldrsh	r0, [r3, #-2]!
    510c:	asr	r1, r0, #31
    5110:	cmp	r4, r3
    5114:	strd	r0, [r2, #-8]!
    5118:	bne	5108 <coda_cursor_read_int64_array+0x1dc>
    511c:	b	5064 <coda_cursor_read_int64_array+0x138>
    5120:	mov	r1, r4
    5124:	mov	r0, r5
    5128:	bl	fa4 <read_uint16_array>
    512c:	cmp	r0, #0
    5130:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    5134:	mov	r0, r5
    5138:	add	r1, sp, #4
    513c:	bl	0 <coda_cursor_get_num_elements>
    5140:	cmp	r0, #0
    5144:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    5148:	ldr	r2, [sp, #4]
    514c:	cmp	r2, #0
    5150:	ble	5064 <coda_cursor_read_int64_array+0x138>
    5154:	add	r3, r4, r2, lsl #1
    5158:	add	r2, r4, r2, lsl #3
    515c:	ldrh	r0, [r3, #-2]!
    5160:	mov	r1, #0
    5164:	cmp	r3, r4
    5168:	strd	r0, [r2, #-8]!
    516c:	bne	515c <coda_cursor_read_int64_array+0x230>
    5170:	b	5064 <coda_cursor_read_int64_array+0x138>
    5174:	mov	r1, r4
    5178:	mov	r0, r5
    517c:	bl	10e0 <read_int32_array>
    5180:	cmp	r0, #0
    5184:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    5188:	mov	r0, r5
    518c:	add	r1, sp, #4
    5190:	bl	0 <coda_cursor_get_num_elements>
    5194:	cmp	r0, #0
    5198:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    519c:	ldr	r0, [sp, #4]
    51a0:	cmp	r0, #0
    51a4:	ble	5064 <coda_cursor_read_int64_array+0x138>
    51a8:	lsl	r0, r0, #2
    51ac:	add	r1, r4, r0
    51b0:	add	r0, r1, r0
    51b4:	ldr	r2, [r1, #-4]!
    51b8:	asr	r3, r2, #31
    51bc:	cmp	r1, r4
    51c0:	strd	r2, [r0, #-8]!
    51c4:	bne	51b4 <coda_cursor_read_int64_array+0x288>
    51c8:	b	5064 <coda_cursor_read_int64_array+0x138>
    51cc:	mov	r1, r4
    51d0:	mov	r0, r5
    51d4:	bl	1240 <read_uint32_array>
    51d8:	cmp	r0, #0
    51dc:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    51e0:	mov	r0, r5
    51e4:	add	r1, sp, #4
    51e8:	bl	0 <coda_cursor_get_num_elements>
    51ec:	cmp	r0, #0
    51f0:	bne	5000 <coda_cursor_read_int64_array+0xd4>
    51f4:	ldr	r3, [sp, #4]
    51f8:	cmp	r3, #0
    51fc:	ble	5064 <coda_cursor_read_int64_array+0x138>
    5200:	lsl	r3, r3, #2
    5204:	add	r2, r4, r3
    5208:	add	r3, r2, r3
    520c:	ldr	r1, [r2, #-4]!
    5210:	cmp	r2, r4
    5214:	str	r1, [r3, #-8]!
    5218:	str	r0, [r3, #4]
    521c:	bne	520c <coda_cursor_read_int64_array+0x2e0>
    5220:	b	5064 <coda_cursor_read_int64_array+0x138>
    5224:	mov	r1, r4
    5228:	mov	r0, r5
    522c:	bl	137c <read_int64_array>
    5230:	adds	r0, r0, #0
    5234:	movne	r0, #1
    5238:	rsb	r0, r0, #0
    523c:	add	sp, sp, #12
    5240:	ldrd	r4, [sp]
    5244:	add	sp, sp, #8
    5248:	pop	{pc}		; (ldr pc, [sp], #4)
    524c:	mvn	r0, #99	; 0x63
    5250:	movw	r2, #0
    5254:	movt	r2, #0
    5258:	movw	r1, #0
    525c:	movt	r1, #0
    5260:	movw	r3, #3413	; 0xd55
    5264:	bl	0 <coda_set_error>
    5268:	mvn	r0, #0
    526c:	b	5004 <coda_cursor_read_int64_array+0xd8>
    5270:	bl	0 <coda_type_get_class_name>
    5274:	mov	r2, r0
    5278:	movw	r1, #0
    527c:	movt	r1, #0
    5280:	mvn	r0, #104	; 0x68
    5284:	bl	0 <coda_set_error>
    5288:	mvn	r0, #0
    528c:	b	5004 <coda_cursor_read_int64_array+0xd8>
    5290:	mvn	r0, #99	; 0x63
    5294:	movw	r2, #0
    5298:	movt	r2, #0
    529c:	movw	r1, #0
    52a0:	movt	r1, #0
    52a4:	movw	r3, #3418	; 0xd5a
    52a8:	bl	0 <coda_set_error>
    52ac:	mvn	r0, #0
    52b0:	b	5004 <coda_cursor_read_int64_array+0xd8>
    52b4:	.word	0x000002e4

000052b8 <coda_cursor_read_uint64_array>:
    52b8:	strd	r4, [sp, #-12]!
    52bc:	subs	r5, r0, #0
    52c0:	str	lr, [sp, #8]
    52c4:	sub	sp, sp, #12
    52c8:	beq	54e4 <coda_cursor_read_uint64_array+0x22c>
    52cc:	ldr	r3, [r5, #4]
    52d0:	cmp	r3, #0
    52d4:	ble	54e4 <coda_cursor_read_uint64_array+0x22c>
    52d8:	add	r3, r5, r3, lsl #4
    52dc:	ldr	r3, [r3, #-8]
    52e0:	cmp	r3, #0
    52e4:	beq	54e4 <coda_cursor_read_uint64_array+0x22c>
    52e8:	cmp	r1, #0
    52ec:	mov	r4, r1
    52f0:	beq	5528 <coda_cursor_read_uint64_array+0x270>
    52f4:	ldr	r1, [r3]
    52f8:	cmp	r1, #99	; 0x63
    52fc:	ldrhi	r3, [r3, #4]
    5300:	ldr	r0, [r3, #8]
    5304:	cmp	r0, #1
    5308:	bne	5508 <coda_cursor_read_uint64_array+0x250>
    530c:	ldr	r1, [r3, #40]	; 0x28
    5310:	ldr	r3, [r1, #8]
    5314:	sub	r3, r3, #2
    5318:	cmp	r3, #1
    531c:	bls	5350 <coda_cursor_read_uint64_array+0x98>
    5320:	ldr	r0, [r1, #12]
    5324:	sub	r3, r0, #1
    5328:	cmp	r3, #6
    532c:	ldrls	pc, [pc, r3, lsl #2]
    5330:	b	5378 <coda_cursor_read_uint64_array+0xc0>
    5334:	.word	0x000053a4
    5338:	.word	0x00005378
    533c:	.word	0x00005408
    5340:	.word	0x00005378
    5344:	.word	0x00005460
    5348:	.word	0x00005378
    534c:	.word	0x000054bc
    5350:	ldr	r3, [pc, #500]	; 554c <coda_cursor_read_uint64_array+0x294>
    5354:	mrc	15, 0, r0, cr13, cr0, {3}
    5358:	ldr	r3, [pc, r3]
    535c:	ldr	r3, [r0, r3]
    5360:	cmp	r3, #0
    5364:	beq	5320 <coda_cursor_read_uint64_array+0x68>
    5368:	ldr	r3, [r1, #48]	; 0x30
    536c:	cmp	r3, #0
    5370:	movne	r0, #9
    5374:	beq	5320 <coda_cursor_read_uint64_array+0x68>
    5378:	bl	0 <coda_type_get_native_type_name>
    537c:	mov	r2, r0
    5380:	movw	r1, #0
    5384:	movt	r1, #0
    5388:	mvn	r0, #104	; 0x68
    538c:	bl	0 <coda_set_error>
    5390:	mvn	r0, #0
    5394:	add	sp, sp, #12
    5398:	ldrd	r4, [sp]
    539c:	add	sp, sp, #8
    53a0:	pop	{pc}		; (ldr pc, [sp], #4)
    53a4:	mov	r1, r4
    53a8:	mov	r0, r5
    53ac:	bl	d08 <read_uint8_array>
    53b0:	cmp	r0, #0
    53b4:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    53b8:	mov	r0, r5
    53bc:	add	r1, sp, #4
    53c0:	bl	0 <coda_cursor_get_num_elements>
    53c4:	cmp	r0, #0
    53c8:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    53cc:	ldr	r3, [sp, #4]
    53d0:	cmp	r3, #0
    53d4:	addgt	r2, r4, r3, lsl #3
    53d8:	addgt	r3, r4, r3
    53dc:	ble	53f4 <coda_cursor_read_uint64_array+0x13c>
    53e0:	ldrb	r0, [r3, #-1]!
    53e4:	mov	r1, #0
    53e8:	cmp	r4, r3
    53ec:	strd	r0, [r2, #-8]!
    53f0:	bne	53e0 <coda_cursor_read_uint64_array+0x128>
    53f4:	mov	r0, #0
    53f8:	add	sp, sp, #12
    53fc:	ldrd	r4, [sp]
    5400:	add	sp, sp, #8
    5404:	pop	{pc}		; (ldr pc, [sp], #4)
    5408:	mov	r1, r4
    540c:	mov	r0, r5
    5410:	bl	fa4 <read_uint16_array>
    5414:	cmp	r0, #0
    5418:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    541c:	mov	r0, r5
    5420:	add	r1, sp, #4
    5424:	bl	0 <coda_cursor_get_num_elements>
    5428:	cmp	r0, #0
    542c:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    5430:	ldr	r2, [sp, #4]
    5434:	cmp	r2, #0
    5438:	ble	53f4 <coda_cursor_read_uint64_array+0x13c>
    543c:	add	r3, r4, r2, lsl #1
    5440:	add	r2, r4, r2, lsl #3
    5444:	ldrh	r0, [r3, #-2]!
    5448:	mov	r1, #0
    544c:	cmp	r3, r4
    5450:	strd	r0, [r2, #-8]!
    5454:	bne	5444 <coda_cursor_read_uint64_array+0x18c>
    5458:	mov	r0, #0
    545c:	b	53f8 <coda_cursor_read_uint64_array+0x140>
    5460:	mov	r1, r4
    5464:	mov	r0, r5
    5468:	bl	1240 <read_uint32_array>
    546c:	cmp	r0, #0
    5470:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    5474:	mov	r0, r5
    5478:	add	r1, sp, #4
    547c:	bl	0 <coda_cursor_get_num_elements>
    5480:	cmp	r0, #0
    5484:	bne	5390 <coda_cursor_read_uint64_array+0xd8>
    5488:	ldr	r3, [sp, #4]
    548c:	cmp	r3, #0
    5490:	ble	53f4 <coda_cursor_read_uint64_array+0x13c>
    5494:	lsl	r3, r3, #2
    5498:	add	r2, r4, r3
    549c:	add	r3, r2, r3
    54a0:	ldr	r1, [r2, #-4]!
    54a4:	cmp	r2, r4
    54a8:	str	r1, [r3, #-8]!
    54ac:	str	r0, [r3, #4]
    54b0:	bne	54a0 <coda_cursor_read_uint64_array+0x1e8>
    54b4:	mov	r0, #0
    54b8:	b	53f8 <coda_cursor_read_uint64_array+0x140>
    54bc:	mov	r1, r4
    54c0:	mov	r0, r5
    54c4:	bl	14b8 <read_uint64_array>
    54c8:	adds	r0, r0, #0
    54cc:	movne	r0, #1
    54d0:	rsb	r0, r0, #0
    54d4:	add	sp, sp, #12
    54d8:	ldrd	r4, [sp]
    54dc:	add	sp, sp, #8
    54e0:	pop	{pc}		; (ldr pc, [sp], #4)
    54e4:	mvn	r0, #99	; 0x63
    54e8:	movw	r2, #0
    54ec:	movt	r2, #0
    54f0:	movw	r1, #0
    54f4:	movt	r1, #0
    54f8:	movw	r3, #3561	; 0xde9
    54fc:	bl	0 <coda_set_error>
    5500:	mvn	r0, #0
    5504:	b	5394 <coda_cursor_read_uint64_array+0xdc>
    5508:	bl	0 <coda_type_get_class_name>
    550c:	mov	r2, r0
    5510:	movw	r1, #0
    5514:	movt	r1, #0
    5518:	mvn	r0, #104	; 0x68
    551c:	bl	0 <coda_set_error>
    5520:	mvn	r0, #0
    5524:	b	5394 <coda_cursor_read_uint64_array+0xdc>
    5528:	mvn	r0, #99	; 0x63
    552c:	movw	r2, #0
    5530:	movt	r2, #0
    5534:	movw	r1, #0
    5538:	movt	r1, #0
    553c:	movw	r3, #3566	; 0xdee
    5540:	bl	0 <coda_set_error>
    5544:	mvn	r0, #0
    5548:	b	5394 <coda_cursor_read_uint64_array+0xdc>
    554c:	.word	0x000001ec

00005550 <coda_cursor_read_double_array>:
    5550:	strd	r4, [sp, #-20]!	; 0xffffffec
    5554:	strd	r6, [sp, #8]
    5558:	subs	r6, r0, #0
    555c:	str	lr, [sp, #16]
    5560:	sub	sp, sp, #12
    5564:	beq	59cc <coda_cursor_read_double_array+0x47c>
    5568:	ldr	r3, [r6, #4]
    556c:	cmp	r3, #0
    5570:	ble	59cc <coda_cursor_read_double_array+0x47c>
    5574:	add	r3, r6, r3, lsl #4
    5578:	ldr	r3, [r3, #-8]
    557c:	cmp	r3, #0
    5580:	beq	59cc <coda_cursor_read_double_array+0x47c>
    5584:	cmp	r1, #0
    5588:	mov	r4, r1
    558c:	beq	5a10 <coda_cursor_read_double_array+0x4c0>
    5590:	ldr	r1, [r3]
    5594:	cmp	r1, #99	; 0x63
    5598:	ldrhi	r3, [r3, #4]
    559c:	ldr	r0, [r3, #8]
    55a0:	cmp	r0, #1
    55a4:	bne	59f0 <coda_cursor_read_double_array+0x4a0>
    55a8:	ldr	r1, [r3, #40]	; 0x28
    55ac:	ldr	r3, [r1, #8]
    55b0:	ldr	r0, [r1, #12]
    55b4:	sub	r3, r3, #2
    55b8:	cmp	r3, #1
    55bc:	movhi	r5, #0
    55c0:	bhi	55dc <coda_cursor_read_double_array+0x8c>
    55c4:	ldr	r3, [pc, #1160]	; 5a54 <coda_cursor_read_double_array+0x504>
    55c8:	mrc	15, 0, ip, cr13, cr0, {3}
    55cc:	ldr	r3, [pc, r3]
    55d0:	ldr	r5, [ip, r3]
    55d4:	cmp	r5, #0
    55d8:	ldrne	r5, [r1, #48]	; 0x30
    55dc:	cmp	r0, #9
    55e0:	ldrls	pc, [pc, r0, lsl #2]
    55e4:	b	5a34 <coda_cursor_read_double_array+0x4e4>
    55e8:	.word	0x000056bc
    55ec:	.word	0x00005714
    55f0:	.word	0x0000576c
    55f4:	.word	0x000057c4
    55f8:	.word	0x0000581c
    55fc:	.word	0x00005874
    5600:	.word	0x000058cc
    5604:	.word	0x0000591c
    5608:	.word	0x0000596c
    560c:	.word	0x00005610
    5610:	mov	r1, r4
    5614:	mov	r0, r6
    5618:	bl	195c <read_double_array>
    561c:	cmp	r0, #0
    5620:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5624:	cmp	r5, #0
    5628:	beq	56a4 <coda_cursor_read_double_array+0x154>
    562c:	mov	r0, r6
    5630:	add	r1, sp, #4
    5634:	bl	0 <coda_cursor_get_num_elements>
    5638:	subs	r6, r0, #0
    563c:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5640:	ldr	r3, [sp, #4]
    5644:	cmp	r3, #0
    5648:	bgt	5678 <coda_cursor_read_double_array+0x128>
    564c:	b	56a4 <coda_cursor_read_double_array+0x154>
    5650:	vldr	d6, [r5]
    5654:	add	r6, r6, #1
    5658:	cmp	r3, r6
    565c:	vldr	d4, [r5, #8]
    5660:	vldr	d5, [r5, #16]
    5664:	vmul.f64	d7, d7, d6
    5668:	vdiv.f64	d6, d7, d4
    566c:	vadd.f64	d6, d6, d5
    5670:	vstr	d6, [r4, #-8]
    5674:	ble	56a4 <coda_cursor_read_double_array+0x154>
    5678:	vldmia	r4!, {d7}
    567c:	vldr	d6, [r5, #24]
    5680:	vcmp.f64	d7, d6
    5684:	vmrs	APSR_nzcv, fpscr
    5688:	bne	5650 <coda_cursor_read_double_array+0x100>
    568c:	bl	0 <coda_NaN>
    5690:	ldr	r3, [sp, #4]
    5694:	add	r6, r6, #1
    5698:	vstr	d0, [r4, #-8]
    569c:	cmp	r3, r6
    56a0:	bgt	5678 <coda_cursor_read_double_array+0x128>
    56a4:	mov	r0, #0
    56a8:	add	sp, sp, #12
    56ac:	ldrd	r4, [sp]
    56b0:	ldrd	r6, [sp, #8]
    56b4:	add	sp, sp, #16
    56b8:	pop	{pc}		; (ldr pc, [sp], #4)
    56bc:	mov	r1, r4
    56c0:	mov	r0, r6
    56c4:	bl	ba8 <read_int8_array>
    56c8:	cmp	r0, #0
    56cc:	bne	59c4 <coda_cursor_read_double_array+0x474>
    56d0:	add	r1, sp, #4
    56d4:	mov	r0, r6
    56d8:	bl	0 <coda_cursor_get_num_elements>
    56dc:	cmp	r0, #0
    56e0:	bne	59c4 <coda_cursor_read_double_array+0x474>
    56e4:	ldr	r3, [sp, #4]
    56e8:	cmp	r3, #0
    56ec:	ble	5624 <coda_cursor_read_double_array+0xd4>
    56f0:	add	r2, r4, r3, lsl #3
    56f4:	add	r3, r4, r3
    56f8:	ldrsb	r1, [r3, #-1]!
    56fc:	vmov	s14, r1
    5700:	cmp	r4, r3
    5704:	vcvt.f64.s32	d7, s14
    5708:	vstmdb	r2!, {d7}
    570c:	bne	56f8 <coda_cursor_read_double_array+0x1a8>
    5710:	b	5624 <coda_cursor_read_double_array+0xd4>
    5714:	mov	r1, r4
    5718:	mov	r0, r6
    571c:	bl	d08 <read_uint8_array>
    5720:	cmp	r0, #0
    5724:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5728:	add	r1, sp, #4
    572c:	mov	r0, r6
    5730:	bl	0 <coda_cursor_get_num_elements>
    5734:	cmp	r0, #0
    5738:	bne	59c4 <coda_cursor_read_double_array+0x474>
    573c:	ldr	r3, [sp, #4]
    5740:	cmp	r3, #0
    5744:	ble	5624 <coda_cursor_read_double_array+0xd4>
    5748:	add	r2, r4, r3, lsl #3
    574c:	add	r3, r4, r3
    5750:	ldrb	r1, [r3, #-1]!
    5754:	vmov	s14, r1
    5758:	cmp	r4, r3
    575c:	vcvt.f64.u32	d7, s14
    5760:	vstmdb	r2!, {d7}
    5764:	bne	5750 <coda_cursor_read_double_array+0x200>
    5768:	b	5624 <coda_cursor_read_double_array+0xd4>
    576c:	mov	r1, r4
    5770:	mov	r0, r6
    5774:	bl	e44 <read_int16_array>
    5778:	cmp	r0, #0
    577c:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5780:	add	r1, sp, #4
    5784:	mov	r0, r6
    5788:	bl	0 <coda_cursor_get_num_elements>
    578c:	cmp	r0, #0
    5790:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5794:	ldr	r2, [sp, #4]
    5798:	cmp	r2, #0
    579c:	ble	5624 <coda_cursor_read_double_array+0xd4>
    57a0:	add	r3, r4, r2, lsl #1
    57a4:	add	r2, r4, r2, lsl #3
    57a8:	ldrsh	r1, [r3, #-2]!
    57ac:	vmov	s14, r1
    57b0:	cmp	r4, r3
    57b4:	vcvt.f64.s32	d7, s14
    57b8:	vstmdb	r2!, {d7}
    57bc:	bne	57a8 <coda_cursor_read_double_array+0x258>
    57c0:	b	5624 <coda_cursor_read_double_array+0xd4>
    57c4:	mov	r1, r4
    57c8:	mov	r0, r6
    57cc:	bl	fa4 <read_uint16_array>
    57d0:	cmp	r0, #0
    57d4:	bne	59c4 <coda_cursor_read_double_array+0x474>
    57d8:	add	r1, sp, #4
    57dc:	mov	r0, r6
    57e0:	bl	0 <coda_cursor_get_num_elements>
    57e4:	cmp	r0, #0
    57e8:	bne	59c4 <coda_cursor_read_double_array+0x474>
    57ec:	ldr	r2, [sp, #4]
    57f0:	cmp	r2, #0
    57f4:	ble	5624 <coda_cursor_read_double_array+0xd4>
    57f8:	add	r3, r4, r2, lsl #1
    57fc:	add	r2, r4, r2, lsl #3
    5800:	ldrh	r1, [r3, #-2]!
    5804:	vmov	s14, r1
    5808:	cmp	r4, r3
    580c:	vcvt.f64.u32	d7, s14
    5810:	vstmdb	r2!, {d7}
    5814:	bne	5800 <coda_cursor_read_double_array+0x2b0>
    5818:	b	5624 <coda_cursor_read_double_array+0xd4>
    581c:	mov	r1, r4
    5820:	mov	r0, r6
    5824:	bl	10e0 <read_int32_array>
    5828:	cmp	r0, #0
    582c:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5830:	add	r1, sp, #4
    5834:	mov	r0, r6
    5838:	bl	0 <coda_cursor_get_num_elements>
    583c:	cmp	r0, #0
    5840:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5844:	ldr	r2, [sp, #4]
    5848:	cmp	r2, #0
    584c:	ble	5624 <coda_cursor_read_double_array+0xd4>
    5850:	lsl	r2, r2, #2
    5854:	add	r3, r4, r2
    5858:	add	r2, r3, r2
    585c:	vldmdb	r3!, {s14}
    5860:	vcvt.f64.s32	d7, s14
    5864:	cmp	r4, r3
    5868:	vstmdb	r2!, {d7}
    586c:	bne	585c <coda_cursor_read_double_array+0x30c>
    5870:	b	5624 <coda_cursor_read_double_array+0xd4>
    5874:	mov	r1, r4
    5878:	mov	r0, r6
    587c:	bl	1240 <read_uint32_array>
    5880:	cmp	r0, #0
    5884:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5888:	add	r1, sp, #4
    588c:	mov	r0, r6
    5890:	bl	0 <coda_cursor_get_num_elements>
    5894:	cmp	r0, #0
    5898:	bne	59c4 <coda_cursor_read_double_array+0x474>
    589c:	ldr	r2, [sp, #4]
    58a0:	cmp	r2, #0
    58a4:	ble	5624 <coda_cursor_read_double_array+0xd4>
    58a8:	lsl	r2, r2, #2
    58ac:	add	r3, r4, r2
    58b0:	add	r2, r3, r2
    58b4:	vldmdb	r3!, {s14}
    58b8:	vcvt.f64.u32	d7, s14
    58bc:	cmp	r3, r4
    58c0:	vstmdb	r2!, {d7}
    58c4:	bne	58b4 <coda_cursor_read_double_array+0x364>
    58c8:	b	5624 <coda_cursor_read_double_array+0xd4>
    58cc:	mov	r1, r4
    58d0:	mov	r0, r6
    58d4:	bl	137c <read_int64_array>
    58d8:	cmp	r0, #0
    58dc:	bne	59c4 <coda_cursor_read_double_array+0x474>
    58e0:	add	r1, sp, #4
    58e4:	mov	r0, r6
    58e8:	bl	0 <coda_cursor_get_num_elements>
    58ec:	cmp	r0, #0
    58f0:	bne	59c4 <coda_cursor_read_double_array+0x474>
    58f4:	ldr	r7, [sp, #4]
    58f8:	cmp	r7, #0
    58fc:	ble	5624 <coda_cursor_read_double_array+0xd4>
    5900:	add	r7, r4, r7, lsl #3
    5904:	ldrd	r0, [r7, #-8]!
    5908:	bl	0 <__aeabi_l2d>
    590c:	cmp	r7, r4
    5910:	strd	r0, [r7]
    5914:	bne	5904 <coda_cursor_read_double_array+0x3b4>
    5918:	b	5624 <coda_cursor_read_double_array+0xd4>
    591c:	mov	r1, r4
    5920:	mov	r0, r6
    5924:	bl	14b8 <read_uint64_array>
    5928:	cmp	r0, #0
    592c:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5930:	add	r1, sp, #4
    5934:	mov	r0, r6
    5938:	bl	0 <coda_cursor_get_num_elements>
    593c:	cmp	r0, #0
    5940:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5944:	ldr	r7, [sp, #4]
    5948:	cmp	r7, #0
    594c:	ble	5624 <coda_cursor_read_double_array+0xd4>
    5950:	add	r7, r4, r7, lsl #3
    5954:	ldrd	r0, [r7, #-8]!
    5958:	bl	0 <__aeabi_ul2d>
    595c:	cmp	r7, r4
    5960:	strd	r0, [r7]
    5964:	bne	5954 <coda_cursor_read_double_array+0x404>
    5968:	b	5624 <coda_cursor_read_double_array+0xd4>
    596c:	mov	r1, r4
    5970:	mov	r0, r6
    5974:	bl	15c0 <read_float_array>
    5978:	cmp	r0, #0
    597c:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5980:	add	r1, sp, #4
    5984:	mov	r0, r6
    5988:	bl	0 <coda_cursor_get_num_elements>
    598c:	cmp	r0, #0
    5990:	bne	59c4 <coda_cursor_read_double_array+0x474>
    5994:	ldr	r2, [sp, #4]
    5998:	cmp	r2, #0
    599c:	ble	5624 <coda_cursor_read_double_array+0xd4>
    59a0:	lsl	r2, r2, #2
    59a4:	add	r3, r4, r2
    59a8:	add	r2, r3, r2
    59ac:	vldmdb	r3!, {s14}
    59b0:	vcvt.f64.f32	d7, s14
    59b4:	cmp	r3, r4
    59b8:	vstmdb	r2!, {d7}
    59bc:	bne	59ac <coda_cursor_read_double_array+0x45c>
    59c0:	b	5624 <coda_cursor_read_double_array+0xd4>
    59c4:	mvn	r0, #0
    59c8:	b	56a8 <coda_cursor_read_double_array+0x158>
    59cc:	mvn	r0, #99	; 0x63
    59d0:	movw	r2, #0
    59d4:	movt	r2, #0
    59d8:	movw	r1, #0
    59dc:	movt	r1, #0
    59e0:	movw	r3, #3937	; 0xf61
    59e4:	bl	0 <coda_set_error>
    59e8:	mvn	r0, #0
    59ec:	b	56a8 <coda_cursor_read_double_array+0x158>
    59f0:	bl	0 <coda_type_get_class_name>
    59f4:	mov	r2, r0
    59f8:	movw	r1, #0
    59fc:	movt	r1, #0
    5a00:	mvn	r0, #104	; 0x68
    5a04:	bl	0 <coda_set_error>
    5a08:	mvn	r0, #0
    5a0c:	b	56a8 <coda_cursor_read_double_array+0x158>
    5a10:	mvn	r0, #99	; 0x63
    5a14:	movw	r2, #0
    5a18:	movt	r2, #0
    5a1c:	movw	r1, #0
    5a20:	movt	r1, #0
    5a24:	movw	r3, #3942	; 0xf66
    5a28:	bl	0 <coda_set_error>
    5a2c:	mvn	r0, #0
    5a30:	b	56a8 <coda_cursor_read_double_array+0x158>
    5a34:	bl	0 <coda_type_get_native_type_name>
    5a38:	mov	r2, r0
    5a3c:	movw	r1, #0
    5a40:	movt	r1, #0
    5a44:	mvn	r0, #104	; 0x68
    5a48:	bl	0 <coda_set_error>
    5a4c:	mvn	r0, #0
    5a50:	b	56a8 <coda_cursor_read_double_array+0x158>
    5a54:	.word	0x00000480

00005a58 <coda_cursor_read_float_array>:
    5a58:	strd	r4, [sp, #-20]!	; 0xffffffec
    5a5c:	subs	r5, r0, #0
    5a60:	strd	r6, [sp, #8]
    5a64:	str	lr, [sp, #16]
    5a68:	sub	sp, sp, #20
    5a6c:	beq	5f54 <coda_cursor_read_float_array+0x4fc>
    5a70:	ldr	r3, [r5, #4]
    5a74:	cmp	r3, #0
    5a78:	ble	5f54 <coda_cursor_read_float_array+0x4fc>
    5a7c:	add	r3, r5, r3, lsl #4
    5a80:	ldr	r3, [r3, #-8]
    5a84:	cmp	r3, #0
    5a88:	beq	5f54 <coda_cursor_read_float_array+0x4fc>
    5a8c:	cmp	r1, #0
    5a90:	mov	r4, r1
    5a94:	beq	5f98 <coda_cursor_read_float_array+0x540>
    5a98:	mov	r6, r2
    5a9c:	ldr	r2, [r3]
    5aa0:	cmp	r2, #99	; 0x63
    5aa4:	ldrhi	r3, [r3, #4]
    5aa8:	ldr	r0, [r3, #8]
    5aac:	cmp	r0, #1
    5ab0:	bne	5f78 <coda_cursor_read_float_array+0x520>
    5ab4:	ldr	r1, [r3, #40]	; 0x28
    5ab8:	ldr	r3, [r1, #8]
    5abc:	ldr	r0, [r1, #12]
    5ac0:	sub	r3, r3, #2
    5ac4:	cmp	r3, #1
    5ac8:	bls	5b00 <coda_cursor_read_float_array+0xa8>
    5acc:	cmp	r0, #9
    5ad0:	ldrls	pc, [pc, r0, lsl #2]
    5ad4:	b	5ffc <coda_cursor_read_float_array+0x5a4>
    5ad8:	.word	0x00005bb4
    5adc:	.word	0x00005c14
    5ae0:	.word	0x00005c70
    5ae4:	.word	0x00005cd0
    5ae8:	.word	0x00005d30
    5aec:	.word	0x00005d84
    5af0:	.word	0x00005dd8
    5af4:	.word	0x00005e44
    5af8:	.word	0x00005eb8
    5afc:	.word	0x00005ed8
    5b00:	ldr	r3, [pc, #1300]	; 601c <coda_cursor_read_float_array+0x5c4>
    5b04:	mrc	15, 0, r2, cr13, cr0, {3}
    5b08:	ldr	r3, [pc, r3]
    5b0c:	ldr	r3, [r2, r3]
    5b10:	cmp	r3, #0
    5b14:	beq	5acc <coda_cursor_read_float_array+0x74>
    5b18:	ldr	r3, [r1, #48]	; 0x30
    5b1c:	cmp	r3, #0
    5b20:	beq	5acc <coda_cursor_read_float_array+0x74>
    5b24:	add	r1, sp, #12
    5b28:	mov	r0, r5
    5b2c:	bl	0 <coda_cursor_get_num_elements>
    5b30:	cmp	r0, #0
    5b34:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5b38:	ldr	r0, [sp, #12]
    5b3c:	lsl	r0, r0, #3
    5b40:	bl	0 <malloc>
    5b44:	subs	r7, r0, #0
    5b48:	movweq	ip, #3707	; 0xe7b
    5b4c:	ldreq	r2, [sp, #12]
    5b50:	beq	5fd4 <coda_cursor_read_float_array+0x57c>
    5b54:	mov	r2, r6
    5b58:	mov	r0, r5
    5b5c:	mov	r1, r7
    5b60:	bl	5550 <coda_cursor_read_double_array>
    5b64:	subs	r6, r0, #0
    5b68:	bne	5fbc <coda_cursor_read_float_array+0x564>
    5b6c:	ldr	r3, [sp, #12]
    5b70:	cmp	r3, #0
    5b74:	ble	5b94 <coda_cursor_read_float_array+0x13c>
    5b78:	add	r4, r4, r3, lsl #2
    5b7c:	add	r3, r7, r3, lsl #3
    5b80:	vldmdb	r3!, {d7}
    5b84:	vcvt.f32.f64	s14, d7
    5b88:	cmp	r7, r3
    5b8c:	vstmdb	r4!, {s14}
    5b90:	bne	5b80 <coda_cursor_read_float_array+0x128>
    5b94:	mov	r0, r7
    5b98:	bl	0 <free>
    5b9c:	mov	r0, r6
    5ba0:	add	sp, sp, #20
    5ba4:	ldrd	r4, [sp]
    5ba8:	ldrd	r6, [sp, #8]
    5bac:	add	sp, sp, #16
    5bb0:	pop	{pc}		; (ldr pc, [sp], #4)
    5bb4:	mov	r2, r6
    5bb8:	mov	r1, r4
    5bbc:	mov	r0, r5
    5bc0:	bl	ba8 <read_int8_array>
    5bc4:	cmp	r0, #0
    5bc8:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5bcc:	mov	r0, r5
    5bd0:	add	r1, sp, #12
    5bd4:	bl	0 <coda_cursor_get_num_elements>
    5bd8:	cmp	r0, #0
    5bdc:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5be0:	ldr	r3, [sp, #12]
    5be4:	cmp	r3, #0
    5be8:	addgt	r2, r4, r3, lsl #2
    5bec:	addgt	r3, r4, r3
    5bf0:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5bf4:	ldrsb	r1, [r3, #-1]!
    5bf8:	vmov	s15, r1
    5bfc:	cmp	r4, r3
    5c00:	vcvt.f32.s32	s15, s15
    5c04:	vstmdb	r2!, {s15}
    5c08:	bne	5bf4 <coda_cursor_read_float_array+0x19c>
    5c0c:	mov	r6, #0
    5c10:	b	5b9c <coda_cursor_read_float_array+0x144>
    5c14:	mov	r2, r6
    5c18:	mov	r1, r4
    5c1c:	mov	r0, r5
    5c20:	bl	d08 <read_uint8_array>
    5c24:	cmp	r0, #0
    5c28:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5c2c:	mov	r0, r5
    5c30:	add	r1, sp, #12
    5c34:	bl	0 <coda_cursor_get_num_elements>
    5c38:	cmp	r0, #0
    5c3c:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5c40:	ldr	r3, [sp, #12]
    5c44:	cmp	r3, #0
    5c48:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5c4c:	add	r2, r4, r3, lsl #2
    5c50:	add	r3, r4, r3
    5c54:	ldrb	r1, [r3, #-1]!
    5c58:	vmov	s15, r1
    5c5c:	cmp	r4, r3
    5c60:	vcvt.f32.u32	s15, s15
    5c64:	vstmdb	r2!, {s15}
    5c68:	bne	5c54 <coda_cursor_read_float_array+0x1fc>
    5c6c:	b	5c0c <coda_cursor_read_float_array+0x1b4>
    5c70:	mov	r2, r6
    5c74:	mov	r1, r4
    5c78:	mov	r0, r5
    5c7c:	bl	e44 <read_int16_array>
    5c80:	cmp	r0, #0
    5c84:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5c88:	mov	r0, r5
    5c8c:	add	r1, sp, #12
    5c90:	bl	0 <coda_cursor_get_num_elements>
    5c94:	cmp	r0, #0
    5c98:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5c9c:	ldr	r2, [sp, #12]
    5ca0:	cmp	r2, #0
    5ca4:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5ca8:	lsl	r2, r2, #1
    5cac:	add	r3, r4, r2
    5cb0:	add	r2, r3, r2
    5cb4:	ldrsh	r1, [r3, #-2]!
    5cb8:	vmov	s15, r1
    5cbc:	cmp	r4, r3
    5cc0:	vcvt.f32.s32	s15, s15
    5cc4:	vstmdb	r2!, {s15}
    5cc8:	bne	5cb4 <coda_cursor_read_float_array+0x25c>
    5ccc:	b	5c0c <coda_cursor_read_float_array+0x1b4>
    5cd0:	mov	r2, r6
    5cd4:	mov	r1, r4
    5cd8:	mov	r0, r5
    5cdc:	bl	fa4 <read_uint16_array>
    5ce0:	cmp	r0, #0
    5ce4:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5ce8:	mov	r0, r5
    5cec:	add	r1, sp, #12
    5cf0:	bl	0 <coda_cursor_get_num_elements>
    5cf4:	cmp	r0, #0
    5cf8:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5cfc:	ldr	r2, [sp, #12]
    5d00:	cmp	r2, #0
    5d04:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5d08:	lsl	r2, r2, #1
    5d0c:	add	r3, r4, r2
    5d10:	add	r2, r3, r2
    5d14:	ldrh	r1, [r3, #-2]!
    5d18:	vmov	s15, r1
    5d1c:	cmp	r4, r3
    5d20:	vcvt.f32.u32	s15, s15
    5d24:	vstmdb	r2!, {s15}
    5d28:	bne	5d14 <coda_cursor_read_float_array+0x2bc>
    5d2c:	b	5c0c <coda_cursor_read_float_array+0x1b4>
    5d30:	mov	r2, r6
    5d34:	mov	r1, r4
    5d38:	mov	r0, r5
    5d3c:	bl	10e0 <read_int32_array>
    5d40:	cmp	r0, #0
    5d44:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5d48:	mov	r0, r5
    5d4c:	add	r1, sp, #12
    5d50:	bl	0 <coda_cursor_get_num_elements>
    5d54:	cmp	r0, #0
    5d58:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5d5c:	ldr	r3, [sp, #12]
    5d60:	cmp	r3, #0
    5d64:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5d68:	add	r3, r4, r3, lsl #2
    5d6c:	vldmdb	r3!, {s15}
    5d70:	vcvt.f32.s32	s15, s15
    5d74:	cmp	r4, r3
    5d78:	vstr	s15, [r3]
    5d7c:	bne	5d6c <coda_cursor_read_float_array+0x314>
    5d80:	b	5c0c <coda_cursor_read_float_array+0x1b4>
    5d84:	mov	r2, r6
    5d88:	mov	r1, r4
    5d8c:	mov	r0, r5
    5d90:	bl	1240 <read_uint32_array>
    5d94:	cmp	r0, #0
    5d98:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5d9c:	mov	r0, r5
    5da0:	add	r1, sp, #12
    5da4:	bl	0 <coda_cursor_get_num_elements>
    5da8:	cmp	r0, #0
    5dac:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5db0:	ldr	r3, [sp, #12]
    5db4:	cmp	r3, #0
    5db8:	ble	5c0c <coda_cursor_read_float_array+0x1b4>
    5dbc:	add	r3, r4, r3, lsl #2
    5dc0:	vldmdb	r3!, {s15}
    5dc4:	vcvt.f32.u32	s15, s15
    5dc8:	cmp	r4, r3
    5dcc:	vstr	s15, [r3]
    5dd0:	bne	5dc0 <coda_cursor_read_float_array+0x368>
    5dd4:	b	5c0c <coda_cursor_read_float_array+0x1b4>
    5dd8:	add	r1, sp, #12
    5ddc:	mov	r0, r5
    5de0:	bl	0 <coda_cursor_get_num_elements>
    5de4:	cmp	r0, #0
    5de8:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5dec:	ldr	r0, [sp, #12]
    5df0:	lsl	r0, r0, #3
    5df4:	bl	0 <malloc>
    5df8:	subs	r7, r0, #0
    5dfc:	beq	5fcc <coda_cursor_read_float_array+0x574>
    5e00:	mov	r2, r6
    5e04:	mov	r0, r5
    5e08:	mov	r1, r7
    5e0c:	bl	137c <read_int64_array>
    5e10:	subs	r6, r0, #0
    5e14:	bne	5fbc <coda_cursor_read_float_array+0x564>
    5e18:	ldr	r5, [sp, #12]
    5e1c:	cmp	r5, #0
    5e20:	ble	5b94 <coda_cursor_read_float_array+0x13c>
    5e24:	add	r4, r4, r5, lsl #2
    5e28:	add	r5, r7, r5, lsl #3
    5e2c:	ldrd	r0, [r5, #-8]!
    5e30:	bl	0 <__aeabi_l2f>
    5e34:	str	r0, [r4, #-4]!
    5e38:	cmp	r5, r7
    5e3c:	bne	5e2c <coda_cursor_read_float_array+0x3d4>
    5e40:	b	5b94 <coda_cursor_read_float_array+0x13c>
    5e44:	add	r1, sp, #12
    5e48:	mov	r0, r5
    5e4c:	bl	0 <coda_cursor_get_num_elements>
    5e50:	cmp	r0, #0
    5e54:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5e58:	ldr	r0, [sp, #12]
    5e5c:	lsl	r0, r0, #3
    5e60:	bl	0 <malloc>
    5e64:	subs	r7, r0, #0
    5e68:	movweq	ip, #3847	; 0xf07
    5e6c:	ldreq	r2, [sp, #12]
    5e70:	beq	5fd4 <coda_cursor_read_float_array+0x57c>
    5e74:	mov	r2, r6
    5e78:	mov	r0, r5
    5e7c:	mov	r1, r7
    5e80:	bl	14b8 <read_uint64_array>
    5e84:	subs	r6, r0, #0
    5e88:	bne	5fbc <coda_cursor_read_float_array+0x564>
    5e8c:	ldr	r5, [sp, #12]
    5e90:	cmp	r5, #0
    5e94:	ble	5b94 <coda_cursor_read_float_array+0x13c>
    5e98:	add	r4, r4, r5, lsl #2
    5e9c:	add	r5, r7, r5, lsl #3
    5ea0:	ldrd	r0, [r5, #-8]!
    5ea4:	bl	0 <__aeabi_ul2f>
    5ea8:	str	r0, [r4, #-4]!
    5eac:	cmp	r5, r7
    5eb0:	bne	5ea0 <coda_cursor_read_float_array+0x448>
    5eb4:	b	5b94 <coda_cursor_read_float_array+0x13c>
    5eb8:	mov	r2, r6
    5ebc:	mov	r1, r4
    5ec0:	mov	r0, r5
    5ec4:	bl	15c0 <read_float_array>
    5ec8:	adds	r0, r0, #0
    5ecc:	movne	r0, #1
    5ed0:	rsb	r6, r0, #0
    5ed4:	b	5b9c <coda_cursor_read_float_array+0x144>
    5ed8:	add	r1, sp, #12
    5edc:	mov	r0, r5
    5ee0:	bl	0 <coda_cursor_get_num_elements>
    5ee4:	cmp	r0, #0
    5ee8:	bne	5f4c <coda_cursor_read_float_array+0x4f4>
    5eec:	ldr	r0, [sp, #12]
    5ef0:	lsl	r0, r0, #3
    5ef4:	bl	0 <malloc>
    5ef8:	subs	r7, r0, #0
    5efc:	movweq	ip, #3880	; 0xf28
    5f00:	ldreq	r2, [sp, #12]
    5f04:	beq	5fd4 <coda_cursor_read_float_array+0x57c>
    5f08:	mov	r2, r6
    5f0c:	mov	r0, r5
    5f10:	mov	r1, r7
    5f14:	bl	195c <read_double_array>
    5f18:	subs	r6, r0, #0
    5f1c:	bne	5fbc <coda_cursor_read_float_array+0x564>
    5f20:	ldr	r3, [sp, #12]
    5f24:	cmp	r3, #0
    5f28:	ble	5b94 <coda_cursor_read_float_array+0x13c>
    5f2c:	add	r4, r4, r3, lsl #2
    5f30:	add	r3, r7, r3, lsl #3
    5f34:	vldmdb	r3!, {d7}
    5f38:	vcvt.f32.f64	s14, d7
    5f3c:	cmp	r3, r7
    5f40:	vstmdb	r4!, {s14}
    5f44:	bne	5f34 <coda_cursor_read_float_array+0x4dc>
    5f48:	b	5b94 <coda_cursor_read_float_array+0x13c>
    5f4c:	mvn	r6, #0
    5f50:	b	5b9c <coda_cursor_read_float_array+0x144>
    5f54:	movw	r2, #0
    5f58:	movt	r2, #0
    5f5c:	movw	r1, #0
    5f60:	movt	r1, #0
    5f64:	movw	r3, #3673	; 0xe59
    5f68:	mvn	r0, #99	; 0x63
    5f6c:	bl	0 <coda_set_error>
    5f70:	mvn	r6, #0
    5f74:	b	5b9c <coda_cursor_read_float_array+0x144>
    5f78:	bl	0 <coda_type_get_class_name>
    5f7c:	mov	r2, r0
    5f80:	movw	r1, #0
    5f84:	movt	r1, #0
    5f88:	mvn	r0, #104	; 0x68
    5f8c:	mvn	r6, #0
    5f90:	bl	0 <coda_set_error>
    5f94:	b	5b9c <coda_cursor_read_float_array+0x144>
    5f98:	movw	r2, #0
    5f9c:	movt	r2, #0
    5fa0:	movw	r1, #0
    5fa4:	movt	r1, #0
    5fa8:	movw	r3, #3678	; 0xe5e
    5fac:	mvn	r0, #99	; 0x63
    5fb0:	bl	0 <coda_set_error>
    5fb4:	mvn	r6, #0
    5fb8:	b	5b9c <coda_cursor_read_float_array+0x144>
    5fbc:	mov	r0, r7
    5fc0:	mvn	r6, #0
    5fc4:	bl	0 <free>
    5fc8:	b	5b9c <coda_cursor_read_float_array+0x144>
    5fcc:	ldr	r2, [sp, #12]
    5fd0:	movw	ip, #3820	; 0xeec
    5fd4:	mvn	r0, #0
    5fd8:	movw	r3, #0
    5fdc:	movt	r3, #0
    5fe0:	movw	r1, #0
    5fe4:	movt	r1, #0
    5fe8:	lsl	r2, r2, #3
    5fec:	str	ip, [sp]
    5ff0:	mov	r6, r0
    5ff4:	bl	0 <coda_set_error>
    5ff8:	b	5b9c <coda_cursor_read_float_array+0x144>
    5ffc:	bl	0 <coda_type_get_native_type_name>
    6000:	mov	r2, r0
    6004:	movw	r1, #0
    6008:	movt	r1, #0
    600c:	mvn	r0, #104	; 0x68
    6010:	mvn	r6, #0
    6014:	bl	0 <coda_set_error>
    6018:	b	5b9c <coda_cursor_read_float_array+0x144>
    601c:	.word	0x0000050c

00006020 <coda_cursor_read_char_array>:
    6020:	strd	r4, [sp, #-12]!
    6024:	subs	r4, r0, #0
    6028:	str	lr, [sp, #8]
    602c:	sub	sp, sp, #12
    6030:	beq	61f4 <coda_cursor_read_char_array+0x1d4>
    6034:	ldr	r3, [r4, #4]
    6038:	cmp	r3, #0
    603c:	ble	61f4 <coda_cursor_read_char_array+0x1d4>
    6040:	add	r3, r4, r3, lsl #4
    6044:	mov	r5, r1
    6048:	ldr	r1, [r3, #-8]
    604c:	cmp	r1, #0
    6050:	beq	61f4 <coda_cursor_read_char_array+0x1d4>
    6054:	cmp	r5, #0
    6058:	beq	6238 <coda_cursor_read_char_array+0x218>
    605c:	ldr	r3, [r1]
    6060:	cmp	r3, #99	; 0x63
    6064:	ldrhi	r1, [r1, #4]
    6068:	ldr	r0, [r1, #8]
    606c:	cmp	r0, #1
    6070:	bne	6218 <coda_cursor_read_char_array+0x1f8>
    6074:	ldr	r0, [r1, #40]	; 0x28
    6078:	ldr	r1, [r0, #8]
    607c:	sub	r1, r1, #2
    6080:	cmp	r1, #1
    6084:	bls	614c <coda_cursor_read_char_array+0x12c>
    6088:	ldr	r0, [r0, #12]
    608c:	cmp	r0, #10
    6090:	bne	6174 <coda_cursor_read_char_array+0x154>
    6094:	cmp	r3, #101	; 0x65
    6098:	beq	61d4 <coda_cursor_read_char_array+0x1b4>
    609c:	bhi	60e0 <coda_cursor_read_char_array+0xc0>
    60a0:	cmp	r3, #1
    60a4:	beq	61c4 <coda_cursor_read_char_array+0x1a4>
    60a8:	cmp	r3, #0
    60ac:	beq	6194 <coda_cursor_read_char_array+0x174>
    60b0:	cmp	r3, #100	; 0x64
    60b4:	bne	612c <coda_cursor_read_char_array+0x10c>
    60b8:	mov	r1, r5
    60bc:	mov	r0, r4
    60c0:	bl	0 <coda_mem_cursor_read_char_array>
    60c4:	adds	r0, r0, #0
    60c8:	movne	r0, #1
    60cc:	rsb	r0, r0, #0
    60d0:	add	sp, sp, #12
    60d4:	ldrd	r4, [sp]
    60d8:	add	sp, sp, #8
    60dc:	pop	{pc}		; (ldr pc, [sp], #4)
    60e0:	cmp	r3, #103	; 0x67
    60e4:	beq	61a4 <coda_cursor_read_char_array+0x184>
    60e8:	bcc	625c <coda_cursor_read_char_array+0x23c>
    60ec:	cmp	r3, #104	; 0x68
    60f0:	bne	6124 <coda_cursor_read_char_array+0x104>
    60f4:	mov	r1, r5
    60f8:	mov	r0, r4
    60fc:	str	r2, [sp, #4]
    6100:	bl	0 <coda_netcdf_cursor_read_char_array>
    6104:	cmp	r0, #0
    6108:	ldr	r2, [sp, #4]
    610c:	beq	612c <coda_cursor_read_char_array+0x10c>
    6110:	mvn	r0, #0
    6114:	add	sp, sp, #12
    6118:	ldrd	r4, [sp]
    611c:	add	sp, sp, #8
    6120:	pop	{pc}		; (ldr pc, [sp], #4)
    6124:	cmp	r3, #105	; 0x69
    6128:	beq	625c <coda_cursor_read_char_array+0x23c>
    612c:	cmp	r2, #0
    6130:	moveq	r0, r2
    6134:	beq	60d0 <coda_cursor_read_char_array+0xb0>
    6138:	mov	r1, r5
    613c:	mov	r0, r4
    6140:	mov	r2, #1
    6144:	bl	7ec <transpose_array>
    6148:	b	60c4 <coda_cursor_read_char_array+0xa4>
    614c:	ldr	r1, [pc, #292]	; 6278 <coda_cursor_read_char_array+0x258>
    6150:	mrc	15, 0, ip, cr13, cr0, {3}
    6154:	ldr	r1, [pc, r1]
    6158:	ldr	r1, [ip, r1]
    615c:	cmp	r1, #0
    6160:	beq	6088 <coda_cursor_read_char_array+0x68>
    6164:	ldr	r1, [r0, #48]	; 0x30
    6168:	cmp	r1, #0
    616c:	movne	r0, #9
    6170:	beq	6088 <coda_cursor_read_char_array+0x68>
    6174:	bl	0 <coda_type_get_native_type_name>
    6178:	mov	r2, r0
    617c:	movw	r1, #0
    6180:	movt	r1, #0
    6184:	mvn	r0, #104	; 0x68
    6188:	bl	0 <coda_set_error>
    618c:	mvn	r0, #0
    6190:	b	6114 <coda_cursor_read_char_array+0xf4>
    6194:	mov	r1, r5
    6198:	mov	r0, r4
    619c:	bl	0 <coda_ascii_cursor_read_char_array>
    61a0:	b	60c4 <coda_cursor_read_char_array+0xa4>
    61a4:	mov	r1, r5
    61a8:	mov	r0, r4
    61ac:	str	r2, [sp, #4]
    61b0:	bl	0 <coda_cdf_cursor_read_char_array>
    61b4:	cmp	r0, #0
    61b8:	ldr	r2, [sp, #4]
    61bc:	beq	612c <coda_cursor_read_char_array+0x10c>
    61c0:	b	6110 <coda_cursor_read_char_array+0xf0>
    61c4:	mov	r1, r5
    61c8:	mov	r0, r4
    61cc:	bl	0 <coda_bin_cursor_read_char_array>
    61d0:	b	60c4 <coda_cursor_read_char_array+0xa4>
    61d4:	mov	r1, #0
    61d8:	mvn	r0, #10
    61dc:	bl	0 <coda_set_error>
    61e0:	mvn	r0, #0
    61e4:	add	sp, sp, #12
    61e8:	ldrd	r4, [sp]
    61ec:	add	sp, sp, #8
    61f0:	pop	{pc}		; (ldr pc, [sp], #4)
    61f4:	mvn	r0, #99	; 0x63
    61f8:	movw	r2, #0
    61fc:	movt	r2, #0
    6200:	movw	r1, #0
    6204:	movt	r1, #0
    6208:	movw	r3, #4136	; 0x1028
    620c:	bl	0 <coda_set_error>
    6210:	mvn	r0, #0
    6214:	b	60d0 <coda_cursor_read_char_array+0xb0>
    6218:	bl	0 <coda_type_get_class_name>
    621c:	mov	r2, r0
    6220:	movw	r1, #0
    6224:	movt	r1, #0
    6228:	mvn	r0, #104	; 0x68
    622c:	bl	0 <coda_set_error>
    6230:	mvn	r0, #0
    6234:	b	60d0 <coda_cursor_read_char_array+0xb0>
    6238:	mvn	r0, #99	; 0x63
    623c:	movw	r2, #0
    6240:	movt	r2, #0
    6244:	movw	r1, #0
    6248:	movt	r1, #0
    624c:	movw	r3, #4141	; 0x102d
    6250:	bl	0 <coda_set_error>
    6254:	mvn	r0, #0
    6258:	b	60d0 <coda_cursor_read_char_array+0xb0>
    625c:	movw	r1, #0
    6260:	movt	r1, #0
    6264:	ldr	r3, [pc, #16]	; 627c <coda_cursor_read_char_array+0x25c>
    6268:	movw	r0, #0
    626c:	movt	r0, #0
    6270:	movw	r2, #1348	; 0x544
    6274:	bl	0 <__assert_fail>
    6278:	.word	0x0000011c
    627c:	.word	0x00000264

00006280 <coda_cursor_read_int8_partial_array>:
    6280:	strd	r4, [sp, #-20]!	; 0xffffffec
    6284:	subs	r5, r0, #0
    6288:	strd	r6, [sp, #8]
    628c:	str	lr, [sp, #16]
    6290:	sub	sp, sp, #28
    6294:	beq	63dc <coda_cursor_read_int8_partial_array+0x15c>
    6298:	mov	r6, r1
    629c:	ldr	r1, [r5, #4]
    62a0:	cmp	r1, #0
    62a4:	ble	63dc <coda_cursor_read_int8_partial_array+0x15c>
    62a8:	add	r1, r5, r1, lsl #4
    62ac:	ldr	r4, [r1, #-8]
    62b0:	cmp	r4, #0
    62b4:	beq	63dc <coda_cursor_read_int8_partial_array+0x15c>
    62b8:	cmp	r3, #0
    62bc:	beq	643c <coda_cursor_read_int8_partial_array+0x1bc>
    62c0:	ldr	r1, [r4]
    62c4:	cmp	r1, #99	; 0x63
    62c8:	ldrhi	r4, [r4, #4]
    62cc:	ldr	r0, [r4, #8]
    62d0:	cmp	r0, #1
    62d4:	bne	6400 <coda_cursor_read_int8_partial_array+0x180>
    62d8:	ldr	r1, [pc, #384]	; 6460 <coda_cursor_read_int8_partial_array+0x1e0>
    62dc:	mrc	15, 0, r7, cr13, cr0, {3}
    62e0:	ldr	r1, [pc, r1]
    62e4:	ldr	r1, [r7, r1]
    62e8:	cmp	r1, #0
    62ec:	bne	6380 <coda_cursor_read_int8_partial_array+0x100>
    62f0:	ldr	r0, [r4, #40]	; 0x28
    62f4:	ldr	r1, [r0, #8]
    62f8:	sub	r1, r1, #2
    62fc:	cmp	r1, #1
    6300:	bls	633c <coda_cursor_read_int8_partial_array+0xbc>
    6304:	ldr	r0, [r0, #12]
    6308:	cmp	r0, #0
    630c:	bne	6360 <coda_cursor_read_int8_partial_array+0xe0>
    6310:	mov	r1, r6
    6314:	mov	r0, r5
    6318:	bl	1afc <read_int8_partial_array>
    631c:	adds	r0, r0, #0
    6320:	movne	r0, #1
    6324:	rsb	r0, r0, #0
    6328:	add	sp, sp, #28
    632c:	ldrd	r4, [sp]
    6330:	ldrd	r6, [sp, #8]
    6334:	add	sp, sp, #16
    6338:	pop	{pc}		; (ldr pc, [sp], #4)
    633c:	ldr	r1, [pc, #288]	; 6464 <coda_cursor_read_int8_partial_array+0x1e4>
    6340:	ldr	r1, [pc, r1]
    6344:	ldr	r1, [r7, r1]
    6348:	cmp	r1, #0
    634c:	beq	6304 <coda_cursor_read_int8_partial_array+0x84>
    6350:	ldr	r1, [r0, #48]	; 0x30
    6354:	cmp	r1, #0
    6358:	movne	r0, #9
    635c:	beq	6304 <coda_cursor_read_int8_partial_array+0x84>
    6360:	bl	0 <coda_type_get_native_type_name>
    6364:	mov	r2, r0
    6368:	movw	r1, #0
    636c:	movt	r1, #0
    6370:	mvn	r0, #104	; 0x68
    6374:	bl	0 <coda_set_error>
    6378:	mvn	r0, #0
    637c:	b	6328 <coda_cursor_read_int8_partial_array+0xa8>
    6380:	add	r1, sp, #20
    6384:	mov	r0, r5
    6388:	strd	r2, [sp, #8]
    638c:	bl	0 <coda_cursor_get_num_elements>
    6390:	cmp	r0, #0
    6394:	bne	6378 <coda_cursor_read_int8_partial_array+0xf8>
    6398:	cmp	r6, #0
    639c:	ldr	r1, [sp, #20]
    63a0:	blt	6420 <coda_cursor_read_int8_partial_array+0x1a0>
    63a4:	cmp	r6, r1
    63a8:	ldrd	r2, [sp, #8]
    63ac:	bge	6420 <coda_cursor_read_int8_partial_array+0x1a0>
    63b0:	add	r0, r6, r2
    63b4:	cmp	r0, r1
    63b8:	ble	62f0 <coda_cursor_read_int8_partial_array+0x70>
    63bc:	mov	r3, r2
    63c0:	mvn	r0, #106	; 0x6a
    63c4:	str	r1, [sp]
    63c8:	mov	r2, r6
    63cc:	movw	r1, #0
    63d0:	movt	r1, #0
    63d4:	bl	0 <coda_set_error>
    63d8:	b	6378 <coda_cursor_read_int8_partial_array+0xf8>
    63dc:	mvn	r0, #99	; 0x63
    63e0:	movw	r2, #0
    63e4:	movt	r2, #0
    63e8:	movw	r1, #0
    63ec:	movt	r1, #0
    63f0:	movw	r3, #4199	; 0x1067
    63f4:	bl	0 <coda_set_error>
    63f8:	mvn	r0, #0
    63fc:	b	6328 <coda_cursor_read_int8_partial_array+0xa8>
    6400:	bl	0 <coda_type_get_class_name>
    6404:	mov	r2, r0
    6408:	movw	r1, #0
    640c:	movt	r1, #0
    6410:	mvn	r0, #104	; 0x68
    6414:	bl	0 <coda_set_error>
    6418:	mvn	r0, #0
    641c:	b	6328 <coda_cursor_read_int8_partial_array+0xa8>
    6420:	mov	r3, r1
    6424:	mov	r2, r6
    6428:	movw	r1, #0
    642c:	movt	r1, #0
    6430:	mvn	r0, #106	; 0x6a
    6434:	bl	0 <coda_set_error>
    6438:	b	6378 <coda_cursor_read_int8_partial_array+0xf8>
    643c:	mvn	r0, #99	; 0x63
    6440:	movw	r2, #0
    6444:	movt	r2, #0
    6448:	movw	r1, #0
    644c:	movt	r1, #0
    6450:	movw	r3, #4204	; 0x106c
    6454:	bl	0 <coda_set_error>
    6458:	mvn	r0, #0
    645c:	b	6328 <coda_cursor_read_int8_partial_array+0xa8>
    6460:	.word	0x00000178
    6464:	.word	0x0000011c

00006468 <coda_cursor_read_uint8_partial_array>:
    6468:	strd	r4, [sp, #-20]!	; 0xffffffec
    646c:	subs	r5, r0, #0
    6470:	strd	r6, [sp, #8]
    6474:	str	lr, [sp, #16]
    6478:	sub	sp, sp, #28
    647c:	beq	65c4 <coda_cursor_read_uint8_partial_array+0x15c>
    6480:	mov	r6, r1
    6484:	ldr	r1, [r5, #4]
    6488:	cmp	r1, #0
    648c:	ble	65c4 <coda_cursor_read_uint8_partial_array+0x15c>
    6490:	add	r1, r5, r1, lsl #4
    6494:	ldr	r4, [r1, #-8]
    6498:	cmp	r4, #0
    649c:	beq	65c4 <coda_cursor_read_uint8_partial_array+0x15c>
    64a0:	cmp	r3, #0
    64a4:	beq	6624 <coda_cursor_read_uint8_partial_array+0x1bc>
    64a8:	ldr	r1, [r4]
    64ac:	cmp	r1, #99	; 0x63
    64b0:	ldrhi	r4, [r4, #4]
    64b4:	ldr	r0, [r4, #8]
    64b8:	cmp	r0, #1
    64bc:	bne	65e8 <coda_cursor_read_uint8_partial_array+0x180>
    64c0:	ldr	r1, [pc, #384]	; 6648 <coda_cursor_read_uint8_partial_array+0x1e0>
    64c4:	mrc	15, 0, r7, cr13, cr0, {3}
    64c8:	ldr	r1, [pc, r1]
    64cc:	ldr	r1, [r7, r1]
    64d0:	cmp	r1, #0
    64d4:	bne	6568 <coda_cursor_read_uint8_partial_array+0x100>
    64d8:	ldr	r0, [r4, #40]	; 0x28
    64dc:	ldr	r1, [r0, #8]
    64e0:	sub	r1, r1, #2
    64e4:	cmp	r1, #1
    64e8:	bls	6524 <coda_cursor_read_uint8_partial_array+0xbc>
    64ec:	ldr	r0, [r0, #12]
    64f0:	cmp	r0, #1
    64f4:	bne	6548 <coda_cursor_read_uint8_partial_array+0xe0>
    64f8:	mov	r1, r6
    64fc:	mov	r0, r5
    6500:	bl	1bf4 <read_uint8_partial_array>
    6504:	adds	r0, r0, #0
    6508:	movne	r0, #1
    650c:	rsb	r0, r0, #0
    6510:	add	sp, sp, #28
    6514:	ldrd	r4, [sp]
    6518:	ldrd	r6, [sp, #8]
    651c:	add	sp, sp, #16
    6520:	pop	{pc}		; (ldr pc, [sp], #4)
    6524:	ldr	r1, [pc, #288]	; 664c <coda_cursor_read_uint8_partial_array+0x1e4>
    6528:	ldr	r1, [pc, r1]
    652c:	ldr	r1, [r7, r1]
    6530:	cmp	r1, #0
    6534:	beq	64ec <coda_cursor_read_uint8_partial_array+0x84>
    6538:	ldr	r1, [r0, #48]	; 0x30
    653c:	cmp	r1, #0
    6540:	movne	r0, #9
    6544:	beq	64ec <coda_cursor_read_uint8_partial_array+0x84>
    6548:	bl	0 <coda_type_get_native_type_name>
    654c:	mov	r2, r0
    6550:	movw	r1, #0
    6554:	movt	r1, #0
    6558:	mvn	r0, #104	; 0x68
    655c:	bl	0 <coda_set_error>
    6560:	mvn	r0, #0
    6564:	b	6510 <coda_cursor_read_uint8_partial_array+0xa8>
    6568:	add	r1, sp, #20
    656c:	mov	r0, r5
    6570:	strd	r2, [sp, #8]
    6574:	bl	0 <coda_cursor_get_num_elements>
    6578:	cmp	r0, #0
    657c:	bne	6560 <coda_cursor_read_uint8_partial_array+0xf8>
    6580:	cmp	r6, #0
    6584:	ldr	r1, [sp, #20]
    6588:	blt	6608 <coda_cursor_read_uint8_partial_array+0x1a0>
    658c:	cmp	r6, r1
    6590:	ldrd	r2, [sp, #8]
    6594:	bge	6608 <coda_cursor_read_uint8_partial_array+0x1a0>
    6598:	add	r0, r6, r2
    659c:	cmp	r0, r1
    65a0:	ble	64d8 <coda_cursor_read_uint8_partial_array+0x70>
    65a4:	mov	r3, r2
    65a8:	mvn	r0, #106	; 0x6a
    65ac:	str	r1, [sp]
    65b0:	mov	r2, r6
    65b4:	movw	r1, #0
    65b8:	movt	r1, #0
    65bc:	bl	0 <coda_set_error>
    65c0:	b	6560 <coda_cursor_read_uint8_partial_array+0xf8>
    65c4:	mvn	r0, #99	; 0x63
    65c8:	movw	r2, #0
    65cc:	movt	r2, #0
    65d0:	movw	r1, #0
    65d4:	movt	r1, #0
    65d8:	movw	r3, #4285	; 0x10bd
    65dc:	bl	0 <coda_set_error>
    65e0:	mvn	r0, #0
    65e4:	b	6510 <coda_cursor_read_uint8_partial_array+0xa8>
    65e8:	bl	0 <coda_type_get_class_name>
    65ec:	mov	r2, r0
    65f0:	movw	r1, #0
    65f4:	movt	r1, #0
    65f8:	mvn	r0, #104	; 0x68
    65fc:	bl	0 <coda_set_error>
    6600:	mvn	r0, #0
    6604:	b	6510 <coda_cursor_read_uint8_partial_array+0xa8>
    6608:	mov	r3, r1
    660c:	mov	r2, r6
    6610:	movw	r1, #0
    6614:	movt	r1, #0
    6618:	mvn	r0, #106	; 0x6a
    661c:	bl	0 <coda_set_error>
    6620:	b	6560 <coda_cursor_read_uint8_partial_array+0xf8>
    6624:	mvn	r0, #99	; 0x63
    6628:	movw	r2, #0
    662c:	movt	r2, #0
    6630:	movw	r1, #0
    6634:	movt	r1, #0
    6638:	movw	r3, #4290	; 0x10c2
    663c:	bl	0 <coda_set_error>
    6640:	mvn	r0, #0
    6644:	b	6510 <coda_cursor_read_uint8_partial_array+0xa8>
    6648:	.word	0x00000178
    664c:	.word	0x0000011c

00006650 <coda_cursor_read_int16_partial_array>:
    6650:	strd	r4, [sp, #-28]!	; 0xffffffe4
    6654:	strd	r6, [sp, #8]
    6658:	subs	r7, r0, #0
    665c:	strd	r8, [sp, #16]
    6660:	str	lr, [sp, #24]
    6664:	sub	sp, sp, #20
    6668:	beq	6858 <coda_cursor_read_int16_partial_array+0x208>
    666c:	mov	r5, r3
    6670:	ldr	r3, [r7, #4]
    6674:	cmp	r3, #0
    6678:	ble	6858 <coda_cursor_read_int16_partial_array+0x208>
    667c:	add	r3, r7, r3, lsl #4
    6680:	ldr	r6, [r3, #-8]
    6684:	cmp	r6, #0
    6688:	beq	6858 <coda_cursor_read_int16_partial_array+0x208>
    668c:	cmp	r5, #0
    6690:	beq	68b8 <coda_cursor_read_int16_partial_array+0x268>
    6694:	ldr	r3, [r6]
    6698:	mov	r8, r1
    669c:	mov	r4, r2
    66a0:	cmp	r3, #99	; 0x63
    66a4:	ldrhi	r6, [r6, #4]
    66a8:	ldr	r0, [r6, #8]
    66ac:	cmp	r0, #1
    66b0:	bne	687c <coda_cursor_read_int16_partial_array+0x22c>
    66b4:	ldr	r3, [pc, #544]	; 68dc <coda_cursor_read_int16_partial_array+0x28c>
    66b8:	mrc	15, 0, r9, cr13, cr0, {3}
    66bc:	ldr	r3, [pc, r3]
    66c0:	ldr	r3, [r9, r3]
    66c4:	cmp	r3, #0
    66c8:	bne	6758 <coda_cursor_read_int16_partial_array+0x108>
    66cc:	ldr	r2, [r6, #40]	; 0x28
    66d0:	ldr	r3, [r2, #8]
    66d4:	sub	r3, r3, #2
    66d8:	cmp	r3, #1
    66dc:	bls	6730 <coda_cursor_read_int16_partial_array+0xe0>
    66e0:	ldr	r0, [r2, #12]
    66e4:	cmp	r0, #1
    66e8:	beq	6814 <coda_cursor_read_int16_partial_array+0x1c4>
    66ec:	cmp	r0, #2
    66f0:	beq	67f0 <coda_cursor_read_int16_partial_array+0x1a0>
    66f4:	cmp	r0, #0
    66f8:	beq	67ac <coda_cursor_read_int16_partial_array+0x15c>
    66fc:	bl	0 <coda_type_get_native_type_name>
    6700:	mov	r2, r0
    6704:	movw	r1, #0
    6708:	movt	r1, #0
    670c:	mvn	r0, #104	; 0x68
    6710:	bl	0 <coda_set_error>
    6714:	mvn	r0, #0
    6718:	add	sp, sp, #20
    671c:	ldrd	r4, [sp]
    6720:	ldrd	r6, [sp, #8]
    6724:	ldrd	r8, [sp, #16]
    6728:	add	sp, sp, #24
    672c:	pop	{pc}		; (ldr pc, [sp], #4)
    6730:	ldr	r3, [pc, #424]	; 68e0 <coda_cursor_read_int16_partial_array+0x290>
    6734:	ldr	r3, [pc, r3]
    6738:	ldr	r3, [r9, r3]
    673c:	cmp	r3, #0
    6740:	beq	66e0 <coda_cursor_read_int16_partial_array+0x90>
    6744:	ldr	r3, [r2, #48]	; 0x30
    6748:	cmp	r3, #0
    674c:	movne	r0, #9
    6750:	bne	66fc <coda_cursor_read_int16_partial_array+0xac>
    6754:	b	66e0 <coda_cursor_read_int16_partial_array+0x90>
    6758:	add	r1, sp, #12
    675c:	mov	r0, r7
    6760:	bl	0 <coda_cursor_get_num_elements>
    6764:	cmp	r0, #0
    6768:	bne	6714 <coda_cursor_read_int16_partial_array+0xc4>
    676c:	cmp	r8, #0
    6770:	ldr	r1, [sp, #12]
    6774:	blt	689c <coda_cursor_read_int16_partial_array+0x24c>
    6778:	cmp	r8, r1
    677c:	bge	689c <coda_cursor_read_int16_partial_array+0x24c>
    6780:	add	r3, r8, r4
    6784:	cmp	r3, r1
    6788:	ble	66cc <coda_cursor_read_int16_partial_array+0x7c>
    678c:	mov	r3, r4
    6790:	mov	r2, r8
    6794:	str	r1, [sp]
    6798:	mvn	r0, #106	; 0x6a
    679c:	movw	r1, #0
    67a0:	movt	r1, #0
    67a4:	bl	0 <coda_set_error>
    67a8:	b	6714 <coda_cursor_read_int16_partial_array+0xc4>
    67ac:	mov	r1, r8
    67b0:	mov	r0, r7
    67b4:	mov	r3, r5
    67b8:	mov	r2, r4
    67bc:	bl	1afc <read_int8_partial_array>
    67c0:	cmp	r0, #0
    67c4:	bne	6714 <coda_cursor_read_int16_partial_array+0xc4>
    67c8:	cmp	r4, #0
    67cc:	addgt	r3, r5, r4
    67d0:	addgt	r4, r3, r4
    67d4:	ble	67e8 <coda_cursor_read_int16_partial_array+0x198>
    67d8:	ldrsb	r2, [r3, #-1]!
    67dc:	cmp	r5, r3
    67e0:	strh	r2, [r4, #-2]!
    67e4:	bne	67d8 <coda_cursor_read_int16_partial_array+0x188>
    67e8:	mov	r0, #0
    67ec:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    67f0:	mov	r3, r5
    67f4:	mov	r2, r4
    67f8:	mov	r1, r8
    67fc:	mov	r0, r7
    6800:	bl	1cd4 <read_int16_partial_array>
    6804:	adds	r0, r0, #0
    6808:	movne	r0, #1
    680c:	rsb	r0, r0, #0
    6810:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    6814:	mov	r1, r8
    6818:	mov	r0, r7
    681c:	mov	r3, r5
    6820:	mov	r2, r4
    6824:	bl	1bf4 <read_uint8_partial_array>
    6828:	cmp	r0, #0
    682c:	bne	6714 <coda_cursor_read_int16_partial_array+0xc4>
    6830:	cmp	r4, #0
    6834:	ble	67e8 <coda_cursor_read_int16_partial_array+0x198>
    6838:	add	r3, r5, r4
    683c:	add	r4, r3, r4
    6840:	ldrb	r2, [r3, #-1]!
    6844:	cmp	r3, r5
    6848:	strh	r2, [r4, #-2]!
    684c:	bne	6840 <coda_cursor_read_int16_partial_array+0x1f0>
    6850:	mov	r0, #0
    6854:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    6858:	mvn	r0, #99	; 0x63
    685c:	movw	r2, #0
    6860:	movt	r2, #0
    6864:	movw	r1, #0
    6868:	movt	r1, #0
    686c:	movw	r3, #4374	; 0x1116
    6870:	bl	0 <coda_set_error>
    6874:	mvn	r0, #0
    6878:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    687c:	bl	0 <coda_type_get_class_name>
    6880:	mov	r2, r0
    6884:	movw	r1, #0
    6888:	movt	r1, #0
    688c:	mvn	r0, #104	; 0x68
    6890:	bl	0 <coda_set_error>
    6894:	mvn	r0, #0
    6898:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    689c:	mov	r3, r1
    68a0:	mov	r2, r8
    68a4:	movw	r1, #0
    68a8:	movt	r1, #0
    68ac:	mvn	r0, #106	; 0x6a
    68b0:	bl	0 <coda_set_error>
    68b4:	b	6714 <coda_cursor_read_int16_partial_array+0xc4>
    68b8:	mvn	r0, #99	; 0x63
    68bc:	movw	r2, #0
    68c0:	movt	r2, #0
    68c4:	movw	r1, #0
    68c8:	movt	r1, #0
    68cc:	movw	r3, #4379	; 0x111b
    68d0:	bl	0 <coda_set_error>
    68d4:	mvn	r0, #0
    68d8:	b	6718 <coda_cursor_read_int16_partial_array+0xc8>
    68dc:	.word	0x00000218
    68e0:	.word	0x000001a4

000068e4 <coda_cursor_read_uint16_partial_array>:
    68e4:	strd	r4, [sp, #-28]!	; 0xffffffe4
    68e8:	strd	r6, [sp, #8]
    68ec:	subs	r7, r0, #0
    68f0:	strd	r8, [sp, #16]
    68f4:	str	lr, [sp, #24]
    68f8:	sub	sp, sp, #20
    68fc:	beq	6aa0 <coda_cursor_read_uint16_partial_array+0x1bc>
    6900:	mov	r6, r3
    6904:	ldr	r3, [r7, #4]
    6908:	cmp	r3, #0
    690c:	ble	6aa0 <coda_cursor_read_uint16_partial_array+0x1bc>
    6910:	add	r3, r7, r3, lsl #4
    6914:	ldr	r4, [r3, #-8]
    6918:	cmp	r4, #0
    691c:	beq	6aa0 <coda_cursor_read_uint16_partial_array+0x1bc>
    6920:	cmp	r6, #0
    6924:	beq	6b00 <coda_cursor_read_uint16_partial_array+0x21c>
    6928:	ldr	r3, [r4]
    692c:	mov	r8, r1
    6930:	mov	r5, r2
    6934:	cmp	r3, #99	; 0x63
    6938:	ldrhi	r4, [r4, #4]
    693c:	ldr	r0, [r4, #8]
    6940:	cmp	r0, #1
    6944:	bne	6ac4 <coda_cursor_read_uint16_partial_array+0x1e0>
    6948:	ldr	r3, [pc, #468]	; 6b24 <coda_cursor_read_uint16_partial_array+0x240>
    694c:	mrc	15, 0, r9, cr13, cr0, {3}
    6950:	ldr	r3, [pc, r3]
    6954:	ldr	r3, [r9, r3]
    6958:	cmp	r3, #0
    695c:	bne	6a08 <coda_cursor_read_uint16_partial_array+0x124>
    6960:	ldr	r2, [r4, #40]	; 0x28
    6964:	ldr	r3, [r2, #8]
    6968:	sub	r3, r3, #2
    696c:	cmp	r3, #1
    6970:	bls	69e0 <coda_cursor_read_uint16_partial_array+0xfc>
    6974:	ldr	r0, [r2, #12]
    6978:	cmp	r0, #1
    697c:	beq	6a60 <coda_cursor_read_uint16_partial_array+0x17c>
    6980:	cmp	r0, #3
    6984:	beq	69bc <coda_cursor_read_uint16_partial_array+0xd8>
    6988:	bl	0 <coda_type_get_native_type_name>
    698c:	mov	r2, r0
    6990:	movw	r1, #0
    6994:	movt	r1, #0
    6998:	mvn	r0, #104	; 0x68
    699c:	bl	0 <coda_set_error>
    69a0:	mvn	r0, #0
    69a4:	add	sp, sp, #20
    69a8:	ldrd	r4, [sp]
    69ac:	ldrd	r6, [sp, #8]
    69b0:	ldrd	r8, [sp, #16]
    69b4:	add	sp, sp, #24
    69b8:	pop	{pc}		; (ldr pc, [sp], #4)
    69bc:	mov	r3, r6
    69c0:	mov	r2, r5
    69c4:	mov	r1, r8
    69c8:	mov	r0, r7
    69cc:	bl	1dcc <read_uint16_partial_array>
    69d0:	adds	r0, r0, #0
    69d4:	movne	r0, #1
    69d8:	rsb	r0, r0, #0
    69dc:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    69e0:	ldr	r3, [pc, #320]	; 6b28 <coda_cursor_read_uint16_partial_array+0x244>
    69e4:	ldr	r3, [pc, r3]
    69e8:	ldr	r3, [r9, r3]
    69ec:	cmp	r3, #0
    69f0:	beq	6974 <coda_cursor_read_uint16_partial_array+0x90>
    69f4:	ldr	r3, [r2, #48]	; 0x30
    69f8:	cmp	r3, #0
    69fc:	movne	r0, #9
    6a00:	bne	6988 <coda_cursor_read_uint16_partial_array+0xa4>
    6a04:	b	6974 <coda_cursor_read_uint16_partial_array+0x90>
    6a08:	add	r1, sp, #12
    6a0c:	mov	r0, r7
    6a10:	bl	0 <coda_cursor_get_num_elements>
    6a14:	cmp	r0, #0
    6a18:	bne	6a58 <coda_cursor_read_uint16_partial_array+0x174>
    6a1c:	cmp	r8, #0
    6a20:	ldr	r1, [sp, #12]
    6a24:	blt	6ae4 <coda_cursor_read_uint16_partial_array+0x200>
    6a28:	cmp	r8, r1
    6a2c:	bge	6ae4 <coda_cursor_read_uint16_partial_array+0x200>
    6a30:	add	r3, r8, r5
    6a34:	cmp	r3, r1
    6a38:	ble	6960 <coda_cursor_read_uint16_partial_array+0x7c>
    6a3c:	mov	r3, r5
    6a40:	mov	r2, r8
    6a44:	str	r1, [sp]
    6a48:	mvn	r0, #106	; 0x6a
    6a4c:	movw	r1, #0
    6a50:	movt	r1, #0
    6a54:	bl	0 <coda_set_error>
    6a58:	mvn	r0, #0
    6a5c:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6a60:	mov	r1, r8
    6a64:	mov	r0, r7
    6a68:	mov	r3, r6
    6a6c:	mov	r2, r5
    6a70:	bl	1bf4 <read_uint8_partial_array>
    6a74:	cmp	r0, #0
    6a78:	bne	6a58 <coda_cursor_read_uint16_partial_array+0x174>
    6a7c:	cmp	r5, #0
    6a80:	ble	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6a84:	add	r3, r6, r5
    6a88:	add	r2, r3, r5
    6a8c:	ldrb	r1, [r3, #-1]!
    6a90:	cmp	r6, r3
    6a94:	strh	r1, [r2, #-2]!
    6a98:	bne	6a8c <coda_cursor_read_uint16_partial_array+0x1a8>
    6a9c:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6aa0:	mvn	r0, #99	; 0x63
    6aa4:	movw	r2, #0
    6aa8:	movt	r2, #0
    6aac:	movw	r1, #0
    6ab0:	movt	r1, #0
    6ab4:	movw	r3, #4483	; 0x1183
    6ab8:	bl	0 <coda_set_error>
    6abc:	mvn	r0, #0
    6ac0:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6ac4:	bl	0 <coda_type_get_class_name>
    6ac8:	mov	r2, r0
    6acc:	movw	r1, #0
    6ad0:	movt	r1, #0
    6ad4:	mvn	r0, #104	; 0x68
    6ad8:	bl	0 <coda_set_error>
    6adc:	mvn	r0, #0
    6ae0:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6ae4:	mov	r3, r1
    6ae8:	mov	r2, r8
    6aec:	movw	r1, #0
    6af0:	movt	r1, #0
    6af4:	mvn	r0, #106	; 0x6a
    6af8:	bl	0 <coda_set_error>
    6afc:	b	6a58 <coda_cursor_read_uint16_partial_array+0x174>
    6b00:	mvn	r0, #99	; 0x63
    6b04:	movw	r2, #0
    6b08:	movt	r2, #0
    6b0c:	movw	r1, #0
    6b10:	movt	r1, #0
    6b14:	movw	r3, #4488	; 0x1188
    6b18:	bl	0 <coda_set_error>
    6b1c:	mvn	r0, #0
    6b20:	b	69a4 <coda_cursor_read_uint16_partial_array+0xc0>
    6b24:	.word	0x000001cc
    6b28:	.word	0x0000013c

00006b2c <coda_cursor_read_int32_partial_array>:
    6b2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
    6b30:	strd	r6, [sp, #8]
    6b34:	subs	r7, r0, #0
    6b38:	strd	r8, [sp, #16]
    6b3c:	str	lr, [sp, #24]
    6b40:	sub	sp, sp, #20
    6b44:	beq	6dc8 <coda_cursor_read_int32_partial_array+0x29c>
    6b48:	mov	r5, r3
    6b4c:	ldr	r3, [r7, #4]
    6b50:	cmp	r3, #0
    6b54:	ble	6dc8 <coda_cursor_read_int32_partial_array+0x29c>
    6b58:	add	r3, r7, r3, lsl #4
    6b5c:	ldr	r6, [r3, #-8]
    6b60:	cmp	r6, #0
    6b64:	beq	6dc8 <coda_cursor_read_int32_partial_array+0x29c>
    6b68:	cmp	r5, #0
    6b6c:	beq	6e28 <coda_cursor_read_int32_partial_array+0x2fc>
    6b70:	ldr	r3, [r6]
    6b74:	mov	r8, r1
    6b78:	mov	r4, r2
    6b7c:	cmp	r3, #99	; 0x63
    6b80:	ldrhi	r6, [r6, #4]
    6b84:	ldr	r0, [r6, #8]
    6b88:	cmp	r0, #1
    6b8c:	bne	6dec <coda_cursor_read_int32_partial_array+0x2c0>
    6b90:	ldr	r3, [pc, #692]	; 6e4c <coda_cursor_read_int32_partial_array+0x320>
    6b94:	mrc	15, 0, r9, cr13, cr0, {3}
    6b98:	ldr	r3, [pc, r3]
    6b9c:	ldr	r3, [r9, r3]
    6ba0:	cmp	r3, #0
    6ba4:	bne	6c38 <coda_cursor_read_int32_partial_array+0x10c>
    6ba8:	ldr	r2, [r6, #40]	; 0x28
    6bac:	ldr	r3, [r2, #8]
    6bb0:	sub	r3, r3, #2
    6bb4:	cmp	r3, #1
    6bb8:	bls	6be0 <coda_cursor_read_int32_partial_array+0xb4>
    6bbc:	ldr	r0, [r2, #12]
    6bc0:	cmp	r0, #4
    6bc4:	ldrls	pc, [pc, r0, lsl #2]
    6bc8:	b	6c04 <coda_cursor_read_int32_partial_array+0xd8>
    6bcc:	.word	0x00006c8c
    6bd0:	.word	0x00006cd0
    6bd4:	.word	0x00006d14
    6bd8:	.word	0x00006d5c
    6bdc:	.word	0x00006da4
    6be0:	ldr	r3, [pc, #616]	; 6e50 <coda_cursor_read_int32_partial_array+0x324>
    6be4:	ldr	r3, [pc, r3]
    6be8:	ldr	r3, [r9, r3]
    6bec:	cmp	r3, #0
    6bf0:	beq	6bbc <coda_cursor_read_int32_partial_array+0x90>
    6bf4:	ldr	r3, [r2, #48]	; 0x30
    6bf8:	cmp	r3, #0
    6bfc:	movne	r0, #9
    6c00:	beq	6bbc <coda_cursor_read_int32_partial_array+0x90>
    6c04:	bl	0 <coda_type_get_native_type_name>
    6c08:	mov	r2, r0
    6c0c:	movw	r1, #0
    6c10:	movt	r1, #0
    6c14:	mvn	r0, #104	; 0x68
    6c18:	bl	0 <coda_set_error>
    6c1c:	mvn	r0, #0
    6c20:	add	sp, sp, #20
    6c24:	ldrd	r4, [sp]
    6c28:	ldrd	r6, [sp, #8]
    6c2c:	ldrd	r8, [sp, #16]
    6c30:	add	sp, sp, #24
    6c34:	pop	{pc}		; (ldr pc, [sp], #4)
    6c38:	add	r1, sp, #12
    6c3c:	mov	r0, r7
    6c40:	bl	0 <coda_cursor_get_num_elements>
    6c44:	cmp	r0, #0
    6c48:	bne	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6c4c:	cmp	r8, #0
    6c50:	ldr	r1, [sp, #12]
    6c54:	blt	6e0c <coda_cursor_read_int32_partial_array+0x2e0>
    6c58:	cmp	r8, r1
    6c5c:	bge	6e0c <coda_cursor_read_int32_partial_array+0x2e0>
    6c60:	add	r3, r8, r4
    6c64:	cmp	r3, r1
    6c68:	ble	6ba8 <coda_cursor_read_int32_partial_array+0x7c>
    6c6c:	mov	r3, r4
    6c70:	mov	r2, r8
    6c74:	str	r1, [sp]
    6c78:	mvn	r0, #106	; 0x6a
    6c7c:	movw	r1, #0
    6c80:	movt	r1, #0
    6c84:	bl	0 <coda_set_error>
    6c88:	b	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6c8c:	mov	r1, r8
    6c90:	mov	r0, r7
    6c94:	mov	r3, r5
    6c98:	mov	r2, r4
    6c9c:	bl	1afc <read_int8_partial_array>
    6ca0:	cmp	r0, #0
    6ca4:	bne	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6ca8:	cmp	r4, #0
    6cac:	addgt	r3, r5, r4, lsl #2
    6cb0:	addgt	r4, r5, r4
    6cb4:	ble	6cc8 <coda_cursor_read_int32_partial_array+0x19c>
    6cb8:	ldrsb	r2, [r4, #-1]!
    6cbc:	cmp	r5, r4
    6cc0:	str	r2, [r3, #-4]!
    6cc4:	bne	6cb8 <coda_cursor_read_int32_partial_array+0x18c>
    6cc8:	mov	r0, #0
    6ccc:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6cd0:	mov	r1, r8
    6cd4:	mov	r0, r7
    6cd8:	mov	r3, r5
    6cdc:	mov	r2, r4
    6ce0:	bl	1bf4 <read_uint8_partial_array>
    6ce4:	cmp	r0, #0
    6ce8:	bne	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6cec:	cmp	r4, #0
    6cf0:	ble	6cc8 <coda_cursor_read_int32_partial_array+0x19c>
    6cf4:	add	r3, r5, r4, lsl #2
    6cf8:	add	r4, r5, r4
    6cfc:	ldrb	r2, [r4, #-1]!
    6d00:	cmp	r5, r4
    6d04:	str	r2, [r3, #-4]!
    6d08:	bne	6cfc <coda_cursor_read_int32_partial_array+0x1d0>
    6d0c:	mov	r0, #0
    6d10:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6d14:	mov	r1, r8
    6d18:	mov	r0, r7
    6d1c:	mov	r3, r5
    6d20:	mov	r2, r4
    6d24:	bl	1cd4 <read_int16_partial_array>
    6d28:	cmp	r0, #0
    6d2c:	bne	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6d30:	cmp	r4, #0
    6d34:	ble	6cc8 <coda_cursor_read_int32_partial_array+0x19c>
    6d38:	lsl	r4, r4, #1
    6d3c:	add	r3, r5, r4
    6d40:	add	r4, r3, r4
    6d44:	ldrsh	r2, [r3, #-2]!
    6d48:	cmp	r3, r5
    6d4c:	str	r2, [r4, #-4]!
    6d50:	bne	6d44 <coda_cursor_read_int32_partial_array+0x218>
    6d54:	mov	r0, #0
    6d58:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6d5c:	mov	r1, r8
    6d60:	mov	r0, r7
    6d64:	mov	r3, r5
    6d68:	mov	r2, r4
    6d6c:	bl	1dcc <read_uint16_partial_array>
    6d70:	cmp	r0, #0
    6d74:	bne	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6d78:	cmp	r4, #0
    6d7c:	ble	6cc8 <coda_cursor_read_int32_partial_array+0x19c>
    6d80:	lsl	r4, r4, #1
    6d84:	add	r3, r5, r4
    6d88:	add	r4, r3, r4
    6d8c:	ldrh	r2, [r3, #-2]!
    6d90:	cmp	r3, r5
    6d94:	str	r2, [r4, #-4]!
    6d98:	bne	6d8c <coda_cursor_read_int32_partial_array+0x260>
    6d9c:	mov	r0, #0
    6da0:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6da4:	mov	r3, r5
    6da8:	mov	r2, r4
    6dac:	mov	r1, r8
    6db0:	mov	r0, r7
    6db4:	bl	1eac <read_int32_partial_array>
    6db8:	adds	r0, r0, #0
    6dbc:	movne	r0, #1
    6dc0:	rsb	r0, r0, #0
    6dc4:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6dc8:	mvn	r0, #99	; 0x63
    6dcc:	movw	r2, #0
    6dd0:	movt	r2, #0
    6dd4:	movw	r1, #0
    6dd8:	movt	r1, #0
    6ddc:	movw	r3, #4584	; 0x11e8
    6de0:	bl	0 <coda_set_error>
    6de4:	mvn	r0, #0
    6de8:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6dec:	bl	0 <coda_type_get_class_name>
    6df0:	mov	r2, r0
    6df4:	movw	r1, #0
    6df8:	movt	r1, #0
    6dfc:	mvn	r0, #104	; 0x68
    6e00:	bl	0 <coda_set_error>
    6e04:	mvn	r0, #0
    6e08:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6e0c:	mov	r3, r1
    6e10:	mov	r2, r8
    6e14:	movw	r1, #0
    6e18:	movt	r1, #0
    6e1c:	mvn	r0, #106	; 0x6a
    6e20:	bl	0 <coda_set_error>
    6e24:	b	6c1c <coda_cursor_read_int32_partial_array+0xf0>
    6e28:	mvn	r0, #99	; 0x63
    6e2c:	movw	r2, #0
    6e30:	movt	r2, #0
    6e34:	movw	r1, #0
    6e38:	movt	r1, #0
    6e3c:	movw	r3, #4589	; 0x11ed
    6e40:	bl	0 <coda_set_error>
    6e44:	mvn	r0, #0
    6e48:	b	6c20 <coda_cursor_read_int32_partial_array+0xf4>
    6e4c:	.word	0x000002ac
    6e50:	.word	0x00000264

00006e54 <coda_cursor_read_uint32_partial_array>:
    6e54:	strd	r4, [sp, #-28]!	; 0xffffffe4
    6e58:	strd	r6, [sp, #8]
    6e5c:	subs	r7, r0, #0
    6e60:	strd	r8, [sp, #16]
    6e64:	str	lr, [sp, #24]
    6e68:	sub	sp, sp, #20
    6e6c:	beq	7060 <coda_cursor_read_uint32_partial_array+0x20c>
    6e70:	mov	r6, r3
    6e74:	ldr	r3, [r7, #4]
    6e78:	cmp	r3, #0
    6e7c:	ble	7060 <coda_cursor_read_uint32_partial_array+0x20c>
    6e80:	add	r3, r7, r3, lsl #4
    6e84:	ldr	r4, [r3, #-8]
    6e88:	cmp	r4, #0
    6e8c:	beq	7060 <coda_cursor_read_uint32_partial_array+0x20c>
    6e90:	cmp	r6, #0
    6e94:	beq	70c0 <coda_cursor_read_uint32_partial_array+0x26c>
    6e98:	ldr	r3, [r4]
    6e9c:	mov	r8, r1
    6ea0:	mov	r5, r2
    6ea4:	cmp	r3, #99	; 0x63
    6ea8:	ldrhi	r4, [r4, #4]
    6eac:	ldr	r0, [r4, #8]
    6eb0:	cmp	r0, #1
    6eb4:	bne	7084 <coda_cursor_read_uint32_partial_array+0x230>
    6eb8:	ldr	r3, [pc, #548]	; 70e4 <coda_cursor_read_uint32_partial_array+0x290>
    6ebc:	mrc	15, 0, r9, cr13, cr0, {3}
    6ec0:	ldr	r3, [pc, r3]
    6ec4:	ldr	r3, [r9, r3]
    6ec8:	cmp	r3, #0
    6ecc:	bne	6f5c <coda_cursor_read_uint32_partial_array+0x108>
    6ed0:	ldr	r2, [r4, #40]	; 0x28
    6ed4:	ldr	r3, [r2, #8]
    6ed8:	sub	r3, r3, #2
    6edc:	cmp	r3, #1
    6ee0:	bls	6f34 <coda_cursor_read_uint32_partial_array+0xe0>
    6ee4:	ldr	r0, [r2, #12]
    6ee8:	cmp	r0, #3
    6eec:	beq	7018 <coda_cursor_read_uint32_partial_array+0x1c4>
    6ef0:	cmp	r0, #5
    6ef4:	beq	6ff4 <coda_cursor_read_uint32_partial_array+0x1a0>
    6ef8:	cmp	r0, #1
    6efc:	beq	6fb0 <coda_cursor_read_uint32_partial_array+0x15c>
    6f00:	bl	0 <coda_type_get_native_type_name>
    6f04:	mov	r2, r0
    6f08:	movw	r1, #0
    6f0c:	movt	r1, #0
    6f10:	mvn	r0, #104	; 0x68
    6f14:	bl	0 <coda_set_error>
    6f18:	mvn	r0, #0
    6f1c:	add	sp, sp, #20
    6f20:	ldrd	r4, [sp]
    6f24:	ldrd	r6, [sp, #8]
    6f28:	ldrd	r8, [sp, #16]
    6f2c:	add	sp, sp, #24
    6f30:	pop	{pc}		; (ldr pc, [sp], #4)
    6f34:	ldr	r3, [pc, #428]	; 70e8 <coda_cursor_read_uint32_partial_array+0x294>
    6f38:	ldr	r3, [pc, r3]
    6f3c:	ldr	r3, [r9, r3]
    6f40:	cmp	r3, #0
    6f44:	beq	6ee4 <coda_cursor_read_uint32_partial_array+0x90>
    6f48:	ldr	r3, [r2, #48]	; 0x30
    6f4c:	cmp	r3, #0
    6f50:	movne	r0, #9
    6f54:	bne	6f00 <coda_cursor_read_uint32_partial_array+0xac>
    6f58:	b	6ee4 <coda_cursor_read_uint32_partial_array+0x90>
    6f5c:	add	r1, sp, #12
    6f60:	mov	r0, r7
    6f64:	bl	0 <coda_cursor_get_num_elements>
    6f68:	cmp	r0, #0
    6f6c:	bne	6f18 <coda_cursor_read_uint32_partial_array+0xc4>
    6f70:	cmp	r8, #0
    6f74:	ldr	r1, [sp, #12]
    6f78:	blt	70a4 <coda_cursor_read_uint32_partial_array+0x250>
    6f7c:	cmp	r8, r1
    6f80:	bge	70a4 <coda_cursor_read_uint32_partial_array+0x250>
    6f84:	add	r3, r8, r5
    6f88:	cmp	r3, r1
    6f8c:	ble	6ed0 <coda_cursor_read_uint32_partial_array+0x7c>
    6f90:	mov	r3, r5
    6f94:	mov	r2, r8
    6f98:	str	r1, [sp]
    6f9c:	mvn	r0, #106	; 0x6a
    6fa0:	movw	r1, #0
    6fa4:	movt	r1, #0
    6fa8:	bl	0 <coda_set_error>
    6fac:	b	6f18 <coda_cursor_read_uint32_partial_array+0xc4>
    6fb0:	mov	r1, r8
    6fb4:	mov	r0, r7
    6fb8:	mov	r3, r6
    6fbc:	mov	r2, r5
    6fc0:	bl	1bf4 <read_uint8_partial_array>
    6fc4:	cmp	r0, #0
    6fc8:	bne	6f18 <coda_cursor_read_uint32_partial_array+0xc4>
    6fcc:	cmp	r5, #0
    6fd0:	addgt	r3, r6, r5, lsl #2
    6fd4:	addgt	r2, r6, r5
    6fd8:	ble	6fec <coda_cursor_read_uint32_partial_array+0x198>
    6fdc:	ldrb	r1, [r2, #-1]!
    6fe0:	cmp	r6, r2
    6fe4:	str	r1, [r3, #-4]!
    6fe8:	bne	6fdc <coda_cursor_read_uint32_partial_array+0x188>
    6fec:	mov	r0, #0
    6ff0:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    6ff4:	mov	r3, r6
    6ff8:	mov	r2, r5
    6ffc:	mov	r1, r8
    7000:	mov	r0, r7
    7004:	bl	1fa4 <read_uint32_partial_array>
    7008:	adds	r0, r0, #0
    700c:	movne	r0, #1
    7010:	rsb	r0, r0, #0
    7014:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    7018:	mov	r1, r8
    701c:	mov	r0, r7
    7020:	mov	r3, r6
    7024:	mov	r2, r5
    7028:	bl	1dcc <read_uint16_partial_array>
    702c:	cmp	r0, #0
    7030:	bne	6f18 <coda_cursor_read_uint32_partial_array+0xc4>
    7034:	cmp	r5, #0
    7038:	ble	6fec <coda_cursor_read_uint32_partial_array+0x198>
    703c:	lsl	r2, r5, #1
    7040:	add	r3, r6, r2
    7044:	add	r2, r3, r2
    7048:	ldrh	r1, [r3, #-2]!
    704c:	cmp	r3, r6
    7050:	str	r1, [r2, #-4]!
    7054:	bne	7048 <coda_cursor_read_uint32_partial_array+0x1f4>
    7058:	mov	r0, #0
    705c:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    7060:	mvn	r0, #99	; 0x63
    7064:	movw	r2, #0
    7068:	movt	r2, #0
    706c:	movw	r1, #0
    7070:	movt	r1, #0
    7074:	movw	r3, #4714	; 0x126a
    7078:	bl	0 <coda_set_error>
    707c:	mvn	r0, #0
    7080:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    7084:	bl	0 <coda_type_get_class_name>
    7088:	mov	r2, r0
    708c:	movw	r1, #0
    7090:	movt	r1, #0
    7094:	mvn	r0, #104	; 0x68
    7098:	bl	0 <coda_set_error>
    709c:	mvn	r0, #0
    70a0:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    70a4:	mov	r3, r1
    70a8:	mov	r2, r8
    70ac:	movw	r1, #0
    70b0:	movt	r1, #0
    70b4:	mvn	r0, #106	; 0x6a
    70b8:	bl	0 <coda_set_error>
    70bc:	b	6f18 <coda_cursor_read_uint32_partial_array+0xc4>
    70c0:	mvn	r0, #99	; 0x63
    70c4:	movw	r2, #0
    70c8:	movt	r2, #0
    70cc:	movw	r1, #0
    70d0:	movt	r1, #0
    70d4:	movw	r3, #4719	; 0x126f
    70d8:	bl	0 <coda_set_error>
    70dc:	mvn	r0, #0
    70e0:	b	6f1c <coda_cursor_read_uint32_partial_array+0xc8>
    70e4:	.word	0x0000021c
    70e8:	.word	0x000001a8

000070ec <coda_cursor_read_int64_partial_array>:
    70ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
    70f0:	strd	r6, [sp, #8]
    70f4:	subs	r7, r0, #0
    70f8:	strd	r8, [sp, #16]
    70fc:	str	lr, [sp, #24]
    7100:	sub	sp, sp, #20
    7104:	beq	741c <coda_cursor_read_int64_partial_array+0x330>
    7108:	mov	r5, r3
    710c:	ldr	r3, [r7, #4]
    7110:	cmp	r3, #0
    7114:	ble	741c <coda_cursor_read_int64_partial_array+0x330>
    7118:	add	r3, r7, r3, lsl #4
    711c:	ldr	r6, [r3, #-8]
    7120:	cmp	r6, #0
    7124:	beq	741c <coda_cursor_read_int64_partial_array+0x330>
    7128:	cmp	r5, #0
    712c:	beq	747c <coda_cursor_read_int64_partial_array+0x390>
    7130:	ldr	r3, [r6]
    7134:	mov	r8, r1
    7138:	mov	r4, r2
    713c:	cmp	r3, #99	; 0x63
    7140:	ldrhi	r6, [r6, #4]
    7144:	ldr	r0, [r6, #8]
    7148:	cmp	r0, #1
    714c:	bne	7440 <coda_cursor_read_int64_partial_array+0x354>
    7150:	ldr	r3, [pc, #840]	; 74a0 <coda_cursor_read_int64_partial_array+0x3b4>
    7154:	mrc	15, 0, r9, cr13, cr0, {3}
    7158:	ldr	r3, [pc, r3]
    715c:	ldr	r3, [r9, r3]
    7160:	cmp	r3, #0
    7164:	bne	7200 <coda_cursor_read_int64_partial_array+0x114>
    7168:	ldr	r2, [r6, #40]	; 0x28
    716c:	ldr	r3, [r2, #8]
    7170:	sub	r3, r3, #2
    7174:	cmp	r3, #1
    7178:	bls	71a8 <coda_cursor_read_int64_partial_array+0xbc>
    717c:	ldr	r0, [r2, #12]
    7180:	cmp	r0, #6
    7184:	ldrls	pc, [pc, r0, lsl #2]
    7188:	b	71cc <coda_cursor_read_int64_partial_array+0xe0>
    718c:	.word	0x00007254
    7190:	.word	0x0000729c
    7194:	.word	0x000072e0
    7198:	.word	0x00007324
    719c:	.word	0x00007368
    71a0:	.word	0x000073b0
    71a4:	.word	0x000073f8
    71a8:	ldr	r3, [pc, #756]	; 74a4 <coda_cursor_read_int64_partial_array+0x3b8>
    71ac:	ldr	r3, [pc, r3]
    71b0:	ldr	r3, [r9, r3]
    71b4:	cmp	r3, #0
    71b8:	beq	717c <coda_cursor_read_int64_partial_array+0x90>
    71bc:	ldr	r3, [r2, #48]	; 0x30
    71c0:	cmp	r3, #0
    71c4:	movne	r0, #9
    71c8:	beq	717c <coda_cursor_read_int64_partial_array+0x90>
    71cc:	bl	0 <coda_type_get_native_type_name>
    71d0:	mov	r2, r0
    71d4:	movw	r1, #0
    71d8:	movt	r1, #0
    71dc:	mvn	r0, #104	; 0x68
    71e0:	bl	0 <coda_set_error>
    71e4:	mvn	r0, #0
    71e8:	add	sp, sp, #20
    71ec:	ldrd	r4, [sp]
    71f0:	ldrd	r6, [sp, #8]
    71f4:	ldrd	r8, [sp, #16]
    71f8:	add	sp, sp, #24
    71fc:	pop	{pc}		; (ldr pc, [sp], #4)
    7200:	add	r1, sp, #12
    7204:	mov	r0, r7
    7208:	bl	0 <coda_cursor_get_num_elements>
    720c:	cmp	r0, #0
    7210:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    7214:	cmp	r8, #0
    7218:	ldr	r1, [sp, #12]
    721c:	blt	7460 <coda_cursor_read_int64_partial_array+0x374>
    7220:	cmp	r8, r1
    7224:	bge	7460 <coda_cursor_read_int64_partial_array+0x374>
    7228:	add	r3, r8, r4
    722c:	cmp	r3, r1
    7230:	ble	7168 <coda_cursor_read_int64_partial_array+0x7c>
    7234:	mov	r3, r4
    7238:	mov	r2, r8
    723c:	str	r1, [sp]
    7240:	mvn	r0, #106	; 0x6a
    7244:	movw	r1, #0
    7248:	movt	r1, #0
    724c:	bl	0 <coda_set_error>
    7250:	b	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    7254:	mov	r1, r8
    7258:	mov	r0, r7
    725c:	mov	r3, r5
    7260:	mov	r2, r4
    7264:	bl	1afc <read_int8_partial_array>
    7268:	cmp	r0, #0
    726c:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    7270:	cmp	r4, #0
    7274:	addgt	r3, r5, r4, lsl #3
    7278:	addgt	r4, r5, r4
    727c:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    7280:	ldrsb	r0, [r4, #-1]!
    7284:	asr	r1, r0, #31
    7288:	cmp	r5, r4
    728c:	strd	r0, [r3, #-8]!
    7290:	bne	7280 <coda_cursor_read_int64_partial_array+0x194>
    7294:	mov	r0, #0
    7298:	b	71e8 <coda_cursor_read_int64_partial_array+0xfc>
    729c:	mov	r1, r8
    72a0:	mov	r0, r7
    72a4:	mov	r3, r5
    72a8:	mov	r2, r4
    72ac:	bl	1bf4 <read_uint8_partial_array>
    72b0:	cmp	r0, #0
    72b4:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    72b8:	cmp	r4, #0
    72bc:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    72c0:	add	r3, r5, r4, lsl #3
    72c4:	add	r4, r5, r4
    72c8:	ldrb	r0, [r4, #-1]!
    72cc:	mov	r1, #0
    72d0:	cmp	r5, r4
    72d4:	strd	r0, [r3, #-8]!
    72d8:	bne	72c8 <coda_cursor_read_int64_partial_array+0x1dc>
    72dc:	b	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    72e0:	mov	r1, r8
    72e4:	mov	r0, r7
    72e8:	mov	r3, r5
    72ec:	mov	r2, r4
    72f0:	bl	1cd4 <read_int16_partial_array>
    72f4:	cmp	r0, #0
    72f8:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    72fc:	cmp	r4, #0
    7300:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    7304:	add	r3, r5, r4, lsl #1
    7308:	add	r4, r5, r4, lsl #3
    730c:	ldrsh	r0, [r3, #-2]!
    7310:	asr	r1, r0, #31
    7314:	cmp	r5, r3
    7318:	strd	r0, [r4, #-8]!
    731c:	bne	730c <coda_cursor_read_int64_partial_array+0x220>
    7320:	b	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    7324:	mov	r1, r8
    7328:	mov	r0, r7
    732c:	mov	r3, r5
    7330:	mov	r2, r4
    7334:	bl	1dcc <read_uint16_partial_array>
    7338:	cmp	r0, #0
    733c:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    7340:	cmp	r4, #0
    7344:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    7348:	add	r3, r5, r4, lsl #1
    734c:	add	r4, r5, r4, lsl #3
    7350:	ldrh	r0, [r3, #-2]!
    7354:	mov	r1, #0
    7358:	cmp	r3, r5
    735c:	strd	r0, [r4, #-8]!
    7360:	bne	7350 <coda_cursor_read_int64_partial_array+0x264>
    7364:	b	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    7368:	mov	r1, r8
    736c:	mov	r0, r7
    7370:	mov	r3, r5
    7374:	mov	r2, r4
    7378:	bl	1eac <read_int32_partial_array>
    737c:	cmp	r0, #0
    7380:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    7384:	cmp	r4, #0
    7388:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    738c:	lsl	r4, r4, #2
    7390:	add	r1, r5, r4
    7394:	add	r4, r1, r4
    7398:	ldr	r2, [r1, #-4]!
    739c:	asr	r3, r2, #31
    73a0:	cmp	r1, r5
    73a4:	strd	r2, [r4, #-8]!
    73a8:	bne	7398 <coda_cursor_read_int64_partial_array+0x2ac>
    73ac:	b	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    73b0:	mov	r1, r8
    73b4:	mov	r0, r7
    73b8:	mov	r3, r5
    73bc:	mov	r2, r4
    73c0:	bl	1fa4 <read_uint32_partial_array>
    73c4:	cmp	r0, #0
    73c8:	bne	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    73cc:	cmp	r4, #0
    73d0:	ble	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    73d4:	lsl	r4, r4, #2
    73d8:	add	r3, r5, r4
    73dc:	add	r4, r3, r4
    73e0:	ldr	r2, [r3, #-4]!
    73e4:	cmp	r3, r5
    73e8:	str	r2, [r4, #-8]!
    73ec:	str	r0, [r4, #4]
    73f0:	bne	73e0 <coda_cursor_read_int64_partial_array+0x2f4>
    73f4:	b	7294 <coda_cursor_read_int64_partial_array+0x1a8>
    73f8:	mov	r3, r5
    73fc:	mov	r2, r4
    7400:	mov	r1, r8
    7404:	mov	r0, r7
    7408:	bl	2084 <read_int64_partial_array>
    740c:	adds	r0, r0, #0
    7410:	movne	r0, #1
    7414:	rsb	r0, r0, #0
    7418:	b	71e8 <coda_cursor_read_int64_partial_array+0xfc>
    741c:	mvn	r0, #99	; 0x63
    7420:	movw	r2, #0
    7424:	movt	r2, #0
    7428:	movw	r1, #0
    742c:	movt	r1, #0
    7430:	movw	r3, #4827	; 0x12db
    7434:	bl	0 <coda_set_error>
    7438:	mvn	r0, #0
    743c:	b	71e8 <coda_cursor_read_int64_partial_array+0xfc>
    7440:	bl	0 <coda_type_get_class_name>
    7444:	mov	r2, r0
    7448:	movw	r1, #0
    744c:	movt	r1, #0
    7450:	mvn	r0, #104	; 0x68
    7454:	bl	0 <coda_set_error>
    7458:	mvn	r0, #0
    745c:	b	71e8 <coda_cursor_read_int64_partial_array+0xfc>
    7460:	mov	r3, r1
    7464:	mov	r2, r8
    7468:	movw	r1, #0
    746c:	movt	r1, #0
    7470:	mvn	r0, #106	; 0x6a
    7474:	bl	0 <coda_set_error>
    7478:	b	71e4 <coda_cursor_read_int64_partial_array+0xf8>
    747c:	mvn	r0, #99	; 0x63
    7480:	movw	r2, #0
    7484:	movt	r2, #0
    7488:	movw	r1, #0
    748c:	movt	r1, #0
    7490:	movw	r3, #4832	; 0x12e0
    7494:	bl	0 <coda_set_error>
    7498:	mvn	r0, #0
    749c:	b	71e8 <coda_cursor_read_int64_partial_array+0xfc>
    74a0:	.word	0x00000340
    74a4:	.word	0x000002f0

000074a8 <coda_cursor_read_uint64_partial_array>:
    74a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
    74ac:	strd	r6, [sp, #8]
    74b0:	subs	r7, r0, #0
    74b4:	strd	r8, [sp, #16]
    74b8:	str	lr, [sp, #24]
    74bc:	sub	sp, sp, #20
    74c0:	beq	7714 <coda_cursor_read_uint64_partial_array+0x26c>
    74c4:	mov	r5, r3
    74c8:	ldr	r3, [r7, #4]
    74cc:	cmp	r3, #0
    74d0:	ble	7714 <coda_cursor_read_uint64_partial_array+0x26c>
    74d4:	add	r3, r7, r3, lsl #4
    74d8:	ldr	r4, [r3, #-8]
    74dc:	cmp	r4, #0
    74e0:	beq	7714 <coda_cursor_read_uint64_partial_array+0x26c>
    74e4:	cmp	r5, #0
    74e8:	beq	7774 <coda_cursor_read_uint64_partial_array+0x2cc>
    74ec:	ldr	r3, [r4]
    74f0:	mov	r8, r1
    74f4:	mov	r6, r2
    74f8:	cmp	r3, #99	; 0x63
    74fc:	ldrhi	r4, [r4, #4]
    7500:	ldr	r0, [r4, #8]
    7504:	cmp	r0, #1
    7508:	bne	7738 <coda_cursor_read_uint64_partial_array+0x290>
    750c:	ldr	r3, [pc, #644]	; 7798 <coda_cursor_read_uint64_partial_array+0x2f0>
    7510:	mrc	15, 0, r9, cr13, cr0, {3}
    7514:	ldr	r3, [pc, r3]
    7518:	ldr	r3, [r9, r3]
    751c:	cmp	r3, #0
    7520:	bne	75c0 <coda_cursor_read_uint64_partial_array+0x118>
    7524:	ldr	r2, [r4, #40]	; 0x28
    7528:	ldr	r3, [r2, #8]
    752c:	sub	r3, r3, #2
    7530:	cmp	r3, #1
    7534:	bls	7568 <coda_cursor_read_uint64_partial_array+0xc0>
    7538:	ldr	r0, [r2, #12]
    753c:	sub	r3, r0, #1
    7540:	cmp	r3, #6
    7544:	ldrls	pc, [pc, r3, lsl #2]
    7548:	b	758c <coda_cursor_read_uint64_partial_array+0xe4>
    754c:	.word	0x00007614
    7550:	.word	0x0000758c
    7554:	.word	0x0000765c
    7558:	.word	0x0000758c
    755c:	.word	0x000076c8
    7560:	.word	0x0000758c
    7564:	.word	0x000076a4
    7568:	ldr	r3, [pc, #556]	; 779c <coda_cursor_read_uint64_partial_array+0x2f4>
    756c:	ldr	r3, [pc, r3]
    7570:	ldr	r3, [r9, r3]
    7574:	cmp	r3, #0
    7578:	beq	7538 <coda_cursor_read_uint64_partial_array+0x90>
    757c:	ldr	r3, [r2, #48]	; 0x30
    7580:	cmp	r3, #0
    7584:	movne	r0, #9
    7588:	beq	7538 <coda_cursor_read_uint64_partial_array+0x90>
    758c:	bl	0 <coda_type_get_native_type_name>
    7590:	mov	r2, r0
    7594:	movw	r1, #0
    7598:	movt	r1, #0
    759c:	mvn	r0, #104	; 0x68
    75a0:	bl	0 <coda_set_error>
    75a4:	mvn	r0, #0
    75a8:	add	sp, sp, #20
    75ac:	ldrd	r4, [sp]
    75b0:	ldrd	r6, [sp, #8]
    75b4:	ldrd	r8, [sp, #16]
    75b8:	add	sp, sp, #24
    75bc:	pop	{pc}		; (ldr pc, [sp], #4)
    75c0:	add	r1, sp, #12
    75c4:	mov	r0, r7
    75c8:	bl	0 <coda_cursor_get_num_elements>
    75cc:	cmp	r0, #0
    75d0:	bne	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    75d4:	cmp	r8, #0
    75d8:	ldr	r1, [sp, #12]
    75dc:	blt	7758 <coda_cursor_read_uint64_partial_array+0x2b0>
    75e0:	cmp	r8, r1
    75e4:	bge	7758 <coda_cursor_read_uint64_partial_array+0x2b0>
    75e8:	add	r3, r8, r6
    75ec:	cmp	r3, r1
    75f0:	ble	7524 <coda_cursor_read_uint64_partial_array+0x7c>
    75f4:	mov	r3, r6
    75f8:	mov	r2, r8
    75fc:	str	r1, [sp]
    7600:	mvn	r0, #106	; 0x6a
    7604:	movw	r1, #0
    7608:	movt	r1, #0
    760c:	bl	0 <coda_set_error>
    7610:	b	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    7614:	mov	r1, r8
    7618:	mov	r0, r7
    761c:	mov	r3, r5
    7620:	mov	r2, r6
    7624:	bl	1bf4 <read_uint8_partial_array>
    7628:	cmp	r0, #0
    762c:	bne	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    7630:	cmp	r6, #0
    7634:	addgt	r3, r5, r6, lsl #3
    7638:	addgt	r2, r5, r6
    763c:	ble	7654 <coda_cursor_read_uint64_partial_array+0x1ac>
    7640:	ldrb	r0, [r2, #-1]!
    7644:	mov	r1, #0
    7648:	cmp	r5, r2
    764c:	strd	r0, [r3, #-8]!
    7650:	bne	7640 <coda_cursor_read_uint64_partial_array+0x198>
    7654:	mov	r0, #0
    7658:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    765c:	mov	r1, r8
    7660:	mov	r0, r7
    7664:	mov	r3, r5
    7668:	mov	r2, r6
    766c:	bl	1dcc <read_uint16_partial_array>
    7670:	cmp	r0, #0
    7674:	bne	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    7678:	cmp	r6, #0
    767c:	ble	7654 <coda_cursor_read_uint64_partial_array+0x1ac>
    7680:	add	r3, r5, r6, lsl #1
    7684:	add	r2, r5, r6, lsl #3
    7688:	ldrh	r0, [r3, #-2]!
    768c:	mov	r1, #0
    7690:	cmp	r5, r3
    7694:	strd	r0, [r2, #-8]!
    7698:	bne	7688 <coda_cursor_read_uint64_partial_array+0x1e0>
    769c:	mov	r0, #0
    76a0:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    76a4:	mov	r3, r5
    76a8:	mov	r2, r6
    76ac:	mov	r1, r8
    76b0:	mov	r0, r7
    76b4:	bl	2164 <read_uint64_partial_array>
    76b8:	adds	r0, r0, #0
    76bc:	movne	r0, #1
    76c0:	rsb	r0, r0, #0
    76c4:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    76c8:	mov	r1, r8
    76cc:	mov	r0, r7
    76d0:	mov	r3, r5
    76d4:	mov	r2, r6
    76d8:	bl	1fa4 <read_uint32_partial_array>
    76dc:	cmp	r0, #0
    76e0:	bne	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    76e4:	cmp	r6, #0
    76e8:	ble	7654 <coda_cursor_read_uint64_partial_array+0x1ac>
    76ec:	lsl	r2, r6, #2
    76f0:	add	r3, r5, r2
    76f4:	add	r2, r3, r2
    76f8:	ldr	r1, [r3, #-4]!
    76fc:	cmp	r3, r5
    7700:	str	r1, [r2, #-8]!
    7704:	str	r0, [r2, #4]
    7708:	bne	76f8 <coda_cursor_read_uint64_partial_array+0x250>
    770c:	mov	r0, #0
    7710:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    7714:	mvn	r0, #99	; 0x63
    7718:	movw	r2, #0
    771c:	movt	r2, #0
    7720:	movw	r1, #0
    7724:	movt	r1, #0
    7728:	movw	r3, #4978	; 0x1372
    772c:	bl	0 <coda_set_error>
    7730:	mvn	r0, #0
    7734:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    7738:	bl	0 <coda_type_get_class_name>
    773c:	mov	r2, r0
    7740:	movw	r1, #0
    7744:	movt	r1, #0
    7748:	mvn	r0, #104	; 0x68
    774c:	bl	0 <coda_set_error>
    7750:	mvn	r0, #0
    7754:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    7758:	mov	r3, r1
    775c:	mov	r2, r8
    7760:	movw	r1, #0
    7764:	movt	r1, #0
    7768:	mvn	r0, #106	; 0x6a
    776c:	bl	0 <coda_set_error>
    7770:	b	75a4 <coda_cursor_read_uint64_partial_array+0xfc>
    7774:	mvn	r0, #99	; 0x63
    7778:	movw	r2, #0
    777c:	movt	r2, #0
    7780:	movw	r1, #0
    7784:	movt	r1, #0
    7788:	movw	r3, #4983	; 0x1377
    778c:	bl	0 <coda_set_error>
    7790:	mvn	r0, #0
    7794:	b	75a8 <coda_cursor_read_uint64_partial_array+0x100>
    7798:	.word	0x0000027c
    779c:	.word	0x00000228

000077a0 <coda_cursor_read_double_partial_array>:
    77a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
    77a4:	strd	r6, [sp, #8]
    77a8:	subs	r7, r0, #0
    77ac:	strd	r8, [sp, #16]
    77b0:	str	lr, [sp, #24]
    77b4:	sub	sp, sp, #20
    77b8:	beq	7be8 <coda_cursor_read_double_partial_array+0x448>
    77bc:	mov	r4, r3
    77c0:	ldr	r3, [r7, #4]
    77c4:	cmp	r3, #0
    77c8:	ble	7be8 <coda_cursor_read_double_partial_array+0x448>
    77cc:	add	r3, r7, r3, lsl #4
    77d0:	ldr	r5, [r3, #-8]
    77d4:	cmp	r5, #0
    77d8:	beq	7be8 <coda_cursor_read_double_partial_array+0x448>
    77dc:	cmp	r4, #0
    77e0:	beq	7c48 <coda_cursor_read_double_partial_array+0x4a8>
    77e4:	ldr	r3, [r5]
    77e8:	mov	r8, r1
    77ec:	mov	r6, r2
    77f0:	cmp	r3, #99	; 0x63
    77f4:	ldrhi	r5, [r5, #4]
    77f8:	ldr	r0, [r5, #8]
    77fc:	cmp	r0, #1
    7800:	bne	7c0c <coda_cursor_read_double_partial_array+0x46c>
    7804:	ldr	r3, [pc, #1148]	; 7c88 <coda_cursor_read_double_partial_array+0x4e8>
    7808:	mrc	15, 0, r9, cr13, cr0, {3}
    780c:	ldr	r3, [pc, r3]
    7810:	ldr	r3, [r9, r3]
    7814:	cmp	r3, #0
    7818:	bne	7880 <coda_cursor_read_double_partial_array+0xe0>
    781c:	ldr	r2, [r5, #40]	; 0x28
    7820:	ldr	r3, [r2, #8]
    7824:	ldr	r0, [r2, #12]
    7828:	sub	r3, r3, #2
    782c:	cmp	r3, #1
    7830:	movhi	r5, #0
    7834:	bhi	784c <coda_cursor_read_double_partial_array+0xac>
    7838:	ldr	r3, [pc, #1100]	; 7c8c <coda_cursor_read_double_partial_array+0x4ec>
    783c:	ldr	r3, [pc, r3]
    7840:	ldr	r5, [r9, r3]
    7844:	cmp	r5, #0
    7848:	ldrne	r5, [r2, #48]	; 0x30
    784c:	cmp	r0, #9
    7850:	ldrls	pc, [pc, r0, lsl #2]
    7854:	b	7c6c <coda_cursor_read_double_partial_array+0x4cc>
    7858:	.word	0x00007970
    785c:	.word	0x000079b8
    7860:	.word	0x00007a00
    7864:	.word	0x00007a48
    7868:	.word	0x00007a90
    786c:	.word	0x00007ad8
    7870:	.word	0x00007b20
    7874:	.word	0x00007b60
    7878:	.word	0x00007ba0
    787c:	.word	0x000078d8
    7880:	add	r1, sp, #12
    7884:	mov	r0, r7
    7888:	bl	0 <coda_cursor_get_num_elements>
    788c:	cmp	r0, #0
    7890:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7894:	cmp	r8, #0
    7898:	ldr	r1, [sp, #12]
    789c:	blt	7c2c <coda_cursor_read_double_partial_array+0x48c>
    78a0:	cmp	r8, r1
    78a4:	bge	7c2c <coda_cursor_read_double_partial_array+0x48c>
    78a8:	add	r3, r8, r6
    78ac:	cmp	r3, r1
    78b0:	ble	781c <coda_cursor_read_double_partial_array+0x7c>
    78b4:	mov	r3, r6
    78b8:	mov	r2, r8
    78bc:	str	r1, [sp]
    78c0:	mvn	r0, #106	; 0x6a
    78c4:	movw	r1, #0
    78c8:	movt	r1, #0
    78cc:	bl	0 <coda_set_error>
    78d0:	mvn	r0, #0
    78d4:	b	7958 <coda_cursor_read_double_partial_array+0x1b8>
    78d8:	mov	r1, r8
    78dc:	mov	r0, r7
    78e0:	mov	r3, r4
    78e4:	mov	r2, r6
    78e8:	bl	3654 <read_double_partial_array>
    78ec:	cmp	r0, #0
    78f0:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    78f4:	cmp	r5, #0
    78f8:	beq	7954 <coda_cursor_read_double_partial_array+0x1b4>
    78fc:	cmp	r6, #0
    7900:	ble	7954 <coda_cursor_read_double_partial_array+0x1b4>
    7904:	add	r6, r4, r6, lsl #3
    7908:	b	7930 <coda_cursor_read_double_partial_array+0x190>
    790c:	vldr	d6, [r5]
    7910:	cmp	r6, r4
    7914:	vldr	d4, [r5, #8]
    7918:	vldr	d5, [r5, #16]
    791c:	vmul.f64	d7, d7, d6
    7920:	vdiv.f64	d6, d7, d4
    7924:	vadd.f64	d6, d6, d5
    7928:	vstr	d6, [r4, #-8]
    792c:	beq	7954 <coda_cursor_read_double_partial_array+0x1b4>
    7930:	vldmia	r4!, {d7}
    7934:	vldr	d6, [r5, #24]
    7938:	vcmp.f64	d7, d6
    793c:	vmrs	APSR_nzcv, fpscr
    7940:	bne	790c <coda_cursor_read_double_partial_array+0x16c>
    7944:	bl	0 <coda_NaN>
    7948:	cmp	r6, r4
    794c:	vstr	d0, [r4, #-8]
    7950:	bne	7930 <coda_cursor_read_double_partial_array+0x190>
    7954:	mov	r0, #0
    7958:	add	sp, sp, #20
    795c:	ldrd	r4, [sp]
    7960:	ldrd	r6, [sp, #8]
    7964:	ldrd	r8, [sp, #16]
    7968:	add	sp, sp, #24
    796c:	pop	{pc}		; (ldr pc, [sp], #4)
    7970:	mov	r1, r8
    7974:	mov	r0, r7
    7978:	mov	r3, r4
    797c:	mov	r2, r6
    7980:	bl	1afc <read_int8_partial_array>
    7984:	cmp	r0, #0
    7988:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    798c:	cmp	r6, #0
    7990:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7994:	add	r2, r4, r6, lsl #3
    7998:	add	r3, r4, r6
    799c:	ldrsb	r1, [r3, #-1]!
    79a0:	vmov	s14, r1
    79a4:	cmp	r4, r3
    79a8:	vcvt.f64.s32	d7, s14
    79ac:	vstmdb	r2!, {d7}
    79b0:	bne	799c <coda_cursor_read_double_partial_array+0x1fc>
    79b4:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    79b8:	mov	r1, r8
    79bc:	mov	r0, r7
    79c0:	mov	r3, r4
    79c4:	mov	r2, r6
    79c8:	bl	1bf4 <read_uint8_partial_array>
    79cc:	cmp	r0, #0
    79d0:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    79d4:	cmp	r6, #0
    79d8:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    79dc:	add	r2, r4, r6, lsl #3
    79e0:	add	r3, r4, r6
    79e4:	ldrb	r1, [r3, #-1]!
    79e8:	vmov	s14, r1
    79ec:	cmp	r4, r3
    79f0:	vcvt.f64.u32	d7, s14
    79f4:	vstmdb	r2!, {d7}
    79f8:	bne	79e4 <coda_cursor_read_double_partial_array+0x244>
    79fc:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7a00:	mov	r1, r8
    7a04:	mov	r0, r7
    7a08:	mov	r3, r4
    7a0c:	mov	r2, r6
    7a10:	bl	1cd4 <read_int16_partial_array>
    7a14:	cmp	r0, #0
    7a18:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7a1c:	cmp	r6, #0
    7a20:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7a24:	add	r3, r4, r6, lsl #1
    7a28:	add	r2, r4, r6, lsl #3
    7a2c:	ldrsh	r1, [r3, #-2]!
    7a30:	vmov	s14, r1
    7a34:	cmp	r4, r3
    7a38:	vcvt.f64.s32	d7, s14
    7a3c:	vstmdb	r2!, {d7}
    7a40:	bne	7a2c <coda_cursor_read_double_partial_array+0x28c>
    7a44:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7a48:	mov	r1, r8
    7a4c:	mov	r0, r7
    7a50:	mov	r3, r4
    7a54:	mov	r2, r6
    7a58:	bl	1dcc <read_uint16_partial_array>
    7a5c:	cmp	r0, #0
    7a60:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7a64:	cmp	r6, #0
    7a68:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7a6c:	add	r3, r4, r6, lsl #1
    7a70:	add	r2, r4, r6, lsl #3
    7a74:	ldrh	r1, [r3, #-2]!
    7a78:	vmov	s14, r1
    7a7c:	cmp	r3, r4
    7a80:	vcvt.f64.u32	d7, s14
    7a84:	vstmdb	r2!, {d7}
    7a88:	bne	7a74 <coda_cursor_read_double_partial_array+0x2d4>
    7a8c:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7a90:	mov	r1, r8
    7a94:	mov	r0, r7
    7a98:	mov	r3, r4
    7a9c:	mov	r2, r6
    7aa0:	bl	1eac <read_int32_partial_array>
    7aa4:	cmp	r0, #0
    7aa8:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7aac:	cmp	r6, #0
    7ab0:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7ab4:	lsl	r2, r6, #2
    7ab8:	add	r3, r4, r2
    7abc:	add	r2, r3, r2
    7ac0:	vldmdb	r3!, {s14}
    7ac4:	vcvt.f64.s32	d7, s14
    7ac8:	cmp	r3, r4
    7acc:	vstmdb	r2!, {d7}
    7ad0:	bne	7ac0 <coda_cursor_read_double_partial_array+0x320>
    7ad4:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7ad8:	mov	r1, r8
    7adc:	mov	r0, r7
    7ae0:	mov	r3, r4
    7ae4:	mov	r2, r6
    7ae8:	bl	1fa4 <read_uint32_partial_array>
    7aec:	cmp	r0, #0
    7af0:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7af4:	cmp	r6, #0
    7af8:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7afc:	lsl	r2, r6, #2
    7b00:	add	r3, r4, r2
    7b04:	add	r2, r3, r2
    7b08:	vldmdb	r3!, {s14}
    7b0c:	vcvt.f64.u32	d7, s14
    7b10:	cmp	r3, r4
    7b14:	vstmdb	r2!, {d7}
    7b18:	bne	7b08 <coda_cursor_read_double_partial_array+0x368>
    7b1c:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7b20:	mov	r1, r8
    7b24:	mov	r0, r7
    7b28:	mov	r3, r4
    7b2c:	mov	r2, r6
    7b30:	bl	2084 <read_int64_partial_array>
    7b34:	cmp	r0, #0
    7b38:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7b3c:	cmp	r6, #0
    7b40:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7b44:	add	r7, r4, r6, lsl #3
    7b48:	ldrd	r0, [r7, #-8]!
    7b4c:	bl	0 <__aeabi_l2d>
    7b50:	cmp	r7, r4
    7b54:	strd	r0, [r7]
    7b58:	bne	7b48 <coda_cursor_read_double_partial_array+0x3a8>
    7b5c:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7b60:	mov	r1, r8
    7b64:	mov	r0, r7
    7b68:	mov	r3, r4
    7b6c:	mov	r2, r6
    7b70:	bl	2164 <read_uint64_partial_array>
    7b74:	cmp	r0, #0
    7b78:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7b7c:	cmp	r6, #0
    7b80:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7b84:	add	r7, r4, r6, lsl #3
    7b88:	ldrd	r0, [r7, #-8]!
    7b8c:	bl	0 <__aeabi_ul2d>
    7b90:	cmp	r7, r4
    7b94:	strd	r0, [r7]
    7b98:	bne	7b88 <coda_cursor_read_double_partial_array+0x3e8>
    7b9c:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7ba0:	mov	r1, r8
    7ba4:	mov	r0, r7
    7ba8:	mov	r3, r4
    7bac:	mov	r2, r6
    7bb0:	bl	2230 <read_float_partial_array>
    7bb4:	cmp	r0, #0
    7bb8:	bne	78d0 <coda_cursor_read_double_partial_array+0x130>
    7bbc:	cmp	r6, #0
    7bc0:	ble	78f4 <coda_cursor_read_double_partial_array+0x154>
    7bc4:	lsl	r2, r6, #2
    7bc8:	add	r3, r4, r2
    7bcc:	add	r2, r3, r2
    7bd0:	vldmdb	r3!, {s14}
    7bd4:	vcvt.f64.f32	d7, s14
    7bd8:	cmp	r3, r4
    7bdc:	vstmdb	r2!, {d7}
    7be0:	bne	7bd0 <coda_cursor_read_double_partial_array+0x430>
    7be4:	b	78f4 <coda_cursor_read_double_partial_array+0x154>
    7be8:	mvn	r0, #99	; 0x63
    7bec:	movw	r2, #0
    7bf0:	movt	r2, #0
    7bf4:	movw	r1, #0
    7bf8:	movt	r1, #0
    7bfc:	movw	r3, #5355	; 0x14eb
    7c00:	bl	0 <coda_set_error>
    7c04:	mvn	r0, #0
    7c08:	b	7958 <coda_cursor_read_double_partial_array+0x1b8>
    7c0c:	bl	0 <coda_type_get_class_name>
    7c10:	mov	r2, r0
    7c14:	movw	r1, #0
    7c18:	movt	r1, #0
    7c1c:	mvn	r0, #104	; 0x68
    7c20:	bl	0 <coda_set_error>
    7c24:	mvn	r0, #0
    7c28:	b	7958 <coda_cursor_read_double_partial_array+0x1b8>
    7c2c:	mov	r3, r1
    7c30:	mov	r2, r8
    7c34:	movw	r1, #0
    7c38:	movt	r1, #0
    7c3c:	mvn	r0, #106	; 0x6a
    7c40:	bl	0 <coda_set_error>
    7c44:	b	78d0 <coda_cursor_read_double_partial_array+0x130>
    7c48:	mvn	r0, #99	; 0x63
    7c4c:	movw	r2, #0
    7c50:	movt	r2, #0
    7c54:	movw	r1, #0
    7c58:	movt	r1, #0
    7c5c:	movw	r3, #5360	; 0x14f0
    7c60:	bl	0 <coda_set_error>
    7c64:	mvn	r0, #0
    7c68:	b	7958 <coda_cursor_read_double_partial_array+0x1b8>
    7c6c:	bl	0 <coda_type_get_native_type_name>
    7c70:	mov	r2, r0
    7c74:	movw	r1, #0
    7c78:	movt	r1, #0
    7c7c:	mvn	r0, #104	; 0x68
    7c80:	bl	0 <coda_set_error>
    7c84:	b	78d0 <coda_cursor_read_double_partial_array+0x130>
    7c88:	.word	0x00000474
    7c8c:	.word	0x00000448

00007c90 <coda_cursor_read_float_partial_array>:
    7c90:	strd	r4, [sp, #-28]!	; 0xffffffe4
    7c94:	strd	r6, [sp, #8]
    7c98:	subs	r7, r0, #0
    7c9c:	strd	r8, [sp, #16]
    7ca0:	str	lr, [sp, #24]
    7ca4:	sub	sp, sp, #20
    7ca8:	beq	812c <coda_cursor_read_float_partial_array+0x49c>
    7cac:	mov	r5, r3
    7cb0:	ldr	r3, [r7, #4]
    7cb4:	cmp	r3, #0
    7cb8:	ble	812c <coda_cursor_read_float_partial_array+0x49c>
    7cbc:	add	r3, r7, r3, lsl #4
    7cc0:	ldr	r6, [r3, #-8]
    7cc4:	cmp	r6, #0
    7cc8:	beq	812c <coda_cursor_read_float_partial_array+0x49c>
    7ccc:	cmp	r5, #0
    7cd0:	beq	818c <coda_cursor_read_float_partial_array+0x4fc>
    7cd4:	ldr	r3, [r6]
    7cd8:	mov	r8, r1
    7cdc:	mov	r4, r2
    7ce0:	cmp	r3, #99	; 0x63
    7ce4:	ldrhi	r6, [r6, #4]
    7ce8:	ldr	r0, [r6, #8]
    7cec:	cmp	r0, #1
    7cf0:	bne	8150 <coda_cursor_read_float_partial_array+0x4c0>
    7cf4:	ldr	r3, [pc, #1292]	; 8208 <coda_cursor_read_float_partial_array+0x578>
    7cf8:	mrc	15, 0, r9, cr13, cr0, {3}
    7cfc:	ldr	r3, [pc, r3]
    7d00:	ldr	r3, [r9, r3]
    7d04:	cmp	r3, #0
    7d08:	bne	7df0 <coda_cursor_read_float_partial_array+0x160>
    7d0c:	ldr	r2, [r6, #40]	; 0x28
    7d10:	ldr	r3, [r2, #8]
    7d14:	ldr	r0, [r2, #12]
    7d18:	sub	r3, r3, #2
    7d1c:	cmp	r3, #1
    7d20:	bls	7d58 <coda_cursor_read_float_partial_array+0xc8>
    7d24:	cmp	r0, #9
    7d28:	ldrls	pc, [pc, r0, lsl #2]
    7d2c:	b	81e8 <coda_cursor_read_float_partial_array+0x558>
    7d30:	.word	0x00007e48
    7d34:	.word	0x00007e94
    7d38:	.word	0x0000800c
    7d3c:	.word	0x00007f80
    7d40:	.word	0x00007fcc
    7d44:	.word	0x00007f40
    7d48:	.word	0x000080d4
    7d4c:	.word	0x00008058
    7d50:	.word	0x000080b0
    7d54:	.word	0x00007edc
    7d58:	ldr	r3, [pc, #1196]	; 820c <coda_cursor_read_float_partial_array+0x57c>
    7d5c:	ldr	r3, [pc, r3]
    7d60:	ldr	r3, [r9, r3]
    7d64:	cmp	r3, #0
    7d68:	beq	7d24 <coda_cursor_read_float_partial_array+0x94>
    7d6c:	ldr	r3, [r2, #48]	; 0x30
    7d70:	cmp	r3, #0
    7d74:	beq	7d24 <coda_cursor_read_float_partial_array+0x94>
    7d78:	lsl	r6, r4, #3
    7d7c:	mov	r0, r6
    7d80:	bl	0 <malloc>
    7d84:	subs	r9, r0, #0
    7d88:	beq	81c0 <coda_cursor_read_float_partial_array+0x530>
    7d8c:	mov	r0, r7
    7d90:	mov	r1, r8
    7d94:	mov	r3, r9
    7d98:	mov	r2, r4
    7d9c:	bl	77a0 <coda_cursor_read_double_partial_array>
    7da0:	subs	r7, r0, #0
    7da4:	bne	81b0 <coda_cursor_read_float_partial_array+0x520>
    7da8:	cmp	r4, #0
    7dac:	addgt	r4, r5, r4, lsl #2
    7db0:	addgt	r0, r9, r6
    7db4:	ble	7dcc <coda_cursor_read_float_partial_array+0x13c>
    7db8:	vldmdb	r0!, {d7}
    7dbc:	vcvt.f32.f64	s14, d7
    7dc0:	cmp	r0, r9
    7dc4:	vstmdb	r4!, {s14}
    7dc8:	bne	7db8 <coda_cursor_read_float_partial_array+0x128>
    7dcc:	mov	r0, r9
    7dd0:	bl	0 <free>
    7dd4:	mov	r0, r7
    7dd8:	add	sp, sp, #20
    7ddc:	ldrd	r4, [sp]
    7de0:	ldrd	r6, [sp, #8]
    7de4:	ldrd	r8, [sp, #16]
    7de8:	add	sp, sp, #24
    7dec:	pop	{pc}		; (ldr pc, [sp], #4)
    7df0:	add	r1, sp, #12
    7df4:	mov	r0, r7
    7df8:	bl	0 <coda_cursor_get_num_elements>
    7dfc:	cmp	r0, #0
    7e00:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7e04:	cmp	r8, #0
    7e08:	ldr	r1, [sp, #12]
    7e0c:	blt	8170 <coda_cursor_read_float_partial_array+0x4e0>
    7e10:	cmp	r8, r1
    7e14:	bge	8170 <coda_cursor_read_float_partial_array+0x4e0>
    7e18:	add	r3, r8, r4
    7e1c:	cmp	r3, r1
    7e20:	ble	7d0c <coda_cursor_read_float_partial_array+0x7c>
    7e24:	mov	r3, r4
    7e28:	mov	r2, r8
    7e2c:	str	r1, [sp]
    7e30:	mvn	r0, #106	; 0x6a
    7e34:	movw	r1, #0
    7e38:	movt	r1, #0
    7e3c:	bl	0 <coda_set_error>
    7e40:	mvn	r7, #0
    7e44:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    7e48:	mov	r1, r8
    7e4c:	mov	r0, r7
    7e50:	mov	r3, r5
    7e54:	mov	r2, r4
    7e58:	bl	1afc <read_int8_partial_array>
    7e5c:	cmp	r0, #0
    7e60:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7e64:	cmp	r4, #0
    7e68:	addgt	r3, r5, r4, lsl #2
    7e6c:	addgt	r4, r5, r4
    7e70:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7e74:	ldrsb	r2, [r4, #-1]!
    7e78:	vmov	s15, r2
    7e7c:	cmp	r5, r4
    7e80:	vcvt.f32.s32	s15, s15
    7e84:	vstmdb	r3!, {s15}
    7e88:	bne	7e74 <coda_cursor_read_float_partial_array+0x1e4>
    7e8c:	mov	r7, #0
    7e90:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    7e94:	mov	r1, r8
    7e98:	mov	r0, r7
    7e9c:	mov	r3, r5
    7ea0:	mov	r2, r4
    7ea4:	bl	1bf4 <read_uint8_partial_array>
    7ea8:	cmp	r0, #0
    7eac:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7eb0:	cmp	r4, #0
    7eb4:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7eb8:	add	r3, r5, r4, lsl #2
    7ebc:	add	r4, r5, r4
    7ec0:	ldrb	r2, [r4, #-1]!
    7ec4:	vmov	s15, r2
    7ec8:	cmp	r5, r4
    7ecc:	vcvt.f32.u32	s15, s15
    7ed0:	vstmdb	r3!, {s15}
    7ed4:	bne	7ec0 <coda_cursor_read_float_partial_array+0x230>
    7ed8:	b	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7edc:	lsl	r9, r4, #3
    7ee0:	mov	r0, r9
    7ee4:	bl	0 <malloc>
    7ee8:	subs	r6, r0, #0
    7eec:	moveq	r2, r9
    7ef0:	beq	81c4 <coda_cursor_read_float_partial_array+0x534>
    7ef4:	mov	r0, r7
    7ef8:	mov	r1, r8
    7efc:	mov	r3, r6
    7f00:	mov	r2, r4
    7f04:	bl	3654 <read_double_partial_array>
    7f08:	subs	r7, r0, #0
    7f0c:	bne	81d8 <coda_cursor_read_float_partial_array+0x548>
    7f10:	cmp	r4, #0
    7f14:	addgt	r4, r5, r4, lsl #2
    7f18:	addgt	r0, r6, r9
    7f1c:	ble	7f34 <coda_cursor_read_float_partial_array+0x2a4>
    7f20:	vldmdb	r0!, {d7}
    7f24:	vcvt.f32.f64	s14, d7
    7f28:	cmp	r0, r6
    7f2c:	vstmdb	r4!, {s14}
    7f30:	bne	7f20 <coda_cursor_read_float_partial_array+0x290>
    7f34:	mov	r0, r6
    7f38:	bl	0 <free>
    7f3c:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    7f40:	mov	r1, r8
    7f44:	mov	r0, r7
    7f48:	mov	r3, r5
    7f4c:	mov	r2, r4
    7f50:	bl	1fa4 <read_uint32_partial_array>
    7f54:	cmp	r0, #0
    7f58:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7f5c:	cmp	r4, #0
    7f60:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7f64:	add	r4, r5, r4, lsl #2
    7f68:	vldmdb	r4!, {s15}
    7f6c:	vcvt.f32.u32	s15, s15
    7f70:	cmp	r4, r5
    7f74:	vstr	s15, [r4]
    7f78:	bne	7f68 <coda_cursor_read_float_partial_array+0x2d8>
    7f7c:	b	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7f80:	mov	r1, r8
    7f84:	mov	r0, r7
    7f88:	mov	r3, r5
    7f8c:	mov	r2, r4
    7f90:	bl	1dcc <read_uint16_partial_array>
    7f94:	cmp	r0, #0
    7f98:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7f9c:	cmp	r4, #0
    7fa0:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7fa4:	lsl	r4, r4, #1
    7fa8:	add	r3, r5, r4
    7fac:	add	r4, r3, r4
    7fb0:	ldrh	r2, [r3, #-2]!
    7fb4:	vmov	s15, r2
    7fb8:	cmp	r5, r3
    7fbc:	vcvt.f32.u32	s15, s15
    7fc0:	vstmdb	r4!, {s15}
    7fc4:	bne	7fb0 <coda_cursor_read_float_partial_array+0x320>
    7fc8:	b	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7fcc:	mov	r1, r8
    7fd0:	mov	r0, r7
    7fd4:	mov	r3, r5
    7fd8:	mov	r2, r4
    7fdc:	bl	1eac <read_int32_partial_array>
    7fe0:	cmp	r0, #0
    7fe4:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    7fe8:	cmp	r4, #0
    7fec:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    7ff0:	add	r4, r5, r4, lsl #2
    7ff4:	vldmdb	r4!, {s15}
    7ff8:	vcvt.f32.s32	s15, s15
    7ffc:	cmp	r4, r5
    8000:	vstr	s15, [r4]
    8004:	bne	7ff4 <coda_cursor_read_float_partial_array+0x364>
    8008:	b	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    800c:	mov	r1, r8
    8010:	mov	r0, r7
    8014:	mov	r3, r5
    8018:	mov	r2, r4
    801c:	bl	1cd4 <read_int16_partial_array>
    8020:	cmp	r0, #0
    8024:	bne	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    8028:	cmp	r4, #0
    802c:	ble	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    8030:	lsl	r4, r4, #1
    8034:	add	r3, r5, r4
    8038:	add	r4, r3, r4
    803c:	ldrsh	r2, [r3, #-2]!
    8040:	vmov	s15, r2
    8044:	cmp	r5, r3
    8048:	vcvt.f32.s32	s15, s15
    804c:	vstmdb	r4!, {s15}
    8050:	bne	803c <coda_cursor_read_float_partial_array+0x3ac>
    8054:	b	7e8c <coda_cursor_read_float_partial_array+0x1fc>
    8058:	lsl	r6, r4, #3
    805c:	mov	r0, r6
    8060:	bl	0 <malloc>
    8064:	subs	r9, r0, #0
    8068:	beq	81c0 <coda_cursor_read_float_partial_array+0x530>
    806c:	mov	r0, r7
    8070:	mov	r1, r8
    8074:	mov	r3, r9
    8078:	mov	r2, r4
    807c:	bl	2164 <read_uint64_partial_array>
    8080:	subs	r7, r0, #0
    8084:	bne	81b0 <coda_cursor_read_float_partial_array+0x520>
    8088:	cmp	r4, #0
    808c:	addgt	r4, r5, r4, lsl #2
    8090:	addgt	r6, r9, r6
    8094:	ble	7dcc <coda_cursor_read_float_partial_array+0x13c>
    8098:	ldrd	r0, [r6, #-8]!
    809c:	bl	0 <__aeabi_ul2f>
    80a0:	str	r0, [r4, #-4]!
    80a4:	cmp	r6, r9
    80a8:	bne	8098 <coda_cursor_read_float_partial_array+0x408>
    80ac:	b	7dcc <coda_cursor_read_float_partial_array+0x13c>
    80b0:	mov	r0, r7
    80b4:	mov	r3, r5
    80b8:	mov	r2, r4
    80bc:	mov	r1, r8
    80c0:	bl	2230 <read_float_partial_array>
    80c4:	adds	r0, r0, #0
    80c8:	movne	r0, #1
    80cc:	rsb	r7, r0, #0
    80d0:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    80d4:	lsl	r6, r4, #3
    80d8:	mov	r0, r6
    80dc:	bl	0 <malloc>
    80e0:	subs	r9, r0, #0
    80e4:	beq	81c0 <coda_cursor_read_float_partial_array+0x530>
    80e8:	mov	r0, r7
    80ec:	mov	r1, r8
    80f0:	mov	r3, r9
    80f4:	mov	r2, r4
    80f8:	bl	2084 <read_int64_partial_array>
    80fc:	subs	r7, r0, #0
    8100:	bne	81b0 <coda_cursor_read_float_partial_array+0x520>
    8104:	cmp	r4, #0
    8108:	addgt	r4, r5, r4, lsl #2
    810c:	addgt	r6, r9, r6
    8110:	ble	7dcc <coda_cursor_read_float_partial_array+0x13c>
    8114:	ldrd	r0, [r6, #-8]!
    8118:	bl	0 <__aeabi_l2f>
    811c:	str	r0, [r4, #-4]!
    8120:	cmp	r6, r9
    8124:	bne	8114 <coda_cursor_read_float_partial_array+0x484>
    8128:	b	7dcc <coda_cursor_read_float_partial_array+0x13c>
    812c:	movw	r2, #0
    8130:	movt	r2, #0
    8134:	movw	r1, #0
    8138:	movt	r1, #0
    813c:	movw	r3, #5105	; 0x13f1
    8140:	mvn	r0, #99	; 0x63
    8144:	bl	0 <coda_set_error>
    8148:	mvn	r7, #0
    814c:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    8150:	bl	0 <coda_type_get_class_name>
    8154:	mov	r2, r0
    8158:	movw	r1, #0
    815c:	movt	r1, #0
    8160:	mvn	r0, #104	; 0x68
    8164:	mvn	r7, #0
    8168:	bl	0 <coda_set_error>
    816c:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    8170:	mov	r3, r1
    8174:	mov	r2, r8
    8178:	movw	r1, #0
    817c:	movt	r1, #0
    8180:	mvn	r0, #106	; 0x6a
    8184:	bl	0 <coda_set_error>
    8188:	b	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    818c:	movw	r2, #0
    8190:	movt	r2, #0
    8194:	movw	r1, #0
    8198:	movt	r1, #0
    819c:	movw	r3, #5110	; 0x13f6
    81a0:	mvn	r0, #99	; 0x63
    81a4:	bl	0 <coda_set_error>
    81a8:	mvn	r7, #0
    81ac:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    81b0:	mov	r0, r9
    81b4:	mvn	r7, #0
    81b8:	bl	0 <free>
    81bc:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    81c0:	mov	r2, r6
    81c4:	movw	r1, #0
    81c8:	movt	r1, #0
    81cc:	mvn	r0, #0
    81d0:	bl	0 <coda_set_error>
    81d4:	b	7e40 <coda_cursor_read_float_partial_array+0x1b0>
    81d8:	mov	r0, r6
    81dc:	mvn	r7, #0
    81e0:	bl	0 <free>
    81e4:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    81e8:	bl	0 <coda_type_get_native_type_name>
    81ec:	mov	r2, r0
    81f0:	movw	r1, #0
    81f4:	movt	r1, #0
    81f8:	mvn	r0, #104	; 0x68
    81fc:	mvn	r7, #0
    8200:	bl	0 <coda_set_error>
    8204:	b	7dd4 <coda_cursor_read_float_partial_array+0x144>
    8208:	.word	0x00000504
    820c:	.word	0x000004a8

00008210 <coda_cursor_read_char_partial_array>:
    8210:	strd	r4, [sp, #-20]!	; 0xffffffec
    8214:	subs	r5, r0, #0
    8218:	strd	r6, [sp, #8]
    821c:	str	lr, [sp, #16]
    8220:	sub	sp, sp, #28
    8224:	beq	8420 <coda_cursor_read_char_partial_array+0x210>
    8228:	mov	r6, r1
    822c:	ldr	r1, [r5, #4]
    8230:	cmp	r1, #0
    8234:	ble	8420 <coda_cursor_read_char_partial_array+0x210>
    8238:	add	r1, r5, r1, lsl #4
    823c:	ldr	r4, [r1, #-8]
    8240:	cmp	r4, #0
    8244:	beq	8420 <coda_cursor_read_char_partial_array+0x210>
    8248:	cmp	r3, #0
    824c:	beq	8480 <coda_cursor_read_char_partial_array+0x270>
    8250:	ldr	r1, [r4]
    8254:	cmp	r1, #99	; 0x63
    8258:	ldrhi	r4, [r4, #4]
    825c:	ldr	r0, [r4, #8]
    8260:	cmp	r0, #1
    8264:	bne	8444 <coda_cursor_read_char_partial_array+0x234>
    8268:	ldr	r1, [pc, #564]	; 84a4 <coda_cursor_read_char_partial_array+0x294>
    826c:	mrc	15, 0, r7, cr13, cr0, {3}
    8270:	ldr	r1, [pc, r1]
    8274:	ldr	r1, [r7, r1]
    8278:	cmp	r1, #0
    827c:	bne	8370 <coda_cursor_read_char_partial_array+0x160>
    8280:	ldr	r0, [r4, #40]	; 0x28
    8284:	ldr	r1, [r0, #8]
    8288:	sub	r1, r1, #2
    828c:	cmp	r1, #1
    8290:	bls	832c <coda_cursor_read_char_partial_array+0x11c>
    8294:	ldr	r0, [r0, #12]
    8298:	cmp	r0, #10
    829c:	bne	8350 <coda_cursor_read_char_partial_array+0x140>
    82a0:	ldr	r1, [r5, #4]
    82a4:	add	r1, r5, r1, lsl #4
    82a8:	ldr	r1, [r1, #-8]
    82ac:	ldr	r1, [r1]
    82b0:	cmp	r1, #100	; 0x64
    82b4:	beq	8410 <coda_cursor_read_char_partial_array+0x200>
    82b8:	bls	82f0 <coda_cursor_read_char_partial_array+0xe0>
    82bc:	cmp	r1, #103	; 0x67
    82c0:	beq	8400 <coda_cursor_read_char_partial_array+0x1f0>
    82c4:	cmp	r1, #104	; 0x68
    82c8:	beq	83dc <coda_cursor_read_char_partial_array+0x1cc>
    82cc:	cmp	r1, #101	; 0x65
    82d0:	beq	83ec <coda_cursor_read_char_partial_array+0x1dc>
    82d4:	movw	r1, #0
    82d8:	movt	r1, #0
    82dc:	ldr	r3, [pc, #452]	; 84a8 <coda_cursor_read_char_partial_array+0x298>
    82e0:	movw	r0, #0
    82e4:	movt	r0, #0
    82e8:	movw	r2, #1748	; 0x6d4
    82ec:	bl	0 <__assert_fail>
    82f0:	cmp	r1, #0
    82f4:	beq	83cc <coda_cursor_read_char_partial_array+0x1bc>
    82f8:	cmp	r1, #1
    82fc:	bne	82d4 <coda_cursor_read_char_partial_array+0xc4>
    8300:	mov	r1, r6
    8304:	mov	r0, r5
    8308:	bl	0 <coda_bin_cursor_read_char_partial_array>
    830c:	adds	r0, r0, #0
    8310:	movne	r0, #1
    8314:	rsb	r0, r0, #0
    8318:	add	sp, sp, #28
    831c:	ldrd	r4, [sp]
    8320:	ldrd	r6, [sp, #8]
    8324:	add	sp, sp, #16
    8328:	pop	{pc}		; (ldr pc, [sp], #4)
    832c:	ldr	r1, [pc, #376]	; 84ac <coda_cursor_read_char_partial_array+0x29c>
    8330:	ldr	r1, [pc, r1]
    8334:	ldr	r1, [r7, r1]
    8338:	cmp	r1, #0
    833c:	beq	8294 <coda_cursor_read_char_partial_array+0x84>
    8340:	ldr	r1, [r0, #48]	; 0x30
    8344:	cmp	r1, #0
    8348:	movne	r0, #9
    834c:	beq	8294 <coda_cursor_read_char_partial_array+0x84>
    8350:	bl	0 <coda_type_get_native_type_name>
    8354:	mov	r2, r0
    8358:	movw	r1, #0
    835c:	movt	r1, #0
    8360:	mvn	r0, #104	; 0x68
    8364:	bl	0 <coda_set_error>
    8368:	mvn	r0, #0
    836c:	b	8318 <coda_cursor_read_char_partial_array+0x108>
    8370:	add	r1, sp, #20
    8374:	mov	r0, r5
    8378:	strd	r2, [sp, #8]
    837c:	bl	0 <coda_cursor_get_num_elements>
    8380:	cmp	r0, #0
    8384:	bne	8368 <coda_cursor_read_char_partial_array+0x158>
    8388:	cmp	r6, #0
    838c:	ldr	r1, [sp, #20]
    8390:	blt	8464 <coda_cursor_read_char_partial_array+0x254>
    8394:	cmp	r6, r1
    8398:	ldrd	r2, [sp, #8]
    839c:	bge	8464 <coda_cursor_read_char_partial_array+0x254>
    83a0:	add	r0, r6, r2
    83a4:	cmp	r0, r1
    83a8:	ble	8280 <coda_cursor_read_char_partial_array+0x70>
    83ac:	mov	r3, r2
    83b0:	mvn	r0, #106	; 0x6a
    83b4:	str	r1, [sp]
    83b8:	mov	r2, r6
    83bc:	movw	r1, #0
    83c0:	movt	r1, #0
    83c4:	bl	0 <coda_set_error>
    83c8:	b	8368 <coda_cursor_read_char_partial_array+0x158>
    83cc:	mov	r1, r6
    83d0:	mov	r0, r5
    83d4:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    83d8:	b	830c <coda_cursor_read_char_partial_array+0xfc>
    83dc:	mov	r1, r6
    83e0:	mov	r0, r5
    83e4:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    83e8:	b	830c <coda_cursor_read_char_partial_array+0xfc>
    83ec:	mvn	r0, #10
    83f0:	mov	r1, #0
    83f4:	bl	0 <coda_set_error>
    83f8:	mvn	r0, #0
    83fc:	b	8318 <coda_cursor_read_char_partial_array+0x108>
    8400:	mov	r1, r6
    8404:	mov	r0, r5
    8408:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    840c:	b	830c <coda_cursor_read_char_partial_array+0xfc>
    8410:	mov	r1, r6
    8414:	mov	r0, r5
    8418:	bl	0 <coda_mem_cursor_read_char_partial_array>
    841c:	b	830c <coda_cursor_read_char_partial_array+0xfc>
    8420:	mvn	r0, #99	; 0x63
    8424:	movw	r2, #0
    8428:	movt	r2, #0
    842c:	movw	r1, #0
    8430:	movt	r1, #0
    8434:	movw	r3, #5542	; 0x15a6
    8438:	bl	0 <coda_set_error>
    843c:	mvn	r0, #0
    8440:	b	8318 <coda_cursor_read_char_partial_array+0x108>
    8444:	bl	0 <coda_type_get_class_name>
    8448:	mov	r2, r0
    844c:	movw	r1, #0
    8450:	movt	r1, #0
    8454:	mvn	r0, #104	; 0x68
    8458:	bl	0 <coda_set_error>
    845c:	mvn	r0, #0
    8460:	b	8318 <coda_cursor_read_char_partial_array+0x108>
    8464:	mov	r3, r1
    8468:	mov	r2, r6
    846c:	movw	r1, #0
    8470:	movt	r1, #0
    8474:	mvn	r0, #106	; 0x6a
    8478:	bl	0 <coda_set_error>
    847c:	b	8368 <coda_cursor_read_char_partial_array+0x158>
    8480:	mvn	r0, #99	; 0x63
    8484:	movw	r2, #0
    8488:	movt	r2, #0
    848c:	movw	r1, #0
    8490:	movt	r1, #0
    8494:	movw	r3, #5547	; 0x15ab
    8498:	bl	0 <coda_set_error>
    849c:	mvn	r0, #0
    84a0:	b	8318 <coda_cursor_read_char_partial_array+0x108>
    84a4:	.word	0x0000022c
    84a8:	.word	0x00000274
    84ac:	.word	0x00000174

000084b0 <coda_cursor_read_complex_double_pair>:
    84b0:	subs	r3, r0, #0
    84b4:	str	r4, [sp, #-8]!
    84b8:	str	lr, [sp, #4]
    84bc:	beq	84f4 <coda_cursor_read_complex_double_pair+0x44>
    84c0:	ldr	r2, [r3, #4]
    84c4:	cmp	r2, #0
    84c8:	ble	84f4 <coda_cursor_read_complex_double_pair+0x44>
    84cc:	add	r3, r3, r2, lsl #4
    84d0:	ldr	r3, [r3, #-8]
    84d4:	cmp	r3, #0
    84d8:	beq	84f4 <coda_cursor_read_complex_double_pair+0x44>
    84dc:	cmp	r1, #0
    84e0:	beq	8520 <coda_cursor_read_complex_double_pair+0x70>
    84e4:	ldr	r4, [sp]
    84e8:	ldr	lr, [sp, #4]
    84ec:	add	sp, sp, #8
    84f0:	b	39fc <read_double_pair>
    84f4:	movw	r2, #0
    84f8:	movt	r2, #0
    84fc:	movw	r1, #0
    8500:	movt	r1, #0
    8504:	movw	r3, #5617	; 0x15f1
    8508:	mvn	r0, #99	; 0x63
    850c:	bl	0 <coda_set_error>
    8510:	ldr	r4, [sp]
    8514:	add	sp, sp, #4
    8518:	mvn	r0, #0
    851c:	pop	{pc}		; (ldr pc, [sp], #4)
    8520:	movw	r2, #0
    8524:	movt	r2, #0
    8528:	movw	r1, #0
    852c:	movt	r1, #0
    8530:	movw	r3, #5622	; 0x15f6
    8534:	mvn	r0, #99	; 0x63
    8538:	bl	0 <coda_set_error>
    853c:	b	8510 <coda_cursor_read_complex_double_pair+0x60>

00008540 <coda_cursor_read_complex_double_pairs_array>:
    8540:	cmp	r0, #0
    8544:	push	{lr}		; (str lr, [sp, #-4]!)
    8548:	sub	sp, sp, #12
    854c:	beq	85d4 <coda_cursor_read_complex_double_pairs_array+0x94>
    8550:	ldr	r3, [r0, #4]
    8554:	cmp	r3, #0
    8558:	ble	85d4 <coda_cursor_read_complex_double_pairs_array+0x94>
    855c:	add	r3, r0, r3, lsl #4
    8560:	ldr	r3, [r3, #-8]
    8564:	cmp	r3, #0
    8568:	beq	85d4 <coda_cursor_read_complex_double_pairs_array+0x94>
    856c:	cmp	r1, #0
    8570:	beq	85f8 <coda_cursor_read_complex_double_pairs_array+0xb8>
    8574:	mov	ip, r2
    8578:	ldr	r2, [r3]
    857c:	cmp	r2, #99	; 0x63
    8580:	ldrhi	r3, [r3, #4]
    8584:	ldr	r3, [r3, #8]
    8588:	cmp	r3, #1
    858c:	bne	85b0 <coda_cursor_read_complex_double_pairs_array+0x70>
    8590:	mov	r2, r1
    8594:	mov	r3, #16
    8598:	str	ip, [sp]
    859c:	movw	r1, #0
    85a0:	movt	r1, #0
    85a4:	bl	1710 <read_array>
    85a8:	add	sp, sp, #12
    85ac:	pop	{pc}		; (ldr pc, [sp], #4)
    85b0:	mov	r0, r3
    85b4:	bl	0 <coda_type_get_class_name>
    85b8:	mov	r2, r0
    85bc:	movw	r1, #0
    85c0:	movt	r1, #0
    85c4:	mvn	r0, #104	; 0x68
    85c8:	bl	0 <coda_set_error>
    85cc:	mvn	r0, #0
    85d0:	b	85a8 <coda_cursor_read_complex_double_pairs_array+0x68>
    85d4:	mvn	r0, #99	; 0x63
    85d8:	movw	r2, #0
    85dc:	movt	r2, #0
    85e0:	movw	r1, #0
    85e4:	movt	r1, #0
    85e8:	movw	r3, #5649	; 0x1611
    85ec:	bl	0 <coda_set_error>
    85f0:	mvn	r0, #0
    85f4:	b	85a8 <coda_cursor_read_complex_double_pairs_array+0x68>
    85f8:	mvn	r0, #99	; 0x63
    85fc:	movw	r2, #0
    8600:	movt	r2, #0
    8604:	movw	r1, #0
    8608:	movt	r1, #0
    860c:	movw	r3, #5654	; 0x1616
    8610:	bl	0 <coda_set_error>
    8614:	mvn	r0, #0
    8618:	b	85a8 <coda_cursor_read_complex_double_pairs_array+0x68>

0000861c <coda_cursor_read_complex_double_split>:
    861c:	strd	r4, [sp, #-20]!	; 0xffffffec
    8620:	mov	r5, r1
    8624:	mov	r4, r2
    8628:	strd	r6, [sp, #8]
    862c:	str	lr, [sp, #16]
    8630:	sub	sp, sp, #20
    8634:	mov	r1, sp
    8638:	bl	84b0 <coda_cursor_read_complex_double_pair>
    863c:	cmp	r0, #0
    8640:	bne	8668 <coda_cursor_read_complex_double_split+0x4c>
    8644:	ldrd	r6, [sp]
    8648:	ldrd	r2, [sp, #8]
    864c:	strd	r6, [r5]
    8650:	strd	r2, [r4]
    8654:	add	sp, sp, #20
    8658:	ldrd	r4, [sp]
    865c:	ldrd	r6, [sp, #8]
    8660:	add	sp, sp, #16
    8664:	pop	{pc}		; (ldr pc, [sp], #4)
    8668:	mvn	r0, #0
    866c:	b	8654 <coda_cursor_read_complex_double_split+0x38>

00008670 <coda_cursor_read_complex_double_split_array>:
    8670:	cmp	r0, #0
    8674:	str	r4, [sp, #-8]!
    8678:	str	lr, [sp, #4]
    867c:	beq	8700 <coda_cursor_read_complex_double_split_array+0x90>
    8680:	ldr	ip, [r0, #4]
    8684:	cmp	ip, #0
    8688:	ble	8700 <coda_cursor_read_complex_double_split_array+0x90>
    868c:	add	ip, r0, ip, lsl #4
    8690:	ldr	ip, [ip, #-8]
    8694:	cmp	ip, #0
    8698:	beq	8700 <coda_cursor_read_complex_double_split_array+0x90>
    869c:	cmp	r1, #0
    86a0:	beq	8740 <coda_cursor_read_complex_double_split_array+0xd0>
    86a4:	cmp	r2, #0
    86a8:	beq	8720 <coda_cursor_read_complex_double_split_array+0xb0>
    86ac:	ldr	lr, [ip]
    86b0:	cmp	lr, #99	; 0x63
    86b4:	ldrhi	ip, [ip, #4]
    86b8:	ldr	ip, [ip, #8]
    86bc:	cmp	ip, #1
    86c0:	bne	86d4 <coda_cursor_read_complex_double_split_array+0x64>
    86c4:	ldr	r4, [sp]
    86c8:	ldr	lr, [sp, #4]
    86cc:	add	sp, sp, #8
    86d0:	b	3acc <read_split_array.constprop.2>
    86d4:	mov	r0, ip
    86d8:	bl	0 <coda_type_get_class_name>
    86dc:	mov	r2, r0
    86e0:	movw	r1, #0
    86e4:	movt	r1, #0
    86e8:	mvn	r0, #104	; 0x68
    86ec:	bl	0 <coda_set_error>
    86f0:	ldr	r4, [sp]
    86f4:	add	sp, sp, #4
    86f8:	mvn	r0, #0
    86fc:	pop	{pc}		; (ldr pc, [sp], #4)
    8700:	movw	r2, #0
    8704:	movt	r2, #0
    8708:	movw	r1, #0
    870c:	movt	r1, #0
    8710:	movw	r3, #5713	; 0x1651
    8714:	mvn	r0, #99	; 0x63
    8718:	bl	0 <coda_set_error>
    871c:	b	86f0 <coda_cursor_read_complex_double_split_array+0x80>
    8720:	movw	r2, #0
    8724:	movt	r2, #0
    8728:	movw	r1, #0
    872c:	movt	r1, #0
    8730:	movw	r3, #5723	; 0x165b
    8734:	mvn	r0, #99	; 0x63
    8738:	bl	0 <coda_set_error>
    873c:	b	86f0 <coda_cursor_read_complex_double_split_array+0x80>
    8740:	movw	r2, #0
    8744:	movt	r2, #0
    8748:	movw	r1, #0
    874c:	movt	r1, #0
    8750:	movw	r3, #5718	; 0x1656
    8754:	mvn	r0, #99	; 0x63
    8758:	bl	0 <coda_set_error>
    875c:	b	86f0 <coda_cursor_read_complex_double_split_array+0x80>
