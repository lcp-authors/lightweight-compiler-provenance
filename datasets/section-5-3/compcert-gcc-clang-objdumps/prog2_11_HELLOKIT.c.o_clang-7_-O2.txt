
../compcert-repos/prog2/CMakeFiles/0.11.2.dir/Aula00_Conceitos_base/11_HELLOKIT.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #100	; 0x64
   c:	add	r4, sp, #64	; 0x40
  10:	vmov.i32	q8, #0	; 0x00000000
  14:	mov	r0, #10
  18:	mov	r1, r4
  1c:	vst1.64	{d16-d17}, [r1], r0
  20:	movw	r0, #0
  24:	vst1.16	{d16-d17}, [r1]
  28:	movt	r0, #0
  2c:	sub	r1, fp, #38	; 0x26
  30:	bl	0 <__isoc99_scanf>
  34:	ldrb	r0, [fp, #-38]	; 0xffffffda
  38:	cmp	r0, #46	; 0x2e
  3c:	beq	15c <main+0x15c>
  40:	add	r5, sp, #12
  44:	mov	r9, #0
  48:	sub	r7, fp, #38	; 0x26
  4c:	add	r0, r5, #1
  50:	str	r0, [sp, #4]
  54:	add	r0, sp, #38	; 0x26
  58:	add	r0, r0, #1
  5c:	str	r0, [sp]
  60:	movw	r0, #0
  64:	add	r1, sp, #8
  68:	movt	r0, #0
  6c:	bl	0 <__isoc99_scanf>
  70:	ldr	r6, [sp, #8]
  74:	strb	r9, [sp, #64]	; 0x40
  78:	cmp	r6, #1
  7c:	blt	94 <main+0x94>
  80:	mov	r0, r4
  84:	mov	r1, r7
  88:	bl	0 <strcat>
  8c:	subs	r6, r6, #1
  90:	bne	80 <main+0x80>
  94:	mov	r0, r4
  98:	bl	0 <strlen>
  9c:	add	r0, r4, r0
  a0:	ldrb	r0, [r0, #-1]
  a4:	strb	r0, [sp, #38]	; 0x26
  a8:	mov	r0, r4
  ac:	bl	0 <strlen>
  b0:	mov	r8, r0
  b4:	cmp	r0, #2
  b8:	ldr	r0, [sp]
  bc:	bcc	d8 <main+0xd8>
  c0:	ldr	r0, [sp]
  c4:	sub	r2, r8, #1
  c8:	mov	r1, r4
  cc:	bl	0 <memcpy>
  d0:	add	r0, sp, #38	; 0x26
  d4:	add	r0, r0, r8
  d8:	strb	r9, [r0]
  dc:	mov	r0, r4
  e0:	add	r1, sp, #38	; 0x26
  e4:	bl	0 <strcmp>
  e8:	mov	sl, r0
  ec:	mov	r0, r4
  f0:	bl	0 <puts>
  f4:	mov	r0, r5
  f8:	mov	r1, r4
  fc:	bl	0 <strcpy>
 100:	ldrb	r6, [sp, #12]
 104:	mov	r0, r5
 108:	bl	0 <strlen>
 10c:	mov	r8, r0
 110:	sub	r2, r0, #1
 114:	mov	r0, #1
 118:	cmp	r8, #2
 11c:	strb	r6, [r4, r2]
 120:	bcc	134 <main+0x134>
 124:	ldr	r1, [sp, #4]
 128:	mov	r0, r4
 12c:	bl	0 <memcpy>
 130:	mov	r0, r8
 134:	cmp	sl, #0
 138:	strb	r9, [r4, r0]
 13c:	bne	dc <main+0xdc>
 140:	movw	r0, #0
 144:	mov	r1, r7
 148:	movt	r0, #0
 14c:	bl	0 <__isoc99_scanf>
 150:	ldrb	r0, [fp, #-38]	; 0xffffffda
 154:	cmp	r0, #46	; 0x2e
 158:	bne	60 <main+0x60>
 15c:	mov	r0, #0
 160:	sub	sp, fp, #28
 164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000168 <StringSet>:
 168:	push	{r4, r5, r6, sl, fp, lr}
 16c:	add	fp, sp, #16
 170:	mov	r6, r0
 174:	mov	r0, #0
 178:	cmp	r2, #1
 17c:	strb	r0, [r1]
 180:	poplt	{r4, r5, r6, sl, fp, pc}
 184:	mov	r4, r2
 188:	mov	r5, r1
 18c:	mov	r0, r5
 190:	mov	r1, r6
 194:	bl	0 <strcat>
 198:	subs	r4, r4, #1
 19c:	bne	18c <StringSet+0x24>
 1a0:	pop	{r4, r5, r6, sl, fp, pc}

000001a4 <R_ShiftString>:
 1a4:	push	{r4, r5, r6, r7, fp, lr}
 1a8:	add	fp, sp, #16
 1ac:	mov	r4, r1
 1b0:	mov	r5, r0
 1b4:	bl	0 <strlen>
 1b8:	add	r0, r5, r0
 1bc:	ldrb	r0, [r0, #-1]
 1c0:	strb	r0, [r4]
 1c4:	mov	r0, r5
 1c8:	bl	0 <strlen>
 1cc:	mov	r1, #1
 1d0:	cmp	r0, #2
 1d4:	bcc	208 <R_ShiftString+0x64>
 1d8:	add	r6, r4, #1
 1dc:	mov	r7, #0
 1e0:	ldrb	r0, [r5, r7]
 1e4:	strb	r0, [r6, r7]
 1e8:	mov	r0, r5
 1ec:	bl	0 <strlen>
 1f0:	add	r2, r7, #2
 1f4:	add	r1, r7, #1
 1f8:	cmp	r2, r0
 1fc:	mov	r7, r1
 200:	bcc	1e0 <R_ShiftString+0x3c>
 204:	add	r1, r1, #1
 208:	mov	r0, #0
 20c:	strb	r0, [r4, r1]
 210:	pop	{r4, r5, r6, r7, fp, pc}

00000214 <L_ShiftString>:
 214:	push	{r4, r5, r6, sl, fp, lr}
 218:	add	fp, sp, #16
 21c:	ldrb	r6, [r0]
 220:	mov	r4, r1
 224:	mov	r5, r0
 228:	bl	0 <strlen>
 22c:	add	r0, r4, r0
 230:	strb	r6, [r0, #-1]
 234:	mov	r0, r5
 238:	bl	0 <strlen>
 23c:	mov	r1, #1
 240:	cmp	r0, #2
 244:	bcc	278 <L_ShiftString+0x64>
 248:	mov	r6, #0
 24c:	add	r0, r5, r6
 250:	ldrb	r0, [r0, #1]
 254:	strb	r0, [r4, r6]
 258:	mov	r0, r5
 25c:	bl	0 <strlen>
 260:	add	r2, r6, #2
 264:	add	r1, r6, #1
 268:	cmp	r2, r0
 26c:	mov	r6, r1
 270:	bcc	24c <L_ShiftString+0x38>
 274:	add	r1, r1, #1
 278:	mov	r0, #0
 27c:	strb	r0, [r4, r1]
 280:	pop	{r4, r5, r6, sl, fp, pc}
