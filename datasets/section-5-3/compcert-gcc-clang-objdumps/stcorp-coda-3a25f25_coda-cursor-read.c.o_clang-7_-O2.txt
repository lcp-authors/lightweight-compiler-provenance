
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cursor-read.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cursor_read_int8>:
       0:	push	{r4, sl, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	60 <coda_cursor_read_int8+0x60>
      10:	mov	r2, r0
      14:	ldr	r0, [r0, #4]
      18:	cmp	r0, #1
      1c:	blt	60 <coda_cursor_read_int8+0x60>
      20:	add	r0, r2, r0, lsl #4
      24:	ldr	r3, [r0, #-8]
      28:	cmp	r3, #0
      2c:	beq	60 <coda_cursor_read_int8+0x60>
      30:	cmp	r1, #0
      34:	beq	84 <coda_cursor_read_int8+0x84>
      38:	ldr	r0, [r3]
      3c:	cmp	r0, #99	; 0x63
      40:	ldrhi	r3, [r3, #4]
      44:	ldr	r4, [r3, #8]
      48:	cmp	r4, #2
      4c:	bne	9c <coda_cursor_read_int8+0x9c>
      50:	ldr	r0, [pc, #184]	; 110 <coda_cursor_read_int8+0x110>
      54:	ldr	r4, [pc, r0]
      58:	bl	0 <__aeabi_read_tp>
      5c:	b	b0 <coda_cursor_read_int8+0xb0>
      60:	movw	r1, #0
      64:	movw	r2, #0
      68:	mvn	r0, #99	; 0x63
      6c:	movw	r3, #1773	; 0x6ed
      70:	movt	r1, #0
      74:	movt	r2, #0
      78:	bl	0 <coda_set_error>
      7c:	mvn	r0, #0
      80:	pop	{r4, sl, fp, pc}
      84:	movw	r1, #0
      88:	movw	r2, #0
      8c:	mvn	r0, #99	; 0x63
      90:	movw	r3, #1778	; 0x6f2
      94:	movt	r1, #0
      98:	b	74 <coda_cursor_read_int8+0x74>
      9c:	bl	0 <__aeabi_read_tp>
      a0:	cmp	r4, #3
      a4:	bne	cc <coda_cursor_read_int8+0xcc>
      a8:	ldr	r4, [pc, #92]	; 10c <coda_cursor_read_int8+0x10c>
      ac:	ldr	r4, [pc, r4]
      b0:	ldr	r0, [r0, r4]
      b4:	cmp	r0, #0
      b8:	beq	cc <coda_cursor_read_int8+0xcc>
      bc:	ldr	r4, [r3, #48]	; 0x30
      c0:	mov	r0, #9
      c4:	cmp	r4, #0
      c8:	bne	d8 <coda_cursor_read_int8+0xd8>
      cc:	ldr	r0, [r3, #12]
      d0:	cmp	r0, #0
      d4:	beq	f8 <coda_cursor_read_int8+0xf8>
      d8:	bl	0 <coda_type_get_native_type_name>
      dc:	movw	r1, #0
      e0:	mov	r2, r0
      e4:	mvn	r0, #104	; 0x68
      e8:	movt	r1, #0
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r0, #0
      f4:	pop	{r4, sl, fp, pc}
      f8:	mov	r0, r2
      fc:	bl	114 <read_int8>
     100:	cmp	r0, #0
     104:	mvnne	r0, #0
     108:	pop	{r4, sl, fp, pc}
     10c:	.word	0x00000058
     110:	.word	0x000000b4

00000114 <read_int8>:
     114:	push	{fp, lr}
     118:	mov	fp, sp
     11c:	ldr	r2, [r0, #4]
     120:	add	r2, r0, r2, lsl #4
     124:	ldr	r2, [r2, #-8]
     128:	ldr	r2, [r2]
     12c:	sub	r3, r2, #100	; 0x64
     130:	cmp	r3, #4
     134:	bhi	15c <read_int8+0x48>
     138:	add	r2, pc, #0
     13c:	ldr	pc, [r2, r3, lsl #2]
     140:	.word	0x00000154
     144:	.word	0x0000018c
     148:	.word	0x0000017c
     14c:	.word	0x00000184
     150:	.word	0x00000174
     154:	pop	{fp, lr}
     158:	b	0 <coda_mem_cursor_read_int8>
     15c:	cmp	r2, #1
     160:	beq	1a0 <read_int8+0x8c>
     164:	cmp	r2, #0
     168:	bne	1a8 <read_int8+0x94>
     16c:	pop	{fp, lr}
     170:	b	0 <coda_ascii_cursor_read_int8>
     174:	pop	{fp, lr}
     178:	b	0 <coda_netcdf_cursor_read_int8>
     17c:	mvn	r0, #12
     180:	b	190 <read_int8+0x7c>
     184:	pop	{fp, lr}
     188:	b	0 <coda_cdf_cursor_read_int8>
     18c:	mvn	r0, #10
     190:	mov	r1, #0
     194:	bl	0 <coda_set_error>
     198:	mvn	r0, #0
     19c:	pop	{fp, pc}
     1a0:	pop	{fp, lr}
     1a4:	b	0 <coda_bin_cursor_read_int8>
     1a8:	movw	r0, #0
     1ac:	movw	r1, #0
     1b0:	movw	r3, #0
     1b4:	movw	r2, #359	; 0x167
     1b8:	movt	r0, #0
     1bc:	movt	r1, #0
     1c0:	movt	r3, #0
     1c4:	bl	0 <__assert_fail>

000001c8 <coda_cursor_read_uint8>:
     1c8:	push	{r4, sl, fp, lr}
     1cc:	add	fp, sp, #8
     1d0:	cmp	r0, #0
     1d4:	beq	228 <coda_cursor_read_uint8+0x60>
     1d8:	mov	r2, r0
     1dc:	ldr	r0, [r0, #4]
     1e0:	cmp	r0, #1
     1e4:	blt	228 <coda_cursor_read_uint8+0x60>
     1e8:	add	r0, r2, r0, lsl #4
     1ec:	ldr	r3, [r0, #-8]
     1f0:	cmp	r3, #0
     1f4:	beq	228 <coda_cursor_read_uint8+0x60>
     1f8:	cmp	r1, #0
     1fc:	beq	24c <coda_cursor_read_uint8+0x84>
     200:	ldr	r0, [r3]
     204:	cmp	r0, #99	; 0x63
     208:	ldrhi	r3, [r3, #4]
     20c:	ldr	r4, [r3, #8]
     210:	cmp	r4, #2
     214:	bne	264 <coda_cursor_read_uint8+0x9c>
     218:	ldr	r0, [pc, #184]	; 2d8 <coda_cursor_read_uint8+0x110>
     21c:	ldr	r4, [pc, r0]
     220:	bl	0 <__aeabi_read_tp>
     224:	b	278 <coda_cursor_read_uint8+0xb0>
     228:	movw	r1, #0
     22c:	movw	r2, #0
     230:	mvn	r0, #99	; 0x63
     234:	movw	r3, #1820	; 0x71c
     238:	movt	r1, #0
     23c:	movt	r2, #0
     240:	bl	0 <coda_set_error>
     244:	mvn	r0, #0
     248:	pop	{r4, sl, fp, pc}
     24c:	movw	r1, #0
     250:	movw	r2, #0
     254:	mvn	r0, #99	; 0x63
     258:	movw	r3, #1825	; 0x721
     25c:	movt	r1, #0
     260:	b	23c <coda_cursor_read_uint8+0x74>
     264:	bl	0 <__aeabi_read_tp>
     268:	cmp	r4, #3
     26c:	bne	294 <coda_cursor_read_uint8+0xcc>
     270:	ldr	r4, [pc, #92]	; 2d4 <coda_cursor_read_uint8+0x10c>
     274:	ldr	r4, [pc, r4]
     278:	ldr	r0, [r0, r4]
     27c:	cmp	r0, #0
     280:	beq	294 <coda_cursor_read_uint8+0xcc>
     284:	ldr	r4, [r3, #48]	; 0x30
     288:	mov	r0, #9
     28c:	cmp	r4, #0
     290:	bne	2b4 <coda_cursor_read_uint8+0xec>
     294:	ldr	r0, [r3, #12]
     298:	cmp	r0, #1
     29c:	bne	2b4 <coda_cursor_read_uint8+0xec>
     2a0:	mov	r0, r2
     2a4:	bl	2dc <read_uint8>
     2a8:	cmp	r0, #0
     2ac:	mvnne	r0, #0
     2b0:	pop	{r4, sl, fp, pc}
     2b4:	bl	0 <coda_type_get_native_type_name>
     2b8:	movw	r1, #0
     2bc:	mov	r2, r0
     2c0:	mvn	r0, #104	; 0x68
     2c4:	movt	r1, #0
     2c8:	bl	0 <coda_set_error>
     2cc:	mvn	r0, #0
     2d0:	pop	{r4, sl, fp, pc}
     2d4:	.word	0x00000058
     2d8:	.word	0x000000b4

000002dc <read_uint8>:
     2dc:	push	{fp, lr}
     2e0:	mov	fp, sp
     2e4:	ldr	r2, [r0, #4]
     2e8:	add	r2, r0, r2, lsl #4
     2ec:	ldr	r2, [r2, #-8]
     2f0:	ldr	r2, [r2]
     2f4:	sub	r3, r2, #100	; 0x64
     2f8:	cmp	r3, #3
     2fc:	bhi	320 <read_uint8+0x44>
     300:	add	r2, pc, #0
     304:	ldr	pc, [r2, r3, lsl #2]
     308:	.word	0x00000318
     30c:	.word	0x00000340
     310:	.word	0x00000338
     314:	.word	0x00000354
     318:	pop	{fp, lr}
     31c:	b	0 <coda_mem_cursor_read_uint8>
     320:	cmp	r2, #1
     324:	beq	35c <read_uint8+0x80>
     328:	cmp	r2, #0
     32c:	bne	364 <read_uint8+0x88>
     330:	pop	{fp, lr}
     334:	b	0 <coda_ascii_cursor_read_uint8>
     338:	mvn	r0, #12
     33c:	b	344 <read_uint8+0x68>
     340:	mvn	r0, #10
     344:	mov	r1, #0
     348:	bl	0 <coda_set_error>
     34c:	mvn	r0, #0
     350:	pop	{fp, pc}
     354:	pop	{fp, lr}
     358:	b	0 <coda_cdf_cursor_read_uint8>
     35c:	pop	{fp, lr}
     360:	b	0 <coda_bin_cursor_read_uint8>
     364:	movw	r0, #0
     368:	movw	r1, #0
     36c:	movw	r3, #0
     370:	movw	r2, #394	; 0x18a
     374:	movt	r0, #0
     378:	movt	r1, #0
     37c:	movt	r3, #0
     380:	bl	0 <__assert_fail>

00000384 <coda_cursor_read_int16>:
     384:	push	{r4, sl, fp, lr}
     388:	add	fp, sp, #8
     38c:	sub	sp, sp, #8
     390:	cmp	r0, #0
     394:	beq	3ec <coda_cursor_read_int16+0x68>
     398:	mov	r2, r0
     39c:	ldr	r0, [r0, #4]
     3a0:	cmp	r0, #1
     3a4:	blt	3ec <coda_cursor_read_int16+0x68>
     3a8:	add	r0, r2, r0, lsl #4
     3ac:	mov	r4, r1
     3b0:	ldr	r1, [r0, #-8]
     3b4:	cmp	r1, #0
     3b8:	beq	3ec <coda_cursor_read_int16+0x68>
     3bc:	cmp	r4, #0
     3c0:	beq	414 <coda_cursor_read_int16+0x90>
     3c4:	ldr	r0, [r1]
     3c8:	cmp	r0, #99	; 0x63
     3cc:	ldrhi	r1, [r1, #4]
     3d0:	ldr	r3, [r1, #8]
     3d4:	cmp	r3, #2
     3d8:	bne	42c <coda_cursor_read_int16+0xa8>
     3dc:	ldr	r0, [pc, #284]	; 500 <coda_cursor_read_int16+0x17c>
     3e0:	ldr	r3, [pc, r0]
     3e4:	bl	0 <__aeabi_read_tp>
     3e8:	b	440 <coda_cursor_read_int16+0xbc>
     3ec:	movw	r1, #0
     3f0:	movw	r2, #0
     3f4:	mvn	r0, #99	; 0x63
     3f8:	movw	r3, #1869	; 0x74d
     3fc:	movt	r1, #0
     400:	movt	r2, #0
     404:	bl	0 <coda_set_error>
     408:	mvn	r0, #0
     40c:	sub	sp, fp, #8
     410:	pop	{r4, sl, fp, pc}
     414:	movw	r1, #0
     418:	movw	r2, #0
     41c:	mvn	r0, #99	; 0x63
     420:	movw	r3, #1874	; 0x752
     424:	movt	r1, #0
     428:	b	400 <coda_cursor_read_int16+0x7c>
     42c:	bl	0 <__aeabi_read_tp>
     430:	cmp	r3, #3
     434:	bne	45c <coda_cursor_read_int16+0xd8>
     438:	ldr	r3, [pc, #188]	; 4fc <coda_cursor_read_int16+0x178>
     43c:	ldr	r3, [pc, r3]
     440:	ldr	r0, [r0, r3]
     444:	cmp	r0, #0
     448:	beq	45c <coda_cursor_read_int16+0xd8>
     44c:	ldr	r3, [r1, #48]	; 0x30
     450:	mov	r0, #9
     454:	cmp	r3, #0
     458:	bne	494 <coda_cursor_read_int16+0x110>
     45c:	ldr	r0, [r1, #12]
     460:	cmp	r0, #2
     464:	beq	4b0 <coda_cursor_read_int16+0x12c>
     468:	cmp	r0, #1
     46c:	beq	4d4 <coda_cursor_read_int16+0x150>
     470:	cmp	r0, #0
     474:	bne	494 <coda_cursor_read_int16+0x110>
     478:	add	r1, sp, #7
     47c:	mov	r0, r2
     480:	bl	114 <read_int8>
     484:	cmp	r0, #0
     488:	bne	408 <coda_cursor_read_int16+0x84>
     48c:	ldrsb	r0, [sp, #7]
     490:	b	4ec <coda_cursor_read_int16+0x168>
     494:	bl	0 <coda_type_get_native_type_name>
     498:	movw	r1, #0
     49c:	mov	r2, r0
     4a0:	mvn	r0, #104	; 0x68
     4a4:	movt	r1, #0
     4a8:	bl	0 <coda_set_error>
     4ac:	b	408 <coda_cursor_read_int16+0x84>
     4b0:	mov	r0, r2
     4b4:	mov	r1, r4
     4b8:	bl	504 <read_int16>
     4bc:	mov	r1, r0
     4c0:	mvn	r0, #0
     4c4:	cmp	r1, #0
     4c8:	moveq	r0, #0
     4cc:	sub	sp, fp, #8
     4d0:	pop	{r4, sl, fp, pc}
     4d4:	add	r1, sp, #6
     4d8:	mov	r0, r2
     4dc:	bl	2dc <read_uint8>
     4e0:	cmp	r0, #0
     4e4:	bne	408 <coda_cursor_read_int16+0x84>
     4e8:	ldrb	r0, [sp, #6]
     4ec:	strh	r0, [r4]
     4f0:	mov	r0, #0
     4f4:	sub	sp, fp, #8
     4f8:	pop	{r4, sl, fp, pc}
     4fc:	.word	0x000000b8
     500:	.word	0x00000118

00000504 <read_int16>:
     504:	push	{fp, lr}
     508:	mov	fp, sp
     50c:	ldr	r2, [r0, #4]
     510:	add	r2, r0, r2, lsl #4
     514:	ldr	r2, [r2, #-8]
     518:	ldr	r3, [r2]
     51c:	sub	r2, r3, #100	; 0x64
     520:	cmp	r2, #5
     524:	bhi	550 <read_int16+0x4c>
     528:	add	r3, pc, #0
     52c:	ldr	pc, [r3, r2, lsl #2]
     530:	.word	0x00000548
     534:	.word	0x00000584
     538:	.word	0x0000057c
     53c:	.word	0x0000059c
     540:	.word	0x00000574
     544:	.word	0x000005a4
     548:	pop	{fp, lr}
     54c:	b	0 <coda_mem_cursor_read_int16>
     550:	cmp	r3, #1
     554:	beq	56c <read_int16+0x68>
     558:	mov	r2, #0
     55c:	cmp	r3, #0
     560:	bne	594 <read_int16+0x90>
     564:	pop	{fp, lr}
     568:	b	0 <coda_ascii_cursor_read_int16>
     56c:	pop	{fp, lr}
     570:	b	0 <coda_bin_cursor_read_int16>
     574:	pop	{fp, lr}
     578:	b	0 <coda_netcdf_cursor_read_int16>
     57c:	mvn	r0, #12
     580:	b	588 <read_int16+0x84>
     584:	mvn	r0, #10
     588:	mov	r1, #0
     58c:	bl	0 <coda_set_error>
     590:	mvn	r2, #0
     594:	mov	r0, r2
     598:	pop	{fp, pc}
     59c:	pop	{fp, lr}
     5a0:	b	0 <coda_cdf_cursor_read_int16>
     5a4:	movw	r0, #0
     5a8:	movw	r1, #0
     5ac:	movw	r3, #0
     5b0:	movw	r2, #427	; 0x1ab
     5b4:	movt	r0, #0
     5b8:	movt	r1, #0
     5bc:	movt	r3, #0
     5c0:	bl	0 <__assert_fail>

000005c4 <coda_cursor_read_uint16>:
     5c4:	push	{r4, sl, fp, lr}
     5c8:	add	fp, sp, #8
     5cc:	sub	sp, sp, #8
     5d0:	cmp	r0, #0
     5d4:	beq	62c <coda_cursor_read_uint16+0x68>
     5d8:	mov	r2, r0
     5dc:	ldr	r0, [r0, #4]
     5e0:	cmp	r0, #1
     5e4:	blt	62c <coda_cursor_read_uint16+0x68>
     5e8:	add	r0, r2, r0, lsl #4
     5ec:	mov	r4, r1
     5f0:	ldr	r1, [r0, #-8]
     5f4:	cmp	r1, #0
     5f8:	beq	62c <coda_cursor_read_uint16+0x68>
     5fc:	cmp	r4, #0
     600:	beq	654 <coda_cursor_read_uint16+0x90>
     604:	ldr	r0, [r1]
     608:	cmp	r0, #99	; 0x63
     60c:	ldrhi	r1, [r1, #4]
     610:	ldr	r3, [r1, #8]
     614:	cmp	r3, #2
     618:	bne	66c <coda_cursor_read_uint16+0xa8>
     61c:	ldr	r0, [pc, #248]	; 71c <coda_cursor_read_uint16+0x158>
     620:	ldr	r3, [pc, r0]
     624:	bl	0 <__aeabi_read_tp>
     628:	b	680 <coda_cursor_read_uint16+0xbc>
     62c:	movw	r1, #0
     630:	movw	r2, #0
     634:	mvn	r0, #99	; 0x63
     638:	movw	r3, #1939	; 0x793
     63c:	movt	r1, #0
     640:	movt	r2, #0
     644:	bl	0 <coda_set_error>
     648:	mvn	r0, #0
     64c:	sub	sp, fp, #8
     650:	pop	{r4, sl, fp, pc}
     654:	movw	r1, #0
     658:	movw	r2, #0
     65c:	mvn	r0, #99	; 0x63
     660:	movw	r3, #1944	; 0x798
     664:	movt	r1, #0
     668:	b	640 <coda_cursor_read_uint16+0x7c>
     66c:	bl	0 <__aeabi_read_tp>
     670:	cmp	r3, #3
     674:	bne	69c <coda_cursor_read_uint16+0xd8>
     678:	ldr	r3, [pc, #152]	; 718 <coda_cursor_read_uint16+0x154>
     67c:	ldr	r3, [pc, r3]
     680:	ldr	r0, [r0, r3]
     684:	cmp	r0, #0
     688:	beq	69c <coda_cursor_read_uint16+0xd8>
     68c:	ldr	r3, [r1, #48]	; 0x30
     690:	mov	r0, #9
     694:	cmp	r3, #0
     698:	bne	6d8 <coda_cursor_read_uint16+0x114>
     69c:	ldr	r0, [r1, #12]
     6a0:	cmp	r0, #3
     6a4:	beq	6f4 <coda_cursor_read_uint16+0x130>
     6a8:	cmp	r0, #1
     6ac:	bne	6d8 <coda_cursor_read_uint16+0x114>
     6b0:	add	r1, sp, #7
     6b4:	mov	r0, r2
     6b8:	bl	2dc <read_uint8>
     6bc:	cmp	r0, #0
     6c0:	bne	648 <coda_cursor_read_uint16+0x84>
     6c4:	ldrb	r0, [sp, #7]
     6c8:	strh	r0, [r4]
     6cc:	mov	r0, #0
     6d0:	sub	sp, fp, #8
     6d4:	pop	{r4, sl, fp, pc}
     6d8:	bl	0 <coda_type_get_native_type_name>
     6dc:	movw	r1, #0
     6e0:	mov	r2, r0
     6e4:	mvn	r0, #104	; 0x68
     6e8:	movt	r1, #0
     6ec:	bl	0 <coda_set_error>
     6f0:	b	648 <coda_cursor_read_uint16+0x84>
     6f4:	mov	r0, r2
     6f8:	mov	r1, r4
     6fc:	bl	720 <read_uint16>
     700:	mov	r1, r0
     704:	mvn	r0, #0
     708:	cmp	r1, #0
     70c:	moveq	r0, #0
     710:	sub	sp, fp, #8
     714:	pop	{r4, sl, fp, pc}
     718:	.word	0x00000094
     71c:	.word	0x000000f4

00000720 <read_uint16>:
     720:	push	{fp, lr}
     724:	mov	fp, sp
     728:	ldr	r2, [r0, #4]
     72c:	add	r2, r0, r2, lsl #4
     730:	ldr	r2, [r2, #-8]
     734:	ldr	r2, [r2]
     738:	sub	r3, r2, #100	; 0x64
     73c:	cmp	r3, #3
     740:	bhi	764 <read_uint16+0x44>
     744:	add	r2, pc, #0
     748:	ldr	pc, [r2, r3, lsl #2]
     74c:	.word	0x0000075c
     750:	.word	0x00000784
     754:	.word	0x0000077c
     758:	.word	0x00000798
     75c:	pop	{fp, lr}
     760:	b	0 <coda_mem_cursor_read_uint16>
     764:	cmp	r2, #1
     768:	beq	7a0 <read_uint16+0x80>
     76c:	cmp	r2, #0
     770:	bne	7a8 <read_uint16+0x88>
     774:	pop	{fp, lr}
     778:	b	0 <coda_ascii_cursor_read_uint16>
     77c:	mvn	r0, #12
     780:	b	788 <read_uint16+0x68>
     784:	mvn	r0, #10
     788:	mov	r1, #0
     78c:	bl	0 <coda_set_error>
     790:	mvn	r0, #0
     794:	pop	{fp, pc}
     798:	pop	{fp, lr}
     79c:	b	0 <coda_cdf_cursor_read_uint16>
     7a0:	pop	{fp, lr}
     7a4:	b	0 <coda_bin_cursor_read_uint16>
     7a8:	movw	r0, #0
     7ac:	movw	r1, #0
     7b0:	movw	r3, #0
     7b4:	movw	r2, #465	; 0x1d1
     7b8:	movt	r0, #0
     7bc:	movt	r1, #0
     7c0:	movt	r3, #0
     7c4:	bl	0 <__assert_fail>

000007c8 <coda_cursor_read_int32>:
     7c8:	push	{r4, sl, fp, lr}
     7cc:	add	fp, sp, #8
     7d0:	sub	sp, sp, #8
     7d4:	cmp	r0, #0
     7d8:	beq	830 <coda_cursor_read_int32+0x68>
     7dc:	mov	r2, r0
     7e0:	ldr	r0, [r0, #4]
     7e4:	cmp	r0, #1
     7e8:	blt	830 <coda_cursor_read_int32+0x68>
     7ec:	add	r0, r2, r0, lsl #4
     7f0:	mov	r4, r1
     7f4:	ldr	r1, [r0, #-8]
     7f8:	cmp	r1, #0
     7fc:	beq	830 <coda_cursor_read_int32+0x68>
     800:	cmp	r4, #0
     804:	beq	858 <coda_cursor_read_int32+0x90>
     808:	ldr	r0, [r1]
     80c:	cmp	r0, #99	; 0x63
     810:	ldrhi	r1, [r1, #4]
     814:	ldr	r3, [r1, #8]
     818:	cmp	r3, #2
     81c:	bne	870 <coda_cursor_read_int32+0xa8>
     820:	ldr	r0, [pc, #352]	; 988 <coda_cursor_read_int32+0x1c0>
     824:	ldr	r3, [pc, r0]
     828:	bl	0 <__aeabi_read_tp>
     82c:	b	884 <coda_cursor_read_int32+0xbc>
     830:	movw	r1, #0
     834:	movw	r2, #0
     838:	mvn	r0, #99	; 0x63
     83c:	movw	r3, #2001	; 0x7d1
     840:	movt	r1, #0
     844:	movt	r2, #0
     848:	bl	0 <coda_set_error>
     84c:	mvn	r0, #0
     850:	sub	sp, fp, #8
     854:	pop	{r4, sl, fp, pc}
     858:	movw	r1, #0
     85c:	movw	r2, #0
     860:	mvn	r0, #99	; 0x63
     864:	movw	r3, #2006	; 0x7d6
     868:	movt	r1, #0
     86c:	b	844 <coda_cursor_read_int32+0x7c>
     870:	bl	0 <__aeabi_read_tp>
     874:	cmp	r3, #3
     878:	bne	8a0 <coda_cursor_read_int32+0xd8>
     87c:	ldr	r3, [pc, #256]	; 984 <coda_cursor_read_int32+0x1bc>
     880:	ldr	r3, [pc, r3]
     884:	ldr	r0, [r0, r3]
     888:	cmp	r0, #0
     88c:	beq	8a0 <coda_cursor_read_int32+0xd8>
     890:	ldr	r3, [r1, #48]	; 0x30
     894:	mov	r0, #9
     898:	cmp	r3, #0
     89c:	bne	8e4 <coda_cursor_read_int32+0x11c>
     8a0:	ldr	r0, [r1, #12]
     8a4:	cmp	r0, #4
     8a8:	bhi	8e4 <coda_cursor_read_int32+0x11c>
     8ac:	add	r1, pc, #0
     8b0:	ldr	pc, [r1, r0, lsl #2]
     8b4:	.word	0x000008c8
     8b8:	.word	0x00000900
     8bc:	.word	0x0000091c
     8c0:	.word	0x00000938
     8c4:	.word	0x00000960
     8c8:	add	r1, sp, #7
     8cc:	mov	r0, r2
     8d0:	bl	114 <read_int8>
     8d4:	cmp	r0, #0
     8d8:	bne	84c <coda_cursor_read_int32+0x84>
     8dc:	ldrsb	r0, [sp, #7]
     8e0:	b	950 <coda_cursor_read_int32+0x188>
     8e4:	bl	0 <coda_type_get_native_type_name>
     8e8:	movw	r1, #0
     8ec:	mov	r2, r0
     8f0:	mvn	r0, #104	; 0x68
     8f4:	movt	r1, #0
     8f8:	bl	0 <coda_set_error>
     8fc:	b	84c <coda_cursor_read_int32+0x84>
     900:	add	r1, sp, #6
     904:	mov	r0, r2
     908:	bl	2dc <read_uint8>
     90c:	cmp	r0, #0
     910:	bne	84c <coda_cursor_read_int32+0x84>
     914:	ldrb	r0, [sp, #6]
     918:	b	950 <coda_cursor_read_int32+0x188>
     91c:	add	r1, sp, #4
     920:	mov	r0, r2
     924:	bl	504 <read_int16>
     928:	cmp	r0, #0
     92c:	bne	84c <coda_cursor_read_int32+0x84>
     930:	ldrsh	r0, [sp, #4]
     934:	b	950 <coda_cursor_read_int32+0x188>
     938:	add	r1, sp, #2
     93c:	mov	r0, r2
     940:	bl	720 <read_uint16>
     944:	cmp	r0, #0
     948:	bne	84c <coda_cursor_read_int32+0x84>
     94c:	ldrh	r0, [sp, #2]
     950:	str	r0, [r4]
     954:	mov	r0, #0
     958:	sub	sp, fp, #8
     95c:	pop	{r4, sl, fp, pc}
     960:	mov	r0, r2
     964:	mov	r1, r4
     968:	bl	98c <read_int32>
     96c:	mov	r1, r0
     970:	mvn	r0, #0
     974:	cmp	r1, #0
     978:	moveq	r0, #0
     97c:	sub	sp, fp, #8
     980:	pop	{r4, sl, fp, pc}
     984:	.word	0x000000fc
     988:	.word	0x0000015c

0000098c <read_int32>:
     98c:	push	{fp, lr}
     990:	mov	fp, sp
     994:	ldr	r2, [r0, #4]
     998:	add	r2, r0, r2, lsl #4
     99c:	ldr	r2, [r2, #-8]
     9a0:	ldr	r3, [r2]
     9a4:	sub	r2, r3, #100	; 0x64
     9a8:	cmp	r2, #5
     9ac:	bhi	9d8 <read_int32+0x4c>
     9b0:	add	r3, pc, #0
     9b4:	ldr	pc, [r3, r2, lsl #2]
     9b8:	.word	0x000009d0
     9bc:	.word	0x00000a0c
     9c0:	.word	0x00000a04
     9c4:	.word	0x00000a24
     9c8:	.word	0x000009fc
     9cc:	.word	0x00000a2c
     9d0:	pop	{fp, lr}
     9d4:	b	0 <coda_mem_cursor_read_int32>
     9d8:	cmp	r3, #1
     9dc:	beq	9f4 <read_int32+0x68>
     9e0:	mov	r2, #0
     9e4:	cmp	r3, #0
     9e8:	bne	a1c <read_int32+0x90>
     9ec:	pop	{fp, lr}
     9f0:	b	0 <coda_ascii_cursor_read_int32>
     9f4:	pop	{fp, lr}
     9f8:	b	0 <coda_bin_cursor_read_int32>
     9fc:	pop	{fp, lr}
     a00:	b	0 <coda_netcdf_cursor_read_int32>
     a04:	mvn	r0, #12
     a08:	b	a10 <read_int32+0x84>
     a0c:	mvn	r0, #10
     a10:	mov	r1, #0
     a14:	bl	0 <coda_set_error>
     a18:	mvn	r2, #0
     a1c:	mov	r0, r2
     a20:	pop	{fp, pc}
     a24:	pop	{fp, lr}
     a28:	b	0 <coda_cdf_cursor_read_int32>
     a2c:	movw	r0, #0
     a30:	movw	r1, #0
     a34:	movw	r3, #0
     a38:	movw	r2, #499	; 0x1f3
     a3c:	movt	r0, #0
     a40:	movt	r1, #0
     a44:	movt	r3, #0
     a48:	bl	0 <__assert_fail>

00000a4c <coda_cursor_read_uint32>:
     a4c:	push	{r4, sl, fp, lr}
     a50:	add	fp, sp, #8
     a54:	sub	sp, sp, #8
     a58:	cmp	r0, #0
     a5c:	beq	ab4 <coda_cursor_read_uint32+0x68>
     a60:	mov	r2, r0
     a64:	ldr	r0, [r0, #4]
     a68:	cmp	r0, #1
     a6c:	blt	ab4 <coda_cursor_read_uint32+0x68>
     a70:	add	r0, r2, r0, lsl #4
     a74:	mov	r4, r1
     a78:	ldr	r1, [r0, #-8]
     a7c:	cmp	r1, #0
     a80:	beq	ab4 <coda_cursor_read_uint32+0x68>
     a84:	cmp	r4, #0
     a88:	beq	adc <coda_cursor_read_uint32+0x90>
     a8c:	ldr	r0, [r1]
     a90:	cmp	r0, #99	; 0x63
     a94:	ldrhi	r1, [r1, #4]
     a98:	ldr	r3, [r1, #8]
     a9c:	cmp	r3, #2
     aa0:	bne	af4 <coda_cursor_read_uint32+0xa8>
     aa4:	ldr	r0, [pc, #284]	; bc8 <coda_cursor_read_uint32+0x17c>
     aa8:	ldr	r3, [pc, r0]
     aac:	bl	0 <__aeabi_read_tp>
     ab0:	b	b08 <coda_cursor_read_uint32+0xbc>
     ab4:	movw	r1, #0
     ab8:	movw	r2, #0
     abc:	mvn	r0, #99	; 0x63
     ac0:	movw	r3, #2094	; 0x82e
     ac4:	movt	r1, #0
     ac8:	movt	r2, #0
     acc:	bl	0 <coda_set_error>
     ad0:	mvn	r0, #0
     ad4:	sub	sp, fp, #8
     ad8:	pop	{r4, sl, fp, pc}
     adc:	movw	r1, #0
     ae0:	movw	r2, #0
     ae4:	mvn	r0, #99	; 0x63
     ae8:	movw	r3, #2099	; 0x833
     aec:	movt	r1, #0
     af0:	b	ac8 <coda_cursor_read_uint32+0x7c>
     af4:	bl	0 <__aeabi_read_tp>
     af8:	cmp	r3, #3
     afc:	bne	b24 <coda_cursor_read_uint32+0xd8>
     b00:	ldr	r3, [pc, #188]	; bc4 <coda_cursor_read_uint32+0x178>
     b04:	ldr	r3, [pc, r3]
     b08:	ldr	r0, [r0, r3]
     b0c:	cmp	r0, #0
     b10:	beq	b24 <coda_cursor_read_uint32+0xd8>
     b14:	ldr	r3, [r1, #48]	; 0x30
     b18:	mov	r0, #9
     b1c:	cmp	r3, #0
     b20:	bne	b5c <coda_cursor_read_uint32+0x110>
     b24:	ldr	r0, [r1, #12]
     b28:	cmp	r0, #5
     b2c:	beq	b78 <coda_cursor_read_uint32+0x12c>
     b30:	cmp	r0, #3
     b34:	beq	b9c <coda_cursor_read_uint32+0x150>
     b38:	cmp	r0, #1
     b3c:	bne	b5c <coda_cursor_read_uint32+0x110>
     b40:	add	r1, sp, #7
     b44:	mov	r0, r2
     b48:	bl	2dc <read_uint8>
     b4c:	cmp	r0, #0
     b50:	bne	ad0 <coda_cursor_read_uint32+0x84>
     b54:	ldrb	r0, [sp, #7]
     b58:	b	bb4 <coda_cursor_read_uint32+0x168>
     b5c:	bl	0 <coda_type_get_native_type_name>
     b60:	movw	r1, #0
     b64:	mov	r2, r0
     b68:	mvn	r0, #104	; 0x68
     b6c:	movt	r1, #0
     b70:	bl	0 <coda_set_error>
     b74:	b	ad0 <coda_cursor_read_uint32+0x84>
     b78:	mov	r0, r2
     b7c:	mov	r1, r4
     b80:	bl	bcc <read_uint32>
     b84:	mov	r1, r0
     b88:	mvn	r0, #0
     b8c:	cmp	r1, #0
     b90:	moveq	r0, #0
     b94:	sub	sp, fp, #8
     b98:	pop	{r4, sl, fp, pc}
     b9c:	add	r1, sp, #4
     ba0:	mov	r0, r2
     ba4:	bl	720 <read_uint16>
     ba8:	cmp	r0, #0
     bac:	bne	ad0 <coda_cursor_read_uint32+0x84>
     bb0:	ldrh	r0, [sp, #4]
     bb4:	str	r0, [r4]
     bb8:	mov	r0, #0
     bbc:	sub	sp, fp, #8
     bc0:	pop	{r4, sl, fp, pc}
     bc4:	.word	0x000000b8
     bc8:	.word	0x00000118

00000bcc <read_uint32>:
     bcc:	push	{fp, lr}
     bd0:	mov	fp, sp
     bd4:	ldr	r2, [r0, #4]
     bd8:	add	r2, r0, r2, lsl #4
     bdc:	ldr	r2, [r2, #-8]
     be0:	ldr	r2, [r2]
     be4:	sub	r3, r2, #100	; 0x64
     be8:	cmp	r3, #3
     bec:	bhi	c10 <read_uint32+0x44>
     bf0:	add	r2, pc, #0
     bf4:	ldr	pc, [r2, r3, lsl #2]
     bf8:	.word	0x00000c08
     bfc:	.word	0x00000c30
     c00:	.word	0x00000c28
     c04:	.word	0x00000c44
     c08:	pop	{fp, lr}
     c0c:	b	0 <coda_mem_cursor_read_uint32>
     c10:	cmp	r2, #1
     c14:	beq	c4c <read_uint32+0x80>
     c18:	cmp	r2, #0
     c1c:	bne	c54 <read_uint32+0x88>
     c20:	pop	{fp, lr}
     c24:	b	0 <coda_ascii_cursor_read_uint32>
     c28:	mvn	r0, #12
     c2c:	b	c34 <read_uint32+0x68>
     c30:	mvn	r0, #10
     c34:	mov	r1, #0
     c38:	bl	0 <coda_set_error>
     c3c:	mvn	r0, #0
     c40:	pop	{fp, pc}
     c44:	pop	{fp, lr}
     c48:	b	0 <coda_cdf_cursor_read_uint32>
     c4c:	pop	{fp, lr}
     c50:	b	0 <coda_bin_cursor_read_uint32>
     c54:	movw	r0, #0
     c58:	movw	r1, #0
     c5c:	movw	r3, #0
     c60:	movw	r2, #537	; 0x219
     c64:	movt	r0, #0
     c68:	movt	r1, #0
     c6c:	movt	r3, #0
     c70:	bl	0 <__assert_fail>

00000c74 <coda_cursor_read_int64>:
     c74:	push	{r4, sl, fp, lr}
     c78:	add	fp, sp, #8
     c7c:	sub	sp, sp, #16
     c80:	cmp	r0, #0
     c84:	beq	cdc <coda_cursor_read_int64+0x68>
     c88:	mov	r2, r0
     c8c:	ldr	r0, [r0, #4]
     c90:	cmp	r0, #1
     c94:	blt	cdc <coda_cursor_read_int64+0x68>
     c98:	add	r0, r2, r0, lsl #4
     c9c:	mov	r4, r1
     ca0:	ldr	r1, [r0, #-8]
     ca4:	cmp	r1, #0
     ca8:	beq	cdc <coda_cursor_read_int64+0x68>
     cac:	cmp	r4, #0
     cb0:	beq	d04 <coda_cursor_read_int64+0x90>
     cb4:	ldr	r0, [r1]
     cb8:	cmp	r0, #99	; 0x63
     cbc:	ldrhi	r1, [r1, #4]
     cc0:	ldr	r3, [r1, #8]
     cc4:	cmp	r3, #2
     cc8:	bne	d1c <coda_cursor_read_int64+0xa8>
     ccc:	ldr	r0, [pc, #424]	; e7c <coda_cursor_read_int64+0x208>
     cd0:	ldr	r3, [pc, r0]
     cd4:	bl	0 <__aeabi_read_tp>
     cd8:	b	d30 <coda_cursor_read_int64+0xbc>
     cdc:	movw	r1, #0
     ce0:	movw	r2, #0
     ce4:	mvn	r0, #99	; 0x63
     ce8:	movw	r3, #2169	; 0x879
     cec:	movt	r1, #0
     cf0:	movt	r2, #0
     cf4:	bl	0 <coda_set_error>
     cf8:	mvn	r0, #0
     cfc:	sub	sp, fp, #8
     d00:	pop	{r4, sl, fp, pc}
     d04:	movw	r1, #0
     d08:	movw	r2, #0
     d0c:	mvn	r0, #99	; 0x63
     d10:	movw	r3, #2174	; 0x87e
     d14:	movt	r1, #0
     d18:	b	cf0 <coda_cursor_read_int64+0x7c>
     d1c:	bl	0 <__aeabi_read_tp>
     d20:	cmp	r3, #3
     d24:	bne	d68 <coda_cursor_read_int64+0xf4>
     d28:	ldr	r3, [pc, #328]	; e78 <coda_cursor_read_int64+0x204>
     d2c:	ldr	r3, [pc, r3]
     d30:	ldr	r0, [r0, r3]
     d34:	cmp	r0, #0
     d38:	beq	d68 <coda_cursor_read_int64+0xf4>
     d3c:	ldr	r3, [r1, #48]	; 0x30
     d40:	mov	r0, #9
     d44:	cmp	r3, #0
     d48:	beq	d68 <coda_cursor_read_int64+0xf4>
     d4c:	bl	0 <coda_type_get_native_type_name>
     d50:	movw	r1, #0
     d54:	mov	r2, r0
     d58:	mvn	r0, #104	; 0x68
     d5c:	movt	r1, #0
     d60:	bl	0 <coda_set_error>
     d64:	b	cf8 <coda_cursor_read_int64+0x84>
     d68:	ldr	r0, [r1, #12]
     d6c:	cmp	r0, #6
     d70:	bhi	d4c <coda_cursor_read_int64+0xd8>
     d74:	add	r1, pc, #0
     d78:	ldr	pc, [r1, r0, lsl #2]
     d7c:	.word	0x00000d98
     d80:	.word	0x00000db4
     d84:	.word	0x00000dd0
     d88:	.word	0x00000dec
     d8c:	.word	0x00000e08
     d90:	.word	0x00000e28
     d94:	.word	0x00000e54
     d98:	sub	r1, fp, #9
     d9c:	mov	r0, r2
     da0:	bl	114 <read_int8>
     da4:	cmp	r0, #0
     da8:	bne	cf8 <coda_cursor_read_int64+0x84>
     dac:	ldrsb	r0, [fp, #-9]
     db0:	b	e20 <coda_cursor_read_int64+0x1ac>
     db4:	sub	r1, fp, #10
     db8:	mov	r0, r2
     dbc:	bl	2dc <read_uint8>
     dc0:	cmp	r0, #0
     dc4:	bne	cf8 <coda_cursor_read_int64+0x84>
     dc8:	ldrb	r0, [fp, #-10]
     dcc:	b	e40 <coda_cursor_read_int64+0x1cc>
     dd0:	add	r1, sp, #12
     dd4:	mov	r0, r2
     dd8:	bl	504 <read_int16>
     ddc:	cmp	r0, #0
     de0:	bne	cf8 <coda_cursor_read_int64+0x84>
     de4:	ldrsh	r0, [sp, #12]
     de8:	b	e20 <coda_cursor_read_int64+0x1ac>
     dec:	add	r1, sp, #10
     df0:	mov	r0, r2
     df4:	bl	720 <read_uint16>
     df8:	cmp	r0, #0
     dfc:	bne	cf8 <coda_cursor_read_int64+0x84>
     e00:	ldrh	r0, [sp, #10]
     e04:	b	e40 <coda_cursor_read_int64+0x1cc>
     e08:	add	r1, sp, #4
     e0c:	mov	r0, r2
     e10:	bl	98c <read_int32>
     e14:	cmp	r0, #0
     e18:	bne	cf8 <coda_cursor_read_int64+0x84>
     e1c:	ldr	r0, [sp, #4]
     e20:	asr	r1, r0, #31
     e24:	b	e44 <coda_cursor_read_int64+0x1d0>
     e28:	mov	r1, sp
     e2c:	mov	r0, r2
     e30:	bl	bcc <read_uint32>
     e34:	cmp	r0, #0
     e38:	bne	cf8 <coda_cursor_read_int64+0x84>
     e3c:	ldr	r0, [sp]
     e40:	mov	r1, #0
     e44:	strd	r0, [r4]
     e48:	mov	r0, #0
     e4c:	sub	sp, fp, #8
     e50:	pop	{r4, sl, fp, pc}
     e54:	mov	r0, r2
     e58:	mov	r1, r4
     e5c:	bl	e80 <read_int64>
     e60:	mov	r1, r0
     e64:	mvn	r0, #0
     e68:	cmp	r1, #0
     e6c:	moveq	r0, #0
     e70:	sub	sp, fp, #8
     e74:	pop	{r4, sl, fp, pc}
     e78:	.word	0x00000144
     e7c:	.word	0x000001a4

00000e80 <read_int64>:
     e80:	push	{fp, lr}
     e84:	mov	fp, sp
     e88:	ldr	r2, [r0, #4]
     e8c:	add	r2, r0, r2, lsl #4
     e90:	ldr	r2, [r2, #-8]
     e94:	ldr	r2, [r2]
     e98:	sub	r3, r2, #100	; 0x64
     e9c:	cmp	r3, #3
     ea0:	bhi	ec4 <read_int64+0x44>
     ea4:	add	r2, pc, #0
     ea8:	ldr	pc, [r2, r3, lsl #2]
     eac:	.word	0x00000ebc
     eb0:	.word	0x00000ee4
     eb4:	.word	0x00000edc
     eb8:	.word	0x00000ef8
     ebc:	pop	{fp, lr}
     ec0:	b	0 <coda_mem_cursor_read_int64>
     ec4:	cmp	r2, #1
     ec8:	beq	f00 <read_int64+0x80>
     ecc:	cmp	r2, #0
     ed0:	bne	f08 <read_int64+0x88>
     ed4:	pop	{fp, lr}
     ed8:	b	0 <coda_ascii_cursor_read_int64>
     edc:	mvn	r0, #12
     ee0:	b	ee8 <read_int64+0x68>
     ee4:	mvn	r0, #10
     ee8:	mov	r1, #0
     eec:	bl	0 <coda_set_error>
     ef0:	mvn	r0, #0
     ef4:	pop	{fp, pc}
     ef8:	pop	{fp, lr}
     efc:	b	0 <coda_cdf_cursor_read_int64>
     f00:	pop	{fp, lr}
     f04:	b	0 <coda_bin_cursor_read_int64>
     f08:	movw	r0, #0
     f0c:	movw	r1, #0
     f10:	movw	r3, #0
     f14:	mov	r2, #572	; 0x23c
     f18:	movt	r0, #0
     f1c:	movt	r1, #0
     f20:	movt	r3, #0
     f24:	bl	0 <__assert_fail>

00000f28 <coda_cursor_read_uint64>:
     f28:	push	{r4, sl, fp, lr}
     f2c:	add	fp, sp, #8
     f30:	sub	sp, sp, #8
     f34:	cmp	r0, #0
     f38:	beq	f90 <coda_cursor_read_uint64+0x68>
     f3c:	mov	r2, r0
     f40:	ldr	r0, [r0, #4]
     f44:	cmp	r0, #1
     f48:	blt	f90 <coda_cursor_read_uint64+0x68>
     f4c:	add	r0, r2, r0, lsl #4
     f50:	mov	r4, r1
     f54:	ldr	r1, [r0, #-8]
     f58:	cmp	r1, #0
     f5c:	beq	f90 <coda_cursor_read_uint64+0x68>
     f60:	cmp	r4, #0
     f64:	beq	fb8 <coda_cursor_read_uint64+0x90>
     f68:	ldr	r0, [r1]
     f6c:	cmp	r0, #99	; 0x63
     f70:	ldrhi	r1, [r1, #4]
     f74:	ldr	r3, [r1, #8]
     f78:	cmp	r3, #2
     f7c:	bne	fd0 <coda_cursor_read_uint64+0xa8>
     f80:	ldr	r0, [pc, #340]	; 10dc <coda_cursor_read_uint64+0x1b4>
     f84:	ldr	r3, [pc, r0]
     f88:	bl	0 <__aeabi_read_tp>
     f8c:	b	fe4 <coda_cursor_read_uint64+0xbc>
     f90:	movw	r1, #0
     f94:	movw	r2, #0
     f98:	mvn	r0, #99	; 0x63
     f9c:	movw	r3, #2285	; 0x8ed
     fa0:	movt	r1, #0
     fa4:	movt	r2, #0
     fa8:	bl	0 <coda_set_error>
     fac:	mvn	r0, #0
     fb0:	sub	sp, fp, #8
     fb4:	pop	{r4, sl, fp, pc}
     fb8:	movw	r1, #0
     fbc:	movw	r2, #0
     fc0:	mvn	r0, #99	; 0x63
     fc4:	movw	r3, #2290	; 0x8f2
     fc8:	movt	r1, #0
     fcc:	b	fa4 <coda_cursor_read_uint64+0x7c>
     fd0:	bl	0 <__aeabi_read_tp>
     fd4:	cmp	r3, #3
     fd8:	bne	101c <coda_cursor_read_uint64+0xf4>
     fdc:	ldr	r3, [pc, #244]	; 10d8 <coda_cursor_read_uint64+0x1b0>
     fe0:	ldr	r3, [pc, r3]
     fe4:	ldr	r0, [r0, r3]
     fe8:	cmp	r0, #0
     fec:	beq	101c <coda_cursor_read_uint64+0xf4>
     ff0:	ldr	r3, [r1, #48]	; 0x30
     ff4:	mov	r0, #9
     ff8:	cmp	r3, #0
     ffc:	beq	101c <coda_cursor_read_uint64+0xf4>
    1000:	bl	0 <coda_type_get_native_type_name>
    1004:	movw	r1, #0
    1008:	mov	r2, r0
    100c:	mvn	r0, #104	; 0x68
    1010:	movt	r1, #0
    1014:	bl	0 <coda_set_error>
    1018:	b	fac <coda_cursor_read_uint64+0x84>
    101c:	ldr	r0, [r1, #12]
    1020:	sub	r1, r0, #1
    1024:	cmp	r1, #6
    1028:	bhi	1000 <coda_cursor_read_uint64+0xd8>
    102c:	add	r3, pc, #0
    1030:	ldr	pc, [r3, r1, lsl #2]
    1034:	.word	0x00001050
    1038:	.word	0x00001000
    103c:	.word	0x0000106c
    1040:	.word	0x00001000
    1044:	.word	0x00001088
    1048:	.word	0x00001000
    104c:	.word	0x000010b4
    1050:	add	r1, sp, #7
    1054:	mov	r0, r2
    1058:	bl	2dc <read_uint8>
    105c:	cmp	r0, #0
    1060:	bne	fac <coda_cursor_read_uint64+0x84>
    1064:	ldrb	r0, [sp, #7]
    1068:	b	10a0 <coda_cursor_read_uint64+0x178>
    106c:	add	r1, sp, #4
    1070:	mov	r0, r2
    1074:	bl	720 <read_uint16>
    1078:	cmp	r0, #0
    107c:	bne	fac <coda_cursor_read_uint64+0x84>
    1080:	ldrh	r0, [sp, #4]
    1084:	b	10a0 <coda_cursor_read_uint64+0x178>
    1088:	mov	r1, sp
    108c:	mov	r0, r2
    1090:	bl	bcc <read_uint32>
    1094:	cmp	r0, #0
    1098:	bne	fac <coda_cursor_read_uint64+0x84>
    109c:	ldr	r0, [sp]
    10a0:	mov	r1, #0
    10a4:	strd	r0, [r4]
    10a8:	mov	r0, #0
    10ac:	sub	sp, fp, #8
    10b0:	pop	{r4, sl, fp, pc}
    10b4:	mov	r0, r2
    10b8:	mov	r1, r4
    10bc:	bl	10e0 <read_uint64>
    10c0:	mov	r1, r0
    10c4:	mvn	r0, #0
    10c8:	cmp	r1, #0
    10cc:	moveq	r0, #0
    10d0:	sub	sp, fp, #8
    10d4:	pop	{r4, sl, fp, pc}
    10d8:	.word	0x000000f0
    10dc:	.word	0x00000150

000010e0 <read_uint64>:
    10e0:	push	{fp, lr}
    10e4:	mov	fp, sp
    10e8:	ldr	r2, [r0, #4]
    10ec:	add	r2, r0, r2, lsl #4
    10f0:	ldr	r2, [r2, #-8]
    10f4:	ldr	r2, [r2]
    10f8:	cmp	r2, #99	; 0x63
    10fc:	ble	1118 <read_uint64+0x38>
    1100:	cmp	r2, #100	; 0x64
    1104:	beq	1128 <read_uint64+0x48>
    1108:	cmp	r2, #101	; 0x65
    110c:	bne	1130 <read_uint64+0x50>
    1110:	mvn	r0, #10
    1114:	b	113c <read_uint64+0x5c>
    1118:	cmp	r2, #0
    111c:	bne	114c <read_uint64+0x6c>
    1120:	pop	{fp, lr}
    1124:	b	0 <coda_ascii_cursor_read_uint64>
    1128:	pop	{fp, lr}
    112c:	b	0 <coda_mem_cursor_read_uint64>
    1130:	cmp	r2, #102	; 0x66
    1134:	bne	115c <read_uint64+0x7c>
    1138:	mvn	r0, #12
    113c:	mov	r1, #0
    1140:	bl	0 <coda_set_error>
    1144:	mvn	r0, #0
    1148:	pop	{fp, pc}
    114c:	cmp	r2, #1
    1150:	bne	115c <read_uint64+0x7c>
    1154:	pop	{fp, lr}
    1158:	b	0 <coda_bin_cursor_read_uint64>
    115c:	movw	r0, #0
    1160:	movw	r1, #0
    1164:	movw	r3, #0
    1168:	movw	r2, #606	; 0x25e
    116c:	movt	r0, #0
    1170:	movt	r1, #0
    1174:	movt	r3, #0
    1178:	bl	0 <__assert_fail>

0000117c <coda_cursor_read_float>:
    117c:	push	{r4, r5, r6, sl, fp, lr}
    1180:	add	fp, sp, #16
    1184:	sub	sp, sp, #8
    1188:	cmp	r0, #0
    118c:	beq	11ec <coda_cursor_read_float+0x70>
    1190:	mov	r2, r0
    1194:	ldr	r0, [r0, #4]
    1198:	cmp	r0, #1
    119c:	blt	11ec <coda_cursor_read_float+0x70>
    11a0:	add	r0, r2, r0, lsl #4
    11a4:	mov	r4, r1
    11a8:	ldr	r1, [r0, #-8]
    11ac:	cmp	r1, #0
    11b0:	beq	11ec <coda_cursor_read_float+0x70>
    11b4:	cmp	r4, #0
    11b8:	beq	1214 <coda_cursor_read_float+0x98>
    11bc:	ldr	r0, [r1]
    11c0:	cmp	r0, #99	; 0x63
    11c4:	ldrhi	r1, [r1, #4]
    11c8:	ldr	r6, [r1, #8]
    11cc:	ldr	r3, [r1, #12]
    11d0:	cmp	r6, #2
    11d4:	bne	122c <coda_cursor_read_float+0xb0>
    11d8:	ldr	r0, [pc, #568]	; 1418 <coda_cursor_read_float+0x29c>
    11dc:	ldr	r5, [pc, r0]
    11e0:	bl	0 <__aeabi_read_tp>
    11e4:	ldr	r0, [r0, r5]
    11e8:	b	1244 <coda_cursor_read_float+0xc8>
    11ec:	movw	r1, #0
    11f0:	movw	r2, #0
    11f4:	mvn	r0, #99	; 0x63
    11f8:	movw	r3, #2375	; 0x947
    11fc:	movt	r1, #0
    1200:	movt	r2, #0
    1204:	bl	0 <coda_set_error>
    1208:	mvn	r0, #0
    120c:	sub	sp, fp, #16
    1210:	pop	{r4, r5, r6, sl, fp, pc}
    1214:	movw	r1, #0
    1218:	movw	r2, #0
    121c:	mvn	r0, #99	; 0x63
    1220:	movw	r3, #2380	; 0x94c
    1224:	movt	r1, #0
    1228:	b	1200 <coda_cursor_read_float+0x84>
    122c:	bl	0 <__aeabi_read_tp>
    1230:	cmp	r6, #3
    1234:	bne	1254 <coda_cursor_read_float+0xd8>
    1238:	ldr	r6, [pc, #468]	; 1414 <coda_cursor_read_float+0x298>
    123c:	ldr	r6, [pc, r6]
    1240:	ldr	r0, [r0, r6]
    1244:	cmp	r0, #0
    1248:	ldrne	r0, [r1, #48]	; 0x30
    124c:	cmpne	r0, #0
    1250:	bne	12a8 <coda_cursor_read_float+0x12c>
    1254:	cmp	r3, #9
    1258:	bhi	12cc <coda_cursor_read_float+0x150>
    125c:	add	r0, pc, #0
    1260:	ldr	pc, [r0, r3, lsl #2]
    1264:	.word	0x0000128c
    1268:	.word	0x000012ec
    126c:	.word	0x00001308
    1270:	.word	0x00001328
    1274:	.word	0x00001348
    1278:	.word	0x00001368
    127c:	.word	0x00001388
    1280:	.word	0x000013a0
    1284:	.word	0x000013c4
    1288:	.word	0x000013e8
    128c:	mov	r1, sp
    1290:	mov	r0, r2
    1294:	bl	114 <read_int8>
    1298:	cmp	r0, #0
    129c:	bne	1208 <coda_cursor_read_float+0x8c>
    12a0:	ldrsb	r0, [sp]
    12a4:	b	1320 <coda_cursor_read_float+0x1a4>
    12a8:	mov	r1, sp
    12ac:	mov	r0, r2
    12b0:	bl	141c <coda_cursor_read_double>
    12b4:	mov	r1, r0
    12b8:	mvn	r0, #0
    12bc:	cmp	r1, #0
    12c0:	beq	13fc <coda_cursor_read_float+0x280>
    12c4:	sub	sp, fp, #16
    12c8:	pop	{r4, r5, r6, sl, fp, pc}
    12cc:	mov	r0, r3
    12d0:	bl	0 <coda_type_get_native_type_name>
    12d4:	movw	r1, #0
    12d8:	mov	r2, r0
    12dc:	mvn	r0, #104	; 0x68
    12e0:	movt	r1, #0
    12e4:	bl	0 <coda_set_error>
    12e8:	b	1208 <coda_cursor_read_float+0x8c>
    12ec:	mov	r1, sp
    12f0:	mov	r0, r2
    12f4:	bl	2dc <read_uint8>
    12f8:	cmp	r0, #0
    12fc:	bne	1208 <coda_cursor_read_float+0x8c>
    1300:	ldrb	r0, [sp]
    1304:	b	1340 <coda_cursor_read_float+0x1c4>
    1308:	mov	r1, sp
    130c:	mov	r0, r2
    1310:	bl	504 <read_int16>
    1314:	cmp	r0, #0
    1318:	bne	1208 <coda_cursor_read_float+0x8c>
    131c:	ldrsh	r0, [sp]
    1320:	vmov	s0, r0
    1324:	b	1360 <coda_cursor_read_float+0x1e4>
    1328:	mov	r1, sp
    132c:	mov	r0, r2
    1330:	bl	720 <read_uint16>
    1334:	cmp	r0, #0
    1338:	bne	1208 <coda_cursor_read_float+0x8c>
    133c:	ldrh	r0, [sp]
    1340:	vmov	s0, r0
    1344:	b	1380 <coda_cursor_read_float+0x204>
    1348:	mov	r1, sp
    134c:	mov	r0, r2
    1350:	bl	98c <read_int32>
    1354:	cmp	r0, #0
    1358:	bne	1208 <coda_cursor_read_float+0x8c>
    135c:	vldr	s0, [sp]
    1360:	vcvt.f32.s32	s0, s0
    1364:	b	1404 <coda_cursor_read_float+0x288>
    1368:	mov	r1, sp
    136c:	mov	r0, r2
    1370:	bl	bcc <read_uint32>
    1374:	cmp	r0, #0
    1378:	bne	1208 <coda_cursor_read_float+0x8c>
    137c:	vldr	s0, [sp]
    1380:	vcvt.f32.u32	s0, s0
    1384:	b	1404 <coda_cursor_read_float+0x288>
    1388:	mov	r1, sp
    138c:	mov	r0, r2
    1390:	bl	e80 <read_int64>
    1394:	cmp	r0, #0
    1398:	bne	1208 <coda_cursor_read_float+0x8c>
    139c:	b	13b4 <coda_cursor_read_float+0x238>
    13a0:	mov	r1, sp
    13a4:	mov	r0, r2
    13a8:	bl	10e0 <read_uint64>
    13ac:	cmp	r0, #0
    13b0:	bne	1208 <coda_cursor_read_float+0x8c>
    13b4:	ldm	sp, {r0, r1}
    13b8:	bl	0 <__aeabi_l2f>
    13bc:	str	r0, [r4]
    13c0:	b	1408 <coda_cursor_read_float+0x28c>
    13c4:	mov	r0, r2
    13c8:	mov	r1, r4
    13cc:	bl	16e8 <read_float>
    13d0:	mov	r1, r0
    13d4:	mvn	r0, #0
    13d8:	cmp	r1, #0
    13dc:	moveq	r0, #0
    13e0:	sub	sp, fp, #16
    13e4:	pop	{r4, r5, r6, sl, fp, pc}
    13e8:	mov	r1, sp
    13ec:	mov	r0, r2
    13f0:	bl	17a8 <read_double>
    13f4:	cmp	r0, #0
    13f8:	bne	1208 <coda_cursor_read_float+0x8c>
    13fc:	vldr	d16, [sp]
    1400:	vcvt.f32.f64	s0, d16
    1404:	vstr	s0, [r4]
    1408:	mov	r0, #0
    140c:	sub	sp, fp, #16
    1410:	pop	{r4, r5, r6, sl, fp, pc}
    1414:	.word	0x000001d0
    1418:	.word	0x00000234

0000141c <coda_cursor_read_double>:
    141c:	push	{r4, r5, r6, r8, fp, lr}
    1420:	add	fp, sp, #16
    1424:	sub	sp, sp, #8
    1428:	cmp	r0, #0
    142c:	beq	14bc <coda_cursor_read_double+0xa0>
    1430:	mov	r2, r0
    1434:	ldr	r0, [r0, #4]
    1438:	cmp	r0, #1
    143c:	blt	14bc <coda_cursor_read_double+0xa0>
    1440:	add	r0, r2, r0, lsl #4
    1444:	mov	r4, r1
    1448:	ldr	r1, [r0, #-8]
    144c:	cmp	r1, #0
    1450:	beq	14bc <coda_cursor_read_double+0xa0>
    1454:	cmp	r4, #0
    1458:	beq	14e8 <coda_cursor_read_double+0xcc>
    145c:	ldr	r0, [r1]
    1460:	cmp	r0, #99	; 0x63
    1464:	ldrhi	r1, [r1, #4]
    1468:	ldr	r8, [r1, #8]
    146c:	ldr	r3, [r1, #12]
    1470:	cmp	r8, #2
    1474:	bne	1500 <coda_cursor_read_double+0xe4>
    1478:	ldr	r0, [pc, #612]	; 16e4 <coda_cursor_read_double+0x2c8>
    147c:	ldr	r5, [pc, r0]
    1480:	bl	0 <__aeabi_read_tp>
    1484:	ldr	r0, [r0, r5]
    1488:	cmp	r0, #0
    148c:	beq	1578 <coda_cursor_read_double+0x15c>
    1490:	ldr	r6, [r1, #48]	; 0x30
    1494:	cmp	r3, #9
    1498:	bls	152c <coda_cursor_read_double+0x110>
    149c:	mov	r0, r3
    14a0:	bl	0 <coda_type_get_native_type_name>
    14a4:	movw	r1, #0
    14a8:	mov	r2, r0
    14ac:	mvn	r0, #104	; 0x68
    14b0:	movt	r1, #0
    14b4:	bl	0 <coda_set_error>
    14b8:	b	14d8 <coda_cursor_read_double+0xbc>
    14bc:	movw	r1, #0
    14c0:	movw	r2, #0
    14c4:	mvn	r0, #99	; 0x63
    14c8:	movw	r3, #2543	; 0x9ef
    14cc:	movt	r1, #0
    14d0:	movt	r2, #0
    14d4:	bl	0 <coda_set_error>
    14d8:	mvn	r5, #0
    14dc:	mov	r0, r5
    14e0:	sub	sp, fp, #16
    14e4:	pop	{r4, r5, r6, r8, fp, pc}
    14e8:	movw	r1, #0
    14ec:	movw	r2, #0
    14f0:	mvn	r0, #99	; 0x63
    14f4:	movw	r3, #2548	; 0x9f4
    14f8:	movt	r1, #0
    14fc:	b	14d0 <coda_cursor_read_double+0xb4>
    1500:	bl	0 <__aeabi_read_tp>
    1504:	mov	r6, #0
    1508:	cmp	r8, #3
    150c:	bne	1524 <coda_cursor_read_double+0x108>
    1510:	ldr	r5, [pc, #456]	; 16e0 <coda_cursor_read_double+0x2c4>
    1514:	ldr	r5, [pc, r5]
    1518:	ldr	r0, [r0, r5]
    151c:	cmp	r0, #0
    1520:	ldrne	r6, [r1, #48]	; 0x30
    1524:	cmp	r3, #9
    1528:	bhi	149c <coda_cursor_read_double+0x80>
    152c:	add	r0, pc, #0
    1530:	ldr	pc, [r0, r3, lsl #2]
    1534:	.word	0x0000155c
    1538:	.word	0x00001588
    153c:	.word	0x000015a4
    1540:	.word	0x000015c4
    1544:	.word	0x000015e4
    1548:	.word	0x00001604
    154c:	.word	0x00001624
    1550:	.word	0x0000163c
    1554:	.word	0x00001660
    1558:	.word	0x000016ac
    155c:	mov	r1, sp
    1560:	mov	r0, r2
    1564:	bl	114 <read_int8>
    1568:	cmp	r0, #0
    156c:	bne	14d8 <coda_cursor_read_double+0xbc>
    1570:	ldrsb	r0, [sp]
    1574:	b	15bc <coda_cursor_read_double+0x1a0>
    1578:	mov	r6, #0
    157c:	cmp	r3, #9
    1580:	bls	152c <coda_cursor_read_double+0x110>
    1584:	b	149c <coda_cursor_read_double+0x80>
    1588:	mov	r1, sp
    158c:	mov	r0, r2
    1590:	bl	2dc <read_uint8>
    1594:	cmp	r0, #0
    1598:	bne	14d8 <coda_cursor_read_double+0xbc>
    159c:	ldrb	r0, [sp]
    15a0:	b	15dc <coda_cursor_read_double+0x1c0>
    15a4:	mov	r1, sp
    15a8:	mov	r0, r2
    15ac:	bl	504 <read_int16>
    15b0:	cmp	r0, #0
    15b4:	bne	14d8 <coda_cursor_read_double+0xbc>
    15b8:	ldrsh	r0, [sp]
    15bc:	vmov	s0, r0
    15c0:	b	15fc <coda_cursor_read_double+0x1e0>
    15c4:	mov	r1, sp
    15c8:	mov	r0, r2
    15cc:	bl	720 <read_uint16>
    15d0:	cmp	r0, #0
    15d4:	bne	14d8 <coda_cursor_read_double+0xbc>
    15d8:	ldrh	r0, [sp]
    15dc:	vmov	s0, r0
    15e0:	b	161c <coda_cursor_read_double+0x200>
    15e4:	mov	r1, sp
    15e8:	mov	r0, r2
    15ec:	bl	98c <read_int32>
    15f0:	cmp	r0, #0
    15f4:	bne	14d8 <coda_cursor_read_double+0xbc>
    15f8:	vldr	s0, [sp]
    15fc:	vcvt.f64.s32	d16, s0
    1600:	b	167c <coda_cursor_read_double+0x260>
    1604:	mov	r1, sp
    1608:	mov	r0, r2
    160c:	bl	bcc <read_uint32>
    1610:	cmp	r0, #0
    1614:	bne	14d8 <coda_cursor_read_double+0xbc>
    1618:	vldr	s0, [sp]
    161c:	vcvt.f64.u32	d16, s0
    1620:	b	167c <coda_cursor_read_double+0x260>
    1624:	mov	r1, sp
    1628:	mov	r0, r2
    162c:	bl	e80 <read_int64>
    1630:	cmp	r0, #0
    1634:	bne	14d8 <coda_cursor_read_double+0xbc>
    1638:	b	1650 <coda_cursor_read_double+0x234>
    163c:	mov	r1, sp
    1640:	mov	r0, r2
    1644:	bl	10e0 <read_uint64>
    1648:	cmp	r0, #0
    164c:	bne	14d8 <coda_cursor_read_double+0xbc>
    1650:	ldm	sp, {r0, r1}
    1654:	bl	0 <__aeabi_l2d>
    1658:	strd	r0, [r4]
    165c:	b	1680 <coda_cursor_read_double+0x264>
    1660:	mov	r1, sp
    1664:	mov	r0, r2
    1668:	bl	16e8 <read_float>
    166c:	cmp	r0, #0
    1670:	bne	14d8 <coda_cursor_read_double+0xbc>
    1674:	vldr	s0, [sp]
    1678:	vcvt.f64.f32	d16, s0
    167c:	vstr	d16, [r4]
    1680:	mov	r5, #0
    1684:	cmp	r6, #0
    1688:	beq	14dc <coda_cursor_read_double+0xc0>
    168c:	vldr	d16, [r4]
    1690:	vldr	d17, [r6, #24]
    1694:	vcmp.f64	d16, d17
    1698:	vmrs	APSR_nzcv, fpscr
    169c:	bne	16c8 <coda_cursor_read_double+0x2ac>
    16a0:	bl	0 <coda_NaN>
    16a4:	vstr	d0, [r4]
    16a8:	b	14dc <coda_cursor_read_double+0xc0>
    16ac:	mov	r0, r2
    16b0:	mov	r1, r4
    16b4:	bl	17a8 <read_double>
    16b8:	mvn	r5, #0
    16bc:	cmp	r0, #0
    16c0:	bne	14dc <coda_cursor_read_double+0xc0>
    16c4:	b	1680 <coda_cursor_read_double+0x264>
    16c8:	vldmia	r6, {d17-d19}
    16cc:	vmul.f64	d16, d16, d17
    16d0:	vdiv.f64	d16, d16, d18
    16d4:	vadd.f64	d16, d16, d19
    16d8:	vstr	d16, [r4]
    16dc:	b	14dc <coda_cursor_read_double+0xc0>
    16e0:	.word	0x000001c4
    16e4:	.word	0x00000260

000016e8 <read_float>:
    16e8:	push	{fp, lr}
    16ec:	mov	fp, sp
    16f0:	ldr	r2, [r0, #4]
    16f4:	add	r2, r0, r2, lsl #4
    16f8:	ldr	r2, [r2, #-8]
    16fc:	ldr	r2, [r2]
    1700:	sub	r3, r2, #100	; 0x64
    1704:	cmp	r3, #5
    1708:	bhi	1734 <read_float+0x4c>
    170c:	add	r2, pc, #0
    1710:	ldr	pc, [r2, r3, lsl #2]
    1714:	.word	0x0000172c
    1718:	.word	0x0000176c
    171c:	.word	0x00001754
    1720:	.word	0x00001764
    1724:	.word	0x0000174c
    1728:	.word	0x00001780
    172c:	pop	{fp, lr}
    1730:	b	0 <coda_mem_cursor_read_float>
    1734:	cmp	r2, #1
    1738:	beq	175c <read_float+0x74>
    173c:	cmp	r2, #0
    1740:	bne	1788 <read_float+0xa0>
    1744:	pop	{fp, lr}
    1748:	b	0 <coda_ascii_cursor_read_float>
    174c:	pop	{fp, lr}
    1750:	b	0 <coda_netcdf_cursor_read_float>
    1754:	mvn	r0, #12
    1758:	b	1770 <read_float+0x88>
    175c:	pop	{fp, lr}
    1760:	b	0 <coda_bin_cursor_read_float>
    1764:	pop	{fp, lr}
    1768:	b	0 <coda_cdf_cursor_read_float>
    176c:	mvn	r0, #10
    1770:	mov	r1, #0
    1774:	bl	0 <coda_set_error>
    1778:	mvn	r0, #0
    177c:	pop	{fp, pc}
    1780:	pop	{fp, lr}
    1784:	b	0 <coda_grib_cursor_read_float>
    1788:	movw	r0, #0
    178c:	movw	r1, #0
    1790:	movw	r3, #0
    1794:	movw	r2, #642	; 0x282
    1798:	movt	r0, #0
    179c:	movt	r1, #0
    17a0:	movt	r3, #0
    17a4:	bl	0 <__assert_fail>

000017a8 <read_double>:
    17a8:	push	{r4, r5, r6, sl, fp, lr}
    17ac:	add	fp, sp, #16
    17b0:	sub	sp, sp, #536	; 0x218
    17b4:	mov	r4, r1
    17b8:	mov	r1, r0
    17bc:	ldr	r0, [r0, #4]
    17c0:	add	r0, r1, r0, lsl #4
    17c4:	ldr	r6, [r0, #-8]
    17c8:	ldr	r0, [r6]
    17cc:	cmp	r0, #99	; 0x63
    17d0:	ldrhi	r2, [r6, #4]
    17d4:	movls	r2, r6
    17d8:	ldr	r3, [r2, #8]
    17dc:	cmp	r3, #6
    17e0:	bne	183c <read_double+0x94>
    17e4:	ldr	r2, [r2, #40]	; 0x28
    17e8:	cmp	r2, #1
    17ec:	beq	189c <read_double+0xf4>
    17f0:	cmp	r2, #2
    17f4:	bne	183c <read_double+0x94>
    17f8:	add	r0, sp, #16
    17fc:	mov	r2, #520	; 0x208
    1800:	bl	0 <memcpy>
    1804:	ldr	r0, [r6]
    1808:	cmp	r0, #99	; 0x63
    180c:	add	r0, sp, #16
    1810:	ldrhi	r6, [r6, #4]
    1814:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1818:	mvn	r5, #0
    181c:	cmp	r0, #0
    1820:	bne	1978 <read_double+0x1d0>
    1824:	ldr	r0, [r6, #52]	; 0x34
    1828:	add	r1, sp, #16
    182c:	mov	r2, r4
    1830:	bl	0 <coda_expression_eval_float>
    1834:	mov	r5, r0
    1838:	b	1978 <read_double+0x1d0>
    183c:	sub	r2, r0, #100	; 0x64
    1840:	cmp	r2, #4
    1844:	bhi	1878 <read_double+0xd0>
    1848:	add	r0, pc, #0
    184c:	ldr	pc, [r0, r2, lsl #2]
    1850:	.word	0x00001864
    1854:	.word	0x00001968
    1858:	.word	0x0000194c
    185c:	.word	0x00001954
    1860:	.word	0x00001938
    1864:	mov	r0, r1
    1868:	mov	r1, r4
    186c:	sub	sp, fp, #16
    1870:	pop	{r4, r5, r6, sl, fp, lr}
    1874:	b	0 <coda_mem_cursor_read_double>
    1878:	cmp	r0, #1
    187c:	beq	1984 <read_double+0x1dc>
    1880:	cmp	r0, #0
    1884:	bne	19c0 <read_double+0x218>
    1888:	mov	r0, r1
    188c:	mov	r1, r4
    1890:	sub	sp, fp, #16
    1894:	pop	{r4, r5, r6, sl, fp, lr}
    1898:	b	0 <coda_ascii_cursor_read_double>
    189c:	add	r5, sp, #16
    18a0:	mov	r2, #520	; 0x208
    18a4:	mov	r0, r5
    18a8:	bl	0 <memcpy>
    18ac:	mov	r0, r5
    18b0:	bl	0 <coda_cursor_use_base_type_of_special_type>
    18b4:	mvn	r5, #0
    18b8:	cmp	r0, #0
    18bc:	bne	1978 <read_double+0x1d0>
    18c0:	add	r0, sp, #16
    18c4:	bl	0 <coda_cursor_goto_first_record_field>
    18c8:	cmp	r0, #0
    18cc:	bne	1978 <read_double+0x1d0>
    18d0:	add	r0, sp, #16
    18d4:	add	r1, sp, #12
    18d8:	bl	7c8 <coda_cursor_read_int32>
    18dc:	cmp	r0, #0
    18e0:	bne	1978 <read_double+0x1d0>
    18e4:	add	r0, sp, #16
    18e8:	bl	0 <coda_cursor_goto_next_record_field>
    18ec:	cmp	r0, #0
    18f0:	bne	1978 <read_double+0x1d0>
    18f4:	add	r0, sp, #16
    18f8:	mov	r1, sp
    18fc:	bl	141c <coda_cursor_read_double>
    1900:	cmp	r0, #0
    1904:	bne	1978 <read_double+0x1d0>
    1908:	ldr	r0, [sp, #12]
    190c:	vldr	d16, [sp]
    1910:	vmov.f64	d17, #112	; 0x3f800000  1.0
    1914:	cmp	r0, #1
    1918:	blt	1998 <read_double+0x1f0>
    191c:	vmov.f64	d18, #36	; 0x41200000  10.0
    1920:	subs	r0, r0, #1
    1924:	vmul.f64	d17, d17, d18
    1928:	bne	1920 <read_double+0x178>
    192c:	vmov.f64	d18, #112	; 0x3f800000  1.0
    1930:	vdiv.f64	d17, d18, d17
    1934:	b	19b0 <read_double+0x208>
    1938:	mov	r0, r1
    193c:	mov	r1, r4
    1940:	sub	sp, fp, #16
    1944:	pop	{r4, r5, r6, sl, fp, lr}
    1948:	b	0 <coda_netcdf_cursor_read_double>
    194c:	mvn	r0, #12
    1950:	b	196c <read_double+0x1c4>
    1954:	mov	r0, r1
    1958:	mov	r1, r4
    195c:	sub	sp, fp, #16
    1960:	pop	{r4, r5, r6, sl, fp, lr}
    1964:	b	0 <coda_cdf_cursor_read_double>
    1968:	mvn	r0, #10
    196c:	mov	r1, #0
    1970:	bl	0 <coda_set_error>
    1974:	mvn	r5, #0
    1978:	mov	r0, r5
    197c:	sub	sp, fp, #16
    1980:	pop	{r4, r5, r6, sl, fp, pc}
    1984:	mov	r0, r1
    1988:	mov	r1, r4
    198c:	sub	sp, fp, #16
    1990:	pop	{r4, r5, r6, sl, fp, lr}
    1994:	b	0 <coda_bin_cursor_read_double>
    1998:	cmp	r0, #0
    199c:	beq	19b0 <read_double+0x208>
    19a0:	vmov.f64	d18, #36	; 0x41200000  10.0
    19a4:	adds	r0, r0, #1
    19a8:	vmul.f64	d17, d17, d18
    19ac:	bne	19a4 <read_double+0x1fc>
    19b0:	vmul.f64	d16, d16, d17
    19b4:	mov	r5, #0
    19b8:	vstr	d16, [r4]
    19bc:	b	1978 <read_double+0x1d0>
    19c0:	movw	r0, #0
    19c4:	movw	r1, #0
    19c8:	movw	r3, #0
    19cc:	mov	r2, #692	; 0x2b4
    19d0:	movt	r0, #0
    19d4:	movt	r1, #0
    19d8:	movt	r3, #0
    19dc:	bl	0 <__assert_fail>

000019e0 <coda_cursor_read_char>:
    19e0:	push	{r4, r5, fp, lr}
    19e4:	add	fp, sp, #8
    19e8:	cmp	r0, #0
    19ec:	beq	1a40 <coda_cursor_read_char+0x60>
    19f0:	mov	r2, r0
    19f4:	ldr	r0, [r0, #4]
    19f8:	cmp	r0, #1
    19fc:	blt	1a40 <coda_cursor_read_char+0x60>
    1a00:	add	r0, r2, r0, lsl #4
    1a04:	ldr	r4, [r0, #-8]
    1a08:	cmp	r4, #0
    1a0c:	beq	1a40 <coda_cursor_read_char+0x60>
    1a10:	cmp	r1, #0
    1a14:	beq	1a64 <coda_cursor_read_char+0x84>
    1a18:	ldr	r3, [r4]
    1a1c:	cmp	r3, #99	; 0x63
    1a20:	ldrhi	r4, [r4, #4]
    1a24:	ldr	r5, [r4, #8]
    1a28:	cmp	r5, #2
    1a2c:	bne	1a7c <coda_cursor_read_char+0x9c>
    1a30:	ldr	r0, [pc, #340]	; 1b8c <coda_cursor_read_char+0x1ac>
    1a34:	ldr	r5, [pc, r0]
    1a38:	bl	0 <__aeabi_read_tp>
    1a3c:	b	1a90 <coda_cursor_read_char+0xb0>
    1a40:	movw	r1, #0
    1a44:	movw	r2, #0
    1a48:	mvn	r0, #99	; 0x63
    1a4c:	movw	r3, #2698	; 0xa8a
    1a50:	movt	r1, #0
    1a54:	movt	r2, #0
    1a58:	bl	0 <coda_set_error>
    1a5c:	mvn	r0, #0
    1a60:	pop	{r4, r5, fp, pc}
    1a64:	movw	r1, #0
    1a68:	movw	r2, #0
    1a6c:	mvn	r0, #99	; 0x63
    1a70:	movw	r3, #2703	; 0xa8f
    1a74:	movt	r1, #0
    1a78:	b	1a54 <coda_cursor_read_char+0x74>
    1a7c:	bl	0 <__aeabi_read_tp>
    1a80:	cmp	r5, #3
    1a84:	bne	1aac <coda_cursor_read_char+0xcc>
    1a88:	ldr	r5, [pc, #248]	; 1b88 <coda_cursor_read_char+0x1a8>
    1a8c:	ldr	r5, [pc, r5]
    1a90:	ldr	r0, [r0, r5]
    1a94:	cmp	r0, #0
    1a98:	beq	1aac <coda_cursor_read_char+0xcc>
    1a9c:	ldr	r5, [r4, #48]	; 0x30
    1aa0:	mov	r0, #9
    1aa4:	cmp	r5, #0
    1aa8:	bne	1aec <coda_cursor_read_char+0x10c>
    1aac:	ldr	r0, [r4, #12]
    1ab0:	cmp	r0, #10
    1ab4:	bne	1aec <coda_cursor_read_char+0x10c>
    1ab8:	sub	r0, r3, #100	; 0x64
    1abc:	cmp	r0, #4
    1ac0:	bhi	1b0c <coda_cursor_read_char+0x12c>
    1ac4:	add	r3, pc, #0
    1ac8:	ldr	pc, [r3, r0, lsl #2]
    1acc:	.word	0x00001ae0
    1ad0:	.word	0x00001b40
    1ad4:	.word	0x00001b68
    1ad8:	.word	0x00001b54
    1adc:	.word	0x00001b28
    1ae0:	mov	r0, r2
    1ae4:	bl	0 <coda_mem_cursor_read_char>
    1ae8:	b	1b5c <coda_cursor_read_char+0x17c>
    1aec:	bl	0 <coda_type_get_native_type_name>
    1af0:	movw	r1, #0
    1af4:	mov	r2, r0
    1af8:	mvn	r0, #104	; 0x68
    1afc:	movt	r1, #0
    1b00:	bl	0 <coda_set_error>
    1b04:	mvn	r0, #0
    1b08:	pop	{r4, r5, fp, pc}
    1b0c:	cmp	r3, #1
    1b10:	beq	1b34 <coda_cursor_read_char+0x154>
    1b14:	cmp	r3, #0
    1b18:	bne	1b68 <coda_cursor_read_char+0x188>
    1b1c:	mov	r0, r2
    1b20:	bl	0 <coda_ascii_cursor_read_char>
    1b24:	b	1b5c <coda_cursor_read_char+0x17c>
    1b28:	mov	r0, r2
    1b2c:	bl	0 <coda_netcdf_cursor_read_char>
    1b30:	b	1b5c <coda_cursor_read_char+0x17c>
    1b34:	mov	r0, r2
    1b38:	bl	0 <coda_bin_cursor_read_char>
    1b3c:	b	1b5c <coda_cursor_read_char+0x17c>
    1b40:	mvn	r0, #10
    1b44:	mov	r1, #0
    1b48:	bl	0 <coda_set_error>
    1b4c:	mvn	r0, #0
    1b50:	pop	{r4, r5, fp, pc}
    1b54:	mov	r0, r2
    1b58:	bl	0 <coda_cdf_cursor_read_char>
    1b5c:	cmp	r0, #0
    1b60:	mvnne	r0, #0
    1b64:	pop	{r4, r5, fp, pc}
    1b68:	movw	r0, #0
    1b6c:	movw	r1, #0
    1b70:	movw	r3, #0
    1b74:	movw	r2, #722	; 0x2d2
    1b78:	movt	r0, #0
    1b7c:	movt	r1, #0
    1b80:	movt	r3, #0
    1b84:	bl	0 <__assert_fail>
    1b88:	.word	0x000000f4
    1b8c:	.word	0x00000150

00001b90 <coda_cursor_read_string>:
    1b90:	push	{r4, r5, r6, r7, fp, lr}
    1b94:	add	fp, sp, #16
    1b98:	sub	sp, sp, #8
    1b9c:	cmp	r1, #0
    1ba0:	beq	1c24 <coda_cursor_read_string+0x94>
    1ba4:	mov	r5, r2
    1ba8:	cmp	r2, #0
    1bac:	ble	1c40 <coda_cursor_read_string+0xb0>
    1bb0:	mov	r6, r1
    1bb4:	add	r1, sp, #4
    1bb8:	mov	r7, r0
    1bbc:	bl	0 <coda_cursor_has_ascii_content>
    1bc0:	mvn	r4, #0
    1bc4:	cmp	r0, #0
    1bc8:	bne	1c68 <coda_cursor_read_string+0xd8>
    1bcc:	ldr	r0, [sp, #4]
    1bd0:	cmp	r0, #0
    1bd4:	beq	1c74 <coda_cursor_read_string+0xe4>
    1bd8:	ldr	r0, [r7, #4]
    1bdc:	add	r0, r7, r0, lsl #4
    1be0:	ldr	r0, [r0, #-8]
    1be4:	ldr	r0, [r0]
    1be8:	sub	r1, r0, #100	; 0x64
    1bec:	cmp	r1, #4
    1bf0:	bhi	1c88 <coda_cursor_read_string+0xf8>
    1bf4:	add	r0, pc, #0
    1bf8:	ldr	pc, [r0, r1, lsl #2]
    1bfc:	.word	0x00001c10
    1c00:	.word	0x00001cc8
    1c04:	.word	0x00001cc0
    1c08:	.word	0x00001cd8
    1c0c:	.word	0x00001cac
    1c10:	mov	r0, r7
    1c14:	mov	r1, r6
    1c18:	mov	r2, r5
    1c1c:	bl	0 <coda_mem_cursor_read_string>
    1c20:	b	1cfc <coda_cursor_read_string+0x16c>
    1c24:	movw	r1, #0
    1c28:	movw	r2, #0
    1c2c:	mvn	r0, #99	; 0x63
    1c30:	movw	r3, #2747	; 0xabb
    1c34:	movt	r1, #0
    1c38:	movt	r2, #0
    1c3c:	b	1c60 <coda_cursor_read_string+0xd0>
    1c40:	movw	r1, #0
    1c44:	movw	r3, #0
    1c48:	movw	r0, #2753	; 0xac1
    1c4c:	mov	r2, r5
    1c50:	str	r0, [sp]
    1c54:	movt	r1, #0
    1c58:	movt	r3, #0
    1c5c:	mvn	r0, #99	; 0x63
    1c60:	bl	0 <coda_set_error>
    1c64:	mvn	r4, #0
    1c68:	mov	r0, r4
    1c6c:	sub	sp, fp, #16
    1c70:	pop	{r4, r5, r6, r7, fp, pc}
    1c74:	movw	r1, #0
    1c78:	mvn	r0, #104	; 0x68
    1c7c:	movt	r1, #0
    1c80:	bl	0 <coda_set_error>
    1c84:	b	1c68 <coda_cursor_read_string+0xd8>
    1c88:	cmp	r0, #1
    1c8c:	beq	1cec <coda_cursor_read_string+0x15c>
    1c90:	cmp	r0, #0
    1c94:	bne	1d04 <coda_cursor_read_string+0x174>
    1c98:	mov	r0, r7
    1c9c:	mov	r1, r6
    1ca0:	mov	r2, r5
    1ca4:	bl	0 <coda_ascii_cursor_read_string>
    1ca8:	b	1cfc <coda_cursor_read_string+0x16c>
    1cac:	mov	r0, r7
    1cb0:	mov	r1, r6
    1cb4:	mov	r2, r5
    1cb8:	bl	0 <coda_netcdf_cursor_read_string>
    1cbc:	b	1cfc <coda_cursor_read_string+0x16c>
    1cc0:	mvn	r0, #12
    1cc4:	b	1ccc <coda_cursor_read_string+0x13c>
    1cc8:	mvn	r0, #10
    1ccc:	mov	r1, #0
    1cd0:	bl	0 <coda_set_error>
    1cd4:	b	1c68 <coda_cursor_read_string+0xd8>
    1cd8:	mov	r0, r7
    1cdc:	mov	r1, r6
    1ce0:	mov	r2, r5
    1ce4:	bl	0 <coda_cdf_cursor_read_string>
    1ce8:	b	1cfc <coda_cursor_read_string+0x16c>
    1cec:	mov	r0, r7
    1cf0:	mov	r1, r6
    1cf4:	mov	r2, r5
    1cf8:	bl	0 <coda_bin_cursor_read_string>
    1cfc:	mov	r4, r0
    1d00:	b	1c68 <coda_cursor_read_string+0xd8>
    1d04:	movw	r0, #0
    1d08:	movw	r1, #0
    1d0c:	movw	r3, #0
    1d10:	movw	r2, #758	; 0x2f6
    1d14:	movt	r0, #0
    1d18:	movt	r1, #0
    1d1c:	movt	r3, #0
    1d20:	bl	0 <__assert_fail>

00001d24 <coda_cursor_read_bits>:
    1d24:	push	{r4, sl, fp, lr}
    1d28:	add	fp, sp, #8
    1d2c:	cmp	r0, #0
    1d30:	beq	1d98 <coda_cursor_read_bits+0x74>
    1d34:	ldr	ip, [r0, #4]
    1d38:	cmp	ip, #1
    1d3c:	blt	1d98 <coda_cursor_read_bits+0x74>
    1d40:	add	ip, r0, ip, lsl #4
    1d44:	ldr	ip, [ip, #-8]
    1d48:	cmp	ip, #0
    1d4c:	beq	1d98 <coda_cursor_read_bits+0x74>
    1d50:	cmp	r1, #0
    1d54:	beq	1dbc <coda_cursor_read_bits+0x98>
    1d58:	ldr	lr, [fp, #12]
    1d5c:	cmn	lr, #1
    1d60:	ble	1dd4 <coda_cursor_read_bits+0xb0>
    1d64:	ldr	r4, [fp, #8]
    1d68:	orrs	r4, r4, lr
    1d6c:	moveq	r0, #0
    1d70:	popeq	{r4, sl, fp, pc}
    1d74:	ldr	ip, [ip]
    1d78:	cmp	ip, #100	; 0x64
    1d7c:	beq	1dec <coda_cursor_read_bits+0xc8>
    1d80:	cmp	ip, #1
    1d84:	beq	1df4 <coda_cursor_read_bits+0xd0>
    1d88:	cmp	ip, #0
    1d8c:	bne	1dfc <coda_cursor_read_bits+0xd8>
    1d90:	pop	{r4, sl, fp, lr}
    1d94:	b	0 <coda_ascii_cursor_read_bits>
    1d98:	movw	r1, #0
    1d9c:	movw	r2, #0
    1da0:	mvn	r0, #99	; 0x63
    1da4:	movw	r3, #2789	; 0xae5
    1da8:	movt	r1, #0
    1dac:	movt	r2, #0
    1db0:	bl	0 <coda_set_error>
    1db4:	mvn	r0, #0
    1db8:	pop	{r4, sl, fp, pc}
    1dbc:	movw	r1, #0
    1dc0:	movw	r2, #0
    1dc4:	mvn	r0, #99	; 0x63
    1dc8:	movw	r3, #2794	; 0xaea
    1dcc:	movt	r1, #0
    1dd0:	b	1dac <coda_cursor_read_bits+0x88>
    1dd4:	movw	r1, #0
    1dd8:	movw	r2, #0
    1ddc:	mvn	r0, #99	; 0x63
    1de0:	movw	r3, #2799	; 0xaef
    1de4:	movt	r1, #0
    1de8:	b	1dac <coda_cursor_read_bits+0x88>
    1dec:	pop	{r4, sl, fp, lr}
    1df0:	b	0 <coda_mem_cursor_read_bits>
    1df4:	pop	{r4, sl, fp, lr}
    1df8:	b	0 <coda_bin_cursor_read_bits>
    1dfc:	movw	r1, #0
    1e00:	mvn	r0, #104	; 0x68
    1e04:	movt	r1, #0
    1e08:	bl	0 <coda_set_error>
    1e0c:	mvn	r0, #0
    1e10:	pop	{r4, sl, fp, pc}

00001e14 <coda_cursor_read_bytes>:
    1e14:	push	{r4, sl, fp, lr}
    1e18:	add	fp, sp, #8
    1e1c:	cmp	r0, #0
    1e20:	beq	1e90 <coda_cursor_read_bytes+0x7c>
    1e24:	ldr	ip, [r0, #4]
    1e28:	cmp	ip, #1
    1e2c:	blt	1e90 <coda_cursor_read_bytes+0x7c>
    1e30:	add	ip, r0, ip, lsl #4
    1e34:	ldr	ip, [ip, #-8]
    1e38:	cmp	ip, #0
    1e3c:	beq	1e90 <coda_cursor_read_bytes+0x7c>
    1e40:	cmp	r1, #0
    1e44:	beq	1eb4 <coda_cursor_read_bytes+0xa0>
    1e48:	cmn	r3, #1
    1e4c:	ble	1ecc <coda_cursor_read_bytes+0xb8>
    1e50:	ldr	lr, [fp, #12]
    1e54:	cmn	lr, #1
    1e58:	ble	1ee4 <coda_cursor_read_bytes+0xd0>
    1e5c:	ldr	r4, [fp, #8]
    1e60:	orrs	r4, r4, lr
    1e64:	moveq	r0, #0
    1e68:	popeq	{r4, sl, fp, pc}
    1e6c:	ldr	ip, [ip]
    1e70:	cmp	ip, #100	; 0x64
    1e74:	beq	1efc <coda_cursor_read_bytes+0xe8>
    1e78:	cmp	ip, #1
    1e7c:	beq	1f04 <coda_cursor_read_bytes+0xf0>
    1e80:	cmp	ip, #0
    1e84:	bne	1f0c <coda_cursor_read_bytes+0xf8>
    1e88:	pop	{r4, sl, fp, lr}
    1e8c:	b	0 <coda_ascii_cursor_read_bytes>
    1e90:	movw	r1, #0
    1e94:	movw	r2, #0
    1e98:	mvn	r0, #99	; 0x63
    1e9c:	movw	r3, #2845	; 0xb1d
    1ea0:	movt	r1, #0
    1ea4:	movt	r2, #0
    1ea8:	bl	0 <coda_set_error>
    1eac:	mvn	r0, #0
    1eb0:	pop	{r4, sl, fp, pc}
    1eb4:	movw	r1, #0
    1eb8:	movw	r2, #0
    1ebc:	mvn	r0, #99	; 0x63
    1ec0:	movw	r3, #2850	; 0xb22
    1ec4:	movt	r1, #0
    1ec8:	b	1ea4 <coda_cursor_read_bytes+0x90>
    1ecc:	movw	r1, #0
    1ed0:	movw	r2, #0
    1ed4:	mvn	r0, #99	; 0x63
    1ed8:	movw	r3, #2855	; 0xb27
    1edc:	movt	r1, #0
    1ee0:	b	1ea4 <coda_cursor_read_bytes+0x90>
    1ee4:	movw	r1, #0
    1ee8:	movw	r2, #0
    1eec:	mvn	r0, #99	; 0x63
    1ef0:	movw	r3, #2860	; 0xb2c
    1ef4:	movt	r1, #0
    1ef8:	b	1ea4 <coda_cursor_read_bytes+0x90>
    1efc:	pop	{r4, sl, fp, lr}
    1f00:	b	0 <coda_mem_cursor_read_bytes>
    1f04:	pop	{r4, sl, fp, lr}
    1f08:	b	0 <coda_bin_cursor_read_bytes>
    1f0c:	movw	r1, #0
    1f10:	mvn	r0, #104	; 0x68
    1f14:	movt	r1, #0
    1f18:	bl	0 <coda_set_error>
    1f1c:	mvn	r0, #0
    1f20:	pop	{r4, sl, fp, pc}

00001f24 <coda_cursor_read_int8_array>:
    1f24:	push	{r4, r5, fp, lr}
    1f28:	add	fp, sp, #8
    1f2c:	cmp	r0, #0
    1f30:	beq	1f94 <coda_cursor_read_int8_array+0x70>
    1f34:	mov	r3, r0
    1f38:	ldr	r0, [r0, #4]
    1f3c:	cmp	r0, #1
    1f40:	blt	1f94 <coda_cursor_read_int8_array+0x70>
    1f44:	add	r0, r3, r0, lsl #4
    1f48:	ldr	r4, [r0, #-8]
    1f4c:	cmp	r4, #0
    1f50:	beq	1f94 <coda_cursor_read_int8_array+0x70>
    1f54:	cmp	r1, #0
    1f58:	beq	1fb8 <coda_cursor_read_int8_array+0x94>
    1f5c:	ldr	r0, [r4]
    1f60:	cmp	r0, #99	; 0x63
    1f64:	ldrhi	r4, [r4, #4]
    1f68:	ldr	r0, [r4, #8]
    1f6c:	cmp	r0, #1
    1f70:	bne	1fd0 <coda_cursor_read_int8_array+0xac>
    1f74:	ldr	r4, [r4, #40]	; 0x28
    1f78:	ldr	r5, [r4, #8]
    1f7c:	cmp	r5, #2
    1f80:	bne	1fe4 <coda_cursor_read_int8_array+0xc0>
    1f84:	ldr	r0, [pc, #204]	; 2058 <coda_cursor_read_int8_array+0x134>
    1f88:	ldr	r5, [pc, r0]
    1f8c:	bl	0 <__aeabi_read_tp>
    1f90:	b	1ff8 <coda_cursor_read_int8_array+0xd4>
    1f94:	movw	r1, #0
    1f98:	movw	r2, #0
    1f9c:	mvn	r0, #99	; 0x63
    1fa0:	movw	r3, #2908	; 0xb5c
    1fa4:	movt	r1, #0
    1fa8:	movt	r2, #0
    1fac:	bl	0 <coda_set_error>
    1fb0:	mvn	r0, #0
    1fb4:	pop	{r4, r5, fp, pc}
    1fb8:	movw	r1, #0
    1fbc:	movw	r2, #0
    1fc0:	mvn	r0, #99	; 0x63
    1fc4:	movw	r3, #2913	; 0xb61
    1fc8:	movt	r1, #0
    1fcc:	b	1fa8 <coda_cursor_read_int8_array+0x84>
    1fd0:	bl	0 <coda_type_get_class_name>
    1fd4:	movw	r1, #0
    1fd8:	mov	r2, r0
    1fdc:	movt	r1, #0
    1fe0:	b	2030 <coda_cursor_read_int8_array+0x10c>
    1fe4:	bl	0 <__aeabi_read_tp>
    1fe8:	cmp	r5, #3
    1fec:	bne	2014 <coda_cursor_read_int8_array+0xf0>
    1ff0:	ldr	r5, [pc, #92]	; 2054 <coda_cursor_read_int8_array+0x130>
    1ff4:	ldr	r5, [pc, r5]
    1ff8:	ldr	r0, [r0, r5]
    1ffc:	cmp	r0, #0
    2000:	beq	2014 <coda_cursor_read_int8_array+0xf0>
    2004:	ldr	r5, [r4, #48]	; 0x30
    2008:	mov	r0, #9
    200c:	cmp	r5, #0
    2010:	bne	2020 <coda_cursor_read_int8_array+0xfc>
    2014:	ldr	r0, [r4, #12]
    2018:	cmp	r0, #0
    201c:	beq	2040 <coda_cursor_read_int8_array+0x11c>
    2020:	bl	0 <coda_type_get_native_type_name>
    2024:	movw	r1, #0
    2028:	mov	r2, r0
    202c:	movt	r1, #0
    2030:	mvn	r0, #104	; 0x68
    2034:	bl	0 <coda_set_error>
    2038:	mvn	r0, #0
    203c:	pop	{r4, r5, fp, pc}
    2040:	mov	r0, r3
    2044:	bl	205c <read_int8_array>
    2048:	cmp	r0, #0
    204c:	mvnne	r0, #0
    2050:	pop	{r4, r5, fp, pc}
    2054:	.word	0x00000058
    2058:	.word	0x000000c8

0000205c <read_int8_array>:
    205c:	push	{r4, r5, r6, sl, fp, lr}
    2060:	add	fp, sp, #16
    2064:	mov	r6, r0
    2068:	ldr	r0, [r0, #4]
    206c:	mov	r4, r1
    2070:	mov	r5, r2
    2074:	add	r0, r6, r0, lsl #4
    2078:	ldr	r0, [r0, #-8]
    207c:	ldr	r0, [r0]
    2080:	sub	r1, r0, #100	; 0x64
    2084:	cmp	r1, #5
    2088:	bhi	20c0 <read_int8_array+0x64>
    208c:	add	r0, pc, #0
    2090:	ldr	pc, [r0, r1, lsl #2]
    2094:	.word	0x000020ac
    2098:	.word	0x00002110
    209c:	.word	0x00002108
    20a0:	.word	0x00002124
    20a4:	.word	0x000020f8
    20a8:	.word	0x00002164
    20ac:	mov	r0, r6
    20b0:	mov	r1, r4
    20b4:	mov	r2, r5
    20b8:	pop	{r4, r5, r6, sl, fp, lr}
    20bc:	b	0 <coda_mem_cursor_read_int8_array>
    20c0:	cmp	r0, #1
    20c4:	beq	20e4 <read_int8_array+0x88>
    20c8:	cmp	r0, #0
    20cc:	bne	2140 <read_int8_array+0xe4>
    20d0:	mov	r0, r6
    20d4:	mov	r1, r4
    20d8:	mov	r2, r5
    20dc:	pop	{r4, r5, r6, sl, fp, lr}
    20e0:	b	0 <coda_ascii_cursor_read_int8_array>
    20e4:	mov	r0, r6
    20e8:	mov	r1, r4
    20ec:	mov	r2, r5
    20f0:	pop	{r4, r5, r6, sl, fp, lr}
    20f4:	b	0 <coda_bin_cursor_read_int8_array>
    20f8:	mov	r0, r6
    20fc:	mov	r1, r4
    2100:	bl	0 <coda_netcdf_cursor_read_int8_array>
    2104:	b	2130 <read_int8_array+0xd4>
    2108:	mvn	r0, #12
    210c:	b	2114 <read_int8_array+0xb8>
    2110:	mvn	r0, #10
    2114:	mov	r1, #0
    2118:	bl	0 <coda_set_error>
    211c:	mvn	r0, #0
    2120:	pop	{r4, r5, r6, sl, fp, pc}
    2124:	mov	r0, r6
    2128:	mov	r1, r4
    212c:	bl	0 <coda_cdf_cursor_read_int8_array>
    2130:	mov	r1, r0
    2134:	mvn	r0, #0
    2138:	cmp	r1, #0
    213c:	popne	{r4, r5, r6, sl, fp, pc}
    2140:	cmp	r5, #0
    2144:	beq	215c <read_int8_array+0x100>
    2148:	mov	r0, r6
    214c:	mov	r1, r4
    2150:	mov	r2, #1
    2154:	pop	{r4, r5, r6, sl, fp, lr}
    2158:	b	aae0 <transpose_array>
    215c:	mov	r0, #0
    2160:	pop	{r4, r5, r6, sl, fp, pc}
    2164:	movw	r0, #0
    2168:	movw	r1, #0
    216c:	movw	r3, #0
    2170:	movw	r2, #807	; 0x327
    2174:	movt	r0, #0
    2178:	movt	r1, #0
    217c:	movt	r3, #0
    2180:	bl	0 <__assert_fail>

00002184 <coda_cursor_read_uint8_array>:
    2184:	push	{r4, r5, fp, lr}
    2188:	add	fp, sp, #8
    218c:	cmp	r0, #0
    2190:	beq	21f4 <coda_cursor_read_uint8_array+0x70>
    2194:	mov	r3, r0
    2198:	ldr	r0, [r0, #4]
    219c:	cmp	r0, #1
    21a0:	blt	21f4 <coda_cursor_read_uint8_array+0x70>
    21a4:	add	r0, r3, r0, lsl #4
    21a8:	ldr	r4, [r0, #-8]
    21ac:	cmp	r4, #0
    21b0:	beq	21f4 <coda_cursor_read_uint8_array+0x70>
    21b4:	cmp	r1, #0
    21b8:	beq	2218 <coda_cursor_read_uint8_array+0x94>
    21bc:	ldr	r0, [r4]
    21c0:	cmp	r0, #99	; 0x63
    21c4:	ldrhi	r4, [r4, #4]
    21c8:	ldr	r0, [r4, #8]
    21cc:	cmp	r0, #1
    21d0:	bne	2230 <coda_cursor_read_uint8_array+0xac>
    21d4:	ldr	r4, [r4, #40]	; 0x28
    21d8:	ldr	r5, [r4, #8]
    21dc:	cmp	r5, #2
    21e0:	bne	2244 <coda_cursor_read_uint8_array+0xc0>
    21e4:	ldr	r0, [pc, #204]	; 22b8 <coda_cursor_read_uint8_array+0x134>
    21e8:	ldr	r5, [pc, r0]
    21ec:	bl	0 <__aeabi_read_tp>
    21f0:	b	2258 <coda_cursor_read_uint8_array+0xd4>
    21f4:	movw	r1, #0
    21f8:	movw	r2, #0
    21fc:	mvn	r0, #99	; 0x63
    2200:	movw	r3, #2967	; 0xb97
    2204:	movt	r1, #0
    2208:	movt	r2, #0
    220c:	bl	0 <coda_set_error>
    2210:	mvn	r0, #0
    2214:	pop	{r4, r5, fp, pc}
    2218:	movw	r1, #0
    221c:	movw	r2, #0
    2220:	mvn	r0, #99	; 0x63
    2224:	movw	r3, #2972	; 0xb9c
    2228:	movt	r1, #0
    222c:	b	2208 <coda_cursor_read_uint8_array+0x84>
    2230:	bl	0 <coda_type_get_class_name>
    2234:	movw	r1, #0
    2238:	mov	r2, r0
    223c:	movt	r1, #0
    2240:	b	22a4 <coda_cursor_read_uint8_array+0x120>
    2244:	bl	0 <__aeabi_read_tp>
    2248:	cmp	r5, #3
    224c:	bne	2274 <coda_cursor_read_uint8_array+0xf0>
    2250:	ldr	r5, [pc, #92]	; 22b4 <coda_cursor_read_uint8_array+0x130>
    2254:	ldr	r5, [pc, r5]
    2258:	ldr	r0, [r0, r5]
    225c:	cmp	r0, #0
    2260:	beq	2274 <coda_cursor_read_uint8_array+0xf0>
    2264:	ldr	r5, [r4, #48]	; 0x30
    2268:	mov	r0, #9
    226c:	cmp	r5, #0
    2270:	bne	2294 <coda_cursor_read_uint8_array+0x110>
    2274:	ldr	r0, [r4, #12]
    2278:	cmp	r0, #1
    227c:	bne	2294 <coda_cursor_read_uint8_array+0x110>
    2280:	mov	r0, r3
    2284:	bl	22bc <read_uint8_array>
    2288:	cmp	r0, #0
    228c:	mvnne	r0, #0
    2290:	pop	{r4, r5, fp, pc}
    2294:	bl	0 <coda_type_get_native_type_name>
    2298:	movw	r1, #0
    229c:	mov	r2, r0
    22a0:	movt	r1, #0
    22a4:	mvn	r0, #104	; 0x68
    22a8:	bl	0 <coda_set_error>
    22ac:	mvn	r0, #0
    22b0:	pop	{r4, r5, fp, pc}
    22b4:	.word	0x00000058
    22b8:	.word	0x000000c8

000022bc <read_uint8_array>:
    22bc:	push	{r4, r5, r6, sl, fp, lr}
    22c0:	add	fp, sp, #16
    22c4:	mov	r6, r0
    22c8:	ldr	r0, [r0, #4]
    22cc:	mov	r4, r1
    22d0:	mov	r5, r2
    22d4:	add	r0, r6, r0, lsl #4
    22d8:	ldr	r0, [r0, #-8]
    22dc:	ldr	r0, [r0]
    22e0:	sub	r1, r0, #100	; 0x64
    22e4:	cmp	r1, #5
    22e8:	bhi	2320 <read_uint8_array+0x64>
    22ec:	add	r0, pc, #0
    22f0:	ldr	pc, [r0, r1, lsl #2]
    22f4:	.word	0x0000230c
    22f8:	.word	0x00002344
    22fc:	.word	0x0000234c
    2300:	.word	0x00002360
    2304:	.word	0x000023b4
    2308:	.word	0x000023b4
    230c:	mov	r0, r6
    2310:	mov	r1, r4
    2314:	mov	r2, r5
    2318:	pop	{r4, r5, r6, sl, fp, lr}
    231c:	b	0 <coda_mem_cursor_read_uint8_array>
    2320:	cmp	r0, #1
    2324:	beq	2398 <read_uint8_array+0xdc>
    2328:	cmp	r0, #0
    232c:	bne	237c <read_uint8_array+0xc0>
    2330:	mov	r0, r6
    2334:	mov	r1, r4
    2338:	mov	r2, r5
    233c:	pop	{r4, r5, r6, sl, fp, lr}
    2340:	b	0 <coda_ascii_cursor_read_uint8_array>
    2344:	mvn	r0, #10
    2348:	b	2350 <read_uint8_array+0x94>
    234c:	mvn	r0, #12
    2350:	mov	r1, #0
    2354:	bl	0 <coda_set_error>
    2358:	mvn	r0, #0
    235c:	pop	{r4, r5, r6, sl, fp, pc}
    2360:	mov	r0, r6
    2364:	mov	r1, r4
    2368:	bl	0 <coda_cdf_cursor_read_uint8_array>
    236c:	mov	r1, r0
    2370:	mvn	r0, #0
    2374:	cmp	r1, #0
    2378:	popne	{r4, r5, r6, sl, fp, pc}
    237c:	cmp	r5, #0
    2380:	beq	23ac <read_uint8_array+0xf0>
    2384:	mov	r0, r6
    2388:	mov	r1, r4
    238c:	mov	r2, #1
    2390:	pop	{r4, r5, r6, sl, fp, lr}
    2394:	b	aae0 <transpose_array>
    2398:	mov	r0, r6
    239c:	mov	r1, r4
    23a0:	mov	r2, r5
    23a4:	pop	{r4, r5, r6, sl, fp, lr}
    23a8:	b	0 <coda_bin_cursor_read_uint8_array>
    23ac:	mov	r0, #0
    23b0:	pop	{r4, r5, r6, sl, fp, pc}
    23b4:	movw	r0, #0
    23b8:	movw	r1, #0
    23bc:	movw	r3, #0
    23c0:	movw	r2, #859	; 0x35b
    23c4:	movt	r0, #0
    23c8:	movt	r1, #0
    23cc:	movt	r3, #0
    23d0:	bl	0 <__assert_fail>

000023d4 <coda_cursor_read_int16_array>:
    23d4:	push	{r4, r5, r6, sl, fp, lr}
    23d8:	add	fp, sp, #16
    23dc:	sub	sp, sp, #8
    23e0:	cmp	r0, #0
    23e4:	beq	244c <coda_cursor_read_int16_array+0x78>
    23e8:	mov	r5, r0
    23ec:	ldr	r0, [r0, #4]
    23f0:	cmp	r0, #1
    23f4:	blt	244c <coda_cursor_read_int16_array+0x78>
    23f8:	add	r0, r5, r0, lsl #4
    23fc:	mov	r4, r1
    2400:	ldr	r1, [r0, #-8]
    2404:	cmp	r1, #0
    2408:	beq	244c <coda_cursor_read_int16_array+0x78>
    240c:	cmp	r4, #0
    2410:	beq	2478 <coda_cursor_read_int16_array+0xa4>
    2414:	ldr	r0, [r1]
    2418:	cmp	r0, #99	; 0x63
    241c:	ldrhi	r1, [r1, #4]
    2420:	ldr	r0, [r1, #8]
    2424:	cmp	r0, #1
    2428:	bne	2490 <coda_cursor_read_int16_array+0xbc>
    242c:	ldr	r1, [r1, #40]	; 0x28
    2430:	ldr	r3, [r1, #8]
    2434:	cmp	r3, #2
    2438:	bne	24a4 <coda_cursor_read_int16_array+0xd0>
    243c:	ldr	r0, [pc, #880]	; 27b4 <coda_cursor_read_int16_array+0x3e0>
    2440:	ldr	r3, [pc, r0]
    2444:	bl	0 <__aeabi_read_tp>
    2448:	b	24b8 <coda_cursor_read_int16_array+0xe4>
    244c:	movw	r1, #0
    2450:	movw	r2, #0
    2454:	mvn	r0, #99	; 0x63
    2458:	movw	r3, #3030	; 0xbd6
    245c:	movt	r1, #0
    2460:	movt	r2, #0
    2464:	bl	0 <coda_set_error>
    2468:	mvn	r6, #0
    246c:	mov	r0, r6
    2470:	sub	sp, fp, #16
    2474:	pop	{r4, r5, r6, sl, fp, pc}
    2478:	movw	r1, #0
    247c:	movw	r2, #0
    2480:	mvn	r0, #99	; 0x63
    2484:	movw	r3, #3035	; 0xbdb
    2488:	movt	r1, #0
    248c:	b	2460 <coda_cursor_read_int16_array+0x8c>
    2490:	bl	0 <coda_type_get_class_name>
    2494:	movw	r1, #0
    2498:	mov	r2, r0
    249c:	movt	r1, #0
    24a0:	b	2644 <coda_cursor_read_int16_array+0x270>
    24a4:	bl	0 <__aeabi_read_tp>
    24a8:	cmp	r3, #3
    24ac:	bne	24d4 <coda_cursor_read_int16_array+0x100>
    24b0:	ldr	r3, [pc, #760]	; 27b0 <coda_cursor_read_int16_array+0x3dc>
    24b4:	ldr	r3, [pc, r3]
    24b8:	ldr	r0, [r0, r3]
    24bc:	cmp	r0, #0
    24c0:	beq	24d4 <coda_cursor_read_int16_array+0x100>
    24c4:	ldr	r3, [r1, #48]	; 0x30
    24c8:	mov	r0, #9
    24cc:	cmp	r3, #0
    24d0:	bne	2634 <coda_cursor_read_int16_array+0x260>
    24d4:	ldr	r0, [r1, #12]
    24d8:	cmp	r0, #2
    24dc:	beq	2650 <coda_cursor_read_int16_array+0x27c>
    24e0:	cmp	r0, #1
    24e4:	beq	266c <coda_cursor_read_int16_array+0x298>
    24e8:	cmp	r0, #0
    24ec:	bne	2634 <coda_cursor_read_int16_array+0x260>
    24f0:	mov	r0, r5
    24f4:	mov	r1, r4
    24f8:	bl	205c <read_int8_array>
    24fc:	mvn	r6, #0
    2500:	cmp	r0, #0
    2504:	bne	246c <coda_cursor_read_int16_array+0x98>
    2508:	add	r1, sp, #4
    250c:	mov	r0, r5
    2510:	bl	0 <coda_cursor_get_num_elements>
    2514:	cmp	r0, #0
    2518:	bne	246c <coda_cursor_read_int16_array+0x98>
    251c:	ldr	r0, [sp, #4]
    2520:	cmp	r0, #1
    2524:	blt	27a8 <coda_cursor_read_int16_array+0x3d4>
    2528:	mvn	r2, r0
    252c:	mvn	r1, #1
    2530:	mvn	r3, #1
    2534:	cmn	r2, #2
    2538:	movgt	r1, r2
    253c:	add	r1, r0, r1
    2540:	add	lr, r1, #2
    2544:	cmp	lr, #8
    2548:	bcc	2604 <coda_cursor_read_int16_array+0x230>
    254c:	cmn	r2, #2
    2550:	sub	r1, r0, #1
    2554:	mov	r6, #0
    2558:	movgt	r3, r2
    255c:	add	r3, r0, r3
    2560:	add	r3, r3, #1
    2564:	adds	r5, r3, r3
    2568:	adc	ip, r6, #0
    256c:	add	r6, r4, r1, lsl #1
    2570:	cmp	r5, r6
    2574:	bhi	2604 <coda_cursor_read_int16_array+0x230>
    2578:	cmp	ip, #0
    257c:	bne	2604 <coda_cursor_read_int16_array+0x230>
    2580:	add	r1, r4, r1
    2584:	cmp	r3, r1
    2588:	bhi	2604 <coda_cursor_read_int16_array+0x230>
    258c:	mvn	r6, #1
    2590:	cmn	r2, #2
    2594:	add	r3, r4, r0
    2598:	add	r1, r4, r0, lsl #1
    259c:	movle	r2, r6
    25a0:	sub	r6, r6, r2
    25a4:	add	r6, r4, r6, lsl #1
    25a8:	cmp	r3, r6
    25ac:	bls	25c0 <coda_cursor_read_int16_array+0x1ec>
    25b0:	sub	r2, r4, r2
    25b4:	sub	r2, r2, #2
    25b8:	cmp	r2, r1
    25bc:	bcc	2604 <coda_cursor_read_int16_array+0x230>
    25c0:	bic	ip, lr, #7
    25c4:	sub	r6, r1, #16
    25c8:	sub	r3, r3, #8
    25cc:	mvn	r5, #7
    25d0:	mvn	r2, #15
    25d4:	sub	r0, r0, ip
    25d8:	mov	r1, ip
    25dc:	vld1.8	{d16}, [r3], r5
    25e0:	subs	r1, r1, #8
    25e4:	vrev64.8	d16, d16
    25e8:	vmovl.s8	q8, d16
    25ec:	vrev64.16	q8, q8
    25f0:	vext.8	q8, q8, q8, #8
    25f4:	vst1.16	{d16-d17}, [r6], r2
    25f8:	bne	25dc <coda_cursor_read_int16_array+0x208>
    25fc:	cmp	lr, ip
    2600:	beq	27a8 <coda_cursor_read_int16_array+0x3d4>
    2604:	lsl	r1, r0, #1
    2608:	sub	r2, r4, #2
    260c:	add	r0, r0, #1
    2610:	add	r6, r2, r0
    2614:	sub	r0, r0, #1
    2618:	add	r3, r2, r1
    261c:	sub	r1, r1, #2
    2620:	ldrsb	r6, [r6]
    2624:	cmp	r0, #1
    2628:	strh	r6, [r3]
    262c:	bgt	2610 <coda_cursor_read_int16_array+0x23c>
    2630:	b	27a8 <coda_cursor_read_int16_array+0x3d4>
    2634:	bl	0 <coda_type_get_native_type_name>
    2638:	movw	r1, #0
    263c:	mov	r2, r0
    2640:	movt	r1, #0
    2644:	mvn	r0, #104	; 0x68
    2648:	bl	0 <coda_set_error>
    264c:	b	2468 <coda_cursor_read_int16_array+0x94>
    2650:	mov	r0, r5
    2654:	mov	r1, r4
    2658:	bl	27b8 <read_int16_array>
    265c:	mvn	r6, #0
    2660:	cmp	r0, #0
    2664:	moveq	r6, #0
    2668:	b	246c <coda_cursor_read_int16_array+0x98>
    266c:	mov	r0, r5
    2670:	mov	r1, r4
    2674:	bl	22bc <read_uint8_array>
    2678:	mvn	r6, #0
    267c:	cmp	r0, #0
    2680:	bne	246c <coda_cursor_read_int16_array+0x98>
    2684:	add	r1, sp, #4
    2688:	mov	r0, r5
    268c:	bl	0 <coda_cursor_get_num_elements>
    2690:	cmp	r0, #0
    2694:	bne	246c <coda_cursor_read_int16_array+0x98>
    2698:	ldr	r0, [sp, #4]
    269c:	cmp	r0, #1
    26a0:	blt	27a8 <coda_cursor_read_int16_array+0x3d4>
    26a4:	mvn	r2, r0
    26a8:	mvn	r1, #1
    26ac:	mvn	r3, #1
    26b0:	cmn	r2, #2
    26b4:	movgt	r1, r2
    26b8:	add	r1, r0, r1
    26bc:	add	lr, r1, #2
    26c0:	cmp	lr, #8
    26c4:	bcc	2780 <coda_cursor_read_int16_array+0x3ac>
    26c8:	cmn	r2, #2
    26cc:	sub	r1, r0, #1
    26d0:	mov	r6, #0
    26d4:	movgt	r3, r2
    26d8:	add	r3, r0, r3
    26dc:	add	r3, r3, #1
    26e0:	adds	r5, r3, r3
    26e4:	adc	ip, r6, #0
    26e8:	add	r6, r4, r1, lsl #1
    26ec:	cmp	r5, r6
    26f0:	bhi	2780 <coda_cursor_read_int16_array+0x3ac>
    26f4:	cmp	ip, #0
    26f8:	bne	2780 <coda_cursor_read_int16_array+0x3ac>
    26fc:	add	r1, r4, r1
    2700:	cmp	r3, r1
    2704:	bhi	2780 <coda_cursor_read_int16_array+0x3ac>
    2708:	mvn	r6, #1
    270c:	cmn	r2, #2
    2710:	add	r3, r4, r0
    2714:	add	r1, r4, r0, lsl #1
    2718:	movle	r2, r6
    271c:	sub	r6, r6, r2
    2720:	add	r6, r4, r6, lsl #1
    2724:	cmp	r3, r6
    2728:	bls	273c <coda_cursor_read_int16_array+0x368>
    272c:	sub	r2, r4, r2
    2730:	sub	r2, r2, #2
    2734:	cmp	r2, r1
    2738:	bcc	2780 <coda_cursor_read_int16_array+0x3ac>
    273c:	bic	ip, lr, #7
    2740:	sub	r6, r1, #16
    2744:	sub	r3, r3, #8
    2748:	mvn	r5, #7
    274c:	mvn	r2, #15
    2750:	sub	r0, r0, ip
    2754:	mov	r1, ip
    2758:	vld1.8	{d16}, [r3], r5
    275c:	subs	r1, r1, #8
    2760:	vrev64.8	d16, d16
    2764:	vmovl.u8	q8, d16
    2768:	vrev64.16	q8, q8
    276c:	vext.8	q8, q8, q8, #8
    2770:	vst1.16	{d16-d17}, [r6], r2
    2774:	bne	2758 <coda_cursor_read_int16_array+0x384>
    2778:	cmp	lr, ip
    277c:	beq	27a8 <coda_cursor_read_int16_array+0x3d4>
    2780:	lsl	r1, r0, #1
    2784:	sub	r2, r4, #2
    2788:	add	r0, r0, #1
    278c:	ldrb	r3, [r2, r0]
    2790:	sub	r0, r0, #1
    2794:	add	r6, r2, r1
    2798:	sub	r1, r1, #2
    279c:	cmp	r0, #1
    27a0:	strh	r3, [r6]
    27a4:	bgt	278c <coda_cursor_read_int16_array+0x3b8>
    27a8:	mov	r6, #0
    27ac:	b	246c <coda_cursor_read_int16_array+0x98>
    27b0:	.word	0x000002f4
    27b4:	.word	0x0000036c

000027b8 <read_int16_array>:
    27b8:	push	{r4, r5, r6, sl, fp, lr}
    27bc:	add	fp, sp, #16
    27c0:	mov	r6, r0
    27c4:	ldr	r0, [r0, #4]
    27c8:	mov	r4, r1
    27cc:	mov	r5, r2
    27d0:	add	r0, r6, r0, lsl #4
    27d4:	ldr	r0, [r0, #-8]
    27d8:	ldr	r0, [r0]
    27dc:	sub	r1, r0, #100	; 0x64
    27e0:	cmp	r1, #5
    27e4:	bhi	281c <read_int16_array+0x64>
    27e8:	add	r0, pc, #0
    27ec:	ldr	pc, [r0, r1, lsl #2]
    27f0:	.word	0x00002808
    27f4:	.word	0x0000286c
    27f8:	.word	0x00002864
    27fc:	.word	0x00002880
    2800:	.word	0x00002854
    2804:	.word	0x000028c0
    2808:	mov	r0, r6
    280c:	mov	r1, r4
    2810:	mov	r2, r5
    2814:	pop	{r4, r5, r6, sl, fp, lr}
    2818:	b	0 <coda_mem_cursor_read_int16_array>
    281c:	cmp	r0, #1
    2820:	beq	2840 <read_int16_array+0x88>
    2824:	cmp	r0, #0
    2828:	bne	289c <read_int16_array+0xe4>
    282c:	mov	r0, r6
    2830:	mov	r1, r4
    2834:	mov	r2, r5
    2838:	pop	{r4, r5, r6, sl, fp, lr}
    283c:	b	0 <coda_ascii_cursor_read_int16_array>
    2840:	mov	r0, r6
    2844:	mov	r1, r4
    2848:	mov	r2, r5
    284c:	pop	{r4, r5, r6, sl, fp, lr}
    2850:	b	0 <coda_bin_cursor_read_int16_array>
    2854:	mov	r0, r6
    2858:	mov	r1, r4
    285c:	bl	0 <coda_netcdf_cursor_read_int16_array>
    2860:	b	288c <read_int16_array+0xd4>
    2864:	mvn	r0, #12
    2868:	b	2870 <read_int16_array+0xb8>
    286c:	mvn	r0, #10
    2870:	mov	r1, #0
    2874:	bl	0 <coda_set_error>
    2878:	mvn	r0, #0
    287c:	pop	{r4, r5, r6, sl, fp, pc}
    2880:	mov	r0, r6
    2884:	mov	r1, r4
    2888:	bl	0 <coda_cdf_cursor_read_int16_array>
    288c:	mov	r1, r0
    2890:	mvn	r0, #0
    2894:	cmp	r1, #0
    2898:	popne	{r4, r5, r6, sl, fp, pc}
    289c:	cmp	r5, #0
    28a0:	beq	28b8 <read_int16_array+0x100>
    28a4:	mov	r0, r6
    28a8:	mov	r1, r4
    28ac:	mov	r2, #2
    28b0:	pop	{r4, r5, r6, sl, fp, lr}
    28b4:	b	aae0 <transpose_array>
    28b8:	mov	r0, #0
    28bc:	pop	{r4, r5, r6, sl, fp, pc}
    28c0:	movw	r0, #0
    28c4:	movw	r1, #0
    28c8:	movw	r3, #0
    28cc:	mov	r2, #916	; 0x394
    28d0:	movt	r0, #0
    28d4:	movt	r1, #0
    28d8:	movt	r3, #0
    28dc:	bl	0 <__assert_fail>

000028e0 <coda_cursor_read_uint16_array>:
    28e0:	push	{r4, r5, r6, sl, fp, lr}
    28e4:	add	fp, sp, #16
    28e8:	sub	sp, sp, #8
    28ec:	cmp	r0, #0
    28f0:	beq	2958 <coda_cursor_read_uint16_array+0x78>
    28f4:	mov	r5, r0
    28f8:	ldr	r0, [r0, #4]
    28fc:	cmp	r0, #1
    2900:	blt	2958 <coda_cursor_read_uint16_array+0x78>
    2904:	add	r0, r5, r0, lsl #4
    2908:	mov	r4, r1
    290c:	ldr	r1, [r0, #-8]
    2910:	cmp	r1, #0
    2914:	beq	2958 <coda_cursor_read_uint16_array+0x78>
    2918:	cmp	r4, #0
    291c:	beq	2984 <coda_cursor_read_uint16_array+0xa4>
    2920:	ldr	r0, [r1]
    2924:	cmp	r0, #99	; 0x63
    2928:	ldrhi	r1, [r1, #4]
    292c:	ldr	r0, [r1, #8]
    2930:	cmp	r0, #1
    2934:	bne	299c <coda_cursor_read_uint16_array+0xbc>
    2938:	ldr	r1, [r1, #40]	; 0x28
    293c:	ldr	r3, [r1, #8]
    2940:	cmp	r3, #2
    2944:	bne	29b0 <coda_cursor_read_uint16_array+0xd0>
    2948:	ldr	r0, [pc, #552]	; 2b78 <coda_cursor_read_uint16_array+0x298>
    294c:	ldr	r3, [pc, r0]
    2950:	bl	0 <__aeabi_read_tp>
    2954:	b	29c4 <coda_cursor_read_uint16_array+0xe4>
    2958:	movw	r1, #0
    295c:	movw	r2, #0
    2960:	mvn	r0, #99	; 0x63
    2964:	mov	r3, #3120	; 0xc30
    2968:	movt	r1, #0
    296c:	movt	r2, #0
    2970:	bl	0 <coda_set_error>
    2974:	mvn	r6, #0
    2978:	mov	r0, r6
    297c:	sub	sp, fp, #16
    2980:	pop	{r4, r5, r6, sl, fp, pc}
    2984:	movw	r1, #0
    2988:	movw	r2, #0
    298c:	mvn	r0, #99	; 0x63
    2990:	movw	r3, #3125	; 0xc35
    2994:	movt	r1, #0
    2998:	b	296c <coda_cursor_read_uint16_array+0x8c>
    299c:	bl	0 <coda_type_get_class_name>
    29a0:	movw	r1, #0
    29a4:	mov	r2, r0
    29a8:	movt	r1, #0
    29ac:	b	2a90 <coda_cursor_read_uint16_array+0x1b0>
    29b0:	bl	0 <__aeabi_read_tp>
    29b4:	cmp	r3, #3
    29b8:	bne	29e0 <coda_cursor_read_uint16_array+0x100>
    29bc:	ldr	r3, [pc, #432]	; 2b74 <coda_cursor_read_uint16_array+0x294>
    29c0:	ldr	r3, [pc, r3]
    29c4:	ldr	r0, [r0, r3]
    29c8:	cmp	r0, #0
    29cc:	beq	29e0 <coda_cursor_read_uint16_array+0x100>
    29d0:	ldr	r3, [r1, #48]	; 0x30
    29d4:	mov	r0, #9
    29d8:	cmp	r3, #0
    29dc:	bne	2a80 <coda_cursor_read_uint16_array+0x1a0>
    29e0:	ldr	r0, [r1, #12]
    29e4:	cmp	r0, #3
    29e8:	beq	2a9c <coda_cursor_read_uint16_array+0x1bc>
    29ec:	cmp	r0, #1
    29f0:	bne	2a80 <coda_cursor_read_uint16_array+0x1a0>
    29f4:	mov	r0, r5
    29f8:	mov	r1, r4
    29fc:	bl	22bc <read_uint8_array>
    2a00:	mvn	r6, #0
    2a04:	cmp	r0, #0
    2a08:	bne	2978 <coda_cursor_read_uint16_array+0x98>
    2a0c:	add	r1, sp, #4
    2a10:	mov	r0, r5
    2a14:	bl	0 <coda_cursor_get_num_elements>
    2a18:	cmp	r0, #0
    2a1c:	bne	2978 <coda_cursor_read_uint16_array+0x98>
    2a20:	ldr	r0, [sp, #4]
    2a24:	cmp	r0, #1
    2a28:	blt	2a78 <coda_cursor_read_uint16_array+0x198>
    2a2c:	mvn	r2, r0
    2a30:	mvn	r1, #1
    2a34:	mvn	r3, #1
    2a38:	cmn	r2, #2
    2a3c:	movgt	r1, r2
    2a40:	add	r1, r0, r1
    2a44:	add	lr, r1, #2
    2a48:	cmp	lr, #8
    2a4c:	bcs	2ab8 <coda_cursor_read_uint16_array+0x1d8>
    2a50:	lsl	r1, r0, #1
    2a54:	sub	r2, r4, #2
    2a58:	add	r0, r0, #1
    2a5c:	ldrb	r3, [r2, r0]
    2a60:	sub	r0, r0, #1
    2a64:	add	r6, r2, r1
    2a68:	sub	r1, r1, #2
    2a6c:	cmp	r0, #1
    2a70:	strh	r3, [r6]
    2a74:	bgt	2a5c <coda_cursor_read_uint16_array+0x17c>
    2a78:	mov	r6, #0
    2a7c:	b	2978 <coda_cursor_read_uint16_array+0x98>
    2a80:	bl	0 <coda_type_get_native_type_name>
    2a84:	movw	r1, #0
    2a88:	mov	r2, r0
    2a8c:	movt	r1, #0
    2a90:	mvn	r0, #104	; 0x68
    2a94:	bl	0 <coda_set_error>
    2a98:	b	2974 <coda_cursor_read_uint16_array+0x94>
    2a9c:	mov	r0, r5
    2aa0:	mov	r1, r4
    2aa4:	bl	2b7c <read_uint16_array>
    2aa8:	mvn	r6, #0
    2aac:	cmp	r0, #0
    2ab0:	moveq	r6, #0
    2ab4:	b	2978 <coda_cursor_read_uint16_array+0x98>
    2ab8:	cmn	r2, #2
    2abc:	sub	r1, r0, #1
    2ac0:	mov	r6, #0
    2ac4:	movgt	r3, r2
    2ac8:	add	r3, r0, r3
    2acc:	add	r3, r3, #1
    2ad0:	adds	r5, r3, r3
    2ad4:	adc	ip, r6, #0
    2ad8:	add	r6, r4, r1, lsl #1
    2adc:	cmp	r5, r6
    2ae0:	bhi	2a50 <coda_cursor_read_uint16_array+0x170>
    2ae4:	cmp	ip, #0
    2ae8:	bne	2a50 <coda_cursor_read_uint16_array+0x170>
    2aec:	add	r1, r4, r1
    2af0:	cmp	r3, r1
    2af4:	bhi	2a50 <coda_cursor_read_uint16_array+0x170>
    2af8:	mvn	r6, #1
    2afc:	cmn	r2, #2
    2b00:	add	r3, r4, r0
    2b04:	add	r1, r4, r0, lsl #1
    2b08:	movle	r2, r6
    2b0c:	sub	r6, r6, r2
    2b10:	add	r6, r4, r6, lsl #1
    2b14:	cmp	r3, r6
    2b18:	bls	2b2c <coda_cursor_read_uint16_array+0x24c>
    2b1c:	sub	r2, r4, r2
    2b20:	sub	r2, r2, #2
    2b24:	cmp	r2, r1
    2b28:	bcc	2a50 <coda_cursor_read_uint16_array+0x170>
    2b2c:	bic	ip, lr, #7
    2b30:	sub	r6, r1, #16
    2b34:	sub	r3, r3, #8
    2b38:	mvn	r5, #7
    2b3c:	mvn	r2, #15
    2b40:	sub	r0, r0, ip
    2b44:	mov	r1, ip
    2b48:	vld1.8	{d16}, [r3], r5
    2b4c:	subs	r1, r1, #8
    2b50:	vrev64.8	d16, d16
    2b54:	vmovl.u8	q8, d16
    2b58:	vrev64.16	q8, q8
    2b5c:	vext.8	q8, q8, q8, #8
    2b60:	vst1.16	{d16-d17}, [r6], r2
    2b64:	bne	2b48 <coda_cursor_read_uint16_array+0x268>
    2b68:	cmp	lr, ip
    2b6c:	bne	2a50 <coda_cursor_read_uint16_array+0x170>
    2b70:	b	2a78 <coda_cursor_read_uint16_array+0x198>
    2b74:	.word	0x000001ac
    2b78:	.word	0x00000224

00002b7c <read_uint16_array>:
    2b7c:	push	{r4, r5, r6, sl, fp, lr}
    2b80:	add	fp, sp, #16
    2b84:	mov	r6, r0
    2b88:	ldr	r0, [r0, #4]
    2b8c:	mov	r4, r1
    2b90:	mov	r5, r2
    2b94:	add	r0, r6, r0, lsl #4
    2b98:	ldr	r0, [r0, #-8]
    2b9c:	ldr	r0, [r0]
    2ba0:	sub	r1, r0, #100	; 0x64
    2ba4:	cmp	r1, #5
    2ba8:	bhi	2be0 <read_uint16_array+0x64>
    2bac:	add	r0, pc, #0
    2bb0:	ldr	pc, [r0, r1, lsl #2]
    2bb4:	.word	0x00002bcc
    2bb8:	.word	0x00002c04
    2bbc:	.word	0x00002c0c
    2bc0:	.word	0x00002c20
    2bc4:	.word	0x00002c74
    2bc8:	.word	0x00002c74
    2bcc:	mov	r0, r6
    2bd0:	mov	r1, r4
    2bd4:	mov	r2, r5
    2bd8:	pop	{r4, r5, r6, sl, fp, lr}
    2bdc:	b	0 <coda_mem_cursor_read_uint16_array>
    2be0:	cmp	r0, #1
    2be4:	beq	2c58 <read_uint16_array+0xdc>
    2be8:	cmp	r0, #0
    2bec:	bne	2c3c <read_uint16_array+0xc0>
    2bf0:	mov	r0, r6
    2bf4:	mov	r1, r4
    2bf8:	mov	r2, r5
    2bfc:	pop	{r4, r5, r6, sl, fp, lr}
    2c00:	b	0 <coda_ascii_cursor_read_uint16_array>
    2c04:	mvn	r0, #10
    2c08:	b	2c10 <read_uint16_array+0x94>
    2c0c:	mvn	r0, #12
    2c10:	mov	r1, #0
    2c14:	bl	0 <coda_set_error>
    2c18:	mvn	r0, #0
    2c1c:	pop	{r4, r5, r6, sl, fp, pc}
    2c20:	mov	r0, r6
    2c24:	mov	r1, r4
    2c28:	bl	0 <coda_cdf_cursor_read_uint16_array>
    2c2c:	mov	r1, r0
    2c30:	mvn	r0, #0
    2c34:	cmp	r1, #0
    2c38:	popne	{r4, r5, r6, sl, fp, pc}
    2c3c:	cmp	r5, #0
    2c40:	beq	2c6c <read_uint16_array+0xf0>
    2c44:	mov	r0, r6
    2c48:	mov	r1, r4
    2c4c:	mov	r2, #2
    2c50:	pop	{r4, r5, r6, sl, fp, lr}
    2c54:	b	aae0 <transpose_array>
    2c58:	mov	r0, r6
    2c5c:	mov	r1, r4
    2c60:	mov	r2, r5
    2c64:	pop	{r4, r5, r6, sl, fp, lr}
    2c68:	b	0 <coda_bin_cursor_read_uint16_array>
    2c6c:	mov	r0, #0
    2c70:	pop	{r4, r5, r6, sl, fp, pc}
    2c74:	movw	r0, #0
    2c78:	movw	r1, #0
    2c7c:	movw	r3, #0
    2c80:	mov	r2, #968	; 0x3c8
    2c84:	movt	r0, #0
    2c88:	movt	r1, #0
    2c8c:	movt	r3, #0
    2c90:	bl	0 <__assert_fail>

00002c94 <coda_cursor_read_int32_array>:
    2c94:	push	{r4, r5, r6, r7, fp, lr}
    2c98:	add	fp, sp, #16
    2c9c:	sub	sp, sp, #16
    2ca0:	cmp	r0, #0
    2ca4:	beq	2d0c <coda_cursor_read_int32_array+0x78>
    2ca8:	mov	r5, r0
    2cac:	ldr	r0, [r0, #4]
    2cb0:	cmp	r0, #1
    2cb4:	blt	2d0c <coda_cursor_read_int32_array+0x78>
    2cb8:	add	r0, r5, r0, lsl #4
    2cbc:	mov	r4, r1
    2cc0:	ldr	r1, [r0, #-8]
    2cc4:	cmp	r1, #0
    2cc8:	beq	2d0c <coda_cursor_read_int32_array+0x78>
    2ccc:	cmp	r4, #0
    2cd0:	beq	2d38 <coda_cursor_read_int32_array+0xa4>
    2cd4:	ldr	r0, [r1]
    2cd8:	cmp	r0, #99	; 0x63
    2cdc:	ldrhi	r1, [r1, #4]
    2ce0:	ldr	r0, [r1, #8]
    2ce4:	cmp	r0, #1
    2ce8:	bne	2d50 <coda_cursor_read_int32_array+0xbc>
    2cec:	ldr	r1, [r1, #40]	; 0x28
    2cf0:	ldr	r3, [r1, #8]
    2cf4:	cmp	r3, #2
    2cf8:	bne	2d64 <coda_cursor_read_int32_array+0xd0>
    2cfc:	ldr	r0, [pc, #1348]	; 3248 <coda_cursor_read_int32_array+0x5b4>
    2d00:	ldr	r3, [pc, r0]
    2d04:	bl	0 <__aeabi_read_tp>
    2d08:	b	2d78 <coda_cursor_read_int32_array+0xe4>
    2d0c:	movw	r1, #0
    2d10:	movw	r2, #0
    2d14:	mvn	r0, #99	; 0x63
    2d18:	movw	r3, #3199	; 0xc7f
    2d1c:	movt	r1, #0
    2d20:	movt	r2, #0
    2d24:	bl	0 <coda_set_error>
    2d28:	mvn	r6, #0
    2d2c:	mov	r0, r6
    2d30:	sub	sp, fp, #16
    2d34:	pop	{r4, r5, r6, r7, fp, pc}
    2d38:	movw	r1, #0
    2d3c:	movw	r2, #0
    2d40:	mvn	r0, #99	; 0x63
    2d44:	movw	r3, #3204	; 0xc84
    2d48:	movt	r1, #0
    2d4c:	b	2d20 <coda_cursor_read_int32_array+0x8c>
    2d50:	bl	0 <coda_type_get_class_name>
    2d54:	movw	r1, #0
    2d58:	mov	r2, r0
    2d5c:	movt	r1, #0
    2d60:	b	2f24 <coda_cursor_read_int32_array+0x290>
    2d64:	bl	0 <__aeabi_read_tp>
    2d68:	cmp	r3, #3
    2d6c:	bne	2d94 <coda_cursor_read_int32_array+0x100>
    2d70:	ldr	r3, [pc, #1228]	; 3244 <coda_cursor_read_int32_array+0x5b0>
    2d74:	ldr	r3, [pc, r3]
    2d78:	ldr	r0, [r0, r3]
    2d7c:	cmp	r0, #0
    2d80:	beq	2d94 <coda_cursor_read_int32_array+0x100>
    2d84:	ldr	r3, [r1, #48]	; 0x30
    2d88:	mov	r0, #9
    2d8c:	cmp	r3, #0
    2d90:	bne	2f14 <coda_cursor_read_int32_array+0x280>
    2d94:	ldr	r0, [r1, #12]
    2d98:	cmp	r0, #4
    2d9c:	bhi	2f14 <coda_cursor_read_int32_array+0x280>
    2da0:	add	r1, pc, #0
    2da4:	ldr	pc, [r1, r0, lsl #2]
    2da8:	.word	0x00002dbc
    2dac:	.word	0x00002f30
    2db0:	.word	0x0000307c
    2db4:	.word	0x000030dc
    2db8:	.word	0x0000313c
    2dbc:	mov	r0, r5
    2dc0:	mov	r1, r4
    2dc4:	bl	205c <read_int8_array>
    2dc8:	mvn	r6, #0
    2dcc:	cmp	r0, #0
    2dd0:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    2dd4:	add	r1, sp, #12
    2dd8:	mov	r0, r5
    2ddc:	bl	0 <coda_cursor_get_num_elements>
    2de0:	cmp	r0, #0
    2de4:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    2de8:	ldr	r0, [sp, #12]
    2dec:	cmp	r0, #1
    2df0:	blt	323c <coda_cursor_read_int32_array+0x5a8>
    2df4:	mvn	r2, r0
    2df8:	mvn	r1, #1
    2dfc:	mvn	r3, #1
    2e00:	cmn	r2, #2
    2e04:	movgt	r1, r2
    2e08:	add	r1, r0, r1
    2e0c:	add	lr, r1, #2
    2e10:	cmp	lr, #4
    2e14:	bcc	2eec <coda_cursor_read_int32_array+0x258>
    2e18:	cmn	r2, #2
    2e1c:	mov	r7, #4
    2e20:	sub	r1, r0, #1
    2e24:	movgt	r3, r2
    2e28:	add	r6, r4, r1, lsl #2
    2e2c:	add	r3, r0, r3
    2e30:	add	r3, r3, #1
    2e34:	umull	r5, r7, r3, r7
    2e38:	cmp	r7, #0
    2e3c:	movwne	r7, #1
    2e40:	cmp	r5, r6
    2e44:	bhi	2eec <coda_cursor_read_int32_array+0x258>
    2e48:	cmp	r7, #0
    2e4c:	bne	2eec <coda_cursor_read_int32_array+0x258>
    2e50:	add	r1, r4, r1
    2e54:	cmp	r3, r1
    2e58:	bhi	2eec <coda_cursor_read_int32_array+0x258>
    2e5c:	mvn	r3, #1
    2e60:	cmn	r2, #2
    2e64:	add	r1, r4, r0, lsl #2
    2e68:	movle	r2, r3
    2e6c:	sub	r3, r3, r2
    2e70:	add	r2, r4, r0
    2e74:	add	r7, r4, r3, lsl #2
    2e78:	cmp	r2, r7
    2e7c:	bls	2e8c <coda_cursor_read_int32_array+0x1f8>
    2e80:	add	r3, r4, r3
    2e84:	cmp	r3, r1
    2e88:	bcc	2eec <coda_cursor_read_int32_array+0x258>
    2e8c:	vmov.i32	q8, #24	; 0x00000018
    2e90:	bic	ip, lr, #3
    2e94:	sub	r3, r2, #4
    2e98:	sub	r6, r1, #16
    2e9c:	add	r5, sp, #4
    2ea0:	mvn	r2, #15
    2ea4:	sub	r0, r0, ip
    2ea8:	vneg.s32	q8, q8
    2eac:	mov	r1, ip
    2eb0:	ldr	r7, [r3], #-4
    2eb4:	subs	r1, r1, #4
    2eb8:	str	r7, [sp, #4]
    2ebc:	vld1.32	{d18[0]}, [r5 :32]
    2ec0:	vmovl.u8	q9, d18
    2ec4:	vrev64.16	d18, d18
    2ec8:	vmovl.u16	q9, d18
    2ecc:	vshl.s32	q9, q9, #24
    2ed0:	vshl.s32	q9, q9, q8
    2ed4:	vrev64.32	q9, q9
    2ed8:	vext.8	q9, q9, q9, #8
    2edc:	vst1.32	{d18-d19}, [r6], r2
    2ee0:	bne	2eb0 <coda_cursor_read_int32_array+0x21c>
    2ee4:	cmp	lr, ip
    2ee8:	beq	323c <coda_cursor_read_int32_array+0x5a8>
    2eec:	sub	r0, r0, #1
    2ef0:	add	r1, r4, r0
    2ef4:	ldrsb	r1, [r1]
    2ef8:	str	r1, [r4, r0, lsl #2]
    2efc:	sub	r1, r0, #1
    2f00:	add	r0, r0, #1
    2f04:	cmp	r0, #1
    2f08:	mov	r0, r1
    2f0c:	bgt	2ef0 <coda_cursor_read_int32_array+0x25c>
    2f10:	b	323c <coda_cursor_read_int32_array+0x5a8>
    2f14:	bl	0 <coda_type_get_native_type_name>
    2f18:	movw	r1, #0
    2f1c:	mov	r2, r0
    2f20:	movt	r1, #0
    2f24:	mvn	r0, #104	; 0x68
    2f28:	bl	0 <coda_set_error>
    2f2c:	b	2d28 <coda_cursor_read_int32_array+0x94>
    2f30:	mov	r0, r5
    2f34:	mov	r1, r4
    2f38:	bl	22bc <read_uint8_array>
    2f3c:	mvn	r6, #0
    2f40:	cmp	r0, #0
    2f44:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    2f48:	add	r1, sp, #12
    2f4c:	mov	r0, r5
    2f50:	bl	0 <coda_cursor_get_num_elements>
    2f54:	cmp	r0, #0
    2f58:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    2f5c:	ldr	r0, [sp, #12]
    2f60:	cmp	r0, #1
    2f64:	blt	323c <coda_cursor_read_int32_array+0x5a8>
    2f68:	mvn	r2, r0
    2f6c:	mvn	r1, #1
    2f70:	mvn	r3, #1
    2f74:	cmn	r2, #2
    2f78:	movgt	r1, r2
    2f7c:	add	r1, r0, r1
    2f80:	add	lr, r1, #2
    2f84:	cmp	lr, #4
    2f88:	bcc	3058 <coda_cursor_read_int32_array+0x3c4>
    2f8c:	cmn	r2, #2
    2f90:	mov	r7, #4
    2f94:	sub	r1, r0, #1
    2f98:	movgt	r3, r2
    2f9c:	add	r6, r4, r1, lsl #2
    2fa0:	add	r3, r0, r3
    2fa4:	add	r3, r3, #1
    2fa8:	umull	r5, r7, r3, r7
    2fac:	cmp	r7, #0
    2fb0:	movwne	r7, #1
    2fb4:	cmp	r5, r6
    2fb8:	bhi	3058 <coda_cursor_read_int32_array+0x3c4>
    2fbc:	cmp	r7, #0
    2fc0:	bne	3058 <coda_cursor_read_int32_array+0x3c4>
    2fc4:	add	r1, r4, r1
    2fc8:	cmp	r3, r1
    2fcc:	bhi	3058 <coda_cursor_read_int32_array+0x3c4>
    2fd0:	mvn	r3, #1
    2fd4:	cmn	r2, #2
    2fd8:	add	r1, r4, r0, lsl #2
    2fdc:	movle	r2, r3
    2fe0:	sub	r3, r3, r2
    2fe4:	add	r2, r4, r0
    2fe8:	add	r7, r4, r3, lsl #2
    2fec:	cmp	r2, r7
    2ff0:	bls	3000 <coda_cursor_read_int32_array+0x36c>
    2ff4:	add	r3, r4, r3
    2ff8:	cmp	r3, r1
    2ffc:	bcc	3058 <coda_cursor_read_int32_array+0x3c4>
    3000:	bic	ip, lr, #3
    3004:	sub	r3, r2, #4
    3008:	sub	r6, r1, #16
    300c:	add	r5, sp, #8
    3010:	vmov.i32	q8, #255	; 0x000000ff
    3014:	mvn	r2, #15
    3018:	sub	r0, r0, ip
    301c:	mov	r1, ip
    3020:	ldr	r7, [r3], #-4
    3024:	subs	r1, r1, #4
    3028:	str	r7, [sp, #8]
    302c:	vld1.32	{d18[0]}, [r5 :32]
    3030:	vmovl.u8	q9, d18
    3034:	vrev64.16	d18, d18
    3038:	vmovl.u16	q9, d18
    303c:	vand	q9, q9, q8
    3040:	vrev64.32	q9, q9
    3044:	vext.8	q9, q9, q9, #8
    3048:	vst1.32	{d18-d19}, [r6], r2
    304c:	bne	3020 <coda_cursor_read_int32_array+0x38c>
    3050:	cmp	lr, ip
    3054:	beq	323c <coda_cursor_read_int32_array+0x5a8>
    3058:	sub	r0, r0, #1
    305c:	ldrb	r1, [r4, r0]
    3060:	str	r1, [r4, r0, lsl #2]
    3064:	sub	r1, r0, #1
    3068:	add	r0, r0, #1
    306c:	cmp	r0, #1
    3070:	mov	r0, r1
    3074:	bgt	305c <coda_cursor_read_int32_array+0x3c8>
    3078:	b	323c <coda_cursor_read_int32_array+0x5a8>
    307c:	mov	r0, r5
    3080:	mov	r1, r4
    3084:	bl	27b8 <read_int16_array>
    3088:	mvn	r6, #0
    308c:	cmp	r0, #0
    3090:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    3094:	add	r1, sp, #12
    3098:	mov	r0, r5
    309c:	bl	0 <coda_cursor_get_num_elements>
    30a0:	cmp	r0, #0
    30a4:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    30a8:	ldr	r0, [sp, #12]
    30ac:	cmp	r0, #1
    30b0:	blt	323c <coda_cursor_read_int32_array+0x5a8>
    30b4:	mvn	r1, r0
    30b8:	mvn	ip, #1
    30bc:	cmn	r1, #2
    30c0:	movle	r1, ip
    30c4:	add	r1, r0, r1
    30c8:	add	r2, r1, #2
    30cc:	cmp	r2, #4
    30d0:	bcs	3158 <coda_cursor_read_int32_array+0x4c4>
    30d4:	mov	r1, r0
    30d8:	b	31a4 <coda_cursor_read_int32_array+0x510>
    30dc:	mov	r0, r5
    30e0:	mov	r1, r4
    30e4:	bl	2b7c <read_uint16_array>
    30e8:	mvn	r6, #0
    30ec:	cmp	r0, #0
    30f0:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    30f4:	add	r1, sp, #12
    30f8:	mov	r0, r5
    30fc:	bl	0 <coda_cursor_get_num_elements>
    3100:	cmp	r0, #0
    3104:	bne	2d2c <coda_cursor_read_int32_array+0x98>
    3108:	ldr	r0, [sp, #12]
    310c:	cmp	r0, #1
    3110:	blt	323c <coda_cursor_read_int32_array+0x5a8>
    3114:	mvn	r1, r0
    3118:	mvn	ip, #1
    311c:	cmn	r1, #2
    3120:	movle	r1, ip
    3124:	add	r1, r0, r1
    3128:	add	r2, r1, #2
    312c:	cmp	r2, #4
    3130:	bcs	31cc <coda_cursor_read_int32_array+0x538>
    3134:	mov	r1, r0
    3138:	b	3218 <coda_cursor_read_int32_array+0x584>
    313c:	mov	r0, r5
    3140:	mov	r1, r4
    3144:	bl	324c <read_int32_array>
    3148:	mvn	r6, #0
    314c:	cmp	r0, #0
    3150:	moveq	r6, #0
    3154:	b	2d2c <coda_cursor_read_int32_array+0x98>
    3158:	bic	lr, r2, #3
    315c:	add	r3, r4, r0, lsl #1
    3160:	sub	r1, r0, lr
    3164:	add	r0, r4, r0, lsl #2
    3168:	sub	r6, r3, #8
    316c:	mvn	r3, #15
    3170:	mov	r7, lr
    3174:	sub	r5, r0, #16
    3178:	mvn	r0, #7
    317c:	vld1.16	{d16}, [r6], r0
    3180:	subs	r7, r7, #4
    3184:	vrev64.16	d16, d16
    3188:	vmovl.s16	q8, d16
    318c:	vrev64.32	q8, q8
    3190:	vext.8	q8, q8, q8, #8
    3194:	vst1.32	{d16-d17}, [r5], r3
    3198:	bne	317c <coda_cursor_read_int32_array+0x4e8>
    319c:	cmp	r2, lr
    31a0:	beq	323c <coda_cursor_read_int32_array+0x5a8>
    31a4:	add	r0, ip, r1, lsl #1
    31a8:	add	r1, r1, #1
    31ac:	add	r2, r4, r0
    31b0:	sub	r1, r1, #1
    31b4:	ldrsh	r2, [r2]
    31b8:	cmp	r1, #1
    31bc:	str	r2, [r4, r0, lsl #1]
    31c0:	sub	r0, r0, #2
    31c4:	bgt	31ac <coda_cursor_read_int32_array+0x518>
    31c8:	b	323c <coda_cursor_read_int32_array+0x5a8>
    31cc:	bic	lr, r2, #3
    31d0:	add	r3, r4, r0, lsl #1
    31d4:	sub	r1, r0, lr
    31d8:	add	r0, r4, r0, lsl #2
    31dc:	sub	r6, r3, #8
    31e0:	mvn	r3, #15
    31e4:	mov	r7, lr
    31e8:	sub	r5, r0, #16
    31ec:	mvn	r0, #7
    31f0:	vld1.16	{d16}, [r6], r0
    31f4:	subs	r7, r7, #4
    31f8:	vrev64.16	d16, d16
    31fc:	vmovl.u16	q8, d16
    3200:	vrev64.32	q8, q8
    3204:	vext.8	q8, q8, q8, #8
    3208:	vst1.32	{d16-d17}, [r5], r3
    320c:	bne	31f0 <coda_cursor_read_int32_array+0x55c>
    3210:	cmp	r2, lr
    3214:	beq	323c <coda_cursor_read_int32_array+0x5a8>
    3218:	add	r0, ip, r1, lsl #1
    321c:	add	r1, r1, #1
    3220:	add	r2, r4, r0
    3224:	sub	r1, r1, #1
    3228:	ldrh	r2, [r2]
    322c:	cmp	r1, #1
    3230:	str	r2, [r4, r0, lsl #1]
    3234:	sub	r0, r0, #2
    3238:	bgt	3220 <coda_cursor_read_int32_array+0x58c>
    323c:	mov	r6, #0
    3240:	b	2d2c <coda_cursor_read_int32_array+0x98>
    3244:	.word	0x000004c8
    3248:	.word	0x00000540

0000324c <read_int32_array>:
    324c:	push	{r4, r5, r6, sl, fp, lr}
    3250:	add	fp, sp, #16
    3254:	mov	r6, r0
    3258:	ldr	r0, [r0, #4]
    325c:	mov	r4, r1
    3260:	mov	r5, r2
    3264:	add	r0, r6, r0, lsl #4
    3268:	ldr	r0, [r0, #-8]
    326c:	ldr	r0, [r0]
    3270:	sub	r1, r0, #100	; 0x64
    3274:	cmp	r1, #5
    3278:	bhi	32b0 <read_int32_array+0x64>
    327c:	add	r0, pc, #0
    3280:	ldr	pc, [r0, r1, lsl #2]
    3284:	.word	0x0000329c
    3288:	.word	0x00003300
    328c:	.word	0x000032f8
    3290:	.word	0x00003314
    3294:	.word	0x000032e8
    3298:	.word	0x00003354
    329c:	mov	r0, r6
    32a0:	mov	r1, r4
    32a4:	mov	r2, r5
    32a8:	pop	{r4, r5, r6, sl, fp, lr}
    32ac:	b	0 <coda_mem_cursor_read_int32_array>
    32b0:	cmp	r0, #1
    32b4:	beq	32d4 <read_int32_array+0x88>
    32b8:	cmp	r0, #0
    32bc:	bne	3330 <read_int32_array+0xe4>
    32c0:	mov	r0, r6
    32c4:	mov	r1, r4
    32c8:	mov	r2, r5
    32cc:	pop	{r4, r5, r6, sl, fp, lr}
    32d0:	b	0 <coda_ascii_cursor_read_int32_array>
    32d4:	mov	r0, r6
    32d8:	mov	r1, r4
    32dc:	mov	r2, r5
    32e0:	pop	{r4, r5, r6, sl, fp, lr}
    32e4:	b	0 <coda_bin_cursor_read_int32_array>
    32e8:	mov	r0, r6
    32ec:	mov	r1, r4
    32f0:	bl	0 <coda_netcdf_cursor_read_int32_array>
    32f4:	b	3320 <read_int32_array+0xd4>
    32f8:	mvn	r0, #12
    32fc:	b	3304 <read_int32_array+0xb8>
    3300:	mvn	r0, #10
    3304:	mov	r1, #0
    3308:	bl	0 <coda_set_error>
    330c:	mvn	r0, #0
    3310:	pop	{r4, r5, r6, sl, fp, pc}
    3314:	mov	r0, r6
    3318:	mov	r1, r4
    331c:	bl	0 <coda_cdf_cursor_read_int32_array>
    3320:	mov	r1, r0
    3324:	mvn	r0, #0
    3328:	cmp	r1, #0
    332c:	popne	{r4, r5, r6, sl, fp, pc}
    3330:	cmp	r5, #0
    3334:	beq	334c <read_int32_array+0x100>
    3338:	mov	r0, r6
    333c:	mov	r1, r4
    3340:	mov	r2, #4
    3344:	pop	{r4, r5, r6, sl, fp, lr}
    3348:	b	aae0 <transpose_array>
    334c:	mov	r0, #0
    3350:	pop	{r4, r5, r6, sl, fp, pc}
    3354:	movw	r0, #0
    3358:	movw	r1, #0
    335c:	movw	r3, #0
    3360:	movw	r2, #1025	; 0x401
    3364:	movt	r0, #0
    3368:	movt	r1, #0
    336c:	movt	r3, #0
    3370:	bl	0 <__assert_fail>

00003374 <coda_cursor_read_uint32_array>:
    3374:	push	{r4, r5, r6, r7, fp, lr}
    3378:	add	fp, sp, #16
    337c:	sub	sp, sp, #8
    3380:	cmp	r0, #0
    3384:	beq	33ec <coda_cursor_read_uint32_array+0x78>
    3388:	mov	r5, r0
    338c:	ldr	r0, [r0, #4]
    3390:	cmp	r0, #1
    3394:	blt	33ec <coda_cursor_read_uint32_array+0x78>
    3398:	add	r0, r5, r0, lsl #4
    339c:	mov	r4, r1
    33a0:	ldr	r1, [r0, #-8]
    33a4:	cmp	r1, #0
    33a8:	beq	33ec <coda_cursor_read_uint32_array+0x78>
    33ac:	cmp	r4, #0
    33b0:	beq	3418 <coda_cursor_read_uint32_array+0xa4>
    33b4:	ldr	r0, [r1]
    33b8:	cmp	r0, #99	; 0x63
    33bc:	ldrhi	r1, [r1, #4]
    33c0:	ldr	r0, [r1, #8]
    33c4:	cmp	r0, #1
    33c8:	bne	3430 <coda_cursor_read_uint32_array+0xbc>
    33cc:	ldr	r1, [r1, #40]	; 0x28
    33d0:	ldr	r3, [r1, #8]
    33d4:	cmp	r3, #2
    33d8:	bne	3444 <coda_cursor_read_uint32_array+0xd0>
    33dc:	ldr	r0, [pc, #780]	; 36f0 <coda_cursor_read_uint32_array+0x37c>
    33e0:	ldr	r3, [pc, r0]
    33e4:	bl	0 <__aeabi_read_tp>
    33e8:	b	3458 <coda_cursor_read_uint32_array+0xe4>
    33ec:	movw	r1, #0
    33f0:	movw	r2, #0
    33f4:	mvn	r0, #99	; 0x63
    33f8:	movw	r3, #3318	; 0xcf6
    33fc:	movt	r1, #0
    3400:	movt	r2, #0
    3404:	bl	0 <coda_set_error>
    3408:	mvn	r6, #0
    340c:	mov	r0, r6
    3410:	sub	sp, fp, #16
    3414:	pop	{r4, r5, r6, r7, fp, pc}
    3418:	movw	r1, #0
    341c:	movw	r2, #0
    3420:	mvn	r0, #99	; 0x63
    3424:	movw	r3, #3323	; 0xcfb
    3428:	movt	r1, #0
    342c:	b	3400 <coda_cursor_read_uint32_array+0x8c>
    3430:	bl	0 <coda_type_get_class_name>
    3434:	movw	r1, #0
    3438:	mov	r2, r0
    343c:	movt	r1, #0
    3440:	b	35ec <coda_cursor_read_uint32_array+0x278>
    3444:	bl	0 <__aeabi_read_tp>
    3448:	cmp	r3, #3
    344c:	bne	3474 <coda_cursor_read_uint32_array+0x100>
    3450:	ldr	r3, [pc, #660]	; 36ec <coda_cursor_read_uint32_array+0x378>
    3454:	ldr	r3, [pc, r3]
    3458:	ldr	r0, [r0, r3]
    345c:	cmp	r0, #0
    3460:	beq	3474 <coda_cursor_read_uint32_array+0x100>
    3464:	ldr	r3, [r1, #48]	; 0x30
    3468:	mov	r0, #9
    346c:	cmp	r3, #0
    3470:	bne	35dc <coda_cursor_read_uint32_array+0x268>
    3474:	ldr	r0, [r1, #12]
    3478:	cmp	r0, #5
    347c:	beq	35f8 <coda_cursor_read_uint32_array+0x284>
    3480:	cmp	r0, #3
    3484:	beq	3614 <coda_cursor_read_uint32_array+0x2a0>
    3488:	cmp	r0, #1
    348c:	bne	35dc <coda_cursor_read_uint32_array+0x268>
    3490:	mov	r0, r5
    3494:	mov	r1, r4
    3498:	bl	22bc <read_uint8_array>
    349c:	mvn	r6, #0
    34a0:	cmp	r0, #0
    34a4:	bne	340c <coda_cursor_read_uint32_array+0x98>
    34a8:	add	r1, sp, #4
    34ac:	mov	r0, r5
    34b0:	bl	0 <coda_cursor_get_num_elements>
    34b4:	cmp	r0, #0
    34b8:	bne	340c <coda_cursor_read_uint32_array+0x98>
    34bc:	ldr	r0, [sp, #4]
    34c0:	cmp	r0, #1
    34c4:	blt	36e4 <coda_cursor_read_uint32_array+0x370>
    34c8:	mvn	r2, r0
    34cc:	mvn	r1, #1
    34d0:	mvn	r3, #1
    34d4:	cmn	r2, #2
    34d8:	movgt	r1, r2
    34dc:	add	r1, r0, r1
    34e0:	add	lr, r1, #2
    34e4:	cmp	lr, #4
    34e8:	bcc	35b8 <coda_cursor_read_uint32_array+0x244>
    34ec:	cmn	r2, #2
    34f0:	mov	r7, #4
    34f4:	sub	r1, r0, #1
    34f8:	movgt	r3, r2
    34fc:	add	r6, r4, r1, lsl #2
    3500:	add	r3, r0, r3
    3504:	add	r3, r3, #1
    3508:	umull	r5, r7, r3, r7
    350c:	cmp	r7, #0
    3510:	movwne	r7, #1
    3514:	cmp	r5, r6
    3518:	bhi	35b8 <coda_cursor_read_uint32_array+0x244>
    351c:	cmp	r7, #0
    3520:	bne	35b8 <coda_cursor_read_uint32_array+0x244>
    3524:	add	r1, r4, r1
    3528:	cmp	r3, r1
    352c:	bhi	35b8 <coda_cursor_read_uint32_array+0x244>
    3530:	mvn	r3, #1
    3534:	cmn	r2, #2
    3538:	add	r1, r4, r0, lsl #2
    353c:	movle	r2, r3
    3540:	sub	r3, r3, r2
    3544:	add	r2, r4, r0
    3548:	add	r7, r4, r3, lsl #2
    354c:	cmp	r2, r7
    3550:	bls	3560 <coda_cursor_read_uint32_array+0x1ec>
    3554:	add	r3, r4, r3
    3558:	cmp	r3, r1
    355c:	bcc	35b8 <coda_cursor_read_uint32_array+0x244>
    3560:	bic	ip, lr, #3
    3564:	sub	r3, r2, #4
    3568:	sub	r6, r1, #16
    356c:	mov	r5, sp
    3570:	vmov.i32	q8, #255	; 0x000000ff
    3574:	mvn	r2, #15
    3578:	sub	r0, r0, ip
    357c:	mov	r1, ip
    3580:	ldr	r7, [r3], #-4
    3584:	subs	r1, r1, #4
    3588:	str	r7, [sp]
    358c:	vld1.32	{d18[0]}, [r5 :32]
    3590:	vmovl.u8	q9, d18
    3594:	vrev64.16	d18, d18
    3598:	vmovl.u16	q9, d18
    359c:	vand	q9, q9, q8
    35a0:	vrev64.32	q9, q9
    35a4:	vext.8	q9, q9, q9, #8
    35a8:	vst1.32	{d18-d19}, [r6], r2
    35ac:	bne	3580 <coda_cursor_read_uint32_array+0x20c>
    35b0:	cmp	lr, ip
    35b4:	beq	36e4 <coda_cursor_read_uint32_array+0x370>
    35b8:	sub	r0, r0, #1
    35bc:	ldrb	r1, [r4, r0]
    35c0:	str	r1, [r4, r0, lsl #2]
    35c4:	sub	r1, r0, #1
    35c8:	add	r0, r0, #1
    35cc:	cmp	r0, #1
    35d0:	mov	r0, r1
    35d4:	bgt	35bc <coda_cursor_read_uint32_array+0x248>
    35d8:	b	36e4 <coda_cursor_read_uint32_array+0x370>
    35dc:	bl	0 <coda_type_get_native_type_name>
    35e0:	movw	r1, #0
    35e4:	mov	r2, r0
    35e8:	movt	r1, #0
    35ec:	mvn	r0, #104	; 0x68
    35f0:	bl	0 <coda_set_error>
    35f4:	b	3408 <coda_cursor_read_uint32_array+0x94>
    35f8:	mov	r0, r5
    35fc:	mov	r1, r4
    3600:	bl	36f4 <read_uint32_array>
    3604:	mvn	r6, #0
    3608:	cmp	r0, #0
    360c:	moveq	r6, #0
    3610:	b	340c <coda_cursor_read_uint32_array+0x98>
    3614:	mov	r0, r5
    3618:	mov	r1, r4
    361c:	bl	2b7c <read_uint16_array>
    3620:	mvn	r6, #0
    3624:	cmp	r0, #0
    3628:	bne	340c <coda_cursor_read_uint32_array+0x98>
    362c:	add	r1, sp, #4
    3630:	mov	r0, r5
    3634:	bl	0 <coda_cursor_get_num_elements>
    3638:	cmp	r0, #0
    363c:	bne	340c <coda_cursor_read_uint32_array+0x98>
    3640:	ldr	r0, [sp, #4]
    3644:	cmp	r0, #1
    3648:	blt	36e4 <coda_cursor_read_uint32_array+0x370>
    364c:	mvn	r1, r0
    3650:	mvn	ip, #1
    3654:	cmn	r1, #2
    3658:	movle	r1, ip
    365c:	add	r1, r0, r1
    3660:	add	r2, r1, #2
    3664:	cmp	r2, #4
    3668:	bcs	3674 <coda_cursor_read_uint32_array+0x300>
    366c:	mov	r1, r0
    3670:	b	36c0 <coda_cursor_read_uint32_array+0x34c>
    3674:	bic	lr, r2, #3
    3678:	add	r3, r4, r0, lsl #1
    367c:	sub	r1, r0, lr
    3680:	add	r0, r4, r0, lsl #2
    3684:	sub	r6, r3, #8
    3688:	mvn	r3, #15
    368c:	mov	r7, lr
    3690:	sub	r5, r0, #16
    3694:	mvn	r0, #7
    3698:	vld1.16	{d16}, [r6], r0
    369c:	subs	r7, r7, #4
    36a0:	vrev64.16	d16, d16
    36a4:	vmovl.u16	q8, d16
    36a8:	vrev64.32	q8, q8
    36ac:	vext.8	q8, q8, q8, #8
    36b0:	vst1.32	{d16-d17}, [r5], r3
    36b4:	bne	3698 <coda_cursor_read_uint32_array+0x324>
    36b8:	cmp	r2, lr
    36bc:	beq	36e4 <coda_cursor_read_uint32_array+0x370>
    36c0:	add	r0, ip, r1, lsl #1
    36c4:	add	r1, r1, #1
    36c8:	add	r2, r4, r0
    36cc:	sub	r1, r1, #1
    36d0:	ldrh	r2, [r2]
    36d4:	cmp	r1, #1
    36d8:	str	r2, [r4, r0, lsl #1]
    36dc:	sub	r0, r0, #2
    36e0:	bgt	36c8 <coda_cursor_read_uint32_array+0x354>
    36e4:	mov	r6, #0
    36e8:	b	340c <coda_cursor_read_uint32_array+0x98>
    36ec:	.word	0x00000290
    36f0:	.word	0x00000308

000036f4 <read_uint32_array>:
    36f4:	push	{r4, r5, r6, sl, fp, lr}
    36f8:	add	fp, sp, #16
    36fc:	mov	r6, r0
    3700:	ldr	r0, [r0, #4]
    3704:	mov	r4, r1
    3708:	mov	r5, r2
    370c:	add	r0, r6, r0, lsl #4
    3710:	ldr	r0, [r0, #-8]
    3714:	ldr	r0, [r0]
    3718:	sub	r1, r0, #100	; 0x64
    371c:	cmp	r1, #5
    3720:	bhi	3758 <read_uint32_array+0x64>
    3724:	add	r0, pc, #0
    3728:	ldr	pc, [r0, r1, lsl #2]
    372c:	.word	0x00003744
    3730:	.word	0x0000377c
    3734:	.word	0x00003784
    3738:	.word	0x00003798
    373c:	.word	0x000037ec
    3740:	.word	0x000037ec
    3744:	mov	r0, r6
    3748:	mov	r1, r4
    374c:	mov	r2, r5
    3750:	pop	{r4, r5, r6, sl, fp, lr}
    3754:	b	0 <coda_mem_cursor_read_uint32_array>
    3758:	cmp	r0, #1
    375c:	beq	37d0 <read_uint32_array+0xdc>
    3760:	cmp	r0, #0
    3764:	bne	37b4 <read_uint32_array+0xc0>
    3768:	mov	r0, r6
    376c:	mov	r1, r4
    3770:	mov	r2, r5
    3774:	pop	{r4, r5, r6, sl, fp, lr}
    3778:	b	0 <coda_ascii_cursor_read_uint32_array>
    377c:	mvn	r0, #10
    3780:	b	3788 <read_uint32_array+0x94>
    3784:	mvn	r0, #12
    3788:	mov	r1, #0
    378c:	bl	0 <coda_set_error>
    3790:	mvn	r0, #0
    3794:	pop	{r4, r5, r6, sl, fp, pc}
    3798:	mov	r0, r6
    379c:	mov	r1, r4
    37a0:	bl	0 <coda_cdf_cursor_read_uint32_array>
    37a4:	mov	r1, r0
    37a8:	mvn	r0, #0
    37ac:	cmp	r1, #0
    37b0:	popne	{r4, r5, r6, sl, fp, pc}
    37b4:	cmp	r5, #0
    37b8:	beq	37e4 <read_uint32_array+0xf0>
    37bc:	mov	r0, r6
    37c0:	mov	r1, r4
    37c4:	mov	r2, #4
    37c8:	pop	{r4, r5, r6, sl, fp, lr}
    37cc:	b	aae0 <transpose_array>
    37d0:	mov	r0, r6
    37d4:	mov	r1, r4
    37d8:	mov	r2, r5
    37dc:	pop	{r4, r5, r6, sl, fp, lr}
    37e0:	b	0 <coda_bin_cursor_read_uint32_array>
    37e4:	mov	r0, #0
    37e8:	pop	{r4, r5, r6, sl, fp, pc}
    37ec:	movw	r0, #0
    37f0:	movw	r1, #0
    37f4:	movw	r3, #0
    37f8:	movw	r2, #1077	; 0x435
    37fc:	movt	r0, #0
    3800:	movt	r1, #0
    3804:	movt	r3, #0
    3808:	bl	0 <__assert_fail>
    380c:	nop	{0}

00003810 <coda_cursor_read_int64_array>:
    3810:	push	{r4, r5, r6, r7, fp, lr}
    3814:	add	fp, sp, #16
    3818:	sub	sp, sp, #24
    381c:	cmp	r0, #0
    3820:	beq	3888 <coda_cursor_read_int64_array+0x78>
    3824:	mov	r5, r0
    3828:	ldr	r0, [r0, #4]
    382c:	cmp	r0, #1
    3830:	blt	3888 <coda_cursor_read_int64_array+0x78>
    3834:	add	r0, r5, r0, lsl #4
    3838:	mov	r4, r1
    383c:	ldr	r1, [r0, #-8]
    3840:	cmp	r1, #0
    3844:	beq	3888 <coda_cursor_read_int64_array+0x78>
    3848:	cmp	r4, #0
    384c:	beq	38b4 <coda_cursor_read_int64_array+0xa4>
    3850:	ldr	r0, [r1]
    3854:	cmp	r0, #99	; 0x63
    3858:	ldrhi	r1, [r1, #4]
    385c:	ldr	r0, [r1, #8]
    3860:	cmp	r0, #1
    3864:	bne	38cc <coda_cursor_read_int64_array+0xbc>
    3868:	ldr	r1, [r1, #40]	; 0x28
    386c:	ldr	r3, [r1, #8]
    3870:	cmp	r3, #2
    3874:	bne	38e0 <coda_cursor_read_int64_array+0xd0>
    3878:	ldr	r0, [pc, #2004]	; 4054 <coda_cursor_read_int64_array+0x844>
    387c:	ldr	r3, [pc, r0]
    3880:	bl	0 <__aeabi_read_tp>
    3884:	b	38f4 <coda_cursor_read_int64_array+0xe4>
    3888:	movw	r1, #0
    388c:	movw	r2, #0
    3890:	mvn	r0, #99	; 0x63
    3894:	movw	r3, #3413	; 0xd55
    3898:	movt	r1, #0
    389c:	movt	r2, #0
    38a0:	bl	0 <coda_set_error>
    38a4:	mvn	r6, #0
    38a8:	mov	r0, r6
    38ac:	sub	sp, fp, #16
    38b0:	pop	{r4, r5, r6, r7, fp, pc}
    38b4:	movw	r1, #0
    38b8:	movw	r2, #0
    38bc:	mvn	r0, #99	; 0x63
    38c0:	movw	r3, #3418	; 0xd5a
    38c4:	movt	r1, #0
    38c8:	b	389c <coda_cursor_read_int64_array+0x8c>
    38cc:	bl	0 <coda_type_get_class_name>
    38d0:	movw	r1, #0
    38d4:	mov	r2, r0
    38d8:	movt	r1, #0
    38dc:	b	3920 <coda_cursor_read_int64_array+0x110>
    38e0:	bl	0 <__aeabi_read_tp>
    38e4:	cmp	r3, #3
    38e8:	bne	392c <coda_cursor_read_int64_array+0x11c>
    38ec:	ldr	r3, [pc, #1884]	; 4050 <coda_cursor_read_int64_array+0x840>
    38f0:	ldr	r3, [pc, r3]
    38f4:	ldr	r0, [r0, r3]
    38f8:	cmp	r0, #0
    38fc:	beq	392c <coda_cursor_read_int64_array+0x11c>
    3900:	ldr	r3, [r1, #48]	; 0x30
    3904:	mov	r0, #9
    3908:	cmp	r3, #0
    390c:	beq	392c <coda_cursor_read_int64_array+0x11c>
    3910:	bl	0 <coda_type_get_native_type_name>
    3914:	movw	r1, #0
    3918:	mov	r2, r0
    391c:	movt	r1, #0
    3920:	mvn	r0, #104	; 0x68
    3924:	bl	0 <coda_set_error>
    3928:	b	38a4 <coda_cursor_read_int64_array+0x94>
    392c:	ldr	r0, [r1, #12]
    3930:	cmp	r0, #6
    3934:	bhi	3910 <coda_cursor_read_int64_array+0x100>
    3938:	add	r1, pc, #0
    393c:	ldr	pc, [r1, r0, lsl #2]
    3940:	.word	0x0000395c
    3944:	.word	0x00003adc
    3948:	.word	0x00003b70
    394c:	.word	0x00003bc8
    3950:	.word	0x00003c20
    3954:	.word	0x00003c78
    3958:	.word	0x00003cd0
    395c:	mov	r0, r5
    3960:	mov	r1, r4
    3964:	bl	205c <read_int8_array>
    3968:	mvn	r6, #0
    396c:	cmp	r0, #0
    3970:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3974:	add	r1, sp, #20
    3978:	mov	r0, r5
    397c:	bl	0 <coda_cursor_get_num_elements>
    3980:	cmp	r0, #0
    3984:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3988:	ldr	r0, [sp, #20]
    398c:	cmp	r0, #1
    3990:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3994:	mvn	r2, r0
    3998:	mvn	r1, #1
    399c:	mvn	r6, #1
    39a0:	cmn	r2, #2
    39a4:	movgt	r1, r2
    39a8:	add	lr, r0, r1
    39ac:	cmn	lr, #3
    39b0:	bhi	3a9c <coda_cursor_read_int64_array+0x28c>
    39b4:	cmn	r2, #2
    39b8:	mov	r5, #8
    39bc:	sub	r3, r0, #1
    39c0:	movgt	r6, r2
    39c4:	add	ip, r4, r3, lsl #3
    39c8:	add	r6, r0, r6
    39cc:	add	r6, r6, #1
    39d0:	umull	r1, r5, r6, r5
    39d4:	cmp	r5, #0
    39d8:	movwne	r5, #1
    39dc:	cmp	r1, ip
    39e0:	bhi	3a9c <coda_cursor_read_int64_array+0x28c>
    39e4:	cmp	r5, #0
    39e8:	bne	3a9c <coda_cursor_read_int64_array+0x28c>
    39ec:	add	r1, r4, r3
    39f0:	cmp	r6, r1
    39f4:	bhi	3a9c <coda_cursor_read_int64_array+0x28c>
    39f8:	mvn	r1, #1
    39fc:	cmn	r2, #2
    3a00:	movle	r2, r1
    3a04:	sub	r2, r1, r2
    3a08:	add	r1, r4, r0
    3a0c:	add	r3, r4, r2, lsl #3
    3a10:	cmp	r1, r3
    3a14:	bls	3a28 <coda_cursor_read_int64_array+0x218>
    3a18:	add	r1, r4, r0, lsl #3
    3a1c:	add	r2, r4, r2
    3a20:	cmp	r2, r1
    3a24:	bcc	3a9c <coda_cursor_read_int64_array+0x28c>
    3a28:	add	ip, lr, #2
    3a2c:	sub	r1, r0, #2
    3a30:	add	r5, sp, #4
    3a34:	vmov.i32	q8, #0	; 0x00000000
    3a38:	bic	lr, ip, #1
    3a3c:	add	r2, r4, r1
    3a40:	add	r6, r4, r1, lsl #3
    3a44:	mvn	r1, #15
    3a48:	sub	r0, r0, lr
    3a4c:	mov	r3, lr
    3a50:	ldrh	r7, [r2], #-2
    3a54:	subs	r3, r3, #2
    3a58:	strh	r7, [sp, #4]
    3a5c:	vld1.16	{d18[0]}, [r5 :16]
    3a60:	add	r7, pc, #968	; 0x3c8
    3a64:	vld1.64	{d20-d21}, [r7 :128]
    3a68:	vmovl.u8	q9, d18
    3a6c:	vmovl.u16	q9, d18
    3a70:	vsub.i64	q10, q8, q10
    3a74:	vrev64.32	d18, d18
    3a78:	vmovl.u32	q9, d18
    3a7c:	vshl.s64	q9, q9, #56	; 0x38
    3a80:	vshl.s64	q9, q9, q10
    3a84:	vorr	d20, d19, d19
    3a88:	vorr	d21, d18, d18
    3a8c:	vst1.64	{d20-d21}, [r6], r1
    3a90:	bne	3a50 <coda_cursor_read_int64_array+0x240>
    3a94:	cmp	ip, lr
    3a98:	beq	4030 <coda_cursor_read_int64_array+0x820>
    3a9c:	mvn	r1, #7
    3aa0:	add	r1, r1, r0, lsl #3
    3aa4:	sub	r0, r0, #1
    3aa8:	add	r2, r4, r0
    3aac:	add	r3, r4, r1
    3ab0:	ldrsb	r2, [r2]
    3ab4:	str	r2, [r4, r1]
    3ab8:	asr	r2, r2, #31
    3abc:	sub	r1, r1, #8
    3ac0:	str	r2, [r3, #4]
    3ac4:	sub	r2, r0, #1
    3ac8:	add	r0, r0, #1
    3acc:	cmp	r0, #1
    3ad0:	mov	r0, r2
    3ad4:	bgt	3aa8 <coda_cursor_read_int64_array+0x298>
    3ad8:	b	4030 <coda_cursor_read_int64_array+0x820>
    3adc:	mov	r0, r5
    3ae0:	mov	r1, r4
    3ae4:	bl	22bc <read_uint8_array>
    3ae8:	mvn	r6, #0
    3aec:	cmp	r0, #0
    3af0:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3af4:	add	r1, sp, #20
    3af8:	mov	r0, r5
    3afc:	bl	0 <coda_cursor_get_num_elements>
    3b00:	cmp	r0, #0
    3b04:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3b08:	ldr	r0, [sp, #20]
    3b0c:	cmp	r0, #1
    3b10:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3b14:	mvn	r2, r0
    3b18:	mvn	r1, #1
    3b1c:	mvn	r6, #1
    3b20:	cmn	r2, #2
    3b24:	movgt	r1, r2
    3b28:	add	r1, r0, r1
    3b2c:	cmn	r1, #3
    3b30:	bls	3ecc <coda_cursor_read_int64_array+0x6bc>
    3b34:	mvn	r1, #7
    3b38:	sub	r2, r0, #1
    3b3c:	add	r1, r1, r0, lsl #3
    3b40:	mov	r0, #0
    3b44:	ldrb	r3, [r4, r2]
    3b48:	str	r3, [r4, r1]
    3b4c:	add	r3, r4, r1
    3b50:	sub	r1, r1, #8
    3b54:	str	r0, [r3, #4]
    3b58:	sub	r3, r2, #1
    3b5c:	add	r2, r2, #1
    3b60:	cmp	r2, #1
    3b64:	mov	r2, r3
    3b68:	bgt	3b44 <coda_cursor_read_int64_array+0x334>
    3b6c:	b	4030 <coda_cursor_read_int64_array+0x820>
    3b70:	mov	r0, r5
    3b74:	mov	r1, r4
    3b78:	bl	27b8 <read_int16_array>
    3b7c:	mvn	r6, #0
    3b80:	cmp	r0, #0
    3b84:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3b88:	add	r1, sp, #20
    3b8c:	mov	r0, r5
    3b90:	bl	0 <coda_cursor_get_num_elements>
    3b94:	cmp	r0, #0
    3b98:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3b9c:	ldr	r1, [sp, #20]
    3ba0:	cmp	r1, #1
    3ba4:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3ba8:	mvn	r0, r1
    3bac:	cmn	r0, #2
    3bb0:	mvnle	r0, #1
    3bb4:	add	r0, r1, r0
    3bb8:	cmn	r0, #3
    3bbc:	bls	3cec <coda_cursor_read_int64_array+0x4dc>
    3bc0:	mov	r0, r1
    3bc4:	b	3d60 <coda_cursor_read_int64_array+0x550>
    3bc8:	mov	r0, r5
    3bcc:	mov	r1, r4
    3bd0:	bl	2b7c <read_uint16_array>
    3bd4:	mvn	r6, #0
    3bd8:	cmp	r0, #0
    3bdc:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3be0:	add	r1, sp, #20
    3be4:	mov	r0, r5
    3be8:	bl	0 <coda_cursor_get_num_elements>
    3bec:	cmp	r0, #0
    3bf0:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3bf4:	ldr	r1, [sp, #20]
    3bf8:	cmp	r1, #1
    3bfc:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3c00:	mvn	r0, r1
    3c04:	cmn	r0, #2
    3c08:	mvnle	r0, #1
    3c0c:	add	r0, r1, r0
    3c10:	cmn	r0, #3
    3c14:	bls	3d94 <coda_cursor_read_int64_array+0x584>
    3c18:	mov	r0, r1
    3c1c:	b	3df8 <coda_cursor_read_int64_array+0x5e8>
    3c20:	mov	r0, r5
    3c24:	mov	r1, r4
    3c28:	bl	324c <read_int32_array>
    3c2c:	mvn	r6, #0
    3c30:	cmp	r0, #0
    3c34:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3c38:	add	r1, sp, #20
    3c3c:	mov	r0, r5
    3c40:	bl	0 <coda_cursor_get_num_elements>
    3c44:	cmp	r0, #0
    3c48:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3c4c:	ldr	r1, [sp, #20]
    3c50:	cmp	r1, #1
    3c54:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3c58:	mvn	r0, r1
    3c5c:	cmn	r0, #2
    3c60:	mvnle	r0, #1
    3c64:	add	r0, r1, r0
    3c68:	cmn	r0, #3
    3c6c:	bls	3e40 <coda_cursor_read_int64_array+0x630>
    3c70:	mov	r0, r1
    3c74:	b	3e90 <coda_cursor_read_int64_array+0x680>
    3c78:	mov	r0, r5
    3c7c:	mov	r1, r4
    3c80:	bl	36f4 <read_uint32_array>
    3c84:	mvn	r6, #0
    3c88:	cmp	r0, #0
    3c8c:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3c90:	add	r1, sp, #20
    3c94:	mov	r0, r5
    3c98:	bl	0 <coda_cursor_get_num_elements>
    3c9c:	cmp	r0, #0
    3ca0:	bne	38a8 <coda_cursor_read_int64_array+0x98>
    3ca4:	ldr	r1, [sp, #20]
    3ca8:	cmp	r1, #1
    3cac:	blt	4030 <coda_cursor_read_int64_array+0x820>
    3cb0:	mvn	r0, r1
    3cb4:	cmn	r0, #2
    3cb8:	mvnle	r0, #1
    3cbc:	add	r0, r1, r0
    3cc0:	cmn	r0, #3
    3cc4:	bls	3fa8 <coda_cursor_read_int64_array+0x798>
    3cc8:	mov	r0, r1
    3ccc:	b	3ff8 <coda_cursor_read_int64_array+0x7e8>
    3cd0:	mov	r0, r5
    3cd4:	mov	r1, r4
    3cd8:	bl	4058 <read_int64_array>
    3cdc:	mvn	r6, #0
    3ce0:	cmp	r0, #0
    3ce4:	moveq	r6, #0
    3ce8:	b	38a8 <coda_cursor_read_int64_array+0x98>
    3cec:	add	ip, r0, #2
    3cf0:	add	r2, r4, r1, lsl #1
    3cf4:	add	r5, sp, #12
    3cf8:	vmov.i32	q8, #0	; 0x00000000
    3cfc:	bic	lr, ip, #1
    3d00:	sub	r3, r2, #4
    3d04:	sub	r0, r1, lr
    3d08:	add	r1, r4, r1, lsl #3
    3d0c:	mov	r2, lr
    3d10:	sub	r6, r1, #16
    3d14:	mvn	r1, #15
    3d18:	ldr	r7, [r3], #-4
    3d1c:	subs	r2, r2, #2
    3d20:	str	r7, [sp, #12]
    3d24:	vld1.32	{d18[0]}, [r5 :32]
    3d28:	add	r7, pc, #784	; 0x310
    3d2c:	vld1.64	{d20-d21}, [r7 :128]
    3d30:	vmovl.u16	q9, d18
    3d34:	vrev64.32	d18, d18
    3d38:	vsub.i64	q10, q8, q10
    3d3c:	vmovl.u32	q9, d18
    3d40:	vshl.s64	q9, q9, #48	; 0x30
    3d44:	vshl.s64	q9, q9, q10
    3d48:	vorr	d20, d19, d19
    3d4c:	vorr	d21, d18, d18
    3d50:	vst1.64	{d20-d21}, [r6], r1
    3d54:	bne	3d18 <coda_cursor_read_int64_array+0x508>
    3d58:	cmp	ip, lr
    3d5c:	beq	4030 <coda_cursor_read_int64_array+0x820>
    3d60:	add	r1, r4, r0, lsl #3
    3d64:	add	r2, r4, r0, lsl #1
    3d68:	add	r0, r0, #1
    3d6c:	sub	r1, r1, #8
    3d70:	sub	r2, r2, #2
    3d74:	ldrsh	r4, [r2], #-2
    3d78:	sub	r0, r0, #1
    3d7c:	cmp	r0, #1
    3d80:	asr	r5, r4, #31
    3d84:	strd	r4, [r1]
    3d88:	sub	r1, r1, #8
    3d8c:	bgt	3d74 <coda_cursor_read_int64_array+0x564>
    3d90:	b	4030 <coda_cursor_read_int64_array+0x820>
    3d94:	add	ip, r0, #2
    3d98:	add	r2, r4, r1, lsl #1
    3d9c:	add	r5, sp, #16
    3da0:	vmov.i64	q8, #0x000000000000ffff
    3da4:	bic	lr, ip, #1
    3da8:	sub	r3, r2, #4
    3dac:	sub	r0, r1, lr
    3db0:	add	r1, r4, r1, lsl #3
    3db4:	mov	r2, lr
    3db8:	sub	r6, r1, #16
    3dbc:	mvn	r1, #15
    3dc0:	ldr	r7, [r3], #-4
    3dc4:	subs	r2, r2, #2
    3dc8:	str	r7, [sp, #16]
    3dcc:	vld1.32	{d18[0]}, [r5 :32]
    3dd0:	vmovl.u16	q9, d18
    3dd4:	vrev64.32	d18, d18
    3dd8:	vmovl.u32	q9, d18
    3ddc:	vand	q9, q9, q8
    3de0:	vorr	d20, d19, d19
    3de4:	vorr	d21, d18, d18
    3de8:	vst1.64	{d20-d21}, [r6], r1
    3dec:	bne	3dc0 <coda_cursor_read_int64_array+0x5b0>
    3df0:	cmp	ip, lr
    3df4:	beq	4030 <coda_cursor_read_int64_array+0x820>
    3df8:	add	r1, r4, r0, lsl #3
    3dfc:	add	r2, r4, r0, lsl #1
    3e00:	add	r0, r0, #1
    3e04:	mov	r3, #0
    3e08:	sub	r1, r1, #8
    3e0c:	sub	r2, r2, #2
    3e10:	ldrh	r4, [r2], #-2
    3e14:	sub	r0, r0, #1
    3e18:	cmp	r0, #1
    3e1c:	str	r4, [r1]
    3e20:	str	r3, [r1, #4]
    3e24:	sub	r1, r1, #8
    3e28:	bgt	3e10 <coda_cursor_read_int64_array+0x600>
    3e2c:	b	4030 <coda_cursor_read_int64_array+0x820>
    3e30:	.word	0x00000038
    3e34:	.word	0x00000000
    3e38:	.word	0x00000038
    3e3c:	.word	0x00000000
    3e40:	add	ip, r0, #2
    3e44:	add	r2, r4, r1, lsl #2
    3e48:	mvn	r5, #7
    3e4c:	bic	lr, ip, #1
    3e50:	sub	r3, r2, #8
    3e54:	sub	r0, r1, lr
    3e58:	add	r1, r4, r1, lsl #3
    3e5c:	mov	r2, lr
    3e60:	sub	r6, r1, #16
    3e64:	mvn	r1, #15
    3e68:	vld1.32	{d16}, [r3], r5
    3e6c:	subs	r2, r2, #2
    3e70:	vrev64.32	d16, d16
    3e74:	vmovl.s32	q8, d16
    3e78:	vorr	d18, d17, d17
    3e7c:	vorr	d19, d16, d16
    3e80:	vst1.64	{d18-d19}, [r6], r1
    3e84:	bne	3e68 <coda_cursor_read_int64_array+0x658>
    3e88:	cmp	ip, lr
    3e8c:	beq	4030 <coda_cursor_read_int64_array+0x820>
    3e90:	mvn	r1, #7
    3e94:	add	r1, r1, r0, lsl #3
    3e98:	sub	r0, r0, #1
    3e9c:	ldr	r2, [r4, r0, lsl #2]
    3ea0:	add	r3, r4, r1
    3ea4:	str	r2, [r4, r1]
    3ea8:	asr	r2, r2, #31
    3eac:	sub	r1, r1, #8
    3eb0:	str	r2, [r3, #4]
    3eb4:	sub	r2, r0, #1
    3eb8:	add	r0, r0, #1
    3ebc:	cmp	r0, #1
    3ec0:	mov	r0, r2
    3ec4:	bgt	3e9c <coda_cursor_read_int64_array+0x68c>
    3ec8:	b	4030 <coda_cursor_read_int64_array+0x820>
    3ecc:	cmn	r2, #2
    3ed0:	mov	r5, #8
    3ed4:	sub	r3, r0, #1
    3ed8:	movgt	r6, r2
    3edc:	add	ip, r4, r3, lsl #3
    3ee0:	add	r6, r0, r6
    3ee4:	add	r6, r6, #1
    3ee8:	umull	r7, r5, r6, r5
    3eec:	cmp	r5, #0
    3ef0:	movwne	r5, #1
    3ef4:	cmp	r7, ip
    3ef8:	bhi	3b34 <coda_cursor_read_int64_array+0x324>
    3efc:	cmp	r5, #0
    3f00:	bne	3b34 <coda_cursor_read_int64_array+0x324>
    3f04:	add	r3, r4, r3
    3f08:	cmp	r6, r3
    3f0c:	bhi	3b34 <coda_cursor_read_int64_array+0x324>
    3f10:	mvn	r3, #1
    3f14:	cmn	r2, #2
    3f18:	movle	r2, r3
    3f1c:	sub	r2, r3, r2
    3f20:	add	r3, r4, r0
    3f24:	add	r7, r4, r2, lsl #3
    3f28:	cmp	r3, r7
    3f2c:	bls	3f40 <coda_cursor_read_int64_array+0x730>
    3f30:	add	r3, r4, r0, lsl #3
    3f34:	add	r2, r4, r2
    3f38:	cmp	r2, r3
    3f3c:	bcc	3b34 <coda_cursor_read_int64_array+0x324>
    3f40:	add	ip, r1, #2
    3f44:	sub	r1, r0, #2
    3f48:	add	r5, sp, #8
    3f4c:	vmov.i64	q8, #0x00000000000000ff
    3f50:	bic	lr, ip, #1
    3f54:	add	r2, r4, r1
    3f58:	add	r6, r4, r1, lsl #3
    3f5c:	mvn	r1, #15
    3f60:	sub	r0, r0, lr
    3f64:	mov	r3, lr
    3f68:	ldrh	r7, [r2], #-2
    3f6c:	subs	r3, r3, #2
    3f70:	strh	r7, [sp, #8]
    3f74:	vld1.16	{d18[0]}, [r5 :16]
    3f78:	vmovl.u8	q9, d18
    3f7c:	vmovl.u16	q9, d18
    3f80:	vrev64.32	d18, d18
    3f84:	vmovl.u32	q9, d18
    3f88:	vand	q9, q9, q8
    3f8c:	vorr	d20, d19, d19
    3f90:	vorr	d21, d18, d18
    3f94:	vst1.64	{d20-d21}, [r6], r1
    3f98:	bne	3f68 <coda_cursor_read_int64_array+0x758>
    3f9c:	cmp	ip, lr
    3fa0:	bne	3b34 <coda_cursor_read_int64_array+0x324>
    3fa4:	b	4030 <coda_cursor_read_int64_array+0x820>
    3fa8:	add	ip, r0, #2
    3fac:	add	r2, r4, r1, lsl #2
    3fb0:	mvn	r5, #7
    3fb4:	bic	lr, ip, #1
    3fb8:	sub	r3, r2, #8
    3fbc:	sub	r0, r1, lr
    3fc0:	add	r1, r4, r1, lsl #3
    3fc4:	mov	r2, lr
    3fc8:	sub	r6, r1, #16
    3fcc:	mvn	r1, #15
    3fd0:	vld1.32	{d16}, [r3], r5
    3fd4:	subs	r2, r2, #2
    3fd8:	vrev64.32	d16, d16
    3fdc:	vmovl.u32	q8, d16
    3fe0:	vorr	d18, d17, d17
    3fe4:	vorr	d19, d16, d16
    3fe8:	vst1.64	{d18-d19}, [r6], r1
    3fec:	bne	3fd0 <coda_cursor_read_int64_array+0x7c0>
    3ff0:	cmp	ip, lr
    3ff4:	beq	4030 <coda_cursor_read_int64_array+0x820>
    3ff8:	mvn	r1, #7
    3ffc:	sub	r2, r0, #1
    4000:	add	r1, r1, r0, lsl #3
    4004:	mov	r0, #0
    4008:	ldr	r3, [r4, r2, lsl #2]
    400c:	str	r3, [r4, r1]
    4010:	add	r3, r4, r1
    4014:	sub	r1, r1, #8
    4018:	str	r0, [r3, #4]
    401c:	sub	r3, r2, #1
    4020:	add	r2, r2, #1
    4024:	cmp	r2, #1
    4028:	mov	r2, r3
    402c:	bgt	4008 <coda_cursor_read_int64_array+0x7f8>
    4030:	mov	r6, #0
    4034:	b	38a8 <coda_cursor_read_int64_array+0x98>
    4038:	nop	{0}
    403c:	nop	{0}
    4040:	.word	0x00000030
    4044:	.word	0x00000000
    4048:	.word	0x00000030
    404c:	.word	0x00000000
    4050:	.word	0x00000758
    4054:	.word	0x000007d0

00004058 <read_int64_array>:
    4058:	push	{r4, r5, r6, sl, fp, lr}
    405c:	add	fp, sp, #16
    4060:	mov	r6, r0
    4064:	ldr	r0, [r0, #4]
    4068:	mov	r4, r1
    406c:	mov	r5, r2
    4070:	add	r0, r6, r0, lsl #4
    4074:	ldr	r0, [r0, #-8]
    4078:	ldr	r0, [r0]
    407c:	sub	r1, r0, #100	; 0x64
    4080:	cmp	r1, #5
    4084:	bhi	40bc <read_int64_array+0x64>
    4088:	add	r0, pc, #0
    408c:	ldr	pc, [r0, r1, lsl #2]
    4090:	.word	0x000040a8
    4094:	.word	0x000040e0
    4098:	.word	0x000040e8
    409c:	.word	0x000040fc
    40a0:	.word	0x00004150
    40a4:	.word	0x00004150
    40a8:	mov	r0, r6
    40ac:	mov	r1, r4
    40b0:	mov	r2, r5
    40b4:	pop	{r4, r5, r6, sl, fp, lr}
    40b8:	b	0 <coda_mem_cursor_read_int64_array>
    40bc:	cmp	r0, #1
    40c0:	beq	4134 <read_int64_array+0xdc>
    40c4:	cmp	r0, #0
    40c8:	bne	4118 <read_int64_array+0xc0>
    40cc:	mov	r0, r6
    40d0:	mov	r1, r4
    40d4:	mov	r2, r5
    40d8:	pop	{r4, r5, r6, sl, fp, lr}
    40dc:	b	0 <coda_ascii_cursor_read_int64_array>
    40e0:	mvn	r0, #10
    40e4:	b	40ec <read_int64_array+0x94>
    40e8:	mvn	r0, #12
    40ec:	mov	r1, #0
    40f0:	bl	0 <coda_set_error>
    40f4:	mvn	r0, #0
    40f8:	pop	{r4, r5, r6, sl, fp, pc}
    40fc:	mov	r0, r6
    4100:	mov	r1, r4
    4104:	bl	0 <coda_cdf_cursor_read_int64_array>
    4108:	mov	r1, r0
    410c:	mvn	r0, #0
    4110:	cmp	r1, #0
    4114:	popne	{r4, r5, r6, sl, fp, pc}
    4118:	cmp	r5, #0
    411c:	beq	4148 <read_int64_array+0xf0>
    4120:	mov	r0, r6
    4124:	mov	r1, r4
    4128:	mov	r2, #8
    412c:	pop	{r4, r5, r6, sl, fp, lr}
    4130:	b	aae0 <transpose_array>
    4134:	mov	r0, r6
    4138:	mov	r1, r4
    413c:	mov	r2, r5
    4140:	pop	{r4, r5, r6, sl, fp, lr}
    4144:	b	0 <coda_bin_cursor_read_int64_array>
    4148:	mov	r0, #0
    414c:	pop	{r4, r5, r6, sl, fp, pc}
    4150:	movw	r0, #0
    4154:	movw	r1, #0
    4158:	movw	r3, #0
    415c:	movw	r2, #1129	; 0x469
    4160:	movt	r0, #0
    4164:	movt	r1, #0
    4168:	movt	r3, #0
    416c:	bl	0 <__assert_fail>

00004170 <coda_cursor_read_uint64_array>:
    4170:	push	{r4, r5, r6, r7, fp, lr}
    4174:	add	fp, sp, #16
    4178:	sub	sp, sp, #16
    417c:	cmp	r0, #0
    4180:	beq	41e8 <coda_cursor_read_uint64_array+0x78>
    4184:	mov	r5, r0
    4188:	ldr	r0, [r0, #4]
    418c:	cmp	r0, #1
    4190:	blt	41e8 <coda_cursor_read_uint64_array+0x78>
    4194:	add	r0, r5, r0, lsl #4
    4198:	mov	r4, r1
    419c:	ldr	r1, [r0, #-8]
    41a0:	cmp	r1, #0
    41a4:	beq	41e8 <coda_cursor_read_uint64_array+0x78>
    41a8:	cmp	r4, #0
    41ac:	beq	4214 <coda_cursor_read_uint64_array+0xa4>
    41b0:	ldr	r0, [r1]
    41b4:	cmp	r0, #99	; 0x63
    41b8:	ldrhi	r1, [r1, #4]
    41bc:	ldr	r0, [r1, #8]
    41c0:	cmp	r0, #1
    41c4:	bne	422c <coda_cursor_read_uint64_array+0xbc>
    41c8:	ldr	r1, [r1, #40]	; 0x28
    41cc:	ldr	r3, [r1, #8]
    41d0:	cmp	r3, #2
    41d4:	bne	4240 <coda_cursor_read_uint64_array+0xd0>
    41d8:	ldr	r0, [pc, #1100]	; 462c <coda_cursor_read_uint64_array+0x4bc>
    41dc:	ldr	r3, [pc, r0]
    41e0:	bl	0 <__aeabi_read_tp>
    41e4:	b	4254 <coda_cursor_read_uint64_array+0xe4>
    41e8:	movw	r1, #0
    41ec:	movw	r2, #0
    41f0:	mvn	r0, #99	; 0x63
    41f4:	movw	r3, #3561	; 0xde9
    41f8:	movt	r1, #0
    41fc:	movt	r2, #0
    4200:	bl	0 <coda_set_error>
    4204:	mvn	r6, #0
    4208:	mov	r0, r6
    420c:	sub	sp, fp, #16
    4210:	pop	{r4, r5, r6, r7, fp, pc}
    4214:	movw	r1, #0
    4218:	movw	r2, #0
    421c:	mvn	r0, #99	; 0x63
    4220:	movw	r3, #3566	; 0xdee
    4224:	movt	r1, #0
    4228:	b	41fc <coda_cursor_read_uint64_array+0x8c>
    422c:	bl	0 <coda_type_get_class_name>
    4230:	movw	r1, #0
    4234:	mov	r2, r0
    4238:	movt	r1, #0
    423c:	b	4280 <coda_cursor_read_uint64_array+0x110>
    4240:	bl	0 <__aeabi_read_tp>
    4244:	cmp	r3, #3
    4248:	bne	428c <coda_cursor_read_uint64_array+0x11c>
    424c:	ldr	r3, [pc, #980]	; 4628 <coda_cursor_read_uint64_array+0x4b8>
    4250:	ldr	r3, [pc, r3]
    4254:	ldr	r0, [r0, r3]
    4258:	cmp	r0, #0
    425c:	beq	428c <coda_cursor_read_uint64_array+0x11c>
    4260:	ldr	r3, [r1, #48]	; 0x30
    4264:	mov	r0, #9
    4268:	cmp	r3, #0
    426c:	beq	428c <coda_cursor_read_uint64_array+0x11c>
    4270:	bl	0 <coda_type_get_native_type_name>
    4274:	movw	r1, #0
    4278:	mov	r2, r0
    427c:	movt	r1, #0
    4280:	mvn	r0, #104	; 0x68
    4284:	bl	0 <coda_set_error>
    4288:	b	4204 <coda_cursor_read_uint64_array+0x94>
    428c:	ldr	r0, [r1, #12]
    4290:	sub	r1, r0, #1
    4294:	cmp	r1, #6
    4298:	bhi	4270 <coda_cursor_read_uint64_array+0x100>
    429c:	add	r3, pc, #0
    42a0:	ldr	pc, [r3, r1, lsl #2]
    42a4:	.word	0x000042c0
    42a8:	.word	0x00004270
    42ac:	.word	0x00004354
    42b0:	.word	0x00004270
    42b4:	.word	0x000043ac
    42b8:	.word	0x00004270
    42bc:	.word	0x00004404
    42c0:	mov	r0, r5
    42c4:	mov	r1, r4
    42c8:	bl	22bc <read_uint8_array>
    42cc:	mvn	r6, #0
    42d0:	cmp	r0, #0
    42d4:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    42d8:	add	r1, sp, #12
    42dc:	mov	r0, r5
    42e0:	bl	0 <coda_cursor_get_num_elements>
    42e4:	cmp	r0, #0
    42e8:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    42ec:	ldr	r0, [sp, #12]
    42f0:	cmp	r0, #1
    42f4:	blt	4620 <coda_cursor_read_uint64_array+0x4b0>
    42f8:	mvn	r2, r0
    42fc:	mvn	r1, #1
    4300:	mvn	r6, #1
    4304:	cmn	r2, #2
    4308:	movgt	r1, r2
    430c:	add	lr, r0, r1
    4310:	cmn	lr, #3
    4314:	bls	44ac <coda_cursor_read_uint64_array+0x33c>
    4318:	mvn	r1, #7
    431c:	sub	r2, r0, #1
    4320:	add	r1, r1, r0, lsl #3
    4324:	mov	r0, #0
    4328:	ldrb	r3, [r4, r2]
    432c:	str	r3, [r4, r1]
    4330:	add	r3, r4, r1
    4334:	sub	r1, r1, #8
    4338:	str	r0, [r3, #4]
    433c:	sub	r3, r2, #1
    4340:	add	r2, r2, #1
    4344:	cmp	r2, #1
    4348:	mov	r2, r3
    434c:	bgt	4328 <coda_cursor_read_uint64_array+0x1b8>
    4350:	b	4620 <coda_cursor_read_uint64_array+0x4b0>
    4354:	mov	r0, r5
    4358:	mov	r1, r4
    435c:	bl	2b7c <read_uint16_array>
    4360:	mvn	r6, #0
    4364:	cmp	r0, #0
    4368:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    436c:	add	r1, sp, #12
    4370:	mov	r0, r5
    4374:	bl	0 <coda_cursor_get_num_elements>
    4378:	cmp	r0, #0
    437c:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    4380:	ldr	r1, [sp, #12]
    4384:	cmp	r1, #1
    4388:	blt	4620 <coda_cursor_read_uint64_array+0x4b0>
    438c:	mvn	r0, r1
    4390:	cmn	r0, #2
    4394:	mvnle	r0, #1
    4398:	add	r0, r1, r0
    439c:	cmn	r0, #3
    43a0:	bls	4588 <coda_cursor_read_uint64_array+0x418>
    43a4:	mov	r0, r1
    43a8:	b	45ec <coda_cursor_read_uint64_array+0x47c>
    43ac:	mov	r0, r5
    43b0:	mov	r1, r4
    43b4:	bl	36f4 <read_uint32_array>
    43b8:	mvn	r6, #0
    43bc:	cmp	r0, #0
    43c0:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    43c4:	add	r1, sp, #12
    43c8:	mov	r0, r5
    43cc:	bl	0 <coda_cursor_get_num_elements>
    43d0:	cmp	r0, #0
    43d4:	bne	4208 <coda_cursor_read_uint64_array+0x98>
    43d8:	ldr	r1, [sp, #12]
    43dc:	cmp	r1, #1
    43e0:	blt	4620 <coda_cursor_read_uint64_array+0x4b0>
    43e4:	mvn	r0, r1
    43e8:	cmn	r0, #2
    43ec:	mvnle	r0, #1
    43f0:	add	r0, r1, r0
    43f4:	cmn	r0, #3
    43f8:	bls	4420 <coda_cursor_read_uint64_array+0x2b0>
    43fc:	mov	r0, r1
    4400:	b	4470 <coda_cursor_read_uint64_array+0x300>
    4404:	mov	r0, r5
    4408:	mov	r1, r4
    440c:	bl	4630 <read_uint64_array>
    4410:	mvn	r6, #0
    4414:	cmp	r0, #0
    4418:	moveq	r6, #0
    441c:	b	4208 <coda_cursor_read_uint64_array+0x98>
    4420:	add	ip, r0, #2
    4424:	add	r2, r4, r1, lsl #2
    4428:	mvn	r5, #7
    442c:	bic	lr, ip, #1
    4430:	sub	r3, r2, #8
    4434:	sub	r0, r1, lr
    4438:	add	r1, r4, r1, lsl #3
    443c:	mov	r2, lr
    4440:	sub	r6, r1, #16
    4444:	mvn	r1, #15
    4448:	vld1.32	{d16}, [r3], r5
    444c:	subs	r2, r2, #2
    4450:	vrev64.32	d16, d16
    4454:	vmovl.u32	q8, d16
    4458:	vorr	d18, d17, d17
    445c:	vorr	d19, d16, d16
    4460:	vst1.64	{d18-d19}, [r6], r1
    4464:	bne	4448 <coda_cursor_read_uint64_array+0x2d8>
    4468:	cmp	ip, lr
    446c:	beq	4620 <coda_cursor_read_uint64_array+0x4b0>
    4470:	mvn	r1, #7
    4474:	sub	r2, r0, #1
    4478:	add	r1, r1, r0, lsl #3
    447c:	mov	r0, #0
    4480:	ldr	r3, [r4, r2, lsl #2]
    4484:	str	r3, [r4, r1]
    4488:	add	r3, r4, r1
    448c:	sub	r1, r1, #8
    4490:	str	r0, [r3, #4]
    4494:	sub	r3, r2, #1
    4498:	add	r2, r2, #1
    449c:	cmp	r2, #1
    44a0:	mov	r2, r3
    44a4:	bgt	4480 <coda_cursor_read_uint64_array+0x310>
    44a8:	b	4620 <coda_cursor_read_uint64_array+0x4b0>
    44ac:	cmn	r2, #2
    44b0:	mov	r5, #8
    44b4:	sub	r3, r0, #1
    44b8:	movgt	r6, r2
    44bc:	add	ip, r4, r3, lsl #3
    44c0:	add	r6, r0, r6
    44c4:	add	r6, r6, #1
    44c8:	umull	r1, r5, r6, r5
    44cc:	cmp	r5, #0
    44d0:	movwne	r5, #1
    44d4:	cmp	r1, ip
    44d8:	bhi	4318 <coda_cursor_read_uint64_array+0x1a8>
    44dc:	cmp	r5, #0
    44e0:	bne	4318 <coda_cursor_read_uint64_array+0x1a8>
    44e4:	add	r1, r4, r3
    44e8:	cmp	r6, r1
    44ec:	bhi	4318 <coda_cursor_read_uint64_array+0x1a8>
    44f0:	mvn	r1, #1
    44f4:	cmn	r2, #2
    44f8:	movle	r2, r1
    44fc:	sub	r2, r1, r2
    4500:	add	r1, r4, r0
    4504:	add	r3, r4, r2, lsl #3
    4508:	cmp	r1, r3
    450c:	bls	4520 <coda_cursor_read_uint64_array+0x3b0>
    4510:	add	r1, r4, r0, lsl #3
    4514:	add	r2, r4, r2
    4518:	cmp	r2, r1
    451c:	bcc	4318 <coda_cursor_read_uint64_array+0x1a8>
    4520:	add	ip, lr, #2
    4524:	sub	r1, r0, #2
    4528:	add	r5, sp, #4
    452c:	vmov.i64	q8, #0x00000000000000ff
    4530:	bic	lr, ip, #1
    4534:	add	r2, r4, r1
    4538:	add	r6, r4, r1, lsl #3
    453c:	mvn	r1, #15
    4540:	sub	r0, r0, lr
    4544:	mov	r3, lr
    4548:	ldrh	r7, [r2], #-2
    454c:	subs	r3, r3, #2
    4550:	strh	r7, [sp, #4]
    4554:	vld1.16	{d18[0]}, [r5 :16]
    4558:	vmovl.u8	q9, d18
    455c:	vmovl.u16	q9, d18
    4560:	vrev64.32	d18, d18
    4564:	vmovl.u32	q9, d18
    4568:	vand	q9, q9, q8
    456c:	vorr	d20, d19, d19
    4570:	vorr	d21, d18, d18
    4574:	vst1.64	{d20-d21}, [r6], r1
    4578:	bne	4548 <coda_cursor_read_uint64_array+0x3d8>
    457c:	cmp	ip, lr
    4580:	bne	4318 <coda_cursor_read_uint64_array+0x1a8>
    4584:	b	4620 <coda_cursor_read_uint64_array+0x4b0>
    4588:	add	ip, r0, #2
    458c:	add	r2, r4, r1, lsl #1
    4590:	add	r5, sp, #8
    4594:	vmov.i64	q8, #0x000000000000ffff
    4598:	bic	lr, ip, #1
    459c:	sub	r3, r2, #4
    45a0:	sub	r0, r1, lr
    45a4:	add	r1, r4, r1, lsl #3
    45a8:	mov	r2, lr
    45ac:	sub	r6, r1, #16
    45b0:	mvn	r1, #15
    45b4:	ldr	r7, [r3], #-4
    45b8:	subs	r2, r2, #2
    45bc:	str	r7, [sp, #8]
    45c0:	vld1.32	{d18[0]}, [r5 :32]
    45c4:	vmovl.u16	q9, d18
    45c8:	vrev64.32	d18, d18
    45cc:	vmovl.u32	q9, d18
    45d0:	vand	q9, q9, q8
    45d4:	vorr	d20, d19, d19
    45d8:	vorr	d21, d18, d18
    45dc:	vst1.64	{d20-d21}, [r6], r1
    45e0:	bne	45b4 <coda_cursor_read_uint64_array+0x444>
    45e4:	cmp	ip, lr
    45e8:	beq	4620 <coda_cursor_read_uint64_array+0x4b0>
    45ec:	add	r1, r4, r0, lsl #3
    45f0:	add	r2, r4, r0, lsl #1
    45f4:	add	r0, r0, #1
    45f8:	mov	r3, #0
    45fc:	sub	r1, r1, #8
    4600:	sub	r2, r2, #2
    4604:	ldrh	r4, [r2], #-2
    4608:	sub	r0, r0, #1
    460c:	cmp	r0, #1
    4610:	str	r4, [r1]
    4614:	str	r3, [r1, #4]
    4618:	sub	r1, r1, #8
    461c:	bgt	4604 <coda_cursor_read_uint64_array+0x494>
    4620:	mov	r6, #0
    4624:	b	4208 <coda_cursor_read_uint64_array+0x98>
    4628:	.word	0x000003d0
    462c:	.word	0x00000448

00004630 <read_uint64_array>:
    4630:	push	{fp, lr}
    4634:	mov	fp, sp
    4638:	ldr	r3, [r0, #4]
    463c:	add	r3, r0, r3, lsl #4
    4640:	ldr	r3, [r3, #-8]
    4644:	ldr	r3, [r3]
    4648:	sub	ip, r3, #100	; 0x64
    464c:	cmp	ip, #5
    4650:	bhi	467c <read_uint64_array+0x4c>
    4654:	add	r3, pc, #0
    4658:	ldr	pc, [r3, ip, lsl #2]
    465c:	.word	0x00004674
    4660:	.word	0x00004694
    4664:	.word	0x0000469c
    4668:	.word	0x000046d0
    466c:	.word	0x000046d0
    4670:	.word	0x000046d0
    4674:	pop	{fp, lr}
    4678:	b	0 <coda_mem_cursor_read_uint64_array>
    467c:	cmp	r3, #1
    4680:	beq	46b0 <read_uint64_array+0x80>
    4684:	cmp	r3, #0
    4688:	bne	46b8 <read_uint64_array+0x88>
    468c:	pop	{fp, lr}
    4690:	b	0 <coda_ascii_cursor_read_uint64_array>
    4694:	mvn	r0, #10
    4698:	b	46a0 <read_uint64_array+0x70>
    469c:	mvn	r0, #12
    46a0:	mov	r1, #0
    46a4:	bl	0 <coda_set_error>
    46a8:	mvn	r0, #0
    46ac:	pop	{fp, pc}
    46b0:	pop	{fp, lr}
    46b4:	b	0 <coda_bin_cursor_read_uint64_array>
    46b8:	cmp	r2, #0
    46bc:	moveq	r0, #0
    46c0:	popeq	{fp, pc}
    46c4:	mov	r2, #8
    46c8:	pop	{fp, lr}
    46cc:	b	aae0 <transpose_array>
    46d0:	movw	r0, #0
    46d4:	movw	r1, #0
    46d8:	movw	r3, #0
    46dc:	movw	r2, #1176	; 0x498
    46e0:	movt	r0, #0
    46e4:	movt	r1, #0
    46e8:	movt	r3, #0
    46ec:	bl	0 <__assert_fail>

000046f0 <coda_cursor_read_float_array>:
    46f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    46f4:	add	fp, sp, #24
    46f8:	sub	sp, sp, #16
    46fc:	cmp	r0, #0
    4700:	beq	4770 <coda_cursor_read_float_array+0x80>
    4704:	mov	r6, r0
    4708:	ldr	r0, [r0, #4]
    470c:	cmp	r0, #1
    4710:	blt	4770 <coda_cursor_read_float_array+0x80>
    4714:	add	r0, r6, r0, lsl #4
    4718:	mov	r4, r1
    471c:	ldr	r1, [r0, #-8]
    4720:	cmp	r1, #0
    4724:	beq	4770 <coda_cursor_read_float_array+0x80>
    4728:	cmp	r4, #0
    472c:	beq	479c <coda_cursor_read_float_array+0xac>
    4730:	ldr	r0, [r1]
    4734:	mov	r7, r2
    4738:	cmp	r0, #99	; 0x63
    473c:	ldrhi	r1, [r1, #4]
    4740:	ldr	r0, [r1, #8]
    4744:	cmp	r0, #1
    4748:	bne	47b4 <coda_cursor_read_float_array+0xc4>
    474c:	ldr	r2, [r1, #40]	; 0x28
    4750:	ldr	r8, [r2, #8]
    4754:	ldr	r1, [r2, #12]
    4758:	cmp	r8, #2
    475c:	bne	47d0 <coda_cursor_read_float_array+0xe0>
    4760:	ldr	r0, [pc, #2544]	; 5158 <coda_cursor_read_float_array+0xa68>
    4764:	ldr	r3, [pc, r0]
    4768:	bl	0 <__aeabi_read_tp>
    476c:	b	47e4 <coda_cursor_read_float_array+0xf4>
    4770:	movw	r1, #0
    4774:	movw	r2, #0
    4778:	mvn	r0, #99	; 0x63
    477c:	movw	r3, #3673	; 0xe59
    4780:	movt	r1, #0
    4784:	movt	r2, #0
    4788:	bl	0 <coda_set_error>
    478c:	mvn	r5, #0
    4790:	mov	r0, r5
    4794:	sub	sp, fp, #24
    4798:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    479c:	movw	r1, #0
    47a0:	movw	r2, #0
    47a4:	mvn	r0, #99	; 0x63
    47a8:	movw	r3, #3678	; 0xe5e
    47ac:	movt	r1, #0
    47b0:	b	4784 <coda_cursor_read_float_array+0x94>
    47b4:	bl	0 <coda_type_get_class_name>
    47b8:	movw	r1, #0
    47bc:	mov	r2, r0
    47c0:	movt	r1, #0
    47c4:	mvn	r0, #104	; 0x68
    47c8:	bl	0 <coda_set_error>
    47cc:	b	478c <coda_cursor_read_float_array+0x9c>
    47d0:	bl	0 <__aeabi_read_tp>
    47d4:	cmp	r8, #3
    47d8:	bne	47f8 <coda_cursor_read_float_array+0x108>
    47dc:	ldr	r3, [pc, #2416]	; 5154 <coda_cursor_read_float_array+0xa64>
    47e0:	ldr	r3, [pc, r3]
    47e4:	ldr	r0, [r0, r3]
    47e8:	cmp	r0, #0
    47ec:	ldrne	r0, [r2, #48]	; 0x30
    47f0:	cmpne	r0, #0
    47f4:	bne	48d0 <coda_cursor_read_float_array+0x1e0>
    47f8:	cmp	r1, #9
    47fc:	bhi	4948 <coda_cursor_read_float_array+0x258>
    4800:	add	r0, pc, #0
    4804:	ldr	pc, [r0, r1, lsl #2]
    4808:	.word	0x00004830
    480c:	.word	0x00004960
    4810:	.word	0x000049fc
    4814:	.word	0x00004a5c
    4818:	.word	0x00004abc
    481c:	.word	0x00004b1c
    4820:	.word	0x00004b7c
    4824:	.word	0x00004c08
    4828:	.word	0x00004c94
    482c:	.word	0x00004cb4
    4830:	mov	r0, r6
    4834:	mov	r1, r4
    4838:	mov	r2, r7
    483c:	bl	205c <read_int8_array>
    4840:	mvn	r5, #0
    4844:	cmp	r0, #0
    4848:	bne	4790 <coda_cursor_read_float_array+0xa0>
    484c:	add	r1, sp, #12
    4850:	mov	r0, r6
    4854:	bl	0 <coda_cursor_get_num_elements>
    4858:	cmp	r0, #0
    485c:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4860:	ldr	r0, [sp, #12]
    4864:	cmp	r0, #1
    4868:	blt	514c <coda_cursor_read_float_array+0xa5c>
    486c:	mvn	r2, r0
    4870:	mvn	r1, #1
    4874:	mvn	r7, #1
    4878:	cmn	r2, #2
    487c:	movgt	r1, r2
    4880:	add	r1, r0, r1
    4884:	add	lr, r1, #2
    4888:	cmp	lr, #4
    488c:	bcs	4f14 <coda_cursor_read_float_array+0x824>
    4890:	mvn	r1, #3
    4894:	add	r1, r1, r0, lsl #2
    4898:	sub	r0, r0, #1
    489c:	add	r3, r4, r0
    48a0:	add	r2, r4, r1
    48a4:	sub	r1, r1, #4
    48a8:	ldrsb	r3, [r3]
    48ac:	vmov	s0, r3
    48b0:	vcvt.f32.s32	s0, s0
    48b4:	vstr	s0, [r2]
    48b8:	sub	r2, r0, #1
    48bc:	add	r0, r0, #1
    48c0:	cmp	r0, #1
    48c4:	mov	r0, r2
    48c8:	bgt	489c <coda_cursor_read_float_array+0x1ac>
    48cc:	b	514c <coda_cursor_read_float_array+0xa5c>
    48d0:	add	r1, sp, #12
    48d4:	mov	r0, r6
    48d8:	bl	0 <coda_cursor_get_num_elements>
    48dc:	mvn	r5, #0
    48e0:	cmp	r0, #0
    48e4:	bne	4790 <coda_cursor_read_float_array+0xa0>
    48e8:	ldr	r0, [sp, #12]
    48ec:	lsl	r9, r0, #3
    48f0:	mov	r0, r9
    48f4:	bl	0 <malloc>
    48f8:	cmp	r0, #0
    48fc:	beq	4d0c <coda_cursor_read_float_array+0x61c>
    4900:	mov	r8, r0
    4904:	mov	r0, r6
    4908:	mov	r2, r7
    490c:	mov	r1, r8
    4910:	bl	515c <coda_cursor_read_double_array>
    4914:	cmp	r0, #0
    4918:	bne	4d00 <coda_cursor_read_float_array+0x610>
    491c:	ldr	r2, [sp, #12]
    4920:	cmp	r2, #1
    4924:	blt	5144 <coda_cursor_read_float_array+0xa54>
    4928:	mvn	r0, r2
    492c:	cmn	r0, #2
    4930:	mvnle	r0, #1
    4934:	add	r0, r2, r0
    4938:	cmn	r0, #3
    493c:	bls	4d50 <coda_cursor_read_float_array+0x660>
    4940:	mov	r0, r2
    4944:	b	4da0 <coda_cursor_read_float_array+0x6b0>
    4948:	mov	r0, r1
    494c:	bl	0 <coda_type_get_native_type_name>
    4950:	movw	r1, #0
    4954:	mov	r2, r0
    4958:	movt	r1, #0
    495c:	b	47c4 <coda_cursor_read_float_array+0xd4>
    4960:	mov	r0, r6
    4964:	mov	r1, r4
    4968:	mov	r2, r7
    496c:	bl	22bc <read_uint8_array>
    4970:	mvn	r5, #0
    4974:	cmp	r0, #0
    4978:	bne	4790 <coda_cursor_read_float_array+0xa0>
    497c:	add	r1, sp, #12
    4980:	mov	r0, r6
    4984:	bl	0 <coda_cursor_get_num_elements>
    4988:	cmp	r0, #0
    498c:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4990:	ldr	r0, [sp, #12]
    4994:	cmp	r0, #1
    4998:	blt	514c <coda_cursor_read_float_array+0xa5c>
    499c:	mvn	r2, r0
    49a0:	mvn	r1, #1
    49a4:	mvn	r7, #1
    49a8:	cmn	r2, #2
    49ac:	movgt	r1, r2
    49b0:	add	r1, r0, r1
    49b4:	add	lr, r1, #2
    49b8:	cmp	lr, #4
    49bc:	bcs	4ff0 <coda_cursor_read_float_array+0x900>
    49c0:	mvn	r1, #3
    49c4:	add	r1, r1, r0, lsl #2
    49c8:	sub	r0, r0, #1
    49cc:	ldrb	r3, [r4, r0]
    49d0:	add	r2, r4, r1
    49d4:	sub	r1, r1, #4
    49d8:	vmov	s0, r3
    49dc:	vcvt.f32.u32	s0, s0
    49e0:	vstr	s0, [r2]
    49e4:	sub	r2, r0, #1
    49e8:	add	r0, r0, #1
    49ec:	cmp	r0, #1
    49f0:	mov	r0, r2
    49f4:	bgt	49cc <coda_cursor_read_float_array+0x2dc>
    49f8:	b	514c <coda_cursor_read_float_array+0xa5c>
    49fc:	mov	r0, r6
    4a00:	mov	r1, r4
    4a04:	mov	r2, r7
    4a08:	bl	27b8 <read_int16_array>
    4a0c:	mvn	r5, #0
    4a10:	cmp	r0, #0
    4a14:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4a18:	add	r1, sp, #12
    4a1c:	mov	r0, r6
    4a20:	bl	0 <coda_cursor_get_num_elements>
    4a24:	cmp	r0, #0
    4a28:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4a2c:	ldr	r2, [sp, #12]
    4a30:	cmp	r2, #1
    4a34:	blt	514c <coda_cursor_read_float_array+0xa5c>
    4a38:	mvn	r0, r2
    4a3c:	cmn	r0, #2
    4a40:	mvnle	r0, #1
    4a44:	add	r0, r2, r0
    4a48:	add	r1, r0, #2
    4a4c:	cmp	r1, #4
    4a50:	bcs	4e04 <coda_cursor_read_float_array+0x714>
    4a54:	mov	r0, r2
    4a58:	b	4e54 <coda_cursor_read_float_array+0x764>
    4a5c:	mov	r0, r6
    4a60:	mov	r1, r4
    4a64:	mov	r2, r7
    4a68:	bl	2b7c <read_uint16_array>
    4a6c:	mvn	r5, #0
    4a70:	cmp	r0, #0
    4a74:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4a78:	add	r1, sp, #12
    4a7c:	mov	r0, r6
    4a80:	bl	0 <coda_cursor_get_num_elements>
    4a84:	cmp	r0, #0
    4a88:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4a8c:	ldr	r2, [sp, #12]
    4a90:	cmp	r2, #1
    4a94:	blt	514c <coda_cursor_read_float_array+0xa5c>
    4a98:	mvn	r0, r2
    4a9c:	cmn	r0, #2
    4aa0:	mvnle	r0, #1
    4aa4:	add	r0, r2, r0
    4aa8:	add	r1, r0, #2
    4aac:	cmp	r1, #4
    4ab0:	bcs	4e8c <coda_cursor_read_float_array+0x79c>
    4ab4:	mov	r0, r2
    4ab8:	b	4edc <coda_cursor_read_float_array+0x7ec>
    4abc:	mov	r0, r6
    4ac0:	mov	r1, r4
    4ac4:	mov	r2, r7
    4ac8:	bl	324c <read_int32_array>
    4acc:	mvn	r5, #0
    4ad0:	cmp	r0, #0
    4ad4:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4ad8:	add	r1, sp, #12
    4adc:	mov	r0, r6
    4ae0:	bl	0 <coda_cursor_get_num_elements>
    4ae4:	cmp	r0, #0
    4ae8:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4aec:	ldr	r0, [sp, #12]
    4af0:	cmp	r0, #1
    4af4:	blt	514c <coda_cursor_read_float_array+0xa5c>
    4af8:	sub	r1, r4, #4
    4afc:	mov	r2, r1
    4b00:	ldr	r3, [r2, r0, lsl #2]!
    4b04:	subs	r0, r0, #1
    4b08:	vmov	s0, r3
    4b0c:	vcvt.f32.s32	s0, s0
    4b10:	vstr	s0, [r2]
    4b14:	bgt	4afc <coda_cursor_read_float_array+0x40c>
    4b18:	b	514c <coda_cursor_read_float_array+0xa5c>
    4b1c:	mov	r0, r6
    4b20:	mov	r1, r4
    4b24:	mov	r2, r7
    4b28:	bl	36f4 <read_uint32_array>
    4b2c:	mvn	r5, #0
    4b30:	cmp	r0, #0
    4b34:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4b38:	add	r1, sp, #12
    4b3c:	mov	r0, r6
    4b40:	bl	0 <coda_cursor_get_num_elements>
    4b44:	cmp	r0, #0
    4b48:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4b4c:	ldr	r0, [sp, #12]
    4b50:	cmp	r0, #1
    4b54:	blt	514c <coda_cursor_read_float_array+0xa5c>
    4b58:	sub	r1, r4, #4
    4b5c:	mov	r2, r1
    4b60:	ldr	r3, [r2, r0, lsl #2]!
    4b64:	subs	r0, r0, #1
    4b68:	vmov	s0, r3
    4b6c:	vcvt.f32.u32	s0, s0
    4b70:	vstr	s0, [r2]
    4b74:	bgt	4b5c <coda_cursor_read_float_array+0x46c>
    4b78:	b	514c <coda_cursor_read_float_array+0xa5c>
    4b7c:	add	r1, sp, #12
    4b80:	mov	r0, r6
    4b84:	bl	0 <coda_cursor_get_num_elements>
    4b88:	mvn	r5, #0
    4b8c:	cmp	r0, #0
    4b90:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4b94:	ldr	r0, [sp, #12]
    4b98:	lsl	r9, r0, #3
    4b9c:	mov	r0, r9
    4ba0:	bl	0 <malloc>
    4ba4:	cmp	r0, #0
    4ba8:	beq	4d14 <coda_cursor_read_float_array+0x624>
    4bac:	mov	r8, r0
    4bb0:	mov	r0, r6
    4bb4:	mov	r2, r7
    4bb8:	mov	r1, r8
    4bbc:	bl	4058 <read_int64_array>
    4bc0:	cmp	r0, #0
    4bc4:	bne	4d00 <coda_cursor_read_float_array+0x610>
    4bc8:	ldr	r0, [sp, #12]
    4bcc:	cmp	r0, #1
    4bd0:	blt	5144 <coda_cursor_read_float_array+0xa54>
    4bd4:	add	r1, r4, r0, lsl #2
    4bd8:	add	r6, r0, #1
    4bdc:	sub	r4, r1, #4
    4be0:	add	r1, r8, r0, lsl #3
    4be4:	sub	r5, r1, #8
    4be8:	ldrd	r0, [r5]
    4bec:	bl	0 <__aeabi_l2f>
    4bf0:	sub	r6, r6, #1
    4bf4:	str	r0, [r4], #-4
    4bf8:	sub	r5, r5, #8
    4bfc:	cmp	r6, #1
    4c00:	bgt	4be8 <coda_cursor_read_float_array+0x4f8>
    4c04:	b	5144 <coda_cursor_read_float_array+0xa54>
    4c08:	add	r1, sp, #12
    4c0c:	mov	r0, r6
    4c10:	bl	0 <coda_cursor_get_num_elements>
    4c14:	mvn	r5, #0
    4c18:	cmp	r0, #0
    4c1c:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4c20:	ldr	r0, [sp, #12]
    4c24:	lsl	r9, r0, #3
    4c28:	mov	r0, r9
    4c2c:	bl	0 <malloc>
    4c30:	cmp	r0, #0
    4c34:	beq	4d1c <coda_cursor_read_float_array+0x62c>
    4c38:	mov	r8, r0
    4c3c:	mov	r0, r6
    4c40:	mov	r2, r7
    4c44:	mov	r1, r8
    4c48:	bl	4630 <read_uint64_array>
    4c4c:	cmp	r0, #0
    4c50:	bne	4d00 <coda_cursor_read_float_array+0x610>
    4c54:	ldr	r0, [sp, #12]
    4c58:	cmp	r0, #1
    4c5c:	blt	5144 <coda_cursor_read_float_array+0xa54>
    4c60:	add	r1, r4, r0, lsl #2
    4c64:	add	r6, r0, #1
    4c68:	sub	r4, r1, #4
    4c6c:	add	r1, r8, r0, lsl #3
    4c70:	sub	r5, r1, #8
    4c74:	ldrd	r0, [r5]
    4c78:	bl	0 <__aeabi_ul2f>
    4c7c:	sub	r6, r6, #1
    4c80:	str	r0, [r4], #-4
    4c84:	sub	r5, r5, #8
    4c88:	cmp	r6, #1
    4c8c:	bgt	4c74 <coda_cursor_read_float_array+0x584>
    4c90:	b	5144 <coda_cursor_read_float_array+0xa54>
    4c94:	mov	r0, r6
    4c98:	mov	r1, r4
    4c9c:	mov	r2, r7
    4ca0:	bl	5bb8 <read_float_array>
    4ca4:	mvn	r5, #0
    4ca8:	cmp	r0, #0
    4cac:	moveq	r5, #0
    4cb0:	b	4790 <coda_cursor_read_float_array+0xa0>
    4cb4:	add	r1, sp, #12
    4cb8:	mov	r0, r6
    4cbc:	bl	0 <coda_cursor_get_num_elements>
    4cc0:	mvn	r5, #0
    4cc4:	cmp	r0, #0
    4cc8:	bne	4790 <coda_cursor_read_float_array+0xa0>
    4ccc:	ldr	r0, [sp, #12]
    4cd0:	lsl	r9, r0, #3
    4cd4:	mov	r0, r9
    4cd8:	bl	0 <malloc>
    4cdc:	cmp	r0, #0
    4ce0:	beq	4d24 <coda_cursor_read_float_array+0x634>
    4ce4:	mov	r8, r0
    4ce8:	mov	r0, r6
    4cec:	mov	r2, r7
    4cf0:	mov	r1, r8
    4cf4:	bl	5cd0 <read_double_array>
    4cf8:	cmp	r0, #0
    4cfc:	beq	4dd8 <coda_cursor_read_float_array+0x6e8>
    4d00:	mov	r0, r8
    4d04:	bl	0 <free>
    4d08:	b	4790 <coda_cursor_read_float_array+0xa0>
    4d0c:	movw	r0, #3707	; 0xe7b
    4d10:	b	4d28 <coda_cursor_read_float_array+0x638>
    4d14:	movw	r0, #3820	; 0xeec
    4d18:	b	4d28 <coda_cursor_read_float_array+0x638>
    4d1c:	movw	r0, #3847	; 0xf07
    4d20:	b	4d28 <coda_cursor_read_float_array+0x638>
    4d24:	movw	r0, #3880	; 0xf28
    4d28:	movw	r1, #0
    4d2c:	movw	r3, #0
    4d30:	str	r0, [sp]
    4d34:	mvn	r0, #0
    4d38:	mov	r2, r9
    4d3c:	mvn	r5, #0
    4d40:	movt	r1, #0
    4d44:	movt	r3, #0
    4d48:	bl	0 <coda_set_error>
    4d4c:	b	4790 <coda_cursor_read_float_array+0xa0>
    4d50:	add	ip, r0, #2
    4d54:	add	r3, r8, r2, lsl #3
    4d58:	mvn	r6, #15
    4d5c:	mvn	r5, #7
    4d60:	bic	r1, ip, #1
    4d64:	sub	r3, r3, #16
    4d68:	sub	r0, r2, r1
    4d6c:	add	r2, r4, r2, lsl #2
    4d70:	sub	r7, r2, #8
    4d74:	mov	r2, r1
    4d78:	vld1.64	{d1-d2}, [r3], r6
    4d7c:	subs	r2, r2, #2
    4d80:	vorr	d3, d1, d1
    4d84:	vcvt.f32.f64	s1, d1
    4d88:	vcvt.f32.f64	s0, d2
    4d8c:	vrev64.32	d16, d0
    4d90:	vst1.32	{d16}, [r7], r5
    4d94:	bne	4d78 <coda_cursor_read_float_array+0x688>
    4d98:	cmp	ip, r1
    4d9c:	beq	5144 <coda_cursor_read_float_array+0xa54>
    4da0:	add	r1, r4, r0, lsl #2
    4da4:	add	r2, r8, r0, lsl #3
    4da8:	add	r0, r0, #1
    4dac:	sub	r1, r1, #4
    4db0:	sub	r2, r2, #8
    4db4:	vldr	d16, [r2]
    4db8:	sub	r0, r0, #1
    4dbc:	sub	r2, r2, #8
    4dc0:	cmp	r0, #1
    4dc4:	vcvt.f32.f64	s0, d16
    4dc8:	vstr	s0, [r1]
    4dcc:	sub	r1, r1, #4
    4dd0:	bgt	4db4 <coda_cursor_read_float_array+0x6c4>
    4dd4:	b	5144 <coda_cursor_read_float_array+0xa54>
    4dd8:	ldr	r2, [sp, #12]
    4ddc:	cmp	r2, #1
    4de0:	blt	5144 <coda_cursor_read_float_array+0xa54>
    4de4:	mvn	r0, r2
    4de8:	cmn	r0, #2
    4dec:	mvnle	r0, #1
    4df0:	add	r0, r2, r0
    4df4:	cmn	r0, #3
    4df8:	bls	50c0 <coda_cursor_read_float_array+0x9d0>
    4dfc:	mov	r0, r2
    4e00:	b	5110 <coda_cursor_read_float_array+0xa20>
    4e04:	bic	ip, r1, #3
    4e08:	add	r3, r4, r2, lsl #1
    4e0c:	mvn	r6, #7
    4e10:	mvn	r5, #15
    4e14:	sub	r0, r2, ip
    4e18:	add	r2, r4, r2, lsl #2
    4e1c:	sub	r3, r3, #8
    4e20:	sub	r7, r2, #16
    4e24:	mov	r2, ip
    4e28:	vld1.16	{d16}, [r3], r6
    4e2c:	subs	r2, r2, #4
    4e30:	vrev64.16	d16, d16
    4e34:	vmovl.s16	q8, d16
    4e38:	vcvt.f32.s32	q8, q8
    4e3c:	vrev64.32	q8, q8
    4e40:	vext.8	q8, q8, q8, #8
    4e44:	vst1.32	{d16-d17}, [r7], r5
    4e48:	bne	4e28 <coda_cursor_read_float_array+0x738>
    4e4c:	cmp	r1, ip
    4e50:	beq	514c <coda_cursor_read_float_array+0xa5c>
    4e54:	add	r1, r4, r0, lsl #2
    4e58:	add	r2, r4, r0, lsl #1
    4e5c:	add	r0, r0, #1
    4e60:	sub	r1, r1, #4
    4e64:	sub	r2, r2, #2
    4e68:	ldrsh	r3, [r2], #-2
    4e6c:	sub	r0, r0, #1
    4e70:	cmp	r0, #1
    4e74:	vmov	s0, r3
    4e78:	vcvt.f32.s32	s0, s0
    4e7c:	vstr	s0, [r1]
    4e80:	sub	r1, r1, #4
    4e84:	bgt	4e68 <coda_cursor_read_float_array+0x778>
    4e88:	b	514c <coda_cursor_read_float_array+0xa5c>
    4e8c:	bic	ip, r1, #3
    4e90:	add	r3, r4, r2, lsl #1
    4e94:	mvn	r6, #7
    4e98:	mvn	r5, #15
    4e9c:	sub	r0, r2, ip
    4ea0:	add	r2, r4, r2, lsl #2
    4ea4:	sub	r3, r3, #8
    4ea8:	sub	r7, r2, #16
    4eac:	mov	r2, ip
    4eb0:	vld1.16	{d16}, [r3], r6
    4eb4:	subs	r2, r2, #4
    4eb8:	vrev64.16	d16, d16
    4ebc:	vmovl.u16	q8, d16
    4ec0:	vcvt.f32.u32	q8, q8
    4ec4:	vrev64.32	q8, q8
    4ec8:	vext.8	q8, q8, q8, #8
    4ecc:	vst1.32	{d16-d17}, [r7], r5
    4ed0:	bne	4eb0 <coda_cursor_read_float_array+0x7c0>
    4ed4:	cmp	r1, ip
    4ed8:	beq	514c <coda_cursor_read_float_array+0xa5c>
    4edc:	add	r1, r4, r0, lsl #2
    4ee0:	add	r2, r4, r0, lsl #1
    4ee4:	add	r0, r0, #1
    4ee8:	sub	r1, r1, #4
    4eec:	sub	r2, r2, #2
    4ef0:	ldrh	r3, [r2], #-2
    4ef4:	sub	r0, r0, #1
    4ef8:	cmp	r0, #1
    4efc:	vmov	s0, r3
    4f00:	vcvt.f32.u32	s0, s0
    4f04:	vstr	s0, [r1]
    4f08:	sub	r1, r1, #4
    4f0c:	bgt	4ef0 <coda_cursor_read_float_array+0x800>
    4f10:	b	514c <coda_cursor_read_float_array+0xa5c>
    4f14:	cmn	r2, #2
    4f18:	mov	r6, #4
    4f1c:	sub	r3, r0, #1
    4f20:	movgt	r7, r2
    4f24:	add	r5, r4, r3, lsl #2
    4f28:	add	r7, r0, r7
    4f2c:	add	r7, r7, #1
    4f30:	umull	r1, r6, r7, r6
    4f34:	cmp	r6, #0
    4f38:	movwne	r6, #1
    4f3c:	cmp	r1, r5
    4f40:	bhi	4890 <coda_cursor_read_float_array+0x1a0>
    4f44:	cmp	r6, #0
    4f48:	bne	4890 <coda_cursor_read_float_array+0x1a0>
    4f4c:	add	r1, r4, r3
    4f50:	cmp	r7, r1
    4f54:	bhi	4890 <coda_cursor_read_float_array+0x1a0>
    4f58:	mvn	r1, #1
    4f5c:	cmn	r2, #2
    4f60:	add	r7, r4, r0, lsl #2
    4f64:	movle	r2, r1
    4f68:	sub	r3, r1, r2
    4f6c:	add	r2, r4, r0
    4f70:	add	r1, r4, r3, lsl #2
    4f74:	cmp	r2, r1
    4f78:	bls	4f88 <coda_cursor_read_float_array+0x898>
    4f7c:	add	r1, r4, r3
    4f80:	cmp	r1, r7
    4f84:	bcc	4890 <coda_cursor_read_float_array+0x1a0>
    4f88:	vmov.i16	d16, #8	; 0x0008
    4f8c:	bic	ip, lr, #3
    4f90:	sub	r3, r2, #4
    4f94:	sub	r7, r7, #16
    4f98:	add	r6, sp, #4
    4f9c:	mvn	r5, #15
    4fa0:	sub	r0, r0, ip
    4fa4:	vneg.s16	d16, d16
    4fa8:	mov	r2, ip
    4fac:	ldr	r1, [r3], #-4
    4fb0:	subs	r2, r2, #4
    4fb4:	str	r1, [sp, #4]
    4fb8:	vld1.32	{d17[0]}, [r6 :32]
    4fbc:	vmovl.u8	q9, d17
    4fc0:	vrev64.16	d17, d18
    4fc4:	vshl.s16	d17, d17, #8
    4fc8:	vshl.s16	d17, d17, d16
    4fcc:	vmovl.s16	q9, d17
    4fd0:	vcvt.f32.s32	q9, q9
    4fd4:	vrev64.32	q9, q9
    4fd8:	vext.8	q9, q9, q9, #8
    4fdc:	vst1.32	{d18-d19}, [r7], r5
    4fe0:	bne	4fac <coda_cursor_read_float_array+0x8bc>
    4fe4:	cmp	lr, ip
    4fe8:	bne	4890 <coda_cursor_read_float_array+0x1a0>
    4fec:	b	514c <coda_cursor_read_float_array+0xa5c>
    4ff0:	cmn	r2, #2
    4ff4:	mov	r6, #4
    4ff8:	sub	r3, r0, #1
    4ffc:	movgt	r7, r2
    5000:	add	r5, r4, r3, lsl #2
    5004:	add	r7, r0, r7
    5008:	add	r7, r7, #1
    500c:	umull	r1, r6, r7, r6
    5010:	cmp	r6, #0
    5014:	movwne	r6, #1
    5018:	cmp	r1, r5
    501c:	bhi	49c0 <coda_cursor_read_float_array+0x2d0>
    5020:	cmp	r6, #0
    5024:	bne	49c0 <coda_cursor_read_float_array+0x2d0>
    5028:	add	r1, r4, r3
    502c:	cmp	r7, r1
    5030:	bhi	49c0 <coda_cursor_read_float_array+0x2d0>
    5034:	mvn	r1, #1
    5038:	cmn	r2, #2
    503c:	add	r7, r4, r0, lsl #2
    5040:	movle	r2, r1
    5044:	sub	r3, r1, r2
    5048:	add	r2, r4, r0
    504c:	add	r1, r4, r3, lsl #2
    5050:	cmp	r2, r1
    5054:	bls	5064 <coda_cursor_read_float_array+0x974>
    5058:	add	r1, r4, r3
    505c:	cmp	r1, r7
    5060:	bcc	49c0 <coda_cursor_read_float_array+0x2d0>
    5064:	bic	ip, lr, #3
    5068:	sub	r3, r2, #4
    506c:	sub	r7, r7, #16
    5070:	add	r6, sp, #8
    5074:	mvn	r5, #15
    5078:	sub	r0, r0, ip
    507c:	mov	r2, ip
    5080:	ldr	r1, [r3], #-4
    5084:	subs	r2, r2, #4
    5088:	str	r1, [sp, #8]
    508c:	vld1.32	{d16[0]}, [r6 :32]
    5090:	vmovl.u8	q8, d16
    5094:	vrev64.16	d16, d16
    5098:	vbic.i16	d16, #65280	; 0xff00
    509c:	vmovl.u16	q8, d16
    50a0:	vcvt.f32.u32	q8, q8
    50a4:	vrev64.32	q8, q8
    50a8:	vext.8	q8, q8, q8, #8
    50ac:	vst1.32	{d16-d17}, [r7], r5
    50b0:	bne	5080 <coda_cursor_read_float_array+0x990>
    50b4:	cmp	lr, ip
    50b8:	bne	49c0 <coda_cursor_read_float_array+0x2d0>
    50bc:	b	514c <coda_cursor_read_float_array+0xa5c>
    50c0:	add	ip, r0, #2
    50c4:	add	r3, r8, r2, lsl #3
    50c8:	mvn	r6, #15
    50cc:	mvn	r5, #7
    50d0:	bic	r1, ip, #1
    50d4:	sub	r3, r3, #16
    50d8:	sub	r0, r2, r1
    50dc:	add	r2, r4, r2, lsl #2
    50e0:	sub	r7, r2, #8
    50e4:	mov	r2, r1
    50e8:	vld1.64	{d1-d2}, [r3], r6
    50ec:	subs	r2, r2, #2
    50f0:	vorr	d3, d1, d1
    50f4:	vcvt.f32.f64	s1, d1
    50f8:	vcvt.f32.f64	s0, d2
    50fc:	vrev64.32	d16, d0
    5100:	vst1.32	{d16}, [r7], r5
    5104:	bne	50e8 <coda_cursor_read_float_array+0x9f8>
    5108:	cmp	ip, r1
    510c:	beq	5144 <coda_cursor_read_float_array+0xa54>
    5110:	add	r1, r4, r0, lsl #2
    5114:	add	r2, r8, r0, lsl #3
    5118:	add	r0, r0, #1
    511c:	sub	r1, r1, #4
    5120:	sub	r2, r2, #8
    5124:	vldr	d16, [r2]
    5128:	sub	r0, r0, #1
    512c:	sub	r2, r2, #8
    5130:	cmp	r0, #1
    5134:	vcvt.f32.f64	s0, d16
    5138:	vstr	s0, [r1]
    513c:	sub	r1, r1, #4
    5140:	bgt	5124 <coda_cursor_read_float_array+0xa34>
    5144:	mov	r0, r8
    5148:	bl	0 <free>
    514c:	mov	r5, #0
    5150:	b	4790 <coda_cursor_read_float_array+0xa0>
    5154:	.word	0x0000096c
    5158:	.word	0x000009ec

0000515c <coda_cursor_read_double_array>:
    515c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5160:	add	fp, sp, #24
    5164:	sub	sp, sp, #24
    5168:	cmp	r0, #0
    516c:	beq	51f0 <coda_cursor_read_double_array+0x94>
    5170:	mov	r5, r0
    5174:	ldr	r0, [r0, #4]
    5178:	cmp	r0, #1
    517c:	blt	51f0 <coda_cursor_read_double_array+0x94>
    5180:	add	r0, r5, r0, lsl #4
    5184:	mov	r4, r1
    5188:	ldr	r1, [r0, #-8]
    518c:	cmp	r1, #0
    5190:	beq	51f0 <coda_cursor_read_double_array+0x94>
    5194:	cmp	r4, #0
    5198:	beq	521c <coda_cursor_read_double_array+0xc0>
    519c:	ldr	r0, [r1]
    51a0:	cmp	r0, #99	; 0x63
    51a4:	ldrhi	r1, [r1, #4]
    51a8:	ldr	r0, [r1, #8]
    51ac:	cmp	r0, #1
    51b0:	bne	5234 <coda_cursor_read_double_array+0xd8>
    51b4:	ldr	r3, [r1, #40]	; 0x28
    51b8:	ldr	r6, [r3, #8]
    51bc:	ldr	r1, [r3, #12]
    51c0:	cmp	r6, #2
    51c4:	bne	5250 <coda_cursor_read_double_array+0xf4>
    51c8:	ldr	r0, [pc, #2532]	; 5bb4 <coda_cursor_read_double_array+0xa58>
    51cc:	ldr	r6, [pc, r0]
    51d0:	bl	0 <__aeabi_read_tp>
    51d4:	ldr	r0, [r0, r6]
    51d8:	cmp	r0, #0
    51dc:	beq	5294 <coda_cursor_read_double_array+0x138>
    51e0:	ldr	r9, [r3, #48]	; 0x30
    51e4:	cmp	r1, #9
    51e8:	bls	52a0 <coda_cursor_read_double_array+0x144>
    51ec:	b	527c <coda_cursor_read_double_array+0x120>
    51f0:	movw	r1, #0
    51f4:	movw	r2, #0
    51f8:	mvn	r0, #99	; 0x63
    51fc:	movw	r3, #3937	; 0xf61
    5200:	movt	r1, #0
    5204:	movt	r2, #0
    5208:	bl	0 <coda_set_error>
    520c:	mvn	r6, #0
    5210:	mov	r0, r6
    5214:	sub	sp, fp, #24
    5218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    521c:	movw	r1, #0
    5220:	movw	r2, #0
    5224:	mvn	r0, #99	; 0x63
    5228:	movw	r3, #3942	; 0xf66
    522c:	movt	r1, #0
    5230:	b	5204 <coda_cursor_read_double_array+0xa8>
    5234:	bl	0 <coda_type_get_class_name>
    5238:	movw	r1, #0
    523c:	mov	r2, r0
    5240:	movt	r1, #0
    5244:	mvn	r0, #104	; 0x68
    5248:	bl	0 <coda_set_error>
    524c:	b	520c <coda_cursor_read_double_array+0xb0>
    5250:	bl	0 <__aeabi_read_tp>
    5254:	mov	r9, #0
    5258:	cmp	r6, #3
    525c:	bne	5298 <coda_cursor_read_double_array+0x13c>
    5260:	ldr	r7, [pc, #2376]	; 5bb0 <coda_cursor_read_double_array+0xa54>
    5264:	ldr	r7, [pc, r7]
    5268:	ldr	r0, [r0, r7]
    526c:	cmp	r0, #0
    5270:	ldrne	r9, [r3, #48]	; 0x30
    5274:	cmp	r1, #9
    5278:	bls	52a0 <coda_cursor_read_double_array+0x144>
    527c:	mov	r0, r1
    5280:	bl	0 <coda_type_get_native_type_name>
    5284:	movw	r1, #0
    5288:	mov	r2, r0
    528c:	movt	r1, #0
    5290:	b	5244 <coda_cursor_read_double_array+0xe8>
    5294:	mov	r9, #0
    5298:	cmp	r1, #9
    529c:	bhi	527c <coda_cursor_read_double_array+0x120>
    52a0:	add	r0, pc, #0
    52a4:	ldr	pc, [r0, r1, lsl #2]
    52a8:	.word	0x000052d0
    52ac:	.word	0x0000544c
    52b0:	.word	0x000055bc
    52b4:	.word	0x00005614
    52b8:	.word	0x0000566c
    52bc:	.word	0x000056c4
    52c0:	.word	0x0000571c
    52c4:	.word	0x00005778
    52c8:	.word	0x000057d4
    52cc:	.word	0x0000582c
    52d0:	mov	r0, r5
    52d4:	mov	r1, r4
    52d8:	bl	205c <read_int8_array>
    52dc:	mvn	r6, #0
    52e0:	cmp	r0, #0
    52e4:	bne	5210 <coda_cursor_read_double_array+0xb4>
    52e8:	add	r1, sp, #20
    52ec:	mov	r0, r5
    52f0:	bl	0 <coda_cursor_get_num_elements>
    52f4:	cmp	r0, #0
    52f8:	bne	5210 <coda_cursor_read_double_array+0xb4>
    52fc:	ldr	r0, [sp, #20]
    5300:	cmp	r0, #1
    5304:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    5308:	mvn	r2, r0
    530c:	mvn	r1, #1
    5310:	mvn	r7, #1
    5314:	cmn	r2, #2
    5318:	movgt	r1, r2
    531c:	add	lr, r0, r1
    5320:	cmn	lr, #3
    5324:	bhi	540c <coda_cursor_read_double_array+0x2b0>
    5328:	cmn	r2, #2
    532c:	mov	r6, #8
    5330:	sub	r3, r0, #1
    5334:	movgt	r7, r2
    5338:	add	ip, r4, r3, lsl #3
    533c:	add	r7, r0, r7
    5340:	add	r7, r7, #1
    5344:	umull	r1, r6, r7, r6
    5348:	cmp	r6, #0
    534c:	movwne	r6, #1
    5350:	cmp	r1, ip
    5354:	bhi	540c <coda_cursor_read_double_array+0x2b0>
    5358:	cmp	r6, #0
    535c:	bne	540c <coda_cursor_read_double_array+0x2b0>
    5360:	add	r1, r4, r3
    5364:	cmp	r7, r1
    5368:	bhi	540c <coda_cursor_read_double_array+0x2b0>
    536c:	mvn	r1, #1
    5370:	cmn	r2, #2
    5374:	movle	r2, r1
    5378:	sub	r2, r1, r2
    537c:	add	r1, r4, r0
    5380:	add	r3, r4, r2, lsl #3
    5384:	cmp	r1, r3
    5388:	bls	539c <coda_cursor_read_double_array+0x240>
    538c:	add	r1, r4, r0, lsl #3
    5390:	add	r2, r4, r2
    5394:	cmp	r2, r1
    5398:	bcc	540c <coda_cursor_read_double_array+0x2b0>
    539c:	add	ip, lr, #2
    53a0:	sub	r1, r0, #2
    53a4:	vmov.i32	d16, #24	; 0x00000018
    53a8:	add	r8, sp, #4
    53ac:	mvn	r3, #15
    53b0:	bic	lr, ip, #1
    53b4:	add	r2, r4, r1
    53b8:	add	r6, r4, r1, lsl #3
    53bc:	vneg.s32	d16, d16
    53c0:	sub	r0, r0, lr
    53c4:	mov	r1, lr
    53c8:	ldrh	r7, [r2], #-2
    53cc:	subs	r1, r1, #2
    53d0:	strh	r7, [sp, #4]
    53d4:	vld1.16	{d17[0]}, [r8 :16]
    53d8:	vmovl.u8	q9, d17
    53dc:	vmovl.u16	q9, d18
    53e0:	vrev64.32	d17, d18
    53e4:	vshl.s32	d17, d17, #24
    53e8:	vshl.s32	d0, d17, d16
    53ec:	vcvt.f64.s32	d19, s1
    53f0:	vcvt.f64.s32	d18, s0
    53f4:	vmov.f64	d20, d19
    53f8:	vmov.f64	d21, d18
    53fc:	vst1.64	{d20-d21}, [r6], r3
    5400:	bne	53c8 <coda_cursor_read_double_array+0x26c>
    5404:	cmp	ip, lr
    5408:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    540c:	mvn	r1, #7
    5410:	add	r1, r1, r0, lsl #3
    5414:	sub	r0, r0, #1
    5418:	add	r3, r4, r0
    541c:	add	r2, r4, r1
    5420:	sub	r1, r1, #8
    5424:	ldrsb	r3, [r3]
    5428:	vmov	s0, r3
    542c:	vcvt.f64.s32	d16, s0
    5430:	vstr	d16, [r2]
    5434:	sub	r2, r0, #1
    5438:	add	r0, r0, #1
    543c:	cmp	r0, #1
    5440:	mov	r0, r2
    5444:	bgt	5418 <coda_cursor_read_double_array+0x2bc>
    5448:	b	5844 <coda_cursor_read_double_array+0x6e8>
    544c:	mov	r0, r5
    5450:	mov	r1, r4
    5454:	bl	22bc <read_uint8_array>
    5458:	mvn	r6, #0
    545c:	cmp	r0, #0
    5460:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5464:	add	r1, sp, #20
    5468:	mov	r0, r5
    546c:	bl	0 <coda_cursor_get_num_elements>
    5470:	cmp	r0, #0
    5474:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5478:	ldr	r0, [sp, #20]
    547c:	cmp	r0, #1
    5480:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    5484:	mvn	r2, r0
    5488:	mvn	r1, #1
    548c:	mvn	r7, #1
    5490:	cmn	r2, #2
    5494:	movgt	r1, r2
    5498:	add	lr, r0, r1
    549c:	cmn	lr, #3
    54a0:	bhi	5580 <coda_cursor_read_double_array+0x424>
    54a4:	cmn	r2, #2
    54a8:	mov	r6, #8
    54ac:	sub	r3, r0, #1
    54b0:	movgt	r7, r2
    54b4:	add	ip, r4, r3, lsl #3
    54b8:	add	r7, r0, r7
    54bc:	add	r7, r7, #1
    54c0:	umull	r1, r6, r7, r6
    54c4:	cmp	r6, #0
    54c8:	movwne	r6, #1
    54cc:	cmp	r1, ip
    54d0:	bhi	5580 <coda_cursor_read_double_array+0x424>
    54d4:	cmp	r6, #0
    54d8:	bne	5580 <coda_cursor_read_double_array+0x424>
    54dc:	add	r1, r4, r3
    54e0:	cmp	r7, r1
    54e4:	bhi	5580 <coda_cursor_read_double_array+0x424>
    54e8:	mvn	r1, #1
    54ec:	cmn	r2, #2
    54f0:	movle	r2, r1
    54f4:	sub	r2, r1, r2
    54f8:	add	r1, r4, r0
    54fc:	add	r3, r4, r2, lsl #3
    5500:	cmp	r1, r3
    5504:	bls	5518 <coda_cursor_read_double_array+0x3bc>
    5508:	add	r1, r4, r0, lsl #3
    550c:	add	r2, r4, r2
    5510:	cmp	r2, r1
    5514:	bcc	5580 <coda_cursor_read_double_array+0x424>
    5518:	add	ip, lr, #2
    551c:	sub	r1, r0, #2
    5520:	add	r8, sp, #8
    5524:	vmov.i32	d16, #255	; 0x000000ff
    5528:	mvn	r3, #15
    552c:	bic	lr, ip, #1
    5530:	add	r2, r4, r1
    5534:	add	r6, r4, r1, lsl #3
    5538:	sub	r0, r0, lr
    553c:	mov	r1, lr
    5540:	ldrh	r7, [r2], #-2
    5544:	subs	r1, r1, #2
    5548:	strh	r7, [sp, #8]
    554c:	vld1.16	{d17[0]}, [r8 :16]
    5550:	vmovl.u8	q9, d17
    5554:	vmovl.u16	q9, d18
    5558:	vrev64.32	d17, d18
    555c:	vand	d0, d17, d16
    5560:	vcvt.f64.u32	d19, s1
    5564:	vcvt.f64.u32	d18, s0
    5568:	vmov.f64	d20, d19
    556c:	vmov.f64	d21, d18
    5570:	vst1.64	{d20-d21}, [r6], r3
    5574:	bne	5540 <coda_cursor_read_double_array+0x3e4>
    5578:	cmp	ip, lr
    557c:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    5580:	mvn	r1, #7
    5584:	add	r1, r1, r0, lsl #3
    5588:	sub	r0, r0, #1
    558c:	ldrb	r3, [r4, r0]
    5590:	add	r2, r4, r1
    5594:	sub	r1, r1, #8
    5598:	vmov	s0, r3
    559c:	vcvt.f64.u32	d16, s0
    55a0:	vstr	d16, [r2]
    55a4:	sub	r2, r0, #1
    55a8:	add	r0, r0, #1
    55ac:	cmp	r0, #1
    55b0:	mov	r0, r2
    55b4:	bgt	558c <coda_cursor_read_double_array+0x430>
    55b8:	b	5844 <coda_cursor_read_double_array+0x6e8>
    55bc:	mov	r0, r5
    55c0:	mov	r1, r4
    55c4:	bl	27b8 <read_int16_array>
    55c8:	mvn	r6, #0
    55cc:	cmp	r0, #0
    55d0:	bne	5210 <coda_cursor_read_double_array+0xb4>
    55d4:	add	r1, sp, #20
    55d8:	mov	r0, r5
    55dc:	bl	0 <coda_cursor_get_num_elements>
    55e0:	cmp	r0, #0
    55e4:	bne	5210 <coda_cursor_read_double_array+0xb4>
    55e8:	ldr	r0, [sp, #20]
    55ec:	cmp	r0, #1
    55f0:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    55f4:	mvn	r1, r0
    55f8:	cmn	r1, #2
    55fc:	mvnle	r1, #1
    5600:	add	r1, r0, r1
    5604:	cmn	r1, #3
    5608:	bls	58c4 <coda_cursor_read_double_array+0x768>
    560c:	mov	r8, r0
    5610:	b	5934 <coda_cursor_read_double_array+0x7d8>
    5614:	mov	r0, r5
    5618:	mov	r1, r4
    561c:	bl	2b7c <read_uint16_array>
    5620:	mvn	r6, #0
    5624:	cmp	r0, #0
    5628:	bne	5210 <coda_cursor_read_double_array+0xb4>
    562c:	add	r1, sp, #20
    5630:	mov	r0, r5
    5634:	bl	0 <coda_cursor_get_num_elements>
    5638:	cmp	r0, #0
    563c:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5640:	ldr	r0, [sp, #20]
    5644:	cmp	r0, #1
    5648:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    564c:	mvn	r1, r0
    5650:	cmn	r1, #2
    5654:	mvnle	r1, #1
    5658:	add	r1, r0, r1
    565c:	cmn	r1, #3
    5660:	bls	596c <coda_cursor_read_double_array+0x810>
    5664:	mov	r8, r0
    5668:	b	59d4 <coda_cursor_read_double_array+0x878>
    566c:	mov	r0, r5
    5670:	mov	r1, r4
    5674:	bl	324c <read_int32_array>
    5678:	mvn	r6, #0
    567c:	cmp	r0, #0
    5680:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5684:	add	r1, sp, #20
    5688:	mov	r0, r5
    568c:	bl	0 <coda_cursor_get_num_elements>
    5690:	cmp	r0, #0
    5694:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5698:	ldr	r0, [sp, #20]
    569c:	cmp	r0, #1
    56a0:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    56a4:	mvn	r1, r0
    56a8:	cmn	r1, #2
    56ac:	mvnle	r1, #1
    56b0:	add	r1, r0, r1
    56b4:	cmn	r1, #3
    56b8:	bls	5a0c <coda_cursor_read_double_array+0x8b0>
    56bc:	mov	r8, r0
    56c0:	b	5a60 <coda_cursor_read_double_array+0x904>
    56c4:	mov	r0, r5
    56c8:	mov	r1, r4
    56cc:	bl	36f4 <read_uint32_array>
    56d0:	mvn	r6, #0
    56d4:	cmp	r0, #0
    56d8:	bne	5210 <coda_cursor_read_double_array+0xb4>
    56dc:	add	r1, sp, #20
    56e0:	mov	r0, r5
    56e4:	bl	0 <coda_cursor_get_num_elements>
    56e8:	cmp	r0, #0
    56ec:	bne	5210 <coda_cursor_read_double_array+0xb4>
    56f0:	ldr	r0, [sp, #20]
    56f4:	cmp	r0, #1
    56f8:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    56fc:	mvn	r1, r0
    5700:	cmn	r1, #2
    5704:	mvnle	r1, #1
    5708:	add	r1, r0, r1
    570c:	cmn	r1, #3
    5710:	bls	5a9c <coda_cursor_read_double_array+0x940>
    5714:	mov	r8, r0
    5718:	b	5af0 <coda_cursor_read_double_array+0x994>
    571c:	mov	r0, r5
    5720:	mov	r1, r4
    5724:	bl	4058 <read_int64_array>
    5728:	mvn	r6, #0
    572c:	cmp	r0, #0
    5730:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5734:	add	r1, sp, #20
    5738:	mov	r0, r5
    573c:	bl	0 <coda_cursor_get_num_elements>
    5740:	cmp	r0, #0
    5744:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5748:	ldr	r6, [sp, #20]
    574c:	cmp	r6, #1
    5750:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    5754:	sub	r8, r4, #8
    5758:	mov	r7, r8
    575c:	ldr	r0, [r7, r6, lsl #3]!
    5760:	ldr	r1, [r7, #4]
    5764:	bl	0 <__aeabi_l2d>
    5768:	subs	r6, r6, #1
    576c:	strd	r0, [r7]
    5770:	bgt	5758 <coda_cursor_read_double_array+0x5fc>
    5774:	b	5844 <coda_cursor_read_double_array+0x6e8>
    5778:	mov	r0, r5
    577c:	mov	r1, r4
    5780:	bl	4630 <read_uint64_array>
    5784:	mvn	r6, #0
    5788:	cmp	r0, #0
    578c:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5790:	add	r1, sp, #20
    5794:	mov	r0, r5
    5798:	bl	0 <coda_cursor_get_num_elements>
    579c:	cmp	r0, #0
    57a0:	bne	5210 <coda_cursor_read_double_array+0xb4>
    57a4:	ldr	r6, [sp, #20]
    57a8:	cmp	r6, #1
    57ac:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    57b0:	sub	r8, r4, #8
    57b4:	mov	r7, r8
    57b8:	ldr	r0, [r7, r6, lsl #3]!
    57bc:	ldr	r1, [r7, #4]
    57c0:	bl	0 <__aeabi_ul2d>
    57c4:	subs	r6, r6, #1
    57c8:	strd	r0, [r7]
    57cc:	bgt	57b4 <coda_cursor_read_double_array+0x658>
    57d0:	b	5844 <coda_cursor_read_double_array+0x6e8>
    57d4:	mov	r0, r5
    57d8:	mov	r1, r4
    57dc:	bl	5bb8 <read_float_array>
    57e0:	mvn	r6, #0
    57e4:	cmp	r0, #0
    57e8:	bne	5210 <coda_cursor_read_double_array+0xb4>
    57ec:	add	r1, sp, #20
    57f0:	mov	r0, r5
    57f4:	bl	0 <coda_cursor_get_num_elements>
    57f8:	cmp	r0, #0
    57fc:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5800:	ldr	r0, [sp, #20]
    5804:	cmp	r0, #1
    5808:	blt	5844 <coda_cursor_read_double_array+0x6e8>
    580c:	mvn	r1, r0
    5810:	cmn	r1, #2
    5814:	mvnle	r1, #1
    5818:	add	r1, r0, r1
    581c:	cmn	r1, #3
    5820:	bls	5b2c <coda_cursor_read_double_array+0x9d0>
    5824:	mov	r8, r0
    5828:	b	5b78 <coda_cursor_read_double_array+0xa1c>
    582c:	mov	r0, r5
    5830:	mov	r1, r4
    5834:	bl	5cd0 <read_double_array>
    5838:	mvn	r6, #0
    583c:	cmp	r0, #0
    5840:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5844:	mov	r6, #0
    5848:	cmp	r9, #0
    584c:	beq	5210 <coda_cursor_read_double_array+0xb4>
    5850:	add	r1, sp, #20
    5854:	mov	r0, r5
    5858:	bl	0 <coda_cursor_get_num_elements>
    585c:	mvn	r6, #0
    5860:	cmp	r0, #0
    5864:	bne	5210 <coda_cursor_read_double_array+0xb4>
    5868:	ldr	r0, [sp, #20]
    586c:	mov	r6, #0
    5870:	cmp	r0, #1
    5874:	blt	5210 <coda_cursor_read_double_array+0xb4>
    5878:	mov	r5, #0
    587c:	mov	r6, #0
    5880:	vldr	d16, [r4]
    5884:	vldr	d17, [r9, #24]
    5888:	vcmp.f64	d16, d17
    588c:	vmrs	APSR_nzcv, fpscr
    5890:	bne	58a0 <coda_cursor_read_double_array+0x744>
    5894:	bl	0 <coda_NaN>
    5898:	ldr	r0, [sp, #20]
    589c:	b	58b0 <coda_cursor_read_double_array+0x754>
    58a0:	vldmia	r9, {d17-d19}
    58a4:	vmul.f64	d16, d16, d17
    58a8:	vdiv.f64	d16, d16, d18
    58ac:	vadd.f64	d0, d16, d19
    58b0:	add	r5, r5, #1
    58b4:	vstmia	r4!, {d0}
    58b8:	cmp	r5, r0
    58bc:	blt	5880 <coda_cursor_read_double_array+0x724>
    58c0:	b	5210 <coda_cursor_read_double_array+0xb4>
    58c4:	add	ip, r1, #2
    58c8:	vmov.i32	d16, #16	; 0x00000010
    58cc:	add	r1, r4, r0, lsl #1
    58d0:	mvn	r2, #15
    58d4:	bic	lr, ip, #1
    58d8:	sub	r3, r1, #4
    58dc:	add	r1, sp, #12
    58e0:	vneg.s32	d16, d16
    58e4:	sub	r8, r0, lr
    58e8:	add	r0, r4, r0, lsl #3
    58ec:	sub	r6, r0, #16
    58f0:	mov	r0, lr
    58f4:	ldr	r7, [r3], #-4
    58f8:	subs	r0, r0, #2
    58fc:	str	r7, [sp, #12]
    5900:	vld1.32	{d17[0]}, [r1 :32]
    5904:	vmovl.u16	q9, d17
    5908:	vrev64.32	d17, d18
    590c:	vshl.s32	d17, d17, #16
    5910:	vshl.s32	d0, d17, d16
    5914:	vcvt.f64.s32	d19, s1
    5918:	vcvt.f64.s32	d18, s0
    591c:	vmov.f64	d20, d19
    5920:	vmov.f64	d21, d18
    5924:	vst1.64	{d20-d21}, [r6], r2
    5928:	bne	58f4 <coda_cursor_read_double_array+0x798>
    592c:	cmp	ip, lr
    5930:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    5934:	add	r0, r4, r8, lsl #3
    5938:	add	r1, r4, r8, lsl #1
    593c:	add	r2, r8, #1
    5940:	sub	r0, r0, #8
    5944:	sub	r1, r1, #2
    5948:	ldrsh	r3, [r1], #-2
    594c:	sub	r2, r2, #1
    5950:	cmp	r2, #1
    5954:	vmov	s0, r3
    5958:	vcvt.f64.s32	d16, s0
    595c:	vstr	d16, [r0]
    5960:	sub	r0, r0, #8
    5964:	bgt	5948 <coda_cursor_read_double_array+0x7ec>
    5968:	b	5844 <coda_cursor_read_double_array+0x6e8>
    596c:	add	ip, r1, #2
    5970:	add	r1, r4, r0, lsl #1
    5974:	vmov.i32	d16, #65535	; 0x0000ffff
    5978:	mvn	r2, #15
    597c:	bic	lr, ip, #1
    5980:	sub	r3, r1, #4
    5984:	add	r1, sp, #16
    5988:	sub	r8, r0, lr
    598c:	add	r0, r4, r0, lsl #3
    5990:	sub	r6, r0, #16
    5994:	mov	r0, lr
    5998:	ldr	r7, [r3], #-4
    599c:	subs	r0, r0, #2
    59a0:	str	r7, [sp, #16]
    59a4:	vld1.32	{d17[0]}, [r1 :32]
    59a8:	vmovl.u16	q9, d17
    59ac:	vrev64.32	d17, d18
    59b0:	vand	d0, d17, d16
    59b4:	vcvt.f64.u32	d19, s1
    59b8:	vcvt.f64.u32	d18, s0
    59bc:	vmov.f64	d20, d19
    59c0:	vmov.f64	d21, d18
    59c4:	vst1.64	{d20-d21}, [r6], r2
    59c8:	bne	5998 <coda_cursor_read_double_array+0x83c>
    59cc:	cmp	ip, lr
    59d0:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    59d4:	add	r0, r4, r8, lsl #3
    59d8:	add	r1, r4, r8, lsl #1
    59dc:	add	r2, r8, #1
    59e0:	sub	r0, r0, #8
    59e4:	sub	r1, r1, #2
    59e8:	ldrh	r3, [r1], #-2
    59ec:	sub	r2, r2, #1
    59f0:	cmp	r2, #1
    59f4:	vmov	s0, r3
    59f8:	vcvt.f64.u32	d16, s0
    59fc:	vstr	d16, [r0]
    5a00:	sub	r0, r0, #8
    5a04:	bgt	59e8 <coda_cursor_read_double_array+0x88c>
    5a08:	b	5844 <coda_cursor_read_double_array+0x6e8>
    5a0c:	add	ip, r1, #2
    5a10:	add	r1, r4, r0, lsl #2
    5a14:	mvn	r2, #15
    5a18:	bic	lr, ip, #1
    5a1c:	sub	r3, r1, #8
    5a20:	mvn	r1, #7
    5a24:	sub	r8, r0, lr
    5a28:	add	r0, r4, r0, lsl #3
    5a2c:	sub	r6, r0, #16
    5a30:	mov	r0, lr
    5a34:	vld1.32	{d16}, [r3], r1
    5a38:	subs	r0, r0, #2
    5a3c:	vrev64.32	d0, d16
    5a40:	vcvt.f64.s32	d17, s1
    5a44:	vcvt.f64.s32	d16, s0
    5a48:	vmov.f64	d18, d17
    5a4c:	vmov.f64	d19, d16
    5a50:	vst1.64	{d18-d19}, [r6], r2
    5a54:	bne	5a34 <coda_cursor_read_double_array+0x8d8>
    5a58:	cmp	ip, lr
    5a5c:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    5a60:	mvn	r0, #7
    5a64:	sub	r1, r8, #1
    5a68:	add	r0, r0, r8, lsl #3
    5a6c:	add	r2, r4, r1, lsl #2
    5a70:	vldr	s0, [r2]
    5a74:	add	r2, r4, r0
    5a78:	sub	r0, r0, #8
    5a7c:	vcvt.f64.s32	d16, s0
    5a80:	vstr	d16, [r2]
    5a84:	sub	r2, r1, #1
    5a88:	add	r1, r1, #1
    5a8c:	cmp	r1, #1
    5a90:	mov	r1, r2
    5a94:	bgt	5a6c <coda_cursor_read_double_array+0x910>
    5a98:	b	5844 <coda_cursor_read_double_array+0x6e8>
    5a9c:	add	ip, r1, #2
    5aa0:	add	r1, r4, r0, lsl #2
    5aa4:	mvn	r2, #15
    5aa8:	bic	lr, ip, #1
    5aac:	sub	r3, r1, #8
    5ab0:	mvn	r1, #7
    5ab4:	sub	r8, r0, lr
    5ab8:	add	r0, r4, r0, lsl #3
    5abc:	sub	r6, r0, #16
    5ac0:	mov	r0, lr
    5ac4:	vld1.32	{d16}, [r3], r1
    5ac8:	subs	r0, r0, #2
    5acc:	vrev64.32	d0, d16
    5ad0:	vcvt.f64.u32	d17, s1
    5ad4:	vcvt.f64.u32	d16, s0
    5ad8:	vmov.f64	d18, d17
    5adc:	vmov.f64	d19, d16
    5ae0:	vst1.64	{d18-d19}, [r6], r2
    5ae4:	bne	5ac4 <coda_cursor_read_double_array+0x968>
    5ae8:	cmp	ip, lr
    5aec:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    5af0:	mvn	r0, #7
    5af4:	sub	r1, r8, #1
    5af8:	add	r0, r0, r8, lsl #3
    5afc:	add	r2, r4, r1, lsl #2
    5b00:	vldr	s0, [r2]
    5b04:	add	r2, r4, r0
    5b08:	sub	r0, r0, #8
    5b0c:	vcvt.f64.u32	d16, s0
    5b10:	vstr	d16, [r2]
    5b14:	sub	r2, r1, #1
    5b18:	add	r1, r1, #1
    5b1c:	cmp	r1, #1
    5b20:	mov	r1, r2
    5b24:	bgt	5afc <coda_cursor_read_double_array+0x9a0>
    5b28:	b	5844 <coda_cursor_read_double_array+0x6e8>
    5b2c:	add	ip, r1, #2
    5b30:	add	r1, r4, r0, lsl #2
    5b34:	mvn	r2, #15
    5b38:	bic	lr, ip, #1
    5b3c:	sub	r3, r1, #8
    5b40:	mvn	r1, #7
    5b44:	sub	r8, r0, lr
    5b48:	add	r0, r4, r0, lsl #3
    5b4c:	sub	r6, r0, #16
    5b50:	mov	r0, lr
    5b54:	vld1.32	{d16}, [r3], r1
    5b58:	subs	r0, r0, #2
    5b5c:	vrev64.32	d0, d16
    5b60:	vcvt.f64.f32	d17, s0
    5b64:	vcvt.f64.f32	d16, s1
    5b68:	vst1.64	{d16-d17}, [r6], r2
    5b6c:	bne	5b54 <coda_cursor_read_double_array+0x9f8>
    5b70:	cmp	ip, lr
    5b74:	beq	5844 <coda_cursor_read_double_array+0x6e8>
    5b78:	add	r0, r4, r8, lsl #3
    5b7c:	add	r1, r4, r8, lsl #2
    5b80:	add	r2, r8, #1
    5b84:	sub	r0, r0, #8
    5b88:	sub	r1, r1, #4
    5b8c:	vldr	s0, [r1]
    5b90:	sub	r2, r2, #1
    5b94:	sub	r1, r1, #4
    5b98:	cmp	r2, #1
    5b9c:	vcvt.f64.f32	d16, s0
    5ba0:	vstr	d16, [r0]
    5ba4:	sub	r0, r0, #8
    5ba8:	bgt	5b8c <coda_cursor_read_double_array+0xa30>
    5bac:	b	5844 <coda_cursor_read_double_array+0x6e8>
    5bb0:	.word	0x00000944
    5bb4:	.word	0x000009e0

00005bb8 <read_float_array>:
    5bb8:	push	{r4, r5, r6, sl, fp, lr}
    5bbc:	add	fp, sp, #16
    5bc0:	mov	r6, r0
    5bc4:	ldr	r0, [r0, #4]
    5bc8:	mov	r4, r1
    5bcc:	mov	r5, r2
    5bd0:	add	r0, r6, r0, lsl #4
    5bd4:	ldr	r0, [r0, #-8]
    5bd8:	ldr	r0, [r0]
    5bdc:	sub	r1, r0, #100	; 0x64
    5be0:	cmp	r1, #5
    5be4:	bhi	5c1c <read_float_array+0x64>
    5be8:	add	r0, pc, #0
    5bec:	ldr	pc, [r0, r1, lsl #2]
    5bf0:	.word	0x00005c08
    5bf4:	.word	0x00005c40
    5bf8:	.word	0x00005c48
    5bfc:	.word	0x00005c5c
    5c00:	.word	0x00005c6c
    5c04:	.word	0x00005c7c
    5c08:	mov	r0, r6
    5c0c:	mov	r1, r4
    5c10:	mov	r2, r5
    5c14:	pop	{r4, r5, r6, sl, fp, lr}
    5c18:	b	0 <coda_mem_cursor_read_float_array>
    5c1c:	cmp	r0, #1
    5c20:	beq	5cbc <read_float_array+0x104>
    5c24:	cmp	r0, #0
    5c28:	bne	5c98 <read_float_array+0xe0>
    5c2c:	mov	r0, r6
    5c30:	mov	r1, r4
    5c34:	mov	r2, r5
    5c38:	pop	{r4, r5, r6, sl, fp, lr}
    5c3c:	b	0 <coda_ascii_cursor_read_float_array>
    5c40:	mvn	r0, #10
    5c44:	b	5c4c <read_float_array+0x94>
    5c48:	mvn	r0, #12
    5c4c:	mov	r1, #0
    5c50:	bl	0 <coda_set_error>
    5c54:	mvn	r0, #0
    5c58:	pop	{r4, r5, r6, sl, fp, pc}
    5c5c:	mov	r0, r6
    5c60:	mov	r1, r4
    5c64:	bl	0 <coda_cdf_cursor_read_float_array>
    5c68:	b	5c88 <read_float_array+0xd0>
    5c6c:	mov	r0, r6
    5c70:	mov	r1, r4
    5c74:	bl	0 <coda_netcdf_cursor_read_float_array>
    5c78:	b	5c88 <read_float_array+0xd0>
    5c7c:	mov	r0, r6
    5c80:	mov	r1, r4
    5c84:	bl	0 <coda_grib_cursor_read_float_array>
    5c88:	mov	r1, r0
    5c8c:	mvn	r0, #0
    5c90:	cmp	r1, #0
    5c94:	popne	{r4, r5, r6, sl, fp, pc}
    5c98:	cmp	r5, #0
    5c9c:	beq	5cb4 <read_float_array+0xfc>
    5ca0:	mov	r0, r6
    5ca4:	mov	r1, r4
    5ca8:	mov	r2, #4
    5cac:	pop	{r4, r5, r6, sl, fp, lr}
    5cb0:	b	aae0 <transpose_array>
    5cb4:	mov	r0, #0
    5cb8:	pop	{r4, r5, r6, sl, fp, pc}
    5cbc:	mov	r0, r6
    5cc0:	mov	r1, r4
    5cc4:	mov	r2, r5
    5cc8:	pop	{r4, r5, r6, sl, fp, lr}
    5ccc:	b	0 <coda_bin_cursor_read_float_array>

00005cd0 <read_double_array>:
    5cd0:	push	{r4, r5, r6, sl, fp, lr}
    5cd4:	add	fp, sp, #16
    5cd8:	sub	sp, sp, #8
    5cdc:	mov	r6, r0
    5ce0:	ldr	r0, [r0, #4]
    5ce4:	mov	r4, r1
    5ce8:	mov	r5, r2
    5cec:	add	r0, r6, r0, lsl #4
    5cf0:	ldr	r1, [r0, #-8]
    5cf4:	ldr	r0, [r1]
    5cf8:	cmp	r0, #99	; 0x63
    5cfc:	ldrhi	r1, [r1, #4]
    5d00:	ldr	r1, [r1, #40]	; 0x28
    5d04:	ldr	r1, [r1, #8]
    5d08:	cmp	r1, #6
    5d0c:	bne	5d34 <read_double_array+0x64>
    5d10:	movw	r1, #0
    5d14:	mov	r0, r6
    5d18:	mov	r2, r4
    5d1c:	mov	r3, #8
    5d20:	str	r5, [sp]
    5d24:	movt	r1, #0
    5d28:	bl	a470 <read_array>
    5d2c:	sub	sp, fp, #16
    5d30:	pop	{r4, r5, r6, sl, fp, pc}
    5d34:	sub	r1, r0, #100	; 0x64
    5d38:	cmp	r1, #5
    5d3c:	bhi	5d78 <read_double_array+0xa8>
    5d40:	add	r0, pc, #0
    5d44:	ldr	pc, [r0, r1, lsl #2]
    5d48:	.word	0x00005d60
    5d4c:	.word	0x00005dd0
    5d50:	.word	0x00005dc8
    5d54:	.word	0x00005de8
    5d58:	.word	0x00005db8
    5d5c:	.word	0x00005e38
    5d60:	mov	r0, r6
    5d64:	mov	r1, r4
    5d68:	mov	r2, r5
    5d6c:	sub	sp, fp, #16
    5d70:	pop	{r4, r5, r6, sl, fp, lr}
    5d74:	b	0 <coda_mem_cursor_read_double_array>
    5d78:	cmp	r0, #1
    5d7c:	beq	5da0 <read_double_array+0xd0>
    5d80:	cmp	r0, #0
    5d84:	bne	5e0c <read_double_array+0x13c>
    5d88:	mov	r0, r6
    5d8c:	mov	r1, r4
    5d90:	mov	r2, r5
    5d94:	sub	sp, fp, #16
    5d98:	pop	{r4, r5, r6, sl, fp, lr}
    5d9c:	b	0 <coda_ascii_cursor_read_double_array>
    5da0:	mov	r0, r6
    5da4:	mov	r1, r4
    5da8:	mov	r2, r5
    5dac:	sub	sp, fp, #16
    5db0:	pop	{r4, r5, r6, sl, fp, lr}
    5db4:	b	0 <coda_bin_cursor_read_double_array>
    5db8:	mov	r0, r6
    5dbc:	mov	r1, r4
    5dc0:	bl	0 <coda_netcdf_cursor_read_double_array>
    5dc4:	b	5df4 <read_double_array+0x124>
    5dc8:	mvn	r0, #12
    5dcc:	b	5dd4 <read_double_array+0x104>
    5dd0:	mvn	r0, #10
    5dd4:	mov	r1, #0
    5dd8:	bl	0 <coda_set_error>
    5ddc:	mvn	r0, #0
    5de0:	sub	sp, fp, #16
    5de4:	pop	{r4, r5, r6, sl, fp, pc}
    5de8:	mov	r0, r6
    5dec:	mov	r1, r4
    5df0:	bl	0 <coda_cdf_cursor_read_double_array>
    5df4:	mov	r1, r0
    5df8:	mvn	r0, #0
    5dfc:	cmp	r1, #0
    5e00:	beq	5e0c <read_double_array+0x13c>
    5e04:	sub	sp, fp, #16
    5e08:	pop	{r4, r5, r6, sl, fp, pc}
    5e0c:	cmp	r5, #0
    5e10:	beq	5e2c <read_double_array+0x15c>
    5e14:	mov	r0, r6
    5e18:	mov	r1, r4
    5e1c:	mov	r2, #8
    5e20:	sub	sp, fp, #16
    5e24:	pop	{r4, r5, r6, sl, fp, lr}
    5e28:	b	aae0 <transpose_array>
    5e2c:	mov	r0, #0
    5e30:	sub	sp, fp, #16
    5e34:	pop	{r4, r5, r6, sl, fp, pc}
    5e38:	movw	r0, #0
    5e3c:	movw	r1, #0
    5e40:	movw	r3, #0
    5e44:	movw	r2, #1301	; 0x515
    5e48:	movt	r0, #0
    5e4c:	movt	r1, #0
    5e50:	movt	r3, #0
    5e54:	bl	0 <__assert_fail>

00005e58 <coda_cursor_read_char_array>:
    5e58:	push	{r4, r5, r6, sl, fp, lr}
    5e5c:	add	fp, sp, #16
    5e60:	cmp	r0, #0
    5e64:	beq	5ed0 <coda_cursor_read_char_array+0x78>
    5e68:	mov	r6, r0
    5e6c:	ldr	r0, [r0, #4]
    5e70:	cmp	r0, #1
    5e74:	blt	5ed0 <coda_cursor_read_char_array+0x78>
    5e78:	add	r0, r6, r0, lsl #4
    5e7c:	mov	r5, r2
    5e80:	ldr	r2, [r0, #-8]
    5e84:	cmp	r2, #0
    5e88:	beq	5ed0 <coda_cursor_read_char_array+0x78>
    5e8c:	mov	r4, r1
    5e90:	cmp	r1, #0
    5e94:	beq	5ef4 <coda_cursor_read_char_array+0x9c>
    5e98:	ldr	r1, [r2]
    5e9c:	cmp	r1, #99	; 0x63
    5ea0:	ldrhi	r2, [r2, #4]
    5ea4:	ldr	r0, [r2, #8]
    5ea8:	cmp	r0, #1
    5eac:	bne	5f0c <coda_cursor_read_char_array+0xb4>
    5eb0:	ldr	r2, [r2, #40]	; 0x28
    5eb4:	ldr	r3, [r2, #8]
    5eb8:	cmp	r3, #2
    5ebc:	bne	5f20 <coda_cursor_read_char_array+0xc8>
    5ec0:	ldr	r0, [pc, #440]	; 6080 <coda_cursor_read_char_array+0x228>
    5ec4:	ldr	r3, [pc, r0]
    5ec8:	bl	0 <__aeabi_read_tp>
    5ecc:	b	5f34 <coda_cursor_read_char_array+0xdc>
    5ed0:	movw	r1, #0
    5ed4:	movw	r2, #0
    5ed8:	mvn	r0, #99	; 0x63
    5edc:	movw	r3, #4136	; 0x1028
    5ee0:	movt	r1, #0
    5ee4:	movt	r2, #0
    5ee8:	bl	0 <coda_set_error>
    5eec:	mvn	r0, #0
    5ef0:	pop	{r4, r5, r6, sl, fp, pc}
    5ef4:	movw	r1, #0
    5ef8:	movw	r2, #0
    5efc:	mvn	r0, #99	; 0x63
    5f00:	movw	r3, #4141	; 0x102d
    5f04:	movt	r1, #0
    5f08:	b	5ee4 <coda_cursor_read_char_array+0x8c>
    5f0c:	bl	0 <coda_type_get_class_name>
    5f10:	movw	r1, #0
    5f14:	mov	r2, r0
    5f18:	movt	r1, #0
    5f1c:	b	5fac <coda_cursor_read_char_array+0x154>
    5f20:	bl	0 <__aeabi_read_tp>
    5f24:	cmp	r3, #3
    5f28:	bne	5f50 <coda_cursor_read_char_array+0xf8>
    5f2c:	ldr	r3, [pc, #328]	; 607c <coda_cursor_read_char_array+0x224>
    5f30:	ldr	r3, [pc, r3]
    5f34:	ldr	r0, [r0, r3]
    5f38:	cmp	r0, #0
    5f3c:	beq	5f50 <coda_cursor_read_char_array+0xf8>
    5f40:	ldr	r3, [r2, #48]	; 0x30
    5f44:	mov	r0, #9
    5f48:	cmp	r3, #0
    5f4c:	bne	5f9c <coda_cursor_read_char_array+0x144>
    5f50:	ldr	r0, [r2, #12]
    5f54:	cmp	r0, #10
    5f58:	bne	5f9c <coda_cursor_read_char_array+0x144>
    5f5c:	sub	r0, r1, #100	; 0x64
    5f60:	cmp	r0, #5
    5f64:	bhi	5fb8 <coda_cursor_read_char_array+0x160>
    5f68:	add	r1, pc, #0
    5f6c:	ldr	pc, [r1, r0, lsl #2]
    5f70:	.word	0x00005f88
    5f74:	.word	0x00005fdc
    5f78:	.word	0x0000605c
    5f7c:	.word	0x00006000
    5f80:	.word	0x00006010
    5f84:	.word	0x0000605c
    5f88:	mov	r0, r6
    5f8c:	mov	r1, r4
    5f90:	mov	r2, r5
    5f94:	bl	0 <coda_mem_cursor_read_char_array>
    5f98:	b	6044 <coda_cursor_read_char_array+0x1ec>
    5f9c:	bl	0 <coda_type_get_native_type_name>
    5fa0:	movw	r1, #0
    5fa4:	mov	r2, r0
    5fa8:	movt	r1, #0
    5fac:	mvn	r0, #104	; 0x68
    5fb0:	bl	0 <coda_set_error>
    5fb4:	b	5eec <coda_cursor_read_char_array+0x94>
    5fb8:	cmp	r1, #1
    5fbc:	beq	5fec <coda_cursor_read_char_array+0x194>
    5fc0:	cmp	r1, #0
    5fc4:	bne	602c <coda_cursor_read_char_array+0x1d4>
    5fc8:	mov	r0, r6
    5fcc:	mov	r1, r4
    5fd0:	mov	r2, r5
    5fd4:	bl	0 <coda_ascii_cursor_read_char_array>
    5fd8:	b	6044 <coda_cursor_read_char_array+0x1ec>
    5fdc:	mvn	r0, #10
    5fe0:	mov	r1, #0
    5fe4:	bl	0 <coda_set_error>
    5fe8:	b	5eec <coda_cursor_read_char_array+0x94>
    5fec:	mov	r0, r6
    5ff0:	mov	r1, r4
    5ff4:	mov	r2, r5
    5ff8:	bl	0 <coda_bin_cursor_read_char_array>
    5ffc:	b	6044 <coda_cursor_read_char_array+0x1ec>
    6000:	mov	r0, r6
    6004:	mov	r1, r4
    6008:	bl	0 <coda_cdf_cursor_read_char_array>
    600c:	b	601c <coda_cursor_read_char_array+0x1c4>
    6010:	mov	r0, r6
    6014:	mov	r1, r4
    6018:	bl	0 <coda_netcdf_cursor_read_char_array>
    601c:	mov	r1, r0
    6020:	mvn	r0, #0
    6024:	cmp	r1, #0
    6028:	bne	5ef0 <coda_cursor_read_char_array+0x98>
    602c:	cmp	r5, #0
    6030:	beq	6054 <coda_cursor_read_char_array+0x1fc>
    6034:	mov	r0, r6
    6038:	mov	r1, r4
    603c:	mov	r2, #1
    6040:	bl	aae0 <transpose_array>
    6044:	mov	r1, r0
    6048:	mvn	r0, #0
    604c:	cmp	r1, #0
    6050:	popne	{r4, r5, r6, sl, fp, pc}
    6054:	mov	r0, #0
    6058:	pop	{r4, r5, r6, sl, fp, pc}
    605c:	movw	r0, #0
    6060:	movw	r1, #0
    6064:	movw	r3, #0
    6068:	movw	r2, #1348	; 0x544
    606c:	movt	r0, #0
    6070:	movt	r1, #0
    6074:	movt	r3, #0
    6078:	bl	0 <__assert_fail>
    607c:	.word	0x00000144
    6080:	.word	0x000001b4

00006084 <coda_cursor_read_int8_partial_array>:
    6084:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6088:	add	fp, sp, #24
    608c:	sub	sp, sp, #8
    6090:	cmp	r0, #0
    6094:	beq	6134 <coda_cursor_read_int8_partial_array+0xb0>
    6098:	mov	r7, r0
    609c:	ldr	r0, [r0, #4]
    60a0:	cmp	r0, #1
    60a4:	blt	6134 <coda_cursor_read_int8_partial_array+0xb0>
    60a8:	add	r0, r7, r0, lsl #4
    60ac:	ldr	r5, [r0, #-8]
    60b0:	cmp	r5, #0
    60b4:	beq	6134 <coda_cursor_read_int8_partial_array+0xb0>
    60b8:	mov	r6, r3
    60bc:	cmp	r3, #0
    60c0:	beq	615c <coda_cursor_read_int8_partial_array+0xd8>
    60c4:	ldr	r0, [r5]
    60c8:	mov	r8, r2
    60cc:	mov	r4, r1
    60d0:	cmp	r0, #99	; 0x63
    60d4:	ldrhi	r5, [r5, #4]
    60d8:	ldr	r0, [r5, #8]
    60dc:	cmp	r0, #1
    60e0:	bne	6174 <coda_cursor_read_int8_partial_array+0xf0>
    60e4:	ldr	r0, [pc, #352]	; 624c <coda_cursor_read_int8_partial_array+0x1c8>
    60e8:	ldr	r1, [pc, r0]
    60ec:	bl	0 <__aeabi_read_tp>
    60f0:	ldr	r0, [r0, r1]
    60f4:	cmp	r0, #0
    60f8:	beq	61b0 <coda_cursor_read_int8_partial_array+0x12c>
    60fc:	add	r1, sp, #4
    6100:	mov	r0, r7
    6104:	bl	0 <coda_cursor_get_num_elements>
    6108:	cmp	r0, #0
    610c:	bne	6150 <coda_cursor_read_int8_partial_array+0xcc>
    6110:	ldr	r3, [sp, #4]
    6114:	cmp	r4, #0
    6118:	cmpge	r3, r4
    611c:	bgt	6188 <coda_cursor_read_int8_partial_array+0x104>
    6120:	movw	r1, #0
    6124:	mvn	r0, #106	; 0x6a
    6128:	mov	r2, r4
    612c:	movt	r1, #0
    6130:	b	614c <coda_cursor_read_int8_partial_array+0xc8>
    6134:	movw	r1, #0
    6138:	movw	r2, #0
    613c:	mvn	r0, #99	; 0x63
    6140:	movw	r3, #4199	; 0x1067
    6144:	movt	r1, #0
    6148:	movt	r2, #0
    614c:	bl	0 <coda_set_error>
    6150:	mvn	r0, #0
    6154:	sub	sp, fp, #24
    6158:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    615c:	movw	r1, #0
    6160:	movw	r2, #0
    6164:	mvn	r0, #99	; 0x63
    6168:	movw	r3, #4204	; 0x106c
    616c:	movt	r1, #0
    6170:	b	6148 <coda_cursor_read_int8_partial_array+0xc4>
    6174:	bl	0 <coda_type_get_class_name>
    6178:	movw	r1, #0
    617c:	mov	r2, r0
    6180:	movt	r1, #0
    6184:	b	621c <coda_cursor_read_int8_partial_array+0x198>
    6188:	add	r0, r8, r4
    618c:	cmp	r0, r3
    6190:	ble	61b0 <coda_cursor_read_int8_partial_array+0x12c>
    6194:	movw	r1, #0
    6198:	str	r3, [sp]
    619c:	mvn	r0, #106	; 0x6a
    61a0:	mov	r2, r4
    61a4:	mov	r3, r8
    61a8:	movt	r1, #0
    61ac:	b	614c <coda_cursor_read_int8_partial_array+0xc8>
    61b0:	ldr	r1, [r5, #40]	; 0x28
    61b4:	ldr	r2, [r1, #8]
    61b8:	cmp	r2, #2
    61bc:	bne	61d0 <coda_cursor_read_int8_partial_array+0x14c>
    61c0:	ldr	r0, [pc, #140]	; 6254 <coda_cursor_read_int8_partial_array+0x1d0>
    61c4:	ldr	r2, [pc, r0]
    61c8:	bl	0 <__aeabi_read_tp>
    61cc:	b	61e4 <coda_cursor_read_int8_partial_array+0x160>
    61d0:	bl	0 <__aeabi_read_tp>
    61d4:	cmp	r2, #3
    61d8:	bne	6200 <coda_cursor_read_int8_partial_array+0x17c>
    61dc:	ldr	r2, [pc, #108]	; 6250 <coda_cursor_read_int8_partial_array+0x1cc>
    61e0:	ldr	r2, [pc, r2]
    61e4:	ldr	r0, [r0, r2]
    61e8:	cmp	r0, #0
    61ec:	beq	6200 <coda_cursor_read_int8_partial_array+0x17c>
    61f0:	ldr	r2, [r1, #48]	; 0x30
    61f4:	mov	r0, #9
    61f8:	cmp	r2, #0
    61fc:	bne	620c <coda_cursor_read_int8_partial_array+0x188>
    6200:	ldr	r0, [r1, #12]
    6204:	cmp	r0, #0
    6208:	beq	6228 <coda_cursor_read_int8_partial_array+0x1a4>
    620c:	bl	0 <coda_type_get_native_type_name>
    6210:	movw	r1, #0
    6214:	mov	r2, r0
    6218:	movt	r1, #0
    621c:	mvn	r0, #104	; 0x68
    6220:	bl	0 <coda_set_error>
    6224:	b	6150 <coda_cursor_read_int8_partial_array+0xcc>
    6228:	mov	r0, r7
    622c:	mov	r1, r4
    6230:	mov	r2, r8
    6234:	mov	r3, r6
    6238:	bl	6258 <read_int8_partial_array>
    623c:	cmp	r0, #0
    6240:	mvnne	r0, #0
    6244:	sub	sp, fp, #24
    6248:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    624c:	.word	0x0000015c
    6250:	.word	0x00000068
    6254:	.word	0x00000088

00006258 <read_int8_partial_array>:
    6258:	push	{fp, lr}
    625c:	mov	fp, sp
    6260:	ldr	ip, [r0, #4]
    6264:	add	ip, r0, ip, lsl #4
    6268:	ldr	ip, [ip, #-8]
    626c:	ldr	ip, [ip]
    6270:	sub	lr, ip, #100	; 0x64
    6274:	cmp	lr, #4
    6278:	bhi	62a0 <read_int8_partial_array+0x48>
    627c:	add	ip, pc, #0
    6280:	ldr	pc, [ip, lr, lsl #2]
    6284:	.word	0x00006298
    6288:	.word	0x000062d0
    628c:	.word	0x000062c0
    6290:	.word	0x000062c8
    6294:	.word	0x000062b8
    6298:	pop	{fp, lr}
    629c:	b	0 <coda_mem_cursor_read_int8_partial_array>
    62a0:	cmp	ip, #1
    62a4:	beq	62e4 <read_int8_partial_array+0x8c>
    62a8:	cmp	ip, #0
    62ac:	bne	62ec <read_int8_partial_array+0x94>
    62b0:	pop	{fp, lr}
    62b4:	b	0 <coda_ascii_cursor_read_int8_partial_array>
    62b8:	pop	{fp, lr}
    62bc:	b	0 <coda_netcdf_cursor_read_int8_partial_array>
    62c0:	mvn	r0, #12
    62c4:	b	62d4 <read_int8_partial_array+0x7c>
    62c8:	pop	{fp, lr}
    62cc:	b	0 <coda_cdf_cursor_read_int8_partial_array>
    62d0:	mvn	r0, #10
    62d4:	mov	r1, #0
    62d8:	bl	0 <coda_set_error>
    62dc:	mvn	r0, #0
    62e0:	pop	{fp, pc}
    62e4:	pop	{fp, lr}
    62e8:	b	0 <coda_bin_cursor_read_int8_partial_array>
    62ec:	movw	r0, #0
    62f0:	movw	r1, #0
    62f4:	movw	r3, #0
    62f8:	mov	r2, #1392	; 0x570
    62fc:	movt	r0, #0
    6300:	movt	r1, #0
    6304:	movt	r3, #0
    6308:	bl	0 <__assert_fail>

0000630c <coda_cursor_read_uint8_partial_array>:
    630c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6310:	add	fp, sp, #24
    6314:	sub	sp, sp, #8
    6318:	cmp	r0, #0
    631c:	beq	63bc <coda_cursor_read_uint8_partial_array+0xb0>
    6320:	mov	r7, r0
    6324:	ldr	r0, [r0, #4]
    6328:	cmp	r0, #1
    632c:	blt	63bc <coda_cursor_read_uint8_partial_array+0xb0>
    6330:	add	r0, r7, r0, lsl #4
    6334:	ldr	r5, [r0, #-8]
    6338:	cmp	r5, #0
    633c:	beq	63bc <coda_cursor_read_uint8_partial_array+0xb0>
    6340:	mov	r6, r3
    6344:	cmp	r3, #0
    6348:	beq	63e4 <coda_cursor_read_uint8_partial_array+0xd8>
    634c:	ldr	r0, [r5]
    6350:	mov	r8, r2
    6354:	mov	r4, r1
    6358:	cmp	r0, #99	; 0x63
    635c:	ldrhi	r5, [r5, #4]
    6360:	ldr	r0, [r5, #8]
    6364:	cmp	r0, #1
    6368:	bne	63fc <coda_cursor_read_uint8_partial_array+0xf0>
    636c:	ldr	r0, [pc, #352]	; 64d4 <coda_cursor_read_uint8_partial_array+0x1c8>
    6370:	ldr	r1, [pc, r0]
    6374:	bl	0 <__aeabi_read_tp>
    6378:	ldr	r0, [r0, r1]
    637c:	cmp	r0, #0
    6380:	beq	6438 <coda_cursor_read_uint8_partial_array+0x12c>
    6384:	add	r1, sp, #4
    6388:	mov	r0, r7
    638c:	bl	0 <coda_cursor_get_num_elements>
    6390:	cmp	r0, #0
    6394:	bne	63d8 <coda_cursor_read_uint8_partial_array+0xcc>
    6398:	ldr	r3, [sp, #4]
    639c:	cmp	r4, #0
    63a0:	cmpge	r3, r4
    63a4:	bgt	6410 <coda_cursor_read_uint8_partial_array+0x104>
    63a8:	movw	r1, #0
    63ac:	mvn	r0, #106	; 0x6a
    63b0:	mov	r2, r4
    63b4:	movt	r1, #0
    63b8:	b	63d4 <coda_cursor_read_uint8_partial_array+0xc8>
    63bc:	movw	r1, #0
    63c0:	movw	r2, #0
    63c4:	mvn	r0, #99	; 0x63
    63c8:	movw	r3, #4285	; 0x10bd
    63cc:	movt	r1, #0
    63d0:	movt	r2, #0
    63d4:	bl	0 <coda_set_error>
    63d8:	mvn	r0, #0
    63dc:	sub	sp, fp, #24
    63e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    63e4:	movw	r1, #0
    63e8:	movw	r2, #0
    63ec:	mvn	r0, #99	; 0x63
    63f0:	movw	r3, #4290	; 0x10c2
    63f4:	movt	r1, #0
    63f8:	b	63d0 <coda_cursor_read_uint8_partial_array+0xc4>
    63fc:	bl	0 <coda_type_get_class_name>
    6400:	movw	r1, #0
    6404:	mov	r2, r0
    6408:	movt	r1, #0
    640c:	b	64c8 <coda_cursor_read_uint8_partial_array+0x1bc>
    6410:	add	r0, r8, r4
    6414:	cmp	r0, r3
    6418:	ble	6438 <coda_cursor_read_uint8_partial_array+0x12c>
    641c:	movw	r1, #0
    6420:	str	r3, [sp]
    6424:	mvn	r0, #106	; 0x6a
    6428:	mov	r2, r4
    642c:	mov	r3, r8
    6430:	movt	r1, #0
    6434:	b	63d4 <coda_cursor_read_uint8_partial_array+0xc8>
    6438:	ldr	r1, [r5, #40]	; 0x28
    643c:	ldr	r2, [r1, #8]
    6440:	cmp	r2, #2
    6444:	bne	6458 <coda_cursor_read_uint8_partial_array+0x14c>
    6448:	ldr	r0, [pc, #140]	; 64dc <coda_cursor_read_uint8_partial_array+0x1d0>
    644c:	ldr	r2, [pc, r0]
    6450:	bl	0 <__aeabi_read_tp>
    6454:	b	646c <coda_cursor_read_uint8_partial_array+0x160>
    6458:	bl	0 <__aeabi_read_tp>
    645c:	cmp	r2, #3
    6460:	bne	6488 <coda_cursor_read_uint8_partial_array+0x17c>
    6464:	ldr	r2, [pc, #108]	; 64d8 <coda_cursor_read_uint8_partial_array+0x1cc>
    6468:	ldr	r2, [pc, r2]
    646c:	ldr	r0, [r0, r2]
    6470:	cmp	r0, #0
    6474:	beq	6488 <coda_cursor_read_uint8_partial_array+0x17c>
    6478:	ldr	r2, [r1, #48]	; 0x30
    647c:	mov	r0, #9
    6480:	cmp	r2, #0
    6484:	bne	64b8 <coda_cursor_read_uint8_partial_array+0x1ac>
    6488:	ldr	r0, [r1, #12]
    648c:	cmp	r0, #1
    6490:	bne	64b8 <coda_cursor_read_uint8_partial_array+0x1ac>
    6494:	mov	r0, r7
    6498:	mov	r1, r4
    649c:	mov	r2, r8
    64a0:	mov	r3, r6
    64a4:	bl	64e0 <read_uint8_partial_array>
    64a8:	cmp	r0, #0
    64ac:	mvnne	r0, #0
    64b0:	sub	sp, fp, #24
    64b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    64b8:	bl	0 <coda_type_get_native_type_name>
    64bc:	movw	r1, #0
    64c0:	mov	r2, r0
    64c4:	movt	r1, #0
    64c8:	mvn	r0, #104	; 0x68
    64cc:	bl	0 <coda_set_error>
    64d0:	b	63d8 <coda_cursor_read_uint8_partial_array+0xcc>
    64d4:	.word	0x0000015c
    64d8:	.word	0x00000068
    64dc:	.word	0x00000088

000064e0 <read_uint8_partial_array>:
    64e0:	push	{fp, lr}
    64e4:	mov	fp, sp
    64e8:	ldr	ip, [r0, #4]
    64ec:	add	ip, r0, ip, lsl #4
    64f0:	ldr	ip, [ip, #-8]
    64f4:	ldr	ip, [ip]
    64f8:	sub	lr, ip, #100	; 0x64
    64fc:	cmp	lr, #3
    6500:	bhi	6524 <read_uint8_partial_array+0x44>
    6504:	add	ip, pc, #0
    6508:	ldr	pc, [ip, lr, lsl #2]
    650c:	.word	0x0000651c
    6510:	.word	0x00006544
    6514:	.word	0x0000653c
    6518:	.word	0x00006558
    651c:	pop	{fp, lr}
    6520:	b	0 <coda_mem_cursor_read_uint8_partial_array>
    6524:	cmp	ip, #1
    6528:	beq	6560 <read_uint8_partial_array+0x80>
    652c:	cmp	ip, #0
    6530:	bne	6568 <read_uint8_partial_array+0x88>
    6534:	pop	{fp, lr}
    6538:	b	0 <coda_ascii_cursor_read_uint8_partial_array>
    653c:	mvn	r0, #12
    6540:	b	6548 <read_uint8_partial_array+0x68>
    6544:	mvn	r0, #10
    6548:	mov	r1, #0
    654c:	bl	0 <coda_set_error>
    6550:	mvn	r0, #0
    6554:	pop	{fp, pc}
    6558:	pop	{fp, lr}
    655c:	b	0 <coda_cdf_cursor_read_uint8_partial_array>
    6560:	pop	{fp, lr}
    6564:	b	0 <coda_bin_cursor_read_uint8_partial_array>
    6568:	movw	r0, #0
    656c:	movw	r1, #0
    6570:	movw	r3, #0
    6574:	movw	r2, #1427	; 0x593
    6578:	movt	r0, #0
    657c:	movt	r1, #0
    6580:	movt	r3, #0
    6584:	bl	0 <__assert_fail>

00006588 <coda_cursor_read_int16_partial_array>:
    6588:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    658c:	add	fp, sp, #24
    6590:	sub	sp, sp, #8
    6594:	cmp	r0, #0
    6598:	beq	6638 <coda_cursor_read_int16_partial_array+0xb0>
    659c:	mov	r7, r0
    65a0:	ldr	r0, [r0, #4]
    65a4:	cmp	r0, #1
    65a8:	blt	6638 <coda_cursor_read_int16_partial_array+0xb0>
    65ac:	add	r0, r7, r0, lsl #4
    65b0:	ldr	r4, [r0, #-8]
    65b4:	cmp	r4, #0
    65b8:	beq	6638 <coda_cursor_read_int16_partial_array+0xb0>
    65bc:	mov	r5, r3
    65c0:	cmp	r3, #0
    65c4:	beq	6660 <coda_cursor_read_int16_partial_array+0xd8>
    65c8:	ldr	r0, [r4]
    65cc:	mov	r8, r2
    65d0:	mov	r6, r1
    65d4:	cmp	r0, #99	; 0x63
    65d8:	ldrhi	r4, [r4, #4]
    65dc:	ldr	r0, [r4, #8]
    65e0:	cmp	r0, #1
    65e4:	bne	6678 <coda_cursor_read_int16_partial_array+0xf0>
    65e8:	ldr	r0, [pc, #1008]	; 69e0 <coda_cursor_read_int16_partial_array+0x458>
    65ec:	ldr	r1, [pc, r0]
    65f0:	bl	0 <__aeabi_read_tp>
    65f4:	ldr	r0, [r0, r1]
    65f8:	cmp	r0, #0
    65fc:	beq	66bc <coda_cursor_read_int16_partial_array+0x134>
    6600:	add	r1, sp, #4
    6604:	mov	r0, r7
    6608:	bl	0 <coda_cursor_get_num_elements>
    660c:	cmp	r0, #0
    6610:	bne	6654 <coda_cursor_read_int16_partial_array+0xcc>
    6614:	ldr	r3, [sp, #4]
    6618:	cmp	r6, #0
    661c:	cmpge	r3, r6
    6620:	bgt	6694 <coda_cursor_read_int16_partial_array+0x10c>
    6624:	movw	r1, #0
    6628:	mvn	r0, #106	; 0x6a
    662c:	mov	r2, r6
    6630:	movt	r1, #0
    6634:	b	6650 <coda_cursor_read_int16_partial_array+0xc8>
    6638:	movw	r1, #0
    663c:	movw	r2, #0
    6640:	mvn	r0, #99	; 0x63
    6644:	movw	r3, #4374	; 0x1116
    6648:	movt	r1, #0
    664c:	movt	r2, #0
    6650:	bl	0 <coda_set_error>
    6654:	mvn	r0, #0
    6658:	sub	sp, fp, #24
    665c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6660:	movw	r1, #0
    6664:	movw	r2, #0
    6668:	mvn	r0, #99	; 0x63
    666c:	movw	r3, #4379	; 0x111b
    6670:	movt	r1, #0
    6674:	b	664c <coda_cursor_read_int16_partial_array+0xc4>
    6678:	bl	0 <coda_type_get_class_name>
    667c:	movw	r1, #0
    6680:	mov	r2, r0
    6684:	movt	r1, #0
    6688:	mvn	r0, #104	; 0x68
    668c:	bl	0 <coda_set_error>
    6690:	b	6654 <coda_cursor_read_int16_partial_array+0xcc>
    6694:	add	r0, r8, r6
    6698:	cmp	r0, r3
    669c:	ble	66bc <coda_cursor_read_int16_partial_array+0x134>
    66a0:	movw	r1, #0
    66a4:	str	r3, [sp]
    66a8:	mvn	r0, #106	; 0x6a
    66ac:	mov	r2, r6
    66b0:	mov	r3, r8
    66b4:	movt	r1, #0
    66b8:	b	6650 <coda_cursor_read_int16_partial_array+0xc8>
    66bc:	ldr	r1, [r4, #40]	; 0x28
    66c0:	ldr	r2, [r1, #8]
    66c4:	cmp	r2, #2
    66c8:	bne	66dc <coda_cursor_read_int16_partial_array+0x154>
    66cc:	ldr	r0, [pc, #788]	; 69e8 <coda_cursor_read_int16_partial_array+0x460>
    66d0:	ldr	r2, [pc, r0]
    66d4:	bl	0 <__aeabi_read_tp>
    66d8:	b	66f0 <coda_cursor_read_int16_partial_array+0x168>
    66dc:	bl	0 <__aeabi_read_tp>
    66e0:	cmp	r2, #3
    66e4:	bne	670c <coda_cursor_read_int16_partial_array+0x184>
    66e8:	ldr	r2, [pc, #756]	; 69e4 <coda_cursor_read_int16_partial_array+0x45c>
    66ec:	ldr	r2, [pc, r2]
    66f0:	ldr	r0, [r0, r2]
    66f4:	cmp	r0, #0
    66f8:	beq	670c <coda_cursor_read_int16_partial_array+0x184>
    66fc:	ldr	r2, [r1, #48]	; 0x30
    6700:	mov	r0, #9
    6704:	cmp	r2, #0
    6708:	bne	67a8 <coda_cursor_read_int16_partial_array+0x220>
    670c:	ldr	r0, [r1, #12]
    6710:	cmp	r0, #2
    6714:	beq	67bc <coda_cursor_read_int16_partial_array+0x234>
    6718:	cmp	r0, #1
    671c:	beq	67e8 <coda_cursor_read_int16_partial_array+0x260>
    6720:	cmp	r0, #0
    6724:	bne	67a8 <coda_cursor_read_int16_partial_array+0x220>
    6728:	mov	r0, r7
    672c:	mov	r1, r6
    6730:	mov	r2, r8
    6734:	mov	r3, r5
    6738:	bl	6258 <read_int8_partial_array>
    673c:	mov	r1, r0
    6740:	mvn	r0, #0
    6744:	cmp	r1, #0
    6748:	bne	691c <coda_cursor_read_int16_partial_array+0x394>
    674c:	cmp	r8, #1
    6750:	blt	6918 <coda_cursor_read_int16_partial_array+0x390>
    6754:	mvn	r1, r8
    6758:	mvn	r0, #1
    675c:	mvn	r3, #1
    6760:	cmn	r1, #2
    6764:	movgt	r0, r1
    6768:	add	r0, r0, r8
    676c:	add	r0, r0, #2
    6770:	cmp	r0, #8
    6774:	bcs	6924 <coda_cursor_read_int16_partial_array+0x39c>
    6778:	lsl	r0, r8, #1
    677c:	sub	r1, r5, #2
    6780:	add	r2, r8, #1
    6784:	add	r7, r1, r2
    6788:	sub	r2, r2, #1
    678c:	add	r3, r1, r0
    6790:	sub	r0, r0, #2
    6794:	ldrsb	r7, [r7]
    6798:	cmp	r2, #1
    679c:	strh	r7, [r3]
    67a0:	bgt	6784 <coda_cursor_read_int16_partial_array+0x1fc>
    67a4:	b	6918 <coda_cursor_read_int16_partial_array+0x390>
    67a8:	bl	0 <coda_type_get_native_type_name>
    67ac:	movw	r1, #0
    67b0:	mov	r2, r0
    67b4:	movt	r1, #0
    67b8:	b	6688 <coda_cursor_read_int16_partial_array+0x100>
    67bc:	mov	r0, r7
    67c0:	mov	r1, r6
    67c4:	mov	r2, r8
    67c8:	mov	r3, r5
    67cc:	bl	69ec <read_int16_partial_array>
    67d0:	mov	r1, r0
    67d4:	mvn	r0, #0
    67d8:	cmp	r1, #0
    67dc:	moveq	r0, #0
    67e0:	sub	sp, fp, #24
    67e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    67e8:	mov	r0, r7
    67ec:	mov	r1, r6
    67f0:	mov	r2, r8
    67f4:	mov	r3, r5
    67f8:	bl	64e0 <read_uint8_partial_array>
    67fc:	mov	r1, r0
    6800:	mvn	r0, #0
    6804:	cmp	r1, #0
    6808:	bne	691c <coda_cursor_read_int16_partial_array+0x394>
    680c:	cmp	r8, #1
    6810:	blt	6918 <coda_cursor_read_int16_partial_array+0x390>
    6814:	mvn	r1, r8
    6818:	mvn	r0, #1
    681c:	mvn	r3, #1
    6820:	cmn	r1, #2
    6824:	movgt	r0, r1
    6828:	add	r0, r0, r8
    682c:	add	r0, r0, #2
    6830:	cmp	r0, #8
    6834:	bcc	68f0 <coda_cursor_read_int16_partial_array+0x368>
    6838:	cmn	r1, #2
    683c:	sub	r2, r8, #1
    6840:	mov	r7, #0
    6844:	movgt	r3, r1
    6848:	add	r4, r5, r2, lsl #1
    684c:	add	r3, r3, r8
    6850:	add	r3, r3, #1
    6854:	adds	r6, r3, r3
    6858:	adc	r7, r7, #0
    685c:	cmp	r6, r4
    6860:	bhi	68f0 <coda_cursor_read_int16_partial_array+0x368>
    6864:	cmp	r7, #0
    6868:	bne	68f0 <coda_cursor_read_int16_partial_array+0x368>
    686c:	add	r2, r5, r2
    6870:	cmp	r3, r2
    6874:	bhi	68f0 <coda_cursor_read_int16_partial_array+0x368>
    6878:	mvn	r7, #1
    687c:	cmn	r1, #2
    6880:	add	r2, r5, r8
    6884:	add	r3, r5, r8, lsl #1
    6888:	movle	r1, r7
    688c:	sub	r7, r7, r1
    6890:	add	r7, r5, r7, lsl #1
    6894:	cmp	r2, r7
    6898:	bls	68ac <coda_cursor_read_int16_partial_array+0x324>
    689c:	sub	r1, r5, r1
    68a0:	sub	r1, r1, #2
    68a4:	cmp	r1, r3
    68a8:	bcc	68f0 <coda_cursor_read_int16_partial_array+0x368>
    68ac:	bic	r4, r0, #7
    68b0:	sub	r2, r2, #8
    68b4:	sub	r3, r3, #16
    68b8:	mvn	r7, #7
    68bc:	mvn	r6, #15
    68c0:	sub	r8, r8, r4
    68c4:	mov	r1, r4
    68c8:	vld1.8	{d16}, [r2], r7
    68cc:	subs	r1, r1, #8
    68d0:	vrev64.8	d16, d16
    68d4:	vmovl.u8	q8, d16
    68d8:	vrev64.16	q8, q8
    68dc:	vext.8	q8, q8, q8, #8
    68e0:	vst1.16	{d16-d17}, [r3], r6
    68e4:	bne	68c8 <coda_cursor_read_int16_partial_array+0x340>
    68e8:	cmp	r0, r4
    68ec:	beq	6918 <coda_cursor_read_int16_partial_array+0x390>
    68f0:	lsl	r0, r8, #1
    68f4:	sub	r1, r5, #2
    68f8:	add	r2, r8, #1
    68fc:	ldrb	r3, [r1, r2]
    6900:	sub	r2, r2, #1
    6904:	add	r7, r1, r0
    6908:	sub	r0, r0, #2
    690c:	cmp	r2, #1
    6910:	strh	r3, [r7]
    6914:	bgt	68fc <coda_cursor_read_int16_partial_array+0x374>
    6918:	mov	r0, #0
    691c:	sub	sp, fp, #24
    6920:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6924:	cmn	r1, #2
    6928:	sub	r2, r8, #1
    692c:	mov	r7, #0
    6930:	movgt	r3, r1
    6934:	add	r4, r5, r2, lsl #1
    6938:	add	r3, r3, r8
    693c:	add	r3, r3, #1
    6940:	adds	r6, r3, r3
    6944:	adc	r7, r7, #0
    6948:	cmp	r6, r4
    694c:	bhi	6778 <coda_cursor_read_int16_partial_array+0x1f0>
    6950:	cmp	r7, #0
    6954:	bne	6778 <coda_cursor_read_int16_partial_array+0x1f0>
    6958:	add	r2, r5, r2
    695c:	cmp	r3, r2
    6960:	bhi	6778 <coda_cursor_read_int16_partial_array+0x1f0>
    6964:	mvn	r7, #1
    6968:	cmn	r1, #2
    696c:	add	r2, r5, r8
    6970:	add	r3, r5, r8, lsl #1
    6974:	movle	r1, r7
    6978:	sub	r7, r7, r1
    697c:	add	r7, r5, r7, lsl #1
    6980:	cmp	r2, r7
    6984:	bls	6998 <coda_cursor_read_int16_partial_array+0x410>
    6988:	sub	r1, r5, r1
    698c:	sub	r1, r1, #2
    6990:	cmp	r1, r3
    6994:	bcc	6778 <coda_cursor_read_int16_partial_array+0x1f0>
    6998:	bic	r4, r0, #7
    699c:	sub	r2, r2, #8
    69a0:	sub	r3, r3, #16
    69a4:	mvn	r7, #7
    69a8:	mvn	r6, #15
    69ac:	sub	r8, r8, r4
    69b0:	mov	r1, r4
    69b4:	vld1.8	{d16}, [r2], r7
    69b8:	subs	r1, r1, #8
    69bc:	vrev64.8	d16, d16
    69c0:	vmovl.s8	q8, d16
    69c4:	vrev64.16	q8, q8
    69c8:	vext.8	q8, q8, q8, #8
    69cc:	vst1.16	{d16-d17}, [r3], r6
    69d0:	bne	69b4 <coda_cursor_read_int16_partial_array+0x42c>
    69d4:	cmp	r0, r4
    69d8:	bne	6778 <coda_cursor_read_int16_partial_array+0x1f0>
    69dc:	b	6918 <coda_cursor_read_int16_partial_array+0x390>
    69e0:	.word	0x000003ec
    69e4:	.word	0x000002f0
    69e8:	.word	0x00000310

000069ec <read_int16_partial_array>:
    69ec:	push	{fp, lr}
    69f0:	mov	fp, sp
    69f4:	ldr	ip, [r0, #4]
    69f8:	add	ip, r0, ip, lsl #4
    69fc:	ldr	ip, [ip, #-8]
    6a00:	ldr	ip, [ip]
    6a04:	sub	lr, ip, #100	; 0x64
    6a08:	cmp	lr, #4
    6a0c:	bhi	6a34 <read_int16_partial_array+0x48>
    6a10:	add	ip, pc, #0
    6a14:	ldr	pc, [ip, lr, lsl #2]
    6a18:	.word	0x00006a2c
    6a1c:	.word	0x00006a64
    6a20:	.word	0x00006a54
    6a24:	.word	0x00006a5c
    6a28:	.word	0x00006a4c
    6a2c:	pop	{fp, lr}
    6a30:	b	0 <coda_mem_cursor_read_int16_partial_array>
    6a34:	cmp	ip, #1
    6a38:	beq	6a78 <read_int16_partial_array+0x8c>
    6a3c:	cmp	ip, #0
    6a40:	bne	6a80 <read_int16_partial_array+0x94>
    6a44:	pop	{fp, lr}
    6a48:	b	0 <coda_ascii_cursor_read_int16_partial_array>
    6a4c:	pop	{fp, lr}
    6a50:	b	0 <coda_netcdf_cursor_read_int16_partial_array>
    6a54:	mvn	r0, #12
    6a58:	b	6a68 <read_int16_partial_array+0x7c>
    6a5c:	pop	{fp, lr}
    6a60:	b	0 <coda_cdf_cursor_read_int16_partial_array>
    6a64:	mvn	r0, #10
    6a68:	mov	r1, #0
    6a6c:	bl	0 <coda_set_error>
    6a70:	mvn	r0, #0
    6a74:	pop	{fp, pc}
    6a78:	pop	{fp, lr}
    6a7c:	b	0 <coda_bin_cursor_read_int16_partial_array>
    6a80:	movw	r0, #0
    6a84:	movw	r1, #0
    6a88:	movw	r3, #0
    6a8c:	movw	r2, #1463	; 0x5b7
    6a90:	movt	r0, #0
    6a94:	movt	r1, #0
    6a98:	movt	r3, #0
    6a9c:	bl	0 <__assert_fail>

00006aa0 <coda_cursor_read_uint16_partial_array>:
    6aa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6aa4:	add	fp, sp, #24
    6aa8:	sub	sp, sp, #8
    6aac:	cmp	r0, #0
    6ab0:	beq	6b50 <coda_cursor_read_uint16_partial_array+0xb0>
    6ab4:	mov	r7, r0
    6ab8:	ldr	r0, [r0, #4]
    6abc:	cmp	r0, #1
    6ac0:	blt	6b50 <coda_cursor_read_uint16_partial_array+0xb0>
    6ac4:	add	r0, r7, r0, lsl #4
    6ac8:	ldr	r4, [r0, #-8]
    6acc:	cmp	r4, #0
    6ad0:	beq	6b50 <coda_cursor_read_uint16_partial_array+0xb0>
    6ad4:	mov	r5, r3
    6ad8:	cmp	r3, #0
    6adc:	beq	6b78 <coda_cursor_read_uint16_partial_array+0xd8>
    6ae0:	ldr	r0, [r4]
    6ae4:	mov	r8, r2
    6ae8:	mov	r6, r1
    6aec:	cmp	r0, #99	; 0x63
    6af0:	ldrhi	r4, [r4, #4]
    6af4:	ldr	r0, [r4, #8]
    6af8:	cmp	r0, #1
    6afc:	bne	6b90 <coda_cursor_read_uint16_partial_array+0xf0>
    6b00:	ldr	r0, [pc, #688]	; 6db8 <coda_cursor_read_uint16_partial_array+0x318>
    6b04:	ldr	r1, [pc, r0]
    6b08:	bl	0 <__aeabi_read_tp>
    6b0c:	ldr	r0, [r0, r1]
    6b10:	cmp	r0, #0
    6b14:	beq	6bd4 <coda_cursor_read_uint16_partial_array+0x134>
    6b18:	add	r1, sp, #4
    6b1c:	mov	r0, r7
    6b20:	bl	0 <coda_cursor_get_num_elements>
    6b24:	cmp	r0, #0
    6b28:	bne	6b6c <coda_cursor_read_uint16_partial_array+0xcc>
    6b2c:	ldr	r3, [sp, #4]
    6b30:	cmp	r6, #0
    6b34:	cmpge	r3, r6
    6b38:	bgt	6bac <coda_cursor_read_uint16_partial_array+0x10c>
    6b3c:	movw	r1, #0
    6b40:	mvn	r0, #106	; 0x6a
    6b44:	mov	r2, r6
    6b48:	movt	r1, #0
    6b4c:	b	6b68 <coda_cursor_read_uint16_partial_array+0xc8>
    6b50:	movw	r1, #0
    6b54:	movw	r2, #0
    6b58:	mvn	r0, #99	; 0x63
    6b5c:	movw	r3, #4483	; 0x1183
    6b60:	movt	r1, #0
    6b64:	movt	r2, #0
    6b68:	bl	0 <coda_set_error>
    6b6c:	mvn	r0, #0
    6b70:	sub	sp, fp, #24
    6b74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6b78:	movw	r1, #0
    6b7c:	movw	r2, #0
    6b80:	mvn	r0, #99	; 0x63
    6b84:	movw	r3, #4488	; 0x1188
    6b88:	movt	r1, #0
    6b8c:	b	6b64 <coda_cursor_read_uint16_partial_array+0xc4>
    6b90:	bl	0 <coda_type_get_class_name>
    6b94:	movw	r1, #0
    6b98:	mov	r2, r0
    6b9c:	movt	r1, #0
    6ba0:	mvn	r0, #104	; 0x68
    6ba4:	bl	0 <coda_set_error>
    6ba8:	b	6b6c <coda_cursor_read_uint16_partial_array+0xcc>
    6bac:	add	r0, r8, r6
    6bb0:	cmp	r0, r3
    6bb4:	ble	6bd4 <coda_cursor_read_uint16_partial_array+0x134>
    6bb8:	movw	r1, #0
    6bbc:	str	r3, [sp]
    6bc0:	mvn	r0, #106	; 0x6a
    6bc4:	mov	r2, r6
    6bc8:	mov	r3, r8
    6bcc:	movt	r1, #0
    6bd0:	b	6b68 <coda_cursor_read_uint16_partial_array+0xc8>
    6bd4:	ldr	r1, [r4, #40]	; 0x28
    6bd8:	ldr	r2, [r1, #8]
    6bdc:	cmp	r2, #2
    6be0:	bne	6bf4 <coda_cursor_read_uint16_partial_array+0x154>
    6be4:	ldr	r0, [pc, #468]	; 6dc0 <coda_cursor_read_uint16_partial_array+0x320>
    6be8:	ldr	r2, [pc, r0]
    6bec:	bl	0 <__aeabi_read_tp>
    6bf0:	b	6c08 <coda_cursor_read_uint16_partial_array+0x168>
    6bf4:	bl	0 <__aeabi_read_tp>
    6bf8:	cmp	r2, #3
    6bfc:	bne	6c24 <coda_cursor_read_uint16_partial_array+0x184>
    6c00:	ldr	r2, [pc, #436]	; 6dbc <coda_cursor_read_uint16_partial_array+0x31c>
    6c04:	ldr	r2, [pc, r2]
    6c08:	ldr	r0, [r0, r2]
    6c0c:	cmp	r0, #0
    6c10:	beq	6c24 <coda_cursor_read_uint16_partial_array+0x184>
    6c14:	ldr	r2, [r1, #48]	; 0x30
    6c18:	mov	r0, #9
    6c1c:	cmp	r2, #0
    6c20:	bne	6cbc <coda_cursor_read_uint16_partial_array+0x21c>
    6c24:	ldr	r0, [r1, #12]
    6c28:	cmp	r0, #3
    6c2c:	beq	6cd0 <coda_cursor_read_uint16_partial_array+0x230>
    6c30:	cmp	r0, #1
    6c34:	bne	6cbc <coda_cursor_read_uint16_partial_array+0x21c>
    6c38:	mov	r0, r7
    6c3c:	mov	r1, r6
    6c40:	mov	r2, r8
    6c44:	mov	r3, r5
    6c48:	bl	64e0 <read_uint8_partial_array>
    6c4c:	mov	r1, r0
    6c50:	mvn	r0, #0
    6c54:	cmp	r1, #0
    6c58:	bne	6cf4 <coda_cursor_read_uint16_partial_array+0x254>
    6c5c:	cmp	r8, #1
    6c60:	blt	6cb0 <coda_cursor_read_uint16_partial_array+0x210>
    6c64:	mvn	r1, r8
    6c68:	mvn	r0, #1
    6c6c:	mvn	r3, #1
    6c70:	cmn	r1, #2
    6c74:	movgt	r0, r1
    6c78:	add	r0, r0, r8
    6c7c:	add	r0, r0, #2
    6c80:	cmp	r0, #8
    6c84:	bcs	6cfc <coda_cursor_read_uint16_partial_array+0x25c>
    6c88:	lsl	r0, r8, #1
    6c8c:	sub	r1, r5, #2
    6c90:	add	r2, r8, #1
    6c94:	ldrb	r3, [r1, r2]
    6c98:	sub	r2, r2, #1
    6c9c:	add	r7, r1, r0
    6ca0:	sub	r0, r0, #2
    6ca4:	cmp	r2, #1
    6ca8:	strh	r3, [r7]
    6cac:	bgt	6c94 <coda_cursor_read_uint16_partial_array+0x1f4>
    6cb0:	mov	r0, #0
    6cb4:	sub	sp, fp, #24
    6cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6cbc:	bl	0 <coda_type_get_native_type_name>
    6cc0:	movw	r1, #0
    6cc4:	mov	r2, r0
    6cc8:	movt	r1, #0
    6ccc:	b	6ba0 <coda_cursor_read_uint16_partial_array+0x100>
    6cd0:	mov	r0, r7
    6cd4:	mov	r1, r6
    6cd8:	mov	r2, r8
    6cdc:	mov	r3, r5
    6ce0:	bl	6dc4 <read_uint16_partial_array>
    6ce4:	mov	r1, r0
    6ce8:	mvn	r0, #0
    6cec:	cmp	r1, #0
    6cf0:	moveq	r0, #0
    6cf4:	sub	sp, fp, #24
    6cf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6cfc:	cmn	r1, #2
    6d00:	sub	r2, r8, #1
    6d04:	mov	r7, #0
    6d08:	movgt	r3, r1
    6d0c:	add	r4, r5, r2, lsl #1
    6d10:	add	r3, r3, r8
    6d14:	add	r3, r3, #1
    6d18:	adds	r6, r3, r3
    6d1c:	adc	r7, r7, #0
    6d20:	cmp	r6, r4
    6d24:	bhi	6c88 <coda_cursor_read_uint16_partial_array+0x1e8>
    6d28:	cmp	r7, #0
    6d2c:	bne	6c88 <coda_cursor_read_uint16_partial_array+0x1e8>
    6d30:	add	r2, r5, r2
    6d34:	cmp	r3, r2
    6d38:	bhi	6c88 <coda_cursor_read_uint16_partial_array+0x1e8>
    6d3c:	mvn	r7, #1
    6d40:	cmn	r1, #2
    6d44:	add	r2, r5, r8
    6d48:	add	r3, r5, r8, lsl #1
    6d4c:	movle	r1, r7
    6d50:	sub	r7, r7, r1
    6d54:	add	r7, r5, r7, lsl #1
    6d58:	cmp	r2, r7
    6d5c:	bls	6d70 <coda_cursor_read_uint16_partial_array+0x2d0>
    6d60:	sub	r1, r5, r1
    6d64:	sub	r1, r1, #2
    6d68:	cmp	r1, r3
    6d6c:	bcc	6c88 <coda_cursor_read_uint16_partial_array+0x1e8>
    6d70:	bic	r4, r0, #7
    6d74:	sub	r2, r2, #8
    6d78:	sub	r3, r3, #16
    6d7c:	mvn	r7, #7
    6d80:	mvn	r6, #15
    6d84:	sub	r8, r8, r4
    6d88:	mov	r1, r4
    6d8c:	vld1.8	{d16}, [r2], r7
    6d90:	subs	r1, r1, #8
    6d94:	vrev64.8	d16, d16
    6d98:	vmovl.u8	q8, d16
    6d9c:	vrev64.16	q8, q8
    6da0:	vext.8	q8, q8, q8, #8
    6da4:	vst1.16	{d16-d17}, [r3], r6
    6da8:	bne	6d8c <coda_cursor_read_uint16_partial_array+0x2ec>
    6dac:	cmp	r0, r4
    6db0:	bne	6c88 <coda_cursor_read_uint16_partial_array+0x1e8>
    6db4:	b	6cb0 <coda_cursor_read_uint16_partial_array+0x210>
    6db8:	.word	0x000002ac
    6dbc:	.word	0x000001b0
    6dc0:	.word	0x000001d0

00006dc4 <read_uint16_partial_array>:
    6dc4:	push	{fp, lr}
    6dc8:	mov	fp, sp
    6dcc:	ldr	ip, [r0, #4]
    6dd0:	add	ip, r0, ip, lsl #4
    6dd4:	ldr	ip, [ip, #-8]
    6dd8:	ldr	ip, [ip]
    6ddc:	sub	lr, ip, #100	; 0x64
    6de0:	cmp	lr, #3
    6de4:	bhi	6e08 <read_uint16_partial_array+0x44>
    6de8:	add	ip, pc, #0
    6dec:	ldr	pc, [ip, lr, lsl #2]
    6df0:	.word	0x00006e00
    6df4:	.word	0x00006e28
    6df8:	.word	0x00006e20
    6dfc:	.word	0x00006e3c
    6e00:	pop	{fp, lr}
    6e04:	b	0 <coda_mem_cursor_read_uint16_partial_array>
    6e08:	cmp	ip, #1
    6e0c:	beq	6e44 <read_uint16_partial_array+0x80>
    6e10:	cmp	ip, #0
    6e14:	bne	6e4c <read_uint16_partial_array+0x88>
    6e18:	pop	{fp, lr}
    6e1c:	b	0 <coda_ascii_cursor_read_uint16_partial_array>
    6e20:	mvn	r0, #12
    6e24:	b	6e2c <read_uint16_partial_array+0x68>
    6e28:	mvn	r0, #10
    6e2c:	mov	r1, #0
    6e30:	bl	0 <coda_set_error>
    6e34:	mvn	r0, #0
    6e38:	pop	{fp, pc}
    6e3c:	pop	{fp, lr}
    6e40:	b	0 <coda_cdf_cursor_read_uint16_partial_array>
    6e44:	pop	{fp, lr}
    6e48:	b	0 <coda_bin_cursor_read_uint16_partial_array>
    6e4c:	movw	r0, #0
    6e50:	movw	r1, #0
    6e54:	movw	r3, #0
    6e58:	movw	r2, #1498	; 0x5da
    6e5c:	movt	r0, #0
    6e60:	movt	r1, #0
    6e64:	movt	r3, #0
    6e68:	bl	0 <__assert_fail>

00006e6c <coda_cursor_read_int32_partial_array>:
    6e6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6e70:	add	fp, sp, #24
    6e74:	sub	sp, sp, #16
    6e78:	cmp	r0, #0
    6e7c:	beq	6f1c <coda_cursor_read_int32_partial_array+0xb0>
    6e80:	mov	r7, r0
    6e84:	ldr	r0, [r0, #4]
    6e88:	cmp	r0, #1
    6e8c:	blt	6f1c <coda_cursor_read_int32_partial_array+0xb0>
    6e90:	add	r0, r7, r0, lsl #4
    6e94:	ldr	r5, [r0, #-8]
    6e98:	cmp	r5, #0
    6e9c:	beq	6f1c <coda_cursor_read_int32_partial_array+0xb0>
    6ea0:	mov	r4, r3
    6ea4:	cmp	r3, #0
    6ea8:	beq	6f44 <coda_cursor_read_int32_partial_array+0xd8>
    6eac:	ldr	r0, [r5]
    6eb0:	mov	r8, r2
    6eb4:	mov	r6, r1
    6eb8:	cmp	r0, #99	; 0x63
    6ebc:	ldrhi	r5, [r5, #4]
    6ec0:	ldr	r0, [r5, #8]
    6ec4:	cmp	r0, #1
    6ec8:	bne	6f5c <coda_cursor_read_int32_partial_array+0xf0>
    6ecc:	ldr	r0, [pc, #1456]	; 7484 <coda_cursor_read_int32_partial_array+0x618>
    6ed0:	ldr	r1, [pc, r0]
    6ed4:	bl	0 <__aeabi_read_tp>
    6ed8:	ldr	r0, [r0, r1]
    6edc:	cmp	r0, #0
    6ee0:	beq	6fa0 <coda_cursor_read_int32_partial_array+0x134>
    6ee4:	add	r1, sp, #12
    6ee8:	mov	r0, r7
    6eec:	bl	0 <coda_cursor_get_num_elements>
    6ef0:	cmp	r0, #0
    6ef4:	bne	6f38 <coda_cursor_read_int32_partial_array+0xcc>
    6ef8:	ldr	r3, [sp, #12]
    6efc:	cmp	r6, #0
    6f00:	cmpge	r3, r6
    6f04:	bgt	6f78 <coda_cursor_read_int32_partial_array+0x10c>
    6f08:	movw	r1, #0
    6f0c:	mvn	r0, #106	; 0x6a
    6f10:	mov	r2, r6
    6f14:	movt	r1, #0
    6f18:	b	6f34 <coda_cursor_read_int32_partial_array+0xc8>
    6f1c:	movw	r1, #0
    6f20:	movw	r2, #0
    6f24:	mvn	r0, #99	; 0x63
    6f28:	movw	r3, #4584	; 0x11e8
    6f2c:	movt	r1, #0
    6f30:	movt	r2, #0
    6f34:	bl	0 <coda_set_error>
    6f38:	mvn	r0, #0
    6f3c:	sub	sp, fp, #24
    6f40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6f44:	movw	r1, #0
    6f48:	movw	r2, #0
    6f4c:	mvn	r0, #99	; 0x63
    6f50:	movw	r3, #4589	; 0x11ed
    6f54:	movt	r1, #0
    6f58:	b	6f30 <coda_cursor_read_int32_partial_array+0xc4>
    6f5c:	bl	0 <coda_type_get_class_name>
    6f60:	movw	r1, #0
    6f64:	mov	r2, r0
    6f68:	movt	r1, #0
    6f6c:	mvn	r0, #104	; 0x68
    6f70:	bl	0 <coda_set_error>
    6f74:	b	6f38 <coda_cursor_read_int32_partial_array+0xcc>
    6f78:	add	r0, r8, r6
    6f7c:	cmp	r0, r3
    6f80:	ble	6fa0 <coda_cursor_read_int32_partial_array+0x134>
    6f84:	movw	r1, #0
    6f88:	str	r3, [sp]
    6f8c:	mvn	r0, #106	; 0x6a
    6f90:	mov	r2, r6
    6f94:	mov	r3, r8
    6f98:	movt	r1, #0
    6f9c:	b	6f34 <coda_cursor_read_int32_partial_array+0xc8>
    6fa0:	ldr	r1, [r5, #40]	; 0x28
    6fa4:	ldr	r2, [r1, #8]
    6fa8:	cmp	r2, #2
    6fac:	bne	6fc0 <coda_cursor_read_int32_partial_array+0x154>
    6fb0:	ldr	r0, [pc, #1236]	; 748c <coda_cursor_read_int32_partial_array+0x620>
    6fb4:	ldr	r2, [pc, r0]
    6fb8:	bl	0 <__aeabi_read_tp>
    6fbc:	b	6fd4 <coda_cursor_read_int32_partial_array+0x168>
    6fc0:	bl	0 <__aeabi_read_tp>
    6fc4:	cmp	r2, #3
    6fc8:	bne	6ff0 <coda_cursor_read_int32_partial_array+0x184>
    6fcc:	ldr	r2, [pc, #1204]	; 7488 <coda_cursor_read_int32_partial_array+0x61c>
    6fd0:	ldr	r2, [pc, r2]
    6fd4:	ldr	r0, [r0, r2]
    6fd8:	cmp	r0, #0
    6fdc:	beq	6ff0 <coda_cursor_read_int32_partial_array+0x184>
    6fe0:	ldr	r2, [r1, #48]	; 0x30
    6fe4:	mov	r0, #9
    6fe8:	cmp	r2, #0
    6fec:	bne	7090 <coda_cursor_read_int32_partial_array+0x224>
    6ff0:	ldr	r0, [r1, #12]
    6ff4:	cmp	r0, #4
    6ff8:	bhi	7090 <coda_cursor_read_int32_partial_array+0x224>
    6ffc:	add	r1, pc, #0
    7000:	ldr	pc, [r1, r0, lsl #2]
    7004:	.word	0x00007018
    7008:	.word	0x000070a4
    700c:	.word	0x00007118
    7010:	.word	0x0000716c
    7014:	.word	0x000071c0
    7018:	mov	r0, r7
    701c:	mov	r1, r6
    7020:	mov	r2, r8
    7024:	mov	r3, r4
    7028:	bl	6258 <read_int8_partial_array>
    702c:	mov	r1, r0
    7030:	mvn	r0, #0
    7034:	cmp	r1, #0
    7038:	bne	72d4 <coda_cursor_read_int32_partial_array+0x468>
    703c:	cmp	r8, #1
    7040:	blt	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7044:	mvn	r1, r8
    7048:	mvn	r0, #1
    704c:	mvn	r3, #1
    7050:	cmn	r1, #2
    7054:	movgt	r0, r1
    7058:	add	r0, r0, r8
    705c:	add	r0, r0, #2
    7060:	cmp	r0, #4
    7064:	bcs	72dc <coda_cursor_read_int32_partial_array+0x470>
    7068:	sub	r0, r8, #1
    706c:	add	r1, r4, r0
    7070:	ldrsb	r1, [r1]
    7074:	str	r1, [r4, r0, lsl #2]
    7078:	sub	r1, r0, #1
    707c:	add	r0, r0, #1
    7080:	cmp	r0, #1
    7084:	mov	r0, r1
    7088:	bgt	706c <coda_cursor_read_int32_partial_array+0x200>
    708c:	b	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7090:	bl	0 <coda_type_get_native_type_name>
    7094:	movw	r1, #0
    7098:	mov	r2, r0
    709c:	movt	r1, #0
    70a0:	b	6f6c <coda_cursor_read_int32_partial_array+0x100>
    70a4:	mov	r0, r7
    70a8:	mov	r1, r6
    70ac:	mov	r2, r8
    70b0:	mov	r3, r4
    70b4:	bl	64e0 <read_uint8_partial_array>
    70b8:	mov	r1, r0
    70bc:	mvn	r0, #0
    70c0:	cmp	r1, #0
    70c4:	bne	72d4 <coda_cursor_read_int32_partial_array+0x468>
    70c8:	cmp	r8, #1
    70cc:	blt	72d0 <coda_cursor_read_int32_partial_array+0x464>
    70d0:	mvn	r1, r8
    70d4:	mvn	r0, #1
    70d8:	mvn	r3, #1
    70dc:	cmn	r1, #2
    70e0:	movgt	r0, r1
    70e4:	add	r0, r0, r8
    70e8:	add	r0, r0, #2
    70ec:	cmp	r0, #4
    70f0:	bcs	73b4 <coda_cursor_read_int32_partial_array+0x548>
    70f4:	sub	r0, r8, #1
    70f8:	ldrb	r1, [r4, r0]
    70fc:	str	r1, [r4, r0, lsl #2]
    7100:	sub	r1, r0, #1
    7104:	add	r0, r0, #1
    7108:	cmp	r0, #1
    710c:	mov	r0, r1
    7110:	bgt	70f8 <coda_cursor_read_int32_partial_array+0x28c>
    7114:	b	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7118:	mov	r0, r7
    711c:	mov	r1, r6
    7120:	mov	r2, r8
    7124:	mov	r3, r4
    7128:	bl	69ec <read_int16_partial_array>
    712c:	mov	r1, r0
    7130:	mvn	r0, #0
    7134:	cmp	r1, #0
    7138:	bne	72d4 <coda_cursor_read_int32_partial_array+0x468>
    713c:	cmp	r8, #1
    7140:	blt	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7144:	mvn	r0, r8
    7148:	mvn	ip, #1
    714c:	cmn	r0, #2
    7150:	movle	r0, ip
    7154:	add	r0, r0, r8
    7158:	add	r2, r0, #2
    715c:	cmp	r2, #4
    7160:	bcs	71ec <coda_cursor_read_int32_partial_array+0x380>
    7164:	mov	r1, r8
    7168:	b	7238 <coda_cursor_read_int32_partial_array+0x3cc>
    716c:	mov	r0, r7
    7170:	mov	r1, r6
    7174:	mov	r2, r8
    7178:	mov	r3, r4
    717c:	bl	6dc4 <read_uint16_partial_array>
    7180:	mov	r1, r0
    7184:	mvn	r0, #0
    7188:	cmp	r1, #0
    718c:	bne	72d4 <coda_cursor_read_int32_partial_array+0x468>
    7190:	cmp	r8, #1
    7194:	blt	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7198:	mvn	r0, r8
    719c:	mvn	ip, #1
    71a0:	cmn	r0, #2
    71a4:	movle	r0, ip
    71a8:	add	r0, r0, r8
    71ac:	add	r2, r0, #2
    71b0:	cmp	r2, #4
    71b4:	bcs	7260 <coda_cursor_read_int32_partial_array+0x3f4>
    71b8:	mov	r1, r8
    71bc:	b	72ac <coda_cursor_read_int32_partial_array+0x440>
    71c0:	mov	r0, r7
    71c4:	mov	r1, r6
    71c8:	mov	r2, r8
    71cc:	mov	r3, r4
    71d0:	bl	7490 <read_int32_partial_array>
    71d4:	mov	r1, r0
    71d8:	mvn	r0, #0
    71dc:	cmp	r1, #0
    71e0:	moveq	r0, #0
    71e4:	sub	sp, fp, #24
    71e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    71ec:	add	r0, r4, r8, lsl #1
    71f0:	bic	lr, r2, #3
    71f4:	mvn	r5, #7
    71f8:	sub	r7, r0, #8
    71fc:	add	r0, r4, r8, lsl #2
    7200:	sub	r1, r8, lr
    7204:	mov	r3, lr
    7208:	sub	r6, r0, #16
    720c:	mvn	r0, #15
    7210:	vld1.16	{d16}, [r7], r5
    7214:	subs	r3, r3, #4
    7218:	vrev64.16	d16, d16
    721c:	vmovl.s16	q8, d16
    7220:	vrev64.32	q8, q8
    7224:	vext.8	q8, q8, q8, #8
    7228:	vst1.32	{d16-d17}, [r6], r0
    722c:	bne	7210 <coda_cursor_read_int32_partial_array+0x3a4>
    7230:	cmp	r2, lr
    7234:	beq	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7238:	add	r0, ip, r1, lsl #1
    723c:	add	r1, r1, #1
    7240:	add	r2, r4, r0
    7244:	sub	r1, r1, #1
    7248:	ldrsh	r2, [r2]
    724c:	cmp	r1, #1
    7250:	str	r2, [r4, r0, lsl #1]
    7254:	sub	r0, r0, #2
    7258:	bgt	7240 <coda_cursor_read_int32_partial_array+0x3d4>
    725c:	b	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7260:	add	r0, r4, r8, lsl #1
    7264:	bic	lr, r2, #3
    7268:	mvn	r5, #7
    726c:	sub	r7, r0, #8
    7270:	add	r0, r4, r8, lsl #2
    7274:	sub	r1, r8, lr
    7278:	mov	r3, lr
    727c:	sub	r6, r0, #16
    7280:	mvn	r0, #15
    7284:	vld1.16	{d16}, [r7], r5
    7288:	subs	r3, r3, #4
    728c:	vrev64.16	d16, d16
    7290:	vmovl.u16	q8, d16
    7294:	vrev64.32	q8, q8
    7298:	vext.8	q8, q8, q8, #8
    729c:	vst1.32	{d16-d17}, [r6], r0
    72a0:	bne	7284 <coda_cursor_read_int32_partial_array+0x418>
    72a4:	cmp	r2, lr
    72a8:	beq	72d0 <coda_cursor_read_int32_partial_array+0x464>
    72ac:	add	r0, ip, r1, lsl #1
    72b0:	add	r1, r1, #1
    72b4:	add	r2, r4, r0
    72b8:	sub	r1, r1, #1
    72bc:	ldrh	r2, [r2]
    72c0:	cmp	r1, #1
    72c4:	str	r2, [r4, r0, lsl #1]
    72c8:	sub	r0, r0, #2
    72cc:	bgt	72b4 <coda_cursor_read_int32_partial_array+0x448>
    72d0:	mov	r0, #0
    72d4:	sub	sp, fp, #24
    72d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    72dc:	cmn	r1, #2
    72e0:	mov	r7, #4
    72e4:	sub	r2, r8, #1
    72e8:	movgt	r3, r1
    72ec:	add	r6, r4, r2, lsl #2
    72f0:	add	r3, r3, r8
    72f4:	add	r3, r3, #1
    72f8:	umull	r5, r7, r3, r7
    72fc:	cmp	r7, #0
    7300:	movwne	r7, #1
    7304:	cmp	r5, r6
    7308:	bhi	7068 <coda_cursor_read_int32_partial_array+0x1fc>
    730c:	cmp	r7, #0
    7310:	bne	7068 <coda_cursor_read_int32_partial_array+0x1fc>
    7314:	add	r2, r4, r2
    7318:	cmp	r3, r2
    731c:	bhi	7068 <coda_cursor_read_int32_partial_array+0x1fc>
    7320:	mvn	r2, #1
    7324:	cmn	r1, #2
    7328:	add	r3, r4, r8, lsl #2
    732c:	movle	r1, r2
    7330:	sub	r2, r2, r1
    7334:	add	r1, r4, r8
    7338:	add	r7, r4, r2, lsl #2
    733c:	cmp	r1, r7
    7340:	bls	7350 <coda_cursor_read_int32_partial_array+0x4e4>
    7344:	add	r2, r4, r2
    7348:	cmp	r2, r3
    734c:	bcc	7068 <coda_cursor_read_int32_partial_array+0x1fc>
    7350:	vmov.i32	q8, #24	; 0x00000018
    7354:	bic	ip, r0, #3
    7358:	sub	r2, r1, #4
    735c:	sub	r3, r3, #16
    7360:	add	r7, sp, #4
    7364:	mvn	r6, #15
    7368:	sub	r8, r8, ip
    736c:	vneg.s32	q8, q8
    7370:	mov	r1, ip
    7374:	ldr	r5, [r2], #-4
    7378:	subs	r1, r1, #4
    737c:	str	r5, [sp, #4]
    7380:	vld1.32	{d18[0]}, [r7 :32]
    7384:	vmovl.u8	q9, d18
    7388:	vrev64.16	d18, d18
    738c:	vmovl.u16	q9, d18
    7390:	vshl.s32	q9, q9, #24
    7394:	vshl.s32	q9, q9, q8
    7398:	vrev64.32	q9, q9
    739c:	vext.8	q9, q9, q9, #8
    73a0:	vst1.32	{d18-d19}, [r3], r6
    73a4:	bne	7374 <coda_cursor_read_int32_partial_array+0x508>
    73a8:	cmp	r0, ip
    73ac:	bne	7068 <coda_cursor_read_int32_partial_array+0x1fc>
    73b0:	b	72d0 <coda_cursor_read_int32_partial_array+0x464>
    73b4:	cmn	r1, #2
    73b8:	mov	r7, #4
    73bc:	sub	r2, r8, #1
    73c0:	movgt	r3, r1
    73c4:	add	r6, r4, r2, lsl #2
    73c8:	add	r3, r3, r8
    73cc:	add	r3, r3, #1
    73d0:	umull	r5, r7, r3, r7
    73d4:	cmp	r7, #0
    73d8:	movwne	r7, #1
    73dc:	cmp	r5, r6
    73e0:	bhi	70f4 <coda_cursor_read_int32_partial_array+0x288>
    73e4:	cmp	r7, #0
    73e8:	bne	70f4 <coda_cursor_read_int32_partial_array+0x288>
    73ec:	add	r2, r4, r2
    73f0:	cmp	r3, r2
    73f4:	bhi	70f4 <coda_cursor_read_int32_partial_array+0x288>
    73f8:	mvn	r2, #1
    73fc:	cmn	r1, #2
    7400:	add	r3, r4, r8, lsl #2
    7404:	movle	r1, r2
    7408:	sub	r2, r2, r1
    740c:	add	r1, r4, r8
    7410:	add	r7, r4, r2, lsl #2
    7414:	cmp	r1, r7
    7418:	bls	7428 <coda_cursor_read_int32_partial_array+0x5bc>
    741c:	add	r2, r4, r2
    7420:	cmp	r2, r3
    7424:	bcc	70f4 <coda_cursor_read_int32_partial_array+0x288>
    7428:	bic	ip, r0, #3
    742c:	sub	r2, r1, #4
    7430:	sub	r3, r3, #16
    7434:	add	r7, sp, #8
    7438:	vmov.i32	q8, #255	; 0x000000ff
    743c:	mvn	r6, #15
    7440:	sub	r8, r8, ip
    7444:	mov	r1, ip
    7448:	ldr	r5, [r2], #-4
    744c:	subs	r1, r1, #4
    7450:	str	r5, [sp, #8]
    7454:	vld1.32	{d18[0]}, [r7 :32]
    7458:	vmovl.u8	q9, d18
    745c:	vrev64.16	d18, d18
    7460:	vmovl.u16	q9, d18
    7464:	vand	q9, q9, q8
    7468:	vrev64.32	q9, q9
    746c:	vext.8	q9, q9, q9, #8
    7470:	vst1.32	{d18-d19}, [r3], r6
    7474:	bne	7448 <coda_cursor_read_int32_partial_array+0x5dc>
    7478:	cmp	r0, ip
    747c:	bne	70f4 <coda_cursor_read_int32_partial_array+0x288>
    7480:	b	72d0 <coda_cursor_read_int32_partial_array+0x464>
    7484:	.word	0x000005ac
    7488:	.word	0x000004b0
    748c:	.word	0x000004d0

00007490 <read_int32_partial_array>:
    7490:	push	{fp, lr}
    7494:	mov	fp, sp
    7498:	ldr	ip, [r0, #4]
    749c:	add	ip, r0, ip, lsl #4
    74a0:	ldr	ip, [ip, #-8]
    74a4:	ldr	ip, [ip]
    74a8:	sub	lr, ip, #100	; 0x64
    74ac:	cmp	lr, #4
    74b0:	bhi	74d8 <read_int32_partial_array+0x48>
    74b4:	add	ip, pc, #0
    74b8:	ldr	pc, [ip, lr, lsl #2]
    74bc:	.word	0x000074d0
    74c0:	.word	0x00007508
    74c4:	.word	0x000074f8
    74c8:	.word	0x00007500
    74cc:	.word	0x000074f0
    74d0:	pop	{fp, lr}
    74d4:	b	0 <coda_mem_cursor_read_int32_partial_array>
    74d8:	cmp	ip, #1
    74dc:	beq	751c <read_int32_partial_array+0x8c>
    74e0:	cmp	ip, #0
    74e4:	bne	7524 <read_int32_partial_array+0x94>
    74e8:	pop	{fp, lr}
    74ec:	b	0 <coda_ascii_cursor_read_int32_partial_array>
    74f0:	pop	{fp, lr}
    74f4:	b	0 <coda_netcdf_cursor_read_int32_partial_array>
    74f8:	mvn	r0, #12
    74fc:	b	750c <read_int32_partial_array+0x7c>
    7500:	pop	{fp, lr}
    7504:	b	0 <coda_cdf_cursor_read_int32_partial_array>
    7508:	mvn	r0, #10
    750c:	mov	r1, #0
    7510:	bl	0 <coda_set_error>
    7514:	mvn	r0, #0
    7518:	pop	{fp, pc}
    751c:	pop	{fp, lr}
    7520:	b	0 <coda_bin_cursor_read_int32_partial_array>
    7524:	movw	r0, #0
    7528:	movw	r1, #0
    752c:	movw	r3, #0
    7530:	movw	r2, #1534	; 0x5fe
    7534:	movt	r0, #0
    7538:	movt	r1, #0
    753c:	movt	r3, #0
    7540:	bl	0 <__assert_fail>

00007544 <coda_cursor_read_uint32_partial_array>:
    7544:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7548:	add	fp, sp, #24
    754c:	sub	sp, sp, #16
    7550:	cmp	r0, #0
    7554:	beq	75f4 <coda_cursor_read_uint32_partial_array+0xb0>
    7558:	mov	r7, r0
    755c:	ldr	r0, [r0, #4]
    7560:	cmp	r0, #1
    7564:	blt	75f4 <coda_cursor_read_uint32_partial_array+0xb0>
    7568:	add	r0, r7, r0, lsl #4
    756c:	ldr	r5, [r0, #-8]
    7570:	cmp	r5, #0
    7574:	beq	75f4 <coda_cursor_read_uint32_partial_array+0xb0>
    7578:	mov	r4, r3
    757c:	cmp	r3, #0
    7580:	beq	761c <coda_cursor_read_uint32_partial_array+0xd8>
    7584:	ldr	r0, [r5]
    7588:	mov	r8, r2
    758c:	mov	r6, r1
    7590:	cmp	r0, #99	; 0x63
    7594:	ldrhi	r5, [r5, #4]
    7598:	ldr	r0, [r5, #8]
    759c:	cmp	r0, #1
    75a0:	bne	7634 <coda_cursor_read_uint32_partial_array+0xf0>
    75a4:	ldr	r0, [pc, #908]	; 7938 <coda_cursor_read_uint32_partial_array+0x3f4>
    75a8:	ldr	r1, [pc, r0]
    75ac:	bl	0 <__aeabi_read_tp>
    75b0:	ldr	r0, [r0, r1]
    75b4:	cmp	r0, #0
    75b8:	beq	7678 <coda_cursor_read_uint32_partial_array+0x134>
    75bc:	add	r1, sp, #12
    75c0:	mov	r0, r7
    75c4:	bl	0 <coda_cursor_get_num_elements>
    75c8:	cmp	r0, #0
    75cc:	bne	7610 <coda_cursor_read_uint32_partial_array+0xcc>
    75d0:	ldr	r3, [sp, #12]
    75d4:	cmp	r6, #0
    75d8:	cmpge	r3, r6
    75dc:	bgt	7650 <coda_cursor_read_uint32_partial_array+0x10c>
    75e0:	movw	r1, #0
    75e4:	mvn	r0, #106	; 0x6a
    75e8:	mov	r2, r6
    75ec:	movt	r1, #0
    75f0:	b	760c <coda_cursor_read_uint32_partial_array+0xc8>
    75f4:	movw	r1, #0
    75f8:	movw	r2, #0
    75fc:	mvn	r0, #99	; 0x63
    7600:	movw	r3, #4714	; 0x126a
    7604:	movt	r1, #0
    7608:	movt	r2, #0
    760c:	bl	0 <coda_set_error>
    7610:	mvn	r0, #0
    7614:	sub	sp, fp, #24
    7618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    761c:	movw	r1, #0
    7620:	movw	r2, #0
    7624:	mvn	r0, #99	; 0x63
    7628:	movw	r3, #4719	; 0x126f
    762c:	movt	r1, #0
    7630:	b	7608 <coda_cursor_read_uint32_partial_array+0xc4>
    7634:	bl	0 <coda_type_get_class_name>
    7638:	movw	r1, #0
    763c:	mov	r2, r0
    7640:	movt	r1, #0
    7644:	mvn	r0, #104	; 0x68
    7648:	bl	0 <coda_set_error>
    764c:	b	7610 <coda_cursor_read_uint32_partial_array+0xcc>
    7650:	add	r0, r8, r6
    7654:	cmp	r0, r3
    7658:	ble	7678 <coda_cursor_read_uint32_partial_array+0x134>
    765c:	movw	r1, #0
    7660:	str	r3, [sp]
    7664:	mvn	r0, #106	; 0x6a
    7668:	mov	r2, r6
    766c:	mov	r3, r8
    7670:	movt	r1, #0
    7674:	b	760c <coda_cursor_read_uint32_partial_array+0xc8>
    7678:	ldr	r1, [r5, #40]	; 0x28
    767c:	ldr	r2, [r1, #8]
    7680:	cmp	r2, #2
    7684:	bne	7698 <coda_cursor_read_uint32_partial_array+0x154>
    7688:	ldr	r0, [pc, #688]	; 7940 <coda_cursor_read_uint32_partial_array+0x3fc>
    768c:	ldr	r2, [pc, r0]
    7690:	bl	0 <__aeabi_read_tp>
    7694:	b	76ac <coda_cursor_read_uint32_partial_array+0x168>
    7698:	bl	0 <__aeabi_read_tp>
    769c:	cmp	r2, #3
    76a0:	bne	76c8 <coda_cursor_read_uint32_partial_array+0x184>
    76a4:	ldr	r2, [pc, #656]	; 793c <coda_cursor_read_uint32_partial_array+0x3f8>
    76a8:	ldr	r2, [pc, r2]
    76ac:	ldr	r0, [r0, r2]
    76b0:	cmp	r0, #0
    76b4:	beq	76c8 <coda_cursor_read_uint32_partial_array+0x184>
    76b8:	ldr	r2, [r1, #48]	; 0x30
    76bc:	mov	r0, #9
    76c0:	cmp	r2, #0
    76c4:	bne	7758 <coda_cursor_read_uint32_partial_array+0x214>
    76c8:	ldr	r0, [r1, #12]
    76cc:	cmp	r0, #5
    76d0:	beq	776c <coda_cursor_read_uint32_partial_array+0x228>
    76d4:	cmp	r0, #3
    76d8:	beq	7798 <coda_cursor_read_uint32_partial_array+0x254>
    76dc:	cmp	r0, #1
    76e0:	bne	7758 <coda_cursor_read_uint32_partial_array+0x214>
    76e4:	mov	r0, r7
    76e8:	mov	r1, r6
    76ec:	mov	r2, r8
    76f0:	mov	r3, r4
    76f4:	bl	64e0 <read_uint8_partial_array>
    76f8:	mov	r1, r0
    76fc:	mvn	r0, #0
    7700:	cmp	r1, #0
    7704:	bne	7860 <coda_cursor_read_uint32_partial_array+0x31c>
    7708:	cmp	r8, #1
    770c:	blt	785c <coda_cursor_read_uint32_partial_array+0x318>
    7710:	mvn	r1, r8
    7714:	mvn	r0, #1
    7718:	mvn	r3, #1
    771c:	cmn	r1, #2
    7720:	movgt	r0, r1
    7724:	add	r0, r0, r8
    7728:	add	r0, r0, #2
    772c:	cmp	r0, #4
    7730:	bcs	7868 <coda_cursor_read_uint32_partial_array+0x324>
    7734:	sub	r0, r8, #1
    7738:	ldrb	r1, [r4, r0]
    773c:	str	r1, [r4, r0, lsl #2]
    7740:	sub	r1, r0, #1
    7744:	add	r0, r0, #1
    7748:	cmp	r0, #1
    774c:	mov	r0, r1
    7750:	bgt	7738 <coda_cursor_read_uint32_partial_array+0x1f4>
    7754:	b	785c <coda_cursor_read_uint32_partial_array+0x318>
    7758:	bl	0 <coda_type_get_native_type_name>
    775c:	movw	r1, #0
    7760:	mov	r2, r0
    7764:	movt	r1, #0
    7768:	b	7644 <coda_cursor_read_uint32_partial_array+0x100>
    776c:	mov	r0, r7
    7770:	mov	r1, r6
    7774:	mov	r2, r8
    7778:	mov	r3, r4
    777c:	bl	7944 <read_uint32_partial_array>
    7780:	mov	r1, r0
    7784:	mvn	r0, #0
    7788:	cmp	r1, #0
    778c:	moveq	r0, #0
    7790:	sub	sp, fp, #24
    7794:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7798:	mov	r0, r7
    779c:	mov	r1, r6
    77a0:	mov	r2, r8
    77a4:	mov	r3, r4
    77a8:	bl	6dc4 <read_uint16_partial_array>
    77ac:	mov	r1, r0
    77b0:	mvn	r0, #0
    77b4:	cmp	r1, #0
    77b8:	bne	7860 <coda_cursor_read_uint32_partial_array+0x31c>
    77bc:	cmp	r8, #1
    77c0:	blt	785c <coda_cursor_read_uint32_partial_array+0x318>
    77c4:	mvn	r0, r8
    77c8:	mvn	ip, #1
    77cc:	cmn	r0, #2
    77d0:	movle	r0, ip
    77d4:	add	r0, r0, r8
    77d8:	add	r2, r0, #2
    77dc:	cmp	r2, #4
    77e0:	bcs	77ec <coda_cursor_read_uint32_partial_array+0x2a8>
    77e4:	mov	r1, r8
    77e8:	b	7838 <coda_cursor_read_uint32_partial_array+0x2f4>
    77ec:	add	r0, r4, r8, lsl #1
    77f0:	bic	lr, r2, #3
    77f4:	mvn	r5, #7
    77f8:	sub	r7, r0, #8
    77fc:	add	r0, r4, r8, lsl #2
    7800:	sub	r1, r8, lr
    7804:	mov	r3, lr
    7808:	sub	r6, r0, #16
    780c:	mvn	r0, #15
    7810:	vld1.16	{d16}, [r7], r5
    7814:	subs	r3, r3, #4
    7818:	vrev64.16	d16, d16
    781c:	vmovl.u16	q8, d16
    7820:	vrev64.32	q8, q8
    7824:	vext.8	q8, q8, q8, #8
    7828:	vst1.32	{d16-d17}, [r6], r0
    782c:	bne	7810 <coda_cursor_read_uint32_partial_array+0x2cc>
    7830:	cmp	r2, lr
    7834:	beq	785c <coda_cursor_read_uint32_partial_array+0x318>
    7838:	add	r0, ip, r1, lsl #1
    783c:	add	r1, r1, #1
    7840:	add	r2, r4, r0
    7844:	sub	r1, r1, #1
    7848:	ldrh	r2, [r2]
    784c:	cmp	r1, #1
    7850:	str	r2, [r4, r0, lsl #1]
    7854:	sub	r0, r0, #2
    7858:	bgt	7840 <coda_cursor_read_uint32_partial_array+0x2fc>
    785c:	mov	r0, #0
    7860:	sub	sp, fp, #24
    7864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7868:	cmn	r1, #2
    786c:	mov	r7, #4
    7870:	sub	r2, r8, #1
    7874:	movgt	r3, r1
    7878:	add	r6, r4, r2, lsl #2
    787c:	add	r3, r3, r8
    7880:	add	r3, r3, #1
    7884:	umull	r5, r7, r3, r7
    7888:	cmp	r7, #0
    788c:	movwne	r7, #1
    7890:	cmp	r5, r6
    7894:	bhi	7734 <coda_cursor_read_uint32_partial_array+0x1f0>
    7898:	cmp	r7, #0
    789c:	bne	7734 <coda_cursor_read_uint32_partial_array+0x1f0>
    78a0:	add	r2, r4, r2
    78a4:	cmp	r3, r2
    78a8:	bhi	7734 <coda_cursor_read_uint32_partial_array+0x1f0>
    78ac:	mvn	r2, #1
    78b0:	cmn	r1, #2
    78b4:	add	r3, r4, r8, lsl #2
    78b8:	movle	r1, r2
    78bc:	sub	r2, r2, r1
    78c0:	add	r1, r4, r8
    78c4:	add	r7, r4, r2, lsl #2
    78c8:	cmp	r1, r7
    78cc:	bls	78dc <coda_cursor_read_uint32_partial_array+0x398>
    78d0:	add	r2, r4, r2
    78d4:	cmp	r2, r3
    78d8:	bcc	7734 <coda_cursor_read_uint32_partial_array+0x1f0>
    78dc:	bic	ip, r0, #3
    78e0:	sub	r2, r1, #4
    78e4:	sub	r3, r3, #16
    78e8:	add	r7, sp, #8
    78ec:	vmov.i32	q8, #255	; 0x000000ff
    78f0:	mvn	r6, #15
    78f4:	sub	r8, r8, ip
    78f8:	mov	r1, ip
    78fc:	ldr	r5, [r2], #-4
    7900:	subs	r1, r1, #4
    7904:	str	r5, [sp, #8]
    7908:	vld1.32	{d18[0]}, [r7 :32]
    790c:	vmovl.u8	q9, d18
    7910:	vrev64.16	d18, d18
    7914:	vmovl.u16	q9, d18
    7918:	vand	q9, q9, q8
    791c:	vrev64.32	q9, q9
    7920:	vext.8	q9, q9, q9, #8
    7924:	vst1.32	{d18-d19}, [r3], r6
    7928:	bne	78fc <coda_cursor_read_uint32_partial_array+0x3b8>
    792c:	cmp	r0, ip
    7930:	bne	7734 <coda_cursor_read_uint32_partial_array+0x1f0>
    7934:	b	785c <coda_cursor_read_uint32_partial_array+0x318>
    7938:	.word	0x00000388
    793c:	.word	0x0000028c
    7940:	.word	0x000002ac

00007944 <read_uint32_partial_array>:
    7944:	push	{fp, lr}
    7948:	mov	fp, sp
    794c:	ldr	ip, [r0, #4]
    7950:	add	ip, r0, ip, lsl #4
    7954:	ldr	ip, [ip, #-8]
    7958:	ldr	ip, [ip]
    795c:	sub	lr, ip, #100	; 0x64
    7960:	cmp	lr, #3
    7964:	bhi	7988 <read_uint32_partial_array+0x44>
    7968:	add	ip, pc, #0
    796c:	ldr	pc, [ip, lr, lsl #2]
    7970:	.word	0x00007980
    7974:	.word	0x000079a8
    7978:	.word	0x000079a0
    797c:	.word	0x000079bc
    7980:	pop	{fp, lr}
    7984:	b	0 <coda_mem_cursor_read_uint32_partial_array>
    7988:	cmp	ip, #1
    798c:	beq	79c4 <read_uint32_partial_array+0x80>
    7990:	cmp	ip, #0
    7994:	bne	79cc <read_uint32_partial_array+0x88>
    7998:	pop	{fp, lr}
    799c:	b	0 <coda_ascii_cursor_read_uint32_partial_array>
    79a0:	mvn	r0, #12
    79a4:	b	79ac <read_uint32_partial_array+0x68>
    79a8:	mvn	r0, #10
    79ac:	mov	r1, #0
    79b0:	bl	0 <coda_set_error>
    79b4:	mvn	r0, #0
    79b8:	pop	{fp, pc}
    79bc:	pop	{fp, lr}
    79c0:	b	0 <coda_cdf_cursor_read_uint32_partial_array>
    79c4:	pop	{fp, lr}
    79c8:	b	0 <coda_bin_cursor_read_uint32_partial_array>
    79cc:	movw	r0, #0
    79d0:	movw	r1, #0
    79d4:	movw	r3, #0
    79d8:	movw	r2, #1569	; 0x621
    79dc:	movt	r0, #0
    79e0:	movt	r1, #0
    79e4:	movt	r3, #0
    79e8:	bl	0 <__assert_fail>
    79ec:	nop	{0}

000079f0 <coda_cursor_read_int64_partial_array>:
    79f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    79f4:	add	fp, sp, #24
    79f8:	sub	sp, sp, #24
    79fc:	cmp	r0, #0
    7a00:	beq	7aa0 <coda_cursor_read_int64_partial_array+0xb0>
    7a04:	mov	r7, r0
    7a08:	ldr	r0, [r0, #4]
    7a0c:	cmp	r0, #1
    7a10:	blt	7aa0 <coda_cursor_read_int64_partial_array+0xb0>
    7a14:	add	r0, r7, r0, lsl #4
    7a18:	ldr	r4, [r0, #-8]
    7a1c:	cmp	r4, #0
    7a20:	beq	7aa0 <coda_cursor_read_int64_partial_array+0xb0>
    7a24:	mov	r8, r3
    7a28:	cmp	r3, #0
    7a2c:	beq	7ac8 <coda_cursor_read_int64_partial_array+0xd8>
    7a30:	ldr	r0, [r4]
    7a34:	mov	r5, r2
    7a38:	mov	r6, r1
    7a3c:	cmp	r0, #99	; 0x63
    7a40:	ldrhi	r4, [r4, #4]
    7a44:	ldr	r0, [r4, #8]
    7a48:	cmp	r0, #1
    7a4c:	bne	7ae0 <coda_cursor_read_int64_partial_array+0xf0>
    7a50:	ldr	r0, [pc, #2072]	; 8270 <coda_cursor_read_int64_partial_array+0x880>
    7a54:	ldr	r1, [pc, r0]
    7a58:	bl	0 <__aeabi_read_tp>
    7a5c:	ldr	r0, [r0, r1]
    7a60:	cmp	r0, #0
    7a64:	beq	7b24 <coda_cursor_read_int64_partial_array+0x134>
    7a68:	add	r1, sp, #20
    7a6c:	mov	r0, r7
    7a70:	bl	0 <coda_cursor_get_num_elements>
    7a74:	cmp	r0, #0
    7a78:	bne	7abc <coda_cursor_read_int64_partial_array+0xcc>
    7a7c:	ldr	r3, [sp, #20]
    7a80:	cmp	r6, #0
    7a84:	cmpge	r3, r6
    7a88:	bgt	7afc <coda_cursor_read_int64_partial_array+0x10c>
    7a8c:	movw	r1, #0
    7a90:	mvn	r0, #106	; 0x6a
    7a94:	mov	r2, r6
    7a98:	movt	r1, #0
    7a9c:	b	7ab8 <coda_cursor_read_int64_partial_array+0xc8>
    7aa0:	movw	r1, #0
    7aa4:	movw	r2, #0
    7aa8:	mvn	r0, #99	; 0x63
    7aac:	movw	r3, #4827	; 0x12db
    7ab0:	movt	r1, #0
    7ab4:	movt	r2, #0
    7ab8:	bl	0 <coda_set_error>
    7abc:	mvn	r0, #0
    7ac0:	sub	sp, fp, #24
    7ac4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7ac8:	movw	r1, #0
    7acc:	movw	r2, #0
    7ad0:	mvn	r0, #99	; 0x63
    7ad4:	movw	r3, #4832	; 0x12e0
    7ad8:	movt	r1, #0
    7adc:	b	7ab4 <coda_cursor_read_int64_partial_array+0xc4>
    7ae0:	bl	0 <coda_type_get_class_name>
    7ae4:	movw	r1, #0
    7ae8:	mov	r2, r0
    7aec:	movt	r1, #0
    7af0:	mvn	r0, #104	; 0x68
    7af4:	bl	0 <coda_set_error>
    7af8:	b	7abc <coda_cursor_read_int64_partial_array+0xcc>
    7afc:	add	r0, r5, r6
    7b00:	cmp	r0, r3
    7b04:	ble	7b24 <coda_cursor_read_int64_partial_array+0x134>
    7b08:	movw	r1, #0
    7b0c:	str	r3, [sp]
    7b10:	mvn	r0, #106	; 0x6a
    7b14:	mov	r2, r6
    7b18:	mov	r3, r5
    7b1c:	movt	r1, #0
    7b20:	b	7ab8 <coda_cursor_read_int64_partial_array+0xc8>
    7b24:	ldr	r1, [r4, #40]	; 0x28
    7b28:	ldr	r2, [r1, #8]
    7b2c:	cmp	r2, #2
    7b30:	bne	7b44 <coda_cursor_read_int64_partial_array+0x154>
    7b34:	ldr	r0, [pc, #1852]	; 8278 <coda_cursor_read_int64_partial_array+0x888>
    7b38:	ldr	r2, [pc, r0]
    7b3c:	bl	0 <__aeabi_read_tp>
    7b40:	b	7b58 <coda_cursor_read_int64_partial_array+0x168>
    7b44:	bl	0 <__aeabi_read_tp>
    7b48:	cmp	r2, #3
    7b4c:	bne	7b88 <coda_cursor_read_int64_partial_array+0x198>
    7b50:	ldr	r2, [pc, #1820]	; 8274 <coda_cursor_read_int64_partial_array+0x884>
    7b54:	ldr	r2, [pc, r2]
    7b58:	ldr	r0, [r0, r2]
    7b5c:	cmp	r0, #0
    7b60:	beq	7b88 <coda_cursor_read_int64_partial_array+0x198>
    7b64:	ldr	r2, [r1, #48]	; 0x30
    7b68:	mov	r0, #9
    7b6c:	cmp	r2, #0
    7b70:	beq	7b88 <coda_cursor_read_int64_partial_array+0x198>
    7b74:	bl	0 <coda_type_get_native_type_name>
    7b78:	movw	r1, #0
    7b7c:	mov	r2, r0
    7b80:	movt	r1, #0
    7b84:	b	7af0 <coda_cursor_read_int64_partial_array+0x100>
    7b88:	ldr	r0, [r1, #12]
    7b8c:	cmp	r0, #6
    7b90:	bhi	7b74 <coda_cursor_read_int64_partial_array+0x184>
    7b94:	add	r1, pc, #0
    7b98:	ldr	pc, [r1, r0, lsl #2]
    7b9c:	.word	0x00007bb8
    7ba0:	.word	0x00007d2c
    7ba4:	.word	0x00007e8c
    7ba8:	.word	0x00007ed8
    7bac:	.word	0x00007f24
    7bb0:	.word	0x00007f70
    7bb4:	.word	0x00007fbc
    7bb8:	mov	r0, r7
    7bbc:	mov	r1, r6
    7bc0:	mov	r2, r5
    7bc4:	mov	r3, r8
    7bc8:	bl	6258 <read_int8_partial_array>
    7bcc:	mov	r1, r0
    7bd0:	mvn	r0, #0
    7bd4:	cmp	r1, #0
    7bd8:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7bdc:	cmp	r5, #1
    7be0:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7be4:	mvn	r1, r5
    7be8:	mvn	r0, #1
    7bec:	mvn	r3, #1
    7bf0:	cmn	r1, #2
    7bf4:	movgt	r0, r1
    7bf8:	add	r0, r0, r5
    7bfc:	cmn	r0, #3
    7c00:	bhi	7cec <coda_cursor_read_int64_partial_array+0x2fc>
    7c04:	cmn	r1, #2
    7c08:	mov	r7, #8
    7c0c:	sub	r2, r5, #1
    7c10:	movgt	r3, r1
    7c14:	add	r6, r8, r2, lsl #3
    7c18:	add	r3, r3, r5
    7c1c:	add	r3, r3, #1
    7c20:	umull	r4, r7, r3, r7
    7c24:	cmp	r7, #0
    7c28:	movwne	r7, #1
    7c2c:	cmp	r4, r6
    7c30:	bhi	7cec <coda_cursor_read_int64_partial_array+0x2fc>
    7c34:	cmp	r7, #0
    7c38:	bne	7cec <coda_cursor_read_int64_partial_array+0x2fc>
    7c3c:	add	r2, r8, r2
    7c40:	cmp	r3, r2
    7c44:	bhi	7cec <coda_cursor_read_int64_partial_array+0x2fc>
    7c48:	mvn	r2, #1
    7c4c:	cmn	r1, #2
    7c50:	movle	r1, r2
    7c54:	sub	r1, r2, r1
    7c58:	add	r2, r8, r5
    7c5c:	add	r3, r8, r1, lsl #3
    7c60:	cmp	r2, r3
    7c64:	bls	7c78 <coda_cursor_read_int64_partial_array+0x288>
    7c68:	add	r2, r8, r5, lsl #3
    7c6c:	add	r1, r8, r1
    7c70:	cmp	r1, r2
    7c74:	bcc	7cec <coda_cursor_read_int64_partial_array+0x2fc>
    7c78:	add	ip, r0, #2
    7c7c:	sub	r2, r5, #2
    7c80:	add	r7, sp, #4
    7c84:	vmov.i32	q8, #0	; 0x00000000
    7c88:	mvn	r6, #15
    7c8c:	bic	r4, ip, #1
    7c90:	add	r1, r8, r2
    7c94:	add	r3, r8, r2, lsl #3
    7c98:	sub	r5, r5, r4
    7c9c:	mov	r2, r4
    7ca0:	ldrh	r0, [r1], #-2
    7ca4:	subs	r2, r2, #2
    7ca8:	strh	r0, [sp, #4]
    7cac:	vld1.16	{d18[0]}, [r7 :16]
    7cb0:	add	r0, pc, #984	; 0x3d8
    7cb4:	vld1.64	{d20-d21}, [r0 :128]
    7cb8:	vmovl.u8	q9, d18
    7cbc:	vmovl.u16	q9, d18
    7cc0:	vsub.i64	q10, q8, q10
    7cc4:	vrev64.32	d18, d18
    7cc8:	vmovl.u32	q9, d18
    7ccc:	vshl.s64	q9, q9, #56	; 0x38
    7cd0:	vshl.s64	q9, q9, q10
    7cd4:	vorr	d20, d19, d19
    7cd8:	vorr	d21, d18, d18
    7cdc:	vst1.64	{d20-d21}, [r3], r6
    7ce0:	bne	7ca0 <coda_cursor_read_int64_partial_array+0x2b0>
    7ce4:	cmp	ip, r4
    7ce8:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    7cec:	mvn	r0, #7
    7cf0:	sub	r1, r5, #1
    7cf4:	add	r0, r0, r5, lsl #3
    7cf8:	add	r2, r8, r1
    7cfc:	add	r3, r8, r0
    7d00:	ldrsb	r2, [r2]
    7d04:	str	r2, [r8, r0]
    7d08:	asr	r2, r2, #31
    7d0c:	sub	r0, r0, #8
    7d10:	str	r2, [r3, #4]
    7d14:	sub	r2, r1, #1
    7d18:	add	r1, r1, #1
    7d1c:	cmp	r1, #1
    7d20:	mov	r1, r2
    7d24:	bgt	7cf8 <coda_cursor_read_int64_partial_array+0x308>
    7d28:	b	8250 <coda_cursor_read_int64_partial_array+0x860>
    7d2c:	mov	r0, r7
    7d30:	mov	r1, r6
    7d34:	mov	r2, r5
    7d38:	mov	r3, r8
    7d3c:	bl	64e0 <read_uint8_partial_array>
    7d40:	mov	r1, r0
    7d44:	mvn	r0, #0
    7d48:	cmp	r1, #0
    7d4c:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7d50:	cmp	r5, #1
    7d54:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7d58:	mvn	r1, r5
    7d5c:	mvn	r0, #1
    7d60:	mvn	r3, #1
    7d64:	cmn	r1, #2
    7d68:	movgt	r0, r1
    7d6c:	add	r0, r0, r5
    7d70:	cmn	r0, #3
    7d74:	bhi	7e50 <coda_cursor_read_int64_partial_array+0x460>
    7d78:	cmn	r1, #2
    7d7c:	mov	r7, #8
    7d80:	sub	r2, r5, #1
    7d84:	movgt	r3, r1
    7d88:	add	r6, r8, r2, lsl #3
    7d8c:	add	r3, r3, r5
    7d90:	add	r3, r3, #1
    7d94:	umull	r4, r7, r3, r7
    7d98:	cmp	r7, #0
    7d9c:	movwne	r7, #1
    7da0:	cmp	r4, r6
    7da4:	bhi	7e50 <coda_cursor_read_int64_partial_array+0x460>
    7da8:	cmp	r7, #0
    7dac:	bne	7e50 <coda_cursor_read_int64_partial_array+0x460>
    7db0:	add	r2, r8, r2
    7db4:	cmp	r3, r2
    7db8:	bhi	7e50 <coda_cursor_read_int64_partial_array+0x460>
    7dbc:	mvn	r2, #1
    7dc0:	cmn	r1, #2
    7dc4:	movle	r1, r2
    7dc8:	sub	r1, r2, r1
    7dcc:	add	r2, r8, r5
    7dd0:	add	r3, r8, r1, lsl #3
    7dd4:	cmp	r2, r3
    7dd8:	bls	7dec <coda_cursor_read_int64_partial_array+0x3fc>
    7ddc:	add	r2, r8, r5, lsl #3
    7de0:	add	r1, r8, r1
    7de4:	cmp	r1, r2
    7de8:	bcc	7e50 <coda_cursor_read_int64_partial_array+0x460>
    7dec:	add	ip, r0, #2
    7df0:	sub	r2, r5, #2
    7df4:	add	r7, sp, #8
    7df8:	vmov.i64	q8, #0x00000000000000ff
    7dfc:	mvn	r6, #15
    7e00:	bic	r4, ip, #1
    7e04:	add	r1, r8, r2
    7e08:	add	r3, r8, r2, lsl #3
    7e0c:	sub	r5, r5, r4
    7e10:	mov	r2, r4
    7e14:	ldrh	r0, [r1], #-2
    7e18:	subs	r2, r2, #2
    7e1c:	strh	r0, [sp, #8]
    7e20:	vld1.16	{d18[0]}, [r7 :16]
    7e24:	vmovl.u8	q9, d18
    7e28:	vmovl.u16	q9, d18
    7e2c:	vrev64.32	d18, d18
    7e30:	vmovl.u32	q9, d18
    7e34:	vand	q9, q9, q8
    7e38:	vorr	d20, d19, d19
    7e3c:	vorr	d21, d18, d18
    7e40:	vst1.64	{d20-d21}, [r3], r6
    7e44:	bne	7e14 <coda_cursor_read_int64_partial_array+0x424>
    7e48:	cmp	ip, r4
    7e4c:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    7e50:	mvn	r0, #7
    7e54:	sub	r2, r5, #1
    7e58:	mov	r1, #0
    7e5c:	add	r0, r0, r5, lsl #3
    7e60:	ldrb	r3, [r8, r2]
    7e64:	str	r3, [r8, r0]
    7e68:	add	r3, r8, r0
    7e6c:	sub	r0, r0, #8
    7e70:	str	r1, [r3, #4]
    7e74:	sub	r3, r2, #1
    7e78:	add	r2, r2, #1
    7e7c:	cmp	r2, #1
    7e80:	mov	r2, r3
    7e84:	bgt	7e60 <coda_cursor_read_int64_partial_array+0x470>
    7e88:	b	8250 <coda_cursor_read_int64_partial_array+0x860>
    7e8c:	mov	r0, r7
    7e90:	mov	r1, r6
    7e94:	mov	r2, r5
    7e98:	mov	r3, r8
    7e9c:	bl	69ec <read_int16_partial_array>
    7ea0:	mov	r1, r0
    7ea4:	mvn	r0, #0
    7ea8:	cmp	r1, #0
    7eac:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7eb0:	cmp	r5, #1
    7eb4:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7eb8:	mvn	r0, r5
    7ebc:	cmn	r0, #2
    7ec0:	mvnle	r0, #1
    7ec4:	add	r0, r0, r5
    7ec8:	cmn	r0, #3
    7ecc:	bls	7fe8 <coda_cursor_read_int64_partial_array+0x5f8>
    7ed0:	mov	r0, r5
    7ed4:	b	805c <coda_cursor_read_int64_partial_array+0x66c>
    7ed8:	mov	r0, r7
    7edc:	mov	r1, r6
    7ee0:	mov	r2, r5
    7ee4:	mov	r3, r8
    7ee8:	bl	6dc4 <read_uint16_partial_array>
    7eec:	mov	r1, r0
    7ef0:	mvn	r0, #0
    7ef4:	cmp	r1, #0
    7ef8:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7efc:	cmp	r5, #1
    7f00:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7f04:	mvn	r0, r5
    7f08:	cmn	r0, #2
    7f0c:	mvnle	r0, #1
    7f10:	add	r0, r0, r5
    7f14:	cmn	r0, #3
    7f18:	bls	80a0 <coda_cursor_read_int64_partial_array+0x6b0>
    7f1c:	mov	r0, r5
    7f20:	b	8104 <coda_cursor_read_int64_partial_array+0x714>
    7f24:	mov	r0, r7
    7f28:	mov	r1, r6
    7f2c:	mov	r2, r5
    7f30:	mov	r3, r8
    7f34:	bl	7490 <read_int32_partial_array>
    7f38:	mov	r1, r0
    7f3c:	mvn	r0, #0
    7f40:	cmp	r1, #0
    7f44:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7f48:	cmp	r5, #1
    7f4c:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7f50:	mvn	r0, r5
    7f54:	cmn	r0, #2
    7f58:	mvnle	r0, #1
    7f5c:	add	r0, r0, r5
    7f60:	cmn	r0, #3
    7f64:	bls	813c <coda_cursor_read_int64_partial_array+0x74c>
    7f68:	mov	r0, r5
    7f6c:	b	818c <coda_cursor_read_int64_partial_array+0x79c>
    7f70:	mov	r0, r7
    7f74:	mov	r1, r6
    7f78:	mov	r2, r5
    7f7c:	mov	r3, r8
    7f80:	bl	7944 <read_uint32_partial_array>
    7f84:	mov	r1, r0
    7f88:	mvn	r0, #0
    7f8c:	cmp	r1, #0
    7f90:	bne	8254 <coda_cursor_read_int64_partial_array+0x864>
    7f94:	cmp	r5, #1
    7f98:	blt	8250 <coda_cursor_read_int64_partial_array+0x860>
    7f9c:	mvn	r0, r5
    7fa0:	cmn	r0, #2
    7fa4:	mvnle	r0, #1
    7fa8:	add	r0, r0, r5
    7fac:	cmn	r0, #3
    7fb0:	bls	81c8 <coda_cursor_read_int64_partial_array+0x7d8>
    7fb4:	mov	r0, r5
    7fb8:	b	8218 <coda_cursor_read_int64_partial_array+0x828>
    7fbc:	mov	r0, r7
    7fc0:	mov	r1, r6
    7fc4:	mov	r2, r5
    7fc8:	mov	r3, r8
    7fcc:	bl	827c <read_int64_partial_array>
    7fd0:	mov	r1, r0
    7fd4:	mvn	r0, #0
    7fd8:	cmp	r1, #0
    7fdc:	moveq	r0, #0
    7fe0:	sub	sp, fp, #24
    7fe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7fe8:	add	ip, r0, #2
    7fec:	add	r2, r8, r5, lsl #1
    7ff0:	add	r6, sp, #12
    7ff4:	vmov.i32	q8, #0	; 0x00000000
    7ff8:	bic	r4, ip, #1
    7ffc:	sub	r3, r2, #4
    8000:	add	r2, r8, r5, lsl #3
    8004:	sub	r0, r5, r4
    8008:	sub	r7, r2, #16
    800c:	mvn	r5, #15
    8010:	mov	r2, r4
    8014:	ldr	r1, [r3], #-4
    8018:	subs	r2, r2, #2
    801c:	str	r1, [sp, #12]
    8020:	vld1.32	{d18[0]}, [r6 :32]
    8024:	add	r1, pc, #564	; 0x234
    8028:	vld1.64	{d20-d21}, [r1 :128]
    802c:	vmovl.u16	q9, d18
    8030:	vrev64.32	d18, d18
    8034:	vsub.i64	q10, q8, q10
    8038:	vmovl.u32	q9, d18
    803c:	vshl.s64	q9, q9, #48	; 0x30
    8040:	vshl.s64	q9, q9, q10
    8044:	vorr	d20, d19, d19
    8048:	vorr	d21, d18, d18
    804c:	vst1.64	{d20-d21}, [r7], r5
    8050:	bne	8014 <coda_cursor_read_int64_partial_array+0x624>
    8054:	cmp	ip, r4
    8058:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    805c:	add	r1, r8, r0, lsl #3
    8060:	add	r2, r8, r0, lsl #1
    8064:	add	r0, r0, #1
    8068:	sub	r1, r1, #8
    806c:	sub	r2, r2, #2
    8070:	ldrsh	r4, [r2], #-2
    8074:	sub	r0, r0, #1
    8078:	cmp	r0, #1
    807c:	asr	r5, r4, #31
    8080:	strd	r4, [r1]
    8084:	sub	r1, r1, #8
    8088:	bgt	8070 <coda_cursor_read_int64_partial_array+0x680>
    808c:	b	8250 <coda_cursor_read_int64_partial_array+0x860>
    8090:	.word	0x00000038
    8094:	.word	0x00000000
    8098:	.word	0x00000038
    809c:	.word	0x00000000
    80a0:	add	ip, r0, #2
    80a4:	add	r2, r8, r5, lsl #1
    80a8:	add	r6, sp, #16
    80ac:	vmov.i64	q8, #0x000000000000ffff
    80b0:	bic	r4, ip, #1
    80b4:	sub	r3, r2, #4
    80b8:	add	r2, r8, r5, lsl #3
    80bc:	sub	r0, r5, r4
    80c0:	sub	r7, r2, #16
    80c4:	mvn	r5, #15
    80c8:	mov	r2, r4
    80cc:	ldr	r1, [r3], #-4
    80d0:	subs	r2, r2, #2
    80d4:	str	r1, [sp, #16]
    80d8:	vld1.32	{d18[0]}, [r6 :32]
    80dc:	vmovl.u16	q9, d18
    80e0:	vrev64.32	d18, d18
    80e4:	vmovl.u32	q9, d18
    80e8:	vand	q9, q9, q8
    80ec:	vorr	d20, d19, d19
    80f0:	vorr	d21, d18, d18
    80f4:	vst1.64	{d20-d21}, [r7], r5
    80f8:	bne	80cc <coda_cursor_read_int64_partial_array+0x6dc>
    80fc:	cmp	ip, r4
    8100:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    8104:	add	r1, r8, r0, lsl #3
    8108:	add	r2, r8, r0, lsl #1
    810c:	add	r0, r0, #1
    8110:	mov	r3, #0
    8114:	sub	r1, r1, #8
    8118:	sub	r2, r2, #2
    811c:	ldrh	r4, [r2], #-2
    8120:	sub	r0, r0, #1
    8124:	cmp	r0, #1
    8128:	str	r4, [r1]
    812c:	str	r3, [r1, #4]
    8130:	sub	r1, r1, #8
    8134:	bgt	811c <coda_cursor_read_int64_partial_array+0x72c>
    8138:	b	8250 <coda_cursor_read_int64_partial_array+0x860>
    813c:	add	r1, r0, #2
    8140:	add	r2, r8, r5, lsl #2
    8144:	mvn	r6, #7
    8148:	bic	r4, r1, #1
    814c:	sub	r3, r2, #8
    8150:	add	r2, r8, r5, lsl #3
    8154:	sub	r0, r5, r4
    8158:	sub	r7, r2, #16
    815c:	mvn	r5, #15
    8160:	mov	r2, r4
    8164:	vld1.32	{d16}, [r3], r6
    8168:	subs	r2, r2, #2
    816c:	vrev64.32	d16, d16
    8170:	vmovl.s32	q8, d16
    8174:	vorr	d18, d17, d17
    8178:	vorr	d19, d16, d16
    817c:	vst1.64	{d18-d19}, [r7], r5
    8180:	bne	8164 <coda_cursor_read_int64_partial_array+0x774>
    8184:	cmp	r1, r4
    8188:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    818c:	mvn	r1, #7
    8190:	add	r1, r1, r0, lsl #3
    8194:	sub	r0, r0, #1
    8198:	ldr	r2, [r8, r0, lsl #2]
    819c:	add	r3, r8, r1
    81a0:	str	r2, [r8, r1]
    81a4:	asr	r2, r2, #31
    81a8:	sub	r1, r1, #8
    81ac:	str	r2, [r3, #4]
    81b0:	sub	r2, r0, #1
    81b4:	add	r0, r0, #1
    81b8:	cmp	r0, #1
    81bc:	mov	r0, r2
    81c0:	bgt	8198 <coda_cursor_read_int64_partial_array+0x7a8>
    81c4:	b	8250 <coda_cursor_read_int64_partial_array+0x860>
    81c8:	add	r1, r0, #2
    81cc:	add	r2, r8, r5, lsl #2
    81d0:	mvn	r6, #7
    81d4:	bic	r4, r1, #1
    81d8:	sub	r3, r2, #8
    81dc:	add	r2, r8, r5, lsl #3
    81e0:	sub	r0, r5, r4
    81e4:	sub	r7, r2, #16
    81e8:	mvn	r5, #15
    81ec:	mov	r2, r4
    81f0:	vld1.32	{d16}, [r3], r6
    81f4:	subs	r2, r2, #2
    81f8:	vrev64.32	d16, d16
    81fc:	vmovl.u32	q8, d16
    8200:	vorr	d18, d17, d17
    8204:	vorr	d19, d16, d16
    8208:	vst1.64	{d18-d19}, [r7], r5
    820c:	bne	81f0 <coda_cursor_read_int64_partial_array+0x800>
    8210:	cmp	r1, r4
    8214:	beq	8250 <coda_cursor_read_int64_partial_array+0x860>
    8218:	mvn	r1, #7
    821c:	sub	r2, r0, #1
    8220:	add	r1, r1, r0, lsl #3
    8224:	mov	r0, #0
    8228:	ldr	r3, [r8, r2, lsl #2]
    822c:	str	r3, [r8, r1]
    8230:	add	r3, r8, r1
    8234:	sub	r1, r1, #8
    8238:	str	r0, [r3, #4]
    823c:	sub	r3, r2, #1
    8240:	add	r2, r2, #1
    8244:	cmp	r2, #1
    8248:	mov	r2, r3
    824c:	bgt	8228 <coda_cursor_read_int64_partial_array+0x838>
    8250:	mov	r0, #0
    8254:	sub	sp, fp, #24
    8258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    825c:	nop	{0}
    8260:	.word	0x00000030
    8264:	.word	0x00000000
    8268:	.word	0x00000030
    826c:	.word	0x00000000
    8270:	.word	0x00000814
    8274:	.word	0x00000718
    8278:	.word	0x00000738

0000827c <read_int64_partial_array>:
    827c:	push	{fp, lr}
    8280:	mov	fp, sp
    8284:	ldr	ip, [r0, #4]
    8288:	add	ip, r0, ip, lsl #4
    828c:	ldr	ip, [ip, #-8]
    8290:	ldr	ip, [ip]
    8294:	sub	lr, ip, #100	; 0x64
    8298:	cmp	lr, #3
    829c:	bhi	82c0 <read_int64_partial_array+0x44>
    82a0:	add	ip, pc, #0
    82a4:	ldr	pc, [ip, lr, lsl #2]
    82a8:	.word	0x000082b8
    82ac:	.word	0x000082e0
    82b0:	.word	0x000082d8
    82b4:	.word	0x000082f4
    82b8:	pop	{fp, lr}
    82bc:	b	0 <coda_mem_cursor_read_int64_partial_array>
    82c0:	cmp	ip, #1
    82c4:	beq	82fc <read_int64_partial_array+0x80>
    82c8:	cmp	ip, #0
    82cc:	bne	8304 <read_int64_partial_array+0x88>
    82d0:	pop	{fp, lr}
    82d4:	b	0 <coda_ascii_cursor_read_int64_partial_array>
    82d8:	mvn	r0, #12
    82dc:	b	82e4 <read_int64_partial_array+0x68>
    82e0:	mvn	r0, #10
    82e4:	mov	r1, #0
    82e8:	bl	0 <coda_set_error>
    82ec:	mvn	r0, #0
    82f0:	pop	{fp, pc}
    82f4:	pop	{fp, lr}
    82f8:	b	0 <coda_cdf_cursor_read_int64_partial_array>
    82fc:	pop	{fp, lr}
    8300:	b	0 <coda_bin_cursor_read_int64_partial_array>
    8304:	movw	r0, #0
    8308:	movw	r1, #0
    830c:	movw	r3, #0
    8310:	movw	r2, #1604	; 0x644
    8314:	movt	r0, #0
    8318:	movt	r1, #0
    831c:	movt	r3, #0
    8320:	bl	0 <__assert_fail>

00008324 <coda_cursor_read_uint64_partial_array>:
    8324:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    8328:	add	fp, sp, #24
    832c:	sub	sp, sp, #16
    8330:	cmp	r0, #0
    8334:	beq	83d4 <coda_cursor_read_uint64_partial_array+0xb0>
    8338:	mov	r7, r0
    833c:	ldr	r0, [r0, #4]
    8340:	cmp	r0, #1
    8344:	blt	83d4 <coda_cursor_read_uint64_partial_array+0xb0>
    8348:	add	r0, r7, r0, lsl #4
    834c:	ldr	r5, [r0, #-8]
    8350:	cmp	r5, #0
    8354:	beq	83d4 <coda_cursor_read_uint64_partial_array+0xb0>
    8358:	mov	r4, r3
    835c:	cmp	r3, #0
    8360:	beq	83fc <coda_cursor_read_uint64_partial_array+0xd8>
    8364:	ldr	r0, [r5]
    8368:	mov	r8, r2
    836c:	mov	r6, r1
    8370:	cmp	r0, #99	; 0x63
    8374:	ldrhi	r5, [r5, #4]
    8378:	ldr	r0, [r5, #8]
    837c:	cmp	r0, #1
    8380:	bne	8414 <coda_cursor_read_uint64_partial_array+0xf0>
    8384:	ldr	r0, [pc, #1212]	; 8848 <coda_cursor_read_uint64_partial_array+0x524>
    8388:	ldr	r1, [pc, r0]
    838c:	bl	0 <__aeabi_read_tp>
    8390:	ldr	r0, [r0, r1]
    8394:	cmp	r0, #0
    8398:	beq	8458 <coda_cursor_read_uint64_partial_array+0x134>
    839c:	add	r1, sp, #12
    83a0:	mov	r0, r7
    83a4:	bl	0 <coda_cursor_get_num_elements>
    83a8:	cmp	r0, #0
    83ac:	bne	83f0 <coda_cursor_read_uint64_partial_array+0xcc>
    83b0:	ldr	r3, [sp, #12]
    83b4:	cmp	r6, #0
    83b8:	cmpge	r3, r6
    83bc:	bgt	8430 <coda_cursor_read_uint64_partial_array+0x10c>
    83c0:	movw	r1, #0
    83c4:	mvn	r0, #106	; 0x6a
    83c8:	mov	r2, r6
    83cc:	movt	r1, #0
    83d0:	b	83ec <coda_cursor_read_uint64_partial_array+0xc8>
    83d4:	movw	r1, #0
    83d8:	movw	r2, #0
    83dc:	mvn	r0, #99	; 0x63
    83e0:	movw	r3, #4978	; 0x1372
    83e4:	movt	r1, #0
    83e8:	movt	r2, #0
    83ec:	bl	0 <coda_set_error>
    83f0:	mvn	r0, #0
    83f4:	sub	sp, fp, #24
    83f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    83fc:	movw	r1, #0
    8400:	movw	r2, #0
    8404:	mvn	r0, #99	; 0x63
    8408:	movw	r3, #4983	; 0x1377
    840c:	movt	r1, #0
    8410:	b	83e8 <coda_cursor_read_uint64_partial_array+0xc4>
    8414:	bl	0 <coda_type_get_class_name>
    8418:	movw	r1, #0
    841c:	mov	r2, r0
    8420:	movt	r1, #0
    8424:	mvn	r0, #104	; 0x68
    8428:	bl	0 <coda_set_error>
    842c:	b	83f0 <coda_cursor_read_uint64_partial_array+0xcc>
    8430:	add	r0, r8, r6
    8434:	cmp	r0, r3
    8438:	ble	8458 <coda_cursor_read_uint64_partial_array+0x134>
    843c:	movw	r1, #0
    8440:	str	r3, [sp]
    8444:	mvn	r0, #106	; 0x6a
    8448:	mov	r2, r6
    844c:	mov	r3, r8
    8450:	movt	r1, #0
    8454:	b	83ec <coda_cursor_read_uint64_partial_array+0xc8>
    8458:	ldr	r1, [r5, #40]	; 0x28
    845c:	ldr	r2, [r1, #8]
    8460:	cmp	r2, #2
    8464:	bne	8478 <coda_cursor_read_uint64_partial_array+0x154>
    8468:	ldr	r0, [pc, #992]	; 8850 <coda_cursor_read_uint64_partial_array+0x52c>
    846c:	ldr	r2, [pc, r0]
    8470:	bl	0 <__aeabi_read_tp>
    8474:	b	848c <coda_cursor_read_uint64_partial_array+0x168>
    8478:	bl	0 <__aeabi_read_tp>
    847c:	cmp	r2, #3
    8480:	bne	84bc <coda_cursor_read_uint64_partial_array+0x198>
    8484:	ldr	r2, [pc, #960]	; 884c <coda_cursor_read_uint64_partial_array+0x528>
    8488:	ldr	r2, [pc, r2]
    848c:	ldr	r0, [r0, r2]
    8490:	cmp	r0, #0
    8494:	beq	84bc <coda_cursor_read_uint64_partial_array+0x198>
    8498:	ldr	r2, [r1, #48]	; 0x30
    849c:	mov	r0, #9
    84a0:	cmp	r2, #0
    84a4:	beq	84bc <coda_cursor_read_uint64_partial_array+0x198>
    84a8:	bl	0 <coda_type_get_native_type_name>
    84ac:	movw	r1, #0
    84b0:	mov	r2, r0
    84b4:	movt	r1, #0
    84b8:	b	8424 <coda_cursor_read_uint64_partial_array+0x100>
    84bc:	ldr	r0, [r1, #12]
    84c0:	sub	r1, r0, #1
    84c4:	cmp	r1, #6
    84c8:	bhi	84a8 <coda_cursor_read_uint64_partial_array+0x184>
    84cc:	add	r2, pc, #0
    84d0:	ldr	pc, [r2, r1, lsl #2]
    84d4:	.word	0x000084f0
    84d8:	.word	0x000084a8
    84dc:	.word	0x00008578
    84e0:	.word	0x000084a8
    84e4:	.word	0x000085c4
    84e8:	.word	0x000084a8
    84ec:	.word	0x00008610
    84f0:	mov	r0, r7
    84f4:	mov	r1, r6
    84f8:	mov	r2, r8
    84fc:	mov	r3, r4
    8500:	bl	64e0 <read_uint8_partial_array>
    8504:	mov	r1, r0
    8508:	mvn	r0, #0
    850c:	cmp	r1, #0
    8510:	bne	8840 <coda_cursor_read_uint64_partial_array+0x51c>
    8514:	cmp	r8, #1
    8518:	blt	883c <coda_cursor_read_uint64_partial_array+0x518>
    851c:	mvn	r1, r8
    8520:	mvn	r0, #1
    8524:	mvn	r3, #1
    8528:	cmn	r1, #2
    852c:	movgt	r0, r1
    8530:	add	r0, r0, r8
    8534:	cmn	r0, #3
    8538:	bls	86c8 <coda_cursor_read_uint64_partial_array+0x3a4>
    853c:	mvn	r0, #7
    8540:	sub	r2, r8, #1
    8544:	mov	r1, #0
    8548:	add	r0, r0, r8, lsl #3
    854c:	ldrb	r3, [r4, r2]
    8550:	str	r3, [r4, r0]
    8554:	add	r3, r4, r0
    8558:	sub	r0, r0, #8
    855c:	str	r1, [r3, #4]
    8560:	sub	r3, r2, #1
    8564:	add	r2, r2, #1
    8568:	cmp	r2, #1
    856c:	mov	r2, r3
    8570:	bgt	854c <coda_cursor_read_uint64_partial_array+0x228>
    8574:	b	883c <coda_cursor_read_uint64_partial_array+0x518>
    8578:	mov	r0, r7
    857c:	mov	r1, r6
    8580:	mov	r2, r8
    8584:	mov	r3, r4
    8588:	bl	6dc4 <read_uint16_partial_array>
    858c:	mov	r1, r0
    8590:	mvn	r0, #0
    8594:	cmp	r1, #0
    8598:	bne	8840 <coda_cursor_read_uint64_partial_array+0x51c>
    859c:	cmp	r8, #1
    85a0:	blt	883c <coda_cursor_read_uint64_partial_array+0x518>
    85a4:	mvn	r0, r8
    85a8:	cmn	r0, #2
    85ac:	mvnle	r0, #1
    85b0:	add	r0, r0, r8
    85b4:	cmn	r0, #3
    85b8:	bls	87a4 <coda_cursor_read_uint64_partial_array+0x480>
    85bc:	mov	r0, r8
    85c0:	b	8808 <coda_cursor_read_uint64_partial_array+0x4e4>
    85c4:	mov	r0, r7
    85c8:	mov	r1, r6
    85cc:	mov	r2, r8
    85d0:	mov	r3, r4
    85d4:	bl	7944 <read_uint32_partial_array>
    85d8:	mov	r1, r0
    85dc:	mvn	r0, #0
    85e0:	cmp	r1, #0
    85e4:	bne	8840 <coda_cursor_read_uint64_partial_array+0x51c>
    85e8:	cmp	r8, #1
    85ec:	blt	883c <coda_cursor_read_uint64_partial_array+0x518>
    85f0:	mvn	r0, r8
    85f4:	cmn	r0, #2
    85f8:	mvnle	r0, #1
    85fc:	add	r0, r0, r8
    8600:	cmn	r0, #3
    8604:	bls	863c <coda_cursor_read_uint64_partial_array+0x318>
    8608:	mov	r0, r8
    860c:	b	868c <coda_cursor_read_uint64_partial_array+0x368>
    8610:	mov	r0, r7
    8614:	mov	r1, r6
    8618:	mov	r2, r8
    861c:	mov	r3, r4
    8620:	bl	8854 <read_uint64_partial_array>
    8624:	mov	r1, r0
    8628:	mvn	r0, #0
    862c:	cmp	r1, #0
    8630:	moveq	r0, #0
    8634:	sub	sp, fp, #24
    8638:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    863c:	add	ip, r0, #2
    8640:	add	r2, r4, r8, lsl #2
    8644:	mvn	r6, #7
    8648:	mvn	r5, #15
    864c:	bic	r1, ip, #1
    8650:	sub	r3, r2, #8
    8654:	add	r2, r4, r8, lsl #3
    8658:	sub	r7, r2, #16
    865c:	sub	r0, r8, r1
    8660:	mov	r2, r1
    8664:	vld1.32	{d16}, [r3], r6
    8668:	subs	r2, r2, #2
    866c:	vrev64.32	d16, d16
    8670:	vmovl.u32	q8, d16
    8674:	vorr	d18, d17, d17
    8678:	vorr	d19, d16, d16
    867c:	vst1.64	{d18-d19}, [r7], r5
    8680:	bne	8664 <coda_cursor_read_uint64_partial_array+0x340>
    8684:	cmp	ip, r1
    8688:	beq	883c <coda_cursor_read_uint64_partial_array+0x518>
    868c:	mvn	r1, #7
    8690:	sub	r2, r0, #1
    8694:	add	r1, r1, r0, lsl #3
    8698:	mov	r0, #0
    869c:	ldr	r3, [r4, r2, lsl #2]
    86a0:	str	r3, [r4, r1]
    86a4:	add	r3, r4, r1
    86a8:	sub	r1, r1, #8
    86ac:	str	r0, [r3, #4]
    86b0:	sub	r3, r2, #1
    86b4:	add	r2, r2, #1
    86b8:	cmp	r2, #1
    86bc:	mov	r2, r3
    86c0:	bgt	869c <coda_cursor_read_uint64_partial_array+0x378>
    86c4:	b	883c <coda_cursor_read_uint64_partial_array+0x518>
    86c8:	cmn	r1, #2
    86cc:	mov	r7, #8
    86d0:	sub	r2, r8, #1
    86d4:	movgt	r3, r1
    86d8:	add	r6, r4, r2, lsl #3
    86dc:	add	r3, r3, r8
    86e0:	add	r3, r3, #1
    86e4:	umull	r5, r7, r3, r7
    86e8:	cmp	r7, #0
    86ec:	movwne	r7, #1
    86f0:	cmp	r5, r6
    86f4:	bhi	853c <coda_cursor_read_uint64_partial_array+0x218>
    86f8:	cmp	r7, #0
    86fc:	bne	853c <coda_cursor_read_uint64_partial_array+0x218>
    8700:	add	r2, r4, r2
    8704:	cmp	r3, r2
    8708:	bhi	853c <coda_cursor_read_uint64_partial_array+0x218>
    870c:	mvn	r2, #1
    8710:	cmn	r1, #2
    8714:	movle	r1, r2
    8718:	sub	r1, r2, r1
    871c:	add	r2, r4, r8
    8720:	add	r3, r4, r1, lsl #3
    8724:	cmp	r2, r3
    8728:	bls	873c <coda_cursor_read_uint64_partial_array+0x418>
    872c:	add	r2, r4, r8, lsl #3
    8730:	add	r1, r4, r1
    8734:	cmp	r1, r2
    8738:	bcc	853c <coda_cursor_read_uint64_partial_array+0x218>
    873c:	add	ip, r0, #2
    8740:	sub	r2, r8, #2
    8744:	add	r7, sp, #4
    8748:	vmov.i64	q8, #0x00000000000000ff
    874c:	mvn	r6, #15
    8750:	bic	r5, ip, #1
    8754:	add	r1, r4, r2
    8758:	add	r3, r4, r2, lsl #3
    875c:	sub	r8, r8, r5
    8760:	mov	r2, r5
    8764:	ldrh	r0, [r1], #-2
    8768:	subs	r2, r2, #2
    876c:	strh	r0, [sp, #4]
    8770:	vld1.16	{d18[0]}, [r7 :16]
    8774:	vmovl.u8	q9, d18
    8778:	vmovl.u16	q9, d18
    877c:	vrev64.32	d18, d18
    8780:	vmovl.u32	q9, d18
    8784:	vand	q9, q9, q8
    8788:	vorr	d20, d19, d19
    878c:	vorr	d21, d18, d18
    8790:	vst1.64	{d20-d21}, [r3], r6
    8794:	bne	8764 <coda_cursor_read_uint64_partial_array+0x440>
    8798:	cmp	ip, r5
    879c:	bne	853c <coda_cursor_read_uint64_partial_array+0x218>
    87a0:	b	883c <coda_cursor_read_uint64_partial_array+0x518>
    87a4:	add	ip, r0, #2
    87a8:	add	r2, r4, r8, lsl #1
    87ac:	add	r6, sp, #8
    87b0:	vmov.i64	q8, #0x000000000000ffff
    87b4:	mvn	r5, #15
    87b8:	bic	lr, ip, #1
    87bc:	sub	r3, r2, #4
    87c0:	add	r2, r4, r8, lsl #3
    87c4:	sub	r7, r2, #16
    87c8:	sub	r0, r8, lr
    87cc:	mov	r2, lr
    87d0:	ldr	r1, [r3], #-4
    87d4:	subs	r2, r2, #2
    87d8:	str	r1, [sp, #8]
    87dc:	vld1.32	{d18[0]}, [r6 :32]
    87e0:	vmovl.u16	q9, d18
    87e4:	vrev64.32	d18, d18
    87e8:	vmovl.u32	q9, d18
    87ec:	vand	q9, q9, q8
    87f0:	vorr	d20, d19, d19
    87f4:	vorr	d21, d18, d18
    87f8:	vst1.64	{d20-d21}, [r7], r5
    87fc:	bne	87d0 <coda_cursor_read_uint64_partial_array+0x4ac>
    8800:	cmp	ip, lr
    8804:	beq	883c <coda_cursor_read_uint64_partial_array+0x518>
    8808:	add	r1, r4, r0, lsl #3
    880c:	add	r2, r4, r0, lsl #1
    8810:	add	r0, r0, #1
    8814:	mov	r3, #0
    8818:	sub	r1, r1, #8
    881c:	sub	r2, r2, #2
    8820:	ldrh	r4, [r2], #-2
    8824:	sub	r0, r0, #1
    8828:	cmp	r0, #1
    882c:	str	r4, [r1]
    8830:	str	r3, [r1, #4]
    8834:	sub	r1, r1, #8
    8838:	bgt	8820 <coda_cursor_read_uint64_partial_array+0x4fc>
    883c:	mov	r0, #0
    8840:	sub	sp, fp, #24
    8844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8848:	.word	0x000004b8
    884c:	.word	0x000003bc
    8850:	.word	0x000003dc

00008854 <read_uint64_partial_array>:
    8854:	push	{fp, lr}
    8858:	mov	fp, sp
    885c:	ldr	ip, [r0, #4]
    8860:	add	ip, r0, ip, lsl #4
    8864:	ldr	ip, [ip, #-8]
    8868:	ldr	ip, [ip]
    886c:	cmp	ip, #99	; 0x63
    8870:	ble	888c <read_uint64_partial_array+0x38>
    8874:	cmp	ip, #100	; 0x64
    8878:	beq	889c <read_uint64_partial_array+0x48>
    887c:	cmp	ip, #101	; 0x65
    8880:	bne	88a4 <read_uint64_partial_array+0x50>
    8884:	mvn	r0, #10
    8888:	b	88b0 <read_uint64_partial_array+0x5c>
    888c:	cmp	ip, #0
    8890:	bne	88c0 <read_uint64_partial_array+0x6c>
    8894:	pop	{fp, lr}
    8898:	b	0 <coda_ascii_cursor_read_uint64_partial_array>
    889c:	pop	{fp, lr}
    88a0:	b	0 <coda_mem_cursor_read_uint64_partial_array>
    88a4:	cmp	ip, #102	; 0x66
    88a8:	bne	88d0 <read_uint64_partial_array+0x7c>
    88ac:	mvn	r0, #12
    88b0:	mov	r1, #0
    88b4:	bl	0 <coda_set_error>
    88b8:	mvn	r0, #0
    88bc:	pop	{fp, pc}
    88c0:	cmp	ip, #1
    88c4:	bne	88d0 <read_uint64_partial_array+0x7c>
    88c8:	pop	{fp, lr}
    88cc:	b	0 <coda_bin_cursor_read_uint64_partial_array>
    88d0:	movw	r0, #0
    88d4:	movw	r1, #0
    88d8:	movw	r3, #0
    88dc:	movw	r2, #1638	; 0x666
    88e0:	movt	r0, #0
    88e4:	movt	r1, #0
    88e8:	movt	r3, #0
    88ec:	bl	0 <__assert_fail>

000088f0 <coda_cursor_read_float_partial_array>:
    88f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88f4:	add	fp, sp, #28
    88f8:	sub	sp, sp, #20
    88fc:	cmp	r0, #0
    8900:	beq	89a0 <coda_cursor_read_float_partial_array+0xb0>
    8904:	mov	r7, r0
    8908:	ldr	r0, [r0, #4]
    890c:	cmp	r0, #1
    8910:	blt	89a0 <coda_cursor_read_float_partial_array+0xb0>
    8914:	add	r0, r7, r0, lsl #4
    8918:	ldr	r4, [r0, #-8]
    891c:	cmp	r4, #0
    8920:	beq	89a0 <coda_cursor_read_float_partial_array+0xb0>
    8924:	mov	sl, r3
    8928:	cmp	r3, #0
    892c:	beq	89cc <coda_cursor_read_float_partial_array+0xdc>
    8930:	ldr	r0, [r4]
    8934:	mov	r5, r2
    8938:	mov	r6, r1
    893c:	cmp	r0, #99	; 0x63
    8940:	ldrhi	r4, [r4, #4]
    8944:	ldr	r0, [r4, #8]
    8948:	cmp	r0, #1
    894c:	bne	89e4 <coda_cursor_read_float_partial_array+0xf4>
    8950:	ldr	r0, [pc, #2416]	; 92c8 <coda_cursor_read_float_partial_array+0x9d8>
    8954:	ldr	r1, [pc, r0]
    8958:	bl	0 <__aeabi_read_tp>
    895c:	ldr	r0, [r0, r1]
    8960:	cmp	r0, #0
    8964:	beq	8a28 <coda_cursor_read_float_partial_array+0x138>
    8968:	add	r1, sp, #16
    896c:	mov	r0, r7
    8970:	bl	0 <coda_cursor_get_num_elements>
    8974:	cmp	r0, #0
    8978:	bne	89bc <coda_cursor_read_float_partial_array+0xcc>
    897c:	ldr	r3, [sp, #16]
    8980:	cmp	r6, #0
    8984:	cmpge	r3, r6
    8988:	bgt	8a00 <coda_cursor_read_float_partial_array+0x110>
    898c:	movw	r1, #0
    8990:	mvn	r0, #106	; 0x6a
    8994:	mov	r2, r6
    8998:	movt	r1, #0
    899c:	b	89b8 <coda_cursor_read_float_partial_array+0xc8>
    89a0:	movw	r1, #0
    89a4:	movw	r2, #0
    89a8:	mvn	r0, #99	; 0x63
    89ac:	movw	r3, #5105	; 0x13f1
    89b0:	movt	r1, #0
    89b4:	movt	r2, #0
    89b8:	bl	0 <coda_set_error>
    89bc:	mvn	r6, #0
    89c0:	mov	r0, r6
    89c4:	sub	sp, fp, #28
    89c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89cc:	movw	r1, #0
    89d0:	movw	r2, #0
    89d4:	mvn	r0, #99	; 0x63
    89d8:	movw	r3, #5110	; 0x13f6
    89dc:	movt	r1, #0
    89e0:	b	89b4 <coda_cursor_read_float_partial_array+0xc4>
    89e4:	bl	0 <coda_type_get_class_name>
    89e8:	movw	r1, #0
    89ec:	mov	r2, r0
    89f0:	movt	r1, #0
    89f4:	mvn	r0, #104	; 0x68
    89f8:	bl	0 <coda_set_error>
    89fc:	b	89bc <coda_cursor_read_float_partial_array+0xcc>
    8a00:	add	r0, r5, r6
    8a04:	cmp	r0, r3
    8a08:	ble	8a28 <coda_cursor_read_float_partial_array+0x138>
    8a0c:	movw	r1, #0
    8a10:	str	r3, [sp]
    8a14:	mvn	r0, #106	; 0x6a
    8a18:	mov	r2, r6
    8a1c:	mov	r3, r5
    8a20:	movt	r1, #0
    8a24:	b	89b8 <coda_cursor_read_float_partial_array+0xc8>
    8a28:	ldr	r2, [r4, #40]	; 0x28
    8a2c:	ldr	r4, [r2, #8]
    8a30:	ldr	r1, [r2, #12]
    8a34:	cmp	r4, #2
    8a38:	bne	8a4c <coda_cursor_read_float_partial_array+0x15c>
    8a3c:	ldr	r0, [pc, #2188]	; 92d0 <coda_cursor_read_float_partial_array+0x9e0>
    8a40:	ldr	r3, [pc, r0]
    8a44:	bl	0 <__aeabi_read_tp>
    8a48:	b	8a60 <coda_cursor_read_float_partial_array+0x170>
    8a4c:	bl	0 <__aeabi_read_tp>
    8a50:	cmp	r4, #3
    8a54:	bne	8a74 <coda_cursor_read_float_partial_array+0x184>
    8a58:	ldr	r3, [pc, #2156]	; 92cc <coda_cursor_read_float_partial_array+0x9dc>
    8a5c:	ldr	r3, [pc, r3]
    8a60:	ldr	r0, [r0, r3]
    8a64:	cmp	r0, #0
    8a68:	ldrne	r0, [r2, #48]	; 0x30
    8a6c:	cmpne	r0, #0
    8a70:	bne	8b38 <coda_cursor_read_float_partial_array+0x248>
    8a74:	cmp	r1, #9
    8a78:	bhi	8b94 <coda_cursor_read_float_partial_array+0x2a4>
    8a7c:	add	r0, pc, #0
    8a80:	ldr	pc, [r0, r1, lsl #2]
    8a84:	.word	0x00008aac
    8a88:	.word	0x00008bac
    8a8c:	.word	0x00008c34
    8a90:	.word	0x00008c80
    8a94:	.word	0x00008ccc
    8a98:	.word	0x00008d18
    8a9c:	.word	0x00008d64
    8aa0:	.word	0x00008dd4
    8aa4:	.word	0x00008e44
    8aa8:	.word	0x00008e68
    8aac:	mov	r0, r7
    8ab0:	mov	r1, r6
    8ab4:	mov	r2, r5
    8ab8:	mov	r3, sl
    8abc:	bl	6258 <read_int8_partial_array>
    8ac0:	mvn	r6, #0
    8ac4:	cmp	r0, #0
    8ac8:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8acc:	cmp	r5, #1
    8ad0:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8ad4:	mvn	r1, r5
    8ad8:	mvn	r0, #1
    8adc:	mvn	r3, #1
    8ae0:	cmn	r1, #2
    8ae4:	movgt	r0, r1
    8ae8:	add	r0, r0, r5
    8aec:	add	r0, r0, #2
    8af0:	cmp	r0, #4
    8af4:	bcs	9088 <coda_cursor_read_float_partial_array+0x798>
    8af8:	mvn	r0, #3
    8afc:	sub	r1, r5, #1
    8b00:	add	r0, r0, r5, lsl #2
    8b04:	add	r3, sl, r1
    8b08:	add	r2, sl, r0
    8b0c:	sub	r0, r0, #4
    8b10:	ldrsb	r3, [r3]
    8b14:	vmov	s0, r3
    8b18:	vcvt.f32.s32	s0, s0
    8b1c:	vstr	s0, [r2]
    8b20:	sub	r2, r1, #1
    8b24:	add	r1, r1, #1
    8b28:	cmp	r1, #1
    8b2c:	mov	r1, r2
    8b30:	bgt	8b04 <coda_cursor_read_float_partial_array+0x214>
    8b34:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    8b38:	lsl	r9, r5, #3
    8b3c:	mov	r0, r9
    8b40:	bl	0 <malloc>
    8b44:	cmp	r0, #0
    8b48:	beq	8ea8 <coda_cursor_read_float_partial_array+0x5b8>
    8b4c:	mov	r8, r0
    8b50:	mov	r0, r7
    8b54:	mov	r1, r6
    8b58:	mov	r2, r5
    8b5c:	mov	r3, r8
    8b60:	bl	92d4 <coda_cursor_read_double_partial_array>
    8b64:	cmp	r0, #0
    8b68:	bne	8e9c <coda_cursor_read_float_partial_array+0x5ac>
    8b6c:	cmp	r5, #1
    8b70:	blt	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8b74:	mvn	r0, r5
    8b78:	cmn	r0, #2
    8b7c:	mvnle	r0, #1
    8b80:	add	r0, r0, r5
    8b84:	cmn	r0, #2
    8b88:	bcc	8ec4 <coda_cursor_read_float_partial_array+0x5d4>
    8b8c:	mov	r0, r5
    8b90:	b	8f14 <coda_cursor_read_float_partial_array+0x624>
    8b94:	mov	r0, r1
    8b98:	bl	0 <coda_type_get_native_type_name>
    8b9c:	movw	r1, #0
    8ba0:	mov	r2, r0
    8ba4:	movt	r1, #0
    8ba8:	b	89f4 <coda_cursor_read_float_partial_array+0x104>
    8bac:	mov	r0, r7
    8bb0:	mov	r1, r6
    8bb4:	mov	r2, r5
    8bb8:	mov	r3, sl
    8bbc:	bl	64e0 <read_uint8_partial_array>
    8bc0:	mvn	r6, #0
    8bc4:	cmp	r0, #0
    8bc8:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8bcc:	cmp	r5, #1
    8bd0:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8bd4:	mvn	r1, r5
    8bd8:	mvn	r0, #1
    8bdc:	mvn	r3, #1
    8be0:	cmn	r1, #2
    8be4:	movgt	r0, r1
    8be8:	add	r0, r0, r5
    8bec:	add	r0, r0, #2
    8bf0:	cmp	r0, #4
    8bf4:	bcs	9164 <coda_cursor_read_float_partial_array+0x874>
    8bf8:	mvn	r0, #3
    8bfc:	sub	r1, r5, #1
    8c00:	add	r0, r0, r5, lsl #2
    8c04:	ldrb	r3, [sl, r1]
    8c08:	add	r2, sl, r0
    8c0c:	sub	r0, r0, #4
    8c10:	vmov	s0, r3
    8c14:	vcvt.f32.u32	s0, s0
    8c18:	vstr	s0, [r2]
    8c1c:	sub	r2, r1, #1
    8c20:	add	r1, r1, #1
    8c24:	cmp	r1, #1
    8c28:	mov	r1, r2
    8c2c:	bgt	8c04 <coda_cursor_read_float_partial_array+0x314>
    8c30:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    8c34:	mov	r0, r7
    8c38:	mov	r1, r6
    8c3c:	mov	r2, r5
    8c40:	mov	r3, sl
    8c44:	bl	69ec <read_int16_partial_array>
    8c48:	mvn	r6, #0
    8c4c:	cmp	r0, #0
    8c50:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8c54:	cmp	r5, #1
    8c58:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8c5c:	mvn	r0, r5
    8c60:	cmn	r0, #2
    8c64:	mvnle	r0, #1
    8c68:	add	r0, r0, r5
    8c6c:	add	r1, r0, #2
    8c70:	cmp	r1, #4
    8c74:	bcs	8f74 <coda_cursor_read_float_partial_array+0x684>
    8c78:	mov	r0, r5
    8c7c:	b	8fc4 <coda_cursor_read_float_partial_array+0x6d4>
    8c80:	mov	r0, r7
    8c84:	mov	r1, r6
    8c88:	mov	r2, r5
    8c8c:	mov	r3, sl
    8c90:	bl	6dc4 <read_uint16_partial_array>
    8c94:	mvn	r6, #0
    8c98:	cmp	r0, #0
    8c9c:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8ca0:	cmp	r5, #1
    8ca4:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8ca8:	mvn	r0, r5
    8cac:	cmn	r0, #2
    8cb0:	mvnle	r0, #1
    8cb4:	add	r0, r0, r5
    8cb8:	add	r1, r0, #2
    8cbc:	cmp	r1, #4
    8cc0:	bcs	8ffc <coda_cursor_read_float_partial_array+0x70c>
    8cc4:	mov	r0, r5
    8cc8:	b	904c <coda_cursor_read_float_partial_array+0x75c>
    8ccc:	mov	r0, r7
    8cd0:	mov	r1, r6
    8cd4:	mov	r2, r5
    8cd8:	mov	r3, sl
    8cdc:	bl	7490 <read_int32_partial_array>
    8ce0:	mvn	r6, #0
    8ce4:	cmp	r0, #0
    8ce8:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8cec:	cmp	r5, #1
    8cf0:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8cf4:	sub	r0, sl, #4
    8cf8:	mov	r1, r0
    8cfc:	ldr	r2, [r1, r5, lsl #2]!
    8d00:	subs	r5, r5, #1
    8d04:	vmov	s0, r2
    8d08:	vcvt.f32.s32	s0, s0
    8d0c:	vstr	s0, [r1]
    8d10:	bgt	8cf8 <coda_cursor_read_float_partial_array+0x408>
    8d14:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    8d18:	mov	r0, r7
    8d1c:	mov	r1, r6
    8d20:	mov	r2, r5
    8d24:	mov	r3, sl
    8d28:	bl	7944 <read_uint32_partial_array>
    8d2c:	mvn	r6, #0
    8d30:	cmp	r0, #0
    8d34:	bne	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8d38:	cmp	r5, #1
    8d3c:	blt	9080 <coda_cursor_read_float_partial_array+0x790>
    8d40:	sub	r0, sl, #4
    8d44:	mov	r1, r0
    8d48:	ldr	r2, [r1, r5, lsl #2]!
    8d4c:	subs	r5, r5, #1
    8d50:	vmov	s0, r2
    8d54:	vcvt.f32.u32	s0, s0
    8d58:	vstr	s0, [r1]
    8d5c:	bgt	8d44 <coda_cursor_read_float_partial_array+0x454>
    8d60:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    8d64:	lsl	r9, r5, #3
    8d68:	mov	r0, r9
    8d6c:	bl	0 <malloc>
    8d70:	cmp	r0, #0
    8d74:	beq	8ea8 <coda_cursor_read_float_partial_array+0x5b8>
    8d78:	mov	r8, r0
    8d7c:	mov	r0, r7
    8d80:	mov	r1, r6
    8d84:	mov	r2, r5
    8d88:	mov	r3, r8
    8d8c:	bl	827c <read_int64_partial_array>
    8d90:	cmp	r0, #0
    8d94:	bne	8e9c <coda_cursor_read_float_partial_array+0x5ac>
    8d98:	cmp	r5, #1
    8d9c:	blt	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8da0:	add	r0, sl, r5, lsl #2
    8da4:	sub	r4, r0, #4
    8da8:	add	r0, r8, r5, lsl #3
    8dac:	add	r5, r5, #1
    8db0:	sub	r6, r0, #8
    8db4:	ldrd	r0, [r6]
    8db8:	bl	0 <__aeabi_l2f>
    8dbc:	sub	r5, r5, #1
    8dc0:	str	r0, [r4], #-4
    8dc4:	sub	r6, r6, #8
    8dc8:	cmp	r5, #1
    8dcc:	bgt	8db4 <coda_cursor_read_float_partial_array+0x4c4>
    8dd0:	b	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8dd4:	lsl	r9, r5, #3
    8dd8:	mov	r0, r9
    8ddc:	bl	0 <malloc>
    8de0:	cmp	r0, #0
    8de4:	beq	8ea8 <coda_cursor_read_float_partial_array+0x5b8>
    8de8:	mov	r8, r0
    8dec:	mov	r0, r7
    8df0:	mov	r1, r6
    8df4:	mov	r2, r5
    8df8:	mov	r3, r8
    8dfc:	bl	8854 <read_uint64_partial_array>
    8e00:	cmp	r0, #0
    8e04:	bne	8e9c <coda_cursor_read_float_partial_array+0x5ac>
    8e08:	cmp	r5, #1
    8e0c:	blt	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8e10:	add	r0, sl, r5, lsl #2
    8e14:	sub	r4, r0, #4
    8e18:	add	r0, r8, r5, lsl #3
    8e1c:	add	r5, r5, #1
    8e20:	sub	r6, r0, #8
    8e24:	ldrd	r0, [r6]
    8e28:	bl	0 <__aeabi_ul2f>
    8e2c:	sub	r5, r5, #1
    8e30:	str	r0, [r4], #-4
    8e34:	sub	r6, r6, #8
    8e38:	cmp	r5, #1
    8e3c:	bgt	8e24 <coda_cursor_read_float_partial_array+0x534>
    8e40:	b	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8e44:	mov	r0, r7
    8e48:	mov	r1, r6
    8e4c:	mov	r2, r5
    8e50:	mov	r3, sl
    8e54:	bl	9d24 <read_float_partial_array>
    8e58:	mvn	r6, #0
    8e5c:	cmp	r0, #0
    8e60:	moveq	r6, #0
    8e64:	b	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8e68:	lsl	r9, r5, #3
    8e6c:	mov	r0, r9
    8e70:	bl	0 <malloc>
    8e74:	cmp	r0, #0
    8e78:	beq	8ea8 <coda_cursor_read_float_partial_array+0x5b8>
    8e7c:	mov	r8, r0
    8e80:	mov	r0, r7
    8e84:	mov	r1, r6
    8e88:	mov	r2, r5
    8e8c:	mov	r3, r8
    8e90:	bl	9de4 <read_double_partial_array>
    8e94:	cmp	r0, #0
    8e98:	beq	8f4c <coda_cursor_read_float_partial_array+0x65c>
    8e9c:	mov	r0, r8
    8ea0:	bl	0 <free>
    8ea4:	b	89bc <coda_cursor_read_float_partial_array+0xcc>
    8ea8:	movw	r1, #0
    8eac:	mvn	r0, #0
    8eb0:	mov	r2, r9
    8eb4:	mvn	r6, #0
    8eb8:	movt	r1, #0
    8ebc:	bl	0 <coda_set_error>
    8ec0:	b	89c0 <coda_cursor_read_float_partial_array+0xd0>
    8ec4:	add	r1, r0, #2
    8ec8:	add	r2, r8, r5, lsl #3
    8ecc:	mvn	r6, #15
    8ed0:	bic	r4, r1, #1
    8ed4:	sub	r3, r2, #16
    8ed8:	add	r2, sl, r5, lsl #2
    8edc:	sub	r0, r5, r4
    8ee0:	sub	r7, r2, #8
    8ee4:	mvn	r5, #7
    8ee8:	mov	r2, r4
    8eec:	vld1.64	{d1-d2}, [r3], r6
    8ef0:	subs	r2, r2, #2
    8ef4:	vorr	d3, d1, d1
    8ef8:	vcvt.f32.f64	s1, d1
    8efc:	vcvt.f32.f64	s0, d2
    8f00:	vrev64.32	d16, d0
    8f04:	vst1.32	{d16}, [r7], r5
    8f08:	bne	8eec <coda_cursor_read_float_partial_array+0x5fc>
    8f0c:	cmp	r1, r4
    8f10:	beq	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8f14:	add	r1, sl, r0, lsl #2
    8f18:	add	r2, r8, r0, lsl #3
    8f1c:	add	r0, r0, #1
    8f20:	sub	r1, r1, #4
    8f24:	sub	r2, r2, #8
    8f28:	vldr	d16, [r2]
    8f2c:	sub	r0, r0, #1
    8f30:	sub	r2, r2, #8
    8f34:	cmp	r0, #1
    8f38:	vcvt.f32.f64	s0, d16
    8f3c:	vstr	s0, [r1]
    8f40:	sub	r1, r1, #4
    8f44:	bgt	8f28 <coda_cursor_read_float_partial_array+0x638>
    8f48:	b	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8f4c:	cmp	r5, #1
    8f50:	blt	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    8f54:	mvn	r0, r5
    8f58:	cmn	r0, #2
    8f5c:	mvnle	r0, #1
    8f60:	add	r0, r0, r5
    8f64:	cmn	r0, #2
    8f68:	bcc	9234 <coda_cursor_read_float_partial_array+0x944>
    8f6c:	mov	r0, r5
    8f70:	b	9284 <coda_cursor_read_float_partial_array+0x994>
    8f74:	add	r2, sl, r5, lsl #1
    8f78:	bic	r4, r1, #3
    8f7c:	mvn	r6, #7
    8f80:	sub	r3, r2, #8
    8f84:	add	r2, sl, r5, lsl #2
    8f88:	sub	r0, r5, r4
    8f8c:	mvn	r5, #15
    8f90:	sub	r7, r2, #16
    8f94:	mov	r2, r4
    8f98:	vld1.16	{d16}, [r3], r6
    8f9c:	subs	r2, r2, #4
    8fa0:	vrev64.16	d16, d16
    8fa4:	vmovl.s16	q8, d16
    8fa8:	vcvt.f32.s32	q8, q8
    8fac:	vrev64.32	q8, q8
    8fb0:	vext.8	q8, q8, q8, #8
    8fb4:	vst1.32	{d16-d17}, [r7], r5
    8fb8:	bne	8f98 <coda_cursor_read_float_partial_array+0x6a8>
    8fbc:	cmp	r1, r4
    8fc0:	beq	9080 <coda_cursor_read_float_partial_array+0x790>
    8fc4:	add	r1, sl, r0, lsl #2
    8fc8:	add	r2, sl, r0, lsl #1
    8fcc:	add	r0, r0, #1
    8fd0:	sub	r1, r1, #4
    8fd4:	sub	r2, r2, #2
    8fd8:	ldrsh	r3, [r2], #-2
    8fdc:	sub	r0, r0, #1
    8fe0:	cmp	r0, #1
    8fe4:	vmov	s0, r3
    8fe8:	vcvt.f32.s32	s0, s0
    8fec:	vstr	s0, [r1]
    8ff0:	sub	r1, r1, #4
    8ff4:	bgt	8fd8 <coda_cursor_read_float_partial_array+0x6e8>
    8ff8:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    8ffc:	add	r2, sl, r5, lsl #1
    9000:	bic	r4, r1, #3
    9004:	mvn	r6, #7
    9008:	sub	r3, r2, #8
    900c:	add	r2, sl, r5, lsl #2
    9010:	sub	r0, r5, r4
    9014:	mvn	r5, #15
    9018:	sub	r7, r2, #16
    901c:	mov	r2, r4
    9020:	vld1.16	{d16}, [r3], r6
    9024:	subs	r2, r2, #4
    9028:	vrev64.16	d16, d16
    902c:	vmovl.u16	q8, d16
    9030:	vcvt.f32.u32	q8, q8
    9034:	vrev64.32	q8, q8
    9038:	vext.8	q8, q8, q8, #8
    903c:	vst1.32	{d16-d17}, [r7], r5
    9040:	bne	9020 <coda_cursor_read_float_partial_array+0x730>
    9044:	cmp	r1, r4
    9048:	beq	9080 <coda_cursor_read_float_partial_array+0x790>
    904c:	add	r1, sl, r0, lsl #2
    9050:	add	r2, sl, r0, lsl #1
    9054:	add	r0, r0, #1
    9058:	sub	r1, r1, #4
    905c:	sub	r2, r2, #2
    9060:	ldrh	r3, [r2], #-2
    9064:	sub	r0, r0, #1
    9068:	cmp	r0, #1
    906c:	vmov	s0, r3
    9070:	vcvt.f32.u32	s0, s0
    9074:	vstr	s0, [r1]
    9078:	sub	r1, r1, #4
    907c:	bgt	9060 <coda_cursor_read_float_partial_array+0x770>
    9080:	mov	r6, #0
    9084:	b	89c0 <coda_cursor_read_float_partial_array+0xd0>
    9088:	cmn	r1, #2
    908c:	mov	r7, #4
    9090:	sub	r2, r5, #1
    9094:	movgt	r3, r1
    9098:	add	r6, sl, r2, lsl #2
    909c:	add	r3, r3, r5
    90a0:	add	r3, r3, #1
    90a4:	umull	r4, r7, r3, r7
    90a8:	cmp	r7, #0
    90ac:	movwne	r7, #1
    90b0:	cmp	r4, r6
    90b4:	bhi	8af8 <coda_cursor_read_float_partial_array+0x208>
    90b8:	cmp	r7, #0
    90bc:	bne	8af8 <coda_cursor_read_float_partial_array+0x208>
    90c0:	add	r2, sl, r2
    90c4:	cmp	r3, r2
    90c8:	bhi	8af8 <coda_cursor_read_float_partial_array+0x208>
    90cc:	mvn	r2, #1
    90d0:	cmn	r1, #2
    90d4:	add	r3, sl, r5, lsl #2
    90d8:	movle	r1, r2
    90dc:	sub	r2, r2, r1
    90e0:	add	r1, sl, r5
    90e4:	add	r7, sl, r2, lsl #2
    90e8:	cmp	r1, r7
    90ec:	bls	90fc <coda_cursor_read_float_partial_array+0x80c>
    90f0:	add	r2, sl, r2
    90f4:	cmp	r2, r3
    90f8:	bcc	8af8 <coda_cursor_read_float_partial_array+0x208>
    90fc:	vmov.i16	d16, #8	; 0x0008
    9100:	bic	ip, r0, #3
    9104:	sub	r2, r1, #4
    9108:	sub	r3, r3, #16
    910c:	add	r7, sp, #8
    9110:	mvn	r6, #15
    9114:	sub	r5, r5, ip
    9118:	vneg.s16	d16, d16
    911c:	mov	r1, ip
    9120:	ldr	r4, [r2], #-4
    9124:	subs	r1, r1, #4
    9128:	str	r4, [sp, #8]
    912c:	vld1.32	{d17[0]}, [r7 :32]
    9130:	vmovl.u8	q9, d17
    9134:	vrev64.16	d17, d18
    9138:	vshl.s16	d17, d17, #8
    913c:	vshl.s16	d17, d17, d16
    9140:	vmovl.s16	q9, d17
    9144:	vcvt.f32.s32	q9, q9
    9148:	vrev64.32	q9, q9
    914c:	vext.8	q9, q9, q9, #8
    9150:	vst1.32	{d18-d19}, [r3], r6
    9154:	bne	9120 <coda_cursor_read_float_partial_array+0x830>
    9158:	cmp	r0, ip
    915c:	bne	8af8 <coda_cursor_read_float_partial_array+0x208>
    9160:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    9164:	cmn	r1, #2
    9168:	mov	r7, #4
    916c:	sub	r2, r5, #1
    9170:	movgt	r3, r1
    9174:	add	r6, sl, r2, lsl #2
    9178:	add	r3, r3, r5
    917c:	add	r3, r3, #1
    9180:	umull	r4, r7, r3, r7
    9184:	cmp	r7, #0
    9188:	movwne	r7, #1
    918c:	cmp	r4, r6
    9190:	bhi	8bf8 <coda_cursor_read_float_partial_array+0x308>
    9194:	cmp	r7, #0
    9198:	bne	8bf8 <coda_cursor_read_float_partial_array+0x308>
    919c:	add	r2, sl, r2
    91a0:	cmp	r3, r2
    91a4:	bhi	8bf8 <coda_cursor_read_float_partial_array+0x308>
    91a8:	mvn	r2, #1
    91ac:	cmn	r1, #2
    91b0:	add	r3, sl, r5, lsl #2
    91b4:	movle	r1, r2
    91b8:	sub	r2, r2, r1
    91bc:	add	r1, sl, r5
    91c0:	add	r7, sl, r2, lsl #2
    91c4:	cmp	r1, r7
    91c8:	bls	91d8 <coda_cursor_read_float_partial_array+0x8e8>
    91cc:	add	r2, sl, r2
    91d0:	cmp	r2, r3
    91d4:	bcc	8bf8 <coda_cursor_read_float_partial_array+0x308>
    91d8:	bic	ip, r0, #3
    91dc:	sub	r2, r1, #4
    91e0:	sub	r3, r3, #16
    91e4:	add	r7, sp, #12
    91e8:	mvn	r6, #15
    91ec:	sub	r5, r5, ip
    91f0:	mov	r1, ip
    91f4:	ldr	r4, [r2], #-4
    91f8:	subs	r1, r1, #4
    91fc:	str	r4, [sp, #12]
    9200:	vld1.32	{d16[0]}, [r7 :32]
    9204:	vmovl.u8	q8, d16
    9208:	vrev64.16	d16, d16
    920c:	vbic.i16	d16, #65280	; 0xff00
    9210:	vmovl.u16	q8, d16
    9214:	vcvt.f32.u32	q8, q8
    9218:	vrev64.32	q8, q8
    921c:	vext.8	q8, q8, q8, #8
    9220:	vst1.32	{d16-d17}, [r3], r6
    9224:	bne	91f4 <coda_cursor_read_float_partial_array+0x904>
    9228:	cmp	r0, ip
    922c:	bne	8bf8 <coda_cursor_read_float_partial_array+0x308>
    9230:	b	9080 <coda_cursor_read_float_partial_array+0x790>
    9234:	add	r1, r0, #2
    9238:	add	r2, r8, r5, lsl #3
    923c:	mvn	r6, #15
    9240:	bic	r4, r1, #1
    9244:	sub	r3, r2, #16
    9248:	add	r2, sl, r5, lsl #2
    924c:	sub	r0, r5, r4
    9250:	sub	r7, r2, #8
    9254:	mvn	r5, #7
    9258:	mov	r2, r4
    925c:	vld1.64	{d1-d2}, [r3], r6
    9260:	subs	r2, r2, #2
    9264:	vorr	d3, d1, d1
    9268:	vcvt.f32.f64	s1, d1
    926c:	vcvt.f32.f64	s0, d2
    9270:	vrev64.32	d16, d0
    9274:	vst1.32	{d16}, [r7], r5
    9278:	bne	925c <coda_cursor_read_float_partial_array+0x96c>
    927c:	cmp	r1, r4
    9280:	beq	92b8 <coda_cursor_read_float_partial_array+0x9c8>
    9284:	add	r1, sl, r0, lsl #2
    9288:	add	r2, r8, r0, lsl #3
    928c:	add	r0, r0, #1
    9290:	sub	r1, r1, #4
    9294:	sub	r2, r2, #8
    9298:	vldr	d16, [r2]
    929c:	sub	r0, r0, #1
    92a0:	sub	r2, r2, #8
    92a4:	cmp	r0, #1
    92a8:	vcvt.f32.f64	s0, d16
    92ac:	vstr	s0, [r1]
    92b0:	sub	r1, r1, #4
    92b4:	bgt	9298 <coda_cursor_read_float_partial_array+0x9a8>
    92b8:	mov	r0, r8
    92bc:	bl	0 <free>
    92c0:	mov	r6, #0
    92c4:	b	89c0 <coda_cursor_read_float_partial_array+0xd0>
    92c8:	.word	0x0000096c
    92cc:	.word	0x00000868
    92d0:	.word	0x00000888

000092d4 <coda_cursor_read_double_partial_array>:
    92d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    92d8:	add	fp, sp, #24
    92dc:	sub	sp, sp, #24
    92e0:	cmp	r0, #0
    92e4:	beq	9384 <coda_cursor_read_double_partial_array+0xb0>
    92e8:	mov	r7, r0
    92ec:	ldr	r0, [r0, #4]
    92f0:	cmp	r0, #1
    92f4:	blt	9384 <coda_cursor_read_double_partial_array+0xb0>
    92f8:	add	r0, r7, r0, lsl #4
    92fc:	ldr	r4, [r0, #-8]
    9300:	cmp	r4, #0
    9304:	beq	9384 <coda_cursor_read_double_partial_array+0xb0>
    9308:	mov	r5, r3
    930c:	cmp	r3, #0
    9310:	beq	93b0 <coda_cursor_read_double_partial_array+0xdc>
    9314:	ldr	r0, [r4]
    9318:	mov	r9, r2
    931c:	mov	r6, r1
    9320:	cmp	r0, #99	; 0x63
    9324:	ldrhi	r4, [r4, #4]
    9328:	ldr	r0, [r4, #8]
    932c:	cmp	r0, #1
    9330:	bne	93c8 <coda_cursor_read_double_partial_array+0xf4>
    9334:	ldr	r0, [pc, #2524]	; 9d18 <coda_cursor_read_double_partial_array+0xa44>
    9338:	ldr	r1, [pc, r0]
    933c:	bl	0 <__aeabi_read_tp>
    9340:	ldr	r0, [r0, r1]
    9344:	cmp	r0, #0
    9348:	beq	940c <coda_cursor_read_double_partial_array+0x138>
    934c:	add	r1, sp, #20
    9350:	mov	r0, r7
    9354:	bl	0 <coda_cursor_get_num_elements>
    9358:	cmp	r0, #0
    935c:	bne	93a0 <coda_cursor_read_double_partial_array+0xcc>
    9360:	ldr	r3, [sp, #20]
    9364:	cmp	r6, #0
    9368:	cmpge	r3, r6
    936c:	bgt	93e4 <coda_cursor_read_double_partial_array+0x110>
    9370:	movw	r1, #0
    9374:	mvn	r0, #106	; 0x6a
    9378:	mov	r2, r6
    937c:	movt	r1, #0
    9380:	b	939c <coda_cursor_read_double_partial_array+0xc8>
    9384:	movw	r1, #0
    9388:	movw	r2, #0
    938c:	mvn	r0, #99	; 0x63
    9390:	movw	r3, #5355	; 0x14eb
    9394:	movt	r1, #0
    9398:	movt	r2, #0
    939c:	bl	0 <coda_set_error>
    93a0:	mvn	r6, #0
    93a4:	mov	r0, r6
    93a8:	sub	sp, fp, #24
    93ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    93b0:	movw	r1, #0
    93b4:	movw	r2, #0
    93b8:	mvn	r0, #99	; 0x63
    93bc:	movw	r3, #5360	; 0x14f0
    93c0:	movt	r1, #0
    93c4:	b	9398 <coda_cursor_read_double_partial_array+0xc4>
    93c8:	bl	0 <coda_type_get_class_name>
    93cc:	movw	r1, #0
    93d0:	mov	r2, r0
    93d4:	movt	r1, #0
    93d8:	mvn	r0, #104	; 0x68
    93dc:	bl	0 <coda_set_error>
    93e0:	b	93a0 <coda_cursor_read_double_partial_array+0xcc>
    93e4:	add	r0, r9, r6
    93e8:	cmp	r0, r3
    93ec:	ble	940c <coda_cursor_read_double_partial_array+0x138>
    93f0:	movw	r1, #0
    93f4:	str	r3, [sp]
    93f8:	mvn	r0, #106	; 0x6a
    93fc:	mov	r2, r6
    9400:	mov	r3, r9
    9404:	movt	r1, #0
    9408:	b	939c <coda_cursor_read_double_partial_array+0xc8>
    940c:	ldr	r2, [r4, #40]	; 0x28
    9410:	ldr	r4, [r2, #8]
    9414:	ldr	r1, [r2, #12]
    9418:	cmp	r4, #2
    941c:	bne	9448 <coda_cursor_read_double_partial_array+0x174>
    9420:	ldr	r0, [pc, #2296]	; 9d20 <coda_cursor_read_double_partial_array+0xa4c>
    9424:	ldr	r3, [pc, r0]
    9428:	bl	0 <__aeabi_read_tp>
    942c:	ldr	r0, [r0, r3]
    9430:	cmp	r0, #0
    9434:	beq	948c <coda_cursor_read_double_partial_array+0x1b8>
    9438:	ldr	r8, [r2, #48]	; 0x30
    943c:	cmp	r1, #9
    9440:	bls	9498 <coda_cursor_read_double_partial_array+0x1c4>
    9444:	b	9474 <coda_cursor_read_double_partial_array+0x1a0>
    9448:	bl	0 <__aeabi_read_tp>
    944c:	mov	r8, #0
    9450:	cmp	r4, #3
    9454:	bne	9490 <coda_cursor_read_double_partial_array+0x1bc>
    9458:	ldr	r3, [pc, #2236]	; 9d1c <coda_cursor_read_double_partial_array+0xa48>
    945c:	ldr	r3, [pc, r3]
    9460:	ldr	r0, [r0, r3]
    9464:	cmp	r0, #0
    9468:	ldrne	r8, [r2, #48]	; 0x30
    946c:	cmp	r1, #9
    9470:	bls	9498 <coda_cursor_read_double_partial_array+0x1c4>
    9474:	mov	r0, r1
    9478:	bl	0 <coda_type_get_native_type_name>
    947c:	movw	r1, #0
    9480:	mov	r2, r0
    9484:	movt	r1, #0
    9488:	b	93d8 <coda_cursor_read_double_partial_array+0x104>
    948c:	mov	r8, #0
    9490:	cmp	r1, #9
    9494:	bhi	9474 <coda_cursor_read_double_partial_array+0x1a0>
    9498:	add	r0, pc, #0
    949c:	ldr	pc, [r0, r1, lsl #2]
    94a0:	.word	0x000094c8
    94a4:	.word	0x00009648
    94a8:	.word	0x000097bc
    94ac:	.word	0x000098a8
    94b0:	.word	0x0000998c
    94b4:	.word	0x00009a60
    94b8:	.word	0x00009b34
    94bc:	.word	0x00009b84
    94c0:	.word	0x00009bd4
    94c4:	.word	0x00009ca4
    94c8:	mov	r0, r7
    94cc:	mov	r1, r6
    94d0:	mov	r2, r9
    94d4:	mov	r3, r5
    94d8:	bl	6258 <read_int8_partial_array>
    94dc:	mvn	r6, #0
    94e0:	cmp	r0, #0
    94e4:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    94e8:	cmp	r9, #1
    94ec:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    94f0:	mvn	r2, r9
    94f4:	mvn	r0, #1
    94f8:	mvn	r7, #1
    94fc:	cmn	r2, #2
    9500:	movgt	r0, r2
    9504:	add	r1, r0, r9
    9508:	mov	r0, r9
    950c:	cmn	r1, #3
    9510:	bhi	9608 <coda_cursor_read_double_partial_array+0x334>
    9514:	cmn	r2, #2
    9518:	mov	r6, #8
    951c:	sub	r3, r9, #1
    9520:	movgt	r7, r2
    9524:	add	r0, r5, r3, lsl #3
    9528:	add	r7, r7, r9
    952c:	add	r7, r7, #1
    9530:	umull	r4, r6, r7, r6
    9534:	cmp	r6, #0
    9538:	movwne	r6, #1
    953c:	cmp	r4, r0
    9540:	mov	r0, r9
    9544:	bhi	9608 <coda_cursor_read_double_partial_array+0x334>
    9548:	cmp	r6, #0
    954c:	mov	r0, r9
    9550:	bne	9608 <coda_cursor_read_double_partial_array+0x334>
    9554:	add	r0, r5, r3
    9558:	cmp	r7, r0
    955c:	mov	r0, r9
    9560:	bhi	9608 <coda_cursor_read_double_partial_array+0x334>
    9564:	mvn	r0, #1
    9568:	cmn	r2, #2
    956c:	movle	r2, r0
    9570:	sub	r0, r0, r2
    9574:	add	r2, r5, r9
    9578:	add	r3, r5, r0, lsl #3
    957c:	cmp	r2, r3
    9580:	bls	9598 <coda_cursor_read_double_partial_array+0x2c4>
    9584:	add	r2, r5, r9, lsl #3
    9588:	add	r0, r5, r0
    958c:	cmp	r0, r2
    9590:	mov	r0, r9
    9594:	bcc	9608 <coda_cursor_read_double_partial_array+0x334>
    9598:	add	ip, r1, #2
    959c:	sub	r0, r9, #2
    95a0:	vmov.i32	d16, #24	; 0x00000018
    95a4:	add	r6, sp, #4
    95a8:	mvn	r4, #15
    95ac:	bic	lr, ip, #1
    95b0:	add	r2, r5, r0
    95b4:	add	r7, r5, r0, lsl #3
    95b8:	vneg.s32	d16, d16
    95bc:	sub	r0, r9, lr
    95c0:	mov	r3, lr
    95c4:	ldrh	r1, [r2], #-2
    95c8:	subs	r3, r3, #2
    95cc:	strh	r1, [sp, #4]
    95d0:	vld1.16	{d17[0]}, [r6 :16]
    95d4:	vmovl.u8	q9, d17
    95d8:	vmovl.u16	q9, d18
    95dc:	vrev64.32	d17, d18
    95e0:	vshl.s32	d17, d17, #24
    95e4:	vshl.s32	d0, d17, d16
    95e8:	vcvt.f64.s32	d19, s1
    95ec:	vcvt.f64.s32	d18, s0
    95f0:	vmov.f64	d20, d19
    95f4:	vmov.f64	d21, d18
    95f8:	vst1.64	{d20-d21}, [r7], r4
    95fc:	bne	95c4 <coda_cursor_read_double_partial_array+0x2f0>
    9600:	cmp	ip, lr
    9604:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9608:	mvn	r1, #7
    960c:	add	r1, r1, r0, lsl #3
    9610:	sub	r0, r0, #1
    9614:	add	r3, r5, r0
    9618:	add	r2, r5, r1
    961c:	sub	r1, r1, #8
    9620:	ldrsb	r3, [r3]
    9624:	vmov	s0, r3
    9628:	vcvt.f64.s32	d16, s0
    962c:	vstr	d16, [r2]
    9630:	sub	r2, r0, #1
    9634:	add	r0, r0, #1
    9638:	cmp	r0, #1
    963c:	mov	r0, r2
    9640:	bgt	9614 <coda_cursor_read_double_partial_array+0x340>
    9644:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9648:	mov	r0, r7
    964c:	mov	r1, r6
    9650:	mov	r2, r9
    9654:	mov	r3, r5
    9658:	bl	64e0 <read_uint8_partial_array>
    965c:	mvn	r6, #0
    9660:	cmp	r0, #0
    9664:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9668:	cmp	r9, #1
    966c:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    9670:	mvn	r2, r9
    9674:	mvn	r0, #1
    9678:	mvn	r7, #1
    967c:	cmn	r2, #2
    9680:	movgt	r0, r2
    9684:	add	r1, r0, r9
    9688:	mov	r0, r9
    968c:	cmn	r1, #3
    9690:	bhi	9780 <coda_cursor_read_double_partial_array+0x4ac>
    9694:	cmn	r2, #2
    9698:	mov	r6, #8
    969c:	sub	r3, r9, #1
    96a0:	movgt	r7, r2
    96a4:	add	r0, r5, r3, lsl #3
    96a8:	add	r7, r7, r9
    96ac:	add	r7, r7, #1
    96b0:	umull	r4, r6, r7, r6
    96b4:	cmp	r6, #0
    96b8:	movwne	r6, #1
    96bc:	cmp	r4, r0
    96c0:	mov	r0, r9
    96c4:	bhi	9780 <coda_cursor_read_double_partial_array+0x4ac>
    96c8:	cmp	r6, #0
    96cc:	mov	r0, r9
    96d0:	bne	9780 <coda_cursor_read_double_partial_array+0x4ac>
    96d4:	add	r0, r5, r3
    96d8:	cmp	r7, r0
    96dc:	mov	r0, r9
    96e0:	bhi	9780 <coda_cursor_read_double_partial_array+0x4ac>
    96e4:	mvn	r0, #1
    96e8:	cmn	r2, #2
    96ec:	movle	r2, r0
    96f0:	sub	r0, r0, r2
    96f4:	add	r2, r5, r9
    96f8:	add	r3, r5, r0, lsl #3
    96fc:	cmp	r2, r3
    9700:	bls	9718 <coda_cursor_read_double_partial_array+0x444>
    9704:	add	r2, r5, r9, lsl #3
    9708:	add	r0, r5, r0
    970c:	cmp	r0, r2
    9710:	mov	r0, r9
    9714:	bcc	9780 <coda_cursor_read_double_partial_array+0x4ac>
    9718:	add	ip, r1, #2
    971c:	sub	r0, r9, #2
    9720:	add	r6, sp, #8
    9724:	vmov.i32	d16, #255	; 0x000000ff
    9728:	mvn	r4, #15
    972c:	bic	lr, ip, #1
    9730:	add	r2, r5, r0
    9734:	add	r7, r5, r0, lsl #3
    9738:	sub	r0, r9, lr
    973c:	mov	r3, lr
    9740:	ldrh	r1, [r2], #-2
    9744:	subs	r3, r3, #2
    9748:	strh	r1, [sp, #8]
    974c:	vld1.16	{d17[0]}, [r6 :16]
    9750:	vmovl.u8	q9, d17
    9754:	vmovl.u16	q9, d18
    9758:	vrev64.32	d17, d18
    975c:	vand	d0, d17, d16
    9760:	vcvt.f64.u32	d19, s1
    9764:	vcvt.f64.u32	d18, s0
    9768:	vmov.f64	d20, d19
    976c:	vmov.f64	d21, d18
    9770:	vst1.64	{d20-d21}, [r7], r4
    9774:	bne	9740 <coda_cursor_read_double_partial_array+0x46c>
    9778:	cmp	ip, lr
    977c:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9780:	mvn	r1, #7
    9784:	add	r1, r1, r0, lsl #3
    9788:	sub	r0, r0, #1
    978c:	ldrb	r3, [r5, r0]
    9790:	add	r2, r5, r1
    9794:	sub	r1, r1, #8
    9798:	vmov	s0, r3
    979c:	vcvt.f64.u32	d16, s0
    97a0:	vstr	d16, [r2]
    97a4:	sub	r2, r0, #1
    97a8:	add	r0, r0, #1
    97ac:	cmp	r0, #1
    97b0:	mov	r0, r2
    97b4:	bgt	978c <coda_cursor_read_double_partial_array+0x4b8>
    97b8:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    97bc:	mov	r0, r7
    97c0:	mov	r1, r6
    97c4:	mov	r2, r9
    97c8:	mov	r3, r5
    97cc:	bl	69ec <read_int16_partial_array>
    97d0:	mvn	r6, #0
    97d4:	cmp	r0, #0
    97d8:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    97dc:	cmp	r9, #1
    97e0:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    97e4:	mvn	r0, r9
    97e8:	cmn	r0, #2
    97ec:	mvnle	r0, #1
    97f0:	add	r1, r0, r9
    97f4:	mov	r0, r9
    97f8:	cmn	r1, #3
    97fc:	bhi	9870 <coda_cursor_read_double_partial_array+0x59c>
    9800:	add	ip, r1, #2
    9804:	add	r2, r5, r9, lsl #1
    9808:	vmov.i32	d16, #16	; 0x00000010
    980c:	add	r6, sp, #12
    9810:	mvn	r4, #15
    9814:	bic	lr, ip, #1
    9818:	sub	r3, r2, #4
    981c:	add	r2, r5, r9, lsl #3
    9820:	vneg.s32	d16, d16
    9824:	sub	r7, r2, #16
    9828:	sub	r0, r9, lr
    982c:	mov	r2, lr
    9830:	ldr	r1, [r3], #-4
    9834:	subs	r2, r2, #2
    9838:	str	r1, [sp, #12]
    983c:	vld1.32	{d17[0]}, [r6 :32]
    9840:	vmovl.u16	q9, d17
    9844:	vrev64.32	d17, d18
    9848:	vshl.s32	d17, d17, #16
    984c:	vshl.s32	d0, d17, d16
    9850:	vcvt.f64.s32	d19, s1
    9854:	vcvt.f64.s32	d18, s0
    9858:	vmov.f64	d20, d19
    985c:	vmov.f64	d21, d18
    9860:	vst1.64	{d20-d21}, [r7], r4
    9864:	bne	9830 <coda_cursor_read_double_partial_array+0x55c>
    9868:	cmp	ip, lr
    986c:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9870:	add	r1, r5, r0, lsl #3
    9874:	add	r2, r5, r0, lsl #1
    9878:	add	r0, r0, #1
    987c:	sub	r1, r1, #8
    9880:	sub	r2, r2, #2
    9884:	ldrsh	r3, [r2], #-2
    9888:	sub	r0, r0, #1
    988c:	cmp	r0, #1
    9890:	vmov	s0, r3
    9894:	vcvt.f64.s32	d16, s0
    9898:	vstr	d16, [r1]
    989c:	sub	r1, r1, #8
    98a0:	bgt	9884 <coda_cursor_read_double_partial_array+0x5b0>
    98a4:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    98a8:	mov	r0, r7
    98ac:	mov	r1, r6
    98b0:	mov	r2, r9
    98b4:	mov	r3, r5
    98b8:	bl	6dc4 <read_uint16_partial_array>
    98bc:	mvn	r6, #0
    98c0:	cmp	r0, #0
    98c4:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    98c8:	cmp	r9, #1
    98cc:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    98d0:	mvn	r0, r9
    98d4:	cmn	r0, #2
    98d8:	mvnle	r0, #1
    98dc:	add	r1, r0, r9
    98e0:	mov	r0, r9
    98e4:	cmn	r1, #3
    98e8:	bhi	9954 <coda_cursor_read_double_partial_array+0x680>
    98ec:	add	ip, r1, #2
    98f0:	add	r2, r5, r9, lsl #1
    98f4:	add	r6, sp, #16
    98f8:	vmov.i32	d16, #65535	; 0x0000ffff
    98fc:	mvn	r4, #15
    9900:	bic	lr, ip, #1
    9904:	sub	r3, r2, #4
    9908:	add	r2, r5, r9, lsl #3
    990c:	sub	r7, r2, #16
    9910:	sub	r0, r9, lr
    9914:	mov	r2, lr
    9918:	ldr	r1, [r3], #-4
    991c:	subs	r2, r2, #2
    9920:	str	r1, [sp, #16]
    9924:	vld1.32	{d17[0]}, [r6 :32]
    9928:	vmovl.u16	q9, d17
    992c:	vrev64.32	d17, d18
    9930:	vand	d0, d17, d16
    9934:	vcvt.f64.u32	d19, s1
    9938:	vcvt.f64.u32	d18, s0
    993c:	vmov.f64	d20, d19
    9940:	vmov.f64	d21, d18
    9944:	vst1.64	{d20-d21}, [r7], r4
    9948:	bne	9918 <coda_cursor_read_double_partial_array+0x644>
    994c:	cmp	ip, lr
    9950:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9954:	add	r1, r5, r0, lsl #3
    9958:	add	r2, r5, r0, lsl #1
    995c:	add	r0, r0, #1
    9960:	sub	r1, r1, #8
    9964:	sub	r2, r2, #2
    9968:	ldrh	r3, [r2], #-2
    996c:	sub	r0, r0, #1
    9970:	cmp	r0, #1
    9974:	vmov	s0, r3
    9978:	vcvt.f64.u32	d16, s0
    997c:	vstr	d16, [r1]
    9980:	sub	r1, r1, #8
    9984:	bgt	9968 <coda_cursor_read_double_partial_array+0x694>
    9988:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    998c:	mov	r0, r7
    9990:	mov	r1, r6
    9994:	mov	r2, r9
    9998:	mov	r3, r5
    999c:	bl	7490 <read_int32_partial_array>
    99a0:	mvn	r6, #0
    99a4:	cmp	r0, #0
    99a8:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    99ac:	cmp	r9, #1
    99b0:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    99b4:	mvn	r0, r9
    99b8:	cmn	r0, #2
    99bc:	mvnle	r0, #1
    99c0:	add	r1, r0, r9
    99c4:	mov	r0, r9
    99c8:	cmn	r1, #3
    99cc:	bhi	9a24 <coda_cursor_read_double_partial_array+0x750>
    99d0:	add	ip, r1, #2
    99d4:	add	r2, r5, r9, lsl #2
    99d8:	mvn	r6, #7
    99dc:	mvn	r4, #15
    99e0:	bic	r1, ip, #1
    99e4:	sub	r3, r2, #8
    99e8:	add	r2, r5, r9, lsl #3
    99ec:	sub	r7, r2, #16
    99f0:	sub	r0, r9, r1
    99f4:	mov	r2, r1
    99f8:	vld1.32	{d16}, [r3], r6
    99fc:	subs	r2, r2, #2
    9a00:	vrev64.32	d0, d16
    9a04:	vcvt.f64.s32	d17, s1
    9a08:	vcvt.f64.s32	d16, s0
    9a0c:	vmov.f64	d18, d17
    9a10:	vmov.f64	d19, d16
    9a14:	vst1.64	{d18-d19}, [r7], r4
    9a18:	bne	99f8 <coda_cursor_read_double_partial_array+0x724>
    9a1c:	cmp	ip, r1
    9a20:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9a24:	mvn	r1, #7
    9a28:	add	r1, r1, r0, lsl #3
    9a2c:	sub	r0, r0, #1
    9a30:	add	r2, r5, r0, lsl #2
    9a34:	vldr	s0, [r2]
    9a38:	add	r2, r5, r1
    9a3c:	sub	r1, r1, #8
    9a40:	vcvt.f64.s32	d16, s0
    9a44:	vstr	d16, [r2]
    9a48:	sub	r2, r0, #1
    9a4c:	add	r0, r0, #1
    9a50:	cmp	r0, #1
    9a54:	mov	r0, r2
    9a58:	bgt	9a30 <coda_cursor_read_double_partial_array+0x75c>
    9a5c:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9a60:	mov	r0, r7
    9a64:	mov	r1, r6
    9a68:	mov	r2, r9
    9a6c:	mov	r3, r5
    9a70:	bl	7944 <read_uint32_partial_array>
    9a74:	mvn	r6, #0
    9a78:	cmp	r0, #0
    9a7c:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9a80:	cmp	r9, #1
    9a84:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    9a88:	mvn	r0, r9
    9a8c:	cmn	r0, #2
    9a90:	mvnle	r0, #1
    9a94:	add	r1, r0, r9
    9a98:	mov	r0, r9
    9a9c:	cmn	r1, #3
    9aa0:	bhi	9af8 <coda_cursor_read_double_partial_array+0x824>
    9aa4:	add	ip, r1, #2
    9aa8:	add	r2, r5, r9, lsl #2
    9aac:	mvn	r6, #7
    9ab0:	mvn	r4, #15
    9ab4:	bic	r1, ip, #1
    9ab8:	sub	r3, r2, #8
    9abc:	add	r2, r5, r9, lsl #3
    9ac0:	sub	r7, r2, #16
    9ac4:	sub	r0, r9, r1
    9ac8:	mov	r2, r1
    9acc:	vld1.32	{d16}, [r3], r6
    9ad0:	subs	r2, r2, #2
    9ad4:	vrev64.32	d0, d16
    9ad8:	vcvt.f64.u32	d17, s1
    9adc:	vcvt.f64.u32	d16, s0
    9ae0:	vmov.f64	d18, d17
    9ae4:	vmov.f64	d19, d16
    9ae8:	vst1.64	{d18-d19}, [r7], r4
    9aec:	bne	9acc <coda_cursor_read_double_partial_array+0x7f8>
    9af0:	cmp	ip, r1
    9af4:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9af8:	mvn	r1, #7
    9afc:	add	r1, r1, r0, lsl #3
    9b00:	sub	r0, r0, #1
    9b04:	add	r2, r5, r0, lsl #2
    9b08:	vldr	s0, [r2]
    9b0c:	add	r2, r5, r1
    9b10:	sub	r1, r1, #8
    9b14:	vcvt.f64.u32	d16, s0
    9b18:	vstr	d16, [r2]
    9b1c:	sub	r2, r0, #1
    9b20:	add	r0, r0, #1
    9b24:	cmp	r0, #1
    9b28:	mov	r0, r2
    9b2c:	bgt	9b04 <coda_cursor_read_double_partial_array+0x830>
    9b30:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9b34:	mov	r0, r7
    9b38:	mov	r1, r6
    9b3c:	mov	r2, r9
    9b40:	mov	r3, r5
    9b44:	bl	827c <read_int64_partial_array>
    9b48:	mvn	r6, #0
    9b4c:	cmp	r0, #0
    9b50:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9b54:	cmp	r9, #1
    9b58:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    9b5c:	sub	r4, r5, #8
    9b60:	mov	r6, r9
    9b64:	mov	r7, r4
    9b68:	ldr	r0, [r7, r6, lsl #3]!
    9b6c:	ldr	r1, [r7, #4]
    9b70:	bl	0 <__aeabi_l2d>
    9b74:	subs	r6, r6, #1
    9b78:	strd	r0, [r7]
    9b7c:	bgt	9b64 <coda_cursor_read_double_partial_array+0x890>
    9b80:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9b84:	mov	r0, r7
    9b88:	mov	r1, r6
    9b8c:	mov	r2, r9
    9b90:	mov	r3, r5
    9b94:	bl	8854 <read_uint64_partial_array>
    9b98:	mvn	r6, #0
    9b9c:	cmp	r0, #0
    9ba0:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9ba4:	cmp	r9, #1
    9ba8:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    9bac:	sub	r4, r5, #8
    9bb0:	mov	r6, r9
    9bb4:	mov	r7, r4
    9bb8:	ldr	r0, [r7, r6, lsl #3]!
    9bbc:	ldr	r1, [r7, #4]
    9bc0:	bl	0 <__aeabi_ul2d>
    9bc4:	subs	r6, r6, #1
    9bc8:	strd	r0, [r7]
    9bcc:	bgt	9bb4 <coda_cursor_read_double_partial_array+0x8e0>
    9bd0:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9bd4:	mov	r0, r7
    9bd8:	mov	r1, r6
    9bdc:	mov	r2, r9
    9be0:	mov	r3, r5
    9be4:	bl	9d24 <read_float_partial_array>
    9be8:	mvn	r6, #0
    9bec:	cmp	r0, #0
    9bf0:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9bf4:	cmp	r9, #1
    9bf8:	blt	9c9c <coda_cursor_read_double_partial_array+0x9c8>
    9bfc:	mvn	r0, r9
    9c00:	cmn	r0, #2
    9c04:	mvnle	r0, #1
    9c08:	add	r1, r0, r9
    9c0c:	mov	r0, r9
    9c10:	cmn	r1, #3
    9c14:	bhi	9c64 <coda_cursor_read_double_partial_array+0x990>
    9c18:	add	ip, r1, #2
    9c1c:	add	r2, r5, r9, lsl #2
    9c20:	mvn	r6, #7
    9c24:	mvn	r4, #15
    9c28:	bic	r1, ip, #1
    9c2c:	sub	r3, r2, #8
    9c30:	add	r2, r5, r9, lsl #3
    9c34:	sub	r7, r2, #16
    9c38:	sub	r0, r9, r1
    9c3c:	mov	r2, r1
    9c40:	vld1.32	{d16}, [r3], r6
    9c44:	subs	r2, r2, #2
    9c48:	vrev64.32	d0, d16
    9c4c:	vcvt.f64.f32	d17, s0
    9c50:	vcvt.f64.f32	d16, s1
    9c54:	vst1.64	{d16-d17}, [r7], r4
    9c58:	bne	9c40 <coda_cursor_read_double_partial_array+0x96c>
    9c5c:	cmp	ip, r1
    9c60:	beq	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9c64:	add	r1, r5, r0, lsl #3
    9c68:	add	r2, r5, r0, lsl #2
    9c6c:	add	r0, r0, #1
    9c70:	sub	r1, r1, #8
    9c74:	sub	r2, r2, #4
    9c78:	vldr	s0, [r2]
    9c7c:	sub	r0, r0, #1
    9c80:	sub	r2, r2, #4
    9c84:	cmp	r0, #1
    9c88:	vcvt.f64.f32	d16, s0
    9c8c:	vstr	d16, [r1]
    9c90:	sub	r1, r1, #8
    9c94:	bgt	9c78 <coda_cursor_read_double_partial_array+0x9a4>
    9c98:	b	9cc4 <coda_cursor_read_double_partial_array+0x9f0>
    9c9c:	mov	r6, #0
    9ca0:	b	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9ca4:	mov	r0, r7
    9ca8:	mov	r1, r6
    9cac:	mov	r2, r9
    9cb0:	mov	r3, r5
    9cb4:	bl	9de4 <read_double_partial_array>
    9cb8:	mvn	r6, #0
    9cbc:	cmp	r0, #0
    9cc0:	bne	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9cc4:	mov	r6, #0
    9cc8:	cmp	r8, #0
    9ccc:	beq	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9cd0:	cmp	r9, #1
    9cd4:	blt	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9cd8:	vldr	d16, [r5]
    9cdc:	vldr	d17, [r8, #24]
    9ce0:	vcmp.f64	d16, d17
    9ce4:	vmrs	APSR_nzcv, fpscr
    9ce8:	bne	9cf4 <coda_cursor_read_double_partial_array+0xa20>
    9cec:	bl	0 <coda_NaN>
    9cf0:	b	9d04 <coda_cursor_read_double_partial_array+0xa30>
    9cf4:	vldmia	r8, {d17-d19}
    9cf8:	vmul.f64	d16, d16, d17
    9cfc:	vdiv.f64	d16, d16, d18
    9d00:	vadd.f64	d0, d16, d19
    9d04:	vstr	d0, [r5]
    9d08:	subs	r9, r9, #1
    9d0c:	add	r5, r5, #8
    9d10:	bne	9cd8 <coda_cursor_read_double_partial_array+0xa04>
    9d14:	b	93a4 <coda_cursor_read_double_partial_array+0xd0>
    9d18:	.word	0x000009d8
    9d1c:	.word	0x000008b8
    9d20:	.word	0x000008f4

00009d24 <read_float_partial_array>:
    9d24:	push	{fp, lr}
    9d28:	mov	fp, sp
    9d2c:	ldr	ip, [r0, #4]
    9d30:	add	ip, r0, ip, lsl #4
    9d34:	ldr	ip, [ip, #-8]
    9d38:	ldr	ip, [ip]
    9d3c:	sub	lr, ip, #100	; 0x64
    9d40:	cmp	lr, #5
    9d44:	bhi	9d70 <read_float_partial_array+0x4c>
    9d48:	add	ip, pc, #0
    9d4c:	ldr	pc, [ip, lr, lsl #2]
    9d50:	.word	0x00009d68
    9d54:	.word	0x00009da8
    9d58:	.word	0x00009d90
    9d5c:	.word	0x00009da0
    9d60:	.word	0x00009d88
    9d64:	.word	0x00009dbc
    9d68:	pop	{fp, lr}
    9d6c:	b	0 <coda_mem_cursor_read_float_partial_array>
    9d70:	cmp	ip, #1
    9d74:	beq	9d98 <read_float_partial_array+0x74>
    9d78:	cmp	ip, #0
    9d7c:	bne	9dc4 <read_float_partial_array+0xa0>
    9d80:	pop	{fp, lr}
    9d84:	b	0 <coda_ascii_cursor_read_float_partial_array>
    9d88:	pop	{fp, lr}
    9d8c:	b	0 <coda_netcdf_cursor_read_float_partial_array>
    9d90:	mvn	r0, #12
    9d94:	b	9dac <read_float_partial_array+0x88>
    9d98:	pop	{fp, lr}
    9d9c:	b	0 <coda_bin_cursor_read_float_partial_array>
    9da0:	pop	{fp, lr}
    9da4:	b	0 <coda_cdf_cursor_read_float_partial_array>
    9da8:	mvn	r0, #10
    9dac:	mov	r1, #0
    9db0:	bl	0 <coda_set_error>
    9db4:	mvn	r0, #0
    9db8:	pop	{fp, pc}
    9dbc:	pop	{fp, lr}
    9dc0:	b	0 <coda_grib_cursor_read_float_partial_array>
    9dc4:	movw	r0, #0
    9dc8:	movw	r1, #0
    9dcc:	movw	r3, #0
    9dd0:	movw	r2, #1674	; 0x68a
    9dd4:	movt	r0, #0
    9dd8:	movt	r1, #0
    9ddc:	movt	r3, #0
    9de0:	bl	0 <__assert_fail>

00009de4 <read_double_partial_array>:
    9de4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    9de8:	add	fp, sp, #24
    9dec:	sub	sp, sp, #528	; 0x210
    9df0:	mov	r6, r1
    9df4:	mov	r1, r0
    9df8:	ldr	r0, [r0, #4]
    9dfc:	mov	r5, r2
    9e00:	mov	r4, r3
    9e04:	add	r0, r1, r0, lsl #4
    9e08:	ldr	r2, [r0, #-8]
    9e0c:	ldr	r0, [r2]
    9e10:	cmp	r0, #99	; 0x63
    9e14:	ldrhi	r2, [r2, #4]
    9e18:	ldr	r2, [r2, #40]	; 0x28
    9e1c:	ldr	r2, [r2, #8]
    9e20:	cmp	r2, #6
    9e24:	bne	9ea4 <read_double_partial_array+0xc0>
    9e28:	mov	r0, sp
    9e2c:	mov	r2, #520	; 0x208
    9e30:	bl	0 <memcpy>
    9e34:	cmp	r5, #1
    9e38:	blt	9e9c <read_double_partial_array+0xb8>
    9e3c:	mov	r0, sp
    9e40:	mov	r1, r6
    9e44:	bl	0 <coda_cursor_goto_array_element_by_index>
    9e48:	mvn	r8, #0
    9e4c:	cmp	r0, #0
    9e50:	bne	9f64 <read_double_partial_array+0x180>
    9e54:	sub	r6, r5, #1
    9e58:	mov	r7, #0
    9e5c:	mov	r9, sp
    9e60:	mov	r0, r9
    9e64:	mov	r1, r4
    9e68:	bl	17a8 <read_double>
    9e6c:	cmp	r0, #0
    9e70:	bne	9f64 <read_double_partial_array+0x180>
    9e74:	cmp	r7, r6
    9e78:	bge	9e8c <read_double_partial_array+0xa8>
    9e7c:	mov	r0, r9
    9e80:	bl	0 <coda_cursor_goto_next_array_element>
    9e84:	cmp	r0, #0
    9e88:	bne	9f64 <read_double_partial_array+0x180>
    9e8c:	add	r7, r7, #1
    9e90:	add	r4, r4, #8
    9e94:	cmp	r7, r5
    9e98:	blt	9e60 <read_double_partial_array+0x7c>
    9e9c:	mov	r8, #0
    9ea0:	b	9f64 <read_double_partial_array+0x180>
    9ea4:	sub	r2, r0, #100	; 0x64
    9ea8:	cmp	r2, #4
    9eac:	bhi	9ee8 <read_double_partial_array+0x104>
    9eb0:	add	r0, pc, #0
    9eb4:	ldr	pc, [r0, r2, lsl #2]
    9eb8:	.word	0x00009ecc
    9ebc:	.word	0x00009f54
    9ec0:	.word	0x00009f30
    9ec4:	.word	0x00009f38
    9ec8:	.word	0x00009f14
    9ecc:	mov	r0, r1
    9ed0:	mov	r1, r6
    9ed4:	mov	r2, r5
    9ed8:	mov	r3, r4
    9edc:	sub	sp, fp, #24
    9ee0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9ee4:	b	0 <coda_mem_cursor_read_double_partial_array>
    9ee8:	cmp	r0, #1
    9eec:	beq	9f70 <read_double_partial_array+0x18c>
    9ef0:	cmp	r0, #0
    9ef4:	bne	9f8c <read_double_partial_array+0x1a8>
    9ef8:	mov	r0, r1
    9efc:	mov	r1, r6
    9f00:	mov	r2, r5
    9f04:	mov	r3, r4
    9f08:	sub	sp, fp, #24
    9f0c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9f10:	b	0 <coda_ascii_cursor_read_double_partial_array>
    9f14:	mov	r0, r1
    9f18:	mov	r1, r6
    9f1c:	mov	r2, r5
    9f20:	mov	r3, r4
    9f24:	sub	sp, fp, #24
    9f28:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9f2c:	b	0 <coda_netcdf_cursor_read_double_partial_array>
    9f30:	mvn	r0, #12
    9f34:	b	9f58 <read_double_partial_array+0x174>
    9f38:	mov	r0, r1
    9f3c:	mov	r1, r6
    9f40:	mov	r2, r5
    9f44:	mov	r3, r4
    9f48:	sub	sp, fp, #24
    9f4c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9f50:	b	0 <coda_cdf_cursor_read_double_partial_array>
    9f54:	mvn	r0, #10
    9f58:	mov	r1, #0
    9f5c:	bl	0 <coda_set_error>
    9f60:	mvn	r8, #0
    9f64:	mov	r0, r8
    9f68:	sub	sp, fp, #24
    9f6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9f70:	mov	r0, r1
    9f74:	mov	r1, r6
    9f78:	mov	r2, r5
    9f7c:	mov	r3, r4
    9f80:	sub	sp, fp, #24
    9f84:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    9f88:	b	0 <coda_bin_cursor_read_double_partial_array>
    9f8c:	movw	r0, #0
    9f90:	movw	r1, #0
    9f94:	movw	r3, #0
    9f98:	movw	r2, #1718	; 0x6b6
    9f9c:	movt	r0, #0
    9fa0:	movt	r1, #0
    9fa4:	movt	r3, #0
    9fa8:	bl	0 <__assert_fail>

00009fac <coda_cursor_read_char_partial_array>:
    9fac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    9fb0:	add	fp, sp, #24
    9fb4:	sub	sp, sp, #8
    9fb8:	cmp	r0, #0
    9fbc:	beq	a05c <coda_cursor_read_char_partial_array+0xb0>
    9fc0:	mov	r7, r0
    9fc4:	ldr	r0, [r0, #4]
    9fc8:	cmp	r0, #1
    9fcc:	blt	a05c <coda_cursor_read_char_partial_array+0xb0>
    9fd0:	add	r0, r7, r0, lsl #4
    9fd4:	ldr	r4, [r0, #-8]
    9fd8:	cmp	r4, #0
    9fdc:	beq	a05c <coda_cursor_read_char_partial_array+0xb0>
    9fe0:	mov	r6, r3
    9fe4:	cmp	r3, #0
    9fe8:	beq	a084 <coda_cursor_read_char_partial_array+0xd8>
    9fec:	ldr	r0, [r4]
    9ff0:	mov	r8, r2
    9ff4:	mov	r5, r1
    9ff8:	cmp	r0, #99	; 0x63
    9ffc:	ldrhi	r4, [r4, #4]
    a000:	ldr	r0, [r4, #8]
    a004:	cmp	r0, #1
    a008:	bne	a09c <coda_cursor_read_char_partial_array+0xf0>
    a00c:	ldr	r0, [pc, #568]	; a24c <coda_cursor_read_char_partial_array+0x2a0>
    a010:	ldr	r1, [pc, r0]
    a014:	bl	0 <__aeabi_read_tp>
    a018:	ldr	r0, [r0, r1]
    a01c:	cmp	r0, #0
    a020:	beq	a0d8 <coda_cursor_read_char_partial_array+0x12c>
    a024:	add	r1, sp, #4
    a028:	mov	r0, r7
    a02c:	bl	0 <coda_cursor_get_num_elements>
    a030:	cmp	r0, #0
    a034:	bne	a078 <coda_cursor_read_char_partial_array+0xcc>
    a038:	ldr	r3, [sp, #4]
    a03c:	cmp	r5, #0
    a040:	cmpge	r3, r5
    a044:	bgt	a0b0 <coda_cursor_read_char_partial_array+0x104>
    a048:	movw	r1, #0
    a04c:	mvn	r0, #106	; 0x6a
    a050:	mov	r2, r5
    a054:	movt	r1, #0
    a058:	b	a074 <coda_cursor_read_char_partial_array+0xc8>
    a05c:	movw	r1, #0
    a060:	movw	r2, #0
    a064:	mvn	r0, #99	; 0x63
    a068:	movw	r3, #5542	; 0x15a6
    a06c:	movt	r1, #0
    a070:	movt	r2, #0
    a074:	bl	0 <coda_set_error>
    a078:	mvn	r0, #0
    a07c:	sub	sp, fp, #24
    a080:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a084:	movw	r1, #0
    a088:	movw	r2, #0
    a08c:	mvn	r0, #99	; 0x63
    a090:	movw	r3, #5547	; 0x15ab
    a094:	movt	r1, #0
    a098:	b	a070 <coda_cursor_read_char_partial_array+0xc4>
    a09c:	bl	0 <coda_type_get_class_name>
    a0a0:	movw	r1, #0
    a0a4:	mov	r2, r0
    a0a8:	movt	r1, #0
    a0ac:	b	a194 <coda_cursor_read_char_partial_array+0x1e8>
    a0b0:	add	r0, r8, r5
    a0b4:	cmp	r0, r3
    a0b8:	ble	a0d8 <coda_cursor_read_char_partial_array+0x12c>
    a0bc:	movw	r1, #0
    a0c0:	str	r3, [sp]
    a0c4:	mvn	r0, #106	; 0x6a
    a0c8:	mov	r2, r5
    a0cc:	mov	r3, r8
    a0d0:	movt	r1, #0
    a0d4:	b	a074 <coda_cursor_read_char_partial_array+0xc8>
    a0d8:	ldr	r1, [r4, #40]	; 0x28
    a0dc:	ldr	r2, [r1, #8]
    a0e0:	cmp	r2, #2
    a0e4:	bne	a0f8 <coda_cursor_read_char_partial_array+0x14c>
    a0e8:	ldr	r0, [pc, #356]	; a254 <coda_cursor_read_char_partial_array+0x2a8>
    a0ec:	ldr	r2, [pc, r0]
    a0f0:	bl	0 <__aeabi_read_tp>
    a0f4:	b	a10c <coda_cursor_read_char_partial_array+0x160>
    a0f8:	bl	0 <__aeabi_read_tp>
    a0fc:	cmp	r2, #3
    a100:	bne	a128 <coda_cursor_read_char_partial_array+0x17c>
    a104:	ldr	r2, [pc, #324]	; a250 <coda_cursor_read_char_partial_array+0x2a4>
    a108:	ldr	r2, [pc, r2]
    a10c:	ldr	r0, [r0, r2]
    a110:	cmp	r0, #0
    a114:	beq	a128 <coda_cursor_read_char_partial_array+0x17c>
    a118:	ldr	r2, [r1, #48]	; 0x30
    a11c:	mov	r0, #9
    a120:	cmp	r2, #0
    a124:	bne	a184 <coda_cursor_read_char_partial_array+0x1d8>
    a128:	ldr	r0, [r1, #12]
    a12c:	cmp	r0, #10
    a130:	bne	a184 <coda_cursor_read_char_partial_array+0x1d8>
    a134:	ldr	r0, [r7, #4]
    a138:	add	r0, r7, r0, lsl #4
    a13c:	ldr	r0, [r0, #-8]
    a140:	ldr	r0, [r0]
    a144:	sub	r1, r0, #100	; 0x64
    a148:	cmp	r1, #4
    a14c:	bhi	a1a0 <coda_cursor_read_char_partial_array+0x1f4>
    a150:	add	r0, pc, #0
    a154:	ldr	pc, [r0, r1, lsl #2]
    a158:	.word	0x0000a16c
    a15c:	.word	0x0000a1c8
    a160:	.word	0x0000a22c
    a164:	.word	0x0000a208
    a168:	.word	0x0000a1d8
    a16c:	mov	r0, r7
    a170:	mov	r1, r5
    a174:	mov	r2, r8
    a178:	mov	r3, r6
    a17c:	bl	0 <coda_mem_cursor_read_char_partial_array>
    a180:	b	a21c <coda_cursor_read_char_partial_array+0x270>
    a184:	bl	0 <coda_type_get_native_type_name>
    a188:	movw	r1, #0
    a18c:	mov	r2, r0
    a190:	movt	r1, #0
    a194:	mvn	r0, #104	; 0x68
    a198:	bl	0 <coda_set_error>
    a19c:	b	a078 <coda_cursor_read_char_partial_array+0xcc>
    a1a0:	cmp	r0, #1
    a1a4:	beq	a1f0 <coda_cursor_read_char_partial_array+0x244>
    a1a8:	cmp	r0, #0
    a1ac:	bne	a22c <coda_cursor_read_char_partial_array+0x280>
    a1b0:	mov	r0, r7
    a1b4:	mov	r1, r5
    a1b8:	mov	r2, r8
    a1bc:	mov	r3, r6
    a1c0:	bl	0 <coda_ascii_cursor_read_char_partial_array>
    a1c4:	b	a21c <coda_cursor_read_char_partial_array+0x270>
    a1c8:	mvn	r0, #10
    a1cc:	mov	r1, #0
    a1d0:	bl	0 <coda_set_error>
    a1d4:	b	a078 <coda_cursor_read_char_partial_array+0xcc>
    a1d8:	mov	r0, r7
    a1dc:	mov	r1, r5
    a1e0:	mov	r2, r8
    a1e4:	mov	r3, r6
    a1e8:	bl	0 <coda_netcdf_cursor_read_char_partial_array>
    a1ec:	b	a21c <coda_cursor_read_char_partial_array+0x270>
    a1f0:	mov	r0, r7
    a1f4:	mov	r1, r5
    a1f8:	mov	r2, r8
    a1fc:	mov	r3, r6
    a200:	bl	0 <coda_bin_cursor_read_char_partial_array>
    a204:	b	a21c <coda_cursor_read_char_partial_array+0x270>
    a208:	mov	r0, r7
    a20c:	mov	r1, r5
    a210:	mov	r2, r8
    a214:	mov	r3, r6
    a218:	bl	0 <coda_cdf_cursor_read_char_partial_array>
    a21c:	cmp	r0, #0
    a220:	mvnne	r0, #0
    a224:	sub	sp, fp, #24
    a228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a22c:	movw	r0, #0
    a230:	movw	r1, #0
    a234:	movw	r3, #0
    a238:	movw	r2, #1748	; 0x6d4
    a23c:	movt	r0, #0
    a240:	movt	r1, #0
    a244:	movt	r3, #0
    a248:	bl	0 <__assert_fail>
    a24c:	.word	0x00000234
    a250:	.word	0x00000140
    a254:	.word	0x00000160

0000a258 <coda_cursor_read_complex_double_pair>:
    a258:	push	{fp, lr}
    a25c:	mov	fp, sp
    a260:	cmp	r0, #0
    a264:	beq	a294 <coda_cursor_read_complex_double_pair+0x3c>
    a268:	ldr	r2, [r0, #4]
    a26c:	cmp	r2, #1
    a270:	blt	a294 <coda_cursor_read_complex_double_pair+0x3c>
    a274:	add	r2, r0, r2, lsl #4
    a278:	ldr	r2, [r2, #-8]
    a27c:	cmp	r2, #0
    a280:	beq	a294 <coda_cursor_read_complex_double_pair+0x3c>
    a284:	cmp	r1, #0
    a288:	beq	a2b8 <coda_cursor_read_complex_double_pair+0x60>
    a28c:	pop	{fp, lr}
    a290:	b	a2d0 <read_double_pair>
    a294:	movw	r1, #0
    a298:	movw	r2, #0
    a29c:	mvn	r0, #99	; 0x63
    a2a0:	movw	r3, #5617	; 0x15f1
    a2a4:	movt	r1, #0
    a2a8:	movt	r2, #0
    a2ac:	bl	0 <coda_set_error>
    a2b0:	mvn	r0, #0
    a2b4:	pop	{fp, pc}
    a2b8:	movw	r1, #0
    a2bc:	movw	r2, #0
    a2c0:	mvn	r0, #99	; 0x63
    a2c4:	movw	r3, #5622	; 0x15f6
    a2c8:	movt	r1, #0
    a2cc:	b	a2a8 <coda_cursor_read_complex_double_pair+0x50>

0000a2d0 <read_double_pair>:
    a2d0:	push	{r4, r5, r6, r7, fp, lr}
    a2d4:	add	fp, sp, #16
    a2d8:	sub	sp, sp, #520	; 0x208
    a2dc:	mov	r4, r1
    a2e0:	mov	r1, r0
    a2e4:	ldr	r0, [r0, #4]
    a2e8:	add	r0, r1, r0, lsl #4
    a2ec:	ldr	r0, [r0, #-8]
    a2f0:	ldr	r2, [r0, #8]
    a2f4:	cmp	r2, #6
    a2f8:	ldreq	r0, [r0, #40]	; 0x28
    a2fc:	cmpeq	r0, #3
    a300:	beq	a324 <read_double_pair+0x54>
    a304:	movw	r1, #0
    a308:	mvn	r0, #104	; 0x68
    a30c:	movt	r1, #0
    a310:	bl	0 <coda_set_error>
    a314:	mvn	r5, #0
    a318:	mov	r0, r5
    a31c:	sub	sp, fp, #16
    a320:	pop	{r4, r5, r6, r7, fp, pc}
    a324:	mov	r5, sp
    a328:	mov	r2, #520	; 0x208
    a32c:	mov	r0, r5
    a330:	bl	0 <memcpy>
    a334:	mov	r0, r5
    a338:	bl	0 <coda_cursor_use_base_type_of_special_type>
    a33c:	mvn	r5, #0
    a340:	cmp	r0, #0
    a344:	bne	a318 <read_double_pair+0x48>
    a348:	mov	r0, sp
    a34c:	mov	r1, #0
    a350:	bl	0 <coda_cursor_goto_record_field_by_index>
    a354:	cmp	r0, #0
    a358:	bne	a318 <read_double_pair+0x48>
    a35c:	mov	r0, sp
    a360:	mov	r1, r4
    a364:	bl	141c <coda_cursor_read_double>
    a368:	cmp	r0, #0
    a36c:	bne	a318 <read_double_pair+0x48>
    a370:	mov	r0, sp
    a374:	bl	0 <coda_cursor_goto_next_record_field>
    a378:	cmp	r0, #0
    a37c:	bne	a318 <read_double_pair+0x48>
    a380:	add	r1, r4, #8
    a384:	mov	r0, sp
    a388:	bl	141c <coda_cursor_read_double>
    a38c:	mov	r5, r0
    a390:	cmp	r0, #0
    a394:	mvnne	r5, #0
    a398:	b	a318 <read_double_pair+0x48>

0000a39c <coda_cursor_read_complex_double_pairs_array>:
    a39c:	push	{fp, lr}
    a3a0:	mov	fp, sp
    a3a4:	sub	sp, sp, #8
    a3a8:	cmp	r0, #0
    a3ac:	beq	a410 <coda_cursor_read_complex_double_pairs_array+0x74>
    a3b0:	mov	ip, r1
    a3b4:	ldr	r1, [r0, #4]
    a3b8:	cmp	r1, #1
    a3bc:	blt	a410 <coda_cursor_read_complex_double_pairs_array+0x74>
    a3c0:	add	r1, r0, r1, lsl #4
    a3c4:	ldr	r1, [r1, #-8]
    a3c8:	cmp	r1, #0
    a3cc:	beq	a410 <coda_cursor_read_complex_double_pairs_array+0x74>
    a3d0:	cmp	ip, #0
    a3d4:	beq	a438 <coda_cursor_read_complex_double_pairs_array+0x9c>
    a3d8:	ldr	r3, [r1]
    a3dc:	cmp	r3, #99	; 0x63
    a3e0:	ldrhi	r1, [r1, #4]
    a3e4:	ldr	r1, [r1, #8]
    a3e8:	cmp	r1, #1
    a3ec:	bne	a450 <coda_cursor_read_complex_double_pairs_array+0xb4>
    a3f0:	movw	r1, #0
    a3f4:	str	r2, [sp]
    a3f8:	mov	r2, ip
    a3fc:	mov	r3, #16
    a400:	movt	r1, #0
    a404:	bl	a470 <read_array>
    a408:	mov	sp, fp
    a40c:	pop	{fp, pc}
    a410:	movw	r1, #0
    a414:	movw	r2, #0
    a418:	mvn	r0, #99	; 0x63
    a41c:	movw	r3, #5649	; 0x1611
    a420:	movt	r1, #0
    a424:	movt	r2, #0
    a428:	bl	0 <coda_set_error>
    a42c:	mvn	r0, #0
    a430:	mov	sp, fp
    a434:	pop	{fp, pc}
    a438:	movw	r1, #0
    a43c:	movw	r2, #0
    a440:	mvn	r0, #99	; 0x63
    a444:	movw	r3, #5654	; 0x1616
    a448:	movt	r1, #0
    a44c:	b	a424 <coda_cursor_read_complex_double_pairs_array+0x88>
    a450:	mov	r0, r1
    a454:	bl	0 <coda_type_get_class_name>
    a458:	movw	r1, #0
    a45c:	mov	r2, r0
    a460:	mvn	r0, #104	; 0x68
    a464:	movt	r1, #0
    a468:	bl	0 <coda_set_error>
    a46c:	b	a42c <coda_cursor_read_complex_double_pairs_array+0x90>

0000a470 <read_array>:
    a470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a474:	add	fp, sp, #28
    a478:	sub	sp, sp, #604	; 0x25c
    a47c:	add	r7, sp, #48	; 0x30
    a480:	mov	r5, r2
    a484:	mov	r8, r1
    a488:	add	r1, sp, #44	; 0x2c
    a48c:	mov	sl, r3
    a490:	mov	r4, r0
    a494:	mov	r2, r7
    a498:	bl	0 <coda_cursor_get_array_dim>
    a49c:	cmp	r0, #0
    a4a0:	beq	a4b0 <read_array+0x40>
    a4a4:	mvn	r0, #0
    a4a8:	sub	sp, fp, #28
    a4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4b0:	ldr	r6, [fp, #8]
    a4b4:	add	r0, sp, #80	; 0x50
    a4b8:	mov	r1, r4
    a4bc:	mov	r2, #520	; 0x208
    a4c0:	bl	0 <memcpy>
    a4c4:	ldr	r0, [sp, #44]	; 0x2c
    a4c8:	cmp	r6, #1
    a4cc:	bne	a5e8 <read_array+0x178>
    a4d0:	cmp	r0, #1
    a4d4:	ble	a5e8 <read_array+0x178>
    a4d8:	add	r2, sp, #8
    a4dc:	mov	r1, #1
    a4e0:	mov	r3, r0
    a4e4:	str	sl, [sp, #4]
    a4e8:	mov	r4, r2
    a4ec:	add	r2, r2, #4
    a4f0:	str	r1, [sp, #8]
    a4f4:	ldr	r6, [r7], #4
    a4f8:	subs	r3, r3, #1
    a4fc:	mul	r1, r6, r1
    a500:	str	r1, [r2], #4
    a504:	bne	a4f4 <read_array+0x84>
    a508:	mov	r6, r4
    a50c:	ldr	r4, [r4, r0, lsl #2]
    a510:	cmp	r4, #1
    a514:	blt	a6cc <read_array+0x25c>
    a518:	add	r0, r6, r0, lsl #2
    a51c:	mov	r1, #0
    a520:	mov	r9, #0
    a524:	ldr	r7, [r0, #-4]
    a528:	add	r0, sp, #80	; 0x50
    a52c:	bl	0 <coda_cursor_goto_array_element_by_index>
    a530:	cmp	r0, #0
    a534:	bne	a4a4 <read_array+0x34>
    a538:	sub	r0, r6, #4
    a53c:	mov	sl, #0
    a540:	str	r0, [sp]
    a544:	b	a5cc <read_array+0x15c>
    a548:	add	r9, r9, #1
    a54c:	cmp	r9, r4
    a550:	bge	a564 <read_array+0xf4>
    a554:	add	r0, sp, #80	; 0x50
    a558:	bl	0 <coda_cursor_goto_next_array_element>
    a55c:	cmp	r0, #0
    a560:	bne	a4a4 <read_array+0x34>
    a564:	add	sl, sl, r7
    a568:	cmp	sl, r4
    a56c:	blt	a5cc <read_array+0x15c>
    a570:	cmp	r9, r4
    a574:	beq	a6cc <read_array+0x25c>
    a578:	ldr	r1, [sp, #44]	; 0x2c
    a57c:	add	r2, r6, r1, lsl #2
    a580:	ldr	r0, [r6, r1, lsl #2]
    a584:	cmp	r1, #3
    a588:	ldr	r2, [r2, #-8]
    a58c:	add	r2, r2, sl
    a590:	sub	sl, r2, r0
    a594:	blt	a5cc <read_array+0x15c>
    a598:	ldr	r0, [sp]
    a59c:	add	r0, r0, r1, lsl #2
    a5a0:	sub	r1, r1, #2
    a5a4:	ldr	r2, [r0]
    a5a8:	cmp	sl, r2
    a5ac:	blt	a5cc <read_array+0x15c>
    a5b0:	ldr	r3, [r0, #-8]
    a5b4:	sub	r2, sl, r2
    a5b8:	sub	r1, r1, #1
    a5bc:	sub	r0, r0, #4
    a5c0:	cmp	r1, #0
    a5c4:	add	sl, r2, r3
    a5c8:	bgt	a5a4 <read_array+0x134>
    a5cc:	ldr	r0, [sp, #4]
    a5d0:	mla	r1, sl, r0, r5
    a5d4:	add	r0, sp, #80	; 0x50
    a5d8:	blx	r8
    a5dc:	cmp	r0, #0
    a5e0:	beq	a548 <read_array+0xd8>
    a5e4:	b	a4a4 <read_array+0x34>
    a5e8:	cmp	r0, #1
    a5ec:	blt	a604 <read_array+0x194>
    a5f0:	cmp	r0, #4
    a5f4:	bcs	a60c <read_array+0x19c>
    a5f8:	mov	r4, #1
    a5fc:	mov	r1, #0
    a600:	b	a644 <read_array+0x1d4>
    a604:	mov	r4, #1
    a608:	b	a668 <read_array+0x1f8>
    a60c:	bic	r1, r0, #3
    a610:	vmov.i32	q8, #1	; 0x00000001
    a614:	add	r2, sp, #48	; 0x30
    a618:	mov	r3, r1
    a61c:	vld1.32	{d18-d19}, [r2]!
    a620:	subs	r3, r3, #4
    a624:	vmul.i32	q8, q9, q8
    a628:	bne	a61c <read_array+0x1ac>
    a62c:	vext.8	q9, q8, q8, #8
    a630:	cmp	r0, r1
    a634:	vmul.i32	q0, q8, q9
    a638:	vmul.i32	q8, q0, d0[1]
    a63c:	vmov.32	r4, d16[0]
    a640:	beq	a660 <read_array+0x1f0>
    a644:	add	r2, sp, #48	; 0x30
    a648:	sub	r0, r0, r1
    a64c:	add	r1, r2, r1, lsl #2
    a650:	ldr	r2, [r1], #4
    a654:	subs	r0, r0, #1
    a658:	mul	r4, r2, r4
    a65c:	bne	a650 <read_array+0x1e0>
    a660:	cmp	r4, #1
    a664:	blt	a6cc <read_array+0x25c>
    a668:	add	r0, sp, #80	; 0x50
    a66c:	mov	r1, #0
    a670:	mov	r6, #0
    a674:	bl	0 <coda_cursor_goto_array_element_by_index>
    a678:	cmp	r0, #0
    a67c:	bne	a4a4 <read_array+0x34>
    a680:	sub	r7, r4, #1
    a684:	add	r9, sp, #80	; 0x50
    a688:	mov	r0, r9
    a68c:	mov	r1, r5
    a690:	blx	r8
    a694:	cmp	r0, #0
    a698:	bne	a4a4 <read_array+0x34>
    a69c:	cmp	r6, r7
    a6a0:	bge	a6b4 <read_array+0x244>
    a6a4:	mov	r0, r9
    a6a8:	bl	0 <coda_cursor_goto_next_array_element>
    a6ac:	cmp	r0, #0
    a6b0:	bne	a4a4 <read_array+0x34>
    a6b4:	add	r6, r6, #1
    a6b8:	add	r5, r5, sl
    a6bc:	mov	r0, #0
    a6c0:	cmp	r6, r4
    a6c4:	blt	a688 <read_array+0x218>
    a6c8:	b	a4a8 <read_array+0x38>
    a6cc:	mov	r0, #0
    a6d0:	sub	sp, fp, #28
    a6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a6d8 <coda_cursor_read_complex_double_split>:
    a6d8:	push	{r4, r5, fp, lr}
    a6dc:	add	fp, sp, #8
    a6e0:	sub	sp, sp, #16
    a6e4:	cmp	r0, #0
    a6e8:	beq	a730 <coda_cursor_read_complex_double_split+0x58>
    a6ec:	mov	r5, r1
    a6f0:	ldr	r1, [r0, #4]
    a6f4:	cmp	r1, #1
    a6f8:	blt	a730 <coda_cursor_read_complex_double_split+0x58>
    a6fc:	add	r1, r0, r1, lsl #4
    a700:	ldr	r1, [r1, #-8]
    a704:	cmp	r1, #0
    a708:	beq	a730 <coda_cursor_read_complex_double_split+0x58>
    a70c:	mov	r1, sp
    a710:	mov	r4, r2
    a714:	bl	a2d0 <read_double_pair>
    a718:	mov	r1, r0
    a71c:	mvn	r0, #0
    a720:	cmp	r1, #0
    a724:	beq	a758 <coda_cursor_read_complex_double_split+0x80>
    a728:	sub	sp, fp, #8
    a72c:	pop	{r4, r5, fp, pc}
    a730:	movw	r1, #0
    a734:	movw	r2, #0
    a738:	mvn	r0, #99	; 0x63
    a73c:	movw	r3, #5617	; 0x15f1
    a740:	movt	r1, #0
    a744:	movt	r2, #0
    a748:	bl	0 <coda_set_error>
    a74c:	mvn	r0, #0
    a750:	sub	sp, fp, #8
    a754:	pop	{r4, r5, fp, pc}
    a758:	vldr	d16, [sp]
    a75c:	mov	r0, #0
    a760:	vstr	d16, [r5]
    a764:	vldr	d16, [sp, #8]
    a768:	vstr	d16, [r4]
    a76c:	sub	sp, fp, #8
    a770:	pop	{r4, r5, fp, pc}

0000a774 <coda_cursor_read_complex_double_split_array>:
    a774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a778:	add	fp, sp, #28
    a77c:	sub	sp, sp, #628	; 0x274
    a780:	cmp	r0, #0
    a784:	beq	a898 <coda_cursor_read_complex_double_split_array+0x124>
    a788:	mov	r4, r0
    a78c:	ldr	r0, [r0, #4]
    a790:	cmp	r0, #1
    a794:	blt	a898 <coda_cursor_read_complex_double_split_array+0x124>
    a798:	add	r0, r4, r0, lsl #4
    a79c:	ldr	r0, [r0, #-8]
    a7a0:	cmp	r0, #0
    a7a4:	beq	a898 <coda_cursor_read_complex_double_split_array+0x124>
    a7a8:	mov	sl, r1
    a7ac:	cmp	r1, #0
    a7b0:	beq	a8c4 <coda_cursor_read_complex_double_split_array+0x150>
    a7b4:	mov	r9, r2
    a7b8:	cmp	r2, #0
    a7bc:	beq	a9a0 <coda_cursor_read_complex_double_split_array+0x22c>
    a7c0:	ldr	r1, [r0]
    a7c4:	mov	r7, r3
    a7c8:	cmp	r1, #99	; 0x63
    a7cc:	ldrhi	r0, [r0, #4]
    a7d0:	ldr	r0, [r0, #8]
    a7d4:	cmp	r0, #1
    a7d8:	bne	a9b8 <coda_cursor_read_complex_double_split_array+0x244>
    a7dc:	add	r5, sp, #56	; 0x38
    a7e0:	add	r1, sp, #52	; 0x34
    a7e4:	mov	r0, r4
    a7e8:	mov	r2, r5
    a7ec:	bl	0 <coda_cursor_get_array_dim>
    a7f0:	mvn	r6, #0
    a7f4:	cmp	r0, #0
    a7f8:	bne	a8b8 <coda_cursor_read_complex_double_split_array+0x144>
    a7fc:	add	r0, sp, #104	; 0x68
    a800:	mov	r1, r4
    a804:	mov	r2, #520	; 0x208
    a808:	bl	0 <memcpy>
    a80c:	ldr	r0, [sp, #52]	; 0x34
    a810:	cmp	r7, #1
    a814:	bne	a9d4 <coda_cursor_read_complex_double_split_array+0x260>
    a818:	cmp	r0, #1
    a81c:	ble	a9d4 <coda_cursor_read_complex_double_split_array+0x260>
    a820:	add	r4, sp, #16
    a824:	mov	r1, #1
    a828:	mov	r3, r0
    a82c:	add	r2, r4, #4
    a830:	str	r1, [sp, #16]
    a834:	ldr	r7, [r5], #4
    a838:	subs	r3, r3, #1
    a83c:	mul	r1, r7, r1
    a840:	str	r1, [r2], #4
    a844:	bne	a834 <coda_cursor_read_complex_double_split_array+0xc0>
    a848:	ldr	r5, [r4, r0, lsl #2]
    a84c:	cmp	r5, #1
    a850:	blt	aad8 <coda_cursor_read_complex_double_split_array+0x364>
    a854:	add	r0, r4, r0, lsl #2
    a858:	mov	r1, #0
    a85c:	mov	r8, #0
    a860:	ldr	r7, [r0, #-4]
    a864:	add	r0, sp, #104	; 0x68
    a868:	bl	0 <coda_cursor_goto_array_element_by_index>
    a86c:	cmp	r0, #0
    a870:	bne	a8b8 <coda_cursor_read_complex_double_split_array+0x144>
    a874:	sub	r0, r4, #4
    a878:	str	r7, [sp, #8]
    a87c:	add	r7, sp, #104	; 0x68
    a880:	mov	r4, #0
    a884:	str	r0, [sp, #4]
    a888:	add	r0, sp, #88	; 0x58
    a88c:	add	r0, r0, #8
    a890:	str	r0, [sp, #12]
    a894:	b	a94c <coda_cursor_read_complex_double_split_array+0x1d8>
    a898:	movw	r1, #0
    a89c:	movw	r2, #0
    a8a0:	mvn	r0, #99	; 0x63
    a8a4:	movw	r3, #5713	; 0x1651
    a8a8:	movt	r1, #0
    a8ac:	movt	r2, #0
    a8b0:	bl	0 <coda_set_error>
    a8b4:	mvn	r6, #0
    a8b8:	mov	r0, r6
    a8bc:	sub	sp, fp, #28
    a8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c4:	movw	r1, #0
    a8c8:	movw	r2, #0
    a8cc:	mvn	r0, #99	; 0x63
    a8d0:	movw	r3, #5718	; 0x1656
    a8d4:	movt	r1, #0
    a8d8:	b	a8ac <coda_cursor_read_complex_double_split_array+0x138>
    a8dc:	ldr	r0, [sp, #8]
    a8e0:	add	r4, r4, r0
    a8e4:	cmp	r4, r5
    a8e8:	blt	a94c <coda_cursor_read_complex_double_split_array+0x1d8>
    a8ec:	cmp	r8, r5
    a8f0:	add	r2, sp, #16
    a8f4:	beq	aad8 <coda_cursor_read_complex_double_split_array+0x364>
    a8f8:	ldr	r1, [sp, #52]	; 0x34
    a8fc:	ldr	r0, [r2, r1, lsl #2]
    a900:	add	r2, r2, r1, lsl #2
    a904:	cmp	r1, #3
    a908:	ldr	r2, [r2, #-8]
    a90c:	add	r2, r2, r4
    a910:	sub	r4, r2, r0
    a914:	blt	a94c <coda_cursor_read_complex_double_split_array+0x1d8>
    a918:	ldr	r0, [sp, #4]
    a91c:	add	r0, r0, r1, lsl #2
    a920:	sub	r1, r1, #2
    a924:	ldr	r2, [r0]
    a928:	cmp	r4, r2
    a92c:	blt	a94c <coda_cursor_read_complex_double_split_array+0x1d8>
    a930:	ldr	r3, [r0, #-8]
    a934:	sub	r2, r4, r2
    a938:	sub	r1, r1, #1
    a93c:	sub	r0, r0, #4
    a940:	cmp	r1, #0
    a944:	add	r4, r3, r2
    a948:	bgt	a924 <coda_cursor_read_complex_double_split_array+0x1b0>
    a94c:	mov	r0, r7
    a950:	add	r1, sp, #88	; 0x58
    a954:	bl	a2d0 <read_double_pair>
    a958:	ldr	r0, [sp, #88]	; 0x58
    a95c:	mov	r2, sl
    a960:	ldr	r1, [sp, #92]	; 0x5c
    a964:	add	r8, r8, #1
    a968:	cmp	r8, r5
    a96c:	str	r0, [r2, r4, lsl #3]!
    a970:	ldr	r0, [sp, #12]
    a974:	str	r1, [r2, #4]
    a978:	mov	r2, r9
    a97c:	ldrd	r0, [r0]
    a980:	str	r0, [r2, r4, lsl #3]!
    a984:	str	r1, [r2, #4]
    a988:	bge	a8dc <coda_cursor_read_complex_double_split_array+0x168>
    a98c:	mov	r0, r7
    a990:	bl	0 <coda_cursor_goto_next_array_element>
    a994:	cmp	r0, #0
    a998:	beq	a8dc <coda_cursor_read_complex_double_split_array+0x168>
    a99c:	b	a8b8 <coda_cursor_read_complex_double_split_array+0x144>
    a9a0:	movw	r1, #0
    a9a4:	movw	r2, #0
    a9a8:	mvn	r0, #99	; 0x63
    a9ac:	movw	r3, #5723	; 0x165b
    a9b0:	movt	r1, #0
    a9b4:	b	a8ac <coda_cursor_read_complex_double_split_array+0x138>
    a9b8:	bl	0 <coda_type_get_class_name>
    a9bc:	movw	r1, #0
    a9c0:	mov	r2, r0
    a9c4:	mvn	r0, #104	; 0x68
    a9c8:	movt	r1, #0
    a9cc:	bl	0 <coda_set_error>
    a9d0:	b	a8b4 <coda_cursor_read_complex_double_split_array+0x140>
    a9d4:	cmp	r0, #1
    a9d8:	blt	a9f0 <coda_cursor_read_complex_double_split_array+0x27c>
    a9dc:	cmp	r0, #4
    a9e0:	bcs	a9f8 <coda_cursor_read_complex_double_split_array+0x284>
    a9e4:	mov	r7, #1
    a9e8:	mov	r1, #0
    a9ec:	b	aa30 <coda_cursor_read_complex_double_split_array+0x2bc>
    a9f0:	mov	r7, #1
    a9f4:	b	aa54 <coda_cursor_read_complex_double_split_array+0x2e0>
    a9f8:	bic	r1, r0, #3
    a9fc:	vmov.i32	q8, #1	; 0x00000001
    aa00:	add	r2, sp, #56	; 0x38
    aa04:	mov	r3, r1
    aa08:	vld1.32	{d18-d19}, [r2]!
    aa0c:	subs	r3, r3, #4
    aa10:	vmul.i32	q8, q9, q8
    aa14:	bne	aa08 <coda_cursor_read_complex_double_split_array+0x294>
    aa18:	vext.8	q9, q8, q8, #8
    aa1c:	cmp	r0, r1
    aa20:	vmul.i32	q0, q8, q9
    aa24:	vmul.i32	q8, q0, d0[1]
    aa28:	vmov.32	r7, d16[0]
    aa2c:	beq	aa4c <coda_cursor_read_complex_double_split_array+0x2d8>
    aa30:	add	r2, sp, #56	; 0x38
    aa34:	sub	r0, r0, r1
    aa38:	add	r2, r2, r1, lsl #2
    aa3c:	ldr	r1, [r2], #4
    aa40:	subs	r0, r0, #1
    aa44:	mul	r7, r1, r7
    aa48:	bne	aa3c <coda_cursor_read_complex_double_split_array+0x2c8>
    aa4c:	cmp	r7, #1
    aa50:	blt	aad8 <coda_cursor_read_complex_double_split_array+0x364>
    aa54:	add	r0, sp, #104	; 0x68
    aa58:	mov	r1, #0
    aa5c:	mov	r4, #0
    aa60:	bl	0 <coda_cursor_goto_array_element_by_index>
    aa64:	cmp	r0, #0
    aa68:	bne	a8b8 <coda_cursor_read_complex_double_split_array+0x144>
    aa6c:	sub	r0, r7, #1
    aa70:	add	r8, sp, #104	; 0x68
    aa74:	str	r0, [sp, #12]
    aa78:	add	r0, sp, #88	; 0x58
    aa7c:	add	r5, r0, #8
    aa80:	mov	r0, r8
    aa84:	add	r1, sp, #88	; 0x58
    aa88:	bl	a2d0 <read_double_pair>
    aa8c:	ldr	r0, [sp, #88]	; 0x58
    aa90:	ldr	r1, [sp, #92]	; 0x5c
    aa94:	str	r1, [sl, #4]
    aa98:	str	r0, [sl]
    aa9c:	ldrd	r0, [r5]
    aaa0:	str	r0, [r9]
    aaa4:	ldr	r0, [sp, #12]
    aaa8:	str	r1, [r9, #4]
    aaac:	cmp	r4, r0
    aab0:	bge	aac4 <coda_cursor_read_complex_double_split_array+0x350>
    aab4:	mov	r0, r8
    aab8:	bl	0 <coda_cursor_goto_next_array_element>
    aabc:	cmp	r0, #0
    aac0:	bne	a8b8 <coda_cursor_read_complex_double_split_array+0x144>
    aac4:	add	r4, r4, #1
    aac8:	add	sl, sl, #8
    aacc:	add	r9, r9, #8
    aad0:	cmp	r4, r7
    aad4:	blt	aa80 <coda_cursor_read_complex_double_split_array+0x30c>
    aad8:	mov	r6, #0
    aadc:	b	a8b8 <coda_cursor_read_complex_double_split_array+0x144>

0000aae0 <transpose_array>:
    aae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aae4:	add	fp, sp, #28
    aae8:	sub	sp, sp, #180	; 0xb4
    aaec:	sub	r6, fp, #60	; 0x3c
    aaf0:	mov	r8, r2
    aaf4:	str	r1, [sp, #32]
    aaf8:	sub	r1, fp, #64	; 0x40
    aafc:	mov	r2, r6
    ab00:	bl	0 <coda_cursor_get_array_dim>
    ab04:	mvn	r7, #0
    ab08:	cmp	r0, #0
    ab0c:	bne	afb0 <transpose_array+0x4d0>
    ab10:	ldr	r5, [fp, #-64]	; 0xffffffc0
    ab14:	mov	r7, #0
    ab18:	cmp	r5, #2
    ab1c:	blt	afb0 <transpose_array+0x4d0>
    ab20:	add	r9, sp, #72	; 0x48
    ab24:	lsl	r2, r5, #2
    ab28:	mov	r1, #0
    ab2c:	mov	r7, #0
    ab30:	mov	r0, r9
    ab34:	bl	0 <memset>
    ab38:	mov	r4, #1
    ab3c:	cmp	r5, #4
    ab40:	bcc	ab98 <transpose_array+0xb8>
    ab44:	add	r0, r6, r5, lsl #2
    ab48:	bic	r7, r5, #3
    ab4c:	vmov.i32	q8, #1	; 0x00000001
    ab50:	add	r1, sp, #36	; 0x24
    ab54:	mvn	r2, #15
    ab58:	sub	r0, r0, #16
    ab5c:	mov	r3, r7
    ab60:	vld1.32	{d18-d19}, [r0], r2
    ab64:	vld1.32	{d20-d21}, [r6]!
    ab68:	subs	r3, r3, #4
    ab6c:	vrev64.32	q9, q9
    ab70:	vmul.i32	q8, q10, q8
    ab74:	vext.8	q9, q9, q9, #8
    ab78:	vst1.32	{d18-d19}, [r1]!
    ab7c:	bne	ab60 <transpose_array+0x80>
    ab80:	vext.8	q9, q8, q8, #8
    ab84:	cmp	r5, r7
    ab88:	vmul.i32	q0, q8, q9
    ab8c:	vmul.i32	q8, q0, d0[1]
    ab90:	vmov.32	r4, d16[0]
    ab94:	beq	abcc <transpose_array+0xec>
    ab98:	sub	r0, r5, #1
    ab9c:	lsl	r1, r7, #2
    aba0:	sub	r2, fp, #60	; 0x3c
    aba4:	add	r3, sp, #36	; 0x24
    aba8:	sub	r0, r0, r7
    abac:	ldr	r7, [r2, r0, lsl #2]
    abb0:	sub	r0, r0, #1
    abb4:	cmn	r0, #1
    abb8:	str	r7, [r3, r1]
    abbc:	ldr	r7, [r2, r1]
    abc0:	add	r1, r1, #4
    abc4:	mul	r4, r7, r4
    abc8:	bne	abac <transpose_array+0xcc>
    abcc:	mov	r7, #0
    abd0:	cmp	r4, #2
    abd4:	blt	afb0 <transpose_array+0x4d0>
    abd8:	add	r7, sp, #36	; 0x24
    abdc:	mov	r0, #1
    abe0:	sub	sl, fp, #100	; 0x64
    abe4:	cmp	r5, #1
    abe8:	str	r0, [r7, r5, lsl #2]
    abec:	str	r0, [sl, r5, lsl #2]
    abf0:	blt	ac28 <transpose_array+0x148>
    abf4:	add	r1, sl, r5, lsl #2
    abf8:	str	r0, [r1, #-4]
    abfc:	beq	ac28 <transpose_array+0x148>
    ac00:	sub	r0, r7, #4
    ac04:	sub	r1, sl, #8
    ac08:	mov	r2, #1
    ac0c:	mov	r3, r5
    ac10:	ldr	r6, [r0, r3, lsl #2]
    ac14:	mul	r2, r6, r2
    ac18:	str	r2, [r1, r3, lsl #2]
    ac1c:	sub	r3, r3, #1
    ac20:	cmp	r3, #1
    ac24:	bgt	ac10 <transpose_array+0x130>
    ac28:	mov	r0, #0
    ac2c:	str	r0, [r9, r5, lsl #2]
    ac30:	str	r0, [r7, r5, lsl #2]
    ac34:	mul	r5, r4, r8
    ac38:	mov	r0, r5
    ac3c:	bl	0 <malloc>
    ac40:	cmp	r0, #0
    ac44:	str	r0, [sp, #28]
    ac48:	beq	ad3c <transpose_array+0x25c>
    ac4c:	sub	r0, r8, #1
    ac50:	str	r5, [sp, #8]
    ac54:	cmp	r0, #7
    ac58:	bhi	afbc <transpose_array+0x4dc>
    ac5c:	add	r1, pc, #0
    ac60:	ldr	pc, [r1, r0, lsl #2]
    ac64:	.word	0x0000ac84
    ac68:	.word	0x0000ae24
    ac6c:	.word	0x0000afbc
    ac70:	.word	0x0000aee0
    ac74:	.word	0x0000afbc
    ac78:	.word	0x0000afbc
    ac7c:	.word	0x0000afbc
    ac80:	.word	0x0000ad68
    ac84:	cmp	r4, #1
    ac88:	blt	af90 <transpose_array+0x4b0>
    ac8c:	add	r0, sl, #4
    ac90:	ldr	ip, [sp, #36]	; 0x24
    ac94:	ldr	lr, [fp, #-100]	; 0xffffff9c
    ac98:	mov	r3, #0
    ac9c:	mov	r1, #0
    aca0:	str	r0, [sp, #20]
    aca4:	add	r0, r7, #4
    aca8:	str	r0, [sp, #16]
    acac:	orr	r0, r9, #4
    acb0:	str	r0, [sp, #12]
    acb4:	mov	r0, #0
    acb8:	str	ip, [sp, #24]
    acbc:	ldr	r2, [sp, #32]
    acc0:	ldr	r7, [sp, #28]
    acc4:	ldrb	r2, [r2, r0]
    acc8:	strb	r2, [r7, r1]
    accc:	ldr	r2, [sp, #72]	; 0x48
    acd0:	add	r1, lr, r1
    acd4:	add	r2, r2, #1
    acd8:	cmp	r2, ip
    acdc:	str	r2, [sp, #72]	; 0x48
    ace0:	bne	ad28 <transpose_array+0x248>
    ace4:	ldr	r2, [sp, #20]
    ace8:	ldr	r6, [sp, #16]
    acec:	ldr	r8, [sp, #12]
    acf0:	mov	r5, lr
    acf4:	ldr	r9, [r2], #4
    acf8:	str	r3, [r8, #-4]
    acfc:	ldr	sl, [r8]
    ad00:	add	r1, r9, r1
    ad04:	mls	r1, r5, ip, r1
    ad08:	ldr	r5, [r6], #4
    ad0c:	add	r7, sl, #1
    ad10:	str	r7, [r8]
    ad14:	add	r8, r8, #4
    ad18:	mov	ip, r7
    ad1c:	cmp	r7, r5
    ad20:	mov	r5, r9
    ad24:	beq	acf4 <transpose_array+0x214>
    ad28:	ldr	ip, [sp, #24]
    ad2c:	add	r0, r0, #1
    ad30:	cmp	r0, r4
    ad34:	bne	acbc <transpose_array+0x1dc>
    ad38:	b	af90 <transpose_array+0x4b0>
    ad3c:	movw	r1, #0
    ad40:	movw	r3, #0
    ad44:	mov	r0, #93	; 0x5d
    ad48:	mov	r2, r5
    ad4c:	mvn	r7, #0
    ad50:	str	r0, [sp]
    ad54:	movt	r1, #0
    ad58:	movt	r3, #0
    ad5c:	mvn	r0, #0
    ad60:	bl	0 <coda_set_error>
    ad64:	b	afb0 <transpose_array+0x4d0>
    ad68:	cmp	r4, #1
    ad6c:	blt	af90 <transpose_array+0x4b0>
    ad70:	ldr	ip, [sp, #36]	; 0x24
    ad74:	ldr	lr, [fp, #-100]	; 0xffffff9c
    ad78:	add	r0, sl, #4
    ad7c:	mov	sl, #0
    ad80:	mov	r1, #0
    ad84:	str	r0, [sp, #24]
    ad88:	add	r0, r7, #4
    ad8c:	str	r0, [sp, #20]
    ad90:	orr	r0, r9, #4
    ad94:	mov	r9, #0
    ad98:	str	r0, [sp, #16]
    ad9c:	ldr	r2, [sp, #32]
    ada0:	ldr	r6, [sp, #28]
    ada4:	ldr	r5, [r2, sl, lsl #3]!
    ada8:	ldr	r2, [r2, #4]
    adac:	str	r5, [r6, r1, lsl #3]!
    adb0:	add	r1, lr, r1
    adb4:	str	r2, [r6, #4]
    adb8:	ldr	r2, [sp, #72]	; 0x48
    adbc:	add	r2, r2, #1
    adc0:	cmp	r2, ip
    adc4:	str	r2, [sp, #72]	; 0x48
    adc8:	bne	ae14 <transpose_array+0x334>
    adcc:	ldr	r2, [sp, #24]
    add0:	ldr	r6, [sp, #20]
    add4:	ldr	r8, [sp, #16]
    add8:	mov	r5, lr
    addc:	mov	r7, ip
    ade0:	ldr	r3, [r2], #4
    ade4:	str	r9, [r8, #-4]
    ade8:	ldr	r0, [r8]
    adec:	add	r1, r3, r1
    adf0:	mls	r1, r5, r7, r1
    adf4:	ldr	r5, [r6], #4
    adf8:	add	r0, r0, #1
    adfc:	str	r0, [r8]
    ae00:	add	r8, r8, #4
    ae04:	mov	r7, r0
    ae08:	cmp	r0, r5
    ae0c:	mov	r5, r3
    ae10:	beq	ade0 <transpose_array+0x300>
    ae14:	add	sl, sl, #1
    ae18:	cmp	sl, r4
    ae1c:	bne	ad9c <transpose_array+0x2bc>
    ae20:	b	af90 <transpose_array+0x4b0>
    ae24:	cmp	r4, #1
    ae28:	blt	af90 <transpose_array+0x4b0>
    ae2c:	ldr	ip, [sp, #36]	; 0x24
    ae30:	ldr	lr, [fp, #-100]	; 0xffffff9c
    ae34:	add	r0, sl, #4
    ae38:	mov	sl, #0
    ae3c:	mov	r1, #0
    ae40:	str	r0, [sp, #24]
    ae44:	add	r0, r7, #4
    ae48:	str	r0, [sp, #20]
    ae4c:	orr	r0, r9, #4
    ae50:	mov	r9, #0
    ae54:	str	r0, [sp, #16]
    ae58:	ldr	r0, [sp, #28]
    ae5c:	add	r2, r0, r1, lsl #1
    ae60:	ldr	r0, [sp, #32]
    ae64:	add	r1, lr, r1
    ae68:	add	r5, r0, sl, lsl #1
    ae6c:	ldrh	r5, [r5]
    ae70:	strh	r5, [r2]
    ae74:	ldr	r2, [sp, #72]	; 0x48
    ae78:	add	r2, r2, #1
    ae7c:	cmp	r2, ip
    ae80:	str	r2, [sp, #72]	; 0x48
    ae84:	bne	aed0 <transpose_array+0x3f0>
    ae88:	ldr	r2, [sp, #24]
    ae8c:	ldr	r6, [sp, #20]
    ae90:	ldr	r8, [sp, #16]
    ae94:	mov	r5, lr
    ae98:	mov	r7, ip
    ae9c:	ldr	r3, [r2], #4
    aea0:	str	r9, [r8, #-4]
    aea4:	ldr	r0, [r8]
    aea8:	add	r1, r3, r1
    aeac:	mls	r1, r5, r7, r1
    aeb0:	ldr	r5, [r6], #4
    aeb4:	add	r0, r0, #1
    aeb8:	str	r0, [r8]
    aebc:	add	r8, r8, #4
    aec0:	mov	r7, r0
    aec4:	cmp	r0, r5
    aec8:	mov	r5, r3
    aecc:	beq	ae9c <transpose_array+0x3bc>
    aed0:	add	sl, sl, #1
    aed4:	cmp	sl, r4
    aed8:	bne	ae58 <transpose_array+0x378>
    aedc:	b	af90 <transpose_array+0x4b0>
    aee0:	cmp	r4, #1
    aee4:	blt	af90 <transpose_array+0x4b0>
    aee8:	ldr	ip, [sp, #36]	; 0x24
    aeec:	ldr	lr, [fp, #-100]	; 0xffffff9c
    aef0:	add	r0, sl, #4
    aef4:	mov	sl, #0
    aef8:	mov	r1, #0
    aefc:	str	r0, [sp, #24]
    af00:	add	r0, r7, #4
    af04:	str	r0, [sp, #20]
    af08:	orr	r0, r9, #4
    af0c:	mov	r9, #0
    af10:	str	r0, [sp, #16]
    af14:	ldr	r0, [sp, #32]
    af18:	ldr	r2, [r0, sl, lsl #2]
    af1c:	ldr	r0, [sp, #28]
    af20:	str	r2, [r0, r1, lsl #2]
    af24:	ldr	r2, [sp, #72]	; 0x48
    af28:	add	r1, lr, r1
    af2c:	add	r2, r2, #1
    af30:	cmp	r2, ip
    af34:	str	r2, [sp, #72]	; 0x48
    af38:	bne	af84 <transpose_array+0x4a4>
    af3c:	ldr	r2, [sp, #24]
    af40:	ldr	r6, [sp, #20]
    af44:	ldr	r8, [sp, #16]
    af48:	mov	r5, lr
    af4c:	mov	r7, ip
    af50:	ldr	r3, [r2], #4
    af54:	str	r9, [r8, #-4]
    af58:	ldr	r0, [r8]
    af5c:	add	r1, r3, r1
    af60:	mls	r1, r5, r7, r1
    af64:	ldr	r5, [r6], #4
    af68:	add	r0, r0, #1
    af6c:	str	r0, [r8]
    af70:	add	r8, r8, #4
    af74:	mov	r7, r0
    af78:	cmp	r0, r5
    af7c:	mov	r5, r3
    af80:	beq	af50 <transpose_array+0x470>
    af84:	add	sl, sl, #1
    af88:	cmp	sl, r4
    af8c:	bne	af14 <transpose_array+0x434>
    af90:	ldr	r4, [sp, #28]
    af94:	ldr	r0, [sp, #32]
    af98:	ldr	r2, [sp, #8]
    af9c:	mov	r1, r4
    afa0:	bl	0 <memcpy>
    afa4:	mov	r0, r4
    afa8:	bl	0 <free>
    afac:	mov	r7, #0
    afb0:	mov	r0, r7
    afb4:	sub	sp, fp, #28
    afb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afbc:	movw	r0, #0
    afc0:	movw	r1, #0
    afc4:	movw	r3, #0
    afc8:	mov	r2, #172	; 0xac
    afcc:	movt	r0, #0
    afd0:	movt	r1, #0
    afd4:	movt	r3, #0
    afd8:	bl	0 <__assert_fail>
