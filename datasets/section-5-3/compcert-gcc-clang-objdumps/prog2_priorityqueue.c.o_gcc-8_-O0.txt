
../compcert-repos/prog2/CMakeFiles/9.dir/Aula09_Filas_de_Prioridade_e_Heaps/priorityqueue.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <fp_insere>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #32
  10:	str	r0, [fp, #-24]	; 0xffffffe8
  14:	str	r1, [fp, #-28]	; 0xffffffe4
  18:	str	r2, [fp, #-32]	; 0xffffffe0
  1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
  20:	cmp	r3, #0
  24:	bne	30 <fp_insere+0x30>
  28:	mvn	r3, #0
  2c:	b	158 <fp_insere+0x158>
  30:	ldr	r3, [fp, #-24]	; 0xffffffe8
  34:	ldr	r2, [r3]
  38:	ldr	r3, [fp, #-24]	; 0xffffffe8
  3c:	ldr	r3, [r3, #4]
  40:	cmp	r2, r3
  44:	bne	50 <fp_insere+0x50>
  48:	mov	r3, #0
  4c:	b	158 <fp_insere+0x158>
  50:	ldr	r1, [fp, #-28]	; 0xffffffe4
  54:	ldr	r0, [fp, #-32]	; 0xffffffe0
  58:	bl	0 <elemento_cria>
  5c:	str	r0, [fp, #-16]
  60:	mov	r3, #0
  64:	str	r3, [fp, #-8]
  68:	b	a8 <fp_insere+0xa8>
  6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
  70:	ldr	r2, [r3, #8]
  74:	ldr	r3, [fp, #-8]
  78:	lsl	r3, r3, #2
  7c:	add	r3, r2, r3
  80:	ldr	r3, [r3]
  84:	ldr	r1, [fp, #-16]
  88:	mov	r0, r3
  8c:	bl	0 <maior_que>
  90:	mov	r3, r0
  94:	cmp	r3, #0
  98:	beq	c0 <fp_insere+0xc0>
  9c:	ldr	r3, [fp, #-8]
  a0:	add	r3, r3, #1
  a4:	str	r3, [fp, #-8]
  a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
  ac:	ldr	r3, [r3]
  b0:	ldr	r2, [fp, #-8]
  b4:	cmp	r2, r3
  b8:	blt	6c <fp_insere+0x6c>
  bc:	b	c4 <fp_insere+0xc4>
  c0:	nop	{0}
  c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
  c8:	ldr	r3, [r3]
  cc:	str	r3, [fp, #-12]
  d0:	b	114 <fp_insere+0x114>
  d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
  d8:	ldr	r2, [r3, #8]
  dc:	ldr	r3, [fp, #-12]
  e0:	lsl	r3, r3, #2
  e4:	add	r2, r2, r3
  e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
  ec:	ldr	r1, [r3, #8]
  f0:	ldr	r3, [fp, #-12]
  f4:	add	r3, r3, #1
  f8:	lsl	r3, r3, #2
  fc:	add	r3, r1, r3
 100:	ldr	r2, [r2]
 104:	str	r2, [r3]
 108:	ldr	r3, [fp, #-12]
 10c:	sub	r3, r3, #1
 110:	str	r3, [fp, #-12]
 114:	ldr	r2, [fp, #-12]
 118:	ldr	r3, [fp, #-8]
 11c:	cmp	r2, r3
 120:	bge	d4 <fp_insere+0xd4>
 124:	ldr	r3, [fp, #-24]	; 0xffffffe8
 128:	ldr	r2, [r3, #8]
 12c:	ldr	r3, [fp, #-8]
 130:	lsl	r3, r3, #2
 134:	add	r3, r2, r3
 138:	ldr	r2, [fp, #-16]
 13c:	str	r2, [r3]
 140:	ldr	r3, [fp, #-24]	; 0xffffffe8
 144:	ldr	r3, [r3]
 148:	add	r2, r3, #1
 14c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 150:	str	r2, [r3]
 154:	mov	r3, #1
 158:	mov	r0, r3
 15c:	sub	sp, fp, #4
 160:	ldr	fp, [sp]
 164:	add	sp, sp, #4
 168:	pop	{pc}		; (ldr pc, [sp], #4)

0000016c <fp_remove>:
 16c:	push	{fp}		; (str fp, [sp, #-4]!)
 170:	add	fp, sp, #0
 174:	sub	sp, sp, #20
 178:	str	r0, [fp, #-16]
 17c:	ldr	r3, [fp, #-16]
 180:	cmp	r3, #0
 184:	beq	198 <fp_remove+0x2c>
 188:	ldr	r3, [fp, #-16]
 18c:	ldr	r3, [r3]
 190:	cmp	r3, #0
 194:	bne	1a0 <fp_remove+0x34>
 198:	mov	r3, #0
 19c:	b	22c <fp_remove+0xc0>
 1a0:	ldr	r3, [fp, #-16]
 1a4:	ldr	r3, [r3, #8]
 1a8:	ldr	r3, [r3]
 1ac:	str	r3, [fp, #-12]
 1b0:	mov	r3, #0
 1b4:	str	r3, [fp, #-8]
 1b8:	b	1fc <fp_remove+0x90>
 1bc:	ldr	r3, [fp, #-16]
 1c0:	ldr	r2, [r3, #8]
 1c4:	ldr	r3, [fp, #-8]
 1c8:	add	r3, r3, #1
 1cc:	lsl	r3, r3, #2
 1d0:	add	r2, r2, r3
 1d4:	ldr	r3, [fp, #-16]
 1d8:	ldr	r1, [r3, #8]
 1dc:	ldr	r3, [fp, #-8]
 1e0:	lsl	r3, r3, #2
 1e4:	add	r3, r1, r3
 1e8:	ldr	r2, [r2]
 1ec:	str	r2, [r3]
 1f0:	ldr	r3, [fp, #-8]
 1f4:	add	r3, r3, #1
 1f8:	str	r3, [fp, #-8]
 1fc:	ldr	r3, [fp, #-16]
 200:	ldr	r3, [r3]
 204:	ldr	r2, [fp, #-8]
 208:	cmp	r2, r3
 20c:	blt	1bc <fp_remove+0x50>
 210:	ldr	r3, [fp, #-16]
 214:	ldr	r3, [r3]
 218:	sub	r2, r3, #1
 21c:	ldr	r3, [fp, #-16]
 220:	str	r2, [r3]
 224:	ldr	r3, [fp, #-12]
 228:	ldr	r3, [r3, #4]
 22c:	mov	r0, r3
 230:	add	sp, fp, #0
 234:	pop	{fp}		; (ldr fp, [sp], #4)
 238:	bx	lr

0000023c <fp_carrega>:
 23c:	str	fp, [sp, #-8]!
 240:	str	lr, [sp, #4]
 244:	add	fp, sp, #4
 248:	sub	sp, sp, #272	; 0x110
 24c:	str	r0, [fp, #-272]	; 0xfffffef0
 250:	str	r1, [fp, #-276]	; 0xfffffeec
 254:	movw	r1, #0
 258:	movt	r1, #0
 25c:	ldr	r0, [fp, #-276]	; 0xfffffeec
 260:	bl	0 <fopen>
 264:	str	r0, [fp, #-8]
 268:	ldr	r3, [fp, #-8]
 26c:	cmp	r3, #0
 270:	bne	2e8 <fp_carrega+0xac>
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	bl	0 <puts>
 280:	b	304 <fp_carrega+0xc8>
 284:	sub	r3, fp, #268	; 0x10c
 288:	mov	r2, r3
 28c:	movw	r1, #0
 290:	movt	r1, #0
 294:	ldr	r0, [fp, #-8]
 298:	bl	0 <__isoc99_fscanf>
 29c:	sub	r3, fp, #264	; 0x108
 2a0:	ldr	r2, [fp, #-8]
 2a4:	mov	r1, #256	; 0x100
 2a8:	mov	r0, r3
 2ac:	bl	0 <fgets>
 2b0:	sub	r3, fp, #264	; 0x108
 2b4:	mov	r0, r3
 2b8:	bl	0 <strlen>
 2bc:	mov	r3, r0
 2c0:	sub	r3, r3, #1
 2c4:	sub	r2, fp, #4
 2c8:	add	r3, r2, r3
 2cc:	mov	r2, #0
 2d0:	strb	r2, [r3, #-260]	; 0xfffffefc
 2d4:	ldr	r2, [fp, #-268]	; 0xfffffef4
 2d8:	sub	r3, fp, #264	; 0x108
 2dc:	mov	r1, r3
 2e0:	ldr	r0, [fp, #-272]	; 0xfffffef0
 2e4:	bl	0 <fp_insere>
 2e8:	ldr	r0, [fp, #-8]
 2ec:	bl	0 <feof>
 2f0:	mov	r3, r0
 2f4:	cmp	r3, #0
 2f8:	beq	284 <fp_carrega+0x48>
 2fc:	ldr	r0, [fp, #-8]
 300:	bl	0 <fclose>
 304:	sub	sp, fp, #4
 308:	ldr	fp, [sp]
 30c:	add	sp, sp, #4
 310:	pop	{pc}		; (ldr pc, [sp], #4)

00000314 <heap_insere>:
 314:	str	fp, [sp, #-8]!
 318:	str	lr, [sp, #4]
 31c:	add	fp, sp, #4
 320:	sub	sp, sp, #32
 324:	str	r0, [fp, #-24]	; 0xffffffe8
 328:	str	r1, [fp, #-28]	; 0xffffffe4
 32c:	str	r2, [fp, #-32]	; 0xffffffe0
 330:	str	r3, [fp, #-36]	; 0xffffffdc
 334:	ldr	r3, [fp, #-24]	; 0xffffffe8
 338:	ldr	r2, [r3]
 33c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 340:	ldr	r3, [r3, #4]
 344:	cmp	r2, r3
 348:	bne	354 <heap_insere+0x40>
 34c:	mov	r3, #0
 350:	b	450 <heap_insere+0x13c>
 354:	ldr	r1, [fp, #-32]	; 0xffffffe0
 358:	ldr	r0, [fp, #-36]	; 0xffffffdc
 35c:	bl	0 <elemento_cria>
 360:	str	r0, [fp, #-16]
 364:	mov	r3, #0
 368:	str	r3, [fp, #-8]
 36c:	b	37c <heap_insere+0x68>
 370:	ldr	r3, [fp, #-8]
 374:	add	r3, r3, #1
 378:	str	r3, [fp, #-8]
 37c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 380:	ldr	r3, [r3]
 384:	ldr	r2, [fp, #-8]
 388:	cmp	r2, r3
 38c:	bge	3c4 <heap_insere+0xb0>
 390:	ldr	r3, [fp, #-24]	; 0xffffffe8
 394:	ldr	r2, [r3, #8]
 398:	ldr	r3, [fp, #-8]
 39c:	lsl	r3, r3, #2
 3a0:	add	r3, r2, r3
 3a4:	ldr	r2, [r3]
 3a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
 3ac:	ldr	r1, [fp, #-16]
 3b0:	mov	r0, r2
 3b4:	blx	r3
 3b8:	mov	r3, r0
 3bc:	cmp	r3, #1
 3c0:	bne	370 <heap_insere+0x5c>
 3c4:	ldr	r3, [fp, #-8]
 3c8:	str	r3, [fp, #-12]
 3cc:	b	410 <heap_insere+0xfc>
 3d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3d4:	ldr	r2, [r3, #8]
 3d8:	ldr	r3, [fp, #-12]
 3dc:	lsl	r3, r3, #2
 3e0:	add	r2, r2, r3
 3e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3e8:	ldr	r1, [r3, #8]
 3ec:	ldr	r3, [fp, #-12]
 3f0:	add	r3, r3, #1
 3f4:	lsl	r3, r3, #2
 3f8:	add	r3, r1, r3
 3fc:	ldr	r2, [r2]
 400:	str	r2, [r3]
 404:	ldr	r3, [fp, #-12]
 408:	sub	r3, r3, #1
 40c:	str	r3, [fp, #-12]
 410:	ldr	r3, [fp, #-12]
 414:	cmp	r3, #0
 418:	bgt	3d0 <heap_insere+0xbc>
 41c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 420:	ldr	r2, [r3, #8]
 424:	ldr	r3, [fp, #-8]
 428:	lsl	r3, r3, #2
 42c:	add	r3, r2, r3
 430:	ldr	r2, [fp, #-16]
 434:	str	r2, [r3]
 438:	ldr	r3, [fp, #-24]	; 0xffffffe8
 43c:	ldr	r3, [r3]
 440:	add	r2, r3, #1
 444:	ldr	r3, [fp, #-24]	; 0xffffffe8
 448:	str	r2, [r3]
 44c:	ldr	r3, [fp, #-8]
 450:	mov	r0, r3
 454:	sub	sp, fp, #4
 458:	ldr	fp, [sp]
 45c:	add	sp, sp, #4
 460:	pop	{pc}		; (ldr pc, [sp], #4)

00000464 <heap_remove>:
 464:	push	{fp}		; (str fp, [sp, #-4]!)
 468:	add	fp, sp, #0
 46c:	sub	sp, sp, #12
 470:	str	r0, [fp, #-8]
 474:	str	r1, [fp, #-12]
 478:	mov	r3, #0
 47c:	mov	r0, r3
 480:	add	sp, fp, #0
 484:	pop	{fp}		; (ldr fp, [sp], #4)
 488:	bx	lr

0000048c <heap_carrega>:
 48c:	str	fp, [sp, #-8]!
 490:	str	lr, [sp, #4]
 494:	add	fp, sp, #4
 498:	sub	sp, sp, #280	; 0x118
 49c:	str	r0, [fp, #-272]	; 0xfffffef0
 4a0:	str	r1, [fp, #-276]	; 0xfffffeec
 4a4:	str	r2, [fp, #-280]	; 0xfffffee8
 4a8:	movw	r1, #0
 4ac:	movt	r1, #0
 4b0:	ldr	r0, [fp, #-280]	; 0xfffffee8
 4b4:	bl	0 <fopen>
 4b8:	str	r0, [fp, #-8]
 4bc:	ldr	r3, [fp, #-8]
 4c0:	cmp	r3, #0
 4c4:	bne	53c <heap_carrega+0xb0>
 4c8:	movw	r0, #0
 4cc:	movt	r0, #0
 4d0:	bl	0 <puts>
 4d4:	b	558 <heap_carrega+0xcc>
 4d8:	sub	r3, fp, #268	; 0x10c
 4dc:	mov	r2, r3
 4e0:	movw	r1, #0
 4e4:	movt	r1, #0
 4e8:	ldr	r0, [fp, #-8]
 4ec:	bl	0 <__isoc99_fscanf>
 4f0:	sub	r3, fp, #264	; 0x108
 4f4:	ldr	r2, [fp, #-8]
 4f8:	mov	r1, #256	; 0x100
 4fc:	mov	r0, r3
 500:	bl	0 <fgets>
 504:	sub	r3, fp, #264	; 0x108
 508:	mov	r0, r3
 50c:	bl	0 <strlen>
 510:	mov	r3, r0
 514:	sub	r3, r3, #1
 518:	sub	r2, fp, #4
 51c:	add	r3, r2, r3
 520:	mov	r2, #0
 524:	strb	r2, [r3, #-260]	; 0xfffffefc
 528:	ldr	r3, [fp, #-268]	; 0xfffffef4
 52c:	sub	r2, fp, #264	; 0x108
 530:	ldr	r1, [fp, #-276]	; 0xfffffeec
 534:	ldr	r0, [fp, #-272]	; 0xfffffef0
 538:	bl	314 <heap_insere>
 53c:	ldr	r0, [fp, #-8]
 540:	bl	0 <feof>
 544:	mov	r3, r0
 548:	cmp	r3, #0
 54c:	beq	4d8 <heap_carrega+0x4c>
 550:	ldr	r0, [fp, #-8]
 554:	bl	0 <fclose>
 558:	sub	sp, fp, #4
 55c:	ldr	fp, [sp]
 560:	add	sp, sp, #4
 564:	pop	{pc}		; (ldr pc, [sp], #4)

00000568 <main>:
 568:	str	fp, [sp, #-8]!
 56c:	str	lr, [sp, #4]
 570:	add	fp, sp, #4
 574:	sub	sp, sp, #200	; 0xc8
 578:	str	r0, [fp, #-200]	; 0xffffff38
 57c:	str	r1, [fp, #-204]	; 0xffffff34
 580:	mov	r0, #42	; 0x2a
 584:	bl	0 <vetor_cria>
 588:	str	r0, [fp, #-12]
 58c:	movw	r0, #0
 590:	movt	r0, #0
 594:	bl	0 <puts>
 598:	movw	r1, #0
 59c:	movt	r1, #0
 5a0:	ldr	r0, [fp, #-12]
 5a4:	bl	23c <fp_carrega>
 5a8:	movw	r3, #0
 5ac:	movt	r3, #0
 5b0:	ldr	r3, [r3]
 5b4:	mov	r1, r3
 5b8:	movw	r0, #0
 5bc:	movt	r0, #0
 5c0:	bl	0 <printf>
 5c4:	ldr	r0, [fp, #-12]
 5c8:	bl	0 <vetor_imprime>
 5cc:	ldr	r3, [fp, #-12]
 5d0:	ldr	r3, [r3]
 5d4:	cmp	r3, #42	; 0x2a
 5d8:	beq	5f0 <main+0x88>
 5dc:	movw	r0, #0
 5e0:	movt	r0, #0
 5e4:	bl	0 <puts>
 5e8:	mov	r3, #1
 5ec:	b	994 <main+0x42c>
 5f0:	ldr	r0, [fp, #-12]
 5f4:	bl	16c <fp_remove>
 5f8:	mov	r3, r0
 5fc:	mov	r1, r3
 600:	movw	r0, #0
 604:	movt	r0, #0
 608:	bl	0 <strcmp>
 60c:	mov	r3, r0
 610:	cmp	r3, #0
 614:	beq	62c <main+0xc4>
 618:	movw	r0, #0
 61c:	movt	r0, #0
 620:	bl	0 <puts>
 624:	mov	r3, #1
 628:	b	994 <main+0x42c>
 62c:	movw	r3, #0
 630:	movt	r3, #0
 634:	mov	r2, #0
 638:	str	r2, [r3]
 63c:	ldr	r0, [fp, #-12]
 640:	bl	16c <fp_remove>
 644:	movw	r3, #0
 648:	movt	r3, #0
 64c:	ldr	r3, [r3]
 650:	mov	r1, r3
 654:	movw	r0, #0
 658:	movt	r0, #0
 65c:	bl	0 <printf>
 660:	movw	r3, #0
 664:	movt	r3, #0
 668:	mov	r2, #0
 66c:	str	r2, [r3]
 670:	mov	r2, #99	; 0x63
 674:	movw	r1, #0
 678:	movt	r1, #0
 67c:	ldr	r0, [fp, #-12]
 680:	bl	0 <fp_insere>
 684:	movw	r3, #0
 688:	movt	r3, #0
 68c:	ldr	r3, [r3]
 690:	mov	r1, r3
 694:	movw	r0, #0
 698:	movt	r0, #0
 69c:	bl	0 <printf>
 6a0:	ldr	r0, [fp, #-12]
 6a4:	bl	16c <fp_remove>
 6a8:	movw	r3, #0
 6ac:	movt	r3, #0
 6b0:	mov	r2, #0
 6b4:	str	r2, [r3]
 6b8:	mov	r2, #0
 6bc:	movw	r1, #0
 6c0:	movt	r1, #0
 6c4:	ldr	r0, [fp, #-12]
 6c8:	bl	0 <fp_insere>
 6cc:	movw	r3, #0
 6d0:	movt	r3, #0
 6d4:	ldr	r3, [r3]
 6d8:	mov	r1, r3
 6dc:	movw	r0, #0
 6e0:	movt	r0, #0
 6e4:	bl	0 <printf>
 6e8:	ldr	r0, [fp, #-12]
 6ec:	bl	16c <fp_remove>
 6f0:	movw	r3, #0
 6f4:	movt	r3, #0
 6f8:	mov	r2, #0
 6fc:	str	r2, [r3]
 700:	mov	r2, #42	; 0x2a
 704:	movw	r1, #0
 708:	movt	r1, #0
 70c:	ldr	r0, [fp, #-12]
 710:	bl	0 <fp_insere>
 714:	movw	r3, #0
 718:	movt	r3, #0
 71c:	ldr	r3, [r3]
 720:	mov	r1, r3
 724:	movw	r0, #0
 728:	movt	r0, #0
 72c:	bl	0 <printf>
 730:	movw	r0, #0
 734:	movt	r0, #0
 738:	bl	0 <puts>
 73c:	mov	r0, #42	; 0x2a
 740:	bl	0 <vetor_criaHeap>
 744:	str	r0, [fp, #-16]
 748:	movw	r3, #0
 74c:	movt	r3, #0
 750:	str	r3, [fp, #-20]	; 0xffffffec
 754:	movw	r2, #0
 758:	movt	r2, #0
 75c:	ldr	r1, [fp, #-20]	; 0xffffffec
 760:	ldr	r0, [fp, #-16]
 764:	bl	48c <heap_carrega>
 768:	movw	r3, #0
 76c:	movt	r3, #0
 770:	ldr	r3, [r3]
 774:	mov	r1, r3
 778:	movw	r0, #0
 77c:	movt	r0, #0
 780:	bl	0 <printf>
 784:	ldr	r0, [fp, #-16]
 788:	bl	0 <vetor_imprimeHeap>
 78c:	ldr	r3, [fp, #-16]
 790:	ldr	r3, [r3]
 794:	cmp	r3, #42	; 0x2a
 798:	beq	7b0 <main+0x248>
 79c:	movw	r0, #0
 7a0:	movt	r0, #0
 7a4:	bl	0 <puts>
 7a8:	mov	r3, #1
 7ac:	b	994 <main+0x42c>
 7b0:	ldr	r1, [fp, #-20]	; 0xffffffec
 7b4:	ldr	r0, [fp, #-16]
 7b8:	bl	464 <heap_remove>
 7bc:	mov	r3, r0
 7c0:	mov	r1, r3
 7c4:	movw	r0, #0
 7c8:	movt	r0, #0
 7cc:	bl	0 <strcmp>
 7d0:	mov	r3, r0
 7d4:	cmp	r3, #0
 7d8:	beq	7f0 <main+0x288>
 7dc:	movw	r0, #0
 7e0:	movt	r0, #0
 7e4:	bl	0 <puts>
 7e8:	mov	r3, #1
 7ec:	b	994 <main+0x42c>
 7f0:	movw	r3, #0
 7f4:	movt	r3, #0
 7f8:	mov	r2, #0
 7fc:	str	r2, [r3]
 800:	ldr	r1, [fp, #-20]	; 0xffffffec
 804:	ldr	r0, [fp, #-16]
 808:	bl	464 <heap_remove>
 80c:	movw	r3, #0
 810:	movt	r3, #0
 814:	ldr	r3, [r3]
 818:	mov	r1, r3
 81c:	movw	r0, #0
 820:	movt	r0, #0
 824:	bl	0 <printf>
 828:	movw	r3, #0
 82c:	movt	r3, #0
 830:	mov	r2, #0
 834:	str	r2, [r3]
 838:	mov	r3, #99	; 0x63
 83c:	movw	r2, #0
 840:	movt	r2, #0
 844:	ldr	r1, [fp, #-20]	; 0xffffffec
 848:	ldr	r0, [fp, #-16]
 84c:	bl	314 <heap_insere>
 850:	movw	r3, #0
 854:	movt	r3, #0
 858:	ldr	r3, [r3]
 85c:	mov	r1, r3
 860:	movw	r0, #0
 864:	movt	r0, #0
 868:	bl	0 <printf>
 86c:	ldr	r1, [fp, #-20]	; 0xffffffec
 870:	ldr	r0, [fp, #-16]
 874:	bl	464 <heap_remove>
 878:	movw	r3, #0
 87c:	movt	r3, #0
 880:	mov	r2, #0
 884:	str	r2, [r3]
 888:	mov	r3, #0
 88c:	movw	r2, #0
 890:	movt	r2, #0
 894:	ldr	r1, [fp, #-20]	; 0xffffffec
 898:	ldr	r0, [fp, #-16]
 89c:	bl	314 <heap_insere>
 8a0:	movw	r3, #0
 8a4:	movt	r3, #0
 8a8:	ldr	r3, [r3]
 8ac:	mov	r1, r3
 8b0:	movw	r0, #0
 8b4:	movt	r0, #0
 8b8:	bl	0 <printf>
 8bc:	ldr	r1, [fp, #-20]	; 0xffffffec
 8c0:	ldr	r0, [fp, #-16]
 8c4:	bl	464 <heap_remove>
 8c8:	movw	r3, #0
 8cc:	movt	r3, #0
 8d0:	mov	r2, #0
 8d4:	str	r2, [r3]
 8d8:	mov	r3, #42	; 0x2a
 8dc:	movw	r2, #0
 8e0:	movt	r2, #0
 8e4:	ldr	r1, [fp, #-20]	; 0xffffffec
 8e8:	ldr	r0, [fp, #-16]
 8ec:	bl	314 <heap_insere>
 8f0:	movw	r3, #0
 8f4:	movt	r3, #0
 8f8:	ldr	r3, [r3]
 8fc:	mov	r1, r3
 900:	movw	r0, #0
 904:	movt	r0, #0
 908:	bl	0 <printf>
 90c:	mov	r0, #42	; 0x2a
 910:	bl	0 <vetor_criaHeap>
 914:	str	r0, [fp, #-16]
 918:	movw	r3, #0
 91c:	movt	r3, #0
 920:	str	r3, [fp, #-24]	; 0xffffffe8
 924:	movw	r2, #0
 928:	movt	r2, #0
 92c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 930:	ldr	r0, [fp, #-16]
 934:	bl	48c <heap_carrega>
 938:	movw	r3, #0
 93c:	movt	r3, #0
 940:	ldr	r3, [r3]
 944:	mov	r1, r3
 948:	movw	r0, #0
 94c:	movt	r0, #0
 950:	bl	0 <printf>
 954:	mov	r3, #0
 958:	str	r3, [fp, #-8]
 95c:	b	984 <main+0x41c>
 960:	ldr	r1, [fp, #-24]	; 0xffffffe8
 964:	ldr	r0, [fp, #-16]
 968:	bl	464 <heap_remove>
 96c:	mov	r3, r0
 970:	mov	r0, r3
 974:	bl	0 <puts>
 978:	ldr	r3, [fp, #-8]
 97c:	add	r3, r3, #1
 980:	str	r3, [fp, #-8]
 984:	ldr	r3, [fp, #-8]
 988:	cmp	r3, #41	; 0x29
 98c:	ble	960 <main+0x3f8>
 990:	mov	r3, #0
 994:	mov	r0, r3
 998:	sub	sp, fp, #4
 99c:	ldr	fp, [sp]
 9a0:	add	sp, sp, #4
 9a4:	pop	{pc}		; (ldr pc, [sp], #4)
