
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacmp.dir/tools/codacmp/codacmp.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
       0:	movw	r0, #0
       4:	movt	r0, #0
       8:	str	r4, [sp, #-8]!
       c:	str	lr, [sp, #4]
      10:	bl	0 <puts>
      14:	movw	r0, #0
      18:	movt	r0, #0
      1c:	bl	0 <puts>
      20:	movw	r0, #0
      24:	movt	r0, #0
      28:	bl	0 <puts>
      2c:	movw	r0, #0
      30:	movt	r0, #0
      34:	bl	0 <puts>
      38:	movw	r0, #0
      3c:	movt	r0, #0
      40:	bl	0 <puts>
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	bl	0 <puts>
      50:	movw	r0, #0
      54:	movt	r0, #0
      58:	bl	0 <puts>
      5c:	movw	r0, #0
      60:	movt	r0, #0
      64:	bl	0 <puts>
      68:	movw	r0, #0
      6c:	movt	r0, #0
      70:	bl	0 <puts>
      74:	movw	r0, #0
      78:	movt	r0, #0
      7c:	bl	0 <puts>
      80:	movw	r0, #0
      84:	movt	r0, #0
      88:	bl	0 <puts>
      8c:	movw	r0, #0
      90:	movt	r0, #0
      94:	bl	0 <puts>
      98:	movw	r0, #0
      9c:	movt	r0, #0
      a0:	bl	0 <puts>
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	bl	0 <puts>
      b0:	movw	r0, #0
      b4:	movt	r0, #0
      b8:	bl	0 <puts>
      bc:	movw	r0, #0
      c0:	movt	r0, #0
      c4:	bl	0 <puts>
      c8:	movw	r0, #0
      cc:	movt	r0, #0
      d0:	bl	0 <puts>
      d4:	movw	r0, #0
      d8:	movt	r0, #0
      dc:	bl	0 <puts>
      e0:	movw	r0, #0
      e4:	movt	r0, #0
      e8:	bl	0 <puts>
      ec:	movw	r0, #0
      f0:	movt	r0, #0
      f4:	bl	0 <puts>
      f8:	mov	r0, #10
      fc:	bl	0 <putchar>
     100:	movw	r0, #0
     104:	movt	r0, #0
     108:	bl	0 <puts>
     10c:	movw	r0, #0
     110:	movt	r0, #0
     114:	bl	0 <puts>
     118:	mov	r0, #10
     11c:	bl	0 <putchar>
     120:	movw	r0, #0
     124:	movt	r0, #0
     128:	bl	0 <puts>
     12c:	movw	r0, #0
     130:	movt	r0, #0
     134:	bl	0 <puts>
     138:	mov	r0, #10
     13c:	bl	0 <putchar>
     140:	movw	r0, #0
     144:	movt	r0, #0
     148:	bl	0 <puts>
     14c:	movw	r0, #0
     150:	movt	r0, #0
     154:	bl	0 <puts>
     158:	movw	r0, #0
     15c:	movt	r0, #0
     160:	bl	0 <puts>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	bl	0 <puts>
     170:	movw	r0, #0
     174:	movt	r0, #0
     178:	bl	0 <puts>
     17c:	movw	r0, #0
     180:	movt	r0, #0
     184:	bl	0 <puts>
     188:	movw	r0, #0
     18c:	movt	r0, #0
     190:	bl	0 <puts>
     194:	mov	r0, #10
     198:	ldr	r4, [sp]
     19c:	ldr	lr, [sp, #4]
     1a0:	add	sp, sp, #8
     1a4:	b	0 <putchar>

000001a8 <print_escaped>:
     1a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
     1ac:	subs	r5, r1, #0
     1b0:	strd	r6, [sp, #8]
     1b4:	str	r8, [sp, #16]
     1b8:	str	lr, [sp, #20]
     1bc:	ble	24c <print_escaped+0xa4>
     1c0:	sub	r4, r0, #1
     1c4:	movw	r7, #0
     1c8:	movt	r7, #0
     1cc:	movw	r8, #0
     1d0:	movt	r8, #0
     1d4:	movw	r6, #0
     1d8:	movt	r6, #0
     1dc:	add	r5, r4, r5
     1e0:	b	214 <print_escaped+0x6c>
     1e4:	cmp	r1, #12
     1e8:	beq	2c4 <print_escaped+0x11c>
     1ec:	bcc	2b4 <print_escaped+0x10c>
     1f0:	cmp	r1, #13
     1f4:	beq	2a4 <print_escaped+0xfc>
     1f8:	cmp	r1, #92	; 0x5c
     1fc:	bne	28c <print_escaped+0xe4>
     200:	movw	r0, #0
     204:	movt	r0, #0
     208:	bl	0 <printf>
     20c:	cmp	r4, r5
     210:	beq	24c <print_escaped+0xa4>
     214:	ldrb	r1, [r4, #1]!
     218:	cmp	r1, #10
     21c:	beq	260 <print_escaped+0xb8>
     220:	bhi	1e4 <print_escaped+0x3c>
     224:	cmp	r1, #8
     228:	beq	27c <print_escaped+0xd4>
     22c:	bhi	26c <print_escaped+0xc4>
     230:	cmp	r1, #7
     234:	bne	28c <print_escaped+0xe4>
     238:	movw	r0, #0
     23c:	movt	r0, #0
     240:	bl	0 <printf>
     244:	cmp	r4, r5
     248:	bne	214 <print_escaped+0x6c>
     24c:	ldrd	r4, [sp]
     250:	ldrd	r6, [sp, #8]
     254:	ldr	r8, [sp, #16]
     258:	add	sp, sp, #20
     25c:	pop	{pc}		; (ldr pc, [sp], #4)
     260:	mov	r0, r7
     264:	bl	0 <printf>
     268:	b	20c <print_escaped+0x64>
     26c:	movw	r0, #0
     270:	movt	r0, #0
     274:	bl	0 <printf>
     278:	b	20c <print_escaped+0x64>
     27c:	movw	r0, #0
     280:	movt	r0, #0
     284:	bl	0 <printf>
     288:	b	20c <print_escaped+0x64>
     28c:	sub	r3, r1, #32
     290:	cmp	r3, #94	; 0x5e
     294:	bhi	2d0 <print_escaped+0x128>
     298:	mov	r0, r1
     29c:	bl	0 <putchar>
     2a0:	b	20c <print_escaped+0x64>
     2a4:	movw	r0, #0
     2a8:	movt	r0, #0
     2ac:	bl	0 <printf>
     2b0:	b	20c <print_escaped+0x64>
     2b4:	movw	r0, #0
     2b8:	movt	r0, #0
     2bc:	bl	0 <printf>
     2c0:	b	20c <print_escaped+0x64>
     2c4:	mov	r0, r6
     2c8:	bl	0 <printf>
     2cc:	b	20c <print_escaped+0x64>
     2d0:	mov	r0, r8
     2d4:	bl	0 <printf>
     2d8:	b	20c <print_escaped+0x64>

000002dc <print_error_with_cursor>:
     2dc:	strd	r4, [sp, #-16]!
     2e0:	sub	r4, r1, #1
     2e4:	str	r6, [sp, #8]
     2e8:	str	lr, [sp, #12]
     2ec:	bl	0 <coda_cursor_add_to_error_message>
     2f0:	movw	r3, #0
     2f4:	movt	r3, #0
     2f8:	ldr	r5, [r3]
     2fc:	movw	r3, #0
     300:	movt	r3, #0
     304:	ldr	r4, [r3, r4, lsl #2]
     308:	bl	0 <coda_get_errno>
     30c:	ldr	r0, [r0]
     310:	bl	0 <coda_errno_to_string>
     314:	mov	r3, r0
     318:	movw	r1, #0
     31c:	movt	r1, #0
     320:	mov	r2, r4
     324:	ldr	r6, [sp, #8]
     328:	mov	r0, r5
     32c:	ldrd	r4, [sp]
     330:	ldr	lr, [sp, #12]
     334:	add	sp, sp, #16
     338:	b	0 <fprintf>

0000033c <compare_data>:
     33c:	strd	r4, [sp, #-36]!	; 0xffffffdc
     340:	mov	r5, r1
     344:	mov	r4, r0
     348:	strd	r6, [sp, #8]
     34c:	strd	r8, [sp, #16]
     350:	strd	sl, [sp, #24]
     354:	str	lr, [sp, #32]
     358:	sub	sp, sp, #116	; 0x74
     35c:	add	r1, sp, #56	; 0x38
     360:	bl	0 <coda_cursor_get_type_class>
     364:	cmp	r0, #0
     368:	bne	acc <compare_data+0x790>
     36c:	add	r1, sp, #60	; 0x3c
     370:	mov	r0, r5
     374:	bl	0 <coda_cursor_get_type_class>
     378:	subs	r7, r0, #0
     37c:	bne	d24 <compare_data+0x9e8>
     380:	ldr	r3, [sp, #56]	; 0x38
     384:	ldr	r2, [sp, #60]	; 0x3c
     388:	cmp	r3, r2
     38c:	bne	3b8 <compare_data+0x7c>
     390:	cmp	r3, #6
     394:	ldrls	pc, [pc, r3, lsl #2]
     398:	b	4d4 <compare_data+0x198>
     39c:	.word	0x000004c0
     3a0:	.word	0x00000558
     3a4:	.word	0x00000768
     3a8:	.word	0x00000768
     3ac:	.word	0x000007d4
     3b0:	.word	0x00000908
     3b4:	.word	0x00000410
     3b8:	movw	r0, #0
     3bc:	movt	r0, #0
     3c0:	bl	0 <printf>
     3c4:	mov	r0, r4
     3c8:	movw	r1, #0
     3cc:	movt	r1, #0
     3d0:	bl	0 <coda_cursor_print_path>
     3d4:	mov	r0, #10
     3d8:	bl	0 <putchar>
     3dc:	movw	r3, #0
     3e0:	movt	r3, #0
     3e4:	ldr	r6, [r3]
     3e8:	cmp	r6, #0
     3ec:	bne	a7c <compare_data+0x740>
     3f0:	mov	r0, r6
     3f4:	add	sp, sp, #116	; 0x74
     3f8:	ldrd	r4, [sp]
     3fc:	ldrd	r6, [sp, #8]
     400:	ldrd	r8, [sp, #16]
     404:	ldrd	sl, [sp, #24]
     408:	add	sp, sp, #32
     40c:	pop	{pc}		; (ldr pc, [sp], #4)
     410:	add	r6, sp, #80	; 0x50
     414:	mov	r0, r4
     418:	mov	r1, r6
     41c:	bl	0 <coda_cursor_get_special_type>
     420:	cmp	r0, #0
     424:	bne	acc <compare_data+0x790>
     428:	add	r1, sp, #88	; 0x58
     42c:	mov	r0, r5
     430:	bl	0 <coda_cursor_get_special_type>
     434:	subs	r7, r0, #0
     438:	bne	d24 <compare_data+0x9e8>
     43c:	ldr	r2, [sp, #80]	; 0x50
     440:	ldr	r3, [sp, #88]	; 0x58
     444:	cmp	r2, r3
     448:	beq	f44 <compare_data+0xc08>
     44c:	movw	r0, #0
     450:	movt	r0, #0
     454:	bl	0 <printf>
     458:	mov	r0, r4
     45c:	movw	r1, #0
     460:	movt	r1, #0
     464:	bl	0 <coda_cursor_print_path>
     468:	mov	r0, #10
     46c:	bl	0 <putchar>
     470:	movw	r3, #0
     474:	movt	r3, #0
     478:	ldr	r6, [r3]
     47c:	cmp	r6, #0
     480:	beq	3f0 <compare_data+0xb4>
     484:	movw	r4, #0
     488:	movt	r4, #0
     48c:	ldr	r0, [sp, #80]	; 0x50
     490:	mov	r6, r7
     494:	ldr	r5, [r4]
     498:	bl	0 <coda_type_get_special_type_name>
     49c:	mov	r2, r0
     4a0:	movw	r0, #0
     4a4:	movt	r0, #0
     4a8:	mov	r1, r5
     4ac:	bl	0 <printf>
     4b0:	ldr	r0, [sp, #88]	; 0x58
     4b4:	ldr	r4, [r4, #4]
     4b8:	bl	0 <coda_type_get_special_type_name>
     4bc:	b	ab4 <compare_data+0x778>
     4c0:	mov	r1, r5
     4c4:	mov	r0, r4
     4c8:	bl	1b78 <compare_records>
     4cc:	cmp	r0, #0
     4d0:	bne	f78 <compare_data+0xc3c>
     4d4:	add	r6, sp, #80	; 0x50
     4d8:	mov	r1, r6
     4dc:	mov	r0, r4
     4e0:	bl	0 <coda_cursor_has_attributes>
     4e4:	cmp	r0, #0
     4e8:	bne	acc <compare_data+0x790>
     4ec:	add	r1, sp, #88	; 0x58
     4f0:	mov	r0, r5
     4f4:	bl	0 <coda_cursor_has_attributes>
     4f8:	cmp	r0, #0
     4fc:	bne	d24 <compare_data+0x9e8>
     500:	ldr	r6, [sp, #80]	; 0x50
     504:	ldr	r3, [sp, #88]	; 0x58
     508:	orrs	r6, r6, r3
     50c:	beq	3f0 <compare_data+0xb4>
     510:	mov	r0, r4
     514:	bl	0 <coda_cursor_goto_attributes>
     518:	cmp	r0, #0
     51c:	bne	acc <compare_data+0x790>
     520:	mov	r0, r5
     524:	bl	0 <coda_cursor_goto_attributes>
     528:	cmp	r0, #0
     52c:	bne	d24 <compare_data+0x9e8>
     530:	mov	r1, r5
     534:	mov	r0, r4
     538:	bl	33c <compare_data>
     53c:	subs	r6, r0, #0
     540:	bne	f78 <compare_data+0xc3c>
     544:	mov	r0, r4
     548:	bl	0 <coda_cursor_goto_parent>
     54c:	mov	r0, r5
     550:	bl	0 <coda_cursor_goto_parent>
     554:	b	3f0 <compare_data+0xb4>
     558:	movw	r3, #0
     55c:	movt	r3, #0
     560:	add	r2, sp, #64	; 0x40
     564:	mov	r1, r4
     568:	ldr	r0, [r3, #12]
     56c:	bl	0 <coda_tree_node_get_item_for_cursor>
     570:	subs	r3, r0, #0
     574:	bne	acc <compare_data+0x790>
     578:	ldr	r7, [sp, #64]	; 0x40
     57c:	cmp	r7, #0
     580:	beq	d6c <compare_data+0xa30>
     584:	add	r1, sp, #72	; 0x48
     588:	mov	r0, r4
     58c:	str	r3, [sp, #68]	; 0x44
     590:	bl	0 <coda_cursor_get_num_elements>
     594:	cmp	r0, #0
     598:	bne	acc <compare_data+0x790>
     59c:	add	r6, sp, #80	; 0x50
     5a0:	mov	r0, r5
     5a4:	mov	r1, r6
     5a8:	bl	0 <coda_cursor_get_num_elements>
     5ac:	cmp	r0, #0
     5b0:	bne	d24 <compare_data+0x9e8>
     5b4:	mov	r0, r7
     5b8:	add	r1, sp, #68	; 0x44
     5bc:	bl	0 <coda_expression_from_string>
     5c0:	subs	r7, r0, #0
     5c4:	bne	d38 <compare_data+0x9fc>
     5c8:	ldr	r0, [sp, #72]	; 0x48
     5cc:	lsl	r0, r0, #2
     5d0:	bl	0 <malloc>
     5d4:	subs	r3, r0, #0
     5d8:	ldr	r2, [sp, #72]	; 0x48
     5dc:	str	r3, [sp, #28]
     5e0:	beq	1848 <compare_data+0x150c>
     5e4:	cmp	r2, #0
     5e8:	ble	604 <compare_data+0x2c8>
     5ec:	ldr	r3, [sp, #28]
     5f0:	mov	r1, r7
     5f4:	add	r2, r3, r2, lsl #2
     5f8:	str	r1, [r3], #4
     5fc:	cmp	r2, r3
     600:	bne	5f8 <compare_data+0x2bc>
     604:	ldr	r0, [sp, #80]	; 0x50
     608:	lsl	r0, r0, #2
     60c:	bl	0 <malloc>
     610:	subs	r3, r0, #0
     614:	str	r3, [sp, #32]
     618:	beq	17fc <compare_data+0x14c0>
     61c:	ldr	r2, [sp, #80]	; 0x50
     620:	cmp	r2, #0
     624:	ble	640 <compare_data+0x304>
     628:	ldr	r3, [sp, #32]
     62c:	mov	r1, #0
     630:	add	r2, r3, r2, lsl #2
     634:	str	r1, [r3], #4
     638:	cmp	r2, r3
     63c:	bne	634 <compare_data+0x2f8>
     640:	mov	r0, #1
     644:	bl	0 <coda_hashtable_new>
     648:	subs	r3, r0, #0
     64c:	str	r3, [sp, #8]
     650:	beq	1758 <compare_data+0x141c>
     654:	mov	r0, #1
     658:	bl	0 <coda_hashtable_new>
     65c:	subs	r3, r0, #0
     660:	str	r3, [sp, #16]
     664:	beq	1708 <compare_data+0x13cc>
     668:	ldr	sl, [sp, #68]	; 0x44
     66c:	ldr	r3, [sp, #72]	; 0x48
     670:	ldr	r2, [sp, #80]	; 0x50
     674:	cmp	r3, #0
     678:	strd	r2, [sp, #36]	; 0x24
     67c:	bgt	fe0 <compare_data+0xca4>
     680:	ldr	r3, [sp, #36]	; 0x24
     684:	cmp	r3, #0
     688:	bgt	1290 <compare_data+0xf54>
     68c:	ldrd	r2, [sp, #36]	; 0x24
     690:	cmp	r3, r2
     694:	beq	6d0 <compare_data+0x394>
     698:	movw	r0, #0
     69c:	movt	r0, #0
     6a0:	bl	0 <printf>
     6a4:	movw	r1, #0
     6a8:	movt	r1, #0
     6ac:	mov	r0, r4
     6b0:	bl	0 <coda_cursor_print_path>
     6b4:	mov	r0, #10
     6b8:	bl	0 <putchar>
     6bc:	movw	r3, #0
     6c0:	movt	r3, #0
     6c4:	ldr	r3, [r3]
     6c8:	cmp	r3, #0
     6cc:	bne	158c <compare_data+0x1250>
     6d0:	ldr	r3, [sp, #40]	; 0x28
     6d4:	cmp	r3, #0
     6d8:	ble	1464 <compare_data+0x1128>
     6dc:	ldr	fp, [sp, #28]
     6e0:	movw	sl, #0
     6e4:	movt	sl, #0
     6e8:	mov	r8, #1
     6ec:	str	r5, [sp, #52]	; 0x34
     6f0:	add	r9, fp, r3, lsl #2
     6f4:	movw	r3, #0
     6f8:	movt	r3, #0
     6fc:	mov	r5, fp
     700:	mov	fp, r7
     704:	ldr	r7, [sp, #16]
     708:	str	r3, [sp, #44]	; 0x2c
     70c:	movw	r3, #0
     710:	movt	r3, #0
     714:	str	r3, [sp, #48]	; 0x30
     718:	b	724 <compare_data+0x3e8>
     71c:	cmp	r9, r5
     720:	beq	119c <compare_data+0xe60>
     724:	mov	r0, r7
     728:	ldr	r1, [r5], #4
     72c:	bl	0 <coda_hashtable_get_index_from_name>
     730:	cmp	r0, #0
     734:	bge	71c <compare_data+0x3e0>
     738:	cmp	r8, #0
     73c:	bne	1174 <compare_data+0xe38>
     740:	ldr	r8, [sl]
     744:	cmp	r8, #0
     748:	beq	71c <compare_data+0x3e0>
     74c:	ldr	r3, [sp, #44]	; 0x2c
     750:	mov	r8, #0
     754:	ldr	r2, [r5, #-4]
     758:	ldr	r0, [sp, #48]	; 0x30
     75c:	ldr	r1, [r3]
     760:	bl	0 <printf>
     764:	b	71c <compare_data+0x3e0>
     768:	add	r1, sp, #64	; 0x40
     76c:	mov	r0, r4
     770:	bl	0 <coda_cursor_get_read_type>
     774:	cmp	r0, #0
     778:	bne	acc <compare_data+0x790>
     77c:	add	r1, sp, #68	; 0x44
     780:	mov	r0, r5
     784:	bl	0 <coda_cursor_get_read_type>
     788:	cmp	r0, #0
     78c:	bne	d24 <compare_data+0x9e8>
     790:	ldr	r3, [sp, #64]	; 0x40
     794:	ldr	r2, [sp, #68]	; 0x44
     798:	cmp	r3, r2
     79c:	bne	ebc <compare_data+0xb80>
     7a0:	cmp	r3, #9
     7a4:	ldrls	pc, [pc, r3, lsl #2]
     7a8:	b	1888 <compare_data+0x154c>
     7ac:	.word	0x00000c74
     7b0:	.word	0x00000ae0
     7b4:	.word	0x00000c74
     7b8:	.word	0x00000ae0
     7bc:	.word	0x00000c74
     7c0:	.word	0x00000ae0
     7c4:	.word	0x00000c74
     7c8:	.word	0x00000ae0
     7cc:	.word	0x00000ba4
     7d0:	.word	0x00000ba4
     7d4:	add	r6, sp, #80	; 0x50
     7d8:	mov	r0, r4
     7dc:	mov	r1, r6
     7e0:	bl	0 <coda_cursor_get_string_length>
     7e4:	cmp	r0, #0
     7e8:	bne	acc <compare_data+0x790>
     7ec:	add	r1, sp, #88	; 0x58
     7f0:	mov	r0, r5
     7f4:	bl	0 <coda_cursor_get_string_length>
     7f8:	cmp	r0, #0
     7fc:	bne	d24 <compare_data+0x9e8>
     800:	ldr	r0, [sp, #80]	; 0x50
     804:	add	r0, r0, #1
     808:	bl	0 <malloc>
     80c:	subs	r7, r0, #0
     810:	beq	1690 <compare_data+0x1354>
     814:	ldr	r0, [sp, #88]	; 0x58
     818:	add	r0, r0, #1
     81c:	bl	0 <malloc>
     820:	subs	r8, r0, #0
     824:	beq	16c8 <compare_data+0x138c>
     828:	ldr	r2, [sp, #80]	; 0x50
     82c:	mov	r1, r7
     830:	mov	r0, r4
     834:	add	r2, r2, #1
     838:	bl	0 <coda_cursor_read_string>
     83c:	cmp	r0, #0
     840:	movne	r1, #1
     844:	movne	r0, r4
     848:	bne	a40 <compare_data+0x704>
     84c:	ldr	r2, [sp, #88]	; 0x58
     850:	mov	r1, r8
     854:	mov	r0, r5
     858:	add	r2, r2, #1
     85c:	bl	0 <coda_cursor_read_string>
     860:	cmp	r0, #0
     864:	bne	a38 <compare_data+0x6fc>
     868:	ldr	r2, [sp, #80]	; 0x50
     86c:	ldr	r3, [sp, #88]	; 0x58
     870:	cmp	r2, r3
     874:	bne	88c <compare_data+0x550>
     878:	mov	r1, r8
     87c:	mov	r0, r7
     880:	bl	0 <memcmp>
     884:	cmp	r0, #0
     888:	beq	8f4 <compare_data+0x5b8>
     88c:	movw	r0, #0
     890:	movt	r0, #0
     894:	bl	0 <printf>
     898:	movw	r1, #0
     89c:	movt	r1, #0
     8a0:	mov	r0, r4
     8a4:	bl	0 <coda_cursor_print_path>
     8a8:	mov	r0, #10
     8ac:	bl	0 <putchar>
     8b0:	movw	r3, #0
     8b4:	movt	r3, #0
     8b8:	ldr	r3, [r3]
     8bc:	cmp	r3, #0
     8c0:	beq	8f4 <compare_data+0x5b8>
     8c4:	movw	r9, #0
     8c8:	movt	r9, #0
     8cc:	mov	r2, r7
     8d0:	movw	r0, #0
     8d4:	movt	r0, #0
     8d8:	ldr	r1, [r9]
     8dc:	bl	0 <printf>
     8e0:	movw	r0, #0
     8e4:	movt	r0, #0
     8e8:	ldr	r1, [r9, #4]
     8ec:	mov	r2, r8
     8f0:	bl	0 <printf>
     8f4:	mov	r0, r7
     8f8:	bl	0 <free>
     8fc:	mov	r0, r8
     900:	bl	0 <free>
     904:	b	4d8 <compare_data+0x19c>
     908:	add	r1, sp, #72	; 0x48
     90c:	mov	r0, r4
     910:	bl	0 <coda_cursor_get_bit_size>
     914:	cmp	r0, #0
     918:	bne	acc <compare_data+0x790>
     91c:	add	r6, sp, #80	; 0x50
     920:	mov	r0, r5
     924:	ldr	r7, [sp, #72]	; 0x48
     928:	mov	r1, r6
     92c:	ldr	sl, [sp, #76]	; 0x4c
     930:	bl	0 <coda_cursor_get_bit_size>
     934:	cmp	r0, #0
     938:	bne	d24 <compare_data+0x9e8>
     93c:	ldrd	r2, [sp, #72]	; 0x48
     940:	ldrd	r8, [sp, #80]	; 0x50
     944:	cmp	r9, r3
     948:	cmpeq	r8, r2
     94c:	bne	e38 <compare_data+0xafc>
     950:	cmp	r8, #1
     954:	sbcs	r3, r9, #0
     958:	blt	4d8 <compare_data+0x19c>
     95c:	lsr	r2, r7, #3
     960:	ands	r1, r7, #7
     964:	asr	r3, sl, #3
     968:	movne	r1, #1
     96c:	orr	r2, r2, sl, lsl #29
     970:	adds	sl, r2, r1
     974:	adc	fp, r3, #0
     978:	mov	r0, sl
     97c:	strd	sl, [sp, #8]
     980:	bl	0 <malloc>
     984:	subs	r7, r0, #0
     988:	beq	17d8 <compare_data+0x149c>
     98c:	lsr	r2, r8, #3
     990:	and	r1, r8, #7
     994:	adds	r1, r1, #0
     998:	asr	r3, r9, #3
     99c:	orr	r2, r2, r9, lsl #29
     9a0:	movne	r1, #1
     9a4:	adds	sl, r2, r1
     9a8:	adc	fp, r3, #0
     9ac:	mov	r0, sl
     9b0:	strd	sl, [sp, #16]
     9b4:	bl	0 <malloc>
     9b8:	subs	sl, r0, #0
     9bc:	beq	17b4 <compare_data+0x1478>
     9c0:	mov	r1, r7
     9c4:	mov	r2, #0
     9c8:	strd	r8, [sp]
     9cc:	mov	r3, #0
     9d0:	mov	r0, r4
     9d4:	bl	0 <coda_cursor_read_bits>
     9d8:	cmp	r0, #0
     9dc:	movne	r1, #1
     9e0:	movne	r0, r4
     9e4:	bne	1138 <compare_data+0xdfc>
     9e8:	ldrd	r8, [sp, #80]	; 0x50
     9ec:	mov	r2, #0
     9f0:	mov	r3, #0
     9f4:	mov	r1, sl
     9f8:	mov	r0, r5
     9fc:	strd	r8, [sp]
     a00:	bl	0 <coda_cursor_read_bits>
     a04:	cmp	r0, #0
     a08:	bne	1130 <compare_data+0xdf4>
     a0c:	mov	r1, sl
     a10:	mov	r0, r7
     a14:	ldr	r2, [sp, #8]
     a18:	bl	0 <memcmp>
     a1c:	cmp	r0, #0
     a20:	bne	15c0 <compare_data+0x1284>
     a24:	mov	r0, r7
     a28:	bl	0 <free>
     a2c:	mov	r0, sl
     a30:	bl	0 <free>
     a34:	b	4d8 <compare_data+0x19c>
     a38:	mov	r1, #2
     a3c:	mov	r0, r5
     a40:	bl	2dc <print_error_with_cursor>
     a44:	bl	0 <coda_get_errno>
     a48:	ldr	r3, [r0]
     a4c:	cmn	r3, #300	; 0x12c
     a50:	beq	8f4 <compare_data+0x5b8>
     a54:	bl	0 <coda_get_errno>
     a58:	ldr	r3, [r0]
     a5c:	cmn	r3, #103	; 0x67
     a60:	beq	8f4 <compare_data+0x5b8>
     a64:	mov	r0, r7
     a68:	mvn	r6, #0
     a6c:	bl	0 <free>
     a70:	mov	r0, r8
     a74:	bl	0 <free>
     a78:	b	3f0 <compare_data+0xb4>
     a7c:	movw	r4, #0
     a80:	movt	r4, #0
     a84:	ldr	r0, [sp, #56]	; 0x38
     a88:	mov	r6, r7
     a8c:	ldr	r5, [r4]
     a90:	bl	0 <coda_type_get_class_name>
     a94:	mov	r2, r0
     a98:	movw	r0, #0
     a9c:	movt	r0, #0
     aa0:	mov	r1, r5
     aa4:	bl	0 <printf>
     aa8:	ldr	r0, [sp, #60]	; 0x3c
     aac:	ldr	r4, [r4, #4]
     ab0:	bl	0 <coda_type_get_class_name>
     ab4:	mov	r2, r0
     ab8:	mov	r1, r4
     abc:	movw	r0, #0
     ac0:	movt	r0, #0
     ac4:	bl	0 <printf>
     ac8:	b	3f0 <compare_data+0xb4>
     acc:	mov	r0, r4
     ad0:	mov	r1, #1
     ad4:	bl	2dc <print_error_with_cursor>
     ad8:	mvn	r6, #0
     adc:	b	3f0 <compare_data+0xb4>
     ae0:	add	r1, sp, #72	; 0x48
     ae4:	mov	r0, r4
     ae8:	bl	0 <coda_cursor_read_uint64>
     aec:	cmp	r0, #0
     af0:	bne	f80 <compare_data+0xc44>
     af4:	add	r6, sp, #80	; 0x50
     af8:	mov	r0, r5
     afc:	mov	r1, r6
     b00:	bl	0 <coda_cursor_read_uint64>
     b04:	cmp	r0, #0
     b08:	bne	fb0 <compare_data+0xc74>
     b0c:	ldrd	r0, [sp, #72]	; 0x48
     b10:	ldrd	r2, [sp, #80]	; 0x50
     b14:	cmp	r1, r3
     b18:	cmpeq	r0, r2
     b1c:	beq	4d8 <compare_data+0x19c>
     b20:	movw	r0, #0
     b24:	movt	r0, #0
     b28:	bl	0 <printf>
     b2c:	movw	r1, #0
     b30:	movt	r1, #0
     b34:	mov	r0, r4
     b38:	bl	0 <coda_cursor_print_path>
     b3c:	mov	r0, #10
     b40:	bl	0 <putchar>
     b44:	movw	r3, #0
     b48:	movt	r3, #0
     b4c:	ldr	r3, [r3]
     b50:	cmp	r3, #0
     b54:	beq	4d8 <compare_data+0x19c>
     b58:	add	r2, sp, #88	; 0x58
     b5c:	movw	r7, #0
     b60:	movt	r7, #0
     b64:	ldrd	r0, [sp, #72]	; 0x48
     b68:	bl	0 <coda_str64u>
     b6c:	add	r2, sp, #88	; 0x58
     b70:	movw	r0, #0
     b74:	movt	r0, #0
     b78:	ldr	r1, [r7]
     b7c:	bl	0 <printf>
     b80:	add	r2, sp, #88	; 0x58
     b84:	ldrd	r0, [sp, #80]	; 0x50
     b88:	bl	0 <coda_str64u>
     b8c:	add	r2, sp, #88	; 0x58
     b90:	movw	r0, #0
     b94:	movt	r0, #0
     b98:	ldr	r1, [r7, #4]
     b9c:	bl	0 <printf>
     ba0:	b	4d8 <compare_data+0x19c>
     ba4:	add	r6, sp, #80	; 0x50
     ba8:	mov	r0, r4
     bac:	mov	r1, r6
     bb0:	bl	0 <coda_cursor_read_double>
     bb4:	cmp	r0, #0
     bb8:	movne	r1, #1
     bbc:	movne	r0, r4
     bc0:	bne	fb8 <compare_data+0xc7c>
     bc4:	add	r1, sp, #88	; 0x58
     bc8:	mov	r0, r5
     bcc:	bl	0 <coda_cursor_read_double>
     bd0:	cmp	r0, #0
     bd4:	bne	fb0 <compare_data+0xc74>
     bd8:	vldr	d0, [sp, #80]	; 0x50
     bdc:	vldr	d7, [sp, #88]	; 0x58
     be0:	vcmp.f64	d0, d7
     be4:	vmrs	APSR_nzcv, fpscr
     be8:	beq	4d8 <compare_data+0x19c>
     bec:	bl	0 <coda_isNaN>
     bf0:	cmp	r0, #0
     bf4:	beq	c08 <compare_data+0x8cc>
     bf8:	vldr	d0, [sp, #88]	; 0x58
     bfc:	bl	0 <coda_isNaN>
     c00:	cmp	r0, #0
     c04:	bne	4d8 <compare_data+0x19c>
     c08:	movw	r0, #0
     c0c:	movt	r0, #0
     c10:	bl	0 <printf>
     c14:	movw	r1, #0
     c18:	movt	r1, #0
     c1c:	mov	r0, r4
     c20:	bl	0 <coda_cursor_print_path>
     c24:	mov	r0, #10
     c28:	bl	0 <putchar>
     c2c:	movw	r3, #0
     c30:	movt	r3, #0
     c34:	ldr	r3, [r3]
     c38:	cmp	r3, #0
     c3c:	beq	4d8 <compare_data+0x19c>
     c40:	movw	r7, #0
     c44:	movt	r7, #0
     c48:	ldrd	r2, [sp, #80]	; 0x50
     c4c:	movw	r0, #0
     c50:	movt	r0, #0
     c54:	ldr	r1, [r7]
     c58:	bl	0 <printf>
     c5c:	movw	r0, #0
     c60:	movt	r0, #0
     c64:	ldr	r1, [r7, #4]
     c68:	ldrd	r2, [sp, #88]	; 0x58
     c6c:	bl	0 <printf>
     c70:	b	4d8 <compare_data+0x19c>
     c74:	add	r1, sp, #72	; 0x48
     c78:	mov	r0, r4
     c7c:	bl	0 <coda_cursor_read_int64>
     c80:	cmp	r0, #0
     c84:	bne	f80 <compare_data+0xc44>
     c88:	add	r6, sp, #80	; 0x50
     c8c:	mov	r0, r5
     c90:	mov	r1, r6
     c94:	bl	0 <coda_cursor_read_int64>
     c98:	cmp	r0, #0
     c9c:	bne	fb0 <compare_data+0xc74>
     ca0:	ldrd	r0, [sp, #72]	; 0x48
     ca4:	ldrd	r2, [sp, #80]	; 0x50
     ca8:	cmp	r1, r3
     cac:	cmpeq	r0, r2
     cb0:	beq	4d8 <compare_data+0x19c>
     cb4:	movw	r0, #0
     cb8:	movt	r0, #0
     cbc:	bl	0 <printf>
     cc0:	movw	r1, #0
     cc4:	movt	r1, #0
     cc8:	mov	r0, r4
     ccc:	bl	0 <coda_cursor_print_path>
     cd0:	mov	r0, #10
     cd4:	bl	0 <putchar>
     cd8:	movw	r3, #0
     cdc:	movt	r3, #0
     ce0:	ldr	r3, [r3]
     ce4:	cmp	r3, #0
     ce8:	beq	4d8 <compare_data+0x19c>
     cec:	add	r2, sp, #88	; 0x58
     cf0:	movw	r7, #0
     cf4:	movt	r7, #0
     cf8:	ldrd	r0, [sp, #72]	; 0x48
     cfc:	bl	0 <coda_str64>
     d00:	add	r2, sp, #88	; 0x58
     d04:	movw	r0, #0
     d08:	movt	r0, #0
     d0c:	ldr	r1, [r7]
     d10:	bl	0 <printf>
     d14:	add	r2, sp, #88	; 0x58
     d18:	ldrd	r0, [sp, #80]	; 0x50
     d1c:	bl	0 <coda_str64>
     d20:	b	b8c <compare_data+0x850>
     d24:	mov	r0, r5
     d28:	mov	r1, #2
     d2c:	bl	2dc <print_error_with_cursor>
     d30:	mvn	r6, #0
     d34:	b	3f0 <compare_data+0xb4>
     d38:	movw	r3, #0
     d3c:	movt	r3, #0
     d40:	ldr	r4, [r3]
     d44:	mvn	r6, #0
     d48:	bl	0 <coda_get_errno>
     d4c:	ldr	r0, [r0]
     d50:	bl	0 <coda_errno_to_string>
     d54:	mov	r2, r0
     d58:	movw	r1, #0
     d5c:	movt	r1, #0
     d60:	mov	r0, r4
     d64:	bl	0 <fprintf>
     d68:	b	3f0 <compare_data+0xb4>
     d6c:	add	r6, sp, #80	; 0x50
     d70:	mov	r0, r4
     d74:	mov	r1, r6
     d78:	bl	0 <coda_cursor_get_num_elements>
     d7c:	cmp	r0, #0
     d80:	bne	acc <compare_data+0x790>
     d84:	add	r1, sp, #88	; 0x58
     d88:	mov	r0, r5
     d8c:	bl	0 <coda_cursor_get_num_elements>
     d90:	cmp	r0, #0
     d94:	bne	d24 <compare_data+0x9e8>
     d98:	ldr	r3, [sp, #80]	; 0x50
     d9c:	ldr	r2, [sp, #88]	; 0x58
     da0:	cmp	r3, r2
     da4:	bne	1340 <compare_data+0x1004>
     da8:	cmp	r3, #0
     dac:	ble	4d8 <compare_data+0x19c>
     db0:	mov	r0, r4
     db4:	bl	0 <coda_cursor_goto_first_array_element>
     db8:	cmp	r0, #0
     dbc:	bne	acc <compare_data+0x790>
     dc0:	mov	r0, r5
     dc4:	bl	0 <coda_cursor_goto_first_array_element>
     dc8:	subs	r7, r0, #0
     dcc:	bne	17a0 <compare_data+0x1464>
     dd0:	ldr	r3, [sp, #80]	; 0x50
     dd4:	cmp	r3, #0
     dd8:	bgt	dec <compare_data+0xab0>
     ddc:	b	1514 <compare_data+0x11d8>
     de0:	add	r7, r7, #1
     de4:	cmp	r7, r3
     de8:	bge	1514 <compare_data+0x11d8>
     dec:	mov	r1, r5
     df0:	mov	r0, r4
     df4:	bl	33c <compare_data>
     df8:	cmp	r0, #0
     dfc:	bne	f78 <compare_data+0xc3c>
     e00:	ldr	r3, [sp, #80]	; 0x50
     e04:	sub	r2, r3, #1
     e08:	cmp	r2, r7
     e0c:	ble	de0 <compare_data+0xaa4>
     e10:	mov	r0, r4
     e14:	bl	0 <coda_cursor_goto_next_array_element>
     e18:	cmp	r0, #0
     e1c:	bne	acc <compare_data+0x790>
     e20:	mov	r0, r5
     e24:	bl	0 <coda_cursor_goto_next_array_element>
     e28:	cmp	r0, #0
     e2c:	bne	d24 <compare_data+0x9e8>
     e30:	ldr	r3, [sp, #80]	; 0x50
     e34:	b	de0 <compare_data+0xaa4>
     e38:	movw	r0, #0
     e3c:	movt	r0, #0
     e40:	bl	0 <printf>
     e44:	movw	r1, #0
     e48:	movt	r1, #0
     e4c:	mov	r0, r4
     e50:	bl	0 <coda_cursor_print_path>
     e54:	mov	r0, #10
     e58:	bl	0 <putchar>
     e5c:	movw	r3, #0
     e60:	movt	r3, #0
     e64:	ldr	r3, [r3]
     e68:	cmp	r3, #0
     e6c:	beq	4d8 <compare_data+0x19c>
     e70:	add	r2, sp, #88	; 0x58
     e74:	movw	r7, #0
     e78:	movt	r7, #0
     e7c:	ldrd	r0, [sp, #72]	; 0x48
     e80:	bl	0 <coda_str64>
     e84:	add	r2, sp, #88	; 0x58
     e88:	movw	r0, #0
     e8c:	movt	r0, #0
     e90:	ldr	r1, [r7]
     e94:	bl	0 <printf>
     e98:	add	r2, sp, #88	; 0x58
     e9c:	ldrd	r0, [sp, #80]	; 0x50
     ea0:	bl	0 <coda_str64>
     ea4:	add	r2, sp, #88	; 0x58
     ea8:	movw	r0, #0
     eac:	movt	r0, #0
     eb0:	ldr	r1, [r7, #4]
     eb4:	bl	0 <printf>
     eb8:	b	4d8 <compare_data+0x19c>
     ebc:	movw	r0, #0
     ec0:	movt	r0, #0
     ec4:	bl	0 <printf>
     ec8:	movw	r1, #0
     ecc:	movt	r1, #0
     ed0:	mov	r0, r4
     ed4:	bl	0 <coda_cursor_print_path>
     ed8:	mov	r0, #10
     edc:	bl	0 <putchar>
     ee0:	movw	r3, #0
     ee4:	movt	r3, #0
     ee8:	ldr	r3, [r3]
     eec:	cmp	r3, #0
     ef0:	beq	4d4 <compare_data+0x198>
     ef4:	movw	r7, #0
     ef8:	movt	r7, #0
     efc:	ldr	r0, [sp, #64]	; 0x40
     f00:	add	r6, sp, #80	; 0x50
     f04:	ldr	r8, [r7]
     f08:	bl	0 <coda_type_get_native_type_name>
     f0c:	mov	r2, r0
     f10:	movw	r0, #0
     f14:	movt	r0, #0
     f18:	mov	r1, r8
     f1c:	bl	0 <printf>
     f20:	ldr	r7, [r7, #4]
     f24:	ldr	r0, [sp, #68]	; 0x44
     f28:	bl	0 <coda_type_get_native_type_name>
     f2c:	mov	r2, r0
     f30:	movw	r0, #0
     f34:	movt	r0, #0
     f38:	mov	r1, r7
     f3c:	bl	0 <printf>
     f40:	b	4d8 <compare_data+0x19c>
     f44:	mov	r0, r4
     f48:	bl	0 <coda_cursor_use_base_type_of_special_type>
     f4c:	cmp	r0, #0
     f50:	bne	acc <compare_data+0x790>
     f54:	mov	r0, r5
     f58:	bl	0 <coda_cursor_use_base_type_of_special_type>
     f5c:	cmp	r0, #0
     f60:	bne	d24 <compare_data+0x9e8>
     f64:	mov	r1, r5
     f68:	mov	r0, r4
     f6c:	bl	33c <compare_data>
     f70:	cmp	r0, #0
     f74:	beq	4d8 <compare_data+0x19c>
     f78:	mvn	r6, #0
     f7c:	b	3f0 <compare_data+0xb4>
     f80:	mov	r1, #1
     f84:	mov	r0, r4
     f88:	bl	2dc <print_error_with_cursor>
     f8c:	bl	0 <coda_get_errno>
     f90:	ldr	r3, [r0]
     f94:	cmn	r3, #300	; 0x12c
     f98:	beq	4d4 <compare_data+0x198>
     f9c:	bl	0 <coda_get_errno>
     fa0:	ldr	r3, [r0]
     fa4:	cmn	r3, #103	; 0x67
     fa8:	bne	f78 <compare_data+0xc3c>
     fac:	b	4d4 <compare_data+0x198>
     fb0:	mov	r1, #2
     fb4:	mov	r0, r5
     fb8:	bl	2dc <print_error_with_cursor>
     fbc:	bl	0 <coda_get_errno>
     fc0:	ldr	r3, [r0]
     fc4:	cmn	r3, #300	; 0x12c
     fc8:	beq	4d8 <compare_data+0x19c>
     fcc:	bl	0 <coda_get_errno>
     fd0:	ldr	r3, [r0]
     fd4:	cmn	r3, #103	; 0x67
     fd8:	bne	f78 <compare_data+0xc3c>
     fdc:	b	4d8 <compare_data+0x19c>
     fe0:	mov	r0, r4
     fe4:	bl	0 <coda_cursor_goto_first_array_element>
     fe8:	subs	r9, r0, #0
     fec:	bne	1420 <compare_data+0x10e4>
     ff0:	add	r3, sp, #88	; 0x58
     ff4:	str	r7, [sp, #44]	; 0x2c
     ff8:	ldr	fp, [sp, #40]	; 0x28
     ffc:	str	r5, [sp, #48]	; 0x30
    1000:	mov	r5, r3
    1004:	str	r6, [sp, #52]	; 0x34
    1008:	ldr	r8, [sp, #28]
    100c:	sub	r2, fp, #1
    1010:	mov	r7, r2
    1014:	b	1024 <compare_data+0xce8>
    1018:	add	r9, r9, #1
    101c:	cmp	fp, r9
    1020:	beq	1478 <compare_data+0x113c>
    1024:	mov	r3, r5
    1028:	mov	r2, r8
    102c:	mov	r1, r4
    1030:	mov	r0, sl
    1034:	bl	0 <coda_expression_eval_string>
    1038:	cmp	r0, #0
    103c:	mov	r6, r8
    1040:	bne	1490 <compare_data+0x1154>
    1044:	ldr	r1, [r6]
    1048:	add	r8, r8, #4
    104c:	ldr	r0, [sp, #8]
    1050:	bl	0 <coda_hashtable_add_name>
    1054:	cmp	r0, #0
    1058:	bne	14dc <compare_data+0x11a0>
    105c:	cmp	r7, r9
    1060:	ble	1018 <compare_data+0xcdc>
    1064:	mov	r0, r4
    1068:	bl	0 <coda_cursor_goto_next_array_element>
    106c:	cmp	r0, #0
    1070:	beq	1018 <compare_data+0xcdc>
    1074:	mov	r1, #1
    1078:	mov	r0, r4
    107c:	ldr	r7, [sp, #44]	; 0x2c
    1080:	ldr	r5, [sp, #48]	; 0x30
    1084:	ldr	r6, [sp, #52]	; 0x34
    1088:	bl	2dc <print_error_with_cursor>
    108c:	mvn	fp, #0
    1090:	ldr	r0, [sp, #68]	; 0x44
    1094:	bl	0 <coda_expression_delete>
    1098:	ldr	r0, [sp, #8]
    109c:	bl	0 <coda_hashtable_delete>
    10a0:	ldr	r0, [sp, #16]
    10a4:	bl	0 <coda_hashtable_delete>
    10a8:	ldr	r3, [sp, #72]	; 0x48
    10ac:	cmp	r3, #0
    10b0:	ble	10e0 <compare_data+0xda4>
    10b4:	ldr	r2, [sp, #28]
    10b8:	mov	r8, #0
    10bc:	sub	r9, r2, #4
    10c0:	ldr	r0, [r9, #4]!
    10c4:	cmp	r0, #0
    10c8:	beq	10d4 <compare_data+0xd98>
    10cc:	bl	0 <coda_free>
    10d0:	ldr	r3, [sp, #72]	; 0x48
    10d4:	add	r8, r8, #1
    10d8:	cmp	r8, r3
    10dc:	blt	10c0 <compare_data+0xd84>
    10e0:	ldr	r0, [sp, #28]
    10e4:	bl	0 <free>
    10e8:	ldr	r3, [sp, #80]	; 0x50
    10ec:	cmp	r3, #0
    10f0:	ble	111c <compare_data+0xde0>
    10f4:	ldr	r2, [sp, #32]
    10f8:	sub	r8, r2, #4
    10fc:	ldr	r0, [r8, #4]!
    1100:	cmp	r0, #0
    1104:	beq	1110 <compare_data+0xdd4>
    1108:	bl	0 <coda_free>
    110c:	ldr	r3, [sp, #80]	; 0x50
    1110:	add	r7, r7, #1
    1114:	cmp	r7, r3
    1118:	blt	10fc <compare_data+0xdc0>
    111c:	ldr	r0, [sp, #32]
    1120:	bl	0 <free>
    1124:	cmp	fp, #0
    1128:	beq	4d8 <compare_data+0x19c>
    112c:	b	f78 <compare_data+0xc3c>
    1130:	mov	r1, #2
    1134:	mov	r0, r5
    1138:	bl	2dc <print_error_with_cursor>
    113c:	bl	0 <coda_get_errno>
    1140:	ldr	r3, [r0]
    1144:	cmn	r3, #300	; 0x12c
    1148:	beq	a24 <compare_data+0x6e8>
    114c:	bl	0 <coda_get_errno>
    1150:	ldr	r3, [r0]
    1154:	cmn	r3, #103	; 0x67
    1158:	beq	a24 <compare_data+0x6e8>
    115c:	mov	r0, r7
    1160:	mvn	r6, #0
    1164:	bl	0 <free>
    1168:	mov	r0, sl
    116c:	bl	0 <free>
    1170:	b	3f0 <compare_data+0xb4>
    1174:	movw	r0, #0
    1178:	movt	r0, #0
    117c:	bl	0 <printf>
    1180:	mov	r0, r4
    1184:	movw	r1, #0
    1188:	movt	r1, #0
    118c:	bl	0 <coda_cursor_print_path>
    1190:	mov	r0, #10
    1194:	bl	0 <putchar>
    1198:	b	740 <compare_data+0x404>
    119c:	ldr	r3, [sp, #36]	; 0x24
    11a0:	mov	r7, fp
    11a4:	ldr	r5, [sp, #52]	; 0x34
    11a8:	cmp	r3, #0
    11ac:	ble	13ac <compare_data+0x1070>
    11b0:	movw	r3, #0
    11b4:	movt	r3, #0
    11b8:	mov	fp, #0
    11bc:	movw	sl, #0
    11c0:	movt	sl, #0
    11c4:	str	r3, [sp, #44]	; 0x2c
    11c8:	movw	r3, #0
    11cc:	movt	r3, #0
    11d0:	str	r7, [sp, #52]	; 0x34
    11d4:	ldr	r7, [sp, #36]	; 0x24
    11d8:	str	r6, [sp, #36]	; 0x24
    11dc:	mov	r6, fp
    11e0:	mov	fp, r5
    11e4:	str	r3, [sp, #48]	; 0x30
    11e8:	ldr	r5, [sp, #8]
    11ec:	ldr	r3, [sp, #32]
    11f0:	sub	r9, r3, #4
    11f4:	b	1204 <compare_data+0xec8>
    11f8:	add	r6, r6, #1
    11fc:	cmp	r7, r6
    1200:	ble	1270 <compare_data+0xf34>
    1204:	mov	r0, r5
    1208:	ldr	r1, [r9, #4]!
    120c:	bl	0 <coda_hashtable_get_index_from_name>
    1210:	cmp	r0, #0
    1214:	bge	11f8 <compare_data+0xebc>
    1218:	cmp	r8, #0
    121c:	bne	1248 <compare_data+0xf0c>
    1220:	ldr	r8, [sl]
    1224:	cmp	r8, #0
    1228:	beq	11f8 <compare_data+0xebc>
    122c:	ldr	r3, [sp, #44]	; 0x2c
    1230:	mov	r8, #0
    1234:	ldr	r2, [r9]
    1238:	ldr	r0, [sp, #48]	; 0x30
    123c:	ldr	r1, [r3, #4]
    1240:	bl	0 <printf>
    1244:	b	11f8 <compare_data+0xebc>
    1248:	movw	r0, #0
    124c:	movt	r0, #0
    1250:	bl	0 <printf>
    1254:	mov	r0, r4
    1258:	movw	r1, #0
    125c:	movt	r1, #0
    1260:	bl	0 <coda_cursor_print_path>
    1264:	mov	r0, #10
    1268:	bl	0 <putchar>
    126c:	b	1220 <compare_data+0xee4>
    1270:	mov	r5, fp
    1274:	ldr	r6, [sp, #36]	; 0x24
    1278:	ldr	r3, [sp, #40]	; 0x28
    127c:	ldr	r7, [sp, #52]	; 0x34
    1280:	cmp	r3, #0
    1284:	bgt	13ac <compare_data+0x1070>
    1288:	mov	fp, #0
    128c:	b	1090 <compare_data+0xd54>
    1290:	mov	r0, r5
    1294:	bl	0 <coda_cursor_goto_first_array_element>
    1298:	subs	r9, r0, #0
    129c:	bne	1674 <compare_data+0x1338>
    12a0:	add	r3, sp, #88	; 0x58
    12a4:	str	r7, [sp, #44]	; 0x2c
    12a8:	ldr	fp, [sp, #36]	; 0x24
    12ac:	str	r4, [sp, #48]	; 0x30
    12b0:	mov	r4, r3
    12b4:	str	r6, [sp, #52]	; 0x34
    12b8:	ldr	r8, [sp, #32]
    12bc:	sub	r2, fp, #1
    12c0:	mov	r7, r2
    12c4:	b	12d4 <compare_data+0xf98>
    12c8:	add	r9, r9, #1
    12cc:	cmp	fp, r9
    12d0:	beq	1528 <compare_data+0x11ec>
    12d4:	mov	r3, r4
    12d8:	mov	r2, r8
    12dc:	mov	r1, r5
    12e0:	mov	r0, sl
    12e4:	bl	0 <coda_expression_eval_string>
    12e8:	cmp	r0, #0
    12ec:	mov	r6, r8
    12f0:	bne	1540 <compare_data+0x1204>
    12f4:	ldr	r1, [r6]
    12f8:	add	r8, r8, #4
    12fc:	ldr	r0, [sp, #16]
    1300:	bl	0 <coda_hashtable_add_name>
    1304:	cmp	r0, #0
    1308:	bne	1568 <compare_data+0x122c>
    130c:	cmp	r7, r9
    1310:	ble	12c8 <compare_data+0xf8c>
    1314:	mov	r0, r5
    1318:	bl	0 <coda_cursor_goto_next_array_element>
    131c:	cmp	r0, #0
    1320:	beq	12c8 <compare_data+0xf8c>
    1324:	mov	r1, #2
    1328:	mov	r0, r5
    132c:	ldr	r7, [sp, #44]	; 0x2c
    1330:	ldr	r4, [sp, #48]	; 0x30
    1334:	ldr	r6, [sp, #52]	; 0x34
    1338:	bl	2dc <print_error_with_cursor>
    133c:	b	108c <compare_data+0xd50>
    1340:	movw	r0, #0
    1344:	movt	r0, #0
    1348:	bl	0 <printf>
    134c:	movw	r1, #0
    1350:	movt	r1, #0
    1354:	mov	r0, r4
    1358:	bl	0 <coda_cursor_print_path>
    135c:	mov	r0, #10
    1360:	bl	0 <putchar>
    1364:	movw	r3, #0
    1368:	movt	r3, #0
    136c:	ldr	r3, [r3]
    1370:	cmp	r3, #0
    1374:	beq	4d8 <compare_data+0x19c>
    1378:	movw	r7, #0
    137c:	movt	r7, #0
    1380:	ldr	r2, [sp, #80]	; 0x50
    1384:	movw	r0, #0
    1388:	movt	r0, #0
    138c:	ldr	r1, [r7]
    1390:	bl	0 <printf>
    1394:	movw	r0, #0
    1398:	movt	r0, #0
    139c:	ldr	r1, [r7, #4]
    13a0:	ldr	r2, [sp, #88]	; 0x58
    13a4:	bl	0 <printf>
    13a8:	b	4d8 <compare_data+0x19c>
    13ac:	mov	r0, r4
    13b0:	bl	0 <coda_cursor_goto_first_array_element>
    13b4:	subs	fp, r0, #0
    13b8:	bne	1420 <compare_data+0x10e4>
    13bc:	ldr	r3, [sp, #28]
    13c0:	mov	r8, fp
    13c4:	str	r7, [sp, #36]	; 0x24
    13c8:	ldr	r7, [sp, #16]
    13cc:	sub	r9, r3, #4
    13d0:	ldr	r3, [sp, #40]	; 0x28
    13d4:	str	fp, [sp, #40]	; 0x28
    13d8:	sub	sl, r3, #1
    13dc:	mov	fp, r3
    13e0:	b	13f0 <compare_data+0x10b4>
    13e4:	add	r8, r8, #1
    13e8:	cmp	fp, r8
    13ec:	ble	1500 <compare_data+0x11c4>
    13f0:	mov	r0, r7
    13f4:	ldr	r1, [r9, #4]!
    13f8:	bl	0 <coda_hashtable_get_index_from_name>
    13fc:	subs	r1, r0, #0
    1400:	bge	1434 <compare_data+0x10f8>
    1404:	cmp	sl, r8
    1408:	ble	13e4 <compare_data+0x10a8>
    140c:	mov	r0, r4
    1410:	bl	0 <coda_cursor_goto_next_array_element>
    1414:	cmp	r0, #0
    1418:	beq	13e4 <compare_data+0x10a8>
    141c:	ldr	r7, [sp, #36]	; 0x24
    1420:	mov	r1, #1
    1424:	mov	r0, r4
    1428:	bl	2dc <print_error_with_cursor>
    142c:	mvn	fp, #0
    1430:	b	1090 <compare_data+0xd54>
    1434:	mov	r0, r5
    1438:	bl	0 <coda_cursor_goto_array_element_by_index>
    143c:	cmp	r0, #0
    1440:	bne	1670 <compare_data+0x1334>
    1444:	mov	r1, r5
    1448:	mov	r0, r4
    144c:	bl	33c <compare_data>
    1450:	cmp	r0, #0
    1454:	bne	1688 <compare_data+0x134c>
    1458:	mov	r0, r5
    145c:	bl	0 <coda_cursor_goto_parent>
    1460:	b	1404 <compare_data+0x10c8>
    1464:	ldr	r3, [sp, #36]	; 0x24
    1468:	cmp	r3, #0
    146c:	movgt	r8, #1
    1470:	bgt	11b0 <compare_data+0xe74>
    1474:	b	1288 <compare_data+0xf4c>
    1478:	mov	r0, r4
    147c:	ldr	r7, [sp, #44]	; 0x2c
    1480:	ldr	r5, [sp, #48]	; 0x30
    1484:	ldr	r6, [sp, #52]	; 0x34
    1488:	bl	0 <coda_cursor_goto_parent>
    148c:	b	680 <compare_data+0x344>
    1490:	ldr	r7, [sp, #44]	; 0x2c
    1494:	ldr	r5, [sp, #48]	; 0x30
    1498:	ldr	r6, [sp, #52]	; 0x34
    149c:	movw	r3, #0
    14a0:	movt	r3, #0
    14a4:	ldr	r8, [r3]
    14a8:	movw	r3, #0
    14ac:	movt	r3, #0
    14b0:	ldr	r9, [r3]
    14b4:	bl	0 <coda_get_errno>
    14b8:	ldr	r0, [r0]
    14bc:	bl	0 <coda_errno_to_string>
    14c0:	mov	r3, r0
    14c4:	mov	r2, r9
    14c8:	mov	r0, r8
    14cc:	movw	r1, #0
    14d0:	movt	r1, #0
    14d4:	bl	0 <fprintf>
    14d8:	b	108c <compare_data+0xd50>
    14dc:	movw	r1, #0
    14e0:	movt	r1, #0
    14e4:	ldr	r2, [r6]
    14e8:	mvn	r0, #99	; 0x63
    14ec:	ldr	r7, [sp, #44]	; 0x2c
    14f0:	ldr	r5, [sp, #48]	; 0x30
    14f4:	ldr	r6, [sp, #52]	; 0x34
    14f8:	bl	0 <coda_set_error>
    14fc:	b	149c <compare_data+0x1160>
    1500:	mov	r0, r4
    1504:	ldr	r7, [sp, #36]	; 0x24
    1508:	ldr	fp, [sp, #40]	; 0x28
    150c:	bl	0 <coda_cursor_goto_parent>
    1510:	b	1090 <compare_data+0xd54>
    1514:	mov	r0, r4
    1518:	bl	0 <coda_cursor_goto_parent>
    151c:	mov	r0, r5
    1520:	bl	0 <coda_cursor_goto_parent>
    1524:	b	4d8 <compare_data+0x19c>
    1528:	mov	r0, r5
    152c:	ldr	r7, [sp, #44]	; 0x2c
    1530:	ldr	r4, [sp, #48]	; 0x30
    1534:	ldr	r6, [sp, #52]	; 0x34
    1538:	bl	0 <coda_cursor_goto_parent>
    153c:	b	68c <compare_data+0x350>
    1540:	ldr	r7, [sp, #44]	; 0x2c
    1544:	ldr	r4, [sp, #48]	; 0x30
    1548:	ldr	r6, [sp, #52]	; 0x34
    154c:	movw	r3, #0
    1550:	movt	r3, #0
    1554:	ldr	r8, [r3]
    1558:	movw	r3, #0
    155c:	movt	r3, #0
    1560:	ldr	r9, [r3, #4]
    1564:	b	14b4 <compare_data+0x1178>
    1568:	movw	r1, #0
    156c:	movt	r1, #0
    1570:	ldr	r2, [r6]
    1574:	mvn	r0, #99	; 0x63
    1578:	ldr	r7, [sp, #44]	; 0x2c
    157c:	ldr	r4, [sp, #48]	; 0x30
    1580:	ldr	r6, [sp, #52]	; 0x34
    1584:	bl	0 <coda_set_error>
    1588:	b	154c <compare_data+0x1210>
    158c:	movw	r8, #0
    1590:	movt	r8, #0
    1594:	ldr	r2, [sp, #40]	; 0x28
    1598:	movw	r0, #0
    159c:	movt	r0, #0
    15a0:	ldr	r1, [r8]
    15a4:	bl	0 <printf>
    15a8:	movw	r0, #0
    15ac:	movt	r0, #0
    15b0:	ldr	r1, [r8, #4]
    15b4:	ldr	r2, [sp, #36]	; 0x24
    15b8:	bl	0 <printf>
    15bc:	b	6d0 <compare_data+0x394>
    15c0:	movw	r0, #0
    15c4:	movt	r0, #0
    15c8:	bl	0 <printf>
    15cc:	movw	r1, #0
    15d0:	movt	r1, #0
    15d4:	mov	r0, r4
    15d8:	bl	0 <coda_cursor_print_path>
    15dc:	mov	r0, #10
    15e0:	bl	0 <putchar>
    15e4:	ldrd	r8, [sp, #8]
    15e8:	movw	r3, #0
    15ec:	movt	r3, #0
    15f0:	mov	r0, #256	; 0x100
    15f4:	mov	r1, #0
    15f8:	ldr	r2, [r3]
    15fc:	cmp	r0, r8
    1600:	sbcs	r3, r1, r9
    1604:	movge	r3, #1
    1608:	movlt	r3, #0
    160c:	cmp	r2, #0
    1610:	moveq	r3, #0
    1614:	cmp	r3, #0
    1618:	beq	a24 <compare_data+0x6e8>
    161c:	movw	r8, #0
    1620:	movt	r8, #0
    1624:	movw	r0, #0
    1628:	movt	r0, #0
    162c:	ldr	r1, [r8]
    1630:	bl	0 <printf>
    1634:	mov	r0, r7
    1638:	ldr	r1, [sp, #8]
    163c:	bl	1a8 <print_escaped>
    1640:	mov	r0, #10
    1644:	bl	0 <putchar>
    1648:	movw	r0, #0
    164c:	movt	r0, #0
    1650:	ldr	r1, [r8, #4]
    1654:	bl	0 <printf>
    1658:	mov	r0, sl
    165c:	ldr	r1, [sp, #16]
    1660:	bl	1a8 <print_escaped>
    1664:	mov	r0, #10
    1668:	bl	0 <putchar>
    166c:	b	a24 <compare_data+0x6e8>
    1670:	ldr	r7, [sp, #36]	; 0x24
    1674:	mov	r1, #2
    1678:	mov	r0, r5
    167c:	bl	2dc <print_error_with_cursor>
    1680:	mvn	fp, #0
    1684:	b	1090 <compare_data+0xd54>
    1688:	ldr	r7, [sp, #36]	; 0x24
    168c:	b	108c <compare_data+0xd50>
    1690:	movw	r2, #978	; 0x3d2
    1694:	movw	r3, #0
    1698:	movt	r3, #0
    169c:	movw	r1, #0
    16a0:	movt	r1, #0
    16a4:	str	r2, [sp]
    16a8:	mvn	r0, #0
    16ac:	ldr	r2, [sp, #80]	; 0x50
    16b0:	mov	r6, r0
    16b4:	bl	0 <coda_set_error>
    16b8:	mov	r0, r4
    16bc:	mov	r1, #1
    16c0:	bl	2dc <print_error_with_cursor>
    16c4:	b	3f0 <compare_data+0xb4>
    16c8:	movw	r2, #986	; 0x3da
    16cc:	movw	r3, #0
    16d0:	movt	r3, #0
    16d4:	movw	r1, #0
    16d8:	movt	r1, #0
    16dc:	str	r2, [sp]
    16e0:	mvn	r0, #0
    16e4:	ldr	r2, [sp, #88]	; 0x58
    16e8:	mov	r6, r0
    16ec:	bl	0 <coda_set_error>
    16f0:	mov	r0, r5
    16f4:	mov	r1, #2
    16f8:	bl	2dc <print_error_with_cursor>
    16fc:	mov	r0, r7
    1700:	bl	0 <free>
    1704:	b	3f0 <compare_data+0xb4>
    1708:	mov	r3, #500	; 0x1f4
    170c:	mvn	r0, #0
    1710:	movw	r2, #0
    1714:	movt	r2, #0
    1718:	movw	r1, #0
    171c:	movt	r1, #0
    1720:	bl	0 <coda_set_error>
    1724:	mov	r1, #2
    1728:	mov	r0, r5
    172c:	bl	2dc <print_error_with_cursor>
    1730:	ldr	r0, [sp, #68]	; 0x44
    1734:	mvn	r6, #0
    1738:	bl	0 <coda_expression_delete>
    173c:	ldr	r0, [sp, #8]
    1740:	bl	0 <coda_hashtable_delete>
    1744:	ldr	r0, [sp, #28]
    1748:	bl	0 <free>
    174c:	ldr	r0, [sp, #32]
    1750:	bl	0 <free>
    1754:	b	3f0 <compare_data+0xb4>
    1758:	movw	r3, #489	; 0x1e9
    175c:	mvn	r0, #0
    1760:	movw	r2, #0
    1764:	movt	r2, #0
    1768:	movw	r1, #0
    176c:	movt	r1, #0
    1770:	bl	0 <coda_set_error>
    1774:	mov	r1, #1
    1778:	mov	r0, r4
    177c:	bl	2dc <print_error_with_cursor>
    1780:	ldr	r0, [sp, #68]	; 0x44
    1784:	mvn	r6, #0
    1788:	bl	0 <coda_expression_delete>
    178c:	ldr	r0, [sp, #28]
    1790:	bl	0 <free>
    1794:	ldr	r0, [sp, #32]
    1798:	bl	0 <free>
    179c:	b	3f0 <compare_data+0xb4>
    17a0:	mov	r0, r5
    17a4:	mov	r1, #1
    17a8:	bl	2dc <print_error_with_cursor>
    17ac:	mvn	r6, #0
    17b0:	b	3f0 <compare_data+0xb4>
    17b4:	movw	r0, #1080	; 0x438
    17b8:	movw	r3, #0
    17bc:	movt	r3, #0
    17c0:	movw	r1, #0
    17c4:	movt	r1, #0
    17c8:	str	r0, [sp]
    17cc:	mvn	r0, #0
    17d0:	ldr	r2, [sp, #16]
    17d4:	b	16e8 <compare_data+0x13ac>
    17d8:	mov	r0, #1072	; 0x430
    17dc:	movw	r3, #0
    17e0:	movt	r3, #0
    17e4:	movw	r1, #0
    17e8:	movt	r1, #0
    17ec:	str	r0, [sp]
    17f0:	mvn	r0, #0
    17f4:	ldr	r2, [sp, #8]
    17f8:	b	16b0 <compare_data+0x1374>
    17fc:	ldr	r2, [sp, #80]	; 0x50
    1800:	movw	r0, #475	; 0x1db
    1804:	movw	r3, #0
    1808:	movt	r3, #0
    180c:	movw	r1, #0
    1810:	movt	r1, #0
    1814:	str	r0, [sp]
    1818:	mvn	r0, #0
    181c:	mov	r6, r0
    1820:	lsl	r2, r2, #2
    1824:	bl	0 <coda_set_error>
    1828:	mov	r0, r5
    182c:	mov	r1, #2
    1830:	bl	2dc <print_error_with_cursor>
    1834:	ldr	r0, [sp, #68]	; 0x44
    1838:	bl	0 <coda_expression_delete>
    183c:	ldr	r0, [sp, #28]
    1840:	bl	0 <free>
    1844:	b	3f0 <compare_data+0xb4>
    1848:	movw	r0, #461	; 0x1cd
    184c:	lsl	r2, r2, #2
    1850:	movw	r3, #0
    1854:	movt	r3, #0
    1858:	movw	r1, #0
    185c:	movt	r1, #0
    1860:	str	r0, [sp]
    1864:	mvn	r0, #0
    1868:	mov	r6, r0
    186c:	bl	0 <coda_set_error>
    1870:	mov	r0, r4
    1874:	mov	r1, #1
    1878:	bl	2dc <print_error_with_cursor>
    187c:	ldr	r0, [sp, #68]	; 0x44
    1880:	bl	0 <coda_expression_delete>
    1884:	b	3f0 <compare_data+0xb4>
    1888:	movw	r3, #0
    188c:	movt	r3, #0
    1890:	movw	r1, #0
    1894:	movt	r1, #0
    1898:	movw	r0, #0
    189c:	movt	r0, #0
    18a0:	movw	r2, #950	; 0x3b6
    18a4:	bl	0 <__assert_fail>

000018a8 <compare_files>:
    18a8:	strd	r4, [sp, #-20]!	; 0xffffffec
    18ac:	mov	r4, r0
    18b0:	strd	r6, [sp, #8]
    18b4:	mov	r7, r1
    18b8:	mov	r6, r2
    18bc:	str	lr, [sp, #16]
    18c0:	sub	sp, sp, #1040	; 0x410
    18c4:	sub	sp, sp, #12
    18c8:	mov	r1, sp
    18cc:	bl	0 <coda_open>
    18d0:	cmp	r0, #0
    18d4:	bne	1a40 <compare_files+0x198>
    18d8:	movw	r4, #0
    18dc:	movt	r4, #0
    18e0:	ldr	r3, [r4]
    18e4:	cmp	r3, #0
    18e8:	bne	1994 <compare_files+0xec>
    18ec:	mov	r0, r7
    18f0:	add	r1, sp, #4
    18f4:	bl	0 <coda_open>
    18f8:	cmp	r0, #0
    18fc:	bne	1a7c <compare_files+0x1d4>
    1900:	add	r0, sp, #8
    1904:	ldr	r1, [sp]
    1908:	bl	0 <coda_cursor_set_product>
    190c:	cmp	r0, #0
    1910:	bne	1b04 <compare_files+0x25c>
    1914:	add	r0, sp, #528	; 0x210
    1918:	ldr	r1, [sp, #4]
    191c:	bl	0 <coda_cursor_set_product>
    1920:	cmp	r0, #0
    1924:	bne	1b58 <compare_files+0x2b0>
    1928:	cmp	r6, #0
    192c:	beq	1958 <compare_files+0xb0>
    1930:	mov	r1, r6
    1934:	add	r0, sp, #8
    1938:	bl	0 <coda_cursor_goto>
    193c:	cmp	r0, #0
    1940:	bne	1b04 <compare_files+0x25c>
    1944:	mov	r1, r6
    1948:	add	r0, sp, #528	; 0x210
    194c:	bl	0 <coda_cursor_goto>
    1950:	cmp	r0, #0
    1954:	bne	1b58 <compare_files+0x2b0>
    1958:	add	r1, sp, #528	; 0x210
    195c:	add	r0, sp, #8
    1960:	bl	33c <compare_data>
    1964:	mov	r4, r0
    1968:	ldr	r0, [sp]
    196c:	bl	0 <coda_close>
    1970:	ldr	r0, [sp, #4]
    1974:	bl	0 <coda_close>
    1978:	mov	r0, r4
    197c:	add	sp, sp, #1040	; 0x410
    1980:	add	sp, sp, #12
    1984:	ldrd	r4, [sp]
    1988:	ldrd	r6, [sp, #8]
    198c:	add	sp, sp, #16
    1990:	pop	{pc}		; (ldr pc, [sp], #4)
    1994:	add	r1, sp, #528	; 0x210
    1998:	ldr	r0, [sp]
    199c:	bl	0 <coda_get_product_root_type>
    19a0:	subs	r5, r0, #0
    19a4:	bne	19fc <compare_files+0x154>
    19a8:	ldr	r0, [sp, #528]	; 0x210
    19ac:	bl	0 <coda_tree_node_new>
    19b0:	cmp	r0, #0
    19b4:	str	r0, [r4, #12]
    19b8:	beq	19fc <compare_files+0x154>
    19bc:	ldr	r3, [r4]
    19c0:	cmp	r3, #0
    19c4:	bgt	19d8 <compare_files+0x130>
    19c8:	b	18ec <compare_files+0x44>
    19cc:	ldr	r3, [r4]
    19d0:	cmp	r5, r3
    19d4:	bge	18ec <compare_files+0x44>
    19d8:	ldmib	r4, {r1, r2}
    19dc:	mov	r3, #0
    19e0:	ldr	r0, [r4, #12]
    19e4:	ldr	r1, [r1, r5, lsl #2]
    19e8:	ldr	r2, [r2, r5, lsl #2]
    19ec:	add	r5, r5, #1
    19f0:	bl	0 <coda_tree_node_add_item_for_path>
    19f4:	cmp	r0, #0
    19f8:	beq	19cc <compare_files+0x124>
    19fc:	movw	r3, #0
    1a00:	movt	r3, #0
    1a04:	ldr	r5, [r3]
    1a08:	movw	r3, #0
    1a0c:	movt	r3, #0
    1a10:	mvn	r4, #0
    1a14:	ldr	r6, [r3]
    1a18:	bl	0 <coda_get_errno>
    1a1c:	ldr	r0, [r0]
    1a20:	bl	0 <coda_errno_to_string>
    1a24:	mov	r3, r0
    1a28:	movw	r1, #0
    1a2c:	movt	r1, #0
    1a30:	mov	r2, r6
    1a34:	mov	r0, r5
    1a38:	bl	0 <fprintf>
    1a3c:	b	1978 <compare_files+0xd0>
    1a40:	bl	0 <coda_get_errno>
    1a44:	ldr	r3, [r0]
    1a48:	cmn	r3, #21
    1a4c:	bne	19fc <compare_files+0x154>
    1a50:	mov	r0, #0
    1a54:	bl	0 <coda_set_option_use_mmap>
    1a58:	mov	r1, sp
    1a5c:	mov	r0, r4
    1a60:	bl	0 <coda_open>
    1a64:	mov	r4, r0
    1a68:	mov	r0, #1
    1a6c:	bl	0 <coda_set_option_use_mmap>
    1a70:	cmp	r4, #0
    1a74:	beq	18d8 <compare_files+0x30>
    1a78:	b	19fc <compare_files+0x154>
    1a7c:	bl	0 <coda_get_errno>
    1a80:	ldr	r3, [r0]
    1a84:	cmn	r3, #21
    1a88:	beq	1ad8 <compare_files+0x230>
    1a8c:	movw	r3, #0
    1a90:	movt	r3, #0
    1a94:	ldr	r5, [r3]
    1a98:	movw	r3, #0
    1a9c:	movt	r3, #0
    1aa0:	mvn	r4, #0
    1aa4:	ldr	r6, [r3, #4]
    1aa8:	bl	0 <coda_get_errno>
    1aac:	ldr	r0, [r0]
    1ab0:	bl	0 <coda_errno_to_string>
    1ab4:	mov	r3, r0
    1ab8:	movw	r1, #0
    1abc:	movt	r1, #0
    1ac0:	mov	r2, r6
    1ac4:	mov	r0, r5
    1ac8:	bl	0 <fprintf>
    1acc:	ldr	r0, [sp]
    1ad0:	bl	0 <coda_close>
    1ad4:	b	1978 <compare_files+0xd0>
    1ad8:	mov	r0, #0
    1adc:	bl	0 <coda_set_option_use_mmap>
    1ae0:	add	r1, sp, #4
    1ae4:	mov	r0, r7
    1ae8:	bl	0 <coda_open>
    1aec:	mov	r4, r0
    1af0:	mov	r0, #1
    1af4:	bl	0 <coda_set_option_use_mmap>
    1af8:	cmp	r4, #0
    1afc:	beq	1900 <compare_files+0x58>
    1b00:	b	1a8c <compare_files+0x1e4>
    1b04:	movw	r3, #0
    1b08:	movt	r3, #0
    1b0c:	ldr	r5, [r3]
    1b10:	movw	r3, #0
    1b14:	movt	r3, #0
    1b18:	mvn	r4, #0
    1b1c:	ldr	r6, [r3]
    1b20:	bl	0 <coda_get_errno>
    1b24:	ldr	r0, [r0]
    1b28:	bl	0 <coda_errno_to_string>
    1b2c:	mov	r3, r0
    1b30:	mov	r2, r6
    1b34:	mov	r0, r5
    1b38:	movw	r1, #0
    1b3c:	movt	r1, #0
    1b40:	bl	0 <fprintf>
    1b44:	ldr	r0, [sp]
    1b48:	bl	0 <coda_close>
    1b4c:	ldr	r0, [sp, #4]
    1b50:	bl	0 <coda_close>
    1b54:	b	1978 <compare_files+0xd0>
    1b58:	movw	r3, #0
    1b5c:	movt	r3, #0
    1b60:	ldr	r5, [r3]
    1b64:	movw	r3, #0
    1b68:	movt	r3, #0
    1b6c:	mvn	r4, #0
    1b70:	ldr	r6, [r3, #4]
    1b74:	b	1b20 <compare_files+0x278>

00001b78 <compare_records>:
    1b78:	strd	r4, [sp, #-36]!	; 0xffffffdc
    1b7c:	strd	r6, [sp, #8]
    1b80:	mov	r7, r1
    1b84:	mov	r6, r0
    1b88:	strd	r8, [sp, #16]
    1b8c:	strd	sl, [sp, #24]
    1b90:	str	lr, [sp, #32]
    1b94:	sub	sp, sp, #564	; 0x234
    1b98:	add	r1, sp, #4
    1b9c:	bl	0 <coda_cursor_get_type>
    1ba0:	cmp	r0, #0
    1ba4:	bne	1dfc <compare_records+0x284>
    1ba8:	add	r1, sp, #8
    1bac:	mov	r0, r7
    1bb0:	bl	0 <coda_cursor_get_type>
    1bb4:	cmp	r0, #0
    1bb8:	bne	1e20 <compare_records+0x2a8>
    1bbc:	add	r1, sp, #12
    1bc0:	mov	r0, r6
    1bc4:	bl	0 <coda_cursor_get_num_elements>
    1bc8:	cmp	r0, #0
    1bcc:	bne	1dfc <compare_records+0x284>
    1bd0:	add	r1, sp, #16
    1bd4:	mov	r0, r7
    1bd8:	bl	0 <coda_cursor_get_num_elements>
    1bdc:	subs	r8, r0, #0
    1be0:	bne	1e20 <compare_records+0x2a8>
    1be4:	ldr	r3, [sp, #12]
    1be8:	cmp	r3, #0
    1bec:	ble	1cbc <compare_records+0x144>
    1bf0:	movw	r9, #0
    1bf4:	movt	r9, #0
    1bf8:	str	r8, [sp, #20]
    1bfc:	movw	fp, #0
    1c00:	movt	fp, #0
    1c04:	movw	sl, #0
    1c08:	movt	sl, #0
    1c0c:	mov	r1, r8
    1c10:	mov	r4, #1
    1c14:	add	r5, sp, #40	; 0x28
    1c18:	b	1c40 <compare_records+0xc8>
    1c1c:	ldr	r4, [r9]
    1c20:	cmp	r4, #0
    1c24:	bne	1ca4 <compare_records+0x12c>
    1c28:	ldr	r3, [sp, #12]
    1c2c:	ldr	r1, [sp, #20]
    1c30:	add	r1, r1, #1
    1c34:	cmp	r1, r3
    1c38:	str	r1, [sp, #20]
    1c3c:	bge	1e10 <compare_records+0x298>
    1c40:	mov	r2, r5
    1c44:	ldr	r0, [sp, #4]
    1c48:	bl	0 <coda_type_get_record_field_name>
    1c4c:	cmp	r0, #0
    1c50:	add	r2, sp, #24
    1c54:	bne	1dfc <compare_records+0x284>
    1c58:	ldr	r0, [sp, #8]
    1c5c:	ldr	r1, [sp, #40]	; 0x28
    1c60:	bl	0 <coda_type_get_record_field_index_from_name>
    1c64:	cmp	r0, #0
    1c68:	beq	1c28 <compare_records+0xb0>
    1c6c:	cmp	r4, #0
    1c70:	beq	1c1c <compare_records+0xa4>
    1c74:	movw	r0, #0
    1c78:	movt	r0, #0
    1c7c:	bl	0 <printf>
    1c80:	movw	r1, #0
    1c84:	movt	r1, #0
    1c88:	mov	r0, r6
    1c8c:	bl	0 <coda_cursor_print_path>
    1c90:	mov	r0, #10
    1c94:	bl	0 <putchar>
    1c98:	ldr	r4, [r9]
    1c9c:	cmp	r4, #0
    1ca0:	beq	1c28 <compare_records+0xb0>
    1ca4:	mov	r0, sl
    1ca8:	ldr	r1, [fp]
    1cac:	mov	r4, #0
    1cb0:	ldr	r2, [sp, #40]	; 0x28
    1cb4:	bl	0 <printf>
    1cb8:	b	1c28 <compare_records+0xb0>
    1cbc:	ldr	r3, [sp, #16]
    1cc0:	cmp	r3, #0
    1cc4:	movgt	r4, #1
    1cc8:	addgt	r5, sp, #40	; 0x28
    1ccc:	ble	1ddc <compare_records+0x264>
    1cd0:	mov	r3, #0
    1cd4:	movw	r9, #0
    1cd8:	movt	r9, #0
    1cdc:	movw	fp, #0
    1ce0:	movt	fp, #0
    1ce4:	movw	sl, #0
    1ce8:	movt	sl, #0
    1cec:	mov	r1, r3
    1cf0:	str	r3, [sp, #24]
    1cf4:	b	1d1c <compare_records+0x1a4>
    1cf8:	ldr	r4, [r9]
    1cfc:	cmp	r4, #0
    1d00:	bne	1d80 <compare_records+0x208>
    1d04:	ldr	r3, [sp, #16]
    1d08:	ldr	r1, [sp, #24]
    1d0c:	add	r1, r1, #1
    1d10:	cmp	r1, r3
    1d14:	str	r1, [sp, #24]
    1d18:	bge	1d98 <compare_records+0x220>
    1d1c:	mov	r2, r5
    1d20:	ldr	r0, [sp, #8]
    1d24:	bl	0 <coda_type_get_record_field_name>
    1d28:	cmp	r0, #0
    1d2c:	add	r2, sp, #20
    1d30:	bne	1e20 <compare_records+0x2a8>
    1d34:	ldr	r0, [sp, #4]
    1d38:	ldr	r1, [sp, #40]	; 0x28
    1d3c:	bl	0 <coda_type_get_record_field_index_from_name>
    1d40:	cmp	r0, #0
    1d44:	beq	1d04 <compare_records+0x18c>
    1d48:	cmp	r4, #0
    1d4c:	beq	1cf8 <compare_records+0x180>
    1d50:	movw	r0, #0
    1d54:	movt	r0, #0
    1d58:	bl	0 <printf>
    1d5c:	movw	r1, #0
    1d60:	movt	r1, #0
    1d64:	mov	r0, r6
    1d68:	bl	0 <coda_cursor_print_path>
    1d6c:	mov	r0, #10
    1d70:	bl	0 <putchar>
    1d74:	ldr	r4, [r9]
    1d78:	cmp	r4, #0
    1d7c:	beq	1d04 <compare_records+0x18c>
    1d80:	mov	r0, sl
    1d84:	ldr	r1, [fp, #4]
    1d88:	mov	r4, #0
    1d8c:	ldr	r2, [sp, #40]	; 0x28
    1d90:	bl	0 <printf>
    1d94:	b	1d04 <compare_records+0x18c>
    1d98:	ldr	r3, [sp, #12]
    1d9c:	cmp	r3, #0
    1da0:	ble	1ddc <compare_records+0x264>
    1da4:	mov	r2, #520	; 0x208
    1da8:	mov	r1, r6
    1dac:	mov	r0, r5
    1db0:	bl	0 <memcpy>
    1db4:	mov	r0, r6
    1db8:	bl	0 <coda_cursor_goto_first_record_field>
    1dbc:	subs	r8, r0, #0
    1dc0:	bne	1fe8 <compare_records+0x470>
    1dc4:	ldr	r3, [sp, #12]
    1dc8:	str	r8, [sp, #20]
    1dcc:	cmp	r3, #0
    1dd0:	bgt	1e34 <compare_records+0x2bc>
    1dd4:	mov	r0, r6
    1dd8:	bl	0 <coda_cursor_goto_parent>
    1ddc:	mov	r0, r8
    1de0:	add	sp, sp, #564	; 0x234
    1de4:	ldrd	r4, [sp]
    1de8:	ldrd	r6, [sp, #8]
    1dec:	ldrd	r8, [sp, #16]
    1df0:	ldrd	sl, [sp, #24]
    1df4:	add	sp, sp, #32
    1df8:	pop	{pc}		; (ldr pc, [sp], #4)
    1dfc:	mov	r0, r6
    1e00:	mov	r1, #1
    1e04:	bl	2dc <print_error_with_cursor>
    1e08:	mvn	r8, #0
    1e0c:	b	1ddc <compare_records+0x264>
    1e10:	ldr	r2, [sp, #16]
    1e14:	cmp	r2, #0
    1e18:	bgt	1cd0 <compare_records+0x158>
    1e1c:	b	1d9c <compare_records+0x224>
    1e20:	mov	r0, r7
    1e24:	mov	r1, #2
    1e28:	bl	2dc <print_error_with_cursor>
    1e2c:	mvn	r8, #0
    1e30:	b	1ddc <compare_records+0x264>
    1e34:	movw	sl, #0
    1e38:	movt	sl, #0
    1e3c:	movw	r9, #0
    1e40:	movt	r9, #0
    1e44:	movw	r4, #0
    1e48:	movt	r4, #0
    1e4c:	mov	r1, r8
    1e50:	b	1e78 <compare_records+0x300>
    1e54:	ldr	r3, [sp, #12]
    1e58:	ldr	r1, [sp, #20]
    1e5c:	sub	r2, r3, #1
    1e60:	cmp	r2, r1
    1e64:	bgt	1f1c <compare_records+0x3a4>
    1e68:	add	r1, r1, #1
    1e6c:	cmp	r1, r3
    1e70:	str	r1, [sp, #20]
    1e74:	bge	1dd4 <compare_records+0x25c>
    1e78:	add	r2, sp, #32
    1e7c:	mov	r0, r5
    1e80:	bl	0 <coda_cursor_get_record_field_available_status>
    1e84:	cmp	r0, #0
    1e88:	bne	1ffc <compare_records+0x484>
    1e8c:	add	r2, sp, #28
    1e90:	ldr	r0, [sp, #4]
    1e94:	ldr	r1, [sp, #20]
    1e98:	bl	0 <coda_type_get_record_field_name>
    1e9c:	cmp	r0, #0
    1ea0:	bne	1fe8 <compare_records+0x470>
    1ea4:	add	r2, sp, #24
    1ea8:	ldr	r0, [sp, #8]
    1eac:	ldr	r1, [sp, #28]
    1eb0:	bl	0 <coda_type_get_record_field_index_from_name>
    1eb4:	cmp	r0, #0
    1eb8:	bne	1e54 <compare_records+0x2dc>
    1ebc:	add	r2, sp, #36	; 0x24
    1ec0:	mov	r0, r7
    1ec4:	ldr	r1, [sp, #24]
    1ec8:	bl	0 <coda_cursor_get_record_field_available_status>
    1ecc:	cmp	r0, #0
    1ed0:	bne	200c <compare_records+0x494>
    1ed4:	ldrd	r2, [sp, #32]
    1ed8:	cmp	r2, #0
    1edc:	beq	1f38 <compare_records+0x3c0>
    1ee0:	cmp	r3, #0
    1ee4:	beq	1f94 <compare_records+0x41c>
    1ee8:	mov	r0, r7
    1eec:	ldr	r1, [sp, #24]
    1ef0:	bl	0 <coda_cursor_goto_record_field_by_index>
    1ef4:	cmp	r0, #0
    1ef8:	bne	200c <compare_records+0x494>
    1efc:	mov	r1, r7
    1f00:	mov	r0, r6
    1f04:	bl	33c <compare_data>
    1f08:	cmp	r0, #0
    1f0c:	bne	1ff4 <compare_records+0x47c>
    1f10:	mov	r0, r7
    1f14:	bl	0 <coda_cursor_goto_parent>
    1f18:	b	1e54 <compare_records+0x2dc>
    1f1c:	mov	r0, r6
    1f20:	bl	0 <coda_cursor_goto_next_record_field>
    1f24:	cmp	r0, #0
    1f28:	bne	1fe8 <compare_records+0x470>
    1f2c:	ldr	r3, [sp, #12]
    1f30:	ldr	r1, [sp, #20]
    1f34:	b	1e68 <compare_records+0x2f0>
    1f38:	cmp	r3, #0
    1f3c:	beq	1e54 <compare_records+0x2dc>
    1f40:	mov	r0, sl
    1f44:	bl	0 <printf>
    1f48:	mov	r1, r9
    1f4c:	mov	r0, r6
    1f50:	bl	0 <coda_cursor_print_path>
    1f54:	mov	r0, #10
    1f58:	bl	0 <putchar>
    1f5c:	ldr	r3, [r4]
    1f60:	cmp	r3, #0
    1f64:	beq	1e54 <compare_records+0x2dc>
    1f68:	movw	fp, #0
    1f6c:	movt	fp, #0
    1f70:	movw	r0, #0
    1f74:	movt	r0, #0
    1f78:	ldr	r1, [fp]
    1f7c:	bl	0 <printf>
    1f80:	movw	r0, #0
    1f84:	movt	r0, #0
    1f88:	ldr	r1, [fp, #4]
    1f8c:	bl	0 <printf>
    1f90:	b	1e54 <compare_records+0x2dc>
    1f94:	mov	r0, sl
    1f98:	bl	0 <printf>
    1f9c:	mov	r1, r9
    1fa0:	mov	r0, r6
    1fa4:	bl	0 <coda_cursor_print_path>
    1fa8:	mov	r0, #10
    1fac:	bl	0 <putchar>
    1fb0:	ldr	r3, [r4]
    1fb4:	cmp	r3, #0
    1fb8:	beq	1e54 <compare_records+0x2dc>
    1fbc:	movw	fp, #0
    1fc0:	movt	fp, #0
    1fc4:	movw	r0, #0
    1fc8:	movt	r0, #0
    1fcc:	ldr	r1, [fp]
    1fd0:	bl	0 <printf>
    1fd4:	movw	r0, #0
    1fd8:	movt	r0, #0
    1fdc:	ldr	r1, [fp, #4]
    1fe0:	bl	0 <printf>
    1fe4:	b	1e54 <compare_records+0x2dc>
    1fe8:	mov	r0, r6
    1fec:	mov	r1, #1
    1ff0:	bl	2dc <print_error_with_cursor>
    1ff4:	mvn	r8, #0
    1ff8:	b	1ddc <compare_records+0x264>
    1ffc:	mov	r0, r5
    2000:	mov	r1, #1
    2004:	bl	2dc <print_error_with_cursor>
    2008:	b	1ff4 <compare_records+0x47c>
    200c:	mov	r0, r7
    2010:	mov	r1, #2
    2014:	bl	2dc <print_error_with_cursor>
    2018:	b	1ff4 <compare_records+0x47c>

Disassembly of section .text.startup:

00000000 <main>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	movw	r5, #0
   8:	movt	r5, #0
   c:	cmp	r0, #1
  10:	strd	r6, [sp, #8]
  14:	strd	r8, [sp, #16]
  18:	mov	r8, #0
  1c:	strd	sl, [sp, #24]
  20:	str	r8, [r5]
  24:	str	lr, [sp, #32]
  28:	sub	sp, sp, #36	; 0x24
  2c:	beq	54 <main+0x54>
  30:	mov	r7, r1
  34:	mov	r6, r0
  38:	ldr	r4, [r7, #4]
  3c:	movw	r1, #0
  40:	movt	r1, #0
  44:	mov	r0, r4
  48:	bl	0 <strcmp>
  4c:	cmp	r0, r8
  50:	bne	60 <main+0x60>
  54:	bl	0 <main>
  58:	mov	r0, #0
  5c:	bl	0 <exit>
  60:	movw	r1, #0
  64:	movt	r1, #0
  68:	mov	r0, r4
  6c:	bl	0 <strcmp>
  70:	cmp	r0, r8
  74:	beq	54 <main+0x54>
  78:	movw	r1, #0
  7c:	movt	r1, #0
  80:	mov	r0, r4
  84:	bl	0 <strcmp>
  88:	cmp	r0, #0
  8c:	beq	204 <main+0x204>
  90:	movw	r1, #0
  94:	movt	r1, #0
  98:	mov	r0, r4
  9c:	bl	0 <strcmp>
  a0:	cmp	r0, #0
  a4:	beq	204 <main+0x204>
  a8:	movw	sl, #0
  ac:	movt	sl, #0
  b0:	cmp	r6, #2
  b4:	str	r8, [sl]
  b8:	str	r8, [sl, #4]
  bc:	str	r8, [sl, #8]
  c0:	str	r8, [sl, #12]
  c4:	ble	234 <main+0x234>
  c8:	mov	r0, r4
  cc:	movw	r1, #0
  d0:	movt	r1, #0
  d4:	bl	0 <strcmp>
  d8:	subs	r4, r0, #0
  dc:	beq	408 <main+0x408>
  e0:	mov	r1, r8
  e4:	movw	r2, #0
  e8:	movt	r2, #0
  ec:	ldr	r0, [r7]
  f0:	bl	0 <coda_set_definition_path_conditional>
  f4:	cmp	r0, #0
  f8:	bne	48c <main+0x48c>
  fc:	mov	fp, #1
 100:	movw	r2, #0
 104:	movt	r2, #0
 108:	movw	r3, #0
 10c:	movt	r3, #0
 110:	str	r2, [sp, #12]
 114:	mov	r2, #0
 118:	movw	r9, #0
 11c:	movt	r9, #0
 120:	str	sl, [sp, #20]
 124:	mov	sl, r3
 128:	str	r2, [sp, #24]
 12c:	mov	r2, #1
 130:	str	r2, [sp, #16]
 134:	b	1dc <main+0x1dc>
 138:	mov	r1, sl
 13c:	mov	r0, r4
 140:	bl	0 <strcmp>
 144:	cmp	r0, #0
 148:	beq	1f8 <main+0x1f8>
 14c:	mov	r0, r4
 150:	ldr	r1, [sp, #12]
 154:	bl	0 <strcmp>
 158:	cmp	r0, #0
 15c:	beq	284 <main+0x284>
 160:	movw	r1, #0
 164:	movt	r1, #0
 168:	mov	r0, r4
 16c:	bl	0 <strcmp>
 170:	cmp	r0, #0
 174:	beq	284 <main+0x284>
 178:	movw	r1, #0
 17c:	movt	r1, #0
 180:	mov	r0, r4
 184:	bl	0 <strcmp>
 188:	cmp	r0, #0
 18c:	beq	1a8 <main+0x1a8>
 190:	movw	r1, #0
 194:	movt	r1, #0
 198:	mov	r0, r4
 19c:	bl	0 <strcmp>
 1a0:	cmp	r0, #0
 1a4:	bne	28c <main+0x28c>
 1a8:	add	r2, fp, #1
 1ac:	cmp	r2, r6
 1b0:	bge	28c <main+0x28c>
 1b4:	add	r1, r7, r8
 1b8:	ldr	r1, [r1, #4]
 1bc:	ldrb	r0, [r1]
 1c0:	cmp	r0, #45	; 0x2d
 1c4:	movne	fp, r2
 1c8:	strne	r1, [sp, #24]
 1cc:	beq	28c <main+0x28c>
 1d0:	add	fp, fp, #1
 1d4:	cmp	r6, fp
 1d8:	ble	308 <main+0x308>
 1dc:	ldr	r4, [r7, fp, lsl #2]
 1e0:	mov	r1, r9
 1e4:	lsl	r8, fp, #2
 1e8:	mov	r0, r4
 1ec:	bl	0 <strcmp>
 1f0:	cmp	r0, #0
 1f4:	bne	138 <main+0x138>
 1f8:	mov	r2, #1
 1fc:	str	r2, [r5]
 200:	b	1d0 <main+0x1d0>
 204:	bl	0 <coda_get_libcoda_version>
 208:	mov	r1, r0
 20c:	movw	r0, #0
 210:	movt	r0, #0
 214:	bl	0 <printf>
 218:	movw	r0, #0
 21c:	movt	r0, #0
 220:	bl	0 <puts>
 224:	mov	r0, #10
 228:	bl	0 <putchar>
 22c:	mov	r0, #0
 230:	bl	0 <exit>
 234:	mov	r1, r8
 238:	movw	r2, #0
 23c:	movt	r2, #0
 240:	ldr	r0, [r7]
 244:	bl	0 <coda_set_definition_path_conditional>
 248:	cmp	r0, #0
 24c:	bne	48c <main+0x48c>
 250:	cmp	r6, #2
 254:	beq	fc <main+0xfc>
 258:	movw	r3, #0
 25c:	movt	r3, #0
 260:	mov	r2, #25
 264:	mov	r1, #1
 268:	ldr	r3, [r3]
 26c:	movw	r0, #0
 270:	movt	r0, #0
 274:	bl	0 <fwrite>
 278:	bl	0 <main>
 27c:	mov	r0, #1
 280:	bl	0 <exit>
 284:	str	r0, [sp, #16]
 288:	b	1d0 <main+0x1d0>
 28c:	movw	r1, #0
 290:	movt	r1, #0
 294:	mov	r0, r4
 298:	bl	0 <strcmp>
 29c:	cmp	r0, #0
 2a0:	beq	2bc <main+0x2bc>
 2a4:	movw	r1, #0
 2a8:	movt	r1, #0
 2ac:	mov	r0, r4
 2b0:	bl	0 <strcmp>
 2b4:	cmp	r0, #0
 2b8:	bne	430 <main+0x430>
 2bc:	add	r2, fp, #2
 2c0:	cmp	r2, r6
 2c4:	bge	430 <main+0x430>
 2c8:	ldr	r3, [sp, #20]
 2cc:	ldr	r1, [r3]
 2d0:	add	r3, r7, r8
 2d4:	ldr	r8, [r3, #4]
 2d8:	ldr	r4, [r3, #8]
 2dc:	tst	r1, #15
 2e0:	beq	3ac <main+0x3ac>
 2e4:	ldr	r3, [sp, #20]
 2e8:	mov	fp, r2
 2ec:	ldm	r3, {r1, ip}
 2f0:	ldr	r0, [r3, #8]
 2f4:	add	r2, r1, #1
 2f8:	str	r8, [ip, r1, lsl #2]
 2fc:	str	r4, [r0, r1, lsl #2]
 300:	str	r2, [r3]
 304:	b	1d0 <main+0x1d0>
 308:	ldr	sl, [sp, #20]
 30c:	sub	r2, r6, #2
 310:	cmp	r2, fp
 314:	bne	258 <main+0x258>
 318:	bl	0 <coda_init>
 31c:	cmp	r0, #0
 320:	bne	48c <main+0x48c>
 324:	bl	0 <coda_set_option_perform_boundary_checks>
 328:	sub	r6, r6, #-1073741822	; 0xc0000002
 32c:	ldr	r0, [sp, #16]
 330:	bl	0 <coda_set_option_perform_conversions>
 334:	add	r3, r7, r6, lsl #2
 338:	ldr	r0, [r7, r6, lsl #2]
 33c:	ldr	r1, [r3, #4]
 340:	ldr	r2, [sp, #24]
 344:	bl	18a8 <compare_files>
 348:	mov	r4, r0
 34c:	bl	0 <coda_done>
 350:	ldr	r0, [sl, #4]
 354:	cmp	r0, #0
 358:	beq	360 <main+0x360>
 35c:	bl	0 <free>
 360:	ldr	r0, [sl, #8]
 364:	cmp	r0, #0
 368:	beq	370 <main+0x370>
 36c:	bl	0 <free>
 370:	ldr	r0, [sl, #12]
 374:	cmp	r0, #0
 378:	beq	384 <main+0x384>
 37c:	mov	r1, #0
 380:	bl	0 <coda_tree_node_delete>
 384:	cmp	r4, #0
 388:	bne	4c0 <main+0x4c0>
 38c:	mov	r0, r4
 390:	add	sp, sp, #36	; 0x24
 394:	ldrd	r4, [sp]
 398:	ldrd	r6, [sp, #8]
 39c:	ldrd	r8, [sp, #16]
 3a0:	ldrd	sl, [sp, #24]
 3a4:	add	sp, sp, #32
 3a8:	pop	{pc}		; (ldr pc, [sp], #4)
 3ac:	ldr	r3, [sp, #20]
 3b0:	add	r1, r1, #16
 3b4:	lsl	r1, r1, #2
 3b8:	str	r2, [sp, #28]
 3bc:	ldr	r0, [r3, #4]
 3c0:	bl	0 <realloc>
 3c4:	cmp	r0, #0
 3c8:	ldr	r2, [sp, #28]
 3cc:	beq	444 <main+0x444>
 3d0:	str	r2, [sp, #28]
 3d4:	ldr	r2, [sp, #20]
 3d8:	ldr	r3, [r2]
 3dc:	str	r0, [r2, #4]
 3e0:	ldr	r0, [r2, #8]
 3e4:	add	r3, r3, #16
 3e8:	lsl	r1, r3, #2
 3ec:	bl	0 <realloc>
 3f0:	cmp	r0, #0
 3f4:	ldr	r2, [sp, #28]
 3f8:	beq	47c <main+0x47c>
 3fc:	ldr	r3, [sp, #20]
 400:	str	r0, [r3, #8]
 404:	b	2e4 <main+0x2e4>
 408:	ldr	r0, [r7, #8]
 40c:	bl	0 <coda_set_definition_path>
 410:	cmp	r6, #3
 414:	moveq	r3, #1
 418:	moveq	fp, r6
 41c:	streq	r4, [sp, #24]
 420:	streq	r3, [sp, #16]
 424:	beq	30c <main+0x30c>
 428:	mov	fp, #3
 42c:	b	100 <main+0x100>
 430:	ldrb	r2, [r4]
 434:	ldr	sl, [sp, #20]
 438:	cmp	r2, #45	; 0x2d
 43c:	bne	30c <main+0x30c>
 440:	b	258 <main+0x258>
 444:	ldr	sl, [sp, #20]
 448:	mov	ip, #198	; 0xc6
 44c:	ldr	r2, [sl]
 450:	add	r2, r2, #16
 454:	mvn	r0, #0
 458:	str	ip, [sp]
 45c:	movw	r3, #0
 460:	movt	r3, #0
 464:	lsl	r2, r2, #2
 468:	movw	r1, #0
 46c:	movt	r1, #0
 470:	mov	r4, r0
 474:	bl	0 <coda_set_error>
 478:	b	38c <main+0x38c>
 47c:	ldr	sl, [sp, #20]
 480:	mov	ip, #207	; 0xcf
 484:	ldr	r2, [sl]
 488:	b	450 <main+0x450>
 48c:	movw	r3, #0
 490:	movt	r3, #0
 494:	ldr	r4, [r3]
 498:	bl	0 <coda_get_errno>
 49c:	ldr	r0, [r0]
 4a0:	bl	0 <coda_errno_to_string>
 4a4:	mov	r2, r0
 4a8:	movw	r1, #0
 4ac:	movt	r1, #0
 4b0:	mov	r0, r4
 4b4:	bl	0 <fprintf>
 4b8:	mov	r0, #1
 4bc:	bl	0 <exit>
 4c0:	mov	r0, #1
 4c4:	bl	0 <exit>
