
../compcert-repos/prog2/CMakeFiles/0.11.2.dir/Aula00_Conceitos_base/11_HELLOKIT.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #104	; 0x68
  10:	mov	r3, #0
  14:	str	r3, [fp, #-48]	; 0xffffffd0
  18:	sub	r1, fp, #44	; 0x2c
  1c:	mov	r2, #0
  20:	mov	r3, #0
  24:	strd	r2, [r1]
  28:	strd	r2, [r1, #8]
  2c:	mov	r0, r2
  30:	str	r0, [r1, #16]
  34:	strh	r2, [r1, #20]
  38:	mov	r3, #0
  3c:	str	r3, [fp, #-8]
  40:	sub	r3, fp, #20
  44:	mov	r1, r3
  48:	movw	r0, #0
  4c:	movt	r0, #0
  50:	bl	0 <__isoc99_scanf>
  54:	ldrb	r3, [fp, #-20]	; 0xffffffec
  58:	cmp	r3, #46	; 0x2e
  5c:	beq	114 <main+0x114>
  60:	sub	r3, fp, #108	; 0x6c
  64:	mov	r1, r3
  68:	movw	r0, #0
  6c:	movt	r0, #0
  70:	bl	0 <__isoc99_scanf>
  74:	mov	r3, #0
  78:	str	r3, [fp, #-8]
  7c:	ldr	r2, [fp, #-108]	; 0xffffff94
  80:	sub	r1, fp, #48	; 0x30
  84:	sub	r3, fp, #20
  88:	mov	r0, r3
  8c:	bl	2a0 <StringSet>
  90:	sub	r2, fp, #76	; 0x4c
  94:	sub	r3, fp, #48	; 0x30
  98:	mov	r1, r2
  9c:	mov	r0, r3
  a0:	bl	130 <R_ShiftString>
  a4:	b	104 <main+0x104>
  a8:	sub	r2, fp, #76	; 0x4c
  ac:	sub	r3, fp, #48	; 0x30
  b0:	mov	r1, r2
  b4:	mov	r0, r3
  b8:	bl	0 <strcmp>
  bc:	mov	r3, r0
  c0:	cmp	r3, #0
  c4:	bne	d0 <main+0xd0>
  c8:	mov	r3, #1
  cc:	str	r3, [fp, #-8]
  d0:	sub	r3, fp, #48	; 0x30
  d4:	mov	r0, r3
  d8:	bl	0 <puts>
  dc:	sub	r2, fp, #48	; 0x30
  e0:	sub	r3, fp, #104	; 0x68
  e4:	mov	r1, r2
  e8:	mov	r0, r3
  ec:	bl	0 <strcpy>
  f0:	sub	r2, fp, #48	; 0x30
  f4:	sub	r3, fp, #104	; 0x68
  f8:	mov	r1, r2
  fc:	mov	r0, r3
 100:	bl	1e8 <L_ShiftString>
 104:	ldr	r3, [fp, #-8]
 108:	cmp	r3, #0
 10c:	beq	a8 <main+0xa8>
 110:	b	40 <main+0x40>
 114:	nop	{0}
 118:	mov	r3, #0
 11c:	mov	r0, r3
 120:	sub	sp, fp, #4
 124:	ldr	fp, [sp]
 128:	add	sp, sp, #4
 12c:	pop	{pc}		; (ldr pc, [sp], #4)

00000130 <R_ShiftString>:
 130:	str	fp, [sp, #-8]!
 134:	str	lr, [sp, #4]
 138:	add	fp, sp, #4
 13c:	sub	sp, sp, #16
 140:	str	r0, [fp, #-16]
 144:	str	r1, [fp, #-20]	; 0xffffffec
 148:	ldr	r0, [fp, #-16]
 14c:	bl	0 <strlen>
 150:	mov	r3, r0
 154:	sub	r3, r3, #1
 158:	ldr	r2, [fp, #-16]
 15c:	add	r3, r2, r3
 160:	ldrb	r2, [r3]
 164:	ldr	r3, [fp, #-20]	; 0xffffffec
 168:	strb	r2, [r3]
 16c:	mov	r3, #1
 170:	str	r3, [fp, #-8]
 174:	b	1a8 <R_ShiftString+0x78>
 178:	ldr	r3, [fp, #-8]
 17c:	sub	r3, r3, #1
 180:	ldr	r2, [fp, #-16]
 184:	add	r2, r2, r3
 188:	ldr	r3, [fp, #-8]
 18c:	ldr	r1, [fp, #-20]	; 0xffffffec
 190:	add	r3, r1, r3
 194:	ldrb	r2, [r2]
 198:	strb	r2, [r3]
 19c:	ldr	r3, [fp, #-8]
 1a0:	add	r3, r3, #1
 1a4:	str	r3, [fp, #-8]
 1a8:	ldr	r0, [fp, #-16]
 1ac:	bl	0 <strlen>
 1b0:	mov	r2, r0
 1b4:	ldr	r3, [fp, #-8]
 1b8:	cmp	r2, r3
 1bc:	bhi	178 <R_ShiftString+0x48>
 1c0:	ldr	r3, [fp, #-8]
 1c4:	ldr	r2, [fp, #-20]	; 0xffffffec
 1c8:	add	r3, r2, r3
 1cc:	mov	r2, #0
 1d0:	strb	r2, [r3]
 1d4:	nop	{0}
 1d8:	sub	sp, fp, #4
 1dc:	ldr	fp, [sp]
 1e0:	add	sp, sp, #4
 1e4:	pop	{pc}		; (ldr pc, [sp], #4)

000001e8 <L_ShiftString>:
 1e8:	str	fp, [sp, #-8]!
 1ec:	str	lr, [sp, #4]
 1f0:	add	fp, sp, #4
 1f4:	sub	sp, sp, #16
 1f8:	str	r0, [fp, #-16]
 1fc:	str	r1, [fp, #-20]	; 0xffffffec
 200:	ldr	r0, [fp, #-16]
 204:	bl	0 <strlen>
 208:	mov	r3, r0
 20c:	sub	r3, r3, #1
 210:	ldr	r2, [fp, #-20]	; 0xffffffec
 214:	add	r3, r2, r3
 218:	ldr	r2, [fp, #-16]
 21c:	ldrb	r2, [r2]
 220:	strb	r2, [r3]
 224:	mov	r3, #1
 228:	str	r3, [fp, #-8]
 22c:	b	260 <L_ShiftString+0x78>
 230:	ldr	r3, [fp, #-8]
 234:	ldr	r2, [fp, #-16]
 238:	add	r2, r2, r3
 23c:	ldr	r3, [fp, #-8]
 240:	sub	r3, r3, #1
 244:	ldr	r1, [fp, #-20]	; 0xffffffec
 248:	add	r3, r1, r3
 24c:	ldrb	r2, [r2]
 250:	strb	r2, [r3]
 254:	ldr	r3, [fp, #-8]
 258:	add	r3, r3, #1
 25c:	str	r3, [fp, #-8]
 260:	ldr	r0, [fp, #-16]
 264:	bl	0 <strlen>
 268:	mov	r2, r0
 26c:	ldr	r3, [fp, #-8]
 270:	cmp	r2, r3
 274:	bhi	230 <L_ShiftString+0x48>
 278:	ldr	r3, [fp, #-8]
 27c:	ldr	r2, [fp, #-20]	; 0xffffffec
 280:	add	r3, r2, r3
 284:	mov	r2, #0
 288:	strb	r2, [r3]
 28c:	nop	{0}
 290:	sub	sp, fp, #4
 294:	ldr	fp, [sp]
 298:	add	sp, sp, #4
 29c:	pop	{pc}		; (ldr pc, [sp], #4)

000002a0 <StringSet>:
 2a0:	str	fp, [sp, #-8]!
 2a4:	str	lr, [sp, #4]
 2a8:	add	fp, sp, #4
 2ac:	sub	sp, sp, #24
 2b0:	str	r0, [fp, #-16]
 2b4:	str	r1, [fp, #-20]	; 0xffffffec
 2b8:	str	r2, [fp, #-24]	; 0xffffffe8
 2bc:	ldr	r3, [fp, #-20]	; 0xffffffec
 2c0:	mov	r2, #0
 2c4:	strb	r2, [r3]
 2c8:	mov	r3, #0
 2cc:	str	r3, [fp, #-8]
 2d0:	b	2ec <StringSet+0x4c>
 2d4:	ldr	r1, [fp, #-16]
 2d8:	ldr	r0, [fp, #-20]	; 0xffffffec
 2dc:	bl	0 <strcat>
 2e0:	ldr	r3, [fp, #-8]
 2e4:	add	r3, r3, #1
 2e8:	str	r3, [fp, #-8]
 2ec:	ldr	r2, [fp, #-8]
 2f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2f4:	cmp	r2, r3
 2f8:	blt	2d4 <StringSet+0x34>
 2fc:	nop	{0}
 300:	sub	sp, fp, #4
 304:	ldr	fp, [sp]
 308:	add	sp, sp, #4
 30c:	pop	{pc}		; (ldr pc, [sp], #4)
