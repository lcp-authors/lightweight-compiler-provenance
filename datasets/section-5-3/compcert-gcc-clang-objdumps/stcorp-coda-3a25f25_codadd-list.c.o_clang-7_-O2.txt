
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-list.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_list>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #28
   c:	mov	r7, r1
  10:	mov	r9, r0
  14:	cmn	r2, #1
  18:	ble	6c <generate_list+0x6c>
  1c:	mov	r0, r9
  20:	mov	r5, r2
  24:	bl	0 <coda_data_dictionary_get_product_class>
  28:	cmp	r0, #0
  2c:	beq	244 <generate_list+0x244>
  30:	mov	r1, r7
  34:	bl	0 <coda_product_class_get_product_type>
  38:	cmp	r0, #0
  3c:	beq	250 <generate_list+0x250>
  40:	mov	r1, r5
  44:	bl	0 <coda_product_type_get_product_definition_by_version>
  48:	cmp	r0, #0
  4c:	beq	25c <generate_list+0x25c>
  50:	ldr	r0, [r0, #28]
  54:	cmp	r0, #0
  58:	beq	23c <generate_list+0x23c>
  5c:	mov	r1, #0
  60:	sub	sp, fp, #28
  64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  68:	b	2ac <print_type>
  6c:	ldr	r0, [pc, #560]	; 2a4 <generate_list+0x2a4>
  70:	ldr	r1, [pc, r0]
  74:	bl	0 <__aeabi_read_tp>
  78:	ldr	sl, [r0, r1]
  7c:	ldr	r0, [sl]
  80:	cmp	r0, #1
  84:	blt	23c <generate_list+0x23c>
  88:	ldr	r0, [pc, #536]	; 2a8 <generate_list+0x2a8>
  8c:	movw	r8, #0
  90:	mov	r4, #0
  94:	movt	r8, #0
  98:	ldr	r0, [pc, r0]
  9c:	str	r0, [sp, #12]
  a0:	str	r7, [sp, #24]
  a4:	str	r9, [sp, #16]
  a8:	ldr	r0, [sl, #4]
  ac:	cmp	r9, #0
  b0:	ldr	r5, [r0, r4, lsl #2]
  b4:	beq	cc <generate_list+0xcc>
  b8:	ldr	r0, [r5]
  bc:	mov	r1, r9
  c0:	bl	0 <strcmp>
  c4:	cmp	r0, #0
  c8:	bne	22c <generate_list+0x22c>
  cc:	ldr	r6, [r5, #28]
  d0:	cmp	r6, #1
  d4:	blt	22c <generate_list+0x22c>
  d8:	mov	sl, #0
  dc:	str	r4, [sp, #20]
  e0:	ldr	r0, [r5, #32]
  e4:	cmp	r7, #0
  e8:	ldr	r9, [r0, sl, lsl #2]
  ec:	beq	104 <generate_list+0x104>
  f0:	ldr	r0, [r9]
  f4:	mov	r1, r7
  f8:	bl	0 <strcmp>
  fc:	cmp	r0, #0
 100:	bne	20c <generate_list+0x20c>
 104:	ldr	r0, [r9, #8]
 108:	cmp	r0, #1
 10c:	blt	20c <generate_list+0x20c>
 110:	mov	r6, #0
 114:	ldr	r0, [r9, #12]
 118:	ldr	r3, [r9]
 11c:	ldr	r1, [r5]
 120:	ldr	r2, [r8]
 124:	ldr	r7, [r0, r6, lsl #2]
 128:	ldr	r0, [r7, #4]
 12c:	str	r2, [sp]
 130:	str	r0, [sp, #4]
 134:	movw	r0, #0
 138:	movt	r0, #0
 13c:	bl	0 <printf>
 140:	movw	r0, #0
 144:	movt	r0, #0
 148:	ldr	r0, [r0]
 14c:	cmp	r0, #0
 150:	beq	174 <generate_list+0x174>
 154:	ldr	r0, [r7]
 158:	ldr	r4, [r8]
 15c:	bl	0 <coda_type_get_format_name>
 160:	mov	r2, r0
 164:	movw	r0, #0
 168:	mov	r1, r4
 16c:	movt	r0, #0
 170:	bl	0 <printf>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	ldr	r0, [r0]
 180:	cmp	r0, #0
 184:	beq	1ec <generate_list+0x1ec>
 188:	ldr	r1, [r8]
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	bl	0 <printf>
 198:	ldr	r1, [r7, #12]
 19c:	cmp	r1, #0
 1a0:	beq	1ec <generate_list+0x1ec>
 1a4:	movw	r0, #0
 1a8:	movt	r0, #0
 1ac:	ldr	r0, [r0]
 1b0:	cmp	r0, #0
 1b4:	beq	1c4 <generate_list+0x1c4>
 1b8:	mov	r0, #34	; 0x22
 1bc:	bl	0 <putchar>
 1c0:	ldr	r1, [r7, #12]
 1c4:	movw	r0, #0
 1c8:	movt	r0, #0
 1cc:	bl	0 <printf>
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	ldr	r0, [r0]
 1dc:	cmp	r0, #0
 1e0:	beq	1ec <generate_list+0x1ec>
 1e4:	mov	r0, #34	; 0x22
 1e8:	bl	0 <putchar>
 1ec:	mov	r0, #10
 1f0:	bl	0 <putchar>
 1f4:	ldr	r0, [r9, #8]
 1f8:	add	r6, r6, #1
 1fc:	cmp	r6, r0
 200:	blt	114 <generate_list+0x114>
 204:	ldr	r6, [r5, #28]
 208:	ldr	r7, [sp, #24]
 20c:	add	sl, sl, #1
 210:	cmp	sl, r6
 214:	blt	e0 <generate_list+0xe0>
 218:	bl	0 <__aeabi_read_tp>
 21c:	ldr	r1, [sp, #12]
 220:	ldr	r9, [sp, #16]
 224:	ldr	r4, [sp, #20]
 228:	ldr	sl, [r0, r1]
 22c:	ldr	r0, [sl]
 230:	add	r4, r4, #1
 234:	cmp	r4, r0
 238:	blt	a8 <generate_list+0xa8>
 23c:	sub	sp, fp, #28
 240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 244:	ldr	r0, [pc, #84]	; 2a0 <generate_list+0x2a0>
 248:	ldr	r1, [pc, r0]
 24c:	b	264 <generate_list+0x264>
 250:	ldr	r0, [pc, #68]	; 29c <generate_list+0x29c>
 254:	ldr	r1, [pc, r0]
 258:	b	264 <generate_list+0x264>
 25c:	ldr	r0, [pc, #52]	; 298 <generate_list+0x298>
 260:	ldr	r1, [pc, r0]
 264:	bl	0 <__aeabi_read_tp>
 268:	ldr	r0, [r0, r1]
 26c:	movw	r1, #0
 270:	movt	r1, #0
 274:	ldr	r4, [r1]
 278:	bl	0 <coda_errno_to_string>
 27c:	movw	r1, #0
 280:	mov	r2, r0
 284:	mov	r0, r4
 288:	movt	r1, #0
 28c:	bl	0 <fprintf>
 290:	mov	r0, #1
 294:	bl	0 <exit>
 298:	.word	0x00000030
 29c:	.word	0x00000040
 2a0:	.word	0x00000050
 2a4:	.word	0x0000022c
 2a8:	.word	0x00000208

000002ac <print_type>:
 2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2b0:	add	fp, sp, #28
 2b4:	sub	sp, sp, #52	; 0x34
 2b8:	mov	r4, r1
 2bc:	cmp	r1, #32
 2c0:	bge	7c4 <print_type+0x518>
 2c4:	mov	r6, r0
 2c8:	movw	r0, #0
 2cc:	add	r1, sp, #12
 2d0:	str	r4, [sp, #4]
 2d4:	movt	r0, #0
 2d8:	str	r6, [r0, r4, lsl #2]
 2dc:	mov	r0, r6
 2e0:	bl	0 <coda_type_get_class>
 2e4:	ldr	r0, [sp, #12]
 2e8:	cmp	r0, #2
 2ec:	bcs	2fc <print_type+0x50>
 2f0:	movw	r0, #0
 2f4:	movt	r0, #0
 2f8:	b	30c <print_type+0x60>
 2fc:	cmp	r0, #6
 300:	bne	318 <print_type+0x6c>
 304:	movw	r0, #0
 308:	movt	r0, #0
 30c:	ldr	r0, [r0]
 310:	cmp	r0, #0
 314:	beq	62c <print_type+0x380>
 318:	mov	r0, #47	; 0x2f
 31c:	str	r6, [sp]
 320:	bl	0 <putchar>
 324:	ldr	r6, [sp, #4]
 328:	cmp	r6, #1
 32c:	blt	488 <print_type+0x1dc>
 330:	movw	r9, #0
 334:	movw	r4, #0
 338:	mov	sl, #0
 33c:	add	r7, sp, #20
 340:	movt	r9, #0
 344:	movt	r4, #0
 348:	movw	r0, #0
 34c:	mov	r5, sl
 350:	add	sl, sl, #1
 354:	movt	r0, #0
 358:	ldr	r1, [r0, sl, lsl #2]
 35c:	cmn	r1, #1
 360:	beq	3d0 <print_type+0x124>
 364:	movw	r0, #0
 368:	movt	r0, #0
 36c:	ldr	r8, [r0, r5, lsl #2]
 370:	ldr	r0, [r8, #8]
 374:	cmp	r0, #1
 378:	beq	3e4 <print_type+0x138>
 37c:	cmp	r0, #0
 380:	bne	7a4 <print_type+0x4f8>
 384:	mov	r0, r8
 388:	mov	r2, r7
 38c:	bl	0 <coda_type_get_record_field_name>
 390:	cmp	r5, #0
 394:	beq	3b4 <print_type+0x108>
 398:	movw	r0, #0
 39c:	movt	r0, #0
 3a0:	ldr	r0, [r0, r5, lsl #2]
 3a4:	cmn	r0, #1
 3a8:	beq	3b4 <print_type+0x108>
 3ac:	mov	r0, #47	; 0x2f
 3b0:	bl	0 <putchar>
 3b4:	ldr	r1, [sp, #20]
 3b8:	movw	r0, #0
 3bc:	movt	r0, #0
 3c0:	bl	0 <printf>
 3c4:	cmp	sl, r6
 3c8:	blt	348 <print_type+0x9c>
 3cc:	b	488 <print_type+0x1dc>
 3d0:	mov	r0, #64	; 0x40
 3d4:	bl	0 <putchar>
 3d8:	cmp	sl, r6
 3dc:	blt	348 <print_type+0x9c>
 3e0:	b	488 <print_type+0x1dc>
 3e4:	mov	r0, r8
 3e8:	add	r1, sp, #16
 3ec:	mov	r2, r7
 3f0:	bl	0 <coda_type_get_array_dim>
 3f4:	mov	r0, #91	; 0x5b
 3f8:	bl	0 <putchar>
 3fc:	ldr	r0, [sp, #16]
 400:	cmp	r0, #1
 404:	blt	474 <print_type+0x1c8>
 408:	add	r6, r8, #84	; 0x54
 40c:	mov	r5, #0
 410:	cmp	r5, #0
 414:	beq	420 <print_type+0x174>
 418:	mov	r0, #44	; 0x2c
 41c:	bl	0 <putchar>
 420:	ldr	r1, [r7, r5, lsl #2]
 424:	cmn	r1, #1
 428:	ble	438 <print_type+0x18c>
 42c:	mov	r0, r4
 430:	bl	0 <printf>
 434:	b	464 <print_type+0x1b8>
 438:	ldr	r0, [r9]
 43c:	cmp	r0, #0
 440:	ldrne	r0, [r6, r5, lsl #2]
 444:	cmpne	r0, #0
 448:	bne	458 <print_type+0x1ac>
 44c:	mov	r0, #63	; 0x3f
 450:	bl	0 <putchar>
 454:	b	464 <print_type+0x1b8>
 458:	movw	r1, #0
 45c:	movt	r1, #0
 460:	bl	0 <coda_expression_print>
 464:	ldr	r0, [sp, #16]
 468:	add	r5, r5, #1
 46c:	cmp	r5, r0
 470:	blt	410 <print_type+0x164>
 474:	mov	r0, #93	; 0x5d
 478:	bl	0 <putchar>
 47c:	ldr	r6, [sp, #4]
 480:	cmp	sl, r6
 484:	blt	348 <print_type+0x9c>
 488:	movw	r0, #0
 48c:	ldr	r6, [sp]
 490:	movt	r0, #0
 494:	ldr	r0, [r0]
 498:	cmp	r0, #0
 49c:	beq	4d4 <print_type+0x228>
 4a0:	add	r1, sp, #20
 4a4:	mov	r0, r6
 4a8:	bl	0 <coda_type_get_read_type>
 4ac:	movw	r0, #0
 4b0:	movt	r0, #0
 4b4:	ldr	r4, [r0]
 4b8:	ldr	r0, [sp, #20]
 4bc:	bl	0 <coda_type_get_native_type_name>
 4c0:	mov	r2, r0
 4c4:	movw	r0, #0
 4c8:	mov	r1, r4
 4cc:	movt	r0, #0
 4d0:	bl	0 <printf>
 4d4:	movw	r0, #0
 4d8:	movt	r0, #0
 4dc:	ldr	r0, [r0]
 4e0:	cmp	r0, #0
 4e4:	beq	51c <print_type+0x270>
 4e8:	add	r1, sp, #20
 4ec:	mov	r0, r6
 4f0:	bl	0 <coda_type_get_format>
 4f4:	movw	r0, #0
 4f8:	movt	r0, #0
 4fc:	ldr	r4, [r0]
 500:	ldr	r0, [sp, #20]
 504:	bl	0 <coda_type_get_format_name>
 508:	mov	r2, r0
 50c:	movw	r0, #0
 510:	mov	r1, r4
 514:	movt	r0, #0
 518:	bl	0 <printf>
 51c:	movw	r0, #0
 520:	movt	r0, #0
 524:	ldr	r0, [r0]
 528:	cmp	r0, #0
 52c:	beq	5a0 <print_type+0x2f4>
 530:	movw	r0, #0
 534:	movt	r0, #0
 538:	ldr	r1, [r0]
 53c:	movw	r0, #0
 540:	movt	r0, #0
 544:	bl	0 <printf>
 548:	add	r1, sp, #20
 54c:	mov	r0, r6
 550:	bl	0 <coda_type_get_unit>
 554:	ldr	r1, [sp, #20]
 558:	cmp	r1, #0
 55c:	beq	5a0 <print_type+0x2f4>
 560:	movw	r4, #0
 564:	movt	r4, #0
 568:	ldr	r0, [r4]
 56c:	cmp	r0, #0
 570:	beq	580 <print_type+0x2d4>
 574:	mov	r0, #34	; 0x22
 578:	bl	0 <putchar>
 57c:	ldr	r1, [sp, #20]
 580:	movw	r0, #0
 584:	movt	r0, #0
 588:	bl	0 <printf>
 58c:	ldr	r0, [r4]
 590:	cmp	r0, #0
 594:	beq	5a0 <print_type+0x2f4>
 598:	mov	r0, #34	; 0x22
 59c:	bl	0 <putchar>
 5a0:	movw	r0, #0
 5a4:	movt	r0, #0
 5a8:	ldr	r0, [r0]
 5ac:	cmp	r0, #0
 5b0:	beq	624 <print_type+0x378>
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	ldr	r1, [r0]
 5c0:	movw	r0, #0
 5c4:	movt	r0, #0
 5c8:	bl	0 <printf>
 5cc:	add	r1, sp, #20
 5d0:	mov	r0, r6
 5d4:	bl	0 <coda_type_get_description>
 5d8:	ldr	r1, [sp, #20]
 5dc:	cmp	r1, #0
 5e0:	beq	624 <print_type+0x378>
 5e4:	movw	r4, #0
 5e8:	movt	r4, #0
 5ec:	ldr	r0, [r4]
 5f0:	cmp	r0, #0
 5f4:	beq	604 <print_type+0x358>
 5f8:	mov	r0, #34	; 0x22
 5fc:	bl	0 <putchar>
 600:	ldr	r1, [sp, #20]
 604:	movw	r0, #0
 608:	movt	r0, #0
 60c:	bl	0 <printf>
 610:	ldr	r0, [r4]
 614:	cmp	r0, #0
 618:	beq	624 <print_type+0x378>
 61c:	mov	r0, #34	; 0x22
 620:	bl	0 <putchar>
 624:	mov	r0, #10
 628:	bl	0 <putchar>
 62c:	movw	r0, #0
 630:	movt	r0, #0
 634:	ldr	r0, [r0]
 638:	cmp	r0, #0
 63c:	beq	684 <print_type+0x3d8>
 640:	add	r1, sp, #20
 644:	mov	r0, r6
 648:	bl	0 <coda_type_has_attributes>
 64c:	ldr	r0, [sp, #20]
 650:	cmp	r0, #0
 654:	beq	684 <print_type+0x3d8>
 658:	add	r1, sp, #16
 65c:	mov	r0, r6
 660:	bl	0 <coda_type_get_attributes>
 664:	ldr	r0, [sp, #4]
 668:	mvn	r2, #0
 66c:	add	r1, r0, #1
 670:	movw	r0, #0
 674:	movt	r0, #0
 678:	str	r2, [r0, r1, lsl #2]
 67c:	ldr	r0, [sp, #16]
 680:	bl	2ac <print_type>
 684:	ldr	r0, [sp, #12]
 688:	cmp	r0, #6
 68c:	beq	768 <print_type+0x4bc>
 690:	cmp	r0, #1
 694:	beq	73c <print_type+0x490>
 698:	cmp	r0, #0
 69c:	bne	77c <print_type+0x4d0>
 6a0:	add	r1, sp, #20
 6a4:	mov	r0, r6
 6a8:	bl	0 <coda_type_get_num_record_fields>
 6ac:	ldr	r0, [sp, #20]
 6b0:	cmp	r0, #1
 6b4:	blt	77c <print_type+0x4d0>
 6b8:	ldr	r0, [sp, #4]
 6bc:	movw	r7, #0
 6c0:	movw	r9, #0
 6c4:	mov	r5, #0
 6c8:	add	sl, sp, #16
 6cc:	add	r8, sp, #8
 6d0:	movt	r7, #0
 6d4:	movt	r9, #0
 6d8:	add	r4, r0, #1
 6dc:	mov	r0, r6
 6e0:	mov	r1, r5
 6e4:	mov	r2, sl
 6e8:	bl	0 <coda_type_get_record_field_type>
 6ec:	ldr	r0, [r7]
 6f0:	cmp	r0, #0
 6f4:	beq	70c <print_type+0x460>
 6f8:	ldr	r0, [sp, #16]
 6fc:	mov	r1, r4
 700:	str	r5, [r9, r4, lsl #2]
 704:	bl	2ac <print_type>
 708:	b	728 <print_type+0x47c>
 70c:	mov	r0, r6
 710:	mov	r1, r5
 714:	mov	r2, r8
 718:	bl	0 <coda_type_get_record_field_hidden_status>
 71c:	ldr	r0, [sp, #8]
 720:	cmp	r0, #0
 724:	beq	6f8 <print_type+0x44c>
 728:	ldr	r0, [sp, #20]
 72c:	add	r5, r5, #1
 730:	cmp	r5, r0
 734:	blt	6dc <print_type+0x430>
 738:	b	77c <print_type+0x4d0>
 73c:	add	r1, sp, #20
 740:	mov	r0, r6
 744:	bl	0 <coda_type_get_array_base_type>
 748:	ldr	r0, [sp, #4]
 74c:	mov	r2, #0
 750:	add	r1, r0, #1
 754:	movw	r0, #0
 758:	movt	r0, #0
 75c:	str	r2, [r0, r1, lsl #2]
 760:	ldr	r0, [sp, #20]
 764:	b	798 <print_type+0x4ec>
 768:	movw	r0, #0
 76c:	movt	r0, #0
 770:	ldr	r0, [r0]
 774:	cmp	r0, #0
 778:	beq	784 <print_type+0x4d8>
 77c:	sub	sp, fp, #28
 780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 784:	add	r1, sp, #20
 788:	mov	r0, r6
 78c:	bl	0 <coda_type_get_special_base_type>
 790:	ldr	r0, [sp, #20]
 794:	ldr	r1, [sp, #4]
 798:	bl	2ac <print_type>
 79c:	sub	sp, fp, #28
 7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7a4:	movw	r0, #0
 7a8:	movw	r1, #0
 7ac:	movw	r3, #0
 7b0:	mov	r2, #125	; 0x7d
 7b4:	movt	r0, #0
 7b8:	movt	r1, #0
 7bc:	movt	r3, #0
 7c0:	bl	0 <__assert_fail>
 7c4:	mov	r0, #10
 7c8:	bl	0 <putchar>
 7cc:	movw	r0, #0
 7d0:	movw	r1, #0
 7d4:	mov	r2, r4
 7d8:	mov	r3, #32
 7dc:	movt	r0, #0
 7e0:	movt	r1, #0
 7e4:	ldr	r0, [r0]
 7e8:	bl	0 <fprintf>
 7ec:	mov	r0, #1
 7f0:	bl	0 <exit>
