
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	str	r4, [sp, #-8]!
   c:	str	lr, [sp, #4]
  10:	bl	0 <puts>
  14:	movw	r0, #0
  18:	movt	r0, #0
  1c:	bl	0 <puts>
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	bl	0 <puts>
  2c:	movw	r0, #0
  30:	movt	r0, #0
  34:	bl	0 <puts>
  38:	movw	r0, #0
  3c:	movt	r0, #0
  40:	bl	0 <puts>
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	bl	0 <puts>
  50:	movw	r0, #0
  54:	movt	r0, #0
  58:	bl	0 <puts>
  5c:	mov	r0, #10
  60:	bl	0 <putchar>
  64:	movw	r0, #0
  68:	movt	r0, #0
  6c:	bl	0 <puts>
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <puts>
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	bl	0 <puts>
  88:	movw	r0, #0
  8c:	movt	r0, #0
  90:	bl	0 <puts>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	bl	0 <puts>
  a0:	movw	r0, #0
  a4:	movt	r0, #0
  a8:	bl	0 <puts>
  ac:	movw	r0, #0
  b0:	movt	r0, #0
  b4:	bl	0 <puts>
  b8:	movw	r0, #0
  bc:	movt	r0, #0
  c0:	bl	0 <puts>
  c4:	movw	r0, #0
  c8:	movt	r0, #0
  cc:	bl	0 <puts>
  d0:	movw	r0, #0
  d4:	movt	r0, #0
  d8:	bl	0 <puts>
  dc:	movw	r0, #0
  e0:	movt	r0, #0
  e4:	bl	0 <puts>
  e8:	movw	r0, #0
  ec:	movt	r0, #0
  f0:	bl	0 <puts>
  f4:	mov	r0, #10
  f8:	bl	0 <putchar>
  fc:	movw	r0, #0
 100:	movt	r0, #0
 104:	bl	0 <puts>
 108:	movw	r0, #0
 10c:	movt	r0, #0
 110:	bl	0 <puts>
 114:	mov	r0, #10
 118:	bl	0 <putchar>
 11c:	movw	r0, #0
 120:	movt	r0, #0
 124:	bl	0 <puts>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	bl	0 <puts>
 134:	mov	r0, #10
 138:	bl	0 <putchar>
 13c:	movw	r0, #0
 140:	movt	r0, #0
 144:	bl	0 <puts>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <puts>
 154:	mov	r0, #10
 158:	bl	0 <putchar>
 15c:	movw	r0, #0
 160:	movt	r0, #0
 164:	bl	0 <puts>
 168:	movw	r0, #0
 16c:	movt	r0, #0
 170:	bl	0 <puts>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	bl	0 <puts>
 180:	movw	r0, #0
 184:	movt	r0, #0
 188:	bl	0 <puts>
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	bl	0 <puts>
 198:	movw	r0, #0
 19c:	movt	r0, #0
 1a0:	bl	0 <puts>
 1a4:	movw	r0, #0
 1a8:	movt	r0, #0
 1ac:	bl	0 <puts>
 1b0:	mov	r0, #10
 1b4:	ldr	r4, [sp]
 1b8:	ldr	lr, [sp, #4]
 1bc:	add	sp, sp, #8
 1c0:	b	0 <putchar>

000001c4 <eval_expression>:
 1c4:	movw	r3, #0
 1c8:	movt	r3, #0
 1cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
 1d0:	ldr	r2, [r3]
 1d4:	strd	r6, [sp, #8]
 1d8:	strd	r8, [sp, #16]
 1dc:	str	sl, [sp, #24]
 1e0:	str	lr, [sp, #28]
 1e4:	sub	sp, sp, #32
 1e8:	cmp	r2, #5
 1ec:	ldrls	pc, [pc, r2, lsl #2]
 1f0:	b	650 <eval_expression+0x48c>
 1f4:	.word	0x000003d8
 1f8:	.word	0x00000434
 1fc:	.word	0x00000464
 200:	.word	0x0000020c
 204:	.word	0x00000590
 208:	.word	0x00000590
 20c:	mov	ip, #0
 210:	mov	r1, r0
 214:	ldr	r0, [r3, #4]
 218:	mov	r2, sp
 21c:	add	r3, sp, #8
 220:	str	ip, [sp]
 224:	bl	0 <coda_expression_eval_string>
 228:	subs	r6, r0, #0
 22c:	bne	600 <eval_expression+0x43c>
 230:	ldr	r4, [sp]
 234:	ldr	r7, [sp, #8]
 238:	cmp	r4, #0
 23c:	cmpne	r7, #0
 240:	beq	4a0 <eval_expression+0x2dc>
 244:	cmp	r7, #0
 248:	blt	570 <eval_expression+0x3ac>
 24c:	sub	r4, r4, #1
 250:	movw	r9, #0
 254:	movt	r9, #0
 258:	movw	sl, #0
 25c:	movt	sl, #0
 260:	movw	r8, #0
 264:	movt	r8, #0
 268:	add	r7, r4, r7
 26c:	ldrb	r5, [r4, #1]!
 270:	sub	r3, r5, #7
 274:	cmp	r3, #85	; 0x55
 278:	ldrls	pc, [pc, r3, lsl #2]
 27c:	b	548 <eval_expression+0x384>
 280:	.word	0x00000518
 284:	.word	0x00000538
 288:	.word	0x00000528
 28c:	.word	0x00000508
 290:	.word	0x000004f8
 294:	.word	0x000004e8
 298:	.word	0x000004d8
 29c:	.word	0x00000548
 2a0:	.word	0x00000548
 2a4:	.word	0x00000548
 2a8:	.word	0x00000548
 2ac:	.word	0x00000548
 2b0:	.word	0x00000548
 2b4:	.word	0x00000548
 2b8:	.word	0x00000548
 2bc:	.word	0x00000548
 2c0:	.word	0x00000548
 2c4:	.word	0x00000548
 2c8:	.word	0x00000548
 2cc:	.word	0x00000548
 2d0:	.word	0x000004c8
 2d4:	.word	0x00000548
 2d8:	.word	0x00000548
 2dc:	.word	0x00000548
 2e0:	.word	0x00000548
 2e4:	.word	0x00000548
 2e8:	.word	0x00000548
 2ec:	.word	0x000004bc
 2f0:	.word	0x00000548
 2f4:	.word	0x00000548
 2f8:	.word	0x00000548
 2fc:	.word	0x00000548
 300:	.word	0x00000548
 304:	.word	0x00000548
 308:	.word	0x00000548
 30c:	.word	0x00000548
 310:	.word	0x00000548
 314:	.word	0x00000548
 318:	.word	0x00000548
 31c:	.word	0x00000548
 320:	.word	0x00000548
 324:	.word	0x00000548
 328:	.word	0x00000548
 32c:	.word	0x00000548
 330:	.word	0x00000548
 334:	.word	0x00000548
 338:	.word	0x00000548
 33c:	.word	0x00000548
 340:	.word	0x00000548
 344:	.word	0x00000548
 348:	.word	0x00000548
 34c:	.word	0x00000548
 350:	.word	0x00000548
 354:	.word	0x00000548
 358:	.word	0x00000548
 35c:	.word	0x00000548
 360:	.word	0x00000548
 364:	.word	0x00000548
 368:	.word	0x00000548
 36c:	.word	0x00000548
 370:	.word	0x00000548
 374:	.word	0x00000548
 378:	.word	0x00000548
 37c:	.word	0x00000548
 380:	.word	0x00000548
 384:	.word	0x00000548
 388:	.word	0x00000548
 38c:	.word	0x00000548
 390:	.word	0x00000548
 394:	.word	0x00000548
 398:	.word	0x00000548
 39c:	.word	0x00000548
 3a0:	.word	0x00000548
 3a4:	.word	0x00000548
 3a8:	.word	0x00000548
 3ac:	.word	0x00000548
 3b0:	.word	0x00000548
 3b4:	.word	0x00000548
 3b8:	.word	0x00000548
 3bc:	.word	0x00000548
 3c0:	.word	0x00000548
 3c4:	.word	0x00000548
 3c8:	.word	0x00000548
 3cc:	.word	0x00000548
 3d0:	.word	0x00000548
 3d4:	.word	0x00000490
 3d8:	mov	r1, r0
 3dc:	add	r2, sp, #8
 3e0:	ldr	r0, [r3, #4]
 3e4:	bl	0 <coda_expression_eval_bool>
 3e8:	subs	r6, r0, #0
 3ec:	bne	628 <eval_expression+0x464>
 3f0:	ldr	r0, [sp, #8]
 3f4:	movw	r2, #0
 3f8:	movt	r2, #0
 3fc:	movw	r3, #0
 400:	movt	r3, #0
 404:	cmp	r0, #0
 408:	movne	r0, r2
 40c:	moveq	r0, r3
 410:	bl	0 <puts>
 414:	mov	r0, r6
 418:	add	sp, sp, #32
 41c:	ldrd	r4, [sp]
 420:	ldrd	r6, [sp, #8]
 424:	ldrd	r8, [sp, #16]
 428:	ldr	sl, [sp, #24]
 42c:	add	sp, sp, #28
 430:	pop	{pc}		; (ldr pc, [sp], #4)
 434:	mov	r1, r0
 438:	mov	r2, sp
 43c:	ldr	r0, [r3, #4]
 440:	bl	0 <coda_expression_eval_integer>
 444:	subs	r6, r0, #0
 448:	bne	5d8 <eval_expression+0x414>
 44c:	add	r2, sp, #8
 450:	ldrd	r0, [sp]
 454:	bl	0 <coda_str64>
 458:	add	r0, sp, #8
 45c:	bl	0 <puts>
 460:	b	414 <eval_expression+0x250>
 464:	mov	r1, r0
 468:	add	r2, sp, #8
 46c:	ldr	r0, [r3, #4]
 470:	bl	0 <coda_expression_eval_float>
 474:	subs	r6, r0, #0
 478:	bne	5b0 <eval_expression+0x3ec>
 47c:	movw	r0, #0
 480:	movt	r0, #0
 484:	ldrd	r2, [sp, #8]
 488:	bl	0 <printf>
 48c:	b	414 <eval_expression+0x250>
 490:	mov	r0, r8
 494:	bl	0 <printf>
 498:	cmp	r4, r7
 49c:	bne	26c <eval_expression+0xa8>
 4a0:	mov	r0, #10
 4a4:	bl	0 <putchar>
 4a8:	ldr	r0, [sp]
 4ac:	cmp	r0, #0
 4b0:	beq	414 <eval_expression+0x250>
 4b4:	bl	0 <free>
 4b8:	b	414 <eval_expression+0x250>
 4bc:	mov	r0, sl
 4c0:	bl	0 <printf>
 4c4:	b	498 <eval_expression+0x2d4>
 4c8:	movw	r0, #0
 4cc:	movt	r0, #0
 4d0:	bl	0 <printf>
 4d4:	b	498 <eval_expression+0x2d4>
 4d8:	movw	r0, #0
 4dc:	movt	r0, #0
 4e0:	bl	0 <printf>
 4e4:	b	498 <eval_expression+0x2d4>
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	bl	0 <printf>
 4f4:	b	498 <eval_expression+0x2d4>
 4f8:	movw	r0, #0
 4fc:	movt	r0, #0
 500:	bl	0 <printf>
 504:	b	498 <eval_expression+0x2d4>
 508:	movw	r0, #0
 50c:	movt	r0, #0
 510:	bl	0 <printf>
 514:	b	498 <eval_expression+0x2d4>
 518:	movw	r0, #0
 51c:	movt	r0, #0
 520:	bl	0 <printf>
 524:	b	498 <eval_expression+0x2d4>
 528:	movw	r0, #0
 52c:	movt	r0, #0
 530:	bl	0 <printf>
 534:	b	498 <eval_expression+0x2d4>
 538:	movw	r0, #0
 53c:	movt	r0, #0
 540:	bl	0 <printf>
 544:	b	498 <eval_expression+0x2d4>
 548:	bl	0 <__ctype_b_loc>
 54c:	ldr	r2, [r0]
 550:	lsl	r3, r5, #1
 554:	ldrh	r3, [r2, r3]
 558:	tst	r3, #16384	; 0x4000
 55c:	bne	584 <eval_expression+0x3c0>
 560:	mov	r1, r5
 564:	mov	r0, r9
 568:	bl	0 <printf>
 56c:	b	498 <eval_expression+0x2d4>
 570:	mov	r0, r4
 574:	bl	0 <strlen>
 578:	subs	r7, r0, #0
 57c:	bne	24c <eval_expression+0x88>
 580:	b	4a0 <eval_expression+0x2dc>
 584:	mov	r0, r5
 588:	bl	0 <putchar>
 58c:	b	498 <eval_expression+0x2d4>
 590:	movw	r3, #0
 594:	movt	r3, #0
 598:	movw	r1, #0
 59c:	movt	r1, #0
 5a0:	movw	r0, #0
 5a4:	movt	r0, #0
 5a8:	mov	r2, #230	; 0xe6
 5ac:	bl	0 <__assert_fail>
 5b0:	bl	0 <coda_get_errno>
 5b4:	ldr	r0, [r0]
 5b8:	mvn	r6, #0
 5bc:	bl	0 <coda_errno_to_string>
 5c0:	mov	r2, r0
 5c4:	movw	r1, #0
 5c8:	movt	r1, #0
 5cc:	mvn	r0, #400	; 0x190
 5d0:	bl	0 <coda_set_error>
 5d4:	b	414 <eval_expression+0x250>
 5d8:	bl	0 <coda_get_errno>
 5dc:	ldr	r0, [r0]
 5e0:	mvn	r6, #0
 5e4:	bl	0 <coda_errno_to_string>
 5e8:	mov	r2, r0
 5ec:	movw	r1, #0
 5f0:	movt	r1, #0
 5f4:	mvn	r0, #400	; 0x190
 5f8:	bl	0 <coda_set_error>
 5fc:	b	414 <eval_expression+0x250>
 600:	bl	0 <coda_get_errno>
 604:	ldr	r0, [r0]
 608:	mvn	r6, #0
 60c:	bl	0 <coda_errno_to_string>
 610:	mov	r2, r0
 614:	movw	r1, #0
 618:	movt	r1, #0
 61c:	mvn	r0, #400	; 0x190
 620:	bl	0 <coda_set_error>
 624:	b	414 <eval_expression+0x250>
 628:	bl	0 <coda_get_errno>
 62c:	ldr	r0, [r0]
 630:	mvn	r6, #0
 634:	bl	0 <coda_errno_to_string>
 638:	mov	r2, r0
 63c:	movw	r1, #0
 640:	movt	r1, #0
 644:	mvn	r0, #400	; 0x190
 648:	bl	0 <coda_set_error>
 64c:	b	414 <eval_expression+0x250>
 650:	mov	r6, #0
 654:	b	414 <eval_expression+0x250>

00000658 <eval_expression_for_file>:
 658:	mov	r3, #0
 65c:	strd	r4, [sp, #-12]!
 660:	mov	r5, r0
 664:	str	lr, [sp, #8]
 668:	sub	sp, sp, #532	; 0x214
 66c:	add	r1, sp, #4
 670:	str	r3, [sp, #4]
 674:	bl	0 <coda_open>
 678:	cmp	r0, #0
 67c:	movne	r4, #1
 680:	beq	698 <eval_expression_for_file+0x40>
 684:	mov	r0, r4
 688:	add	sp, sp, #532	; 0x214
 68c:	ldrd	r4, [sp]
 690:	add	sp, sp, #8
 694:	pop	{pc}		; (ldr pc, [sp], #4)
 698:	add	r0, sp, #8
 69c:	ldr	r1, [sp, #4]
 6a0:	bl	0 <coda_cursor_set_product>
 6a4:	subs	r4, r0, #0
 6a8:	bne	728 <eval_expression_for_file+0xd0>
 6ac:	movw	r3, #0
 6b0:	movt	r3, #0
 6b4:	ldr	r0, [r3, #8]
 6b8:	cmp	r0, #0
 6bc:	beq	6d0 <eval_expression_for_file+0x78>
 6c0:	add	r1, sp, #8
 6c4:	bl	0 <coda_expression_eval_node>
 6c8:	cmp	r0, #0
 6cc:	bne	738 <eval_expression_for_file+0xe0>
 6d0:	add	r0, sp, #8
 6d4:	bl	1c4 <eval_expression>
 6d8:	cmp	r0, #0
 6dc:	bne	6f4 <eval_expression_for_file+0x9c>
 6e0:	ldr	r0, [sp, #4]
 6e4:	bl	0 <coda_close>
 6e8:	adds	r4, r0, #0
 6ec:	movne	r4, #1
 6f0:	b	684 <eval_expression_for_file+0x2c>
 6f4:	movw	r3, #0
 6f8:	movt	r3, #0
 6fc:	ldr	r4, [r3]
 700:	bl	0 <coda_get_errno>
 704:	ldr	r0, [r0]
 708:	bl	0 <coda_errno_to_string>
 70c:	mov	r2, r0
 710:	mov	r3, r5
 714:	movw	r1, #0
 718:	movt	r1, #0
 71c:	mov	r0, r4
 720:	bl	0 <fprintf>
 724:	b	6e0 <eval_expression_for_file+0x88>
 728:	ldr	r0, [sp, #4]
 72c:	mov	r4, #1
 730:	bl	0 <coda_close>
 734:	b	684 <eval_expression_for_file+0x2c>
 738:	movw	r3, #0
 73c:	movt	r3, #0
 740:	ldr	r5, [r3]
 744:	bl	0 <coda_get_errno>
 748:	ldr	r0, [r0]
 74c:	bl	0 <coda_errno_to_string>
 750:	mov	r2, r0
 754:	movw	r1, #0
 758:	movt	r1, #0
 75c:	mov	r0, r5
 760:	bl	0 <fprintf>
 764:	ldr	r0, [sp, #4]
 768:	bl	0 <coda_close>
 76c:	b	684 <eval_expression_for_file+0x2c>

00000770 <callback>:
 770:	cmp	r1, #0
 774:	mov	ip, r0
 778:	str	r4, [sp, #-8]!
 77c:	str	lr, [sp, #4]
 780:	beq	7ac <callback+0x3c>
 784:	cmp	r1, #2
 788:	beq	808 <callback+0x98>
 78c:	cmp	r1, #1
 790:	beq	7d8 <callback+0x68>
 794:	cmp	r1, #4
 798:	beq	834 <callback+0xc4>
 79c:	ldr	r4, [sp]
 7a0:	add	sp, sp, #4
 7a4:	mov	r0, #0
 7a8:	pop	{pc}		; (ldr pc, [sp], #4)
 7ac:	movw	r0, #0
 7b0:	movt	r0, #0
 7b4:	mov	r3, ip
 7b8:	movw	r1, #0
 7bc:	movt	r1, #0
 7c0:	ldr	r0, [r0]
 7c4:	bl	0 <fprintf>
 7c8:	ldr	r4, [sp]
 7cc:	add	sp, sp, #4
 7d0:	mov	r0, #0
 7d4:	pop	{pc}		; (ldr pc, [sp], #4)
 7d8:	movw	r1, #0
 7dc:	movt	r1, #0
 7e0:	mov	r3, r2
 7e4:	mov	r2, r0
 7e8:	ldr	r0, [r1]
 7ec:	movw	r1, #0
 7f0:	movt	r1, #0
 7f4:	bl	0 <fprintf>
 7f8:	ldr	r4, [sp]
 7fc:	add	sp, sp, #4
 800:	mov	r0, #0
 804:	pop	{pc}		; (ldr pc, [sp], #4)
 808:	movw	r3, #0
 80c:	movt	r3, #0
 810:	mov	r2, r0
 814:	movw	r1, #0
 818:	movt	r1, #0
 81c:	ldr	r0, [r3]
 820:	bl	0 <fprintf>
 824:	ldr	r4, [sp]
 828:	add	sp, sp, #4
 82c:	mov	r0, #0
 830:	pop	{pc}		; (ldr pc, [sp], #4)
 834:	ldr	r4, [sp]
 838:	ldr	lr, [sp, #4]
 83c:	add	sp, sp, #8
 840:	b	658 <eval_expression_for_file>

Disassembly of section .text.startup:

00000000 <main>:
   0:	cmp	r0, #1
   4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   8:	strd	r6, [sp, #8]
   c:	strd	r8, [sp, #16]
  10:	strd	sl, [sp, #24]
  14:	str	lr, [sp, #32]
  18:	sub	sp, sp, #28
  1c:	beq	44 <main+0x44>
  20:	mov	r6, r1
  24:	mov	r5, r0
  28:	ldr	r4, [r6, #4]
  2c:	movw	r1, #0
  30:	movt	r1, #0
  34:	mov	r0, r4
  38:	bl	0 <strcmp>
  3c:	cmp	r0, #0
  40:	bne	50 <main+0x50>
  44:	bl	0 <main>
  48:	mov	r0, #0
  4c:	bl	0 <exit>
  50:	movw	r1, #0
  54:	movt	r1, #0
  58:	mov	r0, r4
  5c:	bl	0 <strcmp>
  60:	cmp	r0, #0
  64:	beq	44 <main+0x44>
  68:	movw	r1, #0
  6c:	movt	r1, #0
  70:	mov	r0, r4
  74:	bl	0 <strcmp>
  78:	cmp	r0, #0
  7c:	beq	1c8 <main+0x1c8>
  80:	movw	r1, #0
  84:	movt	r1, #0
  88:	mov	r0, r4
  8c:	bl	0 <strcmp>
  90:	cmp	r0, #0
  94:	beq	1c8 <main+0x1c8>
  98:	cmp	r5, #2
  9c:	ble	1f8 <main+0x1f8>
  a0:	mov	r0, r4
  a4:	movw	r1, #0
  a8:	movt	r1, #0
  ac:	bl	0 <strcmp>
  b0:	cmp	r0, #0
  b4:	beq	254 <main+0x254>
  b8:	movw	r2, #0
  bc:	movt	r2, #0
  c0:	ldr	r0, [r6]
  c4:	mov	r1, #0
  c8:	bl	0 <coda_set_definition_path_conditional>
  cc:	cmp	r0, #0
  d0:	bne	418 <main+0x418>
  d4:	mov	fp, #1
  d8:	movw	r3, #0
  dc:	movt	r3, #0
  e0:	movw	r8, #0
  e4:	movt	r8, #0
  e8:	str	r3, [sp, #12]
  ec:	mov	r3, #1
  f0:	movw	sl, #0
  f4:	movt	sl, #0
  f8:	mov	r9, #0
  fc:	str	r3, [sp, #16]
 100:	b	1a4 <main+0x1a4>
 104:	mov	r1, sl
 108:	mov	r0, r4
 10c:	bl	0 <strcmp>
 110:	cmp	r0, #0
 114:	beq	1c0 <main+0x1c0>
 118:	mov	r0, r4
 11c:	ldr	r1, [sp, #12]
 120:	bl	0 <strcmp>
 124:	cmp	r0, #0
 128:	beq	24c <main+0x24c>
 12c:	movw	r1, #0
 130:	movt	r1, #0
 134:	mov	r0, r4
 138:	bl	0 <strcmp>
 13c:	cmp	r0, #0
 140:	beq	24c <main+0x24c>
 144:	movw	r1, #0
 148:	movt	r1, #0
 14c:	mov	r0, r4
 150:	bl	0 <strcmp>
 154:	cmp	r0, #0
 158:	bne	264 <main+0x264>
 15c:	add	r2, fp, #1
 160:	cmp	r2, r5
 164:	str	r2, [sp, #20]
 168:	bge	264 <main+0x264>
 16c:	add	r7, r6, r7
 170:	ldr	r0, [r7, #4]
 174:	ldrb	r1, [r0]
 178:	cmp	r1, #45	; 0x2d
 17c:	beq	264 <main+0x264>
 180:	ldr	r1, [pc, #760]	; 480 <main+0x480>
 184:	bl	0 <coda_expression_from_string>
 188:	cmp	r0, #0
 18c:	ldr	r2, [sp, #20]
 190:	bne	44c <main+0x44c>
 194:	mov	fp, r2
 198:	add	fp, fp, #1
 19c:	cmp	r5, fp
 1a0:	ble	220 <main+0x220>
 1a4:	ldr	r4, [r6, fp, lsl #2]
 1a8:	mov	r1, r8
 1ac:	lsl	r7, fp, #2
 1b0:	mov	r0, r4
 1b4:	bl	0 <strcmp>
 1b8:	cmp	r0, #0
 1bc:	bne	104 <main+0x104>
 1c0:	mov	r9, #1
 1c4:	b	198 <main+0x198>
 1c8:	bl	0 <coda_get_libcoda_version>
 1cc:	mov	r1, r0
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	bl	0 <printf>
 1dc:	movw	r0, #0
 1e0:	movt	r0, #0
 1e4:	bl	0 <puts>
 1e8:	mov	r0, #10
 1ec:	bl	0 <putchar>
 1f0:	mov	r0, #0
 1f4:	bl	0 <exit>
 1f8:	movw	r2, #0
 1fc:	movt	r2, #0
 200:	ldr	r0, [r6]
 204:	mov	r1, #0
 208:	bl	0 <coda_set_definition_path_conditional>
 20c:	cmp	r0, #0
 210:	moveq	fp, #1
 214:	bne	418 <main+0x418>
 218:	cmp	fp, r5
 21c:	blt	d8 <main+0xd8>
 220:	movw	r3, #0
 224:	movt	r3, #0
 228:	mov	r2, #25
 22c:	mov	r1, #1
 230:	ldr	r3, [r3]
 234:	movw	r0, #0
 238:	movt	r0, #0
 23c:	bl	0 <fwrite>
 240:	bl	0 <main>
 244:	mov	r0, #1
 248:	bl	0 <exit>
 24c:	str	r0, [sp, #16]
 250:	b	198 <main+0x198>
 254:	ldr	r0, [r6, #8]
 258:	mov	fp, #3
 25c:	bl	0 <coda_set_definition_path>
 260:	b	218 <main+0x218>
 264:	ldrb	r2, [r4]
 268:	cmp	r2, #45	; 0x2d
 26c:	beq	220 <main+0x220>
 270:	movw	r7, #0
 274:	movt	r7, #0
 278:	mov	r0, r4
 27c:	add	r1, r7, #4
 280:	bl	0 <coda_expression_from_string>
 284:	cmp	r0, #0
 288:	bne	368 <main+0x368>
 28c:	mov	r1, r7
 290:	ldr	r0, [r7, #4]
 294:	add	fp, fp, #1
 298:	bl	0 <coda_expression_get_type>
 29c:	cmp	r0, #0
 2a0:	bne	418 <main+0x418>
 2a4:	ldr	r0, [r7]
 2a8:	sub	r3, r0, #4
 2ac:	cmp	r3, #1
 2b0:	bls	3c4 <main+0x3c4>
 2b4:	cmp	r9, #0
 2b8:	bne	2f0 <main+0x2f0>
 2bc:	cmp	r5, fp
 2c0:	bgt	328 <main+0x328>
 2c4:	ldr	r3, [r7, #8]
 2c8:	cmp	r3, #0
 2cc:	bne	3f0 <main+0x3f0>
 2d0:	ldr	r0, [r7, #4]
 2d4:	bl	0 <coda_expression_is_constant>
 2d8:	cmp	r0, #0
 2dc:	beq	39c <main+0x39c>
 2e0:	mov	r0, r9
 2e4:	bl	1c4 <main+0x1c4>
 2e8:	cmp	r0, #0
 2ec:	bne	418 <main+0x418>
 2f0:	ldr	r0, [r7, #4]
 2f4:	bl	0 <coda_expression_delete>
 2f8:	ldr	r0, [r7, #8]
 2fc:	cmp	r0, #0
 300:	beq	308 <main+0x308>
 304:	bl	0 <coda_expression_delete>
 308:	mov	r0, #0
 30c:	add	sp, sp, #28
 310:	ldrd	r4, [sp]
 314:	ldrd	r6, [sp, #8]
 318:	ldrd	r8, [sp, #16]
 31c:	ldrd	sl, [sp, #24]
 320:	add	sp, sp, #32
 324:	pop	{pc}		; (ldr pc, [sp], #4)
 328:	bl	0 <coda_init>
 32c:	cmp	r0, #0
 330:	bne	418 <main+0x418>
 334:	ldr	r0, [sp, #16]
 338:	bl	0 <coda_set_option_perform_conversions>
 33c:	add	r2, r6, fp, lsl #2
 340:	sub	r1, r5, fp
 344:	mov	r0, r9
 348:	movw	r3, #0
 34c:	movt	r3, #0
 350:	str	r9, [sp]
 354:	bl	0 <coda_match_filefilter>
 358:	cmp	r0, #0
 35c:	bne	418 <main+0x418>
 360:	bl	0 <coda_done>
 364:	b	2f0 <main+0x2f0>
 368:	movw	r3, #0
 36c:	movt	r3, #0
 370:	ldr	r4, [r3]
 374:	bl	0 <coda_get_errno>
 378:	ldr	r0, [r0]
 37c:	bl	0 <coda_errno_to_string>
 380:	mov	r2, r0
 384:	movw	r1, #0
 388:	movt	r1, #0
 38c:	mov	r0, r4
 390:	bl	0 <fprintf>
 394:	mov	r0, #1
 398:	bl	0 <exit>
 39c:	movw	r3, #0
 3a0:	movt	r3, #0
 3a4:	movw	r0, #0
 3a8:	movt	r0, #0
 3ac:	ldr	r3, [r3]
 3b0:	mov	r2, #111	; 0x6f
 3b4:	mov	r1, #1
 3b8:	bl	0 <fwrite>
 3bc:	mov	r0, #1
 3c0:	bl	0 <exit>
 3c4:	movw	r3, #0
 3c8:	movt	r3, #0
 3cc:	ldr	r4, [r3]
 3d0:	bl	0 <coda_expression_get_type_name>
 3d4:	mov	r2, r0
 3d8:	movw	r1, #0
 3dc:	movt	r1, #0
 3e0:	mov	r0, r4
 3e4:	bl	0 <fprintf>
 3e8:	mov	r0, #1
 3ec:	bl	0 <exit>
 3f0:	movw	r3, #0
 3f4:	movt	r3, #0
 3f8:	movw	r0, #0
 3fc:	movt	r0, #0
 400:	ldr	r3, [r3]
 404:	mov	r2, #96	; 0x60
 408:	mov	r1, #1
 40c:	bl	0 <fwrite>
 410:	mov	r0, #1
 414:	bl	0 <exit>
 418:	movw	r3, #0
 41c:	movt	r3, #0
 420:	ldr	r4, [r3]
 424:	bl	0 <coda_get_errno>
 428:	ldr	r0, [r0]
 42c:	bl	0 <coda_errno_to_string>
 430:	mov	r2, r0
 434:	movw	r1, #0
 438:	movt	r1, #0
 43c:	mov	r0, r4
 440:	bl	0 <fprintf>
 444:	mov	r0, #1
 448:	bl	0 <exit>
 44c:	movw	r3, #0
 450:	movt	r3, #0
 454:	ldr	r4, [r3]
 458:	bl	0 <coda_get_errno>
 45c:	ldr	r0, [r0]
 460:	bl	0 <coda_errno_to_string>
 464:	mov	r2, r0
 468:	movw	r1, #0
 46c:	movt	r1, #0
 470:	mov	r0, r4
 474:	bl	0 <fprintf>
 478:	mov	r0, #1
 47c:	bl	0 <exit>
 480:	.word	0x00000008
