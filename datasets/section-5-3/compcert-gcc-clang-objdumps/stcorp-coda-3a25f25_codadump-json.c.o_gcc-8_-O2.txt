
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	movw	r3, #0
   8:	movt	r3, #0
   c:	push	{lr}		; (str lr, [sp, #-4]!)
  10:	sub	sp, sp, #12
  14:	ldr	r1, [sp, #16]
  18:	add	ip, sp, #20
  1c:	mov	r2, ip
  20:	ldr	r0, [r3]
  24:	str	ip, [sp, #4]
  28:	bl	0 <vfprintf>
  2c:	add	sp, sp, #12
  30:	pop	{lr}		; (ldr lr, [sp], #4)
  34:	add	sp, sp, #16
  38:	bx	lr

0000003c <print_escaped>:
  3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
  40:	subs	r5, r1, #0
  44:	strd	r6, [sp, #8]
  48:	str	r8, [sp, #16]
  4c:	str	lr, [sp, #20]
  50:	ble	e8 <print_escaped+0xac>
  54:	sub	r4, r0, #1
  58:	movw	r6, #0
  5c:	movt	r6, #0
  60:	movw	r8, #0
  64:	movt	r8, #0
  68:	movw	r7, #0
  6c:	movt	r7, #0
  70:	add	r5, r4, r5
  74:	b	ac <print_escaped+0x70>
  78:	cmp	r1, #9
  7c:	beq	148 <print_escaped+0x10c>
  80:	cmp	r1, #10
  84:	beq	138 <print_escaped+0xfc>
  88:	cmp	r1, #8
  8c:	beq	128 <print_escaped+0xec>
  90:	sub	r3, r1, #32
  94:	cmp	r3, #94	; 0x5e
  98:	movls	r0, r7
  9c:	movhi	r0, r8
  a0:	bl	0 <ff_printf>
  a4:	cmp	r4, r5
  a8:	beq	e8 <print_escaped+0xac>
  ac:	ldrb	r1, [r4, #1]!
  b0:	cmp	r1, #12
  b4:	beq	fc <print_escaped+0xc0>
  b8:	bls	78 <print_escaped+0x3c>
  bc:	cmp	r1, #34	; 0x22
  c0:	beq	118 <print_escaped+0xdc>
  c4:	cmp	r1, #92	; 0x5c
  c8:	beq	108 <print_escaped+0xcc>
  cc:	cmp	r1, #13
  d0:	bne	90 <print_escaped+0x54>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	bl	0 <ff_printf>
  e0:	cmp	r4, r5
  e4:	bne	ac <print_escaped+0x70>
  e8:	ldrd	r4, [sp]
  ec:	ldrd	r6, [sp, #8]
  f0:	ldr	r8, [sp, #16]
  f4:	add	sp, sp, #20
  f8:	pop	{pc}		; (ldr pc, [sp], #4)
  fc:	mov	r0, r6
 100:	bl	0 <ff_printf>
 104:	b	a4 <print_escaped+0x68>
 108:	movw	r0, #0
 10c:	movt	r0, #0
 110:	bl	0 <ff_printf>
 114:	b	a4 <print_escaped+0x68>
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <ff_printf>
 124:	b	a4 <print_escaped+0x68>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	bl	0 <ff_printf>
 134:	b	a4 <print_escaped+0x68>
 138:	movw	r0, #0
 13c:	movt	r0, #0
 140:	bl	0 <ff_printf>
 144:	b	a4 <print_escaped+0x68>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <ff_printf>
 154:	b	a4 <print_escaped+0x68>

00000158 <print_data>:
 158:	movw	r3, #0
 15c:	movt	r3, #0
 160:	strd	r4, [sp, #-28]!	; 0xffffffe4
 164:	ldr	r3, [r3]
 168:	mov	r2, #0
 16c:	mov	r4, r0
 170:	strd	r6, [sp, #8]
 174:	strd	r8, [sp, #16]
 178:	str	lr, [sp, #24]
 17c:	sub	sp, sp, #76	; 0x4c
 180:	cmp	r3, r2
 184:	str	r2, [sp, #12]
 188:	bne	26c <print_data+0x114>
 18c:	add	r1, sp, #8
 190:	mov	r0, r4
 194:	bl	0 <coda_cursor_get_type_class>
 198:	cmp	r0, #0
 19c:	bne	264 <print_data+0x10c>
 1a0:	ldr	r3, [sp, #8]
 1a4:	cmp	r3, #6
 1a8:	ldrls	pc, [pc, r3, lsl #2]
 1ac:	b	240 <print_data+0xe8>
 1b0:	.word	0x00000308
 1b4:	.word	0x00000344
 1b8:	.word	0x000003b0
 1bc:	.word	0x000003b0
 1c0:	.word	0x000003b0
 1c4:	.word	0x000003b0
 1c8:	.word	0x000002d4
 1cc:	add	r1, sp, #40	; 0x28
 1d0:	mov	r0, r4
 1d4:	bl	0 <coda_cursor_get_string_length>
 1d8:	cmp	r0, #0
 1dc:	bne	968 <print_data+0x810>
 1e0:	ldr	r0, [sp, #40]	; 0x28
 1e4:	add	r0, r0, #1
 1e8:	bl	0 <malloc>
 1ec:	subs	r5, r0, #0
 1f0:	beq	9bc <print_data+0x864>
 1f4:	ldr	r2, [sp, #40]	; 0x28
 1f8:	mov	r0, r4
 1fc:	mov	r1, r5
 200:	add	r2, r2, #1
 204:	bl	0 <coda_cursor_read_string>
 208:	cmp	r0, #0
 20c:	bne	960 <print_data+0x808>
 210:	movw	r0, #0
 214:	movt	r0, #0
 218:	bl	0 <ff_printf>
 21c:	mov	r0, r5
 220:	ldr	r1, [sp, #40]	; 0x28
 224:	bl	3c <print_escaped>
 228:	movw	r0, #0
 22c:	movt	r0, #0
 230:	ldr	r1, [sp, #40]	; 0x28
 234:	bl	0 <ff_printf>
 238:	mov	r0, r5
 23c:	bl	0 <free>
 240:	ldr	r3, [sp, #12]
 244:	cmp	r3, #0
 248:	bne	2c4 <print_data+0x16c>
 24c:	add	sp, sp, #76	; 0x4c
 250:	ldrd	r4, [sp]
 254:	ldrd	r6, [sp, #8]
 258:	ldrd	r8, [sp, #16]
 25c:	add	sp, sp, #24
 260:	pop	{pc}		; (ldr pc, [sp], #4)
 264:	bl	0 <handle_coda_error>
 268:	b	1a0 <print_data+0x48>
 26c:	add	r1, sp, #12
 270:	bl	0 <coda_cursor_has_attributes>
 274:	cmp	r0, #0
 278:	bne	420 <print_data+0x2c8>
 27c:	ldr	r3, [sp, #12]
 280:	cmp	r3, #0
 284:	beq	18c <print_data+0x34>
 288:	movw	r0, #0
 28c:	movt	r0, #0
 290:	bl	0 <ff_printf>
 294:	mov	r0, r4
 298:	bl	0 <coda_cursor_goto_attributes>
 29c:	cmp	r0, #0
 2a0:	bne	898 <print_data+0x740>
 2a4:	mov	r0, r4
 2a8:	bl	158 <print_data>
 2ac:	mov	r0, r4
 2b0:	bl	0 <coda_cursor_goto_parent>
 2b4:	movw	r0, #0
 2b8:	movt	r0, #0
 2bc:	bl	0 <ff_printf>
 2c0:	b	18c <print_data+0x34>
 2c4:	movw	r0, #0
 2c8:	movt	r0, #0
 2cc:	bl	0 <ff_printf>
 2d0:	b	24c <print_data+0xf4>
 2d4:	add	r1, sp, #28
 2d8:	mov	r0, r4
 2dc:	bl	0 <coda_cursor_get_special_type>
 2e0:	cmp	r0, #0
 2e4:	bne	53c <print_data+0x3e4>
 2e8:	ldr	r3, [sp, #28]
 2ec:	cmp	r3, #3
 2f0:	ldrls	pc, [pc, r3, lsl #2]
 2f4:	b	240 <print_data+0xe8>
 2f8:	.word	0x00000410
 2fc:	.word	0x000005c0
 300:	.word	0x00000578
 304:	.word	0x00000544
 308:	movw	r0, #0
 30c:	movt	r0, #0
 310:	bl	0 <ff_printf>
 314:	add	r1, sp, #16
 318:	mov	r0, r4
 31c:	bl	0 <coda_cursor_get_num_elements>
 320:	cmp	r0, #0
 324:	bne	52c <print_data+0x3d4>
 328:	ldr	r3, [sp, #16]
 32c:	cmp	r3, #0
 330:	bgt	428 <print_data+0x2d0>
 334:	movw	r0, #0
 338:	movt	r0, #0
 33c:	bl	0 <ff_printf>
 340:	b	240 <print_data+0xe8>
 344:	movw	r0, #0
 348:	movt	r0, #0
 34c:	bl	0 <ff_printf>
 350:	add	r2, sp, #40	; 0x28
 354:	add	r1, sp, #32
 358:	mov	r0, r4
 35c:	bl	0 <coda_cursor_get_array_dim>
 360:	cmp	r0, #0
 364:	bne	534 <print_data+0x3dc>
 368:	ldr	r6, [sp, #32]
 36c:	cmp	r6, #0
 370:	blt	3a0 <print_data+0x248>
 374:	beq	80c <print_data+0x6b4>
 378:	add	r3, sp, #36	; 0x24
 37c:	mov	r5, #1
 380:	add	r1, r3, r6, lsl #2
 384:	ldr	r2, [r3, #4]!
 388:	cmp	r1, r3
 38c:	mul	r5, r2, r5
 390:	bne	384 <print_data+0x22c>
 394:	cmp	r5, #0
 398:	subgt	r6, r5, #1
 39c:	bgt	810 <print_data+0x6b8>
 3a0:	movw	r0, #0
 3a4:	movt	r0, #0
 3a8:	bl	0 <ff_printf>
 3ac:	b	240 <print_data+0xe8>
 3b0:	add	r1, sp, #28
 3b4:	mov	r0, r4
 3b8:	bl	0 <coda_cursor_get_read_type>
 3bc:	cmp	r0, #0
 3c0:	bne	524 <print_data+0x3cc>
 3c4:	ldr	r3, [sp, #28]
 3c8:	add	r3, r3, #1
 3cc:	cmp	r3, #13
 3d0:	ldrls	pc, [pc, r3, lsl #2]
 3d4:	b	240 <print_data+0xe8>
 3d8:	.word	0x00000410
 3dc:	.word	0x000007bc
 3e0:	.word	0x000007e4
 3e4:	.word	0x000007bc
 3e8:	.word	0x000007e4
 3ec:	.word	0x000007bc
 3f0:	.word	0x000007e4
 3f4:	.word	0x00000788
 3f8:	.word	0x000006c4
 3fc:	.word	0x0000068c
 400:	.word	0x0000068c
 404:	.word	0x0000064c
 408:	.word	0x000001cc
 40c:	.word	0x000006f8
 410:	movw	r0, #0
 414:	movt	r0, #0
 418:	bl	0 <ff_printf>
 41c:	b	240 <print_data+0xe8>
 420:	bl	0 <handle_coda_error>
 424:	b	27c <print_data+0x124>
 428:	add	r1, sp, #20
 42c:	mov	r0, r4
 430:	bl	0 <coda_cursor_get_type>
 434:	cmp	r0, #0
 438:	bne	8a8 <print_data+0x750>
 43c:	add	r1, sp, #24
 440:	ldr	r0, [sp, #20]
 444:	bl	0 <coda_type_get_record_union_status>
 448:	cmp	r0, #0
 44c:	bne	8a0 <print_data+0x748>
 450:	ldr	r5, [sp, #24]
 454:	cmp	r5, #0
 458:	bne	5e8 <print_data+0x490>
 45c:	mov	r0, r4
 460:	bl	0 <coda_cursor_goto_first_record_field>
 464:	cmp	r0, #0
 468:	bne	8d4 <print_data+0x77c>
 46c:	ldr	r3, [sp, #16]
 470:	mov	r2, #0
 474:	str	r2, [sp, #28]
 478:	cmp	r3, r2
 47c:	ble	518 <print_data+0x3c0>
 480:	movw	r8, #0
 484:	movt	r8, #0
 488:	movw	r9, #0
 48c:	movt	r9, #0
 490:	mov	r7, #1
 494:	add	r6, sp, #40	; 0x28
 498:	mov	r1, r5
 49c:	mov	r2, r6
 4a0:	ldr	r0, [sp, #20]
 4a4:	bl	0 <coda_type_get_record_field_hidden_status>
 4a8:	cmp	r0, #0
 4ac:	bne	874 <print_data+0x71c>
 4b0:	ldr	r3, [sp, #40]	; 0x28
 4b4:	cmp	r3, #0
 4b8:	bne	4f4 <print_data+0x39c>
 4bc:	cmp	r7, #0
 4c0:	beq	8b8 <print_data+0x760>
 4c4:	add	r2, sp, #32
 4c8:	ldr	r0, [sp, #20]
 4cc:	ldr	r1, [sp, #28]
 4d0:	bl	0 <coda_type_get_record_field_name>
 4d4:	cmp	r0, #0
 4d8:	bne	8b0 <print_data+0x758>
 4dc:	mov	r0, r8
 4e0:	ldr	r1, [sp, #32]
 4e4:	mov	r7, #0
 4e8:	bl	0 <ff_printf>
 4ec:	mov	r0, r4
 4f0:	bl	158 <print_data>
 4f4:	ldr	r3, [sp, #16]
 4f8:	ldr	r5, [sp, #28]
 4fc:	sub	r2, r3, #1
 500:	cmp	r2, r5
 504:	bgt	87c <print_data+0x724>
 508:	add	r5, r5, #1
 50c:	cmp	r5, r3
 510:	str	r5, [sp, #28]
 514:	blt	498 <print_data+0x340>
 518:	mov	r0, r4
 51c:	bl	0 <coda_cursor_goto_parent>
 520:	b	334 <print_data+0x1dc>
 524:	bl	0 <handle_coda_error>
 528:	b	3c4 <print_data+0x26c>
 52c:	bl	0 <handle_coda_error>
 530:	b	328 <print_data+0x1d0>
 534:	bl	0 <handle_coda_error>
 538:	b	368 <print_data+0x210>
 53c:	bl	0 <handle_coda_error>
 540:	b	2e8 <print_data+0x190>
 544:	mov	r0, r4
 548:	add	r2, sp, #40	; 0x28
 54c:	add	r1, sp, #32
 550:	bl	0 <coda_cursor_read_complex_double_split>
 554:	cmp	r0, #0
 558:	bne	8f4 <print_data+0x79c>
 55c:	movw	r0, #0
 560:	movt	r0, #0
 564:	ldrd	r2, [sp, #32]
 568:	ldrd	r4, [sp, #40]	; 0x28
 56c:	strd	r4, [sp]
 570:	bl	0 <ff_printf>
 574:	b	240 <print_data+0xe8>
 578:	mov	r0, r4
 57c:	add	r1, sp, #32
 580:	bl	0 <coda_cursor_read_double>
 584:	cmp	r0, #0
 588:	bne	8fc <print_data+0x7a4>
 58c:	vldr	d0, [sp, #32]
 590:	bl	0 <coda_isNaN>
 594:	cmp	r0, #0
 598:	bne	5ac <print_data+0x454>
 59c:	vldr	d0, [sp, #32]
 5a0:	bl	0 <coda_isInf>
 5a4:	cmp	r0, #0
 5a8:	beq	91c <print_data+0x7c4>
 5ac:	movw	r0, #0
 5b0:	movt	r0, #0
 5b4:	ldrd	r2, [sp, #32]
 5b8:	bl	0 <ff_printf>
 5bc:	b	240 <print_data+0xe8>
 5c0:	mov	r0, r4
 5c4:	add	r1, sp, #40	; 0x28
 5c8:	bl	0 <coda_cursor_read_double>
 5cc:	cmp	r0, #0
 5d0:	bne	904 <print_data+0x7ac>
 5d4:	movw	r0, #0
 5d8:	movt	r0, #0
 5dc:	ldrd	r2, [sp, #40]	; 0x28
 5e0:	bl	0 <ff_printf>
 5e4:	b	240 <print_data+0xe8>
 5e8:	add	r1, sp, #28
 5ec:	mov	r0, r4
 5f0:	bl	0 <coda_cursor_get_available_union_field_index>
 5f4:	cmp	r0, #0
 5f8:	bne	8ec <print_data+0x794>
 5fc:	add	r2, sp, #40	; 0x28
 600:	ldr	r0, [sp, #20]
 604:	ldr	r1, [sp, #28]
 608:	bl	0 <coda_type_get_record_field_name>
 60c:	cmp	r0, #0
 610:	bne	8e4 <print_data+0x78c>
 614:	mov	r0, r4
 618:	ldr	r1, [sp, #28]
 61c:	bl	0 <coda_cursor_goto_record_field_by_index>
 620:	cmp	r0, #0
 624:	bne	8dc <print_data+0x784>
 628:	movw	r0, #0
 62c:	movt	r0, #0
 630:	ldr	r1, [sp, #40]	; 0x28
 634:	bl	0 <ff_printf>
 638:	mov	r0, r4
 63c:	bl	158 <print_data>
 640:	mov	r0, r4
 644:	bl	0 <coda_cursor_goto_parent>
 648:	b	334 <print_data+0x1dc>
 64c:	add	r6, sp, #40	; 0x28
 650:	mov	r0, r4
 654:	mov	r1, r6
 658:	bl	0 <coda_cursor_read_char>
 65c:	cmp	r0, #0
 660:	bne	948 <print_data+0x7f0>
 664:	movw	r0, #0
 668:	movt	r0, #0
 66c:	bl	0 <ff_printf>
 670:	mov	r0, r6
 674:	mov	r1, #1
 678:	bl	3c <print_escaped>
 67c:	movw	r0, #0
 680:	movt	r0, #0
 684:	bl	0 <ff_printf>
 688:	b	240 <print_data+0xe8>
 68c:	mov	r0, r4
 690:	add	r1, sp, #40	; 0x28
 694:	bl	0 <coda_cursor_read_double>
 698:	cmp	r0, #0
 69c:	bne	950 <print_data+0x7f8>
 6a0:	ldr	r1, [sp, #28]
 6a4:	ldrd	r2, [sp, #40]	; 0x28
 6a8:	cmp	r1, #8
 6ac:	movweq	r0, #0
 6b0:	movwne	r0, #0
 6b4:	movteq	r0, #0
 6b8:	movtne	r0, #0
 6bc:	bl	0 <ff_printf>
 6c0:	b	240 <print_data+0xe8>
 6c4:	mov	r0, r4
 6c8:	add	r1, sp, #32
 6cc:	bl	0 <coda_cursor_read_uint64>
 6d0:	cmp	r0, #0
 6d4:	bne	914 <print_data+0x7bc>
 6d8:	add	r2, sp, #40	; 0x28
 6dc:	ldrd	r0, [sp, #32]
 6e0:	bl	0 <coda_str64u>
 6e4:	add	r1, sp, #40	; 0x28
 6e8:	movw	r0, #0
 6ec:	movt	r0, #0
 6f0:	bl	0 <ff_printf>
 6f4:	b	240 <print_data+0xe8>
 6f8:	add	r1, sp, #40	; 0x28
 6fc:	mov	r0, r4
 700:	bl	0 <coda_cursor_get_bit_size>
 704:	cmp	r0, #0
 708:	bne	970 <print_data+0x818>
 70c:	ldr	r5, [sp, #40]	; 0x28
 710:	ldr	r8, [sp, #44]	; 0x2c
 714:	lsr	r2, r5, #3
 718:	ands	r1, r5, #7
 71c:	movne	r1, #1
 720:	orr	r2, r2, r8, lsl #29
 724:	adds	r6, r2, r1
 728:	mov	r0, r6
 72c:	bl	0 <malloc>
 730:	subs	r9, r0, #0
 734:	beq	988 <print_data+0x830>
 738:	mov	r0, r4
 73c:	mov	r1, r9
 740:	stm	sp, {r5, r8}
 744:	mov	r2, #0
 748:	mov	r3, #0
 74c:	bl	0 <coda_cursor_read_bits>
 750:	cmp	r0, #0
 754:	bne	978 <print_data+0x820>
 758:	movw	r0, #0
 75c:	movt	r0, #0
 760:	bl	0 <ff_printf>
 764:	mov	r1, r6
 768:	mov	r0, r9
 76c:	bl	3c <print_escaped>
 770:	movw	r0, #0
 774:	movt	r0, #0
 778:	bl	0 <ff_printf>
 77c:	mov	r0, r9
 780:	bl	0 <free>
 784:	b	240 <print_data+0xe8>
 788:	mov	r0, r4
 78c:	add	r1, sp, #32
 790:	bl	0 <coda_cursor_read_int64>
 794:	cmp	r0, #0
 798:	bne	90c <print_data+0x7b4>
 79c:	add	r2, sp, #40	; 0x28
 7a0:	ldrd	r0, [sp, #32]
 7a4:	bl	0 <coda_str64>
 7a8:	add	r1, sp, #40	; 0x28
 7ac:	movw	r0, #0
 7b0:	movt	r0, #0
 7b4:	bl	0 <ff_printf>
 7b8:	b	240 <print_data+0xe8>
 7bc:	mov	r0, r4
 7c0:	add	r1, sp, #40	; 0x28
 7c4:	bl	0 <coda_cursor_read_int32>
 7c8:	cmp	r0, #0
 7cc:	bne	980 <print_data+0x828>
 7d0:	movw	r0, #0
 7d4:	movt	r0, #0
 7d8:	ldr	r1, [sp, #40]	; 0x28
 7dc:	bl	0 <ff_printf>
 7e0:	b	240 <print_data+0xe8>
 7e4:	mov	r0, r4
 7e8:	add	r1, sp, #40	; 0x28
 7ec:	bl	0 <coda_cursor_read_uint32>
 7f0:	cmp	r0, #0
 7f4:	bne	958 <print_data+0x800>
 7f8:	movw	r0, #0
 7fc:	movt	r0, #0
 800:	ldr	r1, [sp, #40]	; 0x28
 804:	bl	0 <ff_printf>
 808:	b	240 <print_data+0xe8>
 80c:	mov	r5, #1
 810:	mov	r0, r4
 814:	bl	0 <coda_cursor_goto_first_array_element>
 818:	cmp	r0, #0
 81c:	bne	8c4 <print_data+0x76c>
 820:	movw	r8, #0
 824:	movt	r8, #0
 828:	mov	r7, #0
 82c:	mov	r0, r4
 830:	bl	158 <print_data>
 834:	cmp	r7, r6
 838:	mov	r0, r8
 83c:	add	r7, r7, #1
 840:	blt	858 <print_data+0x700>
 844:	cmp	r5, r7
 848:	bgt	82c <print_data+0x6d4>
 84c:	mov	r0, r4
 850:	bl	0 <coda_cursor_goto_parent>
 854:	b	3a0 <print_data+0x248>
 858:	bl	0 <ff_printf>
 85c:	mov	r0, r4
 860:	bl	0 <coda_cursor_goto_next_array_element>
 864:	cmp	r0, #0
 868:	beq	844 <print_data+0x6ec>
 86c:	bl	0 <handle_coda_error>
 870:	b	844 <print_data+0x6ec>
 874:	bl	0 <handle_coda_error>
 878:	b	4b0 <print_data+0x358>
 87c:	mov	r0, r4
 880:	bl	0 <coda_cursor_goto_next_record_field>
 884:	cmp	r0, #0
 888:	bne	8cc <print_data+0x774>
 88c:	ldr	r3, [sp, #16]
 890:	ldr	r5, [sp, #28]
 894:	b	508 <print_data+0x3b0>
 898:	bl	0 <handle_coda_error>
 89c:	b	2a4 <print_data+0x14c>
 8a0:	bl	0 <handle_coda_error>
 8a4:	b	450 <print_data+0x2f8>
 8a8:	bl	0 <handle_coda_error>
 8ac:	b	43c <print_data+0x2e4>
 8b0:	bl	0 <handle_coda_error>
 8b4:	b	4dc <print_data+0x384>
 8b8:	mov	r0, r9
 8bc:	bl	0 <ff_printf>
 8c0:	b	4c4 <print_data+0x36c>
 8c4:	bl	0 <handle_coda_error>
 8c8:	b	820 <print_data+0x6c8>
 8cc:	bl	0 <handle_coda_error>
 8d0:	b	88c <print_data+0x734>
 8d4:	bl	0 <handle_coda_error>
 8d8:	b	46c <print_data+0x314>
 8dc:	bl	0 <handle_coda_error>
 8e0:	b	628 <print_data+0x4d0>
 8e4:	bl	0 <handle_coda_error>
 8e8:	b	614 <print_data+0x4bc>
 8ec:	bl	0 <handle_coda_error>
 8f0:	b	5fc <print_data+0x4a4>
 8f4:	bl	0 <handle_coda_error>
 8f8:	b	55c <print_data+0x404>
 8fc:	bl	0 <handle_coda_error>
 900:	b	58c <print_data+0x434>
 904:	bl	0 <handle_coda_error>
 908:	b	5d4 <print_data+0x47c>
 90c:	bl	0 <handle_coda_error>
 910:	b	79c <print_data+0x644>
 914:	bl	0 <handle_coda_error>
 918:	b	6d8 <print_data+0x580>
 91c:	movw	r0, #0
 920:	movt	r0, #0
 924:	vldr	d0, [sp, #32]
 928:	add	r1, sp, #40	; 0x28
 92c:	bl	0 <coda_time_double_to_string>
 930:	cmp	r0, #0
 934:	beq	9ec <print_data+0x894>
 938:	movw	r0, #0
 93c:	movt	r0, #0
 940:	bl	0 <ff_printf>
 944:	b	240 <print_data+0xe8>
 948:	bl	0 <handle_coda_error>
 94c:	b	664 <print_data+0x50c>
 950:	bl	0 <handle_coda_error>
 954:	b	6a0 <print_data+0x548>
 958:	bl	0 <handle_coda_error>
 95c:	b	7f8 <print_data+0x6a0>
 960:	bl	0 <handle_coda_error>
 964:	b	210 <print_data+0xb8>
 968:	bl	0 <handle_coda_error>
 96c:	b	1e0 <print_data+0x88>
 970:	bl	0 <handle_coda_error>
 974:	b	70c <print_data+0x5b4>
 978:	bl	0 <handle_coda_error>
 97c:	b	758 <print_data+0x600>
 980:	bl	0 <handle_coda_error>
 984:	b	7d0 <print_data+0x678>
 988:	movw	r0, #334	; 0x14e
 98c:	mov	r2, r6
 990:	movw	r3, #0
 994:	movt	r3, #0
 998:	movw	r1, #0
 99c:	movt	r1, #0
 9a0:	str	r0, [sp]
 9a4:	mvn	r0, #0
 9a8:	bl	0 <coda_set_error>
 9ac:	bl	0 <handle_coda_error>
 9b0:	ldr	r5, [sp, #40]	; 0x28
 9b4:	ldr	r8, [sp, #44]	; 0x2c
 9b8:	b	738 <print_data+0x5e0>
 9bc:	ldr	r2, [sp, #40]	; 0x28
 9c0:	movw	r0, #303	; 0x12f
 9c4:	movw	r3, #0
 9c8:	movt	r3, #0
 9cc:	movw	r1, #0
 9d0:	movt	r1, #0
 9d4:	str	r0, [sp]
 9d8:	mvn	r0, #0
 9dc:	add	r2, r2, #1
 9e0:	bl	0 <coda_set_error>
 9e4:	bl	0 <handle_coda_error>
 9e8:	b	1f4 <print_data+0x9c>
 9ec:	add	r1, sp, #40	; 0x28
 9f0:	movw	r0, #0
 9f4:	movt	r0, #0
 9f8:	bl	0 <ff_printf>
 9fc:	b	240 <print_data+0xe8>

00000a00 <print_json_data>:
 a00:	movw	r3, #0
 a04:	movt	r3, #0
 a08:	str	r4, [sp, #-8]!
 a0c:	movw	r4, #0
 a10:	movt	r4, #0
 a14:	str	lr, [sp, #4]
 a18:	sub	sp, sp, #528	; 0x210
 a1c:	str	r0, [r3]
 a20:	add	r1, sp, #4
 a24:	ldr	r0, [r4]
 a28:	bl	0 <coda_open>
 a2c:	cmp	r0, #0
 a30:	bne	aa8 <print_json_data+0xa8>
 a34:	add	r0, sp, #8
 a38:	ldr	r1, [sp, #4]
 a3c:	bl	0 <coda_cursor_set_product>
 a40:	cmp	r0, #0
 a44:	bne	aa0 <print_json_data+0xa0>
 a48:	movw	r3, #0
 a4c:	movt	r3, #0
 a50:	ldr	r1, [r3]
 a54:	cmp	r1, #0
 a58:	beq	a6c <print_json_data+0x6c>
 a5c:	add	r0, sp, #8
 a60:	bl	0 <coda_cursor_goto>
 a64:	cmp	r0, #0
 a68:	bne	ac0 <print_json_data+0xc0>
 a6c:	mov	r0, #0
 a70:	bl	0 <coda_set_option_perform_boundary_checks>
 a74:	add	r0, sp, #8
 a78:	bl	158 <print_data>
 a7c:	movw	r0, #0
 a80:	movt	r0, #0
 a84:	bl	0 <ff_printf>
 a88:	ldr	r0, [sp, #4]
 a8c:	bl	0 <coda_close>
 a90:	add	sp, sp, #528	; 0x210
 a94:	ldr	r4, [sp]
 a98:	add	sp, sp, #4
 a9c:	pop	{pc}		; (ldr pc, [sp], #4)
 aa0:	bl	0 <handle_coda_error>
 aa4:	b	a48 <print_json_data+0x48>
 aa8:	bl	0 <coda_get_errno>
 aac:	ldr	r3, [r0]
 ab0:	cmn	r3, #21
 ab4:	beq	ac8 <print_json_data+0xc8>
 ab8:	bl	0 <handle_coda_error>
 abc:	b	a34 <print_json_data+0x34>
 ac0:	bl	0 <handle_coda_error>
 ac4:	b	a6c <print_json_data+0x6c>
 ac8:	mov	r0, #0
 acc:	bl	0 <coda_set_option_use_mmap>
 ad0:	add	r1, sp, #4
 ad4:	ldr	r0, [r4]
 ad8:	bl	0 <coda_open>
 adc:	mov	r4, r0
 ae0:	mov	r0, #1
 ae4:	bl	0 <coda_set_option_use_mmap>
 ae8:	cmp	r4, #0
 aec:	bne	ab8 <print_json_data+0xb8>
 af0:	b	a34 <print_json_data+0x34>
