
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #96	; 0x60
   c:	str	r0, [fp, #-80]	; 0xffffffb0
  10:	strd	r2, [fp, #-92]	; 0xffffffa4
  14:	ldr	r3, [fp, #-80]	; 0xffffffb0
  18:	ldr	r3, [r3, #48]	; 0x30
  1c:	cmp	r3, #0
  20:	beq	fc <read_bytes+0xfc>
  24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
  28:	ldrd	r2, [fp, #4]
  2c:	adds	r2, r2, r0
  30:	adc	r3, r3, r1
  34:	ldr	r1, [fp, #-80]	; 0xffffffb0
  38:	ldrd	r0, [r1, #40]	; 0x28
  3c:	cmp	r3, r1
  40:	cmpeq	r2, r0
  44:	bls	d8 <read_bytes+0xd8>
  48:	ldr	r3, [fp, #-80]	; 0xffffffb0
  4c:	ldr	r3, [r3, #16]
  50:	cmp	r3, #0
  54:	beq	68 <read_bytes+0x68>
  58:	ldr	r3, [fp, #-80]	; 0xffffffb0
  5c:	ldr	r3, [r3, #16]
  60:	cmp	r3, #1
  64:	bne	7c <read_bytes+0x7c>
  68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
  6c:	mvn	r0, #300	; 0x12c
  70:	bl	0 <coda_set_error>
  74:	mvn	r3, #0
  78:	b	1c0 <read_bytes+0x1c0>
  7c:	sub	r3, fp, #28
  80:	mov	r2, r3
  84:	ldrd	r0, [fp, #4]
  88:	bl	0 <coda_str64>
  8c:	sub	r3, fp, #52	; 0x34
  90:	mov	r2, r3
  94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
  98:	bl	0 <coda_str64>
  9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
  a0:	ldrd	r0, [r3, #40]	; 0x28
  a4:	sub	r3, fp, #76	; 0x4c
  a8:	mov	r2, r3
  ac:	bl	0 <coda_str64>
  b0:	sub	r1, fp, #52	; 0x34
  b4:	sub	r2, fp, #28
  b8:	sub	r3, fp, #76	; 0x4c
  bc:	str	r3, [sp]
  c0:	mov	r3, r1
  c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
  c8:	mvn	r0, #300	; 0x12c
  cc:	bl	0 <coda_set_error>
  d0:	mvn	r3, #0
  d4:	b	1c0 <read_bytes+0x1c0>
  d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
  dc:	ldr	r2, [r3, #48]	; 0x30
  e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
  e4:	add	r3, r2, r3
  e8:	ldr	r2, [fp, #4]
  ec:	mov	r1, r3
  f0:	ldr	r0, [fp, #12]
  f4:	bl	0 <memcpy>
  f8:	b	1bc <read_bytes+0x1bc>
  fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
 100:	ldr	r3, [r3, #16]
 104:	cmp	r3, #0
 108:	beq	130 <read_bytes+0x130>
 10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
 110:	ldr	r3, [r3, #16]
 114:	cmp	r3, #1
 118:	beq	130 <read_bytes+0x130>
 11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
 120:	mov	r2, #83	; 0x53
 124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
 128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
 12c:	bl	0 <__assert_fail>
 130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
 134:	ldrd	r2, [fp, #4]
 138:	adds	r2, r2, r0
 13c:	adc	r3, r3, r1
 140:	ldr	r1, [fp, #-80]	; 0xffffffb0
 144:	ldrd	r0, [r1, #8]
 148:	cmp	r3, r1
 14c:	cmpeq	r2, r0
 150:	bls	168 <read_bytes+0x168>
 154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
 158:	mvn	r0, #300	; 0x12c
 15c:	bl	0 <coda_set_error>
 160:	mvn	r3, #0
 164:	b	1c0 <read_bytes+0x1c0>
 168:	ldr	r3, [fp, #-80]	; 0xffffffb0
 16c:	ldr	r0, [r3, #56]	; 0x38
 170:	ldr	r2, [fp, #4]
 174:	ldr	r3, [fp, #-92]	; 0xffffffa4
 178:	ldr	r1, [fp, #12]
 17c:	bl	0 <pread>
 180:	mov	r3, r0
 184:	cmp	r3, #0
 188:	bge	1bc <read_bytes+0x1bc>
 18c:	bl	0 <__errno_location>
 190:	mov	r3, r0
 194:	ldr	r3, [r3]
 198:	mov	r0, r3
 19c:	bl	0 <strerror>
 1a0:	mov	r3, r0
 1a4:	mov	r2, r3
 1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
 1ac:	mvn	r0, #21
 1b0:	bl	0 <coda_set_error>
 1b4:	mvn	r3, #0
 1b8:	b	1c0 <read_bytes+0x1c0>
 1bc:	mov	r3, #0
 1c0:	mov	r0, r3
 1c4:	sub	sp, fp, #4
 1c8:	pop	{fp, pc}
 1cc:	.word	0x00000000
 1d0:	.word	0x0000002c
 1d4:	.word	0x00000320
 1d8:	.word	0x00000068
 1dc:	.word	0x000000b8
 1e0:	.word	0x00000108

000001e4 <coda_ascii_reopen_with_definition>:
 1e4:	push	{fp, lr}
 1e8:	add	fp, sp, #4
 1ec:	sub	sp, sp, #24
 1f0:	str	r0, [fp, #-16]
 1f4:	str	r1, [fp, #-20]	; 0xffffffec
 1f8:	ldr	r3, [fp, #-20]	; 0xffffffec
 1fc:	cmp	r3, #0
 200:	bne	218 <coda_ascii_reopen_with_definition+0x34>
 204:	ldr	r3, [pc, #576]	; 44c <coda_ascii_reopen_with_definition+0x268>
 208:	mov	r2, #52	; 0x34
 20c:	ldr	r1, [pc, #572]	; 450 <coda_ascii_reopen_with_definition+0x26c>
 210:	ldr	r0, [pc, #572]	; 454 <coda_ascii_reopen_with_definition+0x270>
 214:	bl	0 <__assert_fail>
 218:	ldr	r3, [fp, #-16]
 21c:	ldr	r3, [r3]
 220:	ldr	r3, [r3, #16]
 224:	cmp	r3, #1
 228:	beq	240 <coda_ascii_reopen_with_definition+0x5c>
 22c:	ldr	r3, [pc, #536]	; 44c <coda_ascii_reopen_with_definition+0x268>
 230:	mov	r2, #53	; 0x35
 234:	ldr	r1, [pc, #532]	; 450 <coda_ascii_reopen_with_definition+0x26c>
 238:	ldr	r0, [pc, #536]	; 458 <coda_ascii_reopen_with_definition+0x274>
 23c:	bl	0 <__assert_fail>
 240:	ldr	r3, [fp, #-20]	; 0xffffffec
 244:	ldr	r3, [r3]
 248:	cmp	r3, #0
 24c:	beq	264 <coda_ascii_reopen_with_definition+0x80>
 250:	ldr	r3, [pc, #500]	; 44c <coda_ascii_reopen_with_definition+0x268>
 254:	mov	r2, #54	; 0x36
 258:	ldr	r1, [pc, #496]	; 450 <coda_ascii_reopen_with_definition+0x26c>
 25c:	ldr	r0, [pc, #504]	; 45c <coda_ascii_reopen_with_definition+0x278>
 260:	bl	0 <__assert_fail>
 264:	mov	r0, #80	; 0x50
 268:	bl	0 <malloc>
 26c:	mov	r3, r0
 270:	str	r3, [fp, #-8]
 274:	ldr	r3, [fp, #-8]
 278:	cmp	r3, #0
 27c:	bne	2a4 <coda_ascii_reopen_with_definition+0xc0>
 280:	mov	r3, #61	; 0x3d
 284:	str	r3, [sp]
 288:	ldr	r3, [pc, #448]	; 450 <coda_ascii_reopen_with_definition+0x26c>
 28c:	mov	r2, #80	; 0x50
 290:	ldr	r1, [pc, #456]	; 460 <coda_ascii_reopen_with_definition+0x27c>
 294:	mvn	r0, #0
 298:	bl	0 <coda_set_error>
 29c:	mvn	r3, #0
 2a0:	b	440 <coda_ascii_reopen_with_definition+0x25c>
 2a4:	ldr	r3, [fp, #-8]
 2a8:	mov	r2, #0
 2ac:	str	r2, [r3]
 2b0:	ldr	r3, [fp, #-16]
 2b4:	ldr	r3, [r3]
 2b8:	ldrd	r2, [r3, #8]
 2bc:	ldr	r1, [fp, #-8]
 2c0:	strd	r2, [r1, #8]
 2c4:	ldr	r3, [fp, #-20]	; 0xffffffec
 2c8:	ldr	r2, [r3]
 2cc:	ldr	r3, [fp, #-8]
 2d0:	str	r2, [r3, #16]
 2d4:	ldr	r3, [fp, #-20]	; 0xffffffec
 2d8:	ldr	r2, [r3, #28]
 2dc:	ldr	r3, [fp, #-8]
 2e0:	str	r2, [r3, #20]
 2e4:	ldr	r3, [fp, #-8]
 2e8:	ldr	r2, [fp, #-20]	; 0xffffffec
 2ec:	str	r2, [r3, #24]
 2f0:	ldr	r3, [fp, #-8]
 2f4:	mov	r2, #0
 2f8:	str	r2, [r3, #28]
 2fc:	ldr	r3, [fp, #-8]
 300:	mov	r2, #0
 304:	str	r2, [r3, #32]
 308:	ldr	r3, [fp, #-16]
 30c:	ldr	r3, [r3]
 310:	ldrd	r2, [r3, #40]	; 0x28
 314:	ldr	r1, [fp, #-8]
 318:	strd	r2, [r1, #40]	; 0x28
 31c:	ldr	r3, [fp, #-16]
 320:	ldr	r1, [r3]
 324:	mov	r2, #0
 328:	mov	r3, #0
 32c:	strd	r2, [r1, #40]	; 0x28
 330:	ldr	r3, [fp, #-16]
 334:	ldr	r3, [r3]
 338:	ldr	r2, [r3, #48]	; 0x30
 33c:	ldr	r3, [fp, #-8]
 340:	str	r2, [r3, #48]	; 0x30
 344:	ldr	r3, [fp, #-16]
 348:	ldr	r3, [r3]
 34c:	mov	r2, #0
 350:	str	r2, [r3, #48]	; 0x30
 354:	ldr	r3, [fp, #-16]
 358:	ldr	r3, [r3]
 35c:	ldr	r2, [r3, #52]	; 0x34
 360:	ldr	r3, [fp, #-8]
 364:	str	r2, [r3, #52]	; 0x34
 368:	ldr	r3, [fp, #-16]
 36c:	ldr	r3, [r3]
 370:	ldr	r2, [r3, #56]	; 0x38
 374:	ldr	r3, [fp, #-8]
 378:	str	r2, [r3, #56]	; 0x38
 37c:	ldr	r3, [fp, #-16]
 380:	ldr	r3, [r3]
 384:	mvn	r2, #0
 388:	str	r2, [r3, #56]	; 0x38
 38c:	ldr	r3, [fp, #-8]
 390:	mov	r2, #0
 394:	str	r2, [r3, #60]	; 0x3c
 398:	ldr	r3, [fp, #-8]
 39c:	mvn	r2, #0
 3a0:	str	r2, [r3, #64]	; 0x40
 3a4:	ldr	r3, [fp, #-8]
 3a8:	mov	r2, #0
 3ac:	str	r2, [r3, #68]	; 0x44
 3b0:	ldr	r3, [fp, #-8]
 3b4:	mov	r2, #0
 3b8:	str	r2, [r3, #72]	; 0x48
 3bc:	ldr	r3, [fp, #-8]
 3c0:	mov	r2, #0
 3c4:	str	r2, [r3, #76]	; 0x4c
 3c8:	ldr	r3, [fp, #-16]
 3cc:	ldr	r3, [r3]
 3d0:	ldr	r3, [r3]
 3d4:	mov	r0, r3
 3d8:	bl	0 <strdup>
 3dc:	mov	r3, r0
 3e0:	mov	r2, r3
 3e4:	ldr	r3, [fp, #-8]
 3e8:	str	r2, [r3]
 3ec:	ldr	r3, [fp, #-8]
 3f0:	ldr	r3, [r3]
 3f4:	cmp	r3, #0
 3f8:	bne	420 <coda_ascii_reopen_with_definition+0x23c>
 3fc:	mov	r3, #97	; 0x61
 400:	ldr	r2, [pc, #72]	; 450 <coda_ascii_reopen_with_definition+0x26c>
 404:	ldr	r1, [pc, #88]	; 464 <coda_ascii_reopen_with_definition+0x280>
 408:	mvn	r0, #0
 40c:	bl	0 <coda_set_error>
 410:	ldr	r0, [fp, #-8]
 414:	bl	0 <free>
 418:	mvn	r3, #0
 41c:	b	440 <coda_ascii_reopen_with_definition+0x25c>
 420:	ldr	r3, [fp, #-16]
 424:	ldr	r3, [r3]
 428:	mov	r0, r3
 42c:	bl	0 <coda_close>
 430:	ldr	r3, [fp, #-16]
 434:	ldr	r2, [fp, #-8]
 438:	str	r2, [r3]
 43c:	mov	r3, #0
 440:	mov	r0, r3
 444:	sub	sp, fp, #4
 448:	pop	{fp, pc}
 44c:	.word	0x0000032c
 450:	.word	0x00000128
 454:	.word	0x00000174
 458:	.word	0x00000188
 45c:	.word	0x000001b4
 460:	.word	0x000001dc
 464:	.word	0x00000214

00000468 <coda_ascii_close>:
 468:	push	{fp, lr}
 46c:	add	fp, sp, #4
 470:	sub	sp, sp, #16
 474:	str	r0, [fp, #-16]
 478:	ldr	r3, [fp, #-16]
 47c:	str	r3, [fp, #-8]
 480:	ldr	r0, [fp, #-8]
 484:	bl	0 <coda_bin_product_close>
 488:	mov	r3, r0
 48c:	cmp	r3, #0
 490:	beq	49c <coda_ascii_close+0x34>
 494:	mvn	r3, #0
 498:	b	508 <coda_ascii_close+0xa0>
 49c:	ldr	r3, [fp, #-8]
 4a0:	ldr	r3, [r3]
 4a4:	cmp	r3, #0
 4a8:	beq	4bc <coda_ascii_close+0x54>
 4ac:	ldr	r3, [fp, #-8]
 4b0:	ldr	r3, [r3]
 4b4:	mov	r0, r3
 4b8:	bl	0 <free>
 4bc:	ldr	r3, [fp, #-8]
 4c0:	ldr	r3, [r3, #68]	; 0x44
 4c4:	cmp	r3, #0
 4c8:	beq	4dc <coda_ascii_close+0x74>
 4cc:	ldr	r3, [fp, #-8]
 4d0:	ldr	r3, [r3, #68]	; 0x44
 4d4:	mov	r0, r3
 4d8:	bl	0 <free>
 4dc:	ldr	r3, [fp, #-8]
 4e0:	ldr	r3, [r3, #76]	; 0x4c
 4e4:	cmp	r3, #0
 4e8:	beq	4fc <coda_ascii_close+0x94>
 4ec:	ldr	r3, [fp, #-8]
 4f0:	ldr	r3, [r3, #76]	; 0x4c
 4f4:	mov	r0, r3
 4f8:	bl	0 <coda_type_release>
 4fc:	ldr	r0, [fp, #-8]
 500:	bl	0 <free>
 504:	mov	r3, #0
 508:	mov	r0, r3
 50c:	sub	sp, fp, #4
 510:	pop	{fp, pc}

00000514 <eol_type_to_string>:
 514:	push	{fp, lr}
 518:	add	fp, sp, #4
 51c:	sub	sp, sp, #8
 520:	str	r0, [fp, #-8]
 524:	ldr	r3, [fp, #-8]
 528:	cmp	r3, #2
 52c:	beq	558 <eol_type_to_string+0x44>
 530:	cmp	r3, #3
 534:	beq	568 <eol_type_to_string+0x54>
 538:	cmp	r3, #1
 53c:	beq	560 <eol_type_to_string+0x4c>
 540:	nop			; (mov r0, r0)
 544:	ldr	r3, [pc, #44]	; 578 <eol_type_to_string+0x64>
 548:	mov	r2, #150	; 0x96
 54c:	ldr	r1, [pc, #40]	; 57c <eol_type_to_string+0x68>
 550:	ldr	r0, [pc, #40]	; 580 <eol_type_to_string+0x6c>
 554:	bl	0 <__assert_fail>
 558:	ldr	r3, [pc, #36]	; 584 <eol_type_to_string+0x70>
 55c:	b	56c <eol_type_to_string+0x58>
 560:	ldr	r3, [pc, #32]	; 588 <eol_type_to_string+0x74>
 564:	b	56c <eol_type_to_string+0x58>
 568:	ldr	r3, [pc, #28]	; 58c <eol_type_to_string+0x78>
 56c:	mov	r0, r3
 570:	sub	sp, fp, #4
 574:	pop	{fp, pc}
 578:	.word	0x00000350
 57c:	.word	0x00000128
 580:	.word	0x00000260
 584:	.word	0x00000250
 588:	.word	0x00000254
 58c:	.word	0x00000258

00000590 <verify_eol_type>:
 590:	push	{r4, fp, lr}
 594:	add	fp, sp, #8
 598:	sub	sp, sp, #12
 59c:	str	r0, [fp, #-16]
 5a0:	str	r1, [fp, #-20]	; 0xffffffec
 5a4:	ldr	r3, [fp, #-20]	; 0xffffffec
 5a8:	cmp	r3, #0
 5ac:	bne	5c4 <verify_eol_type+0x34>
 5b0:	ldr	r3, [pc, #140]	; 644 <verify_eol_type+0xb4>
 5b4:	mov	r2, #156	; 0x9c
 5b8:	ldr	r1, [pc, #136]	; 648 <verify_eol_type+0xb8>
 5bc:	ldr	r0, [pc, #136]	; 64c <verify_eol_type+0xbc>
 5c0:	bl	0 <__assert_fail>
 5c4:	ldr	r3, [fp, #-16]
 5c8:	ldr	r3, [r3, #60]	; 0x3c
 5cc:	cmp	r3, #0
 5d0:	bne	5e8 <verify_eol_type+0x58>
 5d4:	ldr	r3, [fp, #-16]
 5d8:	ldr	r2, [fp, #-20]	; 0xffffffec
 5dc:	str	r2, [r3, #60]	; 0x3c
 5e0:	mov	r3, #0
 5e4:	b	638 <verify_eol_type+0xa8>
 5e8:	ldr	r3, [fp, #-16]
 5ec:	ldr	r2, [r3, #60]	; 0x3c
 5f0:	ldr	r3, [fp, #-20]	; 0xffffffec
 5f4:	cmp	r2, r3
 5f8:	beq	634 <verify_eol_type+0xa4>
 5fc:	ldr	r0, [fp, #-20]	; 0xffffffec
 600:	bl	514 <eol_type_to_string>
 604:	mov	r4, r0
 608:	ldr	r3, [fp, #-16]
 60c:	ldr	r3, [r3, #60]	; 0x3c
 610:	mov	r0, r3
 614:	bl	514 <eol_type_to_string>
 618:	mov	r3, r0
 61c:	mov	r2, r4
 620:	ldr	r1, [pc, #40]	; 650 <verify_eol_type+0xc0>
 624:	ldr	r0, [pc, #40]	; 654 <verify_eol_type+0xc4>
 628:	bl	0 <coda_set_error>
 62c:	mvn	r3, #0
 630:	b	638 <verify_eol_type+0xa8>
 634:	mov	r3, #0
 638:	mov	r0, r3
 63c:	sub	sp, fp, #8
 640:	pop	{r4, fp, pc}
 644:	.word	0x00000364
 648:	.word	0x00000128
 64c:	.word	0x00000264
 650:	.word	0x00000280
 654:	.word	0xfffffed4

00000658 <coda_ascii_init_asciilines>:
 658:	push	{fp, lr}
 65c:	add	fp, sp, #4
 660:	sub	sp, sp, #4160	; 0x1040
 664:	sub	sp, sp, #8
 668:	sub	r3, fp, #4096	; 0x1000
 66c:	sub	r3, r3, #4
 670:	str	r0, [r3, #-52]	; 0xffffffcc
 674:	sub	r3, fp, #4096	; 0x1000
 678:	sub	r3, r3, #4
 67c:	ldr	r3, [r3, #-52]	; 0xffffffcc
 680:	str	r3, [fp, #-44]	; 0xffffffd4
 684:	mov	r3, #0
 688:	str	r3, [fp, #-8]
 68c:	mov	r3, #0
 690:	str	r3, [fp, #-12]
 694:	mov	r2, #0
 698:	mov	r3, #0
 69c:	strd	r2, [fp, #-20]	; 0xffffffec
 6a0:	mov	r3, #0
 6a4:	strb	r3, [fp, #-21]	; 0xffffffeb
 6a8:	mov	r3, #0
 6ac:	str	r3, [fp, #-28]	; 0xffffffe4
 6b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
 6b4:	ldr	r3, [r3, #64]	; 0x40
 6b8:	cmn	r3, #1
 6bc:	beq	6d4 <coda_ascii_init_asciilines+0x7c>
 6c0:	ldr	r3, [pc, #1308]	; be4 <coda_ascii_init_asciilines+0x58c>
 6c4:	mov	r2, #185	; 0xb9
 6c8:	ldr	r1, [pc, #1304]	; be8 <coda_ascii_init_asciilines+0x590>
 6cc:	ldr	r0, [pc, #1304]	; bec <coda_ascii_init_asciilines+0x594>
 6d0:	bl	0 <__assert_fail>
 6d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
 6d8:	ldr	r3, [r3, #52]	; 0x34
 6dc:	cmp	r3, #0
 6e0:	bne	738 <coda_ascii_init_asciilines+0xe0>
 6e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
 6e8:	ldr	r3, [r3, #56]	; 0x38
 6ec:	mov	r2, #0
 6f0:	mov	r1, #0
 6f4:	mov	r0, r3
 6f8:	bl	0 <lseek>
 6fc:	mov	r3, r0
 700:	cmp	r3, #0
 704:	bge	738 <coda_ascii_init_asciilines+0xe0>
 708:	bl	0 <__errno_location>
 70c:	mov	r3, r0
 710:	ldr	r3, [r3]
 714:	mov	r0, r3
 718:	bl	0 <strerror>
 71c:	mov	r3, r0
 720:	mov	r2, r3
 724:	ldr	r1, [pc, #1220]	; bf0 <coda_ascii_init_asciilines+0x598>
 728:	mvn	r0, #21
 72c:	bl	0 <coda_set_error>
 730:	mvn	r3, #0
 734:	b	bd8 <coda_ascii_init_asciilines+0x580>
 738:	mov	r2, #4096	; 0x1000
 73c:	mov	r3, #0
 740:	strd	r2, [fp, #-36]	; 0xffffffdc
 744:	ldrd	r0, [fp, #-20]	; 0xffffffec
 748:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 74c:	adds	r2, r2, r0
 750:	adc	r3, r3, r1
 754:	ldr	r1, [fp, #-44]	; 0xffffffd4
 758:	ldrd	r0, [r1, #8]
 75c:	cmp	r0, r2
 760:	sbcs	r3, r1, r3
 764:	bge	780 <coda_ascii_init_asciilines+0x128>
 768:	ldr	r3, [fp, #-44]	; 0xffffffd4
 76c:	ldrd	r0, [r3, #8]
 770:	ldrd	r2, [fp, #-20]	; 0xffffffec
 774:	subs	r2, r0, r2
 778:	sbc	r3, r1, r3
 77c:	strd	r2, [fp, #-36]	; 0xffffffdc
 780:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 784:	orrs	r3, r2, r3
 788:	beq	b78 <coda_ascii_init_asciilines+0x520>
 78c:	sub	r3, fp, #4096	; 0x1000
 790:	sub	r3, r3, #4
 794:	sub	r3, r3, #48	; 0x30
 798:	str	r3, [sp, #8]
 79c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 7a0:	strd	r2, [sp]
 7a4:	ldrd	r2, [fp, #-20]	; 0xffffffec
 7a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 7ac:	bl	0 <read_bytes>
 7b0:	mov	r3, r0
 7b4:	cmp	r3, #0
 7b8:	beq	7c4 <coda_ascii_init_asciilines+0x16c>
 7bc:	mvn	r3, #0
 7c0:	b	bd8 <coda_ascii_init_asciilines+0x580>
 7c4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
 7c8:	cmp	r3, #13
 7cc:	bne	80c <coda_ascii_init_asciilines+0x1b4>
 7d0:	sub	r3, fp, #4096	; 0x1000
 7d4:	sub	r3, r3, #4
 7d8:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 7dc:	cmp	r3, #10
 7e0:	beq	80c <coda_ascii_init_asciilines+0x1b4>
 7e4:	mov	r1, #2
 7e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 7ec:	bl	590 <verify_eol_type>
 7f0:	mov	r3, r0
 7f4:	cmp	r3, #0
 7f8:	beq	80c <coda_ascii_init_asciilines+0x1b4>
 7fc:	ldr	r0, [fp, #-12]
 800:	bl	0 <free>
 804:	mvn	r3, #0
 808:	b	bd8 <coda_ascii_init_asciilines+0x580>
 80c:	mov	r3, #0
 810:	str	r3, [fp, #-40]	; 0xffffffd8
 814:	b	b20 <coda_ascii_init_asciilines+0x4c8>
 818:	ldr	r3, [fp, #-40]	; 0xffffffd8
 81c:	cmp	r3, #0
 820:	bne	894 <coda_ascii_init_asciilines+0x23c>
 824:	ldrb	r3, [fp, #-21]	; 0xffffffeb
 828:	cmp	r3, #13
 82c:	bne	894 <coda_ascii_init_asciilines+0x23c>
 830:	sub	r3, fp, #4096	; 0x1000
 834:	sub	r3, r3, #4
 838:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 83c:	cmp	r3, #10
 840:	bne	894 <coda_ascii_init_asciilines+0x23c>
 844:	ldr	r3, [fp, #-8]
 848:	sub	r3, r3, #-1073741823	; 0xc0000001
 84c:	lsl	r3, r3, #2
 850:	ldr	r2, [fp, #-12]
 854:	add	r3, r2, r3
 858:	ldr	r2, [r3]
 85c:	add	r2, r2, #1
 860:	str	r2, [r3]
 864:	mov	r3, #3
 868:	str	r3, [fp, #-28]	; 0xffffffe4
 86c:	mov	r1, #3
 870:	ldr	r0, [fp, #-44]	; 0xffffffd4
 874:	bl	590 <verify_eol_type>
 878:	mov	r3, r0
 87c:	cmp	r3, #0
 880:	beq	b14 <coda_ascii_init_asciilines+0x4bc>
 884:	ldr	r0, [fp, #-12]
 888:	bl	0 <free>
 88c:	mvn	r3, #0
 890:	b	bd8 <coda_ascii_init_asciilines+0x580>
 894:	sub	r3, fp, #4096	; 0x1000
 898:	sub	r3, r3, #4
 89c:	mov	r2, r3
 8a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
 8a4:	add	r3, r2, r3
 8a8:	sub	r3, r3, #48	; 0x30
 8ac:	ldrb	r3, [r3]
 8b0:	cmp	r3, #13
 8b4:	beq	910 <coda_ascii_init_asciilines+0x2b8>
 8b8:	sub	r3, fp, #4096	; 0x1000
 8bc:	sub	r3, r3, #4
 8c0:	mov	r2, r3
 8c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
 8c8:	add	r3, r2, r3
 8cc:	sub	r3, r3, #48	; 0x30
 8d0:	ldrb	r3, [r3]
 8d4:	cmp	r3, #10
 8d8:	beq	910 <coda_ascii_init_asciilines+0x2b8>
 8dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
 8e0:	mov	r0, r3
 8e4:	asr	r1, r0, #31
 8e8:	ldrd	r2, [fp, #-20]	; 0xffffffec
 8ec:	adds	r0, r0, r2
 8f0:	adc	r1, r1, r3
 8f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
 8f8:	ldrd	r2, [r3, #8]
 8fc:	subs	r2, r2, #1
 900:	sbc	r3, r3, #0
 904:	cmp	r1, r3
 908:	cmpeq	r0, r2
 90c:	bne	b14 <coda_ascii_init_asciilines+0x4bc>
 910:	ldr	r3, [fp, #-8]
 914:	and	r3, r3, #15
 918:	cmp	r3, #0
 91c:	bne	990 <coda_ascii_init_asciilines+0x338>
 920:	ldr	r3, [fp, #-8]
 924:	add	r3, r3, #16
 928:	lsl	r3, r3, #2
 92c:	mov	r1, r3
 930:	ldr	r0, [fp, #-12]
 934:	bl	0 <realloc>
 938:	str	r0, [fp, #-48]	; 0xffffffd0
 93c:	ldr	r3, [fp, #-48]	; 0xffffffd0
 940:	cmp	r3, #0
 944:	bne	988 <coda_ascii_init_asciilines+0x330>
 948:	ldr	r3, [fp, #-8]
 94c:	add	r3, r3, #16
 950:	lsl	r2, r3, #2
 954:	mov	r3, #245	; 0xf5
 958:	str	r3, [sp]
 95c:	ldr	r3, [pc, #644]	; be8 <coda_ascii_init_asciilines+0x590>
 960:	ldr	r1, [pc, #652]	; bf4 <coda_ascii_init_asciilines+0x59c>
 964:	mvn	r0, #0
 968:	bl	0 <coda_set_error>
 96c:	ldr	r3, [fp, #-12]
 970:	cmp	r3, #0
 974:	beq	980 <coda_ascii_init_asciilines+0x328>
 978:	ldr	r0, [fp, #-12]
 97c:	bl	0 <free>
 980:	mvn	r3, #0
 984:	b	bd8 <coda_ascii_init_asciilines+0x580>
 988:	ldr	r3, [fp, #-48]	; 0xffffffd0
 98c:	str	r3, [fp, #-12]
 990:	ldr	r3, [fp, #-8]
 994:	lsl	r3, r3, #2
 998:	ldr	r2, [fp, #-12]
 99c:	add	r3, r2, r3
 9a0:	ldr	r1, [fp, #-20]	; 0xffffffec
 9a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
 9a8:	add	r2, r1, r2
 9ac:	add	r2, r2, #1
 9b0:	str	r2, [r3]
 9b4:	ldr	r3, [fp, #-8]
 9b8:	add	r3, r3, #1
 9bc:	str	r3, [fp, #-8]
 9c0:	mov	r3, #0
 9c4:	str	r3, [fp, #-28]	; 0xffffffe4
 9c8:	sub	r3, fp, #4096	; 0x1000
 9cc:	sub	r3, r3, #4
 9d0:	mov	r2, r3
 9d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
 9d8:	add	r3, r2, r3
 9dc:	sub	r3, r3, #48	; 0x30
 9e0:	ldrb	r3, [r3]
 9e4:	cmp	r3, #10
 9e8:	bne	a1c <coda_ascii_init_asciilines+0x3c4>
 9ec:	mov	r3, #1
 9f0:	str	r3, [fp, #-28]	; 0xffffffe4
 9f4:	mov	r1, #1
 9f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 9fc:	bl	590 <verify_eol_type>
 a00:	mov	r3, r0
 a04:	cmp	r3, #0
 a08:	beq	b14 <coda_ascii_init_asciilines+0x4bc>
 a0c:	ldr	r0, [fp, #-12]
 a10:	bl	0 <free>
 a14:	mvn	r3, #0
 a18:	b	bd8 <coda_ascii_init_asciilines+0x580>
 a1c:	sub	r3, fp, #4096	; 0x1000
 a20:	sub	r3, r3, #4
 a24:	mov	r2, r3
 a28:	ldr	r3, [fp, #-40]	; 0xffffffd8
 a2c:	add	r3, r2, r3
 a30:	sub	r3, r3, #48	; 0x30
 a34:	ldrb	r3, [r3]
 a38:	cmp	r3, #13
 a3c:	bne	b14 <coda_ascii_init_asciilines+0x4bc>
 a40:	mov	r3, #2
 a44:	str	r3, [fp, #-28]	; 0xffffffe4
 a48:	ldr	r3, [fp, #-40]	; 0xffffffd8
 a4c:	mov	r0, r3
 a50:	asr	r1, r0, #31
 a54:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 a58:	subs	r2, r2, #1
 a5c:	sbc	r3, r3, #0
 a60:	cmp	r0, r2
 a64:	sbcs	r3, r1, r3
 a68:	bge	b14 <coda_ascii_init_asciilines+0x4bc>
 a6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
 a70:	add	r3, r3, #1
 a74:	sub	r2, fp, #4096	; 0x1000
 a78:	sub	r2, r2, #4
 a7c:	add	r3, r2, r3
 a80:	ldrb	r3, [r3, #-48]	; 0xffffffd0
 a84:	cmp	r3, #10
 a88:	bne	aec <coda_ascii_init_asciilines+0x494>
 a8c:	mov	r3, #3
 a90:	str	r3, [fp, #-28]	; 0xffffffe4
 a94:	mov	r1, #3
 a98:	ldr	r0, [fp, #-44]	; 0xffffffd4
 a9c:	bl	590 <verify_eol_type>
 aa0:	mov	r3, r0
 aa4:	cmp	r3, #0
 aa8:	beq	abc <coda_ascii_init_asciilines+0x464>
 aac:	ldr	r0, [fp, #-12]
 ab0:	bl	0 <free>
 ab4:	mvn	r3, #0
 ab8:	b	bd8 <coda_ascii_init_asciilines+0x580>
 abc:	ldr	r3, [fp, #-8]
 ac0:	sub	r3, r3, #-1073741823	; 0xc0000001
 ac4:	lsl	r3, r3, #2
 ac8:	ldr	r2, [fp, #-12]
 acc:	add	r3, r2, r3
 ad0:	ldr	r2, [r3]
 ad4:	add	r2, r2, #1
 ad8:	str	r2, [r3]
 adc:	ldr	r3, [fp, #-40]	; 0xffffffd8
 ae0:	add	r3, r3, #1
 ae4:	str	r3, [fp, #-40]	; 0xffffffd8
 ae8:	b	b14 <coda_ascii_init_asciilines+0x4bc>
 aec:	mov	r1, #2
 af0:	ldr	r0, [fp, #-44]	; 0xffffffd4
 af4:	bl	590 <verify_eol_type>
 af8:	mov	r3, r0
 afc:	cmp	r3, #0
 b00:	beq	b14 <coda_ascii_init_asciilines+0x4bc>
 b04:	ldr	r0, [fp, #-12]
 b08:	bl	0 <free>
 b0c:	mvn	r3, #0
 b10:	b	bd8 <coda_ascii_init_asciilines+0x580>
 b14:	ldr	r3, [fp, #-40]	; 0xffffffd8
 b18:	add	r3, r3, #1
 b1c:	str	r3, [fp, #-40]	; 0xffffffd8
 b20:	ldr	r3, [fp, #-40]	; 0xffffffd8
 b24:	mov	r0, r3
 b28:	asr	r1, r0, #31
 b2c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 b30:	cmp	r0, r2
 b34:	sbcs	r3, r1, r3
 b38:	blt	818 <coda_ascii_init_asciilines+0x1c0>
 b3c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 b40:	subs	r2, r2, #1
 b44:	sbc	r3, r3, #0
 b48:	sub	r1, fp, #4096	; 0x1000
 b4c:	sub	r1, r1, #4
 b50:	add	r3, r1, r2
 b54:	sub	r3, r3, #48	; 0x30
 b58:	ldrb	r3, [r3]
 b5c:	strb	r3, [fp, #-21]	; 0xffffffeb
 b60:	ldrd	r0, [fp, #-20]	; 0xffffffec
 b64:	ldrd	r2, [fp, #-36]	; 0xffffffdc
 b68:	adds	r2, r2, r0
 b6c:	adc	r3, r3, r1
 b70:	strd	r2, [fp, #-20]	; 0xffffffec
 b74:	b	738 <coda_ascii_init_asciilines+0xe0>
 b78:	nop			; (mov r0, r0)
 b7c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
 b80:	cmp	r3, #13
 b84:	bne	bb0 <coda_ascii_init_asciilines+0x558>
 b88:	mov	r1, #2
 b8c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 b90:	bl	590 <verify_eol_type>
 b94:	mov	r3, r0
 b98:	cmp	r3, #0
 b9c:	beq	bb0 <coda_ascii_init_asciilines+0x558>
 ba0:	ldr	r0, [fp, #-12]
 ba4:	bl	0 <free>
 ba8:	mvn	r3, #0
 bac:	b	bd8 <coda_ascii_init_asciilines+0x580>
 bb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
 bb4:	ldr	r2, [fp, #-8]
 bb8:	str	r2, [r3, #64]	; 0x40
 bbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
 bc0:	ldr	r2, [fp, #-12]
 bc4:	str	r2, [r3, #68]	; 0x44
 bc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
 bcc:	ldr	r2, [fp, #-28]	; 0xffffffe4
 bd0:	str	r2, [r3, #72]	; 0x48
 bd4:	mov	r3, #0
 bd8:	mov	r0, r3
 bdc:	sub	sp, fp, #4
 be0:	pop	{fp, pc}
 be4:	.word	0x00000374
 be8:	.word	0x00000128
 bec:	.word	0x000002d4
 bf0:	.word	0x000002f8
 bf4:	.word	0x000001dc
