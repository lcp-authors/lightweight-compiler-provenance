
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_help>:
   0:	movw	r0, #0
   4:	movt	r0, #0
   8:	strd	r4, [sp, #-16]!
   c:	str	r6, [sp, #8]
  10:	movw	r5, #0
  14:	movt	r5, #0
  18:	str	lr, [sp, #12]
  1c:	movw	r4, #0
  20:	movt	r4, #0
  24:	bl	0 <puts>
  28:	movw	r0, #0
  2c:	movt	r0, #0
  30:	bl	0 <puts>
  34:	movw	r0, #0
  38:	movt	r0, #0
  3c:	bl	0 <puts>
  40:	mov	r0, #10
  44:	bl	0 <putchar>
  48:	movw	r0, #0
  4c:	movt	r0, #0
  50:	bl	0 <puts>
  54:	movw	r0, #0
  58:	movt	r0, #0
  5c:	bl	0 <puts>
  60:	mov	r0, #10
  64:	bl	0 <putchar>
  68:	movw	r0, #0
  6c:	movt	r0, #0
  70:	bl	0 <puts>
  74:	movw	r0, #0
  78:	movt	r0, #0
  7c:	bl	0 <puts>
  80:	movw	r0, #0
  84:	movt	r0, #0
  88:	bl	0 <puts>
  8c:	movw	r0, #0
  90:	movt	r0, #0
  94:	bl	0 <puts>
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <puts>
  a4:	movw	r0, #0
  a8:	movt	r0, #0
  ac:	bl	0 <puts>
  b0:	movw	r0, #0
  b4:	movt	r0, #0
  b8:	bl	0 <puts>
  bc:	movw	r0, #0
  c0:	movt	r0, #0
  c4:	bl	0 <puts>
  c8:	movw	r0, #0
  cc:	movt	r0, #0
  d0:	bl	0 <puts>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	bl	0 <puts>
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	bl	0 <puts>
  ec:	movw	r0, #0
  f0:	movt	r0, #0
  f4:	bl	0 <puts>
  f8:	movw	r0, #0
  fc:	movt	r0, #0
 100:	bl	0 <puts>
 104:	movw	r0, #0
 108:	movt	r0, #0
 10c:	bl	0 <puts>
 110:	movw	r0, #0
 114:	movt	r0, #0
 118:	bl	0 <puts>
 11c:	movw	r0, #0
 120:	movt	r0, #0
 124:	bl	0 <puts>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	bl	0 <puts>
 134:	movw	r0, #0
 138:	movt	r0, #0
 13c:	bl	0 <puts>
 140:	movw	r0, #0
 144:	movt	r0, #0
 148:	bl	0 <puts>
 14c:	movw	r0, #0
 150:	movt	r0, #0
 154:	bl	0 <puts>
 158:	movw	r0, #0
 15c:	movt	r0, #0
 160:	bl	0 <puts>
 164:	movw	r0, #0
 168:	movt	r0, #0
 16c:	bl	0 <puts>
 170:	movw	r0, #0
 174:	movt	r0, #0
 178:	bl	0 <puts>
 17c:	movw	r0, #0
 180:	movt	r0, #0
 184:	bl	0 <puts>
 188:	movw	r0, #0
 18c:	movt	r0, #0
 190:	bl	0 <puts>
 194:	movw	r0, #0
 198:	movt	r0, #0
 19c:	bl	0 <puts>
 1a0:	movw	r0, #0
 1a4:	movt	r0, #0
 1a8:	bl	0 <puts>
 1ac:	movw	r0, #0
 1b0:	movt	r0, #0
 1b4:	bl	0 <puts>
 1b8:	movw	r0, #0
 1bc:	movt	r0, #0
 1c0:	bl	0 <puts>
 1c4:	mov	r0, #10
 1c8:	bl	0 <putchar>
 1cc:	movw	r0, #0
 1d0:	movt	r0, #0
 1d4:	bl	0 <puts>
 1d8:	movw	r0, #0
 1dc:	movt	r0, #0
 1e0:	bl	0 <puts>
 1e4:	movw	r0, #0
 1e8:	movt	r0, #0
 1ec:	bl	0 <puts>
 1f0:	movw	r0, #0
 1f4:	movt	r0, #0
 1f8:	bl	0 <puts>
 1fc:	movw	r0, #0
 200:	movt	r0, #0
 204:	bl	0 <puts>
 208:	movw	r0, #0
 20c:	movt	r0, #0
 210:	bl	0 <puts>
 214:	mov	r0, r5
 218:	bl	0 <puts>
 21c:	mov	r0, r4
 220:	bl	0 <puts>
 224:	mov	r0, #10
 228:	bl	0 <putchar>
 22c:	movw	r0, #0
 230:	movt	r0, #0
 234:	bl	0 <puts>
 238:	movw	r0, #0
 23c:	movt	r0, #0
 240:	bl	0 <puts>
 244:	movw	r0, #0
 248:	movt	r0, #0
 24c:	bl	0 <puts>
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bl	0 <puts>
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	bl	0 <puts>
 268:	mov	r0, r5
 26c:	bl	0 <puts>
 270:	mov	r0, r4
 274:	bl	0 <puts>
 278:	mov	r0, #10
 27c:	bl	0 <putchar>
 280:	movw	r0, #0
 284:	movt	r0, #0
 288:	bl	0 <puts>
 28c:	movw	r0, #0
 290:	movt	r0, #0
 294:	bl	0 <puts>
 298:	movw	r0, #0
 29c:	movt	r0, #0
 2a0:	bl	0 <puts>
 2a4:	movw	r0, #0
 2a8:	movt	r0, #0
 2ac:	bl	0 <puts>
 2b0:	mov	r0, #10
 2b4:	bl	0 <putchar>
 2b8:	movw	r0, #0
 2bc:	movt	r0, #0
 2c0:	bl	0 <puts>
 2c4:	movw	r0, #0
 2c8:	movt	r0, #0
 2cc:	bl	0 <puts>
 2d0:	mov	r0, #10
 2d4:	bl	0 <putchar>
 2d8:	movw	r0, #0
 2dc:	movt	r0, #0
 2e0:	bl	0 <puts>
 2e4:	movw	r0, #0
 2e8:	movt	r0, #0
 2ec:	bl	0 <puts>
 2f0:	mov	r0, #10
 2f4:	bl	0 <putchar>
 2f8:	movw	r0, #0
 2fc:	movt	r0, #0
 300:	bl	0 <puts>
 304:	movw	r0, #0
 308:	movt	r0, #0
 30c:	bl	0 <puts>
 310:	movw	r0, #0
 314:	movt	r0, #0
 318:	bl	0 <puts>
 31c:	movw	r0, #0
 320:	movt	r0, #0
 324:	bl	0 <puts>
 328:	movw	r0, #0
 32c:	movt	r0, #0
 330:	bl	0 <puts>
 334:	movw	r0, #0
 338:	movt	r0, #0
 33c:	bl	0 <puts>
 340:	movw	r0, #0
 344:	movt	r0, #0
 348:	bl	0 <puts>
 34c:	mov	r0, #10
 350:	ldrd	r4, [sp]
 354:	ldr	r6, [sp, #8]
 358:	ldr	lr, [sp, #12]
 35c:	add	sp, sp, #16
 360:	b	0 <putchar>

Disassembly of section .text.startup:

00000000 <main>:
   0:	mov	r3, #0
   4:	movw	ip, #0
   8:	movt	ip, #0
   c:	movw	r2, #0
  10:	movt	r2, #0
  14:	strd	r4, [sp, #-36]!	; 0xffffffdc
  18:	mov	r5, r0
  1c:	movw	r0, #0
  20:	movt	r0, #0
  24:	strd	r6, [sp, #8]
  28:	strd	r8, [sp, #16]
  2c:	movw	r6, #0
  30:	movt	r6, #0
  34:	strd	sl, [sp, #24]
  38:	movw	r8, #0
  3c:	movt	r8, #0
  40:	str	lr, [sp, #32]
  44:	sub	sp, sp, #76	; 0x4c
  48:	movw	lr, #0
  4c:	movt	lr, #0
  50:	str	r0, [ip]
  54:	movw	r0, #0
  58:	movt	r0, #0
  5c:	str	r3, [r2]
  60:	movw	r2, #0
  64:	movt	r2, #0
  68:	movw	sl, #0
  6c:	movt	sl, #0
  70:	str	r3, [r0]
  74:	mov	r7, r1
  78:	str	r3, [lr]
  7c:	str	r3, [r2]
  80:	str	lr, [sp]
  84:	movw	lr, #0
  88:	movt	lr, #0
  8c:	stmib	sp, {r0, ip}
  90:	movw	ip, #0
  94:	movt	ip, #0
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	str	r3, [r6]
  a4:	str	r2, [sp, #24]
  a8:	mov	r2, #1
  ac:	cmp	r5, r2
  b0:	str	r3, [r8]
  b4:	str	r3, [sl]
  b8:	str	r3, [r0]
  bc:	str	r3, [ip]
  c0:	str	r2, [lr]
  c4:	str	lr, [sp, #12]
  c8:	str	r0, [sp, #16]
  cc:	str	ip, [sp, #20]
  d0:	ble	17c <main+0x17c>
  d4:	ldr	r4, [r7, #4]
  d8:	movw	r1, #0
  dc:	movt	r1, #0
  e0:	mov	r0, r4
  e4:	bl	0 <strcmp>
  e8:	cmp	r0, #0
  ec:	beq	170 <main+0x170>
  f0:	movw	r1, #0
  f4:	movt	r1, #0
  f8:	mov	r0, r4
  fc:	bl	0 <strcmp>
 100:	cmp	r0, #0
 104:	beq	170 <main+0x170>
 108:	movw	r1, #0
 10c:	movt	r1, #0
 110:	mov	r0, r4
 114:	bl	0 <strcmp>
 118:	cmp	r0, #0
 11c:	beq	138 <main+0x138>
 120:	movw	r1, #0
 124:	movt	r1, #0
 128:	mov	r0, r4
 12c:	bl	0 <strcmp>
 130:	cmp	r0, #0
 134:	bne	3e0 <main+0x3e0>
 138:	ldr	r3, [pc, #1776]	; 830 <main+0x830>
 13c:	mrc	15, 0, r2, cr13, cr0, {3}
 140:	movw	r0, #0
 144:	movt	r0, #0
 148:	ldr	r3, [pc, r3]
 14c:	ldr	r1, [r2, r3]
 150:	bl	0 <printf>
 154:	movw	r0, #0
 158:	movt	r0, #0
 15c:	bl	0 <puts>
 160:	mov	r0, #10
 164:	bl	0 <putchar>
 168:	mov	r0, #0
 16c:	bl	0 <exit>
 170:	bl	0 <main>
 174:	mov	r0, #0
 178:	bl	0 <exit>
 17c:	movw	r2, #0
 180:	movt	r2, #0
 184:	ldr	r0, [r7]
 188:	mov	r1, #0
 18c:	bl	0 <coda_set_definition_path_conditional>
 190:	cmp	r0, #0
 194:	moveq	r4, #1
 198:	bne	73c <main+0x73c>
 19c:	ldr	r3, [pc, #1680]	; 834 <main+0x834>
 1a0:	mov	r2, #1
 1a4:	mrc	15, 0, r9, cr13, cr0, {3}
 1a8:	ldr	r3, [pc, r3]
 1ac:	str	r2, [r9, r3]
 1b0:	bl	0 <coda_init>
 1b4:	subs	fp, r0, #0
 1b8:	bne	778 <main+0x778>
 1bc:	cmp	r4, r5
 1c0:	beq	410 <main+0x410>
 1c4:	bl	0 <coda_set_option_perform_conversions>
 1c8:	ldr	fp, [r7, r4, lsl #2]
 1cc:	movw	r1, #0
 1d0:	movt	r1, #0
 1d4:	add	r9, r7, r4, lsl #2
 1d8:	mov	r0, fp
 1dc:	bl	0 <strcmp>
 1e0:	cmp	r0, #0
 1e4:	beq	354 <main+0x354>
 1e8:	movw	r1, #0
 1ec:	movt	r1, #0
 1f0:	mov	r0, fp
 1f4:	bl	0 <strcmp>
 1f8:	cmp	r0, #0
 1fc:	bne	41c <main+0x41c>
 200:	add	r4, r4, #1
 204:	mvn	r2, #0
 208:	cmp	r5, r4
 20c:	str	r2, [sp, #68]	; 0x44
 210:	ble	3a8 <main+0x3a8>
 214:	movw	r2, #0
 218:	movt	r2, #0
 21c:	movw	r3, #0
 220:	movt	r3, #0
 224:	str	r2, [sp, #28]
 228:	movw	r2, #0
 22c:	movt	r2, #0
 230:	movw	fp, #0
 234:	movt	fp, #0
 238:	str	r8, [sp, #32]
 23c:	str	r2, [sp, #36]	; 0x24
 240:	movw	r2, #0
 244:	movt	r2, #0
 248:	mov	r8, r4
 24c:	mov	r4, r3
 250:	str	r2, [sp, #40]	; 0x28
 254:	movw	r2, #0
 258:	movt	r2, #0
 25c:	str	sl, [sp, #44]	; 0x2c
 260:	str	r2, [sp, #48]	; 0x30
 264:	movw	r2, #0
 268:	movt	r2, #0
 26c:	str	r2, [sp, #52]	; 0x34
 270:	movw	r2, #0
 274:	movt	r2, #0
 278:	str	r2, [sp, #56]	; 0x38
 27c:	movw	r2, #0
 280:	movt	r2, #0
 284:	str	r2, [sp, #60]	; 0x3c
 288:	ldr	r9, [r7, r8, lsl #2]
 28c:	mov	r1, fp
 290:	lsl	sl, r8, #2
 294:	mov	r0, r9
 298:	bl	0 <strcmp>
 29c:	cmp	r0, #0
 2a0:	beq	3c4 <main+0x3c4>
 2a4:	mov	r1, r4
 2a8:	mov	r0, r9
 2ac:	bl	0 <strcmp>
 2b0:	cmp	r0, #0
 2b4:	beq	3c4 <main+0x3c4>
 2b8:	mov	r0, r9
 2bc:	ldr	r1, [sp, #28]
 2c0:	bl	0 <strcmp>
 2c4:	cmp	r0, #0
 2c8:	beq	3d0 <main+0x3d0>
 2cc:	mov	r0, r9
 2d0:	ldr	r1, [sp, #36]	; 0x24
 2d4:	bl	0 <strcmp>
 2d8:	cmp	r0, #0
 2dc:	beq	3d0 <main+0x3d0>
 2e0:	mov	r0, r9
 2e4:	ldr	r1, [sp, #40]	; 0x28
 2e8:	bl	0 <strcmp>
 2ec:	cmp	r0, #0
 2f0:	beq	390 <main+0x390>
 2f4:	mov	r0, r9
 2f8:	ldr	r1, [sp, #48]	; 0x30
 2fc:	bl	0 <strcmp>
 300:	cmp	r0, #0
 304:	beq	390 <main+0x390>
 308:	mov	r0, r9
 30c:	ldr	r1, [sp, #52]	; 0x34
 310:	bl	0 <strcmp>
 314:	cmp	r0, #0
 318:	beq	544 <main+0x544>
 31c:	mov	r0, r9
 320:	ldr	r1, [sp, #56]	; 0x38
 324:	bl	0 <strcmp>
 328:	cmp	r0, #0
 32c:	beq	544 <main+0x544>
 330:	mov	r0, r9
 334:	ldr	r1, [sp, #60]	; 0x3c
 338:	bl	0 <strcmp>
 33c:	cmp	r0, #0
 340:	bne	644 <main+0x644>
 344:	ldr	r3, [sp, #4]
 348:	mov	r2, #1
 34c:	str	r2, [r3]
 350:	b	39c <main+0x39c>
 354:	sub	r5, r5, #1
 358:	add	r4, r4, #1
 35c:	cmp	r5, r4
 360:	bne	560 <main+0x560>
 364:	ldr	r0, [r9, #4]
 368:	bl	0 <generate_html>
 36c:	bl	0 <coda_done>
 370:	mov	r0, #0
 374:	add	sp, sp, #76	; 0x4c
 378:	ldrd	r4, [sp]
 37c:	ldrd	r6, [sp, #8]
 380:	ldrd	r8, [sp, #16]
 384:	ldrd	sl, [sp, #24]
 388:	add	sp, sp, #32
 38c:	pop	{pc}		; (ldr pc, [sp], #4)
 390:	ldr	r3, [sp, #44]	; 0x2c
 394:	mov	r2, #1
 398:	str	r2, [r3]
 39c:	add	r8, r8, #1
 3a0:	cmp	r5, r8
 3a4:	bgt	288 <main+0x288>
 3a8:	mov	r6, #0
 3ac:	mov	r9, r6
 3b0:	mov	r1, r6
 3b4:	mov	r0, r9
 3b8:	ldr	r2, [sp, #68]	; 0x44
 3bc:	bl	0 <generate_list>
 3c0:	b	36c <main+0x36c>
 3c4:	mov	r2, #1
 3c8:	str	r2, [r6]
 3cc:	b	39c <main+0x39c>
 3d0:	ldr	r3, [sp, #32]
 3d4:	mov	r2, #1
 3d8:	str	r2, [r3]
 3dc:	b	39c <main+0x39c>
 3e0:	cmp	r5, #2
 3e4:	beq	17c <main+0x17c>
 3e8:	mov	r0, r4
 3ec:	movw	r1, #0
 3f0:	movt	r1, #0
 3f4:	bl	0 <strcmp>
 3f8:	cmp	r0, #0
 3fc:	bne	17c <main+0x17c>
 400:	ldr	r0, [r7, #8]
 404:	mov	r4, #3
 408:	bl	0 <coda_set_definition_path>
 40c:	b	19c <main+0x19c>
 410:	bl	0 <coda_done>
 414:	mov	r0, fp
 418:	bl	0 <exit>
 41c:	movw	r1, #0
 420:	movt	r1, #0
 424:	mov	r0, fp
 428:	bl	0 <strcmp>
 42c:	subs	r8, r0, #0
 430:	bne	4fc <main+0x4fc>
 434:	mvn	r3, #0
 438:	movw	sl, #0
 43c:	movt	sl, #0
 440:	movw	fp, #0
 444:	movt	fp, #0
 448:	add	r4, r4, #1
 44c:	str	r3, [sp, #68]	; 0x44
 450:	b	4a8 <main+0x4a8>
 454:	ldr	r6, [r9, #4]
 458:	mov	r1, sl
 45c:	mov	r0, r6
 460:	bl	0 <strcmp>
 464:	cmp	r0, #0
 468:	beq	480 <main+0x480>
 46c:	mov	r1, fp
 470:	mov	r0, r6
 474:	bl	0 <strcmp>
 478:	cmp	r0, #0
 47c:	bne	554 <main+0x554>
 480:	add	r3, r4, #1
 484:	cmp	r5, r3
 488:	ble	554 <main+0x554>
 48c:	ldr	r3, [r9, #8]
 490:	ldrb	r2, [r3]
 494:	cmp	r2, #45	; 0x2d
 498:	beq	554 <main+0x554>
 49c:	add	r4, r4, #2
 4a0:	add	r9, r9, #8
 4a4:	mov	r8, r3
 4a8:	cmp	r4, r5
 4ac:	blt	454 <main+0x454>
 4b0:	sub	r5, r5, #3
 4b4:	cmp	r5, r4
 4b8:	bne	560 <main+0x560>
 4bc:	add	r3, r7, r4, lsl #2
 4c0:	movw	r1, #0
 4c4:	movt	r1, #0
 4c8:	add	r2, sp, #68	; 0x44
 4cc:	ldr	r4, [r7, r4, lsl #2]
 4d0:	ldr	r5, [r3, #4]
 4d4:	ldr	r0, [r3, #8]
 4d8:	bl	0 <__isoc99_sscanf>
 4dc:	cmp	r0, #1
 4e0:	bne	794 <main+0x794>
 4e4:	mov	r2, r5
 4e8:	mov	r1, r4
 4ec:	ldr	r3, [sp, #68]	; 0x44
 4f0:	mov	r0, r8
 4f4:	bl	0 <generate_xmlschema>
 4f8:	b	36c <main+0x36c>
 4fc:	movw	r1, #0
 500:	movt	r1, #0
 504:	mov	r0, fp
 508:	bl	0 <strcmp>
 50c:	cmp	r0, #0
 510:	bne	58c <main+0x58c>
 514:	sub	r5, r5, #1
 518:	add	r4, r4, #1
 51c:	cmp	r5, r4
 520:	bne	560 <main+0x560>
 524:	add	r1, sp, #68	; 0x44
 528:	ldr	r0, [r9, #4]
 52c:	bl	0 <coda_format_from_string>
 530:	cmp	r0, #0
 534:	bne	560 <main+0x560>
 538:	ldr	r0, [sp, #68]	; 0x44
 53c:	bl	0 <generate_detection_tree>
 540:	b	36c <main+0x36c>
 544:	ldr	r3, [sp]
 548:	mov	r2, #1
 54c:	str	r2, [r3]
 550:	b	39c <main+0x39c>
 554:	ldrb	r3, [r6]
 558:	cmp	r3, #45	; 0x2d
 55c:	bne	4b0 <main+0x4b0>
 560:	movw	r3, #0
 564:	movt	r3, #0
 568:	ldr	r3, [r3]
 56c:	movw	r0, #0
 570:	movt	r0, #0
 574:	mov	r2, #25
 578:	mov	r1, #1
 57c:	bl	0 <fwrite>
 580:	bl	0 <main>
 584:	mov	r0, #1
 588:	bl	0 <exit>
 58c:	mov	r0, fp
 590:	movw	r1, #0
 594:	movt	r1, #0
 598:	bl	0 <strcmp>
 59c:	subs	r8, r0, #0
 5a0:	bne	560 <main+0x560>
 5a4:	movw	sl, #0
 5a8:	movt	sl, #0
 5ac:	movw	fp, #0
 5b0:	movt	fp, #0
 5b4:	add	r4, r4, #1
 5b8:	b	610 <main+0x610>
 5bc:	ldr	r6, [r9, #4]
 5c0:	mov	r1, sl
 5c4:	mov	r0, r6
 5c8:	bl	0 <strcmp>
 5cc:	cmp	r0, #0
 5d0:	beq	5e8 <main+0x5e8>
 5d4:	mov	r1, fp
 5d8:	mov	r0, r6
 5dc:	bl	0 <strcmp>
 5e0:	cmp	r0, #0
 5e4:	bne	634 <main+0x634>
 5e8:	add	r3, r4, #1
 5ec:	cmp	r5, r3
 5f0:	ble	634 <main+0x634>
 5f4:	ldr	r3, [r9, #8]
 5f8:	ldrb	r2, [r3]
 5fc:	cmp	r2, #45	; 0x2d
 600:	beq	634 <main+0x634>
 604:	add	r4, r4, #2
 608:	add	r9, r9, #8
 60c:	mov	r8, r3
 610:	cmp	r4, r5
 614:	blt	5bc <main+0x5bc>
 618:	sub	r5, r5, #1
 61c:	cmp	r5, r4
 620:	bne	560 <main+0x560>
 624:	mov	r0, r8
 628:	ldr	r1, [r7, r4, lsl #2]
 62c:	bl	0 <generate_definition>
 630:	b	36c <main+0x36c>
 634:	ldrb	r3, [r6]
 638:	cmp	r3, #45	; 0x2d
 63c:	bne	618 <main+0x618>
 640:	b	560 <main+0x560>
 644:	movw	r1, #0
 648:	movt	r1, #0
 64c:	mov	r0, r9
 650:	bl	0 <strcmp>
 654:	cmp	r0, #0
 658:	bne	66c <main+0x66c>
 65c:	ldr	r3, [sp, #24]
 660:	mov	r2, #1
 664:	str	r2, [r3]
 668:	b	39c <main+0x39c>
 66c:	movw	r1, #0
 670:	movt	r1, #0
 674:	mov	r0, r9
 678:	bl	0 <strcmp>
 67c:	cmp	r0, #0
 680:	bne	694 <main+0x694>
 684:	ldr	r3, [sp, #20]
 688:	mov	r2, #1
 68c:	str	r2, [r3]
 690:	b	39c <main+0x39c>
 694:	movw	r1, #0
 698:	movt	r1, #0
 69c:	mov	r0, r9
 6a0:	bl	0 <strcmp>
 6a4:	cmp	r0, #0
 6a8:	bne	6bc <main+0x6bc>
 6ac:	ldr	r3, [sp, #16]
 6b0:	mov	r2, #1
 6b4:	str	r2, [r3]
 6b8:	b	39c <main+0x39c>
 6bc:	movw	r1, #0
 6c0:	movt	r1, #0
 6c4:	mov	r0, r9
 6c8:	bl	0 <strcmp>
 6cc:	cmp	r0, #0
 6d0:	ldreq	r3, [sp, #12]
 6d4:	streq	r0, [r3]
 6d8:	beq	39c <main+0x39c>
 6dc:	movw	r1, #0
 6e0:	movt	r1, #0
 6e4:	mov	r0, r9
 6e8:	bl	0 <strcmp>
 6ec:	cmp	r0, #0
 6f0:	beq	70c <main+0x70c>
 6f4:	movw	r1, #0
 6f8:	movt	r1, #0
 6fc:	mov	r0, r9
 700:	bl	0 <strcmp>
 704:	cmp	r0, #0
 708:	bne	7b0 <main+0x7b0>
 70c:	add	r2, r8, #1
 710:	cmp	r2, r5
 714:	bge	808 <main+0x808>
 718:	add	sl, r7, sl
 71c:	ldr	r1, [sl, #4]
 720:	ldrb	r0, [r1]
 724:	cmp	r0, #45	; 0x2d
 728:	beq	81c <main+0x81c>
 72c:	ldr	r3, [sp, #8]
 730:	mov	r8, r2
 734:	str	r1, [r3]
 738:	b	39c <main+0x39c>
 73c:	ldr	r3, [pc, #244]	; 838 <main+0x838>
 740:	movw	r1, #0
 744:	movt	r1, #0
 748:	mrc	15, 0, r2, cr13, cr0, {3}
 74c:	ldr	r4, [r1]
 750:	ldr	r3, [pc, r3]
 754:	ldr	r0, [r2, r3]
 758:	bl	0 <coda_errno_to_string>
 75c:	mov	r2, r0
 760:	movw	r1, #0
 764:	movt	r1, #0
 768:	mov	r0, r4
 76c:	bl	0 <fprintf>
 770:	mov	r0, #1
 774:	bl	0 <exit>
 778:	ldr	r3, [pc, #188]	; 83c <main+0x83c>
 77c:	movw	r2, #0
 780:	movt	r2, #0
 784:	ldr	r4, [r2]
 788:	ldr	r3, [pc, r3]
 78c:	ldr	r0, [r9, r3]
 790:	b	758 <main+0x758>
 794:	movw	r3, #0
 798:	movt	r3, #0
 79c:	movw	r0, #0
 7a0:	movt	r0, #0
 7a4:	ldr	r3, [r3]
 7a8:	mov	r2, #40	; 0x28
 7ac:	b	578 <main+0x578>
 7b0:	ldrb	r2, [r9]
 7b4:	mov	r4, r8
 7b8:	cmp	r2, #45	; 0x2d
 7bc:	beq	560 <main+0x560>
 7c0:	add	r2, r8, #1
 7c4:	cmp	r5, r2
 7c8:	ble	814 <main+0x814>
 7cc:	add	r0, r4, #2
 7d0:	ldr	r6, [r7, r2, lsl #2]
 7d4:	cmp	r5, r0
 7d8:	ble	3b0 <main+0x3b0>
 7dc:	movw	r1, #0
 7e0:	movt	r1, #0
 7e4:	ldr	r0, [r7, r0, lsl #2]
 7e8:	add	r2, sp, #68	; 0x44
 7ec:	bl	0 <__isoc99_sscanf>
 7f0:	cmp	r0, #1
 7f4:	bne	794 <main+0x794>
 7f8:	add	r3, r4, #3
 7fc:	cmp	r5, r3
 800:	ble	3b0 <main+0x3b0>
 804:	b	560 <main+0x560>
 808:	ldrb	r3, [r9]
 80c:	cmp	r3, #45	; 0x2d
 810:	beq	560 <main+0x560>
 814:	mov	r6, #0
 818:	b	3b0 <main+0x3b0>
 81c:	ldrb	r1, [r9]
 820:	mov	r4, r8
 824:	cmp	r1, #45	; 0x2d
 828:	bne	7cc <main+0x7cc>
 82c:	b	560 <main+0x560>
 830:	.word	0x000006e0
 834:	.word	0x00000684
 838:	.word	0x000000e0
 83c:	.word	0x000000ac
