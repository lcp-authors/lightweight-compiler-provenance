
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_data>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	mov	r6, r1
   8:	ldr	sl, [pc, #2720]	; ab0 <write_data+0xab0>
   c:	add	r1, r1, #2
  10:	sub	sp, sp, #108	; 0x6c
  14:	mov	ip, r1
  18:	str	r1, [sp, #32]
  1c:	mov	fp, r0
  20:	add	r1, sp, #52	; 0x34
  24:	ldr	r0, [sl, ip, lsl #2]
  28:	mov	r4, r2
  2c:	mov	r5, r3
  30:	bl	0 <coda_type_get_class>
  34:	cmp	r0, #0
  38:	bne	1d0 <write_data+0x1d0>
  3c:	ldr	r3, [sp, #52]	; 0x34
  40:	cmp	r3, #0
  44:	beq	168 <write_data+0x168>
  48:	cmp	r3, #1
  4c:	beq	a4 <write_data+0xa4>
  50:	ldr	r3, [pc, #2652]	; ab4 <write_data+0xab4>
  54:	ldr	r3, [r3]
  58:	cmp	r3, #0
  5c:	bne	380 <write_data+0x380>
  60:	ldr	r3, [sp, #32]
  64:	add	r1, sp, #56	; 0x38
  68:	ldr	r0, [sl, r3, lsl #2]
  6c:	bl	0 <coda_type_get_class>
  70:	cmp	r0, #0
  74:	bne	378 <write_data+0x378>
  78:	ldr	r3, [sp, #56]	; 0x38
  7c:	cmp	r3, #6
  80:	ldrls	pc, [pc, r3, lsl #2]
  84:	b	244 <write_data+0x244>
  88:	.word	0x0000035c
  8c:	.word	0x0000035c
  90:	.word	0x000002f8
  94:	.word	0x000002f8
  98:	.word	0x000002f8
  9c:	.word	0x000002f8
  a0:	.word	0x00000288
  a4:	lsl	r3, r4, #2
  a8:	str	r3, [sp, #20]
  ac:	add	r3, r3, r4
  b0:	cmp	r4, #0
  b4:	add	r3, sl, r3, lsl #4
  b8:	streq	r4, [sl, #844]	; 0x34c
  bc:	ldr	lr, [r3, #800]	; 0x320
  c0:	ldr	r3, [sp, #20]
  c4:	add	r2, r3, r4
  c8:	ldr	r3, [pc, #2536]	; ab8 <write_data+0xab8>
  cc:	add	r2, sl, r2, lsl #4
  d0:	ldr	r0, [r2, #804]	; 0x324
  d4:	ldr	r1, [r3, #104]	; 0x68
  d8:	add	ip, lr, r0
  dc:	cmp	r1, ip
  e0:	str	r1, [sp, #24]
  e4:	str	ip, [sp, #28]
  e8:	bge	258 <write_data+0x258>
  ec:	cmp	r0, #0
  f0:	ble	83c <write_data+0x83c>
  f4:	ldr	r2, [sp, #20]
  f8:	add	lr, lr, #1
  fc:	add	ip, r2, r4
 100:	add	r2, sp, #72	; 0x48
 104:	lsl	ip, ip, #4
 108:	add	r1, ip, #844	; 0x34c
 10c:	add	r3, r3, lr, lsl #2
 110:	add	r1, sl, r1
 114:	add	ip, sl, ip
 118:	add	r0, r2, r0, lsl #2
 11c:	mov	r7, #1
 120:	mov	lr, #0
 124:	ldr	r8, [r3, #68]	; 0x44
 128:	add	r2, r2, #4
 12c:	cmp	r8, #0
 130:	add	r3, r3, #4
 134:	ldrne	r8, [r3, #100]	; 0x64
 138:	ldrne	r9, [ip, #844]	; 0x34c
 13c:	ldreq	r8, [r3, #-4]
 140:	ldrne	r8, [r8, r9, lsl #2]
 144:	str	r8, [r2, #-4]
 148:	cmp	r2, r0
 14c:	mul	r7, r8, r7
 150:	str	lr, [r1, #4]!
 154:	bne	124 <write_data+0x124>
 158:	cmp	r7, #0
 15c:	bne	458 <write_data+0x458>
 160:	add	sp, sp, #108	; 0x6c
 164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 168:	add	r7, r5, #872	; 0x368
 16c:	add	r2, sp, #72	; 0x48
 170:	add	r3, sl, r7, lsl #2
 174:	ldr	r0, [pc, #2368]	; abc <write_data+0xabc>
 178:	ldr	r1, [r3, #4]
 17c:	bl	0 <coda_cursor_get_record_field_available_status>
 180:	cmp	r0, #0
 184:	bne	370 <write_data+0x370>
 188:	ldr	r3, [sp, #72]	; 0x48
 18c:	cmp	r3, #0
 190:	beq	160 <write_data+0x160>
 194:	add	r7, sl, r7, lsl #2
 198:	ldr	r0, [pc, #2332]	; abc <write_data+0xabc>
 19c:	ldr	r1, [r7, #4]
 1a0:	bl	0 <coda_cursor_goto_record_field_by_index>
 1a4:	cmp	r0, #0
 1a8:	bne	858 <write_data+0x858>
 1ac:	add	r3, r5, #1
 1b0:	mov	r2, r4
 1b4:	add	r1, r6, #1
 1b8:	mov	r0, fp
 1bc:	bl	0 <write_data>
 1c0:	ldr	r0, [pc, #2292]	; abc <write_data+0xabc>
 1c4:	bl	0 <coda_cursor_goto_parent>
 1c8:	add	sp, sp, #108	; 0x6c
 1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1d0:	bl	0 <handle_coda_error>
 1d4:	b	3c <write_data+0x3c>
 1d8:	add	r1, sp, #72	; 0x48
 1dc:	ldr	r0, [pc, #2264]	; abc <write_data+0xabc>
 1e0:	bl	0 <coda_cursor_get_string_length>
 1e4:	cmp	r0, #0
 1e8:	bne	9e8 <write_data+0x9e8>
 1ec:	ldr	r0, [sp, #72]	; 0x48
 1f0:	add	r0, r0, #1
 1f4:	bl	0 <malloc>
 1f8:	subs	r4, r0, #0
 1fc:	beq	a60 <write_data+0xa60>
 200:	ldr	r2, [sp, #72]	; 0x48
 204:	mov	r1, r4
 208:	add	r2, r2, #1
 20c:	ldr	r0, [pc, #2216]	; abc <write_data+0xabc>
 210:	bl	0 <coda_cursor_read_string>
 214:	cmp	r0, #0
 218:	bne	9e0 <write_data+0x9e0>
 21c:	ldr	r3, [pc, #2204]	; ac0 <write_data+0xac0>
 220:	ldr	r3, [r3]
 224:	cmp	r3, #0
 228:	beq	948 <write_data+0x948>
 22c:	mov	r2, r4
 230:	ldr	r1, [pc, #2188]	; ac4 <write_data+0xac4>
 234:	mov	r0, fp
 238:	bl	0 <fprintf>
 23c:	mov	r0, r4
 240:	bl	0 <free>
 244:	mov	r1, fp
 248:	mov	r0, #10
 24c:	bl	0 <fputc>
 250:	add	sp, sp, #108	; 0x6c
 254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 258:	ldr	r1, [sl, #3360]	; 0xd20
 25c:	sub	r1, r1, #1
 260:	cmp	r4, r1
 264:	bge	ec <write_data+0xec>
 268:	ldr	ip, [r2, #844]	; 0x34c
 26c:	add	r1, r4, #1
 270:	ldr	r2, [r2, #840]	; 0x348
 274:	add	r1, r1, r1, lsl #2
 278:	mul	r2, r2, ip
 27c:	add	r1, sl, r1, lsl #4
 280:	str	r2, [r1, #844]	; 0x34c
 284:	b	ec <write_data+0xec>
 288:	ldr	r3, [sp, #32]
 28c:	add	r1, sp, #60	; 0x3c
 290:	ldr	r0, [sl, r3, lsl #2]
 294:	bl	0 <coda_type_get_special_type>
 298:	cmp	r0, #0
 29c:	bne	860 <write_data+0x860>
 2a0:	ldr	r3, [sp, #60]	; 0x3c
 2a4:	cmp	r3, #1
 2a8:	bcc	244 <write_data+0x244>
 2ac:	cmp	r3, #2
 2b0:	bls	5b8 <write_data+0x5b8>
 2b4:	cmp	r3, #3
 2b8:	bne	244 <write_data+0x244>
 2bc:	add	r1, sp, #72	; 0x48
 2c0:	ldr	r0, [pc, #2036]	; abc <write_data+0xabc>
 2c4:	bl	0 <coda_cursor_read_complex_double_pair>
 2c8:	cmp	r0, #0
 2cc:	bne	928 <write_data+0x928>
 2d0:	ldr	ip, [pc, #2032]	; ac8 <write_data+0xac8>
 2d4:	ldrd	r0, [sp, #80]	; 0x50
 2d8:	ldrd	r2, [sp, #72]	; 0x48
 2dc:	ldr	ip, [ip]
 2e0:	strd	r0, [sp, #8]
 2e4:	str	ip, [sp]
 2e8:	ldr	r1, [pc, #2012]	; acc <write_data+0xacc>
 2ec:	mov	r0, fp
 2f0:	bl	0 <fprintf>
 2f4:	b	244 <write_data+0x244>
 2f8:	ldr	r3, [sp, #32]
 2fc:	add	r1, sp, #60	; 0x3c
 300:	ldr	r0, [sl, r3, lsl #2]
 304:	bl	0 <coda_type_get_read_type>
 308:	cmp	r0, #0
 30c:	bne	868 <write_data+0x868>
 310:	ldr	r3, [sp, #60]	; 0x3c
 314:	add	r3, r3, #1
 318:	cmp	r3, #13
 31c:	ldrls	pc, [pc, r3, lsl #2]
 320:	b	244 <write_data+0x244>
 324:	.word	0x00000828
 328:	.word	0x000007a0
 32c:	.word	0x00000778
 330:	.word	0x000007a0
 334:	.word	0x00000778
 338:	.word	0x000007a0
 33c:	.word	0x00000778
 340:	.word	0x000007f8
 344:	.word	0x000007c8
 348:	.word	0x00000634
 34c:	.word	0x00000634
 350:	.word	0x000005fc
 354:	.word	0x000001d8
 358:	.word	0x00000668
 35c:	ldr	r3, [pc, #1900]	; ad0 <write_data+0xad0>
 360:	mov	r2, #368	; 0x170
 364:	ldr	r1, [pc, #1896]	; ad4 <write_data+0xad4>
 368:	ldr	r0, [pc, #1896]	; ad8 <write_data+0xad8>
 36c:	bl	0 <__assert_fail>
 370:	bl	0 <handle_coda_error>
 374:	b	188 <write_data+0x188>
 378:	bl	0 <handle_coda_error>
 37c:	b	78 <write_data+0x78>
 380:	ldr	r3, [sl, #136]	; 0x88
 384:	cmp	r3, #0
 388:	ble	60 <write_data+0x60>
 38c:	mov	r3, #0
 390:	ldr	r2, [pc, #1860]	; adc <write_data+0xadc>
 394:	str	r3, [sp, #28]
 398:	mov	r7, r3
 39c:	add	r3, sp, #72	; 0x48
 3a0:	str	r2, [sp, #20]
 3a4:	ldr	r9, [pc, #1820]	; ac8 <write_data+0xac8>
 3a8:	ldr	r8, [pc, #1840]	; ae0 <write_data+0xae0>
 3ac:	str	r3, [sp, #24]
 3b0:	b	3d0 <write_data+0x3d0>
 3b4:	ldr	r3, [sp, #72]	; 0x48
 3b8:	cmp	r3, #1
 3bc:	beq	3fc <write_data+0x3fc>
 3c0:	ldr	r3, [sl, #136]	; 0x88
 3c4:	add	r7, r7, #1
 3c8:	cmp	r7, r3
 3cc:	bge	60 <write_data+0x60>
 3d0:	ldr	r3, [sp, #20]
 3d4:	ldr	r1, [sp, #24]
 3d8:	ldr	r0, [r3, #4]!
 3dc:	str	r3, [sp, #20]
 3e0:	bl	0 <coda_type_get_class>
 3e4:	cmp	r0, #0
 3e8:	beq	3b4 <write_data+0x3b4>
 3ec:	bl	0 <handle_coda_error>
 3f0:	ldr	r3, [sp, #72]	; 0x48
 3f4:	cmp	r3, #1
 3f8:	bne	3c0 <write_data+0x3c0>
 3fc:	ldr	r3, [sp, #28]
 400:	add	r5, r3, r3, lsl #2
 404:	lsl	r5, r5, #4
 408:	add	r6, sl, r5
 40c:	ldr	r3, [r6, #804]	; 0x324
 410:	cmp	r3, #0
 414:	addgt	r5, r5, #844	; 0x34c
 418:	addgt	r5, sl, r5
 41c:	movgt	r4, #0
 420:	ble	448 <write_data+0x448>
 424:	ldr	r3, [r9]
 428:	ldr	r2, [r5, #4]!
 42c:	mov	r1, r8
 430:	mov	r0, fp
 434:	bl	0 <fprintf>
 438:	ldr	r3, [r6, #804]	; 0x324
 43c:	add	r4, r4, #1
 440:	cmp	r4, r3
 444:	blt	424 <write_data+0x424>
 448:	ldr	r3, [sp, #28]
 44c:	add	r3, r3, #1
 450:	str	r3, [sp, #28]
 454:	b	3c0 <write_data+0x3c0>
 458:	ldr	r0, [pc, #1628]	; abc <write_data+0xabc>
 45c:	bl	0 <coda_cursor_goto_first_array_element>
 460:	cmp	r0, #0
 464:	bne	850 <write_data+0x850>
 468:	cmp	r7, #0
 46c:	ble	1c0 <write_data+0x1c0>
 470:	ldr	r3, [sp, #20]
 474:	add	r8, r4, #1
 478:	add	r3, r3, r4
 47c:	add	r2, r8, r8, lsl #2
 480:	ldr	r9, [pc, #1580]	; ab4 <write_data+0xab4>
 484:	add	r1, r6, #1
 488:	lsl	r3, r3, #2
 48c:	mov	r6, #0
 490:	add	r2, sl, r2, lsl #4
 494:	str	r3, [sp, #40]	; 0x28
 498:	sub	r3, r7, #1
 49c:	str	r1, [sp, #32]
 4a0:	str	r2, [sp, #44]	; 0x2c
 4a4:	str	r3, [sp, #36]	; 0x24
 4a8:	mov	r3, r5
 4ac:	mov	r2, r8
 4b0:	ldr	r1, [sp, #32]
 4b4:	mov	r0, fp
 4b8:	bl	0 <write_data>
 4bc:	ldr	r3, [sp, #36]	; 0x24
 4c0:	cmp	r6, r3
 4c4:	bge	5a0 <write_data+0x5a0>
 4c8:	ldr	r0, [pc, #1516]	; abc <write_data+0xabc>
 4cc:	bl	0 <coda_cursor_goto_next_array_element>
 4d0:	cmp	r0, #0
 4d4:	bne	5b0 <write_data+0x5b0>
 4d8:	ldr	r3, [sp, #24]
 4dc:	ldr	r2, [sp, #28]
 4e0:	cmp	r3, r2
 4e4:	blt	508 <write_data+0x508>
 4e8:	ldr	r3, [sl, #3360]	; 0xd20
 4ec:	sub	r3, r3, #1
 4f0:	cmp	r4, r3
 4f4:	ldrlt	r2, [sp, #44]	; 0x2c
 4f8:	movlt	r3, r2
 4fc:	ldrlt	r3, [r3, #844]	; 0x34c
 500:	addlt	r3, r3, #1
 504:	strlt	r3, [r2, #844]	; 0x34c
 508:	ldr	r3, [r9]
 50c:	cmp	r3, #0
 510:	beq	5a0 <write_data+0x5a0>
 514:	ldr	r3, [sp, #20]
 518:	add	r3, r3, r4
 51c:	add	r2, sl, r3, lsl #4
 520:	ldr	r0, [r2, #804]	; 0x324
 524:	subs	r1, r0, #1
 528:	bmi	5a0 <write_data+0x5a0>
 52c:	add	r3, r1, r3, lsl #2
 530:	add	r3, r3, #212	; 0xd4
 534:	add	ip, sp, #104	; 0x68
 538:	add	ip, ip, r1, lsl #2
 53c:	ldr	r2, [sl, r3, lsl #2]
 540:	ldr	ip, [ip, #-32]	; 0xffffffe0
 544:	add	r2, r2, #1
 548:	cmp	r2, ip
 54c:	str	r2, [sl, r3, lsl #2]
 550:	bne	5a0 <write_data+0x5a0>
 554:	ldr	r3, [sp, #40]	; 0x28
 558:	mov	lr, #0
 55c:	add	r2, r0, r3
 560:	add	r3, sp, #104	; 0x68
 564:	add	r0, r3, r0, lsl #2
 568:	add	r2, sl, r2, lsl #2
 56c:	add	r2, r2, #844	; 0x34c
 570:	sub	r0, r0, #40	; 0x28
 574:	b	590 <write_data+0x590>
 578:	ldr	r3, [r2, #-4]
 57c:	ldr	ip, [r0], #-4
 580:	add	r3, r3, #1
 584:	cmp	r3, ip
 588:	str	r3, [r2, #-4]!
 58c:	bne	5a0 <write_data+0x5a0>
 590:	sub	r1, r1, #1
 594:	cmn	r1, #1
 598:	str	lr, [r2]
 59c:	bne	578 <write_data+0x578>
 5a0:	add	r6, r6, #1
 5a4:	cmp	r6, r7
 5a8:	bne	4a8 <write_data+0x4a8>
 5ac:	b	1c0 <write_data+0x1c0>
 5b0:	bl	0 <handle_coda_error>
 5b4:	b	4d8 <write_data+0x4d8>
 5b8:	add	r1, sp, #64	; 0x40
 5bc:	ldr	r0, [pc, #1272]	; abc <write_data+0xabc>
 5c0:	bl	0 <coda_cursor_read_double>
 5c4:	cmp	r0, #0
 5c8:	bne	930 <write_data+0x930>
 5cc:	ldr	r3, [sp, #60]	; 0x3c
 5d0:	cmp	r3, #2
 5d4:	bne	5e8 <write_data+0x5e8>
 5d8:	ldr	r3, [pc, #1284]	; ae4 <write_data+0xae4>
 5dc:	ldr	r3, [r3]
 5e0:	cmp	r3, #0
 5e4:	bne	958 <write_data+0x958>
 5e8:	ldrd	r2, [sp, #64]	; 0x40
 5ec:	ldr	r1, [pc, #1268]	; ae8 <write_data+0xae8>
 5f0:	mov	r0, fp
 5f4:	bl	0 <fprintf>
 5f8:	b	244 <write_data+0x244>
 5fc:	add	r1, sp, #72	; 0x48
 600:	ldr	r0, [pc, #1204]	; abc <write_data+0xabc>
 604:	bl	0 <coda_cursor_read_char>
 608:	cmp	r0, #0
 60c:	bne	9d0 <write_data+0x9d0>
 610:	ldr	r3, [pc, #1192]	; ac0 <write_data+0xac0>
 614:	ldr	r3, [r3]
 618:	cmp	r3, #0
 61c:	beq	9b8 <write_data+0x9b8>
 620:	ldrb	r2, [sp, #72]	; 0x48
 624:	ldr	r1, [pc, #1216]	; aec <write_data+0xaec>
 628:	mov	r0, fp
 62c:	bl	0 <fprintf>
 630:	b	244 <write_data+0x244>
 634:	add	r1, sp, #72	; 0x48
 638:	ldr	r0, [pc, #1148]	; abc <write_data+0xabc>
 63c:	bl	0 <coda_cursor_read_double>
 640:	cmp	r0, #0
 644:	bne	9f0 <write_data+0x9f0>
 648:	ldr	r3, [sp, #60]	; 0x3c
 64c:	cmp	r3, #8
 650:	ldrd	r2, [sp, #72]	; 0x48
 654:	bne	5ec <write_data+0x5ec>
 658:	ldr	r1, [pc, #1168]	; af0 <write_data+0xaf0>
 65c:	mov	r0, fp
 660:	bl	0 <fprintf>
 664:	b	244 <write_data+0x244>
 668:	add	r1, sp, #72	; 0x48
 66c:	ldr	r0, [pc, #1096]	; abc <write_data+0xabc>
 670:	bl	0 <coda_cursor_get_bit_size>
 674:	cmp	r0, #0
 678:	bne	9c8 <write_data+0x9c8>
 67c:	ldrd	r4, [sp, #72]	; 0x48
 680:	mov	r3, #0
 684:	and	r2, r4, #7
 688:	orrs	r3, r2, r3
 68c:	lsr	r6, r4, #3
 690:	movne	r3, #1
 694:	moveq	r3, #0
 698:	orr	r6, r6, r5, lsl #29
 69c:	adds	r6, r6, r3
 6a0:	asr	r7, r5, #3
 6a4:	mov	r0, r6
 6a8:	adc	r7, r7, #0
 6ac:	bl	0 <malloc>
 6b0:	subs	r9, r0, #0
 6b4:	beq	a88 <write_data+0xa88>
 6b8:	strd	r4, [sp]
 6bc:	mov	r2, #0
 6c0:	mov	r3, #0
 6c4:	mov	r1, r9
 6c8:	ldr	r0, [pc, #1004]	; abc <write_data+0xabc>
 6cc:	bl	0 <coda_cursor_read_bits>
 6d0:	cmp	r0, #0
 6d4:	bne	a00 <write_data+0xa00>
 6d8:	cmp	r6, #1
 6dc:	sbcs	r3, r7, #0
 6e0:	blt	91c <write_data+0x91c>
 6e4:	ldr	sl, [pc, #1032]	; af4 <write_data+0xaf4>
 6e8:	sub	r8, r9, #1
 6ec:	mov	r4, #0
 6f0:	mov	r5, #0
 6f4:	b	73c <write_data+0x73c>
 6f8:	cmp	r2, #12
 6fc:	beq	8bc <write_data+0x8bc>
 700:	bcc	8a4 <write_data+0x8a4>
 704:	cmp	r2, #13
 708:	beq	88c <write_data+0x88c>
 70c:	cmp	r2, #92	; 0x5c
 710:	bne	870 <write_data+0x870>
 714:	mov	r3, fp
 718:	mov	r2, #2
 71c:	mov	r1, #1
 720:	ldr	r0, [pc, #976]	; af8 <write_data+0xaf8>
 724:	bl	0 <fwrite>
 728:	adds	r4, r4, #1
 72c:	adc	r5, r5, #0
 730:	cmp	r7, r5
 734:	cmpeq	r6, r4
 738:	beq	91c <write_data+0x91c>
 73c:	ldrb	r2, [r8, #1]!
 740:	cmp	r2, #10
 744:	beq	904 <write_data+0x904>
 748:	bhi	6f8 <write_data+0x6f8>
 74c:	cmp	r2, #8
 750:	beq	8ec <write_data+0x8ec>
 754:	bhi	8d4 <write_data+0x8d4>
 758:	cmp	r2, #7
 75c:	bne	870 <write_data+0x870>
 760:	mov	r3, fp
 764:	mov	r2, #2
 768:	mov	r1, #1
 76c:	ldr	r0, [pc, #904]	; afc <write_data+0xafc>
 770:	bl	0 <fwrite>
 774:	b	728 <write_data+0x728>
 778:	add	r1, sp, #72	; 0x48
 77c:	ldr	r0, [pc, #824]	; abc <write_data+0xabc>
 780:	bl	0 <coda_cursor_read_uint32>
 784:	cmp	r0, #0
 788:	bne	a08 <write_data+0xa08>
 78c:	ldr	r2, [sp, #72]	; 0x48
 790:	ldr	r1, [pc, #872]	; b00 <write_data+0xb00>
 794:	mov	r0, fp
 798:	bl	0 <fprintf>
 79c:	b	244 <write_data+0x244>
 7a0:	add	r1, sp, #72	; 0x48
 7a4:	ldr	r0, [pc, #784]	; abc <write_data+0xabc>
 7a8:	bl	0 <coda_cursor_read_int32>
 7ac:	cmp	r0, #0
 7b0:	bne	9f8 <write_data+0x9f8>
 7b4:	ldr	r2, [sp, #72]	; 0x48
 7b8:	ldr	r1, [pc, #836]	; b04 <write_data+0xb04>
 7bc:	mov	r0, fp
 7c0:	bl	0 <fprintf>
 7c4:	b	244 <write_data+0x244>
 7c8:	add	r1, sp, #64	; 0x40
 7cc:	ldr	r0, [pc, #744]	; abc <write_data+0xabc>
 7d0:	bl	0 <coda_cursor_read_uint64>
 7d4:	cmp	r0, #0
 7d8:	bne	a10 <write_data+0xa10>
 7dc:	ldrd	r0, [sp, #64]	; 0x40
 7e0:	add	r2, sp, #72	; 0x48
 7e4:	bl	0 <coda_str64u>
 7e8:	mov	r1, fp
 7ec:	add	r0, sp, #72	; 0x48
 7f0:	bl	0 <fputs>
 7f4:	b	244 <write_data+0x244>
 7f8:	add	r1, sp, #64	; 0x40
 7fc:	ldr	r0, [pc, #696]	; abc <write_data+0xabc>
 800:	bl	0 <coda_cursor_read_int64>
 804:	cmp	r0, #0
 808:	bne	9d8 <write_data+0x9d8>
 80c:	ldrd	r0, [sp, #64]	; 0x40
 810:	add	r2, sp, #72	; 0x48
 814:	bl	0 <coda_str64>
 818:	mov	r1, fp
 81c:	add	r0, sp, #72	; 0x48
 820:	bl	0 <fputs>
 824:	b	244 <write_data+0x244>
 828:	ldr	r3, [pc, #672]	; ad0 <write_data+0xad0>
 82c:	ldr	r2, [pc, #724]	; b08 <write_data+0xb08>
 830:	ldr	r1, [pc, #668]	; ad4 <write_data+0xad4>
 834:	ldr	r0, [pc, #668]	; ad8 <write_data+0xad8>
 838:	bl	0 <__assert_fail>
 83c:	ldr	r0, [pc, #632]	; abc <write_data+0xabc>
 840:	bl	0 <coda_cursor_goto_first_array_element>
 844:	mov	r7, #1
 848:	cmp	r0, #0
 84c:	beq	470 <write_data+0x470>
 850:	bl	0 <handle_coda_error>
 854:	b	468 <write_data+0x468>
 858:	bl	0 <handle_coda_error>
 85c:	b	1ac <write_data+0x1ac>
 860:	bl	0 <handle_coda_error>
 864:	b	2a0 <write_data+0x2a0>
 868:	bl	0 <handle_coda_error>
 86c:	b	310 <write_data+0x310>
 870:	sub	r3, r2, #32
 874:	cmp	r3, #94	; 0x5e
 878:	bhi	938 <write_data+0x938>
 87c:	mov	r0, r2
 880:	mov	r1, fp
 884:	bl	0 <fputc>
 888:	b	728 <write_data+0x728>
 88c:	mov	r3, fp
 890:	mov	r2, #2
 894:	mov	r1, #1
 898:	ldr	r0, [pc, #620]	; b0c <write_data+0xb0c>
 89c:	bl	0 <fwrite>
 8a0:	b	728 <write_data+0x728>
 8a4:	mov	r3, fp
 8a8:	mov	r2, #2
 8ac:	mov	r1, #1
 8b0:	ldr	r0, [pc, #600]	; b10 <write_data+0xb10>
 8b4:	bl	0 <fwrite>
 8b8:	b	728 <write_data+0x728>
 8bc:	mov	r3, fp
 8c0:	mov	r2, #2
 8c4:	mov	r1, #1
 8c8:	ldr	r0, [pc, #580]	; b14 <write_data+0xb14>
 8cc:	bl	0 <fwrite>
 8d0:	b	728 <write_data+0x728>
 8d4:	mov	r3, fp
 8d8:	mov	r2, #2
 8dc:	mov	r1, #1
 8e0:	ldr	r0, [pc, #560]	; b18 <write_data+0xb18>
 8e4:	bl	0 <fwrite>
 8e8:	b	728 <write_data+0x728>
 8ec:	mov	r3, fp
 8f0:	mov	r2, #2
 8f4:	mov	r1, #1
 8f8:	ldr	r0, [pc, #540]	; b1c <write_data+0xb1c>
 8fc:	bl	0 <fwrite>
 900:	b	728 <write_data+0x728>
 904:	mov	r3, fp
 908:	mov	r2, #2
 90c:	mov	r1, #1
 910:	mov	r0, sl
 914:	bl	0 <fwrite>
 918:	b	728 <write_data+0x728>
 91c:	mov	r0, r9
 920:	bl	0 <free>
 924:	b	244 <write_data+0x244>
 928:	bl	0 <handle_coda_error>
 92c:	b	2d0 <write_data+0x2d0>
 930:	bl	0 <handle_coda_error>
 934:	b	5cc <write_data+0x5cc>
 938:	ldr	r1, [pc, #480]	; b20 <write_data+0xb20>
 93c:	mov	r0, fp
 940:	bl	0 <fprintf>
 944:	b	728 <write_data+0x728>
 948:	mov	r1, fp
 94c:	mov	r0, r4
 950:	bl	0 <fputs>
 954:	b	23c <write_data+0x23c>
 958:	vldr	d0, [sp, #64]	; 0x40
 95c:	bl	0 <coda_isNaN>
 960:	cmp	r0, #0
 964:	beq	a28 <write_data+0xa28>
 968:	ldr	lr, [pc, #436]	; b24 <write_data+0xb24>
 96c:	add	r3, sp, #72	; 0x48
 970:	mov	ip, r3
 974:	str	r3, [sp, #24]
 978:	ldm	lr!, {r0, r1, r2, r3}
 97c:	stmia	ip!, {r0, r1, r2, r3}
 980:	ldm	lr, {r0, r1, r2}
 984:	lsr	r3, r2, #16
 988:	stmia	ip!, {r0, r1}
 98c:	strh	r2, [ip], #2
 990:	strb	r3, [ip]
 994:	ldr	r3, [pc, #292]	; ac0 <write_data+0xac0>
 998:	ldr	r3, [r3]
 99c:	cmp	r3, #0
 9a0:	beq	a18 <write_data+0xa18>
 9a4:	ldr	r2, [sp, #24]
 9a8:	ldr	r1, [pc, #276]	; ac4 <write_data+0xac4>
 9ac:	mov	r0, fp
 9b0:	bl	0 <fprintf>
 9b4:	b	244 <write_data+0x244>
 9b8:	mov	r1, fp
 9bc:	ldrb	r0, [sp, #72]	; 0x48
 9c0:	bl	0 <fputc>
 9c4:	b	244 <write_data+0x244>
 9c8:	bl	0 <handle_coda_error>
 9cc:	b	67c <write_data+0x67c>
 9d0:	bl	0 <handle_coda_error>
 9d4:	b	610 <write_data+0x610>
 9d8:	bl	0 <handle_coda_error>
 9dc:	b	80c <write_data+0x80c>
 9e0:	bl	0 <handle_coda_error>
 9e4:	b	21c <write_data+0x21c>
 9e8:	bl	0 <handle_coda_error>
 9ec:	b	1ec <write_data+0x1ec>
 9f0:	bl	0 <handle_coda_error>
 9f4:	b	648 <write_data+0x648>
 9f8:	bl	0 <handle_coda_error>
 9fc:	b	7b4 <write_data+0x7b4>
 a00:	bl	0 <handle_coda_error>
 a04:	b	6d8 <write_data+0x6d8>
 a08:	bl	0 <handle_coda_error>
 a0c:	b	78c <write_data+0x78c>
 a10:	bl	0 <handle_coda_error>
 a14:	b	7dc <write_data+0x7dc>
 a18:	ldr	r0, [sp, #24]
 a1c:	mov	r1, fp
 a20:	bl	0 <fputs>
 a24:	b	244 <write_data+0x244>
 a28:	vldr	d0, [sp, #64]	; 0x40
 a2c:	bl	0 <coda_isInf>
 a30:	cmp	r0, #0
 a34:	bne	968 <write_data+0x968>
 a38:	add	r3, sp, #72	; 0x48
 a3c:	mov	r1, r3
 a40:	ldr	r0, [pc, #224]	; b28 <write_data+0xb28>
 a44:	vldr	d0, [sp, #64]	; 0x40
 a48:	str	r3, [sp, #24]
 a4c:	bl	0 <coda_time_double_to_string>
 a50:	cmp	r0, #0
 a54:	beq	994 <write_data+0x994>
 a58:	bl	0 <handle_coda_error>
 a5c:	b	994 <write_data+0x994>
 a60:	ldr	r2, [sp, #72]	; 0x48
 a64:	mov	r3, #126	; 0x7e
 a68:	add	r2, r2, #1
 a6c:	str	r3, [sp]
 a70:	ldr	r1, [pc, #180]	; b2c <write_data+0xb2c>
 a74:	ldr	r3, [pc, #88]	; ad4 <write_data+0xad4>
 a78:	mvn	r0, #0
 a7c:	bl	0 <coda_set_error>
 a80:	bl	0 <handle_coda_error>
 a84:	b	200 <write_data+0x200>
 a88:	mov	r3, #163	; 0xa3
 a8c:	str	r3, [sp]
 a90:	mov	r2, r6
 a94:	ldr	r3, [pc, #56]	; ad4 <write_data+0xad4>
 a98:	ldr	r1, [pc, #140]	; b2c <write_data+0xb2c>
 a9c:	mvn	r0, #0
 aa0:	bl	0 <coda_set_error>
 aa4:	bl	0 <handle_coda_error>
 aa8:	ldrd	r4, [sp, #72]	; 0x48
 aac:	b	6b8 <write_data+0x6b8>
	...
 abc:	.word	0x00000090
 ac0:	.word	0x00000000
 ac4:	.word	0x0000009c
 ac8:	.word	0x00000000
 acc:	.word	0x00000104
 ad0:	.word	0x00000000
 ad4:	.word	0x00000010
 ad8:	.word	0x000000e4
 adc:	.word	0x00000004
	...
 ae8:	.word	0x000000dc
 aec:	.word	0x00000008
 af0:	.word	0x000000d4
 af4:	.word	0x000000b0
 af8:	.word	0x000000c0
 afc:	.word	0x000000a4
 b00:	.word	0x000000d0
 b04:	.word	0x000000cc
 b08:	.word	0x00000126
 b0c:	.word	0x000000bc
 b10:	.word	0x000000b4
 b14:	.word	0x000000b8
 b18:	.word	0x000000ac
 b1c:	.word	0x000000a8
 b20:	.word	0x000000c4
 b24:	.word	0x0000010c
 b28:	.word	0x000000e8
 b2c:	.word	0x00000064

00000b30 <export_data_element_to_ascii>:
 b30:	ldr	r3, [pc, #172]	; be4 <export_data_element_to_ascii+0xb4>
 b34:	push	{r4, lr}
 b38:	ldr	r2, [r3]
 b3c:	cmp	r2, #0
 b40:	beq	ba0 <export_data_element_to_ascii+0x70>
 b44:	mov	r2, #0
 b48:	str	r2, [r3]
 b4c:	ldr	r3, [pc, #148]	; be8 <export_data_element_to_ascii+0xb8>
 b50:	ldr	r3, [r3]
 b54:	cmp	r3, #0
 b58:	bne	bc0 <export_data_element_to_ascii+0x90>
 b5c:	ldr	r2, [pc, #136]	; bec <export_data_element_to_ascii+0xbc>
 b60:	ldr	r3, [r2]
 b64:	cmp	r3, #0
 b68:	ble	b84 <export_data_element_to_ascii+0x54>
 b6c:	add	r3, r3, #37	; 0x25
 b70:	lsl	r3, r3, #3
 b74:	add	r2, r2, r3
 b78:	ldrd	r2, [r2]
 b7c:	orrs	r3, r2, r3
 b80:	popeq	{r4, pc}
 b84:	ldr	r1, [pc, #100]	; bf0 <export_data_element_to_ascii+0xc0>
 b88:	mov	r3, #0
 b8c:	mov	r2, r3
 b90:	ldr	r0, [r1]
 b94:	pop	{r4, lr}
 b98:	mov	r1, r3
 b9c:	b	0 <write_data>
 ba0:	ldr	r3, [pc, #72]	; bf0 <export_data_element_to_ascii+0xc0>
 ba4:	mov	r0, #10
 ba8:	ldr	r1, [r3]
 bac:	bl	0 <fputc>
 bb0:	ldr	r3, [pc, #48]	; be8 <export_data_element_to_ascii+0xb8>
 bb4:	ldr	r3, [r3]
 bb8:	cmp	r3, #0
 bbc:	beq	b5c <export_data_element_to_ascii+0x2c>
 bc0:	ldr	r4, [pc, #40]	; bf0 <export_data_element_to_ascii+0xc0>
 bc4:	mov	r2, #0
 bc8:	mov	r1, #2
 bcc:	ldr	r0, [r4]
 bd0:	bl	0 <print_full_field_name>
 bd4:	ldr	r1, [r4]
 bd8:	mov	r0, #10
 bdc:	bl	0 <fputc>
 be0:	b	b5c <export_data_element_to_ascii+0x2c>
	...
