
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-cdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_cdf_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_cdf_cursor_goto_array_element>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	sub	sp, sp, #40	; 0x28
  34:	mov	r5, r0
  38:	ldr	r0, [r0, #4]
  3c:	add	r4, sp, #4
  40:	mov	r7, r2
  44:	mov	r6, r1
  48:	sub	r1, fp, #28
  4c:	mov	r2, r4
  50:	add	r0, r5, r0, lsl #4
  54:	ldr	r0, [r0, #-8]
  58:	ldr	r0, [r0, #4]
  5c:	bl	0 <coda_type_get_array_dim>
  60:	mvn	r8, #0
  64:	cmp	r0, #0
  68:	bne	114 <coda_cdf_cursor_goto_array_element+0xec>
  6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
  70:	cmp	r3, r6
  74:	bne	f0 <coda_cdf_cursor_goto_array_element+0xc8>
  78:	cmp	r6, #1
  7c:	mov	r0, #0
  80:	blt	bc <coda_cdf_cursor_goto_array_element+0x94>
  84:	mov	r1, #0
  88:	mov	r0, #0
  8c:	ldr	r2, [r7, r1, lsl #2]
  90:	ldr	r3, [r4, r1, lsl #2]
  94:	cmp	r2, #0
  98:	blt	104 <coda_cdf_cursor_goto_array_element+0xdc>
  9c:	cmp	r2, r3
  a0:	bge	104 <coda_cdf_cursor_goto_array_element+0xdc>
  a4:	cmp	r1, #0
  a8:	add	r1, r1, #1
  ac:	movweq	r3, #1
  b0:	cmp	r1, r6
  b4:	mla	r0, r3, r0, r2
  b8:	blt	8c <coda_cdf_cursor_goto_array_element+0x64>
  bc:	ldr	r1, [r5, #4]
  c0:	mov	r8, #0
  c4:	add	r2, r5, r1, lsl #4
  c8:	add	r1, r1, #1
  cc:	ldr	r3, [r2, #-8]
  d0:	ldr	r3, [r3, #16]
  d4:	str	r1, [r5, #4]
  d8:	mvn	r1, #0
  dc:	str	r3, [r2, #8]
  e0:	str	r0, [r2, #12]
  e4:	str	r1, [r2, #16]
  e8:	str	r1, [r2, #20]
  ec:	b	114 <coda_cdf_cursor_goto_array_element+0xec>
  f0:	movw	r1, #0
  f4:	mvn	r0, #105	; 0x69
  f8:	mov	r2, r6
  fc:	movt	r1, #0
 100:	b	110 <coda_cdf_cursor_goto_array_element+0xe8>
 104:	movw	r1, #0
 108:	mvn	r0, #106	; 0x6a
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mov	r0, r8
 118:	sub	sp, fp, #24
 11c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000120 <coda_cdf_cursor_goto_array_element_by_index>:
 120:	push	{r4, r5, fp, lr}
 124:	add	fp, sp, #8
 128:	mov	r5, r1
 12c:	mov	r1, r0
 130:	ldr	r0, [pc, #124]	; 1b4 <coda_cdf_cursor_goto_array_element_by_index+0x94>
 134:	ldr	r2, [pc, r0]
 138:	bl	0 <__aeabi_read_tp>
 13c:	ldr	r3, [r0, r2]
 140:	ldr	r2, [r1, #4]
 144:	add	r0, r1, r2, lsl #4
 148:	cmp	r3, #0
 14c:	sub	r4, r0, #8
 150:	beq	188 <coda_cdf_cursor_goto_array_element_by_index+0x68>
 154:	ldr	r3, [r4]
 158:	cmp	r5, #0
 15c:	ldr	r3, [r3, #4]
 160:	ldr	r3, [r3, #44]	; 0x2c
 164:	cmpge	r3, r5
 168:	bgt	188 <coda_cdf_cursor_goto_array_element_by_index+0x68>
 16c:	movw	r1, #0
 170:	mvn	r0, #106	; 0x6a
 174:	mov	r2, r5
 178:	movt	r1, #0
 17c:	bl	0 <coda_set_error>
 180:	mvn	r0, #0
 184:	pop	{r4, r5, fp, pc}
 188:	ldr	r3, [r4]
 18c:	add	r2, r2, #1
 190:	ldr	r3, [r3, #16]
 194:	str	r2, [r1, #4]
 198:	mvn	r1, #0
 19c:	str	r3, [r0, #8]
 1a0:	str	r5, [r0, #12]
 1a4:	str	r1, [r0, #16]
 1a8:	str	r1, [r0, #20]
 1ac:	mov	r0, #0
 1b0:	pop	{r4, r5, fp, pc}
 1b4:	.word	0x00000078

000001b8 <coda_cdf_cursor_goto_next_array_element>:
 1b8:	push	{fp, lr}
 1bc:	mov	fp, sp
 1c0:	mov	r1, r0
 1c4:	ldr	r0, [pc, #108]	; 238 <coda_cdf_cursor_goto_next_array_element+0x80>
 1c8:	ldr	r2, [pc, r0]
 1cc:	bl	0 <__aeabi_read_tp>
 1d0:	ldr	r2, [r0, r2]
 1d4:	ldr	r0, [r1, #4]
 1d8:	add	r1, r1, r0, lsl #4
 1dc:	cmp	r2, #0
 1e0:	sub	r0, r1, #4
 1e4:	beq	20c <coda_cdf_cursor_goto_next_array_element+0x54>
 1e8:	ldr	r1, [r1, #-24]	; 0xffffffe8
 1ec:	ldr	r1, [r1, #4]
 1f0:	ldr	r3, [r1, #44]	; 0x2c
 1f4:	ldr	r1, [r0]
 1f8:	add	r2, r1, #1
 1fc:	cmn	r1, #1
 200:	blt	220 <coda_cdf_cursor_goto_next_array_element+0x68>
 204:	cmp	r2, r3
 208:	bge	220 <coda_cdf_cursor_goto_next_array_element+0x68>
 20c:	ldr	r1, [r0]
 210:	add	r1, r1, #1
 214:	str	r1, [r0]
 218:	mov	r0, #0
 21c:	pop	{fp, pc}
 220:	movw	r1, #0
 224:	mvn	r0, #106	; 0x6a
 228:	movt	r1, #0
 22c:	bl	0 <coda_set_error>
 230:	mvn	r0, #0
 234:	pop	{fp, pc}
 238:	.word	0x00000068

0000023c <coda_cdf_cursor_goto_attributes>:
 23c:	push	{r4, sl, fp, lr}
 240:	add	fp, sp, #8
 244:	ldr	r1, [r0, #4]
 248:	mov	r4, r0
 24c:	add	r0, r0, r1, lsl #4
 250:	add	r3, r1, #1
 254:	ldr	r2, [r0, #-8]
 258:	str	r3, [r4, #4]
 25c:	ldr	r3, [r2, #8]
 260:	cmp	r3, #2
 264:	bne	27c <coda_cdf_cursor_goto_attributes+0x40>
 268:	ldr	r2, [r2, #12]
 26c:	cmp	r2, #0
 270:	beq	27c <coda_cdf_cursor_goto_attributes+0x40>
 274:	str	r2, [r0, #8]
 278:	b	294 <coda_cdf_cursor_goto_attributes+0x58>
 27c:	mov	r0, #5
 280:	bl	0 <coda_mem_empty_record>
 284:	ldr	r1, [r4, #4]
 288:	sub	r1, r1, #1
 28c:	add	r2, r4, r1, lsl #4
 290:	str	r0, [r2, #8]
 294:	add	r0, r4, r1, lsl #4
 298:	mvn	r1, #0
 29c:	str	r1, [r0, #12]
 2a0:	str	r1, [r0, #16]
 2a4:	str	r1, [r0, #20]
 2a8:	mov	r0, #0
 2ac:	pop	{r4, sl, fp, pc}

000002b0 <coda_cdf_cursor_use_base_type_of_special_type>:
 2b0:	ldr	r1, [r0, #4]
 2b4:	add	r0, r0, r1, lsl #4
 2b8:	ldr	r1, [r0, #-8]
 2bc:	ldr	r1, [r1, #12]
 2c0:	str	r1, [r0, #-8]
 2c4:	mov	r0, #0
 2c8:	bx	lr

000002cc <coda_cdf_cursor_get_num_elements>:
 2cc:	ldr	r2, [r0, #4]
 2d0:	add	r0, r0, r2, lsl #4
 2d4:	ldr	r0, [r0, #-8]
 2d8:	ldr	r2, [r0, #4]
 2dc:	mov	r0, #1
 2e0:	ldr	r3, [r2, #8]
 2e4:	cmp	r3, #1
 2e8:	ldreq	r0, [r2, #44]	; 0x2c
 2ec:	str	r0, [r1]
 2f0:	mov	r0, #0
 2f4:	bx	lr

000002f8 <coda_cdf_cursor_get_string_length>:
 2f8:	ldr	r2, [r0, #4]
 2fc:	add	r0, r0, r2, lsl #4
 300:	ldr	r0, [r0, #-8]
 304:	ldr	r0, [r0, #4]
 308:	b	0 <coda_type_get_string_length>

0000030c <coda_cdf_cursor_get_array_dim>:
 30c:	ldr	r3, [r0, #4]
 310:	add	r0, r0, r3, lsl #4
 314:	ldr	r0, [r0, #-8]
 318:	ldr	r0, [r0, #4]
 31c:	b	0 <coda_type_get_array_dim>

00000320 <coda_cdf_cursor_read_int8>:
 320:	mvn	r2, #0
 324:	b	328 <read_basic_type>

00000328 <read_basic_type>:
 328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 32c:	add	fp, sp, #28
 330:	sub	sp, sp, #12
 334:	mov	r8, r1
 338:	ldr	r1, [r0, #4]
 33c:	mov	sl, r0
 340:	sub	r6, r1, #1
 344:	add	r0, r0, r6, lsl #4
 348:	ldr	r7, [r0, #8]
 34c:	mov	r0, #0
 350:	ldr	r3, [r7, #8]
 354:	cmp	r3, #0
 358:	bne	374 <read_basic_type+0x4c>
 35c:	add	r3, sl, #8
 360:	add	r1, r3, r1, lsl #4
 364:	add	r0, r3, r6, lsl #4
 368:	ldr	r7, [r1, #-32]	; 0xffffffe0
 36c:	ldr	r0, [r0, #4]
 370:	ldr	r3, [r7, #8]
 374:	cmp	r3, #2
 378:	bne	520 <read_basic_type+0x1f8>
 37c:	ldr	r1, [r7, #16]
 380:	ldr	r3, [r7, #24]
 384:	ldr	r5, [r7, #36]	; 0x24
 388:	cmp	r1, #0
 38c:	sdiv	r4, r0, r3
 390:	ldrne	r1, [r1, #4]
 394:	ldr	r6, [r5, r4, lsl #3]!
 398:	ldreq	r1, [r7, #4]
 39c:	ldr	r5, [r5, #4]
 3a0:	add	ip, r1, #8
 3a4:	cmn	r5, #1
 3a8:	ble	460 <read_basic_type+0x138>
 3ac:	ldr	r1, [r7, #28]
 3b0:	mls	r0, r4, r3, r0
 3b4:	ldr	r9, [ip]
 3b8:	mul	r0, r0, r1
 3bc:	mov	r4, r1
 3c0:	adds	r6, r6, r0
 3c4:	adc	r3, r5, r0, asr #31
 3c8:	ldr	r0, [r7, #40]	; 0x28
 3cc:	cmp	r1, r2
 3d0:	movgt	r4, r2
 3d4:	cmn	r2, #1
 3d8:	movle	r4, r1
 3dc:	cmp	r0, #0
 3e0:	beq	47c <read_basic_type+0x154>
 3e4:	add	r1, r0, r6
 3e8:	mov	r0, r8
 3ec:	mov	r2, r4
 3f0:	bl	0 <memcpy>
 3f4:	mov	r0, #0
 3f8:	cmp	r9, #4
 3fc:	beq	4a8 <read_basic_type+0x180>
 400:	ldr	r1, [sl]
 404:	ldr	r1, [r1, #68]	; 0x44
 408:	cmp	r1, #0
 40c:	bne	4a8 <read_basic_type+0x180>
 410:	ldr	r1, [r7, #28]
 414:	sub	r1, r1, #1
 418:	cmp	r1, #7
 41c:	bhi	540 <read_basic_type+0x218>
 420:	add	r2, pc, #0
 424:	ldr	pc, [r2, r1, lsl #2]
 428:	.word	0x000004a8
 42c:	.word	0x00000448
 430:	.word	0x00000540
 434:	.word	0x000004f8
 438:	.word	0x00000540
 43c:	.word	0x00000540
 440:	.word	0x00000540
 444:	.word	0x000004b0
 448:	ldrb	r1, [r8]
 44c:	ldrb	r2, [r8, #1]
 450:	strb	r1, [r8, #1]
 454:	strb	r2, [r8]
 458:	sub	sp, fp, #28
 45c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 460:	movw	r1, #0
 464:	mvn	r0, #199	; 0xc7
 468:	movt	r1, #0
 46c:	bl	0 <coda_set_error>
 470:	mvn	r0, #0
 474:	sub	sp, fp, #28
 478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 47c:	ldr	r0, [sl]
 480:	asr	r1, r4, #31
 484:	mov	r2, r6
 488:	ldr	r0, [r0, #52]	; 0x34
 48c:	str	r4, [sp]
 490:	stmib	sp, {r1, r8}
 494:	bl	c9c <read_bytes>
 498:	mov	r1, r0
 49c:	mvn	r0, #0
 4a0:	cmp	r1, #0
 4a4:	beq	3f4 <read_basic_type+0xcc>
 4a8:	sub	sp, fp, #28
 4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4b0:	ldrb	r1, [r8, #7]
 4b4:	ldrb	r2, [r8]
 4b8:	ldrb	r3, [r8, #1]
 4bc:	ldrb	r7, [r8, #2]
 4c0:	ldrb	r6, [r8, #3]
 4c4:	strb	r2, [r8, #7]
 4c8:	strb	r1, [r8]
 4cc:	ldrb	r1, [r8, #6]
 4d0:	strb	r1, [r8, #1]
 4d4:	strb	r3, [r8, #6]
 4d8:	ldrb	r1, [r8, #5]
 4dc:	strb	r1, [r8, #2]
 4e0:	strb	r7, [r8, #5]
 4e4:	ldrb	r1, [r8, #4]
 4e8:	strb	r6, [r8, #4]
 4ec:	strb	r1, [r8, #3]
 4f0:	sub	sp, fp, #28
 4f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4f8:	ldrb	r1, [r8]
 4fc:	ldrb	r2, [r8, #1]
 500:	ldrb	r3, [r8, #2]
 504:	ldrb	r7, [r8, #3]
 508:	strb	r1, [r8, #3]
 50c:	strb	r7, [r8]
 510:	strb	r3, [r8, #1]
 514:	strb	r2, [r8, #2]
 518:	sub	sp, fp, #28
 51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 520:	movw	r0, #0
 524:	movw	r1, #0
 528:	movw	r3, #0
 52c:	movw	r2, #403	; 0x193
 530:	movt	r0, #0
 534:	movt	r1, #0
 538:	movt	r3, #0
 53c:	bl	0 <__assert_fail>
 540:	movw	r0, #0
 544:	movw	r1, #0
 548:	movw	r3, #0
 54c:	movw	r2, #462	; 0x1ce
 550:	movt	r0, #0
 554:	movt	r1, #0
 558:	movt	r3, #0
 55c:	bl	0 <__assert_fail>

00000560 <coda_cdf_cursor_read_uint8>:
 560:	mvn	r2, #0
 564:	b	328 <read_basic_type>

00000568 <coda_cdf_cursor_read_int16>:
 568:	mvn	r2, #0
 56c:	b	328 <read_basic_type>

00000570 <coda_cdf_cursor_read_uint16>:
 570:	mvn	r2, #0
 574:	b	328 <read_basic_type>

00000578 <coda_cdf_cursor_read_int32>:
 578:	mvn	r2, #0
 57c:	b	328 <read_basic_type>

00000580 <coda_cdf_cursor_read_uint32>:
 580:	mvn	r2, #0
 584:	b	328 <read_basic_type>

00000588 <coda_cdf_cursor_read_int64>:
 588:	mvn	r2, #0
 58c:	b	328 <read_basic_type>

00000590 <coda_cdf_cursor_read_float>:
 590:	mvn	r2, #0
 594:	b	328 <read_basic_type>

00000598 <coda_cdf_cursor_read_double>:
 598:	mvn	r2, #0
 59c:	b	328 <read_basic_type>

000005a0 <coda_cdf_cursor_read_char>:
 5a0:	mvn	r2, #0
 5a4:	b	328 <read_basic_type>

000005a8 <coda_cdf_cursor_read_string>:
 5a8:	push	{r4, r5, fp, lr}
 5ac:	add	fp, sp, #8
 5b0:	mov	r4, r2
 5b4:	mov	r5, r1
 5b8:	bl	328 <read_basic_type>
 5bc:	mov	r1, r0
 5c0:	mvn	r0, #0
 5c4:	cmp	r1, #0
 5c8:	moveq	r0, #0
 5cc:	addeq	r1, r5, r4
 5d0:	strbeq	r0, [r1, #-1]
 5d4:	pop	{r4, r5, fp, pc}

000005d8 <coda_cdf_cursor_read_int8_array>:
 5d8:	b	5dc <read_array>

000005dc <read_array>:
 5dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5e0:	add	fp, sp, #28
 5e4:	sub	sp, sp, #20
 5e8:	mov	sl, r0
 5ec:	ldr	r0, [r0, #4]
 5f0:	add	r0, sl, r0, lsl #4
 5f4:	ldr	r4, [r0, #-8]
 5f8:	ldr	r0, [r4, #8]
 5fc:	cmp	r0, #2
 600:	bne	858 <read_array+0x27c>
 604:	ldr	r3, [r4, #16]
 608:	str	r1, [sp, #16]
 60c:	ldr	r0, [r4, #24]
 610:	ldr	r2, [r4, #28]
 614:	cmp	r3, #0
 618:	ldrne	r1, [r3, #4]
 61c:	ldreq	r1, [r4, #4]
 620:	add	r3, r1, #8
 624:	ldr	r1, [r4, #20]
 628:	ldr	r3, [r3]
 62c:	cmp	r1, #1
 630:	str	r3, [sp, #12]
 634:	blt	6b4 <read_array+0xd8>
 638:	ldr	r7, [sp, #16]
 63c:	mul	r6, r2, r0
 640:	mov	r5, #0
 644:	mov	r9, #0
 648:	asr	r8, r6, #31
 64c:	ldr	r0, [r4, #36]	; 0x24
 650:	ldr	r2, [r0, r5]!
 654:	ldr	r3, [r0, #4]
 658:	cmn	r3, #1
 65c:	ble	6dc <read_array+0x100>
 660:	ldr	r0, [r4, #40]	; 0x28
 664:	cmp	r0, #0
 668:	beq	680 <read_array+0xa4>
 66c:	add	r1, r0, r2
 670:	mov	r0, r7
 674:	mov	r2, r6
 678:	bl	0 <memcpy>
 67c:	b	69c <read_array+0xc0>
 680:	ldr	r0, [sl]
 684:	ldr	r0, [r0, #52]	; 0x34
 688:	stm	sp, {r6, r8}
 68c:	str	r7, [sp, #8]
 690:	bl	c9c <read_bytes>
 694:	cmp	r0, #0
 698:	bne	6ec <read_array+0x110>
 69c:	ldr	r1, [r4, #20]
 6a0:	add	r9, r9, #1
 6a4:	add	r7, r7, r6
 6a8:	add	r5, r5, #8
 6ac:	cmp	r9, r1
 6b0:	blt	64c <read_array+0x70>
 6b4:	ldr	r2, [sp, #12]
 6b8:	mov	r0, #0
 6bc:	cmp	r2, #4
 6c0:	beq	6d4 <read_array+0xf8>
 6c4:	ldr	r2, [sl]
 6c8:	ldr	r2, [r2, #68]	; 0x44
 6cc:	cmp	r2, #1
 6d0:	bne	6f8 <read_array+0x11c>
 6d4:	sub	sp, fp, #28
 6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 6dc:	movw	r1, #0
 6e0:	mvn	r0, #199	; 0xc7
 6e4:	movt	r1, #0
 6e8:	bl	0 <coda_set_error>
 6ec:	mvn	r0, #0
 6f0:	sub	sp, fp, #28
 6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 6f8:	ldr	r2, [r4, #28]
 6fc:	sub	r2, r2, #1
 700:	cmp	r2, #7
 704:	bhi	878 <read_array+0x29c>
 708:	add	r3, pc, #0
 70c:	ldr	pc, [r3, r2, lsl #2]
 710:	.word	0x000006d4
 714:	.word	0x00000730
 718:	.word	0x00000878
 71c:	.word	0x000007fc
 720:	.word	0x00000878
 724:	.word	0x00000878
 728:	.word	0x00000878
 72c:	.word	0x0000077c
 730:	ldr	r2, [r4, #24]
 734:	mul	r1, r2, r1
 738:	cmp	r1, #1
 73c:	blt	6d4 <read_array+0xf8>
 740:	ldr	r6, [sp, #16]
 744:	mov	r0, #0
 748:	mov	r1, #0
 74c:	mov	r2, r6
 750:	ldrb	r3, [r2, r1, lsl #1]!
 754:	add	r1, r1, #1
 758:	ldrb	r7, [r2, #1]
 75c:	strb	r7, [r2]
 760:	strb	r3, [r2, #1]
 764:	ldr	r2, [r4, #20]
 768:	ldr	r3, [r4, #24]
 76c:	mul	r2, r3, r2
 770:	cmp	r1, r2
 774:	blt	74c <read_array+0x170>
 778:	b	6d4 <read_array+0xf8>
 77c:	ldr	r2, [r4, #24]
 780:	mul	r1, r2, r1
 784:	cmp	r1, #1
 788:	blt	6d4 <read_array+0xf8>
 78c:	ldr	r0, [sp, #16]
 790:	mov	r2, #0
 794:	add	r1, r0, #3
 798:	mov	r0, #0
 79c:	ldrb	r3, [r1, #4]
 7a0:	ldrb	r7, [r1, #-3]
 7a4:	ldrb	r6, [r1, #-2]
 7a8:	ldrb	r5, [r1, #-1]
 7ac:	ldrb	ip, [r1]
 7b0:	add	r2, r2, #1
 7b4:	strb	r7, [r1, #4]
 7b8:	strb	r3, [r1, #-3]
 7bc:	ldrb	r3, [r1, #3]
 7c0:	strb	r3, [r1, #-2]
 7c4:	strb	r6, [r1, #3]
 7c8:	ldrb	r3, [r1, #2]
 7cc:	strb	r3, [r1, #-1]
 7d0:	strb	r5, [r1, #2]
 7d4:	ldrb	r3, [r1, #1]
 7d8:	strb	ip, [r1, #1]
 7dc:	strb	r3, [r1]
 7e0:	add	r1, r1, #8
 7e4:	ldr	r3, [r4, #20]
 7e8:	ldr	r7, [r4, #24]
 7ec:	mul	r3, r7, r3
 7f0:	cmp	r2, r3
 7f4:	blt	79c <read_array+0x1c0>
 7f8:	b	6d4 <read_array+0xf8>
 7fc:	ldr	r2, [r4, #24]
 800:	mul	r1, r2, r1
 804:	cmp	r1, #1
 808:	blt	6d4 <read_array+0xf8>
 80c:	ldr	ip, [sp, #16]
 810:	mov	r0, #0
 814:	mov	r1, #0
 818:	mov	r2, ip
 81c:	ldrb	r3, [r2, r1, lsl #2]!
 820:	add	r1, r1, #1
 824:	ldrb	r7, [r2, #1]
 828:	ldrb	r6, [r2, #2]
 82c:	ldrb	r5, [r2, #3]
 830:	strb	r5, [r2]
 834:	strb	r6, [r2, #1]
 838:	strb	r7, [r2, #2]
 83c:	strb	r3, [r2, #3]
 840:	ldr	r2, [r4, #20]
 844:	ldr	r3, [r4, #24]
 848:	mul	r2, r3, r2
 84c:	cmp	r1, r2
 850:	blt	818 <read_array+0x23c>
 854:	b	6d4 <read_array+0xf8>
 858:	movw	r0, #0
 85c:	movw	r1, #0
 860:	movw	r3, #0
 864:	mov	r2, #215	; 0xd7
 868:	movt	r0, #0
 86c:	movt	r1, #0
 870:	movt	r3, #0
 874:	bl	0 <__assert_fail>
 878:	movw	r0, #0
 87c:	movw	r1, #0
 880:	movw	r3, #0
 884:	movw	r2, #278	; 0x116
 888:	movt	r0, #0
 88c:	movt	r1, #0
 890:	movt	r3, #0
 894:	bl	0 <__assert_fail>

00000898 <coda_cdf_cursor_read_uint8_array>:
 898:	b	5dc <read_array>

0000089c <coda_cdf_cursor_read_int16_array>:
 89c:	b	5dc <read_array>

000008a0 <coda_cdf_cursor_read_uint16_array>:
 8a0:	b	5dc <read_array>

000008a4 <coda_cdf_cursor_read_int32_array>:
 8a4:	b	5dc <read_array>

000008a8 <coda_cdf_cursor_read_uint32_array>:
 8a8:	b	5dc <read_array>

000008ac <coda_cdf_cursor_read_int64_array>:
 8ac:	b	5dc <read_array>

000008b0 <coda_cdf_cursor_read_float_array>:
 8b0:	b	5dc <read_array>

000008b4 <coda_cdf_cursor_read_double_array>:
 8b4:	b	5dc <read_array>

000008b8 <coda_cdf_cursor_read_char_array>:
 8b8:	b	5dc <read_array>

000008bc <coda_cdf_cursor_read_int8_partial_array>:
 8bc:	b	8c0 <read_partial_array>

000008c0 <read_partial_array>:
 8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8c4:	add	fp, sp, #28
 8c8:	sub	sp, sp, #52	; 0x34
 8cc:	str	r3, [fp, #-36]	; 0xffffffdc
 8d0:	ldr	r3, [r0, #4]
 8d4:	str	r0, [sp, #24]
 8d8:	add	r0, r0, r3, lsl #4
 8dc:	ldr	r6, [r0, #-8]
 8e0:	ldr	r0, [r6, #8]
 8e4:	cmp	r0, #2
 8e8:	bne	c38 <read_partial_array+0x378>
 8ec:	ldr	r3, [r6, #16]
 8f0:	ldr	r0, [r6, #24]
 8f4:	str	r2, [sp, #16]
 8f8:	add	r2, r2, r1
 8fc:	ldr	r7, [r6, #28]
 900:	str	r2, [fp, #-32]	; 0xffffffe0
 904:	cmp	r3, #0
 908:	sdiv	r5, r2, r0
 90c:	sdiv	r8, r1, r0
 910:	ldrne	r3, [r3, #4]
 914:	str	r5, [sp, #40]	; 0x28
 918:	ldreq	r3, [r6, #4]
 91c:	cmp	r8, r5
 920:	add	r3, r3, #8
 924:	ldr	r2, [r3]
 928:	str	r2, [sp, #20]
 92c:	bgt	a44 <read_partial_array+0x184>
 930:	mul	r0, r7, r0
 934:	lsl	sl, r8, #3
 938:	mov	r9, #0
 93c:	mov	r7, #0
 940:	str	r1, [sp, #28]
 944:	str	r6, [sp, #32]
 948:	str	r0, [sp, #36]	; 0x24
 94c:	ldr	r0, [r6, #36]	; 0x24
 950:	ldr	lr, [r0, sl]!
 954:	ldr	r3, [r0, #4]
 958:	cmn	r3, #1
 95c:	ble	a70 <read_partial_array+0x1b0>
 960:	ldr	r2, [r6, #24]
 964:	ldr	r5, [fp, #-32]	; 0xffffffe0
 968:	ldr	r4, [sp, #36]	; 0x24
 96c:	mul	r0, r2, r8
 970:	add	r8, r8, #1
 974:	mul	r2, r2, r8
 978:	cmp	r5, r2
 97c:	ldrlt	r2, [fp, #-32]	; 0xffffffe0
 980:	ldrlt	r5, [r6, #28]
 984:	sublt	r2, r2, r0
 988:	mullt	r4, r5, r2
 98c:	cmp	r0, r1
 990:	bge	9b4 <read_partial_array+0xf4>
 994:	ldr	r2, [r6, #28]
 998:	sub	r0, r1, r0
 99c:	mul	r2, r2, r0
 9a0:	asr	r0, r4, #31
 9a4:	subs	r4, r4, r2
 9a8:	asr	ip, r2, #31
 9ac:	sbc	r1, r0, r2, asr #31
 9b0:	b	9c0 <read_partial_array+0x100>
 9b4:	asr	r1, r4, #31
 9b8:	mov	r2, #0
 9bc:	mov	ip, #0
 9c0:	ldr	r5, [r6, #40]	; 0x28
 9c4:	cmp	r5, #0
 9c8:	beq	9ec <read_partial_array+0x12c>
 9cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
 9d0:	mov	r6, r1
 9d4:	add	r1, r2, lr
 9d8:	mov	r2, r4
 9dc:	add	r1, r5, r1
 9e0:	add	r0, r0, r9
 9e4:	bl	0 <memcpy>
 9e8:	b	a20 <read_partial_array+0x160>
 9ec:	ldr	r0, [fp, #-36]	; 0xffffffdc
 9f0:	adds	r2, r2, lr
 9f4:	mov	r6, r1
 9f8:	adc	r3, ip, r3
 9fc:	add	r5, r0, r9
 a00:	ldr	r0, [sp, #24]
 a04:	ldr	r0, [r0]
 a08:	ldr	r0, [r0, #52]	; 0x34
 a0c:	str	r4, [sp]
 a10:	stmib	sp, {r1, r5}
 a14:	bl	c9c <read_bytes>
 a18:	cmp	r0, #0
 a1c:	bne	a80 <read_partial_array+0x1c0>
 a20:	ldr	r1, [sp, #40]	; 0x28
 a24:	adds	r9, r4, r9
 a28:	sub	r0, r8, #1
 a2c:	add	sl, sl, #8
 a30:	adc	r7, r6, r7
 a34:	ldr	r6, [sp, #32]
 a38:	cmp	r0, r1
 a3c:	ldr	r1, [sp, #28]
 a40:	blt	94c <read_partial_array+0x8c>
 a44:	ldr	r1, [sp, #20]
 a48:	mov	r0, #0
 a4c:	cmp	r1, #4
 a50:	beq	a68 <read_partial_array+0x1a8>
 a54:	ldr	r1, [sp, #24]
 a58:	ldr	r1, [r1]
 a5c:	ldr	r1, [r1, #68]	; 0x44
 a60:	cmp	r1, #1
 a64:	bne	a8c <read_partial_array+0x1cc>
 a68:	sub	sp, fp, #28
 a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a70:	movw	r1, #0
 a74:	mvn	r0, #199	; 0xc7
 a78:	movt	r1, #0
 a7c:	bl	0 <coda_set_error>
 a80:	mvn	r0, #0
 a84:	sub	sp, fp, #28
 a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a8c:	ldr	r1, [r6, #28]
 a90:	ldr	r4, [sp, #16]
 a94:	sub	r1, r1, #1
 a98:	cmp	r1, #7
 a9c:	bhi	c58 <read_partial_array+0x398>
 aa0:	add	r2, pc, #0
 aa4:	ldr	pc, [r2, r1, lsl #2]
 aa8:	.word	0x00000a68
 aac:	.word	0x00000ac8
 ab0:	.word	0x00000c58
 ab4:	.word	0x00000b9c
 ab8:	.word	0x00000c58
 abc:	.word	0x00000c58
 ac0:	.word	0x00000c58
 ac4:	.word	0x00000b3c
 ac8:	cmp	r4, #1
 acc:	blt	a68 <read_partial_array+0x1a8>
 ad0:	mov	r1, #0
 ad4:	cmp	r4, #16
 ad8:	bcc	b08 <read_partial_array+0x248>
 adc:	ldr	r2, [fp, #-36]	; 0xffffffdc
 ae0:	bic	r1, r4, #15
 ae4:	mov	r0, r1
 ae8:	vld2.8	{d16-d19}, [r2]
 aec:	subs	r0, r0, #16
 af0:	vorr	q10, q8, q8
 af4:	vst2.8	{d18-d21}, [r2]!
 af8:	bne	ae8 <read_partial_array+0x228>
 afc:	mov	r0, #0
 b00:	cmp	r1, r4
 b04:	beq	a68 <read_partial_array+0x1a8>
 b08:	ldr	r0, [fp, #-36]	; 0xffffffdc
 b0c:	sub	r2, r4, r1
 b10:	add	r0, r0, r1, lsl #1
 b14:	add	r1, r0, #1
 b18:	ldrb	r0, [r1, #-1]
 b1c:	ldrb	r3, [r1]
 b20:	subs	r2, r2, #1
 b24:	strb	r0, [r1]
 b28:	strb	r3, [r1, #-1]
 b2c:	add	r1, r1, #2
 b30:	mov	r0, #0
 b34:	bne	b18 <read_partial_array+0x258>
 b38:	b	a68 <read_partial_array+0x1a8>
 b3c:	cmp	r4, #1
 b40:	blt	a68 <read_partial_array+0x1a8>
 b44:	ldr	r1, [fp, #-36]	; 0xffffffdc
 b48:	add	r1, r1, #3
 b4c:	ldrb	r2, [r1, #4]
 b50:	ldrb	r3, [r1, #-3]
 b54:	ldrb	r7, [r1, #-2]
 b58:	ldrb	r6, [r1, #-1]
 b5c:	ldrb	r5, [r1]
 b60:	subs	r4, r4, #1
 b64:	strb	r3, [r1, #4]
 b68:	strb	r2, [r1, #-3]
 b6c:	ldrb	r2, [r1, #3]
 b70:	strb	r2, [r1, #-2]
 b74:	strb	r7, [r1, #3]
 b78:	ldrb	r2, [r1, #2]
 b7c:	strb	r2, [r1, #-1]
 b80:	strb	r6, [r1, #2]
 b84:	ldrb	r2, [r1, #1]
 b88:	strb	r5, [r1, #1]
 b8c:	strb	r2, [r1]
 b90:	add	r1, r1, #8
 b94:	bne	b4c <read_partial_array+0x28c>
 b98:	b	a68 <read_partial_array+0x1a8>
 b9c:	cmp	r4, #1
 ba0:	blt	a68 <read_partial_array+0x1a8>
 ba4:	mov	r1, #0
 ba8:	cmp	r4, #15
 bac:	bls	bf4 <read_partial_array+0x334>
 bb0:	ldr	r2, [fp, #-36]	; 0xffffffdc
 bb4:	bic	r1, r4, #15
 bb8:	mov	r0, r1
 bbc:	mov	r3, r2
 bc0:	subs	r0, r0, #16
 bc4:	vld4.8	{d16,d18,d20,d22}, [r3]!
 bc8:	vld4.8	{d17,d19,d21,d23}, [r3]
 bcc:	vorr	q12, q11, q11
 bd0:	vorr	q13, q10, q10
 bd4:	vorr	q14, q9, q9
 bd8:	vorr	q15, q8, q8
 bdc:	vst4.8	{d24,d26,d28,d30}, [r2]!
 be0:	vst4.8	{d25,d27,d29,d31}, [r2]!
 be4:	bne	bbc <read_partial_array+0x2fc>
 be8:	mov	r0, #0
 bec:	cmp	r1, r4
 bf0:	beq	a68 <read_partial_array+0x1a8>
 bf4:	ldr	r0, [fp, #-36]	; 0xffffffdc
 bf8:	sub	r2, r4, r1
 bfc:	add	r0, r0, r1, lsl #2
 c00:	add	r1, r0, #1
 c04:	ldrb	r0, [r1, #-1]
 c08:	ldrb	r3, [r1]
 c0c:	ldrb	r7, [r1, #1]
 c10:	ldrb	r6, [r1, #2]
 c14:	subs	r2, r2, #1
 c18:	strb	r0, [r1, #2]
 c1c:	strb	r6, [r1, #-1]
 c20:	strb	r7, [r1]
 c24:	strb	r3, [r1, #1]
 c28:	add	r1, r1, #4
 c2c:	mov	r0, #0
 c30:	bne	c04 <read_partial_array+0x344>
 c34:	b	a68 <read_partial_array+0x1a8>
 c38:	movw	r0, #0
 c3c:	movw	r1, #0
 c40:	movw	r3, #0
 c44:	mov	r2, #296	; 0x128
 c48:	movt	r0, #0
 c4c:	movt	r1, #0
 c50:	movt	r3, #0
 c54:	bl	0 <__assert_fail>
 c58:	movw	r0, #0
 c5c:	movw	r1, #0
 c60:	movw	r3, #0
 c64:	movw	r2, #379	; 0x17b
 c68:	movt	r0, #0
 c6c:	movt	r1, #0
 c70:	movt	r3, #0
 c74:	bl	0 <__assert_fail>

00000c78 <coda_cdf_cursor_read_uint8_partial_array>:
 c78:	b	8c0 <read_partial_array>

00000c7c <coda_cdf_cursor_read_int16_partial_array>:
 c7c:	b	8c0 <read_partial_array>

00000c80 <coda_cdf_cursor_read_uint16_partial_array>:
 c80:	b	8c0 <read_partial_array>

00000c84 <coda_cdf_cursor_read_int32_partial_array>:
 c84:	b	8c0 <read_partial_array>

00000c88 <coda_cdf_cursor_read_uint32_partial_array>:
 c88:	b	8c0 <read_partial_array>

00000c8c <coda_cdf_cursor_read_int64_partial_array>:
 c8c:	b	8c0 <read_partial_array>

00000c90 <coda_cdf_cursor_read_float_partial_array>:
 c90:	b	8c0 <read_partial_array>

00000c94 <coda_cdf_cursor_read_double_partial_array>:
 c94:	b	8c0 <read_partial_array>

00000c98 <coda_cdf_cursor_read_char_partial_array>:
 c98:	b	8c0 <read_partial_array>

00000c9c <read_bytes>:
 c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 ca0:	add	fp, sp, #28
 ca4:	sub	sp, sp, #68	; 0x44
 ca8:	ldr	r7, [r0, #48]	; 0x30
 cac:	mov	sl, r2
 cb0:	ldr	r1, [fp, #12]
 cb4:	ldr	r2, [fp, #8]
 cb8:	ldr	ip, [fp, #16]
 cbc:	mov	r9, r3
 cc0:	cmp	r7, #0
 cc4:	beq	d48 <read_bytes+0xac>
 cc8:	mov	r6, r0
 ccc:	adds	lr, r2, sl
 cd0:	ldr	r4, [r6, #40]!	; 0x28
 cd4:	adc	r5, r1, r9
 cd8:	ldr	r3, [r6, #4]
 cdc:	subs	r4, r4, lr
 ce0:	sbcs	r3, r3, r5
 ce4:	bcs	d88 <read_bytes+0xec>
 ce8:	ldr	r0, [r0, #16]
 cec:	cmp	r0, #1
 cf0:	bls	d6c <read_bytes+0xd0>
 cf4:	add	r8, sp, #47	; 0x2f
 cf8:	mov	r0, r2
 cfc:	mov	r2, r8
 d00:	bl	0 <coda_str64>
 d04:	add	r7, sp, #26
 d08:	mov	r0, sl
 d0c:	mov	r1, r9
 d10:	mov	r2, r7
 d14:	bl	0 <coda_str64>
 d18:	ldrd	r0, [r6]
 d1c:	add	r4, sp, #5
 d20:	mov	r2, r4
 d24:	bl	0 <coda_str64>
 d28:	movw	r1, #0
 d2c:	mvn	r0, #300	; 0x12c
 d30:	mov	r2, r8
 d34:	mov	r3, r7
 d38:	str	r4, [sp]
 d3c:	movt	r1, #0
 d40:	bl	0 <coda_set_error>
 d44:	b	d7c <read_bytes+0xe0>
 d48:	ldr	r3, [r0, #16]
 d4c:	cmp	r3, #2
 d50:	bcs	de4 <read_bytes+0x148>
 d54:	ldrd	r4, [r0, #8]
 d58:	adds	r3, r2, sl
 d5c:	adc	r1, r1, r9
 d60:	subs	r3, r4, r3
 d64:	sbcs	r1, r5, r1
 d68:	bcs	da0 <read_bytes+0x104>
 d6c:	movw	r1, #0
 d70:	mvn	r0, #300	; 0x12c
 d74:	movt	r1, #0
 d78:	bl	0 <coda_set_error>
 d7c:	mvn	r0, #0
 d80:	sub	sp, fp, #28
 d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 d88:	add	r1, r7, sl
 d8c:	mov	r0, ip
 d90:	bl	0 <memcpy>
 d94:	mov	r0, #0
 d98:	sub	sp, fp, #28
 d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 da0:	ldr	r0, [r0, #56]	; 0x38
 da4:	mov	r1, ip
 da8:	mov	r3, sl
 dac:	bl	0 <pread>
 db0:	mov	r1, r0
 db4:	mov	r0, #0
 db8:	cmn	r1, #1
 dbc:	bgt	d80 <read_bytes+0xe4>
 dc0:	bl	0 <__errno_location>
 dc4:	ldr	r0, [r0]
 dc8:	bl	0 <strerror>
 dcc:	movw	r1, #0
 dd0:	mov	r2, r0
 dd4:	mvn	r0, #21
 dd8:	movt	r1, #0
 ddc:	bl	0 <coda_set_error>
 de0:	b	d7c <read_bytes+0xe0>
 de4:	movw	r0, #0
 de8:	movw	r1, #0
 dec:	movw	r3, #0
 df0:	mov	r2, #83	; 0x53
 df4:	movt	r0, #0
 df8:	movt	r1, #0
 dfc:	movt	r3, #0
 e00:	bl	0 <__assert_fail>
