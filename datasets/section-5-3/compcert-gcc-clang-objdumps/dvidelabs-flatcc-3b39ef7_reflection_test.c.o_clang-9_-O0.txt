
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test_schema>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #80	; 0x50
       c:	str	r0, [fp, #-4]
      10:	mvn	r0, #0
      14:	str	r0, [fp, #-16]
      18:	ldr	r0, [fp, #-4]
      1c:	movw	r1, #10000	; 0x2710
      20:	sub	r2, fp, #12
      24:	bl	3dc <readfile>
      28:	str	r0, [fp, #-8]
      2c:	ldr	r0, [fp, #-8]
      30:	movw	r1, #0
      34:	cmp	r0, r1
      38:	bne	4c <test_schema+0x4c>
      3c:	movw	r0, #0
      40:	movt	r0, #0
      44:	bl	0 <printf>
      48:	b	3b8 <test_schema+0x3b8>
      4c:	ldr	r0, [fp, #-8]
      50:	bl	5c0 <reflection_Schema_as_root>
      54:	str	r0, [fp, #-20]	; 0xffffffec
      58:	ldr	r0, [fp, #-20]	; 0xffffffec
      5c:	bl	638 <reflection_Schema_objects>
      60:	str	r0, [fp, #-24]	; 0xffffffe8
      64:	movw	r0, #0
      68:	str	r0, [sp, #36]	; 0x24
      6c:	ldr	r0, [sp, #36]	; 0x24
      70:	ldr	r1, [fp, #-24]	; 0xffffffe8
      74:	str	r0, [sp, #28]
      78:	mov	r0, r1
      7c:	bl	740 <reflection_Object_vec_len>
      80:	ldr	r1, [sp, #28]
      84:	cmp	r1, r0
      88:	bcs	d4 <test_schema+0xd4>
      8c:	ldr	r1, [sp, #36]	; 0x24
      90:	ldr	r0, [fp, #-24]	; 0xffffffe8
      94:	ldr	r2, [sp, #36]	; 0x24
      98:	str	r1, [sp, #24]
      9c:	mov	r1, r2
      a0:	bl	898 <reflection_Object_vec_at>
      a4:	bl	790 <reflection_Object_name>
      a8:	movw	r1, #0
      ac:	movt	r1, #0
      b0:	str	r0, [sp, #20]
      b4:	mov	r0, r1
      b8:	ldr	r1, [sp, #24]
      bc:	ldr	r2, [sp, #20]
      c0:	bl	0 <printf>
      c4:	ldr	r0, [sp, #36]	; 0x24
      c8:	add	r0, r0, #1
      cc:	str	r0, [sp, #36]	; 0x24
      d0:	b	6c <test_schema+0x6c>
      d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
      d8:	movw	r1, #0
      dc:	movt	r1, #0
      e0:	bl	91c <reflection_Object_vec_find>
      e4:	str	r0, [sp, #36]	; 0x24
      e8:	ldr	r0, [sp, #36]	; 0x24
      ec:	movw	r1, #0
      f0:	movt	r1, #0
      f4:	ldr	r1, [r1]
      f8:	cmp	r0, r1
      fc:	bne	110 <test_schema+0x110>
     100:	movw	r0, #0
     104:	movt	r0, #0
     108:	bl	0 <printf>
     10c:	b	3b8 <test_schema+0x3b8>
     110:	ldr	r0, [sp, #36]	; 0x24
     114:	str	r0, [sp, #32]
     118:	ldr	r0, [fp, #-24]	; 0xffffffe8
     11c:	ldr	r1, [sp, #36]	; 0x24
     120:	bl	898 <reflection_Object_vec_at>
     124:	str	r0, [fp, #-28]	; 0xffffffe4
     128:	ldr	r0, [fp, #-28]	; 0xffffffe4
     12c:	bl	790 <reflection_Object_name>
     130:	movw	r1, #0
     134:	movt	r1, #0
     138:	bl	0 <strcmp>
     13c:	cmp	r0, #0
     140:	beq	154 <test_schema+0x154>
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <printf>
     150:	b	3b8 <test_schema+0x3b8>
     154:	ldr	r0, [fp, #-28]	; 0xffffffe4
     158:	bl	944 <reflection_Object_fields>
     15c:	str	r0, [fp, #-32]	; 0xffffffe0
     160:	ldr	r0, [fp, #-32]	; 0xffffffe0
     164:	movw	r1, #0
     168:	movt	r1, #0
     16c:	bl	a4c <reflection_Field_vec_find>
     170:	str	r0, [sp, #36]	; 0x24
     174:	ldr	r0, [sp, #36]	; 0x24
     178:	movw	r1, #0
     17c:	movt	r1, #0
     180:	ldr	r1, [r1]
     184:	cmp	r0, r1
     188:	bne	19c <test_schema+0x19c>
     18c:	movw	r0, #0
     190:	movt	r0, #0
     194:	bl	0 <printf>
     198:	b	3b8 <test_schema+0x3b8>
     19c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     1a0:	ldr	r1, [sp, #36]	; 0x24
     1a4:	bl	a74 <reflection_Field_vec_at>
     1a8:	str	r0, [fp, #-36]	; 0xffffffdc
     1ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
     1b0:	bl	af8 <reflection_Field_default_integer>
     1b4:	eor	r0, r0, #150	; 0x96
     1b8:	orr	r0, r0, r1
     1bc:	cmp	r0, #0
     1c0:	beq	22c <test_schema+0x22c>
     1c4:	b	1c8 <test_schema+0x1c8>
     1c8:	movw	r0, #0
     1cc:	movt	r0, #0
     1d0:	bl	0 <printf>
     1d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     1d8:	str	r0, [sp, #16]
     1dc:	mov	r0, r1
     1e0:	bl	bf4 <reflection_Field_name>
     1e4:	movw	r1, #0
     1e8:	movt	r1, #0
     1ec:	str	r0, [sp, #12]
     1f0:	mov	r0, r1
     1f4:	ldr	r1, [sp, #12]
     1f8:	bl	0 <printf>
     1fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
     200:	str	r0, [sp, #8]
     204:	mov	r0, r1
     208:	bl	af8 <reflection_Field_default_integer>
     20c:	movw	r2, #0
     210:	movt	r2, #0
     214:	str	r0, [sp, #4]
     218:	mov	r0, r2
     21c:	ldr	r2, [sp, #4]
     220:	mov	r3, r1
     224:	bl	0 <printf>
     228:	b	3b8 <test_schema+0x3b8>
     22c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     230:	bl	cfc <reflection_Field_type>
     234:	str	r0, [sp, #40]	; 0x28
     238:	ldr	r0, [sp, #40]	; 0x28
     23c:	bl	e00 <reflection_Type_base_type>
     240:	sxtb	r0, r0
     244:	cmp	r0, #5
     248:	beq	25c <test_schema+0x25c>
     24c:	movw	r0, #0
     250:	movt	r0, #0
     254:	bl	0 <printf>
     258:	b	3b8 <test_schema+0x3b8>
     25c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     260:	movw	r1, #0
     264:	movt	r1, #0
     268:	bl	a4c <reflection_Field_vec_find>
     26c:	str	r0, [sp, #36]	; 0x24
     270:	ldr	r0, [sp, #36]	; 0x24
     274:	movw	r1, #0
     278:	movt	r1, #0
     27c:	ldr	r1, [r1]
     280:	cmp	r0, r1
     284:	bne	298 <test_schema+0x298>
     288:	movw	r0, #0
     28c:	movt	r0, #0
     290:	bl	0 <printf>
     294:	b	3b8 <test_schema+0x3b8>
     298:	ldr	r0, [fp, #-32]	; 0xffffffe0
     29c:	ldr	r1, [sp, #36]	; 0x24
     2a0:	bl	a74 <reflection_Field_vec_at>
     2a4:	bl	cfc <reflection_Field_type>
     2a8:	str	r0, [sp, #40]	; 0x28
     2ac:	ldr	r0, [sp, #40]	; 0x28
     2b0:	bl	e00 <reflection_Type_base_type>
     2b4:	sxtb	r0, r0
     2b8:	cmp	r0, #15
     2bc:	beq	2d0 <test_schema+0x2d0>
     2c0:	movw	r0, #0
     2c4:	movt	r0, #0
     2c8:	bl	0 <printf>
     2cc:	b	3b8 <test_schema+0x3b8>
     2d0:	ldr	r0, [sp, #40]	; 0x28
     2d4:	bl	ee8 <reflection_Type_index>
     2d8:	ldr	r1, [sp, #32]
     2dc:	cmp	r0, r1
     2e0:	beq	2f4 <test_schema+0x2f4>
     2e4:	movw	r0, #0
     2e8:	movt	r0, #0
     2ec:	bl	0 <printf>
     2f0:	b	3b8 <test_schema+0x3b8>
     2f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     2f8:	movw	r1, #0
     2fc:	movt	r1, #0
     300:	bl	a4c <reflection_Field_vec_find>
     304:	str	r0, [sp, #36]	; 0x24
     308:	ldr	r0, [sp, #36]	; 0x24
     30c:	movw	r1, #0
     310:	movt	r1, #0
     314:	ldr	r1, [r1]
     318:	cmp	r0, r1
     31c:	bne	330 <test_schema+0x330>
     320:	movw	r0, #0
     324:	movt	r0, #0
     328:	bl	0 <printf>
     32c:	b	3b8 <test_schema+0x3b8>
     330:	ldr	r0, [fp, #-32]	; 0xffffffe0
     334:	ldr	r1, [sp, #36]	; 0x24
     338:	bl	a74 <reflection_Field_vec_at>
     33c:	bl	cfc <reflection_Field_type>
     340:	str	r0, [sp, #40]	; 0x28
     344:	ldr	r0, [sp, #40]	; 0x28
     348:	bl	e00 <reflection_Type_base_type>
     34c:	sxtb	r0, r0
     350:	cmp	r0, #14
     354:	beq	368 <test_schema+0x368>
     358:	movw	r0, #0
     35c:	movt	r0, #0
     360:	bl	0 <printf>
     364:	b	3b8 <test_schema+0x3b8>
     368:	ldr	r0, [sp, #40]	; 0x28
     36c:	bl	fc8 <reflection_Type_element>
     370:	sxtb	r0, r0
     374:	cmp	r0, #15
     378:	beq	38c <test_schema+0x38c>
     37c:	movw	r0, #0
     380:	movt	r0, #0
     384:	bl	0 <printf>
     388:	b	3b8 <test_schema+0x3b8>
     38c:	ldr	r0, [sp, #40]	; 0x28
     390:	bl	ee8 <reflection_Type_index>
     394:	ldr	r1, [sp, #32]
     398:	cmp	r0, r1
     39c:	beq	3b0 <test_schema+0x3b0>
     3a0:	movw	r0, #0
     3a4:	movt	r0, #0
     3a8:	bl	0 <printf>
     3ac:	b	3b8 <test_schema+0x3b8>
     3b0:	movw	r0, #0
     3b4:	str	r0, [fp, #-16]
     3b8:	ldr	r0, [fp, #-8]
     3bc:	movw	r1, #0
     3c0:	cmp	r0, r1
     3c4:	beq	3d0 <test_schema+0x3d0>
     3c8:	ldr	r0, [fp, #-8]
     3cc:	bl	0 <free>
     3d0:	ldr	r0, [fp, #-16]
     3d4:	mov	sp, fp
     3d8:	pop	{fp, pc}

000003dc <readfile>:
     3dc:	push	{fp, lr}
     3e0:	mov	fp, sp
     3e4:	sub	sp, sp, #56	; 0x38
     3e8:	str	r0, [fp, #-8]
     3ec:	str	r1, [fp, #-12]
     3f0:	str	r2, [fp, #-16]
     3f4:	ldr	r0, [fp, #-16]
     3f8:	movw	r1, #0
     3fc:	cmp	r0, r1
     400:	beq	410 <readfile+0x34>
     404:	ldr	r0, [fp, #-16]
     408:	str	r0, [sp, #12]
     40c:	b	41c <readfile+0x40>
     410:	add	r0, sp, #20
     414:	str	r0, [sp, #12]
     418:	b	41c <readfile+0x40>
     41c:	ldr	r0, [sp, #12]
     420:	str	r0, [fp, #-16]
     424:	ldr	r0, [fp, #-8]
     428:	movw	r1, #0
     42c:	movt	r1, #0
     430:	bl	0 <fopen>
     434:	str	r0, [fp, #-20]	; 0xffffffec
     438:	movw	r0, #0
     43c:	str	r0, [fp, #-24]	; 0xffffffe8
     440:	str	r0, [sp, #16]
     444:	ldr	r1, [fp, #-20]	; 0xffffffec
     448:	cmp	r1, r0
     44c:	bne	454 <readfile+0x78>
     450:	b	570 <readfile+0x194>
     454:	ldr	r0, [fp, #-20]	; 0xffffffec
     458:	movw	r1, #0
     45c:	movw	r2, #2
     460:	bl	0 <fseek>
     464:	ldr	r1, [fp, #-20]	; 0xffffffec
     468:	str	r0, [sp, #8]
     46c:	mov	r0, r1
     470:	bl	0 <ftell>
     474:	str	r0, [fp, #-24]	; 0xffffffe8
     478:	ldr	r0, [fp, #-24]	; 0xffffffe8
     47c:	ldr	r1, [fp, #-16]
     480:	str	r0, [r1]
     484:	ldr	r0, [fp, #-12]
     488:	cmp	r0, #0
     48c:	bls	4a4 <readfile+0xc8>
     490:	ldr	r0, [fp, #-24]	; 0xffffffe8
     494:	ldr	r1, [fp, #-12]
     498:	cmp	r0, r1
     49c:	bls	4a4 <readfile+0xc8>
     4a0:	b	570 <readfile+0x194>
     4a4:	ldr	r0, [fp, #-20]	; 0xffffffec
     4a8:	bl	0 <rewind>
     4ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4b0:	cmp	r0, #0
     4b4:	beq	4c4 <readfile+0xe8>
     4b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4bc:	str	r0, [sp, #4]
     4c0:	b	4d0 <readfile+0xf4>
     4c4:	movw	r0, #1
     4c8:	str	r0, [sp, #4]
     4cc:	b	4d0 <readfile+0xf4>
     4d0:	ldr	r0, [sp, #4]
     4d4:	bl	0 <malloc>
     4d8:	str	r0, [sp, #16]
     4dc:	ldr	r0, [sp, #16]
     4e0:	movw	r1, #0
     4e4:	cmp	r0, r1
     4e8:	bne	4f0 <readfile+0x114>
     4ec:	b	570 <readfile+0x194>
     4f0:	movw	r0, #0
     4f4:	str	r0, [sp, #28]
     4f8:	ldr	r0, [sp, #16]
     4fc:	ldr	r1, [sp, #28]
     500:	add	r0, r0, r1
     504:	ldr	r1, [fp, #-24]	; 0xffffffe8
     508:	ldr	r2, [sp, #28]
     50c:	sub	r2, r1, r2
     510:	ldr	r3, [fp, #-20]	; 0xffffffec
     514:	movw	r1, #1
     518:	bl	0 <fread>
     51c:	str	r0, [sp, #24]
     520:	cmp	r0, #0
     524:	beq	53c <readfile+0x160>
     528:	ldr	r0, [sp, #24]
     52c:	ldr	r1, [sp, #28]
     530:	add	r0, r1, r0
     534:	str	r0, [sp, #28]
     538:	b	4f8 <readfile+0x11c>
     53c:	ldr	r0, [sp, #28]
     540:	ldr	r1, [fp, #-24]	; 0xffffffe8
     544:	cmp	r0, r1
     548:	beq	550 <readfile+0x174>
     54c:	b	570 <readfile+0x194>
     550:	ldr	r0, [fp, #-20]	; 0xffffffec
     554:	bl	0 <fclose>
     558:	ldr	r1, [fp, #-24]	; 0xffffffe8
     55c:	ldr	r2, [fp, #-16]
     560:	str	r1, [r2]
     564:	ldr	r1, [sp, #16]
     568:	str	r1, [fp, #-4]
     56c:	b	5b4 <readfile+0x1d8>
     570:	ldr	r0, [fp, #-20]	; 0xffffffec
     574:	movw	r1, #0
     578:	cmp	r0, r1
     57c:	beq	588 <readfile+0x1ac>
     580:	ldr	r0, [fp, #-20]	; 0xffffffec
     584:	bl	0 <fclose>
     588:	ldr	r0, [sp, #16]
     58c:	movw	r1, #0
     590:	cmp	r0, r1
     594:	beq	5a0 <readfile+0x1c4>
     598:	ldr	r0, [sp, #16]
     59c:	bl	0 <free>
     5a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5a4:	ldr	r1, [fp, #-16]
     5a8:	str	r0, [r1]
     5ac:	movw	r0, #0
     5b0:	str	r0, [fp, #-4]
     5b4:	ldr	r0, [fp, #-4]
     5b8:	mov	sp, fp
     5bc:	pop	{fp, pc}

000005c0 <reflection_Schema_as_root>:
     5c0:	push	{fp, lr}
     5c4:	mov	fp, sp
     5c8:	sub	sp, sp, #16
     5cc:	str	r0, [fp, #-4]
     5d0:	movw	r0, #0
     5d4:	movt	r0, #0
     5d8:	str	r0, [sp, #8]
     5dc:	ldr	r0, [fp, #-4]
     5e0:	movw	r1, #0
     5e4:	cmp	r0, r1
     5e8:	beq	600 <reflection_Schema_as_root+0x40>
     5ec:	ldr	r0, [fp, #-4]
     5f0:	ldr	r1, [sp, #8]
     5f4:	bl	1144 <flatbuffers_has_identifier>
     5f8:	cmp	r0, #0
     5fc:	bne	60c <reflection_Schema_as_root+0x4c>
     600:	movw	r0, #0
     604:	str	r0, [sp, #4]
     608:	b	62c <reflection_Schema_as_root+0x6c>
     60c:	ldr	r0, [fp, #-4]
     610:	ldr	r1, [fp, #-4]
     614:	str	r0, [sp]
     618:	mov	r0, r1
     61c:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     620:	ldr	r1, [sp]
     624:	add	r0, r1, r0
     628:	str	r0, [sp, #4]
     62c:	ldr	r0, [sp, #4]
     630:	mov	sp, fp
     634:	pop	{fp, pc}

00000638 <reflection_Schema_objects>:
     638:	push	{fp, lr}
     63c:	mov	fp, sp
     640:	sub	sp, sp, #24
     644:	str	r0, [fp, #-4]
     648:	movw	r0, #0
     64c:	strh	r0, [fp, #-10]
     650:	ldr	r0, [fp, #-4]
     654:	movw	r1, #0
     658:	cmp	r0, r1
     65c:	beq	668 <reflection_Schema_objects+0x30>
     660:	b	664 <reflection_Schema_objects+0x2c>
     664:	b	688 <reflection_Schema_objects+0x50>
     668:	movw	r0, #0
     66c:	movt	r0, #0
     670:	movw	r1, #0
     674:	movt	r1, #0
     678:	movw	r2, #237	; 0xed
     67c:	movw	r3, #0
     680:	movt	r3, #0
     684:	bl	0 <__assert_fail>
     688:	mov	r0, #0
     68c:	strh	r0, [sp, #12]
     690:	ldr	r0, [fp, #-4]
     694:	str	r0, [sp, #4]
     698:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     69c:	ldr	r1, [sp, #4]
     6a0:	sub	r0, r1, r0
     6a4:	str	r0, [sp, #8]
     6a8:	ldr	r0, [sp, #8]
     6ac:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     6b0:	ldrh	r1, [sp, #12]
     6b4:	add	r1, r1, #3
     6b8:	lsl	r1, r1, #1
     6bc:	cmp	r0, r1
     6c0:	bcc	6dc <reflection_Schema_objects+0xa4>
     6c4:	ldr	r0, [sp, #8]
     6c8:	ldrh	r1, [sp, #12]
     6cc:	add	r0, r0, r1, lsl #1
     6d0:	add	r0, r0, #4
     6d4:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     6d8:	strh	r0, [fp, #-10]
     6dc:	ldrsh	r0, [fp, #-10]
     6e0:	cmp	r0, #0
     6e4:	beq	720 <reflection_Schema_objects+0xe8>
     6e8:	ldr	r0, [fp, #-4]
     6ec:	ldrh	r1, [fp, #-10]
     6f0:	add	r0, r0, r1
     6f4:	str	r0, [fp, #-8]
     6f8:	ldr	r0, [fp, #-8]
     6fc:	add	r0, r0, #4
     700:	ldr	r1, [fp, #-8]
     704:	str	r0, [sp]
     708:	mov	r0, r1
     70c:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     710:	ldr	r1, [sp]
     714:	add	r0, r1, r0
     718:	mov	sp, fp
     71c:	pop	{fp, pc}
     720:	movw	r0, #0
     724:	movt	r0, #0
     728:	movw	r1, #0
     72c:	movt	r1, #0
     730:	movw	r2, #237	; 0xed
     734:	movw	r3, #0
     738:	movt	r3, #0
     73c:	bl	0 <__assert_fail>

00000740 <reflection_Object_vec_len>:
     740:	push	{fp, lr}
     744:	mov	fp, sp
     748:	sub	sp, sp, #8
     74c:	str	r0, [sp, #4]
     750:	ldr	r0, [sp, #4]
     754:	movw	r1, #0
     758:	cmp	r0, r1
     75c:	beq	778 <reflection_Object_vec_len+0x38>
     760:	ldr	r0, [sp, #4]
     764:	mvn	r1, #3
     768:	add	r0, r0, r1
     76c:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     770:	str	r0, [sp]
     774:	b	784 <reflection_Object_vec_len+0x44>
     778:	movw	r0, #0
     77c:	str	r0, [sp]
     780:	b	784 <reflection_Object_vec_len+0x44>
     784:	ldr	r0, [sp]
     788:	mov	sp, fp
     78c:	pop	{fp, pc}

00000790 <reflection_Object_name>:
     790:	push	{fp, lr}
     794:	mov	fp, sp
     798:	sub	sp, sp, #24
     79c:	str	r0, [fp, #-4]
     7a0:	movw	r0, #0
     7a4:	strh	r0, [fp, #-10]
     7a8:	ldr	r0, [fp, #-4]
     7ac:	movw	r1, #0
     7b0:	cmp	r0, r1
     7b4:	beq	7c0 <reflection_Object_name+0x30>
     7b8:	b	7bc <reflection_Object_name+0x2c>
     7bc:	b	7e0 <reflection_Object_name+0x50>
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	movw	r1, #0
     7cc:	movt	r1, #0
     7d0:	movw	r2, #218	; 0xda
     7d4:	movw	r3, #0
     7d8:	movt	r3, #0
     7dc:	bl	0 <__assert_fail>
     7e0:	mov	r0, #0
     7e4:	strh	r0, [sp, #12]
     7e8:	ldr	r0, [fp, #-4]
     7ec:	str	r0, [sp, #4]
     7f0:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     7f4:	ldr	r1, [sp, #4]
     7f8:	sub	r0, r1, r0
     7fc:	str	r0, [sp, #8]
     800:	ldr	r0, [sp, #8]
     804:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     808:	ldrh	r1, [sp, #12]
     80c:	add	r1, r1, #3
     810:	lsl	r1, r1, #1
     814:	cmp	r0, r1
     818:	bcc	834 <reflection_Object_name+0xa4>
     81c:	ldr	r0, [sp, #8]
     820:	ldrh	r1, [sp, #12]
     824:	add	r0, r0, r1, lsl #1
     828:	add	r0, r0, #4
     82c:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     830:	strh	r0, [fp, #-10]
     834:	ldrsh	r0, [fp, #-10]
     838:	cmp	r0, #0
     83c:	beq	878 <reflection_Object_name+0xe8>
     840:	ldr	r0, [fp, #-4]
     844:	ldrh	r1, [fp, #-10]
     848:	add	r0, r0, r1
     84c:	str	r0, [fp, #-8]
     850:	ldr	r0, [fp, #-8]
     854:	add	r0, r0, #4
     858:	ldr	r1, [fp, #-8]
     85c:	str	r0, [sp]
     860:	mov	r0, r1
     864:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     868:	ldr	r1, [sp]
     86c:	add	r0, r1, r0
     870:	mov	sp, fp
     874:	pop	{fp, pc}
     878:	movw	r0, #0
     87c:	movt	r0, #0
     880:	movw	r1, #0
     884:	movt	r1, #0
     888:	movw	r2, #218	; 0xda
     88c:	movw	r3, #0
     890:	movt	r3, #0
     894:	bl	0 <__assert_fail>

00000898 <reflection_Object_vec_at>:
     898:	push	{fp, lr}
     89c:	mov	fp, sp
     8a0:	sub	sp, sp, #16
     8a4:	str	r0, [fp, #-4]
     8a8:	str	r1, [sp, #8]
     8ac:	ldr	r0, [fp, #-4]
     8b0:	ldr	r1, [sp, #8]
     8b4:	add	r0, r0, r1, lsl #2
     8b8:	str	r0, [sp, #4]
     8bc:	ldr	r0, [fp, #-4]
     8c0:	bl	12e8 <flatbuffers_vec_len>
     8c4:	ldr	r1, [sp, #8]
     8c8:	cmp	r0, r1
     8cc:	bls	8d8 <reflection_Object_vec_at+0x40>
     8d0:	b	8d4 <reflection_Object_vec_at+0x3c>
     8d4:	b	8f8 <reflection_Object_vec_at+0x60>
     8d8:	movw	r0, #0
     8dc:	movt	r0, #0
     8e0:	movw	r1, #0
     8e4:	movt	r1, #0
     8e8:	movw	r2, #215	; 0xd7
     8ec:	movw	r3, #0
     8f0:	movt	r3, #0
     8f4:	bl	0 <__assert_fail>
     8f8:	ldr	r0, [sp, #4]
     8fc:	ldr	r1, [sp, #4]
     900:	str	r0, [sp]
     904:	mov	r0, r1
     908:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     90c:	ldr	r1, [sp]
     910:	add	r0, r1, r0
     914:	mov	sp, fp
     918:	pop	{fp, pc}

0000091c <reflection_Object_vec_find>:
     91c:	push	{fp, lr}
     920:	mov	fp, sp
     924:	sub	sp, sp, #8
     928:	str	r0, [sp, #4]
     92c:	str	r1, [sp]
     930:	ldr	r0, [sp, #4]
     934:	ldr	r1, [sp]
     938:	bl	1338 <reflection_Object_vec_find_by_name>
     93c:	mov	sp, fp
     940:	pop	{fp, pc}

00000944 <reflection_Object_fields>:
     944:	push	{fp, lr}
     948:	mov	fp, sp
     94c:	sub	sp, sp, #24
     950:	str	r0, [fp, #-4]
     954:	movw	r0, #0
     958:	strh	r0, [fp, #-10]
     95c:	ldr	r0, [fp, #-4]
     960:	movw	r1, #0
     964:	cmp	r0, r1
     968:	beq	974 <reflection_Object_fields+0x30>
     96c:	b	970 <reflection_Object_fields+0x2c>
     970:	b	994 <reflection_Object_fields+0x50>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	movw	r1, #0
     980:	movt	r1, #0
     984:	movw	r2, #224	; 0xe0
     988:	movw	r3, #0
     98c:	movt	r3, #0
     990:	bl	0 <__assert_fail>
     994:	mov	r0, #1
     998:	strh	r0, [sp, #12]
     99c:	ldr	r0, [fp, #-4]
     9a0:	str	r0, [sp, #4]
     9a4:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     9a8:	ldr	r1, [sp, #4]
     9ac:	sub	r0, r1, r0
     9b0:	str	r0, [sp, #8]
     9b4:	ldr	r0, [sp, #8]
     9b8:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     9bc:	ldrh	r1, [sp, #12]
     9c0:	add	r1, r1, #3
     9c4:	lsl	r1, r1, #1
     9c8:	cmp	r0, r1
     9cc:	bcc	9e8 <reflection_Object_fields+0xa4>
     9d0:	ldr	r0, [sp, #8]
     9d4:	ldrh	r1, [sp, #12]
     9d8:	add	r0, r0, r1, lsl #1
     9dc:	add	r0, r0, #4
     9e0:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     9e4:	strh	r0, [fp, #-10]
     9e8:	ldrsh	r0, [fp, #-10]
     9ec:	cmp	r0, #0
     9f0:	beq	a2c <reflection_Object_fields+0xe8>
     9f4:	ldr	r0, [fp, #-4]
     9f8:	ldrh	r1, [fp, #-10]
     9fc:	add	r0, r0, r1
     a00:	str	r0, [fp, #-8]
     a04:	ldr	r0, [fp, #-8]
     a08:	add	r0, r0, #4
     a0c:	ldr	r1, [fp, #-8]
     a10:	str	r0, [sp]
     a14:	mov	r0, r1
     a18:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     a1c:	ldr	r1, [sp]
     a20:	add	r0, r1, r0
     a24:	mov	sp, fp
     a28:	pop	{fp, pc}
     a2c:	movw	r0, #0
     a30:	movt	r0, #0
     a34:	movw	r1, #0
     a38:	movt	r1, #0
     a3c:	movw	r2, #224	; 0xe0
     a40:	movw	r3, #0
     a44:	movt	r3, #0
     a48:	bl	0 <__assert_fail>

00000a4c <reflection_Field_vec_find>:
     a4c:	push	{fp, lr}
     a50:	mov	fp, sp
     a54:	sub	sp, sp, #8
     a58:	str	r0, [sp, #4]
     a5c:	str	r1, [sp]
     a60:	ldr	r0, [sp, #4]
     a64:	ldr	r1, [sp]
     a68:	bl	1494 <reflection_Field_vec_find_by_name>
     a6c:	mov	sp, fp
     a70:	pop	{fp, pc}

00000a74 <reflection_Field_vec_at>:
     a74:	push	{fp, lr}
     a78:	mov	fp, sp
     a7c:	sub	sp, sp, #16
     a80:	str	r0, [fp, #-4]
     a84:	str	r1, [sp, #8]
     a88:	ldr	r0, [fp, #-4]
     a8c:	ldr	r1, [sp, #8]
     a90:	add	r0, r0, r1, lsl #2
     a94:	str	r0, [sp, #4]
     a98:	ldr	r0, [fp, #-4]
     a9c:	bl	12e8 <flatbuffers_vec_len>
     aa0:	ldr	r1, [sp, #8]
     aa4:	cmp	r0, r1
     aa8:	bls	ab4 <reflection_Field_vec_at+0x40>
     aac:	b	ab0 <reflection_Field_vec_at+0x3c>
     ab0:	b	ad4 <reflection_Field_vec_at+0x60>
     ab4:	movw	r0, #0
     ab8:	movt	r0, #0
     abc:	movw	r1, #0
     ac0:	movt	r1, #0
     ac4:	movw	r2, #192	; 0xc0
     ac8:	movw	r3, #0
     acc:	movt	r3, #0
     ad0:	bl	0 <__assert_fail>
     ad4:	ldr	r0, [sp, #4]
     ad8:	ldr	r1, [sp, #4]
     adc:	str	r0, [sp]
     ae0:	mov	r0, r1
     ae4:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     ae8:	ldr	r1, [sp]
     aec:	add	r0, r1, r0
     af0:	mov	sp, fp
     af4:	pop	{fp, pc}

00000af8 <reflection_Field_default_integer>:
     af8:	push	{fp, lr}
     afc:	mov	fp, sp
     b00:	sub	sp, sp, #32
     b04:	str	r0, [fp, #-4]
     b08:	movw	r0, #0
     b0c:	strh	r0, [fp, #-6]
     b10:	ldr	r0, [fp, #-4]
     b14:	movw	r1, #0
     b18:	cmp	r0, r1
     b1c:	beq	b28 <reflection_Field_default_integer+0x30>
     b20:	b	b24 <reflection_Field_default_integer+0x2c>
     b24:	b	b48 <reflection_Field_default_integer+0x50>
     b28:	movw	r0, #0
     b2c:	movt	r0, #0
     b30:	movw	r1, #0
     b34:	movt	r1, #0
     b38:	movw	r2, #204	; 0xcc
     b3c:	movw	r3, #0
     b40:	movt	r3, #0
     b44:	bl	0 <__assert_fail>
     b48:	mov	r0, #4
     b4c:	strh	r0, [fp, #-8]
     b50:	ldr	r0, [fp, #-4]
     b54:	str	r0, [sp, #16]
     b58:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     b5c:	ldr	r1, [sp, #16]
     b60:	sub	r0, r1, r0
     b64:	str	r0, [fp, #-12]
     b68:	ldr	r0, [fp, #-12]
     b6c:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     b70:	ldrh	r1, [fp, #-8]
     b74:	add	r1, r1, #3
     b78:	lsl	r1, r1, #1
     b7c:	cmp	r0, r1
     b80:	bcc	b9c <reflection_Field_default_integer+0xa4>
     b84:	ldr	r0, [fp, #-12]
     b88:	ldrh	r1, [fp, #-8]
     b8c:	add	r0, r0, r1, lsl #1
     b90:	add	r0, r0, #4
     b94:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     b98:	strh	r0, [fp, #-6]
     b9c:	ldrh	r0, [fp, #-6]
     ba0:	cmp	r0, #0
     ba4:	beq	bc4 <reflection_Field_default_integer+0xcc>
     ba8:	ldr	r0, [fp, #-4]
     bac:	ldrh	r1, [fp, #-6]
     bb0:	add	r0, r0, r1
     bb4:	bl	1614 <flatbuffers_int64_read_from_pe>
     bb8:	str	r0, [sp, #12]
     bbc:	str	r1, [sp, #8]
     bc0:	b	bd8 <reflection_Field_default_integer+0xe0>
     bc4:	mov	r0, #0
     bc8:	mov	r1, r0
     bcc:	str	r1, [sp, #12]
     bd0:	str	r0, [sp, #8]
     bd4:	b	bd8 <reflection_Field_default_integer+0xe0>
     bd8:	ldr	r0, [sp, #8]
     bdc:	ldr	r1, [sp, #12]
     be0:	str	r0, [sp, #4]
     be4:	mov	r0, r1
     be8:	ldr	r1, [sp, #4]
     bec:	mov	sp, fp
     bf0:	pop	{fp, pc}

00000bf4 <reflection_Field_name>:
     bf4:	push	{fp, lr}
     bf8:	mov	fp, sp
     bfc:	sub	sp, sp, #24
     c00:	str	r0, [fp, #-4]
     c04:	movw	r0, #0
     c08:	strh	r0, [fp, #-10]
     c0c:	ldr	r0, [fp, #-4]
     c10:	movw	r1, #0
     c14:	cmp	r0, r1
     c18:	beq	c24 <reflection_Field_name+0x30>
     c1c:	b	c20 <reflection_Field_name+0x2c>
     c20:	b	c44 <reflection_Field_name+0x50>
     c24:	movw	r0, #0
     c28:	movt	r0, #0
     c2c:	movw	r1, #0
     c30:	movt	r1, #0
     c34:	movw	r2, #195	; 0xc3
     c38:	movw	r3, #0
     c3c:	movt	r3, #0
     c40:	bl	0 <__assert_fail>
     c44:	mov	r0, #0
     c48:	strh	r0, [sp, #12]
     c4c:	ldr	r0, [fp, #-4]
     c50:	str	r0, [sp, #4]
     c54:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     c58:	ldr	r1, [sp, #4]
     c5c:	sub	r0, r1, r0
     c60:	str	r0, [sp, #8]
     c64:	ldr	r0, [sp, #8]
     c68:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     c6c:	ldrh	r1, [sp, #12]
     c70:	add	r1, r1, #3
     c74:	lsl	r1, r1, #1
     c78:	cmp	r0, r1
     c7c:	bcc	c98 <reflection_Field_name+0xa4>
     c80:	ldr	r0, [sp, #8]
     c84:	ldrh	r1, [sp, #12]
     c88:	add	r0, r0, r1, lsl #1
     c8c:	add	r0, r0, #4
     c90:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     c94:	strh	r0, [fp, #-10]
     c98:	ldrsh	r0, [fp, #-10]
     c9c:	cmp	r0, #0
     ca0:	beq	cdc <reflection_Field_name+0xe8>
     ca4:	ldr	r0, [fp, #-4]
     ca8:	ldrh	r1, [fp, #-10]
     cac:	add	r0, r0, r1
     cb0:	str	r0, [fp, #-8]
     cb4:	ldr	r0, [fp, #-8]
     cb8:	add	r0, r0, #4
     cbc:	ldr	r1, [fp, #-8]
     cc0:	str	r0, [sp]
     cc4:	mov	r0, r1
     cc8:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     ccc:	ldr	r1, [sp]
     cd0:	add	r0, r1, r0
     cd4:	mov	sp, fp
     cd8:	pop	{fp, pc}
     cdc:	movw	r0, #0
     ce0:	movt	r0, #0
     ce4:	movw	r1, #0
     ce8:	movt	r1, #0
     cec:	movw	r2, #195	; 0xc3
     cf0:	movw	r3, #0
     cf4:	movt	r3, #0
     cf8:	bl	0 <__assert_fail>

00000cfc <reflection_Field_type>:
     cfc:	push	{fp, lr}
     d00:	mov	fp, sp
     d04:	sub	sp, sp, #24
     d08:	str	r0, [fp, #-4]
     d0c:	movw	r0, #0
     d10:	strh	r0, [fp, #-10]
     d14:	ldr	r0, [fp, #-4]
     d18:	movw	r1, #0
     d1c:	cmp	r0, r1
     d20:	beq	d2c <reflection_Field_type+0x30>
     d24:	b	d28 <reflection_Field_type+0x2c>
     d28:	b	d4c <reflection_Field_type+0x50>
     d2c:	movw	r0, #0
     d30:	movt	r0, #0
     d34:	movw	r1, #0
     d38:	movt	r1, #0
     d3c:	movw	r2, #201	; 0xc9
     d40:	movw	r3, #0
     d44:	movt	r3, #0
     d48:	bl	0 <__assert_fail>
     d4c:	mov	r0, #1
     d50:	strh	r0, [sp, #12]
     d54:	ldr	r0, [fp, #-4]
     d58:	str	r0, [sp, #4]
     d5c:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     d60:	ldr	r1, [sp, #4]
     d64:	sub	r0, r1, r0
     d68:	str	r0, [sp, #8]
     d6c:	ldr	r0, [sp, #8]
     d70:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     d74:	ldrh	r1, [sp, #12]
     d78:	add	r1, r1, #3
     d7c:	lsl	r1, r1, #1
     d80:	cmp	r0, r1
     d84:	bcc	da0 <reflection_Field_type+0xa4>
     d88:	ldr	r0, [sp, #8]
     d8c:	ldrh	r1, [sp, #12]
     d90:	add	r0, r0, r1, lsl #1
     d94:	add	r0, r0, #4
     d98:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     d9c:	strh	r0, [fp, #-10]
     da0:	ldrsh	r0, [fp, #-10]
     da4:	cmp	r0, #0
     da8:	beq	de0 <reflection_Field_type+0xe4>
     dac:	ldr	r0, [fp, #-4]
     db0:	ldrh	r1, [fp, #-10]
     db4:	add	r0, r0, r1
     db8:	str	r0, [fp, #-8]
     dbc:	ldr	r0, [fp, #-8]
     dc0:	ldr	r1, [fp, #-8]
     dc4:	str	r0, [sp]
     dc8:	mov	r0, r1
     dcc:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
     dd0:	ldr	r1, [sp]
     dd4:	add	r0, r1, r0
     dd8:	mov	sp, fp
     ddc:	pop	{fp, pc}
     de0:	movw	r0, #0
     de4:	movt	r0, #0
     de8:	movw	r1, #0
     dec:	movt	r1, #0
     df0:	movw	r2, #201	; 0xc9
     df4:	movw	r3, #0
     df8:	movt	r3, #0
     dfc:	bl	0 <__assert_fail>

00000e00 <reflection_Type_base_type>:
     e00:	push	{fp, lr}
     e04:	mov	fp, sp
     e08:	sub	sp, sp, #24
     e0c:	str	r0, [fp, #-4]
     e10:	movw	r0, #0
     e14:	strh	r0, [fp, #-6]
     e18:	ldr	r0, [fp, #-4]
     e1c:	movw	r1, #0
     e20:	cmp	r0, r1
     e24:	beq	e30 <reflection_Type_base_type+0x30>
     e28:	b	e2c <reflection_Type_base_type+0x2c>
     e2c:	b	e50 <reflection_Type_base_type+0x50>
     e30:	movw	r0, #0
     e34:	movt	r0, #0
     e38:	movw	r1, #0
     e3c:	movt	r1, #0
     e40:	movw	r2, #147	; 0x93
     e44:	movw	r3, #0
     e48:	movt	r3, #0
     e4c:	bl	0 <__assert_fail>
     e50:	mov	r0, #0
     e54:	strh	r0, [fp, #-8]
     e58:	ldr	r0, [fp, #-4]
     e5c:	str	r0, [sp, #8]
     e60:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     e64:	ldr	r1, [sp, #8]
     e68:	sub	r0, r1, r0
     e6c:	str	r0, [sp, #12]
     e70:	ldr	r0, [sp, #12]
     e74:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     e78:	ldrh	r1, [fp, #-8]
     e7c:	add	r1, r1, #3
     e80:	lsl	r1, r1, #1
     e84:	cmp	r0, r1
     e88:	bcc	ea4 <reflection_Type_base_type+0xa4>
     e8c:	ldr	r0, [sp, #12]
     e90:	ldrh	r1, [fp, #-8]
     e94:	add	r0, r0, r1, lsl #1
     e98:	add	r0, r0, #4
     e9c:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     ea0:	strh	r0, [fp, #-6]
     ea4:	ldrh	r0, [fp, #-6]
     ea8:	cmp	r0, #0
     eac:	beq	ecc <reflection_Type_base_type+0xcc>
     eb0:	ldr	r0, [fp, #-4]
     eb4:	ldrh	r1, [fp, #-6]
     eb8:	add	r0, r0, r1
     ebc:	bl	1664 <reflection_BaseType_read_from_pe>
     ec0:	sxtb	r0, r0
     ec4:	str	r0, [sp, #4]
     ec8:	b	ed8 <reflection_Type_base_type+0xd8>
     ecc:	movw	r0, #0
     ed0:	str	r0, [sp, #4]
     ed4:	b	ed8 <reflection_Type_base_type+0xd8>
     ed8:	ldr	r0, [sp, #4]
     edc:	sxtb	r0, r0
     ee0:	mov	sp, fp
     ee4:	pop	{fp, pc}

00000ee8 <reflection_Type_index>:
     ee8:	push	{fp, lr}
     eec:	mov	fp, sp
     ef0:	sub	sp, sp, #24
     ef4:	str	r0, [fp, #-4]
     ef8:	movw	r0, #0
     efc:	strh	r0, [fp, #-6]
     f00:	ldr	r0, [fp, #-4]
     f04:	movw	r1, #0
     f08:	cmp	r0, r1
     f0c:	beq	f18 <reflection_Type_index+0x30>
     f10:	b	f14 <reflection_Type_index+0x2c>
     f14:	b	f38 <reflection_Type_index+0x50>
     f18:	movw	r0, #0
     f1c:	movt	r0, #0
     f20:	movw	r1, #0
     f24:	movt	r1, #0
     f28:	movw	r2, #149	; 0x95
     f2c:	movw	r3, #0
     f30:	movt	r3, #0
     f34:	bl	0 <__assert_fail>
     f38:	mov	r0, #2
     f3c:	strh	r0, [fp, #-8]
     f40:	ldr	r0, [fp, #-4]
     f44:	str	r0, [sp, #8]
     f48:	bl	1274 <__flatbuffers_soffset_read_from_pe>
     f4c:	ldr	r1, [sp, #8]
     f50:	sub	r0, r1, r0
     f54:	str	r0, [sp, #12]
     f58:	ldr	r0, [sp, #12]
     f5c:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     f60:	ldrh	r1, [fp, #-8]
     f64:	add	r1, r1, #3
     f68:	lsl	r1, r1, #1
     f6c:	cmp	r0, r1
     f70:	bcc	f8c <reflection_Type_index+0xa4>
     f74:	ldr	r0, [sp, #12]
     f78:	ldrh	r1, [fp, #-8]
     f7c:	add	r0, r0, r1, lsl #1
     f80:	add	r0, r0, #4
     f84:	bl	1298 <__flatbuffers_voffset_read_from_pe>
     f88:	strh	r0, [fp, #-6]
     f8c:	ldrh	r0, [fp, #-6]
     f90:	cmp	r0, #0
     f94:	beq	fb0 <reflection_Type_index+0xc8>
     f98:	ldr	r0, [fp, #-4]
     f9c:	ldrh	r1, [fp, #-6]
     fa0:	add	r0, r0, r1
     fa4:	bl	16a0 <flatbuffers_int32_read_from_pe>
     fa8:	str	r0, [sp, #4]
     fac:	b	fbc <reflection_Type_index+0xd4>
     fb0:	mvn	r0, #0
     fb4:	str	r0, [sp, #4]
     fb8:	b	fbc <reflection_Type_index+0xd4>
     fbc:	ldr	r0, [sp, #4]
     fc0:	mov	sp, fp
     fc4:	pop	{fp, pc}

00000fc8 <reflection_Type_element>:
     fc8:	push	{fp, lr}
     fcc:	mov	fp, sp
     fd0:	sub	sp, sp, #24
     fd4:	str	r0, [fp, #-4]
     fd8:	movw	r0, #0
     fdc:	strh	r0, [fp, #-6]
     fe0:	ldr	r0, [fp, #-4]
     fe4:	movw	r1, #0
     fe8:	cmp	r0, r1
     fec:	beq	ff8 <reflection_Type_element+0x30>
     ff0:	b	ff4 <reflection_Type_element+0x2c>
     ff4:	b	1018 <reflection_Type_element+0x50>
     ff8:	movw	r0, #0
     ffc:	movt	r0, #0
    1000:	movw	r1, #0
    1004:	movt	r1, #0
    1008:	movw	r2, #148	; 0x94
    100c:	movw	r3, #0
    1010:	movt	r3, #0
    1014:	bl	0 <__assert_fail>
    1018:	mov	r0, #1
    101c:	strh	r0, [fp, #-8]
    1020:	ldr	r0, [fp, #-4]
    1024:	str	r0, [sp, #8]
    1028:	bl	1274 <__flatbuffers_soffset_read_from_pe>
    102c:	ldr	r1, [sp, #8]
    1030:	sub	r0, r1, r0
    1034:	str	r0, [sp, #12]
    1038:	ldr	r0, [sp, #12]
    103c:	bl	1298 <__flatbuffers_voffset_read_from_pe>
    1040:	ldrh	r1, [fp, #-8]
    1044:	add	r1, r1, #3
    1048:	lsl	r1, r1, #1
    104c:	cmp	r0, r1
    1050:	bcc	106c <reflection_Type_element+0xa4>
    1054:	ldr	r0, [sp, #12]
    1058:	ldrh	r1, [fp, #-8]
    105c:	add	r0, r0, r1, lsl #1
    1060:	add	r0, r0, #4
    1064:	bl	1298 <__flatbuffers_voffset_read_from_pe>
    1068:	strh	r0, [fp, #-6]
    106c:	ldrh	r0, [fp, #-6]
    1070:	cmp	r0, #0
    1074:	beq	1094 <reflection_Type_element+0xcc>
    1078:	ldr	r0, [fp, #-4]
    107c:	ldrh	r1, [fp, #-6]
    1080:	add	r0, r0, r1
    1084:	bl	1664 <reflection_BaseType_read_from_pe>
    1088:	sxtb	r0, r0
    108c:	str	r0, [sp, #4]
    1090:	b	10a0 <reflection_Type_element+0xd8>
    1094:	movw	r0, #0
    1098:	str	r0, [sp, #4]
    109c:	b	10a0 <reflection_Type_element+0xd8>
    10a0:	ldr	r0, [sp, #4]
    10a4:	sxtb	r0, r0
    10a8:	mov	sp, fp
    10ac:	pop	{fp, pc}

000010b0 <main>:
    10b0:	push	{fp, lr}
    10b4:	mov	fp, sp
    10b8:	sub	sp, sp, #16
    10bc:	movw	r2, #0
    10c0:	str	r2, [fp, #-4]
    10c4:	str	r0, [sp, #8]
    10c8:	str	r1, [sp, #4]
    10cc:	ldr	r0, [sp, #8]
    10d0:	cmp	r0, #1
    10d4:	beq	110c <main+0x5c>
    10d8:	ldr	r0, [sp, #8]
    10dc:	cmp	r0, #2
    10e0:	beq	110c <main+0x5c>
    10e4:	movw	r0, #0
    10e8:	movt	r0, #0
    10ec:	ldr	r0, [r0]
    10f0:	movw	r1, #0
    10f4:	movt	r1, #0
    10f8:	bl	0 <fprintf>
    10fc:	movw	r1, #1
    1100:	str	r0, [sp]
    1104:	mov	r0, r1
    1108:	bl	0 <exit>
    110c:	ldr	r0, [sp, #8]
    1110:	cmp	r0, #2
    1114:	bne	112c <main+0x7c>
    1118:	ldr	r0, [sp, #4]
    111c:	ldr	r0, [r0, #4]
    1120:	movw	r1, #0
    1124:	movt	r1, #0
    1128:	str	r0, [r1]
    112c:	movw	r0, #0
    1130:	movt	r0, #0
    1134:	ldr	r0, [r0]
    1138:	bl	0 <test_schema>
    113c:	mov	sp, fp
    1140:	pop	{fp, pc}

00001144 <flatbuffers_has_identifier>:
    1144:	push	{fp, lr}
    1148:	mov	fp, sp
    114c:	sub	sp, sp, #32
    1150:	str	r0, [fp, #-8]
    1154:	str	r1, [fp, #-12]
    1158:	movw	r0, #0
    115c:	str	r0, [sp, #12]
    1160:	ldr	r1, [fp, #-12]
    1164:	cmp	r1, r0
    1168:	bne	1178 <flatbuffers_has_identifier+0x34>
    116c:	movw	r0, #1
    1170:	str	r0, [fp, #-4]
    1174:	b	11e4 <flatbuffers_has_identifier+0xa0>
    1178:	add	r0, sp, #12
    117c:	ldr	r1, [fp, #-12]
    1180:	movw	r2, #4
    1184:	bl	0 <strncpy>
    1188:	ldr	r1, [sp, #12]
    118c:	str	r0, [sp, #8]
    1190:	mov	r0, r1
    1194:	bl	1214 <__flatbuffers_thash_cast_from_le>
    1198:	str	r0, [sp, #12]
    119c:	ldr	r0, [fp, #-8]
    11a0:	add	r0, r0, #4
    11a4:	bl	1228 <__flatbuffers_thash_read_from_pe>
    11a8:	str	r0, [sp, #16]
    11ac:	ldr	r0, [sp, #12]
    11b0:	cmp	r0, #0
    11b4:	movw	r0, #1
    11b8:	str	r0, [sp, #4]
    11bc:	beq	11d8 <flatbuffers_has_identifier+0x94>
    11c0:	ldr	r0, [sp, #16]
    11c4:	ldr	r1, [sp, #12]
    11c8:	cmp	r0, r1
    11cc:	movw	r0, #0
    11d0:	moveq	r0, #1
    11d4:	str	r0, [sp, #4]
    11d8:	ldr	r0, [sp, #4]
    11dc:	and	r0, r0, #1
    11e0:	str	r0, [fp, #-4]
    11e4:	ldr	r0, [fp, #-4]
    11e8:	mov	sp, fp
    11ec:	pop	{fp, pc}

000011f0 <__flatbuffers_uoffset_read_from_pe>:
    11f0:	push	{fp, lr}
    11f4:	mov	fp, sp
    11f8:	sub	sp, sp, #8
    11fc:	str	r0, [sp, #4]
    1200:	ldr	r0, [sp, #4]
    1204:	ldr	r0, [r0]
    1208:	bl	1260 <__flatbuffers_uoffset_cast_from_pe>
    120c:	mov	sp, fp
    1210:	pop	{fp, pc}

00001214 <__flatbuffers_thash_cast_from_le>:
    1214:	sub	sp, sp, #4
    1218:	str	r0, [sp]
    121c:	ldr	r0, [sp]
    1220:	add	sp, sp, #4
    1224:	bx	lr

00001228 <__flatbuffers_thash_read_from_pe>:
    1228:	push	{fp, lr}
    122c:	mov	fp, sp
    1230:	sub	sp, sp, #8
    1234:	str	r0, [sp, #4]
    1238:	ldr	r0, [sp, #4]
    123c:	ldr	r0, [r0]
    1240:	bl	124c <__flatbuffers_thash_cast_from_pe>
    1244:	mov	sp, fp
    1248:	pop	{fp, pc}

0000124c <__flatbuffers_thash_cast_from_pe>:
    124c:	sub	sp, sp, #4
    1250:	str	r0, [sp]
    1254:	ldr	r0, [sp]
    1258:	add	sp, sp, #4
    125c:	bx	lr

00001260 <__flatbuffers_uoffset_cast_from_pe>:
    1260:	sub	sp, sp, #4
    1264:	str	r0, [sp]
    1268:	ldr	r0, [sp]
    126c:	add	sp, sp, #4
    1270:	bx	lr

00001274 <__flatbuffers_soffset_read_from_pe>:
    1274:	push	{fp, lr}
    1278:	mov	fp, sp
    127c:	sub	sp, sp, #8
    1280:	str	r0, [sp, #4]
    1284:	ldr	r0, [sp, #4]
    1288:	ldr	r0, [r0]
    128c:	bl	12c0 <__flatbuffers_soffset_cast_from_pe>
    1290:	mov	sp, fp
    1294:	pop	{fp, pc}

00001298 <__flatbuffers_voffset_read_from_pe>:
    1298:	push	{fp, lr}
    129c:	mov	fp, sp
    12a0:	sub	sp, sp, #8
    12a4:	str	r0, [sp, #4]
    12a8:	ldr	r0, [sp, #4]
    12ac:	ldrh	r0, [r0]
    12b0:	bl	12d4 <__flatbuffers_voffset_cast_from_pe>
    12b4:	uxth	r0, r0
    12b8:	mov	sp, fp
    12bc:	pop	{fp, pc}

000012c0 <__flatbuffers_soffset_cast_from_pe>:
    12c0:	sub	sp, sp, #4
    12c4:	str	r0, [sp]
    12c8:	ldr	r0, [sp]
    12cc:	add	sp, sp, #4
    12d0:	bx	lr

000012d4 <__flatbuffers_voffset_cast_from_pe>:
    12d4:	sub	sp, sp, #4
    12d8:	strh	r0, [sp, #2]
    12dc:	ldrh	r0, [sp, #2]
    12e0:	add	sp, sp, #4
    12e4:	bx	lr

000012e8 <flatbuffers_vec_len>:
    12e8:	push	{fp, lr}
    12ec:	mov	fp, sp
    12f0:	sub	sp, sp, #8
    12f4:	str	r0, [sp, #4]
    12f8:	ldr	r0, [sp, #4]
    12fc:	movw	r1, #0
    1300:	cmp	r0, r1
    1304:	beq	1320 <flatbuffers_vec_len+0x38>
    1308:	ldr	r0, [sp, #4]
    130c:	mvn	r1, #3
    1310:	add	r0, r0, r1
    1314:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
    1318:	str	r0, [sp]
    131c:	b	132c <flatbuffers_vec_len+0x44>
    1320:	movw	r0, #0
    1324:	str	r0, [sp]
    1328:	b	132c <flatbuffers_vec_len+0x44>
    132c:	ldr	r0, [sp]
    1330:	mov	sp, fp
    1334:	pop	{fp, pc}

00001338 <reflection_Object_vec_find_by_name>:
    1338:	push	{fp, lr}
    133c:	mov	fp, sp
    1340:	sub	sp, sp, #32
    1344:	str	r0, [fp, #-8]
    1348:	str	r1, [fp, #-12]
    134c:	movw	r0, #0
    1350:	str	r0, [sp, #12]
    1354:	ldr	r0, [fp, #-8]
    1358:	bl	740 <reflection_Object_vec_len>
    135c:	str	r0, [sp, #8]
    1360:	cmp	r0, #0
    1364:	bne	137c <reflection_Object_vec_find_by_name+0x44>
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	ldr	r0, [r0]
    1374:	str	r0, [fp, #-4]
    1378:	b	145c <reflection_Object_vec_find_by_name+0x124>
    137c:	ldr	r0, [sp, #8]
    1380:	mvn	r1, #0
    1384:	add	r0, r0, r1
    1388:	str	r0, [sp, #8]
    138c:	ldr	r0, [sp, #12]
    1390:	ldr	r1, [sp, #8]
    1394:	cmp	r0, r1
    1398:	bcs	1400 <reflection_Object_vec_find_by_name+0xc8>
    139c:	ldr	r0, [sp, #12]
    13a0:	ldr	r1, [sp, #8]
    13a4:	ldr	r2, [sp, #12]
    13a8:	sub	r1, r1, r2
    13ac:	lsr	r1, r1, #1
    13b0:	add	r0, r0, r1
    13b4:	str	r0, [sp, #4]
    13b8:	ldr	r0, [fp, #-8]
    13bc:	ldr	r1, [sp, #4]
    13c0:	bl	898 <reflection_Object_vec_at>
    13c4:	bl	790 <reflection_Object_name>
    13c8:	str	r0, [sp, #16]
    13cc:	ldr	r0, [sp, #16]
    13d0:	ldr	r1, [fp, #-12]
    13d4:	movw	r2, #0
    13d8:	bl	1468 <__flatbuffers_string_cmp>
    13dc:	cmp	r0, #0
    13e0:	bge	13f4 <reflection_Object_vec_find_by_name+0xbc>
    13e4:	ldr	r0, [sp, #4]
    13e8:	add	r0, r0, #1
    13ec:	str	r0, [sp, #12]
    13f0:	b	13fc <reflection_Object_vec_find_by_name+0xc4>
    13f4:	ldr	r0, [sp, #4]
    13f8:	str	r0, [sp, #8]
    13fc:	b	138c <reflection_Object_vec_find_by_name+0x54>
    1400:	ldr	r0, [sp, #12]
    1404:	ldr	r1, [sp, #8]
    1408:	cmp	r0, r1
    140c:	bne	144c <reflection_Object_vec_find_by_name+0x114>
    1410:	ldr	r0, [fp, #-8]
    1414:	ldr	r1, [sp, #12]
    1418:	bl	898 <reflection_Object_vec_at>
    141c:	bl	790 <reflection_Object_name>
    1420:	str	r0, [sp, #16]
    1424:	ldr	r0, [sp, #16]
    1428:	ldr	r1, [fp, #-12]
    142c:	movw	r2, #0
    1430:	bl	1468 <__flatbuffers_string_cmp>
    1434:	cmp	r0, #0
    1438:	bne	1448 <reflection_Object_vec_find_by_name+0x110>
    143c:	ldr	r0, [sp, #12]
    1440:	str	r0, [fp, #-4]
    1444:	b	145c <reflection_Object_vec_find_by_name+0x124>
    1448:	b	144c <reflection_Object_vec_find_by_name+0x114>
    144c:	movw	r0, #0
    1450:	movt	r0, #0
    1454:	ldr	r0, [r0]
    1458:	str	r0, [fp, #-4]
    145c:	ldr	r0, [fp, #-4]
    1460:	mov	sp, fp
    1464:	pop	{fp, pc}

00001468 <__flatbuffers_string_cmp>:
    1468:	push	{fp, lr}
    146c:	mov	fp, sp
    1470:	sub	sp, sp, #16
    1474:	str	r0, [fp, #-4]
    1478:	str	r1, [sp, #8]
    147c:	str	r2, [sp, #4]
    1480:	ldr	r0, [fp, #-4]
    1484:	ldr	r1, [sp, #8]
    1488:	bl	0 <strcmp>
    148c:	mov	sp, fp
    1490:	pop	{fp, pc}

00001494 <reflection_Field_vec_find_by_name>:
    1494:	push	{fp, lr}
    1498:	mov	fp, sp
    149c:	sub	sp, sp, #32
    14a0:	str	r0, [fp, #-8]
    14a4:	str	r1, [fp, #-12]
    14a8:	movw	r0, #0
    14ac:	str	r0, [sp, #12]
    14b0:	ldr	r0, [fp, #-8]
    14b4:	bl	15c4 <reflection_Field_vec_len>
    14b8:	str	r0, [sp, #8]
    14bc:	cmp	r0, #0
    14c0:	bne	14d8 <reflection_Field_vec_find_by_name+0x44>
    14c4:	movw	r0, #0
    14c8:	movt	r0, #0
    14cc:	ldr	r0, [r0]
    14d0:	str	r0, [fp, #-4]
    14d4:	b	15b8 <reflection_Field_vec_find_by_name+0x124>
    14d8:	ldr	r0, [sp, #8]
    14dc:	mvn	r1, #0
    14e0:	add	r0, r0, r1
    14e4:	str	r0, [sp, #8]
    14e8:	ldr	r0, [sp, #12]
    14ec:	ldr	r1, [sp, #8]
    14f0:	cmp	r0, r1
    14f4:	bcs	155c <reflection_Field_vec_find_by_name+0xc8>
    14f8:	ldr	r0, [sp, #12]
    14fc:	ldr	r1, [sp, #8]
    1500:	ldr	r2, [sp, #12]
    1504:	sub	r1, r1, r2
    1508:	lsr	r1, r1, #1
    150c:	add	r0, r0, r1
    1510:	str	r0, [sp, #4]
    1514:	ldr	r0, [fp, #-8]
    1518:	ldr	r1, [sp, #4]
    151c:	bl	a74 <reflection_Field_vec_at>
    1520:	bl	bf4 <reflection_Field_name>
    1524:	str	r0, [sp, #16]
    1528:	ldr	r0, [sp, #16]
    152c:	ldr	r1, [fp, #-12]
    1530:	movw	r2, #0
    1534:	bl	1468 <__flatbuffers_string_cmp>
    1538:	cmp	r0, #0
    153c:	bge	1550 <reflection_Field_vec_find_by_name+0xbc>
    1540:	ldr	r0, [sp, #4]
    1544:	add	r0, r0, #1
    1548:	str	r0, [sp, #12]
    154c:	b	1558 <reflection_Field_vec_find_by_name+0xc4>
    1550:	ldr	r0, [sp, #4]
    1554:	str	r0, [sp, #8]
    1558:	b	14e8 <reflection_Field_vec_find_by_name+0x54>
    155c:	ldr	r0, [sp, #12]
    1560:	ldr	r1, [sp, #8]
    1564:	cmp	r0, r1
    1568:	bne	15a8 <reflection_Field_vec_find_by_name+0x114>
    156c:	ldr	r0, [fp, #-8]
    1570:	ldr	r1, [sp, #12]
    1574:	bl	a74 <reflection_Field_vec_at>
    1578:	bl	bf4 <reflection_Field_name>
    157c:	str	r0, [sp, #16]
    1580:	ldr	r0, [sp, #16]
    1584:	ldr	r1, [fp, #-12]
    1588:	movw	r2, #0
    158c:	bl	1468 <__flatbuffers_string_cmp>
    1590:	cmp	r0, #0
    1594:	bne	15a4 <reflection_Field_vec_find_by_name+0x110>
    1598:	ldr	r0, [sp, #12]
    159c:	str	r0, [fp, #-4]
    15a0:	b	15b8 <reflection_Field_vec_find_by_name+0x124>
    15a4:	b	15a8 <reflection_Field_vec_find_by_name+0x114>
    15a8:	movw	r0, #0
    15ac:	movt	r0, #0
    15b0:	ldr	r0, [r0]
    15b4:	str	r0, [fp, #-4]
    15b8:	ldr	r0, [fp, #-4]
    15bc:	mov	sp, fp
    15c0:	pop	{fp, pc}

000015c4 <reflection_Field_vec_len>:
    15c4:	push	{fp, lr}
    15c8:	mov	fp, sp
    15cc:	sub	sp, sp, #8
    15d0:	str	r0, [sp, #4]
    15d4:	ldr	r0, [sp, #4]
    15d8:	movw	r1, #0
    15dc:	cmp	r0, r1
    15e0:	beq	15fc <reflection_Field_vec_len+0x38>
    15e4:	ldr	r0, [sp, #4]
    15e8:	mvn	r1, #3
    15ec:	add	r0, r0, r1
    15f0:	bl	11f0 <__flatbuffers_uoffset_read_from_pe>
    15f4:	str	r0, [sp]
    15f8:	b	1608 <reflection_Field_vec_len+0x44>
    15fc:	movw	r0, #0
    1600:	str	r0, [sp]
    1604:	b	1608 <reflection_Field_vec_len+0x44>
    1608:	ldr	r0, [sp]
    160c:	mov	sp, fp
    1610:	pop	{fp, pc}

00001614 <flatbuffers_int64_read_from_pe>:
    1614:	push	{fp, lr}
    1618:	mov	fp, sp
    161c:	sub	sp, sp, #8
    1620:	str	r0, [sp, #4]
    1624:	ldr	r0, [sp, #4]
    1628:	ldr	r1, [r0]
    162c:	ldr	r0, [r0, #4]
    1630:	str	r0, [sp]
    1634:	mov	r0, r1
    1638:	ldr	r1, [sp]
    163c:	bl	1648 <flatbuffers_int64_cast_from_pe>
    1640:	mov	sp, fp
    1644:	pop	{fp, pc}

00001648 <flatbuffers_int64_cast_from_pe>:
    1648:	sub	sp, sp, #8
    164c:	str	r0, [sp]
    1650:	str	r1, [sp, #4]
    1654:	ldr	r0, [sp]
    1658:	ldr	r1, [sp, #4]
    165c:	add	sp, sp, #8
    1660:	bx	lr

00001664 <reflection_BaseType_read_from_pe>:
    1664:	push	{fp, lr}
    1668:	mov	fp, sp
    166c:	sub	sp, sp, #8
    1670:	str	r0, [sp, #4]
    1674:	ldr	r0, [sp, #4]
    1678:	ldrsb	r0, [r0]
    167c:	bl	168c <reflection_BaseType_cast_from_pe>
    1680:	sxtb	r0, r0
    1684:	mov	sp, fp
    1688:	pop	{fp, pc}

0000168c <reflection_BaseType_cast_from_pe>:
    168c:	sub	sp, sp, #4
    1690:	strb	r0, [sp, #3]
    1694:	ldrsb	r0, [sp, #3]
    1698:	add	sp, sp, #4
    169c:	bx	lr

000016a0 <flatbuffers_int32_read_from_pe>:
    16a0:	push	{fp, lr}
    16a4:	mov	fp, sp
    16a8:	sub	sp, sp, #8
    16ac:	str	r0, [sp, #4]
    16b0:	ldr	r0, [sp, #4]
    16b4:	ldr	r0, [r0]
    16b8:	bl	16c4 <flatbuffers_int32_cast_from_pe>
    16bc:	mov	sp, fp
    16c0:	pop	{fp, pc}

000016c4 <flatbuffers_int32_cast_from_pe>:
    16c4:	sub	sp, sp, #4
    16c8:	str	r0, [sp]
    16cc:	ldr	r0, [sp]
    16d0:	add	sp, sp, #4
    16d4:	bx	lr
