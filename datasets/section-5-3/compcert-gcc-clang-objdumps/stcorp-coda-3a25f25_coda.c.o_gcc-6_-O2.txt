
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	ldr	r3, [pc, #12]	; 14 <coda_get_libcoda_version+0x14>
   4:	push	{lr}		; (str lr, [sp, #-4]!)
   8:	bl	0 <__aeabi_read_tp>
   c:	ldr	r0, [r3, r0]
  10:	pop	{pc}		; (ldr pc, [sp], #4)
  14:	.word	0x00000000

00000018 <coda_set_option_bypass_special_types>:
  18:	cmp	r0, #1
  1c:	push	{r4, lr}
  20:	mov	r2, r0
  24:	bhi	40 <coda_set_option_bypass_special_types+0x28>
  28:	ldr	r1, [pc, #36]	; 54 <coda_set_option_bypass_special_types+0x3c>
  2c:	mov	r3, #0
  30:	bl	0 <__aeabi_read_tp>
  34:	str	r2, [r1, r0]
  38:	mov	r0, r3
  3c:	pop	{r4, pc}
  40:	ldr	r1, [pc, #16]	; 58 <coda_set_option_bypass_special_types+0x40>
  44:	mvn	r0, #99	; 0x63
  48:	bl	0 <coda_set_error>
  4c:	mvn	r3, #0
  50:	b	38 <coda_set_option_bypass_special_types+0x20>
	...

0000005c <coda_get_option_bypass_special_types>:
  5c:	ldr	r3, [pc, #12]	; 70 <coda_get_option_bypass_special_types+0x14>
  60:	push	{lr}		; (str lr, [sp, #-4]!)
  64:	bl	0 <__aeabi_read_tp>
  68:	ldr	r0, [r3, r0]
  6c:	pop	{pc}		; (ldr pc, [sp], #4)
  70:	.word	0x00000000

00000074 <coda_set_option_perform_boundary_checks>:
  74:	cmp	r0, #1
  78:	push	{r4, lr}
  7c:	mov	r2, r0
  80:	bhi	a0 <coda_set_option_perform_boundary_checks+0x2c>
  84:	ldr	r3, [pc, #40]	; b4 <coda_set_option_perform_boundary_checks+0x40>
  88:	bl	0 <__aeabi_read_tp>
  8c:	mov	r1, #0
  90:	add	r0, r3, r0
  94:	str	r2, [r0, #4]
  98:	mov	r0, r1
  9c:	pop	{r4, pc}
  a0:	ldr	r1, [pc, #16]	; b8 <coda_set_option_perform_boundary_checks+0x44>
  a4:	mvn	r0, #99	; 0x63
  a8:	bl	0 <coda_set_error>
  ac:	mvn	r1, #0
  b0:	b	98 <coda_set_option_perform_boundary_checks+0x24>
	...

000000bc <coda_get_option_perform_boundary_checks>:
  bc:	ldr	r3, [pc, #16]	; d4 <coda_get_option_perform_boundary_checks+0x18>
  c0:	push	{lr}		; (str lr, [sp, #-4]!)
  c4:	bl	0 <__aeabi_read_tp>
  c8:	add	r0, r3, r0
  cc:	ldr	r0, [r0, #4]
  d0:	pop	{pc}		; (ldr pc, [sp], #4)
  d4:	.word	0x00000000

000000d8 <coda_set_option_perform_conversions>:
  d8:	cmp	r0, #1
  dc:	push	{r4, lr}
  e0:	mov	r2, r0
  e4:	bhi	104 <coda_set_option_perform_conversions+0x2c>
  e8:	ldr	r3, [pc, #40]	; 118 <coda_set_option_perform_conversions+0x40>
  ec:	bl	0 <__aeabi_read_tp>
  f0:	mov	r1, #0
  f4:	add	r0, r3, r0
  f8:	str	r2, [r0, #8]
  fc:	mov	r0, r1
 100:	pop	{r4, pc}
 104:	ldr	r1, [pc, #16]	; 11c <coda_set_option_perform_conversions+0x44>
 108:	mvn	r0, #99	; 0x63
 10c:	bl	0 <coda_set_error>
 110:	mvn	r1, #0
 114:	b	fc <coda_set_option_perform_conversions+0x24>
	...

00000120 <coda_get_option_perform_conversions>:
 120:	ldr	r3, [pc, #16]	; 138 <coda_get_option_perform_conversions+0x18>
 124:	push	{lr}		; (str lr, [sp, #-4]!)
 128:	bl	0 <__aeabi_read_tp>
 12c:	add	r0, r3, r0
 130:	ldr	r0, [r0, #8]
 134:	pop	{pc}		; (ldr pc, [sp], #4)
 138:	.word	0x00000000

0000013c <coda_set_option_use_fast_size_expressions>:
 13c:	cmp	r0, #1
 140:	push	{r4, lr}
 144:	mov	r2, r0
 148:	bhi	168 <coda_set_option_use_fast_size_expressions+0x2c>
 14c:	ldr	r3, [pc, #40]	; 17c <coda_set_option_use_fast_size_expressions+0x40>
 150:	bl	0 <__aeabi_read_tp>
 154:	mov	r1, #0
 158:	add	r0, r3, r0
 15c:	str	r2, [r0, #12]
 160:	mov	r0, r1
 164:	pop	{r4, pc}
 168:	ldr	r1, [pc, #16]	; 180 <coda_set_option_use_fast_size_expressions+0x44>
 16c:	mvn	r0, #99	; 0x63
 170:	bl	0 <coda_set_error>
 174:	mvn	r1, #0
 178:	b	160 <coda_set_option_use_fast_size_expressions+0x24>
	...

00000184 <coda_get_option_use_fast_size_expressions>:
 184:	ldr	r3, [pc, #16]	; 19c <coda_get_option_use_fast_size_expressions+0x18>
 188:	push	{lr}		; (str lr, [sp, #-4]!)
 18c:	bl	0 <__aeabi_read_tp>
 190:	add	r0, r3, r0
 194:	ldr	r0, [r0, #12]
 198:	pop	{pc}		; (ldr pc, [sp], #4)
 19c:	.word	0x00000000

000001a0 <coda_set_option_use_mmap>:
 1a0:	cmp	r0, #1
 1a4:	push	{r4, lr}
 1a8:	mov	r2, r0
 1ac:	bhi	1cc <coda_set_option_use_mmap+0x2c>
 1b0:	ldr	r3, [pc, #40]	; 1e0 <coda_set_option_use_mmap+0x40>
 1b4:	bl	0 <__aeabi_read_tp>
 1b8:	mov	r1, #0
 1bc:	add	r0, r3, r0
 1c0:	str	r2, [r0, #16]
 1c4:	mov	r0, r1
 1c8:	pop	{r4, pc}
 1cc:	ldr	r1, [pc, #16]	; 1e4 <coda_set_option_use_mmap+0x44>
 1d0:	mvn	r0, #99	; 0x63
 1d4:	bl	0 <coda_set_error>
 1d8:	mvn	r1, #0
 1dc:	b	1c4 <coda_set_option_use_mmap+0x24>
	...

000001e8 <coda_get_option_use_mmap>:
 1e8:	ldr	r3, [pc, #16]	; 200 <coda_get_option_use_mmap+0x18>
 1ec:	push	{lr}		; (str lr, [sp, #-4]!)
 1f0:	bl	0 <__aeabi_read_tp>
 1f4:	add	r0, r3, r0
 1f8:	ldr	r0, [r0, #16]
 1fc:	pop	{pc}		; (ldr pc, [sp], #4)
 200:	.word	0x00000000

00000204 <coda_set_definition_path>:
 204:	push	{r4, r5, r6, lr}
 208:	mov	r5, r0
 20c:	ldr	r4, [pc, #104]	; 27c <coda_set_definition_path+0x78>
 210:	bl	0 <__aeabi_read_tp>
 214:	add	r6, r4, r0
 218:	ldr	r0, [r6, #4]
 21c:	cmp	r0, #0
 220:	beq	230 <coda_set_definition_path+0x2c>
 224:	bl	0 <free>
 228:	mov	r3, #0
 22c:	str	r3, [r6, #4]
 230:	cmp	r5, #0
 234:	beq	258 <coda_set_definition_path+0x54>
 238:	mov	r0, r5
 23c:	bl	0 <strdup>
 240:	mov	r3, r0
 244:	bl	0 <__aeabi_read_tp>
 248:	add	r0, r4, r0
 24c:	cmp	r3, #0
 250:	str	r3, [r0, #4]
 254:	beq	260 <coda_set_definition_path+0x5c>
 258:	mov	r0, #0
 25c:	pop	{r4, r5, r6, pc}
 260:	ldr	r3, [pc, #24]	; 280 <coda_set_definition_path+0x7c>
 264:	ldr	r2, [pc, #24]	; 284 <coda_set_definition_path+0x80>
 268:	ldr	r1, [pc, #24]	; 288 <coda_set_definition_path+0x84>
 26c:	mvn	r0, #0
 270:	bl	0 <coda_set_error>
 274:	mvn	r0, #0
 278:	pop	{r4, r5, r6, pc}
 27c:	.word	0x00000000
 280:	.word	0x00000181
 284:	.word	0x00000024
 288:	.word	0x00000068

0000028c <coda_set_definition_path_conditional>:
 28c:	push	{r4, r5, r6, lr}
 290:	mov	r5, r0
 294:	sub	sp, sp, #8
 298:	ldr	r0, [pc, #180]	; 354 <coda_set_definition_path_conditional+0xc8>
 29c:	mov	r4, r1
 2a0:	mov	r6, r2
 2a4:	bl	0 <getenv>
 2a8:	cmp	r0, #0
 2ac:	beq	2c0 <coda_set_definition_path_conditional+0x34>
 2b0:	mov	r4, #0
 2b4:	mov	r0, r4
 2b8:	add	sp, sp, #8
 2bc:	pop	{r4, r5, r6, pc}
 2c0:	cmp	r4, #0
 2c4:	beq	330 <coda_set_definition_path_conditional+0xa4>
 2c8:	mov	r1, r5
 2cc:	mov	r0, r4
 2d0:	mov	r2, sp
 2d4:	bl	0 <coda_path_find_file>
 2d8:	cmp	r0, #0
 2dc:	bne	344 <coda_set_definition_path_conditional+0xb8>
 2e0:	ldr	r0, [sp]
 2e4:	cmp	r0, #0
 2e8:	beq	2b0 <coda_set_definition_path_conditional+0x24>
 2ec:	mov	r2, r6
 2f0:	add	r3, sp, #4
 2f4:	mov	r1, #1
 2f8:	bl	0 <coda_path_from_path>
 2fc:	cmp	r0, #0
 300:	ldr	r0, [sp]
 304:	bne	34c <coda_set_definition_path_conditional+0xc0>
 308:	bl	0 <free>
 30c:	ldr	r0, [sp, #4]
 310:	bl	204 <coda_set_definition_path>
 314:	subs	r4, r0, #0
 318:	ldr	r0, [sp, #4]
 31c:	bne	34c <coda_set_definition_path_conditional+0xc0>
 320:	bl	0 <free>
 324:	mov	r0, r4
 328:	add	sp, sp, #8
 32c:	pop	{r4, r5, r6, pc}
 330:	mov	r0, r5
 334:	mov	r1, sp
 338:	bl	0 <coda_path_for_program>
 33c:	cmp	r0, #0
 340:	beq	2e0 <coda_set_definition_path_conditional+0x54>
 344:	mvn	r4, #0
 348:	b	2b4 <coda_set_definition_path_conditional+0x28>
 34c:	bl	0 <free>
 350:	b	344 <coda_set_definition_path_conditional+0xb8>
 354:	.word	0x0000009c

00000358 <coda_init>:
 358:	push	{r4, r5, r6, lr}
 35c:	bl	0 <__aeabi_read_tp>
 360:	ldr	r4, [pc, #212]	; 43c <coda_init+0xe4>
 364:	add	r5, r4, r0
 368:	ldr	r3, [r5, #8]
 36c:	cmp	r3, #0
 370:	beq	38c <coda_init+0x34>
 374:	bl	0 <__aeabi_read_tp>
 378:	add	r0, r4, r0
 37c:	add	r3, r3, #1
 380:	str	r3, [r0, #8]
 384:	mov	r0, #0
 388:	pop	{r4, r5, r6, pc}
 38c:	bl	0 <coda_leap_second_table_init>
 390:	cmp	r0, #0
 394:	bne	3e8 <coda_init+0x90>
 398:	bl	0 <coda_data_dictionary_init>
 39c:	cmp	r0, #0
 3a0:	bne	3e4 <coda_init+0x8c>
 3a4:	ldr	r0, [r5, #4]
 3a8:	cmp	r0, #0
 3ac:	beq	3f0 <coda_init+0x98>
 3b0:	bl	0 <coda_read_definitions>
 3b4:	cmp	r0, #0
 3b8:	bne	3e0 <coda_init+0x88>
 3bc:	ldr	r2, [pc, #124]	; 440 <coda_init+0xe8>
 3c0:	bl	0 <__aeabi_read_tp>
 3c4:	add	r3, r4, r0
 3c8:	add	r0, r0, r2
 3cc:	mov	r2, #1
 3d0:	ldr	r3, [r3, #8]
 3d4:	str	r2, [r0, #4]
 3d8:	str	r2, [r0, #8]
 3dc:	b	374 <coda_init+0x1c>
 3e0:	bl	0 <coda_data_dictionary_done>
 3e4:	bl	0 <coda_leap_second_table_done>
 3e8:	mvn	r0, #0
 3ec:	pop	{r4, r5, r6, pc}
 3f0:	ldr	r0, [pc, #76]	; 444 <coda_init+0xec>
 3f4:	bl	0 <getenv>
 3f8:	cmp	r0, #0
 3fc:	beq	3bc <coda_init+0x64>
 400:	ldr	r0, [pc, #60]	; 444 <coda_init+0xec>
 404:	bl	0 <getenv>
 408:	bl	0 <strdup>
 40c:	cmp	r0, #0
 410:	str	r0, [r5, #4]
 414:	bne	3b0 <coda_init+0x58>
 418:	bl	0 <coda_data_dictionary_done>
 41c:	bl	0 <coda_leap_second_table_done>
 420:	mov	r3, #512	; 0x200
 424:	ldr	r2, [pc, #28]	; 448 <coda_init+0xf0>
 428:	ldr	r1, [pc, #28]	; 44c <coda_init+0xf4>
 42c:	mvn	r0, #0
 430:	bl	0 <coda_set_error>
 434:	mvn	r0, #0
 438:	pop	{r4, r5, r6, pc}
	...
 444:	.word	0x0000009c
 448:	.word	0x00000024
 44c:	.word	0x00000068

00000450 <coda_done>:
 450:	push	{r4, r5, r6, lr}
 454:	bl	0 <__aeabi_read_tp>
 458:	ldr	r5, [pc, #80]	; 4b0 <coda_done+0x60>
 45c:	add	r5, r5, r0
 460:	ldr	r3, [r5, #8]
 464:	cmp	r3, #0
 468:	pople	{r4, r5, r6, pc}
 46c:	sub	r4, r3, #1
 470:	cmp	r4, #0
 474:	str	r4, [r5, #8]
 478:	popne	{r4, r5, r6, pc}
 47c:	bl	0 <coda_sp3_done>
 480:	bl	0 <coda_rinex_done>
 484:	bl	0 <coda_grib_done>
 488:	bl	0 <coda_data_dictionary_done>
 48c:	ldr	r0, [r5, #4]
 490:	cmp	r0, #0
 494:	beq	4a0 <coda_done+0x50>
 498:	bl	0 <free>
 49c:	str	r4, [r5, #4]
 4a0:	bl	0 <coda_mem_done>
 4a4:	bl	0 <coda_type_done>
 4a8:	pop	{r4, r5, r6, lr}
 4ac:	b	0 <coda_leap_second_table_done>
 4b0:	.word	0x00000000

000004b4 <coda_free>:
 4b4:	b	0 <free>
