
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #16
       c:	str	r0, [sp, #8]
      10:	str	r1, [sp, #4]
      14:	ldr	r0, [sp, #8]
      18:	movw	r1, #0
      1c:	movt	r1, #0
      20:	bl	0 <strcmp>
      24:	cmp	r0, #0
      28:	bne	3c <coda_format_from_string+0x3c>
      2c:	ldr	r0, [sp, #4]
      30:	movw	r1, #0
      34:	str	r1, [r0]
      38:	b	1e8 <coda_format_from_string+0x1e8>
      3c:	ldr	r0, [sp, #8]
      40:	movw	r1, #0
      44:	movt	r1, #0
      48:	bl	0 <strcmp>
      4c:	cmp	r0, #0
      50:	bne	64 <coda_format_from_string+0x64>
      54:	ldr	r0, [sp, #4]
      58:	movw	r1, #1
      5c:	str	r1, [r0]
      60:	b	1e4 <coda_format_from_string+0x1e4>
      64:	ldr	r0, [sp, #8]
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	bl	0 <strcmp>
      74:	cmp	r0, #0
      78:	bne	8c <coda_format_from_string+0x8c>
      7c:	ldr	r0, [sp, #4]
      80:	movw	r1, #2
      84:	str	r1, [r0]
      88:	b	1e0 <coda_format_from_string+0x1e0>
      8c:	ldr	r0, [sp, #8]
      90:	movw	r1, #0
      94:	movt	r1, #0
      98:	bl	0 <strcmp>
      9c:	cmp	r0, #0
      a0:	bne	b4 <coda_format_from_string+0xb4>
      a4:	ldr	r0, [sp, #4]
      a8:	movw	r1, #3
      ac:	str	r1, [r0]
      b0:	b	1dc <coda_format_from_string+0x1dc>
      b4:	ldr	r0, [sp, #8]
      b8:	movw	r1, #0
      bc:	movt	r1, #0
      c0:	bl	0 <strcmp>
      c4:	cmp	r0, #0
      c8:	bne	dc <coda_format_from_string+0xdc>
      cc:	ldr	r0, [sp, #4]
      d0:	movw	r1, #4
      d4:	str	r1, [r0]
      d8:	b	1d8 <coda_format_from_string+0x1d8>
      dc:	ldr	r0, [sp, #8]
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	bl	0 <strcmp>
      ec:	cmp	r0, #0
      f0:	bne	104 <coda_format_from_string+0x104>
      f4:	ldr	r0, [sp, #4]
      f8:	movw	r1, #5
      fc:	str	r1, [r0]
     100:	b	1d4 <coda_format_from_string+0x1d4>
     104:	ldr	r0, [sp, #8]
     108:	movw	r1, #0
     10c:	movt	r1, #0
     110:	bl	0 <strcmp>
     114:	cmp	r0, #0
     118:	bne	12c <coda_format_from_string+0x12c>
     11c:	ldr	r0, [sp, #4]
     120:	movw	r1, #6
     124:	str	r1, [r0]
     128:	b	1d0 <coda_format_from_string+0x1d0>
     12c:	ldr	r0, [sp, #8]
     130:	movw	r1, #0
     134:	movt	r1, #0
     138:	bl	0 <strcmp>
     13c:	cmp	r0, #0
     140:	bne	154 <coda_format_from_string+0x154>
     144:	ldr	r0, [sp, #4]
     148:	movw	r1, #7
     14c:	str	r1, [r0]
     150:	b	1cc <coda_format_from_string+0x1cc>
     154:	ldr	r0, [sp, #8]
     158:	movw	r1, #0
     15c:	movt	r1, #0
     160:	bl	0 <strcmp>
     164:	cmp	r0, #0
     168:	bne	17c <coda_format_from_string+0x17c>
     16c:	ldr	r0, [sp, #4]
     170:	movw	r1, #8
     174:	str	r1, [r0]
     178:	b	1c8 <coda_format_from_string+0x1c8>
     17c:	ldr	r0, [sp, #8]
     180:	movw	r1, #0
     184:	movt	r1, #0
     188:	bl	0 <strcmp>
     18c:	cmp	r0, #0
     190:	bne	1a4 <coda_format_from_string+0x1a4>
     194:	ldr	r0, [sp, #4]
     198:	movw	r1, #9
     19c:	str	r1, [r0]
     1a0:	b	1c4 <coda_format_from_string+0x1c4>
     1a4:	ldr	r0, [pc, #80]	; 1fc <coda_format_from_string+0x1fc>
     1a8:	ldr	r2, [sp, #8]
     1ac:	movw	r1, #0
     1b0:	movt	r1, #0
     1b4:	bl	0 <coda_set_error>
     1b8:	mvn	r0, #0
     1bc:	str	r0, [fp, #-4]
     1c0:	b	1f0 <coda_format_from_string+0x1f0>
     1c4:	b	1c8 <coda_format_from_string+0x1c8>
     1c8:	b	1cc <coda_format_from_string+0x1cc>
     1cc:	b	1d0 <coda_format_from_string+0x1d0>
     1d0:	b	1d4 <coda_format_from_string+0x1d4>
     1d4:	b	1d8 <coda_format_from_string+0x1d8>
     1d8:	b	1dc <coda_format_from_string+0x1dc>
     1dc:	b	1e0 <coda_format_from_string+0x1e0>
     1e0:	b	1e4 <coda_format_from_string+0x1e4>
     1e4:	b	1e8 <coda_format_from_string+0x1e8>
     1e8:	movw	r0, #0
     1ec:	str	r0, [fp, #-4]
     1f0:	ldr	r0, [fp, #-4]
     1f4:	mov	sp, fp
     1f8:	pop	{fp, pc}
     1fc:	.word	0xfffffe70

00000200 <coda_element_name_from_xml_name>:
     200:	sub	sp, sp, #16
     204:	str	r0, [sp, #8]
     208:	ldr	r0, [sp, #8]
     20c:	str	r0, [sp, #4]
     210:	ldr	r0, [sp, #4]
     214:	ldrb	r0, [r0]
     218:	cmp	r0, #32
     21c:	movw	r0, #0
     220:	str	r0, [sp]
     224:	beq	240 <coda_element_name_from_xml_name+0x40>
     228:	ldr	r0, [sp, #4]
     22c:	ldrb	r0, [r0]
     230:	cmp	r0, #0
     234:	movw	r0, #0
     238:	movne	r0, #1
     23c:	str	r0, [sp]
     240:	ldr	r0, [sp]
     244:	tst	r0, #1
     248:	beq	25c <coda_element_name_from_xml_name+0x5c>
     24c:	ldr	r0, [sp, #4]
     250:	add	r0, r0, #1
     254:	str	r0, [sp, #4]
     258:	b	210 <coda_element_name_from_xml_name+0x10>
     25c:	ldr	r0, [sp, #4]
     260:	ldrb	r0, [r0]
     264:	cmp	r0, #0
     268:	bne	278 <coda_element_name_from_xml_name+0x78>
     26c:	ldr	r0, [sp, #8]
     270:	str	r0, [sp, #12]
     274:	b	28c <coda_element_name_from_xml_name+0x8c>
     278:	ldr	r0, [sp, #4]
     27c:	add	r0, r0, #1
     280:	str	r0, [sp, #4]
     284:	ldr	r0, [sp, #4]
     288:	str	r0, [sp, #12]
     28c:	ldr	r0, [sp, #12]
     290:	add	sp, sp, #16
     294:	bx	lr

00000298 <coda_is_identifier>:
     298:	push	{fp, lr}
     29c:	mov	fp, sp
     2a0:	sub	sp, sp, #16
     2a4:	str	r0, [sp, #8]
     2a8:	ldr	r0, [sp, #8]
     2ac:	movw	r1, #0
     2b0:	cmp	r0, r1
     2b4:	bne	2c4 <coda_is_identifier+0x2c>
     2b8:	movw	r0, #0
     2bc:	str	r0, [fp, #-4]
     2c0:	b	380 <coda_is_identifier+0xe8>
     2c4:	bl	0 <__ctype_b_loc>
     2c8:	ldr	r0, [r0]
     2cc:	ldr	r1, [sp, #8]
     2d0:	ldrb	r1, [r1]
     2d4:	mov	r2, r1
     2d8:	add	r0, r0, r1, lsl #1
     2dc:	ldrh	r0, [r0]
     2e0:	and	r0, r0, #1024	; 0x400
     2e4:	cmp	r0, #0
     2e8:	bne	2f8 <coda_is_identifier+0x60>
     2ec:	movw	r0, #0
     2f0:	str	r0, [fp, #-4]
     2f4:	b	380 <coda_is_identifier+0xe8>
     2f8:	movw	r0, #1
     2fc:	str	r0, [sp, #4]
     300:	ldr	r0, [sp, #8]
     304:	ldr	r1, [sp, #4]
     308:	add	r0, r0, r1
     30c:	ldrb	r0, [r0]
     310:	cmp	r0, #0
     314:	beq	378 <coda_is_identifier+0xe0>
     318:	bl	0 <__ctype_b_loc>
     31c:	ldr	r0, [r0]
     320:	ldr	r1, [sp, #8]
     324:	ldr	r2, [sp, #4]
     328:	ldrb	r1, [r1, r2]
     32c:	mov	r2, r1
     330:	add	r0, r0, r1, lsl #1
     334:	ldrh	r0, [r0]
     338:	and	r0, r0, #8
     33c:	cmp	r0, #0
     340:	bne	368 <coda_is_identifier+0xd0>
     344:	ldr	r0, [sp, #8]
     348:	ldr	r1, [sp, #4]
     34c:	add	r0, r0, r1
     350:	ldrb	r0, [r0]
     354:	cmp	r0, #95	; 0x5f
     358:	beq	368 <coda_is_identifier+0xd0>
     35c:	movw	r0, #0
     360:	str	r0, [fp, #-4]
     364:	b	380 <coda_is_identifier+0xe8>
     368:	ldr	r0, [sp, #4]
     36c:	add	r0, r0, #1
     370:	str	r0, [sp, #4]
     374:	b	300 <coda_is_identifier+0x68>
     378:	movw	r0, #1
     37c:	str	r0, [fp, #-4]
     380:	ldr	r0, [fp, #-4]
     384:	mov	sp, fp
     388:	pop	{fp, pc}

0000038c <coda_identifier_from_name>:
     38c:	push	{fp, lr}
     390:	mov	fp, sp
     394:	sub	sp, sp, #40	; 0x28
     398:	str	r0, [fp, #-8]
     39c:	str	r1, [fp, #-12]
     3a0:	movw	r0, #4
     3a4:	str	r0, [fp, #-16]
     3a8:	ldr	r0, [fp, #-8]
     3ac:	movw	r1, #0
     3b0:	cmp	r0, r1
     3b4:	bne	3c8 <coda_identifier_from_name+0x3c>
     3b8:	movw	r0, #0
     3bc:	movt	r0, #0
     3c0:	str	r0, [fp, #-8]
     3c4:	b	458 <coda_identifier_from_name+0xcc>
     3c8:	b	3cc <coda_identifier_from_name+0x40>
     3cc:	ldr	r0, [fp, #-8]
     3d0:	ldrb	r0, [r0]
     3d4:	cmp	r0, #0
     3d8:	movw	r0, #0
     3dc:	str	r0, [sp, #4]
     3e0:	beq	41c <coda_identifier_from_name+0x90>
     3e4:	bl	0 <__ctype_b_loc>
     3e8:	ldr	r0, [r0]
     3ec:	ldr	r1, [fp, #-8]
     3f0:	ldrb	r1, [r1]
     3f4:	mov	r2, r1
     3f8:	add	r0, r0, r1, lsl #1
     3fc:	ldrh	r0, [r0]
     400:	and	r0, r0, #1024	; 0x400
     404:	cmp	r0, #0
     408:	movw	r0, #0
     40c:	movne	r0, #1
     410:	mvn	r1, #0
     414:	eor	r0, r0, r1
     418:	str	r0, [sp, #4]
     41c:	ldr	r0, [sp, #4]
     420:	tst	r0, #1
     424:	beq	438 <coda_identifier_from_name+0xac>
     428:	ldr	r0, [fp, #-8]
     42c:	add	r0, r0, #1
     430:	str	r0, [fp, #-8]
     434:	b	3cc <coda_identifier_from_name+0x40>
     438:	ldr	r0, [fp, #-8]
     43c:	ldrb	r0, [r0]
     440:	cmp	r0, #0
     444:	bne	454 <coda_identifier_from_name+0xc8>
     448:	movw	r0, #0
     44c:	movt	r0, #0
     450:	str	r0, [fp, #-8]
     454:	b	458 <coda_identifier_from_name+0xcc>
     458:	ldr	r0, [fp, #-8]
     45c:	bl	0 <strlen>
     460:	str	r0, [sp, #16]
     464:	ldr	r0, [sp, #16]
     468:	add	r0, r0, #4
     46c:	add	r0, r0, #1
     470:	bl	0 <malloc>
     474:	str	r0, [sp, #20]
     478:	ldr	r0, [sp, #20]
     47c:	movw	r1, #0
     480:	cmp	r0, r1
     484:	bne	4bc <coda_identifier_from_name+0x130>
     488:	ldr	r0, [sp, #16]
     48c:	add	r2, r0, #4
     490:	mvn	r0, #0
     494:	movw	r1, #0
     498:	movt	r1, #0
     49c:	movw	r3, #0
     4a0:	movt	r3, #0
     4a4:	movw	ip, #172	; 0xac
     4a8:	str	ip, [sp]
     4ac:	bl	0 <coda_set_error>
     4b0:	movw	r0, #0
     4b4:	str	r0, [fp, #-4]
     4b8:	b	604 <coda_identifier_from_name+0x278>
     4bc:	ldr	r0, [fp, #-8]
     4c0:	ldrb	r0, [r0]
     4c4:	ldr	r1, [sp, #20]
     4c8:	strb	r0, [r1]
     4cc:	movw	r0, #1
     4d0:	str	r0, [sp, #12]
     4d4:	ldr	r0, [sp, #12]
     4d8:	ldr	r1, [sp, #16]
     4dc:	cmp	r0, r1
     4e0:	bge	55c <coda_identifier_from_name+0x1d0>
     4e4:	bl	0 <__ctype_b_loc>
     4e8:	ldr	r0, [r0]
     4ec:	ldr	r1, [fp, #-8]
     4f0:	ldr	r2, [sp, #12]
     4f4:	ldrb	r1, [r1, r2]
     4f8:	mov	r2, r1
     4fc:	add	r0, r0, r1, lsl #1
     500:	ldrh	r0, [r0]
     504:	and	r0, r0, #8
     508:	cmp	r0, #0
     50c:	beq	534 <coda_identifier_from_name+0x1a8>
     510:	ldr	r0, [fp, #-8]
     514:	ldr	r1, [sp, #12]
     518:	add	r0, r0, r1
     51c:	ldrb	r0, [r0]
     520:	ldr	r1, [sp, #20]
     524:	ldr	r2, [sp, #12]
     528:	add	r1, r1, r2
     52c:	strb	r0, [r1]
     530:	b	548 <coda_identifier_from_name+0x1bc>
     534:	ldr	r0, [sp, #20]
     538:	ldr	r1, [sp, #12]
     53c:	add	r0, r0, r1
     540:	movw	r1, #95	; 0x5f
     544:	strb	r1, [r0]
     548:	b	54c <coda_identifier_from_name+0x1c0>
     54c:	ldr	r0, [sp, #12]
     550:	add	r0, r0, #1
     554:	str	r0, [sp, #12]
     558:	b	4d4 <coda_identifier_from_name+0x148>
     55c:	ldr	r0, [sp, #20]
     560:	ldr	r1, [sp, #16]
     564:	add	r0, r0, r1
     568:	movw	r1, #0
     56c:	strb	r1, [r0]
     570:	ldr	r0, [fp, #-12]
     574:	movw	r1, #0
     578:	cmp	r0, r1
     57c:	beq	5fc <coda_identifier_from_name+0x270>
     580:	movw	r0, #0
     584:	str	r0, [sp, #8]
     588:	ldr	r0, [fp, #-12]
     58c:	ldr	r1, [sp, #20]
     590:	bl	0 <coda_hashtable_get_index_from_name>
     594:	cmp	r0, #0
     598:	blt	5f8 <coda_identifier_from_name+0x26c>
     59c:	ldr	r0, [sp, #8]
     5a0:	add	r0, r0, #1
     5a4:	str	r0, [sp, #8]
     5a8:	ldr	r0, [sp, #8]
     5ac:	cmp	r0, #1000	; 0x3e8
     5b0:	bge	5b8 <coda_identifier_from_name+0x22c>
     5b4:	b	5d8 <coda_identifier_from_name+0x24c>
     5b8:	movw	r0, #0
     5bc:	movt	r0, #0
     5c0:	movw	r1, #0
     5c4:	movt	r1, #0
     5c8:	movw	r2, #203	; 0xcb
     5cc:	movw	r3, #0
     5d0:	movt	r3, #0
     5d4:	bl	0 <__assert_fail>
     5d8:	ldr	r0, [sp, #20]
     5dc:	ldr	r1, [sp, #16]
     5e0:	add	r0, r0, r1
     5e4:	ldr	r2, [sp, #8]
     5e8:	movw	r1, #0
     5ec:	movt	r1, #0
     5f0:	bl	0 <sprintf>
     5f4:	b	588 <coda_identifier_from_name+0x1fc>
     5f8:	b	5fc <coda_identifier_from_name+0x270>
     5fc:	ldr	r0, [sp, #20]
     600:	str	r0, [fp, #-4]
     604:	ldr	r0, [fp, #-4]
     608:	mov	sp, fp
     60c:	pop	{fp, pc}

00000610 <coda_c_index_to_fortran_index>:
     610:	push	{fp, lr}
     614:	mov	fp, sp
     618:	sub	sp, sp, #64	; 0x40
     61c:	str	r0, [fp, #-8]
     620:	str	r1, [fp, #-12]
     624:	str	r2, [fp, #-16]
     628:	ldr	r0, [fp, #-8]
     62c:	cmp	r0, #8
     630:	ble	658 <coda_c_index_to_fortran_index+0x48>
     634:	ldr	r2, [fp, #-8]
     638:	mvn	r0, #99	; 0x63
     63c:	movw	r1, #0
     640:	movt	r1, #0
     644:	movw	r3, #8
     648:	bl	0 <coda_set_error>
     64c:	mvn	r0, #0
     650:	str	r0, [fp, #-4]
     654:	b	734 <coda_c_index_to_fortran_index+0x124>
     658:	ldr	r0, [fp, #-8]
     65c:	sub	r0, r0, #1
     660:	str	r0, [fp, #-20]	; 0xffffffec
     664:	ldr	r0, [fp, #-20]	; 0xffffffec
     668:	cmp	r0, #0
     66c:	blt	6c0 <coda_c_index_to_fortran_index+0xb0>
     670:	ldr	r0, [fp, #-16]
     674:	ldr	r1, [fp, #-12]
     678:	ldr	r2, [fp, #-20]	; 0xffffffec
     67c:	ldr	r1, [r1, r2, lsl #2]
     680:	sdiv	r3, r0, r1
     684:	mls	r0, r3, r1, r0
     688:	add	r1, sp, #4
     68c:	str	r0, [r1, r2, lsl #2]
     690:	ldr	r0, [fp, #-12]
     694:	ldr	r1, [fp, #-20]	; 0xffffffec
     698:	add	r0, r0, r1, lsl #2
     69c:	ldr	r0, [r0]
     6a0:	ldr	r1, [fp, #-16]
     6a4:	sdiv	r0, r1, r0
     6a8:	str	r0, [fp, #-16]
     6ac:	ldr	r0, [fp, #-20]	; 0xffffffec
     6b0:	mvn	r1, #0
     6b4:	add	r0, r0, r1
     6b8:	str	r0, [fp, #-20]	; 0xffffffec
     6bc:	b	664 <coda_c_index_to_fortran_index+0x54>
     6c0:	movw	r0, #0
     6c4:	str	r0, [fp, #-24]	; 0xffffffe8
     6c8:	movw	r1, #1
     6cc:	str	r1, [fp, #-28]	; 0xffffffe4
     6d0:	str	r0, [fp, #-20]	; 0xffffffec
     6d4:	ldr	r0, [fp, #-20]	; 0xffffffec
     6d8:	ldr	r1, [fp, #-8]
     6dc:	cmp	r0, r1
     6e0:	bge	72c <coda_c_index_to_fortran_index+0x11c>
     6e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     6e8:	ldr	r1, [fp, #-20]	; 0xffffffec
     6ec:	add	r2, sp, #4
     6f0:	ldr	r1, [r2, r1, lsl #2]
     6f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6f8:	mla	r0, r0, r1, r2
     6fc:	str	r0, [fp, #-24]	; 0xffffffe8
     700:	ldr	r0, [fp, #-12]
     704:	ldr	r1, [fp, #-20]	; 0xffffffec
     708:	add	r0, r0, r1, lsl #2
     70c:	ldr	r0, [r0]
     710:	ldr	r1, [fp, #-28]	; 0xffffffe4
     714:	mul	r0, r1, r0
     718:	str	r0, [fp, #-28]	; 0xffffffe4
     71c:	ldr	r0, [fp, #-20]	; 0xffffffec
     720:	add	r0, r0, #1
     724:	str	r0, [fp, #-20]	; 0xffffffec
     728:	b	6d4 <coda_c_index_to_fortran_index+0xc4>
     72c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     730:	str	r0, [fp, #-4]
     734:	ldr	r0, [fp, #-4]
     738:	mov	sp, fp
     73c:	pop	{fp, pc}

00000740 <coda_path_find_file>:
     740:	push	{fp, lr}
     744:	mov	fp, sp
     748:	sub	sp, sp, #152	; 0x98
     74c:	str	r0, [fp, #-8]
     750:	str	r1, [fp, #-12]
     754:	str	r2, [fp, #-16]
     758:	movw	r0, #58	; 0x3a
     75c:	strb	r0, [fp, #-17]	; 0xffffffef
     760:	movw	r0, #0
     764:	str	r0, [fp, #-32]	; 0xffffffe0
     768:	str	r0, [fp, #-36]	; 0xffffffdc
     76c:	ldr	r1, [fp, #-12]
     770:	str	r0, [sp, #8]
     774:	mov	r0, r1
     778:	bl	0 <strlen>
     77c:	str	r0, [fp, #-40]	; 0xffffffd8
     780:	ldr	r0, [fp, #-8]
     784:	ldr	r1, [sp, #8]
     788:	cmp	r0, r1
     78c:	beq	7a0 <coda_path_find_file+0x60>
     790:	ldr	r0, [fp, #-8]
     794:	ldrb	r0, [r0]
     798:	cmp	r0, #0
     79c:	bne	7b4 <coda_path_find_file+0x74>
     7a0:	ldr	r0, [fp, #-16]
     7a4:	movw	r1, #0
     7a8:	str	r1, [r0]
     7ac:	str	r1, [fp, #-4]
     7b0:	b	9e0 <coda_path_find_file+0x2a0>
     7b4:	ldr	r0, [fp, #-8]
     7b8:	bl	0 <strdup>
     7bc:	str	r0, [fp, #-24]	; 0xffffffe8
     7c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7c4:	movw	r1, #0
     7c8:	cmp	r0, r1
     7cc:	bne	7f8 <coda_path_find_file+0xb8>
     7d0:	mvn	r0, #0
     7d4:	movw	r1, #0
     7d8:	movt	r1, #0
     7dc:	movw	r2, #0
     7e0:	movt	r2, #0
     7e4:	movw	r3, #391	; 0x187
     7e8:	bl	0 <coda_set_error>
     7ec:	mvn	r0, #0
     7f0:	str	r0, [fp, #-4]
     7f4:	b	9e0 <coda_path_find_file+0x2a0>
     7f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7fc:	str	r0, [fp, #-28]	; 0xffffffe4
     800:	ldr	r0, [fp, #-28]	; 0xffffffe4
     804:	ldrb	r0, [r0]
     808:	cmp	r0, #0
     80c:	beq	9b0 <coda_path_find_file+0x270>
     810:	ldr	r0, [fp, #-28]	; 0xffffffe4
     814:	str	r0, [sp, #20]
     818:	ldr	r0, [sp, #20]
     81c:	ldrb	r0, [r0]
     820:	cmp	r0, #0
     824:	movw	r0, #0
     828:	str	r0, [sp, #4]
     82c:	beq	848 <coda_path_find_file+0x108>
     830:	ldr	r0, [sp, #20]
     834:	ldrb	r0, [r0]
     838:	cmp	r0, #58	; 0x3a
     83c:	movw	r0, #0
     840:	movne	r0, #1
     844:	str	r0, [sp, #4]
     848:	ldr	r0, [sp, #4]
     84c:	tst	r0, #1
     850:	beq	864 <coda_path_find_file+0x124>
     854:	ldr	r0, [sp, #20]
     858:	add	r0, r0, #1
     85c:	str	r0, [sp, #20]
     860:	b	818 <coda_path_find_file+0xd8>
     864:	ldr	r0, [sp, #20]
     868:	ldrb	r0, [r0]
     86c:	cmp	r0, #0
     870:	beq	88c <coda_path_find_file+0x14c>
     874:	ldr	r0, [sp, #20]
     878:	movw	r1, #0
     87c:	strb	r1, [r0]
     880:	ldr	r0, [sp, #20]
     884:	add	r0, r0, #1
     888:	str	r0, [sp, #20]
     88c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     890:	bl	0 <strlen>
     894:	str	r0, [sp, #16]
     898:	ldr	r0, [fp, #-36]	; 0xffffffdc
     89c:	ldr	r1, [sp, #16]
     8a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     8a4:	add	r1, r1, r2
     8a8:	add	r1, r1, #1
     8ac:	cmp	r0, r1
     8b0:	bge	93c <coda_path_find_file+0x1fc>
     8b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8b8:	ldr	r1, [sp, #16]
     8bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
     8c0:	add	r1, r1, r2
     8c4:	add	r1, r1, #2
     8c8:	bl	0 <realloc>
     8cc:	str	r0, [sp, #12]
     8d0:	ldr	r0, [sp, #12]
     8d4:	movw	r1, #0
     8d8:	cmp	r0, r1
     8dc:	bne	920 <coda_path_find_file+0x1e0>
     8e0:	mvn	r0, #0
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	movw	r2, #0
     8f0:	movt	r2, #0
     8f4:	movw	r3, #421	; 0x1a5
     8f8:	bl	0 <coda_set_error>
     8fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
     900:	movw	r1, #0
     904:	cmp	r0, r1
     908:	beq	914 <coda_path_find_file+0x1d4>
     90c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     910:	bl	0 <free>
     914:	mvn	r0, #0
     918:	str	r0, [fp, #-4]
     91c:	b	9e0 <coda_path_find_file+0x2a0>
     920:	ldr	r0, [sp, #12]
     924:	str	r0, [fp, #-32]	; 0xffffffe0
     928:	ldr	r0, [sp, #16]
     92c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     930:	add	r0, r0, r1
     934:	add	r0, r0, #1
     938:	str	r0, [fp, #-36]	; 0xffffffdc
     93c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     940:	ldr	r2, [fp, #-28]	; 0xffffffe4
     944:	ldr	r3, [fp, #-12]
     948:	movw	r1, #0
     94c:	movt	r1, #0
     950:	bl	0 <sprintf>
     954:	ldr	r1, [fp, #-32]	; 0xffffffe0
     958:	str	r0, [sp]
     95c:	mov	r0, r1
     960:	add	r1, sp, #24
     964:	bl	0 <stat>
     968:	cmp	r0, #0
     96c:	bne	9a4 <coda_path_find_file+0x264>
     970:	ldr	r0, [sp, #40]	; 0x28
     974:	and	r0, r0, #32768	; 0x8000
     978:	cmp	r0, #0
     97c:	beq	9a0 <coda_path_find_file+0x260>
     980:	ldr	r0, [fp, #-32]	; 0xffffffe0
     984:	ldr	r1, [fp, #-16]
     988:	str	r0, [r1]
     98c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     990:	bl	0 <free>
     994:	movw	r0, #0
     998:	str	r0, [fp, #-4]
     99c:	b	9e0 <coda_path_find_file+0x2a0>
     9a0:	b	9a4 <coda_path_find_file+0x264>
     9a4:	ldr	r0, [sp, #20]
     9a8:	str	r0, [fp, #-28]	; 0xffffffe4
     9ac:	b	800 <coda_path_find_file+0xc0>
     9b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9b4:	movw	r1, #0
     9b8:	cmp	r0, r1
     9bc:	beq	9c8 <coda_path_find_file+0x288>
     9c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9c4:	bl	0 <free>
     9c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9cc:	bl	0 <free>
     9d0:	ldr	r0, [fp, #-16]
     9d4:	movw	r1, #0
     9d8:	str	r1, [r0]
     9dc:	str	r1, [fp, #-4]
     9e0:	ldr	r0, [fp, #-4]
     9e4:	mov	sp, fp
     9e8:	pop	{fp, pc}

000009ec <coda_path_from_path>:
     9ec:	push	{fp, lr}
     9f0:	mov	fp, sp
     9f4:	sub	sp, sp, #40	; 0x28
     9f8:	str	r0, [fp, #-8]
     9fc:	str	r1, [fp, #-12]
     a00:	str	r2, [fp, #-16]
     a04:	str	r3, [sp, #20]
     a08:	ldr	r0, [fp, #-8]
     a0c:	bl	0 <strlen>
     a10:	str	r0, [sp, #12]
     a14:	ldr	r0, [fp, #-16]
     a18:	movw	r1, #0
     a1c:	cmp	r0, r1
     a20:	bne	a30 <coda_path_from_path+0x44>
     a24:	movw	r0, #0
     a28:	str	r0, [sp, #4]
     a2c:	b	a3c <coda_path_from_path+0x50>
     a30:	ldr	r0, [fp, #-16]
     a34:	bl	0 <strlen>
     a38:	str	r0, [sp, #4]
     a3c:	ldr	r0, [sp, #4]
     a40:	str	r0, [sp, #8]
     a44:	ldr	r0, [fp, #-12]
     a48:	cmp	r0, #0
     a4c:	beq	ae0 <coda_path_from_path+0xf4>
     a50:	ldr	r0, [sp, #12]
     a54:	cmp	r0, #0
     a58:	ble	ae0 <coda_path_from_path+0xf4>
     a5c:	b	a60 <coda_path_from_path+0x74>
     a60:	ldr	r0, [sp, #12]
     a64:	cmp	r0, #0
     a68:	movw	r0, #0
     a6c:	str	r0, [sp]
     a70:	ble	abc <coda_path_from_path+0xd0>
     a74:	ldr	r0, [fp, #-8]
     a78:	ldr	r1, [sp, #12]
     a7c:	sub	r1, r1, #1
     a80:	add	r0, r0, r1
     a84:	ldrb	r0, [r0]
     a88:	cmp	r0, #47	; 0x2f
     a8c:	movw	r0, #0
     a90:	str	r0, [sp]
     a94:	beq	abc <coda_path_from_path+0xd0>
     a98:	ldr	r0, [fp, #-8]
     a9c:	ldr	r1, [sp, #12]
     aa0:	sub	r1, r1, #1
     aa4:	add	r0, r0, r1
     aa8:	ldrb	r0, [r0]
     aac:	cmp	r0, #92	; 0x5c
     ab0:	movw	r0, #0
     ab4:	movne	r0, #1
     ab8:	str	r0, [sp]
     abc:	ldr	r0, [sp]
     ac0:	tst	r0, #1
     ac4:	beq	adc <coda_path_from_path+0xf0>
     ac8:	ldr	r0, [sp, #12]
     acc:	mvn	r1, #0
     ad0:	add	r0, r0, r1
     ad4:	str	r0, [sp, #12]
     ad8:	b	a60 <coda_path_from_path+0x74>
     adc:	b	ae0 <coda_path_from_path+0xf4>
     ae0:	ldr	r0, [sp, #12]
     ae4:	add	r0, r0, #1
     ae8:	ldr	r1, [sp, #8]
     aec:	add	r0, r0, r1
     af0:	add	r0, r0, #1
     af4:	bl	0 <malloc>
     af8:	ldr	r1, [sp, #20]
     afc:	str	r0, [r1]
     b00:	ldr	r0, [sp, #20]
     b04:	ldr	r0, [r0]
     b08:	movw	r1, #0
     b0c:	cmp	r0, r1
     b10:	bne	b3c <coda_path_from_path+0x150>
     b14:	mvn	r0, #0
     b18:	movw	r1, #0
     b1c:	movt	r1, #0
     b20:	movw	r2, #0
     b24:	movt	r2, #0
     b28:	movw	r3, #481	; 0x1e1
     b2c:	bl	0 <coda_set_error>
     b30:	mvn	r0, #0
     b34:	str	r0, [fp, #-4]
     b38:	b	be8 <coda_path_from_path+0x1fc>
     b3c:	ldr	r0, [sp, #20]
     b40:	ldr	r0, [r0]
     b44:	str	r0, [sp, #16]
     b48:	ldr	r0, [sp, #12]
     b4c:	cmp	r0, #0
     b50:	ble	b9c <coda_path_from_path+0x1b0>
     b54:	ldr	r0, [sp, #16]
     b58:	ldr	r1, [fp, #-8]
     b5c:	ldr	r2, [sp, #12]
     b60:	bl	0 <memcpy>
     b64:	ldr	r0, [sp, #12]
     b68:	ldr	r1, [sp, #16]
     b6c:	add	r0, r1, r0
     b70:	str	r0, [sp, #16]
     b74:	ldr	r0, [sp, #8]
     b78:	cmp	r0, #0
     b7c:	ble	b98 <coda_path_from_path+0x1ac>
     b80:	ldr	r0, [sp, #16]
     b84:	movw	r1, #47	; 0x2f
     b88:	strb	r1, [r0]
     b8c:	ldr	r0, [sp, #16]
     b90:	add	r0, r0, #1
     b94:	str	r0, [sp, #16]
     b98:	b	b9c <coda_path_from_path+0x1b0>
     b9c:	ldr	r0, [sp, #8]
     ba0:	cmp	r0, #0
     ba4:	ble	bc8 <coda_path_from_path+0x1dc>
     ba8:	ldr	r0, [sp, #16]
     bac:	ldr	r1, [fp, #-16]
     bb0:	ldr	r2, [sp, #8]
     bb4:	bl	0 <memcpy>
     bb8:	ldr	r0, [sp, #8]
     bbc:	ldr	r1, [sp, #16]
     bc0:	add	r0, r1, r0
     bc4:	str	r0, [sp, #16]
     bc8:	ldr	r0, [sp, #16]
     bcc:	movw	r1, #0
     bd0:	strb	r1, [r0]
     bd4:	ldr	r0, [sp, #20]
     bd8:	ldr	r0, [r0]
     bdc:	bl	bf4 <clean_path>
     be0:	movw	r0, #0
     be4:	str	r0, [fp, #-4]
     be8:	ldr	r0, [fp, #-4]
     bec:	mov	sp, fp
     bf0:	pop	{fp, pc}

00000bf4 <clean_path>:
     bf4:	sub	sp, sp, #24
     bf8:	str	r0, [sp, #20]
     bfc:	ldr	r0, [sp, #20]
     c00:	movw	r1, #0
     c04:	cmp	r0, r1
     c08:	beq	c1c <clean_path+0x28>
     c0c:	ldr	r0, [sp, #20]
     c10:	ldrb	r0, [r0]
     c14:	cmp	r0, #0
     c18:	bne	c20 <clean_path+0x2c>
     c1c:	b	fc8 <clean_path+0x3d4>
     c20:	movw	r0, #0
     c24:	str	r0, [sp, #16]
     c28:	str	r0, [sp, #12]
     c2c:	ldr	r0, [sp, #20]
     c30:	ldr	r1, [sp, #16]
     c34:	add	r0, r0, r1
     c38:	ldrb	r0, [r0]
     c3c:	cmp	r0, #46	; 0x2e
     c40:	movw	r0, #0
     c44:	str	r0, [sp, #4]
     c48:	bne	c70 <clean_path+0x7c>
     c4c:	ldr	r0, [sp, #20]
     c50:	ldr	r1, [sp, #16]
     c54:	add	r1, r1, #1
     c58:	add	r0, r0, r1
     c5c:	ldrb	r0, [r0]
     c60:	cmp	r0, #47	; 0x2f
     c64:	movw	r0, #0
     c68:	moveq	r0, #1
     c6c:	str	r0, [sp, #4]
     c70:	ldr	r0, [sp, #4]
     c74:	tst	r0, #1
     c78:	beq	c8c <clean_path+0x98>
     c7c:	ldr	r0, [sp, #16]
     c80:	add	r0, r0, #2
     c84:	str	r0, [sp, #16]
     c88:	b	c2c <clean_path+0x38>
     c8c:	b	c90 <clean_path+0x9c>
     c90:	ldr	r0, [sp, #20]
     c94:	ldr	r1, [sp, #16]
     c98:	add	r0, r0, r1
     c9c:	ldrb	r0, [r0]
     ca0:	cmp	r0, #0
     ca4:	beq	f88 <clean_path+0x394>
     ca8:	ldr	r0, [sp, #20]
     cac:	ldr	r1, [sp, #16]
     cb0:	add	r0, r0, r1
     cb4:	ldrb	r0, [r0]
     cb8:	cmp	r0, #47	; 0x2f
     cbc:	beq	cd8 <clean_path+0xe4>
     cc0:	ldr	r0, [sp, #20]
     cc4:	ldr	r1, [sp, #16]
     cc8:	add	r0, r0, r1
     ccc:	ldrb	r0, [r0]
     cd0:	cmp	r0, #92	; 0x5c
     cd4:	bne	f4c <clean_path+0x358>
     cd8:	ldr	r0, [sp, #20]
     cdc:	ldr	r1, [sp, #16]
     ce0:	add	r1, r1, #1
     ce4:	add	r0, r0, r1
     ce8:	ldrb	r0, [r0]
     cec:	cmp	r0, #47	; 0x2f
     cf0:	beq	d10 <clean_path+0x11c>
     cf4:	ldr	r0, [sp, #20]
     cf8:	ldr	r1, [sp, #16]
     cfc:	add	r1, r1, #1
     d00:	add	r0, r0, r1
     d04:	ldrb	r0, [r0]
     d08:	cmp	r0, #92	; 0x5c
     d0c:	bne	d20 <clean_path+0x12c>
     d10:	ldr	r0, [sp, #16]
     d14:	add	r0, r0, #1
     d18:	str	r0, [sp, #16]
     d1c:	b	c90 <clean_path+0x9c>
     d20:	ldr	r0, [sp, #20]
     d24:	ldr	r1, [sp, #16]
     d28:	add	r1, r1, #1
     d2c:	add	r0, r0, r1
     d30:	ldrb	r0, [r0]
     d34:	cmp	r0, #46	; 0x2e
     d38:	bne	f48 <clean_path+0x354>
     d3c:	ldr	r0, [sp, #20]
     d40:	ldr	r1, [sp, #16]
     d44:	add	r1, r1, #2
     d48:	add	r0, r0, r1
     d4c:	ldrb	r0, [r0]
     d50:	cmp	r0, #0
     d54:	beq	d90 <clean_path+0x19c>
     d58:	ldr	r0, [sp, #20]
     d5c:	ldr	r1, [sp, #16]
     d60:	add	r1, r1, #2
     d64:	add	r0, r0, r1
     d68:	ldrb	r0, [r0]
     d6c:	cmp	r0, #47	; 0x2f
     d70:	beq	d90 <clean_path+0x19c>
     d74:	ldr	r0, [sp, #20]
     d78:	ldr	r1, [sp, #16]
     d7c:	add	r1, r1, #2
     d80:	add	r0, r0, r1
     d84:	ldrb	r0, [r0]
     d88:	cmp	r0, #92	; 0x5c
     d8c:	bne	da0 <clean_path+0x1ac>
     d90:	ldr	r0, [sp, #16]
     d94:	add	r0, r0, #2
     d98:	str	r0, [sp, #16]
     d9c:	b	c90 <clean_path+0x9c>
     da0:	ldr	r0, [sp, #20]
     da4:	ldr	r1, [sp, #16]
     da8:	add	r1, r1, #2
     dac:	add	r0, r0, r1
     db0:	ldrb	r0, [r0]
     db4:	cmp	r0, #46	; 0x2e
     db8:	bne	f44 <clean_path+0x350>
     dbc:	ldr	r0, [sp, #20]
     dc0:	ldr	r1, [sp, #16]
     dc4:	add	r1, r1, #3
     dc8:	add	r0, r0, r1
     dcc:	ldrb	r0, [r0]
     dd0:	cmp	r0, #0
     dd4:	beq	e10 <clean_path+0x21c>
     dd8:	ldr	r0, [sp, #20]
     ddc:	ldr	r1, [sp, #16]
     de0:	add	r1, r1, #3
     de4:	add	r0, r0, r1
     de8:	ldrb	r0, [r0]
     dec:	cmp	r0, #47	; 0x2f
     df0:	beq	e10 <clean_path+0x21c>
     df4:	ldr	r0, [sp, #20]
     df8:	ldr	r1, [sp, #16]
     dfc:	add	r1, r1, #3
     e00:	add	r0, r0, r1
     e04:	ldrb	r0, [r0]
     e08:	cmp	r0, #92	; 0x5c
     e0c:	bne	f44 <clean_path+0x350>
     e10:	ldr	r0, [sp, #12]
     e14:	cmp	r0, #2
     e18:	blt	e98 <clean_path+0x2a4>
     e1c:	ldr	r0, [sp, #20]
     e20:	ldr	r1, [sp, #12]
     e24:	sub	r1, r1, #1
     e28:	add	r0, r0, r1
     e2c:	ldrb	r0, [r0]
     e30:	cmp	r0, #46	; 0x2e
     e34:	bne	e98 <clean_path+0x2a4>
     e38:	ldr	r0, [sp, #20]
     e3c:	ldr	r1, [sp, #12]
     e40:	sub	r1, r1, #2
     e44:	add	r0, r0, r1
     e48:	ldrb	r0, [r0]
     e4c:	cmp	r0, #46	; 0x2e
     e50:	bne	e98 <clean_path+0x2a4>
     e54:	ldr	r0, [sp, #12]
     e58:	cmp	r0, #2
     e5c:	beq	f40 <clean_path+0x34c>
     e60:	ldr	r0, [sp, #20]
     e64:	ldr	r1, [sp, #12]
     e68:	sub	r1, r1, #3
     e6c:	add	r0, r0, r1
     e70:	ldrb	r0, [r0]
     e74:	cmp	r0, #47	; 0x2f
     e78:	beq	f40 <clean_path+0x34c>
     e7c:	ldr	r0, [sp, #20]
     e80:	ldr	r1, [sp, #12]
     e84:	sub	r1, r1, #3
     e88:	add	r0, r0, r1
     e8c:	ldrb	r0, [r0]
     e90:	cmp	r0, #92	; 0x5c
     e94:	beq	f40 <clean_path+0x34c>
     e98:	ldr	r0, [sp, #12]
     e9c:	sub	r0, r0, #1
     ea0:	str	r0, [sp, #8]
     ea4:	ldr	r0, [sp, #8]
     ea8:	cmp	r0, #0
     eac:	movw	r0, #0
     eb0:	str	r0, [sp]
     eb4:	blt	ef8 <clean_path+0x304>
     eb8:	ldr	r0, [sp, #20]
     ebc:	ldr	r1, [sp, #8]
     ec0:	add	r0, r0, r1
     ec4:	ldrb	r0, [r0]
     ec8:	cmp	r0, #47	; 0x2f
     ecc:	movw	r0, #0
     ed0:	str	r0, [sp]
     ed4:	beq	ef8 <clean_path+0x304>
     ed8:	ldr	r0, [sp, #20]
     edc:	ldr	r1, [sp, #8]
     ee0:	add	r0, r0, r1
     ee4:	ldrb	r0, [r0]
     ee8:	cmp	r0, #92	; 0x5c
     eec:	movw	r0, #0
     ef0:	movne	r0, #1
     ef4:	str	r0, [sp]
     ef8:	ldr	r0, [sp]
     efc:	tst	r0, #1
     f00:	beq	f18 <clean_path+0x324>
     f04:	ldr	r0, [sp, #8]
     f08:	mvn	r1, #0
     f0c:	add	r0, r0, r1
     f10:	str	r0, [sp, #8]
     f14:	b	ea4 <clean_path+0x2b0>
     f18:	ldr	r0, [sp, #8]
     f1c:	cmp	r0, #0
     f20:	blt	f3c <clean_path+0x348>
     f24:	ldr	r0, [sp, #8]
     f28:	str	r0, [sp, #12]
     f2c:	ldr	r0, [sp, #16]
     f30:	add	r0, r0, #3
     f34:	str	r0, [sp, #16]
     f38:	b	c90 <clean_path+0x9c>
     f3c:	b	f40 <clean_path+0x34c>
     f40:	b	f44 <clean_path+0x350>
     f44:	b	f48 <clean_path+0x354>
     f48:	b	f4c <clean_path+0x358>
     f4c:	ldr	r0, [sp, #20]
     f50:	ldr	r1, [sp, #16]
     f54:	add	r0, r0, r1
     f58:	ldrb	r0, [r0]
     f5c:	ldr	r1, [sp, #20]
     f60:	ldr	r2, [sp, #12]
     f64:	add	r1, r1, r2
     f68:	strb	r0, [r1]
     f6c:	ldr	r0, [sp, #16]
     f70:	add	r0, r0, #1
     f74:	str	r0, [sp, #16]
     f78:	ldr	r0, [sp, #12]
     f7c:	add	r0, r0, #1
     f80:	str	r0, [sp, #12]
     f84:	b	c90 <clean_path+0x9c>
     f88:	ldr	r0, [sp, #12]
     f8c:	cmp	r0, #0
     f90:	bne	fb4 <clean_path+0x3c0>
     f94:	ldr	r0, [sp, #20]
     f98:	ldr	r1, [sp, #12]
     f9c:	add	r0, r0, r1
     fa0:	movw	r1, #46	; 0x2e
     fa4:	strb	r1, [r0]
     fa8:	ldr	r0, [sp, #12]
     fac:	add	r0, r0, #1
     fb0:	str	r0, [sp, #12]
     fb4:	ldr	r0, [sp, #20]
     fb8:	ldr	r1, [sp, #12]
     fbc:	add	r0, r0, r1
     fc0:	movw	r1, #0
     fc4:	strb	r1, [r0]
     fc8:	add	sp, sp, #24
     fcc:	bx	lr

00000fd0 <coda_path_for_program>:
     fd0:	push	{r4, r5, fp, lr}
     fd4:	add	fp, sp, #8
     fd8:	sub	sp, sp, #1056	; 0x420
     fdc:	str	r0, [fp, #-16]
     fe0:	str	r1, [fp, #-20]	; 0xffffffec
     fe4:	movw	r0, #0
     fe8:	str	r0, [fp, #-28]	; 0xffffffe4
     fec:	ldr	r1, [fp, #-20]	; 0xffffffec
     ff0:	str	r0, [r1]
     ff4:	ldr	r1, [fp, #-16]
     ff8:	cmp	r1, r0
     ffc:	bne	100c <coda_path_for_program+0x3c>
    1000:	movw	r0, #0
    1004:	str	r0, [fp, #-12]
    1008:	b	1208 <coda_path_for_program+0x238>
    100c:	ldr	r0, [fp, #-16]
    1010:	str	r0, [fp, #-24]	; 0xffffffe8
    1014:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1018:	ldrb	r0, [r0]
    101c:	cmp	r0, #0
    1020:	beq	1060 <coda_path_for_program+0x90>
    1024:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1028:	ldrb	r0, [r0]
    102c:	cmp	r0, #47	; 0x2f
    1030:	beq	1044 <coda_path_for_program+0x74>
    1034:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1038:	ldrb	r0, [r0]
    103c:	cmp	r0, #92	; 0x5c
    1040:	bne	1050 <coda_path_for_program+0x80>
    1044:	movw	r0, #1
    1048:	str	r0, [fp, #-28]	; 0xffffffe4
    104c:	b	1060 <coda_path_for_program+0x90>
    1050:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1054:	add	r0, r0, #1
    1058:	str	r0, [fp, #-24]	; 0xffffffe8
    105c:	b	1014 <coda_path_for_program+0x44>
    1060:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1064:	cmp	r0, #0
    1068:	beq	10bc <coda_path_for_program+0xec>
    106c:	ldr	r0, [fp, #-16]
    1070:	bl	0 <strdup>
    1074:	ldr	r1, [fp, #-20]	; 0xffffffec
    1078:	str	r0, [r1]
    107c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1080:	ldr	r0, [r0]
    1084:	movw	r1, #0
    1088:	cmp	r0, r1
    108c:	bne	10b8 <coda_path_for_program+0xe8>
    1090:	mvn	r0, #0
    1094:	movw	r1, #0
    1098:	movt	r1, #0
    109c:	movw	r2, #0
    10a0:	movt	r2, #0
    10a4:	movw	r3, #537	; 0x219
    10a8:	bl	0 <coda_set_error>
    10ac:	mvn	r0, #0
    10b0:	str	r0, [fp, #-12]
    10b4:	b	1208 <coda_path_for_program+0x238>
    10b8:	b	1114 <coda_path_for_program+0x144>
    10bc:	movw	r0, #0
    10c0:	movt	r0, #0
    10c4:	bl	0 <getenv>
    10c8:	movw	r1, #0
    10cc:	cmp	r0, r1
    10d0:	beq	1104 <coda_path_for_program+0x134>
    10d4:	movw	r0, #0
    10d8:	movt	r0, #0
    10dc:	bl	0 <getenv>
    10e0:	ldr	r1, [fp, #-16]
    10e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    10e8:	bl	740 <coda_path_find_file>
    10ec:	cmp	r0, #0
    10f0:	beq	1100 <coda_path_for_program+0x130>
    10f4:	mvn	r0, #0
    10f8:	str	r0, [fp, #-12]
    10fc:	b	1208 <coda_path_for_program+0x238>
    1100:	b	1110 <coda_path_for_program+0x140>
    1104:	ldr	r0, [fp, #-20]	; 0xffffffec
    1108:	movw	r1, #0
    110c:	str	r1, [r0]
    1110:	b	1114 <coda_path_for_program+0x144>
    1114:	ldr	r0, [fp, #-20]	; 0xffffffec
    1118:	ldr	r0, [r0]
    111c:	movw	r1, #0
    1120:	cmp	r0, r1
    1124:	beq	1200 <coda_path_for_program+0x230>
    1128:	ldr	r0, [fp, #-20]	; 0xffffffec
    112c:	ldr	r0, [r0]
    1130:	ldrb	r0, [r0]
    1134:	cmp	r0, #47	; 0x2f
    1138:	beq	1200 <coda_path_for_program+0x230>
    113c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1140:	ldr	r0, [r0]
    1144:	ldrb	r0, [r0]
    1148:	cmp	r0, #92	; 0x5c
    114c:	beq	1200 <coda_path_for_program+0x230>
    1150:	bl	0 <__ctype_b_loc>
    1154:	ldr	r0, [r0]
    1158:	ldr	r1, [fp, #-20]	; 0xffffffec
    115c:	ldr	r1, [r1]
    1160:	ldrb	r1, [r1]
    1164:	mov	r2, r1
    1168:	add	r0, r0, r1, lsl #1
    116c:	ldrh	r0, [r0]
    1170:	and	r0, r0, #1024	; 0x400
    1174:	cmp	r0, #0
    1178:	beq	1190 <coda_path_for_program+0x1c0>
    117c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1180:	ldr	r0, [r0]
    1184:	ldrb	r0, [r0, #1]
    1188:	cmp	r0, #58	; 0x3a
    118c:	beq	1200 <coda_path_for_program+0x230>
    1190:	add	r0, sp, #11
    1194:	movw	r1, #1024	; 0x400
    1198:	bl	0 <getcwd>
    119c:	movw	r1, #0
    11a0:	cmp	r0, r1
    11a4:	bne	11b4 <coda_path_for_program+0x1e4>
    11a8:	movw	r0, #0
    11ac:	str	r0, [fp, #-12]
    11b0:	b	1208 <coda_path_for_program+0x238>
    11b4:	add	r0, sp, #11
    11b8:	movw	r1, #0
    11bc:	strb	r1, [sp, #1035]	; 0x40b
    11c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    11c4:	ldr	r1, [r1]
    11c8:	str	r1, [sp, #4]
    11cc:	ldr	r2, [sp, #4]
    11d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    11d4:	movw	r1, #0
    11d8:	bl	9ec <coda_path_from_path>
    11dc:	cmp	r0, #0
    11e0:	beq	11f8 <coda_path_for_program+0x228>
    11e4:	ldr	r0, [sp, #4]
    11e8:	bl	0 <free>
    11ec:	mvn	r0, #0
    11f0:	str	r0, [fp, #-12]
    11f4:	b	1208 <coda_path_for_program+0x238>
    11f8:	ldr	r0, [sp, #4]
    11fc:	bl	0 <free>
    1200:	movw	r0, #0
    1204:	str	r0, [fp, #-12]
    1208:	ldr	r0, [fp, #-12]
    120c:	sub	sp, fp, #8
    1210:	pop	{r4, r5, fp, pc}

00001214 <coda_isNaN>:
    1214:	sub	sp, sp, #40	; 0x28
    1218:	vstr	d0, [sp, #24]
    121c:	vldr	d16, [sp, #24]
    1220:	vstr	d16, [sp]
    1224:	mov	r0, #0
    1228:	str	r0, [sp, #20]
    122c:	movw	r1, #32752	; 0x7ff0
    1230:	str	r1, [sp, #16]
    1234:	ldr	r1, [sp, #16]
    1238:	lsl	r1, r1, #16
    123c:	str	r0, [sp, #16]
    1240:	str	r1, [sp, #20]
    1244:	ldr	r0, [sp]
    1248:	ldr	r1, [sp, #4]
    124c:	ldr	r2, [sp, #16]
    1250:	ldr	r3, [sp, #20]
    1254:	bic	r1, r3, r1
    1258:	bic	r0, r2, r0
    125c:	orr	r0, r0, r1
    1260:	cmp	r0, #0
    1264:	beq	1278 <coda_isNaN+0x64>
    1268:	b	126c <coda_isNaN+0x58>
    126c:	movw	r0, #0
    1270:	str	r0, [sp, #36]	; 0x24
    1274:	b	12dc <coda_isNaN+0xc8>
    1278:	mov	r0, #0
    127c:	str	r0, [sp, #12]
    1280:	mov	r1, #1
    1284:	str	r1, [sp, #8]
    1288:	ldr	r1, [sp, #8]
    128c:	lsl	r1, r1, #20
    1290:	str	r0, [sp, #8]
    1294:	str	r1, [sp, #12]
    1298:	ldr	r0, [sp, #8]
    129c:	ldr	r1, [sp, #12]
    12a0:	subs	r0, r0, #1
    12a4:	sbc	r1, r1, #0
    12a8:	str	r0, [sp, #8]
    12ac:	str	r1, [sp, #12]
    12b0:	ldr	r0, [sp]
    12b4:	ldr	r1, [sp, #4]
    12b8:	ldr	r2, [sp, #8]
    12bc:	ldr	r3, [sp, #12]
    12c0:	and	r1, r1, r3
    12c4:	and	r0, r0, r2
    12c8:	orr	r0, r0, r1
    12cc:	cmp	r0, #0
    12d0:	movwne	r0, #1
    12d4:	and	r0, r0, #1
    12d8:	str	r0, [sp, #36]	; 0x24
    12dc:	ldr	r0, [sp, #36]	; 0x24
    12e0:	add	sp, sp, #40	; 0x28
    12e4:	bx	lr

000012e8 <coda_NaN>:
    12e8:	sub	sp, sp, #8
    12ec:	mov	r0, #0
    12f0:	str	r0, [sp, #4]
    12f4:	movw	r1, #32760	; 0x7ff8
    12f8:	str	r1, [sp]
    12fc:	ldr	r1, [sp]
    1300:	lsl	r1, r1, #16
    1304:	str	r0, [sp]
    1308:	str	r1, [sp, #4]
    130c:	vldr	d0, [sp]
    1310:	add	sp, sp, #8
    1314:	bx	lr

00001318 <coda_isInf>:
    1318:	push	{fp, lr}
    131c:	mov	fp, sp
    1320:	sub	sp, sp, #16
    1324:	vstr	d0, [sp, #8]
    1328:	vldr	d0, [sp, #8]
    132c:	bl	1368 <coda_isPlusInf>
    1330:	cmp	r0, #0
    1334:	movw	r0, #1
    1338:	str	r0, [sp, #4]
    133c:	bne	1358 <coda_isInf+0x40>
    1340:	vldr	d0, [sp, #8]
    1344:	bl	13c8 <coda_isMinInf>
    1348:	cmp	r0, #0
    134c:	movw	r0, #0
    1350:	movne	r0, #1
    1354:	str	r0, [sp, #4]
    1358:	ldr	r0, [sp, #4]
    135c:	and	r0, r0, #1
    1360:	mov	sp, fp
    1364:	pop	{fp, pc}

00001368 <coda_isPlusInf>:
    1368:	sub	sp, sp, #24
    136c:	vstr	d0, [sp, #16]
    1370:	vldr	d16, [sp, #16]
    1374:	vstr	d16, [sp]
    1378:	mov	r0, #0
    137c:	str	r0, [sp, #12]
    1380:	movw	r1, #32752	; 0x7ff0
    1384:	str	r1, [sp, #8]
    1388:	ldr	r1, [sp, #8]
    138c:	lsl	r1, r1, #16
    1390:	str	r0, [sp, #8]
    1394:	str	r1, [sp, #12]
    1398:	ldr	r0, [sp]
    139c:	ldr	r1, [sp, #4]
    13a0:	ldr	r2, [sp, #8]
    13a4:	ldr	r3, [sp, #12]
    13a8:	eor	r1, r1, r3
    13ac:	eor	r0, r0, r2
    13b0:	orr	r0, r0, r1
    13b4:	clz	r0, r0
    13b8:	lsr	r0, r0, #5
    13bc:	and	r0, r0, #1
    13c0:	add	sp, sp, #24
    13c4:	bx	lr

000013c8 <coda_isMinInf>:
    13c8:	sub	sp, sp, #24
    13cc:	vstr	d0, [sp, #16]
    13d0:	vldr	d16, [sp, #16]
    13d4:	vstr	d16, [sp]
    13d8:	mov	r0, #0
    13dc:	str	r0, [sp, #12]
    13e0:	movw	r1, #65520	; 0xfff0
    13e4:	str	r1, [sp, #8]
    13e8:	ldr	r1, [sp, #8]
    13ec:	lsl	r1, r1, #16
    13f0:	str	r0, [sp, #8]
    13f4:	str	r1, [sp, #12]
    13f8:	ldr	r0, [sp]
    13fc:	ldr	r1, [sp, #4]
    1400:	ldr	r2, [sp, #8]
    1404:	ldr	r3, [sp, #12]
    1408:	eor	r1, r1, r3
    140c:	eor	r0, r0, r2
    1410:	orr	r0, r0, r1
    1414:	clz	r0, r0
    1418:	lsr	r0, r0, #5
    141c:	and	r0, r0, #1
    1420:	add	sp, sp, #24
    1424:	bx	lr

00001428 <coda_PlusInf>:
    1428:	sub	sp, sp, #8
    142c:	mov	r0, #0
    1430:	str	r0, [sp, #4]
    1434:	movw	r1, #32752	; 0x7ff0
    1438:	str	r1, [sp]
    143c:	ldr	r1, [sp]
    1440:	lsl	r1, r1, #16
    1444:	str	r0, [sp]
    1448:	str	r1, [sp, #4]
    144c:	vldr	d0, [sp]
    1450:	add	sp, sp, #8
    1454:	bx	lr

00001458 <coda_MinInf>:
    1458:	sub	sp, sp, #8
    145c:	mov	r0, #0
    1460:	str	r0, [sp, #4]
    1464:	movw	r1, #65520	; 0xfff0
    1468:	str	r1, [sp]
    146c:	ldr	r1, [sp]
    1470:	lsl	r1, r1, #16
    1474:	str	r0, [sp]
    1478:	str	r1, [sp, #4]
    147c:	vldr	d0, [sp]
    1480:	add	sp, sp, #8
    1484:	bx	lr

00001488 <coda_str64>:
    1488:	push	{fp, lr}
    148c:	mov	fp, sp
    1490:	sub	sp, sp, #16
    1494:	str	r0, [sp, #8]
    1498:	str	r1, [sp, #12]
    149c:	str	r2, [sp, #4]
    14a0:	ldr	r0, [sp, #12]
    14a4:	cmn	r0, #1
    14a8:	bgt	14dc <coda_str64+0x54>
    14ac:	b	14b0 <coda_str64+0x28>
    14b0:	ldr	r0, [sp, #4]
    14b4:	mov	r1, #45	; 0x2d
    14b8:	strb	r1, [r0]
    14bc:	ldr	r0, [sp, #8]
    14c0:	ldr	r1, [sp, #12]
    14c4:	rsbs	r0, r0, #0
    14c8:	rsc	r1, r1, #0
    14cc:	ldr	r2, [sp, #4]
    14d0:	add	r2, r2, #1
    14d4:	bl	14f4 <coda_str64u>
    14d8:	b	14ec <coda_str64+0x64>
    14dc:	ldr	r0, [sp, #8]
    14e0:	ldr	r1, [sp, #12]
    14e4:	ldr	r2, [sp, #4]
    14e8:	bl	14f4 <coda_str64u>
    14ec:	mov	sp, fp
    14f0:	pop	{fp, pc}

000014f4 <coda_str64u>:
    14f4:	push	{fp, lr}
    14f8:	mov	fp, sp
    14fc:	sub	sp, sp, #56	; 0x38
    1500:	str	r0, [fp, #-8]
    1504:	str	r1, [fp, #-4]
    1508:	str	r2, [fp, #-12]
    150c:	ldr	r0, [fp, #-4]
    1510:	cmp	r0, #0
    1514:	bne	1534 <coda_str64u+0x40>
    1518:	b	151c <coda_str64u+0x28>
    151c:	ldr	r0, [fp, #-12]
    1520:	ldr	r2, [fp, #-8]
    1524:	movw	r1, #0
    1528:	movt	r1, #0
    152c:	bl	0 <sprintf>
    1530:	b	162c <coda_str64u+0x138>
    1534:	ldr	r0, [fp, #-8]
    1538:	ldr	r1, [fp, #-4]
    153c:	movw	r2, #57600	; 0xe100
    1540:	movt	r2, #1525	; 0x5f5
    1544:	mov	r3, #0
    1548:	str	r2, [fp, #-24]	; 0xffffffe8
    154c:	str	r3, [sp, #28]
    1550:	bl	0 <__aeabi_uldivmod>
    1554:	str	r2, [fp, #-16]
    1558:	ldr	r2, [fp, #-8]
    155c:	ldr	r3, [fp, #-4]
    1560:	str	r0, [sp, #24]
    1564:	mov	r0, r2
    1568:	str	r1, [sp, #20]
    156c:	mov	r1, r3
    1570:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1574:	ldr	r3, [sp, #28]
    1578:	bl	0 <__aeabi_uldivmod>
    157c:	str	r1, [fp, #-4]
    1580:	str	r0, [fp, #-8]
    1584:	ldr	r0, [fp, #-8]
    1588:	ldr	r1, [fp, #-4]
    158c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1590:	ldr	r3, [sp, #28]
    1594:	bl	0 <__aeabi_uldivmod>
    1598:	str	r2, [fp, #-20]	; 0xffffffec
    159c:	ldr	r2, [fp, #-8]
    15a0:	ldr	r3, [fp, #-4]
    15a4:	str	r0, [sp, #16]
    15a8:	mov	r0, r2
    15ac:	str	r1, [sp, #12]
    15b0:	mov	r1, r3
    15b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15b8:	ldr	r3, [sp, #28]
    15bc:	bl	0 <__aeabi_uldivmod>
    15c0:	str	r1, [fp, #-4]
    15c4:	str	r0, [fp, #-8]
    15c8:	ldr	r0, [fp, #-8]
    15cc:	ldr	r1, [fp, #-4]
    15d0:	orr	r0, r0, r1
    15d4:	cmp	r0, #0
    15d8:	beq	1610 <coda_str64u+0x11c>
    15dc:	b	15e0 <coda_str64u+0xec>
    15e0:	ldr	r0, [fp, #-12]
    15e4:	ldr	r2, [fp, #-8]
    15e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    15ec:	ldr	r1, [fp, #-16]
    15f0:	movw	ip, #0
    15f4:	movt	ip, #0
    15f8:	str	r1, [sp, #8]
    15fc:	mov	r1, ip
    1600:	ldr	ip, [sp, #8]
    1604:	str	ip, [sp]
    1608:	bl	0 <sprintf>
    160c:	b	1628 <coda_str64u+0x134>
    1610:	ldr	r0, [fp, #-12]
    1614:	ldr	r2, [fp, #-20]	; 0xffffffec
    1618:	ldr	r3, [fp, #-16]
    161c:	movw	r1, #0
    1620:	movt	r1, #0
    1624:	bl	0 <sprintf>
    1628:	b	162c <coda_str64u+0x138>
    162c:	mov	sp, fp
    1630:	pop	{fp, pc}

00001634 <coda_strfl>:
    1634:	push	{fp, lr}
    1638:	mov	fp, sp
    163c:	sub	sp, sp, #16
    1640:	vstr	d0, [sp, #8]
    1644:	str	r0, [sp, #4]
    1648:	vldr	d0, [sp, #8]
    164c:	bl	1214 <coda_isNaN>
    1650:	cmp	r0, #0
    1654:	beq	166c <coda_strfl+0x38>
    1658:	ldr	r0, [sp, #4]
    165c:	movw	r1, #0
    1660:	movt	r1, #0
    1664:	bl	0 <strcpy>
    1668:	b	16d4 <coda_strfl+0xa0>
    166c:	vldr	d0, [sp, #8]
    1670:	bl	1368 <coda_isPlusInf>
    1674:	cmp	r0, #0
    1678:	beq	1690 <coda_strfl+0x5c>
    167c:	ldr	r0, [sp, #4]
    1680:	movw	r1, #0
    1684:	movt	r1, #0
    1688:	bl	0 <strcpy>
    168c:	b	16d0 <coda_strfl+0x9c>
    1690:	vldr	d0, [sp, #8]
    1694:	bl	13c8 <coda_isMinInf>
    1698:	cmp	r0, #0
    169c:	beq	16b4 <coda_strfl+0x80>
    16a0:	ldr	r0, [sp, #4]
    16a4:	movw	r1, #0
    16a8:	movt	r1, #0
    16ac:	bl	0 <strcpy>
    16b0:	b	16cc <coda_strfl+0x98>
    16b4:	ldr	r0, [sp, #4]
    16b8:	vldr	d16, [sp, #8]
    16bc:	movw	r1, #0
    16c0:	movt	r1, #0
    16c4:	vmov	r2, r3, d16
    16c8:	bl	0 <sprintf>
    16cc:	b	16d0 <coda_strfl+0x9c>
    16d0:	b	16d4 <coda_strfl+0xa0>
    16d4:	mov	sp, fp
    16d8:	pop	{fp, pc}
