
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
   0:	push	{r4, r5, r6, r7, r8, r9, lr}
   4:	sub	sp, sp, #84	; 0x54
   8:	ldr	r5, [r0, #48]	; 0x30
   c:	mov	r6, r2
  10:	cmp	r5, #0
  14:	mov	r7, r3
  18:	mov	r4, r0
  1c:	ldrd	r2, [sp, #112]	; 0x70
  20:	beq	cc <read_bytes+0xcc>
  24:	ldrd	r8, [r0, #40]	; 0x28
  28:	adds	r0, r6, r2
  2c:	adc	r1, r7, r3
  30:	cmp	r1, r9
  34:	cmpeq	r0, r8
  38:	bls	b4 <read_bytes+0xb4>
  3c:	ldr	r1, [r4, #16]
  40:	cmp	r1, #1
  44:	bls	9c <read_bytes+0x9c>
  48:	mov	r1, r3
  4c:	mov	r0, r2
  50:	add	r2, sp, #8
  54:	bl	0 <coda_str64>
  58:	add	r5, sp, #56	; 0x38
  5c:	mov	r0, r6
  60:	mov	r1, r7
  64:	add	r2, sp, #32
  68:	bl	0 <coda_str64>
  6c:	ldrd	r0, [r4, #40]	; 0x28
  70:	mov	r2, r5
  74:	bl	0 <coda_str64>
  78:	mvn	r0, #300	; 0x12c
  7c:	str	r5, [sp]
  80:	add	r3, sp, #32
  84:	add	r2, sp, #8
  88:	ldr	r1, [pc, #180]	; 144 <read_bytes+0x144>
  8c:	bl	0 <coda_set_error>
  90:	mvn	r0, #0
  94:	add	sp, sp, #84	; 0x54
  98:	pop	{r4, r5, r6, r7, r8, r9, pc}
  9c:	ldr	r1, [pc, #164]	; 148 <read_bytes+0x148>
  a0:	mvn	r0, #300	; 0x12c
  a4:	bl	0 <coda_set_error>
  a8:	mvn	r0, #0
  ac:	add	sp, sp, #84	; 0x54
  b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
  b4:	add	r1, r5, r6
  b8:	ldr	r0, [sp, #120]	; 0x78
  bc:	bl	0 <memcpy>
  c0:	mov	r0, #0
  c4:	add	sp, sp, #84	; 0x54
  c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
  cc:	ldr	r1, [r0, #16]
  d0:	cmp	r1, #1
  d4:	bhi	130 <read_bytes+0x130>
  d8:	ldrd	r8, [r0, #8]
  dc:	adds	r0, r6, r2
  e0:	adc	r1, r7, r3
  e4:	cmp	r1, r9
  e8:	cmpeq	r0, r8
  ec:	bhi	9c <read_bytes+0x9c>
  f0:	mov	r3, r6
  f4:	ldr	r0, [r4, #56]	; 0x38
  f8:	ldr	r1, [sp, #120]	; 0x78
  fc:	bl	0 <pread>
 100:	cmp	r0, #0
 104:	movge	r0, r5
 108:	bge	94 <read_bytes+0x94>
 10c:	bl	0 <__errno_location>
 110:	ldr	r0, [r0]
 114:	bl	0 <strerror>
 118:	ldr	r1, [pc, #44]	; 14c <read_bytes+0x14c>
 11c:	mov	r2, r0
 120:	mvn	r0, #21
 124:	bl	0 <coda_set_error>
 128:	mvn	r0, #0
 12c:	b	94 <read_bytes+0x94>
 130:	ldr	r3, [pc, #24]	; 150 <read_bytes+0x150>
 134:	mov	r2, #83	; 0x53
 138:	ldr	r1, [pc, #20]	; 154 <read_bytes+0x154>
 13c:	ldr	r0, [pc, #20]	; 158 <read_bytes+0x158>
 140:	bl	0 <__assert_fail>
 144:	.word	0x0000002c
 148:	.word	0x00000000
 14c:	.word	0x00000108
 150:	.word	0x00000000
 154:	.word	0x00000068
 158:	.word	0x000000b8

0000015c <coda_grib_cursor_set_product>:
 15c:	push	{r4, lr}
 160:	mvn	r2, #0
 164:	ldr	r4, [r1, #20]
 168:	mvn	r3, #0
 16c:	mov	lr, #1
 170:	mvn	ip, #0
 174:	str	r1, [r0]
 178:	str	r4, [r0, #8]
 17c:	str	lr, [r0, #4]
 180:	str	ip, [r0, #12]
 184:	strd	r2, [r0, #16]
 188:	mov	r0, #0
 18c:	pop	{r4, pc}

00000190 <coda_grib_cursor_goto_array_element_by_index>:
 190:	ldr	r3, [pc, #152]	; 230 <coda_grib_cursor_goto_array_element_by_index+0xa0>
 194:	push	{r4, r6, r7, lr}
 198:	mov	r4, r0
 19c:	ldr	r3, [pc, r3]
 1a0:	bl	0 <__aeabi_read_tp>
 1a4:	ldr	ip, [r4, #4]
 1a8:	ldr	r2, [r0, r3]
 1ac:	sub	sp, sp, #8
 1b0:	add	r3, r4, ip, lsl #4
 1b4:	cmp	r2, #0
 1b8:	ldr	r2, [r3, #-8]
 1bc:	beq	1d4 <coda_grib_cursor_goto_array_element_by_index+0x44>
 1c0:	cmp	r1, #0
 1c4:	ldr	r3, [r2, #8]
 1c8:	blt	208 <coda_grib_cursor_goto_array_element_by_index+0x78>
 1cc:	cmp	r1, r3
 1d0:	bge	208 <coda_grib_cursor_goto_array_element_by_index+0x78>
 1d4:	add	r3, ip, #1
 1d8:	ldr	lr, [r2, #12]
 1dc:	add	ip, r4, ip, lsl #4
 1e0:	lsl	r2, r3, #4
 1e4:	mvn	r6, #0
 1e8:	mvn	r7, #0
 1ec:	mov	r0, #0
 1f0:	str	r3, [r4, #4]
 1f4:	str	lr, [ip, #8]
 1f8:	str	r1, [ip, #12]
 1fc:	strd	r6, [r4, r2]
 200:	add	sp, sp, #8
 204:	pop	{r4, r6, r7, pc}
 208:	ldr	ip, [pc, #36]	; 234 <coda_grib_cursor_goto_array_element_by_index+0xa4>
 20c:	mov	r0, #84	; 0x54
 210:	mov	r2, r1
 214:	str	r0, [sp, #4]
 218:	str	ip, [sp]
 21c:	mvn	r0, #106	; 0x6a
 220:	ldr	r1, [pc, #16]	; 238 <coda_grib_cursor_goto_array_element_by_index+0xa8>
 224:	bl	0 <coda_set_error>
 228:	mvn	r0, #0
 22c:	b	200 <coda_grib_cursor_goto_array_element_by_index+0x70>
 230:	.word	0x0000008c
 234:	.word	0x00000160
 238:	.word	0x00000128

0000023c <coda_grib_cursor_goto_array_element>:
 23c:	cmp	r1, #1
 240:	bne	24c <coda_grib_cursor_goto_array_element+0x10>
 244:	ldr	r1, [r2]
 248:	b	190 <coda_grib_cursor_goto_array_element_by_index>
 24c:	push	{lr}		; (str lr, [sp, #-4]!)
 250:	sub	sp, sp, #12
 254:	mov	r3, #68	; 0x44
 258:	mov	r2, r1
 25c:	str	r3, [sp]
 260:	ldr	r1, [pc, #20]	; 27c <coda_grib_cursor_goto_array_element+0x40>
 264:	ldr	r3, [pc, #20]	; 280 <coda_grib_cursor_goto_array_element+0x44>
 268:	mvn	r0, #105	; 0x69
 26c:	bl	0 <coda_set_error>
 270:	mvn	r0, #0
 274:	add	sp, sp, #12
 278:	pop	{pc}		; (ldr pc, [sp], #4)
 27c:	.word	0x000001b0
 280:	.word	0x00000160

00000284 <coda_grib_cursor_goto_next_array_element>:
 284:	ldr	r3, [r0, #4]
 288:	push	{r4, lr}
 28c:	sub	r3, r3, #1
 290:	str	r3, [r0, #4]
 294:	add	r3, r0, r3, lsl #4
 298:	mov	r4, r0
 29c:	ldr	r1, [r3, #12]
 2a0:	add	r1, r1, #1
 2a4:	bl	190 <coda_grib_cursor_goto_array_element_by_index>
 2a8:	cmp	r0, #0
 2ac:	mvnne	r0, #0
 2b0:	ldrne	r3, [r4, #4]
 2b4:	addne	r3, r3, #1
 2b8:	strne	r3, [r4, #4]
 2bc:	pop	{r4, pc}

000002c0 <coda_grib_cursor_goto_attributes>:
 2c0:	push	{r4, r5, r6, r7, r8, lr}
 2c4:	mov	r4, r0
 2c8:	ldr	r5, [r0, #4]
 2cc:	mvn	r6, #0
 2d0:	add	r3, r5, #1
 2d4:	add	r2, r0, r5, lsl #4
 2d8:	mvn	r7, #0
 2dc:	ldr	r2, [r2, #-8]
 2e0:	add	r5, r4, r5, lsl #4
 2e4:	ldr	r2, [r2, #4]
 2e8:	ldr	r0, [r2]
 2ec:	str	r3, [r4, #4]
 2f0:	bl	0 <coda_mem_empty_record>
 2f4:	ldr	r3, [r4, #4]
 2f8:	mvn	r1, #0
 2fc:	add	r2, r4, r3, lsl #4
 300:	lsl	r3, r3, #4
 304:	str	r0, [r5, #8]
 308:	str	r1, [r2, #-4]
 30c:	mov	r0, #0
 310:	strd	r6, [r4, r3]
 314:	pop	{r4, r5, r6, r7, r8, pc}

00000318 <coda_grib_cursor_get_num_elements>:
 318:	ldr	r3, [r0, #4]
 31c:	add	r0, r0, r3, lsl #4
 320:	ldr	r3, [r0, #-8]
 324:	mov	r0, #0
 328:	ldr	r2, [r3, #4]
 32c:	ldr	r2, [r2, #8]
 330:	cmp	r2, #1
 334:	movne	r3, #1
 338:	ldreq	r3, [r3, #8]
 33c:	str	r3, [r1]
 340:	bx	lr

00000344 <coda_grib_cursor_get_array_dim>:
 344:	mov	r3, #1
 348:	str	r3, [r1]
 34c:	ldr	r1, [r0, #4]
 350:	add	r0, r0, r1, lsl #4
 354:	ldr	r1, [r0, #-8]
 358:	ldr	r0, [r1, #4]
 35c:	ldr	r0, [r0, #8]
 360:	cmp	r0, r3
 364:	mov	r0, #0
 368:	ldreq	r3, [r1, #8]
 36c:	str	r3, [r2]
 370:	bx	lr

00000374 <coda_grib_cursor_read_float>:
 374:	ldr	r3, [r0, #4]
 378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 37c:	cmp	r3, #1
 380:	sub	sp, sp, #60	; 0x3c
 384:	ble	988 <coda_grib_cursor_read_float+0x614>
 388:	add	r2, r0, r3, lsl #4
 38c:	ldr	r6, [r2, #-24]	; 0xffffffe8
 390:	ldr	r2, [r6, #4]
 394:	ldr	r2, [r2, #8]
 398:	cmp	r2, #1
 39c:	bne	974 <coda_grib_cursor_read_float+0x600>
 3a0:	ldr	r2, [r6, #24]
 3a4:	add	r3, r0, r3, lsl #4
 3a8:	cmp	r2, #0
 3ac:	mov	r7, r1
 3b0:	ldr	ip, [r3, #-4]
 3b4:	beq	5e0 <coda_grib_cursor_read_float+0x26c>
 3b8:	ldr	r8, [r6, #28]
 3bc:	mov	r2, #0
 3c0:	mov	r3, #0
 3c4:	cmp	r8, #0
 3c8:	strd	r2, [sp, #48]	; 0x30
 3cc:	beq	5cc <coda_grib_cursor_read_float+0x258>
 3d0:	ldr	r3, [r6, #56]	; 0x38
 3d4:	cmp	r3, #0
 3d8:	beq	964 <coda_grib_cursor_read_float+0x5f0>
 3dc:	ldrb	r4, [r3, ip, asr #3]
 3e0:	mvn	r3, ip
 3e4:	and	r3, r3, #7
 3e8:	asr	r5, ip, #3
 3ec:	asr	r3, r4, r3
 3f0:	ands	r9, r3, #1
 3f4:	beq	6e0 <coda_grib_cursor_read_float+0x36c>
 3f8:	asr	lr, ip, #7
 3fc:	cmp	lr, #0
 400:	movle	r3, #0
 404:	ble	428 <coda_grib_cursor_read_float+0xb4>
 408:	ldr	r1, [r6, #60]	; 0x3c
 40c:	mov	r3, #0
 410:	add	lr, r1, lr, lsl #4
 414:	ldrb	r2, [r1, #15]
 418:	add	r1, r1, #16
 41c:	cmp	lr, r1
 420:	add	r3, r3, r2
 424:	bne	414 <coda_grib_cursor_read_float+0xa0>
 428:	tst	r5, #15
 42c:	ldrne	r2, [r6, #60]	; 0x3c
 430:	addne	r5, r2, r5
 434:	ldrbne	r2, [r5, #-1]
 438:	addne	r3, r3, r2
 43c:	ands	ip, ip, #7
 440:	beq	464 <coda_grib_cursor_read_float+0xf0>
 444:	rsb	ip, ip, #7
 448:	mov	r2, #7
 44c:	asr	r1, r4, r2
 450:	sub	r2, r2, #1
 454:	and	r1, r1, #1
 458:	cmp	ip, r2
 45c:	add	r3, r3, r1
 460:	bne	44c <coda_grib_cursor_read_float+0xd8>
 464:	mul	r3, r8, r3
 468:	ldrd	r4, [r6, #16]
 46c:	ands	r9, r8, #7
 470:	movne	r9, #1
 474:	adds	r4, r4, r3
 478:	ldr	r1, [r0]
 47c:	and	r2, r4, #7
 480:	adc	r5, r5, r3, asr #31
 484:	asr	fp, r8, #31
 488:	adds	r2, r2, r8
 48c:	mov	r3, #0
 490:	adc	r3, r3, fp
 494:	cmp	r2, #9
 498:	sbcs	ip, r3, #0
 49c:	ldr	r3, [r1, #52]	; 0x34
 4a0:	add	r9, r9, r8, asr #3
 4a4:	rsb	r0, r9, #8
 4a8:	str	r3, [sp, #20]
 4ac:	add	r3, sp, #48	; 0x30
 4b0:	add	r3, r3, r0
 4b4:	rsb	r2, r2, #0
 4b8:	str	r3, [sp, #16]
 4bc:	and	r3, r8, #7
 4c0:	mov	sl, r8
 4c4:	str	r0, [sp, #32]
 4c8:	and	r9, r2, #7
 4cc:	str	r3, [sp, #24]
 4d0:	blt	668 <coda_grib_cursor_read_float+0x2f4>
 4d4:	cmp	r9, #0
 4d8:	bne	6f4 <coda_grib_cursor_read_float+0x380>
 4dc:	ldr	r3, [sp, #24]
 4e0:	cmp	r3, #0
 4e4:	bne	8f4 <coda_grib_cursor_read_float+0x580>
 4e8:	cmp	sl, #1
 4ec:	sbcs	r3, fp, #0
 4f0:	blt	52c <coda_grib_cursor_read_float+0x1b8>
 4f4:	ldr	r0, [sp, #16]
 4f8:	lsr	r3, sl, #3
 4fc:	orr	r3, r3, fp, lsl #29
 500:	asr	r1, fp, #3
 504:	lsr	r2, r4, #3
 508:	str	r0, [sp, #8]
 50c:	str	r3, [sp]
 510:	ldr	r0, [sp, #20]
 514:	str	r1, [sp, #4]
 518:	orr	r2, r2, r5, lsl #29
 51c:	asr	r3, r5, #3
 520:	bl	0 <read_bytes>
 524:	cmp	r0, #0
 528:	bne	7d8 <coda_grib_cursor_read_float+0x464>
 52c:	ldrb	r5, [sp, #55]	; 0x37
 530:	ldrb	r4, [sp, #54]	; 0x36
 534:	ldrb	lr, [sp, #53]	; 0x35
 538:	ldrb	ip, [sp, #52]	; 0x34
 53c:	ldrb	r0, [sp, #48]	; 0x30
 540:	ldrb	r1, [sp, #49]	; 0x31
 544:	ldrb	r2, [sp, #50]	; 0x32
 548:	ldrb	r3, [sp, #51]	; 0x33
 54c:	eor	r0, r0, r5
 550:	eor	r1, r1, r4
 554:	eor	r2, r2, lr
 558:	eor	r3, r3, ip
 55c:	eor	lr, lr, r2
 560:	eor	ip, ip, r3
 564:	eor	r5, r5, r0
 568:	eor	r4, r4, r1
 56c:	eor	r0, r0, r5
 570:	eor	r1, r1, r4
 574:	eor	r2, r2, lr
 578:	eor	r3, r3, ip
 57c:	strb	r0, [sp, #48]	; 0x30
 580:	strb	r5, [sp, #55]	; 0x37
 584:	strb	r1, [sp, #49]	; 0x31
 588:	strb	r4, [sp, #54]	; 0x36
 58c:	strb	r2, [sp, #50]	; 0x32
 590:	strb	lr, [sp, #53]	; 0x35
 594:	strb	r3, [sp, #51]	; 0x33
 598:	strb	ip, [sp, #52]	; 0x34
 59c:	ldrd	r0, [sp, #48]	; 0x30
 5a0:	bl	0 <__aeabi_l2d>
 5a4:	vldr	d6, [r6, #40]	; 0x28
 5a8:	vldr	d7, [r6, #48]	; 0x30
 5ac:	mov	r8, #0
 5b0:	vmov	d5, r0, r1
 5b4:	mov	r0, r8
 5b8:	vmla.f64	d7, d5, d6
 5bc:	vcvt.f32.f64	s14, d7
 5c0:	vstr	s14, [r7]
 5c4:	add	sp, sp, #60	; 0x3c
 5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5cc:	ldr	r3, [r6, #36]	; 0x24
 5d0:	str	r3, [r1]
 5d4:	mov	r0, r8
 5d8:	add	sp, sp, #60	; 0x3c
 5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5e0:	ldr	lr, [r6, #16]
 5e4:	ldr	r1, [r6, #20]
 5e8:	ldr	r0, [r0]
 5ec:	lsr	r2, lr, #3
 5f0:	lsl	ip, ip, #2
 5f4:	orr	r2, r2, r1, lsl #29
 5f8:	mov	r4, #4
 5fc:	mov	r5, #0
 600:	adds	r2, r2, ip
 604:	asr	r3, r1, #3
 608:	ldr	r0, [r0, #52]	; 0x34
 60c:	adc	r3, r3, ip, asr #31
 610:	str	r7, [sp, #8]
 614:	strd	r4, [sp]
 618:	bl	0 <read_bytes>
 61c:	subs	r8, r0, #0
 620:	bne	7d8 <coda_grib_cursor_read_float+0x464>
 624:	ldrb	r0, [r7, #3]
 628:	ldrb	r1, [r7, #2]
 62c:	ldrb	r2, [r7]
 630:	ldrb	r3, [r7, #1]
 634:	eor	r2, r2, r0
 638:	eor	r3, r3, r1
 63c:	eor	r0, r0, r2
 640:	eor	r1, r1, r3
 644:	eor	r2, r2, r0
 648:	eor	r3, r3, r1
 64c:	strb	r0, [r7, #3]
 650:	strb	r2, [r7]
 654:	mov	r0, r8
 658:	strb	r3, [r7, #1]
 65c:	strb	r1, [r7, #2]
 660:	add	sp, sp, #60	; 0x3c
 664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 668:	ldr	r1, [sp, #16]
 66c:	mov	r2, #1
 670:	mov	r3, #0
 674:	str	r1, [sp, #8]
 678:	lsr	r1, r4, #3
 67c:	strd	r2, [sp]
 680:	ldr	r0, [sp, #20]
 684:	orr	r2, r1, r5, lsl #29
 688:	asr	r3, r5, #3
 68c:	bl	0 <read_bytes>
 690:	cmp	r0, #0
 694:	bne	7d8 <coda_grib_cursor_read_float+0x464>
 698:	cmp	r9, #0
 69c:	beq	6b4 <coda_grib_cursor_read_float+0x340>
 6a0:	ldr	r2, [sp, #32]
 6a4:	add	r1, sp, #48	; 0x30
 6a8:	ldrb	r3, [r1, r2]
 6ac:	asr	r3, r3, r9
 6b0:	strb	r3, [r1, r2]
 6b4:	and	r3, r8, #7
 6b8:	cmp	r3, #0
 6bc:	beq	52c <coda_grib_cursor_read_float+0x1b8>
 6c0:	ldr	r1, [sp, #32]
 6c4:	add	r2, sp, #48	; 0x30
 6c8:	ldrb	r3, [r2, r1]
 6cc:	mvn	r2, #0
 6d0:	bic	r8, r3, r2, lsl r8
 6d4:	add	r2, sp, #48	; 0x30
 6d8:	strb	r8, [r2, r1]
 6dc:	b	52c <coda_grib_cursor_read_float+0x1b8>
 6e0:	bl	0 <coda_NaN>
 6e4:	mov	r8, r9
 6e8:	vcvt.f32.f64	s0, d0
 6ec:	vstr	s0, [r7]
 6f0:	b	5d4 <coda_grib_cursor_read_float+0x260>
 6f4:	mov	r2, #24
 6f8:	mov	r3, #0
 6fc:	mov	r0, r8
 700:	mov	r1, fp
 704:	bl	0 <__aeabi_ldivmod>
 708:	strd	r2, [sp, #24]
 70c:	orrs	r3, r2, r3
 710:	bne	7ec <coda_grib_cursor_read_float+0x478>
 714:	cmp	sl, #1
 718:	sbcs	r3, fp, #0
 71c:	blt	52c <coda_grib_cursor_read_float+0x1b8>
 720:	ldr	r3, [sp, #16]
 724:	str	r7, [sp, #24]
 728:	add	r8, r3, #3
 72c:	add	r3, sp, #40	; 0x28
 730:	str	r6, [sp, #16]
 734:	mov	r7, r8
 738:	mov	r6, r9
 73c:	ldr	r8, [sp, #20]
 740:	mov	r9, r3
 744:	b	7ac <coda_grib_cursor_read_float+0x438>
 748:	ldrb	r3, [sp, #43]	; 0x2b
 74c:	ldrb	r2, [sp, #41]	; 0x29
 750:	ldrb	r0, [sp, #42]	; 0x2a
 754:	strb	r3, [sp, #44]	; 0x2c
 758:	ldrb	r3, [sp, #40]	; 0x28
 75c:	strb	r0, [sp, #45]	; 0x2d
 760:	strb	r2, [sp, #46]	; 0x2e
 764:	strb	r3, [sp, #47]	; 0x2f
 768:	ldr	r3, [sp, #44]	; 0x2c
 76c:	subs	sl, sl, #24
 770:	sbc	fp, fp, #0
 774:	lsr	r3, r3, r6
 778:	str	r3, [sp, #44]	; 0x2c
 77c:	lsr	r3, r3, #16
 780:	strb	r3, [r7, #-3]
 784:	ldrb	r3, [sp, #45]	; 0x2d
 788:	adds	r4, r4, #24
 78c:	adc	r5, r5, #0
 790:	strb	r3, [r7, #-2]
 794:	ldrb	r3, [sp, #44]	; 0x2c
 798:	cmp	sl, #1
 79c:	sbcs	r2, fp, #0
 7a0:	strb	r3, [r7, #-1]
 7a4:	add	r7, r7, #3
 7a8:	blt	7e0 <coda_grib_cursor_read_float+0x46c>
 7ac:	mov	r0, #4
 7b0:	mov	r1, #0
 7b4:	lsr	r2, r4, #3
 7b8:	strd	r0, [sp]
 7bc:	str	r9, [sp, #8]
 7c0:	orr	r2, r2, r5, lsl #29
 7c4:	asr	r3, r5, #3
 7c8:	mov	r0, r8
 7cc:	bl	0 <read_bytes>
 7d0:	cmp	r0, #0
 7d4:	beq	748 <coda_grib_cursor_read_float+0x3d4>
 7d8:	mvn	r8, #0
 7dc:	b	5d4 <coda_grib_cursor_read_float+0x260>
 7e0:	ldr	r6, [sp, #16]
 7e4:	ldr	r7, [sp, #24]
 7e8:	b	52c <coda_grib_cursor_read_float+0x1b8>
 7ec:	ldrd	r0, [sp, #24]
 7f0:	and	r3, r4, #7
 7f4:	ldr	lr, [sp, #24]
 7f8:	uxtb	r2, r0
 7fc:	add	r8, r2, r3
 800:	ands	r8, r8, #7
 804:	add	r3, r3, r0
 808:	movne	r8, #1
 80c:	add	r8, r8, r3, lsr #3
 810:	add	r3, sp, #40	; 0x28
 814:	ands	r1, r2, #7
 818:	mov	ip, r3
 81c:	mov	r3, #0
 820:	movne	r1, #1
 824:	lsr	r2, r4, #3
 828:	stmib	sp, {r3, ip}
 82c:	add	r1, r1, lr, lsr #3
 830:	str	r8, [sp]
 834:	orr	r2, r2, r5, lsl #29
 838:	asr	r3, r5, #3
 83c:	ldr	r0, [sp, #20]
 840:	str	ip, [sp, #36]	; 0x24
 844:	str	r1, [sp, #32]
 848:	bl	0 <read_bytes>
 84c:	cmp	r0, #0
 850:	bne	7d8 <coda_grib_cursor_read_float+0x464>
 854:	cmp	r8, #0
 858:	str	r0, [sp, #44]	; 0x2c
 85c:	beq	89c <coda_grib_cursor_read_float+0x528>
 860:	ldr	r0, [sp, #36]	; 0x24
 864:	add	r3, sp, #47	; 0x2f
 868:	add	r1, r0, r8
 86c:	ldrb	r2, [r0], #1
 870:	cmp	r1, r0
 874:	strb	r2, [r3], #-1
 878:	bne	86c <coda_grib_cursor_read_float+0x4f8>
 87c:	rsb	r1, r8, r8, lsl #29
 880:	add	r3, r9, #32
 884:	add	r3, r3, r1, lsl #3
 888:	ldr	r1, [sp, #24]
 88c:	mvn	r8, #0
 890:	ldr	r2, [sp, #44]	; 0x2c
 894:	mvn	r8, r8, lsl r1
 898:	and	r8, r8, r2, lsr r3
 89c:	ldr	r3, [sp, #32]
 8a0:	str	r8, [sp, #44]	; 0x2c
 8a4:	cmp	r3, #0
 8a8:	beq	96c <coda_grib_cursor_read_float+0x5f8>
 8ac:	ldr	r1, [sp, #32]
 8b0:	add	r0, sp, #56	; 0x38
 8b4:	ldr	r3, [sp, #16]
 8b8:	add	r2, r0, r1
 8bc:	sub	r2, r2, #13
 8c0:	add	r0, r3, r1
 8c4:	ldrb	r1, [r2], #-1
 8c8:	strb	r1, [r3], #1
 8cc:	cmp	r0, r3
 8d0:	bne	8c4 <coda_grib_cursor_read_float+0x550>
 8d4:	ldrd	r2, [sp, #24]
 8d8:	mov	r3, #0
 8dc:	str	r0, [sp, #16]
 8e0:	adds	r4, r4, r2
 8e4:	adc	r5, r5, r3
 8e8:	subs	sl, sl, r2
 8ec:	sbc	fp, fp, r3
 8f0:	b	714 <coda_grib_cursor_read_float+0x3a0>
 8f4:	mov	r0, #1
 8f8:	mov	r1, #0
 8fc:	add	r3, sp, #44	; 0x2c
 900:	lsr	r2, r4, #3
 904:	strd	r0, [sp]
 908:	str	r3, [sp, #8]
 90c:	orr	r2, r2, r5, lsl #29
 910:	asr	r3, r5, #3
 914:	ldr	r0, [sp, #20]
 918:	bl	0 <read_bytes>
 91c:	cmp	r0, #0
 920:	bne	7d8 <coda_grib_cursor_read_float+0x464>
 924:	ldr	r0, [sp, #24]
 928:	ldrb	r1, [sp, #44]	; 0x2c
 92c:	mvn	r3, #0
 930:	ldr	r2, [sp, #16]
 934:	bic	r1, r1, r3, lsl r0
 938:	adds	r4, r4, r0
 93c:	mov	r3, #0
 940:	adc	r5, r5, r3
 944:	subs	sl, r8, r0
 948:	add	r2, r2, #1
 94c:	sbc	fp, fp, r3
 950:	ldr	r3, [sp, #32]
 954:	str	r2, [sp, #16]
 958:	add	r2, sp, #48	; 0x30
 95c:	strb	r1, [r2, r3]
 960:	b	4e8 <coda_grib_cursor_read_float+0x174>
 964:	mov	r3, ip
 968:	b	464 <coda_grib_cursor_read_float+0xf0>
 96c:	ldr	r0, [sp, #16]
 970:	b	8d4 <coda_grib_cursor_read_float+0x560>
 974:	ldr	r3, [pc, #32]	; 99c <coda_grib_cursor_read_float+0x628>
 978:	mov	r2, #146	; 0x92
 97c:	ldr	r1, [pc, #28]	; 9a0 <coda_grib_cursor_read_float+0x62c>
 980:	ldr	r0, [pc, #28]	; 9a4 <coda_grib_cursor_read_float+0x630>
 984:	bl	0 <__assert_fail>
 988:	ldr	r3, [pc, #12]	; 99c <coda_grib_cursor_read_float+0x628>
 98c:	mov	r2, #144	; 0x90
 990:	ldr	r1, [pc, #8]	; 9a0 <coda_grib_cursor_read_float+0x62c>
 994:	ldr	r0, [pc, #12]	; 9a8 <coda_grib_cursor_read_float+0x634>
 998:	bl	0 <__assert_fail>
 99c:	.word	0x0000000c
 9a0:	.word	0x00000160
 9a4:	.word	0x0000020c
 9a8:	.word	0x000001fc

000009ac <coda_grib_cursor_read_float_array>:
 9ac:	push	{r4, r5, r6, lr}
 9b0:	sub	sp, sp, #520	; 0x208
 9b4:	ldr	r4, [r0, #4]
 9b8:	add	r3, r0, r4, lsl #4
 9bc:	ldr	r6, [r3, #-8]
 9c0:	ldr	r3, [r6, #8]
 9c4:	cmp	r3, #0
 9c8:	movle	r0, #0
 9cc:	ble	a54 <coda_grib_cursor_read_float_array+0xa8>
 9d0:	mov	r2, #520	; 0x208
 9d4:	mov	r5, r1
 9d8:	mov	r1, r0
 9dc:	mov	r0, sp
 9e0:	bl	0 <memcpy>
 9e4:	add	r3, r4, #1
 9e8:	add	r2, sp, #520	; 0x208
 9ec:	add	r4, r2, r4, lsl #4
 9f0:	add	r2, sp, #8
 9f4:	ldr	ip, [r6, #12]
 9f8:	add	r2, r2, r3, lsl #4
 9fc:	mvn	r0, #0
 a00:	mvn	r1, #0
 a04:	str	ip, [r4, #-512]	; 0xfffffe00
 a08:	str	r3, [sp, #4]
 a0c:	mov	r4, #0
 a10:	strd	r0, [r2, #-8]
 a14:	b	a28 <coda_grib_cursor_read_float_array+0x7c>
 a18:	ldr	r3, [r6, #8]
 a1c:	cmp	r3, r4
 a20:	ble	a54 <coda_grib_cursor_read_float_array+0xa8>
 a24:	ldr	r3, [sp, #4]
 a28:	add	r2, sp, #520	; 0x208
 a2c:	add	r3, r2, r3, lsl #4
 a30:	mov	r1, r5
 a34:	str	r4, [r3, #-524]	; 0xfffffdf4
 a38:	mov	r0, sp
 a3c:	bl	374 <coda_grib_cursor_read_float>
 a40:	add	r4, r4, #1
 a44:	add	r5, r5, #4
 a48:	cmp	r0, #0
 a4c:	beq	a18 <coda_grib_cursor_read_float_array+0x6c>
 a50:	mvn	r0, #0
 a54:	add	sp, sp, #520	; 0x208
 a58:	pop	{r4, r5, r6, pc}

00000a5c <coda_grib_cursor_read_float_partial_array>:
 a5c:	push	{r4, r5, r6, r7, r8, lr}
 a60:	sub	sp, sp, #520	; 0x208
 a64:	ldr	r7, [r0, #4]
 a68:	add	ip, r0, r7, lsl #4
 a6c:	ldr	r8, [ip, #-8]
 a70:	ldr	ip, [r8, #8]
 a74:	cmp	ip, #0
 a78:	ble	b14 <coda_grib_cursor_read_float_partial_array+0xb8>
 a7c:	mov	r6, r2
 a80:	mov	r4, r1
 a84:	mov	r2, #520	; 0x208
 a88:	mov	r1, r0
 a8c:	mov	r0, sp
 a90:	mov	r5, r3
 a94:	bl	0 <memcpy>
 a98:	add	r0, r7, #1
 a9c:	add	r3, sp, #520	; 0x208
 aa0:	add	r7, r3, r7, lsl #4
 aa4:	add	r3, sp, #8
 aa8:	ldr	ip, [r8, #12]
 aac:	add	r1, r3, r0, lsl #4
 ab0:	mvn	r2, #0
 ab4:	mvn	r3, #0
 ab8:	cmp	r6, #0
 abc:	str	ip, [r7, #-512]	; 0xfffffe00
 ac0:	str	r0, [sp, #4]
 ac4:	strd	r2, [r1, #-8]
 ac8:	ble	b14 <coda_grib_cursor_read_float_partial_array+0xb8>
 acc:	add	r6, r6, r4
 ad0:	b	ae0 <coda_grib_cursor_read_float_partial_array+0x84>
 ad4:	cmp	r4, r6
 ad8:	beq	b14 <coda_grib_cursor_read_float_partial_array+0xb8>
 adc:	ldr	r0, [sp, #4]
 ae0:	add	r3, sp, #520	; 0x208
 ae4:	add	r2, r3, r0, lsl #4
 ae8:	mov	r1, r5
 aec:	str	r4, [r2, #-524]	; 0xfffffdf4
 af0:	mov	r0, sp
 af4:	bl	374 <coda_grib_cursor_read_float>
 af8:	add	r4, r4, #1
 afc:	add	r5, r5, #4
 b00:	cmp	r0, #0
 b04:	beq	ad4 <coda_grib_cursor_read_float_partial_array+0x78>
 b08:	mvn	r0, #0
 b0c:	add	sp, sp, #520	; 0x208
 b10:	pop	{r4, r5, r6, r7, r8, pc}
 b14:	mov	r0, #0
 b18:	add	sp, sp, #520	; 0x208
 b1c:	pop	{r4, r5, r6, r7, r8, pc}
