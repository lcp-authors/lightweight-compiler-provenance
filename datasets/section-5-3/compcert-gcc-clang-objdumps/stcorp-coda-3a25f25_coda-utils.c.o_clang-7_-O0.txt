
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #16
       c:	str	r0, [sp, #8]
      10:	str	r1, [sp, #4]
      14:	ldr	r0, [sp, #8]
      18:	movw	r1, #0
      1c:	movt	r1, #0
      20:	bl	0 <strcmp>
      24:	cmp	r0, #0
      28:	bne	3c <coda_format_from_string+0x3c>
      2c:	ldr	r0, [sp, #4]
      30:	movw	r1, #0
      34:	str	r1, [r0]
      38:	b	1e8 <coda_format_from_string+0x1e8>
      3c:	ldr	r0, [sp, #8]
      40:	movw	r1, #0
      44:	movt	r1, #0
      48:	bl	0 <strcmp>
      4c:	cmp	r0, #0
      50:	bne	64 <coda_format_from_string+0x64>
      54:	ldr	r0, [sp, #4]
      58:	movw	r1, #1
      5c:	str	r1, [r0]
      60:	b	1e4 <coda_format_from_string+0x1e4>
      64:	ldr	r0, [sp, #8]
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	bl	0 <strcmp>
      74:	cmp	r0, #0
      78:	bne	8c <coda_format_from_string+0x8c>
      7c:	ldr	r0, [sp, #4]
      80:	movw	r1, #2
      84:	str	r1, [r0]
      88:	b	1e0 <coda_format_from_string+0x1e0>
      8c:	ldr	r0, [sp, #8]
      90:	movw	r1, #0
      94:	movt	r1, #0
      98:	bl	0 <strcmp>
      9c:	cmp	r0, #0
      a0:	bne	b4 <coda_format_from_string+0xb4>
      a4:	ldr	r0, [sp, #4]
      a8:	movw	r1, #3
      ac:	str	r1, [r0]
      b0:	b	1dc <coda_format_from_string+0x1dc>
      b4:	ldr	r0, [sp, #8]
      b8:	movw	r1, #0
      bc:	movt	r1, #0
      c0:	bl	0 <strcmp>
      c4:	cmp	r0, #0
      c8:	bne	dc <coda_format_from_string+0xdc>
      cc:	ldr	r0, [sp, #4]
      d0:	movw	r1, #4
      d4:	str	r1, [r0]
      d8:	b	1d8 <coda_format_from_string+0x1d8>
      dc:	ldr	r0, [sp, #8]
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	bl	0 <strcmp>
      ec:	cmp	r0, #0
      f0:	bne	104 <coda_format_from_string+0x104>
      f4:	ldr	r0, [sp, #4]
      f8:	movw	r1, #5
      fc:	str	r1, [r0]
     100:	b	1d4 <coda_format_from_string+0x1d4>
     104:	ldr	r0, [sp, #8]
     108:	movw	r1, #0
     10c:	movt	r1, #0
     110:	bl	0 <strcmp>
     114:	cmp	r0, #0
     118:	bne	12c <coda_format_from_string+0x12c>
     11c:	ldr	r0, [sp, #4]
     120:	movw	r1, #6
     124:	str	r1, [r0]
     128:	b	1d0 <coda_format_from_string+0x1d0>
     12c:	ldr	r0, [sp, #8]
     130:	movw	r1, #0
     134:	movt	r1, #0
     138:	bl	0 <strcmp>
     13c:	cmp	r0, #0
     140:	bne	154 <coda_format_from_string+0x154>
     144:	ldr	r0, [sp, #4]
     148:	movw	r1, #7
     14c:	str	r1, [r0]
     150:	b	1cc <coda_format_from_string+0x1cc>
     154:	ldr	r0, [sp, #8]
     158:	movw	r1, #0
     15c:	movt	r1, #0
     160:	bl	0 <strcmp>
     164:	cmp	r0, #0
     168:	bne	17c <coda_format_from_string+0x17c>
     16c:	ldr	r0, [sp, #4]
     170:	movw	r1, #8
     174:	str	r1, [r0]
     178:	b	1c8 <coda_format_from_string+0x1c8>
     17c:	ldr	r0, [sp, #8]
     180:	movw	r1, #0
     184:	movt	r1, #0
     188:	bl	0 <strcmp>
     18c:	cmp	r0, #0
     190:	bne	1a4 <coda_format_from_string+0x1a4>
     194:	ldr	r0, [sp, #4]
     198:	movw	r1, #9
     19c:	str	r1, [r0]
     1a0:	b	1c4 <coda_format_from_string+0x1c4>
     1a4:	ldr	r0, [pc, #80]	; 1fc <coda_format_from_string+0x1fc>
     1a8:	ldr	r2, [sp, #8]
     1ac:	movw	r1, #0
     1b0:	movt	r1, #0
     1b4:	bl	0 <coda_set_error>
     1b8:	mvn	r0, #0
     1bc:	str	r0, [fp, #-4]
     1c0:	b	1f0 <coda_format_from_string+0x1f0>
     1c4:	b	1c8 <coda_format_from_string+0x1c8>
     1c8:	b	1cc <coda_format_from_string+0x1cc>
     1cc:	b	1d0 <coda_format_from_string+0x1d0>
     1d0:	b	1d4 <coda_format_from_string+0x1d4>
     1d4:	b	1d8 <coda_format_from_string+0x1d8>
     1d8:	b	1dc <coda_format_from_string+0x1dc>
     1dc:	b	1e0 <coda_format_from_string+0x1e0>
     1e0:	b	1e4 <coda_format_from_string+0x1e4>
     1e4:	b	1e8 <coda_format_from_string+0x1e8>
     1e8:	movw	r0, #0
     1ec:	str	r0, [fp, #-4]
     1f0:	ldr	r0, [fp, #-4]
     1f4:	mov	sp, fp
     1f8:	pop	{fp, pc}
     1fc:	.word	0xfffffe70

00000200 <coda_element_name_from_xml_name>:
     200:	sub	sp, sp, #16
     204:	str	r0, [sp, #8]
     208:	ldr	r0, [sp, #8]
     20c:	str	r0, [sp, #4]
     210:	ldr	r0, [sp, #4]
     214:	ldrb	r0, [r0]
     218:	cmp	r0, #32
     21c:	movw	r0, #0
     220:	str	r0, [sp]
     224:	beq	240 <coda_element_name_from_xml_name+0x40>
     228:	ldr	r0, [sp, #4]
     22c:	ldrb	r0, [r0]
     230:	cmp	r0, #0
     234:	movw	r0, #0
     238:	movne	r0, #1
     23c:	str	r0, [sp]
     240:	ldr	r0, [sp]
     244:	tst	r0, #1
     248:	beq	25c <coda_element_name_from_xml_name+0x5c>
     24c:	ldr	r0, [sp, #4]
     250:	add	r0, r0, #1
     254:	str	r0, [sp, #4]
     258:	b	210 <coda_element_name_from_xml_name+0x10>
     25c:	ldr	r0, [sp, #4]
     260:	ldrb	r0, [r0]
     264:	cmp	r0, #0
     268:	bne	278 <coda_element_name_from_xml_name+0x78>
     26c:	ldr	r0, [sp, #8]
     270:	str	r0, [sp, #12]
     274:	b	28c <coda_element_name_from_xml_name+0x8c>
     278:	ldr	r0, [sp, #4]
     27c:	add	r0, r0, #1
     280:	str	r0, [sp, #4]
     284:	ldr	r0, [sp, #4]
     288:	str	r0, [sp, #12]
     28c:	ldr	r0, [sp, #12]
     290:	add	sp, sp, #16
     294:	bx	lr

00000298 <coda_is_identifier>:
     298:	push	{fp, lr}
     29c:	mov	fp, sp
     2a0:	sub	sp, sp, #24
     2a4:	str	r0, [fp, #-8]
     2a8:	ldr	r0, [fp, #-8]
     2ac:	movw	r1, #0
     2b0:	cmp	r0, r1
     2b4:	bne	2c4 <coda_is_identifier+0x2c>
     2b8:	movw	r0, #0
     2bc:	str	r0, [fp, #-4]
     2c0:	b	388 <coda_is_identifier+0xf0>
     2c4:	bl	0 <__ctype_b_loc>
     2c8:	ldr	r0, [r0]
     2cc:	ldr	lr, [fp, #-8]
     2d0:	ldrb	lr, [lr]
     2d4:	mov	r1, lr
     2d8:	add	r0, r0, lr, lsl #1
     2dc:	ldrh	r0, [r0]
     2e0:	and	r0, r0, #1024	; 0x400
     2e4:	cmp	r0, #0
     2e8:	str	r1, [sp, #8]
     2ec:	bne	2fc <coda_is_identifier+0x64>
     2f0:	movw	r0, #0
     2f4:	str	r0, [fp, #-4]
     2f8:	b	388 <coda_is_identifier+0xf0>
     2fc:	movw	r0, #1
     300:	str	r0, [sp, #12]
     304:	ldr	r0, [fp, #-8]
     308:	ldr	r1, [sp, #12]
     30c:	add	r0, r0, r1
     310:	ldrb	r0, [r0]
     314:	cmp	r0, #0
     318:	beq	380 <coda_is_identifier+0xe8>
     31c:	bl	0 <__ctype_b_loc>
     320:	ldr	r0, [r0]
     324:	ldr	lr, [fp, #-8]
     328:	ldr	r1, [sp, #12]
     32c:	ldrb	r1, [lr, r1]
     330:	mov	lr, r1
     334:	add	r0, r0, r1, lsl #1
     338:	ldrh	r0, [r0]
     33c:	and	r0, r0, #8
     340:	cmp	r0, #0
     344:	str	lr, [sp, #4]
     348:	bne	370 <coda_is_identifier+0xd8>
     34c:	ldr	r0, [fp, #-8]
     350:	ldr	r1, [sp, #12]
     354:	add	r0, r0, r1
     358:	ldrb	r0, [r0]
     35c:	cmp	r0, #95	; 0x5f
     360:	beq	370 <coda_is_identifier+0xd8>
     364:	movw	r0, #0
     368:	str	r0, [fp, #-4]
     36c:	b	388 <coda_is_identifier+0xf0>
     370:	ldr	r0, [sp, #12]
     374:	add	r0, r0, #1
     378:	str	r0, [sp, #12]
     37c:	b	304 <coda_is_identifier+0x6c>
     380:	movw	r0, #1
     384:	str	r0, [fp, #-4]
     388:	ldr	r0, [fp, #-4]
     38c:	mov	sp, fp
     390:	pop	{fp, pc}

00000394 <coda_identifier_from_name>:
     394:	push	{fp, lr}
     398:	mov	fp, sp
     39c:	sub	sp, sp, #56	; 0x38
     3a0:	str	r0, [fp, #-8]
     3a4:	str	r1, [fp, #-12]
     3a8:	movw	r0, #4
     3ac:	str	r0, [fp, #-16]
     3b0:	ldr	r0, [fp, #-8]
     3b4:	movw	r1, #0
     3b8:	cmp	r0, r1
     3bc:	bne	3d0 <coda_identifier_from_name+0x3c>
     3c0:	movw	r0, #0
     3c4:	movt	r0, #0
     3c8:	str	r0, [fp, #-8]
     3cc:	b	464 <coda_identifier_from_name+0xd0>
     3d0:	b	3d4 <coda_identifier_from_name+0x40>
     3d4:	ldr	r0, [fp, #-8]
     3d8:	ldrb	r0, [r0]
     3dc:	cmp	r0, #0
     3e0:	movw	r0, #0
     3e4:	str	r0, [sp, #20]
     3e8:	beq	428 <coda_identifier_from_name+0x94>
     3ec:	bl	0 <__ctype_b_loc>
     3f0:	ldr	r0, [r0]
     3f4:	ldr	lr, [fp, #-8]
     3f8:	ldrb	lr, [lr]
     3fc:	mov	r1, lr
     400:	add	r0, r0, lr, lsl #1
     404:	ldrh	r0, [r0]
     408:	and	r0, r0, #1024	; 0x400
     40c:	cmp	r0, #0
     410:	movw	r0, #0
     414:	movne	r0, #1
     418:	mvn	lr, #0
     41c:	eor	r0, r0, lr
     420:	str	r1, [sp, #16]
     424:	str	r0, [sp, #20]
     428:	ldr	r0, [sp, #20]
     42c:	tst	r0, #1
     430:	beq	444 <coda_identifier_from_name+0xb0>
     434:	ldr	r0, [fp, #-8]
     438:	add	r0, r0, #1
     43c:	str	r0, [fp, #-8]
     440:	b	3d4 <coda_identifier_from_name+0x40>
     444:	ldr	r0, [fp, #-8]
     448:	ldrb	r0, [r0]
     44c:	cmp	r0, #0
     450:	bne	460 <coda_identifier_from_name+0xcc>
     454:	movw	r0, #0
     458:	movt	r0, #0
     45c:	str	r0, [fp, #-8]
     460:	b	464 <coda_identifier_from_name+0xd0>
     464:	ldr	r0, [fp, #-8]
     468:	bl	0 <strlen>
     46c:	str	r0, [fp, #-24]	; 0xffffffe8
     470:	ldr	r0, [fp, #-24]	; 0xffffffe8
     474:	add	r0, r0, #4
     478:	add	r0, r0, #1
     47c:	bl	0 <malloc>
     480:	str	r0, [fp, #-20]	; 0xffffffec
     484:	ldr	r0, [fp, #-20]	; 0xffffffec
     488:	movw	lr, #0
     48c:	cmp	r0, lr
     490:	bne	4c8 <coda_identifier_from_name+0x134>
     494:	ldr	r0, [fp, #-24]	; 0xffffffe8
     498:	add	r2, r0, #4
     49c:	mvn	r0, #0
     4a0:	movw	r1, #0
     4a4:	movt	r1, #0
     4a8:	movw	r3, #0
     4ac:	movt	r3, #0
     4b0:	movw	ip, #172	; 0xac
     4b4:	str	ip, [sp]
     4b8:	bl	0 <coda_set_error>
     4bc:	movw	r0, #0
     4c0:	str	r0, [fp, #-4]
     4c4:	b	618 <coda_identifier_from_name+0x284>
     4c8:	ldr	r0, [fp, #-8]
     4cc:	ldrb	r0, [r0]
     4d0:	ldr	r1, [fp, #-20]	; 0xffffffec
     4d4:	strb	r0, [r1]
     4d8:	movw	r0, #1
     4dc:	str	r0, [sp, #28]
     4e0:	ldr	r0, [sp, #28]
     4e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4e8:	cmp	r0, r1
     4ec:	bge	56c <coda_identifier_from_name+0x1d8>
     4f0:	bl	0 <__ctype_b_loc>
     4f4:	ldr	r0, [r0]
     4f8:	ldr	lr, [fp, #-8]
     4fc:	ldr	r1, [sp, #28]
     500:	ldrb	r1, [lr, r1]
     504:	mov	lr, r1
     508:	add	r0, r0, r1, lsl #1
     50c:	ldrh	r0, [r0]
     510:	and	r0, r0, #8
     514:	cmp	r0, #0
     518:	str	lr, [sp, #12]
     51c:	beq	544 <coda_identifier_from_name+0x1b0>
     520:	ldr	r0, [fp, #-8]
     524:	ldr	r1, [sp, #28]
     528:	add	r0, r0, r1
     52c:	ldrb	r0, [r0]
     530:	ldr	r1, [fp, #-20]	; 0xffffffec
     534:	ldr	r2, [sp, #28]
     538:	add	r1, r1, r2
     53c:	strb	r0, [r1]
     540:	b	558 <coda_identifier_from_name+0x1c4>
     544:	ldr	r0, [fp, #-20]	; 0xffffffec
     548:	ldr	r1, [sp, #28]
     54c:	add	r0, r0, r1
     550:	movw	r1, #95	; 0x5f
     554:	strb	r1, [r0]
     558:	b	55c <coda_identifier_from_name+0x1c8>
     55c:	ldr	r0, [sp, #28]
     560:	add	r0, r0, #1
     564:	str	r0, [sp, #28]
     568:	b	4e0 <coda_identifier_from_name+0x14c>
     56c:	ldr	r0, [fp, #-20]	; 0xffffffec
     570:	ldr	r1, [fp, #-24]	; 0xffffffe8
     574:	add	r0, r0, r1
     578:	movw	r1, #0
     57c:	strb	r1, [r0]
     580:	ldr	r0, [fp, #-12]
     584:	movw	r1, #0
     588:	cmp	r0, r1
     58c:	beq	610 <coda_identifier_from_name+0x27c>
     590:	movw	r0, #0
     594:	str	r0, [sp, #24]
     598:	ldr	r0, [fp, #-12]
     59c:	ldr	r1, [fp, #-20]	; 0xffffffec
     5a0:	bl	0 <coda_hashtable_get_index_from_name>
     5a4:	cmp	r0, #0
     5a8:	blt	60c <coda_identifier_from_name+0x278>
     5ac:	ldr	r0, [sp, #24]
     5b0:	add	r0, r0, #1
     5b4:	str	r0, [sp, #24]
     5b8:	ldr	r0, [sp, #24]
     5bc:	cmp	r0, #1000	; 0x3e8
     5c0:	bge	5c8 <coda_identifier_from_name+0x234>
     5c4:	b	5e8 <coda_identifier_from_name+0x254>
     5c8:	movw	r0, #0
     5cc:	movt	r0, #0
     5d0:	movw	r1, #0
     5d4:	movt	r1, #0
     5d8:	movw	r2, #203	; 0xcb
     5dc:	movw	r3, #0
     5e0:	movt	r3, #0
     5e4:	bl	0 <__assert_fail>
     5e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     5ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
     5f0:	add	r0, r0, r1
     5f4:	ldr	r2, [sp, #24]
     5f8:	movw	r1, #0
     5fc:	movt	r1, #0
     600:	bl	0 <sprintf>
     604:	str	r0, [sp, #8]
     608:	b	598 <coda_identifier_from_name+0x204>
     60c:	b	610 <coda_identifier_from_name+0x27c>
     610:	ldr	r0, [fp, #-20]	; 0xffffffec
     614:	str	r0, [fp, #-4]
     618:	ldr	r0, [fp, #-4]
     61c:	mov	sp, fp
     620:	pop	{fp, pc}

00000624 <coda_c_index_to_fortran_index>:
     624:	push	{fp, lr}
     628:	mov	fp, sp
     62c:	sub	sp, sp, #64	; 0x40
     630:	str	r0, [fp, #-8]
     634:	str	r1, [fp, #-12]
     638:	str	r2, [fp, #-16]
     63c:	ldr	r0, [fp, #-8]
     640:	cmp	r0, #8
     644:	ble	66c <coda_c_index_to_fortran_index+0x48>
     648:	ldr	r2, [fp, #-8]
     64c:	mvn	r0, #99	; 0x63
     650:	movw	r1, #0
     654:	movt	r1, #0
     658:	movw	r3, #8
     65c:	bl	0 <coda_set_error>
     660:	mvn	r0, #0
     664:	str	r0, [fp, #-4]
     668:	b	748 <coda_c_index_to_fortran_index+0x124>
     66c:	ldr	r0, [fp, #-8]
     670:	sub	r0, r0, #1
     674:	str	r0, [fp, #-20]	; 0xffffffec
     678:	ldr	r0, [fp, #-20]	; 0xffffffec
     67c:	cmp	r0, #0
     680:	blt	6d4 <coda_c_index_to_fortran_index+0xb0>
     684:	ldr	r0, [fp, #-16]
     688:	ldr	r1, [fp, #-12]
     68c:	ldr	r2, [fp, #-20]	; 0xffffffec
     690:	ldr	r1, [r1, r2, lsl #2]
     694:	sdiv	r3, r0, r1
     698:	mls	r0, r3, r1, r0
     69c:	add	r1, sp, #4
     6a0:	str	r0, [r1, r2, lsl #2]
     6a4:	ldr	r0, [fp, #-12]
     6a8:	ldr	r1, [fp, #-20]	; 0xffffffec
     6ac:	add	r0, r0, r1, lsl #2
     6b0:	ldr	r0, [r0]
     6b4:	ldr	r1, [fp, #-16]
     6b8:	sdiv	r0, r1, r0
     6bc:	str	r0, [fp, #-16]
     6c0:	ldr	r0, [fp, #-20]	; 0xffffffec
     6c4:	mvn	r1, #0
     6c8:	add	r0, r0, r1
     6cc:	str	r0, [fp, #-20]	; 0xffffffec
     6d0:	b	678 <coda_c_index_to_fortran_index+0x54>
     6d4:	movw	r0, #0
     6d8:	str	r0, [fp, #-24]	; 0xffffffe8
     6dc:	movw	r1, #1
     6e0:	str	r1, [fp, #-28]	; 0xffffffe4
     6e4:	str	r0, [fp, #-20]	; 0xffffffec
     6e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     6ec:	ldr	r1, [fp, #-8]
     6f0:	cmp	r0, r1
     6f4:	bge	740 <coda_c_index_to_fortran_index+0x11c>
     6f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     6fc:	ldr	r1, [fp, #-20]	; 0xffffffec
     700:	add	r2, sp, #4
     704:	ldr	r1, [r2, r1, lsl #2]
     708:	ldr	r2, [fp, #-24]	; 0xffffffe8
     70c:	mla	r0, r0, r1, r2
     710:	str	r0, [fp, #-24]	; 0xffffffe8
     714:	ldr	r0, [fp, #-12]
     718:	ldr	r1, [fp, #-20]	; 0xffffffec
     71c:	add	r0, r0, r1, lsl #2
     720:	ldr	r0, [r0]
     724:	ldr	r1, [fp, #-28]	; 0xffffffe4
     728:	mul	r0, r1, r0
     72c:	str	r0, [fp, #-28]	; 0xffffffe4
     730:	ldr	r0, [fp, #-20]	; 0xffffffec
     734:	add	r0, r0, #1
     738:	str	r0, [fp, #-20]	; 0xffffffec
     73c:	b	6e8 <coda_c_index_to_fortran_index+0xc4>
     740:	ldr	r0, [fp, #-24]	; 0xffffffe8
     744:	str	r0, [fp, #-4]
     748:	ldr	r0, [fp, #-4]
     74c:	mov	sp, fp
     750:	pop	{fp, pc}

00000754 <coda_path_find_file>:
     754:	push	{fp, lr}
     758:	mov	fp, sp
     75c:	sub	sp, sp, #152	; 0x98
     760:	str	r0, [fp, #-8]
     764:	str	r1, [fp, #-12]
     768:	str	r2, [fp, #-16]
     76c:	movw	r0, #58	; 0x3a
     770:	strb	r0, [fp, #-17]	; 0xffffffef
     774:	movw	r0, #0
     778:	str	r0, [fp, #-32]	; 0xffffffe0
     77c:	str	r0, [fp, #-36]	; 0xffffffdc
     780:	ldr	r1, [fp, #-12]
     784:	str	r0, [sp, #8]
     788:	mov	r0, r1
     78c:	bl	0 <strlen>
     790:	str	r0, [fp, #-40]	; 0xffffffd8
     794:	ldr	r0, [fp, #-8]
     798:	ldr	r1, [sp, #8]
     79c:	cmp	r0, r1
     7a0:	beq	7b4 <coda_path_find_file+0x60>
     7a4:	ldr	r0, [fp, #-8]
     7a8:	ldrb	r0, [r0]
     7ac:	cmp	r0, #0
     7b0:	bne	7c8 <coda_path_find_file+0x74>
     7b4:	ldr	r0, [fp, #-16]
     7b8:	movw	r1, #0
     7bc:	str	r1, [r0]
     7c0:	str	r1, [fp, #-4]
     7c4:	b	9f4 <coda_path_find_file+0x2a0>
     7c8:	ldr	r0, [fp, #-8]
     7cc:	bl	0 <strdup>
     7d0:	str	r0, [fp, #-24]	; 0xffffffe8
     7d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7d8:	movw	lr, #0
     7dc:	cmp	r0, lr
     7e0:	bne	80c <coda_path_find_file+0xb8>
     7e4:	mvn	r0, #0
     7e8:	movw	r1, #0
     7ec:	movt	r1, #0
     7f0:	movw	r2, #0
     7f4:	movt	r2, #0
     7f8:	movw	r3, #391	; 0x187
     7fc:	bl	0 <coda_set_error>
     800:	mvn	r0, #0
     804:	str	r0, [fp, #-4]
     808:	b	9f4 <coda_path_find_file+0x2a0>
     80c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     810:	str	r0, [fp, #-28]	; 0xffffffe4
     814:	ldr	r0, [fp, #-28]	; 0xffffffe4
     818:	ldrb	r0, [r0]
     81c:	cmp	r0, #0
     820:	beq	9c4 <coda_path_find_file+0x270>
     824:	ldr	r0, [fp, #-28]	; 0xffffffe4
     828:	str	r0, [sp, #20]
     82c:	ldr	r0, [sp, #20]
     830:	ldrb	r0, [r0]
     834:	cmp	r0, #0
     838:	movw	r0, #0
     83c:	str	r0, [sp, #4]
     840:	beq	85c <coda_path_find_file+0x108>
     844:	ldr	r0, [sp, #20]
     848:	ldrb	r0, [r0]
     84c:	cmp	r0, #58	; 0x3a
     850:	movw	r0, #0
     854:	movne	r0, #1
     858:	str	r0, [sp, #4]
     85c:	ldr	r0, [sp, #4]
     860:	tst	r0, #1
     864:	beq	878 <coda_path_find_file+0x124>
     868:	ldr	r0, [sp, #20]
     86c:	add	r0, r0, #1
     870:	str	r0, [sp, #20]
     874:	b	82c <coda_path_find_file+0xd8>
     878:	ldr	r0, [sp, #20]
     87c:	ldrb	r0, [r0]
     880:	cmp	r0, #0
     884:	beq	8a0 <coda_path_find_file+0x14c>
     888:	ldr	r0, [sp, #20]
     88c:	movw	r1, #0
     890:	strb	r1, [r0]
     894:	ldr	r0, [sp, #20]
     898:	add	r0, r0, #1
     89c:	str	r0, [sp, #20]
     8a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     8a4:	bl	0 <strlen>
     8a8:	str	r0, [sp, #16]
     8ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
     8b0:	ldr	lr, [sp, #16]
     8b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     8b8:	add	r1, lr, r1
     8bc:	add	r1, r1, #1
     8c0:	cmp	r0, r1
     8c4:	bge	950 <coda_path_find_file+0x1fc>
     8c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8cc:	ldr	r1, [sp, #16]
     8d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     8d4:	add	r1, r1, r2
     8d8:	add	r1, r1, #2
     8dc:	bl	0 <realloc>
     8e0:	str	r0, [sp, #12]
     8e4:	ldr	r0, [sp, #12]
     8e8:	movw	r1, #0
     8ec:	cmp	r0, r1
     8f0:	bne	934 <coda_path_find_file+0x1e0>
     8f4:	mvn	r0, #0
     8f8:	movw	r1, #0
     8fc:	movt	r1, #0
     900:	movw	r2, #0
     904:	movt	r2, #0
     908:	movw	r3, #421	; 0x1a5
     90c:	bl	0 <coda_set_error>
     910:	ldr	r0, [fp, #-32]	; 0xffffffe0
     914:	movw	r1, #0
     918:	cmp	r0, r1
     91c:	beq	928 <coda_path_find_file+0x1d4>
     920:	ldr	r0, [fp, #-32]	; 0xffffffe0
     924:	bl	0 <free>
     928:	mvn	r0, #0
     92c:	str	r0, [fp, #-4]
     930:	b	9f4 <coda_path_find_file+0x2a0>
     934:	ldr	r0, [sp, #12]
     938:	str	r0, [fp, #-32]	; 0xffffffe0
     93c:	ldr	r0, [sp, #16]
     940:	ldr	r1, [fp, #-40]	; 0xffffffd8
     944:	add	r0, r0, r1
     948:	add	r0, r0, #1
     94c:	str	r0, [fp, #-36]	; 0xffffffdc
     950:	ldr	r0, [fp, #-32]	; 0xffffffe0
     954:	ldr	r2, [fp, #-28]	; 0xffffffe4
     958:	ldr	r3, [fp, #-12]
     95c:	movw	r1, #0
     960:	movt	r1, #0
     964:	bl	0 <sprintf>
     968:	ldr	r1, [fp, #-32]	; 0xffffffe0
     96c:	str	r0, [sp]
     970:	mov	r0, r1
     974:	add	r1, sp, #24
     978:	bl	0 <stat>
     97c:	cmp	r0, #0
     980:	bne	9b8 <coda_path_find_file+0x264>
     984:	ldr	r0, [sp, #40]	; 0x28
     988:	and	r0, r0, #32768	; 0x8000
     98c:	cmp	r0, #0
     990:	beq	9b4 <coda_path_find_file+0x260>
     994:	ldr	r0, [fp, #-32]	; 0xffffffe0
     998:	ldr	r1, [fp, #-16]
     99c:	str	r0, [r1]
     9a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9a4:	bl	0 <free>
     9a8:	movw	r0, #0
     9ac:	str	r0, [fp, #-4]
     9b0:	b	9f4 <coda_path_find_file+0x2a0>
     9b4:	b	9b8 <coda_path_find_file+0x264>
     9b8:	ldr	r0, [sp, #20]
     9bc:	str	r0, [fp, #-28]	; 0xffffffe4
     9c0:	b	814 <coda_path_find_file+0xc0>
     9c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9c8:	movw	r1, #0
     9cc:	cmp	r0, r1
     9d0:	beq	9dc <coda_path_find_file+0x288>
     9d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9d8:	bl	0 <free>
     9dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9e0:	bl	0 <free>
     9e4:	ldr	r0, [fp, #-16]
     9e8:	movw	lr, #0
     9ec:	str	lr, [r0]
     9f0:	str	lr, [fp, #-4]
     9f4:	ldr	r0, [fp, #-4]
     9f8:	mov	sp, fp
     9fc:	pop	{fp, pc}

00000a00 <coda_path_from_path>:
     a00:	push	{fp, lr}
     a04:	mov	fp, sp
     a08:	sub	sp, sp, #40	; 0x28
     a0c:	str	r0, [fp, #-8]
     a10:	str	r1, [fp, #-12]
     a14:	str	r2, [fp, #-16]
     a18:	str	r3, [sp, #20]
     a1c:	ldr	r0, [fp, #-8]
     a20:	bl	0 <strlen>
     a24:	str	r0, [sp, #12]
     a28:	ldr	r0, [fp, #-16]
     a2c:	movw	r1, #0
     a30:	cmp	r0, r1
     a34:	bne	a44 <coda_path_from_path+0x44>
     a38:	movw	r0, #0
     a3c:	str	r0, [sp, #4]
     a40:	b	a50 <coda_path_from_path+0x50>
     a44:	ldr	r0, [fp, #-16]
     a48:	bl	0 <strlen>
     a4c:	str	r0, [sp, #4]
     a50:	ldr	r0, [sp, #4]
     a54:	str	r0, [sp, #8]
     a58:	ldr	r0, [fp, #-12]
     a5c:	cmp	r0, #0
     a60:	beq	af4 <coda_path_from_path+0xf4>
     a64:	ldr	r0, [sp, #12]
     a68:	cmp	r0, #0
     a6c:	ble	af4 <coda_path_from_path+0xf4>
     a70:	b	a74 <coda_path_from_path+0x74>
     a74:	ldr	r0, [sp, #12]
     a78:	cmp	r0, #0
     a7c:	movw	r0, #0
     a80:	str	r0, [sp]
     a84:	ble	ad0 <coda_path_from_path+0xd0>
     a88:	ldr	r0, [fp, #-8]
     a8c:	ldr	r1, [sp, #12]
     a90:	sub	r1, r1, #1
     a94:	add	r0, r0, r1
     a98:	ldrb	r0, [r0]
     a9c:	cmp	r0, #47	; 0x2f
     aa0:	movw	r0, #0
     aa4:	str	r0, [sp]
     aa8:	beq	ad0 <coda_path_from_path+0xd0>
     aac:	ldr	r0, [fp, #-8]
     ab0:	ldr	r1, [sp, #12]
     ab4:	sub	r1, r1, #1
     ab8:	add	r0, r0, r1
     abc:	ldrb	r0, [r0]
     ac0:	cmp	r0, #92	; 0x5c
     ac4:	movw	r0, #0
     ac8:	movne	r0, #1
     acc:	str	r0, [sp]
     ad0:	ldr	r0, [sp]
     ad4:	tst	r0, #1
     ad8:	beq	af0 <coda_path_from_path+0xf0>
     adc:	ldr	r0, [sp, #12]
     ae0:	mvn	r1, #0
     ae4:	add	r0, r0, r1
     ae8:	str	r0, [sp, #12]
     aec:	b	a74 <coda_path_from_path+0x74>
     af0:	b	af4 <coda_path_from_path+0xf4>
     af4:	ldr	r0, [sp, #12]
     af8:	add	r0, r0, #1
     afc:	ldr	r1, [sp, #8]
     b00:	add	r0, r0, r1
     b04:	add	r0, r0, #1
     b08:	bl	0 <malloc>
     b0c:	ldr	r1, [sp, #20]
     b10:	str	r0, [r1]
     b14:	ldr	r0, [sp, #20]
     b18:	ldr	r0, [r0]
     b1c:	movw	r1, #0
     b20:	cmp	r0, r1
     b24:	bne	b50 <coda_path_from_path+0x150>
     b28:	mvn	r0, #0
     b2c:	movw	r1, #0
     b30:	movt	r1, #0
     b34:	movw	r2, #0
     b38:	movt	r2, #0
     b3c:	movw	r3, #481	; 0x1e1
     b40:	bl	0 <coda_set_error>
     b44:	mvn	r0, #0
     b48:	str	r0, [fp, #-4]
     b4c:	b	bfc <coda_path_from_path+0x1fc>
     b50:	ldr	r0, [sp, #20]
     b54:	ldr	r0, [r0]
     b58:	str	r0, [sp, #16]
     b5c:	ldr	r0, [sp, #12]
     b60:	cmp	r0, #0
     b64:	ble	bb0 <coda_path_from_path+0x1b0>
     b68:	ldr	r0, [sp, #16]
     b6c:	ldr	r1, [fp, #-8]
     b70:	ldr	r2, [sp, #12]
     b74:	bl	0 <memcpy>
     b78:	ldr	r0, [sp, #12]
     b7c:	ldr	r1, [sp, #16]
     b80:	add	r0, r1, r0
     b84:	str	r0, [sp, #16]
     b88:	ldr	r0, [sp, #8]
     b8c:	cmp	r0, #0
     b90:	ble	bac <coda_path_from_path+0x1ac>
     b94:	ldr	r0, [sp, #16]
     b98:	movw	r1, #47	; 0x2f
     b9c:	strb	r1, [r0]
     ba0:	ldr	r0, [sp, #16]
     ba4:	add	r0, r0, #1
     ba8:	str	r0, [sp, #16]
     bac:	b	bb0 <coda_path_from_path+0x1b0>
     bb0:	ldr	r0, [sp, #8]
     bb4:	cmp	r0, #0
     bb8:	ble	bdc <coda_path_from_path+0x1dc>
     bbc:	ldr	r0, [sp, #16]
     bc0:	ldr	r1, [fp, #-16]
     bc4:	ldr	r2, [sp, #8]
     bc8:	bl	0 <memcpy>
     bcc:	ldr	r0, [sp, #8]
     bd0:	ldr	r1, [sp, #16]
     bd4:	add	r0, r1, r0
     bd8:	str	r0, [sp, #16]
     bdc:	ldr	r0, [sp, #16]
     be0:	movw	r1, #0
     be4:	strb	r1, [r0]
     be8:	ldr	r0, [sp, #20]
     bec:	ldr	r0, [r0]
     bf0:	bl	c08 <clean_path>
     bf4:	movw	r0, #0
     bf8:	str	r0, [fp, #-4]
     bfc:	ldr	r0, [fp, #-4]
     c00:	mov	sp, fp
     c04:	pop	{fp, pc}

00000c08 <clean_path>:
     c08:	sub	sp, sp, #24
     c0c:	str	r0, [sp, #20]
     c10:	ldr	r0, [sp, #20]
     c14:	movw	r1, #0
     c18:	cmp	r0, r1
     c1c:	beq	c30 <clean_path+0x28>
     c20:	ldr	r0, [sp, #20]
     c24:	ldrb	r0, [r0]
     c28:	cmp	r0, #0
     c2c:	bne	c34 <clean_path+0x2c>
     c30:	b	fdc <clean_path+0x3d4>
     c34:	movw	r0, #0
     c38:	str	r0, [sp, #16]
     c3c:	str	r0, [sp, #12]
     c40:	ldr	r0, [sp, #20]
     c44:	ldr	r1, [sp, #16]
     c48:	add	r0, r0, r1
     c4c:	ldrb	r0, [r0]
     c50:	cmp	r0, #46	; 0x2e
     c54:	movw	r0, #0
     c58:	str	r0, [sp, #4]
     c5c:	bne	c84 <clean_path+0x7c>
     c60:	ldr	r0, [sp, #20]
     c64:	ldr	r1, [sp, #16]
     c68:	add	r1, r1, #1
     c6c:	add	r0, r0, r1
     c70:	ldrb	r0, [r0]
     c74:	cmp	r0, #47	; 0x2f
     c78:	movw	r0, #0
     c7c:	moveq	r0, #1
     c80:	str	r0, [sp, #4]
     c84:	ldr	r0, [sp, #4]
     c88:	tst	r0, #1
     c8c:	beq	ca0 <clean_path+0x98>
     c90:	ldr	r0, [sp, #16]
     c94:	add	r0, r0, #2
     c98:	str	r0, [sp, #16]
     c9c:	b	c40 <clean_path+0x38>
     ca0:	b	ca4 <clean_path+0x9c>
     ca4:	ldr	r0, [sp, #20]
     ca8:	ldr	r1, [sp, #16]
     cac:	add	r0, r0, r1
     cb0:	ldrb	r0, [r0]
     cb4:	cmp	r0, #0
     cb8:	beq	f9c <clean_path+0x394>
     cbc:	ldr	r0, [sp, #20]
     cc0:	ldr	r1, [sp, #16]
     cc4:	add	r0, r0, r1
     cc8:	ldrb	r0, [r0]
     ccc:	cmp	r0, #47	; 0x2f
     cd0:	beq	cec <clean_path+0xe4>
     cd4:	ldr	r0, [sp, #20]
     cd8:	ldr	r1, [sp, #16]
     cdc:	add	r0, r0, r1
     ce0:	ldrb	r0, [r0]
     ce4:	cmp	r0, #92	; 0x5c
     ce8:	bne	f60 <clean_path+0x358>
     cec:	ldr	r0, [sp, #20]
     cf0:	ldr	r1, [sp, #16]
     cf4:	add	r1, r1, #1
     cf8:	add	r0, r0, r1
     cfc:	ldrb	r0, [r0]
     d00:	cmp	r0, #47	; 0x2f
     d04:	beq	d24 <clean_path+0x11c>
     d08:	ldr	r0, [sp, #20]
     d0c:	ldr	r1, [sp, #16]
     d10:	add	r1, r1, #1
     d14:	add	r0, r0, r1
     d18:	ldrb	r0, [r0]
     d1c:	cmp	r0, #92	; 0x5c
     d20:	bne	d34 <clean_path+0x12c>
     d24:	ldr	r0, [sp, #16]
     d28:	add	r0, r0, #1
     d2c:	str	r0, [sp, #16]
     d30:	b	ca4 <clean_path+0x9c>
     d34:	ldr	r0, [sp, #20]
     d38:	ldr	r1, [sp, #16]
     d3c:	add	r1, r1, #1
     d40:	add	r0, r0, r1
     d44:	ldrb	r0, [r0]
     d48:	cmp	r0, #46	; 0x2e
     d4c:	bne	f5c <clean_path+0x354>
     d50:	ldr	r0, [sp, #20]
     d54:	ldr	r1, [sp, #16]
     d58:	add	r1, r1, #2
     d5c:	add	r0, r0, r1
     d60:	ldrb	r0, [r0]
     d64:	cmp	r0, #0
     d68:	beq	da4 <clean_path+0x19c>
     d6c:	ldr	r0, [sp, #20]
     d70:	ldr	r1, [sp, #16]
     d74:	add	r1, r1, #2
     d78:	add	r0, r0, r1
     d7c:	ldrb	r0, [r0]
     d80:	cmp	r0, #47	; 0x2f
     d84:	beq	da4 <clean_path+0x19c>
     d88:	ldr	r0, [sp, #20]
     d8c:	ldr	r1, [sp, #16]
     d90:	add	r1, r1, #2
     d94:	add	r0, r0, r1
     d98:	ldrb	r0, [r0]
     d9c:	cmp	r0, #92	; 0x5c
     da0:	bne	db4 <clean_path+0x1ac>
     da4:	ldr	r0, [sp, #16]
     da8:	add	r0, r0, #2
     dac:	str	r0, [sp, #16]
     db0:	b	ca4 <clean_path+0x9c>
     db4:	ldr	r0, [sp, #20]
     db8:	ldr	r1, [sp, #16]
     dbc:	add	r1, r1, #2
     dc0:	add	r0, r0, r1
     dc4:	ldrb	r0, [r0]
     dc8:	cmp	r0, #46	; 0x2e
     dcc:	bne	f58 <clean_path+0x350>
     dd0:	ldr	r0, [sp, #20]
     dd4:	ldr	r1, [sp, #16]
     dd8:	add	r1, r1, #3
     ddc:	add	r0, r0, r1
     de0:	ldrb	r0, [r0]
     de4:	cmp	r0, #0
     de8:	beq	e24 <clean_path+0x21c>
     dec:	ldr	r0, [sp, #20]
     df0:	ldr	r1, [sp, #16]
     df4:	add	r1, r1, #3
     df8:	add	r0, r0, r1
     dfc:	ldrb	r0, [r0]
     e00:	cmp	r0, #47	; 0x2f
     e04:	beq	e24 <clean_path+0x21c>
     e08:	ldr	r0, [sp, #20]
     e0c:	ldr	r1, [sp, #16]
     e10:	add	r1, r1, #3
     e14:	add	r0, r0, r1
     e18:	ldrb	r0, [r0]
     e1c:	cmp	r0, #92	; 0x5c
     e20:	bne	f58 <clean_path+0x350>
     e24:	ldr	r0, [sp, #12]
     e28:	cmp	r0, #2
     e2c:	blt	eac <clean_path+0x2a4>
     e30:	ldr	r0, [sp, #20]
     e34:	ldr	r1, [sp, #12]
     e38:	sub	r1, r1, #1
     e3c:	add	r0, r0, r1
     e40:	ldrb	r0, [r0]
     e44:	cmp	r0, #46	; 0x2e
     e48:	bne	eac <clean_path+0x2a4>
     e4c:	ldr	r0, [sp, #20]
     e50:	ldr	r1, [sp, #12]
     e54:	sub	r1, r1, #2
     e58:	add	r0, r0, r1
     e5c:	ldrb	r0, [r0]
     e60:	cmp	r0, #46	; 0x2e
     e64:	bne	eac <clean_path+0x2a4>
     e68:	ldr	r0, [sp, #12]
     e6c:	cmp	r0, #2
     e70:	beq	f54 <clean_path+0x34c>
     e74:	ldr	r0, [sp, #20]
     e78:	ldr	r1, [sp, #12]
     e7c:	sub	r1, r1, #3
     e80:	add	r0, r0, r1
     e84:	ldrb	r0, [r0]
     e88:	cmp	r0, #47	; 0x2f
     e8c:	beq	f54 <clean_path+0x34c>
     e90:	ldr	r0, [sp, #20]
     e94:	ldr	r1, [sp, #12]
     e98:	sub	r1, r1, #3
     e9c:	add	r0, r0, r1
     ea0:	ldrb	r0, [r0]
     ea4:	cmp	r0, #92	; 0x5c
     ea8:	beq	f54 <clean_path+0x34c>
     eac:	ldr	r0, [sp, #12]
     eb0:	sub	r0, r0, #1
     eb4:	str	r0, [sp, #8]
     eb8:	ldr	r0, [sp, #8]
     ebc:	cmp	r0, #0
     ec0:	movw	r0, #0
     ec4:	str	r0, [sp]
     ec8:	blt	f0c <clean_path+0x304>
     ecc:	ldr	r0, [sp, #20]
     ed0:	ldr	r1, [sp, #8]
     ed4:	add	r0, r0, r1
     ed8:	ldrb	r0, [r0]
     edc:	cmp	r0, #47	; 0x2f
     ee0:	movw	r0, #0
     ee4:	str	r0, [sp]
     ee8:	beq	f0c <clean_path+0x304>
     eec:	ldr	r0, [sp, #20]
     ef0:	ldr	r1, [sp, #8]
     ef4:	add	r0, r0, r1
     ef8:	ldrb	r0, [r0]
     efc:	cmp	r0, #92	; 0x5c
     f00:	movw	r0, #0
     f04:	movne	r0, #1
     f08:	str	r0, [sp]
     f0c:	ldr	r0, [sp]
     f10:	tst	r0, #1
     f14:	beq	f2c <clean_path+0x324>
     f18:	ldr	r0, [sp, #8]
     f1c:	mvn	r1, #0
     f20:	add	r0, r0, r1
     f24:	str	r0, [sp, #8]
     f28:	b	eb8 <clean_path+0x2b0>
     f2c:	ldr	r0, [sp, #8]
     f30:	cmp	r0, #0
     f34:	blt	f50 <clean_path+0x348>
     f38:	ldr	r0, [sp, #8]
     f3c:	str	r0, [sp, #12]
     f40:	ldr	r0, [sp, #16]
     f44:	add	r0, r0, #3
     f48:	str	r0, [sp, #16]
     f4c:	b	ca4 <clean_path+0x9c>
     f50:	b	f54 <clean_path+0x34c>
     f54:	b	f58 <clean_path+0x350>
     f58:	b	f5c <clean_path+0x354>
     f5c:	b	f60 <clean_path+0x358>
     f60:	ldr	r0, [sp, #20]
     f64:	ldr	r1, [sp, #16]
     f68:	add	r0, r0, r1
     f6c:	ldrb	r0, [r0]
     f70:	ldr	r1, [sp, #20]
     f74:	ldr	r2, [sp, #12]
     f78:	add	r1, r1, r2
     f7c:	strb	r0, [r1]
     f80:	ldr	r0, [sp, #16]
     f84:	add	r0, r0, #1
     f88:	str	r0, [sp, #16]
     f8c:	ldr	r0, [sp, #12]
     f90:	add	r0, r0, #1
     f94:	str	r0, [sp, #12]
     f98:	b	ca4 <clean_path+0x9c>
     f9c:	ldr	r0, [sp, #12]
     fa0:	cmp	r0, #0
     fa4:	bne	fc8 <clean_path+0x3c0>
     fa8:	ldr	r0, [sp, #20]
     fac:	ldr	r1, [sp, #12]
     fb0:	add	r0, r0, r1
     fb4:	movw	r1, #46	; 0x2e
     fb8:	strb	r1, [r0]
     fbc:	ldr	r0, [sp, #12]
     fc0:	add	r0, r0, #1
     fc4:	str	r0, [sp, #12]
     fc8:	ldr	r0, [sp, #20]
     fcc:	ldr	r1, [sp, #12]
     fd0:	add	r0, r0, r1
     fd4:	movw	r1, #0
     fd8:	strb	r1, [r0]
     fdc:	add	sp, sp, #24
     fe0:	bx	lr

00000fe4 <coda_path_for_program>:
     fe4:	push	{r4, r5, fp, lr}
     fe8:	add	fp, sp, #8
     fec:	sub	sp, sp, #1056	; 0x420
     ff0:	str	r0, [fp, #-16]
     ff4:	str	r1, [fp, #-20]	; 0xffffffec
     ff8:	movw	r0, #0
     ffc:	str	r0, [fp, #-28]	; 0xffffffe4
    1000:	ldr	r1, [fp, #-20]	; 0xffffffec
    1004:	str	r0, [r1]
    1008:	ldr	r1, [fp, #-16]
    100c:	cmp	r1, r0
    1010:	bne	1020 <coda_path_for_program+0x3c>
    1014:	movw	r0, #0
    1018:	str	r0, [fp, #-12]
    101c:	b	1220 <coda_path_for_program+0x23c>
    1020:	ldr	r0, [fp, #-16]
    1024:	str	r0, [fp, #-24]	; 0xffffffe8
    1028:	ldr	r0, [fp, #-24]	; 0xffffffe8
    102c:	ldrb	r0, [r0]
    1030:	cmp	r0, #0
    1034:	beq	1074 <coda_path_for_program+0x90>
    1038:	ldr	r0, [fp, #-24]	; 0xffffffe8
    103c:	ldrb	r0, [r0]
    1040:	cmp	r0, #47	; 0x2f
    1044:	beq	1058 <coda_path_for_program+0x74>
    1048:	ldr	r0, [fp, #-24]	; 0xffffffe8
    104c:	ldrb	r0, [r0]
    1050:	cmp	r0, #92	; 0x5c
    1054:	bne	1064 <coda_path_for_program+0x80>
    1058:	movw	r0, #1
    105c:	str	r0, [fp, #-28]	; 0xffffffe4
    1060:	b	1074 <coda_path_for_program+0x90>
    1064:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1068:	add	r0, r0, #1
    106c:	str	r0, [fp, #-24]	; 0xffffffe8
    1070:	b	1028 <coda_path_for_program+0x44>
    1074:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1078:	cmp	r0, #0
    107c:	beq	10d0 <coda_path_for_program+0xec>
    1080:	ldr	r0, [fp, #-16]
    1084:	bl	0 <strdup>
    1088:	ldr	lr, [fp, #-20]	; 0xffffffec
    108c:	str	r0, [lr]
    1090:	ldr	r0, [fp, #-20]	; 0xffffffec
    1094:	ldr	r0, [r0]
    1098:	movw	lr, #0
    109c:	cmp	r0, lr
    10a0:	bne	10cc <coda_path_for_program+0xe8>
    10a4:	mvn	r0, #0
    10a8:	movw	r1, #0
    10ac:	movt	r1, #0
    10b0:	movw	r2, #0
    10b4:	movt	r2, #0
    10b8:	movw	r3, #537	; 0x219
    10bc:	bl	0 <coda_set_error>
    10c0:	mvn	r0, #0
    10c4:	str	r0, [fp, #-12]
    10c8:	b	1220 <coda_path_for_program+0x23c>
    10cc:	b	1128 <coda_path_for_program+0x144>
    10d0:	movw	r0, #0
    10d4:	movt	r0, #0
    10d8:	bl	0 <getenv>
    10dc:	movw	lr, #0
    10e0:	cmp	r0, lr
    10e4:	beq	1118 <coda_path_for_program+0x134>
    10e8:	movw	r0, #0
    10ec:	movt	r0, #0
    10f0:	bl	0 <getenv>
    10f4:	ldr	r1, [fp, #-16]
    10f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    10fc:	bl	754 <coda_path_find_file>
    1100:	cmp	r0, #0
    1104:	beq	1114 <coda_path_for_program+0x130>
    1108:	mvn	r0, #0
    110c:	str	r0, [fp, #-12]
    1110:	b	1220 <coda_path_for_program+0x23c>
    1114:	b	1124 <coda_path_for_program+0x140>
    1118:	ldr	r0, [fp, #-20]	; 0xffffffec
    111c:	movw	r1, #0
    1120:	str	r1, [r0]
    1124:	b	1128 <coda_path_for_program+0x144>
    1128:	ldr	r0, [fp, #-20]	; 0xffffffec
    112c:	ldr	r0, [r0]
    1130:	movw	r1, #0
    1134:	cmp	r0, r1
    1138:	beq	1218 <coda_path_for_program+0x234>
    113c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1140:	ldr	r0, [r0]
    1144:	ldrb	r0, [r0]
    1148:	cmp	r0, #47	; 0x2f
    114c:	beq	1218 <coda_path_for_program+0x234>
    1150:	ldr	r0, [fp, #-20]	; 0xffffffec
    1154:	ldr	r0, [r0]
    1158:	ldrb	r0, [r0]
    115c:	cmp	r0, #92	; 0x5c
    1160:	beq	1218 <coda_path_for_program+0x234>
    1164:	bl	0 <__ctype_b_loc>
    1168:	ldr	r0, [r0]
    116c:	ldr	lr, [fp, #-20]	; 0xffffffec
    1170:	ldr	lr, [lr]
    1174:	ldrb	lr, [lr]
    1178:	mov	r1, lr
    117c:	add	r0, r0, lr, lsl #1
    1180:	ldrh	r0, [r0]
    1184:	and	r0, r0, #1024	; 0x400
    1188:	cmp	r0, #0
    118c:	str	r1, [sp]
    1190:	beq	11a8 <coda_path_for_program+0x1c4>
    1194:	ldr	r0, [fp, #-20]	; 0xffffffec
    1198:	ldr	r0, [r0]
    119c:	ldrb	r0, [r0, #1]
    11a0:	cmp	r0, #58	; 0x3a
    11a4:	beq	1218 <coda_path_for_program+0x234>
    11a8:	add	r0, sp, #11
    11ac:	movw	r1, #1024	; 0x400
    11b0:	bl	0 <getcwd>
    11b4:	movw	r1, #0
    11b8:	cmp	r0, r1
    11bc:	bne	11cc <coda_path_for_program+0x1e8>
    11c0:	movw	r0, #0
    11c4:	str	r0, [fp, #-12]
    11c8:	b	1220 <coda_path_for_program+0x23c>
    11cc:	add	r0, sp, #11
    11d0:	movw	r1, #0
    11d4:	strb	r1, [sp, #1035]	; 0x40b
    11d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    11dc:	ldr	r1, [r1]
    11e0:	str	r1, [sp, #4]
    11e4:	ldr	r2, [sp, #4]
    11e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    11ec:	movw	r1, #0
    11f0:	bl	a00 <coda_path_from_path>
    11f4:	cmp	r0, #0
    11f8:	beq	1210 <coda_path_for_program+0x22c>
    11fc:	ldr	r0, [sp, #4]
    1200:	bl	0 <free>
    1204:	mvn	r0, #0
    1208:	str	r0, [fp, #-12]
    120c:	b	1220 <coda_path_for_program+0x23c>
    1210:	ldr	r0, [sp, #4]
    1214:	bl	0 <free>
    1218:	movw	r0, #0
    121c:	str	r0, [fp, #-12]
    1220:	ldr	r0, [fp, #-12]
    1224:	sub	sp, fp, #8
    1228:	pop	{r4, r5, fp, pc}

0000122c <coda_isNaN>:
    122c:	sub	sp, sp, #40	; 0x28
    1230:	vstr	d0, [sp, #24]
    1234:	vldr	d0, [sp, #24]
    1238:	vstr	d0, [sp]
    123c:	mov	r0, #0
    1240:	str	r0, [sp, #20]
    1244:	movw	r1, #32752	; 0x7ff0
    1248:	str	r1, [sp, #16]
    124c:	ldr	r1, [sp, #16]
    1250:	lsl	r1, r1, #16
    1254:	str	r0, [sp, #16]
    1258:	str	r1, [sp, #20]
    125c:	ldr	r0, [sp]
    1260:	ldr	r1, [sp, #4]
    1264:	ldr	r2, [sp, #16]
    1268:	ldr	r3, [sp, #20]
    126c:	bic	r1, r3, r1
    1270:	bic	r0, r2, r0
    1274:	orr	r0, r0, r1
    1278:	cmp	r0, #0
    127c:	beq	1290 <coda_isNaN+0x64>
    1280:	b	1284 <coda_isNaN+0x58>
    1284:	movw	r0, #0
    1288:	str	r0, [sp, #36]	; 0x24
    128c:	b	12f4 <coda_isNaN+0xc8>
    1290:	mov	r0, #0
    1294:	str	r0, [sp, #12]
    1298:	mov	r1, #1
    129c:	str	r1, [sp, #8]
    12a0:	ldr	r1, [sp, #8]
    12a4:	lsl	r1, r1, #20
    12a8:	str	r0, [sp, #8]
    12ac:	str	r1, [sp, #12]
    12b0:	ldr	r0, [sp, #8]
    12b4:	ldr	r1, [sp, #12]
    12b8:	subs	r0, r0, #1
    12bc:	sbc	r1, r1, #0
    12c0:	str	r0, [sp, #8]
    12c4:	str	r1, [sp, #12]
    12c8:	ldr	r0, [sp]
    12cc:	ldr	r1, [sp, #4]
    12d0:	ldr	r2, [sp, #8]
    12d4:	ldr	r3, [sp, #12]
    12d8:	and	r1, r1, r3
    12dc:	and	r0, r0, r2
    12e0:	orr	r0, r0, r1
    12e4:	cmp	r0, #0
    12e8:	movwne	r0, #1
    12ec:	and	r0, r0, #1
    12f0:	str	r0, [sp, #36]	; 0x24
    12f4:	ldr	r0, [sp, #36]	; 0x24
    12f8:	add	sp, sp, #40	; 0x28
    12fc:	bx	lr

00001300 <coda_NaN>:
    1300:	sub	sp, sp, #8
    1304:	mov	r0, #0
    1308:	str	r0, [sp, #4]
    130c:	movw	r1, #32760	; 0x7ff8
    1310:	str	r1, [sp]
    1314:	ldr	r1, [sp]
    1318:	lsl	r1, r1, #16
    131c:	str	r0, [sp]
    1320:	str	r1, [sp, #4]
    1324:	vldr	d0, [sp]
    1328:	add	sp, sp, #8
    132c:	bx	lr

00001330 <coda_isInf>:
    1330:	push	{fp, lr}
    1334:	mov	fp, sp
    1338:	sub	sp, sp, #16
    133c:	vstr	d0, [sp, #8]
    1340:	vldr	d0, [sp, #8]
    1344:	bl	1380 <coda_isPlusInf>
    1348:	cmp	r0, #0
    134c:	movw	r0, #1
    1350:	str	r0, [sp, #4]
    1354:	bne	1370 <coda_isInf+0x40>
    1358:	vldr	d0, [sp, #8]
    135c:	bl	13e0 <coda_isMinInf>
    1360:	cmp	r0, #0
    1364:	movw	r0, #0
    1368:	movne	r0, #1
    136c:	str	r0, [sp, #4]
    1370:	ldr	r0, [sp, #4]
    1374:	and	r0, r0, #1
    1378:	mov	sp, fp
    137c:	pop	{fp, pc}

00001380 <coda_isPlusInf>:
    1380:	sub	sp, sp, #24
    1384:	vstr	d0, [sp, #16]
    1388:	vldr	d0, [sp, #16]
    138c:	vstr	d0, [sp]
    1390:	mov	r0, #0
    1394:	str	r0, [sp, #12]
    1398:	movw	r1, #32752	; 0x7ff0
    139c:	str	r1, [sp, #8]
    13a0:	ldr	r1, [sp, #8]
    13a4:	lsl	r1, r1, #16
    13a8:	str	r0, [sp, #8]
    13ac:	str	r1, [sp, #12]
    13b0:	ldr	r0, [sp]
    13b4:	ldr	r1, [sp, #4]
    13b8:	ldr	r2, [sp, #8]
    13bc:	ldr	r3, [sp, #12]
    13c0:	eor	r1, r1, r3
    13c4:	eor	r0, r0, r2
    13c8:	orr	r0, r0, r1
    13cc:	clz	r0, r0
    13d0:	lsr	r0, r0, #5
    13d4:	and	r0, r0, #1
    13d8:	add	sp, sp, #24
    13dc:	bx	lr

000013e0 <coda_isMinInf>:
    13e0:	sub	sp, sp, #24
    13e4:	vstr	d0, [sp, #16]
    13e8:	vldr	d0, [sp, #16]
    13ec:	vstr	d0, [sp]
    13f0:	mov	r0, #0
    13f4:	str	r0, [sp, #12]
    13f8:	movw	r1, #65520	; 0xfff0
    13fc:	str	r1, [sp, #8]
    1400:	ldr	r1, [sp, #8]
    1404:	lsl	r1, r1, #16
    1408:	str	r0, [sp, #8]
    140c:	str	r1, [sp, #12]
    1410:	ldr	r0, [sp]
    1414:	ldr	r1, [sp, #4]
    1418:	ldr	r2, [sp, #8]
    141c:	ldr	r3, [sp, #12]
    1420:	eor	r1, r1, r3
    1424:	eor	r0, r0, r2
    1428:	orr	r0, r0, r1
    142c:	clz	r0, r0
    1430:	lsr	r0, r0, #5
    1434:	and	r0, r0, #1
    1438:	add	sp, sp, #24
    143c:	bx	lr

00001440 <coda_PlusInf>:
    1440:	sub	sp, sp, #8
    1444:	mov	r0, #0
    1448:	str	r0, [sp, #4]
    144c:	movw	r1, #32752	; 0x7ff0
    1450:	str	r1, [sp]
    1454:	ldr	r1, [sp]
    1458:	lsl	r1, r1, #16
    145c:	str	r0, [sp]
    1460:	str	r1, [sp, #4]
    1464:	vldr	d0, [sp]
    1468:	add	sp, sp, #8
    146c:	bx	lr

00001470 <coda_MinInf>:
    1470:	sub	sp, sp, #8
    1474:	mov	r0, #0
    1478:	str	r0, [sp, #4]
    147c:	movw	r1, #65520	; 0xfff0
    1480:	str	r1, [sp]
    1484:	ldr	r1, [sp]
    1488:	lsl	r1, r1, #16
    148c:	str	r0, [sp]
    1490:	str	r1, [sp, #4]
    1494:	vldr	d0, [sp]
    1498:	add	sp, sp, #8
    149c:	bx	lr

000014a0 <coda_str64>:
    14a0:	push	{fp, lr}
    14a4:	mov	fp, sp
    14a8:	sub	sp, sp, #16
    14ac:	str	r0, [sp, #8]
    14b0:	str	r1, [sp, #12]
    14b4:	str	r2, [sp, #4]
    14b8:	ldr	r0, [sp, #12]
    14bc:	cmn	r0, #1
    14c0:	bgt	14f4 <coda_str64+0x54>
    14c4:	b	14c8 <coda_str64+0x28>
    14c8:	ldr	r0, [sp, #4]
    14cc:	mov	r1, #45	; 0x2d
    14d0:	strb	r1, [r0]
    14d4:	ldr	r0, [sp, #8]
    14d8:	ldr	r1, [sp, #12]
    14dc:	rsbs	r0, r0, #0
    14e0:	rsc	r1, r1, #0
    14e4:	ldr	r2, [sp, #4]
    14e8:	add	r2, r2, #1
    14ec:	bl	150c <coda_str64u>
    14f0:	b	1504 <coda_str64+0x64>
    14f4:	ldr	r0, [sp, #8]
    14f8:	ldr	r1, [sp, #12]
    14fc:	ldr	r2, [sp, #4]
    1500:	bl	150c <coda_str64u>
    1504:	mov	sp, fp
    1508:	pop	{fp, pc}

0000150c <coda_str64u>:
    150c:	push	{fp, lr}
    1510:	mov	fp, sp
    1514:	sub	sp, sp, #64	; 0x40
    1518:	str	r0, [fp, #-8]
    151c:	str	r1, [fp, #-4]
    1520:	str	r2, [fp, #-12]
    1524:	ldr	r0, [fp, #-4]
    1528:	cmp	r0, #0
    152c:	bne	1550 <coda_str64u+0x44>
    1530:	b	1534 <coda_str64u+0x28>
    1534:	ldr	r0, [fp, #-12]
    1538:	ldr	r2, [fp, #-8]
    153c:	movw	r1, #0
    1540:	movt	r1, #0
    1544:	bl	0 <sprintf>
    1548:	str	r0, [fp, #-24]	; 0xffffffe8
    154c:	b	1650 <coda_str64u+0x144>
    1550:	ldr	r0, [fp, #-8]
    1554:	ldr	r1, [fp, #-4]
    1558:	movw	r2, #57600	; 0xe100
    155c:	movt	r2, #1525	; 0x5f5
    1560:	mov	r3, #0
    1564:	str	r2, [fp, #-28]	; 0xffffffe4
    1568:	str	r3, [sp, #32]
    156c:	bl	0 <__aeabi_uldivmod>
    1570:	str	r2, [fp, #-16]
    1574:	ldr	r2, [fp, #-8]
    1578:	ldr	r3, [fp, #-4]
    157c:	str	r0, [sp, #28]
    1580:	mov	r0, r2
    1584:	str	r1, [sp, #24]
    1588:	mov	r1, r3
    158c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1590:	ldr	r3, [sp, #32]
    1594:	bl	0 <__aeabi_uldivmod>
    1598:	str	r1, [fp, #-4]
    159c:	str	r0, [fp, #-8]
    15a0:	ldr	r0, [fp, #-8]
    15a4:	ldr	r1, [fp, #-4]
    15a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    15ac:	ldr	r3, [sp, #32]
    15b0:	bl	0 <__aeabi_uldivmod>
    15b4:	str	r2, [fp, #-20]	; 0xffffffec
    15b8:	ldr	r2, [fp, #-8]
    15bc:	ldr	r3, [fp, #-4]
    15c0:	str	r0, [sp, #20]
    15c4:	mov	r0, r2
    15c8:	str	r1, [sp, #16]
    15cc:	mov	r1, r3
    15d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    15d4:	ldr	r3, [sp, #32]
    15d8:	bl	0 <__aeabi_uldivmod>
    15dc:	str	r1, [fp, #-4]
    15e0:	str	r0, [fp, #-8]
    15e4:	ldr	r0, [fp, #-8]
    15e8:	ldr	r1, [fp, #-4]
    15ec:	orr	r0, r0, r1
    15f0:	cmp	r0, #0
    15f4:	beq	1630 <coda_str64u+0x124>
    15f8:	b	15fc <coda_str64u+0xf0>
    15fc:	ldr	r0, [fp, #-12]
    1600:	ldr	r2, [fp, #-8]
    1604:	ldr	r3, [fp, #-20]	; 0xffffffec
    1608:	ldr	r1, [fp, #-16]
    160c:	movw	ip, #0
    1610:	movt	ip, #0
    1614:	str	r1, [sp, #12]
    1618:	mov	r1, ip
    161c:	ldr	ip, [sp, #12]
    1620:	str	ip, [sp]
    1624:	bl	0 <sprintf>
    1628:	str	r0, [sp, #8]
    162c:	b	164c <coda_str64u+0x140>
    1630:	ldr	r0, [fp, #-12]
    1634:	ldr	r2, [fp, #-20]	; 0xffffffec
    1638:	ldr	r3, [fp, #-16]
    163c:	movw	r1, #0
    1640:	movt	r1, #0
    1644:	bl	0 <sprintf>
    1648:	str	r0, [sp, #4]
    164c:	b	1650 <coda_str64u+0x144>
    1650:	mov	sp, fp
    1654:	pop	{fp, pc}

00001658 <coda_strfl>:
    1658:	push	{fp, lr}
    165c:	mov	fp, sp
    1660:	sub	sp, sp, #32
    1664:	vstr	d0, [fp, #-8]
    1668:	str	r0, [fp, #-12]
    166c:	vldr	d0, [fp, #-8]
    1670:	bl	122c <coda_isNaN>
    1674:	cmp	r0, #0
    1678:	beq	1694 <coda_strfl+0x3c>
    167c:	ldr	r0, [fp, #-12]
    1680:	movw	r1, #0
    1684:	movt	r1, #0
    1688:	bl	0 <strcpy>
    168c:	str	r0, [sp, #16]
    1690:	b	1708 <coda_strfl+0xb0>
    1694:	vldr	d0, [fp, #-8]
    1698:	bl	1380 <coda_isPlusInf>
    169c:	cmp	r0, #0
    16a0:	beq	16bc <coda_strfl+0x64>
    16a4:	ldr	r0, [fp, #-12]
    16a8:	movw	r1, #0
    16ac:	movt	r1, #0
    16b0:	bl	0 <strcpy>
    16b4:	str	r0, [sp, #12]
    16b8:	b	1704 <coda_strfl+0xac>
    16bc:	vldr	d0, [fp, #-8]
    16c0:	bl	13e0 <coda_isMinInf>
    16c4:	cmp	r0, #0
    16c8:	beq	16e4 <coda_strfl+0x8c>
    16cc:	ldr	r0, [fp, #-12]
    16d0:	movw	r1, #0
    16d4:	movt	r1, #0
    16d8:	bl	0 <strcpy>
    16dc:	str	r0, [sp, #8]
    16e0:	b	1700 <coda_strfl+0xa8>
    16e4:	ldr	r0, [fp, #-12]
    16e8:	vldr	d16, [fp, #-8]
    16ec:	movw	r1, #0
    16f0:	movt	r1, #0
    16f4:	vmov	r2, r3, d16
    16f8:	bl	0 <sprintf>
    16fc:	str	r0, [sp, #4]
    1700:	b	1704 <coda_strfl+0xac>
    1704:	b	1708 <coda_strfl+0xb0>
    1708:	mov	sp, fp
    170c:	pop	{fp, pc}
