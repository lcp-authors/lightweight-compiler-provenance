
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-definition.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
       0:	push	{r0, r1, r2, r3}
       4:	movw	r3, #0
       8:	movt	r3, #0
       c:	push	{lr}		; (str lr, [sp, #-4]!)
      10:	sub	sp, sp, #12
      14:	ldr	r1, [sp, #16]
      18:	add	ip, sp, #20
      1c:	mov	r2, ip
      20:	ldr	r0, [r3]
      24:	str	ip, [sp, #4]
      28:	bl	0 <vfprintf>
      2c:	add	sp, sp, #12
      30:	pop	{lr}		; (ldr lr, [sp], #4)
      34:	add	sp, sp, #16
      38:	bx	lr

0000003c <indent>:
      3c:	strd	r4, [sp, #-16]!
      40:	movw	r5, #0
      44:	movt	r5, #0
      48:	ldr	r4, [r5, #4]
      4c:	str	r6, [sp, #8]
      50:	str	lr, [sp, #12]
      54:	cmp	r4, #0
      58:	blt	94 <indent+0x58>
      5c:	beq	84 <indent+0x48>
      60:	movw	r6, #0
      64:	movt	r6, #0
      68:	mov	r2, #2
      6c:	mov	r1, #1
      70:	ldr	r3, [r5]
      74:	mov	r0, r6
      78:	bl	0 <fwrite>
      7c:	subs	r4, r4, #1
      80:	bne	68 <indent+0x2c>
      84:	ldrd	r4, [sp]
      88:	ldr	r6, [sp, #8]
      8c:	add	sp, sp, #12
      90:	pop	{pc}		; (ldr pc, [sp], #4)
      94:	movw	r3, #0
      98:	movt	r3, #0
      9c:	movw	r1, #0
      a0:	movt	r1, #0
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	mov	r2, #68	; 0x44
      b0:	bl	0 <__assert_fail>

000000b4 <fic_printf>:
      b4:	push	{r1, r2, r3}
      b8:	ldr	r3, [r0]
      bc:	strd	r4, [sp, #-12]!
      c0:	str	lr, [sp, #8]
      c4:	sub	sp, sp, #8
      c8:	cmp	r3, #0
      cc:	beq	10c <fic_printf+0x58>
      d0:	movw	r4, #0
      d4:	movt	r4, #0
      d8:	bl	3c <indent>
      dc:	ldr	r1, [sp, #20]
      e0:	add	r3, sp, #24
      e4:	mov	r2, r3
      e8:	ldr	r0, [r4]
      ec:	str	r3, [sp, #4]
      f0:	bl	0 <vfprintf>
      f4:	add	sp, sp, #8
      f8:	ldrd	r4, [sp]
      fc:	ldr	lr, [sp, #8]
     100:	add	sp, sp, #12
     104:	add	sp, sp, #12
     108:	bx	lr
     10c:	mov	r5, r0
     110:	movw	r4, #0
     114:	movt	r4, #0
     118:	movw	r0, #0
     11c:	movt	r0, #0
     120:	bl	0 <ff_printf>
     124:	ldr	r3, [r4, #4]
     128:	mov	r2, #1
     12c:	str	r2, [r5]
     130:	add	r3, r3, r2
     134:	str	r3, [r4, #4]
     138:	b	d8 <fic_printf+0x24>

0000013c <fi_printf>:
     13c:	push	{r0, r1, r2, r3}
     140:	push	{lr}		; (str lr, [sp, #-4]!)
     144:	sub	sp, sp, #12
     148:	bl	3c <indent>
     14c:	ldr	r1, [sp, #16]
     150:	add	ip, sp, #20
     154:	movw	r3, #0
     158:	movt	r3, #0
     15c:	mov	r2, ip
     160:	ldr	r0, [r3]
     164:	str	ip, [sp, #4]
     168:	bl	0 <vfprintf>
     16c:	add	sp, sp, #12
     170:	pop	{lr}		; (ldr lr, [sp], #4)
     174:	add	sp, sp, #16
     178:	bx	lr

0000017c <generate_escaped_string.part.2>:
     17c:	cmp	r1, #0
     180:	strd	r4, [sp, #-32]!	; 0xffffffe0
     184:	mov	r4, r0
     188:	strd	r6, [sp, #8]
     18c:	strd	r8, [sp, #16]
     190:	str	sl, [sp, #24]
     194:	str	lr, [sp, #28]
     198:	bge	1a4 <generate_escaped_string.part.2+0x28>
     19c:	bl	0 <strlen>
     1a0:	mov	r1, r0
     1a4:	cmp	r1, #0
     1a8:	beq	34c <generate_escaped_string.part.2+0x1d0>
     1ac:	sub	r4, r4, #1
     1b0:	movw	r9, #0
     1b4:	movt	r9, #0
     1b8:	movw	r8, #0
     1bc:	movt	r8, #0
     1c0:	movw	r7, #0
     1c4:	movt	r7, #0
     1c8:	add	r6, r4, r1
     1cc:	ldrb	r5, [r4, #1]!
     1d0:	sub	r3, r5, #7
     1d4:	cmp	r3, #85	; 0x55
     1d8:	ldrls	pc, [pc, r3, lsl #2]
     1dc:	b	430 <generate_escaped_string.part.2+0x2b4>
     1e0:	.word	0x00000420
     1e4:	.word	0x00000410
     1e8:	.word	0x00000400
     1ec:	.word	0x000003f0
     1f0:	.word	0x000003e0
     1f4:	.word	0x000003d0
     1f8:	.word	0x000003c0
     1fc:	.word	0x00000430
     200:	.word	0x00000430
     204:	.word	0x00000430
     208:	.word	0x00000430
     20c:	.word	0x00000430
     210:	.word	0x00000430
     214:	.word	0x00000430
     218:	.word	0x00000430
     21c:	.word	0x00000430
     220:	.word	0x00000430
     224:	.word	0x00000430
     228:	.word	0x00000430
     22c:	.word	0x00000430
     230:	.word	0x000003b0
     234:	.word	0x00000430
     238:	.word	0x00000430
     23c:	.word	0x00000430
     240:	.word	0x00000430
     244:	.word	0x000003a4
     248:	.word	0x00000430
     24c:	.word	0x00000394
     250:	.word	0x00000430
     254:	.word	0x00000430
     258:	.word	0x00000430
     25c:	.word	0x00000384
     260:	.word	0x00000430
     264:	.word	0x00000430
     268:	.word	0x00000430
     26c:	.word	0x00000430
     270:	.word	0x00000430
     274:	.word	0x00000430
     278:	.word	0x00000430
     27c:	.word	0x00000430
     280:	.word	0x00000430
     284:	.word	0x00000430
     288:	.word	0x00000430
     28c:	.word	0x00000430
     290:	.word	0x00000430
     294:	.word	0x00000430
     298:	.word	0x00000430
     29c:	.word	0x00000430
     2a0:	.word	0x00000430
     2a4:	.word	0x00000430
     2a8:	.word	0x00000430
     2ac:	.word	0x00000430
     2b0:	.word	0x00000430
     2b4:	.word	0x00000374
     2b8:	.word	0x00000430
     2bc:	.word	0x00000364
     2c0:	.word	0x00000430
     2c4:	.word	0x00000430
     2c8:	.word	0x00000430
     2cc:	.word	0x00000430
     2d0:	.word	0x00000430
     2d4:	.word	0x00000430
     2d8:	.word	0x00000430
     2dc:	.word	0x00000430
     2e0:	.word	0x00000430
     2e4:	.word	0x00000430
     2e8:	.word	0x00000430
     2ec:	.word	0x00000430
     2f0:	.word	0x00000430
     2f4:	.word	0x00000430
     2f8:	.word	0x00000430
     2fc:	.word	0x00000430
     300:	.word	0x00000430
     304:	.word	0x00000430
     308:	.word	0x00000430
     30c:	.word	0x00000430
     310:	.word	0x00000430
     314:	.word	0x00000430
     318:	.word	0x00000430
     31c:	.word	0x00000430
     320:	.word	0x00000430
     324:	.word	0x00000430
     328:	.word	0x00000430
     32c:	.word	0x00000430
     330:	.word	0x00000430
     334:	.word	0x00000338
     338:	movw	r0, #0
     33c:	movt	r0, #0
     340:	bl	0 <ff_printf>
     344:	cmp	r4, r6
     348:	bne	1cc <generate_escaped_string.part.2+0x50>
     34c:	ldrd	r4, [sp]
     350:	ldrd	r6, [sp, #8]
     354:	ldrd	r8, [sp, #16]
     358:	ldr	sl, [sp, #24]
     35c:	add	sp, sp, #28
     360:	pop	{pc}		; (ldr pc, [sp], #4)
     364:	movw	r0, #0
     368:	movt	r0, #0
     36c:	bl	0 <ff_printf>
     370:	b	344 <generate_escaped_string.part.2+0x1c8>
     374:	movw	r0, #0
     378:	movt	r0, #0
     37c:	bl	0 <ff_printf>
     380:	b	344 <generate_escaped_string.part.2+0x1c8>
     384:	movw	r0, #0
     388:	movt	r0, #0
     38c:	bl	0 <ff_printf>
     390:	b	344 <generate_escaped_string.part.2+0x1c8>
     394:	movw	r0, #0
     398:	movt	r0, #0
     39c:	bl	0 <ff_printf>
     3a0:	b	344 <generate_escaped_string.part.2+0x1c8>
     3a4:	mov	r0, r7
     3a8:	bl	0 <ff_printf>
     3ac:	b	344 <generate_escaped_string.part.2+0x1c8>
     3b0:	movw	r0, #0
     3b4:	movt	r0, #0
     3b8:	bl	0 <ff_printf>
     3bc:	b	344 <generate_escaped_string.part.2+0x1c8>
     3c0:	movw	r0, #0
     3c4:	movt	r0, #0
     3c8:	bl	0 <ff_printf>
     3cc:	b	344 <generate_escaped_string.part.2+0x1c8>
     3d0:	movw	r0, #0
     3d4:	movt	r0, #0
     3d8:	bl	0 <ff_printf>
     3dc:	b	344 <generate_escaped_string.part.2+0x1c8>
     3e0:	movw	r0, #0
     3e4:	movt	r0, #0
     3e8:	bl	0 <ff_printf>
     3ec:	b	344 <generate_escaped_string.part.2+0x1c8>
     3f0:	movw	r0, #0
     3f4:	movt	r0, #0
     3f8:	bl	0 <ff_printf>
     3fc:	b	344 <generate_escaped_string.part.2+0x1c8>
     400:	movw	r0, #0
     404:	movt	r0, #0
     408:	bl	0 <ff_printf>
     40c:	b	344 <generate_escaped_string.part.2+0x1c8>
     410:	movw	r0, #0
     414:	movt	r0, #0
     418:	bl	0 <ff_printf>
     41c:	b	344 <generate_escaped_string.part.2+0x1c8>
     420:	movw	r0, #0
     424:	movt	r0, #0
     428:	bl	0 <ff_printf>
     42c:	b	344 <generate_escaped_string.part.2+0x1c8>
     430:	bl	0 <__ctype_b_loc>
     434:	ldr	r2, [r0]
     438:	lsl	r3, r5, #1
     43c:	mov	r1, r5
     440:	ldrh	r3, [r2, r3]
     444:	tst	r3, #16384	; 0x4000
     448:	moveq	r0, r8
     44c:	movne	r0, r9
     450:	bl	0 <ff_printf>
     454:	b	344 <generate_escaped_string.part.2+0x1c8>

00000458 <generate_xml_string.part.1.constprop.3>:
     458:	strd	r4, [sp, #-24]!	; 0xffffffe8
     45c:	mov	r4, r0
     460:	strd	r6, [sp, #8]
     464:	str	r8, [sp, #16]
     468:	str	lr, [sp, #20]
     46c:	bl	0 <strlen>
     470:	cmp	r0, #0
     474:	beq	4dc <generate_xml_string.part.1.constprop.3+0x84>
     478:	sub	r4, r4, #1
     47c:	movw	r8, #0
     480:	movt	r8, #0
     484:	movw	r7, #0
     488:	movt	r7, #0
     48c:	movw	r6, #0
     490:	movt	r6, #0
     494:	add	r5, r4, r0
     498:	b	4b0 <generate_xml_string.part.1.constprop.3+0x58>
     49c:	cmp	r3, #38	; 0x26
     4a0:	beq	4fc <generate_xml_string.part.1.constprop.3+0xa4>
     4a4:	bl	0 <ff_printf>
     4a8:	cmp	r4, r5
     4ac:	beq	4dc <generate_xml_string.part.1.constprop.3+0x84>
     4b0:	ldrb	r3, [r4, #1]!
     4b4:	cmp	r3, #60	; 0x3c
     4b8:	beq	4f0 <generate_xml_string.part.1.constprop.3+0x98>
     4bc:	cmp	r3, #62	; 0x3e
     4c0:	mov	r1, r3
     4c4:	mov	r0, r6
     4c8:	bne	49c <generate_xml_string.part.1.constprop.3+0x44>
     4cc:	mov	r0, r7
     4d0:	bl	0 <ff_printf>
     4d4:	cmp	r4, r5
     4d8:	bne	4b0 <generate_xml_string.part.1.constprop.3+0x58>
     4dc:	ldrd	r4, [sp]
     4e0:	ldrd	r6, [sp, #8]
     4e4:	ldr	r8, [sp, #16]
     4e8:	add	sp, sp, #20
     4ec:	pop	{pc}		; (ldr pc, [sp], #4)
     4f0:	mov	r0, r8
     4f4:	bl	0 <ff_printf>
     4f8:	b	4a8 <generate_xml_string.part.1.constprop.3+0x50>
     4fc:	movw	r0, #0
     500:	movt	r0, #0
     504:	bl	0 <ff_printf>
     508:	b	4a8 <generate_xml_string.part.1.constprop.3+0x50>

0000050c <generate_type>:
     50c:	mov	r3, #0
     510:	strd	r4, [sp, #-36]!	; 0xffffffdc
     514:	mov	r5, r0
     518:	strd	r6, [sp, #8]
     51c:	mov	r4, r1
     520:	strd	r8, [sp, #16]
     524:	strd	sl, [sp, #24]
     528:	str	lr, [sp, #32]
     52c:	sub	sp, sp, #76	; 0x4c
     530:	add	r1, sp, #16
     534:	str	r3, [sp, #20]
     538:	str	r3, [sp, #36]	; 0x24
     53c:	str	r3, [sp, #40]	; 0x28
     540:	bl	0 <coda_type_get_class>
     544:	add	r1, sp, #24
     548:	mov	r0, r5
     54c:	bl	0 <coda_type_get_format>
     550:	add	r1, sp, #28
     554:	mov	r0, r5
     558:	bl	0 <coda_type_get_description>
     55c:	mov	r0, r5
     560:	add	r1, sp, #32
     564:	bl	0 <coda_type_get_attributes>
     568:	ldr	r3, [sp, #16]
     56c:	cmp	r3, #6
     570:	ldrls	pc, [pc, r3, lsl #2]
     574:	b	1150 <generate_type+0xc44>
     578:	.word	0x00000bec
     57c:	.word	0x00000c18
     580:	.word	0x00000c24
     584:	.word	0x00000594
     588:	.word	0x00000b90
     58c:	.word	0x00000bb4
     590:	.word	0x00000bc0
     594:	movw	r9, #0
     598:	movt	r9, #0
     59c:	movw	r0, #0
     5a0:	movt	r0, #0
     5a4:	mov	r1, r9
     5a8:	bl	13c <fi_printf>
     5ac:	ldr	r0, [sp, #24]
     5b0:	cmp	r0, r4
     5b4:	beq	5cc <generate_type+0xc0>
     5b8:	bl	0 <coda_type_get_format_name>
     5bc:	mov	r1, r0
     5c0:	movw	r0, #0
     5c4:	movt	r0, #0
     5c8:	bl	0 <ff_printf>
     5cc:	ldr	r3, [sp, #16]
     5d0:	cmp	r3, #6
     5d4:	beq	e7c <generate_type+0x970>
     5d8:	ldr	r3, [sp, #28]
     5dc:	cmp	r3, #0
     5e0:	beq	610 <generate_type+0x104>
     5e4:	movw	r1, #0
     5e8:	movt	r1, #0
     5ec:	add	r0, sp, #36	; 0x24
     5f0:	bl	b4 <fic_printf>
     5f4:	ldr	r0, [sp, #28]
     5f8:	cmp	r0, #0
     5fc:	beq	604 <generate_type+0xf8>
     600:	bl	458 <generate_xml_string.part.1.constprop.3>
     604:	movw	r0, #0
     608:	movt	r0, #0
     60c:	bl	0 <ff_printf>
     610:	ldr	r3, [sp, #16]
     614:	ldr	r2, [sp, #24]
     618:	cmp	r2, #1
     61c:	bls	e0c <generate_type+0x900>
     620:	cmp	r3, #0
     624:	bne	678 <generate_type+0x16c>
     628:	ldr	r3, [r5, #32]
     62c:	cmp	r3, #0
     630:	beq	c30 <generate_type+0x724>
     634:	ldrd	r2, [r5, #24]
     638:	mvn	r1, #0
     63c:	mvn	r0, #7
     640:	cmp	r3, r1
     644:	cmpeq	r2, r0
     648:	beq	1134 <generate_type+0xc28>
     64c:	movw	r1, #0
     650:	movt	r1, #0
     654:	add	r0, sp, #36	; 0x24
     658:	bl	b4 <fic_printf>
     65c:	movw	r1, #0
     660:	movt	r1, #0
     664:	ldr	r0, [r5, #32]
     668:	bl	0 <coda_expression_print_xml>
     66c:	movw	r0, #0
     670:	movt	r0, #0
     674:	bl	0 <ff_printf>
     678:	ldr	r3, [r5, #36]	; 0x24
     67c:	cmp	r3, #0
     680:	beq	78c <generate_type+0x280>
     684:	ldr	r2, [r3, #48]	; 0x30
     688:	cmp	r2, #0
     68c:	ble	78c <generate_type+0x280>
     690:	movw	r6, #0
     694:	movt	r6, #0
     698:	movw	sl, #0
     69c:	movt	sl, #0
     6a0:	movw	fp, #0
     6a4:	movt	fp, #0
     6a8:	movw	r2, #0
     6ac:	movt	r2, #0
     6b0:	mov	r7, #0
     6b4:	add	r8, sp, #36	; 0x24
     6b8:	str	r2, [sp, #12]
     6bc:	ldr	r3, [r3, #52]	; 0x34
     6c0:	mov	r1, sl
     6c4:	mov	r0, r8
     6c8:	ldr	r4, [r3, r7, lsl #2]
     6cc:	ldr	r2, [r4]
     6d0:	bl	b4 <fic_printf>
     6d4:	ldr	r0, [r4, #4]
     6d8:	cmp	r0, #0
     6dc:	beq	6f0 <generate_type+0x1e4>
     6e0:	ldr	r1, [r4]
     6e4:	bl	0 <strcmp>
     6e8:	cmp	r0, #0
     6ec:	bne	de8 <generate_type+0x8dc>
     6f0:	movw	r0, #0
     6f4:	movt	r0, #0
     6f8:	bl	0 <ff_printf>
     6fc:	ldr	r3, [r6, #4]
     700:	ldr	r0, [r4, #8]
     704:	ldr	r1, [sp, #24]
     708:	add	r3, r3, #1
     70c:	str	r3, [r6, #4]
     710:	bl	50c <generate_type>
     714:	ldr	r3, [r4, #12]
     718:	cmp	r3, #0
     71c:	bne	dd8 <generate_type+0x8cc>
     720:	ldrb	r3, [r4, #16]
     724:	cmp	r3, #0
     728:	beq	760 <generate_type+0x254>
     72c:	ldr	r3, [r4, #20]
     730:	cmp	r3, #0
     734:	beq	e6c <generate_type+0x960>
     738:	movw	r0, #0
     73c:	movt	r0, #0
     740:	bl	13c <fi_printf>
     744:	movw	r1, #0
     748:	movt	r1, #0
     74c:	ldr	r0, [r4, #20]
     750:	bl	0 <coda_expression_print_xml>
     754:	movw	r0, #0
     758:	movt	r0, #0
     75c:	bl	0 <ff_printf>
     760:	ldr	r3, [r6, #4]
     764:	movw	r0, #0
     768:	movt	r0, #0
     76c:	add	r7, r7, #1
     770:	sub	r3, r3, #1
     774:	str	r3, [r6, #4]
     778:	bl	13c <fi_printf>
     77c:	ldr	r3, [r5, #36]	; 0x24
     780:	ldr	r2, [r3, #48]	; 0x30
     784:	cmp	r2, r7
     788:	bgt	6bc <generate_type+0x1b0>
     78c:	ldr	r3, [sp, #16]
     790:	cmp	r3, #6
     794:	ldrls	pc, [pc, r3, lsl #2]
     798:	b	7dc <generate_type+0x2d0>
     79c:	.word	0x00000c3c
     7a0:	.word	0x00000ac4
     7a4:	.word	0x000008d8
     7a8:	.word	0x000008d8
     7ac:	.word	0x00000828
     7b0:	.word	0x000008a4
     7b4:	.word	0x000007b8
     7b8:	ldr	r3, [sp, #20]
     7bc:	cmp	r3, #1
     7c0:	beq	101c <generate_type+0xb10>
     7c4:	ldr	r3, [sp, #36]	; 0x24
     7c8:	cmp	r3, #0
     7cc:	beq	1080 <generate_type+0xb74>
     7d0:	ldr	r1, [sp, #24]
     7d4:	ldr	r0, [r5, #44]	; 0x2c
     7d8:	bl	50c <generate_type>
     7dc:	ldr	r3, [sp, #36]	; 0x24
     7e0:	cmp	r3, #0
     7e4:	beq	894 <generate_type+0x388>
     7e8:	movw	r3, #0
     7ec:	movt	r3, #0
     7f0:	ldr	r2, [r3, #4]
     7f4:	movw	r0, #0
     7f8:	movt	r0, #0
     7fc:	mov	r1, r9
     800:	sub	r2, r2, #1
     804:	str	r2, [r3, #4]
     808:	bl	13c <fi_printf>
     80c:	add	sp, sp, #76	; 0x4c
     810:	ldrd	r4, [sp]
     814:	ldrd	r6, [sp, #8]
     818:	ldrd	r8, [sp, #16]
     81c:	ldrd	sl, [sp, #24]
     820:	add	sp, sp, #32
     824:	pop	{pc}		; (ldr pc, [sp], #4)
     828:	ldr	r0, [r5, #12]
     82c:	cmp	r0, #11
     830:	beq	84c <generate_type+0x340>
     834:	bl	0 <coda_type_get_native_type_name>
     838:	mov	r2, r0
     83c:	movw	r1, #0
     840:	movt	r1, #0
     844:	add	r0, sp, #36	; 0x24
     848:	bl	b4 <fic_printf>
     84c:	ldr	r3, [r5, #40]	; 0x28
     850:	cmp	r3, #0
     854:	beq	7dc <generate_type+0x2d0>
     858:	movw	r1, #0
     85c:	movt	r1, #0
     860:	add	r0, sp, #36	; 0x24
     864:	bl	b4 <fic_printf>
     868:	ldr	r0, [r5, #40]	; 0x28
     86c:	cmp	r0, #0
     870:	beq	87c <generate_type+0x370>
     874:	mvn	r1, #0
     878:	bl	17c <generate_escaped_string.part.2>
     87c:	movw	r0, #0
     880:	movt	r0, #0
     884:	bl	0 <ff_printf>
     888:	ldr	r3, [sp, #36]	; 0x24
     88c:	cmp	r3, #0
     890:	bne	7e8 <generate_type+0x2dc>
     894:	movw	r0, #0
     898:	movt	r0, #0
     89c:	bl	0 <ff_printf>
     8a0:	b	80c <generate_type+0x300>
     8a4:	ldr	r3, [r5, #44]	; 0x2c
     8a8:	cmp	r3, #0
     8ac:	beq	7dc <generate_type+0x2d0>
     8b0:	movw	r1, #0
     8b4:	movt	r1, #0
     8b8:	add	r0, sp, #36	; 0x24
     8bc:	bl	b4 <fic_printf>
     8c0:	ldr	r1, [r5, #40]	; 0x28
     8c4:	ldr	r0, [r5, #44]	; 0x2c
     8c8:	cmp	r0, #0
     8cc:	cmpne	r1, #0
     8d0:	bne	878 <generate_type+0x36c>
     8d4:	b	87c <generate_type+0x370>
     8d8:	ldr	r0, [r5, #12]
     8dc:	bl	0 <coda_type_get_native_type_name>
     8e0:	mov	r2, r0
     8e4:	movw	r1, #0
     8e8:	movt	r1, #0
     8ec:	add	r0, sp, #36	; 0x24
     8f0:	bl	b4 <fic_printf>
     8f4:	ldr	r3, [r5, #40]	; 0x28
     8f8:	cmp	r3, #0
     8fc:	beq	928 <generate_type+0x41c>
     900:	movw	r0, #0
     904:	movt	r0, #0
     908:	bl	13c <fi_printf>
     90c:	ldr	r0, [r5, #40]	; 0x28
     910:	cmp	r0, #0
     914:	beq	91c <generate_type+0x410>
     918:	bl	458 <generate_xml_string.part.1.constprop.3>
     91c:	movw	r0, #0
     920:	movt	r0, #0
     924:	bl	0 <ff_printf>
     928:	ldr	r3, [r5, #44]	; 0x2c
     92c:	cmp	r3, #1
     930:	beq	10ac <generate_type+0xba0>
     934:	ldr	r3, [r5, #48]	; 0x30
     938:	cmp	r3, #0
     93c:	beq	9f8 <generate_type+0x4ec>
     940:	ldrd	sl, [r3]
     944:	movw	r0, #0
     948:	movt	r0, #0
     94c:	ldrd	r6, [r3, #8]
     950:	mov	r2, sl
     954:	mov	r3, fp
     958:	strd	r6, [sp]
     95c:	bl	13c <fi_printf>
     960:	ldr	r3, [r5, #48]	; 0x30
     964:	vldr	d7, [r3, #16]
     968:	vcmp.f64	d7, #0.0
     96c:	vmrs	APSR_nzcv, fpscr
     970:	bne	10d4 <generate_type+0xbc8>
     974:	vldr	d0, [r3, #24]
     978:	bl	0 <coda_isNaN>
     97c:	cmp	r0, #0
     980:	beq	10bc <generate_type+0xbb0>
     984:	ldr	r3, [r5, #48]	; 0x30
     988:	ldr	r3, [r3, #32]
     98c:	cmp	r3, #0
     990:	beq	10ec <generate_type+0xbe0>
     994:	movw	r0, #0
     998:	movt	r0, #0
     99c:	movw	r6, #0
     9a0:	movt	r6, #0
     9a4:	bl	0 <ff_printf>
     9a8:	ldr	r3, [r6, #4]
     9ac:	movw	r0, #0
     9b0:	movt	r0, #0
     9b4:	add	r3, r3, #1
     9b8:	str	r3, [r6, #4]
     9bc:	bl	13c <fi_printf>
     9c0:	ldr	r3, [r5, #48]	; 0x30
     9c4:	ldr	r0, [r3, #32]
     9c8:	cmp	r0, #0
     9cc:	beq	9d4 <generate_type+0x4c8>
     9d0:	bl	458 <generate_xml_string.part.1.constprop.3>
     9d4:	movw	r0, #0
     9d8:	movt	r0, #0
     9dc:	bl	0 <ff_printf>
     9e0:	ldr	r3, [r6, #4]
     9e4:	movw	r0, #0
     9e8:	movt	r0, #0
     9ec:	sub	r3, r3, #1
     9f0:	str	r3, [r6, #4]
     9f4:	bl	13c <fi_printf>
     9f8:	ldr	r3, [r5, #52]	; 0x34
     9fc:	cmp	r3, #0
     a00:	beq	7dc <generate_type+0x2d0>
     a04:	ldr	r2, [r3, #8]
     a08:	cmp	r2, #0
     a0c:	ble	7dc <generate_type+0x2d0>
     a10:	movw	sl, #0
     a14:	movt	sl, #0
     a18:	movw	r8, #0
     a1c:	movt	r8, #0
     a20:	movw	fp, #0
     a24:	movt	fp, #0
     a28:	mov	r4, #0
     a2c:	add	r7, sp, #48	; 0x30
     a30:	b	a6c <generate_type+0x560>
     a34:	mov	r0, r7
     a38:	vldr	d0, [r6, #8]
     a3c:	bl	0 <coda_strfl>
     a40:	mov	r1, r7
     a44:	mov	r0, fp
     a48:	bl	0 <ff_printf>
     a4c:	movw	r0, #0
     a50:	movt	r0, #0
     a54:	bl	0 <ff_printf>
     a58:	ldr	r3, [r5, #52]	; 0x34
     a5c:	add	r4, r4, #1
     a60:	ldr	r2, [r3, #8]
     a64:	cmp	r2, r4
     a68:	ble	7dc <generate_type+0x2d0>
     a6c:	ldr	r3, [r3, #12]
     a70:	mov	r0, sl
     a74:	ldr	r6, [r3, r4, lsl #2]
     a78:	bl	13c <fi_printf>
     a7c:	ldr	r1, [r6]
     a80:	ldr	r0, [r6, #4]
     a84:	cmp	r0, #0
     a88:	cmpne	r1, #0
     a8c:	beq	a94 <generate_type+0x588>
     a90:	bl	17c <generate_escaped_string.part.2>
     a94:	mov	r0, r8
     a98:	bl	0 <ff_printf>
     a9c:	ldr	r3, [sp, #16]
     aa0:	cmp	r3, #2
     aa4:	bne	a34 <generate_type+0x528>
     aa8:	mov	r2, r7
     aac:	ldrd	r0, [r6, #8]
     ab0:	bl	0 <coda_str64>
     ab4:	mov	r1, r7
     ab8:	mov	r0, fp
     abc:	bl	0 <ff_printf>
     ac0:	b	a4c <generate_type+0x540>
     ac4:	ldr	r3, [r5, #48]	; 0x30
     ac8:	cmp	r3, #0
     acc:	ble	b74 <generate_type+0x668>
     ad0:	movw	fp, #0
     ad4:	movt	fp, #0
     ad8:	movw	sl, #0
     adc:	movt	sl, #0
     ae0:	movw	r7, #0
     ae4:	movt	r7, #0
     ae8:	add	r6, r5, #52	; 0x34
     aec:	mov	r4, #0
     af0:	add	r8, sp, #36	; 0x24
     af4:	b	b38 <generate_type+0x62c>
     af8:	ldr	r3, [r6, #28]
     afc:	cmp	r3, #0
     b00:	beq	ed0 <generate_type+0x9c4>
     b04:	mov	r1, sl
     b08:	mov	r0, r8
     b0c:	bl	b4 <fic_printf>
     b10:	mov	r1, r7
     b14:	ldr	r0, [r6, #28]
     b18:	bl	0 <coda_expression_print_xml>
     b1c:	movw	r0, #0
     b20:	movt	r0, #0
     b24:	bl	0 <ff_printf>
     b28:	ldr	r3, [r5, #48]	; 0x30
     b2c:	add	r4, r4, #1
     b30:	cmp	r3, r4
     b34:	ble	b74 <generate_type+0x668>
     b38:	ldr	r0, [r6], #4
     b3c:	cmp	r0, #0
     b40:	blt	af8 <generate_type+0x5ec>
     b44:	asr	r1, r0, #31
     b48:	add	r2, sp, #48	; 0x30
     b4c:	add	r4, r4, #1
     b50:	bl	0 <coda_str64>
     b54:	add	r2, sp, #48	; 0x30
     b58:	movw	r1, #0
     b5c:	movt	r1, #0
     b60:	mov	r0, r8
     b64:	bl	b4 <fic_printf>
     b68:	ldr	r3, [r5, #48]	; 0x30
     b6c:	cmp	r3, r4
     b70:	bgt	b38 <generate_type+0x62c>
     b74:	ldr	r3, [sp, #36]	; 0x24
     b78:	cmp	r3, #0
     b7c:	beq	1054 <generate_type+0xb48>
     b80:	ldr	r1, [sp, #24]
     b84:	ldr	r0, [r5, #40]	; 0x28
     b88:	bl	50c <generate_type>
     b8c:	b	7dc <generate_type+0x2d0>
     b90:	ldr	r3, [r5, #44]	; 0x2c
     b94:	cmp	r3, #4
     b98:	ldrls	pc, [pc, r3, lsl #2]
     b9c:	b	1150 <generate_type+0xc44>
     ba0:	.word	0x00000ff8
     ba4:	.word	0x00000fec
     ba8:	.word	0x000010fc
     bac:	.word	0x00001004
     bb0:	.word	0x00001010
     bb4:	movw	r9, #0
     bb8:	movt	r9, #0
     bbc:	b	59c <generate_type+0x90>
     bc0:	add	r1, sp, #20
     bc4:	mov	r0, r5
     bc8:	bl	0 <coda_type_get_special_type>
     bcc:	ldr	r3, [sp, #20]
     bd0:	cmp	r3, #3
     bd4:	ldrls	pc, [pc, r3, lsl #2]
     bd8:	b	1150 <generate_type+0xc44>
     bdc:	.word	0x00001118
     be0:	.word	0x00000fd4
     be4:	.word	0x00000fc8
     be8:	.word	0x00000fe0
     bec:	add	r1, sp, #40	; 0x28
     bf0:	mov	r0, r5
     bf4:	bl	0 <coda_type_get_record_union_status>
     bf8:	ldr	r2, [sp, #40]	; 0x28
     bfc:	movw	r3, #0
     c00:	movt	r3, #0
     c04:	movw	r9, #0
     c08:	movt	r9, #0
     c0c:	cmp	r2, #0
     c10:	moveq	r9, r3
     c14:	b	59c <generate_type+0x90>
     c18:	movw	r9, #0
     c1c:	movt	r9, #0
     c20:	b	59c <generate_type+0x90>
     c24:	movw	r9, #0
     c28:	movt	r9, #0
     c2c:	b	59c <generate_type+0x90>
     c30:	ldr	r3, [r5, #36]	; 0x24
     c34:	cmp	r3, #0
     c38:	bne	684 <generate_type+0x178>
     c3c:	ldr	r3, [sp, #40]	; 0x28
     c40:	cmp	r3, #0
     c44:	beq	c80 <generate_type+0x774>
     c48:	ldr	r3, [r5, #68]	; 0x44
     c4c:	cmp	r3, #0
     c50:	beq	c80 <generate_type+0x774>
     c54:	movw	r1, #0
     c58:	movt	r1, #0
     c5c:	add	r0, sp, #36	; 0x24
     c60:	bl	b4 <fic_printf>
     c64:	movw	r1, #0
     c68:	movt	r1, #0
     c6c:	ldr	r0, [r5, #68]	; 0x44
     c70:	bl	0 <coda_expression_print_xml>
     c74:	movw	r0, #0
     c78:	movt	r0, #0
     c7c:	bl	0 <ff_printf>
     c80:	add	r1, sp, #44	; 0x2c
     c84:	mov	r0, r5
     c88:	bl	0 <coda_type_get_num_record_fields>
     c8c:	ldr	r3, [sp, #44]	; 0x2c
     c90:	cmp	r3, #0
     c94:	ble	7dc <generate_type+0x2d0>
     c98:	movw	r6, #0
     c9c:	movt	r6, #0
     ca0:	movw	r7, #0
     ca4:	movt	r7, #0
     ca8:	movw	fp, #0
     cac:	movt	fp, #0
     cb0:	movw	r3, #0
     cb4:	movt	r3, #0
     cb8:	mov	r4, #0
     cbc:	add	r8, sp, #36	; 0x24
     cc0:	str	r3, [sp, #12]
     cc4:	ldr	r3, [r5, #52]	; 0x34
     cc8:	mov	r1, r7
     ccc:	mov	r0, r8
     cd0:	ldr	sl, [r3, r4, lsl #2]
     cd4:	ldr	r2, [sl]
     cd8:	bl	b4 <fic_printf>
     cdc:	ldr	r0, [sl, #4]
     ce0:	cmp	r0, #0
     ce4:	beq	cf8 <generate_type+0x7ec>
     ce8:	ldr	r1, [sl]
     cec:	bl	0 <strcmp>
     cf0:	cmp	r0, #0
     cf4:	bne	ef0 <generate_type+0x9e4>
     cf8:	movw	r0, #0
     cfc:	movt	r0, #0
     d00:	bl	0 <ff_printf>
     d04:	ldr	r2, [r6, #4]
     d08:	ldr	r0, [sl, #8]
     d0c:	ldr	r1, [sp, #24]
     d10:	add	r2, r2, #1
     d14:	str	r2, [r6, #4]
     d18:	bl	50c <generate_type>
     d1c:	ldr	r2, [sl, #12]
     d20:	cmp	r2, #0
     d24:	bne	ee0 <generate_type+0x9d4>
     d28:	ldrb	r2, [sl, #16]
     d2c:	cmp	r2, #0
     d30:	beq	d68 <generate_type+0x85c>
     d34:	ldr	r2, [sl, #20]
     d38:	cmp	r2, #0
     d3c:	beq	f8c <generate_type+0xa80>
     d40:	movw	r0, #0
     d44:	movt	r0, #0
     d48:	bl	13c <fi_printf>
     d4c:	movw	r1, #0
     d50:	movt	r1, #0
     d54:	ldr	r0, [sl, #20]
     d58:	bl	0 <coda_expression_print_xml>
     d5c:	movw	r0, #0
     d60:	movt	r0, #0
     d64:	bl	0 <ff_printf>
     d68:	ldrd	r0, [sl, #24]
     d6c:	cmp	r0, #0
     d70:	sbcs	r3, r1, #0
     d74:	bge	eb4 <generate_type+0x9a8>
     d78:	ldr	r2, [sl, #32]
     d7c:	cmp	r2, #0
     d80:	beq	dac <generate_type+0x8a0>
     d84:	movw	r0, #0
     d88:	movt	r0, #0
     d8c:	bl	13c <fi_printf>
     d90:	movw	r1, #0
     d94:	movt	r1, #0
     d98:	ldr	r0, [sl, #32]
     d9c:	bl	0 <coda_expression_print_xml>
     da0:	movw	r0, #0
     da4:	movt	r0, #0
     da8:	bl	0 <ff_printf>
     dac:	ldr	r3, [r6, #4]
     db0:	movw	r0, #0
     db4:	movt	r0, #0
     db8:	add	r4, r4, #1
     dbc:	sub	r3, r3, #1
     dc0:	str	r3, [r6, #4]
     dc4:	bl	13c <fi_printf>
     dc8:	ldr	r3, [sp, #44]	; 0x2c
     dcc:	cmp	r3, r4
     dd0:	bgt	cc4 <generate_type+0x7b8>
     dd4:	b	7dc <generate_type+0x2d0>
     dd8:	movw	r0, #0
     ddc:	movt	r0, #0
     de0:	bl	13c <fi_printf>
     de4:	b	720 <generate_type+0x214>
     de8:	mov	r0, fp
     dec:	bl	0 <ff_printf>
     df0:	ldr	r0, [r4, #4]
     df4:	cmp	r0, #0
     df8:	beq	e00 <generate_type+0x8f4>
     dfc:	bl	458 <generate_xml_string.part.1.constprop.3>
     e00:	ldr	r0, [sp, #12]
     e04:	bl	0 <ff_printf>
     e08:	b	6f0 <generate_type+0x1e4>
     e0c:	sub	r2, r3, #2
     e10:	cmp	r2, #3
     e14:	bhi	620 <generate_type+0x114>
     e18:	ldrd	r2, [r5, #24]
     e1c:	cmp	r2, #0
     e20:	sbcs	r1, r3, #0
     e24:	blt	f14 <generate_type+0xa08>
     e28:	and	r0, r2, #7
     e2c:	mov	r1, #0
     e30:	orrs	r1, r0, r1
     e34:	bne	f9c <generate_type+0xa90>
     e38:	lsr	r0, r2, #3
     e3c:	add	r7, sp, #48	; 0x30
     e40:	asr	r1, r3, #3
     e44:	mov	r2, r7
     e48:	orr	r0, r0, r3, lsl #29
     e4c:	bl	0 <coda_str64>
     e50:	movw	r1, #0
     e54:	movt	r1, #0
     e58:	mov	r2, r7
     e5c:	add	r0, sp, #36	; 0x24
     e60:	bl	b4 <fic_printf>
     e64:	ldr	r3, [sp, #16]
     e68:	b	620 <generate_type+0x114>
     e6c:	movw	r0, #0
     e70:	movt	r0, #0
     e74:	bl	13c <fi_printf>
     e78:	b	760 <generate_type+0x254>
     e7c:	ldr	r3, [sp, #20]
     e80:	cmp	r3, #2
     e84:	bne	5d8 <generate_type+0xcc>
     e88:	movw	r0, #0
     e8c:	movt	r0, #0
     e90:	bl	0 <ff_printf>
     e94:	movw	r1, #0
     e98:	movt	r1, #0
     e9c:	ldr	r0, [r5, #52]	; 0x34
     ea0:	bl	0 <coda_expression_print_xml>
     ea4:	movw	r0, #0
     ea8:	movt	r0, #0
     eac:	bl	0 <ff_printf>
     eb0:	b	5d8 <generate_type+0xcc>
     eb4:	add	r2, sp, #48	; 0x30
     eb8:	bl	0 <coda_str64>
     ebc:	add	r1, sp, #48	; 0x30
     ec0:	movw	r0, #0
     ec4:	movt	r0, #0
     ec8:	bl	13c <fi_printf>
     ecc:	b	dac <generate_type+0x8a0>
     ed0:	mov	r1, fp
     ed4:	mov	r0, r8
     ed8:	bl	b4 <fic_printf>
     edc:	b	b28 <generate_type+0x61c>
     ee0:	movw	r0, #0
     ee4:	movt	r0, #0
     ee8:	bl	13c <fi_printf>
     eec:	b	d28 <generate_type+0x81c>
     ef0:	mov	r0, fp
     ef4:	bl	0 <ff_printf>
     ef8:	ldr	r0, [sl, #4]
     efc:	cmp	r0, #0
     f00:	beq	f08 <generate_type+0x9fc>
     f04:	bl	458 <generate_xml_string.part.1.constprop.3>
     f08:	ldr	r0, [sp, #12]
     f0c:	bl	0 <ff_printf>
     f10:	b	cf8 <generate_type+0x7ec>
     f14:	ldr	r1, [r5, #32]
     f18:	cmp	r1, #0
     f1c:	beq	678 <generate_type+0x16c>
     f20:	mvn	r7, #0
     f24:	mvn	r6, #7
     f28:	cmp	r3, r7
     f2c:	movw	r8, #0
     f30:	movt	r8, #0
     f34:	cmpeq	r2, r6
     f38:	movw	r4, #0
     f3c:	movt	r4, #0
     f40:	moveq	r2, r8
     f44:	movne	r2, r4
     f48:	add	r0, sp, #36	; 0x24
     f4c:	movw	r1, #0
     f50:	movt	r1, #0
     f54:	bl	b4 <fic_printf>
     f58:	movw	r1, #0
     f5c:	movt	r1, #0
     f60:	ldr	r0, [r5, #32]
     f64:	bl	0 <coda_expression_print_xml>
     f68:	ldrd	r2, [r5, #24]
     f6c:	movw	r0, #0
     f70:	movt	r0, #0
     f74:	cmp	r3, r7
     f78:	cmpeq	r2, r6
     f7c:	moveq	r1, r8
     f80:	movne	r1, r4
     f84:	bl	0 <ff_printf>
     f88:	b	e64 <generate_type+0x958>
     f8c:	movw	r0, #0
     f90:	movt	r0, #0
     f94:	bl	13c <fi_printf>
     f98:	b	d68 <generate_type+0x85c>
     f9c:	add	r7, sp, #48	; 0x30
     fa0:	mov	r0, r2
     fa4:	mov	r1, r3
     fa8:	mov	r2, r7
     fac:	bl	0 <coda_str64>
     fb0:	mov	r2, r7
     fb4:	movw	r1, #0
     fb8:	movt	r1, #0
     fbc:	add	r0, sp, #36	; 0x24
     fc0:	bl	b4 <fic_printf>
     fc4:	b	e64 <generate_type+0x958>
     fc8:	movw	r9, #0
     fcc:	movt	r9, #0
     fd0:	b	59c <generate_type+0x90>
     fd4:	movw	r9, #0
     fd8:	movt	r9, #0
     fdc:	b	59c <generate_type+0x90>
     fe0:	movw	r9, #0
     fe4:	movt	r9, #0
     fe8:	b	59c <generate_type+0x90>
     fec:	movw	r9, #0
     ff0:	movt	r9, #0
     ff4:	b	59c <generate_type+0x90>
     ff8:	movw	r9, #0
     ffc:	movt	r9, #0
    1000:	b	59c <generate_type+0x90>
    1004:	movw	r9, #0
    1008:	movt	r9, #0
    100c:	b	59c <generate_type+0x90>
    1010:	movw	r9, #0
    1014:	movt	r9, #0
    1018:	b	59c <generate_type+0x90>
    101c:	ldr	r3, [r5, #48]	; 0x30
    1020:	cmp	r3, #0
    1024:	beq	7c4 <generate_type+0x2b8>
    1028:	movw	r0, #0
    102c:	movt	r0, #0
    1030:	bl	13c <fi_printf>
    1034:	ldr	r0, [r5, #48]	; 0x30
    1038:	cmp	r0, #0
    103c:	beq	1044 <generate_type+0xb38>
    1040:	bl	458 <generate_xml_string.part.1.constprop.3>
    1044:	movw	r0, #0
    1048:	movt	r0, #0
    104c:	bl	0 <ff_printf>
    1050:	b	7c4 <generate_type+0x2b8>
    1054:	movw	r0, #0
    1058:	movt	r0, #0
    105c:	bl	0 <ff_printf>
    1060:	movw	r3, #0
    1064:	movt	r3, #0
    1068:	ldr	r2, [r3, #4]
    106c:	mov	r1, #1
    1070:	str	r1, [sp, #36]	; 0x24
    1074:	add	r2, r2, r1
    1078:	str	r2, [r3, #4]
    107c:	b	b80 <generate_type+0x674>
    1080:	movw	r0, #0
    1084:	movt	r0, #0
    1088:	bl	0 <ff_printf>
    108c:	movw	r3, #0
    1090:	movt	r3, #0
    1094:	ldr	r2, [r3, #4]
    1098:	mov	r1, #1
    109c:	str	r1, [sp, #36]	; 0x24
    10a0:	add	r2, r2, r1
    10a4:	str	r2, [r3, #4]
    10a8:	b	7d0 <generate_type+0x2c4>
    10ac:	movw	r0, #0
    10b0:	movt	r0, #0
    10b4:	bl	13c <fi_printf>
    10b8:	b	934 <generate_type+0x428>
    10bc:	ldr	r3, [r5, #48]	; 0x30
    10c0:	movw	r0, #0
    10c4:	movt	r0, #0
    10c8:	ldrd	r2, [r3, #24]
    10cc:	bl	0 <ff_printf>
    10d0:	b	984 <generate_type+0x478>
    10d4:	vmov	r2, r3, d7
    10d8:	movw	r0, #0
    10dc:	movt	r0, #0
    10e0:	bl	0 <ff_printf>
    10e4:	ldr	r3, [r5, #48]	; 0x30
    10e8:	b	974 <generate_type+0x468>
    10ec:	movw	r0, #0
    10f0:	movt	r0, #0
    10f4:	bl	0 <ff_printf>
    10f8:	b	9f8 <generate_type+0x4ec>
    10fc:	movw	r1, #0
    1100:	movt	r1, #0
    1104:	ldr	r3, [pc, #80]	; 115c <generate_type+0xc50>
    1108:	movw	r0, #0
    110c:	movt	r0, #0
    1110:	movw	r2, #273	; 0x111
    1114:	bl	0 <__assert_fail>
    1118:	movw	r1, #0
    111c:	movt	r1, #0
    1120:	ldr	r3, [pc, #52]	; 115c <generate_type+0xc50>
    1124:	movw	r0, #0
    1128:	movt	r0, #0
    112c:	movw	r2, #301	; 0x12d
    1130:	bl	0 <__assert_fail>
    1134:	movw	r1, #0
    1138:	movt	r1, #0
    113c:	ldr	r3, [pc, #24]	; 115c <generate_type+0xc50>
    1140:	movw	r0, #0
    1144:	movt	r0, #0
    1148:	mov	r2, #352	; 0x160
    114c:	bl	0 <__assert_fail>
    1150:	movw	r9, #0
    1154:	movt	r9, #0
    1158:	b	59c <generate_type+0x90>
    115c:	.word	0x00000008

00001160 <generate_definition>:
    1160:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1164:	mov	r4, r1
    1168:	mov	r5, r0
    116c:	strd	r6, [sp, #8]
    1170:	mov	r0, r1
    1174:	strd	r8, [sp, #16]
    1178:	str	sl, [sp, #24]
    117c:	str	lr, [sp, #28]
    1180:	sub	sp, sp, #32
    1184:	add	r1, sp, #8
    1188:	bl	0 <coda_open>
    118c:	cmp	r0, #0
    1190:	beq	1208 <generate_definition+0xa8>
    1194:	ldr	r3, [pc, #768]	; 149c <generate_definition+0x33c>
    1198:	mrc	15, 0, r6, cr13, cr0, {3}
    119c:	ldr	r3, [pc, r3]
    11a0:	ldr	r0, [r6, r3]
    11a4:	cmn	r0, #21
    11a8:	beq	11e0 <generate_definition+0x80>
    11ac:	movw	r4, #0
    11b0:	movt	r4, #0
    11b4:	ldr	r5, [r4]
    11b8:	bl	0 <coda_errno_to_string>
    11bc:	mov	r2, r0
    11c0:	movw	r1, #0
    11c4:	movt	r1, #0
    11c8:	mov	r0, r5
    11cc:	bl	0 <fprintf>
    11d0:	ldr	r0, [r4]
    11d4:	bl	0 <fflush>
    11d8:	mov	r0, #1
    11dc:	bl	0 <exit>
    11e0:	mov	r0, #0
    11e4:	bl	0 <coda_set_option_use_mmap>
    11e8:	add	r1, sp, #8
    11ec:	mov	r0, r4
    11f0:	bl	0 <coda_open>
    11f4:	mov	r4, r0
    11f8:	mov	r0, #1
    11fc:	bl	0 <coda_set_option_use_mmap>
    1200:	cmp	r4, #0
    1204:	bne	148c <generate_definition+0x32c>
    1208:	movw	r3, #0
    120c:	movt	r3, #0
    1210:	ldr	r3, [r3]
    1214:	movw	r4, #0
    1218:	movt	r4, #0
    121c:	cmp	r5, #0
    1220:	str	r3, [r4]
    1224:	beq	1244 <generate_definition+0xe4>
    1228:	movw	r1, #0
    122c:	movt	r1, #0
    1230:	mov	r0, r5
    1234:	bl	0 <fopen>
    1238:	cmp	r0, #0
    123c:	str	r0, [r4]
    1240:	beq	1470 <generate_definition+0x310>
    1244:	movw	r0, #0
    1248:	movt	r0, #0
    124c:	bl	0 <ff_printf>
    1250:	ldr	r6, [sp, #8]
    1254:	ldr	r3, [r6, #20]
    1258:	ldr	r5, [r6, #24]
    125c:	ldr	r2, [r3]
    1260:	cmp	r2, #99	; 0x63
    1264:	mov	r2, #0
    1268:	bls	1430 <generate_definition+0x2d0>
    126c:	cmp	r5, r2
    1270:	ldr	r7, [r3, #4]
    1274:	str	r2, [sp, #16]
    1278:	ldr	r1, [r6, #16]
    127c:	str	r2, [sp, #20]
    1280:	str	r2, [sp, #24]
    1284:	str	r2, [sp, #27]
    1288:	beq	1460 <generate_definition+0x300>
    128c:	ldr	r8, [r5]
    1290:	ldr	r9, [r5, #8]
    1294:	ldr	r7, [r5, #28]
    1298:	cmp	r7, #0
    129c:	ldreq	r7, [r3, #4]
    12a0:	moveq	r8, r1
    12a4:	mov	r0, #0
    12a8:	bl	0 <time>
    12ac:	str	r0, [sp, #12]
    12b0:	add	r0, sp, #12
    12b4:	bl	0 <localtime>
    12b8:	subs	ip, r0, #0
    12bc:	addeq	sl, sp, #16
    12c0:	beq	12f4 <generate_definition+0x194>
    12c4:	ldr	r3, [ip, #16]
    12c8:	add	sl, sp, #16
    12cc:	movw	r1, #0
    12d0:	movt	r1, #0
    12d4:	mov	r0, sl
    12d8:	ldr	r2, [ip, #20]
    12dc:	ldr	ip, [ip, #12]
    12e0:	add	r3, r3, #1
    12e4:	add	r2, r2, #1888	; 0x760
    12e8:	add	r2, r2, #12
    12ec:	str	ip, [sp]
    12f0:	bl	0 <sprintf>
    12f4:	ldr	r0, [r6, #16]
    12f8:	bl	0 <coda_type_get_format_name>
    12fc:	mov	r2, r0
    1300:	mov	r3, sl
    1304:	mov	r1, r9
    1308:	movw	r0, #0
    130c:	movt	r0, #0
    1310:	bl	13c <fi_printf>
    1314:	ldr	r3, [r4, #4]
    1318:	mov	r1, r8
    131c:	mov	r0, r7
    1320:	add	r3, r3, #1
    1324:	str	r3, [r4, #4]
    1328:	bl	50c <generate_type>
    132c:	cmp	r5, #0
    1330:	beq	13f4 <generate_definition+0x294>
    1334:	ldr	r3, [r5, #32]
    1338:	cmp	r3, #0
    133c:	ble	13f4 <generate_definition+0x294>
    1340:	movw	sl, #0
    1344:	movt	sl, #0
    1348:	movw	r9, #0
    134c:	movt	r9, #0
    1350:	movw	r8, #0
    1354:	movt	r8, #0
    1358:	mov	r7, #0
    135c:	ldr	r3, [r5, #36]	; 0x24
    1360:	mov	r0, sl
    1364:	ldr	r6, [r3, r7, lsl #2]
    1368:	ldr	r1, [r6]
    136c:	bl	13c <fi_printf>
    1370:	ldr	r3, [r4, #4]
    1374:	ldr	r2, [r6, #4]
    1378:	add	r3, r3, #1
    137c:	cmp	r2, #0
    1380:	str	r3, [r4, #4]
    1384:	beq	13a8 <generate_definition+0x248>
    1388:	mov	r0, r9
    138c:	bl	13c <fi_printf>
    1390:	mov	r1, r8
    1394:	ldr	r0, [r6, #4]
    1398:	bl	0 <coda_expression_print_xml>
    139c:	movw	r0, #0
    13a0:	movt	r0, #0
    13a4:	bl	0 <ff_printf>
    13a8:	movw	r0, #0
    13ac:	movt	r0, #0
    13b0:	bl	13c <fi_printf>
    13b4:	mov	r1, r8
    13b8:	ldr	r0, [r6, #8]
    13bc:	add	r7, r7, #1
    13c0:	bl	0 <coda_expression_print_xml>
    13c4:	movw	r0, #0
    13c8:	movt	r0, #0
    13cc:	bl	0 <ff_printf>
    13d0:	ldr	r3, [r4, #4]
    13d4:	movw	r0, #0
    13d8:	movt	r0, #0
    13dc:	sub	r3, r3, #1
    13e0:	str	r3, [r4, #4]
    13e4:	bl	13c <fi_printf>
    13e8:	ldr	r3, [r5, #32]
    13ec:	cmp	r7, r3
    13f0:	blt	135c <generate_definition+0x1fc>
    13f4:	ldr	r3, [r4, #4]
    13f8:	movw	r0, #0
    13fc:	movt	r0, #0
    1400:	sub	r3, r3, #1
    1404:	str	r3, [r4, #4]
    1408:	bl	13c <fi_printf>
    140c:	ldr	r0, [sp, #8]
    1410:	bl	0 <coda_close>
    1414:	add	sp, sp, #32
    1418:	ldrd	r4, [sp]
    141c:	ldrd	r6, [sp, #8]
    1420:	ldrd	r8, [sp, #16]
    1424:	ldr	sl, [sp, #24]
    1428:	add	sp, sp, #28
    142c:	pop	{pc}		; (ldr pc, [sp], #4)
    1430:	cmp	r5, r2
    1434:	str	r2, [sp, #16]
    1438:	ldr	r1, [r6, #16]
    143c:	str	r2, [sp, #20]
    1440:	str	r2, [sp, #24]
    1444:	str	r2, [sp, #27]
    1448:	bne	128c <generate_definition+0x12c>
    144c:	movw	r9, #0
    1450:	movt	r9, #0
    1454:	mov	r8, r1
    1458:	mov	r7, r3
    145c:	b	12a4 <generate_definition+0x144>
    1460:	movw	r9, #0
    1464:	movt	r9, #0
    1468:	mov	r8, r1
    146c:	b	1298 <generate_definition+0x138>
    1470:	movw	r4, #0
    1474:	movt	r4, #0
    1478:	movw	r1, #0
    147c:	movt	r1, #0
    1480:	ldr	r0, [r4]
    1484:	mov	r2, r5
    1488:	b	11cc <generate_definition+0x6c>
    148c:	ldr	r3, [pc, #12]	; 14a0 <generate_definition+0x340>
    1490:	ldr	r3, [pc, r3]
    1494:	ldr	r0, [r6, r3]
    1498:	b	11ac <generate_definition+0x4c>
    149c:	.word	0x000002f8
    14a0:	.word	0x00000008
