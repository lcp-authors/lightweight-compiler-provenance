
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_monster>:
       0:	push	{r4, r5, r6, r7, fp, lr}
       4:	add	fp, sp, #16
       8:	cmp	r0, #0
       c:	beq	84 <verify_monster+0x84>
      10:	ldr	r1, [r0, #4]
      14:	movw	r2, #20301	; 0x4f4d
      18:	movt	r2, #21326	; 0x534e
      1c:	cmp	r1, r2
      20:	bne	84 <verify_monster+0x84>
      24:	ldr	r1, [r0]
      28:	mov	r4, r0
      2c:	ldr	r1, [r4, r1]!
      30:	mov	r5, r4
      34:	ldrh	r6, [r5, -r1]!
      38:	cmp	r6, #9
      3c:	bls	90 <verify_monster+0x90>
      40:	ldrh	r1, [r5, #8]
      44:	cmp	r1, #0
      48:	beq	90 <verify_monster+0x90>
      4c:	add	r1, r4, r1
      50:	ldrh	r1, [r1]
      54:	cmp	r1, #80	; 0x50
      58:	bne	90 <verify_monster+0x90>
      5c:	ldrh	r1, [r5, #4]
      60:	cmp	r1, #0
      64:	beq	a4 <verify_monster+0xa4>
      68:	add	r1, r4, r1
      6c:	sub	r0, r1, r0
      70:	tst	r0, #15
      74:	beq	b0 <verify_monster+0xb0>
      78:	movw	r0, #0
      7c:	movt	r0, #0
      80:	b	98 <verify_monster+0x98>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	b	98 <verify_monster+0x98>
      90:	movw	r0, #0
      94:	movt	r0, #0
      98:	bl	0 <puts>
      9c:	mvn	r0, #0
      a0:	pop	{r4, r5, r6, r7, fp, pc}
      a4:	movw	r0, #0
      a8:	movt	r0, #0
      ac:	b	98 <verify_monster+0x98>
      b0:	vldr	s0, [r1]
      b4:	vmov.f32	s2, #112	; 0x3f800000  1.0
      b8:	vcmp.f32	s0, s2
      bc:	vmrs	APSR_nzcv, fpscr
      c0:	beq	d0 <verify_monster+0xd0>
      c4:	movw	r0, #0
      c8:	movt	r0, #0
      cc:	b	98 <verify_monster+0x98>
      d0:	vldr	s0, [r1, #4]
      d4:	vmov.f32	s2, #0	; 0x40000000  2.0
      d8:	vcmp.f32	s0, s2
      dc:	vmrs	APSR_nzcv, fpscr
      e0:	beq	f0 <verify_monster+0xf0>
      e4:	movw	r0, #0
      e8:	movt	r0, #0
      ec:	b	98 <verify_monster+0x98>
      f0:	vldr	s0, [r1, #8]
      f4:	vmov.f32	s2, #8	; 0x40400000  3.0
      f8:	vcmp.f32	s0, s2
      fc:	vmrs	APSR_nzcv, fpscr
     100:	beq	110 <verify_monster+0x110>
     104:	movw	r0, #0
     108:	movt	r0, #0
     10c:	b	98 <verify_monster+0x98>
     110:	vldr	d16, [r1, #16]
     114:	vmov.f64	d17, #8	; 0x40400000  3.0
     118:	vcmp.f64	d16, d17
     11c:	vmrs	APSR_nzcv, fpscr
     120:	beq	130 <verify_monster+0x130>
     124:	movw	r0, #0
     128:	movt	r0, #0
     12c:	b	98 <verify_monster+0x98>
     130:	ldrb	r0, [r1, #24]
     134:	cmp	r0, #2
     138:	bne	1a0 <verify_monster+0x1a0>
     13c:	ldrh	r0, [r1, #26]
     140:	cmp	r0, #5
     144:	bne	1ac <verify_monster+0x1ac>
     148:	ldrb	r0, [r1, #28]
     14c:	cmp	r0, #6
     150:	bne	1ac <verify_monster+0x1ac>
     154:	cmp	r6, #12
     158:	bcc	5ac <verify_monster+0x5ac>
     15c:	ldrh	r1, [r5, #10]
     160:	cmp	r1, #0
     164:	beq	5ac <verify_monster+0x5ac>
     168:	mov	r0, r4
     16c:	ldr	r1, [r0, r1]!
     170:	ldr	r1, [r0, r1]!
     174:	cmp	r1, #9
     178:	bne	1b8 <verify_monster+0x1b8>
     17c:	movw	r1, #0
     180:	add	r0, r0, #4
     184:	movt	r1, #0
     188:	bl	0 <strcmp>
     18c:	cmp	r0, #0
     190:	beq	1c4 <verify_monster+0x1c4>
     194:	movw	r0, #0
     198:	movt	r0, #0
     19c:	b	98 <verify_monster+0x98>
     1a0:	movw	r0, #0
     1a4:	movt	r0, #0
     1a8:	b	98 <verify_monster+0x98>
     1ac:	movw	r0, #0
     1b0:	movt	r0, #0
     1b4:	b	98 <verify_monster+0x98>
     1b8:	movw	r0, #0
     1bc:	movt	r0, #0
     1c0:	b	98 <verify_monster+0x98>
     1c4:	cmp	r6, #16
     1c8:	bcc	298 <verify_monster+0x298>
     1cc:	ldrh	r1, [r5, #14]
     1d0:	cmp	r1, #0
     1d4:	beq	298 <verify_monster+0x298>
     1d8:	mov	r0, r4
     1dc:	ldr	r1, [r0, r1]!
     1e0:	ldr	r1, [r0, r1]!
     1e4:	cmp	r1, #5
     1e8:	bne	298 <verify_monster+0x298>
     1ec:	add	r0, r0, #4
     1f0:	mov	r1, #0
     1f4:	ldrb	r2, [r0]
     1f8:	cmp	r2, #0
     1fc:	bne	2a4 <verify_monster+0x2a4>
     200:	ldrb	r2, [r0, #1]
     204:	mov	r1, #1
     208:	cmp	r2, #1
     20c:	bne	2a4 <verify_monster+0x2a4>
     210:	ldrb	r2, [r0, #2]
     214:	mov	r1, #2
     218:	cmp	r2, #2
     21c:	bne	2a4 <verify_monster+0x2a4>
     220:	ldrb	r2, [r0, #3]
     224:	mov	r1, #3
     228:	cmp	r2, #3
     22c:	bne	2a4 <verify_monster+0x2a4>
     230:	ldrb	r0, [r0, #4]
     234:	mov	r1, #4
     238:	cmp	r0, #4
     23c:	bne	2a4 <verify_monster+0x2a4>
     240:	cmp	r6, #25
     244:	bls	2b8 <verify_monster+0x2b8>
     248:	ldrh	r1, [r5, #24]
     24c:	cmp	r1, #0
     250:	beq	2b8 <verify_monster+0x2b8>
     254:	mov	r0, r4
     258:	ldr	r1, [r0, r1]!
     25c:	ldr	r1, [r0, r1]!
     260:	cmp	r1, #2
     264:	bne	2c4 <verify_monster+0x2c4>
     268:	add	r7, r0, #4
     26c:	movw	r1, #0
     270:	ldr	r0, [r7]
     274:	movt	r1, #0
     278:	add	r0, r7, r0
     27c:	add	r0, r0, #4
     280:	bl	0 <strcmp>
     284:	cmp	r0, #0
     288:	beq	2d0 <verify_monster+0x2d0>
     28c:	movw	r0, #0
     290:	movt	r0, #0
     294:	b	98 <verify_monster+0x98>
     298:	movw	r0, #0
     29c:	movt	r0, #0
     2a0:	b	98 <verify_monster+0x98>
     2a4:	movw	r0, #0
     2a8:	movt	r0, #0
     2ac:	bl	0 <printf>
     2b0:	mvn	r0, #0
     2b4:	pop	{r4, r5, r6, r7, fp, pc}
     2b8:	movw	r0, #0
     2bc:	movt	r0, #0
     2c0:	b	98 <verify_monster+0x98>
     2c4:	movw	r0, #0
     2c8:	movt	r0, #0
     2cc:	b	98 <verify_monster+0x98>
     2d0:	ldr	r0, [r7, #4]!
     2d4:	movw	r1, #0
     2d8:	movt	r1, #0
     2dc:	add	r0, r7, r0
     2e0:	add	r0, r0, #4
     2e4:	bl	0 <strcmp>
     2e8:	cmp	r0, #0
     2ec:	beq	2fc <verify_monster+0x2fc>
     2f0:	movw	r0, #0
     2f4:	movt	r0, #0
     2f8:	b	98 <verify_monster+0x98>
     2fc:	ldrh	r0, [r5, #18]
     300:	cmp	r0, #0
     304:	beq	374 <verify_monster+0x374>
     308:	ldrb	r0, [r4, r0]
     30c:	cmp	r0, #1
     310:	bne	374 <verify_monster+0x374>
     314:	ldrh	r1, [r5, #20]
     318:	cmp	r1, #0
     31c:	beq	380 <verify_monster+0x380>
     320:	mov	r0, r4
     324:	ldr	r1, [r0, r1]!
     328:	ldr	r2, [r0, r1]!
     32c:	mov	r1, r0
     330:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     334:	cmp	r2, #11
     338:	bls	5ac <verify_monster+0x5ac>
     33c:	ldrh	r1, [r1, #10]
     340:	cmp	r1, #0
     344:	beq	5ac <verify_monster+0x5ac>
     348:	ldr	r1, [r0, r1]!
     34c:	add	r0, r0, r1
     350:	movw	r1, #0
     354:	movt	r1, #0
     358:	add	r0, r0, #4
     35c:	bl	0 <strcmp>
     360:	cmp	r0, #0
     364:	beq	38c <verify_monster+0x38c>
     368:	movw	r0, #0
     36c:	movt	r0, #0
     370:	b	98 <verify_monster+0x98>
     374:	movw	r0, #0
     378:	movt	r0, #0
     37c:	b	98 <verify_monster+0x98>
     380:	movw	r0, #0
     384:	movt	r0, #0
     388:	b	98 <verify_monster+0x98>
     38c:	ldrh	r1, [r5, #22]
     390:	cmp	r1, #0
     394:	beq	570 <verify_monster+0x570>
     398:	mov	r0, r4
     39c:	ldr	r1, [r0, r1]!
     3a0:	ldr	r1, [r0, r1]!
     3a4:	cmp	r1, #2
     3a8:	bne	570 <verify_monster+0x570>
     3ac:	add	r0, r0, #4
     3b0:	ldrh	r1, [r0]
     3b4:	cmp	r1, #10
     3b8:	bne	57c <verify_monster+0x57c>
     3bc:	ldrb	r1, [r0, #2]
     3c0:	cmp	r1, #20
     3c4:	bne	588 <verify_monster+0x588>
     3c8:	ldrh	r1, [r0, #4]
     3cc:	cmp	r1, #30
     3d0:	bne	594 <verify_monster+0x594>
     3d4:	ldrb	r0, [r0, #6]
     3d8:	cmp	r0, #40	; 0x28
     3dc:	bne	5a0 <verify_monster+0x5a0>
     3e0:	cmp	r6, #38	; 0x26
     3e4:	bcc	5cc <verify_monster+0x5cc>
     3e8:	ldrh	r0, [r5, #36]	; 0x24
     3ec:	cmp	r0, #0
     3f0:	beq	5cc <verify_monster+0x5cc>
     3f4:	ldr	r1, [r4, r0]
     3f8:	movw	r0, #51521	; 0xc941
     3fc:	movt	r0, #56697	; 0xdd79
     400:	cmp	r1, r0
     404:	bne	5cc <verify_monster+0x5cc>
     408:	cmp	r6, #40	; 0x28
     40c:	bcc	5e4 <verify_monster+0x5e4>
     410:	ldrh	r1, [r5, #38]	; 0x26
     414:	cmp	r1, #0
     418:	beq	5e4 <verify_monster+0x5e4>
     41c:	ldr	r1, [r4, r1]
     420:	cmp	r1, r0
     424:	bne	5e4 <verify_monster+0x5e4>
     428:	cmp	r6, #42	; 0x2a
     42c:	bcc	5fc <verify_monster+0x5fc>
     430:	ldrh	r0, [r5, #40]	; 0x28
     434:	cmp	r0, #0
     438:	beq	5fc <verify_monster+0x5fc>
     43c:	mov	r1, r4
     440:	ldr	r2, [r1, r0]!
     444:	movw	r0, #37249	; 0x9181
     448:	movt	r0, #62075	; 0xf27b
     44c:	ldr	r3, [r1, #4]
     450:	movw	r1, #32973	; 0x80cd
     454:	movt	r1, #28175	; 0x6e0f
     458:	eor	r2, r2, r0
     45c:	eor	r3, r3, r1
     460:	orrs	r2, r2, r3
     464:	bne	5fc <verify_monster+0x5fc>
     468:	cmp	r6, #44	; 0x2c
     46c:	bcc	614 <verify_monster+0x614>
     470:	ldrh	r2, [r5, #42]	; 0x2a
     474:	cmp	r2, #0
     478:	beq	614 <verify_monster+0x614>
     47c:	mov	r3, r4
     480:	ldr	r2, [r3, r2]!
     484:	eor	r0, r2, r0
     488:	ldr	r2, [r3, #4]
     48c:	eor	r1, r2, r1
     490:	orrs	r0, r0, r1
     494:	bne	614 <verify_monster+0x614>
     498:	cmp	r6, #46	; 0x2e
     49c:	bcc	62c <verify_monster+0x62c>
     4a0:	ldrh	r0, [r5, #44]	; 0x2c
     4a4:	cmp	r0, #0
     4a8:	beq	62c <verify_monster+0x62c>
     4ac:	ldr	r1, [r4, r0]
     4b0:	movw	r0, #42097	; 0xa471
     4b4:	movt	r0, #36481	; 0x8e81
     4b8:	cmp	r1, r0
     4bc:	bne	62c <verify_monster+0x62c>
     4c0:	cmp	r6, #48	; 0x30
     4c4:	bcc	644 <verify_monster+0x644>
     4c8:	ldrh	r1, [r5, #46]	; 0x2e
     4cc:	cmp	r1, #0
     4d0:	beq	644 <verify_monster+0x644>
     4d4:	ldr	r1, [r4, r1]
     4d8:	cmp	r1, r0
     4dc:	bne	644 <verify_monster+0x644>
     4e0:	cmp	r6, #50	; 0x32
     4e4:	bcc	65c <verify_monster+0x65c>
     4e8:	ldrh	r0, [r5, #48]	; 0x30
     4ec:	cmp	r0, #0
     4f0:	beq	65c <verify_monster+0x65c>
     4f4:	mov	r1, r4
     4f8:	ldr	r2, [r1, r0]!
     4fc:	movw	r0, #56817	; 0xddf1
     500:	movt	r0, #51047	; 0xc767
     504:	ldr	r3, [r1, #4]
     508:	movw	r1, #18652	; 0x48dc
     50c:	movt	r1, #17401	; 0x43f9
     510:	eor	r2, r2, r0
     514:	eor	r3, r3, r1
     518:	orrs	r2, r2, r3
     51c:	bne	65c <verify_monster+0x65c>
     520:	cmp	r6, #52	; 0x34
     524:	bcc	550 <verify_monster+0x550>
     528:	ldrh	r2, [r5, #50]	; 0x32
     52c:	cmp	r2, #0
     530:	beq	550 <verify_monster+0x550>
     534:	ldr	r2, [r4, r2]!
     538:	eor	r0, r2, r0
     53c:	ldr	r2, [r4, #4]
     540:	eor	r1, r2, r1
     544:	orrs	r0, r0, r1
     548:	mov	r0, #0
     54c:	popeq	{r4, r5, r6, r7, fp, pc}
     550:	movw	r0, #0
     554:	movw	r1, #0
     558:	movw	r3, #0
     55c:	mov	r2, #155	; 0x9b
     560:	movt	r0, #0
     564:	movt	r1, #0
     568:	movt	r3, #0
     56c:	bl	0 <__assert_fail>
     570:	movw	r0, #0
     574:	movt	r0, #0
     578:	b	98 <verify_monster+0x98>
     57c:	movw	r0, #0
     580:	movt	r0, #0
     584:	b	98 <verify_monster+0x98>
     588:	movw	r0, #0
     58c:	movt	r0, #0
     590:	b	98 <verify_monster+0x98>
     594:	movw	r0, #0
     598:	movt	r0, #0
     59c:	b	98 <verify_monster+0x98>
     5a0:	movw	r0, #0
     5a4:	movt	r0, #0
     5a8:	b	98 <verify_monster+0x98>
     5ac:	movw	r0, #0
     5b0:	movw	r1, #0
     5b4:	movw	r3, #0
     5b8:	movw	r2, #699	; 0x2bb
     5bc:	movt	r0, #0
     5c0:	movt	r1, #0
     5c4:	movt	r3, #0
     5c8:	bl	0 <__assert_fail>
     5cc:	movw	r0, #0
     5d0:	movw	r1, #0
     5d4:	movw	r3, #0
     5d8:	mov	r2, #148	; 0x94
     5dc:	movt	r0, #0
     5e0:	b	564 <verify_monster+0x564>
     5e4:	movw	r0, #0
     5e8:	movw	r1, #0
     5ec:	movw	r3, #0
     5f0:	mov	r2, #149	; 0x95
     5f4:	movt	r0, #0
     5f8:	b	564 <verify_monster+0x564>
     5fc:	movw	r0, #0
     600:	movw	r1, #0
     604:	movw	r3, #0
     608:	mov	r2, #150	; 0x96
     60c:	movt	r0, #0
     610:	b	564 <verify_monster+0x564>
     614:	movw	r0, #0
     618:	movw	r1, #0
     61c:	movw	r3, #0
     620:	mov	r2, #151	; 0x97
     624:	movt	r0, #0
     628:	b	564 <verify_monster+0x564>
     62c:	movw	r0, #0
     630:	movw	r1, #0
     634:	movw	r3, #0
     638:	mov	r2, #152	; 0x98
     63c:	movt	r0, #0
     640:	b	564 <verify_monster+0x564>
     644:	movw	r0, #0
     648:	movw	r1, #0
     64c:	movw	r3, #0
     650:	mov	r2, #153	; 0x99
     654:	movt	r0, #0
     658:	b	564 <verify_monster+0x564>
     65c:	movw	r0, #0
     660:	movw	r1, #0
     664:	movw	r3, #0
     668:	mov	r2, #154	; 0x9a
     66c:	movt	r0, #0
     670:	b	564 <verify_monster+0x564>

00000674 <main>:
     674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     678:	add	fp, sp, #28
     67c:	sub	sp, sp, #20
     680:	sub	r2, r0, #1
     684:	cmp	r2, #2
     688:	bcs	9b0 <main+0x33c>
     68c:	movw	r8, #0
     690:	cmp	r0, #2
     694:	movt	r8, #0
     698:	bne	6a8 <main+0x34>
     69c:	ldr	r0, [r1, #4]
     6a0:	str	r0, [r8]
     6a4:	b	6ac <main+0x38>
     6a8:	ldr	r0, [r8]
     6ac:	movw	r1, #0
     6b0:	movt	r1, #0
     6b4:	bl	0 <fopen>
     6b8:	mov	r9, #0
     6bc:	cmp	r0, #0
     6c0:	beq	974 <main+0x300>
     6c4:	mov	r1, #0
     6c8:	mov	r2, #2
     6cc:	mov	r5, r0
     6d0:	mov	r7, #0
     6d4:	bl	0 <fseek>
     6d8:	mov	r0, r5
     6dc:	bl	0 <ftell>
     6e0:	mov	r4, r0
     6e4:	cmp	r0, #1024	; 0x400
     6e8:	bhi	968 <main+0x2f4>
     6ec:	mov	r0, r5
     6f0:	bl	0 <rewind>
     6f4:	cmp	r4, #0
     6f8:	mov	r0, r4
     6fc:	movweq	r0, #1
     700:	bl	0 <malloc>
     704:	cmp	r0, #0
     708:	beq	968 <main+0x2f4>
     70c:	mov	r6, r0
     710:	mov	r1, #0
     714:	mov	r7, r1
     718:	add	r0, r6, r1
     71c:	sub	r2, r4, r1
     720:	mov	r1, #1
     724:	mov	r3, r5
     728:	bl	0 <fread_unlocked>
     72c:	add	r1, r0, r7
     730:	cmp	r0, #0
     734:	bne	714 <main+0xa0>
     738:	mov	r0, r5
     73c:	bl	0 <fclose>
     740:	cmp	r4, r7
     744:	bne	750 <main+0xdc>
     748:	mov	r7, r6
     74c:	b	75c <main+0xe8>
     750:	mov	r0, r6
     754:	bl	0 <free>
     758:	mov	r7, #0
     75c:	add	r0, r4, #255	; 0xff
     760:	mov	r6, sp
     764:	mov	r1, #256	; 0x100
     768:	str	r9, [sp]
     76c:	bic	r2, r0, #255	; 0xff
     770:	mov	r0, r6
     774:	bl	0 <posix_memalign>
     778:	ldr	r5, [sp]
     77c:	cmp	r0, #0
     780:	cmpne	r5, #0
     784:	beq	798 <main+0x124>
     788:	mov	r0, r5
     78c:	bl	0 <free>
     790:	mov	r5, #0
     794:	str	r5, [sp]
     798:	mov	r0, r5
     79c:	mov	r1, r7
     7a0:	mov	r2, r4
     7a4:	bl	0 <memcpy>
     7a8:	mov	r0, r7
     7ac:	bl	0 <free>
     7b0:	movw	r9, #0
     7b4:	cmp	r5, #0
     7b8:	movt	r9, #0
     7bc:	ldr	r7, [r9]
     7c0:	bne	7e0 <main+0x16c>
     7c4:	ldr	r2, [r8]
     7c8:	movw	r1, #0
     7cc:	mov	r0, r7
     7d0:	movt	r1, #0
     7d4:	bl	0 <fprintf>
     7d8:	mvn	r4, #0
     7dc:	b	95c <main+0x2e8>
     7e0:	movw	r1, #0
     7e4:	movw	r2, #0
     7e8:	mov	r0, r7
     7ec:	movt	r1, #0
     7f0:	movt	r2, #0
     7f4:	bl	0 <fprintf>
     7f8:	cmp	r4, #0
     7fc:	beq	8ec <main+0x278>
     800:	movw	sl, #0
     804:	mov	r9, #0
     808:	movt	sl, #0
     80c:	ands	r8, r9, #15
     810:	bne	894 <main+0x220>
     814:	b	874 <main+0x200>
     818:	movw	r1, #0
     81c:	mov	r0, r7
     820:	mov	r2, r9
     824:	movt	r1, #0
     828:	bl	0 <fprintf>
     82c:	ldrb	r2, [r5, r9]
     830:	mov	r0, r7
     834:	mov	r1, sl
     838:	bl	0 <fprintf>
     83c:	ldrb	r0, [r5, r9]
     840:	add	r9, r9, #1
     844:	sub	r1, r0, #32
     848:	uxtb	r1, r1
     84c:	cmp	r1, #94	; 0x5e
     850:	mov	r1, #0
     854:	movwhi	r0, #46	; 0x2e
     858:	cmp	r4, r9
     85c:	strb	r0, [r6, r8]
     860:	add	r0, r6, r8
     864:	strb	r1, [r0, #1]
     868:	beq	8ac <main+0x238>
     86c:	ands	r8, r9, #15
     870:	bne	894 <main+0x220>
     874:	cmp	r9, #0
     878:	beq	818 <main+0x1a4>
     87c:	movw	r1, #0
     880:	mov	r0, r7
     884:	mov	r2, r6
     888:	movt	r1, #0
     88c:	bl	0 <fprintf>
     890:	b	818 <main+0x1a4>
     894:	tst	r9, #7
     898:	bne	82c <main+0x1b8>
     89c:	mov	r0, #32
     8a0:	mov	r1, r7
     8a4:	bl	0 <fputc>
     8a8:	b	82c <main+0x1b8>
     8ac:	movw	r9, #0
     8b0:	tst	r4, #15
     8b4:	movt	r9, #0
     8b8:	beq	8ec <main+0x278>
     8bc:	movw	r8, #0
     8c0:	add	r6, r4, #1
     8c4:	movt	r8, #0
     8c8:	mov	r0, r8
     8cc:	mov	r1, #3
     8d0:	mov	r2, #1
     8d4:	mov	r3, r7
     8d8:	bl	0 <fwrite>
     8dc:	add	r0, r6, #1
     8e0:	tst	r6, #15
     8e4:	mov	r6, r0
     8e8:	bne	8c8 <main+0x254>
     8ec:	movw	r1, #0
     8f0:	mov	r2, sp
     8f4:	mov	r0, r7
     8f8:	movt	r1, #0
     8fc:	bl	0 <fprintf>
     900:	movw	r2, #0
     904:	movw	r3, #0
     908:	mov	r0, r5
     90c:	mov	r1, r4
     910:	movt	r2, #0
     914:	movt	r3, #0
     918:	bl	0 <flatcc_verify_table_as_root>
     91c:	cmp	r0, #0
     920:	bne	97c <main+0x308>
     924:	movw	r2, #0
     928:	movw	r3, #0
     92c:	mov	r0, r5
     930:	mov	r1, r4
     934:	movt	r2, #0
     938:	movt	r3, #0
     93c:	bl	0 <flatcc_verify_table_as_root>
     940:	cmp	r0, #0
     944:	bne	990 <main+0x31c>
     948:	mov	r0, r5
     94c:	bl	0 <verify_monster>
     950:	mov	r4, r0
     954:	mov	r0, r5
     958:	bl	0 <free>
     95c:	mov	r0, r4
     960:	sub	sp, fp, #28
     964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     968:	mov	r0, r5
     96c:	bl	0 <fclose>
     970:	b	75c <main+0xe8>
     974:	mov	r4, #0
     978:	b	758 <main+0xe4>
     97c:	ldr	r3, [r9]
     980:	movw	r0, #0
     984:	mov	r1, #38	; 0x26
     988:	movt	r0, #0
     98c:	b	9a0 <main+0x32c>
     990:	ldr	r3, [r9]
     994:	movw	r0, #0
     998:	mov	r1, #62	; 0x3e
     99c:	movt	r0, #0
     9a0:	mov	r2, #1
     9a4:	bl	0 <fwrite>
     9a8:	mvn	r4, #0
     9ac:	b	954 <main+0x2e0>
     9b0:	movw	r0, #0
     9b4:	mov	r1, #63	; 0x3f
     9b8:	mov	r2, #1
     9bc:	movt	r0, #0
     9c0:	ldr	r3, [r0]
     9c4:	movw	r0, #0
     9c8:	movt	r0, #0
     9cc:	bl	0 <fwrite>
     9d0:	mov	r0, #1
     9d4:	bl	0 <exit>

000009d8 <MyGame_Example_Monster_verify_table>:
     9d8:	push	{r4, r5, r6, r7, fp, lr}
     9dc:	add	fp, sp, #16
     9e0:	sub	sp, sp, #8
     9e4:	mov	r1, #0
     9e8:	mov	r2, #32
     9ec:	mov	r3, #16
     9f0:	mov	r4, r0
     9f4:	bl	0 <flatcc_verify_field>
     9f8:	cmp	r0, #0
     9fc:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a00:	mov	r0, r4
     a04:	mov	r1, #2
     a08:	mov	r2, #2
     a0c:	mov	r3, #2
     a10:	bl	0 <flatcc_verify_field>
     a14:	cmp	r0, #0
     a18:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a1c:	mov	r0, r4
     a20:	mov	r1, #1
     a24:	mov	r2, #2
     a28:	mov	r3, #2
     a2c:	bl	0 <flatcc_verify_field>
     a30:	cmp	r0, #0
     a34:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a38:	mov	r0, r4
     a3c:	mov	r1, #3
     a40:	mov	r2, #1
     a44:	bl	0 <flatcc_verify_string_field>
     a48:	cmp	r0, #0
     a4c:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a50:	mov	r0, r4
     a54:	mov	r1, #6
     a58:	mov	r2, #1
     a5c:	mov	r3, #1
     a60:	mov	r5, #1
     a64:	bl	0 <flatcc_verify_field>
     a68:	cmp	r0, #0
     a6c:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a70:	mvn	r0, #0
     a74:	mov	r1, #5
     a78:	mov	r2, #0
     a7c:	mov	r3, #1
     a80:	str	r5, [sp]
     a84:	str	r0, [sp, #4]
     a88:	mov	r0, r4
     a8c:	bl	0 <flatcc_verify_vector_field>
     a90:	cmp	r0, #0
     a94:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     a98:	movw	r3, #0
     a9c:	mov	r0, r4
     aa0:	mov	r1, #11
     aa4:	mov	r2, #0
     aa8:	movt	r3, #0
     aac:	bl	0 <flatcc_verify_table_vector_field>
     ab0:	cmp	r0, #0
     ab4:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     ab8:	mov	r0, r4
     abc:	mov	r1, #10
     ac0:	mov	r2, #0
     ac4:	bl	0 <flatcc_verify_string_vector_field>
     ac8:	cmp	r0, #0
     acc:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     ad0:	mov	r0, r4
     ad4:	mov	r1, #28
     ad8:	mov	r2, #0
     adc:	bl	0 <flatcc_verify_string_vector_field>
     ae0:	cmp	r0, #0
     ae4:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     ae8:	mvn	r0, #0
     aec:	mov	r1, #1
     af0:	mov	r2, #0
     af4:	mov	r3, #1
     af8:	str	r1, [sp]
     afc:	str	r0, [sp, #4]
     b00:	mov	r0, r4
     b04:	mov	r1, #24
     b08:	bl	0 <flatcc_verify_vector_field>
     b0c:	cmp	r0, #0
     b10:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     b14:	mvn	r0, #-536870912	; 0xe0000000
     b18:	mov	r1, #4
     b1c:	mov	r2, #0
     b20:	mov	r3, #8
     b24:	str	r1, [sp]
     b28:	str	r0, [sp, #4]
     b2c:	mov	r0, r4
     b30:	mov	r1, #29
     b34:	bl	0 <flatcc_verify_vector_field>
     b38:	cmp	r0, #0
     b3c:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     b40:	movw	r5, #0
     b44:	mov	r0, r4
     b48:	mov	r1, #12
     b4c:	mov	r2, #0
     b50:	movt	r5, #0
     b54:	mov	r3, r5
     b58:	bl	0 <flatcc_verify_table_field>
     b5c:	cmp	r0, #0
     b60:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     b64:	movw	r3, #0
     b68:	mov	r0, r4
     b6c:	mov	r1, #8
     b70:	mov	r2, #0
     b74:	movt	r3, #0
     b78:	bl	0 <flatcc_verify_union_field>
     b7c:	cmp	r0, #0
     b80:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     b84:	mvn	r6, #-1073741824	; 0xc0000000
     b88:	mov	r7, #2
     b8c:	mov	r0, r4
     b90:	mov	r1, #9
     b94:	mov	r2, #0
     b98:	mov	r3, #4
     b9c:	str	r7, [sp]
     ba0:	str	r6, [sp, #4]
     ba4:	bl	0 <flatcc_verify_vector_field>
     ba8:	cmp	r0, #0
     bac:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     bb0:	mov	r0, r4
     bb4:	mov	r1, #31
     bb8:	mov	r2, #0
     bbc:	mov	r3, #4
     bc0:	str	r7, [sp]
     bc4:	str	r6, [sp, #4]
     bc8:	bl	0 <flatcc_verify_vector_field>
     bcc:	cmp	r0, #0
     bd0:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     bd4:	mov	r0, #1
     bd8:	mov	r1, #13
     bdc:	mov	r2, #0
     be0:	mov	r3, #0
     be4:	stm	sp, {r0, r5}
     be8:	mov	r0, r4
     bec:	bl	0 <flatcc_verify_table_as_nested_root>
     bf0:	cmp	r0, #0
     bf4:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     bf8:	movw	r3, #0
     bfc:	mov	r0, r4
     c00:	mov	r1, #14
     c04:	mov	r2, #0
     c08:	movt	r3, #0
     c0c:	bl	0 <flatcc_verify_table_field>
     c10:	cmp	r0, #0
     c14:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     c18:	mov	r0, r4
     c1c:	mov	r1, #15
     c20:	mov	r2, #1
     c24:	mov	r3, #1
     c28:	bl	0 <flatcc_verify_field>
     c2c:	cmp	r0, #0
     c30:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     c34:	mov	r0, r4
     c38:	mov	r1, #16
     c3c:	mov	r2, #4
     c40:	mov	r3, #4
     c44:	bl	0 <flatcc_verify_field>
     c48:	cmp	r0, #0
     c4c:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     c50:	mov	r0, r4
     c54:	mov	r1, #17
     c58:	mov	r2, #4
     c5c:	mov	r3, #4
     c60:	bl	0 <flatcc_verify_field>
     c64:	cmp	r0, #0
     c68:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     c6c:	mov	r0, r4
     c70:	mov	r1, #18
     c74:	mov	r2, #8
     c78:	mov	r3, #8
     c7c:	bl	0 <flatcc_verify_field>
     c80:	cmp	r0, #0
     c84:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     c88:	mov	r0, r4
     c8c:	mov	r1, #19
     c90:	mov	r2, #8
     c94:	mov	r3, #8
     c98:	bl	0 <flatcc_verify_field>
     c9c:	cmp	r0, #0
     ca0:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     ca4:	mov	r0, r4
     ca8:	mov	r1, #20
     cac:	mov	r2, #4
     cb0:	mov	r3, #4
     cb4:	bl	0 <flatcc_verify_field>
     cb8:	cmp	r0, #0
     cbc:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     cc0:	mov	r0, r4
     cc4:	mov	r1, #21
     cc8:	mov	r2, #4
     ccc:	mov	r3, #4
     cd0:	bl	0 <flatcc_verify_field>
     cd4:	cmp	r0, #0
     cd8:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     cdc:	mov	r0, r4
     ce0:	mov	r1, #22
     ce4:	mov	r2, #8
     ce8:	mov	r3, #8
     cec:	bl	0 <flatcc_verify_field>
     cf0:	cmp	r0, #0
     cf4:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     cf8:	mov	r0, r4
     cfc:	mov	r1, #23
     d00:	mov	r2, #8
     d04:	mov	r3, #8
     d08:	bl	0 <flatcc_verify_field>
     d0c:	cmp	r0, #0
     d10:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     d14:	mov	r0, r4
     d18:	mov	r1, #25
     d1c:	mov	r2, #4
     d20:	mov	r3, #4
     d24:	bl	0 <flatcc_verify_field>
     d28:	cmp	r0, #0
     d2c:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     d30:	mov	r0, r4
     d34:	mov	r1, #26
     d38:	mov	r2, #4
     d3c:	mov	r3, #4
     d40:	bl	0 <flatcc_verify_field>
     d44:	cmp	r0, #0
     d48:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     d4c:	mov	r0, r4
     d50:	mov	r1, #27
     d54:	mov	r2, #4
     d58:	mov	r3, #4
     d5c:	bl	0 <flatcc_verify_field>
     d60:	cmp	r0, #0
     d64:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     d68:	mvn	r0, #0
     d6c:	mov	r1, #1
     d70:	mov	r2, #0
     d74:	mov	r3, #1
     d78:	str	r1, [sp]
     d7c:	str	r0, [sp, #4]
     d80:	mov	r0, r4
     d84:	mov	r1, #30
     d88:	bl	0 <flatcc_verify_vector_field>
     d8c:	cmp	r0, #0
     d90:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     d94:	mvn	r5, #-536870912	; 0xe0000000
     d98:	mov	r6, #8
     d9c:	mov	r0, r4
     da0:	mov	r1, #32
     da4:	mov	r2, #0
     da8:	mov	r3, #8
     dac:	str	r6, [sp]
     db0:	str	r5, [sp, #4]
     db4:	bl	0 <flatcc_verify_vector_field>
     db8:	cmp	r0, #0
     dbc:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     dc0:	mov	r0, r4
     dc4:	mov	r1, #33	; 0x21
     dc8:	mov	r2, #0
     dcc:	mov	r3, #8
     dd0:	str	r6, [sp]
     dd4:	str	r5, [sp, #4]
     dd8:	bl	0 <flatcc_verify_vector_field>
     ddc:	cmp	r0, #0
     de0:	bne	e04 <MyGame_Example_Monster_verify_table+0x42c>
     de4:	movw	r3, #0
     de8:	mov	r0, r4
     dec:	mov	r1, #34	; 0x22
     df0:	mov	r2, #0
     df4:	movt	r3, #0
     df8:	bl	0 <flatcc_verify_table_field>
     dfc:	cmp	r0, #0
     e00:	beq	e0c <MyGame_Example_Monster_verify_table+0x434>
     e04:	sub	sp, fp, #16
     e08:	pop	{r4, r5, r6, r7, fp, pc}
     e0c:	movw	r3, #0
     e10:	mov	r0, r4
     e14:	mov	r1, #35	; 0x23
     e18:	mov	r2, #0
     e1c:	movt	r3, #0
     e20:	sub	sp, fp, #16
     e24:	pop	{r4, r5, r6, r7, fp, lr}
     e28:	b	0 <flatcc_verify_table_field>

00000e2c <MyGame_Example_Any_union_verifier>:
     e2c:	ldrb	r1, [r0, #12]
     e30:	sub	r1, r1, #1
     e34:	uxtb	r2, r1
     e38:	cmp	r2, #3
     e3c:	movhi	r0, #0
     e40:	bxhi	lr
     e44:	movw	r2, #0
     e48:	sxtb	r1, r1
     e4c:	movt	r2, #0
     e50:	ldr	r1, [r2, r1, lsl #2]
     e54:	b	0 <flatcc_verify_union_table>

00000e58 <MyGame_Example_Stat_verify_table>:
     e58:	push	{r4, sl, fp, lr}
     e5c:	add	fp, sp, #8
     e60:	mov	r1, #0
     e64:	mov	r2, #0
     e68:	mov	r4, r0
     e6c:	bl	0 <flatcc_verify_string_field>
     e70:	cmp	r0, #0
     e74:	popne	{r4, sl, fp, pc}
     e78:	mov	r0, r4
     e7c:	mov	r1, #1
     e80:	mov	r2, #8
     e84:	mov	r3, #8
     e88:	bl	0 <flatcc_verify_field>
     e8c:	cmp	r0, #0
     e90:	beq	e98 <MyGame_Example_Stat_verify_table+0x40>
     e94:	pop	{r4, sl, fp, pc}
     e98:	mov	r0, r4
     e9c:	mov	r1, #2
     ea0:	mov	r2, #2
     ea4:	mov	r3, #2
     ea8:	pop	{r4, sl, fp, lr}
     eac:	b	0 <flatcc_verify_field>

00000eb0 <MyGame_InParentNamespace_verify_table>:
     eb0:	mov	r0, #0
     eb4:	bx	lr

00000eb8 <MyGame_Example_TestBase64_verify_table>:
     eb8:	push	{r4, r5, r6, sl, fp, lr}
     ebc:	add	fp, sp, #16
     ec0:	sub	sp, sp, #8
     ec4:	mvn	r5, #0
     ec8:	mov	r6, #1
     ecc:	mov	r1, #0
     ed0:	mov	r2, #0
     ed4:	mov	r3, #1
     ed8:	mov	r4, r0
     edc:	str	r6, [sp]
     ee0:	str	r5, [sp, #4]
     ee4:	bl	0 <flatcc_verify_vector_field>
     ee8:	cmp	r0, #0
     eec:	bne	f14 <MyGame_Example_TestBase64_verify_table+0x5c>
     ef0:	mov	r0, r4
     ef4:	mov	r1, #1
     ef8:	mov	r2, #0
     efc:	mov	r3, #1
     f00:	str	r6, [sp]
     f04:	str	r5, [sp, #4]
     f08:	bl	0 <flatcc_verify_vector_field>
     f0c:	cmp	r0, #0
     f10:	beq	f1c <MyGame_Example_TestBase64_verify_table+0x64>
     f14:	sub	sp, fp, #16
     f18:	pop	{r4, r5, r6, sl, fp, pc}
     f1c:	movw	r0, #0
     f20:	mov	r1, #1
     f24:	mov	r2, #0
     f28:	mov	r3, #0
     f2c:	movt	r0, #0
     f30:	str	r1, [sp]
     f34:	mov	r1, #2
     f38:	str	r0, [sp, #4]
     f3c:	mov	r0, r4
     f40:	bl	0 <flatcc_verify_table_as_nested_root>
     f44:	sub	sp, fp, #16
     f48:	pop	{r4, r5, r6, sl, fp, pc}

00000f4c <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
     f4c:	push	{r4, sl, fp, lr}
     f50:	add	fp, sp, #8
     f54:	mov	r1, #0
     f58:	mov	r2, #1
     f5c:	mov	r3, #1
     f60:	mov	r4, r0
     f64:	bl	0 <flatcc_verify_field>
     f68:	cmp	r0, #0
     f6c:	bne	fa8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x5c>
     f70:	mov	r0, r4
     f74:	mov	r1, #1
     f78:	mov	r2, #1
     f7c:	mov	r3, #1
     f80:	bl	0 <flatcc_verify_field>
     f84:	cmp	r0, #0
     f88:	popne	{r4, sl, fp, pc}
     f8c:	mov	r0, r4
     f90:	mov	r1, #2
     f94:	mov	r2, #1
     f98:	mov	r3, #1
     f9c:	bl	0 <flatcc_verify_field>
     fa0:	cmp	r0, #0
     fa4:	beq	fac <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x60>
     fa8:	pop	{r4, sl, fp, pc}
     fac:	mov	r0, r4
     fb0:	mov	r1, #3
     fb4:	mov	r2, #1
     fb8:	mov	r3, #1
     fbc:	pop	{r4, sl, fp, lr}
     fc0:	b	0 <flatcc_verify_field>

00000fc4 <MyGame_Example2_Monster_verify_table>:
     fc4:	mov	r0, #0
     fc8:	bx	lr

00000fcc <MyGame_Example_Alt_verify_table>:
     fcc:	push	{r4, sl, fp, lr}
     fd0:	add	fp, sp, #8
     fd4:	movw	r3, #0
     fd8:	mov	r1, #0
     fdc:	mov	r2, #0
     fe0:	mov	r4, r0
     fe4:	movt	r3, #0
     fe8:	bl	0 <flatcc_verify_table_field>
     fec:	cmp	r0, #0
     ff0:	popne	{r4, sl, fp, pc}
     ff4:	movw	r3, #0
     ff8:	mov	r0, r4
     ffc:	mov	r1, #1
    1000:	mov	r2, #0
    1004:	movt	r3, #0
    1008:	bl	0 <flatcc_verify_table_field>
    100c:	cmp	r0, #0
    1010:	beq	1018 <MyGame_Example_Alt_verify_table+0x4c>
    1014:	pop	{r4, sl, fp, pc}
    1018:	movw	r3, #0
    101c:	mov	r0, r4
    1020:	mov	r1, #3
    1024:	mov	r2, #0
    1028:	movt	r3, #0
    102c:	pop	{r4, sl, fp, lr}
    1030:	b	0 <flatcc_verify_union_vector_field>

00001034 <MyGame_Example_TestJSONPrefix_verify_table>:
    1034:	push	{r4, sl, fp, lr}
    1038:	add	fp, sp, #8
    103c:	movw	r3, #0
    1040:	mov	r1, #0
    1044:	mov	r2, #0
    1048:	mov	r4, r0
    104c:	movt	r3, #0
    1050:	bl	0 <flatcc_verify_table_field>
    1054:	cmp	r0, #0
    1058:	popne	{r4, sl, fp, pc}
    105c:	movw	r3, #0
    1060:	mov	r0, r4
    1064:	mov	r1, #1
    1068:	mov	r2, #0
    106c:	movt	r3, #0
    1070:	bl	0 <flatcc_verify_table_field>
    1074:	cmp	r0, #0
    1078:	beq	1080 <MyGame_Example_TestJSONPrefix_verify_table+0x4c>
    107c:	pop	{r4, sl, fp, pc}
    1080:	movw	r3, #0
    1084:	mov	r0, r4
    1088:	mov	r1, #2
    108c:	mov	r2, #0
    1090:	movt	r3, #0
    1094:	pop	{r4, sl, fp, lr}
    1098:	b	0 <flatcc_verify_table_field>

0000109c <Fantasy_Movie_verify_table>:
    109c:	push	{r4, sl, fp, lr}
    10a0:	add	fp, sp, #8
    10a4:	movw	r3, #0
    10a8:	mov	r1, #1
    10ac:	mov	r2, #0
    10b0:	mov	r4, r0
    10b4:	movt	r3, #0
    10b8:	bl	0 <flatcc_verify_union_field>
    10bc:	cmp	r0, #0
    10c0:	bne	1124 <Fantasy_Movie_verify_table+0x88>
    10c4:	movw	r3, #0
    10c8:	mov	r0, r4
    10cc:	mov	r1, #3
    10d0:	mov	r2, #0
    10d4:	movt	r3, #0
    10d8:	bl	0 <flatcc_verify_union_field>
    10dc:	cmp	r0, #0
    10e0:	bne	1124 <Fantasy_Movie_verify_table+0x88>
    10e4:	movw	r3, #0
    10e8:	mov	r0, r4
    10ec:	mov	r1, #5
    10f0:	mov	r2, #0
    10f4:	movt	r3, #0
    10f8:	bl	0 <flatcc_verify_union_field>
    10fc:	cmp	r0, #0
    1100:	popne	{r4, sl, fp, pc}
    1104:	movw	r3, #0
    1108:	mov	r0, r4
    110c:	mov	r1, #7
    1110:	mov	r2, #0
    1114:	movt	r3, #0
    1118:	bl	0 <flatcc_verify_union_field>
    111c:	cmp	r0, #0
    1120:	beq	1128 <Fantasy_Movie_verify_table+0x8c>
    1124:	pop	{r4, sl, fp, pc}
    1128:	movw	r3, #0
    112c:	mov	r0, r4
    1130:	mov	r1, #9
    1134:	mov	r2, #0
    1138:	movt	r3, #0
    113c:	pop	{r4, sl, fp, lr}
    1140:	b	0 <flatcc_verify_union_vector_field>

00001144 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    1144:	push	{r4, sl, fp, lr}
    1148:	add	fp, sp, #8
    114c:	mov	r1, #0
    1150:	mov	r2, #0
    1154:	mov	r4, r0
    1158:	bl	0 <flatcc_verify_string_field>
    115c:	cmp	r0, #0
    1160:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    1164:	mov	r0, r4
    1168:	mov	r1, #1
    116c:	mov	r2, #4
    1170:	mov	r3, #4
    1174:	bl	0 <flatcc_verify_field>
    1178:	cmp	r0, #0
    117c:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    1180:	mov	r0, r4
    1184:	mov	r1, #2
    1188:	mov	r2, #0
    118c:	bl	0 <flatcc_verify_string_field>
    1190:	cmp	r0, #0
    1194:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    1198:	mov	r0, r4
    119c:	mov	r1, #3
    11a0:	mov	r2, #8
    11a4:	mov	r3, #8
    11a8:	bl	0 <flatcc_verify_field>
    11ac:	cmp	r0, #0
    11b0:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    11b4:	mov	r0, r4
    11b8:	mov	r1, #4
    11bc:	mov	r2, #0
    11c0:	bl	0 <flatcc_verify_string_field>
    11c4:	cmp	r0, #0
    11c8:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    11cc:	mov	r0, r4
    11d0:	mov	r1, #5
    11d4:	mov	r2, #8
    11d8:	mov	r3, #8
    11dc:	bl	0 <flatcc_verify_field>
    11e0:	cmp	r0, #0
    11e4:	bne	1220 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    11e8:	mov	r0, r4
    11ec:	mov	r1, #6
    11f0:	mov	r2, #4
    11f4:	mov	r3, #4
    11f8:	bl	0 <flatcc_verify_field>
    11fc:	cmp	r0, #0
    1200:	popne	{r4, sl, fp, pc}
    1204:	mov	r0, r4
    1208:	mov	r1, #7
    120c:	mov	r2, #8
    1210:	mov	r3, #8
    1214:	bl	0 <flatcc_verify_field>
    1218:	cmp	r0, #0
    121c:	beq	1224 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe0>
    1220:	pop	{r4, sl, fp, pc}
    1224:	mov	r0, r4
    1228:	mov	r1, #8
    122c:	mov	r2, #4
    1230:	mov	r3, #4
    1234:	pop	{r4, sl, fp, lr}
    1238:	b	0 <flatcc_verify_field>

0000123c <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    123c:	push	{r4, sl, fp, lr}
    1240:	add	fp, sp, #8
    1244:	mov	r1, #0
    1248:	mov	r2, #8
    124c:	mov	r3, #8
    1250:	mov	r4, r0
    1254:	bl	0 <flatcc_verify_field>
    1258:	cmp	r0, #0
    125c:	popne	{r4, sl, fp, pc}
    1260:	mov	r0, r4
    1264:	mov	r1, #1
    1268:	mov	r2, #4
    126c:	mov	r3, #4
    1270:	pop	{r4, sl, fp, lr}
    1274:	b	0 <flatcc_verify_field>

00001278 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    1278:	push	{r4, sl, fp, lr}
    127c:	add	fp, sp, #8
    1280:	mov	r1, #0
    1284:	mov	r2, #8
    1288:	mov	r3, #8
    128c:	mov	r4, r0
    1290:	bl	0 <flatcc_verify_field>
    1294:	cmp	r0, #0
    1298:	popne	{r4, sl, fp, pc}
    129c:	mov	r0, r4
    12a0:	mov	r1, #1
    12a4:	mov	r2, #4
    12a8:	mov	r3, #4
    12ac:	pop	{r4, sl, fp, lr}
    12b0:	b	0 <flatcc_verify_field>

000012b4 <Fantasy_Character_union_verifier>:
    12b4:	ldrb	r2, [r0, #12]
    12b8:	sub	r1, r2, #2
    12bc:	cmp	r1, #9
    12c0:	bhi	1300 <Fantasy_Character_union_verifier+0x4c>
    12c4:	add	r2, pc, #0
    12c8:	ldr	pc, [r2, r1, lsl #2]
    12cc:	.word	0x00001314
    12d0:	.word	0x0000130c
    12d4:	.word	0x0000130c
    12d8:	.word	0x0000130c
    12dc:	.word	0x0000130c
    12e0:	.word	0x0000130c
    12e4:	.word	0x00001320
    12e8:	.word	0x000012f4
    12ec:	.word	0x000012f4
    12f0:	.word	0x00001308
    12f4:	mov	r1, #4
    12f8:	mov	r2, #4
    12fc:	b	0 <flatcc_verify_union_struct>
    1300:	cmp	r2, #255	; 0xff
    1304:	bne	130c <Fantasy_Character_union_verifier+0x58>
    1308:	b	0 <flatcc_verify_union_string>
    130c:	mov	r0, #0
    1310:	bx	lr
    1314:	movw	r1, #0
    1318:	movt	r1, #0
    131c:	b	0 <flatcc_verify_union_table>
    1320:	mov	r1, #2
    1324:	mov	r2, #2
    1328:	b	0 <flatcc_verify_union_struct>

0000132c <Fantasy_Attacker_verify_table>:
    132c:	mov	r1, #0
    1330:	mov	r2, #4
    1334:	mov	r3, #4
    1338:	b	0 <flatcc_verify_field>
