
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-netcdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_netcdf_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_netcdf_cursor_goto_array_element>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	sub	sp, sp, #40	; 0x28
  34:	mov	r5, r0
  38:	ldr	r0, [r0, #4]
  3c:	add	r4, sp, #4
  40:	mov	r7, r2
  44:	mov	r6, r1
  48:	sub	r1, fp, #28
  4c:	mov	r2, r4
  50:	add	r0, r5, r0, lsl #4
  54:	ldr	r0, [r0, #-8]
  58:	ldr	r0, [r0, #4]
  5c:	bl	0 <coda_type_get_array_dim>
  60:	mvn	r8, #0
  64:	cmp	r0, #0
  68:	bne	114 <coda_netcdf_cursor_goto_array_element+0xec>
  6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
  70:	cmp	r3, r6
  74:	bne	f0 <coda_netcdf_cursor_goto_array_element+0xc8>
  78:	cmp	r6, #1
  7c:	mov	r0, #0
  80:	blt	bc <coda_netcdf_cursor_goto_array_element+0x94>
  84:	mov	r1, #0
  88:	mov	r0, #0
  8c:	ldr	r2, [r7, r1, lsl #2]
  90:	ldr	r3, [r4, r1, lsl #2]
  94:	cmp	r2, #0
  98:	blt	104 <coda_netcdf_cursor_goto_array_element+0xdc>
  9c:	cmp	r2, r3
  a0:	bge	104 <coda_netcdf_cursor_goto_array_element+0xdc>
  a4:	cmp	r1, #0
  a8:	add	r1, r1, #1
  ac:	movweq	r3, #1
  b0:	cmp	r1, r6
  b4:	mla	r0, r3, r0, r2
  b8:	blt	8c <coda_netcdf_cursor_goto_array_element+0x64>
  bc:	ldr	r1, [r5, #4]
  c0:	mov	r8, #0
  c4:	add	r2, r5, r1, lsl #4
  c8:	add	r1, r1, #1
  cc:	ldr	r3, [r2, #-8]
  d0:	ldr	r3, [r3, #12]
  d4:	str	r1, [r5, #4]
  d8:	mvn	r1, #0
  dc:	str	r3, [r2, #8]
  e0:	str	r0, [r2, #12]
  e4:	str	r1, [r2, #16]
  e8:	str	r1, [r2, #20]
  ec:	b	114 <coda_netcdf_cursor_goto_array_element+0xec>
  f0:	movw	r1, #0
  f4:	mvn	r0, #105	; 0x69
  f8:	mov	r2, r6
  fc:	movt	r1, #0
 100:	b	110 <coda_netcdf_cursor_goto_array_element+0xe8>
 104:	movw	r1, #0
 108:	mvn	r0, #106	; 0x6a
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mov	r0, r8
 118:	sub	sp, fp, #24
 11c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000120 <coda_netcdf_cursor_goto_array_element_by_index>:
 120:	push	{r4, r5, fp, lr}
 124:	add	fp, sp, #8
 128:	mov	r5, r1
 12c:	mov	r1, r0
 130:	ldr	r0, [pc, #124]	; 1b4 <coda_netcdf_cursor_goto_array_element_by_index+0x94>
 134:	ldr	r2, [pc, r0]
 138:	bl	0 <__aeabi_read_tp>
 13c:	ldr	r3, [r0, r2]
 140:	ldr	r2, [r1, #4]
 144:	add	r0, r1, r2, lsl #4
 148:	cmp	r3, #0
 14c:	sub	r4, r0, #8
 150:	beq	188 <coda_netcdf_cursor_goto_array_element_by_index+0x68>
 154:	ldr	r3, [r4]
 158:	cmp	r5, #0
 15c:	ldr	r3, [r3, #4]
 160:	ldr	r3, [r3, #44]	; 0x2c
 164:	cmpge	r3, r5
 168:	bgt	188 <coda_netcdf_cursor_goto_array_element_by_index+0x68>
 16c:	movw	r1, #0
 170:	mvn	r0, #106	; 0x6a
 174:	mov	r2, r5
 178:	movt	r1, #0
 17c:	bl	0 <coda_set_error>
 180:	mvn	r0, #0
 184:	pop	{r4, r5, fp, pc}
 188:	ldr	r3, [r4]
 18c:	add	r2, r2, #1
 190:	ldr	r3, [r3, #12]
 194:	str	r2, [r1, #4]
 198:	mvn	r1, #0
 19c:	str	r3, [r0, #8]
 1a0:	str	r5, [r0, #12]
 1a4:	str	r1, [r0, #16]
 1a8:	str	r1, [r0, #20]
 1ac:	mov	r0, #0
 1b0:	pop	{r4, r5, fp, pc}
 1b4:	.word	0x00000078

000001b8 <coda_netcdf_cursor_goto_next_array_element>:
 1b8:	push	{fp, lr}
 1bc:	mov	fp, sp
 1c0:	mov	r1, r0
 1c4:	ldr	r0, [pc, #108]	; 238 <coda_netcdf_cursor_goto_next_array_element+0x80>
 1c8:	ldr	r2, [pc, r0]
 1cc:	bl	0 <__aeabi_read_tp>
 1d0:	ldr	r2, [r0, r2]
 1d4:	ldr	r0, [r1, #4]
 1d8:	add	r1, r1, r0, lsl #4
 1dc:	cmp	r2, #0
 1e0:	sub	r0, r1, #4
 1e4:	beq	20c <coda_netcdf_cursor_goto_next_array_element+0x54>
 1e8:	ldr	r1, [r1, #-24]	; 0xffffffe8
 1ec:	ldr	r1, [r1, #4]
 1f0:	ldr	r3, [r1, #44]	; 0x2c
 1f4:	ldr	r1, [r0]
 1f8:	add	r2, r1, #1
 1fc:	cmn	r1, #1
 200:	blt	220 <coda_netcdf_cursor_goto_next_array_element+0x68>
 204:	cmp	r2, r3
 208:	bge	220 <coda_netcdf_cursor_goto_next_array_element+0x68>
 20c:	ldr	r1, [r0]
 210:	add	r1, r1, #1
 214:	str	r1, [r0]
 218:	mov	r0, #0
 21c:	pop	{fp, pc}
 220:	movw	r1, #0
 224:	mvn	r0, #106	; 0x6a
 228:	movt	r1, #0
 22c:	bl	0 <coda_set_error>
 230:	mvn	r0, #0
 234:	pop	{fp, pc}
 238:	.word	0x00000068

0000023c <coda_netcdf_cursor_goto_attributes>:
 23c:	push	{r4, sl, fp, lr}
 240:	add	fp, sp, #8
 244:	ldr	r1, [r0, #4]
 248:	mov	r4, r0
 24c:	add	r0, r0, r1, lsl #4
 250:	add	r3, r1, #1
 254:	ldr	r2, [r0, #-8]
 258:	str	r3, [r4, #4]
 25c:	ldr	r2, [r2, #8]
 260:	cmp	r2, #0
 264:	beq	270 <coda_netcdf_cursor_goto_attributes+0x34>
 268:	str	r2, [r0, #8]
 26c:	b	288 <coda_netcdf_cursor_goto_attributes+0x4c>
 270:	mov	r0, #6
 274:	bl	0 <coda_mem_empty_record>
 278:	ldr	r1, [r4, #4]
 27c:	sub	r1, r1, #1
 280:	add	r2, r4, r1, lsl #4
 284:	str	r0, [r2, #8]
 288:	add	r0, r4, r1, lsl #4
 28c:	mvn	r1, #0
 290:	str	r1, [r0, #12]
 294:	str	r1, [r0, #16]
 298:	str	r1, [r0, #20]
 29c:	mov	r0, #0
 2a0:	pop	{r4, sl, fp, pc}

000002a4 <coda_netcdf_cursor_get_num_elements>:
 2a4:	ldr	r2, [r0, #4]
 2a8:	add	r0, r0, r2, lsl #4
 2ac:	ldr	r0, [r0, #-8]
 2b0:	ldr	r2, [r0, #4]
 2b4:	mov	r0, #1
 2b8:	ldr	r3, [r2, #8]
 2bc:	cmp	r3, #1
 2c0:	ldreq	r0, [r2, #44]	; 0x2c
 2c4:	str	r0, [r1]
 2c8:	mov	r0, #0
 2cc:	bx	lr

000002d0 <coda_netcdf_cursor_get_string_length>:
 2d0:	ldr	r2, [r0, #4]
 2d4:	add	r0, r0, r2, lsl #4
 2d8:	ldr	r0, [r0, #-8]
 2dc:	ldr	r0, [r0, #4]
 2e0:	b	0 <coda_type_get_string_length>

000002e4 <coda_netcdf_cursor_get_array_dim>:
 2e4:	ldr	r3, [r0, #4]
 2e8:	add	r0, r0, r3, lsl #4
 2ec:	ldr	r0, [r0, #-8]
 2f0:	ldr	r0, [r0, #4]
 2f4:	b	0 <coda_type_get_array_dim>

000002f8 <coda_netcdf_cursor_read_int8>:
 2f8:	mvn	r2, #0
 2fc:	b	300 <read_basic_type>

00000300 <read_basic_type>:
 300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 304:	add	fp, sp, #28
 308:	sub	sp, sp, #12
 30c:	mov	r9, r1
 310:	ldr	r8, [r0]
 314:	ldr	r1, [r0, #4]
 318:	add	r6, r0, #8
 31c:	sub	r7, r1, #1
 320:	add	r1, r6, r1, lsl #4
 324:	ldr	sl, [r6, r7, lsl #4]
 328:	ldr	r3, [sl, #4]
 32c:	ldr	lr, [sl, #16]
 330:	ldr	ip, [sl, #20]
 334:	ldr	r1, [r1, #-32]	; 0xffffffe0
 338:	ldrd	r4, [r3, #24]
 33c:	lsr	r3, r4, #3
 340:	asr	r4, r5, #3
 344:	orr	r3, r3, r5, lsl #29
 348:	ldr	r5, [r1]
 34c:	cmp	r5, #104	; 0x68
 350:	bne	3b4 <read_basic_type+0xb4>
 354:	ldr	r1, [r1, #4]
 358:	ldr	r5, [r1, #8]
 35c:	cmp	r5, #1
 360:	bne	3b4 <read_basic_type+0xb4>
 364:	ldr	r5, [sl, #24]
 368:	add	r0, r0, r7, lsl #4
 36c:	cmp	r5, #0
 370:	beq	3dc <read_basic_type+0xdc>
 374:	ldr	r5, [r1, #44]	; 0x2c
 378:	ldr	r1, [r1, #52]	; 0x34
 37c:	ldr	r0, [r0, #12]
 380:	sdiv	r1, r5, r1
 384:	sdiv	r5, r0, r1
 388:	mls	r0, r5, r1, r0
 38c:	umull	r1, r6, r3, r0
 390:	asr	r7, r0, #31
 394:	mla	r6, r3, r7, r6
 398:	mla	r0, r4, r0, r6
 39c:	ldr	r6, [r8, #60]	; 0x3c
 3a0:	mul	r5, r6, r5
 3a4:	adds	r7, lr, r5
 3a8:	adc	r6, ip, r5, asr #31
 3ac:	adds	lr, r7, r1
 3b0:	adc	ip, r6, r0
 3b4:	cmp	r2, #0
 3b8:	blt	400 <read_basic_type+0x100>
 3bc:	subs	r0, r2, r3
 3c0:	rscs	r0, r4, r2, asr #31
 3c4:	bge	400 <read_basic_type+0x100>
 3c8:	ldr	r0, [r8, #52]	; 0x34
 3cc:	asr	r1, r2, #31
 3d0:	str	r2, [sp]
 3d4:	str	r1, [sp, #4]
 3d8:	b	408 <read_basic_type+0x108>
 3dc:	ldr	r0, [r0, #12]
 3e0:	umull	r1, r5, r3, r0
 3e4:	asr	r6, r0, #31
 3e8:	mla	r5, r3, r6, r5
 3ec:	adds	lr, r1, lr
 3f0:	mla	r0, r4, r0, r5
 3f4:	adc	ip, r0, ip
 3f8:	cmp	r2, #0
 3fc:	bge	3bc <read_basic_type+0xbc>
 400:	ldr	r0, [r8, #52]	; 0x34
 404:	stm	sp, {r3, r4}
 408:	mov	r2, lr
 40c:	mov	r3, ip
 410:	str	r9, [sp, #8]
 414:	bl	ba8 <read_bytes>
 418:	mov	r1, r0
 41c:	mvn	r0, #0
 420:	cmp	r1, #0
 424:	bne	4a8 <read_basic_type+0x1a8>
 428:	ldr	r1, [sl, #4]
 42c:	ldr	r0, [r1, #8]
 430:	bic	r2, r0, #1
 434:	mov	r0, #0
 438:	cmp	r2, #2
 43c:	bne	4a8 <read_basic_type+0x1a8>
 440:	ldr	r2, [r1, #24]
 444:	ldr	r1, [r1, #28]
 448:	rsbs	r3, r2, #31
 44c:	rscs	r3, r1, #0
 450:	blt	47c <read_basic_type+0x17c>
 454:	eor	r3, r2, #8
 458:	orrs	r3, r3, r1
 45c:	beq	4a8 <read_basic_type+0x1a8>
 460:	eor	r2, r2, #16
 464:	orrs	r1, r2, r1
 468:	ldrbeq	r1, [r9]
 46c:	ldrbeq	r2, [r9, #1]
 470:	strbeq	r1, [r9, #1]
 474:	strbeq	r2, [r9]
 478:	b	4f8 <read_basic_type+0x1f8>
 47c:	eor	r3, r2, #32
 480:	orrs	r3, r3, r1
 484:	bne	4b0 <read_basic_type+0x1b0>
 488:	ldrb	r1, [r9]
 48c:	ldrb	r2, [r9, #1]
 490:	ldrb	r3, [r9, #2]
 494:	ldrb	r7, [r9, #3]
 498:	strb	r1, [r9, #3]
 49c:	strb	r7, [r9]
 4a0:	strb	r3, [r9, #1]
 4a4:	strb	r2, [r9, #2]
 4a8:	sub	sp, fp, #28
 4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4b0:	eor	r2, r2, #64	; 0x40
 4b4:	orrs	r1, r2, r1
 4b8:	ldrbeq	r1, [r9, #7]
 4bc:	ldrbeq	r2, [r9]
 4c0:	ldrbeq	r3, [r9, #1]
 4c4:	ldrbeq	r7, [r9, #2]
 4c8:	ldrbeq	r6, [r9, #3]
 4cc:	strbeq	r2, [r9, #7]
 4d0:	strbeq	r1, [r9]
 4d4:	ldrbeq	r1, [r9, #6]
 4d8:	strbeq	r1, [r9, #1]
 4dc:	strbeq	r3, [r9, #6]
 4e0:	ldrbeq	r1, [r9, #5]
 4e4:	strbeq	r1, [r9, #2]
 4e8:	strbeq	r7, [r9, #5]
 4ec:	ldrbeq	r1, [r9, #4]
 4f0:	strbeq	r6, [r9, #4]
 4f4:	strbeq	r1, [r9, #3]
 4f8:	subeq	sp, fp, #28
 4fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 500:	movw	r0, #0
 504:	movw	r1, #0
 508:	movw	r3, #0
 50c:	movw	r2, #422	; 0x1a6
 510:	movt	r0, #0
 514:	movt	r1, #0
 518:	movt	r3, #0
 51c:	bl	0 <__assert_fail>

00000520 <coda_netcdf_cursor_read_int16>:
 520:	mvn	r2, #0
 524:	b	300 <read_basic_type>

00000528 <coda_netcdf_cursor_read_int32>:
 528:	mvn	r2, #0
 52c:	b	300 <read_basic_type>

00000530 <coda_netcdf_cursor_read_float>:
 530:	mvn	r2, #0
 534:	b	300 <read_basic_type>

00000538 <coda_netcdf_cursor_read_double>:
 538:	mvn	r2, #0
 53c:	b	300 <read_basic_type>

00000540 <coda_netcdf_cursor_read_char>:
 540:	mvn	r2, #0
 544:	b	300 <read_basic_type>

00000548 <coda_netcdf_cursor_read_string>:
 548:	push	{r4, r5, fp, lr}
 54c:	add	fp, sp, #8
 550:	mov	r4, r2
 554:	mov	r5, r1
 558:	bl	300 <read_basic_type>
 55c:	mov	r1, r0
 560:	mvn	r0, #0
 564:	cmp	r1, #0
 568:	moveq	r0, #0
 56c:	addeq	r1, r5, r4
 570:	strbeq	r0, [r1, #-1]
 574:	pop	{r4, r5, fp, pc}

00000578 <coda_netcdf_cursor_read_int8_array>:
 578:	b	57c <read_array>

0000057c <read_array>:
 57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 580:	add	fp, sp, #28
 584:	sub	sp, sp, #20
 588:	ldrd	r8, [r0]
 58c:	add	r0, r0, r9, lsl #4
 590:	ldr	r6, [r0, #-8]
 594:	ldr	r0, [r6, #12]
 598:	ldr	r2, [r6, #4]
 59c:	ldr	r7, [r0, #4]
 5a0:	ldr	r3, [r0, #24]
 5a4:	ldrd	r4, [r7, #24]
 5a8:	cmp	r3, #0
 5ac:	str	r1, [sp, #12]
 5b0:	lsr	r7, r4, #3
 5b4:	orr	r5, r7, r5, lsl #29
 5b8:	ldr	r7, [r2, #44]	; 0x2c
 5bc:	mul	r5, r7, r5
 5c0:	beq	650 <read_array+0xd4>
 5c4:	ldr	r7, [r2, #52]	; 0x34
 5c8:	cmp	r7, #1
 5cc:	blt	678 <read_array+0xfc>
 5d0:	ldrd	r2, [r0, #16]
 5d4:	ldr	r0, [r8, #52]	; 0x34
 5d8:	ldr	r9, [sp, #12]
 5dc:	sdiv	r5, r5, r7
 5e0:	asr	r4, r5, #31
 5e4:	str	r5, [sp]
 5e8:	str	r4, [sp, #4]
 5ec:	str	r9, [sp, #8]
 5f0:	bl	ba8 <read_bytes>
 5f4:	mvn	r1, #0
 5f8:	cmp	r0, #0
 5fc:	str	r1, [sp, #16]
 600:	bne	7ec <read_array+0x270>
 604:	add	r9, r9, r5
 608:	mov	sl, #1
 60c:	cmp	sl, r7
 610:	bge	678 <read_array+0xfc>
 614:	ldr	r0, [r6, #12]
 618:	ldr	r1, [r8, #60]	; 0x3c
 61c:	ldrd	r2, [r0, #16]
 620:	ldr	r0, [r8, #52]	; 0x34
 624:	mul	r1, r1, sl
 628:	str	r5, [sp]
 62c:	stmib	sp, {r4, r9}
 630:	adds	r2, r2, r1
 634:	adc	r3, r3, r1, asr #31
 638:	bl	ba8 <read_bytes>
 63c:	add	r9, r9, r5
 640:	add	sl, sl, #1
 644:	cmp	r0, #0
 648:	beq	60c <read_array+0x90>
 64c:	b	7ec <read_array+0x270>
 650:	ldrd	r2, [r0, #16]
 654:	ldr	r0, [r8, #52]	; 0x34
 658:	asr	r7, r5, #31
 65c:	stm	sp, {r5, r7}
 660:	str	r1, [sp, #8]
 664:	bl	ba8 <read_bytes>
 668:	mvn	r1, #0
 66c:	cmp	r0, #0
 670:	str	r1, [sp, #16]
 674:	bne	7ec <read_array+0x270>
 678:	ldr	r0, [r6, #12]
 67c:	mov	r2, #0
 680:	ldr	r0, [r0, #4]
 684:	ldrd	r0, [r0, #24]
 688:	str	r2, [sp, #16]
 68c:	rsbs	r2, r0, #31
 690:	rscs	r2, r1, #0
 694:	blt	6fc <read_array+0x180>
 698:	eor	r2, r0, #8
 69c:	orrs	r2, r2, r1
 6a0:	beq	7ec <read_array+0x270>
 6a4:	eor	r0, r0, #16
 6a8:	orrs	r0, r0, r1
 6ac:	bne	7f8 <read_array+0x27c>
 6b0:	ldr	r0, [r6, #4]
 6b4:	ldr	r0, [r0, #44]	; 0x2c
 6b8:	cmp	r0, #1
 6bc:	blt	7ec <read_array+0x270>
 6c0:	ldr	r7, [sp, #12]
 6c4:	mov	r0, #0
 6c8:	str	r0, [sp, #16]
 6cc:	mov	r0, #0
 6d0:	mov	r1, r7
 6d4:	ldrb	r2, [r1, r0, lsl #1]!
 6d8:	add	r0, r0, #1
 6dc:	ldrb	r3, [r1, #1]
 6e0:	strb	r3, [r1]
 6e4:	strb	r2, [r1, #1]
 6e8:	ldr	r1, [r6, #4]
 6ec:	ldr	r1, [r1, #44]	; 0x2c
 6f0:	cmp	r0, r1
 6f4:	blt	6d0 <read_array+0x154>
 6f8:	b	7ec <read_array+0x270>
 6fc:	eor	r2, r0, #32
 700:	orrs	r2, r2, r1
 704:	bne	764 <read_array+0x1e8>
 708:	ldr	r0, [r6, #4]
 70c:	ldr	r0, [r0, #44]	; 0x2c
 710:	cmp	r0, #1
 714:	blt	7ec <read_array+0x270>
 718:	ldr	r4, [sp, #12]
 71c:	mov	r0, #0
 720:	str	r0, [sp, #16]
 724:	mov	r0, #0
 728:	mov	r1, r4
 72c:	ldrb	r2, [r1, r0, lsl #2]!
 730:	add	r0, r0, #1
 734:	ldrb	r3, [r1, #1]
 738:	ldrb	r7, [r1, #2]
 73c:	ldrb	r5, [r1, #3]
 740:	strb	r5, [r1]
 744:	strb	r7, [r1, #1]
 748:	strb	r3, [r1, #2]
 74c:	strb	r2, [r1, #3]
 750:	ldr	r1, [r6, #4]
 754:	ldr	r1, [r1, #44]	; 0x2c
 758:	cmp	r0, r1
 75c:	blt	728 <read_array+0x1ac>
 760:	b	7ec <read_array+0x270>
 764:	eor	r0, r0, #64	; 0x40
 768:	orrs	r0, r0, r1
 76c:	bne	7f8 <read_array+0x27c>
 770:	ldr	r0, [r6, #4]
 774:	ldr	r0, [r0, #44]	; 0x2c
 778:	cmp	r0, #1
 77c:	blt	7ec <read_array+0x270>
 780:	ldr	r0, [sp, #12]
 784:	mov	r1, #0
 788:	str	r1, [sp, #16]
 78c:	mov	r1, #0
 790:	add	r0, r0, #3
 794:	ldrb	r2, [r0, #4]
 798:	ldrb	r3, [r0, #-3]
 79c:	ldrb	r7, [r0, #-2]
 7a0:	ldrb	r5, [r0, #-1]
 7a4:	ldrb	r4, [r0]
 7a8:	add	r1, r1, #1
 7ac:	strb	r3, [r0, #4]
 7b0:	strb	r2, [r0, #-3]
 7b4:	ldrb	r2, [r0, #3]
 7b8:	strb	r2, [r0, #-2]
 7bc:	strb	r7, [r0, #3]
 7c0:	ldrb	r2, [r0, #2]
 7c4:	strb	r2, [r0, #-1]
 7c8:	strb	r5, [r0, #2]
 7cc:	ldrb	r2, [r0, #1]
 7d0:	strb	r4, [r0, #1]
 7d4:	strb	r2, [r0]
 7d8:	add	r0, r0, #8
 7dc:	ldr	r2, [r6, #4]
 7e0:	ldr	r2, [r2, #44]	; 0x2c
 7e4:	cmp	r1, r2
 7e8:	blt	794 <read_array+0x218>
 7ec:	ldr	r0, [sp, #16]
 7f0:	sub	sp, fp, #28
 7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7f8:	movw	r0, #0
 7fc:	movw	r1, #0
 800:	movw	r3, #0
 804:	movw	r2, #262	; 0x106
 808:	movt	r0, #0
 80c:	movt	r1, #0
 810:	movt	r3, #0
 814:	bl	0 <__assert_fail>

00000818 <coda_netcdf_cursor_read_int16_array>:
 818:	b	57c <read_array>

0000081c <coda_netcdf_cursor_read_int32_array>:
 81c:	b	57c <read_array>

00000820 <coda_netcdf_cursor_read_float_array>:
 820:	b	57c <read_array>

00000824 <coda_netcdf_cursor_read_double_array>:
 824:	b	57c <read_array>

00000828 <coda_netcdf_cursor_read_char_array>:
 828:	b	57c <read_array>

0000082c <coda_netcdf_cursor_read_int8_partial_array>:
 82c:	b	830 <read_partial_array>

00000830 <read_partial_array>:
 830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 834:	add	fp, sp, #28
 838:	sub	sp, sp, #76	; 0x4c
 83c:	ldr	ip, [r0]
 840:	ldr	r5, [r0, #4]
 844:	add	r0, r0, r5, lsl #4
 848:	ldr	r6, [r0, #-8]
 84c:	ldr	r4, [r6, #12]
 850:	ldr	r0, [r4, #4]
 854:	ldr	r7, [r4, #24]
 858:	ldr	r5, [r0, #28]
 85c:	ldr	r0, [r0, #24]
 860:	cmp	r7, #0
 864:	str	r3, [sp, #44]	; 0x2c
 868:	lsr	r0, r0, #3
 86c:	orr	r9, r0, r5, lsl #29
 870:	beq	9cc <read_partial_array+0x19c>
 874:	ldr	r0, [r6, #4]
 878:	mul	r4, r1, r9
 87c:	mvn	r7, #0
 880:	mov	lr, #0
 884:	mov	r8, #0
 888:	mov	r5, #0
 88c:	str	ip, [sp, #24]
 890:	str	r1, [sp, #32]
 894:	str	r9, [sp, #28]
 898:	ldr	r3, [r0, #44]	; 0x2c
 89c:	ldr	r0, [r0, #52]	; 0x34
 8a0:	sdiv	r3, r3, r0
 8a4:	str	r0, [sp, #40]	; 0x28
 8a8:	mul	r0, r3, r9
 8ac:	str	r3, [sp, #20]
 8b0:	mvn	sl, r3
 8b4:	mov	r3, #0
 8b8:	str	r0, [sp, #16]
 8bc:	add	r0, r2, r1
 8c0:	mvn	r0, r0
 8c4:	str	r0, [sp, #36]	; 0x24
 8c8:	ldr	r0, [sp, #36]	; 0x24
 8cc:	ldr	r2, [sp, #40]	; 0x28
 8d0:	cmp	sl, r0
 8d4:	movgt	r0, sl
 8d8:	cmp	lr, r2
 8dc:	bge	a04 <read_partial_array+0x1d4>
 8e0:	sub	r0, r7, r0
 8e4:	cmp	r3, r1
 8e8:	str	r3, [fp, #-32]	; 0xffffffe0
 8ec:	mul	r9, r0, r9
 8f0:	sub	r0, fp, #44	; 0x2c
 8f4:	stm	r0, {r4, r5, r7}
 8f8:	bge	914 <read_partial_array+0xe4>
 8fc:	asr	r0, r9, #31
 900:	subs	r9, r9, r4
 904:	str	r4, [sp, #52]	; 0x34
 908:	sbc	r1, r0, r4, asr #31
 90c:	asr	r0, r4, #31
 910:	b	924 <read_partial_array+0xf4>
 914:	mov	r0, #0
 918:	asr	r1, r9, #31
 91c:	str	r0, [sp, #52]	; 0x34
 920:	mov	r0, #0
 924:	str	r0, [sp, #48]	; 0x30
 928:	ldr	r0, [sp, #44]	; 0x2c
 92c:	ldr	r3, [sp, #24]
 930:	ldr	ip, [r6, #12]
 934:	add	r2, lr, #1
 938:	mov	r4, r1
 93c:	str	r2, [fp, #-48]	; 0xffffffd0
 940:	add	r2, r0, r8
 944:	ldr	r0, [r3, #52]	; 0x34
 948:	ldr	r3, [r3, #60]	; 0x3c
 94c:	ldr	r5, [ip, #16]
 950:	ldr	r7, [ip, #20]
 954:	str	r9, [sp]
 958:	stmib	sp, {r1, r2}
 95c:	ldr	r1, [sp, #52]	; 0x34
 960:	adds	r2, r5, r1
 964:	ldr	r1, [sp, #48]	; 0x30
 968:	adc	r7, r7, r1
 96c:	mul	r1, r3, lr
 970:	adds	r2, r2, r1
 974:	adc	r3, r7, r1, asr #31
 978:	bl	ba8 <read_bytes>
 97c:	ldr	r1, [sp, #20]
 980:	ldr	r7, [fp, #-36]	; 0xffffffdc
 984:	ldr	r3, [fp, #-32]	; 0xffffffe0
 988:	ldr	r5, [fp, #-40]	; 0xffffffd8
 98c:	adds	r8, r9, r8
 990:	ldr	lr, [fp, #-48]	; 0xffffffd0
 994:	ldr	r9, [sp, #28]
 998:	adc	r5, r4, r5
 99c:	sub	sl, sl, r1
 9a0:	sub	r7, r7, r1
 9a4:	add	r3, r3, r1
 9a8:	ldr	r1, [sp, #16]
 9ac:	ldr	r4, [fp, #-44]	; 0xffffffd4
 9b0:	cmp	r0, #0
 9b4:	sub	r4, r4, r1
 9b8:	ldr	r1, [sp, #32]
 9bc:	beq	8c8 <read_partial_array+0x98>
 9c0:	mvn	r0, #0
 9c4:	sub	sp, fp, #28
 9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 9cc:	ldrd	r4, [r4, #16]
 9d0:	mul	r7, r9, r2
 9d4:	ldr	r0, [ip, #52]	; 0x34
 9d8:	mul	r1, r9, r1
 9dc:	asr	r2, r7, #31
 9e0:	str	r7, [sp]
 9e4:	stmib	sp, {r2, r3}
 9e8:	adds	r2, r4, r1
 9ec:	adc	r3, r5, r1, asr #31
 9f0:	bl	ba8 <read_bytes>
 9f4:	mov	r1, r0
 9f8:	mvn	r0, #0
 9fc:	cmp	r1, #0
 a00:	bne	b6c <read_partial_array+0x33c>
 a04:	ldr	r0, [r6, #12]
 a08:	ldr	r0, [r0, #4]
 a0c:	ldr	r2, [r0, #24]
 a10:	ldr	r1, [r0, #28]
 a14:	mov	r0, #0
 a18:	rsbs	r3, r2, #31
 a1c:	rscs	r3, r1, #0
 a20:	blt	a84 <read_partial_array+0x254>
 a24:	eor	r3, r2, #8
 a28:	orrs	r3, r3, r1
 a2c:	beq	b6c <read_partial_array+0x33c>
 a30:	eor	r2, r2, #16
 a34:	orrs	r1, r2, r1
 a38:	bne	b74 <read_partial_array+0x344>
 a3c:	ldr	r1, [r6, #4]
 a40:	ldr	r1, [r1, #44]	; 0x2c
 a44:	cmp	r1, #1
 a48:	blt	b6c <read_partial_array+0x33c>
 a4c:	ldr	r5, [sp, #44]	; 0x2c
 a50:	mov	r0, #0
 a54:	mov	r1, #0
 a58:	mov	r2, r5
 a5c:	ldrb	r3, [r2, r1, lsl #1]!
 a60:	add	r1, r1, #1
 a64:	ldrb	r7, [r2, #1]
 a68:	strb	r7, [r2]
 a6c:	strb	r3, [r2, #1]
 a70:	ldr	r2, [r6, #4]
 a74:	ldr	r2, [r2, #44]	; 0x2c
 a78:	cmp	r1, r2
 a7c:	blt	a58 <read_partial_array+0x228>
 a80:	b	b6c <read_partial_array+0x33c>
 a84:	eor	r3, r2, #32
 a88:	orrs	r3, r3, r1
 a8c:	bne	ae8 <read_partial_array+0x2b8>
 a90:	ldr	r1, [r6, #4]
 a94:	ldr	r1, [r1, #44]	; 0x2c
 a98:	cmp	r1, #1
 a9c:	blt	b6c <read_partial_array+0x33c>
 aa0:	ldr	ip, [sp, #44]	; 0x2c
 aa4:	mov	r0, #0
 aa8:	mov	r1, #0
 aac:	mov	r2, ip
 ab0:	ldrb	r3, [r2, r1, lsl #2]!
 ab4:	add	r1, r1, #1
 ab8:	ldrb	r7, [r2, #1]
 abc:	ldrb	r4, [r2, #2]
 ac0:	ldrb	r5, [r2, #3]
 ac4:	strb	r5, [r2]
 ac8:	strb	r4, [r2, #1]
 acc:	strb	r7, [r2, #2]
 ad0:	strb	r3, [r2, #3]
 ad4:	ldr	r2, [r6, #4]
 ad8:	ldr	r2, [r2, #44]	; 0x2c
 adc:	cmp	r1, r2
 ae0:	blt	aac <read_partial_array+0x27c>
 ae4:	b	b6c <read_partial_array+0x33c>
 ae8:	eor	r2, r2, #64	; 0x40
 aec:	orrs	r1, r2, r1
 af0:	bne	b74 <read_partial_array+0x344>
 af4:	ldr	r1, [r6, #4]
 af8:	ldr	r1, [r1, #44]	; 0x2c
 afc:	cmp	r1, #1
 b00:	blt	b6c <read_partial_array+0x33c>
 b04:	ldr	r0, [sp, #44]	; 0x2c
 b08:	mov	r2, #0
 b0c:	add	r1, r0, #3
 b10:	mov	r0, #0
 b14:	ldrb	r3, [r1, #4]
 b18:	ldrb	r7, [r1, #-3]
 b1c:	ldrb	r4, [r1, #-2]
 b20:	ldrb	r5, [r1, #-1]
 b24:	ldrb	ip, [r1]
 b28:	add	r2, r2, #1
 b2c:	strb	r7, [r1, #4]
 b30:	strb	r3, [r1, #-3]
 b34:	ldrb	r3, [r1, #3]
 b38:	strb	r3, [r1, #-2]
 b3c:	strb	r4, [r1, #3]
 b40:	ldrb	r3, [r1, #2]
 b44:	strb	r3, [r1, #-1]
 b48:	strb	r5, [r1, #2]
 b4c:	ldrb	r3, [r1, #1]
 b50:	strb	ip, [r1, #1]
 b54:	strb	r3, [r1]
 b58:	add	r1, r1, #8
 b5c:	ldr	r3, [r6, #4]
 b60:	ldr	r3, [r3, #44]	; 0x2c
 b64:	cmp	r2, r3
 b68:	blt	b14 <read_partial_array+0x2e4>
 b6c:	sub	sp, fp, #28
 b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 b74:	movw	r0, #0
 b78:	movw	r1, #0
 b7c:	movw	r3, #0
 b80:	movw	r2, #347	; 0x15b
 b84:	movt	r0, #0
 b88:	movt	r1, #0
 b8c:	movt	r3, #0
 b90:	bl	0 <__assert_fail>

00000b94 <coda_netcdf_cursor_read_int16_partial_array>:
 b94:	b	830 <read_partial_array>

00000b98 <coda_netcdf_cursor_read_int32_partial_array>:
 b98:	b	830 <read_partial_array>

00000b9c <coda_netcdf_cursor_read_float_partial_array>:
 b9c:	b	830 <read_partial_array>

00000ba0 <coda_netcdf_cursor_read_double_partial_array>:
 ba0:	b	830 <read_partial_array>

00000ba4 <coda_netcdf_cursor_read_char_partial_array>:
 ba4:	b	830 <read_partial_array>

00000ba8 <read_bytes>:
 ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 bac:	add	fp, sp, #28
 bb0:	sub	sp, sp, #68	; 0x44
 bb4:	ldr	r7, [r0, #48]	; 0x30
 bb8:	mov	sl, r2
 bbc:	ldr	r1, [fp, #12]
 bc0:	ldr	r2, [fp, #8]
 bc4:	ldr	ip, [fp, #16]
 bc8:	mov	r9, r3
 bcc:	cmp	r7, #0
 bd0:	beq	c54 <read_bytes+0xac>
 bd4:	mov	r6, r0
 bd8:	adds	lr, r2, sl
 bdc:	ldr	r4, [r6, #40]!	; 0x28
 be0:	adc	r5, r1, r9
 be4:	ldr	r3, [r6, #4]
 be8:	subs	r4, r4, lr
 bec:	sbcs	r3, r3, r5
 bf0:	bcs	c94 <read_bytes+0xec>
 bf4:	ldr	r0, [r0, #16]
 bf8:	cmp	r0, #1
 bfc:	bls	c78 <read_bytes+0xd0>
 c00:	add	r8, sp, #47	; 0x2f
 c04:	mov	r0, r2
 c08:	mov	r2, r8
 c0c:	bl	0 <coda_str64>
 c10:	add	r7, sp, #26
 c14:	mov	r0, sl
 c18:	mov	r1, r9
 c1c:	mov	r2, r7
 c20:	bl	0 <coda_str64>
 c24:	ldrd	r0, [r6]
 c28:	add	r4, sp, #5
 c2c:	mov	r2, r4
 c30:	bl	0 <coda_str64>
 c34:	movw	r1, #0
 c38:	mvn	r0, #300	; 0x12c
 c3c:	mov	r2, r8
 c40:	mov	r3, r7
 c44:	str	r4, [sp]
 c48:	movt	r1, #0
 c4c:	bl	0 <coda_set_error>
 c50:	b	c88 <read_bytes+0xe0>
 c54:	ldr	r3, [r0, #16]
 c58:	cmp	r3, #2
 c5c:	bcs	cf0 <read_bytes+0x148>
 c60:	ldrd	r4, [r0, #8]
 c64:	adds	r3, r2, sl
 c68:	adc	r1, r1, r9
 c6c:	subs	r3, r4, r3
 c70:	sbcs	r1, r5, r1
 c74:	bcs	cac <read_bytes+0x104>
 c78:	movw	r1, #0
 c7c:	mvn	r0, #300	; 0x12c
 c80:	movt	r1, #0
 c84:	bl	0 <coda_set_error>
 c88:	mvn	r0, #0
 c8c:	sub	sp, fp, #28
 c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c94:	add	r1, r7, sl
 c98:	mov	r0, ip
 c9c:	bl	0 <memcpy>
 ca0:	mov	r0, #0
 ca4:	sub	sp, fp, #28
 ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 cac:	ldr	r0, [r0, #56]	; 0x38
 cb0:	mov	r1, ip
 cb4:	mov	r3, sl
 cb8:	bl	0 <pread>
 cbc:	mov	r1, r0
 cc0:	mov	r0, #0
 cc4:	cmn	r1, #1
 cc8:	bgt	c8c <read_bytes+0xe4>
 ccc:	bl	0 <__errno_location>
 cd0:	ldr	r0, [r0]
 cd4:	bl	0 <strerror>
 cd8:	movw	r1, #0
 cdc:	mov	r2, r0
 ce0:	mvn	r0, #21
 ce4:	movt	r1, #0
 ce8:	bl	0 <coda_set_error>
 cec:	b	c88 <read_bytes+0xe0>
 cf0:	movw	r0, #0
 cf4:	movw	r1, #0
 cf8:	movw	r3, #0
 cfc:	mov	r2, #83	; 0x53
 d00:	movt	r0, #0
 d04:	movt	r1, #0
 d08:	movt	r3, #0
 d0c:	bl	0 <__assert_fail>
