
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-dim.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_record_field_available_status>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	sub	sp, sp, #12
       8:	mov	r9, r0
       c:	mov	r7, r1
      10:	ldr	r0, [pc, #608]	; 278 <get_record_field_available_status+0x278>
      14:	mov	r1, sp
      18:	mov	r8, r2
      1c:	bl	0 <coda_cursor_get_type_class>
      20:	cmp	r0, #0
      24:	bne	210 <get_record_field_available_status+0x210>
      28:	ldr	r3, [sp]
      2c:	cmp	r3, #0
      30:	beq	180 <get_record_field_available_status+0x180>
      34:	cmp	r3, #1
      38:	bne	15c <get_record_field_available_status+0x15c>
      3c:	ldr	r6, [pc, #568]	; 27c <get_record_field_available_status+0x27c>
      40:	lsl	r1, r7, #2
      44:	add	r3, r1, r7
      48:	ldr	r2, [r6, #3360]	; 0xd20
      4c:	add	r3, r6, r3, lsl #4
      50:	cmp	r7, r2
      54:	ldr	r3, [r3, #800]	; 0x320
      58:	bge	264 <get_record_field_available_status+0x264>
      5c:	add	r1, r1, r7
      60:	cmp	r7, #0
      64:	add	r1, r6, r1, lsl #4
      68:	streq	r7, [r6, #844]	; 0x34c
      6c:	add	r7, r7, #1
      70:	ldr	lr, [r1, #844]	; 0x34c
      74:	ldr	ip, [r1, #840]	; 0x348
      78:	lsl	r4, r7, #2
      7c:	add	r2, r4, r7
      80:	ldr	r0, [r1, #804]	; 0x324
      84:	mul	ip, ip, lr
      88:	add	r2, r6, r2, lsl #4
      8c:	add	r0, r3, r0
      90:	cmp	r0, r3
      94:	str	ip, [r2, #844]	; 0x34c
      98:	ble	254 <get_record_field_available_status+0x254>
      9c:	add	r2, r0, #1
      a0:	add	r3, r3, #1
      a4:	ldr	r0, [pc, #468]	; 280 <get_record_field_available_status+0x280>
      a8:	mov	r5, #1
      ac:	add	r3, r0, r3, lsl #2
      b0:	add	r0, r0, r2, lsl #2
      b4:	ldr	r2, [r3, #68]	; 0x44
      b8:	add	r3, r3, #4
      bc:	cmp	r2, #0
      c0:	ldrne	r2, [r3, #100]	; 0x64
      c4:	ldrne	ip, [r1, #844]	; 0x34c
      c8:	ldreq	r2, [r3, #-4]
      cc:	ldrne	r2, [r2, ip, lsl #2]
      d0:	cmp	r3, r0
      d4:	mul	r5, r2, r5
      d8:	bne	b4 <get_record_field_available_status+0xb4>
      dc:	cmp	r5, #0
      e0:	ble	170 <get_record_field_available_status+0x170>
      e4:	ldr	r0, [pc, #396]	; 278 <get_record_field_available_status+0x278>
      e8:	bl	0 <coda_cursor_goto_first_array_element>
      ec:	cmp	r0, #0
      f0:	bne	218 <get_record_field_available_status+0x218>
      f4:	add	r4, r4, r7
      f8:	add	r9, r9, #1
      fc:	add	r6, r6, r4, lsl #4
     100:	sub	fp, r5, #1
     104:	mov	r4, #0
     108:	b	124 <get_record_field_available_status+0x124>
     10c:	ldr	r3, [r6, #844]	; 0x34c
     110:	add	r3, r3, #1
     114:	str	r3, [r6, #844]	; 0x34c
     118:	add	r4, r4, #1
     11c:	cmp	r5, r4
     120:	ble	220 <get_record_field_available_status+0x220>
     124:	mov	r2, r8
     128:	mov	r1, r7
     12c:	mov	r0, r9
     130:	bl	0 <get_record_field_available_status>
     134:	subs	sl, r0, #0
     138:	bne	234 <get_record_field_available_status+0x234>
     13c:	cmp	fp, r4
     140:	ble	118 <get_record_field_available_status+0x118>
     144:	ldr	r0, [pc, #300]	; 278 <get_record_field_available_status+0x278>
     148:	bl	0 <coda_cursor_goto_next_array_element>
     14c:	cmp	r0, #0
     150:	beq	10c <get_record_field_available_status+0x10c>
     154:	bl	0 <handle_coda_error>
     158:	b	10c <get_record_field_available_status+0x10c>
     15c:	ldr	r3, [pc, #288]	; 284 <get_record_field_available_status+0x284>
     160:	ldr	r2, [pc, #288]	; 288 <get_record_field_available_status+0x288>
     164:	ldr	r1, [pc, #288]	; 28c <get_record_field_available_status+0x28c>
     168:	ldr	r0, [pc, #288]	; 290 <get_record_field_available_status+0x290>
     16c:	bl	0 <__assert_fail>
     170:	mov	sl, #0
     174:	mov	r0, sl
     178:	add	sp, sp, #12
     17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     180:	ldr	r6, [pc, #244]	; 27c <get_record_field_available_status+0x27c>
     184:	add	r4, r8, #872	; 0x368
     188:	add	r0, r6, #144	; 0x90
     18c:	add	r3, r6, r4, lsl #2
     190:	add	r2, sp, #4
     194:	ldr	r1, [r3, #4]
     198:	bl	0 <coda_cursor_get_record_field_available_status>
     19c:	cmp	r0, #0
     1a0:	bne	24c <get_record_field_available_status+0x24c>
     1a4:	ldr	r3, [sp, #4]
     1a8:	cmp	r3, #0
     1ac:	beq	170 <get_record_field_available_status+0x170>
     1b0:	ldr	r3, [r6, #3748]	; 0xea4
     1b4:	sub	r3, r3, #1
     1b8:	cmp	r8, r3
     1bc:	beq	200 <get_record_field_available_status+0x200>
     1c0:	add	r6, r6, r4, lsl #2
     1c4:	ldr	r0, [pc, #172]	; 278 <get_record_field_available_status+0x278>
     1c8:	ldr	r1, [r6, #4]
     1cc:	bl	0 <coda_cursor_goto_record_field_by_index>
     1d0:	cmp	r0, #0
     1d4:	bne	25c <get_record_field_available_status+0x25c>
     1d8:	add	r2, r8, #1
     1dc:	mov	r1, r7
     1e0:	add	r0, r9, #1
     1e4:	bl	0 <get_record_field_available_status>
     1e8:	str	r0, [sp, #4]
     1ec:	ldr	r0, [pc, #132]	; 278 <get_record_field_available_status+0x278>
     1f0:	bl	0 <coda_cursor_goto_parent>
     1f4:	ldr	r3, [sp, #4]
     1f8:	cmp	r3, #0
     1fc:	beq	170 <get_record_field_available_status+0x170>
     200:	mov	sl, #1
     204:	mov	r0, sl
     208:	add	sp, sp, #12
     20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     210:	bl	0 <handle_coda_error>
     214:	b	28 <get_record_field_available_status+0x28>
     218:	bl	0 <handle_coda_error>
     21c:	b	f4 <get_record_field_available_status+0xf4>
     220:	ldr	r0, [pc, #80]	; 278 <get_record_field_available_status+0x278>
     224:	bl	0 <coda_cursor_goto_parent>
     228:	mov	r0, sl
     22c:	add	sp, sp, #12
     230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     234:	ldr	r0, [pc, #60]	; 278 <get_record_field_available_status+0x278>
     238:	bl	0 <coda_cursor_goto_parent>
     23c:	mov	sl, #1
     240:	mov	r0, sl
     244:	add	sp, sp, #12
     248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     24c:	bl	0 <handle_coda_error>
     250:	b	1a4 <get_record_field_available_status+0x1a4>
     254:	mov	r5, #1
     258:	b	e4 <get_record_field_available_status+0xe4>
     25c:	bl	0 <handle_coda_error>
     260:	b	1d8 <get_record_field_available_status+0x1d8>
     264:	ldr	r3, [pc, #24]	; 284 <get_record_field_available_status+0x284>
     268:	ldr	r2, [pc, #36]	; 294 <get_record_field_available_status+0x294>
     26c:	ldr	r1, [pc, #24]	; 28c <get_record_field_available_status+0x28c>
     270:	ldr	r0, [pc, #32]	; 298 <get_record_field_available_status+0x298>
     274:	bl	0 <__assert_fail>
     278:	.word	0x00000090
	...
     288:	.word	0x000002d9
     28c:	.word	0x00000000
     290:	.word	0x0000007c
     294:	.word	0x0000027e
     298:	.word	0x00000054

0000029c <get_all_dims_for_array>:
     29c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2a0:	sub	sp, sp, #44	; 0x2c
     2a4:	mov	r8, r0
     2a8:	mov	r5, r1
     2ac:	ldr	r0, [pc, #1072]	; 6e4 <get_all_dims_for_array+0x448>
     2b0:	mov	r1, sp
     2b4:	mov	r9, r2
     2b8:	bl	0 <coda_cursor_get_type_class>
     2bc:	cmp	r0, #0
     2c0:	bne	568 <get_all_dims_for_array+0x2cc>
     2c4:	ldr	r3, [sp]
     2c8:	cmp	r3, #5
     2cc:	ldrls	pc, [pc, r3, lsl #2]
     2d0:	b	554 <get_all_dims_for_array+0x2b8>
     2d4:	.word	0x000004a8
     2d8:	.word	0x0000038c
     2dc:	.word	0x00000554
     2e0:	.word	0x00000554
     2e4:	.word	0x000002ec
     2e8:	.word	0x000002ec
     2ec:	ldr	r6, [pc, #1012]	; 6e8 <get_all_dims_for_array+0x44c>
     2f0:	ldr	r2, [r6, #3360]	; 0xd20
     2f4:	cmp	r5, r2
     2f8:	bne	6bc <get_all_dims_for_array+0x420>
     2fc:	cmp	r3, #4
     300:	beq	5b0 <get_all_dims_for_array+0x314>
     304:	add	r1, sp, #8
     308:	add	r0, r6, #144	; 0x90
     30c:	bl	0 <coda_cursor_get_byte_size>
     310:	cmp	r0, #0
     314:	bne	5d0 <get_all_dims_for_array+0x334>
     318:	ldrd	r0, [sp, #8]
     31c:	add	r5, r5, r5, lsl #2
     320:	ldr	r2, [pc, #964]	; 6ec <get_all_dims_for_array+0x450>
     324:	add	r4, r6, r5, lsl #4
     328:	ldr	r3, [r4, #800]	; 0x320
     32c:	ldr	r5, [r4, #844]	; 0x34c
     330:	add	r4, r2, r3, lsl #2
     334:	mov	lr, r4
     338:	ldr	r4, [r4, #108]	; 0x6c
     33c:	str	r0, [r4, r5, lsl #2]
     340:	ldr	r4, [lr, #4]
     344:	cmn	r4, #1
     348:	moveq	r3, lr
     34c:	streq	r0, [lr, #4]
     350:	streq	r0, [r3, #36]	; 0x24
     354:	beq	384 <get_all_dims_for_array+0xe8>
     358:	add	r3, r3, #8
     35c:	asr	r5, r4, #31
     360:	add	r3, r2, r3, lsl #2
     364:	cmp	r4, r0
     368:	sbcs	r4, r5, r1
     36c:	ldr	r4, [r3, #4]
     370:	strlt	r0, [lr, #4]
     374:	cmp	r0, r4
     378:	asr	r5, r4, #31
     37c:	sbcs	r2, r1, r5
     380:	strlt	r0, [r3, #4]
     384:	add	sp, sp, #44	; 0x2c
     388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     38c:	ldr	r6, [pc, #852]	; 6e8 <get_all_dims_for_array+0x44c>
     390:	lsl	r4, r5, #2
     394:	add	r3, r4, r5
     398:	ldr	r2, [r6, #3360]	; 0xd20
     39c:	add	r3, r6, r3, lsl #4
     3a0:	cmp	r5, r2
     3a4:	ldr	r7, [r3, #800]	; 0x320
     3a8:	beq	5f4 <get_all_dims_for_array+0x358>
     3ac:	add	r2, r4, r5
     3b0:	cmp	r5, #0
     3b4:	add	r2, r6, r2, lsl #4
     3b8:	streq	r5, [r6, #844]	; 0x34c
     3bc:	add	r5, r5, #1
     3c0:	ldr	ip, [r2, #844]	; 0x34c
     3c4:	ldr	r1, [r2, #840]	; 0x348
     3c8:	lsl	r4, r5, #2
     3cc:	add	r3, r4, r5
     3d0:	ldr	r0, [r2, #804]	; 0x324
     3d4:	mul	r1, r1, ip
     3d8:	add	r3, r6, r3, lsl #4
     3dc:	add	r0, r7, r0
     3e0:	cmp	r7, r0
     3e4:	str	r1, [r3, #844]	; 0x34c
     3e8:	bge	5d8 <get_all_dims_for_array+0x33c>
     3ec:	add	r3, r7, #1
     3f0:	add	r1, r0, #1
     3f4:	ldr	r0, [pc, #752]	; 6ec <get_all_dims_for_array+0x450>
     3f8:	mov	r7, #1
     3fc:	add	r3, r0, r3, lsl #2
     400:	add	r0, r0, r1, lsl #2
     404:	ldr	r1, [r3, #68]	; 0x44
     408:	add	r3, r3, #4
     40c:	cmp	r1, #0
     410:	ldrne	r1, [r3, #100]	; 0x64
     414:	ldrne	ip, [r2, #844]	; 0x34c
     418:	ldreq	r1, [r3, #-4]
     41c:	ldrne	r1, [r1, ip, lsl #2]
     420:	cmp	r3, r0
     424:	mul	r7, r1, r7
     428:	bne	404 <get_all_dims_for_array+0x168>
     42c:	cmp	r7, #0
     430:	subgt	sl, r7, #1
     434:	ble	384 <get_all_dims_for_array+0xe8>
     438:	ldr	r0, [pc, #676]	; 6e4 <get_all_dims_for_array+0x448>
     43c:	bl	0 <coda_cursor_goto_first_array_element>
     440:	cmp	r0, #0
     444:	bne	5ec <get_all_dims_for_array+0x350>
     448:	add	r4, r4, r5
     44c:	ldr	fp, [pc, #656]	; 6e4 <get_all_dims_for_array+0x448>
     450:	add	r4, r6, r4, lsl #4
     454:	add	r8, r8, #1
     458:	mov	r6, #0
     45c:	b	478 <get_all_dims_for_array+0x1dc>
     460:	ldr	r3, [r4, #844]	; 0x34c
     464:	add	r3, r3, #1
     468:	str	r3, [r4, #844]	; 0x34c
     46c:	add	r6, r6, #1
     470:	cmp	r6, r7
     474:	bge	598 <get_all_dims_for_array+0x2fc>
     478:	mov	r2, r9
     47c:	mov	r1, r5
     480:	mov	r0, r8
     484:	bl	29c <get_all_dims_for_array>
     488:	cmp	r6, sl
     48c:	bge	46c <get_all_dims_for_array+0x1d0>
     490:	mov	r0, fp
     494:	bl	0 <coda_cursor_goto_next_array_element>
     498:	cmp	r0, #0
     49c:	beq	460 <get_all_dims_for_array+0x1c4>
     4a0:	bl	0 <handle_coda_error>
     4a4:	b	460 <get_all_dims_for_array+0x1c4>
     4a8:	ldr	r6, [pc, #568]	; 6e8 <get_all_dims_for_array+0x44c>
     4ac:	add	r4, r9, #872	; 0x368
     4b0:	add	r0, r6, #144	; 0x90
     4b4:	add	r3, r6, r4, lsl #2
     4b8:	add	r2, sp, #8
     4bc:	ldr	r1, [r3, #4]
     4c0:	bl	0 <coda_cursor_get_record_field_available_status>
     4c4:	cmp	r0, #0
     4c8:	bne	5a8 <get_all_dims_for_array+0x30c>
     4cc:	ldr	r3, [sp, #8]
     4d0:	cmp	r3, #0
     4d4:	bne	570 <get_all_dims_for_array+0x2d4>
     4d8:	ldr	r2, [r6, #3360]	; 0xd20
     4dc:	add	r2, r2, r2, lsl #2
     4e0:	lsl	r4, r2, #4
     4e4:	add	r0, r6, r4
     4e8:	ldr	r1, [r0, #804]	; 0x324
     4ec:	ldr	r2, [r0, #800]	; 0x320
     4f0:	cmp	r1, #0
     4f4:	ble	384 <get_all_dims_for_array+0xe8>
     4f8:	add	r1, r2, #1
     4fc:	ldr	r2, [pc, #488]	; 6ec <get_all_dims_for_array+0x450>
     500:	add	r4, r4, #804	; 0x324
     504:	add	r4, r6, r4
     508:	add	r2, r2, r1, lsl #2
     50c:	mov	ip, r3
     510:	b	528 <get_all_dims_for_array+0x28c>
     514:	ldr	r1, [r0, #804]	; 0x324
     518:	add	r3, r3, #1
     51c:	cmp	r1, r3
     520:	add	r2, r2, #4
     524:	ble	384 <get_all_dims_for_array+0xe8>
     528:	ldr	r1, [r4, #4]!
     52c:	cmn	r1, #1
     530:	bne	514 <get_all_dims_for_array+0x278>
     534:	ldr	r1, [r2, #104]	; 0x68
     538:	ldr	lr, [r0, #844]	; 0x34c
     53c:	str	ip, [r1, lr, lsl #2]
     540:	ldr	r1, [r2]
     544:	str	ip, [r2, #32]
     548:	cmn	r1, #1
     54c:	streq	ip, [r2]
     550:	b	514 <get_all_dims_for_array+0x278>
     554:	ldr	r3, [pc, #404]	; 6f0 <get_all_dims_for_array+0x454>
     558:	ldr	r2, [pc, #404]	; 6f4 <get_all_dims_for_array+0x458>
     55c:	ldr	r1, [pc, #404]	; 6f8 <get_all_dims_for_array+0x45c>
     560:	ldr	r0, [pc, #404]	; 6fc <get_all_dims_for_array+0x460>
     564:	bl	0 <__assert_fail>
     568:	bl	0 <handle_coda_error>
     56c:	b	2c4 <get_all_dims_for_array+0x28>
     570:	add	r4, r6, r4, lsl #2
     574:	ldr	r0, [pc, #360]	; 6e4 <get_all_dims_for_array+0x448>
     578:	ldr	r1, [r4, #4]
     57c:	bl	0 <coda_cursor_goto_record_field_by_index>
     580:	cmp	r0, #0
     584:	bne	6ac <get_all_dims_for_array+0x410>
     588:	add	r2, r9, #1
     58c:	mov	r1, r5
     590:	add	r0, r8, #1
     594:	bl	29c <get_all_dims_for_array>
     598:	ldr	r0, [pc, #324]	; 6e4 <get_all_dims_for_array+0x448>
     59c:	bl	0 <coda_cursor_goto_parent>
     5a0:	add	sp, sp, #44	; 0x2c
     5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5a8:	bl	0 <handle_coda_error>
     5ac:	b	4cc <get_all_dims_for_array+0x230>
     5b0:	add	r1, sp, #4
     5b4:	add	r0, r6, #144	; 0x90
     5b8:	bl	0 <coda_cursor_get_string_length>
     5bc:	cmp	r0, #0
     5c0:	bne	5e4 <get_all_dims_for_array+0x348>
     5c4:	ldr	r0, [sp, #4]
     5c8:	asr	r1, r0, #31
     5cc:	b	31c <get_all_dims_for_array+0x80>
     5d0:	bl	0 <handle_coda_error>
     5d4:	b	318 <get_all_dims_for_array+0x7c>
     5d8:	mov	sl, #0
     5dc:	mov	r7, #1
     5e0:	b	438 <get_all_dims_for_array+0x19c>
     5e4:	bl	0 <handle_coda_error>
     5e8:	b	5c4 <get_all_dims_for_array+0x328>
     5ec:	bl	0 <handle_coda_error>
     5f0:	b	448 <get_all_dims_for_array+0x1ac>
     5f4:	add	r8, sp, #8
     5f8:	mov	r2, r8
     5fc:	add	r1, sp, #4
     600:	add	r0, r6, #144	; 0x90
     604:	bl	0 <coda_cursor_get_array_dim>
     608:	cmp	r0, #0
     60c:	bne	6b4 <get_all_dims_for_array+0x418>
     610:	add	r5, r4, r5
     614:	ldr	r2, [sp, #4]
     618:	lsl	r4, r5, #4
     61c:	add	r0, r6, r4
     620:	ldr	r3, [r0, #804]	; 0x324
     624:	cmp	r3, r2
     628:	bne	6d0 <get_all_dims_for_array+0x434>
     62c:	cmp	r3, #0
     630:	ble	384 <get_all_dims_for_array+0xe8>
     634:	add	r7, r7, #1
     638:	ldr	r3, [pc, #172]	; 6ec <get_all_dims_for_array+0x450>
     63c:	add	r4, r4, #804	; 0x324
     640:	add	r4, r6, r4
     644:	add	r3, r3, r7, lsl #2
     648:	mov	r2, #0
     64c:	b	664 <get_all_dims_for_array+0x3c8>
     650:	ldr	r1, [r0, #804]	; 0x324
     654:	add	r2, r2, #1
     658:	cmp	r1, r2
     65c:	add	r3, r3, #4
     660:	ble	384 <get_all_dims_for_array+0xe8>
     664:	ldr	r1, [r4, #4]!
     668:	cmn	r1, #1
     66c:	bne	650 <get_all_dims_for_array+0x3b4>
     670:	ldr	ip, [r3, #104]	; 0x68
     674:	ldr	lr, [r0, #844]	; 0x34c
     678:	ldr	r1, [r8, r2, lsl #2]
     67c:	str	r1, [ip, lr, lsl #2]
     680:	ldr	ip, [r3]
     684:	cmn	ip, #1
     688:	streq	r1, [r3]
     68c:	streq	r1, [r3, #32]
     690:	beq	650 <get_all_dims_for_array+0x3b4>
     694:	cmp	r1, ip
     698:	ldr	ip, [r3, #32]
     69c:	strgt	r1, [r3]
     6a0:	cmp	r1, ip
     6a4:	strlt	r1, [r3, #32]
     6a8:	b	650 <get_all_dims_for_array+0x3b4>
     6ac:	bl	0 <handle_coda_error>
     6b0:	b	588 <get_all_dims_for_array+0x2ec>
     6b4:	bl	0 <handle_coda_error>
     6b8:	b	610 <get_all_dims_for_array+0x374>
     6bc:	ldr	r3, [pc, #44]	; 6f0 <get_all_dims_for_array+0x454>
     6c0:	mov	r2, #252	; 0xfc
     6c4:	ldr	r1, [pc, #44]	; 6f8 <get_all_dims_for_array+0x45c>
     6c8:	ldr	r0, [pc, #48]	; 700 <get_all_dims_for_array+0x464>
     6cc:	bl	0 <__assert_fail>
     6d0:	ldr	r3, [pc, #24]	; 6f0 <get_all_dims_for_array+0x454>
     6d4:	mov	r2, #125	; 0x7d
     6d8:	ldr	r1, [pc, #24]	; 6f8 <get_all_dims_for_array+0x45c>
     6dc:	ldr	r0, [pc, #32]	; 704 <get_all_dims_for_array+0x468>
     6e0:	bl	0 <__assert_fail>
     6e4:	.word	0x00000090
	...
     6f0:	.word	0x00000024
     6f4:	.word	0x00000126
     6f8:	.word	0x00000000
     6fc:	.word	0x0000007c
     700:	.word	0x000000a4
     704:	.word	0x00000080

00000708 <dim_info_init>:
     708:	ldr	r3, [pc, #20]	; 724 <dim_info_init+0x1c>
     70c:	mov	r2, #0
     710:	mvn	r1, #0
     714:	str	r1, [r3, #104]	; 0x68
     718:	str	r2, [r3]
     71c:	str	r2, [r3, #68]	; 0x44
     720:	bx	lr
     724:	.word	0x00000000

00000728 <dim_info_done>:
     728:	bx	lr

0000072c <print_all_distinct_dims>:
     72c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     730:	sub	sp, sp, #12
     734:	ldr	r5, [pc, #432]	; 8ec <print_all_distinct_dims+0x1c0>
     738:	ldr	r3, [r5]
     73c:	cmp	r3, r0
     740:	ble	8d8 <print_all_distinct_dims+0x1ac>
     744:	add	r3, r0, #18
     748:	mov	r4, r0
     74c:	ldr	r3, [r5, r3, lsl #2]
     750:	cmp	r3, #0
     754:	bne	760 <print_all_distinct_dims+0x34>
     758:	add	sp, sp, #12
     75c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     760:	lsl	r7, r0, #2
     764:	add	r9, r5, r7
     768:	ldr	r8, [r9, #4]
     76c:	add	r8, r8, #1
     770:	lsl	r8, r8, #2
     774:	mov	r0, r8
     778:	bl	0 <malloc>
     77c:	subs	r6, r0, #0
     780:	beq	8a8 <print_all_distinct_dims+0x17c>
     784:	mov	r1, #0
     788:	mov	r2, r8
     78c:	mov	r0, r6
     790:	bl	0 <memset>
     794:	add	r3, r5, r4, lsl #2
     798:	ldr	r3, [r3, #140]	; 0x8c
     79c:	add	r3, r5, r3, lsl #3
     7a0:	ldrd	r0, [r3, #232]	; 0xe8
     7a4:	cmp	r0, #1
     7a8:	sbcs	r3, r1, #0
     7ac:	blt	7d8 <print_all_distinct_dims+0xac>
     7b0:	add	r3, r5, r4, lsl #2
     7b4:	ldr	r2, [r3, #108]	; 0x6c
     7b8:	add	r0, r2, r0, lsl #2
     7bc:	ldr	r3, [r2], #4
     7c0:	cmp	r3, #0
     7c4:	ldrge	r1, [r6, r3, lsl #2]
     7c8:	addge	r1, r1, #1
     7cc:	strge	r1, [r6, r3, lsl #2]
     7d0:	cmp	r0, r2
     7d4:	bne	7bc <print_all_distinct_dims+0x90>
     7d8:	add	r9, r4, #8
     7dc:	add	r1, r4, #1
     7e0:	ldr	r0, [pc, #264]	; 8f0 <print_all_distinct_dims+0x1c4>
     7e4:	bl	0 <printf>
     7e8:	add	fp, r5, r7
     7ec:	add	r3, r5, r9, lsl #2
     7f0:	ldr	r1, [fp, #4]
     7f4:	ldr	r4, [r3, #4]
     7f8:	cmp	r4, r1
     7fc:	addlt	r8, r6, r4, lsl #2
     800:	ldrlt	sl, [pc, #236]	; 8f4 <print_all_distinct_dims+0x1c8>
     804:	bge	830 <print_all_distinct_dims+0x104>
     808:	ldr	r3, [r8], #4
     80c:	cmp	r3, #0
     810:	ble	820 <print_all_distinct_dims+0xf4>
     814:	mov	r1, r4
     818:	mov	r0, sl
     81c:	bl	0 <printf>
     820:	ldr	r1, [fp, #4]
     824:	add	r4, r4, #1
     828:	cmp	r1, r4
     82c:	bgt	808 <print_all_distinct_dims+0xdc>
     830:	add	r9, r5, r9, lsl #2
     834:	ldr	r0, [pc, #188]	; 8f8 <print_all_distinct_dims+0x1cc>
     838:	add	r5, r5, r7
     83c:	bl	0 <printf>
     840:	ldr	r0, [pc, #180]	; 8fc <print_all_distinct_dims+0x1d0>
     844:	bl	0 <printf>
     848:	ldr	r4, [r9, #4]
     84c:	ldr	r3, [r5, #4]
     850:	cmp	r4, r3
     854:	bge	884 <print_all_distinct_dims+0x158>
     858:	ldr	r8, [pc, #148]	; 8f4 <print_all_distinct_dims+0x1c8>
     85c:	add	r7, r6, r4, lsl #2
     860:	ldr	r1, [r7], #4
     864:	cmp	r1, #0
     868:	ble	874 <print_all_distinct_dims+0x148>
     86c:	mov	r0, r8
     870:	bl	0 <printf>
     874:	ldr	r3, [r5, #4]
     878:	add	r4, r4, #1
     87c:	cmp	r3, r4
     880:	bgt	860 <print_all_distinct_dims+0x134>
     884:	ldr	r1, [r6, r3, lsl #2]
     888:	ldr	r0, [pc, #104]	; 8f8 <print_all_distinct_dims+0x1cc>
     88c:	bl	0 <printf>
     890:	mov	r0, #10
     894:	bl	0 <putchar>
     898:	mov	r0, r6
     89c:	add	sp, sp, #12
     8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8a4:	b	0 <free>
     8a8:	mov	r3, #61	; 0x3d
     8ac:	mov	r2, r8
     8b0:	str	r3, [sp]
     8b4:	ldr	r1, [pc, #68]	; 900 <print_all_distinct_dims+0x1d4>
     8b8:	ldr	r3, [pc, #68]	; 904 <print_all_distinct_dims+0x1d8>
     8bc:	mvn	r0, #0
     8c0:	bl	0 <coda_set_error>
     8c4:	bl	0 <handle_coda_error>
     8c8:	ldr	r8, [r9, #4]
     8cc:	add	r8, r8, #1
     8d0:	lsl	r8, r8, #2
     8d4:	b	784 <print_all_distinct_dims+0x58>
     8d8:	ldr	r3, [pc, #40]	; 908 <print_all_distinct_dims+0x1dc>
     8dc:	mov	r2, #50	; 0x32
     8e0:	ldr	r1, [pc, #28]	; 904 <print_all_distinct_dims+0x1d8>
     8e4:	ldr	r0, [pc, #32]	; 90c <print_all_distinct_dims+0x1e0>
     8e8:	bl	0 <__assert_fail>
     8ec:	.word	0x00000000
     8f0:	.word	0x00000120
     8f4:	.word	0x0000012c
     8f8:	.word	0x00000130
     8fc:	.word	0x00000134
     900:	.word	0x000000e8
     904:	.word	0x00000000
     908:	.word	0x0000003c
     90c:	.word	0x000000cc

00000910 <dim_enter_array>:
     910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     914:	sub	sp, sp, #92	; 0x5c
     918:	ldr	sl, [pc, #2388]	; 1274 <dim_enter_array+0x964>
     91c:	add	r1, sp, #48	; 0x30
     920:	ldr	r3, [sl, #136]	; 0x88
     924:	ldr	r2, [sl, #3360]	; 0xd20
     928:	add	r3, r3, #2
     92c:	str	r2, [sp, #8]
     930:	ldr	r0, [sl, r3, lsl #2]
     934:	bl	0 <coda_type_get_class>
     938:	cmp	r0, #0
     93c:	bne	cac <dim_enter_array+0x39c>
     940:	ldr	r3, [sp, #48]	; 0x30
     944:	sub	r3, r3, #1
     948:	cmp	r3, #5
     94c:	ldrls	pc, [pc, r3, lsl #2]
     950:	b	c98 <dim_enter_array+0x388>
     954:	.word	0x00000c2c
     958:	.word	0x00000c98
     95c:	.word	0x00000c98
     960:	.word	0x00000be8
     964:	.word	0x00000b48
     968:	.word	0x0000096c
     96c:	ldr	r3, [sl, #136]	; 0x88
     970:	add	r1, sp, #56	; 0x38
     974:	add	r3, r3, #2
     978:	ldr	r0, [sl, r3, lsl #2]
     97c:	bl	0 <coda_type_get_special_type>
     980:	cmp	r0, #0
     984:	bne	113c <dim_enter_array+0x82c>
     988:	ldr	r3, [sp, #56]	; 0x38
     98c:	cmp	r3, #3
     990:	bne	1260 <dim_enter_array+0x950>
     994:	ldr	r2, [sp, #8]
     998:	mov	r1, #1
     99c:	lsl	r3, r2, #2
     9a0:	str	r3, [sp, #28]
     9a4:	add	r3, r3, r2
     9a8:	mov	r2, #2
     9ac:	add	r3, sl, r3, lsl #4
     9b0:	str	r1, [r3, #804]	; 0x324
     9b4:	str	r2, [r3, #808]	; 0x328
     9b8:	ldr	r3, [pc, #2232]	; 1278 <dim_enter_array+0x968>
     9bc:	ldr	r3, [r3]
     9c0:	cmp	r3, #0
     9c4:	beq	bc0 <dim_enter_array+0x2b0>
     9c8:	ldr	r2, [sp, #8]
     9cc:	ldr	r3, [sp, #28]
     9d0:	ldr	fp, [pc, #2212]	; 127c <dim_enter_array+0x96c>
     9d4:	add	r3, r3, r2
     9d8:	add	r3, sl, r3, lsl #4
     9dc:	ldr	r2, [fp]
     9e0:	ldr	r4, [r3, #804]	; 0x324
     9e4:	str	r2, [sp, #12]
     9e8:	add	r0, r2, r4
     9ec:	cmp	r0, #8
     9f0:	str	r2, [r3, #800]	; 0x320
     9f4:	bgt	124c <dim_enter_array+0x93c>
     9f8:	ldr	r2, [sp, #12]
     9fc:	str	r0, [fp]
     a00:	cmp	r2, #0
     a04:	ble	1178 <dim_enter_array+0x868>
     a08:	add	r3, r2, #37	; 0x25
     a0c:	add	r2, fp, r2, lsl #3
     a10:	lsl	r3, r3, #3
     a14:	ldrd	r6, [r2, #232]	; 0xe8
     a18:	ldrd	r2, [r3, fp]
     a1c:	strd	r6, [sp, #16]
     a20:	cmp	r2, #1
     a24:	strd	r2, [sp, #32]
     a28:	sbcs	r3, r3, #0
     a2c:	blt	d48 <dim_enter_array+0x438>
     a30:	cmp	r4, #0
     a34:	ble	118c <dim_enter_array+0x87c>
     a38:	ldr	r2, [sp, #8]
     a3c:	ldr	r3, [sp, #28]
     a40:	mov	r5, #0
     a44:	add	r3, r3, r2
     a48:	ldr	r2, [sp, #12]
     a4c:	add	r3, sl, r3, lsl #4
     a50:	add	ip, r2, #1
     a54:	add	lr, r4, ip
     a58:	add	r9, r3, #804	; 0x324
     a5c:	lsl	r3, ip, #2
     a60:	str	r3, [sp, #40]	; 0x28
     a64:	mov	r1, r9
     a68:	add	lr, fp, lr, lsl #2
     a6c:	add	r3, fp, r3
     a70:	mov	r6, r5
     a74:	ldr	r2, [r1, #4]!
     a78:	cmn	r2, #1
     a7c:	str	r2, [r3], #4
     a80:	moveq	r5, #1
     a84:	cmp	r3, lr
     a88:	str	r6, [r3, #64]	; 0x40
     a8c:	bne	a74 <dim_enter_array+0x164>
     a90:	cmp	r5, #0
     a94:	beq	d78 <dim_enter_array+0x468>
     a98:	ldr	r3, [sp, #28]
     a9c:	ldr	r2, [sp, #8]
     aa0:	mov	r6, #0
     aa4:	add	r7, r3, r2
     aa8:	ldr	r3, [sp, #40]	; 0x28
     aac:	add	r7, sl, r7, lsl #4
     ab0:	add	r4, r3, #104	; 0x68
     ab4:	ldr	r3, [sp, #16]
     ab8:	add	r4, fp, r4
     abc:	mov	r8, r9
     ac0:	lsl	r3, r3, #2
     ac4:	str	r3, [sp, #24]
     ac8:	b	ae4 <dim_enter_array+0x1d4>
     acc:	ldr	r3, [r7, #804]	; 0x324
     ad0:	add	r6, r6, #1
     ad4:	cmp	r3, r6
     ad8:	add	r4, r4, #4
     adc:	add	r3, r7, #804	; 0x324
     ae0:	ble	cb4 <dim_enter_array+0x3a4>
     ae4:	ldr	r3, [r8, #4]!
     ae8:	cmn	r3, #1
     aec:	movne	r3, #0
     af0:	strne	r3, [r4, #32]
     af4:	strne	r3, [r4]
     af8:	bne	acc <dim_enter_array+0x1bc>
     afc:	ldr	r3, [sp, #12]
     b00:	ldr	r0, [sp, #24]
     b04:	str	r3, [r4, #32]
     b08:	bl	0 <malloc>
     b0c:	cmp	r0, #0
     b10:	str	r0, [r4]
     b14:	beq	1228 <dim_enter_array+0x918>
     b18:	ldrd	r2, [sp, #16]
     b1c:	cmp	r2, #1
     b20:	sbcs	r3, r3, #0
     b24:	blt	acc <dim_enter_array+0x1bc>
     b28:	ldr	r3, [r4]
     b2c:	ldr	r2, [sp, #24]
     b30:	add	r2, r3, r2
     b34:	mvn	r1, #0
     b38:	str	r1, [r3], #4
     b3c:	cmp	r3, r2
     b40:	bne	b34 <dim_enter_array+0x224>
     b44:	b	acc <dim_enter_array+0x1bc>
     b48:	ldr	r3, [sl, #136]	; 0x88
     b4c:	add	r1, sp, #56	; 0x38
     b50:	add	r3, r3, #2
     b54:	ldr	r0, [sl, r3, lsl #2]
     b58:	bl	0 <coda_type_get_bit_size>
     b5c:	cmp	r0, #0
     b60:	bne	1134 <dim_enter_array+0x824>
     b64:	ldr	r2, [sp, #8]
     b68:	ldrd	r0, [sp, #56]	; 0x38
     b6c:	lsl	r3, r2, #2
     b70:	str	r3, [sp, #28]
     b74:	add	r3, r3, r2
     b78:	cmp	r0, #0
     b7c:	add	r3, sl, r3, lsl #4
     b80:	mov	r2, #1
     b84:	sbcs	ip, r1, #0
     b88:	str	r2, [r3, #804]	; 0x324
     b8c:	blt	116c <dim_enter_array+0x85c>
     b90:	and	r4, r0, #7
     b94:	mov	r5, #0
     b98:	lsr	r2, r0, #3
     b9c:	orr	r4, r4, r5
     ba0:	orr	r2, r2, r1, lsl #29
     ba4:	cmp	r4, #0
     ba8:	addne	r2, r2, #1
     bac:	str	r2, [r3, #808]	; 0x328
     bb0:	ldr	r3, [pc, #1728]	; 1278 <dim_enter_array+0x968>
     bb4:	ldr	r3, [r3]
     bb8:	cmp	r3, #0
     bbc:	bne	9c8 <dim_enter_array+0xb8>
     bc0:	ldr	r1, [sp, #8]
     bc4:	ldr	r2, [sp, #28]
     bc8:	add	r2, r2, r1
     bcc:	mvn	r1, #0
     bd0:	add	sl, sl, r2, lsl #4
     bd4:	str	r3, [sl, #840]	; 0x348
     bd8:	str	r3, [sl, #844]	; 0x34c
     bdc:	str	r1, [sl, #800]	; 0x320
     be0:	add	sp, sp, #92	; 0x5c
     be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     be8:	ldr	r3, [sl, #136]	; 0x88
     bec:	add	r1, sp, #56	; 0x38
     bf0:	add	r3, r3, #2
     bf4:	ldr	r0, [sl, r3, lsl #2]
     bf8:	bl	0 <coda_type_get_string_length>
     bfc:	cmp	r0, #0
     c00:	bne	112c <dim_enter_array+0x81c>
     c04:	ldr	r2, [sp, #8]
     c08:	mov	r1, #1
     c0c:	lsl	r3, r2, #2
     c10:	str	r3, [sp, #28]
     c14:	add	r3, r3, r2
     c18:	ldr	r2, [sp, #56]	; 0x38
     c1c:	add	r3, sl, r3, lsl #4
     c20:	str	r1, [r3, #804]	; 0x324
     c24:	str	r2, [r3, #808]	; 0x328
     c28:	b	9b8 <dim_enter_array+0xa8>
     c2c:	ldr	r3, [sl, #136]	; 0x88
     c30:	add	r2, sp, #56	; 0x38
     c34:	add	r3, r3, #2
     c38:	add	r1, sp, #52	; 0x34
     c3c:	ldr	r0, [sl, r3, lsl #2]
     c40:	bl	0 <coda_type_get_array_dim>
     c44:	cmp	r0, #0
     c48:	bne	1144 <dim_enter_array+0x834>
     c4c:	ldr	r2, [sp, #8]
     c50:	ldr	r0, [sp, #52]	; 0x34
     c54:	lsl	r3, r2, #2
     c58:	add	r2, r3, r2
     c5c:	str	r3, [sp, #28]
     c60:	lsl	r2, r2, #4
     c64:	add	r3, sl, r2
     c68:	cmp	r0, #0
     c6c:	str	r0, [r3, #804]	; 0x324
     c70:	ble	9b8 <dim_enter_array+0xa8>
     c74:	add	r3, sp, #56	; 0x38
     c78:	add	r2, r2, #804	; 0x324
     c7c:	add	r0, r3, r0, lsl #2
     c80:	add	r2, sl, r2
     c84:	ldr	r1, [r3], #4
     c88:	cmp	r3, r0
     c8c:	str	r1, [r2, #4]!
     c90:	bne	c84 <dim_enter_array+0x374>
     c94:	b	9b8 <dim_enter_array+0xa8>
     c98:	ldr	r3, [pc, #1504]	; 1280 <dim_enter_array+0x970>
     c9c:	ldr	r2, [pc, #1504]	; 1284 <dim_enter_array+0x974>
     ca0:	ldr	r1, [pc, #1504]	; 1288 <dim_enter_array+0x978>
     ca4:	ldr	r0, [pc, #1504]	; 128c <dim_enter_array+0x97c>
     ca8:	bl	0 <__assert_fail>
     cac:	bl	0 <handle_coda_error>
     cb0:	b	940 <dim_enter_array+0x30>
     cb4:	mov	r6, #0
     cb8:	mov	r0, r6
     cbc:	mov	r2, r6
     cc0:	mov	r1, r6
     cc4:	str	r6, [r7, #844]	; 0x34c
     cc8:	str	r3, [sp, #24]
     ccc:	bl	29c <get_all_dims_for_array>
     cd0:	ldr	r3, [sp, #24]
     cd4:	ldr	r4, [r3]
     cd8:	cmp	r4, r6
     cdc:	ldrle	r0, [fp]
     ce0:	ble	118c <dim_enter_array+0x87c>
     ce4:	ldr	r3, [sp, #28]
     ce8:	ldr	r2, [sp, #8]
     cec:	str	r6, [sp, #24]
     cf0:	add	r8, r3, r2
     cf4:	ldr	r3, [sp, #40]	; 0x28
     cf8:	mov	r1, r6
     cfc:	add	r7, fp, r3
     d00:	add	r8, sl, r8, lsl #4
     d04:	mov	r2, #1
     d08:	b	d20 <dim_enter_array+0x410>
     d0c:	ldr	r4, [r8, #804]	; 0x324
     d10:	add	r6, r6, #1
     d14:	cmp	r4, r6
     d18:	add	r7, r7, #4
     d1c:	ble	110c <dim_enter_array+0x7fc>
     d20:	ldr	r0, [r9, #4]!
     d24:	cmn	r0, #1
     d28:	bne	d0c <dim_enter_array+0x3fc>
     d2c:	ldr	ip, [r7]
     d30:	ldr	r0, [r7, #32]
     d34:	cmp	ip, r0
     d38:	beq	11f0 <dim_enter_array+0x8e0>
     d3c:	str	r2, [r7, #68]	; 0x44
     d40:	str	r5, [sp, #24]
     d44:	b	d0c <dim_enter_array+0x3fc>
     d48:	cmp	r4, #0
     d4c:	ble	118c <dim_enter_array+0x87c>
     d50:	ldr	r3, [sp, #12]
     d54:	mov	r2, #0
     d58:	add	ip, r3, #1
     d5c:	add	r1, r4, ip
     d60:	add	r3, fp, ip, lsl #2
     d64:	add	r1, fp, r1, lsl #2
     d68:	str	r2, [r3], #4
     d6c:	cmp	r3, r1
     d70:	str	r2, [r3, #64]	; 0x40
     d74:	bne	d68 <dim_enter_array+0x458>
     d78:	mov	r3, #0
     d7c:	mvn	r2, #0
     d80:	cmp	r0, #0
     d84:	str	r3, [fp, #68]	; 0x44
     d88:	str	r2, [fp, #104]	; 0x68
     d8c:	ble	114c <dim_enter_array+0x83c>
     d90:	str	r3, [sp, #24]
     d94:	mov	lr, #0
     d98:	ldr	r2, [pc, #1264]	; 1290 <dim_enter_array+0x980>
     d9c:	mov	ip, lr
     da0:	mov	r6, lr
     da4:	mov	r3, lr
     da8:	mvn	r5, #0
     dac:	mov	r7, #1
     db0:	ldr	r1, [r2, #4]!
     db4:	cmp	r1, #0
     db8:	movne	ip, #1
     dbc:	movne	r5, r3
     dc0:	add	r3, r3, #1
     dc4:	movne	r6, ip
     dc8:	movne	lr, r7
     dcc:	cmp	r3, r0
     dd0:	bne	db0 <dim_enter_array+0x4a0>
     dd4:	cmp	ip, #0
     dd8:	strne	r6, [fp, #68]	; 0x44
     ddc:	cmp	lr, #0
     de0:	strne	r5, [fp, #104]	; 0x68
     de4:	ldr	r2, [sp, #8]
     de8:	ldr	r3, [sp, #28]
     dec:	cmp	r4, #0
     df0:	add	r3, r3, r2
     df4:	mov	r2, #1
     df8:	add	r3, sl, r3, lsl #4
     dfc:	str	r2, [r3, #840]	; 0x348
     e00:	ble	1218 <dim_enter_array+0x908>
     e04:	ldr	r3, [sp, #12]
     e08:	add	ip, r3, r2
     e0c:	ldr	r3, [sp, #12]
     e10:	add	ip, fp, ip, lsl #2
     e14:	add	r3, r3, #29
     e18:	mov	lr, #1
     e1c:	lsl	r3, r3, #3
     e20:	str	r3, [sp, #40]	; 0x28
     e24:	add	r0, fp, r3
     e28:	mov	r1, #0
     e2c:	ldrd	r8, [sp, #16]
     e30:	mov	r7, r4
     e34:	b	e60 <dim_enter_array+0x550>
     e38:	mul	r6, r2, r9
     e3c:	asr	r5, r2, #31
     e40:	umull	r2, r3, r2, r8
     e44:	mla	r6, r8, r5, r6
     e48:	add	r1, r1, #1
     e4c:	add	r3, r6, r3
     e50:	cmp	r1, r7
     e54:	strd	r2, [r0, #8]
     e58:	add	r0, r0, #8
     e5c:	beq	ea0 <dim_enter_array+0x590>
     e60:	ldr	r2, [ip], #4
     e64:	cmp	r1, #0
     e68:	mul	lr, r2, lr
     e6c:	beq	e38 <dim_enter_array+0x528>
     e70:	ldm	r0, {r3, r6}
     e74:	asr	r5, r2, #31
     e78:	ldr	r4, [r0]
     e7c:	mul	r3, r5, r3
     e80:	umull	r4, r5, r4, r2
     e84:	mla	r2, r2, r6, r3
     e88:	add	r1, r1, #1
     e8c:	add	r5, r2, r5
     e90:	cmp	r1, r7
     e94:	strd	r4, [r0, #8]
     e98:	add	r0, r0, #8
     e9c:	bne	e60 <dim_enter_array+0x550>
     ea0:	ldr	r2, [sp, #8]
     ea4:	ldr	r3, [sp, #28]
     ea8:	mov	r4, r7
     eac:	add	r3, r3, r2
     eb0:	ldr	r2, [sp, #24]
     eb4:	add	r3, sl, r3, lsl #4
     eb8:	cmp	r2, #0
     ebc:	str	lr, [r3, #840]	; 0x348
     ec0:	beq	108c <dim_enter_array+0x77c>
     ec4:	ldr	r3, [sp, #12]
     ec8:	mov	r2, #0
     ecc:	add	r0, r3, #38	; 0x26
     ed0:	ldr	r3, [sp, #40]	; 0x28
     ed4:	add	r0, r0, r4
     ed8:	add	r1, r3, #72	; 0x48
     edc:	add	r1, fp, r1
     ee0:	add	r0, fp, r0, lsl #3
     ee4:	mov	r3, #0
     ee8:	strd	r2, [r1], #8
     eec:	cmp	r1, r0
     ef0:	bne	ee8 <dim_enter_array+0x5d8>
     ef4:	ldrd	r2, [sp, #16]
     ef8:	cmp	r2, #1
     efc:	sbcs	r3, r3, #0
     f00:	blt	f94 <dim_enter_array+0x684>
     f04:	ldr	r3, [sp, #12]
     f08:	ldr	r8, [sp, #16]
     f0c:	add	r7, r3, #38	; 0x26
     f10:	add	lr, r4, r3
     f14:	add	r7, fp, r7, lsl #3
     f18:	add	lr, fp, lr, lsl #2
     f1c:	add	r9, fp, r3, lsl #2
     f20:	mov	r6, #0
     f24:	cmp	r4, #0
     f28:	ble	f88 <dim_enter_array+0x678>
     f2c:	lsl	r5, r6, #2
     f30:	mov	r2, r7
     f34:	mov	r3, r9
     f38:	mov	ip, #1
     f3c:	str	r6, [sp, #16]
     f40:	str	r7, [sp, #24]
     f44:	ldr	r1, [r3, #72]	; 0x48
     f48:	add	r3, r3, #4
     f4c:	cmp	r1, #0
     f50:	ldrne	r1, [r3, #104]	; 0x68
     f54:	ldreq	r1, [r3]
     f58:	ldrne	r1, [r1, r5]
     f5c:	mul	ip, r1, ip
     f60:	ldrd	r0, [r2]
     f64:	adds	r6, r0, ip
     f68:	adc	r7, r1, ip, asr #31
     f6c:	mov	r0, r6
     f70:	mov	r1, r7
     f74:	cmp	r3, lr
     f78:	strd	r0, [r2], #8
     f7c:	bne	f44 <dim_enter_array+0x634>
     f80:	ldr	r6, [sp, #16]
     f84:	ldr	r7, [sp, #24]
     f88:	add	r6, r6, #1
     f8c:	cmp	r6, r8
     f90:	bne	f24 <dim_enter_array+0x614>
     f94:	ldr	r2, [sp, #8]
     f98:	ldr	r3, [sp, #28]
     f9c:	add	r3, r3, r2
     fa0:	add	sl, sl, r3, lsl #4
     fa4:	ldr	r3, [sp, #12]
     fa8:	ldr	r2, [sl, #804]	; 0x324
     fac:	add	r3, r3, r2
     fb0:	add	r3, r3, #37	; 0x25
     fb4:	lsl	r3, r3, #3
     fb8:	ldrd	r0, [fp, r3]
     fbc:	cmp	r0, #1
     fc0:	sbcs	r3, r1, #0
     fc4:	blt	be0 <dim_enter_array+0x2d0>
     fc8:	ldr	r3, [fp]
     fcc:	cmp	r2, #1
     fd0:	ldr	r0, [fp, r3, lsl #2]
     fd4:	add	r3, fp, r3, lsl #3
     fd8:	asr	r1, r0, #31
     fdc:	strd	r0, [r3, #168]	; 0xa8
     fe0:	ble	1034 <dim_enter_array+0x724>
     fe4:	ldr	r3, [sp, #12]
     fe8:	add	ip, r3, #20
     fec:	add	ip, ip, r2
     ff0:	add	r6, r3, #1
     ff4:	add	r2, r3, r2
     ff8:	add	ip, fp, ip, lsl #3
     ffc:	add	ip, ip, #8
    1000:	add	lr, fp, r2, lsl #2
    1004:	add	r6, fp, r6, lsl #2
    1008:	ldr	r2, [lr, #-4]!
    100c:	ldr	r0, [ip, #4]
    1010:	ldr	r1, [ip]
    1014:	asr	r5, r2, #31
    1018:	mul	r0, r2, r0
    101c:	umull	r2, r3, r1, r2
    1020:	mla	r1, r1, r5, r0
    1024:	cmp	r6, lr
    1028:	add	r3, r1, r3
    102c:	strd	r2, [ip, #-8]!
    1030:	bne	1008 <dim_enter_array+0x6f8>
    1034:	ldr	r3, [sp, #12]
    1038:	cmp	r3, #0
    103c:	ble	be0 <dim_enter_array+0x2d0>
    1040:	ldr	r3, [sp, #12]
    1044:	ldr	lr, [pc, #584]	; 1294 <dim_enter_array+0x984>
    1048:	add	r0, r3, #21
    104c:	add	ip, r3, #22
    1050:	add	r0, fp, r0, lsl #3
    1054:	add	ip, fp, ip, lsl #3
    1058:	ldr	r2, [r0]
    105c:	ldr	r4, [ip, #4]
    1060:	ldr	r5, [ip]
    1064:	ldr	r1, [r0, #4]
    1068:	mul	r4, r2, r4
    106c:	umull	r2, r3, r2, r5
    1070:	mla	r1, r5, r1, r4
    1074:	add	r3, r1, r3
    1078:	strd	r2, [r0], #-8
    107c:	cmp	lr, r0
    1080:	bne	1058 <dim_enter_array+0x748>
    1084:	add	sp, sp, #92	; 0x5c
    1088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    108c:	ldr	r6, [sp, #12]
    1090:	ldrd	r8, [sp, #32]
    1094:	add	r0, r6, #38	; 0x26
    1098:	add	r3, fp, r6, lsl #2
    109c:	lsl	r0, r0, #3
    10a0:	ldr	r2, [r3, #4]
    10a4:	cmp	r1, #1
    10a8:	add	lr, fp, r0
    10ac:	mul	ip, r2, r9
    10b0:	asr	r5, r2, #31
    10b4:	umull	r2, r3, r2, r8
    10b8:	mla	ip, r8, r5, ip
    10bc:	add	r3, ip, r3
    10c0:	strd	r2, [fp, r0]
    10c4:	ble	f94 <dim_enter_array+0x684>
    10c8:	add	r5, r6, #37	; 0x25
    10cc:	add	r1, r5, r1
    10d0:	add	r4, r6, #2
    10d4:	add	r5, fp, r1, lsl #3
    10d8:	add	r4, fp, r4, lsl #2
    10dc:	ldr	r2, [r4], #4
    10e0:	ldr	r0, [lr, #4]
    10e4:	ldr	r1, [lr]
    10e8:	asr	r7, r2, #31
    10ec:	mul	r0, r2, r0
    10f0:	umull	r2, r3, r2, r1
    10f4:	mla	r1, r1, r7, r0
    10f8:	add	r3, r1, r3
    10fc:	strd	r2, [lr, #8]!
    1100:	cmp	lr, r5
    1104:	bne	10dc <dim_enter_array+0x7cc>
    1108:	b	f94 <dim_enter_array+0x684>
    110c:	ldr	r0, [fp]
    1110:	mov	r2, #0
    1114:	mvn	r3, #0
    1118:	cmp	r0, r2
    111c:	str	r2, [fp, #68]	; 0x44
    1120:	str	r3, [fp, #104]	; 0x68
    1124:	bgt	d94 <dim_enter_array+0x484>
    1128:	b	de4 <dim_enter_array+0x4d4>
    112c:	bl	0 <handle_coda_error>
    1130:	b	c04 <dim_enter_array+0x2f4>
    1134:	bl	0 <handle_coda_error>
    1138:	b	b64 <dim_enter_array+0x254>
    113c:	bl	0 <handle_coda_error>
    1140:	b	988 <dim_enter_array+0x78>
    1144:	bl	0 <handle_coda_error>
    1148:	b	c4c <dim_enter_array+0x33c>
    114c:	ldr	r1, [sp, #8]
    1150:	ldr	r2, [sp, #28]
    1154:	str	r3, [sp, #24]
    1158:	add	r2, r2, r1
    115c:	mov	r1, #1
    1160:	add	r2, sl, r2, lsl #4
    1164:	str	r1, [r2, #840]	; 0x348
    1168:	b	e0c <dim_enter_array+0x4fc>
    116c:	mvn	r2, #0
    1170:	str	r2, [r3, #808]	; 0x328
    1174:	b	9b8 <dim_enter_array+0xa8>
    1178:	mov	r2, #1
    117c:	mov	r3, #0
    1180:	strd	r2, [sp, #32]
    1184:	strd	r2, [sp, #16]
    1188:	b	a30 <dim_enter_array+0x120>
    118c:	mov	r3, #0
    1190:	mvn	r2, #0
    1194:	cmp	r0, #0
    1198:	str	r3, [fp, #68]	; 0x44
    119c:	str	r2, [fp, #104]	; 0x68
    11a0:	bgt	d90 <dim_enter_array+0x480>
    11a4:	ldr	r2, [sp, #8]
    11a8:	ldr	r3, [sp, #28]
    11ac:	add	r3, r3, r2
    11b0:	mov	r2, #1
    11b4:	add	r3, sl, r3, lsl #4
    11b8:	str	r2, [r3, #840]	; 0x348
    11bc:	ldr	r2, [sp, #12]
    11c0:	ldrd	r4, [sp, #32]
    11c4:	add	ip, r2, #38	; 0x26
    11c8:	add	r3, fp, r2, lsl #2
    11cc:	lsl	ip, ip, #3
    11d0:	ldr	r0, [r3, #4]
    11d4:	mul	r2, r0, r5
    11d8:	asr	r7, r0, #31
    11dc:	umull	r0, r1, r0, r4
    11e0:	mla	r3, r4, r7, r2
    11e4:	add	r1, r3, r1
    11e8:	strd	r0, [fp, ip]
    11ec:	b	f94 <dim_enter_array+0x684>
    11f0:	str	r1, [r7, #68]	; 0x44
    11f4:	ldr	r0, [r7, #104]	; 0x68
    11f8:	str	r2, [sp, #44]	; 0x2c
    11fc:	str	r1, [sp, #40]	; 0x28
    1200:	bl	0 <free>
    1204:	ldr	r1, [sp, #40]	; 0x28
    1208:	ldr	r2, [sp, #44]	; 0x2c
    120c:	str	r1, [r7, #104]	; 0x68
    1210:	str	r1, [r7, #136]	; 0x88
    1214:	b	d0c <dim_enter_array+0x3fc>
    1218:	ldr	r3, [sp, #24]
    121c:	cmp	r3, #0
    1220:	bne	ef4 <dim_enter_array+0x5e4>
    1224:	b	11bc <dim_enter_array+0x8ac>
    1228:	mov	r3, #456	; 0x1c8
    122c:	str	r3, [sp]
    1230:	ldr	r2, [sp, #24]
    1234:	ldr	r3, [pc, #76]	; 1288 <dim_enter_array+0x978>
    1238:	ldr	r1, [pc, #88]	; 1298 <dim_enter_array+0x988>
    123c:	mvn	r0, #0
    1240:	bl	0 <coda_set_error>
    1244:	bl	0 <handle_coda_error>
    1248:	b	b18 <dim_enter_array+0x208>
    124c:	ldr	r3, [pc, #44]	; 1280 <dim_enter_array+0x970>
    1250:	ldr	r2, [pc, #68]	; 129c <dim_enter_array+0x98c>
    1254:	ldr	r1, [pc, #44]	; 1288 <dim_enter_array+0x978>
    1258:	ldr	r0, [pc, #64]	; 12a0 <dim_enter_array+0x990>
    125c:	bl	0 <__assert_fail>
    1260:	ldr	r3, [pc, #24]	; 1280 <dim_enter_array+0x970>
    1264:	ldr	r2, [pc, #56]	; 12a4 <dim_enter_array+0x994>
    1268:	ldr	r1, [pc, #24]	; 1288 <dim_enter_array+0x978>
    126c:	ldr	r0, [pc, #24]	; 128c <dim_enter_array+0x97c>
    1270:	bl	0 <__assert_fail>
	...
    1280:	.word	0x00000054
    1284:	.word	0x00000182
    1288:	.word	0x00000000
    128c:	.word	0x0000007c
    1290:	.word	0x00000044
    1294:	.word	0x000000a8
    1298:	.word	0x000000e8
    129c:	.word	0x00000192
    12a0:	.word	0x0000013c
    12a4:	.word	0x0000015d

000012a8 <dim_leave_array>:
    12a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    12ac:	ldr	r8, [pc, #324]	; 13f8 <dim_leave_array+0x150>
    12b0:	ldr	r3, [r8, #3360]	; 0xd20
    12b4:	cmp	r3, #0
    12b8:	blt	13e4 <dim_leave_array+0x13c>
    12bc:	add	r3, r3, r3, lsl #2
    12c0:	ldr	r6, [pc, #308]	; 13fc <dim_leave_array+0x154>
    12c4:	add	r8, r8, r3, lsl #4
    12c8:	ldr	ip, [r6]
    12cc:	ldr	r2, [r8, #804]	; 0x324
    12d0:	ldr	r7, [r8, #800]	; 0x320
    12d4:	sub	ip, ip, r2
    12d8:	cmp	r2, #0
    12dc:	str	ip, [r6]
    12e0:	ble	132c <dim_leave_array+0x84>
    12e4:	add	r5, r7, #18
    12e8:	mov	r4, #0
    12ec:	add	r5, r6, r5, lsl #2
    12f0:	b	1304 <dim_leave_array+0x5c>
    12f4:	ldr	r2, [r8, #804]	; 0x324
    12f8:	add	r4, r4, #1
    12fc:	cmp	r2, r4
    1300:	ble	1328 <dim_leave_array+0x80>
    1304:	ldr	r3, [r5], #4
    1308:	cmp	r3, #0
    130c:	beq	12f4 <dim_leave_array+0x4c>
    1310:	ldr	r0, [r5, #32]
    1314:	bl	0 <free>
    1318:	ldr	r2, [r8, #804]	; 0x324
    131c:	add	r4, r4, #1
    1320:	cmp	r2, r4
    1324:	bgt	1304 <dim_leave_array+0x5c>
    1328:	ldr	ip, [r6]
    132c:	mov	lr, #0
    1330:	mvn	r5, #0
    1334:	cmp	ip, #0
    1338:	str	lr, [r6, #68]	; 0x44
    133c:	str	r5, [r6, #104]	; 0x68
    1340:	ble	138c <dim_leave_array+0xe4>
    1344:	ldr	r1, [pc, #180]	; 1400 <dim_leave_array+0x158>
    1348:	mov	r4, lr
    134c:	mov	r8, lr
    1350:	mov	r3, lr
    1354:	mov	r9, #1
    1358:	ldr	r0, [r1, #4]!
    135c:	cmp	r0, #0
    1360:	movne	r4, #1
    1364:	movne	r5, r3
    1368:	add	r3, r3, #1
    136c:	movne	r8, r4
    1370:	movne	lr, r9
    1374:	cmp	r3, ip
    1378:	bne	1358 <dim_leave_array+0xb0>
    137c:	cmp	r4, #0
    1380:	strne	r8, [r6, #68]	; 0x44
    1384:	cmp	lr, #0
    1388:	strne	r5, [r6, #104]	; 0x68
    138c:	add	r2, r7, r2
    1390:	add	r2, r2, #37	; 0x25
    1394:	lsl	r2, r2, #3
    1398:	ldrd	r2, [r2, r6]
    139c:	cmp	r2, #1
    13a0:	sbcs	r3, r3, #0
    13a4:	blt	13e0 <dim_leave_array+0x138>
    13a8:	cmp	r7, #0
    13ac:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    13b0:	add	r4, r7, #21
    13b4:	add	r7, r7, #22
    13b8:	ldr	r5, [pc, #68]	; 1404 <dim_leave_array+0x15c>
    13bc:	add	r4, r6, r4, lsl #3
    13c0:	add	r6, r6, r7, lsl #3
    13c4:	ldrd	r2, [r6]
    13c8:	ldrd	r0, [r4]
    13cc:	bl	0 <__aeabi_ldivmod>
    13d0:	strd	r0, [r4], #-8
    13d4:	cmp	r4, r5
    13d8:	bne	13c4 <dim_leave_array+0x11c>
    13dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    13e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    13e4:	ldr	r3, [pc, #28]	; 1408 <dim_leave_array+0x160>
    13e8:	ldr	r2, [pc, #28]	; 140c <dim_leave_array+0x164>
    13ec:	ldr	r1, [pc, #28]	; 1410 <dim_leave_array+0x168>
    13f0:	ldr	r0, [pc, #28]	; 1414 <dim_leave_array+0x16c>
    13f4:	bl	0 <__assert_fail>
	...
    1400:	.word	0x00000044
    1404:	.word	0x000000a8
    1408:	.word	0x00000064
    140c:	.word	0x00000243
    1410:	.word	0x00000000
    1414:	.word	0x00000178

00001418 <dim_record_field_available>:
    1418:	mov	r2, #0
    141c:	mov	r1, r2
    1420:	mov	r0, r2
    1424:	b	0 <get_record_field_available_status>
