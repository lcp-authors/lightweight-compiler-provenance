
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-netcdf-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_netcdf_cursor_set_product>:
   0:	mov	r2, #1
   4:	stm	r0, {r1, r2}
   8:	mvn	r2, #0
   c:	ldr	r1, [r1, #20]
  10:	str	r2, [r0, #20]
  14:	str	r2, [r0, #16]
  18:	str	r2, [r0, #12]
  1c:	str	r1, [r0, #8]
  20:	mov	r0, #0
  24:	bx	lr

00000028 <coda_netcdf_cursor_goto_array_element>:
  28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
  2c:	add	fp, sp, #24
  30:	sub	sp, sp, #40	; 0x28
  34:	mov	r5, r0
  38:	ldr	r0, [r0, #4]
  3c:	add	r4, sp, #4
  40:	mov	r7, r2
  44:	mov	r6, r1
  48:	sub	r1, fp, #28
  4c:	mov	r2, r4
  50:	add	r0, r5, r0, lsl #4
  54:	ldr	r0, [r0, #-8]
  58:	ldr	r0, [r0, #4]
  5c:	bl	0 <coda_type_get_array_dim>
  60:	mvn	r8, #0
  64:	cmp	r0, #0
  68:	bne	114 <coda_netcdf_cursor_goto_array_element+0xec>
  6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
  70:	cmp	r3, r6
  74:	bne	f0 <coda_netcdf_cursor_goto_array_element+0xc8>
  78:	cmp	r6, #1
  7c:	mov	r0, #0
  80:	blt	bc <coda_netcdf_cursor_goto_array_element+0x94>
  84:	mov	r1, #0
  88:	mov	r0, #0
  8c:	ldr	r2, [r7, r1, lsl #2]
  90:	ldr	r3, [r4, r1, lsl #2]
  94:	cmp	r2, #0
  98:	bmi	104 <coda_netcdf_cursor_goto_array_element+0xdc>
  9c:	cmp	r2, r3
  a0:	bge	104 <coda_netcdf_cursor_goto_array_element+0xdc>
  a4:	cmp	r1, #0
  a8:	add	r1, r1, #1
  ac:	movweq	r3, #1
  b0:	cmp	r6, r1
  b4:	mla	r0, r3, r0, r2
  b8:	bne	8c <coda_netcdf_cursor_goto_array_element+0x64>
  bc:	ldr	r1, [r5, #4]
  c0:	mov	r8, #0
  c4:	add	r2, r5, r1, lsl #4
  c8:	add	r1, r1, #1
  cc:	ldr	r3, [r2, #-8]
  d0:	ldr	r3, [r3, #12]
  d4:	str	r1, [r5, #4]
  d8:	mvn	r1, #0
  dc:	str	r3, [r2, #8]
  e0:	str	r0, [r2, #12]
  e4:	str	r1, [r2, #16]
  e8:	str	r1, [r2, #20]
  ec:	b	114 <coda_netcdf_cursor_goto_array_element+0xec>
  f0:	movw	r1, #0
  f4:	mvn	r0, #105	; 0x69
  f8:	mov	r2, r6
  fc:	movt	r1, #0
 100:	b	110 <coda_netcdf_cursor_goto_array_element+0xe8>
 104:	movw	r1, #0
 108:	mvn	r0, #106	; 0x6a
 10c:	movt	r1, #0
 110:	bl	0 <coda_set_error>
 114:	mov	r0, r8
 118:	sub	sp, fp, #24
 11c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000120 <coda_netcdf_cursor_goto_array_element_by_index>:
 120:	push	{r4, sl, fp, lr}
 124:	add	fp, sp, #8
 128:	mov	r4, r1
 12c:	mov	r1, r0
 130:	ldr	r0, [pc, #132]	; 1bc <coda_netcdf_cursor_goto_array_element_by_index+0x9c>
 134:	ldr	r2, [pc, r0]
 138:	bl	0 <__aeabi_read_tp>
 13c:	ldr	r3, [r0, r2]
 140:	ldr	r0, [r1, #4]
 144:	sub	r2, r0, #1
 148:	cmp	r3, #0
 14c:	beq	170 <coda_netcdf_cursor_goto_array_element_by_index+0x50>
 150:	add	r3, r1, r2, lsl #4
 154:	cmp	r4, #0
 158:	ldr	r3, [r3, #8]
 15c:	ldr	r3, [r3, #4]
 160:	ldr	r3, [r3, #44]	; 0x2c
 164:	bmi	1a0 <coda_netcdf_cursor_goto_array_element_by_index+0x80>
 168:	cmp	r3, r4
 16c:	ble	1a0 <coda_netcdf_cursor_goto_array_element_by_index+0x80>
 170:	add	r3, r1, #8
 174:	ldr	r2, [r3, r2, lsl #4]
 178:	ldr	ip, [r2, #12]
 17c:	add	r2, r0, #1
 180:	str	r2, [r1, #4]
 184:	str	ip, [r3, r0, lsl #4]!
 188:	mvn	r0, #0
 18c:	str	r4, [r3, #4]
 190:	str	r0, [r3, #8]
 194:	str	r0, [r3, #12]
 198:	mov	r0, #0
 19c:	pop	{r4, sl, fp, pc}
 1a0:	movw	r1, #0
 1a4:	mvn	r0, #106	; 0x6a
 1a8:	mov	r2, r4
 1ac:	movt	r1, #0
 1b0:	bl	0 <coda_set_error>
 1b4:	mvn	r0, #0
 1b8:	pop	{r4, sl, fp, pc}
 1bc:	.word	0x00000080

000001c0 <coda_netcdf_cursor_goto_next_array_element>:
 1c0:	push	{fp, lr}
 1c4:	mov	fp, sp
 1c8:	mov	r1, r0
 1cc:	ldr	r0, [pc, #104]	; 23c <coda_netcdf_cursor_goto_next_array_element+0x7c>
 1d0:	ldr	r2, [pc, r0]
 1d4:	bl	0 <__aeabi_read_tp>
 1d8:	ldr	r3, [r1, #4]
 1dc:	ldr	lr, [r0, r2]
 1e0:	sub	r0, r3, #1
 1e4:	cmp	lr, #0
 1e8:	add	ip, r1, r0, lsl #4
 1ec:	ldr	r0, [ip, #12]
 1f0:	add	r2, r0, #1
 1f4:	beq	218 <coda_netcdf_cursor_goto_next_array_element+0x58>
 1f8:	add	r1, r1, r3, lsl #4
 1fc:	cmn	r0, #1
 200:	ldr	r1, [r1, #-24]	; 0xffffffe8
 204:	ldr	r1, [r1, #4]
 208:	ldr	r3, [r1, #44]	; 0x2c
 20c:	blt	224 <coda_netcdf_cursor_goto_next_array_element+0x64>
 210:	cmp	r2, r3
 214:	bge	224 <coda_netcdf_cursor_goto_next_array_element+0x64>
 218:	mov	r0, #0
 21c:	str	r2, [ip, #12]
 220:	pop	{fp, pc}
 224:	movw	r1, #0
 228:	mvn	r0, #106	; 0x6a
 22c:	movt	r1, #0
 230:	bl	0 <coda_set_error>
 234:	mvn	r0, #0
 238:	pop	{fp, pc}
 23c:	.word	0x00000064

00000240 <coda_netcdf_cursor_goto_attributes>:
 240:	push	{r4, sl, fp, lr}
 244:	add	fp, sp, #8
 248:	ldr	r1, [r0, #4]
 24c:	mov	r4, r0
 250:	add	r0, r0, r1, lsl #4
 254:	add	r3, r1, #1
 258:	ldr	r2, [r0, #-8]
 25c:	str	r3, [r4, #4]
 260:	ldr	r2, [r2, #8]
 264:	cmp	r2, #0
 268:	beq	274 <coda_netcdf_cursor_goto_attributes+0x34>
 26c:	str	r2, [r0, #8]
 270:	b	28c <coda_netcdf_cursor_goto_attributes+0x4c>
 274:	mov	r0, #6
 278:	bl	0 <coda_mem_empty_record>
 27c:	ldr	r1, [r4, #4]
 280:	sub	r1, r1, #1
 284:	add	r2, r4, r1, lsl #4
 288:	str	r0, [r2, #8]
 28c:	add	r0, r4, r1, lsl #4
 290:	mvn	r1, #0
 294:	str	r1, [r0, #12]
 298:	str	r1, [r0, #16]
 29c:	str	r1, [r0, #20]
 2a0:	mov	r0, #0
 2a4:	pop	{r4, sl, fp, pc}

000002a8 <coda_netcdf_cursor_get_num_elements>:
 2a8:	ldr	r2, [r0, #4]
 2ac:	add	r0, r0, r2, lsl #4
 2b0:	ldr	r0, [r0, #-8]
 2b4:	ldr	r2, [r0, #4]
 2b8:	mov	r0, #1
 2bc:	ldr	r3, [r2, #8]
 2c0:	cmp	r3, #1
 2c4:	ldreq	r0, [r2, #44]	; 0x2c
 2c8:	str	r0, [r1]
 2cc:	mov	r0, #0
 2d0:	bx	lr

000002d4 <coda_netcdf_cursor_get_string_length>:
 2d4:	ldr	r2, [r0, #4]
 2d8:	add	r0, r0, r2, lsl #4
 2dc:	ldr	r0, [r0, #-8]
 2e0:	ldr	r0, [r0, #4]
 2e4:	b	0 <coda_type_get_string_length>

000002e8 <coda_netcdf_cursor_get_array_dim>:
 2e8:	ldr	r3, [r0, #4]
 2ec:	add	r0, r0, r3, lsl #4
 2f0:	ldr	r0, [r0, #-8]
 2f4:	ldr	r0, [r0, #4]
 2f8:	b	0 <coda_type_get_array_dim>

000002fc <coda_netcdf_cursor_read_int8>:
 2fc:	mvn	r2, #0
 300:	b	304 <read_basic_type>

00000304 <read_basic_type>:
 304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 308:	add	fp, sp, #28
 30c:	sub	sp, sp, #12
 310:	mov	r9, r1
 314:	ldr	r1, [r0, #4]
 318:	add	r6, r0, #8
 31c:	ldr	r8, [r0]
 320:	sub	r7, r1, #1
 324:	add	r1, r6, r1, lsl #4
 328:	ldr	sl, [r6, r7, lsl #4]
 32c:	ldr	r1, [r1, #-32]	; 0xffffffe0
 330:	ldr	r3, [sl, #4]
 334:	ldr	lr, [sl, #16]
 338:	ldr	ip, [sl, #20]
 33c:	ldrd	r4, [r3, #24]
 340:	lsr	r3, r4, #3
 344:	asr	r4, r5, #3
 348:	orr	r3, r3, r5, lsl #29
 34c:	ldr	r5, [r1]
 350:	cmp	r5, #104	; 0x68
 354:	bne	3b8 <read_basic_type+0xb4>
 358:	ldr	r1, [r1, #4]
 35c:	ldr	r5, [r1, #8]
 360:	cmp	r5, #1
 364:	bne	3b8 <read_basic_type+0xb4>
 368:	ldr	r5, [sl, #24]
 36c:	add	r0, r0, r7, lsl #4
 370:	cmp	r5, #0
 374:	beq	3e0 <read_basic_type+0xdc>
 378:	ldr	r5, [r1, #44]	; 0x2c
 37c:	ldr	r1, [r1, #52]	; 0x34
 380:	ldr	r0, [r0, #12]
 384:	sdiv	r1, r5, r1
 388:	sdiv	r5, r0, r1
 38c:	mls	r0, r5, r1, r0
 390:	umull	r1, r6, r3, r0
 394:	asr	r7, r0, #31
 398:	mla	r6, r3, r7, r6
 39c:	mla	r0, r4, r0, r6
 3a0:	ldr	r6, [r8, #60]	; 0x3c
 3a4:	mul	r5, r6, r5
 3a8:	adds	r7, lr, r5
 3ac:	adc	r6, ip, r5, asr #31
 3b0:	adds	lr, r7, r1
 3b4:	adc	ip, r6, r0
 3b8:	cmp	r2, #0
 3bc:	bmi	404 <read_basic_type+0x100>
 3c0:	subs	r0, r2, r3
 3c4:	rscs	r0, r4, r2, asr #31
 3c8:	bge	404 <read_basic_type+0x100>
 3cc:	ldr	r0, [r8, #52]	; 0x34
 3d0:	asr	r1, r2, #31
 3d4:	str	r2, [sp]
 3d8:	str	r1, [sp, #4]
 3dc:	b	40c <read_basic_type+0x108>
 3e0:	ldr	r0, [r0, #12]
 3e4:	umull	r1, r5, r3, r0
 3e8:	asr	r6, r0, #31
 3ec:	mla	r5, r3, r6, r5
 3f0:	mla	r0, r4, r0, r5
 3f4:	adds	lr, r1, lr
 3f8:	adc	ip, r0, ip
 3fc:	cmp	r2, #0
 400:	bpl	3c0 <read_basic_type+0xbc>
 404:	ldr	r0, [r8, #52]	; 0x34
 408:	stm	sp, {r3, r4}
 40c:	mov	r2, lr
 410:	mov	r3, ip
 414:	str	r9, [sp, #8]
 418:	bl	bec <read_bytes>
 41c:	mov	r1, r0
 420:	mvn	r0, #0
 424:	cmp	r1, #0
 428:	bne	4ac <read_basic_type+0x1a8>
 42c:	ldr	r1, [sl, #4]
 430:	ldr	r0, [r1, #8]
 434:	bic	r2, r0, #1
 438:	mov	r0, #0
 43c:	cmp	r2, #2
 440:	bne	4ac <read_basic_type+0x1a8>
 444:	ldr	r2, [r1, #24]
 448:	ldr	r1, [r1, #28]
 44c:	rsbs	r3, r2, #31
 450:	rscs	r3, r1, #0
 454:	blt	480 <read_basic_type+0x17c>
 458:	eor	r3, r2, #8
 45c:	orrs	r3, r3, r1
 460:	beq	4ac <read_basic_type+0x1a8>
 464:	eor	r2, r2, #16
 468:	orrs	r1, r2, r1
 46c:	ldrbeq	r1, [r9]
 470:	ldrbeq	r2, [r9, #1]
 474:	strbeq	r1, [r9, #1]
 478:	strbeq	r2, [r9]
 47c:	b	4fc <read_basic_type+0x1f8>
 480:	eor	r3, r2, #32
 484:	orrs	r3, r3, r1
 488:	bne	4b4 <read_basic_type+0x1b0>
 48c:	ldrb	r1, [r9]
 490:	ldrb	r2, [r9, #1]
 494:	ldrb	r3, [r9, #2]
 498:	ldrb	r7, [r9, #3]
 49c:	strb	r1, [r9, #3]
 4a0:	strb	r7, [r9]
 4a4:	strb	r3, [r9, #1]
 4a8:	strb	r2, [r9, #2]
 4ac:	sub	sp, fp, #28
 4b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4b4:	eor	r2, r2, #64	; 0x40
 4b8:	orrs	r1, r2, r1
 4bc:	ldrbeq	r1, [r9, #7]
 4c0:	ldrbeq	r2, [r9]
 4c4:	ldrbeq	r3, [r9, #1]
 4c8:	ldrbeq	r7, [r9, #2]
 4cc:	ldrbeq	r6, [r9, #3]
 4d0:	strbeq	r2, [r9, #7]
 4d4:	strbeq	r1, [r9]
 4d8:	ldrbeq	r1, [r9, #6]
 4dc:	strbeq	r1, [r9, #1]
 4e0:	strbeq	r3, [r9, #6]
 4e4:	ldrbeq	r1, [r9, #5]
 4e8:	strbeq	r1, [r9, #2]
 4ec:	strbeq	r7, [r9, #5]
 4f0:	ldrbeq	r1, [r9, #4]
 4f4:	strbeq	r1, [r9, #3]
 4f8:	strbeq	r6, [r9, #4]
 4fc:	subeq	sp, fp, #28
 500:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 504:	movw	r0, #0
 508:	movw	r1, #0
 50c:	movw	r3, #0
 510:	movw	r2, #422	; 0x1a6
 514:	movt	r0, #0
 518:	movt	r1, #0
 51c:	movt	r3, #0
 520:	bl	0 <__assert_fail>

00000524 <coda_netcdf_cursor_read_int16>:
 524:	mvn	r2, #0
 528:	b	304 <read_basic_type>

0000052c <coda_netcdf_cursor_read_int32>:
 52c:	mvn	r2, #0
 530:	b	304 <read_basic_type>

00000534 <coda_netcdf_cursor_read_float>:
 534:	mvn	r2, #0
 538:	b	304 <read_basic_type>

0000053c <coda_netcdf_cursor_read_double>:
 53c:	mvn	r2, #0
 540:	b	304 <read_basic_type>

00000544 <coda_netcdf_cursor_read_char>:
 544:	mvn	r2, #0
 548:	b	304 <read_basic_type>

0000054c <coda_netcdf_cursor_read_string>:
 54c:	push	{r4, r5, fp, lr}
 550:	add	fp, sp, #8
 554:	mov	r4, r2
 558:	mov	r5, r1
 55c:	bl	304 <read_basic_type>
 560:	mov	r1, r0
 564:	mvn	r0, #0
 568:	cmp	r1, #0
 56c:	moveq	r0, #0
 570:	addeq	r1, r4, r5
 574:	strbeq	r0, [r1, #-1]
 578:	pop	{r4, r5, fp, pc}

0000057c <coda_netcdf_cursor_read_int8_array>:
 57c:	b	580 <read_array>

00000580 <read_array>:
 580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 584:	add	fp, sp, #28
 588:	sub	sp, sp, #20
 58c:	ldrd	r8, [r0]
 590:	add	r0, r0, r9, lsl #4
 594:	ldr	lr, [r0, #-8]
 598:	ldr	r0, [lr, #12]
 59c:	ldr	r2, [lr, #4]
 5a0:	ldr	r7, [r0, #4]
 5a4:	ldr	r3, [r0, #24]
 5a8:	ldrd	r4, [r7, #24]
 5ac:	cmp	r3, #0
 5b0:	str	r1, [sp, #12]
 5b4:	lsr	r7, r4, #3
 5b8:	orr	r6, r7, r5, lsl #29
 5bc:	ldr	r7, [r2, #44]	; 0x2c
 5c0:	mul	r5, r7, r6
 5c4:	beq	60c <read_array+0x8c>
 5c8:	ldr	r7, [r2, #52]	; 0x34
 5cc:	cmp	r7, #1
 5d0:	blt	698 <read_array+0x118>
 5d4:	sdiv	r5, r5, r7
 5d8:	ldrd	r2, [r0, #16]
 5dc:	ldr	r0, [r8, #52]	; 0x34
 5e0:	ldr	r9, [sp, #12]
 5e4:	mov	r6, lr
 5e8:	str	r9, [sp, #8]
 5ec:	asr	r4, r5, #31
 5f0:	str	r5, [sp]
 5f4:	str	r4, [sp, #4]
 5f8:	bl	bec <read_bytes>
 5fc:	cmp	r0, #0
 600:	beq	640 <read_array+0xc0>
 604:	mvn	r0, #0
 608:	b	810 <read_array+0x290>
 60c:	ldrd	r2, [r0, #16]
 610:	ldr	r0, [r8, #52]	; 0x34
 614:	asr	r7, r5, #31
 618:	stm	sp, {r5, r7}
 61c:	str	r1, [sp, #8]
 620:	mov	r4, lr
 624:	bl	bec <read_bytes>
 628:	mvn	r1, #0
 62c:	mov	lr, r4
 630:	cmp	r0, #0
 634:	str	r1, [sp, #16]
 638:	bne	814 <read_array+0x294>
 63c:	b	698 <read_array+0x118>
 640:	mvn	r0, #0
 644:	add	r9, r9, r5
 648:	mov	sl, #1
 64c:	str	r0, [sp, #16]
 650:	cmp	r7, sl
 654:	mov	lr, r6
 658:	beq	698 <read_array+0x118>
 65c:	ldr	r0, [lr, #12]
 660:	ldr	r1, [r8, #60]	; 0x3c
 664:	ldrd	r2, [r0, #16]
 668:	mul	r1, r1, sl
 66c:	ldr	r0, [r8, #52]	; 0x34
 670:	str	r5, [sp]
 674:	stmib	sp, {r4, r9}
 678:	adds	r2, r2, r1
 67c:	adc	r3, r3, r1, asr #31
 680:	bl	bec <read_bytes>
 684:	add	r9, r9, r5
 688:	add	sl, sl, #1
 68c:	cmp	r0, #0
 690:	beq	650 <read_array+0xd0>
 694:	b	814 <read_array+0x294>
 698:	ldr	r0, [lr, #12]
 69c:	mov	r2, #0
 6a0:	ldr	r0, [r0, #4]
 6a4:	ldrd	r0, [r0, #24]
 6a8:	str	r2, [sp, #16]
 6ac:	rsbs	r2, r0, #31
 6b0:	rscs	r2, r1, #0
 6b4:	blt	71c <read_array+0x19c>
 6b8:	eor	r2, r0, #8
 6bc:	orrs	r2, r2, r1
 6c0:	beq	814 <read_array+0x294>
 6c4:	eor	r0, r0, #16
 6c8:	orrs	r0, r0, r1
 6cc:	bne	820 <read_array+0x2a0>
 6d0:	ldr	r0, [lr, #4]
 6d4:	ldr	r0, [r0, #44]	; 0x2c
 6d8:	cmp	r0, #1
 6dc:	blt	814 <read_array+0x294>
 6e0:	ldr	r7, [sp, #12]
 6e4:	mov	r0, #0
 6e8:	str	r0, [sp, #16]
 6ec:	mov	r0, #0
 6f0:	mov	r1, r7
 6f4:	ldrb	r2, [r1, r0, lsl #1]!
 6f8:	add	r0, r0, #1
 6fc:	ldrb	r3, [r1, #1]
 700:	strb	r3, [r1]
 704:	strb	r2, [r1, #1]
 708:	ldr	r1, [lr, #4]
 70c:	ldr	r1, [r1, #44]	; 0x2c
 710:	cmp	r0, r1
 714:	blt	6f0 <read_array+0x170>
 718:	b	814 <read_array+0x294>
 71c:	eor	r2, r0, #32
 720:	orrs	r2, r2, r1
 724:	bne	784 <read_array+0x204>
 728:	ldr	r0, [lr, #4]
 72c:	ldr	r0, [r0, #44]	; 0x2c
 730:	cmp	r0, #1
 734:	blt	814 <read_array+0x294>
 738:	ldr	r6, [sp, #12]
 73c:	mov	r0, #0
 740:	str	r0, [sp, #16]
 744:	mov	r0, #0
 748:	mov	r1, r6
 74c:	ldrb	r2, [r1, r0, lsl #2]!
 750:	add	r0, r0, #1
 754:	ldrb	r3, [r1, #1]
 758:	ldrb	r7, [r1, #2]
 75c:	ldrb	r5, [r1, #3]
 760:	strb	r5, [r1]
 764:	strb	r7, [r1, #1]
 768:	strb	r3, [r1, #2]
 76c:	strb	r2, [r1, #3]
 770:	ldr	r1, [lr, #4]
 774:	ldr	r1, [r1, #44]	; 0x2c
 778:	cmp	r0, r1
 77c:	blt	748 <read_array+0x1c8>
 780:	b	814 <read_array+0x294>
 784:	eor	r0, r0, #64	; 0x40
 788:	orrs	r0, r0, r1
 78c:	bne	820 <read_array+0x2a0>
 790:	ldr	r0, [lr, #4]
 794:	ldr	r0, [r0, #44]	; 0x2c
 798:	cmp	r0, #1
 79c:	blt	814 <read_array+0x294>
 7a0:	ldr	ip, [sp, #12]
 7a4:	mov	r0, #7
 7a8:	mov	r1, #0
 7ac:	mov	r2, ip
 7b0:	ldrb	r3, [r2, r0]!
 7b4:	add	r0, r0, #8
 7b8:	ldrb	r7, [r2, #-7]
 7bc:	strb	r7, [r2]
 7c0:	strb	r3, [r2, #-7]
 7c4:	add	r2, ip, r1, lsl #3
 7c8:	add	r1, r1, #1
 7cc:	ldrb	r3, [r2, #6]
 7d0:	ldrb	r7, [r2, #1]
 7d4:	ldrb	r5, [r2, #2]
 7d8:	ldrb	r4, [r2, #3]
 7dc:	ldrb	r6, [r2, #4]
 7e0:	strb	r7, [r2, #6]
 7e4:	strb	r3, [r2, #1]
 7e8:	ldrb	r3, [r2, #5]
 7ec:	strb	r3, [r2, #2]
 7f0:	strb	r5, [r2, #5]
 7f4:	strb	r6, [r2, #3]
 7f8:	strb	r4, [r2, #4]
 7fc:	ldr	r2, [lr, #4]
 800:	ldr	r2, [r2, #44]	; 0x2c
 804:	cmp	r1, r2
 808:	blt	7ac <read_array+0x22c>
 80c:	mov	r0, #0
 810:	str	r0, [sp, #16]
 814:	ldr	r0, [sp, #16]
 818:	sub	sp, fp, #28
 81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 820:	movw	r0, #0
 824:	movw	r1, #0
 828:	movw	r3, #0
 82c:	movw	r2, #262	; 0x106
 830:	movt	r0, #0
 834:	movt	r1, #0
 838:	movt	r3, #0
 83c:	bl	0 <__assert_fail>

00000840 <coda_netcdf_cursor_read_int16_array>:
 840:	b	580 <read_array>

00000844 <coda_netcdf_cursor_read_int32_array>:
 844:	b	580 <read_array>

00000848 <coda_netcdf_cursor_read_float_array>:
 848:	b	580 <read_array>

0000084c <coda_netcdf_cursor_read_double_array>:
 84c:	b	580 <read_array>

00000850 <coda_netcdf_cursor_read_char_array>:
 850:	b	580 <read_array>

00000854 <coda_netcdf_cursor_read_int8_partial_array>:
 854:	b	858 <read_partial_array>

00000858 <read_partial_array>:
 858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 85c:	add	fp, sp, #28
 860:	sub	sp, sp, #76	; 0x4c
 864:	ldr	r5, [r0, #4]
 868:	ldr	ip, [r0]
 86c:	add	r0, r0, r5, lsl #4
 870:	ldr	r6, [r0, #-8]
 874:	ldr	r4, [r6, #12]
 878:	ldr	r0, [r4, #4]
 87c:	ldr	r7, [r4, #24]
 880:	ldr	r5, [r0, #28]
 884:	ldr	r0, [r0, #24]
 888:	cmp	r7, #0
 88c:	str	r3, [sp, #44]	; 0x2c
 890:	str	r6, [sp, #48]	; 0x30
 894:	lsr	r0, r0, #3
 898:	orr	r5, r0, r5, lsl #29
 89c:	beq	9e8 <read_partial_array+0x190>
 8a0:	add	r0, r2, r1
 8a4:	mul	r4, r1, r5
 8a8:	mov	r3, #0
 8ac:	mov	r9, #0
 8b0:	mov	lr, #0
 8b4:	mov	r8, #0
 8b8:	str	ip, [sp, #24]
 8bc:	str	r1, [sp, #32]
 8c0:	str	r5, [sp, #28]
 8c4:	str	r0, [sp, #40]	; 0x28
 8c8:	ldr	r0, [r6, #4]
 8cc:	mov	r6, #0
 8d0:	ldr	r2, [r0, #44]	; 0x2c
 8d4:	ldr	r0, [r0, #52]	; 0x34
 8d8:	sdiv	sl, r2, r0
 8dc:	str	r0, [sp, #36]	; 0x24
 8e0:	mul	r0, sl, r5
 8e4:	str	sl, [sp, #20]
 8e8:	str	r0, [sp, #16]
 8ec:	b	9a0 <read_partial_array+0x148>
 8f0:	subs	r7, r7, r4
 8f4:	str	r4, [fp, #-48]	; 0xffffffd0
 8f8:	sbc	r0, r0, r4, asr #31
 8fc:	str	r0, [fp, #-40]	; 0xffffffd8
 900:	asr	r0, r4, #31
 904:	str	r0, [sp, #52]	; 0x34
 908:	ldr	r6, [sp, #48]	; 0x30
 90c:	add	r0, lr, #1
 910:	ldr	r3, [sp, #24]
 914:	ldr	r5, [fp, #-40]	; 0xffffffd8
 918:	str	r0, [fp, #-44]	; 0xffffffd4
 91c:	ldr	r0, [sp, #44]	; 0x2c
 920:	ldr	ip, [r6, #12]
 924:	add	r2, r0, r8
 928:	ldr	r0, [r3, #52]	; 0x34
 92c:	ldr	r3, [r3, #60]	; 0x3c
 930:	ldr	r6, [ip, #16]
 934:	ldr	r1, [ip, #20]
 938:	str	r2, [sp, #8]
 93c:	ldr	r2, [fp, #-48]	; 0xffffffd0
 940:	str	r7, [sp]
 944:	str	r5, [sp, #4]
 948:	adds	r2, r6, r2
 94c:	ldr	r6, [sp, #52]	; 0x34
 950:	adc	r6, r1, r6
 954:	mul	r1, r3, lr
 958:	adds	r2, r2, r1
 95c:	adc	r3, r6, r1, asr #31
 960:	bl	bec <read_bytes>
 964:	ldr	r1, [sp, #20]
 968:	ldr	r3, [fp, #-32]	; 0xffffffe0
 96c:	ldr	r6, [fp, #-36]	; 0xffffffdc
 970:	adds	r8, r7, r8
 974:	ldr	lr, [fp, #-44]	; 0xffffffd4
 978:	sub	r3, r3, r1
 97c:	add	sl, sl, r1
 980:	add	r9, r9, r1
 984:	ldr	r1, [sp, #16]
 988:	adc	r6, r5, r6
 98c:	ldr	r5, [sp, #28]
 990:	cmp	r0, #0
 994:	sub	r4, r4, r1
 998:	ldr	r1, [sp, #32]
 99c:	bne	aac <read_partial_array+0x254>
 9a0:	ldr	r0, [sp, #40]	; 0x28
 9a4:	ldr	r2, [sp, #36]	; 0x24
 9a8:	cmp	sl, r0
 9ac:	movlt	r0, sl
 9b0:	cmp	lr, r2
 9b4:	bge	a24 <read_partial_array+0x1cc>
 9b8:	add	r0, r0, r3
 9bc:	cmp	r9, r1
 9c0:	str	r3, [fp, #-32]	; 0xffffffe0
 9c4:	str	r6, [fp, #-36]	; 0xffffffdc
 9c8:	mul	r7, r0, r5
 9cc:	asr	r0, r7, #31
 9d0:	blt	8f0 <read_partial_array+0x98>
 9d4:	str	r0, [fp, #-40]	; 0xffffffd8
 9d8:	mov	r0, #0
 9dc:	str	r0, [fp, #-48]	; 0xffffffd0
 9e0:	mov	r0, #0
 9e4:	b	904 <read_partial_array+0xac>
 9e8:	mul	r7, r5, r2
 9ec:	ldr	r9, [r4, #20]
 9f0:	ldr	r4, [r4, #16]
 9f4:	mul	r1, r5, r1
 9f8:	ldr	r0, [ip, #52]	; 0x34
 9fc:	asr	r2, r7, #31
 a00:	str	r7, [sp]
 a04:	stmib	sp, {r2, r3}
 a08:	adds	r2, r4, r1
 a0c:	adc	r3, r9, r1, asr #31
 a10:	bl	bec <read_bytes>
 a14:	mov	r1, r0
 a18:	mvn	r0, #0
 a1c:	cmp	r1, #0
 a20:	bne	bb0 <read_partial_array+0x358>
 a24:	ldr	r7, [sp, #48]	; 0x30
 a28:	ldr	r0, [r7, #12]
 a2c:	ldr	r0, [r0, #4]
 a30:	ldr	r2, [r0, #24]
 a34:	ldr	r1, [r0, #28]
 a38:	mov	r0, #0
 a3c:	rsbs	r3, r2, #31
 a40:	rscs	r3, r1, #0
 a44:	blt	ab8 <read_partial_array+0x260>
 a48:	eor	r3, r2, #8
 a4c:	orrs	r3, r3, r1
 a50:	beq	bb0 <read_partial_array+0x358>
 a54:	eor	r2, r2, #16
 a58:	orrs	r1, r2, r1
 a5c:	bne	bb8 <read_partial_array+0x360>
 a60:	ldr	r1, [r7, #4]
 a64:	ldr	r1, [r1, #44]	; 0x2c
 a68:	cmp	r1, #1
 a6c:	blt	bb0 <read_partial_array+0x358>
 a70:	ldr	r6, [sp, #44]	; 0x2c
 a74:	mov	r5, r7
 a78:	mov	r0, #0
 a7c:	mov	r1, #0
 a80:	mov	r2, r6
 a84:	ldrb	r3, [r2, r1, lsl #1]!
 a88:	add	r1, r1, #1
 a8c:	ldrb	r7, [r2, #1]
 a90:	strb	r7, [r2]
 a94:	strb	r3, [r2, #1]
 a98:	ldr	r2, [r5, #4]
 a9c:	ldr	r2, [r2, #44]	; 0x2c
 aa0:	cmp	r1, r2
 aa4:	blt	a80 <read_partial_array+0x228>
 aa8:	b	bb0 <read_partial_array+0x358>
 aac:	mvn	r0, #0
 ab0:	sub	sp, fp, #28
 ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 ab8:	eor	r3, r2, #32
 abc:	orrs	r3, r3, r1
 ac0:	bne	b20 <read_partial_array+0x2c8>
 ac4:	ldr	r1, [r7, #4]
 ac8:	ldr	r1, [r1, #44]	; 0x2c
 acc:	cmp	r1, #1
 ad0:	blt	bb0 <read_partial_array+0x358>
 ad4:	ldr	ip, [sp, #44]	; 0x2c
 ad8:	mov	r4, r7
 adc:	mov	r0, #0
 ae0:	mov	r1, #0
 ae4:	mov	r2, ip
 ae8:	ldrb	r3, [r2, r1, lsl #2]!
 aec:	add	r1, r1, #1
 af0:	ldrb	r7, [r2, #1]
 af4:	ldrb	r6, [r2, #2]
 af8:	ldrb	r5, [r2, #3]
 afc:	strb	r5, [r2]
 b00:	strb	r6, [r2, #1]
 b04:	strb	r7, [r2, #2]
 b08:	strb	r3, [r2, #3]
 b0c:	ldr	r2, [r4, #4]
 b10:	ldr	r2, [r2, #44]	; 0x2c
 b14:	cmp	r1, r2
 b18:	blt	ae4 <read_partial_array+0x28c>
 b1c:	b	bb0 <read_partial_array+0x358>
 b20:	eor	r2, r2, #64	; 0x40
 b24:	orrs	r1, r2, r1
 b28:	bne	bb8 <read_partial_array+0x360>
 b2c:	ldr	r1, [r7, #4]
 b30:	ldr	r1, [r1, #44]	; 0x2c
 b34:	cmp	r1, #1
 b38:	blt	bb0 <read_partial_array+0x358>
 b3c:	ldr	lr, [sp, #44]	; 0x2c
 b40:	mov	r8, r7
 b44:	mov	r0, #0
 b48:	mov	r1, #7
 b4c:	mov	r2, #0
 b50:	mov	r3, lr
 b54:	ldrb	r7, [r3, r1]!
 b58:	add	r1, r1, #8
 b5c:	ldrb	r6, [r3, #-7]
 b60:	strb	r6, [r3]
 b64:	strb	r7, [r3, #-7]
 b68:	add	r3, lr, r2, lsl #3
 b6c:	add	r2, r2, #1
 b70:	ldrb	r7, [r3, #6]
 b74:	ldrb	r6, [r3, #1]
 b78:	ldrb	r5, [r3, #2]
 b7c:	ldrb	ip, [r3, #3]
 b80:	ldrb	r4, [r3, #4]
 b84:	strb	r6, [r3, #6]
 b88:	strb	r7, [r3, #1]
 b8c:	ldrb	r7, [r3, #5]
 b90:	strb	r7, [r3, #2]
 b94:	strb	r5, [r3, #5]
 b98:	strb	r4, [r3, #3]
 b9c:	strb	ip, [r3, #4]
 ba0:	ldr	r3, [r8, #4]
 ba4:	ldr	r3, [r3, #44]	; 0x2c
 ba8:	cmp	r2, r3
 bac:	blt	b50 <read_partial_array+0x2f8>
 bb0:	sub	sp, fp, #28
 bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 bb8:	movw	r0, #0
 bbc:	movw	r1, #0
 bc0:	movw	r3, #0
 bc4:	movw	r2, #347	; 0x15b
 bc8:	movt	r0, #0
 bcc:	movt	r1, #0
 bd0:	movt	r3, #0
 bd4:	bl	0 <__assert_fail>

00000bd8 <coda_netcdf_cursor_read_int16_partial_array>:
 bd8:	b	858 <read_partial_array>

00000bdc <coda_netcdf_cursor_read_int32_partial_array>:
 bdc:	b	858 <read_partial_array>

00000be0 <coda_netcdf_cursor_read_float_partial_array>:
 be0:	b	858 <read_partial_array>

00000be4 <coda_netcdf_cursor_read_double_partial_array>:
 be4:	b	858 <read_partial_array>

00000be8 <coda_netcdf_cursor_read_char_partial_array>:
 be8:	b	858 <read_partial_array>

00000bec <read_bytes>:
 bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 bf0:	add	fp, sp, #28
 bf4:	sub	sp, sp, #68	; 0x44
 bf8:	ldr	r7, [r0, #48]	; 0x30
 bfc:	mov	r4, r2
 c00:	ldr	r1, [fp, #12]
 c04:	ldr	r2, [fp, #8]
 c08:	ldr	ip, [fp, #16]
 c0c:	mov	sl, r3
 c10:	cmp	r7, #0
 c14:	beq	c98 <read_bytes+0xac>
 c18:	add	r9, r0, #40	; 0x28
 c1c:	adds	r5, r2, r4
 c20:	ldr	r8, [r9]
 c24:	ldr	r3, [r9, #4]
 c28:	adc	r6, r1, sl
 c2c:	subs	r5, r8, r5
 c30:	sbcs	r3, r3, r6
 c34:	bcs	ce0 <read_bytes+0xf4>
 c38:	ldr	r0, [r0, #16]
 c3c:	cmp	r0, #1
 c40:	bls	cc4 <read_bytes+0xd8>
 c44:	add	r8, sp, #47	; 0x2f
 c48:	mov	r0, r2
 c4c:	mov	r2, r8
 c50:	bl	0 <coda_str64>
 c54:	add	r7, sp, #26
 c58:	mov	r0, r4
 c5c:	mov	r1, sl
 c60:	mov	r2, r7
 c64:	bl	0 <coda_str64>
 c68:	ldrd	r0, [r9]
 c6c:	add	r4, sp, #5
 c70:	mov	r2, r4
 c74:	bl	0 <coda_str64>
 c78:	movw	r1, #0
 c7c:	mvn	r0, #300	; 0x12c
 c80:	mov	r2, r8
 c84:	mov	r3, r7
 c88:	str	r4, [sp]
 c8c:	movt	r1, #0
 c90:	bl	0 <coda_set_error>
 c94:	b	cd4 <read_bytes+0xe8>
 c98:	ldr	r3, [r0, #16]
 c9c:	cmp	r3, #2
 ca0:	bcs	d3c <read_bytes+0x150>
 ca4:	add	r3, r0, #8
 ca8:	adds	r7, r2, r4
 cac:	ldr	r6, [r3]
 cb0:	ldr	r3, [r3, #4]
 cb4:	adc	r1, r1, sl
 cb8:	subs	r7, r6, r7
 cbc:	sbcs	r1, r3, r1
 cc0:	bcs	cf8 <read_bytes+0x10c>
 cc4:	movw	r1, #0
 cc8:	mvn	r0, #300	; 0x12c
 ccc:	movt	r1, #0
 cd0:	bl	0 <coda_set_error>
 cd4:	mvn	r0, #0
 cd8:	sub	sp, fp, #28
 cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 ce0:	add	r1, r7, r4
 ce4:	mov	r0, ip
 ce8:	bl	0 <memcpy>
 cec:	mov	r0, #0
 cf0:	sub	sp, fp, #28
 cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 cf8:	ldr	r0, [r0, #56]	; 0x38
 cfc:	mov	r1, ip
 d00:	mov	r3, r4
 d04:	bl	0 <pread>
 d08:	mov	r1, r0
 d0c:	mov	r0, #0
 d10:	cmn	r1, #1
 d14:	bgt	cd8 <read_bytes+0xec>
 d18:	bl	0 <__errno_location>
 d1c:	ldr	r0, [r0]
 d20:	bl	0 <strerror>
 d24:	movw	r1, #0
 d28:	mov	r2, r0
 d2c:	mvn	r0, #21
 d30:	movt	r1, #0
 d34:	bl	0 <coda_set_error>
 d38:	b	cd4 <read_bytes+0xe8>
 d3c:	movw	r0, #0
 d40:	movw	r1, #0
 d44:	movw	r3, #0
 d48:	mov	r2, #83	; 0x53
 d4c:	movt	r0, #0
 d50:	movt	r1, #0
 d54:	movt	r3, #0
 d58:	bl	0 <__assert_fail>
