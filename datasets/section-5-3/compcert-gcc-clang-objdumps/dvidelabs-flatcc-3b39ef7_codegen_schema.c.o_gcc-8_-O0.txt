
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint16_cast_to_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	mov	r3, r0
      10:	strh	r3, [fp, #-6]
      14:	ldrh	r3, [fp, #-6]
      18:	mov	r0, r3
      1c:	add	sp, fp, #0
      20:	pop	{fp}		; (ldr fp, [sp], #4)
      24:	bx	lr

00000028 <flatbuffers_int32_cast_to_pe>:
      28:	push	{fp}		; (str fp, [sp, #-4]!)
      2c:	add	fp, sp, #0
      30:	sub	sp, sp, #12
      34:	str	r0, [fp, #-8]
      38:	ldr	r3, [fp, #-8]
      3c:	mov	r0, r3
      40:	add	sp, fp, #0
      44:	pop	{fp}		; (ldr fp, [sp], #4)
      48:	bx	lr

0000004c <flatbuffers_int64_cast_to_pe>:
      4c:	push	{fp}		; (str fp, [sp, #-4]!)
      50:	add	fp, sp, #0
      54:	sub	sp, sp, #12
      58:	strd	r0, [fp, #-12]
      5c:	ldrd	r2, [fp, #-12]
      60:	mov	r0, r2
      64:	mov	r1, r3
      68:	add	sp, fp, #0
      6c:	pop	{fp}		; (ldr fp, [sp], #4)
      70:	bx	lr

00000074 <flatbuffers_double_cast_to_pe>:
      74:	push	{fp}		; (str fp, [sp, #-4]!)
      78:	add	fp, sp, #0
      7c:	sub	sp, sp, #20
      80:	vstr	d0, [fp, #-20]	; 0xffffffec
      84:	ldrd	r2, [fp, #-20]	; 0xffffffec
      88:	strd	r2, [fp, #-12]
      8c:	ldrd	r2, [fp, #-12]
      90:	strd	r2, [fp, #-12]
      94:	ldrd	r2, [fp, #-12]
      98:	vmov	d7, r2, r3
      9c:	vmov.f64	d0, d7
      a0:	add	sp, fp, #0
      a4:	pop	{fp}		; (ldr fp, [sp], #4)
      a8:	bx	lr

000000ac <flatbuffers_bool_cast_to_pe>:
      ac:	push	{fp}		; (str fp, [sp, #-4]!)
      b0:	add	fp, sp, #0
      b4:	sub	sp, sp, #12
      b8:	mov	r3, r0
      bc:	strb	r3, [fp, #-5]
      c0:	ldrb	r3, [fp, #-5]
      c4:	mov	r0, r3
      c8:	add	sp, fp, #0
      cc:	pop	{fp}		; (ldr fp, [sp], #4)
      d0:	bx	lr

000000d4 <__flatbuffers_uoffset_cast_from_pe>:
      d4:	push	{fp}		; (str fp, [sp, #-4]!)
      d8:	add	fp, sp, #0
      dc:	sub	sp, sp, #12
      e0:	str	r0, [fp, #-8]
      e4:	ldr	r3, [fp, #-8]
      e8:	mov	r0, r3
      ec:	add	sp, fp, #0
      f0:	pop	{fp}		; (ldr fp, [sp], #4)
      f4:	bx	lr

000000f8 <__flatbuffers_uoffset_cast_to_pe>:
      f8:	push	{fp}		; (str fp, [sp, #-4]!)
      fc:	add	fp, sp, #0
     100:	sub	sp, sp, #12
     104:	str	r0, [fp, #-8]
     108:	ldr	r3, [fp, #-8]
     10c:	mov	r0, r3
     110:	add	sp, fp, #0
     114:	pop	{fp}		; (ldr fp, [sp], #4)
     118:	bx	lr

0000011c <__flatbuffers_uoffset_read_from_pe>:
     11c:	str	fp, [sp, #-8]!
     120:	str	lr, [sp, #4]
     124:	add	fp, sp, #4
     128:	sub	sp, sp, #8
     12c:	str	r0, [fp, #-8]
     130:	ldr	r3, [fp, #-8]
     134:	ldr	r3, [r3]
     138:	mov	r0, r3
     13c:	bl	d4 <__flatbuffers_uoffset_cast_from_pe>
     140:	mov	r3, r0
     144:	mov	r0, r3
     148:	sub	sp, fp, #4
     14c:	ldr	fp, [sp]
     150:	add	sp, sp, #4
     154:	pop	{pc}		; (ldr pc, [sp], #4)

00000158 <__flatbuffers_uoffset_write_to_pe>:
     158:	str	fp, [sp, #-8]!
     15c:	str	lr, [sp, #4]
     160:	add	fp, sp, #4
     164:	sub	sp, sp, #8
     168:	str	r0, [fp, #-8]
     16c:	str	r1, [fp, #-12]
     170:	ldr	r0, [fp, #-12]
     174:	bl	f8 <__flatbuffers_uoffset_cast_to_pe>
     178:	mov	r2, r0
     17c:	ldr	r3, [fp, #-8]
     180:	str	r2, [r3]
     184:	nop	{0}
     188:	sub	sp, fp, #4
     18c:	ldr	fp, [sp]
     190:	add	sp, sp, #4
     194:	pop	{pc}		; (ldr pc, [sp], #4)

00000198 <__flatbuffers_soffset_cast_from_pe>:
     198:	push	{fp}		; (str fp, [sp, #-4]!)
     19c:	add	fp, sp, #0
     1a0:	sub	sp, sp, #12
     1a4:	str	r0, [fp, #-8]
     1a8:	ldr	r3, [fp, #-8]
     1ac:	mov	r0, r3
     1b0:	add	sp, fp, #0
     1b4:	pop	{fp}		; (ldr fp, [sp], #4)
     1b8:	bx	lr

000001bc <__flatbuffers_soffset_read_from_pe>:
     1bc:	str	fp, [sp, #-8]!
     1c0:	str	lr, [sp, #4]
     1c4:	add	fp, sp, #4
     1c8:	sub	sp, sp, #8
     1cc:	str	r0, [fp, #-8]
     1d0:	ldr	r3, [fp, #-8]
     1d4:	ldr	r3, [r3]
     1d8:	mov	r0, r3
     1dc:	bl	198 <__flatbuffers_soffset_cast_from_pe>
     1e0:	mov	r3, r0
     1e4:	mov	r0, r3
     1e8:	sub	sp, fp, #4
     1ec:	ldr	fp, [sp]
     1f0:	add	sp, sp, #4
     1f4:	pop	{pc}		; (ldr pc, [sp], #4)

000001f8 <__flatbuffers_voffset_cast_from_pe>:
     1f8:	push	{fp}		; (str fp, [sp, #-4]!)
     1fc:	add	fp, sp, #0
     200:	sub	sp, sp, #12
     204:	mov	r3, r0
     208:	strh	r3, [fp, #-6]
     20c:	ldrh	r3, [fp, #-6]
     210:	mov	r0, r3
     214:	add	sp, fp, #0
     218:	pop	{fp}		; (ldr fp, [sp], #4)
     21c:	bx	lr

00000220 <__flatbuffers_voffset_read_from_pe>:
     220:	str	fp, [sp, #-8]!
     224:	str	lr, [sp, #4]
     228:	add	fp, sp, #4
     22c:	sub	sp, sp, #8
     230:	str	r0, [fp, #-8]
     234:	ldr	r3, [fp, #-8]
     238:	ldrh	r3, [r3]
     23c:	mov	r0, r3
     240:	bl	1f8 <__flatbuffers_voffset_cast_from_pe>
     244:	mov	r3, r0
     248:	mov	r0, r3
     24c:	sub	sp, fp, #4
     250:	ldr	fp, [sp]
     254:	add	sp, sp, #4
     258:	pop	{pc}		; (ldr pc, [sp], #4)

0000025c <__flatbuffers_thash_cast_from_pe>:
     25c:	push	{fp}		; (str fp, [sp, #-4]!)
     260:	add	fp, sp, #0
     264:	sub	sp, sp, #12
     268:	str	r0, [fp, #-8]
     26c:	ldr	r3, [fp, #-8]
     270:	mov	r0, r3
     274:	add	sp, fp, #0
     278:	pop	{fp}		; (ldr fp, [sp], #4)
     27c:	bx	lr

00000280 <__flatbuffers_thash_cast_from_le>:
     280:	push	{fp}		; (str fp, [sp, #-4]!)
     284:	add	fp, sp, #0
     288:	sub	sp, sp, #12
     28c:	str	r0, [fp, #-8]
     290:	ldr	r3, [fp, #-8]
     294:	mov	r0, r3
     298:	add	sp, fp, #0
     29c:	pop	{fp}		; (ldr fp, [sp], #4)
     2a0:	bx	lr

000002a4 <__flatbuffers_thash_read_from_pe>:
     2a4:	str	fp, [sp, #-8]!
     2a8:	str	lr, [sp, #4]
     2ac:	add	fp, sp, #4
     2b0:	sub	sp, sp, #8
     2b4:	str	r0, [fp, #-8]
     2b8:	ldr	r3, [fp, #-8]
     2bc:	ldr	r3, [r3]
     2c0:	mov	r0, r3
     2c4:	bl	25c <__flatbuffers_thash_cast_from_pe>
     2c8:	mov	r3, r0
     2cc:	mov	r0, r3
     2d0:	sub	sp, fp, #4
     2d4:	ldr	fp, [sp]
     2d8:	add	sp, sp, #4
     2dc:	pop	{pc}		; (ldr pc, [sp], #4)

000002e0 <flatbuffers_vec_len>:
     2e0:	str	fp, [sp, #-8]!
     2e4:	str	lr, [sp, #4]
     2e8:	add	fp, sp, #4
     2ec:	sub	sp, sp, #8
     2f0:	str	r0, [fp, #-8]
     2f4:	ldr	r3, [fp, #-8]
     2f8:	cmp	r3, #0
     2fc:	beq	318 <flatbuffers_vec_len+0x38>
     300:	ldr	r3, [fp, #-8]
     304:	sub	r3, r3, #4
     308:	mov	r0, r3
     30c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     310:	mov	r3, r0
     314:	b	31c <flatbuffers_vec_len+0x3c>
     318:	mov	r3, #0
     31c:	mov	r0, r3
     320:	sub	sp, fp, #4
     324:	ldr	fp, [sp]
     328:	add	sp, sp, #4
     32c:	pop	{pc}		; (ldr pc, [sp], #4)

00000330 <flatbuffers_string_len>:
     330:	str	fp, [sp, #-8]!
     334:	str	lr, [sp, #4]
     338:	add	fp, sp, #4
     33c:	sub	sp, sp, #8
     340:	str	r0, [fp, #-8]
     344:	ldr	r3, [fp, #-8]
     348:	cmp	r3, #0
     34c:	beq	368 <flatbuffers_string_len+0x38>
     350:	ldr	r3, [fp, #-8]
     354:	sub	r3, r3, #4
     358:	mov	r0, r3
     35c:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     360:	mov	r3, r0
     364:	b	36c <flatbuffers_string_len+0x3c>
     368:	mov	r3, #0
     36c:	mov	r0, r3
     370:	sub	sp, fp, #4
     374:	ldr	fp, [sp]
     378:	add	sp, sp, #4
     37c:	pop	{pc}		; (ldr pc, [sp], #4)

00000380 <__flatbuffers_string_n_cmp>:
     380:	str	fp, [sp, #-8]!
     384:	str	lr, [sp, #4]
     388:	add	fp, sp, #4
     38c:	sub	sp, sp, #24
     390:	str	r0, [fp, #-16]
     394:	str	r1, [fp, #-20]	; 0xffffffec
     398:	str	r2, [fp, #-24]	; 0xffffffe8
     39c:	ldr	r0, [fp, #-16]
     3a0:	bl	330 <flatbuffers_string_len>
     3a4:	str	r0, [fp, #-8]
     3a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     3ac:	ldr	r3, [fp, #-8]
     3b0:	cmp	r2, r3
     3b4:	movcc	r3, r2
     3b8:	movcs	r3, r3
     3bc:	mov	r2, r3
     3c0:	ldr	r1, [fp, #-20]	; 0xffffffec
     3c4:	ldr	r0, [fp, #-16]
     3c8:	bl	0 <strncmp>
     3cc:	str	r0, [fp, #-12]
     3d0:	ldr	r3, [fp, #-12]
     3d4:	cmp	r3, #0
     3d8:	bne	410 <__flatbuffers_string_n_cmp+0x90>
     3dc:	ldr	r2, [fp, #-8]
     3e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3e4:	cmp	r2, r3
     3e8:	bcc	408 <__flatbuffers_string_n_cmp+0x88>
     3ec:	ldr	r2, [fp, #-8]
     3f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3f4:	cmp	r2, r3
     3f8:	movhi	r3, #1
     3fc:	movls	r3, #0
     400:	uxtb	r3, r3
     404:	b	414 <__flatbuffers_string_n_cmp+0x94>
     408:	mvn	r3, #0
     40c:	b	414 <__flatbuffers_string_n_cmp+0x94>
     410:	ldr	r3, [fp, #-12]
     414:	mov	r0, r3
     418:	sub	sp, fp, #4
     41c:	ldr	fp, [sp]
     420:	add	sp, sp, #4
     424:	pop	{pc}		; (ldr pc, [sp], #4)

00000428 <flatbuffers_has_identifier>:
     428:	str	fp, [sp, #-8]!
     42c:	str	lr, [sp, #4]
     430:	add	fp, sp, #4
     434:	sub	sp, sp, #16
     438:	str	r0, [fp, #-16]
     43c:	str	r1, [fp, #-20]	; 0xffffffec
     440:	mov	r3, #0
     444:	str	r3, [fp, #-12]
     448:	ldr	r3, [fp, #-20]	; 0xffffffec
     44c:	cmp	r3, #0
     450:	bne	45c <flatbuffers_has_identifier+0x34>
     454:	mov	r3, #1
     458:	b	4c0 <flatbuffers_has_identifier+0x98>
     45c:	sub	r3, fp, #12
     460:	mov	r2, #4
     464:	ldr	r1, [fp, #-20]	; 0xffffffec
     468:	mov	r0, r3
     46c:	bl	0 <strncpy>
     470:	ldr	r3, [fp, #-12]
     474:	mov	r0, r3
     478:	bl	280 <__flatbuffers_thash_cast_from_le>
     47c:	mov	r3, r0
     480:	str	r3, [fp, #-12]
     484:	ldr	r3, [fp, #-16]
     488:	add	r3, r3, #4
     48c:	mov	r0, r3
     490:	bl	2a4 <__flatbuffers_thash_read_from_pe>
     494:	str	r0, [fp, #-8]
     498:	ldr	r3, [fp, #-12]
     49c:	cmp	r3, #0
     4a0:	beq	4b4 <flatbuffers_has_identifier+0x8c>
     4a4:	ldr	r3, [fp, #-12]
     4a8:	ldr	r2, [fp, #-8]
     4ac:	cmp	r2, r3
     4b0:	bne	4bc <flatbuffers_has_identifier+0x94>
     4b4:	mov	r3, #1
     4b8:	b	4c0 <flatbuffers_has_identifier+0x98>
     4bc:	mov	r3, #0
     4c0:	mov	r0, r3
     4c4:	sub	sp, fp, #4
     4c8:	ldr	fp, [sp]
     4cc:	add	sp, sp, #4
     4d0:	pop	{pc}		; (ldr pc, [sp], #4)

000004d4 <reflection_BaseType_cast_to_pe>:
     4d4:	push	{fp}		; (str fp, [sp, #-4]!)
     4d8:	add	fp, sp, #0
     4dc:	sub	sp, sp, #12
     4e0:	mov	r3, r0
     4e4:	strb	r3, [fp, #-5]
     4e8:	ldrsb	r3, [fp, #-5]
     4ec:	mov	r0, r3
     4f0:	add	sp, fp, #0
     4f4:	pop	{fp}		; (ldr fp, [sp], #4)
     4f8:	bx	lr

000004fc <reflection_Field_vec_len>:
     4fc:	str	fp, [sp, #-8]!
     500:	str	lr, [sp, #4]
     504:	add	fp, sp, #4
     508:	sub	sp, sp, #8
     50c:	str	r0, [fp, #-8]
     510:	ldr	r3, [fp, #-8]
     514:	cmp	r3, #0
     518:	beq	534 <reflection_Field_vec_len+0x38>
     51c:	ldr	r3, [fp, #-8]
     520:	sub	r3, r3, #4
     524:	mov	r0, r3
     528:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     52c:	mov	r3, r0
     530:	b	538 <reflection_Field_vec_len+0x3c>
     534:	mov	r3, #0
     538:	mov	r0, r3
     53c:	sub	sp, fp, #4
     540:	ldr	fp, [sp]
     544:	add	sp, sp, #4
     548:	pop	{pc}		; (ldr pc, [sp], #4)

0000054c <reflection_Field_vec_at>:
     54c:	str	fp, [sp, #-8]!
     550:	str	lr, [sp, #4]
     554:	add	fp, sp, #4
     558:	sub	sp, sp, #16
     55c:	str	r0, [fp, #-16]
     560:	str	r1, [fp, #-20]	; 0xffffffec
     564:	ldr	r3, [fp, #-20]	; 0xffffffec
     568:	lsl	r3, r3, #2
     56c:	ldr	r2, [fp, #-16]
     570:	add	r3, r2, r3
     574:	str	r3, [fp, #-8]
     578:	ldr	r0, [fp, #-16]
     57c:	bl	2e0 <flatbuffers_vec_len>
     580:	mov	r2, r0
     584:	ldr	r3, [fp, #-20]	; 0xffffffec
     588:	cmp	r3, r2
     58c:	bcc	5b0 <reflection_Field_vec_at+0x64>
     590:	movw	r3, #0
     594:	movt	r3, #0
     598:	mov	r2, #192	; 0xc0
     59c:	movw	r1, #0
     5a0:	movt	r1, #0
     5a4:	movw	r0, #0
     5a8:	movt	r0, #0
     5ac:	bl	0 <__assert_fail>
     5b0:	ldr	r0, [fp, #-8]
     5b4:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     5b8:	mov	r2, r0
     5bc:	ldr	r3, [fp, #-8]
     5c0:	add	r3, r3, r2
     5c4:	mov	r0, r3
     5c8:	sub	sp, fp, #4
     5cc:	ldr	fp, [sp]
     5d0:	add	sp, sp, #4
     5d4:	pop	{pc}		; (ldr pc, [sp], #4)

000005d8 <reflection_Field_name>:
     5d8:	str	fp, [sp, #-8]!
     5dc:	str	lr, [sp, #4]
     5e0:	add	fp, sp, #4
     5e4:	sub	sp, sp, #24
     5e8:	str	r0, [fp, #-24]	; 0xffffffe8
     5ec:	mov	r3, #0
     5f0:	strh	r3, [fp, #-6]
     5f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5f8:	cmp	r3, #0
     5fc:	bne	620 <reflection_Field_name+0x48>
     600:	movw	r3, #0
     604:	movt	r3, #0
     608:	mov	r2, #195	; 0xc3
     60c:	movw	r1, #0
     610:	movt	r1, #0
     614:	movw	r0, #0
     618:	movt	r0, #0
     61c:	bl	0 <__assert_fail>
     620:	mov	r3, #0
     624:	strh	r3, [fp, #-8]
     628:	ldr	r0, [fp, #-24]	; 0xffffffe8
     62c:	bl	1bc <__flatbuffers_soffset_read_from_pe>
     630:	mov	r3, r0
     634:	rsb	r3, r3, #0
     638:	ldr	r2, [fp, #-24]	; 0xffffffe8
     63c:	add	r3, r2, r3
     640:	str	r3, [fp, #-12]
     644:	ldr	r0, [fp, #-12]
     648:	bl	220 <__flatbuffers_voffset_read_from_pe>
     64c:	mov	r3, r0
     650:	mov	r2, r3
     654:	ldrh	r3, [fp, #-8]
     658:	add	r3, r3, #3
     65c:	lsl	r3, r3, #1
     660:	cmp	r2, r3
     664:	bcc	68c <reflection_Field_name+0xb4>
     668:	ldrh	r3, [fp, #-8]
     66c:	add	r3, r3, #2
     670:	lsl	r3, r3, #1
     674:	ldr	r2, [fp, #-12]
     678:	add	r3, r2, r3
     67c:	mov	r0, r3
     680:	bl	220 <__flatbuffers_voffset_read_from_pe>
     684:	mov	r3, r0
     688:	strh	r3, [fp, #-6]
     68c:	ldrh	r3, [fp, #-6]
     690:	cmp	r3, #0
     694:	beq	6c4 <reflection_Field_name+0xec>
     698:	ldrh	r3, [fp, #-6]
     69c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6a0:	add	r3, r2, r3
     6a4:	str	r3, [fp, #-16]
     6a8:	ldr	r0, [fp, #-16]
     6ac:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     6b0:	mov	r3, r0
     6b4:	add	r3, r3, #4
     6b8:	ldr	r2, [fp, #-16]
     6bc:	add	r3, r2, r3
     6c0:	b	6e4 <reflection_Field_name+0x10c>
     6c4:	movw	r3, #0
     6c8:	movt	r3, #0
     6cc:	mov	r2, #195	; 0xc3
     6d0:	movw	r1, #0
     6d4:	movt	r1, #0
     6d8:	movw	r0, #0
     6dc:	movt	r0, #0
     6e0:	bl	0 <__assert_fail>
     6e4:	mov	r0, r3
     6e8:	sub	sp, fp, #4
     6ec:	ldr	fp, [sp]
     6f0:	add	sp, sp, #4
     6f4:	pop	{pc}		; (ldr pc, [sp], #4)

000006f8 <__reflection_Field_sort_by_name__heap_sift_down>:
     6f8:	str	fp, [sp, #-8]!
     6fc:	str	lr, [sp, #4]
     700:	add	fp, sp, #4
     704:	sub	sp, sp, #48	; 0x30
     708:	str	r0, [fp, #-40]	; 0xffffffd8
     70c:	str	r1, [fp, #-44]	; 0xffffffd4
     710:	str	r2, [fp, #-48]	; 0xffffffd0
     714:	ldr	r3, [fp, #-44]	; 0xffffffd4
     718:	str	r3, [fp, #-12]
     71c:	b	8b4 <__reflection_Field_sort_by_name__heap_sift_down+0x1bc>
     720:	ldr	r3, [fp, #-12]
     724:	lsl	r3, r3, #1
     728:	str	r3, [fp, #-8]
     72c:	ldr	r2, [fp, #-8]
     730:	ldr	r3, [fp, #-48]	; 0xffffffd0
     734:	cmp	r2, r3
     738:	bcs	7b0 <__reflection_Field_sort_by_name__heap_sift_down+0xb8>
     73c:	ldr	r1, [fp, #-8]
     740:	ldr	r0, [fp, #-40]	; 0xffffffd8
     744:	bl	54c <reflection_Field_vec_at>
     748:	mov	r3, r0
     74c:	mov	r0, r3
     750:	bl	5d8 <reflection_Field_name>
     754:	str	r0, [fp, #-16]
     758:	ldr	r3, [fp, #-8]
     75c:	add	r3, r3, #1
     760:	mov	r1, r3
     764:	ldr	r0, [fp, #-40]	; 0xffffffd8
     768:	bl	54c <reflection_Field_vec_at>
     76c:	mov	r3, r0
     770:	mov	r0, r3
     774:	bl	5d8 <reflection_Field_name>
     778:	str	r0, [fp, #-20]	; 0xffffffec
     77c:	ldr	r0, [fp, #-20]	; 0xffffffec
     780:	bl	330 <flatbuffers_string_len>
     784:	mov	r3, r0
     788:	mov	r2, r3
     78c:	ldr	r1, [fp, #-20]	; 0xffffffec
     790:	ldr	r0, [fp, #-16]
     794:	bl	380 <__flatbuffers_string_n_cmp>
     798:	mov	r3, r0
     79c:	cmp	r3, #0
     7a0:	bge	7b0 <__reflection_Field_sort_by_name__heap_sift_down+0xb8>
     7a4:	ldr	r3, [fp, #-8]
     7a8:	add	r3, r3, #1
     7ac:	str	r3, [fp, #-8]
     7b0:	ldr	r1, [fp, #-12]
     7b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     7b8:	bl	54c <reflection_Field_vec_at>
     7bc:	mov	r3, r0
     7c0:	mov	r0, r3
     7c4:	bl	5d8 <reflection_Field_name>
     7c8:	str	r0, [fp, #-24]	; 0xffffffe8
     7cc:	ldr	r1, [fp, #-8]
     7d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     7d4:	bl	54c <reflection_Field_vec_at>
     7d8:	mov	r3, r0
     7dc:	mov	r0, r3
     7e0:	bl	5d8 <reflection_Field_name>
     7e4:	str	r0, [fp, #-16]
     7e8:	ldr	r0, [fp, #-16]
     7ec:	bl	330 <flatbuffers_string_len>
     7f0:	mov	r3, r0
     7f4:	mov	r2, r3
     7f8:	ldr	r1, [fp, #-16]
     7fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     800:	bl	380 <__flatbuffers_string_n_cmp>
     804:	mov	r3, r0
     808:	cmp	r3, #0
     80c:	bge	8cc <__reflection_Field_sort_by_name__heap_sift_down+0x1d4>
     810:	ldr	r2, [fp, #-12]
     814:	ldr	r3, [fp, #-8]
     818:	sub	r3, r2, r3
     81c:	lsl	r3, r3, #2
     820:	str	r3, [fp, #-28]	; 0xffffffe4
     824:	ldr	r3, [fp, #-8]
     828:	lsl	r3, r3, #2
     82c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     830:	add	r3, r2, r3
     834:	mov	r0, r3
     838:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     83c:	mov	r2, r0
     840:	ldr	r3, [fp, #-28]	; 0xffffffe4
     844:	sub	r3, r2, r3
     848:	str	r3, [fp, #-32]	; 0xffffffe0
     84c:	ldr	r3, [fp, #-12]
     850:	lsl	r3, r3, #2
     854:	ldr	r2, [fp, #-40]	; 0xffffffd8
     858:	add	r3, r2, r3
     85c:	mov	r0, r3
     860:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     864:	mov	r2, r0
     868:	ldr	r3, [fp, #-28]	; 0xffffffe4
     86c:	add	r3, r3, r2
     870:	str	r3, [fp, #-36]	; 0xffffffdc
     874:	ldr	r3, [fp, #-12]
     878:	lsl	r3, r3, #2
     87c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     880:	add	r3, r2, r3
     884:	ldr	r1, [fp, #-32]	; 0xffffffe0
     888:	mov	r0, r3
     88c:	bl	158 <__flatbuffers_uoffset_write_to_pe>
     890:	ldr	r3, [fp, #-8]
     894:	lsl	r3, r3, #2
     898:	ldr	r2, [fp, #-40]	; 0xffffffd8
     89c:	add	r3, r2, r3
     8a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     8a4:	mov	r0, r3
     8a8:	bl	158 <__flatbuffers_uoffset_write_to_pe>
     8ac:	ldr	r3, [fp, #-8]
     8b0:	str	r3, [fp, #-12]
     8b4:	ldr	r3, [fp, #-12]
     8b8:	lsl	r3, r3, #1
     8bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
     8c0:	cmp	r2, r3
     8c4:	bcs	720 <__reflection_Field_sort_by_name__heap_sift_down+0x28>
     8c8:	b	8d0 <__reflection_Field_sort_by_name__heap_sift_down+0x1d8>
     8cc:	nop	{0}
     8d0:	sub	sp, fp, #4
     8d4:	ldr	fp, [sp]
     8d8:	add	sp, sp, #4
     8dc:	pop	{pc}		; (ldr pc, [sp], #4)

000008e0 <__reflection_Field_sort_by_name__heap_sort>:
     8e0:	str	fp, [sp, #-8]!
     8e4:	str	lr, [sp, #4]
     8e8:	add	fp, sp, #4
     8ec:	sub	sp, sp, #32
     8f0:	str	r0, [fp, #-32]	; 0xffffffe0
     8f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8f8:	bl	4fc <reflection_Field_vec_len>
     8fc:	str	r0, [fp, #-16]
     900:	ldr	r3, [fp, #-16]
     904:	cmp	r3, #0
     908:	beq	9f0 <__reflection_Field_sort_by_name__heap_sort+0x110>
     90c:	ldr	r3, [fp, #-16]
     910:	sub	r3, r3, #1
     914:	str	r3, [fp, #-12]
     918:	ldr	r3, [fp, #-16]
     91c:	lsr	r3, r3, #1
     920:	str	r3, [fp, #-8]
     924:	ldr	r2, [fp, #-12]
     928:	ldr	r1, [fp, #-8]
     92c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     930:	bl	6f8 <__reflection_Field_sort_by_name__heap_sift_down>
     934:	ldr	r3, [fp, #-8]
     938:	sub	r2, r3, #1
     93c:	str	r2, [fp, #-8]
     940:	cmp	r3, #0
     944:	bne	924 <__reflection_Field_sort_by_name__heap_sort+0x44>
     948:	b	9e0 <__reflection_Field_sort_by_name__heap_sort+0x100>
     94c:	ldr	r3, [fp, #-12]
     950:	lsl	r3, r3, #2
     954:	rsb	r3, r3, #0
     958:	str	r3, [fp, #-20]	; 0xffffffec
     95c:	ldr	r3, [fp, #-12]
     960:	lsl	r3, r3, #2
     964:	ldr	r2, [fp, #-32]	; 0xffffffe0
     968:	add	r3, r2, r3
     96c:	mov	r0, r3
     970:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     974:	mov	r2, r0
     978:	ldr	r3, [fp, #-20]	; 0xffffffec
     97c:	sub	r3, r2, r3
     980:	str	r3, [fp, #-24]	; 0xffffffe8
     984:	ldr	r0, [fp, #-32]	; 0xffffffe0
     988:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     98c:	mov	r2, r0
     990:	ldr	r3, [fp, #-20]	; 0xffffffec
     994:	add	r3, r3, r2
     998:	str	r3, [fp, #-28]	; 0xffffffe4
     99c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     9a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9a4:	bl	158 <__flatbuffers_uoffset_write_to_pe>
     9a8:	ldr	r3, [fp, #-12]
     9ac:	lsl	r3, r3, #2
     9b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
     9b4:	add	r3, r2, r3
     9b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9bc:	mov	r0, r3
     9c0:	bl	158 <__flatbuffers_uoffset_write_to_pe>
     9c4:	ldr	r3, [fp, #-12]
     9c8:	sub	r3, r3, #1
     9cc:	str	r3, [fp, #-12]
     9d0:	ldr	r2, [fp, #-12]
     9d4:	mov	r1, #0
     9d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     9dc:	bl	6f8 <__reflection_Field_sort_by_name__heap_sift_down>
     9e0:	ldr	r3, [fp, #-12]
     9e4:	cmp	r3, #0
     9e8:	bne	94c <__reflection_Field_sort_by_name__heap_sort+0x6c>
     9ec:	b	9f4 <__reflection_Field_sort_by_name__heap_sort+0x114>
     9f0:	nop	{0}
     9f4:	sub	sp, fp, #4
     9f8:	ldr	fp, [sp]
     9fc:	add	sp, sp, #4
     a00:	pop	{pc}		; (ldr pc, [sp], #4)

00000a04 <reflection_Field_vec_sort_by_name>:
     a04:	str	fp, [sp, #-8]!
     a08:	str	lr, [sp, #4]
     a0c:	add	fp, sp, #4
     a10:	sub	sp, sp, #8
     a14:	str	r0, [fp, #-8]
     a18:	ldr	r0, [fp, #-8]
     a1c:	bl	8e0 <__reflection_Field_sort_by_name__heap_sort>
     a20:	nop	{0}
     a24:	sub	sp, fp, #4
     a28:	ldr	fp, [sp]
     a2c:	add	sp, sp, #4
     a30:	pop	{pc}		; (ldr pc, [sp], #4)

00000a34 <reflection_Object_vec_len>:
     a34:	str	fp, [sp, #-8]!
     a38:	str	lr, [sp, #4]
     a3c:	add	fp, sp, #4
     a40:	sub	sp, sp, #8
     a44:	str	r0, [fp, #-8]
     a48:	ldr	r3, [fp, #-8]
     a4c:	cmp	r3, #0
     a50:	beq	a6c <reflection_Object_vec_len+0x38>
     a54:	ldr	r3, [fp, #-8]
     a58:	sub	r3, r3, #4
     a5c:	mov	r0, r3
     a60:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     a64:	mov	r3, r0
     a68:	b	a70 <reflection_Object_vec_len+0x3c>
     a6c:	mov	r3, #0
     a70:	mov	r0, r3
     a74:	sub	sp, fp, #4
     a78:	ldr	fp, [sp]
     a7c:	add	sp, sp, #4
     a80:	pop	{pc}		; (ldr pc, [sp], #4)

00000a84 <reflection_Object_vec_at>:
     a84:	str	fp, [sp, #-8]!
     a88:	str	lr, [sp, #4]
     a8c:	add	fp, sp, #4
     a90:	sub	sp, sp, #16
     a94:	str	r0, [fp, #-16]
     a98:	str	r1, [fp, #-20]	; 0xffffffec
     a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
     aa0:	lsl	r3, r3, #2
     aa4:	ldr	r2, [fp, #-16]
     aa8:	add	r3, r2, r3
     aac:	str	r3, [fp, #-8]
     ab0:	ldr	r0, [fp, #-16]
     ab4:	bl	2e0 <flatbuffers_vec_len>
     ab8:	mov	r2, r0
     abc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ac0:	cmp	r3, r2
     ac4:	bcc	ae8 <reflection_Object_vec_at+0x64>
     ac8:	movw	r3, #0
     acc:	movt	r3, #0
     ad0:	mov	r2, #215	; 0xd7
     ad4:	movw	r1, #0
     ad8:	movt	r1, #0
     adc:	movw	r0, #0
     ae0:	movt	r0, #0
     ae4:	bl	0 <__assert_fail>
     ae8:	ldr	r0, [fp, #-8]
     aec:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     af0:	mov	r2, r0
     af4:	ldr	r3, [fp, #-8]
     af8:	add	r3, r3, r2
     afc:	mov	r0, r3
     b00:	sub	sp, fp, #4
     b04:	ldr	fp, [sp]
     b08:	add	sp, sp, #4
     b0c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b10 <reflection_Object_fields>:
     b10:	str	fp, [sp, #-8]!
     b14:	str	lr, [sp, #4]
     b18:	add	fp, sp, #4
     b1c:	sub	sp, sp, #24
     b20:	str	r0, [fp, #-24]	; 0xffffffe8
     b24:	mov	r3, #0
     b28:	strh	r3, [fp, #-6]
     b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b30:	cmp	r3, #0
     b34:	bne	b58 <reflection_Object_fields+0x48>
     b38:	movw	r3, #0
     b3c:	movt	r3, #0
     b40:	mov	r2, #224	; 0xe0
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	movw	r0, #0
     b50:	movt	r0, #0
     b54:	bl	0 <__assert_fail>
     b58:	mov	r3, #1
     b5c:	strh	r3, [fp, #-8]
     b60:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b64:	bl	1bc <__flatbuffers_soffset_read_from_pe>
     b68:	mov	r3, r0
     b6c:	rsb	r3, r3, #0
     b70:	ldr	r2, [fp, #-24]	; 0xffffffe8
     b74:	add	r3, r2, r3
     b78:	str	r3, [fp, #-12]
     b7c:	ldr	r0, [fp, #-12]
     b80:	bl	220 <__flatbuffers_voffset_read_from_pe>
     b84:	mov	r3, r0
     b88:	mov	r2, r3
     b8c:	ldrh	r3, [fp, #-8]
     b90:	add	r3, r3, #3
     b94:	lsl	r3, r3, #1
     b98:	cmp	r2, r3
     b9c:	bcc	bc4 <reflection_Object_fields+0xb4>
     ba0:	ldrh	r3, [fp, #-8]
     ba4:	add	r3, r3, #2
     ba8:	lsl	r3, r3, #1
     bac:	ldr	r2, [fp, #-12]
     bb0:	add	r3, r2, r3
     bb4:	mov	r0, r3
     bb8:	bl	220 <__flatbuffers_voffset_read_from_pe>
     bbc:	mov	r3, r0
     bc0:	strh	r3, [fp, #-6]
     bc4:	ldrh	r3, [fp, #-6]
     bc8:	cmp	r3, #0
     bcc:	beq	bfc <reflection_Object_fields+0xec>
     bd0:	ldrh	r3, [fp, #-6]
     bd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     bd8:	add	r3, r2, r3
     bdc:	str	r3, [fp, #-16]
     be0:	ldr	r0, [fp, #-16]
     be4:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     be8:	mov	r3, r0
     bec:	add	r3, r3, #4
     bf0:	ldr	r2, [fp, #-16]
     bf4:	add	r3, r2, r3
     bf8:	b	c1c <reflection_Object_fields+0x10c>
     bfc:	movw	r3, #0
     c00:	movt	r3, #0
     c04:	mov	r2, #224	; 0xe0
     c08:	movw	r1, #0
     c0c:	movt	r1, #0
     c10:	movw	r0, #0
     c14:	movt	r0, #0
     c18:	bl	0 <__assert_fail>
     c1c:	mov	r0, r3
     c20:	sub	sp, fp, #4
     c24:	ldr	fp, [sp]
     c28:	add	sp, sp, #4
     c2c:	pop	{pc}		; (ldr pc, [sp], #4)

00000c30 <reflection_Schema_as_root>:
     c30:	str	fp, [sp, #-8]!
     c34:	str	lr, [sp, #4]
     c38:	add	fp, sp, #4
     c3c:	sub	sp, sp, #16
     c40:	str	r0, [fp, #-16]
     c44:	movw	r3, #0
     c48:	movt	r3, #0
     c4c:	str	r3, [fp, #-8]
     c50:	ldr	r3, [fp, #-16]
     c54:	cmp	r3, #0
     c58:	beq	c8c <reflection_Schema_as_root+0x5c>
     c5c:	ldr	r1, [fp, #-8]
     c60:	ldr	r0, [fp, #-16]
     c64:	bl	428 <flatbuffers_has_identifier>
     c68:	mov	r3, r0
     c6c:	cmp	r3, #0
     c70:	beq	c8c <reflection_Schema_as_root+0x5c>
     c74:	ldr	r0, [fp, #-16]
     c78:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     c7c:	mov	r2, r0
     c80:	ldr	r3, [fp, #-16]
     c84:	add	r3, r3, r2
     c88:	b	c90 <reflection_Schema_as_root+0x60>
     c8c:	mov	r3, #0
     c90:	mov	r0, r3
     c94:	sub	sp, fp, #4
     c98:	ldr	fp, [sp]
     c9c:	add	sp, sp, #4
     ca0:	pop	{pc}		; (ldr pc, [sp], #4)

00000ca4 <reflection_Schema_objects>:
     ca4:	str	fp, [sp, #-8]!
     ca8:	str	lr, [sp, #4]
     cac:	add	fp, sp, #4
     cb0:	sub	sp, sp, #24
     cb4:	str	r0, [fp, #-24]	; 0xffffffe8
     cb8:	mov	r3, #0
     cbc:	strh	r3, [fp, #-6]
     cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cc4:	cmp	r3, #0
     cc8:	bne	cec <reflection_Schema_objects+0x48>
     ccc:	movw	r3, #0
     cd0:	movt	r3, #0
     cd4:	mov	r2, #237	; 0xed
     cd8:	movw	r1, #0
     cdc:	movt	r1, #0
     ce0:	movw	r0, #0
     ce4:	movt	r0, #0
     ce8:	bl	0 <__assert_fail>
     cec:	mov	r3, #0
     cf0:	strh	r3, [fp, #-8]
     cf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cf8:	bl	1bc <__flatbuffers_soffset_read_from_pe>
     cfc:	mov	r3, r0
     d00:	rsb	r3, r3, #0
     d04:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d08:	add	r3, r2, r3
     d0c:	str	r3, [fp, #-12]
     d10:	ldr	r0, [fp, #-12]
     d14:	bl	220 <__flatbuffers_voffset_read_from_pe>
     d18:	mov	r3, r0
     d1c:	mov	r2, r3
     d20:	ldrh	r3, [fp, #-8]
     d24:	add	r3, r3, #3
     d28:	lsl	r3, r3, #1
     d2c:	cmp	r2, r3
     d30:	bcc	d58 <reflection_Schema_objects+0xb4>
     d34:	ldrh	r3, [fp, #-8]
     d38:	add	r3, r3, #2
     d3c:	lsl	r3, r3, #1
     d40:	ldr	r2, [fp, #-12]
     d44:	add	r3, r2, r3
     d48:	mov	r0, r3
     d4c:	bl	220 <__flatbuffers_voffset_read_from_pe>
     d50:	mov	r3, r0
     d54:	strh	r3, [fp, #-6]
     d58:	ldrh	r3, [fp, #-6]
     d5c:	cmp	r3, #0
     d60:	beq	d90 <reflection_Schema_objects+0xec>
     d64:	ldrh	r3, [fp, #-6]
     d68:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d6c:	add	r3, r2, r3
     d70:	str	r3, [fp, #-16]
     d74:	ldr	r0, [fp, #-16]
     d78:	bl	11c <__flatbuffers_uoffset_read_from_pe>
     d7c:	mov	r3, r0
     d80:	add	r3, r3, #4
     d84:	ldr	r2, [fp, #-16]
     d88:	add	r3, r2, r3
     d8c:	b	db0 <reflection_Schema_objects+0x10c>
     d90:	movw	r3, #0
     d94:	movt	r3, #0
     d98:	mov	r2, #237	; 0xed
     d9c:	movw	r1, #0
     da0:	movt	r1, #0
     da4:	movw	r0, #0
     da8:	movt	r0, #0
     dac:	bl	0 <__assert_fail>
     db0:	mov	r0, r3
     db4:	sub	sp, fp, #4
     db8:	ldr	fp, [sp]
     dbc:	add	sp, sp, #4
     dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00000dc4 <flatbuffers_bool_assign_to_pe>:
     dc4:	str	fp, [sp, #-8]!
     dc8:	str	lr, [sp, #4]
     dcc:	add	fp, sp, #4
     dd0:	sub	sp, sp, #8
     dd4:	str	r0, [fp, #-8]
     dd8:	mov	r3, r1
     ddc:	strb	r3, [fp, #-9]
     de0:	ldrb	r3, [fp, #-9]
     de4:	mov	r0, r3
     de8:	bl	ac <flatbuffers_bool_cast_to_pe>
     dec:	mov	r3, r0
     df0:	mov	r2, r3
     df4:	ldr	r3, [fp, #-8]
     df8:	strb	r2, [r3]
     dfc:	ldr	r3, [fp, #-8]
     e00:	mov	r0, r3
     e04:	sub	sp, fp, #4
     e08:	ldr	fp, [sp]
     e0c:	add	sp, sp, #4
     e10:	pop	{pc}		; (ldr pc, [sp], #4)

00000e14 <flatbuffers_uint16_assign_to_pe>:
     e14:	str	fp, [sp, #-8]!
     e18:	str	lr, [sp, #4]
     e1c:	add	fp, sp, #4
     e20:	sub	sp, sp, #8
     e24:	str	r0, [fp, #-8]
     e28:	mov	r3, r1
     e2c:	strh	r3, [fp, #-10]
     e30:	ldrh	r3, [fp, #-10]
     e34:	mov	r0, r3
     e38:	bl	0 <flatbuffers_uint16_cast_to_pe>
     e3c:	mov	r3, r0
     e40:	mov	r2, r3
     e44:	ldr	r3, [fp, #-8]
     e48:	strh	r2, [r3]
     e4c:	ldr	r3, [fp, #-8]
     e50:	mov	r0, r3
     e54:	sub	sp, fp, #4
     e58:	ldr	fp, [sp]
     e5c:	add	sp, sp, #4
     e60:	pop	{pc}		; (ldr pc, [sp], #4)

00000e64 <flatbuffers_int32_assign_to_pe>:
     e64:	str	fp, [sp, #-8]!
     e68:	str	lr, [sp, #4]
     e6c:	add	fp, sp, #4
     e70:	sub	sp, sp, #8
     e74:	str	r0, [fp, #-8]
     e78:	str	r1, [fp, #-12]
     e7c:	ldr	r0, [fp, #-12]
     e80:	bl	28 <flatbuffers_int32_cast_to_pe>
     e84:	mov	r2, r0
     e88:	ldr	r3, [fp, #-8]
     e8c:	str	r2, [r3]
     e90:	ldr	r3, [fp, #-8]
     e94:	mov	r0, r3
     e98:	sub	sp, fp, #4
     e9c:	ldr	fp, [sp]
     ea0:	add	sp, sp, #4
     ea4:	pop	{pc}		; (ldr pc, [sp], #4)

00000ea8 <flatbuffers_int64_assign_to_pe>:
     ea8:	str	fp, [sp, #-8]!
     eac:	str	lr, [sp, #4]
     eb0:	add	fp, sp, #4
     eb4:	sub	sp, sp, #16
     eb8:	str	r0, [fp, #-8]
     ebc:	strd	r2, [fp, #-20]	; 0xffffffec
     ec0:	ldrd	r0, [fp, #-20]	; 0xffffffec
     ec4:	bl	4c <flatbuffers_int64_cast_to_pe>
     ec8:	mov	r2, r0
     ecc:	mov	r3, r1
     ed0:	ldr	r1, [fp, #-8]
     ed4:	strd	r2, [r1]
     ed8:	ldr	r3, [fp, #-8]
     edc:	mov	r0, r3
     ee0:	sub	sp, fp, #4
     ee4:	ldr	fp, [sp]
     ee8:	add	sp, sp, #4
     eec:	pop	{pc}		; (ldr pc, [sp], #4)

00000ef0 <flatbuffers_double_assign_to_pe>:
     ef0:	str	fp, [sp, #-8]!
     ef4:	str	lr, [sp, #4]
     ef8:	add	fp, sp, #4
     efc:	sub	sp, sp, #16
     f00:	str	r0, [fp, #-8]
     f04:	vstr	d0, [fp, #-20]	; 0xffffffec
     f08:	vldr	d0, [fp, #-20]	; 0xffffffec
     f0c:	bl	74 <flatbuffers_double_cast_to_pe>
     f10:	vmov.f64	d7, d0
     f14:	ldr	r3, [fp, #-8]
     f18:	vstr	d7, [r3]
     f1c:	ldr	r3, [fp, #-8]
     f20:	mov	r0, r3
     f24:	sub	sp, fp, #4
     f28:	ldr	fp, [sp]
     f2c:	add	sp, sp, #4
     f30:	pop	{pc}		; (ldr pc, [sp], #4)

00000f34 <flatbuffers_buffer_start>:
     f34:	str	fp, [sp, #-8]!
     f38:	str	lr, [sp, #4]
     f3c:	add	fp, sp, #4
     f40:	sub	sp, sp, #8
     f44:	str	r0, [fp, #-8]
     f48:	str	r1, [fp, #-12]
     f4c:	mov	r3, #0
     f50:	mov	r2, #0
     f54:	ldr	r1, [fp, #-12]
     f58:	ldr	r0, [fp, #-8]
     f5c:	bl	0 <flatcc_builder_start_buffer>
     f60:	mov	r3, r0
     f64:	mov	r0, r3
     f68:	sub	sp, fp, #4
     f6c:	ldr	fp, [sp]
     f70:	add	sp, sp, #4
     f74:	pop	{pc}		; (ldr pc, [sp], #4)

00000f78 <flatbuffers_buffer_start_with_size>:
     f78:	str	fp, [sp, #-8]!
     f7c:	str	lr, [sp, #4]
     f80:	add	fp, sp, #4
     f84:	sub	sp, sp, #8
     f88:	str	r0, [fp, #-8]
     f8c:	str	r1, [fp, #-12]
     f90:	mov	r3, #2
     f94:	mov	r2, #0
     f98:	ldr	r1, [fp, #-12]
     f9c:	ldr	r0, [fp, #-8]
     fa0:	bl	0 <flatcc_builder_start_buffer>
     fa4:	mov	r3, r0
     fa8:	mov	r0, r3
     fac:	sub	sp, fp, #4
     fb0:	ldr	fp, [sp]
     fb4:	add	sp, sp, #4
     fb8:	pop	{pc}		; (ldr pc, [sp], #4)

00000fbc <flatbuffers_buffer_end>:
     fbc:	str	fp, [sp, #-8]!
     fc0:	str	lr, [sp, #4]
     fc4:	add	fp, sp, #4
     fc8:	sub	sp, sp, #8
     fcc:	str	r0, [fp, #-8]
     fd0:	str	r1, [fp, #-12]
     fd4:	ldr	r1, [fp, #-12]
     fd8:	ldr	r0, [fp, #-8]
     fdc:	bl	0 <flatcc_builder_end_buffer>
     fe0:	mov	r3, r0
     fe4:	mov	r0, r3
     fe8:	sub	sp, fp, #4
     fec:	ldr	fp, [sp]
     ff0:	add	sp, sp, #4
     ff4:	pop	{pc}		; (ldr pc, [sp], #4)

00000ff8 <reflection_BaseType_assign_to_pe>:
     ff8:	str	fp, [sp, #-8]!
     ffc:	str	lr, [sp, #4]
    1000:	add	fp, sp, #4
    1004:	sub	sp, sp, #8
    1008:	str	r0, [fp, #-8]
    100c:	mov	r3, r1
    1010:	strb	r3, [fp, #-9]
    1014:	ldrsb	r3, [fp, #-9]
    1018:	mov	r0, r3
    101c:	bl	4d4 <reflection_BaseType_cast_to_pe>
    1020:	mov	r3, r0
    1024:	mov	r2, r3
    1028:	ldr	r3, [fp, #-8]
    102c:	strb	r2, [r3]
    1030:	ldr	r3, [fp, #-8]
    1034:	mov	r0, r3
    1038:	sub	sp, fp, #4
    103c:	ldr	fp, [sp]
    1040:	add	sp, sp, #4
    1044:	pop	{pc}		; (ldr pc, [sp], #4)

00001048 <reflection_Type_start>:
    1048:	str	fp, [sp, #-8]!
    104c:	str	lr, [sp, #4]
    1050:	add	fp, sp, #4
    1054:	sub	sp, sp, #8
    1058:	str	r0, [fp, #-8]
    105c:	mov	r1, #3
    1060:	ldr	r0, [fp, #-8]
    1064:	bl	0 <flatcc_builder_start_table>
    1068:	mov	r3, r0
    106c:	mov	r0, r3
    1070:	sub	sp, fp, #4
    1074:	ldr	fp, [sp]
    1078:	add	sp, sp, #4
    107c:	pop	{pc}		; (ldr pc, [sp], #4)

00001080 <reflection_Type_end>:
    1080:	str	fp, [sp, #-8]!
    1084:	str	lr, [sp, #4]
    1088:	add	fp, sp, #4
    108c:	sub	sp, sp, #8
    1090:	str	r0, [fp, #-8]
    1094:	mov	r2, #0
    1098:	movw	r1, #0
    109c:	movt	r1, #0
    10a0:	ldr	r0, [fp, #-8]
    10a4:	bl	0 <flatcc_builder_check_required>
    10a8:	mov	r3, r0
    10ac:	cmp	r3, #0
    10b0:	bne	10d4 <reflection_Type_end+0x54>
    10b4:	movw	r3, #0
    10b8:	movt	r3, #0
    10bc:	mov	r2, #23
    10c0:	movw	r1, #0
    10c4:	movt	r1, #0
    10c8:	movw	r0, #0
    10cc:	movt	r0, #0
    10d0:	bl	0 <__assert_fail>
    10d4:	ldr	r0, [fp, #-8]
    10d8:	bl	0 <flatcc_builder_end_table>
    10dc:	mov	r3, r0
    10e0:	mov	r0, r3
    10e4:	sub	sp, fp, #4
    10e8:	ldr	fp, [sp]
    10ec:	add	sp, sp, #4
    10f0:	pop	{pc}		; (ldr pc, [sp], #4)

000010f4 <reflection_EnumVal_start>:
    10f4:	str	fp, [sp, #-8]!
    10f8:	str	lr, [sp, #4]
    10fc:	add	fp, sp, #4
    1100:	sub	sp, sp, #8
    1104:	str	r0, [fp, #-8]
    1108:	mov	r1, #3
    110c:	ldr	r0, [fp, #-8]
    1110:	bl	0 <flatcc_builder_start_table>
    1114:	mov	r3, r0
    1118:	mov	r0, r3
    111c:	sub	sp, fp, #4
    1120:	ldr	fp, [sp]
    1124:	add	sp, sp, #4
    1128:	pop	{pc}		; (ldr pc, [sp], #4)

0000112c <reflection_EnumVal_end>:
    112c:	str	fp, [sp, #-8]!
    1130:	str	lr, [sp, #4]
    1134:	add	fp, sp, #4
    1138:	sub	sp, sp, #8
    113c:	str	r0, [fp, #-8]
    1140:	mov	r2, #1
    1144:	movw	r1, #0
    1148:	movt	r1, #0
    114c:	ldr	r0, [fp, #-8]
    1150:	bl	0 <flatcc_builder_check_required>
    1154:	mov	r3, r0
    1158:	cmp	r3, #0
    115c:	bne	1180 <reflection_EnumVal_end+0x54>
    1160:	movw	r3, #0
    1164:	movt	r3, #0
    1168:	mov	r2, #25
    116c:	movw	r1, #0
    1170:	movt	r1, #0
    1174:	movw	r0, #0
    1178:	movt	r0, #0
    117c:	bl	0 <__assert_fail>
    1180:	ldr	r0, [fp, #-8]
    1184:	bl	0 <flatcc_builder_end_table>
    1188:	mov	r3, r0
    118c:	mov	r0, r3
    1190:	sub	sp, fp, #4
    1194:	ldr	fp, [sp]
    1198:	add	sp, sp, #4
    119c:	pop	{pc}		; (ldr pc, [sp], #4)

000011a0 <reflection_EnumVal_vec_push>:
    11a0:	str	fp, [sp, #-8]!
    11a4:	str	lr, [sp, #4]
    11a8:	add	fp, sp, #4
    11ac:	sub	sp, sp, #8
    11b0:	str	r0, [fp, #-8]
    11b4:	str	r1, [fp, #-12]
    11b8:	ldr	r3, [fp, #-12]
    11bc:	cmp	r3, #0
    11c0:	beq	11d8 <reflection_EnumVal_vec_push+0x38>
    11c4:	ldr	r1, [fp, #-12]
    11c8:	ldr	r0, [fp, #-8]
    11cc:	bl	0 <flatcc_builder_offset_vector_push>
    11d0:	mov	r3, r0
    11d4:	b	11dc <reflection_EnumVal_vec_push+0x3c>
    11d8:	mov	r3, #0
    11dc:	mov	r0, r3
    11e0:	sub	sp, fp, #4
    11e4:	ldr	fp, [sp]
    11e8:	add	sp, sp, #4
    11ec:	pop	{pc}		; (ldr pc, [sp], #4)

000011f0 <reflection_Enum_start>:
    11f0:	str	fp, [sp, #-8]!
    11f4:	str	lr, [sp, #4]
    11f8:	add	fp, sp, #4
    11fc:	sub	sp, sp, #8
    1200:	str	r0, [fp, #-8]
    1204:	mov	r1, #4
    1208:	ldr	r0, [fp, #-8]
    120c:	bl	0 <flatcc_builder_start_table>
    1210:	mov	r3, r0
    1214:	mov	r0, r3
    1218:	sub	sp, fp, #4
    121c:	ldr	fp, [sp]
    1220:	add	sp, sp, #4
    1224:	pop	{pc}		; (ldr pc, [sp], #4)

00001228 <reflection_Enum_end>:
    1228:	str	fp, [sp, #-8]!
    122c:	str	lr, [sp, #4]
    1230:	add	fp, sp, #4
    1234:	sub	sp, sp, #8
    1238:	str	r0, [fp, #-8]
    123c:	mov	r2, #3
    1240:	movw	r1, #0
    1244:	movt	r1, #0
    1248:	ldr	r0, [fp, #-8]
    124c:	bl	0 <flatcc_builder_check_required>
    1250:	mov	r3, r0
    1254:	cmp	r3, #0
    1258:	bne	127c <reflection_Enum_end+0x54>
    125c:	movw	r3, #0
    1260:	movt	r3, #0
    1264:	mov	r2, #27
    1268:	movw	r1, #0
    126c:	movt	r1, #0
    1270:	movw	r0, #0
    1274:	movt	r0, #0
    1278:	bl	0 <__assert_fail>
    127c:	ldr	r0, [fp, #-8]
    1280:	bl	0 <flatcc_builder_end_table>
    1284:	mov	r3, r0
    1288:	mov	r0, r3
    128c:	sub	sp, fp, #4
    1290:	ldr	fp, [sp]
    1294:	add	sp, sp, #4
    1298:	pop	{pc}		; (ldr pc, [sp], #4)

0000129c <reflection_Enum_vec_push>:
    129c:	str	fp, [sp, #-8]!
    12a0:	str	lr, [sp, #4]
    12a4:	add	fp, sp, #4
    12a8:	sub	sp, sp, #8
    12ac:	str	r0, [fp, #-8]
    12b0:	str	r1, [fp, #-12]
    12b4:	ldr	r3, [fp, #-12]
    12b8:	cmp	r3, #0
    12bc:	beq	12d4 <reflection_Enum_vec_push+0x38>
    12c0:	ldr	r1, [fp, #-12]
    12c4:	ldr	r0, [fp, #-8]
    12c8:	bl	0 <flatcc_builder_offset_vector_push>
    12cc:	mov	r3, r0
    12d0:	b	12d8 <reflection_Enum_vec_push+0x3c>
    12d4:	mov	r3, #0
    12d8:	mov	r0, r3
    12dc:	sub	sp, fp, #4
    12e0:	ldr	fp, [sp]
    12e4:	add	sp, sp, #4
    12e8:	pop	{pc}		; (ldr pc, [sp], #4)

000012ec <reflection_Field_start>:
    12ec:	str	fp, [sp, #-8]!
    12f0:	str	lr, [sp, #4]
    12f4:	add	fp, sp, #4
    12f8:	sub	sp, sp, #8
    12fc:	str	r0, [fp, #-8]
    1300:	mov	r1, #9
    1304:	ldr	r0, [fp, #-8]
    1308:	bl	0 <flatcc_builder_start_table>
    130c:	mov	r3, r0
    1310:	mov	r0, r3
    1314:	sub	sp, fp, #4
    1318:	ldr	fp, [sp]
    131c:	add	sp, sp, #4
    1320:	pop	{pc}		; (ldr pc, [sp], #4)

00001324 <reflection_Field_end>:
    1324:	str	fp, [sp, #-8]!
    1328:	str	lr, [sp, #4]
    132c:	add	fp, sp, #4
    1330:	sub	sp, sp, #8
    1334:	str	r0, [fp, #-8]
    1338:	mov	r2, #2
    133c:	movw	r1, #0
    1340:	movt	r1, #0
    1344:	ldr	r0, [fp, #-8]
    1348:	bl	0 <flatcc_builder_check_required>
    134c:	mov	r3, r0
    1350:	cmp	r3, #0
    1354:	bne	1378 <reflection_Field_end+0x54>
    1358:	movw	r3, #0
    135c:	movt	r3, #0
    1360:	mov	r2, #29
    1364:	movw	r1, #0
    1368:	movt	r1, #0
    136c:	movw	r0, #0
    1370:	movt	r0, #0
    1374:	bl	0 <__assert_fail>
    1378:	ldr	r0, [fp, #-8]
    137c:	bl	0 <flatcc_builder_end_table>
    1380:	mov	r3, r0
    1384:	mov	r0, r3
    1388:	sub	sp, fp, #4
    138c:	ldr	fp, [sp]
    1390:	add	sp, sp, #4
    1394:	pop	{pc}		; (ldr pc, [sp], #4)

00001398 <reflection_Field_vec_push>:
    1398:	str	fp, [sp, #-8]!
    139c:	str	lr, [sp, #4]
    13a0:	add	fp, sp, #4
    13a4:	sub	sp, sp, #8
    13a8:	str	r0, [fp, #-8]
    13ac:	str	r1, [fp, #-12]
    13b0:	ldr	r3, [fp, #-12]
    13b4:	cmp	r3, #0
    13b8:	beq	13d0 <reflection_Field_vec_push+0x38>
    13bc:	ldr	r1, [fp, #-12]
    13c0:	ldr	r0, [fp, #-8]
    13c4:	bl	0 <flatcc_builder_offset_vector_push>
    13c8:	mov	r3, r0
    13cc:	b	13d4 <reflection_Field_vec_push+0x3c>
    13d0:	mov	r3, #0
    13d4:	mov	r0, r3
    13d8:	sub	sp, fp, #4
    13dc:	ldr	fp, [sp]
    13e0:	add	sp, sp, #4
    13e4:	pop	{pc}		; (ldr pc, [sp], #4)

000013e8 <reflection_Object_start>:
    13e8:	str	fp, [sp, #-8]!
    13ec:	str	lr, [sp, #4]
    13f0:	add	fp, sp, #4
    13f4:	sub	sp, sp, #8
    13f8:	str	r0, [fp, #-8]
    13fc:	mov	r1, #5
    1400:	ldr	r0, [fp, #-8]
    1404:	bl	0 <flatcc_builder_start_table>
    1408:	mov	r3, r0
    140c:	mov	r0, r3
    1410:	sub	sp, fp, #4
    1414:	ldr	fp, [sp]
    1418:	add	sp, sp, #4
    141c:	pop	{pc}		; (ldr pc, [sp], #4)

00001420 <reflection_Object_end>:
    1420:	str	fp, [sp, #-8]!
    1424:	str	lr, [sp, #4]
    1428:	add	fp, sp, #4
    142c:	sub	sp, sp, #8
    1430:	str	r0, [fp, #-8]
    1434:	mov	r2, #2
    1438:	movw	r1, #0
    143c:	movt	r1, #0
    1440:	ldr	r0, [fp, #-8]
    1444:	bl	0 <flatcc_builder_check_required>
    1448:	mov	r3, r0
    144c:	cmp	r3, #0
    1450:	bne	1474 <reflection_Object_end+0x54>
    1454:	movw	r3, #0
    1458:	movt	r3, #0
    145c:	mov	r2, #31
    1460:	movw	r1, #0
    1464:	movt	r1, #0
    1468:	movw	r0, #0
    146c:	movt	r0, #0
    1470:	bl	0 <__assert_fail>
    1474:	ldr	r0, [fp, #-8]
    1478:	bl	0 <flatcc_builder_end_table>
    147c:	mov	r3, r0
    1480:	mov	r0, r3
    1484:	sub	sp, fp, #4
    1488:	ldr	fp, [sp]
    148c:	add	sp, sp, #4
    1490:	pop	{pc}		; (ldr pc, [sp], #4)

00001494 <reflection_Schema_start>:
    1494:	str	fp, [sp, #-8]!
    1498:	str	lr, [sp, #4]
    149c:	add	fp, sp, #4
    14a0:	sub	sp, sp, #8
    14a4:	str	r0, [fp, #-8]
    14a8:	mov	r1, #5
    14ac:	ldr	r0, [fp, #-8]
    14b0:	bl	0 <flatcc_builder_start_table>
    14b4:	mov	r3, r0
    14b8:	mov	r0, r3
    14bc:	sub	sp, fp, #4
    14c0:	ldr	fp, [sp]
    14c4:	add	sp, sp, #4
    14c8:	pop	{pc}		; (ldr pc, [sp], #4)

000014cc <reflection_Schema_end>:
    14cc:	str	fp, [sp, #-8]!
    14d0:	str	lr, [sp, #4]
    14d4:	add	fp, sp, #4
    14d8:	sub	sp, sp, #8
    14dc:	str	r0, [fp, #-8]
    14e0:	mov	r2, #2
    14e4:	movw	r1, #0
    14e8:	movt	r1, #0
    14ec:	ldr	r0, [fp, #-8]
    14f0:	bl	0 <flatcc_builder_check_required>
    14f4:	mov	r3, r0
    14f8:	cmp	r3, #0
    14fc:	bne	1520 <reflection_Schema_end+0x54>
    1500:	movw	r3, #0
    1504:	movt	r3, #0
    1508:	mov	r2, #33	; 0x21
    150c:	movw	r1, #0
    1510:	movt	r1, #0
    1514:	movw	r0, #0
    1518:	movt	r0, #0
    151c:	bl	0 <__assert_fail>
    1520:	ldr	r0, [fp, #-8]
    1524:	bl	0 <flatcc_builder_end_table>
    1528:	mov	r3, r0
    152c:	mov	r0, r3
    1530:	sub	sp, fp, #4
    1534:	ldr	fp, [sp]
    1538:	add	sp, sp, #4
    153c:	pop	{pc}		; (ldr pc, [sp], #4)

00001540 <reflection_Type_base_type_add>:
    1540:	str	fp, [sp, #-8]!
    1544:	str	lr, [sp, #4]
    1548:	add	fp, sp, #4
    154c:	sub	sp, sp, #16
    1550:	str	r0, [fp, #-16]
    1554:	mov	r3, r1
    1558:	strb	r3, [fp, #-17]	; 0xffffffef
    155c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    1560:	cmp	r3, #0
    1564:	bne	1570 <reflection_Type_base_type_add+0x30>
    1568:	mov	r3, #0
    156c:	b	15b0 <reflection_Type_base_type_add+0x70>
    1570:	mov	r3, #1
    1574:	mov	r2, #1
    1578:	mov	r1, #0
    157c:	ldr	r0, [fp, #-16]
    1580:	bl	0 <flatcc_builder_table_add>
    1584:	str	r0, [fp, #-8]
    1588:	ldr	r3, [fp, #-8]
    158c:	cmp	r3, #0
    1590:	bne	159c <reflection_Type_base_type_add+0x5c>
    1594:	mvn	r3, #0
    1598:	b	15b0 <reflection_Type_base_type_add+0x70>
    159c:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    15a0:	mov	r1, r3
    15a4:	ldr	r0, [fp, #-8]
    15a8:	bl	ff8 <reflection_BaseType_assign_to_pe>
    15ac:	mov	r3, #0
    15b0:	mov	r0, r3
    15b4:	sub	sp, fp, #4
    15b8:	ldr	fp, [sp]
    15bc:	add	sp, sp, #4
    15c0:	pop	{pc}		; (ldr pc, [sp], #4)

000015c4 <reflection_Type_element_add>:
    15c4:	str	fp, [sp, #-8]!
    15c8:	str	lr, [sp, #4]
    15cc:	add	fp, sp, #4
    15d0:	sub	sp, sp, #16
    15d4:	str	r0, [fp, #-16]
    15d8:	mov	r3, r1
    15dc:	strb	r3, [fp, #-17]	; 0xffffffef
    15e0:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    15e4:	cmp	r3, #0
    15e8:	bne	15f4 <reflection_Type_element_add+0x30>
    15ec:	mov	r3, #0
    15f0:	b	1634 <reflection_Type_element_add+0x70>
    15f4:	mov	r3, #1
    15f8:	mov	r2, #1
    15fc:	mov	r1, #1
    1600:	ldr	r0, [fp, #-16]
    1604:	bl	0 <flatcc_builder_table_add>
    1608:	str	r0, [fp, #-8]
    160c:	ldr	r3, [fp, #-8]
    1610:	cmp	r3, #0
    1614:	bne	1620 <reflection_Type_element_add+0x5c>
    1618:	mvn	r3, #0
    161c:	b	1634 <reflection_Type_element_add+0x70>
    1620:	ldrsb	r3, [fp, #-17]	; 0xffffffef
    1624:	mov	r1, r3
    1628:	ldr	r0, [fp, #-8]
    162c:	bl	ff8 <reflection_BaseType_assign_to_pe>
    1630:	mov	r3, #0
    1634:	mov	r0, r3
    1638:	sub	sp, fp, #4
    163c:	ldr	fp, [sp]
    1640:	add	sp, sp, #4
    1644:	pop	{pc}		; (ldr pc, [sp], #4)

00001648 <reflection_Type_index_add>:
    1648:	str	fp, [sp, #-8]!
    164c:	str	lr, [sp, #4]
    1650:	add	fp, sp, #4
    1654:	sub	sp, sp, #16
    1658:	str	r0, [fp, #-16]
    165c:	str	r1, [fp, #-20]	; 0xffffffec
    1660:	ldr	r3, [fp, #-20]	; 0xffffffec
    1664:	cmn	r3, #1
    1668:	bne	1674 <reflection_Type_index_add+0x2c>
    166c:	mov	r3, #0
    1670:	b	16b0 <reflection_Type_index_add+0x68>
    1674:	mov	r3, #4
    1678:	mov	r2, #4
    167c:	mov	r1, #2
    1680:	ldr	r0, [fp, #-16]
    1684:	bl	0 <flatcc_builder_table_add>
    1688:	str	r0, [fp, #-8]
    168c:	ldr	r3, [fp, #-8]
    1690:	cmp	r3, #0
    1694:	bne	16a0 <reflection_Type_index_add+0x58>
    1698:	mvn	r3, #0
    169c:	b	16b0 <reflection_Type_index_add+0x68>
    16a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    16a4:	ldr	r0, [fp, #-8]
    16a8:	bl	e64 <flatbuffers_int32_assign_to_pe>
    16ac:	mov	r3, #0
    16b0:	mov	r0, r3
    16b4:	sub	sp, fp, #4
    16b8:	ldr	fp, [sp]
    16bc:	add	sp, sp, #4
    16c0:	pop	{pc}		; (ldr pc, [sp], #4)

000016c4 <reflection_Type_create>:
    16c4:	str	fp, [sp, #-8]!
    16c8:	str	lr, [sp, #4]
    16cc:	add	fp, sp, #4
    16d0:	sub	sp, sp, #16
    16d4:	str	r0, [fp, #-8]
    16d8:	str	r3, [fp, #-16]
    16dc:	mov	r3, r1
    16e0:	strb	r3, [fp, #-9]
    16e4:	mov	r3, r2
    16e8:	strb	r3, [fp, #-10]
    16ec:	ldr	r0, [fp, #-8]
    16f0:	bl	1048 <reflection_Type_start>
    16f4:	mov	r3, r0
    16f8:	cmp	r3, #0
    16fc:	bne	1750 <reflection_Type_create+0x8c>
    1700:	ldr	r1, [fp, #-16]
    1704:	ldr	r0, [fp, #-8]
    1708:	bl	1648 <reflection_Type_index_add>
    170c:	mov	r3, r0
    1710:	cmp	r3, #0
    1714:	bne	1750 <reflection_Type_create+0x8c>
    1718:	ldrsb	r3, [fp, #-9]
    171c:	mov	r1, r3
    1720:	ldr	r0, [fp, #-8]
    1724:	bl	1540 <reflection_Type_base_type_add>
    1728:	mov	r3, r0
    172c:	cmp	r3, #0
    1730:	bne	1750 <reflection_Type_create+0x8c>
    1734:	ldrsb	r3, [fp, #-10]
    1738:	mov	r1, r3
    173c:	ldr	r0, [fp, #-8]
    1740:	bl	15c4 <reflection_Type_element_add>
    1744:	mov	r3, r0
    1748:	cmp	r3, #0
    174c:	beq	1758 <reflection_Type_create+0x94>
    1750:	mov	r3, #0
    1754:	b	1764 <reflection_Type_create+0xa0>
    1758:	ldr	r0, [fp, #-8]
    175c:	bl	1080 <reflection_Type_end>
    1760:	mov	r3, r0
    1764:	mov	r0, r3
    1768:	sub	sp, fp, #4
    176c:	ldr	fp, [sp]
    1770:	add	sp, sp, #4
    1774:	pop	{pc}		; (ldr pc, [sp], #4)

00001778 <reflection_EnumVal_name_add>:
    1778:	str	fp, [sp, #-8]!
    177c:	str	lr, [sp, #4]
    1780:	add	fp, sp, #4
    1784:	sub	sp, sp, #16
    1788:	str	r0, [fp, #-16]
    178c:	str	r1, [fp, #-20]	; 0xffffffec
    1790:	ldr	r3, [fp, #-20]	; 0xffffffec
    1794:	cmp	r3, #0
    1798:	beq	17cc <reflection_EnumVal_name_add+0x54>
    179c:	mov	r1, #0
    17a0:	ldr	r0, [fp, #-16]
    17a4:	bl	0 <flatcc_builder_table_add_offset>
    17a8:	str	r0, [fp, #-8]
    17ac:	ldr	r3, [fp, #-8]
    17b0:	cmp	r3, #0
    17b4:	beq	17cc <reflection_EnumVal_name_add+0x54>
    17b8:	ldr	r3, [fp, #-8]
    17bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    17c0:	str	r2, [r3]
    17c4:	mov	r3, #0
    17c8:	b	17d0 <reflection_EnumVal_name_add+0x58>
    17cc:	mvn	r3, #0
    17d0:	mov	r0, r3
    17d4:	sub	sp, fp, #4
    17d8:	ldr	fp, [sp]
    17dc:	add	sp, sp, #4
    17e0:	pop	{pc}		; (ldr pc, [sp], #4)

000017e4 <reflection_EnumVal_name_create>:
    17e4:	str	fp, [sp, #-8]!
    17e8:	str	lr, [sp, #4]
    17ec:	add	fp, sp, #4
    17f0:	sub	sp, sp, #16
    17f4:	str	r0, [fp, #-8]
    17f8:	str	r1, [fp, #-12]
    17fc:	str	r2, [fp, #-16]
    1800:	ldr	r2, [fp, #-16]
    1804:	ldr	r1, [fp, #-12]
    1808:	ldr	r0, [fp, #-8]
    180c:	bl	0 <flatcc_builder_create_string>
    1810:	mov	r3, r0
    1814:	mov	r1, r3
    1818:	ldr	r0, [fp, #-8]
    181c:	bl	1778 <reflection_EnumVal_name_add>
    1820:	mov	r3, r0
    1824:	mov	r0, r3
    1828:	sub	sp, fp, #4
    182c:	ldr	fp, [sp]
    1830:	add	sp, sp, #4
    1834:	pop	{pc}		; (ldr pc, [sp], #4)

00001838 <reflection_EnumVal_value_add>:
    1838:	str	fp, [sp, #-8]!
    183c:	str	lr, [sp, #4]
    1840:	add	fp, sp, #4
    1844:	sub	sp, sp, #24
    1848:	str	r0, [fp, #-16]
    184c:	strd	r2, [fp, #-28]	; 0xffffffe4
    1850:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1854:	orrs	r3, r2, r3
    1858:	bne	1864 <reflection_EnumVal_value_add+0x2c>
    185c:	mov	r3, #0
    1860:	b	18a0 <reflection_EnumVal_value_add+0x68>
    1864:	mov	r3, #8
    1868:	mov	r2, #8
    186c:	mov	r1, #1
    1870:	ldr	r0, [fp, #-16]
    1874:	bl	0 <flatcc_builder_table_add>
    1878:	str	r0, [fp, #-8]
    187c:	ldr	r3, [fp, #-8]
    1880:	cmp	r3, #0
    1884:	bne	1890 <reflection_EnumVal_value_add+0x58>
    1888:	mvn	r3, #0
    188c:	b	18a0 <reflection_EnumVal_value_add+0x68>
    1890:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1894:	ldr	r0, [fp, #-8]
    1898:	bl	ea8 <flatbuffers_int64_assign_to_pe>
    189c:	mov	r3, #0
    18a0:	mov	r0, r3
    18a4:	sub	sp, fp, #4
    18a8:	ldr	fp, [sp]
    18ac:	add	sp, sp, #4
    18b0:	pop	{pc}		; (ldr pc, [sp], #4)

000018b4 <reflection_EnumVal_object_add>:
    18b4:	str	fp, [sp, #-8]!
    18b8:	str	lr, [sp, #4]
    18bc:	add	fp, sp, #4
    18c0:	sub	sp, sp, #16
    18c4:	str	r0, [fp, #-16]
    18c8:	str	r1, [fp, #-20]	; 0xffffffec
    18cc:	ldr	r3, [fp, #-20]	; 0xffffffec
    18d0:	cmp	r3, #0
    18d4:	beq	1908 <reflection_EnumVal_object_add+0x54>
    18d8:	mov	r1, #2
    18dc:	ldr	r0, [fp, #-16]
    18e0:	bl	0 <flatcc_builder_table_add_offset>
    18e4:	str	r0, [fp, #-8]
    18e8:	ldr	r3, [fp, #-8]
    18ec:	cmp	r3, #0
    18f0:	beq	1908 <reflection_EnumVal_object_add+0x54>
    18f4:	ldr	r3, [fp, #-8]
    18f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    18fc:	str	r2, [r3]
    1900:	mov	r3, #0
    1904:	b	190c <reflection_EnumVal_object_add+0x58>
    1908:	mvn	r3, #0
    190c:	mov	r0, r3
    1910:	sub	sp, fp, #4
    1914:	ldr	fp, [sp]
    1918:	add	sp, sp, #4
    191c:	pop	{pc}		; (ldr pc, [sp], #4)

00001920 <reflection_EnumVal_vec_push_start>:
    1920:	str	fp, [sp, #-8]!
    1924:	str	lr, [sp, #4]
    1928:	add	fp, sp, #4
    192c:	sub	sp, sp, #8
    1930:	str	r0, [fp, #-8]
    1934:	ldr	r0, [fp, #-8]
    1938:	bl	10f4 <reflection_EnumVal_start>
    193c:	mov	r3, r0
    1940:	mov	r0, r3
    1944:	sub	sp, fp, #4
    1948:	ldr	fp, [sp]
    194c:	add	sp, sp, #4
    1950:	pop	{pc}		; (ldr pc, [sp], #4)

00001954 <reflection_EnumVal_vec_push_end>:
    1954:	str	fp, [sp, #-8]!
    1958:	str	lr, [sp, #4]
    195c:	add	fp, sp, #4
    1960:	sub	sp, sp, #8
    1964:	str	r0, [fp, #-8]
    1968:	ldr	r0, [fp, #-8]
    196c:	bl	112c <reflection_EnumVal_end>
    1970:	mov	r3, r0
    1974:	mov	r1, r3
    1978:	ldr	r0, [fp, #-8]
    197c:	bl	11a0 <reflection_EnumVal_vec_push>
    1980:	mov	r3, r0
    1984:	mov	r0, r3
    1988:	sub	sp, fp, #4
    198c:	ldr	fp, [sp]
    1990:	add	sp, sp, #4
    1994:	pop	{pc}		; (ldr pc, [sp], #4)

00001998 <reflection_Enum_name_add>:
    1998:	str	fp, [sp, #-8]!
    199c:	str	lr, [sp, #4]
    19a0:	add	fp, sp, #4
    19a4:	sub	sp, sp, #16
    19a8:	str	r0, [fp, #-16]
    19ac:	str	r1, [fp, #-20]	; 0xffffffec
    19b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    19b4:	cmp	r3, #0
    19b8:	beq	19ec <reflection_Enum_name_add+0x54>
    19bc:	mov	r1, #0
    19c0:	ldr	r0, [fp, #-16]
    19c4:	bl	0 <flatcc_builder_table_add_offset>
    19c8:	str	r0, [fp, #-8]
    19cc:	ldr	r3, [fp, #-8]
    19d0:	cmp	r3, #0
    19d4:	beq	19ec <reflection_Enum_name_add+0x54>
    19d8:	ldr	r3, [fp, #-8]
    19dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    19e0:	str	r2, [r3]
    19e4:	mov	r3, #0
    19e8:	b	19f0 <reflection_Enum_name_add+0x58>
    19ec:	mvn	r3, #0
    19f0:	mov	r0, r3
    19f4:	sub	sp, fp, #4
    19f8:	ldr	fp, [sp]
    19fc:	add	sp, sp, #4
    1a00:	pop	{pc}		; (ldr pc, [sp], #4)

00001a04 <reflection_Enum_name_create_str>:
    1a04:	str	fp, [sp, #-8]!
    1a08:	str	lr, [sp, #4]
    1a0c:	add	fp, sp, #4
    1a10:	sub	sp, sp, #8
    1a14:	str	r0, [fp, #-8]
    1a18:	str	r1, [fp, #-12]
    1a1c:	ldr	r1, [fp, #-12]
    1a20:	ldr	r0, [fp, #-8]
    1a24:	bl	0 <flatcc_builder_create_string_str>
    1a28:	mov	r3, r0
    1a2c:	mov	r1, r3
    1a30:	ldr	r0, [fp, #-8]
    1a34:	bl	1998 <reflection_Enum_name_add>
    1a38:	mov	r3, r0
    1a3c:	mov	r0, r3
    1a40:	sub	sp, fp, #4
    1a44:	ldr	fp, [sp]
    1a48:	add	sp, sp, #4
    1a4c:	pop	{pc}		; (ldr pc, [sp], #4)

00001a50 <reflection_Enum_values_add>:
    1a50:	str	fp, [sp, #-8]!
    1a54:	str	lr, [sp, #4]
    1a58:	add	fp, sp, #4
    1a5c:	sub	sp, sp, #16
    1a60:	str	r0, [fp, #-16]
    1a64:	str	r1, [fp, #-20]	; 0xffffffec
    1a68:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a6c:	cmp	r3, #0
    1a70:	beq	1aa4 <reflection_Enum_values_add+0x54>
    1a74:	mov	r1, #1
    1a78:	ldr	r0, [fp, #-16]
    1a7c:	bl	0 <flatcc_builder_table_add_offset>
    1a80:	str	r0, [fp, #-8]
    1a84:	ldr	r3, [fp, #-8]
    1a88:	cmp	r3, #0
    1a8c:	beq	1aa4 <reflection_Enum_values_add+0x54>
    1a90:	ldr	r3, [fp, #-8]
    1a94:	ldr	r2, [fp, #-20]	; 0xffffffec
    1a98:	str	r2, [r3]
    1a9c:	mov	r3, #0
    1aa0:	b	1aa8 <reflection_Enum_values_add+0x58>
    1aa4:	mvn	r3, #0
    1aa8:	mov	r0, r3
    1aac:	sub	sp, fp, #4
    1ab0:	ldr	fp, [sp]
    1ab4:	add	sp, sp, #4
    1ab8:	pop	{pc}		; (ldr pc, [sp], #4)

00001abc <reflection_Enum_values_start>:
    1abc:	str	fp, [sp, #-8]!
    1ac0:	str	lr, [sp, #4]
    1ac4:	add	fp, sp, #4
    1ac8:	sub	sp, sp, #8
    1acc:	str	r0, [fp, #-8]
    1ad0:	ldr	r0, [fp, #-8]
    1ad4:	bl	0 <flatcc_builder_start_offset_vector>
    1ad8:	mov	r3, r0
    1adc:	mov	r0, r3
    1ae0:	sub	sp, fp, #4
    1ae4:	ldr	fp, [sp]
    1ae8:	add	sp, sp, #4
    1aec:	pop	{pc}		; (ldr pc, [sp], #4)

00001af0 <reflection_Enum_values_end>:
    1af0:	str	fp, [sp, #-8]!
    1af4:	str	lr, [sp, #4]
    1af8:	add	fp, sp, #4
    1afc:	sub	sp, sp, #8
    1b00:	str	r0, [fp, #-8]
    1b04:	ldr	r0, [fp, #-8]
    1b08:	bl	0 <flatcc_builder_end_offset_vector>
    1b0c:	mov	r3, r0
    1b10:	mov	r1, r3
    1b14:	ldr	r0, [fp, #-8]
    1b18:	bl	1a50 <reflection_Enum_values_add>
    1b1c:	mov	r3, r0
    1b20:	mov	r0, r3
    1b24:	sub	sp, fp, #4
    1b28:	ldr	fp, [sp]
    1b2c:	add	sp, sp, #4
    1b30:	pop	{pc}		; (ldr pc, [sp], #4)

00001b34 <reflection_Enum_is_union_add>:
    1b34:	str	fp, [sp, #-8]!
    1b38:	str	lr, [sp, #4]
    1b3c:	add	fp, sp, #4
    1b40:	sub	sp, sp, #16
    1b44:	str	r0, [fp, #-16]
    1b48:	mov	r3, r1
    1b4c:	strb	r3, [fp, #-17]	; 0xffffffef
    1b50:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1b54:	cmp	r3, #0
    1b58:	bne	1b64 <reflection_Enum_is_union_add+0x30>
    1b5c:	mov	r3, #0
    1b60:	b	1ba4 <reflection_Enum_is_union_add+0x70>
    1b64:	mov	r3, #1
    1b68:	mov	r2, #1
    1b6c:	mov	r1, #2
    1b70:	ldr	r0, [fp, #-16]
    1b74:	bl	0 <flatcc_builder_table_add>
    1b78:	str	r0, [fp, #-8]
    1b7c:	ldr	r3, [fp, #-8]
    1b80:	cmp	r3, #0
    1b84:	bne	1b90 <reflection_Enum_is_union_add+0x5c>
    1b88:	mvn	r3, #0
    1b8c:	b	1ba4 <reflection_Enum_is_union_add+0x70>
    1b90:	ldrb	r3, [fp, #-17]	; 0xffffffef
    1b94:	mov	r1, r3
    1b98:	ldr	r0, [fp, #-8]
    1b9c:	bl	dc4 <flatbuffers_bool_assign_to_pe>
    1ba0:	mov	r3, #0
    1ba4:	mov	r0, r3
    1ba8:	sub	sp, fp, #4
    1bac:	ldr	fp, [sp]
    1bb0:	add	sp, sp, #4
    1bb4:	pop	{pc}		; (ldr pc, [sp], #4)

00001bb8 <reflection_Enum_underlying_type_add>:
    1bb8:	str	fp, [sp, #-8]!
    1bbc:	str	lr, [sp, #4]
    1bc0:	add	fp, sp, #4
    1bc4:	sub	sp, sp, #16
    1bc8:	str	r0, [fp, #-16]
    1bcc:	str	r1, [fp, #-20]	; 0xffffffec
    1bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1bd4:	cmp	r3, #0
    1bd8:	beq	1c0c <reflection_Enum_underlying_type_add+0x54>
    1bdc:	mov	r1, #3
    1be0:	ldr	r0, [fp, #-16]
    1be4:	bl	0 <flatcc_builder_table_add_offset>
    1be8:	str	r0, [fp, #-8]
    1bec:	ldr	r3, [fp, #-8]
    1bf0:	cmp	r3, #0
    1bf4:	beq	1c0c <reflection_Enum_underlying_type_add+0x54>
    1bf8:	ldr	r3, [fp, #-8]
    1bfc:	ldr	r2, [fp, #-20]	; 0xffffffec
    1c00:	str	r2, [r3]
    1c04:	mov	r3, #0
    1c08:	b	1c10 <reflection_Enum_underlying_type_add+0x58>
    1c0c:	mvn	r3, #0
    1c10:	mov	r0, r3
    1c14:	sub	sp, fp, #4
    1c18:	ldr	fp, [sp]
    1c1c:	add	sp, sp, #4
    1c20:	pop	{pc}		; (ldr pc, [sp], #4)

00001c24 <reflection_Enum_vec_push_start>:
    1c24:	str	fp, [sp, #-8]!
    1c28:	str	lr, [sp, #4]
    1c2c:	add	fp, sp, #4
    1c30:	sub	sp, sp, #8
    1c34:	str	r0, [fp, #-8]
    1c38:	ldr	r0, [fp, #-8]
    1c3c:	bl	11f0 <reflection_Enum_start>
    1c40:	mov	r3, r0
    1c44:	mov	r0, r3
    1c48:	sub	sp, fp, #4
    1c4c:	ldr	fp, [sp]
    1c50:	add	sp, sp, #4
    1c54:	pop	{pc}		; (ldr pc, [sp], #4)

00001c58 <reflection_Enum_vec_push_end>:
    1c58:	str	fp, [sp, #-8]!
    1c5c:	str	lr, [sp, #4]
    1c60:	add	fp, sp, #4
    1c64:	sub	sp, sp, #8
    1c68:	str	r0, [fp, #-8]
    1c6c:	ldr	r0, [fp, #-8]
    1c70:	bl	1228 <reflection_Enum_end>
    1c74:	mov	r3, r0
    1c78:	mov	r1, r3
    1c7c:	ldr	r0, [fp, #-8]
    1c80:	bl	129c <reflection_Enum_vec_push>
    1c84:	mov	r3, r0
    1c88:	mov	r0, r3
    1c8c:	sub	sp, fp, #4
    1c90:	ldr	fp, [sp]
    1c94:	add	sp, sp, #4
    1c98:	pop	{pc}		; (ldr pc, [sp], #4)

00001c9c <reflection_Field_name_add>:
    1c9c:	str	fp, [sp, #-8]!
    1ca0:	str	lr, [sp, #4]
    1ca4:	add	fp, sp, #4
    1ca8:	sub	sp, sp, #16
    1cac:	str	r0, [fp, #-16]
    1cb0:	str	r1, [fp, #-20]	; 0xffffffec
    1cb4:	ldr	r3, [fp, #-20]	; 0xffffffec
    1cb8:	cmp	r3, #0
    1cbc:	beq	1cf0 <reflection_Field_name_add+0x54>
    1cc0:	mov	r1, #0
    1cc4:	ldr	r0, [fp, #-16]
    1cc8:	bl	0 <flatcc_builder_table_add_offset>
    1ccc:	str	r0, [fp, #-8]
    1cd0:	ldr	r3, [fp, #-8]
    1cd4:	cmp	r3, #0
    1cd8:	beq	1cf0 <reflection_Field_name_add+0x54>
    1cdc:	ldr	r3, [fp, #-8]
    1ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
    1ce4:	str	r2, [r3]
    1ce8:	mov	r3, #0
    1cec:	b	1cf4 <reflection_Field_name_add+0x58>
    1cf0:	mvn	r3, #0
    1cf4:	mov	r0, r3
    1cf8:	sub	sp, fp, #4
    1cfc:	ldr	fp, [sp]
    1d00:	add	sp, sp, #4
    1d04:	pop	{pc}		; (ldr pc, [sp], #4)

00001d08 <reflection_Field_name_start>:
    1d08:	str	fp, [sp, #-8]!
    1d0c:	str	lr, [sp, #4]
    1d10:	add	fp, sp, #4
    1d14:	sub	sp, sp, #8
    1d18:	str	r0, [fp, #-8]
    1d1c:	ldr	r0, [fp, #-8]
    1d20:	bl	0 <flatcc_builder_start_string>
    1d24:	mov	r3, r0
    1d28:	mov	r0, r3
    1d2c:	sub	sp, fp, #4
    1d30:	ldr	fp, [sp]
    1d34:	add	sp, sp, #4
    1d38:	pop	{pc}		; (ldr pc, [sp], #4)

00001d3c <reflection_Field_name_end>:
    1d3c:	str	fp, [sp, #-8]!
    1d40:	str	lr, [sp, #4]
    1d44:	add	fp, sp, #4
    1d48:	sub	sp, sp, #8
    1d4c:	str	r0, [fp, #-8]
    1d50:	ldr	r0, [fp, #-8]
    1d54:	bl	0 <flatcc_builder_end_string>
    1d58:	mov	r3, r0
    1d5c:	mov	r1, r3
    1d60:	ldr	r0, [fp, #-8]
    1d64:	bl	1c9c <reflection_Field_name_add>
    1d68:	mov	r3, r0
    1d6c:	mov	r0, r3
    1d70:	sub	sp, fp, #4
    1d74:	ldr	fp, [sp]
    1d78:	add	sp, sp, #4
    1d7c:	pop	{pc}		; (ldr pc, [sp], #4)

00001d80 <reflection_Field_name_create>:
    1d80:	str	fp, [sp, #-8]!
    1d84:	str	lr, [sp, #4]
    1d88:	add	fp, sp, #4
    1d8c:	sub	sp, sp, #16
    1d90:	str	r0, [fp, #-8]
    1d94:	str	r1, [fp, #-12]
    1d98:	str	r2, [fp, #-16]
    1d9c:	ldr	r2, [fp, #-16]
    1da0:	ldr	r1, [fp, #-12]
    1da4:	ldr	r0, [fp, #-8]
    1da8:	bl	0 <flatcc_builder_create_string>
    1dac:	mov	r3, r0
    1db0:	mov	r1, r3
    1db4:	ldr	r0, [fp, #-8]
    1db8:	bl	1c9c <reflection_Field_name_add>
    1dbc:	mov	r3, r0
    1dc0:	mov	r0, r3
    1dc4:	sub	sp, fp, #4
    1dc8:	ldr	fp, [sp]
    1dcc:	add	sp, sp, #4
    1dd0:	pop	{pc}		; (ldr pc, [sp], #4)

00001dd4 <reflection_Field_name_append>:
    1dd4:	str	fp, [sp, #-8]!
    1dd8:	str	lr, [sp, #4]
    1ddc:	add	fp, sp, #4
    1de0:	sub	sp, sp, #16
    1de4:	str	r0, [fp, #-8]
    1de8:	str	r1, [fp, #-12]
    1dec:	str	r2, [fp, #-16]
    1df0:	ldr	r2, [fp, #-16]
    1df4:	ldr	r1, [fp, #-12]
    1df8:	ldr	r0, [fp, #-8]
    1dfc:	bl	0 <flatcc_builder_append_string>
    1e00:	mov	r3, r0
    1e04:	mov	r0, r3
    1e08:	sub	sp, fp, #4
    1e0c:	ldr	fp, [sp]
    1e10:	add	sp, sp, #4
    1e14:	pop	{pc}		; (ldr pc, [sp], #4)

00001e18 <reflection_Field_type_add>:
    1e18:	str	fp, [sp, #-8]!
    1e1c:	str	lr, [sp, #4]
    1e20:	add	fp, sp, #4
    1e24:	sub	sp, sp, #16
    1e28:	str	r0, [fp, #-16]
    1e2c:	str	r1, [fp, #-20]	; 0xffffffec
    1e30:	ldr	r3, [fp, #-20]	; 0xffffffec
    1e34:	cmp	r3, #0
    1e38:	beq	1e6c <reflection_Field_type_add+0x54>
    1e3c:	mov	r1, #1
    1e40:	ldr	r0, [fp, #-16]
    1e44:	bl	0 <flatcc_builder_table_add_offset>
    1e48:	str	r0, [fp, #-8]
    1e4c:	ldr	r3, [fp, #-8]
    1e50:	cmp	r3, #0
    1e54:	beq	1e6c <reflection_Field_type_add+0x54>
    1e58:	ldr	r3, [fp, #-8]
    1e5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1e60:	str	r2, [r3]
    1e64:	mov	r3, #0
    1e68:	b	1e70 <reflection_Field_type_add+0x58>
    1e6c:	mvn	r3, #0
    1e70:	mov	r0, r3
    1e74:	sub	sp, fp, #4
    1e78:	ldr	fp, [sp]
    1e7c:	add	sp, sp, #4
    1e80:	pop	{pc}		; (ldr pc, [sp], #4)

00001e84 <reflection_Field_type_create>:
    1e84:	str	fp, [sp, #-8]!
    1e88:	str	lr, [sp, #4]
    1e8c:	add	fp, sp, #4
    1e90:	sub	sp, sp, #16
    1e94:	str	r0, [fp, #-8]
    1e98:	str	r3, [fp, #-16]
    1e9c:	mov	r3, r1
    1ea0:	strb	r3, [fp, #-9]
    1ea4:	mov	r3, r2
    1ea8:	strb	r3, [fp, #-10]
    1eac:	ldrsb	r2, [fp, #-10]
    1eb0:	ldrsb	r1, [fp, #-9]
    1eb4:	ldr	r3, [fp, #-16]
    1eb8:	ldr	r0, [fp, #-8]
    1ebc:	bl	16c4 <reflection_Type_create>
    1ec0:	mov	r3, r0
    1ec4:	mov	r1, r3
    1ec8:	ldr	r0, [fp, #-8]
    1ecc:	bl	1e18 <reflection_Field_type_add>
    1ed0:	mov	r3, r0
    1ed4:	mov	r0, r3
    1ed8:	sub	sp, fp, #4
    1edc:	ldr	fp, [sp]
    1ee0:	add	sp, sp, #4
    1ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00001ee8 <reflection_Field_id_add>:
    1ee8:	str	fp, [sp, #-8]!
    1eec:	str	lr, [sp, #4]
    1ef0:	add	fp, sp, #4
    1ef4:	sub	sp, sp, #16
    1ef8:	str	r0, [fp, #-16]
    1efc:	mov	r3, r1
    1f00:	strh	r3, [fp, #-18]	; 0xffffffee
    1f04:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1f08:	cmp	r3, #0
    1f0c:	bne	1f18 <reflection_Field_id_add+0x30>
    1f10:	mov	r3, #0
    1f14:	b	1f58 <reflection_Field_id_add+0x70>
    1f18:	mov	r3, #2
    1f1c:	mov	r2, #2
    1f20:	mov	r1, #2
    1f24:	ldr	r0, [fp, #-16]
    1f28:	bl	0 <flatcc_builder_table_add>
    1f2c:	str	r0, [fp, #-8]
    1f30:	ldr	r3, [fp, #-8]
    1f34:	cmp	r3, #0
    1f38:	bne	1f44 <reflection_Field_id_add+0x5c>
    1f3c:	mvn	r3, #0
    1f40:	b	1f58 <reflection_Field_id_add+0x70>
    1f44:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1f48:	mov	r1, r3
    1f4c:	ldr	r0, [fp, #-8]
    1f50:	bl	e14 <flatbuffers_uint16_assign_to_pe>
    1f54:	mov	r3, #0
    1f58:	mov	r0, r3
    1f5c:	sub	sp, fp, #4
    1f60:	ldr	fp, [sp]
    1f64:	add	sp, sp, #4
    1f68:	pop	{pc}		; (ldr pc, [sp], #4)

00001f6c <reflection_Field_offset_add>:
    1f6c:	str	fp, [sp, #-8]!
    1f70:	str	lr, [sp, #4]
    1f74:	add	fp, sp, #4
    1f78:	sub	sp, sp, #16
    1f7c:	str	r0, [fp, #-16]
    1f80:	mov	r3, r1
    1f84:	strh	r3, [fp, #-18]	; 0xffffffee
    1f88:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1f8c:	cmp	r3, #0
    1f90:	bne	1f9c <reflection_Field_offset_add+0x30>
    1f94:	mov	r3, #0
    1f98:	b	1fdc <reflection_Field_offset_add+0x70>
    1f9c:	mov	r3, #2
    1fa0:	mov	r2, #2
    1fa4:	mov	r1, #3
    1fa8:	ldr	r0, [fp, #-16]
    1fac:	bl	0 <flatcc_builder_table_add>
    1fb0:	str	r0, [fp, #-8]
    1fb4:	ldr	r3, [fp, #-8]
    1fb8:	cmp	r3, #0
    1fbc:	bne	1fc8 <reflection_Field_offset_add+0x5c>
    1fc0:	mvn	r3, #0
    1fc4:	b	1fdc <reflection_Field_offset_add+0x70>
    1fc8:	ldrh	r3, [fp, #-18]	; 0xffffffee
    1fcc:	mov	r1, r3
    1fd0:	ldr	r0, [fp, #-8]
    1fd4:	bl	e14 <flatbuffers_uint16_assign_to_pe>
    1fd8:	mov	r3, #0
    1fdc:	mov	r0, r3
    1fe0:	sub	sp, fp, #4
    1fe4:	ldr	fp, [sp]
    1fe8:	add	sp, sp, #4
    1fec:	pop	{pc}		; (ldr pc, [sp], #4)

00001ff0 <reflection_Field_default_integer_add>:
    1ff0:	str	fp, [sp, #-8]!
    1ff4:	str	lr, [sp, #4]
    1ff8:	add	fp, sp, #4
    1ffc:	sub	sp, sp, #24
    2000:	str	r0, [fp, #-16]
    2004:	strd	r2, [fp, #-28]	; 0xffffffe4
    2008:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    200c:	orrs	r3, r2, r3
    2010:	bne	201c <reflection_Field_default_integer_add+0x2c>
    2014:	mov	r3, #0
    2018:	b	2058 <reflection_Field_default_integer_add+0x68>
    201c:	mov	r3, #8
    2020:	mov	r2, #8
    2024:	mov	r1, #4
    2028:	ldr	r0, [fp, #-16]
    202c:	bl	0 <flatcc_builder_table_add>
    2030:	str	r0, [fp, #-8]
    2034:	ldr	r3, [fp, #-8]
    2038:	cmp	r3, #0
    203c:	bne	2048 <reflection_Field_default_integer_add+0x58>
    2040:	mvn	r3, #0
    2044:	b	2058 <reflection_Field_default_integer_add+0x68>
    2048:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    204c:	ldr	r0, [fp, #-8]
    2050:	bl	ea8 <flatbuffers_int64_assign_to_pe>
    2054:	mov	r3, #0
    2058:	mov	r0, r3
    205c:	sub	sp, fp, #4
    2060:	ldr	fp, [sp]
    2064:	add	sp, sp, #4
    2068:	pop	{pc}		; (ldr pc, [sp], #4)

0000206c <reflection_Field_default_real_add>:
    206c:	str	fp, [sp, #-8]!
    2070:	str	lr, [sp, #4]
    2074:	add	fp, sp, #4
    2078:	sub	sp, sp, #24
    207c:	str	r0, [fp, #-16]
    2080:	vstr	d0, [fp, #-28]	; 0xffffffe4
    2084:	vldr	d7, [fp, #-28]	; 0xffffffe4
    2088:	vcmp.f64	d7, #0.0
    208c:	vmrs	APSR_nzcv, fpscr
    2090:	bne	209c <reflection_Field_default_real_add+0x30>
    2094:	mov	r3, #0
    2098:	b	20d8 <reflection_Field_default_real_add+0x6c>
    209c:	mov	r3, #8
    20a0:	mov	r2, #8
    20a4:	mov	r1, #5
    20a8:	ldr	r0, [fp, #-16]
    20ac:	bl	0 <flatcc_builder_table_add>
    20b0:	str	r0, [fp, #-8]
    20b4:	ldr	r3, [fp, #-8]
    20b8:	cmp	r3, #0
    20bc:	bne	20c8 <reflection_Field_default_real_add+0x5c>
    20c0:	mvn	r3, #0
    20c4:	b	20d8 <reflection_Field_default_real_add+0x6c>
    20c8:	vldr	d0, [fp, #-28]	; 0xffffffe4
    20cc:	ldr	r0, [fp, #-8]
    20d0:	bl	ef0 <flatbuffers_double_assign_to_pe>
    20d4:	mov	r3, #0
    20d8:	mov	r0, r3
    20dc:	sub	sp, fp, #4
    20e0:	ldr	fp, [sp]
    20e4:	add	sp, sp, #4
    20e8:	pop	{pc}		; (ldr pc, [sp], #4)

000020ec <reflection_Field_deprecated_add>:
    20ec:	str	fp, [sp, #-8]!
    20f0:	str	lr, [sp, #4]
    20f4:	add	fp, sp, #4
    20f8:	sub	sp, sp, #16
    20fc:	str	r0, [fp, #-16]
    2100:	mov	r3, r1
    2104:	strb	r3, [fp, #-17]	; 0xffffffef
    2108:	ldrb	r3, [fp, #-17]	; 0xffffffef
    210c:	cmp	r3, #0
    2110:	bne	211c <reflection_Field_deprecated_add+0x30>
    2114:	mov	r3, #0
    2118:	b	215c <reflection_Field_deprecated_add+0x70>
    211c:	mov	r3, #1
    2120:	mov	r2, #1
    2124:	mov	r1, #6
    2128:	ldr	r0, [fp, #-16]
    212c:	bl	0 <flatcc_builder_table_add>
    2130:	str	r0, [fp, #-8]
    2134:	ldr	r3, [fp, #-8]
    2138:	cmp	r3, #0
    213c:	bne	2148 <reflection_Field_deprecated_add+0x5c>
    2140:	mvn	r3, #0
    2144:	b	215c <reflection_Field_deprecated_add+0x70>
    2148:	ldrb	r3, [fp, #-17]	; 0xffffffef
    214c:	mov	r1, r3
    2150:	ldr	r0, [fp, #-8]
    2154:	bl	dc4 <flatbuffers_bool_assign_to_pe>
    2158:	mov	r3, #0
    215c:	mov	r0, r3
    2160:	sub	sp, fp, #4
    2164:	ldr	fp, [sp]
    2168:	add	sp, sp, #4
    216c:	pop	{pc}		; (ldr pc, [sp], #4)

00002170 <reflection_Field_required_add>:
    2170:	str	fp, [sp, #-8]!
    2174:	str	lr, [sp, #4]
    2178:	add	fp, sp, #4
    217c:	sub	sp, sp, #16
    2180:	str	r0, [fp, #-16]
    2184:	mov	r3, r1
    2188:	strb	r3, [fp, #-17]	; 0xffffffef
    218c:	ldrb	r3, [fp, #-17]	; 0xffffffef
    2190:	cmp	r3, #0
    2194:	bne	21a0 <reflection_Field_required_add+0x30>
    2198:	mov	r3, #0
    219c:	b	21e0 <reflection_Field_required_add+0x70>
    21a0:	mov	r3, #1
    21a4:	mov	r2, #1
    21a8:	mov	r1, #7
    21ac:	ldr	r0, [fp, #-16]
    21b0:	bl	0 <flatcc_builder_table_add>
    21b4:	str	r0, [fp, #-8]
    21b8:	ldr	r3, [fp, #-8]
    21bc:	cmp	r3, #0
    21c0:	bne	21cc <reflection_Field_required_add+0x5c>
    21c4:	mvn	r3, #0
    21c8:	b	21e0 <reflection_Field_required_add+0x70>
    21cc:	ldrb	r3, [fp, #-17]	; 0xffffffef
    21d0:	mov	r1, r3
    21d4:	ldr	r0, [fp, #-8]
    21d8:	bl	dc4 <flatbuffers_bool_assign_to_pe>
    21dc:	mov	r3, #0
    21e0:	mov	r0, r3
    21e4:	sub	sp, fp, #4
    21e8:	ldr	fp, [sp]
    21ec:	add	sp, sp, #4
    21f0:	pop	{pc}		; (ldr pc, [sp], #4)

000021f4 <reflection_Field_key_add>:
    21f4:	str	fp, [sp, #-8]!
    21f8:	str	lr, [sp, #4]
    21fc:	add	fp, sp, #4
    2200:	sub	sp, sp, #16
    2204:	str	r0, [fp, #-16]
    2208:	mov	r3, r1
    220c:	strb	r3, [fp, #-17]	; 0xffffffef
    2210:	ldrb	r3, [fp, #-17]	; 0xffffffef
    2214:	cmp	r3, #0
    2218:	bne	2224 <reflection_Field_key_add+0x30>
    221c:	mov	r3, #0
    2220:	b	2264 <reflection_Field_key_add+0x70>
    2224:	mov	r3, #1
    2228:	mov	r2, #1
    222c:	mov	r1, #8
    2230:	ldr	r0, [fp, #-16]
    2234:	bl	0 <flatcc_builder_table_add>
    2238:	str	r0, [fp, #-8]
    223c:	ldr	r3, [fp, #-8]
    2240:	cmp	r3, #0
    2244:	bne	2250 <reflection_Field_key_add+0x5c>
    2248:	mvn	r3, #0
    224c:	b	2264 <reflection_Field_key_add+0x70>
    2250:	ldrb	r3, [fp, #-17]	; 0xffffffef
    2254:	mov	r1, r3
    2258:	ldr	r0, [fp, #-8]
    225c:	bl	dc4 <flatbuffers_bool_assign_to_pe>
    2260:	mov	r3, #0
    2264:	mov	r0, r3
    2268:	sub	sp, fp, #4
    226c:	ldr	fp, [sp]
    2270:	add	sp, sp, #4
    2274:	pop	{pc}		; (ldr pc, [sp], #4)

00002278 <reflection_Field_vec_push_start>:
    2278:	str	fp, [sp, #-8]!
    227c:	str	lr, [sp, #4]
    2280:	add	fp, sp, #4
    2284:	sub	sp, sp, #8
    2288:	str	r0, [fp, #-8]
    228c:	ldr	r0, [fp, #-8]
    2290:	bl	12ec <reflection_Field_start>
    2294:	mov	r3, r0
    2298:	mov	r0, r3
    229c:	sub	sp, fp, #4
    22a0:	ldr	fp, [sp]
    22a4:	add	sp, sp, #4
    22a8:	pop	{pc}		; (ldr pc, [sp], #4)

000022ac <reflection_Field_vec_push_end>:
    22ac:	str	fp, [sp, #-8]!
    22b0:	str	lr, [sp, #4]
    22b4:	add	fp, sp, #4
    22b8:	sub	sp, sp, #8
    22bc:	str	r0, [fp, #-8]
    22c0:	ldr	r0, [fp, #-8]
    22c4:	bl	1324 <reflection_Field_end>
    22c8:	mov	r3, r0
    22cc:	mov	r1, r3
    22d0:	ldr	r0, [fp, #-8]
    22d4:	bl	1398 <reflection_Field_vec_push>
    22d8:	mov	r3, r0
    22dc:	mov	r0, r3
    22e0:	sub	sp, fp, #4
    22e4:	ldr	fp, [sp]
    22e8:	add	sp, sp, #4
    22ec:	pop	{pc}		; (ldr pc, [sp], #4)

000022f0 <reflection_Object_name_add>:
    22f0:	str	fp, [sp, #-8]!
    22f4:	str	lr, [sp, #4]
    22f8:	add	fp, sp, #4
    22fc:	sub	sp, sp, #16
    2300:	str	r0, [fp, #-16]
    2304:	str	r1, [fp, #-20]	; 0xffffffec
    2308:	ldr	r3, [fp, #-20]	; 0xffffffec
    230c:	cmp	r3, #0
    2310:	beq	2344 <reflection_Object_name_add+0x54>
    2314:	mov	r1, #0
    2318:	ldr	r0, [fp, #-16]
    231c:	bl	0 <flatcc_builder_table_add_offset>
    2320:	str	r0, [fp, #-8]
    2324:	ldr	r3, [fp, #-8]
    2328:	cmp	r3, #0
    232c:	beq	2344 <reflection_Object_name_add+0x54>
    2330:	ldr	r3, [fp, #-8]
    2334:	ldr	r2, [fp, #-20]	; 0xffffffec
    2338:	str	r2, [r3]
    233c:	mov	r3, #0
    2340:	b	2348 <reflection_Object_name_add+0x58>
    2344:	mvn	r3, #0
    2348:	mov	r0, r3
    234c:	sub	sp, fp, #4
    2350:	ldr	fp, [sp]
    2354:	add	sp, sp, #4
    2358:	pop	{pc}		; (ldr pc, [sp], #4)

0000235c <reflection_Object_name_create_str>:
    235c:	str	fp, [sp, #-8]!
    2360:	str	lr, [sp, #4]
    2364:	add	fp, sp, #4
    2368:	sub	sp, sp, #8
    236c:	str	r0, [fp, #-8]
    2370:	str	r1, [fp, #-12]
    2374:	ldr	r1, [fp, #-12]
    2378:	ldr	r0, [fp, #-8]
    237c:	bl	0 <flatcc_builder_create_string_str>
    2380:	mov	r3, r0
    2384:	mov	r1, r3
    2388:	ldr	r0, [fp, #-8]
    238c:	bl	22f0 <reflection_Object_name_add>
    2390:	mov	r3, r0
    2394:	mov	r0, r3
    2398:	sub	sp, fp, #4
    239c:	ldr	fp, [sp]
    23a0:	add	sp, sp, #4
    23a4:	pop	{pc}		; (ldr pc, [sp], #4)

000023a8 <reflection_Object_fields_add>:
    23a8:	str	fp, [sp, #-8]!
    23ac:	str	lr, [sp, #4]
    23b0:	add	fp, sp, #4
    23b4:	sub	sp, sp, #16
    23b8:	str	r0, [fp, #-16]
    23bc:	str	r1, [fp, #-20]	; 0xffffffec
    23c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    23c4:	cmp	r3, #0
    23c8:	beq	23fc <reflection_Object_fields_add+0x54>
    23cc:	mov	r1, #1
    23d0:	ldr	r0, [fp, #-16]
    23d4:	bl	0 <flatcc_builder_table_add_offset>
    23d8:	str	r0, [fp, #-8]
    23dc:	ldr	r3, [fp, #-8]
    23e0:	cmp	r3, #0
    23e4:	beq	23fc <reflection_Object_fields_add+0x54>
    23e8:	ldr	r3, [fp, #-8]
    23ec:	ldr	r2, [fp, #-20]	; 0xffffffec
    23f0:	str	r2, [r3]
    23f4:	mov	r3, #0
    23f8:	b	2400 <reflection_Object_fields_add+0x58>
    23fc:	mvn	r3, #0
    2400:	mov	r0, r3
    2404:	sub	sp, fp, #4
    2408:	ldr	fp, [sp]
    240c:	add	sp, sp, #4
    2410:	pop	{pc}		; (ldr pc, [sp], #4)

00002414 <reflection_Object_fields_start>:
    2414:	str	fp, [sp, #-8]!
    2418:	str	lr, [sp, #4]
    241c:	add	fp, sp, #4
    2420:	sub	sp, sp, #8
    2424:	str	r0, [fp, #-8]
    2428:	ldr	r0, [fp, #-8]
    242c:	bl	0 <flatcc_builder_start_offset_vector>
    2430:	mov	r3, r0
    2434:	mov	r0, r3
    2438:	sub	sp, fp, #4
    243c:	ldr	fp, [sp]
    2440:	add	sp, sp, #4
    2444:	pop	{pc}		; (ldr pc, [sp], #4)

00002448 <reflection_Object_fields_end>:
    2448:	str	fp, [sp, #-8]!
    244c:	str	lr, [sp, #4]
    2450:	add	fp, sp, #4
    2454:	sub	sp, sp, #8
    2458:	str	r0, [fp, #-8]
    245c:	ldr	r0, [fp, #-8]
    2460:	bl	0 <flatcc_builder_end_offset_vector>
    2464:	mov	r3, r0
    2468:	mov	r1, r3
    246c:	ldr	r0, [fp, #-8]
    2470:	bl	23a8 <reflection_Object_fields_add>
    2474:	mov	r3, r0
    2478:	mov	r0, r3
    247c:	sub	sp, fp, #4
    2480:	ldr	fp, [sp]
    2484:	add	sp, sp, #4
    2488:	pop	{pc}		; (ldr pc, [sp], #4)

0000248c <reflection_Object_is_struct_add>:
    248c:	str	fp, [sp, #-8]!
    2490:	str	lr, [sp, #4]
    2494:	add	fp, sp, #4
    2498:	sub	sp, sp, #16
    249c:	str	r0, [fp, #-16]
    24a0:	mov	r3, r1
    24a4:	strb	r3, [fp, #-17]	; 0xffffffef
    24a8:	ldrb	r3, [fp, #-17]	; 0xffffffef
    24ac:	cmp	r3, #0
    24b0:	bne	24bc <reflection_Object_is_struct_add+0x30>
    24b4:	mov	r3, #0
    24b8:	b	24fc <reflection_Object_is_struct_add+0x70>
    24bc:	mov	r3, #1
    24c0:	mov	r2, #1
    24c4:	mov	r1, #2
    24c8:	ldr	r0, [fp, #-16]
    24cc:	bl	0 <flatcc_builder_table_add>
    24d0:	str	r0, [fp, #-8]
    24d4:	ldr	r3, [fp, #-8]
    24d8:	cmp	r3, #0
    24dc:	bne	24e8 <reflection_Object_is_struct_add+0x5c>
    24e0:	mvn	r3, #0
    24e4:	b	24fc <reflection_Object_is_struct_add+0x70>
    24e8:	ldrb	r3, [fp, #-17]	; 0xffffffef
    24ec:	mov	r1, r3
    24f0:	ldr	r0, [fp, #-8]
    24f4:	bl	dc4 <flatbuffers_bool_assign_to_pe>
    24f8:	mov	r3, #0
    24fc:	mov	r0, r3
    2500:	sub	sp, fp, #4
    2504:	ldr	fp, [sp]
    2508:	add	sp, sp, #4
    250c:	pop	{pc}		; (ldr pc, [sp], #4)

00002510 <reflection_Object_minalign_add>:
    2510:	str	fp, [sp, #-8]!
    2514:	str	lr, [sp, #4]
    2518:	add	fp, sp, #4
    251c:	sub	sp, sp, #16
    2520:	str	r0, [fp, #-16]
    2524:	str	r1, [fp, #-20]	; 0xffffffec
    2528:	ldr	r3, [fp, #-20]	; 0xffffffec
    252c:	cmp	r3, #0
    2530:	bne	253c <reflection_Object_minalign_add+0x2c>
    2534:	mov	r3, #0
    2538:	b	2578 <reflection_Object_minalign_add+0x68>
    253c:	mov	r3, #4
    2540:	mov	r2, #4
    2544:	mov	r1, #3
    2548:	ldr	r0, [fp, #-16]
    254c:	bl	0 <flatcc_builder_table_add>
    2550:	str	r0, [fp, #-8]
    2554:	ldr	r3, [fp, #-8]
    2558:	cmp	r3, #0
    255c:	bne	2568 <reflection_Object_minalign_add+0x58>
    2560:	mvn	r3, #0
    2564:	b	2578 <reflection_Object_minalign_add+0x68>
    2568:	ldr	r1, [fp, #-20]	; 0xffffffec
    256c:	ldr	r0, [fp, #-8]
    2570:	bl	e64 <flatbuffers_int32_assign_to_pe>
    2574:	mov	r3, #0
    2578:	mov	r0, r3
    257c:	sub	sp, fp, #4
    2580:	ldr	fp, [sp]
    2584:	add	sp, sp, #4
    2588:	pop	{pc}		; (ldr pc, [sp], #4)

0000258c <reflection_Object_bytesize_add>:
    258c:	str	fp, [sp, #-8]!
    2590:	str	lr, [sp, #4]
    2594:	add	fp, sp, #4
    2598:	sub	sp, sp, #16
    259c:	str	r0, [fp, #-16]
    25a0:	str	r1, [fp, #-20]	; 0xffffffec
    25a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    25a8:	cmp	r3, #0
    25ac:	bne	25b8 <reflection_Object_bytesize_add+0x2c>
    25b0:	mov	r3, #0
    25b4:	b	25f4 <reflection_Object_bytesize_add+0x68>
    25b8:	mov	r3, #4
    25bc:	mov	r2, #4
    25c0:	mov	r1, #4
    25c4:	ldr	r0, [fp, #-16]
    25c8:	bl	0 <flatcc_builder_table_add>
    25cc:	str	r0, [fp, #-8]
    25d0:	ldr	r3, [fp, #-8]
    25d4:	cmp	r3, #0
    25d8:	bne	25e4 <reflection_Object_bytesize_add+0x58>
    25dc:	mvn	r3, #0
    25e0:	b	25f4 <reflection_Object_bytesize_add+0x68>
    25e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    25e8:	ldr	r0, [fp, #-8]
    25ec:	bl	e64 <flatbuffers_int32_assign_to_pe>
    25f0:	mov	r3, #0
    25f4:	mov	r0, r3
    25f8:	sub	sp, fp, #4
    25fc:	ldr	fp, [sp]
    2600:	add	sp, sp, #4
    2604:	pop	{pc}		; (ldr pc, [sp], #4)

00002608 <reflection_Schema_objects_add>:
    2608:	str	fp, [sp, #-8]!
    260c:	str	lr, [sp, #4]
    2610:	add	fp, sp, #4
    2614:	sub	sp, sp, #16
    2618:	str	r0, [fp, #-16]
    261c:	str	r1, [fp, #-20]	; 0xffffffec
    2620:	ldr	r3, [fp, #-20]	; 0xffffffec
    2624:	cmp	r3, #0
    2628:	beq	265c <reflection_Schema_objects_add+0x54>
    262c:	mov	r1, #0
    2630:	ldr	r0, [fp, #-16]
    2634:	bl	0 <flatcc_builder_table_add_offset>
    2638:	str	r0, [fp, #-8]
    263c:	ldr	r3, [fp, #-8]
    2640:	cmp	r3, #0
    2644:	beq	265c <reflection_Schema_objects_add+0x54>
    2648:	ldr	r3, [fp, #-8]
    264c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2650:	str	r2, [r3]
    2654:	mov	r3, #0
    2658:	b	2660 <reflection_Schema_objects_add+0x58>
    265c:	mvn	r3, #0
    2660:	mov	r0, r3
    2664:	sub	sp, fp, #4
    2668:	ldr	fp, [sp]
    266c:	add	sp, sp, #4
    2670:	pop	{pc}		; (ldr pc, [sp], #4)

00002674 <reflection_Schema_objects_create>:
    2674:	str	fp, [sp, #-8]!
    2678:	str	lr, [sp, #4]
    267c:	add	fp, sp, #4
    2680:	sub	sp, sp, #16
    2684:	str	r0, [fp, #-8]
    2688:	str	r1, [fp, #-12]
    268c:	str	r2, [fp, #-16]
    2690:	ldr	r2, [fp, #-16]
    2694:	ldr	r1, [fp, #-12]
    2698:	ldr	r0, [fp, #-8]
    269c:	bl	0 <flatcc_builder_create_offset_vector>
    26a0:	mov	r3, r0
    26a4:	mov	r1, r3
    26a8:	ldr	r0, [fp, #-8]
    26ac:	bl	2608 <reflection_Schema_objects_add>
    26b0:	mov	r3, r0
    26b4:	mov	r0, r3
    26b8:	sub	sp, fp, #4
    26bc:	ldr	fp, [sp]
    26c0:	add	sp, sp, #4
    26c4:	pop	{pc}		; (ldr pc, [sp], #4)

000026c8 <reflection_Schema_enums_add>:
    26c8:	str	fp, [sp, #-8]!
    26cc:	str	lr, [sp, #4]
    26d0:	add	fp, sp, #4
    26d4:	sub	sp, sp, #16
    26d8:	str	r0, [fp, #-16]
    26dc:	str	r1, [fp, #-20]	; 0xffffffec
    26e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    26e4:	cmp	r3, #0
    26e8:	beq	271c <reflection_Schema_enums_add+0x54>
    26ec:	mov	r1, #1
    26f0:	ldr	r0, [fp, #-16]
    26f4:	bl	0 <flatcc_builder_table_add_offset>
    26f8:	str	r0, [fp, #-8]
    26fc:	ldr	r3, [fp, #-8]
    2700:	cmp	r3, #0
    2704:	beq	271c <reflection_Schema_enums_add+0x54>
    2708:	ldr	r3, [fp, #-8]
    270c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2710:	str	r2, [r3]
    2714:	mov	r3, #0
    2718:	b	2720 <reflection_Schema_enums_add+0x58>
    271c:	mvn	r3, #0
    2720:	mov	r0, r3
    2724:	sub	sp, fp, #4
    2728:	ldr	fp, [sp]
    272c:	add	sp, sp, #4
    2730:	pop	{pc}		; (ldr pc, [sp], #4)

00002734 <reflection_Schema_enums_start>:
    2734:	str	fp, [sp, #-8]!
    2738:	str	lr, [sp, #4]
    273c:	add	fp, sp, #4
    2740:	sub	sp, sp, #8
    2744:	str	r0, [fp, #-8]
    2748:	ldr	r0, [fp, #-8]
    274c:	bl	0 <flatcc_builder_start_offset_vector>
    2750:	mov	r3, r0
    2754:	mov	r0, r3
    2758:	sub	sp, fp, #4
    275c:	ldr	fp, [sp]
    2760:	add	sp, sp, #4
    2764:	pop	{pc}		; (ldr pc, [sp], #4)

00002768 <reflection_Schema_enums_end>:
    2768:	str	fp, [sp, #-8]!
    276c:	str	lr, [sp, #4]
    2770:	add	fp, sp, #4
    2774:	sub	sp, sp, #8
    2778:	str	r0, [fp, #-8]
    277c:	ldr	r0, [fp, #-8]
    2780:	bl	0 <flatcc_builder_end_offset_vector>
    2784:	mov	r3, r0
    2788:	mov	r1, r3
    278c:	ldr	r0, [fp, #-8]
    2790:	bl	26c8 <reflection_Schema_enums_add>
    2794:	mov	r3, r0
    2798:	mov	r0, r3
    279c:	sub	sp, fp, #4
    27a0:	ldr	fp, [sp]
    27a4:	add	sp, sp, #4
    27a8:	pop	{pc}		; (ldr pc, [sp], #4)

000027ac <reflection_Schema_file_ident_add>:
    27ac:	str	fp, [sp, #-8]!
    27b0:	str	lr, [sp, #4]
    27b4:	add	fp, sp, #4
    27b8:	sub	sp, sp, #16
    27bc:	str	r0, [fp, #-16]
    27c0:	str	r1, [fp, #-20]	; 0xffffffec
    27c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    27c8:	cmp	r3, #0
    27cc:	beq	2800 <reflection_Schema_file_ident_add+0x54>
    27d0:	mov	r1, #2
    27d4:	ldr	r0, [fp, #-16]
    27d8:	bl	0 <flatcc_builder_table_add_offset>
    27dc:	str	r0, [fp, #-8]
    27e0:	ldr	r3, [fp, #-8]
    27e4:	cmp	r3, #0
    27e8:	beq	2800 <reflection_Schema_file_ident_add+0x54>
    27ec:	ldr	r3, [fp, #-8]
    27f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    27f4:	str	r2, [r3]
    27f8:	mov	r3, #0
    27fc:	b	2804 <reflection_Schema_file_ident_add+0x58>
    2800:	mvn	r3, #0
    2804:	mov	r0, r3
    2808:	sub	sp, fp, #4
    280c:	ldr	fp, [sp]
    2810:	add	sp, sp, #4
    2814:	pop	{pc}		; (ldr pc, [sp], #4)

00002818 <reflection_Schema_file_ident_create>:
    2818:	str	fp, [sp, #-8]!
    281c:	str	lr, [sp, #4]
    2820:	add	fp, sp, #4
    2824:	sub	sp, sp, #16
    2828:	str	r0, [fp, #-8]
    282c:	str	r1, [fp, #-12]
    2830:	str	r2, [fp, #-16]
    2834:	ldr	r2, [fp, #-16]
    2838:	ldr	r1, [fp, #-12]
    283c:	ldr	r0, [fp, #-8]
    2840:	bl	0 <flatcc_builder_create_string>
    2844:	mov	r3, r0
    2848:	mov	r1, r3
    284c:	ldr	r0, [fp, #-8]
    2850:	bl	27ac <reflection_Schema_file_ident_add>
    2854:	mov	r3, r0
    2858:	mov	r0, r3
    285c:	sub	sp, fp, #4
    2860:	ldr	fp, [sp]
    2864:	add	sp, sp, #4
    2868:	pop	{pc}		; (ldr pc, [sp], #4)

0000286c <reflection_Schema_file_ext_add>:
    286c:	str	fp, [sp, #-8]!
    2870:	str	lr, [sp, #4]
    2874:	add	fp, sp, #4
    2878:	sub	sp, sp, #16
    287c:	str	r0, [fp, #-16]
    2880:	str	r1, [fp, #-20]	; 0xffffffec
    2884:	ldr	r3, [fp, #-20]	; 0xffffffec
    2888:	cmp	r3, #0
    288c:	beq	28c0 <reflection_Schema_file_ext_add+0x54>
    2890:	mov	r1, #3
    2894:	ldr	r0, [fp, #-16]
    2898:	bl	0 <flatcc_builder_table_add_offset>
    289c:	str	r0, [fp, #-8]
    28a0:	ldr	r3, [fp, #-8]
    28a4:	cmp	r3, #0
    28a8:	beq	28c0 <reflection_Schema_file_ext_add+0x54>
    28ac:	ldr	r3, [fp, #-8]
    28b0:	ldr	r2, [fp, #-20]	; 0xffffffec
    28b4:	str	r2, [r3]
    28b8:	mov	r3, #0
    28bc:	b	28c4 <reflection_Schema_file_ext_add+0x58>
    28c0:	mvn	r3, #0
    28c4:	mov	r0, r3
    28c8:	sub	sp, fp, #4
    28cc:	ldr	fp, [sp]
    28d0:	add	sp, sp, #4
    28d4:	pop	{pc}		; (ldr pc, [sp], #4)

000028d8 <reflection_Schema_file_ext_create>:
    28d8:	str	fp, [sp, #-8]!
    28dc:	str	lr, [sp, #4]
    28e0:	add	fp, sp, #4
    28e4:	sub	sp, sp, #16
    28e8:	str	r0, [fp, #-8]
    28ec:	str	r1, [fp, #-12]
    28f0:	str	r2, [fp, #-16]
    28f4:	ldr	r2, [fp, #-16]
    28f8:	ldr	r1, [fp, #-12]
    28fc:	ldr	r0, [fp, #-8]
    2900:	bl	0 <flatcc_builder_create_string>
    2904:	mov	r3, r0
    2908:	mov	r1, r3
    290c:	ldr	r0, [fp, #-8]
    2910:	bl	286c <reflection_Schema_file_ext_add>
    2914:	mov	r3, r0
    2918:	mov	r0, r3
    291c:	sub	sp, fp, #4
    2920:	ldr	fp, [sp]
    2924:	add	sp, sp, #4
    2928:	pop	{pc}		; (ldr pc, [sp], #4)

0000292c <reflection_Schema_root_table_add>:
    292c:	str	fp, [sp, #-8]!
    2930:	str	lr, [sp, #4]
    2934:	add	fp, sp, #4
    2938:	sub	sp, sp, #16
    293c:	str	r0, [fp, #-16]
    2940:	str	r1, [fp, #-20]	; 0xffffffec
    2944:	ldr	r3, [fp, #-20]	; 0xffffffec
    2948:	cmp	r3, #0
    294c:	beq	2980 <reflection_Schema_root_table_add+0x54>
    2950:	mov	r1, #4
    2954:	ldr	r0, [fp, #-16]
    2958:	bl	0 <flatcc_builder_table_add_offset>
    295c:	str	r0, [fp, #-8]
    2960:	ldr	r3, [fp, #-8]
    2964:	cmp	r3, #0
    2968:	beq	2980 <reflection_Schema_root_table_add+0x54>
    296c:	ldr	r3, [fp, #-8]
    2970:	ldr	r2, [fp, #-20]	; 0xffffffec
    2974:	str	r2, [r3]
    2978:	mov	r3, #0
    297c:	b	2984 <reflection_Schema_root_table_add+0x58>
    2980:	mvn	r3, #0
    2984:	mov	r0, r3
    2988:	sub	sp, fp, #4
    298c:	ldr	fp, [sp]
    2990:	add	sp, sp, #4
    2994:	pop	{pc}		; (ldr pc, [sp], #4)

00002998 <reflection_Schema_start_as_root>:
    2998:	str	fp, [sp, #-8]!
    299c:	str	lr, [sp, #4]
    29a0:	add	fp, sp, #4
    29a4:	sub	sp, sp, #8
    29a8:	str	r0, [fp, #-8]
    29ac:	movw	r1, #0
    29b0:	movt	r1, #0
    29b4:	ldr	r0, [fp, #-8]
    29b8:	bl	f34 <flatbuffers_buffer_start>
    29bc:	mov	r3, r0
    29c0:	cmp	r3, #0
    29c4:	bne	29d8 <reflection_Schema_start_as_root+0x40>
    29c8:	ldr	r0, [fp, #-8]
    29cc:	bl	1494 <reflection_Schema_start>
    29d0:	mov	r3, r0
    29d4:	b	29dc <reflection_Schema_start_as_root+0x44>
    29d8:	mvn	r3, #0
    29dc:	mov	r0, r3
    29e0:	sub	sp, fp, #4
    29e4:	ldr	fp, [sp]
    29e8:	add	sp, sp, #4
    29ec:	pop	{pc}		; (ldr pc, [sp], #4)

000029f0 <reflection_Schema_start_as_root_with_size>:
    29f0:	str	fp, [sp, #-8]!
    29f4:	str	lr, [sp, #4]
    29f8:	add	fp, sp, #4
    29fc:	sub	sp, sp, #8
    2a00:	str	r0, [fp, #-8]
    2a04:	movw	r1, #0
    2a08:	movt	r1, #0
    2a0c:	ldr	r0, [fp, #-8]
    2a10:	bl	f78 <flatbuffers_buffer_start_with_size>
    2a14:	mov	r3, r0
    2a18:	cmp	r3, #0
    2a1c:	bne	2a30 <reflection_Schema_start_as_root_with_size+0x40>
    2a20:	ldr	r0, [fp, #-8]
    2a24:	bl	1494 <reflection_Schema_start>
    2a28:	mov	r3, r0
    2a2c:	b	2a34 <reflection_Schema_start_as_root_with_size+0x44>
    2a30:	mvn	r3, #0
    2a34:	mov	r0, r3
    2a38:	sub	sp, fp, #4
    2a3c:	ldr	fp, [sp]
    2a40:	add	sp, sp, #4
    2a44:	pop	{pc}		; (ldr pc, [sp], #4)

00002a48 <reflection_Schema_end_as_root>:
    2a48:	str	fp, [sp, #-8]!
    2a4c:	str	lr, [sp, #4]
    2a50:	add	fp, sp, #4
    2a54:	sub	sp, sp, #8
    2a58:	str	r0, [fp, #-8]
    2a5c:	ldr	r0, [fp, #-8]
    2a60:	bl	14cc <reflection_Schema_end>
    2a64:	mov	r3, r0
    2a68:	mov	r1, r3
    2a6c:	ldr	r0, [fp, #-8]
    2a70:	bl	fbc <flatbuffers_buffer_end>
    2a74:	mov	r3, r0
    2a78:	mov	r0, r3
    2a7c:	sub	sp, fp, #4
    2a80:	ldr	fp, [sp]
    2a84:	add	sp, sp, #4
    2a88:	pop	{pc}		; (ldr pc, [sp], #4)

00002a8c <ptr_set_exists>:
    2a8c:	str	fp, [sp, #-8]!
    2a90:	str	lr, [sp, #4]
    2a94:	add	fp, sp, #4
    2a98:	sub	sp, sp, #8
    2a9c:	str	r0, [fp, #-8]
    2aa0:	str	r1, [fp, #-12]
    2aa4:	ldr	r1, [fp, #-12]
    2aa8:	ldr	r0, [fp, #-8]
    2aac:	bl	0 <ptr_set_find_item>
    2ab0:	mov	r3, r0
    2ab4:	cmp	r3, #0
    2ab8:	movne	r3, #1
    2abc:	moveq	r3, #0
    2ac0:	uxtb	r3, r3
    2ac4:	mov	r0, r3
    2ac8:	sub	sp, fp, #4
    2acc:	ldr	fp, [sp]
    2ad0:	add	sp, sp, #4
    2ad4:	pop	{pc}		; (ldr pc, [sp], #4)

00002ad8 <get_compound_if_visible>:
    2ad8:	str	fp, [sp, #-8]!
    2adc:	str	lr, [sp, #4]
    2ae0:	add	fp, sp, #4
    2ae4:	sub	sp, sp, #16
    2ae8:	str	r0, [fp, #-16]
    2aec:	str	r1, [fp, #-20]	; 0xffffffec
    2af0:	mov	r3, #0
    2af4:	str	r3, [fp, #-8]
    2af8:	ldr	r3, [fp, #-20]	; 0xffffffec
    2afc:	ldrh	r3, [r3, #8]
    2b00:	cmp	r3, #4
    2b04:	bhi	2b44 <get_compound_if_visible+0x6c>
    2b08:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b0c:	str	r3, [fp, #-8]
    2b10:	ldr	r3, [fp, #-16]
    2b14:	add	r2, r3, #172	; 0xac
    2b18:	ldr	r3, [fp, #-8]
    2b1c:	ldr	r3, [r3, #16]
    2b20:	mov	r1, r3
    2b24:	mov	r0, r2
    2b28:	bl	2a8c <ptr_set_exists>
    2b2c:	mov	r3, r0
    2b30:	cmp	r3, #0
    2b34:	bne	2b4c <get_compound_if_visible+0x74>
    2b38:	mov	r3, #0
    2b3c:	str	r3, [fp, #-8]
    2b40:	b	2b4c <get_compound_if_visible+0x74>
    2b44:	nop	{0}
    2b48:	b	2b50 <get_compound_if_visible+0x78>
    2b4c:	nop	{0}
    2b50:	ldr	r3, [fp, #-8]
    2b54:	mov	r0, r3
    2b58:	sub	sp, fp, #4
    2b5c:	ldr	fp, [sp]
    2b60:	add	sp, sp, #4
    2b64:	pop	{pc}		; (ldr pc, [sp], #4)

00002b68 <checkmem>:
    2b68:	str	fp, [sp, #-8]!
    2b6c:	str	lr, [sp, #4]
    2b70:	add	fp, sp, #4
    2b74:	sub	sp, sp, #8
    2b78:	str	r0, [fp, #-8]
    2b7c:	ldr	r3, [fp, #-8]
    2b80:	cmp	r3, #0
    2b84:	bne	2bb0 <checkmem+0x48>
    2b88:	movw	r3, #0
    2b8c:	movt	r3, #0
    2b90:	ldr	r3, [r3]
    2b94:	mov	r2, #34	; 0x22
    2b98:	mov	r1, #1
    2b9c:	movw	r0, #0
    2ba0:	movt	r0, #0
    2ba4:	bl	0 <fwrite>
    2ba8:	mov	r0, #1
    2bac:	bl	0 <exit>
    2bb0:	nop	{0}
    2bb4:	sub	sp, fp, #4
    2bb8:	ldr	fp, [sp]
    2bbc:	add	sp, sp, #4
    2bc0:	pop	{pc}		; (ldr pc, [sp], #4)

00002bc4 <error_tok_2>:
    2bc4:	str	fp, [sp, #-8]!
    2bc8:	str	lr, [sp, #4]
    2bcc:	add	fp, sp, #4
    2bd0:	sub	sp, sp, #24
    2bd4:	str	r0, [fp, #-8]
    2bd8:	str	r1, [fp, #-12]
    2bdc:	str	r2, [fp, #-16]
    2be0:	str	r3, [fp, #-20]	; 0xffffffec
    2be4:	mov	r3, #0
    2be8:	str	r3, [sp, #4]
    2bec:	mov	r3, #0
    2bf0:	str	r3, [sp]
    2bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
    2bf8:	ldr	r2, [fp, #-16]
    2bfc:	ldr	r1, [fp, #-12]
    2c00:	ldr	r0, [fp, #-8]
    2c04:	bl	0 <__flatcc_error_report>
    2c08:	nop	{0}
    2c0c:	sub	sp, fp, #4
    2c10:	ldr	fp, [sp]
    2c14:	add	sp, sp, #4
    2c18:	pop	{pc}		; (ldr pc, [sp], #4)

00002c1c <count_symbol>:
    2c1c:	str	fp, [sp, #-8]!
    2c20:	str	lr, [sp, #4]
    2c24:	add	fp, sp, #4
    2c28:	sub	sp, sp, #24
    2c2c:	str	r0, [fp, #-24]	; 0xffffffe8
    2c30:	str	r1, [fp, #-28]	; 0xffffffe4
    2c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c38:	str	r3, [fp, #-16]
    2c3c:	mov	r3, #0
    2c40:	str	r3, [fp, #-12]
    2c44:	ldr	r3, [fp, #-16]
    2c48:	ldr	r3, [r3, #40]	; 0x28
    2c4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2c50:	mov	r0, r3
    2c54:	bl	2ad8 <get_compound_if_visible>
    2c58:	str	r0, [fp, #-20]	; 0xffffffec
    2c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2c60:	cmp	r3, #0
    2c64:	beq	2d54 <count_symbol+0x138>
    2c68:	ldr	r3, [fp, #-16]
    2c6c:	ldr	r3, [r3]
    2c70:	cmp	r3, #0
    2c74:	beq	2cc4 <count_symbol+0xa8>
    2c78:	ldr	r3, [fp, #-20]	; 0xffffffec
    2c7c:	ldr	r3, [r3, #12]
    2c80:	ldr	r3, [r3]
    2c84:	str	r3, [fp, #-8]
    2c88:	b	2cb8 <count_symbol+0x9c>
    2c8c:	ldr	r3, [fp, #-8]
    2c90:	ldr	r3, [r3, #4]
    2c94:	ldr	r3, [r3, #4]
    2c98:	mov	r2, r3
    2c9c:	ldr	r3, [fp, #-12]
    2ca0:	add	r3, r2, r3
    2ca4:	add	r3, r3, #1
    2ca8:	str	r3, [fp, #-12]
    2cac:	ldr	r3, [fp, #-8]
    2cb0:	ldr	r3, [r3]
    2cb4:	str	r3, [fp, #-8]
    2cb8:	ldr	r3, [fp, #-8]
    2cbc:	cmp	r3, #0
    2cc0:	bne	2c8c <count_symbol+0x70>
    2cc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2cc8:	ldr	r3, [r3, #4]
    2ccc:	ldr	r3, [r3, #4]
    2cd0:	mov	r2, r3
    2cd4:	ldr	r3, [fp, #-12]
    2cd8:	add	r3, r2, r3
    2cdc:	add	r3, r3, #1
    2ce0:	str	r3, [fp, #-12]
    2ce4:	ldr	r3, [fp, #-16]
    2ce8:	ldr	r2, [r3, #12]
    2cec:	ldr	r3, [fp, #-12]
    2cf0:	add	r2, r2, r3
    2cf4:	ldr	r3, [fp, #-16]
    2cf8:	str	r2, [r3, #12]
    2cfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2d00:	ldrh	r3, [r3, #8]
    2d04:	cmp	r3, #4
    2d08:	ldrls	pc, [pc, r3, lsl #2]
    2d0c:	b	2d5c <count_symbol+0x140>
    2d10:	.word	0x00002d24
    2d14:	.word	0x00002d24
    2d18:	.word	0x00002d5c
    2d1c:	.word	0x00002d3c
    2d20:	.word	0x00002d3c
    2d24:	ldr	r3, [fp, #-16]
    2d28:	ldr	r3, [r3, #4]
    2d2c:	add	r2, r3, #1
    2d30:	ldr	r3, [fp, #-16]
    2d34:	str	r2, [r3, #4]
    2d38:	b	2d60 <count_symbol+0x144>
    2d3c:	ldr	r3, [fp, #-16]
    2d40:	ldr	r3, [r3, #8]
    2d44:	add	r2, r3, #1
    2d48:	ldr	r3, [fp, #-16]
    2d4c:	str	r2, [r3, #8]
    2d50:	b	2d60 <count_symbol+0x144>
    2d54:	nop	{0}
    2d58:	b	2d60 <count_symbol+0x144>
    2d5c:	nop	{0}
    2d60:	sub	sp, fp, #4
    2d64:	ldr	fp, [sp]
    2d68:	add	sp, sp, #4
    2d6c:	pop	{pc}		; (ldr pc, [sp], #4)

00002d70 <install_symbol>:
    2d70:	str	fp, [sp, #-8]!
    2d74:	str	lr, [sp, #4]
    2d78:	add	fp, sp, #4
    2d7c:	sub	sp, sp, #32
    2d80:	str	r0, [fp, #-32]	; 0xffffffe0
    2d84:	str	r1, [fp, #-36]	; 0xffffffdc
    2d88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2d8c:	str	r3, [fp, #-16]
    2d90:	mov	r3, #0
    2d94:	str	r3, [fp, #-20]	; 0xffffffec
    2d98:	ldr	r3, [fp, #-16]
    2d9c:	ldr	r3, [r3, #40]	; 0x28
    2da0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2da4:	mov	r0, r3
    2da8:	bl	2ad8 <get_compound_if_visible>
    2dac:	str	r0, [fp, #-24]	; 0xffffffe8
    2db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2db4:	cmp	r3, #0
    2db8:	beq	2f50 <install_symbol+0x1e0>
    2dbc:	ldr	r3, [fp, #-16]
    2dc0:	ldr	r3, [r3, #36]	; 0x24
    2dc4:	str	r3, [fp, #-12]
    2dc8:	ldr	r3, [fp, #-12]
    2dcc:	str	r3, [fp, #-28]	; 0xffffffe4
    2dd0:	ldr	r3, [fp, #-16]
    2dd4:	ldr	r3, [r3]
    2dd8:	cmp	r3, #0
    2ddc:	beq	2e5c <install_symbol+0xec>
    2de0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2de4:	ldr	r3, [r3, #12]
    2de8:	ldr	r3, [r3]
    2dec:	str	r3, [fp, #-8]
    2df0:	b	2e50 <install_symbol+0xe0>
    2df4:	ldr	r3, [fp, #-8]
    2df8:	ldr	r3, [r3, #4]
    2dfc:	ldr	r3, [r3, #4]
    2e00:	str	r3, [fp, #-20]	; 0xffffffec
    2e04:	ldr	r3, [fp, #-8]
    2e08:	ldr	r3, [r3, #4]
    2e0c:	ldr	r3, [r3]
    2e10:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e14:	mov	r1, r3
    2e18:	ldr	r0, [fp, #-12]
    2e1c:	bl	0 <memcpy>
    2e20:	ldr	r3, [fp, #-20]	; 0xffffffec
    2e24:	ldr	r2, [fp, #-12]
    2e28:	add	r3, r2, r3
    2e2c:	str	r3, [fp, #-12]
    2e30:	ldr	r3, [fp, #-12]
    2e34:	add	r2, r3, #1
    2e38:	str	r2, [fp, #-12]
    2e3c:	mov	r2, #46	; 0x2e
    2e40:	strb	r2, [r3]
    2e44:	ldr	r3, [fp, #-8]
    2e48:	ldr	r3, [r3]
    2e4c:	str	r3, [fp, #-8]
    2e50:	ldr	r3, [fp, #-8]
    2e54:	cmp	r3, #0
    2e58:	bne	2df4 <install_symbol+0x84>
    2e5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2e60:	ldr	r3, [r3, #4]
    2e64:	ldr	r3, [r3, #4]
    2e68:	str	r3, [fp, #-20]	; 0xffffffec
    2e6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2e70:	ldr	r3, [r3, #4]
    2e74:	ldr	r3, [r3]
    2e78:	ldr	r2, [fp, #-20]	; 0xffffffec
    2e7c:	mov	r1, r3
    2e80:	ldr	r0, [fp, #-12]
    2e84:	bl	0 <memcpy>
    2e88:	ldr	r3, [fp, #-20]	; 0xffffffec
    2e8c:	ldr	r2, [fp, #-12]
    2e90:	add	r3, r2, r3
    2e94:	str	r3, [fp, #-12]
    2e98:	ldr	r3, [fp, #-12]
    2e9c:	add	r2, r3, #1
    2ea0:	str	r2, [fp, #-12]
    2ea4:	mov	r2, #0
    2ea8:	strb	r2, [r3]
    2eac:	ldr	r3, [fp, #-16]
    2eb0:	ldr	r2, [fp, #-12]
    2eb4:	str	r2, [r3, #36]	; 0x24
    2eb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2ebc:	ldrh	r3, [r3, #8]
    2ec0:	cmp	r3, #4
    2ec4:	ldrls	pc, [pc, r3, lsl #2]
    2ec8:	b	2f58 <install_symbol+0x1e8>
    2ecc:	.word	0x00002ee0
    2ed0:	.word	0x00002ee0
    2ed4:	.word	0x00002f58
    2ed8:	.word	0x00002f18
    2edc:	.word	0x00002f18
    2ee0:	ldr	r3, [fp, #-16]
    2ee4:	ldr	r3, [r3, #28]
    2ee8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2eec:	str	r2, [r3]
    2ef0:	ldr	r3, [fp, #-16]
    2ef4:	ldr	r3, [r3, #28]
    2ef8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2efc:	str	r2, [r3, #4]
    2f00:	ldr	r3, [fp, #-16]
    2f04:	ldr	r3, [r3, #28]
    2f08:	add	r2, r3, #8
    2f0c:	ldr	r3, [fp, #-16]
    2f10:	str	r2, [r3, #28]
    2f14:	b	2f5c <install_symbol+0x1ec>
    2f18:	ldr	r3, [fp, #-16]
    2f1c:	ldr	r3, [r3, #32]
    2f20:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2f24:	str	r2, [r3]
    2f28:	ldr	r3, [fp, #-16]
    2f2c:	ldr	r3, [r3, #32]
    2f30:	ldr	r2, [fp, #-28]	; 0xffffffe4
    2f34:	str	r2, [r3, #4]
    2f38:	ldr	r3, [fp, #-16]
    2f3c:	ldr	r3, [r3, #32]
    2f40:	add	r2, r3, #8
    2f44:	ldr	r3, [fp, #-16]
    2f48:	str	r2, [r3, #32]
    2f4c:	b	2f5c <install_symbol+0x1ec>
    2f50:	nop	{0}
    2f54:	b	2f5c <install_symbol+0x1ec>
    2f58:	nop	{0}
    2f5c:	sub	sp, fp, #4
    2f60:	ldr	fp, [sp]
    2f64:	add	sp, sp, #4
    2f68:	pop	{pc}		; (ldr pc, [sp], #4)

00002f6c <count_symbols>:
    2f6c:	str	fp, [sp, #-8]!
    2f70:	str	lr, [sp, #4]
    2f74:	add	fp, sp, #4
    2f78:	sub	sp, sp, #8
    2f7c:	str	r0, [fp, #-8]
    2f80:	str	r1, [fp, #-12]
    2f84:	ldr	r3, [fp, #-12]
    2f88:	add	r3, r3, #4
    2f8c:	ldr	r2, [fp, #-8]
    2f90:	movw	r1, #0
    2f94:	movt	r1, #0
    2f98:	mov	r0, r3
    2f9c:	bl	0 <fb_symbol_table_visit>
    2fa0:	nop	{0}
    2fa4:	sub	sp, fp, #4
    2fa8:	ldr	fp, [sp]
    2fac:	add	sp, sp, #4
    2fb0:	pop	{pc}		; (ldr pc, [sp], #4)

00002fb4 <install_symbols>:
    2fb4:	str	fp, [sp, #-8]!
    2fb8:	str	lr, [sp, #4]
    2fbc:	add	fp, sp, #4
    2fc0:	sub	sp, sp, #8
    2fc4:	str	r0, [fp, #-8]
    2fc8:	str	r1, [fp, #-12]
    2fcc:	ldr	r3, [fp, #-12]
    2fd0:	add	r3, r3, #4
    2fd4:	ldr	r2, [fp, #-8]
    2fd8:	movw	r1, #0
    2fdc:	movt	r1, #0
    2fe0:	mov	r0, r3
    2fe4:	bl	0 <fb_symbol_table_visit>
    2fe8:	nop	{0}
    2fec:	sub	sp, fp, #4
    2ff0:	ldr	fp, [sp]
    2ff4:	add	sp, sp, #4
    2ff8:	pop	{pc}		; (ldr pc, [sp], #4)

00002ffc <compare_entries>:
    2ffc:	str	fp, [sp, #-8]!
    3000:	str	lr, [sp, #4]
    3004:	add	fp, sp, #4
    3008:	sub	sp, sp, #8
    300c:	str	r0, [fp, #-8]
    3010:	str	r1, [fp, #-12]
    3014:	ldr	r3, [fp, #-8]
    3018:	ldr	r2, [r3, #4]
    301c:	ldr	r3, [fp, #-12]
    3020:	ldr	r3, [r3, #4]
    3024:	mov	r1, r3
    3028:	mov	r0, r2
    302c:	bl	0 <strcmp>
    3030:	mov	r3, r0
    3034:	mov	r0, r3
    3038:	sub	sp, fp, #4
    303c:	ldr	fp, [sp]
    3040:	add	sp, sp, #4
    3044:	pop	{pc}		; (ldr pc, [sp], #4)

00003048 <sort_entries>:
    3048:	str	fp, [sp, #-8]!
    304c:	str	lr, [sp, #4]
    3050:	add	fp, sp, #4
    3054:	sub	sp, sp, #16
    3058:	str	r0, [fp, #-16]
    305c:	str	r1, [fp, #-20]	; 0xffffffec
    3060:	ldr	r1, [fp, #-20]	; 0xffffffec
    3064:	movw	r3, #0
    3068:	movt	r3, #0
    306c:	mov	r2, #8
    3070:	ldr	r0, [fp, #-16]
    3074:	bl	0 <qsort>
    3078:	mov	r3, #0
    307c:	str	r3, [fp, #-8]
    3080:	b	30ac <sort_entries+0x64>
    3084:	ldr	r3, [fp, #-8]
    3088:	lsl	r3, r3, #3
    308c:	ldr	r2, [fp, #-16]
    3090:	add	r3, r2, r3
    3094:	ldr	r3, [r3]
    3098:	ldr	r2, [fp, #-8]
    309c:	str	r2, [r3, #124]	; 0x7c
    30a0:	ldr	r3, [fp, #-8]
    30a4:	add	r3, r3, #1
    30a8:	str	r3, [fp, #-8]
    30ac:	ldr	r2, [fp, #-8]
    30b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    30b4:	cmp	r2, r3
    30b8:	blt	3084 <sort_entries+0x3c>
    30bc:	nop	{0}
    30c0:	sub	sp, fp, #4
    30c4:	ldr	fp, [sp]
    30c8:	add	sp, sp, #4
    30cc:	pop	{pc}		; (ldr pc, [sp], #4)

000030d0 <clear_catalog>:
    30d0:	str	fp, [sp, #-8]!
    30d4:	str	lr, [sp, #4]
    30d8:	add	fp, sp, #4
    30dc:	sub	sp, sp, #8
    30e0:	str	r0, [fp, #-8]
    30e4:	ldr	r3, [fp, #-8]
    30e8:	ldr	r3, [r3, #16]
    30ec:	cmp	r3, #0
    30f0:	beq	3104 <clear_catalog+0x34>
    30f4:	ldr	r3, [fp, #-8]
    30f8:	ldr	r3, [r3, #16]
    30fc:	mov	r0, r3
    3100:	bl	0 <free>
    3104:	ldr	r3, [fp, #-8]
    3108:	ldr	r3, [r3, #20]
    310c:	cmp	r3, #0
    3110:	beq	3124 <clear_catalog+0x54>
    3114:	ldr	r3, [fp, #-8]
    3118:	ldr	r3, [r3, #20]
    311c:	mov	r0, r3
    3120:	bl	0 <free>
    3124:	ldr	r3, [fp, #-8]
    3128:	ldr	r3, [r3, #24]
    312c:	cmp	r3, #0
    3130:	beq	3144 <clear_catalog+0x74>
    3134:	ldr	r3, [fp, #-8]
    3138:	ldr	r3, [r3, #24]
    313c:	mov	r0, r3
    3140:	bl	0 <free>
    3144:	mov	r2, #44	; 0x2c
    3148:	mov	r1, #0
    314c:	ldr	r0, [fp, #-8]
    3150:	bl	0 <memset>
    3154:	nop	{0}
    3158:	sub	sp, fp, #4
    315c:	ldr	fp, [sp]
    3160:	add	sp, sp, #4
    3164:	pop	{pc}		; (ldr pc, [sp], #4)

00003168 <build_catalog>:
    3168:	str	fp, [sp, #-8]!
    316c:	str	lr, [sp, #4]
    3170:	add	fp, sp, #4
    3174:	sub	sp, sp, #16
    3178:	str	r0, [fp, #-8]
    317c:	str	r1, [fp, #-12]
    3180:	str	r2, [fp, #-16]
    3184:	str	r3, [fp, #-20]	; 0xffffffec
    3188:	mov	r2, #44	; 0x2c
    318c:	mov	r1, #0
    3190:	ldr	r0, [fp, #-8]
    3194:	bl	0 <memset>
    3198:	ldr	r3, [fp, #-8]
    319c:	ldr	r2, [fp, #-16]
    31a0:	str	r2, [r3]
    31a4:	ldr	r3, [fp, #-8]
    31a8:	ldr	r2, [fp, #-12]
    31ac:	str	r2, [r3, #40]	; 0x28
    31b0:	ldr	r2, [fp, #-8]
    31b4:	movw	r1, #0
    31b8:	movt	r1, #0
    31bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    31c0:	bl	0 <fb_scope_table_visit>
    31c4:	ldr	r3, [fp, #-8]
    31c8:	ldr	r3, [r3, #4]
    31cc:	mov	r1, #8
    31d0:	mov	r0, r3
    31d4:	bl	0 <calloc>
    31d8:	mov	r3, r0
    31dc:	mov	r2, r3
    31e0:	ldr	r3, [fp, #-8]
    31e4:	str	r2, [r3, #16]
    31e8:	ldr	r3, [fp, #-8]
    31ec:	ldr	r3, [r3, #8]
    31f0:	mov	r1, #8
    31f4:	mov	r0, r3
    31f8:	bl	0 <calloc>
    31fc:	mov	r3, r0
    3200:	mov	r2, r3
    3204:	ldr	r3, [fp, #-8]
    3208:	str	r2, [r3, #20]
    320c:	ldr	r3, [fp, #-8]
    3210:	ldr	r3, [r3, #12]
    3214:	mov	r0, r3
    3218:	bl	0 <malloc>
    321c:	mov	r3, r0
    3220:	mov	r2, r3
    3224:	ldr	r3, [fp, #-8]
    3228:	str	r2, [r3, #24]
    322c:	ldr	r3, [fp, #-8]
    3230:	ldr	r2, [r3, #16]
    3234:	ldr	r3, [fp, #-8]
    3238:	str	r2, [r3, #28]
    323c:	ldr	r3, [fp, #-8]
    3240:	ldr	r2, [r3, #20]
    3244:	ldr	r3, [fp, #-8]
    3248:	str	r2, [r3, #32]
    324c:	ldr	r3, [fp, #-8]
    3250:	ldr	r2, [r3, #24]
    3254:	ldr	r3, [fp, #-8]
    3258:	str	r2, [r3, #36]	; 0x24
    325c:	ldr	r3, [fp, #-8]
    3260:	ldr	r3, [r3, #16]
    3264:	cmp	r3, #0
    3268:	bne	327c <build_catalog+0x114>
    326c:	ldr	r3, [fp, #-8]
    3270:	ldr	r3, [r3, #4]
    3274:	cmp	r3, #0
    3278:	bgt	32bc <build_catalog+0x154>
    327c:	ldr	r3, [fp, #-8]
    3280:	ldr	r3, [r3, #20]
    3284:	cmp	r3, #0
    3288:	bne	329c <build_catalog+0x134>
    328c:	ldr	r3, [fp, #-8]
    3290:	ldr	r3, [r3, #8]
    3294:	cmp	r3, #0
    3298:	bgt	32bc <build_catalog+0x154>
    329c:	ldr	r3, [fp, #-8]
    32a0:	ldr	r3, [r3, #24]
    32a4:	cmp	r3, #0
    32a8:	bne	32cc <build_catalog+0x164>
    32ac:	ldr	r3, [fp, #-8]
    32b0:	ldr	r3, [r3, #12]
    32b4:	cmp	r3, #0
    32b8:	beq	32cc <build_catalog+0x164>
    32bc:	ldr	r0, [fp, #-8]
    32c0:	bl	30d0 <clear_catalog>
    32c4:	mvn	r3, #0
    32c8:	b	331c <build_catalog+0x1b4>
    32cc:	ldr	r2, [fp, #-8]
    32d0:	movw	r1, #0
    32d4:	movt	r1, #0
    32d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    32dc:	bl	0 <fb_scope_table_visit>
    32e0:	ldr	r3, [fp, #-8]
    32e4:	ldr	r2, [r3, #16]
    32e8:	ldr	r3, [fp, #-8]
    32ec:	ldr	r3, [r3, #4]
    32f0:	mov	r1, r3
    32f4:	mov	r0, r2
    32f8:	bl	3048 <sort_entries>
    32fc:	ldr	r3, [fp, #-8]
    3300:	ldr	r2, [r3, #20]
    3304:	ldr	r3, [fp, #-8]
    3308:	ldr	r3, [r3, #8]
    330c:	mov	r1, r3
    3310:	mov	r0, r2
    3314:	bl	3048 <sort_entries>
    3318:	mov	r3, #0
    331c:	mov	r0, r3
    3320:	sub	sp, fp, #4
    3324:	ldr	fp, [sp]
    3328:	add	sp, sp, #4
    332c:	pop	{pc}		; (ldr pc, [sp], #4)

00003330 <export_type>:
    3330:	sub	sp, sp, #8
    3334:	str	fp, [sp, #-8]!
    3338:	str	lr, [sp, #4]
    333c:	add	fp, sp, #4
    3340:	sub	sp, sp, #24
    3344:	str	r0, [fp, #-24]	; 0xffffffe8
    3348:	add	r1, fp, #4
    334c:	stm	r1, {r2, r3}
    3350:	mov	r3, #0
    3354:	str	r3, [fp, #-8]
    3358:	mvn	r3, #0
    335c:	str	r3, [fp, #-12]
    3360:	mov	r3, #0
    3364:	strb	r3, [fp, #-13]
    3368:	mov	r3, #0
    336c:	strb	r3, [fp, #-14]
    3370:	mov	r3, #0
    3374:	strb	r3, [fp, #-15]
    3378:	ldrh	r3, [fp, #12]
    337c:	sub	r3, r3, #2
    3380:	cmp	r3, #13
    3384:	ldrls	pc, [pc, r3, lsl #2]
    3388:	b	34d0 <export_type+0x1a0>
    338c:	.word	0x00003458
    3390:	.word	0x000034d0
    3394:	.word	0x000034d0
    3398:	.word	0x000034d0
    339c:	.word	0x000034d0
    33a0:	.word	0x000033d0
    33a4:	.word	0x000033c4
    33a8:	.word	0x000033e4
    33ac:	.word	0x000034d0
    33b0:	.word	0x000034d0
    33b4:	.word	0x000034d0
    33b8:	.word	0x000034d0
    33bc:	.word	0x00003464
    33c0:	.word	0x000033f8
    33c4:	ldr	r3, [fp, #4]
    33c8:	str	r3, [fp, #-8]
    33cc:	b	34d4 <export_type+0x1a4>
    33d0:	ldr	r3, [fp, #4]
    33d4:	str	r3, [fp, #-8]
    33d8:	mov	r3, #14
    33dc:	strb	r3, [fp, #-13]
    33e0:	b	34d4 <export_type+0x1a4>
    33e4:	mov	r3, #13
    33e8:	strb	r3, [fp, #-14]
    33ec:	mov	r3, #14
    33f0:	strb	r3, [fp, #-13]
    33f4:	b	34d4 <export_type+0x1a4>
    33f8:	ldr	r3, [fp, #4]
    33fc:	ldr	r3, [r3, #124]	; 0x7c
    3400:	str	r3, [fp, #-12]
    3404:	ldr	r3, [fp, #4]
    3408:	ldrh	r3, [r3, #8]
    340c:	cmp	r3, #0
    3410:	blt	3450 <export_type+0x120>
    3414:	cmp	r3, #1
    3418:	ble	343c <export_type+0x10c>
    341c:	cmp	r3, #3
    3420:	bne	3450 <export_type+0x120>
    3424:	ldr	r3, [fp, #4]
    3428:	ldr	r3, [r3, #40]	; 0x28
    342c:	str	r3, [fp, #-8]
    3430:	mov	r3, #14
    3434:	strb	r3, [fp, #-13]
    3438:	b	3454 <export_type+0x124>
    343c:	mov	r3, #14
    3440:	strb	r3, [fp, #-13]
    3444:	mov	r3, #15
    3448:	strb	r3, [fp, #-14]
    344c:	b	3454 <export_type+0x124>
    3450:	nop	{0}
    3454:	b	34d4 <export_type+0x1a4>
    3458:	mov	r3, #13
    345c:	strb	r3, [fp, #-13]
    3460:	b	34d4 <export_type+0x1a4>
    3464:	ldr	r3, [fp, #4]
    3468:	ldr	r3, [r3, #124]	; 0x7c
    346c:	str	r3, [fp, #-12]
    3470:	ldr	r3, [fp, #4]
    3474:	ldrh	r3, [r3, #8]
    3478:	cmp	r3, #4
    347c:	ldrls	pc, [pc, r3, lsl #2]
    3480:	b	34c0 <export_type+0x190>
    3484:	.word	0x000034a8
    3488:	.word	0x000034a8
    348c:	.word	0x000034c0
    3490:	.word	0x00003498
    3494:	.word	0x000034b4
    3498:	ldr	r3, [fp, #4]
    349c:	ldr	r3, [r3, #40]	; 0x28
    34a0:	str	r3, [fp, #-8]
    34a4:	b	34cc <export_type+0x19c>
    34a8:	mov	r3, #15
    34ac:	strb	r3, [fp, #-13]
    34b0:	b	34cc <export_type+0x19c>
    34b4:	mov	r3, #16
    34b8:	strb	r3, [fp, #-13]
    34bc:	b	34cc <export_type+0x19c>
    34c0:	mvn	r3, #0
    34c4:	str	r3, [fp, #-12]
    34c8:	nop	{0}
    34cc:	b	34d4 <export_type+0x1a4>
    34d0:	nop	{0}
    34d4:	ldr	r3, [fp, #-8]
    34d8:	cmp	r3, #11
    34dc:	ldrls	pc, [pc, r3, lsl #2]
    34e0:	b	3598 <export_type+0x268>
    34e4:	.word	0x00003598
    34e8:	.word	0x00003514
    34ec:	.word	0x00003520
    34f0:	.word	0x0000352c
    34f4:	.word	0x00003538
    34f8:	.word	0x00003544
    34fc:	.word	0x00003550
    3500:	.word	0x0000355c
    3504:	.word	0x00003568
    3508:	.word	0x00003574
    350c:	.word	0x00003580
    3510:	.word	0x0000358c
    3514:	mov	r3, #10
    3518:	strb	r3, [fp, #-15]
    351c:	b	359c <export_type+0x26c>
    3520:	mov	r3, #8
    3524:	strb	r3, [fp, #-15]
    3528:	b	359c <export_type+0x26c>
    352c:	mov	r3, #6
    3530:	strb	r3, [fp, #-15]
    3534:	b	359c <export_type+0x26c>
    3538:	mov	r3, #4
    353c:	strb	r3, [fp, #-15]
    3540:	b	359c <export_type+0x26c>
    3544:	mov	r3, #2
    3548:	strb	r3, [fp, #-15]
    354c:	b	359c <export_type+0x26c>
    3550:	mov	r3, #9
    3554:	strb	r3, [fp, #-15]
    3558:	b	359c <export_type+0x26c>
    355c:	mov	r3, #7
    3560:	strb	r3, [fp, #-15]
    3564:	b	359c <export_type+0x26c>
    3568:	mov	r3, #5
    356c:	strb	r3, [fp, #-15]
    3570:	b	359c <export_type+0x26c>
    3574:	mov	r3, #3
    3578:	strb	r3, [fp, #-15]
    357c:	b	359c <export_type+0x26c>
    3580:	mov	r3, #12
    3584:	strb	r3, [fp, #-15]
    3588:	b	359c <export_type+0x26c>
    358c:	mov	r3, #11
    3590:	strb	r3, [fp, #-15]
    3594:	b	359c <export_type+0x26c>
    3598:	nop	{0}
    359c:	ldrsb	r3, [fp, #-13]
    35a0:	cmp	r3, #0
    35a4:	bne	35b4 <export_type+0x284>
    35a8:	ldrb	r3, [fp, #-15]
    35ac:	strb	r3, [fp, #-13]
    35b0:	b	35d4 <export_type+0x2a4>
    35b4:	ldrsb	r3, [fp, #-13]
    35b8:	cmp	r3, #14
    35bc:	bne	35d4 <export_type+0x2a4>
    35c0:	ldrsb	r3, [fp, #-14]
    35c4:	cmp	r3, #0
    35c8:	bne	35d4 <export_type+0x2a4>
    35cc:	ldrb	r3, [fp, #-15]
    35d0:	strb	r3, [fp, #-14]
    35d4:	ldrsb	r2, [fp, #-14]
    35d8:	ldrsb	r1, [fp, #-13]
    35dc:	ldr	r3, [fp, #-12]
    35e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    35e4:	bl	16c4 <reflection_Type_create>
    35e8:	mov	r3, r0
    35ec:	mov	r0, r3
    35f0:	sub	sp, fp, #4
    35f4:	ldr	fp, [sp]
    35f8:	ldr	lr, [sp, #4]
    35fc:	add	sp, sp, #8
    3600:	add	sp, sp, #8
    3604:	bx	lr

00003608 <export_fields>:
    3608:	str	fp, [sp, #-8]!
    360c:	str	lr, [sp, #4]
    3610:	add	fp, sp, #4
    3614:	sub	sp, sp, #48	; 0x30
    3618:	str	r0, [fp, #-40]	; 0xffffffd8
    361c:	str	r1, [fp, #-44]	; 0xffffffd4
    3620:	mov	r3, #0
    3624:	strb	r3, [fp, #-9]
    3628:	ldr	r3, [fp, #-44]	; 0xffffffd4
    362c:	ldr	r3, [r3, #20]
    3630:	str	r3, [fp, #-8]
    3634:	b	3968 <export_fields+0x360>
    3638:	ldr	r3, [fp, #-8]
    363c:	str	r3, [fp, #-32]	; 0xffffffe0
    3640:	ldrb	r3, [fp, #-9]
    3644:	cmp	r3, #0
    3648:	bne	3668 <export_fields+0x60>
    364c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3650:	ldrh	r3, [r3, #72]	; 0x48
    3654:	and	r3, r3, #128	; 0x80
    3658:	cmp	r3, #0
    365c:	beq	3668 <export_fields+0x60>
    3660:	mov	r3, #1
    3664:	b	366c <export_fields+0x64>
    3668:	mov	r3, #0
    366c:	strb	r3, [fp, #-33]	; 0xffffffdf
    3670:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3674:	ldrh	r3, [r3, #72]	; 0x48
    3678:	and	r3, r3, #256	; 0x100
    367c:	cmp	r3, #0
    3680:	movne	r3, #1
    3684:	moveq	r3, #0
    3688:	uxtb	r3, r3
    368c:	strb	r3, [fp, #-34]	; 0xffffffde
    3690:	mov	r2, #0
    3694:	mov	r3, #0
    3698:	strd	r2, [fp, #-20]	; 0xffffffec
    369c:	mov	r2, #0
    36a0:	mov	r3, #0
    36a4:	strd	r2, [fp, #-28]	; 0xffffffe4
    36a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    36ac:	ldrh	r3, [r3, #72]	; 0x48
    36b0:	and	r3, r3, #4
    36b4:	cmp	r3, #0
    36b8:	movne	r3, #1
    36bc:	moveq	r3, #0
    36c0:	uxtb	r3, r3
    36c4:	strb	r3, [fp, #-35]	; 0xffffffdd
    36c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    36cc:	ldrh	r3, [r3, #24]
    36d0:	cmp	r3, #14
    36d4:	bne	37b0 <export_fields+0x1a8>
    36d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    36dc:	ldr	r3, [r3, #16]
    36e0:	ldrh	r3, [r3, #8]
    36e4:	cmp	r3, #4
    36e8:	bne	37b0 <export_fields+0x1a8>
    36ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    36f0:	bl	2278 <reflection_Field_vec_push_start>
    36f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    36f8:	bl	1d08 <reflection_Field_name_start>
    36fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3700:	ldr	r3, [r3, #4]
    3704:	ldr	r1, [r3]
    3708:	ldr	r3, [fp, #-32]	; 0xffffffe0
    370c:	ldr	r3, [r3, #4]
    3710:	ldr	r3, [r3, #4]
    3714:	mov	r2, r3
    3718:	ldr	r0, [fp, #-40]	; 0xffffffd8
    371c:	bl	1dd4 <reflection_Field_name_append>
    3720:	mov	r2, #5
    3724:	movw	r1, #0
    3728:	movt	r1, #0
    372c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3730:	bl	1dd4 <reflection_Field_name_append>
    3734:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3738:	bl	1d3c <reflection_Field_name_end>
    373c:	mvn	r3, #0
    3740:	mov	r2, #0
    3744:	mov	r1, #1
    3748:	ldr	r0, [fp, #-40]	; 0xffffffd8
    374c:	bl	1e84 <reflection_Field_type_create>
    3750:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3754:	ldrd	r2, [r3, #96]	; 0x60
    3758:	uxth	r3, r2
    375c:	add	r3, r3, #1
    3760:	uxth	r3, r3
    3764:	lsl	r3, r3, #1
    3768:	uxth	r3, r3
    376c:	mov	r1, r3
    3770:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3774:	bl	1f6c <reflection_Field_offset_add>
    3778:	ldr	r3, [fp, #-32]	; 0xffffffe0
    377c:	ldrd	r2, [r3, #96]	; 0x60
    3780:	uxth	r3, r2
    3784:	sub	r3, r3, #1
    3788:	uxth	r3, r3
    378c:	mov	r1, r3
    3790:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3794:	bl	1ee8 <reflection_Field_id_add>
    3798:	ldrb	r3, [fp, #-35]	; 0xffffffdd
    379c:	mov	r1, r3
    37a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    37a4:	bl	20ec <reflection_Field_deprecated_add>
    37a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    37ac:	bl	22ac <reflection_Field_vec_push_end>
    37b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    37b4:	bl	2278 <reflection_Field_vec_push_start>
    37b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    37bc:	ldr	r3, [r3, #4]
    37c0:	ldr	r1, [r3]
    37c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    37c8:	ldr	r3, [r3, #4]
    37cc:	ldr	r3, [r3, #4]
    37d0:	mov	r2, r3
    37d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    37d8:	bl	1d80 <reflection_Field_name_create>
    37dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    37e0:	mov	r0, sp
    37e4:	add	r3, r1, #24
    37e8:	ldrd	r2, [r3]
    37ec:	strd	r2, [r0]
    37f0:	add	r3, r1, #16
    37f4:	ldm	r3, {r2, r3}
    37f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    37fc:	bl	3330 <export_type>
    3800:	mov	r3, r0
    3804:	mov	r1, r3
    3808:	ldr	r0, [fp, #-40]	; 0xffffffd8
    380c:	bl	1e18 <reflection_Field_type_add>
    3810:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3814:	ldrh	r3, [r3, #8]
    3818:	cmp	r3, #0
    381c:	beq	382c <export_fields+0x224>
    3820:	cmp	r3, #1
    3824:	beq	3918 <export_fields+0x310>
    3828:	b	3934 <export_fields+0x32c>
    382c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3830:	ldrh	r3, [r3, #56]	; 0x38
    3834:	sub	r3, r3, #3
    3838:	cmp	r3, #3
    383c:	ldrls	pc, [pc, r3, lsl #2]
    3840:	b	389c <export_fields+0x294>
    3844:	.word	0x0000388c
    3848:	.word	0x00003864
    384c:	.word	0x00003854
    3850:	.word	0x00003874
    3854:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3858:	ldrd	r2, [r3, #48]	; 0x30
    385c:	strd	r2, [fp, #-20]	; 0xffffffec
    3860:	b	389c <export_fields+0x294>
    3864:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3868:	ldrd	r2, [r3, #48]	; 0x30
    386c:	strd	r2, [fp, #-20]	; 0xffffffec
    3870:	b	389c <export_fields+0x294>
    3874:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3878:	ldrb	r3, [r3, #48]	; 0x30
    387c:	uxtb	r2, r3
    3880:	mov	r3, #0
    3884:	strd	r2, [fp, #-20]	; 0xffffffec
    3888:	b	389c <export_fields+0x294>
    388c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3890:	ldrd	r2, [r3, #48]	; 0x30
    3894:	strd	r2, [fp, #-28]	; 0xffffffe4
    3898:	nop	{0}
    389c:	ldrd	r2, [fp, #-20]	; 0xffffffec
    38a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    38a4:	bl	1ff0 <reflection_Field_default_integer_add>
    38a8:	vldr	d0, [fp, #-28]	; 0xffffffe4
    38ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
    38b0:	bl	206c <reflection_Field_default_real_add>
    38b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    38b8:	ldrd	r2, [r3, #96]	; 0x60
    38bc:	uxth	r3, r2
    38c0:	mov	r1, r3
    38c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    38c8:	bl	1ee8 <reflection_Field_id_add>
    38cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    38d0:	ldrd	r2, [r3, #96]	; 0x60
    38d4:	uxth	r3, r2
    38d8:	add	r3, r3, #2
    38dc:	uxth	r3, r3
    38e0:	lsl	r3, r3, #1
    38e4:	uxth	r3, r3
    38e8:	mov	r1, r3
    38ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    38f0:	bl	1f6c <reflection_Field_offset_add>
    38f4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    38f8:	mov	r1, r3
    38fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3900:	bl	21f4 <reflection_Field_key_add>
    3904:	ldrb	r3, [fp, #-34]	; 0xffffffde
    3908:	mov	r1, r3
    390c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3910:	bl	2170 <reflection_Field_required_add>
    3914:	b	3934 <export_fields+0x32c>
    3918:	ldr	r3, [fp, #-32]	; 0xffffffe0
    391c:	ldrd	r2, [r3, #80]	; 0x50
    3920:	uxth	r3, r2
    3924:	mov	r1, r3
    3928:	ldr	r0, [fp, #-40]	; 0xffffffd8
    392c:	bl	1f6c <reflection_Field_offset_add>
    3930:	nop	{0}
    3934:	ldrb	r3, [fp, #-35]	; 0xffffffdd
    3938:	mov	r1, r3
    393c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3940:	bl	20ec <reflection_Field_deprecated_add>
    3944:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3948:	bl	22ac <reflection_Field_vec_push_end>
    394c:	ldrb	r2, [fp, #-9]
    3950:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    3954:	orr	r3, r2, r3
    3958:	strb	r3, [fp, #-9]
    395c:	ldr	r3, [fp, #-8]
    3960:	ldr	r3, [r3]
    3964:	str	r3, [fp, #-8]
    3968:	ldr	r3, [fp, #-8]
    396c:	cmp	r3, #0
    3970:	bne	3638 <export_fields+0x30>
    3974:	nop	{0}
    3978:	sub	sp, fp, #4
    397c:	ldr	fp, [sp]
    3980:	add	sp, sp, #4
    3984:	pop	{pc}		; (ldr pc, [sp], #4)

00003988 <export_objects>:
    3988:	str	r4, [sp, #-12]!
    398c:	str	fp, [sp, #4]
    3990:	str	lr, [sp, #8]
    3994:	add	fp, sp, #8
    3998:	sub	sp, sp, #36	; 0x24
    399c:	str	r0, [fp, #-32]	; 0xffffffe0
    39a0:	str	r1, [fp, #-36]	; 0xffffffdc
    39a4:	str	r2, [fp, #-40]	; 0xffffffd8
    39a8:	str	r3, [fp, #-44]	; 0xffffffd4
    39ac:	mov	r3, #0
    39b0:	str	r3, [fp, #-16]
    39b4:	b	3aa8 <export_objects+0x120>
    39b8:	ldr	r3, [fp, #-16]
    39bc:	lsl	r3, r3, #3
    39c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    39c4:	add	r3, r2, r3
    39c8:	ldr	r3, [r3]
    39cc:	str	r3, [fp, #-20]	; 0xffffffec
    39d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    39d4:	bl	13e8 <reflection_Object_start>
    39d8:	ldr	r3, [fp, #-16]
    39dc:	lsl	r3, r3, #3
    39e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    39e4:	add	r3, r2, r3
    39e8:	ldr	r3, [r3, #4]
    39ec:	mov	r1, r3
    39f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    39f4:	bl	235c <reflection_Object_name_create_str>
    39f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
    39fc:	bl	2414 <reflection_Object_fields_start>
    3a00:	ldr	r1, [fp, #-20]	; 0xffffffec
    3a04:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a08:	bl	3608 <export_fields>
    3a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a10:	bl	2448 <reflection_Object_fields_end>
    3a14:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a18:	ldrh	r3, [r3, #8]
    3a1c:	cmp	r3, #1
    3a20:	moveq	r3, #1
    3a24:	movne	r3, #0
    3a28:	uxtb	r3, r3
    3a2c:	str	r3, [fp, #-24]	; 0xffffffe8
    3a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a34:	cmp	r3, #0
    3a38:	beq	3a54 <export_objects+0xcc>
    3a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a40:	ldrd	r2, [r3, #112]	; 0x70
    3a44:	mov	r3, r2
    3a48:	mov	r1, r3
    3a4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a50:	bl	258c <reflection_Object_bytesize_add>
    3a54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a58:	uxtb	r3, r3
    3a5c:	mov	r1, r3
    3a60:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a64:	bl	248c <reflection_Object_is_struct_add>
    3a68:	ldr	r3, [fp, #-20]	; 0xffffffec
    3a6c:	ldrh	r3, [r3, #104]	; 0x68
    3a70:	mov	r1, r3
    3a74:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a78:	bl	2510 <reflection_Object_minalign_add>
    3a7c:	ldr	r3, [fp, #-16]
    3a80:	lsl	r3, r3, #2
    3a84:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3a88:	add	r4, r2, r3
    3a8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3a90:	bl	1420 <reflection_Object_end>
    3a94:	mov	r3, r0
    3a98:	str	r3, [r4]
    3a9c:	ldr	r3, [fp, #-16]
    3aa0:	add	r3, r3, #1
    3aa4:	str	r3, [fp, #-16]
    3aa8:	ldr	r2, [fp, #-16]
    3aac:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3ab0:	cmp	r2, r3
    3ab4:	blt	39b8 <export_objects+0x30>
    3ab8:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3abc:	mov	r2, r3
    3ac0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    3ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3ac8:	bl	2674 <reflection_Schema_objects_create>
    3acc:	nop	{0}
    3ad0:	sub	sp, fp, #8
    3ad4:	ldr	r4, [sp]
    3ad8:	ldr	fp, [sp, #4]
    3adc:	add	sp, sp, #8
    3ae0:	pop	{pc}		; (ldr pc, [sp], #4)

00003ae4 <export_enumval>:
    3ae4:	str	fp, [sp, #-8]!
    3ae8:	str	lr, [sp, #4]
    3aec:	add	fp, sp, #4
    3af0:	sub	sp, sp, #16
    3af4:	str	r0, [fp, #-8]
    3af8:	str	r1, [fp, #-12]
    3afc:	str	r2, [fp, #-16]
    3b00:	ldr	r0, [fp, #-8]
    3b04:	bl	1920 <reflection_EnumVal_vec_push_start>
    3b08:	ldr	r3, [fp, #-12]
    3b0c:	ldr	r3, [r3, #4]
    3b10:	ldr	r1, [r3]
    3b14:	ldr	r3, [fp, #-12]
    3b18:	ldr	r3, [r3, #4]
    3b1c:	ldr	r3, [r3, #4]
    3b20:	mov	r2, r3
    3b24:	ldr	r0, [fp, #-8]
    3b28:	bl	17e4 <reflection_EnumVal_name_create>
    3b2c:	ldr	r3, [fp, #-16]
    3b30:	cmp	r3, #0
    3b34:	beq	3b70 <export_enumval+0x8c>
    3b38:	ldr	r3, [fp, #-12]
    3b3c:	ldrh	r3, [r3, #24]
    3b40:	cmp	r3, #14
    3b44:	bne	3b70 <export_enumval+0x8c>
    3b48:	ldr	r3, [fp, #-12]
    3b4c:	ldr	r3, [r3, #16]
    3b50:	ldr	r3, [r3, #124]	; 0x7c
    3b54:	lsl	r3, r3, #2
    3b58:	ldr	r2, [fp, #-16]
    3b5c:	add	r3, r2, r3
    3b60:	ldr	r3, [r3]
    3b64:	mov	r1, r3
    3b68:	ldr	r0, [fp, #-8]
    3b6c:	bl	18b4 <reflection_EnumVal_object_add>
    3b70:	ldr	r3, [fp, #-12]
    3b74:	ldrd	r2, [r3, #48]	; 0x30
    3b78:	ldr	r0, [fp, #-8]
    3b7c:	bl	1838 <reflection_EnumVal_value_add>
    3b80:	ldr	r0, [fp, #-8]
    3b84:	bl	1954 <reflection_EnumVal_vec_push_end>
    3b88:	nop	{0}
    3b8c:	sub	sp, fp, #4
    3b90:	ldr	fp, [sp]
    3b94:	add	sp, sp, #4
    3b98:	pop	{pc}		; (ldr pc, [sp], #4)

00003b9c <export_enums>:
    3b9c:	str	fp, [sp, #-8]!
    3ba0:	str	lr, [sp, #4]
    3ba4:	add	fp, sp, #4
    3ba8:	sub	sp, sp, #40	; 0x28
    3bac:	str	r0, [fp, #-24]	; 0xffffffe8
    3bb0:	str	r1, [fp, #-28]	; 0xffffffe4
    3bb4:	str	r2, [fp, #-32]	; 0xffffffe0
    3bb8:	str	r3, [fp, #-36]	; 0xffffffdc
    3bbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3bc0:	bl	2734 <reflection_Schema_enums_start>
    3bc4:	mov	r3, #0
    3bc8:	str	r3, [fp, #-8]
    3bcc:	b	3ce8 <export_enums+0x14c>
    3bd0:	ldr	r3, [fp, #-8]
    3bd4:	lsl	r3, r3, #3
    3bd8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3bdc:	add	r3, r2, r3
    3be0:	ldr	r3, [r3]
    3be4:	str	r3, [fp, #-16]
    3be8:	ldr	r3, [fp, #-16]
    3bec:	ldrh	r3, [r3, #8]
    3bf0:	cmp	r3, #4
    3bf4:	moveq	r3, #1
    3bf8:	movne	r3, #0
    3bfc:	uxtb	r3, r3
    3c00:	str	r3, [fp, #-20]	; 0xffffffec
    3c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c08:	bl	1c24 <reflection_Enum_vec_push_start>
    3c0c:	ldr	r3, [fp, #-8]
    3c10:	lsl	r3, r3, #3
    3c14:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3c18:	add	r3, r2, r3
    3c1c:	ldr	r3, [r3, #4]
    3c20:	mov	r1, r3
    3c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c28:	bl	1a04 <reflection_Enum_name_create_str>
    3c2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c30:	bl	1abc <reflection_Enum_values_start>
    3c34:	ldr	r3, [fp, #-16]
    3c38:	ldr	r3, [r3, #20]
    3c3c:	str	r3, [fp, #-12]
    3c40:	b	3c78 <export_enums+0xdc>
    3c44:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c48:	cmp	r3, #0
    3c4c:	beq	3c58 <export_enums+0xbc>
    3c50:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3c54:	b	3c5c <export_enums+0xc0>
    3c58:	mov	r3, #0
    3c5c:	mov	r2, r3
    3c60:	ldr	r1, [fp, #-12]
    3c64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c68:	bl	3ae4 <export_enumval>
    3c6c:	ldr	r3, [fp, #-12]
    3c70:	ldr	r3, [r3]
    3c74:	str	r3, [fp, #-12]
    3c78:	ldr	r3, [fp, #-12]
    3c7c:	cmp	r3, #0
    3c80:	bne	3c44 <export_enums+0xa8>
    3c84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c88:	bl	1af0 <reflection_Enum_values_end>
    3c8c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3c90:	uxtb	r3, r3
    3c94:	mov	r1, r3
    3c98:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3c9c:	bl	1b34 <reflection_Enum_is_union_add>
    3ca0:	ldr	r1, [fp, #-16]
    3ca4:	mov	r0, sp
    3ca8:	add	r3, r1, #48	; 0x30
    3cac:	ldrd	r2, [r3]
    3cb0:	strd	r2, [r0]
    3cb4:	add	r3, r1, #40	; 0x28
    3cb8:	ldm	r3, {r2, r3}
    3cbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cc0:	bl	3330 <export_type>
    3cc4:	mov	r3, r0
    3cc8:	mov	r1, r3
    3ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cd0:	bl	1bb8 <reflection_Enum_underlying_type_add>
    3cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cd8:	bl	1c58 <reflection_Enum_vec_push_end>
    3cdc:	ldr	r3, [fp, #-8]
    3ce0:	add	r3, r3, #1
    3ce4:	str	r3, [fp, #-8]
    3ce8:	ldr	r2, [fp, #-8]
    3cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3cf0:	cmp	r2, r3
    3cf4:	blt	3bd0 <export_enums+0x34>
    3cf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3cfc:	bl	2768 <reflection_Schema_enums_end>
    3d00:	nop	{0}
    3d04:	sub	sp, fp, #4
    3d08:	ldr	fp, [sp]
    3d0c:	add	sp, sp, #4
    3d10:	pop	{pc}		; (ldr pc, [sp], #4)

00003d14 <export_root_type>:
    3d14:	str	fp, [sp, #-8]!
    3d18:	str	lr, [sp, #4]
    3d1c:	add	fp, sp, #4
    3d20:	sub	sp, sp, #24
    3d24:	str	r0, [fp, #-16]
    3d28:	str	r1, [fp, #-20]	; 0xffffffec
    3d2c:	str	r2, [fp, #-24]	; 0xffffffe8
    3d30:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d34:	cmp	r3, #0
    3d38:	beq	3d78 <export_root_type+0x64>
    3d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d40:	ldrh	r3, [r3, #8]
    3d44:	cmp	r3, #0
    3d48:	bne	3d78 <export_root_type+0x64>
    3d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d50:	str	r3, [fp, #-8]
    3d54:	ldr	r3, [fp, #-8]
    3d58:	ldr	r3, [r3, #124]	; 0x7c
    3d5c:	lsl	r3, r3, #2
    3d60:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d64:	add	r3, r2, r3
    3d68:	ldr	r3, [r3]
    3d6c:	mov	r1, r3
    3d70:	ldr	r0, [fp, #-16]
    3d74:	bl	292c <reflection_Schema_root_table_add>
    3d78:	nop	{0}
    3d7c:	sub	sp, fp, #4
    3d80:	ldr	fp, [sp]
    3d84:	add	sp, sp, #4
    3d88:	pop	{pc}		; (ldr pc, [sp], #4)

00003d8c <export_schema>:
    3d8c:	str	fp, [sp, #-8]!
    3d90:	str	lr, [sp, #4]
    3d94:	add	fp, sp, #4
    3d98:	sub	sp, sp, #64	; 0x40
    3d9c:	str	r0, [fp, #-56]	; 0xffffffc8
    3da0:	str	r1, [fp, #-60]	; 0xffffffc4
    3da4:	str	r2, [fp, #-64]	; 0xffffffc0
    3da8:	mov	r3, #0
    3dac:	str	r3, [fp, #-8]
    3db0:	ldr	r3, [fp, #-60]	; 0xffffffc4
    3db4:	ldr	r2, [r3, #184]	; 0xb8
    3db8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3dbc:	ldr	r3, [r3, #60]	; 0x3c
    3dc0:	sub	r0, fp, #52	; 0x34
    3dc4:	ldr	r1, [fp, #-64]	; 0xffffffc0
    3dc8:	bl	3168 <build_catalog>
    3dcc:	mov	r3, r0
    3dd0:	cmp	r3, #0
    3dd4:	beq	3de0 <export_schema+0x54>
    3dd8:	mvn	r3, #0
    3ddc:	b	3f0c <export_schema+0x180>
    3de0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3de4:	cmp	r3, #0
    3de8:	ble	3e24 <export_schema+0x98>
    3dec:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3df0:	lsl	r3, r3, #2
    3df4:	mov	r0, r3
    3df8:	bl	0 <malloc>
    3dfc:	mov	r3, r0
    3e00:	str	r3, [fp, #-8]
    3e04:	ldr	r3, [fp, #-8]
    3e08:	cmp	r3, #0
    3e0c:	bne	3e24 <export_schema+0x98>
    3e10:	sub	r3, fp, #52	; 0x34
    3e14:	mov	r0, r3
    3e18:	bl	30d0 <clear_catalog>
    3e1c:	mvn	r3, #0
    3e20:	b	3f0c <export_schema+0x180>
    3e24:	ldr	r3, [fp, #-60]	; 0xffffffc4
    3e28:	ldr	r3, [r3, #188]	; 0xbc
    3e2c:	cmp	r3, #0
    3e30:	beq	3e40 <export_schema+0xb4>
    3e34:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3e38:	bl	29f0 <reflection_Schema_start_as_root_with_size>
    3e3c:	b	3e48 <export_schema+0xbc>
    3e40:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3e44:	bl	2998 <reflection_Schema_start_as_root>
    3e48:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e4c:	ldrh	r3, [r3, #16]
    3e50:	cmp	r3, #2
    3e54:	bne	3e74 <export_schema+0xe8>
    3e58:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e5c:	ldr	r1, [r3, #8]
    3e60:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e64:	ldr	r3, [r3, #12]
    3e68:	mov	r2, r3
    3e6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3e70:	bl	2818 <reflection_Schema_file_ident_create>
    3e74:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e78:	ldrh	r3, [r3, #32]
    3e7c:	cmp	r3, #2
    3e80:	bne	3ea0 <export_schema+0x114>
    3e84:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e88:	ldr	r1, [r3, #24]
    3e8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3e90:	ldr	r3, [r3, #28]
    3e94:	mov	r2, r3
    3e98:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3e9c:	bl	28d8 <reflection_Schema_file_ext_create>
    3ea0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3ea4:	ldr	r2, [fp, #-48]	; 0xffffffd0
    3ea8:	ldr	r3, [fp, #-8]
    3eac:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3eb0:	bl	3988 <export_objects>
    3eb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    3eb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    3ebc:	ldr	r3, [fp, #-8]
    3ec0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3ec4:	bl	3b9c <export_enums>
    3ec8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    3ecc:	ldr	r3, [r3, #52]	; 0x34
    3ed0:	ldr	r2, [fp, #-8]
    3ed4:	mov	r1, r3
    3ed8:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3edc:	bl	3d14 <export_root_type>
    3ee0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3ee4:	bl	2a48 <reflection_Schema_end_as_root>
    3ee8:	sub	r3, fp, #52	; 0x34
    3eec:	mov	r0, r3
    3ef0:	bl	30d0 <clear_catalog>
    3ef4:	ldr	r3, [fp, #-8]
    3ef8:	cmp	r3, #0
    3efc:	beq	3f08 <export_schema+0x17c>
    3f00:	ldr	r0, [fp, #-8]
    3f04:	bl	0 <free>
    3f08:	mov	r3, #0
    3f0c:	mov	r0, r3
    3f10:	sub	sp, fp, #4
    3f14:	ldr	fp, [sp]
    3f18:	add	sp, sp, #4
    3f1c:	pop	{pc}		; (ldr pc, [sp], #4)

00003f20 <sort_fields>:
    3f20:	str	fp, [sp, #-8]!
    3f24:	str	lr, [sp, #4]
    3f28:	add	fp, sp, #4
    3f2c:	sub	sp, sp, #32
    3f30:	str	r0, [fp, #-32]	; 0xffffffe0
    3f34:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3f38:	bl	c30 <reflection_Schema_as_root>
    3f3c:	str	r0, [fp, #-12]
    3f40:	ldr	r0, [fp, #-12]
    3f44:	bl	ca4 <reflection_Schema_objects>
    3f48:	str	r0, [fp, #-16]
    3f4c:	mov	r3, #0
    3f50:	str	r3, [fp, #-8]
    3f54:	b	3f90 <sort_fields+0x70>
    3f58:	ldr	r1, [fp, #-8]
    3f5c:	ldr	r0, [fp, #-16]
    3f60:	bl	a84 <reflection_Object_vec_at>
    3f64:	str	r0, [fp, #-20]	; 0xffffffec
    3f68:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f6c:	bl	b10 <reflection_Object_fields>
    3f70:	str	r0, [fp, #-24]	; 0xffffffe8
    3f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f78:	str	r3, [fp, #-28]	; 0xffffffe4
    3f7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3f80:	bl	a04 <reflection_Field_vec_sort_by_name>
    3f84:	ldr	r3, [fp, #-8]
    3f88:	add	r3, r3, #1
    3f8c:	str	r3, [fp, #-8]
    3f90:	ldr	r0, [fp, #-16]
    3f94:	bl	a34 <reflection_Object_vec_len>
    3f98:	mov	r2, r0
    3f9c:	ldr	r3, [fp, #-8]
    3fa0:	cmp	r3, r2
    3fa4:	bcc	3f58 <sort_fields+0x38>
    3fa8:	nop	{0}
    3fac:	sub	sp, fp, #4
    3fb0:	ldr	fp, [sp]
    3fb4:	add	sp, sp, #4
    3fb8:	pop	{pc}		; (ldr pc, [sp], #4)

00003fbc <open_file>:
    3fbc:	str	fp, [sp, #-8]!
    3fc0:	str	lr, [sp, #4]
    3fc4:	add	fp, sp, #4
    3fc8:	sub	sp, sp, #48	; 0x30
    3fcc:	str	r0, [fp, #-40]	; 0xffffffd8
    3fd0:	str	r1, [fp, #-44]	; 0xffffffd4
    3fd4:	mov	r3, #0
    3fd8:	str	r3, [fp, #-8]
    3fdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3fe0:	ldr	r3, [r3, #216]	; 0xd8
    3fe4:	cmp	r3, #0
    3fe8:	beq	3ff8 <open_file+0x3c>
    3fec:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3ff0:	ldr	r3, [r3, #216]	; 0xd8
    3ff4:	b	4000 <open_file+0x44>
    3ff8:	movw	r3, #0
    3ffc:	movt	r3, #0
    4000:	str	r3, [fp, #-12]
    4004:	ldr	r0, [fp, #-12]
    4008:	bl	0 <strlen>
    400c:	str	r0, [fp, #-16]
    4010:	ldr	r3, [fp, #-44]	; 0xffffffd4
    4014:	ldr	r3, [r3, #160]	; 0xa0
    4018:	str	r3, [fp, #-20]	; 0xffffffec
    401c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4020:	bl	0 <strlen>
    4024:	str	r0, [fp, #-24]	; 0xffffffe8
    4028:	movw	r3, #0
    402c:	movt	r3, #0
    4030:	str	r3, [fp, #-28]	; 0xffffffe4
    4034:	ldr	r3, [fp, #-40]	; 0xffffffd8
    4038:	ldr	r3, [r3, #108]	; 0x6c
    403c:	cmp	r3, #0
    4040:	beq	4054 <open_file+0x98>
    4044:	movw	r3, #0
    4048:	movt	r3, #0
    404c:	ldr	r3, [r3]
    4050:	b	40d0 <open_file+0x114>
    4054:	mov	r3, #1
    4058:	str	r3, [sp, #4]
    405c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4060:	str	r3, [sp]
    4064:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4068:	ldr	r2, [fp, #-20]	; 0xffffffec
    406c:	ldr	r1, [fp, #-16]
    4070:	ldr	r0, [fp, #-12]
    4074:	bl	0 <__flatcc_fb_create_join_path_n>
    4078:	str	r0, [fp, #-32]	; 0xffffffe0
    407c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4080:	bl	2b68 <checkmem>
    4084:	movw	r1, #0
    4088:	movt	r1, #0
    408c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4090:	bl	0 <fopen>
    4094:	str	r0, [fp, #-8]
    4098:	ldr	r3, [fp, #-8]
    409c:	cmp	r3, #0
    40a0:	bne	40c4 <open_file+0x108>
    40a4:	movw	r3, #0
    40a8:	movt	r3, #0
    40ac:	ldr	r3, [r3]
    40b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    40b4:	movw	r1, #0
    40b8:	movt	r1, #0
    40bc:	mov	r0, r3
    40c0:	bl	0 <fprintf>
    40c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    40c8:	bl	0 <free>
    40cc:	ldr	r3, [fp, #-8]
    40d0:	mov	r0, r3
    40d4:	sub	sp, fp, #4
    40d8:	ldr	fp, [sp]
    40dc:	add	sp, sp, #4
    40e0:	pop	{pc}		; (ldr pc, [sp], #4)

000040e4 <close_file>:
    40e4:	str	fp, [sp, #-8]!
    40e8:	str	lr, [sp, #4]
    40ec:	add	fp, sp, #4
    40f0:	sub	sp, sp, #8
    40f4:	str	r0, [fp, #-8]
    40f8:	ldr	r3, [fp, #-8]
    40fc:	cmp	r3, #0
    4100:	beq	4124 <close_file+0x40>
    4104:	movw	r3, #0
    4108:	movt	r3, #0
    410c:	ldr	r3, [r3]
    4110:	ldr	r2, [fp, #-8]
    4114:	cmp	r2, r3
    4118:	beq	4124 <close_file+0x40>
    411c:	ldr	r0, [fp, #-8]
    4120:	bl	0 <fclose>
    4124:	nop	{0}
    4128:	sub	sp, fp, #4
    412c:	ldr	fp, [sp]
    4130:	add	sp, sp, #4
    4134:	pop	{pc}		; (ldr pc, [sp], #4)

00004138 <__flatcc_fb_codegen_bfbs_to_buffer>:
    4138:	str	fp, [sp, #-8]!
    413c:	str	lr, [sp, #4]
    4140:	add	fp, sp, #4
    4144:	sub	sp, sp, #256	; 0x100
    4148:	str	r0, [fp, #-248]	; 0xffffff08
    414c:	str	r1, [fp, #-252]	; 0xffffff04
    4150:	str	r2, [fp, #-256]	; 0xffffff00
    4154:	str	r3, [fp, #-260]	; 0xfffffefc
    4158:	sub	r3, fp, #240	; 0xf0
    415c:	str	r3, [fp, #-8]
    4160:	ldr	r0, [fp, #-8]
    4164:	bl	0 <flatcc_builder_init>
    4168:	ldr	r2, [fp, #-252]	; 0xffffff04
    416c:	ldr	r1, [fp, #-248]	; 0xffffff08
    4170:	ldr	r0, [fp, #-8]
    4174:	bl	3d8c <export_schema>
    4178:	ldr	r3, [fp, #-260]	; 0xfffffefc
    417c:	ldr	r3, [r3]
    4180:	mov	r2, r3
    4184:	ldr	r1, [fp, #-256]	; 0xffffff00
    4188:	ldr	r0, [fp, #-8]
    418c:	bl	0 <flatcc_builder_copy_buffer>
    4190:	mov	r3, r0
    4194:	cmp	r3, #0
    4198:	beq	41a8 <__flatcc_fb_codegen_bfbs_to_buffer+0x70>
    419c:	ldr	r0, [fp, #-256]	; 0xffffff00
    41a0:	bl	3f20 <sort_fields>
    41a4:	b	41ac <__flatcc_fb_codegen_bfbs_to_buffer+0x74>
    41a8:	nop	{0}
    41ac:	ldr	r0, [fp, #-8]
    41b0:	bl	0 <flatcc_builder_get_buffer_size>
    41b4:	mov	r2, r0
    41b8:	ldr	r3, [fp, #-260]	; 0xfffffefc
    41bc:	str	r2, [r3]
    41c0:	ldr	r0, [fp, #-8]
    41c4:	bl	0 <flatcc_builder_clear>
    41c8:	ldr	r3, [fp, #-256]	; 0xffffff00
    41cc:	mov	r0, r3
    41d0:	sub	sp, fp, #4
    41d4:	ldr	fp, [sp]
    41d8:	add	sp, sp, #4
    41dc:	pop	{pc}		; (ldr pc, [sp], #4)

000041e0 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
    41e0:	str	fp, [sp, #-8]!
    41e4:	str	lr, [sp, #4]
    41e8:	add	fp, sp, #4
    41ec:	sub	sp, sp, #256	; 0x100
    41f0:	str	r0, [fp, #-248]	; 0xffffff08
    41f4:	str	r1, [fp, #-252]	; 0xffffff04
    41f8:	str	r2, [fp, #-256]	; 0xffffff00
    41fc:	mov	r3, #0
    4200:	str	r3, [fp, #-8]
    4204:	sub	r3, fp, #244	; 0xf4
    4208:	str	r3, [fp, #-12]
    420c:	ldr	r0, [fp, #-12]
    4210:	bl	0 <flatcc_builder_init>
    4214:	ldr	r2, [fp, #-252]	; 0xffffff04
    4218:	ldr	r1, [fp, #-248]	; 0xffffff08
    421c:	ldr	r0, [fp, #-12]
    4220:	bl	3d8c <export_schema>
    4224:	mov	r3, r0
    4228:	cmp	r3, #0
    422c:	bne	4258 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x78>
    4230:	ldr	r1, [fp, #-256]	; 0xffffff00
    4234:	ldr	r0, [fp, #-12]
    4238:	bl	0 <flatcc_builder_finalize_buffer>
    423c:	str	r0, [fp, #-8]
    4240:	ldr	r3, [fp, #-8]
    4244:	cmp	r3, #0
    4248:	beq	4260 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x80>
    424c:	ldr	r0, [fp, #-8]
    4250:	bl	3f20 <sort_fields>
    4254:	b	4264 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
    4258:	nop	{0}
    425c:	b	4264 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
    4260:	nop	{0}
    4264:	ldr	r0, [fp, #-12]
    4268:	bl	0 <flatcc_builder_clear>
    426c:	ldr	r3, [fp, #-8]
    4270:	mov	r0, r3
    4274:	sub	sp, fp, #4
    4278:	ldr	fp, [sp]
    427c:	add	sp, sp, #4
    4280:	pop	{pc}		; (ldr pc, [sp], #4)

00004284 <__flatcc_fb_codegen_bfbs_to_file>:
    4284:	str	fp, [sp, #-8]!
    4288:	str	lr, [sp, #4]
    428c:	add	fp, sp, #4
    4290:	sub	sp, sp, #24
    4294:	str	r0, [fp, #-24]	; 0xffffffe8
    4298:	str	r1, [fp, #-28]	; 0xffffffe4
    429c:	mvn	r3, #0
    42a0:	str	r3, [fp, #-8]
    42a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    42a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    42ac:	bl	3fbc <open_file>
    42b0:	str	r0, [fp, #-12]
    42b4:	ldr	r3, [fp, #-12]
    42b8:	cmp	r3, #0
    42bc:	bne	42c8 <__flatcc_fb_codegen_bfbs_to_file+0x44>
    42c0:	mvn	r3, #0
    42c4:	b	436c <__flatcc_fb_codegen_bfbs_to_file+0xe8>
    42c8:	sub	r3, fp, #20
    42cc:	mov	r2, r3
    42d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    42d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    42d8:	bl	41e0 <__flatcc_fb_codegen_bfbs_alloc_buffer>
    42dc:	str	r0, [fp, #-16]
    42e0:	ldr	r3, [fp, #-16]
    42e4:	cmp	r3, #0
    42e8:	bne	42fc <__flatcc_fb_codegen_bfbs_to_file+0x78>
    42ec:	movw	r0, #0
    42f0:	movt	r0, #0
    42f4:	bl	0 <puts>
    42f8:	b	434c <__flatcc_fb_codegen_bfbs_to_file+0xc8>
    42fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    4300:	ldr	r3, [fp, #-12]
    4304:	mov	r1, #1
    4308:	ldr	r0, [fp, #-16]
    430c:	bl	0 <fwrite>
    4310:	mov	r2, r0
    4314:	ldr	r3, [fp, #-20]	; 0xffffffec
    4318:	cmp	r2, r3
    431c:	beq	4344 <__flatcc_fb_codegen_bfbs_to_file+0xc0>
    4320:	movw	r3, #0
    4324:	movt	r3, #0
    4328:	ldr	r3, [r3]
    432c:	mov	r2, #38	; 0x26
    4330:	mov	r1, #1
    4334:	movw	r0, #0
    4338:	movt	r0, #0
    433c:	bl	0 <fwrite>
    4340:	b	434c <__flatcc_fb_codegen_bfbs_to_file+0xc8>
    4344:	mov	r3, #0
    4348:	str	r3, [fp, #-8]
    434c:	ldr	r3, [fp, #-16]
    4350:	cmp	r3, #0
    4354:	beq	4360 <__flatcc_fb_codegen_bfbs_to_file+0xdc>
    4358:	ldr	r0, [fp, #-16]
    435c:	bl	0 <free>
    4360:	ldr	r0, [fp, #-12]
    4364:	bl	40e4 <close_file>
    4368:	ldr	r3, [fp, #-8]
    436c:	mov	r0, r3
    4370:	sub	sp, fp, #4
    4374:	ldr	fp, [sp]
    4378:	add	sp, sp, #4
    437c:	pop	{pc}		; (ldr pc, [sp], #4)
