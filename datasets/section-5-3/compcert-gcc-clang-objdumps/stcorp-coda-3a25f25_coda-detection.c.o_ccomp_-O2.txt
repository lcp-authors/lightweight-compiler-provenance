
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_detection_rule_entry_delete>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #16
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	str	r4, [sp, #8]
  14:	mov	r4, r0
  18:	ldr	r0, [r4]
  1c:	cmp	r0, #0
  20:	beq	28 <coda_detection_rule_entry_delete+0x28>
  24:	bl	0 <free>
  28:	ldr	r0, [r4, #4]
  2c:	cmp	r0, #0
  30:	beq	38 <coda_detection_rule_entry_delete+0x38>
  34:	bl	0 <coda_expression_delete>
  38:	mov	r0, r4
  3c:	ldr	r4, [sp, #8]
  40:	ldr	lr, [sp, #4]
  44:	add	sp, sp, #16
  48:	b	0 <free>

0000004c <coda_detection_rule_entry_new>:
  4c:	mov	ip, sp
  50:	sub	sp, sp, #32
  54:	str	ip, [sp, #4]
  58:	str	lr, [sp, #8]
  5c:	str	r4, [sp, #16]
  60:	str	r5, [sp, #20]
  64:	mov	r5, r0
  68:	cmp	r5, #0
  6c:	beq	dc <coda_detection_rule_entry_new+0x90>
  70:	add	r1, sp, #28
  74:	mov	r0, r5
  78:	bl	0 <coda_expression_from_string>
  7c:	cmp	r0, #0
  80:	beq	8c <coda_detection_rule_entry_new+0x40>
  84:	mov	r0, #0
  88:	b	168 <coda_detection_rule_entry_new+0x11c>
  8c:	ldr	r0, [sp, #28]
  90:	add	r1, sp, #24
  94:	bl	0 <coda_expression_get_type>
  98:	cmp	r0, #0
  9c:	beq	b0 <coda_detection_rule_entry_new+0x64>
  a0:	ldr	r0, [sp, #28]
  a4:	bl	0 <coda_expression_delete>
  a8:	mov	r0, #0
  ac:	b	168 <coda_detection_rule_entry_new+0x11c>
  b0:	ldr	r0, [sp, #28]
  b4:	bl	0 <coda_expression_delete>
  b8:	ldr	r0, [sp, #24]
  bc:	cmp	r0, #4
  c0:	beq	dc <coda_detection_rule_entry_new+0x90>
  c4:	movw	r0, #65136	; 0xfe70
  c8:	movt	r0, #65535	; 0xffff
  cc:	ldr	r1, [pc, #172]	; 180 <coda_detection_rule_entry_new+0x134>
  d0:	bl	0 <coda_set_error>
  d4:	mov	r0, #0
  d8:	b	168 <coda_detection_rule_entry_new+0x11c>
  dc:	mov	r0, #8
  e0:	bl	0 <malloc>
  e4:	mov	r4, r0
  e8:	cmp	r4, #0
  ec:	bne	114 <coda_detection_rule_entry_new+0xc8>
  f0:	mvn	r0, #0
  f4:	ldr	r1, [pc, #128]	; 17c <coda_detection_rule_entry_new+0x130>
  f8:	mov	r2, #8
  fc:	ldr	r3, [pc, #128]	; 184 <coda_detection_rule_entry_new+0x138>
 100:	mov	ip, #82	; 0x52
 104:	str	ip, [sp]
 108:	bl	0 <coda_set_error>
 10c:	mov	r0, #0
 110:	b	168 <coda_detection_rule_entry_new+0x11c>
 114:	mov	r1, #0
 118:	str	r1, [r4]
 11c:	mov	r2, #0
 120:	str	r2, [r4, #4]
 124:	cmp	r5, #0
 128:	beq	164 <coda_detection_rule_entry_new+0x118>
 12c:	mov	r0, r5
 130:	bl	0 <strdup>
 134:	str	r0, [r4]
 138:	cmp	r0, #0
 13c:	bne	164 <coda_detection_rule_entry_new+0x118>
 140:	mvn	r0, #0
 144:	ldr	r1, [pc, #60]	; 188 <coda_detection_rule_entry_new+0x13c>
 148:	ldr	r2, [pc, #52]	; 184 <coda_detection_rule_entry_new+0x138>
 14c:	mov	r3, #94	; 0x5e
 150:	bl	0 <coda_set_error>
 154:	mov	r0, r4
 158:	bl	0 <free>
 15c:	mov	r0, #0
 160:	b	168 <coda_detection_rule_entry_new+0x11c>
 164:	mov	r0, r4
 168:	ldr	r4, [sp, #16]
 16c:	ldr	r5, [sp, #20]
 170:	ldr	lr, [sp, #8]
 174:	add	sp, sp, #32
 178:	bx	lr
 17c:	.word	0x0000018d
 180:	.word	0x0000006f
 184:	.word	0x000000d2
 188:	.word	0x00000130

0000018c <coda_detection_rule_entry_set_expression>:
 18c:	mov	ip, sp
 190:	sub	sp, sp, #8
 194:	str	ip, [sp]
 198:	str	lr, [sp, #4]
 19c:	ldr	r2, [r0, #4]
 1a0:	cmp	r2, #0
 1a4:	beq	1c0 <coda_detection_rule_entry_set_expression+0x34>
 1a8:	movw	r0, #65136	; 0xfe70
 1ac:	movt	r0, #65535	; 0xffff
 1b0:	ldr	r1, [pc, #28]	; 1d4 <coda_detection_rule_entry_set_expression+0x48>
 1b4:	bl	0 <coda_set_error>
 1b8:	mvn	r0, #0
 1bc:	b	1c8 <coda_detection_rule_entry_set_expression+0x3c>
 1c0:	str	r1, [r0, #4]
 1c4:	mov	r0, #0
 1c8:	ldr	lr, [sp, #4]
 1cc:	add	sp, sp, #8
 1d0:	bx	lr
 1d4:	.word	0x00000163

000001d8 <coda_detection_rule_delete>:
 1d8:	mov	ip, sp
 1dc:	sub	sp, sp, #16
 1e0:	str	ip, [sp]
 1e4:	str	lr, [sp, #4]
 1e8:	str	r4, [sp, #8]
 1ec:	str	r5, [sp, #12]
 1f0:	mov	r4, r0
 1f4:	ldr	r2, [r4, #4]
 1f8:	cmp	r2, #0
 1fc:	beq	234 <coda_detection_rule_delete+0x5c>
 200:	mov	r5, #0
 204:	ldr	r1, [r4]
 208:	cmp	r5, r1
 20c:	bge	22c <coda_detection_rule_delete+0x54>
 210:	ldr	r0, [r4, #4]
 214:	ldr	r0, [r0, r5, lsl #2]
 218:	cmp	r0, #0
 21c:	beq	224 <coda_detection_rule_delete+0x4c>
 220:	bl	0 <coda_detection_rule_entry_delete>
 224:	add	r5, r5, #1
 228:	b	204 <coda_detection_rule_delete+0x2c>
 22c:	ldr	r0, [r4, #4]
 230:	bl	0 <free>
 234:	mov	r0, r4
 238:	ldr	r4, [sp, #8]
 23c:	ldr	r5, [sp, #12]
 240:	ldr	lr, [sp, #4]
 244:	add	sp, sp, #16
 248:	b	0 <free>

0000024c <coda_detection_rule_new>:
 24c:	mov	ip, sp
 250:	sub	sp, sp, #24
 254:	str	ip, [sp, #4]
 258:	str	lr, [sp, #8]
 25c:	str	r4, [sp, #16]
 260:	mov	r0, #12
 264:	bl	0 <malloc>
 268:	cmp	r0, #0
 26c:	bne	294 <coda_detection_rule_new+0x48>
 270:	mvn	r0, #0
 274:	ldr	r1, [pc, #64]	; 2bc <coda_detection_rule_new+0x70>
 278:	mov	r2, #12
 27c:	ldr	r3, [pc, #60]	; 2c0 <coda_detection_rule_new+0x74>
 280:	mov	r4, #141	; 0x8d
 284:	str	r4, [sp]
 288:	bl	0 <coda_set_error>
 28c:	mov	r0, #0
 290:	b	2ac <coda_detection_rule_new+0x60>
 294:	mov	r2, #0
 298:	str	r2, [r0]
 29c:	mov	r1, #0
 2a0:	str	r1, [r0, #4]
 2a4:	mov	r3, #0
 2a8:	str	r3, [r0, #8]
 2ac:	ldr	r4, [sp, #16]
 2b0:	ldr	lr, [sp, #8]
 2b4:	add	sp, sp, #24
 2b8:	bx	lr
 2bc:	.word	0x0000018d
 2c0:	.word	0x000000d2

000002c4 <coda_detection_rule_add_entry>:
 2c4:	mov	ip, sp
 2c8:	sub	sp, sp, #24
 2cc:	str	ip, [sp, #4]
 2d0:	str	lr, [sp, #8]
 2d4:	str	r4, [sp, #16]
 2d8:	str	r5, [sp, #20]
 2dc:	mov	r4, r1
 2e0:	mov	r5, r0
 2e4:	ldr	ip, [r4]
 2e8:	cmp	ip, #0
 2ec:	bne	314 <coda_detection_rule_add_entry+0x50>
 2f0:	ldr	r0, [r4, #4]
 2f4:	cmp	r0, #0
 2f8:	bne	314 <coda_detection_rule_add_entry+0x50>
 2fc:	movw	r0, #65136	; 0xfe70
 300:	movt	r0, #65535	; 0xffff
 304:	ldr	r1, [pc, #148]	; 3a0 <coda_detection_rule_add_entry+0xdc>
 308:	bl	0 <coda_set_error>
 30c:	mvn	r0, #0
 310:	b	384 <coda_detection_rule_add_entry+0xc0>
 314:	ldr	r0, [r5, #4]
 318:	ldr	ip, [r5]
 31c:	lsl	r3, ip, #2
 320:	add	r1, r3, #4
 324:	bl	0 <realloc>
 328:	cmp	r0, #0
 32c:	bne	35c <coda_detection_rule_add_entry+0x98>
 330:	mvn	r0, #0
 334:	ldr	r1, [pc, #92]	; 398 <coda_detection_rule_add_entry+0xd4>
 338:	ldr	r2, [r5]
 33c:	lsl	r2, r2, #2
 340:	add	r2, r2, #4
 344:	ldr	r3, [pc, #80]	; 39c <coda_detection_rule_add_entry+0xd8>
 348:	mov	ip, #165	; 0xa5
 34c:	str	ip, [sp]
 350:	bl	0 <coda_set_error>
 354:	mvn	r0, #0
 358:	b	384 <coda_detection_rule_add_entry+0xc0>
 35c:	str	r0, [r5, #4]
 360:	ldr	r2, [r5]
 364:	add	r0, r2, #1
 368:	str	r0, [r5]
 36c:	ldr	r2, [r5, #4]
 370:	lsl	r3, r0, #2
 374:	add	r1, r2, r3
 378:	sub	lr, r1, #4096	; 0x1000
 37c:	str	r4, [lr, #4092]	; 0xffc
 380:	mov	r0, #0
 384:	ldr	r4, [sp, #16]
 388:	ldr	r5, [sp, #20]
 38c:	ldr	lr, [sp, #8]
 390:	add	sp, sp, #24
 394:	bx	lr
 398:	.word	0x0000018d
 39c:	.word	0x000000d2
 3a0:	.word	0x00000037

000003a4 <delete_detection_node>:
 3a4:	mov	ip, sp
 3a8:	sub	sp, sp, #16
 3ac:	str	ip, [sp]
 3b0:	str	lr, [sp, #4]
 3b4:	str	r4, [sp, #8]
 3b8:	str	r5, [sp, #12]
 3bc:	mov	r4, r0
 3c0:	ldr	r0, [r4]
 3c4:	cmp	r0, #0
 3c8:	beq	3d0 <delete_detection_node+0x2c>
 3cc:	bl	0 <free>
 3d0:	ldr	r1, [r4, #16]
 3d4:	cmp	r1, #0
 3d8:	beq	408 <delete_detection_node+0x64>
 3dc:	mov	r5, #0
 3e0:	ldr	r2, [r4, #12]
 3e4:	cmp	r5, r2
 3e8:	bge	400 <delete_detection_node+0x5c>
 3ec:	ldr	r0, [r4, #16]
 3f0:	ldr	r0, [r0, r5, lsl #2]
 3f4:	bl	3a4 <delete_detection_node>
 3f8:	add	r5, r5, #1
 3fc:	b	3e0 <delete_detection_node+0x3c>
 400:	ldr	r0, [r4, #16]
 404:	bl	0 <free>
 408:	mov	r0, r4
 40c:	ldr	r4, [sp, #8]
 410:	ldr	r5, [sp, #12]
 414:	ldr	lr, [sp, #4]
 418:	add	sp, sp, #16
 41c:	b	0 <free>

00000420 <detection_node_new>:
 420:	mov	ip, sp
 424:	sub	sp, sp, #24
 428:	str	ip, [sp, #4]
 42c:	str	lr, [sp, #8]
 430:	str	r4, [sp, #16]
 434:	mov	r0, #20
 438:	bl	0 <malloc>
 43c:	cmp	r0, #0
 440:	bne	468 <detection_node_new+0x48>
 444:	mvn	r0, #0
 448:	ldr	r1, [pc, #80]	; 4a0 <detection_node_new+0x80>
 44c:	mov	r2, #20
 450:	ldr	r3, [pc, #76]	; 4a4 <detection_node_new+0x84>
 454:	mov	r4, #202	; 0xca
 458:	str	r4, [sp]
 45c:	bl	0 <coda_set_error>
 460:	mov	r0, #0
 464:	b	490 <detection_node_new+0x70>
 468:	mov	r1, #0
 46c:	str	r1, [r0]
 470:	mov	r2, #0
 474:	str	r2, [r0, #4]
 478:	mov	r3, #0
 47c:	str	r3, [r0, #8]
 480:	mov	r1, #0
 484:	str	r1, [r0, #12]
 488:	mov	r1, #0
 48c:	str	r1, [r0, #16]
 490:	ldr	r4, [sp, #16]
 494:	ldr	lr, [sp, #8]
 498:	add	sp, sp, #24
 49c:	bx	lr
 4a0:	.word	0x0000018d
 4a4:	.word	0x000000d2

000004a8 <detection_node_add_node>:
 4a8:	mov	ip, sp
 4ac:	sub	sp, sp, #24
 4b0:	str	ip, [sp, #4]
 4b4:	str	lr, [sp, #8]
 4b8:	str	r4, [sp, #16]
 4bc:	str	r5, [sp, #20]
 4c0:	mov	r5, r1
 4c4:	mov	r4, r0
 4c8:	ldr	ip, [r4, #12]
 4cc:	asr	lr, ip, #31
 4d0:	add	lr, ip, lr, lsr #28
 4d4:	asr	r1, lr, #4
 4d8:	lsl	r1, r1, #4
 4dc:	sub	r0, ip, r1
 4e0:	cmp	r0, #0
 4e4:	bne	530 <detection_node_add_node+0x88>
 4e8:	ldr	r0, [r4, #16]
 4ec:	lsl	r1, ip, #2
 4f0:	add	r1, r1, #64	; 0x40
 4f4:	bl	0 <realloc>
 4f8:	cmp	r0, #0
 4fc:	bne	52c <detection_node_add_node+0x84>
 500:	mvn	r0, #0
 504:	ldr	r1, [pc, #172]	; 5b8 <detection_node_add_node+0x110>
 508:	ldr	r2, [r4, #12]
 50c:	lsl	r2, r2, #2
 510:	add	r2, r2, #64	; 0x40
 514:	ldr	r3, [pc, #160]	; 5bc <detection_node_add_node+0x114>
 518:	mov	ip, #226	; 0xe2
 51c:	str	ip, [sp]
 520:	bl	0 <coda_set_error>
 524:	mvn	r0, #0
 528:	b	5a4 <detection_node_add_node+0xfc>
 52c:	str	r0, [r4, #16]
 530:	ldr	r0, [r4, #16]
 534:	ldr	r2, [r4, #12]
 538:	str	r5, [r0, r2, lsl #2]
 53c:	ldr	r2, [r4, #12]
 540:	add	r0, r2, #1
 544:	str	r0, [r4, #12]
 548:	sub	ip, r0, #1
 54c:	cmp	ip, #0
 550:	ble	5a0 <detection_node_add_node+0xf8>
 554:	ldr	r3, [r4, #16]
 558:	ldr	r1, [r3, ip, lsl #2]
 55c:	ldr	r0, [r1]
 560:	cmp	r0, #0
 564:	beq	5a0 <detection_node_add_node+0xf8>
 568:	lsl	r2, ip, #2
 56c:	add	r0, r3, r2
 570:	sub	lr, r0, #4096	; 0x1000
 574:	ldr	r0, [lr, #4092]	; 0xffc
 578:	ldr	r5, [r0, #4]
 57c:	cmp	r5, #0
 580:	beq	5a0 <detection_node_add_node+0xf8>
 584:	str	r0, [r3, ip, lsl #2]
 588:	ldr	r3, [r4, #16]
 58c:	add	r3, r3, r2
 590:	sub	lr, r3, #4096	; 0x1000
 594:	str	r1, [lr, #4092]	; 0xffc
 598:	sub	ip, ip, #1
 59c:	b	54c <detection_node_add_node+0xa4>
 5a0:	mov	r0, #0
 5a4:	ldr	r4, [sp, #16]
 5a8:	ldr	r5, [sp, #20]
 5ac:	ldr	lr, [sp, #8]
 5b0:	add	sp, sp, #24
 5b4:	bx	lr
 5b8:	.word	0x0000018d
 5bc:	.word	0x000000d2

000005c0 <get_node_for_entry>:
 5c0:	mov	ip, sp
 5c4:	sub	sp, sp, #56	; 0x38
 5c8:	str	ip, [sp, #4]
 5cc:	str	lr, [sp, #8]
 5d0:	str	r4, [sp, #16]
 5d4:	str	r5, [sp, #20]
 5d8:	str	r6, [sp, #24]
 5dc:	str	r7, [sp, #28]
 5e0:	str	r8, [sp, #32]
 5e4:	str	r9, [sp, #36]	; 0x24
 5e8:	str	sl, [sp, #40]	; 0x28
 5ec:	mov	r5, r2
 5f0:	mov	r9, r0
 5f4:	cmp	r1, #0
 5f8:	beq	610 <get_node_for_entry+0x50>
 5fc:	ldrb	r0, [r1]
 600:	cmp	r0, #0
 604:	moveq	ip, #1
 608:	movne	ip, #0
 60c:	b	614 <get_node_for_entry+0x54>
 610:	mov	ip, #0
 614:	mov	r2, #0
 618:	cmp	ip, #0
 61c:	movne	sl, r2
 620:	moveq	sl, r1
 624:	mov	r8, #0
 628:	ldr	r1, [r9, #12]
 62c:	cmp	r8, r1
 630:	bge	928 <get_node_for_entry+0x368>
 634:	cmp	sl, #0
 638:	beq	8ec <get_node_for_entry+0x32c>
 63c:	ldr	r1, [r9, #16]
 640:	ldr	r3, [r1, r8, lsl #2]
 644:	ldr	r1, [r3]
 648:	cmp	r1, #0
 64c:	beq	920 <get_node_for_entry+0x360>
 650:	mov	r2, #0
 654:	str	r2, [sp, #48]	; 0x30
 658:	ldr	r0, [sp, #48]	; 0x30
 65c:	ldrb	r2, [r1, r0]
 660:	cmp	r2, #0
 664:	beq	680 <get_node_for_entry+0xc0>
 668:	ldrb	ip, [sl, r0]
 66c:	cmp	r2, ip
 670:	bne	680 <get_node_for_entry+0xc0>
 674:	add	r0, r0, #1
 678:	str	r0, [sp, #48]	; 0x30
 67c:	b	658 <get_node_for_entry+0x98>
 680:	ldr	r0, [sp, #48]	; 0x30
 684:	ldrb	r2, [r1, r0]
 688:	ldrb	r3, [sl, r0]
 68c:	cmp	r2, r3
 690:	bne	69c <get_node_for_entry+0xdc>
 694:	mov	r1, #0
 698:	b	6a0 <get_node_for_entry+0xe0>
 69c:	mov	r1, #1
 6a0:	cmp	r1, #0
 6a4:	bne	6d8 <get_node_for_entry+0x118>
 6a8:	ldr	r3, [r5, #4]
 6ac:	cmp	r3, #0
 6b0:	beq	6cc <get_node_for_entry+0x10c>
 6b4:	ldr	ip, [r9, #16]
 6b8:	ldr	r0, [ip, r8, lsl #2]
 6bc:	mov	r1, #0
 6c0:	mov	r2, r5
 6c4:	bl	5c0 <get_node_for_entry>
 6c8:	b	9d0 <get_node_for_entry+0x410>
 6cc:	ldr	ip, [r9, #16]
 6d0:	ldr	r0, [ip, r8, lsl #2]
 6d4:	b	9d0 <get_node_for_entry+0x410>
 6d8:	ldr	r3, [r9, #16]
 6dc:	ldr	r1, [r3, r8, lsl #2]
 6e0:	ldr	ip, [r1]
 6e4:	ldr	r3, [sp, #48]	; 0x30
 6e8:	ldrb	ip, [ip, r3]
 6ec:	cmp	ip, #0
 6f0:	beq	8a0 <get_node_for_entry+0x2e0>
 6f4:	cmp	r3, #1
 6f8:	ble	724 <get_node_for_entry+0x164>
 6fc:	add	ip, sl, r3
 700:	sub	lr, ip, #4096	; 0x1000
 704:	ldrb	ip, [lr, #4095]	; 0xfff
 708:	cmp	ip, #47	; 0x2f
 70c:	beq	718 <get_node_for_entry+0x158>
 710:	cmp	ip, #91	; 0x5b
 714:	bne	724 <get_node_for_entry+0x164>
 718:	ldr	r1, [sp, #48]	; 0x30
 71c:	sub	r0, r1, #1
 720:	str	r0, [sp, #48]	; 0x30
 724:	ldr	r3, [sp, #48]	; 0x30
 728:	cmp	r3, #0
 72c:	ble	920 <get_node_for_entry+0x360>
 730:	ldrb	ip, [sl, r3]
 734:	cmp	ip, #47	; 0x2f
 738:	beq	74c <get_node_for_entry+0x18c>
 73c:	cmp	ip, #64	; 0x40
 740:	beq	74c <get_node_for_entry+0x18c>
 744:	cmp	ip, #91	; 0x5b
 748:	bne	920 <get_node_for_entry+0x360>
 74c:	ldr	r0, [r9, #16]
 750:	ldr	r2, [r0, r8, lsl #2]
 754:	ldr	r0, [r2]
 758:	ldr	ip, [sp, #48]	; 0x30
 75c:	ldrb	ip, [r0, ip]
 760:	cmp	ip, #47	; 0x2f
 764:	beq	778 <get_node_for_entry+0x1b8>
 768:	cmp	ip, #64	; 0x40
 76c:	beq	778 <get_node_for_entry+0x1b8>
 770:	cmp	ip, #91	; 0x5b
 774:	bne	920 <get_node_for_entry+0x360>
 778:	ldr	r1, [sp, #48]	; 0x30
 77c:	ldr	ip, [r9, #16]
 780:	ldr	r2, [ip, r8, lsl #2]
 784:	ldr	r2, [r2]
 788:	ldrb	r2, [r2, r1]
 78c:	cmp	r2, #47	; 0x2f
 790:	moveq	r3, #1
 794:	movne	r3, #0
 798:	add	r7, r1, r3
 79c:	ldrb	r3, [sl, r1]
 7a0:	cmp	r3, #47	; 0x2f
 7a4:	moveq	r0, #1
 7a8:	movne	r0, #0
 7ac:	add	r6, r1, r0
 7b0:	bl	420 <detection_node_new>
 7b4:	mov	r4, r0
 7b8:	cmp	r4, #0
 7bc:	bne	7c8 <get_node_for_entry+0x208>
 7c0:	mov	r0, #0
 7c4:	b	9d0 <get_node_for_entry+0x410>
 7c8:	ldr	r1, [sp, #48]	; 0x30
 7cc:	add	r0, r1, #1
 7d0:	bl	0 <malloc>
 7d4:	str	r0, [r4]
 7d8:	cmp	r0, #0
 7dc:	bne	804 <get_node_for_entry+0x244>
 7e0:	mvn	r0, #0
 7e4:	ldr	r1, [pc, #524]	; 9f8 <get_node_for_entry+0x438>
 7e8:	ldr	r2, [sp, #48]	; 0x30
 7ec:	ldr	r3, [pc, #520]	; 9fc <get_node_for_entry+0x43c>
 7f0:	movw	ip, #331	; 0x14b
 7f4:	str	ip, [sp]
 7f8:	bl	0 <coda_set_error>
 7fc:	mov	r0, #0
 800:	b	9d0 <get_node_for_entry+0x410>
 804:	ldr	r2, [sp, #48]	; 0x30
 808:	mov	r1, sl
 80c:	bl	0 <memcpy>
 810:	ldr	r3, [r4]
 814:	ldr	r2, [sp, #48]	; 0x30
 818:	mov	ip, #0
 81c:	strb	ip, [r3, r2]
 820:	ldr	r0, [r9, #16]
 824:	ldr	r1, [r0, r8, lsl #2]
 828:	mov	r0, r4
 82c:	bl	4a8 <detection_node_add_node>
 830:	cmp	r0, #0
 834:	beq	848 <get_node_for_entry+0x288>
 838:	mov	r0, r4
 83c:	bl	3a4 <delete_detection_node>
 840:	mov	r0, #0
 844:	b	9d0 <get_node_for_entry+0x410>
 848:	mov	r1, r7
 84c:	ldr	r2, [r9, #16]
 850:	ldr	r3, [r2, r8, lsl #2]
 854:	ldr	r0, [r3]
 858:	ldrb	r3, [r0, r1]
 85c:	cmp	r3, #0
 860:	beq	874 <get_node_for_entry+0x2b4>
 864:	sub	ip, r1, r7
 868:	strb	r3, [r0, ip]
 86c:	add	r1, r1, #1
 870:	b	84c <get_node_for_entry+0x28c>
 874:	sub	r2, r1, r7
 878:	mov	r1, #0
 87c:	strb	r1, [r0, r2]
 880:	ldr	r1, [r9, #16]
 884:	str	r4, [r1, r8, lsl #2]
 888:	ldr	r0, [r9, #16]
 88c:	ldr	r0, [r0, r8, lsl #2]
 890:	add	r1, sl, r6
 894:	mov	r2, r5
 898:	bl	5c0 <get_node_for_entry>
 89c:	b	9d0 <get_node_for_entry+0x410>
 8a0:	ldrb	r0, [sl, r3]
 8a4:	cmp	r0, #47	; 0x2f
 8a8:	beq	8bc <get_node_for_entry+0x2fc>
 8ac:	cmp	r0, #64	; 0x40
 8b0:	beq	8bc <get_node_for_entry+0x2fc>
 8b4:	cmp	r0, #91	; 0x5b
 8b8:	bne	920 <get_node_for_entry+0x360>
 8bc:	ldr	r3, [r9, #16]
 8c0:	ldr	r0, [r3, r8, lsl #2]
 8c4:	ldr	r2, [sp, #48]	; 0x30
 8c8:	ldrb	ip, [sl, r2]
 8cc:	cmp	ip, #47	; 0x2f
 8d0:	moveq	ip, #1
 8d4:	movne	ip, #0
 8d8:	add	r3, r2, ip
 8dc:	add	r1, sl, r3
 8e0:	mov	r2, r5
 8e4:	bl	5c0 <get_node_for_entry>
 8e8:	b	9d0 <get_node_for_entry+0x410>
 8ec:	ldr	r0, [r9, #16]
 8f0:	ldr	r2, [r0, r8, lsl #2]
 8f4:	ldr	r3, [r2]
 8f8:	cmp	r3, #0
 8fc:	bne	920 <get_node_for_entry+0x360>
 900:	ldr	r0, [r5, #4]
 904:	ldr	r1, [r2, #4]
 908:	bl	0 <coda_expression_is_equal>
 90c:	cmp	r0, #0
 910:	beq	920 <get_node_for_entry+0x360>
 914:	ldr	r3, [r9, #16]
 918:	ldr	r0, [r3, r8, lsl #2]
 91c:	b	9d0 <get_node_for_entry+0x410>
 920:	add	r8, r8, #1
 924:	b	628 <get_node_for_entry+0x68>
 928:	bl	420 <detection_node_new>
 92c:	mov	r4, r0
 930:	cmp	r4, #0
 934:	bne	940 <get_node_for_entry+0x380>
 938:	mov	r0, #0
 93c:	b	9d0 <get_node_for_entry+0x410>
 940:	cmp	sl, #0
 944:	beq	978 <get_node_for_entry+0x3b8>
 948:	mov	r0, sl
 94c:	bl	0 <strdup>
 950:	str	r0, [r4]
 954:	cmp	r0, #0
 958:	bne	980 <get_node_for_entry+0x3c0>
 95c:	mvn	r0, #0
 960:	ldr	r1, [pc, #152]	; a00 <get_node_for_entry+0x440>
 964:	ldr	r2, [pc, #144]	; 9fc <get_node_for_entry+0x43c>
 968:	movw	r3, #383	; 0x17f
 96c:	bl	0 <coda_set_error>
 970:	mov	r0, #0
 974:	b	9d0 <get_node_for_entry+0x410>
 978:	ldr	ip, [r5, #4]
 97c:	str	ip, [r4, #4]
 980:	mov	r1, r4
 984:	mov	r0, r9
 988:	bl	4a8 <detection_node_add_node>
 98c:	cmp	r0, #0
 990:	beq	9a4 <get_node_for_entry+0x3e4>
 994:	mov	r0, r4
 998:	bl	3a4 <delete_detection_node>
 99c:	mov	r0, #0
 9a0:	b	9d0 <get_node_for_entry+0x410>
 9a4:	cmp	sl, #0
 9a8:	beq	9cc <get_node_for_entry+0x40c>
 9ac:	ldr	r3, [r5, #4]
 9b0:	cmp	r3, #0
 9b4:	beq	9cc <get_node_for_entry+0x40c>
 9b8:	mov	r1, #0
 9bc:	mov	r2, r5
 9c0:	mov	r0, r4
 9c4:	bl	5c0 <get_node_for_entry>
 9c8:	b	9d0 <get_node_for_entry+0x410>
 9cc:	mov	r0, r4
 9d0:	ldr	r4, [sp, #16]
 9d4:	ldr	r5, [sp, #20]
 9d8:	ldr	r6, [sp, #24]
 9dc:	ldr	r7, [sp, #28]
 9e0:	ldr	r8, [sp, #32]
 9e4:	ldr	r9, [sp, #36]	; 0x24
 9e8:	ldr	sl, [sp, #40]	; 0x28
 9ec:	ldr	lr, [sp, #8]
 9f0:	add	sp, sp, #56	; 0x38
 9f4:	bx	lr
 9f8:	.word	0x0000018d
 9fc:	.word	0x000000d2
 a00:	.word	0x00000130

00000a04 <coda_detection_tree_delete>:
 a04:	mov	ip, sp
 a08:	sub	sp, sp, #8
 a0c:	str	ip, [sp]
 a10:	str	lr, [sp, #4]
 a14:	ldr	lr, [sp, #4]
 a18:	add	sp, sp, #8
 a1c:	b	3a4 <delete_detection_node>

00000a20 <coda_detection_tree_add_rule>:
 a20:	mov	ip, sp
 a24:	sub	sp, sp, #16
 a28:	str	ip, [sp]
 a2c:	str	lr, [sp, #4]
 a30:	str	r4, [sp, #8]
 a34:	str	r5, [sp, #12]
 a38:	mov	r4, r1
 a3c:	mov	r5, r0
 a40:	ldr	ip, [r4]
 a44:	cmp	ip, #0
 a48:	bne	a6c <coda_detection_tree_add_rule+0x4c>
 a4c:	movw	r0, #65136	; 0xfe70
 a50:	movt	r0, #65535	; 0xffff
 a54:	ldr	r1, [pc, #192]	; b1c <coda_detection_tree_add_rule+0xfc>
 a58:	ldr	r2, [r4, #8]
 a5c:	ldr	r2, [r2, #8]
 a60:	bl	0 <coda_set_error>
 a64:	mvn	r0, #0
 a68:	b	b04 <coda_detection_tree_add_rule+0xe4>
 a6c:	ldr	r0, [r5]
 a70:	cmp	r0, #0
 a74:	bne	a90 <coda_detection_tree_add_rule+0x70>
 a78:	bl	420 <detection_node_new>
 a7c:	cmp	r0, #0
 a80:	bne	a8c <coda_detection_tree_add_rule+0x6c>
 a84:	mvn	r0, #0
 a88:	b	b04 <coda_detection_tree_add_rule+0xe4>
 a8c:	str	r0, [r5]
 a90:	mov	r5, #0
 a94:	ldr	r3, [r4]
 a98:	cmp	r5, r3
 a9c:	bge	ac8 <coda_detection_tree_add_rule+0xa8>
 aa0:	ldr	ip, [r4, #4]
 aa4:	ldr	r2, [ip, r5, lsl #2]
 aa8:	ldr	r1, [r2]
 aac:	bl	5c0 <get_node_for_entry>
 ab0:	cmp	r0, #0
 ab4:	bne	ac0 <coda_detection_tree_add_rule+0xa0>
 ab8:	mvn	r0, #0
 abc:	b	b04 <coda_detection_tree_add_rule+0xe4>
 ac0:	add	r5, r5, #1
 ac4:	b	a94 <coda_detection_tree_add_rule+0x74>
 ac8:	ldr	r3, [r0, #8]
 acc:	cmp	r3, #0
 ad0:	beq	afc <coda_detection_tree_add_rule+0xdc>
 ad4:	movw	r0, #65136	; 0xfe70
 ad8:	movt	r0, #65535	; 0xffff
 adc:	ldr	r1, [pc, #52]	; b18 <coda_detection_tree_add_rule+0xf8>
 ae0:	ldr	r2, [r4, #8]
 ae4:	ldr	r2, [r2, #8]
 ae8:	ldr	r3, [r3, #8]
 aec:	ldr	r3, [r3, #8]
 af0:	bl	0 <coda_set_error>
 af4:	mvn	r0, #0
 af8:	b	b04 <coda_detection_tree_add_rule+0xe4>
 afc:	str	r4, [r0, #8]
 b00:	mov	r0, #0
 b04:	ldr	r4, [sp, #8]
 b08:	ldr	r5, [sp, #12]
 b0c:	ldr	lr, [sp, #4]
 b10:	add	sp, sp, #16
 b14:	bx	lr
 b18:	.word	0x00000093
 b1c:	.word	0x00000000

00000b20 <coda_evaluate_detection_node>:
 b20:	mov	ip, sp
 b24:	sub	sp, sp, #552	; 0x228
 b28:	str	ip, [sp]
 b2c:	str	lr, [sp, #4]
 b30:	str	r4, [sp, #8]
 b34:	str	r5, [sp, #12]
 b38:	str	r6, [sp, #16]
 b3c:	mov	r4, r2
 b40:	mov	r5, r0
 b44:	mov	r2, r1
 b48:	add	r3, sp, #32
 b4c:	mov	lr, #130	; 0x82
 b50:	ldr	ip, [r2], #4
 b54:	subs	lr, lr, #1
 b58:	str	ip, [r3], #4
 b5c:	bne	b50 <coda_evaluate_detection_node+0x30>
 b60:	mov	r1, #0
 b64:	str	r1, [r4]
 b68:	cmp	r5, #0
 b6c:	bne	b78 <coda_evaluate_detection_node+0x58>
 b70:	mov	r0, #0
 b74:	b	c58 <coda_evaluate_detection_node+0x138>
 b78:	ldr	r1, [r5]
 b7c:	cmp	r1, #0
 b80:	bne	bcc <coda_evaluate_detection_node+0xac>
 b84:	ldr	r0, [r5, #4]
 b88:	cmp	r0, #0
 b8c:	beq	bf0 <coda_evaluate_detection_node+0xd0>
 b90:	add	r1, sp, #32
 b94:	add	r2, sp, #24
 b98:	bl	0 <coda_expression_eval_bool>
 b9c:	cmp	r0, #0
 ba0:	beq	bb8 <coda_evaluate_detection_node+0x98>
 ba4:	ldr	ip, [pc, #196]	; c70 <coda_evaluate_detection_node+0x150>
 ba8:	mov	r1, #0
 bac:	str	r1, [ip]
 bb0:	mov	r0, #0
 bb4:	b	c58 <coda_evaluate_detection_node+0x138>
 bb8:	ldr	r0, [sp, #24]
 bbc:	cmp	r0, #0
 bc0:	bne	bf0 <coda_evaluate_detection_node+0xd0>
 bc4:	mov	r0, #0
 bc8:	b	c58 <coda_evaluate_detection_node+0x138>
 bcc:	add	r0, sp, #32
 bd0:	bl	0 <coda_cursor_goto>
 bd4:	cmp	r0, #0
 bd8:	beq	bf0 <coda_evaluate_detection_node+0xd0>
 bdc:	ldr	r3, [pc, #140]	; c70 <coda_evaluate_detection_node+0x150>
 be0:	mov	r0, #0
 be4:	str	r0, [r3]
 be8:	mov	r0, #0
 bec:	b	c58 <coda_evaluate_detection_node+0x138>
 bf0:	mov	r6, #0
 bf4:	ldr	r2, [r5, #12]
 bf8:	cmp	r6, r2
 bfc:	bge	c40 <coda_evaluate_detection_node+0x120>
 c00:	ldr	ip, [r5, #16]
 c04:	ldr	r0, [ip, r6, lsl #2]
 c08:	add	r1, sp, #32
 c0c:	mov	r2, r4
 c10:	bl	b20 <coda_evaluate_detection_node>
 c14:	cmp	r0, #0
 c18:	beq	c24 <coda_evaluate_detection_node+0x104>
 c1c:	mvn	r0, #0
 c20:	b	c58 <coda_evaluate_detection_node+0x138>
 c24:	ldr	r3, [r4]
 c28:	cmp	r3, #0
 c2c:	beq	c38 <coda_evaluate_detection_node+0x118>
 c30:	mov	r0, #0
 c34:	b	c58 <coda_evaluate_detection_node+0x138>
 c38:	add	r6, r6, #1
 c3c:	b	bf4 <coda_evaluate_detection_node+0xd4>
 c40:	ldr	r0, [r5, #8]
 c44:	cmp	r0, #0
 c48:	beq	c54 <coda_evaluate_detection_node+0x134>
 c4c:	ldr	r2, [r0, #8]
 c50:	str	r2, [r4]
 c54:	mov	r0, #0
 c58:	ldr	r4, [sp, #8]
 c5c:	ldr	r5, [sp, #12]
 c60:	ldr	r6, [sp, #16]
 c64:	ldr	lr, [sp, #4]
 c68:	add	sp, sp, #552	; 0x228
 c6c:	bx	lr
 c70:	.word	0x00000000
