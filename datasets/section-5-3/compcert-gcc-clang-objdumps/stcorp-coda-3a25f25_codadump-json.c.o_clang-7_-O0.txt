
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_json_data>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #552	; 0x228
   c:	str	r0, [fp, #-12]
  10:	ldr	r0, [fp, #-12]
  14:	movw	r1, #0
  18:	movt	r1, #0
  1c:	str	r0, [r1]
  20:	movw	r0, #0
  24:	movt	r0, #0
  28:	ldr	r0, [r0]
  2c:	sub	r1, fp, #16
  30:	bl	0 <coda_open>
  34:	str	r0, [sp, #20]
  38:	ldr	r0, [sp, #20]
  3c:	cmp	r0, #0
  40:	beq	88 <print_json_data+0x88>
  44:	bl	0 <coda_get_errno>
  48:	ldr	r0, [r0]
  4c:	cmn	r0, #21
  50:	bne	88 <print_json_data+0x88>
  54:	movw	r0, #0
  58:	bl	0 <coda_set_option_use_mmap>
  5c:	movw	lr, #0
  60:	movt	lr, #0
  64:	ldr	lr, [lr]
  68:	str	r0, [sp, #16]
  6c:	mov	r0, lr
  70:	sub	r1, fp, #16
  74:	bl	0 <coda_open>
  78:	str	r0, [sp, #20]
  7c:	movw	r0, #1
  80:	bl	0 <coda_set_option_use_mmap>
  84:	str	r0, [sp, #12]
  88:	ldr	r0, [sp, #20]
  8c:	cmp	r0, #0
  90:	beq	a0 <print_json_data+0xa0>
  94:	movw	r0, #0
  98:	movt	r0, #0
  9c:	blx	r0
  a0:	ldr	r1, [fp, #-16]
  a4:	add	r0, sp, #24
  a8:	bl	0 <coda_cursor_set_product>
  ac:	cmp	r0, #0
  b0:	beq	c0 <print_json_data+0xc0>
  b4:	movw	r0, #0
  b8:	movt	r0, #0
  bc:	blx	r0
  c0:	movw	r0, #0
  c4:	movt	r0, #0
  c8:	ldr	r0, [r0]
  cc:	movw	r1, #0
  d0:	cmp	r0, r1
  d4:	beq	10c <print_json_data+0x10c>
  d8:	movw	r0, #0
  dc:	movt	r0, #0
  e0:	ldr	r1, [r0]
  e4:	add	r0, sp, #24
  e8:	bl	0 <coda_cursor_goto>
  ec:	str	r0, [sp, #20]
  f0:	ldr	r0, [sp, #20]
  f4:	cmp	r0, #0
  f8:	beq	108 <print_json_data+0x108>
  fc:	movw	r0, #0
 100:	movt	r0, #0
 104:	blx	r0
 108:	b	10c <print_json_data+0x10c>
 10c:	movw	r0, #0
 110:	bl	0 <coda_set_option_perform_boundary_checks>
 114:	add	lr, sp, #24
 118:	str	r0, [sp, #8]
 11c:	mov	r0, lr
 120:	bl	14c <print_data>
 124:	movw	r0, #0
 128:	movt	r0, #0
 12c:	bl	c18 <ff_printf>
 130:	ldr	lr, [fp, #-16]
 134:	str	r0, [sp, #4]
 138:	mov	r0, lr
 13c:	bl	0 <coda_close>
 140:	str	r0, [sp]
 144:	sub	sp, fp, #8
 148:	pop	{r4, r5, fp, pc}

0000014c <print_data>:
 14c:	push	{r4, r5, fp, lr}
 150:	add	fp, sp, #8
 154:	sub	sp, sp, #440	; 0x1b8
 158:	str	r0, [fp, #-12]
 15c:	movw	r0, #0
 160:	str	r0, [fp, #-20]	; 0xffffffec
 164:	movw	r0, #0
 168:	movt	r0, #0
 16c:	ldr	r0, [r0]
 170:	cmp	r0, #0
 174:	beq	200 <print_data+0xb4>
 178:	ldr	r0, [fp, #-12]
 17c:	sub	r1, fp, #20
 180:	bl	0 <coda_cursor_has_attributes>
 184:	cmp	r0, #0
 188:	beq	198 <print_data+0x4c>
 18c:	movw	r0, #0
 190:	movt	r0, #0
 194:	blx	r0
 198:	ldr	r0, [fp, #-20]	; 0xffffffec
 19c:	cmp	r0, #0
 1a0:	beq	1fc <print_data+0xb0>
 1a4:	movw	r0, #0
 1a8:	movt	r0, #0
 1ac:	bl	c18 <ff_printf>
 1b0:	ldr	lr, [fp, #-12]
 1b4:	str	r0, [sp, #156]	; 0x9c
 1b8:	mov	r0, lr
 1bc:	bl	0 <coda_cursor_goto_attributes>
 1c0:	cmp	r0, #0
 1c4:	beq	1d4 <print_data+0x88>
 1c8:	movw	r0, #0
 1cc:	movt	r0, #0
 1d0:	blx	r0
 1d4:	ldr	r0, [fp, #-12]
 1d8:	bl	14c <print_data>
 1dc:	ldr	r0, [fp, #-12]
 1e0:	bl	0 <coda_cursor_goto_parent>
 1e4:	movw	lr, #0
 1e8:	movt	lr, #0
 1ec:	str	r0, [sp, #152]	; 0x98
 1f0:	mov	r0, lr
 1f4:	bl	c18 <ff_printf>
 1f8:	str	r0, [sp, #148]	; 0x94
 1fc:	b	200 <print_data+0xb4>
 200:	ldr	r0, [fp, #-12]
 204:	sub	r1, fp, #16
 208:	bl	0 <coda_cursor_get_type_class>
 20c:	cmp	r0, #0
 210:	beq	220 <print_data+0xd4>
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	blx	r0
 220:	ldr	r0, [fp, #-16]
 224:	cmp	r0, #6
 228:	str	r0, [sp, #144]	; 0x90
 22c:	bhi	bf4 <print_data+0xaa8>
 230:	add	r0, pc, #8
 234:	ldr	r1, [sp, #144]	; 0x90
 238:	ldr	r0, [r0, r1, lsl #2]
 23c:	mov	pc, r0
 240:	.word	0x0000025c
 244:	.word	0x000004c0
 248:	.word	0x00000618
 24c:	.word	0x00000618
 250:	.word	0x00000618
 254:	.word	0x00000618
 258:	.word	0x00000a64
 25c:	movw	r0, #0
 260:	movt	r0, #0
 264:	bl	c18 <ff_printf>
 268:	ldr	lr, [fp, #-12]
 26c:	str	r0, [sp, #140]	; 0x8c
 270:	mov	r0, lr
 274:	sub	r1, fp, #24
 278:	bl	0 <coda_cursor_get_num_elements>
 27c:	cmp	r0, #0
 280:	beq	290 <print_data+0x144>
 284:	movw	r0, #0
 288:	movt	r0, #0
 28c:	blx	r0
 290:	ldr	r0, [fp, #-24]	; 0xffffffe8
 294:	cmp	r0, #0
 298:	ble	4ac <print_data+0x360>
 29c:	ldr	r0, [fp, #-12]
 2a0:	sub	r1, fp, #28
 2a4:	bl	0 <coda_cursor_get_type>
 2a8:	cmp	r0, #0
 2ac:	beq	2bc <print_data+0x170>
 2b0:	movw	r0, #0
 2b4:	movt	r0, #0
 2b8:	blx	r0
 2bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
 2c0:	sub	r1, fp, #32
 2c4:	bl	0 <coda_type_get_record_union_status>
 2c8:	cmp	r0, #0
 2cc:	beq	2dc <print_data+0x190>
 2d0:	movw	r0, #0
 2d4:	movt	r0, #0
 2d8:	blx	r0
 2dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
 2e0:	cmp	r0, #0
 2e4:	beq	37c <print_data+0x230>
 2e8:	ldr	r0, [fp, #-12]
 2ec:	sub	r1, fp, #36	; 0x24
 2f0:	bl	0 <coda_cursor_get_available_union_field_index>
 2f4:	cmp	r0, #0
 2f8:	beq	308 <print_data+0x1bc>
 2fc:	movw	r0, #0
 300:	movt	r0, #0
 304:	blx	r0
 308:	ldr	r0, [fp, #-28]	; 0xffffffe4
 30c:	ldr	r1, [fp, #-36]	; 0xffffffdc
 310:	sub	r2, fp, #40	; 0x28
 314:	bl	0 <coda_type_get_record_field_name>
 318:	cmp	r0, #0
 31c:	beq	32c <print_data+0x1e0>
 320:	movw	r0, #0
 324:	movt	r0, #0
 328:	blx	r0
 32c:	ldr	r0, [fp, #-12]
 330:	ldr	r1, [fp, #-36]	; 0xffffffdc
 334:	bl	0 <coda_cursor_goto_record_field_by_index>
 338:	cmp	r0, #0
 33c:	beq	34c <print_data+0x200>
 340:	movw	r0, #0
 344:	movt	r0, #0
 348:	blx	r0
 34c:	ldr	r1, [fp, #-40]	; 0xffffffd8
 350:	movw	r0, #0
 354:	movt	r0, #0
 358:	bl	c18 <ff_printf>
 35c:	ldr	r1, [fp, #-12]
 360:	str	r0, [sp, #136]	; 0x88
 364:	mov	r0, r1
 368:	bl	14c <print_data>
 36c:	ldr	r0, [fp, #-12]
 370:	bl	0 <coda_cursor_goto_parent>
 374:	str	r0, [sp, #132]	; 0x84
 378:	b	4a8 <print_data+0x35c>
 37c:	movw	r0, #1
 380:	str	r0, [fp, #-44]	; 0xffffffd4
 384:	ldr	r0, [fp, #-12]
 388:	bl	0 <coda_cursor_goto_first_record_field>
 38c:	cmp	r0, #0
 390:	beq	3a0 <print_data+0x254>
 394:	movw	r0, #0
 398:	movt	r0, #0
 39c:	blx	r0
 3a0:	movw	r0, #0
 3a4:	str	r0, [fp, #-36]	; 0xffffffdc
 3a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
 3ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
 3b0:	cmp	r0, r1
 3b4:	bge	49c <print_data+0x350>
 3b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
 3bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
 3c0:	sub	r2, fp, #52	; 0x34
 3c4:	bl	0 <coda_type_get_record_field_hidden_status>
 3c8:	cmp	r0, #0
 3cc:	beq	3dc <print_data+0x290>
 3d0:	movw	r0, #0
 3d4:	movt	r0, #0
 3d8:	blx	r0
 3dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
 3e0:	cmp	r0, #0
 3e4:	bne	454 <print_data+0x308>
 3e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 3ec:	cmp	r0, #0
 3f0:	bne	408 <print_data+0x2bc>
 3f4:	movw	r0, #0
 3f8:	movt	r0, #0
 3fc:	bl	c18 <ff_printf>
 400:	str	r0, [sp, #128]	; 0x80
 404:	b	410 <print_data+0x2c4>
 408:	movw	r0, #0
 40c:	str	r0, [fp, #-44]	; 0xffffffd4
 410:	ldr	r0, [fp, #-28]	; 0xffffffe4
 414:	ldr	r1, [fp, #-36]	; 0xffffffdc
 418:	sub	r2, fp, #48	; 0x30
 41c:	bl	0 <coda_type_get_record_field_name>
 420:	cmp	r0, #0
 424:	beq	434 <print_data+0x2e8>
 428:	movw	r0, #0
 42c:	movt	r0, #0
 430:	blx	r0
 434:	ldr	r1, [fp, #-48]	; 0xffffffd0
 438:	movw	r0, #0
 43c:	movt	r0, #0
 440:	bl	c18 <ff_printf>
 444:	ldr	r1, [fp, #-12]
 448:	str	r0, [sp, #124]	; 0x7c
 44c:	mov	r0, r1
 450:	bl	14c <print_data>
 454:	ldr	r0, [fp, #-36]	; 0xffffffdc
 458:	ldr	r1, [fp, #-24]	; 0xffffffe8
 45c:	sub	r1, r1, #1
 460:	cmp	r0, r1
 464:	bge	488 <print_data+0x33c>
 468:	ldr	r0, [fp, #-12]
 46c:	bl	0 <coda_cursor_goto_next_record_field>
 470:	cmp	r0, #0
 474:	beq	484 <print_data+0x338>
 478:	movw	r0, #0
 47c:	movt	r0, #0
 480:	blx	r0
 484:	b	488 <print_data+0x33c>
 488:	b	48c <print_data+0x340>
 48c:	ldr	r0, [fp, #-36]	; 0xffffffdc
 490:	add	r0, r0, #1
 494:	str	r0, [fp, #-36]	; 0xffffffdc
 498:	b	3a8 <print_data+0x25c>
 49c:	ldr	r0, [fp, #-12]
 4a0:	bl	0 <coda_cursor_goto_parent>
 4a4:	str	r0, [sp, #120]	; 0x78
 4a8:	b	4ac <print_data+0x360>
 4ac:	movw	r0, #0
 4b0:	movt	r0, #0
 4b4:	bl	c18 <ff_printf>
 4b8:	str	r0, [sp, #116]	; 0x74
 4bc:	b	bf4 <print_data+0xaa8>
 4c0:	movw	r0, #0
 4c4:	movt	r0, #0
 4c8:	bl	c18 <ff_printf>
 4cc:	sub	r2, fp, #84	; 0x54
 4d0:	ldr	lr, [fp, #-12]
 4d4:	str	r0, [sp, #112]	; 0x70
 4d8:	mov	r0, lr
 4dc:	sub	r1, fp, #88	; 0x58
 4e0:	bl	0 <coda_cursor_get_array_dim>
 4e4:	cmp	r0, #0
 4e8:	beq	4f8 <print_data+0x3ac>
 4ec:	movw	r0, #0
 4f0:	movt	r0, #0
 4f4:	blx	r0
 4f8:	ldr	r0, [fp, #-88]	; 0xffffffa8
 4fc:	cmp	r0, #0
 500:	blt	604 <print_data+0x4b8>
 504:	movw	r0, #1
 508:	str	r0, [fp, #-92]	; 0xffffffa4
 50c:	movw	r0, #0
 510:	str	r0, [fp, #-96]	; 0xffffffa0
 514:	ldr	r0, [fp, #-96]	; 0xffffffa0
 518:	ldr	r1, [fp, #-88]	; 0xffffffa8
 51c:	cmp	r0, r1
 520:	bge	550 <print_data+0x404>
 524:	ldr	r0, [fp, #-96]	; 0xffffffa0
 528:	sub	r1, fp, #84	; 0x54
 52c:	add	r0, r1, r0, lsl #2
 530:	ldr	r0, [r0]
 534:	ldr	r1, [fp, #-92]	; 0xffffffa4
 538:	mul	r0, r1, r0
 53c:	str	r0, [fp, #-92]	; 0xffffffa4
 540:	ldr	r0, [fp, #-96]	; 0xffffffa0
 544:	add	r0, r0, #1
 548:	str	r0, [fp, #-96]	; 0xffffffa0
 54c:	b	514 <print_data+0x3c8>
 550:	ldr	r0, [fp, #-92]	; 0xffffffa4
 554:	cmp	r0, #0
 558:	ble	600 <print_data+0x4b4>
 55c:	ldr	r0, [fp, #-12]
 560:	bl	0 <coda_cursor_goto_first_array_element>
 564:	cmp	r0, #0
 568:	beq	578 <print_data+0x42c>
 56c:	movw	r0, #0
 570:	movt	r0, #0
 574:	blx	r0
 578:	movw	r0, #0
 57c:	str	r0, [fp, #-96]	; 0xffffffa0
 580:	ldr	r0, [fp, #-96]	; 0xffffffa0
 584:	ldr	r1, [fp, #-92]	; 0xffffffa4
 588:	cmp	r0, r1
 58c:	bge	5f4 <print_data+0x4a8>
 590:	ldr	r0, [fp, #-12]
 594:	bl	14c <print_data>
 598:	ldr	r0, [fp, #-96]	; 0xffffffa0
 59c:	ldr	lr, [fp, #-92]	; 0xffffffa4
 5a0:	sub	lr, lr, #1
 5a4:	cmp	r0, lr
 5a8:	bge	5e0 <print_data+0x494>
 5ac:	movw	r0, #0
 5b0:	movt	r0, #0
 5b4:	bl	c18 <ff_printf>
 5b8:	ldr	lr, [fp, #-12]
 5bc:	str	r0, [sp, #108]	; 0x6c
 5c0:	mov	r0, lr
 5c4:	bl	0 <coda_cursor_goto_next_array_element>
 5c8:	cmp	r0, #0
 5cc:	beq	5dc <print_data+0x490>
 5d0:	movw	r0, #0
 5d4:	movt	r0, #0
 5d8:	blx	r0
 5dc:	b	5e0 <print_data+0x494>
 5e0:	b	5e4 <print_data+0x498>
 5e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
 5e8:	add	r0, r0, #1
 5ec:	str	r0, [fp, #-96]	; 0xffffffa0
 5f0:	b	580 <print_data+0x434>
 5f4:	ldr	r0, [fp, #-12]
 5f8:	bl	0 <coda_cursor_goto_parent>
 5fc:	str	r0, [sp, #104]	; 0x68
 600:	b	604 <print_data+0x4b8>
 604:	movw	r0, #0
 608:	movt	r0, #0
 60c:	bl	c18 <ff_printf>
 610:	str	r0, [sp, #100]	; 0x64
 614:	b	bf4 <print_data+0xaa8>
 618:	ldr	r0, [fp, #-12]
 61c:	sub	r1, fp, #100	; 0x64
 620:	bl	0 <coda_cursor_get_read_type>
 624:	cmp	r0, #0
 628:	beq	638 <print_data+0x4ec>
 62c:	movw	r0, #0
 630:	movt	r0, #0
 634:	blx	r0
 638:	ldr	r0, [fp, #-100]	; 0xffffff9c
 63c:	add	r0, r0, #1
 640:	cmp	r0, #13
 644:	str	r0, [sp, #96]	; 0x60
 648:	bhi	a60 <print_data+0x914>
 64c:	add	r0, pc, #8
 650:	ldr	r1, [sp, #96]	; 0x60
 654:	ldr	r0, [r0, r1, lsl #2]
 658:	mov	pc, r0
 65c:	.word	0x00000a50
 660:	.word	0x000008ec
 664:	.word	0x00000924
 668:	.word	0x000008ec
 66c:	.word	0x00000924
 670:	.word	0x000008ec
 674:	.word	0x00000924
 678:	.word	0x0000095c
 67c:	.word	0x000009a4
 680:	.word	0x000009ec
 684:	.word	0x000009ec
 688:	.word	0x00000694
 68c:	.word	0x000006e8
 690:	.word	0x000007c8
 694:	ldr	r0, [fp, #-12]
 698:	sub	r1, fp, #101	; 0x65
 69c:	bl	0 <coda_cursor_read_char>
 6a0:	cmp	r0, #0
 6a4:	beq	6b4 <print_data+0x568>
 6a8:	movw	r0, #0
 6ac:	movt	r0, #0
 6b0:	blx	r0
 6b4:	movw	r0, #0
 6b8:	movt	r0, #0
 6bc:	bl	c18 <ff_printf>
 6c0:	sub	lr, fp, #101	; 0x65
 6c4:	str	r0, [sp, #92]	; 0x5c
 6c8:	mov	r0, lr
 6cc:	movw	r1, #1
 6d0:	bl	c7c <print_escaped>
 6d4:	movw	r0, #0
 6d8:	movt	r0, #0
 6dc:	bl	c18 <ff_printf>
 6e0:	str	r0, [sp, #88]	; 0x58
 6e4:	b	a60 <print_data+0x914>
 6e8:	ldr	r0, [fp, #-12]
 6ec:	sub	r1, fp, #108	; 0x6c
 6f0:	bl	0 <coda_cursor_get_string_length>
 6f4:	cmp	r0, #0
 6f8:	beq	708 <print_data+0x5bc>
 6fc:	movw	r0, #0
 700:	movt	r0, #0
 704:	blx	r0
 708:	ldr	r0, [fp, #-108]	; 0xffffff94
 70c:	add	r0, r0, #1
 710:	bl	0 <malloc>
 714:	str	r0, [fp, #-112]	; 0xffffff90
 718:	ldr	r0, [fp, #-112]	; 0xffffff90
 71c:	movw	lr, #0
 720:	cmp	r0, lr
 724:	bne	75c <print_data+0x610>
 728:	ldr	r0, [fp, #-108]	; 0xffffff94
 72c:	add	r2, r0, #1
 730:	mvn	r0, #0
 734:	movw	r1, #0
 738:	movt	r1, #0
 73c:	movw	r3, #0
 740:	movt	r3, #0
 744:	movw	ip, #303	; 0x12f
 748:	str	ip, [sp]
 74c:	bl	0 <coda_set_error>
 750:	movw	r0, #0
 754:	movt	r0, #0
 758:	blx	r0
 75c:	ldr	r0, [fp, #-12]
 760:	ldr	r1, [fp, #-112]	; 0xffffff90
 764:	ldr	r2, [fp, #-108]	; 0xffffff94
 768:	add	r2, r2, #1
 76c:	bl	0 <coda_cursor_read_string>
 770:	cmp	r0, #0
 774:	beq	784 <print_data+0x638>
 778:	movw	r0, #0
 77c:	movt	r0, #0
 780:	blx	r0
 784:	movw	r0, #0
 788:	movt	r0, #0
 78c:	bl	c18 <ff_printf>
 790:	ldr	lr, [fp, #-112]	; 0xffffff90
 794:	ldr	r1, [fp, #-108]	; 0xffffff94
 798:	str	r0, [sp, #84]	; 0x54
 79c:	mov	r0, lr
 7a0:	bl	c7c <print_escaped>
 7a4:	ldr	r1, [fp, #-108]	; 0xffffff94
 7a8:	movw	r0, #0
 7ac:	movt	r0, #0
 7b0:	bl	c18 <ff_printf>
 7b4:	ldr	r1, [fp, #-112]	; 0xffffff90
 7b8:	str	r0, [sp, #80]	; 0x50
 7bc:	mov	r0, r1
 7c0:	bl	0 <free>
 7c4:	b	a60 <print_data+0x914>
 7c8:	ldr	r0, [fp, #-12]
 7cc:	sub	r1, fp, #120	; 0x78
 7d0:	bl	0 <coda_cursor_get_bit_size>
 7d4:	cmp	r0, #0
 7d8:	beq	7e8 <print_data+0x69c>
 7dc:	movw	r0, #0
 7e0:	movt	r0, #0
 7e4:	blx	r0
 7e8:	ldr	r0, [fp, #-120]	; 0xffffff88
 7ec:	ldr	r1, [fp, #-116]	; 0xffffff8c
 7f0:	lsr	r2, r0, #3
 7f4:	orr	r2, r2, r1, lsl #29
 7f8:	asr	r1, r1, #3
 7fc:	and	r0, r0, #7
 800:	adds	r3, r2, #1
 804:	adc	ip, r1, #0
 808:	cmp	r0, #0
 80c:	movne	r2, r3
 810:	cmp	r0, #0
 814:	movne	r1, ip
 818:	str	r2, [fp, #-128]	; 0xffffff80
 81c:	str	r1, [fp, #-124]	; 0xffffff84
 820:	ldr	r0, [fp, #-128]	; 0xffffff80
 824:	bl	0 <malloc>
 828:	str	r0, [fp, #-132]	; 0xffffff7c
 82c:	ldr	r0, [fp, #-132]	; 0xffffff7c
 830:	movw	r1, #0
 834:	cmp	r0, r1
 838:	bne	86c <print_data+0x720>
 83c:	ldr	r2, [fp, #-128]	; 0xffffff80
 840:	mvn	r0, #0
 844:	movw	r1, #0
 848:	movt	r1, #0
 84c:	movw	r3, #0
 850:	movt	r3, #0
 854:	movw	ip, #334	; 0x14e
 858:	str	ip, [sp]
 85c:	bl	0 <coda_set_error>
 860:	movw	r0, #0
 864:	movt	r0, #0
 868:	blx	r0
 86c:	ldr	r0, [fp, #-12]
 870:	ldr	r1, [fp, #-132]	; 0xffffff7c
 874:	ldr	r2, [fp, #-120]	; 0xffffff88
 878:	ldr	r3, [fp, #-116]	; 0xffffff8c
 87c:	mov	ip, sp
 880:	str	r3, [ip, #4]
 884:	str	r2, [ip]
 888:	mov	r2, #0
 88c:	str	r2, [sp, #76]	; 0x4c
 890:	ldr	r3, [sp, #76]	; 0x4c
 894:	bl	0 <coda_cursor_read_bits>
 898:	cmp	r0, #0
 89c:	beq	8ac <print_data+0x760>
 8a0:	movw	r0, #0
 8a4:	movt	r0, #0
 8a8:	blx	r0
 8ac:	movw	r0, #0
 8b0:	movt	r0, #0
 8b4:	bl	c18 <ff_printf>
 8b8:	ldr	lr, [fp, #-132]	; 0xffffff7c
 8bc:	ldr	r1, [fp, #-128]	; 0xffffff80
 8c0:	str	r0, [sp, #72]	; 0x48
 8c4:	mov	r0, lr
 8c8:	bl	c7c <print_escaped>
 8cc:	movw	r0, #0
 8d0:	movt	r0, #0
 8d4:	bl	c18 <ff_printf>
 8d8:	ldr	r1, [fp, #-132]	; 0xffffff7c
 8dc:	str	r0, [sp, #68]	; 0x44
 8e0:	mov	r0, r1
 8e4:	bl	0 <free>
 8e8:	b	a60 <print_data+0x914>
 8ec:	ldr	r0, [fp, #-12]
 8f0:	sub	r1, fp, #136	; 0x88
 8f4:	bl	0 <coda_cursor_read_int32>
 8f8:	cmp	r0, #0
 8fc:	beq	90c <print_data+0x7c0>
 900:	movw	r0, #0
 904:	movt	r0, #0
 908:	blx	r0
 90c:	ldr	r1, [fp, #-136]	; 0xffffff78
 910:	movw	r0, #0
 914:	movt	r0, #0
 918:	bl	c18 <ff_printf>
 91c:	str	r0, [sp, #64]	; 0x40
 920:	b	a60 <print_data+0x914>
 924:	ldr	r0, [fp, #-12]
 928:	sub	r1, fp, #140	; 0x8c
 92c:	bl	0 <coda_cursor_read_uint32>
 930:	cmp	r0, #0
 934:	beq	944 <print_data+0x7f8>
 938:	movw	r0, #0
 93c:	movt	r0, #0
 940:	blx	r0
 944:	ldr	r1, [fp, #-140]	; 0xffffff74
 948:	movw	r0, #0
 94c:	movt	r0, #0
 950:	bl	c18 <ff_printf>
 954:	str	r0, [sp, #60]	; 0x3c
 958:	b	a60 <print_data+0x914>
 95c:	ldr	r0, [fp, #-12]
 960:	sub	r1, fp, #152	; 0x98
 964:	bl	0 <coda_cursor_read_int64>
 968:	cmp	r0, #0
 96c:	beq	97c <print_data+0x830>
 970:	movw	r0, #0
 974:	movt	r0, #0
 978:	blx	r0
 97c:	sub	r2, fp, #173	; 0xad
 980:	ldr	r0, [fp, #-152]	; 0xffffff68
 984:	ldr	r1, [fp, #-148]	; 0xffffff6c
 988:	bl	0 <coda_str64>
 98c:	sub	r1, fp, #173	; 0xad
 990:	movw	r0, #0
 994:	movt	r0, #0
 998:	bl	c18 <ff_printf>
 99c:	str	r0, [sp, #56]	; 0x38
 9a0:	b	a60 <print_data+0x914>
 9a4:	ldr	r0, [fp, #-12]
 9a8:	sub	r1, fp, #184	; 0xb8
 9ac:	bl	0 <coda_cursor_read_uint64>
 9b0:	cmp	r0, #0
 9b4:	beq	9c4 <print_data+0x878>
 9b8:	movw	r0, #0
 9bc:	movt	r0, #0
 9c0:	blx	r0
 9c4:	sub	r2, fp, #205	; 0xcd
 9c8:	ldr	r0, [fp, #-184]	; 0xffffff48
 9cc:	ldr	r1, [fp, #-180]	; 0xffffff4c
 9d0:	bl	0 <coda_str64u>
 9d4:	sub	r1, fp, #205	; 0xcd
 9d8:	movw	r0, #0
 9dc:	movt	r0, #0
 9e0:	bl	c18 <ff_printf>
 9e4:	str	r0, [sp, #52]	; 0x34
 9e8:	b	a60 <print_data+0x914>
 9ec:	ldr	r0, [fp, #-12]
 9f0:	sub	r1, fp, #216	; 0xd8
 9f4:	bl	0 <coda_cursor_read_double>
 9f8:	cmp	r0, #0
 9fc:	beq	a0c <print_data+0x8c0>
 a00:	movw	r0, #0
 a04:	movt	r0, #0
 a08:	blx	r0
 a0c:	ldr	r0, [fp, #-100]	; 0xffffff9c
 a10:	cmp	r0, #8
 a14:	bne	a34 <print_data+0x8e8>
 a18:	vldr	d16, [fp, #-216]	; 0xffffff28
 a1c:	movw	r0, #0
 a20:	movt	r0, #0
 a24:	vmov	r2, r3, d16
 a28:	bl	c18 <ff_printf>
 a2c:	str	r0, [sp, #48]	; 0x30
 a30:	b	a4c <print_data+0x900>
 a34:	vldr	d16, [fp, #-216]	; 0xffffff28
 a38:	movw	r0, #0
 a3c:	movt	r0, #0
 a40:	vmov	r2, r3, d16
 a44:	bl	c18 <ff_printf>
 a48:	str	r0, [sp, #44]	; 0x2c
 a4c:	b	a60 <print_data+0x914>
 a50:	movw	r0, #0
 a54:	movt	r0, #0
 a58:	bl	c18 <ff_printf>
 a5c:	str	r0, [sp, #40]	; 0x28
 a60:	b	bf4 <print_data+0xaa8>
 a64:	ldr	r0, [fp, #-12]
 a68:	sub	r1, fp, #220	; 0xdc
 a6c:	bl	0 <coda_cursor_get_special_type>
 a70:	cmp	r0, #0
 a74:	beq	a84 <print_data+0x938>
 a78:	movw	r0, #0
 a7c:	movt	r0, #0
 a80:	blx	r0
 a84:	ldr	r0, [fp, #-220]	; 0xffffff24
 a88:	cmp	r0, #3
 a8c:	str	r0, [sp, #36]	; 0x24
 a90:	bhi	bf0 <print_data+0xaa4>
 a94:	add	r0, pc, #8
 a98:	ldr	r1, [sp, #36]	; 0x24
 a9c:	ldr	r0, [r0, r1, lsl #2]
 aa0:	mov	pc, r0
 aa4:	.word	0x00000ab4
 aa8:	.word	0x00000ac8
 aac:	.word	0x00000b04
 ab0:	.word	0x00000bac
 ab4:	movw	r0, #0
 ab8:	movt	r0, #0
 abc:	bl	c18 <ff_printf>
 ac0:	str	r0, [sp, #32]
 ac4:	b	bf0 <print_data+0xaa4>
 ac8:	ldr	r0, [fp, #-12]
 acc:	add	r1, sp, #216	; 0xd8
 ad0:	bl	0 <coda_cursor_read_double>
 ad4:	cmp	r0, #0
 ad8:	beq	ae8 <print_data+0x99c>
 adc:	movw	r0, #0
 ae0:	movt	r0, #0
 ae4:	blx	r0
 ae8:	vldr	d16, [sp, #216]	; 0xd8
 aec:	movw	r0, #0
 af0:	movt	r0, #0
 af4:	vmov	r2, r3, d16
 af8:	bl	c18 <ff_printf>
 afc:	str	r0, [sp, #28]
 b00:	b	bf0 <print_data+0xaa4>
 b04:	ldr	r0, [fp, #-12]
 b08:	add	r1, sp, #208	; 0xd0
 b0c:	bl	0 <coda_cursor_read_double>
 b10:	cmp	r0, #0
 b14:	beq	b24 <print_data+0x9d8>
 b18:	movw	r0, #0
 b1c:	movt	r0, #0
 b20:	blx	r0
 b24:	vldr	d0, [sp, #208]	; 0xd0
 b28:	bl	0 <coda_isNaN>
 b2c:	cmp	r0, #0
 b30:	bne	b44 <print_data+0x9f8>
 b34:	vldr	d0, [sp, #208]	; 0xd0
 b38:	bl	0 <coda_isInf>
 b3c:	cmp	r0, #0
 b40:	beq	b60 <print_data+0xa14>
 b44:	vldr	d16, [sp, #208]	; 0xd0
 b48:	movw	r0, #0
 b4c:	movt	r0, #0
 b50:	vmov	r2, r3, d16
 b54:	bl	c18 <ff_printf>
 b58:	str	r0, [sp, #24]
 b5c:	b	ba8 <print_data+0xa5c>
 b60:	add	r1, sp, #181	; 0xb5
 b64:	vldr	d0, [sp, #208]	; 0xd0
 b68:	movw	r0, #0
 b6c:	movt	r0, #0
 b70:	bl	0 <coda_time_double_to_string>
 b74:	cmp	r0, #0
 b78:	beq	b90 <print_data+0xa44>
 b7c:	movw	r0, #0
 b80:	movt	r0, #0
 b84:	bl	c18 <ff_printf>
 b88:	str	r0, [sp, #20]
 b8c:	b	ba4 <print_data+0xa58>
 b90:	add	r1, sp, #181	; 0xb5
 b94:	movw	r0, #0
 b98:	movt	r0, #0
 b9c:	bl	c18 <ff_printf>
 ba0:	str	r0, [sp, #16]
 ba4:	b	ba8 <print_data+0xa5c>
 ba8:	b	bf0 <print_data+0xaa4>
 bac:	ldr	r0, [fp, #-12]
 bb0:	add	r1, sp, #168	; 0xa8
 bb4:	add	r2, sp, #160	; 0xa0
 bb8:	bl	0 <coda_cursor_read_complex_double_split>
 bbc:	cmp	r0, #0
 bc0:	beq	bd0 <print_data+0xa84>
 bc4:	movw	r0, #0
 bc8:	movt	r0, #0
 bcc:	blx	r0
 bd0:	vldr	d16, [sp, #168]	; 0xa8
 bd4:	vldr	d17, [sp, #160]	; 0xa0
 bd8:	movw	r0, #0
 bdc:	movt	r0, #0
 be0:	vmov	r2, r3, d16
 be4:	vstr	d17, [sp]
 be8:	bl	c18 <ff_printf>
 bec:	str	r0, [sp, #12]
 bf0:	b	bf4 <print_data+0xaa8>
 bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
 bf8:	cmp	r0, #0
 bfc:	beq	c10 <print_data+0xac4>
 c00:	movw	r0, #0
 c04:	movt	r0, #0
 c08:	bl	c18 <ff_printf>
 c0c:	str	r0, [sp, #8]
 c10:	sub	sp, fp, #8
 c14:	pop	{r4, r5, fp, pc}

00000c18 <ff_printf>:
 c18:	sub	sp, sp, #12
 c1c:	push	{fp, lr}
 c20:	mov	fp, sp
 c24:	sub	sp, sp, #20
 c28:	str	r3, [fp, #16]
 c2c:	str	r2, [fp, #12]
 c30:	str	r1, [fp, #8]
 c34:	str	r0, [fp, #-4]
 c38:	add	r0, fp, #8
 c3c:	str	r0, [sp, #8]
 c40:	movw	r0, #0
 c44:	movt	r0, #0
 c48:	ldr	r0, [r0]
 c4c:	ldr	r1, [fp, #-4]
 c50:	ldr	r2, [sp, #8]
 c54:	bl	0 <vfprintf>
 c58:	str	r0, [fp, #-8]
 c5c:	add	r0, sp, #8
 c60:	ldr	r1, [fp, #-8]
 c64:	str	r0, [sp, #4]
 c68:	mov	r0, r1
 c6c:	mov	sp, fp
 c70:	pop	{fp, lr}
 c74:	add	sp, sp, #12
 c78:	bx	lr

00000c7c <print_escaped>:
 c7c:	push	{fp, lr}
 c80:	mov	fp, sp
 c84:	sub	sp, sp, #56	; 0x38
 c88:	str	r0, [fp, #-4]
 c8c:	str	r1, [fp, #-8]
 c90:	movw	r0, #0
 c94:	str	r0, [fp, #-12]
 c98:	ldr	r0, [fp, #-12]
 c9c:	ldr	r1, [fp, #-8]
 ca0:	cmp	r0, r1
 ca4:	bge	e18 <print_escaped+0x19c>
 ca8:	ldr	r0, [fp, #-4]
 cac:	ldr	r1, [fp, #-12]
 cb0:	ldrb	r0, [r0, r1]
 cb4:	strb	r0, [fp, #-13]
 cb8:	ldrb	r0, [fp, #-13]
 cbc:	mov	r1, r0
 cc0:	cmp	r0, #8
 cc4:	str	r1, [fp, #-20]	; 0xffffffec
 cc8:	beq	d30 <print_escaped+0xb4>
 ccc:	b	cd0 <print_escaped+0x54>
 cd0:	ldr	r0, [fp, #-20]	; 0xffffffec
 cd4:	cmp	r0, #9
 cd8:	beq	d80 <print_escaped+0x104>
 cdc:	b	ce0 <print_escaped+0x64>
 ce0:	ldr	r0, [fp, #-20]	; 0xffffffec
 ce4:	cmp	r0, #10
 ce8:	beq	d58 <print_escaped+0xdc>
 cec:	b	cf0 <print_escaped+0x74>
 cf0:	ldr	r0, [fp, #-20]	; 0xffffffec
 cf4:	cmp	r0, #12
 cf8:	beq	d44 <print_escaped+0xc8>
 cfc:	b	d00 <print_escaped+0x84>
 d00:	ldr	r0, [fp, #-20]	; 0xffffffec
 d04:	cmp	r0, #13
 d08:	beq	d6c <print_escaped+0xf0>
 d0c:	b	d10 <print_escaped+0x94>
 d10:	ldr	r0, [fp, #-20]	; 0xffffffec
 d14:	cmp	r0, #34	; 0x22
 d18:	beq	d94 <print_escaped+0x118>
 d1c:	b	d20 <print_escaped+0xa4>
 d20:	ldr	r0, [fp, #-20]	; 0xffffffec
 d24:	cmp	r0, #92	; 0x5c
 d28:	beq	da8 <print_escaped+0x12c>
 d2c:	b	dbc <print_escaped+0x140>
 d30:	movw	r0, #0
 d34:	movt	r0, #0
 d38:	bl	c18 <ff_printf>
 d3c:	str	r0, [fp, #-24]	; 0xffffffe8
 d40:	b	e04 <print_escaped+0x188>
 d44:	movw	r0, #0
 d48:	movt	r0, #0
 d4c:	bl	c18 <ff_printf>
 d50:	str	r0, [sp, #28]
 d54:	b	e04 <print_escaped+0x188>
 d58:	movw	r0, #0
 d5c:	movt	r0, #0
 d60:	bl	c18 <ff_printf>
 d64:	str	r0, [sp, #24]
 d68:	b	e04 <print_escaped+0x188>
 d6c:	movw	r0, #0
 d70:	movt	r0, #0
 d74:	bl	c18 <ff_printf>
 d78:	str	r0, [sp, #20]
 d7c:	b	e04 <print_escaped+0x188>
 d80:	movw	r0, #0
 d84:	movt	r0, #0
 d88:	bl	c18 <ff_printf>
 d8c:	str	r0, [sp, #16]
 d90:	b	e04 <print_escaped+0x188>
 d94:	movw	r0, #0
 d98:	movt	r0, #0
 d9c:	bl	c18 <ff_printf>
 da0:	str	r0, [sp, #12]
 da4:	b	e04 <print_escaped+0x188>
 da8:	movw	r0, #0
 dac:	movt	r0, #0
 db0:	bl	c18 <ff_printf>
 db4:	str	r0, [sp, #8]
 db8:	b	e04 <print_escaped+0x188>
 dbc:	ldrb	r0, [fp, #-13]
 dc0:	cmp	r0, #32
 dc4:	blt	dec <print_escaped+0x170>
 dc8:	ldrb	r0, [fp, #-13]
 dcc:	cmp	r0, #126	; 0x7e
 dd0:	bgt	dec <print_escaped+0x170>
 dd4:	ldrb	r1, [fp, #-13]
 dd8:	movw	r0, #0
 ddc:	movt	r0, #0
 de0:	bl	c18 <ff_printf>
 de4:	str	r0, [sp, #4]
 de8:	b	e00 <print_escaped+0x184>
 dec:	ldrb	r1, [fp, #-13]
 df0:	movw	r0, #0
 df4:	movt	r0, #0
 df8:	bl	c18 <ff_printf>
 dfc:	str	r0, [sp]
 e00:	b	e04 <print_escaped+0x188>
 e04:	b	e08 <print_escaped+0x18c>
 e08:	ldr	r0, [fp, #-12]
 e0c:	add	r0, r0, #1
 e10:	str	r0, [fp, #-12]
 e14:	b	c98 <print_escaped+0x1c>
 e18:	mov	sp, fp
 e1c:	pop	{fp, pc}
