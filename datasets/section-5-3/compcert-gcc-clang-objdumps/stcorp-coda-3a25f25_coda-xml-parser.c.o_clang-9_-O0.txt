
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_parse>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #680	; 0x2a8
       c:	sub	sp, sp, #8192	; 0x2000
      10:	str	r0, [fp, #-16]
      14:	add	r0, sp, #124	; 0x7c
      18:	bl	598 <parser_info_init>
      1c:	movw	r0, #0
      20:	movw	r1, #32
      24:	and	r1, r1, #255	; 0xff
      28:	bl	0 <coda_XML_ParserCreateNS>
      2c:	str	r0, [sp, #124]	; 0x7c
      30:	ldr	r0, [sp, #124]	; 0x7c
      34:	movw	r1, #0
      38:	cmp	r0, r1
      3c:	bne	5c <coda_xml_parse+0x5c>
      40:	mvn	r0, #13
      44:	movw	r1, #0
      48:	movt	r1, #0
      4c:	bl	0 <coda_set_error>
      50:	mvn	r0, #0
      54:	str	r0, [fp, #-12]
      58:	b	580 <coda_xml_parse+0x580>
      5c:	ldr	r0, [fp, #-16]
      60:	str	r0, [sp, #132]	; 0x84
      64:	ldr	r0, [fp, #-16]
      68:	ldr	r0, [r0, #24]
      6c:	movw	r1, #0
      70:	cmp	r0, r1
      74:	movw	r0, #1
      78:	str	r0, [sp, #52]	; 0x34
      7c:	beq	a0 <coda_xml_parse+0xa0>
      80:	ldr	r0, [fp, #-16]
      84:	ldr	r0, [r0, #24]
      88:	ldr	r0, [r0, #28]
      8c:	movw	r1, #0
      90:	cmp	r0, r1
      94:	movw	r0, #0
      98:	moveq	r0, #1
      9c:	str	r0, [sp, #52]	; 0x34
      a0:	ldr	r0, [sp, #52]	; 0x34
      a4:	and	r0, r0, #1
      a8:	str	r0, [sp, #656]	; 0x290
      ac:	ldr	r0, [sp, #656]	; 0x290
      b0:	cmp	r0, #0
      b4:	beq	104 <coda_xml_parse+0x104>
      b8:	movw	r0, #2
      bc:	bl	0 <coda_type_record_new>
      c0:	str	r0, [sp, #112]	; 0x70
      c4:	ldr	r0, [sp, #112]	; 0x70
      c8:	movw	r1, #0
      cc:	cmp	r0, r1
      d0:	bne	e8 <coda_xml_parse+0xe8>
      d4:	ldr	r0, [sp, #124]	; 0x7c
      d8:	bl	0 <coda_XML_ParserFree>
      dc:	mvn	r0, #0
      e0:	str	r0, [fp, #-12]
      e4:	b	580 <coda_xml_parse+0x580>
      e8:	ldr	r0, [sp, #112]	; 0x70
      ec:	movw	r1, #0
      f0:	bl	0 <coda_mem_record_new>
      f4:	str	r0, [sp, #268]	; 0x10c
      f8:	ldr	r0, [sp, #112]	; 0x70
      fc:	bl	0 <coda_type_release>
     100:	b	158 <coda_xml_parse+0x158>
     104:	ldr	r0, [fp, #-16]
     108:	ldr	r0, [r0, #24]
     10c:	ldr	r0, [r0, #28]
     110:	ldr	r0, [r0, #8]
     114:	cmp	r0, #0
     118:	bne	120 <coda_xml_parse+0x120>
     11c:	b	140 <coda_xml_parse+0x140>
     120:	movw	r0, #0
     124:	movt	r0, #0
     128:	movw	r1, #0
     12c:	movt	r1, #0
     130:	movw	r2, #774	; 0x306
     134:	movw	r3, #0
     138:	movt	r3, #0
     13c:	bl	0 <__assert_fail>
     140:	ldr	r0, [fp, #-16]
     144:	ldr	r0, [r0, #24]
     148:	ldr	r0, [r0, #28]
     14c:	movw	r1, #0
     150:	bl	0 <coda_mem_record_new>
     154:	str	r0, [sp, #268]	; 0x10c
     158:	ldr	r0, [sp, #268]	; 0x10c
     15c:	movw	r1, #0
     160:	cmp	r0, r1
     164:	bne	17c <coda_xml_parse+0x17c>
     168:	add	r0, sp, #124	; 0x7c
     16c:	bl	5f8 <parser_info_cleanup>
     170:	mvn	r0, #0
     174:	str	r0, [fp, #-12]
     178:	b	580 <coda_xml_parse+0x580>
     17c:	ldr	r0, [sp, #268]	; 0x10c
     180:	add	r0, r0, #4
     184:	str	r0, [sp, #140]	; 0x8c
     188:	mvn	r0, #0
     18c:	str	r0, [sp, #396]	; 0x18c
     190:	mov	r0, #0
     194:	str	r0, [sp, #524]	; 0x20c
     198:	str	r0, [sp, #136]	; 0x88
     19c:	ldr	r0, [sp, #124]	; 0x7c
     1a0:	add	r1, sp, #124	; 0x7c
     1a4:	bl	0 <coda_XML_SetUserData>
     1a8:	ldr	r0, [sp, #124]	; 0x7c
     1ac:	mov	r1, #2
     1b0:	bl	0 <coda_XML_SetParamEntityParsing>
     1b4:	ldr	r1, [sp, #124]	; 0x7c
     1b8:	movw	r2, #0
     1bc:	movt	r2, #0
     1c0:	movw	r3, #0
     1c4:	movt	r3, #0
     1c8:	str	r0, [sp, #48]	; 0x30
     1cc:	mov	r0, r1
     1d0:	mov	r1, r2
     1d4:	mov	r2, r3
     1d8:	bl	0 <coda_XML_SetElementHandler>
     1dc:	ldr	r0, [sp, #124]	; 0x7c
     1e0:	movw	r1, #0
     1e4:	movt	r1, #0
     1e8:	bl	0 <coda_XML_SetCharacterDataHandler>
     1ec:	ldr	r0, [sp, #124]	; 0x7c
     1f0:	movw	r1, #0
     1f4:	movt	r1, #0
     1f8:	bl	0 <coda_XML_SetNotStandaloneHandler>
     1fc:	ldr	r0, [fp, #-16]
     200:	ldr	r0, [r0, #52]	; 0x34
     204:	ldr	r1, [r0, #8]
     208:	ldr	r0, [r0, #12]
     20c:	asr	r2, r0, #31
     210:	adds	r1, r1, r2, lsr #19
     214:	adc	r0, r0, #0
     218:	lsr	r1, r1, #13
     21c:	orr	r0, r1, r0, lsl #19
     220:	str	r0, [sp, #120]	; 0x78
     224:	ldr	r0, [fp, #-16]
     228:	ldr	r0, [r0, #52]	; 0x34
     22c:	ldr	r1, [r0, #8]
     230:	ldr	r0, [r0, #12]
     234:	ldr	r2, [sp, #120]	; 0x78
     238:	lsl	r3, r2, #13
     23c:	rsbs	r1, r1, r2, lsl #13
     240:	rscs	r0, r0, r3, asr #31
     244:	bge	258 <coda_xml_parse+0x258>
     248:	b	24c <coda_xml_parse+0x24c>
     24c:	ldr	r0, [sp, #120]	; 0x78
     250:	add	r0, r0, #1
     254:	str	r0, [sp, #120]	; 0x78
     258:	movw	r0, #0
     25c:	str	r0, [sp, #116]	; 0x74
     260:	ldr	r0, [sp, #116]	; 0x74
     264:	ldr	r1, [sp, #120]	; 0x78
     268:	cmp	r0, r1
     26c:	bge	50c <coda_xml_parse+0x50c>
     270:	ldr	r0, [fp, #-16]
     274:	ldr	r0, [r0, #52]	; 0x34
     278:	ldr	r0, [r0, #52]	; 0x34
     27c:	cmp	r0, #0
     280:	beq	2e0 <coda_xml_parse+0x2e0>
     284:	ldr	r0, [sp, #116]	; 0x74
     288:	ldr	r1, [sp, #120]	; 0x78
     28c:	sub	r1, r1, #1
     290:	cmp	r0, r1
     294:	bge	2a4 <coda_xml_parse+0x2a4>
     298:	movw	r0, #8192	; 0x2000
     29c:	str	r0, [sp, #104]	; 0x68
     2a0:	b	2c0 <coda_xml_parse+0x2c0>
     2a4:	ldr	r0, [fp, #-16]
     2a8:	ldr	r0, [r0, #52]	; 0x34
     2ac:	ldr	r0, [r0, #8]
     2b0:	ldr	r1, [sp, #120]	; 0x78
     2b4:	sub	r0, r0, r1, lsl #13
     2b8:	add	r0, r0, #8192	; 0x2000
     2bc:	str	r0, [sp, #104]	; 0x68
     2c0:	ldr	r0, [fp, #-16]
     2c4:	ldr	r0, [r0, #52]	; 0x34
     2c8:	ldr	r0, [r0, #48]	; 0x30
     2cc:	ldr	r1, [sp, #116]	; 0x74
     2d0:	lsl	r1, r1, #13
     2d4:	add	r0, r0, r1
     2d8:	str	r0, [sp, #108]	; 0x6c
     2dc:	b	3e0 <coda_xml_parse+0x3e0>
     2e0:	ldr	r0, [fp, #-16]
     2e4:	ldr	r0, [r0, #52]	; 0x34
     2e8:	ldr	r0, [r0, #56]	; 0x38
     2ec:	ldr	r1, [sp, #116]	; 0x74
     2f0:	lsl	r1, r1, #13
     2f4:	movw	r2, #0
     2f8:	bl	0 <lseek>
     2fc:	cmp	r0, #0
     300:	bge	374 <coda_xml_parse+0x374>
     304:	add	r2, sp, #79	; 0x4f
     308:	ldr	r0, [sp, #116]	; 0x74
     30c:	lsl	r1, r0, #13
     310:	mov	r3, r1
     314:	sbfx	r0, r0, #18, #1
     318:	str	r0, [sp, #44]	; 0x2c
     31c:	mov	r0, r1
     320:	ldr	r1, [sp, #44]	; 0x2c
     324:	str	r3, [sp, #40]	; 0x28
     328:	bl	0 <coda_str64>
     32c:	add	r2, sp, #79	; 0x4f
     330:	str	r2, [sp, #36]	; 0x24
     334:	bl	0 <__errno_location>
     338:	ldr	r0, [r0]
     33c:	bl	0 <strerror>
     340:	mvn	r1, #21
     344:	str	r0, [sp, #32]
     348:	mov	r0, r1
     34c:	movw	r1, #0
     350:	movt	r1, #0
     354:	ldr	r2, [sp, #36]	; 0x24
     358:	ldr	r3, [sp, #32]
     35c:	bl	0 <coda_set_error>
     360:	add	r0, sp, #124	; 0x7c
     364:	bl	5f8 <parser_info_cleanup>
     368:	mvn	r0, #0
     36c:	str	r0, [fp, #-12]
     370:	b	580 <coda_xml_parse+0x580>
     374:	add	r1, sp, #672	; 0x2a0
     378:	ldr	r0, [fp, #-16]
     37c:	ldr	r0, [r0, #52]	; 0x34
     380:	ldr	r0, [r0, #56]	; 0x38
     384:	movw	r2, #8192	; 0x2000
     388:	bl	0 <read>
     38c:	str	r0, [sp, #104]	; 0x68
     390:	ldr	r0, [sp, #104]	; 0x68
     394:	cmp	r0, #0
     398:	bge	3d8 <coda_xml_parse+0x3d8>
     39c:	bl	0 <__errno_location>
     3a0:	ldr	r0, [r0]
     3a4:	bl	0 <strerror>
     3a8:	mvn	r1, #21
     3ac:	str	r0, [sp, #28]
     3b0:	mov	r0, r1
     3b4:	movw	r1, #0
     3b8:	movt	r1, #0
     3bc:	ldr	r2, [sp, #28]
     3c0:	bl	0 <coda_set_error>
     3c4:	add	r0, sp, #124	; 0x7c
     3c8:	bl	5f8 <parser_info_cleanup>
     3cc:	mvn	r0, #0
     3d0:	str	r0, [fp, #-12]
     3d4:	b	580 <coda_xml_parse+0x580>
     3d8:	add	r0, sp, #672	; 0x2a0
     3dc:	str	r0, [sp, #108]	; 0x6c
     3e0:	ldr	r0, [pc, #420]	; 58c <coda_xml_parse+0x58c>
     3e4:	ldr	r0, [pc, r0]
     3e8:	str	r0, [sp, #24]
     3ec:	bl	0 <__aeabi_read_tp>
     3f0:	mov	r1, #0
     3f4:	ldr	r2, [sp, #24]
     3f8:	str	r1, [r0, r2]
     3fc:	ldr	r0, [sp, #124]	; 0x7c
     400:	ldr	r1, [sp, #108]	; 0x6c
     404:	ldr	r2, [sp, #104]	; 0x68
     408:	ldr	r3, [sp, #116]	; 0x74
     40c:	ldr	ip, [sp, #120]	; 0x78
     410:	sub	ip, ip, #1
     414:	cmp	r3, ip
     418:	movw	r3, #0
     41c:	moveq	r3, #1
     420:	and	r3, r3, #1
     424:	bl	0 <coda_XML_Parse>
     428:	str	r0, [sp, #100]	; 0x64
     42c:	ldr	r0, [sp, #100]	; 0x64
     430:	cmp	r0, #0
     434:	beq	458 <coda_xml_parse+0x458>
     438:	ldr	r0, [pc, #336]	; 590 <coda_xml_parse+0x590>
     43c:	ldr	r0, [pc, r0]
     440:	str	r0, [sp, #20]
     444:	bl	0 <__aeabi_read_tp>
     448:	ldr	r1, [sp, #20]
     44c:	ldr	r0, [r0, r1]
     450:	cmp	r0, #0
     454:	beq	4f8 <coda_xml_parse+0x4f8>
     458:	ldr	r0, [pc, #308]	; 594 <coda_xml_parse+0x594>
     45c:	ldr	r0, [pc, r0]
     460:	str	r0, [sp, #16]
     464:	bl	0 <__aeabi_read_tp>
     468:	ldr	r1, [sp, #16]
     46c:	ldr	r0, [r0, r1]
     470:	cmp	r0, #0
     474:	bne	4a0 <coda_xml_parse+0x4a0>
     478:	ldr	r0, [sp, #124]	; 0x7c
     47c:	bl	0 <coda_XML_GetErrorCode>
     480:	bl	0 <coda_XML_ErrorString>
     484:	mvn	r1, #13
     488:	str	r0, [sp, #12]
     48c:	mov	r0, r1
     490:	movw	r1, #0
     494:	movt	r1, #0
     498:	ldr	r2, [sp, #12]
     49c:	bl	0 <coda_set_error>
     4a0:	add	r2, sp, #58	; 0x3a
     4a4:	ldr	r0, [sp, #124]	; 0x7c
     4a8:	str	r2, [sp, #8]
     4ac:	bl	0 <coda_XML_GetCurrentByteIndex>
     4b0:	add	r2, sp, #58	; 0x3a
     4b4:	bl	0 <coda_str64>
     4b8:	ldr	r0, [sp, #124]	; 0x7c
     4bc:	bl	0 <coda_XML_GetCurrentLineNumber>
     4c0:	movw	r2, #0
     4c4:	movt	r2, #0
     4c8:	str	r0, [sp, #4]
     4cc:	mov	r0, r2
     4d0:	ldr	r2, [sp, #4]
     4d4:	str	r1, [sp]
     4d8:	mov	r1, r2
     4dc:	ldr	r2, [sp, #8]
     4e0:	bl	0 <coda_add_error_message>
     4e4:	add	r0, sp, #124	; 0x7c
     4e8:	bl	5f8 <parser_info_cleanup>
     4ec:	mvn	r0, #0
     4f0:	str	r0, [fp, #-12]
     4f4:	b	580 <coda_xml_parse+0x580>
     4f8:	b	4fc <coda_xml_parse+0x4fc>
     4fc:	ldr	r0, [sp, #116]	; 0x74
     500:	add	r0, r0, #1
     504:	str	r0, [sp, #116]	; 0x74
     508:	b	260 <coda_xml_parse+0x260>
     50c:	ldr	r0, [sp, #124]	; 0x7c
     510:	bl	0 <coda_XML_ParserFree>
     514:	movw	r0, #0
     518:	str	r0, [sp, #124]	; 0x7c
     51c:	ldr	r0, [sp, #656]	; 0x290
     520:	cmp	r0, #0
     524:	beq	55c <coda_xml_parse+0x55c>
     528:	add	r0, sp, #124	; 0x7c
     52c:	add	r0, r0, #144	; 0x90
     530:	ldr	r1, [sp, #268]	; 0x10c
     534:	ldr	r1, [r1, #4]
     538:	bl	0 <coda_mem_type_update>
     53c:	cmp	r0, #0
     540:	beq	558 <coda_xml_parse+0x558>
     544:	add	r0, sp, #124	; 0x7c
     548:	bl	5f8 <parser_info_cleanup>
     54c:	mvn	r0, #0
     550:	str	r0, [fp, #-12]
     554:	b	580 <coda_xml_parse+0x580>
     558:	b	55c <coda_xml_parse+0x55c>
     55c:	ldr	r0, [sp, #268]	; 0x10c
     560:	ldr	r1, [fp, #-16]
     564:	str	r0, [r1, #20]
     568:	mvn	r0, #0
     56c:	str	r0, [sp, #136]	; 0x88
     570:	add	r0, sp, #124	; 0x7c
     574:	bl	5f8 <parser_info_cleanup>
     578:	movw	r0, #0
     57c:	str	r0, [fp, #-12]
     580:	ldr	r0, [fp, #-12]
     584:	sub	sp, fp, #8
     588:	pop	{r4, r5, fp, pc}
     58c:	.word	0x000001a0
     590:	.word	0x0000014c
     594:	.word	0x00000130

00000598 <parser_info_init>:
     598:	sub	sp, sp, #4
     59c:	str	r0, [sp]
     5a0:	ldr	r0, [sp]
     5a4:	movw	r1, #0
     5a8:	str	r1, [r0]
     5ac:	ldr	r0, [sp]
     5b0:	str	r1, [r0, #4]
     5b4:	ldr	r0, [sp]
     5b8:	str	r1, [r0, #8]
     5bc:	ldr	r0, [sp]
     5c0:	mvn	r2, #0
     5c4:	str	r2, [r0, #12]
     5c8:	ldr	r0, [sp]
     5cc:	str	r1, [r0, #528]	; 0x210
     5d0:	ldr	r0, [sp]
     5d4:	str	r1, [r0, #532]	; 0x214
     5d8:	ldr	r0, [sp]
     5dc:	str	r1, [r0, #536]	; 0x218
     5e0:	ldr	r0, [sp]
     5e4:	str	r1, [r0, #540]	; 0x21c
     5e8:	ldr	r0, [sp]
     5ec:	str	r1, [r0, #544]	; 0x220
     5f0:	add	sp, sp, #4
     5f4:	bx	lr

000005f8 <parser_info_cleanup>:
     5f8:	push	{fp, lr}
     5fc:	mov	fp, sp
     600:	sub	sp, sp, #8
     604:	str	r0, [sp, #4]
     608:	ldr	r0, [sp, #4]
     60c:	ldr	r0, [r0]
     610:	movw	r1, #0
     614:	cmp	r0, r1
     618:	beq	628 <parser_info_cleanup+0x30>
     61c:	ldr	r0, [sp, #4]
     620:	ldr	r0, [r0]
     624:	bl	0 <coda_XML_ParserFree>
     628:	movw	r0, #0
     62c:	str	r0, [sp]
     630:	ldr	r0, [sp]
     634:	ldr	r1, [sp, #4]
     638:	ldr	r1, [r1, #12]
     63c:	cmp	r0, r1
     640:	bgt	690 <parser_info_cleanup+0x98>
     644:	ldr	r0, [sp, #4]
     648:	add	r0, r0, #144	; 0x90
     64c:	ldr	r1, [sp]
     650:	add	r0, r0, r1, lsl #2
     654:	ldr	r0, [r0]
     658:	movw	r1, #0
     65c:	cmp	r0, r1
     660:	beq	67c <parser_info_cleanup+0x84>
     664:	ldr	r0, [sp, #4]
     668:	add	r0, r0, #144	; 0x90
     66c:	ldr	r1, [sp]
     670:	add	r0, r0, r1, lsl #2
     674:	ldr	r0, [r0]
     678:	bl	0 <coda_dynamic_type_delete>
     67c:	b	680 <parser_info_cleanup+0x88>
     680:	ldr	r0, [sp]
     684:	add	r0, r0, #1
     688:	str	r0, [sp]
     68c:	b	630 <parser_info_cleanup+0x38>
     690:	ldr	r0, [sp, #4]
     694:	ldr	r0, [r0, #528]	; 0x210
     698:	movw	r1, #0
     69c:	cmp	r0, r1
     6a0:	beq	6b0 <parser_info_cleanup+0xb8>
     6a4:	ldr	r0, [sp, #4]
     6a8:	ldr	r0, [r0, #528]	; 0x210
     6ac:	bl	0 <coda_dynamic_type_delete>
     6b0:	ldr	r0, [sp, #4]
     6b4:	ldr	r0, [r0, #544]	; 0x220
     6b8:	movw	r1, #0
     6bc:	cmp	r0, r1
     6c0:	beq	6d0 <parser_info_cleanup+0xd8>
     6c4:	ldr	r0, [sp, #4]
     6c8:	ldr	r0, [r0, #544]	; 0x220
     6cc:	bl	0 <free>
     6d0:	mov	sp, fp
     6d4:	pop	{fp, pc}

000006d8 <start_element_handler>:
     6d8:	push	{fp, lr}
     6dc:	mov	fp, sp
     6e0:	sub	sp, sp, #72	; 0x48
     6e4:	str	r0, [fp, #-4]
     6e8:	str	r1, [fp, #-8]
     6ec:	str	r2, [fp, #-12]
     6f0:	ldr	r0, [fp, #-4]
     6f4:	str	r0, [fp, #-16]
     6f8:	ldr	r0, [fp, #-16]
     6fc:	add	r1, r0, #144	; 0x90
     700:	ldr	r0, [r0, #12]
     704:	add	r0, r1, r0, lsl #2
     708:	ldr	r0, [r0]
     70c:	movw	r1, #0
     710:	cmp	r0, r1
     714:	beq	798 <start_element_handler+0xc0>
     718:	ldr	r0, [fp, #-16]
     71c:	add	r1, r0, #144	; 0x90
     720:	ldr	r0, [r0, #12]
     724:	add	r0, r1, r0, lsl #2
     728:	ldr	r0, [r0]
     72c:	ldr	r0, [r0, #4]
     730:	ldr	r0, [r0]
     734:	cmp	r0, #2
     738:	beq	794 <start_element_handler+0xbc>
     73c:	ldr	r0, [fp, #-16]
     740:	ldr	r1, [r0, #12]
     744:	add	r2, r0, r1, lsl #2
     748:	ldr	r2, [r2, #400]	; 0x190
     74c:	add	r0, r0, #144	; 0x90
     750:	add	r0, r0, r1, lsl #2
     754:	ldr	r0, [r0]
     758:	ldr	r0, [r0, #4]
     75c:	ldr	r0, [r0]
     760:	str	r2, [sp, #24]
     764:	bl	0 <coda_type_get_format_name>
     768:	ldr	r1, [pc, #2244]	; 1034 <start_element_handler+0x95c>
     76c:	str	r0, [sp, #20]
     770:	mov	r0, r1
     774:	movw	r1, #0
     778:	movt	r1, #0
     77c:	ldr	r2, [sp, #24]
     780:	ldr	r3, [sp, #20]
     784:	bl	0 <coda_set_error>
     788:	ldr	r0, [fp, #-16]
     78c:	bl	1778 <abort_parser>
     790:	b	102c <start_element_handler+0x954>
     794:	b	7c8 <start_element_handler+0xf0>
     798:	ldr	r0, [pc, #2196]	; 1034 <start_element_handler+0x95c>
     79c:	ldr	r1, [fp, #-16]
     7a0:	add	r2, r1, #400	; 0x190
     7a4:	ldr	r1, [r1, #12]
     7a8:	add	r1, r2, r1, lsl #2
     7ac:	ldr	r2, [r1]
     7b0:	movw	r1, #0
     7b4:	movt	r1, #0
     7b8:	bl	0 <coda_set_error>
     7bc:	ldr	r0, [fp, #-16]
     7c0:	bl	1778 <abort_parser>
     7c4:	b	102c <start_element_handler+0x954>
     7c8:	ldr	r0, [fp, #-16]
     7cc:	movw	r1, #0
     7d0:	str	r1, [r0, #536]	; 0x218
     7d4:	ldr	r0, [fp, #-16]
     7d8:	ldr	r1, [r0, #12]
     7dc:	add	r1, r1, #1
     7e0:	str	r1, [r0, #12]
     7e4:	ldr	r0, [fp, #-16]
     7e8:	ldr	r0, [r0, #12]
     7ec:	cmp	r0, #32
     7f0:	blt	814 <start_element_handler+0x13c>
     7f4:	ldr	r0, [pc, #2104]	; 1034 <start_element_handler+0x95c>
     7f8:	movw	r1, #0
     7fc:	movt	r1, #0
     800:	movw	r2, #32
     804:	bl	0 <coda_set_error>
     808:	ldr	r0, [fp, #-16]
     80c:	bl	1778 <abort_parser>
     810:	b	102c <start_element_handler+0x954>
     814:	ldr	r0, [fp, #-16]
     818:	ldr	r1, [r0, #12]
     81c:	add	r0, r0, r1, lsl #2
     820:	mov	r1, #0
     824:	str	r1, [r0, #144]	; 0x90
     828:	ldr	r0, [fp, #-16]
     82c:	add	r1, r0, #144	; 0x90
     830:	ldr	r0, [r0, #12]
     834:	sub	r0, r0, #1
     838:	add	r0, r1, r0, lsl #2
     83c:	ldr	r0, [r0]
     840:	str	r0, [fp, #-24]	; 0xffffffe8
     844:	ldr	r0, [fp, #-24]	; 0xffffffe8
     848:	ldr	r0, [r0, #4]
     84c:	ldr	r0, [r0, #44]	; 0x2c
     850:	ldr	r1, [fp, #-8]
     854:	bl	0 <coda_hashtable_get_index_from_name>
     858:	str	r0, [fp, #-28]	; 0xffffffe4
     85c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     860:	cmp	r0, #0
     864:	bge	89c <start_element_handler+0x1c4>
     868:	ldr	r0, [fp, #-24]	; 0xffffffe8
     86c:	ldr	r0, [r0, #4]
     870:	ldr	r0, [r0, #44]	; 0x2c
     874:	ldr	r1, [fp, #-8]
     878:	str	r0, [sp, #16]
     87c:	mov	r0, r1
     880:	bl	0 <coda_element_name_from_xml_name>
     884:	ldr	r1, [sp, #16]
     888:	str	r0, [sp, #12]
     88c:	mov	r0, r1
     890:	ldr	r1, [sp, #12]
     894:	bl	0 <coda_hashtable_get_index_from_name>
     898:	str	r0, [fp, #-28]	; 0xffffffe4
     89c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     8a0:	cmp	r0, #0
     8a4:	bge	a34 <start_element_handler+0x35c>
     8a8:	ldr	r0, [fp, #-16]
     8ac:	ldr	r0, [r0, #532]	; 0x214
     8b0:	cmp	r0, #0
     8b4:	beq	9d0 <start_element_handler+0x2f8>
     8b8:	movw	r0, #2
     8bc:	bl	0 <coda_type_record_new>
     8c0:	str	r0, [fp, #-20]	; 0xffffffec
     8c4:	ldr	r0, [fp, #-20]	; 0xffffffec
     8c8:	movw	r1, #0
     8cc:	cmp	r0, r1
     8d0:	bne	8e0 <start_element_handler+0x208>
     8d4:	ldr	r0, [fp, #-16]
     8d8:	bl	1778 <abort_parser>
     8dc:	b	102c <start_element_handler+0x954>
     8e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8e4:	ldr	r0, [r0, #4]
     8e8:	ldr	r1, [fp, #-8]
     8ec:	ldr	r2, [fp, #-20]	; 0xffffffec
     8f0:	bl	0 <coda_type_record_create_field>
     8f4:	cmp	r0, #0
     8f8:	beq	910 <start_element_handler+0x238>
     8fc:	ldr	r0, [fp, #-20]	; 0xffffffec
     900:	bl	0 <coda_type_release>
     904:	ldr	r0, [fp, #-16]
     908:	bl	1778 <abort_parser>
     90c:	b	102c <start_element_handler+0x954>
     910:	ldr	r0, [fp, #-20]	; 0xffffffec
     914:	bl	0 <coda_type_release>
     918:	sub	r0, fp, #24
     91c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     920:	ldr	r1, [r1, #4]
     924:	bl	0 <coda_mem_type_update>
     928:	cmp	r0, #0
     92c:	beq	93c <start_element_handler+0x264>
     930:	ldr	r0, [fp, #-16]
     934:	bl	1778 <abort_parser>
     938:	b	102c <start_element_handler+0x954>
     93c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     940:	ldr	r1, [fp, #-16]
     944:	add	r2, r1, #144	; 0x90
     948:	ldr	r1, [r1, #12]
     94c:	sub	r1, r1, #1
     950:	add	r1, r2, r1, lsl #2
     954:	ldr	r1, [r1]
     958:	cmp	r0, r1
     95c:	bne	964 <start_element_handler+0x28c>
     960:	b	984 <start_element_handler+0x2ac>
     964:	movw	r0, #0
     968:	movt	r0, #0
     96c:	movw	r1, #0
     970:	movt	r1, #0
     974:	movw	r2, #394	; 0x18a
     978:	movw	r3, #0
     97c:	movt	r3, #0
     980:	bl	0 <__assert_fail>
     984:	ldr	r0, [fp, #-24]	; 0xffffffe8
     988:	ldr	r0, [r0, #4]
     98c:	ldr	r0, [r0, #44]	; 0x2c
     990:	ldr	r1, [fp, #-8]
     994:	bl	0 <coda_hashtable_get_index_from_name>
     998:	str	r0, [fp, #-28]	; 0xffffffe4
     99c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     9a0:	cmp	r0, #0
     9a4:	blt	9ac <start_element_handler+0x2d4>
     9a8:	b	9cc <start_element_handler+0x2f4>
     9ac:	movw	r0, #0
     9b0:	movt	r0, #0
     9b4:	movw	r1, #0
     9b8:	movt	r1, #0
     9bc:	movw	r2, #396	; 0x18c
     9c0:	movw	r3, #0
     9c4:	movt	r3, #0
     9c8:	bl	0 <__assert_fail>
     9cc:	b	a30 <start_element_handler+0x358>
     9d0:	ldr	r0, [fp, #-16]
     9d4:	ldr	r0, [r0, #12]
     9d8:	cmp	r0, #1
     9dc:	bne	9f8 <start_element_handler+0x320>
     9e0:	ldr	r0, [pc, #1612]	; 1034 <start_element_handler+0x95c>
     9e4:	ldr	r2, [fp, #-8]
     9e8:	movw	r1, #0
     9ec:	movt	r1, #0
     9f0:	bl	0 <coda_set_error>
     9f4:	b	a24 <start_element_handler+0x34c>
     9f8:	ldr	r0, [pc, #1588]	; 1034 <start_element_handler+0x95c>
     9fc:	ldr	r2, [fp, #-8]
     a00:	ldr	r1, [fp, #-16]
     a04:	add	r3, r1, #400	; 0x190
     a08:	ldr	r1, [r1, #12]
     a0c:	sub	r1, r1, #1
     a10:	add	r1, r3, r1, lsl #2
     a14:	ldr	r3, [r1]
     a18:	movw	r1, #0
     a1c:	movt	r1, #0
     a20:	bl	0 <coda_set_error>
     a24:	ldr	r0, [fp, #-16]
     a28:	bl	1778 <abort_parser>
     a2c:	b	102c <start_element_handler+0x954>
     a30:	b	a34 <start_element_handler+0x35c>
     a34:	ldr	r0, [fp, #-28]	; 0xffffffe4
     a38:	ldr	r1, [fp, #-16]
     a3c:	ldr	r2, [r1, #12]
     a40:	add	r1, r1, r2, lsl #2
     a44:	str	r0, [r1, #272]	; 0x110
     a48:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a4c:	ldr	r0, [r0, #4]
     a50:	ldr	r0, [r0, #52]	; 0x34
     a54:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a58:	ldr	r0, [r0, r1, lsl #2]
     a5c:	add	r0, r0, #8
     a60:	ldr	r1, [fp, #-16]
     a64:	ldr	r2, [r1, #12]
     a68:	add	r1, r1, r2, lsl #2
     a6c:	str	r0, [r1, #16]
     a70:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a74:	ldr	r0, [r0, #4]
     a78:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a7c:	ldr	r2, [fp, #-16]
     a80:	add	r3, r2, #400	; 0x190
     a84:	ldr	r2, [r2, #12]
     a88:	add	r2, r3, r2, lsl #2
     a8c:	bl	0 <coda_type_get_record_field_real_name>
     a90:	cmp	r0, #0
     a94:	beq	aa4 <start_element_handler+0x3cc>
     a98:	ldr	r0, [fp, #-16]
     a9c:	bl	1778 <abort_parser>
     aa0:	b	102c <start_element_handler+0x954>
     aa4:	ldr	r0, [fp, #-16]
     aa8:	add	r1, r0, #16
     aac:	ldr	r0, [r0, #12]
     ab0:	add	r0, r1, r0, lsl #2
     ab4:	ldr	r0, [r0]
     ab8:	ldr	r0, [r0]
     abc:	str	r0, [fp, #-20]	; 0xffffffec
     ac0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ac4:	ldr	r0, [r0, #8]
     ac8:	cmp	r0, #1
     acc:	bne	b84 <start_element_handler+0x4ac>
     ad0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ad4:	ldr	r0, [r0]
     ad8:	cmp	r0, #2
     adc:	bne	b80 <start_element_handler+0x4a8>
     ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ae4:	ldr	r0, [r0, #20]
     ae8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     aec:	add	r0, r0, r1, lsl #2
     af0:	ldr	r0, [r0]
     af4:	movw	r1, #0
     af8:	cmp	r0, r1
     afc:	bne	b4c <start_element_handler+0x474>
     b00:	ldr	r0, [fp, #-20]	; 0xffffffec
     b04:	mov	r1, #0
     b08:	bl	0 <coda_mem_array_new>
     b0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     b10:	ldr	r1, [r1, #20]
     b14:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b18:	str	r0, [r1, r2, lsl #2]
     b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b20:	ldr	r0, [r0, #20]
     b24:	ldr	r1, [fp, #-28]	; 0xffffffe4
     b28:	add	r0, r0, r1, lsl #2
     b2c:	ldr	r0, [r0]
     b30:	movw	r1, #0
     b34:	cmp	r0, r1
     b38:	bne	b48 <start_element_handler+0x470>
     b3c:	ldr	r0, [fp, #-16]
     b40:	bl	1778 <abort_parser>
     b44:	b	102c <start_element_handler+0x954>
     b48:	b	b4c <start_element_handler+0x474>
     b4c:	ldr	r0, [fp, #-20]	; 0xffffffec
     b50:	add	r0, r0, #40	; 0x28
     b54:	ldr	r1, [fp, #-16]
     b58:	ldr	r2, [r1, #12]
     b5c:	add	r1, r1, r2, lsl #2
     b60:	str	r0, [r1, #16]
     b64:	ldr	r0, [fp, #-16]
     b68:	add	r1, r0, #16
     b6c:	ldr	r0, [r0, #12]
     b70:	add	r0, r1, r0, lsl #2
     b74:	ldr	r0, [r0]
     b78:	ldr	r0, [r0]
     b7c:	str	r0, [fp, #-20]	; 0xffffffec
     b80:	b	d30 <start_element_handler+0x658>
     b84:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b88:	ldr	r0, [r0, #20]
     b8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     b90:	add	r0, r0, r1, lsl #2
     b94:	ldr	r0, [r0]
     b98:	movw	r1, #0
     b9c:	cmp	r0, r1
     ba0:	beq	d2c <start_element_handler+0x654>
     ba4:	ldr	r0, [fp, #-16]
     ba8:	ldr	r0, [r0, #532]	; 0x214
     bac:	cmp	r0, #0
     bb0:	beq	cf0 <start_element_handler+0x618>
     bb4:	movw	r0, #2
     bb8:	bl	0 <coda_type_array_new>
     bbc:	str	r0, [sp, #36]	; 0x24
     bc0:	ldr	r0, [sp, #36]	; 0x24
     bc4:	movw	r1, #0
     bc8:	cmp	r0, r1
     bcc:	bne	bdc <start_element_handler+0x504>
     bd0:	ldr	r0, [fp, #-16]
     bd4:	bl	1778 <abort_parser>
     bd8:	b	102c <start_element_handler+0x954>
     bdc:	ldr	r0, [sp, #36]	; 0x24
     be0:	ldr	r1, [fp, #-20]	; 0xffffffec
     be4:	bl	0 <coda_type_array_set_base_type>
     be8:	cmp	r0, #0
     bec:	beq	c04 <start_element_handler+0x52c>
     bf0:	ldr	r0, [sp, #36]	; 0x24
     bf4:	bl	0 <coda_type_release>
     bf8:	ldr	r0, [fp, #-16]
     bfc:	bl	1778 <abort_parser>
     c00:	b	102c <start_element_handler+0x954>
     c04:	ldr	r0, [sp, #36]	; 0x24
     c08:	ldr	r1, [fp, #-16]
     c0c:	add	r2, r1, #16
     c10:	ldr	r1, [r1, #12]
     c14:	add	r1, r2, r1, lsl #2
     c18:	ldr	r1, [r1]
     c1c:	str	r0, [r1]
     c20:	ldr	r0, [fp, #-20]	; 0xffffffec
     c24:	bl	0 <coda_type_release>
     c28:	ldr	r0, [sp, #36]	; 0x24
     c2c:	movw	r1, #0
     c30:	bl	0 <coda_type_array_add_variable_dimension>
     c34:	cmp	r0, #0
     c38:	beq	c48 <start_element_handler+0x570>
     c3c:	ldr	r0, [fp, #-16]
     c40:	bl	1778 <abort_parser>
     c44:	b	102c <start_element_handler+0x954>
     c48:	ldr	r0, [sp, #36]	; 0x24
     c4c:	movw	r1, #0
     c50:	bl	0 <coda_mem_array_new>
     c54:	str	r0, [fp, #-32]	; 0xffffffe0
     c58:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c5c:	movw	r1, #0
     c60:	cmp	r0, r1
     c64:	bne	c74 <start_element_handler+0x59c>
     c68:	ldr	r0, [fp, #-16]
     c6c:	bl	1778 <abort_parser>
     c70:	b	102c <start_element_handler+0x954>
     c74:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c78:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c7c:	ldr	r1, [r1, #20]
     c80:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c84:	add	r1, r1, r2, lsl #2
     c88:	ldr	r1, [r1]
     c8c:	bl	0 <coda_mem_array_add_element>
     c90:	cmp	r0, #0
     c94:	beq	ca4 <start_element_handler+0x5cc>
     c98:	ldr	r0, [fp, #-16]
     c9c:	bl	1778 <abort_parser>
     ca0:	b	102c <start_element_handler+0x954>
     ca4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ca8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     cac:	ldr	r1, [r1, #20]
     cb0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     cb4:	str	r0, [r1, r2, lsl #2]
     cb8:	ldr	r0, [sp, #36]	; 0x24
     cbc:	add	r0, r0, #40	; 0x28
     cc0:	ldr	r1, [fp, #-16]
     cc4:	ldr	r2, [r1, #12]
     cc8:	add	r1, r1, r2, lsl #2
     ccc:	str	r0, [r1, #16]
     cd0:	ldr	r0, [fp, #-16]
     cd4:	add	r1, r0, #16
     cd8:	ldr	r0, [r0, #12]
     cdc:	add	r0, r1, r0, lsl #2
     ce0:	ldr	r0, [r0]
     ce4:	ldr	r0, [r0]
     ce8:	str	r0, [fp, #-20]	; 0xffffffec
     cec:	b	d28 <start_element_handler+0x650>
     cf0:	ldr	r0, [pc, #828]	; 1034 <start_element_handler+0x95c>
     cf4:	ldr	r2, [fp, #-8]
     cf8:	ldr	r1, [fp, #-16]
     cfc:	add	r3, r1, #400	; 0x190
     d00:	ldr	r1, [r1, #12]
     d04:	sub	r1, r1, #1
     d08:	add	r1, r3, r1, lsl #2
     d0c:	ldr	r3, [r1]
     d10:	movw	r1, #0
     d14:	movt	r1, #0
     d18:	bl	0 <coda_set_error>
     d1c:	ldr	r0, [fp, #-16]
     d20:	bl	1778 <abort_parser>
     d24:	b	102c <start_element_handler+0x954>
     d28:	b	d2c <start_element_handler+0x654>
     d2c:	b	d30 <start_element_handler+0x658>
     d30:	ldr	r0, [fp, #-20]	; 0xffffffec
     d34:	ldr	r0, [r0, #36]	; 0x24
     d38:	movw	r1, #0
     d3c:	cmp	r0, r1
     d40:	bne	e5c <start_element_handler+0x784>
     d44:	ldr	r0, [fp, #-16]
     d48:	movw	r1, #0
     d4c:	str	r1, [r0, #528]	; 0x210
     d50:	ldr	r0, [fp, #-16]
     d54:	ldr	r0, [r0, #532]	; 0x214
     d58:	cmp	r0, #0
     d5c:	beq	e1c <start_element_handler+0x744>
     d60:	ldr	r0, [fp, #-12]
     d64:	ldr	r0, [r0]
     d68:	movw	r1, #0
     d6c:	cmp	r0, r1
     d70:	bne	d94 <start_element_handler+0x6bc>
     d74:	ldr	r0, [fp, #-8]
     d78:	ldr	r1, [fp, #-8]
     d7c:	str	r0, [sp, #8]
     d80:	mov	r0, r1
     d84:	bl	0 <coda_element_name_from_xml_name>
     d88:	ldr	r1, [sp, #8]
     d8c:	cmp	r1, r0
     d90:	beq	e18 <start_element_handler+0x740>
     d94:	movw	r0, #2
     d98:	bl	0 <coda_type_record_new>
     d9c:	ldr	r1, [fp, #-20]	; 0xffffffec
     da0:	str	r0, [r1, #36]	; 0x24
     da4:	ldr	r0, [fp, #-20]	; 0xffffffec
     da8:	ldr	r0, [r0, #36]	; 0x24
     dac:	movw	r1, #0
     db0:	cmp	r0, r1
     db4:	bne	dc4 <start_element_handler+0x6ec>
     db8:	ldr	r0, [fp, #-16]
     dbc:	bl	1778 <abort_parser>
     dc0:	b	102c <start_element_handler+0x954>
     dc4:	ldr	r0, [fp, #-20]	; 0xffffffec
     dc8:	ldr	r0, [r0, #36]	; 0x24
     dcc:	ldr	r1, [fp, #-16]
     dd0:	ldr	r1, [r1, #8]
     dd4:	ldr	r2, [fp, #-8]
     dd8:	ldr	r3, [fp, #-12]
     ddc:	ldr	ip, [fp, #-16]
     de0:	ldr	ip, [ip, #532]	; 0x214
     de4:	str	ip, [sp]
     de8:	bl	17b0 <attribute_record_new>
     dec:	ldr	r1, [fp, #-16]
     df0:	str	r0, [r1, #528]	; 0x210
     df4:	ldr	r0, [fp, #-16]
     df8:	ldr	r0, [r0, #528]	; 0x210
     dfc:	movw	r1, #0
     e00:	cmp	r0, r1
     e04:	bne	e14 <start_element_handler+0x73c>
     e08:	ldr	r0, [fp, #-16]
     e0c:	bl	1778 <abort_parser>
     e10:	b	102c <start_element_handler+0x954>
     e14:	b	e18 <start_element_handler+0x740>
     e18:	b	e58 <start_element_handler+0x780>
     e1c:	ldr	r0, [fp, #-12]
     e20:	ldr	r0, [r0]
     e24:	movw	r1, #0
     e28:	cmp	r0, r1
     e2c:	beq	e54 <start_element_handler+0x77c>
     e30:	ldr	r0, [pc, #508]	; 1034 <start_element_handler+0x95c>
     e34:	ldr	r1, [fp, #-12]
     e38:	ldr	r2, [r1]
     e3c:	movw	r1, #0
     e40:	movt	r1, #0
     e44:	bl	0 <coda_set_error>
     e48:	ldr	r0, [fp, #-16]
     e4c:	bl	1778 <abort_parser>
     e50:	b	102c <start_element_handler+0x954>
     e54:	b	e58 <start_element_handler+0x780>
     e58:	b	eb0 <start_element_handler+0x7d8>
     e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e60:	ldr	r0, [r0, #36]	; 0x24
     e64:	ldr	r1, [fp, #-16]
     e68:	ldr	r1, [r1, #8]
     e6c:	ldr	r2, [fp, #-8]
     e70:	ldr	r3, [fp, #-12]
     e74:	ldr	ip, [fp, #-16]
     e78:	ldr	ip, [ip, #532]	; 0x214
     e7c:	str	ip, [sp]
     e80:	bl	17b0 <attribute_record_new>
     e84:	ldr	r1, [fp, #-16]
     e88:	str	r0, [r1, #528]	; 0x210
     e8c:	ldr	r0, [fp, #-16]
     e90:	ldr	r0, [r0, #528]	; 0x210
     e94:	movw	r1, #0
     e98:	cmp	r0, r1
     e9c:	bne	eac <start_element_handler+0x7d4>
     ea0:	ldr	r0, [fp, #-16]
     ea4:	bl	1778 <abort_parser>
     ea8:	b	102c <start_element_handler+0x954>
     eac:	b	eb0 <start_element_handler+0x7d8>
     eb0:	ldr	r0, [fp, #-20]	; 0xffffffec
     eb4:	ldr	r0, [r0]
     eb8:	cmp	r0, #2
     ebc:	bne	102c <start_element_handler+0x954>
     ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ec4:	ldr	r0, [r0, #8]
     ec8:	cmp	r0, #0
     ecc:	bne	102c <start_element_handler+0x954>
     ed0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ed4:	ldr	r1, [fp, #-16]
     ed8:	ldr	r1, [r1, #528]	; 0x210
     edc:	bl	0 <coda_mem_record_new>
     ee0:	ldr	r1, [fp, #-16]
     ee4:	ldr	r2, [r1, #12]
     ee8:	add	r1, r1, r2, lsl #2
     eec:	str	r0, [r1, #144]	; 0x90
     ef0:	ldr	r0, [fp, #-16]
     ef4:	add	r1, r0, #144	; 0x90
     ef8:	ldr	r0, [r0, #12]
     efc:	add	r0, r1, r0, lsl #2
     f00:	ldr	r0, [r0]
     f04:	movw	r1, #0
     f08:	cmp	r0, r1
     f0c:	bne	f1c <start_element_handler+0x844>
     f10:	ldr	r0, [fp, #-16]
     f14:	bl	1778 <abort_parser>
     f18:	b	102c <start_element_handler+0x954>
     f1c:	movw	r0, #0
     f20:	str	r0, [sp, #32]
     f24:	ldr	r0, [sp, #32]
     f28:	ldr	r1, [fp, #-16]
     f2c:	add	r2, r1, #144	; 0x90
     f30:	ldr	r1, [r1, #12]
     f34:	add	r1, r2, r1, lsl #2
     f38:	ldr	r1, [r1]
     f3c:	ldr	r1, [r1, #16]
     f40:	cmp	r0, r1
     f44:	bge	1020 <start_element_handler+0x948>
     f48:	ldr	r0, [fp, #-20]	; 0xffffffec
     f4c:	ldr	r0, [r0, #52]	; 0x34
     f50:	ldr	r1, [sp, #32]
     f54:	add	r0, r0, r1, lsl #2
     f58:	ldr	r0, [r0]
     f5c:	ldr	r0, [r0, #8]
     f60:	ldr	r0, [r0, #8]
     f64:	cmp	r0, #1
     f68:	bne	100c <start_element_handler+0x934>
     f6c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f70:	ldr	r0, [r0, #52]	; 0x34
     f74:	ldr	r1, [sp, #32]
     f78:	add	r0, r0, r1, lsl #2
     f7c:	ldr	r0, [r0]
     f80:	ldr	r0, [r0, #8]
     f84:	ldr	r0, [r0]
     f88:	cmp	r0, #2
     f8c:	bne	100c <start_element_handler+0x934>
     f90:	ldr	r0, [fp, #-20]	; 0xffffffec
     f94:	ldr	r0, [r0, #52]	; 0x34
     f98:	ldr	r1, [sp, #32]
     f9c:	ldr	r0, [r0, r1, lsl #2]
     fa0:	ldr	r0, [r0, #8]
     fa4:	str	r0, [sp, #28]
     fa8:	ldr	r0, [sp, #28]
     fac:	mov	r1, #0
     fb0:	bl	0 <coda_mem_array_new>
     fb4:	ldr	r1, [fp, #-16]
     fb8:	ldr	r2, [r1, #12]
     fbc:	add	r1, r1, r2, lsl #2
     fc0:	ldr	r1, [r1, #144]	; 0x90
     fc4:	ldr	r1, [r1, #20]
     fc8:	ldr	r2, [sp, #32]
     fcc:	str	r0, [r1, r2, lsl #2]
     fd0:	ldr	r0, [fp, #-16]
     fd4:	ldr	r1, [r0, #12]
     fd8:	add	r0, r0, r1, lsl #2
     fdc:	ldr	r0, [r0, #144]	; 0x90
     fe0:	ldr	r0, [r0, #20]
     fe4:	ldr	r1, [sp, #32]
     fe8:	add	r0, r0, r1, lsl #2
     fec:	ldr	r0, [r0]
     ff0:	movw	r1, #0
     ff4:	cmp	r0, r1
     ff8:	bne	1008 <start_element_handler+0x930>
     ffc:	ldr	r0, [fp, #-16]
    1000:	bl	1778 <abort_parser>
    1004:	b	102c <start_element_handler+0x954>
    1008:	b	100c <start_element_handler+0x934>
    100c:	b	1010 <start_element_handler+0x938>
    1010:	ldr	r0, [sp, #32]
    1014:	add	r0, r0, #1
    1018:	str	r0, [sp, #32]
    101c:	b	f24 <start_element_handler+0x84c>
    1020:	ldr	r0, [fp, #-16]
    1024:	movw	r1, #0
    1028:	str	r1, [r0, #528]	; 0x210
    102c:	mov	sp, fp
    1030:	pop	{fp, pc}
    1034:	.word	0xfffffed4

00001038 <end_element_handler>:
    1038:	push	{fp, lr}
    103c:	mov	fp, sp
    1040:	sub	sp, sp, #56	; 0x38
    1044:	str	r0, [fp, #-4]
    1048:	str	r1, [fp, #-8]
    104c:	ldr	r0, [fp, #-4]
    1050:	str	r0, [fp, #-12]
    1054:	ldr	r0, [fp, #-12]
    1058:	ldr	r0, [r0, #4]
    105c:	cmp	r0, #0
    1060:	beq	1068 <end_element_handler+0x30>
    1064:	b	15d4 <end_element_handler+0x59c>
    1068:	ldr	r0, [fp, #-12]
    106c:	add	r1, r0, #144	; 0x90
    1070:	ldr	r0, [r0, #12]
    1074:	add	r0, r1, r0, lsl #2
    1078:	ldr	r0, [r0]
    107c:	movw	r1, #0
    1080:	cmp	r0, r1
    1084:	beq	11c4 <end_element_handler+0x18c>
    1088:	ldr	r0, [fp, #-12]
    108c:	ldr	r0, [r0, #536]	; 0x218
    1090:	cmp	r0, #0
    1094:	ble	11c4 <end_element_handler+0x18c>
    1098:	ldr	r0, [fp, #-12]
    109c:	ldr	r0, [r0, #544]	; 0x220
    10a0:	ldr	r1, [fp, #-12]
    10a4:	ldr	r1, [r1, #536]	; 0x218
    10a8:	bl	1e94 <is_whitespace>
    10ac:	cmp	r0, #0
    10b0:	bne	11c4 <end_element_handler+0x18c>
    10b4:	ldr	r0, [fp, #-12]
    10b8:	ldr	r0, [r0, #532]	; 0x214
    10bc:	cmp	r0, #0
    10c0:	beq	10c8 <end_element_handler+0x90>
    10c4:	b	10e8 <end_element_handler+0xb0>
    10c8:	movw	r0, #0
    10cc:	movt	r0, #0
    10d0:	movw	r1, #0
    10d4:	movt	r1, #0
    10d8:	movw	r2, #590	; 0x24e
    10dc:	movw	r3, #0
    10e0:	movt	r3, #0
    10e4:	bl	0 <__assert_fail>
    10e8:	ldr	r0, [fp, #-12]
    10ec:	add	r1, r0, #144	; 0x90
    10f0:	ldr	r0, [r0, #12]
    10f4:	add	r0, r1, r0, lsl #2
    10f8:	ldr	r0, [r0]
    10fc:	ldr	r0, [r0, #4]
    1100:	ldr	r0, [r0, #48]	; 0x30
    1104:	cmp	r0, #0
    1108:	ble	113c <end_element_handler+0x104>
    110c:	ldr	r0, [pc, #1224]	; 15dc <end_element_handler+0x5a4>
    1110:	ldr	r1, [fp, #-12]
    1114:	add	r2, r1, #400	; 0x190
    1118:	ldr	r1, [r1, #12]
    111c:	add	r1, r2, r1, lsl #2
    1120:	ldr	r2, [r1]
    1124:	movw	r1, #0
    1128:	movt	r1, #0
    112c:	bl	0 <coda_set_error>
    1130:	ldr	r0, [fp, #-12]
    1134:	bl	1778 <abort_parser>
    1138:	b	15d4 <end_element_handler+0x59c>
    113c:	ldr	r0, [fp, #-12]
    1140:	ldr	r1, [r0, #12]
    1144:	add	r1, r0, r1, lsl #2
    1148:	ldr	r1, [r1, #144]	; 0x90
    114c:	ldr	r1, [r1, #12]
    1150:	str	r1, [r0, #528]	; 0x210
    1154:	ldr	r0, [fp, #-12]
    1158:	ldr	r1, [r0, #12]
    115c:	add	r0, r0, r1, lsl #2
    1160:	ldr	r0, [r0, #144]	; 0x90
    1164:	mov	r1, #0
    1168:	str	r1, [r0, #12]
    116c:	ldr	r0, [fp, #-12]
    1170:	add	r1, r0, #16
    1174:	ldr	r0, [r0, #12]
    1178:	add	r0, r1, r0, lsl #2
    117c:	ldr	r0, [r0]
    1180:	bl	1f88 <convert_to_text>
    1184:	cmp	r0, #0
    1188:	beq	1198 <end_element_handler+0x160>
    118c:	ldr	r0, [fp, #-12]
    1190:	bl	1778 <abort_parser>
    1194:	b	15d4 <end_element_handler+0x59c>
    1198:	ldr	r0, [fp, #-12]
    119c:	ldr	r1, [r0, #12]
    11a0:	add	r0, r0, r1, lsl #2
    11a4:	ldr	r0, [r0, #144]	; 0x90
    11a8:	bl	0 <coda_dynamic_type_delete>
    11ac:	ldr	r0, [fp, #-12]
    11b0:	add	r1, r0, #144	; 0x90
    11b4:	ldr	r0, [r0, #12]
    11b8:	add	r0, r1, r0, lsl #2
    11bc:	movw	r1, #0
    11c0:	str	r1, [r0]
    11c4:	ldr	r0, [fp, #-12]
    11c8:	add	r1, r0, #144	; 0x90
    11cc:	ldr	r0, [r0, #12]
    11d0:	add	r0, r1, r0, lsl #2
    11d4:	ldr	r0, [r0]
    11d8:	movw	r1, #0
    11dc:	cmp	r0, r1
    11e0:	bne	1348 <end_element_handler+0x310>
    11e4:	ldr	r0, [fp, #-12]
    11e8:	add	r1, r0, #16
    11ec:	ldr	r0, [r0, #12]
    11f0:	add	r0, r1, r0, lsl #2
    11f4:	ldr	r0, [r0]
    11f8:	ldr	r0, [r0]
    11fc:	str	r0, [sp, #28]
    1200:	ldr	r0, [sp, #28]
    1204:	ldr	r0, [r0, #8]
    1208:	cmp	r0, #6
    120c:	bne	12e8 <end_element_handler+0x2b0>
    1210:	ldr	r0, [fp, #-12]
    1214:	ldr	r0, [r0, #532]	; 0x214
    1218:	cmp	r0, #0
    121c:	bne	1224 <end_element_handler+0x1ec>
    1220:	b	1244 <end_element_handler+0x20c>
    1224:	movw	r0, #0
    1228:	movt	r0, #0
    122c:	movw	r1, #0
    1230:	movt	r1, #0
    1234:	movw	r2, #619	; 0x26b
    1238:	movw	r3, #0
    123c:	movt	r3, #0
    1240:	bl	0 <__assert_fail>
    1244:	ldr	r0, [sp, #28]
    1248:	ldr	r0, [r0, #44]	; 0x2c
    124c:	ldr	r1, [fp, #-12]
    1250:	ldr	r1, [r1, #8]
    1254:	ldr	r2, [fp, #-12]
    1258:	ldr	r3, [r2, #536]	; 0x218
    125c:	ldr	r2, [fp, #-12]
    1260:	ldr	r2, [r2, #544]	; 0x220
    1264:	movw	ip, #0
    1268:	str	r1, [sp, #12]
    126c:	mov	r1, ip
    1270:	ldr	ip, [sp, #12]
    1274:	str	r2, [sp, #8]
    1278:	mov	r2, ip
    127c:	ldr	lr, [sp, #8]
    1280:	str	lr, [sp]
    1284:	bl	0 <coda_mem_data_new>
    1288:	str	r0, [sp, #24]
    128c:	ldr	r0, [sp, #24]
    1290:	movw	r1, #0
    1294:	cmp	r0, r1
    1298:	bne	12a8 <end_element_handler+0x270>
    129c:	ldr	r0, [fp, #-12]
    12a0:	bl	1778 <abort_parser>
    12a4:	b	15d4 <end_element_handler+0x59c>
    12a8:	ldr	r0, [sp, #28]
    12ac:	ldr	r1, [fp, #-12]
    12b0:	ldr	r1, [r1, #528]	; 0x210
    12b4:	ldr	r2, [sp, #24]
    12b8:	bl	0 <coda_mem_time_new>
    12bc:	str	r0, [fp, #-20]	; 0xffffffec
    12c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    12c4:	movw	r1, #0
    12c8:	cmp	r0, r1
    12cc:	bne	12e4 <end_element_handler+0x2ac>
    12d0:	ldr	r0, [sp, #24]
    12d4:	bl	0 <coda_dynamic_type_delete>
    12d8:	ldr	r0, [fp, #-12]
    12dc:	bl	1778 <abort_parser>
    12e0:	b	15d4 <end_element_handler+0x59c>
    12e4:	b	1338 <end_element_handler+0x300>
    12e8:	ldr	r0, [sp, #28]
    12ec:	ldr	r1, [fp, #-12]
    12f0:	ldr	r1, [r1, #528]	; 0x210
    12f4:	ldr	r2, [fp, #-12]
    12f8:	ldr	r2, [r2, #8]
    12fc:	ldr	r3, [fp, #-12]
    1300:	ldr	r3, [r3, #536]	; 0x218
    1304:	ldr	ip, [fp, #-12]
    1308:	ldr	ip, [ip, #544]	; 0x220
    130c:	str	ip, [sp]
    1310:	bl	0 <coda_mem_data_new>
    1314:	str	r0, [fp, #-20]	; 0xffffffec
    1318:	ldr	r0, [fp, #-20]	; 0xffffffec
    131c:	movw	r1, #0
    1320:	cmp	r0, r1
    1324:	bne	1334 <end_element_handler+0x2fc>
    1328:	ldr	r0, [fp, #-12]
    132c:	bl	1778 <abort_parser>
    1330:	b	15d4 <end_element_handler+0x59c>
    1334:	b	1338 <end_element_handler+0x300>
    1338:	ldr	r0, [fp, #-12]
    133c:	movw	r1, #0
    1340:	str	r1, [r0, #528]	; 0x210
    1344:	b	1474 <end_element_handler+0x43c>
    1348:	ldr	r0, [fp, #-12]
    134c:	ldr	r0, [r0, #532]	; 0x214
    1350:	cmp	r0, #0
    1354:	bne	1448 <end_element_handler+0x410>
    1358:	ldr	r0, [fp, #-12]
    135c:	add	r1, r0, #144	; 0x90
    1360:	ldr	r0, [r0, #12]
    1364:	add	r0, r1, r0, lsl #2
    1368:	ldr	r0, [r0]
    136c:	bl	0 <coda_mem_record_validate>
    1370:	cmp	r0, #0
    1374:	beq	1384 <end_element_handler+0x34c>
    1378:	ldr	r0, [fp, #-12]
    137c:	bl	1778 <abort_parser>
    1380:	b	15d4 <end_element_handler+0x59c>
    1384:	movw	r0, #0
    1388:	str	r0, [sp, #20]
    138c:	ldr	r0, [sp, #20]
    1390:	ldr	r1, [fp, #-12]
    1394:	add	r2, r1, #144	; 0x90
    1398:	ldr	r1, [r1, #12]
    139c:	add	r1, r2, r1, lsl #2
    13a0:	ldr	r1, [r1]
    13a4:	ldr	r1, [r1, #16]
    13a8:	cmp	r0, r1
    13ac:	bge	1444 <end_element_handler+0x40c>
    13b0:	ldr	r0, [fp, #-12]
    13b4:	ldr	r1, [r0, #12]
    13b8:	add	r0, r0, r1, lsl #2
    13bc:	ldr	r0, [r0, #144]	; 0x90
    13c0:	ldr	r0, [r0, #20]
    13c4:	ldr	r1, [sp, #20]
    13c8:	add	r0, r0, r1, lsl #2
    13cc:	ldr	r0, [r0]
    13d0:	str	r0, [sp, #16]
    13d4:	ldr	r0, [sp, #16]
    13d8:	movw	r1, #0
    13dc:	cmp	r0, r1
    13e0:	beq	1430 <end_element_handler+0x3f8>
    13e4:	ldr	r0, [sp, #16]
    13e8:	ldr	r0, [r0, #4]
    13ec:	ldr	r0, [r0, #8]
    13f0:	cmp	r0, #1
    13f4:	bne	142c <end_element_handler+0x3f4>
    13f8:	ldr	r0, [sp, #16]
    13fc:	ldr	r0, [r0, #4]
    1400:	ldr	r0, [r0]
    1404:	cmp	r0, #2
    1408:	bne	142c <end_element_handler+0x3f4>
    140c:	ldr	r0, [sp, #16]
    1410:	bl	0 <coda_mem_array_validate>
    1414:	cmp	r0, #0
    1418:	beq	1428 <end_element_handler+0x3f0>
    141c:	ldr	r0, [fp, #-12]
    1420:	bl	1778 <abort_parser>
    1424:	b	15d4 <end_element_handler+0x59c>
    1428:	b	142c <end_element_handler+0x3f4>
    142c:	b	1430 <end_element_handler+0x3f8>
    1430:	b	1434 <end_element_handler+0x3fc>
    1434:	ldr	r0, [sp, #20]
    1438:	add	r0, r0, #1
    143c:	str	r0, [sp, #20]
    1440:	b	138c <end_element_handler+0x354>
    1444:	b	1448 <end_element_handler+0x410>
    1448:	ldr	r0, [fp, #-12]
    144c:	ldr	r1, [r0, #12]
    1450:	add	r0, r0, r1, lsl #2
    1454:	ldr	r0, [r0, #144]	; 0x90
    1458:	str	r0, [fp, #-20]	; 0xffffffec
    145c:	ldr	r0, [fp, #-12]
    1460:	add	r1, r0, #144	; 0x90
    1464:	ldr	r0, [r0, #12]
    1468:	add	r0, r1, r0, lsl #2
    146c:	movw	r1, #0
    1470:	str	r1, [r0]
    1474:	ldr	r0, [fp, #-12]
    1478:	ldr	r0, [r0, #528]	; 0x210
    147c:	movw	r1, #0
    1480:	cmp	r0, r1
    1484:	bne	148c <end_element_handler+0x454>
    1488:	b	14ac <end_element_handler+0x474>
    148c:	movw	r0, #0
    1490:	movt	r0, #0
    1494:	movw	r1, #0
    1498:	movt	r1, #0
    149c:	movw	r2, #685	; 0x2ad
    14a0:	movw	r3, #0
    14a4:	movt	r3, #0
    14a8:	bl	0 <__assert_fail>
    14ac:	ldr	r0, [fp, #-12]
    14b0:	ldr	r1, [r0, #12]
    14b4:	add	r0, r0, r1, lsl #2
    14b8:	ldr	r0, [r0, #140]	; 0x8c
    14bc:	str	r0, [fp, #-16]
    14c0:	ldr	r0, [fp, #-12]
    14c4:	ldr	r1, [r0, #12]
    14c8:	add	r0, r0, r1, lsl #2
    14cc:	ldr	r0, [r0, #272]	; 0x110
    14d0:	str	r0, [fp, #-24]	; 0xffffffe8
    14d4:	ldr	r0, [fp, #-16]
    14d8:	ldr	r0, [r0, #20]
    14dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    14e0:	add	r0, r0, r1, lsl #2
    14e4:	ldr	r0, [r0]
    14e8:	movw	r1, #0
    14ec:	cmp	r0, r1
    14f0:	beq	159c <end_element_handler+0x564>
    14f4:	ldr	r0, [fp, #-16]
    14f8:	ldr	r0, [r0, #20]
    14fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1500:	add	r0, r0, r1, lsl #2
    1504:	ldr	r0, [r0]
    1508:	ldr	r0, [r0, #4]
    150c:	ldr	r0, [r0, #8]
    1510:	cmp	r0, #1
    1514:	bne	1540 <end_element_handler+0x508>
    1518:	ldr	r0, [fp, #-16]
    151c:	ldr	r0, [r0, #20]
    1520:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1524:	add	r0, r0, r1, lsl #2
    1528:	ldr	r0, [r0]
    152c:	ldr	r0, [r0, #4]
    1530:	ldr	r0, [r0]
    1534:	cmp	r0, #2
    1538:	bne	1540 <end_element_handler+0x508>
    153c:	b	1560 <end_element_handler+0x528>
    1540:	movw	r0, #0
    1544:	movt	r0, #0
    1548:	movw	r1, #0
    154c:	movt	r1, #0
    1550:	movw	r2, #693	; 0x2b5
    1554:	movw	r3, #0
    1558:	movt	r3, #0
    155c:	bl	0 <__assert_fail>
    1560:	ldr	r0, [fp, #-16]
    1564:	ldr	r0, [r0, #20]
    1568:	ldr	r1, [fp, #-24]	; 0xffffffe8
    156c:	add	r0, r0, r1, lsl #2
    1570:	ldr	r0, [r0]
    1574:	ldr	r1, [fp, #-20]	; 0xffffffec
    1578:	bl	0 <coda_mem_array_add_element>
    157c:	cmp	r0, #0
    1580:	beq	1598 <end_element_handler+0x560>
    1584:	ldr	r0, [fp, #-20]	; 0xffffffec
    1588:	bl	0 <coda_dynamic_type_delete>
    158c:	ldr	r0, [fp, #-12]
    1590:	bl	1778 <abort_parser>
    1594:	b	15d4 <end_element_handler+0x59c>
    1598:	b	15b4 <end_element_handler+0x57c>
    159c:	ldr	r0, [fp, #-20]	; 0xffffffec
    15a0:	ldr	r1, [fp, #-16]
    15a4:	ldr	r1, [r1, #20]
    15a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15ac:	add	r1, r1, r2, lsl #2
    15b0:	str	r0, [r1]
    15b4:	ldr	r0, [fp, #-12]
    15b8:	ldr	r1, [r0, #12]
    15bc:	mvn	r2, #0
    15c0:	add	r1, r1, r2
    15c4:	str	r1, [r0, #12]
    15c8:	ldr	r0, [fp, #-12]
    15cc:	movw	r1, #0
    15d0:	str	r1, [r0, #536]	; 0x218
    15d4:	mov	sp, fp
    15d8:	pop	{fp, pc}
    15dc:	.word	0xfffffed4

000015e0 <character_data_handler>:
    15e0:	push	{fp, lr}
    15e4:	mov	fp, sp
    15e8:	sub	sp, sp, #24
    15ec:	str	r0, [fp, #-4]
    15f0:	str	r1, [fp, #-8]
    15f4:	str	r2, [sp, #12]
    15f8:	ldr	r0, [fp, #-4]
    15fc:	str	r0, [sp, #8]
    1600:	ldr	r0, [sp, #8]
    1604:	ldr	r0, [r0, #532]	; 0x214
    1608:	cmp	r0, #0
    160c:	bne	1674 <character_data_handler+0x94>
    1610:	ldr	r0, [sp, #8]
    1614:	add	r1, r0, #144	; 0x90
    1618:	ldr	r0, [r0, #12]
    161c:	add	r0, r1, r0, lsl #2
    1620:	ldr	r0, [r0]
    1624:	movw	r1, #0
    1628:	cmp	r0, r1
    162c:	beq	1674 <character_data_handler+0x94>
    1630:	ldr	r0, [fp, #-8]
    1634:	ldr	r1, [sp, #12]
    1638:	bl	1e94 <is_whitespace>
    163c:	cmp	r0, #0
    1640:	bne	1674 <character_data_handler+0x94>
    1644:	ldr	r0, [pc, #276]	; 1760 <character_data_handler+0x180>
    1648:	ldr	r1, [sp, #8]
    164c:	add	r2, r1, #400	; 0x190
    1650:	ldr	r1, [r1, #12]
    1654:	add	r1, r2, r1, lsl #2
    1658:	ldr	r2, [r1]
    165c:	movw	r1, #0
    1660:	movt	r1, #0
    1664:	bl	0 <coda_set_error>
    1668:	ldr	r0, [sp, #8]
    166c:	bl	1778 <abort_parser>
    1670:	b	1758 <character_data_handler+0x178>
    1674:	ldr	r0, [sp, #8]
    1678:	ldr	r0, [r0, #536]	; 0x218
    167c:	ldr	r1, [sp, #12]
    1680:	add	r0, r0, r1
    1684:	ldr	r1, [sp, #8]
    1688:	ldr	r1, [r1, #540]	; 0x21c
    168c:	cmp	r0, r1
    1690:	ble	1724 <character_data_handler+0x144>
    1694:	ldr	r0, [sp, #8]
    1698:	ldr	r0, [r0, #544]	; 0x220
    169c:	ldr	r1, [sp, #8]
    16a0:	ldr	r1, [r1, #536]	; 0x218
    16a4:	ldr	r2, [sp, #12]
    16a8:	add	r1, r1, r2
    16ac:	bl	0 <realloc>
    16b0:	str	r0, [sp, #4]
    16b4:	ldr	r0, [sp, #4]
    16b8:	movw	r1, #0
    16bc:	cmp	r0, r1
    16c0:	bne	1700 <character_data_handler+0x120>
    16c4:	ldr	r0, [sp, #8]
    16c8:	ldr	r0, [r0, #536]	; 0x218
    16cc:	ldr	r1, [sp, #12]
    16d0:	add	r2, r0, r1
    16d4:	mvn	r0, #0
    16d8:	movw	r1, #0
    16dc:	movt	r1, #0
    16e0:	movw	r3, #0
    16e4:	movt	r3, #0
    16e8:	movw	ip, #731	; 0x2db
    16ec:	str	ip, [sp]
    16f0:	bl	0 <coda_set_error>
    16f4:	ldr	r0, [sp, #8]
    16f8:	bl	1778 <abort_parser>
    16fc:	b	1758 <character_data_handler+0x178>
    1700:	ldr	r0, [sp, #4]
    1704:	ldr	r1, [sp, #8]
    1708:	str	r0, [r1, #544]	; 0x220
    170c:	ldr	r0, [sp, #8]
    1710:	ldr	r0, [r0, #536]	; 0x218
    1714:	ldr	r1, [sp, #12]
    1718:	add	r0, r0, r1
    171c:	ldr	r1, [sp, #8]
    1720:	str	r0, [r1, #540]	; 0x21c
    1724:	ldr	r0, [sp, #8]
    1728:	ldr	r0, [r0, #544]	; 0x220
    172c:	ldr	r1, [sp, #8]
    1730:	ldr	r1, [r1, #536]	; 0x218
    1734:	add	r0, r0, r1
    1738:	ldr	r1, [fp, #-8]
    173c:	ldr	r2, [sp, #12]
    1740:	bl	0 <memcpy>
    1744:	ldr	r0, [sp, #12]
    1748:	ldr	r1, [sp, #8]
    174c:	ldr	r2, [r1, #536]	; 0x218
    1750:	add	r0, r2, r0
    1754:	str	r0, [r1, #536]	; 0x218
    1758:	mov	sp, fp
    175c:	pop	{fp, pc}
    1760:	.word	0xfffffed4

00001764 <not_standalone_handler>:
    1764:	sub	sp, sp, #4
    1768:	str	r0, [sp]
    176c:	movw	r0, #0
    1770:	add	sp, sp, #4
    1774:	bx	lr

00001778 <abort_parser>:
    1778:	push	{fp, lr}
    177c:	mov	fp, sp
    1780:	sub	sp, sp, #8
    1784:	str	r0, [sp, #4]
    1788:	ldr	r0, [sp, #4]
    178c:	ldr	r0, [r0]
    1790:	movw	r1, #0
    1794:	and	r1, r1, #255	; 0xff
    1798:	bl	0 <coda_XML_StopParser>
    179c:	ldr	r1, [sp, #4]
    17a0:	movw	r2, #1
    17a4:	str	r2, [r1, #4]
    17a8:	mov	sp, fp
    17ac:	pop	{fp, pc}

000017b0 <attribute_record_new>:
    17b0:	push	{fp, lr}
    17b4:	mov	fp, sp
    17b8:	sub	sp, sp, #128	; 0x80
    17bc:	ldr	ip, [fp, #8]
    17c0:	str	r0, [fp, #-8]
    17c4:	str	r1, [fp, #-12]
    17c8:	str	r2, [fp, #-16]
    17cc:	str	r3, [fp, #-20]	; 0xffffffec
    17d0:	ldr	r0, [fp, #8]
    17d4:	str	r0, [fp, #-32]	; 0xffffffe0
    17d8:	ldr	r0, [fp, #-8]
    17dc:	movw	r1, #0
    17e0:	cmp	r0, r1
    17e4:	beq	17ec <attribute_record_new+0x3c>
    17e8:	b	180c <attribute_record_new+0x5c>
    17ec:	movw	r0, #0
    17f0:	movt	r0, #0
    17f4:	movw	r1, #0
    17f8:	movt	r1, #0
    17fc:	movw	r2, #97	; 0x61
    1800:	movw	r3, #0
    1804:	movt	r3, #0
    1808:	bl	0 <__assert_fail>
    180c:	ldr	r0, [fp, #-8]
    1810:	movw	r1, #0
    1814:	bl	0 <coda_mem_record_new>
    1818:	str	r0, [fp, #-24]	; 0xffffffe8
    181c:	ldr	r0, [fp, #-16]
    1820:	ldr	r1, [fp, #-16]
    1824:	str	r0, [fp, #-60]	; 0xffffffc4
    1828:	mov	r0, r1
    182c:	bl	0 <coda_element_name_from_xml_name>
    1830:	ldr	r1, [fp, #-60]	; 0xffffffc4
    1834:	cmp	r1, r0
    1838:	beq	1b00 <attribute_record_new+0x350>
    183c:	ldr	r0, [fp, #-8]
    1840:	ldr	r0, [r0, #44]	; 0x2c
    1844:	movw	r1, #0
    1848:	movt	r1, #0
    184c:	bl	0 <coda_hashtable_get_index_from_name>
    1850:	str	r0, [fp, #-36]	; 0xffffffdc
    1854:	ldr	r0, [fp, #8]
    1858:	cmp	r0, #0
    185c:	beq	1a18 <attribute_record_new+0x268>
    1860:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1864:	cmp	r0, #0
    1868:	bge	18f8 <attribute_record_new+0x148>
    186c:	movw	r0, #2
    1870:	bl	0 <coda_type_text_new>
    1874:	str	r0, [fp, #-44]	; 0xffffffd4
    1878:	ldr	r0, [fp, #-44]	; 0xffffffd4
    187c:	movw	r1, #0
    1880:	cmp	r0, r1
    1884:	bne	189c <attribute_record_new+0xec>
    1888:	ldr	r0, [fp, #-24]	; 0xffffffe8
    188c:	bl	0 <coda_dynamic_type_delete>
    1890:	movw	r0, #0
    1894:	str	r0, [fp, #-4]
    1898:	b	1e84 <attribute_record_new+0x6d4>
    189c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    18a0:	ldr	r1, [fp, #-12]
    18a4:	ldr	r2, [fp, #-16]
    18a8:	str	r0, [sp, #64]	; 0x40
    18ac:	mov	r0, r2
    18b0:	str	r1, [sp, #60]	; 0x3c
    18b4:	bl	0 <coda_element_name_from_xml_name>
    18b8:	ldr	r1, [fp, #-16]
    18bc:	sub	r0, r0, r1
    18c0:	sub	r3, r0, #1
    18c4:	ldr	r0, [fp, #-16]
    18c8:	ldr	r1, [sp, #64]	; 0x40
    18cc:	str	r0, [sp, #56]	; 0x38
    18d0:	mov	r0, r1
    18d4:	movw	r1, #0
    18d8:	ldr	r2, [sp, #60]	; 0x3c
    18dc:	ldr	ip, [sp, #56]	; 0x38
    18e0:	str	ip, [sp]
    18e4:	bl	0 <coda_mem_data_new>
    18e8:	str	r0, [fp, #-28]	; 0xffffffe4
    18ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
    18f0:	bl	0 <coda_type_release>
    18f4:	b	19a8 <attribute_record_new+0x1f8>
    18f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    18fc:	ldr	r0, [r0, #20]
    1900:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1904:	add	r0, r0, r1, lsl #2
    1908:	ldr	r0, [r0]
    190c:	movw	r1, #0
    1910:	cmp	r0, r1
    1914:	bne	191c <attribute_record_new+0x16c>
    1918:	b	193c <attribute_record_new+0x18c>
    191c:	movw	r0, #0
    1920:	movt	r0, #0
    1924:	movw	r1, #0
    1928:	movt	r1, #0
    192c:	movw	r2, #123	; 0x7b
    1930:	movw	r3, #0
    1934:	movt	r3, #0
    1938:	bl	0 <__assert_fail>
    193c:	ldr	r0, [fp, #-8]
    1940:	ldr	r0, [r0, #52]	; 0x34
    1944:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1948:	add	r0, r0, r1, lsl #2
    194c:	ldr	r0, [r0]
    1950:	ldr	r0, [r0, #8]
    1954:	ldr	r1, [fp, #-12]
    1958:	ldr	r2, [fp, #-16]
    195c:	str	r0, [sp, #52]	; 0x34
    1960:	mov	r0, r2
    1964:	str	r1, [sp, #48]	; 0x30
    1968:	bl	0 <coda_element_name_from_xml_name>
    196c:	ldr	r1, [fp, #-16]
    1970:	sub	r0, r0, r1
    1974:	sub	r3, r0, #1
    1978:	ldr	r0, [fp, #-16]
    197c:	ldr	r1, [sp, #52]	; 0x34
    1980:	str	r0, [sp, #44]	; 0x2c
    1984:	mov	r0, r1
    1988:	movw	r1, #0
    198c:	ldr	r2, [sp, #48]	; 0x30
    1990:	ldr	ip, [sp, #44]	; 0x2c
    1994:	str	ip, [sp]
    1998:	bl	0 <coda_mem_data_new>
    199c:	str	r0, [fp, #-28]	; 0xffffffe4
    19a0:	movw	r0, #0
    19a4:	str	r0, [fp, #-32]	; 0xffffffe0
    19a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19ac:	movw	r1, #0
    19b0:	cmp	r0, r1
    19b4:	bne	19cc <attribute_record_new+0x21c>
    19b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19bc:	bl	0 <coda_dynamic_type_delete>
    19c0:	movw	r0, #0
    19c4:	str	r0, [fp, #-4]
    19c8:	b	1e84 <attribute_record_new+0x6d4>
    19cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    19d8:	movw	r2, #0
    19dc:	movt	r2, #0
    19e0:	str	r1, [sp, #40]	; 0x28
    19e4:	mov	r1, r2
    19e8:	ldr	r2, [sp, #40]	; 0x28
    19ec:	bl	0 <coda_mem_record_add_field>
    19f0:	cmp	r0, #0
    19f4:	beq	1a14 <attribute_record_new+0x264>
    19f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19fc:	bl	0 <coda_dynamic_type_delete>
    1a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1a04:	bl	0 <coda_dynamic_type_delete>
    1a08:	movw	r0, #0
    1a0c:	str	r0, [fp, #-4]
    1a10:	b	1e84 <attribute_record_new+0x6d4>
    1a14:	b	1afc <attribute_record_new+0x34c>
    1a18:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1a1c:	cmp	r0, #0
    1a20:	blt	1af8 <attribute_record_new+0x348>
    1a24:	ldr	r0, [fp, #-8]
    1a28:	ldr	r0, [r0, #52]	; 0x34
    1a2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1a30:	add	r0, r0, r1, lsl #2
    1a34:	ldr	r0, [r0]
    1a38:	ldr	r0, [r0, #8]
    1a3c:	ldr	r1, [fp, #-12]
    1a40:	ldr	r2, [fp, #-16]
    1a44:	str	r0, [sp, #36]	; 0x24
    1a48:	mov	r0, r2
    1a4c:	str	r1, [sp, #32]
    1a50:	bl	0 <coda_element_name_from_xml_name>
    1a54:	ldr	r1, [fp, #-16]
    1a58:	sub	r0, r0, r1
    1a5c:	sub	r3, r0, #1
    1a60:	ldr	r0, [fp, #-16]
    1a64:	ldr	r1, [sp, #36]	; 0x24
    1a68:	str	r0, [sp, #28]
    1a6c:	mov	r0, r1
    1a70:	movw	r1, #0
    1a74:	ldr	r2, [sp, #32]
    1a78:	ldr	ip, [sp, #28]
    1a7c:	str	ip, [sp]
    1a80:	bl	0 <coda_mem_data_new>
    1a84:	str	r0, [fp, #-28]	; 0xffffffe4
    1a88:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1a8c:	movw	r1, #0
    1a90:	cmp	r0, r1
    1a94:	bne	1aac <attribute_record_new+0x2fc>
    1a98:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1a9c:	bl	0 <coda_dynamic_type_delete>
    1aa0:	movw	r0, #0
    1aa4:	str	r0, [fp, #-4]
    1aa8:	b	1e84 <attribute_record_new+0x6d4>
    1aac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ab0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1ab4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ab8:	movw	r2, #0
    1abc:	movt	r2, #0
    1ac0:	str	r1, [sp, #24]
    1ac4:	mov	r1, r2
    1ac8:	ldr	r2, [sp, #24]
    1acc:	bl	0 <coda_mem_record_add_field>
    1ad0:	cmp	r0, #0
    1ad4:	beq	1af4 <attribute_record_new+0x344>
    1ad8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1adc:	bl	0 <coda_dynamic_type_delete>
    1ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ae4:	bl	0 <coda_dynamic_type_delete>
    1ae8:	movw	r0, #0
    1aec:	str	r0, [fp, #-4]
    1af0:	b	1e84 <attribute_record_new+0x6d4>
    1af4:	b	1af8 <attribute_record_new+0x348>
    1af8:	b	1afc <attribute_record_new+0x34c>
    1afc:	b	1b00 <attribute_record_new+0x350>
    1b00:	movw	r0, #0
    1b04:	str	r0, [fp, #-40]	; 0xffffffd8
    1b08:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b0c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1b10:	lsl	r2, r1, #1
    1b14:	add	r0, r0, r1, lsl #3
    1b18:	ldr	r0, [r0]
    1b1c:	movw	r1, #0
    1b20:	cmp	r0, r1
    1b24:	beq	1d9c <attribute_record_new+0x5ec>
    1b28:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b2c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1b30:	lsl	r2, r1, #1
    1b34:	add	r0, r0, r1, lsl #3
    1b38:	ldr	r0, [r0]
    1b3c:	str	r0, [fp, #-48]	; 0xffffffd0
    1b40:	ldr	r0, [fp, #8]
    1b44:	str	r0, [fp, #-32]	; 0xffffffe0
    1b48:	ldr	r0, [fp, #-8]
    1b4c:	ldr	r0, [r0, #44]	; 0x2c
    1b50:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1b54:	str	r2, [sp, #20]
    1b58:	bl	0 <coda_hashtable_get_index_from_name>
    1b5c:	str	r0, [fp, #-36]	; 0xffffffdc
    1b60:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1b64:	cmp	r0, #0
    1b68:	bge	1bb8 <attribute_record_new+0x408>
    1b6c:	ldr	r0, [fp, #-8]
    1b70:	ldr	r0, [r0, #44]	; 0x2c
    1b74:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1b78:	str	r0, [sp, #16]
    1b7c:	mov	r0, r1
    1b80:	bl	0 <coda_element_name_from_xml_name>
    1b84:	ldr	r1, [sp, #16]
    1b88:	str	r0, [sp, #12]
    1b8c:	mov	r0, r1
    1b90:	ldr	r1, [sp, #12]
    1b94:	bl	0 <coda_hashtable_get_index_from_name>
    1b98:	str	r0, [fp, #-36]	; 0xffffffdc
    1b9c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1ba0:	cmp	r0, #0
    1ba4:	blt	1bb4 <attribute_record_new+0x404>
    1ba8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1bac:	bl	0 <coda_element_name_from_xml_name>
    1bb0:	str	r0, [fp, #-48]	; 0xffffffd0
    1bb4:	b	1bb8 <attribute_record_new+0x408>
    1bb8:	ldr	r0, [fp, #8]
    1bbc:	cmp	r0, #0
    1bc0:	beq	1ca8 <attribute_record_new+0x4f8>
    1bc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1bc8:	cmp	r0, #0
    1bcc:	bge	1c38 <attribute_record_new+0x488>
    1bd0:	movw	r0, #2
    1bd4:	bl	0 <coda_type_text_new>
    1bd8:	str	r0, [fp, #-52]	; 0xffffffcc
    1bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1be0:	movw	r1, #0
    1be4:	cmp	r0, r1
    1be8:	bne	1c00 <attribute_record_new+0x450>
    1bec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1bf0:	bl	0 <coda_dynamic_type_delete>
    1bf4:	movw	r0, #0
    1bf8:	str	r0, [fp, #-4]
    1bfc:	b	1e84 <attribute_record_new+0x6d4>
    1c00:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1c04:	ldr	r2, [fp, #-12]
    1c08:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c10:	mov	ip, #1
    1c14:	orr	r3, ip, r3, lsl #1
    1c18:	add	r1, r1, r3, lsl #2
    1c1c:	ldr	r3, [r1]
    1c20:	movw	r1, #0
    1c24:	bl	0 <coda_mem_string_new>
    1c28:	str	r0, [fp, #-28]	; 0xffffffe4
    1c2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1c30:	bl	0 <coda_type_release>
    1c34:	b	1ca4 <attribute_record_new+0x4f4>
    1c38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1c3c:	ldr	r0, [r0, #20]
    1c40:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c44:	add	r0, r0, r1, lsl #2
    1c48:	ldr	r0, [r0]
    1c4c:	movw	r1, #0
    1c50:	cmp	r0, r1
    1c54:	beq	1c5c <attribute_record_new+0x4ac>
    1c58:	b	1d8c <attribute_record_new+0x5dc>
    1c5c:	ldr	r0, [fp, #-8]
    1c60:	ldr	r0, [r0, #52]	; 0x34
    1c64:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c68:	ldr	r0, [r0, r1, lsl #2]
    1c6c:	ldr	r0, [r0, #8]
    1c70:	ldr	r2, [fp, #-12]
    1c74:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c78:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c7c:	mov	ip, #1
    1c80:	orr	r3, ip, r3, lsl #1
    1c84:	add	r1, r1, r3, lsl #2
    1c88:	ldr	r3, [r1]
    1c8c:	movw	r1, #0
    1c90:	bl	0 <coda_mem_string_new>
    1c94:	str	r0, [fp, #-28]	; 0xffffffe4
    1c98:	movw	r0, #0
    1c9c:	str	r0, [fp, #-32]	; 0xffffffe0
    1ca0:	b	1ca4 <attribute_record_new+0x4f4>
    1ca4:	b	1d2c <attribute_record_new+0x57c>
    1ca8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1cac:	cmn	r0, #1
    1cb0:	bne	1cf0 <attribute_record_new+0x540>
    1cb4:	ldr	r0, [pc, #468]	; 1e90 <attribute_record_new+0x6e0>
    1cb8:	ldr	r1, [fp, #-20]	; 0xffffffec
    1cbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1cc0:	lsl	r3, r2, #1
    1cc4:	add	r1, r1, r2, lsl #3
    1cc8:	ldr	r2, [r1]
    1ccc:	movw	r1, #0
    1cd0:	movt	r1, #0
    1cd4:	str	r3, [sp, #8]
    1cd8:	bl	0 <coda_set_error>
    1cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ce0:	bl	0 <coda_dynamic_type_delete>
    1ce4:	movw	r0, #0
    1ce8:	str	r0, [fp, #-4]
    1cec:	b	1e84 <attribute_record_new+0x6d4>
    1cf0:	ldr	r0, [fp, #-8]
    1cf4:	ldr	r0, [r0, #52]	; 0x34
    1cf8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1cfc:	ldr	r0, [r0, r1, lsl #2]
    1d00:	ldr	r0, [r0, #8]
    1d04:	ldr	r2, [fp, #-12]
    1d08:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1d10:	mov	ip, #1
    1d14:	orr	r3, ip, r3, lsl #1
    1d18:	add	r1, r1, r3, lsl #2
    1d1c:	ldr	r3, [r1]
    1d20:	movw	r1, #0
    1d24:	bl	0 <coda_mem_string_new>
    1d28:	str	r0, [fp, #-28]	; 0xffffffe4
    1d2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d30:	movw	r1, #0
    1d34:	cmp	r0, r1
    1d38:	bne	1d50 <attribute_record_new+0x5a0>
    1d3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d40:	bl	0 <coda_dynamic_type_delete>
    1d44:	movw	r0, #0
    1d48:	str	r0, [fp, #-4]
    1d4c:	b	1e84 <attribute_record_new+0x6d4>
    1d50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d54:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1d58:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1d5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1d60:	bl	0 <coda_mem_record_add_field>
    1d64:	cmp	r0, #0
    1d68:	beq	1d88 <attribute_record_new+0x5d8>
    1d6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d70:	bl	0 <coda_dynamic_type_delete>
    1d74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d78:	bl	0 <coda_dynamic_type_delete>
    1d7c:	movw	r0, #0
    1d80:	str	r0, [fp, #-4]
    1d84:	b	1e84 <attribute_record_new+0x6d4>
    1d88:	b	1d8c <attribute_record_new+0x5dc>
    1d8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1d90:	add	r0, r0, #1
    1d94:	str	r0, [fp, #-40]	; 0xffffffd8
    1d98:	b	1b08 <attribute_record_new+0x358>
    1d9c:	movw	r0, #0
    1da0:	str	r0, [fp, #-40]	; 0xffffffd8
    1da4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1da8:	ldr	r1, [fp, #-8]
    1dac:	ldr	r1, [r1, #48]	; 0x30
    1db0:	cmp	r0, r1
    1db4:	bge	1e7c <attribute_record_new+0x6cc>
    1db8:	ldr	r0, [fp, #-8]
    1dbc:	ldr	r0, [r0, #52]	; 0x34
    1dc0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1dc4:	add	r0, r0, r1, lsl #2
    1dc8:	ldr	r0, [r0]
    1dcc:	ldrsb	r0, [r0, #16]
    1dd0:	cmp	r0, #0
    1dd4:	bne	1e68 <attribute_record_new+0x6b8>
    1dd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ddc:	ldr	r0, [r0, #20]
    1de0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1de4:	add	r0, r0, r1, lsl #2
    1de8:	ldr	r0, [r0]
    1dec:	movw	r1, #0
    1df0:	cmp	r0, r1
    1df4:	bne	1e68 <attribute_record_new+0x6b8>
    1df8:	ldr	r0, [fp, #8]
    1dfc:	cmp	r0, #0
    1e00:	beq	1e24 <attribute_record_new+0x674>
    1e04:	ldr	r0, [fp, #-8]
    1e08:	ldr	r0, [r0, #52]	; 0x34
    1e0c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1e10:	add	r0, r0, r1, lsl #2
    1e14:	ldr	r0, [r0]
    1e18:	movw	r1, #1
    1e1c:	strb	r1, [r0, #16]
    1e20:	b	1e64 <attribute_record_new+0x6b4>
    1e24:	ldr	r0, [fp, #-8]
    1e28:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1e2c:	sub	r2, fp, #56	; 0x38
    1e30:	bl	0 <coda_type_get_record_field_real_name>
    1e34:	ldr	r1, [pc, #84]	; 1e90 <attribute_record_new+0x6e0>
    1e38:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1e3c:	str	r0, [sp, #4]
    1e40:	mov	r0, r1
    1e44:	movw	r1, #0
    1e48:	movt	r1, #0
    1e4c:	bl	0 <coda_set_error>
    1e50:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1e54:	bl	0 <coda_dynamic_type_delete>
    1e58:	movw	r0, #0
    1e5c:	str	r0, [fp, #-4]
    1e60:	b	1e84 <attribute_record_new+0x6d4>
    1e64:	b	1e68 <attribute_record_new+0x6b8>
    1e68:	b	1e6c <attribute_record_new+0x6bc>
    1e6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1e70:	add	r0, r0, #1
    1e74:	str	r0, [fp, #-40]	; 0xffffffd8
    1e78:	b	1da4 <attribute_record_new+0x5f4>
    1e7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1e80:	str	r0, [fp, #-4]
    1e84:	ldr	r0, [fp, #-4]
    1e88:	mov	sp, fp
    1e8c:	pop	{fp, pc}
    1e90:	.word	0xfffffed4

00001e94 <is_whitespace>:
    1e94:	push	{fp, lr}
    1e98:	mov	fp, sp
    1e9c:	sub	sp, sp, #16
    1ea0:	str	r0, [sp, #8]
    1ea4:	str	r1, [sp, #4]
    1ea8:	ldr	r0, [sp, #8]
    1eac:	movw	r1, #0
    1eb0:	cmp	r0, r1
    1eb4:	beq	1ebc <is_whitespace+0x28>
    1eb8:	b	1edc <is_whitespace+0x48>
    1ebc:	movw	r0, #0
    1ec0:	movt	r0, #0
    1ec4:	movw	r1, #0
    1ec8:	movt	r1, #0
    1ecc:	movw	r2, #53	; 0x35
    1ed0:	movw	r3, #0
    1ed4:	movt	r3, #0
    1ed8:	bl	0 <__assert_fail>
    1edc:	movw	r0, #0
    1ee0:	str	r0, [sp]
    1ee4:	ldr	r0, [sp]
    1ee8:	ldr	r1, [sp, #4]
    1eec:	cmp	r0, r1
    1ef0:	bge	1f74 <is_whitespace+0xe0>
    1ef4:	ldr	r0, [sp, #8]
    1ef8:	ldr	r1, [sp]
    1efc:	add	r0, r0, r1
    1f00:	ldrb	r0, [r0]
    1f04:	cmp	r0, #32
    1f08:	beq	1f60 <is_whitespace+0xcc>
    1f0c:	ldr	r0, [sp, #8]
    1f10:	ldr	r1, [sp]
    1f14:	add	r0, r0, r1
    1f18:	ldrb	r0, [r0]
    1f1c:	cmp	r0, #9
    1f20:	beq	1f60 <is_whitespace+0xcc>
    1f24:	ldr	r0, [sp, #8]
    1f28:	ldr	r1, [sp]
    1f2c:	add	r0, r0, r1
    1f30:	ldrb	r0, [r0]
    1f34:	cmp	r0, #10
    1f38:	beq	1f60 <is_whitespace+0xcc>
    1f3c:	ldr	r0, [sp, #8]
    1f40:	ldr	r1, [sp]
    1f44:	add	r0, r0, r1
    1f48:	ldrb	r0, [r0]
    1f4c:	cmp	r0, #13
    1f50:	beq	1f60 <is_whitespace+0xcc>
    1f54:	movw	r0, #0
    1f58:	str	r0, [fp, #-4]
    1f5c:	b	1f7c <is_whitespace+0xe8>
    1f60:	b	1f64 <is_whitespace+0xd0>
    1f64:	ldr	r0, [sp]
    1f68:	add	r0, r0, #1
    1f6c:	str	r0, [sp]
    1f70:	b	1ee4 <is_whitespace+0x50>
    1f74:	movw	r0, #1
    1f78:	str	r0, [fp, #-4]
    1f7c:	ldr	r0, [fp, #-4]
    1f80:	mov	sp, fp
    1f84:	pop	{fp, pc}

00001f88 <convert_to_text>:
    1f88:	push	{fp, lr}
    1f8c:	mov	fp, sp
    1f90:	sub	sp, sp, #16
    1f94:	str	r0, [sp, #8]
    1f98:	ldr	r0, [sp, #8]
    1f9c:	ldr	r0, [r0]
    1fa0:	ldr	r0, [r0, #8]
    1fa4:	cmp	r0, #0
    1fa8:	bne	1fc4 <convert_to_text+0x3c>
    1fac:	ldr	r0, [sp, #8]
    1fb0:	ldr	r0, [r0]
    1fb4:	ldr	r0, [r0]
    1fb8:	cmp	r0, #2
    1fbc:	bne	1fc4 <convert_to_text+0x3c>
    1fc0:	b	1fe4 <convert_to_text+0x5c>
    1fc4:	movw	r0, #0
    1fc8:	movt	r0, #0
    1fcc:	movw	r1, #0
    1fd0:	movt	r1, #0
    1fd4:	movw	r2, #70	; 0x46
    1fd8:	movw	r3, #0
    1fdc:	movt	r3, #0
    1fe0:	bl	0 <__assert_fail>
    1fe4:	movw	r0, #2
    1fe8:	bl	0 <coda_type_text_new>
    1fec:	str	r0, [sp, #4]
    1ff0:	ldr	r0, [sp, #4]
    1ff4:	movw	r1, #0
    1ff8:	cmp	r0, r1
    1ffc:	bne	200c <convert_to_text+0x84>
    2000:	mvn	r0, #0
    2004:	str	r0, [fp, #-4]
    2008:	b	206c <convert_to_text+0xe4>
    200c:	ldr	r0, [sp, #8]
    2010:	ldr	r0, [r0]
    2014:	ldr	r0, [r0, #36]	; 0x24
    2018:	movw	r1, #0
    201c:	cmp	r0, r1
    2020:	beq	204c <convert_to_text+0xc4>
    2024:	ldr	r0, [sp, #8]
    2028:	ldr	r0, [r0]
    202c:	ldr	r0, [r0, #36]	; 0x24
    2030:	ldr	r1, [sp, #4]
    2034:	str	r0, [r1, #36]	; 0x24
    2038:	ldr	r0, [sp, #4]
    203c:	ldr	r0, [r0, #36]	; 0x24
    2040:	ldr	r1, [r0, #4]
    2044:	add	r1, r1, #1
    2048:	str	r1, [r0, #4]
    204c:	ldr	r0, [sp, #8]
    2050:	ldr	r0, [r0]
    2054:	bl	0 <coda_type_release>
    2058:	ldr	r0, [sp, #4]
    205c:	ldr	r1, [sp, #8]
    2060:	str	r0, [r1]
    2064:	movw	r0, #0
    2068:	str	r0, [fp, #-4]
    206c:	ldr	r0, [fp, #-4]
    2070:	mov	sp, fp
    2074:	pop	{fp, pc}
