
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_basic_parse.dir/test_basic_parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #84	; 0x54
       c:	mov	r9, r0
      10:	add	r0, sp, #24
      14:	mov	r4, r1
      18:	vmov.i32	q8, #0	; 0x00000000
      1c:	str	r3, [sp, #12]
      20:	mov	r8, r2
      24:	mov	r2, #0
      28:	mov	r3, #0
      2c:	add	r1, r0, #16
      30:	vst1.64	{d16-d17}, [r1]
      34:	mov	r1, #28
      38:	vst1.64	{d16-d17}, [r0], r1
      3c:	movw	r1, #0
      40:	vst1.32	{d16-d17}, [r0]
      44:	mov	r0, #1
      48:	movt	r1, #0
      4c:	str	r0, [sp, #40]	; 0x28
      50:	mov	r0, r9
      54:	str	r4, [sp, #28]
      58:	bl	0 <flatcc_builder_start_buffer>
      5c:	sub	r0, r8, r4
      60:	cmp	r0, #2
      64:	blt	d0 <test+0xd0>
      68:	ldrb	r0, [r4]
      6c:	cmp	r0, #32
      70:	bls	bc <test+0xbc>
      74:	mov	r6, r4
      78:	cmp	r6, r8
      7c:	beq	1158 <test+0x1158>
      80:	bcs	119c <test+0x119c>
      84:	ldrb	r0, [r6]
      88:	cmp	r0, #123	; 0x7b
      8c:	bne	119c <test+0x119c>
      90:	add	r1, r6, #1
      94:	sub	r0, r8, r1
      98:	cmp	r0, #2
      9c:	blt	100 <test+0x100>
      a0:	ldrb	r0, [r1]
      a4:	cmp	r0, #32
      a8:	bls	f0 <test+0xf0>
      ac:	mov	r6, r1
      b0:	cmp	r6, r8
      b4:	bne	118 <test+0x118>
      b8:	b	1158 <test+0x1158>
      bc:	bne	d0 <test+0xd0>
      c0:	mov	r6, r4
      c4:	ldrb	r0, [r6, #1]!
      c8:	cmp	r0, #32
      cc:	bhi	e4 <test+0xe4>
      d0:	add	r0, sp, #24
      d4:	mov	r1, r4
      d8:	mov	r2, r8
      dc:	bl	0 <flatcc_json_parser_space_ext>
      e0:	mov	r6, r0
      e4:	cmp	r6, r8
      e8:	bne	80 <test+0x80>
      ec:	b	1158 <test+0x1158>
      f0:	bne	100 <test+0x100>
      f4:	ldrb	r0, [r6, #2]!
      f8:	cmp	r0, #32
      fc:	bhi	110 <test+0x110>
     100:	add	r0, sp, #24
     104:	mov	r2, r8
     108:	bl	0 <flatcc_json_parser_space_ext>
     10c:	mov	r6, r0
     110:	cmp	r6, r8
     114:	beq	1158 <test+0x1158>
     118:	mov	r0, r9
     11c:	mov	r1, #11
     120:	bl	0 <flatcc_builder_start_table>
     124:	add	r0, sp, #20
     128:	add	r4, sp, #24
     12c:	str	r9, [sp, #16]
     130:	add	r0, r0, #1
     134:	str	r0, [sp, #8]
     138:	cmp	r6, r8
     13c:	mov	r9, r8
     140:	beq	18c <test+0x18c>
     144:	ldrb	r0, [r6]
     148:	cmp	r0, #46	; 0x2e
     14c:	beq	164 <test+0x164>
     150:	cmp	r0, #34	; 0x22
     154:	bne	180 <test+0x180>
     158:	mov	r0, #0
     15c:	add	r9, r6, #1
     160:	b	188 <test+0x188>
     164:	mov	r0, r4
     168:	mov	r1, r6
     16c:	mov	r2, r8
     170:	mov	r3, #5
     174:	bl	0 <flatcc_json_parser_set_error>
     178:	mov	r9, r0
     17c:	b	18c <test+0x18c>
     180:	mov	r0, #1
     184:	mov	r9, r6
     188:	str	r0, [sp, #36]	; 0x24
     18c:	sub	r3, r8, r9
     190:	mov	r0, #8
     194:	cmp	r3, #8
     198:	movcc	r0, r3
     19c:	and	r0, r0, #15
     1a0:	sub	r7, r0, #1
     1a4:	cmp	r7, #7
     1a8:	bhi	1180 <test+0x1180>
     1ac:	add	r4, pc, #32
     1b0:	mov	sl, #0
     1b4:	mov	ip, #0
     1b8:	mov	lr, #0
     1bc:	mov	r1, #0
     1c0:	mov	r6, #0
     1c4:	mov	r5, #0
     1c8:	mov	r2, #0
     1cc:	mov	r0, #0
     1d0:	ldr	pc, [r4, r7, lsl #2]
     1d4:	.word	0x00000238
     1d8:	.word	0x00000230
     1dc:	.word	0x00000228
     1e0:	.word	0x00000220
     1e4:	.word	0x00000214
     1e8:	.word	0x00000208
     1ec:	.word	0x000001f8
     1f0:	.word	0x000001f4
     1f4:	ldrb	ip, [r9, #7]
     1f8:	ldrb	r0, [r9, #6]
     1fc:	mov	lr, sl
     200:	orr	r0, ip, r0, lsl #8
     204:	mov	sl, r0
     208:	ldrb	r0, [r9, #5]
     20c:	mov	r1, lr
     210:	orr	sl, sl, r0, lsl #16
     214:	ldrb	r0, [r9, #4]
     218:	mov	r6, r1
     21c:	orr	sl, sl, r0, lsl #24
     220:	ldrb	r0, [r9, #3]
     224:	orr	r5, r0, r6
     228:	ldrb	r0, [r9, #2]
     22c:	orr	r2, r5, r0, lsl #8
     230:	ldrb	r0, [r9, #1]
     234:	orr	r0, r2, r0, lsl #16
     238:	mov	r1, r9
     23c:	cmp	r3, #8
     240:	movw	r7, #25455	; 0x636f
     244:	ldrb	r2, [r1], #8
     248:	movt	r7, #29541	; 0x7365
     24c:	orr	r3, r0, r2, lsl #24
     250:	mov	r0, sl
     254:	movw	r2, #0
     258:	movle	r1, r8
     25c:	bfc	r0, #0, #16
     260:	movt	r2, #28260	; 0x6e64
     264:	subs	r2, r0, r2
     268:	sbcs	r2, r3, r7
     26c:	bcs	32c <test+0x32c>
     270:	movw	r0, #29299	; 0x7273
     274:	and	r1, sl, #-16777216	; 0xff000000
     278:	add	r4, sp, #24
     27c:	movt	r0, #26217	; 0x6669
     280:	eor	r1, r1, #1946157056	; 0x74000000
     284:	eor	r0, r3, r0
     288:	orrs	r0, r1, r0
     28c:	bne	1180 <test+0x1180>
     290:	ldr	r0, [sp, #36]	; 0x24
     294:	add	r1, r9, #5
     298:	cmp	r0, #0
     29c:	beq	4b8 <test+0x4b8>
     2a0:	cmp	r1, r8
     2a4:	mov	r3, r8
     2a8:	beq	7e4 <test+0x7e4>
     2ac:	ldrb	r3, [r1]
     2b0:	cmp	r3, #33	; 0x21
     2b4:	bcc	324 <test+0x324>
     2b8:	add	r0, r9, #6
     2bc:	uxtb	r2, r3
     2c0:	cmp	r2, #46	; 0x2e
     2c4:	cmpne	r2, #95	; 0x5f
     2c8:	bne	2e8 <test+0x2e8>
     2cc:	cmp	r8, r0
     2d0:	beq	788 <test+0x788>
     2d4:	ldrb	r3, [r0], #1
     2d8:	add	r1, r1, #1
     2dc:	cmp	r3, #33	; 0x21
     2e0:	bcs	2bc <test+0x2bc>
     2e4:	b	78c <test+0x78c>
     2e8:	sxtb	r7, r3
     2ec:	cmp	r7, #0
     2f0:	blt	2cc <test+0x2cc>
     2f4:	sub	r7, r3, #48	; 0x30
     2f8:	uxtb	r7, r7
     2fc:	cmp	r7, #9
     300:	bls	2cc <test+0x2cc>
     304:	orr	r3, r3, #32
     308:	sub	r3, r3, #97	; 0x61
     30c:	uxtb	r3, r3
     310:	cmp	r3, #26
     314:	bcc	2cc <test+0x2cc>
     318:	sub	r1, r0, #1
     31c:	cmp	r2, #46	; 0x2e
     320:	beq	794 <test+0x794>
     324:	mov	r3, r1
     328:	b	7e4 <test+0x7e4>
     32c:	movw	r2, #27764	; 0x6c74
     330:	movt	r2, #31349	; 0x7a75
     334:	cmp	r3, r2
     338:	bhi	408 <test+0x408>
     33c:	movw	r6, #29472	; 0x7320
     340:	movt	r6, #28260	; 0x6e64
     344:	subs	r2, sl, r6
     348:	sbcs	r2, r3, r7
     34c:	bcs	500 <test+0x500>
     350:	movw	r1, #0
     354:	movt	r1, #28260	; 0x6e64
     358:	eor	r0, r0, r1
     35c:	eor	r1, r3, r7
     360:	orrs	r0, r0, r1
     364:	bne	1180 <test+0x1180>
     368:	ldr	r0, [sp, #36]	; 0x24
     36c:	add	r1, r9, #6
     370:	cmp	r0, #0
     374:	beq	73c <test+0x73c>
     378:	cmp	r1, r8
     37c:	mov	r3, r8
     380:	add	r4, sp, #24
     384:	beq	d38 <test+0xd38>
     388:	ldrb	r3, [r1]
     38c:	cmp	r3, #33	; 0x21
     390:	bcc	400 <test+0x400>
     394:	add	r0, r9, #7
     398:	uxtb	r2, r3
     39c:	cmp	r2, #46	; 0x2e
     3a0:	cmpne	r2, #95	; 0x5f
     3a4:	bne	3c4 <test+0x3c4>
     3a8:	cmp	r8, r0
     3ac:	beq	ac8 <test+0xac8>
     3b0:	ldrb	r3, [r0], #1
     3b4:	add	r1, r1, #1
     3b8:	cmp	r3, #33	; 0x21
     3bc:	bcs	398 <test+0x398>
     3c0:	b	acc <test+0xacc>
     3c4:	sxtb	r7, r3
     3c8:	cmp	r7, #0
     3cc:	blt	3a8 <test+0x3a8>
     3d0:	sub	r7, r3, #48	; 0x30
     3d4:	uxtb	r7, r7
     3d8:	cmp	r7, #9
     3dc:	bls	3a8 <test+0x3a8>
     3e0:	orr	r3, r3, #32
     3e4:	sub	r3, r3, #97	; 0x61
     3e8:	uxtb	r3, r3
     3ec:	cmp	r3, #26
     3f0:	bcc	3a8 <test+0x3a8>
     3f4:	sub	r1, r0, #1
     3f8:	cmp	r2, #46	; 0x2e
     3fc:	beq	ad4 <test+0xad4>
     400:	mov	r3, r1
     404:	b	d38 <test+0xd38>
     408:	movw	r0, #27765	; 0x6c75
     40c:	movt	r0, #31349	; 0x7a75
     410:	teq	r3, r0
     414:	bne	1180 <test+0x1180>
     418:	ldr	r0, [sp, #36]	; 0x24
     41c:	add	r1, r9, #4
     420:	cmp	r0, #0
     424:	beq	63c <test+0x63c>
     428:	cmp	r1, r8
     42c:	mov	r3, r8
     430:	add	r4, sp, #24
     434:	beq	b00 <test+0xb00>
     438:	ldrb	r3, [r1]
     43c:	cmp	r3, #33	; 0x21
     440:	bcc	4b0 <test+0x4b0>
     444:	add	r0, r9, #5
     448:	uxtb	r2, r3
     44c:	cmp	r2, #46	; 0x2e
     450:	cmpne	r2, #95	; 0x5f
     454:	bne	474 <test+0x474>
     458:	cmp	r8, r0
     45c:	beq	7ac <test+0x7ac>
     460:	ldrb	r3, [r0], #1
     464:	add	r1, r1, #1
     468:	cmp	r3, #33	; 0x21
     46c:	bcs	448 <test+0x448>
     470:	b	7b0 <test+0x7b0>
     474:	sxtb	r7, r3
     478:	cmp	r7, #0
     47c:	blt	458 <test+0x458>
     480:	sub	r7, r3, #48	; 0x30
     484:	uxtb	r7, r7
     488:	cmp	r7, #9
     48c:	bls	458 <test+0x458>
     490:	orr	r3, r3, #32
     494:	sub	r3, r3, #97	; 0x61
     498:	uxtb	r3, r3
     49c:	cmp	r3, #26
     4a0:	bcc	458 <test+0x458>
     4a4:	sub	r1, r0, #1
     4a8:	cmp	r2, #46	; 0x2e
     4ac:	beq	7b8 <test+0x7b8>
     4b0:	mov	r3, r1
     4b4:	b	b00 <test+0xb00>
     4b8:	cmp	r1, r8
     4bc:	mov	r2, r8
     4c0:	beq	7cc <test+0x7cc>
     4c4:	ldrb	r0, [r1]
     4c8:	cmp	r0, #92	; 0x5c
     4cc:	beq	4dc <test+0x4dc>
     4d0:	cmp	r0, #34	; 0x22
     4d4:	bne	4ec <test+0x4ec>
     4d8:	b	734 <test+0x734>
     4dc:	sub	r0, r8, r1
     4e0:	cmp	r0, #2
     4e4:	blt	7c8 <test+0x7c8>
     4e8:	add	r1, r1, #1
     4ec:	add	r1, r1, #1
     4f0:	cmp	r1, r8
     4f4:	bne	4c4 <test+0x4c4>
     4f8:	mov	r2, r8
     4fc:	b	7cc <test+0x7cc>
     500:	eor	r0, sl, r6
     504:	eor	r2, r3, r7
     508:	orrs	r0, r0, r2
     50c:	bne	1180 <test+0x1180>
     510:	sub	r0, r8, r1
     514:	mov	r2, #8
     518:	ldr	r9, [sp, #16]
     51c:	add	r4, sp, #24
     520:	cmp	r0, #8
     524:	movcs	r0, r2
     528:	and	r0, r0, #15
     52c:	sub	r2, r0, #1
     530:	cmp	r2, #7
     534:	bhi	12f0 <test+0x12f0>
     538:	add	r3, pc, #4
     53c:	mov	r0, #0
     540:	ldr	pc, [r3, r2, lsl #2]
     544:	.word	0x00000578
     548:	.word	0x00000570
     54c:	.word	0x00000568
     550:	.word	0x00000564
     554:	.word	0x00000564
     558:	.word	0x00000564
     55c:	.word	0x00000564
     560:	.word	0x00000564
     564:	ldrb	r0, [r1, #3]
     568:	ldrb	r2, [r1, #2]
     56c:	orr	r0, r0, r2, lsl #8
     570:	ldrb	r2, [r1, #1]
     574:	orr	r0, r0, r2, lsl #16
     578:	ldrb	r2, [r1]
     57c:	orr	r0, r0, r2, lsl #24
     580:	movw	r2, #26227	; 0x6673
     584:	movt	r2, #27749	; 0x6c65
     588:	cmp	r0, r2
     58c:	bhi	688 <test+0x688>
     590:	movw	r2, #24932	; 0x6164
     594:	movt	r2, #27749	; 0x6c65
     598:	teq	r0, r2
     59c:	bne	12f0 <test+0x12f0>
     5a0:	ldr	r0, [sp, #36]	; 0x24
     5a4:	add	r2, r1, #4
     5a8:	cmp	r0, #0
     5ac:	beq	a30 <test+0xa30>
     5b0:	cmp	r2, r8
     5b4:	mov	r3, r8
     5b8:	beq	ea0 <test+0xea0>
     5bc:	ldrb	r3, [r2]
     5c0:	cmp	r3, #33	; 0x21
     5c4:	bcc	634 <test+0x634>
     5c8:	add	r0, r1, #5
     5cc:	uxtb	r1, r3
     5d0:	cmp	r1, #46	; 0x2e
     5d4:	cmpne	r1, #95	; 0x5f
     5d8:	bne	5f8 <test+0x5f8>
     5dc:	cmp	r8, r0
     5e0:	beq	e48 <test+0xe48>
     5e4:	ldrb	r3, [r0], #1
     5e8:	add	r2, r2, #1
     5ec:	cmp	r3, #33	; 0x21
     5f0:	bcs	5cc <test+0x5cc>
     5f4:	b	e4c <test+0xe4c>
     5f8:	sxtb	r7, r3
     5fc:	cmp	r7, #0
     600:	blt	5dc <test+0x5dc>
     604:	sub	r7, r3, #48	; 0x30
     608:	uxtb	r7, r7
     60c:	cmp	r7, #9
     610:	bls	5dc <test+0x5dc>
     614:	orr	r3, r3, #32
     618:	sub	r3, r3, #97	; 0x61
     61c:	uxtb	r3, r3
     620:	cmp	r3, #26
     624:	bcc	5dc <test+0x5dc>
     628:	sub	r2, r0, #1
     62c:	cmp	r1, #46	; 0x2e
     630:	beq	e54 <test+0xe54>
     634:	mov	r3, r2
     638:	b	ea0 <test+0xea0>
     63c:	cmp	r1, r8
     640:	mov	r2, r8
     644:	add	r4, sp, #24
     648:	beq	ae8 <test+0xae8>
     64c:	ldrb	r0, [r1]
     650:	cmp	r0, #92	; 0x5c
     654:	beq	664 <test+0x664>
     658:	cmp	r0, #34	; 0x22
     65c:	bne	674 <test+0x674>
     660:	b	7a4 <test+0x7a4>
     664:	sub	r0, r8, r1
     668:	cmp	r0, #2
     66c:	blt	ae4 <test+0xae4>
     670:	add	r1, r1, #1
     674:	add	r1, r1, #1
     678:	cmp	r1, r8
     67c:	bne	64c <test+0x64c>
     680:	mov	r2, r8
     684:	b	ae8 <test+0xae8>
     688:	movw	r2, #26228	; 0x6674
     68c:	movt	r2, #27749	; 0x6c65
     690:	teq	r0, r2
     694:	bne	12f0 <test+0x12f0>
     698:	ldr	r0, [sp, #36]	; 0x24
     69c:	add	r2, r1, #4
     6a0:	cmp	r0, #0
     6a4:	beq	a78 <test+0xa78>
     6a8:	cmp	r2, r8
     6ac:	mov	r3, r8
     6b0:	beq	1018 <test+0x1018>
     6b4:	ldrb	r3, [r2]
     6b8:	cmp	r3, #33	; 0x21
     6bc:	bcc	72c <test+0x72c>
     6c0:	add	r0, r1, #5
     6c4:	uxtb	r1, r3
     6c8:	cmp	r1, #46	; 0x2e
     6cc:	cmpne	r1, #95	; 0x5f
     6d0:	bne	6f0 <test+0x6f0>
     6d4:	cmp	r8, r0
     6d8:	beq	e68 <test+0xe68>
     6dc:	ldrb	r3, [r0], #1
     6e0:	add	r2, r2, #1
     6e4:	cmp	r3, #33	; 0x21
     6e8:	bcs	6c4 <test+0x6c4>
     6ec:	b	e6c <test+0xe6c>
     6f0:	sxtb	r7, r3
     6f4:	cmp	r7, #0
     6f8:	blt	6d4 <test+0x6d4>
     6fc:	sub	r7, r3, #48	; 0x30
     700:	uxtb	r7, r7
     704:	cmp	r7, #9
     708:	bls	6d4 <test+0x6d4>
     70c:	orr	r3, r3, #32
     710:	sub	r3, r3, #97	; 0x61
     714:	uxtb	r3, r3
     718:	cmp	r3, #26
     71c:	bcc	6d4 <test+0x6d4>
     720:	sub	r2, r0, #1
     724:	cmp	r1, #46	; 0x2e
     728:	beq	e74 <test+0xe74>
     72c:	mov	r3, r2
     730:	b	1018 <test+0x1018>
     734:	add	r3, r1, #1
     738:	b	7e4 <test+0x7e4>
     73c:	cmp	r1, r8
     740:	mov	r2, r8
     744:	add	r4, sp, #24
     748:	beq	d20 <test+0xd20>
     74c:	ldrb	r0, [r1]
     750:	cmp	r0, #92	; 0x5c
     754:	beq	764 <test+0x764>
     758:	cmp	r0, #34	; 0x22
     75c:	bne	774 <test+0x774>
     760:	b	ac0 <test+0xac0>
     764:	sub	r0, r8, r1
     768:	cmp	r0, #2
     76c:	blt	d1c <test+0xd1c>
     770:	add	r1, r1, #1
     774:	add	r1, r1, #1
     778:	cmp	r1, r8
     77c:	bne	74c <test+0x74c>
     780:	mov	r2, r8
     784:	b	d20 <test+0xd20>
     788:	mov	r1, r8
     78c:	cmp	r2, #46	; 0x2e
     790:	bne	324 <test+0x324>
     794:	mov	r0, r4
     798:	mov	r2, r8
     79c:	mov	r3, #5
     7a0:	b	7dc <test+0x7dc>
     7a4:	add	r3, r1, #1
     7a8:	b	b00 <test+0xb00>
     7ac:	mov	r1, r8
     7b0:	cmp	r2, #46	; 0x2e
     7b4:	bne	4b0 <test+0x4b0>
     7b8:	mov	r0, r4
     7bc:	mov	r2, r8
     7c0:	mov	r3, #5
     7c4:	b	af8 <test+0xaf8>
     7c8:	mov	r2, r1
     7cc:	mov	r1, r2
     7d0:	mov	r0, r4
     7d4:	mov	r2, r8
     7d8:	mov	r3, #20
     7dc:	bl	0 <flatcc_json_parser_set_error>
     7e0:	mov	r3, r0
     7e4:	ldr	r9, [sp, #16]
     7e8:	sub	r0, r8, r3
     7ec:	cmp	r0, #2
     7f0:	blt	85c <test+0x85c>
     7f4:	ldrb	r0, [r3]
     7f8:	cmp	r0, #32
     7fc:	bls	848 <test+0x848>
     800:	mov	sl, r3
     804:	cmp	sl, r8
     808:	beq	1158 <test+0x1158>
     80c:	bcs	11ac <test+0x11ac>
     810:	ldrb	r0, [sl]
     814:	cmp	r0, #58	; 0x3a
     818:	bne	11ac <test+0x11ac>
     81c:	add	r1, sl, #1
     820:	sub	r0, r8, r1
     824:	cmp	r0, #2
     828:	blt	88c <test+0x88c>
     82c:	ldrb	r0, [r1]
     830:	cmp	r0, #32
     834:	bls	87c <test+0x87c>
     838:	mov	sl, r1
     83c:	cmp	sl, r8
     840:	bne	8a4 <test+0x8a4>
     844:	b	1158 <test+0x1158>
     848:	bne	85c <test+0x85c>
     84c:	mov	sl, r3
     850:	ldrb	r0, [sl, #1]!
     854:	cmp	r0, #32
     858:	bhi	870 <test+0x870>
     85c:	mov	r0, r4
     860:	mov	r1, r3
     864:	mov	r2, r8
     868:	bl	0 <flatcc_json_parser_space_ext>
     86c:	mov	sl, r0
     870:	cmp	sl, r8
     874:	bne	80c <test+0x80c>
     878:	b	1158 <test+0x1158>
     87c:	bne	88c <test+0x88c>
     880:	ldrb	r0, [sl, #2]!
     884:	cmp	r0, #32
     888:	bhi	89c <test+0x89c>
     88c:	mov	r0, r4
     890:	mov	r2, r8
     894:	bl	0 <flatcc_json_parser_space_ext>
     898:	mov	sl, r0
     89c:	cmp	sl, r8
     8a0:	beq	1158 <test+0x1158>
     8a4:	mov	r0, r9
     8a8:	mov	r1, #0
     8ac:	mov	r2, #1
     8b0:	mov	r3, #1
     8b4:	bl	0 <flatcc_builder_table_add>
     8b8:	cmp	r0, #0
     8bc:	beq	126c <test+0x126c>
     8c0:	mov	r6, r0
     8c4:	mov	r0, #0
     8c8:	mov	r1, sl
     8cc:	mov	r2, r8
     8d0:	sub	r3, fp, #44	; 0x2c
     8d4:	str	r0, [fp, #-36]	; 0xffffffdc
     8d8:	str	r0, [fp, #-40]	; 0xffffffd8
     8dc:	str	r0, [fp, #-44]	; 0xffffffd4
     8e0:	strb	r0, [r6]
     8e4:	sub	r0, fp, #40	; 0x28
     8e8:	str	r0, [sp]
     8ec:	mov	r0, r4
     8f0:	bl	0 <flatcc_json_parser_integer>
     8f4:	cmp	r0, sl
     8f8:	mov	r1, sl
     8fc:	beq	964 <test+0x964>
     900:	mov	r2, r0
     904:	ldr	r0, [fp, #-44]	; 0xffffffd4
     908:	cmp	r0, #0
     90c:	beq	924 <test+0x924>
     910:	mov	r1, r2
     914:	mov	r0, r4
     918:	mov	r2, r8
     91c:	mov	r3, #8
     920:	b	948 <test+0x948>
     924:	ldr	r0, [fp, #-40]	; 0xffffffd8
     928:	ldr	r1, [fp, #-36]	; 0xffffffdc
     92c:	subs	r3, r0, #256	; 0x100
     930:	sbcs	r1, r1, #0
     934:	bcc	95c <test+0x95c>
     938:	mov	r1, r2
     93c:	mov	r0, r4
     940:	mov	r2, r8
     944:	mov	r3, #7
     948:	bl	0 <flatcc_json_parser_set_error>
     94c:	mov	r1, r0
     950:	cmp	sl, r1
     954:	bne	96c <test+0x96c>
     958:	b	126c <test+0x126c>
     95c:	strb	r0, [r6]
     960:	mov	r1, r2
     964:	cmp	sl, r1
     968:	beq	126c <test+0x126c>
     96c:	sub	r0, r8, r1
     970:	cmp	r0, #2
     974:	blt	9a8 <test+0x9a8>
     978:	ldrb	r0, [r1]
     97c:	cmp	r0, #32
     980:	bls	994 <test+0x994>
     984:	mov	r6, r1
     988:	cmp	r6, r8
     98c:	bne	9c0 <test+0x9c0>
     990:	b	1158 <test+0x1158>
     994:	bne	9a8 <test+0x9a8>
     998:	mov	r6, r1
     99c:	ldrb	r0, [r6, #1]!
     9a0:	cmp	r0, #32
     9a4:	bhi	9b8 <test+0x9b8>
     9a8:	mov	r0, r4
     9ac:	mov	r2, r8
     9b0:	bl	0 <flatcc_json_parser_space_ext>
     9b4:	mov	r6, r0
     9b8:	cmp	r6, r8
     9bc:	beq	1158 <test+0x1158>
     9c0:	ldrb	r0, [r6]
     9c4:	cmp	r0, #44	; 0x2c
     9c8:	bne	11e0 <test+0x11e0>
     9cc:	add	r1, r6, #1
     9d0:	sub	r0, r8, r1
     9d4:	cmp	r0, #2
     9d8:	blt	a08 <test+0xa08>
     9dc:	ldrb	r0, [r1]
     9e0:	cmp	r0, #32
     9e4:	bls	9f8 <test+0x9f8>
     9e8:	mov	r6, r1
     9ec:	cmp	r6, r8
     9f0:	bne	a20 <test+0xa20>
     9f4:	b	1158 <test+0x1158>
     9f8:	bne	a08 <test+0xa08>
     9fc:	ldrb	r0, [r6, #2]!
     a00:	cmp	r0, #32
     a04:	bhi	a18 <test+0xa18>
     a08:	mov	r0, r4
     a0c:	mov	r2, r8
     a10:	bl	0 <flatcc_json_parser_space_ext>
     a14:	mov	r6, r0
     a18:	cmp	r6, r8
     a1c:	beq	1158 <test+0x1158>
     a20:	ldrb	r0, [r6]
     a24:	cmp	r0, #125	; 0x7d
     a28:	bne	138 <test+0x138>
     a2c:	b	11dc <test+0x11dc>
     a30:	cmp	r2, r8
     a34:	mov	r1, r8
     a38:	beq	e8c <test+0xe8c>
     a3c:	ldrb	r0, [r2]
     a40:	cmp	r0, #92	; 0x5c
     a44:	beq	a54 <test+0xa54>
     a48:	cmp	r0, #34	; 0x22
     a4c:	bne	a64 <test+0xa64>
     a50:	b	e38 <test+0xe38>
     a54:	sub	r0, r8, r2
     a58:	cmp	r0, #2
     a5c:	blt	e88 <test+0xe88>
     a60:	add	r2, r2, #1
     a64:	add	r2, r2, #1
     a68:	cmp	r2, r8
     a6c:	bne	a3c <test+0xa3c>
     a70:	mov	r1, r8
     a74:	b	e8c <test+0xe8c>
     a78:	cmp	r2, r8
     a7c:	mov	r1, r8
     a80:	beq	1004 <test+0x1004>
     a84:	ldrb	r0, [r2]
     a88:	cmp	r0, #92	; 0x5c
     a8c:	beq	a9c <test+0xa9c>
     a90:	cmp	r0, #34	; 0x22
     a94:	bne	aac <test+0xaac>
     a98:	b	e40 <test+0xe40>
     a9c:	sub	r0, r8, r2
     aa0:	cmp	r0, #2
     aa4:	blt	1000 <test+0x1000>
     aa8:	add	r2, r2, #1
     aac:	add	r2, r2, #1
     ab0:	cmp	r2, r8
     ab4:	bne	a84 <test+0xa84>
     ab8:	mov	r1, r8
     abc:	b	1004 <test+0x1004>
     ac0:	add	r3, r1, #1
     ac4:	b	d38 <test+0xd38>
     ac8:	mov	r1, r8
     acc:	cmp	r2, #46	; 0x2e
     ad0:	bne	400 <test+0x400>
     ad4:	mov	r0, r4
     ad8:	mov	r2, r8
     adc:	mov	r3, #5
     ae0:	b	d30 <test+0xd30>
     ae4:	mov	r2, r1
     ae8:	mov	r1, r2
     aec:	mov	r0, r4
     af0:	mov	r2, r8
     af4:	mov	r3, #20
     af8:	bl	0 <flatcc_json_parser_set_error>
     afc:	mov	r3, r0
     b00:	ldr	r9, [sp, #16]
     b04:	sub	r0, r8, r3
     b08:	cmp	r0, #2
     b0c:	blt	b78 <test+0xb78>
     b10:	ldrb	r0, [r3]
     b14:	cmp	r0, #32
     b18:	bls	b64 <test+0xb64>
     b1c:	mov	r6, r3
     b20:	cmp	r6, r8
     b24:	beq	1158 <test+0x1158>
     b28:	bcs	1238 <test+0x1238>
     b2c:	ldrb	r0, [r6]
     b30:	cmp	r0, #58	; 0x3a
     b34:	bne	1238 <test+0x1238>
     b38:	add	r1, r6, #1
     b3c:	sub	r0, r8, r1
     b40:	cmp	r0, #2
     b44:	blt	ba8 <test+0xba8>
     b48:	ldrb	r0, [r1]
     b4c:	cmp	r0, #32
     b50:	bls	b98 <test+0xb98>
     b54:	mov	r6, r1
     b58:	cmp	r6, r8
     b5c:	bne	bc0 <test+0xbc0>
     b60:	b	1158 <test+0x1158>
     b64:	bne	b78 <test+0xb78>
     b68:	mov	r6, r3
     b6c:	ldrb	r0, [r6, #1]!
     b70:	cmp	r0, #32
     b74:	bhi	b8c <test+0xb8c>
     b78:	mov	r0, r4
     b7c:	mov	r1, r3
     b80:	mov	r2, r8
     b84:	bl	0 <flatcc_json_parser_space_ext>
     b88:	mov	r6, r0
     b8c:	cmp	r6, r8
     b90:	bne	b28 <test+0xb28>
     b94:	b	1158 <test+0x1158>
     b98:	bne	ba8 <test+0xba8>
     b9c:	ldrb	r0, [r6, #2]!
     ba0:	cmp	r0, #32
     ba4:	bhi	bb8 <test+0xbb8>
     ba8:	mov	r0, r4
     bac:	mov	r2, r8
     bb0:	bl	0 <flatcc_json_parser_space_ext>
     bb4:	mov	r6, r0
     bb8:	cmp	r6, r8
     bbc:	beq	1158 <test+0x1158>
     bc0:	ldrb	r0, [r6]
     bc4:	cmp	r0, #34	; 0x22
     bc8:	bne	bd4 <test+0xbd4>
     bcc:	add	r6, r6, #1
     bd0:	b	bec <test+0xbec>
     bd4:	mov	r0, r4
     bd8:	mov	r1, r6
     bdc:	mov	r2, r8
     be0:	mov	r3, #16
     be4:	bl	0 <flatcc_json_parser_set_error>
     be8:	mov	r6, r0
     bec:	mov	r0, r4
     bf0:	mov	r1, r6
     bf4:	mov	r2, r8
     bf8:	bl	0 <flatcc_json_parser_string_part>
     bfc:	cmp	r0, r8
     c00:	beq	11d4 <test+0x11d4>
     c04:	mov	sl, r0
     c08:	ldrb	r0, [r0]
     c0c:	cmp	r0, #34	; 0x22
     c10:	bne	c28 <test+0xc28>
     c14:	sub	r2, sl, r6
     c18:	mov	r0, r9
     c1c:	mov	r1, r6
     c20:	bl	0 <flatcc_builder_create_string>
     c24:	b	cc0 <test+0xcc0>
     c28:	mov	r0, r9
     c2c:	bl	0 <flatcc_builder_start_string>
     c30:	mov	r0, r9
     c34:	sub	r9, sl, r6
     c38:	mov	r1, r9
     c3c:	bl	0 <flatcc_builder_extend_string>
     c40:	cmp	r0, #0
     c44:	beq	1354 <test+0x1354>
     c48:	mov	r1, r6
     c4c:	mov	r2, r9
     c50:	bl	0 <memcpy>
     c54:	ldr	r9, [sp, #16]
     c58:	mov	r0, r4
     c5c:	mov	r1, sl
     c60:	mov	r2, r8
     c64:	add	r3, sp, #20
     c68:	bl	0 <flatcc_json_parser_string_escape>
     c6c:	ldrb	r2, [sp, #20]
     c70:	ldr	r1, [sp, #8]
     c74:	mov	r6, r0
     c78:	mov	r0, r9
     c7c:	bl	0 <flatcc_builder_append_string>
     c80:	mov	r0, r4
     c84:	mov	r1, r6
     c88:	mov	r2, r8
     c8c:	bl	0 <flatcc_json_parser_string_part>
     c90:	cmp	r0, r8
     c94:	beq	11d4 <test+0x11d4>
     c98:	mov	sl, r0
     c9c:	sub	r2, r0, r6
     ca0:	mov	r0, r9
     ca4:	mov	r1, r6
     ca8:	bl	0 <flatcc_builder_append_string>
     cac:	ldrb	r0, [sl]
     cb0:	cmp	r0, #34	; 0x22
     cb4:	bne	c58 <test+0xc58>
     cb8:	mov	r0, r9
     cbc:	bl	0 <flatcc_builder_end_string>
     cc0:	mov	r6, r0
     cc4:	cmp	r0, #0
     cc8:	beq	126c <test+0x126c>
     ccc:	mov	r0, r9
     cd0:	mov	r1, #10
     cd4:	bl	0 <flatcc_builder_table_add_offset>
     cd8:	cmp	r0, #0
     cdc:	beq	126c <test+0x126c>
     ce0:	cmp	sl, r8
     ce4:	str	r6, [r0]
     ce8:	beq	d00 <test+0xd00>
     cec:	ldrb	r0, [sl]
     cf0:	cmp	r0, #34	; 0x22
     cf4:	bne	d00 <test+0xd00>
     cf8:	add	r1, sl, #1
     cfc:	b	96c <test+0x96c>
     d00:	mov	r0, r4
     d04:	mov	r1, sl
     d08:	mov	r2, r8
     d0c:	mov	r3, #20
     d10:	bl	0 <flatcc_json_parser_set_error>
     d14:	mov	r1, r0
     d18:	b	96c <test+0x96c>
     d1c:	mov	r2, r1
     d20:	mov	r1, r2
     d24:	mov	r0, r4
     d28:	mov	r2, r8
     d2c:	mov	r3, #20
     d30:	bl	0 <flatcc_json_parser_set_error>
     d34:	mov	r3, r0
     d38:	ldr	r9, [sp, #16]
     d3c:	sub	r0, r8, r3
     d40:	cmp	r0, #2
     d44:	blt	db0 <test+0xdb0>
     d48:	ldrb	r0, [r3]
     d4c:	cmp	r0, #32
     d50:	bls	d9c <test+0xd9c>
     d54:	mov	sl, r3
     d58:	cmp	sl, r8
     d5c:	beq	1158 <test+0x1158>
     d60:	bcs	11ac <test+0x11ac>
     d64:	ldrb	r0, [sl]
     d68:	cmp	r0, #58	; 0x3a
     d6c:	bne	11ac <test+0x11ac>
     d70:	add	r1, sl, #1
     d74:	sub	r0, r8, r1
     d78:	cmp	r0, #2
     d7c:	blt	de0 <test+0xde0>
     d80:	ldrb	r0, [r1]
     d84:	cmp	r0, #32
     d88:	bls	dd0 <test+0xdd0>
     d8c:	mov	sl, r1
     d90:	cmp	sl, r8
     d94:	bne	df8 <test+0xdf8>
     d98:	b	1158 <test+0x1158>
     d9c:	bne	db0 <test+0xdb0>
     da0:	mov	sl, r3
     da4:	ldrb	r0, [sl, #1]!
     da8:	cmp	r0, #32
     dac:	bhi	dc4 <test+0xdc4>
     db0:	mov	r0, r4
     db4:	mov	r1, r3
     db8:	mov	r2, r8
     dbc:	bl	0 <flatcc_json_parser_space_ext>
     dc0:	mov	sl, r0
     dc4:	cmp	sl, r8
     dc8:	bne	d60 <test+0xd60>
     dcc:	b	1158 <test+0x1158>
     dd0:	bne	de0 <test+0xde0>
     dd4:	ldrb	r0, [sl, #2]!
     dd8:	cmp	r0, #32
     ddc:	bhi	df0 <test+0xdf0>
     de0:	mov	r0, r4
     de4:	mov	r2, r8
     de8:	bl	0 <flatcc_json_parser_space_ext>
     dec:	mov	sl, r0
     df0:	cmp	sl, r8
     df4:	beq	1158 <test+0x1158>
     df8:	mov	r0, r9
     dfc:	mov	r1, #1
     e00:	mov	r2, #8
     e04:	mov	r3, #8
     e08:	bl	0 <flatcc_builder_table_add>
     e0c:	cmp	r0, #0
     e10:	beq	126c <test+0x126c>
     e14:	mov	r3, r0
     e18:	mov	r0, r4
     e1c:	mov	r1, sl
     e20:	mov	r2, r8
     e24:	bl	0 <flatcc_json_parser_double>
     e28:	mov	r1, r0
     e2c:	cmp	sl, r0
     e30:	bne	96c <test+0x96c>
     e34:	b	126c <test+0x126c>
     e38:	add	r3, r2, #1
     e3c:	b	ea0 <test+0xea0>
     e40:	add	r3, r2, #1
     e44:	b	1018 <test+0x1018>
     e48:	mov	r2, r8
     e4c:	cmp	r1, #46	; 0x2e
     e50:	bne	634 <test+0x634>
     e54:	mov	r1, r2
     e58:	mov	r0, r4
     e5c:	mov	r2, r8
     e60:	mov	r3, #5
     e64:	b	e98 <test+0xe98>
     e68:	mov	r2, r8
     e6c:	cmp	r1, #46	; 0x2e
     e70:	bne	72c <test+0x72c>
     e74:	mov	r1, r2
     e78:	mov	r0, r4
     e7c:	mov	r2, r8
     e80:	mov	r3, #5
     e84:	b	1010 <test+0x1010>
     e88:	mov	r1, r2
     e8c:	mov	r0, r4
     e90:	mov	r2, r8
     e94:	mov	r3, #20
     e98:	bl	0 <flatcc_json_parser_set_error>
     e9c:	mov	r3, r0
     ea0:	sub	r0, r8, r3
     ea4:	cmp	r0, #2
     ea8:	blt	edc <test+0xedc>
     eac:	ldrb	r0, [r3]
     eb0:	cmp	r0, #32
     eb4:	bls	ec8 <test+0xec8>
     eb8:	mov	sl, r3
     ebc:	cmp	sl, r8
     ec0:	bne	ef8 <test+0xef8>
     ec4:	b	1158 <test+0x1158>
     ec8:	bne	edc <test+0xedc>
     ecc:	mov	sl, r3
     ed0:	ldrb	r0, [sl, #1]!
     ed4:	cmp	r0, #32
     ed8:	bhi	ef0 <test+0xef0>
     edc:	mov	r0, r4
     ee0:	mov	r1, r3
     ee4:	mov	r2, r8
     ee8:	bl	0 <flatcc_json_parser_space_ext>
     eec:	mov	sl, r0
     ef0:	cmp	sl, r8
     ef4:	beq	1158 <test+0x1158>
     ef8:	bcs	11ac <test+0x11ac>
     efc:	ldrb	r0, [sl]
     f00:	cmp	r0, #58	; 0x3a
     f04:	bne	11ac <test+0x11ac>
     f08:	add	r1, sl, #1
     f0c:	sub	r0, r8, r1
     f10:	cmp	r0, #2
     f14:	blt	f44 <test+0xf44>
     f18:	ldrb	r0, [r1]
     f1c:	cmp	r0, #32
     f20:	bls	f34 <test+0xf34>
     f24:	mov	sl, r1
     f28:	cmp	sl, r8
     f2c:	bne	f5c <test+0xf5c>
     f30:	b	1158 <test+0x1158>
     f34:	bne	f44 <test+0xf44>
     f38:	ldrb	r0, [sl, #2]!
     f3c:	cmp	r0, #32
     f40:	bhi	f54 <test+0xf54>
     f44:	mov	r0, r4
     f48:	mov	r2, r8
     f4c:	bl	0 <flatcc_json_parser_space_ext>
     f50:	mov	sl, r0
     f54:	cmp	sl, r8
     f58:	beq	1158 <test+0x1158>
     f5c:	mov	r0, r9
     f60:	mov	r1, #3
     f64:	mov	r2, #8
     f68:	mov	r3, #8
     f6c:	bl	0 <flatcc_builder_table_add>
     f70:	cmp	r0, #0
     f74:	beq	126c <test+0x126c>
     f78:	mov	r6, r0
     f7c:	mov	r0, #0
     f80:	mov	r1, sl
     f84:	mov	r2, r8
     f88:	sub	r3, fp, #44	; 0x2c
     f8c:	str	r0, [fp, #-36]	; 0xffffffdc
     f90:	str	r0, [fp, #-40]	; 0xffffffd8
     f94:	str	r0, [fp, #-44]	; 0xffffffd4
     f98:	str	r0, [r6]
     f9c:	str	r0, [r6, #4]
     fa0:	sub	r0, fp, #40	; 0x28
     fa4:	str	r0, [sp]
     fa8:	mov	r0, r4
     fac:	bl	0 <flatcc_json_parser_integer>
     fb0:	cmp	r0, sl
     fb4:	mov	r1, sl
     fb8:	beq	964 <test+0x964>
     fbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     fc0:	mov	r2, r0
     fc4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     fc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     fcc:	cmp	r3, #0
     fd0:	beq	ff0 <test+0xff0>
     fd4:	subs	r3, r0, #1
     fd8:	sbcs	r3, r1, #-2147483648	; 0x80000000
     fdc:	bcs	910 <test+0x910>
     fe0:	rsbs	r0, r0, #0
     fe4:	rsc	r1, r1, #0
     fe8:	strd	r0, [r6]
     fec:	b	960 <test+0x960>
     ff0:	cmn	r1, #1
     ff4:	ble	938 <test+0x938>
     ff8:	strd	r0, [r6]
     ffc:	b	960 <test+0x960>
    1000:	mov	r1, r2
    1004:	mov	r0, r4
    1008:	mov	r2, r8
    100c:	mov	r3, #20
    1010:	bl	0 <flatcc_json_parser_set_error>
    1014:	mov	r3, r0
    1018:	sub	r0, r8, r3
    101c:	cmp	r0, #2
    1020:	blt	1054 <test+0x1054>
    1024:	ldrb	r0, [r3]
    1028:	cmp	r0, #32
    102c:	bls	1040 <test+0x1040>
    1030:	mov	sl, r3
    1034:	cmp	sl, r8
    1038:	bne	1070 <test+0x1070>
    103c:	b	1158 <test+0x1158>
    1040:	bne	1054 <test+0x1054>
    1044:	mov	sl, r3
    1048:	ldrb	r0, [sl, #1]!
    104c:	cmp	r0, #32
    1050:	bhi	1068 <test+0x1068>
    1054:	mov	r0, r4
    1058:	mov	r1, r3
    105c:	mov	r2, r8
    1060:	bl	0 <flatcc_json_parser_space_ext>
    1064:	mov	sl, r0
    1068:	cmp	sl, r8
    106c:	beq	1158 <test+0x1158>
    1070:	bcs	11ac <test+0x11ac>
    1074:	ldrb	r0, [sl]
    1078:	cmp	r0, #58	; 0x3a
    107c:	bne	11ac <test+0x11ac>
    1080:	add	r1, sl, #1
    1084:	sub	r0, r8, r1
    1088:	cmp	r0, #2
    108c:	blt	10bc <test+0x10bc>
    1090:	ldrb	r0, [r1]
    1094:	cmp	r0, #32
    1098:	bls	10ac <test+0x10ac>
    109c:	mov	sl, r1
    10a0:	cmp	sl, r8
    10a4:	bne	10d4 <test+0x10d4>
    10a8:	b	1158 <test+0x1158>
    10ac:	bne	10bc <test+0x10bc>
    10b0:	ldrb	r0, [sl, #2]!
    10b4:	cmp	r0, #32
    10b8:	bhi	10cc <test+0x10cc>
    10bc:	mov	r0, r4
    10c0:	mov	r2, r8
    10c4:	bl	0 <flatcc_json_parser_space_ext>
    10c8:	mov	sl, r0
    10cc:	cmp	sl, r8
    10d0:	beq	1158 <test+0x1158>
    10d4:	mov	r0, r9
    10d8:	mov	r1, #2
    10dc:	mov	r2, #4
    10e0:	mov	r3, #4
    10e4:	bl	0 <flatcc_builder_table_add>
    10e8:	cmp	r0, #0
    10ec:	beq	126c <test+0x126c>
    10f0:	mov	r6, r0
    10f4:	mov	r0, #0
    10f8:	mov	r1, sl
    10fc:	mov	r2, r8
    1100:	sub	r3, fp, #44	; 0x2c
    1104:	str	r0, [fp, #-36]	; 0xffffffdc
    1108:	str	r0, [fp, #-40]	; 0xffffffd8
    110c:	str	r0, [fp, #-44]	; 0xffffffd4
    1110:	str	r0, [r6]
    1114:	sub	r0, fp, #40	; 0x28
    1118:	str	r0, [sp]
    111c:	mov	r0, r4
    1120:	bl	0 <flatcc_json_parser_integer>
    1124:	cmp	r0, sl
    1128:	mov	r1, sl
    112c:	beq	964 <test+0x964>
    1130:	mov	r2, r0
    1134:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1138:	cmp	r0, #0
    113c:	bne	910 <test+0x910>
    1140:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1144:	cmp	r0, #0
    1148:	bne	938 <test+0x938>
    114c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1150:	str	r0, [r6]
    1154:	b	960 <test+0x960>
    1158:	movw	r0, #0
    115c:	mov	r1, #13
    1160:	mov	r2, #1
    1164:	movt	r0, #0
    1168:	ldr	r3, [r0]
    116c:	movw	r0, #0
    1170:	movt	r0, #0
    1174:	bl	0 <fwrite>
    1178:	mov	sl, r8
    117c:	b	126c <test+0x126c>
    1180:	add	r0, sp, #24
    1184:	mov	r1, r9
    1188:	mov	r2, r8
    118c:	mov	r3, #13
    1190:	bl	0 <flatcc_json_parser_set_error>
    1194:	ldr	r9, [sp, #16]
    1198:	b	1268 <test+0x1268>
    119c:	movw	r0, #0
    11a0:	movw	r1, #0
    11a4:	mov	r2, #123	; 0x7b
    11a8:	b	1244 <test+0x1244>
    11ac:	movw	r0, #0
    11b0:	movw	r1, #0
    11b4:	mov	r2, #58	; 0x3a
    11b8:	movt	r0, #0
    11bc:	movt	r1, #0
    11c0:	ldr	r0, [r0]
    11c4:	bl	0 <fprintf>
    11c8:	add	r0, sp, #24
    11cc:	mov	r1, sl
    11d0:	b	125c <test+0x125c>
    11d4:	mov	sl, r8
    11d8:	b	126c <test+0x126c>
    11dc:	mov	r0, #125	; 0x7d
    11e0:	cmp	r6, r8
    11e4:	bcs	1228 <test+0x1228>
    11e8:	cmp	r0, #125	; 0x7d
    11ec:	bne	1228 <test+0x1228>
    11f0:	mov	r0, r9
    11f4:	bl	0 <flatcc_builder_end_table>
    11f8:	mov	r1, r0
    11fc:	mov	r0, r9
    1200:	bl	0 <flatcc_builder_end_buffer>
    1204:	add	r1, r6, #1
    1208:	sub	r0, r8, r1
    120c:	cmp	r0, #2
    1210:	blt	1310 <test+0x1310>
    1214:	ldrb	r0, [r1]
    1218:	cmp	r0, #32
    121c:	bls	1300 <test+0x1300>
    1220:	mov	r6, r1
    1224:	b	1320 <test+0x1320>
    1228:	movw	r0, #0
    122c:	movw	r1, #0
    1230:	mov	r2, #125	; 0x7d
    1234:	b	1244 <test+0x1244>
    1238:	movw	r0, #0
    123c:	movw	r1, #0
    1240:	mov	r2, #58	; 0x3a
    1244:	movt	r0, #0
    1248:	movt	r1, #0
    124c:	ldr	r0, [r0]
    1250:	bl	0 <fprintf>
    1254:	add	r0, sp, #24
    1258:	mov	r1, r6
    125c:	mov	r2, r8
    1260:	mov	r3, #17
    1264:	bl	0 <flatcc_json_parser_set_error>
    1268:	mov	sl, r0
    126c:	movw	r0, #0
    1270:	movt	r0, #0
    1274:	ldr	r4, [r0]
    1278:	ldr	r0, [sp, #48]	; 0x30
    127c:	cmp	r0, #0
    1280:	bne	12a0 <test+0x12a0>
    1284:	movw	r0, #0
    1288:	mov	r1, #15
    128c:	mov	r2, #1
    1290:	mov	r3, r4
    1294:	movt	r0, #0
    1298:	bl	0 <fwrite>
    129c:	b	12d8 <test+0x12d8>
    12a0:	ldr	r5, [sp, #28]
    12a4:	ldr	r6, [sp, #40]	; 0x28
    12a8:	ldr	r7, [sp, #60]	; 0x3c
    12ac:	bl	0 <flatcc_json_parser_error_string>
    12b0:	movw	r1, #0
    12b4:	str	r0, [sp]
    12b8:	add	r0, r7, #1
    12bc:	mov	r2, r6
    12c0:	sub	r3, r0, r5
    12c4:	movt	r1, #0
    12c8:	mov	r0, r4
    12cc:	bl	0 <fprintf>
    12d0:	mov	r0, r9
    12d4:	bl	0 <flatcc_builder_reset>
    12d8:	ldr	r0, [sp, #48]	; 0x30
    12dc:	ldr	r1, [sp, #12]
    12e0:	str	r0, [r1]
    12e4:	mov	r0, sl
    12e8:	sub	sp, fp, #28
    12ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f0:	add	r0, sp, #24
    12f4:	mov	r2, r8
    12f8:	mov	r3, #13
    12fc:	b	1264 <test+0x1264>
    1300:	bne	1310 <test+0x1310>
    1304:	ldrb	r0, [r6, #2]!
    1308:	cmp	r0, #32
    130c:	bhi	1320 <test+0x1320>
    1310:	add	r0, sp, #24
    1314:	mov	r2, r8
    1318:	bl	0 <flatcc_json_parser_space_ext>
    131c:	mov	r6, r0
    1320:	cmp	r6, r8
    1324:	mov	sl, r8
    1328:	beq	126c <test+0x126c>
    132c:	movw	r0, #0
    1330:	mov	r1, #26
    1334:	mov	r2, #1
    1338:	movt	r0, #0
    133c:	ldr	r3, [r0]
    1340:	movw	r0, #0
    1344:	movt	r0, #0
    1348:	bl	0 <fwrite>
    134c:	mov	sl, r6
    1350:	b	126c <test+0x126c>
    1354:	ldr	r9, [sp, #16]
    1358:	b	126c <test+0x126c>

0000135c <main>:
    135c:	push	{r4, sl, fp, lr}
    1360:	add	fp, sp, #8
    1364:	sub	sp, sp, #240	; 0xf0
    1368:	mvn	r0, #0
    136c:	add	r4, sp, #4
    1370:	str	r0, [fp, #-12]
    1374:	mov	r0, r4
    1378:	bl	0 <flatcc_builder_init>
    137c:	movw	r1, #0
    1380:	movw	r0, #645	; 0x285
    1384:	sub	r3, fp, #12
    1388:	movt	r1, #0
    138c:	add	r2, r1, r0
    1390:	mov	r0, r4
    1394:	bl	0 <test>
    1398:	mov	r0, r4
    139c:	bl	0 <flatcc_builder_clear>
    13a0:	ldr	r0, [fp, #-12]
    13a4:	sub	sp, fp, #8
    13a8:	pop	{r4, sl, fp, pc}
