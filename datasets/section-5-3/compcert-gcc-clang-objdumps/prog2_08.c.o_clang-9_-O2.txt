
../compcert-repos/prog2/CMakeFiles/0.8.dir/Aula00_Conceitos_base/08.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <lerpontuacoes>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #8
   c:	mov	r5, r0
  10:	movw	r0, #0
  14:	mov	r4, r1
  18:	add	r1, sp, #4
  1c:	movt	r0, #0
  20:	bl	0 <__isoc99_scanf>
  24:	ldr	r0, [sp, #4]
  28:	cmp	r0, #1
  2c:	blt	64 <lerpontuacoes+0x64>
  30:	movw	r6, #0
  34:	mov	r7, #0
  38:	movt	r6, #0
  3c:	mov	r0, r6
  40:	mov	r1, r5
  44:	mov	r2, r4
  48:	bl	0 <__isoc99_scanf>
  4c:	ldr	r0, [sp, #4]
  50:	add	r7, r7, #1
  54:	add	r5, r5, #50	; 0x32
  58:	add	r4, r4, #4
  5c:	cmp	r7, r0
  60:	blt	3c <lerpontuacoes+0x3c>
  64:	sub	sp, fp, #16
  68:	pop	{r4, r5, r6, r7, fp, pc}

0000006c <primeiroUltimo>:
  6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  70:	add	fp, sp, #28
  74:	push	{r3}		; (str r3, [sp, #-4]!)
  78:	cmp	r2, #2
  7c:	blt	f4 <primeiroUltimo+0x88>
  80:	ldr	r9, [r1]
  84:	add	r7, r1, #4
  88:	add	r6, r0, #50	; 0x32
  8c:	sub	r5, r2, #1
  90:	mov	r8, r9
  94:	b	a8 <primeiroUltimo+0x3c>
  98:	add	r7, r7, #4
  9c:	add	r6, r6, #50	; 0x32
  a0:	subs	r5, r5, #1
  a4:	beq	f4 <primeiroUltimo+0x88>
  a8:	ldr	r4, [r7]
  ac:	cmp	r4, r8
  b0:	ble	d4 <primeiroUltimo+0x68>
  b4:	ldr	r0, [sp]
  b8:	mov	r1, r6
  bc:	bl	0 <strcpy>
  c0:	ldr	sl, [r7]
  c4:	mov	r8, r4
  c8:	cmp	sl, r9
  cc:	bge	98 <primeiroUltimo+0x2c>
  d0:	b	e0 <primeiroUltimo+0x74>
  d4:	mov	sl, r4
  d8:	cmp	sl, r9
  dc:	bge	98 <primeiroUltimo+0x2c>
  e0:	ldr	r0, [fp, #8]
  e4:	mov	r1, r6
  e8:	bl	0 <strcpy>
  ec:	mov	r9, sl
  f0:	b	98 <primeiroUltimo+0x2c>
  f4:	sub	sp, fp, #28
  f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000000fc <main>:
  fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100:	add	fp, sp, #28
 104:	sub	sp, sp, #4
 108:	vpush	{d8-d9}
 10c:	sub	sp, sp, #1200	; 0x4b0
 110:	vmov.i32	q4, #0	; 0x00000000
 114:	sub	r5, fp, #136	; 0x88
 118:	mov	r0, #64	; 0x40
 11c:	add	r6, sp, #112	; 0x70
 120:	mov	r2, #1000	; 0x3e8
 124:	mov	r7, #0
 128:	mov	r1, r5
 12c:	vst1.64	{d8-d9}, [r1], r0
 130:	add	r0, r5, #48	; 0x30
 134:	vst1.64	{d8-d9}, [r0]
 138:	add	r0, r5, #32
 13c:	vst1.64	{d8-d9}, [r1]
 140:	mov	r1, #0
 144:	vst1.64	{d8-d9}, [r0]
 148:	add	r0, r5, #16
 14c:	vst1.64	{d8-d9}, [r0]
 150:	mov	r0, r6
 154:	bl	0 <memset>
 158:	add	r0, sp, #56	; 0x38
 15c:	add	r1, r0, #32
 160:	vst1.64	{d8-d9}, [r1]
 164:	add	r1, r0, #16
 168:	vst1.64	{d8-d9}, [r1]
 16c:	mov	r1, #48	; 0x30
 170:	vst1.64	{d8-d9}, [r0], r1
 174:	strh	r7, [r0]
 178:	mov	r0, sp
 17c:	add	r2, r0, #32
 180:	vst1.64	{d8-d9}, [r2]
 184:	add	r2, r0, #16
 188:	vst1.64	{d8-d9}, [r0], r1
 18c:	sub	r1, fp, #56	; 0x38
 190:	strh	r7, [r0]
 194:	movw	r0, #0
 198:	vst1.64	{d8-d9}, [r2]
 19c:	movt	r0, #0
 1a0:	bl	0 <__isoc99_scanf>
 1a4:	ldr	r4, [fp, #-56]	; 0xffffffc8
 1a8:	cmp	r4, #1
 1ac:	blt	268 <main+0x16c>
 1b0:	movw	r8, #0
 1b4:	movt	r8, #0
 1b8:	mov	r0, r8
 1bc:	mov	r1, r6
 1c0:	mov	r2, r5
 1c4:	bl	0 <__isoc99_scanf>
 1c8:	ldr	r4, [fp, #-56]	; 0xffffffc8
 1cc:	add	r7, r7, #1
 1d0:	add	r6, r6, #50	; 0x32
 1d4:	add	r5, r5, #4
 1d8:	cmp	r7, r4
 1dc:	blt	1b8 <main+0xbc>
 1e0:	cmp	r4, #2
 1e4:	blt	268 <main+0x16c>
 1e8:	ldr	sl, [fp, #-136]	; 0xffffff78
 1ec:	add	r0, sp, #112	; 0x70
 1f0:	mov	r6, #1
 1f4:	add	r5, r0, #50	; 0x32
 1f8:	sub	r0, fp, #136	; 0x88
 1fc:	mov	r9, sl
 200:	b	214 <main+0x118>
 204:	add	r6, r6, #1
 208:	add	r5, r5, #50	; 0x32
 20c:	cmp	r4, r6
 210:	beq	268 <main+0x16c>
 214:	ldr	r7, [r0, r6, lsl #2]
 218:	cmp	r7, r9
 21c:	ble	244 <main+0x148>
 220:	add	r0, sp, #56	; 0x38
 224:	mov	r1, r5
 228:	bl	0 <strcpy>
 22c:	sub	r0, fp, #136	; 0x88
 230:	mov	r9, r7
 234:	ldr	r8, [r0, r6, lsl #2]
 238:	cmp	r8, sl
 23c:	bge	204 <main+0x108>
 240:	b	250 <main+0x154>
 244:	mov	r8, r7
 248:	cmp	r8, sl
 24c:	bge	204 <main+0x108>
 250:	mov	r0, sp
 254:	mov	r1, r5
 258:	bl	0 <strcpy>
 25c:	sub	r0, fp, #136	; 0x88
 260:	mov	sl, r8
 264:	b	204 <main+0x108>
 268:	movw	r0, #0
 26c:	mov	r1, r4
 270:	movt	r0, #0
 274:	bl	0 <printf>
 278:	movw	r0, #0
 27c:	add	r1, sp, #56	; 0x38
 280:	movt	r0, #0
 284:	bl	0 <printf>
 288:	movw	r0, #0
 28c:	mov	r1, sp
 290:	movt	r0, #0
 294:	bl	0 <printf>
 298:	mov	r0, #0
 29c:	sub	sp, fp, #48	; 0x30
 2a0:	vpop	{d8-d9}
 2a4:	add	sp, sp, #4
 2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
