
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatbuffers_uint8_cast_from_pe>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #8
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	and	r0, r0, #255	; 0xff
      14:	ldr	lr, [sp, #4]
      18:	add	sp, sp, #8
      1c:	bx	lr

00000020 <flatbuffers_uint8_cast_to_pe>:
      20:	mov	ip, sp
      24:	sub	sp, sp, #8
      28:	str	ip, [sp]
      2c:	str	lr, [sp, #4]
      30:	and	r0, r0, #255	; 0xff
      34:	ldr	lr, [sp, #4]
      38:	add	sp, sp, #8
      3c:	bx	lr

00000040 <flatbuffers_uint8_read_from_pe>:
      40:	mov	ip, sp
      44:	sub	sp, sp, #8
      48:	str	ip, [sp]
      4c:	str	lr, [sp, #4]
      50:	ldrb	r0, [r0]
      54:	and	r0, r0, #255	; 0xff
      58:	bl	0 <flatbuffers_uint8_cast_from_pe>
      5c:	and	r0, r0, #255	; 0xff
      60:	ldr	lr, [sp, #4]
      64:	add	sp, sp, #8
      68:	bx	lr

0000006c <flatbuffers_int64_cast_from_pe>:
      6c:	mov	ip, sp
      70:	sub	sp, sp, #8
      74:	str	ip, [sp]
      78:	str	lr, [sp, #4]
      7c:	ldr	lr, [sp, #4]
      80:	add	sp, sp, #8
      84:	bx	lr

00000088 <flatbuffers_int64_cast_to_pe>:
      88:	mov	ip, sp
      8c:	sub	sp, sp, #8
      90:	str	ip, [sp]
      94:	str	lr, [sp, #4]
      98:	ldr	lr, [sp, #4]
      9c:	add	sp, sp, #8
      a0:	bx	lr

000000a4 <flatbuffers_int64_read_from_pe>:
      a4:	mov	ip, sp
      a8:	sub	sp, sp, #8
      ac:	str	ip, [sp]
      b0:	str	lr, [sp, #4]
      b4:	mov	r1, r0
      b8:	ldr	r0, [r1]
      bc:	ldr	r1, [r1, #4]
      c0:	bl	6c <flatbuffers_int64_cast_from_pe>
      c4:	ldr	lr, [sp, #4]
      c8:	add	sp, sp, #8
      cc:	bx	lr

000000d0 <flatbuffers_float_cast_from_pe>:
      d0:	mov	ip, sp
      d4:	sub	sp, sp, #16
      d8:	str	ip, [sp]
      dc:	str	lr, [sp, #4]
      e0:	vstr	s0, [sp, #8]
      e4:	ldr	r0, [sp, #8]
      e8:	str	r0, [sp, #8]
      ec:	vldr	s0, [sp, #8]
      f0:	ldr	lr, [sp, #4]
      f4:	add	sp, sp, #16
      f8:	bx	lr

000000fc <flatbuffers_float_cast_to_pe>:
      fc:	mov	ip, sp
     100:	sub	sp, sp, #16
     104:	str	ip, [sp]
     108:	str	lr, [sp, #4]
     10c:	vstr	s0, [sp, #8]
     110:	ldr	r0, [sp, #8]
     114:	str	r0, [sp, #8]
     118:	vldr	s0, [sp, #8]
     11c:	ldr	lr, [sp, #4]
     120:	add	sp, sp, #16
     124:	bx	lr

00000128 <flatbuffers_float__ptr_add>:
     128:	mov	ip, sp
     12c:	sub	sp, sp, #8
     130:	str	ip, [sp]
     134:	str	lr, [sp, #4]
     138:	add	r0, r0, r1, lsl #2
     13c:	ldr	lr, [sp, #4]
     140:	add	sp, sp, #8
     144:	bx	lr

00000148 <flatbuffers_float__const_ptr_add>:
     148:	mov	ip, sp
     14c:	sub	sp, sp, #8
     150:	str	ip, [sp]
     154:	str	lr, [sp, #4]
     158:	add	r0, r0, r1, lsl #2
     15c:	ldr	lr, [sp, #4]
     160:	add	sp, sp, #8
     164:	bx	lr

00000168 <flatbuffers_float_read_from_pe>:
     168:	mov	ip, sp
     16c:	sub	sp, sp, #8
     170:	str	ip, [sp]
     174:	str	lr, [sp, #4]
     178:	vldr	s0, [r0]
     17c:	vmov.f32	s0, s0
     180:	bl	d0 <flatbuffers_float_cast_from_pe>
     184:	ldr	lr, [sp, #4]
     188:	add	sp, sp, #8
     18c:	bx	lr

00000190 <__flatbuffers_uoffset_cast_from_pe>:
     190:	mov	ip, sp
     194:	sub	sp, sp, #8
     198:	str	ip, [sp]
     19c:	str	lr, [sp, #4]
     1a0:	ldr	lr, [sp, #4]
     1a4:	add	sp, sp, #8
     1a8:	bx	lr

000001ac <__flatbuffers_uoffset_read_from_pe>:
     1ac:	mov	ip, sp
     1b0:	sub	sp, sp, #8
     1b4:	str	ip, [sp]
     1b8:	str	lr, [sp, #4]
     1bc:	ldr	r0, [r0]
     1c0:	bl	190 <__flatbuffers_uoffset_cast_from_pe>
     1c4:	ldr	lr, [sp, #4]
     1c8:	add	sp, sp, #8
     1cc:	bx	lr

000001d0 <__flatbuffers_soffset_cast_from_pe>:
     1d0:	mov	ip, sp
     1d4:	sub	sp, sp, #8
     1d8:	str	ip, [sp]
     1dc:	str	lr, [sp, #4]
     1e0:	ldr	lr, [sp, #4]
     1e4:	add	sp, sp, #8
     1e8:	bx	lr

000001ec <__flatbuffers_soffset_read_from_pe>:
     1ec:	mov	ip, sp
     1f0:	sub	sp, sp, #8
     1f4:	str	ip, [sp]
     1f8:	str	lr, [sp, #4]
     1fc:	ldr	r0, [r0]
     200:	bl	1d0 <__flatbuffers_soffset_cast_from_pe>
     204:	ldr	lr, [sp, #4]
     208:	add	sp, sp, #8
     20c:	bx	lr

00000210 <__flatbuffers_voffset_cast_from_pe>:
     210:	mov	ip, sp
     214:	sub	sp, sp, #8
     218:	str	ip, [sp]
     21c:	str	lr, [sp, #4]
     220:	bic	r0, r0, #16711680	; 0xff0000
     224:	bic	r0, r0, #-16777216	; 0xff000000
     228:	ldr	lr, [sp, #4]
     22c:	add	sp, sp, #8
     230:	bx	lr

00000234 <__flatbuffers_voffset_read_from_pe>:
     234:	mov	ip, sp
     238:	sub	sp, sp, #8
     23c:	str	ip, [sp]
     240:	str	lr, [sp, #4]
     244:	ldrh	r0, [r0]
     248:	bic	r0, r0, #16711680	; 0xff0000
     24c:	bic	r0, r0, #-16777216	; 0xff000000
     250:	bl	210 <__flatbuffers_voffset_cast_from_pe>
     254:	bic	r0, r0, #16711680	; 0xff0000
     258:	bic	r0, r0, #-16777216	; 0xff000000
     25c:	ldr	lr, [sp, #4]
     260:	add	sp, sp, #8
     264:	bx	lr

00000268 <__flatbuffers_thash_cast_from_pe>:
     268:	mov	ip, sp
     26c:	sub	sp, sp, #8
     270:	str	ip, [sp]
     274:	str	lr, [sp, #4]
     278:	ldr	lr, [sp, #4]
     27c:	add	sp, sp, #8
     280:	bx	lr

00000284 <__flatbuffers_thash_cast_from_le>:
     284:	mov	ip, sp
     288:	sub	sp, sp, #8
     28c:	str	ip, [sp]
     290:	str	lr, [sp, #4]
     294:	ldr	lr, [sp, #4]
     298:	add	sp, sp, #8
     29c:	bx	lr

000002a0 <__flatbuffers_thash_read_from_pe>:
     2a0:	mov	ip, sp
     2a4:	sub	sp, sp, #8
     2a8:	str	ip, [sp]
     2ac:	str	lr, [sp, #4]
     2b0:	ldr	r0, [r0]
     2b4:	bl	268 <__flatbuffers_thash_cast_from_pe>
     2b8:	ldr	lr, [sp, #4]
     2bc:	add	sp, sp, #8
     2c0:	bx	lr

000002c4 <flatbuffers_vec_len>:
     2c4:	mov	ip, sp
     2c8:	sub	sp, sp, #8
     2cc:	str	ip, [sp]
     2d0:	str	lr, [sp, #4]
     2d4:	cmp	r0, #0
     2d8:	beq	2e8 <flatbuffers_vec_len+0x24>
     2dc:	sub	r0, r0, #4
     2e0:	bl	1ac <__flatbuffers_uoffset_read_from_pe>
     2e4:	b	2ec <flatbuffers_vec_len+0x28>
     2e8:	mov	r0, #0
     2ec:	ldr	lr, [sp, #4]
     2f0:	add	sp, sp, #8
     2f4:	bx	lr

000002f8 <flatbuffers_float_vec_len>:
     2f8:	mov	ip, sp
     2fc:	sub	sp, sp, #8
     300:	str	ip, [sp]
     304:	str	lr, [sp, #4]
     308:	bl	2c4 <flatbuffers_vec_len>
     30c:	ldr	lr, [sp, #4]
     310:	add	sp, sp, #8
     314:	bx	lr

00000318 <flatbuffers_float_vec_at>:
     318:	mov	ip, sp
     31c:	sub	sp, sp, #16
     320:	str	ip, [sp]
     324:	str	lr, [sp, #4]
     328:	str	r4, [sp, #8]
     32c:	str	r5, [sp, #12]
     330:	mov	r4, r1
     334:	mov	r5, r0
     338:	mov	r0, r5
     33c:	bl	2c4 <flatbuffers_vec_len>
     340:	cmp	r0, r4
     344:	bls	35c <flatbuffers_float_vec_at+0x44>
     348:	ldr	r1, [pc, #80]	; 3a0 <flatbuffers_float_vec_at+0x88>
     34c:	cmp	r1, #0
     350:	movne	r3, #1
     354:	moveq	r3, #0
     358:	b	360 <flatbuffers_float_vec_at+0x48>
     35c:	mov	r3, #0
     360:	cmp	r3, #0
     364:	bne	37c <flatbuffers_float_vec_at+0x64>
     368:	ldr	r0, [pc, #52]	; 3a4 <flatbuffers_float_vec_at+0x8c>
     36c:	ldr	r1, [pc, #40]	; 39c <flatbuffers_float_vec_at+0x84>
     370:	movw	r2, #403	; 0x193
     374:	ldr	r3, [pc, #28]	; 398 <flatbuffers_float_vec_at+0x80>
     378:	bl	0 <__assert_fail>
     37c:	add	r0, r5, r4, lsl #2
     380:	bl	168 <flatbuffers_float_read_from_pe>
     384:	ldr	r4, [sp, #8]
     388:	ldr	r5, [sp, #12]
     38c:	ldr	lr, [sp, #4]
     390:	add	sp, sp, #16
     394:	bx	lr
     398:	.word	0x0000040e
     39c:	.word	0x00000077
     3a0:	.word	0x00000131
     3a4:	.word	0x000002c9

000003a8 <flatbuffers_has_identifier>:
     3a8:	mov	ip, sp
     3ac:	sub	sp, sp, #24
     3b0:	str	ip, [sp]
     3b4:	str	lr, [sp, #4]
     3b8:	str	r4, [sp, #8]
     3bc:	mov	r4, r0
     3c0:	mov	r3, #0
     3c4:	str	r3, [sp, #16]
     3c8:	cmp	r1, #0
     3cc:	bne	3d8 <flatbuffers_has_identifier+0x30>
     3d0:	mov	r0, #1
     3d4:	b	41c <flatbuffers_has_identifier+0x74>
     3d8:	add	r0, sp, #16
     3dc:	mov	r2, #4
     3e0:	bl	0 <strncpy>
     3e4:	ldr	r0, [sp, #16]
     3e8:	bl	284 <__flatbuffers_thash_cast_from_le>
     3ec:	str	r0, [sp, #16]
     3f0:	add	r0, r4, #4
     3f4:	bl	2a0 <__flatbuffers_thash_read_from_pe>
     3f8:	ldr	r1, [sp, #16]
     3fc:	cmp	r1, #0
     400:	beq	418 <flatbuffers_has_identifier+0x70>
     404:	ldr	r1, [sp, #16]
     408:	cmp	r0, r1
     40c:	moveq	r0, #1
     410:	movne	r0, #0
     414:	b	41c <flatbuffers_has_identifier+0x74>
     418:	mov	r0, #1
     41c:	ldr	r4, [sp, #8]
     420:	ldr	lr, [sp, #4]
     424:	add	sp, sp, #24
     428:	bx	lr

0000042c <main_as_root>:
     42c:	mov	ip, sp
     430:	sub	sp, sp, #16
     434:	str	ip, [sp]
     438:	str	lr, [sp, #4]
     43c:	str	r4, [sp, #8]
     440:	mov	r4, r0
     444:	mov	r1, #0
     448:	cmp	r4, #0
     44c:	beq	468 <main_as_root+0x3c>
     450:	mov	r0, r4
     454:	bl	3a8 <flatbuffers_has_identifier>
     458:	cmp	r0, #0
     45c:	moveq	r1, #1
     460:	movne	r1, #0
     464:	b	46c <main_as_root+0x40>
     468:	mov	r1, #1
     46c:	cmp	r1, #0
     470:	bne	484 <main_as_root+0x58>
     474:	mov	r0, r4
     478:	bl	1ac <__flatbuffers_uoffset_read_from_pe>
     47c:	add	r0, r4, r0
     480:	b	488 <main_as_root+0x5c>
     484:	mov	r0, #0
     488:	ldr	r4, [sp, #8]
     48c:	ldr	lr, [sp, #4]
     490:	add	sp, sp, #16
     494:	bx	lr

00000498 <main_time>:
     498:	mov	ip, sp
     49c:	sub	sp, sp, #24
     4a0:	str	ip, [sp]
     4a4:	str	lr, [sp, #4]
     4a8:	str	r4, [sp, #8]
     4ac:	str	r5, [sp, #12]
     4b0:	str	r6, [sp, #16]
     4b4:	str	r7, [sp, #20]
     4b8:	mov	r4, r0
     4bc:	mov	r6, #0
     4c0:	cmp	r4, #0
     4c4:	beq	4dc <main_time+0x44>
     4c8:	ldr	r0, [pc, #168]	; 578 <main_time+0xe0>
     4cc:	cmp	r0, #0
     4d0:	movne	r1, #1
     4d4:	moveq	r1, #0
     4d8:	b	4e0 <main_time+0x48>
     4dc:	mov	r1, #0
     4e0:	cmp	r1, #0
     4e4:	bne	4fc <main_time+0x64>
     4e8:	ldr	r0, [pc, #140]	; 57c <main_time+0xe4>
     4ec:	ldr	r1, [pc, #124]	; 570 <main_time+0xd8>
     4f0:	mov	r2, #41	; 0x29
     4f4:	ldr	r3, [pc, #120]	; 574 <main_time+0xdc>
     4f8:	bl	0 <__assert_fail>
     4fc:	mov	r7, #0
     500:	mov	r0, r4
     504:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     508:	sub	r5, r4, r0
     50c:	mov	r0, r5
     510:	bl	234 <__flatbuffers_voffset_read_from_pe>
     514:	lsl	ip, r7, #1
     518:	add	r3, ip, #6
     51c:	cmp	r0, r3
     520:	bcc	538 <main_time+0xa0>
     524:	add	r0, r5, r7, lsl #1
     528:	add	r0, r0, #4
     52c:	bl	234 <__flatbuffers_voffset_read_from_pe>
     530:	bic	r6, r0, #16711680	; 0xff0000
     534:	bic	r6, r6, #-16777216	; 0xff000000
     538:	cmp	r6, #0
     53c:	beq	54c <main_time+0xb4>
     540:	add	r0, r4, r6
     544:	bl	a4 <flatbuffers_int64_read_from_pe>
     548:	b	554 <main_time+0xbc>
     54c:	mov	r1, #0
     550:	mov	r0, #0
     554:	ldr	r4, [sp, #8]
     558:	ldr	r5, [sp, #12]
     55c:	ldr	r6, [sp, #16]
     560:	ldr	r7, [sp, #20]
     564:	ldr	lr, [sp, #4]
     568:	add	sp, sp, #24
     56c:	bx	lr
     570:	.word	0x00000166
     574:	.word	0x00000427
     578:	.word	0x00000144
     57c:	.word	0x0000010b

00000580 <main_device>:
     580:	mov	ip, sp
     584:	sub	sp, sp, #24
     588:	str	ip, [sp]
     58c:	str	lr, [sp, #4]
     590:	str	r4, [sp, #8]
     594:	str	r5, [sp, #12]
     598:	str	r6, [sp, #16]
     59c:	str	r7, [sp, #20]
     5a0:	mov	r4, r0
     5a4:	mov	r5, #0
     5a8:	cmp	r4, #0
     5ac:	beq	5c4 <main_device+0x44>
     5b0:	ldr	r2, [pc, #164]	; 65c <main_device+0xdc>
     5b4:	cmp	r2, #0
     5b8:	movne	ip, #1
     5bc:	moveq	ip, #0
     5c0:	b	5c8 <main_device+0x48>
     5c4:	mov	ip, #0
     5c8:	cmp	ip, #0
     5cc:	bne	5e4 <main_device+0x64>
     5d0:	ldr	r0, [pc, #136]	; 660 <main_device+0xe0>
     5d4:	ldr	r1, [pc, #124]	; 658 <main_device+0xd8>
     5d8:	mov	r2, #42	; 0x2a
     5dc:	ldr	r3, [pc, #128]	; 664 <main_device+0xe4>
     5e0:	bl	0 <__assert_fail>
     5e4:	mov	r7, #1
     5e8:	mov	r0, r4
     5ec:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     5f0:	sub	r6, r4, r0
     5f4:	mov	r0, r6
     5f8:	bl	234 <__flatbuffers_voffset_read_from_pe>
     5fc:	lsl	r1, r7, #1
     600:	add	r1, r1, #6
     604:	cmp	r0, r1
     608:	bcc	620 <main_device+0xa0>
     60c:	add	r0, r6, r7, lsl #1
     610:	add	r0, r0, #4
     614:	bl	234 <__flatbuffers_voffset_read_from_pe>
     618:	bic	r5, r0, #16711680	; 0xff0000
     61c:	bic	r5, r5, #-16777216	; 0xff000000
     620:	cmp	r5, #0
     624:	beq	634 <main_device+0xb4>
     628:	add	r0, r4, r5
     62c:	bl	40 <flatbuffers_uint8_read_from_pe>
     630:	b	638 <main_device+0xb8>
     634:	mov	r0, #0
     638:	and	r0, r0, #255	; 0xff
     63c:	ldr	r4, [sp, #8]
     640:	ldr	r5, [sp, #12]
     644:	ldr	r6, [sp, #16]
     648:	ldr	r7, [sp, #20]
     64c:	ldr	lr, [sp, #4]
     650:	add	sp, sp, #24
     654:	bx	lr
     658:	.word	0x00000166
     65c:	.word	0x00000144
     660:	.word	0x0000010b
     664:	.word	0x00000431

00000668 <main_samples>:
     668:	mov	ip, sp
     66c:	sub	sp, sp, #24
     670:	str	ip, [sp]
     674:	str	lr, [sp, #4]
     678:	str	r4, [sp, #8]
     67c:	str	r5, [sp, #12]
     680:	str	r6, [sp, #16]
     684:	str	r7, [sp, #20]
     688:	mov	r4, r0
     68c:	mov	r6, #0
     690:	cmp	r4, #0
     694:	beq	6ac <main_samples+0x44>
     698:	ldr	r1, [pc, #244]	; 794 <main_samples+0x12c>
     69c:	cmp	r1, #0
     6a0:	movne	r0, #1
     6a4:	moveq	r0, #0
     6a8:	b	6b0 <main_samples+0x48>
     6ac:	mov	r0, #0
     6b0:	cmp	r0, #0
     6b4:	bne	6cc <main_samples+0x64>
     6b8:	ldr	r0, [pc, #220]	; 79c <main_samples+0x134>
     6bc:	ldr	r1, [pc, #200]	; 78c <main_samples+0x124>
     6c0:	mov	r2, #43	; 0x2b
     6c4:	ldr	r3, [pc, #196]	; 790 <main_samples+0x128>
     6c8:	bl	0 <__assert_fail>
     6cc:	mov	r7, #2
     6d0:	mov	r0, r4
     6d4:	bl	1ec <__flatbuffers_soffset_read_from_pe>
     6d8:	sub	r5, r4, r0
     6dc:	mov	r0, r5
     6e0:	bl	234 <__flatbuffers_voffset_read_from_pe>
     6e4:	lsl	r3, r7, #1
     6e8:	add	r1, r3, #6
     6ec:	cmp	r0, r1
     6f0:	bcc	708 <main_samples+0xa0>
     6f4:	add	r1, r5, r7, lsl #1
     6f8:	add	r0, r1, #4
     6fc:	bl	234 <__flatbuffers_voffset_read_from_pe>
     700:	bic	r6, r0, #16711680	; 0xff0000
     704:	bic	r6, r6, #-16777216	; 0xff000000
     708:	cmp	r6, #0
     70c:	beq	728 <main_samples+0xc0>
     710:	add	r4, r4, r6
     714:	mov	r0, r4
     718:	bl	1ac <__flatbuffers_uoffset_read_from_pe>
     71c:	add	r0, r4, r0
     720:	add	r0, r0, #4
     724:	b	76c <main_samples+0x104>
     728:	mov	r0, #1
     72c:	cmp	r0, #0
     730:	beq	748 <main_samples+0xe0>
     734:	ldr	r0, [pc, #76]	; 788 <main_samples+0x120>
     738:	cmp	r0, #0
     73c:	movne	r0, #1
     740:	moveq	r0, #0
     744:	b	74c <main_samples+0xe4>
     748:	mov	r0, #0
     74c:	cmp	r0, #0
     750:	bne	768 <main_samples+0x100>
     754:	ldr	r0, [pc, #60]	; 798 <main_samples+0x130>
     758:	ldr	r1, [pc, #44]	; 78c <main_samples+0x124>
     75c:	mov	r2, #43	; 0x2b
     760:	ldr	r3, [pc, #40]	; 790 <main_samples+0x128>
     764:	bl	0 <__assert_fail>
     768:	mov	r0, #0
     76c:	ldr	r4, [sp, #8]
     770:	ldr	r5, [sp, #12]
     774:	ldr	r6, [sp, #16]
     778:	ldr	r7, [sp, #20]
     77c:	ldr	lr, [sp, #4]
     780:	add	sp, sp, #24
     784:	bx	lr
     788:	.word	0x0000024b
     78c:	.word	0x00000166
     790:	.word	0x0000043d
     794:	.word	0x00000144
     798:	.word	0x000001dc
     79c:	.word	0x0000010b

000007a0 <flatcc_emitter_get_buffer_size>:
     7a0:	mov	ip, sp
     7a4:	sub	sp, sp, #8
     7a8:	str	ip, [sp]
     7ac:	str	lr, [sp, #4]
     7b0:	ldr	r0, [r0, #24]
     7b4:	ldr	lr, [sp, #4]
     7b8:	add	sp, sp, #8
     7bc:	bx	lr

000007c0 <flatcc_emitter_get_direct_buffer>:
     7c0:	mov	ip, sp
     7c4:	sub	sp, sp, #8
     7c8:	str	ip, [sp]
     7cc:	str	lr, [sp, #4]
     7d0:	ldr	r2, [r0]
     7d4:	ldr	r3, [r0, #4]
     7d8:	cmp	r2, r3
     7dc:	bne	7f8 <flatcc_emitter_get_direct_buffer+0x38>
     7e0:	cmp	r1, #0
     7e4:	beq	7f0 <flatcc_emitter_get_direct_buffer+0x30>
     7e8:	ldr	ip, [r0, #24]
     7ec:	str	ip, [r1]
     7f0:	ldr	r0, [r0, #8]
     7f4:	b	80c <flatcc_emitter_get_direct_buffer+0x4c>
     7f8:	cmp	r1, #0
     7fc:	beq	808 <flatcc_emitter_get_direct_buffer+0x48>
     800:	mov	r2, #0
     804:	str	r2, [r1]
     808:	mov	r0, #0
     80c:	ldr	lr, [sp, #4]
     810:	add	sp, sp, #8
     814:	bx	lr

00000818 <flatbuffers_uint8_assign_to_pe>:
     818:	mov	ip, sp
     81c:	sub	sp, sp, #16
     820:	str	ip, [sp]
     824:	str	lr, [sp, #4]
     828:	str	r4, [sp, #8]
     82c:	mov	r4, r0
     830:	and	r0, r1, #255	; 0xff
     834:	bl	20 <flatbuffers_uint8_cast_to_pe>
     838:	and	r1, r0, #255	; 0xff
     83c:	strb	r1, [r4]
     840:	mov	r0, r4
     844:	ldr	r4, [sp, #8]
     848:	ldr	lr, [sp, #4]
     84c:	add	sp, sp, #16
     850:	bx	lr

00000854 <flatbuffers_int64_assign_to_pe>:
     854:	mov	ip, sp
     858:	sub	sp, sp, #16
     85c:	str	ip, [sp]
     860:	str	lr, [sp, #4]
     864:	str	r4, [sp, #8]
     868:	mov	r4, r0
     86c:	mov	r1, r3
     870:	mov	r0, r2
     874:	bl	88 <flatbuffers_int64_cast_to_pe>
     878:	str	r0, [r4]
     87c:	str	r1, [r4, #4]
     880:	mov	r0, r4
     884:	ldr	r4, [sp, #8]
     888:	ldr	lr, [sp, #4]
     88c:	add	sp, sp, #16
     890:	bx	lr

00000894 <flatbuffers_float_copy_to_pe>:
     894:	mov	ip, sp
     898:	sub	sp, sp, #16
     89c:	str	ip, [sp]
     8a0:	str	lr, [sp, #4]
     8a4:	str	r4, [sp, #8]
     8a8:	mov	r4, r0
     8ac:	vldr	s0, [r1]
     8b0:	vmov.f32	s0, s0
     8b4:	bl	fc <flatbuffers_float_cast_to_pe>
     8b8:	vstr	s0, [r4]
     8bc:	mov	r0, r4
     8c0:	ldr	r4, [sp, #8]
     8c4:	ldr	lr, [sp, #4]
     8c8:	add	sp, sp, #16
     8cc:	bx	lr

000008d0 <flatbuffers_float_vec_create>:
     8d0:	mov	ip, sp
     8d4:	sub	sp, sp, #40	; 0x28
     8d8:	str	ip, [sp, #8]
     8dc:	str	lr, [sp, #12]
     8e0:	str	r4, [sp, #16]
     8e4:	str	r5, [sp, #20]
     8e8:	str	r6, [sp, #24]
     8ec:	str	r7, [sp, #28]
     8f0:	str	r8, [sp, #32]
     8f4:	str	r9, [sp, #36]	; 0x24
     8f8:	mov	r5, r2
     8fc:	mov	r6, r1
     900:	mov	r7, r0
     904:	mov	r1, #0
     908:	cmp	r1, #0
     90c:	beq	9bc <flatbuffers_float_vec_create+0xec>
     910:	mov	r0, #0
     914:	cmp	r0, #0
     918:	bne	924 <flatbuffers_float_vec_create+0x54>
     91c:	mov	r1, #4
     920:	b	928 <flatbuffers_float_vec_create+0x58>
     924:	mov	r1, #1
     928:	mov	r8, #4
     92c:	mov	r4, #4
     930:	mvn	r0, #0
     934:	bl	0 <__aeabi_uidiv>
     938:	mov	r3, r0
     93c:	mov	r2, r4
     940:	mov	r1, r8
     944:	mov	r0, r7
     948:	bl	0 <flatcc_builder_start_vector>
     94c:	cmp	r0, #0
     950:	bne	a00 <flatbuffers_float_vec_create+0x130>
     954:	mov	r1, r5
     958:	mov	r0, r7
     95c:	bl	0 <flatcc_builder_extend_vector>
     960:	mov	r8, r0
     964:	cmp	r8, #0
     968:	bne	974 <flatbuffers_float_vec_create+0xa4>
     96c:	mov	r0, #0
     970:	b	a00 <flatbuffers_float_vec_create+0x130>
     974:	mov	r9, #0
     978:	cmp	r9, r5
     97c:	bcs	9b0 <flatbuffers_float_vec_create+0xe0>
     980:	mov	r1, r9
     984:	mov	r0, r8
     988:	bl	128 <flatbuffers_float__ptr_add>
     98c:	mov	r4, r0
     990:	mov	r1, r9
     994:	mov	r0, r6
     998:	bl	148 <flatbuffers_float__const_ptr_add>
     99c:	mov	r1, r0
     9a0:	mov	r0, r4
     9a4:	bl	894 <flatbuffers_float_copy_to_pe>
     9a8:	add	r9, r9, #1
     9ac:	b	978 <flatbuffers_float_vec_create+0xa8>
     9b0:	mov	r0, r7
     9b4:	bl	0 <flatcc_builder_end_vector>
     9b8:	b	a00 <flatbuffers_float_vec_create+0x130>
     9bc:	mov	r1, #0
     9c0:	cmp	r1, #0
     9c4:	bne	9d0 <flatbuffers_float_vec_create+0x100>
     9c8:	mov	r1, #4
     9cc:	b	9d4 <flatbuffers_float_vec_create+0x104>
     9d0:	mov	r1, #1
     9d4:	mov	r4, #4
     9d8:	mov	r8, #4
     9dc:	mvn	r0, #0
     9e0:	bl	0 <__aeabi_uidiv>
     9e4:	str	r0, [sp, #4]
     9e8:	str	r8, [sp]
     9ec:	mov	r3, r4
     9f0:	mov	r2, r5
     9f4:	mov	r1, r6
     9f8:	mov	r0, r7
     9fc:	bl	0 <flatcc_builder_create_vector>
     a00:	ldr	r4, [sp, #16]
     a04:	ldr	r5, [sp, #20]
     a08:	ldr	r6, [sp, #24]
     a0c:	ldr	r7, [sp, #28]
     a10:	ldr	r8, [sp, #32]
     a14:	ldr	r9, [sp, #36]	; 0x24
     a18:	ldr	lr, [sp, #12]
     a1c:	add	sp, sp, #40	; 0x28
     a20:	bx	lr

00000a24 <flatbuffers_buffer_start>:
     a24:	mov	ip, sp
     a28:	sub	sp, sp, #8
     a2c:	str	ip, [sp]
     a30:	str	lr, [sp, #4]
     a34:	mov	r2, #0
     a38:	mov	r3, #0
     a3c:	bl	0 <flatcc_builder_start_buffer>
     a40:	ldr	lr, [sp, #4]
     a44:	add	sp, sp, #8
     a48:	bx	lr

00000a4c <flatbuffers_buffer_end>:
     a4c:	mov	ip, sp
     a50:	sub	sp, sp, #8
     a54:	str	ip, [sp]
     a58:	str	lr, [sp, #4]
     a5c:	bl	0 <flatcc_builder_end_buffer>
     a60:	ldr	lr, [sp, #4]
     a64:	add	sp, sp, #8
     a68:	bx	lr

00000a6c <main_start>:
     a6c:	mov	ip, sp
     a70:	sub	sp, sp, #8
     a74:	str	ip, [sp]
     a78:	str	lr, [sp, #4]
     a7c:	mov	r1, #3
     a80:	bl	0 <flatcc_builder_start_table>
     a84:	ldr	lr, [sp, #4]
     a88:	add	sp, sp, #8
     a8c:	bx	lr

00000a90 <main_end>:
     a90:	mov	ip, sp
     a94:	sub	sp, sp, #16
     a98:	str	ip, [sp]
     a9c:	str	lr, [sp, #4]
     aa0:	str	r4, [sp, #8]
     aa4:	mov	r4, r0
     aa8:	ldr	r1, [pc, #68]	; af4 <main_end+0x64>
     aac:	mov	r2, #0
     ab0:	mov	r0, r4
     ab4:	bl	0 <flatcc_builder_check_required>
     ab8:	cmp	r0, #0
     abc:	bne	ad4 <main_end+0x44>
     ac0:	ldr	r0, [pc, #48]	; af8 <main_end+0x68>
     ac4:	ldr	r1, [pc, #32]	; aec <main_end+0x5c>
     ac8:	mov	r2, #21
     acc:	ldr	r3, [pc, #28]	; af0 <main_end+0x60>
     ad0:	bl	0 <__assert_fail>
     ad4:	mov	r0, r4
     ad8:	bl	0 <flatcc_builder_end_table>
     adc:	ldr	r4, [sp, #8]
     ae0:	ldr	lr, [sp, #4]
     ae4:	add	sp, sp, #16
     ae8:	bx	lr
     aec:	.word	0x00000000
     af0:	.word	0x0000044c
     af4:	.word	0x0000044a
     af8:	.word	0x00000321

00000afc <main_time_add>:
     afc:	mov	ip, sp
     b00:	sub	sp, sp, #16
     b04:	str	ip, [sp]
     b08:	str	lr, [sp, #4]
     b0c:	str	r4, [sp, #8]
     b10:	str	r5, [sp, #12]
     b14:	mov	r5, r3
     b18:	mov	r4, r2
     b1c:	mov	r1, r5
     b20:	mov	r2, r4
     b24:	orr	ip, r1, r2
     b28:	cmp	ip, #0
     b2c:	bne	b38 <main_time_add+0x3c>
     b30:	mov	r0, #0
     b34:	b	b68 <main_time_add+0x6c>
     b38:	mov	r1, #0
     b3c:	mov	r2, #8
     b40:	mov	r3, #8
     b44:	bl	0 <flatcc_builder_table_add>
     b48:	cmp	r0, #0
     b4c:	bne	b58 <main_time_add+0x5c>
     b50:	mvn	r0, #0
     b54:	b	b68 <main_time_add+0x6c>
     b58:	mov	r3, r5
     b5c:	mov	r2, r4
     b60:	bl	854 <flatbuffers_int64_assign_to_pe>
     b64:	mov	r0, #0
     b68:	ldr	r4, [sp, #8]
     b6c:	ldr	r5, [sp, #12]
     b70:	ldr	lr, [sp, #4]
     b74:	add	sp, sp, #16
     b78:	bx	lr

00000b7c <main_device_add>:
     b7c:	mov	ip, sp
     b80:	sub	sp, sp, #16
     b84:	str	ip, [sp]
     b88:	str	lr, [sp, #4]
     b8c:	str	r4, [sp, #8]
     b90:	mov	r4, r1
     b94:	cmp	r4, #0
     b98:	bne	ba4 <main_device_add+0x28>
     b9c:	mov	r0, #0
     ba0:	b	bd0 <main_device_add+0x54>
     ba4:	mov	r1, #1
     ba8:	mov	r2, #1
     bac:	mov	r3, #1
     bb0:	bl	0 <flatcc_builder_table_add>
     bb4:	cmp	r0, #0
     bb8:	bne	bc4 <main_device_add+0x48>
     bbc:	mvn	r0, #0
     bc0:	b	bd0 <main_device_add+0x54>
     bc4:	and	r1, r4, #255	; 0xff
     bc8:	bl	818 <flatbuffers_uint8_assign_to_pe>
     bcc:	mov	r0, #0
     bd0:	ldr	r4, [sp, #8]
     bd4:	ldr	lr, [sp, #4]
     bd8:	add	sp, sp, #16
     bdc:	bx	lr

00000be0 <main_samples_add>:
     be0:	mov	ip, sp
     be4:	sub	sp, sp, #16
     be8:	str	ip, [sp]
     bec:	str	lr, [sp, #4]
     bf0:	str	r4, [sp, #8]
     bf4:	mov	r4, r1
     bf8:	cmp	r4, #0
     bfc:	beq	c1c <main_samples_add+0x3c>
     c00:	mov	r1, #2
     c04:	bl	0 <flatcc_builder_table_add_offset>
     c08:	mov	r1, r0
     c0c:	cmp	r1, #0
     c10:	movne	r3, #1
     c14:	moveq	r3, #0
     c18:	b	c20 <main_samples_add+0x40>
     c1c:	mov	r3, #0
     c20:	cmp	r3, #0
     c24:	beq	c34 <main_samples_add+0x54>
     c28:	str	r4, [r1]
     c2c:	mov	r0, #0
     c30:	b	c38 <main_samples_add+0x58>
     c34:	mvn	r0, #0
     c38:	ldr	r4, [sp, #8]
     c3c:	ldr	lr, [sp, #4]
     c40:	add	sp, sp, #16
     c44:	bx	lr

00000c48 <main_create>:
     c48:	mov	ip, sp
     c4c:	sub	sp, sp, #32
     c50:	str	ip, [sp]
     c54:	str	lr, [sp, #4]
     c58:	str	r4, [sp, #8]
     c5c:	str	r5, [sp, #12]
     c60:	str	r6, [sp, #16]
     c64:	str	r7, [sp, #20]
     c68:	str	r8, [sp, #24]
     c6c:	ldr	r7, [ip, #4]
     c70:	ldr	r8, [ip]
     c74:	mov	r5, r3
     c78:	mov	r6, r2
     c7c:	mov	r4, r0
     c80:	mov	r0, r4
     c84:	bl	a6c <main_start>
     c88:	cmp	r0, #0
     c8c:	bne	cb0 <main_create+0x68>
     c90:	mov	r3, r5
     c94:	mov	r2, r6
     c98:	mov	r0, r4
     c9c:	bl	afc <main_time_add>
     ca0:	cmp	r0, #0
     ca4:	movne	ip, #1
     ca8:	moveq	ip, #0
     cac:	b	cb4 <main_create+0x6c>
     cb0:	mov	ip, #1
     cb4:	cmp	ip, #0
     cb8:	bne	cd8 <main_create+0x90>
     cbc:	mov	r1, r7
     cc0:	mov	r0, r4
     cc4:	bl	be0 <main_samples_add>
     cc8:	cmp	r0, #0
     ccc:	movne	r3, #1
     cd0:	moveq	r3, #0
     cd4:	b	cdc <main_create+0x94>
     cd8:	mov	r3, #1
     cdc:	cmp	r3, #0
     ce0:	bne	d00 <main_create+0xb8>
     ce4:	and	r1, r8, #255	; 0xff
     ce8:	mov	r0, r4
     cec:	bl	b7c <main_device_add>
     cf0:	cmp	r0, #0
     cf4:	movne	r1, #1
     cf8:	moveq	r1, #0
     cfc:	b	d04 <main_create+0xbc>
     d00:	mov	r1, #1
     d04:	cmp	r1, #0
     d08:	beq	d14 <main_create+0xcc>
     d0c:	mov	r0, #0
     d10:	b	d1c <main_create+0xd4>
     d14:	mov	r0, r4
     d18:	bl	a90 <main_end>
     d1c:	ldr	r4, [sp, #8]
     d20:	ldr	r5, [sp, #12]
     d24:	ldr	r6, [sp, #16]
     d28:	ldr	r7, [sp, #20]
     d2c:	ldr	r8, [sp, #24]
     d30:	ldr	lr, [sp, #4]
     d34:	add	sp, sp, #32
     d38:	bx	lr

00000d3c <main_create_as_root>:
     d3c:	mov	ip, sp
     d40:	sub	sp, sp, #40	; 0x28
     d44:	str	ip, [sp, #8]
     d48:	str	lr, [sp, #12]
     d4c:	str	r4, [sp, #16]
     d50:	str	r5, [sp, #20]
     d54:	str	r6, [sp, #24]
     d58:	str	r7, [sp, #28]
     d5c:	str	r8, [sp, #32]
     d60:	ldr	r7, [ip, #4]
     d64:	ldr	r8, [ip]
     d68:	mov	r5, r3
     d6c:	mov	r6, r2
     d70:	mov	r4, r0
     d74:	mov	r1, #0
     d78:	mov	r0, r4
     d7c:	bl	a24 <flatbuffers_buffer_start>
     d80:	cmp	r0, #0
     d84:	beq	d90 <main_create_as_root+0x54>
     d88:	mov	r0, #0
     d8c:	b	db8 <main_create_as_root+0x7c>
     d90:	and	r2, r8, #255	; 0xff
     d94:	str	r7, [sp, #4]
     d98:	str	r2, [sp]
     d9c:	mov	r3, r5
     da0:	mov	r2, r6
     da4:	mov	r0, r4
     da8:	bl	c48 <main_create>
     dac:	mov	r1, r0
     db0:	mov	r0, r4
     db4:	bl	a4c <flatbuffers_buffer_end>
     db8:	ldr	r4, [sp, #16]
     dbc:	ldr	r5, [sp, #20]
     dc0:	ldr	r6, [sp, #24]
     dc4:	ldr	r7, [sp, #28]
     dc8:	ldr	r8, [sp, #32]
     dcc:	ldr	lr, [sp, #12]
     dd0:	add	sp, sp, #40	; 0x28
     dd4:	bx	lr

00000dd8 <hexdump>:
     dd8:	mov	ip, sp
     ddc:	sub	sp, sp, #48	; 0x30
     de0:	str	ip, [sp]
     de4:	str	lr, [sp, #4]
     de8:	str	r4, [sp, #8]
     dec:	str	r5, [sp, #12]
     df0:	str	r6, [sp, #16]
     df4:	str	r7, [sp, #20]
     df8:	mov	r4, r3
     dfc:	mov	r5, r2
     e00:	mov	r6, r1
     e04:	mov	r2, r0
     e08:	cmp	r2, #0
     e0c:	beq	e1c <hexdump+0x44>
     e10:	ldr	r1, [pc, #320]	; f58 <hexdump+0x180>
     e14:	mov	r0, r4
     e18:	bl	0 <fprintf>
     e1c:	mov	r7, #0
     e20:	cmp	r7, r5
     e24:	bcs	ef8 <hexdump+0x120>
     e28:	and	r1, r7, #15
     e2c:	cmp	r1, #0
     e30:	bne	e60 <hexdump+0x88>
     e34:	cmp	r7, #0
     e38:	beq	e4c <hexdump+0x74>
     e3c:	ldr	r1, [pc, #260]	; f48 <hexdump+0x170>
     e40:	add	r2, sp, #24
     e44:	mov	r0, r4
     e48:	bl	0 <fprintf>
     e4c:	ldr	r1, [pc, #248]	; f4c <hexdump+0x174>
     e50:	mov	r2, r7
     e54:	mov	r0, r4
     e58:	bl	0 <fprintf>
     e5c:	b	e78 <hexdump+0xa0>
     e60:	and	r3, r7, #7
     e64:	cmp	r3, #0
     e68:	bne	e78 <hexdump+0xa0>
     e6c:	ldr	r1, [pc, #220]	; f50 <hexdump+0x178>
     e70:	mov	r0, r4
     e74:	bl	0 <fprintf>
     e78:	ldr	r1, [pc, #212]	; f54 <hexdump+0x17c>
     e7c:	ldrb	r2, [r6, r7]
     e80:	mov	r0, r4
     e84:	bl	0 <fprintf>
     e88:	ldrb	r3, [r6, r7]
     e8c:	cmp	r3, #32
     e90:	blt	ea8 <hexdump+0xd0>
     e94:	ldrb	r2, [r6, r7]
     e98:	cmp	r2, #126	; 0x7e
     e9c:	movgt	r1, #1
     ea0:	movle	r1, #0
     ea4:	b	eac <hexdump+0xd4>
     ea8:	mov	r1, #1
     eac:	cmp	r1, #0
     eb0:	bne	ecc <hexdump+0xf4>
     eb4:	add	r2, sp, #24
     eb8:	and	r0, r7, #15
     ebc:	ldrb	r3, [r6, r7]
     ec0:	and	r1, r3, #255	; 0xff
     ec4:	strb	r1, [r2, r0]
     ec8:	b	edc <hexdump+0x104>
     ecc:	add	r0, sp, #24
     ed0:	and	r3, r7, #15
     ed4:	mov	r2, #46	; 0x2e
     ed8:	strb	r2, [r0, r3]
     edc:	add	r0, sp, #24
     ee0:	and	ip, r7, #15
     ee4:	add	r2, r0, ip
     ee8:	mov	r3, #0
     eec:	strb	r3, [r2, #1]
     ef0:	add	r7, r7, #1
     ef4:	b	e20 <hexdump+0x48>
     ef8:	and	ip, r7, #15
     efc:	cmp	ip, #0
     f00:	beq	f18 <hexdump+0x140>
     f04:	ldr	r1, [pc, #56]	; f44 <hexdump+0x16c>
     f08:	mov	r0, r4
     f0c:	bl	0 <fprintf>
     f10:	add	r7, r7, #1
     f14:	b	ef8 <hexdump+0x120>
     f18:	ldr	r1, [pc, #40]	; f48 <hexdump+0x170>
     f1c:	add	r2, sp, #24
     f20:	mov	r0, r4
     f24:	bl	0 <fprintf>
     f28:	ldr	r4, [sp, #8]
     f2c:	ldr	r5, [sp, #12]
     f30:	ldr	r6, [sp, #16]
     f34:	ldr	r7, [sp, #20]
     f38:	ldr	lr, [sp, #4]
     f3c:	add	sp, sp, #48	; 0x30
     f40:	bx	lr
     f44:	.word	0x00000107
     f48:	.word	0x00000212
     f4c:	.word	0x0000015e
     f50:	.word	0x00000249
     f54:	.word	0x000001fd
     f58:	.word	0x0000020d

00000f5c <dbg_emitter>:
     f5c:	mov	ip, sp
     f60:	sub	sp, sp, #24
     f64:	str	ip, [sp]
     f68:	str	lr, [sp, #4]
     f6c:	str	r4, [sp, #8]
     f70:	str	r5, [sp, #12]
     f74:	str	r6, [sp, #16]
     f78:	str	r7, [sp, #20]
     f7c:	mov	r4, r3
     f80:	ldr	r3, [ip]
     f84:	mov	r5, r2
     f88:	mov	r6, r1
     f8c:	ldr	r0, [pc, #148]	; 1028 <dbg_emitter+0xcc>
     f90:	mov	r2, r4
     f94:	mov	r1, r5
     f98:	bl	0 <printf>
     f9c:	mov	r7, #0
     fa0:	cmp	r7, r5
     fa4:	bge	1000 <dbg_emitter+0xa4>
     fa8:	ldr	r2, [r6, r7, lsl #3]
     fac:	ldr	r1, [pc, #120]	; 102c <dbg_emitter+0xd0>
     fb0:	cmp	r2, r1
     fb4:	bne	fcc <dbg_emitter+0x70>
     fb8:	ldr	r0, [pc, #96]	; 1020 <dbg_emitter+0xc4>
     fbc:	add	ip, r6, r7, lsl #3
     fc0:	ldr	r2, [ip, #4]
     fc4:	mov	r1, r4
     fc8:	bl	0 <printf>
     fcc:	ldr	r2, [r6, r7, lsl #3]
     fd0:	cmp	r2, #0
     fd4:	bne	fec <dbg_emitter+0x90>
     fd8:	ldr	r0, [pc, #68]	; 1024 <dbg_emitter+0xc8>
     fdc:	add	r1, r6, r7, lsl #3
     fe0:	ldr	r2, [r1, #4]
     fe4:	mov	r1, r4
     fe8:	bl	0 <printf>
     fec:	add	r3, r6, r7, lsl #3
     ff0:	ldr	r0, [r3, #4]
     ff4:	add	r4, r4, r0
     ff8:	add	r7, r7, #1
     ffc:	b	fa0 <dbg_emitter+0x44>
    1000:	mov	r0, #0
    1004:	ldr	r4, [sp, #8]
    1008:	ldr	r5, [sp, #12]
    100c:	ldr	r6, [sp, #16]
    1010:	ldr	r7, [sp, #20]
    1014:	ldr	lr, [sp, #4]
    1018:	add	sp, sp, #24
    101c:	bx	lr
    1020:	.word	0x00000300
    1024:	.word	0x0000038d
    1028:	.word	0x00000218
    102c:	.word	0x00000000

00001030 <debug_test>:
    1030:	mov	ip, sp
    1034:	sub	sp, sp, #296	; 0x128
    1038:	str	ip, [sp, #8]
    103c:	str	lr, [sp, #12]
    1040:	str	r4, [sp, #16]
    1044:	vldr	s0, [pc, #228]	; 1130 <debug_test+0x100>
    1048:	vstr	s0, [sp, #24]
    104c:	vldr	d0, [pc, #224]	; 1134 <debug_test+0x104>
    1050:	vcvt.f32.f64	s0, d0
    1054:	vstr	s0, [sp, #28]
    1058:	vldr	d0, [pc, #212]	; 1134 <debug_test+0x104>
    105c:	vcvt.f32.f64	s0, d0
    1060:	vstr	s0, [sp, #32]
    1064:	vldr	d0, [pc, #200]	; 1134 <debug_test+0x104>
    1068:	vcvt.f32.f64	s0, d0
    106c:	vstr	s0, [sp, #36]	; 0x24
    1070:	vldr	d0, [pc, #188]	; 1134 <debug_test+0x104>
    1074:	vcvt.f32.f64	s0, d0
    1078:	vstr	s0, [sp, #40]	; 0x28
    107c:	vldr	d0, [pc, #176]	; 1134 <debug_test+0x104>
    1080:	vcvt.f32.f64	s0, d0
    1084:	vstr	s0, [sp, #44]	; 0x2c
    1088:	vldr	d0, [pc, #164]	; 1134 <debug_test+0x104>
    108c:	vcvt.f32.f64	s0, d0
    1090:	vstr	s0, [sp, #48]	; 0x30
    1094:	vldr	d0, [pc, #152]	; 1134 <debug_test+0x104>
    1098:	vcvt.f32.f64	s0, d0
    109c:	vstr	s0, [sp, #52]	; 0x34
    10a0:	vldr	d0, [pc, #140]	; 1134 <debug_test+0x104>
    10a4:	vcvt.f32.f64	s0, d0
    10a8:	vstr	s0, [sp, #56]	; 0x38
    10ac:	vldr	d0, [pc, #128]	; 1134 <debug_test+0x104>
    10b0:	vcvt.f32.f64	s0, d0
    10b4:	vstr	s0, [sp, #60]	; 0x3c
    10b8:	add	r4, sp, #64	; 0x40
    10bc:	ldr	r0, [pc, #104]	; 112c <debug_test+0xfc>
    10c0:	bl	0 <printf>
    10c4:	ldr	r1, [pc, #92]	; 1128 <debug_test+0xf8>
    10c8:	mov	r2, #0
    10cc:	mov	r3, #0
    10d0:	mov	r0, #0
    10d4:	str	r0, [sp]
    10d8:	mov	r0, r4
    10dc:	bl	0 <flatcc_builder_custom_init>
    10e0:	add	r1, sp, #24
    10e4:	mov	r2, #10
    10e8:	mov	r0, r4
    10ec:	bl	8d0 <flatbuffers_float_vec_create>
    10f0:	mov	r3, #0
    10f4:	mov	r2, #42	; 0x2a
    10f8:	mov	ip, #1
    10fc:	str	r0, [sp, #4]
    1100:	str	ip, [sp]
    1104:	mov	r0, r4
    1108:	bl	d3c <main_create_as_root>
    110c:	mov	r0, r4
    1110:	bl	0 <flatcc_builder_clear>
    1114:	mov	r0, #0
    1118:	ldr	r4, [sp, #16]
    111c:	ldr	lr, [sp, #12]
    1120:	add	sp, sp, #296	; 0x128
    1124:	bx	lr
    1128:	.word	0x00000000
    112c:	.word	0x000003bb
	...

0000113c <emit_test>:
    113c:	mov	ip, sp
    1140:	sub	sp, sp, #352	; 0x160
    1144:	str	ip, [sp, #8]
    1148:	str	lr, [sp, #12]
    114c:	str	r4, [sp, #16]
    1150:	str	r5, [sp, #20]
    1154:	str	r6, [sp, #24]
    1158:	mov	r0, #4
    115c:	strb	r0, [sp, #56]	; 0x38
    1160:	mov	r0, #0
    1164:	strb	r0, [sp, #57]	; 0x39
    1168:	mov	r0, #0
    116c:	strb	r0, [sp, #58]	; 0x3a
    1170:	mov	r0, #0
    1174:	strb	r0, [sp, #59]	; 0x3b
    1178:	mov	r0, #212	; 0xd4
    117c:	strb	r0, [sp, #60]	; 0x3c
    1180:	mov	r0, #255	; 0xff
    1184:	strb	r0, [sp, #61]	; 0x3d
    1188:	mov	r0, #255	; 0xff
    118c:	strb	r0, [sp, #62]	; 0x3e
    1190:	mov	r0, #255	; 0xff
    1194:	strb	r0, [sp, #63]	; 0x3f
    1198:	mov	r0, #42	; 0x2a
    119c:	strb	r0, [sp, #64]	; 0x40
    11a0:	mov	r0, #0
    11a4:	strb	r0, [sp, #65]	; 0x41
    11a8:	mov	r0, #0
    11ac:	strb	r0, [sp, #66]	; 0x42
    11b0:	mov	r0, #0
    11b4:	strb	r0, [sp, #67]	; 0x43
    11b8:	mov	r0, #0
    11bc:	strb	r0, [sp, #68]	; 0x44
    11c0:	mov	r0, #0
    11c4:	strb	r0, [sp, #69]	; 0x45
    11c8:	mov	r0, #0
    11cc:	strb	r0, [sp, #70]	; 0x46
    11d0:	mov	r0, #0
    11d4:	strb	r0, [sp, #71]	; 0x47
    11d8:	mov	r0, #12
    11dc:	strb	r0, [sp, #72]	; 0x48
    11e0:	mov	r0, #0
    11e4:	strb	r0, [sp, #73]	; 0x49
    11e8:	mov	r0, #0
    11ec:	strb	r0, [sp, #74]	; 0x4a
    11f0:	mov	r0, #0
    11f4:	strb	r0, [sp, #75]	; 0x4b
    11f8:	mov	r0, #1
    11fc:	strb	r0, [sp, #76]	; 0x4c
    1200:	mov	r0, #0
    1204:	strb	r0, [sp, #77]	; 0x4d
    1208:	mov	r0, #0
    120c:	strb	r0, [sp, #78]	; 0x4e
    1210:	mov	r0, #0
    1214:	strb	r0, [sp, #79]	; 0x4f
    1218:	mov	r0, #0
    121c:	strb	r0, [sp, #80]	; 0x50
    1220:	mov	r0, #0
    1224:	strb	r0, [sp, #81]	; 0x51
    1228:	mov	r0, #0
    122c:	strb	r0, [sp, #82]	; 0x52
    1230:	mov	r0, #0
    1234:	strb	r0, [sp, #83]	; 0x53
    1238:	mov	r0, #4
    123c:	strb	r0, [sp, #84]	; 0x54
    1240:	mov	r0, #0
    1244:	strb	r0, [sp, #85]	; 0x55
    1248:	mov	r0, #0
    124c:	strb	r0, [sp, #86]	; 0x56
    1250:	mov	r0, #0
    1254:	strb	r0, [sp, #87]	; 0x57
    1258:	mov	r0, #0
    125c:	strb	r0, [sp, #88]	; 0x58
    1260:	mov	r0, #0
    1264:	strb	r0, [sp, #89]	; 0x59
    1268:	mov	r0, #128	; 0x80
    126c:	strb	r0, [sp, #90]	; 0x5a
    1270:	mov	r0, #63	; 0x3f
    1274:	strb	r0, [sp, #91]	; 0x5b
    1278:	mov	r0, #205	; 0xcd
    127c:	strb	r0, [sp, #92]	; 0x5c
    1280:	mov	r0, #204	; 0xcc
    1284:	strb	r0, [sp, #93]	; 0x5d
    1288:	mov	r0, #140	; 0x8c
    128c:	strb	r0, [sp, #94]	; 0x5e
    1290:	mov	r0, #63	; 0x3f
    1294:	strb	r0, [sp, #95]	; 0x5f
    1298:	mov	r0, #154	; 0x9a
    129c:	strb	r0, [sp, #96]	; 0x60
    12a0:	mov	r0, #153	; 0x99
    12a4:	strb	r0, [sp, #97]	; 0x61
    12a8:	mov	r0, #153	; 0x99
    12ac:	strb	r0, [sp, #98]	; 0x62
    12b0:	mov	r0, #63	; 0x3f
    12b4:	strb	r0, [sp, #99]	; 0x63
    12b8:	mov	r0, #102	; 0x66
    12bc:	strb	r0, [sp, #100]	; 0x64
    12c0:	mov	r0, #102	; 0x66
    12c4:	strb	r0, [sp, #101]	; 0x65
    12c8:	mov	r0, #166	; 0xa6
    12cc:	strb	r0, [sp, #102]	; 0x66
    12d0:	mov	r0, #63	; 0x3f
    12d4:	strb	r0, [sp, #103]	; 0x67
    12d8:	mov	r0, #10
    12dc:	strb	r0, [sp, #104]	; 0x68
    12e0:	mov	r0, #0
    12e4:	strb	r0, [sp, #105]	; 0x69
    12e8:	mov	r0, #17
    12ec:	strb	r0, [sp, #106]	; 0x6a
    12f0:	mov	r0, #0
    12f4:	strb	r0, [sp, #107]	; 0x6b
    12f8:	mov	r0, #4
    12fc:	strb	r0, [sp, #108]	; 0x6c
    1300:	mov	r0, #0
    1304:	strb	r0, [sp, #109]	; 0x6d
    1308:	mov	r0, #16
    130c:	strb	r0, [sp, #110]	; 0x6e
    1310:	mov	r0, #0
    1314:	strb	r0, [sp, #111]	; 0x6f
    1318:	mov	r0, #12
    131c:	strb	r0, [sp, #112]	; 0x70
    1320:	mov	r0, #0
    1324:	strb	r0, [sp, #113]	; 0x71
    1328:	mov	r0, #0
    132c:	strb	r0, [sp, #114]	; 0x72
    1330:	vmov.f32	s0, #112	; 0x3f800000  1.0
    1334:	vstr	s0, [sp, #40]	; 0x28
    1338:	vldr	s0, [pc, #676]	; 15e4 <emit_test+0x4a8>
    133c:	vstr	s0, [sp, #44]	; 0x2c
    1340:	vldr	s0, [pc, #676]	; 15ec <emit_test+0x4b0>
    1344:	vstr	s0, [sp, #48]	; 0x30
    1348:	vldr	s0, [pc, #664]	; 15e8 <emit_test+0x4ac>
    134c:	vstr	s0, [sp, #52]	; 0x34
    1350:	add	r5, sp, #120	; 0x78
    1354:	mov	r0, r5
    1358:	bl	0 <flatcc_builder_init>
    135c:	mov	r0, r5
    1360:	bl	0 <flatcc_builder_get_emit_context>
    1364:	mov	r4, r0
    1368:	add	r1, sp, #40	; 0x28
    136c:	mov	r2, #4
    1370:	mov	r0, r5
    1374:	bl	8d0 <flatbuffers_float_vec_create>
    1378:	mov	r3, #0
    137c:	mov	r2, #42	; 0x2a
    1380:	mov	r1, #1
    1384:	str	r0, [sp, #4]
    1388:	str	r1, [sp]
    138c:	mov	r0, r5
    1390:	bl	d3c <main_create_as_root>
    1394:	add	r1, sp, #32
    1398:	mov	r0, r4
    139c:	bl	7c0 <flatcc_emitter_get_direct_buffer>
    13a0:	mov	r6, r0
    13a4:	cmp	r6, #0
    13a8:	bne	13b4 <emit_test+0x278>
    13ac:	mvn	r0, #0
    13b0:	b	15b4 <emit_test+0x478>
    13b4:	mov	r0, r4
    13b8:	bl	7a0 <flatcc_emitter_get_buffer_size>
    13bc:	ldr	r2, [sp, #32]
    13c0:	cmp	r2, r0
    13c4:	beq	13e4 <emit_test+0x2a8>
    13c8:	ldr	r0, [pc, #512]	; 15d0 <emit_test+0x494>
    13cc:	ldr	r1, [pc, #512]	; 15d4 <emit_test+0x498>
    13d0:	mov	r2, #100	; 0x64
    13d4:	ldr	r3, [pc, #496]	; 15cc <emit_test+0x490>
    13d8:	bl	0 <__assert_fail>
    13dc:	mvn	r0, #0
    13e0:	b	15b4 <emit_test+0x478>
    13e4:	mov	r0, r5
    13e8:	bl	0 <flatcc_builder_get_buffer_size>
    13ec:	ldr	r1, [sp, #32]
    13f0:	cmp	r1, r0
    13f4:	beq	1414 <emit_test+0x2d8>
    13f8:	ldr	r0, [pc, #464]	; 15d0 <emit_test+0x494>
    13fc:	ldr	r1, [pc, #464]	; 15d4 <emit_test+0x498>
    1400:	mov	r2, #101	; 0x65
    1404:	ldr	r3, [pc, #448]	; 15cc <emit_test+0x490>
    1408:	bl	0 <__assert_fail>
    140c:	mvn	r0, #0
    1410:	b	15b4 <emit_test+0x478>
    1414:	ldr	r1, [pc, #444]	; 15d8 <emit_test+0x49c>
    1418:	ldr	r0, [r1]
    141c:	ldr	r1, [pc, #440]	; 15dc <emit_test+0x4a0>
    1420:	ldr	r2, [sp, #32]
    1424:	bl	0 <fprintf>
    1428:	ldr	r0, [pc, #432]	; 15e0 <emit_test+0x4a4>
    142c:	ldr	r2, [sp, #32]
    1430:	ldr	r1, [pc, #416]	; 15d8 <emit_test+0x49c>
    1434:	ldr	r3, [r1]
    1438:	mov	r1, r6
    143c:	bl	dd8 <hexdump>
    1440:	ldr	r3, [sp, #32]
    1444:	cmp	r3, #58	; 0x3a
    1448:	beq	1468 <emit_test+0x32c>
    144c:	ldr	r0, [pc, #380]	; 15d0 <emit_test+0x494>
    1450:	ldr	r1, [pc, #380]	; 15d4 <emit_test+0x498>
    1454:	mov	r2, #106	; 0x6a
    1458:	ldr	r3, [pc, #364]	; 15cc <emit_test+0x490>
    145c:	bl	0 <__assert_fail>
    1460:	mvn	r0, #0
    1464:	b	15b4 <emit_test+0x478>
    1468:	ldr	r1, [sp, #32]
    146c:	cmp	r1, #58	; 0x3a
    1470:	beq	1490 <emit_test+0x354>
    1474:	ldr	r0, [pc, #340]	; 15d0 <emit_test+0x494>
    1478:	ldr	r1, [pc, #340]	; 15d4 <emit_test+0x498>
    147c:	mov	r2, #107	; 0x6b
    1480:	ldr	r3, [pc, #324]	; 15cc <emit_test+0x490>
    1484:	bl	0 <__assert_fail>
    1488:	mvn	r0, #0
    148c:	b	15b4 <emit_test+0x478>
    1490:	add	r1, sp, #56	; 0x38
    1494:	ldr	r2, [sp, #32]
    1498:	mov	r0, r6
    149c:	bl	0 <memcmp>
    14a0:	cmp	r0, #0
    14a4:	beq	14c4 <emit_test+0x388>
    14a8:	ldr	r0, [pc, #288]	; 15d0 <emit_test+0x494>
    14ac:	ldr	r1, [pc, #288]	; 15d4 <emit_test+0x498>
    14b0:	mov	r2, #108	; 0x6c
    14b4:	ldr	r3, [pc, #272]	; 15cc <emit_test+0x490>
    14b8:	bl	0 <__assert_fail>
    14bc:	mvn	r0, #0
    14c0:	b	15b4 <emit_test+0x478>
    14c4:	mov	r0, r6
    14c8:	bl	42c <main_as_root>
    14cc:	mov	r4, r0
    14d0:	mov	r0, r4
    14d4:	bl	498 <main_time>
    14d8:	eor	r0, r0, #42	; 0x2a
    14dc:	orr	r3, r1, r0
    14e0:	cmp	r3, #0
    14e4:	moveq	ip, #1
    14e8:	movne	ip, #0
    14ec:	cmp	ip, #0
    14f0:	bne	1510 <emit_test+0x3d4>
    14f4:	ldr	r0, [pc, #212]	; 15d0 <emit_test+0x494>
    14f8:	ldr	r1, [pc, #212]	; 15d4 <emit_test+0x498>
    14fc:	mov	r2, #112	; 0x70
    1500:	ldr	r3, [pc, #196]	; 15cc <emit_test+0x490>
    1504:	bl	0 <__assert_fail>
    1508:	mvn	r0, #0
    150c:	b	15b4 <emit_test+0x478>
    1510:	mov	r0, r4
    1514:	bl	580 <main_device>
    1518:	cmp	r0, #1
    151c:	beq	153c <emit_test+0x400>
    1520:	ldr	r0, [pc, #168]	; 15d0 <emit_test+0x494>
    1524:	ldr	r1, [pc, #168]	; 15d4 <emit_test+0x498>
    1528:	mov	r2, #113	; 0x71
    152c:	ldr	r3, [pc, #152]	; 15cc <emit_test+0x490>
    1530:	bl	0 <__assert_fail>
    1534:	mvn	r0, #0
    1538:	b	15b4 <emit_test+0x478>
    153c:	mov	r0, r4
    1540:	bl	668 <main_samples>
    1544:	bl	2f8 <flatbuffers_float_vec_len>
    1548:	cmp	r0, #4
    154c:	beq	156c <emit_test+0x430>
    1550:	ldr	r0, [pc, #120]	; 15d0 <emit_test+0x494>
    1554:	ldr	r1, [pc, #120]	; 15d4 <emit_test+0x498>
    1558:	mov	r2, #114	; 0x72
    155c:	ldr	r3, [pc, #104]	; 15cc <emit_test+0x490>
    1560:	bl	0 <__assert_fail>
    1564:	mvn	r0, #0
    1568:	b	15b4 <emit_test+0x478>
    156c:	mov	r0, r4
    1570:	bl	668 <main_samples>
    1574:	mov	r1, #2
    1578:	bl	318 <flatbuffers_float_vec_at>
    157c:	vldr	s12, [pc, #104]	; 15ec <emit_test+0x4b0>
    1580:	vcmp.f32	s0, s12
    1584:	vmrs	APSR_nzcv, fpscr
    1588:	beq	15a8 <emit_test+0x46c>
    158c:	ldr	r0, [pc, #60]	; 15d0 <emit_test+0x494>
    1590:	ldr	r1, [pc, #60]	; 15d4 <emit_test+0x498>
    1594:	mov	r2, #115	; 0x73
    1598:	ldr	r3, [pc, #44]	; 15cc <emit_test+0x490>
    159c:	bl	0 <__assert_fail>
    15a0:	mvn	r0, #0
    15a4:	b	15b4 <emit_test+0x478>
    15a8:	mov	r0, r5
    15ac:	bl	0 <flatcc_builder_clear>
    15b0:	mov	r0, #0
    15b4:	ldr	r4, [sp, #16]
    15b8:	ldr	r5, [sp, #20]
    15bc:	ldr	r6, [sp, #24]
    15c0:	ldr	lr, [sp, #12]
    15c4:	add	sp, sp, #352	; 0x160
    15c8:	bx	lr
    15cc:	.word	0x00000455
    15d0:	.word	0x000002c7
    15d4:	.word	0x00000262
    15d8:	.word	0x00000000
    15dc:	.word	0x000000f6
    15e0:	.word	0x00000203
    15e4:	.word	0x3f8ccccd
    15e8:	.word	0x3fa66666
    15ec:	.word	0x3f99999a

000015f0 <main>:
    15f0:	mov	ip, sp
    15f4:	sub	sp, sp, #16
    15f8:	str	ip, [sp]
    15fc:	str	lr, [sp, #4]
    1600:	str	r4, [sp, #8]
    1604:	mov	r4, #0
    1608:	bl	1030 <debug_test>
    160c:	orr	r4, r4, r0
    1610:	bl	113c <emit_test>
    1614:	orr	r0, r4, r0
    1618:	ldr	r4, [sp, #8]
    161c:	ldr	lr, [sp, #4]
    1620:	add	sp, sp, #16
    1624:	bx	lr
