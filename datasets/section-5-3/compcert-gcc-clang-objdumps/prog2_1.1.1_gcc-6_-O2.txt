
../compcert-repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	10930 <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <fopen@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <puts@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__libc_start_main@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <__ctype_tolower_loc@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__gmon_start__@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <memset@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

000106bc <fclose@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2404]!	; 0x964

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2396]!	; 0x95c

000106d4 <getc@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2388]!	; 0x954

Disassembly of section .text:

000106e0 <main@@Base>:
   106e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e4:	vpush	{d8}
   106e8:	ldr	ip, [pc, #488]	; 108d8 <main@@Base+0x1f8>
   106ec:	mov	r4, #0
   106f0:	ldr	r7, [pc, #484]	; 108dc <main@@Base+0x1fc>
   106f4:	ldm	ip!, {r0, r1, r2, r3}
   106f8:	sub	sp, sp, #180	; 0xb4
   106fc:	add	lr, sp, #40	; 0x28
   10700:	add	r5, sp, #16
   10704:	stmia	lr!, {r0, r1, r2, r3}
   10708:	add	r8, ip, #16
   1070c:	ldm	ip, {r0, r1, r2, r3}
   10710:	add	ip, ip, #32
   10714:	mov	r6, sp
   10718:	mov	r9, #105	; 0x69
   1071c:	stm	lr, {r0, r1, r2, r3}
   10720:	ldm	r8, {r0, r1, r2, r3}
   10724:	mov	r8, #111	; 0x6f
   10728:	stm	sp, {r0, r1, r2, r3}
   1072c:	ldm	ip!, {r0, r1, r2, r3}
   10730:	stmia	r5!, {r0, r1, r2, r3}
   10734:	ldm	ip, {r0, r1}
   10738:	stm	r5, {r0, r1}
   1073c:	ldr	r1, [pc, #412]	; 108e0 <main@@Base+0x200>
   10740:	ldr	r0, [pc, #412]	; 108e4 <main@@Base+0x204>
   10744:	bl	10674 <fopen@plt>
   10748:	mov	r2, #104	; 0x68
   1074c:	mov	r1, r4
   10750:	mov	r5, r0
   10754:	add	r0, sp, #72	; 0x48
   10758:	bl	106b0 <memset@plt>
   1075c:	add	sl, sp, #76	; 0x4c
   10760:	mov	r0, r5
   10764:	bl	106d4 <getc@plt>
   10768:	cmn	r0, #1
   1076c:	beq	10838 <main@@Base+0x158>
   10770:	add	r3, sp, #40	; 0x28
   10774:	ldr	r1, [r3], #4
   10778:	cmp	r0, r1
   1077c:	beq	1081c <main@@Base+0x13c>
   10780:	cmp	sl, r3
   10784:	bne	10774 <main@@Base+0x94>
   10788:	mov	r3, r6
   1078c:	add	ip, sp, #20
   10790:	ldr	r1, [r3], #4
   10794:	cmp	r0, r1
   10798:	beq	10830 <main@@Base+0x150>
   1079c:	cmp	ip, r3
   107a0:	bne	10790 <main@@Base+0xb0>
   107a4:	bic	lr, r0, #32
   107a8:	cmp	lr, #205	; 0xcd
   107ac:	beq	108bc <main@@Base+0x1dc>
   107b0:	cmp	r0, #0
   107b4:	beq	108bc <main@@Base+0x1dc>
   107b8:	add	r3, sp, #16
   107bc:	add	ip, sp, #44	; 0x2c
   107c0:	ldr	r1, [r3], #4
   107c4:	cmp	r0, r1
   107c8:	beq	108b4 <main@@Base+0x1d4>
   107cc:	cmp	r3, ip
   107d0:	bne	107c0 <main@@Base+0xe0>
   107d4:	cmp	lr, #218	; 0xda
   107d8:	beq	108c4 <main@@Base+0x1e4>
   107dc:	cmp	lr, #199	; 0xc7
   107e0:	beq	108cc <main@@Base+0x1ec>
   107e4:	add	r3, r0, #128	; 0x80
   107e8:	cmp	r3, r7
   107ec:	mov	fp, r0
   107f0:	bls	10820 <main@@Base+0x140>
   107f4:	sub	r0, r0, #97	; 0x61
   107f8:	cmp	r0, #25
   107fc:	bhi	10760 <main@@Base+0x80>
   10800:	add	r3, sp, #176	; 0xb0
   10804:	add	r0, r3, r0, lsl #2
   10808:	add	r4, r4, #1
   1080c:	ldr	r3, [r0, #-104]	; 0xffffff98
   10810:	add	r3, r3, #1
   10814:	str	r3, [r0, #-104]	; 0xffffff98
   10818:	b	1075c <main@@Base+0x7c>
   1081c:	mov	fp, #97	; 0x61
   10820:	bl	10698 <__ctype_tolower_loc@plt>
   10824:	ldr	r1, [r0]
   10828:	ldr	r0, [r1, fp, lsl #2]
   1082c:	b	107f4 <main@@Base+0x114>
   10830:	mov	fp, #101	; 0x65
   10834:	b	10820 <main@@Base+0x140>
   10838:	mov	r0, r5
   1083c:	bl	106bc <fclose@plt>
   10840:	ldr	r0, [pc, #160]	; 108e8 <main@@Base+0x208>
   10844:	bl	10680 <puts@plt>
   10848:	mov	r1, r4
   1084c:	ldr	r0, [pc, #152]	; 108ec <main@@Base+0x20c>
   10850:	bl	10668 <printf@plt>
   10854:	vmov	s15, r4
   10858:	vldr	s17, [pc, #116]	; 108d4 <main@@Base+0x1f4>
   1085c:	ldr	r7, [pc, #140]	; 108f0 <main@@Base+0x210>
   10860:	add	r5, sp, #68	; 0x44
   10864:	vcvt.f32.s32	s16, s15
   10868:	add	r6, sp, #172	; 0xac
   1086c:	mov	r4, #97	; 0x61
   10870:	ldr	r3, [r5, #4]!
   10874:	mov	r1, r4
   10878:	mov	r0, r7
   1087c:	vmov	s14, r3
   10880:	add	r4, r4, #1
   10884:	vcvt.f32.s32	s14, s14
   10888:	vdiv.f32	s15, s14, s16
   1088c:	vmul.f32	s15, s15, s17
   10890:	vcvt.f64.f32	d7, s15
   10894:	vmov	r2, r3, d7
   10898:	bl	10668 <printf@plt>
   1089c:	cmp	r6, r5
   108a0:	bne	10870 <main@@Base+0x190>
   108a4:	mov	r0, #0
   108a8:	add	sp, sp, #180	; 0xb4
   108ac:	vpop	{d8}
   108b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108b4:	mov	fp, r8
   108b8:	b	10820 <main@@Base+0x140>
   108bc:	mov	fp, r9
   108c0:	b	10820 <main@@Base+0x140>
   108c4:	mov	fp, #117	; 0x75
   108c8:	b	10820 <main@@Base+0x140>
   108cc:	mov	fp, #99	; 0x63
   108d0:	b	10820 <main@@Base+0x140>
   108d4:	sbcmi	r0, r8, #0
   108d8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   108dc:	andeq	r0, r0, pc, ror r1
   108e0:	andeq	r0, r1, r8, lsl fp
   108e4:	andeq	r0, r1, ip, lsl fp
   108e8:	andeq	r0, r1, r8, ror #22
   108ec:	andeq	r0, r1, r4, lsr fp
   108f0:	andeq	r0, r1, r4, asr fp

000108f4 <_start@@Base>:
   108f4:	mov	fp, #0
   108f8:	mov	lr, #0
   108fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10900:	mov	r2, sp
   10904:	push	{r2}		; (str r2, [sp, #-4]!)
   10908:	push	{r0}		; (str r0, [sp, #-4]!)
   1090c:	ldr	ip, [pc, #16]	; 10924 <_start@@Base+0x30>
   10910:	push	{ip}		; (str ip, [sp, #-4]!)
   10914:	ldr	r0, [pc, #12]	; 10928 <_start@@Base+0x34>
   10918:	ldr	r3, [pc, #12]	; 1092c <_start@@Base+0x38>
   1091c:	bl	1068c <__libc_start_main@plt>
   10920:	bl	106c8 <abort@plt>
   10924:	andeq	r0, r1, r0, asr #21
   10928:	andeq	r0, r1, r0, ror #13
   1092c:	andeq	r0, r1, r0, ror #20
   10930:	ldr	r3, [pc, #20]	; 1094c <_start@@Base+0x58>
   10934:	ldr	r2, [pc, #20]	; 10950 <_start@@Base+0x5c>
   10938:	add	r3, pc, r3
   1093c:	ldr	r2, [r3, r2]
   10940:	cmp	r2, #0
   10944:	bxeq	lr
   10948:	b	106a4 <__gmon_start__@plt>
   1094c:	andeq	r0, r1, r0, asr #13
   10950:	andeq	r0, r0, r4, lsr r0
   10954:	ldr	r3, [pc, #28]	; 10978 <_start@@Base+0x84>
   10958:	ldr	r0, [pc, #28]	; 1097c <_start@@Base+0x88>
   1095c:	sub	r3, r3, r0
   10960:	cmp	r3, #6
   10964:	bxls	lr
   10968:	ldr	r3, [pc, #16]	; 10980 <_start@@Base+0x8c>
   1096c:	cmp	r3, #0
   10970:	bxeq	lr
   10974:	bx	r3
   10978:	andeq	r1, r2, r3, asr #32
   1097c:	andeq	r1, r2, r0, asr #32
   10980:	andeq	r0, r0, r0
   10984:	ldr	r1, [pc, #36]	; 109b0 <_start@@Base+0xbc>
   10988:	ldr	r0, [pc, #36]	; 109b4 <_start@@Base+0xc0>
   1098c:	sub	r1, r1, r0
   10990:	asr	r1, r1, #2
   10994:	add	r1, r1, r1, lsr #31
   10998:	asrs	r1, r1, #1
   1099c:	bxeq	lr
   109a0:	ldr	r3, [pc, #16]	; 109b8 <_start@@Base+0xc4>
   109a4:	cmp	r3, #0
   109a8:	bxeq	lr
   109ac:	bx	r3
   109b0:	andeq	r1, r2, r0, asr #32
   109b4:	andeq	r1, r2, r0, asr #32
   109b8:	andeq	r0, r0, r0
   109bc:	push	{r4, lr}
   109c0:	ldr	r4, [pc, #24]	; 109e0 <_start@@Base+0xec>
   109c4:	ldrb	r3, [r4]
   109c8:	cmp	r3, #0
   109cc:	popne	{r4, pc}
   109d0:	bl	10954 <_start@@Base+0x60>
   109d4:	mov	r3, #1
   109d8:	strb	r3, [r4]
   109dc:	pop	{r4, pc}
   109e0:	andeq	r1, r2, r0, asr #32
   109e4:	ldr	r0, [pc, #40]	; 10a14 <_start@@Base+0x120>
   109e8:	ldr	r3, [r0]
   109ec:	cmp	r3, #0
   109f0:	bne	109f8 <_start@@Base+0x104>
   109f4:	b	10984 <_start@@Base+0x90>
   109f8:	ldr	r3, [pc, #24]	; 10a18 <_start@@Base+0x124>
   109fc:	cmp	r3, #0
   10a00:	beq	109f4 <_start@@Base+0x100>
   10a04:	push	{r4, lr}
   10a08:	blx	r3
   10a0c:	pop	{r4, lr}
   10a10:	b	10984 <_start@@Base+0x90>
   10a14:	andeq	r0, r2, r4, lsl pc
   10a18:	andeq	r0, r0, r0

00010a1c <in_array@@Base>:
   10a1c:	cmp	r2, #0
   10a20:	blt	10a50 <in_array@@Base+0x34>
   10a24:	ldr	r3, [r1]
   10a28:	cmp	r0, r3
   10a2c:	beq	10a58 <in_array@@Base+0x3c>
   10a30:	mov	r3, #0
   10a34:	b	10a44 <in_array@@Base+0x28>
   10a38:	ldr	ip, [r1, #4]!
   10a3c:	cmp	ip, r0
   10a40:	beq	10a58 <in_array@@Base+0x3c>
   10a44:	add	r3, r3, #1
   10a48:	cmp	r2, r3
   10a4c:	bge	10a38 <in_array@@Base+0x1c>
   10a50:	mov	r0, #0
   10a54:	bx	lr
   10a58:	mov	r0, #1
   10a5c:	bx	lr

00010a60 <__libc_csu_init@@Base>:
   10a60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a64:	mov	r7, r0
   10a68:	ldr	r6, [pc, #72]	; 10ab8 <__libc_csu_init@@Base+0x58>
   10a6c:	ldr	r5, [pc, #72]	; 10abc <__libc_csu_init@@Base+0x5c>
   10a70:	add	r6, pc, r6
   10a74:	add	r5, pc, r5
   10a78:	sub	r6, r6, r5
   10a7c:	mov	r8, r1
   10a80:	mov	r9, r2
   10a84:	bl	10648 <printf@plt-0x20>
   10a88:	asrs	r6, r6, #2
   10a8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a90:	mov	r4, #0
   10a94:	add	r4, r4, #1
   10a98:	ldr	r3, [r5], #4
   10a9c:	mov	r2, r9
   10aa0:	mov	r1, r8
   10aa4:	mov	r0, r7
   10aa8:	blx	r3
   10aac:	cmp	r6, r4
   10ab0:	bne	10a94 <__libc_csu_init@@Base+0x34>
   10ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ab8:	muleq	r1, r8, r4
   10abc:	muleq	r1, r0, r4

00010ac0 <__libc_csu_fini@@Base>:
   10ac0:	bx	lr

Disassembly of section .fini:

00010ac4 <.fini>:
   10ac4:	push	{r3, lr}
   10ac8:	pop	{r3, pc}
