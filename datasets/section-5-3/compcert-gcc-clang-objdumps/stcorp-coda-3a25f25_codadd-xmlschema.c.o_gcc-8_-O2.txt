
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-xmlschema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_attributes>:
   0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4:	mov	r5, r0
   8:	mov	r0, r1
   c:	strd	r6, [sp, #8]
  10:	str	r8, [sp, #16]
  14:	str	lr, [sp, #20]
  18:	sub	sp, sp, #24
  1c:	mov	r1, sp
  20:	bl	0 <coda_type_get_attributes>
  24:	add	r1, sp, #4
  28:	ldr	r0, [sp]
  2c:	bl	0 <coda_type_get_num_record_fields>
  30:	ldr	r3, [sp, #4]
  34:	cmp	r3, #0
  38:	ble	178 <print_attributes+0x178>
  3c:	movw	r6, #0
  40:	movt	r6, #0
  44:	movw	r8, #0
  48:	movt	r8, #0
  4c:	movw	r7, #0
  50:	movt	r7, #0
  54:	mov	r4, #0
  58:	b	9c <print_attributes+0x9c>
  5c:	movw	r0, #0
  60:	movt	r0, #0
  64:	mov	r3, r5
  68:	mov	r2, #17
  6c:	mov	r1, #1
  70:	bl	0 <fwrite>
  74:	mov	r3, r5
  78:	mov	r1, #1
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	mov	r2, #2
  88:	add	r4, r4, r1
  8c:	bl	0 <fwrite>
  90:	ldr	r3, [sp, #4]
  94:	cmp	r3, r4
  98:	ble	178 <print_attributes+0x178>
  9c:	add	r2, sp, #16
  a0:	mov	r1, r4
  a4:	ldr	r0, [sp]
  a8:	bl	0 <coda_type_get_record_field_real_name>
  ac:	add	r2, sp, #20
  b0:	mov	r1, r4
  b4:	ldr	r0, [sp]
  b8:	bl	0 <coda_type_get_record_field_available_status>
  bc:	add	r2, sp, #12
  c0:	mov	r1, r4
  c4:	ldr	r0, [sp]
  c8:	bl	0 <coda_type_get_record_field_type>
  cc:	add	r1, sp, #8
  d0:	ldr	r0, [sp, #12]
  d4:	bl	0 <coda_type_get_class>
  d8:	mov	r1, r6
  dc:	mov	r0, r5
  e0:	ldr	r2, [sp, #16]
  e4:	bl	0 <fprintf>
  e8:	ldr	r1, [sp, #20]
  ec:	cmp	r1, #1
  f0:	beq	164 <print_attributes+0x164>
  f4:	ldr	r3, [sp, #8]
  f8:	cmp	r3, #3
  fc:	beq	130 <print_attributes+0x130>
 100:	cmp	r3, #4
 104:	beq	5c <print_attributes+0x5c>
 108:	cmp	r3, #2
 10c:	beq	148 <print_attributes+0x148>
 110:	movw	r3, #0
 114:	movt	r3, #0
 118:	movw	r1, #0
 11c:	movt	r1, #0
 120:	movw	r0, #0
 124:	movt	r0, #0
 128:	mov	r2, #82	; 0x52
 12c:	bl	0 <__assert_fail>
 130:	mov	r3, r5
 134:	mov	r2, #16
 138:	mov	r1, #1
 13c:	mov	r0, r7
 140:	bl	0 <fwrite>
 144:	b	74 <print_attributes+0x74>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	mov	r3, r5
 154:	mov	r2, #18
 158:	mov	r1, #1
 15c:	bl	0 <fwrite>
 160:	b	74 <print_attributes+0x74>
 164:	mov	r3, r5
 168:	mov	r2, #15
 16c:	mov	r0, r8
 170:	bl	0 <fwrite>
 174:	b	f4 <print_attributes+0xf4>
 178:	add	sp, sp, #24
 17c:	ldrd	r4, [sp]
 180:	ldrd	r6, [sp, #8]
 184:	ldr	r8, [sp, #16]
 188:	add	sp, sp, #20
 18c:	pop	{pc}		; (ldr pc, [sp], #4)

00000190 <print_xml_element>:
 190:	strd	r4, [sp, #-32]!	; 0xffffffe0
 194:	mov	r4, r0
 198:	strd	r6, [sp, #8]
 19c:	mov	r6, r1
 1a0:	strd	r8, [sp, #16]
 1a4:	mov	r0, r6
 1a8:	str	sl, [sp, #24]
 1ac:	str	lr, [sp, #28]
 1b0:	sub	sp, sp, #32
 1b4:	add	r1, sp, #4
 1b8:	bl	0 <coda_type_get_class>
 1bc:	ldr	r5, [sp, #4]
 1c0:	cmp	r5, #0
 1c4:	bne	4c0 <print_xml_element+0x330>
 1c8:	mov	r3, r4
 1cc:	mov	r2, #29
 1d0:	mov	r1, #1
 1d4:	movw	r0, #0
 1d8:	movt	r0, #0
 1dc:	bl	0 <fwrite>
 1e0:	add	r1, sp, #8
 1e4:	mov	r0, r6
 1e8:	bl	0 <coda_type_get_num_record_fields>
 1ec:	ldr	r3, [sp, #8]
 1f0:	cmp	r3, #0
 1f4:	ble	390 <print_xml_element+0x200>
 1f8:	movw	r7, #0
 1fc:	movt	r7, #0
 200:	movw	r9, #0
 204:	movt	r9, #0
 208:	movw	r8, #0
 20c:	movt	r8, #0
 210:	add	r2, sp, #20
 214:	mov	r1, r5
 218:	mov	r0, r6
 21c:	bl	0 <coda_type_get_record_field_real_name>
 220:	add	r2, sp, #16
 224:	mov	r1, r5
 228:	mov	r0, r6
 22c:	bl	0 <coda_type_get_record_field_type>
 230:	add	r1, sp, #12
 234:	ldr	r0, [sp, #16]
 238:	bl	0 <coda_type_get_class>
 23c:	add	r1, sp, #24
 240:	ldr	r0, [sp, #16]
 244:	bl	0 <coda_type_get_format>
 248:	mov	r1, r7
 24c:	mov	r0, r4
 250:	ldr	r2, [sp, #20]
 254:	bl	0 <fprintf>
 258:	ldr	r1, [sp, #12]
 25c:	cmp	r1, #1
 260:	beq	294 <print_xml_element+0x104>
 264:	cmp	r1, #6
 268:	beq	430 <print_xml_element+0x2a0>
 26c:	cmp	r1, #0
 270:	beq	414 <print_xml_element+0x284>
 274:	sub	r1, r1, #1
 278:	cmp	r1, #3
 27c:	ldrls	pc, [pc, r1, lsl #2]
 280:	b	4dc <print_xml_element+0x34c>
 284:	.word	0x000004b8
 288:	.word	0x000003f4
 28c:	.word	0x000003e8
 290:	.word	0x000002a8
 294:	ldr	r3, [sp, #24]
 298:	cmp	r3, #2
 29c:	beq	45c <print_xml_element+0x2cc>
 2a0:	cmp	r3, #2
 2a4:	beq	49c <print_xml_element+0x30c>
 2a8:	movw	sl, #0
 2ac:	movt	sl, #0
 2b0:	add	r1, sp, #28
 2b4:	ldr	r0, [sp, #16]
 2b8:	bl	0 <coda_type_has_attributes>
 2bc:	ldr	r3, [sp, #28]
 2c0:	cmp	r3, #0
 2c4:	beq	400 <print_xml_element+0x270>
 2c8:	mov	r1, r4
 2cc:	mov	r0, #62	; 0x3e
 2d0:	bl	0 <fputc>
 2d4:	mov	r3, r4
 2d8:	mov	r2, #16
 2dc:	mov	r1, #1
 2e0:	mov	r0, r8
 2e4:	bl	0 <fwrite>
 2e8:	mov	r3, r4
 2ec:	mov	r2, #18
 2f0:	mov	r1, #1
 2f4:	movw	r0, #0
 2f8:	movt	r0, #0
 2fc:	bl	0 <fwrite>
 300:	mov	r2, sl
 304:	movw	r1, #0
 308:	movt	r1, #0
 30c:	mov	r0, r4
 310:	bl	0 <fprintf>
 314:	mov	r0, r4
 318:	ldr	r1, [sp, #16]
 31c:	bl	0 <print_attributes>
 320:	mov	r3, r4
 324:	mov	r2, #15
 328:	mov	r1, #1
 32c:	movw	r0, #0
 330:	movt	r0, #0
 334:	bl	0 <fwrite>
 338:	mov	r3, r4
 33c:	mov	r2, #19
 340:	mov	r1, #1
 344:	movw	r0, #0
 348:	movt	r0, #0
 34c:	bl	0 <fwrite>
 350:	movw	r0, #0
 354:	movt	r0, #0
 358:	mov	r3, r4
 35c:	mov	r2, #17
 360:	mov	r1, #1
 364:	bl	0 <fwrite>
 368:	mov	r3, r4
 36c:	mov	r1, #1
 370:	movw	r0, #0
 374:	movt	r0, #0
 378:	mov	r2, #13
 37c:	add	r5, r5, r1
 380:	bl	0 <fwrite>
 384:	ldr	r3, [sp, #8]
 388:	cmp	r3, r5
 38c:	bgt	210 <print_xml_element+0x80>
 390:	mov	r3, r4
 394:	mov	r2, #14
 398:	mov	r1, #1
 39c:	movw	r0, #0
 3a0:	movt	r0, #0
 3a4:	bl	0 <fwrite>
 3a8:	mov	r1, r6
 3ac:	mov	r0, r4
 3b0:	bl	0 <print_attributes>
 3b4:	mov	r3, r4
 3b8:	mov	r2, #17
 3bc:	mov	r1, #1
 3c0:	movw	r0, #0
 3c4:	movt	r0, #0
 3c8:	bl	0 <fwrite>
 3cc:	add	sp, sp, #32
 3d0:	ldrd	r4, [sp]
 3d4:	ldrd	r6, [sp, #8]
 3d8:	ldrd	r8, [sp, #16]
 3dc:	ldr	sl, [sp, #24]
 3e0:	add	sp, sp, #28
 3e4:	pop	{pc}		; (ldr pc, [sp], #4)
 3e8:	movw	sl, #0
 3ec:	movt	sl, #0
 3f0:	b	2b0 <print_xml_element+0x120>
 3f4:	movw	sl, #0
 3f8:	movt	sl, #0
 3fc:	b	2b0 <print_xml_element+0x120>
 400:	mov	r2, sl
 404:	mov	r1, r9
 408:	mov	r0, r4
 40c:	bl	0 <fprintf>
 410:	b	368 <print_xml_element+0x1d8>
 414:	mov	r1, r4
 418:	mov	r0, #62	; 0x3e
 41c:	bl	0 <fputc>
 420:	mov	r0, r4
 424:	ldr	r1, [sp, #16]
 428:	bl	190 <print_xml_element>
 42c:	b	368 <print_xml_element+0x1d8>
 430:	add	r1, sp, #16
 434:	ldr	r0, [sp, #16]
 438:	bl	0 <coda_type_get_special_base_type>
 43c:	add	r1, sp, #12
 440:	ldr	r0, [sp, #16]
 444:	bl	0 <coda_type_get_class>
 448:	add	r1, sp, #24
 44c:	ldr	r0, [sp, #16]
 450:	bl	0 <coda_type_get_format>
 454:	ldr	r1, [sp, #12]
 458:	b	26c <print_xml_element+0xdc>
 45c:	mov	r3, r4
 460:	mov	r2, #36	; 0x24
 464:	movw	r0, #0
 468:	movt	r0, #0
 46c:	bl	0 <fwrite>
 470:	add	r1, sp, #16
 474:	ldr	r0, [sp, #16]
 478:	bl	0 <coda_type_get_array_base_type>
 47c:	add	r1, sp, #12
 480:	ldr	r0, [sp, #16]
 484:	bl	0 <coda_type_get_class>
 488:	add	r1, sp, #24
 48c:	ldr	r0, [sp, #16]
 490:	bl	0 <coda_type_get_format>
 494:	ldr	r1, [sp, #12]
 498:	b	264 <print_xml_element+0xd4>
 49c:	movw	r1, #0
 4a0:	movt	r1, #0
 4a4:	ldr	r3, [pc, #76]	; 4f8 <print_xml_element+0x368>
 4a8:	movw	r0, #0
 4ac:	movt	r0, #0
 4b0:	mov	r2, #138	; 0x8a
 4b4:	bl	0 <__assert_fail>
 4b8:	ldr	r3, [sp, #24]
 4bc:	b	2a0 <print_xml_element+0x110>
 4c0:	movw	r1, #0
 4c4:	movt	r1, #0
 4c8:	ldr	r3, [pc, #40]	; 4f8 <print_xml_element+0x368>
 4cc:	movw	r0, #0
 4d0:	movt	r0, #0
 4d4:	mov	r2, #96	; 0x60
 4d8:	bl	0 <__assert_fail>
 4dc:	movw	r1, #0
 4e0:	movt	r1, #0
 4e4:	ldr	r3, [pc, #12]	; 4f8 <print_xml_element+0x368>
 4e8:	movw	r0, #0
 4ec:	movt	r0, #0
 4f0:	mov	r2, #151	; 0x97
 4f4:	bl	0 <__assert_fail>
 4f8:	.word	0x00000014

000004fc <generate_xmlschema>:
 4fc:	movw	ip, #0
 500:	movt	ip, #0
 504:	strd	r4, [sp, #-24]!	; 0xffffffe8
 508:	strd	r6, [sp, #8]
 50c:	mov	r7, r0
 510:	mov	r0, r1
 514:	mov	r5, r3
 518:	mov	r6, r2
 51c:	str	r8, [sp, #16]
 520:	str	lr, [sp, #20]
 524:	ldr	r4, [ip]
 528:	bl	0 <coda_data_dictionary_get_product_class>
 52c:	cmp	r0, #0
 530:	beq	750 <generate_xmlschema+0x254>
 534:	mov	r1, r6
 538:	bl	0 <coda_product_class_get_product_type>
 53c:	cmp	r0, #0
 540:	beq	734 <generate_xmlschema+0x238>
 544:	mov	r1, r5
 548:	bl	0 <coda_product_type_get_product_definition_by_version>
 54c:	subs	r6, r0, #0
 550:	beq	6f8 <generate_xmlschema+0x1fc>
 554:	ldr	r3, [r6]
 558:	cmp	r3, #2
 55c:	bne	6d0 <generate_xmlschema+0x1d4>
 560:	ldr	r5, [r6, #28]
 564:	cmp	r5, #0
 568:	beq	6a8 <generate_xmlschema+0x1ac>
 56c:	cmp	r7, #0
 570:	beq	590 <generate_xmlschema+0x94>
 574:	movw	r1, #0
 578:	movt	r1, #0
 57c:	mov	r0, r7
 580:	bl	0 <fopen>
 584:	subs	r4, r0, #0
 588:	beq	76c <generate_xmlschema+0x270>
 58c:	ldr	r5, [r6, #28]
 590:	ldr	r3, [r5, #8]
 594:	cmp	r3, #0
 598:	bne	68c <generate_xmlschema+0x190>
 59c:	ldr	r6, [r5, #48]	; 0x30
 5a0:	cmp	r6, #1
 5a4:	bne	670 <generate_xmlschema+0x174>
 5a8:	mov	r3, r4
 5ac:	mov	r2, #39	; 0x27
 5b0:	mov	r1, r6
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	bl	0 <fwrite>
 5c0:	mov	r3, r4
 5c4:	mov	r2, #56	; 0x38
 5c8:	mov	r1, r6
 5cc:	movw	r0, #0
 5d0:	movt	r0, #0
 5d4:	bl	0 <fwrite>
 5d8:	ldr	r3, [r5, #52]	; 0x34
 5dc:	movw	r1, #0
 5e0:	movt	r1, #0
 5e4:	mov	r0, r4
 5e8:	ldr	r3, [r3]
 5ec:	ldr	r2, [r3, #4]
 5f0:	bl	0 <fprintf>
 5f4:	ldr	r3, [r5, #52]	; 0x34
 5f8:	mov	r0, r4
 5fc:	ldr	r3, [r3]
 600:	ldr	r1, [r3, #8]
 604:	bl	190 <print_xml_element>
 608:	mov	r3, r4
 60c:	mov	r2, #14
 610:	mov	r1, r6
 614:	movw	r0, #0
 618:	movt	r0, #0
 61c:	bl	0 <fwrite>
 620:	mov	r3, r4
 624:	mov	r1, r6
 628:	movw	r0, #0
 62c:	movt	r0, #0
 630:	mov	r2, #13
 634:	bl	0 <fwrite>
 638:	cmp	r7, #0
 63c:	beq	65c <generate_xmlschema+0x160>
 640:	mov	r0, r4
 644:	ldrd	r4, [sp]
 648:	ldrd	r6, [sp, #8]
 64c:	ldr	r8, [sp, #16]
 650:	ldr	lr, [sp, #20]
 654:	add	sp, sp, #24
 658:	b	0 <fclose>
 65c:	ldrd	r4, [sp]
 660:	ldrd	r6, [sp, #8]
 664:	ldr	r8, [sp, #16]
 668:	add	sp, sp, #20
 66c:	pop	{pc}		; (ldr pc, [sp], #4)
 670:	movw	r1, #0
 674:	movt	r1, #0
 678:	ldr	r3, [pc, #272]	; 790 <generate_xmlschema+0x294>
 67c:	movw	r0, #0
 680:	movt	r0, #0
 684:	mov	r2, #231	; 0xe7
 688:	bl	0 <__assert_fail>
 68c:	movw	r1, #0
 690:	movt	r1, #0
 694:	ldr	r3, [pc, #244]	; 790 <generate_xmlschema+0x294>
 698:	movw	r0, #0
 69c:	movt	r0, #0
 6a0:	mov	r2, #229	; 0xe5
 6a4:	bl	0 <__assert_fail>
 6a8:	movw	r3, #0
 6ac:	movt	r3, #0
 6b0:	movw	r0, #0
 6b4:	movt	r0, #0
 6b8:	ldr	r3, [r3]
 6bc:	mov	r2, #49	; 0x31
 6c0:	mov	r1, #1
 6c4:	bl	0 <fwrite>
 6c8:	mov	r0, #1
 6cc:	bl	0 <exit>
 6d0:	movw	r3, #0
 6d4:	movt	r3, #0
 6d8:	movw	r0, #0
 6dc:	movt	r0, #0
 6e0:	ldr	r3, [r3]
 6e4:	mov	r2, #36	; 0x24
 6e8:	mov	r1, #1
 6ec:	bl	0 <fwrite>
 6f0:	mov	r0, #1
 6f4:	bl	0 <exit>
 6f8:	ldr	r3, [pc, #148]	; 794 <generate_xmlschema+0x298>
 6fc:	movw	r1, #0
 700:	movt	r1, #0
 704:	mrc	15, 0, r2, cr13, cr0, {3}
 708:	ldr	r4, [r1]
 70c:	ldr	r3, [pc, r3]
 710:	ldr	r0, [r2, r3]
 714:	bl	0 <coda_errno_to_string>
 718:	mov	r2, r0
 71c:	movw	r1, #0
 720:	movt	r1, #0
 724:	mov	r0, r4
 728:	bl	0 <fprintf>
 72c:	mov	r0, #1
 730:	bl	0 <exit>
 734:	ldr	r3, [pc, #92]	; 798 <generate_xmlschema+0x29c>
 738:	movw	r1, #0
 73c:	movt	r1, #0
 740:	mrc	15, 0, r2, cr13, cr0, {3}
 744:	ldr	r4, [r1]
 748:	ldr	r3, [pc, r3]
 74c:	b	710 <generate_xmlschema+0x214>
 750:	ldr	r3, [pc, #68]	; 79c <generate_xmlschema+0x2a0>
 754:	movw	r1, #0
 758:	movt	r1, #0
 75c:	mrc	15, 0, r2, cr13, cr0, {3}
 760:	ldr	r4, [r1]
 764:	ldr	r3, [pc, r3]
 768:	b	710 <generate_xmlschema+0x214>
 76c:	movw	r3, #0
 770:	movt	r3, #0
 774:	mov	r2, r7
 778:	movw	r1, #0
 77c:	movt	r1, #0
 780:	ldr	r0, [r3]
 784:	bl	0 <fprintf>
 788:	mov	r0, #1
 78c:	bl	0 <exit>
 790:	.word	0x00000028
 794:	.word	0x00000080
 798:	.word	0x00000048
 79c:	.word	0x00000030
