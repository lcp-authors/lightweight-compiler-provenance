
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-80]	; 0xffffffb0
      10:	strd	r2, [fp, #-92]	; 0xffffffa4
      14:	ldr	r3, [fp, #-80]	; 0xffffffb0
      18:	ldr	r3, [r3, #48]	; 0x30
      1c:	cmp	r3, #0
      20:	beq	fc <read_bytes+0xfc>
      24:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      28:	ldrd	r2, [fp, #4]
      2c:	adds	r2, r2, r0
      30:	adc	r3, r3, r1
      34:	ldr	r1, [fp, #-80]	; 0xffffffb0
      38:	ldrd	r0, [r1, #40]	; 0x28
      3c:	cmp	r3, r1
      40:	cmpeq	r2, r0
      44:	bls	d8 <read_bytes+0xd8>
      48:	ldr	r3, [fp, #-80]	; 0xffffffb0
      4c:	ldr	r3, [r3, #16]
      50:	cmp	r3, #0
      54:	beq	68 <read_bytes+0x68>
      58:	ldr	r3, [fp, #-80]	; 0xffffffb0
      5c:	ldr	r3, [r3, #16]
      60:	cmp	r3, #1
      64:	bne	7c <read_bytes+0x7c>
      68:	ldr	r1, [pc, #348]	; 1cc <read_bytes+0x1cc>
      6c:	mvn	r0, #300	; 0x12c
      70:	bl	0 <coda_set_error>
      74:	mvn	r3, #0
      78:	b	1c0 <read_bytes+0x1c0>
      7c:	sub	r3, fp, #28
      80:	mov	r2, r3
      84:	ldrd	r0, [fp, #4]
      88:	bl	0 <coda_str64>
      8c:	sub	r3, fp, #52	; 0x34
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #-92]	; 0xffffffa4
      98:	bl	0 <coda_str64>
      9c:	ldr	r3, [fp, #-80]	; 0xffffffb0
      a0:	ldrd	r0, [r3, #40]	; 0x28
      a4:	sub	r3, fp, #76	; 0x4c
      a8:	mov	r2, r3
      ac:	bl	0 <coda_str64>
      b0:	sub	r1, fp, #52	; 0x34
      b4:	sub	r2, fp, #28
      b8:	sub	r3, fp, #76	; 0x4c
      bc:	str	r3, [sp]
      c0:	mov	r3, r1
      c4:	ldr	r1, [pc, #260]	; 1d0 <read_bytes+0x1d0>
      c8:	mvn	r0, #300	; 0x12c
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r3, #0
      d4:	b	1c0 <read_bytes+0x1c0>
      d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
      dc:	ldr	r2, [r3, #48]	; 0x30
      e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
      e4:	add	r3, r2, r3
      e8:	ldr	r2, [fp, #4]
      ec:	mov	r1, r3
      f0:	ldr	r0, [fp, #12]
      f4:	bl	0 <memcpy>
      f8:	b	1bc <read_bytes+0x1bc>
      fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
     100:	ldr	r3, [r3, #16]
     104:	cmp	r3, #0
     108:	beq	130 <read_bytes+0x130>
     10c:	ldr	r3, [fp, #-80]	; 0xffffffb0
     110:	ldr	r3, [r3, #16]
     114:	cmp	r3, #1
     118:	beq	130 <read_bytes+0x130>
     11c:	ldr	r3, [pc, #176]	; 1d4 <read_bytes+0x1d4>
     120:	mov	r2, #83	; 0x53
     124:	ldr	r1, [pc, #172]	; 1d8 <read_bytes+0x1d8>
     128:	ldr	r0, [pc, #172]	; 1dc <read_bytes+0x1dc>
     12c:	bl	0 <__assert_fail>
     130:	ldrd	r0, [fp, #-92]	; 0xffffffa4
     134:	ldrd	r2, [fp, #4]
     138:	adds	r2, r2, r0
     13c:	adc	r3, r3, r1
     140:	ldr	r1, [fp, #-80]	; 0xffffffb0
     144:	ldrd	r0, [r1, #8]
     148:	cmp	r3, r1
     14c:	cmpeq	r2, r0
     150:	bls	168 <read_bytes+0x168>
     154:	ldr	r1, [pc, #112]	; 1cc <read_bytes+0x1cc>
     158:	mvn	r0, #300	; 0x12c
     15c:	bl	0 <coda_set_error>
     160:	mvn	r3, #0
     164:	b	1c0 <read_bytes+0x1c0>
     168:	ldr	r3, [fp, #-80]	; 0xffffffb0
     16c:	ldr	r0, [r3, #56]	; 0x38
     170:	ldr	r2, [fp, #4]
     174:	ldr	r3, [fp, #-92]	; 0xffffffa4
     178:	ldr	r1, [fp, #12]
     17c:	bl	0 <pread>
     180:	mov	r3, r0
     184:	cmp	r3, #0
     188:	bge	1bc <read_bytes+0x1bc>
     18c:	bl	0 <__errno_location>
     190:	mov	r3, r0
     194:	ldr	r3, [r3]
     198:	mov	r0, r3
     19c:	bl	0 <strerror>
     1a0:	mov	r3, r0
     1a4:	mov	r2, r3
     1a8:	ldr	r1, [pc, #48]	; 1e0 <read_bytes+0x1e0>
     1ac:	mvn	r0, #21
     1b0:	bl	0 <coda_set_error>
     1b4:	mvn	r3, #0
     1b8:	b	1c0 <read_bytes+0x1c0>
     1bc:	mov	r3, #0
     1c0:	mov	r0, r3
     1c4:	sub	sp, fp, #4
     1c8:	pop	{fp, pc}
     1cc:	.word	0x00000000
     1d0:	.word	0x0000002c
     1d4:	.word	0x00000784
     1d8:	.word	0x00000068
     1dc:	.word	0x000000b8
     1e0:	.word	0x00000108

000001e4 <check_definition>:
     1e4:	push	{r4, fp, lr}
     1e8:	add	fp, sp, #8
     1ec:	sub	sp, sp, #148	; 0x94
     1f0:	str	r0, [fp, #-136]	; 0xffffff78
     1f4:	str	r1, [fp, #-140]	; 0xffffff74
     1f8:	str	r2, [fp, #-144]	; 0xffffff70
     1fc:	str	r3, [fp, #-148]	; 0xffffff6c
     200:	ldr	r3, [fp, #-140]	; 0xffffff74
     204:	ldr	r3, [r3]
     208:	cmp	r3, #0
     20c:	bne	218 <check_definition+0x34>
     210:	mov	r3, #0
     214:	b	d1c <check_definition+0xb38>
     218:	sub	r3, fp, #40	; 0x28
     21c:	mov	r1, r3
     220:	ldr	r0, [fp, #-136]	; 0xffffff78
     224:	bl	0 <coda_cursor_get_type_class>
     228:	mov	r3, r0
     22c:	cmp	r3, #0
     230:	beq	23c <check_definition+0x58>
     234:	mvn	r3, #0
     238:	b	d1c <check_definition+0xb38>
     23c:	ldr	r3, [fp, #-140]	; 0xffffff74
     240:	ldr	r3, [r3]
     244:	sub	r2, fp, #36	; 0x24
     248:	mov	r1, r2
     24c:	mov	r0, r3
     250:	bl	0 <coda_type_get_class>
     254:	mov	r3, r0
     258:	cmp	r3, #0
     25c:	beq	268 <check_definition+0x84>
     260:	mvn	r3, #0
     264:	b	d1c <check_definition+0xb38>
     268:	ldr	r2, [fp, #-40]	; 0xffffffd8
     26c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     270:	cmp	r2, r3
     274:	beq	304 <check_definition+0x120>
     278:	ldr	r3, [fp, #-40]	; 0xffffffd8
     27c:	mov	r0, r3
     280:	bl	0 <coda_type_get_class_name>
     284:	mov	r4, r0
     288:	ldr	r3, [fp, #-36]	; 0xffffffdc
     28c:	mov	r0, r3
     290:	bl	0 <coda_type_get_class_name>
     294:	mov	r3, r0
     298:	mov	r2, r4
     29c:	ldr	r1, [pc, #2692]	; d28 <check_definition+0xb44>
     2a0:	ldr	r0, [pc, #2692]	; d2c <check_definition+0xb48>
     2a4:	bl	0 <coda_set_error>
     2a8:	ldr	r3, [pc, #2688]	; d30 <check_definition+0xb4c>
     2ac:	ldr	r3, [pc, r3]
     2b0:	bl	0 <__aeabi_read_tp>
     2b4:	mov	r2, r0
     2b8:	ldr	r3, [r2, r3]
     2bc:	mov	r0, r3
     2c0:	bl	0 <coda_errno_to_string>
     2c4:	mov	r1, r0
     2c8:	ldr	r3, [fp, #-144]	; 0xffffff70
     2cc:	ldr	r2, [fp, #-148]	; 0xffffff6c
     2d0:	ldr	r0, [fp, #-136]	; 0xffffff78
     2d4:	blx	r3
     2d8:	ldr	r3, [pc, #2644]	; d34 <check_definition+0xb50>
     2dc:	ldr	r3, [pc, r3]
     2e0:	bl	0 <__aeabi_read_tp>
     2e4:	mov	r1, r0
     2e8:	mov	r2, #0
     2ec:	str	r2, [r1, r3]
     2f0:	ldr	r3, [fp, #-140]	; 0xffffff74
     2f4:	mov	r2, #0
     2f8:	str	r2, [r3]
     2fc:	mov	r3, #0
     300:	b	d1c <check_definition+0xb38>
     304:	ldr	r3, [fp, #-40]	; 0xffffffd8
     308:	cmp	r3, #6
     30c:	ldrls	pc, [pc, r3, lsl #2]
     310:	b	d18 <check_definition+0xb34>
     314:	.word	0x00000644
     318:	.word	0x00000330
     31c:	.word	0x00000b6c
     320:	.word	0x00000b6c
     324:	.word	0x00000d18
     328:	.word	0x00000d18
     32c:	.word	0x00000c2c
     330:	ldr	r3, [fp, #-140]	; 0xffffff74
     334:	ldr	r3, [r3]
     338:	str	r3, [fp, #-24]	; 0xffffffe8
     33c:	sub	r2, fp, #128	; 0x80
     340:	sub	r3, fp, #44	; 0x2c
     344:	mov	r1, r3
     348:	ldr	r0, [fp, #-136]	; 0xffffff78
     34c:	bl	0 <coda_cursor_get_array_dim>
     350:	mov	r3, r0
     354:	cmp	r3, #0
     358:	beq	364 <check_definition+0x180>
     35c:	mvn	r3, #0
     360:	b	d1c <check_definition+0xb38>
     364:	ldr	r3, [fp, #-24]	; 0xffffffe8
     368:	ldr	r2, [r3, #48]	; 0x30
     36c:	ldr	r3, [fp, #-44]	; 0xffffffd4
     370:	cmp	r2, r3
     374:	beq	3e0 <check_definition+0x1fc>
     378:	ldr	r2, [fp, #-44]	; 0xffffffd4
     37c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     380:	ldr	r3, [r3, #48]	; 0x30
     384:	ldr	r1, [pc, #2476]	; d38 <check_definition+0xb54>
     388:	ldr	r0, [pc, #2460]	; d2c <check_definition+0xb48>
     38c:	bl	0 <coda_set_error>
     390:	ldr	r3, [pc, #2468]	; d3c <check_definition+0xb58>
     394:	ldr	r3, [pc, r3]
     398:	bl	0 <__aeabi_read_tp>
     39c:	mov	r2, r0
     3a0:	ldr	r3, [r2, r3]
     3a4:	mov	r0, r3
     3a8:	bl	0 <coda_errno_to_string>
     3ac:	mov	r1, r0
     3b0:	ldr	r3, [fp, #-144]	; 0xffffff70
     3b4:	ldr	r2, [fp, #-148]	; 0xffffff6c
     3b8:	ldr	r0, [fp, #-136]	; 0xffffff78
     3bc:	blx	r3
     3c0:	ldr	r3, [pc, #2424]	; d40 <check_definition+0xb5c>
     3c4:	ldr	r3, [pc, r3]
     3c8:	bl	0 <__aeabi_read_tp>
     3cc:	mov	r1, r0
     3d0:	mov	r2, #0
     3d4:	str	r2, [r1, r3]
     3d8:	mov	r3, #0
     3dc:	b	d1c <check_definition+0xb38>
     3e0:	mov	r3, #0
     3e4:	str	r3, [fp, #-16]
     3e8:	b	630 <check_definition+0x44c>
     3ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
     3f0:	ldr	r3, [fp, #-16]
     3f4:	add	r3, r3, #12
     3f8:	lsl	r3, r3, #2
     3fc:	add	r3, r2, r3
     400:	ldr	r3, [r3, #4]
     404:	cmp	r3, #0
     408:	blt	4d0 <check_definition+0x2ec>
     40c:	ldr	r3, [fp, #-16]
     410:	lsl	r3, r3, #2
     414:	sub	r2, fp, #12
     418:	add	r3, r2, r3
     41c:	ldr	r2, [r3, #-116]	; 0xffffff8c
     420:	ldr	r1, [fp, #-24]	; 0xffffffe8
     424:	ldr	r3, [fp, #-16]
     428:	add	r3, r3, #12
     42c:	lsl	r3, r3, #2
     430:	add	r3, r1, r3
     434:	ldr	r3, [r3, #4]
     438:	cmp	r2, r3
     43c:	beq	624 <check_definition+0x440>
     440:	ldr	r3, [fp, #-16]
     444:	lsl	r3, r3, #2
     448:	sub	r2, fp, #12
     44c:	add	r3, r2, r3
     450:	ldr	r1, [r3, #-116]	; 0xffffff8c
     454:	ldr	r2, [fp, #-24]	; 0xffffffe8
     458:	ldr	r3, [fp, #-16]
     45c:	add	r3, r3, #12
     460:	lsl	r3, r3, #2
     464:	add	r3, r2, r3
     468:	ldr	r3, [r3, #4]
     46c:	str	r3, [sp]
     470:	mov	r3, r1
     474:	ldr	r2, [fp, #-16]
     478:	ldr	r1, [pc, #2244]	; d44 <check_definition+0xb60>
     47c:	ldr	r0, [pc, #2216]	; d2c <check_definition+0xb48>
     480:	bl	0 <coda_set_error>
     484:	ldr	r3, [pc, #2236]	; d48 <check_definition+0xb64>
     488:	ldr	r3, [pc, r3]
     48c:	bl	0 <__aeabi_read_tp>
     490:	mov	r2, r0
     494:	ldr	r3, [r2, r3]
     498:	mov	r0, r3
     49c:	bl	0 <coda_errno_to_string>
     4a0:	mov	r1, r0
     4a4:	ldr	r3, [fp, #-144]	; 0xffffff70
     4a8:	ldr	r2, [fp, #-148]	; 0xffffff6c
     4ac:	ldr	r0, [fp, #-136]	; 0xffffff78
     4b0:	blx	r3
     4b4:	ldr	r3, [pc, #2192]	; d4c <check_definition+0xb68>
     4b8:	ldr	r3, [pc, r3]
     4bc:	bl	0 <__aeabi_read_tp>
     4c0:	mov	r1, r0
     4c4:	mov	r2, #0
     4c8:	str	r2, [r1, r3]
     4cc:	b	624 <check_definition+0x440>
     4d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4d4:	ldr	r3, [fp, #-16]
     4d8:	add	r3, r3, #20
     4dc:	lsl	r3, r3, #2
     4e0:	add	r3, r2, r3
     4e4:	ldr	r3, [r3, #4]
     4e8:	cmp	r3, #0
     4ec:	beq	624 <check_definition+0x440>
     4f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4f4:	ldr	r3, [fp, #-16]
     4f8:	add	r3, r3, #20
     4fc:	lsl	r3, r3, #2
     500:	add	r3, r2, r3
     504:	ldr	r3, [r3, #4]
     508:	sub	r2, fp, #52	; 0x34
     50c:	ldr	r1, [fp, #-136]	; 0xffffff78
     510:	mov	r0, r3
     514:	bl	0 <coda_expression_eval_integer>
     518:	mov	r3, r0
     51c:	cmp	r3, #0
     520:	beq	57c <check_definition+0x398>
     524:	ldr	r1, [fp, #-16]
     528:	ldr	r0, [pc, #2080]	; d50 <check_definition+0xb6c>
     52c:	bl	0 <coda_add_error_message>
     530:	ldr	r3, [pc, #2076]	; d54 <check_definition+0xb70>
     534:	ldr	r3, [pc, r3]
     538:	bl	0 <__aeabi_read_tp>
     53c:	mov	r2, r0
     540:	ldr	r3, [r2, r3]
     544:	mov	r0, r3
     548:	bl	0 <coda_errno_to_string>
     54c:	mov	r1, r0
     550:	ldr	r3, [fp, #-144]	; 0xffffff70
     554:	ldr	r2, [fp, #-148]	; 0xffffff6c
     558:	ldr	r0, [fp, #-136]	; 0xffffff78
     55c:	blx	r3
     560:	ldr	r3, [pc, #2032]	; d58 <check_definition+0xb74>
     564:	ldr	r3, [pc, r3]
     568:	bl	0 <__aeabi_read_tp>
     56c:	mov	r1, r0
     570:	mov	r2, #0
     574:	str	r2, [r1, r3]
     578:	b	624 <check_definition+0x440>
     57c:	ldr	r3, [fp, #-16]
     580:	lsl	r3, r3, #2
     584:	sub	r2, fp, #12
     588:	add	r3, r2, r3
     58c:	ldr	r3, [r3, #-116]	; 0xffffff8c
     590:	mov	r0, r3
     594:	asr	r1, r0, #31
     598:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     59c:	cmp	r1, r3
     5a0:	cmpeq	r0, r2
     5a4:	beq	624 <check_definition+0x440>
     5a8:	ldr	r3, [fp, #-16]
     5ac:	lsl	r3, r3, #2
     5b0:	sub	r2, fp, #12
     5b4:	add	r3, r2, r3
     5b8:	ldr	r1, [r3, #-116]	; 0xffffff8c
     5bc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
     5c0:	mov	r3, r2
     5c4:	str	r3, [sp]
     5c8:	mov	r3, r1
     5cc:	ldr	r2, [fp, #-16]
     5d0:	ldr	r1, [pc, #1900]	; d44 <check_definition+0xb60>
     5d4:	ldr	r0, [pc, #1872]	; d2c <check_definition+0xb48>
     5d8:	bl	0 <coda_set_error>
     5dc:	ldr	r3, [pc, #1912]	; d5c <check_definition+0xb78>
     5e0:	ldr	r3, [pc, r3]
     5e4:	bl	0 <__aeabi_read_tp>
     5e8:	mov	r2, r0
     5ec:	ldr	r3, [r2, r3]
     5f0:	mov	r0, r3
     5f4:	bl	0 <coda_errno_to_string>
     5f8:	mov	r1, r0
     5fc:	ldr	r3, [fp, #-144]	; 0xffffff70
     600:	ldr	r2, [fp, #-148]	; 0xffffff6c
     604:	ldr	r0, [fp, #-136]	; 0xffffff78
     608:	blx	r3
     60c:	ldr	r3, [pc, #1868]	; d60 <check_definition+0xb7c>
     610:	ldr	r3, [pc, r3]
     614:	bl	0 <__aeabi_read_tp>
     618:	mov	r1, r0
     61c:	mov	r2, #0
     620:	str	r2, [r1, r3]
     624:	ldr	r3, [fp, #-16]
     628:	add	r3, r3, #1
     62c:	str	r3, [fp, #-16]
     630:	ldr	r3, [fp, #-44]	; 0xffffffd4
     634:	ldr	r2, [fp, #-16]
     638:	cmp	r2, r3
     63c:	blt	3ec <check_definition+0x208>
     640:	b	d18 <check_definition+0xb34>
     644:	ldr	r3, [fp, #-140]	; 0xffffff74
     648:	ldr	r3, [r3]
     64c:	str	r3, [fp, #-28]	; 0xffffffe4
     650:	sub	r3, fp, #56	; 0x38
     654:	mov	r1, r3
     658:	ldr	r0, [fp, #-136]	; 0xffffff78
     65c:	bl	0 <coda_cursor_get_type>
     660:	mov	r3, r0
     664:	cmp	r3, #0
     668:	beq	674 <check_definition+0x490>
     66c:	mvn	r3, #0
     670:	b	d1c <check_definition+0xb38>
     674:	mov	r3, #0
     678:	str	r3, [fp, #-20]	; 0xffffffec
     67c:	b	a44 <check_definition+0x860>
     680:	mov	r3, #1
     684:	str	r3, [fp, #-64]	; 0xffffffc0
     688:	mov	r3, #1
     68c:	str	r3, [fp, #-68]	; 0xffffffbc
     690:	ldr	r3, [fp, #-28]	; 0xffffffe4
     694:	ldr	r2, [r3, #52]	; 0x34
     698:	ldr	r3, [fp, #-20]	; 0xffffffec
     69c:	lsl	r3, r3, #2
     6a0:	add	r3, r2, r3
     6a4:	ldr	r3, [r3]
     6a8:	ldr	r3, [r3]
     6ac:	sub	r2, fp, #72	; 0x48
     6b0:	mov	r1, r3
     6b4:	ldr	r0, [fp, #-136]	; 0xffffff78
     6b8:	bl	0 <coda_cursor_get_record_field_index_from_name>
     6bc:	mov	r3, r0
     6c0:	cmp	r3, #0
     6c4:	beq	710 <check_definition+0x52c>
     6c8:	ldr	r3, [pc, #1684]	; d64 <check_definition+0xb80>
     6cc:	ldr	r3, [pc, r3]
     6d0:	bl	0 <__aeabi_read_tp>
     6d4:	mov	r2, r0
     6d8:	ldr	r3, [r2, r3]
     6dc:	cmn	r3, #102	; 0x66
     6e0:	beq	6ec <check_definition+0x508>
     6e4:	mvn	r3, #0
     6e8:	b	d1c <check_definition+0xb38>
     6ec:	ldr	r3, [pc, #1652]	; d68 <check_definition+0xb84>
     6f0:	ldr	r3, [pc, r3]
     6f4:	bl	0 <__aeabi_read_tp>
     6f8:	mov	r1, r0
     6fc:	mov	r2, #0
     700:	str	r2, [r1, r3]
     704:	mov	r3, #0
     708:	str	r3, [fp, #-68]	; 0xffffffbc
     70c:	b	738 <check_definition+0x554>
     710:	ldr	r3, [fp, #-72]	; 0xffffffb8
     714:	sub	r2, fp, #68	; 0x44
     718:	mov	r1, r3
     71c:	ldr	r0, [fp, #-136]	; 0xffffff78
     720:	bl	0 <coda_cursor_get_record_field_available_status>
     724:	mov	r3, r0
     728:	cmp	r3, #0
     72c:	beq	738 <check_definition+0x554>
     730:	mvn	r3, #0
     734:	b	d1c <check_definition+0xb38>
     738:	ldr	r3, [fp, #-28]	; 0xffffffe4
     73c:	ldr	r2, [r3, #52]	; 0x34
     740:	ldr	r3, [fp, #-20]	; 0xffffffec
     744:	lsl	r3, r3, #2
     748:	add	r3, r2, r3
     74c:	ldr	r3, [r3]
     750:	ldrb	r3, [r3, #16]
     754:	cmp	r3, #0
     758:	beq	834 <check_definition+0x650>
     75c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     760:	ldr	r2, [r3, #52]	; 0x34
     764:	ldr	r3, [fp, #-20]	; 0xffffffec
     768:	lsl	r3, r3, #2
     76c:	add	r3, r2, r3
     770:	ldr	r3, [r3]
     774:	ldr	r3, [r3, #20]
     778:	cmp	r3, #0
     77c:	beq	82c <check_definition+0x648>
     780:	ldr	r3, [fp, #-28]	; 0xffffffe4
     784:	ldr	r2, [r3, #52]	; 0x34
     788:	ldr	r3, [fp, #-20]	; 0xffffffec
     78c:	lsl	r3, r3, #2
     790:	add	r3, r2, r3
     794:	ldr	r3, [r3]
     798:	ldr	r3, [r3, #20]
     79c:	sub	r2, fp, #64	; 0x40
     7a0:	ldr	r1, [fp, #-136]	; 0xffffff78
     7a4:	mov	r0, r3
     7a8:	bl	0 <coda_expression_eval_bool>
     7ac:	mov	r3, r0
     7b0:	cmp	r3, #0
     7b4:	beq	834 <check_definition+0x650>
     7b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     7bc:	ldr	r2, [r3, #52]	; 0x34
     7c0:	ldr	r3, [fp, #-20]	; 0xffffffec
     7c4:	lsl	r3, r3, #2
     7c8:	add	r3, r2, r3
     7cc:	ldr	r3, [r3]
     7d0:	ldr	r3, [r3]
     7d4:	mov	r1, r3
     7d8:	ldr	r0, [pc, #1420]	; d6c <check_definition+0xb88>
     7dc:	bl	0 <coda_add_error_message>
     7e0:	ldr	r3, [pc, #1416]	; d70 <check_definition+0xb8c>
     7e4:	ldr	r3, [pc, r3]
     7e8:	bl	0 <__aeabi_read_tp>
     7ec:	mov	r2, r0
     7f0:	ldr	r3, [r2, r3]
     7f4:	mov	r0, r3
     7f8:	bl	0 <coda_errno_to_string>
     7fc:	mov	r1, r0
     800:	ldr	r3, [fp, #-144]	; 0xffffff70
     804:	ldr	r2, [fp, #-148]	; 0xffffff6c
     808:	ldr	r0, [fp, #-136]	; 0xffffff78
     80c:	blx	r3
     810:	ldr	r3, [pc, #1372]	; d74 <check_definition+0xb90>
     814:	ldr	r3, [pc, r3]
     818:	bl	0 <__aeabi_read_tp>
     81c:	mov	r1, r0
     820:	mov	r2, #0
     824:	str	r2, [r1, r3]
     828:	b	834 <check_definition+0x650>
     82c:	mvn	r3, #0
     830:	str	r3, [fp, #-64]	; 0xffffffc0
     834:	ldr	r3, [fp, #-64]	; 0xffffffc0
     838:	cmn	r3, #1
     83c:	beq	8f8 <check_definition+0x714>
     840:	ldr	r2, [fp, #-68]	; 0xffffffbc
     844:	ldr	r3, [fp, #-64]	; 0xffffffc0
     848:	cmp	r2, r3
     84c:	beq	8f8 <check_definition+0x714>
     850:	ldr	r3, [fp, #-28]	; 0xffffffe4
     854:	ldr	r2, [r3, #52]	; 0x34
     858:	ldr	r3, [fp, #-20]	; 0xffffffec
     85c:	lsl	r3, r3, #2
     860:	add	r3, r2, r3
     864:	ldr	r3, [r3]
     868:	ldr	r2, [r3]
     86c:	ldr	r3, [fp, #-68]	; 0xffffffbc
     870:	cmp	r3, #0
     874:	beq	880 <check_definition+0x69c>
     878:	ldr	r1, [pc, #1272]	; d78 <check_definition+0xb94>
     87c:	b	884 <check_definition+0x6a0>
     880:	ldr	r1, [pc, #1268]	; d7c <check_definition+0xb98>
     884:	ldr	r3, [fp, #-64]	; 0xffffffc0
     888:	cmp	r3, #0
     88c:	beq	898 <check_definition+0x6b4>
     890:	ldr	r3, [pc, #1248]	; d78 <check_definition+0xb94>
     894:	b	89c <check_definition+0x6b8>
     898:	ldr	r3, [pc, #1244]	; d7c <check_definition+0xb98>
     89c:	str	r3, [sp]
     8a0:	mov	r3, r1
     8a4:	ldr	r1, [pc, #1236]	; d80 <check_definition+0xb9c>
     8a8:	ldr	r0, [pc, #1148]	; d2c <check_definition+0xb48>
     8ac:	bl	0 <coda_set_error>
     8b0:	ldr	r3, [pc, #1228]	; d84 <check_definition+0xba0>
     8b4:	ldr	r3, [pc, r3]
     8b8:	bl	0 <__aeabi_read_tp>
     8bc:	mov	r2, r0
     8c0:	ldr	r3, [r2, r3]
     8c4:	mov	r0, r3
     8c8:	bl	0 <coda_errno_to_string>
     8cc:	mov	r1, r0
     8d0:	ldr	r3, [fp, #-144]	; 0xffffff70
     8d4:	ldr	r2, [fp, #-148]	; 0xffffff6c
     8d8:	ldr	r0, [fp, #-136]	; 0xffffff78
     8dc:	blx	r3
     8e0:	ldr	r3, [pc, #1184]	; d88 <check_definition+0xba4>
     8e4:	ldr	r3, [pc, r3]
     8e8:	bl	0 <__aeabi_read_tp>
     8ec:	mov	r1, r0
     8f0:	mov	r2, #0
     8f4:	str	r2, [r1, r3]
     8f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
     8fc:	cmp	r3, #0
     900:	beq	a38 <check_definition+0x854>
     904:	ldr	r3, [fp, #-64]	; 0xffffffc0
     908:	cmp	r3, #0
     90c:	beq	a38 <check_definition+0x854>
     910:	ldr	r3, [fp, #-56]	; 0xffffffc8
     914:	ldr	r1, [fp, #-72]	; 0xffffffb8
     918:	sub	r2, fp, #76	; 0x4c
     91c:	mov	r0, r3
     920:	bl	0 <coda_type_get_record_field_real_name>
     924:	mov	r3, r0
     928:	cmp	r3, #0
     92c:	beq	938 <check_definition+0x754>
     930:	mvn	r3, #0
     934:	b	d1c <check_definition+0xb38>
     938:	ldr	r3, [fp, #-28]	; 0xffffffe4
     93c:	ldr	r2, [r3, #52]	; 0x34
     940:	ldr	r3, [fp, #-20]	; 0xffffffec
     944:	lsl	r3, r3, #2
     948:	add	r3, r2, r3
     94c:	ldr	r3, [r3]
     950:	ldr	r3, [r3, #4]
     954:	cmp	r3, #0
     958:	beq	97c <check_definition+0x798>
     95c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     960:	ldr	r2, [r3, #52]	; 0x34
     964:	ldr	r3, [fp, #-20]	; 0xffffffec
     968:	lsl	r3, r3, #2
     96c:	add	r3, r2, r3
     970:	ldr	r3, [r3]
     974:	ldr	r3, [r3, #4]
     978:	b	998 <check_definition+0x7b4>
     97c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     980:	ldr	r2, [r3, #52]	; 0x34
     984:	ldr	r3, [fp, #-20]	; 0xffffffec
     988:	lsl	r3, r3, #2
     98c:	add	r3, r2, r3
     990:	ldr	r3, [r3]
     994:	ldr	r3, [r3]
     998:	str	r3, [fp, #-32]	; 0xffffffe0
     99c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     9a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     9a4:	mov	r0, r3
     9a8:	bl	0 <strcmp>
     9ac:	mov	r3, r0
     9b0:	cmp	r3, #0
     9b4:	beq	a38 <check_definition+0x854>
     9b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9bc:	ldr	r2, [r3, #52]	; 0x34
     9c0:	ldr	r3, [fp, #-20]	; 0xffffffec
     9c4:	lsl	r3, r3, #2
     9c8:	add	r3, r2, r3
     9cc:	ldr	r3, [r3]
     9d0:	ldr	r2, [r3]
     9d4:	ldr	r1, [fp, #-76]	; 0xffffffb4
     9d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9dc:	str	r3, [sp]
     9e0:	mov	r3, r1
     9e4:	ldr	r1, [pc, #928]	; d8c <check_definition+0xba8>
     9e8:	ldr	r0, [pc, #828]	; d2c <check_definition+0xb48>
     9ec:	bl	0 <coda_set_error>
     9f0:	ldr	r3, [pc, #920]	; d90 <check_definition+0xbac>
     9f4:	ldr	r3, [pc, r3]
     9f8:	bl	0 <__aeabi_read_tp>
     9fc:	mov	r2, r0
     a00:	ldr	r3, [r2, r3]
     a04:	mov	r0, r3
     a08:	bl	0 <coda_errno_to_string>
     a0c:	mov	r1, r0
     a10:	ldr	r3, [fp, #-144]	; 0xffffff70
     a14:	ldr	r2, [fp, #-148]	; 0xffffff6c
     a18:	ldr	r0, [fp, #-136]	; 0xffffff78
     a1c:	blx	r3
     a20:	ldr	r3, [pc, #876]	; d94 <check_definition+0xbb0>
     a24:	ldr	r3, [pc, r3]
     a28:	bl	0 <__aeabi_read_tp>
     a2c:	mov	r1, r0
     a30:	mov	r2, #0
     a34:	str	r2, [r1, r3]
     a38:	ldr	r3, [fp, #-20]	; 0xffffffec
     a3c:	add	r3, r3, #1
     a40:	str	r3, [fp, #-20]	; 0xffffffec
     a44:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a48:	ldr	r2, [r3, #48]	; 0x30
     a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
     a50:	cmp	r2, r3
     a54:	bgt	680 <check_definition+0x49c>
     a58:	sub	r3, fp, #60	; 0x3c
     a5c:	mov	r1, r3
     a60:	ldr	r0, [fp, #-136]	; 0xffffff78
     a64:	bl	0 <coda_cursor_get_num_elements>
     a68:	mov	r3, r0
     a6c:	cmp	r3, #0
     a70:	beq	a7c <check_definition+0x898>
     a74:	mvn	r3, #0
     a78:	b	d1c <check_definition+0xb38>
     a7c:	mov	r3, #0
     a80:	str	r3, [fp, #-20]	; 0xffffffec
     a84:	b	b58 <check_definition+0x974>
     a88:	ldr	r3, [fp, #-56]	; 0xffffffc8
     a8c:	sub	r2, fp, #80	; 0x50
     a90:	ldr	r1, [fp, #-20]	; 0xffffffec
     a94:	mov	r0, r3
     a98:	bl	0 <coda_type_get_record_field_name>
     a9c:	mov	r3, r0
     aa0:	cmp	r3, #0
     aa4:	beq	ab0 <check_definition+0x8cc>
     aa8:	mvn	r3, #0
     aac:	b	d1c <check_definition+0xb38>
     ab0:	ldr	r3, [fp, #-140]	; 0xffffff74
     ab4:	ldr	r3, [r3]
     ab8:	ldr	r1, [fp, #-80]	; 0xffffffb0
     abc:	sub	r2, fp, #84	; 0x54
     ac0:	mov	r0, r3
     ac4:	bl	0 <coda_type_get_record_field_index_from_name>
     ac8:	mov	r3, r0
     acc:	cmp	r3, #0
     ad0:	beq	b4c <check_definition+0x968>
     ad4:	ldr	r3, [pc, #700]	; d98 <check_definition+0xbb4>
     ad8:	ldr	r3, [pc, r3]
     adc:	bl	0 <__aeabi_read_tp>
     ae0:	mov	r2, r0
     ae4:	ldr	r3, [r2, r3]
     ae8:	cmn	r3, #102	; 0x66
     aec:	bne	b4c <check_definition+0x968>
     af0:	ldr	r3, [fp, #-80]	; 0xffffffb0
     af4:	mov	r2, r3
     af8:	ldr	r1, [pc, #668]	; d9c <check_definition+0xbb8>
     afc:	ldr	r0, [pc, #552]	; d2c <check_definition+0xb48>
     b00:	bl	0 <coda_set_error>
     b04:	ldr	r3, [pc, #660]	; da0 <check_definition+0xbbc>
     b08:	ldr	r3, [pc, r3]
     b0c:	bl	0 <__aeabi_read_tp>
     b10:	mov	r2, r0
     b14:	ldr	r3, [r2, r3]
     b18:	mov	r0, r3
     b1c:	bl	0 <coda_errno_to_string>
     b20:	mov	r1, r0
     b24:	ldr	r3, [fp, #-144]	; 0xffffff70
     b28:	ldr	r2, [fp, #-148]	; 0xffffff6c
     b2c:	ldr	r0, [fp, #-136]	; 0xffffff78
     b30:	blx	r3
     b34:	ldr	r3, [pc, #616]	; da4 <check_definition+0xbc0>
     b38:	ldr	r3, [pc, r3]
     b3c:	bl	0 <__aeabi_read_tp>
     b40:	mov	r1, r0
     b44:	mov	r2, #0
     b48:	str	r2, [r1, r3]
     b4c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b50:	add	r3, r3, #1
     b54:	str	r3, [fp, #-20]	; 0xffffffec
     b58:	ldr	r3, [fp, #-60]	; 0xffffffc4
     b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
     b60:	cmp	r2, r3
     b64:	blt	a88 <check_definition+0x8a4>
     b68:	b	d18 <check_definition+0xb34>
     b6c:	sub	r3, fp, #88	; 0x58
     b70:	mov	r1, r3
     b74:	ldr	r0, [fp, #-136]	; 0xffffff78
     b78:	bl	0 <coda_cursor_get_read_type>
     b7c:	mov	r3, r0
     b80:	cmp	r3, #0
     b84:	beq	b90 <check_definition+0x9ac>
     b88:	mvn	r3, #0
     b8c:	b	d1c <check_definition+0xb38>
     b90:	ldr	r3, [fp, #-140]	; 0xffffff74
     b94:	ldr	r3, [r3]
     b98:	ldr	r2, [r3, #12]
     b9c:	ldr	r3, [fp, #-88]	; 0xffffffa8
     ba0:	cmp	r2, r3
     ba4:	beq	d14 <check_definition+0xb30>
     ba8:	ldr	r3, [fp, #-88]	; 0xffffffa8
     bac:	mov	r0, r3
     bb0:	bl	0 <coda_type_get_native_type_name>
     bb4:	mov	r4, r0
     bb8:	ldr	r3, [fp, #-140]	; 0xffffff74
     bbc:	ldr	r3, [r3]
     bc0:	ldr	r3, [r3, #12]
     bc4:	mov	r0, r3
     bc8:	bl	0 <coda_type_get_native_type_name>
     bcc:	mov	r3, r0
     bd0:	mov	r2, r4
     bd4:	ldr	r1, [pc, #460]	; da8 <check_definition+0xbc4>
     bd8:	ldr	r0, [pc, #332]	; d2c <check_definition+0xb48>
     bdc:	bl	0 <coda_set_error>
     be0:	ldr	r3, [pc, #452]	; dac <check_definition+0xbc8>
     be4:	ldr	r3, [pc, r3]
     be8:	bl	0 <__aeabi_read_tp>
     bec:	mov	r2, r0
     bf0:	ldr	r3, [r2, r3]
     bf4:	mov	r0, r3
     bf8:	bl	0 <coda_errno_to_string>
     bfc:	mov	r1, r0
     c00:	ldr	r3, [fp, #-144]	; 0xffffff70
     c04:	ldr	r2, [fp, #-148]	; 0xffffff6c
     c08:	ldr	r0, [fp, #-136]	; 0xffffff78
     c0c:	blx	r3
     c10:	ldr	r3, [pc, #408]	; db0 <check_definition+0xbcc>
     c14:	ldr	r3, [pc, r3]
     c18:	bl	0 <__aeabi_read_tp>
     c1c:	mov	r1, r0
     c20:	mov	r2, #0
     c24:	str	r2, [r1, r3]
     c28:	b	d14 <check_definition+0xb30>
     c2c:	sub	r3, fp, #92	; 0x5c
     c30:	mov	r1, r3
     c34:	ldr	r0, [fp, #-136]	; 0xffffff78
     c38:	bl	0 <coda_cursor_get_special_type>
     c3c:	mov	r3, r0
     c40:	cmp	r3, #0
     c44:	beq	c50 <check_definition+0xa6c>
     c48:	mvn	r3, #0
     c4c:	b	d1c <check_definition+0xb38>
     c50:	ldr	r3, [fp, #-140]	; 0xffffff74
     c54:	ldr	r3, [r3]
     c58:	sub	r2, fp, #96	; 0x60
     c5c:	mov	r1, r2
     c60:	mov	r0, r3
     c64:	bl	0 <coda_type_get_special_type>
     c68:	mov	r3, r0
     c6c:	cmp	r3, #0
     c70:	beq	c7c <check_definition+0xa98>
     c74:	mvn	r3, #0
     c78:	b	d1c <check_definition+0xb38>
     c7c:	ldr	r2, [fp, #-92]	; 0xffffffa4
     c80:	ldr	r3, [fp, #-96]	; 0xffffffa0
     c84:	cmp	r2, r3
     c88:	beq	d04 <check_definition+0xb20>
     c8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
     c90:	mov	r0, r3
     c94:	bl	0 <coda_type_get_special_type_name>
     c98:	mov	r4, r0
     c9c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     ca0:	mov	r0, r3
     ca4:	bl	0 <coda_type_get_special_type_name>
     ca8:	mov	r3, r0
     cac:	mov	r2, r4
     cb0:	ldr	r1, [pc, #252]	; db4 <check_definition+0xbd0>
     cb4:	ldr	r0, [pc, #112]	; d2c <check_definition+0xb48>
     cb8:	bl	0 <coda_set_error>
     cbc:	ldr	r3, [pc, #244]	; db8 <check_definition+0xbd4>
     cc0:	ldr	r3, [pc, r3]
     cc4:	bl	0 <__aeabi_read_tp>
     cc8:	mov	r2, r0
     ccc:	ldr	r3, [r2, r3]
     cd0:	mov	r0, r3
     cd4:	bl	0 <coda_errno_to_string>
     cd8:	mov	r1, r0
     cdc:	ldr	r3, [fp, #-144]	; 0xffffff70
     ce0:	ldr	r2, [fp, #-148]	; 0xffffff6c
     ce4:	ldr	r0, [fp, #-136]	; 0xffffff78
     ce8:	blx	r3
     cec:	ldr	r3, [pc, #200]	; dbc <check_definition+0xbd8>
     cf0:	ldr	r3, [pc, r3]
     cf4:	bl	0 <__aeabi_read_tp>
     cf8:	mov	r1, r0
     cfc:	mov	r2, #0
     d00:	str	r2, [r1, r3]
     d04:	ldr	r3, [fp, #-140]	; 0xffffff74
     d08:	mov	r2, #0
     d0c:	str	r2, [r3]
     d10:	b	d18 <check_definition+0xb34>
     d14:	nop			; (mov r0, r0)
     d18:	mov	r3, #0
     d1c:	mov	r0, r3
     d20:	sub	sp, fp, #8
     d24:	pop	{r4, fp, pc}
     d28:	.word	0x00000128
     d2c:	.word	0xfffffed4
     d30:	.word	0x00000a7c
     d34:	.word	0x00000a50
     d38:	.word	0x00000154
     d3c:	.word	0x000009a0
     d40:	.word	0x00000974
     d44:	.word	0x00000190
     d48:	.word	0x000008b8
     d4c:	.word	0x0000088c
     d50:	.word	0x000001c8
     d54:	.word	0x00000818
     d58:	.word	0x000007ec
     d5c:	.word	0x00000774
     d60:	.word	0x00000748
     d64:	.word	0x00000690
     d68:	.word	0x00000670
     d6c:	.word	0x00000204
     d70:	.word	0x00000584
     d74:	.word	0x00000558
     d78:	.word	0x0000024c
     d7c:	.word	0x00000258
     d80:	.word	0x00000264
     d84:	.word	0x000004c8
     d88:	.word	0x0000049c
     d8c:	.word	0x000002a0
     d90:	.word	0x00000394
     d94:	.word	0x00000368
     d98:	.word	0x000002b8
     d9c:	.word	0x000002e0
     da0:	.word	0x00000290
     da4:	.word	0x00000264
     da8:	.word	0x0000032c
     dac:	.word	0x000001c0
     db0:	.word	0x00000194
     db4:	.word	0x0000035c
     db8:	.word	0x000000f0
     dbc:	.word	0x000000c4

00000dc0 <check_data>:
     dc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     dc4:	add	fp, sp, #28
     dc8:	sub	sp, sp, #1168	; 0x490
     dcc:	sub	sp, sp, #8
     dd0:	str	r0, [fp, #-1136]	; 0xfffffb90
     dd4:	str	r1, [fp, #-1140]	; 0xfffffb8c
     dd8:	str	r2, [fp, #-1144]	; 0xfffffb88
     ddc:	str	r3, [fp, #-1148]	; 0xfffffb84
     de0:	mov	r3, #0
     de4:	str	r3, [fp, #-32]	; 0xffffffe0
     de8:	ldr	r3, [fp, #4]
     dec:	cmp	r3, #0
     df0:	bne	e08 <check_data+0x48>
     df4:	ldr	r3, [pc, #3764]	; 1cb0 <check_data+0xef0>
     df8:	ldr	r2, [pc, #3628]	; 1c2c <check_data+0xe6c>
     dfc:	ldr	r1, [pc, #3772]	; 1cc0 <check_data+0xf00>
     e00:	ldr	r0, [pc, #3624]	; 1c30 <check_data+0xe70>
     e04:	bl	0 <__assert_fail>
     e08:	sub	r3, fp, #108	; 0x6c
     e0c:	mov	r1, r3
     e10:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     e14:	bl	0 <coda_cursor_get_type>
     e18:	mov	r3, r0
     e1c:	cmp	r3, #0
     e20:	beq	e2c <check_data+0x6c>
     e24:	mvn	r3, #0
     e28:	b	23b8 <check_data+0x15f8>
     e2c:	ldr	r2, [fp, #-108]	; 0xffffff94
     e30:	sub	r3, fp, #100	; 0x64
     e34:	mov	r1, r3
     e38:	mov	r0, r2
     e3c:	bl	0 <coda_type_get_class>
     e40:	mov	r3, r0
     e44:	cmp	r3, #0
     e48:	beq	e54 <check_data+0x94>
     e4c:	mvn	r3, #0
     e50:	b	23b8 <check_data+0x15f8>
     e54:	ldr	r3, [fp, #12]
     e58:	ldr	r2, [fp, #8]
     e5c:	ldr	r1, [fp, #-1140]	; 0xfffffb8c
     e60:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     e64:	bl	1e4 <check_definition>
     e68:	mov	r3, r0
     e6c:	cmp	r3, #0
     e70:	beq	e7c <check_data+0xbc>
     e74:	mvn	r3, #0
     e78:	b	23b8 <check_data+0x15f8>
     e7c:	ldr	r3, [fp, #-1148]	; 0xfffffb84
     e80:	cmp	r3, #0
     e84:	beq	eec <check_data+0x12c>
     e88:	ldr	r3, [fp, #-100]	; 0xffffff9c
     e8c:	cmp	r3, #6
     e90:	ldrls	pc, [pc, r3, lsl #2]
     e94:	b	eec <check_data+0x12c>
     e98:	.word	0x00000eb4
     e9c:	.word	0x00000eb4
     ea0:	.word	0x00000ec8
     ea4:	.word	0x00000ec8
     ea8:	.word	0x00000ec8
     eac:	.word	0x00000ec8
     eb0:	.word	0x00000eb4
     eb4:	ldr	r1, [fp, #4]
     eb8:	mov	r2, #0
     ebc:	mov	r3, #0
     ec0:	strd	r2, [r1]
     ec4:	b	eec <check_data+0x12c>
     ec8:	ldr	r1, [fp, #4]
     ecc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     ed0:	bl	0 <coda_cursor_get_bit_size>
     ed4:	mov	r3, r0
     ed8:	cmp	r3, #0
     edc:	beq	ee8 <check_data+0x128>
     ee0:	mvn	r3, #0
     ee4:	b	23b8 <check_data+0x15f8>
     ee8:	nop			; (mov r0, r0)
     eec:	ldr	r3, [fp, #-1144]	; 0xfffffb88
     ef0:	cmp	r3, #0
     ef4:	beq	16b8 <check_data+0x8f8>
     ef8:	ldr	r3, [fp, #-100]	; 0xffffff9c
     efc:	cmp	r3, #6
     f00:	ldrls	pc, [pc, r3, lsl #2]
     f04:	b	16b8 <check_data+0x8f8>
     f08:	.word	0x000016b8
     f0c:	.word	0x000016b8
     f10:	.word	0x00000f24
     f14:	.word	0x00000f24
     f18:	.word	0x00000fd0
     f1c:	.word	0x00001328
     f20:	.word	0x000015c0
     f24:	sub	r3, fp, #116	; 0x74
     f28:	mov	r1, r3
     f2c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     f30:	bl	0 <coda_cursor_read_double>
     f34:	mov	r3, r0
     f38:	cmp	r3, #0
     f3c:	beq	169c <check_data+0x8dc>
     f40:	ldr	r2, [pc, #3308]	; 1c34 <check_data+0xe74>
     f44:	ldr	r2, [pc, r2]
     f48:	bl	0 <__aeabi_read_tp>
     f4c:	mov	r3, r0
     f50:	ldr	r3, [r3, r2]
     f54:	cmn	r3, #300	; 0x12c
     f58:	beq	f9c <check_data+0x1dc>
     f5c:	ldr	r2, [pc, #3284]	; 1c38 <check_data+0xe78>
     f60:	ldr	r2, [pc, r2]
     f64:	bl	0 <__aeabi_read_tp>
     f68:	mov	r3, r0
     f6c:	ldr	r3, [r3, r2]
     f70:	cmn	r3, #103	; 0x67
     f74:	beq	f9c <check_data+0x1dc>
     f78:	ldr	r2, [pc, #3260]	; 1c3c <check_data+0xe7c>
     f7c:	ldr	r2, [pc, r2]
     f80:	bl	0 <__aeabi_read_tp>
     f84:	mov	r3, r0
     f88:	ldr	r3, [r3, r2]
     f8c:	cmn	r3, #104	; 0x68
     f90:	beq	f9c <check_data+0x1dc>
     f94:	mvn	r3, #0
     f98:	b	23b8 <check_data+0x15f8>
     f9c:	ldr	r2, [pc, #3228]	; 1c40 <check_data+0xe80>
     fa0:	ldr	r2, [pc, r2]
     fa4:	bl	0 <__aeabi_read_tp>
     fa8:	mov	r3, r0
     fac:	ldr	r3, [r3, r2]
     fb0:	mov	r0, r3
     fb4:	bl	0 <coda_errno_to_string>
     fb8:	mov	r1, r0
     fbc:	ldr	r3, [fp, #8]
     fc0:	ldr	r2, [fp, #12]
     fc4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     fc8:	blx	r3
     fcc:	b	169c <check_data+0x8dc>
     fd0:	mov	r3, #0
     fd4:	str	r3, [fp, #-36]	; 0xffffffdc
     fd8:	sub	r3, fp, #120	; 0x78
     fdc:	mov	r1, r3
     fe0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
     fe4:	bl	0 <coda_cursor_get_string_length>
     fe8:	mov	r3, r0
     fec:	cmp	r3, #0
     ff0:	beq	108c <check_data+0x2cc>
     ff4:	ldr	r2, [pc, #3144]	; 1c44 <check_data+0xe84>
     ff8:	ldr	r2, [pc, r2]
     ffc:	bl	0 <__aeabi_read_tp>
    1000:	mov	r3, r0
    1004:	ldr	r3, [r3, r2]
    1008:	cmn	r3, #300	; 0x12c
    100c:	beq	1050 <check_data+0x290>
    1010:	ldr	r2, [pc, #3120]	; 1c48 <check_data+0xe88>
    1014:	ldr	r2, [pc, r2]
    1018:	bl	0 <__aeabi_read_tp>
    101c:	mov	r3, r0
    1020:	ldr	r3, [r3, r2]
    1024:	cmn	r3, #103	; 0x67
    1028:	beq	1050 <check_data+0x290>
    102c:	ldr	r2, [pc, #3096]	; 1c4c <check_data+0xe8c>
    1030:	ldr	r2, [pc, r2]
    1034:	bl	0 <__aeabi_read_tp>
    1038:	mov	r3, r0
    103c:	ldr	r3, [r3, r2]
    1040:	cmn	r3, #104	; 0x68
    1044:	beq	1050 <check_data+0x290>
    1048:	mvn	r3, #0
    104c:	b	23b8 <check_data+0x15f8>
    1050:	ldr	r2, [pc, #3064]	; 1c50 <check_data+0xe90>
    1054:	ldr	r2, [pc, r2]
    1058:	bl	0 <__aeabi_read_tp>
    105c:	mov	r3, r0
    1060:	ldr	r3, [r3, r2]
    1064:	mov	r0, r3
    1068:	bl	0 <coda_errno_to_string>
    106c:	mov	r1, r0
    1070:	ldr	r3, [fp, #8]
    1074:	ldr	r2, [fp, #12]
    1078:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    107c:	blx	r3
    1080:	mov	r3, #1
    1084:	str	r3, [fp, #-32]	; 0xffffffe0
    1088:	b	16b8 <check_data+0x8f8>
    108c:	ldr	r3, [fp, #-120]	; 0xffffff88
    1090:	cmp	r3, #0
    1094:	bge	10bc <check_data+0x2fc>
    1098:	ldr	r3, [fp, #8]
    109c:	ldr	r2, [fp, #12]
    10a0:	ldr	r1, [pc, #2988]	; 1c54 <check_data+0xe94>
    10a4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    10a8:	blx	r3
    10ac:	mov	r3, #1
    10b0:	str	r3, [fp, #-32]	; 0xffffffe0
    10b4:	nop			; (mov r0, r0)
    10b8:	b	16b8 <check_data+0x8f8>
    10bc:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    10c0:	ldr	r3, [r3]
    10c4:	cmp	r3, #0
    10c8:	beq	10d8 <check_data+0x318>
    10cc:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    10d0:	ldr	r0, [r3]
    10d4:	b	10dc <check_data+0x31c>
    10d8:	ldr	r0, [fp, #-108]	; 0xffffff94
    10dc:	sub	r2, fp, #128	; 0x80
    10e0:	sub	r3, fp, #124	; 0x7c
    10e4:	mov	r1, r3
    10e8:	bl	0 <coda_type_get_fixed_value>
    10ec:	mov	r3, r0
    10f0:	cmp	r3, #0
    10f4:	beq	1100 <check_data+0x340>
    10f8:	mvn	r3, #0
    10fc:	b	23b8 <check_data+0x15f8>
    1100:	ldr	r3, [fp, #-120]	; 0xffffff88
    1104:	cmp	r3, #0
    1108:	ble	118c <check_data+0x3cc>
    110c:	ldr	r3, [fp, #-120]	; 0xffffff88
    1110:	add	r3, r3, #1
    1114:	mov	r0, r3
    1118:	bl	0 <malloc>
    111c:	mov	r3, r0
    1120:	str	r3, [fp, #-36]	; 0xffffffdc
    1124:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1128:	cmp	r3, #0
    112c:	bne	1158 <check_data+0x398>
    1130:	ldr	r3, [fp, #-120]	; 0xffffff88
    1134:	add	r2, r3, #1
    1138:	ldr	r3, [pc, #2840]	; 1c58 <check_data+0xe98>
    113c:	str	r3, [sp]
    1140:	ldr	r3, [pc, #2936]	; 1cc0 <check_data+0xf00>
    1144:	ldr	r1, [pc, #2936]	; 1cc4 <check_data+0xf04>
    1148:	mvn	r0, #0
    114c:	bl	0 <coda_set_error>
    1150:	mvn	r3, #0
    1154:	b	23b8 <check_data+0x15f8>
    1158:	ldr	r3, [fp, #-120]	; 0xffffff88
    115c:	add	r3, r3, #1
    1160:	mov	r2, r3
    1164:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1168:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    116c:	bl	0 <coda_cursor_read_string>
    1170:	mov	r3, r0
    1174:	cmp	r3, #0
    1178:	beq	118c <check_data+0x3cc>
    117c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1180:	bl	0 <free>
    1184:	mvn	r3, #0
    1188:	b	23b8 <check_data+0x15f8>
    118c:	ldr	r3, [fp, #-124]	; 0xffffff84
    1190:	cmp	r3, #0
    1194:	beq	1200 <check_data+0x440>
    1198:	ldr	r2, [fp, #-120]	; 0xffffff88
    119c:	ldr	r3, [fp, #-128]	; 0xffffff80
    11a0:	cmp	r2, r3
    11a4:	beq	11c0 <check_data+0x400>
    11a8:	ldr	r3, [fp, #8]
    11ac:	ldr	r2, [fp, #12]
    11b0:	ldr	r1, [pc, #2724]	; 1c5c <check_data+0xe9c>
    11b4:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    11b8:	blx	r3
    11bc:	b	1200 <check_data+0x440>
    11c0:	ldr	r3, [fp, #-120]	; 0xffffff88
    11c4:	cmp	r3, #0
    11c8:	ble	1200 <check_data+0x440>
    11cc:	ldr	r1, [fp, #-124]	; 0xffffff84
    11d0:	ldr	r3, [fp, #-128]	; 0xffffff80
    11d4:	mov	r2, r3
    11d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    11dc:	bl	0 <memcmp>
    11e0:	mov	r3, r0
    11e4:	cmp	r3, #0
    11e8:	beq	1200 <check_data+0x440>
    11ec:	ldr	r3, [fp, #8]
    11f0:	ldr	r2, [fp, #12]
    11f4:	ldr	r1, [pc, #2660]	; 1c60 <check_data+0xea0>
    11f8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    11fc:	blx	r3
    1200:	ldr	r3, [fp, #-108]	; 0xffffff94
    1204:	ldr	r3, [r3, #44]	; 0x2c
    1208:	cmp	r3, #1
    120c:	bne	1310 <check_data+0x550>
    1210:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1214:	ldr	r3, [r3]
    1218:	ldr	r3, [r3, #60]	; 0x3c
    121c:	cmp	r3, #3
    1220:	ldrls	pc, [pc, r3, lsl #2]
    1224:	b	1310 <check_data+0x550>
    1228:	.word	0x000012e8
    122c:	.word	0x00001238
    1230:	.word	0x0000126c
    1234:	.word	0x000012a0
    1238:	ldr	r3, [fp, #-120]	; 0xffffff88
    123c:	cmp	r3, #1
    1240:	bne	1254 <check_data+0x494>
    1244:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1248:	ldrb	r3, [r3]
    124c:	cmp	r3, #10
    1250:	beq	12fc <check_data+0x53c>
    1254:	ldr	r3, [fp, #8]
    1258:	ldr	r2, [fp, #12]
    125c:	ldr	r1, [pc, #2560]	; 1c64 <check_data+0xea4>
    1260:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1264:	blx	r3
    1268:	b	12fc <check_data+0x53c>
    126c:	ldr	r3, [fp, #-120]	; 0xffffff88
    1270:	cmp	r3, #1
    1274:	bne	1288 <check_data+0x4c8>
    1278:	ldr	r3, [fp, #-36]	; 0xffffffdc
    127c:	ldrb	r3, [r3]
    1280:	cmp	r3, #13
    1284:	beq	1304 <check_data+0x544>
    1288:	ldr	r3, [fp, #8]
    128c:	ldr	r2, [fp, #12]
    1290:	ldr	r1, [pc, #2512]	; 1c68 <check_data+0xea8>
    1294:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1298:	blx	r3
    129c:	b	1304 <check_data+0x544>
    12a0:	ldr	r3, [fp, #-120]	; 0xffffff88
    12a4:	cmp	r3, #2
    12a8:	bne	12d0 <check_data+0x510>
    12ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12b0:	ldrb	r3, [r3]
    12b4:	cmp	r3, #13
    12b8:	bne	12d0 <check_data+0x510>
    12bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    12c0:	add	r3, r3, #1
    12c4:	ldrb	r3, [r3]
    12c8:	cmp	r3, #10
    12cc:	beq	130c <check_data+0x54c>
    12d0:	ldr	r3, [fp, #8]
    12d4:	ldr	r2, [fp, #12]
    12d8:	ldr	r1, [pc, #2444]	; 1c6c <check_data+0xeac>
    12dc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    12e0:	blx	r3
    12e4:	b	130c <check_data+0x54c>
    12e8:	ldr	r3, [pc, #2496]	; 1cb0 <check_data+0xef0>
    12ec:	ldr	r2, [pc, #2428]	; 1c70 <check_data+0xeb0>
    12f0:	ldr	r1, [pc, #2504]	; 1cc0 <check_data+0xf00>
    12f4:	ldr	r0, [pc, #2424]	; 1c74 <check_data+0xeb4>
    12f8:	bl	0 <__assert_fail>
    12fc:	nop			; (mov r0, r0)
    1300:	b	1310 <check_data+0x550>
    1304:	nop			; (mov r0, r0)
    1308:	b	1310 <check_data+0x550>
    130c:	nop			; (mov r0, r0)
    1310:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1314:	cmp	r3, #0
    1318:	beq	16a4 <check_data+0x8e4>
    131c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1320:	bl	0 <free>
    1324:	b	16a4 <check_data+0x8e4>
    1328:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    132c:	cmp	r3, #0
    1330:	bne	13e4 <check_data+0x624>
    1334:	ldr	r1, [fp, #4]
    1338:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    133c:	bl	0 <coda_cursor_get_bit_size>
    1340:	mov	r3, r0
    1344:	cmp	r3, #0
    1348:	beq	13e4 <check_data+0x624>
    134c:	ldr	r2, [pc, #2340]	; 1c78 <check_data+0xeb8>
    1350:	ldr	r2, [pc, r2]
    1354:	bl	0 <__aeabi_read_tp>
    1358:	mov	r3, r0
    135c:	ldr	r3, [r3, r2]
    1360:	cmn	r3, #300	; 0x12c
    1364:	beq	13a8 <check_data+0x5e8>
    1368:	ldr	r2, [pc, #2316]	; 1c7c <check_data+0xebc>
    136c:	ldr	r2, [pc, r2]
    1370:	bl	0 <__aeabi_read_tp>
    1374:	mov	r3, r0
    1378:	ldr	r3, [r3, r2]
    137c:	cmn	r3, #103	; 0x67
    1380:	beq	13a8 <check_data+0x5e8>
    1384:	ldr	r2, [pc, #2292]	; 1c80 <check_data+0xec0>
    1388:	ldr	r2, [pc, r2]
    138c:	bl	0 <__aeabi_read_tp>
    1390:	mov	r3, r0
    1394:	ldr	r3, [r3, r2]
    1398:	cmn	r3, #104	; 0x68
    139c:	beq	13a8 <check_data+0x5e8>
    13a0:	mvn	r3, #0
    13a4:	b	23b8 <check_data+0x15f8>
    13a8:	ldr	r2, [pc, #2260]	; 1c84 <check_data+0xec4>
    13ac:	ldr	r2, [pc, r2]
    13b0:	bl	0 <__aeabi_read_tp>
    13b4:	mov	r3, r0
    13b8:	ldr	r3, [r3, r2]
    13bc:	mov	r0, r3
    13c0:	bl	0 <coda_errno_to_string>
    13c4:	mov	r1, r0
    13c8:	ldr	r3, [fp, #8]
    13cc:	ldr	r2, [fp, #12]
    13d0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    13d4:	blx	r3
    13d8:	mov	r3, #1
    13dc:	str	r3, [fp, #-32]	; 0xffffffe0
    13e0:	b	16b8 <check_data+0x8f8>
    13e4:	ldr	r3, [fp, #4]
    13e8:	ldrd	r2, [r3]
    13ec:	cmp	r2, #0
    13f0:	sbcs	r3, r3, #0
    13f4:	bge	141c <check_data+0x65c>
    13f8:	ldr	r3, [fp, #8]
    13fc:	ldr	r2, [fp, #12]
    1400:	ldr	r1, [pc, #2176]	; 1c88 <check_data+0xec8>
    1404:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1408:	blx	r3
    140c:	mov	r3, #1
    1410:	str	r3, [fp, #-32]	; 0xffffffe0
    1414:	nop			; (mov r0, r0)
    1418:	b	16b8 <check_data+0x8f8>
    141c:	ldr	r3, [fp, #4]
    1420:	ldrd	r2, [r3]
    1424:	lsr	r4, r2, #3
    1428:	orr	r4, r4, r3, lsl #29
    142c:	asr	r5, r3, #3
    1430:	ldr	r3, [fp, #4]
    1434:	ldrd	r0, [r3]
    1438:	mov	r2, #7
    143c:	mov	r3, #0
    1440:	and	r2, r2, r0
    1444:	and	r3, r3, r1
    1448:	orrs	r3, r2, r3
    144c:	beq	145c <check_data+0x69c>
    1450:	mov	r2, #1
    1454:	mov	r3, #0
    1458:	b	1464 <check_data+0x6a4>
    145c:	mov	r2, #0
    1460:	mov	r3, #0
    1464:	adds	r2, r2, r4
    1468:	adc	r3, r3, r5
    146c:	strd	r2, [fp, #-60]	; 0xffffffc4
    1470:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1474:	ldr	r3, [r3]
    1478:	cmp	r3, #0
    147c:	beq	148c <check_data+0x6cc>
    1480:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1484:	ldr	r0, [r3]
    1488:	b	1490 <check_data+0x6d0>
    148c:	ldr	r0, [fp, #-108]	; 0xffffff94
    1490:	sub	r2, fp, #136	; 0x88
    1494:	sub	r3, fp, #132	; 0x84
    1498:	mov	r1, r3
    149c:	bl	0 <coda_type_get_fixed_value>
    14a0:	mov	r3, r0
    14a4:	cmp	r3, #0
    14a8:	beq	14b4 <check_data+0x6f4>
    14ac:	mvn	r3, #0
    14b0:	b	23b8 <check_data+0x15f8>
    14b4:	ldr	r3, [fp, #-132]	; 0xffffff7c
    14b8:	cmp	r3, #0
    14bc:	beq	16ac <check_data+0x8ec>
    14c0:	ldr	r3, [fp, #-136]	; 0xffffff78
    14c4:	mov	r0, r3
    14c8:	asr	r1, r0, #31
    14cc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    14d0:	cmp	r1, r3
    14d4:	cmpeq	r0, r2
    14d8:	beq	14f4 <check_data+0x734>
    14dc:	ldr	r3, [fp, #8]
    14e0:	ldr	r2, [fp, #12]
    14e4:	ldr	r1, [pc, #1952]	; 1c8c <check_data+0xecc>
    14e8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    14ec:	blx	r3
    14f0:	b	16ac <check_data+0x8ec>
    14f4:	ldr	r3, [fp, #-136]	; 0xffffff78
    14f8:	cmp	r3, #0
    14fc:	ble	16ac <check_data+0x8ec>
    1500:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1504:	mov	r0, r3
    1508:	bl	0 <malloc>
    150c:	mov	r3, r0
    1510:	str	r3, [fp, #-64]	; 0xffffffc0
    1514:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1518:	cmp	r3, #0
    151c:	bne	1544 <check_data+0x784>
    1520:	ldr	r2, [fp, #-60]	; 0xffffffc4
    1524:	mov	r3, #524	; 0x20c
    1528:	str	r3, [sp]
    152c:	ldr	r3, [pc, #1932]	; 1cc0 <check_data+0xf00>
    1530:	ldr	r1, [pc, #1932]	; 1cc4 <check_data+0xf04>
    1534:	mvn	r0, #0
    1538:	bl	0 <coda_set_error>
    153c:	mvn	r3, #0
    1540:	b	23b8 <check_data+0x15f8>
    1544:	ldr	r3, [fp, #4]
    1548:	ldrd	r2, [r3]
    154c:	strd	r2, [sp]
    1550:	mov	r2, #0
    1554:	mov	r3, #0
    1558:	ldr	r1, [fp, #-64]	; 0xffffffc0
    155c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1560:	bl	0 <coda_cursor_read_bits>
    1564:	mov	r3, r0
    1568:	cmp	r3, #0
    156c:	beq	1580 <check_data+0x7c0>
    1570:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1574:	bl	0 <free>
    1578:	mvn	r3, #0
    157c:	b	23b8 <check_data+0x15f8>
    1580:	ldr	r1, [fp, #-132]	; 0xffffff7c
    1584:	ldr	r3, [fp, #-136]	; 0xffffff78
    1588:	mov	r2, r3
    158c:	ldr	r0, [fp, #-64]	; 0xffffffc0
    1590:	bl	0 <memcmp>
    1594:	mov	r3, r0
    1598:	cmp	r3, #0
    159c:	beq	15b4 <check_data+0x7f4>
    15a0:	ldr	r3, [fp, #8]
    15a4:	ldr	r2, [fp, #12]
    15a8:	ldr	r1, [pc, #1760]	; 1c90 <check_data+0xed0>
    15ac:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    15b0:	blx	r3
    15b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
    15b8:	bl	0 <free>
    15bc:	b	16ac <check_data+0x8ec>
    15c0:	sub	r3, fp, #140	; 0x8c
    15c4:	mov	r1, r3
    15c8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    15cc:	bl	0 <coda_cursor_get_special_type>
    15d0:	mov	r3, r0
    15d4:	cmp	r3, #0
    15d8:	beq	15e4 <check_data+0x824>
    15dc:	mvn	r3, #0
    15e0:	b	23b8 <check_data+0x15f8>
    15e4:	ldr	r3, [fp, #-140]	; 0xffffff74
    15e8:	cmp	r3, #2
    15ec:	bne	16b4 <check_data+0x8f4>
    15f0:	sub	r3, fp, #148	; 0x94
    15f4:	mov	r1, r3
    15f8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    15fc:	bl	0 <coda_cursor_read_double>
    1600:	mov	r3, r0
    1604:	cmp	r3, #0
    1608:	beq	16b4 <check_data+0x8f4>
    160c:	ldr	r2, [pc, #1664]	; 1c94 <check_data+0xed4>
    1610:	ldr	r2, [pc, r2]
    1614:	bl	0 <__aeabi_read_tp>
    1618:	mov	r3, r0
    161c:	ldr	r3, [r3, r2]
    1620:	cmn	r3, #300	; 0x12c
    1624:	beq	1668 <check_data+0x8a8>
    1628:	ldr	r2, [pc, #1640]	; 1c98 <check_data+0xed8>
    162c:	ldr	r2, [pc, r2]
    1630:	bl	0 <__aeabi_read_tp>
    1634:	mov	r3, r0
    1638:	ldr	r3, [r3, r2]
    163c:	cmn	r3, #103	; 0x67
    1640:	beq	1668 <check_data+0x8a8>
    1644:	ldr	r2, [pc, #1616]	; 1c9c <check_data+0xedc>
    1648:	ldr	r2, [pc, r2]
    164c:	bl	0 <__aeabi_read_tp>
    1650:	mov	r3, r0
    1654:	ldr	r3, [r3, r2]
    1658:	cmn	r3, #104	; 0x68
    165c:	beq	1668 <check_data+0x8a8>
    1660:	mvn	r3, #0
    1664:	b	23b8 <check_data+0x15f8>
    1668:	ldr	r2, [pc, #1584]	; 1ca0 <check_data+0xee0>
    166c:	ldr	r2, [pc, r2]
    1670:	bl	0 <__aeabi_read_tp>
    1674:	mov	r3, r0
    1678:	ldr	r3, [r3, r2]
    167c:	mov	r0, r3
    1680:	bl	0 <coda_errno_to_string>
    1684:	mov	r1, r0
    1688:	ldr	r3, [fp, #8]
    168c:	ldr	r2, [fp, #12]
    1690:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1694:	blx	r3
    1698:	b	16b4 <check_data+0x8f4>
    169c:	nop			; (mov r0, r0)
    16a0:	b	16b8 <check_data+0x8f8>
    16a4:	nop			; (mov r0, r0)
    16a8:	b	16b8 <check_data+0x8f8>
    16ac:	nop			; (mov r0, r0)
    16b0:	b	16b8 <check_data+0x8f8>
    16b4:	nop			; (mov r0, r0)
    16b8:	sub	r3, fp, #104	; 0x68
    16bc:	mov	r1, r3
    16c0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    16c4:	bl	0 <coda_cursor_has_attributes>
    16c8:	mov	r3, r0
    16cc:	cmp	r3, #0
    16d0:	beq	16dc <check_data+0x91c>
    16d4:	mvn	r3, #0
    16d8:	b	23b8 <check_data+0x15f8>
    16dc:	ldr	r3, [fp, #-104]	; 0xffffff98
    16e0:	cmp	r3, #0
    16e4:	beq	17b8 <check_data+0x9f8>
    16e8:	mov	r3, #0
    16ec:	str	r3, [fp, #-152]	; 0xffffff68
    16f0:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    16f4:	ldr	r3, [r3]
    16f8:	cmp	r3, #0
    16fc:	beq	172c <check_data+0x96c>
    1700:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1704:	ldr	r2, [r3]
    1708:	sub	r3, fp, #152	; 0x98
    170c:	mov	r1, r3
    1710:	mov	r0, r2
    1714:	bl	0 <coda_type_get_attributes>
    1718:	mov	r3, r0
    171c:	cmp	r3, #0
    1720:	beq	172c <check_data+0x96c>
    1724:	mvn	r3, #0
    1728:	b	23b8 <check_data+0x15f8>
    172c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1730:	bl	0 <coda_cursor_goto_attributes>
    1734:	mov	r3, r0
    1738:	cmp	r3, #0
    173c:	beq	1748 <check_data+0x988>
    1740:	mvn	r3, #0
    1744:	b	23b8 <check_data+0x15f8>
    1748:	sub	r1, fp, #152	; 0x98
    174c:	ldr	r3, [fp, #12]
    1750:	str	r3, [sp, #8]
    1754:	ldr	r3, [fp, #8]
    1758:	str	r3, [sp, #4]
    175c:	sub	r3, fp, #164	; 0xa4
    1760:	str	r3, [sp]
    1764:	mov	r3, #0
    1768:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    176c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1770:	bl	dc0 <check_data>
    1774:	mov	r3, r0
    1778:	cmp	r3, #0
    177c:	beq	1788 <check_data+0x9c8>
    1780:	mvn	r3, #0
    1784:	b	23b8 <check_data+0x15f8>
    1788:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    178c:	bl	0 <coda_cursor_goto_parent>
    1790:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1794:	ldr	r3, [r3]
    1798:	cmp	r3, #0
    179c:	beq	17b8 <check_data+0x9f8>
    17a0:	ldr	r3, [fp, #-152]	; 0xffffff68
    17a4:	cmp	r3, #0
    17a8:	bne	17b8 <check_data+0x9f8>
    17ac:	ldr	r2, [fp, #-1140]	; 0xfffffb8c
    17b0:	mov	r3, #0
    17b4:	str	r3, [r2]
    17b8:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    17bc:	ldr	r3, [r3]
    17c0:	cmp	r3, #0
    17c4:	bne	17e0 <check_data+0xa20>
    17c8:	ldr	r3, [fp, #-1144]	; 0xfffffb88
    17cc:	cmp	r3, #0
    17d0:	bne	17e0 <check_data+0xa20>
    17d4:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    17d8:	cmp	r3, #0
    17dc:	beq	1f38 <check_data+0x1178>
    17e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
    17e4:	cmp	r3, #6
    17e8:	ldrls	pc, [pc, r3, lsl #2]
    17ec:	b	1f38 <check_data+0x1178>
    17f0:	.word	0x00001990
    17f4:	.word	0x0000180c
    17f8:	.word	0x00001f38
    17fc:	.word	0x00001f38
    1800:	.word	0x00001f38
    1804:	.word	0x00001f38
    1808:	.word	0x00001e40
    180c:	mov	r3, #0
    1810:	str	r3, [fp, #-176]	; 0xffffff50
    1814:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1818:	ldr	r3, [r3]
    181c:	cmp	r3, #0
    1820:	beq	1850 <check_data+0xa90>
    1824:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1828:	ldr	r3, [r3]
    182c:	sub	r2, fp, #176	; 0xb0
    1830:	mov	r1, r2
    1834:	mov	r0, r3
    1838:	bl	0 <coda_type_get_array_base_type>
    183c:	mov	r3, r0
    1840:	cmp	r3, #0
    1844:	beq	1850 <check_data+0xa90>
    1848:	mvn	r3, #0
    184c:	b	23b8 <check_data+0x15f8>
    1850:	sub	r3, fp, #180	; 0xb4
    1854:	mov	r1, r3
    1858:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    185c:	bl	0 <coda_cursor_get_num_elements>
    1860:	mov	r3, r0
    1864:	cmp	r3, #0
    1868:	beq	1874 <check_data+0xab4>
    186c:	mvn	r3, #0
    1870:	b	23b8 <check_data+0x15f8>
    1874:	ldr	r3, [fp, #-180]	; 0xffffff4c
    1878:	cmp	r3, #0
    187c:	ble	1f24 <check_data+0x1164>
    1880:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1884:	bl	0 <coda_cursor_goto_first_array_element>
    1888:	mov	r3, r0
    188c:	cmp	r3, #0
    1890:	beq	189c <check_data+0xadc>
    1894:	mvn	r3, #0
    1898:	b	23b8 <check_data+0x15f8>
    189c:	mov	r3, #0
    18a0:	str	r3, [fp, #-40]	; 0xffffffd8
    18a4:	b	194c <check_data+0xb8c>
    18a8:	sub	r1, fp, #176	; 0xb0
    18ac:	ldr	r3, [fp, #12]
    18b0:	str	r3, [sp, #8]
    18b4:	ldr	r3, [fp, #8]
    18b8:	str	r3, [sp, #4]
    18bc:	sub	r3, fp, #172	; 0xac
    18c0:	str	r3, [sp]
    18c4:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    18c8:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    18cc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    18d0:	bl	dc0 <check_data>
    18d4:	mov	r3, r0
    18d8:	cmp	r3, #0
    18dc:	beq	18e8 <check_data+0xb28>
    18e0:	mvn	r3, #0
    18e4:	b	23b8 <check_data+0x15f8>
    18e8:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    18ec:	cmp	r3, #0
    18f0:	beq	1910 <check_data+0xb50>
    18f4:	ldr	r3, [fp, #4]
    18f8:	ldrd	r0, [r3]
    18fc:	ldrd	r2, [fp, #-172]	; 0xffffff54
    1900:	adds	r2, r2, r0
    1904:	adc	r3, r3, r1
    1908:	ldr	r1, [fp, #4]
    190c:	strd	r2, [r1]
    1910:	ldr	r3, [fp, #-180]	; 0xffffff4c
    1914:	sub	r2, r3, #1
    1918:	ldr	r3, [fp, #-40]	; 0xffffffd8
    191c:	cmp	r2, r3
    1920:	ble	1940 <check_data+0xb80>
    1924:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1928:	bl	0 <coda_cursor_goto_next_array_element>
    192c:	mov	r3, r0
    1930:	cmp	r3, #0
    1934:	beq	1940 <check_data+0xb80>
    1938:	mvn	r3, #0
    193c:	b	23b8 <check_data+0x15f8>
    1940:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1944:	add	r3, r3, #1
    1948:	str	r3, [fp, #-40]	; 0xffffffd8
    194c:	ldr	r3, [fp, #-180]	; 0xffffff4c
    1950:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1954:	cmp	r2, r3
    1958:	blt	18a8 <check_data+0xae8>
    195c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1960:	bl	0 <coda_cursor_goto_parent>
    1964:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1968:	ldr	r3, [r3]
    196c:	cmp	r3, #0
    1970:	beq	1f24 <check_data+0x1164>
    1974:	ldr	r3, [fp, #-176]	; 0xffffff50
    1978:	cmp	r3, #0
    197c:	bne	1f24 <check_data+0x1164>
    1980:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1984:	mov	r2, #0
    1988:	str	r2, [r3]
    198c:	b	1f24 <check_data+0x1164>
    1990:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1994:	sub	r0, fp, #876	; 0x36c
    1998:	mov	r1, r3
    199c:	mov	r3, #520	; 0x208
    19a0:	mov	r2, r3
    19a4:	bl	0 <memcpy>
    19a8:	sub	r2, fp, #184	; 0xb8
    19ac:	sub	r3, fp, #876	; 0x36c
    19b0:	mov	r1, r2
    19b4:	mov	r0, r3
    19b8:	bl	0 <coda_cursor_get_num_elements>
    19bc:	mov	r3, r0
    19c0:	cmp	r3, #0
    19c4:	beq	19d0 <check_data+0xc10>
    19c8:	mvn	r3, #0
    19cc:	b	23b8 <check_data+0x15f8>
    19d0:	ldr	r3, [fp, #-184]	; 0xffffff48
    19d4:	cmp	r3, #0
    19d8:	ble	1ba8 <check_data+0xde8>
    19dc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    19e0:	bl	0 <coda_cursor_goto_first_record_field>
    19e4:	mov	r3, r0
    19e8:	cmp	r3, #0
    19ec:	beq	19f8 <check_data+0xc38>
    19f0:	mvn	r3, #0
    19f4:	b	23b8 <check_data+0x15f8>
    19f8:	mov	r3, #0
    19fc:	str	r3, [fp, #-44]	; 0xffffffd4
    1a00:	b	1b90 <check_data+0xdd0>
    1a04:	mov	r3, #0
    1a08:	str	r3, [fp, #-188]	; 0xffffff44
    1a0c:	sub	r3, fp, #192	; 0xc0
    1a10:	sub	r0, fp, #876	; 0x36c
    1a14:	mov	r2, r3
    1a18:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1a1c:	bl	0 <coda_cursor_get_record_field_available_status>
    1a20:	mov	r3, r0
    1a24:	cmp	r3, #0
    1a28:	beq	1a34 <check_data+0xc74>
    1a2c:	mvn	r3, #0
    1a30:	b	23b8 <check_data+0x15f8>
    1a34:	ldr	r3, [fp, #-192]	; 0xffffff40
    1a38:	cmp	r3, #0
    1a3c:	beq	1b4c <check_data+0xd8c>
    1a40:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1a44:	ldr	r3, [r3]
    1a48:	cmp	r3, #0
    1a4c:	beq	1ae4 <check_data+0xd24>
    1a50:	ldr	r0, [fp, #-108]	; 0xffffff94
    1a54:	sub	r3, fp, #196	; 0xc4
    1a58:	mov	r2, r3
    1a5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1a60:	bl	0 <coda_type_get_record_field_name>
    1a64:	mov	r3, r0
    1a68:	cmp	r3, #0
    1a6c:	beq	1a78 <check_data+0xcb8>
    1a70:	mvn	r3, #0
    1a74:	b	1b8c <check_data+0xdcc>
    1a78:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1a7c:	ldr	r0, [r3]
    1a80:	ldr	r1, [fp, #-196]	; 0xffffff3c
    1a84:	sub	r3, fp, #200	; 0xc8
    1a88:	mov	r2, r3
    1a8c:	bl	0 <coda_type_get_record_field_index_from_name>
    1a90:	mov	r3, r0
    1a94:	cmp	r3, #0
    1a98:	beq	1ab8 <check_data+0xcf8>
    1a9c:	ldr	r2, [pc, #512]	; 1ca4 <check_data+0xee4>
    1aa0:	ldr	r2, [pc, r2]
    1aa4:	bl	0 <__aeabi_read_tp>
    1aa8:	mov	r1, r0
    1aac:	mov	r3, #0
    1ab0:	str	r3, [r1, r2]
    1ab4:	b	1ae4 <check_data+0xd24>
    1ab8:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1abc:	ldr	r0, [r3]
    1ac0:	ldr	r1, [fp, #-200]	; 0xffffff38
    1ac4:	sub	r3, fp, #188	; 0xbc
    1ac8:	mov	r2, r3
    1acc:	bl	0 <coda_type_get_record_field_type>
    1ad0:	mov	r3, r0
    1ad4:	cmp	r3, #0
    1ad8:	beq	1ae4 <check_data+0xd24>
    1adc:	mvn	r3, #0
    1ae0:	b	1b8c <check_data+0xdcc>
    1ae4:	sub	r1, fp, #188	; 0xbc
    1ae8:	ldr	r3, [fp, #12]
    1aec:	str	r3, [sp, #8]
    1af0:	ldr	r3, [fp, #8]
    1af4:	str	r3, [sp, #4]
    1af8:	sub	r3, fp, #172	; 0xac
    1afc:	str	r3, [sp]
    1b00:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1b04:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    1b08:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1b0c:	bl	dc0 <check_data>
    1b10:	mov	r3, r0
    1b14:	cmp	r3, #0
    1b18:	beq	1b24 <check_data+0xd64>
    1b1c:	mvn	r3, #0
    1b20:	b	1b8c <check_data+0xdcc>
    1b24:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1b28:	cmp	r3, #0
    1b2c:	beq	1b4c <check_data+0xd8c>
    1b30:	ldr	r3, [fp, #4]
    1b34:	ldrd	r0, [r3]
    1b38:	ldrd	r2, [fp, #-172]	; 0xffffff54
    1b3c:	adds	r0, r0, r2
    1b40:	adc	r1, r1, r3
    1b44:	ldr	r3, [fp, #4]
    1b48:	strd	r0, [r3]
    1b4c:	ldr	r3, [fp, #-184]	; 0xffffff48
    1b50:	sub	r2, r3, #1
    1b54:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1b58:	cmp	r2, r3
    1b5c:	ble	1b7c <check_data+0xdbc>
    1b60:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1b64:	bl	0 <coda_cursor_goto_next_record_field>
    1b68:	mov	r3, r0
    1b6c:	cmp	r3, #0
    1b70:	beq	1b7c <check_data+0xdbc>
    1b74:	mvn	r3, #0
    1b78:	b	1b8c <check_data+0xdcc>
    1b7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1b80:	add	r3, r3, #1
    1b84:	str	r3, [fp, #-44]	; 0xffffffd4
    1b88:	b	1b90 <check_data+0xdd0>
    1b8c:	b	23b8 <check_data+0x15f8>
    1b90:	ldr	r2, [fp, #-184]	; 0xffffff48
    1b94:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1b98:	cmp	r3, r2
    1b9c:	blt	1a04 <check_data+0xc44>
    1ba0:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1ba4:	bl	0 <coda_cursor_goto_parent>
    1ba8:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1bac:	cmp	r3, #0
    1bb0:	beq	1f2c <check_data+0x116c>
    1bb4:	ldr	r3, [fp, #-108]	; 0xffffff94
    1bb8:	ldr	r3, [r3, #32]
    1bbc:	cmp	r3, #0
    1bc0:	beq	1f2c <check_data+0x116c>
    1bc4:	bl	0 <coda_get_option_use_fast_size_expressions>
    1bc8:	str	r0, [fp, #-68]	; 0xffffffbc
    1bcc:	mov	r0, #1
    1bd0:	bl	0 <coda_set_option_use_fast_size_expressions>
    1bd4:	sub	r3, fp, #212	; 0xd4
    1bd8:	mov	r1, r3
    1bdc:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1be0:	bl	0 <coda_cursor_get_bit_size>
    1be4:	mov	r3, r0
    1be8:	cmp	r3, #0
    1bec:	beq	1cd4 <check_data+0xf14>
    1bf0:	ldr	r3, [pc, #176]	; 1ca8 <check_data+0xee8>
    1bf4:	ldr	r3, [pc, r3]
    1bf8:	bl	0 <__aeabi_read_tp>
    1bfc:	mov	r2, r0
    1c00:	ldr	r3, [r2, r3]
    1c04:	mov	r0, r3
    1c08:	bl	0 <coda_errno_to_string>
    1c0c:	mov	r1, r0
    1c10:	ldr	r3, [fp, #8]
    1c14:	ldr	r2, [fp, #12]
    1c18:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1c1c:	blx	r3
    1c20:	mov	r3, #1
    1c24:	str	r3, [fp, #-32]	; 0xffffffe0
    1c28:	b	1e34 <check_data+0x1074>
    1c2c:	.word	0x00000132
    1c30:	.word	0x000003dc
    1c34:	.word	0x00000ce8
    1c38:	.word	0x00000cd0
    1c3c:	.word	0x00000cb8
    1c40:	.word	0x00000c98
    1c44:	.word	0x00000c44
    1c48:	.word	0x00000c2c
    1c4c:	.word	0x00000c14
    1c50:	.word	0x00000bf4
    1c54:	.word	0x000003f0
    1c58:	.word	0x0000019b
    1c5c:	.word	0x00000444
    1c60:	.word	0x0000047c
    1c64:	.word	0x000004a4
    1c68:	.word	0x000004d4
    1c6c:	.word	0x0000050c
    1c70:	.word	0x000001ce
    1c74:	.word	0x00000558
    1c78:	.word	0x00000920
    1c7c:	.word	0x00000908
    1c80:	.word	0x000008f0
    1c84:	.word	0x000008d0
    1c88:	.word	0x0000055c
    1c8c:	.word	0x00000574
    1c90:	.word	0x000005a8
    1c94:	.word	0x0000067c
    1c98:	.word	0x00000664
    1c9c:	.word	0x0000064c
    1ca0:	.word	0x0000062c
    1ca4:	.word	0x000001fc
    1ca8:	.word	0x000000ac
    1cac:	.word	0x000005dc
    1cb0:	.word	0x00000790
    1cb4:	.word	0x0000030a
    1cb8:	.word	0x00000644
    1cbc:	.word	0x0000033f
    1cc0:	.word	0x00000390
    1cc4:	.word	0x0000040c
    1cc8:	.word	0x0000066c
    1ccc:	.word	0x000005d8
    1cd0:	.word	0x000006a0
    1cd4:	ldr	r3, [fp, #4]
    1cd8:	ldrd	r0, [r3]
    1cdc:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1ce0:	cmp	r1, r3
    1ce4:	cmpeq	r0, r2
    1ce8:	beq	1e34 <check_data+0x1074>
    1cec:	ldr	r3, [fp, #4]
    1cf0:	ldrd	r2, [r3]
    1cf4:	lsr	r1, r2, #3
    1cf8:	str	r1, [fp, #-1156]	; 0xfffffb7c
    1cfc:	ldr	r1, [fp, #-1156]	; 0xfffffb7c
    1d00:	orr	r1, r1, r3, lsl #29
    1d04:	str	r1, [fp, #-1156]	; 0xfffffb7c
    1d08:	asr	r3, r3, #3
    1d0c:	str	r3, [fp, #-1152]	; 0xfffffb80
    1d10:	sub	r3, fp, #244	; 0xf4
    1d14:	mov	r2, r3
    1d18:	sub	r3, fp, #1152	; 0x480
    1d1c:	sub	r3, r3, #4
    1d20:	ldrd	r0, [r3]
    1d24:	bl	0 <coda_str64>
    1d28:	ldr	r3, [fp, #4]
    1d2c:	ldrd	r0, [r3]
    1d30:	mov	r2, #7
    1d34:	mov	r3, #0
    1d38:	and	r2, r2, r0
    1d3c:	and	r3, r3, r1
    1d40:	orrs	r3, r2, r3
    1d44:	beq	1d7c <check_data+0xfbc>
    1d48:	sub	r3, fp, #244	; 0xf4
    1d4c:	mov	r0, r3
    1d50:	bl	0 <strlen>
    1d54:	mov	r2, r0
    1d58:	sub	r3, fp, #244	; 0xf4
    1d5c:	add	r0, r3, r2
    1d60:	ldr	r3, [fp, #4]
    1d64:	ldrd	r2, [r3]
    1d68:	mov	r3, r2
    1d6c:	and	r3, r3, #7
    1d70:	mov	r2, r3
    1d74:	ldr	r1, [pc, #-176]	; 1ccc <check_data+0xf0c>
    1d78:	bl	0 <sprintf>
    1d7c:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1d80:	lsr	r1, r2, #3
    1d84:	str	r1, [fp, #-1164]	; 0xfffffb74
    1d88:	ldr	r1, [fp, #-1164]	; 0xfffffb74
    1d8c:	orr	r1, r1, r3, lsl #29
    1d90:	str	r1, [fp, #-1164]	; 0xfffffb74
    1d94:	asr	r3, r3, #3
    1d98:	str	r3, [fp, #-1160]	; 0xfffffb78
    1d9c:	sub	r3, fp, #276	; 0x114
    1da0:	mov	r2, r3
    1da4:	sub	r3, fp, #1152	; 0x480
    1da8:	sub	r3, r3, #12
    1dac:	ldrd	r0, [r3]
    1db0:	bl	0 <coda_str64>
    1db4:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1db8:	mov	r0, #7
    1dbc:	mov	r1, #0
    1dc0:	and	r2, r2, r0
    1dc4:	and	r3, r3, r1
    1dc8:	orrs	r3, r2, r3
    1dcc:	beq	1e00 <check_data+0x1040>
    1dd0:	sub	r3, fp, #276	; 0x114
    1dd4:	mov	r0, r3
    1dd8:	bl	0 <strlen>
    1ddc:	mov	r2, r0
    1de0:	sub	r3, fp, #276	; 0x114
    1de4:	add	r0, r3, r2
    1de8:	ldrd	r2, [fp, #-212]	; 0xffffff2c
    1dec:	mov	r3, r2
    1df0:	and	r3, r3, #7
    1df4:	mov	r2, r3
    1df8:	ldr	r1, [pc, #-308]	; 1ccc <check_data+0xf0c>
    1dfc:	bl	0 <sprintf>
    1e00:	sub	r3, fp, #276	; 0x114
    1e04:	sub	r2, fp, #244	; 0xf4
    1e08:	sub	r0, fp, #1120	; 0x460
    1e0c:	sub	r0, r0, #12
    1e10:	ldr	r1, [pc, #-364]	; 1cac <check_data+0xeec>
    1e14:	bl	0 <sprintf>
    1e18:	sub	r3, fp, #1120	; 0x460
    1e1c:	sub	r3, r3, #12
    1e20:	ldr	r4, [fp, #8]
    1e24:	ldr	r2, [fp, #12]
    1e28:	mov	r1, r3
    1e2c:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1e30:	blx	r4
    1e34:	ldr	r0, [fp, #-68]	; 0xffffffbc
    1e38:	bl	0 <coda_set_option_use_fast_size_expressions>
    1e3c:	b	1f2c <check_data+0x116c>
    1e40:	mov	r3, #0
    1e44:	str	r3, [fp, #-284]	; 0xfffffee4
    1e48:	sub	r3, fp, #280	; 0x118
    1e4c:	mov	r1, r3
    1e50:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1e54:	bl	0 <coda_cursor_get_special_type>
    1e58:	mov	r3, r0
    1e5c:	cmp	r3, #0
    1e60:	beq	1e6c <check_data+0x10ac>
    1e64:	mvn	r3, #0
    1e68:	b	23b8 <check_data+0x15f8>
    1e6c:	ldr	r3, [fp, #-280]	; 0xfffffee8
    1e70:	cmp	r3, #0
    1e74:	bne	1e8c <check_data+0x10cc>
    1e78:	ldr	r3, [pc, #-464]	; 1cb0 <check_data+0xef0>
    1e7c:	ldr	r2, [pc, #-464]	; 1cb4 <check_data+0xef4>
    1e80:	ldr	r1, [pc, #-456]	; 1cc0 <check_data+0xf00>
    1e84:	ldr	r0, [pc, #-468]	; 1cb8 <check_data+0xef8>
    1e88:	bl	0 <__assert_fail>
    1e8c:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1e90:	ldr	r3, [r3]
    1e94:	cmp	r3, #0
    1e98:	beq	1ec8 <check_data+0x1108>
    1e9c:	ldr	r3, [fp, #-1140]	; 0xfffffb8c
    1ea0:	ldr	r3, [r3]
    1ea4:	sub	r2, fp, #284	; 0x11c
    1ea8:	mov	r1, r2
    1eac:	mov	r0, r3
    1eb0:	bl	0 <coda_type_get_special_base_type>
    1eb4:	mov	r3, r0
    1eb8:	cmp	r3, #0
    1ebc:	beq	1ec8 <check_data+0x1108>
    1ec0:	mvn	r3, #0
    1ec4:	b	23b8 <check_data+0x15f8>
    1ec8:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1ecc:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1ed0:	mov	r3, r0
    1ed4:	cmp	r3, #0
    1ed8:	beq	1ee4 <check_data+0x1124>
    1edc:	mvn	r3, #0
    1ee0:	b	23b8 <check_data+0x15f8>
    1ee4:	sub	r1, fp, #284	; 0x11c
    1ee8:	ldr	r3, [fp, #12]
    1eec:	str	r3, [sp, #8]
    1ef0:	ldr	r3, [fp, #8]
    1ef4:	str	r3, [sp, #4]
    1ef8:	ldr	r3, [fp, #4]
    1efc:	str	r3, [sp]
    1f00:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1f04:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    1f08:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    1f0c:	bl	dc0 <check_data>
    1f10:	mov	r3, r0
    1f14:	cmp	r3, #0
    1f18:	beq	1f34 <check_data+0x1174>
    1f1c:	mvn	r3, #0
    1f20:	b	23b8 <check_data+0x15f8>
    1f24:	nop			; (mov r0, r0)
    1f28:	b	1f38 <check_data+0x1178>
    1f2c:	nop			; (mov r0, r0)
    1f30:	b	1f38 <check_data+0x1178>
    1f34:	nop			; (mov r0, r0)
    1f38:	ldr	r3, [fp, #-1148]	; 0xfffffb84
    1f3c:	cmp	r3, #0
    1f40:	beq	23b4 <check_data+0x15f4>
    1f44:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1f48:	cmp	r3, #0
    1f4c:	bne	23b4 <check_data+0x15f4>
    1f50:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1f54:	ldr	r3, [r3, #4]
    1f58:	sub	r3, r3, #1
    1f5c:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1f60:	lsl	r3, r3, #4
    1f64:	add	r3, r2, r3
    1f68:	ldr	r3, [r3, #8]
    1f6c:	ldr	r3, [r3]
    1f70:	cmp	r3, #100	; 0x64
    1f74:	bne	23b4 <check_data+0x15f4>
    1f78:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1f7c:	ldr	r3, [r3, #4]
    1f80:	sub	r3, r3, #1
    1f84:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1f88:	lsl	r3, r3, #4
    1f8c:	add	r3, r2, r3
    1f90:	ldr	r3, [r3, #8]
    1f94:	ldr	r3, [r3, #8]
    1f98:	cmp	r3, #2
    1f9c:	bne	23b4 <check_data+0x15f4>
    1fa0:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    1fa4:	ldr	r3, [r3, #4]
    1fa8:	sub	r3, r3, #1
    1fac:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    1fb0:	lsl	r3, r3, #4
    1fb4:	add	r3, r2, r3
    1fb8:	ldr	r3, [r3, #8]
    1fbc:	ldr	r3, [r3, #16]
    1fc0:	mov	r2, r3
    1fc4:	asr	r3, r2, #31
    1fc8:	strd	r2, [fp, #-76]	; 0xffffffb4
    1fcc:	sub	r3, fp, #284	; 0x11c
    1fd0:	mov	r1, r3
    1fd4:	mov	r2, #0
    1fd8:	mov	r3, #0
    1fdc:	strd	r2, [r1, #-8]
    1fe0:	ldr	r3, [fp, #4]
    1fe4:	cmp	r3, #0
    1fe8:	beq	2000 <check_data+0x1240>
    1fec:	ldr	r3, [fp, #4]
    1ff0:	ldrd	r2, [r3]
    1ff4:	sub	r1, fp, #284	; 0x11c
    1ff8:	strd	r2, [r1, #-8]
    1ffc:	b	2024 <check_data+0x1264>
    2000:	sub	r3, fp, #292	; 0x124
    2004:	mov	r1, r3
    2008:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    200c:	bl	0 <coda_cursor_get_bit_size>
    2010:	mov	r3, r0
    2014:	cmp	r3, #0
    2018:	beq	2024 <check_data+0x1264>
    201c:	mvn	r3, #0
    2020:	b	23b8 <check_data+0x15f8>
    2024:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    2028:	ldr	r3, [r3]
    202c:	ldr	r3, [r3, #16]
    2030:	cmp	r3, #2
    2034:	bne	2298 <check_data+0x14d8>
    2038:	sub	r3, fp, #284	; 0x11c
    203c:	ldrd	r2, [r3, #-8]
    2040:	lsr	r1, r2, #3
    2044:	str	r1, [fp, #-1172]	; 0xfffffb6c
    2048:	ldr	r1, [fp, #-1172]	; 0xfffffb6c
    204c:	orr	r1, r1, r3, lsl #29
    2050:	str	r1, [fp, #-1172]	; 0xfffffb6c
    2054:	asr	r3, r3, #3
    2058:	str	r3, [fp, #-1168]	; 0xfffffb70
    205c:	sub	r3, fp, #284	; 0x11c
    2060:	ldrd	r2, [r3, #-8]
    2064:	uxtb	r3, r2
    2068:	and	r3, r3, #7
    206c:	cmp	r3, #0
    2070:	movne	r3, #1
    2074:	moveq	r3, #0
    2078:	uxtb	r3, r3
    207c:	uxtb	r2, r3
    2080:	mov	r3, #0
    2084:	sub	r1, fp, #1168	; 0x490
    2088:	sub	r1, r1, #4
    208c:	ldrd	r0, [r1]
    2090:	adds	r0, r0, r2
    2094:	adc	r1, r1, r3
    2098:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    209c:	cmp	r0, r2
    20a0:	sbcs	r3, r1, r3
    20a4:	bge	2298 <check_data+0x14d8>
    20a8:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    20ac:	ldr	r3, [r3, #4]
    20b0:	sub	r3, r3, #1
    20b4:	ldr	r2, [fp, #-1136]	; 0xfffffb90
    20b8:	lsl	r3, r3, #4
    20bc:	add	r3, r2, r3
    20c0:	ldr	r3, [r3, #8]
    20c4:	ldrd	r2, [r3, #24]
    20c8:	mov	r3, r2
    20cc:	str	r3, [fp, #-80]	; 0xffffffb0
    20d0:	sub	r3, fp, #284	; 0x11c
    20d4:	ldrd	r2, [r3, #-8]
    20d8:	lsr	r1, r2, #3
    20dc:	str	r1, [fp, #-1180]	; 0xfffffb64
    20e0:	ldr	r1, [fp, #-1180]	; 0xfffffb64
    20e4:	orr	r1, r1, r3, lsl #29
    20e8:	str	r1, [fp, #-1180]	; 0xfffffb64
    20ec:	asr	r3, r3, #3
    20f0:	str	r3, [fp, #-1176]	; 0xfffffb68
    20f4:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    20f8:	sub	r1, fp, #1168	; 0x490
    20fc:	sub	r1, r1, #12
    2100:	ldrd	r0, [r1]
    2104:	subs	r0, r2, r0
    2108:	sbc	r1, r3, r1
    210c:	mov	r2, r0
    2110:	mov	r3, r1
    2114:	strd	r2, [fp, #-92]	; 0xffffffa4
    2118:	ldr	r3, [fp, #-92]	; 0xffffffa4
    211c:	add	r3, r3, #1
    2120:	mov	r0, r3
    2124:	bl	0 <malloc>
    2128:	mov	r3, r0
    212c:	str	r3, [fp, #-96]	; 0xffffffa0
    2130:	ldr	r3, [fp, #-96]	; 0xffffffa0
    2134:	cmp	r3, #0
    2138:	bne	2160 <check_data+0x13a0>
    213c:	ldr	r2, [fp, #-92]	; 0xffffffa4
    2140:	ldr	r3, [pc, #-1164]	; 1cbc <check_data+0xefc>
    2144:	str	r3, [sp]
    2148:	ldr	r3, [pc, #-1168]	; 1cc0 <check_data+0xf00>
    214c:	ldr	r1, [pc, #-1168]	; 1cc4 <check_data+0xf04>
    2150:	mvn	r0, #0
    2154:	bl	0 <coda_set_error>
    2158:	mvn	r3, #0
    215c:	b	23b8 <check_data+0x15f8>
    2160:	ldr	r3, [fp, #-1136]	; 0xfffffb90
    2164:	ldr	ip, [r3]
    2168:	ldr	r3, [fp, #-80]	; 0xffffffb0
    216c:	mov	r0, r3
    2170:	asr	r1, r0, #31
    2174:	sub	r3, fp, #284	; 0x11c
    2178:	ldrd	r2, [r3, #-8]
    217c:	lsr	r8, r2, #3
    2180:	orr	r8, r8, r3, lsl #29
    2184:	asr	r9, r3, #3
    2188:	adds	r0, r0, r8
    218c:	adc	r1, r1, r9
    2190:	ldr	r3, [fp, #-96]	; 0xffffffa0
    2194:	str	r3, [sp, #8]
    2198:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    219c:	strd	r2, [sp]
    21a0:	mov	r2, r0
    21a4:	mov	r3, r1
    21a8:	mov	r0, ip
    21ac:	bl	0 <read_bytes>
    21b0:	mov	r3, r0
    21b4:	cmp	r3, #0
    21b8:	beq	21cc <check_data+0x140c>
    21bc:	ldr	r0, [fp, #-96]	; 0xffffffa0
    21c0:	bl	0 <free>
    21c4:	mvn	r3, #0
    21c8:	b	23b8 <check_data+0x15f8>
    21cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
    21d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
    21d4:	add	r3, r2, r3
    21d8:	mov	r2, #0
    21dc:	strb	r2, [r3]
    21e0:	mov	r3, #0
    21e4:	str	r3, [fp, #-48]	; 0xffffffd0
    21e8:	b	2270 <check_data+0x14b0>
    21ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
    21f0:	ldr	r2, [fp, #-96]	; 0xffffffa0
    21f4:	add	r3, r2, r3
    21f8:	ldrb	r3, [r3]
    21fc:	cmp	r3, #32
    2200:	beq	2264 <check_data+0x14a4>
    2204:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2208:	ldr	r2, [fp, #-96]	; 0xffffffa0
    220c:	add	r3, r2, r3
    2210:	ldrb	r3, [r3]
    2214:	cmp	r3, #9
    2218:	beq	2264 <check_data+0x14a4>
    221c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2220:	ldr	r2, [fp, #-96]	; 0xffffffa0
    2224:	add	r3, r2, r3
    2228:	ldrb	r3, [r3]
    222c:	cmp	r3, #10
    2230:	beq	2264 <check_data+0x14a4>
    2234:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2238:	ldr	r2, [fp, #-96]	; 0xffffffa0
    223c:	add	r3, r2, r3
    2240:	ldrb	r3, [r3]
    2244:	cmp	r3, #13
    2248:	beq	2264 <check_data+0x14a4>
    224c:	ldr	r3, [fp, #8]
    2250:	ldr	r2, [fp, #12]
    2254:	ldr	r1, [pc, #-1428]	; 1cc8 <check_data+0xf08>
    2258:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    225c:	blx	r3
    2260:	b	228c <check_data+0x14cc>
    2264:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2268:	add	r3, r3, #1
    226c:	str	r3, [fp, #-48]	; 0xffffffd0
    2270:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2274:	mov	r0, r3
    2278:	asr	r1, r0, #31
    227c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
    2280:	cmp	r0, r2
    2284:	sbcs	r3, r1, r3
    2288:	blt	21ec <check_data+0x142c>
    228c:	ldr	r0, [fp, #-96]	; 0xffffffa0
    2290:	bl	0 <free>
    2294:	b	23b4 <check_data+0x15f4>
    2298:	sub	r3, fp, #284	; 0x11c
    229c:	ldrd	r2, [r3, #-8]
    22a0:	lsr	r6, r2, #3
    22a4:	orr	r6, r6, r3, lsl #29
    22a8:	asr	r7, r3, #3
    22ac:	sub	r3, fp, #284	; 0x11c
    22b0:	ldrd	r2, [r3, #-8]
    22b4:	uxtb	r3, r2
    22b8:	and	r3, r3, #7
    22bc:	cmp	r3, #0
    22c0:	movne	r3, #1
    22c4:	moveq	r3, #0
    22c8:	uxtb	r3, r3
    22cc:	uxtb	r2, r3
    22d0:	mov	r3, #0
    22d4:	adds	r0, r6, r2
    22d8:	adc	r1, r7, r3
    22dc:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    22e0:	cmp	r1, r3
    22e4:	cmpeq	r0, r2
    22e8:	beq	23b4 <check_data+0x15f4>
    22ec:	sub	r3, fp, #324	; 0x144
    22f0:	mov	r2, r3
    22f4:	ldrd	r0, [fp, #-76]	; 0xffffffb4
    22f8:	bl	0 <coda_str64>
    22fc:	sub	r3, fp, #284	; 0x11c
    2300:	ldrd	r2, [r3, #-8]
    2304:	lsr	r1, r2, #3
    2308:	str	r1, [fp, #-1188]	; 0xfffffb5c
    230c:	ldr	r1, [fp, #-1188]	; 0xfffffb5c
    2310:	orr	r1, r1, r3, lsl #29
    2314:	str	r1, [fp, #-1188]	; 0xfffffb5c
    2318:	asr	r3, r3, #3
    231c:	str	r3, [fp, #-1184]	; 0xfffffb60
    2320:	sub	r3, fp, #356	; 0x164
    2324:	mov	r2, r3
    2328:	sub	r3, fp, #1184	; 0x4a0
    232c:	sub	r3, r3, #4
    2330:	ldrd	r0, [r3]
    2334:	bl	0 <coda_str64>
    2338:	sub	r3, fp, #284	; 0x11c
    233c:	ldrd	r2, [r3, #-8]
    2340:	mov	r0, #7
    2344:	mov	r1, #0
    2348:	and	r2, r2, r0
    234c:	and	r3, r3, r1
    2350:	orrs	r3, r2, r3
    2354:	beq	238c <check_data+0x15cc>
    2358:	sub	r3, fp, #356	; 0x164
    235c:	mov	r0, r3
    2360:	bl	0 <strlen>
    2364:	mov	r2, r0
    2368:	sub	r3, fp, #356	; 0x164
    236c:	add	r0, r3, r2
    2370:	sub	r3, fp, #284	; 0x11c
    2374:	ldrd	r2, [r3, #-8]
    2378:	mov	r3, r2
    237c:	and	r3, r3, #7
    2380:	mov	r2, r3
    2384:	ldr	r1, [pc, #-1728]	; 1ccc <check_data+0xf0c>
    2388:	bl	0 <sprintf>
    238c:	sub	r3, fp, #356	; 0x164
    2390:	sub	r2, fp, #324	; 0x144
    2394:	sub	r0, fp, #876	; 0x36c
    2398:	ldr	r1, [pc, #-1744]	; 1cd0 <check_data+0xf10>
    239c:	bl	0 <sprintf>
    23a0:	sub	r1, fp, #876	; 0x36c
    23a4:	ldr	r3, [fp, #8]
    23a8:	ldr	r2, [fp, #12]
    23ac:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    23b0:	blx	r3
    23b4:	mov	r3, #0
    23b8:	mov	r0, r3
    23bc:	sub	sp, fp, #28
    23c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000023c4 <coda_product_check>:
    23c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    23c8:	add	fp, sp, #28
    23cc:	sub	sp, sp, #896	; 0x380
    23d0:	str	r0, [fp, #-896]	; 0xfffffc80
    23d4:	str	r1, [fp, #-900]	; 0xfffffc7c
    23d8:	str	r2, [fp, #-904]	; 0xfffffc78
    23dc:	str	r3, [fp, #-908]	; 0xfffffc74
    23e0:	mov	r3, #0
    23e4:	str	r3, [fp, #-40]	; 0xffffffd8
    23e8:	sub	r3, fp, #572	; 0x23c
    23ec:	mov	r1, r3
    23f0:	mov	r2, #0
    23f4:	mov	r3, #0
    23f8:	strd	r2, [r1, #-8]
    23fc:	sub	r3, fp, #588	; 0x24c
    2400:	mov	r1, r3
    2404:	mov	r2, #0
    2408:	mov	r3, #0
    240c:	strd	r2, [r1]
    2410:	sub	r3, fp, #564	; 0x234
    2414:	ldr	r1, [fp, #-896]	; 0xfffffc80
    2418:	mov	r0, r3
    241c:	bl	0 <coda_cursor_set_product>
    2420:	mov	r3, r0
    2424:	cmp	r3, #0
    2428:	beq	2434 <coda_product_check+0x70>
    242c:	mvn	r3, #0
    2430:	b	26bc <coda_product_check+0x2f8>
    2434:	sub	r3, fp, #568	; 0x238
    2438:	mov	r1, r3
    243c:	ldr	r0, [fp, #-896]	; 0xfffffc80
    2440:	bl	0 <coda_get_product_format>
    2444:	mov	r3, r0
    2448:	cmp	r3, #0
    244c:	beq	2458 <coda_product_check+0x94>
    2450:	mvn	r3, #0
    2454:	b	26bc <coda_product_check+0x2f8>
    2458:	ldr	r3, [fp, #-568]	; 0xfffffdc8
    245c:	cmp	r3, #0
    2460:	beq	24b0 <coda_product_check+0xec>
    2464:	ldr	r3, [fp, #-568]	; 0xfffffdc8
    2468:	cmp	r3, #1
    246c:	beq	24b0 <coda_product_check+0xec>
    2470:	ldr	r3, [fp, #-568]	; 0xfffffdc8
    2474:	cmp	r3, #2
    2478:	beq	24b0 <coda_product_check+0xec>
    247c:	ldr	r3, [fp, #-896]	; 0xfffffc80
    2480:	ldr	r3, [r3, #24]
    2484:	cmp	r3, #0
    2488:	beq	24b0 <coda_product_check+0xec>
    248c:	ldr	r3, [fp, #-896]	; 0xfffffc80
    2490:	ldr	r3, [r3, #24]
    2494:	ldr	r3, [r3, #28]
    2498:	cmp	r3, #0
    249c:	beq	24b0 <coda_product_check+0xec>
    24a0:	ldr	r3, [fp, #-896]	; 0xfffffc80
    24a4:	ldr	r3, [r3, #24]
    24a8:	ldr	r3, [r3, #28]
    24ac:	str	r3, [fp, #-40]	; 0xffffffd8
    24b0:	ldr	r3, [fp, #-568]	; 0xfffffdc8
    24b4:	cmp	r3, #0
    24b8:	beq	24c8 <coda_product_check+0x104>
    24bc:	ldr	r3, [fp, #-568]	; 0xfffffdc8
    24c0:	cmp	r3, #1
    24c4:	bne	24d0 <coda_product_check+0x10c>
    24c8:	mov	r3, #1
    24cc:	b	24d4 <coda_product_check+0x110>
    24d0:	mov	r3, #0
    24d4:	str	r3, [fp, #-32]	; 0xffffffe0
    24d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    24dc:	cmp	r3, #0
    24e0:	beq	2524 <coda_product_check+0x160>
    24e4:	sub	r3, fp, #580	; 0x244
    24e8:	mov	r1, r3
    24ec:	ldr	r0, [fp, #-896]	; 0xfffffc80
    24f0:	bl	0 <coda_get_product_file_size>
    24f4:	mov	r3, r0
    24f8:	cmp	r3, #0
    24fc:	beq	2508 <coda_product_check+0x144>
    2500:	mvn	r3, #0
    2504:	b	26bc <coda_product_check+0x2f8>
    2508:	sub	r3, fp, #572	; 0x23c
    250c:	ldrd	r2, [r3, #-8]
    2510:	lsl	r5, r3, #3
    2514:	orr	r5, r5, r2, lsr #29
    2518:	lsl	r4, r2, #3
    251c:	sub	r3, fp, #572	; 0x23c
    2520:	strd	r4, [r3, #-8]
    2524:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2528:	cmp	r3, #0
    252c:	beq	2588 <coda_product_check+0x1c4>
    2530:	ldr	r3, [fp, #-900]	; 0xfffffc7c
    2534:	cmp	r3, #0
    2538:	bne	2588 <coda_product_check+0x1c4>
    253c:	bl	0 <coda_get_option_use_fast_size_expressions>
    2540:	str	r0, [fp, #-36]	; 0xffffffdc
    2544:	mov	r0, #0
    2548:	bl	0 <coda_set_option_use_fast_size_expressions>
    254c:	sub	r2, fp, #588	; 0x24c
    2550:	sub	r3, fp, #564	; 0x234
    2554:	mov	r1, r2
    2558:	mov	r0, r3
    255c:	bl	0 <coda_cursor_get_bit_size>
    2560:	mov	r3, r0
    2564:	cmp	r3, #0
    2568:	beq	257c <coda_product_check+0x1b8>
    256c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2570:	bl	0 <coda_set_option_use_fast_size_expressions>
    2574:	mvn	r3, #0
    2578:	b	26bc <coda_product_check+0x2f8>
    257c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2580:	bl	0 <coda_set_option_use_fast_size_expressions>
    2584:	b	25c8 <coda_product_check+0x204>
    2588:	sub	r1, fp, #40	; 0x28
    258c:	sub	r0, fp, #564	; 0x234
    2590:	ldr	r3, [fp, #-908]	; 0xfffffc74
    2594:	str	r3, [sp, #8]
    2598:	ldr	r3, [fp, #-904]	; 0xfffffc78
    259c:	str	r3, [sp, #4]
    25a0:	sub	r3, fp, #588	; 0x24c
    25a4:	str	r3, [sp]
    25a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    25ac:	ldr	r2, [fp, #-900]	; 0xfffffc7c
    25b0:	bl	dc0 <check_data>
    25b4:	mov	r3, r0
    25b8:	cmp	r3, #0
    25bc:	beq	25c8 <coda_product_check+0x204>
    25c0:	mvn	r3, #0
    25c4:	b	26bc <coda_product_check+0x2f8>
    25c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    25cc:	cmp	r3, #0
    25d0:	beq	26b8 <coda_product_check+0x2f4>
    25d4:	sub	r3, fp, #572	; 0x23c
    25d8:	ldrd	r0, [r3, #-8]
    25dc:	sub	r3, fp, #588	; 0x24c
    25e0:	ldrd	r2, [r3]
    25e4:	cmp	r1, r3
    25e8:	cmpeq	r0, r2
    25ec:	beq	26b8 <coda_product_check+0x2f4>
    25f0:	sub	r3, fp, #572	; 0x23c
    25f4:	ldrd	r2, [r3, #-8]
    25f8:	lsr	r8, r2, #3
    25fc:	orr	r8, r8, r3, lsl #29
    2600:	asr	r9, r3, #3
    2604:	sub	r3, fp, #612	; 0x264
    2608:	mov	r2, r3
    260c:	mov	r0, r8
    2610:	mov	r1, r9
    2614:	bl	0 <coda_str64>
    2618:	sub	r3, fp, #588	; 0x24c
    261c:	ldrd	r2, [r3]
    2620:	lsr	r6, r2, #3
    2624:	orr	r6, r6, r3, lsl #29
    2628:	asr	r7, r3, #3
    262c:	sub	r3, fp, #636	; 0x27c
    2630:	mov	r2, r3
    2634:	mov	r0, r6
    2638:	mov	r1, r7
    263c:	bl	0 <coda_str64>
    2640:	sub	r3, fp, #588	; 0x24c
    2644:	ldrd	r2, [r3]
    2648:	mov	r0, #7
    264c:	mov	r1, #0
    2650:	and	r2, r2, r0
    2654:	and	r3, r3, r1
    2658:	orrs	r3, r2, r3
    265c:	beq	2690 <coda_product_check+0x2cc>
    2660:	sub	r3, fp, #588	; 0x24c
    2664:	ldrd	r2, [r3]
    2668:	mov	r3, r2
    266c:	and	r3, r3, #7
    2670:	sub	r1, fp, #636	; 0x27c
    2674:	sub	r2, fp, #612	; 0x264
    2678:	sub	r0, fp, #892	; 0x37c
    267c:	str	r3, [sp]
    2680:	mov	r3, r1
    2684:	ldr	r1, [pc, #60]	; 26c8 <coda_product_check+0x304>
    2688:	bl	0 <sprintf>
    268c:	b	26a4 <coda_product_check+0x2e0>
    2690:	sub	r3, fp, #636	; 0x27c
    2694:	sub	r2, fp, #612	; 0x264
    2698:	sub	r0, fp, #892	; 0x37c
    269c:	ldr	r1, [pc, #40]	; 26cc <coda_product_check+0x308>
    26a0:	bl	0 <sprintf>
    26a4:	sub	r1, fp, #892	; 0x37c
    26a8:	ldr	r3, [fp, #-904]	; 0xfffffc78
    26ac:	ldr	r2, [fp, #-908]	; 0xfffffc74
    26b0:	mov	r0, #0
    26b4:	blx	r3
    26b8:	mov	r3, #0
    26bc:	mov	r0, r3
    26c0:	sub	sp, fp, #28
    26c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    26c8:	.word	0x000006e8
    26cc:	.word	0x00000738
