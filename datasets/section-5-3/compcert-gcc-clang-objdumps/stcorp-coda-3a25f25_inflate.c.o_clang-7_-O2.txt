
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/zlib/inflate.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_inflateResetKeep>:
       0:	mov	r1, r0
       4:	mvn	r0, #1
       8:	cmp	r1, #0
       c:	ldrne	r2, [r1, #28]
      10:	cmpne	r2, #0
      14:	bne	1c <coda_inflateResetKeep+0x1c>
      18:	bx	lr
      1c:	mov	r0, #0
      20:	str	r0, [r2, #28]
      24:	str	r0, [r1, #8]
      28:	str	r0, [r1, #20]
      2c:	str	r0, [r1, #24]
      30:	ldr	r3, [r2, #8]
      34:	cmp	r3, #0
      38:	andne	r3, r3, #1
      3c:	strne	r3, [r1, #48]	; 0x30
      40:	mov	r1, #7104	; 0x1bc0
      44:	mov	r3, #1
      48:	str	r3, [r2, r1]
      4c:	movw	r1, #7108	; 0x1bc4
      50:	mvn	r3, #0
      54:	str	r3, [r2, r1]
      58:	mov	r1, #32768	; 0x8000
      5c:	str	r0, [r2]
      60:	str	r0, [r2, #4]
      64:	str	r0, [r2, #12]
      68:	str	r1, [r2, #20]
      6c:	add	r1, r2, #1328	; 0x530
      70:	str	r0, [r2, #32]
      74:	str	r0, [r2, #56]	; 0x38
      78:	str	r0, [r2, #60]	; 0x3c
      7c:	str	r1, [r2, #108]	; 0x6c
      80:	str	r1, [r2, #76]	; 0x4c
      84:	str	r1, [r2, #80]	; 0x50
      88:	bx	lr

0000008c <coda_inflateReset>:
      8c:	mov	r1, r0
      90:	mvn	r0, #1
      94:	cmp	r1, #0
      98:	ldrne	r2, [r1, #28]
      9c:	cmpne	r2, #0
      a0:	bne	a8 <coda_inflateReset+0x1c>
      a4:	bx	lr
      a8:	mov	r0, #0
      ac:	str	r0, [r2, #40]	; 0x28
      b0:	str	r0, [r2, #44]	; 0x2c
      b4:	str	r0, [r2, #48]	; 0x30
      b8:	str	r0, [r2, #28]
      bc:	str	r0, [r1, #8]
      c0:	str	r0, [r1, #20]
      c4:	str	r0, [r1, #24]
      c8:	ldr	r3, [r2, #8]
      cc:	cmp	r3, #0
      d0:	andne	r3, r3, #1
      d4:	strne	r3, [r1, #48]	; 0x30
      d8:	mov	r1, #7104	; 0x1bc0
      dc:	mov	r3, #1
      e0:	str	r3, [r2, r1]
      e4:	movw	r1, #7108	; 0x1bc4
      e8:	mvn	r3, #0
      ec:	str	r3, [r2, r1]
      f0:	mov	r1, #32768	; 0x8000
      f4:	str	r0, [r2]
      f8:	str	r0, [r2, #4]
      fc:	str	r0, [r2, #12]
     100:	str	r1, [r2, #20]
     104:	add	r1, r2, #1328	; 0x530
     108:	str	r0, [r2, #32]
     10c:	str	r0, [r2, #56]	; 0x38
     110:	str	r0, [r2, #60]	; 0x3c
     114:	str	r1, [r2, #108]	; 0x6c
     118:	str	r1, [r2, #76]	; 0x4c
     11c:	str	r1, [r2, #80]	; 0x50
     120:	bx	lr

00000124 <coda_inflateReset2>:
     124:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     128:	add	fp, sp, #24
     12c:	mvn	r4, #1
     130:	cmp	r0, #0
     134:	beq	244 <coda_inflateReset2+0x120>
     138:	ldr	r7, [r0, #28]
     13c:	mov	r5, r0
     140:	cmp	r7, #0
     144:	beq	244 <coda_inflateReset2+0x120>
     148:	mov	r6, r1
     14c:	cmn	r1, #1
     150:	ble	168 <coda_inflateReset2+0x44>
     154:	mov	r0, #1
     158:	cmp	r6, #48	; 0x30
     15c:	add	r8, r0, r6, lsr #4
     160:	andlt	r6, r6, #15
     164:	b	170 <coda_inflateReset2+0x4c>
     168:	rsb	r6, r6, #0
     16c:	mov	r8, #0
     170:	cmp	r6, #0
     174:	bicne	r0, r6, #7
     178:	cmpne	r0, #8
     17c:	bne	244 <coda_inflateReset2+0x120>
     180:	ldr	r1, [r7, #52]	; 0x34
     184:	cmp	r1, #0
     188:	ldrne	r0, [r7, #36]	; 0x24
     18c:	cmpne	r0, r6
     190:	bne	1a0 <coda_inflateReset2+0x7c>
     194:	str	r6, [r7, #36]	; 0x24
     198:	str	r8, [r7, #8]
     19c:	b	1cc <coda_inflateReset2+0xa8>
     1a0:	ldr	r2, [r5, #36]	; 0x24
     1a4:	ldr	r0, [r5, #40]	; 0x28
     1a8:	blx	r2
     1ac:	mov	r0, #0
     1b0:	str	r0, [r7, #52]	; 0x34
     1b4:	ldr	r0, [r5, #28]
     1b8:	str	r6, [r7, #36]	; 0x24
     1bc:	str	r8, [r7, #8]
     1c0:	cmp	r0, #0
     1c4:	mov	r7, r0
     1c8:	beq	244 <coda_inflateReset2+0x120>
     1cc:	mov	r4, #0
     1d0:	mov	r1, #1
     1d4:	str	r4, [r7, #40]	; 0x28
     1d8:	str	r4, [r7, #44]	; 0x2c
     1dc:	str	r4, [r7, #48]	; 0x30
     1e0:	str	r4, [r7, #28]
     1e4:	str	r4, [r5, #8]
     1e8:	str	r4, [r5, #20]
     1ec:	str	r4, [r5, #24]
     1f0:	ldr	r0, [r7, #8]
     1f4:	cmp	r0, #0
     1f8:	andne	r0, r0, #1
     1fc:	strne	r0, [r5, #48]	; 0x30
     200:	mov	r0, #7104	; 0x1bc0
     204:	str	r1, [r7, r0]
     208:	movw	r0, #7108	; 0x1bc4
     20c:	mvn	r1, #0
     210:	str	r1, [r7, r0]
     214:	mov	r0, #32768	; 0x8000
     218:	str	r4, [r7]
     21c:	str	r4, [r7, #4]
     220:	str	r4, [r7, #12]
     224:	str	r0, [r7, #20]
     228:	add	r0, r7, #1328	; 0x530
     22c:	str	r4, [r7, #32]
     230:	str	r4, [r7, #56]	; 0x38
     234:	str	r4, [r7, #60]	; 0x3c
     238:	str	r0, [r7, #108]	; 0x6c
     23c:	str	r0, [r7, #76]	; 0x4c
     240:	str	r0, [r7, #80]	; 0x50
     244:	mov	r0, r4
     248:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000024c <coda_inflateInit2_>:
     24c:	push	{r4, r5, r6, r7, fp, lr}
     250:	add	fp, sp, #16
     254:	mvn	r6, #5
     258:	cmp	r2, #0
     25c:	beq	274 <coda_inflateInit2_+0x28>
     260:	cmp	r3, #56	; 0x38
     264:	moveq	r4, r0
     268:	ldrbeq	r0, [r2]
     26c:	cmpeq	r0, #49	; 0x31
     270:	beq	27c <coda_inflateInit2_+0x30>
     274:	mov	r0, r6
     278:	pop	{r4, r5, r6, r7, fp, pc}
     27c:	cmp	r4, #0
     280:	mvneq	r6, #1
     284:	moveq	r0, r6
     288:	popeq	{r4, r5, r6, r7, fp, pc}
     28c:	mov	r0, #0
     290:	mov	r5, r1
     294:	str	r0, [r4, #24]
     298:	ldr	r3, [r4, #32]
     29c:	cmp	r3, #0
     2a0:	bne	2b4 <coda_inflateInit2_+0x68>
     2a4:	movw	r3, #0
     2a8:	str	r0, [r4, #40]	; 0x28
     2ac:	movt	r3, #0
     2b0:	str	r3, [r4, #32]
     2b4:	ldr	r0, [r4, #36]	; 0x24
     2b8:	mov	r1, #1
     2bc:	movw	r2, #7116	; 0x1bcc
     2c0:	cmp	r0, #0
     2c4:	movweq	r0, #0
     2c8:	movteq	r0, #0
     2cc:	streq	r0, [r4, #36]	; 0x24
     2d0:	ldr	r0, [r4, #40]	; 0x28
     2d4:	blx	r3
     2d8:	cmp	r0, #0
     2dc:	mvneq	r6, #3
     2e0:	moveq	r0, r6
     2e4:	popeq	{r4, r5, r6, r7, fp, pc}
     2e8:	mov	r6, #0
     2ec:	str	r0, [r4, #28]
     2f0:	mov	r7, r0
     2f4:	mov	r1, r5
     2f8:	str	r6, [r0, #52]	; 0x34
     2fc:	mov	r0, r4
     300:	bl	124 <coda_inflateReset2>
     304:	cmp	r0, #0
     308:	beq	274 <coda_inflateInit2_+0x28>
     30c:	mov	r5, r0
     310:	ldr	r2, [r4, #36]	; 0x24
     314:	ldr	r0, [r4, #40]	; 0x28
     318:	mov	r1, r7
     31c:	blx	r2
     320:	mov	r0, #0
     324:	mov	r6, r5
     328:	str	r0, [r4, #28]
     32c:	mov	r0, r6
     330:	pop	{r4, r5, r6, r7, fp, pc}
     334:	nop	{0}
     338:	nop	{0}
     33c:	nop	{0}

00000340 <coda_inflateInit_>:
     340:	push	{r4, r5, fp, lr}
     344:	add	fp, sp, #8
     348:	mov	r4, r0
     34c:	mvn	r0, #5
     350:	cmp	r1, #0
     354:	popeq	{r4, r5, fp, pc}
     358:	cmp	r2, #56	; 0x38
     35c:	ldrbeq	r1, [r1]
     360:	cmpeq	r1, #49	; 0x31
     364:	beq	36c <coda_inflateInit_+0x2c>
     368:	pop	{r4, r5, fp, pc}
     36c:	cmp	r4, #0
     370:	mvneq	r0, #1
     374:	popeq	{r4, r5, fp, pc}
     378:	mov	r0, #0
     37c:	str	r0, [r4, #24]
     380:	ldr	r3, [r4, #32]
     384:	cmp	r3, #0
     388:	bne	39c <coda_inflateInit_+0x5c>
     38c:	movw	r3, #0
     390:	str	r0, [r4, #40]	; 0x28
     394:	movt	r3, #0
     398:	str	r3, [r4, #32]
     39c:	ldr	r0, [r4, #36]	; 0x24
     3a0:	mov	r1, #1
     3a4:	movw	r2, #7116	; 0x1bcc
     3a8:	mov	r5, #1
     3ac:	cmp	r0, #0
     3b0:	movweq	r0, #0
     3b4:	movteq	r0, #0
     3b8:	streq	r0, [r4, #36]	; 0x24
     3bc:	ldr	r0, [r4, #40]	; 0x28
     3c0:	blx	r3
     3c4:	cmp	r0, #0
     3c8:	mvneq	r0, #3
     3cc:	popeq	{r4, r5, fp, pc}
     3d0:	str	r0, [r4, #28]
     3d4:	add	r2, pc, #116	; 0x74
     3d8:	mov	r1, r0
     3dc:	mov	r0, #0
     3e0:	vld1.64	{d16-d17}, [r2 :128]
     3e4:	add	r2, r1, #36	; 0x24
     3e8:	str	r0, [r1, #28]
     3ec:	str	r0, [r1, #52]	; 0x34
     3f0:	vst1.32	{d16-d17}, [r2]
     3f4:	str	r0, [r4, #8]
     3f8:	str	r0, [r4, #20]
     3fc:	str	r0, [r4, #24]
     400:	str	r5, [r4, #48]	; 0x30
     404:	add	r3, pc, #84	; 0x54
     408:	mov	r2, #7104	; 0x1bc0
     40c:	vld1.64	{d16-d17}, [r3 :128]
     410:	str	r5, [r1, r2]
     414:	mov	r2, #32768	; 0x8000
     418:	str	r2, [r1, #20]
     41c:	add	r2, r1, #1328	; 0x530
     420:	str	r0, [r1, #32]
     424:	str	r0, [r1, #56]	; 0x38
     428:	str	r0, [r1, #60]	; 0x3c
     42c:	str	r2, [r1, #108]	; 0x6c
     430:	str	r2, [r1, #76]	; 0x4c
     434:	str	r2, [r1, #80]	; 0x50
     438:	movw	r2, #7108	; 0x1bc4
     43c:	vst1.32	{d16-d17}, [r1], r2
     440:	mvn	r2, #0
     444:	str	r2, [r1]
     448:	pop	{r4, r5, fp, pc}
     44c:	nop	{0}
     450:	.word	0x0000000f
	...
     468:	.word	0x00000001
     46c:	.word	0x00000000

00000470 <coda_inflatePrime>:
     470:	push	{fp, lr}
     474:	mov	fp, sp
     478:	mov	r3, r0
     47c:	mvn	r0, #1
     480:	cmp	r3, #0
     484:	ldrne	r3, [r3, #28]
     488:	cmpne	r3, #0
     48c:	bne	494 <coda_inflatePrime+0x24>
     490:	pop	{fp, pc}
     494:	cmn	r1, #1
     498:	ble	4d4 <coda_inflatePrime+0x64>
     49c:	cmp	r1, #16
     4a0:	bgt	490 <coda_inflatePrime+0x20>
     4a4:	ldr	ip, [r3, #60]	; 0x3c
     4a8:	add	lr, ip, r1
     4ac:	cmp	lr, #32
     4b0:	pophi	{fp, pc}
     4b4:	mvn	r0, #0
     4b8:	str	lr, [r3, #60]	; 0x3c
     4bc:	bic	r0, r2, r0, lsl r1
     4c0:	ldr	r1, [r3, #56]	; 0x38
     4c4:	add	r0, r1, r0, lsl ip
     4c8:	str	r0, [r3, #56]	; 0x38
     4cc:	mov	r0, #0
     4d0:	pop	{fp, pc}
     4d4:	mov	r0, #0
     4d8:	str	r0, [r3, #56]	; 0x38
     4dc:	str	r0, [r3, #60]	; 0x3c
     4e0:	pop	{fp, pc}

000004e4 <coda_inflate>:
     4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4e8:	add	fp, sp, #28
     4ec:	sub	sp, sp, #100	; 0x64
     4f0:	mvn	r3, #1
     4f4:	cmp	r0, #0
     4f8:	beq	514 <coda_inflate+0x30>
     4fc:	ldr	lr, [r0, #28]
     500:	mov	ip, r0
     504:	cmp	lr, #0
     508:	ldrne	r2, [ip, #12]
     50c:	cmpne	r2, #0
     510:	bne	520 <coda_inflate+0x3c>
     514:	mov	r0, r3
     518:	sub	sp, fp, #28
     51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     520:	ldr	sl, [ip]
     524:	cmp	sl, #0
     528:	beq	1c0c <coda_inflate+0x1728>
     52c:	ldr	r0, [lr]
     530:	str	r2, [fp, #-40]	; 0xffffffd8
     534:	movw	r2, #7112	; 0x1bc8
     538:	str	r1, [fp, #-56]	; 0xffffffc8
     53c:	sub	r1, r1, #5
     540:	str	ip, [fp, #-44]	; 0xffffffd4
     544:	str	lr, [fp, #-36]	; 0xffffffdc
     548:	add	r2, lr, r2
     54c:	str	r1, [sp, #60]	; 0x3c
     550:	add	r1, lr, #112	; 0x70
     554:	str	r2, [sp, #32]
     558:	movw	r2, #7108	; 0x1bc4
     55c:	str	r1, [sp, #52]	; 0x34
     560:	add	r1, lr, #108	; 0x6c
     564:	add	r2, lr, r2
     568:	str	r1, [sp, #48]	; 0x30
     56c:	add	r1, lr, #1328	; 0x530
     570:	cmp	r0, #11
     574:	str	r2, [fp, #-60]	; 0xffffffc4
     578:	add	r2, lr, #7104	; 0x1bc0
     57c:	str	r1, [sp, #40]	; 0x28
     580:	add	r1, lr, #84	; 0x54
     584:	moveq	r0, #12
     588:	str	r2, [sp, #24]
     58c:	add	r2, lr, #624	; 0x270
     590:	str	r1, [sp, #36]	; 0x24
     594:	add	r1, lr, #88	; 0x58
     598:	streq	r0, [lr]
     59c:	str	r2, [sp, #28]
     5a0:	add	r2, lr, #752	; 0x2f0
     5a4:	str	r1, [sp, #20]
     5a8:	mov	r1, #0
     5ac:	ldr	r8, [ip, #4]
     5b0:	ldr	r9, [ip, #16]
     5b4:	ldr	r4, [lr, #56]	; 0x38
     5b8:	ldr	r5, [lr, #60]	; 0x3c
     5bc:	str	r2, [sp, #44]	; 0x2c
     5c0:	str	r1, [fp, #-52]	; 0xffffffcc
     5c4:	str	r8, [sp, #64]	; 0x40
     5c8:	str	r9, [fp, #-48]	; 0xffffffd0
     5cc:	cmp	r0, #30
     5d0:	bhi	1ba4 <coda_inflate+0x16c0>
     5d4:	add	r1, pc, #4
     5d8:	mov	r6, #1
     5dc:	ldr	pc, [r1, r0, lsl #2]
     5e0:	.word	0x0000065c
     5e4:	.word	0x000006f8
     5e8:	.word	0x00000744
     5ec:	.word	0x00000750
     5f0:	.word	0x000010ec
     5f4:	.word	0x0000118c
     5f8:	.word	0x00001248
     5fc:	.word	0x00001304
     600:	.word	0x000013b0
     604:	.word	0x0000075c
     608:	.word	0x000007a0
     60c:	.word	0x000007d4
     610:	.word	0x000007e0
     614:	.word	0x00000898
     618:	.word	0x00000900
     61c:	.word	0x00000908
     620:	.word	0x00000978
     624:	.word	0x000009ec
     628:	.word	0x00000a00
     62c:	.word	0x00001524
     630:	.word	0x0000152c
     634:	.word	0x00000a08
     638:	.word	0x00001770
     63c:	.word	0x00000a1c
     640:	.word	0x00001928
     644:	.word	0x00000a2c
     648:	.word	0x00000a60
     64c:	.word	0x00001484
     650:	.word	0x00001bb4
     654:	.word	0x00001d4c
     658:	.word	0x00001d54
     65c:	ldr	r0, [lr, #8]
     660:	cmp	r0, #0
     664:	beq	ad8 <coda_inflate+0x5f4>
     668:	cmp	r5, #15
     66c:	bhi	690 <coda_inflate+0x1ac>
     670:	cmp	r8, #0
     674:	beq	1bac <coda_inflate+0x16c8>
     678:	ldrb	r1, [sl], #1
     67c:	sub	r8, r8, #1
     680:	add	r4, r4, r1, lsl r5
     684:	add	r5, r5, #8
     688:	cmp	r5, #16
     68c:	bcc	670 <coda_inflate+0x18c>
     690:	tst	r0, #2
     694:	beq	ecc <coda_inflate+0x9e8>
     698:	movw	r6, #35615	; 0x8b1f
     69c:	cmp	r4, r6
     6a0:	bne	ecc <coda_inflate+0x9e8>
     6a4:	mov	r0, #0
     6a8:	mov	r1, #0
     6ac:	mov	r2, #0
     6b0:	mov	r4, #0
     6b4:	bl	0 <coda_crc32>
     6b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     6bc:	mov	r2, #2
     6c0:	str	r0, [r1, #24]
     6c4:	sub	r1, fp, #32
     6c8:	strh	r6, [fp, #-32]	; 0xffffffe0
     6cc:	bl	0 <coda_crc32>
     6d0:	ldr	lr, [fp, #-36]	; 0xffffffdc
     6d4:	ldr	ip, [fp, #-44]	; 0xffffffd4
     6d8:	mov	r5, #0
     6dc:	str	r0, [lr, #24]
     6e0:	mov	r0, #1
     6e4:	str	r0, [lr]
     6e8:	ldr	r0, [lr]
     6ec:	cmp	r0, #30
     6f0:	bls	5d4 <coda_inflate+0xf0>
     6f4:	b	1ba4 <coda_inflate+0x16c0>
     6f8:	cmp	r5, #15
     6fc:	bhi	720 <coda_inflate+0x23c>
     700:	cmp	r8, #0
     704:	beq	1bac <coda_inflate+0x16c8>
     708:	ldrb	r0, [sl], #1
     70c:	sub	r8, r8, #1
     710:	add	r4, r4, r0, lsl r5
     714:	add	r5, r5, #8
     718:	cmp	r5, #16
     71c:	bcc	700 <coda_inflate+0x21c>
     720:	uxtb	r0, r4
     724:	str	r4, [lr, #16]
     728:	cmp	r0, #8
     72c:	bne	1af8 <coda_inflate+0x1614>
     730:	tst	r4, #57344	; 0xe000
     734:	beq	fa0 <coda_inflate+0xabc>
     738:	movw	r0, #0
     73c:	movt	r0, #0
     740:	b	1b00 <coda_inflate+0x161c>
     744:	cmp	r5, #31
     748:	bls	ff0 <coda_inflate+0xb0c>
     74c:	b	1010 <coda_inflate+0xb2c>
     750:	cmp	r5, #15
     754:	bls	1070 <coda_inflate+0xb8c>
     758:	b	1090 <coda_inflate+0xbac>
     75c:	cmp	r5, #31
     760:	bhi	784 <coda_inflate+0x2a0>
     764:	cmp	r8, #0
     768:	beq	1bac <coda_inflate+0x16c8>
     76c:	ldrb	r0, [sl], #1
     770:	sub	r8, r8, #1
     774:	add	r4, r4, r0, lsl r5
     778:	add	r5, r5, #8
     77c:	cmp	r5, #32
     780:	bcc	764 <coda_inflate+0x280>
     784:	rev	r0, r4
     788:	mov	r4, #0
     78c:	mov	r5, #0
     790:	str	r0, [lr, #24]
     794:	str	r0, [ip, #48]	; 0x30
     798:	mov	r0, #10
     79c:	str	r0, [lr]
     7a0:	ldr	r0, [lr, #12]
     7a4:	cmp	r0, #0
     7a8:	beq	1d78 <coda_inflate+0x1894>
     7ac:	mov	r0, #0
     7b0:	mov	r1, #0
     7b4:	mov	r2, #0
     7b8:	bl	0 <coda_adler32>
     7bc:	ldr	lr, [fp, #-36]	; 0xffffffdc
     7c0:	ldr	ip, [fp, #-44]	; 0xffffffd4
     7c4:	str	r0, [lr, #24]
     7c8:	str	r0, [ip, #48]	; 0x30
     7cc:	mov	r0, #11
     7d0:	str	r0, [lr]
     7d4:	ldr	r0, [sp, #60]	; 0x3c
     7d8:	cmp	r0, #2
     7dc:	bcc	1d34 <coda_inflate+0x1850>
     7e0:	ldr	r0, [lr, #4]
     7e4:	cmp	r0, #0
     7e8:	beq	810 <coda_inflate+0x32c>
     7ec:	mov	r0, #26
     7f0:	str	r0, [lr]
     7f4:	and	r0, r5, #7
     7f8:	sub	r5, r5, r0
     7fc:	lsr	r4, r4, r0
     800:	ldr	r0, [lr]
     804:	cmp	r0, #30
     808:	bls	5d4 <coda_inflate+0xf0>
     80c:	b	1ba4 <coda_inflate+0x16c0>
     810:	cmp	r5, #3
     814:	bcs	830 <coda_inflate+0x34c>
     818:	cmp	r8, #0
     81c:	beq	1bac <coda_inflate+0x16c8>
     820:	ldrb	r0, [sl], #1
     824:	sub	r8, r8, #1
     828:	add	r4, r4, r0, lsl r5
     82c:	add	r5, r5, #8
     830:	and	r0, r4, #1
     834:	str	r0, [lr, #4]
     838:	ubfx	r1, r4, #1, #2
     83c:	cmp	r1, #3
     840:	beq	e8c <coda_inflate+0x9a8>
     844:	cmp	r1, #2
     848:	beq	ea0 <coda_inflate+0x9bc>
     84c:	mov	r0, #13
     850:	cmp	r1, #1
     854:	bne	ea4 <coda_inflate+0x9c0>
     858:	movw	r1, #0
     85c:	movw	r2, #0
     860:	mov	r0, #9
     864:	mov	r3, #5
     868:	movt	r1, #0
     86c:	movt	r2, #0
     870:	str	r1, [lr, #76]	; 0x4c
     874:	str	r2, [lr, #80]	; 0x50
     878:	str	r0, [lr, #84]	; 0x54
     87c:	mov	r0, #19
     880:	str	r3, [lr, #88]	; 0x58
     884:	str	r0, [lr]
     888:	ldr	r0, [fp, #-56]	; 0xffffffc8
     88c:	cmp	r0, #6
     890:	bne	ea8 <coda_inflate+0x9c4>
     894:	b	1dbc <coda_inflate+0x18d8>
     898:	and	r0, r5, #7
     89c:	sub	r5, r5, r0
     8a0:	lsr	r4, r4, r0
     8a4:	cmp	r5, #31
     8a8:	bhi	8cc <coda_inflate+0x3e8>
     8ac:	cmp	r8, #0
     8b0:	beq	1bac <coda_inflate+0x16c8>
     8b4:	ldrb	r0, [sl], #1
     8b8:	sub	r8, r8, #1
     8bc:	add	r4, r4, r0, lsl r5
     8c0:	add	r5, r5, #8
     8c4:	cmp	r5, #32
     8c8:	bcc	8ac <coda_inflate+0x3c8>
     8cc:	movw	r0, #65535	; 0xffff
     8d0:	eor	r1, r0, r4, lsr #16
     8d4:	uxth	r0, r4
     8d8:	cmp	r0, r1
     8dc:	bne	ae0 <coda_inflate+0x5fc>
     8e0:	mov	r1, #14
     8e4:	mov	r4, #0
     8e8:	mov	r5, #0
     8ec:	str	r1, [lr]
     8f0:	str	r0, [lr, #64]	; 0x40
     8f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
     8f8:	cmp	r0, #6
     8fc:	beq	1db0 <coda_inflate+0x18cc>
     900:	mov	r0, #15
     904:	str	r0, [lr]
     908:	ldr	r6, [lr, #64]	; 0x40
     90c:	cmp	r6, #0
     910:	beq	1864 <coda_inflate+0x1380>
     914:	cmp	r6, r8
     918:	movhi	r6, r8
     91c:	cmp	r6, r9
     920:	movhi	r6, r9
     924:	cmp	r6, #0
     928:	beq	1d34 <coda_inflate+0x1850>
     92c:	ldr	r7, [fp, #-40]	; 0xffffffd8
     930:	mov	r1, sl
     934:	mov	r2, r6
     938:	mov	r0, r7
     93c:	bl	0 <memcpy>
     940:	ldr	lr, [fp, #-36]	; 0xffffffdc
     944:	ldr	ip, [fp, #-44]	; 0xffffffd4
     948:	add	r7, r7, r6
     94c:	sub	r9, r9, r6
     950:	add	sl, sl, r6
     954:	sub	r8, r8, r6
     958:	str	r7, [fp, #-40]	; 0xffffffd8
     95c:	ldr	r0, [lr, #64]	; 0x40
     960:	sub	r0, r0, r6
     964:	str	r0, [lr, #64]	; 0x40
     968:	ldr	r0, [lr]
     96c:	cmp	r0, #30
     970:	bls	5d4 <coda_inflate+0xf0>
     974:	b	1ba4 <coda_inflate+0x16c0>
     978:	cmp	r5, #13
     97c:	bhi	9a0 <coda_inflate+0x4bc>
     980:	cmp	r8, #0
     984:	beq	1bac <coda_inflate+0x16c8>
     988:	ldrb	r0, [sl], #1
     98c:	sub	r8, r8, #1
     990:	add	r4, r4, r0, lsl r5
     994:	add	r5, r5, #8
     998:	cmp	r5, #14
     99c:	bcc	980 <coda_inflate+0x49c>
     9a0:	ubfx	r1, r4, #5, #5
     9a4:	movw	r2, #257	; 0x101
     9a8:	movw	r3, #286	; 0x11e
     9ac:	sub	r5, r5, #14
     9b0:	add	r0, r1, #1
     9b4:	str	r0, [lr, #100]	; 0x64
     9b8:	and	r0, r4, #31
     9bc:	add	r2, r0, r2
     9c0:	cmp	r2, r3
     9c4:	str	r2, [lr, #96]	; 0x60
     9c8:	ubfx	r0, r4, #10, #4
     9cc:	lsr	r4, r4, #14
     9d0:	add	r0, r0, #4
     9d4:	cmpls	r1, #30
     9d8:	str	r0, [lr, #92]	; 0x5c
     9dc:	bcc	aec <coda_inflate+0x608>
     9e0:	movw	r0, #0
     9e4:	movt	r0, #0
     9e8:	b	1b00 <coda_inflate+0x161c>
     9ec:	ldr	r0, [lr, #92]	; 0x5c
     9f0:	ldr	r1, [lr, #104]	; 0x68
     9f4:	cmp	r1, r0
     9f8:	bcc	afc <coda_inflate+0x618>
     9fc:	b	b50 <coda_inflate+0x66c>
     a00:	ldr	r6, [lr, #104]	; 0x68
     a04:	b	bfc <coda_inflate+0x718>
     a08:	ldr	r0, [lr, #72]	; 0x48
     a0c:	cmp	r0, #0
     a10:	bne	1720 <coda_inflate+0x123c>
     a14:	ldr	r1, [lr, #64]	; 0x40
     a18:	b	1760 <coda_inflate+0x127c>
     a1c:	ldr	r0, [lr, #72]	; 0x48
     a20:	cmp	r0, #0
     a24:	bne	18e0 <coda_inflate+0x13fc>
     a28:	b	1920 <coda_inflate+0x143c>
     a2c:	cmp	r9, #0
     a30:	beq	1d34 <coda_inflate+0x1850>
     a34:	ldr	r0, [lr, #64]	; 0x40
     a38:	ldr	r1, [fp, #-40]	; 0xffffffd8
     a3c:	sub	r9, r9, #1
     a40:	strb	r0, [r1], #1
     a44:	mov	r0, #20
     a48:	str	r0, [lr]
     a4c:	str	r1, [fp, #-40]	; 0xffffffd8
     a50:	ldr	r0, [lr]
     a54:	cmp	r0, #30
     a58:	bls	5d4 <coda_inflate+0xf0>
     a5c:	b	1ba4 <coda_inflate+0x16c0>
     a60:	ldr	r0, [lr, #8]
     a64:	cmp	r0, #0
     a68:	beq	147c <coda_inflate+0xf98>
     a6c:	cmp	r5, #31
     a70:	bhi	a94 <coda_inflate+0x5b0>
     a74:	cmp	r8, #0
     a78:	beq	1bac <coda_inflate+0x16c8>
     a7c:	ldrb	r0, [sl], #1
     a80:	sub	r8, r8, #1
     a84:	add	r4, r4, r0, lsl r5
     a88:	add	r5, r5, #8
     a8c:	cmp	r5, #32
     a90:	bcc	a74 <coda_inflate+0x590>
     a94:	ldr	r0, [fp, #-48]	; 0xffffffd0
     a98:	subs	r2, r0, r9
     a9c:	ldr	r0, [ip, #20]
     aa0:	add	r0, r0, r2
     aa4:	str	r0, [ip, #20]
     aa8:	ldr	r0, [lr, #28]
     aac:	add	r0, r0, r2
     ab0:	str	r0, [lr, #28]
     ab4:	beq	f2c <coda_inflate+0xa48>
     ab8:	ldr	r0, [fp, #-40]	; 0xffffffd8
     abc:	ldr	r3, [lr, #16]
     ac0:	sub	r1, r0, r2
     ac4:	ldr	r0, [lr, #24]
     ac8:	cmp	r3, #0
     acc:	beq	1444 <coda_inflate+0xf60>
     ad0:	bl	0 <coda_crc32>
     ad4:	b	1448 <coda_inflate+0xf64>
     ad8:	mov	r0, #12
     adc:	b	1b08 <coda_inflate+0x1624>
     ae0:	movw	r0, #0
     ae4:	movt	r0, #0
     ae8:	b	1b00 <coda_inflate+0x161c>
     aec:	mov	r1, #17
     af0:	str	r1, [lr]
     af4:	mov	r1, #0
     af8:	str	r1, [lr, #104]	; 0x68
     afc:	movw	r2, #0
     b00:	movt	r2, #0
     b04:	add	r2, r2, r1, lsl #1
     b08:	cmp	r5, #2
     b0c:	bhi	b28 <coda_inflate+0x644>
     b10:	cmp	r8, #0
     b14:	beq	1bac <coda_inflate+0x16c8>
     b18:	ldrb	r3, [sl], #1
     b1c:	sub	r8, r8, #1
     b20:	add	r4, r4, r3, lsl r5
     b24:	add	r5, r5, #8
     b28:	add	r1, r1, #1
     b2c:	and	r7, r4, #7
     b30:	sub	r5, r5, #3
     b34:	lsr	r4, r4, #3
     b38:	str	r1, [lr, #104]	; 0x68
     b3c:	cmp	r1, r0
     b40:	ldrh	r3, [r2], #2
     b44:	add	r3, lr, r3, lsl #1
     b48:	strh	r7, [r3, #112]	; 0x70
     b4c:	bcc	b08 <coda_inflate+0x624>
     b50:	ldr	r7, [sp, #44]	; 0x2c
     b54:	ldr	r3, [sp, #48]	; 0x30
     b58:	cmp	r1, #18
     b5c:	bhi	b90 <coda_inflate+0x6ac>
     b60:	movw	r0, #0
     b64:	movt	r0, #0
     b68:	add	r0, r0, r1, lsl #1
     b6c:	rsb	r1, r1, #19
     b70:	ldrh	r2, [r0], #2
     b74:	subs	r1, r1, #1
     b78:	mov	r6, #0
     b7c:	add	r2, lr, r2, lsl #1
     b80:	strh	r6, [r2, #112]	; 0x70
     b84:	bne	b70 <coda_inflate+0x68c>
     b88:	mov	r0, #19
     b8c:	str	r0, [lr, #104]	; 0x68
     b90:	ldr	r0, [sp, #40]	; 0x28
     b94:	mov	r2, #19
     b98:	mov	r6, lr
     b9c:	str	r0, [lr, #76]	; 0x4c
     ba0:	str	r0, [lr, #108]	; 0x6c
     ba4:	mov	r0, #7
     ba8:	str	r0, [lr, #84]	; 0x54
     bac:	ldr	r0, [sp, #36]	; 0x24
     bb0:	stm	sp, {r0, r7}
     bb4:	mov	r0, #0
     bb8:	mov	r7, #0
     bbc:	ldr	r1, [sp, #52]	; 0x34
     bc0:	bl	0 <coda_inflate_table>
     bc4:	cmp	r0, #0
     bc8:	beq	bdc <coda_inflate+0x6f8>
     bcc:	str	r0, [fp, #-52]	; 0xffffffcc
     bd0:	movw	r0, #0
     bd4:	movt	r0, #0
     bd8:	b	f7c <coda_inflate+0xa98>
     bdc:	ldr	ip, [fp, #-44]	; 0xffffffd4
     be0:	mov	r0, #18
     be4:	mov	lr, r6
     be8:	str	r0, [r6]
     bec:	str	r7, [r6, #104]	; 0x68
     bf0:	mov	r0, #0
     bf4:	mov	r6, #0
     bf8:	str	r0, [fp, #-52]	; 0xffffffcc
     bfc:	ldr	r1, [lr, #96]	; 0x60
     c00:	ldr	r0, [lr, #100]	; 0x64
     c04:	add	r0, r0, r1
     c08:	str	r1, [sp, #12]
     c0c:	cmp	r6, r0
     c10:	str	r0, [sp, #16]
     c14:	bcs	e28 <coda_inflate+0x944>
     c18:	ldr	r0, [lr, #84]	; 0x54
     c1c:	ldr	r1, [lr, #76]	; 0x4c
     c20:	mvn	r2, #0
     c24:	mvn	r3, r2, lsl r0
     c28:	and	r7, r4, r3
     c2c:	add	r0, r1, r7, lsl #2
     c30:	ldrb	r0, [r0, #1]
     c34:	cmp	r5, r0
     c38:	bcs	c68 <coda_inflate+0x784>
     c3c:	cmp	r8, #0
     c40:	beq	1bac <coda_inflate+0x16c8>
     c44:	ldrb	r0, [sl], #1
     c48:	sub	r8, r8, #1
     c4c:	add	r4, r4, r0, lsl r5
     c50:	add	r5, r5, #8
     c54:	and	r7, r4, r3
     c58:	add	r0, r1, r7, lsl #2
     c5c:	ldrb	r0, [r0, #1]
     c60:	cmp	r5, r0
     c64:	bcc	c3c <coda_inflate+0x758>
     c68:	add	r2, r1, r7, lsl #2
     c6c:	ldrh	r2, [r2, #2]
     c70:	cmp	r2, #15
     c74:	bhi	c98 <coda_inflate+0x7b4>
     c78:	add	r7, r6, #1
     c7c:	add	r6, lr, r6, lsl #1
     c80:	sub	r5, r5, r0
     c84:	lsr	r4, r4, r0
     c88:	str	r7, [lr, #104]	; 0x68
     c8c:	strh	r2, [r6, #112]	; 0x70
     c90:	mov	r6, r7
     c94:	b	e1c <coda_inflate+0x938>
     c98:	cmp	r2, #16
     c9c:	beq	cf8 <coda_inflate+0x814>
     ca0:	cmp	r2, #17
     ca4:	bne	d50 <coda_inflate+0x86c>
     ca8:	add	r7, r0, #3
     cac:	cmp	r5, r7
     cb0:	bcs	cd4 <coda_inflate+0x7f0>
     cb4:	cmp	r8, #0
     cb8:	beq	1bac <coda_inflate+0x16c8>
     cbc:	ldrb	r2, [sl], #1
     cc0:	sub	r8, r8, #1
     cc4:	add	r4, r4, r2, lsl r5
     cc8:	add	r5, r5, #8
     ccc:	cmp	r5, r7
     cd0:	bcc	cb4 <coda_inflate+0x7d0>
     cd4:	mov	r2, #7
     cd8:	and	r2, r2, r4, lsr r0
     cdc:	add	r7, r2, #3
     ce0:	mvn	r2, #2
     ce4:	sub	r2, r2, r0
     ce8:	lsr	r0, r4, r0
     cec:	add	r5, r2, r5
     cf0:	lsr	r4, r0, #3
     cf4:	b	d9c <coda_inflate+0x8b8>
     cf8:	add	r7, r0, #2
     cfc:	cmp	r5, r7
     d00:	bcs	d24 <coda_inflate+0x840>
     d04:	cmp	r8, #0
     d08:	beq	1bac <coda_inflate+0x16c8>
     d0c:	ldrb	r2, [sl], #1
     d10:	sub	r8, r8, #1
     d14:	add	r4, r4, r2, lsl r5
     d18:	add	r5, r5, #8
     d1c:	cmp	r5, r7
     d20:	bcc	d04 <coda_inflate+0x820>
     d24:	sub	r5, r5, r0
     d28:	lsr	r7, r4, r0
     d2c:	cmp	r6, #0
     d30:	beq	1b80 <coda_inflate+0x169c>
     d34:	add	r0, lr, r6, lsl #1
     d38:	and	r2, r7, #3
     d3c:	lsr	r4, r7, #2
     d40:	sub	r5, r5, #2
     d44:	ldrh	r0, [r0, #110]	; 0x6e
     d48:	add	r7, r2, #3
     d4c:	b	da0 <coda_inflate+0x8bc>
     d50:	add	r7, r0, #7
     d54:	cmp	r5, r7
     d58:	bcs	d7c <coda_inflate+0x898>
     d5c:	cmp	r8, #0
     d60:	beq	1bac <coda_inflate+0x16c8>
     d64:	ldrb	r2, [sl], #1
     d68:	sub	r8, r8, #1
     d6c:	add	r4, r4, r2, lsl r5
     d70:	add	r5, r5, #8
     d74:	cmp	r5, r7
     d78:	bcc	d5c <coda_inflate+0x878>
     d7c:	mov	r2, #127	; 0x7f
     d80:	and	r2, r2, r4, lsr r0
     d84:	add	r7, r2, #11
     d88:	mvn	r2, #6
     d8c:	sub	r2, r2, r0
     d90:	lsr	r0, r4, r0
     d94:	add	r5, r2, r5
     d98:	lsr	r4, r0, #7
     d9c:	mov	r0, #0
     da0:	ldr	r2, [sp, #16]
     da4:	mov	lr, r6
     da8:	add	r6, r7, r6
     dac:	cmp	r6, r2
     db0:	bhi	1b1c <coda_inflate+0x1638>
     db4:	cmp	r7, #7
     db8:	bls	e00 <coda_inflate+0x91c>
     dbc:	ldr	r2, [sp, #52]	; 0x34
     dc0:	str	r9, [sp, #56]	; 0x38
     dc4:	and	r9, r7, #248	; 0xf8
     dc8:	str	r7, [sp, #8]
     dcc:	vdup.16	q8, r0
     dd0:	sub	r7, r7, r9
     dd4:	mov	ip, r9
     dd8:	add	r2, r2, lr, lsl #1
     ddc:	add	lr, lr, r9
     de0:	vst1.16	{d16-d17}, [r2]!
     de4:	subs	ip, ip, #8
     de8:	bne	de0 <coda_inflate+0x8fc>
     dec:	ldr	r2, [sp, #8]
     df0:	ldr	ip, [fp, #-44]	; 0xffffffd4
     df4:	cmp	r2, r9
     df8:	ldr	r9, [sp, #56]	; 0x38
     dfc:	beq	e14 <coda_inflate+0x930>
     e00:	ldr	r2, [sp, #52]	; 0x34
     e04:	add	r2, r2, lr, lsl #1
     e08:	strh	r0, [r2], #2
     e0c:	subs	r7, r7, #1
     e10:	bne	e08 <coda_inflate+0x924>
     e14:	ldr	lr, [fp, #-36]	; 0xffffffdc
     e18:	str	r6, [lr, #104]	; 0x68
     e1c:	ldr	r0, [sp, #16]
     e20:	cmp	r6, r0
     e24:	bcc	c28 <coda_inflate+0x744>
     e28:	ldr	r0, [sp, #28]
     e2c:	ldrh	r0, [r0]
     e30:	cmp	r0, #0
     e34:	beq	ec0 <coda_inflate+0x9dc>
     e38:	ldr	r0, [sp, #40]	; 0x28
     e3c:	ldr	r7, [sp, #44]	; 0x2c
     e40:	ldr	r1, [sp, #52]	; 0x34
     e44:	ldr	r2, [sp, #12]
     e48:	ldr	r3, [sp, #48]	; 0x30
     e4c:	mov	r6, lr
     e50:	str	r0, [lr, #76]	; 0x4c
     e54:	str	r0, [lr, #108]	; 0x6c
     e58:	mov	r0, #9
     e5c:	str	r0, [lr, #84]	; 0x54
     e60:	ldr	r0, [sp, #36]	; 0x24
     e64:	str	r7, [sp, #4]
     e68:	str	r0, [sp]
     e6c:	mov	r0, #1
     e70:	bl	0 <coda_inflate_table>
     e74:	cmp	r0, #0
     e78:	beq	f34 <coda_inflate+0xa50>
     e7c:	str	r0, [fp, #-52]	; 0xffffffcc
     e80:	movw	r0, #0
     e84:	movt	r0, #0
     e88:	b	f7c <coda_inflate+0xa98>
     e8c:	movw	r0, #0
     e90:	movt	r0, #0
     e94:	str	r0, [ip, #24]
     e98:	mov	r0, #29
     e9c:	b	ea4 <coda_inflate+0x9c0>
     ea0:	mov	r0, #16
     ea4:	str	r0, [lr]
     ea8:	ldr	r0, [lr]
     eac:	sub	r5, r5, #3
     eb0:	lsr	r4, r4, #3
     eb4:	cmp	r0, #30
     eb8:	bls	5d4 <coda_inflate+0xf0>
     ebc:	b	1ba4 <coda_inflate+0x16c0>
     ec0:	movw	r0, #0
     ec4:	movt	r0, #0
     ec8:	b	1b00 <coda_inflate+0x161c>
     ecc:	mov	r1, #0
     ed0:	str	r1, [lr, #16]
     ed4:	ldr	r1, [lr, #32]
     ed8:	cmp	r1, #0
     edc:	mvnne	r2, #0
     ee0:	strne	r2, [r1, #48]	; 0x30
     ee4:	tst	r0, #1
     ee8:	beq	f20 <coda_inflate+0xa3c>
     eec:	uxtb	r0, r4
     ef0:	movw	r1, #4229	; 0x1085
     ef4:	lsl	r0, r0, #8
     ef8:	movt	r1, #2114	; 0x842
     efc:	add	r0, r0, r4, lsr #8
     f00:	umull	r1, r2, r0, r1
     f04:	sub	r1, r0, r2
     f08:	add	r1, r2, r1, lsr #1
     f0c:	lsr	r2, r1, #4
     f10:	lsl	r2, r2, #5
     f14:	sub	r1, r2, r1, lsr #4
     f18:	subs	r0, r0, r1
     f1c:	beq	1abc <coda_inflate+0x15d8>
     f20:	movw	r0, #0
     f24:	movt	r0, #0
     f28:	b	1b00 <coda_inflate+0x161c>
     f2c:	ldr	r0, [lr, #24]
     f30:	b	1458 <coda_inflate+0xf74>
     f34:	mov	r0, #6
     f38:	str	r0, [r6, #88]	; 0x58
     f3c:	ldr	r1, [r6, #108]	; 0x6c
     f40:	ldr	r0, [r6, #96]	; 0x60
     f44:	ldr	r2, [r6, #100]	; 0x64
     f48:	str	r1, [r6, #80]	; 0x50
     f4c:	ldr	r1, [sp, #20]
     f50:	add	r0, r6, r0, lsl #1
     f54:	stm	sp, {r1, r7}
     f58:	add	r1, r0, #112	; 0x70
     f5c:	mov	r0, #2
     f60:	ldr	r3, [sp, #48]	; 0x30
     f64:	bl	0 <coda_inflate_table>
     f68:	cmp	r0, #0
     f6c:	beq	1500 <coda_inflate+0x101c>
     f70:	str	r0, [fp, #-52]	; 0xffffffcc
     f74:	movw	r0, #0
     f78:	movt	r0, #0
     f7c:	ldr	ip, [fp, #-44]	; 0xffffffd4
     f80:	mov	lr, r6
     f84:	str	r0, [ip, #24]
     f88:	mov	r0, #29
     f8c:	str	r0, [r6]
     f90:	ldr	r0, [r6]
     f94:	cmp	r0, #30
     f98:	bls	5d4 <coda_inflate+0xf0>
     f9c:	b	1ba4 <coda_inflate+0x16c0>
     fa0:	ldr	r0, [lr, #32]
     fa4:	cmp	r0, #0
     fa8:	ubfxne	r1, r4, #8, #1
     fac:	strne	r1, [r0]
     fb0:	tst	r4, #512	; 0x200
     fb4:	beq	fe0 <coda_inflate+0xafc>
     fb8:	lsr	r0, r4, #8
     fbc:	strb	r4, [fp, #-32]	; 0xffffffe0
     fc0:	sub	r1, fp, #32
     fc4:	mov	r2, #2
     fc8:	strb	r0, [fp, #-31]	; 0xffffffe1
     fcc:	ldr	r0, [lr, #24]
     fd0:	bl	0 <coda_crc32>
     fd4:	ldr	lr, [fp, #-36]	; 0xffffffdc
     fd8:	ldr	ip, [fp, #-44]	; 0xffffffd4
     fdc:	str	r0, [lr, #24]
     fe0:	mov	r0, #2
     fe4:	mov	r5, #0
     fe8:	mov	r4, #0
     fec:	str	r0, [lr]
     ff0:	cmp	r8, #0
     ff4:	beq	1bac <coda_inflate+0x16c8>
     ff8:	ldrb	r0, [sl], #1
     ffc:	sub	r8, r8, #1
    1000:	add	r4, r4, r0, lsl r5
    1004:	add	r5, r5, #8
    1008:	cmp	r5, #32
    100c:	bcc	ff0 <coda_inflate+0xb0c>
    1010:	ldr	r0, [lr, #32]
    1014:	cmp	r0, #0
    1018:	strne	r4, [r0, #4]
    101c:	ldrb	r0, [lr, #17]
    1020:	tst	r0, #2
    1024:	beq	1060 <coda_inflate+0xb7c>
    1028:	lsr	r0, r4, #8
    102c:	strb	r4, [fp, #-32]	; 0xffffffe0
    1030:	sub	r1, fp, #32
    1034:	mov	r2, #4
    1038:	strb	r0, [fp, #-31]	; 0xffffffe1
    103c:	lsr	r0, r4, #16
    1040:	strb	r0, [fp, #-30]	; 0xffffffe2
    1044:	lsr	r0, r4, #24
    1048:	strb	r0, [fp, #-29]	; 0xffffffe3
    104c:	ldr	r0, [lr, #24]
    1050:	bl	0 <coda_crc32>
    1054:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1058:	ldr	ip, [fp, #-44]	; 0xffffffd4
    105c:	str	r0, [lr, #24]
    1060:	mov	r0, #3
    1064:	mov	r5, #0
    1068:	mov	r4, #0
    106c:	str	r0, [lr]
    1070:	cmp	r8, #0
    1074:	beq	1bac <coda_inflate+0x16c8>
    1078:	ldrb	r0, [sl], #1
    107c:	sub	r8, r8, #1
    1080:	add	r4, r4, r0, lsl r5
    1084:	add	r5, r5, #8
    1088:	cmp	r5, #16
    108c:	bcc	1070 <coda_inflate+0xb8c>
    1090:	ldr	r0, [lr, #32]
    1094:	cmp	r0, #0
    1098:	uxtbne	r2, r4
    109c:	lsrne	r1, r4, #8
    10a0:	strne	r2, [r0, #8]
    10a4:	strne	r1, [r0, #12]
    10a8:	ldrb	r0, [lr, #17]
    10ac:	tst	r0, #2
    10b0:	beq	10dc <coda_inflate+0xbf8>
    10b4:	lsr	r0, r4, #8
    10b8:	strb	r4, [fp, #-32]	; 0xffffffe0
    10bc:	sub	r1, fp, #32
    10c0:	mov	r2, #2
    10c4:	strb	r0, [fp, #-31]	; 0xffffffe1
    10c8:	ldr	r0, [lr, #24]
    10cc:	bl	0 <coda_crc32>
    10d0:	ldr	lr, [fp, #-36]	; 0xffffffdc
    10d4:	ldr	ip, [fp, #-44]	; 0xffffffd4
    10d8:	str	r0, [lr, #24]
    10dc:	mov	r0, #4
    10e0:	mov	r4, #0
    10e4:	mov	r5, #0
    10e8:	str	r0, [lr]
    10ec:	ldr	r0, [lr, #16]
    10f0:	tst	r0, #1024	; 0x400
    10f4:	bne	110c <coda_inflate+0xc28>
    10f8:	ldr	r0, [lr, #32]
    10fc:	cmp	r0, #0
    1100:	movne	r1, #0
    1104:	strne	r1, [r0, #16]
    1108:	b	1184 <coda_inflate+0xca0>
    110c:	cmp	r5, #15
    1110:	bhi	1134 <coda_inflate+0xc50>
    1114:	cmp	r8, #0
    1118:	beq	1bac <coda_inflate+0x16c8>
    111c:	ldrb	r1, [sl], #1
    1120:	sub	r8, r8, #1
    1124:	add	r4, r4, r1, lsl r5
    1128:	add	r5, r5, #8
    112c:	cmp	r5, #16
    1130:	bcc	1114 <coda_inflate+0xc30>
    1134:	str	r4, [lr, #64]	; 0x40
    1138:	mov	r5, #0
    113c:	ldr	r1, [lr, #32]
    1140:	cmp	r1, #0
    1144:	strne	r4, [r1, #20]
    1148:	tst	r0, #512	; 0x200
    114c:	bne	1158 <coda_inflate+0xc74>
    1150:	mov	r4, #0
    1154:	b	1184 <coda_inflate+0xca0>
    1158:	lsr	r0, r4, #8
    115c:	strb	r4, [fp, #-32]	; 0xffffffe0
    1160:	sub	r1, fp, #32
    1164:	mov	r2, #2
    1168:	strb	r0, [fp, #-31]	; 0xffffffe1
    116c:	ldr	r0, [lr, #24]
    1170:	bl	0 <coda_crc32>
    1174:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1178:	ldr	ip, [fp, #-44]	; 0xffffffd4
    117c:	mov	r4, #0
    1180:	str	r0, [lr, #24]
    1184:	mov	r0, #5
    1188:	str	r0, [lr]
    118c:	ldr	r1, [lr, #16]
    1190:	tst	r1, #1024	; 0x400
    1194:	beq	1238 <coda_inflate+0xd54>
    1198:	ldr	r0, [lr, #64]	; 0x40
    119c:	cmp	r0, r8
    11a0:	mov	r6, r0
    11a4:	movhi	r6, r8
    11a8:	cmp	r6, #0
    11ac:	beq	1230 <coda_inflate+0xd4c>
    11b0:	ldr	r2, [lr, #32]
    11b4:	cmp	r2, #0
    11b8:	ldrne	r3, [r2, #16]
    11bc:	cmpne	r3, #0
    11c0:	beq	11f8 <coda_inflate+0xd14>
    11c4:	ldr	r1, [r2, #20]
    11c8:	ldr	r7, [r2, #24]
    11cc:	mov	r2, r6
    11d0:	sub	r0, r1, r0
    11d4:	add	r1, r0, r6
    11d8:	cmp	r1, r7
    11dc:	mov	r1, sl
    11e0:	subhi	r2, r7, r0
    11e4:	add	r0, r3, r0
    11e8:	bl	0 <memcpy>
    11ec:	ldr	lr, [fp, #-36]	; 0xffffffdc
    11f0:	ldr	ip, [fp, #-44]	; 0xffffffd4
    11f4:	ldr	r1, [lr, #16]
    11f8:	tst	r1, #512	; 0x200
    11fc:	beq	121c <coda_inflate+0xd38>
    1200:	ldr	r0, [lr, #24]
    1204:	mov	r1, sl
    1208:	mov	r2, r6
    120c:	bl	0 <coda_crc32>
    1210:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1214:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1218:	str	r0, [lr, #24]
    121c:	ldr	r0, [lr, #64]	; 0x40
    1220:	add	sl, sl, r6
    1224:	sub	r8, r8, r6
    1228:	sub	r0, r0, r6
    122c:	str	r0, [lr, #64]	; 0x40
    1230:	cmp	r0, #0
    1234:	bne	1d34 <coda_inflate+0x1850>
    1238:	mov	r0, #6
    123c:	str	r0, [lr]
    1240:	mov	r0, #0
    1244:	str	r0, [lr, #64]	; 0x40
    1248:	ldrb	r0, [lr, #17]
    124c:	tst	r0, #8
    1250:	bne	1268 <coda_inflate+0xd84>
    1254:	ldr	r0, [lr, #32]
    1258:	cmp	r0, #0
    125c:	movne	r1, #0
    1260:	strne	r1, [r0, #28]
    1264:	b	12f4 <coda_inflate+0xe10>
    1268:	cmp	r8, #0
    126c:	beq	1bac <coda_inflate+0x16c8>
    1270:	str	r9, [sp, #56]	; 0x38
    1274:	mov	r9, #0
    1278:	ldr	r1, [lr, #32]
    127c:	ldrb	r6, [sl, r9]
    1280:	add	r9, r9, #1
    1284:	cmp	r1, #0
    1288:	ldrne	r0, [r1, #28]
    128c:	cmpne	r0, #0
    1290:	beq	12ac <coda_inflate+0xdc8>
    1294:	ldr	r2, [lr, #64]	; 0x40
    1298:	ldr	r1, [r1, #32]
    129c:	cmp	r2, r1
    12a0:	addcc	r1, r2, #1
    12a4:	strcc	r1, [lr, #64]	; 0x40
    12a8:	strbcc	r6, [r0, r2]
    12ac:	cmp	r6, #0
    12b0:	cmpne	r8, r9
    12b4:	bhi	1278 <coda_inflate+0xd94>
    12b8:	ldrb	r0, [lr, #17]
    12bc:	tst	r0, #2
    12c0:	beq	12e0 <coda_inflate+0xdfc>
    12c4:	ldr	r0, [lr, #24]
    12c8:	mov	r1, sl
    12cc:	mov	r2, r9
    12d0:	bl	0 <coda_crc32>
    12d4:	ldr	lr, [fp, #-36]	; 0xffffffdc
    12d8:	ldr	ip, [fp, #-44]	; 0xffffffd4
    12dc:	str	r0, [lr, #24]
    12e0:	cmp	r6, #0
    12e4:	bne	1d6c <coda_inflate+0x1888>
    12e8:	add	sl, sl, r9
    12ec:	sub	r8, r8, r9
    12f0:	ldr	r9, [sp, #56]	; 0x38
    12f4:	mov	r0, #7
    12f8:	str	r0, [lr]
    12fc:	mov	r0, #0
    1300:	str	r0, [lr, #64]	; 0x40
    1304:	ldrb	r0, [lr, #17]
    1308:	tst	r0, #16
    130c:	bne	1324 <coda_inflate+0xe40>
    1310:	ldr	r0, [lr, #32]
    1314:	cmp	r0, #0
    1318:	movne	r1, #0
    131c:	strne	r1, [r0, #36]	; 0x24
    1320:	b	13a8 <coda_inflate+0xec4>
    1324:	cmp	r8, #0
    1328:	beq	1bac <coda_inflate+0x16c8>
    132c:	mov	r6, #0
    1330:	ldr	r1, [lr, #32]
    1334:	ldrb	r7, [sl, r6]
    1338:	add	r6, r6, #1
    133c:	cmp	r1, #0
    1340:	ldrne	r0, [r1, #36]	; 0x24
    1344:	cmpne	r0, #0
    1348:	beq	1364 <coda_inflate+0xe80>
    134c:	ldr	r2, [lr, #64]	; 0x40
    1350:	ldr	r1, [r1, #40]	; 0x28
    1354:	cmp	r2, r1
    1358:	addcc	r1, r2, #1
    135c:	strcc	r1, [lr, #64]	; 0x40
    1360:	strbcc	r7, [r0, r2]
    1364:	cmp	r7, #0
    1368:	cmpne	r8, r6
    136c:	bhi	1330 <coda_inflate+0xe4c>
    1370:	ldrb	r0, [lr, #17]
    1374:	tst	r0, #2
    1378:	beq	1398 <coda_inflate+0xeb4>
    137c:	ldr	r0, [lr, #24]
    1380:	mov	r1, sl
    1384:	mov	r2, r6
    1388:	bl	0 <coda_crc32>
    138c:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1390:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1394:	str	r0, [lr, #24]
    1398:	cmp	r7, #0
    139c:	bne	1d5c <coda_inflate+0x1878>
    13a0:	add	sl, sl, r6
    13a4:	sub	r8, r8, r6
    13a8:	mov	r0, #8
    13ac:	str	r0, [lr]
    13b0:	ldr	r0, [lr, #16]
    13b4:	tst	r0, #512	; 0x200
    13b8:	beq	13f8 <coda_inflate+0xf14>
    13bc:	cmp	r5, #15
    13c0:	bhi	13e4 <coda_inflate+0xf00>
    13c4:	cmp	r8, #0
    13c8:	beq	1bac <coda_inflate+0x16c8>
    13cc:	ldrb	r1, [sl], #1
    13d0:	sub	r8, r8, #1
    13d4:	add	r4, r4, r1, lsl r5
    13d8:	add	r5, r5, #8
    13dc:	cmp	r5, #16
    13e0:	bcc	13c4 <coda_inflate+0xee0>
    13e4:	ldrh	r1, [lr, #24]
    13e8:	cmp	r4, r1
    13ec:	bne	1438 <coda_inflate+0xf54>
    13f0:	mov	r4, #0
    13f4:	mov	r5, #0
    13f8:	ldr	r1, [lr, #32]
    13fc:	cmp	r1, #0
    1400:	movne	r2, #1
    1404:	strne	r2, [r1, #48]	; 0x30
    1408:	ubfxne	r0, r0, #9, #1
    140c:	mov	r2, #0
    1410:	strne	r0, [r1, #44]	; 0x2c
    1414:	mov	r0, #0
    1418:	mov	r1, #0
    141c:	bl	0 <coda_crc32>
    1420:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1424:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1428:	str	r0, [lr, #24]
    142c:	str	r0, [ip, #48]	; 0x30
    1430:	mov	r0, #11
    1434:	b	1b08 <coda_inflate+0x1624>
    1438:	movw	r0, #0
    143c:	movt	r0, #0
    1440:	b	1b00 <coda_inflate+0x161c>
    1444:	bl	0 <coda_adler32>
    1448:	ldr	lr, [fp, #-36]	; 0xffffffdc
    144c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1450:	str	r0, [lr, #24]
    1454:	str	r0, [ip, #48]	; 0x30
    1458:	ldr	r1, [lr, #16]
    145c:	cmp	r1, #0
    1460:	mov	r1, r4
    1464:	reveq	r1, r1
    1468:	cmp	r1, r0
    146c:	bne	14d8 <coda_inflate+0xff4>
    1470:	mov	r4, #0
    1474:	mov	r5, #0
    1478:	str	r9, [fp, #-48]	; 0xffffffd0
    147c:	mov	r0, #27
    1480:	str	r0, [lr]
    1484:	ldr	r0, [lr, #8]
    1488:	cmp	r0, #0
    148c:	ldrne	r0, [lr, #16]
    1490:	cmpne	r0, #0
    1494:	beq	1da4 <coda_inflate+0x18c0>
    1498:	cmp	r5, #31
    149c:	bhi	14c0 <coda_inflate+0xfdc>
    14a0:	cmp	r8, #0
    14a4:	beq	1bac <coda_inflate+0x16c8>
    14a8:	ldrb	r0, [sl], #1
    14ac:	sub	r8, r8, #1
    14b0:	add	r4, r4, r0, lsl r5
    14b4:	add	r5, r5, #8
    14b8:	cmp	r5, #32
    14bc:	bcc	14a0 <coda_inflate+0xfbc>
    14c0:	ldr	r0, [lr, #28]
    14c4:	cmp	r4, r0
    14c8:	beq	1d9c <coda_inflate+0x18b8>
    14cc:	movw	r0, #0
    14d0:	movt	r0, #0
    14d4:	b	1b00 <coda_inflate+0x161c>
    14d8:	movw	r0, #0
    14dc:	str	r9, [fp, #-48]	; 0xffffffd0
    14e0:	movt	r0, #0
    14e4:	str	r0, [ip, #24]
    14e8:	mov	r0, #29
    14ec:	str	r0, [lr]
    14f0:	ldr	r0, [lr]
    14f4:	cmp	r0, #30
    14f8:	bls	5d4 <coda_inflate+0xf0>
    14fc:	b	1ba4 <coda_inflate+0x16c0>
    1500:	mov	r0, #19
    1504:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1508:	mov	lr, r6
    150c:	str	r0, [r6]
    1510:	mov	r0, #0
    1514:	str	r0, [fp, #-52]	; 0xffffffcc
    1518:	ldr	r0, [fp, #-56]	; 0xffffffc8
    151c:	cmp	r0, #6
    1520:	beq	1dcc <coda_inflate+0x18e8>
    1524:	mov	r0, #20
    1528:	str	r0, [lr]
    152c:	lsr	r0, r9, #1
    1530:	cmp	r0, #129	; 0x81
    1534:	cmpcs	r8, #6
    1538:	bcs	1620 <coda_inflate+0x113c>
    153c:	ldr	r0, [fp, #-60]	; 0xffffffc4
    1540:	mov	ip, #0
    1544:	mvn	r7, #0
    1548:	str	ip, [r0]
    154c:	ldr	r3, [lr, #84]	; 0x54
    1550:	ldr	r0, [lr, #76]	; 0x4c
    1554:	bic	r2, r4, r7, lsl r3
    1558:	add	r1, r0, r2, lsl #2
    155c:	ldrb	r1, [r1, #1]
    1560:	cmp	r5, r1
    1564:	bcs	1598 <coda_inflate+0x10b4>
    1568:	mvn	r3, r7, lsl r3
    156c:	cmp	r8, #0
    1570:	beq	1d28 <coda_inflate+0x1844>
    1574:	ldrb	r1, [sl], #1
    1578:	sub	r8, r8, #1
    157c:	add	r4, r4, r1, lsl r5
    1580:	add	r5, r5, #8
    1584:	and	r2, r4, r3
    1588:	add	r1, r0, r2, lsl #2
    158c:	ldrb	r1, [r1, #1]
    1590:	cmp	r5, r1
    1594:	bcc	156c <coda_inflate+0x1088>
    1598:	mov	r3, r0
    159c:	str	r9, [sp, #56]	; 0x38
    15a0:	ldrb	r6, [r3, r2, lsl #2]!
    15a4:	ldrh	r9, [r3, #2]
    15a8:	cmp	r6, #0
    15ac:	beq	1694 <coda_inflate+0x11b0>
    15b0:	ands	r2, r6, #240	; 0xf0
    15b4:	bne	1694 <coda_inflate+0x11b0>
    15b8:	add	lr, r1, r6
    15bc:	mvn	ip, #0
    15c0:	bic	r2, r4, ip, lsl lr
    15c4:	add	r7, r9, r2, lsr r1
    15c8:	add	r2, r0, r7, lsl #2
    15cc:	ldrb	r2, [r2, #1]
    15d0:	add	r6, r1, r2
    15d4:	cmp	r6, r5
    15d8:	bls	16a0 <coda_inflate+0x11bc>
    15dc:	mvn	r6, ip, lsl lr
    15e0:	ldr	ip, [fp, #-44]	; 0xffffffd4
    15e4:	ldr	lr, [fp, #-36]	; 0xffffffdc
    15e8:	cmp	r8, #0
    15ec:	beq	1d3c <coda_inflate+0x1858>
    15f0:	ldrb	r2, [sl], #1
    15f4:	sub	r8, r8, #1
    15f8:	add	r4, r4, r2, lsl r5
    15fc:	add	r5, r5, #8
    1600:	and	r2, r4, r6
    1604:	add	r7, r9, r2, lsr r1
    1608:	add	r2, r0, r7, lsl #2
    160c:	ldrb	r2, [r2, #1]
    1610:	add	r3, r1, r2
    1614:	cmp	r3, r5
    1618:	bhi	15e8 <coda_inflate+0x1104>
    161c:	b	16a4 <coda_inflate+0x11c0>
    1620:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1624:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1628:	str	r0, [ip, #12]
    162c:	mov	r0, ip
    1630:	str	r9, [ip, #16]
    1634:	str	sl, [ip]
    1638:	str	r8, [ip, #4]
    163c:	str	r4, [lr, #56]	; 0x38
    1640:	str	r5, [lr, #60]	; 0x3c
    1644:	bl	0 <coda_inflate_fast>
    1648:	ldr	lr, [fp, #-36]	; 0xffffffdc
    164c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1650:	ldr	r0, [lr]
    1654:	ldr	r1, [ip, #12]
    1658:	ldr	r4, [lr, #56]	; 0x38
    165c:	ldr	r5, [lr, #60]	; 0x3c
    1660:	ldr	sl, [ip]
    1664:	ldr	r8, [ip, #4]
    1668:	ldr	r9, [ip, #16]
    166c:	cmp	r0, #11
    1670:	str	r1, [fp, #-40]	; 0xffffffd8
    1674:	bne	1b0c <coda_inflate+0x1628>
    1678:	ldr	r1, [fp, #-60]	; 0xffffffc4
    167c:	mvn	r0, #0
    1680:	str	r0, [r1]
    1684:	ldr	r0, [lr]
    1688:	cmp	r0, #30
    168c:	bls	5d4 <coda_inflate+0xf0>
    1690:	b	1ba4 <coda_inflate+0x16c0>
    1694:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1698:	mov	r2, r1
    169c:	b	16c0 <coda_inflate+0x11dc>
    16a0:	ldr	lr, [fp, #-36]	; 0xffffffdc
    16a4:	ldrb	r6, [r0, r7, lsl #2]!
    16a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
    16ac:	sub	r5, r5, r1
    16b0:	lsr	r4, r4, r1
    16b4:	mov	ip, r1
    16b8:	ldrh	r9, [r0, #2]
    16bc:	str	r1, [r3]
    16c0:	add	r0, ip, r2
    16c4:	sub	r5, r5, r2
    16c8:	lsr	r4, r4, r2
    16cc:	cmp	r6, #0
    16d0:	str	r0, [r3]
    16d4:	str	r9, [lr, #64]	; 0x40
    16d8:	beq	1850 <coda_inflate+0x136c>
    16dc:	ldr	ip, [fp, #-44]	; 0xffffffd4
    16e0:	ldr	r9, [sp, #56]	; 0x38
    16e4:	tst	r6, #32
    16e8:	bne	185c <coda_inflate+0x1378>
    16ec:	tst	r6, #64	; 0x40
    16f0:	bne	1ab0 <coda_inflate+0x15cc>
    16f4:	mov	r0, #21
    16f8:	str	r0, [lr]
    16fc:	and	r0, r6, #15
    1700:	str	r0, [lr, #72]	; 0x48
    1704:	cmp	r0, #0
    1708:	bne	1720 <coda_inflate+0x123c>
    170c:	b	a14 <coda_inflate+0x530>
    1710:	ldrb	r1, [sl], #1
    1714:	sub	r8, r8, #1
    1718:	add	r4, r4, r1, lsl r5
    171c:	add	r5, r5, #8
    1720:	cmp	r5, r0
    1724:	bcs	1734 <coda_inflate+0x1250>
    1728:	cmp	r8, #0
    172c:	bne	1710 <coda_inflate+0x122c>
    1730:	b	1bac <coda_inflate+0x16c8>
    1734:	ldr	r2, [lr, #64]	; 0x40
    1738:	mvn	r1, #0
    173c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1740:	sub	r5, r5, r0
    1744:	bic	r1, r4, r1, lsl r0
    1748:	lsr	r4, r4, r0
    174c:	add	r1, r2, r1
    1750:	str	r1, [lr, #64]	; 0x40
    1754:	ldr	r2, [r3]
    1758:	add	r2, r2, r0
    175c:	str	r2, [r3]
    1760:	ldr	r0, [sp, #32]
    1764:	str	r1, [r0]
    1768:	mov	r0, #22
    176c:	str	r0, [lr]
    1770:	ldr	r3, [lr, #88]	; 0x58
    1774:	ldr	r0, [lr, #80]	; 0x50
    1778:	mvn	r7, #0
    177c:	bic	r2, r4, r7, lsl r3
    1780:	add	r1, r0, r2, lsl #2
    1784:	ldrb	r1, [r1, #1]
    1788:	cmp	r5, r1
    178c:	bcs	17c0 <coda_inflate+0x12dc>
    1790:	mvn	r3, r7, lsl r3
    1794:	cmp	r8, #0
    1798:	beq	1bac <coda_inflate+0x16c8>
    179c:	ldrb	r1, [sl], #1
    17a0:	sub	r8, r8, #1
    17a4:	add	r4, r4, r1, lsl r5
    17a8:	add	r5, r5, #8
    17ac:	and	r2, r4, r3
    17b0:	add	r1, r0, r2, lsl #2
    17b4:	ldrb	r1, [r1, #1]
    17b8:	cmp	r5, r1
    17bc:	bcc	1794 <coda_inflate+0x12b0>
    17c0:	mov	r3, r0
    17c4:	str	r9, [sp, #56]	; 0x38
    17c8:	ldrb	r6, [r3, r2, lsl #2]!
    17cc:	ldrh	r9, [r3, #2]
    17d0:	tst	r6, #240	; 0xf0
    17d4:	beq	17e8 <coda_inflate+0x1304>
    17d8:	ldr	r2, [fp, #-60]	; 0xffffffc4
    17dc:	mov	r3, r1
    17e0:	ldr	r0, [r2]
    17e4:	b	1894 <coda_inflate+0x13b0>
    17e8:	add	lr, r1, r6
    17ec:	mvn	ip, #0
    17f0:	bic	r3, r4, ip, lsl lr
    17f4:	add	r7, r9, r3, lsr r1
    17f8:	add	r3, r0, r7, lsl #2
    17fc:	ldrb	r3, [r3, #1]
    1800:	add	r6, r1, r3
    1804:	cmp	r6, r5
    1808:	bls	186c <coda_inflate+0x1388>
    180c:	mvn	r6, ip, lsl lr
    1810:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1814:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1818:	cmp	r8, #0
    181c:	beq	1d3c <coda_inflate+0x1858>
    1820:	ldrb	r3, [sl], #1
    1824:	sub	r8, r8, #1
    1828:	add	r4, r4, r3, lsl r5
    182c:	add	r5, r5, #8
    1830:	and	r3, r4, r6
    1834:	add	r7, r9, r3, lsr r1
    1838:	add	r3, r0, r7, lsl #2
    183c:	ldrb	r3, [r3, #1]
    1840:	add	r2, r1, r3
    1844:	cmp	r2, r5
    1848:	bhi	1818 <coda_inflate+0x1334>
    184c:	b	1874 <coda_inflate+0x1390>
    1850:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1854:	mov	r0, #25
    1858:	b	1a50 <coda_inflate+0x156c>
    185c:	mvn	r0, #0
    1860:	str	r0, [r3]
    1864:	mov	r0, #11
    1868:	b	1b08 <coda_inflate+0x1624>
    186c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1870:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1874:	ldrb	r6, [r0, r7, lsl #2]!
    1878:	ldr	r2, [fp, #-60]	; 0xffffffc4
    187c:	sub	r5, r5, r1
    1880:	lsr	r4, r4, r1
    1884:	ldrh	r9, [r0, #2]
    1888:	ldr	r0, [r2]
    188c:	add	r0, r0, r1
    1890:	str	r0, [r2]
    1894:	add	r0, r0, r3
    1898:	sub	r5, r5, r3
    189c:	lsr	r4, r4, r3
    18a0:	tst	r6, #64	; 0x40
    18a4:	str	r0, [r2]
    18a8:	bne	1a40 <coda_inflate+0x155c>
    18ac:	mov	r0, #23
    18b0:	str	r0, [lr]
    18b4:	str	r9, [lr, #68]	; 0x44
    18b8:	ldr	r9, [sp, #56]	; 0x38
    18bc:	and	r0, r6, #15
    18c0:	str	r0, [lr, #72]	; 0x48
    18c4:	cmp	r0, #0
    18c8:	bne	18e0 <coda_inflate+0x13fc>
    18cc:	b	1920 <coda_inflate+0x143c>
    18d0:	ldrb	r1, [sl], #1
    18d4:	sub	r8, r8, #1
    18d8:	add	r4, r4, r1, lsl r5
    18dc:	add	r5, r5, #8
    18e0:	cmp	r5, r0
    18e4:	bcs	18f4 <coda_inflate+0x1410>
    18e8:	cmp	r8, #0
    18ec:	bne	18d0 <coda_inflate+0x13ec>
    18f0:	b	1bac <coda_inflate+0x16c8>
    18f4:	ldr	r2, [lr, #68]	; 0x44
    18f8:	mvn	r1, #0
    18fc:	sub	r5, r5, r0
    1900:	bic	r1, r4, r1, lsl r0
    1904:	lsr	r4, r4, r0
    1908:	add	r1, r2, r1
    190c:	ldr	r2, [fp, #-60]	; 0xffffffc4
    1910:	str	r1, [lr, #68]	; 0x44
    1914:	ldr	r1, [r2]
    1918:	add	r1, r1, r0
    191c:	str	r1, [r2]
    1920:	mov	r0, #24
    1924:	str	r0, [lr]
    1928:	cmp	r9, #0
    192c:	beq	1d34 <coda_inflate+0x1850>
    1930:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1934:	sub	r1, r0, r9
    1938:	ldr	r0, [lr, #68]	; 0x44
    193c:	cmp	r0, r1
    1940:	bls	1980 <coda_inflate+0x149c>
    1944:	mov	r2, lr
    1948:	sub	lr, r0, r1
    194c:	ldr	r0, [r2, #44]	; 0x2c
    1950:	cmp	lr, r0
    1954:	bls	1998 <coda_inflate+0x14b4>
    1958:	ldr	r0, [sp, #24]
    195c:	ldr	r0, [r0]
    1960:	cmp	r0, #0
    1964:	beq	1998 <coda_inflate+0x14b4>
    1968:	movw	r0, #0
    196c:	movt	r0, #0
    1970:	str	r0, [ip, #24]
    1974:	mov	r0, #29
    1978:	ldr	lr, [fp, #-36]	; 0xffffffdc
    197c:	b	1b08 <coda_inflate+0x1624>
    1980:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1984:	mov	r3, lr
    1988:	sub	r6, r1, r0
    198c:	ldr	r1, [lr, #64]	; 0x40
    1990:	mov	lr, r1
    1994:	b	19c4 <coda_inflate+0x14e0>
    1998:	ldr	r3, [fp, #-36]	; 0xffffffdc
    199c:	ldr	r0, [r3, #48]	; 0x30
    19a0:	ldr	r1, [r3, #64]	; 0x40
    19a4:	ldr	r2, [r3, #52]	; 0x34
    19a8:	cmp	lr, r0
    19ac:	subhi	lr, lr, r0
    19b0:	ldrhi	r0, [r3, #40]	; 0x28
    19b4:	cmp	lr, r1
    19b8:	sub	r0, r0, lr
    19bc:	movhi	lr, r1
    19c0:	add	r6, r2, r0
    19c4:	cmp	lr, r9
    19c8:	movhi	lr, r9
    19cc:	sub	r0, r1, lr
    19d0:	cmp	lr, #16
    19d4:	str	r0, [r3, #64]	; 0x40
    19d8:	bcs	19ec <coda_inflate+0x1508>
    19dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    19e0:	mov	r3, lr
    19e4:	mov	r1, r6
    19e8:	b	1a78 <coda_inflate+0x1594>
    19ec:	str	r9, [sp, #56]	; 0x38
    19f0:	ldr	r9, [fp, #-40]	; 0xffffffd8
    19f4:	add	r0, r6, lr
    19f8:	cmp	r9, r0
    19fc:	addcc	r0, r9, lr
    1a00:	cmpcc	r6, r0
    1a04:	bcc	1a68 <coda_inflate+0x1584>
    1a08:	bic	ip, lr, #15
    1a0c:	add	r1, r6, ip
    1a10:	sub	r3, lr, ip
    1a14:	add	r2, r9, ip
    1a18:	mov	r7, ip
    1a1c:	vld1.8	{d16-d17}, [r6]!
    1a20:	subs	r7, r7, #16
    1a24:	vst1.8	{d16-d17}, [r9]!
    1a28:	bne	1a1c <coda_inflate+0x1538>
    1a2c:	cmp	lr, ip
    1a30:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1a34:	ldr	r9, [sp, #56]	; 0x38
    1a38:	bne	1a78 <coda_inflate+0x1594>
    1a3c:	b	1a88 <coda_inflate+0x15a4>
    1a40:	movw	r0, #0
    1a44:	movt	r0, #0
    1a48:	str	r0, [ip, #24]
    1a4c:	mov	r0, #29
    1a50:	str	r0, [lr]
    1a54:	ldr	r9, [sp, #56]	; 0x38
    1a58:	ldr	r0, [lr]
    1a5c:	cmp	r0, #30
    1a60:	bls	5d4 <coda_inflate+0xf0>
    1a64:	b	1ba4 <coda_inflate+0x16c0>
    1a68:	mov	r2, r9
    1a6c:	ldr	r9, [sp, #56]	; 0x38
    1a70:	mov	r3, lr
    1a74:	mov	r1, r6
    1a78:	ldrb	r0, [r1], #1
    1a7c:	subs	r3, r3, #1
    1a80:	strb	r0, [r2], #1
    1a84:	bne	1a78 <coda_inflate+0x1594>
    1a88:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1a8c:	sub	r9, r9, lr
    1a90:	add	r0, r0, lr
    1a94:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1a98:	str	r0, [fp, #-40]	; 0xffffffd8
    1a9c:	ldr	r0, [lr, #64]	; 0x40
    1aa0:	cmp	r0, #0
    1aa4:	bne	1b0c <coda_inflate+0x1628>
    1aa8:	mov	r0, #20
    1aac:	b	1b08 <coda_inflate+0x1624>
    1ab0:	movw	r0, #0
    1ab4:	movt	r0, #0
    1ab8:	b	1b00 <coda_inflate+0x161c>
    1abc:	and	r0, r4, #15
    1ac0:	cmp	r0, #8
    1ac4:	bne	1af8 <coda_inflate+0x1614>
    1ac8:	ldr	r1, [lr, #36]	; 0x24
    1acc:	ubfx	r0, r4, #4, #4
    1ad0:	add	r2, r0, #8
    1ad4:	cmp	r1, #0
    1ad8:	beq	1b28 <coda_inflate+0x1644>
    1adc:	cmp	r2, r1
    1ae0:	bls	1b2c <coda_inflate+0x1648>
    1ae4:	movw	r0, #0
    1ae8:	sub	r5, r5, #4
    1aec:	lsr	r4, r4, #4
    1af0:	movt	r0, #0
    1af4:	b	1b00 <coda_inflate+0x161c>
    1af8:	movw	r0, #0
    1afc:	movt	r0, #0
    1b00:	str	r0, [ip, #24]
    1b04:	mov	r0, #29
    1b08:	str	r0, [lr]
    1b0c:	ldr	r0, [lr]
    1b10:	cmp	r0, #30
    1b14:	bls	5d4 <coda_inflate+0xf0>
    1b18:	b	1ba4 <coda_inflate+0x16c0>
    1b1c:	movw	r0, #0
    1b20:	movt	r0, #0
    1b24:	b	1970 <coda_inflate+0x148c>
    1b28:	str	r2, [lr, #36]	; 0x24
    1b2c:	mov	r1, #256	; 0x100
    1b30:	mov	r2, #0
    1b34:	mov	r5, #0
    1b38:	lsl	r0, r1, r0
    1b3c:	mov	r1, #0
    1b40:	str	r0, [lr, #20]
    1b44:	mov	r0, #0
    1b48:	bl	0 <coda_adler32>
    1b4c:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1b50:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1b54:	tst	r4, #8192	; 0x2000
    1b58:	mov	r4, #0
    1b5c:	str	r0, [lr, #24]
    1b60:	str	r0, [ip, #48]	; 0x30
    1b64:	mov	r0, #9
    1b68:	movweq	r0, #11
    1b6c:	str	r0, [lr]
    1b70:	ldr	r0, [lr]
    1b74:	cmp	r0, #30
    1b78:	bls	5d4 <coda_inflate+0xf0>
    1b7c:	b	1ba4 <coda_inflate+0x16c0>
    1b80:	movw	r0, #0
    1b84:	mov	r4, r7
    1b88:	movt	r0, #0
    1b8c:	str	r0, [ip, #24]
    1b90:	mov	r0, #29
    1b94:	str	r0, [lr]
    1b98:	ldr	r0, [lr]
    1b9c:	cmp	r0, #30
    1ba0:	bls	5d4 <coda_inflate+0xf0>
    1ba4:	mvn	r3, #1
    1ba8:	b	514 <coda_inflate+0x30>
    1bac:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1bb0:	mov	r8, #0
    1bb4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1bb8:	ldr	r7, [fp, #-48]	; 0xffffffd0
    1bbc:	str	r1, [ip, #12]
    1bc0:	str	r9, [ip, #16]
    1bc4:	str	sl, [ip]
    1bc8:	str	r8, [ip, #4]
    1bcc:	str	r4, [lr, #56]	; 0x38
    1bd0:	str	r5, [lr, #60]	; 0x3c
    1bd4:	ldr	r0, [lr, #40]	; 0x28
    1bd8:	cmp	r0, #0
    1bdc:	beq	1c1c <coda_inflate+0x1738>
    1be0:	sub	r2, r7, r9
    1be4:	mov	r0, ip
    1be8:	mov	r4, ip
    1bec:	bl	1dd4 <updatewindow>
    1bf0:	cmp	r0, #0
    1bf4:	beq	1c4c <coda_inflate+0x1768>
    1bf8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1bfc:	mov	r0, #30
    1c00:	mvn	r3, #3
    1c04:	str	r0, [r1]
    1c08:	b	514 <coda_inflate+0x30>
    1c0c:	ldr	r0, [ip, #4]
    1c10:	cmp	r0, #0
    1c14:	bne	514 <coda_inflate+0x30>
    1c18:	b	52c <coda_inflate+0x48>
    1c1c:	cmp	r7, r9
    1c20:	beq	1c5c <coda_inflate+0x1778>
    1c24:	ldr	r0, [lr]
    1c28:	cmp	r0, #28
    1c2c:	bhi	1c5c <coda_inflate+0x1778>
    1c30:	ldr	r1, [fp, #-56]	; 0xffffffc8
    1c34:	cmp	r1, #4
    1c38:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1c3c:	bne	1be0 <coda_inflate+0x16fc>
    1c40:	cmp	r0, #25
    1c44:	bhi	1c5c <coda_inflate+0x1778>
    1c48:	b	1be0 <coda_inflate+0x16fc>
    1c4c:	ldr	r8, [r4, #4]
    1c50:	ldr	r9, [r4, #16]
    1c54:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1c58:	mov	ip, r4
    1c5c:	ldr	r0, [sp, #64]	; 0x40
    1c60:	ldr	r1, [ip, #20]
    1c64:	subs	r4, r7, r9
    1c68:	sub	r5, r0, r8
    1c6c:	ldr	r0, [ip, #8]
    1c70:	add	r0, r0, r5
    1c74:	str	r0, [ip, #8]
    1c78:	add	r0, r1, r4
    1c7c:	str	r0, [ip, #20]
    1c80:	ldr	r1, [lr, #28]
    1c84:	ldr	r0, [lr, #8]
    1c88:	add	r1, r1, r4
    1c8c:	cmpne	r0, #0
    1c90:	str	r1, [lr, #28]
    1c94:	beq	1cd4 <coda_inflate+0x17f0>
    1c98:	ldr	r0, [ip, #12]
    1c9c:	ldr	r2, [lr, #16]
    1ca0:	sub	r1, r0, r4
    1ca4:	ldr	r0, [lr, #24]
    1ca8:	cmp	r2, #0
    1cac:	beq	1cbc <coda_inflate+0x17d8>
    1cb0:	mov	r2, r4
    1cb4:	bl	0 <coda_crc32>
    1cb8:	b	1cc4 <coda_inflate+0x17e0>
    1cbc:	mov	r2, r4
    1cc0:	bl	0 <coda_adler32>
    1cc4:	ldr	lr, [fp, #-36]	; 0xffffffdc
    1cc8:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1ccc:	str	r0, [lr, #24]
    1cd0:	str	r0, [ip, #48]	; 0x30
    1cd4:	ldm	lr, {r0, r1}
    1cd8:	ldr	r2, [lr, #60]	; 0x3c
    1cdc:	mov	r3, r6
    1ce0:	cmp	r1, #0
    1ce4:	addne	r2, r2, #64	; 0x40
    1ce8:	cmp	r0, #11
    1cec:	addeq	r2, r2, #128	; 0x80
    1cf0:	cmp	r0, #14
    1cf4:	add	r1, r2, #256	; 0x100
    1cf8:	moveq	r2, r1
    1cfc:	cmp	r0, #19
    1d00:	moveq	r2, r1
    1d04:	orrs	r0, r4, r5
    1d08:	ldr	r0, [fp, #-56]	; 0xffffffc8
    1d0c:	mvneq	r3, #4
    1d10:	str	r2, [ip, #44]	; 0x2c
    1d14:	cmp	r0, #4
    1d18:	mvneq	r3, #4
    1d1c:	cmp	r6, #0
    1d20:	movne	r3, r6
    1d24:	b	514 <coda_inflate+0x30>
    1d28:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1d2c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    1d30:	b	1bb0 <coda_inflate+0x16cc>
    1d34:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1d38:	b	1bb4 <coda_inflate+0x16d0>
    1d3c:	mov	r8, #0
    1d40:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1d44:	ldr	r9, [sp, #56]	; 0x38
    1d48:	b	1bb4 <coda_inflate+0x16d0>
    1d4c:	mvn	r6, #2
    1d50:	b	1bb4 <coda_inflate+0x16d0>
    1d54:	mvn	r3, #3
    1d58:	b	514 <coda_inflate+0x30>
    1d5c:	sub	r8, r8, r6
    1d60:	add	sl, sl, r6
    1d64:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1d68:	b	1bb4 <coda_inflate+0x16d0>
    1d6c:	sub	r8, r8, r9
    1d70:	add	sl, sl, r9
    1d74:	b	1d40 <coda_inflate+0x185c>
    1d78:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1d7c:	mov	r3, #2
    1d80:	str	r0, [ip, #12]
    1d84:	str	r9, [ip, #16]
    1d88:	str	sl, [ip]
    1d8c:	str	r8, [ip, #4]
    1d90:	str	r4, [lr, #56]	; 0x38
    1d94:	str	r5, [lr, #60]	; 0x3c
    1d98:	b	514 <coda_inflate+0x30>
    1d9c:	mov	r4, #0
    1da0:	mov	r5, #0
    1da4:	mov	r0, #28
    1da8:	str	r0, [lr]
    1dac:	b	1bb4 <coda_inflate+0x16d0>
    1db0:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1db4:	mov	r5, #0
    1db8:	b	1bb4 <coda_inflate+0x16d0>
    1dbc:	ldr	r6, [fp, #-52]	; 0xffffffcc
    1dc0:	sub	r5, r5, #3
    1dc4:	lsr	r4, r4, #3
    1dc8:	b	1bb4 <coda_inflate+0x16d0>
    1dcc:	mov	r6, #0
    1dd0:	b	1bb4 <coda_inflate+0x16d0>

00001dd4 <updatewindow>:
    1dd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1dd8:	add	fp, sp, #24
    1ddc:	ldr	r4, [r0, #28]
    1de0:	mov	r5, r2
    1de4:	mov	r2, r0
    1de8:	mov	r8, r1
    1dec:	ldr	r0, [r4, #52]	; 0x34
    1df0:	cmp	r0, #0
    1df4:	bne	1e20 <updatewindow+0x4c>
    1df8:	ldr	r0, [r4, #36]	; 0x24
    1dfc:	mov	r6, #1
    1e00:	ldr	r3, [r2, #32]
    1e04:	lsl	r1, r6, r0
    1e08:	ldr	r0, [r2, #40]	; 0x28
    1e0c:	mov	r2, #1
    1e10:	blx	r3
    1e14:	cmp	r0, #0
    1e18:	str	r0, [r4, #52]	; 0x34
    1e1c:	beq	1ef4 <updatewindow+0x120>
    1e20:	ldr	r2, [r4, #40]	; 0x28
    1e24:	cmp	r2, #0
    1e28:	beq	1e84 <updatewindow+0xb0>
    1e2c:	cmp	r2, r5
    1e30:	bls	1ea8 <updatewindow+0xd4>
    1e34:	ldr	r3, [r4, #48]	; 0x30
    1e38:	sub	r1, r8, r5
    1e3c:	sub	r7, r2, r3
    1e40:	add	r0, r0, r3
    1e44:	cmp	r7, r5
    1e48:	movhi	r7, r5
    1e4c:	mov	r2, r7
    1e50:	bl	0 <memcpy>
    1e54:	subs	r5, r5, r7
    1e58:	beq	1ec8 <updatewindow+0xf4>
    1e5c:	ldr	r0, [r4, #52]	; 0x34
    1e60:	sub	r1, r8, r5
    1e64:	mov	r2, r5
    1e68:	bl	0 <memcpy>
    1e6c:	ldr	r0, [r4, #40]	; 0x28
    1e70:	mov	r6, #0
    1e74:	str	r0, [r4, #44]	; 0x2c
    1e78:	mov	r0, r6
    1e7c:	str	r5, [r4, #48]	; 0x30
    1e80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1e84:	ldr	r2, [r4, #36]	; 0x24
    1e88:	mov	r3, #1
    1e8c:	mov	r1, #0
    1e90:	lsl	r2, r3, r2
    1e94:	str	r2, [r4, #40]	; 0x28
    1e98:	str	r1, [r4, #44]	; 0x2c
    1e9c:	str	r1, [r4, #48]	; 0x30
    1ea0:	cmp	r2, r5
    1ea4:	bhi	1e34 <updatewindow+0x60>
    1ea8:	sub	r1, r8, r2
    1eac:	bl	0 <memcpy>
    1eb0:	ldr	r0, [r4, #40]	; 0x28
    1eb4:	mov	r6, #0
    1eb8:	str	r0, [r4, #44]	; 0x2c
    1ebc:	mov	r0, r6
    1ec0:	str	r6, [r4, #48]	; 0x30
    1ec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1ec8:	ldr	r2, [r4, #48]	; 0x30
    1ecc:	ldr	r1, [r4, #40]	; 0x28
    1ed0:	ldr	r0, [r4, #44]	; 0x2c
    1ed4:	mov	r6, #0
    1ed8:	add	r2, r2, r7
    1edc:	subs	r3, r2, r1
    1ee0:	movne	r3, r2
    1ee4:	cmp	r0, r1
    1ee8:	addcc	r0, r0, r7
    1eec:	str	r3, [r4, #48]	; 0x30
    1ef0:	strcc	r0, [r4, #44]	; 0x2c
    1ef4:	mov	r0, r6
    1ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001efc <coda_inflateEnd>:
    1efc:	push	{r4, sl, fp, lr}
    1f00:	add	fp, sp, #8
    1f04:	mov	r4, r0
    1f08:	mvn	r0, #1
    1f0c:	cmp	r4, #0
    1f10:	popeq	{r4, sl, fp, pc}
    1f14:	ldr	r1, [r4, #28]
    1f18:	cmp	r1, #0
    1f1c:	ldrne	r3, [r4, #36]	; 0x24
    1f20:	cmpne	r3, #0
    1f24:	bne	1f2c <coda_inflateEnd+0x30>
    1f28:	pop	{r4, sl, fp, pc}
    1f2c:	ldr	r2, [r1, #52]	; 0x34
    1f30:	cmp	r2, #0
    1f34:	beq	1f4c <coda_inflateEnd+0x50>
    1f38:	ldr	r0, [r4, #40]	; 0x28
    1f3c:	mov	r1, r2
    1f40:	blx	r3
    1f44:	ldr	r1, [r4, #28]
    1f48:	ldr	r3, [r4, #36]	; 0x24
    1f4c:	ldr	r0, [r4, #40]	; 0x28
    1f50:	blx	r3
    1f54:	mov	r0, #0
    1f58:	str	r0, [r4, #28]
    1f5c:	pop	{r4, sl, fp, pc}

00001f60 <coda_inflateGetDictionary>:
    1f60:	push	{r4, r5, r6, sl, fp, lr}
    1f64:	add	fp, sp, #16
    1f68:	mov	r5, r1
    1f6c:	mov	r1, r0
    1f70:	mvn	r0, #1
    1f74:	cmp	r1, #0
    1f78:	ldrne	r6, [r1, #28]
    1f7c:	cmpne	r6, #0
    1f80:	bne	1f88 <coda_inflateGetDictionary+0x28>
    1f84:	pop	{r4, r5, r6, sl, fp, pc}
    1f88:	cmp	r5, #0
    1f8c:	mov	r4, r2
    1f90:	ldrne	r0, [r6, #44]	; 0x2c
    1f94:	cmpne	r0, #0
    1f98:	beq	1fcc <coda_inflateGetDictionary+0x6c>
    1f9c:	ldr	r1, [r6, #48]	; 0x30
    1fa0:	ldr	r3, [r6, #52]	; 0x34
    1fa4:	sub	r2, r0, r1
    1fa8:	add	r1, r3, r1
    1fac:	mov	r0, r5
    1fb0:	bl	0 <memcpy>
    1fb4:	ldr	r0, [r6, #44]	; 0x2c
    1fb8:	ldr	r2, [r6, #48]	; 0x30
    1fbc:	ldr	r1, [r6, #52]	; 0x34
    1fc0:	add	r0, r5, r0
    1fc4:	sub	r0, r0, r2
    1fc8:	bl	0 <memcpy>
    1fcc:	cmp	r4, #0
    1fd0:	mov	r0, #0
    1fd4:	ldrne	r1, [r6, #44]	; 0x2c
    1fd8:	strne	r1, [r4]
    1fdc:	pop	{r4, r5, r6, sl, fp, pc}

00001fe0 <coda_inflateSetDictionary>:
    1fe0:	push	{r4, r5, r6, r7, fp, lr}
    1fe4:	add	fp, sp, #16
    1fe8:	mov	r5, r0
    1fec:	mvn	r0, #1
    1ff0:	cmp	r5, #0
    1ff4:	ldrne	r7, [r5, #28]
    1ff8:	cmpne	r7, #0
    1ffc:	bne	2004 <coda_inflateSetDictionary+0x24>
    2000:	pop	{r4, r5, r6, r7, fp, pc}
    2004:	mov	r4, r2
    2008:	ldr	r2, [r7, #8]
    200c:	mov	r6, r1
    2010:	ldr	r1, [r7]
    2014:	cmp	r2, #0
    2018:	beq	2028 <coda_inflateSetDictionary+0x48>
    201c:	cmp	r1, #10
    2020:	popne	{r4, r5, r6, r7, fp, pc}
    2024:	b	2030 <coda_inflateSetDictionary+0x50>
    2028:	cmp	r1, #10
    202c:	bne	2060 <coda_inflateSetDictionary+0x80>
    2030:	mov	r0, #0
    2034:	mov	r1, #0
    2038:	mov	r2, #0
    203c:	bl	0 <coda_adler32>
    2040:	mov	r1, r6
    2044:	mov	r2, r4
    2048:	bl	0 <coda_adler32>
    204c:	ldr	r2, [r7, #24]
    2050:	mov	r1, r0
    2054:	mvn	r0, #2
    2058:	cmp	r1, r2
    205c:	bne	2000 <coda_inflateSetDictionary+0x20>
    2060:	add	r1, r6, r4
    2064:	mov	r0, r5
    2068:	mov	r2, r4
    206c:	bl	1dd4 <updatewindow>
    2070:	cmp	r0, #0
    2074:	movne	r0, #30
    2078:	strne	r0, [r7]
    207c:	mvnne	r0, #3
    2080:	popne	{r4, r5, r6, r7, fp, pc}
    2084:	mov	r0, #1
    2088:	str	r0, [r7, #12]
    208c:	mov	r0, #0
    2090:	pop	{r4, r5, r6, r7, fp, pc}

00002094 <coda_inflateGetHeader>:
    2094:	mov	r2, r0
    2098:	mvn	r0, #1
    209c:	cmp	r2, #0
    20a0:	ldrne	r2, [r2, #28]
    20a4:	cmpne	r2, #0
    20a8:	bne	20b0 <coda_inflateGetHeader+0x1c>
    20ac:	bx	lr
    20b0:	ldrb	r3, [r2, #8]
    20b4:	tst	r3, #2
    20b8:	movne	r0, #0
    20bc:	strne	r1, [r2, #32]
    20c0:	strne	r0, [r1, #48]	; 0x30
    20c4:	bx	lr

000020c8 <coda_inflateSync>:
    20c8:	push	{r4, r5, r6, sl, fp, lr}
    20cc:	add	fp, sp, #16
    20d0:	sub	sp, sp, #4
    20d4:	cmp	r0, #0
    20d8:	mvn	r1, #1
    20dc:	ldrne	ip, [r0, #28]
    20e0:	cmpne	ip, #0
    20e4:	bne	20f4 <coda_inflateSync+0x2c>
    20e8:	mov	r0, r1
    20ec:	sub	sp, fp, #16
    20f0:	pop	{r4, r5, r6, sl, fp, pc}
    20f4:	ldr	r2, [r0, #4]
    20f8:	cmp	r2, #0
    20fc:	bne	2110 <coda_inflateSync+0x48>
    2100:	ldr	r3, [ip, #60]	; 0x3c
    2104:	mvn	r1, #4
    2108:	cmp	r3, #8
    210c:	bcc	20e8 <coda_inflateSync+0x20>
    2110:	ldr	r1, [ip]
    2114:	cmp	r1, #31
    2118:	bne	2128 <coda_inflateSync+0x60>
    211c:	mov	lr, ip
    2120:	ldr	r3, [lr, #104]!	; 0x68
    2124:	b	2204 <coda_inflateSync+0x13c>
    2128:	mov	r1, #31
    212c:	str	r1, [ip]
    2130:	ldr	r3, [ip, #60]	; 0x3c
    2134:	ldr	r1, [ip, #56]	; 0x38
    2138:	bic	r2, r3, #7
    213c:	and	r3, r3, #7
    2140:	lsl	r3, r1, r3
    2144:	cmp	r2, #0
    2148:	str	r3, [ip, #56]	; 0x38
    214c:	str	r2, [ip, #60]	; 0x3c
    2150:	beq	21f0 <coda_inflateSync+0x128>
    2154:	rsb	r1, r2, #7
    2158:	mov	r6, #1
    215c:	mov	r5, sp
    2160:	cmn	r1, #8
    2164:	mvnls	r1, #7
    2168:	add	r1, r1, r2
    216c:	add	r4, r6, r1, lsr #3
    2170:	bic	r6, r1, #7
    2174:	lsr	r1, r1, #3
    2178:	strb	r3, [r5], #1
    217c:	subs	r4, r4, #1
    2180:	lsr	r3, r3, #8
    2184:	bne	2178 <coda_inflateSync+0xb0>
    2188:	sub	r2, r2, #8
    218c:	mov	r4, #0
    2190:	mov	lr, ip
    2194:	str	r4, [lr, #104]!	; 0x68
    2198:	sub	r2, r2, r6
    219c:	str	r3, [lr, #-48]	; 0xffffffd0
    21a0:	str	r2, [lr, #-44]	; 0xffffffd4
    21a4:	mov	r2, sp
    21a8:	mov	r3, #0
    21ac:	ldrb	r5, [r2, r4]
    21b0:	cmp	r3, #2
    21b4:	mov	r6, #255	; 0xff
    21b8:	movwcc	r6, #0
    21bc:	cmp	r6, r5
    21c0:	bne	21cc <coda_inflateSync+0x104>
    21c4:	add	r3, r3, #1
    21c8:	b	21dc <coda_inflateSync+0x114>
    21cc:	cmp	r5, #0
    21d0:	mov	r5, #0
    21d4:	rsbeq	r5, r3, #4
    21d8:	mov	r3, r5
    21dc:	cmp	r4, r1
    21e0:	addcc	r4, r4, #1
    21e4:	cmpcc	r3, #4
    21e8:	bcc	21ac <coda_inflateSync+0xe4>
    21ec:	b	21fc <coda_inflateSync+0x134>
    21f0:	mov	r3, #0
    21f4:	mov	lr, ip
    21f8:	str	r3, [lr, #104]!	; 0x68
    21fc:	str	r3, [lr]
    2200:	ldr	r2, [r0, #4]
    2204:	ldr	r4, [r0]
    2208:	mov	r1, #0
    220c:	cmp	r2, #0
    2210:	beq	2260 <coda_inflateSync+0x198>
    2214:	cmp	r3, #3
    2218:	bhi	2260 <coda_inflateSync+0x198>
    221c:	mov	r1, #0
    2220:	ldrb	r5, [r4, r1]
    2224:	cmp	r3, #2
    2228:	mov	r6, #255	; 0xff
    222c:	movwcc	r6, #0
    2230:	cmp	r6, r5
    2234:	bne	2240 <coda_inflateSync+0x178>
    2238:	add	r3, r3, #1
    223c:	b	2250 <coda_inflateSync+0x188>
    2240:	cmp	r5, #0
    2244:	mov	r5, #0
    2248:	rsbeq	r5, r3, #4
    224c:	mov	r3, r5
    2250:	add	r1, r1, #1
    2254:	cmp	r1, r2
    2258:	cmpcc	r3, #4
    225c:	bcc	2220 <coda_inflateSync+0x158>
    2260:	add	r2, r4, r1
    2264:	str	r3, [lr]
    2268:	cmp	r3, #4
    226c:	str	r2, [r0]
    2270:	ldmib	r0, {r2, r6}
    2274:	sub	r2, r2, r1
    2278:	str	r2, [r0, #4]
    227c:	add	r2, r6, r1
    2280:	mvn	r1, #2
    2284:	str	r2, [r0, #8]
    2288:	bne	20e8 <coda_inflateSync+0x20>
    228c:	mov	r1, #0
    2290:	ldr	r3, [r0, #20]
    2294:	mov	r5, #1
    2298:	str	r1, [ip, #40]	; 0x28
    229c:	str	r1, [ip, #44]	; 0x2c
    22a0:	str	r1, [ip, #48]	; 0x30
    22a4:	str	r1, [ip, #28]
    22a8:	str	r1, [r0, #8]
    22ac:	str	r1, [r0, #20]
    22b0:	str	r1, [r0, #24]
    22b4:	ldr	r6, [ip, #8]
    22b8:	cmp	r6, #0
    22bc:	andne	r6, r6, #1
    22c0:	strne	r6, [r0, #48]	; 0x30
    22c4:	mov	r6, #7104	; 0x1bc0
    22c8:	str	r5, [ip, r6]
    22cc:	movw	r6, #7108	; 0x1bc4
    22d0:	mvn	r5, #0
    22d4:	str	r5, [ip, r6]
    22d8:	mov	r6, #32768	; 0x8000
    22dc:	str	r1, [ip, #12]
    22e0:	str	r1, [ip, #4]
    22e4:	str	r6, [ip, #20]
    22e8:	add	r6, ip, #1328	; 0x530
    22ec:	str	r1, [ip, #32]
    22f0:	str	r1, [ip, #56]	; 0x38
    22f4:	str	r1, [ip, #60]	; 0x3c
    22f8:	str	r6, [ip, #108]	; 0x6c
    22fc:	str	r6, [ip, #76]	; 0x4c
    2300:	str	r6, [ip, #80]	; 0x50
    2304:	str	r3, [r0, #20]
    2308:	str	r2, [r0, #8]
    230c:	mov	r0, #11
    2310:	str	r0, [ip]
    2314:	b	20e8 <coda_inflateSync+0x20>

00002318 <coda_inflateSyncPoint>:
    2318:	mov	r1, r0
    231c:	mvn	r0, #1
    2320:	cmp	r1, #0
    2324:	ldrne	r1, [r1, #28]
    2328:	cmpne	r1, #0
    232c:	bne	2334 <coda_inflateSyncPoint+0x1c>
    2330:	bx	lr
    2334:	ldr	r2, [r1]
    2338:	mov	r0, #0
    233c:	cmp	r2, #13
    2340:	ldreq	r0, [r1, #60]	; 0x3c
    2344:	clzeq	r0, r0
    2348:	lsreq	r0, r0, #5
    234c:	bx	lr

00002350 <coda_inflateCopy>:
    2350:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2354:	add	fp, sp, #24
    2358:	cmp	r0, #0
    235c:	mvn	r6, #1
    2360:	movne	r7, r1
    2364:	cmpne	r1, #0
    2368:	beq	2380 <coda_inflateCopy+0x30>
    236c:	ldr	r5, [r7, #28]
    2370:	cmp	r5, #0
    2374:	ldrne	r3, [r7, #32]
    2378:	cmpne	r3, #0
    237c:	bne	2388 <coda_inflateCopy+0x38>
    2380:	mov	r0, r6
    2384:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2388:	mov	r4, r0
    238c:	ldr	r0, [r7, #36]	; 0x24
    2390:	cmp	r0, #0
    2394:	beq	2380 <coda_inflateCopy+0x30>
    2398:	ldr	r0, [r7, #40]	; 0x28
    239c:	mov	r1, #1
    23a0:	movw	r2, #7116	; 0x1bcc
    23a4:	blx	r3
    23a8:	mvn	r6, #3
    23ac:	cmp	r0, #0
    23b0:	beq	2380 <coda_inflateCopy+0x30>
    23b4:	mov	r9, r0
    23b8:	ldr	r0, [r5, #52]	; 0x34
    23bc:	cmp	r0, #0
    23c0:	beq	2404 <coda_inflateCopy+0xb4>
    23c4:	ldr	r0, [r5, #36]	; 0x24
    23c8:	mov	r1, #1
    23cc:	ldr	r3, [r7, #32]
    23d0:	mov	r2, #1
    23d4:	lsl	r1, r1, r0
    23d8:	ldr	r0, [r7, #40]	; 0x28
    23dc:	blx	r3
    23e0:	mov	r8, r0
    23e4:	cmp	r0, #0
    23e8:	bne	2408 <coda_inflateCopy+0xb8>
    23ec:	ldr	r2, [r7, #36]	; 0x24
    23f0:	ldr	r0, [r7, #40]	; 0x28
    23f4:	mov	r1, r9
    23f8:	blx	r2
    23fc:	mov	r0, r6
    2400:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2404:	mov	r8, #0
    2408:	mov	r1, #48	; 0x30
    240c:	add	r0, r7, #32
    2410:	add	r2, r7, #16
    2414:	vld1.8	{d16-d17}, [r7], r1
    2418:	vld1.8	{d18-d19}, [r0]
    241c:	vld1.8	{d20-d21}, [r2]
    2420:	add	r0, r4, #32
    2424:	movw	r2, #7116	; 0x1bcc
    2428:	vld1.8	{d22}, [r7]
    242c:	vst1.8	{d18-d19}, [r0]
    2430:	add	r0, r4, #16
    2434:	vst1.8	{d20-d21}, [r0]
    2438:	mov	r0, r4
    243c:	vst1.8	{d16-d17}, [r0], r1
    2440:	mov	r1, r5
    2444:	vst1.8	{d22}, [r0]
    2448:	mov	r0, r9
    244c:	bl	0 <memcpy>
    2450:	ldr	r2, [r5, #76]	; 0x4c
    2454:	add	r1, r5, #1328	; 0x530
    2458:	add	r0, r9, #1328	; 0x530
    245c:	cmp	r2, r1
    2460:	bcc	2490 <coda_inflateCopy+0x140>
    2464:	movw	r3, #7100	; 0x1bbc
    2468:	add	r3, r5, r3
    246c:	cmp	r2, r3
    2470:	bhi	2490 <coda_inflateCopy+0x140>
    2474:	sub	r2, r2, r1
    2478:	add	r2, r0, r2
    247c:	str	r2, [r9, #76]	; 0x4c
    2480:	ldr	r2, [r5, #80]	; 0x50
    2484:	sub	r2, r2, r1
    2488:	add	r2, r0, r2
    248c:	str	r2, [r9, #80]	; 0x50
    2490:	ldr	r2, [r5, #108]	; 0x6c
    2494:	cmp	r8, #0
    2498:	sub	r1, r2, r1
    249c:	add	r0, r0, r1
    24a0:	str	r0, [r9, #108]	; 0x6c
    24a4:	beq	24c0 <coda_inflateCopy+0x170>
    24a8:	ldr	r0, [r5, #36]	; 0x24
    24ac:	ldr	r1, [r5, #52]	; 0x34
    24b0:	mov	r2, #1
    24b4:	lsl	r2, r2, r0
    24b8:	mov	r0, r8
    24bc:	bl	0 <memcpy>
    24c0:	mov	r6, #0
    24c4:	str	r8, [r9, #52]	; 0x34
    24c8:	str	r9, [r4, #28]
    24cc:	mov	r0, r6
    24d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000024d4 <coda_inflateUndermine>:
    24d4:	mov	r1, r0
    24d8:	mvn	r0, #1
    24dc:	cmp	r1, #0
    24e0:	ldrne	r1, [r1, #28]
    24e4:	cmpne	r1, #0
    24e8:	movne	r0, #7104	; 0x1bc0
    24ec:	movne	r2, #1
    24f0:	strne	r2, [r1, r0]
    24f4:	mvnne	r0, #2
    24f8:	bx	lr

000024fc <coda_inflateMark>:
    24fc:	mov	r1, r0
    2500:	movw	r0, #0
    2504:	cmp	r1, #0
    2508:	movt	r0, #65535	; 0xffff
    250c:	ldrne	r1, [r1, #28]
    2510:	cmpne	r1, #0
    2514:	bne	251c <coda_inflateMark+0x20>
    2518:	bx	lr
    251c:	movw	r0, #7108	; 0x1bc4
    2520:	mov	r2, r1
    2524:	ldr	r3, [r2], r0
    2528:	ldr	r0, [r2]
    252c:	cmp	r3, #24
    2530:	lsl	r0, r0, #16
    2534:	beq	254c <coda_inflateMark+0x50>
    2538:	mov	r2, #0
    253c:	cmp	r3, #15
    2540:	ldreq	r2, [r1, #64]	; 0x40
    2544:	add	r0, r2, r0
    2548:	bx	lr
    254c:	movw	r2, #7112	; 0x1bc8
    2550:	ldr	r2, [r1, r2]
    2554:	ldr	r1, [r1, #64]	; 0x40
    2558:	sub	r2, r2, r1
    255c:	add	r0, r2, r0
    2560:	bx	lr
