
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-time.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_month_to_integer>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #16
      10:	str	r0, [fp, #-16]
      14:	ldr	r3, [fp, #-16]
      18:	ldrb	r3, [r3]
      1c:	strb	r3, [fp, #-8]
      20:	ldr	r3, [fp, #-16]
      24:	ldrb	r3, [r3, #1]
      28:	strb	r3, [fp, #-7]
      2c:	ldr	r3, [fp, #-16]
      30:	ldrb	r3, [r3, #2]
      34:	strb	r3, [fp, #-6]
      38:	mov	r3, #0
      3c:	strb	r3, [fp, #-5]
      40:	sub	r3, fp, #8
      44:	mov	r2, #3
      48:	movw	r1, #0
      4c:	movt	r1, #0
      50:	mov	r0, r3
      54:	bl	0 <strncasecmp>
      58:	mov	r3, r0
      5c:	cmp	r3, #0
      60:	bne	6c <coda_month_to_integer+0x6c>
      64:	mov	r3, #1
      68:	b	26c <coda_month_to_integer+0x26c>
      6c:	sub	r3, fp, #8
      70:	mov	r2, #3
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mov	r0, r3
      80:	bl	0 <strncasecmp>
      84:	mov	r3, r0
      88:	cmp	r3, #0
      8c:	bne	98 <coda_month_to_integer+0x98>
      90:	mov	r3, #2
      94:	b	26c <coda_month_to_integer+0x26c>
      98:	sub	r3, fp, #8
      9c:	mov	r2, #3
      a0:	movw	r1, #0
      a4:	movt	r1, #0
      a8:	mov	r0, r3
      ac:	bl	0 <strncasecmp>
      b0:	mov	r3, r0
      b4:	cmp	r3, #0
      b8:	bne	c4 <coda_month_to_integer+0xc4>
      bc:	mov	r3, #3
      c0:	b	26c <coda_month_to_integer+0x26c>
      c4:	sub	r3, fp, #8
      c8:	mov	r2, #3
      cc:	movw	r1, #0
      d0:	movt	r1, #0
      d4:	mov	r0, r3
      d8:	bl	0 <strncasecmp>
      dc:	mov	r3, r0
      e0:	cmp	r3, #0
      e4:	bne	f0 <coda_month_to_integer+0xf0>
      e8:	mov	r3, #4
      ec:	b	26c <coda_month_to_integer+0x26c>
      f0:	sub	r3, fp, #8
      f4:	mov	r2, #3
      f8:	movw	r1, #0
      fc:	movt	r1, #0
     100:	mov	r0, r3
     104:	bl	0 <strncasecmp>
     108:	mov	r3, r0
     10c:	cmp	r3, #0
     110:	bne	11c <coda_month_to_integer+0x11c>
     114:	mov	r3, #5
     118:	b	26c <coda_month_to_integer+0x26c>
     11c:	sub	r3, fp, #8
     120:	mov	r2, #3
     124:	movw	r1, #0
     128:	movt	r1, #0
     12c:	mov	r0, r3
     130:	bl	0 <strncasecmp>
     134:	mov	r3, r0
     138:	cmp	r3, #0
     13c:	bne	148 <coda_month_to_integer+0x148>
     140:	mov	r3, #6
     144:	b	26c <coda_month_to_integer+0x26c>
     148:	sub	r3, fp, #8
     14c:	mov	r2, #3
     150:	movw	r1, #0
     154:	movt	r1, #0
     158:	mov	r0, r3
     15c:	bl	0 <strncasecmp>
     160:	mov	r3, r0
     164:	cmp	r3, #0
     168:	bne	174 <coda_month_to_integer+0x174>
     16c:	mov	r3, #7
     170:	b	26c <coda_month_to_integer+0x26c>
     174:	sub	r3, fp, #8
     178:	mov	r2, #3
     17c:	movw	r1, #0
     180:	movt	r1, #0
     184:	mov	r0, r3
     188:	bl	0 <strncasecmp>
     18c:	mov	r3, r0
     190:	cmp	r3, #0
     194:	bne	1a0 <coda_month_to_integer+0x1a0>
     198:	mov	r3, #8
     19c:	b	26c <coda_month_to_integer+0x26c>
     1a0:	sub	r3, fp, #8
     1a4:	mov	r2, #3
     1a8:	movw	r1, #0
     1ac:	movt	r1, #0
     1b0:	mov	r0, r3
     1b4:	bl	0 <strncasecmp>
     1b8:	mov	r3, r0
     1bc:	cmp	r3, #0
     1c0:	bne	1cc <coda_month_to_integer+0x1cc>
     1c4:	mov	r3, #9
     1c8:	b	26c <coda_month_to_integer+0x26c>
     1cc:	sub	r3, fp, #8
     1d0:	mov	r2, #3
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	mov	r0, r3
     1e0:	bl	0 <strncasecmp>
     1e4:	mov	r3, r0
     1e8:	cmp	r3, #0
     1ec:	bne	1f8 <coda_month_to_integer+0x1f8>
     1f0:	mov	r3, #10
     1f4:	b	26c <coda_month_to_integer+0x26c>
     1f8:	sub	r3, fp, #8
     1fc:	mov	r2, #3
     200:	movw	r1, #0
     204:	movt	r1, #0
     208:	mov	r0, r3
     20c:	bl	0 <strncasecmp>
     210:	mov	r3, r0
     214:	cmp	r3, #0
     218:	bne	224 <coda_month_to_integer+0x224>
     21c:	mov	r3, #11
     220:	b	26c <coda_month_to_integer+0x26c>
     224:	sub	r3, fp, #8
     228:	mov	r2, #3
     22c:	movw	r1, #0
     230:	movt	r1, #0
     234:	mov	r0, r3
     238:	bl	0 <strncasecmp>
     23c:	mov	r3, r0
     240:	cmp	r3, #0
     244:	bne	250 <coda_month_to_integer+0x250>
     248:	mov	r3, #12
     24c:	b	26c <coda_month_to_integer+0x26c>
     250:	sub	r3, fp, #8
     254:	mov	r2, r3
     258:	movw	r1, #0
     25c:	movt	r1, #0
     260:	mvn	r0, #99	; 0x63
     264:	bl	0 <coda_set_error>
     268:	mvn	r3, #0
     26c:	mov	r0, r3
     270:	sub	sp, fp, #4
     274:	ldr	fp, [sp]
     278:	add	sp, sp, #4
     27c:	pop	{pc}		; (ldr pc, [sp], #4)

00000280 <parse_integer>:
     280:	push	{fp}		; (str fp, [sp, #-4]!)
     284:	add	fp, sp, #0
     288:	sub	sp, sp, #20
     28c:	str	r0, [fp, #-8]
     290:	str	r1, [fp, #-12]
     294:	str	r2, [fp, #-16]
     298:	str	r3, [fp, #-20]	; 0xffffffec
     29c:	ldr	r3, [fp, #-16]
     2a0:	cmp	r3, #0
     2a4:	beq	2e0 <parse_integer+0x60>
     2a8:	b	2c4 <parse_integer+0x44>
     2ac:	ldr	r3, [fp, #-8]
     2b0:	add	r3, r3, #1
     2b4:	str	r3, [fp, #-8]
     2b8:	ldr	r3, [fp, #-12]
     2bc:	sub	r3, r3, #1
     2c0:	str	r3, [fp, #-12]
     2c4:	ldr	r3, [fp, #-12]
     2c8:	cmp	r3, #1
     2cc:	ble	2e0 <parse_integer+0x60>
     2d0:	ldr	r3, [fp, #-8]
     2d4:	ldrb	r3, [r3]
     2d8:	cmp	r3, #32
     2dc:	beq	2ac <parse_integer+0x2c>
     2e0:	ldr	r3, [fp, #-20]	; 0xffffffec
     2e4:	mov	r2, #0
     2e8:	str	r2, [r3]
     2ec:	b	364 <parse_integer+0xe4>
     2f0:	ldr	r3, [fp, #-8]
     2f4:	ldrb	r3, [r3]
     2f8:	cmp	r3, #47	; 0x2f
     2fc:	bls	310 <parse_integer+0x90>
     300:	ldr	r3, [fp, #-8]
     304:	ldrb	r3, [r3]
     308:	cmp	r3, #57	; 0x39
     30c:	bls	318 <parse_integer+0x98>
     310:	mvn	r3, #0
     314:	b	374 <parse_integer+0xf4>
     318:	ldr	r3, [fp, #-20]	; 0xffffffec
     31c:	ldr	r2, [r3]
     320:	mov	r3, r2
     324:	lsl	r3, r3, #2
     328:	add	r3, r3, r2
     32c:	lsl	r3, r3, #1
     330:	mov	r2, r3
     334:	ldr	r3, [fp, #-8]
     338:	ldrb	r3, [r3]
     33c:	sub	r3, r3, #48	; 0x30
     340:	add	r2, r2, r3
     344:	ldr	r3, [fp, #-20]	; 0xffffffec
     348:	str	r2, [r3]
     34c:	ldr	r3, [fp, #-8]
     350:	add	r3, r3, #1
     354:	str	r3, [fp, #-8]
     358:	ldr	r3, [fp, #-12]
     35c:	sub	r3, r3, #1
     360:	str	r3, [fp, #-12]
     364:	ldr	r3, [fp, #-12]
     368:	cmp	r3, #0
     36c:	bgt	2f0 <parse_integer+0x70>
     370:	mov	r3, #0
     374:	mov	r0, r3
     378:	add	sp, fp, #0
     37c:	pop	{fp}		; (ldr fp, [sp], #4)
     380:	bx	lr

00000384 <y>:
     384:	push	{fp}		; (str fp, [sp, #-4]!)
     388:	add	fp, sp, #0
     38c:	sub	sp, sp, #12
     390:	str	r0, [fp, #-8]
     394:	ldr	r3, [fp, #-8]
     398:	lsr	r3, r3, #31
     39c:	uxtb	r3, r3
     3a0:	mov	r2, r3
     3a4:	ldr	r3, [fp, #-8]
     3a8:	add	r3, r2, r3
     3ac:	mov	r0, r3
     3b0:	add	sp, fp, #0
     3b4:	pop	{fp}		; (ldr fp, [sp], #4)
     3b8:	bx	lr

000003bc <int_div>:
     3bc:	push	{fp}		; (str fp, [sp, #-4]!)
     3c0:	add	fp, sp, #0
     3c4:	sub	sp, sp, #12
     3c8:	str	r0, [fp, #-8]
     3cc:	str	r1, [fp, #-12]
     3d0:	ldr	r2, [fp, #-8]
     3d4:	ldr	r3, [fp, #-12]
     3d8:	sdiv	r2, r2, r3
     3dc:	ldr	r3, [fp, #-8]
     3e0:	ldr	r1, [fp, #-12]
     3e4:	sdiv	r1, r3, r1
     3e8:	ldr	r0, [fp, #-12]
     3ec:	mul	r1, r0, r1
     3f0:	sub	r3, r3, r1
     3f4:	lsr	r3, r3, #31
     3f8:	uxtb	r3, r3
     3fc:	sub	r3, r2, r3
     400:	mov	r0, r3
     404:	add	sp, fp, #0
     408:	pop	{fp}		; (ldr fp, [sp], #4)
     40c:	bx	lr

00000410 <int_mod>:
     410:	push	{fp}		; (str fp, [sp, #-4]!)
     414:	add	fp, sp, #0
     418:	sub	sp, sp, #12
     41c:	str	r0, [fp, #-8]
     420:	str	r1, [fp, #-12]
     424:	ldr	r3, [fp, #-8]
     428:	ldr	r2, [fp, #-12]
     42c:	sdiv	r2, r3, r2
     430:	ldr	r1, [fp, #-12]
     434:	mul	r2, r1, r2
     438:	sub	r2, r3, r2
     43c:	ldr	r3, [fp, #-8]
     440:	ldr	r1, [fp, #-12]
     444:	sdiv	r1, r3, r1
     448:	ldr	r0, [fp, #-12]
     44c:	mul	r1, r0, r1
     450:	sub	r3, r3, r1
     454:	lsr	r3, r3, #31
     458:	uxtb	r3, r3
     45c:	mov	r1, r3
     460:	ldr	r3, [fp, #-12]
     464:	mul	r3, r3, r1
     468:	add	r3, r2, r3
     46c:	mov	r0, r3
     470:	add	sp, fp, #0
     474:	pop	{fp}		; (ldr fp, [sp], #4)
     478:	bx	lr

0000047c <dmy_to_mjd2000_julian>:
     47c:	str	r4, [sp, #-12]!
     480:	str	fp, [sp, #4]
     484:	str	lr, [sp, #8]
     488:	add	fp, sp, #8
     48c:	sub	sp, sp, #84	; 0x54
     490:	str	r0, [fp, #-72]	; 0xffffffb8
     494:	str	r1, [fp, #-76]	; 0xffffffb4
     498:	str	r2, [fp, #-80]	; 0xffffffb0
     49c:	str	r3, [fp, #-84]	; 0xffffffac
     4a0:	movw	r2, #0
     4a4:	movt	r2, #0
     4a8:	sub	r3, fp, #64	; 0x40
     4ac:	ldrd	r0, [r2]
     4b0:	strd	r0, [r3]
     4b4:	ldrd	r0, [r2, #8]
     4b8:	strd	r0, [r3, #8]
     4bc:	ldrd	r0, [r2, #16]
     4c0:	strd	r0, [r3, #16]
     4c4:	ldrd	r0, [r2, #24]
     4c8:	strd	r0, [r3, #24]
     4cc:	ldrd	r0, [r2, #32]
     4d0:	strd	r0, [r3, #32]
     4d4:	ldrd	r0, [r2, #40]	; 0x28
     4d8:	strd	r0, [r3, #40]	; 0x28
     4dc:	ldr	r2, [r2, #48]	; 0x30
     4e0:	str	r2, [r3, #48]	; 0x30
     4e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
     4e8:	cmp	r3, #0
     4ec:	beq	584 <dmy_to_mjd2000_julian+0x108>
     4f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     4f4:	cmp	r3, #0
     4f8:	ble	584 <dmy_to_mjd2000_julian+0x108>
     4fc:	ldr	r3, [fp, #-76]	; 0xffffffb4
     500:	cmp	r3, #12
     504:	bgt	584 <dmy_to_mjd2000_julian+0x108>
     508:	ldr	r3, [fp, #-72]	; 0xffffffb8
     50c:	cmp	r3, #0
     510:	ble	584 <dmy_to_mjd2000_julian+0x108>
     514:	ldr	r3, [fp, #-76]	; 0xffffffb4
     518:	lsl	r3, r3, #2
     51c:	sub	r2, fp, #12
     520:	add	r3, r2, r3
     524:	ldr	r2, [r3, #-52]	; 0xffffffcc
     528:	ldr	r3, [fp, #-76]	; 0xffffffb4
     52c:	sub	r3, r3, #1
     530:	lsl	r3, r3, #2
     534:	sub	r1, fp, #12
     538:	add	r3, r1, r3
     53c:	ldr	r3, [r3, #-52]	; 0xffffffcc
     540:	sub	r4, r2, r3
     544:	ldr	r3, [fp, #-76]	; 0xffffffb4
     548:	cmp	r3, #2
     54c:	bne	570 <dmy_to_mjd2000_julian+0xf4>
     550:	ldr	r0, [fp, #-80]	; 0xffffffb0
     554:	bl	384 <y>
     558:	mov	r3, r0
     55c:	and	r3, r3, #3
     560:	cmp	r3, #0
     564:	bne	570 <dmy_to_mjd2000_julian+0xf4>
     568:	mov	r3, #1
     56c:	b	574 <dmy_to_mjd2000_julian+0xf8>
     570:	mov	r3, #0
     574:	add	r3, r3, r4
     578:	ldr	r2, [fp, #-72]	; 0xffffffb8
     57c:	cmp	r2, r3
     580:	ble	5ac <dmy_to_mjd2000_julian+0x130>
     584:	ldr	r3, [fp, #-80]	; 0xffffffb0
     588:	str	r3, [sp]
     58c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     590:	ldr	r2, [fp, #-72]	; 0xffffffb8
     594:	movw	r1, #0
     598:	movt	r1, #0
     59c:	mvn	r0, #103	; 0x67
     5a0:	bl	0 <coda_set_error>
     5a4:	mvn	r3, #0
     5a8:	b	650 <dmy_to_mjd2000_julian+0x1d4>
     5ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
     5b0:	bl	384 <y>
     5b4:	mov	r2, r0
     5b8:	movw	r3, #365	; 0x16d
     5bc:	mul	r2, r3, r2
     5c0:	ldr	r3, [fp, #-72]	; 0xffffffb8
     5c4:	add	r4, r2, r3
     5c8:	ldr	r0, [fp, #-80]	; 0xffffffb0
     5cc:	bl	384 <y>
     5d0:	mov	r3, r0
     5d4:	mov	r1, #4
     5d8:	mov	r0, r3
     5dc:	bl	3bc <int_div>
     5e0:	mov	r3, r0
     5e4:	add	r2, r4, r3
     5e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     5ec:	sub	r3, r3, #1
     5f0:	lsl	r3, r3, #2
     5f4:	sub	r1, fp, #12
     5f8:	add	r3, r1, r3
     5fc:	ldr	r3, [r3, #-52]	; 0xffffffcc
     600:	add	r4, r2, r3
     604:	ldr	r3, [fp, #-76]	; 0xffffffb4
     608:	cmp	r3, #2
     60c:	bgt	630 <dmy_to_mjd2000_julian+0x1b4>
     610:	ldr	r0, [fp, #-80]	; 0xffffffb0
     614:	bl	384 <y>
     618:	mov	r3, r0
     61c:	and	r3, r3, #3
     620:	cmp	r3, #0
     624:	bne	630 <dmy_to_mjd2000_julian+0x1b4>
     628:	mov	r3, #1
     62c:	b	634 <dmy_to_mjd2000_julian+0x1b8>
     630:	mov	r3, #0
     634:	sub	r2, r4, r3
     638:	movw	r3, #17122	; 0x42e2
     63c:	movt	r3, #26
     640:	add	r3, r2, r3
     644:	ldr	r2, [fp, #-84]	; 0xffffffac
     648:	str	r3, [r2]
     64c:	mov	r3, #0
     650:	mov	r0, r3
     654:	sub	sp, fp, #8
     658:	ldr	r4, [sp]
     65c:	ldr	fp, [sp, #4]
     660:	add	sp, sp, #8
     664:	pop	{pc}		; (ldr pc, [sp], #4)

00000668 <dmy_to_mjd2000_gregorian>:
     668:	strd	r4, [sp, #-16]!
     66c:	str	fp, [sp, #8]
     670:	str	lr, [sp, #12]
     674:	add	fp, sp, #12
     678:	sub	sp, sp, #80	; 0x50
     67c:	str	r0, [fp, #-72]	; 0xffffffb8
     680:	str	r1, [fp, #-76]	; 0xffffffb4
     684:	str	r2, [fp, #-80]	; 0xffffffb0
     688:	str	r3, [fp, #-84]	; 0xffffffac
     68c:	movw	r2, #0
     690:	movt	r2, #0
     694:	sub	r3, fp, #64	; 0x40
     698:	ldrd	r0, [r2]
     69c:	strd	r0, [r3]
     6a0:	ldrd	r0, [r2, #8]
     6a4:	strd	r0, [r3, #8]
     6a8:	ldrd	r0, [r2, #16]
     6ac:	strd	r0, [r3, #16]
     6b0:	ldrd	r0, [r2, #24]
     6b4:	strd	r0, [r3, #24]
     6b8:	ldrd	r0, [r2, #32]
     6bc:	strd	r0, [r3, #32]
     6c0:	ldrd	r0, [r2, #40]	; 0x28
     6c4:	strd	r0, [r3, #40]	; 0x28
     6c8:	ldr	r2, [r2, #48]	; 0x30
     6cc:	str	r2, [r3, #48]	; 0x30
     6d0:	ldr	r3, [fp, #-80]	; 0xffffffb0
     6d4:	cmp	r3, #0
     6d8:	beq	808 <dmy_to_mjd2000_gregorian+0x1a0>
     6dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6e0:	cmp	r3, #0
     6e4:	ble	808 <dmy_to_mjd2000_gregorian+0x1a0>
     6e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     6ec:	cmp	r3, #12
     6f0:	bgt	808 <dmy_to_mjd2000_gregorian+0x1a0>
     6f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
     6f8:	cmp	r3, #0
     6fc:	ble	808 <dmy_to_mjd2000_gregorian+0x1a0>
     700:	ldr	r3, [fp, #-76]	; 0xffffffb4
     704:	lsl	r3, r3, #2
     708:	sub	r2, fp, #12
     70c:	add	r3, r2, r3
     710:	ldr	r2, [r3, #-52]	; 0xffffffcc
     714:	ldr	r3, [fp, #-76]	; 0xffffffb4
     718:	sub	r3, r3, #1
     71c:	lsl	r3, r3, #2
     720:	sub	r1, fp, #12
     724:	add	r3, r1, r3
     728:	ldr	r3, [r3, #-52]	; 0xffffffcc
     72c:	sub	r4, r2, r3
     730:	ldr	r3, [fp, #-76]	; 0xffffffb4
     734:	cmp	r3, #2
     738:	bne	7f4 <dmy_to_mjd2000_gregorian+0x18c>
     73c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     740:	bl	384 <y>
     744:	mov	r3, r0
     748:	and	r3, r3, #3
     74c:	cmp	r3, #0
     750:	moveq	r3, #1
     754:	movne	r3, #0
     758:	uxtb	r3, r3
     75c:	mov	r5, r3
     760:	ldr	r0, [fp, #-80]	; 0xffffffb0
     764:	bl	384 <y>
     768:	mov	r2, r0
     76c:	movw	r3, #34079	; 0x851f
     770:	movt	r3, #20971	; 0x51eb
     774:	smull	r1, r3, r3, r2
     778:	asr	r1, r3, #5
     77c:	asr	r3, r2, #31
     780:	sub	r3, r1, r3
     784:	mov	r1, #100	; 0x64
     788:	mul	r3, r1, r3
     78c:	sub	r3, r2, r3
     790:	cmp	r3, #0
     794:	moveq	r3, #1
     798:	movne	r3, #0
     79c:	uxtb	r3, r3
     7a0:	eor	r5, r5, r3
     7a4:	ldr	r0, [fp, #-80]	; 0xffffffb0
     7a8:	bl	384 <y>
     7ac:	mov	r2, r0
     7b0:	movw	r3, #34079	; 0x851f
     7b4:	movt	r3, #20971	; 0x51eb
     7b8:	smull	r1, r3, r3, r2
     7bc:	asr	r1, r3, #7
     7c0:	asr	r3, r2, #31
     7c4:	sub	r3, r1, r3
     7c8:	mov	r1, #400	; 0x190
     7cc:	mul	r3, r1, r3
     7d0:	sub	r3, r2, r3
     7d4:	cmp	r3, #0
     7d8:	moveq	r3, #1
     7dc:	movne	r3, #0
     7e0:	uxtb	r3, r3
     7e4:	cmp	r5, r3
     7e8:	beq	7f4 <dmy_to_mjd2000_gregorian+0x18c>
     7ec:	mov	r3, #1
     7f0:	b	7f8 <dmy_to_mjd2000_gregorian+0x190>
     7f4:	mov	r3, #0
     7f8:	add	r3, r3, r4
     7fc:	ldr	r2, [fp, #-72]	; 0xffffffb8
     800:	cmp	r2, r3
     804:	ble	830 <dmy_to_mjd2000_gregorian+0x1c8>
     808:	ldr	r3, [fp, #-80]	; 0xffffffb0
     80c:	str	r3, [sp]
     810:	ldr	r3, [fp, #-76]	; 0xffffffb4
     814:	ldr	r2, [fp, #-72]	; 0xffffffb8
     818:	movw	r1, #0
     81c:	movt	r1, #0
     820:	mvn	r0, #103	; 0x67
     824:	bl	0 <coda_set_error>
     828:	mvn	r3, #0
     82c:	b	9b0 <dmy_to_mjd2000_gregorian+0x348>
     830:	ldr	r3, [fp, #-76]	; 0xffffffb4
     834:	sub	r3, r3, #1
     838:	lsl	r3, r3, #2
     83c:	sub	r2, fp, #12
     840:	add	r3, r2, r3
     844:	ldr	r2, [r3, #-52]	; 0xffffffcc
     848:	ldr	r3, [fp, #-72]	; 0xffffffb8
     84c:	add	r4, r2, r3
     850:	ldr	r0, [fp, #-80]	; 0xffffffb0
     854:	bl	384 <y>
     858:	mov	r2, r0
     85c:	movw	r3, #365	; 0x16d
     860:	mul	r3, r3, r2
     864:	add	r4, r4, r3
     868:	ldr	r0, [fp, #-80]	; 0xffffffb0
     86c:	bl	384 <y>
     870:	mov	r3, r0
     874:	mov	r1, #4
     878:	mov	r0, r3
     87c:	bl	3bc <int_div>
     880:	mov	r3, r0
     884:	add	r4, r4, r3
     888:	ldr	r0, [fp, #-80]	; 0xffffffb0
     88c:	bl	384 <y>
     890:	mov	r3, r0
     894:	mov	r1, #100	; 0x64
     898:	mov	r0, r3
     89c:	bl	3bc <int_div>
     8a0:	mov	r3, r0
     8a4:	sub	r4, r4, r3
     8a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
     8ac:	bl	384 <y>
     8b0:	mov	r3, r0
     8b4:	mov	r1, #400	; 0x190
     8b8:	mov	r0, r3
     8bc:	bl	3bc <int_div>
     8c0:	mov	r3, r0
     8c4:	add	r4, r4, r3
     8c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     8cc:	cmp	r3, #2
     8d0:	bgt	990 <dmy_to_mjd2000_gregorian+0x328>
     8d4:	ldr	r0, [fp, #-80]	; 0xffffffb0
     8d8:	bl	384 <y>
     8dc:	mov	r3, r0
     8e0:	and	r3, r3, #3
     8e4:	cmp	r3, #0
     8e8:	moveq	r3, #1
     8ec:	movne	r3, #0
     8f0:	uxtb	r3, r3
     8f4:	mov	r5, r3
     8f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
     8fc:	bl	384 <y>
     900:	mov	r2, r0
     904:	movw	r3, #34079	; 0x851f
     908:	movt	r3, #20971	; 0x51eb
     90c:	smull	r1, r3, r3, r2
     910:	asr	r1, r3, #5
     914:	asr	r3, r2, #31
     918:	sub	r3, r1, r3
     91c:	mov	r1, #100	; 0x64
     920:	mul	r3, r1, r3
     924:	sub	r3, r2, r3
     928:	cmp	r3, #0
     92c:	moveq	r3, #1
     930:	movne	r3, #0
     934:	uxtb	r3, r3
     938:	sub	r5, r5, r3
     93c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     940:	bl	384 <y>
     944:	mov	r2, r0
     948:	movw	r3, #34079	; 0x851f
     94c:	movt	r3, #20971	; 0x51eb
     950:	smull	r1, r3, r3, r2
     954:	asr	r1, r3, #7
     958:	asr	r3, r2, #31
     95c:	sub	r3, r1, r3
     960:	mov	r1, #400	; 0x190
     964:	mul	r3, r1, r3
     968:	sub	r3, r2, r3
     96c:	cmp	r3, #0
     970:	moveq	r3, #1
     974:	movne	r3, #0
     978:	uxtb	r3, r3
     97c:	add	r3, r5, r3
     980:	cmp	r3, #0
     984:	beq	990 <dmy_to_mjd2000_gregorian+0x328>
     988:	mov	r3, #1
     98c:	b	994 <dmy_to_mjd2000_gregorian+0x32c>
     990:	mov	r3, #0
     994:	sub	r2, r4, r3
     998:	movw	r3, #10273	; 0x2821
     99c:	movt	r3, #65527	; 0xfff7
     9a0:	add	r3, r2, r3
     9a4:	ldr	r2, [fp, #-84]	; 0xffffffac
     9a8:	str	r3, [r2]
     9ac:	mov	r3, #0
     9b0:	mov	r0, r3
     9b4:	sub	sp, fp, #12
     9b8:	ldrd	r4, [sp]
     9bc:	ldr	fp, [sp, #8]
     9c0:	add	sp, sp, #12
     9c4:	pop	{pc}		; (ldr pc, [sp], #4)

000009c8 <dmy_to_mjd2000>:
     9c8:	str	fp, [sp, #-8]!
     9cc:	str	lr, [sp, #4]
     9d0:	add	fp, sp, #4
     9d4:	sub	sp, sp, #48	; 0x30
     9d8:	str	r0, [fp, #-32]	; 0xffffffe0
     9dc:	str	r1, [fp, #-36]	; 0xffffffdc
     9e0:	str	r2, [fp, #-40]	; 0xffffffd8
     9e4:	str	r3, [fp, #-44]	; 0xffffffd4
     9e8:	mov	r3, #2
     9ec:	str	r3, [fp, #-8]
     9f0:	mov	r3, #9
     9f4:	str	r3, [fp, #-12]
     9f8:	movw	r3, #1752	; 0x6d8
     9fc:	str	r3, [fp, #-16]
     a00:	sub	r3, fp, #24
     a04:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a10:	bl	47c <dmy_to_mjd2000_julian>
     a14:	mov	r3, r0
     a18:	cmp	r3, #0
     a1c:	bne	a40 <dmy_to_mjd2000+0x78>
     a20:	sub	r3, fp, #20
     a24:	ldr	r2, [fp, #-16]
     a28:	ldr	r1, [fp, #-12]
     a2c:	ldr	r0, [fp, #-8]
     a30:	bl	47c <dmy_to_mjd2000_julian>
     a34:	mov	r3, r0
     a38:	cmp	r3, #0
     a3c:	beq	a48 <dmy_to_mjd2000+0x80>
     a40:	mvn	r3, #0
     a44:	b	afc <dmy_to_mjd2000+0x134>
     a48:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
     a50:	cmp	r2, r3
     a54:	bgt	a74 <dmy_to_mjd2000+0xac>
     a58:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a5c:	movw	r3, #38823	; 0x97a7
     a60:	movt	r3, #65498	; 0xffda
     a64:	add	r3, r2, r3
     a68:	ldr	r2, [fp, #-44]	; 0xffffffd4
     a6c:	str	r3, [r2]
     a70:	b	af8 <dmy_to_mjd2000+0x130>
     a74:	sub	r3, fp, #24
     a78:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     a80:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a84:	bl	668 <dmy_to_mjd2000_gregorian>
     a88:	mov	r3, r0
     a8c:	cmp	r3, #0
     a90:	beq	a9c <dmy_to_mjd2000+0xd4>
     a94:	mvn	r3, #0
     a98:	b	afc <dmy_to_mjd2000+0x134>
     a9c:	ldr	r2, [fp, #-20]	; 0xffffffec
     aa0:	movw	r3, #58686	; 0xe53e
     aa4:	movt	r3, #65500	; 0xffdc
     aa8:	add	r3, r2, r3
     aac:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ab0:	cmp	r3, r2
     ab4:	ble	ae0 <dmy_to_mjd2000+0x118>
     ab8:	ldr	r3, [fp, #-40]	; 0xffffffd8
     abc:	str	r3, [sp]
     ac0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ac4:	ldr	r2, [fp, #-32]	; 0xffffffe0
     ac8:	movw	r1, #0
     acc:	movt	r1, #0
     ad0:	mvn	r0, #103	; 0x67
     ad4:	bl	0 <coda_set_error>
     ad8:	mvn	r3, #0
     adc:	b	afc <dmy_to_mjd2000+0x134>
     ae0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ae4:	movw	r3, #45674	; 0xb26a
     ae8:	movt	r3, #65533	; 0xfffd
     aec:	add	r3, r2, r3
     af0:	ldr	r2, [fp, #-44]	; 0xffffffd4
     af4:	str	r3, [r2]
     af8:	mov	r3, #0
     afc:	mov	r0, r3
     b00:	sub	sp, fp, #4
     b04:	ldr	fp, [sp]
     b08:	add	sp, sp, #4
     b0c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b10 <getday_leapyear>:
     b10:	str	fp, [sp, #-8]!
     b14:	str	lr, [sp, #4]
     b18:	add	fp, sp, #4
     b1c:	sub	sp, sp, #72	; 0x48
     b20:	str	r0, [fp, #-64]	; 0xffffffc0
     b24:	str	r1, [fp, #-68]	; 0xffffffbc
     b28:	str	r2, [fp, #-72]	; 0xffffffb8
     b2c:	movw	r2, #0
     b30:	movt	r2, #0
     b34:	sub	r3, fp, #60	; 0x3c
     b38:	ldrd	r0, [r2]
     b3c:	strd	r0, [r3]
     b40:	ldrd	r0, [r2, #8]
     b44:	strd	r0, [r3, #8]
     b48:	ldrd	r0, [r2, #16]
     b4c:	strd	r0, [r3, #16]
     b50:	ldrd	r0, [r2, #24]
     b54:	strd	r0, [r3, #24]
     b58:	ldrd	r0, [r2, #32]
     b5c:	strd	r0, [r3, #32]
     b60:	ldrd	r0, [r2, #40]	; 0x28
     b64:	strd	r0, [r3, #40]	; 0x28
     b68:	ldr	r2, [r2, #48]	; 0x30
     b6c:	str	r2, [r3, #48]	; 0x30
     b70:	ldr	r3, [fp, #-64]	; 0xffffffc0
     b74:	cmp	r3, #0
     b78:	bge	b9c <getday_leapyear+0x8c>
     b7c:	movw	r3, #0
     b80:	movt	r3, #0
     b84:	movw	r2, #358	; 0x166
     b88:	movw	r1, #0
     b8c:	movt	r1, #0
     b90:	movw	r0, #0
     b94:	movt	r0, #0
     b98:	bl	0 <__assert_fail>
     b9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
     ba0:	movw	r2, #365	; 0x16d
     ba4:	cmp	r3, r2
     ba8:	ble	bcc <getday_leapyear+0xbc>
     bac:	movw	r3, #0
     bb0:	movt	r3, #0
     bb4:	movw	r2, #359	; 0x167
     bb8:	movw	r1, #0
     bbc:	movt	r1, #0
     bc0:	movw	r0, #0
     bc4:	movt	r0, #0
     bc8:	bl	0 <__assert_fail>
     bcc:	mov	r3, #1
     bd0:	str	r3, [fp, #-8]
     bd4:	b	c04 <getday_leapyear+0xf4>
     bd8:	ldr	r3, [fp, #-8]
     bdc:	lsl	r3, r3, #2
     be0:	sub	r2, fp, #4
     be4:	add	r3, r2, r3
     be8:	ldr	r3, [r3, #-56]	; 0xffffffc8
     bec:	ldr	r2, [fp, #-64]	; 0xffffffc0
     bf0:	cmp	r2, r3
     bf4:	blt	c14 <getday_leapyear+0x104>
     bf8:	ldr	r3, [fp, #-8]
     bfc:	add	r3, r3, #1
     c00:	str	r3, [fp, #-8]
     c04:	ldr	r3, [fp, #-8]
     c08:	cmp	r3, #12
     c0c:	ble	bd8 <getday_leapyear+0xc8>
     c10:	b	c18 <getday_leapyear+0x108>
     c14:	nop	{0}
     c18:	ldr	r3, [fp, #-72]	; 0xffffffb8
     c1c:	ldr	r2, [fp, #-8]
     c20:	str	r2, [r3]
     c24:	ldr	r3, [fp, #-64]	; 0xffffffc0
     c28:	add	r2, r3, #1
     c2c:	ldr	r3, [fp, #-8]
     c30:	sub	r3, r3, #1
     c34:	lsl	r3, r3, #2
     c38:	sub	r1, fp, #4
     c3c:	add	r3, r1, r3
     c40:	ldr	r3, [r3, #-56]	; 0xffffffc8
     c44:	sub	r2, r2, r3
     c48:	ldr	r3, [fp, #-68]	; 0xffffffbc
     c4c:	str	r2, [r3]
     c50:	nop	{0}
     c54:	sub	sp, fp, #4
     c58:	ldr	fp, [sp]
     c5c:	add	sp, sp, #4
     c60:	pop	{pc}		; (ldr pc, [sp], #4)

00000c64 <getday_nonleapyear>:
     c64:	str	fp, [sp, #-8]!
     c68:	str	lr, [sp, #4]
     c6c:	add	fp, sp, #4
     c70:	sub	sp, sp, #72	; 0x48
     c74:	str	r0, [fp, #-64]	; 0xffffffc0
     c78:	str	r1, [fp, #-68]	; 0xffffffbc
     c7c:	str	r2, [fp, #-72]	; 0xffffffb8
     c80:	movw	r2, #0
     c84:	movt	r2, #0
     c88:	sub	r3, fp, #60	; 0x3c
     c8c:	ldrd	r0, [r2]
     c90:	strd	r0, [r3]
     c94:	ldrd	r0, [r2, #8]
     c98:	strd	r0, [r3, #8]
     c9c:	ldrd	r0, [r2, #16]
     ca0:	strd	r0, [r3, #16]
     ca4:	ldrd	r0, [r2, #24]
     ca8:	strd	r0, [r3, #24]
     cac:	ldrd	r0, [r2, #32]
     cb0:	strd	r0, [r3, #32]
     cb4:	ldrd	r0, [r2, #40]	; 0x28
     cb8:	strd	r0, [r3, #40]	; 0x28
     cbc:	ldr	r2, [r2, #48]	; 0x30
     cc0:	str	r2, [r3, #48]	; 0x30
     cc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
     cc8:	cmp	r3, #0
     ccc:	bge	cf0 <getday_nonleapyear+0x8c>
     cd0:	movw	r3, #0
     cd4:	movt	r3, #0
     cd8:	movw	r2, #377	; 0x179
     cdc:	movw	r1, #0
     ce0:	movt	r1, #0
     ce4:	movw	r0, #0
     ce8:	movt	r0, #0
     cec:	bl	0 <__assert_fail>
     cf0:	ldr	r3, [fp, #-64]	; 0xffffffc0
     cf4:	cmp	r3, #364	; 0x16c
     cf8:	ble	d1c <getday_nonleapyear+0xb8>
     cfc:	movw	r3, #0
     d00:	movt	r3, #0
     d04:	movw	r2, #378	; 0x17a
     d08:	movw	r1, #0
     d0c:	movt	r1, #0
     d10:	movw	r0, #0
     d14:	movt	r0, #0
     d18:	bl	0 <__assert_fail>
     d1c:	mov	r3, #1
     d20:	str	r3, [fp, #-8]
     d24:	b	d54 <getday_nonleapyear+0xf0>
     d28:	ldr	r3, [fp, #-8]
     d2c:	lsl	r3, r3, #2
     d30:	sub	r2, fp, #4
     d34:	add	r3, r2, r3
     d38:	ldr	r3, [r3, #-56]	; 0xffffffc8
     d3c:	ldr	r2, [fp, #-64]	; 0xffffffc0
     d40:	cmp	r2, r3
     d44:	blt	d64 <getday_nonleapyear+0x100>
     d48:	ldr	r3, [fp, #-8]
     d4c:	add	r3, r3, #1
     d50:	str	r3, [fp, #-8]
     d54:	ldr	r3, [fp, #-8]
     d58:	cmp	r3, #12
     d5c:	ble	d28 <getday_nonleapyear+0xc4>
     d60:	b	d68 <getday_nonleapyear+0x104>
     d64:	nop	{0}
     d68:	ldr	r3, [fp, #-72]	; 0xffffffb8
     d6c:	ldr	r2, [fp, #-8]
     d70:	str	r2, [r3]
     d74:	ldr	r3, [fp, #-64]	; 0xffffffc0
     d78:	add	r2, r3, #1
     d7c:	ldr	r3, [fp, #-8]
     d80:	sub	r3, r3, #1
     d84:	lsl	r3, r3, #2
     d88:	sub	r1, fp, #4
     d8c:	add	r3, r1, r3
     d90:	ldr	r3, [r3, #-56]	; 0xffffffc8
     d94:	sub	r2, r2, r3
     d98:	ldr	r3, [fp, #-68]	; 0xffffffbc
     d9c:	str	r2, [r3]
     da0:	nop	{0}
     da4:	sub	sp, fp, #4
     da8:	ldr	fp, [sp]
     dac:	add	sp, sp, #4
     db0:	pop	{pc}		; (ldr pc, [sp], #4)

00000db4 <mjd2000_to_dmy_julian>:
     db4:	str	fp, [sp, #-8]!
     db8:	str	lr, [sp, #4]
     dbc:	add	fp, sp, #4
     dc0:	sub	sp, sp, #24
     dc4:	str	r0, [fp, #-16]
     dc8:	str	r1, [fp, #-20]	; 0xffffffec
     dcc:	str	r2, [fp, #-24]	; 0xffffffe8
     dd0:	str	r3, [fp, #-28]	; 0xffffffe4
     dd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dd8:	mov	r2, #2000	; 0x7d0
     ddc:	str	r2, [r3]
     de0:	ldr	r3, [fp, #-16]
     de4:	sub	r3, r3, #13
     de8:	str	r3, [fp, #-8]
     dec:	movw	r1, #1461	; 0x5b5
     df0:	ldr	r0, [fp, #-8]
     df4:	bl	3bc <int_div>
     df8:	mov	r3, r0
     dfc:	lsl	r2, r3, #2
     e00:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e04:	ldr	r3, [r3]
     e08:	add	r2, r2, r3
     e0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e10:	str	r2, [r3]
     e14:	movw	r1, #1461	; 0x5b5
     e18:	ldr	r0, [fp, #-8]
     e1c:	bl	410 <int_mod>
     e20:	str	r0, [fp, #-8]
     e24:	ldr	r3, [fp, #-8]
     e28:	movw	r2, #365	; 0x16d
     e2c:	cmp	r3, r2
     e30:	bgt	e48 <mjd2000_to_dmy_julian+0x94>
     e34:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e38:	ldr	r1, [fp, #-20]	; 0xffffffec
     e3c:	ldr	r0, [fp, #-8]
     e40:	bl	b10 <getday_leapyear>
     e44:	b	eb0 <mjd2000_to_dmy_julian+0xfc>
     e48:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e4c:	ldr	r3, [r3]
     e50:	add	r2, r3, #1
     e54:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e58:	str	r2, [r3]
     e5c:	ldr	r3, [fp, #-8]
     e60:	sub	r3, r3, #364	; 0x16c
     e64:	sub	r3, r3, #2
     e68:	str	r3, [fp, #-8]
     e6c:	movw	r1, #365	; 0x16d
     e70:	ldr	r0, [fp, #-8]
     e74:	bl	3bc <int_div>
     e78:	mov	r2, r0
     e7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e80:	ldr	r3, [r3]
     e84:	add	r2, r2, r3
     e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e8c:	str	r2, [r3]
     e90:	movw	r1, #365	; 0x16d
     e94:	ldr	r0, [fp, #-8]
     e98:	bl	410 <int_mod>
     e9c:	str	r0, [fp, #-8]
     ea0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ea4:	ldr	r1, [fp, #-20]	; 0xffffffec
     ea8:	ldr	r0, [fp, #-8]
     eac:	bl	c64 <getday_nonleapyear>
     eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     eb4:	ldr	r3, [r3]
     eb8:	cmp	r3, #0
     ebc:	bgt	ed4 <mjd2000_to_dmy_julian+0x120>
     ec0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ec4:	ldr	r3, [r3]
     ec8:	sub	r2, r3, #1
     ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ed0:	str	r2, [r3]
     ed4:	nop	{0}
     ed8:	sub	sp, fp, #4
     edc:	ldr	fp, [sp]
     ee0:	add	sp, sp, #4
     ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00000ee8 <mjd2000_to_dmy_gregorian>:
     ee8:	str	fp, [sp, #-8]!
     eec:	str	lr, [sp, #4]
     ef0:	add	fp, sp, #4
     ef4:	sub	sp, sp, #24
     ef8:	str	r0, [fp, #-16]
     efc:	str	r1, [fp, #-20]	; 0xffffffec
     f00:	str	r2, [fp, #-24]	; 0xffffffe8
     f04:	str	r3, [fp, #-28]	; 0xffffffe4
     f08:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f0c:	mov	r2, #2000	; 0x7d0
     f10:	str	r2, [r3]
     f14:	ldr	r3, [fp, #-16]
     f18:	str	r3, [fp, #-8]
     f1c:	movw	r1, #15025	; 0x3ab1
     f20:	movt	r1, #2
     f24:	ldr	r0, [fp, #-8]
     f28:	bl	3bc <int_div>
     f2c:	mov	r2, r0
     f30:	mov	r3, #400	; 0x190
     f34:	mul	r2, r3, r2
     f38:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f3c:	ldr	r3, [r3]
     f40:	add	r2, r2, r3
     f44:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f48:	str	r2, [r3]
     f4c:	movw	r1, #15025	; 0x3ab1
     f50:	movt	r1, #2
     f54:	ldr	r0, [fp, #-8]
     f58:	bl	410 <int_mod>
     f5c:	str	r0, [fp, #-8]
     f60:	ldr	r3, [fp, #-8]
     f64:	movw	r2, #36524	; 0x8eac
     f68:	cmp	r3, r2
     f6c:	bgt	1038 <mjd2000_to_dmy_gregorian+0x150>
     f70:	movw	r1, #1461	; 0x5b5
     f74:	ldr	r0, [fp, #-8]
     f78:	bl	3bc <int_div>
     f7c:	mov	r3, r0
     f80:	lsl	r2, r3, #2
     f84:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f88:	ldr	r3, [r3]
     f8c:	add	r2, r2, r3
     f90:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f94:	str	r2, [r3]
     f98:	movw	r1, #1461	; 0x5b5
     f9c:	ldr	r0, [fp, #-8]
     fa0:	bl	410 <int_mod>
     fa4:	str	r0, [fp, #-8]
     fa8:	ldr	r3, [fp, #-8]
     fac:	movw	r2, #365	; 0x16d
     fb0:	cmp	r3, r2
     fb4:	bgt	fcc <mjd2000_to_dmy_gregorian+0xe4>
     fb8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fbc:	ldr	r1, [fp, #-20]	; 0xffffffec
     fc0:	ldr	r0, [fp, #-8]
     fc4:	bl	b10 <getday_leapyear>
     fc8:	b	11d8 <mjd2000_to_dmy_gregorian+0x2f0>
     fcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     fd0:	ldr	r3, [r3]
     fd4:	add	r2, r3, #1
     fd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     fdc:	str	r2, [r3]
     fe0:	ldr	r3, [fp, #-8]
     fe4:	sub	r3, r3, #364	; 0x16c
     fe8:	sub	r3, r3, #2
     fec:	str	r3, [fp, #-8]
     ff0:	movw	r1, #365	; 0x16d
     ff4:	ldr	r0, [fp, #-8]
     ff8:	bl	3bc <int_div>
     ffc:	mov	r2, r0
    1000:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1004:	ldr	r3, [r3]
    1008:	add	r2, r2, r3
    100c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1010:	str	r2, [r3]
    1014:	movw	r1, #365	; 0x16d
    1018:	ldr	r0, [fp, #-8]
    101c:	bl	410 <int_mod>
    1020:	str	r0, [fp, #-8]
    1024:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1028:	ldr	r1, [fp, #-20]	; 0xffffffec
    102c:	ldr	r0, [fp, #-8]
    1030:	bl	c64 <getday_nonleapyear>
    1034:	b	11d8 <mjd2000_to_dmy_gregorian+0x2f0>
    1038:	ldr	r3, [fp, #-8]
    103c:	sub	r3, r3, #36352	; 0x8e00
    1040:	sub	r3, r3, #173	; 0xad
    1044:	str	r3, [fp, #-8]
    1048:	ldr	r3, [fp, #-28]	; 0xffffffe4
    104c:	ldr	r3, [r3]
    1050:	add	r2, r3, #100	; 0x64
    1054:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1058:	str	r2, [r3]
    105c:	movw	r1, #36524	; 0x8eac
    1060:	ldr	r0, [fp, #-8]
    1064:	bl	3bc <int_div>
    1068:	mov	r2, r0
    106c:	mov	r3, #100	; 0x64
    1070:	mul	r2, r3, r2
    1074:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1078:	ldr	r3, [r3]
    107c:	add	r2, r2, r3
    1080:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1084:	str	r2, [r3]
    1088:	movw	r1, #36524	; 0x8eac
    108c:	ldr	r0, [fp, #-8]
    1090:	bl	410 <int_mod>
    1094:	str	r0, [fp, #-8]
    1098:	ldr	r3, [fp, #-8]
    109c:	movw	r2, #1459	; 0x5b3
    10a0:	cmp	r3, r2
    10a4:	bgt	10f0 <mjd2000_to_dmy_gregorian+0x208>
    10a8:	movw	r1, #365	; 0x16d
    10ac:	ldr	r0, [fp, #-8]
    10b0:	bl	3bc <int_div>
    10b4:	mov	r2, r0
    10b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    10bc:	ldr	r3, [r3]
    10c0:	add	r2, r2, r3
    10c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    10c8:	str	r2, [r3]
    10cc:	movw	r1, #365	; 0x16d
    10d0:	ldr	r0, [fp, #-8]
    10d4:	bl	410 <int_mod>
    10d8:	str	r0, [fp, #-8]
    10dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    10e0:	ldr	r1, [fp, #-20]	; 0xffffffec
    10e4:	ldr	r0, [fp, #-8]
    10e8:	bl	c64 <getday_nonleapyear>
    10ec:	b	11d8 <mjd2000_to_dmy_gregorian+0x2f0>
    10f0:	ldr	r3, [fp, #-8]
    10f4:	sub	r3, r3, #1456	; 0x5b0
    10f8:	sub	r3, r3, #4
    10fc:	str	r3, [fp, #-8]
    1100:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1104:	ldr	r3, [r3]
    1108:	add	r2, r3, #4
    110c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1110:	str	r2, [r3]
    1114:	movw	r1, #1461	; 0x5b5
    1118:	ldr	r0, [fp, #-8]
    111c:	bl	3bc <int_div>
    1120:	mov	r3, r0
    1124:	lsl	r2, r3, #2
    1128:	ldr	r3, [fp, #-28]	; 0xffffffe4
    112c:	ldr	r3, [r3]
    1130:	add	r2, r2, r3
    1134:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1138:	str	r2, [r3]
    113c:	movw	r1, #1461	; 0x5b5
    1140:	ldr	r0, [fp, #-8]
    1144:	bl	410 <int_mod>
    1148:	str	r0, [fp, #-8]
    114c:	ldr	r3, [fp, #-8]
    1150:	movw	r2, #365	; 0x16d
    1154:	cmp	r3, r2
    1158:	bgt	1170 <mjd2000_to_dmy_gregorian+0x288>
    115c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1160:	ldr	r1, [fp, #-20]	; 0xffffffec
    1164:	ldr	r0, [fp, #-8]
    1168:	bl	b10 <getday_leapyear>
    116c:	b	11d8 <mjd2000_to_dmy_gregorian+0x2f0>
    1170:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1174:	ldr	r3, [r3]
    1178:	add	r2, r3, #1
    117c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1180:	str	r2, [r3]
    1184:	ldr	r3, [fp, #-8]
    1188:	sub	r3, r3, #364	; 0x16c
    118c:	sub	r3, r3, #2
    1190:	str	r3, [fp, #-8]
    1194:	movw	r1, #365	; 0x16d
    1198:	ldr	r0, [fp, #-8]
    119c:	bl	3bc <int_div>
    11a0:	mov	r2, r0
    11a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11a8:	ldr	r3, [r3]
    11ac:	add	r2, r2, r3
    11b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11b4:	str	r2, [r3]
    11b8:	movw	r1, #365	; 0x16d
    11bc:	ldr	r0, [fp, #-8]
    11c0:	bl	410 <int_mod>
    11c4:	str	r0, [fp, #-8]
    11c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    11cc:	ldr	r1, [fp, #-20]	; 0xffffffec
    11d0:	ldr	r0, [fp, #-8]
    11d4:	bl	c64 <getday_nonleapyear>
    11d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11dc:	ldr	r3, [r3]
    11e0:	cmp	r3, #0
    11e4:	bgt	11fc <mjd2000_to_dmy_gregorian+0x314>
    11e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11ec:	ldr	r3, [r3]
    11f0:	sub	r2, r3, #1
    11f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    11f8:	str	r2, [r3]
    11fc:	nop	{0}
    1200:	sub	sp, fp, #4
    1204:	ldr	fp, [sp]
    1208:	add	sp, sp, #4
    120c:	pop	{pc}		; (ldr pc, [sp], #4)

00001210 <mjd2000_to_dmy>:
    1210:	str	fp, [sp, #-8]!
    1214:	str	lr, [sp, #4]
    1218:	add	fp, sp, #4
    121c:	sub	sp, sp, #32
    1220:	str	r0, [fp, #-24]	; 0xffffffe8
    1224:	str	r1, [fp, #-28]	; 0xffffffe4
    1228:	str	r2, [fp, #-32]	; 0xffffffe0
    122c:	str	r3, [fp, #-36]	; 0xffffffdc
    1230:	mov	r3, #2
    1234:	str	r3, [fp, #-8]
    1238:	mov	r3, #9
    123c:	str	r3, [fp, #-12]
    1240:	movw	r3, #1752	; 0x6d8
    1244:	str	r3, [fp, #-16]
    1248:	sub	r3, fp, #20
    124c:	ldr	r2, [fp, #-16]
    1250:	ldr	r1, [fp, #-12]
    1254:	ldr	r0, [fp, #-8]
    1258:	bl	9c8 <dmy_to_mjd2000>
    125c:	mov	r3, r0
    1260:	cmp	r3, #0
    1264:	beq	1270 <mjd2000_to_dmy+0x60>
    1268:	mvn	r3, #0
    126c:	b	12b0 <mjd2000_to_dmy+0xa0>
    1270:	ldr	r3, [fp, #-20]	; 0xffffffec
    1274:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1278:	cmp	r2, r3
    127c:	bgt	1298 <mjd2000_to_dmy+0x88>
    1280:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1284:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1288:	ldr	r1, [fp, #-28]	; 0xffffffe4
    128c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1290:	bl	db4 <mjd2000_to_dmy_julian>
    1294:	b	12ac <mjd2000_to_dmy+0x9c>
    1298:	ldr	r3, [fp, #-36]	; 0xffffffdc
    129c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    12a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    12a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12a8:	bl	ee8 <mjd2000_to_dmy_gregorian>
    12ac:	mov	r3, #0
    12b0:	mov	r0, r3
    12b4:	sub	sp, fp, #4
    12b8:	ldr	fp, [sp]
    12bc:	add	sp, sp, #4
    12c0:	pop	{pc}		; (ldr pc, [sp], #4)

000012c4 <hms_to_daytime>:
    12c4:	str	fp, [sp, #-8]!
    12c8:	str	lr, [sp, #4]
    12cc:	add	fp, sp, #4
    12d0:	sub	sp, sp, #24
    12d4:	str	r0, [fp, #-8]
    12d8:	str	r1, [fp, #-12]
    12dc:	str	r2, [fp, #-16]
    12e0:	str	r3, [fp, #-20]	; 0xffffffec
    12e4:	ldr	r3, [fp, #-8]
    12e8:	cmp	r3, #0
    12ec:	blt	134c <hms_to_daytime+0x88>
    12f0:	ldr	r3, [fp, #-8]
    12f4:	cmp	r3, #23
    12f8:	bgt	134c <hms_to_daytime+0x88>
    12fc:	ldr	r3, [fp, #-12]
    1300:	cmp	r3, #0
    1304:	blt	134c <hms_to_daytime+0x88>
    1308:	ldr	r3, [fp, #-12]
    130c:	cmp	r3, #59	; 0x3b
    1310:	bgt	134c <hms_to_daytime+0x88>
    1314:	ldr	r3, [fp, #-16]
    1318:	cmp	r3, #0
    131c:	blt	134c <hms_to_daytime+0x88>
    1320:	ldr	r3, [fp, #-16]
    1324:	cmp	r3, #60	; 0x3c
    1328:	bgt	134c <hms_to_daytime+0x88>
    132c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1330:	cmp	r3, #0
    1334:	blt	134c <hms_to_daytime+0x88>
    1338:	ldr	r2, [fp, #-20]	; 0xffffffec
    133c:	movw	r3, #16959	; 0x423f
    1340:	movt	r3, #15
    1344:	cmp	r2, r3
    1348:	ble	137c <hms_to_daytime+0xb8>
    134c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1350:	str	r3, [sp, #4]
    1354:	ldr	r3, [fp, #-16]
    1358:	str	r3, [sp]
    135c:	ldr	r3, [fp, #-12]
    1360:	ldr	r2, [fp, #-8]
    1364:	movw	r1, #0
    1368:	movt	r1, #0
    136c:	mvn	r0, #103	; 0x67
    1370:	bl	0 <coda_set_error>
    1374:	mvn	r3, #0
    1378:	b	13dc <hms_to_daytime+0x118>
    137c:	ldr	r3, [fp, #-8]
    1380:	vmov	s15, r3
    1384:	vcvt.f64.s32	d7, s15
    1388:	vldr	d6, [pc, #96]	; 13f0 <hms_to_daytime+0x12c>
    138c:	vmul.f64	d6, d7, d6
    1390:	ldr	r3, [fp, #-12]
    1394:	vmov	s15, r3
    1398:	vcvt.f64.s32	d7, s15
    139c:	vldr	d5, [pc, #84]	; 13f8 <hms_to_daytime+0x134>
    13a0:	vmul.f64	d7, d7, d5
    13a4:	vadd.f64	d6, d6, d7
    13a8:	ldr	r3, [fp, #-16]
    13ac:	vmov	s15, r3
    13b0:	vcvt.f64.s32	d7, s15
    13b4:	vadd.f64	d6, d6, d7
    13b8:	ldr	r3, [fp, #-20]	; 0xffffffec
    13bc:	vmov	s15, r3
    13c0:	vcvt.f64.s32	d5, s15
    13c4:	vldr	d4, [pc, #52]	; 1400 <hms_to_daytime+0x13c>
    13c8:	vdiv.f64	d7, d5, d4
    13cc:	vadd.f64	d7, d6, d7
    13d0:	ldr	r3, [fp, #4]
    13d4:	vstr	d7, [r3]
    13d8:	mov	r3, #0
    13dc:	mov	r0, r3
    13e0:	sub	sp, fp, #4
    13e4:	ldr	fp, [sp]
    13e8:	add	sp, sp, #4
    13ec:	pop	{pc}		; (ldr pc, [sp], #4)
    13f0:	.word	0x00000000
    13f4:	.word	0x40ac2000
    13f8:	.word	0x00000000
    13fc:	.word	0x404e0000
    1400:	.word	0x00000000
    1404:	.word	0x412e8480

00001408 <coda_dayofyear_to_month_day>:
    1408:	str	fp, [sp, #-8]!
    140c:	str	lr, [sp, #4]
    1410:	add	fp, sp, #4
    1414:	sub	sp, sp, #24
    1418:	str	r0, [fp, #-16]
    141c:	str	r1, [fp, #-20]	; 0xffffffec
    1420:	str	r2, [fp, #-24]	; 0xffffffe8
    1424:	str	r3, [fp, #-28]	; 0xffffffe4
    1428:	ldr	r3, [fp, #-24]	; 0xffffffe8
    142c:	cmp	r3, #0
    1430:	beq	1440 <coda_dayofyear_to_month_day+0x38>
    1434:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1438:	cmp	r3, #0
    143c:	bne	1464 <coda_dayofyear_to_month_day+0x5c>
    1440:	movw	r3, #549	; 0x225
    1444:	movw	r2, #0
    1448:	movt	r2, #0
    144c:	movw	r1, #0
    1450:	movt	r1, #0
    1454:	mvn	r0, #99	; 0x63
    1458:	bl	0 <coda_set_error>
    145c:	mvn	r3, #0
    1460:	b	1504 <coda_dayofyear_to_month_day+0xfc>
    1464:	ldr	r3, [fp, #-20]	; 0xffffffec
    1468:	cmp	r3, #0
    146c:	blt	1480 <coda_dayofyear_to_month_day+0x78>
    1470:	ldr	r3, [fp, #-20]	; 0xffffffec
    1474:	movw	r2, #366	; 0x16e
    1478:	cmp	r3, r2
    147c:	ble	149c <coda_dayofyear_to_month_day+0x94>
    1480:	ldr	r2, [fp, #-20]	; 0xffffffec
    1484:	movw	r1, #0
    1488:	movt	r1, #0
    148c:	mvn	r0, #103	; 0x67
    1490:	bl	0 <coda_set_error>
    1494:	mvn	r3, #0
    1498:	b	1504 <coda_dayofyear_to_month_day+0xfc>
    149c:	ldr	r2, [fp, #-16]
    14a0:	sub	r3, fp, #8
    14a4:	mov	r1, #1
    14a8:	mov	r0, #1
    14ac:	bl	9c8 <dmy_to_mjd2000>
    14b0:	mov	r3, r0
    14b4:	cmp	r3, #0
    14b8:	beq	14c4 <coda_dayofyear_to_month_day+0xbc>
    14bc:	mvn	r3, #0
    14c0:	b	1504 <coda_dayofyear_to_month_day+0xfc>
    14c4:	ldr	r3, [fp, #-20]	; 0xffffffec
    14c8:	sub	r2, r3, #1
    14cc:	ldr	r3, [fp, #-8]
    14d0:	add	r3, r2, r3
    14d4:	str	r3, [fp, #-8]
    14d8:	ldr	r0, [fp, #-8]
    14dc:	sub	r3, fp, #16
    14e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    14e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    14e8:	bl	1210 <mjd2000_to_dmy>
    14ec:	mov	r3, r0
    14f0:	cmp	r3, #0
    14f4:	beq	1500 <coda_dayofyear_to_month_day+0xf8>
    14f8:	mvn	r3, #0
    14fc:	b	1504 <coda_dayofyear_to_month_day+0xfc>
    1500:	mov	r3, #0
    1504:	mov	r0, r3
    1508:	sub	sp, fp, #4
    150c:	ldr	fp, [sp]
    1510:	add	sp, sp, #4
    1514:	pop	{pc}		; (ldr pc, [sp], #4)

00001518 <seconds_to_hms>:
    1518:	str	fp, [sp, #-8]!
    151c:	str	lr, [sp, #4]
    1520:	add	fp, sp, #4
    1524:	sub	sp, sp, #24
    1528:	str	r0, [fp, #-16]
    152c:	str	r1, [fp, #-20]	; 0xffffffec
    1530:	str	r2, [fp, #-24]	; 0xffffffe8
    1534:	str	r3, [fp, #-28]	; 0xffffffe4
    1538:	ldr	r3, [fp, #-16]
    153c:	str	r3, [fp, #-8]
    1540:	ldr	r3, [fp, #-8]
    1544:	cmp	r3, #0
    1548:	blt	1560 <seconds_to_hms+0x48>
    154c:	ldr	r2, [fp, #-8]
    1550:	movw	r3, #20863	; 0x517f
    1554:	movt	r3, #1
    1558:	cmp	r2, r3
    155c:	ble	157c <seconds_to_hms+0x64>
    1560:	ldr	r2, [fp, #-8]
    1564:	movw	r1, #0
    1568:	movt	r1, #0
    156c:	mvn	r0, #103	; 0x67
    1570:	bl	0 <coda_set_error>
    1574:	mvn	r3, #0
    1578:	b	1644 <seconds_to_hms+0x12c>
    157c:	ldr	r3, [fp, #-8]
    1580:	movw	r2, #46021	; 0xb3c5
    1584:	movt	r2, #37282	; 0x91a2
    1588:	smull	r1, r2, r2, r3
    158c:	add	r2, r2, r3
    1590:	asr	r2, r2, #11
    1594:	asr	r3, r3, #31
    1598:	sub	r2, r2, r3
    159c:	ldr	r3, [fp, #-20]	; 0xffffffec
    15a0:	str	r2, [r3]
    15a4:	ldr	r3, [fp, #-8]
    15a8:	movw	r2, #46021	; 0xb3c5
    15ac:	movt	r2, #37282	; 0x91a2
    15b0:	smull	r1, r2, r2, r3
    15b4:	add	r2, r2, r3
    15b8:	asr	r1, r2, #11
    15bc:	asr	r2, r3, #31
    15c0:	sub	r2, r1, r2
    15c4:	mov	r1, #3600	; 0xe10
    15c8:	mul	r2, r1, r2
    15cc:	sub	r3, r3, r2
    15d0:	str	r3, [fp, #-8]
    15d4:	ldr	r3, [fp, #-8]
    15d8:	movw	r2, #34953	; 0x8889
    15dc:	movt	r2, #34952	; 0x8888
    15e0:	smull	r1, r2, r2, r3
    15e4:	add	r2, r2, r3
    15e8:	asr	r2, r2, #5
    15ec:	asr	r3, r3, #31
    15f0:	sub	r2, r2, r3
    15f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15f8:	str	r2, [r3]
    15fc:	ldr	r2, [fp, #-8]
    1600:	movw	r3, #34953	; 0x8889
    1604:	movt	r3, #34952	; 0x8888
    1608:	smull	r1, r3, r3, r2
    160c:	add	r3, r3, r2
    1610:	asr	r1, r3, #5
    1614:	asr	r3, r2, #31
    1618:	sub	r1, r1, r3
    161c:	mov	r3, r1
    1620:	lsl	r3, r3, #4
    1624:	sub	r3, r3, r1
    1628:	lsl	r3, r3, #2
    162c:	sub	r3, r2, r3
    1630:	str	r3, [fp, #-8]
    1634:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1638:	ldr	r2, [fp, #-8]
    163c:	str	r2, [r3]
    1640:	mov	r3, #0
    1644:	mov	r0, r3
    1648:	sub	sp, fp, #4
    164c:	ldr	fp, [sp]
    1650:	add	sp, sp, #4
    1654:	pop	{pc}		; (ldr pc, [sp], #4)

00001658 <register_leap_second>:
    1658:	str	fp, [sp, #-8]!
    165c:	str	lr, [sp, #4]
    1660:	add	fp, sp, #4
    1664:	sub	sp, sp, #32
    1668:	vstr	d0, [fp, #-28]	; 0xffffffe4
    166c:	mrc	15, 0, r3, cr13, cr0, {3}
    1670:	ldr	r2, [pc, #528]	; 1888 <register_leap_second+0x230>
    1674:	ldr	r3, [r3, r2]
    1678:	and	r3, r3, #15
    167c:	cmp	r3, #0
    1680:	bne	1708 <register_leap_second+0xb0>
    1684:	mrc	15, 0, r3, cr13, cr0, {3}
    1688:	ldr	r2, [pc, #508]	; 188c <register_leap_second+0x234>
    168c:	ldr	r0, [r3, r2]
    1690:	mrc	15, 0, r3, cr13, cr0, {3}
    1694:	ldr	r2, [pc, #492]	; 1888 <register_leap_second+0x230>
    1698:	ldr	r3, [r3, r2]
    169c:	add	r3, r3, #16
    16a0:	lsl	r3, r3, #3
    16a4:	mov	r1, r3
    16a8:	bl	0 <realloc>
    16ac:	str	r0, [fp, #-12]
    16b0:	ldr	r3, [fp, #-12]
    16b4:	cmp	r3, #0
    16b8:	bne	16f8 <register_leap_second+0xa0>
    16bc:	mrc	15, 0, r3, cr13, cr0, {3}
    16c0:	ldr	r2, [pc, #448]	; 1888 <register_leap_second+0x230>
    16c4:	ldr	r3, [r3, r2]
    16c8:	add	r3, r3, #16
    16cc:	lsl	r2, r3, #3
    16d0:	movw	r3, #609	; 0x261
    16d4:	str	r3, [sp]
    16d8:	movw	r3, #0
    16dc:	movt	r3, #0
    16e0:	movw	r1, #0
    16e4:	movt	r1, #0
    16e8:	mvn	r0, #0
    16ec:	bl	0 <coda_set_error>
    16f0:	mvn	r3, #0
    16f4:	b	1874 <register_leap_second+0x21c>
    16f8:	mrc	15, 0, r3, cr13, cr0, {3}
    16fc:	ldr	r1, [pc, #392]	; 188c <register_leap_second+0x234>
    1700:	ldr	r2, [fp, #-12]
    1704:	str	r2, [r3, r1]
    1708:	mrc	15, 0, r3, cr13, cr0, {3}
    170c:	ldr	r2, [pc, #372]	; 1888 <register_leap_second+0x230>
    1710:	ldr	r3, [r3, r2]
    1714:	cmp	r3, #0
    1718:	ble	182c <register_leap_second+0x1d4>
    171c:	mrc	15, 0, r3, cr13, cr0, {3}
    1720:	ldr	r2, [pc, #356]	; 188c <register_leap_second+0x234>
    1724:	ldr	r2, [r3, r2]
    1728:	mrc	15, 0, r3, cr13, cr0, {3}
    172c:	ldr	r1, [pc, #340]	; 1888 <register_leap_second+0x230>
    1730:	ldr	r3, [r3, r1]
    1734:	sub	r3, r3, #-536870911	; 0xe0000001
    1738:	lsl	r3, r3, #3
    173c:	add	r3, r2, r3
    1740:	vldr	d7, [r3]
    1744:	vldr	d6, [fp, #-28]	; 0xffffffe4
    1748:	vcmpe.f64	d6, d7
    174c:	vmrs	APSR_nzcv, fpscr
    1750:	bhi	182c <register_leap_second+0x1d4>
    1754:	mov	r3, #0
    1758:	str	r3, [fp, #-8]
    175c:	b	1814 <register_leap_second+0x1bc>
    1760:	mrc	15, 0, r3, cr13, cr0, {3}
    1764:	ldr	r2, [pc, #288]	; 188c <register_leap_second+0x234>
    1768:	ldr	r2, [r3, r2]
    176c:	ldr	r3, [fp, #-8]
    1770:	lsl	r3, r3, #3
    1774:	add	r3, r2, r3
    1778:	vldr	d7, [r3]
    177c:	vldr	d6, [fp, #-28]	; 0xffffffe4
    1780:	vcmpe.f64	d6, d7
    1784:	vmrs	APSR_nzcv, fpscr
    1788:	bhi	1808 <register_leap_second+0x1b0>
    178c:	mrc	15, 0, r3, cr13, cr0, {3}
    1790:	ldr	r2, [pc, #244]	; 188c <register_leap_second+0x234>
    1794:	ldr	r2, [r3, r2]
    1798:	ldr	r3, [fp, #-8]
    179c:	lsl	r3, r3, #3
    17a0:	add	r3, r2, r3
    17a4:	vldr	d7, [r3]
    17a8:	vldr	d6, [fp, #-28]	; 0xffffffe4
    17ac:	vcmp.f64	d6, d7
    17b0:	vmrs	APSR_nzcv, fpscr
    17b4:	bne	17c0 <register_leap_second+0x168>
    17b8:	mov	r3, #0
    17bc:	b	1874 <register_leap_second+0x21c>
    17c0:	mrc	15, 0, r3, cr13, cr0, {3}
    17c4:	ldr	r2, [pc, #192]	; 188c <register_leap_second+0x234>
    17c8:	ldr	r2, [r3, r2]
    17cc:	ldr	r3, [fp, #-8]
    17d0:	lsl	r3, r3, #3
    17d4:	add	r3, r2, r3
    17d8:	ldrd	r2, [r3]
    17dc:	strd	r2, [fp, #-20]	; 0xffffffec
    17e0:	mrc	15, 0, r3, cr13, cr0, {3}
    17e4:	ldr	r2, [pc, #160]	; 188c <register_leap_second+0x234>
    17e8:	ldr	r2, [r3, r2]
    17ec:	ldr	r3, [fp, #-8]
    17f0:	lsl	r3, r3, #3
    17f4:	add	r1, r2, r3
    17f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    17fc:	strd	r2, [r1]
    1800:	ldrd	r2, [fp, #-20]	; 0xffffffec
    1804:	strd	r2, [fp, #-28]	; 0xffffffe4
    1808:	ldr	r3, [fp, #-8]
    180c:	add	r3, r3, #1
    1810:	str	r3, [fp, #-8]
    1814:	mrc	15, 0, r3, cr13, cr0, {3}
    1818:	ldr	r2, [pc, #104]	; 1888 <register_leap_second+0x230>
    181c:	ldr	r3, [r3, r2]
    1820:	ldr	r2, [fp, #-8]
    1824:	cmp	r2, r3
    1828:	blt	1760 <register_leap_second+0x108>
    182c:	mrc	15, 0, r3, cr13, cr0, {3}
    1830:	ldr	r2, [pc, #84]	; 188c <register_leap_second+0x234>
    1834:	ldr	r2, [r3, r2]
    1838:	mrc	15, 0, r3, cr13, cr0, {3}
    183c:	ldr	r1, [pc, #68]	; 1888 <register_leap_second+0x230>
    1840:	ldr	r3, [r3, r1]
    1844:	lsl	r3, r3, #3
    1848:	add	r1, r2, r3
    184c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    1850:	strd	r2, [r1]
    1854:	mrc	15, 0, r3, cr13, cr0, {3}
    1858:	ldr	r2, [pc, #40]	; 1888 <register_leap_second+0x230>
    185c:	ldr	r3, [r3, r2]
    1860:	add	r2, r3, #1
    1864:	mrc	15, 0, r3, cr13, cr0, {3}
    1868:	ldr	r1, [pc, #24]	; 1888 <register_leap_second+0x230>
    186c:	str	r2, [r3, r1]
    1870:	mov	r3, #0
    1874:	mov	r0, r3
    1878:	sub	sp, fp, #4
    187c:	ldr	fp, [sp]
    1880:	add	sp, sp, #4
    1884:	pop	{pc}		; (ldr pc, [sp], #4)
	...

00001890 <read_leap_second_table>:
    1890:	str	fp, [sp, #-8]!
    1894:	str	lr, [sp, #4]
    1898:	add	fp, sp, #4
    189c:	sub	sp, sp, #200	; 0xc8
    18a0:	str	r0, [fp, #-168]	; 0xffffff58
    18a4:	mov	r3, #0
    18a8:	str	r3, [fp, #-8]
    18ac:	movw	r1, #0
    18b0:	movt	r1, #0
    18b4:	ldr	r0, [fp, #-168]	; 0xffffff58
    18b8:	bl	0 <fopen>
    18bc:	str	r0, [fp, #-12]
    18c0:	ldr	r3, [fp, #-12]
    18c4:	cmp	r3, #0
    18c8:	bne	18e8 <read_leap_second_table+0x58>
    18cc:	ldr	r2, [fp, #-168]	; 0xffffff58
    18d0:	movw	r1, #0
    18d4:	movt	r1, #0
    18d8:	mvn	r0, #20
    18dc:	bl	0 <coda_set_error>
    18e0:	mvn	r3, #0
    18e4:	b	1a94 <read_leap_second_table+0x204>
    18e8:	mov	r3, #0
    18ec:	str	r3, [fp, #-120]	; 0xffffff88
    18f0:	sub	r3, fp, #120	; 0x78
    18f4:	sub	r2, fp, #116	; 0x74
    18f8:	movw	r1, #0
    18fc:	movt	r1, #0
    1900:	ldr	r0, [fp, #-12]
    1904:	bl	0 <__isoc99_fscanf>
    1908:	str	r0, [fp, #-16]
    190c:	ldr	r3, [fp, #-120]	; 0xffffff88
    1910:	cmp	r3, #0
    1914:	bgt	1928 <read_leap_second_table+0x98>
    1918:	ldr	r0, [fp, #-12]
    191c:	bl	0 <fclose>
    1920:	mov	r3, #0
    1924:	b	1a94 <read_leap_second_table+0x204>
    1928:	ldr	r3, [fp, #-120]	; 0xffffff88
    192c:	cmp	r3, #80	; 0x50
    1930:	beq	1958 <read_leap_second_table+0xc8>
    1934:	ldr	r0, [fp, #-12]
    1938:	bl	0 <fclose>
    193c:	ldr	r2, [fp, #-168]	; 0xffffff58
    1940:	movw	r1, #0
    1944:	movt	r1, #0
    1948:	mvn	r0, #21
    194c:	bl	0 <coda_set_error>
    1950:	mvn	r3, #0
    1954:	b	1a94 <read_leap_second_table+0x204>
    1958:	ldr	r3, [fp, #-120]	; 0xffffff88
    195c:	sub	r2, fp, #4
    1960:	add	r3, r2, r3
    1964:	mov	r2, #0
    1968:	strb	r2, [r3, #-112]	; 0xffffff90
    196c:	movw	r1, #0
    1970:	movt	r1, #0
    1974:	ldr	r0, [fp, #-12]
    1978:	bl	0 <__isoc99_fscanf>
    197c:	str	r0, [fp, #-16]
    1980:	sub	r1, fp, #128	; 0x80
    1984:	sub	r2, fp, #124	; 0x7c
    1988:	sub	r0, fp, #116	; 0x74
    198c:	sub	r3, fp, #120	; 0x78
    1990:	str	r3, [sp, #28]
    1994:	sub	r3, fp, #164	; 0xa4
    1998:	str	r3, [sp, #24]
    199c:	sub	r3, fp, #156	; 0x9c
    19a0:	str	r3, [sp, #20]
    19a4:	sub	r3, fp, #148	; 0x94
    19a8:	str	r3, [sp, #16]
    19ac:	sub	r3, fp, #140	; 0x8c
    19b0:	str	r3, [sp, #12]
    19b4:	sub	r3, fp, #132	; 0x84
    19b8:	str	r3, [sp, #8]
    19bc:	sub	r3, fp, #128	; 0x80
    19c0:	add	r3, r3, #2
    19c4:	str	r3, [sp, #4]
    19c8:	sub	r3, fp, #128	; 0x80
    19cc:	add	r3, r3, #1
    19d0:	str	r3, [sp]
    19d4:	mov	r3, r1
    19d8:	movw	r1, #0
    19dc:	movt	r1, #0
    19e0:	bl	0 <__isoc99_sscanf>
    19e4:	str	r0, [fp, #-16]
    19e8:	ldr	r3, [fp, #-16]
    19ec:	cmp	r3, #9
    19f0:	beq	1a24 <read_leap_second_table+0x194>
    19f4:	ldr	r3, [fp, #-120]	; 0xffffff88
    19f8:	cmp	r3, #80	; 0x50
    19fc:	beq	1a24 <read_leap_second_table+0x194>
    1a00:	ldr	r0, [fp, #-12]
    1a04:	bl	0 <fclose>
    1a08:	ldr	r2, [fp, #-168]	; 0xffffff58
    1a0c:	movw	r1, #0
    1a10:	movt	r1, #0
    1a14:	mvn	r0, #21
    1a18:	bl	0 <coda_set_error>
    1a1c:	mvn	r3, #0
    1a20:	b	1a94 <read_leap_second_table+0x204>
    1a24:	vldr	d7, [fp, #-140]	; 0xffffff74
    1a28:	vldr	d6, [pc, #120]	; 1aa8 <read_leap_second_table+0x218>
    1a2c:	vcmpe.f64	d7, d6
    1a30:	vmrs	APSR_nzcv, fpscr
    1a34:	ble	1a90 <read_leap_second_table+0x200>
    1a38:	vldr	d7, [fp, #-140]	; 0xffffff74
    1a3c:	vldr	d6, [pc, #108]	; 1ab0 <read_leap_second_table+0x220>
    1a40:	vsub.f64	d7, d7, d6
    1a44:	vldr	d6, [pc, #108]	; 1ab8 <read_leap_second_table+0x228>
    1a48:	vmul.f64	d6, d7, d6
    1a4c:	ldr	r3, [fp, #-8]
    1a50:	add	r3, r3, #10
    1a54:	vmov	s15, r3
    1a58:	vcvt.f64.s32	d7, s15
    1a5c:	vadd.f64	d7, d6, d7
    1a60:	vmov.f64	d0, d7
    1a64:	bl	1658 <register_leap_second>
    1a68:	mov	r3, r0
    1a6c:	cmp	r3, #0
    1a70:	beq	1a84 <read_leap_second_table+0x1f4>
    1a74:	ldr	r0, [fp, #-12]
    1a78:	bl	0 <fclose>
    1a7c:	mvn	r3, #0
    1a80:	b	1a94 <read_leap_second_table+0x204>
    1a84:	ldr	r3, [fp, #-8]
    1a88:	add	r3, r3, #1
    1a8c:	str	r3, [fp, #-8]
    1a90:	b	18e8 <read_leap_second_table+0x58>
    1a94:	mov	r0, r3
    1a98:	sub	sp, fp, #4
    1a9c:	ldr	fp, [sp]
    1aa0:	add	sp, sp, #4
    1aa4:	pop	{pc}		; (ldr pc, [sp], #4)
    1aa8:	.word	0xc0000000
    1aac:	.word	0x4142a032
    1ab0:	.word	0x40000000
    1ab4:	.word	0x4142b42c
    1ab8:	.word	0x00000000
    1abc:	.word	0x40f51800

00001ac0 <coda_leap_second_table_done>:
    1ac0:	str	fp, [sp, #-8]!
    1ac4:	str	lr, [sp, #4]
    1ac8:	add	fp, sp, #4
    1acc:	mrc	15, 0, r3, cr13, cr0, {3}
    1ad0:	ldr	r2, [pc, #80]	; 1b28 <coda_leap_second_table_done+0x68>
    1ad4:	ldr	r3, [r3, r2]
    1ad8:	cmp	r3, #0
    1adc:	beq	1b04 <coda_leap_second_table_done+0x44>
    1ae0:	mrc	15, 0, r3, cr13, cr0, {3}
    1ae4:	ldr	r2, [pc, #60]	; 1b28 <coda_leap_second_table_done+0x68>
    1ae8:	ldr	r3, [r3, r2]
    1aec:	mov	r0, r3
    1af0:	bl	0 <free>
    1af4:	mrc	15, 0, r3, cr13, cr0, {3}
    1af8:	ldr	r2, [pc, #40]	; 1b28 <coda_leap_second_table_done+0x68>
    1afc:	mov	r1, #0
    1b00:	str	r1, [r3, r2]
    1b04:	mrc	15, 0, r3, cr13, cr0, {3}
    1b08:	ldr	r2, [pc, #28]	; 1b2c <coda_leap_second_table_done+0x6c>
    1b0c:	mov	r1, #0
    1b10:	str	r1, [r3, r2]
    1b14:	nop	{0}
    1b18:	sub	sp, fp, #4
    1b1c:	ldr	fp, [sp]
    1b20:	add	sp, sp, #4
    1b24:	pop	{pc}		; (ldr pc, [sp], #4)
	...

00001b30 <coda_leap_second_table_init>:
    1b30:	str	fp, [sp, #-8]!
    1b34:	str	lr, [sp, #4]
    1b38:	add	fp, sp, #4
    1b3c:	bl	1ac0 <coda_leap_second_table_done>
    1b40:	movw	r0, #0
    1b44:	movt	r0, #0
    1b48:	bl	0 <getenv>
    1b4c:	mov	r3, r0
    1b50:	cmp	r3, #0
    1b54:	beq	1b84 <coda_leap_second_table_init+0x54>
    1b58:	movw	r0, #0
    1b5c:	movt	r0, #0
    1b60:	bl	0 <getenv>
    1b64:	mov	r3, r0
    1b68:	mov	r0, r3
    1b6c:	bl	1890 <read_leap_second_table>
    1b70:	mov	r3, r0
    1b74:	cmp	r3, #0
    1b78:	beq	1c5c <coda_leap_second_table_init+0x12c>
    1b7c:	mvn	r3, #0
    1b80:	b	1c60 <coda_leap_second_table_init+0x130>
    1b84:	vldr	d0, [pc, #236]	; 1c78 <coda_leap_second_table_init+0x148>
    1b88:	bl	1658 <register_leap_second>
    1b8c:	vldr	d0, [pc, #236]	; 1c80 <coda_leap_second_table_init+0x150>
    1b90:	bl	1658 <register_leap_second>
    1b94:	vldr	d0, [pc, #236]	; 1c88 <coda_leap_second_table_init+0x158>
    1b98:	bl	1658 <register_leap_second>
    1b9c:	vldr	d0, [pc, #236]	; 1c90 <coda_leap_second_table_init+0x160>
    1ba0:	bl	1658 <register_leap_second>
    1ba4:	vldr	d0, [pc, #236]	; 1c98 <coda_leap_second_table_init+0x168>
    1ba8:	bl	1658 <register_leap_second>
    1bac:	vldr	d0, [pc, #236]	; 1ca0 <coda_leap_second_table_init+0x170>
    1bb0:	bl	1658 <register_leap_second>
    1bb4:	vldr	d0, [pc, #236]	; 1ca8 <coda_leap_second_table_init+0x178>
    1bb8:	bl	1658 <register_leap_second>
    1bbc:	vldr	d0, [pc, #236]	; 1cb0 <coda_leap_second_table_init+0x180>
    1bc0:	bl	1658 <register_leap_second>
    1bc4:	vldr	d0, [pc, #236]	; 1cb8 <coda_leap_second_table_init+0x188>
    1bc8:	bl	1658 <register_leap_second>
    1bcc:	vldr	d0, [pc, #236]	; 1cc0 <coda_leap_second_table_init+0x190>
    1bd0:	bl	1658 <register_leap_second>
    1bd4:	vldr	d0, [pc, #236]	; 1cc8 <coda_leap_second_table_init+0x198>
    1bd8:	bl	1658 <register_leap_second>
    1bdc:	vldr	d0, [pc, #236]	; 1cd0 <coda_leap_second_table_init+0x1a0>
    1be0:	bl	1658 <register_leap_second>
    1be4:	vldr	d0, [pc, #236]	; 1cd8 <coda_leap_second_table_init+0x1a8>
    1be8:	bl	1658 <register_leap_second>
    1bec:	vldr	d0, [pc, #236]	; 1ce0 <coda_leap_second_table_init+0x1b0>
    1bf0:	bl	1658 <register_leap_second>
    1bf4:	vldr	d0, [pc, #236]	; 1ce8 <coda_leap_second_table_init+0x1b8>
    1bf8:	bl	1658 <register_leap_second>
    1bfc:	vldr	d0, [pc, #236]	; 1cf0 <coda_leap_second_table_init+0x1c0>
    1c00:	bl	1658 <register_leap_second>
    1c04:	vldr	d0, [pc, #236]	; 1cf8 <coda_leap_second_table_init+0x1c8>
    1c08:	bl	1658 <register_leap_second>
    1c0c:	vldr	d0, [pc, #236]	; 1d00 <coda_leap_second_table_init+0x1d0>
    1c10:	bl	1658 <register_leap_second>
    1c14:	vldr	d0, [pc, #236]	; 1d08 <coda_leap_second_table_init+0x1d8>
    1c18:	bl	1658 <register_leap_second>
    1c1c:	vldr	d0, [pc, #236]	; 1d10 <coda_leap_second_table_init+0x1e0>
    1c20:	bl	1658 <register_leap_second>
    1c24:	vldr	d0, [pc, #236]	; 1d18 <coda_leap_second_table_init+0x1e8>
    1c28:	bl	1658 <register_leap_second>
    1c2c:	vldr	d0, [pc, #236]	; 1d20 <coda_leap_second_table_init+0x1f0>
    1c30:	bl	1658 <register_leap_second>
    1c34:	vldr	d0, [pc, #236]	; 1d28 <coda_leap_second_table_init+0x1f8>
    1c38:	bl	1658 <register_leap_second>
    1c3c:	vldr	d0, [pc, #236]	; 1d30 <coda_leap_second_table_init+0x200>
    1c40:	bl	1658 <register_leap_second>
    1c44:	vldr	d0, [pc, #236]	; 1d38 <coda_leap_second_table_init+0x208>
    1c48:	bl	1658 <register_leap_second>
    1c4c:	vldr	d0, [pc, #236]	; 1d40 <coda_leap_second_table_init+0x210>
    1c50:	bl	1658 <register_leap_second>
    1c54:	vldr	d0, [pc, #236]	; 1d48 <coda_leap_second_table_init+0x218>
    1c58:	bl	1658 <register_leap_second>
    1c5c:	mov	r3, #0
    1c60:	mov	r0, r3
    1c64:	sub	sp, fp, #4
    1c68:	ldr	fp, [sp]
    1c6c:	add	sp, sp, #4
    1c70:	pop	{pc}		; (ldr pc, [sp], #4)
    1c74:	nop	{0}
    1c78:	.word	0xbb000000
    1c7c:	.word	0xc1c9dd75
    1c80:	.word	0xba800000
    1c84:	.word	0xc1c9642b
    1c88:	.word	0xfa000000
    1c8c:	.word	0xc1c87391
    1c90:	.word	0x39800000
    1c94:	.word	0xc1c782f8
    1c98:	.word	0x79000000
    1c9c:	.word	0xc1c6925e
    1ca0:	.word	0xf8800000
    1ca4:	.word	0xc1c5a11b
    1ca8:	.word	0x38000000
    1cac:	.word	0xc1c4b082
    1cb0:	.word	0x77800000
    1cb4:	.word	0xc1c3bfe8
    1cb8:	.word	0xb7000000
    1cbc:	.word	0xc1c2cf4e
    1cc0:	.word	0x76800000
    1cc4:	.word	0xc1c166bc
    1cc8:	.word	0xb6000000
    1ccc:	.word	0xc1c07622
    1cd0:	.word	0xeb000000
    1cd4:	.word	0xc1bf0b11
    1cd8:	.word	0x6a000000
    1cdc:	.word	0xc1bb4759
    1ce0:	.word	0x69000000
    1ce4:	.word	0xc1b6925e
    1ce8:	.word	0xe8000000
    1cec:	.word	0xc1b2cea5
    1cf0:	.word	0x67000000
    1cf4:	.word	0xc1b0ed72
    1cf8:	.word	0xcc000000
    1cfc:	.word	0xc1ac389b
    1d00:	.word	0xca000000
    1d04:	.word	0xc1a87634
    1d08:	.word	0xc8000000
    1d0c:	.word	0xc1a4b3cd
    1d10:	.word	0x8c000000
    1d14:	.word	0xc19e187d
    1d18:	.word	0x88000000
    1d1c:	.word	0xc192d3eb
    1d20:	.word	0x10000000
    1d24:	.word	0xc17e1336
    1d28:	.word	0x40000000
    1d2c:	.word	0x41a693b0
    1d30:	.word	0x21000000
    1d34:	.word	0x41b0eec4
    1d38:	.word	0xa2000000
    1d3c:	.word	0x41b7824f
    1d40:	.word	0x23000000
    1d44:	.word	0x41bd25ea
    1d48:	.word	0x24000000
    1d4c:	.word	0x41bffb03

00001d50 <coda_time_double_to_parts>:
    1d50:	str	fp, [sp, #-8]!
    1d54:	str	lr, [sp, #4]
    1d58:	add	fp, sp, #4
    1d5c:	sub	sp, sp, #72	; 0x48
    1d60:	vstr	d0, [fp, #-60]	; 0xffffffc4
    1d64:	str	r0, [fp, #-64]	; 0xffffffc0
    1d68:	str	r1, [fp, #-68]	; 0xffffffbc
    1d6c:	str	r2, [fp, #-72]	; 0xffffffb8
    1d70:	str	r3, [fp, #-76]	; 0xffffffb4
    1d74:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1d78:	cmp	r3, #0
    1d7c:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1d80:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1d84:	cmp	r3, #0
    1d88:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1d8c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1d90:	cmp	r3, #0
    1d94:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1d98:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1d9c:	cmp	r3, #0
    1da0:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1da4:	ldr	r3, [fp, #4]
    1da8:	cmp	r3, #0
    1dac:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1db0:	ldr	r3, [fp, #8]
    1db4:	cmp	r3, #0
    1db8:	beq	1dc8 <coda_time_double_to_parts+0x78>
    1dbc:	ldr	r3, [fp, #12]
    1dc0:	cmp	r3, #0
    1dc4:	bne	1dec <coda_time_double_to_parts+0x9c>
    1dc8:	movw	r3, #787	; 0x313
    1dcc:	movw	r2, #0
    1dd0:	movt	r2, #0
    1dd4:	movw	r1, #0
    1dd8:	movt	r1, #0
    1ddc:	mvn	r0, #99	; 0x63
    1de0:	bl	0 <coda_set_error>
    1de4:	mvn	r3, #0
    1de8:	b	1f80 <coda_time_double_to_parts+0x230>
    1dec:	vldr	d0, [fp, #-60]	; 0xffffffc4
    1df0:	bl	0 <coda_isNaN>
    1df4:	mov	r3, r0
    1df8:	cmp	r3, #0
    1dfc:	beq	1e18 <coda_time_double_to_parts+0xc8>
    1e00:	movw	r1, #0
    1e04:	movt	r1, #0
    1e08:	mvn	r0, #103	; 0x67
    1e0c:	bl	0 <coda_set_error>
    1e10:	mvn	r3, #0
    1e14:	b	1f80 <coda_time_double_to_parts+0x230>
    1e18:	vldr	d0, [fp, #-60]	; 0xffffffc4
    1e1c:	bl	0 <coda_isInf>
    1e20:	mov	r3, r0
    1e24:	cmp	r3, #0
    1e28:	beq	1e44 <coda_time_double_to_parts+0xf4>
    1e2c:	movw	r1, #0
    1e30:	movt	r1, #0
    1e34:	mvn	r0, #103	; 0x67
    1e38:	bl	0 <coda_set_error>
    1e3c:	mvn	r3, #0
    1e40:	b	1f80 <coda_time_double_to_parts+0x230>
    1e44:	vldr	d7, [fp, #-60]	; 0xffffffc4
    1e48:	vldr	d6, [pc, #328]	; 1f98 <coda_time_double_to_parts+0x248>
    1e4c:	vadd.f64	d7, d7, d6
    1e50:	vstr	d7, [fp, #-60]	; 0xffffffc4
    1e54:	vldr	d0, [fp, #-60]	; 0xffffffc4
    1e58:	bl	0 <floor>
    1e5c:	vstr	d0, [fp, #-12]
    1e60:	vldr	d7, [fp, #-12]
    1e64:	vldr	d6, [pc, #308]	; 1fa0 <coda_time_double_to_parts+0x250>
    1e68:	vdiv.f64	d5, d7, d6
    1e6c:	vmov.f64	d0, d5
    1e70:	bl	0 <floor>
    1e74:	vmov.f64	d7, d0
    1e78:	vcvt.s32.f64	s15, d7
    1e7c:	vmov	r3, s15
    1e80:	str	r3, [fp, #-16]
    1e84:	sub	r3, fp, #36	; 0x24
    1e88:	sub	r2, fp, #32
    1e8c:	sub	r1, fp, #28
    1e90:	ldr	r0, [fp, #-16]
    1e94:	bl	1210 <mjd2000_to_dmy>
    1e98:	mov	r3, r0
    1e9c:	cmp	r3, #0
    1ea0:	beq	1eac <coda_time_double_to_parts+0x15c>
    1ea4:	mvn	r3, #0
    1ea8:	b	1f80 <coda_time_double_to_parts+0x230>
    1eac:	ldr	r3, [fp, #-16]
    1eb0:	vmov	s15, r3
    1eb4:	vcvt.f64.s32	d7, s15
    1eb8:	vldr	d6, [pc, #224]	; 1fa0 <coda_time_double_to_parts+0x250>
    1ebc:	vmul.f64	d7, d7, d6
    1ec0:	vldr	d6, [fp, #-12]
    1ec4:	vsub.f64	d7, d6, d7
    1ec8:	vcvt.s32.f64	s15, d7
    1ecc:	vmov	r3, s15
    1ed0:	str	r3, [fp, #-20]	; 0xffffffec
    1ed4:	sub	r3, fp, #48	; 0x30
    1ed8:	sub	r2, fp, #44	; 0x2c
    1edc:	sub	r1, fp, #40	; 0x28
    1ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ee4:	bl	1518 <seconds_to_hms>
    1ee8:	mov	r3, r0
    1eec:	cmp	r3, #0
    1ef0:	beq	1efc <coda_time_double_to_parts+0x1ac>
    1ef4:	mvn	r3, #0
    1ef8:	b	1f80 <coda_time_double_to_parts+0x230>
    1efc:	vldr	d6, [fp, #-60]	; 0xffffffc4
    1f00:	vldr	d7, [fp, #-12]
    1f04:	vsub.f64	d7, d6, d7
    1f08:	vldr	d6, [pc, #152]	; 1fa8 <coda_time_double_to_parts+0x258>
    1f0c:	vmul.f64	d7, d7, d6
    1f10:	vmov.f64	d0, d7
    1f14:	bl	0 <floor>
    1f18:	vmov.f64	d7, d0
    1f1c:	vcvt.s32.f64	s15, d7
    1f20:	vmov	r3, s15
    1f24:	str	r3, [fp, #-24]	; 0xffffffe8
    1f28:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1f30:	str	r2, [r3]
    1f34:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1f38:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1f3c:	str	r2, [r3]
    1f40:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1f44:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1f48:	str	r2, [r3]
    1f4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1f50:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1f54:	str	r2, [r3]
    1f58:	ldr	r2, [fp, #-44]	; 0xffffffd4
    1f5c:	ldr	r3, [fp, #4]
    1f60:	str	r2, [r3]
    1f64:	ldr	r2, [fp, #-48]	; 0xffffffd0
    1f68:	ldr	r3, [fp, #8]
    1f6c:	str	r2, [r3]
    1f70:	ldr	r3, [fp, #12]
    1f74:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1f78:	str	r2, [r3]
    1f7c:	mov	r3, #0
    1f80:	mov	r0, r3
    1f84:	sub	sp, fp, #4
    1f88:	ldr	fp, [sp]
    1f8c:	add	sp, sp, #4
    1f90:	pop	{pc}		; (ldr pc, [sp], #4)
    1f94:	nop	{0}
    1f98:	.word	0xa0b5ed8d
    1f9c:	.word	0x3ea0c6f7
    1fa0:	.word	0x00000000
    1fa4:	.word	0x40f51800
    1fa8:	.word	0x00000000
    1fac:	.word	0x412e8480

00001fb0 <coda_time_double_to_parts_utc>:
    1fb0:	str	fp, [sp, #-8]!
    1fb4:	str	lr, [sp, #4]
    1fb8:	add	fp, sp, #4
    1fbc:	sub	sp, sp, #80	; 0x50
    1fc0:	vstr	d0, [fp, #-68]	; 0xffffffbc
    1fc4:	str	r0, [fp, #-72]	; 0xffffffb8
    1fc8:	str	r1, [fp, #-76]	; 0xffffffb4
    1fcc:	str	r2, [fp, #-80]	; 0xffffffb0
    1fd0:	str	r3, [fp, #-84]	; 0xffffffac
    1fd4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    1fd8:	cmp	r3, #0
    1fdc:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    1fe0:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1fe4:	cmp	r3, #0
    1fe8:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    1fec:	ldr	r3, [fp, #-80]	; 0xffffffb0
    1ff0:	cmp	r3, #0
    1ff4:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    1ff8:	ldr	r3, [fp, #-84]	; 0xffffffac
    1ffc:	cmp	r3, #0
    2000:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    2004:	ldr	r3, [fp, #4]
    2008:	cmp	r3, #0
    200c:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    2010:	ldr	r3, [fp, #8]
    2014:	cmp	r3, #0
    2018:	beq	2028 <coda_time_double_to_parts_utc+0x78>
    201c:	ldr	r3, [fp, #12]
    2020:	cmp	r3, #0
    2024:	bne	204c <coda_time_double_to_parts_utc+0x9c>
    2028:	movw	r3, #874	; 0x36a
    202c:	movw	r2, #0
    2030:	movt	r2, #0
    2034:	movw	r1, #0
    2038:	movt	r1, #0
    203c:	mvn	r0, #99	; 0x63
    2040:	bl	0 <coda_set_error>
    2044:	mvn	r3, #0
    2048:	b	2318 <coda_time_double_to_parts_utc+0x368>
    204c:	vldr	d0, [fp, #-68]	; 0xffffffbc
    2050:	bl	0 <coda_isNaN>
    2054:	mov	r3, r0
    2058:	cmp	r3, #0
    205c:	beq	2078 <coda_time_double_to_parts_utc+0xc8>
    2060:	movw	r1, #0
    2064:	movt	r1, #0
    2068:	mvn	r0, #103	; 0x67
    206c:	bl	0 <coda_set_error>
    2070:	mvn	r3, #0
    2074:	b	2318 <coda_time_double_to_parts_utc+0x368>
    2078:	vldr	d0, [fp, #-68]	; 0xffffffbc
    207c:	bl	0 <coda_isInf>
    2080:	mov	r3, r0
    2084:	cmp	r3, #0
    2088:	beq	20a4 <coda_time_double_to_parts_utc+0xf4>
    208c:	movw	r1, #0
    2090:	movt	r1, #0
    2094:	mvn	r0, #103	; 0x67
    2098:	bl	0 <coda_set_error>
    209c:	mvn	r3, #0
    20a0:	b	2318 <coda_time_double_to_parts_utc+0x368>
    20a4:	vldr	d7, [fp, #-68]	; 0xffffffbc
    20a8:	vldr	d6, [pc, #640]	; 2330 <coda_time_double_to_parts_utc+0x380>
    20ac:	vadd.f64	d7, d7, d6
    20b0:	vstr	d7, [fp, #-68]	; 0xffffffbc
    20b4:	vldr	d0, [fp, #-68]	; 0xffffffbc
    20b8:	bl	0 <floor>
    20bc:	vstr	d0, [fp, #-20]	; 0xffffffec
    20c0:	mrc	15, 0, r3, cr13, cr0, {3}
    20c4:	ldr	r2, [pc, #644]	; 2350 <coda_time_double_to_parts_utc+0x3a0>
    20c8:	ldr	r3, [r3, r2]
    20cc:	cmp	r3, #0
    20d0:	beq	20e8 <coda_time_double_to_parts_utc+0x138>
    20d4:	mrc	15, 0, r3, cr13, cr0, {3}
    20d8:	ldr	r2, [pc, #628]	; 2354 <coda_time_double_to_parts_utc+0x3a4>
    20dc:	ldr	r3, [r3, r2]
    20e0:	cmp	r3, #0
    20e4:	bgt	2108 <coda_time_double_to_parts_utc+0x158>
    20e8:	movw	r3, #0
    20ec:	movt	r3, #0
    20f0:	movw	r2, #894	; 0x37e
    20f4:	movw	r1, #0
    20f8:	movt	r1, #0
    20fc:	movw	r0, #0
    2100:	movt	r0, #0
    2104:	bl	0 <__assert_fail>
    2108:	mov	r3, #0
    210c:	str	r3, [fp, #-8]
    2110:	b	2120 <coda_time_double_to_parts_utc+0x170>
    2114:	ldr	r3, [fp, #-8]
    2118:	add	r3, r3, #1
    211c:	str	r3, [fp, #-8]
    2120:	mrc	15, 0, r3, cr13, cr0, {3}
    2124:	ldr	r2, [pc, #552]	; 2354 <coda_time_double_to_parts_utc+0x3a4>
    2128:	ldr	r3, [r3, r2]
    212c:	ldr	r2, [fp, #-8]
    2130:	cmp	r2, r3
    2134:	bge	2164 <coda_time_double_to_parts_utc+0x1b4>
    2138:	mrc	15, 0, r3, cr13, cr0, {3}
    213c:	ldr	r2, [pc, #524]	; 2350 <coda_time_double_to_parts_utc+0x3a0>
    2140:	ldr	r2, [r3, r2]
    2144:	ldr	r3, [fp, #-8]
    2148:	lsl	r3, r3, #3
    214c:	add	r3, r2, r3
    2150:	vldr	d7, [r3]
    2154:	vldr	d6, [fp, #-20]	; 0xffffffec
    2158:	vcmpe.f64	d6, d7
    215c:	vmrs	APSR_nzcv, fpscr
    2160:	bgt	2114 <coda_time_double_to_parts_utc+0x164>
    2164:	mrc	15, 0, r3, cr13, cr0, {3}
    2168:	ldr	r2, [pc, #480]	; 2350 <coda_time_double_to_parts_utc+0x3a0>
    216c:	ldr	r2, [r3, r2]
    2170:	ldr	r3, [fp, #-8]
    2174:	lsl	r3, r3, #3
    2178:	add	r3, r2, r3
    217c:	vldr	d7, [r3]
    2180:	vldr	d6, [fp, #-20]	; 0xffffffec
    2184:	vsub.f64	d7, d6, d7
    2188:	vabs.f64	d7, d7
    218c:	vldr	d6, [pc, #420]	; 2338 <coda_time_double_to_parts_utc+0x388>
    2190:	vcmpe.f64	d7, d6
    2194:	vmrs	APSR_nzcv, fpscr
    2198:	movmi	r3, #1
    219c:	movpl	r3, #0
    21a0:	uxtb	r3, r3
    21a4:	str	r3, [fp, #-24]	; 0xffffffe8
    21a8:	ldr	r3, [fp, #-8]
    21ac:	add	r2, r3, #10
    21b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21b4:	add	r3, r2, r3
    21b8:	vmov	s15, r3
    21bc:	vcvt.f64.s32	d7, s15
    21c0:	vldr	d6, [fp, #-20]	; 0xffffffec
    21c4:	vsub.f64	d7, d6, d7
    21c8:	vstr	d7, [fp, #-20]	; 0xffffffec
    21cc:	ldr	r3, [fp, #-8]
    21d0:	add	r2, r3, #10
    21d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    21d8:	add	r3, r2, r3
    21dc:	vmov	s15, r3
    21e0:	vcvt.f64.s32	d7, s15
    21e4:	vldr	d6, [fp, #-68]	; 0xffffffbc
    21e8:	vsub.f64	d7, d6, d7
    21ec:	vstr	d7, [fp, #-68]	; 0xffffffbc
    21f0:	vldr	d7, [fp, #-20]	; 0xffffffec
    21f4:	vldr	d6, [pc, #324]	; 2340 <coda_time_double_to_parts_utc+0x390>
    21f8:	vdiv.f64	d5, d7, d6
    21fc:	vmov.f64	d0, d5
    2200:	bl	0 <floor>
    2204:	vmov.f64	d7, d0
    2208:	vcvt.s32.f64	s15, d7
    220c:	vmov	r3, s15
    2210:	str	r3, [fp, #-28]	; 0xffffffe4
    2214:	sub	r3, fp, #48	; 0x30
    2218:	sub	r2, fp, #44	; 0x2c
    221c:	sub	r1, fp, #40	; 0x28
    2220:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2224:	bl	1210 <mjd2000_to_dmy>
    2228:	mov	r3, r0
    222c:	cmp	r3, #0
    2230:	beq	223c <coda_time_double_to_parts_utc+0x28c>
    2234:	mvn	r3, #0
    2238:	b	2318 <coda_time_double_to_parts_utc+0x368>
    223c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2240:	vmov	s15, r3
    2244:	vcvt.f64.s32	d7, s15
    2248:	vldr	d6, [pc, #240]	; 2340 <coda_time_double_to_parts_utc+0x390>
    224c:	vmul.f64	d7, d7, d6
    2250:	vldr	d6, [fp, #-20]	; 0xffffffec
    2254:	vsub.f64	d7, d6, d7
    2258:	vcvt.s32.f64	s15, d7
    225c:	vmov	r3, s15
    2260:	str	r3, [fp, #-32]	; 0xffffffe0
    2264:	sub	r3, fp, #60	; 0x3c
    2268:	sub	r2, fp, #56	; 0x38
    226c:	sub	r1, fp, #52	; 0x34
    2270:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2274:	bl	1518 <seconds_to_hms>
    2278:	mov	r3, r0
    227c:	cmp	r3, #0
    2280:	beq	228c <coda_time_double_to_parts_utc+0x2dc>
    2284:	mvn	r3, #0
    2288:	b	2318 <coda_time_double_to_parts_utc+0x368>
    228c:	vldr	d6, [fp, #-68]	; 0xffffffbc
    2290:	vldr	d7, [fp, #-20]	; 0xffffffec
    2294:	vsub.f64	d7, d6, d7
    2298:	vldr	d6, [pc, #168]	; 2348 <coda_time_double_to_parts_utc+0x398>
    229c:	vmul.f64	d7, d7, d6
    22a0:	vmov.f64	d0, d7
    22a4:	bl	0 <floor>
    22a8:	vmov.f64	d7, d0
    22ac:	vcvt.s32.f64	s15, d7
    22b0:	vmov	r3, s15
    22b4:	str	r3, [fp, #-36]	; 0xffffffdc
    22b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
    22bc:	ldr	r3, [fp, #-72]	; 0xffffffb8
    22c0:	str	r2, [r3]
    22c4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    22c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
    22cc:	str	r2, [r3]
    22d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    22d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
    22d8:	str	r2, [r3]
    22dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
    22e0:	ldr	r3, [fp, #-84]	; 0xffffffac
    22e4:	str	r2, [r3]
    22e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
    22ec:	ldr	r3, [fp, #4]
    22f0:	str	r2, [r3]
    22f4:	ldr	r2, [fp, #-60]	; 0xffffffc4
    22f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    22fc:	add	r2, r2, r3
    2300:	ldr	r3, [fp, #8]
    2304:	str	r2, [r3]
    2308:	ldr	r3, [fp, #12]
    230c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    2310:	str	r2, [r3]
    2314:	mov	r3, #0
    2318:	mov	r0, r3
    231c:	sub	sp, fp, #4
    2320:	ldr	fp, [sp]
    2324:	add	sp, sp, #4
    2328:	pop	{pc}		; (ldr pc, [sp], #4)
    232c:	nop	{0}
    2330:	.word	0xa0b5ed8d
    2334:	.word	0x3ea0c6f7
    2338:	.word	0x9999999a
    233c:	.word	0x3fb99999
    2340:	.word	0x00000000
    2344:	.word	0x40f51800
    2348:	.word	0x00000000
    234c:	.word	0x412e8480
	...

00002358 <coda_time_parts_to_double>:
    2358:	str	fp, [sp, #-8]!
    235c:	str	lr, [sp, #4]
    2360:	add	fp, sp, #4
    2364:	sub	sp, sp, #40	; 0x28
    2368:	str	r0, [fp, #-24]	; 0xffffffe8
    236c:	str	r1, [fp, #-28]	; 0xffffffe4
    2370:	str	r2, [fp, #-32]	; 0xffffffe0
    2374:	str	r3, [fp, #-36]	; 0xffffffdc
    2378:	ldr	r3, [fp, #16]
    237c:	cmp	r3, #0
    2380:	bne	23a8 <coda_time_parts_to_double+0x50>
    2384:	movw	r3, #954	; 0x3ba
    2388:	movw	r2, #0
    238c:	movt	r2, #0
    2390:	movw	r1, #0
    2394:	movt	r1, #0
    2398:	mvn	r0, #99	; 0x63
    239c:	bl	0 <coda_set_error>
    23a0:	mvn	r3, #0
    23a4:	b	2428 <coda_time_parts_to_double+0xd0>
    23a8:	sub	r3, fp, #16
    23ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    23b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    23b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    23b8:	bl	9c8 <dmy_to_mjd2000>
    23bc:	mov	r3, r0
    23c0:	cmp	r3, #0
    23c4:	beq	23d0 <coda_time_parts_to_double+0x78>
    23c8:	mvn	r3, #0
    23cc:	b	2428 <coda_time_parts_to_double+0xd0>
    23d0:	sub	r3, fp, #12
    23d4:	str	r3, [sp]
    23d8:	ldr	r3, [fp, #12]
    23dc:	ldr	r2, [fp, #8]
    23e0:	ldr	r1, [fp, #4]
    23e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    23e8:	bl	12c4 <hms_to_daytime>
    23ec:	mov	r3, r0
    23f0:	cmp	r3, #0
    23f4:	beq	2400 <coda_time_parts_to_double+0xa8>
    23f8:	mvn	r3, #0
    23fc:	b	2428 <coda_time_parts_to_double+0xd0>
    2400:	ldr	r3, [fp, #-16]
    2404:	vmov	s15, r3
    2408:	vcvt.f64.s32	d7, s15
    240c:	vldr	d6, [pc, #44]	; 2440 <coda_time_parts_to_double+0xe8>
    2410:	vmul.f64	d6, d7, d6
    2414:	vldr	d7, [fp, #-12]
    2418:	vadd.f64	d7, d6, d7
    241c:	ldr	r3, [fp, #16]
    2420:	vstr	d7, [r3]
    2424:	mov	r3, #0
    2428:	mov	r0, r3
    242c:	sub	sp, fp, #4
    2430:	ldr	fp, [sp]
    2434:	add	sp, sp, #4
    2438:	pop	{pc}		; (ldr pc, [sp], #4)
    243c:	nop	{0}
    2440:	.word	0x00000000
    2444:	.word	0x40f51800

00002448 <coda_time_parts_to_double_utc>:
    2448:	str	fp, [sp, #-8]!
    244c:	str	lr, [sp, #4]
    2450:	add	fp, sp, #4
    2454:	sub	sp, sp, #56	; 0x38
    2458:	str	r0, [fp, #-40]	; 0xffffffd8
    245c:	str	r1, [fp, #-44]	; 0xffffffd4
    2460:	str	r2, [fp, #-48]	; 0xffffffd0
    2464:	str	r3, [fp, #-52]	; 0xffffffcc
    2468:	ldr	r3, [fp, #16]
    246c:	cmp	r3, #0
    2470:	bne	2498 <coda_time_parts_to_double_utc+0x50>
    2474:	mov	r3, #1008	; 0x3f0
    2478:	movw	r2, #0
    247c:	movt	r2, #0
    2480:	movw	r1, #0
    2484:	movt	r1, #0
    2488:	mvn	r0, #99	; 0x63
    248c:	bl	0 <coda_set_error>
    2490:	mvn	r3, #0
    2494:	b	25dc <coda_time_parts_to_double_utc+0x194>
    2498:	sub	r3, fp, #32
    249c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    24a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    24a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    24a8:	bl	9c8 <dmy_to_mjd2000>
    24ac:	mov	r3, r0
    24b0:	cmp	r3, #0
    24b4:	beq	24c0 <coda_time_parts_to_double_utc+0x78>
    24b8:	mvn	r3, #0
    24bc:	b	25dc <coda_time_parts_to_double_utc+0x194>
    24c0:	sub	r3, fp, #28
    24c4:	str	r3, [sp]
    24c8:	ldr	r3, [fp, #12]
    24cc:	ldr	r2, [fp, #8]
    24d0:	ldr	r1, [fp, #4]
    24d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    24d8:	bl	12c4 <hms_to_daytime>
    24dc:	mov	r3, r0
    24e0:	cmp	r3, #0
    24e4:	beq	24f0 <coda_time_parts_to_double_utc+0xa8>
    24e8:	mvn	r3, #0
    24ec:	b	25dc <coda_time_parts_to_double_utc+0x194>
    24f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    24f4:	vmov	s15, r3
    24f8:	vcvt.f64.s32	d7, s15
    24fc:	vldr	d6, [pc, #236]	; 25f0 <coda_time_parts_to_double_utc+0x1a8>
    2500:	vmul.f64	d7, d7, d6
    2504:	vldr	d6, [pc, #236]	; 25f8 <coda_time_parts_to_double_utc+0x1b0>
    2508:	vadd.f64	d7, d7, d6
    250c:	vstr	d7, [fp, #-12]
    2510:	mrc	15, 0, r3, cr13, cr0, {3}
    2514:	ldr	r2, [pc, #236]	; 2608 <coda_time_parts_to_double_utc+0x1c0>
    2518:	ldr	r3, [r3, r2]
    251c:	cmp	r3, #0
    2520:	beq	2538 <coda_time_parts_to_double_utc+0xf0>
    2524:	mrc	15, 0, r3, cr13, cr0, {3}
    2528:	ldr	r2, [pc, #220]	; 260c <coda_time_parts_to_double_utc+0x1c4>
    252c:	ldr	r3, [r3, r2]
    2530:	cmp	r3, #0
    2534:	bgt	2558 <coda_time_parts_to_double_utc+0x110>
    2538:	movw	r3, #0
    253c:	movt	r3, #0
    2540:	mov	r2, #1024	; 0x400
    2544:	movw	r1, #0
    2548:	movt	r1, #0
    254c:	movw	r0, #0
    2550:	movt	r0, #0
    2554:	bl	0 <__assert_fail>
    2558:	mov	r3, #0
    255c:	str	r3, [fp, #-16]
    2560:	b	2580 <coda_time_parts_to_double_utc+0x138>
    2564:	vldr	d7, [fp, #-12]
    2568:	vldr	d6, [pc, #144]	; 2600 <coda_time_parts_to_double_utc+0x1b8>
    256c:	vadd.f64	d7, d7, d6
    2570:	vstr	d7, [fp, #-12]
    2574:	ldr	r3, [fp, #-16]
    2578:	add	r3, r3, #1
    257c:	str	r3, [fp, #-16]
    2580:	mrc	15, 0, r3, cr13, cr0, {3}
    2584:	ldr	r2, [pc, #128]	; 260c <coda_time_parts_to_double_utc+0x1c4>
    2588:	ldr	r3, [r3, r2]
    258c:	ldr	r2, [fp, #-16]
    2590:	cmp	r2, r3
    2594:	bge	25c4 <coda_time_parts_to_double_utc+0x17c>
    2598:	mrc	15, 0, r3, cr13, cr0, {3}
    259c:	ldr	r2, [pc, #100]	; 2608 <coda_time_parts_to_double_utc+0x1c0>
    25a0:	ldr	r2, [r3, r2]
    25a4:	ldr	r3, [fp, #-16]
    25a8:	lsl	r3, r3, #3
    25ac:	add	r3, r2, r3
    25b0:	vldr	d7, [r3]
    25b4:	vldr	d6, [fp, #-12]
    25b8:	vcmpe.f64	d6, d7
    25bc:	vmrs	APSR_nzcv, fpscr
    25c0:	bge	2564 <coda_time_parts_to_double_utc+0x11c>
    25c4:	vldr	d6, [fp, #-28]	; 0xffffffe4
    25c8:	vldr	d7, [fp, #-12]
    25cc:	vadd.f64	d7, d6, d7
    25d0:	ldr	r3, [fp, #16]
    25d4:	vstr	d7, [r3]
    25d8:	mov	r3, #0
    25dc:	mov	r0, r3
    25e0:	sub	sp, fp, #4
    25e4:	ldr	fp, [sp]
    25e8:	add	sp, sp, #4
    25ec:	pop	{pc}		; (ldr pc, [sp], #4)
    25f0:	.word	0x00000000
    25f4:	.word	0x40f51800
    25f8:	.word	0x00000000
    25fc:	.word	0x40240000
    2600:	.word	0x00000000
    2604:	.word	0x3ff00000
	...

00002610 <coda_time_parts_to_string>:
    2610:	str	fp, [sp, #-8]!
    2614:	str	lr, [sp, #4]
    2618:	add	fp, sp, #4
    261c:	sub	sp, sp, #96	; 0x60
    2620:	str	r0, [fp, #-88]	; 0xffffffa8
    2624:	str	r1, [fp, #-92]	; 0xffffffa4
    2628:	str	r2, [fp, #-96]	; 0xffffffa0
    262c:	str	r3, [fp, #-100]	; 0xffffff9c
    2630:	movw	r2, #0
    2634:	movt	r2, #0
    2638:	sub	r3, fp, #76	; 0x4c
    263c:	ldrd	r0, [r2]
    2640:	strd	r0, [r3]
    2644:	ldrd	r0, [r2, #8]
    2648:	strd	r0, [r3, #8]
    264c:	ldrd	r0, [r2, #16]
    2650:	strd	r0, [r3, #16]
    2654:	ldrd	r0, [r2, #24]
    2658:	strd	r0, [r3, #24]
    265c:	ldrd	r0, [r2, #32]
    2660:	strd	r0, [r3, #32]
    2664:	ldrd	r0, [r2, #40]	; 0x28
    2668:	strd	r0, [r3, #40]	; 0x28
    266c:	mov	r3, #0
    2670:	str	r3, [fp, #-8]
    2674:	mov	r3, #0
    2678:	str	r3, [fp, #-12]
    267c:	mov	r3, #0
    2680:	str	r3, [fp, #-16]
    2684:	ldr	r3, [fp, #16]
    2688:	cmp	r3, #0
    268c:	bne	26b4 <coda_time_parts_to_string+0xa4>
    2690:	movw	r3, #1069	; 0x42d
    2694:	movw	r2, #0
    2698:	movt	r2, #0
    269c:	movw	r1, #0
    26a0:	movt	r1, #0
    26a4:	mvn	r0, #99	; 0x63
    26a8:	bl	0 <coda_set_error>
    26ac:	mvn	r3, #0
    26b0:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    26b4:	ldr	r3, [fp, #20]
    26b8:	cmp	r3, #0
    26bc:	bne	2e8c <coda_time_parts_to_string+0x87c>
    26c0:	movw	r3, #1074	; 0x432
    26c4:	movw	r2, #0
    26c8:	movt	r2, #0
    26cc:	movw	r1, #0
    26d0:	movt	r1, #0
    26d4:	mvn	r0, #99	; 0x63
    26d8:	bl	0 <coda_set_error>
    26dc:	mvn	r3, #0
    26e0:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    26e4:	ldr	r3, [fp, #-12]
    26e8:	ldr	r2, [fp, #16]
    26ec:	add	r3, r2, r3
    26f0:	ldrb	r3, [r3]
    26f4:	cmp	r3, #39	; 0x27
    26f8:	bne	273c <coda_time_parts_to_string+0x12c>
    26fc:	ldr	r3, [fp, #-12]
    2700:	add	r3, r3, #1
    2704:	str	r3, [fp, #-12]
    2708:	ldr	r3, [fp, #-12]
    270c:	ldr	r2, [fp, #16]
    2710:	add	r3, r2, r3
    2714:	ldrb	r3, [r3]
    2718:	cmp	r3, #39	; 0x27
    271c:	beq	273c <coda_time_parts_to_string+0x12c>
    2720:	ldr	r3, [fp, #-8]
    2724:	cmp	r3, #0
    2728:	moveq	r3, #1
    272c:	movne	r3, #0
    2730:	uxtb	r3, r3
    2734:	str	r3, [fp, #-8]
    2738:	b	2e8c <coda_time_parts_to_string+0x87c>
    273c:	ldr	r3, [fp, #-8]
    2740:	cmp	r3, #0
    2744:	beq	2784 <coda_time_parts_to_string+0x174>
    2748:	ldr	r3, [fp, #-12]
    274c:	ldr	r2, [fp, #16]
    2750:	add	r2, r2, r3
    2754:	ldr	r3, [fp, #-16]
    2758:	ldr	r1, [fp, #20]
    275c:	add	r3, r1, r3
    2760:	ldrb	r2, [r2]
    2764:	strb	r2, [r3]
    2768:	ldr	r3, [fp, #-12]
    276c:	add	r3, r3, #1
    2770:	str	r3, [fp, #-12]
    2774:	ldr	r3, [fp, #-16]
    2778:	add	r3, r3, #1
    277c:	str	r3, [fp, #-16]
    2780:	b	2e8c <coda_time_parts_to_string+0x87c>
    2784:	ldr	r3, [fp, #-12]
    2788:	ldr	r2, [fp, #16]
    278c:	add	r3, r2, r3
    2790:	ldrb	r3, [r3]
    2794:	cmp	r3, #121	; 0x79
    2798:	bne	2860 <coda_time_parts_to_string+0x250>
    279c:	ldr	r3, [fp, #-12]
    27a0:	add	r3, r3, #1
    27a4:	ldr	r2, [fp, #16]
    27a8:	add	r3, r2, r3
    27ac:	ldrb	r3, [r3]
    27b0:	cmp	r3, #121	; 0x79
    27b4:	bne	2860 <coda_time_parts_to_string+0x250>
    27b8:	ldr	r3, [fp, #-12]
    27bc:	add	r3, r3, #2
    27c0:	ldr	r2, [fp, #16]
    27c4:	add	r3, r2, r3
    27c8:	ldrb	r3, [r3]
    27cc:	cmp	r3, #121	; 0x79
    27d0:	bne	2860 <coda_time_parts_to_string+0x250>
    27d4:	ldr	r3, [fp, #-12]
    27d8:	add	r3, r3, #3
    27dc:	ldr	r2, [fp, #16]
    27e0:	add	r3, r2, r3
    27e4:	ldrb	r3, [r3]
    27e8:	cmp	r3, #121	; 0x79
    27ec:	bne	2860 <coda_time_parts_to_string+0x250>
    27f0:	ldr	r3, [fp, #-88]	; 0xffffffa8
    27f4:	cmp	r3, #0
    27f8:	blt	280c <coda_time_parts_to_string+0x1fc>
    27fc:	ldr	r3, [fp, #-88]	; 0xffffffa8
    2800:	movw	r2, #9999	; 0x270f
    2804:	cmp	r3, r2
    2808:	ble	2824 <coda_time_parts_to_string+0x214>
    280c:	movw	r1, #0
    2810:	movt	r1, #0
    2814:	mvn	r0, #103	; 0x67
    2818:	bl	0 <coda_set_error>
    281c:	mvn	r3, #0
    2820:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2824:	ldr	r3, [fp, #-16]
    2828:	ldr	r2, [fp, #20]
    282c:	add	r3, r2, r3
    2830:	ldr	r2, [fp, #-88]	; 0xffffffa8
    2834:	movw	r1, #0
    2838:	movt	r1, #0
    283c:	mov	r0, r3
    2840:	bl	0 <sprintf>
    2844:	ldr	r3, [fp, #-12]
    2848:	add	r3, r3, #4
    284c:	str	r3, [fp, #-12]
    2850:	ldr	r3, [fp, #-16]
    2854:	add	r3, r3, #4
    2858:	str	r3, [fp, #-16]
    285c:	b	2e8c <coda_time_parts_to_string+0x87c>
    2860:	ldr	r3, [fp, #-12]
    2864:	ldr	r2, [fp, #16]
    2868:	add	r3, r2, r3
    286c:	ldrb	r3, [r3]
    2870:	cmp	r3, #77	; 0x4d
    2874:	bne	2968 <coda_time_parts_to_string+0x358>
    2878:	ldr	r3, [fp, #-12]
    287c:	add	r3, r3, #1
    2880:	ldr	r2, [fp, #16]
    2884:	add	r3, r2, r3
    2888:	ldrb	r3, [r3]
    288c:	cmp	r3, #77	; 0x4d
    2890:	bne	2968 <coda_time_parts_to_string+0x358>
    2894:	ldr	r3, [fp, #-92]	; 0xffffffa4
    2898:	cmp	r3, #0
    289c:	ble	28ac <coda_time_parts_to_string+0x29c>
    28a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
    28a4:	cmp	r3, #12
    28a8:	ble	28c4 <coda_time_parts_to_string+0x2b4>
    28ac:	movw	r1, #0
    28b0:	movt	r1, #0
    28b4:	mvn	r0, #103	; 0x67
    28b8:	bl	0 <coda_set_error>
    28bc:	mvn	r3, #0
    28c0:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    28c4:	ldr	r3, [fp, #-12]
    28c8:	add	r3, r3, #2
    28cc:	ldr	r2, [fp, #16]
    28d0:	add	r3, r2, r3
    28d4:	ldrb	r3, [r3]
    28d8:	cmp	r3, #77	; 0x4d
    28dc:	bne	292c <coda_time_parts_to_string+0x31c>
    28e0:	ldr	r3, [fp, #-16]
    28e4:	ldr	r2, [fp, #20]
    28e8:	add	r0, r2, r3
    28ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
    28f0:	lsl	r3, r3, #2
    28f4:	sub	r2, fp, #4
    28f8:	add	r3, r2, r3
    28fc:	ldr	r3, [r3, #-72]	; 0xffffffb8
    2900:	mov	r2, r3
    2904:	movw	r1, #0
    2908:	movt	r1, #0
    290c:	bl	0 <sprintf>
    2910:	ldr	r3, [fp, #-12]
    2914:	add	r3, r3, #3
    2918:	str	r3, [fp, #-12]
    291c:	ldr	r3, [fp, #-16]
    2920:	add	r3, r3, #3
    2924:	str	r3, [fp, #-16]
    2928:	b	2e8c <coda_time_parts_to_string+0x87c>
    292c:	ldr	r3, [fp, #-16]
    2930:	ldr	r2, [fp, #20]
    2934:	add	r3, r2, r3
    2938:	ldr	r2, [fp, #-92]	; 0xffffffa4
    293c:	movw	r1, #0
    2940:	movt	r1, #0
    2944:	mov	r0, r3
    2948:	bl	0 <sprintf>
    294c:	ldr	r3, [fp, #-12]
    2950:	add	r3, r3, #2
    2954:	str	r3, [fp, #-12]
    2958:	ldr	r3, [fp, #-16]
    295c:	add	r3, r3, #2
    2960:	str	r3, [fp, #-16]
    2964:	b	2e8c <coda_time_parts_to_string+0x87c>
    2968:	ldr	r3, [fp, #-12]
    296c:	ldr	r2, [fp, #16]
    2970:	add	r3, r2, r3
    2974:	ldrb	r3, [r3]
    2978:	cmp	r3, #100	; 0x64
    297c:	bne	2a08 <coda_time_parts_to_string+0x3f8>
    2980:	ldr	r3, [fp, #-12]
    2984:	add	r3, r3, #1
    2988:	ldr	r2, [fp, #16]
    298c:	add	r3, r2, r3
    2990:	ldrb	r3, [r3]
    2994:	cmp	r3, #100	; 0x64
    2998:	bne	2a08 <coda_time_parts_to_string+0x3f8>
    299c:	ldr	r3, [fp, #-96]	; 0xffffffa0
    29a0:	cmp	r3, #0
    29a4:	ble	29b4 <coda_time_parts_to_string+0x3a4>
    29a8:	ldr	r3, [fp, #-96]	; 0xffffffa0
    29ac:	cmp	r3, #31
    29b0:	ble	29cc <coda_time_parts_to_string+0x3bc>
    29b4:	movw	r1, #0
    29b8:	movt	r1, #0
    29bc:	mvn	r0, #103	; 0x67
    29c0:	bl	0 <coda_set_error>
    29c4:	mvn	r3, #0
    29c8:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    29cc:	ldr	r3, [fp, #-16]
    29d0:	ldr	r2, [fp, #20]
    29d4:	add	r3, r2, r3
    29d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
    29dc:	movw	r1, #0
    29e0:	movt	r1, #0
    29e4:	mov	r0, r3
    29e8:	bl	0 <sprintf>
    29ec:	ldr	r3, [fp, #-12]
    29f0:	add	r3, r3, #2
    29f4:	str	r3, [fp, #-12]
    29f8:	ldr	r3, [fp, #-16]
    29fc:	add	r3, r3, #2
    2a00:	str	r3, [fp, #-16]
    2a04:	b	2e8c <coda_time_parts_to_string+0x87c>
    2a08:	ldr	r3, [fp, #-12]
    2a0c:	ldr	r2, [fp, #16]
    2a10:	add	r3, r2, r3
    2a14:	ldrb	r3, [r3]
    2a18:	cmp	r3, #68	; 0x44
    2a1c:	bne	2af0 <coda_time_parts_to_string+0x4e0>
    2a20:	ldr	r3, [fp, #-12]
    2a24:	add	r3, r3, #1
    2a28:	ldr	r2, [fp, #16]
    2a2c:	add	r3, r2, r3
    2a30:	ldrb	r3, [r3]
    2a34:	cmp	r3, #68	; 0x44
    2a38:	bne	2af0 <coda_time_parts_to_string+0x4e0>
    2a3c:	ldr	r3, [fp, #-12]
    2a40:	add	r3, r3, #2
    2a44:	ldr	r2, [fp, #16]
    2a48:	add	r3, r2, r3
    2a4c:	ldrb	r3, [r3]
    2a50:	cmp	r3, #68	; 0x44
    2a54:	bne	2af0 <coda_time_parts_to_string+0x4e0>
    2a58:	sub	r3, fp, #80	; 0x50
    2a5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
    2a60:	ldr	r1, [fp, #-92]	; 0xffffffa4
    2a64:	ldr	r0, [fp, #-96]	; 0xffffffa0
    2a68:	bl	9c8 <dmy_to_mjd2000>
    2a6c:	mov	r3, r0
    2a70:	cmp	r3, #0
    2a74:	beq	2a80 <coda_time_parts_to_string+0x470>
    2a78:	mvn	r3, #0
    2a7c:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2a80:	sub	r3, fp, #84	; 0x54
    2a84:	ldr	r2, [fp, #-88]	; 0xffffffa8
    2a88:	mov	r1, #1
    2a8c:	mov	r0, #1
    2a90:	bl	9c8 <dmy_to_mjd2000>
    2a94:	mov	r3, r0
    2a98:	cmp	r3, #0
    2a9c:	beq	2aa8 <coda_time_parts_to_string+0x498>
    2aa0:	mvn	r3, #0
    2aa4:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2aa8:	ldr	r3, [fp, #-16]
    2aac:	ldr	r2, [fp, #20]
    2ab0:	add	r0, r2, r3
    2ab4:	ldr	r2, [fp, #-80]	; 0xffffffb0
    2ab8:	ldr	r3, [fp, #-84]	; 0xffffffac
    2abc:	sub	r3, r2, r3
    2ac0:	add	r3, r3, #1
    2ac4:	mov	r2, r3
    2ac8:	movw	r1, #0
    2acc:	movt	r1, #0
    2ad0:	bl	0 <sprintf>
    2ad4:	ldr	r3, [fp, #-12]
    2ad8:	add	r3, r3, #3
    2adc:	str	r3, [fp, #-12]
    2ae0:	ldr	r3, [fp, #-16]
    2ae4:	add	r3, r3, #3
    2ae8:	str	r3, [fp, #-16]
    2aec:	b	2e8c <coda_time_parts_to_string+0x87c>
    2af0:	ldr	r3, [fp, #-12]
    2af4:	ldr	r2, [fp, #16]
    2af8:	add	r3, r2, r3
    2afc:	ldrb	r3, [r3]
    2b00:	cmp	r3, #72	; 0x48
    2b04:	bne	2b90 <coda_time_parts_to_string+0x580>
    2b08:	ldr	r3, [fp, #-12]
    2b0c:	add	r3, r3, #1
    2b10:	ldr	r2, [fp, #16]
    2b14:	add	r3, r2, r3
    2b18:	ldrb	r3, [r3]
    2b1c:	cmp	r3, #72	; 0x48
    2b20:	bne	2b90 <coda_time_parts_to_string+0x580>
    2b24:	ldr	r3, [fp, #-100]	; 0xffffff9c
    2b28:	cmp	r3, #0
    2b2c:	blt	2b3c <coda_time_parts_to_string+0x52c>
    2b30:	ldr	r3, [fp, #-100]	; 0xffffff9c
    2b34:	cmp	r3, #23
    2b38:	ble	2b54 <coda_time_parts_to_string+0x544>
    2b3c:	movw	r1, #0
    2b40:	movt	r1, #0
    2b44:	mvn	r0, #103	; 0x67
    2b48:	bl	0 <coda_set_error>
    2b4c:	mvn	r3, #0
    2b50:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2b54:	ldr	r3, [fp, #-16]
    2b58:	ldr	r2, [fp, #20]
    2b5c:	add	r3, r2, r3
    2b60:	ldr	r2, [fp, #-100]	; 0xffffff9c
    2b64:	movw	r1, #0
    2b68:	movt	r1, #0
    2b6c:	mov	r0, r3
    2b70:	bl	0 <sprintf>
    2b74:	ldr	r3, [fp, #-12]
    2b78:	add	r3, r3, #2
    2b7c:	str	r3, [fp, #-12]
    2b80:	ldr	r3, [fp, #-16]
    2b84:	add	r3, r3, #2
    2b88:	str	r3, [fp, #-16]
    2b8c:	b	2e8c <coda_time_parts_to_string+0x87c>
    2b90:	ldr	r3, [fp, #-12]
    2b94:	ldr	r2, [fp, #16]
    2b98:	add	r3, r2, r3
    2b9c:	ldrb	r3, [r3]
    2ba0:	cmp	r3, #109	; 0x6d
    2ba4:	bne	2c30 <coda_time_parts_to_string+0x620>
    2ba8:	ldr	r3, [fp, #-12]
    2bac:	add	r3, r3, #1
    2bb0:	ldr	r2, [fp, #16]
    2bb4:	add	r3, r2, r3
    2bb8:	ldrb	r3, [r3]
    2bbc:	cmp	r3, #109	; 0x6d
    2bc0:	bne	2c30 <coda_time_parts_to_string+0x620>
    2bc4:	ldr	r3, [fp, #4]
    2bc8:	cmp	r3, #0
    2bcc:	blt	2bdc <coda_time_parts_to_string+0x5cc>
    2bd0:	ldr	r3, [fp, #4]
    2bd4:	cmp	r3, #59	; 0x3b
    2bd8:	ble	2bf4 <coda_time_parts_to_string+0x5e4>
    2bdc:	movw	r1, #0
    2be0:	movt	r1, #0
    2be4:	mvn	r0, #103	; 0x67
    2be8:	bl	0 <coda_set_error>
    2bec:	mvn	r3, #0
    2bf0:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2bf4:	ldr	r3, [fp, #-16]
    2bf8:	ldr	r2, [fp, #20]
    2bfc:	add	r3, r2, r3
    2c00:	ldr	r2, [fp, #4]
    2c04:	movw	r1, #0
    2c08:	movt	r1, #0
    2c0c:	mov	r0, r3
    2c10:	bl	0 <sprintf>
    2c14:	ldr	r3, [fp, #-12]
    2c18:	add	r3, r3, #2
    2c1c:	str	r3, [fp, #-12]
    2c20:	ldr	r3, [fp, #-16]
    2c24:	add	r3, r3, #2
    2c28:	str	r3, [fp, #-16]
    2c2c:	b	2e8c <coda_time_parts_to_string+0x87c>
    2c30:	ldr	r3, [fp, #-12]
    2c34:	ldr	r2, [fp, #16]
    2c38:	add	r3, r2, r3
    2c3c:	ldrb	r3, [r3]
    2c40:	cmp	r3, #115	; 0x73
    2c44:	bne	2cd0 <coda_time_parts_to_string+0x6c0>
    2c48:	ldr	r3, [fp, #-12]
    2c4c:	add	r3, r3, #1
    2c50:	ldr	r2, [fp, #16]
    2c54:	add	r3, r2, r3
    2c58:	ldrb	r3, [r3]
    2c5c:	cmp	r3, #115	; 0x73
    2c60:	bne	2cd0 <coda_time_parts_to_string+0x6c0>
    2c64:	ldr	r3, [fp, #8]
    2c68:	cmp	r3, #0
    2c6c:	blt	2c7c <coda_time_parts_to_string+0x66c>
    2c70:	ldr	r3, [fp, #8]
    2c74:	cmp	r3, #60	; 0x3c
    2c78:	ble	2c94 <coda_time_parts_to_string+0x684>
    2c7c:	movw	r1, #0
    2c80:	movt	r1, #0
    2c84:	mvn	r0, #103	; 0x67
    2c88:	bl	0 <coda_set_error>
    2c8c:	mvn	r3, #0
    2c90:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2c94:	ldr	r3, [fp, #-16]
    2c98:	ldr	r2, [fp, #20]
    2c9c:	add	r3, r2, r3
    2ca0:	ldr	r2, [fp, #8]
    2ca4:	movw	r1, #0
    2ca8:	movt	r1, #0
    2cac:	mov	r0, r3
    2cb0:	bl	0 <sprintf>
    2cb4:	ldr	r3, [fp, #-12]
    2cb8:	add	r3, r3, #2
    2cbc:	str	r3, [fp, #-12]
    2cc0:	ldr	r3, [fp, #-16]
    2cc4:	add	r3, r3, #2
    2cc8:	str	r3, [fp, #-16]
    2ccc:	b	2e8c <coda_time_parts_to_string+0x87c>
    2cd0:	ldr	r3, [fp, #-12]
    2cd4:	ldr	r2, [fp, #16]
    2cd8:	add	r3, r2, r3
    2cdc:	ldrb	r3, [r3]
    2ce0:	cmp	r3, #83	; 0x53
    2ce4:	bne	2dd8 <coda_time_parts_to_string+0x7c8>
    2ce8:	ldr	r3, [fp, #12]
    2cec:	str	r3, [fp, #-20]	; 0xffffffec
    2cf0:	mov	r3, #0
    2cf4:	str	r3, [fp, #-24]	; 0xffffffe8
    2cf8:	ldr	r3, [fp, #12]
    2cfc:	cmp	r3, #0
    2d00:	blt	2d18 <coda_time_parts_to_string+0x708>
    2d04:	ldr	r2, [fp, #12]
    2d08:	movw	r3, #16959	; 0x423f
    2d0c:	movt	r3, #15
    2d10:	cmp	r2, r3
    2d14:	ble	2d48 <coda_time_parts_to_string+0x738>
    2d18:	movw	r1, #0
    2d1c:	movt	r1, #0
    2d20:	mvn	r0, #103	; 0x67
    2d24:	bl	0 <coda_set_error>
    2d28:	mvn	r3, #0
    2d2c:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2d30:	ldr	r3, [fp, #-12]
    2d34:	add	r3, r3, #1
    2d38:	str	r3, [fp, #-12]
    2d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d40:	add	r3, r3, #1
    2d44:	str	r3, [fp, #-24]	; 0xffffffe8
    2d48:	ldr	r3, [fp, #-12]
    2d4c:	ldr	r2, [fp, #16]
    2d50:	add	r3, r2, r3
    2d54:	ldrb	r3, [r3]
    2d58:	cmp	r3, #83	; 0x53
    2d5c:	beq	2d30 <coda_time_parts_to_string+0x720>
    2d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d64:	str	r3, [fp, #-28]	; 0xffffffe4
    2d68:	b	2d98 <coda_time_parts_to_string+0x788>
    2d6c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2d70:	movw	r3, #26215	; 0x6667
    2d74:	movt	r3, #26214	; 0x6666
    2d78:	smull	r1, r3, r3, r2
    2d7c:	asr	r1, r3, #2
    2d80:	asr	r3, r2, #31
    2d84:	sub	r3, r1, r3
    2d88:	str	r3, [fp, #-20]	; 0xffffffec
    2d8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2d90:	add	r3, r3, #1
    2d94:	str	r3, [fp, #-28]	; 0xffffffe4
    2d98:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2d9c:	cmp	r3, #5
    2da0:	ble	2d6c <coda_time_parts_to_string+0x75c>
    2da4:	ldr	r3, [fp, #-16]
    2da8:	ldr	r2, [fp, #20]
    2dac:	add	r0, r2, r3
    2db0:	ldr	r3, [fp, #-20]	; 0xffffffec
    2db4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	bl	0 <sprintf>
    2dc4:	ldr	r2, [fp, #-16]
    2dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2dcc:	add	r3, r2, r3
    2dd0:	str	r3, [fp, #-16]
    2dd4:	b	2e8c <coda_time_parts_to_string+0x87c>
    2dd8:	ldr	r3, [fp, #-12]
    2ddc:	ldr	r2, [fp, #16]
    2de0:	add	r3, r2, r3
    2de4:	ldrb	r3, [r3]
    2de8:	cmp	r3, #64	; 0x40
    2dec:	bls	2e08 <coda_time_parts_to_string+0x7f8>
    2df0:	ldr	r3, [fp, #-12]
    2df4:	ldr	r2, [fp, #16]
    2df8:	add	r3, r2, r3
    2dfc:	ldrb	r3, [r3]
    2e00:	cmp	r3, #90	; 0x5a
    2e04:	bls	2e38 <coda_time_parts_to_string+0x828>
    2e08:	ldr	r3, [fp, #-12]
    2e0c:	ldr	r2, [fp, #16]
    2e10:	add	r3, r2, r3
    2e14:	ldrb	r3, [r3]
    2e18:	cmp	r3, #96	; 0x60
    2e1c:	bls	2e54 <coda_time_parts_to_string+0x844>
    2e20:	ldr	r3, [fp, #-12]
    2e24:	ldr	r2, [fp, #16]
    2e28:	add	r3, r2, r3
    2e2c:	ldrb	r3, [r3]
    2e30:	cmp	r3, #122	; 0x7a
    2e34:	bhi	2e54 <coda_time_parts_to_string+0x844>
    2e38:	ldr	r2, [fp, #16]
    2e3c:	movw	r1, #0
    2e40:	movt	r1, #0
    2e44:	mvn	r0, #102	; 0x66
    2e48:	bl	0 <coda_set_error>
    2e4c:	mvn	r3, #0
    2e50:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2e54:	ldr	r3, [fp, #-12]
    2e58:	ldr	r2, [fp, #16]
    2e5c:	add	r2, r2, r3
    2e60:	ldr	r3, [fp, #-16]
    2e64:	ldr	r1, [fp, #20]
    2e68:	add	r3, r1, r3
    2e6c:	ldrb	r2, [r2]
    2e70:	strb	r2, [r3]
    2e74:	ldr	r3, [fp, #-12]
    2e78:	add	r3, r3, #1
    2e7c:	str	r3, [fp, #-12]
    2e80:	ldr	r3, [fp, #-16]
    2e84:	add	r3, r3, #1
    2e88:	str	r3, [fp, #-16]
    2e8c:	ldr	r3, [fp, #-12]
    2e90:	ldr	r2, [fp, #16]
    2e94:	add	r3, r2, r3
    2e98:	ldrb	r3, [r3]
    2e9c:	cmp	r3, #0
    2ea0:	beq	2ec8 <coda_time_parts_to_string+0x8b8>
    2ea4:	ldr	r3, [fp, #-8]
    2ea8:	cmp	r3, #0
    2eac:	bne	26e4 <coda_time_parts_to_string+0xd4>
    2eb0:	ldr	r3, [fp, #-12]
    2eb4:	ldr	r2, [fp, #16]
    2eb8:	add	r3, r2, r3
    2ebc:	ldrb	r3, [r3]
    2ec0:	cmp	r3, #124	; 0x7c
    2ec4:	bne	26e4 <coda_time_parts_to_string+0xd4>
    2ec8:	ldr	r3, [fp, #-8]
    2ecc:	cmp	r3, #0
    2ed0:	beq	2ef0 <coda_time_parts_to_string+0x8e0>
    2ed4:	ldr	r2, [fp, #16]
    2ed8:	movw	r1, #0
    2edc:	movt	r1, #0
    2ee0:	mvn	r0, #102	; 0x66
    2ee4:	bl	0 <coda_set_error>
    2ee8:	mvn	r3, #0
    2eec:	b	2ef4 <coda_time_parts_to_string+0x8e4>
    2ef0:	mov	r3, #0
    2ef4:	mov	r0, r3
    2ef8:	sub	sp, fp, #4
    2efc:	ldr	fp, [sp]
    2f00:	add	sp, sp, #4
    2f04:	pop	{pc}		; (ldr pc, [sp], #4)

00002f08 <string_to_parts>:
    2f08:	str	fp, [sp, #-8]!
    2f0c:	str	lr, [sp, #4]
    2f10:	add	fp, sp, #4
    2f14:	sub	sp, sp, #40	; 0x28
    2f18:	str	r0, [fp, #-32]	; 0xffffffe0
    2f1c:	str	r1, [fp, #-36]	; 0xffffffdc
    2f20:	str	r2, [fp, #-40]	; 0xffffffd8
    2f24:	str	r3, [fp, #-44]	; 0xffffffd4
    2f28:	mov	r3, #0
    2f2c:	str	r3, [fp, #-8]
    2f30:	mov	r3, #0
    2f34:	str	r3, [fp, #-12]
    2f38:	mov	r3, #0
    2f3c:	str	r3, [fp, #-16]
    2f40:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2f44:	mov	r2, #2000	; 0x7d0
    2f48:	str	r2, [r3]
    2f4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2f50:	mov	r2, #1
    2f54:	str	r2, [r3]
    2f58:	ldr	r3, [fp, #4]
    2f5c:	mov	r2, #1
    2f60:	str	r2, [r3]
    2f64:	ldr	r3, [fp, #8]
    2f68:	mov	r2, #0
    2f6c:	str	r2, [r3]
    2f70:	ldr	r3, [fp, #12]
    2f74:	mov	r2, #0
    2f78:	str	r2, [r3]
    2f7c:	ldr	r3, [fp, #16]
    2f80:	mov	r2, #0
    2f84:	str	r2, [r3]
    2f88:	ldr	r3, [fp, #20]
    2f8c:	mov	r2, #0
    2f90:	str	r2, [r3]
    2f94:	b	39c4 <string_to_parts+0xabc>
    2f98:	ldr	r3, [fp, #-8]
    2f9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2fa0:	add	r3, r2, r3
    2fa4:	ldrb	r3, [r3]
    2fa8:	cmp	r3, #39	; 0x27
    2fac:	bne	2ff0 <string_to_parts+0xe8>
    2fb0:	ldr	r3, [fp, #-8]
    2fb4:	add	r3, r3, #1
    2fb8:	str	r3, [fp, #-8]
    2fbc:	ldr	r3, [fp, #-8]
    2fc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2fc4:	add	r3, r2, r3
    2fc8:	ldrb	r3, [r3]
    2fcc:	cmp	r3, #39	; 0x27
    2fd0:	beq	2ff0 <string_to_parts+0xe8>
    2fd4:	ldr	r3, [fp, #-16]
    2fd8:	cmp	r3, #0
    2fdc:	moveq	r3, #1
    2fe0:	movne	r3, #0
    2fe4:	uxtb	r3, r3
    2fe8:	str	r3, [fp, #-16]
    2fec:	b	39c4 <string_to_parts+0xabc>
    2ff0:	ldr	r3, [fp, #-16]
    2ff4:	cmp	r3, #0
    2ff8:	beq	3060 <string_to_parts+0x158>
    2ffc:	ldr	r3, [fp, #-8]
    3000:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3004:	add	r3, r2, r3
    3008:	ldrb	r2, [r3]
    300c:	ldr	r3, [fp, #-12]
    3010:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3014:	add	r3, r1, r3
    3018:	ldrb	r3, [r3]
    301c:	cmp	r2, r3
    3020:	beq	3044 <string_to_parts+0x13c>
    3024:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3028:	ldr	r2, [fp, #-36]	; 0xffffffdc
    302c:	movw	r1, #0
    3030:	movt	r1, #0
    3034:	mvn	r0, #103	; 0x67
    3038:	bl	0 <coda_set_error>
    303c:	mvn	r3, #0
    3040:	b	3a64 <string_to_parts+0xb5c>
    3044:	ldr	r3, [fp, #-8]
    3048:	add	r3, r3, #1
    304c:	str	r3, [fp, #-8]
    3050:	ldr	r3, [fp, #-12]
    3054:	add	r3, r3, #1
    3058:	str	r3, [fp, #-12]
    305c:	b	39c4 <string_to_parts+0xabc>
    3060:	ldr	r3, [fp, #-8]
    3064:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3068:	add	r3, r2, r3
    306c:	ldrb	r3, [r3]
    3070:	cmp	r3, #121	; 0x79
    3074:	bne	317c <string_to_parts+0x274>
    3078:	ldr	r3, [fp, #-8]
    307c:	add	r3, r3, #1
    3080:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3084:	add	r3, r2, r3
    3088:	ldrb	r3, [r3]
    308c:	cmp	r3, #121	; 0x79
    3090:	bne	317c <string_to_parts+0x274>
    3094:	ldr	r3, [fp, #-8]
    3098:	add	r3, r3, #2
    309c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    30a0:	add	r3, r2, r3
    30a4:	ldrb	r3, [r3]
    30a8:	cmp	r3, #121	; 0x79
    30ac:	bne	317c <string_to_parts+0x274>
    30b0:	ldr	r3, [fp, #-8]
    30b4:	add	r3, r3, #3
    30b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    30bc:	add	r3, r2, r3
    30c0:	ldrb	r3, [r3]
    30c4:	cmp	r3, #121	; 0x79
    30c8:	bne	317c <string_to_parts+0x274>
    30cc:	ldr	r3, [fp, #-8]
    30d0:	add	r3, r3, #4
    30d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    30d8:	add	r3, r2, r3
    30dc:	ldrb	r3, [r3]
    30e0:	cmp	r3, #42	; 0x2a
    30e4:	moveq	r3, #1
    30e8:	movne	r3, #0
    30ec:	uxtb	r3, r3
    30f0:	str	r3, [fp, #-24]	; 0xffffffe8
    30f4:	ldr	r3, [fp, #-12]
    30f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    30fc:	add	r0, r2, r3
    3100:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3104:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3108:	mov	r1, #4
    310c:	bl	280 <parse_integer>
    3110:	mov	r3, r0
    3114:	cmp	r3, #0
    3118:	beq	313c <string_to_parts+0x234>
    311c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3120:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3124:	movw	r1, #0
    3128:	movt	r1, #0
    312c:	mvn	r0, #103	; 0x67
    3130:	bl	0 <coda_set_error>
    3134:	mvn	r3, #0
    3138:	b	3a64 <string_to_parts+0xb5c>
    313c:	ldr	r3, [fp, #-8]
    3140:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3144:	add	r3, r2, r3
    3148:	ldrb	r3, [r3]
    314c:	cmp	r3, #42	; 0x2a
    3150:	bne	315c <string_to_parts+0x254>
    3154:	mov	r3, #5
    3158:	b	3160 <string_to_parts+0x258>
    315c:	mov	r3, #4
    3160:	ldr	r2, [fp, #-8]
    3164:	add	r3, r2, r3
    3168:	str	r3, [fp, #-8]
    316c:	ldr	r3, [fp, #-12]
    3170:	add	r3, r3, #4
    3174:	str	r3, [fp, #-12]
    3178:	b	39c4 <string_to_parts+0xabc>
    317c:	ldr	r3, [fp, #-8]
    3180:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3184:	add	r3, r2, r3
    3188:	ldrb	r3, [r3]
    318c:	cmp	r3, #77	; 0x4d
    3190:	bne	32ec <string_to_parts+0x3e4>
    3194:	ldr	r3, [fp, #-8]
    3198:	add	r3, r3, #1
    319c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    31a0:	add	r3, r2, r3
    31a4:	ldrb	r3, [r3]
    31a8:	cmp	r3, #77	; 0x4d
    31ac:	bne	32ec <string_to_parts+0x3e4>
    31b0:	ldr	r3, [fp, #-8]
    31b4:	add	r3, r3, #2
    31b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    31bc:	add	r3, r2, r3
    31c0:	ldrb	r3, [r3]
    31c4:	cmp	r3, #77	; 0x4d
    31c8:	bne	3238 <string_to_parts+0x330>
    31cc:	ldr	r3, [fp, #-12]
    31d0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    31d4:	add	r3, r2, r3
    31d8:	mov	r0, r3
    31dc:	bl	0 <coda_month_to_integer>
    31e0:	mov	r2, r0
    31e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    31e8:	str	r2, [r3]
    31ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
    31f0:	ldr	r3, [r3]
    31f4:	cmn	r3, #1
    31f8:	bne	321c <string_to_parts+0x314>
    31fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3200:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3204:	movw	r1, #0
    3208:	movt	r1, #0
    320c:	mvn	r0, #103	; 0x67
    3210:	bl	0 <coda_set_error>
    3214:	mvn	r3, #0
    3218:	b	3a64 <string_to_parts+0xb5c>
    321c:	ldr	r3, [fp, #-8]
    3220:	add	r3, r3, #3
    3224:	str	r3, [fp, #-8]
    3228:	ldr	r3, [fp, #-12]
    322c:	add	r3, r3, #3
    3230:	str	r3, [fp, #-12]
    3234:	b	39c4 <string_to_parts+0xabc>
    3238:	ldr	r3, [fp, #-8]
    323c:	add	r3, r3, #2
    3240:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3244:	add	r3, r2, r3
    3248:	ldrb	r3, [r3]
    324c:	cmp	r3, #42	; 0x2a
    3250:	moveq	r3, #1
    3254:	movne	r3, #0
    3258:	uxtb	r3, r3
    325c:	str	r3, [fp, #-24]	; 0xffffffe8
    3260:	ldr	r3, [fp, #-12]
    3264:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3268:	add	r0, r2, r3
    326c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3270:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3274:	mov	r1, #2
    3278:	bl	280 <parse_integer>
    327c:	mov	r3, r0
    3280:	cmp	r3, #0
    3284:	beq	32a8 <string_to_parts+0x3a0>
    3288:	ldr	r3, [fp, #-32]	; 0xffffffe0
    328c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3290:	movw	r1, #0
    3294:	movt	r1, #0
    3298:	mvn	r0, #103	; 0x67
    329c:	bl	0 <coda_set_error>
    32a0:	mvn	r3, #0
    32a4:	b	3a64 <string_to_parts+0xb5c>
    32a8:	ldr	r3, [fp, #-8]
    32ac:	add	r3, r3, #2
    32b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    32b4:	add	r3, r2, r3
    32b8:	ldrb	r3, [r3]
    32bc:	cmp	r3, #42	; 0x2a
    32c0:	bne	32cc <string_to_parts+0x3c4>
    32c4:	mov	r3, #3
    32c8:	b	32d0 <string_to_parts+0x3c8>
    32cc:	mov	r3, #2
    32d0:	ldr	r2, [fp, #-8]
    32d4:	add	r3, r2, r3
    32d8:	str	r3, [fp, #-8]
    32dc:	ldr	r3, [fp, #-12]
    32e0:	add	r3, r3, #2
    32e4:	str	r3, [fp, #-12]
    32e8:	b	39c4 <string_to_parts+0xabc>
    32ec:	ldr	r3, [fp, #-8]
    32f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    32f4:	add	r3, r2, r3
    32f8:	ldrb	r3, [r3]
    32fc:	cmp	r3, #100	; 0x64
    3300:	bne	33d4 <string_to_parts+0x4cc>
    3304:	ldr	r3, [fp, #-8]
    3308:	add	r3, r3, #1
    330c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3310:	add	r3, r2, r3
    3314:	ldrb	r3, [r3]
    3318:	cmp	r3, #100	; 0x64
    331c:	bne	33d4 <string_to_parts+0x4cc>
    3320:	ldr	r3, [fp, #-8]
    3324:	add	r3, r3, #2
    3328:	ldr	r2, [fp, #-32]	; 0xffffffe0
    332c:	add	r3, r2, r3
    3330:	ldrb	r3, [r3]
    3334:	cmp	r3, #42	; 0x2a
    3338:	moveq	r3, #1
    333c:	movne	r3, #0
    3340:	uxtb	r3, r3
    3344:	str	r3, [fp, #-24]	; 0xffffffe8
    3348:	ldr	r3, [fp, #-12]
    334c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3350:	add	r0, r2, r3
    3354:	ldr	r3, [fp, #4]
    3358:	ldr	r2, [fp, #-24]	; 0xffffffe8
    335c:	mov	r1, #2
    3360:	bl	280 <parse_integer>
    3364:	mov	r3, r0
    3368:	cmp	r3, #0
    336c:	beq	3390 <string_to_parts+0x488>
    3370:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3374:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3378:	movw	r1, #0
    337c:	movt	r1, #0
    3380:	mvn	r0, #103	; 0x67
    3384:	bl	0 <coda_set_error>
    3388:	mvn	r3, #0
    338c:	b	3a64 <string_to_parts+0xb5c>
    3390:	ldr	r3, [fp, #-8]
    3394:	add	r3, r3, #2
    3398:	ldr	r2, [fp, #-32]	; 0xffffffe0
    339c:	add	r3, r2, r3
    33a0:	ldrb	r3, [r3]
    33a4:	cmp	r3, #42	; 0x2a
    33a8:	bne	33b4 <string_to_parts+0x4ac>
    33ac:	mov	r3, #3
    33b0:	b	33b8 <string_to_parts+0x4b0>
    33b4:	mov	r3, #2
    33b8:	ldr	r2, [fp, #-8]
    33bc:	add	r3, r2, r3
    33c0:	str	r3, [fp, #-8]
    33c4:	ldr	r3, [fp, #-12]
    33c8:	add	r3, r3, #2
    33cc:	str	r3, [fp, #-12]
    33d0:	b	39c4 <string_to_parts+0xabc>
    33d4:	ldr	r3, [fp, #-8]
    33d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    33dc:	add	r3, r2, r3
    33e0:	ldrb	r3, [r3]
    33e4:	cmp	r3, #68	; 0x44
    33e8:	bne	351c <string_to_parts+0x614>
    33ec:	ldr	r3, [fp, #-8]
    33f0:	add	r3, r3, #1
    33f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    33f8:	add	r3, r2, r3
    33fc:	ldrb	r3, [r3]
    3400:	cmp	r3, #68	; 0x44
    3404:	bne	351c <string_to_parts+0x614>
    3408:	ldr	r3, [fp, #-8]
    340c:	add	r3, r3, #2
    3410:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3414:	add	r3, r2, r3
    3418:	ldrb	r3, [r3]
    341c:	cmp	r3, #68	; 0x44
    3420:	bne	351c <string_to_parts+0x614>
    3424:	ldr	r3, [fp, #-8]
    3428:	add	r3, r3, #3
    342c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3430:	add	r3, r2, r3
    3434:	ldrb	r3, [r3]
    3438:	cmp	r3, #42	; 0x2a
    343c:	moveq	r3, #1
    3440:	movne	r3, #0
    3444:	uxtb	r3, r3
    3448:	str	r3, [fp, #-24]	; 0xffffffe8
    344c:	ldr	r3, [fp, #-12]
    3450:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3454:	add	r0, r2, r3
    3458:	sub	r3, fp, #28
    345c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3460:	mov	r1, #3
    3464:	bl	280 <parse_integer>
    3468:	mov	r3, r0
    346c:	cmp	r3, #0
    3470:	beq	3494 <string_to_parts+0x58c>
    3474:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3478:	ldr	r2, [fp, #-36]	; 0xffffffdc
    347c:	movw	r1, #0
    3480:	movt	r1, #0
    3484:	mvn	r0, #103	; 0x67
    3488:	bl	0 <coda_set_error>
    348c:	mvn	r3, #0
    3490:	b	3a64 <string_to_parts+0xb5c>
    3494:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3498:	ldr	r0, [r3]
    349c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    34a0:	ldr	r3, [fp, #4]
    34a4:	ldr	r2, [fp, #-44]	; 0xffffffd4
    34a8:	bl	1408 <coda_dayofyear_to_month_day>
    34ac:	mov	r3, r0
    34b0:	cmp	r3, #0
    34b4:	beq	34d8 <string_to_parts+0x5d0>
    34b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    34bc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    34c0:	movw	r1, #0
    34c4:	movt	r1, #0
    34c8:	mvn	r0, #103	; 0x67
    34cc:	bl	0 <coda_set_error>
    34d0:	mvn	r3, #0
    34d4:	b	3a64 <string_to_parts+0xb5c>
    34d8:	ldr	r3, [fp, #-8]
    34dc:	add	r3, r3, #3
    34e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    34e4:	add	r3, r2, r3
    34e8:	ldrb	r3, [r3]
    34ec:	cmp	r3, #42	; 0x2a
    34f0:	bne	34fc <string_to_parts+0x5f4>
    34f4:	mov	r3, #4
    34f8:	b	3500 <string_to_parts+0x5f8>
    34fc:	mov	r3, #3
    3500:	ldr	r2, [fp, #-8]
    3504:	add	r3, r2, r3
    3508:	str	r3, [fp, #-8]
    350c:	ldr	r3, [fp, #-12]
    3510:	add	r3, r3, #3
    3514:	str	r3, [fp, #-12]
    3518:	b	39c4 <string_to_parts+0xabc>
    351c:	ldr	r3, [fp, #-8]
    3520:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3524:	add	r3, r2, r3
    3528:	ldrb	r3, [r3]
    352c:	cmp	r3, #72	; 0x48
    3530:	bne	3604 <string_to_parts+0x6fc>
    3534:	ldr	r3, [fp, #-8]
    3538:	add	r3, r3, #1
    353c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3540:	add	r3, r2, r3
    3544:	ldrb	r3, [r3]
    3548:	cmp	r3, #72	; 0x48
    354c:	bne	3604 <string_to_parts+0x6fc>
    3550:	ldr	r3, [fp, #-8]
    3554:	add	r3, r3, #2
    3558:	ldr	r2, [fp, #-32]	; 0xffffffe0
    355c:	add	r3, r2, r3
    3560:	ldrb	r3, [r3]
    3564:	cmp	r3, #42	; 0x2a
    3568:	moveq	r3, #1
    356c:	movne	r3, #0
    3570:	uxtb	r3, r3
    3574:	str	r3, [fp, #-24]	; 0xffffffe8
    3578:	ldr	r3, [fp, #-12]
    357c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3580:	add	r0, r2, r3
    3584:	ldr	r3, [fp, #8]
    3588:	ldr	r2, [fp, #-24]	; 0xffffffe8
    358c:	mov	r1, #2
    3590:	bl	280 <parse_integer>
    3594:	mov	r3, r0
    3598:	cmp	r3, #0
    359c:	beq	35c0 <string_to_parts+0x6b8>
    35a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    35a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    35a8:	movw	r1, #0
    35ac:	movt	r1, #0
    35b0:	mvn	r0, #103	; 0x67
    35b4:	bl	0 <coda_set_error>
    35b8:	mvn	r3, #0
    35bc:	b	3a64 <string_to_parts+0xb5c>
    35c0:	ldr	r3, [fp, #-8]
    35c4:	add	r3, r3, #2
    35c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    35cc:	add	r3, r2, r3
    35d0:	ldrb	r3, [r3]
    35d4:	cmp	r3, #42	; 0x2a
    35d8:	bne	35e4 <string_to_parts+0x6dc>
    35dc:	mov	r3, #3
    35e0:	b	35e8 <string_to_parts+0x6e0>
    35e4:	mov	r3, #2
    35e8:	ldr	r2, [fp, #-8]
    35ec:	add	r3, r2, r3
    35f0:	str	r3, [fp, #-8]
    35f4:	ldr	r3, [fp, #-12]
    35f8:	add	r3, r3, #2
    35fc:	str	r3, [fp, #-12]
    3600:	b	39c4 <string_to_parts+0xabc>
    3604:	ldr	r3, [fp, #-8]
    3608:	ldr	r2, [fp, #-32]	; 0xffffffe0
    360c:	add	r3, r2, r3
    3610:	ldrb	r3, [r3]
    3614:	cmp	r3, #109	; 0x6d
    3618:	bne	36ec <string_to_parts+0x7e4>
    361c:	ldr	r3, [fp, #-8]
    3620:	add	r3, r3, #1
    3624:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3628:	add	r3, r2, r3
    362c:	ldrb	r3, [r3]
    3630:	cmp	r3, #109	; 0x6d
    3634:	bne	36ec <string_to_parts+0x7e4>
    3638:	ldr	r3, [fp, #-8]
    363c:	add	r3, r3, #2
    3640:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3644:	add	r3, r2, r3
    3648:	ldrb	r3, [r3]
    364c:	cmp	r3, #42	; 0x2a
    3650:	moveq	r3, #1
    3654:	movne	r3, #0
    3658:	uxtb	r3, r3
    365c:	str	r3, [fp, #-24]	; 0xffffffe8
    3660:	ldr	r3, [fp, #-12]
    3664:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3668:	add	r0, r2, r3
    366c:	ldr	r3, [fp, #12]
    3670:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3674:	mov	r1, #2
    3678:	bl	280 <parse_integer>
    367c:	mov	r3, r0
    3680:	cmp	r3, #0
    3684:	beq	36a8 <string_to_parts+0x7a0>
    3688:	ldr	r3, [fp, #-32]	; 0xffffffe0
    368c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3690:	movw	r1, #0
    3694:	movt	r1, #0
    3698:	mvn	r0, #103	; 0x67
    369c:	bl	0 <coda_set_error>
    36a0:	mvn	r3, #0
    36a4:	b	3a64 <string_to_parts+0xb5c>
    36a8:	ldr	r3, [fp, #-8]
    36ac:	add	r3, r3, #2
    36b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    36b4:	add	r3, r2, r3
    36b8:	ldrb	r3, [r3]
    36bc:	cmp	r3, #42	; 0x2a
    36c0:	bne	36cc <string_to_parts+0x7c4>
    36c4:	mov	r3, #3
    36c8:	b	36d0 <string_to_parts+0x7c8>
    36cc:	mov	r3, #2
    36d0:	ldr	r2, [fp, #-8]
    36d4:	add	r3, r2, r3
    36d8:	str	r3, [fp, #-8]
    36dc:	ldr	r3, [fp, #-12]
    36e0:	add	r3, r3, #2
    36e4:	str	r3, [fp, #-12]
    36e8:	b	39c4 <string_to_parts+0xabc>
    36ec:	ldr	r3, [fp, #-8]
    36f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    36f4:	add	r3, r2, r3
    36f8:	ldrb	r3, [r3]
    36fc:	cmp	r3, #115	; 0x73
    3700:	bne	37d4 <string_to_parts+0x8cc>
    3704:	ldr	r3, [fp, #-8]
    3708:	add	r3, r3, #1
    370c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3710:	add	r3, r2, r3
    3714:	ldrb	r3, [r3]
    3718:	cmp	r3, #115	; 0x73
    371c:	bne	37d4 <string_to_parts+0x8cc>
    3720:	ldr	r3, [fp, #-8]
    3724:	add	r3, r3, #2
    3728:	ldr	r2, [fp, #-32]	; 0xffffffe0
    372c:	add	r3, r2, r3
    3730:	ldrb	r3, [r3]
    3734:	cmp	r3, #42	; 0x2a
    3738:	moveq	r3, #1
    373c:	movne	r3, #0
    3740:	uxtb	r3, r3
    3744:	str	r3, [fp, #-24]	; 0xffffffe8
    3748:	ldr	r3, [fp, #-12]
    374c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3750:	add	r0, r2, r3
    3754:	ldr	r3, [fp, #16]
    3758:	ldr	r2, [fp, #-24]	; 0xffffffe8
    375c:	mov	r1, #2
    3760:	bl	280 <parse_integer>
    3764:	mov	r3, r0
    3768:	cmp	r3, #0
    376c:	beq	3790 <string_to_parts+0x888>
    3770:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3774:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3778:	movw	r1, #0
    377c:	movt	r1, #0
    3780:	mvn	r0, #103	; 0x67
    3784:	bl	0 <coda_set_error>
    3788:	mvn	r3, #0
    378c:	b	3a64 <string_to_parts+0xb5c>
    3790:	ldr	r3, [fp, #-8]
    3794:	add	r3, r3, #2
    3798:	ldr	r2, [fp, #-32]	; 0xffffffe0
    379c:	add	r3, r2, r3
    37a0:	ldrb	r3, [r3]
    37a4:	cmp	r3, #42	; 0x2a
    37a8:	bne	37b4 <string_to_parts+0x8ac>
    37ac:	mov	r3, #3
    37b0:	b	37b8 <string_to_parts+0x8b0>
    37b4:	mov	r3, #2
    37b8:	ldr	r2, [fp, #-8]
    37bc:	add	r3, r2, r3
    37c0:	str	r3, [fp, #-8]
    37c4:	ldr	r3, [fp, #-12]
    37c8:	add	r3, r3, #2
    37cc:	str	r3, [fp, #-12]
    37d0:	b	39c4 <string_to_parts+0xabc>
    37d4:	ldr	r3, [fp, #-8]
    37d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    37dc:	add	r3, r2, r3
    37e0:	ldrb	r3, [r3]
    37e4:	cmp	r3, #83	; 0x53
    37e8:	bne	38d0 <string_to_parts+0x9c8>
    37ec:	mov	r3, #0
    37f0:	str	r3, [fp, #-20]	; 0xffffffec
    37f4:	b	3810 <string_to_parts+0x908>
    37f8:	ldr	r3, [fp, #-8]
    37fc:	add	r3, r3, #1
    3800:	str	r3, [fp, #-8]
    3804:	ldr	r3, [fp, #-20]	; 0xffffffec
    3808:	add	r3, r3, #1
    380c:	str	r3, [fp, #-20]	; 0xffffffec
    3810:	ldr	r3, [fp, #-8]
    3814:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3818:	add	r3, r2, r3
    381c:	ldrb	r3, [r3]
    3820:	cmp	r3, #83	; 0x53
    3824:	beq	37f8 <string_to_parts+0x8f0>
    3828:	ldr	r3, [fp, #-12]
    382c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3830:	add	r0, r2, r3
    3834:	ldr	r3, [fp, #-20]	; 0xffffffec
    3838:	cmp	r3, #6
    383c:	movlt	r1, r3
    3840:	movge	r1, #6
    3844:	ldr	r3, [fp, #20]
    3848:	mov	r2, #0
    384c:	bl	280 <parse_integer>
    3850:	mov	r3, r0
    3854:	cmp	r3, #0
    3858:	beq	387c <string_to_parts+0x974>
    385c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3860:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3864:	movw	r1, #0
    3868:	movt	r1, #0
    386c:	mvn	r0, #103	; 0x67
    3870:	bl	0 <coda_set_error>
    3874:	mvn	r3, #0
    3878:	b	3a64 <string_to_parts+0xb5c>
    387c:	ldr	r2, [fp, #-12]
    3880:	ldr	r3, [fp, #-20]	; 0xffffffec
    3884:	add	r3, r2, r3
    3888:	str	r3, [fp, #-12]
    388c:	b	38c0 <string_to_parts+0x9b8>
    3890:	ldr	r3, [fp, #20]
    3894:	ldr	r2, [r3]
    3898:	mov	r3, r2
    389c:	lsl	r3, r3, #2
    38a0:	add	r3, r3, r2
    38a4:	lsl	r3, r3, #1
    38a8:	mov	r2, r3
    38ac:	ldr	r3, [fp, #20]
    38b0:	str	r2, [r3]
    38b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    38b8:	add	r3, r3, #1
    38bc:	str	r3, [fp, #-20]	; 0xffffffec
    38c0:	ldr	r3, [fp, #-20]	; 0xffffffec
    38c4:	cmp	r3, #5
    38c8:	ble	3890 <string_to_parts+0x988>
    38cc:	b	39c4 <string_to_parts+0xabc>
    38d0:	ldr	r3, [fp, #-8]
    38d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    38d8:	add	r3, r2, r3
    38dc:	ldrb	r3, [r3]
    38e0:	cmp	r3, #64	; 0x40
    38e4:	bls	3900 <string_to_parts+0x9f8>
    38e8:	ldr	r3, [fp, #-8]
    38ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    38f0:	add	r3, r2, r3
    38f4:	ldrb	r3, [r3]
    38f8:	cmp	r3, #90	; 0x5a
    38fc:	bls	3948 <string_to_parts+0xa40>
    3900:	ldr	r3, [fp, #-8]
    3904:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3908:	add	r3, r2, r3
    390c:	ldrb	r3, [r3]
    3910:	cmp	r3, #96	; 0x60
    3914:	bls	3930 <string_to_parts+0xa28>
    3918:	ldr	r3, [fp, #-8]
    391c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3920:	add	r3, r2, r3
    3924:	ldrb	r3, [r3]
    3928:	cmp	r3, #122	; 0x7a
    392c:	bls	3948 <string_to_parts+0xa40>
    3930:	ldr	r3, [fp, #-8]
    3934:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3938:	add	r3, r2, r3
    393c:	ldrb	r3, [r3]
    3940:	cmp	r3, #42	; 0x2a
    3944:	bne	3964 <string_to_parts+0xa5c>
    3948:	ldr	r2, [fp, #-32]	; 0xffffffe0
    394c:	movw	r1, #0
    3950:	movt	r1, #0
    3954:	mvn	r0, #102	; 0x66
    3958:	bl	0 <coda_set_error>
    395c:	mvn	r3, #0
    3960:	b	3a64 <string_to_parts+0xb5c>
    3964:	ldr	r3, [fp, #-8]
    3968:	ldr	r2, [fp, #-32]	; 0xffffffe0
    396c:	add	r3, r2, r3
    3970:	ldrb	r2, [r3]
    3974:	ldr	r3, [fp, #-12]
    3978:	ldr	r1, [fp, #-36]	; 0xffffffdc
    397c:	add	r3, r1, r3
    3980:	ldrb	r3, [r3]
    3984:	cmp	r2, r3
    3988:	beq	39ac <string_to_parts+0xaa4>
    398c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3990:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3994:	movw	r1, #0
    3998:	movt	r1, #0
    399c:	mvn	r0, #103	; 0x67
    39a0:	bl	0 <coda_set_error>
    39a4:	mvn	r3, #0
    39a8:	b	3a64 <string_to_parts+0xb5c>
    39ac:	ldr	r3, [fp, #-8]
    39b0:	add	r3, r3, #1
    39b4:	str	r3, [fp, #-8]
    39b8:	ldr	r3, [fp, #-12]
    39bc:	add	r3, r3, #1
    39c0:	str	r3, [fp, #-12]
    39c4:	ldr	r3, [fp, #-8]
    39c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    39cc:	add	r3, r2, r3
    39d0:	ldrb	r3, [r3]
    39d4:	cmp	r3, #0
    39d8:	beq	3a00 <string_to_parts+0xaf8>
    39dc:	ldr	r3, [fp, #-16]
    39e0:	cmp	r3, #0
    39e4:	bne	2f98 <string_to_parts+0x90>
    39e8:	ldr	r3, [fp, #-8]
    39ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    39f0:	add	r3, r2, r3
    39f4:	ldrb	r3, [r3]
    39f8:	cmp	r3, #124	; 0x7c
    39fc:	bne	2f98 <string_to_parts+0x90>
    3a00:	ldr	r3, [fp, #-16]
    3a04:	cmp	r3, #0
    3a08:	beq	3a28 <string_to_parts+0xb20>
    3a0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3a10:	movw	r1, #0
    3a14:	movt	r1, #0
    3a18:	mvn	r0, #102	; 0x66
    3a1c:	bl	0 <coda_set_error>
    3a20:	mvn	r3, #0
    3a24:	b	3a64 <string_to_parts+0xb5c>
    3a28:	ldr	r3, [fp, #-12]
    3a2c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3a30:	add	r3, r2, r3
    3a34:	ldrb	r3, [r3]
    3a38:	cmp	r3, #0
    3a3c:	beq	3a60 <string_to_parts+0xb58>
    3a40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3a44:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3a48:	movw	r1, #0
    3a4c:	movt	r1, #0
    3a50:	mvn	r0, #103	; 0x67
    3a54:	bl	0 <coda_set_error>
    3a58:	mvn	r3, #0
    3a5c:	b	3a64 <string_to_parts+0xb5c>
    3a60:	mov	r3, #0
    3a64:	mov	r0, r3
    3a68:	sub	sp, fp, #4
    3a6c:	ldr	fp, [sp]
    3a70:	add	sp, sp, #4
    3a74:	pop	{pc}		; (ldr pc, [sp], #4)

00003a78 <coda_time_string_to_parts>:
    3a78:	str	fp, [sp, #-8]!
    3a7c:	str	lr, [sp, #4]
    3a80:	add	fp, sp, #4
    3a84:	sub	sp, sp, #56	; 0x38
    3a88:	str	r0, [fp, #-24]	; 0xffffffe8
    3a8c:	str	r1, [fp, #-28]	; 0xffffffe4
    3a90:	str	r2, [fp, #-32]	; 0xffffffe0
    3a94:	str	r3, [fp, #-36]	; 0xffffffdc
    3a98:	mov	r3, #0
    3a9c:	str	r3, [fp, #-8]
    3aa0:	mov	r3, #0
    3aa4:	str	r3, [fp, #-12]
    3aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3aac:	cmp	r3, #0
    3ab0:	bne	3ad8 <coda_time_string_to_parts+0x60>
    3ab4:	movw	r3, #1468	; 0x5bc
    3ab8:	movw	r2, #0
    3abc:	movt	r2, #0
    3ac0:	movw	r1, #0
    3ac4:	movt	r1, #0
    3ac8:	mvn	r0, #99	; 0x63
    3acc:	bl	0 <coda_set_error>
    3ad0:	mvn	r3, #0
    3ad4:	b	3d7c <coda_time_string_to_parts+0x304>
    3ad8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    3adc:	cmp	r3, #0
    3ae0:	bne	3b08 <coda_time_string_to_parts+0x90>
    3ae4:	movw	r3, #1473	; 0x5c1
    3ae8:	movw	r2, #0
    3aec:	movt	r2, #0
    3af0:	movw	r1, #0
    3af4:	movt	r1, #0
    3af8:	mvn	r0, #99	; 0x63
    3afc:	bl	0 <coda_set_error>
    3b00:	mvn	r3, #0
    3b04:	b	3d7c <coda_time_string_to_parts+0x304>
    3b08:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3b0c:	cmp	r3, #0
    3b10:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b14:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3b18:	cmp	r3, #0
    3b1c:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b20:	ldr	r3, [fp, #4]
    3b24:	cmp	r3, #0
    3b28:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b2c:	ldr	r3, [fp, #8]
    3b30:	cmp	r3, #0
    3b34:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b38:	ldr	r3, [fp, #12]
    3b3c:	cmp	r3, #0
    3b40:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b44:	ldr	r3, [fp, #16]
    3b48:	cmp	r3, #0
    3b4c:	beq	3b5c <coda_time_string_to_parts+0xe4>
    3b50:	ldr	r3, [fp, #20]
    3b54:	cmp	r3, #0
    3b58:	bne	3bbc <coda_time_string_to_parts+0x144>
    3b5c:	movw	r3, #1479	; 0x5c7
    3b60:	movw	r2, #0
    3b64:	movt	r2, #0
    3b68:	movw	r1, #0
    3b6c:	movt	r1, #0
    3b70:	mvn	r0, #99	; 0x63
    3b74:	bl	0 <coda_set_error>
    3b78:	mvn	r3, #0
    3b7c:	b	3d7c <coda_time_string_to_parts+0x304>
    3b80:	ldr	r3, [fp, #-12]
    3b84:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3b88:	add	r3, r2, r3
    3b8c:	ldrb	r3, [r3]
    3b90:	cmp	r3, #39	; 0x27
    3b94:	bne	3bb0 <coda_time_string_to_parts+0x138>
    3b98:	ldr	r3, [fp, #-8]
    3b9c:	cmp	r3, #0
    3ba0:	moveq	r3, #1
    3ba4:	movne	r3, #0
    3ba8:	uxtb	r3, r3
    3bac:	str	r3, [fp, #-8]
    3bb0:	ldr	r3, [fp, #-12]
    3bb4:	add	r3, r3, #1
    3bb8:	str	r3, [fp, #-12]
    3bbc:	ldr	r3, [fp, #-12]
    3bc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3bc4:	add	r3, r2, r3
    3bc8:	ldrb	r3, [r3]
    3bcc:	cmp	r3, #0
    3bd0:	beq	3bf8 <coda_time_string_to_parts+0x180>
    3bd4:	ldr	r3, [fp, #-8]
    3bd8:	cmp	r3, #0
    3bdc:	bne	3b80 <coda_time_string_to_parts+0x108>
    3be0:	ldr	r3, [fp, #-12]
    3be4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3be8:	add	r3, r2, r3
    3bec:	ldrb	r3, [r3]
    3bf0:	cmp	r3, #124	; 0x7c
    3bf4:	bne	3b80 <coda_time_string_to_parts+0x108>
    3bf8:	ldr	r3, [fp, #-12]
    3bfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3c00:	add	r3, r2, r3
    3c04:	ldrb	r3, [r3]
    3c08:	cmp	r3, #124	; 0x7c
    3c0c:	bne	3d3c <coda_time_string_to_parts+0x2c4>
    3c10:	mov	r3, #0
    3c14:	str	r3, [fp, #-16]
    3c18:	ldr	r3, [fp, #-16]
    3c1c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3c20:	add	r0, r2, r3
    3c24:	ldr	r3, [fp, #20]
    3c28:	str	r3, [sp, #16]
    3c2c:	ldr	r3, [fp, #16]
    3c30:	str	r3, [sp, #12]
    3c34:	ldr	r3, [fp, #12]
    3c38:	str	r3, [sp, #8]
    3c3c:	ldr	r3, [fp, #8]
    3c40:	str	r3, [sp, #4]
    3c44:	ldr	r3, [fp, #4]
    3c48:	str	r3, [sp]
    3c4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3c50:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3c54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3c58:	bl	2f08 <string_to_parts>
    3c5c:	mov	r3, r0
    3c60:	cmp	r3, #0
    3c64:	bne	3c70 <coda_time_string_to_parts+0x1f8>
    3c68:	mov	r3, #0
    3c6c:	b	3d7c <coda_time_string_to_parts+0x304>
    3c70:	ldr	r3, [fp, #-12]
    3c74:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3c78:	add	r3, r2, r3
    3c7c:	ldrb	r3, [r3]
    3c80:	cmp	r3, #0
    3c84:	bne	3ca8 <coda_time_string_to_parts+0x230>
    3c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c8c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    3c90:	movw	r1, #0
    3c94:	movt	r1, #0
    3c98:	mvn	r0, #103	; 0x67
    3c9c:	bl	0 <coda_set_error>
    3ca0:	mvn	r3, #0
    3ca4:	b	3d7c <coda_time_string_to_parts+0x304>
    3ca8:	ldr	r3, [fp, #-12]
    3cac:	add	r3, r3, #1
    3cb0:	str	r3, [fp, #-12]
    3cb4:	ldr	r3, [fp, #-12]
    3cb8:	str	r3, [fp, #-16]
    3cbc:	b	3cfc <coda_time_string_to_parts+0x284>
    3cc0:	ldr	r3, [fp, #-12]
    3cc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3cc8:	add	r3, r2, r3
    3ccc:	ldrb	r3, [r3]
    3cd0:	cmp	r3, #39	; 0x27
    3cd4:	bne	3cf0 <coda_time_string_to_parts+0x278>
    3cd8:	ldr	r3, [fp, #-8]
    3cdc:	cmp	r3, #0
    3ce0:	moveq	r3, #1
    3ce4:	movne	r3, #0
    3ce8:	uxtb	r3, r3
    3cec:	str	r3, [fp, #-8]
    3cf0:	ldr	r3, [fp, #-12]
    3cf4:	add	r3, r3, #1
    3cf8:	str	r3, [fp, #-12]
    3cfc:	ldr	r3, [fp, #-12]
    3d00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d04:	add	r3, r2, r3
    3d08:	ldrb	r3, [r3]
    3d0c:	cmp	r3, #0
    3d10:	beq	3c18 <coda_time_string_to_parts+0x1a0>
    3d14:	ldr	r3, [fp, #-8]
    3d18:	cmp	r3, #0
    3d1c:	bne	3cc0 <coda_time_string_to_parts+0x248>
    3d20:	ldr	r3, [fp, #-12]
    3d24:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3d28:	add	r3, r2, r3
    3d2c:	ldrb	r3, [r3]
    3d30:	cmp	r3, #124	; 0x7c
    3d34:	bne	3cc0 <coda_time_string_to_parts+0x248>
    3d38:	b	3c18 <coda_time_string_to_parts+0x1a0>
    3d3c:	ldr	r3, [fp, #20]
    3d40:	str	r3, [sp, #16]
    3d44:	ldr	r3, [fp, #16]
    3d48:	str	r3, [sp, #12]
    3d4c:	ldr	r3, [fp, #12]
    3d50:	str	r3, [sp, #8]
    3d54:	ldr	r3, [fp, #8]
    3d58:	str	r3, [sp, #4]
    3d5c:	ldr	r3, [fp, #4]
    3d60:	str	r3, [sp]
    3d64:	ldr	r3, [fp, #-36]	; 0xffffffdc
    3d68:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3d6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3d74:	bl	2f08 <string_to_parts>
    3d78:	mov	r3, r0
    3d7c:	mov	r0, r3
    3d80:	sub	sp, fp, #4
    3d84:	ldr	fp, [sp]
    3d88:	add	sp, sp, #4
    3d8c:	pop	{pc}		; (ldr pc, [sp], #4)

00003d90 <coda_time_double_to_string>:
    3d90:	strd	r4, [sp, #-16]!
    3d94:	str	fp, [sp, #8]
    3d98:	str	lr, [sp, #12]
    3d9c:	add	fp, sp, #12
    3da0:	sub	sp, sp, #72	; 0x48
    3da4:	vstr	d0, [fp, #-52]	; 0xffffffcc
    3da8:	str	r0, [fp, #-56]	; 0xffffffc8
    3dac:	str	r1, [fp, #-60]	; 0xffffffc4
    3db0:	sub	ip, fp, #28
    3db4:	sub	r2, fp, #24
    3db8:	sub	r1, fp, #20
    3dbc:	sub	r0, fp, #16
    3dc0:	sub	r3, fp, #40	; 0x28
    3dc4:	str	r3, [sp, #8]
    3dc8:	sub	r3, fp, #36	; 0x24
    3dcc:	str	r3, [sp, #4]
    3dd0:	sub	r3, fp, #32
    3dd4:	str	r3, [sp]
    3dd8:	mov	r3, ip
    3ddc:	vldr	d0, [fp, #-52]	; 0xffffffcc
    3de0:	bl	1d50 <coda_time_double_to_parts>
    3de4:	mov	r3, r0
    3de8:	cmp	r3, #0
    3dec:	beq	3df8 <coda_time_double_to_string+0x68>
    3df0:	mvn	r3, #0
    3df4:	b	3e48 <coda_time_double_to_string+0xb8>
    3df8:	ldr	ip, [fp, #-16]
    3dfc:	ldr	lr, [fp, #-20]	; 0xffffffec
    3e00:	ldr	r4, [fp, #-24]	; 0xffffffe8
    3e04:	ldr	r5, [fp, #-28]	; 0xffffffe4
    3e08:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3e0c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3e10:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3e14:	ldr	r0, [fp, #-60]	; 0xffffffc4
    3e18:	str	r0, [sp, #16]
    3e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3e20:	str	r0, [sp, #12]
    3e24:	str	r1, [sp, #8]
    3e28:	str	r2, [sp, #4]
    3e2c:	str	r3, [sp]
    3e30:	mov	r3, r5
    3e34:	mov	r2, r4
    3e38:	mov	r1, lr
    3e3c:	mov	r0, ip
    3e40:	bl	2610 <coda_time_parts_to_string>
    3e44:	mov	r3, r0
    3e48:	mov	r0, r3
    3e4c:	sub	sp, fp, #12
    3e50:	ldrd	r4, [sp]
    3e54:	ldr	fp, [sp, #8]
    3e58:	add	sp, sp, #12
    3e5c:	pop	{pc}		; (ldr pc, [sp], #4)

00003e60 <coda_time_double_to_string_utc>:
    3e60:	strd	r4, [sp, #-16]!
    3e64:	str	fp, [sp, #8]
    3e68:	str	lr, [sp, #12]
    3e6c:	add	fp, sp, #12
    3e70:	sub	sp, sp, #72	; 0x48
    3e74:	vstr	d0, [fp, #-52]	; 0xffffffcc
    3e78:	str	r0, [fp, #-56]	; 0xffffffc8
    3e7c:	str	r1, [fp, #-60]	; 0xffffffc4
    3e80:	sub	ip, fp, #28
    3e84:	sub	r2, fp, #24
    3e88:	sub	r1, fp, #20
    3e8c:	sub	r0, fp, #16
    3e90:	sub	r3, fp, #40	; 0x28
    3e94:	str	r3, [sp, #8]
    3e98:	sub	r3, fp, #36	; 0x24
    3e9c:	str	r3, [sp, #4]
    3ea0:	sub	r3, fp, #32
    3ea4:	str	r3, [sp]
    3ea8:	mov	r3, ip
    3eac:	vldr	d0, [fp, #-52]	; 0xffffffcc
    3eb0:	bl	1fb0 <coda_time_double_to_parts_utc>
    3eb4:	mov	r3, r0
    3eb8:	cmp	r3, #0
    3ebc:	beq	3ec8 <coda_time_double_to_string_utc+0x68>
    3ec0:	mvn	r3, #0
    3ec4:	b	3f18 <coda_time_double_to_string_utc+0xb8>
    3ec8:	ldr	ip, [fp, #-16]
    3ecc:	ldr	lr, [fp, #-20]	; 0xffffffec
    3ed0:	ldr	r4, [fp, #-24]	; 0xffffffe8
    3ed4:	ldr	r5, [fp, #-28]	; 0xffffffe4
    3ed8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3edc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3ee0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3ee4:	ldr	r0, [fp, #-60]	; 0xffffffc4
    3ee8:	str	r0, [sp, #16]
    3eec:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3ef0:	str	r0, [sp, #12]
    3ef4:	str	r1, [sp, #8]
    3ef8:	str	r2, [sp, #4]
    3efc:	str	r3, [sp]
    3f00:	mov	r3, r5
    3f04:	mov	r2, r4
    3f08:	mov	r1, lr
    3f0c:	mov	r0, ip
    3f10:	bl	2610 <coda_time_parts_to_string>
    3f14:	mov	r3, r0
    3f18:	mov	r0, r3
    3f1c:	sub	sp, fp, #12
    3f20:	ldrd	r4, [sp]
    3f24:	ldr	fp, [sp, #8]
    3f28:	add	sp, sp, #12
    3f2c:	pop	{pc}		; (ldr pc, [sp], #4)

00003f30 <coda_time_string_to_double>:
    3f30:	strd	r4, [sp, #-16]!
    3f34:	str	fp, [sp, #8]
    3f38:	str	lr, [sp, #12]
    3f3c:	add	fp, sp, #12
    3f40:	sub	sp, sp, #72	; 0x48
    3f44:	str	r0, [fp, #-48]	; 0xffffffd0
    3f48:	str	r1, [fp, #-52]	; 0xffffffcc
    3f4c:	str	r2, [fp, #-56]	; 0xffffffc8
    3f50:	sub	r1, fp, #20
    3f54:	sub	r2, fp, #16
    3f58:	sub	r3, fp, #40	; 0x28
    3f5c:	str	r3, [sp, #16]
    3f60:	sub	r3, fp, #36	; 0x24
    3f64:	str	r3, [sp, #12]
    3f68:	sub	r3, fp, #32
    3f6c:	str	r3, [sp, #8]
    3f70:	sub	r3, fp, #28
    3f74:	str	r3, [sp, #4]
    3f78:	sub	r3, fp, #24
    3f7c:	str	r3, [sp]
    3f80:	mov	r3, r1
    3f84:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3f88:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3f8c:	bl	3a78 <coda_time_string_to_parts>
    3f90:	mov	r3, r0
    3f94:	cmp	r3, #0
    3f98:	beq	3fa4 <coda_time_string_to_double+0x74>
    3f9c:	mvn	r3, #0
    3fa0:	b	3fec <coda_time_string_to_double+0xbc>
    3fa4:	ldr	ip, [fp, #-16]
    3fa8:	ldr	lr, [fp, #-20]	; 0xffffffec
    3fac:	ldr	r4, [fp, #-24]	; 0xffffffe8
    3fb0:	ldr	r5, [fp, #-28]	; 0xffffffe4
    3fb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    3fb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3fbc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3fc0:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3fc4:	str	r0, [sp, #12]
    3fc8:	str	r1, [sp, #8]
    3fcc:	str	r2, [sp, #4]
    3fd0:	str	r3, [sp]
    3fd4:	mov	r3, r5
    3fd8:	mov	r2, r4
    3fdc:	mov	r1, lr
    3fe0:	mov	r0, ip
    3fe4:	bl	2358 <coda_time_parts_to_double>
    3fe8:	mov	r3, r0
    3fec:	mov	r0, r3
    3ff0:	sub	sp, fp, #12
    3ff4:	ldrd	r4, [sp]
    3ff8:	ldr	fp, [sp, #8]
    3ffc:	add	sp, sp, #12
    4000:	pop	{pc}		; (ldr pc, [sp], #4)

00004004 <coda_time_string_to_double_utc>:
    4004:	strd	r4, [sp, #-16]!
    4008:	str	fp, [sp, #8]
    400c:	str	lr, [sp, #12]
    4010:	add	fp, sp, #12
    4014:	sub	sp, sp, #72	; 0x48
    4018:	str	r0, [fp, #-48]	; 0xffffffd0
    401c:	str	r1, [fp, #-52]	; 0xffffffcc
    4020:	str	r2, [fp, #-56]	; 0xffffffc8
    4024:	sub	r1, fp, #20
    4028:	sub	r2, fp, #16
    402c:	sub	r3, fp, #40	; 0x28
    4030:	str	r3, [sp, #16]
    4034:	sub	r3, fp, #36	; 0x24
    4038:	str	r3, [sp, #12]
    403c:	sub	r3, fp, #32
    4040:	str	r3, [sp, #8]
    4044:	sub	r3, fp, #28
    4048:	str	r3, [sp, #4]
    404c:	sub	r3, fp, #24
    4050:	str	r3, [sp]
    4054:	mov	r3, r1
    4058:	ldr	r1, [fp, #-52]	; 0xffffffcc
    405c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    4060:	bl	3a78 <coda_time_string_to_parts>
    4064:	mov	r3, r0
    4068:	cmp	r3, #0
    406c:	beq	4078 <coda_time_string_to_double_utc+0x74>
    4070:	mvn	r3, #0
    4074:	b	40c0 <coda_time_string_to_double_utc+0xbc>
    4078:	ldr	ip, [fp, #-16]
    407c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4080:	ldr	r4, [fp, #-24]	; 0xffffffe8
    4084:	ldr	r5, [fp, #-28]	; 0xffffffe4
    4088:	ldr	r3, [fp, #-32]	; 0xffffffe0
    408c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    4090:	ldr	r1, [fp, #-40]	; 0xffffffd8
    4094:	ldr	r0, [fp, #-56]	; 0xffffffc8
    4098:	str	r0, [sp, #12]
    409c:	str	r1, [sp, #8]
    40a0:	str	r2, [sp, #4]
    40a4:	str	r3, [sp]
    40a8:	mov	r3, r5
    40ac:	mov	r2, r4
    40b0:	mov	r1, lr
    40b4:	mov	r0, ip
    40b8:	bl	2448 <coda_time_parts_to_double_utc>
    40bc:	mov	r3, r0
    40c0:	mov	r0, r3
    40c4:	sub	sp, fp, #12
    40c8:	ldrd	r4, [sp]
    40cc:	ldr	fp, [sp, #8]
    40d0:	add	sp, sp, #12
    40d4:	pop	{pc}		; (ldr pc, [sp], #4)

000040d8 <coda_datetime_to_double>:
    40d8:	str	fp, [sp, #-8]!
    40dc:	str	lr, [sp, #4]
    40e0:	add	fp, sp, #4
    40e4:	sub	sp, sp, #32
    40e8:	str	r0, [fp, #-8]
    40ec:	str	r1, [fp, #-12]
    40f0:	str	r2, [fp, #-16]
    40f4:	str	r3, [fp, #-20]	; 0xffffffec
    40f8:	ldr	r3, [fp, #16]
    40fc:	str	r3, [sp, #12]
    4100:	ldr	r3, [fp, #12]
    4104:	str	r3, [sp, #8]
    4108:	ldr	r3, [fp, #8]
    410c:	str	r3, [sp, #4]
    4110:	ldr	r3, [fp, #4]
    4114:	str	r3, [sp]
    4118:	ldr	r3, [fp, #-20]	; 0xffffffec
    411c:	ldr	r2, [fp, #-16]
    4120:	ldr	r1, [fp, #-12]
    4124:	ldr	r0, [fp, #-8]
    4128:	bl	2358 <coda_time_parts_to_double>
    412c:	mov	r3, r0
    4130:	mov	r0, r3
    4134:	sub	sp, fp, #4
    4138:	ldr	fp, [sp]
    413c:	add	sp, sp, #4
    4140:	pop	{pc}		; (ldr pc, [sp], #4)

00004144 <coda_double_to_datetime>:
    4144:	str	fp, [sp, #-8]!
    4148:	str	lr, [sp, #4]
    414c:	add	fp, sp, #4
    4150:	sub	sp, sp, #40	; 0x28
    4154:	vstr	d0, [fp, #-12]
    4158:	str	r0, [fp, #-16]
    415c:	str	r1, [fp, #-20]	; 0xffffffec
    4160:	str	r2, [fp, #-24]	; 0xffffffe8
    4164:	str	r3, [fp, #-28]	; 0xffffffe4
    4168:	ldr	r3, [fp, #12]
    416c:	str	r3, [sp, #8]
    4170:	ldr	r3, [fp, #8]
    4174:	str	r3, [sp, #4]
    4178:	ldr	r3, [fp, #4]
    417c:	str	r3, [sp]
    4180:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4184:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4188:	ldr	r1, [fp, #-20]	; 0xffffffec
    418c:	ldr	r0, [fp, #-16]
    4190:	vldr	d0, [fp, #-12]
    4194:	bl	1d50 <coda_time_double_to_parts>
    4198:	mov	r3, r0
    419c:	mov	r0, r3
    41a0:	sub	sp, fp, #4
    41a4:	ldr	fp, [sp]
    41a8:	add	sp, sp, #4
    41ac:	pop	{pc}		; (ldr pc, [sp], #4)

000041b0 <coda_time_to_string>:
    41b0:	str	fp, [sp, #-8]!
    41b4:	str	lr, [sp, #4]
    41b8:	add	fp, sp, #4
    41bc:	sub	sp, sp, #16
    41c0:	vstr	d0, [fp, #-12]
    41c4:	str	r0, [fp, #-16]
    41c8:	ldr	r1, [fp, #-16]
    41cc:	movw	r0, #0
    41d0:	movt	r0, #0
    41d4:	vldr	d0, [fp, #-12]
    41d8:	bl	3d90 <coda_time_double_to_string>
    41dc:	mov	r3, r0
    41e0:	mov	r0, r3
    41e4:	sub	sp, fp, #4
    41e8:	ldr	fp, [sp]
    41ec:	add	sp, sp, #4
    41f0:	pop	{pc}		; (ldr pc, [sp], #4)

000041f4 <coda_string_to_time>:
    41f4:	str	fp, [sp, #-8]!
    41f8:	str	lr, [sp, #4]
    41fc:	add	fp, sp, #4
    4200:	sub	sp, sp, #16
    4204:	str	r0, [fp, #-16]
    4208:	str	r1, [fp, #-20]	; 0xffffffec
    420c:	movw	r3, #0
    4210:	movt	r3, #0
    4214:	str	r3, [fp, #-8]
    4218:	ldr	r2, [fp, #-20]	; 0xffffffec
    421c:	ldr	r1, [fp, #-16]
    4220:	ldr	r0, [fp, #-8]
    4224:	bl	3f30 <coda_time_string_to_double>
    4228:	mov	r3, r0
    422c:	mov	r0, r3
    4230:	sub	sp, fp, #4
    4234:	ldr	fp, [sp]
    4238:	add	sp, sp, #4
    423c:	pop	{pc}		; (ldr pc, [sp], #4)

00004240 <coda_utcdatetime_to_double>:
    4240:	str	fp, [sp, #-8]!
    4244:	str	lr, [sp, #4]
    4248:	add	fp, sp, #4
    424c:	sub	sp, sp, #32
    4250:	str	r0, [fp, #-8]
    4254:	str	r1, [fp, #-12]
    4258:	str	r2, [fp, #-16]
    425c:	str	r3, [fp, #-20]	; 0xffffffec
    4260:	ldr	r3, [fp, #16]
    4264:	str	r3, [sp, #12]
    4268:	ldr	r3, [fp, #12]
    426c:	str	r3, [sp, #8]
    4270:	ldr	r3, [fp, #8]
    4274:	str	r3, [sp, #4]
    4278:	ldr	r3, [fp, #4]
    427c:	str	r3, [sp]
    4280:	ldr	r3, [fp, #-20]	; 0xffffffec
    4284:	ldr	r2, [fp, #-16]
    4288:	ldr	r1, [fp, #-12]
    428c:	ldr	r0, [fp, #-8]
    4290:	bl	2448 <coda_time_parts_to_double_utc>
    4294:	mov	r3, r0
    4298:	mov	r0, r3
    429c:	sub	sp, fp, #4
    42a0:	ldr	fp, [sp]
    42a4:	add	sp, sp, #4
    42a8:	pop	{pc}		; (ldr pc, [sp], #4)

000042ac <coda_double_to_utcdatetime>:
    42ac:	str	fp, [sp, #-8]!
    42b0:	str	lr, [sp, #4]
    42b4:	add	fp, sp, #4
    42b8:	sub	sp, sp, #40	; 0x28
    42bc:	vstr	d0, [fp, #-12]
    42c0:	str	r0, [fp, #-16]
    42c4:	str	r1, [fp, #-20]	; 0xffffffec
    42c8:	str	r2, [fp, #-24]	; 0xffffffe8
    42cc:	str	r3, [fp, #-28]	; 0xffffffe4
    42d0:	ldr	r3, [fp, #12]
    42d4:	str	r3, [sp, #8]
    42d8:	ldr	r3, [fp, #8]
    42dc:	str	r3, [sp, #4]
    42e0:	ldr	r3, [fp, #4]
    42e4:	str	r3, [sp]
    42e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    42ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    42f0:	ldr	r1, [fp, #-20]	; 0xffffffec
    42f4:	ldr	r0, [fp, #-16]
    42f8:	vldr	d0, [fp, #-12]
    42fc:	bl	1fb0 <coda_time_double_to_parts_utc>
    4300:	mov	r3, r0
    4304:	mov	r0, r3
    4308:	sub	sp, fp, #4
    430c:	ldr	fp, [sp]
    4310:	add	sp, sp, #4
    4314:	pop	{pc}		; (ldr pc, [sp], #4)

00004318 <coda_time_to_utcstring>:
    4318:	str	fp, [sp, #-8]!
    431c:	str	lr, [sp, #4]
    4320:	add	fp, sp, #4
    4324:	sub	sp, sp, #16
    4328:	vstr	d0, [fp, #-12]
    432c:	str	r0, [fp, #-16]
    4330:	ldr	r1, [fp, #-16]
    4334:	movw	r0, #0
    4338:	movt	r0, #0
    433c:	vldr	d0, [fp, #-12]
    4340:	bl	3e60 <coda_time_double_to_string_utc>
    4344:	mov	r3, r0
    4348:	mov	r0, r3
    434c:	sub	sp, fp, #4
    4350:	ldr	fp, [sp]
    4354:	add	sp, sp, #4
    4358:	pop	{pc}		; (ldr pc, [sp], #4)

0000435c <coda_utcstring_to_time>:
    435c:	str	fp, [sp, #-8]!
    4360:	str	lr, [sp, #4]
    4364:	add	fp, sp, #4
    4368:	sub	sp, sp, #16
    436c:	str	r0, [fp, #-16]
    4370:	str	r1, [fp, #-20]	; 0xffffffec
    4374:	movw	r3, #0
    4378:	movt	r3, #0
    437c:	str	r3, [fp, #-8]
    4380:	ldr	r2, [fp, #-20]	; 0xffffffec
    4384:	ldr	r1, [fp, #-16]
    4388:	ldr	r0, [fp, #-8]
    438c:	bl	4004 <coda_time_string_to_double_utc>
    4390:	mov	r3, r0
    4394:	mov	r0, r3
    4398:	sub	sp, fp, #4
    439c:	ldr	fp, [sp]
    43a0:	add	sp, sp, #4
    43a4:	pop	{pc}		; (ldr pc, [sp], #4)
