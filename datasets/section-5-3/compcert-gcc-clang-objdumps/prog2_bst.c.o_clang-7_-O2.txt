
../compcert-repos/prog2/CMakeFiles/7.1.dir/Aula07_Arvores/bst.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bst_nova>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	mov	r0, #4
   c:	bl	0 <malloc>
  10:	cmp	r0, #0
  14:	moveq	r0, #0
  18:	movne	r1, #0
  1c:	strne	r1, [r0]
  20:	pop	{fp, pc}

00000024 <bst_apaga>:
  24:	push	{r4, sl, fp, lr}
  28:	add	fp, sp, #8
  2c:	mov	r4, r0
  30:	ldr	r0, [r0]
  34:	cmp	r0, #0
  38:	beq	50 <bst_apaga+0x2c>
  3c:	ldr	r1, [r0]
  40:	bl	5c <bst_remove_impl>
  44:	str	r0, [r4]
  48:	cmp	r0, #0
  4c:	bne	3c <bst_apaga+0x18>
  50:	mov	r0, r4
  54:	pop	{r4, sl, fp, lr}
  58:	b	0 <free>

0000005c <bst_remove_impl>:
  5c:	push	{r4, r5, r6, r7, fp, lr}
  60:	add	fp, sp, #16
  64:	cmp	r0, #0
  68:	moveq	r7, #0
  6c:	moveq	r0, r7
  70:	popeq	{r4, r5, r6, r7, fp, pc}
  74:	ldr	r5, [r0]
  78:	mov	r4, r0
  7c:	mov	r6, r1
  80:	mov	r0, r1
  84:	mov	r1, r5
  88:	bl	0 <strcmp>
  8c:	cmn	r0, #1
  90:	bgt	ac <bst_remove_impl+0x50>
  94:	ldr	r0, [r4, #4]
  98:	mov	r1, r6
  9c:	bl	5c <bst_remove_impl>
  a0:	str	r0, [r4, #4]
  a4:	mov	r0, r4
  a8:	pop	{r4, r5, r6, r7, fp, pc}
  ac:	cmp	r0, #0
  b0:	beq	cc <bst_remove_impl+0x70>
  b4:	ldr	r0, [r4, #8]
  b8:	mov	r1, r6
  bc:	bl	5c <bst_remove_impl>
  c0:	str	r0, [r4, #8]
  c4:	mov	r0, r4
  c8:	pop	{r4, r5, r6, r7, fp, pc}
  cc:	ldr	r6, [r4, #4]
  d0:	ldr	r0, [r4, #8]
  d4:	cmp	r6, #0
  d8:	beq	120 <bst_remove_impl+0xc4>
  dc:	cmp	r0, #0
  e0:	beq	12c <bst_remove_impl+0xd0>
  e4:	mov	r6, r0
  e8:	ldr	r0, [r0, #4]
  ec:	cmp	r0, #0
  f0:	bne	e4 <bst_remove_impl+0x88>
  f4:	ldr	r0, [r6]
  f8:	bl	0 <strlen>
  fc:	add	r1, r0, #1
 100:	mov	r0, r5
 104:	bl	0 <realloc>
 108:	str	r0, [r4]
 10c:	ldr	r1, [r6]
 110:	bl	0 <strcpy>
 114:	ldr	r0, [r4, #8]
 118:	ldr	r1, [r6]
 11c:	b	bc <bst_remove_impl+0x60>
 120:	cmp	r0, #0
 124:	mov	r6, r0
 128:	beq	168 <bst_remove_impl+0x10c>
 12c:	ldr	r0, [r6]
 130:	bl	0 <strlen>
 134:	add	r1, r0, #1
 138:	mov	r0, r5
 13c:	bl	0 <realloc>
 140:	str	r0, [r4]
 144:	ldr	r1, [r6]
 148:	bl	0 <strcpy>
 14c:	ldr	r0, [r6, #4]
 150:	mov	r7, r4
 154:	str	r0, [r4, #4]
 158:	ldr	r0, [r6, #8]
 15c:	str	r0, [r4, #8]
 160:	ldr	r5, [r6]
 164:	b	170 <bst_remove_impl+0x114>
 168:	mov	r7, #0
 16c:	mov	r6, r4
 170:	mov	r0, r5
 174:	bl	0 <free>
 178:	mov	r0, r6
 17c:	bl	0 <free>
 180:	mov	r0, r7
 184:	pop	{r4, r5, r6, r7, fp, pc}

00000188 <bst_pesquisa>:
 188:	push	{r4, r5, r6, sl, fp, lr}
 18c:	add	fp, sp, #16
 190:	cmp	r0, #0
 194:	mov	r4, #0
 198:	movne	r5, r1
 19c:	cmpne	r1, #0
 1a0:	beq	1e0 <bst_pesquisa+0x58>
 1a4:	b	1ac <bst_pesquisa+0x24>
 1a8:	add	r0, r6, #4
 1ac:	ldr	r6, [r0]
 1b0:	cmp	r6, #0
 1b4:	beq	1e0 <bst_pesquisa+0x58>
 1b8:	ldr	r1, [r6]
 1bc:	mov	r0, r5
 1c0:	bl	0 <strcmp>
 1c4:	cmn	r0, #1
 1c8:	ble	1a8 <bst_pesquisa+0x20>
 1cc:	cmp	r0, #0
 1d0:	beq	1dc <bst_pesquisa+0x54>
 1d4:	add	r0, r6, #8
 1d8:	b	1ac <bst_pesquisa+0x24>
 1dc:	mov	r4, r6
 1e0:	mov	r0, r4
 1e4:	pop	{r4, r5, r6, sl, fp, pc}

000001e8 <bst_pesquisa_impl>:
 1e8:	push	{r4, r5, r6, sl, fp, lr}
 1ec:	add	fp, sp, #16
 1f0:	mov	r4, #0
 1f4:	cmp	r0, #0
 1f8:	beq	238 <bst_pesquisa_impl+0x50>
 1fc:	mov	r5, r1
 200:	mov	r6, r0
 204:	ldr	r1, [r6]
 208:	mov	r0, r5
 20c:	bl	0 <strcmp>
 210:	cmn	r0, #1
 214:	bgt	220 <bst_pesquisa_impl+0x38>
 218:	add	r0, r6, #4
 21c:	b	22c <bst_pesquisa_impl+0x44>
 220:	cmp	r0, #0
 224:	beq	240 <bst_pesquisa_impl+0x58>
 228:	add	r0, r6, #8
 22c:	ldr	r6, [r0]
 230:	cmp	r6, #0
 234:	bne	204 <bst_pesquisa_impl+0x1c>
 238:	mov	r0, r4
 23c:	pop	{r4, r5, r6, sl, fp, pc}
 240:	mov	r4, r6
 244:	mov	r0, r4
 248:	pop	{r4, r5, r6, sl, fp, pc}

0000024c <bst_insere>:
 24c:	push	{r4, sl, fp, lr}
 250:	add	fp, sp, #8
 254:	mov	r4, r0
 258:	mvn	r0, #0
 25c:	cmp	r4, #0
 260:	cmpne	r1, #0
 264:	bne	26c <bst_insere+0x20>
 268:	pop	{r4, sl, fp, pc}
 26c:	ldr	r0, [r4]
 270:	bl	280 <bst_insere_impl>
 274:	str	r0, [r4]
 278:	mov	r0, #0
 27c:	pop	{r4, sl, fp, pc}

00000280 <bst_insere_impl>:
 280:	push	{r4, r5, fp, lr}
 284:	add	fp, sp, #8
 288:	mov	r5, r1
 28c:	cmp	r0, #0
 290:	beq	2c4 <bst_insere_impl+0x44>
 294:	ldr	r1, [r0]
 298:	mov	r4, r0
 29c:	mov	r0, r5
 2a0:	bl	0 <strcmp>
 2a4:	cmn	r0, #1
 2a8:	bgt	2f8 <bst_insere_impl+0x78>
 2ac:	ldr	r0, [r4, #4]
 2b0:	mov	r1, r5
 2b4:	bl	280 <bst_insere_impl>
 2b8:	str	r0, [r4, #4]
 2bc:	mov	r0, r4
 2c0:	pop	{r4, r5, fp, pc}
 2c4:	mov	r0, #12
 2c8:	bl	0 <malloc>
 2cc:	mov	r4, r0
 2d0:	mov	r0, r5
 2d4:	bl	0 <strlen>
 2d8:	add	r0, r0, #1
 2dc:	bl	0 <malloc>
 2e0:	mov	r1, r5
 2e4:	str	r0, [r4]
 2e8:	bl	0 <strcpy>
 2ec:	mov	r0, #0
 2f0:	str	r0, [r4, #4]
 2f4:	b	30c <bst_insere_impl+0x8c>
 2f8:	cmp	r0, #0
 2fc:	beq	310 <bst_insere_impl+0x90>
 300:	ldr	r0, [r4, #8]
 304:	mov	r1, r5
 308:	bl	280 <bst_insere_impl>
 30c:	str	r0, [r4, #8]
 310:	mov	r0, r4
 314:	pop	{r4, r5, fp, pc}

00000318 <bst_remove>:
 318:	push	{r4, sl, fp, lr}
 31c:	add	fp, sp, #8
 320:	mov	r4, r0
 324:	mvn	r0, #0
 328:	cmp	r4, #0
 32c:	cmpne	r1, #0
 330:	bne	338 <bst_remove+0x20>
 334:	pop	{r4, sl, fp, pc}
 338:	ldr	r0, [r4]
 33c:	bl	5c <bst_remove_impl>
 340:	str	r0, [r4]
 344:	mov	r0, #0
 348:	pop	{r4, sl, fp, pc}

0000034c <bst_min>:
 34c:	cmp	r0, #0
 350:	moveq	r0, #0
 354:	bxeq	lr
 358:	ldr	r0, [r0]
 35c:	mov	r1, r0
 360:	ldr	r0, [r0, #4]
 364:	cmp	r0, #0
 368:	bne	35c <bst_min+0x10>
 36c:	ldr	r0, [r1]
 370:	bx	lr

00000374 <bst_no_valormin>:
 374:	mov	r1, r0
 378:	ldr	r0, [r0, #4]
 37c:	cmp	r0, #0
 380:	bne	374 <bst_no_valormin>
 384:	mov	r0, r1
 388:	bx	lr

0000038c <bst_max>:
 38c:	cmp	r0, #0
 390:	moveq	r0, #0
 394:	bxeq	lr
 398:	ldr	r0, [r0]
 39c:	mov	r1, r0
 3a0:	ldr	r0, [r0, #8]
 3a4:	cmp	r0, #0
 3a8:	bne	39c <bst_max+0x10>
 3ac:	ldr	r0, [r1]
 3b0:	bx	lr

000003b4 <bst_no_valormax>:
 3b4:	mov	r1, r0
 3b8:	ldr	r0, [r0, #8]
 3bc:	cmp	r0, #0
 3c0:	bne	3b4 <bst_no_valormax>
 3c4:	mov	r0, r1
 3c8:	bx	lr

000003cc <bst_imprime>:
 3cc:	cmp	r0, #0
 3d0:	bxeq	lr
 3d4:	push	{r4, sl, fp, lr}
 3d8:	add	fp, sp, #8
 3dc:	mov	r4, r0
 3e0:	movw	r0, #0
 3e4:	movt	r0, #0
 3e8:	bl	0 <printf>
 3ec:	ldr	r0, [r4]
 3f0:	bl	400 <bst_preordem_impl>
 3f4:	mov	r0, #10
 3f8:	pop	{r4, sl, fp, lr}
 3fc:	b	0 <putchar>

00000400 <bst_preordem_impl>:
 400:	push	{r4, r5, fp, lr}
 404:	add	fp, sp, #8
 408:	cmp	r0, #0
 40c:	popeq	{r4, r5, fp, pc}
 410:	movw	r5, #0
 414:	mov	r4, r0
 418:	movt	r5, #0
 41c:	ldr	r1, [r4]
 420:	mov	r0, r5
 424:	bl	0 <printf>
 428:	ldr	r0, [r4, #4]
 42c:	bl	400 <bst_preordem_impl>
 430:	ldr	r4, [r4, #8]
 434:	cmp	r4, #0
 438:	bne	41c <bst_preordem_impl+0x1c>
 43c:	pop	{r4, r5, fp, pc}

00000440 <bst_novo_no>:
 440:	push	{r4, r5, fp, lr}
 444:	add	fp, sp, #8
 448:	mov	r4, r0
 44c:	mov	r0, #12
 450:	bl	0 <malloc>
 454:	mov	r5, r0
 458:	mov	r0, r4
 45c:	bl	0 <strlen>
 460:	add	r0, r0, #1
 464:	bl	0 <malloc>
 468:	mov	r1, r4
 46c:	str	r0, [r5]
 470:	bl	0 <strcpy>
 474:	mov	r0, #0
 478:	str	r0, [r5, #4]
 47c:	str	r0, [r5, #8]
 480:	mov	r0, r5
 484:	pop	{r4, r5, fp, pc}

00000488 <bst_altura>:
 488:	push	{r4, r5, fp, lr}
 48c:	add	fp, sp, #8
 490:	cmp	r0, #0
 494:	mvneq	r0, #0
 498:	popeq	{r4, r5, fp, pc}
 49c:	ldmib	r0, {r1, r4}
 4a0:	orrs	r0, r4, r1
 4a4:	mov	r0, #0
 4a8:	popeq	{r4, r5, fp, pc}
 4ac:	mov	r0, r1
 4b0:	bl	488 <bst_altura>
 4b4:	mov	r5, r0
 4b8:	mov	r0, r4
 4bc:	bl	488 <bst_altura>
 4c0:	cmp	r5, r0
 4c4:	addgt	r0, r5, #1
 4c8:	popgt	{r4, r5, fp, pc}
 4cc:	add	r0, r0, #1
 4d0:	pop	{r4, r5, fp, pc}
