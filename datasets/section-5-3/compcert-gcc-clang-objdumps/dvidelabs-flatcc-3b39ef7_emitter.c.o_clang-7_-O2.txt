
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/json_test_uq.dir/__/__/src/runtime/emitter.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <flatcc_emitter_recycle_page>:
   0:	ldr	r3, [r0]
   4:	mov	r2, r0
   8:	mvn	r0, #0
   c:	cmp	r3, r1
  10:	ldrne	r2, [r2, #4]
  14:	cmpne	r2, r1
  18:	bne	20 <flatcc_emitter_recycle_page+0x20>
  1c:	bx	lr
  20:	ldr	r0, [r1, #2944]	; 0xb80
  24:	ldr	r2, [r1, #2948]	; 0xb84
  28:	str	r2, [r0, #2948]	; 0xb84
  2c:	ldr	r2, [r1, #2948]	; 0xb84
  30:	str	r0, [r2, #2944]	; 0xb80
  34:	ldr	r0, [r3, #2948]	; 0xb84
  38:	str	r3, [r1, #2944]	; 0xb80
  3c:	str	r0, [r1, #2948]	; 0xb84
  40:	str	r1, [r0, #2944]	; 0xb80
  44:	ldr	r0, [r1, #2944]	; 0xb80
  48:	str	r1, [r0, #2948]	; 0xb84
  4c:	mov	r0, #0
  50:	bx	lr

00000054 <flatcc_emitter_reset>:
  54:	push	{r4, sl, fp, lr}
  58:	add	fp, sp, #8
  5c:	ldr	r1, [r0]
  60:	cmp	r1, #0
  64:	beq	11c <flatcc_emitter_reset+0xc8>
  68:	mov	r4, r0
  6c:	add	r2, r1, #1472	; 0x5c0
  70:	mov	r0, #1472	; 0x5c0
  74:	mov	r3, #0
  78:	stmib	r4, {r1, r2}
  7c:	str	r0, [r4, #12]
  80:	str	r2, [r4, #16]
  84:	str	r0, [r4, #20]
  88:	movw	r0, #64064	; 0xfa40
  8c:	movt	r0, #65535	; 0xffff
  90:	str	r0, [r1, #2952]	; 0xb88
  94:	ldr	r2, [r4, #32]
  98:	ldr	r0, [r4, #24]
  9c:	cmp	r2, #0
  a0:	moveq	r2, r0
  a4:	streq	r0, [r4, #32]
  a8:	str	r3, [r4, #24]
  ac:	add	r2, r2, r2, lsl #1
  b0:	lsr	r2, r2, #2
  b4:	add	r0, r2, r0, lsr #2
  b8:	str	r0, [r4, #32]
  bc:	ldr	r2, [r4, #28]
  c0:	cmp	r2, r0, lsl #1
  c4:	bls	11c <flatcc_emitter_reset+0xc8>
  c8:	mov	r2, r1
  cc:	ldr	r0, [r2, #2944]!	; 0xb80
  d0:	cmp	r0, r1
  d4:	beq	11c <flatcc_emitter_reset+0xc8>
  d8:	ldr	r3, [r0, #2944]	; 0xb80
  dc:	str	r3, [r2]
  e0:	ldr	r2, [r0, #2944]	; 0xb80
  e4:	str	r1, [r2, #2948]	; 0xb84
  e8:	bl	0 <free>
  ec:	ldr	r0, [r4, #28]
  f0:	ldr	r1, [r4, #32]
  f4:	sub	r0, r0, #2944	; 0xb80
  f8:	cmp	r0, r1, lsl #1
  fc:	str	r0, [r4, #28]
 100:	popls	{r4, sl, fp, pc}
 104:	ldr	r1, [r4, #4]
 108:	ldr	r3, [r4]
 10c:	mov	r2, r1
 110:	ldr	r0, [r2, #2944]!	; 0xb80
 114:	cmp	r0, r3
 118:	bne	d8 <flatcc_emitter_reset+0x84>
 11c:	pop	{r4, sl, fp, pc}

00000120 <flatcc_emitter_clear>:
 120:	push	{r4, r5, r6, sl, fp, lr}
 124:	add	fp, sp, #16
 128:	ldr	r5, [r0]
 12c:	cmp	r5, #0
 130:	popeq	{r4, r5, r6, sl, fp, pc}
 134:	mov	r4, r0
 138:	ldr	r0, [r5, #2948]	; 0xb84
 13c:	mov	r6, #0
 140:	str	r6, [r0, #2944]	; 0xb80
 144:	b	154 <flatcc_emitter_clear+0x34>
 148:	mov	r5, r0
 14c:	ldr	r0, [r0, #2948]	; 0xb84
 150:	bl	0 <free>
 154:	ldr	r0, [r5, #2944]	; 0xb80
 158:	cmp	r0, #0
 15c:	bne	148 <flatcc_emitter_clear+0x28>
 160:	mov	r0, r5
 164:	bl	0 <free>
 168:	vmov.i32	q8, #0	; 0x00000000
 16c:	add	r0, r4, #16
 170:	vst1.32	{d16-d17}, [r0]
 174:	mov	r0, #32
 178:	vst1.32	{d16-d17}, [r4], r0
 17c:	str	r6, [r4]
 180:	pop	{r4, r5, r6, sl, fp, pc}

00000184 <flatcc_emitter>:
 184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 188:	add	fp, sp, #28
 18c:	sub	sp, sp, #4
 190:	mov	r6, r0
 194:	mov	r7, r1
 198:	ldr	r0, [r0, #24]
 19c:	ldr	r1, [fp, #8]
 1a0:	mov	r4, r2
 1a4:	cmn	r3, #1
 1a8:	mov	r9, r6
 1ac:	add	r0, r0, r1
 1b0:	str	r0, [r6, #24]
 1b4:	ble	2f4 <flatcc_emitter+0x170>
 1b8:	ldr	r0, [r9, #20]!
 1bc:	cmp	r0, r1
 1c0:	bcs	468 <flatcc_emitter+0x2e4>
 1c4:	mov	r8, #0
 1c8:	cmp	r4, #0
 1cc:	beq	4c0 <flatcc_emitter+0x33c>
 1d0:	movw	sl, #64064	; 0xfa40
 1d4:	movt	sl, #65535	; 0xffff
 1d8:	ldr	r8, [r7, #4]
 1dc:	cmp	r8, #0
 1e0:	beq	2e4 <flatcc_emitter+0x160>
 1e4:	ldr	r9, [r7]
 1e8:	cmp	r8, r0
 1ec:	mov	r5, r8
 1f0:	bls	2b0 <flatcc_emitter+0x12c>
 1f4:	mov	r5, r0
 1f8:	cmp	r5, #0
 1fc:	bne	2b0 <flatcc_emitter+0x12c>
 200:	ldr	r5, [r6, #4]
 204:	cmp	r5, #0
 208:	beq	21c <flatcc_emitter+0x98>
 20c:	ldr	r0, [r5, #2944]	; 0xb80
 210:	ldr	r1, [r6]
 214:	cmp	r0, r1
 218:	bne	254 <flatcc_emitter+0xd0>
 21c:	movw	r0, #2956	; 0xb8c
 220:	bl	0 <malloc>
 224:	cmp	r0, #0
 228:	beq	478 <flatcc_emitter+0x2f4>
 22c:	ldr	r1, [r6, #28]
 230:	cmp	r5, #0
 234:	add	r1, r1, #2944	; 0xb80
 238:	str	r1, [r6, #28]
 23c:	beq	280 <flatcc_emitter+0xfc>
 240:	ldr	r1, [r6]
 244:	str	r1, [r0, #2944]	; 0xb80
 248:	str	r5, [r0, #2948]	; 0xb84
 24c:	str	r0, [r1, #2948]	; 0xb84
 250:	str	r0, [r5, #2944]	; 0xb80
 254:	mov	r5, #2944	; 0xb80
 258:	str	r0, [r6, #4]
 25c:	str	r0, [r6, #16]
 260:	str	r5, [r6, #20]
 264:	ldr	r1, [r0, #2948]	; 0xb84
 268:	ldr	r1, [r1, #2952]	; 0xb88
 26c:	add	r1, r1, #2944	; 0xb80
 270:	str	r1, [r0, #2952]	; 0xb88
 274:	cmp	r8, r5
 278:	bhi	1f8 <flatcc_emitter+0x74>
 27c:	b	2ac <flatcc_emitter+0x128>
 280:	add	r1, r0, #1472	; 0x5c0
 284:	mov	r5, #1472	; 0x5c0
 288:	str	r0, [r6]
 28c:	stmib	r6, {r0, r1, r5}
 290:	str	r1, [r6, #16]
 294:	str	r5, [r6, #20]
 298:	str	r0, [r0, #2944]	; 0xb80
 29c:	str	r0, [r0, #2948]	; 0xb84
 2a0:	str	sl, [r0, #2952]	; 0xb88
 2a4:	cmp	r8, r5
 2a8:	bhi	1f8 <flatcc_emitter+0x74>
 2ac:	mov	r5, r8
 2b0:	ldr	r0, [r6, #16]
 2b4:	mov	r1, r9
 2b8:	mov	r2, r5
 2bc:	bl	0 <memcpy>
 2c0:	ldr	r0, [r6, #16]
 2c4:	ldr	r1, [r6, #20]
 2c8:	add	r9, r9, r5
 2cc:	subs	r8, r8, r5
 2d0:	add	r2, r0, r5
 2d4:	sub	r0, r1, r5
 2d8:	str	r2, [r6, #16]
 2dc:	str	r0, [r6, #20]
 2e0:	bne	1e8 <flatcc_emitter+0x64>
 2e4:	subs	r4, r4, #1
 2e8:	add	r7, r7, #8
 2ec:	bne	1d8 <flatcc_emitter+0x54>
 2f0:	b	460 <flatcc_emitter+0x2dc>
 2f4:	ldr	r0, [r9, #12]!
 2f8:	cmp	r0, r1
 2fc:	bcs	480 <flatcc_emitter+0x2fc>
 300:	mov	r8, #0
 304:	cmp	r4, #0
 308:	beq	4c0 <flatcc_emitter+0x33c>
 30c:	add	r0, r7, r4, lsl #3
 310:	movw	sl, #2952	; 0xb88
 314:	ldr	r8, [r0, #-4]
 318:	sub	r1, r0, #8
 31c:	str	r1, [sp]
 320:	cmp	r8, #0
 324:	beq	454 <flatcc_emitter+0x2d0>
 328:	ldr	r0, [sp]
 32c:	ldr	r0, [r0]
 330:	add	r7, r0, r8
 334:	ldr	r1, [r9]
 338:	cmp	r8, r1
 33c:	bls	424 <flatcc_emitter+0x2a0>
 340:	cmp	r1, #0
 344:	mov	r5, r1
 348:	bne	428 <flatcc_emitter+0x2a4>
 34c:	ldr	r5, [r6]
 350:	cmp	r5, #0
 354:	beq	380 <flatcc_emitter+0x1fc>
 358:	ldr	r0, [r5, #2948]	; 0xb84
 35c:	ldr	r1, [r6, #4]
 360:	cmp	r0, r1
 364:	beq	380 <flatcc_emitter+0x1fc>
 368:	ldr	r1, [r5, #2952]	; 0xb88
 36c:	mov	r2, r0
 370:	sub	r1, r1, #2944	; 0xb80
 374:	str	r1, [r2, #2952]!	; 0xb88
 378:	str	r0, [r6]
 37c:	b	3c0 <flatcc_emitter+0x23c>
 380:	movw	r0, #2956	; 0xb8c
 384:	bl	0 <malloc>
 388:	cmp	r0, #0
 38c:	beq	478 <flatcc_emitter+0x2f4>
 390:	ldr	r1, [r6, #28]
 394:	cmp	r5, #0
 398:	add	r1, r1, #2944	; 0xb80
 39c:	str	r1, [r6, #28]
 3a0:	beq	3ec <flatcc_emitter+0x268>
 3a4:	ldr	r1, [r6, #4]
 3a8:	add	r2, r0, sl
 3ac:	str	r5, [r0, #2944]	; 0xb80
 3b0:	str	r1, [r0, #2948]	; 0xb84
 3b4:	str	r0, [r5, #2948]	; 0xb84
 3b8:	str	r0, [r1, #2944]	; 0xb80
 3bc:	str	r0, [r6]
 3c0:	add	r3, r0, #2944	; 0xb80
 3c4:	mov	r1, #2944	; 0xb80
 3c8:	str	r3, [r6, #8]
 3cc:	str	r1, [r6, #12]
 3d0:	ldr	r0, [r0, #2944]	; 0xb80
 3d4:	ldr	r0, [r0, #2952]	; 0xb88
 3d8:	sub	r0, r0, #2944	; 0xb80
 3dc:	str	r0, [r2]
 3e0:	cmp	r8, r1
 3e4:	bhi	340 <flatcc_emitter+0x1bc>
 3e8:	b	424 <flatcc_emitter+0x2a0>
 3ec:	add	r2, r0, #1472	; 0x5c0
 3f0:	mov	r1, #1472	; 0x5c0
 3f4:	str	r0, [r6]
 3f8:	stmib	r6, {r0, r2}
 3fc:	str	r1, [r6, #12]
 400:	str	r2, [r6, #16]
 404:	movw	r2, #64064	; 0xfa40
 408:	str	r1, [r6, #20]
 40c:	str	r0, [r0, #2944]	; 0xb80
 410:	str	r0, [r0, #2948]	; 0xb84
 414:	movt	r2, #65535	; 0xffff
 418:	str	r2, [r0, #2952]	; 0xb88
 41c:	cmp	r8, r1
 420:	bhi	340 <flatcc_emitter+0x1bc>
 424:	mov	r5, r8
 428:	sub	r0, r1, r5
 42c:	sub	r7, r7, r5
 430:	mov	r2, r5
 434:	str	r0, [r6, #12]
 438:	mov	r1, r7
 43c:	ldr	r0, [r6, #8]
 440:	sub	r0, r0, r5
 444:	str	r0, [r6, #8]
 448:	bl	0 <memcpy>
 44c:	subs	r8, r8, r5
 450:	bne	334 <flatcc_emitter+0x1b0>
 454:	ldr	r0, [sp]
 458:	subs	r4, r4, #1
 45c:	bne	314 <flatcc_emitter+0x190>
 460:	mov	r8, #0
 464:	b	4c0 <flatcc_emitter+0x33c>
 468:	ldr	r5, [r6, #16]
 46c:	add	r2, r5, r1
 470:	str	r2, [r6, #16]
 474:	b	48c <flatcc_emitter+0x308>
 478:	mvn	r8, #0
 47c:	b	4c0 <flatcc_emitter+0x33c>
 480:	ldr	r2, [r6, #8]
 484:	sub	r5, r2, r1
 488:	str	r5, [r6, #8]
 48c:	sub	r0, r0, r1
 490:	mov	r8, #0
 494:	cmp	r4, #0
 498:	str	r0, [r9]
 49c:	beq	4c0 <flatcc_emitter+0x33c>
 4a0:	ldm	r7, {r1, r2}
 4a4:	mov	r0, r5
 4a8:	bl	0 <memcpy>
 4ac:	ldr	r0, [r7, #4]
 4b0:	add	r7, r7, #8
 4b4:	subs	r4, r4, #1
 4b8:	add	r5, r5, r0
 4bc:	bne	4a0 <flatcc_emitter+0x31c>
 4c0:	mov	r0, r8
 4c4:	sub	sp, fp, #28
 4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000004cc <flatcc_emitter_copy_buffer>:
 4cc:	push	{r4, r5, r6, sl, fp, lr}
 4d0:	add	fp, sp, #16
 4d4:	mov	r3, r2
 4d8:	ldr	r2, [r0, #24]
 4dc:	mov	r5, #0
 4e0:	cmp	r2, r3
 4e4:	bhi	56c <flatcc_emitter_copy_buffer+0xa0>
 4e8:	mov	r4, r0
 4ec:	ldr	r0, [r0]
 4f0:	cmp	r0, #0
 4f4:	beq	56c <flatcc_emitter_copy_buffer+0xa0>
 4f8:	mov	r6, r1
 4fc:	ldr	r1, [r4, #4]
 500:	cmp	r0, r1
 504:	beq	574 <flatcc_emitter_copy_buffer+0xa8>
 508:	ldr	r0, [r4, #12]
 50c:	ldr	r1, [r4, #8]
 510:	rsb	r5, r0, #2944	; 0xb80
 514:	mov	r0, r6
 518:	mov	r2, r5
 51c:	bl	0 <memcpy>
 520:	ldm	r4, {r0, r1}
 524:	add	r5, r6, r5
 528:	ldr	r6, [r0, #2944]	; 0xb80
 52c:	cmp	r6, r1
 530:	beq	558 <flatcc_emitter_copy_buffer+0x8c>
 534:	mov	r0, r5
 538:	mov	r1, r6
 53c:	mov	r2, #2944	; 0xb80
 540:	bl	0 <memcpy>
 544:	ldr	r6, [r6, #2944]	; 0xb80
 548:	ldr	r0, [r4, #4]
 54c:	add	r5, r5, #2944	; 0xb80
 550:	cmp	r6, r0
 554:	bne	534 <flatcc_emitter_copy_buffer+0x68>
 558:	ldr	r0, [r4, #20]
 55c:	mov	r1, r6
 560:	rsb	r2, r0, #2944	; 0xb80
 564:	mov	r0, r5
 568:	bl	0 <memcpy>
 56c:	mov	r0, r5
 570:	pop	{r4, r5, r6, sl, fp, pc}
 574:	ldr	r1, [r4, #8]
 578:	mov	r0, r6
 57c:	bl	0 <memcpy>
 580:	mov	r0, r6
 584:	pop	{r4, r5, r6, sl, fp, pc}
