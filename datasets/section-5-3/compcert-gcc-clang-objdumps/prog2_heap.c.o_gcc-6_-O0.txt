
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #16
   c:	str	r0, [fp, #-16]
  10:	mov	r0, #12
  14:	bl	0 <malloc>
  18:	mov	r3, r0
  1c:	str	r3, [fp, #-8]
  20:	ldr	r3, [fp, #-8]
  24:	cmp	r3, #0
  28:	bne	34 <heap_nova+0x34>
  2c:	mov	r3, #0
  30:	b	90 <heap_nova+0x90>
  34:	ldr	r3, [fp, #-8]
  38:	mov	r2, #0
  3c:	str	r2, [r3]
  40:	ldr	r3, [fp, #-8]
  44:	ldr	r2, [fp, #-16]
  48:	str	r2, [r3, #4]
  4c:	ldr	r3, [fp, #-16]
  50:	mov	r1, #4
  54:	mov	r0, r3
  58:	bl	0 <calloc>
  5c:	mov	r3, r0
  60:	mov	r2, r3
  64:	ldr	r3, [fp, #-8]
  68:	str	r2, [r3, #8]
  6c:	ldr	r3, [fp, #-8]
  70:	ldr	r3, [r3, #8]
  74:	cmp	r3, #0
  78:	bne	8c <heap_nova+0x8c>
  7c:	ldr	r0, [fp, #-8]
  80:	bl	0 <free>
  84:	mov	r3, #0
  88:	b	90 <heap_nova+0x90>
  8c:	ldr	r3, [fp, #-8]
  90:	mov	r0, r3
  94:	sub	sp, fp, #4
  98:	pop	{fp, pc}

0000009c <heap_apaga>:
  9c:	push	{fp, lr}
  a0:	add	fp, sp, #4
  a4:	sub	sp, sp, #16
  a8:	str	r0, [fp, #-16]
  ac:	ldr	r3, [fp, #-16]
  b0:	cmp	r3, #0
  b4:	beq	160 <heap_apaga+0xc4>
  b8:	mov	r3, #0
  bc:	str	r3, [fp, #-8]
  c0:	b	130 <heap_apaga+0x94>
  c4:	ldr	r3, [fp, #-16]
  c8:	ldr	r2, [r3, #8]
  cc:	ldr	r3, [fp, #-8]
  d0:	lsl	r3, r3, #2
  d4:	add	r3, r2, r3
  d8:	ldr	r3, [r3]
  dc:	ldr	r3, [r3, #4]
  e0:	mov	r0, r3
  e4:	bl	0 <free>
  e8:	ldr	r3, [fp, #-16]
  ec:	ldr	r2, [r3, #8]
  f0:	ldr	r3, [fp, #-8]
  f4:	lsl	r3, r3, #2
  f8:	add	r3, r2, r3
  fc:	ldr	r3, [r3]
 100:	mov	r0, r3
 104:	bl	0 <free>
 108:	ldr	r3, [fp, #-16]
 10c:	ldr	r2, [r3, #8]
 110:	ldr	r3, [fp, #-8]
 114:	lsl	r3, r3, #2
 118:	add	r3, r2, r3
 11c:	mov	r2, #0
 120:	str	r2, [r3]
 124:	ldr	r3, [fp, #-8]
 128:	add	r3, r3, #1
 12c:	str	r3, [fp, #-8]
 130:	ldr	r3, [fp, #-16]
 134:	ldr	r2, [r3]
 138:	ldr	r3, [fp, #-8]
 13c:	cmp	r2, r3
 140:	bgt	c4 <heap_apaga+0x28>
 144:	ldr	r3, [fp, #-16]
 148:	ldr	r3, [r3, #8]
 14c:	mov	r0, r3
 150:	bl	0 <free>
 154:	ldr	r0, [fp, #-16]
 158:	bl	0 <free>
 15c:	b	164 <heap_apaga+0xc8>
 160:	nop			; (mov r0, r0)
 164:	sub	sp, fp, #4
 168:	pop	{fp, pc}

0000016c <elemento_cria>:
 16c:	push	{fp, lr}
 170:	add	fp, sp, #4
 174:	sub	sp, sp, #16
 178:	str	r0, [fp, #-16]
 17c:	str	r1, [fp, #-20]	; 0xffffffec
 180:	mov	r0, #8
 184:	bl	0 <malloc>
 188:	mov	r3, r0
 18c:	str	r3, [fp, #-8]
 190:	ldr	r3, [fp, #-8]
 194:	cmp	r3, #0
 198:	bne	1a4 <elemento_cria+0x38>
 19c:	mov	r3, #0
 1a0:	b	214 <elemento_cria+0xa8>
 1a4:	ldr	r0, [fp, #-20]	; 0xffffffec
 1a8:	bl	0 <strlen>
 1ac:	mov	r3, r0
 1b0:	add	r3, r3, #1
 1b4:	mov	r1, #1
 1b8:	mov	r0, r3
 1bc:	bl	0 <calloc>
 1c0:	mov	r3, r0
 1c4:	mov	r2, r3
 1c8:	ldr	r3, [fp, #-8]
 1cc:	str	r2, [r3, #4]
 1d0:	ldr	r3, [fp, #-8]
 1d4:	ldr	r3, [r3, #4]
 1d8:	cmp	r3, #0
 1dc:	bne	1f0 <elemento_cria+0x84>
 1e0:	ldr	r0, [fp, #-8]
 1e4:	bl	0 <free>
 1e8:	mov	r3, #0
 1ec:	b	214 <elemento_cria+0xa8>
 1f0:	ldr	r3, [fp, #-8]
 1f4:	ldr	r3, [r3, #4]
 1f8:	ldr	r1, [fp, #-20]	; 0xffffffec
 1fc:	mov	r0, r3
 200:	bl	0 <strcpy>
 204:	ldr	r3, [fp, #-8]
 208:	ldr	r2, [fp, #-16]
 20c:	str	r2, [r3]
 210:	ldr	r3, [fp, #-8]
 214:	mov	r0, r3
 218:	sub	sp, fp, #4
 21c:	pop	{fp, pc}

00000220 <heap_insere>:
 220:	push	{fp, lr}
 224:	add	fp, sp, #4
 228:	sub	sp, sp, #32
 22c:	str	r0, [fp, #-24]	; 0xffffffe8
 230:	str	r1, [fp, #-28]	; 0xffffffe4
 234:	str	r2, [fp, #-32]	; 0xffffffe0
 238:	ldr	r3, [fp, #-24]	; 0xffffffe8
 23c:	ldr	r2, [r3]
 240:	ldr	r3, [fp, #-24]	; 0xffffffe8
 244:	ldr	r3, [r3, #4]
 248:	cmp	r2, r3
 24c:	blt	258 <heap_insere+0x38>
 250:	mov	r3, #0
 254:	b	3c0 <heap_insere+0x1a0>
 258:	ldr	r1, [fp, #-28]	; 0xffffffe4
 25c:	ldr	r0, [fp, #-32]	; 0xffffffe0
 260:	bl	16c <elemento_cria>
 264:	str	r0, [fp, #-12]
 268:	ldr	r3, [fp, #-12]
 26c:	cmp	r3, #0
 270:	bne	27c <heap_insere+0x5c>
 274:	mov	r3, #0
 278:	b	3c0 <heap_insere+0x1a0>
 27c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 280:	ldr	r3, [r3]
 284:	str	r3, [fp, #-8]
 288:	ldr	r3, [fp, #-24]	; 0xffffffe8
 28c:	ldr	r2, [r3, #8]
 290:	ldr	r3, [fp, #-8]
 294:	lsl	r3, r3, #2
 298:	add	r3, r2, r3
 29c:	ldr	r2, [fp, #-12]
 2a0:	str	r2, [r3]
 2a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2a8:	ldr	r3, [r3]
 2ac:	add	r2, r3, #1
 2b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2b4:	str	r2, [r3]
 2b8:	b	35c <heap_insere+0x13c>
 2bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2c0:	ldr	r2, [r3, #8]
 2c4:	ldr	r3, [fp, #-8]
 2c8:	sub	r3, r3, #1
 2cc:	lsr	r1, r3, #31
 2d0:	add	r3, r1, r3
 2d4:	asr	r3, r3, #1
 2d8:	lsl	r3, r3, #2
 2dc:	add	r3, r2, r3
 2e0:	ldr	r3, [r3]
 2e4:	str	r3, [fp, #-16]
 2e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2ec:	ldr	r2, [r3, #8]
 2f0:	ldr	r3, [fp, #-8]
 2f4:	sub	r3, r3, #1
 2f8:	lsr	r1, r3, #31
 2fc:	add	r3, r1, r3
 300:	asr	r3, r3, #1
 304:	lsl	r3, r3, #2
 308:	add	r3, r2, r3
 30c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 310:	ldr	r1, [r2, #8]
 314:	ldr	r2, [fp, #-8]
 318:	lsl	r2, r2, #2
 31c:	add	r2, r1, r2
 320:	ldr	r2, [r2]
 324:	str	r2, [r3]
 328:	ldr	r3, [fp, #-24]	; 0xffffffe8
 32c:	ldr	r2, [r3, #8]
 330:	ldr	r3, [fp, #-8]
 334:	lsl	r3, r3, #2
 338:	add	r3, r2, r3
 33c:	ldr	r2, [fp, #-16]
 340:	str	r2, [r3]
 344:	ldr	r3, [fp, #-8]
 348:	sub	r3, r3, #1
 34c:	lsr	r2, r3, #31
 350:	add	r3, r2, r3
 354:	asr	r3, r3, #1
 358:	str	r3, [fp, #-8]
 35c:	ldr	r3, [fp, #-8]
 360:	cmp	r3, #0
 364:	beq	3bc <heap_insere+0x19c>
 368:	ldr	r3, [fp, #-24]	; 0xffffffe8
 36c:	ldr	r2, [r3, #8]
 370:	ldr	r3, [fp, #-8]
 374:	lsl	r3, r3, #2
 378:	add	r3, r2, r3
 37c:	ldr	r0, [r3]
 380:	ldr	r3, [fp, #-24]	; 0xffffffe8
 384:	ldr	r2, [r3, #8]
 388:	ldr	r3, [fp, #-8]
 38c:	sub	r3, r3, #1
 390:	lsr	r1, r3, #31
 394:	add	r3, r1, r3
 398:	asr	r3, r3, #1
 39c:	lsl	r3, r3, #2
 3a0:	add	r3, r2, r3
 3a4:	ldr	r3, [r3]
 3a8:	mov	r1, r3
 3ac:	bl	744 <menor_que>
 3b0:	mov	r3, r0
 3b4:	cmp	r3, #0
 3b8:	bne	2bc <heap_insere+0x9c>
 3bc:	mov	r3, #1
 3c0:	mov	r0, r3
 3c4:	sub	sp, fp, #4
 3c8:	pop	{fp, pc}

000003cc <heap_remove>:
 3cc:	push	{fp, lr}
 3d0:	add	fp, sp, #4
 3d4:	sub	sp, sp, #24
 3d8:	str	r0, [fp, #-24]	; 0xffffffe8
 3dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3e0:	cmp	r3, #0
 3e4:	beq	3f8 <heap_remove+0x2c>
 3e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3ec:	ldr	r3, [r3]
 3f0:	cmp	r3, #0
 3f4:	bgt	400 <heap_remove+0x34>
 3f8:	mov	r3, #0
 3fc:	b	5f4 <heap_remove+0x228>
 400:	ldr	r3, [fp, #-24]	; 0xffffffe8
 404:	ldr	r3, [r3, #8]
 408:	ldr	r3, [r3]
 40c:	ldr	r3, [r3, #4]
 410:	str	r3, [fp, #-16]
 414:	ldr	r3, [fp, #-24]	; 0xffffffe8
 418:	ldr	r3, [r3, #8]
 41c:	ldr	r3, [r3]
 420:	mov	r0, r3
 424:	bl	0 <free>
 428:	ldr	r3, [fp, #-24]	; 0xffffffe8
 42c:	ldr	r3, [r3]
 430:	sub	r2, r3, #1
 434:	ldr	r3, [fp, #-24]	; 0xffffffe8
 438:	str	r2, [r3]
 43c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 440:	ldr	r3, [r3, #8]
 444:	ldr	r2, [fp, #-24]	; 0xffffffe8
 448:	ldr	r1, [r2, #8]
 44c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 450:	ldr	r2, [r2]
 454:	lsl	r2, r2, #2
 458:	add	r2, r1, r2
 45c:	ldr	r2, [r2]
 460:	str	r2, [r3]
 464:	ldr	r3, [fp, #-24]	; 0xffffffe8
 468:	ldr	r2, [r3, #8]
 46c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 470:	ldr	r3, [r3]
 474:	lsl	r3, r3, #2
 478:	add	r3, r2, r3
 47c:	mov	r2, #0
 480:	str	r2, [r3]
 484:	mov	r3, #0
 488:	str	r3, [fp, #-8]
 48c:	b	5cc <heap_remove+0x200>
 490:	ldr	r3, [fp, #-8]
 494:	lsl	r3, r3, #1
 498:	add	r3, r3, #1
 49c:	str	r3, [fp, #-12]
 4a0:	ldr	r3, [fp, #-8]
 4a4:	add	r3, r3, #1
 4a8:	lsl	r2, r3, #1
 4ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4b0:	ldr	r3, [r3]
 4b4:	cmp	r2, r3
 4b8:	bge	518 <heap_remove+0x14c>
 4bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4c0:	ldr	r2, [r3, #8]
 4c4:	ldr	r3, [fp, #-8]
 4c8:	lsl	r3, r3, #3
 4cc:	add	r3, r3, #8
 4d0:	add	r3, r2, r3
 4d4:	ldr	r0, [r3]
 4d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4dc:	ldr	r2, [r3, #8]
 4e0:	ldr	r3, [fp, #-8]
 4e4:	lsl	r3, r3, #3
 4e8:	add	r3, r3, #4
 4ec:	add	r3, r2, r3
 4f0:	ldr	r3, [r3]
 4f4:	mov	r1, r3
 4f8:	bl	744 <menor_que>
 4fc:	mov	r3, r0
 500:	cmp	r3, #0
 504:	beq	518 <heap_remove+0x14c>
 508:	ldr	r3, [fp, #-8]
 50c:	add	r3, r3, #1
 510:	lsl	r3, r3, #1
 514:	str	r3, [fp, #-12]
 518:	ldr	r3, [fp, #-24]	; 0xffffffe8
 51c:	ldr	r2, [r3, #8]
 520:	ldr	r3, [fp, #-12]
 524:	lsl	r3, r3, #2
 528:	add	r3, r2, r3
 52c:	ldr	r0, [r3]
 530:	ldr	r3, [fp, #-24]	; 0xffffffe8
 534:	ldr	r2, [r3, #8]
 538:	ldr	r3, [fp, #-8]
 53c:	lsl	r3, r3, #2
 540:	add	r3, r2, r3
 544:	ldr	r3, [r3]
 548:	mov	r1, r3
 54c:	bl	744 <menor_que>
 550:	mov	r3, r0
 554:	cmp	r3, #0
 558:	beq	5ec <heap_remove+0x220>
 55c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 560:	ldr	r2, [r3, #8]
 564:	ldr	r3, [fp, #-12]
 568:	lsl	r3, r3, #2
 56c:	add	r3, r2, r3
 570:	ldr	r3, [r3]
 574:	str	r3, [fp, #-20]	; 0xffffffec
 578:	ldr	r3, [fp, #-24]	; 0xffffffe8
 57c:	ldr	r2, [r3, #8]
 580:	ldr	r3, [fp, #-12]
 584:	lsl	r3, r3, #2
 588:	add	r3, r2, r3
 58c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 590:	ldr	r1, [r2, #8]
 594:	ldr	r2, [fp, #-8]
 598:	lsl	r2, r2, #2
 59c:	add	r2, r1, r2
 5a0:	ldr	r2, [r2]
 5a4:	str	r2, [r3]
 5a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5ac:	ldr	r2, [r3, #8]
 5b0:	ldr	r3, [fp, #-8]
 5b4:	lsl	r3, r3, #2
 5b8:	add	r3, r2, r3
 5bc:	ldr	r2, [fp, #-20]	; 0xffffffec
 5c0:	str	r2, [r3]
 5c4:	ldr	r3, [fp, #-12]
 5c8:	str	r3, [fp, #-8]
 5cc:	ldr	r3, [fp, #-8]
 5d0:	lsl	r3, r3, #1
 5d4:	add	r2, r3, #1
 5d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5dc:	ldr	r3, [r3]
 5e0:	cmp	r2, r3
 5e4:	blt	490 <heap_remove+0xc4>
 5e8:	b	5f0 <heap_remove+0x224>
 5ec:	nop			; (mov r0, r0)
 5f0:	ldr	r3, [fp, #-16]
 5f4:	mov	r0, r3
 5f8:	sub	sp, fp, #4
 5fc:	pop	{fp, pc}

00000600 <mostraHeap>:
 600:	push	{fp, lr}
 604:	add	fp, sp, #4
 608:	sub	sp, sp, #16
 60c:	str	r0, [fp, #-16]
 610:	str	r1, [fp, #-20]	; 0xffffffec
 614:	mov	r3, #0
 618:	str	r3, [fp, #-12]
 61c:	ldr	r3, [fp, #-16]
 620:	ldr	r2, [r3]
 624:	ldr	r3, [fp, #-20]	; 0xffffffec
 628:	cmp	r2, r3
 62c:	ble	71c <mostraHeap+0x11c>
 630:	ldr	r3, [fp, #-20]	; 0xffffffec
 634:	str	r3, [fp, #-8]
 638:	b	660 <mostraHeap+0x60>
 63c:	ldr	r3, [fp, #-8]
 640:	sub	r3, r3, #1
 644:	lsr	r2, r3, #31
 648:	add	r3, r2, r3
 64c:	asr	r3, r3, #1
 650:	str	r3, [fp, #-8]
 654:	ldr	r3, [fp, #-12]
 658:	add	r3, r3, #1
 65c:	str	r3, [fp, #-12]
 660:	ldr	r3, [fp, #-8]
 664:	cmp	r3, #0
 668:	bgt	63c <mostraHeap+0x3c>
 66c:	ldr	r3, [fp, #-20]	; 0xffffffec
 670:	lsl	r3, r3, #1
 674:	add	r3, r3, #1
 678:	mov	r1, r3
 67c:	ldr	r0, [fp, #-16]
 680:	bl	600 <mostraHeap>
 684:	mov	r3, #0
 688:	str	r3, [fp, #-8]
 68c:	b	6a4 <mostraHeap+0xa4>
 690:	ldr	r0, [pc, #164]	; 73c <mostraHeap+0x13c>
 694:	bl	0 <printf>
 698:	ldr	r3, [fp, #-8]
 69c:	add	r3, r3, #1
 6a0:	str	r3, [fp, #-8]
 6a4:	ldr	r2, [fp, #-12]
 6a8:	mov	r3, r2
 6ac:	lsl	r3, r3, #1
 6b0:	add	r2, r3, r2
 6b4:	ldr	r3, [fp, #-8]
 6b8:	cmp	r2, r3
 6bc:	bgt	690 <mostraHeap+0x90>
 6c0:	ldr	r3, [fp, #-16]
 6c4:	ldr	r2, [r3, #8]
 6c8:	ldr	r3, [fp, #-20]	; 0xffffffec
 6cc:	lsl	r3, r3, #2
 6d0:	add	r3, r2, r3
 6d4:	ldr	r3, [r3]
 6d8:	ldr	r1, [r3, #4]
 6dc:	ldr	r3, [fp, #-16]
 6e0:	ldr	r2, [r3, #8]
 6e4:	ldr	r3, [fp, #-20]	; 0xffffffec
 6e8:	lsl	r3, r3, #2
 6ec:	add	r3, r2, r3
 6f0:	ldr	r3, [r3]
 6f4:	ldr	r3, [r3]
 6f8:	mov	r2, r3
 6fc:	ldr	r0, [pc, #60]	; 740 <mostraHeap+0x140>
 700:	bl	0 <printf>
 704:	ldr	r3, [fp, #-20]	; 0xffffffec
 708:	add	r3, r3, #1
 70c:	lsl	r3, r3, #1
 710:	mov	r1, r3
 714:	ldr	r0, [fp, #-16]
 718:	bl	600 <mostraHeap>
 71c:	ldr	r3, [fp, #-12]
 720:	cmp	r3, #0
 724:	bne	730 <mostraHeap+0x130>
 728:	mov	r0, #10
 72c:	bl	0 <putchar>
 730:	nop			; (mov r0, r0)
 734:	sub	sp, fp, #4
 738:	pop	{fp, pc}
 73c:	.word	0x00000000
 740:	.word	0x00000008

00000744 <menor_que>:
 744:	push	{fp}		; (str fp, [sp, #-4]!)
 748:	add	fp, sp, #0
 74c:	sub	sp, sp, #12
 750:	str	r0, [fp, #-8]
 754:	str	r1, [fp, #-12]
 758:	ldr	r3, [fp, #-8]
 75c:	cmp	r3, #0
 760:	beq	770 <menor_que+0x2c>
 764:	ldr	r3, [fp, #-12]
 768:	cmp	r3, #0
 76c:	bne	778 <menor_que+0x34>
 770:	mov	r3, #0
 774:	b	798 <menor_que+0x54>
 778:	ldr	r3, [fp, #-8]
 77c:	ldr	r2, [r3]
 780:	ldr	r3, [fp, #-12]
 784:	ldr	r3, [r3]
 788:	cmp	r2, r3
 78c:	movlt	r3, #1
 790:	movge	r3, #0
 794:	uxtb	r3, r3
 798:	mov	r0, r3
 79c:	add	sp, fp, #0
 7a0:	pop	{fp}		; (ldr fp, [sp], #4)
 7a4:	bx	lr
