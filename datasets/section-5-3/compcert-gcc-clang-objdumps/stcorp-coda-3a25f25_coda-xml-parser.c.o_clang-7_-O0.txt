
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_parse>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #688	; 0x2b0
       c:	sub	sp, sp, #8192	; 0x2000
      10:	str	r0, [fp, #-16]
      14:	add	r0, sp, #132	; 0x84
      18:	bl	5a4 <parser_info_init>
      1c:	movw	r0, #0
      20:	movw	lr, #32
      24:	and	r1, lr, #255	; 0xff
      28:	bl	0 <coda_XML_ParserCreateNS>
      2c:	str	r0, [sp, #132]	; 0x84
      30:	ldr	r0, [sp, #132]	; 0x84
      34:	movw	r1, #0
      38:	cmp	r0, r1
      3c:	bne	5c <coda_xml_parse+0x5c>
      40:	mvn	r0, #13
      44:	movw	r1, #0
      48:	movt	r1, #0
      4c:	bl	0 <coda_set_error>
      50:	mvn	r0, #0
      54:	str	r0, [fp, #-12]
      58:	b	58c <coda_xml_parse+0x58c>
      5c:	ldr	r0, [fp, #-16]
      60:	str	r0, [sp, #140]	; 0x8c
      64:	ldr	r0, [fp, #-16]
      68:	ldr	r0, [r0, #24]
      6c:	movw	r1, #0
      70:	cmp	r0, r1
      74:	movw	r0, #1
      78:	str	r0, [sp, #60]	; 0x3c
      7c:	beq	a0 <coda_xml_parse+0xa0>
      80:	ldr	r0, [fp, #-16]
      84:	ldr	r0, [r0, #24]
      88:	ldr	r0, [r0, #28]
      8c:	movw	r1, #0
      90:	cmp	r0, r1
      94:	movw	r0, #0
      98:	moveq	r0, #1
      9c:	str	r0, [sp, #60]	; 0x3c
      a0:	ldr	r0, [sp, #60]	; 0x3c
      a4:	and	r0, r0, #1
      a8:	str	r0, [sp, #664]	; 0x298
      ac:	ldr	r0, [sp, #664]	; 0x298
      b0:	cmp	r0, #0
      b4:	beq	104 <coda_xml_parse+0x104>
      b8:	movw	r0, #2
      bc:	bl	0 <coda_type_record_new>
      c0:	str	r0, [sp, #120]	; 0x78
      c4:	ldr	r0, [sp, #120]	; 0x78
      c8:	movw	lr, #0
      cc:	cmp	r0, lr
      d0:	bne	e8 <coda_xml_parse+0xe8>
      d4:	ldr	r0, [sp, #132]	; 0x84
      d8:	bl	0 <coda_XML_ParserFree>
      dc:	mvn	r0, #0
      e0:	str	r0, [fp, #-12]
      e4:	b	58c <coda_xml_parse+0x58c>
      e8:	ldr	r0, [sp, #120]	; 0x78
      ec:	movw	r1, #0
      f0:	bl	0 <coda_mem_record_new>
      f4:	str	r0, [sp, #276]	; 0x114
      f8:	ldr	r0, [sp, #120]	; 0x78
      fc:	bl	0 <coda_type_release>
     100:	b	158 <coda_xml_parse+0x158>
     104:	ldr	r0, [fp, #-16]
     108:	ldr	r0, [r0, #24]
     10c:	ldr	r0, [r0, #28]
     110:	ldr	r0, [r0, #8]
     114:	cmp	r0, #0
     118:	bne	120 <coda_xml_parse+0x120>
     11c:	b	140 <coda_xml_parse+0x140>
     120:	movw	r0, #0
     124:	movt	r0, #0
     128:	movw	r1, #0
     12c:	movt	r1, #0
     130:	movw	r2, #774	; 0x306
     134:	movw	r3, #0
     138:	movt	r3, #0
     13c:	bl	0 <__assert_fail>
     140:	ldr	r0, [fp, #-16]
     144:	ldr	r0, [r0, #24]
     148:	ldr	r0, [r0, #28]
     14c:	movw	r1, #0
     150:	bl	0 <coda_mem_record_new>
     154:	str	r0, [sp, #276]	; 0x114
     158:	ldr	r0, [sp, #276]	; 0x114
     15c:	movw	r1, #0
     160:	cmp	r0, r1
     164:	bne	17c <coda_xml_parse+0x17c>
     168:	add	r0, sp, #132	; 0x84
     16c:	bl	604 <parser_info_cleanup>
     170:	mvn	r0, #0
     174:	str	r0, [fp, #-12]
     178:	b	58c <coda_xml_parse+0x58c>
     17c:	ldr	r0, [sp, #276]	; 0x114
     180:	add	r0, r0, #4
     184:	str	r0, [sp, #148]	; 0x94
     188:	mvn	r0, #0
     18c:	str	r0, [sp, #404]	; 0x194
     190:	mov	r0, #0
     194:	str	r0, [sp, #532]	; 0x214
     198:	str	r0, [sp, #144]	; 0x90
     19c:	ldr	r0, [sp, #132]	; 0x84
     1a0:	add	r1, sp, #132	; 0x84
     1a4:	bl	0 <coda_XML_SetUserData>
     1a8:	ldr	r0, [sp, #132]	; 0x84
     1ac:	mov	r1, #2
     1b0:	bl	0 <coda_XML_SetParamEntityParsing>
     1b4:	ldr	r1, [sp, #132]	; 0x84
     1b8:	movw	lr, #0
     1bc:	movt	lr, #0
     1c0:	movw	r2, #0
     1c4:	movt	r2, #0
     1c8:	str	r0, [sp, #56]	; 0x38
     1cc:	mov	r0, r1
     1d0:	mov	r1, lr
     1d4:	bl	0 <coda_XML_SetElementHandler>
     1d8:	ldr	r0, [sp, #132]	; 0x84
     1dc:	movw	r1, #0
     1e0:	movt	r1, #0
     1e4:	bl	0 <coda_XML_SetCharacterDataHandler>
     1e8:	ldr	r0, [sp, #132]	; 0x84
     1ec:	movw	r1, #0
     1f0:	movt	r1, #0
     1f4:	bl	0 <coda_XML_SetNotStandaloneHandler>
     1f8:	ldr	r0, [fp, #-16]
     1fc:	ldr	r0, [r0, #52]	; 0x34
     200:	ldr	r1, [r0, #8]
     204:	ldr	r0, [r0, #12]
     208:	asr	r2, r0, #31
     20c:	adds	r1, r1, r2, lsr #19
     210:	adc	r0, r0, #0
     214:	lsr	r1, r1, #13
     218:	orr	r0, r1, r0, lsl #19
     21c:	str	r0, [sp, #128]	; 0x80
     220:	ldr	r0, [fp, #-16]
     224:	ldr	r0, [r0, #52]	; 0x34
     228:	ldr	r1, [r0, #8]
     22c:	ldr	r0, [r0, #12]
     230:	ldr	r2, [sp, #128]	; 0x80
     234:	lsl	lr, r2, #13
     238:	rsbs	r1, r1, r2, lsl #13
     23c:	rscs	r0, r0, lr, asr #31
     240:	str	r1, [sp, #52]	; 0x34
     244:	str	r0, [sp, #48]	; 0x30
     248:	bge	25c <coda_xml_parse+0x25c>
     24c:	b	250 <coda_xml_parse+0x250>
     250:	ldr	r0, [sp, #128]	; 0x80
     254:	add	r0, r0, #1
     258:	str	r0, [sp, #128]	; 0x80
     25c:	movw	r0, #0
     260:	str	r0, [sp, #124]	; 0x7c
     264:	ldr	r0, [sp, #124]	; 0x7c
     268:	ldr	r1, [sp, #128]	; 0x80
     26c:	cmp	r0, r1
     270:	bge	518 <coda_xml_parse+0x518>
     274:	ldr	r0, [fp, #-16]
     278:	ldr	r0, [r0, #52]	; 0x34
     27c:	ldr	r0, [r0, #52]	; 0x34
     280:	cmp	r0, #0
     284:	beq	2ec <coda_xml_parse+0x2ec>
     288:	ldr	r0, [sp, #124]	; 0x7c
     28c:	ldr	r1, [sp, #128]	; 0x80
     290:	sub	r1, r1, #1
     294:	cmp	r0, r1
     298:	bge	2a8 <coda_xml_parse+0x2a8>
     29c:	movw	r0, #8192	; 0x2000
     2a0:	str	r0, [sp, #112]	; 0x70
     2a4:	b	2cc <coda_xml_parse+0x2cc>
     2a8:	ldr	r0, [fp, #-16]
     2ac:	ldr	r0, [r0, #52]	; 0x34
     2b0:	ldr	r0, [r0, #8]
     2b4:	ldr	r1, [sp, #128]	; 0x80
     2b8:	movw	r2, #57344	; 0xe000
     2bc:	movt	r2, #65535	; 0xffff
     2c0:	add	r1, r2, r1, lsl #13
     2c4:	sub	r0, r0, r1
     2c8:	str	r0, [sp, #112]	; 0x70
     2cc:	ldr	r0, [fp, #-16]
     2d0:	ldr	r0, [r0, #52]	; 0x34
     2d4:	ldr	r0, [r0, #48]	; 0x30
     2d8:	ldr	r1, [sp, #124]	; 0x7c
     2dc:	lsl	r1, r1, #13
     2e0:	add	r0, r0, r1
     2e4:	str	r0, [sp, #116]	; 0x74
     2e8:	b	3ec <coda_xml_parse+0x3ec>
     2ec:	ldr	r0, [fp, #-16]
     2f0:	ldr	r0, [r0, #52]	; 0x34
     2f4:	ldr	r0, [r0, #56]	; 0x38
     2f8:	ldr	r1, [sp, #124]	; 0x7c
     2fc:	lsl	r1, r1, #13
     300:	movw	r2, #0
     304:	bl	0 <lseek>
     308:	cmp	r0, #0
     30c:	bge	380 <coda_xml_parse+0x380>
     310:	add	r2, sp, #87	; 0x57
     314:	ldr	r0, [sp, #124]	; 0x7c
     318:	lsl	r1, r0, #13
     31c:	mov	r3, r1
     320:	sbfx	r0, r0, #18, #1
     324:	str	r0, [sp, #44]	; 0x2c
     328:	mov	r0, r1
     32c:	ldr	r1, [sp, #44]	; 0x2c
     330:	str	r3, [sp, #40]	; 0x28
     334:	bl	0 <coda_str64>
     338:	add	r2, sp, #87	; 0x57
     33c:	str	r2, [sp, #36]	; 0x24
     340:	bl	0 <__errno_location>
     344:	ldr	r0, [r0]
     348:	bl	0 <strerror>
     34c:	mvn	r1, #21
     350:	str	r0, [sp, #32]
     354:	mov	r0, r1
     358:	movw	r1, #0
     35c:	movt	r1, #0
     360:	ldr	r2, [sp, #36]	; 0x24
     364:	ldr	r3, [sp, #32]
     368:	bl	0 <coda_set_error>
     36c:	add	r0, sp, #132	; 0x84
     370:	bl	604 <parser_info_cleanup>
     374:	mvn	r0, #0
     378:	str	r0, [fp, #-12]
     37c:	b	58c <coda_xml_parse+0x58c>
     380:	add	r1, sp, #680	; 0x2a8
     384:	ldr	r0, [fp, #-16]
     388:	ldr	r0, [r0, #52]	; 0x34
     38c:	ldr	r0, [r0, #56]	; 0x38
     390:	movw	r2, #8192	; 0x2000
     394:	bl	0 <read>
     398:	str	r0, [sp, #112]	; 0x70
     39c:	ldr	r0, [sp, #112]	; 0x70
     3a0:	cmp	r0, #0
     3a4:	bge	3e4 <coda_xml_parse+0x3e4>
     3a8:	bl	0 <__errno_location>
     3ac:	ldr	r0, [r0]
     3b0:	bl	0 <strerror>
     3b4:	mvn	lr, #21
     3b8:	str	r0, [sp, #28]
     3bc:	mov	r0, lr
     3c0:	movw	r1, #0
     3c4:	movt	r1, #0
     3c8:	ldr	r2, [sp, #28]
     3cc:	bl	0 <coda_set_error>
     3d0:	add	r0, sp, #132	; 0x84
     3d4:	bl	604 <parser_info_cleanup>
     3d8:	mvn	r0, #0
     3dc:	str	r0, [fp, #-12]
     3e0:	b	58c <coda_xml_parse+0x58c>
     3e4:	add	r0, sp, #680	; 0x2a8
     3e8:	str	r0, [sp, #116]	; 0x74
     3ec:	ldr	r0, [pc, #420]	; 598 <coda_xml_parse+0x598>
     3f0:	ldr	r0, [pc, r0]
     3f4:	str	r0, [sp, #24]
     3f8:	bl	0 <__aeabi_read_tp>
     3fc:	mov	ip, #0
     400:	ldr	lr, [sp, #24]
     404:	str	ip, [r0, lr]
     408:	ldr	r0, [sp, #132]	; 0x84
     40c:	ldr	r1, [sp, #116]	; 0x74
     410:	ldr	r2, [sp, #112]	; 0x70
     414:	ldr	ip, [sp, #124]	; 0x7c
     418:	ldr	lr, [sp, #128]	; 0x80
     41c:	sub	lr, lr, #1
     420:	cmp	ip, lr
     424:	movw	ip, #0
     428:	moveq	ip, #1
     42c:	and	r3, ip, #1
     430:	bl	0 <coda_XML_Parse>
     434:	str	r0, [sp, #108]	; 0x6c
     438:	ldr	r0, [sp, #108]	; 0x6c
     43c:	cmp	r0, #0
     440:	beq	464 <coda_xml_parse+0x464>
     444:	ldr	r0, [pc, #336]	; 59c <coda_xml_parse+0x59c>
     448:	ldr	r0, [pc, r0]
     44c:	str	r0, [sp, #20]
     450:	bl	0 <__aeabi_read_tp>
     454:	ldr	ip, [sp, #20]
     458:	ldr	r0, [r0, ip]
     45c:	cmp	r0, #0
     460:	beq	504 <coda_xml_parse+0x504>
     464:	ldr	r0, [pc, #308]	; 5a0 <coda_xml_parse+0x5a0>
     468:	ldr	r0, [pc, r0]
     46c:	str	r0, [sp, #16]
     470:	bl	0 <__aeabi_read_tp>
     474:	ldr	ip, [sp, #16]
     478:	ldr	r0, [r0, ip]
     47c:	cmp	r0, #0
     480:	bne	4ac <coda_xml_parse+0x4ac>
     484:	ldr	r0, [sp, #132]	; 0x84
     488:	bl	0 <coda_XML_GetErrorCode>
     48c:	bl	0 <coda_XML_ErrorString>
     490:	mvn	lr, #13
     494:	str	r0, [sp, #12]
     498:	mov	r0, lr
     49c:	movw	r1, #0
     4a0:	movt	r1, #0
     4a4:	ldr	r2, [sp, #12]
     4a8:	bl	0 <coda_set_error>
     4ac:	add	r2, sp, #66	; 0x42
     4b0:	ldr	r0, [sp, #132]	; 0x84
     4b4:	str	r2, [sp, #8]
     4b8:	bl	0 <coda_XML_GetCurrentByteIndex>
     4bc:	add	r2, sp, #66	; 0x42
     4c0:	bl	0 <coda_str64>
     4c4:	ldr	r0, [sp, #132]	; 0x84
     4c8:	bl	0 <coda_XML_GetCurrentLineNumber>
     4cc:	movw	r2, #0
     4d0:	movt	r2, #0
     4d4:	str	r0, [sp, #4]
     4d8:	mov	r0, r2
     4dc:	ldr	r2, [sp, #4]
     4e0:	str	r1, [sp]
     4e4:	mov	r1, r2
     4e8:	ldr	r2, [sp, #8]
     4ec:	bl	0 <coda_add_error_message>
     4f0:	add	r0, sp, #132	; 0x84
     4f4:	bl	604 <parser_info_cleanup>
     4f8:	mvn	r0, #0
     4fc:	str	r0, [fp, #-12]
     500:	b	58c <coda_xml_parse+0x58c>
     504:	b	508 <coda_xml_parse+0x508>
     508:	ldr	r0, [sp, #124]	; 0x7c
     50c:	add	r0, r0, #1
     510:	str	r0, [sp, #124]	; 0x7c
     514:	b	264 <coda_xml_parse+0x264>
     518:	ldr	r0, [sp, #132]	; 0x84
     51c:	bl	0 <coda_XML_ParserFree>
     520:	movw	r0, #0
     524:	str	r0, [sp, #132]	; 0x84
     528:	ldr	r0, [sp, #664]	; 0x298
     52c:	cmp	r0, #0
     530:	beq	568 <coda_xml_parse+0x568>
     534:	add	r0, sp, #132	; 0x84
     538:	add	r0, r0, #144	; 0x90
     53c:	ldr	r1, [sp, #276]	; 0x114
     540:	ldr	r1, [r1, #4]
     544:	bl	0 <coda_mem_type_update>
     548:	cmp	r0, #0
     54c:	beq	564 <coda_xml_parse+0x564>
     550:	add	r0, sp, #132	; 0x84
     554:	bl	604 <parser_info_cleanup>
     558:	mvn	r0, #0
     55c:	str	r0, [fp, #-12]
     560:	b	58c <coda_xml_parse+0x58c>
     564:	b	568 <coda_xml_parse+0x568>
     568:	ldr	r0, [sp, #276]	; 0x114
     56c:	ldr	r1, [fp, #-16]
     570:	str	r0, [r1, #20]
     574:	mvn	r0, #0
     578:	str	r0, [sp, #144]	; 0x90
     57c:	add	r0, sp, #132	; 0x84
     580:	bl	604 <parser_info_cleanup>
     584:	movw	r0, #0
     588:	str	r0, [fp, #-12]
     58c:	ldr	r0, [fp, #-12]
     590:	sub	sp, fp, #8
     594:	pop	{r4, r5, fp, pc}
     598:	.word	0x000001a0
     59c:	.word	0x0000014c
     5a0:	.word	0x00000130

000005a4 <parser_info_init>:
     5a4:	sub	sp, sp, #4
     5a8:	str	r0, [sp]
     5ac:	ldr	r0, [sp]
     5b0:	movw	r1, #0
     5b4:	str	r1, [r0]
     5b8:	ldr	r0, [sp]
     5bc:	str	r1, [r0, #4]
     5c0:	ldr	r0, [sp]
     5c4:	str	r1, [r0, #8]
     5c8:	ldr	r0, [sp]
     5cc:	mvn	r2, #0
     5d0:	str	r2, [r0, #12]
     5d4:	ldr	r0, [sp]
     5d8:	str	r1, [r0, #528]	; 0x210
     5dc:	ldr	r0, [sp]
     5e0:	str	r1, [r0, #532]	; 0x214
     5e4:	ldr	r0, [sp]
     5e8:	str	r1, [r0, #536]	; 0x218
     5ec:	ldr	r0, [sp]
     5f0:	str	r1, [r0, #540]	; 0x21c
     5f4:	ldr	r0, [sp]
     5f8:	str	r1, [r0, #544]	; 0x220
     5fc:	add	sp, sp, #4
     600:	bx	lr

00000604 <parser_info_cleanup>:
     604:	push	{fp, lr}
     608:	mov	fp, sp
     60c:	sub	sp, sp, #8
     610:	str	r0, [sp, #4]
     614:	ldr	r0, [sp, #4]
     618:	ldr	r0, [r0]
     61c:	movw	r1, #0
     620:	cmp	r0, r1
     624:	beq	634 <parser_info_cleanup+0x30>
     628:	ldr	r0, [sp, #4]
     62c:	ldr	r0, [r0]
     630:	bl	0 <coda_XML_ParserFree>
     634:	movw	r0, #0
     638:	str	r0, [sp]
     63c:	ldr	r0, [sp]
     640:	ldr	r1, [sp, #4]
     644:	ldr	r1, [r1, #12]
     648:	cmp	r0, r1
     64c:	bgt	69c <parser_info_cleanup+0x98>
     650:	ldr	r0, [sp, #4]
     654:	add	r0, r0, #144	; 0x90
     658:	ldr	r1, [sp]
     65c:	add	r0, r0, r1, lsl #2
     660:	ldr	r0, [r0]
     664:	movw	r1, #0
     668:	cmp	r0, r1
     66c:	beq	688 <parser_info_cleanup+0x84>
     670:	ldr	r0, [sp, #4]
     674:	add	r0, r0, #144	; 0x90
     678:	ldr	r1, [sp]
     67c:	add	r0, r0, r1, lsl #2
     680:	ldr	r0, [r0]
     684:	bl	0 <coda_dynamic_type_delete>
     688:	b	68c <parser_info_cleanup+0x88>
     68c:	ldr	r0, [sp]
     690:	add	r0, r0, #1
     694:	str	r0, [sp]
     698:	b	63c <parser_info_cleanup+0x38>
     69c:	ldr	r0, [sp, #4]
     6a0:	ldr	r0, [r0, #528]	; 0x210
     6a4:	movw	r1, #0
     6a8:	cmp	r0, r1
     6ac:	beq	6bc <parser_info_cleanup+0xb8>
     6b0:	ldr	r0, [sp, #4]
     6b4:	ldr	r0, [r0, #528]	; 0x210
     6b8:	bl	0 <coda_dynamic_type_delete>
     6bc:	ldr	r0, [sp, #4]
     6c0:	ldr	r0, [r0, #544]	; 0x220
     6c4:	movw	r1, #0
     6c8:	cmp	r0, r1
     6cc:	beq	6dc <parser_info_cleanup+0xd8>
     6d0:	ldr	r0, [sp, #4]
     6d4:	ldr	r0, [r0, #544]	; 0x220
     6d8:	bl	0 <free>
     6dc:	mov	sp, fp
     6e0:	pop	{fp, pc}

000006e4 <start_element_handler>:
     6e4:	push	{fp, lr}
     6e8:	mov	fp, sp
     6ec:	sub	sp, sp, #72	; 0x48
     6f0:	str	r0, [fp, #-4]
     6f4:	str	r1, [fp, #-8]
     6f8:	str	r2, [fp, #-12]
     6fc:	ldr	r0, [fp, #-4]
     700:	str	r0, [fp, #-16]
     704:	ldr	r0, [fp, #-16]
     708:	add	r1, r0, #144	; 0x90
     70c:	ldr	r0, [r0, #12]
     710:	add	r0, r1, r0, lsl #2
     714:	ldr	r0, [r0]
     718:	movw	r1, #0
     71c:	cmp	r0, r1
     720:	beq	7a4 <start_element_handler+0xc0>
     724:	ldr	r0, [fp, #-16]
     728:	add	r1, r0, #144	; 0x90
     72c:	ldr	r0, [r0, #12]
     730:	add	r0, r1, r0, lsl #2
     734:	ldr	r0, [r0]
     738:	ldr	r0, [r0, #4]
     73c:	ldr	r0, [r0]
     740:	cmp	r0, #2
     744:	beq	7a0 <start_element_handler+0xbc>
     748:	ldr	r0, [fp, #-16]
     74c:	ldr	r1, [r0, #12]
     750:	add	r2, r0, r1, lsl #2
     754:	ldr	r2, [r2, #400]	; 0x190
     758:	add	r0, r0, #144	; 0x90
     75c:	add	r0, r0, r1, lsl #2
     760:	ldr	r0, [r0]
     764:	ldr	r0, [r0, #4]
     768:	ldr	r0, [r0]
     76c:	str	r2, [sp, #24]
     770:	bl	0 <coda_type_get_format_name>
     774:	ldr	r1, [pc, #2248]	; 1044 <start_element_handler+0x960>
     778:	str	r0, [sp, #20]
     77c:	mov	r0, r1
     780:	movw	r1, #0
     784:	movt	r1, #0
     788:	ldr	r2, [sp, #24]
     78c:	ldr	r3, [sp, #20]
     790:	bl	0 <coda_set_error>
     794:	ldr	r0, [fp, #-16]
     798:	bl	1788 <abort_parser>
     79c:	b	103c <start_element_handler+0x958>
     7a0:	b	7d4 <start_element_handler+0xf0>
     7a4:	ldr	r0, [pc, #2200]	; 1044 <start_element_handler+0x960>
     7a8:	ldr	r1, [fp, #-16]
     7ac:	add	r2, r1, #400	; 0x190
     7b0:	ldr	r1, [r1, #12]
     7b4:	add	r1, r2, r1, lsl #2
     7b8:	ldr	r2, [r1]
     7bc:	movw	r1, #0
     7c0:	movt	r1, #0
     7c4:	bl	0 <coda_set_error>
     7c8:	ldr	r0, [fp, #-16]
     7cc:	bl	1788 <abort_parser>
     7d0:	b	103c <start_element_handler+0x958>
     7d4:	ldr	r0, [fp, #-16]
     7d8:	movw	r1, #0
     7dc:	str	r1, [r0, #536]	; 0x218
     7e0:	ldr	r0, [fp, #-16]
     7e4:	ldr	r1, [r0, #12]
     7e8:	add	r1, r1, #1
     7ec:	str	r1, [r0, #12]
     7f0:	ldr	r0, [fp, #-16]
     7f4:	ldr	r0, [r0, #12]
     7f8:	cmp	r0, #32
     7fc:	blt	820 <start_element_handler+0x13c>
     800:	ldr	r0, [pc, #2108]	; 1044 <start_element_handler+0x960>
     804:	movw	r1, #0
     808:	movt	r1, #0
     80c:	movw	r2, #32
     810:	bl	0 <coda_set_error>
     814:	ldr	r0, [fp, #-16]
     818:	bl	1788 <abort_parser>
     81c:	b	103c <start_element_handler+0x958>
     820:	ldr	r0, [fp, #-16]
     824:	ldr	r1, [r0, #12]
     828:	add	r0, r0, r1, lsl #2
     82c:	mov	r1, #0
     830:	str	r1, [r0, #144]	; 0x90
     834:	ldr	r0, [fp, #-16]
     838:	add	r1, r0, #144	; 0x90
     83c:	ldr	r0, [r0, #12]
     840:	sub	r0, r0, #1
     844:	add	r0, r1, r0, lsl #2
     848:	ldr	r0, [r0]
     84c:	str	r0, [fp, #-24]	; 0xffffffe8
     850:	ldr	r0, [fp, #-24]	; 0xffffffe8
     854:	ldr	r0, [r0, #4]
     858:	ldr	r0, [r0, #44]	; 0x2c
     85c:	ldr	r1, [fp, #-8]
     860:	bl	0 <coda_hashtable_get_index_from_name>
     864:	str	r0, [fp, #-28]	; 0xffffffe4
     868:	ldr	r0, [fp, #-28]	; 0xffffffe4
     86c:	cmp	r0, #0
     870:	bge	8a8 <start_element_handler+0x1c4>
     874:	ldr	r0, [fp, #-24]	; 0xffffffe8
     878:	ldr	r0, [r0, #4]
     87c:	ldr	r0, [r0, #44]	; 0x2c
     880:	ldr	r1, [fp, #-8]
     884:	str	r0, [sp, #16]
     888:	mov	r0, r1
     88c:	bl	0 <coda_element_name_from_xml_name>
     890:	ldr	r1, [sp, #16]
     894:	str	r0, [sp, #12]
     898:	mov	r0, r1
     89c:	ldr	r1, [sp, #12]
     8a0:	bl	0 <coda_hashtable_get_index_from_name>
     8a4:	str	r0, [fp, #-28]	; 0xffffffe4
     8a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     8ac:	cmp	r0, #0
     8b0:	bge	a44 <start_element_handler+0x360>
     8b4:	ldr	r0, [fp, #-16]
     8b8:	ldr	r0, [r0, #532]	; 0x214
     8bc:	cmp	r0, #0
     8c0:	beq	9e0 <start_element_handler+0x2fc>
     8c4:	movw	r0, #2
     8c8:	bl	0 <coda_type_record_new>
     8cc:	str	r0, [fp, #-20]	; 0xffffffec
     8d0:	ldr	r0, [fp, #-20]	; 0xffffffec
     8d4:	movw	lr, #0
     8d8:	cmp	r0, lr
     8dc:	bne	8ec <start_element_handler+0x208>
     8e0:	ldr	r0, [fp, #-16]
     8e4:	bl	1788 <abort_parser>
     8e8:	b	103c <start_element_handler+0x958>
     8ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8f0:	ldr	r0, [r0, #4]
     8f4:	ldr	r1, [fp, #-8]
     8f8:	ldr	r2, [fp, #-20]	; 0xffffffec
     8fc:	bl	0 <coda_type_record_create_field>
     900:	cmp	r0, #0
     904:	beq	91c <start_element_handler+0x238>
     908:	ldr	r0, [fp, #-20]	; 0xffffffec
     90c:	bl	0 <coda_type_release>
     910:	ldr	r0, [fp, #-16]
     914:	bl	1788 <abort_parser>
     918:	b	103c <start_element_handler+0x958>
     91c:	ldr	r0, [fp, #-20]	; 0xffffffec
     920:	bl	0 <coda_type_release>
     924:	sub	r0, fp, #24
     928:	ldr	lr, [fp, #-24]	; 0xffffffe8
     92c:	ldr	lr, [lr, #4]
     930:	mov	r1, lr
     934:	bl	0 <coda_mem_type_update>
     938:	cmp	r0, #0
     93c:	beq	94c <start_element_handler+0x268>
     940:	ldr	r0, [fp, #-16]
     944:	bl	1788 <abort_parser>
     948:	b	103c <start_element_handler+0x958>
     94c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     950:	ldr	r1, [fp, #-16]
     954:	add	r2, r1, #144	; 0x90
     958:	ldr	r1, [r1, #12]
     95c:	sub	r1, r1, #1
     960:	add	r1, r2, r1, lsl #2
     964:	ldr	r1, [r1]
     968:	cmp	r0, r1
     96c:	bne	974 <start_element_handler+0x290>
     970:	b	994 <start_element_handler+0x2b0>
     974:	movw	r0, #0
     978:	movt	r0, #0
     97c:	movw	r1, #0
     980:	movt	r1, #0
     984:	movw	r2, #394	; 0x18a
     988:	movw	r3, #0
     98c:	movt	r3, #0
     990:	bl	0 <__assert_fail>
     994:	ldr	r0, [fp, #-24]	; 0xffffffe8
     998:	ldr	r0, [r0, #4]
     99c:	ldr	r0, [r0, #44]	; 0x2c
     9a0:	ldr	r1, [fp, #-8]
     9a4:	bl	0 <coda_hashtable_get_index_from_name>
     9a8:	str	r0, [fp, #-28]	; 0xffffffe4
     9ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
     9b0:	cmp	r0, #0
     9b4:	blt	9bc <start_element_handler+0x2d8>
     9b8:	b	9dc <start_element_handler+0x2f8>
     9bc:	movw	r0, #0
     9c0:	movt	r0, #0
     9c4:	movw	r1, #0
     9c8:	movt	r1, #0
     9cc:	movw	r2, #396	; 0x18c
     9d0:	movw	r3, #0
     9d4:	movt	r3, #0
     9d8:	bl	0 <__assert_fail>
     9dc:	b	a40 <start_element_handler+0x35c>
     9e0:	ldr	r0, [fp, #-16]
     9e4:	ldr	r0, [r0, #12]
     9e8:	cmp	r0, #1
     9ec:	bne	a08 <start_element_handler+0x324>
     9f0:	ldr	r0, [pc, #1612]	; 1044 <start_element_handler+0x960>
     9f4:	ldr	r2, [fp, #-8]
     9f8:	movw	r1, #0
     9fc:	movt	r1, #0
     a00:	bl	0 <coda_set_error>
     a04:	b	a34 <start_element_handler+0x350>
     a08:	ldr	r0, [pc, #1588]	; 1044 <start_element_handler+0x960>
     a0c:	ldr	r2, [fp, #-8]
     a10:	ldr	r1, [fp, #-16]
     a14:	add	r3, r1, #400	; 0x190
     a18:	ldr	r1, [r1, #12]
     a1c:	sub	r1, r1, #1
     a20:	add	r1, r3, r1, lsl #2
     a24:	ldr	r3, [r1]
     a28:	movw	r1, #0
     a2c:	movt	r1, #0
     a30:	bl	0 <coda_set_error>
     a34:	ldr	r0, [fp, #-16]
     a38:	bl	1788 <abort_parser>
     a3c:	b	103c <start_element_handler+0x958>
     a40:	b	a44 <start_element_handler+0x360>
     a44:	ldr	r0, [fp, #-28]	; 0xffffffe4
     a48:	ldr	r1, [fp, #-16]
     a4c:	ldr	r2, [r1, #12]
     a50:	add	r1, r1, r2, lsl #2
     a54:	str	r0, [r1, #272]	; 0x110
     a58:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a5c:	ldr	r0, [r0, #4]
     a60:	ldr	r0, [r0, #52]	; 0x34
     a64:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a68:	ldr	r0, [r0, r1, lsl #2]
     a6c:	add	r0, r0, #8
     a70:	ldr	r1, [fp, #-16]
     a74:	ldr	r2, [r1, #12]
     a78:	add	r1, r1, r2, lsl #2
     a7c:	str	r0, [r1, #16]
     a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a84:	ldr	r0, [r0, #4]
     a88:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a8c:	ldr	r2, [fp, #-16]
     a90:	add	r3, r2, #400	; 0x190
     a94:	ldr	r2, [r2, #12]
     a98:	add	r2, r3, r2, lsl #2
     a9c:	bl	0 <coda_type_get_record_field_real_name>
     aa0:	cmp	r0, #0
     aa4:	beq	ab4 <start_element_handler+0x3d0>
     aa8:	ldr	r0, [fp, #-16]
     aac:	bl	1788 <abort_parser>
     ab0:	b	103c <start_element_handler+0x958>
     ab4:	ldr	r0, [fp, #-16]
     ab8:	add	r1, r0, #16
     abc:	ldr	r0, [r0, #12]
     ac0:	add	r0, r1, r0, lsl #2
     ac4:	ldr	r0, [r0]
     ac8:	ldr	r0, [r0]
     acc:	str	r0, [fp, #-20]	; 0xffffffec
     ad0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ad4:	ldr	r0, [r0, #8]
     ad8:	cmp	r0, #1
     adc:	bne	b94 <start_element_handler+0x4b0>
     ae0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ae4:	ldr	r0, [r0]
     ae8:	cmp	r0, #2
     aec:	bne	b90 <start_element_handler+0x4ac>
     af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     af4:	ldr	r0, [r0, #20]
     af8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     afc:	add	r0, r0, r1, lsl #2
     b00:	ldr	r0, [r0]
     b04:	movw	r1, #0
     b08:	cmp	r0, r1
     b0c:	bne	b5c <start_element_handler+0x478>
     b10:	ldr	r0, [fp, #-20]	; 0xffffffec
     b14:	mov	r1, #0
     b18:	bl	0 <coda_mem_array_new>
     b1c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     b20:	ldr	r1, [r1, #20]
     b24:	ldr	lr, [fp, #-28]	; 0xffffffe4
     b28:	str	r0, [r1, lr, lsl #2]
     b2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b30:	ldr	r0, [r0, #20]
     b34:	ldr	r1, [fp, #-28]	; 0xffffffe4
     b38:	add	r0, r0, r1, lsl #2
     b3c:	ldr	r0, [r0]
     b40:	movw	r1, #0
     b44:	cmp	r0, r1
     b48:	bne	b58 <start_element_handler+0x474>
     b4c:	ldr	r0, [fp, #-16]
     b50:	bl	1788 <abort_parser>
     b54:	b	103c <start_element_handler+0x958>
     b58:	b	b5c <start_element_handler+0x478>
     b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
     b60:	add	r0, r0, #40	; 0x28
     b64:	ldr	r1, [fp, #-16]
     b68:	ldr	r2, [r1, #12]
     b6c:	add	r1, r1, r2, lsl #2
     b70:	str	r0, [r1, #16]
     b74:	ldr	r0, [fp, #-16]
     b78:	add	r1, r0, #16
     b7c:	ldr	r0, [r0, #12]
     b80:	add	r0, r1, r0, lsl #2
     b84:	ldr	r0, [r0]
     b88:	ldr	r0, [r0]
     b8c:	str	r0, [fp, #-20]	; 0xffffffec
     b90:	b	d40 <start_element_handler+0x65c>
     b94:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b98:	ldr	r0, [r0, #20]
     b9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ba0:	add	r0, r0, r1, lsl #2
     ba4:	ldr	r0, [r0]
     ba8:	movw	r1, #0
     bac:	cmp	r0, r1
     bb0:	beq	d3c <start_element_handler+0x658>
     bb4:	ldr	r0, [fp, #-16]
     bb8:	ldr	r0, [r0, #532]	; 0x214
     bbc:	cmp	r0, #0
     bc0:	beq	d00 <start_element_handler+0x61c>
     bc4:	movw	r0, #2
     bc8:	bl	0 <coda_type_array_new>
     bcc:	str	r0, [sp, #36]	; 0x24
     bd0:	ldr	r0, [sp, #36]	; 0x24
     bd4:	movw	lr, #0
     bd8:	cmp	r0, lr
     bdc:	bne	bec <start_element_handler+0x508>
     be0:	ldr	r0, [fp, #-16]
     be4:	bl	1788 <abort_parser>
     be8:	b	103c <start_element_handler+0x958>
     bec:	ldr	r0, [sp, #36]	; 0x24
     bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
     bf4:	bl	0 <coda_type_array_set_base_type>
     bf8:	cmp	r0, #0
     bfc:	beq	c14 <start_element_handler+0x530>
     c00:	ldr	r0, [sp, #36]	; 0x24
     c04:	bl	0 <coda_type_release>
     c08:	ldr	r0, [fp, #-16]
     c0c:	bl	1788 <abort_parser>
     c10:	b	103c <start_element_handler+0x958>
     c14:	ldr	r0, [sp, #36]	; 0x24
     c18:	ldr	r1, [fp, #-16]
     c1c:	add	r2, r1, #16
     c20:	ldr	r1, [r1, #12]
     c24:	add	r1, r2, r1, lsl #2
     c28:	ldr	r1, [r1]
     c2c:	str	r0, [r1]
     c30:	ldr	r0, [fp, #-20]	; 0xffffffec
     c34:	bl	0 <coda_type_release>
     c38:	ldr	r0, [sp, #36]	; 0x24
     c3c:	movw	r1, #0
     c40:	bl	0 <coda_type_array_add_variable_dimension>
     c44:	cmp	r0, #0
     c48:	beq	c58 <start_element_handler+0x574>
     c4c:	ldr	r0, [fp, #-16]
     c50:	bl	1788 <abort_parser>
     c54:	b	103c <start_element_handler+0x958>
     c58:	ldr	r0, [sp, #36]	; 0x24
     c5c:	movw	r1, #0
     c60:	bl	0 <coda_mem_array_new>
     c64:	str	r0, [fp, #-32]	; 0xffffffe0
     c68:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c6c:	movw	r1, #0
     c70:	cmp	r0, r1
     c74:	bne	c84 <start_element_handler+0x5a0>
     c78:	ldr	r0, [fp, #-16]
     c7c:	bl	1788 <abort_parser>
     c80:	b	103c <start_element_handler+0x958>
     c84:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c88:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c8c:	ldr	r1, [r1, #20]
     c90:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c94:	add	r1, r1, r2, lsl #2
     c98:	ldr	r1, [r1]
     c9c:	bl	0 <coda_mem_array_add_element>
     ca0:	cmp	r0, #0
     ca4:	beq	cb4 <start_element_handler+0x5d0>
     ca8:	ldr	r0, [fp, #-16]
     cac:	bl	1788 <abort_parser>
     cb0:	b	103c <start_element_handler+0x958>
     cb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cb8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     cbc:	ldr	r1, [r1, #20]
     cc0:	ldr	r2, [fp, #-28]	; 0xffffffe4
     cc4:	str	r0, [r1, r2, lsl #2]
     cc8:	ldr	r0, [sp, #36]	; 0x24
     ccc:	add	r0, r0, #40	; 0x28
     cd0:	ldr	r1, [fp, #-16]
     cd4:	ldr	r2, [r1, #12]
     cd8:	add	r1, r1, r2, lsl #2
     cdc:	str	r0, [r1, #16]
     ce0:	ldr	r0, [fp, #-16]
     ce4:	add	r1, r0, #16
     ce8:	ldr	r0, [r0, #12]
     cec:	add	r0, r1, r0, lsl #2
     cf0:	ldr	r0, [r0]
     cf4:	ldr	r0, [r0]
     cf8:	str	r0, [fp, #-20]	; 0xffffffec
     cfc:	b	d38 <start_element_handler+0x654>
     d00:	ldr	r0, [pc, #828]	; 1044 <start_element_handler+0x960>
     d04:	ldr	r2, [fp, #-8]
     d08:	ldr	r1, [fp, #-16]
     d0c:	add	r3, r1, #400	; 0x190
     d10:	ldr	r1, [r1, #12]
     d14:	sub	r1, r1, #1
     d18:	add	r1, r3, r1, lsl #2
     d1c:	ldr	r3, [r1]
     d20:	movw	r1, #0
     d24:	movt	r1, #0
     d28:	bl	0 <coda_set_error>
     d2c:	ldr	r0, [fp, #-16]
     d30:	bl	1788 <abort_parser>
     d34:	b	103c <start_element_handler+0x958>
     d38:	b	d3c <start_element_handler+0x658>
     d3c:	b	d40 <start_element_handler+0x65c>
     d40:	ldr	r0, [fp, #-20]	; 0xffffffec
     d44:	ldr	r0, [r0, #36]	; 0x24
     d48:	movw	r1, #0
     d4c:	cmp	r0, r1
     d50:	bne	e6c <start_element_handler+0x788>
     d54:	ldr	r0, [fp, #-16]
     d58:	movw	r1, #0
     d5c:	str	r1, [r0, #528]	; 0x210
     d60:	ldr	r0, [fp, #-16]
     d64:	ldr	r0, [r0, #532]	; 0x214
     d68:	cmp	r0, #0
     d6c:	beq	e2c <start_element_handler+0x748>
     d70:	ldr	r0, [fp, #-12]
     d74:	ldr	r0, [r0]
     d78:	movw	r1, #0
     d7c:	cmp	r0, r1
     d80:	bne	da4 <start_element_handler+0x6c0>
     d84:	ldr	r0, [fp, #-8]
     d88:	ldr	r1, [fp, #-8]
     d8c:	str	r0, [sp, #8]
     d90:	mov	r0, r1
     d94:	bl	0 <coda_element_name_from_xml_name>
     d98:	ldr	r1, [sp, #8]
     d9c:	cmp	r1, r0
     da0:	beq	e28 <start_element_handler+0x744>
     da4:	movw	r0, #2
     da8:	bl	0 <coda_type_record_new>
     dac:	ldr	lr, [fp, #-20]	; 0xffffffec
     db0:	str	r0, [lr, #36]	; 0x24
     db4:	ldr	r0, [fp, #-20]	; 0xffffffec
     db8:	ldr	r0, [r0, #36]	; 0x24
     dbc:	movw	lr, #0
     dc0:	cmp	r0, lr
     dc4:	bne	dd4 <start_element_handler+0x6f0>
     dc8:	ldr	r0, [fp, #-16]
     dcc:	bl	1788 <abort_parser>
     dd0:	b	103c <start_element_handler+0x958>
     dd4:	ldr	r0, [fp, #-20]	; 0xffffffec
     dd8:	ldr	r0, [r0, #36]	; 0x24
     ddc:	ldr	r1, [fp, #-16]
     de0:	ldr	r1, [r1, #8]
     de4:	ldr	r2, [fp, #-8]
     de8:	ldr	r3, [fp, #-12]
     dec:	ldr	ip, [fp, #-16]
     df0:	ldr	ip, [ip, #532]	; 0x214
     df4:	str	ip, [sp]
     df8:	bl	17c4 <attribute_record_new>
     dfc:	ldr	r1, [fp, #-16]
     e00:	str	r0, [r1, #528]	; 0x210
     e04:	ldr	r0, [fp, #-16]
     e08:	ldr	r0, [r0, #528]	; 0x210
     e0c:	movw	r1, #0
     e10:	cmp	r0, r1
     e14:	bne	e24 <start_element_handler+0x740>
     e18:	ldr	r0, [fp, #-16]
     e1c:	bl	1788 <abort_parser>
     e20:	b	103c <start_element_handler+0x958>
     e24:	b	e28 <start_element_handler+0x744>
     e28:	b	e68 <start_element_handler+0x784>
     e2c:	ldr	r0, [fp, #-12]
     e30:	ldr	r0, [r0]
     e34:	movw	r1, #0
     e38:	cmp	r0, r1
     e3c:	beq	e64 <start_element_handler+0x780>
     e40:	ldr	r0, [pc, #508]	; 1044 <start_element_handler+0x960>
     e44:	ldr	r1, [fp, #-12]
     e48:	ldr	r2, [r1]
     e4c:	movw	r1, #0
     e50:	movt	r1, #0
     e54:	bl	0 <coda_set_error>
     e58:	ldr	r0, [fp, #-16]
     e5c:	bl	1788 <abort_parser>
     e60:	b	103c <start_element_handler+0x958>
     e64:	b	e68 <start_element_handler+0x784>
     e68:	b	ec0 <start_element_handler+0x7dc>
     e6c:	ldr	r0, [fp, #-20]	; 0xffffffec
     e70:	ldr	r0, [r0, #36]	; 0x24
     e74:	ldr	r1, [fp, #-16]
     e78:	ldr	r1, [r1, #8]
     e7c:	ldr	r2, [fp, #-8]
     e80:	ldr	r3, [fp, #-12]
     e84:	ldr	ip, [fp, #-16]
     e88:	ldr	ip, [ip, #532]	; 0x214
     e8c:	str	ip, [sp]
     e90:	bl	17c4 <attribute_record_new>
     e94:	ldr	r1, [fp, #-16]
     e98:	str	r0, [r1, #528]	; 0x210
     e9c:	ldr	r0, [fp, #-16]
     ea0:	ldr	r0, [r0, #528]	; 0x210
     ea4:	movw	r1, #0
     ea8:	cmp	r0, r1
     eac:	bne	ebc <start_element_handler+0x7d8>
     eb0:	ldr	r0, [fp, #-16]
     eb4:	bl	1788 <abort_parser>
     eb8:	b	103c <start_element_handler+0x958>
     ebc:	b	ec0 <start_element_handler+0x7dc>
     ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ec4:	ldr	r0, [r0]
     ec8:	cmp	r0, #2
     ecc:	bne	103c <start_element_handler+0x958>
     ed0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ed4:	ldr	r0, [r0, #8]
     ed8:	cmp	r0, #0
     edc:	bne	103c <start_element_handler+0x958>
     ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
     ee4:	ldr	r1, [fp, #-16]
     ee8:	ldr	r1, [r1, #528]	; 0x210
     eec:	bl	0 <coda_mem_record_new>
     ef0:	ldr	r1, [fp, #-16]
     ef4:	ldr	lr, [r1, #12]
     ef8:	add	r1, r1, lr, lsl #2
     efc:	str	r0, [r1, #144]	; 0x90
     f00:	ldr	r0, [fp, #-16]
     f04:	add	r1, r0, #144	; 0x90
     f08:	ldr	r0, [r0, #12]
     f0c:	add	r0, r1, r0, lsl #2
     f10:	ldr	r0, [r0]
     f14:	movw	r1, #0
     f18:	cmp	r0, r1
     f1c:	bne	f2c <start_element_handler+0x848>
     f20:	ldr	r0, [fp, #-16]
     f24:	bl	1788 <abort_parser>
     f28:	b	103c <start_element_handler+0x958>
     f2c:	movw	r0, #0
     f30:	str	r0, [sp, #32]
     f34:	ldr	r0, [sp, #32]
     f38:	ldr	r1, [fp, #-16]
     f3c:	add	r2, r1, #144	; 0x90
     f40:	ldr	r1, [r1, #12]
     f44:	add	r1, r2, r1, lsl #2
     f48:	ldr	r1, [r1]
     f4c:	ldr	r1, [r1, #16]
     f50:	cmp	r0, r1
     f54:	bge	1030 <start_element_handler+0x94c>
     f58:	ldr	r0, [fp, #-20]	; 0xffffffec
     f5c:	ldr	r0, [r0, #52]	; 0x34
     f60:	ldr	r1, [sp, #32]
     f64:	add	r0, r0, r1, lsl #2
     f68:	ldr	r0, [r0]
     f6c:	ldr	r0, [r0, #8]
     f70:	ldr	r0, [r0, #8]
     f74:	cmp	r0, #1
     f78:	bne	101c <start_element_handler+0x938>
     f7c:	ldr	r0, [fp, #-20]	; 0xffffffec
     f80:	ldr	r0, [r0, #52]	; 0x34
     f84:	ldr	r1, [sp, #32]
     f88:	add	r0, r0, r1, lsl #2
     f8c:	ldr	r0, [r0]
     f90:	ldr	r0, [r0, #8]
     f94:	ldr	r0, [r0]
     f98:	cmp	r0, #2
     f9c:	bne	101c <start_element_handler+0x938>
     fa0:	ldr	r0, [fp, #-20]	; 0xffffffec
     fa4:	ldr	r0, [r0, #52]	; 0x34
     fa8:	ldr	r1, [sp, #32]
     fac:	ldr	r0, [r0, r1, lsl #2]
     fb0:	ldr	r0, [r0, #8]
     fb4:	str	r0, [sp, #28]
     fb8:	ldr	r0, [sp, #28]
     fbc:	mov	r1, #0
     fc0:	bl	0 <coda_mem_array_new>
     fc4:	ldr	r1, [fp, #-16]
     fc8:	ldr	lr, [r1, #12]
     fcc:	add	r1, r1, lr, lsl #2
     fd0:	ldr	r1, [r1, #144]	; 0x90
     fd4:	ldr	r1, [r1, #20]
     fd8:	ldr	lr, [sp, #32]
     fdc:	str	r0, [r1, lr, lsl #2]
     fe0:	ldr	r0, [fp, #-16]
     fe4:	ldr	r1, [r0, #12]
     fe8:	add	r0, r0, r1, lsl #2
     fec:	ldr	r0, [r0, #144]	; 0x90
     ff0:	ldr	r0, [r0, #20]
     ff4:	ldr	r1, [sp, #32]
     ff8:	add	r0, r0, r1, lsl #2
     ffc:	ldr	r0, [r0]
    1000:	movw	r1, #0
    1004:	cmp	r0, r1
    1008:	bne	1018 <start_element_handler+0x934>
    100c:	ldr	r0, [fp, #-16]
    1010:	bl	1788 <abort_parser>
    1014:	b	103c <start_element_handler+0x958>
    1018:	b	101c <start_element_handler+0x938>
    101c:	b	1020 <start_element_handler+0x93c>
    1020:	ldr	r0, [sp, #32]
    1024:	add	r0, r0, #1
    1028:	str	r0, [sp, #32]
    102c:	b	f34 <start_element_handler+0x850>
    1030:	ldr	r0, [fp, #-16]
    1034:	movw	r1, #0
    1038:	str	r1, [r0, #528]	; 0x210
    103c:	mov	sp, fp
    1040:	pop	{fp, pc}
    1044:	.word	0xfffffed4

00001048 <end_element_handler>:
    1048:	push	{fp, lr}
    104c:	mov	fp, sp
    1050:	sub	sp, sp, #56	; 0x38
    1054:	str	r0, [fp, #-4]
    1058:	str	r1, [fp, #-8]
    105c:	ldr	r0, [fp, #-4]
    1060:	str	r0, [fp, #-12]
    1064:	ldr	r0, [fp, #-12]
    1068:	ldr	r0, [r0, #4]
    106c:	cmp	r0, #0
    1070:	beq	1078 <end_element_handler+0x30>
    1074:	b	15e4 <end_element_handler+0x59c>
    1078:	ldr	r0, [fp, #-12]
    107c:	add	r1, r0, #144	; 0x90
    1080:	ldr	r0, [r0, #12]
    1084:	add	r0, r1, r0, lsl #2
    1088:	ldr	r0, [r0]
    108c:	movw	r1, #0
    1090:	cmp	r0, r1
    1094:	beq	11d4 <end_element_handler+0x18c>
    1098:	ldr	r0, [fp, #-12]
    109c:	ldr	r0, [r0, #536]	; 0x218
    10a0:	cmp	r0, #0
    10a4:	ble	11d4 <end_element_handler+0x18c>
    10a8:	ldr	r0, [fp, #-12]
    10ac:	ldr	r0, [r0, #544]	; 0x220
    10b0:	ldr	r1, [fp, #-12]
    10b4:	ldr	r1, [r1, #536]	; 0x218
    10b8:	bl	1eb0 <is_whitespace>
    10bc:	cmp	r0, #0
    10c0:	bne	11d4 <end_element_handler+0x18c>
    10c4:	ldr	r0, [fp, #-12]
    10c8:	ldr	r0, [r0, #532]	; 0x214
    10cc:	cmp	r0, #0
    10d0:	beq	10d8 <end_element_handler+0x90>
    10d4:	b	10f8 <end_element_handler+0xb0>
    10d8:	movw	r0, #0
    10dc:	movt	r0, #0
    10e0:	movw	r1, #0
    10e4:	movt	r1, #0
    10e8:	movw	r2, #590	; 0x24e
    10ec:	movw	r3, #0
    10f0:	movt	r3, #0
    10f4:	bl	0 <__assert_fail>
    10f8:	ldr	r0, [fp, #-12]
    10fc:	add	r1, r0, #144	; 0x90
    1100:	ldr	r0, [r0, #12]
    1104:	add	r0, r1, r0, lsl #2
    1108:	ldr	r0, [r0]
    110c:	ldr	r0, [r0, #4]
    1110:	ldr	r0, [r0, #48]	; 0x30
    1114:	cmp	r0, #0
    1118:	ble	114c <end_element_handler+0x104>
    111c:	ldr	r0, [pc, #1224]	; 15ec <end_element_handler+0x5a4>
    1120:	ldr	r1, [fp, #-12]
    1124:	add	r2, r1, #400	; 0x190
    1128:	ldr	r1, [r1, #12]
    112c:	add	r1, r2, r1, lsl #2
    1130:	ldr	r2, [r1]
    1134:	movw	r1, #0
    1138:	movt	r1, #0
    113c:	bl	0 <coda_set_error>
    1140:	ldr	r0, [fp, #-12]
    1144:	bl	1788 <abort_parser>
    1148:	b	15e4 <end_element_handler+0x59c>
    114c:	ldr	r0, [fp, #-12]
    1150:	ldr	r1, [r0, #12]
    1154:	add	r1, r0, r1, lsl #2
    1158:	ldr	r1, [r1, #144]	; 0x90
    115c:	ldr	r1, [r1, #12]
    1160:	str	r1, [r0, #528]	; 0x210
    1164:	ldr	r0, [fp, #-12]
    1168:	ldr	r1, [r0, #12]
    116c:	add	r0, r0, r1, lsl #2
    1170:	ldr	r0, [r0, #144]	; 0x90
    1174:	mov	r1, #0
    1178:	str	r1, [r0, #12]
    117c:	ldr	r0, [fp, #-12]
    1180:	add	r1, r0, #16
    1184:	ldr	r0, [r0, #12]
    1188:	add	r0, r1, r0, lsl #2
    118c:	ldr	r0, [r0]
    1190:	bl	1fa4 <convert_to_text>
    1194:	cmp	r0, #0
    1198:	beq	11a8 <end_element_handler+0x160>
    119c:	ldr	r0, [fp, #-12]
    11a0:	bl	1788 <abort_parser>
    11a4:	b	15e4 <end_element_handler+0x59c>
    11a8:	ldr	r0, [fp, #-12]
    11ac:	ldr	r1, [r0, #12]
    11b0:	add	r0, r0, r1, lsl #2
    11b4:	ldr	r0, [r0, #144]	; 0x90
    11b8:	bl	0 <coda_dynamic_type_delete>
    11bc:	ldr	r0, [fp, #-12]
    11c0:	add	r1, r0, #144	; 0x90
    11c4:	ldr	r0, [r0, #12]
    11c8:	add	r0, r1, r0, lsl #2
    11cc:	movw	r1, #0
    11d0:	str	r1, [r0]
    11d4:	ldr	r0, [fp, #-12]
    11d8:	add	r1, r0, #144	; 0x90
    11dc:	ldr	r0, [r0, #12]
    11e0:	add	r0, r1, r0, lsl #2
    11e4:	ldr	r0, [r0]
    11e8:	movw	r1, #0
    11ec:	cmp	r0, r1
    11f0:	bne	1358 <end_element_handler+0x310>
    11f4:	ldr	r0, [fp, #-12]
    11f8:	add	r1, r0, #16
    11fc:	ldr	r0, [r0, #12]
    1200:	add	r0, r1, r0, lsl #2
    1204:	ldr	r0, [r0]
    1208:	ldr	r0, [r0]
    120c:	str	r0, [sp, #28]
    1210:	ldr	r0, [sp, #28]
    1214:	ldr	r0, [r0, #8]
    1218:	cmp	r0, #6
    121c:	bne	12f8 <end_element_handler+0x2b0>
    1220:	ldr	r0, [fp, #-12]
    1224:	ldr	r0, [r0, #532]	; 0x214
    1228:	cmp	r0, #0
    122c:	bne	1234 <end_element_handler+0x1ec>
    1230:	b	1254 <end_element_handler+0x20c>
    1234:	movw	r0, #0
    1238:	movt	r0, #0
    123c:	movw	r1, #0
    1240:	movt	r1, #0
    1244:	movw	r2, #619	; 0x26b
    1248:	movw	r3, #0
    124c:	movt	r3, #0
    1250:	bl	0 <__assert_fail>
    1254:	ldr	r0, [sp, #28]
    1258:	ldr	r0, [r0, #44]	; 0x2c
    125c:	ldr	r1, [fp, #-12]
    1260:	ldr	r1, [r1, #8]
    1264:	ldr	r2, [fp, #-12]
    1268:	ldr	r3, [r2, #536]	; 0x218
    126c:	ldr	r2, [fp, #-12]
    1270:	ldr	r2, [r2, #544]	; 0x220
    1274:	movw	ip, #0
    1278:	str	r1, [sp, #12]
    127c:	mov	r1, ip
    1280:	ldr	ip, [sp, #12]
    1284:	str	r2, [sp, #8]
    1288:	mov	r2, ip
    128c:	ldr	lr, [sp, #8]
    1290:	str	lr, [sp]
    1294:	bl	0 <coda_mem_data_new>
    1298:	str	r0, [sp, #24]
    129c:	ldr	r0, [sp, #24]
    12a0:	movw	r1, #0
    12a4:	cmp	r0, r1
    12a8:	bne	12b8 <end_element_handler+0x270>
    12ac:	ldr	r0, [fp, #-12]
    12b0:	bl	1788 <abort_parser>
    12b4:	b	15e4 <end_element_handler+0x59c>
    12b8:	ldr	r0, [sp, #28]
    12bc:	ldr	r1, [fp, #-12]
    12c0:	ldr	r1, [r1, #528]	; 0x210
    12c4:	ldr	r2, [sp, #24]
    12c8:	bl	0 <coda_mem_time_new>
    12cc:	str	r0, [fp, #-20]	; 0xffffffec
    12d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    12d4:	movw	r1, #0
    12d8:	cmp	r0, r1
    12dc:	bne	12f4 <end_element_handler+0x2ac>
    12e0:	ldr	r0, [sp, #24]
    12e4:	bl	0 <coda_dynamic_type_delete>
    12e8:	ldr	r0, [fp, #-12]
    12ec:	bl	1788 <abort_parser>
    12f0:	b	15e4 <end_element_handler+0x59c>
    12f4:	b	1348 <end_element_handler+0x300>
    12f8:	ldr	r0, [sp, #28]
    12fc:	ldr	r1, [fp, #-12]
    1300:	ldr	r1, [r1, #528]	; 0x210
    1304:	ldr	r2, [fp, #-12]
    1308:	ldr	r2, [r2, #8]
    130c:	ldr	r3, [fp, #-12]
    1310:	ldr	r3, [r3, #536]	; 0x218
    1314:	ldr	ip, [fp, #-12]
    1318:	ldr	ip, [ip, #544]	; 0x220
    131c:	str	ip, [sp]
    1320:	bl	0 <coda_mem_data_new>
    1324:	str	r0, [fp, #-20]	; 0xffffffec
    1328:	ldr	r0, [fp, #-20]	; 0xffffffec
    132c:	movw	r1, #0
    1330:	cmp	r0, r1
    1334:	bne	1344 <end_element_handler+0x2fc>
    1338:	ldr	r0, [fp, #-12]
    133c:	bl	1788 <abort_parser>
    1340:	b	15e4 <end_element_handler+0x59c>
    1344:	b	1348 <end_element_handler+0x300>
    1348:	ldr	r0, [fp, #-12]
    134c:	movw	r1, #0
    1350:	str	r1, [r0, #528]	; 0x210
    1354:	b	1484 <end_element_handler+0x43c>
    1358:	ldr	r0, [fp, #-12]
    135c:	ldr	r0, [r0, #532]	; 0x214
    1360:	cmp	r0, #0
    1364:	bne	1458 <end_element_handler+0x410>
    1368:	ldr	r0, [fp, #-12]
    136c:	add	r1, r0, #144	; 0x90
    1370:	ldr	r0, [r0, #12]
    1374:	add	r0, r1, r0, lsl #2
    1378:	ldr	r0, [r0]
    137c:	bl	0 <coda_mem_record_validate>
    1380:	cmp	r0, #0
    1384:	beq	1394 <end_element_handler+0x34c>
    1388:	ldr	r0, [fp, #-12]
    138c:	bl	1788 <abort_parser>
    1390:	b	15e4 <end_element_handler+0x59c>
    1394:	movw	r0, #0
    1398:	str	r0, [sp, #20]
    139c:	ldr	r0, [sp, #20]
    13a0:	ldr	r1, [fp, #-12]
    13a4:	add	r2, r1, #144	; 0x90
    13a8:	ldr	r1, [r1, #12]
    13ac:	add	r1, r2, r1, lsl #2
    13b0:	ldr	r1, [r1]
    13b4:	ldr	r1, [r1, #16]
    13b8:	cmp	r0, r1
    13bc:	bge	1454 <end_element_handler+0x40c>
    13c0:	ldr	r0, [fp, #-12]
    13c4:	ldr	r1, [r0, #12]
    13c8:	add	r0, r0, r1, lsl #2
    13cc:	ldr	r0, [r0, #144]	; 0x90
    13d0:	ldr	r0, [r0, #20]
    13d4:	ldr	r1, [sp, #20]
    13d8:	add	r0, r0, r1, lsl #2
    13dc:	ldr	r0, [r0]
    13e0:	str	r0, [sp, #16]
    13e4:	ldr	r0, [sp, #16]
    13e8:	movw	r1, #0
    13ec:	cmp	r0, r1
    13f0:	beq	1440 <end_element_handler+0x3f8>
    13f4:	ldr	r0, [sp, #16]
    13f8:	ldr	r0, [r0, #4]
    13fc:	ldr	r0, [r0, #8]
    1400:	cmp	r0, #1
    1404:	bne	143c <end_element_handler+0x3f4>
    1408:	ldr	r0, [sp, #16]
    140c:	ldr	r0, [r0, #4]
    1410:	ldr	r0, [r0]
    1414:	cmp	r0, #2
    1418:	bne	143c <end_element_handler+0x3f4>
    141c:	ldr	r0, [sp, #16]
    1420:	bl	0 <coda_mem_array_validate>
    1424:	cmp	r0, #0
    1428:	beq	1438 <end_element_handler+0x3f0>
    142c:	ldr	r0, [fp, #-12]
    1430:	bl	1788 <abort_parser>
    1434:	b	15e4 <end_element_handler+0x59c>
    1438:	b	143c <end_element_handler+0x3f4>
    143c:	b	1440 <end_element_handler+0x3f8>
    1440:	b	1444 <end_element_handler+0x3fc>
    1444:	ldr	r0, [sp, #20]
    1448:	add	r0, r0, #1
    144c:	str	r0, [sp, #20]
    1450:	b	139c <end_element_handler+0x354>
    1454:	b	1458 <end_element_handler+0x410>
    1458:	ldr	r0, [fp, #-12]
    145c:	ldr	r1, [r0, #12]
    1460:	add	r0, r0, r1, lsl #2
    1464:	ldr	r0, [r0, #144]	; 0x90
    1468:	str	r0, [fp, #-20]	; 0xffffffec
    146c:	ldr	r0, [fp, #-12]
    1470:	add	r1, r0, #144	; 0x90
    1474:	ldr	r0, [r0, #12]
    1478:	add	r0, r1, r0, lsl #2
    147c:	movw	r1, #0
    1480:	str	r1, [r0]
    1484:	ldr	r0, [fp, #-12]
    1488:	ldr	r0, [r0, #528]	; 0x210
    148c:	movw	r1, #0
    1490:	cmp	r0, r1
    1494:	bne	149c <end_element_handler+0x454>
    1498:	b	14bc <end_element_handler+0x474>
    149c:	movw	r0, #0
    14a0:	movt	r0, #0
    14a4:	movw	r1, #0
    14a8:	movt	r1, #0
    14ac:	movw	r2, #685	; 0x2ad
    14b0:	movw	r3, #0
    14b4:	movt	r3, #0
    14b8:	bl	0 <__assert_fail>
    14bc:	ldr	r0, [fp, #-12]
    14c0:	ldr	r1, [r0, #12]
    14c4:	add	r0, r0, r1, lsl #2
    14c8:	ldr	r0, [r0, #140]	; 0x8c
    14cc:	str	r0, [fp, #-16]
    14d0:	ldr	r0, [fp, #-12]
    14d4:	ldr	r1, [r0, #12]
    14d8:	add	r0, r0, r1, lsl #2
    14dc:	ldr	r0, [r0, #272]	; 0x110
    14e0:	str	r0, [fp, #-24]	; 0xffffffe8
    14e4:	ldr	r0, [fp, #-16]
    14e8:	ldr	r0, [r0, #20]
    14ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
    14f0:	add	r0, r0, r1, lsl #2
    14f4:	ldr	r0, [r0]
    14f8:	movw	r1, #0
    14fc:	cmp	r0, r1
    1500:	beq	15ac <end_element_handler+0x564>
    1504:	ldr	r0, [fp, #-16]
    1508:	ldr	r0, [r0, #20]
    150c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1510:	add	r0, r0, r1, lsl #2
    1514:	ldr	r0, [r0]
    1518:	ldr	r0, [r0, #4]
    151c:	ldr	r0, [r0, #8]
    1520:	cmp	r0, #1
    1524:	bne	1550 <end_element_handler+0x508>
    1528:	ldr	r0, [fp, #-16]
    152c:	ldr	r0, [r0, #20]
    1530:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1534:	add	r0, r0, r1, lsl #2
    1538:	ldr	r0, [r0]
    153c:	ldr	r0, [r0, #4]
    1540:	ldr	r0, [r0]
    1544:	cmp	r0, #2
    1548:	bne	1550 <end_element_handler+0x508>
    154c:	b	1570 <end_element_handler+0x528>
    1550:	movw	r0, #0
    1554:	movt	r0, #0
    1558:	movw	r1, #0
    155c:	movt	r1, #0
    1560:	movw	r2, #693	; 0x2b5
    1564:	movw	r3, #0
    1568:	movt	r3, #0
    156c:	bl	0 <__assert_fail>
    1570:	ldr	r0, [fp, #-16]
    1574:	ldr	r0, [r0, #20]
    1578:	ldr	r1, [fp, #-24]	; 0xffffffe8
    157c:	add	r0, r0, r1, lsl #2
    1580:	ldr	r0, [r0]
    1584:	ldr	r1, [fp, #-20]	; 0xffffffec
    1588:	bl	0 <coda_mem_array_add_element>
    158c:	cmp	r0, #0
    1590:	beq	15a8 <end_element_handler+0x560>
    1594:	ldr	r0, [fp, #-20]	; 0xffffffec
    1598:	bl	0 <coda_dynamic_type_delete>
    159c:	ldr	r0, [fp, #-12]
    15a0:	bl	1788 <abort_parser>
    15a4:	b	15e4 <end_element_handler+0x59c>
    15a8:	b	15c4 <end_element_handler+0x57c>
    15ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    15b0:	ldr	r1, [fp, #-16]
    15b4:	ldr	r1, [r1, #20]
    15b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15bc:	add	r1, r1, r2, lsl #2
    15c0:	str	r0, [r1]
    15c4:	ldr	r0, [fp, #-12]
    15c8:	ldr	r1, [r0, #12]
    15cc:	mvn	r2, #0
    15d0:	add	r1, r1, r2
    15d4:	str	r1, [r0, #12]
    15d8:	ldr	r0, [fp, #-12]
    15dc:	movw	r1, #0
    15e0:	str	r1, [r0, #536]	; 0x218
    15e4:	mov	sp, fp
    15e8:	pop	{fp, pc}
    15ec:	.word	0xfffffed4

000015f0 <character_data_handler>:
    15f0:	push	{fp, lr}
    15f4:	mov	fp, sp
    15f8:	sub	sp, sp, #24
    15fc:	str	r0, [fp, #-4]
    1600:	str	r1, [fp, #-8]
    1604:	str	r2, [sp, #12]
    1608:	ldr	r0, [fp, #-4]
    160c:	str	r0, [sp, #8]
    1610:	ldr	r0, [sp, #8]
    1614:	ldr	r0, [r0, #532]	; 0x214
    1618:	cmp	r0, #0
    161c:	bne	1684 <character_data_handler+0x94>
    1620:	ldr	r0, [sp, #8]
    1624:	add	r1, r0, #144	; 0x90
    1628:	ldr	r0, [r0, #12]
    162c:	add	r0, r1, r0, lsl #2
    1630:	ldr	r0, [r0]
    1634:	movw	r1, #0
    1638:	cmp	r0, r1
    163c:	beq	1684 <character_data_handler+0x94>
    1640:	ldr	r0, [fp, #-8]
    1644:	ldr	r1, [sp, #12]
    1648:	bl	1eb0 <is_whitespace>
    164c:	cmp	r0, #0
    1650:	bne	1684 <character_data_handler+0x94>
    1654:	ldr	r0, [pc, #276]	; 1770 <character_data_handler+0x180>
    1658:	ldr	r1, [sp, #8]
    165c:	add	r2, r1, #400	; 0x190
    1660:	ldr	r1, [r1, #12]
    1664:	add	r1, r2, r1, lsl #2
    1668:	ldr	r2, [r1]
    166c:	movw	r1, #0
    1670:	movt	r1, #0
    1674:	bl	0 <coda_set_error>
    1678:	ldr	r0, [sp, #8]
    167c:	bl	1788 <abort_parser>
    1680:	b	1768 <character_data_handler+0x178>
    1684:	ldr	r0, [sp, #8]
    1688:	ldr	r0, [r0, #536]	; 0x218
    168c:	ldr	r1, [sp, #12]
    1690:	add	r0, r0, r1
    1694:	ldr	r1, [sp, #8]
    1698:	ldr	r1, [r1, #540]	; 0x21c
    169c:	cmp	r0, r1
    16a0:	ble	1734 <character_data_handler+0x144>
    16a4:	ldr	r0, [sp, #8]
    16a8:	ldr	r0, [r0, #544]	; 0x220
    16ac:	ldr	r1, [sp, #8]
    16b0:	ldr	r1, [r1, #536]	; 0x218
    16b4:	ldr	r2, [sp, #12]
    16b8:	add	r1, r1, r2
    16bc:	bl	0 <realloc>
    16c0:	str	r0, [sp, #4]
    16c4:	ldr	r0, [sp, #4]
    16c8:	movw	r1, #0
    16cc:	cmp	r0, r1
    16d0:	bne	1710 <character_data_handler+0x120>
    16d4:	ldr	r0, [sp, #8]
    16d8:	ldr	r0, [r0, #536]	; 0x218
    16dc:	ldr	r1, [sp, #12]
    16e0:	add	r2, r0, r1
    16e4:	mvn	r0, #0
    16e8:	movw	r1, #0
    16ec:	movt	r1, #0
    16f0:	movw	r3, #0
    16f4:	movt	r3, #0
    16f8:	movw	ip, #731	; 0x2db
    16fc:	str	ip, [sp]
    1700:	bl	0 <coda_set_error>
    1704:	ldr	r0, [sp, #8]
    1708:	bl	1788 <abort_parser>
    170c:	b	1768 <character_data_handler+0x178>
    1710:	ldr	r0, [sp, #4]
    1714:	ldr	r1, [sp, #8]
    1718:	str	r0, [r1, #544]	; 0x220
    171c:	ldr	r0, [sp, #8]
    1720:	ldr	r0, [r0, #536]	; 0x218
    1724:	ldr	r1, [sp, #12]
    1728:	add	r0, r0, r1
    172c:	ldr	r1, [sp, #8]
    1730:	str	r0, [r1, #540]	; 0x21c
    1734:	ldr	r0, [sp, #8]
    1738:	ldr	r0, [r0, #544]	; 0x220
    173c:	ldr	r1, [sp, #8]
    1740:	ldr	r1, [r1, #536]	; 0x218
    1744:	add	r0, r0, r1
    1748:	ldr	r1, [fp, #-8]
    174c:	ldr	r2, [sp, #12]
    1750:	bl	0 <memcpy>
    1754:	ldr	r0, [sp, #12]
    1758:	ldr	r1, [sp, #8]
    175c:	ldr	r2, [r1, #536]	; 0x218
    1760:	add	r0, r2, r0
    1764:	str	r0, [r1, #536]	; 0x218
    1768:	mov	sp, fp
    176c:	pop	{fp, pc}
    1770:	.word	0xfffffed4

00001774 <not_standalone_handler>:
    1774:	sub	sp, sp, #4
    1778:	str	r0, [sp]
    177c:	movw	r0, #0
    1780:	add	sp, sp, #4
    1784:	bx	lr

00001788 <abort_parser>:
    1788:	push	{fp, lr}
    178c:	mov	fp, sp
    1790:	sub	sp, sp, #8
    1794:	str	r0, [sp, #4]
    1798:	ldr	r0, [sp, #4]
    179c:	ldr	r0, [r0]
    17a0:	movw	r1, #0
    17a4:	and	r1, r1, #255	; 0xff
    17a8:	bl	0 <coda_XML_StopParser>
    17ac:	ldr	r1, [sp, #4]
    17b0:	movw	lr, #1
    17b4:	str	lr, [r1, #4]
    17b8:	str	r0, [sp]
    17bc:	mov	sp, fp
    17c0:	pop	{fp, pc}

000017c4 <attribute_record_new>:
    17c4:	push	{fp, lr}
    17c8:	mov	fp, sp
    17cc:	sub	sp, sp, #136	; 0x88
    17d0:	ldr	ip, [fp, #8]
    17d4:	str	r0, [fp, #-8]
    17d8:	str	r1, [fp, #-12]
    17dc:	str	r2, [fp, #-16]
    17e0:	str	r3, [fp, #-20]	; 0xffffffec
    17e4:	ldr	r0, [fp, #8]
    17e8:	str	r0, [fp, #-32]	; 0xffffffe0
    17ec:	ldr	r0, [fp, #-8]
    17f0:	movw	r1, #0
    17f4:	cmp	r0, r1
    17f8:	str	ip, [fp, #-60]	; 0xffffffc4
    17fc:	beq	1804 <attribute_record_new+0x40>
    1800:	b	1824 <attribute_record_new+0x60>
    1804:	movw	r0, #0
    1808:	movt	r0, #0
    180c:	movw	r1, #0
    1810:	movt	r1, #0
    1814:	movw	r2, #97	; 0x61
    1818:	movw	r3, #0
    181c:	movt	r3, #0
    1820:	bl	0 <__assert_fail>
    1824:	ldr	r0, [fp, #-8]
    1828:	movw	r1, #0
    182c:	bl	0 <coda_mem_record_new>
    1830:	str	r0, [fp, #-24]	; 0xffffffe8
    1834:	ldr	r0, [fp, #-16]
    1838:	ldr	r1, [fp, #-16]
    183c:	str	r0, [fp, #-64]	; 0xffffffc0
    1840:	mov	r0, r1
    1844:	bl	0 <coda_element_name_from_xml_name>
    1848:	ldr	r1, [fp, #-64]	; 0xffffffc0
    184c:	cmp	r1, r0
    1850:	beq	1b18 <attribute_record_new+0x354>
    1854:	ldr	r0, [fp, #-8]
    1858:	ldr	r0, [r0, #44]	; 0x2c
    185c:	movw	r1, #0
    1860:	movt	r1, #0
    1864:	bl	0 <coda_hashtable_get_index_from_name>
    1868:	str	r0, [fp, #-36]	; 0xffffffdc
    186c:	ldr	r0, [fp, #8]
    1870:	cmp	r0, #0
    1874:	beq	1a30 <attribute_record_new+0x26c>
    1878:	ldr	r0, [fp, #-36]	; 0xffffffdc
    187c:	cmp	r0, #0
    1880:	bge	1910 <attribute_record_new+0x14c>
    1884:	movw	r0, #2
    1888:	bl	0 <coda_type_text_new>
    188c:	str	r0, [fp, #-44]	; 0xffffffd4
    1890:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1894:	movw	lr, #0
    1898:	cmp	r0, lr
    189c:	bne	18b4 <attribute_record_new+0xf0>
    18a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    18a4:	bl	0 <coda_dynamic_type_delete>
    18a8:	movw	r0, #0
    18ac:	str	r0, [fp, #-4]
    18b0:	b	1ea0 <attribute_record_new+0x6dc>
    18b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    18b8:	ldr	r1, [fp, #-12]
    18bc:	ldr	r2, [fp, #-16]
    18c0:	str	r0, [sp, #68]	; 0x44
    18c4:	mov	r0, r2
    18c8:	str	r1, [sp, #64]	; 0x40
    18cc:	bl	0 <coda_element_name_from_xml_name>
    18d0:	ldr	r1, [fp, #-16]
    18d4:	sub	r0, r0, r1
    18d8:	sub	r3, r0, #1
    18dc:	ldr	r0, [fp, #-16]
    18e0:	ldr	r1, [sp, #68]	; 0x44
    18e4:	str	r0, [sp, #60]	; 0x3c
    18e8:	mov	r0, r1
    18ec:	movw	r1, #0
    18f0:	ldr	r2, [sp, #64]	; 0x40
    18f4:	ldr	lr, [sp, #60]	; 0x3c
    18f8:	str	lr, [sp]
    18fc:	bl	0 <coda_mem_data_new>
    1900:	str	r0, [fp, #-28]	; 0xffffffe4
    1904:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1908:	bl	0 <coda_type_release>
    190c:	b	19c0 <attribute_record_new+0x1fc>
    1910:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1914:	ldr	r0, [r0, #20]
    1918:	ldr	r1, [fp, #-36]	; 0xffffffdc
    191c:	add	r0, r0, r1, lsl #2
    1920:	ldr	r0, [r0]
    1924:	movw	r1, #0
    1928:	cmp	r0, r1
    192c:	bne	1934 <attribute_record_new+0x170>
    1930:	b	1954 <attribute_record_new+0x190>
    1934:	movw	r0, #0
    1938:	movt	r0, #0
    193c:	movw	r1, #0
    1940:	movt	r1, #0
    1944:	movw	r2, #123	; 0x7b
    1948:	movw	r3, #0
    194c:	movt	r3, #0
    1950:	bl	0 <__assert_fail>
    1954:	ldr	r0, [fp, #-8]
    1958:	ldr	r0, [r0, #52]	; 0x34
    195c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1960:	add	r0, r0, r1, lsl #2
    1964:	ldr	r0, [r0]
    1968:	ldr	r0, [r0, #8]
    196c:	ldr	r1, [fp, #-12]
    1970:	ldr	r2, [fp, #-16]
    1974:	str	r0, [sp, #56]	; 0x38
    1978:	mov	r0, r2
    197c:	str	r1, [sp, #52]	; 0x34
    1980:	bl	0 <coda_element_name_from_xml_name>
    1984:	ldr	r1, [fp, #-16]
    1988:	sub	r0, r0, r1
    198c:	sub	r3, r0, #1
    1990:	ldr	r0, [fp, #-16]
    1994:	ldr	r1, [sp, #56]	; 0x38
    1998:	str	r0, [sp, #48]	; 0x30
    199c:	mov	r0, r1
    19a0:	movw	r1, #0
    19a4:	ldr	r2, [sp, #52]	; 0x34
    19a8:	ldr	lr, [sp, #48]	; 0x30
    19ac:	str	lr, [sp]
    19b0:	bl	0 <coda_mem_data_new>
    19b4:	str	r0, [fp, #-28]	; 0xffffffe4
    19b8:	movw	r0, #0
    19bc:	str	r0, [fp, #-32]	; 0xffffffe0
    19c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    19c4:	movw	r1, #0
    19c8:	cmp	r0, r1
    19cc:	bne	19e4 <attribute_record_new+0x220>
    19d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19d4:	bl	0 <coda_dynamic_type_delete>
    19d8:	movw	r0, #0
    19dc:	str	r0, [fp, #-4]
    19e0:	b	1ea0 <attribute_record_new+0x6dc>
    19e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    19e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
    19f0:	movw	r2, #0
    19f4:	movt	r2, #0
    19f8:	str	r1, [sp, #44]	; 0x2c
    19fc:	mov	r1, r2
    1a00:	ldr	r2, [sp, #44]	; 0x2c
    1a04:	bl	0 <coda_mem_record_add_field>
    1a08:	cmp	r0, #0
    1a0c:	beq	1a2c <attribute_record_new+0x268>
    1a10:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1a14:	bl	0 <coda_dynamic_type_delete>
    1a18:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1a1c:	bl	0 <coda_dynamic_type_delete>
    1a20:	movw	r0, #0
    1a24:	str	r0, [fp, #-4]
    1a28:	b	1ea0 <attribute_record_new+0x6dc>
    1a2c:	b	1b14 <attribute_record_new+0x350>
    1a30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1a34:	cmp	r0, #0
    1a38:	blt	1b10 <attribute_record_new+0x34c>
    1a3c:	ldr	r0, [fp, #-8]
    1a40:	ldr	r0, [r0, #52]	; 0x34
    1a44:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1a48:	add	r0, r0, r1, lsl #2
    1a4c:	ldr	r0, [r0]
    1a50:	ldr	r0, [r0, #8]
    1a54:	ldr	r1, [fp, #-12]
    1a58:	ldr	r2, [fp, #-16]
    1a5c:	str	r0, [sp, #40]	; 0x28
    1a60:	mov	r0, r2
    1a64:	str	r1, [sp, #36]	; 0x24
    1a68:	bl	0 <coda_element_name_from_xml_name>
    1a6c:	ldr	r1, [fp, #-16]
    1a70:	sub	r0, r0, r1
    1a74:	sub	r3, r0, #1
    1a78:	ldr	r0, [fp, #-16]
    1a7c:	ldr	r1, [sp, #40]	; 0x28
    1a80:	str	r0, [sp, #32]
    1a84:	mov	r0, r1
    1a88:	movw	r1, #0
    1a8c:	ldr	r2, [sp, #36]	; 0x24
    1a90:	ldr	lr, [sp, #32]
    1a94:	str	lr, [sp]
    1a98:	bl	0 <coda_mem_data_new>
    1a9c:	str	r0, [fp, #-28]	; 0xffffffe4
    1aa0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1aa4:	movw	r1, #0
    1aa8:	cmp	r0, r1
    1aac:	bne	1ac4 <attribute_record_new+0x300>
    1ab0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ab4:	bl	0 <coda_dynamic_type_delete>
    1ab8:	movw	r0, #0
    1abc:	str	r0, [fp, #-4]
    1ac0:	b	1ea0 <attribute_record_new+0x6dc>
    1ac4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ac8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1acc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ad0:	movw	r2, #0
    1ad4:	movt	r2, #0
    1ad8:	str	r1, [sp, #28]
    1adc:	mov	r1, r2
    1ae0:	ldr	r2, [sp, #28]
    1ae4:	bl	0 <coda_mem_record_add_field>
    1ae8:	cmp	r0, #0
    1aec:	beq	1b0c <attribute_record_new+0x348>
    1af0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1af4:	bl	0 <coda_dynamic_type_delete>
    1af8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1afc:	bl	0 <coda_dynamic_type_delete>
    1b00:	movw	r0, #0
    1b04:	str	r0, [fp, #-4]
    1b08:	b	1ea0 <attribute_record_new+0x6dc>
    1b0c:	b	1b10 <attribute_record_new+0x34c>
    1b10:	b	1b14 <attribute_record_new+0x350>
    1b14:	b	1b18 <attribute_record_new+0x354>
    1b18:	movw	r0, #0
    1b1c:	str	r0, [fp, #-40]	; 0xffffffd8
    1b20:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b24:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1b28:	lsl	r2, r1, #1
    1b2c:	add	r0, r0, r1, lsl #3
    1b30:	ldr	r0, [r0]
    1b34:	movw	r1, #0
    1b38:	cmp	r0, r1
    1b3c:	str	r2, [sp, #24]
    1b40:	beq	1db8 <attribute_record_new+0x5f4>
    1b44:	ldr	r0, [fp, #-20]	; 0xffffffec
    1b48:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1b4c:	lsl	r2, r1, #1
    1b50:	add	r0, r0, r1, lsl #3
    1b54:	ldr	r0, [r0]
    1b58:	str	r0, [fp, #-48]	; 0xffffffd0
    1b5c:	ldr	r0, [fp, #8]
    1b60:	str	r0, [fp, #-32]	; 0xffffffe0
    1b64:	ldr	r0, [fp, #-8]
    1b68:	ldr	r0, [r0, #44]	; 0x2c
    1b6c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1b70:	str	r2, [sp, #20]
    1b74:	bl	0 <coda_hashtable_get_index_from_name>
    1b78:	str	r0, [fp, #-36]	; 0xffffffdc
    1b7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1b80:	cmp	r0, #0
    1b84:	bge	1bd4 <attribute_record_new+0x410>
    1b88:	ldr	r0, [fp, #-8]
    1b8c:	ldr	r0, [r0, #44]	; 0x2c
    1b90:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1b94:	str	r0, [sp, #16]
    1b98:	mov	r0, r1
    1b9c:	bl	0 <coda_element_name_from_xml_name>
    1ba0:	ldr	r1, [sp, #16]
    1ba4:	str	r0, [sp, #12]
    1ba8:	mov	r0, r1
    1bac:	ldr	r1, [sp, #12]
    1bb0:	bl	0 <coda_hashtable_get_index_from_name>
    1bb4:	str	r0, [fp, #-36]	; 0xffffffdc
    1bb8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1bbc:	cmp	r0, #0
    1bc0:	blt	1bd0 <attribute_record_new+0x40c>
    1bc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1bc8:	bl	0 <coda_element_name_from_xml_name>
    1bcc:	str	r0, [fp, #-48]	; 0xffffffd0
    1bd0:	b	1bd4 <attribute_record_new+0x410>
    1bd4:	ldr	r0, [fp, #8]
    1bd8:	cmp	r0, #0
    1bdc:	beq	1cc4 <attribute_record_new+0x500>
    1be0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1be4:	cmp	r0, #0
    1be8:	bge	1c54 <attribute_record_new+0x490>
    1bec:	movw	r0, #2
    1bf0:	bl	0 <coda_type_text_new>
    1bf4:	str	r0, [fp, #-52]	; 0xffffffcc
    1bf8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1bfc:	movw	lr, #0
    1c00:	cmp	r0, lr
    1c04:	bne	1c1c <attribute_record_new+0x458>
    1c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1c0c:	bl	0 <coda_dynamic_type_delete>
    1c10:	movw	r0, #0
    1c14:	str	r0, [fp, #-4]
    1c18:	b	1ea0 <attribute_record_new+0x6dc>
    1c1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1c20:	ldr	r2, [fp, #-12]
    1c24:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c2c:	mov	ip, #1
    1c30:	orr	r3, ip, r3, lsl #1
    1c34:	add	r1, r1, r3, lsl #2
    1c38:	ldr	r3, [r1]
    1c3c:	movw	r1, #0
    1c40:	bl	0 <coda_mem_string_new>
    1c44:	str	r0, [fp, #-28]	; 0xffffffe4
    1c48:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1c4c:	bl	0 <coda_type_release>
    1c50:	b	1cc0 <attribute_record_new+0x4fc>
    1c54:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1c58:	ldr	r0, [r0, #20]
    1c5c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c60:	add	r0, r0, r1, lsl #2
    1c64:	ldr	r0, [r0]
    1c68:	movw	r1, #0
    1c6c:	cmp	r0, r1
    1c70:	beq	1c78 <attribute_record_new+0x4b4>
    1c74:	b	1da8 <attribute_record_new+0x5e4>
    1c78:	ldr	r0, [fp, #-8]
    1c7c:	ldr	r0, [r0, #52]	; 0x34
    1c80:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1c84:	ldr	r0, [r0, r1, lsl #2]
    1c88:	ldr	r0, [r0, #8]
    1c8c:	ldr	r2, [fp, #-12]
    1c90:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c94:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1c98:	mov	ip, #1
    1c9c:	orr	r3, ip, r3, lsl #1
    1ca0:	add	r1, r1, r3, lsl #2
    1ca4:	ldr	r3, [r1]
    1ca8:	movw	r1, #0
    1cac:	bl	0 <coda_mem_string_new>
    1cb0:	str	r0, [fp, #-28]	; 0xffffffe4
    1cb4:	movw	r0, #0
    1cb8:	str	r0, [fp, #-32]	; 0xffffffe0
    1cbc:	b	1cc0 <attribute_record_new+0x4fc>
    1cc0:	b	1d48 <attribute_record_new+0x584>
    1cc4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    1cc8:	cmn	r0, #1
    1ccc:	bne	1d0c <attribute_record_new+0x548>
    1cd0:	ldr	r0, [pc, #468]	; 1eac <attribute_record_new+0x6e8>
    1cd4:	ldr	r1, [fp, #-20]	; 0xffffffec
    1cd8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1cdc:	lsl	r3, r2, #1
    1ce0:	add	r1, r1, r2, lsl #3
    1ce4:	ldr	r2, [r1]
    1ce8:	movw	r1, #0
    1cec:	movt	r1, #0
    1cf0:	str	r3, [sp, #8]
    1cf4:	bl	0 <coda_set_error>
    1cf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1cfc:	bl	0 <coda_dynamic_type_delete>
    1d00:	movw	r0, #0
    1d04:	str	r0, [fp, #-4]
    1d08:	b	1ea0 <attribute_record_new+0x6dc>
    1d0c:	ldr	r0, [fp, #-8]
    1d10:	ldr	r0, [r0, #52]	; 0x34
    1d14:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1d18:	ldr	r0, [r0, r1, lsl #2]
    1d1c:	ldr	r0, [r0, #8]
    1d20:	ldr	r2, [fp, #-12]
    1d24:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    1d2c:	mov	ip, #1
    1d30:	orr	r3, ip, r3, lsl #1
    1d34:	add	r1, r1, r3, lsl #2
    1d38:	ldr	r3, [r1]
    1d3c:	movw	r1, #0
    1d40:	bl	0 <coda_mem_string_new>
    1d44:	str	r0, [fp, #-28]	; 0xffffffe4
    1d48:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d4c:	movw	r1, #0
    1d50:	cmp	r0, r1
    1d54:	bne	1d6c <attribute_record_new+0x5a8>
    1d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d5c:	bl	0 <coda_dynamic_type_delete>
    1d60:	movw	r0, #0
    1d64:	str	r0, [fp, #-4]
    1d68:	b	1ea0 <attribute_record_new+0x6dc>
    1d6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d70:	ldr	r1, [fp, #-48]	; 0xffffffd0
    1d74:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1d7c:	bl	0 <coda_mem_record_add_field>
    1d80:	cmp	r0, #0
    1d84:	beq	1da4 <attribute_record_new+0x5e0>
    1d88:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d8c:	bl	0 <coda_dynamic_type_delete>
    1d90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d94:	bl	0 <coda_dynamic_type_delete>
    1d98:	movw	r0, #0
    1d9c:	str	r0, [fp, #-4]
    1da0:	b	1ea0 <attribute_record_new+0x6dc>
    1da4:	b	1da8 <attribute_record_new+0x5e4>
    1da8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1dac:	add	r0, r0, #1
    1db0:	str	r0, [fp, #-40]	; 0xffffffd8
    1db4:	b	1b20 <attribute_record_new+0x35c>
    1db8:	movw	r0, #0
    1dbc:	str	r0, [fp, #-40]	; 0xffffffd8
    1dc0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1dc4:	ldr	r1, [fp, #-8]
    1dc8:	ldr	r1, [r1, #48]	; 0x30
    1dcc:	cmp	r0, r1
    1dd0:	bge	1e98 <attribute_record_new+0x6d4>
    1dd4:	ldr	r0, [fp, #-8]
    1dd8:	ldr	r0, [r0, #52]	; 0x34
    1ddc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1de0:	add	r0, r0, r1, lsl #2
    1de4:	ldr	r0, [r0]
    1de8:	ldrsb	r0, [r0, #16]
    1dec:	cmp	r0, #0
    1df0:	bne	1e84 <attribute_record_new+0x6c0>
    1df4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1df8:	ldr	r0, [r0, #20]
    1dfc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1e00:	add	r0, r0, r1, lsl #2
    1e04:	ldr	r0, [r0]
    1e08:	movw	r1, #0
    1e0c:	cmp	r0, r1
    1e10:	bne	1e84 <attribute_record_new+0x6c0>
    1e14:	ldr	r0, [fp, #8]
    1e18:	cmp	r0, #0
    1e1c:	beq	1e40 <attribute_record_new+0x67c>
    1e20:	ldr	r0, [fp, #-8]
    1e24:	ldr	r0, [r0, #52]	; 0x34
    1e28:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1e2c:	add	r0, r0, r1, lsl #2
    1e30:	ldr	r0, [r0]
    1e34:	movw	r1, #1
    1e38:	strb	r1, [r0, #16]
    1e3c:	b	1e80 <attribute_record_new+0x6bc>
    1e40:	ldr	r0, [fp, #-8]
    1e44:	ldr	r1, [fp, #-40]	; 0xffffffd8
    1e48:	sub	r2, fp, #56	; 0x38
    1e4c:	bl	0 <coda_type_get_record_field_real_name>
    1e50:	ldr	r1, [pc, #84]	; 1eac <attribute_record_new+0x6e8>
    1e54:	ldr	r2, [fp, #-56]	; 0xffffffc8
    1e58:	str	r0, [sp, #4]
    1e5c:	mov	r0, r1
    1e60:	movw	r1, #0
    1e64:	movt	r1, #0
    1e68:	bl	0 <coda_set_error>
    1e6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1e70:	bl	0 <coda_dynamic_type_delete>
    1e74:	movw	r0, #0
    1e78:	str	r0, [fp, #-4]
    1e7c:	b	1ea0 <attribute_record_new+0x6dc>
    1e80:	b	1e84 <attribute_record_new+0x6c0>
    1e84:	b	1e88 <attribute_record_new+0x6c4>
    1e88:	ldr	r0, [fp, #-40]	; 0xffffffd8
    1e8c:	add	r0, r0, #1
    1e90:	str	r0, [fp, #-40]	; 0xffffffd8
    1e94:	b	1dc0 <attribute_record_new+0x5fc>
    1e98:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1e9c:	str	r0, [fp, #-4]
    1ea0:	ldr	r0, [fp, #-4]
    1ea4:	mov	sp, fp
    1ea8:	pop	{fp, pc}
    1eac:	.word	0xfffffed4

00001eb0 <is_whitespace>:
    1eb0:	push	{fp, lr}
    1eb4:	mov	fp, sp
    1eb8:	sub	sp, sp, #16
    1ebc:	str	r0, [sp, #8]
    1ec0:	str	r1, [sp, #4]
    1ec4:	ldr	r0, [sp, #8]
    1ec8:	movw	r1, #0
    1ecc:	cmp	r0, r1
    1ed0:	beq	1ed8 <is_whitespace+0x28>
    1ed4:	b	1ef8 <is_whitespace+0x48>
    1ed8:	movw	r0, #0
    1edc:	movt	r0, #0
    1ee0:	movw	r1, #0
    1ee4:	movt	r1, #0
    1ee8:	movw	r2, #53	; 0x35
    1eec:	movw	r3, #0
    1ef0:	movt	r3, #0
    1ef4:	bl	0 <__assert_fail>
    1ef8:	movw	r0, #0
    1efc:	str	r0, [sp]
    1f00:	ldr	r0, [sp]
    1f04:	ldr	r1, [sp, #4]
    1f08:	cmp	r0, r1
    1f0c:	bge	1f90 <is_whitespace+0xe0>
    1f10:	ldr	r0, [sp, #8]
    1f14:	ldr	r1, [sp]
    1f18:	add	r0, r0, r1
    1f1c:	ldrb	r0, [r0]
    1f20:	cmp	r0, #32
    1f24:	beq	1f7c <is_whitespace+0xcc>
    1f28:	ldr	r0, [sp, #8]
    1f2c:	ldr	r1, [sp]
    1f30:	add	r0, r0, r1
    1f34:	ldrb	r0, [r0]
    1f38:	cmp	r0, #9
    1f3c:	beq	1f7c <is_whitespace+0xcc>
    1f40:	ldr	r0, [sp, #8]
    1f44:	ldr	r1, [sp]
    1f48:	add	r0, r0, r1
    1f4c:	ldrb	r0, [r0]
    1f50:	cmp	r0, #10
    1f54:	beq	1f7c <is_whitespace+0xcc>
    1f58:	ldr	r0, [sp, #8]
    1f5c:	ldr	r1, [sp]
    1f60:	add	r0, r0, r1
    1f64:	ldrb	r0, [r0]
    1f68:	cmp	r0, #13
    1f6c:	beq	1f7c <is_whitespace+0xcc>
    1f70:	movw	r0, #0
    1f74:	str	r0, [fp, #-4]
    1f78:	b	1f98 <is_whitespace+0xe8>
    1f7c:	b	1f80 <is_whitespace+0xd0>
    1f80:	ldr	r0, [sp]
    1f84:	add	r0, r0, #1
    1f88:	str	r0, [sp]
    1f8c:	b	1f00 <is_whitespace+0x50>
    1f90:	movw	r0, #1
    1f94:	str	r0, [fp, #-4]
    1f98:	ldr	r0, [fp, #-4]
    1f9c:	mov	sp, fp
    1fa0:	pop	{fp, pc}

00001fa4 <convert_to_text>:
    1fa4:	push	{fp, lr}
    1fa8:	mov	fp, sp
    1fac:	sub	sp, sp, #16
    1fb0:	str	r0, [sp, #8]
    1fb4:	ldr	r0, [sp, #8]
    1fb8:	ldr	r0, [r0]
    1fbc:	ldr	r0, [r0, #8]
    1fc0:	cmp	r0, #0
    1fc4:	bne	1fe0 <convert_to_text+0x3c>
    1fc8:	ldr	r0, [sp, #8]
    1fcc:	ldr	r0, [r0]
    1fd0:	ldr	r0, [r0]
    1fd4:	cmp	r0, #2
    1fd8:	bne	1fe0 <convert_to_text+0x3c>
    1fdc:	b	2000 <convert_to_text+0x5c>
    1fe0:	movw	r0, #0
    1fe4:	movt	r0, #0
    1fe8:	movw	r1, #0
    1fec:	movt	r1, #0
    1ff0:	movw	r2, #70	; 0x46
    1ff4:	movw	r3, #0
    1ff8:	movt	r3, #0
    1ffc:	bl	0 <__assert_fail>
    2000:	movw	r0, #2
    2004:	bl	0 <coda_type_text_new>
    2008:	str	r0, [sp, #4]
    200c:	ldr	r0, [sp, #4]
    2010:	movw	lr, #0
    2014:	cmp	r0, lr
    2018:	bne	2028 <convert_to_text+0x84>
    201c:	mvn	r0, #0
    2020:	str	r0, [fp, #-4]
    2024:	b	2088 <convert_to_text+0xe4>
    2028:	ldr	r0, [sp, #8]
    202c:	ldr	r0, [r0]
    2030:	ldr	r0, [r0, #36]	; 0x24
    2034:	movw	r1, #0
    2038:	cmp	r0, r1
    203c:	beq	2068 <convert_to_text+0xc4>
    2040:	ldr	r0, [sp, #8]
    2044:	ldr	r0, [r0]
    2048:	ldr	r0, [r0, #36]	; 0x24
    204c:	ldr	r1, [sp, #4]
    2050:	str	r0, [r1, #36]	; 0x24
    2054:	ldr	r0, [sp, #4]
    2058:	ldr	r0, [r0, #36]	; 0x24
    205c:	ldr	r1, [r0, #4]
    2060:	add	r1, r1, #1
    2064:	str	r1, [r0, #4]
    2068:	ldr	r0, [sp, #8]
    206c:	ldr	r0, [r0]
    2070:	bl	0 <coda_type_release>
    2074:	ldr	r0, [sp, #4]
    2078:	ldr	lr, [sp, #8]
    207c:	str	r0, [lr]
    2080:	movw	r0, #0
    2084:	str	r0, [fp, #-4]
    2088:	ldr	r0, [fp, #-4]
    208c:	mov	sp, fp
    2090:	pop	{fp, pc}
