
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-detect.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_detection_tree>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #8
   c:	str	r0, [sp, #4]
  10:	ldr	r0, [sp, #4]
  14:	bl	0 <coda_data_dictionary_get_detection_tree>
  18:	movw	r1, #0
  1c:	bl	28 <generate_detection_tree_sub>
  20:	mov	sp, fp
  24:	pop	{fp, pc}

00000028 <generate_detection_tree_sub>:
  28:	push	{fp, lr}
  2c:	mov	fp, sp
  30:	sub	sp, sp, #40	; 0x28
  34:	str	r0, [fp, #-4]
  38:	str	r1, [fp, #-8]
  3c:	ldr	r0, [fp, #-4]
  40:	movw	r1, #0
  44:	cmp	r0, r1
  48:	bne	50 <generate_detection_tree_sub+0x28>
  4c:	b	200 <generate_detection_tree_sub+0x1d8>
  50:	ldr	r0, [fp, #-4]
  54:	ldr	r0, [r0]
  58:	movw	r1, #0
  5c:	cmp	r0, r1
  60:	bne	78 <generate_detection_tree_sub+0x50>
  64:	ldr	r0, [fp, #-4]
  68:	ldr	r0, [r0, #4]
  6c:	movw	r1, #0
  70:	cmp	r0, r1
  74:	beq	184 <generate_detection_tree_sub+0x15c>
  78:	ldr	r0, [fp, #-4]
  7c:	ldr	r0, [r0]
  80:	movw	r1, #0
  84:	cmp	r0, r1
  88:	beq	ac <generate_detection_tree_sub+0x84>
  8c:	bl	208 <indent>
  90:	ldr	lr, [fp, #-4]
  94:	ldr	r1, [lr]
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	0 <printf>
  a4:	str	r0, [sp, #20]
  a8:	b	d4 <generate_detection_tree_sub+0xac>
  ac:	ldr	r0, [fp, #-8]
  b0:	add	r0, r0, #1
  b4:	str	r0, [fp, #-8]
  b8:	bl	208 <indent>
  bc:	ldr	r0, [fp, #-4]
  c0:	ldr	r0, [r0, #4]
  c4:	movw	r1, #0
  c8:	movt	r1, #0
  cc:	bl	0 <coda_expression_print>
  d0:	str	r0, [sp, #16]
  d4:	ldr	r0, [fp, #-4]
  d8:	ldr	r0, [r0, #8]
  dc:	movw	r1, #0
  e0:	cmp	r0, r1
  e4:	beq	174 <generate_detection_tree_sub+0x14c>
  e8:	ldr	r0, [fp, #-4]
  ec:	ldr	r0, [r0, #8]
  f0:	ldr	r0, [r0, #8]
  f4:	str	r0, [fp, #-16]
  f8:	ldr	r0, [fp, #-16]
  fc:	ldr	r0, [r0, #44]	; 0x2c
 100:	ldr	r0, [r0, #20]
 104:	ldr	r1, [r0]
 108:	ldr	r0, [fp, #-16]
 10c:	ldr	r0, [r0, #44]	; 0x2c
 110:	ldr	r2, [r0]
 114:	ldr	r0, [fp, #-16]
 118:	ldr	r3, [r0, #4]
 11c:	movw	r0, #0
 120:	movt	r0, #0
 124:	bl	0 <printf>
 128:	ldr	r1, [fp, #-4]
 12c:	ldr	r1, [r1, #12]
 130:	cmp	r1, #0
 134:	str	r0, [sp, #12]
 138:	ble	15c <generate_detection_tree_sub+0x134>
 13c:	ldr	r1, [fp, #-8]
 140:	ldr	r0, [fp, #-4]
 144:	ldr	r2, [r0, #12]
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <printf>
 154:	str	r0, [sp, #8]
 158:	b	170 <generate_detection_tree_sub+0x148>
 15c:	ldr	r1, [fp, #-8]
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	bl	0 <printf>
 16c:	str	r0, [sp, #4]
 170:	b	174 <generate_detection_tree_sub+0x14c>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	bl	0 <printf>
 180:	str	r0, [sp]
 184:	movw	r0, #0
 188:	str	r0, [fp, #-12]
 18c:	ldr	r0, [fp, #-12]
 190:	ldr	r1, [fp, #-4]
 194:	ldr	r1, [r1, #12]
 198:	cmp	r0, r1
 19c:	bge	200 <generate_detection_tree_sub+0x1d8>
 1a0:	movw	r0, #0
 1a4:	movt	r0, #0
 1a8:	ldr	r1, [r0]
 1ac:	add	r1, r1, #1
 1b0:	str	r1, [r0]
 1b4:	ldr	r0, [fp, #-4]
 1b8:	ldr	r0, [r0, #16]
 1bc:	ldr	r1, [fp, #-12]
 1c0:	add	r0, r0, r1, lsl #2
 1c4:	ldr	r0, [r0]
 1c8:	ldr	r1, [fp, #-8]
 1cc:	ldr	r2, [fp, #-12]
 1d0:	add	r1, r1, r2
 1d4:	bl	28 <generate_detection_tree_sub>
 1d8:	movw	r0, #0
 1dc:	movt	r0, #0
 1e0:	ldr	r1, [r0]
 1e4:	mvn	r2, #0
 1e8:	add	r1, r1, r2
 1ec:	str	r1, [r0]
 1f0:	ldr	r0, [fp, #-12]
 1f4:	add	r0, r0, #1
 1f8:	str	r0, [fp, #-12]
 1fc:	b	18c <generate_detection_tree_sub+0x164>
 200:	mov	sp, fp
 204:	pop	{fp, pc}

00000208 <indent>:
 208:	push	{fp, lr}
 20c:	mov	fp, sp
 210:	sub	sp, sp, #8
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	ldr	r0, [r0]
 220:	cmp	r0, #0
 224:	blt	22c <indent+0x24>
 228:	b	24c <indent+0x44>
 22c:	movw	r0, #0
 230:	movt	r0, #0
 234:	movw	r1, #0
 238:	movt	r1, #0
 23c:	movw	r2, #52	; 0x34
 240:	movw	r3, #0
 244:	movt	r3, #0
 248:	bl	0 <__assert_fail>
 24c:	movw	r0, #0
 250:	movt	r0, #0
 254:	ldr	r0, [r0]
 258:	str	r0, [sp, #4]
 25c:	ldr	r0, [sp, #4]
 260:	cmp	r0, #0
 264:	beq	28c <indent+0x84>
 268:	movw	r0, #0
 26c:	movt	r0, #0
 270:	bl	0 <printf>
 274:	str	r0, [sp]
 278:	ldr	r0, [sp, #4]
 27c:	mvn	r1, #0
 280:	add	r0, r0, r1
 284:	str	r0, [sp, #4]
 288:	b	25c <indent+0x54>
 28c:	mov	sp, fp
 290:	pop	{fp, pc}
