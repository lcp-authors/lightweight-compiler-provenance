
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	mrc	15, 0, r3, cr13, cr0, {3}
   c:	ldr	r2, [pc, #16]	; 24 <coda_get_libcoda_version+0x24>
  10:	ldr	r3, [r3, r2]
  14:	mov	r0, r3
  18:	add	sp, fp, #0
  1c:	pop	{fp}		; (ldr fp, [sp], #4)
  20:	bx	lr
  24:	.word	0x00000000

00000028 <coda_set_option_bypass_special_types>:
  28:	str	fp, [sp, #-8]!
  2c:	str	lr, [sp, #4]
  30:	add	fp, sp, #4
  34:	sub	sp, sp, #8
  38:	str	r0, [fp, #-8]
  3c:	ldr	r3, [fp, #-8]
  40:	cmp	r3, #0
  44:	beq	70 <coda_set_option_bypass_special_types+0x48>
  48:	ldr	r3, [fp, #-8]
  4c:	cmp	r3, #1
  50:	beq	70 <coda_set_option_bypass_special_types+0x48>
  54:	ldr	r2, [fp, #-8]
  58:	movw	r1, #0
  5c:	movt	r1, #0
  60:	mvn	r0, #99	; 0x63
  64:	bl	0 <coda_set_error>
  68:	mvn	r3, #0
  6c:	b	84 <coda_set_option_bypass_special_types+0x5c>
  70:	mrc	15, 0, r3, cr13, cr0, {3}
  74:	ldr	r1, [pc, #28]	; 98 <coda_set_option_bypass_special_types+0x70>
  78:	ldr	r2, [fp, #-8]
  7c:	str	r2, [r3, r1]
  80:	mov	r3, #0
  84:	mov	r0, r3
  88:	sub	sp, fp, #4
  8c:	ldr	fp, [sp]
  90:	add	sp, sp, #4
  94:	pop	{pc}		; (ldr pc, [sp], #4)
  98:	.word	0x00000000

0000009c <coda_get_option_bypass_special_types>:
  9c:	push	{fp}		; (str fp, [sp, #-4]!)
  a0:	add	fp, sp, #0
  a4:	mrc	15, 0, r3, cr13, cr0, {3}
  a8:	ldr	r2, [pc, #16]	; c0 <coda_get_option_bypass_special_types+0x24>
  ac:	ldr	r3, [r3, r2]
  b0:	mov	r0, r3
  b4:	add	sp, fp, #0
  b8:	pop	{fp}		; (ldr fp, [sp], #4)
  bc:	bx	lr
  c0:	.word	0x00000000

000000c4 <coda_set_option_perform_boundary_checks>:
  c4:	str	fp, [sp, #-8]!
  c8:	str	lr, [sp, #4]
  cc:	add	fp, sp, #4
  d0:	sub	sp, sp, #8
  d4:	str	r0, [fp, #-8]
  d8:	ldr	r3, [fp, #-8]
  dc:	cmp	r3, #0
  e0:	beq	10c <coda_set_option_perform_boundary_checks+0x48>
  e4:	ldr	r3, [fp, #-8]
  e8:	cmp	r3, #1
  ec:	beq	10c <coda_set_option_perform_boundary_checks+0x48>
  f0:	ldr	r2, [fp, #-8]
  f4:	movw	r1, #0
  f8:	movt	r1, #0
  fc:	mvn	r0, #99	; 0x63
 100:	bl	0 <coda_set_error>
 104:	mvn	r3, #0
 108:	b	120 <coda_set_option_perform_boundary_checks+0x5c>
 10c:	mrc	15, 0, r3, cr13, cr0, {3}
 110:	ldr	r1, [pc, #28]	; 134 <coda_set_option_perform_boundary_checks+0x70>
 114:	ldr	r2, [fp, #-8]
 118:	str	r2, [r3, r1]
 11c:	mov	r3, #0
 120:	mov	r0, r3
 124:	sub	sp, fp, #4
 128:	ldr	fp, [sp]
 12c:	add	sp, sp, #4
 130:	pop	{pc}		; (ldr pc, [sp], #4)
 134:	.word	0x00000000

00000138 <coda_get_option_perform_boundary_checks>:
 138:	push	{fp}		; (str fp, [sp, #-4]!)
 13c:	add	fp, sp, #0
 140:	mrc	15, 0, r3, cr13, cr0, {3}
 144:	ldr	r2, [pc, #16]	; 15c <coda_get_option_perform_boundary_checks+0x24>
 148:	ldr	r3, [r3, r2]
 14c:	mov	r0, r3
 150:	add	sp, fp, #0
 154:	pop	{fp}		; (ldr fp, [sp], #4)
 158:	bx	lr
 15c:	.word	0x00000000

00000160 <coda_set_option_perform_conversions>:
 160:	str	fp, [sp, #-8]!
 164:	str	lr, [sp, #4]
 168:	add	fp, sp, #4
 16c:	sub	sp, sp, #8
 170:	str	r0, [fp, #-8]
 174:	ldr	r3, [fp, #-8]
 178:	cmp	r3, #0
 17c:	beq	1a8 <coda_set_option_perform_conversions+0x48>
 180:	ldr	r3, [fp, #-8]
 184:	cmp	r3, #1
 188:	beq	1a8 <coda_set_option_perform_conversions+0x48>
 18c:	ldr	r2, [fp, #-8]
 190:	movw	r1, #0
 194:	movt	r1, #0
 198:	mvn	r0, #99	; 0x63
 19c:	bl	0 <coda_set_error>
 1a0:	mvn	r3, #0
 1a4:	b	1bc <coda_set_option_perform_conversions+0x5c>
 1a8:	mrc	15, 0, r3, cr13, cr0, {3}
 1ac:	ldr	r1, [pc, #28]	; 1d0 <coda_set_option_perform_conversions+0x70>
 1b0:	ldr	r2, [fp, #-8]
 1b4:	str	r2, [r3, r1]
 1b8:	mov	r3, #0
 1bc:	mov	r0, r3
 1c0:	sub	sp, fp, #4
 1c4:	ldr	fp, [sp]
 1c8:	add	sp, sp, #4
 1cc:	pop	{pc}		; (ldr pc, [sp], #4)
 1d0:	.word	0x00000000

000001d4 <coda_get_option_perform_conversions>:
 1d4:	push	{fp}		; (str fp, [sp, #-4]!)
 1d8:	add	fp, sp, #0
 1dc:	mrc	15, 0, r3, cr13, cr0, {3}
 1e0:	ldr	r2, [pc, #16]	; 1f8 <coda_get_option_perform_conversions+0x24>
 1e4:	ldr	r3, [r3, r2]
 1e8:	mov	r0, r3
 1ec:	add	sp, fp, #0
 1f0:	pop	{fp}		; (ldr fp, [sp], #4)
 1f4:	bx	lr
 1f8:	.word	0x00000000

000001fc <coda_set_option_use_fast_size_expressions>:
 1fc:	str	fp, [sp, #-8]!
 200:	str	lr, [sp, #4]
 204:	add	fp, sp, #4
 208:	sub	sp, sp, #8
 20c:	str	r0, [fp, #-8]
 210:	ldr	r3, [fp, #-8]
 214:	cmp	r3, #0
 218:	beq	244 <coda_set_option_use_fast_size_expressions+0x48>
 21c:	ldr	r3, [fp, #-8]
 220:	cmp	r3, #1
 224:	beq	244 <coda_set_option_use_fast_size_expressions+0x48>
 228:	ldr	r2, [fp, #-8]
 22c:	movw	r1, #0
 230:	movt	r1, #0
 234:	mvn	r0, #99	; 0x63
 238:	bl	0 <coda_set_error>
 23c:	mvn	r3, #0
 240:	b	258 <coda_set_option_use_fast_size_expressions+0x5c>
 244:	mrc	15, 0, r3, cr13, cr0, {3}
 248:	ldr	r1, [pc, #28]	; 26c <coda_set_option_use_fast_size_expressions+0x70>
 24c:	ldr	r2, [fp, #-8]
 250:	str	r2, [r3, r1]
 254:	mov	r3, #0
 258:	mov	r0, r3
 25c:	sub	sp, fp, #4
 260:	ldr	fp, [sp]
 264:	add	sp, sp, #4
 268:	pop	{pc}		; (ldr pc, [sp], #4)
 26c:	.word	0x00000000

00000270 <coda_get_option_use_fast_size_expressions>:
 270:	push	{fp}		; (str fp, [sp, #-4]!)
 274:	add	fp, sp, #0
 278:	mrc	15, 0, r3, cr13, cr0, {3}
 27c:	ldr	r2, [pc, #16]	; 294 <coda_get_option_use_fast_size_expressions+0x24>
 280:	ldr	r3, [r3, r2]
 284:	mov	r0, r3
 288:	add	sp, fp, #0
 28c:	pop	{fp}		; (ldr fp, [sp], #4)
 290:	bx	lr
 294:	.word	0x00000000

00000298 <coda_set_option_use_mmap>:
 298:	str	fp, [sp, #-8]!
 29c:	str	lr, [sp, #4]
 2a0:	add	fp, sp, #4
 2a4:	sub	sp, sp, #8
 2a8:	str	r0, [fp, #-8]
 2ac:	ldr	r3, [fp, #-8]
 2b0:	cmp	r3, #0
 2b4:	beq	2e0 <coda_set_option_use_mmap+0x48>
 2b8:	ldr	r3, [fp, #-8]
 2bc:	cmp	r3, #1
 2c0:	beq	2e0 <coda_set_option_use_mmap+0x48>
 2c4:	ldr	r2, [fp, #-8]
 2c8:	movw	r1, #0
 2cc:	movt	r1, #0
 2d0:	mvn	r0, #99	; 0x63
 2d4:	bl	0 <coda_set_error>
 2d8:	mvn	r3, #0
 2dc:	b	2f4 <coda_set_option_use_mmap+0x5c>
 2e0:	mrc	15, 0, r3, cr13, cr0, {3}
 2e4:	ldr	r1, [pc, #28]	; 308 <coda_set_option_use_mmap+0x70>
 2e8:	ldr	r2, [fp, #-8]
 2ec:	str	r2, [r3, r1]
 2f0:	mov	r3, #0
 2f4:	mov	r0, r3
 2f8:	sub	sp, fp, #4
 2fc:	ldr	fp, [sp]
 300:	add	sp, sp, #4
 304:	pop	{pc}		; (ldr pc, [sp], #4)
 308:	.word	0x00000000

0000030c <coda_get_option_use_mmap>:
 30c:	push	{fp}		; (str fp, [sp, #-4]!)
 310:	add	fp, sp, #0
 314:	mrc	15, 0, r3, cr13, cr0, {3}
 318:	ldr	r2, [pc, #16]	; 330 <coda_get_option_use_mmap+0x24>
 31c:	ldr	r3, [r3, r2]
 320:	mov	r0, r3
 324:	add	sp, fp, #0
 328:	pop	{fp}		; (ldr fp, [sp], #4)
 32c:	bx	lr
 330:	.word	0x00000000

00000334 <coda_set_definition_path>:
 334:	str	fp, [sp, #-8]!
 338:	str	lr, [sp, #4]
 33c:	add	fp, sp, #4
 340:	sub	sp, sp, #8
 344:	str	r0, [fp, #-8]
 348:	mrc	15, 0, r3, cr13, cr0, {3}
 34c:	ldr	r2, [pc, #172]	; 400 <coda_set_definition_path+0xcc>
 350:	ldr	r3, [r3, r2]
 354:	cmp	r3, #0
 358:	beq	380 <coda_set_definition_path+0x4c>
 35c:	mrc	15, 0, r3, cr13, cr0, {3}
 360:	ldr	r2, [pc, #152]	; 400 <coda_set_definition_path+0xcc>
 364:	ldr	r3, [r3, r2]
 368:	mov	r0, r3
 36c:	bl	0 <free>
 370:	mrc	15, 0, r3, cr13, cr0, {3}
 374:	ldr	r2, [pc, #132]	; 400 <coda_set_definition_path+0xcc>
 378:	mov	r1, #0
 37c:	str	r1, [r3, r2]
 380:	ldr	r3, [fp, #-8]
 384:	cmp	r3, #0
 388:	bne	394 <coda_set_definition_path+0x60>
 38c:	mov	r3, #0
 390:	b	3ec <coda_set_definition_path+0xb8>
 394:	ldr	r0, [fp, #-8]
 398:	bl	0 <strdup>
 39c:	mov	r3, r0
 3a0:	mov	r1, r3
 3a4:	mrc	15, 0, r3, cr13, cr0, {3}
 3a8:	ldr	r2, [pc, #80]	; 400 <coda_set_definition_path+0xcc>
 3ac:	str	r1, [r3, r2]
 3b0:	mrc	15, 0, r3, cr13, cr0, {3}
 3b4:	ldr	r2, [pc, #68]	; 400 <coda_set_definition_path+0xcc>
 3b8:	ldr	r3, [r3, r2]
 3bc:	cmp	r3, #0
 3c0:	bne	3e8 <coda_set_definition_path+0xb4>
 3c4:	movw	r3, #385	; 0x181
 3c8:	movw	r2, #0
 3cc:	movt	r2, #0
 3d0:	movw	r1, #0
 3d4:	movt	r1, #0
 3d8:	mvn	r0, #0
 3dc:	bl	0 <coda_set_error>
 3e0:	mvn	r3, #0
 3e4:	b	3ec <coda_set_definition_path+0xb8>
 3e8:	mov	r3, #0
 3ec:	mov	r0, r3
 3f0:	sub	sp, fp, #4
 3f4:	ldr	fp, [sp]
 3f8:	add	sp, sp, #4
 3fc:	pop	{pc}		; (ldr pc, [sp], #4)
 400:	.word	0x00000000

00000404 <coda_set_definition_path_conditional>:
 404:	str	fp, [sp, #-8]!
 408:	str	lr, [sp, #4]
 40c:	add	fp, sp, #4
 410:	sub	sp, sp, #24
 414:	str	r0, [fp, #-16]
 418:	str	r1, [fp, #-20]	; 0xffffffec
 41c:	str	r2, [fp, #-24]	; 0xffffffe8
 420:	movw	r0, #0
 424:	movt	r0, #0
 428:	bl	0 <getenv>
 42c:	mov	r3, r0
 430:	cmp	r3, #0
 434:	beq	440 <coda_set_definition_path_conditional+0x3c>
 438:	mov	r3, #0
 43c:	b	520 <coda_set_definition_path_conditional+0x11c>
 440:	ldr	r3, [fp, #-20]	; 0xffffffec
 444:	cmp	r3, #0
 448:	bne	470 <coda_set_definition_path_conditional+0x6c>
 44c:	sub	r3, fp, #8
 450:	mov	r1, r3
 454:	ldr	r0, [fp, #-16]
 458:	bl	0 <coda_path_for_program>
 45c:	mov	r3, r0
 460:	cmp	r3, #0
 464:	beq	498 <coda_set_definition_path_conditional+0x94>
 468:	mvn	r3, #0
 46c:	b	520 <coda_set_definition_path_conditional+0x11c>
 470:	sub	r3, fp, #8
 474:	mov	r2, r3
 478:	ldr	r1, [fp, #-16]
 47c:	ldr	r0, [fp, #-20]	; 0xffffffec
 480:	bl	0 <coda_path_find_file>
 484:	mov	r3, r0
 488:	cmp	r3, #0
 48c:	beq	498 <coda_set_definition_path_conditional+0x94>
 490:	mvn	r3, #0
 494:	b	520 <coda_set_definition_path_conditional+0x11c>
 498:	ldr	r3, [fp, #-8]
 49c:	cmp	r3, #0
 4a0:	beq	51c <coda_set_definition_path_conditional+0x118>
 4a4:	ldr	r0, [fp, #-8]
 4a8:	sub	r3, fp, #12
 4ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
 4b0:	mov	r1, #1
 4b4:	bl	0 <coda_path_from_path>
 4b8:	mov	r3, r0
 4bc:	cmp	r3, #0
 4c0:	beq	4d8 <coda_set_definition_path_conditional+0xd4>
 4c4:	ldr	r3, [fp, #-8]
 4c8:	mov	r0, r3
 4cc:	bl	0 <free>
 4d0:	mvn	r3, #0
 4d4:	b	520 <coda_set_definition_path_conditional+0x11c>
 4d8:	ldr	r3, [fp, #-8]
 4dc:	mov	r0, r3
 4e0:	bl	0 <free>
 4e4:	ldr	r3, [fp, #-12]
 4e8:	mov	r0, r3
 4ec:	bl	334 <coda_set_definition_path>
 4f0:	mov	r3, r0
 4f4:	cmp	r3, #0
 4f8:	beq	510 <coda_set_definition_path_conditional+0x10c>
 4fc:	ldr	r3, [fp, #-12]
 500:	mov	r0, r3
 504:	bl	0 <free>
 508:	mvn	r3, #0
 50c:	b	520 <coda_set_definition_path_conditional+0x11c>
 510:	ldr	r3, [fp, #-12]
 514:	mov	r0, r3
 518:	bl	0 <free>
 51c:	mov	r3, #0
 520:	mov	r0, r3
 524:	sub	sp, fp, #4
 528:	ldr	fp, [sp]
 52c:	add	sp, sp, #4
 530:	pop	{pc}		; (ldr pc, [sp], #4)

00000534 <coda_init>:
 534:	str	fp, [sp, #-8]!
 538:	str	lr, [sp, #4]
 53c:	add	fp, sp, #4
 540:	mrc	15, 0, r3, cr13, cr0, {3}
 544:	ldr	r2, [pc, #364]	; 6b8 <coda_init+0x184>
 548:	ldr	r3, [r3, r2]
 54c:	cmp	r3, #0
 550:	bne	684 <coda_init+0x150>
 554:	bl	0 <coda_leap_second_table_init>
 558:	mov	r3, r0
 55c:	cmp	r3, #0
 560:	beq	56c <coda_init+0x38>
 564:	mvn	r3, #0
 568:	b	6a4 <coda_init+0x170>
 56c:	bl	0 <coda_data_dictionary_init>
 570:	mov	r3, r0
 574:	cmp	r3, #0
 578:	beq	588 <coda_init+0x54>
 57c:	bl	0 <coda_leap_second_table_done>
 580:	mvn	r3, #0
 584:	b	6a4 <coda_init+0x170>
 588:	mrc	15, 0, r3, cr13, cr0, {3}
 58c:	ldr	r2, [pc, #296]	; 6bc <coda_init+0x188>
 590:	ldr	r3, [r3, r2]
 594:	cmp	r3, #0
 598:	bne	620 <coda_init+0xec>
 59c:	movw	r0, #0
 5a0:	movt	r0, #0
 5a4:	bl	0 <getenv>
 5a8:	mov	r3, r0
 5ac:	cmp	r3, #0
 5b0:	beq	620 <coda_init+0xec>
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	bl	0 <getenv>
 5c0:	mov	r3, r0
 5c4:	mov	r0, r3
 5c8:	bl	0 <strdup>
 5cc:	mov	r3, r0
 5d0:	mov	r1, r3
 5d4:	mrc	15, 0, r3, cr13, cr0, {3}
 5d8:	ldr	r2, [pc, #220]	; 6bc <coda_init+0x188>
 5dc:	str	r1, [r3, r2]
 5e0:	mrc	15, 0, r3, cr13, cr0, {3}
 5e4:	ldr	r2, [pc, #208]	; 6bc <coda_init+0x188>
 5e8:	ldr	r3, [r3, r2]
 5ec:	cmp	r3, #0
 5f0:	bne	620 <coda_init+0xec>
 5f4:	bl	0 <coda_data_dictionary_done>
 5f8:	bl	0 <coda_leap_second_table_done>
 5fc:	mov	r3, #512	; 0x200
 600:	movw	r2, #0
 604:	movt	r2, #0
 608:	movw	r1, #0
 60c:	movt	r1, #0
 610:	mvn	r0, #0
 614:	bl	0 <coda_set_error>
 618:	mvn	r3, #0
 61c:	b	6a4 <coda_init+0x170>
 620:	mrc	15, 0, r3, cr13, cr0, {3}
 624:	ldr	r2, [pc, #144]	; 6bc <coda_init+0x188>
 628:	ldr	r3, [r3, r2]
 62c:	cmp	r3, #0
 630:	beq	664 <coda_init+0x130>
 634:	mrc	15, 0, r3, cr13, cr0, {3}
 638:	ldr	r2, [pc, #124]	; 6bc <coda_init+0x188>
 63c:	ldr	r3, [r3, r2]
 640:	mov	r0, r3
 644:	bl	0 <coda_read_definitions>
 648:	mov	r3, r0
 64c:	cmp	r3, #0
 650:	beq	664 <coda_init+0x130>
 654:	bl	0 <coda_data_dictionary_done>
 658:	bl	0 <coda_leap_second_table_done>
 65c:	mvn	r3, #0
 660:	b	6a4 <coda_init+0x170>
 664:	mrc	15, 0, r3, cr13, cr0, {3}
 668:	ldr	r2, [pc, #80]	; 6c0 <coda_init+0x18c>
 66c:	mov	r1, #1
 670:	str	r1, [r3, r2]
 674:	mrc	15, 0, r3, cr13, cr0, {3}
 678:	ldr	r2, [pc, #68]	; 6c4 <coda_init+0x190>
 67c:	mov	r1, #1
 680:	str	r1, [r3, r2]
 684:	mrc	15, 0, r3, cr13, cr0, {3}
 688:	ldr	r2, [pc, #40]	; 6b8 <coda_init+0x184>
 68c:	ldr	r3, [r3, r2]
 690:	add	r2, r3, #1
 694:	mrc	15, 0, r3, cr13, cr0, {3}
 698:	ldr	r1, [pc, #24]	; 6b8 <coda_init+0x184>
 69c:	str	r2, [r3, r1]
 6a0:	mov	r3, #0
 6a4:	mov	r0, r3
 6a8:	sub	sp, fp, #4
 6ac:	ldr	fp, [sp]
 6b0:	add	sp, sp, #4
 6b4:	pop	{pc}		; (ldr pc, [sp], #4)
	...

000006c8 <coda_done>:
 6c8:	str	fp, [sp, #-8]!
 6cc:	str	lr, [sp, #4]
 6d0:	add	fp, sp, #4
 6d4:	mrc	15, 0, r3, cr13, cr0, {3}
 6d8:	ldr	r2, [pc, #160]	; 780 <coda_done+0xb8>
 6dc:	ldr	r3, [r3, r2]
 6e0:	cmp	r3, #0
 6e4:	ble	76c <coda_done+0xa4>
 6e8:	mrc	15, 0, r3, cr13, cr0, {3}
 6ec:	ldr	r2, [pc, #140]	; 780 <coda_done+0xb8>
 6f0:	ldr	r3, [r3, r2]
 6f4:	sub	r2, r3, #1
 6f8:	mrc	15, 0, r3, cr13, cr0, {3}
 6fc:	ldr	r1, [pc, #124]	; 780 <coda_done+0xb8>
 700:	str	r2, [r3, r1]
 704:	mrc	15, 0, r3, cr13, cr0, {3}
 708:	ldr	r2, [pc, #112]	; 780 <coda_done+0xb8>
 70c:	ldr	r3, [r3, r2]
 710:	cmp	r3, #0
 714:	bne	76c <coda_done+0xa4>
 718:	bl	0 <coda_sp3_done>
 71c:	bl	0 <coda_rinex_done>
 720:	bl	0 <coda_grib_done>
 724:	bl	0 <coda_data_dictionary_done>
 728:	mrc	15, 0, r3, cr13, cr0, {3}
 72c:	ldr	r2, [pc, #80]	; 784 <coda_done+0xbc>
 730:	ldr	r3, [r3, r2]
 734:	cmp	r3, #0
 738:	beq	760 <coda_done+0x98>
 73c:	mrc	15, 0, r3, cr13, cr0, {3}
 740:	ldr	r2, [pc, #60]	; 784 <coda_done+0xbc>
 744:	ldr	r3, [r3, r2]
 748:	mov	r0, r3
 74c:	bl	0 <free>
 750:	mrc	15, 0, r3, cr13, cr0, {3}
 754:	ldr	r2, [pc, #40]	; 784 <coda_done+0xbc>
 758:	mov	r1, #0
 75c:	str	r1, [r3, r2]
 760:	bl	0 <coda_mem_done>
 764:	bl	0 <coda_type_done>
 768:	bl	0 <coda_leap_second_table_done>
 76c:	nop	{0}
 770:	sub	sp, fp, #4
 774:	ldr	fp, [sp]
 778:	add	sp, sp, #4
 77c:	pop	{pc}		; (ldr pc, [sp], #4)
	...

00000788 <coda_free>:
 788:	str	fp, [sp, #-8]!
 78c:	str	lr, [sp, #4]
 790:	add	fp, sp, #4
 794:	sub	sp, sp, #8
 798:	str	r0, [fp, #-8]
 79c:	ldr	r0, [fp, #-8]
 7a0:	bl	0 <free>
 7a4:	nop	{0}
 7a8:	sub	sp, fp, #4
 7ac:	ldr	fp, [sp]
 7b0:	add	sp, sp, #4
 7b4:	pop	{pc}		; (ldr pc, [sp], #4)
