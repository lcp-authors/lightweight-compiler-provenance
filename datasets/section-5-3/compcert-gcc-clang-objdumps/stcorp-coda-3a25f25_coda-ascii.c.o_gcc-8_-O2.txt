
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <eol_type_to_string.part.0>:
   0:	movw	r3, #0
   4:	movt	r3, #0
   8:	str	r4, [sp, #-8]!
   c:	movw	r1, #0
  10:	movt	r1, #0
  14:	str	lr, [sp, #4]
  18:	movw	r0, #0
  1c:	movt	r0, #0
  20:	mov	r2, #150	; 0x96
  24:	bl	0 <__assert_fail>

00000028 <verify_eol_type.isra.1>:
  28:	ldr	r3, [r0]
  2c:	cmp	r3, #0
  30:	streq	r1, [r0]
  34:	beq	a4 <verify_eol_type.isra.1+0x7c>
  38:	cmp	r1, r3
  3c:	beq	a0 <verify_eol_type.isra.1+0x78>
  40:	sub	r1, r1, #1
  44:	str	r4, [sp, #-8]!
  48:	cmp	r1, #2
  4c:	str	lr, [sp, #4]
  50:	bhi	ac <verify_eol_type.isra.1+0x84>
  54:	movw	r0, #0
  58:	movt	r0, #0
  5c:	sub	r3, r3, #1
  60:	add	r1, r0, r1, lsl #2
  64:	cmp	r3, #2
  68:	ldr	r2, [r1, #20]
  6c:	bhi	ac <verify_eol_type.isra.1+0x84>
  70:	add	r3, r0, r3, lsl #2
  74:	movw	r1, #0
  78:	movt	r1, #0
  7c:	movw	r0, #65236	; 0xfed4
  80:	movt	r0, #65535	; 0xffff
  84:	ldr	r3, [r3, #20]
  88:	bl	0 <coda_set_error>
  8c:	mvn	r3, #0
  90:	ldr	r4, [sp]
  94:	add	sp, sp, #4
  98:	mov	r0, r3
  9c:	pop	{pc}		; (ldr pc, [sp], #4)
  a0:	mov	r3, #0
  a4:	mov	r0, r3
  a8:	bx	lr
  ac:	bl	0 <eol_type_to_string.part.0>

000000b0 <coda_ascii_reopen_with_definition>:
  b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
  b4:	strd	r6, [sp, #8]
  b8:	strd	sl, [sp, #24]
  bc:	subs	fp, r1, #0
  c0:	strd	r8, [sp, #16]
  c4:	str	lr, [sp, #32]
  c8:	sub	sp, sp, #12
  cc:	beq	208 <coda_ascii_reopen_with_definition+0x158>
  d0:	ldr	sl, [r0]
  d4:	mov	r6, r0
  d8:	ldr	r3, [sl, #16]
  dc:	cmp	r3, #1
  e0:	bne	240 <coda_ascii_reopen_with_definition+0x190>
  e4:	ldr	r7, [fp]
  e8:	cmp	r7, #0
  ec:	bne	224 <coda_ascii_reopen_with_definition+0x174>
  f0:	mov	r0, #80	; 0x50
  f4:	bl	0 <malloc>
  f8:	subs	r4, r0, #0
  fc:	beq	1b0 <coda_ascii_reopen_with_definition+0x100>
 100:	ldrd	r2, [sl, #8]
 104:	mvn	r5, #0
 108:	mov	r8, #0
 10c:	mov	r9, #0
 110:	ldr	r1, [fp, #28]
 114:	ldr	r0, [sl, #48]	; 0x30
 118:	str	r7, [r4]
 11c:	strd	r2, [r4, #8]
 120:	ldrd	r2, [sl, #40]	; 0x28
 124:	str	r7, [r4, #16]
 128:	str	r1, [r4, #20]
 12c:	ldr	r1, [sl, #52]	; 0x34
 130:	str	fp, [r4, #24]
 134:	str	r7, [r4, #28]
 138:	strd	r2, [r4, #40]	; 0x28
 13c:	ldr	r3, [sl, #56]	; 0x38
 140:	str	r7, [r4, #32]
 144:	strd	r8, [sl, #40]	; 0x28
 148:	str	r0, [r4, #48]	; 0x30
 14c:	str	r7, [sl, #48]	; 0x30
 150:	str	r1, [r4, #52]	; 0x34
 154:	str	r3, [r4, #56]	; 0x38
 158:	str	r5, [sl, #56]	; 0x38
 15c:	str	r7, [r4, #60]	; 0x3c
 160:	str	r5, [r4, #64]	; 0x40
 164:	str	r7, [r4, #68]	; 0x44
 168:	str	r7, [r4, #72]	; 0x48
 16c:	str	r7, [r4, #76]	; 0x4c
 170:	ldr	r0, [sl]
 174:	bl	0 <strdup>
 178:	cmp	r0, #0
 17c:	str	r0, [r4]
 180:	beq	1dc <coda_ascii_reopen_with_definition+0x12c>
 184:	mov	r0, sl
 188:	bl	0 <coda_close>
 18c:	mov	r0, r7
 190:	str	r4, [r6]
 194:	add	sp, sp, #12
 198:	ldrd	r4, [sp]
 19c:	ldrd	r6, [sp, #8]
 1a0:	ldrd	r8, [sp, #16]
 1a4:	ldrd	sl, [sp, #24]
 1a8:	add	sp, sp, #32
 1ac:	pop	{pc}		; (ldr pc, [sp], #4)
 1b0:	mov	r0, #61	; 0x3d
 1b4:	movw	r3, #0
 1b8:	movt	r3, #0
 1bc:	movw	r1, #0
 1c0:	movt	r1, #0
 1c4:	mov	r2, #80	; 0x50
 1c8:	str	r0, [sp]
 1cc:	mvn	r0, #0
 1d0:	bl	0 <coda_set_error>
 1d4:	mvn	r0, #0
 1d8:	b	194 <coda_ascii_reopen_with_definition+0xe4>
 1dc:	mov	r3, #97	; 0x61
 1e0:	mov	r0, r5
 1e4:	movw	r2, #0
 1e8:	movt	r2, #0
 1ec:	movw	r1, #0
 1f0:	movt	r1, #0
 1f4:	bl	0 <coda_set_error>
 1f8:	mov	r0, r4
 1fc:	bl	0 <free>
 200:	mov	r0, r5
 204:	b	194 <coda_ascii_reopen_with_definition+0xe4>
 208:	movw	r1, #0
 20c:	movt	r1, #0
 210:	ldr	r3, [pc, #68]	; 25c <coda_ascii_reopen_with_definition+0x1ac>
 214:	movw	r0, #0
 218:	movt	r0, #0
 21c:	mov	r2, #52	; 0x34
 220:	bl	0 <__assert_fail>
 224:	movw	r1, #0
 228:	movt	r1, #0
 22c:	ldr	r3, [pc, #40]	; 25c <coda_ascii_reopen_with_definition+0x1ac>
 230:	movw	r0, #0
 234:	movt	r0, #0
 238:	mov	r2, #54	; 0x36
 23c:	bl	0 <__assert_fail>
 240:	movw	r1, #0
 244:	movt	r1, #0
 248:	ldr	r3, [pc, #12]	; 25c <coda_ascii_reopen_with_definition+0x1ac>
 24c:	movw	r0, #0
 250:	movt	r0, #0
 254:	mov	r2, #53	; 0x35
 258:	bl	0 <__assert_fail>
 25c:	.word	0x00000020

00000260 <coda_ascii_close>:
 260:	strd	r4, [sp, #-16]!
 264:	mov	r4, r0
 268:	str	r6, [sp, #8]
 26c:	str	lr, [sp, #12]
 270:	bl	0 <coda_bin_product_close>
 274:	subs	r5, r0, #0
 278:	bne	2c8 <coda_ascii_close+0x68>
 27c:	ldr	r0, [r4]
 280:	cmp	r0, #0
 284:	beq	28c <coda_ascii_close+0x2c>
 288:	bl	0 <free>
 28c:	ldr	r0, [r4, #68]	; 0x44
 290:	cmp	r0, #0
 294:	beq	29c <coda_ascii_close+0x3c>
 298:	bl	0 <free>
 29c:	ldr	r0, [r4, #76]	; 0x4c
 2a0:	cmp	r0, #0
 2a4:	beq	2ac <coda_ascii_close+0x4c>
 2a8:	bl	0 <coda_type_release>
 2ac:	mov	r0, r4
 2b0:	bl	0 <free>
 2b4:	mov	r0, r5
 2b8:	ldrd	r4, [sp]
 2bc:	ldr	r6, [sp, #8]
 2c0:	add	sp, sp, #12
 2c4:	pop	{pc}		; (ldr pc, [sp], #4)
 2c8:	mvn	r5, #0
 2cc:	b	2b4 <coda_ascii_close+0x54>

000002d0 <coda_ascii_init_asciilines>:
 2d0:	ldr	r3, [r0, #64]	; 0x40
 2d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
 2d8:	strd	r6, [sp, #8]
 2dc:	strd	r8, [sp, #16]
 2e0:	strd	sl, [sp, #24]
 2e4:	str	lr, [sp, #32]
 2e8:	sub	sp, sp, #4224	; 0x1080
 2ec:	cmn	r3, #1
 2f0:	sub	sp, sp, #52	; 0x34
 2f4:	str	r3, [sp, #92]	; 0x5c
 2f8:	bne	8d0 <coda_ascii_init_asciilines+0x600>
 2fc:	ldr	r2, [r0, #52]	; 0x34
 300:	mov	fp, r0
 304:	cmp	r2, #0
 308:	beq	860 <coda_ascii_init_asciilines+0x590>
 30c:	mov	sl, #0
 310:	mov	r4, sl
 314:	mov	r5, sl
 318:	mov	r9, sl
 31c:	str	sl, [sp, #36]	; 0x24
 320:	str	sl, [sp, #44]	; 0x2c
 324:	ldr	ip, [sp, #36]	; 0x24
 328:	ldr	lr, [sp, #44]	; 0x2c
 32c:	ldrd	r2, [fp, #8]
 330:	adds	r1, ip, #4096	; 0x1000
 334:	str	r1, [sp, #64]	; 0x40
 338:	adc	r1, lr, #0
 33c:	str	r1, [sp, #68]	; 0x44
 340:	ldrd	r0, [sp, #64]	; 0x40
 344:	cmp	r2, r0
 348:	sbcs	r1, r3, r1
 34c:	bge	420 <coda_ascii_init_asciilines+0x150>
 350:	subs	r1, r2, ip
 354:	str	r1, [sp, #24]
 358:	sbc	r1, r3, lr
 35c:	str	r1, [sp, #28]
 360:	ldrd	r0, [sp, #24]
 364:	orrs	r1, r0, r1
 368:	beq	898 <coda_ascii_init_asciilines+0x5c8>
 36c:	ldr	r1, [fp, #48]	; 0x30
 370:	cmp	r1, #0
 374:	beq	438 <coda_ascii_init_asciilines+0x168>
 378:	ldrd	r6, [sp, #24]
 37c:	ldr	r0, [sp, #36]	; 0x24
 380:	ldrd	r2, [fp, #40]	; 0x28
 384:	adds	r0, r0, r6
 388:	str	r0, [sp, #72]	; 0x48
 38c:	ldr	r0, [sp, #44]	; 0x2c
 390:	adc	r0, r0, r7
 394:	str	r0, [sp, #76]	; 0x4c
 398:	ldrd	r6, [sp, #72]	; 0x48
 39c:	cmp	r7, r3
 3a0:	cmpeq	r6, r2
 3a4:	bls	7e8 <coda_ascii_init_asciilines+0x518>
 3a8:	ldr	r3, [fp, #16]
 3ac:	cmp	r3, #1
 3b0:	bls	804 <coda_ascii_init_asciilines+0x534>
 3b4:	add	r2, sp, #100	; 0x64
 3b8:	ldrd	r0, [sp, #24]
 3bc:	add	r4, sp, #148	; 0x94
 3c0:	bl	0 <coda_str64>
 3c4:	add	r2, sp, #124	; 0x7c
 3c8:	ldr	r0, [sp, #36]	; 0x24
 3cc:	ldr	r1, [sp, #44]	; 0x2c
 3d0:	bl	0 <coda_str64>
 3d4:	mov	r2, r4
 3d8:	ldrd	r0, [fp, #40]	; 0x28
 3dc:	bl	0 <coda_str64>
 3e0:	movw	r1, #0
 3e4:	movt	r1, #0
 3e8:	str	r4, [sp]
 3ec:	add	r3, sp, #124	; 0x7c
 3f0:	add	r2, sp, #100	; 0x64
 3f4:	mvn	r0, #300	; 0x12c
 3f8:	bl	0 <coda_set_error>
 3fc:	ldr	r0, [sp, #92]	; 0x5c
 400:	add	sp, sp, #4224	; 0x1080
 404:	add	sp, sp, #52	; 0x34
 408:	ldrd	r4, [sp]
 40c:	ldrd	r6, [sp, #8]
 410:	ldrd	r8, [sp, #16]
 414:	ldrd	sl, [sp, #24]
 418:	add	sp, sp, #32
 41c:	pop	{pc}		; (ldr pc, [sp], #4)
 420:	mov	r1, #0
 424:	mov	r0, #4096	; 0x1000
 428:	strd	r0, [sp, #24]
 42c:	ldr	r1, [fp, #48]	; 0x30
 430:	cmp	r1, #0
 434:	bne	378 <coda_ascii_init_asciilines+0xa8>
 438:	ldr	r1, [fp, #16]
 43c:	cmp	r1, #1
 440:	bhi	8ec <coda_ascii_init_asciilines+0x61c>
 444:	ldrd	r6, [sp, #24]
 448:	ldr	ip, [sp, #36]	; 0x24
 44c:	adds	r1, ip, r6
 450:	str	r1, [sp, #80]	; 0x50
 454:	ldr	r1, [sp, #44]	; 0x2c
 458:	adc	r1, r1, r7
 45c:	str	r1, [sp, #84]	; 0x54
 460:	ldrd	r0, [sp, #80]	; 0x50
 464:	cmp	r1, r3
 468:	cmpeq	r0, r2
 46c:	bhi	804 <coda_ascii_init_asciilines+0x534>
 470:	add	r8, sp, #176	; 0xb0
 474:	mov	r3, ip
 478:	ldr	r0, [fp, #56]	; 0x38
 47c:	sub	r1, r8, #4
 480:	mov	r2, r6
 484:	bl	0 <pread>
 488:	cmp	r0, #0
 48c:	blt	908 <coda_ascii_init_asciilines+0x638>
 490:	cmp	r4, #13
 494:	beq	7bc <coda_ascii_init_asciilines+0x4ec>
 498:	ldrd	r2, [sp, #24]
 49c:	cmp	r2, #1
 4a0:	sbcs	r3, r3, #0
 4a4:	blt	5f0 <coda_ascii_init_asciilines+0x320>
 4a8:	sub	r3, r4, #13
 4ac:	mov	r6, #0
 4b0:	clz	r3, r3
 4b4:	mov	r4, #0
 4b8:	lsr	r3, r3, #5
 4bc:	mov	r7, #0
 4c0:	mov	lr, sl
 4c4:	str	r3, [sp, #40]	; 0x28
 4c8:	ldrd	r2, [sp, #24]
 4cc:	subs	r1, r2, #1
 4d0:	mov	r2, fp
 4d4:	sbc	r3, r3, #0
 4d8:	str	r1, [sp, #56]	; 0x38
 4dc:	str	r3, [sp, #60]	; 0x3c
 4e0:	add	r3, fp, #60	; 0x3c
 4e4:	str	r3, [sp, #88]	; 0x58
 4e8:	mov	r3, r5
 4ec:	b	54c <coda_ascii_init_asciilines+0x27c>
 4f0:	ldr	r0, [sp, #36]	; 0x24
 4f4:	ldr	r1, [r2, #8]
 4f8:	ldr	ip, [r2, #12]
 4fc:	adds	r0, r0, r6
 500:	str	r0, [sp, #8]
 504:	ldr	r0, [sp, #44]	; 0x2c
 508:	adc	r0, r0, r7
 50c:	subs	r1, r1, #1
 510:	strd	r0, [sp, #12]
 514:	sbc	r1, ip, #0
 518:	str	r1, [sp, #20]
 51c:	ldrd	r0, [sp, #8]
 520:	ldrd	sl, [sp, #16]
 524:	cmp	r1, fp
 528:	cmpeq	r0, sl
 52c:	beq	680 <coda_ascii_init_asciilines+0x3b0>
 530:	add	r4, r4, #1
 534:	asr	r7, r4, #31
 538:	mov	r6, r4
 53c:	ldrd	sl, [sp, #24]
 540:	cmp	r6, sl
 544:	sbcs	r1, r7, fp
 548:	bge	5e4 <coda_ascii_init_asciilines+0x314>
 54c:	ldr	r1, [sp, #40]	; 0x28
 550:	cmp	r4, #0
 554:	movne	r1, #0
 558:	cmp	r1, #0
 55c:	beq	56c <coda_ascii_init_asciilines+0x29c>
 560:	ldrb	r1, [r8, #-4]
 564:	cmp	r1, #10
 568:	beq	6f0 <coda_ascii_init_asciilines+0x420>
 56c:	add	r1, r8, r4
 570:	ldrb	r5, [r1, #-4]
 574:	cmp	r5, #10
 578:	cmpne	r5, #13
 57c:	moveq	r1, #1
 580:	movne	r1, #0
 584:	str	r1, [sp, #32]
 588:	bne	4f0 <coda_ascii_init_asciilines+0x220>
 58c:	tst	r9, #15
 590:	mov	sl, r9
 594:	beq	618 <coda_ascii_init_asciilines+0x348>
 598:	ldr	r1, [sp, #36]	; 0x24
 59c:	cmp	r5, #10
 5a0:	add	r1, r4, r1
 5a4:	addne	r4, r4, #1
 5a8:	add	r1, r1, #1
 5ac:	str	r1, [r3, r9, lsl #2]
 5b0:	add	r9, r9, #1
 5b4:	beq	6b8 <coda_ascii_init_asciilines+0x3e8>
 5b8:	ldrd	r0, [sp, #56]	; 0x38
 5bc:	cmp	r6, r0
 5c0:	sbcs	r1, r7, r1
 5c4:	blt	738 <coda_ascii_init_asciilines+0x468>
 5c8:	ldrd	sl, [sp, #24]
 5cc:	mov	r6, r4
 5d0:	asr	r7, r4, #31
 5d4:	mov	lr, #2
 5d8:	cmp	r6, sl
 5dc:	sbcs	r1, r7, fp
 5e0:	blt	54c <coda_ascii_init_asciilines+0x27c>
 5e4:	mov	r5, r3
 5e8:	mov	sl, lr
 5ec:	mov	fp, r2
 5f0:	ldrd	r2, [sp, #24]
 5f4:	ldr	r1, [sp, #36]	; 0x24
 5f8:	add	r8, r8, r2
 5fc:	ldrb	r4, [r8, #-5]
 600:	adds	r1, r1, r2
 604:	str	r1, [sp, #36]	; 0x24
 608:	ldr	r1, [sp, #44]	; 0x2c
 60c:	adc	r3, r1, r3
 610:	str	r3, [sp, #44]	; 0x2c
 614:	b	324 <coda_ascii_init_asciilines+0x54>
 618:	add	fp, r9, #16
 61c:	mov	r0, r3
 620:	str	r3, [sp, #48]	; 0x30
 624:	lsl	fp, fp, #2
 628:	str	r2, [sp, #52]	; 0x34
 62c:	mov	r1, fp
 630:	bl	0 <realloc>
 634:	cmp	r0, #0
 638:	ldr	r3, [sp, #48]	; 0x30
 63c:	ldr	r2, [sp, #52]	; 0x34
 640:	beq	824 <coda_ascii_init_asciilines+0x554>
 644:	cmp	r5, #10
 648:	ldr	r3, [sp, #36]	; 0x24
 64c:	add	r3, r4, r3
 650:	add	r3, r3, #1
 654:	str	r3, [r0, r9, lsl #2]
 658:	add	r9, r9, #1
 65c:	beq	6b4 <coda_ascii_init_asciilines+0x3e4>
 660:	ldr	lr, [sp, #32]
 664:	mov	r3, r0
 668:	add	r4, r4, #1
 66c:	cmp	lr, #0
 670:	bne	5b8 <coda_ascii_init_asciilines+0x2e8>
 674:	mov	r6, r4
 678:	asr	r7, r4, #31
 67c:	b	53c <coda_ascii_init_asciilines+0x26c>
 680:	tst	r9, #15
 684:	mov	sl, r9
 688:	beq	618 <coda_ascii_init_asciilines+0x348>
 68c:	ldr	lr, [sp, #32]
 690:	ldr	r1, [sp, #36]	; 0x24
 694:	add	r1, r4, r1
 698:	add	r4, r4, #1
 69c:	add	r1, r1, #1
 6a0:	mov	r6, r4
 6a4:	asr	r7, r4, #31
 6a8:	str	r1, [r3, r9, lsl #2]
 6ac:	add	r9, r9, #1
 6b0:	b	53c <coda_ascii_init_asciilines+0x26c>
 6b4:	mov	r3, r0
 6b8:	mov	r1, #1
 6bc:	ldr	r0, [sp, #88]	; 0x58
 6c0:	str	r3, [sp, #32]
 6c4:	str	r2, [sp, #48]	; 0x30
 6c8:	bl	28 <verify_eol_type.isra.1>
 6cc:	cmp	r0, #0
 6d0:	ldr	r3, [sp, #32]
 6d4:	bne	818 <coda_ascii_init_asciilines+0x548>
 6d8:	add	r4, r4, #1
 6dc:	mov	lr, #1
 6e0:	ldr	r2, [sp, #48]	; 0x30
 6e4:	mov	r6, r4
 6e8:	asr	r7, r4, #31
 6ec:	b	53c <coda_ascii_init_asciilines+0x26c>
 6f0:	sub	lr, r9, #-1073741823	; 0xc0000001
 6f4:	mov	r1, #3
 6f8:	ldr	r0, [sp, #88]	; 0x58
 6fc:	str	r3, [sp, #32]
 700:	ldr	ip, [r3, lr, lsl #2]
 704:	str	r2, [sp, #48]	; 0x30
 708:	add	ip, ip, #1
 70c:	str	ip, [r3, lr, lsl #2]
 710:	bl	28 <verify_eol_type.isra.1>
 714:	cmp	r0, #0
 718:	ldr	r3, [sp, #32]
 71c:	ldr	r2, [sp, #48]	; 0x30
 720:	bne	818 <coda_ascii_init_asciilines+0x548>
 724:	mov	r4, #1
 728:	mov	r6, #1
 72c:	mov	r7, #0
 730:	mov	lr, #3
 734:	b	53c <coda_ascii_init_asciilines+0x26c>
 738:	add	r1, r8, r4
 73c:	str	r3, [sp, #32]
 740:	ldrb	r1, [r1, #-4]
 744:	str	r2, [sp, #48]	; 0x30
 748:	cmp	r1, #10
 74c:	beq	77c <coda_ascii_init_asciilines+0x4ac>
 750:	mov	r1, #2
 754:	ldr	r0, [sp, #88]	; 0x58
 758:	bl	28 <verify_eol_type.isra.1>
 75c:	cmp	r0, #0
 760:	ldr	r3, [sp, #32]
 764:	bne	818 <coda_ascii_init_asciilines+0x548>
 768:	mov	r6, r4
 76c:	asr	r7, r4, #31
 770:	mov	lr, #2
 774:	ldr	r2, [sp, #48]	; 0x30
 778:	b	53c <coda_ascii_init_asciilines+0x26c>
 77c:	mov	r1, #3
 780:	ldr	r0, [sp, #88]	; 0x58
 784:	bl	28 <verify_eol_type.isra.1>
 788:	cmp	r0, #0
 78c:	ldr	r3, [sp, #32]
 790:	ldr	r2, [sp, #48]	; 0x30
 794:	bne	818 <coda_ascii_init_asciilines+0x548>
 798:	add	ip, sl, #1073741824	; 0x40000000
 79c:	add	r4, r4, #1
 7a0:	ldr	r1, [r3, ip, lsl #2]
 7a4:	mov	lr, #3
 7a8:	mov	r6, r4
 7ac:	asr	r7, r4, #31
 7b0:	add	r1, r1, #1
 7b4:	str	r1, [r3, ip, lsl #2]
 7b8:	b	53c <coda_ascii_init_asciilines+0x26c>
 7bc:	ldrb	r3, [r8, #-4]
 7c0:	cmp	r3, #10
 7c4:	beq	498 <coda_ascii_init_asciilines+0x1c8>
 7c8:	mov	r1, #2
 7cc:	add	r0, fp, #60	; 0x3c
 7d0:	bl	28 <verify_eol_type.isra.1>
 7d4:	cmp	r0, #0
 7d8:	beq	498 <coda_ascii_init_asciilines+0x1c8>
 7dc:	mov	r0, r5
 7e0:	bl	0 <free>
 7e4:	b	3fc <coda_ascii_init_asciilines+0x12c>
 7e8:	add	r8, sp, #176	; 0xb0
 7ec:	ldr	r2, [sp, #24]
 7f0:	sub	r0, r8, #4
 7f4:	ldr	r3, [sp, #36]	; 0x24
 7f8:	add	r1, r1, r3
 7fc:	bl	0 <memcpy>
 800:	b	490 <coda_ascii_init_asciilines+0x1c0>
 804:	movw	r1, #0
 808:	movt	r1, #0
 80c:	mvn	r0, #300	; 0x12c
 810:	bl	0 <coda_set_error>
 814:	b	3fc <coda_ascii_init_asciilines+0x12c>
 818:	mov	r0, r3
 81c:	bl	0 <free>
 820:	b	3fc <coda_ascii_init_asciilines+0x12c>
 824:	mov	r0, #245	; 0xf5
 828:	mov	r4, r3
 82c:	mov	r2, fp
 830:	movw	r3, #0
 834:	movt	r3, #0
 838:	movw	r1, #0
 83c:	movt	r1, #0
 840:	str	r0, [sp]
 844:	mvn	r0, #0
 848:	bl	0 <coda_set_error>
 84c:	cmp	r4, #0
 850:	mov	r0, r4
 854:	beq	3fc <coda_ascii_init_asciilines+0x12c>
 858:	bl	0 <free>
 85c:	b	3fc <coda_ascii_init_asciilines+0x12c>
 860:	mov	r1, r2
 864:	ldr	r0, [r0, #56]	; 0x38
 868:	bl	0 <lseek>
 86c:	cmp	r0, #0
 870:	bge	30c <coda_ascii_init_asciilines+0x3c>
 874:	bl	0 <__errno_location>
 878:	ldr	r0, [r0]
 87c:	bl	0 <strerror>
 880:	mov	r2, r0
 884:	movw	r1, #0
 888:	movt	r1, #0
 88c:	mvn	r0, #21
 890:	bl	0 <coda_set_error>
 894:	b	3fc <coda_ascii_init_asciilines+0x12c>
 898:	cmp	r4, #13
 89c:	beq	8b8 <coda_ascii_init_asciilines+0x5e8>
 8a0:	mov	r3, #0
 8a4:	str	r9, [fp, #64]	; 0x40
 8a8:	str	r5, [fp, #68]	; 0x44
 8ac:	str	sl, [fp, #72]	; 0x48
 8b0:	str	r3, [sp, #92]	; 0x5c
 8b4:	b	3fc <coda_ascii_init_asciilines+0x12c>
 8b8:	mov	r1, #2
 8bc:	add	r0, fp, #60	; 0x3c
 8c0:	bl	28 <verify_eol_type.isra.1>
 8c4:	cmp	r0, #0
 8c8:	beq	8a0 <coda_ascii_init_asciilines+0x5d0>
 8cc:	b	7dc <coda_ascii_init_asciilines+0x50c>
 8d0:	movw	r1, #0
 8d4:	movt	r1, #0
 8d8:	ldr	r3, [pc, #76]	; 92c <coda_ascii_init_asciilines+0x65c>
 8dc:	movw	r0, #0
 8e0:	movt	r0, #0
 8e4:	mov	r2, #185	; 0xb9
 8e8:	bl	0 <__assert_fail>
 8ec:	movw	r1, #0
 8f0:	movt	r1, #0
 8f4:	ldr	r3, [pc, #52]	; 930 <coda_ascii_init_asciilines+0x660>
 8f8:	movw	r0, #0
 8fc:	movt	r0, #0
 900:	mov	r2, #83	; 0x53
 904:	bl	0 <__assert_fail>
 908:	bl	0 <__errno_location>
 90c:	ldr	r0, [r0]
 910:	bl	0 <strerror>
 914:	mov	r2, r0
 918:	movw	r1, #0
 91c:	movt	r1, #0
 920:	mvn	r0, #21
 924:	bl	0 <coda_set_error>
 928:	b	3fc <coda_ascii_init_asciilines+0x12c>
 92c:	.word	0x00000044
 930:	.word	0x00000060
