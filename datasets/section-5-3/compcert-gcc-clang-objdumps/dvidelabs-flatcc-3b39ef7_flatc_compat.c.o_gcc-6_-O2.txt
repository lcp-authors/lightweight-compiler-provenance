
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <MyGame_Example2_Monster_verify_table>:
       0:	mov	r0, #0
       4:	bx	lr

00000008 <Fantasy_Attacker_verify_table>:
       8:	mov	r3, #4
       c:	mov	r2, r3
      10:	mov	r1, #0
      14:	b	0 <flatcc_verify_field>

00000018 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
      18:	mov	r3, #8
      1c:	push	{r4, lr}
      20:	mov	r2, r3
      24:	mov	r1, #0
      28:	mov	r4, r0
      2c:	bl	0 <flatcc_verify_field>
      30:	cmp	r0, #0
      34:	popne	{r4, pc}
      38:	mov	r3, #4
      3c:	mov	r0, r4
      40:	mov	r2, r3
      44:	mov	r1, #1
      48:	pop	{r4, lr}
      4c:	b	0 <flatcc_verify_field>

00000050 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
      50:	mov	r3, #1
      54:	push	{r4, lr}
      58:	mov	r2, r3
      5c:	mov	r1, #0
      60:	mov	r4, r0
      64:	bl	0 <flatcc_verify_field>
      68:	cmp	r0, #0
      6c:	popne	{r4, pc}
      70:	mov	r3, #1
      74:	mov	r2, r3
      78:	mov	r1, r3
      7c:	mov	r0, r4
      80:	bl	0 <flatcc_verify_field>
      84:	cmp	r0, #0
      88:	popne	{r4, pc}
      8c:	mov	r3, #1
      90:	mov	r2, r3
      94:	mov	r1, #2
      98:	mov	r0, r4
      9c:	bl	0 <flatcc_verify_field>
      a0:	cmp	r0, #0
      a4:	popne	{r4, pc}
      a8:	mov	r3, #1
      ac:	mov	r0, r4
      b0:	mov	r2, r3
      b4:	mov	r1, #3
      b8:	pop	{r4, lr}
      bc:	b	0 <flatcc_verify_field>

000000c0 <MyGame_Example_Stat_verify_table>:
      c0:	mov	r2, #0
      c4:	push	{r4, lr}
      c8:	mov	r1, r2
      cc:	mov	r4, r0
      d0:	bl	0 <flatcc_verify_string_field>
      d4:	cmp	r0, #0
      d8:	popne	{r4, pc}
      dc:	mov	r3, #8
      e0:	mov	r2, r3
      e4:	mov	r1, #1
      e8:	mov	r0, r4
      ec:	bl	0 <flatcc_verify_field>
      f0:	cmp	r0, #0
      f4:	popne	{r4, pc}
      f8:	mov	r3, #2
      fc:	mov	r0, r4
     100:	mov	r2, r3
     104:	mov	r1, r3
     108:	pop	{r4, lr}
     10c:	b	0 <flatcc_verify_field>

00000110 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
     110:	mov	r2, #0
     114:	push	{r4, lr}
     118:	mov	r1, r2
     11c:	mov	r4, r0
     120:	bl	0 <flatcc_verify_string_field>
     124:	cmp	r0, #0
     128:	popne	{r4, pc}
     12c:	mov	r3, #4
     130:	mov	r2, r3
     134:	mov	r1, #1
     138:	mov	r0, r4
     13c:	bl	0 <flatcc_verify_field>
     140:	cmp	r0, #0
     144:	popne	{r4, pc}
     148:	mov	r2, r0
     14c:	mov	r1, #2
     150:	mov	r0, r4
     154:	bl	0 <flatcc_verify_string_field>
     158:	cmp	r0, #0
     15c:	popne	{r4, pc}
     160:	mov	r3, #8
     164:	mov	r2, r3
     168:	mov	r1, #3
     16c:	mov	r0, r4
     170:	bl	0 <flatcc_verify_field>
     174:	cmp	r0, #0
     178:	popne	{r4, pc}
     17c:	mov	r2, r0
     180:	mov	r1, #4
     184:	mov	r0, r4
     188:	bl	0 <flatcc_verify_string_field>
     18c:	cmp	r0, #0
     190:	popne	{r4, pc}
     194:	mov	r3, #8
     198:	mov	r2, r3
     19c:	mov	r1, #5
     1a0:	mov	r0, r4
     1a4:	bl	0 <flatcc_verify_field>
     1a8:	cmp	r0, #0
     1ac:	popne	{r4, pc}
     1b0:	mov	r3, #4
     1b4:	mov	r2, r3
     1b8:	mov	r1, #6
     1bc:	mov	r0, r4
     1c0:	bl	0 <flatcc_verify_field>
     1c4:	cmp	r0, #0
     1c8:	popne	{r4, pc}
     1cc:	mov	r3, #8
     1d0:	mov	r2, r3
     1d4:	mov	r1, #7
     1d8:	mov	r0, r4
     1dc:	bl	0 <flatcc_verify_field>
     1e0:	cmp	r0, #0
     1e4:	popne	{r4, pc}
     1e8:	mov	r3, #4
     1ec:	mov	r0, r4
     1f0:	mov	r2, r3
     1f4:	mov	r1, #8
     1f8:	pop	{r4, lr}
     1fc:	b	0 <flatcc_verify_field>

00000200 <MyGame_Example_TestJSONPrefix_verify_table>:
     200:	mov	r2, #0
     204:	push	{r4, lr}
     208:	mov	r1, r2
     20c:	ldr	r3, [pc, #64]	; 254 <MyGame_Example_TestJSONPrefix_verify_table+0x54>
     210:	mov	r4, r0
     214:	bl	0 <flatcc_verify_table_field>
     218:	cmp	r0, #0
     21c:	popne	{r4, pc}
     220:	mov	r2, r0
     224:	ldr	r3, [pc, #44]	; 258 <MyGame_Example_TestJSONPrefix_verify_table+0x58>
     228:	mov	r1, #1
     22c:	mov	r0, r4
     230:	bl	0 <flatcc_verify_table_field>
     234:	cmp	r0, #0
     238:	popne	{r4, pc}
     23c:	mov	r2, r0
     240:	ldr	r3, [pc, #20]	; 25c <MyGame_Example_TestJSONPrefix_verify_table+0x5c>
     244:	mov	r0, r4
     248:	mov	r1, #2
     24c:	pop	{r4, lr}
     250:	b	0 <flatcc_verify_table_field>
	...

00000260 <MyGame_Example_Monster_verify_table>:
     260:	push	{r4, r5, r6, r7, r8, lr}
     264:	mov	r3, #16
     268:	sub	sp, sp, #8
     26c:	mov	r2, #32
     270:	mov	r1, #0
     274:	mov	r4, r0
     278:	bl	0 <flatcc_verify_field>
     27c:	cmp	r0, #0
     280:	beq	28c <MyGame_Example_Monster_verify_table+0x2c>
     284:	add	sp, sp, #8
     288:	pop	{r4, r5, r6, r7, r8, pc}
     28c:	mov	r3, #2
     290:	mov	r2, r3
     294:	mov	r1, r3
     298:	mov	r0, r4
     29c:	bl	0 <flatcc_verify_field>
     2a0:	cmp	r0, #0
     2a4:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     2a8:	mov	r3, #2
     2ac:	mov	r2, r3
     2b0:	mov	r1, #1
     2b4:	mov	r0, r4
     2b8:	bl	0 <flatcc_verify_field>
     2bc:	cmp	r0, #0
     2c0:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     2c4:	mov	r2, #1
     2c8:	mov	r1, #3
     2cc:	mov	r0, r4
     2d0:	bl	0 <flatcc_verify_string_field>
     2d4:	cmp	r0, #0
     2d8:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     2dc:	mov	r3, #1
     2e0:	mov	r2, r3
     2e4:	mov	r1, #6
     2e8:	mov	r0, r4
     2ec:	bl	0 <flatcc_verify_field>
     2f0:	cmp	r0, #0
     2f4:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     2f8:	mov	r5, #1
     2fc:	mvn	r6, #0
     300:	mov	r2, r0
     304:	stm	sp, {r5, r6}
     308:	mov	r3, r5
     30c:	mov	r1, #5
     310:	mov	r0, r4
     314:	bl	0 <flatcc_verify_vector_field>
     318:	cmp	r0, #0
     31c:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     320:	mov	r2, r0
     324:	ldr	r3, [pc, #840]	; 674 <MyGame_Example_Monster_verify_table+0x414>
     328:	mov	r1, #11
     32c:	mov	r0, r4
     330:	bl	0 <flatcc_verify_table_vector_field>
     334:	cmp	r0, #0
     338:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     33c:	mov	r2, r0
     340:	mov	r1, #10
     344:	mov	r0, r4
     348:	bl	0 <flatcc_verify_string_vector_field>
     34c:	cmp	r0, #0
     350:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     354:	mov	r2, r0
     358:	mov	r1, #28
     35c:	mov	r0, r4
     360:	bl	0 <flatcc_verify_string_vector_field>
     364:	cmp	r0, #0
     368:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     36c:	mov	r2, r0
     370:	stm	sp, {r5, r6}
     374:	mov	r3, r5
     378:	mov	r1, #24
     37c:	mov	r0, r4
     380:	bl	0 <flatcc_verify_vector_field>
     384:	cmp	r0, #0
     388:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     38c:	mvn	r3, #-536870912	; 0xe0000000
     390:	mov	r5, #4
     394:	str	r3, [sp, #4]
     398:	str	r5, [sp]
     39c:	mov	r3, #8
     3a0:	mov	r2, #0
     3a4:	mov	r1, #29
     3a8:	mov	r0, r4
     3ac:	bl	0 <flatcc_verify_vector_field>
     3b0:	cmp	r0, #0
     3b4:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     3b8:	ldr	r7, [pc, #692]	; 674 <MyGame_Example_Monster_verify_table+0x414>
     3bc:	mov	r2, r0
     3c0:	mov	r3, r7
     3c4:	mov	r1, #12
     3c8:	mov	r0, r4
     3cc:	bl	0 <flatcc_verify_table_field>
     3d0:	cmp	r0, #0
     3d4:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     3d8:	mov	r2, r0
     3dc:	ldr	r3, [pc, #660]	; 678 <MyGame_Example_Monster_verify_table+0x418>
     3e0:	mov	r1, #8
     3e4:	mov	r0, r4
     3e8:	bl	0 <flatcc_verify_union_field>
     3ec:	cmp	r0, #0
     3f0:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     3f4:	mvn	r8, #-1073741824	; 0xc0000000
     3f8:	mov	r6, #2
     3fc:	mov	r2, r0
     400:	stm	sp, {r6, r8}
     404:	mov	r3, r5
     408:	mov	r1, #9
     40c:	mov	r0, r4
     410:	bl	0 <flatcc_verify_vector_field>
     414:	cmp	r0, #0
     418:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     41c:	mov	r2, r0
     420:	stm	sp, {r6, r8}
     424:	mov	r3, r5
     428:	mov	r1, #31
     42c:	mov	r0, r4
     430:	bl	0 <flatcc_verify_vector_field>
     434:	cmp	r0, #0
     438:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     43c:	mov	r6, #1
     440:	mov	r3, r0
     444:	mov	r2, r0
     448:	stm	sp, {r6, r7}
     44c:	mov	r1, #13
     450:	mov	r0, r4
     454:	bl	0 <flatcc_verify_table_as_nested_root>
     458:	cmp	r0, #0
     45c:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     460:	mov	r2, r0
     464:	ldr	r3, [pc, #528]	; 67c <MyGame_Example_Monster_verify_table+0x41c>
     468:	mov	r1, #14
     46c:	mov	r0, r4
     470:	bl	0 <flatcc_verify_table_field>
     474:	cmp	r0, #0
     478:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     47c:	mov	r3, r6
     480:	mov	r2, r6
     484:	mov	r1, #15
     488:	mov	r0, r4
     48c:	bl	0 <flatcc_verify_field>
     490:	cmp	r0, #0
     494:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     498:	mov	r3, r5
     49c:	mov	r2, r5
     4a0:	mov	r1, #16
     4a4:	mov	r0, r4
     4a8:	bl	0 <flatcc_verify_field>
     4ac:	cmp	r0, #0
     4b0:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     4b4:	mov	r3, r5
     4b8:	mov	r2, r5
     4bc:	mov	r1, #17
     4c0:	mov	r0, r4
     4c4:	bl	0 <flatcc_verify_field>
     4c8:	cmp	r0, #0
     4cc:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     4d0:	mov	r3, #8
     4d4:	mov	r2, r3
     4d8:	mov	r1, #18
     4dc:	mov	r0, r4
     4e0:	bl	0 <flatcc_verify_field>
     4e4:	cmp	r0, #0
     4e8:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     4ec:	mov	r3, #8
     4f0:	mov	r2, r3
     4f4:	mov	r1, #19
     4f8:	mov	r0, r4
     4fc:	bl	0 <flatcc_verify_field>
     500:	cmp	r0, #0
     504:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     508:	mov	r3, r5
     50c:	mov	r2, r5
     510:	mov	r1, #20
     514:	mov	r0, r4
     518:	bl	0 <flatcc_verify_field>
     51c:	cmp	r0, #0
     520:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     524:	mov	r3, r5
     528:	mov	r2, r5
     52c:	mov	r1, #21
     530:	mov	r0, r4
     534:	bl	0 <flatcc_verify_field>
     538:	cmp	r0, #0
     53c:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     540:	mov	r3, #8
     544:	mov	r2, r3
     548:	mov	r1, #22
     54c:	mov	r0, r4
     550:	bl	0 <flatcc_verify_field>
     554:	cmp	r0, #0
     558:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     55c:	mov	r3, #8
     560:	mov	r2, r3
     564:	mov	r1, #23
     568:	mov	r0, r4
     56c:	bl	0 <flatcc_verify_field>
     570:	cmp	r0, #0
     574:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     578:	mov	r3, r5
     57c:	mov	r2, r5
     580:	mov	r1, #25
     584:	mov	r0, r4
     588:	bl	0 <flatcc_verify_field>
     58c:	cmp	r0, #0
     590:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     594:	mov	r3, r5
     598:	mov	r2, r5
     59c:	mov	r1, #26
     5a0:	mov	r0, r4
     5a4:	bl	0 <flatcc_verify_field>
     5a8:	cmp	r0, #0
     5ac:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     5b0:	mov	r3, r5
     5b4:	mov	r2, r5
     5b8:	mov	r1, #27
     5bc:	mov	r0, r4
     5c0:	bl	0 <flatcc_verify_field>
     5c4:	cmp	r0, #0
     5c8:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     5cc:	mvn	r1, #0
     5d0:	mov	r2, r0
     5d4:	str	r1, [sp, #4]
     5d8:	mov	r3, r6
     5dc:	str	r6, [sp]
     5e0:	mov	r1, #30
     5e4:	mov	r0, r4
     5e8:	bl	0 <flatcc_verify_vector_field>
     5ec:	cmp	r0, #0
     5f0:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     5f4:	mov	r5, #8
     5f8:	mvn	r6, #-536870912	; 0xe0000000
     5fc:	mov	r3, r5
     600:	stm	sp, {r5, r6}
     604:	mov	r2, #0
     608:	mov	r1, #32
     60c:	mov	r0, r4
     610:	bl	0 <flatcc_verify_vector_field>
     614:	cmp	r0, #0
     618:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     61c:	mov	r2, r0
     620:	stm	sp, {r5, r6}
     624:	mov	r3, r5
     628:	mov	r1, #33	; 0x21
     62c:	mov	r0, r4
     630:	bl	0 <flatcc_verify_vector_field>
     634:	cmp	r0, #0
     638:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     63c:	mov	r2, r0
     640:	ldr	r3, [pc, #56]	; 680 <MyGame_Example_Monster_verify_table+0x420>
     644:	mov	r1, #34	; 0x22
     648:	mov	r0, r4
     64c:	bl	0 <flatcc_verify_table_field>
     650:	cmp	r0, #0
     654:	bne	284 <MyGame_Example_Monster_verify_table+0x24>
     658:	mov	r2, r0
     65c:	ldr	r3, [pc, #32]	; 684 <MyGame_Example_Monster_verify_table+0x424>
     660:	mov	r0, r4
     664:	mov	r1, #35	; 0x23
     668:	add	sp, sp, #8
     66c:	pop	{r4, r5, r6, r7, r8, lr}
     670:	b	0 <flatcc_verify_table_field>
	...

00000688 <MyGame_Example_TestBase64_verify_table>:
     688:	push	{r4, r5, r6, lr}
     68c:	mov	r4, #1
     690:	sub	sp, sp, #8
     694:	mvn	r5, #0
     698:	mov	r2, #0
     69c:	mov	r1, r2
     6a0:	stm	sp, {r4, r5}
     6a4:	mov	r3, r4
     6a8:	mov	r6, r0
     6ac:	bl	0 <flatcc_verify_vector_field>
     6b0:	subs	r2, r0, #0
     6b4:	beq	6c4 <MyGame_Example_TestBase64_verify_table+0x3c>
     6b8:	mov	r0, r2
     6bc:	add	sp, sp, #8
     6c0:	pop	{r4, r5, r6, pc}
     6c4:	stm	sp, {r4, r5}
     6c8:	mov	r3, r4
     6cc:	mov	r1, r4
     6d0:	mov	r0, r6
     6d4:	bl	0 <flatcc_verify_vector_field>
     6d8:	subs	r2, r0, #0
     6dc:	bne	6b8 <MyGame_Example_TestBase64_verify_table+0x30>
     6e0:	ldr	r3, [pc, #36]	; 70c <MyGame_Example_TestBase64_verify_table+0x84>
     6e4:	str	r4, [sp]
     6e8:	str	r3, [sp, #4]
     6ec:	mov	r0, r6
     6f0:	mov	r3, r2
     6f4:	mov	r1, #2
     6f8:	bl	0 <flatcc_verify_table_as_nested_root>
     6fc:	mov	r2, r0
     700:	mov	r0, r2
     704:	add	sp, sp, #8
     708:	pop	{r4, r5, r6, pc}
     70c:	.word	0x00000000

00000710 <MyGame_Example_Any_union_verifier>:
     710:	ldrb	r3, [r0, #12]
     714:	sub	r3, r3, #1
     718:	cmp	r3, #3
     71c:	ldrls	pc, [pc, r3, lsl #2]
     720:	b	754 <MyGame_Example_Any_union_verifier+0x44>
     724:	.word	0x0000074c
     728:	.word	0x00000744
     72c:	.word	0x0000073c
     730:	.word	0x00000734
     734:	ldr	r1, [pc, #32]	; 75c <MyGame_Example_Any_union_verifier+0x4c>
     738:	b	0 <flatcc_verify_union_table>
     73c:	ldr	r1, [pc, #28]	; 760 <MyGame_Example_Any_union_verifier+0x50>
     740:	b	0 <flatcc_verify_union_table>
     744:	ldr	r1, [pc, #24]	; 764 <MyGame_Example_Any_union_verifier+0x54>
     748:	b	0 <flatcc_verify_union_table>
     74c:	ldr	r1, [pc, #20]	; 768 <MyGame_Example_Any_union_verifier+0x58>
     750:	b	0 <flatcc_verify_union_table>
     754:	mov	r0, #0
     758:	bx	lr
	...

0000076c <MyGame_Example_Alt_verify_table>:
     76c:	mov	r2, #0
     770:	push	{r4, lr}
     774:	mov	r1, r2
     778:	ldr	r3, [pc, #64]	; 7c0 <MyGame_Example_Alt_verify_table+0x54>
     77c:	mov	r4, r0
     780:	bl	0 <flatcc_verify_table_field>
     784:	cmp	r0, #0
     788:	popne	{r4, pc}
     78c:	mov	r2, r0
     790:	ldr	r3, [pc, #44]	; 7c4 <MyGame_Example_Alt_verify_table+0x58>
     794:	mov	r1, #1
     798:	mov	r0, r4
     79c:	bl	0 <flatcc_verify_table_field>
     7a0:	cmp	r0, #0
     7a4:	popne	{r4, pc}
     7a8:	mov	r2, r0
     7ac:	ldr	r3, [pc, #20]	; 7c8 <MyGame_Example_Alt_verify_table+0x5c>
     7b0:	mov	r0, r4
     7b4:	mov	r1, #3
     7b8:	pop	{r4, lr}
     7bc:	b	0 <flatcc_verify_union_vector_field>
	...

000007cc <Fantasy_Movie_verify_table>:
     7cc:	push	{r4, lr}
     7d0:	mov	r2, #0
     7d4:	ldr	r3, [pc, #124]	; 858 <Fantasy_Movie_verify_table+0x8c>
     7d8:	mov	r1, #1
     7dc:	mov	r4, r0
     7e0:	bl	0 <flatcc_verify_union_field>
     7e4:	cmp	r0, #0
     7e8:	popne	{r4, pc}
     7ec:	mov	r2, r0
     7f0:	ldr	r3, [pc, #96]	; 858 <Fantasy_Movie_verify_table+0x8c>
     7f4:	mov	r1, #3
     7f8:	mov	r0, r4
     7fc:	bl	0 <flatcc_verify_union_field>
     800:	cmp	r0, #0
     804:	popne	{r4, pc}
     808:	mov	r2, r0
     80c:	ldr	r3, [pc, #68]	; 858 <Fantasy_Movie_verify_table+0x8c>
     810:	mov	r1, #5
     814:	mov	r0, r4
     818:	bl	0 <flatcc_verify_union_field>
     81c:	cmp	r0, #0
     820:	popne	{r4, pc}
     824:	mov	r2, r0
     828:	ldr	r3, [pc, #40]	; 858 <Fantasy_Movie_verify_table+0x8c>
     82c:	mov	r1, #7
     830:	mov	r0, r4
     834:	bl	0 <flatcc_verify_union_field>
     838:	cmp	r0, #0
     83c:	popne	{r4, pc}
     840:	mov	r2, r0
     844:	ldr	r3, [pc, #12]	; 858 <Fantasy_Movie_verify_table+0x8c>
     848:	mov	r0, r4
     84c:	mov	r1, #9
     850:	pop	{r4, lr}
     854:	b	0 <flatcc_verify_union_vector_field>
     858:	.word	0x00000000

0000085c <Fantasy_Character_union_verifier>:
     85c:	ldrb	r3, [r0, #12]
     860:	cmp	r3, #9
     864:	beq	8a0 <Fantasy_Character_union_verifier+0x44>
     868:	bls	884 <Fantasy_Character_union_verifier+0x28>
     86c:	cmp	r3, #11
     870:	beq	880 <Fantasy_Character_union_verifier+0x24>
     874:	bcc	8a0 <Fantasy_Character_union_verifier+0x44>
     878:	cmp	r3, #255	; 0xff
     87c:	bne	8ac <Fantasy_Character_union_verifier+0x50>
     880:	b	0 <flatcc_verify_union_string>
     884:	cmp	r3, #2
     888:	beq	8b4 <Fantasy_Character_union_verifier+0x58>
     88c:	cmp	r3, #8
     890:	bne	8ac <Fantasy_Character_union_verifier+0x50>
     894:	mov	r2, #2
     898:	mov	r1, r2
     89c:	b	0 <flatcc_verify_union_struct>
     8a0:	mov	r2, #4
     8a4:	mov	r1, r2
     8a8:	b	0 <flatcc_verify_union_struct>
     8ac:	mov	r0, #0
     8b0:	bx	lr
     8b4:	ldr	r1, [pc]	; 8bc <Fantasy_Character_union_verifier+0x60>
     8b8:	b	0 <flatcc_verify_union_table>
     8bc:	.word	0x00000000

000008c0 <MyGame_InParentNamespace_verify_table>:
     8c0:	mov	r0, #0
     8c4:	bx	lr

000008c8 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
     8c8:	mov	r3, #8
     8cc:	push	{r4, lr}
     8d0:	mov	r2, r3
     8d4:	mov	r1, #0
     8d8:	mov	r4, r0
     8dc:	bl	0 <flatcc_verify_field>
     8e0:	cmp	r0, #0
     8e4:	popne	{r4, pc}
     8e8:	mov	r3, #4
     8ec:	mov	r0, r4
     8f0:	mov	r2, r3
     8f4:	mov	r1, #1
     8f8:	pop	{r4, lr}
     8fc:	b	0 <flatcc_verify_field>

00000900 <verify_monster>:
     900:	cmp	r0, #0
     904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
     908:	beq	91c <verify_monster+0x1c>
     90c:	ldr	r3, [pc, #1072]	; d44 <verify_monster+0x444>
     910:	ldr	r2, [r0, #4]
     914:	cmp	r2, r3
     918:	beq	92c <verify_monster+0x2c>
     91c:	ldr	r0, [pc, #1060]	; d48 <verify_monster+0x448>
     920:	bl	0 <puts>
     924:	mvn	r0, #0
     928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     92c:	ldr	r3, [r0]
     930:	adds	r4, r0, r3
     934:	beq	91c <verify_monster+0x1c>
     938:	ldr	r5, [r0, r3]
     93c:	sub	r5, r4, r5
     940:	ldrh	r6, [r5]
     944:	cmp	r6, #9
     948:	bhi	95c <verify_monster+0x5c>
     94c:	ldr	r0, [pc, #1016]	; d4c <verify_monster+0x44c>
     950:	bl	0 <puts>
     954:	mvn	r0, #0
     958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     95c:	ldrh	r3, [r5, #8]
     960:	cmp	r3, #0
     964:	beq	94c <verify_monster+0x4c>
     968:	ldrsh	r3, [r4, r3]
     96c:	cmp	r3, #80	; 0x50
     970:	bne	94c <verify_monster+0x4c>
     974:	ldrh	r3, [r5, #4]
     978:	cmp	r3, #0
     97c:	beq	fa8 <verify_monster+0x6a8>
     980:	adds	r3, r4, r3
     984:	beq	fa8 <verify_monster+0x6a8>
     988:	sub	r0, r3, r0
     98c:	tst	r0, #15
     990:	bne	ef8 <verify_monster+0x5f8>
     994:	vldr	s15, [pc, #924]	; d38 <verify_monster+0x438>
     998:	vldr	s14, [r3]
     99c:	vcmp.f32	s14, s15
     9a0:	vmrs	APSR_nzcv, fpscr
     9a4:	bne	f08 <verify_monster+0x608>
     9a8:	vldr	s15, [pc, #908]	; d3c <verify_monster+0x43c>
     9ac:	vldr	s14, [r3, #4]
     9b0:	vcmp.f32	s14, s15
     9b4:	vmrs	APSR_nzcv, fpscr
     9b8:	bne	f18 <verify_monster+0x618>
     9bc:	vldr	s15, [pc, #892]	; d40 <verify_monster+0x440>
     9c0:	vldr	s14, [r3, #8]
     9c4:	vcmp.f32	s14, s15
     9c8:	vmrs	APSR_nzcv, fpscr
     9cc:	bne	f28 <verify_monster+0x628>
     9d0:	vldr	d7, [pc, #848]	; d28 <verify_monster+0x428>
     9d4:	vldr	d6, [r3, #16]
     9d8:	vcmp.f64	d6, d7
     9dc:	vmrs	APSR_nzcv, fpscr
     9e0:	bne	f38 <verify_monster+0x638>
     9e4:	ldrsb	r2, [r3, #24]
     9e8:	cmp	r2, #2
     9ec:	bne	ea8 <verify_monster+0x5a8>
     9f0:	ldrsh	r2, [r3, #26]
     9f4:	cmp	r2, #5
     9f8:	bne	c30 <verify_monster+0x330>
     9fc:	ldrsb	r3, [r3, #28]
     a00:	cmp	r3, #6
     a04:	bne	c30 <verify_monster+0x330>
     a08:	cmp	r6, #11
     a0c:	bhi	a24 <verify_monster+0x124>
     a10:	ldr	r3, [pc, #824]	; d50 <verify_monster+0x450>
     a14:	ldr	r2, [pc, #824]	; d54 <verify_monster+0x454>
     a18:	ldr	r1, [pc, #824]	; d58 <verify_monster+0x458>
     a1c:	ldr	r0, [pc, #824]	; d5c <verify_monster+0x45c>
     a20:	bl	0 <__assert_fail>
     a24:	ldrh	r0, [r5, #10]
     a28:	cmp	r0, #0
     a2c:	beq	a10 <verify_monster+0x110>
     a30:	ldr	r3, [r4, r0]
     a34:	add	r0, r4, r0
     a38:	add	r3, r3, #4
     a3c:	adds	r0, r0, r3
     a40:	beq	ec8 <verify_monster+0x5c8>
     a44:	ldr	r3, [r0, #-4]
     a48:	cmp	r3, #9
     a4c:	bne	ec8 <verify_monster+0x5c8>
     a50:	ldr	r1, [pc, #776]	; d60 <verify_monster+0x460>
     a54:	bl	0 <strcmp>
     a58:	subs	r1, r0, #0
     a5c:	bne	e88 <verify_monster+0x588>
     a60:	cmp	r6, #15
     a64:	bhi	a78 <verify_monster+0x178>
     a68:	ldr	r0, [pc, #756]	; d64 <verify_monster+0x464>
     a6c:	bl	0 <puts>
     a70:	mvn	r0, #0
     a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     a78:	ldrh	r3, [r5, #14]
     a7c:	cmp	r3, #0
     a80:	beq	a68 <verify_monster+0x168>
     a84:	ldr	r2, [r4, r3]
     a88:	add	r3, r4, r3
     a8c:	add	r2, r2, #4
     a90:	adds	r3, r3, r2
     a94:	beq	a68 <verify_monster+0x168>
     a98:	ldr	r2, [r3, #-4]
     a9c:	cmp	r2, #5
     aa0:	subeq	r3, r3, #1
     aa4:	bne	a68 <verify_monster+0x168>
     aa8:	ldrb	r2, [r3, #1]!
     aac:	cmp	r2, r1
     ab0:	bne	e78 <verify_monster+0x578>
     ab4:	add	r1, r1, #1
     ab8:	cmp	r1, #5
     abc:	bne	aa8 <verify_monster+0x1a8>
     ac0:	cmp	r6, #25
     ac4:	bhi	ad8 <verify_monster+0x1d8>
     ac8:	ldr	r0, [pc, #664]	; d68 <verify_monster+0x468>
     acc:	bl	0 <puts>
     ad0:	mvn	r0, #0
     ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ad8:	ldrh	r3, [r5, #24]
     adc:	cmp	r3, #0
     ae0:	beq	ac8 <verify_monster+0x1c8>
     ae4:	ldr	r2, [r4, r3]
     ae8:	add	r3, r4, r3
     aec:	add	r2, r2, #4
     af0:	adds	r7, r3, r2
     af4:	beq	ac8 <verify_monster+0x1c8>
     af8:	ldr	r1, [r7, #-4]
     afc:	cmp	r1, #2
     b00:	bne	ed8 <verify_monster+0x5d8>
     b04:	ldr	r0, [r3, r2]
     b08:	ldr	r1, [pc, #604]	; d6c <verify_monster+0x46c>
     b0c:	add	r0, r0, #4
     b10:	add	r0, r7, r0
     b14:	bl	0 <strcmp>
     b18:	cmp	r0, #0
     b1c:	bne	f98 <verify_monster+0x698>
     b20:	ldr	r0, [r7, #4]
     b24:	ldr	r1, [pc, #580]	; d70 <verify_monster+0x470>
     b28:	add	r0, r0, #8
     b2c:	add	r0, r7, r0
     b30:	bl	0 <strcmp>
     b34:	cmp	r0, #0
     b38:	bne	ee8 <verify_monster+0x5e8>
     b3c:	ldrh	r3, [r5, #18]
     b40:	cmp	r3, #0
     b44:	beq	e98 <verify_monster+0x598>
     b48:	ldrb	r3, [r4, r3]
     b4c:	cmp	r3, #1
     b50:	bne	e98 <verify_monster+0x598>
     b54:	ldrh	r3, [r5, #20]
     b58:	cmp	r3, #0
     b5c:	beq	fb8 <verify_monster+0x6b8>
     b60:	ldr	r2, [r4, r3]
     b64:	add	r3, r4, r3
     b68:	adds	r0, r3, r2
     b6c:	beq	fb8 <verify_monster+0x6b8>
     b70:	ldr	r3, [r3, r2]
     b74:	sub	r3, r0, r3
     b78:	ldrh	r2, [r3]
     b7c:	cmp	r2, #11
     b80:	bls	a10 <verify_monster+0x110>
     b84:	ldrh	r2, [r3, #10]
     b88:	cmp	r2, #0
     b8c:	beq	a10 <verify_monster+0x110>
     b90:	ldr	r3, [r0, r2]
     b94:	add	r0, r0, r2
     b98:	add	r3, r3, #4
     b9c:	add	r0, r0, r3
     ba0:	ldr	r1, [pc, #460]	; d74 <verify_monster+0x474>
     ba4:	bl	0 <strcmp>
     ba8:	cmp	r0, #0
     bac:	bne	f58 <verify_monster+0x658>
     bb0:	ldrh	r3, [r5, #22]
     bb4:	cmp	r3, #0
     bb8:	beq	f48 <verify_monster+0x648>
     bbc:	ldr	r2, [r4, r3]
     bc0:	add	r3, r4, r3
     bc4:	add	r2, r2, #4
     bc8:	adds	r1, r3, r2
     bcc:	beq	f48 <verify_monster+0x648>
     bd0:	ldr	ip, [r1, #-4]
     bd4:	cmp	ip, #2
     bd8:	bne	f48 <verify_monster+0x648>
     bdc:	ldrsh	r3, [r3, r2]
     be0:	cmp	r3, #10
     be4:	bne	f68 <verify_monster+0x668>
     be8:	ldrsb	r3, [r1, #2]
     bec:	cmp	r3, #20
     bf0:	bne	f78 <verify_monster+0x678>
     bf4:	cmn	r1, #4
     bf8:	beq	f88 <verify_monster+0x688>
     bfc:	ldrsh	r3, [r1, #4]
     c00:	cmp	r3, #30
     c04:	bne	f88 <verify_monster+0x688>
     c08:	ldrsb	r3, [r1, #6]
     c0c:	cmp	r3, #40	; 0x28
     c10:	bne	eb8 <verify_monster+0x5b8>
     c14:	cmp	r6, #37	; 0x25
     c18:	bhi	c40 <verify_monster+0x340>
     c1c:	ldr	r3, [pc, #376]	; d9c <verify_monster+0x49c>
     c20:	mov	r2, #148	; 0x94
     c24:	ldr	r1, [pc, #372]	; da0 <verify_monster+0x4a0>
     c28:	ldr	r0, [pc, #328]	; d78 <verify_monster+0x478>
     c2c:	bl	0 <__assert_fail>
     c30:	ldr	r0, [pc, #324]	; d7c <verify_monster+0x47c>
     c34:	bl	0 <puts>
     c38:	mvn	r0, #0
     c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     c40:	ldrh	r3, [r5, #36]	; 0x24
     c44:	cmp	r3, #0
     c48:	beq	c1c <verify_monster+0x31c>
     c4c:	ldr	r3, [r4, r3]
     c50:	ldr	r2, [pc, #296]	; d80 <verify_monster+0x480>
     c54:	cmp	r3, r2
     c58:	bne	c1c <verify_monster+0x31c>
     c5c:	cmp	r6, #39	; 0x27
     c60:	bhi	c78 <verify_monster+0x378>
     c64:	ldr	r3, [pc, #304]	; d9c <verify_monster+0x49c>
     c68:	mov	r2, #149	; 0x95
     c6c:	ldr	r1, [pc, #300]	; da0 <verify_monster+0x4a0>
     c70:	ldr	r0, [pc, #268]	; d84 <verify_monster+0x484>
     c74:	bl	0 <__assert_fail>
     c78:	ldrh	r2, [r5, #38]	; 0x26
     c7c:	cmp	r2, #0
     c80:	beq	c64 <verify_monster+0x364>
     c84:	ldr	r2, [r4, r2]
     c88:	cmp	r2, r3
     c8c:	bne	c64 <verify_monster+0x364>
     c90:	cmp	r6, #41	; 0x29
     c94:	bhi	cac <verify_monster+0x3ac>
     c98:	ldr	r3, [pc, #252]	; d9c <verify_monster+0x49c>
     c9c:	mov	r2, #150	; 0x96
     ca0:	ldr	r1, [pc, #248]	; da0 <verify_monster+0x4a0>
     ca4:	ldr	r0, [pc, #220]	; d88 <verify_monster+0x488>
     ca8:	bl	0 <__assert_fail>
     cac:	ldrh	r3, [r5, #40]	; 0x28
     cb0:	cmp	r3, #0
     cb4:	beq	c98 <verify_monster+0x398>
     cb8:	add	r9, pc, #112	; 0x70
     cbc:	ldrd	r8, [r9]
     cc0:	ldrd	r2, [r3, r4]
     cc4:	cmp	r3, r9
     cc8:	cmpeq	r2, r8
     ccc:	bne	c98 <verify_monster+0x398>
     cd0:	cmp	r6, #43	; 0x2b
     cd4:	bhi	cec <verify_monster+0x3ec>
     cd8:	ldr	r3, [pc, #188]	; d9c <verify_monster+0x49c>
     cdc:	mov	r2, #151	; 0x97
     ce0:	ldr	r1, [pc, #184]	; da0 <verify_monster+0x4a0>
     ce4:	ldr	r0, [pc, #160]	; d8c <verify_monster+0x48c>
     ce8:	bl	0 <__assert_fail>
     cec:	ldrh	r1, [r5, #42]	; 0x2a
     cf0:	cmp	r1, #0
     cf4:	beq	cd8 <verify_monster+0x3d8>
     cf8:	ldrd	r8, [r4, r1]
     cfc:	cmp	r9, r3
     d00:	cmpeq	r8, r2
     d04:	bne	cd8 <verify_monster+0x3d8>
     d08:	cmp	r6, #45	; 0x2d
     d0c:	bhi	da8 <verify_monster+0x4a8>
     d10:	ldr	r3, [pc, #132]	; d9c <verify_monster+0x49c>
     d14:	mov	r2, #152	; 0x98
     d18:	ldr	r1, [pc, #128]	; da0 <verify_monster+0x4a0>
     d1c:	ldr	r0, [pc, #108]	; d90 <verify_monster+0x490>
     d20:	bl	0 <__assert_fail>
     d24:	nop			; (mov r0, r0)
     d28:	.word	0x00000000
     d2c:	.word	0x40080000
     d30:	.word	0xf27b9181
     d34:	.word	0x6e0f80cd
     d38:	.word	0x3f800000
     d3c:	.word	0x40000000
     d40:	.word	0x40400000
     d44:	.word	0x534e4f4d
     d48:	.word	0x00000140
     d4c:	.word	0x00000158
     d50:	.word	0x0000001c
     d54:	.word	0x000002bb
     d58:	.word	0x000000ac
     d5c:	.word	0x00000268
     d60:	.word	0x000002a8
     d64:	.word	0x000002c8
     d68:	.word	0x00000304
     d6c:	.word	0x00000348
     d70:	.word	0x00000374
     d74:	.word	0x000003cc
     d78:	.word	0x000004cc
     d7c:	.word	0x00000250
     d80:	.word	0xdd79c941
     d84:	.word	0x00000504
     d88:	.word	0x0000053c
     d8c:	.word	0x0000057c
     d90:	.word	0x000005bc
     d94:	.word	0x000005f4
     d98:	.word	0x8e81a471
     d9c:	.word	0x00000054
     da0:	.word	0x00000470
     da4:	.word	0x0000062c
     da8:	ldrh	r3, [r5, #44]	; 0x2c
     dac:	cmp	r3, #0
     db0:	beq	d10 <verify_monster+0x410>
     db4:	ldr	r2, [r4, r3]
     db8:	ldr	r3, [pc, #-40]	; d98 <verify_monster+0x498>
     dbc:	cmp	r2, r3
     dc0:	bne	d10 <verify_monster+0x410>
     dc4:	cmp	r6, #47	; 0x2f
     dc8:	bhi	de0 <verify_monster+0x4e0>
     dcc:	ldr	r3, [pc, #-56]	; d9c <verify_monster+0x49c>
     dd0:	mov	r2, #153	; 0x99
     dd4:	ldr	r1, [pc, #-60]	; da0 <verify_monster+0x4a0>
     dd8:	ldr	r0, [pc, #-76]	; d94 <verify_monster+0x494>
     ddc:	bl	0 <__assert_fail>
     de0:	ldrh	r3, [r5, #46]	; 0x2e
     de4:	cmp	r3, #0
     de8:	beq	dcc <verify_monster+0x4cc>
     dec:	ldr	r2, [r4, r3]
     df0:	ldr	r3, [pc, #-96]	; d98 <verify_monster+0x498>
     df4:	cmp	r2, r3
     df8:	bne	dcc <verify_monster+0x4cc>
     dfc:	cmp	r6, #49	; 0x31
     e00:	bhi	e18 <verify_monster+0x518>
     e04:	ldr	r3, [pc, #-112]	; d9c <verify_monster+0x49c>
     e08:	mov	r2, #154	; 0x9a
     e0c:	ldr	r1, [pc, #-116]	; da0 <verify_monster+0x4a0>
     e10:	ldr	r0, [pc, #-116]	; da4 <verify_monster+0x4a4>
     e14:	bl	0 <__assert_fail>
     e18:	ldrh	r3, [r5, #48]	; 0x30
     e1c:	cmp	r3, #0
     e20:	beq	e04 <verify_monster+0x504>
     e24:	add	r9, pc, #412	; 0x19c
     e28:	ldrd	r8, [r9]
     e2c:	ldrd	r2, [r3, r4]
     e30:	cmp	r3, r9
     e34:	cmpeq	r2, r8
     e38:	bne	e04 <verify_monster+0x504>
     e3c:	cmp	r6, #51	; 0x33
     e40:	bhi	e58 <verify_monster+0x558>
     e44:	ldr	r3, [pc, #388]	; fd0 <verify_monster+0x6d0>
     e48:	mov	r2, #155	; 0x9b
     e4c:	ldr	r1, [pc, #384]	; fd4 <verify_monster+0x6d4>
     e50:	ldr	r0, [pc, #384]	; fd8 <verify_monster+0x6d8>
     e54:	bl	0 <__assert_fail>
     e58:	ldrh	r1, [r5, #50]	; 0x32
     e5c:	cmp	r1, #0
     e60:	beq	e44 <verify_monster+0x544>
     e64:	ldrd	r4, [r4, r1]
     e68:	cmp	r5, r3
     e6c:	cmpeq	r4, r2
     e70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
     e74:	b	e44 <verify_monster+0x544>
     e78:	ldr	r0, [pc, #348]	; fdc <verify_monster+0x6dc>
     e7c:	bl	0 <printf>
     e80:	mvn	r0, #0
     e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     e88:	ldr	r0, [pc, #336]	; fe0 <verify_monster+0x6e0>
     e8c:	bl	0 <puts>
     e90:	mvn	r0, #0
     e94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     e98:	ldr	r0, [pc, #324]	; fe4 <verify_monster+0x6e4>
     e9c:	bl	0 <puts>
     ea0:	mvn	r0, #0
     ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ea8:	ldr	r0, [pc, #312]	; fe8 <verify_monster+0x6e8>
     eac:	bl	0 <puts>
     eb0:	mvn	r0, #0
     eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     eb8:	ldr	r0, [pc, #300]	; fec <verify_monster+0x6ec>
     ebc:	bl	0 <puts>
     ec0:	mvn	r0, #0
     ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ec8:	ldr	r0, [pc, #288]	; ff0 <verify_monster+0x6f0>
     ecc:	bl	0 <puts>
     ed0:	mvn	r0, #0
     ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ed8:	ldr	r0, [pc, #276]	; ff4 <verify_monster+0x6f4>
     edc:	bl	0 <puts>
     ee0:	mvn	r0, #0
     ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ee8:	ldr	r0, [pc, #264]	; ff8 <verify_monster+0x6f8>
     eec:	bl	0 <puts>
     ef0:	mvn	r0, #0
     ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     ef8:	ldr	r0, [pc, #252]	; ffc <verify_monster+0x6fc>
     efc:	bl	0 <puts>
     f00:	mvn	r0, #0
     f04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f08:	ldr	r0, [pc, #240]	; 1000 <verify_monster+0x700>
     f0c:	bl	0 <puts>
     f10:	mvn	r0, #0
     f14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f18:	ldr	r0, [pc, #228]	; 1004 <verify_monster+0x704>
     f1c:	bl	0 <puts>
     f20:	mvn	r0, #0
     f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f28:	ldr	r0, [pc, #216]	; 1008 <verify_monster+0x708>
     f2c:	bl	0 <puts>
     f30:	mvn	r0, #0
     f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f38:	ldr	r0, [pc, #204]	; 100c <verify_monster+0x70c>
     f3c:	bl	0 <puts>
     f40:	mvn	r0, #0
     f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f48:	ldr	r0, [pc, #192]	; 1010 <verify_monster+0x710>
     f4c:	bl	0 <puts>
     f50:	mvn	r0, #0
     f54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f58:	ldr	r0, [pc, #180]	; 1014 <verify_monster+0x714>
     f5c:	bl	0 <puts>
     f60:	mvn	r0, #0
     f64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f68:	ldr	r0, [pc, #168]	; 1018 <verify_monster+0x718>
     f6c:	bl	0 <puts>
     f70:	mvn	r0, #0
     f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f78:	ldr	r0, [pc, #156]	; 101c <verify_monster+0x71c>
     f7c:	bl	0 <puts>
     f80:	mvn	r0, #0
     f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f88:	ldr	r0, [pc, #144]	; 1020 <verify_monster+0x720>
     f8c:	bl	0 <puts>
     f90:	mvn	r0, #0
     f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     f98:	ldr	r0, [pc, #132]	; 1024 <verify_monster+0x724>
     f9c:	bl	0 <puts>
     fa0:	mvn	r0, #0
     fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     fa8:	ldr	r0, [pc, #120]	; 1028 <verify_monster+0x728>
     fac:	bl	0 <puts>
     fb0:	mvn	r0, #0
     fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     fb8:	ldr	r0, [pc, #108]	; 102c <verify_monster+0x72c>
     fbc:	bl	0 <puts>
     fc0:	mvn	r0, #0
     fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
     fc8:	.word	0xc767ddf1
     fcc:	.word	0x43f948dc
     fd0:	.word	0x00000054
     fd4:	.word	0x00000470
     fd8:	.word	0x0000066c
     fdc:	.word	0x000002e4
     fe0:	.word	0x000002b4
     fe4:	.word	0x000003a4
     fe8:	.word	0x00000238
     fec:	.word	0x00000458
     ff0:	.word	0x0000028c
     ff4:	.word	0x00000320
     ff8:	.word	0x0000037c
     ffc:	.word	0x00000190
    1000:	.word	0x000001b8
    1004:	.word	0x000001dc
    1008:	.word	0x00000200
    100c:	.word	0x00000224
    1010:	.word	0x000003ec
    1014:	.word	0x000003d4
    1018:	.word	0x00000410
    101c:	.word	0x00000428
    1020:	.word	0x00000440
    1024:	.word	0x00000350
    1028:	.word	0x0000017c
    102c:	.word	0x000003b4

Disassembly of section .text.unlikely:

00000000 <flatbuffers_string_vec_at.part.0>:
   0:	push	{r4, lr}
   4:	mov	r2, #108	; 0x6c
   8:	ldr	r3, [pc, #8]	; 18 <flatbuffers_string_vec_at.part.0+0x18>
   c:	ldr	r1, [pc, #8]	; 1c <flatbuffers_string_vec_at.part.0+0x1c>
  10:	ldr	r0, [pc, #8]	; 20 <flatbuffers_string_vec_at.part.0+0x20>
  14:	bl	0 <__assert_fail>
	...
  20:	.word	0x00000074

00000024 <MyGame_Example_Monster_name.part.1>:
  24:	push	{r4, lr}
  28:	ldr	r3, [pc, #12]	; 3c <MyGame_Example_Monster_name.part.1+0x18>
  2c:	ldr	r2, [pc, #12]	; 40 <MyGame_Example_Monster_name.part.1+0x1c>
  30:	ldr	r1, [pc, #12]	; 44 <MyGame_Example_Monster_name.part.1+0x20>
  34:	ldr	r0, [pc, #12]	; 48 <MyGame_Example_Monster_name.part.1+0x24>
  38:	bl	0 <__assert_fail>
  3c:	.word	0x0000001c
  40:	.word	0x000002bb
  44:	.word	0x000000ac
  48:	.word	0x00000118

0000004c <MyGame_Example_Test_vec_at.part.2>:
  4c:	push	{r4, lr}
  50:	mov	r2, #380	; 0x17c
  54:	ldr	r3, [pc, #8]	; 64 <MyGame_Example_Test_vec_at.part.2+0x18>
  58:	ldr	r1, [pc, #8]	; 68 <MyGame_Example_Test_vec_at.part.2+0x1c>
  5c:	ldr	r0, [pc, #8]	; 6c <MyGame_Example_Test_vec_at.part.2+0x20>
  60:	bl	0 <__assert_fail>
  64:	.word	0x00000038
  68:	.word	0x000000ac
  6c:	.word	0x00000074

Disassembly of section .text.startup:

00000000 <main>:
   0:	sub	r3, r0, #1
   4:	cmp	r3, #1
   8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c:	sub	sp, sp, #36	; 0x24
  10:	bhi	2e4 <main+0x2e4>
  14:	cmp	r0, #2
  18:	ldr	r3, [pc, #740]	; 304 <main+0x304>
  1c:	ldreq	r2, [r1, #4]
  20:	ldr	r1, [pc, #736]	; 308 <main+0x308>
  24:	streq	r2, [r3]
  28:	ldr	r0, [r3]
  2c:	bl	0 <fopen>
  30:	subs	r8, r0, #0
  34:	beq	2d8 <main+0x2d8>
  38:	mov	r2, #2
  3c:	mov	r1, #0
  40:	bl	0 <fseek>
  44:	mov	r0, r8
  48:	bl	0 <ftell>
  4c:	cmp	r0, #1024	; 0x400
  50:	mov	r7, r0
  54:	bhi	2c8 <main+0x2c8>
  58:	mov	r0, r8
  5c:	bl	0 <rewind>
  60:	cmp	r7, #0
  64:	movne	r0, r7
  68:	moveq	r0, #1
  6c:	bl	0 <malloc>
  70:	subs	r6, r0, #0
  74:	beq	2c8 <main+0x2c8>
  78:	mov	r4, #0
  7c:	mov	r9, #1
  80:	b	88 <main+0x88>
  84:	add	r4, r4, r0
  88:	mov	r3, r8
  8c:	sub	r2, r7, r4
  90:	mov	r1, r9
  94:	add	r0, r6, r4
  98:	bl	0 <fread>
  9c:	cmp	r0, #0
  a0:	bne	84 <main+0x84>
  a4:	cmp	r7, r4
  a8:	mov	r5, r0
  ac:	mov	r0, r8
  b0:	bne	1d4 <main+0x1d4>
  b4:	bl	0 <fclose>
  b8:	add	sl, sp, #32
  bc:	mov	r4, #0
  c0:	add	r2, r7, #255	; 0xff
  c4:	str	r4, [sl, #-20]!	; 0xffffffec
  c8:	bic	r2, r2, #255	; 0xff
  cc:	mov	r0, sl
  d0:	mov	r1, #256	; 0x100
  d4:	bl	0 <posix_memalign>
  d8:	ldr	r3, [sp, #12]
  dc:	str	r3, [sp, #4]
  e0:	cmp	r0, r4
  e4:	beq	100 <main+0x100>
  e8:	cmp	r3, #0
  ec:	beq	100 <main+0x100>
  f0:	mov	r0, r3
  f4:	str	r4, [sp, #4]
  f8:	bl	0 <free>
  fc:	str	r4, [sp, #12]
 100:	mov	r2, r7
 104:	mov	r1, r6
 108:	ldr	r0, [sp, #4]
 10c:	bl	0 <memcpy>
 110:	mov	r0, r6
 114:	bl	0 <free>
 118:	ldr	r3, [pc, #492]	; 30c <main+0x30c>
 11c:	ldr	r2, [pc, #492]	; 310 <main+0x310>
 120:	ldr	r1, [pc, #492]	; 314 <main+0x314>
 124:	ldr	r5, [r3]
 128:	mov	r0, r5
 12c:	bl	0 <fprintf>
 130:	cmp	r7, #0
 134:	beq	220 <main+0x220>
 138:	ldr	r3, [sp, #4]
 13c:	mov	fp, #0
 140:	ldr	r9, [pc, #464]	; 318 <main+0x318>
 144:	mov	r8, fp
 148:	sub	r6, r3, #1
 14c:	b	1b4 <main+0x1b4>
 150:	cmp	fp, #0
 154:	beq	168 <main+0x168>
 158:	mov	r2, sl
 15c:	ldr	r1, [pc, #440]	; 31c <main+0x31c>
 160:	mov	r0, r5
 164:	bl	0 <fprintf>
 168:	mov	r2, fp
 16c:	ldr	r1, [pc, #428]	; 320 <main+0x320>
 170:	mov	r0, r5
 174:	bl	0 <fprintf>
 178:	ldrb	r2, [r6, #1]
 17c:	mov	r1, r9
 180:	mov	r0, r5
 184:	bl	0 <fprintf>
 188:	ldrb	r2, [r6, #1]!
 18c:	add	fp, fp, #1
 190:	sub	r3, r2, #32
 194:	cmp	r3, #94	; 0x5e
 198:	add	r3, sp, #32
 19c:	add	r3, r3, r4
 1a0:	movhi	r2, #46	; 0x2e
 1a4:	cmp	fp, r7
 1a8:	strb	r2, [r3, #-20]	; 0xffffffec
 1ac:	strb	r8, [r3, #-19]	; 0xffffffed
 1b0:	beq	1e8 <main+0x1e8>
 1b4:	ands	r4, fp, #15
 1b8:	beq	150 <main+0x150>
 1bc:	tst	fp, #7
 1c0:	bne	178 <main+0x178>
 1c4:	mov	r1, r5
 1c8:	mov	r0, #32
 1cc:	bl	0 <fputc>
 1d0:	b	178 <main+0x178>
 1d4:	bl	0 <fclose>
 1d8:	mov	r0, r6
 1dc:	bl	0 <free>
 1e0:	mov	r6, r5
 1e4:	b	b8 <main+0xb8>
 1e8:	tst	r7, #15
 1ec:	beq	220 <main+0x220>
 1f0:	ldr	r9, [pc, #300]	; 324 <main+0x324>
 1f4:	mov	r4, r7
 1f8:	mov	r8, #3
 1fc:	mov	r6, #1
 200:	add	r4, r4, #1
 204:	mov	r3, r5
 208:	mov	r2, r8
 20c:	mov	r1, r6
 210:	mov	r0, r9
 214:	bl	0 <fwrite>
 218:	tst	r4, #15
 21c:	bne	200 <main+0x200>
 220:	mov	r2, sl
 224:	ldr	r1, [pc, #240]	; 31c <main+0x31c>
 228:	mov	r0, r5
 22c:	bl	0 <fprintf>
 230:	ldr	r3, [pc, #240]	; 328 <main+0x328>
 234:	ldr	r2, [pc, #240]	; 32c <main+0x32c>
 238:	mov	r1, r7
 23c:	ldr	r0, [sp, #4]
 240:	bl	0 <flatcc_verify_table_as_root>
 244:	cmp	r0, #0
 248:	beq	27c <main+0x27c>
 24c:	ldr	r3, [pc, #184]	; 30c <main+0x30c>
 250:	mov	r2, #38	; 0x26
 254:	mov	r1, #1
 258:	ldr	r3, [r3]
 25c:	ldr	r0, [pc, #204]	; 330 <main+0x330>
 260:	bl	0 <fwrite>
 264:	mvn	r4, #0
 268:	ldr	r0, [sp, #4]
 26c:	bl	0 <free>
 270:	mov	r0, r4
 274:	add	sp, sp, #36	; 0x24
 278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 27c:	mov	r1, r7
 280:	ldr	r3, [pc, #160]	; 328 <main+0x328>
 284:	ldr	r2, [pc, #160]	; 32c <main+0x32c>
 288:	ldr	r0, [sp, #4]
 28c:	bl	0 <flatcc_verify_table_as_root>
 290:	cmp	r0, #0
 294:	beq	2b8 <main+0x2b8>
 298:	ldr	r3, [pc, #108]	; 30c <main+0x30c>
 29c:	mov	r2, #62	; 0x3e
 2a0:	mov	r1, #1
 2a4:	ldr	r3, [r3]
 2a8:	ldr	r0, [pc, #132]	; 334 <main+0x334>
 2ac:	bl	0 <fwrite>
 2b0:	mvn	r4, #0
 2b4:	b	268 <main+0x268>
 2b8:	ldr	r0, [sp, #4]
 2bc:	bl	900 <verify_monster>
 2c0:	mov	r4, r0
 2c4:	b	268 <main+0x268>
 2c8:	mov	r0, r8
 2cc:	bl	0 <fclose>
 2d0:	mov	r6, #0
 2d4:	b	b8 <main+0xb8>
 2d8:	mov	r7, r8
 2dc:	mov	r6, r8
 2e0:	b	b8 <main+0xb8>
 2e4:	ldr	r3, [pc, #32]	; 30c <main+0x30c>
 2e8:	mov	r2, #63	; 0x3f
 2ec:	mov	r1, #1
 2f0:	ldr	r3, [r3]
 2f4:	ldr	r0, [pc, #60]	; 338 <main+0x338>
 2f8:	bl	0 <fwrite>
 2fc:	mov	r0, #1
 300:	bl	0 <exit>
 304:	.word	0x00000000
 308:	.word	0x000006ec
 30c:	.word	0x00000000
 310:	.word	0x000006f0
 314:	.word	0x00000708
 318:	.word	0x00000728
 31c:	.word	0x00000710
 320:	.word	0x00000720
 324:	.word	0x00000730
 328:	.word	0x00000000
 32c:	.word	0x00000718
 330:	.word	0x00000734
 334:	.word	0x0000075c
 338:	.word	0x000006ac
