
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/ziparchive.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_za_open>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #168	; 0xa8
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	ldr	r0, [fp, #-8]
      18:	add	r1, sp, #64	; 0x40
      1c:	bl	0 <stat>
      20:	cmp	r0, #0
      24:	beq	a4 <coda_za_open+0xa4>
      28:	bl	0 <__errno_location>
      2c:	ldr	r0, [r0]
      30:	cmp	r0, #2
      34:	bne	5c <coda_za_open+0x5c>
      38:	ldr	r0, [fp, #-12]
      3c:	ldr	r1, [fp, #-8]
      40:	movw	r2, #0
      44:	movt	r2, #0
      48:	str	r0, [sp, #48]	; 0x30
      4c:	mov	r0, r2
      50:	ldr	r2, [sp, #48]	; 0x30
      54:	blx	r2
      58:	b	98 <coda_za_open+0x98>
      5c:	ldr	r0, [fp, #-12]
      60:	ldr	r1, [fp, #-8]
      64:	str	r0, [sp, #44]	; 0x2c
      68:	str	r1, [sp, #40]	; 0x28
      6c:	bl	0 <__errno_location>
      70:	ldr	r0, [r0]
      74:	bl	0 <strerror>
      78:	movw	r1, #0
      7c:	movt	r1, #0
      80:	str	r0, [sp, #36]	; 0x24
      84:	mov	r0, r1
      88:	ldr	r1, [sp, #40]	; 0x28
      8c:	ldr	r2, [sp, #36]	; 0x24
      90:	ldr	r3, [sp, #44]	; 0x2c
      94:	blx	r3
      98:	movw	r0, #0
      9c:	str	r0, [fp, #-4]
      a0:	b	380 <coda_za_open+0x380>
      a4:	ldr	r0, [sp, #80]	; 0x50
      a8:	and	r0, r0, #32768	; 0x8000
      ac:	cmp	r0, #0
      b0:	bne	e0 <coda_za_open+0xe0>
      b4:	ldr	r0, [fp, #-12]
      b8:	ldr	r1, [fp, #-8]
      bc:	movw	r2, #0
      c0:	movt	r2, #0
      c4:	str	r0, [sp, #32]
      c8:	mov	r0, r2
      cc:	ldr	r2, [sp, #32]
      d0:	blx	r2
      d4:	movw	r0, #0
      d8:	str	r0, [fp, #-4]
      dc:	b	380 <coda_za_open+0x380>
      e0:	ldr	r0, [sp, #108]	; 0x6c
      e4:	cmp	r0, #22
      e8:	bge	118 <coda_za_open+0x118>
      ec:	ldr	r0, [fp, #-12]
      f0:	ldr	r1, [fp, #-8]
      f4:	movw	r2, #0
      f8:	movt	r2, #0
      fc:	str	r0, [sp, #28]
     100:	mov	r0, r2
     104:	ldr	r2, [sp, #28]
     108:	blx	r2
     10c:	movw	r0, #0
     110:	str	r0, [fp, #-4]
     114:	b	380 <coda_za_open+0x380>
     118:	movw	r0, #24
     11c:	bl	0 <malloc>
     120:	str	r0, [sp, #60]	; 0x3c
     124:	ldr	r0, [sp, #60]	; 0x3c
     128:	movw	r1, #0
     12c:	cmp	r0, r1
     130:	bne	170 <coda_za_open+0x170>
     134:	ldr	r0, [fp, #-12]
     138:	movw	r1, #0
     13c:	cmp	r0, r1
     140:	beq	164 <coda_za_open+0x164>
     144:	ldr	r0, [fp, #-12]
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	str	r0, [sp, #24]
     154:	mov	r0, r1
     158:	movw	r1, #24
     15c:	ldr	r2, [sp, #24]
     160:	blx	r2
     164:	movw	r0, #0
     168:	str	r0, [fp, #-4]
     16c:	b	380 <coda_za_open+0x380>
     170:	ldr	r0, [fp, #-8]
     174:	bl	0 <strdup>
     178:	ldr	r1, [sp, #60]	; 0x3c
     17c:	str	r0, [r1, #8]
     180:	ldr	r0, [sp, #60]	; 0x3c
     184:	ldr	r0, [r0, #8]
     188:	movw	r1, #0
     18c:	cmp	r0, r1
     190:	bne	1d4 <coda_za_open+0x1d4>
     194:	ldr	r0, [sp, #60]	; 0x3c
     198:	bl	0 <free>
     19c:	ldr	r0, [fp, #-12]
     1a0:	movw	r1, #0
     1a4:	cmp	r0, r1
     1a8:	beq	1c8 <coda_za_open+0x1c8>
     1ac:	ldr	r0, [fp, #-12]
     1b0:	movw	r1, #0
     1b4:	movt	r1, #0
     1b8:	str	r0, [sp, #20]
     1bc:	mov	r0, r1
     1c0:	ldr	r1, [sp, #20]
     1c4:	blx	r1
     1c8:	movw	r0, #0
     1cc:	str	r0, [fp, #-4]
     1d0:	b	380 <coda_za_open+0x380>
     1d4:	ldr	r0, [sp, #60]	; 0x3c
     1d8:	movw	r1, #0
     1dc:	str	r1, [r0, #4]
     1e0:	ldr	r0, [sp, #60]	; 0x3c
     1e4:	str	r1, [r0, #12]
     1e8:	ldr	r0, [sp, #60]	; 0x3c
     1ec:	str	r1, [r0, #16]
     1f0:	ldr	r0, [fp, #-12]
     1f4:	cmp	r0, r1
     1f8:	beq	20c <coda_za_open+0x20c>
     1fc:	ldr	r0, [fp, #-12]
     200:	ldr	r1, [sp, #60]	; 0x3c
     204:	str	r0, [r1, #20]
     208:	b	21c <coda_za_open+0x21c>
     20c:	ldr	r0, [sp, #60]	; 0x3c
     210:	movw	r1, #0
     214:	movt	r1, #0
     218:	str	r1, [r0, #20]
     21c:	movw	r0, #0
     220:	str	r0, [sp, #52]	; 0x34
     224:	ldr	r0, [fp, #-8]
     228:	ldr	r1, [sp, #52]	; 0x34
     22c:	bl	0 <open>
     230:	ldr	r1, [sp, #60]	; 0x3c
     234:	str	r0, [r1]
     238:	ldr	r0, [sp, #60]	; 0x3c
     23c:	ldr	r0, [r0]
     240:	cmp	r0, #0
     244:	bge	2a8 <coda_za_open+0x2a8>
     248:	ldr	r0, [sp, #60]	; 0x3c
     24c:	ldr	r0, [r0, #20]
     250:	ldr	r1, [fp, #-8]
     254:	str	r0, [sp, #16]
     258:	str	r1, [sp, #12]
     25c:	bl	0 <__errno_location>
     260:	ldr	r0, [r0]
     264:	bl	0 <strerror>
     268:	movw	r1, #0
     26c:	movt	r1, #0
     270:	str	r0, [sp, #8]
     274:	mov	r0, r1
     278:	ldr	r1, [sp, #12]
     27c:	ldr	r2, [sp, #8]
     280:	ldr	r3, [sp, #16]
     284:	blx	r3
     288:	ldr	r0, [sp, #60]	; 0x3c
     28c:	ldr	r0, [r0, #8]
     290:	bl	0 <free>
     294:	ldr	r0, [sp, #60]	; 0x3c
     298:	bl	0 <free>
     29c:	movw	r0, #0
     2a0:	str	r0, [fp, #-4]
     2a4:	b	380 <coda_za_open+0x380>
     2a8:	add	r1, sp, #58	; 0x3a
     2ac:	ldr	r0, [sp, #60]	; 0x3c
     2b0:	ldr	r0, [r0]
     2b4:	movw	r2, #2
     2b8:	bl	0 <read>
     2bc:	cmp	r0, #0
     2c0:	bge	2f8 <coda_za_open+0x2f8>
     2c4:	ldr	r0, [sp, #60]	; 0x3c
     2c8:	ldr	r0, [r0, #20]
     2cc:	str	r0, [sp, #4]
     2d0:	bl	0 <__errno_location>
     2d4:	ldr	r0, [r0]
     2d8:	bl	0 <strerror>
     2dc:	ldr	r1, [sp, #4]
     2e0:	blx	r1
     2e4:	ldr	r0, [sp, #60]	; 0x3c
     2e8:	bl	434 <coda_za_close>
     2ec:	movw	r0, #0
     2f0:	str	r0, [fp, #-4]
     2f4:	b	380 <coda_za_open+0x380>
     2f8:	ldrb	r0, [sp, #58]	; 0x3a
     2fc:	cmp	r0, #80	; 0x50
     300:	beq	344 <coda_za_open+0x344>
     304:	ldrb	r0, [sp, #59]	; 0x3b
     308:	cmp	r0, #75	; 0x4b
     30c:	beq	344 <coda_za_open+0x344>
     310:	ldr	r0, [fp, #-12]
     314:	ldr	r1, [fp, #-8]
     318:	movw	r2, #0
     31c:	movt	r2, #0
     320:	str	r0, [sp]
     324:	mov	r0, r2
     328:	ldr	r2, [sp]
     32c:	blx	r2
     330:	ldr	r0, [sp, #60]	; 0x3c
     334:	bl	434 <coda_za_close>
     338:	movw	r0, #0
     33c:	str	r0, [fp, #-4]
     340:	b	380 <coda_za_open+0x380>
     344:	movw	r0, #1
     348:	bl	0 <coda_hashtable_new>
     34c:	ldr	r1, [sp, #60]	; 0x3c
     350:	str	r0, [r1, #16]
     354:	ldr	r0, [sp, #60]	; 0x3c
     358:	bl	538 <get_entries>
     35c:	cmp	r0, #0
     360:	beq	378 <coda_za_open+0x378>
     364:	ldr	r0, [sp, #60]	; 0x3c
     368:	bl	434 <coda_za_close>
     36c:	movw	r0, #0
     370:	str	r0, [fp, #-4]
     374:	b	380 <coda_za_open+0x380>
     378:	ldr	r0, [sp, #60]	; 0x3c
     37c:	str	r0, [fp, #-4]
     380:	ldr	r0, [fp, #-4]
     384:	mov	sp, fp
     388:	pop	{fp, pc}

0000038c <default_error_handler>:
     38c:	sub	sp, sp, #12
     390:	push	{fp, lr}
     394:	mov	fp, sp
     398:	sub	sp, sp, #28
     39c:	str	r3, [fp, #16]
     3a0:	str	r2, [fp, #12]
     3a4:	str	r1, [fp, #8]
     3a8:	str	r0, [fp, #-4]
     3ac:	movw	r0, #0
     3b0:	movt	r0, #0
     3b4:	ldr	r1, [r0]
     3b8:	movw	r2, #0
     3bc:	movt	r2, #0
     3c0:	str	r0, [fp, #-12]
     3c4:	mov	r0, r1
     3c8:	mov	r1, r2
     3cc:	bl	0 <fprintf>
     3d0:	add	r1, fp, #8
     3d4:	str	r1, [fp, #-8]
     3d8:	ldr	r1, [fp, #-12]
     3dc:	ldr	r2, [r1]
     3e0:	ldr	r1, [fp, #-4]
     3e4:	ldr	r3, [fp, #-8]
     3e8:	str	r0, [sp, #12]
     3ec:	mov	r0, r2
     3f0:	mov	r2, r3
     3f4:	bl	0 <vfprintf>
     3f8:	sub	r1, fp, #8
     3fc:	movw	r2, #0
     400:	movt	r2, #0
     404:	ldr	r2, [r2]
     408:	str	r0, [sp, #8]
     40c:	mov	r0, r2
     410:	movw	r2, #0
     414:	movt	r2, #0
     418:	str	r1, [sp, #4]
     41c:	mov	r1, r2
     420:	bl	0 <fprintf>
     424:	mov	sp, fp
     428:	pop	{fp, lr}
     42c:	add	sp, sp, #12
     430:	bx	lr

00000434 <coda_za_close>:
     434:	push	{fp, lr}
     438:	mov	fp, sp
     43c:	sub	sp, sp, #8
     440:	str	r0, [sp, #4]
     444:	ldr	r0, [sp, #4]
     448:	ldr	r0, [r0]
     44c:	bl	0 <close>
     450:	ldr	r1, [sp, #4]
     454:	ldr	r1, [r1, #12]
     458:	movw	r2, #0
     45c:	cmp	r1, r2
     460:	beq	4e8 <coda_za_close+0xb4>
     464:	movw	r0, #0
     468:	str	r0, [sp]
     46c:	ldr	r0, [sp]
     470:	ldr	r1, [sp, #4]
     474:	ldr	r1, [r1, #4]
     478:	cmp	r0, r1
     47c:	bge	4dc <coda_za_close+0xa8>
     480:	ldr	r0, [sp, #4]
     484:	ldr	r0, [r0, #12]
     488:	ldr	r1, [sp]
     48c:	movw	r2, #44	; 0x2c
     490:	mul	r1, r1, r2
     494:	add	r0, r0, r1
     498:	ldr	r0, [r0, #36]	; 0x24
     49c:	movw	r1, #0
     4a0:	cmp	r0, r1
     4a4:	beq	4c8 <coda_za_close+0x94>
     4a8:	ldr	r0, [sp, #4]
     4ac:	ldr	r0, [r0, #12]
     4b0:	ldr	r1, [sp]
     4b4:	movw	r2, #44	; 0x2c
     4b8:	mul	r1, r1, r2
     4bc:	add	r0, r0, r1
     4c0:	ldr	r0, [r0, #36]	; 0x24
     4c4:	bl	0 <free>
     4c8:	b	4cc <coda_za_close+0x98>
     4cc:	ldr	r0, [sp]
     4d0:	add	r0, r0, #1
     4d4:	str	r0, [sp]
     4d8:	b	46c <coda_za_close+0x38>
     4dc:	ldr	r0, [sp, #4]
     4e0:	ldr	r0, [r0, #12]
     4e4:	bl	0 <free>
     4e8:	ldr	r0, [sp, #4]
     4ec:	ldr	r0, [r0, #8]
     4f0:	movw	r1, #0
     4f4:	cmp	r0, r1
     4f8:	beq	508 <coda_za_close+0xd4>
     4fc:	ldr	r0, [sp, #4]
     500:	ldr	r0, [r0, #8]
     504:	bl	0 <free>
     508:	ldr	r0, [sp, #4]
     50c:	ldr	r0, [r0, #16]
     510:	movw	r1, #0
     514:	cmp	r0, r1
     518:	beq	528 <coda_za_close+0xf4>
     51c:	ldr	r0, [sp, #4]
     520:	ldr	r0, [r0, #16]
     524:	bl	0 <coda_hashtable_delete>
     528:	ldr	r0, [sp, #4]
     52c:	bl	0 <free>
     530:	mov	sp, fp
     534:	pop	{fp, pc}

00000538 <get_entries>:
     538:	push	{fp, lr}
     53c:	mov	fp, sp
     540:	sub	sp, sp, #128	; 0x80
     544:	str	r0, [fp, #-8]
     548:	ldr	r0, [fp, #-8]
     54c:	ldr	r0, [r0]
     550:	mvn	r1, #21
     554:	movw	r2, #2
     558:	bl	0 <lseek>
     55c:	cmp	r0, #0
     560:	bge	590 <get_entries+0x58>
     564:	ldr	r0, [fp, #-8]
     568:	ldr	r0, [r0, #20]
     56c:	str	r0, [sp, #44]	; 0x2c
     570:	bl	0 <__errno_location>
     574:	ldr	r0, [r0]
     578:	bl	0 <strerror>
     57c:	ldr	r1, [sp, #44]	; 0x2c
     580:	blx	r1
     584:	mvn	r0, #0
     588:	str	r0, [fp, #-4]
     58c:	b	aac <get_entries+0x574>
     590:	ldr	r0, [fp, #-8]
     594:	ldr	r0, [r0]
     598:	sub	r1, fp, #56	; 0x38
     59c:	movw	r2, #22
     5a0:	bl	0 <read>
     5a4:	cmp	r0, #0
     5a8:	bge	5d8 <get_entries+0xa0>
     5ac:	ldr	r0, [fp, #-8]
     5b0:	ldr	r0, [r0, #20]
     5b4:	str	r0, [sp, #40]	; 0x28
     5b8:	bl	0 <__errno_location>
     5bc:	ldr	r0, [r0]
     5c0:	bl	0 <strerror>
     5c4:	ldr	r1, [sp, #40]	; 0x28
     5c8:	blx	r1
     5cc:	mvn	r0, #0
     5d0:	str	r0, [fp, #-4]
     5d4:	b	aac <get_entries+0x574>
     5d8:	ldr	r0, [pc, #1240]	; ab8 <get_entries+0x580>
     5dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
     5e0:	str	r1, [fp, #-60]	; 0xffffffc4
     5e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
     5e8:	cmp	r1, r0
     5ec:	beq	624 <get_entries+0xec>
     5f0:	ldr	r0, [fp, #-8]
     5f4:	ldr	r0, [r0, #20]
     5f8:	ldr	r1, [fp, #-8]
     5fc:	ldr	r1, [r1, #8]
     600:	movw	r2, #0
     604:	movt	r2, #0
     608:	str	r0, [sp, #36]	; 0x24
     60c:	mov	r0, r2
     610:	ldr	r2, [sp, #36]	; 0x24
     614:	blx	r2
     618:	mvn	r0, #0
     61c:	str	r0, [fp, #-4]
     620:	b	aac <get_entries+0x574>
     624:	ldrh	r0, [fp, #-48]	; 0xffffffd0
     628:	strh	r0, [sp, #62]	; 0x3e
     62c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     630:	str	r0, [sp, #64]	; 0x40
     634:	ldrh	r0, [sp, #62]	; 0x3e
     638:	ldr	r1, [fp, #-8]
     63c:	str	r0, [r1, #4]
     640:	ldrh	r0, [sp, #62]	; 0x3e
     644:	movw	r1, #44	; 0x2c
     648:	mul	r0, r0, r1
     64c:	bl	0 <malloc>
     650:	ldr	r1, [fp, #-8]
     654:	str	r0, [r1, #12]
     658:	ldr	r0, [fp, #-8]
     65c:	ldr	r0, [r0, #12]
     660:	movw	r1, #0
     664:	cmp	r0, r1
     668:	bne	6a4 <get_entries+0x16c>
     66c:	ldr	r0, [fp, #-8]
     670:	ldr	r0, [r0, #20]
     674:	ldrh	r1, [sp, #62]	; 0x3e
     678:	movw	r2, #44	; 0x2c
     67c:	mul	r1, r1, r2
     680:	movw	r2, #0
     684:	movt	r2, #0
     688:	str	r0, [sp, #32]
     68c:	mov	r0, r2
     690:	ldr	r2, [sp, #32]
     694:	blx	r2
     698:	mvn	r0, #0
     69c:	str	r0, [fp, #-4]
     6a0:	b	aac <get_entries+0x574>
     6a4:	movw	r0, #0
     6a8:	str	r0, [sp, #56]	; 0x38
     6ac:	ldr	r0, [sp, #56]	; 0x38
     6b0:	ldrh	r1, [sp, #62]	; 0x3e
     6b4:	cmp	r0, r1
     6b8:	bge	708 <get_entries+0x1d0>
     6bc:	ldr	r0, [fp, #-8]
     6c0:	ldr	r0, [r0, #12]
     6c4:	ldr	r1, [sp, #56]	; 0x38
     6c8:	movw	r2, #44	; 0x2c
     6cc:	mul	r1, r1, r2
     6d0:	add	r0, r0, r1
     6d4:	movw	r1, #0
     6d8:	str	r1, [r0, #36]	; 0x24
     6dc:	ldr	r0, [fp, #-8]
     6e0:	ldr	r1, [fp, #-8]
     6e4:	ldr	r1, [r1, #12]
     6e8:	ldr	r3, [sp, #56]	; 0x38
     6ec:	mul	r2, r3, r2
     6f0:	add	r1, r1, r2
     6f4:	str	r0, [r1, #40]	; 0x28
     6f8:	ldr	r0, [sp, #56]	; 0x38
     6fc:	add	r0, r0, #1
     700:	str	r0, [sp, #56]	; 0x38
     704:	b	6ac <get_entries+0x174>
     708:	ldr	r0, [fp, #-8]
     70c:	ldr	r0, [r0]
     710:	ldr	r1, [sp, #64]	; 0x40
     714:	movw	r2, #0
     718:	bl	0 <lseek>
     71c:	cmp	r0, #0
     720:	bge	750 <get_entries+0x218>
     724:	ldr	r0, [fp, #-8]
     728:	ldr	r0, [r0, #20]
     72c:	str	r0, [sp, #28]
     730:	bl	0 <__errno_location>
     734:	ldr	r0, [r0]
     738:	bl	0 <strerror>
     73c:	ldr	r1, [sp, #28]
     740:	blx	r1
     744:	mvn	r0, #0
     748:	str	r0, [fp, #-4]
     74c:	b	aac <get_entries+0x574>
     750:	movw	r0, #0
     754:	str	r0, [sp, #56]	; 0x38
     758:	ldr	r0, [sp, #56]	; 0x38
     75c:	ldrh	r1, [sp, #62]	; 0x3e
     760:	cmp	r0, r1
     764:	bge	aa4 <get_entries+0x56c>
     768:	ldr	r0, [fp, #-8]
     76c:	ldr	r0, [r0, #12]
     770:	ldr	r1, [sp, #56]	; 0x38
     774:	movw	r2, #44	; 0x2c
     778:	mul	r1, r1, r2
     77c:	add	r0, r0, r1
     780:	str	r0, [sp, #48]	; 0x30
     784:	ldr	r0, [fp, #-8]
     788:	ldr	r0, [r0]
     78c:	sub	r1, fp, #56	; 0x38
     790:	movw	r2, #46	; 0x2e
     794:	bl	0 <read>
     798:	cmp	r0, #0
     79c:	bge	7cc <get_entries+0x294>
     7a0:	ldr	r0, [fp, #-8]
     7a4:	ldr	r0, [r0, #20]
     7a8:	str	r0, [sp, #24]
     7ac:	bl	0 <__errno_location>
     7b0:	ldr	r0, [r0]
     7b4:	bl	0 <strerror>
     7b8:	ldr	r1, [sp, #24]
     7bc:	blx	r1
     7c0:	mvn	r0, #0
     7c4:	str	r0, [fp, #-4]
     7c8:	b	aac <get_entries+0x574>
     7cc:	ldr	r0, [pc, #744]	; abc <get_entries+0x584>
     7d0:	ldr	r1, [fp, #-56]	; 0xffffffc8
     7d4:	str	r1, [fp, #-60]	; 0xffffffc4
     7d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
     7dc:	cmp	r1, r0
     7e0:	beq	818 <get_entries+0x2e0>
     7e4:	ldr	r0, [fp, #-8]
     7e8:	ldr	r0, [r0, #20]
     7ec:	ldr	r1, [fp, #-8]
     7f0:	ldr	r1, [r1, #8]
     7f4:	movw	r2, #0
     7f8:	movt	r2, #0
     7fc:	str	r0, [sp, #20]
     800:	mov	r0, r2
     804:	ldr	r2, [sp, #20]
     808:	blx	r2
     80c:	mvn	r0, #0
     810:	str	r0, [fp, #-4]
     814:	b	aac <get_entries+0x574>
     818:	ldrh	r0, [fp, #-46]	; 0xffffffd2
     81c:	ldr	r1, [sp, #48]	; 0x30
     820:	strh	r0, [r1, #4]
     824:	ldr	r0, [sp, #48]	; 0x30
     828:	ldrh	r0, [r0, #4]
     82c:	cmp	r0, #0
     830:	beq	878 <get_entries+0x340>
     834:	ldr	r0, [sp, #48]	; 0x30
     838:	ldrh	r0, [r0, #4]
     83c:	cmp	r0, #8
     840:	beq	878 <get_entries+0x340>
     844:	ldr	r0, [fp, #-8]
     848:	ldr	r0, [r0, #20]
     84c:	ldr	r1, [fp, #-8]
     850:	ldr	r1, [r1, #8]
     854:	movw	r2, #0
     858:	movt	r2, #0
     85c:	str	r0, [sp, #16]
     860:	mov	r0, r2
     864:	ldr	r2, [sp, #16]
     868:	blx	r2
     86c:	mvn	r0, #0
     870:	str	r0, [fp, #-4]
     874:	b	aac <get_entries+0x574>
     878:	ldrh	r0, [fp, #-44]	; 0xffffffd4
     87c:	ldr	r1, [sp, #48]	; 0x30
     880:	strh	r0, [r1, #6]
     884:	ldrh	r0, [fp, #-42]	; 0xffffffd6
     888:	ldr	r1, [sp, #48]	; 0x30
     88c:	strh	r0, [r1, #8]
     890:	ldr	r0, [fp, #-40]	; 0xffffffd8
     894:	ldr	r1, [sp, #48]	; 0x30
     898:	str	r0, [r1, #16]
     89c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     8a0:	ldr	r1, [sp, #48]	; 0x30
     8a4:	str	r0, [r1, #20]
     8a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     8ac:	ldr	r1, [sp, #48]	; 0x30
     8b0:	str	r0, [r1, #24]
     8b4:	ldrh	r0, [fp, #-28]	; 0xffffffe4
     8b8:	ldr	r1, [sp, #48]	; 0x30
     8bc:	strh	r0, [r1, #28]
     8c0:	ldrh	r0, [fp, #-26]	; 0xffffffe6
     8c4:	ldr	r1, [sp, #48]	; 0x30
     8c8:	strh	r0, [r1, #30]
     8cc:	ldrh	r0, [fp, #-24]	; 0xffffffe8
     8d0:	strh	r0, [sp, #54]	; 0x36
     8d4:	ldrh	r0, [fp, #-20]	; 0xffffffec
     8d8:	strh	r0, [sp, #52]	; 0x34
     8dc:	ldrh	r0, [sp, #52]	; 0x34
     8e0:	and	r0, r0, #1
     8e4:	ldr	r1, [sp, #48]	; 0x30
     8e8:	str	r0, [r1, #32]
     8ec:	ldr	r0, [sp, #48]	; 0x30
     8f0:	ldrh	r1, [fp, #-18]	; 0xffffffee
     8f4:	strh	r1, [r0, #12]
     8f8:	ldrh	r1, [fp, #-16]
     8fc:	strh	r1, [r0, #14]
     900:	ldr	r0, [sp, #48]	; 0x30
     904:	ldrh	r1, [fp, #-14]
     908:	strh	r1, [r0]
     90c:	ldrh	r1, [fp, #-12]
     910:	strh	r1, [r0, #2]
     914:	ldr	r0, [sp, #48]	; 0x30
     918:	ldrh	r0, [r0, #28]
     91c:	add	r0, r0, #1
     920:	bl	0 <malloc>
     924:	ldr	r1, [sp, #48]	; 0x30
     928:	str	r0, [r1, #36]	; 0x24
     92c:	ldr	r0, [sp, #48]	; 0x30
     930:	ldr	r0, [r0, #36]	; 0x24
     934:	movw	r1, #0
     938:	cmp	r0, r1
     93c:	bne	978 <get_entries+0x440>
     940:	ldr	r0, [fp, #-8]
     944:	ldr	r0, [r0, #20]
     948:	ldr	r1, [sp, #48]	; 0x30
     94c:	ldrh	r1, [r1, #28]
     950:	add	r1, r1, #1
     954:	movw	r2, #0
     958:	movt	r2, #0
     95c:	str	r0, [sp, #12]
     960:	mov	r0, r2
     964:	ldr	r2, [sp, #12]
     968:	blx	r2
     96c:	mvn	r0, #0
     970:	str	r0, [fp, #-4]
     974:	b	aac <get_entries+0x574>
     978:	ldr	r0, [fp, #-8]
     97c:	ldr	r0, [r0]
     980:	ldr	r1, [sp, #48]	; 0x30
     984:	ldr	r1, [r1, #36]	; 0x24
     988:	ldr	r2, [sp, #48]	; 0x30
     98c:	ldrh	r2, [r2, #28]
     990:	bl	0 <read>
     994:	cmp	r0, #0
     998:	bge	9c8 <get_entries+0x490>
     99c:	ldr	r0, [fp, #-8]
     9a0:	ldr	r0, [r0, #20]
     9a4:	str	r0, [sp, #8]
     9a8:	bl	0 <__errno_location>
     9ac:	ldr	r0, [r0]
     9b0:	bl	0 <strerror>
     9b4:	ldr	r1, [sp, #8]
     9b8:	blx	r1
     9bc:	mvn	r0, #0
     9c0:	str	r0, [fp, #-4]
     9c4:	b	aac <get_entries+0x574>
     9c8:	ldr	r0, [sp, #48]	; 0x30
     9cc:	ldr	r0, [r0, #36]	; 0x24
     9d0:	ldr	r1, [sp, #48]	; 0x30
     9d4:	ldrh	r1, [r1, #28]
     9d8:	add	r0, r0, r1
     9dc:	movw	r1, #0
     9e0:	strb	r1, [r0]
     9e4:	ldr	r0, [fp, #-8]
     9e8:	ldr	r0, [r0, #16]
     9ec:	ldr	r1, [sp, #48]	; 0x30
     9f0:	ldr	r1, [r1, #36]	; 0x24
     9f4:	bl	0 <coda_hashtable_add_name>
     9f8:	cmp	r0, #0
     9fc:	beq	a3c <get_entries+0x504>
     a00:	ldr	r0, [fp, #-8]
     a04:	ldr	r0, [r0, #20]
     a08:	ldr	r1, [fp, #-8]
     a0c:	ldr	r1, [r1, #8]
     a10:	ldr	r2, [sp, #48]	; 0x30
     a14:	ldr	r2, [r2, #36]	; 0x24
     a18:	movw	r3, #0
     a1c:	movt	r3, #0
     a20:	str	r0, [sp, #4]
     a24:	mov	r0, r3
     a28:	ldr	r3, [sp, #4]
     a2c:	blx	r3
     a30:	mvn	r0, #0
     a34:	str	r0, [fp, #-4]
     a38:	b	aac <get_entries+0x574>
     a3c:	ldr	r0, [fp, #-8]
     a40:	ldr	r0, [r0]
     a44:	ldr	r1, [sp, #48]	; 0x30
     a48:	ldrh	r1, [r1, #30]
     a4c:	ldrh	r2, [sp, #54]	; 0x36
     a50:	add	r1, r1, r2
     a54:	movw	r2, #1
     a58:	bl	0 <lseek>
     a5c:	cmp	r0, #0
     a60:	bge	a90 <get_entries+0x558>
     a64:	ldr	r0, [fp, #-8]
     a68:	ldr	r0, [r0, #20]
     a6c:	str	r0, [sp]
     a70:	bl	0 <__errno_location>
     a74:	ldr	r0, [r0]
     a78:	bl	0 <strerror>
     a7c:	ldr	r1, [sp]
     a80:	blx	r1
     a84:	mvn	r0, #0
     a88:	str	r0, [fp, #-4]
     a8c:	b	aac <get_entries+0x574>
     a90:	b	a94 <get_entries+0x55c>
     a94:	ldr	r0, [sp, #56]	; 0x38
     a98:	add	r0, r0, #1
     a9c:	str	r0, [sp, #56]	; 0x38
     aa0:	b	758 <get_entries+0x220>
     aa4:	movw	r0, #0
     aa8:	str	r0, [fp, #-4]
     aac:	ldr	r0, [fp, #-4]
     ab0:	mov	sp, fp
     ab4:	pop	{fp, pc}
     ab8:	.word	0x06054b50
     abc:	.word	0x02014b50

00000ac0 <coda_za_get_num_entries>:
     ac0:	sub	sp, sp, #4
     ac4:	str	r0, [sp]
     ac8:	ldr	r0, [sp]
     acc:	ldr	r0, [r0, #4]
     ad0:	add	sp, sp, #4
     ad4:	bx	lr

00000ad8 <coda_za_get_filename>:
     ad8:	sub	sp, sp, #4
     adc:	str	r0, [sp]
     ae0:	ldr	r0, [sp]
     ae4:	ldr	r0, [r0, #8]
     ae8:	add	sp, sp, #4
     aec:	bx	lr

00000af0 <coda_za_get_entry_by_index>:
     af0:	sub	sp, sp, #12
     af4:	str	r0, [sp, #4]
     af8:	str	r1, [sp]
     afc:	ldr	r0, [sp]
     b00:	cmp	r0, #0
     b04:	blt	b1c <coda_za_get_entry_by_index+0x2c>
     b08:	ldr	r0, [sp]
     b0c:	ldr	r1, [sp, #4]
     b10:	ldr	r1, [r1, #4]
     b14:	cmp	r0, r1
     b18:	blt	b28 <coda_za_get_entry_by_index+0x38>
     b1c:	movw	r0, #0
     b20:	str	r0, [sp, #8]
     b24:	b	b44 <coda_za_get_entry_by_index+0x54>
     b28:	ldr	r0, [sp, #4]
     b2c:	ldr	r0, [r0, #12]
     b30:	ldr	r1, [sp]
     b34:	movw	r2, #44	; 0x2c
     b38:	mul	r1, r1, r2
     b3c:	add	r0, r0, r1
     b40:	str	r0, [sp, #8]
     b44:	ldr	r0, [sp, #8]
     b48:	add	sp, sp, #12
     b4c:	bx	lr

00000b50 <coda_za_get_entry_by_name>:
     b50:	push	{fp, lr}
     b54:	mov	fp, sp
     b58:	sub	sp, sp, #16
     b5c:	str	r0, [sp, #8]
     b60:	str	r1, [sp, #4]
     b64:	ldr	r0, [sp, #8]
     b68:	ldr	r0, [r0, #16]
     b6c:	ldr	r1, [sp, #4]
     b70:	bl	0 <coda_hashtable_get_index_from_name>
     b74:	str	r0, [sp]
     b78:	ldr	r0, [sp]
     b7c:	cmp	r0, #0
     b80:	bge	b90 <coda_za_get_entry_by_name+0x40>
     b84:	movw	r0, #0
     b88:	str	r0, [fp, #-4]
     b8c:	b	bac <coda_za_get_entry_by_name+0x5c>
     b90:	ldr	r0, [sp, #8]
     b94:	ldr	r0, [r0, #12]
     b98:	ldr	r1, [sp]
     b9c:	movw	r2, #44	; 0x2c
     ba0:	mul	r1, r1, r2
     ba4:	add	r0, r0, r1
     ba8:	str	r0, [fp, #-4]
     bac:	ldr	r0, [fp, #-4]
     bb0:	mov	sp, fp
     bb4:	pop	{fp, pc}

00000bb8 <coda_za_get_entry_size>:
     bb8:	sub	sp, sp, #4
     bbc:	str	r0, [sp]
     bc0:	ldr	r0, [sp]
     bc4:	ldr	r0, [r0, #24]
     bc8:	add	sp, sp, #4
     bcc:	bx	lr

00000bd0 <coda_za_get_entry_name>:
     bd0:	sub	sp, sp, #4
     bd4:	str	r0, [sp]
     bd8:	ldr	r0, [sp]
     bdc:	ldr	r0, [r0, #36]	; 0x24
     be0:	add	sp, sp, #4
     be4:	bx	lr

00000be8 <coda_za_read_entry>:
     be8:	push	{fp, lr}
     bec:	mov	fp, sp
     bf0:	sub	sp, sp, #232	; 0xe8
     bf4:	str	r0, [fp, #-8]
     bf8:	str	r1, [fp, #-12]
     bfc:	ldr	r0, [fp, #-8]
     c00:	ldr	r0, [r0, #40]	; 0x28
     c04:	ldr	r0, [r0]
     c08:	ldr	r1, [fp, #-8]
     c0c:	ldr	r1, [r1]
     c10:	movw	r2, #0
     c14:	bl	0 <lseek>
     c18:	cmp	r0, #0
     c1c:	bge	c50 <coda_za_read_entry+0x68>
     c20:	ldr	r0, [fp, #-8]
     c24:	ldr	r0, [r0, #40]	; 0x28
     c28:	ldr	r0, [r0, #20]
     c2c:	str	r0, [sp, #92]	; 0x5c
     c30:	bl	0 <__errno_location>
     c34:	ldr	r0, [r0]
     c38:	bl	0 <strerror>
     c3c:	ldr	r1, [sp, #92]	; 0x5c
     c40:	blx	r1
     c44:	mvn	r0, #0
     c48:	str	r0, [fp, #-4]
     c4c:	b	12fc <coda_za_read_entry+0x714>
     c50:	ldr	r0, [fp, #-8]
     c54:	ldr	r0, [r0, #40]	; 0x28
     c58:	ldr	r0, [r0]
     c5c:	sub	r1, fp, #44	; 0x2c
     c60:	movw	r2, #30
     c64:	bl	0 <read>
     c68:	cmp	r0, #0
     c6c:	bge	ca0 <coda_za_read_entry+0xb8>
     c70:	ldr	r0, [fp, #-8]
     c74:	ldr	r0, [r0, #40]	; 0x28
     c78:	ldr	r0, [r0, #20]
     c7c:	str	r0, [sp, #88]	; 0x58
     c80:	bl	0 <__errno_location>
     c84:	ldr	r0, [r0]
     c88:	bl	0 <strerror>
     c8c:	ldr	r1, [sp, #88]	; 0x58
     c90:	blx	r1
     c94:	mvn	r0, #0
     c98:	str	r0, [fp, #-4]
     c9c:	b	12fc <coda_za_read_entry+0x714>
     ca0:	ldr	r0, [pc, #1632]	; 1308 <coda_za_read_entry+0x720>
     ca4:	ldr	r1, [fp, #-44]	; 0xffffffd4
     ca8:	str	r1, [fp, #-48]	; 0xffffffd0
     cac:	ldr	r1, [fp, #-48]	; 0xffffffd0
     cb0:	cmp	r1, r0
     cb4:	beq	ce8 <coda_za_read_entry+0x100>
     cb8:	ldr	r0, [fp, #-8]
     cbc:	ldr	r0, [r0, #40]	; 0x28
     cc0:	ldr	r0, [r0, #20]
     cc4:	movw	r1, #0
     cc8:	movt	r1, #0
     ccc:	str	r0, [sp, #84]	; 0x54
     cd0:	mov	r0, r1
     cd4:	ldr	r1, [sp, #84]	; 0x54
     cd8:	blx	r1
     cdc:	mvn	r0, #0
     ce0:	str	r0, [fp, #-4]
     ce4:	b	12fc <coda_za_read_entry+0x714>
     ce8:	ldrh	r0, [fp, #-36]	; 0xffffffdc
     cec:	strh	r0, [fp, #-50]	; 0xffffffce
     cf0:	ldrh	r0, [fp, #-50]	; 0xffffffce
     cf4:	ldr	r1, [fp, #-8]
     cf8:	ldrh	r1, [r1, #4]
     cfc:	cmp	r0, r1
     d00:	beq	d34 <coda_za_read_entry+0x14c>
     d04:	ldr	r0, [fp, #-8]
     d08:	ldr	r0, [r0, #40]	; 0x28
     d0c:	ldr	r0, [r0, #20]
     d10:	movw	r1, #0
     d14:	movt	r1, #0
     d18:	str	r0, [sp, #80]	; 0x50
     d1c:	mov	r0, r1
     d20:	ldr	r1, [sp, #80]	; 0x50
     d24:	blx	r1
     d28:	mvn	r0, #0
     d2c:	str	r0, [fp, #-4]
     d30:	b	12fc <coda_za_read_entry+0x714>
     d34:	ldrh	r0, [fp, #-34]	; 0xffffffde
     d38:	strh	r0, [fp, #-52]	; 0xffffffcc
     d3c:	ldrh	r0, [fp, #-52]	; 0xffffffcc
     d40:	ldr	r1, [fp, #-8]
     d44:	ldrh	r1, [r1, #6]
     d48:	cmp	r0, r1
     d4c:	beq	d80 <coda_za_read_entry+0x198>
     d50:	ldr	r0, [fp, #-8]
     d54:	ldr	r0, [r0, #40]	; 0x28
     d58:	ldr	r0, [r0, #20]
     d5c:	movw	r1, #0
     d60:	movt	r1, #0
     d64:	str	r0, [sp, #76]	; 0x4c
     d68:	mov	r0, r1
     d6c:	ldr	r1, [sp, #76]	; 0x4c
     d70:	blx	r1
     d74:	mvn	r0, #0
     d78:	str	r0, [fp, #-4]
     d7c:	b	12fc <coda_za_read_entry+0x714>
     d80:	ldrh	r0, [fp, #-32]	; 0xffffffe0
     d84:	strh	r0, [fp, #-54]	; 0xffffffca
     d88:	ldrh	r0, [fp, #-54]	; 0xffffffca
     d8c:	ldr	r1, [fp, #-8]
     d90:	ldrh	r1, [r1, #8]
     d94:	cmp	r0, r1
     d98:	beq	dcc <coda_za_read_entry+0x1e4>
     d9c:	ldr	r0, [fp, #-8]
     da0:	ldr	r0, [r0, #40]	; 0x28
     da4:	ldr	r0, [r0, #20]
     da8:	movw	r1, #0
     dac:	movt	r1, #0
     db0:	str	r0, [sp, #72]	; 0x48
     db4:	mov	r0, r1
     db8:	ldr	r1, [sp, #72]	; 0x48
     dbc:	blx	r1
     dc0:	mvn	r0, #0
     dc4:	str	r0, [fp, #-4]
     dc8:	b	12fc <coda_za_read_entry+0x714>
     dcc:	ldrh	r0, [fp, #-30]	; 0xffffffe2
     dd0:	strh	r0, [fp, #-60]	; 0xffffffc4
     dd4:	ldrh	r0, [fp, #-28]	; 0xffffffe4
     dd8:	strh	r0, [fp, #-58]	; 0xffffffc6
     ddc:	ldr	r0, [fp, #-60]	; 0xffffffc4
     de0:	ldr	r1, [fp, #-8]
     de4:	ldr	r1, [r1, #16]
     de8:	cmp	r0, r1
     dec:	beq	e20 <coda_za_read_entry+0x238>
     df0:	ldr	r0, [fp, #-8]
     df4:	ldr	r0, [r0, #40]	; 0x28
     df8:	ldr	r0, [r0, #20]
     dfc:	movw	r1, #0
     e00:	movt	r1, #0
     e04:	str	r0, [sp, #68]	; 0x44
     e08:	mov	r0, r1
     e0c:	ldr	r1, [sp, #68]	; 0x44
     e10:	blx	r1
     e14:	mvn	r0, #0
     e18:	str	r0, [fp, #-4]
     e1c:	b	12fc <coda_za_read_entry+0x714>
     e20:	ldrh	r0, [fp, #-26]	; 0xffffffe6
     e24:	strh	r0, [fp, #-64]	; 0xffffffc0
     e28:	ldrh	r0, [fp, #-24]	; 0xffffffe8
     e2c:	strh	r0, [fp, #-62]	; 0xffffffc2
     e30:	ldr	r0, [fp, #-64]	; 0xffffffc0
     e34:	ldr	r1, [fp, #-8]
     e38:	ldr	r1, [r1, #20]
     e3c:	cmp	r0, r1
     e40:	beq	e74 <coda_za_read_entry+0x28c>
     e44:	ldr	r0, [fp, #-8]
     e48:	ldr	r0, [r0, #40]	; 0x28
     e4c:	ldr	r0, [r0, #20]
     e50:	movw	r1, #0
     e54:	movt	r1, #0
     e58:	str	r0, [sp, #64]	; 0x40
     e5c:	mov	r0, r1
     e60:	ldr	r1, [sp, #64]	; 0x40
     e64:	blx	r1
     e68:	mvn	r0, #0
     e6c:	str	r0, [fp, #-4]
     e70:	b	12fc <coda_za_read_entry+0x714>
     e74:	ldrh	r0, [fp, #-22]	; 0xffffffea
     e78:	strh	r0, [fp, #-68]	; 0xffffffbc
     e7c:	ldrh	r0, [fp, #-20]	; 0xffffffec
     e80:	strh	r0, [fp, #-66]	; 0xffffffbe
     e84:	ldr	r0, [fp, #-68]	; 0xffffffbc
     e88:	ldr	r1, [fp, #-8]
     e8c:	ldr	r1, [r1, #24]
     e90:	cmp	r0, r1
     e94:	beq	ec8 <coda_za_read_entry+0x2e0>
     e98:	ldr	r0, [fp, #-8]
     e9c:	ldr	r0, [r0, #40]	; 0x28
     ea0:	ldr	r0, [r0, #20]
     ea4:	movw	r1, #0
     ea8:	movt	r1, #0
     eac:	str	r0, [sp, #60]	; 0x3c
     eb0:	mov	r0, r1
     eb4:	ldr	r1, [sp, #60]	; 0x3c
     eb8:	blx	r1
     ebc:	mvn	r0, #0
     ec0:	str	r0, [fp, #-4]
     ec4:	b	12fc <coda_za_read_entry+0x714>
     ec8:	ldrh	r0, [fp, #-18]	; 0xffffffee
     ecc:	strh	r0, [fp, #-70]	; 0xffffffba
     ed0:	ldrh	r0, [fp, #-70]	; 0xffffffba
     ed4:	ldr	r1, [fp, #-8]
     ed8:	ldrh	r1, [r1, #28]
     edc:	cmp	r0, r1
     ee0:	beq	f14 <coda_za_read_entry+0x32c>
     ee4:	ldr	r0, [fp, #-8]
     ee8:	ldr	r0, [r0, #40]	; 0x28
     eec:	ldr	r0, [r0, #20]
     ef0:	movw	r1, #0
     ef4:	movt	r1, #0
     ef8:	str	r0, [sp, #56]	; 0x38
     efc:	mov	r0, r1
     f00:	ldr	r1, [sp, #56]	; 0x38
     f04:	blx	r1
     f08:	mvn	r0, #0
     f0c:	str	r0, [fp, #-4]
     f10:	b	12fc <coda_za_read_entry+0x714>
     f14:	ldrh	r0, [fp, #-16]
     f18:	strh	r0, [fp, #-72]	; 0xffffffb8
     f1c:	ldr	r0, [fp, #-8]
     f20:	ldr	r0, [r0, #40]	; 0x28
     f24:	ldr	r0, [r0]
     f28:	ldrh	r1, [fp, #-70]	; 0xffffffba
     f2c:	ldrh	r2, [fp, #-72]	; 0xffffffb8
     f30:	add	r1, r1, r2
     f34:	movw	r2, #1
     f38:	bl	0 <lseek>
     f3c:	cmp	r0, #0
     f40:	bge	f74 <coda_za_read_entry+0x38c>
     f44:	ldr	r0, [fp, #-8]
     f48:	ldr	r0, [r0, #40]	; 0x28
     f4c:	ldr	r0, [r0, #20]
     f50:	str	r0, [sp, #52]	; 0x34
     f54:	bl	0 <__errno_location>
     f58:	ldr	r0, [r0]
     f5c:	bl	0 <strerror>
     f60:	ldr	r1, [sp, #52]	; 0x34
     f64:	blx	r1
     f68:	mvn	r0, #0
     f6c:	str	r0, [fp, #-4]
     f70:	b	12fc <coda_za_read_entry+0x714>
     f74:	ldr	r0, [fp, #-8]
     f78:	ldrh	r0, [r0, #4]
     f7c:	cmp	r0, #0
     f80:	bne	fdc <coda_za_read_entry+0x3f4>
     f84:	ldr	r0, [fp, #-8]
     f88:	ldr	r0, [r0, #40]	; 0x28
     f8c:	ldr	r0, [r0]
     f90:	ldr	r1, [fp, #-12]
     f94:	ldr	r2, [fp, #-8]
     f98:	ldr	r2, [r2, #24]
     f9c:	bl	0 <read>
     fa0:	cmp	r0, #0
     fa4:	bge	fd8 <coda_za_read_entry+0x3f0>
     fa8:	ldr	r0, [fp, #-8]
     fac:	ldr	r0, [r0, #40]	; 0x28
     fb0:	ldr	r0, [r0, #20]
     fb4:	str	r0, [sp, #48]	; 0x30
     fb8:	bl	0 <__errno_location>
     fbc:	ldr	r0, [r0]
     fc0:	bl	0 <strerror>
     fc4:	ldr	r1, [sp, #48]	; 0x30
     fc8:	blx	r1
     fcc:	mvn	r0, #0
     fd0:	str	r0, [fp, #-4]
     fd4:	b	12fc <coda_za_read_entry+0x714>
     fd8:	b	12f4 <coda_za_read_entry+0x70c>
     fdc:	ldr	r0, [fp, #-8]
     fe0:	ldr	r0, [r0, #20]
     fe4:	bl	0 <malloc>
     fe8:	str	r0, [fp, #-76]	; 0xffffffb4
     fec:	ldr	r0, [fp, #-76]	; 0xffffffb4
     ff0:	movw	r1, #0
     ff4:	cmp	r0, r1
     ff8:	bne	1034 <coda_za_read_entry+0x44c>
     ffc:	ldr	r0, [fp, #-8]
    1000:	ldr	r0, [r0, #40]	; 0x28
    1004:	ldr	r0, [r0, #20]
    1008:	ldr	r1, [fp, #-8]
    100c:	ldr	r1, [r1, #20]
    1010:	movw	r2, #0
    1014:	movt	r2, #0
    1018:	str	r0, [sp, #44]	; 0x2c
    101c:	mov	r0, r2
    1020:	ldr	r2, [sp, #44]	; 0x2c
    1024:	blx	r2
    1028:	mvn	r0, #0
    102c:	str	r0, [fp, #-4]
    1030:	b	12fc <coda_za_read_entry+0x714>
    1034:	ldr	r0, [fp, #-8]
    1038:	ldr	r0, [r0, #40]	; 0x28
    103c:	ldr	r0, [r0]
    1040:	ldr	r1, [fp, #-76]	; 0xffffffb4
    1044:	ldr	r2, [fp, #-8]
    1048:	ldr	r2, [r2, #20]
    104c:	bl	0 <read>
    1050:	cmp	r0, #0
    1054:	bge	1090 <coda_za_read_entry+0x4a8>
    1058:	ldr	r0, [fp, #-8]
    105c:	ldr	r0, [r0, #40]	; 0x28
    1060:	ldr	r0, [r0, #20]
    1064:	str	r0, [sp, #40]	; 0x28
    1068:	bl	0 <__errno_location>
    106c:	ldr	r0, [r0]
    1070:	bl	0 <strerror>
    1074:	ldr	r1, [sp, #40]	; 0x28
    1078:	blx	r1
    107c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1080:	bl	0 <free>
    1084:	mvn	r0, #0
    1088:	str	r0, [fp, #-4]
    108c:	b	12fc <coda_za_read_entry+0x714>
    1090:	movw	r0, #0
    1094:	str	r0, [sp, #100]	; 0x64
    1098:	str	r0, [sp, #104]	; 0x68
    109c:	str	r0, [sp, #132]	; 0x84
    10a0:	str	r0, [sp, #136]	; 0x88
    10a4:	str	r0, [sp, #140]	; 0x8c
    10a8:	str	r0, [sp, #124]	; 0x7c
    10ac:	add	r0, sp, #100	; 0x64
    10b0:	mvn	r1, #14
    10b4:	movw	r2, #0
    10b8:	movt	r2, #0
    10bc:	movw	r3, #56	; 0x38
    10c0:	bl	0 <coda_inflateInit2_>
    10c4:	cmp	r0, #0
    10c8:	beq	1140 <coda_za_read_entry+0x558>
    10cc:	ldr	r0, [sp, #124]	; 0x7c
    10d0:	movw	r1, #0
    10d4:	cmp	r0, r1
    10d8:	beq	1108 <coda_za_read_entry+0x520>
    10dc:	ldr	r0, [fp, #-8]
    10e0:	ldr	r0, [r0, #40]	; 0x28
    10e4:	ldr	r0, [r0, #20]
    10e8:	ldr	r1, [sp, #124]	; 0x7c
    10ec:	movw	r2, #0
    10f0:	movt	r2, #0
    10f4:	str	r0, [sp, #36]	; 0x24
    10f8:	mov	r0, r2
    10fc:	ldr	r2, [sp, #36]	; 0x24
    1100:	blx	r2
    1104:	b	112c <coda_za_read_entry+0x544>
    1108:	ldr	r0, [fp, #-8]
    110c:	ldr	r0, [r0, #40]	; 0x28
    1110:	ldr	r0, [r0, #20]
    1114:	movw	r1, #0
    1118:	movt	r1, #0
    111c:	str	r0, [sp, #32]
    1120:	mov	r0, r1
    1124:	ldr	r1, [sp, #32]
    1128:	blx	r1
    112c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1130:	bl	0 <free>
    1134:	mvn	r0, #0
    1138:	str	r0, [fp, #-4]
    113c:	b	12fc <coda_za_read_entry+0x714>
    1140:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1144:	str	r0, [sp, #100]	; 0x64
    1148:	ldr	r0, [fp, #-8]
    114c:	ldr	r0, [r0, #20]
    1150:	str	r0, [sp, #104]	; 0x68
    1154:	ldr	r0, [fp, #-12]
    1158:	str	r0, [sp, #112]	; 0x70
    115c:	ldr	r0, [fp, #-8]
    1160:	ldr	r0, [r0, #24]
    1164:	str	r0, [sp, #116]	; 0x74
    1168:	add	r0, sp, #100	; 0x64
    116c:	movw	r1, #4
    1170:	bl	0 <coda_inflate>
    1174:	str	r0, [sp, #96]	; 0x60
    1178:	ldr	r0, [sp, #96]	; 0x60
    117c:	cmn	r0, #2
    1180:	beq	1188 <coda_za_read_entry+0x5a0>
    1184:	b	11a8 <coda_za_read_entry+0x5c0>
    1188:	movw	r0, #0
    118c:	movt	r0, #0
    1190:	movw	r1, #0
    1194:	movt	r1, #0
    1198:	movw	r2, #633	; 0x279
    119c:	movw	r3, #0
    11a0:	movt	r3, #0
    11a4:	bl	0 <__assert_fail>
    11a8:	ldr	r0, [sp, #96]	; 0x60
    11ac:	cmn	r0, #4
    11b0:	str	r0, [sp, #28]
    11b4:	beq	1224 <coda_za_read_entry+0x63c>
    11b8:	b	11bc <coda_za_read_entry+0x5d4>
    11bc:	ldr	r0, [sp, #28]
    11c0:	cmn	r0, #3
    11c4:	beq	11dc <coda_za_read_entry+0x5f4>
    11c8:	b	11cc <coda_za_read_entry+0x5e4>
    11cc:	ldr	r0, [sp, #28]
    11d0:	cmp	r0, #2
    11d4:	bne	126c <coda_za_read_entry+0x684>
    11d8:	b	11dc <coda_za_read_entry+0x5f4>
    11dc:	ldr	r0, [fp, #-8]
    11e0:	ldr	r0, [r0, #40]	; 0x28
    11e4:	ldr	r0, [r0, #20]
    11e8:	movw	r1, #0
    11ec:	movt	r1, #0
    11f0:	str	r0, [sp, #24]
    11f4:	mov	r0, r1
    11f8:	ldr	r1, [sp, #24]
    11fc:	blx	r1
    1200:	add	r0, sp, #100	; 0x64
    1204:	bl	0 <coda_inflateEnd>
    1208:	ldr	r1, [fp, #-76]	; 0xffffffb4
    120c:	str	r0, [sp, #20]
    1210:	mov	r0, r1
    1214:	bl	0 <free>
    1218:	mvn	r0, #0
    121c:	str	r0, [fp, #-4]
    1220:	b	12fc <coda_za_read_entry+0x714>
    1224:	ldr	r0, [fp, #-8]
    1228:	ldr	r0, [r0, #40]	; 0x28
    122c:	ldr	r0, [r0, #20]
    1230:	movw	r1, #0
    1234:	movt	r1, #0
    1238:	str	r0, [sp, #16]
    123c:	mov	r0, r1
    1240:	ldr	r1, [sp, #16]
    1244:	blx	r1
    1248:	add	r0, sp, #100	; 0x64
    124c:	bl	0 <coda_inflateEnd>
    1250:	ldr	r1, [fp, #-76]	; 0xffffffb4
    1254:	str	r0, [sp, #12]
    1258:	mov	r0, r1
    125c:	bl	0 <free>
    1260:	mvn	r0, #0
    1264:	str	r0, [fp, #-4]
    1268:	b	12fc <coda_za_read_entry+0x714>
    126c:	ldr	r0, [fp, #-76]	; 0xffffffb4
    1270:	bl	0 <free>
    1274:	add	r0, sp, #100	; 0x64
    1278:	bl	0 <coda_inflateEnd>
    127c:	cmp	r0, #0
    1280:	beq	12f0 <coda_za_read_entry+0x708>
    1284:	ldr	r0, [sp, #124]	; 0x7c
    1288:	movw	r1, #0
    128c:	cmp	r0, r1
    1290:	beq	12c0 <coda_za_read_entry+0x6d8>
    1294:	ldr	r0, [fp, #-8]
    1298:	ldr	r0, [r0, #40]	; 0x28
    129c:	ldr	r0, [r0, #20]
    12a0:	ldr	r1, [sp, #124]	; 0x7c
    12a4:	movw	r2, #0
    12a8:	movt	r2, #0
    12ac:	str	r0, [sp, #8]
    12b0:	mov	r0, r2
    12b4:	ldr	r2, [sp, #8]
    12b8:	blx	r2
    12bc:	b	12e4 <coda_za_read_entry+0x6fc>
    12c0:	ldr	r0, [fp, #-8]
    12c4:	ldr	r0, [r0, #40]	; 0x28
    12c8:	ldr	r0, [r0, #20]
    12cc:	movw	r1, #0
    12d0:	movt	r1, #0
    12d4:	str	r0, [sp, #4]
    12d8:	mov	r0, r1
    12dc:	ldr	r1, [sp, #4]
    12e0:	blx	r1
    12e4:	mvn	r0, #0
    12e8:	str	r0, [fp, #-4]
    12ec:	b	12fc <coda_za_read_entry+0x714>
    12f0:	b	12f4 <coda_za_read_entry+0x70c>
    12f4:	movw	r0, #0
    12f8:	str	r0, [fp, #-4]
    12fc:	ldr	r0, [fp, #-4]
    1300:	mov	sp, fp
    1304:	pop	{fp, pc}
    1308:	.word	0x04034b50
