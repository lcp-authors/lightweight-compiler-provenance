
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_reopen>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #24
  10:	str	r0, [fp, #-16]
  14:	mov	r0, #56	; 0x38
  18:	bl	0 <malloc>
  1c:	mov	r3, r0
  20:	str	r3, [fp, #-8]
  24:	ldr	r3, [fp, #-8]
  28:	cmp	r3, #0
  2c:	bne	6c <coda_xml_reopen+0x6c>
  30:	mov	r3, #53	; 0x35
  34:	str	r3, [sp]
  38:	movw	r3, #0
  3c:	movt	r3, #0
  40:	mov	r2, #56	; 0x38
  44:	movw	r1, #0
  48:	movt	r1, #0
  4c:	mvn	r0, #0
  50:	bl	0 <coda_set_error>
  54:	ldr	r3, [fp, #-16]
  58:	ldr	r3, [r3]
  5c:	mov	r0, r3
  60:	bl	0 <coda_close>
  64:	mvn	r3, #0
  68:	b	188 <coda_xml_reopen+0x188>
  6c:	ldr	r3, [fp, #-8]
  70:	mov	r2, #0
  74:	str	r2, [r3]
  78:	ldr	r3, [fp, #-16]
  7c:	ldr	r3, [r3]
  80:	ldrd	r2, [r3, #8]
  84:	ldr	r1, [fp, #-8]
  88:	strd	r2, [r1, #8]
  8c:	ldr	r3, [fp, #-8]
  90:	mov	r2, #2
  94:	str	r2, [r3, #16]
  98:	ldr	r3, [fp, #-8]
  9c:	mov	r2, #0
  a0:	str	r2, [r3, #20]
  a4:	ldr	r3, [fp, #-8]
  a8:	mov	r2, #0
  ac:	str	r2, [r3, #24]
  b0:	ldr	r3, [fp, #-8]
  b4:	mov	r2, #0
  b8:	str	r2, [r3, #28]
  bc:	ldr	r3, [fp, #-8]
  c0:	mov	r2, #0
  c4:	str	r2, [r3, #32]
  c8:	ldr	r1, [fp, #-8]
  cc:	mov	r2, #0
  d0:	mov	r3, #0
  d4:	strd	r2, [r1, #40]	; 0x28
  d8:	ldr	r3, [fp, #-8]
  dc:	mov	r2, #0
  e0:	str	r2, [r3, #48]	; 0x30
  e4:	ldr	r3, [fp, #-16]
  e8:	ldr	r2, [r3]
  ec:	ldr	r3, [fp, #-8]
  f0:	str	r2, [r3, #52]	; 0x34
  f4:	ldr	r3, [fp, #-16]
  f8:	ldr	r3, [r3]
  fc:	ldr	r3, [r3]
 100:	mov	r0, r3
 104:	bl	0 <strdup>
 108:	mov	r3, r0
 10c:	mov	r2, r3
 110:	ldr	r3, [fp, #-8]
 114:	str	r2, [r3]
 118:	ldr	r3, [fp, #-8]
 11c:	ldr	r3, [r3]
 120:	cmp	r3, #0
 124:	bne	154 <coda_xml_reopen+0x154>
 128:	mov	r3, #72	; 0x48
 12c:	movw	r2, #0
 130:	movt	r2, #0
 134:	movw	r1, #0
 138:	movt	r1, #0
 13c:	mvn	r0, #0
 140:	bl	0 <coda_set_error>
 144:	ldr	r0, [fp, #-8]
 148:	bl	0 <coda_close>
 14c:	mvn	r3, #0
 150:	b	188 <coda_xml_reopen+0x188>
 154:	ldr	r0, [fp, #-8]
 158:	bl	0 <coda_xml_parse>
 15c:	mov	r3, r0
 160:	cmp	r3, #0
 164:	beq	178 <coda_xml_reopen+0x178>
 168:	ldr	r0, [fp, #-8]
 16c:	bl	0 <coda_close>
 170:	mvn	r3, #0
 174:	b	188 <coda_xml_reopen+0x188>
 178:	ldr	r3, [fp, #-16]
 17c:	ldr	r2, [fp, #-8]
 180:	str	r2, [r3]
 184:	mov	r3, #0
 188:	mov	r0, r3
 18c:	sub	sp, fp, #4
 190:	ldr	fp, [sp]
 194:	add	sp, sp, #4
 198:	pop	{pc}		; (ldr pc, [sp], #4)

0000019c <coda_xml_reopen_with_definition>:
 19c:	str	fp, [sp, #-8]!
 1a0:	str	lr, [sp, #4]
 1a4:	add	fp, sp, #4
 1a8:	sub	sp, sp, #16
 1ac:	str	r0, [fp, #-16]
 1b0:	str	r1, [fp, #-20]	; 0xffffffec
 1b4:	ldr	r3, [fp, #-16]
 1b8:	ldr	r3, [r3]
 1bc:	str	r3, [fp, #-8]
 1c0:	ldr	r3, [fp, #-20]	; 0xffffffec
 1c4:	cmp	r3, #0
 1c8:	bne	1ec <coda_xml_reopen_with_definition+0x50>
 1cc:	movw	r3, #0
 1d0:	movt	r3, #0
 1d4:	mov	r2, #92	; 0x5c
 1d8:	movw	r1, #0
 1dc:	movt	r1, #0
 1e0:	movw	r0, #0
 1e4:	movt	r0, #0
 1e8:	bl	0 <__assert_fail>
 1ec:	ldr	r3, [fp, #-8]
 1f0:	ldr	r3, [r3, #16]
 1f4:	cmp	r3, #2
 1f8:	beq	21c <coda_xml_reopen_with_definition+0x80>
 1fc:	movw	r3, #0
 200:	movt	r3, #0
 204:	mov	r2, #93	; 0x5d
 208:	movw	r1, #0
 20c:	movt	r1, #0
 210:	movw	r0, #0
 214:	movt	r0, #0
 218:	bl	0 <__assert_fail>
 21c:	ldr	r3, [fp, #-20]	; 0xffffffec
 220:	ldr	r3, [r3]
 224:	cmp	r3, #2
 228:	beq	24c <coda_xml_reopen_with_definition+0xb0>
 22c:	movw	r3, #0
 230:	movt	r3, #0
 234:	mov	r2, #94	; 0x5e
 238:	movw	r1, #0
 23c:	movt	r1, #0
 240:	movw	r0, #0
 244:	movt	r0, #0
 248:	bl	0 <__assert_fail>
 24c:	ldr	r3, [fp, #-8]
 250:	ldr	r3, [r3, #20]
 254:	mov	r0, r3
 258:	bl	0 <coda_dynamic_type_delete>
 25c:	ldr	r3, [fp, #-8]
 260:	mov	r2, #0
 264:	str	r2, [r3, #20]
 268:	ldr	r1, [fp, #-8]
 26c:	mov	r2, #0
 270:	mov	r3, #0
 274:	strd	r2, [r1, #40]	; 0x28
 278:	ldr	r3, [fp, #-8]
 27c:	ldr	r3, [r3, #48]	; 0x30
 280:	cmp	r3, #0
 284:	beq	2a4 <coda_xml_reopen_with_definition+0x108>
 288:	ldr	r3, [fp, #-8]
 28c:	ldr	r3, [r3, #48]	; 0x30
 290:	mov	r0, r3
 294:	bl	0 <free>
 298:	ldr	r3, [fp, #-8]
 29c:	mov	r2, #0
 2a0:	str	r2, [r3, #48]	; 0x30
 2a4:	ldr	r3, [fp, #-8]
 2a8:	ldr	r2, [fp, #-20]	; 0xffffffec
 2ac:	str	r2, [r3, #24]
 2b0:	ldr	r0, [fp, #-8]
 2b4:	bl	0 <coda_xml_parse>
 2b8:	mov	r3, r0
 2bc:	cmp	r3, #0
 2c0:	beq	2cc <coda_xml_reopen_with_definition+0x130>
 2c4:	mvn	r3, #0
 2c8:	b	2d0 <coda_xml_reopen_with_definition+0x134>
 2cc:	mov	r3, #0
 2d0:	mov	r0, r3
 2d4:	sub	sp, fp, #4
 2d8:	ldr	fp, [sp]
 2dc:	add	sp, sp, #4
 2e0:	pop	{pc}		; (ldr pc, [sp], #4)

000002e4 <coda_xml_close>:
 2e4:	str	fp, [sp, #-8]!
 2e8:	str	lr, [sp, #4]
 2ec:	add	fp, sp, #4
 2f0:	sub	sp, sp, #16
 2f4:	str	r0, [fp, #-16]
 2f8:	ldr	r3, [fp, #-16]
 2fc:	str	r3, [fp, #-8]
 300:	ldr	r3, [fp, #-8]
 304:	ldr	r3, [r3]
 308:	cmp	r3, #0
 30c:	beq	320 <coda_xml_close+0x3c>
 310:	ldr	r3, [fp, #-8]
 314:	ldr	r3, [r3]
 318:	mov	r0, r3
 31c:	bl	0 <free>
 320:	ldr	r3, [fp, #-8]
 324:	ldr	r3, [r3, #20]
 328:	cmp	r3, #0
 32c:	beq	340 <coda_xml_close+0x5c>
 330:	ldr	r3, [fp, #-8]
 334:	ldr	r3, [r3, #20]
 338:	mov	r0, r3
 33c:	bl	0 <coda_dynamic_type_delete>
 340:	ldr	r3, [fp, #-8]
 344:	ldr	r3, [r3, #48]	; 0x30
 348:	cmp	r3, #0
 34c:	beq	360 <coda_xml_close+0x7c>
 350:	ldr	r3, [fp, #-8]
 354:	ldr	r3, [r3, #48]	; 0x30
 358:	mov	r0, r3
 35c:	bl	0 <free>
 360:	ldr	r3, [fp, #-8]
 364:	ldr	r3, [r3, #52]	; 0x34
 368:	cmp	r3, #0
 36c:	beq	380 <coda_xml_close+0x9c>
 370:	ldr	r3, [fp, #-8]
 374:	ldr	r3, [r3, #52]	; 0x34
 378:	mov	r0, r3
 37c:	bl	0 <coda_bin_close>
 380:	ldr	r0, [fp, #-8]
 384:	bl	0 <free>
 388:	mov	r3, #0
 38c:	mov	r0, r3
 390:	sub	sp, fp, #4
 394:	ldr	fp, [sp]
 398:	add	sp, sp, #4
 39c:	pop	{pc}		; (ldr pc, [sp], #4)

000003a0 <coda_xml_cursor_set_product>:
 3a0:	push	{fp}		; (str fp, [sp, #-4]!)
 3a4:	add	fp, sp, #0
 3a8:	sub	sp, sp, #12
 3ac:	str	r0, [fp, #-8]
 3b0:	str	r1, [fp, #-12]
 3b4:	ldr	r3, [fp, #-8]
 3b8:	ldr	r2, [fp, #-12]
 3bc:	str	r2, [r3]
 3c0:	ldr	r3, [fp, #-8]
 3c4:	mov	r2, #1
 3c8:	str	r2, [r3, #4]
 3cc:	ldr	r3, [fp, #-12]
 3d0:	ldr	r2, [r3, #20]
 3d4:	ldr	r3, [fp, #-8]
 3d8:	str	r2, [r3, #8]
 3dc:	ldr	r3, [fp, #-8]
 3e0:	mvn	r2, #0
 3e4:	str	r2, [r3, #12]
 3e8:	ldr	r1, [fp, #-8]
 3ec:	mov	r2, #0
 3f0:	mov	r3, #0
 3f4:	strd	r2, [r1, #16]
 3f8:	mov	r3, #0
 3fc:	mov	r0, r3
 400:	add	sp, fp, #0
 404:	pop	{fp}		; (ldr fp, [sp], #4)
 408:	bx	lr
