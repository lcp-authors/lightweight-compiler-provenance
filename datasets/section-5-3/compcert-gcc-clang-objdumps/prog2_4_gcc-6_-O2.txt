
../compcert-repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

00010984 <.init>:
   10984:	push	{r3, lr}
   10988:	bl	10b1c <_start@@Base+0x3c>
   1098c:	pop	{r3, pc}

Disassembly of section .plt:

00010990 <strcmp@plt-0x14>:
   10990:	push	{lr}		; (str lr, [sp, #-4]!)
   10994:	ldr	lr, [pc, #4]	; 109a0 <strcmp@plt-0x4>
   10998:	add	lr, pc, lr
   1099c:	ldr	pc, [lr, #8]!
   109a0:	andeq	r2, r1, r0, ror #12

000109a4 <strcmp@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #73728	; 0x12000
   109ac:	ldr	pc, [ip, #1632]!	; 0x660

000109b0 <printf@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #73728	; 0x12000
   109b8:	ldr	pc, [ip, #1624]!	; 0x658

000109bc <free@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #73728	; 0x12000
   109c4:	ldr	pc, [ip, #1616]!	; 0x650

000109c8 <memcpy@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #73728	; 0x12000
   109d0:	ldr	pc, [ip, #1608]!	; 0x648

000109d4 <strdup@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #73728	; 0x12000
   109dc:	ldr	pc, [ip, #1600]!	; 0x640

000109e0 <strcpy@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #73728	; 0x12000
   109e8:	ldr	pc, [ip, #1592]!	; 0x638

000109ec <puts@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #73728	; 0x12000
   109f4:	ldr	pc, [ip, #1584]!	; 0x630

000109f8 <malloc@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #73728	; 0x12000
   10a00:	ldr	pc, [ip, #1576]!	; 0x628

00010a04 <__libc_start_main@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #73728	; 0x12000
   10a0c:	ldr	pc, [ip, #1568]!	; 0x620

00010a10 <__gmon_start__@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #73728	; 0x12000
   10a18:	ldr	pc, [ip, #1560]!	; 0x618

00010a1c <strlen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #73728	; 0x12000
   10a24:	ldr	pc, [ip, #1552]!	; 0x610

00010a28 <setvbuf@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #73728	; 0x12000
   10a30:	ldr	pc, [ip, #1544]!	; 0x608

00010a34 <putchar@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #73728	; 0x12000
   10a3c:	ldr	pc, [ip, #1536]!	; 0x600

00010a40 <abort@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #73728	; 0x12000
   10a48:	ldr	pc, [ip, #1528]!	; 0x5f8

Disassembly of section .text:

00010a4c <main@@Base>:
   10a4c:	ldr	r2, [pc, #124]	; 10ad0 <main@@Base+0x84>
   10a50:	mov	r3, #0
   10a54:	push	{r4, lr}
   10a58:	mov	r1, r3
   10a5c:	ldr	r0, [r2]
   10a60:	mov	r2, #2
   10a64:	bl	10a28 <setvbuf@plt>
   10a68:	ldr	r2, [pc, #100]	; 10ad4 <main@@Base+0x88>
   10a6c:	mov	r3, #0
   10a70:	mov	r1, r3
   10a74:	ldr	r0, [r2]
   10a78:	mov	r2, #2
   10a7c:	bl	10a28 <setvbuf@plt>
   10a80:	bl	10d1c <teste_lista_nova@@Base>
   10a84:	mov	r4, r0
   10a88:	bl	10da0 <teste_lista_insere@@Base>
   10a8c:	add	r4, r4, r0
   10a90:	bl	1109c <teste_lista_remove@@Base>
   10a94:	add	r4, r4, r0
   10a98:	bl	11234 <teste_lista_pesquisa@@Base>
   10a9c:	add	r4, r4, r0
   10aa0:	bl	113b4 <teste_lista_ordena@@Base>
   10aa4:	add	r4, r4, r0
   10aa8:	bl	11588 <teste_lista_inverte@@Base>
   10aac:	adds	r1, r4, r0
   10ab0:	beq	10ac4 <main@@Base+0x78>
   10ab4:	ldr	r0, [pc, #28]	; 10ad8 <main@@Base+0x8c>
   10ab8:	bl	109b0 <printf@plt>
   10abc:	mov	r0, #0
   10ac0:	pop	{r4, pc}
   10ac4:	ldr	r0, [pc, #16]	; 10adc <main@@Base+0x90>
   10ac8:	bl	109ec <puts@plt>
   10acc:	b	10abc <main@@Base+0x70>
   10ad0:	andeq	r3, r2, r4, asr r0
   10ad4:	andeq	r3, r2, r0, asr r0
   10ad8:	andeq	r2, r1, r4, lsl #1
   10adc:	andeq	r2, r1, ip, rrx

00010ae0 <_start@@Base>:
   10ae0:	mov	fp, #0
   10ae4:	mov	lr, #0
   10ae8:	pop	{r1}		; (ldr r1, [sp], #4)
   10aec:	mov	r2, sp
   10af0:	push	{r2}		; (str r2, [sp, #-4]!)
   10af4:	push	{r0}		; (str r0, [sp, #-4]!)
   10af8:	ldr	ip, [pc, #16]	; 10b10 <_start@@Base+0x30>
   10afc:	push	{ip}		; (str ip, [sp, #-4]!)
   10b00:	ldr	r0, [pc, #12]	; 10b14 <_start@@Base+0x34>
   10b04:	ldr	r3, [pc, #12]	; 10b18 <_start@@Base+0x38>
   10b08:	bl	10a04 <__libc_start_main@plt>
   10b0c:	bl	10a40 <abort@plt>
   10b10:	andeq	r1, r1, ip, asr fp
   10b14:	andeq	r0, r1, ip, asr #20
   10b18:	strdeq	r1, [r1], -ip
   10b1c:	ldr	r3, [pc, #20]	; 10b38 <_start@@Base+0x58>
   10b20:	ldr	r2, [pc, #20]	; 10b3c <_start@@Base+0x5c>
   10b24:	add	r3, pc, r3
   10b28:	ldr	r2, [r3, r2]
   10b2c:	cmp	r2, #0
   10b30:	bxeq	lr
   10b34:	b	10a10 <__gmon_start__@plt>
   10b38:	ldrdeq	r2, [r1], -r4
   10b3c:	andeq	r0, r0, r4, asr #32
   10b40:	ldr	r3, [pc, #28]	; 10b64 <_start@@Base+0x84>
   10b44:	ldr	r0, [pc, #28]	; 10b68 <_start@@Base+0x88>
   10b48:	sub	r3, r3, r0
   10b4c:	cmp	r3, #6
   10b50:	bxls	lr
   10b54:	ldr	r3, [pc, #16]	; 10b6c <_start@@Base+0x8c>
   10b58:	cmp	r3, #0
   10b5c:	bxeq	lr
   10b60:	bx	r3
   10b64:	andeq	r3, r2, r3, asr r0
   10b68:	andeq	r3, r2, r0, asr r0
   10b6c:	andeq	r0, r0, r0
   10b70:	ldr	r1, [pc, #36]	; 10b9c <_start@@Base+0xbc>
   10b74:	ldr	r0, [pc, #36]	; 10ba0 <_start@@Base+0xc0>
   10b78:	sub	r1, r1, r0
   10b7c:	asr	r1, r1, #2
   10b80:	add	r1, r1, r1, lsr #31
   10b84:	asrs	r1, r1, #1
   10b88:	bxeq	lr
   10b8c:	ldr	r3, [pc, #16]	; 10ba4 <_start@@Base+0xc4>
   10b90:	cmp	r3, #0
   10b94:	bxeq	lr
   10b98:	bx	r3
   10b9c:	andeq	r3, r2, r0, asr r0
   10ba0:	andeq	r3, r2, r0, asr r0
   10ba4:	andeq	r0, r0, r0
   10ba8:	push	{r4, lr}
   10bac:	ldr	r4, [pc, #24]	; 10bcc <_start@@Base+0xec>
   10bb0:	ldrb	r3, [r4]
   10bb4:	cmp	r3, #0
   10bb8:	popne	{r4, pc}
   10bbc:	bl	10b40 <_start@@Base+0x60>
   10bc0:	mov	r3, #1
   10bc4:	strb	r3, [r4]
   10bc8:	pop	{r4, pc}
   10bcc:	andeq	r3, r2, r8, asr r0
   10bd0:	ldr	r0, [pc, #40]	; 10c00 <_start@@Base+0x120>
   10bd4:	ldr	r3, [r0]
   10bd8:	cmp	r3, #0
   10bdc:	bne	10be4 <_start@@Base+0x104>
   10be0:	b	10b70 <_start@@Base+0x90>
   10be4:	ldr	r3, [pc, #24]	; 10c04 <_start@@Base+0x124>
   10be8:	cmp	r3, #0
   10bec:	beq	10be0 <_start@@Base+0x100>
   10bf0:	push	{r4, lr}
   10bf4:	blx	r3
   10bf8:	pop	{r4, lr}
   10bfc:	b	10b70 <_start@@Base+0x90>
   10c00:	andeq	r2, r2, r4, lsl pc
   10c04:	andeq	r0, r0, r0

00010c08 <_l@@Base>:
   10c08:	push	{r0, r1, r2, r3}
   10c0c:	mov	r0, #12
   10c10:	push	{r4, r5, r6, r7, r8, r9, lr}
   10c14:	sub	sp, sp, #12
   10c18:	mov	r4, #0
   10c1c:	ldr	r7, [sp, #40]	; 0x28
   10c20:	bl	109f8 <malloc@plt>
   10c24:	add	r3, sp, #44	; 0x2c
   10c28:	cmp	r7, #0
   10c2c:	str	r3, [sp, #4]
   10c30:	mov	r9, r0
   10c34:	str	r7, [r0, #8]
   10c38:	str	r4, [r0]
   10c3c:	str	r4, [r0, #4]
   10c40:	ble	10c9c <_l@@Base+0x94>
   10c44:	mov	r8, #12
   10c48:	ldr	r3, [sp, #4]
   10c4c:	cmp	r4, #0
   10c50:	add	r2, r3, #4
   10c54:	mov	r0, r8
   10c58:	str	r2, [sp, #4]
   10c5c:	ldr	r6, [r3]
   10c60:	beq	10cbc <_l@@Base+0xb4>
   10c64:	bl	109f8 <malloc@plt>
   10c68:	str	r0, [r5, #4]
   10c6c:	str	r5, [r0, #8]
   10c70:	mov	r5, r0
   10c74:	mov	r0, r6
   10c78:	bl	10a1c <strlen@plt>
   10c7c:	add	r4, r4, #1
   10c80:	add	r0, r0, #1
   10c84:	bl	109f8 <malloc@plt>
   10c88:	mov	r1, r6
   10c8c:	str	r0, [r5]
   10c90:	bl	109e0 <strcpy@plt>
   10c94:	cmp	r7, r4
   10c98:	bne	10c48 <_l@@Base+0x40>
   10c9c:	mov	r3, #0
   10ca0:	mov	r0, r9
   10ca4:	str	r5, [r9, #4]
   10ca8:	str	r3, [r5, #4]
   10cac:	add	sp, sp, #12
   10cb0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   10cb4:	add	sp, sp, #16
   10cb8:	bx	lr
   10cbc:	bl	109f8 <malloc@plt>
   10cc0:	str	r0, [r9]
   10cc4:	str	r4, [r0, #8]
   10cc8:	mov	r5, r0
   10ccc:	b	10c74 <_l@@Base+0x6c>

00010cd0 <_f@@Base>:
   10cd0:	cmp	r0, #0
   10cd4:	bxeq	lr
   10cd8:	ldr	r3, [r0]
   10cdc:	cmp	r3, #0
   10ce0:	cmpne	r1, #0
   10ce4:	movgt	r2, #1
   10ce8:	movle	r2, #0
   10cec:	ble	10d08 <_f@@Base+0x38>
   10cf0:	mov	r2, #0
   10cf4:	ldr	r3, [r3, #4]
   10cf8:	add	r2, r2, #1
   10cfc:	cmp	r3, #0
   10d00:	cmpne	r1, r2
   10d04:	bgt	10cf4 <_f@@Base+0x24>
   10d08:	cmp	r1, r2
   10d0c:	ldreq	r0, [r3]
   10d10:	ldrne	r0, [pc]	; 10d18 <_f@@Base+0x48>
   10d14:	bx	lr
   10d18:	andeq	r1, r1, r8, lsr pc

00010d1c <teste_lista_nova@@Base>:
   10d1c:	push	{r4, r5, r6, lr}
   10d20:	ldr	r0, [pc, #104]	; 10d90 <teste_lista_nova@@Base+0x74>
   10d24:	bl	109b0 <printf@plt>
   10d28:	bl	11778 <lista_nova@@Base>
   10d2c:	subs	r5, r0, #0
   10d30:	beq	10d78 <teste_lista_nova@@Base+0x5c>
   10d34:	ldr	r4, [r5, #8]
   10d38:	cmp	r4, #0
   10d3c:	bne	10d54 <teste_lista_nova@@Base+0x38>
   10d40:	bl	11794 <lista_apaga@@Base>
   10d44:	ldr	r0, [pc, #72]	; 10d94 <teste_lista_nova@@Base+0x78>
   10d48:	bl	109ec <puts@plt>
   10d4c:	mov	r0, r4
   10d50:	pop	{r4, r5, r6, pc}
   10d54:	ldr	r0, [pc, #60]	; 10d98 <teste_lista_nova@@Base+0x7c>
   10d58:	bl	109b0 <printf@plt>
   10d5c:	mov	r0, r5
   10d60:	bl	11794 <lista_apaga@@Base>
   10d64:	mov	r4, #1
   10d68:	mov	r0, #10
   10d6c:	bl	10a34 <putchar@plt>
   10d70:	mov	r0, r4
   10d74:	pop	{r4, r5, r6, pc}
   10d78:	ldr	r0, [pc, #28]	; 10d9c <teste_lista_nova@@Base+0x80>
   10d7c:	bl	109b0 <printf@plt>
   10d80:	mov	r0, #10
   10d84:	bl	10a34 <putchar@plt>
   10d88:	mov	r4, #1
   10d8c:	b	10d4c <teste_lista_nova@@Base+0x30>
   10d90:	andeq	r1, r1, ip, ror #22
   10d94:			; <UNDEFINED> instruction: 0x00011bb8
   10d98:	muleq	r1, r4, fp
   10d9c:	andeq	r1, r1, ip, ror fp

00010da0 <teste_lista_insere@@Base>:
   10da0:	ldr	r2, [pc, #712]	; 11070 <teste_lista_insere@@Base+0x2d0>
   10da4:	push	{r4, r5, r6, r7, r8, lr}
   10da8:	mov	r1, r2
   10dac:	mov	r0, #2
   10db0:	bl	10c08 <_l@@Base>
   10db4:	mov	r4, r0
   10db8:	ldr	r0, [pc, #692]	; 11074 <teste_lista_insere@@Base+0x2d4>
   10dbc:	bl	109b0 <printf@plt>
   10dc0:	ldr	r3, [r4]
   10dc4:	mov	r0, r4
   10dc8:	ldr	r1, [pc, #680]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10dcc:	ldr	r2, [r3, #4]
   10dd0:	bl	1181c <lista_insere@@Base>
   10dd4:	cmp	r0, #0
   10dd8:	movne	r5, #0
   10ddc:	beq	10fb8 <teste_lista_insere@@Base+0x218>
   10de0:	ldr	r3, [r4, #8]
   10de4:	cmp	r3, #3
   10de8:	beq	10e14 <teste_lista_insere@@Base+0x74>
   10dec:	ldr	r0, [pc, #648]	; 1107c <teste_lista_insere@@Base+0x2dc>
   10df0:	bl	109b0 <printf@plt>
   10df4:	ldr	r3, [r4, #8]
   10df8:	add	r5, r5, #1
   10dfc:	cmp	r3, #3
   10e00:	beq	10e14 <teste_lista_insere@@Base+0x74>
   10e04:	mov	r0, #10
   10e08:	bl	10a34 <putchar@plt>
   10e0c:	mov	r0, r5
   10e10:	pop	{r4, r5, r6, r7, r8, pc}
   10e14:	ldr	r6, [r4]
   10e18:	ldr	r1, [pc, #592]	; 11070 <teste_lista_insere@@Base+0x2d0>
   10e1c:	ldr	r0, [r6]
   10e20:	bl	109a4 <strcmp@plt>
   10e24:	cmp	r0, #0
   10e28:	bne	10e5c <teste_lista_insere@@Base+0xbc>
   10e2c:	ldr	r7, [r6, #4]
   10e30:	ldr	r1, [pc, #576]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10e34:	ldr	r0, [r7]
   10e38:	bl	109a4 <strcmp@plt>
   10e3c:	cmp	r0, #0
   10e40:	bne	10e5c <teste_lista_insere@@Base+0xbc>
   10e44:	ldr	r3, [r7, #4]
   10e48:	ldr	r1, [pc, #544]	; 11070 <teste_lista_insere@@Base+0x2d0>
   10e4c:	ldr	r0, [r3]
   10e50:	bl	109a4 <strcmp@plt>
   10e54:	cmp	r0, #0
   10e58:	beq	10e6c <teste_lista_insere@@Base+0xcc>
   10e5c:	ldr	r0, [pc, #540]	; 11080 <teste_lista_insere@@Base+0x2e0>
   10e60:	bl	109b0 <printf@plt>
   10e64:	ldr	r6, [r4]
   10e68:	add	r5, r5, #1
   10e6c:	mov	r2, r6
   10e70:	ldr	r1, [pc, #512]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10e74:	mov	r0, r4
   10e78:	bl	1181c <lista_insere@@Base>
   10e7c:	ldr	r3, [r4]
   10e80:	cmp	r3, r0
   10e84:	beq	10e94 <teste_lista_insere@@Base+0xf4>
   10e88:	ldr	r0, [pc, #500]	; 11084 <teste_lista_insere@@Base+0x2e4>
   10e8c:	bl	109b0 <printf@plt>
   10e90:	add	r5, r5, #1
   10e94:	ldr	r3, [r4, #8]
   10e98:	cmp	r3, #4
   10e9c:	beq	10eb8 <teste_lista_insere@@Base+0x118>
   10ea0:	ldr	r0, [pc, #480]	; 11088 <teste_lista_insere@@Base+0x2e8>
   10ea4:	bl	109b0 <printf@plt>
   10ea8:	ldr	r3, [r4, #8]
   10eac:	add	r5, r5, #1
   10eb0:	cmp	r3, #4
   10eb4:	bne	10e04 <teste_lista_insere@@Base+0x64>
   10eb8:	ldr	r6, [r4]
   10ebc:	ldr	r1, [pc, #436]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10ec0:	ldr	r0, [r6]
   10ec4:	bl	109a4 <strcmp@plt>
   10ec8:	cmp	r0, #0
   10ecc:	bne	10ee8 <teste_lista_insere@@Base+0x148>
   10ed0:	ldr	r6, [r6, #4]
   10ed4:	ldr	r1, [pc, #404]	; 11070 <teste_lista_insere@@Base+0x2d0>
   10ed8:	ldr	r0, [r6]
   10edc:	bl	109a4 <strcmp@plt>
   10ee0:	cmp	r0, #0
   10ee4:	beq	10fc8 <teste_lista_insere@@Base+0x228>
   10ee8:	ldr	r0, [pc, #400]	; 11080 <teste_lista_insere@@Base+0x2e0>
   10eec:	bl	109b0 <printf@plt>
   10ef0:	add	r5, r5, #1
   10ef4:	mov	r2, #0
   10ef8:	ldr	r1, [pc, #376]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10efc:	mov	r0, r4
   10f00:	bl	1181c <lista_insere@@Base>
   10f04:	ldr	r3, [r4, #8]
   10f08:	cmp	r3, #5
   10f0c:	beq	10f28 <teste_lista_insere@@Base+0x188>
   10f10:	ldr	r0, [pc, #372]	; 1108c <teste_lista_insere@@Base+0x2ec>
   10f14:	bl	109b0 <printf@plt>
   10f18:	ldr	r3, [r4, #8]
   10f1c:	add	r5, r5, #1
   10f20:	cmp	r3, #5
   10f24:	bne	10e04 <teste_lista_insere@@Base+0x64>
   10f28:	ldr	r3, [r4]
   10f2c:	ldr	r1, [pc, #324]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10f30:	ldr	r3, [r3, #4]
   10f34:	ldr	r3, [r3, #4]
   10f38:	ldr	r3, [r3, #4]
   10f3c:	ldr	r3, [r3, #4]
   10f40:	ldr	r0, [r3]
   10f44:	bl	109a4 <strcmp@plt>
   10f48:	cmp	r0, #0
   10f4c:	bne	11024 <teste_lista_insere@@Base+0x284>
   10f50:	mov	r0, r4
   10f54:	bl	11794 <lista_apaga@@Base>
   10f58:	bl	11778 <lista_nova@@Base>
   10f5c:	mov	r2, #0
   10f60:	ldr	r1, [pc, #272]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10f64:	mov	r4, r0
   10f68:	bl	1181c <lista_insere@@Base>
   10f6c:	ldr	r3, [r4, #8]
   10f70:	cmp	r3, #1
   10f74:	beq	10ffc <teste_lista_insere@@Base+0x25c>
   10f78:	ldr	r0, [pc, #272]	; 11090 <teste_lista_insere@@Base+0x2f0>
   10f7c:	bl	109b0 <printf@plt>
   10f80:	mov	r0, r4
   10f84:	bl	117f4 <lista_tamanho@@Base>
   10f88:	add	r5, r5, #1
   10f8c:	cmp	r0, #1
   10f90:	bne	10e04 <teste_lista_insere@@Base+0x64>
   10f94:	ldr	r3, [r4]
   10f98:	ldr	r1, [pc, #216]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10f9c:	ldr	r0, [r3]
   10fa0:	bl	109a4 <strcmp@plt>
   10fa4:	cmp	r0, #0
   10fa8:	bne	11058 <teste_lista_insere@@Base+0x2b8>
   10fac:	mov	r0, r4
   10fb0:	bl	11794 <lista_apaga@@Base>
   10fb4:	b	10e04 <teste_lista_insere@@Base+0x64>
   10fb8:	ldr	r0, [pc, #212]	; 11094 <teste_lista_insere@@Base+0x2f4>
   10fbc:	bl	109b0 <printf@plt>
   10fc0:	mov	r5, #1
   10fc4:	b	10de0 <teste_lista_insere@@Base+0x40>
   10fc8:	ldr	r6, [r6, #4]
   10fcc:	ldr	r1, [pc, #164]	; 11078 <teste_lista_insere@@Base+0x2d8>
   10fd0:	ldr	r0, [r6]
   10fd4:	bl	109a4 <strcmp@plt>
   10fd8:	cmp	r0, #0
   10fdc:	bne	10ee8 <teste_lista_insere@@Base+0x148>
   10fe0:	ldr	r3, [r6, #4]
   10fe4:	ldr	r1, [pc, #132]	; 11070 <teste_lista_insere@@Base+0x2d0>
   10fe8:	ldr	r0, [r3]
   10fec:	bl	109a4 <strcmp@plt>
   10ff0:	cmp	r0, #0
   10ff4:	beq	10ef4 <teste_lista_insere@@Base+0x154>
   10ff8:	b	10ee8 <teste_lista_insere@@Base+0x148>
   10ffc:	mov	r0, r4
   11000:	bl	117f4 <lista_tamanho@@Base>
   11004:	cmp	r0, #1
   11008:	beq	11034 <teste_lista_insere@@Base+0x294>
   1100c:	cmp	r5, #0
   11010:	bne	10e04 <teste_lista_insere@@Base+0x64>
   11014:	ldr	r0, [pc, #124]	; 11098 <teste_lista_insere@@Base+0x2f8>
   11018:	bl	109ec <puts@plt>
   1101c:	mov	r5, #0
   11020:	b	10e0c <teste_lista_insere@@Base+0x6c>
   11024:	ldr	r0, [pc, #84]	; 11080 <teste_lista_insere@@Base+0x2e0>
   11028:	bl	109b0 <printf@plt>
   1102c:	add	r5, r5, #1
   11030:	b	10f50 <teste_lista_insere@@Base+0x1b0>
   11034:	ldr	r3, [r4]
   11038:	ldr	r1, [pc, #56]	; 11078 <teste_lista_insere@@Base+0x2d8>
   1103c:	ldr	r0, [r3]
   11040:	bl	109a4 <strcmp@plt>
   11044:	cmp	r0, #0
   11048:	bne	11058 <teste_lista_insere@@Base+0x2b8>
   1104c:	mov	r0, r4
   11050:	bl	11794 <lista_apaga@@Base>
   11054:	b	1100c <teste_lista_insere@@Base+0x26c>
   11058:	ldr	r0, [pc, #32]	; 11080 <teste_lista_insere@@Base+0x2e0>
   1105c:	bl	109b0 <printf@plt>
   11060:	mov	r0, r4
   11064:	add	r5, r5, #1
   11068:	bl	11794 <lista_apaga@@Base>
   1106c:	b	10e04 <teste_lista_insere@@Base+0x64>
   11070:			; <UNDEFINED> instruction: 0x00011bbc
   11074:	andeq	r1, r1, r0, asr #23
   11078:	ldrdeq	r1, [r1], -r4
   1107c:	andeq	r1, r1, r8, lsl #24
   11080:	andeq	r1, r1, r4, asr #24
   11084:	andeq	r1, r1, ip, ror ip
   11088:	andeq	r1, r1, ip, lsr #25
   1108c:	andeq	r1, r1, r8, ror #25
   11090:	andeq	r1, r1, r4, lsr #26
   11094:	ldrdeq	r1, [r1], -ip
   11098:			; <UNDEFINED> instruction: 0x00011bb8

0001109c <teste_lista_remove@@Base>:
   1109c:	push	{r4, r5, r6, lr}
   110a0:	sub	sp, sp, #8
   110a4:	ldr	r2, [pc, #348]	; 11208 <teste_lista_remove@@Base+0x16c>
   110a8:	ldr	r3, [pc, #348]	; 1120c <teste_lista_remove@@Base+0x170>
   110ac:	ldr	r1, [pc, #348]	; 11210 <teste_lista_remove@@Base+0x174>
   110b0:	str	r2, [sp, #4]
   110b4:	str	r3, [sp]
   110b8:	ldr	r2, [pc, #340]	; 11214 <teste_lista_remove@@Base+0x178>
   110bc:	ldr	r3, [pc, #340]	; 11218 <teste_lista_remove@@Base+0x17c>
   110c0:	mov	r0, #5
   110c4:	bl	10c08 <_l@@Base>
   110c8:	mov	r4, r0
   110cc:	ldr	r0, [pc, #328]	; 1121c <teste_lista_remove@@Base+0x180>
   110d0:	bl	109b0 <printf@plt>
   110d4:	ldr	r3, [r4]
   110d8:	mov	r0, r4
   110dc:	ldr	r3, [r3, #4]
   110e0:	ldr	r3, [r3, #4]
   110e4:	ldr	r1, [r3, #4]
   110e8:	bl	118e0 <lista_remove@@Base>
   110ec:	ldr	r3, [r4, #4]
   110f0:	cmp	r3, r0
   110f4:	moveq	r5, #0
   110f8:	beq	11108 <teste_lista_remove@@Base+0x6c>
   110fc:	ldr	r0, [pc, #284]	; 11220 <teste_lista_remove@@Base+0x184>
   11100:	bl	109b0 <printf@plt>
   11104:	mov	r5, #1
   11108:	ldr	r3, [r4, #8]
   1110c:	cmp	r3, #4
   11110:	beq	11120 <teste_lista_remove@@Base+0x84>
   11114:	ldr	r0, [pc, #264]	; 11224 <teste_lista_remove@@Base+0x188>
   11118:	bl	109b0 <printf@plt>
   1111c:	add	r5, r5, #1
   11120:	ldr	r6, [r4]
   11124:	ldr	r1, [pc, #228]	; 11210 <teste_lista_remove@@Base+0x174>
   11128:	ldr	r0, [r6]
   1112c:	bl	109a4 <strcmp@plt>
   11130:	cmp	r0, #0
   11134:	bne	11150 <teste_lista_remove@@Base+0xb4>
   11138:	ldr	r6, [r6, #4]
   1113c:	ldr	r1, [pc, #208]	; 11214 <teste_lista_remove@@Base+0x178>
   11140:	ldr	r0, [r6]
   11144:	bl	109a4 <strcmp@plt>
   11148:	cmp	r0, #0
   1114c:	beq	11198 <teste_lista_remove@@Base+0xfc>
   11150:	ldr	r0, [pc, #208]	; 11228 <teste_lista_remove@@Base+0x18c>
   11154:	bl	109b0 <printf@plt>
   11158:	mov	r1, #0
   1115c:	mov	r0, r4
   11160:	bl	118e0 <lista_remove@@Base>
   11164:	add	r5, r5, #1
   11168:	cmp	r0, #0
   1116c:	beq	111fc <teste_lista_remove@@Base+0x160>
   11170:	ldr	r0, [pc, #180]	; 1122c <teste_lista_remove@@Base+0x190>
   11174:	bl	109b0 <printf@plt>
   11178:	mov	r0, r4
   1117c:	add	r5, r5, #1
   11180:	bl	11794 <lista_apaga@@Base>
   11184:	mov	r0, #10
   11188:	bl	10a34 <putchar@plt>
   1118c:	mov	r0, r5
   11190:	add	sp, sp, #8
   11194:	pop	{r4, r5, r6, pc}
   11198:	ldr	r6, [r6, #4]
   1119c:	ldr	r1, [pc, #116]	; 11218 <teste_lista_remove@@Base+0x17c>
   111a0:	ldr	r0, [r6]
   111a4:	bl	109a4 <strcmp@plt>
   111a8:	cmp	r0, #0
   111ac:	bne	11150 <teste_lista_remove@@Base+0xb4>
   111b0:	ldr	r3, [r6, #4]
   111b4:	ldr	r1, [pc, #76]	; 11208 <teste_lista_remove@@Base+0x16c>
   111b8:	ldr	r0, [r3]
   111bc:	bl	109a4 <strcmp@plt>
   111c0:	subs	r1, r0, #0
   111c4:	bne	11150 <teste_lista_remove@@Base+0xb4>
   111c8:	mov	r0, r4
   111cc:	bl	118e0 <lista_remove@@Base>
   111d0:	cmp	r0, #0
   111d4:	bne	11170 <teste_lista_remove@@Base+0xd4>
   111d8:	mov	r0, r4
   111dc:	bl	11794 <lista_apaga@@Base>
   111e0:	cmp	r5, #0
   111e4:	bne	11184 <teste_lista_remove@@Base+0xe8>
   111e8:	ldr	r0, [pc, #64]	; 11230 <teste_lista_remove@@Base+0x194>
   111ec:	bl	109ec <puts@plt>
   111f0:	mov	r0, r5
   111f4:	add	sp, sp, #8
   111f8:	pop	{r4, r5, r6, pc}
   111fc:	mov	r0, r4
   11200:	bl	11794 <lista_apaga@@Base>
   11204:	b	11184 <teste_lista_remove@@Base+0xe8>
   11208:	andeq	r1, r1, ip, ror #26
   1120c:	andeq	r1, r1, r0, ror sp
   11210:	andeq	r1, r1, r8, ror #26
   11214:	andeq	r1, r1, r4, ror #26
   11218:	andeq	r1, r1, r0, ror #26
   1121c:	andeq	r1, r1, r4, ror sp
   11220:	andeq	r1, r1, r8, lsl #27
   11224:	andeq	r1, r1, r4, asr #27
   11228:	andeq	r1, r1, r0, lsl #28
   1122c:	andeq	r1, r1, r8, lsr lr
   11230:			; <UNDEFINED> instruction: 0x00011bb8

00011234 <teste_lista_pesquisa@@Base>:
   11234:	push	{r4, r5, lr}
   11238:	sub	sp, sp, #20
   1123c:	ldr	r3, [pc, #340]	; 11398 <teste_lista_pesquisa@@Base+0x164>
   11240:	ldr	r5, [pc, #340]	; 1139c <teste_lista_pesquisa@@Base+0x168>
   11244:	mov	r2, r3
   11248:	mov	r1, r3
   1124c:	str	r3, [sp, #12]
   11250:	str	r3, [sp, #8]
   11254:	str	r3, [sp]
   11258:	str	r5, [sp, #4]
   1125c:	mov	r0, #7
   11260:	bl	10c08 <_l@@Base>
   11264:	mov	r4, r0
   11268:	ldr	r0, [pc, #304]	; 113a0 <teste_lista_pesquisa@@Base+0x16c>
   1126c:	bl	109b0 <printf@plt>
   11270:	mov	r1, r5
   11274:	mov	r0, r4
   11278:	mov	r2, #0
   1127c:	bl	1195c <lista_pesquisa@@Base>
   11280:	ldr	r3, [r4]
   11284:	ldr	r3, [r3, #4]
   11288:	ldr	r3, [r3, #4]
   1128c:	ldr	r3, [r3, #4]
   11290:	ldr	r3, [r3, #4]
   11294:	cmp	r3, r0
   11298:	moveq	r5, #0
   1129c:	beq	112ac <teste_lista_pesquisa@@Base+0x78>
   112a0:	ldr	r0, [pc, #252]	; 113a4 <teste_lista_pesquisa@@Base+0x170>
   112a4:	bl	109b0 <printf@plt>
   112a8:	mov	r5, #1
   112ac:	mov	r2, #0
   112b0:	ldr	r1, [pc, #240]	; 113a8 <teste_lista_pesquisa@@Base+0x174>
   112b4:	mov	r0, r4
   112b8:	bl	1195c <lista_pesquisa@@Base>
   112bc:	cmp	r0, #0
   112c0:	beq	112d0 <teste_lista_pesquisa@@Base+0x9c>
   112c4:	ldr	r0, [pc, #224]	; 113ac <teste_lista_pesquisa@@Base+0x178>
   112c8:	bl	109b0 <printf@plt>
   112cc:	add	r5, r5, #1
   112d0:	mov	r2, #1
   112d4:	ldr	r1, [pc, #188]	; 11398 <teste_lista_pesquisa@@Base+0x164>
   112d8:	mov	r0, r4
   112dc:	bl	1195c <lista_pesquisa@@Base>
   112e0:	ldr	r3, [r4]
   112e4:	ldr	r3, [r3, #4]
   112e8:	ldr	r3, [r3, #4]
   112ec:	ldr	r3, [r3, #4]
   112f0:	ldr	r3, [r3, #4]
   112f4:	ldr	r3, [r3, #4]
   112f8:	ldr	r3, [r3, #4]
   112fc:	cmp	r3, r0
   11300:	beq	1135c <teste_lista_pesquisa@@Base+0x128>
   11304:	ldr	r0, [pc, #152]	; 113a4 <teste_lista_pesquisa@@Base+0x170>
   11308:	bl	109b0 <printf@plt>
   1130c:	mov	r2, #1
   11310:	ldr	r1, [pc, #144]	; 113a8 <teste_lista_pesquisa@@Base+0x174>
   11314:	mov	r0, r4
   11318:	bl	1195c <lista_pesquisa@@Base>
   1131c:	add	r5, r5, #1
   11320:	cmp	r0, #0
   11324:	beq	11350 <teste_lista_pesquisa@@Base+0x11c>
   11328:	ldr	r0, [pc, #124]	; 113ac <teste_lista_pesquisa@@Base+0x178>
   1132c:	bl	109b0 <printf@plt>
   11330:	mov	r0, r4
   11334:	add	r5, r5, #1
   11338:	bl	11794 <lista_apaga@@Base>
   1133c:	mov	r0, #10
   11340:	bl	10a34 <putchar@plt>
   11344:	mov	r0, r5
   11348:	add	sp, sp, #20
   1134c:	pop	{r4, r5, pc}
   11350:	mov	r0, r4
   11354:	bl	11794 <lista_apaga@@Base>
   11358:	b	1133c <teste_lista_pesquisa@@Base+0x108>
   1135c:	mov	r2, #1
   11360:	ldr	r1, [pc, #64]	; 113a8 <teste_lista_pesquisa@@Base+0x174>
   11364:	mov	r0, r4
   11368:	bl	1195c <lista_pesquisa@@Base>
   1136c:	cmp	r0, #0
   11370:	bne	11328 <teste_lista_pesquisa@@Base+0xf4>
   11374:	mov	r0, r4
   11378:	bl	11794 <lista_apaga@@Base>
   1137c:	cmp	r5, #0
   11380:	bne	1133c <teste_lista_pesquisa@@Base+0x108>
   11384:	ldr	r0, [pc, #36]	; 113b0 <teste_lista_pesquisa@@Base+0x17c>
   11388:	bl	109ec <puts@plt>
   1138c:	mov	r0, r5
   11390:	add	sp, sp, #20
   11394:	pop	{r4, r5, pc}
   11398:			; <UNDEFINED> instruction: 0x00011bbc
   1139c:	andeq	r1, r1, ip, ror #28
   113a0:	andeq	r1, r1, r0, ror lr
   113a4:	andeq	r1, r1, r4, lsl #29
   113a8:	andeq	r1, r1, ip, asr #29
   113ac:	ldrdeq	r1, [r1], -r4
   113b0:			; <UNDEFINED> instruction: 0x00011bb8

000113b4 <teste_lista_ordena@@Base>:
   113b4:	push	{r4, r5, r6, lr}
   113b8:	sub	sp, sp, #8
   113bc:	ldr	r2, [pc, #412]	; 11560 <teste_lista_ordena@@Base+0x1ac>
   113c0:	ldr	r3, [pc, #412]	; 11564 <teste_lista_ordena@@Base+0x1b0>
   113c4:	ldr	r1, [pc, #412]	; 11568 <teste_lista_ordena@@Base+0x1b4>
   113c8:	str	r2, [sp, #4]
   113cc:	str	r3, [sp]
   113d0:	ldr	r2, [pc, #404]	; 1156c <teste_lista_ordena@@Base+0x1b8>
   113d4:	ldr	r3, [pc, #404]	; 11570 <teste_lista_ordena@@Base+0x1bc>
   113d8:	mov	r0, #5
   113dc:	bl	10c08 <_l@@Base>
   113e0:	mov	r5, r0
   113e4:	ldr	r0, [pc, #392]	; 11574 <teste_lista_ordena@@Base+0x1c0>
   113e8:	bl	109b0 <printf@plt>
   113ec:	mov	r0, #0
   113f0:	bl	119f8 <lista_ordena@@Base>
   113f4:	cmn	r0, #1
   113f8:	moveq	r4, #0
   113fc:	beq	1140c <teste_lista_ordena@@Base+0x58>
   11400:	ldr	r0, [pc, #368]	; 11578 <teste_lista_ordena@@Base+0x1c4>
   11404:	bl	109b0 <printf@plt>
   11408:	mov	r4, #1
   1140c:	mov	r0, r5
   11410:	bl	119f8 <lista_ordena@@Base>
   11414:	ldr	r6, [r5]
   11418:	ldr	r1, [pc, #328]	; 11568 <teste_lista_ordena@@Base+0x1b4>
   1141c:	ldr	r0, [r6]
   11420:	bl	109a4 <strcmp@plt>
   11424:	cmp	r0, #0
   11428:	bne	11444 <teste_lista_ordena@@Base+0x90>
   1142c:	ldr	r6, [r6, #4]
   11430:	ldr	r1, [pc, #308]	; 1156c <teste_lista_ordena@@Base+0x1b8>
   11434:	ldr	r0, [r6]
   11438:	bl	109a4 <strcmp@plt>
   1143c:	cmp	r0, #0
   11440:	beq	11514 <teste_lista_ordena@@Base+0x160>
   11444:	ldr	r0, [pc, #304]	; 1157c <teste_lista_ordena@@Base+0x1c8>
   11448:	bl	109b0 <printf@plt>
   1144c:	add	r4, r4, #1
   11450:	ldr	r6, [r5, #4]
   11454:	ldr	r1, [pc, #276]	; 11570 <teste_lista_ordena@@Base+0x1bc>
   11458:	ldr	r0, [r6]
   1145c:	bl	109a4 <strcmp@plt>
   11460:	cmp	r0, #0
   11464:	bne	11480 <teste_lista_ordena@@Base+0xcc>
   11468:	ldr	r6, [r6, #8]
   1146c:	ldr	r1, [pc, #236]	; 11560 <teste_lista_ordena@@Base+0x1ac>
   11470:	ldr	r0, [r6]
   11474:	bl	109a4 <strcmp@plt>
   11478:	cmp	r0, #0
   1147c:	beq	114a8 <teste_lista_ordena@@Base+0xf4>
   11480:	ldr	r0, [pc, #248]	; 11580 <teste_lista_ordena@@Base+0x1cc>
   11484:	bl	109b0 <printf@plt>
   11488:	mov	r0, r5
   1148c:	add	r4, r4, #1
   11490:	bl	11794 <lista_apaga@@Base>
   11494:	mov	r0, #10
   11498:	bl	10a34 <putchar@plt>
   1149c:	mov	r0, r4
   114a0:	add	sp, sp, #8
   114a4:	pop	{r4, r5, r6, pc}
   114a8:	ldr	r6, [r6, #8]
   114ac:	ldr	r1, [pc, #176]	; 11564 <teste_lista_ordena@@Base+0x1b0>
   114b0:	ldr	r0, [r6]
   114b4:	bl	109a4 <strcmp@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	11480 <teste_lista_ordena@@Base+0xcc>
   114c0:	ldr	r6, [r6, #8]
   114c4:	ldr	r1, [pc, #160]	; 1156c <teste_lista_ordena@@Base+0x1b8>
   114c8:	ldr	r0, [r6]
   114cc:	bl	109a4 <strcmp@plt>
   114d0:	cmp	r0, #0
   114d4:	bne	11480 <teste_lista_ordena@@Base+0xcc>
   114d8:	ldr	r3, [r6, #8]
   114dc:	ldr	r1, [pc, #132]	; 11568 <teste_lista_ordena@@Base+0x1b4>
   114e0:	ldr	r0, [r3]
   114e4:	bl	109a4 <strcmp@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	11480 <teste_lista_ordena@@Base+0xcc>
   114f0:	mov	r0, r5
   114f4:	bl	11794 <lista_apaga@@Base>
   114f8:	cmp	r4, #0
   114fc:	bne	11494 <teste_lista_ordena@@Base+0xe0>
   11500:	ldr	r0, [pc, #124]	; 11584 <teste_lista_ordena@@Base+0x1d0>
   11504:	bl	109ec <puts@plt>
   11508:	mov	r0, r4
   1150c:	add	sp, sp, #8
   11510:	pop	{r4, r5, r6, pc}
   11514:	ldr	r6, [r6, #4]
   11518:	ldr	r1, [pc, #68]	; 11564 <teste_lista_ordena@@Base+0x1b0>
   1151c:	ldr	r0, [r6]
   11520:	bl	109a4 <strcmp@plt>
   11524:	cmp	r0, #0
   11528:	bne	11444 <teste_lista_ordena@@Base+0x90>
   1152c:	ldr	r6, [r6, #4]
   11530:	ldr	r1, [pc, #40]	; 11560 <teste_lista_ordena@@Base+0x1ac>
   11534:	ldr	r0, [r6]
   11538:	bl	109a4 <strcmp@plt>
   1153c:	cmp	r0, #0
   11540:	bne	11444 <teste_lista_ordena@@Base+0x90>
   11544:	ldr	r3, [r6, #4]
   11548:	ldr	r1, [pc, #32]	; 11570 <teste_lista_ordena@@Base+0x1bc>
   1154c:	ldr	r0, [r3]
   11550:	bl	109a4 <strcmp@plt>
   11554:	cmp	r0, #0
   11558:	beq	11450 <teste_lista_ordena@@Base+0x9c>
   1155c:	b	11444 <teste_lista_ordena@@Base+0x90>
   11560:	andeq	r1, r1, r0, lsr #30
   11564:	andeq	r1, r1, r4, lsr #30
   11568:	andeq	r1, r1, ip, lsl pc
   1156c:	andeq	r1, r1, r8, lsl pc
   11570:	andeq	r1, r1, r4, lsl pc
   11574:	andeq	r1, r1, r8, lsr #30
   11578:	andeq	r1, r1, ip, lsr pc
   1157c:	andeq	r1, r1, ip, ror #30
   11580:	andeq	r1, r1, ip, lsr #31
   11584:			; <UNDEFINED> instruction: 0x00011bb8

00011588 <teste_lista_inverte@@Base>:
   11588:	push	{r4, r5, r6, lr}
   1158c:	sub	sp, sp, #8
   11590:	ldr	r2, [pc, #436]	; 1174c <teste_lista_inverte@@Base+0x1c4>
   11594:	ldr	r3, [pc, #436]	; 11750 <teste_lista_inverte@@Base+0x1c8>
   11598:	ldr	r1, [pc, #436]	; 11754 <teste_lista_inverte@@Base+0x1cc>
   1159c:	str	r2, [sp, #4]
   115a0:	str	r3, [sp]
   115a4:	ldr	r2, [pc, #428]	; 11758 <teste_lista_inverte@@Base+0x1d0>
   115a8:	ldr	r3, [pc, #428]	; 1175c <teste_lista_inverte@@Base+0x1d4>
   115ac:	mov	r0, #5
   115b0:	bl	10c08 <_l@@Base>
   115b4:	mov	r5, r0
   115b8:	ldr	r0, [pc, #416]	; 11760 <teste_lista_inverte@@Base+0x1d8>
   115bc:	bl	109b0 <printf@plt>
   115c0:	mov	r0, #0
   115c4:	bl	11a80 <lista_inverte@@Base>
   115c8:	cmn	r0, #1
   115cc:	moveq	r4, #0
   115d0:	beq	115e0 <teste_lista_inverte@@Base+0x58>
   115d4:	ldr	r0, [pc, #392]	; 11764 <teste_lista_inverte@@Base+0x1dc>
   115d8:	bl	109b0 <printf@plt>
   115dc:	mov	r4, #1
   115e0:	mov	r0, r5
   115e4:	bl	11a80 <lista_inverte@@Base>
   115e8:	ldr	r3, [r5, #8]
   115ec:	cmp	r3, #5
   115f0:	beq	11600 <teste_lista_inverte@@Base+0x78>
   115f4:	ldr	r0, [pc, #364]	; 11768 <teste_lista_inverte@@Base+0x1e0>
   115f8:	bl	109b0 <printf@plt>
   115fc:	add	r4, r4, #1
   11600:	ldr	r6, [r5]
   11604:	ldr	r1, [pc, #320]	; 1174c <teste_lista_inverte@@Base+0x1c4>
   11608:	ldr	r0, [r6]
   1160c:	bl	109a4 <strcmp@plt>
   11610:	cmp	r0, #0
   11614:	bne	11630 <teste_lista_inverte@@Base+0xa8>
   11618:	ldr	r6, [r6, #4]
   1161c:	ldr	r1, [pc, #300]	; 11750 <teste_lista_inverte@@Base+0x1c8>
   11620:	ldr	r0, [r6]
   11624:	bl	109a4 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	beq	11700 <teste_lista_inverte@@Base+0x178>
   11630:	ldr	r0, [pc, #308]	; 1176c <teste_lista_inverte@@Base+0x1e4>
   11634:	bl	109b0 <printf@plt>
   11638:	add	r4, r4, #1
   1163c:	ldr	r6, [r5, #4]
   11640:	ldr	r1, [pc, #268]	; 11754 <teste_lista_inverte@@Base+0x1cc>
   11644:	ldr	r0, [r6]
   11648:	bl	109a4 <strcmp@plt>
   1164c:	cmp	r0, #0
   11650:	bne	1166c <teste_lista_inverte@@Base+0xe4>
   11654:	ldr	r6, [r6, #8]
   11658:	ldr	r1, [pc, #248]	; 11758 <teste_lista_inverte@@Base+0x1d0>
   1165c:	ldr	r0, [r6]
   11660:	bl	109a4 <strcmp@plt>
   11664:	cmp	r0, #0
   11668:	beq	11694 <teste_lista_inverte@@Base+0x10c>
   1166c:	ldr	r0, [pc, #252]	; 11770 <teste_lista_inverte@@Base+0x1e8>
   11670:	bl	109b0 <printf@plt>
   11674:	mov	r0, r5
   11678:	add	r4, r4, #1
   1167c:	bl	11794 <lista_apaga@@Base>
   11680:	mov	r0, #10
   11684:	bl	10a34 <putchar@plt>
   11688:	mov	r0, r4
   1168c:	add	sp, sp, #8
   11690:	pop	{r4, r5, r6, pc}
   11694:	ldr	r6, [r6, #8]
   11698:	ldr	r1, [pc, #188]	; 1175c <teste_lista_inverte@@Base+0x1d4>
   1169c:	ldr	r0, [r6]
   116a0:	bl	109a4 <strcmp@plt>
   116a4:	cmp	r0, #0
   116a8:	bne	1166c <teste_lista_inverte@@Base+0xe4>
   116ac:	ldr	r6, [r6, #8]
   116b0:	ldr	r1, [pc, #152]	; 11750 <teste_lista_inverte@@Base+0x1c8>
   116b4:	ldr	r0, [r6]
   116b8:	bl	109a4 <strcmp@plt>
   116bc:	cmp	r0, #0
   116c0:	bne	1166c <teste_lista_inverte@@Base+0xe4>
   116c4:	ldr	r3, [r6, #8]
   116c8:	ldr	r1, [pc, #124]	; 1174c <teste_lista_inverte@@Base+0x1c4>
   116cc:	ldr	r0, [r3]
   116d0:	bl	109a4 <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	bne	1166c <teste_lista_inverte@@Base+0xe4>
   116dc:	mov	r0, r5
   116e0:	bl	11794 <lista_apaga@@Base>
   116e4:	cmp	r4, #0
   116e8:	bne	11680 <teste_lista_inverte@@Base+0xf8>
   116ec:	ldr	r0, [pc, #128]	; 11774 <teste_lista_inverte@@Base+0x1ec>
   116f0:	bl	109ec <puts@plt>
   116f4:	mov	r0, r4
   116f8:	add	sp, sp, #8
   116fc:	pop	{r4, r5, r6, pc}
   11700:	ldr	r6, [r6, #4]
   11704:	ldr	r1, [pc, #80]	; 1175c <teste_lista_inverte@@Base+0x1d4>
   11708:	ldr	r0, [r6]
   1170c:	bl	109a4 <strcmp@plt>
   11710:	cmp	r0, #0
   11714:	bne	11630 <teste_lista_inverte@@Base+0xa8>
   11718:	ldr	r6, [r6, #4]
   1171c:	ldr	r1, [pc, #52]	; 11758 <teste_lista_inverte@@Base+0x1d0>
   11720:	ldr	r0, [r6]
   11724:	bl	109a4 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	11630 <teste_lista_inverte@@Base+0xa8>
   11730:	ldr	r3, [r6, #4]
   11734:	ldr	r1, [pc, #24]	; 11754 <teste_lista_inverte@@Base+0x1cc>
   11738:	ldr	r0, [r3]
   1173c:	bl	109a4 <strcmp@plt>
   11740:	cmp	r0, #0
   11744:	beq	1163c <teste_lista_inverte@@Base+0xb4>
   11748:	b	11630 <teste_lista_inverte@@Base+0xa8>
   1174c:	andeq	r1, r1, r0, lsr #30
   11750:	andeq	r1, r1, r4, lsr #30
   11754:	andeq	r1, r1, ip, lsl pc
   11758:	andeq	r1, r1, r8, lsl pc
   1175c:	andeq	r1, r1, r4, lsl pc
   11760:	andeq	r1, r1, ip, ror #31
   11764:	andeq	r1, r1, ip, lsr pc
   11768:	andeq	r2, r1, r0
   1176c:	andeq	r2, r1, ip, lsr #32
   11770:	andeq	r1, r1, ip, lsr #31
   11774:			; <UNDEFINED> instruction: 0x00011bb8

00011778 <lista_nova@@Base>:
   11778:	push	{r4, lr}
   1177c:	mov	r0, #12
   11780:	bl	109f8 <malloc@plt>
   11784:	cmp	r0, #0
   11788:	movne	r3, #0
   1178c:	strne	r3, [r0, #8]
   11790:	pop	{r4, pc}

00011794 <lista_apaga@@Base>:
   11794:	push	{r4, r5, r6, lr}
   11798:	subs	r6, r0, #0
   1179c:	popeq	{r4, r5, r6, pc}
   117a0:	ldr	r3, [r6, #8]
   117a4:	cmp	r3, #0
   117a8:	beq	117e8 <lista_apaga@@Base+0x54>
   117ac:	ldr	r5, [r6]
   117b0:	cmp	r5, #0
   117b4:	beq	117e8 <lista_apaga@@Base+0x54>
   117b8:	ldr	r4, [r5, #4]
   117bc:	cmp	r4, #0
   117c0:	bne	117d0 <lista_apaga@@Base+0x3c>
   117c4:	b	117e8 <lista_apaga@@Base+0x54>
   117c8:	mov	r5, r4
   117cc:	ldr	r4, [r4, #4]
   117d0:	ldr	r0, [r5]
   117d4:	bl	109bc <free@plt>
   117d8:	mov	r0, r5
   117dc:	bl	109bc <free@plt>
   117e0:	cmp	r4, #0
   117e4:	bne	117c8 <lista_apaga@@Base+0x34>
   117e8:	mov	r0, r6
   117ec:	pop	{r4, r5, r6, lr}
   117f0:	b	109bc <free@plt>

000117f4 <lista_tamanho@@Base>:
   117f4:	cmp	r0, #0
   117f8:	ldrne	r0, [r0, #8]
   117fc:	mvneq	r0, #0
   11800:	bx	lr

00011804 <lista_inicio@@Base>:
   11804:	cmp	r0, #0
   11808:	ldrne	r0, [r0]
   1180c:	bx	lr

00011810 <lista_fim@@Base>:
   11810:	cmp	r0, #0
   11814:	ldrne	r0, [r0, #4]
   11818:	bx	lr

0001181c <lista_insere@@Base>:
   1181c:	push	{r4, r5, r6, r7, r8, lr}
   11820:	subs	r5, r0, #0
   11824:	beq	118d8 <lista_insere@@Base+0xbc>
   11828:	mov	r0, #12
   1182c:	mov	r7, r1
   11830:	mov	r6, r2
   11834:	bl	109f8 <malloc@plt>
   11838:	mov	r4, r0
   1183c:	mov	r0, r7
   11840:	bl	10a1c <strlen@plt>
   11844:	add	r8, r0, #1
   11848:	mov	r0, r8
   1184c:	bl	109f8 <malloc@plt>
   11850:	mov	r2, r8
   11854:	mov	r1, r7
   11858:	str	r0, [r4]
   1185c:	bl	109c8 <memcpy@plt>
   11860:	ldr	r3, [r5, #8]
   11864:	cmp	r3, #0
   11868:	beq	118ac <lista_insere@@Base+0x90>
   1186c:	cmp	r6, #0
   11870:	beq	118c0 <lista_insere@@Base+0xa4>
   11874:	ldr	r2, [r5]
   11878:	cmp	r6, r2
   1187c:	streq	r6, [r4, #4]
   11880:	ldrne	r2, [r6, #8]
   11884:	streq	r4, [r5]
   11888:	streq	r4, [r4, #8]
   1188c:	strne	r4, [r2, #4]
   11890:	strne	r2, [r4, #8]
   11894:	strne	r6, [r4, #4]
   11898:	strne	r4, [r6, #8]
   1189c:	add	r3, r3, #1
   118a0:	str	r3, [r5, #8]
   118a4:	mov	r0, r4
   118a8:	pop	{r4, r5, r6, r7, r8, pc}
   118ac:	str	r3, [r4, #8]
   118b0:	str	r3, [r4, #4]
   118b4:	str	r4, [r5]
   118b8:	str	r4, [r5, #4]
   118bc:	b	1189c <lista_insere@@Base+0x80>
   118c0:	ldr	r2, [r5, #4]
   118c4:	str	r6, [r4, #4]
   118c8:	str	r2, [r4, #8]
   118cc:	str	r4, [r2, #4]
   118d0:	str	r4, [r5, #4]
   118d4:	b	1189c <lista_insere@@Base+0x80>
   118d8:	mov	r4, r5
   118dc:	b	118a4 <lista_insere@@Base+0x88>

000118e0 <lista_remove@@Base>:
   118e0:	push	{r4, r5, r6, lr}
   118e4:	subs	r4, r1, #0
   118e8:	beq	11954 <lista_remove@@Base+0x74>
   118ec:	ldr	r3, [r0]
   118f0:	ldr	r6, [r4, #4]
   118f4:	cmp	r4, r3
   118f8:	moveq	r3, #0
   118fc:	streq	r3, [r6, #8]
   11900:	streq	r6, [r0]
   11904:	beq	1192c <lista_remove@@Base+0x4c>
   11908:	ldr	r3, [r0, #4]
   1190c:	cmp	r4, r3
   11910:	ldr	r3, [r4, #8]
   11914:	moveq	r2, #0
   11918:	strne	r6, [r3, #4]
   1191c:	ldrne	r2, [r4, #4]
   11920:	streq	r2, [r3, #4]
   11924:	streq	r3, [r0, #4]
   11928:	strne	r3, [r2, #8]
   1192c:	mov	r5, r0
   11930:	ldr	r0, [r4]
   11934:	bl	109bc <free@plt>
   11938:	mov	r0, r4
   1193c:	bl	109bc <free@plt>
   11940:	ldr	r3, [r5, #8]
   11944:	sub	r3, r3, #1
   11948:	str	r3, [r5, #8]
   1194c:	mov	r0, r6
   11950:	pop	{r4, r5, r6, pc}
   11954:	mov	r6, r4
   11958:	b	1194c <lista_remove@@Base+0x6c>

0001195c <lista_pesquisa@@Base>:
   1195c:	cmp	r0, #0
   11960:	push	{r4, r5, r6, r7, r8, lr}
   11964:	beq	119b4 <lista_pesquisa@@Base+0x58>
   11968:	cmp	r2, #0
   1196c:	mov	r6, r1
   11970:	mov	r5, r2
   11974:	beq	119c0 <lista_pesquisa@@Base+0x64>
   11978:	cmp	r2, #1
   1197c:	bne	119b4 <lista_pesquisa@@Base+0x58>
   11980:	ldmib	r0, {r4, r7}
   11984:	cmp	r7, #0
   11988:	ble	119b4 <lista_pesquisa@@Base+0x58>
   1198c:	mov	r5, #0
   11990:	mov	r1, r6
   11994:	ldr	r0, [r4]
   11998:	bl	109a4 <strcmp@plt>
   1199c:	add	r5, r5, #1
   119a0:	cmp	r0, #0
   119a4:	beq	119b8 <lista_pesquisa@@Base+0x5c>
   119a8:	cmp	r5, r7
   119ac:	ldr	r4, [r4, #8]
   119b0:	bne	11990 <lista_pesquisa@@Base+0x34>
   119b4:	mov	r4, #0
   119b8:	mov	r0, r4
   119bc:	pop	{r4, r5, r6, r7, r8, pc}
   119c0:	ldr	r7, [r0, #8]
   119c4:	ldr	r4, [r0]
   119c8:	cmp	r7, #0
   119cc:	ble	119b4 <lista_pesquisa@@Base+0x58>
   119d0:	mov	r1, r6
   119d4:	ldr	r0, [r4]
   119d8:	bl	109a4 <strcmp@plt>
   119dc:	add	r5, r5, #1
   119e0:	cmp	r0, #0
   119e4:	beq	119b8 <lista_pesquisa@@Base+0x5c>
   119e8:	cmp	r5, r7
   119ec:	ldr	r4, [r4, #4]
   119f0:	bne	119d0 <lista_pesquisa@@Base+0x74>
   119f4:	b	119b4 <lista_pesquisa@@Base+0x58>

000119f8 <lista_ordena@@Base>:
   119f8:	cmp	r0, #0
   119fc:	beq	11a78 <lista_ordena@@Base+0x80>
   11a00:	ldr	r3, [r0, #8]
   11a04:	cmp	r3, #0
   11a08:	beq	11a70 <lista_ordena@@Base+0x78>
   11a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a10:	ldm	r0, {r8, sl}
   11a14:	cmp	r8, sl
   11a18:	movne	r9, r8
   11a1c:	beq	11a68 <lista_ordena@@Base+0x70>
   11a20:	mov	r4, r9
   11a24:	ldr	r7, [r9, #4]
   11a28:	b	11a40 <lista_ordena@@Base+0x48>
   11a2c:	cmp	r4, r8
   11a30:	str	r5, [r4]
   11a34:	ldrne	r4, [r4, #8]
   11a38:	str	r6, [r7]
   11a3c:	ldrne	r7, [r4, #4]
   11a40:	ldr	r6, [r4]
   11a44:	ldr	r5, [r7]
   11a48:	mov	r0, r6
   11a4c:	mov	r1, r5
   11a50:	bl	109a4 <strcmp@plt>
   11a54:	cmp	r0, #0
   11a58:	bgt	11a2c <lista_ordena@@Base+0x34>
   11a5c:	ldr	r9, [r9, #4]
   11a60:	cmp	r9, sl
   11a64:	bne	11a20 <lista_ordena@@Base+0x28>
   11a68:	mov	r0, #0
   11a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a70:	mov	r0, #0
   11a74:	bx	lr
   11a78:	mvn	r0, #0
   11a7c:	bx	lr

00011a80 <lista_inverte@@Base>:
   11a80:	cmp	r0, #0
   11a84:	beq	11af4 <lista_inverte@@Base+0x74>
   11a88:	push	{r4, r5, r6, r7, r8, lr}
   11a8c:	ldr	r8, [r0, #8]
   11a90:	cmp	r8, #0
   11a94:	beq	11aec <lista_inverte@@Base+0x6c>
   11a98:	add	r8, r8, r8, lsr #31
   11a9c:	ldr	r5, [r0]
   11aa0:	asr	r8, r8, #1
   11aa4:	cmp	r8, #0
   11aa8:	ldr	r4, [r0, #4]
   11aac:	ble	11aec <lista_inverte@@Base+0x6c>
   11ab0:	mov	r6, #0
   11ab4:	ldr	r0, [r5]
   11ab8:	bl	109d4 <strdup@plt>
   11abc:	add	r6, r6, #1
   11ac0:	mov	r7, r0
   11ac4:	ldr	r0, [r4]
   11ac8:	bl	109d4 <strdup@plt>
   11acc:	str	r0, [r5]
   11ad0:	mov	r0, r7
   11ad4:	bl	109d4 <strdup@plt>
   11ad8:	cmp	r6, r8
   11adc:	ldr	r5, [r5, #4]
   11ae0:	str	r0, [r4]
   11ae4:	ldr	r4, [r4, #8]
   11ae8:	bne	11ab4 <lista_inverte@@Base+0x34>
   11aec:	mov	r0, #0
   11af0:	pop	{r4, r5, r6, r7, r8, pc}
   11af4:	mvn	r0, #0
   11af8:	bx	lr

00011afc <__libc_csu_init@@Base>:
   11afc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b00:	mov	r7, r0
   11b04:	ldr	r6, [pc, #72]	; 11b54 <__libc_csu_init@@Base+0x58>
   11b08:	ldr	r5, [pc, #72]	; 11b58 <__libc_csu_init@@Base+0x5c>
   11b0c:	add	r6, pc, r6
   11b10:	add	r5, pc, r5
   11b14:	sub	r6, r6, r5
   11b18:	mov	r8, r1
   11b1c:	mov	r9, r2
   11b20:	bl	10984 <strcmp@plt-0x20>
   11b24:	asrs	r6, r6, #2
   11b28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b2c:	mov	r4, #0
   11b30:	add	r4, r4, #1
   11b34:	ldr	r3, [r5], #4
   11b38:	mov	r2, r9
   11b3c:	mov	r1, r8
   11b40:	mov	r0, r7
   11b44:	blx	r3
   11b48:	cmp	r6, r4
   11b4c:	bne	11b30 <__libc_csu_init@@Base+0x34>
   11b50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b54:	strdeq	r1, [r1], -ip
   11b58:	strdeq	r1, [r1], -r4

00011b5c <__libc_csu_fini@@Base>:
   11b5c:	bx	lr

Disassembly of section .fini:

00011b60 <.fini>:
   11b60:	push	{r3, lr}
   11b64:	pop	{r3, pc}
