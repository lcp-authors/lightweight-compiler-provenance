
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/load_test/CMakeFiles/load_test.dir/load_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatbuffers_uoffset_cast_from_pe>:
       0:	push	{fp}		; (str fp, [sp, #-4]!)
       4:	add	fp, sp, #0
       8:	sub	sp, sp, #12
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	mov	r0, r3
      18:	add	sp, fp, #0
      1c:	pop	{fp}		; (ldr fp, [sp], #4)
      20:	bx	lr

00000024 <__flatbuffers_uoffset_read_from_pe>:
      24:	push	{fp, lr}
      28:	add	fp, sp, #4
      2c:	sub	sp, sp, #8
      30:	str	r0, [fp, #-8]
      34:	ldr	r3, [fp, #-8]
      38:	ldr	r3, [r3]
      3c:	mov	r0, r3
      40:	bl	0 <__flatbuffers_uoffset_cast_from_pe>
      44:	mov	r3, r0
      48:	mov	r0, r3
      4c:	sub	sp, fp, #4
      50:	pop	{fp, pc}

00000054 <__flatbuffers_soffset_cast_from_pe>:
      54:	push	{fp}		; (str fp, [sp, #-4]!)
      58:	add	fp, sp, #0
      5c:	sub	sp, sp, #12
      60:	str	r0, [fp, #-8]
      64:	ldr	r3, [fp, #-8]
      68:	mov	r0, r3
      6c:	add	sp, fp, #0
      70:	pop	{fp}		; (ldr fp, [sp], #4)
      74:	bx	lr

00000078 <__flatbuffers_soffset_read_from_pe>:
      78:	push	{fp, lr}
      7c:	add	fp, sp, #4
      80:	sub	sp, sp, #8
      84:	str	r0, [fp, #-8]
      88:	ldr	r3, [fp, #-8]
      8c:	ldr	r3, [r3]
      90:	mov	r0, r3
      94:	bl	54 <__flatbuffers_soffset_cast_from_pe>
      98:	mov	r3, r0
      9c:	mov	r0, r3
      a0:	sub	sp, fp, #4
      a4:	pop	{fp, pc}

000000a8 <__flatbuffers_voffset_cast_from_pe>:
      a8:	push	{fp}		; (str fp, [sp, #-4]!)
      ac:	add	fp, sp, #0
      b0:	sub	sp, sp, #12
      b4:	mov	r3, r0
      b8:	strh	r3, [fp, #-6]
      bc:	ldrh	r3, [fp, #-6]
      c0:	mov	r0, r3
      c4:	add	sp, fp, #0
      c8:	pop	{fp}		; (ldr fp, [sp], #4)
      cc:	bx	lr

000000d0 <__flatbuffers_voffset_read_from_pe>:
      d0:	push	{fp, lr}
      d4:	add	fp, sp, #4
      d8:	sub	sp, sp, #8
      dc:	str	r0, [fp, #-8]
      e0:	ldr	r3, [fp, #-8]
      e4:	ldrh	r3, [r3]
      e8:	mov	r0, r3
      ec:	bl	a8 <__flatbuffers_voffset_cast_from_pe>
      f0:	mov	r3, r0
      f4:	mov	r0, r3
      f8:	sub	sp, fp, #4
      fc:	pop	{fp, pc}

00000100 <__flatbuffers_thash_cast_from_pe>:
     100:	push	{fp}		; (str fp, [sp, #-4]!)
     104:	add	fp, sp, #0
     108:	sub	sp, sp, #12
     10c:	str	r0, [fp, #-8]
     110:	ldr	r3, [fp, #-8]
     114:	mov	r0, r3
     118:	add	sp, fp, #0
     11c:	pop	{fp}		; (ldr fp, [sp], #4)
     120:	bx	lr

00000124 <__flatbuffers_thash_cast_from_le>:
     124:	push	{fp}		; (str fp, [sp, #-4]!)
     128:	add	fp, sp, #0
     12c:	sub	sp, sp, #12
     130:	str	r0, [fp, #-8]
     134:	ldr	r3, [fp, #-8]
     138:	mov	r0, r3
     13c:	add	sp, fp, #0
     140:	pop	{fp}		; (ldr fp, [sp], #4)
     144:	bx	lr

00000148 <__flatbuffers_thash_read_from_pe>:
     148:	push	{fp, lr}
     14c:	add	fp, sp, #4
     150:	sub	sp, sp, #8
     154:	str	r0, [fp, #-8]
     158:	ldr	r3, [fp, #-8]
     15c:	ldr	r3, [r3]
     160:	mov	r0, r3
     164:	bl	100 <__flatbuffers_thash_cast_from_pe>
     168:	mov	r3, r0
     16c:	mov	r0, r3
     170:	sub	sp, fp, #4
     174:	pop	{fp, pc}

00000178 <flatbuffers_vec_len>:
     178:	push	{fp, lr}
     17c:	add	fp, sp, #4
     180:	sub	sp, sp, #8
     184:	str	r0, [fp, #-8]
     188:	ldr	r3, [fp, #-8]
     18c:	cmp	r3, #0
     190:	beq	1ac <flatbuffers_vec_len+0x34>
     194:	ldr	r3, [fp, #-8]
     198:	sub	r3, r3, #4
     19c:	mov	r0, r3
     1a0:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     1a4:	mov	r3, r0
     1a8:	b	1b0 <flatbuffers_vec_len+0x38>
     1ac:	mov	r3, #0
     1b0:	mov	r0, r3
     1b4:	sub	sp, fp, #4
     1b8:	pop	{fp, pc}

000001bc <flatbuffers_string_len>:
     1bc:	push	{fp, lr}
     1c0:	add	fp, sp, #4
     1c4:	sub	sp, sp, #8
     1c8:	str	r0, [fp, #-8]
     1cc:	ldr	r3, [fp, #-8]
     1d0:	cmp	r3, #0
     1d4:	beq	1f0 <flatbuffers_string_len+0x34>
     1d8:	ldr	r3, [fp, #-8]
     1dc:	sub	r3, r3, #4
     1e0:	mov	r0, r3
     1e4:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     1e8:	mov	r3, r0
     1ec:	b	1f4 <flatbuffers_string_len+0x38>
     1f0:	mov	r3, #0
     1f4:	mov	r0, r3
     1f8:	sub	sp, fp, #4
     1fc:	pop	{fp, pc}

00000200 <flatbuffers_uint8_vec_len>:
     200:	push	{fp, lr}
     204:	add	fp, sp, #4
     208:	sub	sp, sp, #8
     20c:	str	r0, [fp, #-8]
     210:	ldr	r0, [fp, #-8]
     214:	bl	178 <flatbuffers_vec_len>
     218:	mov	r3, r0
     21c:	mov	r0, r3
     220:	sub	sp, fp, #4
     224:	pop	{fp, pc}

00000228 <flatbuffers_has_identifier>:
     228:	push	{fp, lr}
     22c:	add	fp, sp, #4
     230:	sub	sp, sp, #16
     234:	str	r0, [fp, #-16]
     238:	str	r1, [fp, #-20]	; 0xffffffec
     23c:	mov	r3, #0
     240:	str	r3, [fp, #-12]
     244:	ldr	r3, [fp, #-20]	; 0xffffffec
     248:	cmp	r3, #0
     24c:	bne	258 <flatbuffers_has_identifier+0x30>
     250:	mov	r3, #1
     254:	b	2bc <flatbuffers_has_identifier+0x94>
     258:	sub	r3, fp, #12
     25c:	mov	r2, #4
     260:	ldr	r1, [fp, #-20]	; 0xffffffec
     264:	mov	r0, r3
     268:	bl	0 <strncpy>
     26c:	ldr	r3, [fp, #-12]
     270:	mov	r0, r3
     274:	bl	124 <__flatbuffers_thash_cast_from_le>
     278:	mov	r3, r0
     27c:	str	r3, [fp, #-12]
     280:	ldr	r3, [fp, #-16]
     284:	add	r3, r3, #4
     288:	mov	r0, r3
     28c:	bl	148 <__flatbuffers_thash_read_from_pe>
     290:	str	r0, [fp, #-8]
     294:	ldr	r3, [fp, #-12]
     298:	cmp	r3, #0
     29c:	beq	2b0 <flatbuffers_has_identifier+0x88>
     2a0:	ldr	r3, [fp, #-12]
     2a4:	ldr	r2, [fp, #-8]
     2a8:	cmp	r2, r3
     2ac:	bne	2b8 <flatbuffers_has_identifier+0x90>
     2b0:	mov	r3, #1
     2b4:	b	2bc <flatbuffers_has_identifier+0x94>
     2b8:	mov	r3, #0
     2bc:	mov	r0, r3
     2c0:	sub	sp, fp, #4
     2c4:	pop	{fp, pc}

000002c8 <MyGame_Example_Monster_vec_len>:
     2c8:	push	{fp, lr}
     2cc:	add	fp, sp, #4
     2d0:	sub	sp, sp, #8
     2d4:	str	r0, [fp, #-8]
     2d8:	ldr	r3, [fp, #-8]
     2dc:	cmp	r3, #0
     2e0:	beq	2fc <MyGame_Example_Monster_vec_len+0x34>
     2e4:	ldr	r3, [fp, #-8]
     2e8:	sub	r3, r3, #4
     2ec:	mov	r0, r3
     2f0:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     2f4:	mov	r3, r0
     2f8:	b	300 <MyGame_Example_Monster_vec_len+0x38>
     2fc:	mov	r3, #0
     300:	mov	r0, r3
     304:	sub	sp, fp, #4
     308:	pop	{fp, pc}

0000030c <MyGame_Example_Monster_vec_at>:
     30c:	push	{fp, lr}
     310:	add	fp, sp, #4
     314:	sub	sp, sp, #16
     318:	str	r0, [fp, #-16]
     31c:	str	r1, [fp, #-20]	; 0xffffffec
     320:	ldr	r3, [fp, #-20]	; 0xffffffec
     324:	lsl	r3, r3, #2
     328:	ldr	r2, [fp, #-16]
     32c:	add	r3, r2, r3
     330:	str	r3, [fp, #-8]
     334:	ldr	r0, [fp, #-16]
     338:	bl	178 <flatbuffers_vec_len>
     33c:	mov	r2, r0
     340:	ldr	r3, [fp, #-20]	; 0xffffffec
     344:	cmp	r2, r3
     348:	bhi	360 <MyGame_Example_Monster_vec_at+0x54>
     34c:	ldr	r3, [pc, #44]	; 380 <MyGame_Example_Monster_vec_at+0x74>
     350:	ldr	r2, [pc, #44]	; 384 <MyGame_Example_Monster_vec_at+0x78>
     354:	ldr	r1, [pc, #44]	; 388 <MyGame_Example_Monster_vec_at+0x7c>
     358:	ldr	r0, [pc, #44]	; 38c <MyGame_Example_Monster_vec_at+0x80>
     35c:	bl	0 <__assert_fail>
     360:	ldr	r0, [fp, #-8]
     364:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     368:	mov	r2, r0
     36c:	ldr	r3, [fp, #-8]
     370:	add	r3, r3, r2
     374:	mov	r0, r3
     378:	sub	sp, fp, #4
     37c:	pop	{fp, pc}
     380:	.word	0x0000055c
     384:	.word	0x000002b5
     388:	.word	0x00000004
     38c:	.word	0x0000006c

00000390 <MyGame_Example_Monster_as_root>:
     390:	push	{fp, lr}
     394:	add	fp, sp, #4
     398:	sub	sp, sp, #16
     39c:	str	r0, [fp, #-16]
     3a0:	ldr	r3, [pc, #76]	; 3f4 <MyGame_Example_Monster_as_root+0x64>
     3a4:	str	r3, [fp, #-8]
     3a8:	ldr	r3, [fp, #-16]
     3ac:	cmp	r3, #0
     3b0:	beq	3e4 <MyGame_Example_Monster_as_root+0x54>
     3b4:	ldr	r1, [fp, #-8]
     3b8:	ldr	r0, [fp, #-16]
     3bc:	bl	228 <flatbuffers_has_identifier>
     3c0:	mov	r3, r0
     3c4:	cmp	r3, #0
     3c8:	beq	3e4 <MyGame_Example_Monster_as_root+0x54>
     3cc:	ldr	r0, [fp, #-16]
     3d0:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     3d4:	mov	r2, r0
     3d8:	ldr	r3, [fp, #-16]
     3dc:	add	r3, r3, r2
     3e0:	b	3e8 <MyGame_Example_Monster_as_root+0x58>
     3e4:	mov	r3, #0
     3e8:	mov	r0, r3
     3ec:	sub	sp, fp, #4
     3f0:	pop	{fp, pc}
     3f4:	.word	0x000000a4

000003f8 <MyGame_Example_Monster_name>:
     3f8:	push	{fp, lr}
     3fc:	add	fp, sp, #4
     400:	sub	sp, sp, #24
     404:	str	r0, [fp, #-24]	; 0xffffffe8
     408:	mov	r3, #0
     40c:	strh	r3, [fp, #-6]
     410:	ldr	r3, [fp, #-24]	; 0xffffffe8
     414:	cmp	r3, #0
     418:	bne	430 <MyGame_Example_Monster_name+0x38>
     41c:	ldr	r3, [pc, #208]	; 4f4 <MyGame_Example_Monster_name+0xfc>
     420:	ldr	r2, [pc, #208]	; 4f8 <MyGame_Example_Monster_name+0x100>
     424:	ldr	r1, [pc, #208]	; 4fc <MyGame_Example_Monster_name+0x104>
     428:	ldr	r0, [pc, #208]	; 500 <MyGame_Example_Monster_name+0x108>
     42c:	bl	0 <__assert_fail>
     430:	mov	r3, #3
     434:	strh	r3, [fp, #-8]
     438:	ldr	r0, [fp, #-24]	; 0xffffffe8
     43c:	bl	78 <__flatbuffers_soffset_read_from_pe>
     440:	mov	r3, r0
     444:	rsb	r3, r3, #0
     448:	ldr	r2, [fp, #-24]	; 0xffffffe8
     44c:	add	r3, r2, r3
     450:	str	r3, [fp, #-12]
     454:	ldr	r0, [fp, #-12]
     458:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     45c:	mov	r3, r0
     460:	mov	r2, r3
     464:	ldrh	r3, [fp, #-8]
     468:	add	r3, r3, #3
     46c:	lsl	r3, r3, #1
     470:	cmp	r2, r3
     474:	bcc	49c <MyGame_Example_Monster_name+0xa4>
     478:	ldrh	r3, [fp, #-8]
     47c:	add	r3, r3, #2
     480:	lsl	r3, r3, #1
     484:	ldr	r2, [fp, #-12]
     488:	add	r3, r2, r3
     48c:	mov	r0, r3
     490:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     494:	mov	r3, r0
     498:	strh	r3, [fp, #-6]
     49c:	ldrh	r3, [fp, #-6]
     4a0:	cmp	r3, #0
     4a4:	beq	4d4 <MyGame_Example_Monster_name+0xdc>
     4a8:	ldrh	r3, [fp, #-6]
     4ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
     4b0:	add	r3, r2, r3
     4b4:	str	r3, [fp, #-16]
     4b8:	ldr	r0, [fp, #-16]
     4bc:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     4c0:	mov	r3, r0
     4c4:	add	r3, r3, #4
     4c8:	ldr	r2, [fp, #-16]
     4cc:	add	r3, r2, r3
     4d0:	b	4e8 <MyGame_Example_Monster_name+0xf0>
     4d4:	ldr	r3, [pc, #24]	; 4f4 <MyGame_Example_Monster_name+0xfc>
     4d8:	ldr	r2, [pc, #24]	; 4f8 <MyGame_Example_Monster_name+0x100>
     4dc:	ldr	r1, [pc, #24]	; 4fc <MyGame_Example_Monster_name+0x104>
     4e0:	ldr	r0, [pc, #28]	; 504 <MyGame_Example_Monster_name+0x10c>
     4e4:	bl	0 <__assert_fail>
     4e8:	mov	r0, r3
     4ec:	sub	sp, fp, #4
     4f0:	pop	{fp, pc}
     4f4:	.word	0x000004e8
     4f8:	.word	0x000002bb
     4fc:	.word	0x00000004
     500:	.word	0x000000ac
     504:	.word	0x000000d4

00000508 <MyGame_Example_Monster_inventory>:
     508:	push	{fp, lr}
     50c:	add	fp, sp, #4
     510:	sub	sp, sp, #24
     514:	str	r0, [fp, #-24]	; 0xffffffe8
     518:	mov	r3, #0
     51c:	strh	r3, [fp, #-6]
     520:	ldr	r3, [fp, #-24]	; 0xffffffe8
     524:	cmp	r3, #0
     528:	bne	540 <MyGame_Example_Monster_inventory+0x38>
     52c:	ldr	r3, [pc, #192]	; 5f4 <MyGame_Example_Monster_inventory+0xec>
     530:	ldr	r2, [pc, #192]	; 5f8 <MyGame_Example_Monster_inventory+0xf0>
     534:	ldr	r1, [pc, #192]	; 5fc <MyGame_Example_Monster_inventory+0xf4>
     538:	ldr	r0, [pc, #192]	; 600 <MyGame_Example_Monster_inventory+0xf8>
     53c:	bl	0 <__assert_fail>
     540:	mov	r3, #5
     544:	strh	r3, [fp, #-8]
     548:	ldr	r0, [fp, #-24]	; 0xffffffe8
     54c:	bl	78 <__flatbuffers_soffset_read_from_pe>
     550:	mov	r3, r0
     554:	rsb	r3, r3, #0
     558:	ldr	r2, [fp, #-24]	; 0xffffffe8
     55c:	add	r3, r2, r3
     560:	str	r3, [fp, #-12]
     564:	ldr	r0, [fp, #-12]
     568:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     56c:	mov	r3, r0
     570:	mov	r2, r3
     574:	ldrh	r3, [fp, #-8]
     578:	add	r3, r3, #3
     57c:	lsl	r3, r3, #1
     580:	cmp	r2, r3
     584:	bcc	5ac <MyGame_Example_Monster_inventory+0xa4>
     588:	ldrh	r3, [fp, #-8]
     58c:	add	r3, r3, #2
     590:	lsl	r3, r3, #1
     594:	ldr	r2, [fp, #-12]
     598:	add	r3, r2, r3
     59c:	mov	r0, r3
     5a0:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     5a4:	mov	r3, r0
     5a8:	strh	r3, [fp, #-6]
     5ac:	ldrh	r3, [fp, #-6]
     5b0:	cmp	r3, #0
     5b4:	beq	5e4 <MyGame_Example_Monster_inventory+0xdc>
     5b8:	ldrh	r3, [fp, #-6]
     5bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     5c0:	add	r3, r2, r3
     5c4:	str	r3, [fp, #-16]
     5c8:	ldr	r0, [fp, #-16]
     5cc:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     5d0:	mov	r3, r0
     5d4:	add	r3, r3, #4
     5d8:	ldr	r2, [fp, #-16]
     5dc:	add	r3, r2, r3
     5e0:	b	5e8 <MyGame_Example_Monster_inventory+0xe0>
     5e4:	mov	r3, #0
     5e8:	mov	r0, r3
     5ec:	sub	sp, fp, #4
     5f0:	pop	{fp, pc}
     5f4:	.word	0x00000504
     5f8:	.word	0x000002c2
     5fc:	.word	0x00000004
     600:	.word	0x000000ac

00000604 <MyGame_Example_Monster_testarrayoftables>:
     604:	push	{fp, lr}
     608:	add	fp, sp, #4
     60c:	sub	sp, sp, #24
     610:	str	r0, [fp, #-24]	; 0xffffffe8
     614:	mov	r3, #0
     618:	strh	r3, [fp, #-6]
     61c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     620:	cmp	r3, #0
     624:	bne	63c <MyGame_Example_Monster_testarrayoftables+0x38>
     628:	ldr	r3, [pc, #192]	; 6f0 <MyGame_Example_Monster_testarrayoftables+0xec>
     62c:	ldr	r2, [pc, #192]	; 6f4 <MyGame_Example_Monster_testarrayoftables+0xf0>
     630:	ldr	r1, [pc, #192]	; 6f8 <MyGame_Example_Monster_testarrayoftables+0xf4>
     634:	ldr	r0, [pc, #192]	; 6fc <MyGame_Example_Monster_testarrayoftables+0xf8>
     638:	bl	0 <__assert_fail>
     63c:	mov	r3, #11
     640:	strh	r3, [fp, #-8]
     644:	ldr	r0, [fp, #-24]	; 0xffffffe8
     648:	bl	78 <__flatbuffers_soffset_read_from_pe>
     64c:	mov	r3, r0
     650:	rsb	r3, r3, #0
     654:	ldr	r2, [fp, #-24]	; 0xffffffe8
     658:	add	r3, r2, r3
     65c:	str	r3, [fp, #-12]
     660:	ldr	r0, [fp, #-12]
     664:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     668:	mov	r3, r0
     66c:	mov	r2, r3
     670:	ldrh	r3, [fp, #-8]
     674:	add	r3, r3, #3
     678:	lsl	r3, r3, #1
     67c:	cmp	r2, r3
     680:	bcc	6a8 <MyGame_Example_Monster_testarrayoftables+0xa4>
     684:	ldrh	r3, [fp, #-8]
     688:	add	r3, r3, #2
     68c:	lsl	r3, r3, #1
     690:	ldr	r2, [fp, #-12]
     694:	add	r3, r2, r3
     698:	mov	r0, r3
     69c:	bl	d0 <__flatbuffers_voffset_read_from_pe>
     6a0:	mov	r3, r0
     6a4:	strh	r3, [fp, #-6]
     6a8:	ldrh	r3, [fp, #-6]
     6ac:	cmp	r3, #0
     6b0:	beq	6e0 <MyGame_Example_Monster_testarrayoftables+0xdc>
     6b4:	ldrh	r3, [fp, #-6]
     6b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6bc:	add	r3, r2, r3
     6c0:	str	r3, [fp, #-16]
     6c4:	ldr	r0, [fp, #-16]
     6c8:	bl	24 <__flatbuffers_uoffset_read_from_pe>
     6cc:	mov	r3, r0
     6d0:	add	r3, r3, #4
     6d4:	ldr	r2, [fp, #-16]
     6d8:	add	r3, r2, r3
     6dc:	b	6e4 <MyGame_Example_Monster_testarrayoftables+0xe0>
     6e0:	mov	r3, #0
     6e4:	mov	r0, r3
     6e8:	sub	sp, fp, #4
     6ec:	pop	{fp, pc}
     6f0:	.word	0x00000530
     6f4:	.word	0x000002c7
     6f8:	.word	0x00000004
     6fc:	.word	0x000000ac

00000700 <flatbuffers_uint8_vec_start>:
     700:	push	{fp, lr}
     704:	add	fp, sp, #4
     708:	sub	sp, sp, #8
     70c:	str	r0, [fp, #-8]
     710:	mvn	r3, #0
     714:	mov	r2, #1
     718:	mov	r1, #1
     71c:	ldr	r0, [fp, #-8]
     720:	bl	0 <flatcc_builder_start_vector>
     724:	mov	r3, r0
     728:	mov	r0, r3
     72c:	sub	sp, fp, #4
     730:	pop	{fp, pc}

00000734 <flatbuffers_uint8_vec_end>:
     734:	push	{fp, lr}
     738:	add	fp, sp, #4
     73c:	sub	sp, sp, #8
     740:	str	r0, [fp, #-8]
     744:	ldr	r0, [fp, #-8]
     748:	bl	0 <flatcc_builder_end_vector>
     74c:	mov	r3, r0
     750:	mov	r0, r3
     754:	sub	sp, fp, #4
     758:	pop	{fp, pc}

0000075c <flatbuffers_uint8_vec_append>:
     75c:	push	{fp, lr}
     760:	add	fp, sp, #4
     764:	sub	sp, sp, #16
     768:	str	r0, [fp, #-8]
     76c:	str	r1, [fp, #-12]
     770:	str	r2, [fp, #-16]
     774:	ldr	r2, [fp, #-16]
     778:	ldr	r1, [fp, #-12]
     77c:	ldr	r0, [fp, #-8]
     780:	bl	0 <flatcc_builder_append_vector>
     784:	mov	r3, r0
     788:	mov	r0, r3
     78c:	sub	sp, fp, #4
     790:	pop	{fp, pc}

00000794 <flatbuffers_string_append>:
     794:	push	{fp, lr}
     798:	add	fp, sp, #4
     79c:	sub	sp, sp, #16
     7a0:	str	r0, [fp, #-8]
     7a4:	str	r1, [fp, #-12]
     7a8:	str	r2, [fp, #-16]
     7ac:	ldr	r2, [fp, #-16]
     7b0:	ldr	r1, [fp, #-12]
     7b4:	ldr	r0, [fp, #-8]
     7b8:	bl	0 <flatcc_builder_append_string>
     7bc:	mov	r3, r0
     7c0:	mov	r0, r3
     7c4:	sub	sp, fp, #4
     7c8:	pop	{fp, pc}

000007cc <flatbuffers_buffer_start>:
     7cc:	push	{fp, lr}
     7d0:	add	fp, sp, #4
     7d4:	sub	sp, sp, #8
     7d8:	str	r0, [fp, #-8]
     7dc:	str	r1, [fp, #-12]
     7e0:	mov	r3, #0
     7e4:	mov	r2, #0
     7e8:	ldr	r1, [fp, #-12]
     7ec:	ldr	r0, [fp, #-8]
     7f0:	bl	0 <flatcc_builder_start_buffer>
     7f4:	mov	r3, r0
     7f8:	mov	r0, r3
     7fc:	sub	sp, fp, #4
     800:	pop	{fp, pc}

00000804 <flatbuffers_buffer_end>:
     804:	push	{fp, lr}
     808:	add	fp, sp, #4
     80c:	sub	sp, sp, #8
     810:	str	r0, [fp, #-8]
     814:	str	r1, [fp, #-12]
     818:	ldr	r1, [fp, #-12]
     81c:	ldr	r0, [fp, #-8]
     820:	bl	0 <flatcc_builder_end_buffer>
     824:	mov	r3, r0
     828:	mov	r0, r3
     82c:	sub	sp, fp, #4
     830:	pop	{fp, pc}

00000834 <MyGame_Example_Monster_start>:
     834:	push	{fp, lr}
     838:	add	fp, sp, #4
     83c:	sub	sp, sp, #8
     840:	str	r0, [fp, #-8]
     844:	mov	r1, #36	; 0x24
     848:	ldr	r0, [fp, #-8]
     84c:	bl	0 <flatcc_builder_start_table>
     850:	mov	r3, r0
     854:	mov	r0, r3
     858:	sub	sp, fp, #4
     85c:	pop	{fp, pc}

00000860 <MyGame_Example_Monster_end>:
     860:	push	{fp, lr}
     864:	add	fp, sp, #4
     868:	sub	sp, sp, #8
     86c:	str	r0, [fp, #-8]
     870:	mov	r2, #1
     874:	ldr	r1, [pc, #60]	; 8b8 <MyGame_Example_Monster_end+0x58>
     878:	ldr	r0, [fp, #-8]
     87c:	bl	0 <flatcc_builder_check_required>
     880:	mov	r3, r0
     884:	cmp	r3, #0
     888:	bne	8a0 <MyGame_Example_Monster_end+0x40>
     88c:	ldr	r3, [pc, #40]	; 8bc <MyGame_Example_Monster_end+0x5c>
     890:	mov	r2, #235	; 0xeb
     894:	ldr	r1, [pc, #36]	; 8c0 <MyGame_Example_Monster_end+0x60>
     898:	ldr	r0, [pc, #36]	; 8c4 <MyGame_Example_Monster_end+0x64>
     89c:	bl	0 <__assert_fail>
     8a0:	ldr	r0, [fp, #-8]
     8a4:	bl	0 <flatcc_builder_end_table>
     8a8:	mov	r3, r0
     8ac:	mov	r0, r3
     8b0:	sub	sp, fp, #4
     8b4:	pop	{fp, pc}
     8b8:	.word	0x0000012c
     8bc:	.word	0x00000498
     8c0:	.word	0x00000130
     8c4:	.word	0x0000019c

000008c8 <MyGame_Example_Monster_vec_start>:
     8c8:	push	{fp, lr}
     8cc:	add	fp, sp, #4
     8d0:	sub	sp, sp, #8
     8d4:	str	r0, [fp, #-8]
     8d8:	ldr	r0, [fp, #-8]
     8dc:	bl	0 <flatcc_builder_start_offset_vector>
     8e0:	mov	r3, r0
     8e4:	mov	r0, r3
     8e8:	sub	sp, fp, #4
     8ec:	pop	{fp, pc}

000008f0 <MyGame_Example_Monster_vec_end>:
     8f0:	push	{fp, lr}
     8f4:	add	fp, sp, #4
     8f8:	sub	sp, sp, #8
     8fc:	str	r0, [fp, #-8]
     900:	ldr	r0, [fp, #-8]
     904:	bl	0 <flatcc_builder_end_offset_vector>
     908:	mov	r3, r0
     90c:	mov	r0, r3
     910:	sub	sp, fp, #4
     914:	pop	{fp, pc}

00000918 <MyGame_Example_Monster_vec_push>:
     918:	push	{fp, lr}
     91c:	add	fp, sp, #4
     920:	sub	sp, sp, #8
     924:	str	r0, [fp, #-8]
     928:	str	r1, [fp, #-12]
     92c:	ldr	r3, [fp, #-12]
     930:	cmp	r3, #0
     934:	beq	94c <MyGame_Example_Monster_vec_push+0x34>
     938:	ldr	r1, [fp, #-12]
     93c:	ldr	r0, [fp, #-8]
     940:	bl	0 <flatcc_builder_offset_vector_push>
     944:	mov	r3, r0
     948:	b	950 <MyGame_Example_Monster_vec_push+0x38>
     94c:	mov	r3, #0
     950:	mov	r0, r3
     954:	sub	sp, fp, #4
     958:	pop	{fp, pc}

0000095c <MyGame_Example_Monster_name_add>:
     95c:	push	{fp, lr}
     960:	add	fp, sp, #4
     964:	sub	sp, sp, #16
     968:	str	r0, [fp, #-16]
     96c:	str	r1, [fp, #-20]	; 0xffffffec
     970:	ldr	r3, [fp, #-20]	; 0xffffffec
     974:	cmp	r3, #0
     978:	beq	9ac <MyGame_Example_Monster_name_add+0x50>
     97c:	mov	r1, #3
     980:	ldr	r0, [fp, #-16]
     984:	bl	0 <flatcc_builder_table_add_offset>
     988:	str	r0, [fp, #-8]
     98c:	ldr	r3, [fp, #-8]
     990:	cmp	r3, #0
     994:	beq	9ac <MyGame_Example_Monster_name_add+0x50>
     998:	ldr	r3, [fp, #-8]
     99c:	ldr	r2, [fp, #-20]	; 0xffffffec
     9a0:	str	r2, [r3]
     9a4:	mov	r3, #0
     9a8:	b	9b0 <MyGame_Example_Monster_name_add+0x54>
     9ac:	mvn	r3, #0
     9b0:	mov	r0, r3
     9b4:	sub	sp, fp, #4
     9b8:	pop	{fp, pc}

000009bc <MyGame_Example_Monster_name_start>:
     9bc:	push	{fp, lr}
     9c0:	add	fp, sp, #4
     9c4:	sub	sp, sp, #8
     9c8:	str	r0, [fp, #-8]
     9cc:	ldr	r0, [fp, #-8]
     9d0:	bl	0 <flatcc_builder_start_string>
     9d4:	mov	r3, r0
     9d8:	mov	r0, r3
     9dc:	sub	sp, fp, #4
     9e0:	pop	{fp, pc}

000009e4 <MyGame_Example_Monster_name_end>:
     9e4:	push	{fp, lr}
     9e8:	add	fp, sp, #4
     9ec:	sub	sp, sp, #8
     9f0:	str	r0, [fp, #-8]
     9f4:	ldr	r0, [fp, #-8]
     9f8:	bl	0 <flatcc_builder_end_string>
     9fc:	mov	r3, r0
     a00:	mov	r1, r3
     a04:	ldr	r0, [fp, #-8]
     a08:	bl	95c <MyGame_Example_Monster_name_add>
     a0c:	mov	r3, r0
     a10:	mov	r0, r3
     a14:	sub	sp, fp, #4
     a18:	pop	{fp, pc}

00000a1c <MyGame_Example_Monster_name_create_str>:
     a1c:	push	{fp, lr}
     a20:	add	fp, sp, #4
     a24:	sub	sp, sp, #8
     a28:	str	r0, [fp, #-8]
     a2c:	str	r1, [fp, #-12]
     a30:	ldr	r1, [fp, #-12]
     a34:	ldr	r0, [fp, #-8]
     a38:	bl	0 <flatcc_builder_create_string_str>
     a3c:	mov	r3, r0
     a40:	mov	r1, r3
     a44:	ldr	r0, [fp, #-8]
     a48:	bl	95c <MyGame_Example_Monster_name_add>
     a4c:	mov	r3, r0
     a50:	mov	r0, r3
     a54:	sub	sp, fp, #4
     a58:	pop	{fp, pc}

00000a5c <MyGame_Example_Monster_inventory_add>:
     a5c:	push	{fp, lr}
     a60:	add	fp, sp, #4
     a64:	sub	sp, sp, #16
     a68:	str	r0, [fp, #-16]
     a6c:	str	r1, [fp, #-20]	; 0xffffffec
     a70:	ldr	r3, [fp, #-20]	; 0xffffffec
     a74:	cmp	r3, #0
     a78:	beq	aac <MyGame_Example_Monster_inventory_add+0x50>
     a7c:	mov	r1, #5
     a80:	ldr	r0, [fp, #-16]
     a84:	bl	0 <flatcc_builder_table_add_offset>
     a88:	str	r0, [fp, #-8]
     a8c:	ldr	r3, [fp, #-8]
     a90:	cmp	r3, #0
     a94:	beq	aac <MyGame_Example_Monster_inventory_add+0x50>
     a98:	ldr	r3, [fp, #-8]
     a9c:	ldr	r2, [fp, #-20]	; 0xffffffec
     aa0:	str	r2, [r3]
     aa4:	mov	r3, #0
     aa8:	b	ab0 <MyGame_Example_Monster_inventory_add+0x54>
     aac:	mvn	r3, #0
     ab0:	mov	r0, r3
     ab4:	sub	sp, fp, #4
     ab8:	pop	{fp, pc}

00000abc <MyGame_Example_Monster_inventory_start>:
     abc:	push	{fp, lr}
     ac0:	add	fp, sp, #4
     ac4:	sub	sp, sp, #8
     ac8:	str	r0, [fp, #-8]
     acc:	ldr	r0, [fp, #-8]
     ad0:	bl	700 <flatbuffers_uint8_vec_start>
     ad4:	mov	r3, r0
     ad8:	mov	r0, r3
     adc:	sub	sp, fp, #4
     ae0:	pop	{fp, pc}

00000ae4 <MyGame_Example_Monster_inventory_end>:
     ae4:	push	{fp, lr}
     ae8:	add	fp, sp, #4
     aec:	sub	sp, sp, #8
     af0:	str	r0, [fp, #-8]
     af4:	ldr	r0, [fp, #-8]
     af8:	bl	734 <flatbuffers_uint8_vec_end>
     afc:	mov	r3, r0
     b00:	mov	r1, r3
     b04:	ldr	r0, [fp, #-8]
     b08:	bl	a5c <MyGame_Example_Monster_inventory_add>
     b0c:	mov	r3, r0
     b10:	mov	r0, r3
     b14:	sub	sp, fp, #4
     b18:	pop	{fp, pc}

00000b1c <MyGame_Example_Monster_testarrayoftables_add>:
     b1c:	push	{fp, lr}
     b20:	add	fp, sp, #4
     b24:	sub	sp, sp, #16
     b28:	str	r0, [fp, #-16]
     b2c:	str	r1, [fp, #-20]	; 0xffffffec
     b30:	ldr	r3, [fp, #-20]	; 0xffffffec
     b34:	cmp	r3, #0
     b38:	beq	b6c <MyGame_Example_Monster_testarrayoftables_add+0x50>
     b3c:	mov	r1, #11
     b40:	ldr	r0, [fp, #-16]
     b44:	bl	0 <flatcc_builder_table_add_offset>
     b48:	str	r0, [fp, #-8]
     b4c:	ldr	r3, [fp, #-8]
     b50:	cmp	r3, #0
     b54:	beq	b6c <MyGame_Example_Monster_testarrayoftables_add+0x50>
     b58:	ldr	r3, [fp, #-8]
     b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
     b60:	str	r2, [r3]
     b64:	mov	r3, #0
     b68:	b	b70 <MyGame_Example_Monster_testarrayoftables_add+0x54>
     b6c:	mvn	r3, #0
     b70:	mov	r0, r3
     b74:	sub	sp, fp, #4
     b78:	pop	{fp, pc}

00000b7c <MyGame_Example_Monster_start_as_root>:
     b7c:	push	{fp, lr}
     b80:	add	fp, sp, #4
     b84:	sub	sp, sp, #8
     b88:	str	r0, [fp, #-8]
     b8c:	ldr	r1, [pc, #48]	; bc4 <MyGame_Example_Monster_start_as_root+0x48>
     b90:	ldr	r0, [fp, #-8]
     b94:	bl	7cc <flatbuffers_buffer_start>
     b98:	mov	r3, r0
     b9c:	cmp	r3, #0
     ba0:	bne	bb4 <MyGame_Example_Monster_start_as_root+0x38>
     ba4:	ldr	r0, [fp, #-8]
     ba8:	bl	834 <MyGame_Example_Monster_start>
     bac:	mov	r3, r0
     bb0:	b	bb8 <MyGame_Example_Monster_start_as_root+0x3c>
     bb4:	mvn	r3, #0
     bb8:	mov	r0, r3
     bbc:	sub	sp, fp, #4
     bc0:	pop	{fp, pc}
     bc4:	.word	0x000000a4

00000bc8 <MyGame_Example_Monster_end_as_root>:
     bc8:	push	{fp, lr}
     bcc:	add	fp, sp, #4
     bd0:	sub	sp, sp, #8
     bd4:	str	r0, [fp, #-8]
     bd8:	ldr	r0, [fp, #-8]
     bdc:	bl	860 <MyGame_Example_Monster_end>
     be0:	mov	r3, r0
     be4:	mov	r1, r3
     be8:	ldr	r0, [fp, #-8]
     bec:	bl	804 <flatbuffers_buffer_end>
     bf0:	mov	r3, r0
     bf4:	mov	r0, r3
     bf8:	sub	sp, fp, #4
     bfc:	pop	{fp, pc}

00000c00 <elapsed_realtime>:
     c00:	push	{fp, lr}
     c04:	add	fp, sp, #4
     c08:	sub	sp, sp, #8
     c0c:	sub	r3, fp, #12
     c10:	mov	r1, #0
     c14:	mov	r0, r3
     c18:	bl	0 <gettimeofday>
     c1c:	ldr	r3, [pc, #108]	; c90 <elapsed_realtime+0x90>
     c20:	ldr	r3, [r3]
     c24:	cmp	r3, #0
     c28:	bne	c40 <elapsed_realtime+0x40>
     c2c:	ldr	r3, [pc, #92]	; c90 <elapsed_realtime+0x90>
     c30:	mov	r2, r3
     c34:	sub	r3, fp, #12
     c38:	ldm	r3, {r0, r1}
     c3c:	stm	r2, {r0, r1}
     c40:	ldr	r2, [fp, #-12]
     c44:	ldr	r3, [pc, #68]	; c90 <elapsed_realtime+0x90>
     c48:	ldr	r3, [r3]
     c4c:	sub	r3, r2, r3
     c50:	vmov	s15, r3
     c54:	vcvt.f64.s32	d6, s15
     c58:	ldr	r2, [fp, #-8]
     c5c:	ldr	r3, [pc, #44]	; c90 <elapsed_realtime+0x90>
     c60:	ldr	r3, [r3, #4]
     c64:	sub	r3, r2, r3
     c68:	vmov	s15, r3
     c6c:	vcvt.f64.s32	d5, s15
     c70:	vldr	d4, [pc, #16]	; c88 <elapsed_realtime+0x88>
     c74:	vdiv.f64	d7, d5, d4
     c78:	vadd.f64	d7, d6, d7
     c7c:	vmov.f64	d0, d7
     c80:	sub	sp, fp, #4
     c84:	pop	{fp, pc}
     c88:	.word	0x00000000
     c8c:	.word	0x412e8480
     c90:	.word	0x000003e8

00000c94 <show_benchmark>:
     c94:	push	{fp, lr}
     c98:	add	fp, sp, #4
     c9c:	sub	sp, sp, #48	; 0x30
     ca0:	str	r0, [fp, #-24]	; 0xffffffe8
     ca4:	vstr	d0, [fp, #-36]	; 0xffffffdc
     ca8:	vstr	d1, [fp, #-44]	; 0xffffffd4
     cac:	str	r1, [fp, #-28]	; 0xffffffe4
     cb0:	str	r2, [fp, #-48]	; 0xffffffd0
     cb4:	str	r3, [fp, #-52]	; 0xffffffcc
     cb8:	vldr	d6, [fp, #-44]	; 0xffffffd4
     cbc:	vldr	d7, [fp, #-36]	; 0xffffffdc
     cc0:	vsub.f64	d7, d6, d7
     cc4:	vstr	d7, [fp, #-12]
     cc8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     ccc:	ldr	r0, [pc, #412]	; e70 <show_benchmark+0x1dc>
     cd0:	bl	0 <printf>
     cd4:	ldrd	r2, [fp, #-12]
     cd8:	ldr	r0, [pc, #404]	; e74 <show_benchmark+0x1e0>
     cdc:	bl	0 <printf>
     ce0:	ldr	r1, [fp, #-48]	; 0xffffffd0
     ce4:	ldr	r0, [pc, #396]	; e78 <show_benchmark+0x1e4>
     ce8:	bl	0 <printf>
     cec:	ldr	r1, [fp, #-28]	; 0xffffffe4
     cf0:	ldr	r0, [pc, #388]	; e7c <show_benchmark+0x1e8>
     cf4:	bl	0 <printf>
     cf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     cfc:	vmov	s15, r3
     d00:	vcvt.f64.s32	d6, s15
     d04:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d08:	vmov	s15, r3
     d0c:	vcvt.f64.u32	d7, s15
     d10:	vmul.f64	d7, d6, d7
     d14:	vldr	d5, [pc, #308]	; e50 <show_benchmark+0x1bc>
     d18:	vdiv.f64	d6, d7, d5
     d1c:	vldr	d7, [fp, #-12]
     d20:	vdiv.f64	d5, d6, d7
     d24:	vmov	r2, r3, d5
     d28:	ldr	r0, [pc, #336]	; e80 <show_benchmark+0x1ec>
     d2c:	bl	0 <printf>
     d30:	ldr	r3, [fp, #-48]	; 0xffffffd0
     d34:	vmov	s15, r3
     d38:	vcvt.f64.s32	d6, s15
     d3c:	vldr	d7, [fp, #-12]
     d40:	vdiv.f64	d5, d6, d7
     d44:	vmov	r2, r3, d5
     d48:	ldr	r0, [pc, #308]	; e84 <show_benchmark+0x1f0>
     d4c:	bl	0 <printf>
     d50:	ldr	r3, [fp, #-52]	; 0xffffffcc
     d54:	cmp	r3, #0
     d58:	beq	d84 <show_benchmark+0xf0>
     d5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     d60:	cmp	r3, #1
     d64:	beq	d84 <show_benchmark+0xf0>
     d68:	vldr	d6, [pc, #232]	; e58 <show_benchmark+0x1c4>
     d6c:	vldr	d7, [fp, #-12]
     d70:	vdiv.f64	d5, d6, d7
     d74:	vmov	r2, r3, d5
     d78:	ldr	r1, [fp, #-52]	; 0xffffffcc
     d7c:	ldr	r0, [pc, #260]	; e88 <show_benchmark+0x1f4>
     d80:	bl	0 <printf>
     d84:	vldr	d7, [fp, #-12]
     d88:	vldr	d6, [pc, #208]	; e60 <show_benchmark+0x1cc>
     d8c:	vmul.f64	d5, d7, d6
     d90:	ldr	r3, [fp, #-48]	; 0xffffffd0
     d94:	vmov	s15, r3
     d98:	vcvt.f64.s32	d6, s15
     d9c:	vdiv.f64	d7, d5, d6
     da0:	vstr	d7, [fp, #-20]	; 0xffffffec
     da4:	vldr	d7, [fp, #-20]	; 0xffffffec
     da8:	vldr	d6, [pc, #184]	; e68 <show_benchmark+0x1d4>
     dac:	vcmpe.f64	d7, d6
     db0:	vmrs	APSR_nzcv, fpscr
     db4:	bpl	dc8 <show_benchmark+0x134>
     db8:	ldrd	r2, [fp, #-20]	; 0xffffffec
     dbc:	ldr	r0, [pc, #200]	; e8c <show_benchmark+0x1f8>
     dc0:	bl	0 <printf>
     dc4:	b	e40 <show_benchmark+0x1ac>
     dc8:	vldr	d7, [fp, #-20]	; 0xffffffec
     dcc:	vldr	d6, [pc, #124]	; e50 <show_benchmark+0x1bc>
     dd0:	vcmpe.f64	d7, d6
     dd4:	vmrs	APSR_nzcv, fpscr
     dd8:	bpl	df8 <show_benchmark+0x164>
     ddc:	vldr	d7, [fp, #-20]	; 0xffffffec
     de0:	vldr	d6, [pc, #128]	; e68 <show_benchmark+0x1d4>
     de4:	vdiv.f64	d5, d7, d6
     de8:	vmov	r2, r3, d5
     dec:	ldr	r0, [pc, #156]	; e90 <show_benchmark+0x1fc>
     df0:	bl	0 <printf>
     df4:	b	e40 <show_benchmark+0x1ac>
     df8:	vldr	d7, [fp, #-20]	; 0xffffffec
     dfc:	vldr	d6, [pc, #92]	; e60 <show_benchmark+0x1cc>
     e00:	vcmpe.f64	d7, d6
     e04:	vmrs	APSR_nzcv, fpscr
     e08:	bpl	e28 <show_benchmark+0x194>
     e0c:	vldr	d7, [fp, #-20]	; 0xffffffec
     e10:	vldr	d6, [pc, #56]	; e50 <show_benchmark+0x1bc>
     e14:	vdiv.f64	d5, d7, d6
     e18:	vmov	r2, r3, d5
     e1c:	ldr	r0, [pc, #112]	; e94 <show_benchmark+0x200>
     e20:	bl	0 <printf>
     e24:	b	e40 <show_benchmark+0x1ac>
     e28:	vldr	d7, [fp, #-20]	; 0xffffffec
     e2c:	vldr	d6, [pc, #44]	; e60 <show_benchmark+0x1cc>
     e30:	vdiv.f64	d5, d7, d6
     e34:	vmov	r2, r3, d5
     e38:	ldr	r0, [pc, #88]	; e98 <show_benchmark+0x204>
     e3c:	bl	0 <printf>
     e40:	mov	r3, #0
     e44:	mov	r0, r3
     e48:	sub	sp, fp, #4
     e4c:	pop	{fp, pc}
     e50:	.word	0x00000000
     e54:	.word	0x412e8480
     e58:	.word	0x00000000
     e5c:	.word	0x3ff00000
     e60:	.word	0x00000000
     e64:	.word	0x41cdcd65
     e68:	.word	0x00000000
     e6c:	.word	0x408f4000
     e70:	.word	0x0000024c
     e74:	.word	0x0000025c
     e78:	.word	0x00000274
     e7c:	.word	0x00000284
     e80:	.word	0x00000298
     e84:	.word	0x000002b0
     e88:	.word	0x000002d4
     e8c:	.word	0x000002f8
     e90:	.word	0x00000310
     e94:	.word	0x00000328
     e98:	.word	0x00000340

00000e9c <create_monster>:
     e9c:	push	{fp, lr}
     ea0:	add	fp, sp, #4
     ea4:	sub	sp, sp, #16
     ea8:	str	r0, [fp, #-16]
     eac:	ldr	r0, [fp, #-16]
     eb0:	bl	834 <MyGame_Example_Monster_start>
     eb4:	ldr	r0, [fp, #-16]
     eb8:	bl	9bc <MyGame_Example_Monster_name_start>
     ebc:	mov	r3, #0
     ec0:	str	r3, [fp, #-8]
     ec4:	b	ee4 <create_monster+0x48>
     ec8:	mov	r2, #7
     ecc:	ldr	r1, [pc, #128]	; f54 <create_monster+0xb8>
     ed0:	ldr	r0, [fp, #-16]
     ed4:	bl	794 <flatbuffers_string_append>
     ed8:	ldr	r3, [fp, #-8]
     edc:	add	r3, r3, #1
     ee0:	str	r3, [fp, #-8]
     ee4:	ldr	r3, [fp, #-8]
     ee8:	cmp	r3, #99	; 0x63
     eec:	bls	ec8 <create_monster+0x2c>
     ef0:	ldr	r0, [fp, #-16]
     ef4:	bl	9e4 <MyGame_Example_Monster_name_end>
     ef8:	ldr	r0, [fp, #-16]
     efc:	bl	abc <MyGame_Example_Monster_inventory_start>
     f00:	mov	r3, #0
     f04:	str	r3, [fp, #-8]
     f08:	b	f28 <create_monster+0x8c>
     f0c:	mov	r2, #1000	; 0x3e8
     f10:	ldr	r1, [pc, #64]	; f58 <create_monster+0xbc>
     f14:	ldr	r0, [fp, #-16]
     f18:	bl	75c <flatbuffers_uint8_vec_append>
     f1c:	ldr	r3, [fp, #-8]
     f20:	add	r3, r3, #1
     f24:	str	r3, [fp, #-8]
     f28:	ldr	r3, [fp, #-8]
     f2c:	cmp	r3, #99	; 0x63
     f30:	bls	f0c <create_monster+0x70>
     f34:	ldr	r0, [fp, #-16]
     f38:	bl	ae4 <MyGame_Example_Monster_inventory_end>
     f3c:	ldr	r0, [fp, #-16]
     f40:	bl	860 <MyGame_Example_Monster_end>
     f44:	mov	r3, r0
     f48:	mov	r0, r3
     f4c:	sub	sp, fp, #4
     f50:	pop	{fp, pc}
     f54:	.word	0x00000358
     f58:	.word	0x00000000

00000f5c <create_monsters>:
     f5c:	push	{fp, lr}
     f60:	add	fp, sp, #4
     f64:	sub	sp, sp, #16
     f68:	str	r0, [fp, #-16]
     f6c:	ldr	r0, [fp, #-16]
     f70:	bl	8c8 <MyGame_Example_Monster_vec_start>
     f74:	mov	r3, #0
     f78:	str	r3, [fp, #-8]
     f7c:	b	fc4 <create_monsters+0x68>
     f80:	ldr	r0, [fp, #-16]
     f84:	bl	e9c <create_monster>
     f88:	str	r0, [fp, #-12]
     f8c:	ldr	r3, [fp, #-12]
     f90:	cmp	r3, #0
     f94:	bne	fac <create_monsters+0x50>
     f98:	ldr	r3, [pc, #72]	; fe8 <create_monsters+0x8c>
     f9c:	mov	r2, #42	; 0x2a
     fa0:	ldr	r1, [pc, #68]	; fec <create_monsters+0x90>
     fa4:	ldr	r0, [pc, #68]	; ff0 <create_monsters+0x94>
     fa8:	bl	0 <__assert_fail>
     fac:	ldr	r1, [fp, #-12]
     fb0:	ldr	r0, [fp, #-16]
     fb4:	bl	918 <MyGame_Example_Monster_vec_push>
     fb8:	ldr	r3, [fp, #-8]
     fbc:	add	r3, r3, #1
     fc0:	str	r3, [fp, #-8]
     fc4:	ldr	r3, [fp, #-8]
     fc8:	cmp	r3, #1000	; 0x3e8
     fcc:	bcc	f80 <create_monsters+0x24>
     fd0:	ldr	r0, [fp, #-16]
     fd4:	bl	8f0 <MyGame_Example_Monster_vec_end>
     fd8:	mov	r3, r0
     fdc:	mov	r0, r3
     fe0:	sub	sp, fp, #4
     fe4:	pop	{fp, pc}
     fe8:	.word	0x000004b4
     fec:	.word	0x00000360
     ff0:	.word	0x000003b4

00000ff4 <create_root_monster>:
     ff4:	push	{fp, lr}
     ff8:	add	fp, sp, #4
     ffc:	sub	sp, sp, #16
    1000:	str	r0, [fp, #-16]
    1004:	ldr	r0, [fp, #-16]
    1008:	bl	0 <flatcc_builder_reset>
    100c:	ldr	r0, [fp, #-16]
    1010:	bl	b7c <MyGame_Example_Monster_start_as_root>
    1014:	ldr	r1, [pc, #84]	; 1070 <create_root_monster+0x7c>
    1018:	ldr	r0, [fp, #-16]
    101c:	bl	a1c <MyGame_Example_Monster_name_create_str>
    1020:	ldr	r0, [fp, #-16]
    1024:	bl	f5c <create_monsters>
    1028:	str	r0, [fp, #-8]
    102c:	ldr	r3, [fp, #-8]
    1030:	cmp	r3, #0
    1034:	bne	104c <create_root_monster+0x58>
    1038:	ldr	r3, [pc, #52]	; 1074 <create_root_monster+0x80>
    103c:	mov	r2, #56	; 0x38
    1040:	ldr	r1, [pc, #48]	; 1078 <create_root_monster+0x84>
    1044:	ldr	r0, [pc, #48]	; 107c <create_root_monster+0x88>
    1048:	bl	0 <__assert_fail>
    104c:	ldr	r1, [fp, #-8]
    1050:	ldr	r0, [fp, #-16]
    1054:	bl	b1c <MyGame_Example_Monster_testarrayoftables_add>
    1058:	ldr	r0, [fp, #-16]
    105c:	bl	bc8 <MyGame_Example_Monster_end_as_root>
    1060:	mov	r3, #0
    1064:	mov	r0, r3
    1068:	sub	sp, fp, #4
    106c:	pop	{fp, pc}
    1070:	.word	0x000003b8
    1074:	.word	0x000004c4
    1078:	.word	0x00000360
    107c:	.word	0x000003c8

00001080 <verify_monster>:
    1080:	push	{fp, lr}
    1084:	add	fp, sp, #4
    1088:	sub	sp, sp, #24
    108c:	str	r0, [fp, #-24]	; 0xffffffe8
    1090:	str	r1, [fp, #-28]	; 0xffffffe4
    1094:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1098:	bl	3f8 <MyGame_Example_Monster_name>
    109c:	str	r0, [fp, #-12]
    10a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    10a4:	bl	508 <MyGame_Example_Monster_inventory>
    10a8:	str	r0, [fp, #-16]
    10ac:	ldr	r0, [fp, #-12]
    10b0:	bl	1bc <flatbuffers_string_len>
    10b4:	mov	r3, r0
    10b8:	cmp	r3, #700	; 0x2bc
    10bc:	beq	10d4 <verify_monster+0x54>
    10c0:	ldr	r3, [pc, #372]	; 123c <verify_monster+0x1bc>
    10c4:	mov	r2, #74	; 0x4a
    10c8:	ldr	r1, [pc, #368]	; 1240 <verify_monster+0x1c0>
    10cc:	ldr	r0, [pc, #368]	; 1244 <verify_monster+0x1c4>
    10d0:	bl	0 <__assert_fail>
    10d4:	ldr	r0, [fp, #-16]
    10d8:	bl	200 <flatbuffers_uint8_vec_len>
    10dc:	mov	r2, r0
    10e0:	ldr	r3, [pc, #352]	; 1248 <verify_monster+0x1c8>
    10e4:	cmp	r2, r3
    10e8:	beq	1100 <verify_monster+0x80>
    10ec:	ldr	r3, [pc, #328]	; 123c <verify_monster+0x1bc>
    10f0:	mov	r2, #78	; 0x4e
    10f4:	ldr	r1, [pc, #324]	; 1240 <verify_monster+0x1c0>
    10f8:	ldr	r0, [pc, #324]	; 1244 <verify_monster+0x1c4>
    10fc:	bl	0 <__assert_fail>
    1100:	mov	r3, #0
    1104:	str	r3, [fp, #-8]
    1108:	b	11b8 <verify_monster+0x138>
    110c:	ldr	r2, [fp, #-8]
    1110:	mov	r3, r2
    1114:	lsl	r3, r3, #3
    1118:	sub	r3, r3, r2
    111c:	ldr	r2, [fp, #-12]
    1120:	add	r3, r2, r3
    1124:	mov	r2, #7
    1128:	ldr	r1, [pc, #284]	; 124c <verify_monster+0x1cc>
    112c:	mov	r0, r3
    1130:	bl	0 <memcmp>
    1134:	mov	r3, r0
    1138:	cmp	r3, #0
    113c:	beq	11ac <verify_monster+0x12c>
    1140:	ldr	r3, [fp, #-12]
    1144:	cmp	r3, #0
    1148:	beq	1154 <verify_monster+0xd4>
    114c:	ldr	r3, [fp, #-12]
    1150:	b	1158 <verify_monster+0xd8>
    1154:	ldr	r3, [pc, #244]	; 1250 <verify_monster+0x1d0>
    1158:	mov	r2, r3
    115c:	ldr	r1, [fp, #-8]
    1160:	ldr	r0, [pc, #236]	; 1254 <verify_monster+0x1d4>
    1164:	bl	0 <printf>
    1168:	ldr	r2, [fp, #-8]
    116c:	mov	r3, r2
    1170:	lsl	r3, r3, #3
    1174:	sub	r3, r3, r2
    1178:	ldr	r2, [fp, #-12]
    117c:	add	r3, r2, r3
    1180:	mov	r2, r3
    1184:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1188:	sub	r3, r2, r3
    118c:	mov	r1, r3
    1190:	ldr	r0, [pc, #192]	; 1258 <verify_monster+0x1d8>
    1194:	bl	0 <printf>
    1198:	ldr	r3, [pc, #156]	; 123c <verify_monster+0x1bc>
    119c:	mov	r2, #85	; 0x55
    11a0:	ldr	r1, [pc, #152]	; 1240 <verify_monster+0x1c0>
    11a4:	ldr	r0, [pc, #152]	; 1244 <verify_monster+0x1c4>
    11a8:	bl	0 <__assert_fail>
    11ac:	ldr	r3, [fp, #-8]
    11b0:	add	r3, r3, #1
    11b4:	str	r3, [fp, #-8]
    11b8:	ldr	r3, [fp, #-8]
    11bc:	cmp	r3, #99	; 0x63
    11c0:	bls	110c <verify_monster+0x8c>
    11c4:	mov	r3, #0
    11c8:	str	r3, [fp, #-8]
    11cc:	b	1220 <verify_monster+0x1a0>
    11d0:	ldr	r3, [fp, #-8]
    11d4:	mov	r2, #1000	; 0x3e8
    11d8:	mul	r3, r2, r3
    11dc:	ldr	r2, [fp, #-16]
    11e0:	add	r3, r2, r3
    11e4:	mov	r2, #1000	; 0x3e8
    11e8:	ldr	r1, [pc, #108]	; 125c <verify_monster+0x1dc>
    11ec:	mov	r0, r3
    11f0:	bl	0 <memcmp>
    11f4:	mov	r3, r0
    11f8:	cmp	r3, #0
    11fc:	beq	1214 <verify_monster+0x194>
    1200:	ldr	r3, [pc, #52]	; 123c <verify_monster+0x1bc>
    1204:	mov	r2, #91	; 0x5b
    1208:	ldr	r1, [pc, #48]	; 1240 <verify_monster+0x1c0>
    120c:	ldr	r0, [pc, #48]	; 1244 <verify_monster+0x1c4>
    1210:	bl	0 <__assert_fail>
    1214:	ldr	r3, [fp, #-8]
    1218:	add	r3, r3, #1
    121c:	str	r3, [fp, #-8]
    1220:	ldr	r3, [fp, #-8]
    1224:	cmp	r3, #99	; 0x63
    1228:	bls	11d0 <verify_monster+0x150>
    122c:	mov	r3, #0
    1230:	mov	r0, r3
    1234:	sub	sp, fp, #4
    1238:	pop	{fp, pc}
    123c:	.word	0x000004d8
    1240:	.word	0x00000360
    1244:	.word	0x000003cc
    1248:	.word	0x000186a0
    124c:	.word	0x00000358
    1250:	.word	0x000003d0
    1254:	.word	0x000003d8
    1258:	.word	0x000003f8
    125c:	.word	0x00000000

00001260 <main>:
    1260:	push	{fp, lr}
    1264:	add	fp, sp, #4
    1268:	sub	sp, sp, #304	; 0x130
    126c:	str	r0, [fp, #-304]	; 0xfffffed0
    1270:	str	r1, [fp, #-308]	; 0xfffffecc
    1274:	mov	r3, #10
    1278:	str	r3, [fp, #-20]	; 0xffffffec
    127c:	mov	r3, #0
    1280:	str	r3, [fp, #-12]
    1284:	sub	r3, fp, #296	; 0x128
    1288:	str	r3, [fp, #-24]	; 0xffffffe8
    128c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1290:	bl	0 <flatcc_builder_init>
    1294:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1298:	bl	ff4 <create_root_monster>
    129c:	sub	r3, fp, #64	; 0x40
    12a0:	mov	r1, r3
    12a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12a8:	bl	0 <flatcc_builder_finalize_buffer>
    12ac:	str	r0, [fp, #-28]	; 0xffffffe4
    12b0:	ldr	r1, [pc, #616]	; 1520 <main+0x2c0>
    12b4:	ldr	r0, [pc, #616]	; 1524 <main+0x2c4>
    12b8:	bl	0 <fopen>
    12bc:	str	r0, [fp, #-32]	; 0xffffffe0
    12c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    12c4:	cmp	r3, #0
    12c8:	bne	12d8 <main+0x78>
    12cc:	mvn	r3, #0
    12d0:	str	r3, [fp, #-12]
    12d4:	b	14ec <main+0x28c>
    12d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
    12dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    12e0:	mov	r1, #1
    12e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    12e8:	bl	0 <fwrite>
    12ec:	mov	r2, r0
    12f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    12f4:	cmp	r2, r3
    12f8:	movne	r3, #1
    12fc:	moveq	r3, #0
    1300:	uxtb	r3, r3
    1304:	mov	r2, r3
    1308:	ldr	r3, [fp, #-12]
    130c:	orr	r3, r3, r2
    1310:	str	r3, [fp, #-12]
    1314:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1318:	bl	0 <fclose>
    131c:	ldr	r3, [fp, #-12]
    1320:	cmp	r3, #0
    1324:	bne	14e0 <main+0x280>
    1328:	ldr	r3, [fp, #-64]	; 0xffffffc0
    132c:	mov	r1, r3
    1330:	ldr	r0, [pc, #496]	; 1528 <main+0x2c8>
    1334:	bl	0 <printf>
    1338:	ldr	r0, [pc, #492]	; 152c <main+0x2cc>
    133c:	bl	0 <puts>
    1340:	bl	c00 <elapsed_realtime>
    1344:	vstr	d0, [fp, #-44]	; 0xffffffd4
    1348:	mov	r3, #0
    134c:	str	r3, [fp, #-8]
    1350:	b	14a8 <main+0x248>
    1354:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1358:	bl	ff4 <create_root_monster>
    135c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1360:	mov	r2, r3
    1364:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1368:	ldr	r0, [fp, #-24]	; 0xffffffe8
    136c:	bl	0 <flatcc_builder_copy_buffer>
    1370:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1374:	bl	390 <MyGame_Example_Monster_as_root>
    1378:	str	r0, [fp, #-48]	; 0xffffffd0
    137c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1380:	bl	3f8 <MyGame_Example_Monster_name>
    1384:	mov	r3, r0
    1388:	ldr	r1, [pc, #416]	; 1530 <main+0x2d0>
    138c:	mov	r0, r3
    1390:	bl	0 <strcmp>
    1394:	mov	r2, r0
    1398:	ldr	r3, [fp, #-12]
    139c:	orr	r3, r3, r2
    13a0:	str	r3, [fp, #-12]
    13a4:	ldr	r3, [fp, #-12]
    13a8:	cmp	r3, #0
    13ac:	beq	13c4 <main+0x164>
    13b0:	ldr	r3, [pc, #380]	; 1534 <main+0x2d4>
    13b4:	mov	r2, #139	; 0x8b
    13b8:	ldr	r1, [pc, #376]	; 1538 <main+0x2d8>
    13bc:	ldr	r0, [pc, #376]	; 153c <main+0x2dc>
    13c0:	bl	0 <__assert_fail>
    13c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    13c8:	bl	604 <MyGame_Example_Monster_testarrayoftables>
    13cc:	str	r0, [fp, #-52]	; 0xffffffcc
    13d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    13d4:	bl	2c8 <MyGame_Example_Monster_vec_len>
    13d8:	mov	r3, r0
    13dc:	cmp	r3, #1000	; 0x3e8
    13e0:	movne	r3, #1
    13e4:	moveq	r3, #0
    13e8:	uxtb	r3, r3
    13ec:	mov	r2, r3
    13f0:	ldr	r3, [fp, #-12]
    13f4:	orr	r3, r3, r2
    13f8:	str	r3, [fp, #-12]
    13fc:	ldr	r3, [fp, #-12]
    1400:	cmp	r3, #0
    1404:	beq	141c <main+0x1bc>
    1408:	ldr	r3, [pc, #292]	; 1534 <main+0x2d4>
    140c:	mov	r2, #143	; 0x8f
    1410:	ldr	r1, [pc, #288]	; 1538 <main+0x2d8>
    1414:	ldr	r0, [pc, #288]	; 153c <main+0x2dc>
    1418:	bl	0 <__assert_fail>
    141c:	mov	r3, #0
    1420:	str	r3, [fp, #-16]
    1424:	b	1484 <main+0x224>
    1428:	ldr	r3, [fp, #-16]
    142c:	mov	r1, r3
    1430:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1434:	bl	30c <MyGame_Example_Monster_vec_at>
    1438:	mov	r3, r0
    143c:	mov	r1, r3
    1440:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1444:	bl	1080 <verify_monster>
    1448:	mov	r2, r0
    144c:	ldr	r3, [fp, #-12]
    1450:	orr	r3, r3, r2
    1454:	str	r3, [fp, #-12]
    1458:	ldr	r3, [fp, #-12]
    145c:	cmp	r3, #0
    1460:	beq	1478 <main+0x218>
    1464:	ldr	r3, [pc, #200]	; 1534 <main+0x2d4>
    1468:	mov	r2, #147	; 0x93
    146c:	ldr	r1, [pc, #196]	; 1538 <main+0x2d8>
    1470:	ldr	r0, [pc, #196]	; 153c <main+0x2dc>
    1474:	bl	0 <__assert_fail>
    1478:	ldr	r3, [fp, #-16]
    147c:	add	r3, r3, #1
    1480:	str	r3, [fp, #-16]
    1484:	ldr	r3, [fp, #-16]
    1488:	cmp	r3, #1000	; 0x3e8
    148c:	blt	1428 <main+0x1c8>
    1490:	ldr	r3, [fp, #-12]
    1494:	cmp	r3, #0
    1498:	bne	14e8 <main+0x288>
    149c:	ldr	r3, [fp, #-8]
    14a0:	add	r3, r3, #1
    14a4:	str	r3, [fp, #-8]
    14a8:	ldr	r2, [fp, #-8]
    14ac:	ldr	r3, [fp, #-20]	; 0xffffffec
    14b0:	cmp	r2, r3
    14b4:	blt	1354 <main+0xf4>
    14b8:	bl	c00 <elapsed_realtime>
    14bc:	vstr	d0, [fp, #-60]	; 0xffffffc4
    14c0:	ldr	r1, [fp, #-64]	; 0xffffffc0
    14c4:	mov	r3, #0
    14c8:	ldr	r2, [fp, #-20]	; 0xffffffec
    14cc:	vldr	d1, [fp, #-60]	; 0xffffffc4
    14d0:	vldr	d0, [fp, #-44]	; 0xffffffd4
    14d4:	ldr	r0, [pc, #100]	; 1540 <main+0x2e0>
    14d8:	bl	c94 <show_benchmark>
    14dc:	b	14ec <main+0x28c>
    14e0:	nop			; (mov r0, r0)
    14e4:	b	14ec <main+0x28c>
    14e8:	nop			; (mov r0, r0)
    14ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14f0:	bl	0 <flatcc_builder_clear>
    14f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    14f8:	bl	0 <free>
    14fc:	ldr	r3, [fp, #-12]
    1500:	cmp	r3, #0
    1504:	beq	1510 <main+0x2b0>
    1508:	ldr	r0, [pc, #52]	; 1544 <main+0x2e4>
    150c:	bl	0 <puts>
    1510:	ldr	r3, [fp, #-12]
    1514:	mov	r0, r3
    1518:	sub	sp, fp, #4
    151c:	pop	{fp, pc}
    1520:	.word	0x00000408
    1524:	.word	0x0000040c
    1528:	.word	0x00000424
    152c:	.word	0x00000438
    1530:	.word	0x000003b8
    1534:	.word	0x00000528
    1538:	.word	0x00000360
    153c:	.word	0x0000044c
    1540:	.word	0x00000458
    1544:	.word	0x00000484
