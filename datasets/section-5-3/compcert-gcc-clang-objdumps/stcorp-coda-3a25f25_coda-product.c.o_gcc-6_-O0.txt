
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_file_size>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #96	; 0x60
       c:	str	r0, [fp, #-96]	; 0xffffffa0
      10:	str	r1, [fp, #-100]	; 0xffffff9c
      14:	ldr	r3, [fp, #-96]	; 0xffffffa0
      18:	cmp	r3, #0
      1c:	beq	2c <get_file_size+0x2c>
      20:	ldr	r3, [fp, #-100]	; 0xffffff9c
      24:	cmp	r3, #0
      28:	bne	40 <get_file_size+0x40>
      2c:	ldr	r3, [pc, #204]	; 100 <get_file_size+0x100>
      30:	mov	r2, #162	; 0xa2
      34:	ldr	r1, [pc, #200]	; 104 <get_file_size+0x104>
      38:	ldr	r0, [pc, #200]	; 108 <get_file_size+0x108>
      3c:	bl	0 <__assert_fail>
      40:	sub	r3, fp, #92	; 0x5c
      44:	mov	r1, r3
      48:	ldr	r0, [fp, #-96]	; 0xffffffa0
      4c:	bl	0 <stat>
      50:	mov	r3, r0
      54:	cmp	r3, #0
      58:	beq	b4 <get_file_size+0xb4>
      5c:	bl	0 <__errno_location>
      60:	mov	r3, r0
      64:	ldr	r3, [r3]
      68:	cmp	r3, #2
      6c:	bne	84 <get_file_size+0x84>
      70:	ldr	r2, [fp, #-96]	; 0xffffffa0
      74:	ldr	r1, [pc, #144]	; 10c <get_file_size+0x10c>
      78:	mvn	r0, #19
      7c:	bl	0 <coda_set_error>
      80:	b	ac <get_file_size+0xac>
      84:	bl	0 <__errno_location>
      88:	mov	r3, r0
      8c:	ldr	r3, [r3]
      90:	mov	r0, r3
      94:	bl	0 <strerror>
      98:	mov	r3, r0
      9c:	ldr	r2, [fp, #-96]	; 0xffffffa0
      a0:	ldr	r1, [pc, #104]	; 110 <get_file_size+0x110>
      a4:	mvn	r0, #20
      a8:	bl	0 <coda_set_error>
      ac:	mvn	r3, #0
      b0:	b	f4 <get_file_size+0xf4>
      b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
      b8:	and	r3, r3, #32768	; 0x8000
      bc:	cmp	r3, #0
      c0:	bne	dc <get_file_size+0xdc>
      c4:	ldr	r2, [fp, #-96]	; 0xffffffa0
      c8:	ldr	r1, [pc, #68]	; 114 <get_file_size+0x114>
      cc:	mvn	r0, #20
      d0:	bl	0 <coda_set_error>
      d4:	mvn	r3, #0
      d8:	b	f4 <get_file_size+0xf4>
      dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
      e0:	mov	r2, r3
      e4:	asr	r3, r2, #31
      e8:	ldr	r1, [fp, #-100]	; 0xffffff9c
      ec:	strd	r2, [r1]
      f0:	mov	r3, #0
      f4:	mov	r0, r3
      f8:	sub	sp, fp, #4
      fc:	pop	{fp, pc}
     100:	.word	0x000003ac
     104:	.word	0x00000000
     108:	.word	0x0000004c
     10c:	.word	0x00000074
     110:	.word	0x00000088
     114:	.word	0x000000a0

00000118 <get_format>:
     118:	push	{fp, lr}
     11c:	add	fp, sp, #4
     120:	sub	sp, sp, #632	; 0x278
     124:	str	r0, [fp, #-624]	; 0xfffffd90
     128:	str	r1, [fp, #-628]	; 0xfffffd8c
     12c:	ldr	r3, [fp, #-624]	; 0xfffffd90
     130:	ldrd	r2, [r3, #8]
     134:	strd	r2, [fp, #-20]	; 0xffffffec
     138:	sub	r3, fp, #620	; 0x26c
     13c:	ldr	r1, [fp, #-624]	; 0xfffffd90
     140:	mov	r0, r3
     144:	bl	0 <coda_cursor_set_product>
     148:	mov	r3, r0
     14c:	cmp	r3, #0
     150:	beq	15c <get_format+0x44>
     154:	mvn	r3, #0
     158:	b	6b8 <get_format+0x5a0>
     15c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     160:	mov	r2, #1
     164:	str	r2, [r3]
     168:	ldrd	r2, [fp, #-20]	; 0xffffffec
     16c:	cmp	r2, #4
     170:	sbcs	r3, r3, #0
     174:	bge	180 <get_format+0x68>
     178:	mov	r3, #0
     17c:	b	6b8 <get_format+0x5a0>
     180:	sub	r1, fp, #100	; 0x64
     184:	sub	r0, fp, #620	; 0x26c
     188:	mov	r2, #4
     18c:	mov	r3, #0
     190:	strd	r2, [sp]
     194:	mov	r2, #0
     198:	mov	r3, #0
     19c:	bl	0 <coda_cursor_read_bytes>
     1a0:	mov	r3, r0
     1a4:	cmp	r3, #0
     1a8:	beq	1b4 <get_format+0x9c>
     1ac:	mvn	r3, #0
     1b0:	b	6b8 <get_format+0x5a0>
     1b4:	sub	r3, fp, #100	; 0x64
     1b8:	mov	r2, #3
     1bc:	ldr	r1, [pc, #1280]	; 6c4 <get_format+0x5ac>
     1c0:	mov	r0, r3
     1c4:	bl	0 <memcmp>
     1c8:	mov	r3, r0
     1cc:	cmp	r3, #0
     1d0:	bne	20c <get_format+0xf4>
     1d4:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     1d8:	cmp	r3, #1
     1dc:	beq	1f8 <get_format+0xe0>
     1e0:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     1e4:	cmp	r3, #2
     1e8:	beq	1f8 <get_format+0xe0>
     1ec:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     1f0:	cmp	r3, #5
     1f4:	bne	20c <get_format+0xf4>
     1f8:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     1fc:	mov	r2, #6
     200:	str	r2, [r3]
     204:	mov	r3, #0
     208:	b	6b8 <get_format+0x5a0>
     20c:	sub	r3, fp, #100	; 0x64
     210:	mov	r2, #4
     214:	ldr	r1, [pc, #1196]	; 6c8 <get_format+0x5b0>
     218:	mov	r0, r3
     21c:	bl	0 <memcmp>
     220:	mov	r3, r0
     224:	cmp	r3, #0
     228:	bne	240 <get_format+0x128>
     22c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     230:	mov	r2, #3
     234:	str	r2, [r3]
     238:	mov	r3, #0
     23c:	b	6b8 <get_format+0x5a0>
     240:	ldrd	r2, [fp, #-20]	; 0xffffffec
     244:	cmp	r2, #8
     248:	sbcs	r3, r3, #0
     24c:	bge	264 <get_format+0x14c>
     250:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     254:	mov	r2, #1
     258:	str	r2, [r3]
     25c:	mov	r3, #0
     260:	b	6b8 <get_format+0x5a0>
     264:	sub	r3, fp, #100	; 0x64
     268:	add	r1, r3, #4
     26c:	sub	r0, fp, #620	; 0x26c
     270:	mov	r2, #4
     274:	mov	r3, #0
     278:	strd	r2, [sp]
     27c:	mov	r2, #4
     280:	mov	r3, #0
     284:	bl	0 <coda_cursor_read_bytes>
     288:	mov	r3, r0
     28c:	cmp	r3, #0
     290:	beq	29c <get_format+0x184>
     294:	mvn	r3, #0
     298:	b	6b8 <get_format+0x5a0>
     29c:	sub	r3, fp, #100	; 0x64
     2a0:	mov	r2, #8
     2a4:	ldr	r1, [pc, #1056]	; 6cc <get_format+0x5b4>
     2a8:	mov	r0, r3
     2ac:	bl	0 <memcmp>
     2b0:	mov	r3, r0
     2b4:	cmp	r3, #0
     2b8:	bne	2d0 <get_format+0x1b8>
     2bc:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     2c0:	mov	r2, #4
     2c4:	str	r2, [r3]
     2c8:	mov	r3, #0
     2cc:	b	6b8 <get_format+0x5a0>
     2d0:	sub	r3, fp, #100	; 0x64
     2d4:	mov	r2, #8
     2d8:	ldr	r1, [pc, #1008]	; 6d0 <get_format+0x5b8>
     2dc:	mov	r0, r3
     2e0:	bl	0 <memcmp>
     2e4:	mov	r3, r0
     2e8:	cmp	r3, #0
     2ec:	beq	370 <get_format+0x258>
     2f0:	sub	r3, fp, #100	; 0x64
     2f4:	mov	r2, #8
     2f8:	ldr	r1, [pc, #980]	; 6d4 <get_format+0x5bc>
     2fc:	mov	r0, r3
     300:	bl	0 <memcmp>
     304:	mov	r3, r0
     308:	cmp	r3, #0
     30c:	beq	370 <get_format+0x258>
     310:	sub	r3, fp, #100	; 0x64
     314:	mov	r2, #8
     318:	ldr	r1, [pc, #952]	; 6d8 <get_format+0x5c0>
     31c:	mov	r0, r3
     320:	bl	0 <memcmp>
     324:	mov	r3, r0
     328:	cmp	r3, #0
     32c:	beq	370 <get_format+0x258>
     330:	sub	r3, fp, #100	; 0x64
     334:	mov	r2, #8
     338:	ldr	r1, [pc, #924]	; 6dc <get_format+0x5c4>
     33c:	mov	r0, r3
     340:	bl	0 <memcmp>
     344:	mov	r3, r0
     348:	cmp	r3, #0
     34c:	beq	370 <get_format+0x258>
     350:	sub	r3, fp, #100	; 0x64
     354:	mov	r2, #8
     358:	ldr	r1, [pc, #896]	; 6e0 <get_format+0x5c8>
     35c:	mov	r0, r3
     360:	bl	0 <memcmp>
     364:	mov	r3, r0
     368:	cmp	r3, #0
     36c:	bne	384 <get_format+0x26c>
     370:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     374:	mov	r2, #5
     378:	str	r2, [r3]
     37c:	mov	r3, #0
     380:	b	6b8 <get_format+0x5a0>
     384:	sub	r3, fp, #100	; 0x64
     388:	mov	r2, #4
     38c:	ldr	r1, [pc, #848]	; 6e4 <get_format+0x5cc>
     390:	mov	r0, r3
     394:	bl	0 <memcmp>
     398:	mov	r3, r0
     39c:	cmp	r3, #0
     3a0:	bne	3d0 <get_format+0x2b8>
     3a4:	ldrb	r3, [fp, #-93]	; 0xffffffa3
     3a8:	cmp	r3, #1
     3ac:	beq	3bc <get_format+0x2a4>
     3b0:	ldrb	r3, [fp, #-93]	; 0xffffffa3
     3b4:	cmp	r3, #2
     3b8:	bne	3d0 <get_format+0x2b8>
     3bc:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     3c0:	mov	r2, #7
     3c4:	str	r2, [r3]
     3c8:	mov	r3, #0
     3cc:	b	6b8 <get_format+0x5a0>
     3d0:	sub	r3, fp, #100	; 0x64
     3d4:	mov	r2, #5
     3d8:	ldr	r1, [pc, #776]	; 6e8 <get_format+0x5d0>
     3dc:	mov	r0, r3
     3e0:	bl	0 <memcmp>
     3e4:	mov	r3, r0
     3e8:	cmp	r3, #0
     3ec:	beq	410 <get_format+0x2f8>
     3f0:	sub	r3, fp, #100	; 0x64
     3f4:	mov	r2, #8
     3f8:	ldr	r1, [pc, #748]	; 6ec <get_format+0x5d4>
     3fc:	mov	r0, r3
     400:	bl	0 <memcmp>
     404:	mov	r3, r0
     408:	cmp	r3, #0
     40c:	bne	424 <get_format+0x30c>
     410:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     414:	mov	r2, #2
     418:	str	r2, [r3]
     41c:	mov	r3, #0
     420:	b	6b8 <get_format+0x5a0>
     424:	ldrd	r2, [fp, #-20]	; 0xffffffec
     428:	cmp	r2, #40	; 0x28
     42c:	sbcs	r3, r3, #0
     430:	bge	43c <get_format+0x324>
     434:	mov	r3, #0
     438:	b	6b8 <get_format+0x5a0>
     43c:	sub	r3, fp, #100	; 0x64
     440:	add	r1, r3, #8
     444:	sub	r0, fp, #620	; 0x26c
     448:	mov	r2, #32
     44c:	mov	r3, #0
     450:	strd	r2, [sp]
     454:	mov	r2, #8
     458:	mov	r3, #0
     45c:	bl	0 <coda_cursor_read_bytes>
     460:	mov	r3, r0
     464:	cmp	r3, #0
     468:	beq	474 <get_format+0x35c>
     46c:	mvn	r3, #0
     470:	b	6b8 <get_format+0x5a0>
     474:	ldrd	r2, [fp, #-20]	; 0xffffffec
     478:	cmp	r2, #60	; 0x3c
     47c:	sbcs	r3, r3, #0
     480:	blt	594 <get_format+0x47c>
     484:	ldrb	r3, [fp, #-100]	; 0xffffff9c
     488:	cmp	r3, #35	; 0x23
     48c:	bne	594 <get_format+0x47c>
     490:	ldrb	r3, [fp, #-99]	; 0xffffff9d
     494:	cmp	r3, #97	; 0x61
     498:	beq	4b4 <get_format+0x39c>
     49c:	ldrb	r3, [fp, #-99]	; 0xffffff9d
     4a0:	cmp	r3, #98	; 0x62
     4a4:	beq	4b4 <get_format+0x39c>
     4a8:	ldrb	r3, [fp, #-99]	; 0xffffff9d
     4ac:	cmp	r3, #99	; 0x63
     4b0:	bne	594 <get_format+0x47c>
     4b4:	ldrb	r3, [fp, #-98]	; 0xffffff9e
     4b8:	cmp	r3, #80	; 0x50
     4bc:	beq	4cc <get_format+0x3b4>
     4c0:	ldrb	r3, [fp, #-98]	; 0xffffff9e
     4c4:	cmp	r3, #86	; 0x56
     4c8:	bne	594 <get_format+0x47c>
     4cc:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     4d0:	cmp	r3, #47	; 0x2f
     4d4:	bls	594 <get_format+0x47c>
     4d8:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     4dc:	cmp	r3, #57	; 0x39
     4e0:	bhi	594 <get_format+0x47c>
     4e4:	ldrb	r3, [fp, #-96]	; 0xffffffa0
     4e8:	cmp	r3, #47	; 0x2f
     4ec:	bls	594 <get_format+0x47c>
     4f0:	ldrb	r3, [fp, #-96]	; 0xffffffa0
     4f4:	cmp	r3, #57	; 0x39
     4f8:	bhi	594 <get_format+0x47c>
     4fc:	ldrb	r3, [fp, #-95]	; 0xffffffa1
     500:	cmp	r3, #47	; 0x2f
     504:	bls	594 <get_format+0x47c>
     508:	ldrb	r3, [fp, #-95]	; 0xffffffa1
     50c:	cmp	r3, #57	; 0x39
     510:	bhi	594 <get_format+0x47c>
     514:	ldrb	r3, [fp, #-94]	; 0xffffffa2
     518:	cmp	r3, #47	; 0x2f
     51c:	bls	594 <get_format+0x47c>
     520:	ldrb	r3, [fp, #-94]	; 0xffffffa2
     524:	cmp	r3, #57	; 0x39
     528:	bhi	594 <get_format+0x47c>
     52c:	ldrb	r3, [fp, #-93]	; 0xffffffa3
     530:	cmp	r3, #32
     534:	bne	594 <get_format+0x47c>
     538:	ldrb	r3, [fp, #-90]	; 0xffffffa6
     53c:	cmp	r3, #32
     540:	bne	594 <get_format+0x47c>
     544:	ldrb	r3, [fp, #-87]	; 0xffffffa9
     548:	cmp	r3, #32
     54c:	bne	594 <get_format+0x47c>
     550:	ldrb	r3, [fp, #-84]	; 0xffffffac
     554:	cmp	r3, #32
     558:	bne	594 <get_format+0x47c>
     55c:	ldrb	r3, [fp, #-81]	; 0xffffffaf
     560:	cmp	r3, #32
     564:	bne	594 <get_format+0x47c>
     568:	ldrb	r3, [fp, #-69]	; 0xffffffbb
     56c:	cmp	r3, #32
     570:	bne	594 <get_format+0x47c>
     574:	ldrb	r3, [fp, #-61]	; 0xffffffc3
     578:	cmp	r3, #32
     57c:	bne	594 <get_format+0x47c>
     580:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     584:	mov	r2, #9
     588:	str	r2, [r3]
     58c:	mov	r3, #0
     590:	b	6b8 <get_format+0x5a0>
     594:	ldrd	r2, [fp, #-20]	; 0xffffffec
     598:	cmp	r2, #80	; 0x50
     59c:	sbcs	r3, r3, #0
     5a0:	bge	5ac <get_format+0x494>
     5a4:	mov	r3, #0
     5a8:	b	6b8 <get_format+0x5a0>
     5ac:	sub	r1, fp, #100	; 0x64
     5b0:	sub	r0, fp, #620	; 0x26c
     5b4:	mov	r2, #20
     5b8:	mov	r3, #0
     5bc:	strd	r2, [sp]
     5c0:	mov	r2, #60	; 0x3c
     5c4:	mov	r3, #0
     5c8:	bl	0 <coda_cursor_read_bytes>
     5cc:	mov	r3, r0
     5d0:	cmp	r3, #0
     5d4:	beq	5e0 <get_format+0x4c8>
     5d8:	mvn	r3, #0
     5dc:	b	6b8 <get_format+0x5a0>
     5e0:	sub	r3, fp, #100	; 0x64
     5e4:	mov	r2, #20
     5e8:	ldr	r1, [pc, #256]	; 6f0 <get_format+0x5d8>
     5ec:	mov	r0, r3
     5f0:	bl	0 <memcmp>
     5f4:	mov	r3, r0
     5f8:	cmp	r3, #0
     5fc:	bne	614 <get_format+0x4fc>
     600:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     604:	mov	r2, #8
     608:	str	r2, [r3]
     60c:	mov	r3, #0
     610:	b	6b8 <get_format+0x5a0>
     614:	mov	r2, #512	; 0x200
     618:	mov	r3, #0
     61c:	strd	r2, [fp, #-12]
     620:	b	698 <get_format+0x580>
     624:	sub	r1, fp, #100	; 0x64
     628:	sub	r0, fp, #620	; 0x26c
     62c:	mov	r2, #8
     630:	mov	r3, #0
     634:	strd	r2, [sp]
     638:	ldrd	r2, [fp, #-12]
     63c:	bl	0 <coda_cursor_read_bytes>
     640:	mov	r3, r0
     644:	cmp	r3, #0
     648:	beq	654 <get_format+0x53c>
     64c:	mvn	r3, #0
     650:	b	6b8 <get_format+0x5a0>
     654:	sub	r3, fp, #100	; 0x64
     658:	mov	r2, #8
     65c:	ldr	r1, [pc, #104]	; 6cc <get_format+0x5b4>
     660:	mov	r0, r3
     664:	bl	0 <memcmp>
     668:	mov	r3, r0
     66c:	cmp	r3, #0
     670:	bne	688 <get_format+0x570>
     674:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     678:	mov	r2, #4
     67c:	str	r2, [r3]
     680:	mov	r3, #0
     684:	b	6b8 <get_format+0x5a0>
     688:	ldrd	r2, [fp, #-12]
     68c:	adds	r2, r2, r2
     690:	adc	r3, r3, r3
     694:	strd	r2, [fp, #-12]
     698:	ldrd	r2, [fp, #-12]
     69c:	adds	r0, r2, #8
     6a0:	adc	r1, r3, #0
     6a4:	ldrd	r2, [fp, #-20]	; 0xffffffec
     6a8:	cmp	r0, r2
     6ac:	sbcs	r3, r1, r3
     6b0:	blt	624 <get_format+0x50c>
     6b4:	mov	r3, #0
     6b8:	mov	r0, r3
     6bc:	sub	sp, fp, #4
     6c0:	pop	{fp, pc}
     6c4:	.word	0x000000c8
     6c8:	.word	0x000000cc
     6cc:	.word	0x000000d4
     6d0:	.word	0x000000e0
     6d4:	.word	0x000000ec
     6d8:	.word	0x000000f8
     6dc:	.word	0x00000104
     6e0:	.word	0x00000110
     6e4:	.word	0x0000011c
     6e8:	.word	0x00000124
     6ec:	.word	0x0000012c
     6f0:	.word	0x00000138

000006f4 <reopen_with_backend>:
     6f4:	push	{fp, lr}
     6f8:	add	fp, sp, #4
     6fc:	sub	sp, sp, #8
     700:	str	r0, [fp, #-8]
     704:	str	r1, [fp, #-12]
     708:	ldr	r3, [fp, #-12]
     70c:	cmp	r3, #9
     710:	ldrls	pc, [pc, r3, lsl #2]
     714:	b	850 <reopen_with_backend+0x15c>
     718:	.word	0x00000740
     71c:	.word	0x00000850
     720:	.word	0x00000754
     724:	.word	0x00000770
     728:	.word	0x00000784
     72c:	.word	0x00000798
     730:	.word	0x000007b4
     734:	.word	0x000007d0
     738:	.word	0x000007ec
     73c:	.word	0x00000808
     740:	ldr	r3, [pc, #280]	; 860 <reopen_with_backend+0x16c>
     744:	ldr	r2, [pc, #280]	; 864 <reopen_with_backend+0x170>
     748:	ldr	r1, [pc, #280]	; 868 <reopen_with_backend+0x174>
     74c:	ldr	r0, [pc, #280]	; 86c <reopen_with_backend+0x178>
     750:	bl	0 <__assert_fail>
     754:	ldr	r0, [fp, #-8]
     758:	bl	0 <coda_xml_reopen>
     75c:	mov	r3, r0
     760:	cmp	r3, #0
     764:	beq	824 <reopen_with_backend+0x130>
     768:	mvn	r3, #0
     76c:	b	854 <reopen_with_backend+0x160>
     770:	mov	r1, #0
     774:	mvn	r0, #10
     778:	bl	0 <coda_set_error>
     77c:	mvn	r3, #0
     780:	b	854 <reopen_with_backend+0x160>
     784:	mov	r1, #0
     788:	mvn	r0, #12
     78c:	bl	0 <coda_set_error>
     790:	mvn	r3, #0
     794:	b	854 <reopen_with_backend+0x160>
     798:	ldr	r0, [fp, #-8]
     79c:	bl	0 <coda_cdf_reopen>
     7a0:	mov	r3, r0
     7a4:	cmp	r3, #0
     7a8:	beq	82c <reopen_with_backend+0x138>
     7ac:	mvn	r3, #0
     7b0:	b	854 <reopen_with_backend+0x160>
     7b4:	ldr	r0, [fp, #-8]
     7b8:	bl	0 <coda_netcdf_reopen>
     7bc:	mov	r3, r0
     7c0:	cmp	r3, #0
     7c4:	beq	834 <reopen_with_backend+0x140>
     7c8:	mvn	r3, #0
     7cc:	b	854 <reopen_with_backend+0x160>
     7d0:	ldr	r0, [fp, #-8]
     7d4:	bl	0 <coda_grib_reopen>
     7d8:	mov	r3, r0
     7dc:	cmp	r3, #0
     7e0:	beq	83c <reopen_with_backend+0x148>
     7e4:	mvn	r3, #0
     7e8:	b	854 <reopen_with_backend+0x160>
     7ec:	ldr	r0, [fp, #-8]
     7f0:	bl	0 <coda_rinex_reopen>
     7f4:	mov	r3, r0
     7f8:	cmp	r3, #0
     7fc:	beq	844 <reopen_with_backend+0x150>
     800:	mvn	r3, #0
     804:	b	854 <reopen_with_backend+0x160>
     808:	ldr	r0, [fp, #-8]
     80c:	bl	0 <coda_sp3_reopen>
     810:	mov	r3, r0
     814:	cmp	r3, #0
     818:	beq	84c <reopen_with_backend+0x158>
     81c:	mvn	r3, #0
     820:	b	854 <reopen_with_backend+0x160>
     824:	nop			; (mov r0, r0)
     828:	b	850 <reopen_with_backend+0x15c>
     82c:	nop			; (mov r0, r0)
     830:	b	850 <reopen_with_backend+0x15c>
     834:	nop			; (mov r0, r0)
     838:	b	850 <reopen_with_backend+0x15c>
     83c:	nop			; (mov r0, r0)
     840:	b	850 <reopen_with_backend+0x15c>
     844:	nop			; (mov r0, r0)
     848:	b	850 <reopen_with_backend+0x15c>
     84c:	nop			; (mov r0, r0)
     850:	mov	r3, #0
     854:	mov	r0, r3
     858:	sub	sp, fp, #4
     85c:	pop	{fp, pc}
     860:	.word	0x000003bc
     864:	.word	0x0000016a
     868:	.word	0x00000000
     86c:	.word	0x00000150

00000870 <set_definition>:
     870:	push	{r4, fp, lr}
     874:	add	fp, sp, #8
     878:	sub	sp, sp, #28
     87c:	str	r0, [fp, #-24]	; 0xffffffe8
     880:	str	r1, [fp, #-28]	; 0xffffffe4
     884:	ldr	r3, [fp, #-28]	; 0xffffffe4
     888:	cmp	r3, #0
     88c:	bne	8d4 <set_definition+0x64>
     890:	ldr	r3, [fp, #-24]	; 0xffffffe8
     894:	ldr	r3, [r3]
     898:	ldr	r3, [r3, #16]
     89c:	cmp	r3, #1
     8a0:	beq	8b8 <set_definition+0x48>
     8a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8a8:	ldr	r3, [r3]
     8ac:	ldr	r3, [r3, #16]
     8b0:	cmp	r3, #0
     8b4:	bne	8cc <set_definition+0x5c>
     8b8:	mov	r1, #0
     8bc:	mvn	r0, #199	; 0xc7
     8c0:	bl	0 <coda_set_error>
     8c4:	mvn	r3, #0
     8c8:	b	b60 <set_definition+0x2f0>
     8cc:	mov	r3, #0
     8d0:	b	b60 <set_definition+0x2f0>
     8d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8d8:	ldr	r3, [r3]
     8dc:	ldr	r2, [r3, #16]
     8e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     8e4:	ldr	r3, [r3]
     8e8:	cmp	r2, r3
     8ec:	beq	958 <set_definition+0xe8>
     8f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8f4:	ldr	r3, [r3]
     8f8:	ldr	r3, [r3, #16]
     8fc:	cmp	r3, #1
     900:	bne	914 <set_definition+0xa4>
     904:	ldr	r3, [fp, #-28]	; 0xffffffe4
     908:	ldr	r3, [r3]
     90c:	cmp	r3, #0
     910:	beq	958 <set_definition+0xe8>
     914:	ldr	r3, [fp, #-28]	; 0xffffffe4
     918:	ldr	r3, [r3]
     91c:	mov	r0, r3
     920:	bl	0 <coda_type_get_format_name>
     924:	mov	r4, r0
     928:	ldr	r3, [fp, #-24]	; 0xffffffe8
     92c:	ldr	r3, [r3]
     930:	ldr	r3, [r3, #16]
     934:	mov	r0, r3
     938:	bl	0 <coda_type_get_format_name>
     93c:	mov	r3, r0
     940:	mov	r2, r4
     944:	ldr	r1, [pc, #544]	; b6c <set_definition+0x2fc>
     948:	mvn	r0, #199	; 0xc7
     94c:	bl	0 <coda_set_error>
     950:	mvn	r3, #0
     954:	b	b60 <set_definition+0x2f0>
     958:	ldr	r3, [fp, #-28]	; 0xffffffe4
     95c:	ldr	r3, [r3, #24]
     960:	cmp	r3, #0
     964:	bne	984 <set_definition+0x114>
     968:	ldr	r0, [fp, #-28]	; 0xffffffe4
     96c:	bl	0 <coda_read_product_definition>
     970:	mov	r3, r0
     974:	cmp	r3, #0
     978:	beq	984 <set_definition+0x114>
     97c:	mvn	r3, #0
     980:	b	b60 <set_definition+0x2f0>
     984:	ldr	r3, [fp, #-28]	; 0xffffffe4
     988:	ldr	r3, [r3]
     98c:	cmp	r3, #1
     990:	beq	9c8 <set_definition+0x158>
     994:	cmp	r3, #1
     998:	bcc	9a8 <set_definition+0x138>
     99c:	cmp	r3, #2
     9a0:	beq	9e8 <set_definition+0x178>
     9a4:	b	a08 <set_definition+0x198>
     9a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9b0:	bl	0 <coda_ascii_reopen_with_definition>
     9b4:	mov	r3, r0
     9b8:	cmp	r3, #0
     9bc:	beq	a1c <set_definition+0x1ac>
     9c0:	mvn	r3, #0
     9c4:	b	b60 <set_definition+0x2f0>
     9c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9d0:	bl	0 <coda_bin_reopen_with_definition>
     9d4:	mov	r3, r0
     9d8:	cmp	r3, #0
     9dc:	beq	a24 <set_definition+0x1b4>
     9e0:	mvn	r3, #0
     9e4:	b	b60 <set_definition+0x2f0>
     9e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9f0:	bl	0 <coda_xml_reopen_with_definition>
     9f4:	mov	r3, r0
     9f8:	cmp	r3, #0
     9fc:	beq	a2c <set_definition+0x1bc>
     a00:	mvn	r3, #0
     a04:	b	b60 <set_definition+0x2f0>
     a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a0c:	ldr	r3, [r3]
     a10:	ldr	r2, [fp, #-28]	; 0xffffffe4
     a14:	str	r2, [r3, #24]
     a18:	b	a30 <set_definition+0x1c0>
     a1c:	nop			; (mov r0, r0)
     a20:	b	a30 <set_definition+0x1c0>
     a24:	nop			; (mov r0, r0)
     a28:	b	a30 <set_definition+0x1c0>
     a2c:	nop			; (mov r0, r0)
     a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a34:	ldr	r3, [r3]
     a38:	ldr	r3, [r3, #24]
     a3c:	ldr	r3, [r3, #32]
     a40:	cmp	r3, #0
     a44:	ble	b5c <set_definition+0x2ec>
     a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a4c:	ldr	r3, [r3]
     a50:	ldr	r3, [r3, #24]
     a54:	ldr	r3, [r3, #32]
     a58:	str	r3, [fp, #-20]	; 0xffffffec
     a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a60:	ldr	r4, [r3]
     a64:	ldr	r3, [fp, #-20]	; 0xffffffec
     a68:	lsl	r3, r3, #2
     a6c:	mov	r0, r3
     a70:	bl	0 <malloc>
     a74:	mov	r3, r0
     a78:	str	r3, [r4, #28]
     a7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a80:	ldr	r3, [r3]
     a84:	ldr	r3, [r3, #28]
     a88:	cmp	r3, #0
     a8c:	bne	ab8 <set_definition+0x248>
     a90:	ldr	r3, [fp, #-20]	; 0xffffffec
     a94:	lsl	r2, r3, #2
     a98:	mov	r3, #500	; 0x1f4
     a9c:	str	r3, [sp]
     aa0:	ldr	r3, [pc, #200]	; b70 <set_definition+0x300>
     aa4:	ldr	r1, [pc, #200]	; b74 <set_definition+0x304>
     aa8:	mvn	r0, #0
     aac:	bl	0 <coda_set_error>
     ab0:	mvn	r3, #0
     ab4:	b	b60 <set_definition+0x2f0>
     ab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     abc:	ldr	r4, [r3]
     ac0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ac4:	lsl	r3, r3, #2
     ac8:	mov	r0, r3
     acc:	bl	0 <malloc>
     ad0:	mov	r3, r0
     ad4:	str	r3, [r4, #32]
     ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     adc:	ldr	r3, [r3]
     ae0:	ldr	r3, [r3, #32]
     ae4:	cmp	r3, #0
     ae8:	bne	b14 <set_definition+0x2a4>
     aec:	ldr	r3, [fp, #-20]	; 0xffffffec
     af0:	lsl	r2, r3, #2
     af4:	ldr	r3, [pc, #124]	; b78 <set_definition+0x308>
     af8:	str	r3, [sp]
     afc:	ldr	r3, [pc, #108]	; b70 <set_definition+0x300>
     b00:	ldr	r1, [pc, #108]	; b74 <set_definition+0x304>
     b04:	mvn	r0, #0
     b08:	bl	0 <coda_set_error>
     b0c:	mvn	r3, #0
     b10:	b	b60 <set_definition+0x2f0>
     b14:	mov	r3, #0
     b18:	str	r3, [fp, #-16]
     b1c:	b	b4c <set_definition+0x2dc>
     b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b24:	ldr	r3, [r3]
     b28:	ldr	r2, [r3, #32]
     b2c:	ldr	r3, [fp, #-16]
     b30:	lsl	r3, r3, #2
     b34:	add	r3, r2, r3
     b38:	mov	r2, #0
     b3c:	str	r2, [r3]
     b40:	ldr	r3, [fp, #-16]
     b44:	add	r3, r3, #1
     b48:	str	r3, [fp, #-16]
     b4c:	ldr	r2, [fp, #-16]
     b50:	ldr	r3, [fp, #-20]	; 0xffffffec
     b54:	cmp	r2, r3
     b58:	blt	b20 <set_definition+0x2b0>
     b5c:	mov	r3, #0
     b60:	mov	r0, r3
     b64:	sub	sp, fp, #8
     b68:	pop	{r4, fp, pc}
     b6c:	.word	0x00000154
     b70:	.word	0x00000000
     b74:	.word	0x0000017c
     b78:	.word	0x000001fb

00000b7c <open_file>:
     b7c:	push	{fp, lr}
     b80:	add	fp, sp, #4
     b84:	sub	sp, sp, #48	; 0x30
     b88:	str	r0, [fp, #-32]	; 0xffffffe0
     b8c:	str	r1, [fp, #-36]	; 0xffffffdc
     b90:	str	r2, [fp, #-40]	; 0xffffffd8
     b94:	sub	r3, fp, #20
     b98:	mov	r1, r3
     b9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ba0:	bl	0 <get_file_size>
     ba4:	mov	r3, r0
     ba8:	cmp	r3, #0
     bac:	beq	bb8 <open_file+0x3c>
     bb0:	mvn	r3, #0
     bb4:	b	c64 <open_file+0xe8>
     bb8:	ldrd	r2, [fp, #-20]	; 0xffffffec
     bbc:	sub	r1, fp, #8
     bc0:	str	r1, [sp]
     bc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     bc8:	bl	0 <coda_bin_open>
     bcc:	mov	r3, r0
     bd0:	cmp	r3, #0
     bd4:	beq	be0 <open_file+0x64>
     bd8:	mvn	r3, #0
     bdc:	b	c64 <open_file+0xe8>
     be0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     be4:	cmp	r3, #0
     be8:	beq	bf8 <open_file+0x7c>
     bec:	mov	r3, #1
     bf0:	str	r3, [fp, #-24]	; 0xffffffe8
     bf4:	b	c2c <open_file+0xb0>
     bf8:	ldr	r3, [fp, #-8]
     bfc:	sub	r2, fp, #24
     c00:	mov	r1, r2
     c04:	mov	r0, r3
     c08:	bl	118 <get_format>
     c0c:	mov	r3, r0
     c10:	cmp	r3, #0
     c14:	beq	c2c <open_file+0xb0>
     c18:	ldr	r3, [fp, #-8]
     c1c:	mov	r0, r3
     c20:	bl	10f4 <coda_close>
     c24:	mvn	r3, #0
     c28:	b	c64 <open_file+0xe8>
     c2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c30:	sub	r3, fp, #8
     c34:	mov	r1, r2
     c38:	mov	r0, r3
     c3c:	bl	6f4 <reopen_with_backend>
     c40:	mov	r3, r0
     c44:	cmp	r3, #0
     c48:	beq	c54 <open_file+0xd8>
     c4c:	mvn	r3, #0
     c50:	b	c64 <open_file+0xe8>
     c54:	ldr	r2, [fp, #-8]
     c58:	ldr	r3, [fp, #-36]	; 0xffffffdc
     c5c:	str	r2, [r3]
     c60:	mov	r3, #0
     c64:	mov	r0, r3
     c68:	sub	sp, fp, #4
     c6c:	pop	{fp, pc}

00000c70 <coda_recognize_file>:
     c70:	push	{fp, lr}
     c74:	add	fp, sp, #4
     c78:	sub	sp, sp, #24
     c7c:	str	r0, [fp, #-16]
     c80:	str	r1, [fp, #-20]	; 0xffffffec
     c84:	str	r2, [fp, #-24]	; 0xffffffe8
     c88:	str	r3, [fp, #-28]	; 0xffffffe4
     c8c:	mov	r3, #0
     c90:	str	r3, [fp, #-8]
     c94:	sub	r3, fp, #12
     c98:	mov	r2, #0
     c9c:	mov	r1, r3
     ca0:	ldr	r0, [fp, #-16]
     ca4:	bl	b7c <open_file>
     ca8:	mov	r3, r0
     cac:	cmp	r3, #0
     cb0:	beq	cbc <coda_recognize_file+0x4c>
     cb4:	mvn	r3, #0
     cb8:	b	e0c <coda_recognize_file+0x19c>
     cbc:	ldr	r3, [fp, #-12]
     cc0:	sub	r2, fp, #8
     cc4:	mov	r1, r2
     cc8:	mov	r0, r3
     ccc:	bl	0 <coda_data_dictionary_find_definition_for_product>
     cd0:	mov	r3, r0
     cd4:	cmp	r3, #0
     cd8:	beq	cf0 <coda_recognize_file+0x80>
     cdc:	ldr	r3, [fp, #-12]
     ce0:	mov	r0, r3
     ce4:	bl	10f4 <coda_close>
     ce8:	mvn	r3, #0
     cec:	b	e0c <coda_recognize_file+0x19c>
     cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
     cf4:	cmp	r3, #0
     cf8:	beq	d0c <coda_recognize_file+0x9c>
     cfc:	ldr	r3, [fp, #-12]
     d00:	ldrd	r2, [r3, #8]
     d04:	ldr	r1, [fp, #-20]	; 0xffffffec
     d08:	strd	r2, [r1]
     d0c:	ldr	r3, [fp, #-8]
     d10:	cmp	r3, #0
     d14:	bne	d80 <coda_recognize_file+0x110>
     d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d1c:	cmp	r3, #0
     d20:	beq	d34 <coda_recognize_file+0xc4>
     d24:	ldr	r3, [fp, #-12]
     d28:	ldr	r2, [r3, #16]
     d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d30:	str	r2, [r3]
     d34:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d38:	cmp	r3, #0
     d3c:	beq	d4c <coda_recognize_file+0xdc>
     d40:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d44:	mov	r2, #0
     d48:	str	r2, [r3]
     d4c:	ldr	r3, [fp, #4]
     d50:	cmp	r3, #0
     d54:	beq	d64 <coda_recognize_file+0xf4>
     d58:	ldr	r3, [fp, #4]
     d5c:	mov	r2, #0
     d60:	str	r2, [r3]
     d64:	ldr	r3, [fp, #8]
     d68:	cmp	r3, #0
     d6c:	beq	dfc <coda_recognize_file+0x18c>
     d70:	ldr	r3, [fp, #8]
     d74:	mvn	r2, #0
     d78:	str	r2, [r3]
     d7c:	b	dfc <coda_recognize_file+0x18c>
     d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d84:	cmp	r3, #0
     d88:	beq	d9c <coda_recognize_file+0x12c>
     d8c:	ldr	r3, [fp, #-8]
     d90:	ldr	r2, [r3]
     d94:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d98:	str	r2, [r3]
     d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     da0:	cmp	r3, #0
     da4:	beq	dc0 <coda_recognize_file+0x150>
     da8:	ldr	r3, [fp, #-8]
     dac:	ldr	r3, [r3, #44]	; 0x2c
     db0:	ldr	r3, [r3, #20]
     db4:	ldr	r2, [r3]
     db8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dbc:	str	r2, [r3]
     dc0:	ldr	r3, [fp, #4]
     dc4:	cmp	r3, #0
     dc8:	beq	de0 <coda_recognize_file+0x170>
     dcc:	ldr	r3, [fp, #-8]
     dd0:	ldr	r3, [r3, #44]	; 0x2c
     dd4:	ldr	r2, [r3]
     dd8:	ldr	r3, [fp, #4]
     ddc:	str	r2, [r3]
     de0:	ldr	r3, [fp, #8]
     de4:	cmp	r3, #0
     de8:	beq	dfc <coda_recognize_file+0x18c>
     dec:	ldr	r3, [fp, #-8]
     df0:	ldr	r2, [r3, #4]
     df4:	ldr	r3, [fp, #8]
     df8:	str	r2, [r3]
     dfc:	ldr	r3, [fp, #-12]
     e00:	mov	r0, r3
     e04:	bl	10f4 <coda_close>
     e08:	mov	r3, #0
     e0c:	mov	r0, r3
     e10:	sub	sp, fp, #4
     e14:	pop	{fp, pc}

00000e18 <coda_open>:
     e18:	push	{fp, lr}
     e1c:	add	fp, sp, #4
     e20:	sub	sp, sp, #16
     e24:	str	r0, [fp, #-16]
     e28:	str	r1, [fp, #-20]	; 0xffffffec
     e2c:	mov	r3, #0
     e30:	str	r3, [fp, #-8]
     e34:	ldr	r3, [fp, #-16]
     e38:	cmp	r3, #0
     e3c:	bne	e5c <coda_open+0x44>
     e40:	mov	r3, #668	; 0x29c
     e44:	ldr	r2, [pc, #228]	; f30 <coda_open+0x118>
     e48:	ldr	r1, [pc, #228]	; f34 <coda_open+0x11c>
     e4c:	mvn	r0, #99	; 0x63
     e50:	bl	0 <coda_set_error>
     e54:	mvn	r3, #0
     e58:	b	f24 <coda_open+0x10c>
     e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
     e60:	cmp	r3, #0
     e64:	bne	e84 <coda_open+0x6c>
     e68:	ldr	r3, [pc, #200]	; f38 <coda_open+0x120>
     e6c:	ldr	r2, [pc, #188]	; f30 <coda_open+0x118>
     e70:	ldr	r1, [pc, #196]	; f3c <coda_open+0x124>
     e74:	mvn	r0, #99	; 0x63
     e78:	bl	0 <coda_set_error>
     e7c:	mvn	r3, #0
     e80:	b	f24 <coda_open+0x10c>
     e84:	sub	r3, fp, #12
     e88:	mov	r2, #0
     e8c:	mov	r1, r3
     e90:	ldr	r0, [fp, #-16]
     e94:	bl	b7c <open_file>
     e98:	mov	r3, r0
     e9c:	cmp	r3, #0
     ea0:	beq	eac <coda_open+0x94>
     ea4:	mvn	r3, #0
     ea8:	b	f24 <coda_open+0x10c>
     eac:	ldr	r3, [fp, #-12]
     eb0:	sub	r2, fp, #8
     eb4:	mov	r1, r2
     eb8:	mov	r0, r3
     ebc:	bl	0 <coda_data_dictionary_find_definition_for_product>
     ec0:	mov	r3, r0
     ec4:	cmp	r3, #0
     ec8:	beq	ee0 <coda_open+0xc8>
     ecc:	ldr	r3, [fp, #-12]
     ed0:	mov	r0, r3
     ed4:	bl	10f4 <coda_close>
     ed8:	mvn	r3, #0
     edc:	b	f24 <coda_open+0x10c>
     ee0:	ldr	r2, [fp, #-8]
     ee4:	sub	r3, fp, #12
     ee8:	mov	r1, r2
     eec:	mov	r0, r3
     ef0:	bl	870 <set_definition>
     ef4:	mov	r3, r0
     ef8:	cmp	r3, #0
     efc:	beq	f14 <coda_open+0xfc>
     f00:	ldr	r3, [fp, #-12]
     f04:	mov	r0, r3
     f08:	bl	10f4 <coda_close>
     f0c:	mvn	r3, #0
     f10:	b	f24 <coda_open+0x10c>
     f14:	ldr	r2, [fp, #-12]
     f18:	ldr	r3, [fp, #-20]	; 0xffffffec
     f1c:	str	r2, [r3]
     f20:	mov	r3, #0
     f24:	mov	r0, r3
     f28:	sub	sp, fp, #4
     f2c:	pop	{fp, pc}
     f30:	.word	0x00000000
     f34:	.word	0x000001b4
     f38:	.word	0x000002a1
     f3c:	.word	0x000001d8

00000f40 <coda_open_as>:
     f40:	push	{fp, lr}
     f44:	add	fp, sp, #4
     f48:	sub	sp, sp, #32
     f4c:	str	r0, [fp, #-24]	; 0xffffffe8
     f50:	str	r1, [fp, #-28]	; 0xffffffe4
     f54:	str	r2, [fp, #-32]	; 0xffffffe0
     f58:	str	r3, [fp, #-36]	; 0xffffffdc
     f5c:	mov	r3, #0
     f60:	str	r3, [fp, #-12]
     f64:	mov	r3, #0
     f68:	str	r3, [fp, #-8]
     f6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f70:	cmp	r3, #0
     f74:	bne	f94 <coda_open_as+0x54>
     f78:	ldr	r3, [pc, #344]	; 10d8 <coda_open_as+0x198>
     f7c:	ldr	r2, [pc, #344]	; 10dc <coda_open_as+0x19c>
     f80:	ldr	r1, [pc, #344]	; 10e0 <coda_open_as+0x1a0>
     f84:	mvn	r0, #99	; 0x63
     f88:	bl	0 <coda_set_error>
     f8c:	mvn	r3, #0
     f90:	b	10cc <coda_open_as+0x18c>
     f94:	ldr	r3, [fp, #-28]	; 0xffffffe4
     f98:	cmp	r3, #0
     f9c:	beq	ff0 <coda_open_as+0xb0>
     fa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fa4:	cmp	r3, #0
     fa8:	bne	fc8 <coda_open_as+0x88>
     fac:	ldr	r3, [pc, #304]	; 10e4 <coda_open_as+0x1a4>
     fb0:	ldr	r2, [pc, #292]	; 10dc <coda_open_as+0x19c>
     fb4:	ldr	r1, [pc, #300]	; 10e8 <coda_open_as+0x1a8>
     fb8:	mvn	r0, #99	; 0x63
     fbc:	bl	0 <coda_set_error>
     fc0:	mvn	r3, #0
     fc4:	b	10cc <coda_open_as+0x18c>
     fc8:	ldr	r3, [fp, #4]
     fcc:	cmp	r3, #0
     fd0:	bne	ff0 <coda_open_as+0xb0>
     fd4:	ldr	r3, [pc, #272]	; 10ec <coda_open_as+0x1ac>
     fd8:	ldr	r2, [pc, #252]	; 10dc <coda_open_as+0x19c>
     fdc:	ldr	r1, [pc, #268]	; 10f0 <coda_open_as+0x1b0>
     fe0:	mvn	r0, #99	; 0x63
     fe4:	bl	0 <coda_set_error>
     fe8:	mvn	r3, #0
     fec:	b	10cc <coda_open_as+0x18c>
     ff0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ff4:	cmp	r3, #0
     ff8:	beq	1060 <coda_open_as+0x120>
     ffc:	sub	r3, fp, #12
    1000:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1004:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1008:	ldr	r0, [fp, #-28]	; 0xffffffe4
    100c:	bl	0 <coda_data_dictionary_get_definition>
    1010:	mov	r3, r0
    1014:	cmp	r3, #0
    1018:	beq	1024 <coda_open_as+0xe4>
    101c:	mvn	r3, #0
    1020:	b	10cc <coda_open_as+0x18c>
    1024:	ldr	r3, [fp, #-12]
    1028:	cmp	r3, #0
    102c:	beq	1060 <coda_open_as+0x120>
    1030:	ldr	r3, [fp, #-12]
    1034:	ldr	r3, [r3]
    1038:	cmp	r3, #0
    103c:	beq	1050 <coda_open_as+0x110>
    1040:	ldr	r3, [fp, #-12]
    1044:	ldr	r3, [r3]
    1048:	cmp	r3, #1
    104c:	bne	1058 <coda_open_as+0x118>
    1050:	mov	r3, #1
    1054:	b	105c <coda_open_as+0x11c>
    1058:	mov	r3, #0
    105c:	str	r3, [fp, #-8]
    1060:	sub	r3, fp, #16
    1064:	ldr	r2, [fp, #-8]
    1068:	mov	r1, r3
    106c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1070:	bl	b7c <open_file>
    1074:	mov	r3, r0
    1078:	cmp	r3, #0
    107c:	beq	1088 <coda_open_as+0x148>
    1080:	mvn	r3, #0
    1084:	b	10cc <coda_open_as+0x18c>
    1088:	ldr	r2, [fp, #-12]
    108c:	sub	r3, fp, #16
    1090:	mov	r1, r2
    1094:	mov	r0, r3
    1098:	bl	870 <set_definition>
    109c:	mov	r3, r0
    10a0:	cmp	r3, #0
    10a4:	beq	10bc <coda_open_as+0x17c>
    10a8:	ldr	r3, [fp, #-16]
    10ac:	mov	r0, r3
    10b0:	bl	10f4 <coda_close>
    10b4:	mvn	r3, #0
    10b8:	b	10cc <coda_open_as+0x18c>
    10bc:	ldr	r2, [fp, #-16]
    10c0:	ldr	r3, [fp, #4]
    10c4:	str	r2, [r3]
    10c8:	mov	r3, #0
    10cc:	mov	r0, r3
    10d0:	sub	sp, fp, #4
    10d4:	pop	{fp, pc}
    10d8:	.word	0x000002cf
    10dc:	.word	0x00000000
    10e0:	.word	0x000001b4
    10e4:	.word	0x000002d6
    10e8:	.word	0x000001fc
    10ec:	.word	0x000002db
    10f0:	.word	0x000001d8

000010f4 <coda_close>:
    10f4:	push	{fp, lr}
    10f8:	add	fp, sp, #4
    10fc:	sub	sp, sp, #16
    1100:	str	r0, [fp, #-16]
    1104:	ldr	r3, [fp, #-16]
    1108:	cmp	r3, #0
    110c:	bne	112c <coda_close+0x38>
    1110:	ldr	r3, [pc, #480]	; 12f8 <coda_close+0x204>
    1114:	ldr	r2, [pc, #480]	; 12fc <coda_close+0x208>
    1118:	ldr	r1, [pc, #480]	; 1300 <coda_close+0x20c>
    111c:	mvn	r0, #99	; 0x63
    1120:	bl	0 <coda_set_error>
    1124:	mvn	r3, #0
    1128:	b	12ec <coda_close+0x1f8>
    112c:	ldr	r3, [fp, #-16]
    1130:	ldr	r3, [r3, #28]
    1134:	cmp	r3, #0
    1138:	beq	1158 <coda_close+0x64>
    113c:	ldr	r3, [fp, #-16]
    1140:	ldr	r3, [r3, #28]
    1144:	mov	r0, r3
    1148:	bl	0 <free>
    114c:	ldr	r3, [fp, #-16]
    1150:	mov	r2, #0
    1154:	str	r2, [r3, #28]
    1158:	ldr	r3, [fp, #-16]
    115c:	ldr	r3, [r3, #32]
    1160:	cmp	r3, #0
    1164:	beq	11f4 <coda_close+0x100>
    1168:	mov	r3, #0
    116c:	str	r3, [fp, #-8]
    1170:	b	11c0 <coda_close+0xcc>
    1174:	ldr	r3, [fp, #-16]
    1178:	ldr	r2, [r3, #32]
    117c:	ldr	r3, [fp, #-8]
    1180:	lsl	r3, r3, #2
    1184:	add	r3, r2, r3
    1188:	ldr	r3, [r3]
    118c:	cmp	r3, #0
    1190:	beq	11b4 <coda_close+0xc0>
    1194:	ldr	r3, [fp, #-16]
    1198:	ldr	r2, [r3, #32]
    119c:	ldr	r3, [fp, #-8]
    11a0:	lsl	r3, r3, #2
    11a4:	add	r3, r2, r3
    11a8:	ldr	r3, [r3]
    11ac:	mov	r0, r3
    11b0:	bl	0 <free>
    11b4:	ldr	r3, [fp, #-8]
    11b8:	add	r3, r3, #1
    11bc:	str	r3, [fp, #-8]
    11c0:	ldr	r3, [fp, #-16]
    11c4:	ldr	r3, [r3, #24]
    11c8:	ldr	r2, [r3, #32]
    11cc:	ldr	r3, [fp, #-8]
    11d0:	cmp	r2, r3
    11d4:	bgt	1174 <coda_close+0x80>
    11d8:	ldr	r3, [fp, #-16]
    11dc:	ldr	r3, [r3, #32]
    11e0:	mov	r0, r3
    11e4:	bl	0 <free>
    11e8:	ldr	r3, [fp, #-16]
    11ec:	mov	r2, #0
    11f0:	str	r2, [r3, #32]
    11f4:	ldr	r3, [fp, #-16]
    11f8:	ldr	r3, [r3, #16]
    11fc:	cmp	r3, #9
    1200:	ldrls	pc, [pc, r3, lsl #2]
    1204:	b	12d8 <coda_close+0x1e4>
    1208:	.word	0x00001230
    120c:	.word	0x00001240
    1210:	.word	0x00001250
    1214:	.word	0x00001290
    1218:	.word	0x000012a4
    121c:	.word	0x00001260
    1220:	.word	0x00001270
    1224:	.word	0x00001280
    1228:	.word	0x000012b8
    122c:	.word	0x000012c8
    1230:	ldr	r0, [fp, #-16]
    1234:	bl	0 <coda_ascii_close>
    1238:	mov	r3, r0
    123c:	b	12ec <coda_close+0x1f8>
    1240:	ldr	r0, [fp, #-16]
    1244:	bl	0 <coda_bin_close>
    1248:	mov	r3, r0
    124c:	b	12ec <coda_close+0x1f8>
    1250:	ldr	r0, [fp, #-16]
    1254:	bl	0 <coda_xml_close>
    1258:	mov	r3, r0
    125c:	b	12ec <coda_close+0x1f8>
    1260:	ldr	r0, [fp, #-16]
    1264:	bl	0 <coda_cdf_close>
    1268:	mov	r3, r0
    126c:	b	12ec <coda_close+0x1f8>
    1270:	ldr	r0, [fp, #-16]
    1274:	bl	0 <coda_netcdf_close>
    1278:	mov	r3, r0
    127c:	b	12ec <coda_close+0x1f8>
    1280:	ldr	r0, [fp, #-16]
    1284:	bl	0 <coda_grib_close>
    1288:	mov	r3, r0
    128c:	b	12ec <coda_close+0x1f8>
    1290:	mov	r1, #0
    1294:	mvn	r0, #10
    1298:	bl	0 <coda_set_error>
    129c:	mvn	r3, #0
    12a0:	b	12ec <coda_close+0x1f8>
    12a4:	mov	r1, #0
    12a8:	mvn	r0, #12
    12ac:	bl	0 <coda_set_error>
    12b0:	mvn	r3, #0
    12b4:	b	12ec <coda_close+0x1f8>
    12b8:	ldr	r0, [fp, #-16]
    12bc:	bl	0 <coda_rinex_close>
    12c0:	mov	r3, r0
    12c4:	b	12ec <coda_close+0x1f8>
    12c8:	ldr	r0, [fp, #-16]
    12cc:	bl	0 <coda_sp3_close>
    12d0:	mov	r3, r0
    12d4:	b	12ec <coda_close+0x1f8>
    12d8:	ldr	r3, [pc, #36]	; 1304 <coda_close+0x210>
    12dc:	mov	r2, #836	; 0x344
    12e0:	ldr	r1, [pc, #20]	; 12fc <coda_close+0x208>
    12e4:	ldr	r0, [pc, #28]	; 1308 <coda_close+0x214>
    12e8:	bl	0 <__assert_fail>
    12ec:	mov	r0, r3
    12f0:	sub	sp, fp, #4
    12f4:	pop	{fp, pc}
    12f8:	.word	0x00000309
    12fc:	.word	0x00000000
    1300:	.word	0x00000224
    1304:	.word	0x000003d0
    1308:	.word	0x00000150

0000130c <coda_get_product_filename>:
    130c:	push	{fp, lr}
    1310:	add	fp, sp, #4
    1314:	sub	sp, sp, #8
    1318:	str	r0, [fp, #-8]
    131c:	str	r1, [fp, #-12]
    1320:	ldr	r3, [fp, #-8]
    1324:	cmp	r3, #0
    1328:	bne	1348 <coda_get_product_filename+0x3c>
    132c:	mov	r3, #856	; 0x358
    1330:	ldr	r2, [pc, #48]	; 1368 <coda_get_product_filename+0x5c>
    1334:	ldr	r1, [pc, #48]	; 136c <coda_get_product_filename+0x60>
    1338:	mvn	r0, #99	; 0x63
    133c:	bl	0 <coda_set_error>
    1340:	mvn	r3, #0
    1344:	b	135c <coda_get_product_filename+0x50>
    1348:	ldr	r3, [fp, #-8]
    134c:	ldr	r2, [r3]
    1350:	ldr	r3, [fp, #-12]
    1354:	str	r2, [r3]
    1358:	mov	r3, #0
    135c:	mov	r0, r3
    1360:	sub	sp, fp, #4
    1364:	pop	{fp, pc}
    1368:	.word	0x00000000
    136c:	.word	0x00000224

00001370 <coda_get_product_file_size>:
    1370:	push	{fp, lr}
    1374:	add	fp, sp, #4
    1378:	sub	sp, sp, #8
    137c:	str	r0, [fp, #-8]
    1380:	str	r1, [fp, #-12]
    1384:	ldr	r3, [fp, #-8]
    1388:	cmp	r3, #0
    138c:	bne	13ac <coda_get_product_file_size+0x3c>
    1390:	mov	r3, #876	; 0x36c
    1394:	ldr	r2, [pc, #88]	; 13f4 <coda_get_product_file_size+0x84>
    1398:	ldr	r1, [pc, #88]	; 13f8 <coda_get_product_file_size+0x88>
    139c:	mvn	r0, #99	; 0x63
    13a0:	bl	0 <coda_set_error>
    13a4:	mvn	r3, #0
    13a8:	b	13e8 <coda_get_product_file_size+0x78>
    13ac:	ldr	r3, [fp, #-12]
    13b0:	cmp	r3, #0
    13b4:	bne	13d4 <coda_get_product_file_size+0x64>
    13b8:	ldr	r3, [pc, #60]	; 13fc <coda_get_product_file_size+0x8c>
    13bc:	ldr	r2, [pc, #48]	; 13f4 <coda_get_product_file_size+0x84>
    13c0:	ldr	r1, [pc, #56]	; 1400 <coda_get_product_file_size+0x90>
    13c4:	mvn	r0, #99	; 0x63
    13c8:	bl	0 <coda_set_error>
    13cc:	mvn	r3, #0
    13d0:	b	13e8 <coda_get_product_file_size+0x78>
    13d4:	ldr	r3, [fp, #-8]
    13d8:	ldrd	r2, [r3, #8]
    13dc:	ldr	r1, [fp, #-12]
    13e0:	strd	r2, [r1]
    13e4:	mov	r3, #0
    13e8:	mov	r0, r3
    13ec:	sub	sp, fp, #4
    13f0:	pop	{fp, pc}
    13f4:	.word	0x00000000
    13f8:	.word	0x00000224
    13fc:	.word	0x00000371
    1400:	.word	0x0000024c

00001404 <coda_get_product_format>:
    1404:	push	{fp, lr}
    1408:	add	fp, sp, #4
    140c:	sub	sp, sp, #8
    1410:	str	r0, [fp, #-8]
    1414:	str	r1, [fp, #-12]
    1418:	ldr	r3, [fp, #-8]
    141c:	cmp	r3, #0
    1420:	bne	1440 <coda_get_product_format+0x3c>
    1424:	mov	r3, #904	; 0x388
    1428:	ldr	r2, [pc, #88]	; 1488 <coda_get_product_format+0x84>
    142c:	ldr	r1, [pc, #88]	; 148c <coda_get_product_format+0x88>
    1430:	mvn	r0, #99	; 0x63
    1434:	bl	0 <coda_set_error>
    1438:	mvn	r3, #0
    143c:	b	147c <coda_get_product_format+0x78>
    1440:	ldr	r3, [fp, #-12]
    1444:	cmp	r3, #0
    1448:	bne	1468 <coda_get_product_format+0x64>
    144c:	ldr	r3, [pc, #60]	; 1490 <coda_get_product_format+0x8c>
    1450:	ldr	r2, [pc, #48]	; 1488 <coda_get_product_format+0x84>
    1454:	ldr	r1, [pc, #56]	; 1494 <coda_get_product_format+0x90>
    1458:	mvn	r0, #99	; 0x63
    145c:	bl	0 <coda_set_error>
    1460:	mvn	r3, #0
    1464:	b	147c <coda_get_product_format+0x78>
    1468:	ldr	r3, [fp, #-8]
    146c:	ldr	r2, [r3, #16]
    1470:	ldr	r3, [fp, #-12]
    1474:	str	r2, [r3]
    1478:	mov	r3, #0
    147c:	mov	r0, r3
    1480:	sub	sp, fp, #4
    1484:	pop	{fp, pc}
    1488:	.word	0x00000000
    148c:	.word	0x00000224
    1490:	.word	0x0000038d
    1494:	.word	0x00000270

00001498 <coda_get_product_class>:
    1498:	push	{fp, lr}
    149c:	add	fp, sp, #4
    14a0:	sub	sp, sp, #8
    14a4:	str	r0, [fp, #-8]
    14a8:	str	r1, [fp, #-12]
    14ac:	ldr	r3, [fp, #-8]
    14b0:	cmp	r3, #0
    14b4:	bne	14d4 <coda_get_product_class+0x3c>
    14b8:	ldr	r3, [pc, #136]	; 1548 <coda_get_product_class+0xb0>
    14bc:	ldr	r2, [pc, #136]	; 154c <coda_get_product_class+0xb4>
    14c0:	ldr	r1, [pc, #136]	; 1550 <coda_get_product_class+0xb8>
    14c4:	mvn	r0, #99	; 0x63
    14c8:	bl	0 <coda_set_error>
    14cc:	mvn	r3, #0
    14d0:	b	153c <coda_get_product_class+0xa4>
    14d4:	ldr	r3, [fp, #-12]
    14d8:	cmp	r3, #0
    14dc:	bne	14fc <coda_get_product_class+0x64>
    14e0:	ldr	r3, [pc, #108]	; 1554 <coda_get_product_class+0xbc>
    14e4:	ldr	r2, [pc, #96]	; 154c <coda_get_product_class+0xb4>
    14e8:	ldr	r1, [pc, #104]	; 1558 <coda_get_product_class+0xc0>
    14ec:	mvn	r0, #99	; 0x63
    14f0:	bl	0 <coda_set_error>
    14f4:	mvn	r3, #0
    14f8:	b	153c <coda_get_product_class+0xa4>
    14fc:	ldr	r3, [fp, #-8]
    1500:	ldr	r3, [r3, #24]
    1504:	cmp	r3, #0
    1508:	beq	152c <coda_get_product_class+0x94>
    150c:	ldr	r3, [fp, #-8]
    1510:	ldr	r3, [r3, #24]
    1514:	ldr	r3, [r3, #44]	; 0x2c
    1518:	ldr	r3, [r3, #20]
    151c:	ldr	r2, [r3]
    1520:	ldr	r3, [fp, #-12]
    1524:	str	r2, [r3]
    1528:	b	1538 <coda_get_product_class+0xa0>
    152c:	ldr	r3, [fp, #-12]
    1530:	mov	r2, #0
    1534:	str	r2, [r3]
    1538:	mov	r3, #0
    153c:	mov	r0, r3
    1540:	sub	sp, fp, #4
    1544:	pop	{fp, pc}
    1548:	.word	0x000003a5
    154c:	.word	0x00000000
    1550:	.word	0x00000224
    1554:	.word	0x000003aa
    1558:	.word	0x00000290

0000155c <coda_get_product_type>:
    155c:	push	{fp, lr}
    1560:	add	fp, sp, #4
    1564:	sub	sp, sp, #8
    1568:	str	r0, [fp, #-8]
    156c:	str	r1, [fp, #-12]
    1570:	ldr	r3, [fp, #-8]
    1574:	cmp	r3, #0
    1578:	bne	1598 <coda_get_product_type+0x3c>
    157c:	ldr	r3, [pc, #132]	; 1608 <coda_get_product_type+0xac>
    1580:	ldr	r2, [pc, #132]	; 160c <coda_get_product_type+0xb0>
    1584:	ldr	r1, [pc, #132]	; 1610 <coda_get_product_type+0xb4>
    1588:	mvn	r0, #99	; 0x63
    158c:	bl	0 <coda_set_error>
    1590:	mvn	r3, #0
    1594:	b	15fc <coda_get_product_type+0xa0>
    1598:	ldr	r3, [fp, #-12]
    159c:	cmp	r3, #0
    15a0:	bne	15c0 <coda_get_product_type+0x64>
    15a4:	ldr	r3, [pc, #104]	; 1614 <coda_get_product_type+0xb8>
    15a8:	ldr	r2, [pc, #92]	; 160c <coda_get_product_type+0xb0>
    15ac:	ldr	r1, [pc, #100]	; 1618 <coda_get_product_type+0xbc>
    15b0:	mvn	r0, #99	; 0x63
    15b4:	bl	0 <coda_set_error>
    15b8:	mvn	r3, #0
    15bc:	b	15fc <coda_get_product_type+0xa0>
    15c0:	ldr	r3, [fp, #-8]
    15c4:	ldr	r3, [r3, #24]
    15c8:	cmp	r3, #0
    15cc:	beq	15ec <coda_get_product_type+0x90>
    15d0:	ldr	r3, [fp, #-8]
    15d4:	ldr	r3, [r3, #24]
    15d8:	ldr	r3, [r3, #44]	; 0x2c
    15dc:	ldr	r2, [r3]
    15e0:	ldr	r3, [fp, #-12]
    15e4:	str	r2, [r3]
    15e8:	b	15f8 <coda_get_product_type+0x9c>
    15ec:	ldr	r3, [fp, #-12]
    15f0:	mov	r2, #0
    15f4:	str	r2, [r3]
    15f8:	mov	r3, #0
    15fc:	mov	r0, r3
    1600:	sub	sp, fp, #4
    1604:	pop	{fp, pc}
    1608:	.word	0x000003c9
    160c:	.word	0x00000000
    1610:	.word	0x00000224
    1614:	.word	0x000003ce
    1618:	.word	0x000001fc

0000161c <coda_get_product_version>:
    161c:	push	{fp, lr}
    1620:	add	fp, sp, #4
    1624:	sub	sp, sp, #8
    1628:	str	r0, [fp, #-8]
    162c:	str	r1, [fp, #-12]
    1630:	ldr	r3, [fp, #-8]
    1634:	cmp	r3, #0
    1638:	bne	1658 <coda_get_product_version+0x3c>
    163c:	ldr	r3, [pc, #128]	; 16c4 <coda_get_product_version+0xa8>
    1640:	ldr	r2, [pc, #128]	; 16c8 <coda_get_product_version+0xac>
    1644:	ldr	r1, [pc, #128]	; 16cc <coda_get_product_version+0xb0>
    1648:	mvn	r0, #99	; 0x63
    164c:	bl	0 <coda_set_error>
    1650:	mvn	r3, #0
    1654:	b	16b8 <coda_get_product_version+0x9c>
    1658:	ldr	r3, [fp, #-12]
    165c:	cmp	r3, #0
    1660:	bne	1680 <coda_get_product_version+0x64>
    1664:	mov	r3, #1008	; 0x3f0
    1668:	ldr	r2, [pc, #88]	; 16c8 <coda_get_product_version+0xac>
    166c:	ldr	r1, [pc, #92]	; 16d0 <coda_get_product_version+0xb4>
    1670:	mvn	r0, #99	; 0x63
    1674:	bl	0 <coda_set_error>
    1678:	mvn	r3, #0
    167c:	b	16b8 <coda_get_product_version+0x9c>
    1680:	ldr	r3, [fp, #-8]
    1684:	ldr	r3, [r3, #24]
    1688:	cmp	r3, #0
    168c:	beq	16a8 <coda_get_product_version+0x8c>
    1690:	ldr	r3, [fp, #-8]
    1694:	ldr	r3, [r3, #24]
    1698:	ldr	r2, [r3, #4]
    169c:	ldr	r3, [fp, #-12]
    16a0:	str	r2, [r3]
    16a4:	b	16b4 <coda_get_product_version+0x98>
    16a8:	ldr	r3, [fp, #-12]
    16ac:	mvn	r2, #0
    16b0:	str	r2, [r3]
    16b4:	mov	r3, #0
    16b8:	mov	r0, r3
    16bc:	sub	sp, fp, #4
    16c0:	pop	{fp, pc}
    16c4:	.word	0x000003eb
    16c8:	.word	0x00000000
    16cc:	.word	0x00000224
    16d0:	.word	0x000002b8

000016d4 <coda_get_product_root_type>:
    16d4:	push	{fp, lr}
    16d8:	add	fp, sp, #4
    16dc:	sub	sp, sp, #8
    16e0:	str	r0, [fp, #-8]
    16e4:	str	r1, [fp, #-12]
    16e8:	ldr	r3, [fp, #-8]
    16ec:	cmp	r3, #0
    16f0:	bne	1710 <coda_get_product_root_type+0x3c>
    16f4:	ldr	r3, [pc, #188]	; 17b8 <coda_get_product_root_type+0xe4>
    16f8:	ldr	r2, [pc, #188]	; 17bc <coda_get_product_root_type+0xe8>
    16fc:	ldr	r1, [pc, #188]	; 17c0 <coda_get_product_root_type+0xec>
    1700:	mvn	r0, #99	; 0x63
    1704:	bl	0 <coda_set_error>
    1708:	mvn	r3, #0
    170c:	b	17ac <coda_get_product_root_type+0xd8>
    1710:	ldr	r3, [fp, #-12]
    1714:	cmp	r3, #0
    1718:	bne	1738 <coda_get_product_root_type+0x64>
    171c:	ldr	r3, [pc, #160]	; 17c4 <coda_get_product_root_type+0xf0>
    1720:	ldr	r2, [pc, #148]	; 17bc <coda_get_product_root_type+0xe8>
    1724:	ldr	r1, [pc, #156]	; 17c8 <coda_get_product_root_type+0xf4>
    1728:	mvn	r0, #99	; 0x63
    172c:	bl	0 <coda_set_error>
    1730:	mvn	r3, #0
    1734:	b	17ac <coda_get_product_root_type+0xd8>
    1738:	ldr	r3, [fp, #-8]
    173c:	ldr	r3, [r3, #24]
    1740:	cmp	r3, #0
    1744:	beq	1774 <coda_get_product_root_type+0xa0>
    1748:	ldr	r3, [fp, #-8]
    174c:	ldr	r3, [r3, #24]
    1750:	ldr	r3, [r3, #28]
    1754:	cmp	r3, #0
    1758:	beq	1774 <coda_get_product_root_type+0xa0>
    175c:	ldr	r3, [fp, #-8]
    1760:	ldr	r3, [r3, #24]
    1764:	ldr	r2, [r3, #28]
    1768:	ldr	r3, [fp, #-12]
    176c:	str	r2, [r3]
    1770:	b	17a8 <coda_get_product_root_type+0xd4>
    1774:	ldr	r3, [fp, #-8]
    1778:	ldr	r3, [r3, #20]
    177c:	ldr	r3, [r3]
    1780:	cmp	r3, #99	; 0x63
    1784:	bhi	1794 <coda_get_product_root_type+0xc0>
    1788:	ldr	r3, [fp, #-8]
    178c:	ldr	r3, [r3, #20]
    1790:	b	17a0 <coda_get_product_root_type+0xcc>
    1794:	ldr	r3, [fp, #-8]
    1798:	ldr	r3, [r3, #20]
    179c:	ldr	r3, [r3, #4]
    17a0:	ldr	r2, [fp, #-12]
    17a4:	str	r3, [r2]
    17a8:	mov	r3, #0
    17ac:	mov	r0, r3
    17b0:	sub	sp, fp, #4
    17b4:	pop	{fp, pc}
    17b8:	.word	0x00000413
    17bc:	.word	0x00000000
    17c0:	.word	0x00000224
    17c4:	.word	0x00000418
    17c8:	.word	0x000002dc

000017cc <coda_get_product_definition_file>:
    17cc:	push	{fp, lr}
    17d0:	add	fp, sp, #4
    17d4:	sub	sp, sp, #8
    17d8:	str	r0, [fp, #-8]
    17dc:	str	r1, [fp, #-12]
    17e0:	ldr	r3, [fp, #-8]
    17e4:	cmp	r3, #0
    17e8:	bne	1808 <coda_get_product_definition_file+0x3c>
    17ec:	ldr	r3, [pc, #136]	; 187c <coda_get_product_definition_file+0xb0>
    17f0:	ldr	r2, [pc, #136]	; 1880 <coda_get_product_definition_file+0xb4>
    17f4:	ldr	r1, [pc, #136]	; 1884 <coda_get_product_definition_file+0xb8>
    17f8:	mvn	r0, #99	; 0x63
    17fc:	bl	0 <coda_set_error>
    1800:	mvn	r3, #0
    1804:	b	1870 <coda_get_product_definition_file+0xa4>
    1808:	ldr	r3, [fp, #-12]
    180c:	cmp	r3, #0
    1810:	bne	1830 <coda_get_product_definition_file+0x64>
    1814:	ldr	r3, [pc, #108]	; 1888 <coda_get_product_definition_file+0xbc>
    1818:	ldr	r2, [pc, #96]	; 1880 <coda_get_product_definition_file+0xb4>
    181c:	ldr	r1, [pc, #104]	; 188c <coda_get_product_definition_file+0xc0>
    1820:	mvn	r0, #99	; 0x63
    1824:	bl	0 <coda_set_error>
    1828:	mvn	r3, #0
    182c:	b	1870 <coda_get_product_definition_file+0xa4>
    1830:	ldr	r3, [fp, #-8]
    1834:	ldr	r3, [r3, #24]
    1838:	cmp	r3, #0
    183c:	beq	1860 <coda_get_product_definition_file+0x94>
    1840:	ldr	r3, [fp, #-8]
    1844:	ldr	r3, [r3, #24]
    1848:	ldr	r3, [r3, #44]	; 0x2c
    184c:	ldr	r3, [r3, #20]
    1850:	ldr	r2, [r3, #8]
    1854:	ldr	r3, [fp, #-12]
    1858:	str	r2, [r3]
    185c:	b	186c <coda_get_product_definition_file+0xa0>
    1860:	ldr	r3, [fp, #-12]
    1864:	mov	r2, #0
    1868:	str	r2, [r3]
    186c:	mov	r3, #0
    1870:	mov	r0, r3
    1874:	sub	sp, fp, #4
    1878:	pop	{fp, pc}
    187c:	.word	0x00000438
    1880:	.word	0x00000000
    1884:	.word	0x00000224
    1888:	.word	0x0000043d
    188c:	.word	0x000002fc

00001890 <coda_get_product_variable_value>:
    1890:	push	{fp, lr}
    1894:	add	fp, sp, #4
    1898:	sub	sp, sp, #24
    189c:	str	r0, [fp, #-16]
    18a0:	str	r1, [fp, #-20]	; 0xffffffec
    18a4:	str	r2, [fp, #-24]	; 0xffffffe8
    18a8:	str	r3, [fp, #-28]	; 0xffffffe4
    18ac:	ldr	r3, [fp, #-16]
    18b0:	cmp	r3, #0
    18b4:	bne	18d4 <coda_get_product_variable_value+0x44>
    18b8:	ldr	r3, [pc, #244]	; 19b4 <coda_get_product_variable_value+0x124>
    18bc:	ldr	r2, [pc, #244]	; 19b8 <coda_get_product_variable_value+0x128>
    18c0:	ldr	r1, [pc, #244]	; 19bc <coda_get_product_variable_value+0x12c>
    18c4:	mvn	r0, #99	; 0x63
    18c8:	bl	0 <coda_set_error>
    18cc:	mvn	r3, #0
    18d0:	b	19a8 <coda_get_product_variable_value+0x118>
    18d4:	ldr	r3, [fp, #-20]	; 0xffffffec
    18d8:	cmp	r3, #0
    18dc:	bne	18fc <coda_get_product_variable_value+0x6c>
    18e0:	ldr	r3, [pc, #216]	; 19c0 <coda_get_product_variable_value+0x130>
    18e4:	ldr	r2, [pc, #204]	; 19b8 <coda_get_product_variable_value+0x128>
    18e8:	ldr	r1, [pc, #212]	; 19c4 <coda_get_product_variable_value+0x134>
    18ec:	mvn	r0, #99	; 0x63
    18f0:	bl	0 <coda_set_error>
    18f4:	mvn	r3, #0
    18f8:	b	19a8 <coda_get_product_variable_value+0x118>
    18fc:	sub	r3, fp, #12
    1900:	mov	r2, r3
    1904:	ldr	r1, [fp, #-20]	; 0xffffffec
    1908:	ldr	r0, [fp, #-16]
    190c:	bl	0 <coda_product_variable_get_size>
    1910:	mov	r3, r0
    1914:	cmp	r3, #0
    1918:	beq	1934 <coda_get_product_variable_value+0xa4>
    191c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1920:	ldr	r1, [pc, #160]	; 19c8 <coda_get_product_variable_value+0x138>
    1924:	mvn	r0, #101	; 0x65
    1928:	bl	0 <coda_set_error>
    192c:	mvn	r3, #0
    1930:	b	19a8 <coda_get_product_variable_value+0x118>
    1934:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1938:	cmp	r3, #0
    193c:	blt	1950 <coda_get_product_variable_value+0xc0>
    1940:	ldr	r3, [fp, #-12]
    1944:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1948:	cmp	r2, r3
    194c:	blt	196c <coda_get_product_variable_value+0xdc>
    1950:	ldr	r3, [fp, #-20]	; 0xffffffec
    1954:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1958:	ldr	r1, [pc, #108]	; 19cc <coda_get_product_variable_value+0x13c>
    195c:	mvn	r0, #100	; 0x64
    1960:	bl	0 <coda_set_error>
    1964:	mvn	r3, #0
    1968:	b	19a8 <coda_get_product_variable_value+0x118>
    196c:	sub	r3, fp, #8
    1970:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1974:	ldr	r1, [fp, #-20]	; 0xffffffec
    1978:	ldr	r0, [fp, #-16]
    197c:	bl	0 <coda_product_variable_get_pointer>
    1980:	mov	r3, r0
    1984:	cmp	r3, #0
    1988:	beq	1994 <coda_get_product_variable_value+0x104>
    198c:	mvn	r3, #0
    1990:	b	19a8 <coda_get_product_variable_value+0x118>
    1994:	ldr	r3, [fp, #-8]
    1998:	ldrd	r2, [r3]
    199c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    19a0:	strd	r2, [r1]
    19a4:	mov	r3, #0
    19a8:	mov	r0, r3
    19ac:	sub	sp, fp, #4
    19b0:	pop	{fp, pc}
    19b4:	.word	0x00000464
    19b8:	.word	0x00000000
    19bc:	.word	0x00000224
    19c0:	.word	0x00000469
    19c4:	.word	0x00000328
    19c8:	.word	0x0000034c
    19cc:	.word	0x00000370
