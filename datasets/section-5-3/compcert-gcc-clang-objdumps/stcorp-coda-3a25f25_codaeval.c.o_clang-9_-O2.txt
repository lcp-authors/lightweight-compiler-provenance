
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <callback>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #528	; 0x210
   c:	mov	r5, #0
  10:	cmp	r1, #4
  14:	bhi	120 <callback+0x120>
  18:	mov	r4, r0
  1c:	add	r0, pc, #4
  20:	mov	r3, r2
  24:	ldr	pc, [r0, r1, lsl #2]
  28:	.word	0x000000c8
  2c:	.word	0x000000e4
  30:	.word	0x00000104
  34:	.word	0x00000120
  38:	.word	0x0000003c
  3c:	mov	r0, #0
  40:	sub	r1, fp, #20
  44:	str	r0, [fp, #-20]	; 0xffffffec
  48:	mov	r0, r4
  4c:	bl	0 <coda_open>
  50:	mov	r5, #1
  54:	cmp	r0, #0
  58:	bne	120 <callback+0x120>
  5c:	ldr	r1, [fp, #-20]	; 0xffffffec
  60:	mov	r0, sp
  64:	bl	0 <coda_cursor_set_product>
  68:	cmp	r0, #0
  6c:	beq	7c <callback+0x7c>
  70:	ldr	r0, [fp, #-20]	; 0xffffffec
  74:	bl	0 <coda_close>
  78:	b	120 <callback+0x120>
  7c:	movw	r0, #0
  80:	movt	r0, #0
  84:	ldr	r0, [r0]
  88:	cmp	r0, #0
  8c:	beq	a0 <callback+0xa0>
  90:	mov	r1, sp
  94:	bl	0 <coda_expression_eval_node>
  98:	cmp	r0, #0
  9c:	bne	160 <callback+0x160>
  a0:	mov	r0, sp
  a4:	bl	594 <eval_expression>
  a8:	cmp	r0, #0
  ac:	bne	12c <callback+0x12c>
  b0:	ldr	r0, [fp, #-20]	; 0xffffffec
  b4:	bl	0 <coda_close>
  b8:	cmp	r0, #0
  bc:	mov	r5, r0
  c0:	movwne	r5, #1
  c4:	b	120 <callback+0x120>
  c8:	movw	r0, #0
  cc:	movw	r1, #0
  d0:	mov	r2, r3
  d4:	mov	r3, r4
  d8:	movt	r0, #0
  dc:	movt	r1, #0
  e0:	b	f8 <callback+0xf8>
  e4:	movw	r0, #0
  e8:	movw	r1, #0
  ec:	mov	r2, r4
  f0:	movt	r0, #0
  f4:	movt	r1, #0
  f8:	ldr	r0, [r0]
  fc:	bl	0 <fprintf>
 100:	b	120 <callback+0x120>
 104:	movw	r0, #0
 108:	movw	r1, #0
 10c:	mov	r2, r4
 110:	movt	r0, #0
 114:	movt	r1, #0
 118:	ldr	r0, [r0]
 11c:	bl	0 <fprintf>
 120:	mov	r0, r5
 124:	sub	sp, fp, #16
 128:	pop	{r4, r5, r6, r7, fp, pc}
 12c:	movw	r0, #0
 130:	movt	r0, #0
 134:	ldr	r5, [r0]
 138:	bl	0 <coda_get_errno>
 13c:	ldr	r0, [r0]
 140:	bl	0 <coda_errno_to_string>
 144:	movw	r1, #0
 148:	mov	r2, r0
 14c:	mov	r0, r5
 150:	mov	r3, r4
 154:	movt	r1, #0
 158:	bl	0 <fprintf>
 15c:	b	b0 <callback+0xb0>
 160:	movw	r0, #0
 164:	movt	r0, #0
 168:	ldr	r4, [r0]
 16c:	bl	0 <coda_get_errno>
 170:	ldr	r0, [r0]
 174:	bl	0 <coda_errno_to_string>
 178:	movw	r1, #0
 17c:	mov	r2, r0
 180:	mov	r0, r4
 184:	movt	r1, #0
 188:	bl	0 <fprintf>
 18c:	ldr	r0, [fp, #-20]	; 0xffffffec
 190:	bl	0 <coda_close>
 194:	mov	r5, #0
 198:	b	120 <callback+0x120>

0000019c <main>:
 19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1a0:	add	fp, sp, #28
 1a4:	sub	sp, sp, #12
 1a8:	cmp	r0, #1
 1ac:	beq	4c8 <main+0x32c>
 1b0:	ldr	r6, [r1, #4]
 1b4:	mov	r4, r1
 1b8:	movw	r1, #0
 1bc:	mov	r5, r0
 1c0:	movt	r1, #0
 1c4:	mov	r0, r6
 1c8:	bl	0 <strcmp>
 1cc:	cmp	r0, #0
 1d0:	beq	4c8 <main+0x32c>
 1d4:	movw	r1, #0
 1d8:	mov	r0, r6
 1dc:	movt	r1, #0
 1e0:	bl	0 <strcmp>
 1e4:	cmp	r0, #0
 1e8:	beq	4c8 <main+0x32c>
 1ec:	movw	r1, #0
 1f0:	mov	r0, r6
 1f4:	movt	r1, #0
 1f8:	bl	0 <strcmp>
 1fc:	cmp	r0, #0
 200:	beq	4fc <main+0x360>
 204:	movw	r1, #0
 208:	mov	r0, r6
 20c:	movt	r1, #0
 210:	bl	0 <strcmp>
 214:	cmp	r0, #0
 218:	beq	4fc <main+0x360>
 21c:	cmp	r5, #3
 220:	blt	23c <main+0xa0>
 224:	movw	r1, #0
 228:	mov	r0, r6
 22c:	movt	r1, #0
 230:	bl	0 <strcmp>
 234:	cmp	r0, #0
 238:	beq	3f4 <main+0x258>
 23c:	ldr	r0, [r4]
 240:	movw	r2, #0
 244:	mov	r1, #0
 248:	movt	r2, #0
 24c:	bl	0 <coda_set_definition_path_conditional>
 250:	mov	r7, #1
 254:	cmp	r0, #0
 258:	bne	4d4 <main+0x338>
 25c:	cmp	r7, r5
 260:	bge	408 <main+0x26c>
 264:	movw	r6, #0
 268:	mov	r0, #1
 26c:	mov	r9, #0
 270:	movt	r6, #0
 274:	str	r0, [sp, #8]
 278:	b	290 <main+0xf4>
 27c:	mov	r9, #1
 280:	mov	sl, r7
 284:	add	r7, sl, #1
 288:	cmp	r7, r5
 28c:	bge	408 <main+0x26c>
 290:	ldr	r8, [r4, r7, lsl #2]
 294:	mov	r1, r6
 298:	mov	r0, r8
 29c:	bl	0 <strcmp>
 2a0:	cmp	r0, #0
 2a4:	beq	27c <main+0xe0>
 2a8:	movw	r1, #0
 2ac:	mov	r0, r8
 2b0:	movt	r1, #0
 2b4:	bl	0 <strcmp>
 2b8:	cmp	r0, #0
 2bc:	beq	27c <main+0xe0>
 2c0:	movw	r1, #0
 2c4:	mov	r0, r8
 2c8:	movt	r1, #0
 2cc:	bl	0 <strcmp>
 2d0:	cmp	r0, #0
 2d4:	beq	33c <main+0x1a0>
 2d8:	movw	r1, #0
 2dc:	mov	r0, r8
 2e0:	movt	r1, #0
 2e4:	bl	0 <strcmp>
 2e8:	cmp	r0, #0
 2ec:	beq	33c <main+0x1a0>
 2f0:	movw	r1, #0
 2f4:	mov	r0, r8
 2f8:	movt	r1, #0
 2fc:	bl	0 <strcmp>
 300:	cmp	r0, #0
 304:	bne	348 <main+0x1ac>
 308:	add	sl, r7, #1
 30c:	cmp	sl, r5
 310:	bge	348 <main+0x1ac>
 314:	ldr	r0, [r4, sl, lsl #2]
 318:	ldrb	r1, [r0]
 31c:	cmp	r1, #45	; 0x2d
 320:	beq	348 <main+0x1ac>
 324:	movw	r1, #0
 328:	movt	r1, #0
 32c:	bl	0 <coda_expression_from_string>
 330:	cmp	r0, #0
 334:	beq	284 <main+0xe8>
 338:	b	494 <main+0x2f8>
 33c:	mov	r0, #0
 340:	str	r0, [sp, #8]
 344:	b	280 <main+0xe4>
 348:	ldrb	r0, [r8]
 34c:	cmp	r0, #45	; 0x2d
 350:	beq	408 <main+0x26c>
 354:	movw	sl, #0
 358:	mov	r0, r8
 35c:	movt	sl, #0
 360:	mov	r1, sl
 364:	bl	0 <coda_expression_from_string>
 368:	cmp	r0, #0
 36c:	bne	508 <main+0x36c>
 370:	movw	r6, #0
 374:	ldr	r0, [sl]
 378:	movt	r6, #0
 37c:	mov	r1, r6
 380:	bl	0 <coda_expression_get_type>
 384:	cmp	r0, #0
 388:	bne	4d4 <main+0x338>
 38c:	ldr	r0, [r6]
 390:	orr	r1, r0, #1
 394:	cmp	r1, #5
 398:	beq	530 <main+0x394>
 39c:	cmp	r9, #0
 3a0:	bne	468 <main+0x2cc>
 3a4:	add	r6, r7, #1
 3a8:	cmp	r6, r5
 3ac:	bge	434 <main+0x298>
 3b0:	bl	0 <coda_init>
 3b4:	cmp	r0, #0
 3b8:	bne	4d4 <main+0x338>
 3bc:	ldr	r0, [sp, #8]
 3c0:	bl	0 <coda_set_option_perform_conversions>
 3c4:	movw	r3, #0
 3c8:	mov	r0, #0
 3cc:	add	r2, r4, r6, lsl #2
 3d0:	sub	r1, r5, r6
 3d4:	movt	r3, #0
 3d8:	str	r0, [sp]
 3dc:	mov	r0, #0
 3e0:	bl	0 <coda_match_filefilter>
 3e4:	cmp	r0, #0
 3e8:	bne	4d4 <main+0x338>
 3ec:	bl	0 <coda_done>
 3f0:	b	468 <main+0x2cc>
 3f4:	ldr	r0, [r4, #8]
 3f8:	bl	0 <coda_set_definition_path>
 3fc:	mov	r7, #3
 400:	cmp	r7, r5
 404:	blt	264 <main+0xc8>
 408:	movw	r0, #0
 40c:	mov	r1, #25
 410:	mov	r2, #1
 414:	movt	r0, #0
 418:	ldr	r3, [r0]
 41c:	movw	r0, #0
 420:	movt	r0, #0
 424:	bl	0 <fwrite>
 428:	bl	9e4 <print_help>
 42c:	mov	r0, #1
 430:	bl	0 <exit>
 434:	movw	r0, #0
 438:	movt	r0, #0
 43c:	ldr	r0, [r0]
 440:	cmp	r0, #0
 444:	bne	550 <main+0x3b4>
 448:	ldr	r0, [sl]
 44c:	bl	0 <coda_expression_is_constant>
 450:	cmp	r0, #0
 454:	beq	56c <main+0x3d0>
 458:	mov	r0, #0
 45c:	bl	594 <eval_expression>
 460:	cmp	r0, #0
 464:	bne	4d4 <main+0x338>
 468:	ldr	r0, [sl]
 46c:	bl	0 <coda_expression_delete>
 470:	movw	r0, #0
 474:	movt	r0, #0
 478:	ldr	r0, [r0]
 47c:	cmp	r0, #0
 480:	beq	488 <main+0x2ec>
 484:	bl	0 <coda_expression_delete>
 488:	mov	r0, #0
 48c:	sub	sp, fp, #28
 490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 494:	movw	r0, #0
 498:	movt	r0, #0
 49c:	ldr	r4, [r0]
 4a0:	bl	0 <coda_get_errno>
 4a4:	ldr	r0, [r0]
 4a8:	bl	0 <coda_errno_to_string>
 4ac:	movw	r1, #0
 4b0:	mov	r2, r0
 4b4:	movt	r1, #0
 4b8:	mov	r0, r4
 4bc:	bl	0 <fprintf>
 4c0:	mov	r0, #1
 4c4:	bl	0 <exit>
 4c8:	bl	9e4 <print_help>
 4cc:	mov	r0, #0
 4d0:	bl	0 <exit>
 4d4:	movw	r0, #0
 4d8:	movt	r0, #0
 4dc:	ldr	r4, [r0]
 4e0:	bl	0 <coda_get_errno>
 4e4:	ldr	r0, [r0]
 4e8:	bl	0 <coda_errno_to_string>
 4ec:	movw	r1, #0
 4f0:	mov	r2, r0
 4f4:	movt	r1, #0
 4f8:	b	4b8 <main+0x31c>
 4fc:	bl	ba0 <print_version>
 500:	mov	r0, #0
 504:	bl	0 <exit>
 508:	movw	r0, #0
 50c:	movt	r0, #0
 510:	ldr	r4, [r0]
 514:	bl	0 <coda_get_errno>
 518:	ldr	r0, [r0]
 51c:	bl	0 <coda_errno_to_string>
 520:	movw	r1, #0
 524:	mov	r2, r0
 528:	movt	r1, #0
 52c:	b	4b8 <main+0x31c>
 530:	movw	r1, #0
 534:	movt	r1, #0
 538:	ldr	r4, [r1]
 53c:	bl	0 <coda_expression_get_type_name>
 540:	movw	r1, #0
 544:	mov	r2, r0
 548:	movt	r1, #0
 54c:	b	4b8 <main+0x31c>
 550:	movw	r0, #0
 554:	mov	r1, #96	; 0x60
 558:	movt	r0, #0
 55c:	ldr	r3, [r0]
 560:	movw	r0, #0
 564:	movt	r0, #0
 568:	b	584 <main+0x3e8>
 56c:	movw	r0, #0
 570:	mov	r1, #111	; 0x6f
 574:	movt	r0, #0
 578:	ldr	r3, [r0]
 57c:	movw	r0, #0
 580:	movt	r0, #0
 584:	mov	r2, #1
 588:	bl	0 <fwrite>
 58c:	mov	r0, #1
 590:	bl	0 <exit>

00000594 <eval_expression>:
 594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 598:	add	fp, sp, #28
 59c:	sub	sp, sp, #36	; 0x24
 5a0:	mov	r1, r0
 5a4:	movw	r0, #0
 5a8:	mov	r4, #0
 5ac:	movt	r0, #0
 5b0:	ldr	r0, [r0]
 5b4:	cmp	r0, #5
 5b8:	bhi	9b8 <eval_expression+0x424>
 5bc:	add	r2, pc, #0
 5c0:	ldr	pc, [r2, r0, lsl #2]
 5c4:	.word	0x000005dc
 5c8:	.word	0x00000614
 5cc:	.word	0x0000064c
 5d0:	.word	0x00000684
 5d4:	.word	0x000009c4
 5d8:	.word	0x000009c4
 5dc:	movw	r0, #0
 5e0:	mov	r2, sp
 5e4:	movt	r0, #0
 5e8:	ldr	r0, [r0]
 5ec:	bl	0 <coda_expression_eval_bool>
 5f0:	cmp	r0, #0
 5f4:	beq	6d4 <eval_expression+0x140>
 5f8:	bl	0 <coda_get_errno>
 5fc:	ldr	r0, [r0]
 600:	bl	0 <coda_errno_to_string>
 604:	movw	r1, #0
 608:	mov	r2, r0
 60c:	movt	r1, #0
 610:	b	6c4 <eval_expression+0x130>
 614:	movw	r0, #0
 618:	add	r2, sp, #24
 61c:	movt	r0, #0
 620:	ldr	r0, [r0]
 624:	bl	0 <coda_expression_eval_integer>
 628:	cmp	r0, #0
 62c:	beq	6f4 <eval_expression+0x160>
 630:	bl	0 <coda_get_errno>
 634:	ldr	r0, [r0]
 638:	bl	0 <coda_errno_to_string>
 63c:	movw	r1, #0
 640:	mov	r2, r0
 644:	movt	r1, #0
 648:	b	6c4 <eval_expression+0x130>
 64c:	movw	r0, #0
 650:	mov	r2, sp
 654:	movt	r0, #0
 658:	ldr	r0, [r0]
 65c:	bl	0 <coda_expression_eval_float>
 660:	cmp	r0, #0
 664:	beq	714 <eval_expression+0x180>
 668:	bl	0 <coda_get_errno>
 66c:	ldr	r0, [r0]
 670:	bl	0 <coda_errno_to_string>
 674:	movw	r1, #0
 678:	mov	r2, r0
 67c:	movt	r1, #0
 680:	b	6c4 <eval_expression+0x130>
 684:	mov	r0, #0
 688:	mov	r2, sp
 68c:	add	r3, sp, #24
 690:	str	r0, [sp]
 694:	movw	r0, #0
 698:	movt	r0, #0
 69c:	ldr	r0, [r0]
 6a0:	bl	0 <coda_expression_eval_string>
 6a4:	cmp	r0, #0
 6a8:	beq	72c <eval_expression+0x198>
 6ac:	bl	0 <coda_get_errno>
 6b0:	ldr	r0, [r0]
 6b4:	bl	0 <coda_errno_to_string>
 6b8:	movw	r1, #0
 6bc:	mov	r2, r0
 6c0:	movt	r1, #0
 6c4:	mvn	r0, #400	; 0x190
 6c8:	bl	0 <coda_set_error>
 6cc:	mvn	r4, #0
 6d0:	b	9b8 <eval_expression+0x424>
 6d4:	ldr	r1, [sp]
 6d8:	movw	r2, #0
 6dc:	movw	r0, #0
 6e0:	movt	r2, #0
 6e4:	movt	r0, #0
 6e8:	cmp	r1, #0
 6ec:	moveq	r0, r2
 6f0:	b	70c <eval_expression+0x178>
 6f4:	ldr	r0, [sp, #24]
 6f8:	ldr	r1, [sp, #28]
 6fc:	mov	r5, sp
 700:	mov	r2, r5
 704:	bl	0 <coda_str64>
 708:	mov	r0, r5
 70c:	bl	0 <puts>
 710:	b	9b8 <eval_expression+0x424>
 714:	vldr	d16, [sp]
 718:	movw	r0, #0
 71c:	movt	r0, #0
 720:	vmov	r2, r3, d16
 724:	bl	0 <printf>
 728:	b	9b8 <eval_expression+0x424>
 72c:	ldr	r4, [sp]
 730:	cmp	r4, #0
 734:	ldrne	r5, [sp, #24]
 738:	cmpne	r5, #0
 73c:	beq	99c <eval_expression+0x408>
 740:	cmn	r5, #1
 744:	bgt	75c <eval_expression+0x1c8>
 748:	mov	r0, r4
 74c:	bl	0 <strlen>
 750:	mov	r5, r0
 754:	cmp	r0, #1
 758:	blt	99c <eval_expression+0x408>
 75c:	movw	sl, #0
 760:	movw	r7, #0
 764:	movw	r6, #0
 768:	movw	r8, #0
 76c:	movt	sl, #0
 770:	movt	r7, #0
 774:	movt	r6, #0
 778:	movt	r8, #0
 77c:	ldrb	r9, [r4]
 780:	sub	r0, r9, #7
 784:	cmp	r0, #85	; 0x55
 788:	bhi	930 <eval_expression+0x39c>
 78c:	add	r1, pc, #0
 790:	ldr	pc, [r1, r0, lsl #2]
 794:	.word	0x000008ec
 798:	.word	0x000008f8
 79c:	.word	0x00000904
 7a0:	.word	0x00000910
 7a4:	.word	0x00000964
 7a8:	.word	0x0000091c
 7ac:	.word	0x00000928
 7b0:	.word	0x00000930
 7b4:	.word	0x00000930
 7b8:	.word	0x00000930
 7bc:	.word	0x00000930
 7c0:	.word	0x00000930
 7c4:	.word	0x00000930
 7c8:	.word	0x00000930
 7cc:	.word	0x00000930
 7d0:	.word	0x00000930
 7d4:	.word	0x00000930
 7d8:	.word	0x00000930
 7dc:	.word	0x00000930
 7e0:	.word	0x00000930
 7e4:	.word	0x0000095c
 7e8:	.word	0x00000930
 7ec:	.word	0x00000930
 7f0:	.word	0x00000930
 7f4:	.word	0x00000930
 7f8:	.word	0x00000930
 7fc:	.word	0x00000930
 800:	.word	0x00000970
 804:	.word	0x00000930
 808:	.word	0x00000930
 80c:	.word	0x00000930
 810:	.word	0x00000930
 814:	.word	0x00000930
 818:	.word	0x00000930
 81c:	.word	0x00000930
 820:	.word	0x00000930
 824:	.word	0x00000930
 828:	.word	0x00000930
 82c:	.word	0x00000930
 830:	.word	0x00000930
 834:	.word	0x00000930
 838:	.word	0x00000930
 83c:	.word	0x00000930
 840:	.word	0x00000930
 844:	.word	0x00000930
 848:	.word	0x00000930
 84c:	.word	0x00000930
 850:	.word	0x00000930
 854:	.word	0x00000930
 858:	.word	0x00000930
 85c:	.word	0x00000930
 860:	.word	0x00000930
 864:	.word	0x00000930
 868:	.word	0x00000930
 86c:	.word	0x00000930
 870:	.word	0x00000930
 874:	.word	0x00000930
 878:	.word	0x00000930
 87c:	.word	0x00000930
 880:	.word	0x00000930
 884:	.word	0x00000930
 888:	.word	0x00000930
 88c:	.word	0x00000930
 890:	.word	0x00000930
 894:	.word	0x00000930
 898:	.word	0x00000930
 89c:	.word	0x00000930
 8a0:	.word	0x00000930
 8a4:	.word	0x00000930
 8a8:	.word	0x00000930
 8ac:	.word	0x00000930
 8b0:	.word	0x00000930
 8b4:	.word	0x00000930
 8b8:	.word	0x00000930
 8bc:	.word	0x00000930
 8c0:	.word	0x00000930
 8c4:	.word	0x00000930
 8c8:	.word	0x00000930
 8cc:	.word	0x00000930
 8d0:	.word	0x00000930
 8d4:	.word	0x00000930
 8d8:	.word	0x00000930
 8dc:	.word	0x00000930
 8e0:	.word	0x00000930
 8e4:	.word	0x00000930
 8e8:	.word	0x00000978
 8ec:	movw	r0, #0
 8f0:	movt	r0, #0
 8f4:	b	97c <eval_expression+0x3e8>
 8f8:	movw	r0, #0
 8fc:	movt	r0, #0
 900:	b	97c <eval_expression+0x3e8>
 904:	movw	r0, #0
 908:	movt	r0, #0
 90c:	b	97c <eval_expression+0x3e8>
 910:	movw	r0, #0
 914:	movt	r0, #0
 918:	b	97c <eval_expression+0x3e8>
 91c:	movw	r0, #0
 920:	movt	r0, #0
 924:	b	97c <eval_expression+0x3e8>
 928:	mov	r0, sl
 92c:	b	97c <eval_expression+0x3e8>
 930:	bl	0 <__ctype_b_loc>
 934:	ldr	r0, [r0]
 938:	add	r0, r0, r9, lsl #1
 93c:	ldrb	r0, [r0, #1]
 940:	tst	r0, #64	; 0x40
 944:	bne	990 <eval_expression+0x3fc>
 948:	movw	r0, #0
 94c:	mov	r1, r9
 950:	movt	r0, #0
 954:	bl	0 <printf>
 958:	b	980 <eval_expression+0x3ec>
 95c:	mov	r0, r7
 960:	b	97c <eval_expression+0x3e8>
 964:	movw	r0, #0
 968:	movt	r0, #0
 96c:	b	97c <eval_expression+0x3e8>
 970:	mov	r0, r6
 974:	b	97c <eval_expression+0x3e8>
 978:	mov	r0, r8
 97c:	bl	0 <printf>
 980:	add	r4, r4, #1
 984:	subs	r5, r5, #1
 988:	bne	77c <eval_expression+0x1e8>
 98c:	b	99c <eval_expression+0x408>
 990:	mov	r0, r9
 994:	bl	0 <putchar>
 998:	b	980 <eval_expression+0x3ec>
 99c:	mov	r0, #10
 9a0:	bl	0 <putchar>
 9a4:	ldr	r0, [sp]
 9a8:	cmp	r0, #0
 9ac:	beq	9b4 <eval_expression+0x420>
 9b0:	bl	0 <free>
 9b4:	mov	r4, #0
 9b8:	mov	r0, r4
 9bc:	sub	sp, fp, #28
 9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 9c4:	movw	r0, #0
 9c8:	movw	r1, #0
 9cc:	movw	r3, #0
 9d0:	mov	r2, #230	; 0xe6
 9d4:	movt	r0, #0
 9d8:	movt	r1, #0
 9dc:	movt	r3, #0
 9e0:	bl	0 <__assert_fail>

000009e4 <print_help>:
 9e4:	push	{fp, lr}
 9e8:	mov	fp, sp
 9ec:	movw	r0, #0
 9f0:	movt	r0, #0
 9f4:	bl	0 <puts>
 9f8:	movw	r0, #0
 9fc:	movt	r0, #0
 a00:	bl	0 <puts>
 a04:	movw	r0, #0
 a08:	movt	r0, #0
 a0c:	bl	0 <puts>
 a10:	movw	r0, #0
 a14:	movt	r0, #0
 a18:	bl	0 <puts>
 a1c:	movw	r0, #0
 a20:	movt	r0, #0
 a24:	bl	0 <puts>
 a28:	movw	r0, #0
 a2c:	movt	r0, #0
 a30:	bl	0 <puts>
 a34:	movw	r0, #0
 a38:	movt	r0, #0
 a3c:	bl	0 <puts>
 a40:	mov	r0, #10
 a44:	bl	0 <putchar>
 a48:	movw	r0, #0
 a4c:	movt	r0, #0
 a50:	bl	0 <puts>
 a54:	movw	r0, #0
 a58:	movt	r0, #0
 a5c:	bl	0 <puts>
 a60:	movw	r0, #0
 a64:	movt	r0, #0
 a68:	bl	0 <puts>
 a6c:	movw	r0, #0
 a70:	movt	r0, #0
 a74:	bl	0 <puts>
 a78:	movw	r0, #0
 a7c:	movt	r0, #0
 a80:	bl	0 <puts>
 a84:	movw	r0, #0
 a88:	movt	r0, #0
 a8c:	bl	0 <puts>
 a90:	movw	r0, #0
 a94:	movt	r0, #0
 a98:	bl	0 <puts>
 a9c:	movw	r0, #0
 aa0:	movt	r0, #0
 aa4:	bl	0 <puts>
 aa8:	movw	r0, #0
 aac:	movt	r0, #0
 ab0:	bl	0 <puts>
 ab4:	movw	r0, #0
 ab8:	movt	r0, #0
 abc:	bl	0 <puts>
 ac0:	movw	r0, #0
 ac4:	movt	r0, #0
 ac8:	bl	0 <puts>
 acc:	movw	r0, #0
 ad0:	movt	r0, #0
 ad4:	bl	0 <puts>
 ad8:	mov	r0, #10
 adc:	bl	0 <putchar>
 ae0:	movw	r0, #0
 ae4:	movt	r0, #0
 ae8:	bl	0 <puts>
 aec:	movw	r0, #0
 af0:	movt	r0, #0
 af4:	bl	0 <puts>
 af8:	mov	r0, #10
 afc:	bl	0 <putchar>
 b00:	movw	r0, #0
 b04:	movt	r0, #0
 b08:	bl	0 <puts>
 b0c:	movw	r0, #0
 b10:	movt	r0, #0
 b14:	bl	0 <puts>
 b18:	mov	r0, #10
 b1c:	bl	0 <putchar>
 b20:	movw	r0, #0
 b24:	movt	r0, #0
 b28:	bl	0 <puts>
 b2c:	movw	r0, #0
 b30:	movt	r0, #0
 b34:	bl	0 <puts>
 b38:	mov	r0, #10
 b3c:	bl	0 <putchar>
 b40:	movw	r0, #0
 b44:	movt	r0, #0
 b48:	bl	0 <puts>
 b4c:	movw	r0, #0
 b50:	movt	r0, #0
 b54:	bl	0 <puts>
 b58:	movw	r0, #0
 b5c:	movt	r0, #0
 b60:	bl	0 <puts>
 b64:	movw	r0, #0
 b68:	movt	r0, #0
 b6c:	bl	0 <puts>
 b70:	movw	r0, #0
 b74:	movt	r0, #0
 b78:	bl	0 <puts>
 b7c:	movw	r0, #0
 b80:	movt	r0, #0
 b84:	bl	0 <puts>
 b88:	movw	r0, #0
 b8c:	movt	r0, #0
 b90:	bl	0 <puts>
 b94:	mov	r0, #10
 b98:	pop	{fp, lr}
 b9c:	b	0 <putchar>

00000ba0 <print_version>:
 ba0:	push	{fp, lr}
 ba4:	mov	fp, sp
 ba8:	bl	0 <coda_get_libcoda_version>
 bac:	mov	r1, r0
 bb0:	movw	r0, #0
 bb4:	movt	r0, #0
 bb8:	bl	0 <printf>
 bbc:	movw	r0, #0
 bc0:	movt	r0, #0
 bc4:	bl	0 <puts>
 bc8:	mov	r0, #10
 bcc:	pop	{fp, lr}
 bd0:	b	0 <putchar>
