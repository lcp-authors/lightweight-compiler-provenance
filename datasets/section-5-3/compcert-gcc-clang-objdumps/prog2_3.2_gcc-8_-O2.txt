
../compcert-repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	10a40 <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <printf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <printf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r1, r1, r8, ror r9

0001068c <printf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #69632	; 0x11000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <puts@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #69632	; 0x11000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <__libc_start_main@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #69632	; 0x11000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <__gmon_start__@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <strlen@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	movw	r3, #3812	; 0xee4
   106d8:	movt	r3, #1
   106dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   106e0:	strd	r6, [sp, #8]
   106e4:	movw	r0, #3836	; 0xefc
   106e8:	movt	r0, #1
   106ec:	ldrd	r6, [r3]
   106f0:	strd	r8, [sp, #16]
   106f4:	ldrd	r4, [r3, #8]
   106f8:	strd	sl, [sp, #24]
   106fc:	ldrd	r2, [r3, #16]
   10700:	str	lr, [sp, #32]
   10704:	sub	sp, sp, #76	; 0x4c
   10708:	add	sl, sp, #48	; 0x30
   1070c:	add	r9, sp, #72	; 0x48
   10710:	strd	r6, [sp, #24]
   10714:	mov	fp, sl
   10718:	strd	r4, [sp, #32]
   1071c:	strd	r2, [sp, #40]	; 0x28
   10720:	strd	r6, [sp, #48]	; 0x30
   10724:	strd	r4, [sl, #8]
   10728:	movw	r5, #3860	; 0xf14
   1072c:	movt	r5, #1
   10730:	strd	r2, [sl, #16]
   10734:	mov	r4, sl
   10738:	bl	10698 <puts@plt>
   1073c:	movw	r0, #3852	; 0xf0c
   10740:	movt	r0, #1
   10744:	bl	1068c <printf@plt>
   10748:	ldr	r1, [r4], #4
   1074c:	mov	r0, r5
   10750:	bl	1068c <printf@plt>
   10754:	cmp	r4, r9
   10758:	bne	10748 <main@@Base+0x74>
   1075c:	movw	r0, #3928	; 0xf58
   10760:	movt	r0, #1
   10764:	bl	10698 <puts@plt>
   10768:	mov	r0, sl
   1076c:	movw	r3, #2804	; 0xaf4
   10770:	movt	r3, #1
   10774:	mov	r2, #4
   10778:	mov	r1, #6
   1077c:	movw	r5, #3860	; 0xf14
   10780:	movt	r5, #1
   10784:	mov	r4, sl
   10788:	bl	10b74 <sort@@Base>
   1078c:	movw	r0, #3864	; 0xf18
   10790:	movt	r0, #1
   10794:	bl	1068c <printf@plt>
   10798:	ldr	r1, [r4], #4
   1079c:	mov	r0, r5
   107a0:	bl	1068c <printf@plt>
   107a4:	cmp	r4, r9
   107a8:	bne	10798 <main@@Base+0xc4>
   107ac:	movw	r0, #3928	; 0xf58
   107b0:	movt	r0, #1
   107b4:	bl	10698 <puts@plt>
   107b8:	ldrd	r6, [sp, #24]
   107bc:	movw	r0, #3872	; 0xf20
   107c0:	movt	r0, #1
   107c4:	mov	r8, sl
   107c8:	mov	r4, #0
   107cc:	ldrd	r2, [sp, #32]
   107d0:	strd	r6, [sp, #48]	; 0x30
   107d4:	ldrd	r6, [sp, #40]	; 0x28
   107d8:	strd	r2, [sl, #8]
   107dc:	strd	r6, [sl, #16]
   107e0:	bl	10698 <puts@plt>
   107e4:	mov	r3, #4
   107e8:	str	r3, [sp, #12]
   107ec:	mov	r0, r8
   107f0:	add	r1, sp, #12
   107f4:	bl	10af4 <comp_int_asc@@Base>
   107f8:	cmp	r0, #0
   107fc:	add	r8, r8, #6
   10800:	beq	10824 <main@@Base+0x150>
   10804:	add	r4, r4, #1
   10808:	cmp	r4, #6
   1080c:	bne	107ec <main@@Base+0x118>
   10810:	movw	r0, #3932	; 0xf5c
   10814:	movt	r0, #1
   10818:	mov	r1, #4
   1081c:	bl	1068c <printf@plt>
   10820:	b	10844 <main@@Base+0x170>
   10824:	add	r3, sl, r4, lsl #2
   10828:	cmp	r3, #0
   1082c:	beq	10810 <main@@Base+0x13c>
   10830:	movw	r0, #3884	; 0xf2c
   10834:	movt	r0, #1
   10838:	mov	r2, r4
   1083c:	mov	r1, #4
   10840:	bl	1068c <printf@plt>
   10844:	ldrd	r6, [sp, #24]
   10848:	movw	r8, #2804	; 0xaf4
   1084c:	movt	r8, #1
   10850:	mov	r3, r8
   10854:	mov	r2, #4
   10858:	ldrd	r4, [sp, #40]	; 0x28
   1085c:	mov	r1, #6
   10860:	mov	r0, sl
   10864:	strd	r6, [sp, #48]	; 0x30
   10868:	ldrd	r6, [sp, #32]
   1086c:	strd	r6, [sl, #8]
   10870:	strd	r4, [sl, #16]
   10874:	bl	10b74 <sort@@Base>
   10878:	movw	r0, #3968	; 0xf80
   1087c:	movt	r0, #1
   10880:	bl	10698 <puts@plt>
   10884:	add	r0, sp, #12
   10888:	mov	r3, #4
   1088c:	str	r8, [sp]
   10890:	mov	r2, #6
   10894:	mov	r1, sl
   10898:	bl	10ce4 <binary_search@@Base>
   1089c:	cmp	r0, #0
   108a0:	beq	109f0 <main@@Base+0x31c>
   108a4:	sub	r2, r0, sl
   108a8:	movw	r0, #3884	; 0xf2c
   108ac:	movt	r0, #1
   108b0:	asr	r2, r2, #2
   108b4:	ldr	r1, [sp, #12]
   108b8:	bl	1068c <printf@plt>
   108bc:	ldrd	r4, [sp, #32]
   108c0:	movw	r0, #3980	; 0xf8c
   108c4:	movt	r0, #1
   108c8:	movw	r6, #3860	; 0xf14
   108cc:	movt	r6, #1
   108d0:	ldrd	r2, [sp, #40]	; 0x28
   108d4:	strd	r2, [sl, #16]
   108d8:	ldrd	r2, [sp, #24]
   108dc:	strd	r2, [sp, #48]	; 0x30
   108e0:	strd	r4, [sl, #8]
   108e4:	mov	r4, sl
   108e8:	bl	10698 <puts@plt>
   108ec:	movw	r0, #3852	; 0xf0c
   108f0:	movt	r0, #1
   108f4:	bl	1068c <printf@plt>
   108f8:	ldr	r1, [r4], #4
   108fc:	mov	r0, r6
   10900:	bl	1068c <printf@plt>
   10904:	cmp	r4, r9
   10908:	bne	108f8 <main@@Base+0x224>
   1090c:	movw	r0, #3928	; 0xf58
   10910:	movt	r0, #1
   10914:	bl	10698 <puts@plt>
   10918:	mov	r0, sl
   1091c:	movw	r3, #2804	; 0xaf4
   10920:	movt	r3, #1
   10924:	mov	r2, #4
   10928:	mov	r1, #6
   1092c:	movw	r4, #3860	; 0xf14
   10930:	movt	r4, #1
   10934:	bl	10d84 <insertion_sort@@Base>
   10938:	movw	r0, #3864	; 0xf18
   1093c:	movt	r0, #1
   10940:	bl	1068c <printf@plt>
   10944:	ldr	r1, [fp], #4
   10948:	mov	r0, r4
   1094c:	bl	1068c <printf@plt>
   10950:	cmp	fp, r9
   10954:	bne	10944 <main@@Base+0x270>
   10958:	movw	r0, #3928	; 0xf58
   1095c:	movt	r0, #1
   10960:	bl	10698 <puts@plt>
   10964:	movw	r0, #3992	; 0xf98
   10968:	movt	r0, #1
   1096c:	bl	10698 <puts@plt>
   10970:	movw	r3, #4004	; 0xfa4
   10974:	movt	r3, #1
   10978:	ldrb	r2, [r3, #4]
   1097c:	movw	r0, #3852	; 0xf0c
   10980:	movt	r0, #1
   10984:	ldr	r3, [r3]
   10988:	str	r3, [sp, #16]
   1098c:	strb	r2, [sp, #20]
   10990:	bl	1068c <printf@plt>
   10994:	add	r0, sp, #16
   10998:	bl	10698 <puts@plt>
   1099c:	add	r0, sp, #16
   109a0:	bl	106bc <strlen@plt>
   109a4:	mov	r1, r0
   109a8:	mov	r2, #1
   109ac:	add	r0, sp, #16
   109b0:	movw	r3, #2840	; 0xb18
   109b4:	movt	r3, #1
   109b8:	bl	10b74 <sort@@Base>
   109bc:	movw	r0, #3864	; 0xf18
   109c0:	movt	r0, #1
   109c4:	bl	1068c <printf@plt>
   109c8:	add	r0, sp, #16
   109cc:	bl	10698 <puts@plt>
   109d0:	mov	r0, #0
   109d4:	add	sp, sp, #76	; 0x4c
   109d8:	ldrd	r4, [sp]
   109dc:	ldrd	r6, [sp, #8]
   109e0:	ldrd	r8, [sp, #16]
   109e4:	ldrd	sl, [sp, #24]
   109e8:	add	sp, sp, #32
   109ec:	pop	{pc}		; (ldr pc, [sp], #4)
   109f0:	movw	r0, #3932	; 0xf5c
   109f4:	movt	r0, #1
   109f8:	ldr	r1, [sp, #12]
   109fc:	bl	1068c <printf@plt>
   10a00:	b	108bc <main@@Base+0x1e8>

00010a04 <_start@@Base>:
   10a04:	mov	fp, #0
   10a08:	mov	lr, #0
   10a0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10a10:	mov	r2, sp
   10a14:	push	{r2}		; (str r2, [sp, #-4]!)
   10a18:	push	{r0}		; (str r0, [sp, #-4]!)
   10a1c:	ldr	ip, [pc, #16]	; 10a34 <_start@@Base+0x30>
   10a20:	push	{ip}		; (str ip, [sp, #-4]!)
   10a24:	ldr	r0, [pc, #12]	; 10a38 <_start@@Base+0x34>
   10a28:	ldr	r3, [pc, #12]	; 10a3c <_start@@Base+0x38>
   10a2c:	bl	106a4 <__libc_start_main@plt>
   10a30:	bl	106c8 <abort@plt>
   10a34:	ldrdeq	r0, [r1], -r4
   10a38:	ldrdeq	r0, [r1], -r4
   10a3c:	andeq	r0, r1, r4, ror lr
   10a40:	ldr	r3, [pc, #20]	; 10a5c <_start@@Base+0x58>
   10a44:	ldr	r2, [pc, #20]	; 10a60 <_start@@Base+0x5c>
   10a48:	add	r3, pc, r3
   10a4c:	ldr	r2, [r3, r2]
   10a50:	cmp	r2, #0
   10a54:	bxeq	lr
   10a58:	b	106b0 <__gmon_start__@plt>
   10a5c:			; <UNDEFINED> instruction: 0x000115b0
   10a60:	andeq	r0, r0, r4, lsr #32
   10a64:	ldr	r0, [pc, #24]	; 10a84 <_start@@Base+0x80>
   10a68:	ldr	r3, [pc, #24]	; 10a88 <_start@@Base+0x84>
   10a6c:	cmp	r3, r0
   10a70:	bxeq	lr
   10a74:	ldr	r3, [pc, #16]	; 10a8c <_start@@Base+0x88>
   10a78:	cmp	r3, #0
   10a7c:	bxeq	lr
   10a80:	bx	r3
   10a84:	andeq	r2, r2, r0, lsr r0
   10a88:	andeq	r2, r2, r0, lsr r0
   10a8c:	andeq	r0, r0, r0
   10a90:	ldr	r0, [pc, #36]	; 10abc <_start@@Base+0xb8>
   10a94:	ldr	r1, [pc, #36]	; 10ac0 <_start@@Base+0xbc>
   10a98:	sub	r1, r1, r0
   10a9c:	asr	r1, r1, #2
   10aa0:	add	r1, r1, r1, lsr #31
   10aa4:	asrs	r1, r1, #1
   10aa8:	bxeq	lr
   10aac:	ldr	r3, [pc, #16]	; 10ac4 <_start@@Base+0xc0>
   10ab0:	cmp	r3, #0
   10ab4:	bxeq	lr
   10ab8:	bx	r3
   10abc:	andeq	r2, r2, r0, lsr r0
   10ac0:	andeq	r2, r2, r0, lsr r0
   10ac4:	andeq	r0, r0, r0
   10ac8:	push	{r4, lr}
   10acc:	ldr	r4, [pc, #24]	; 10aec <_start@@Base+0xe8>
   10ad0:	ldrb	r3, [r4]
   10ad4:	cmp	r3, #0
   10ad8:	popne	{r4, pc}
   10adc:	bl	10a64 <_start@@Base+0x60>
   10ae0:	mov	r3, #1
   10ae4:	strb	r3, [r4]
   10ae8:	pop	{r4, pc}
   10aec:	andeq	r2, r2, r0, lsr r0
   10af0:	b	10a90 <_start@@Base+0x8c>

00010af4 <comp_int_asc@@Base>:
   10af4:	ldr	r2, [r0]
   10af8:	ldr	r3, [r1]
   10afc:	cmp	r2, r3
   10b00:	blt	10b10 <comp_int_asc@@Base+0x1c>
   10b04:	movgt	r0, #1
   10b08:	movle	r0, #0
   10b0c:	bx	lr
   10b10:	mvn	r0, #0
   10b14:	bx	lr

00010b18 <comp_char_desc@@Base>:
   10b18:	ldrb	r2, [r0]
   10b1c:	ldrb	r3, [r1]
   10b20:	cmp	r2, r3
   10b24:	bcc	10b34 <comp_char_desc@@Base+0x1c>
   10b28:	mvnhi	r0, #0
   10b2c:	movls	r0, #0
   10b30:	bx	lr
   10b34:	mov	r0, #1
   10b38:	bx	lr

00010b3c <get_elem@@Base>:
   10b3c:	mla	r0, r2, r1, r0
   10b40:	bx	lr

00010b44 <swap@@Base>:
   10b44:	cmp	r2, #0
   10b48:	ble	10b70 <swap@@Base+0x2c>
   10b4c:	sub	r0, r0, #1
   10b50:	sub	r1, r1, #1
   10b54:	add	r2, r0, r2
   10b58:	ldrb	r3, [r0, #1]!
   10b5c:	ldrb	ip, [r1, #1]!
   10b60:	cmp	r0, r2
   10b64:	strb	ip, [r0]
   10b68:	strb	r3, [r1]
   10b6c:	bne	10b58 <swap@@Base+0x14>
   10b70:	bx	lr

00010b74 <sort@@Base>:
   10b74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10b78:	strd	r6, [sp, #8]
   10b7c:	subs	r6, r1, #0
   10b80:	strd	r8, [sp, #16]
   10b84:	strd	sl, [sp, #24]
   10b88:	str	lr, [sp, #32]
   10b8c:	sub	sp, sp, #12
   10b90:	ble	10c48 <sort@@Base+0xd4>
   10b94:	mov	r9, #0
   10b98:	mov	r8, r0
   10b9c:	add	r9, r9, #1
   10ba0:	mov	r7, r3
   10ba4:	cmp	r6, r9
   10ba8:	mov	sl, r2
   10bac:	mov	r4, r8
   10bb0:	ble	10c40 <sort@@Base+0xcc>
   10bb4:	add	r3, r8, sl
   10bb8:	mov	fp, r9
   10bbc:	mov	r5, r3
   10bc0:	str	r3, [sp, #4]
   10bc4:	mov	r1, r4
   10bc8:	mov	r0, r5
   10bcc:	blx	r7
   10bd0:	cmp	r0, #0
   10bd4:	add	fp, fp, #1
   10bd8:	movlt	r4, r5
   10bdc:	cmp	r6, fp
   10be0:	add	r5, r5, sl
   10be4:	bne	10bc4 <sort@@Base+0x50>
   10be8:	cmp	sl, #0
   10bec:	ble	10c2c <sort@@Base+0xb8>
   10bf0:	sub	r1, r4, #1
   10bf4:	sub	r3, r8, #1
   10bf8:	ldrb	r2, [r1, #1]
   10bfc:	add	r0, r1, #2
   10c00:	add	r1, r1, #1
   10c04:	sub	r0, r0, r4
   10c08:	ldrb	ip, [r3, #1]!
   10c0c:	cmp	sl, r0
   10c10:	strb	ip, [r1]
   10c14:	strb	r2, [r3]
   10c18:	bgt	10bf8 <sort@@Base+0x84>
   10c1c:	cmp	r6, r9
   10c20:	ble	10c48 <sort@@Base+0xd4>
   10c24:	add	r3, r8, sl
   10c28:	str	r3, [sp, #4]
   10c2c:	ldr	r8, [sp, #4]
   10c30:	add	r9, r9, #1
   10c34:	cmp	r6, r9
   10c38:	mov	r4, r8
   10c3c:	bgt	10bb4 <sort@@Base+0x40>
   10c40:	cmp	sl, #0
   10c44:	bgt	10bf0 <sort@@Base+0x7c>
   10c48:	add	sp, sp, #12
   10c4c:	ldrd	r4, [sp]
   10c50:	ldrd	r6, [sp, #8]
   10c54:	ldrd	r8, [sp, #16]
   10c58:	ldrd	sl, [sp, #24]
   10c5c:	add	sp, sp, #32
   10c60:	pop	{pc}		; (ldr pc, [sp], #4)

00010c64 <linear_search@@Base>:
   10c64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10c68:	strd	r6, [sp, #8]
   10c6c:	subs	r6, r2, #0
   10c70:	strd	r8, [sp, #16]
   10c74:	str	sl, [sp, #24]
   10c78:	str	lr, [sp, #28]
   10c7c:	ldr	r8, [sp, #32]
   10c80:	ble	10cc8 <linear_search@@Base+0x64>
   10c84:	mov	r9, r3
   10c88:	mov	sl, r1
   10c8c:	mov	r7, r0
   10c90:	mov	r4, r1
   10c94:	mov	r5, #0
   10c98:	b	10ca8 <linear_search@@Base+0x44>
   10c9c:	add	r5, r5, #1
   10ca0:	cmp	r6, r5
   10ca4:	beq	10cc8 <linear_search@@Base+0x64>
   10ca8:	mov	r0, r4
   10cac:	mov	r1, r7
   10cb0:	blx	r8
   10cb4:	cmp	r0, #0
   10cb8:	add	r4, r4, r6
   10cbc:	bne	10c9c <linear_search@@Base+0x38>
   10cc0:	mla	r0, r5, r9, sl
   10cc4:	b	10ccc <linear_search@@Base+0x68>
   10cc8:	mov	r0, #0
   10ccc:	ldrd	r4, [sp]
   10cd0:	ldrd	r6, [sp, #8]
   10cd4:	ldrd	r8, [sp, #16]
   10cd8:	ldr	sl, [sp, #24]
   10cdc:	add	sp, sp, #28
   10ce0:	pop	{pc}		; (ldr pc, [sp], #4)

00010ce4 <binary_search@@Base>:
   10ce4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ce8:	strd	r6, [sp, #8]
   10cec:	subs	r6, r2, #1
   10cf0:	strd	r8, [sp, #16]
   10cf4:	strd	sl, [sp, #24]
   10cf8:	str	lr, [sp, #32]
   10cfc:	sub	sp, sp, #4
   10d00:	ldr	r8, [sp, #40]	; 0x28
   10d04:	bmi	10d7c <binary_search@@Base+0x98>
   10d08:	mov	sl, r3
   10d0c:	mov	r9, r1
   10d10:	mov	r7, r0
   10d14:	mov	r5, #0
   10d18:	b	10d34 <binary_search@@Base+0x50>
   10d1c:	blx	r8
   10d20:	cmn	r0, #1
   10d24:	subeq	r6, r4, #1
   10d28:	addne	r5, r4, #1
   10d2c:	cmp	r6, r5
   10d30:	blt	10d7c <binary_search@@Base+0x98>
   10d34:	add	r4, r5, r6
   10d38:	mov	r0, r7
   10d3c:	asr	r4, r4, #1
   10d40:	mla	fp, sl, r4, r9
   10d44:	mov	r1, fp
   10d48:	blx	r8
   10d4c:	cmp	r0, #0
   10d50:	mov	r1, fp
   10d54:	mov	r0, r7
   10d58:	beq	10d1c <binary_search@@Base+0x38>
   10d5c:	mov	r0, fp
   10d60:	add	sp, sp, #4
   10d64:	ldrd	r4, [sp]
   10d68:	ldrd	r6, [sp, #8]
   10d6c:	ldrd	r8, [sp, #16]
   10d70:	ldrd	sl, [sp, #24]
   10d74:	add	sp, sp, #32
   10d78:	pop	{pc}		; (ldr pc, [sp], #4)
   10d7c:	mov	fp, #0
   10d80:	b	10d5c <binary_search@@Base+0x78>

00010d84 <insertion_sort@@Base>:
   10d84:	cmp	r1, #1
   10d88:	bxle	lr
   10d8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d90:	strd	r6, [sp, #8]
   10d94:	mov	r7, r3
   10d98:	mov	r3, #0
   10d9c:	strd	r8, [sp, #16]
   10da0:	add	r8, r0, r2
   10da4:	mov	r9, #1
   10da8:	strd	sl, [sp, #24]
   10dac:	mov	fp, r2
   10db0:	str	lr, [sp, #32]
   10db4:	sub	sp, sp, #20
   10db8:	stmib	sp, {r3, fp}
   10dbc:	str	r1, [sp, #12]
   10dc0:	ldr	r3, [sp, #4]
   10dc4:	sub	r4, r8, #1
   10dc8:	mov	r5, r8
   10dcc:	mov	sl, r9
   10dd0:	ldr	r2, [sp, #8]
   10dd4:	sub	r6, r3, r2
   10dd8:	add	r1, r6, r5
   10ddc:	mov	r0, r5
   10de0:	blx	r7
   10de4:	cmn	r0, #1
   10de8:	sub	sl, sl, #1
   10dec:	bne	10e2c <insertion_sort@@Base+0xa8>
   10df0:	cmp	fp, #0
   10df4:	sub	ip, r4, fp
   10df8:	subgt	r2, r5, #1
   10dfc:	movgt	r3, ip
   10e00:	ble	10e1c <insertion_sort@@Base+0x98>
   10e04:	ldrb	r0, [r3, #1]!
   10e08:	ldrb	r1, [r2, #1]!
   10e0c:	cmp	r3, r4
   10e10:	strb	r0, [r2]
   10e14:	strb	r1, [r3]
   10e18:	bne	10e04 <insertion_sort@@Base+0x80>
   10e1c:	cmp	sl, #0
   10e20:	sub	r5, r5, fp
   10e24:	mov	r4, ip
   10e28:	bne	10dd8 <insertion_sort@@Base+0x54>
   10e2c:	ldr	r3, [sp, #12]
   10e30:	add	r9, r9, #1
   10e34:	add	r8, r8, fp
   10e38:	cmp	r3, r9
   10e3c:	ldr	r3, [sp, #4]
   10e40:	add	r3, r3, fp
   10e44:	str	r3, [sp, #4]
   10e48:	ldr	r3, [sp, #8]
   10e4c:	add	r3, r3, fp
   10e50:	str	r3, [sp, #8]
   10e54:	bne	10dc0 <insertion_sort@@Base+0x3c>
   10e58:	add	sp, sp, #20
   10e5c:	ldrd	r4, [sp]
   10e60:	ldrd	r6, [sp, #8]
   10e64:	ldrd	r8, [sp, #16]
   10e68:	ldrd	sl, [sp, #24]
   10e6c:	add	sp, sp, #32
   10e70:	pop	{pc}		; (ldr pc, [sp], #4)

00010e74 <__libc_csu_init@@Base>:
   10e74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e78:	mov	r7, r0
   10e7c:	ldr	r6, [pc, #72]	; 10ecc <__libc_csu_init@@Base+0x58>
   10e80:	ldr	r5, [pc, #72]	; 10ed0 <__libc_csu_init@@Base+0x5c>
   10e84:	add	r6, pc, r6
   10e88:	add	r5, pc, r5
   10e8c:	sub	r6, r6, r5
   10e90:	mov	r8, r1
   10e94:	mov	r9, r2
   10e98:	bl	1066c <printf@plt-0x20>
   10e9c:	asrs	r6, r6, #2
   10ea0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ea4:	mov	r4, #0
   10ea8:	add	r4, r4, #1
   10eac:	ldr	r3, [r5], #4
   10eb0:	mov	r2, r9
   10eb4:	mov	r1, r8
   10eb8:	mov	r0, r7
   10ebc:	blx	r3
   10ec0:	cmp	r6, r4
   10ec4:	bne	10ea8 <__libc_csu_init@@Base+0x34>
   10ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ecc:	andeq	r1, r1, r8, lsl #1
   10ed0:	andeq	r1, r1, r0, lsl #1

00010ed4 <__libc_csu_fini@@Base>:
   10ed4:	bx	lr

Disassembly of section .fini:

00010ed8 <.fini>:
   10ed8:	push	{r3, lr}
   10edc:	pop	{r3, pc}
