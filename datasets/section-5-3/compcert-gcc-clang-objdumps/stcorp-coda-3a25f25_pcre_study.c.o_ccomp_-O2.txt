
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/pcre/pcre_study.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <find_minlength>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #80	; 0x50
       8:	str	ip, [sp, #8]
       c:	str	lr, [sp, #12]
      10:	str	r4, [sp, #36]	; 0x24
      14:	str	r5, [sp, #40]	; 0x28
      18:	str	r6, [sp, #44]	; 0x2c
      1c:	str	r7, [sp, #48]	; 0x30
      20:	str	r8, [sp, #52]	; 0x34
      24:	str	r9, [sp, #56]	; 0x38
      28:	str	sl, [sp, #60]	; 0x3c
      2c:	str	fp, [sp, #64]	; 0x40
      30:	ldr	ip, [ip, #4]
      34:	str	ip, [sp, #24]
      38:	ldr	ip, [sp, #8]
      3c:	ldr	ip, [ip]
      40:	str	ip, [sp, #20]
      44:	mov	r5, r3
      48:	str	r2, [sp, #16]
      4c:	mov	r7, r0
      50:	mvn	sl, #0
      54:	and	r3, r5, #2048	; 0x800
      58:	cmp	r3, #0
      5c:	movne	r3, #1
      60:	moveq	r3, #0
      64:	str	r3, [sp, #32]
      68:	mov	r6, #0
      6c:	mov	fp, #0
      70:	add	r2, r1, #3
      74:	ldr	r0, [sp, #24]
      78:	ldr	r3, [r0]
      7c:	add	ip, r3, #1
      80:	str	ip, [r0]
      84:	cmp	r3, #1000	; 0x3e8
      88:	ble	94 <find_minlength+0x94>
      8c:	mvn	r0, #0
      90:	b	a58 <find_minlength+0xa58>
      94:	ldrb	r1, [r1]
      98:	cmp	r1, #133	; 0x85
      9c:	beq	c0 <find_minlength+0xc0>
      a0:	cmp	r1, #138	; 0x8a
      a4:	beq	c0 <find_minlength+0xc0>
      a8:	cmp	r1, #134	; 0x86
      ac:	beq	c0 <find_minlength+0xc0>
      b0:	cmp	r1, #139	; 0x8b
      b4:	moveq	r3, #1
      b8:	movne	r3, #0
      bc:	b	c4 <find_minlength+0xc4>
      c0:	mov	r3, #1
      c4:	add	r0, r2, #2
      c8:	cmp	r3, #0
      cc:	movne	r9, r0
      d0:	moveq	r9, r2
      d4:	ldrb	ip, [r9]
      d8:	and	ip, ip, #255	; 0xff
      dc:	mov	r1, ip
      e0:	cmp	r1, #162	; 0xa2
      e4:	bcs	a54 <find_minlength+0xa54>
      e8:	add	pc, pc, r1, lsl #2
      ec:	nop	{0}
      f0:	b	3f8 <find_minlength+0x3f8>
      f4:	b	46c <find_minlength+0x46c>
      f8:	b	46c <find_minlength+0x46c>
      fc:	b	a44 <find_minlength+0xa44>
     100:	b	46c <find_minlength+0x46c>
     104:	b	46c <find_minlength+0x46c>
     108:	b	56c <find_minlength+0x56c>
     10c:	b	56c <find_minlength+0x56c>
     110:	b	56c <find_minlength+0x56c>
     114:	b	56c <find_minlength+0x56c>
     118:	b	56c <find_minlength+0x56c>
     11c:	b	56c <find_minlength+0x56c>
     120:	b	56c <find_minlength+0x56c>
     124:	b	56c <find_minlength+0x56c>
     128:	b	584 <find_minlength+0x584>
     12c:	b	568 <find_minlength+0x568>
     130:	b	568 <find_minlength+0x568>
     134:	b	578 <find_minlength+0x578>
     138:	b	56c <find_minlength+0x56c>
     13c:	b	56c <find_minlength+0x56c>
     140:	b	56c <find_minlength+0x56c>
     144:	b	56c <find_minlength+0x56c>
     148:	b	56c <find_minlength+0x56c>
     14c:	b	46c <find_minlength+0x46c>
     150:	b	46c <find_minlength+0x46c>
     154:	b	46c <find_minlength+0x46c>
     158:	b	46c <find_minlength+0x46c>
     15c:	b	46c <find_minlength+0x46c>
     160:	b	46c <find_minlength+0x46c>
     164:	b	4b4 <find_minlength+0x4b4>
     168:	b	4b4 <find_minlength+0x4b4>
     16c:	b	4b4 <find_minlength+0x4b4>
     170:	b	4b4 <find_minlength+0x4b4>
     174:	b	a1c <find_minlength+0xa1c>
     178:	b	a1c <find_minlength+0xa1c>
     17c:	b	4b4 <find_minlength+0x4b4>
     180:	b	4b4 <find_minlength+0x4b4>
     184:	b	a1c <find_minlength+0xa1c>
     188:	b	a1c <find_minlength+0xa1c>
     18c:	b	a1c <find_minlength+0xa1c>
     190:	b	a1c <find_minlength+0xa1c>
     194:	b	500 <find_minlength+0x500>
     198:	b	a1c <find_minlength+0xa1c>
     19c:	b	4b4 <find_minlength+0x4b4>
     1a0:	b	a1c <find_minlength+0xa1c>
     1a4:	b	a1c <find_minlength+0xa1c>
     1a8:	b	a1c <find_minlength+0xa1c>
     1ac:	b	a1c <find_minlength+0xa1c>
     1b0:	b	4b4 <find_minlength+0x4b4>
     1b4:	b	4b4 <find_minlength+0x4b4>
     1b8:	b	a1c <find_minlength+0xa1c>
     1bc:	b	a1c <find_minlength+0xa1c>
     1c0:	b	a1c <find_minlength+0xa1c>
     1c4:	b	a1c <find_minlength+0xa1c>
     1c8:	b	500 <find_minlength+0x500>
     1cc:	b	a1c <find_minlength+0xa1c>
     1d0:	b	4b4 <find_minlength+0x4b4>
     1d4:	b	a1c <find_minlength+0xa1c>
     1d8:	b	a1c <find_minlength+0xa1c>
     1dc:	b	a1c <find_minlength+0xa1c>
     1e0:	b	a1c <find_minlength+0xa1c>
     1e4:	b	4b4 <find_minlength+0x4b4>
     1e8:	b	4b4 <find_minlength+0x4b4>
     1ec:	b	a1c <find_minlength+0xa1c>
     1f0:	b	a1c <find_minlength+0xa1c>
     1f4:	b	a1c <find_minlength+0xa1c>
     1f8:	b	a1c <find_minlength+0xa1c>
     1fc:	b	500 <find_minlength+0x500>
     200:	b	a1c <find_minlength+0xa1c>
     204:	b	4b4 <find_minlength+0x4b4>
     208:	b	a1c <find_minlength+0xa1c>
     20c:	b	a1c <find_minlength+0xa1c>
     210:	b	a1c <find_minlength+0xa1c>
     214:	b	a1c <find_minlength+0xa1c>
     218:	b	4b4 <find_minlength+0x4b4>
     21c:	b	4b4 <find_minlength+0x4b4>
     220:	b	a1c <find_minlength+0xa1c>
     224:	b	a1c <find_minlength+0xa1c>
     228:	b	a1c <find_minlength+0xa1c>
     22c:	b	a1c <find_minlength+0xa1c>
     230:	b	500 <find_minlength+0x500>
     234:	b	a1c <find_minlength+0xa1c>
     238:	b	4b4 <find_minlength+0x4b4>
     23c:	b	a1c <find_minlength+0xa1c>
     240:	b	a1c <find_minlength+0xa1c>
     244:	b	590 <find_minlength+0x590>
     248:	b	590 <find_minlength+0x590>
     24c:	b	4c0 <find_minlength+0x4c0>
     250:	b	4c0 <find_minlength+0x4c0>
     254:	b	590 <find_minlength+0x590>
     258:	b	590 <find_minlength+0x590>
     25c:	b	5d0 <find_minlength+0x5d0>
     260:	b	5d0 <find_minlength+0x5d0>
     264:	b	518 <find_minlength+0x518>
     268:	b	590 <find_minlength+0x590>
     26c:	b	4c0 <find_minlength+0x4c0>
     270:	b	590 <find_minlength+0x590>
     274:	b	5d0 <find_minlength+0x5d0>
     278:	b	a54 <find_minlength+0xa54>
     27c:	b	a54 <find_minlength+0xa54>
     280:	b	a54 <find_minlength+0xa54>
     284:	b	a54 <find_minlength+0xa54>
     288:	b	a54 <find_minlength+0xa54>
     28c:	b	a54 <find_minlength+0xa54>
     290:	b	a54 <find_minlength+0xa54>
     294:	b	a54 <find_minlength+0xa54>
     298:	b	a54 <find_minlength+0xa54>
     29c:	b	a54 <find_minlength+0xa54>
     2a0:	b	a54 <find_minlength+0xa54>
     2a4:	b	a54 <find_minlength+0xa54>
     2a8:	b	610 <find_minlength+0x610>
     2ac:	b	610 <find_minlength+0x610>
     2b0:	b	a54 <find_minlength+0xa54>
     2b4:	b	7dc <find_minlength+0x7dc>
     2b8:	b	7dc <find_minlength+0x7dc>
     2bc:	b	690 <find_minlength+0x690>
     2c0:	b	690 <find_minlength+0x690>
     2c4:	b	954 <find_minlength+0x954>
     2c8:	b	46c <find_minlength+0x46c>
     2cc:	b	3f8 <find_minlength+0x3f8>
     2d0:	b	3f8 <find_minlength+0x3f8>
     2d4:	b	3f8 <find_minlength+0x3f8>
     2d8:	b	3f8 <find_minlength+0x3f8>
     2dc:	b	3f8 <find_minlength+0x3f8>
     2e0:	b	46c <find_minlength+0x46c>
     2e4:	b	450 <find_minlength+0x450>
     2e8:	b	450 <find_minlength+0x450>
     2ec:	b	450 <find_minlength+0x450>
     2f0:	b	450 <find_minlength+0x450>
     2f4:	b	39c <find_minlength+0x39c>
     2f8:	b	39c <find_minlength+0x39c>
     2fc:	b	39c <find_minlength+0x39c>
     300:	b	39c <find_minlength+0x39c>
     304:	b	39c <find_minlength+0x39c>
     308:	b	39c <find_minlength+0x39c>
     30c:	b	378 <find_minlength+0x378>
     310:	b	39c <find_minlength+0x39c>
     314:	b	39c <find_minlength+0x39c>
     318:	b	39c <find_minlength+0x39c>
     31c:	b	39c <find_minlength+0x39c>
     320:	b	378 <find_minlength+0x378>
     324:	b	46c <find_minlength+0x46c>
     328:	b	46c <find_minlength+0x46c>
     32c:	b	46c <find_minlength+0x46c>
     330:	b	46c <find_minlength+0x46c>
     334:	b	46c <find_minlength+0x46c>
     338:	b	480 <find_minlength+0x480>
     33c:	b	480 <find_minlength+0x480>
     340:	b	480 <find_minlength+0x480>
     344:	b	a2c <find_minlength+0xa2c>
     348:	b	a44 <find_minlength+0xa44>
     34c:	b	a2c <find_minlength+0xa2c>
     350:	b	a44 <find_minlength+0xa44>
     354:	b	a2c <find_minlength+0xa2c>
     358:	b	a44 <find_minlength+0xa44>
     35c:	b	a2c <find_minlength+0xa2c>
     360:	b	a44 <find_minlength+0xa44>
     364:	b	a44 <find_minlength+0xa44>
     368:	b	3f0 <find_minlength+0x3f0>
     36c:	b	3f0 <find_minlength+0x3f0>
     370:	b	a44 <find_minlength+0xa44>
     374:	b	480 <find_minlength+0x480>
     378:	ldrb	r1, [r9, #2]
     37c:	ldrb	r2, [r9, #1]
     380:	orr	r1, r1, r2, lsl #8
     384:	add	r2, r9, r1
     388:	ldrb	r0, [r2]
     38c:	cmp	r0, #119	; 0x77
     390:	beq	39c <find_minlength+0x39c>
     394:	add	r9, r2, #3
     398:	b	d4 <find_minlength+0xd4>
     39c:	ldr	ip, [sp, #24]
     3a0:	str	ip, [sp, #4]
     3a4:	ldr	ip, [sp, #20]
     3a8:	str	ip, [sp]
     3ac:	mov	r3, r5
     3b0:	ldr	r2, [sp, #16]
     3b4:	mov	r1, r9
     3b8:	mov	r0, r7
     3bc:	bl	0 <find_minlength>
     3c0:	cmp	r0, #0
     3c4:	blt	a58 <find_minlength+0xa58>
     3c8:	add	fp, fp, r0
     3cc:	ldrb	r0, [r9, #2]
     3d0:	ldrb	r1, [r9, #1]
     3d4:	orr	r2, r0, r1, lsl #8
     3d8:	add	r9, r9, r2
     3dc:	ldrb	ip, [r9]
     3e0:	cmp	ip, #119	; 0x77
     3e4:	beq	3cc <find_minlength+0x3cc>
     3e8:	add	r9, r9, #3
     3ec:	b	d4 <find_minlength+0xd4>
     3f0:	mvn	r0, #0
     3f4:	b	a58 <find_minlength+0xa58>
     3f8:	cmp	sl, #0
     3fc:	blt	420 <find_minlength+0x420>
     400:	cmp	r6, #0
     404:	bne	418 <find_minlength+0x418>
     408:	cmp	fp, sl
     40c:	movlt	r0, #1
     410:	movge	r0, #0
     414:	b	424 <find_minlength+0x424>
     418:	mov	r0, #0
     41c:	b	424 <find_minlength+0x424>
     420:	mov	r0, #1
     424:	cmp	r0, #0
     428:	movne	sl, fp
     42c:	moveq	sl, sl
     430:	cmp	ip, #119	; 0x77
     434:	beq	440 <find_minlength+0x440>
     438:	mov	r0, sl
     43c:	b	a58 <find_minlength+0xa58>
     440:	add	r9, r9, #3
     444:	mov	fp, #0
     448:	mov	r6, #0
     44c:	b	d4 <find_minlength+0xd4>
     450:	ldrb	r3, [r9, #2]
     454:	ldrb	ip, [r9, #1]
     458:	orr	r3, r3, ip, lsl #8
     45c:	add	r9, r9, r3
     460:	ldrb	r1, [r9]
     464:	cmp	r1, #119	; 0x77
     468:	beq	450 <find_minlength+0x450>
     46c:	ldr	r1, [pc, #1556]	; a88 <find_minlength+0xa88>
     470:	ldrb	ip, [r9]
     474:	ldrb	r3, [r1, ip]
     478:	add	r9, r9, r3
     47c:	b	d4 <find_minlength+0xd4>
     480:	ldr	r2, [pc, #1536]	; a88 <find_minlength+0xa88>
     484:	ldrb	r0, [r9]
     488:	ldrb	r0, [r2, r0]
     48c:	add	ip, r9, r0
     490:	ldrb	r2, [ip, #2]
     494:	ldrb	r0, [ip, #1]
     498:	orr	r3, r2, r0, lsl #8
     49c:	add	ip, ip, r3
     4a0:	ldrb	r2, [ip]
     4a4:	cmp	r2, #119	; 0x77
     4a8:	beq	490 <find_minlength+0x490>
     4ac:	add	r9, ip, #3
     4b0:	b	d4 <find_minlength+0xd4>
     4b4:	add	fp, fp, #1
     4b8:	add	r9, r9, #2
     4bc:	b	d4 <find_minlength+0xd4>
     4c0:	add	fp, fp, #1
     4c4:	ldrb	r3, [r9, #1]
     4c8:	cmp	r3, #16
     4cc:	beq	4e0 <find_minlength+0x4e0>
     4d0:	cmp	r3, #15
     4d4:	moveq	ip, #1
     4d8:	movne	ip, #0
     4dc:	b	4e4 <find_minlength+0x4e4>
     4e0:	mov	ip, #1
     4e4:	mov	r0, #4
     4e8:	mov	r1, #2
     4ec:	cmp	ip, #0
     4f0:	movne	ip, r0
     4f4:	moveq	ip, r1
     4f8:	add	r9, r9, ip
     4fc:	b	d4 <find_minlength+0xd4>
     500:	ldrb	r3, [r9, #2]
     504:	ldrb	ip, [r9, #1]
     508:	orr	r2, r3, ip, lsl #8
     50c:	add	fp, fp, r2
     510:	add	r9, r9, #4
     514:	b	d4 <find_minlength+0xd4>
     518:	ldrb	r3, [r9, #2]
     51c:	ldrb	ip, [r9, #1]
     520:	orr	r1, r3, ip, lsl #8
     524:	add	fp, fp, r1
     528:	ldrb	ip, [r9, #3]
     52c:	cmp	ip, #16
     530:	beq	544 <find_minlength+0x544>
     534:	cmp	ip, #15
     538:	moveq	r2, #1
     53c:	movne	r2, #0
     540:	b	548 <find_minlength+0x548>
     544:	mov	r2, #1
     548:	mov	ip, #2
     54c:	mov	r3, #0
     550:	cmp	r2, #0
     554:	movne	r0, ip
     558:	moveq	r0, r3
     55c:	add	r1, r9, r0
     560:	add	r9, r1, #4
     564:	b	d4 <find_minlength+0xd4>
     568:	add	r9, r9, #2
     56c:	add	fp, fp, #1
     570:	add	r9, r9, #1
     574:	b	d4 <find_minlength+0xd4>
     578:	add	fp, fp, #1
     57c:	add	r9, r9, #1
     580:	b	d4 <find_minlength+0xd4>
     584:	add	fp, fp, #1
     588:	add	r9, r9, #1
     58c:	b	d4 <find_minlength+0xd4>
     590:	ldrb	r0, [r9, #1]
     594:	cmp	r0, #16
     598:	beq	5ac <find_minlength+0x5ac>
     59c:	cmp	r0, #15
     5a0:	moveq	r3, #1
     5a4:	movne	r3, #0
     5a8:	b	5b0 <find_minlength+0x5b0>
     5ac:	mov	r3, #1
     5b0:	add	r2, r9, #2
     5b4:	cmp	r3, #0
     5b8:	movne	r1, r2
     5bc:	moveq	r1, r9
     5c0:	ldr	r0, [pc, #1216]	; a88 <find_minlength+0xa88>
     5c4:	ldrb	r2, [r0, ip]
     5c8:	add	r9, r1, r2
     5cc:	b	d4 <find_minlength+0xd4>
     5d0:	ldrb	r2, [r9, #3]
     5d4:	cmp	r2, #16
     5d8:	beq	5ec <find_minlength+0x5ec>
     5dc:	cmp	r2, #15
     5e0:	moveq	r1, #1
     5e4:	movne	r1, #0
     5e8:	b	5f0 <find_minlength+0x5f0>
     5ec:	mov	r1, #1
     5f0:	add	r0, r9, #2
     5f4:	cmp	r1, #0
     5f8:	movne	r3, r0
     5fc:	moveq	r3, r9
     600:	ldr	r0, [pc, #1152]	; a88 <find_minlength+0xa88>
     604:	ldrb	r1, [r0, ip]
     608:	add	r9, r3, r1
     60c:	b	d4 <find_minlength+0xd4>
     610:	ldr	ip, [pc, #1132]	; a84 <find_minlength+0xa84>
     614:	ldrb	r2, [ip]
     618:	add	r9, r9, r2
     61c:	ldrb	ip, [r9]
     620:	sub	r2, ip, #98	; 0x62
     624:	cmp	r2, #12
     628:	bcs	688 <find_minlength+0x688>
     62c:	add	pc, pc, r2, lsl #2
     630:	nop	{0}
     634:	b	668 <find_minlength+0x668>
     638:	b	668 <find_minlength+0x668>
     63c:	b	664 <find_minlength+0x664>
     640:	b	664 <find_minlength+0x664>
     644:	b	668 <find_minlength+0x668>
     648:	b	668 <find_minlength+0x668>
     64c:	b	670 <find_minlength+0x670>
     650:	b	670 <find_minlength+0x670>
     654:	b	668 <find_minlength+0x668>
     658:	b	664 <find_minlength+0x664>
     65c:	b	668 <find_minlength+0x668>
     660:	b	670 <find_minlength+0x670>
     664:	add	fp, fp, #1
     668:	add	r9, r9, #1
     66c:	b	d4 <find_minlength+0xd4>
     670:	ldrb	r2, [r9, #2]
     674:	ldrb	r1, [r9, #1]
     678:	orr	r2, r2, r1, lsl #8
     67c:	add	fp, fp, r2
     680:	add	r9, r9, #5
     684:	b	d4 <find_minlength+0xd4>
     688:	add	fp, fp, #1
     68c:	b	d4 <find_minlength+0xd4>
     690:	and	ip, r5, #33554432	; 0x2000000
     694:	cmp	ip, #0
     698:	bne	7d0 <find_minlength+0x7d0>
     69c:	ldrb	r2, [r9, #4]
     6a0:	ldrb	r3, [r9, #3]
     6a4:	orr	r2, r2, r3, lsl #8
     6a8:	str	r2, [sp, #28]
     6ac:	ldrb	ip, [r9, #2]
     6b0:	ldrb	r3, [r9, #1]
     6b4:	orr	r3, ip, r3, lsl #8
     6b8:	ldrh	ip, [r7, #36]	; 0x24
     6bc:	ldrh	r0, [r7, #34]	; 0x22
     6c0:	add	r0, r7, r0
     6c4:	mla	r8, r3, ip, r0
     6c8:	mvn	r4, #-2147483648	; 0x80000000
     6cc:	ldr	r2, [sp, #28]
     6d0:	sub	r3, r2, #1
     6d4:	str	r3, [sp, #28]
     6d8:	cmp	r2, #0
     6dc:	ble	7d4 <find_minlength+0x7d4>
     6e0:	ldrb	ip, [r8, #1]
     6e4:	ldrb	r1, [r8]
     6e8:	orr	r2, ip, r1, lsl #8
     6ec:	ldr	r1, [sp, #32]
     6f0:	ldr	r0, [sp, #16]
     6f4:	bl	0 <coda__pcre_find_bracket>
     6f8:	mov	r1, r0
     6fc:	cmp	r1, #0
     700:	bne	70c <find_minlength+0x70c>
     704:	mvn	r0, #1
     708:	b	a58 <find_minlength+0xa58>
     70c:	ldrb	r2, [r0, #2]
     710:	ldrb	r3, [r0, #1]
     714:	orr	r2, r2, r3, lsl #8
     718:	add	r0, r0, r2
     71c:	ldrb	r2, [r0]
     720:	cmp	r2, #119	; 0x77
     724:	beq	70c <find_minlength+0x70c>
     728:	cmp	r9, r0
     72c:	movcc	r3, #1
     730:	movcs	r3, #0
     734:	mov	ip, #0
     738:	cmp	r9, r1
     73c:	movhi	r0, r3
     740:	movls	r0, ip
     744:	cmp	r0, #0
     748:	bne	7c4 <find_minlength+0x7c4>
     74c:	ldr	r0, [sp, #20]
     750:	cmp	r0, #0
     754:	beq	76c <find_minlength+0x76c>
     758:	ldr	r3, [r0, #4]
     75c:	cmp	r3, r1
     760:	beq	76c <find_minlength+0x76c>
     764:	ldr	r0, [r0]
     768:	b	750 <find_minlength+0x750>
     76c:	cmp	r0, #0
     770:	bne	7b8 <find_minlength+0x7b8>
     774:	ldr	ip, [sp, #20]
     778:	str	ip, [sp, #72]	; 0x48
     77c:	str	r1, [sp, #76]	; 0x4c
     780:	add	r0, sp, #72	; 0x48
     784:	ldr	ip, [sp, #24]
     788:	str	ip, [sp, #4]
     78c:	str	r0, [sp]
     790:	mov	r3, r5
     794:	ldr	r2, [sp, #16]
     798:	mov	r0, r7
     79c:	bl	0 <find_minlength>
     7a0:	cmp	r0, r4
     7a4:	movlt	r4, r0
     7a8:	movge	r4, r4
     7ac:	ldrh	r0, [r7, #36]	; 0x24
     7b0:	add	r8, r8, r0
     7b4:	b	6cc <find_minlength+0x6cc>
     7b8:	mov	r4, #0
     7bc:	mov	r6, #1
     7c0:	b	7d4 <find_minlength+0x7d4>
     7c4:	mov	r4, #0
     7c8:	mov	r6, #1
     7cc:	b	7d4 <find_minlength+0x7d4>
     7d0:	mov	r4, #0
     7d4:	add	r9, r9, #5
     7d8:	b	8d4 <find_minlength+0x8d4>
     7dc:	and	r1, r5, #33554432	; 0x2000000
     7e0:	cmp	r1, #0
     7e4:	bne	8cc <find_minlength+0x8cc>
     7e8:	ldrb	ip, [r9, #2]
     7ec:	ldrb	r1, [r9, #1]
     7f0:	orr	r2, ip, r1, lsl #8
     7f4:	ldr	r1, [sp, #32]
     7f8:	ldr	r0, [sp, #16]
     7fc:	bl	0 <coda__pcre_find_bracket>
     800:	mov	ip, r0
     804:	cmp	r0, #0
     808:	bne	814 <find_minlength+0x814>
     80c:	mvn	r0, #1
     810:	b	a58 <find_minlength+0xa58>
     814:	ldrb	r1, [ip, #2]
     818:	ldrb	r2, [ip, #1]
     81c:	orr	r1, r1, r2, lsl #8
     820:	add	ip, ip, r1
     824:	ldrb	r2, [ip]
     828:	cmp	r2, #119	; 0x77
     82c:	beq	814 <find_minlength+0x814>
     830:	cmp	r9, ip
     834:	movcc	r3, #1
     838:	movcs	r3, #0
     83c:	mov	ip, #0
     840:	cmp	r9, r0
     844:	movhi	r1, r3
     848:	movls	r1, ip
     84c:	cmp	r1, #0
     850:	bne	8c0 <find_minlength+0x8c0>
     854:	ldr	r2, [sp, #20]
     858:	cmp	r2, #0
     85c:	beq	874 <find_minlength+0x874>
     860:	ldr	r3, [r2, #4]
     864:	cmp	r3, r0
     868:	beq	874 <find_minlength+0x874>
     86c:	ldr	r2, [r2]
     870:	b	858 <find_minlength+0x858>
     874:	cmp	r2, #0
     878:	bne	8b4 <find_minlength+0x8b4>
     87c:	ldr	ip, [sp, #20]
     880:	str	ip, [sp, #72]	; 0x48
     884:	str	r0, [sp, #76]	; 0x4c
     888:	add	r1, sp, #72	; 0x48
     88c:	ldr	ip, [sp, #24]
     890:	str	ip, [sp, #4]
     894:	str	r1, [sp]
     898:	mov	r3, r5
     89c:	ldr	r2, [sp, #16]
     8a0:	mov	r1, r0
     8a4:	mov	r0, r7
     8a8:	bl	0 <find_minlength>
     8ac:	mov	r4, r0
     8b0:	b	8d0 <find_minlength+0x8d0>
     8b4:	mov	r4, #0
     8b8:	mov	r6, #1
     8bc:	b	8d0 <find_minlength+0x8d0>
     8c0:	mov	r4, #0
     8c4:	mov	r6, #1
     8c8:	b	8d0 <find_minlength+0x8d0>
     8cc:	mov	r4, #0
     8d0:	add	r9, r9, #3
     8d4:	ldrb	r0, [r9]
     8d8:	sub	r0, r0, #98	; 0x62
     8dc:	cmp	r0, #12
     8e0:	bcs	948 <find_minlength+0x948>
     8e4:	add	pc, pc, r0, lsl #2
     8e8:	nop	{0}
     8ec:	b	91c <find_minlength+0x91c>
     8f0:	b	91c <find_minlength+0x91c>
     8f4:	b	928 <find_minlength+0x928>
     8f8:	b	928 <find_minlength+0x928>
     8fc:	b	91c <find_minlength+0x91c>
     900:	b	91c <find_minlength+0x91c>
     904:	b	934 <find_minlength+0x934>
     908:	b	934 <find_minlength+0x934>
     90c:	b	91c <find_minlength+0x91c>
     910:	b	928 <find_minlength+0x928>
     914:	b	91c <find_minlength+0x91c>
     918:	b	934 <find_minlength+0x934>
     91c:	mov	r0, #0
     920:	add	r9, r9, #1
     924:	b	94c <find_minlength+0x94c>
     928:	mov	r0, #1
     92c:	add	r9, r9, #1
     930:	b	94c <find_minlength+0x94c>
     934:	ldrb	ip, [r9, #2]
     938:	ldrb	r3, [r9, #1]
     93c:	orr	r0, ip, r3, lsl #8
     940:	add	r9, r9, #5
     944:	b	94c <find_minlength+0x94c>
     948:	mov	r0, #1
     94c:	mla	fp, r0, r4, fp
     950:	b	d4 <find_minlength+0xd4>
     954:	ldrb	ip, [r9, #2]
     958:	ldrb	r2, [r9, #1]
     95c:	orr	r1, ip, r2, lsl #8
     960:	ldr	r0, [sp, #16]
     964:	add	r1, r0, r1
     968:	mov	r3, r1
     96c:	ldrb	ip, [r3, #2]
     970:	ldrb	r2, [r3, #1]
     974:	orr	r0, ip, r2, lsl #8
     978:	add	r3, r3, r0
     97c:	ldrb	r0, [r3]
     980:	cmp	r0, #119	; 0x77
     984:	beq	96c <find_minlength+0x96c>
     988:	cmp	r9, r3
     98c:	movcc	r0, #1
     990:	movcs	r0, #0
     994:	mov	ip, #0
     998:	cmp	r9, r1
     99c:	movhi	r3, r0
     9a0:	movls	r3, ip
     9a4:	cmp	r3, #0
     9a8:	bne	a10 <find_minlength+0xa10>
     9ac:	ldr	r3, [sp, #20]
     9b0:	cmp	r3, #0
     9b4:	beq	9cc <find_minlength+0x9cc>
     9b8:	ldr	r0, [r3, #4]
     9bc:	cmp	r0, r1
     9c0:	beq	9cc <find_minlength+0x9cc>
     9c4:	ldr	r3, [r3]
     9c8:	b	9b0 <find_minlength+0x9b0>
     9cc:	cmp	r3, #0
     9d0:	bne	a08 <find_minlength+0xa08>
     9d4:	ldr	r2, [sp, #20]
     9d8:	str	r2, [sp, #72]	; 0x48
     9dc:	str	r1, [sp, #76]	; 0x4c
     9e0:	add	r2, sp, #72	; 0x48
     9e4:	ldr	ip, [sp, #24]
     9e8:	str	ip, [sp, #4]
     9ec:	str	r2, [sp]
     9f0:	mov	r3, r5
     9f4:	ldr	r2, [sp, #16]
     9f8:	mov	r0, r7
     9fc:	bl	0 <find_minlength>
     a00:	add	fp, fp, r0
     a04:	b	a14 <find_minlength+0xa14>
     a08:	mov	r6, #1
     a0c:	b	a14 <find_minlength+0xa14>
     a10:	mov	r6, #1
     a14:	add	r9, r9, #3
     a18:	b	d4 <find_minlength+0xd4>
     a1c:	ldr	r2, [pc, #100]	; a88 <find_minlength+0xa88>
     a20:	ldrb	r0, [r2, ip]
     a24:	add	r9, r9, r0
     a28:	b	d4 <find_minlength+0xd4>
     a2c:	ldr	r2, [pc, #84]	; a88 <find_minlength+0xa88>
     a30:	ldrb	r3, [r2, ip]
     a34:	ldrb	r0, [r9, #1]
     a38:	add	r3, r3, r0
     a3c:	add	r9, r9, r3
     a40:	b	d4 <find_minlength+0xd4>
     a44:	ldr	r1, [pc, #60]	; a88 <find_minlength+0xa88>
     a48:	ldrb	r1, [r1, ip]
     a4c:	add	r9, r9, r1
     a50:	b	d4 <find_minlength+0xd4>
     a54:	mvn	r0, #2
     a58:	ldr	r4, [sp, #36]	; 0x24
     a5c:	ldr	r5, [sp, #40]	; 0x28
     a60:	ldr	r6, [sp, #44]	; 0x2c
     a64:	ldr	r7, [sp, #48]	; 0x30
     a68:	ldr	r8, [sp, #52]	; 0x34
     a6c:	ldr	r9, [sp, #56]	; 0x38
     a70:	ldr	sl, [sp, #60]	; 0x3c
     a74:	ldr	fp, [sp, #64]	; 0x40
     a78:	ldr	lr, [sp, #12]
     a7c:	add	sp, sp, #80	; 0x50
     a80:	bx	lr
     a84:	.word	0x0000006e
     a88:	.word	0x00000000

00000a8c <set_table_bit>:
     a8c:	mov	ip, sp
     a90:	sub	sp, sp, #24
     a94:	str	ip, [sp]
     a98:	str	lr, [sp, #4]
     a9c:	str	r4, [sp, #8]
     aa0:	str	r5, [sp, #12]
     aa4:	str	r6, [sp, #16]
     aa8:	ldrb	r5, [r1]
     aac:	ldrb	r4, [r0, r5, lsr #3]
     ab0:	mov	ip, #1
     ab4:	and	r6, r5, #7
     ab8:	lsl	ip, ip, r6
     abc:	orr	ip, r4, ip
     ac0:	strb	ip, [r0, r5, lsr #3]
     ac4:	cmp	r2, #0
     ac8:	beq	b0c <set_table_bit+0x80>
     acc:	ldr	r2, [r3, #12]
     ad0:	ldrb	r2, [r2, r5]
     ad4:	and	ip, r2, #2
     ad8:	cmp	ip, #0
     adc:	beq	b0c <set_table_bit+0x80>
     ae0:	ldr	r2, [r3, #4]
     ae4:	ldrb	r2, [r2, r5]
     ae8:	asr	lr, r2, #31
     aec:	add	lr, r2, lr, lsr #29
     af0:	asr	r3, lr, #3
     af4:	ldrb	ip, [r0, r3]
     af8:	mov	r4, #1
     afc:	and	r2, r2, #7
     b00:	lsl	r2, r4, r2
     b04:	orr	r2, ip, r2
     b08:	strb	r2, [r0, r3]
     b0c:	add	r0, r1, #1
     b10:	ldr	r4, [sp, #8]
     b14:	ldr	r5, [sp, #12]
     b18:	ldr	r6, [sp, #16]
     b1c:	ldr	lr, [sp, #4]
     b20:	add	sp, sp, #24
     b24:	bx	lr

00000b28 <set_type_bits>:
     b28:	mov	ip, sp
     b2c:	sub	sp, sp, #24
     b30:	str	ip, [sp]
     b34:	str	lr, [sp, #4]
     b38:	str	r4, [sp, #8]
     b3c:	str	r5, [sp, #12]
     b40:	str	r6, [sp, #16]
     b44:	mov	r5, #0
     b48:	cmp	r5, r2
     b4c:	bcs	b70 <set_type_bits+0x48>
     b50:	ldrb	r4, [r0, r5]
     b54:	ldr	ip, [r3, #8]
     b58:	add	r6, r5, r1
     b5c:	ldrb	ip, [ip, r6]
     b60:	orr	ip, r4, ip
     b64:	strb	ip, [r0, r5]
     b68:	add	r5, r5, #1
     b6c:	b	b48 <set_type_bits+0x20>
     b70:	ldr	r4, [sp, #8]
     b74:	ldr	r5, [sp, #12]
     b78:	ldr	r6, [sp, #16]
     b7c:	ldr	lr, [sp, #4]
     b80:	add	sp, sp, #24
     b84:	bx	lr

00000b88 <set_nottype_bits>:
     b88:	mov	ip, sp
     b8c:	sub	sp, sp, #24
     b90:	str	ip, [sp]
     b94:	str	lr, [sp, #4]
     b98:	str	r4, [sp, #8]
     b9c:	str	r5, [sp, #12]
     ba0:	str	r6, [sp, #16]
     ba4:	mov	r6, #0
     ba8:	cmp	r6, r2
     bac:	bcs	bd4 <set_nottype_bits+0x4c>
     bb0:	ldrb	ip, [r0, r6]
     bb4:	ldr	r4, [r3, #8]
     bb8:	add	r5, r6, r1
     bbc:	ldrb	r4, [r4, r5]
     bc0:	mvn	r4, r4
     bc4:	orr	ip, ip, r4
     bc8:	strb	ip, [r0, r6]
     bcc:	add	r6, r6, #1
     bd0:	b	ba8 <set_nottype_bits+0x20>
     bd4:	ldr	r4, [sp, #8]
     bd8:	ldr	r5, [sp, #12]
     bdc:	ldr	r6, [sp, #16]
     be0:	ldr	lr, [sp, #4]
     be4:	add	sp, sp, #24
     be8:	bx	lr

00000bec <set_start_bits>:
     bec:	mov	ip, sp
     bf0:	sub	sp, sp, #48	; 0x30
     bf4:	str	ip, [sp, #4]
     bf8:	str	lr, [sp, #8]
     bfc:	str	r4, [sp, #16]
     c00:	str	r5, [sp, #20]
     c04:	str	r6, [sp, #24]
     c08:	str	r7, [sp, #28]
     c0c:	str	r8, [sp, #32]
     c10:	str	r9, [sp, #36]	; 0x24
     c14:	str	sl, [sp, #40]	; 0x28
     c18:	str	fp, [sp, #44]	; 0x2c
     c1c:	mov	r4, r3
     c20:	mov	r9, r2
     c24:	mov	r5, r1
     c28:	mov	r6, r0
     c2c:	mov	r7, #1
     c30:	mov	sl, #32
     c34:	mov	r8, #1
     c38:	add	r0, r6, #3
     c3c:	ldrb	r3, [r6]
     c40:	cmp	r3, #133	; 0x85
     c44:	beq	c68 <set_start_bits+0x7c>
     c48:	cmp	r3, #138	; 0x8a
     c4c:	beq	c68 <set_start_bits+0x7c>
     c50:	cmp	r3, #134	; 0x86
     c54:	beq	c68 <set_start_bits+0x7c>
     c58:	cmp	r3, #139	; 0x8b
     c5c:	moveq	r1, #1
     c60:	movne	r1, #0
     c64:	b	c6c <set_start_bits+0x80>
     c68:	mov	r1, #1
     c6c:	add	ip, r0, #2
     c70:	cmp	r1, #0
     c74:	movne	fp, ip
     c78:	moveq	fp, r0
     c7c:	ldrb	ip, [fp]
     c80:	cmp	ip, #162	; 0xa2
     c84:	bcs	1484 <set_start_bits+0x898>
     c88:	add	pc, pc, ip, lsl #2
     c8c:	nop	{0}
     c90:	b	f18 <set_start_bits+0x32c>
     c94:	b	f18 <set_start_bits+0x32c>
     c98:	b	f18 <set_start_bits+0x32c>
     c9c:	b	f18 <set_start_bits+0x32c>
     ca0:	b	f88 <set_start_bits+0x39c>
     ca4:	b	f88 <set_start_bits+0x39c>
     ca8:	b	11d4 <set_start_bits+0x5e8>
     cac:	b	11ec <set_start_bits+0x600>
     cb0:	b	1204 <set_start_bits+0x618>
     cb4:	b	121c <set_start_bits+0x630>
     cb8:	b	1234 <set_start_bits+0x648>
     cbc:	b	124c <set_start_bits+0x660>
     cc0:	b	f18 <set_start_bits+0x32c>
     cc4:	b	f18 <set_start_bits+0x32c>
     cc8:	b	f18 <set_start_bits+0x32c>
     ccc:	b	f18 <set_start_bits+0x32c>
     cd0:	b	f20 <set_start_bits+0x334>
     cd4:	b	11a0 <set_start_bits+0x5b4>
     cd8:	b	f18 <set_start_bits+0x32c>
     cdc:	b	1178 <set_start_bits+0x58c>
     ce0:	b	f18 <set_start_bits+0x32c>
     ce4:	b	11a0 <set_start_bits+0x5b4>
     ce8:	b	f18 <set_start_bits+0x32c>
     cec:	b	f18 <set_start_bits+0x32c>
     cf0:	b	f18 <set_start_bits+0x32c>
     cf4:	b	f18 <set_start_bits+0x32c>
     cf8:	b	f18 <set_start_bits+0x32c>
     cfc:	b	f18 <set_start_bits+0x32c>
     d00:	b	f18 <set_start_bits+0x32c>
     d04:	b	113c <set_start_bits+0x550>
     d08:	b	115c <set_start_bits+0x570>
     d0c:	b	f18 <set_start_bits+0x32c>
     d10:	b	f18 <set_start_bits+0x32c>
     d14:	b	10b8 <set_start_bits+0x4cc>
     d18:	b	10b8 <set_start_bits+0x4cc>
     d1c:	b	113c <set_start_bits+0x550>
     d20:	b	113c <set_start_bits+0x550>
     d24:	b	10b8 <set_start_bits+0x4cc>
     d28:	b	10b8 <set_start_bits+0x4cc>
     d2c:	b	10f8 <set_start_bits+0x50c>
     d30:	b	10f8 <set_start_bits+0x50c>
     d34:	b	1138 <set_start_bits+0x54c>
     d38:	b	10b8 <set_start_bits+0x4cc>
     d3c:	b	113c <set_start_bits+0x550>
     d40:	b	10b8 <set_start_bits+0x4cc>
     d44:	b	10f8 <set_start_bits+0x50c>
     d48:	b	10d8 <set_start_bits+0x4ec>
     d4c:	b	10d8 <set_start_bits+0x4ec>
     d50:	b	115c <set_start_bits+0x570>
     d54:	b	115c <set_start_bits+0x570>
     d58:	b	10d8 <set_start_bits+0x4ec>
     d5c:	b	10d8 <set_start_bits+0x4ec>
     d60:	b	1118 <set_start_bits+0x52c>
     d64:	b	1118 <set_start_bits+0x52c>
     d68:	b	1158 <set_start_bits+0x56c>
     d6c:	b	10d8 <set_start_bits+0x4ec>
     d70:	b	115c <set_start_bits+0x570>
     d74:	b	10d8 <set_start_bits+0x4ec>
     d78:	b	1118 <set_start_bits+0x52c>
     d7c:	b	f18 <set_start_bits+0x32c>
     d80:	b	f18 <set_start_bits+0x32c>
     d84:	b	f18 <set_start_bits+0x32c>
     d88:	b	f18 <set_start_bits+0x32c>
     d8c:	b	f18 <set_start_bits+0x32c>
     d90:	b	f18 <set_start_bits+0x32c>
     d94:	b	f18 <set_start_bits+0x32c>
     d98:	b	f18 <set_start_bits+0x32c>
     d9c:	b	f18 <set_start_bits+0x32c>
     da0:	b	f18 <set_start_bits+0x32c>
     da4:	b	f18 <set_start_bits+0x32c>
     da8:	b	f18 <set_start_bits+0x32c>
     dac:	b	f18 <set_start_bits+0x32c>
     db0:	b	f18 <set_start_bits+0x32c>
     db4:	b	f18 <set_start_bits+0x32c>
     db8:	b	f18 <set_start_bits+0x32c>
     dbc:	b	f18 <set_start_bits+0x32c>
     dc0:	b	f18 <set_start_bits+0x32c>
     dc4:	b	f18 <set_start_bits+0x32c>
     dc8:	b	f18 <set_start_bits+0x32c>
     dcc:	b	f18 <set_start_bits+0x32c>
     dd0:	b	f18 <set_start_bits+0x32c>
     dd4:	b	f18 <set_start_bits+0x32c>
     dd8:	b	f18 <set_start_bits+0x32c>
     ddc:	b	f18 <set_start_bits+0x32c>
     de0:	b	f18 <set_start_bits+0x32c>
     de4:	b	1278 <set_start_bits+0x68c>
     de8:	b	1278 <set_start_bits+0x68c>
     dec:	b	1264 <set_start_bits+0x678>
     df0:	b	1264 <set_start_bits+0x678>
     df4:	b	1278 <set_start_bits+0x68c>
     df8:	b	1278 <set_start_bits+0x68c>
     dfc:	b	1274 <set_start_bits+0x688>
     e00:	b	1274 <set_start_bits+0x688>
     e04:	b	126c <set_start_bits+0x680>
     e08:	b	1278 <set_start_bits+0x68c>
     e0c:	b	1264 <set_start_bits+0x678>
     e10:	b	1278 <set_start_bits+0x68c>
     e14:	b	1274 <set_start_bits+0x688>
     e18:	b	1484 <set_start_bits+0x898>
     e1c:	b	1484 <set_start_bits+0x898>
     e20:	b	1484 <set_start_bits+0x898>
     e24:	b	1484 <set_start_bits+0x898>
     e28:	b	1484 <set_start_bits+0x898>
     e2c:	b	1484 <set_start_bits+0x898>
     e30:	b	1484 <set_start_bits+0x898>
     e34:	b	1484 <set_start_bits+0x898>
     e38:	b	1484 <set_start_bits+0x898>
     e3c:	b	1484 <set_start_bits+0x898>
     e40:	b	1484 <set_start_bits+0x898>
     e44:	b	1484 <set_start_bits+0x898>
     e48:	b	13c8 <set_start_bits+0x7dc>
     e4c:	b	13c8 <set_start_bits+0x7dc>
     e50:	b	1484 <set_start_bits+0x898>
     e54:	b	f18 <set_start_bits+0x32c>
     e58:	b	f18 <set_start_bits+0x32c>
     e5c:	b	f18 <set_start_bits+0x32c>
     e60:	b	f18 <set_start_bits+0x32c>
     e64:	b	f18 <set_start_bits+0x32c>
     e68:	b	1004 <set_start_bits+0x418>
     e6c:	b	ff4 <set_start_bits+0x408>
     e70:	b	ffc <set_start_bits+0x410>
     e74:	b	ffc <set_start_bits+0x410>
     e78:	b	ffc <set_start_bits+0x410>
     e7c:	b	ffc <set_start_bits+0x410>
     e80:	b	f18 <set_start_bits+0x32c>
     e84:	b	f90 <set_start_bits+0x3a4>
     e88:	b	100c <set_start_bits+0x420>
     e8c:	b	100c <set_start_bits+0x420>
     e90:	b	100c <set_start_bits+0x420>
     e94:	b	f90 <set_start_bits+0x3a4>
     e98:	b	f90 <set_start_bits+0x3a4>
     e9c:	b	f90 <set_start_bits+0x3a4>
     ea0:	b	f90 <set_start_bits+0x3a4>
     ea4:	b	f90 <set_start_bits+0x3a4>
     ea8:	b	f90 <set_start_bits+0x3a4>
     eac:	b	f18 <set_start_bits+0x32c>
     eb0:	b	f90 <set_start_bits+0x3a4>
     eb4:	b	f90 <set_start_bits+0x3a4>
     eb8:	b	f90 <set_start_bits+0x3a4>
     ebc:	b	f90 <set_start_bits+0x3a4>
     ec0:	b	f18 <set_start_bits+0x32c>
     ec4:	b	f18 <set_start_bits+0x32c>
     ec8:	b	f18 <set_start_bits+0x32c>
     ecc:	b	f18 <set_start_bits+0x32c>
     ed0:	b	f18 <set_start_bits+0x32c>
     ed4:	b	f18 <set_start_bits+0x32c>
     ed8:	b	1030 <set_start_bits+0x444>
     edc:	b	1030 <set_start_bits+0x444>
     ee0:	b	1030 <set_start_bits+0x444>
     ee4:	b	f18 <set_start_bits+0x32c>
     ee8:	b	f18 <set_start_bits+0x32c>
     eec:	b	f18 <set_start_bits+0x32c>
     ef0:	b	f18 <set_start_bits+0x32c>
     ef4:	b	f18 <set_start_bits+0x32c>
     ef8:	b	f18 <set_start_bits+0x32c>
     efc:	b	f18 <set_start_bits+0x32c>
     f00:	b	f18 <set_start_bits+0x32c>
     f04:	b	f18 <set_start_bits+0x32c>
     f08:	b	f18 <set_start_bits+0x32c>
     f0c:	b	f18 <set_start_bits+0x32c>
     f10:	b	f18 <set_start_bits+0x32c>
     f14:	b	1090 <set_start_bits+0x4a4>
     f18:	mov	r0, #0
     f1c:	b	1488 <set_start_bits+0x89c>
     f20:	ldrb	ip, [fp, #1]
     f24:	cmp	ip, #9
     f28:	beq	f34 <set_start_bits+0x348>
     f2c:	mov	r0, #0
     f30:	b	1488 <set_start_bits+0x89c>
     f34:	ldr	r1, [pc, #1400]	; 14b4 <set_start_bits+0x8c8>
     f38:	ldrb	r0, [fp, #2]
     f3c:	add	r1, r1, r0, lsl #2
     f40:	mov	r2, r1
     f44:	add	r1, r2, #4
     f48:	ldr	r2, [r2]
     f4c:	cmn	r2, #1
     f50:	bcs	1460 <set_start_bits+0x874>
     f54:	cmp	r2, #255	; 0xff
     f58:	bhi	f78 <set_start_bits+0x38c>
     f5c:	ldrb	r8, [r5, r2, lsr #3]
     f60:	mov	ip, #1
     f64:	and	r3, r2, #7
     f68:	lsl	r0, ip, r3
     f6c:	orr	ip, r8, r0
     f70:	strb	ip, [r5, r2, lsr #3]
     f74:	b	f40 <set_start_bits+0x354>
     f78:	ldrb	r0, [r5, #31]
     f7c:	orr	r2, r0, #128	; 0x80
     f80:	strb	r2, [r5, #31]
     f84:	b	f40 <set_start_bits+0x354>
     f88:	add	fp, fp, #1
     f8c:	b	1458 <set_start_bits+0x86c>
     f90:	mov	r3, r4
     f94:	mov	r2, r9
     f98:	mov	r1, r5
     f9c:	mov	r0, fp
     fa0:	bl	bec <set_start_bits>
     fa4:	mov	r1, #1
     fa8:	cmp	r0, #3
     fac:	moveq	r2, #1
     fb0:	movne	r2, #0
     fb4:	cmp	r0, #0
     fb8:	moveq	r3, r1
     fbc:	movne	r3, r2
     fc0:	cmp	r3, #0
     fc4:	bne	1488 <set_start_bits+0x89c>
     fc8:	cmp	r0, #1
     fcc:	beq	1460 <set_start_bits+0x874>
     fd0:	ldrb	r2, [fp, #2]
     fd4:	ldrb	r3, [fp, #1]
     fd8:	orr	r2, r2, r3, lsl #8
     fdc:	add	fp, fp, r2
     fe0:	ldrb	r0, [fp]
     fe4:	cmp	r0, #119	; 0x77
     fe8:	beq	fd0 <set_start_bits+0x3e4>
     fec:	add	fp, fp, #3
     ff0:	b	1458 <set_start_bits+0x86c>
     ff4:	mov	r7, #2
     ff8:	b	1460 <set_start_bits+0x874>
     ffc:	mov	r0, #2
    1000:	b	1488 <set_start_bits+0x89c>
    1004:	add	fp, fp, #6
    1008:	b	1458 <set_start_bits+0x86c>
    100c:	ldrb	r2, [fp, #2]
    1010:	ldrb	r1, [fp, #1]
    1014:	orr	r1, r2, r1, lsl #8
    1018:	add	fp, fp, r1
    101c:	ldrb	r0, [fp]
    1020:	cmp	r0, #119	; 0x77
    1024:	beq	100c <set_start_bits+0x420>
    1028:	add	fp, fp, #3
    102c:	b	1458 <set_start_bits+0x86c>
    1030:	add	fp, fp, #1
    1034:	mov	r3, r4
    1038:	mov	r2, r9
    103c:	mov	r1, r5
    1040:	mov	r0, fp
    1044:	bl	bec <set_start_bits>
    1048:	mov	r2, #1
    104c:	cmp	r0, #3
    1050:	moveq	r1, #1
    1054:	movne	r1, #0
    1058:	cmp	r0, #0
    105c:	moveq	r2, r2
    1060:	movne	r2, r1
    1064:	cmp	r2, #0
    1068:	bne	1488 <set_start_bits+0x89c>
    106c:	ldrb	r0, [fp, #2]
    1070:	ldrb	ip, [fp, #1]
    1074:	orr	r2, r0, ip, lsl #8
    1078:	add	fp, fp, r2
    107c:	ldrb	ip, [fp]
    1080:	cmp	ip, #119	; 0x77
    1084:	beq	106c <set_start_bits+0x480>
    1088:	add	fp, fp, #3
    108c:	b	1458 <set_start_bits+0x86c>
    1090:	add	r1, fp, #1
    1094:	ldrb	r3, [r1, #2]
    1098:	ldrb	r2, [r1, #1]
    109c:	orr	r0, r3, r2, lsl #8
    10a0:	add	r1, r1, r0
    10a4:	ldrb	r3, [r1]
    10a8:	cmp	r3, #119	; 0x77
    10ac:	beq	1094 <set_start_bits+0x4a8>
    10b0:	add	fp, r1, #3
    10b4:	b	1458 <set_start_bits+0x86c>
    10b8:	add	r1, fp, #1
    10bc:	mov	r2, #0
    10c0:	str	r9, [sp]
    10c4:	mov	r3, r4
    10c8:	mov	r0, r5
    10cc:	bl	a8c <set_table_bit>
    10d0:	mov	fp, r0
    10d4:	b	1458 <set_start_bits+0x86c>
    10d8:	add	r1, fp, #1
    10dc:	mov	r2, #1
    10e0:	str	r9, [sp]
    10e4:	mov	r3, r4
    10e8:	mov	r0, r5
    10ec:	bl	a8c <set_table_bit>
    10f0:	mov	fp, r0
    10f4:	b	1458 <set_start_bits+0x86c>
    10f8:	add	r1, fp, #3
    10fc:	mov	r2, #0
    1100:	str	r9, [sp]
    1104:	mov	r3, r4
    1108:	mov	r0, r5
    110c:	bl	a8c <set_table_bit>
    1110:	mov	fp, r0
    1114:	b	1458 <set_start_bits+0x86c>
    1118:	add	r1, fp, #3
    111c:	mov	r2, #1
    1120:	str	r9, [sp]
    1124:	mov	r3, r4
    1128:	mov	r0, r5
    112c:	bl	a8c <set_table_bit>
    1130:	mov	fp, r0
    1134:	b	1458 <set_start_bits+0x86c>
    1138:	add	fp, fp, #2
    113c:	add	r1, fp, #1
    1140:	mov	r2, #0
    1144:	str	r9, [sp]
    1148:	mov	r3, r4
    114c:	mov	r0, r5
    1150:	bl	a8c <set_table_bit>
    1154:	b	1460 <set_start_bits+0x874>
    1158:	add	fp, fp, #2
    115c:	add	r1, fp, #1
    1160:	mov	r2, #1
    1164:	str	r9, [sp]
    1168:	mov	r3, r4
    116c:	mov	r0, r5
    1170:	bl	a8c <set_table_bit>
    1174:	b	1460 <set_start_bits+0x874>
    1178:	ldrb	ip, [r5, #1]
    117c:	orr	ip, ip, #2
    1180:	strb	ip, [r5, #1]
    1184:	ldrb	r0, [r5, #4]
    1188:	orr	r1, r0, #1
    118c:	strb	r1, [r5, #4]
    1190:	ldrb	r2, [r5, #20]
    1194:	orr	r2, r2, #1
    1198:	strb	r2, [r5, #20]
    119c:	b	1460 <set_start_bits+0x874>
    11a0:	ldrb	ip, [r5, #1]
    11a4:	orr	r1, ip, #4
    11a8:	strb	r1, [r5, #1]
    11ac:	orr	r1, r1, #8
    11b0:	strb	r1, [r5, #1]
    11b4:	orr	r3, r1, #16
    11b8:	strb	r3, [r5, #1]
    11bc:	orr	r1, r3, #32
    11c0:	strb	r1, [r5, #1]
    11c4:	ldrb	r0, [r5, #16]
    11c8:	orr	ip, r0, #32
    11cc:	strb	ip, [r5, #16]
    11d0:	b	1460 <set_start_bits+0x874>
    11d4:	mov	r1, #64	; 0x40
    11d8:	mov	r3, r4
    11dc:	mov	r2, sl
    11e0:	mov	r0, r5
    11e4:	bl	b88 <set_nottype_bits>
    11e8:	b	1460 <set_start_bits+0x874>
    11ec:	mov	r1, #64	; 0x40
    11f0:	mov	r3, r4
    11f4:	mov	r2, sl
    11f8:	mov	r0, r5
    11fc:	bl	b28 <set_type_bits>
    1200:	b	1460 <set_start_bits+0x874>
    1204:	mov	r1, #0
    1208:	mov	r3, r4
    120c:	mov	r2, sl
    1210:	mov	r0, r5
    1214:	bl	b88 <set_nottype_bits>
    1218:	b	1460 <set_start_bits+0x874>
    121c:	mov	r1, #0
    1220:	mov	r3, r4
    1224:	mov	r2, sl
    1228:	mov	r0, r5
    122c:	bl	b28 <set_type_bits>
    1230:	b	1460 <set_start_bits+0x874>
    1234:	mov	r1, #160	; 0xa0
    1238:	mov	r3, r4
    123c:	mov	r2, sl
    1240:	mov	r0, r5
    1244:	bl	b88 <set_nottype_bits>
    1248:	b	1460 <set_start_bits+0x874>
    124c:	mov	r1, #160	; 0xa0
    1250:	mov	r3, r4
    1254:	mov	r2, sl
    1258:	mov	r0, r5
    125c:	bl	b28 <set_type_bits>
    1260:	b	1460 <set_start_bits+0x874>
    1264:	add	fp, fp, #1
    1268:	b	1458 <set_start_bits+0x86c>
    126c:	add	fp, fp, #3
    1270:	b	1458 <set_start_bits+0x86c>
    1274:	add	fp, fp, #2
    1278:	ldrb	r2, [fp, #1]
    127c:	sub	r1, r2, #6
    1280:	cmp	r1, #16
    1284:	bcs	13c0 <set_start_bits+0x7d4>
    1288:	add	pc, pc, r1, lsl #2
    128c:	nop	{0}
    1290:	b	132c <set_start_bits+0x740>
    1294:	b	1344 <set_start_bits+0x758>
    1298:	b	135c <set_start_bits+0x770>
    129c:	b	1374 <set_start_bits+0x788>
    12a0:	b	138c <set_start_bits+0x7a0>
    12a4:	b	13a4 <set_start_bits+0x7b8>
    12a8:	b	13c0 <set_start_bits+0x7d4>
    12ac:	b	13c0 <set_start_bits+0x7d4>
    12b0:	b	13c0 <set_start_bits+0x7d4>
    12b4:	b	13c0 <set_start_bits+0x7d4>
    12b8:	b	13c0 <set_start_bits+0x7d4>
    12bc:	b	12f8 <set_start_bits+0x70c>
    12c0:	b	13c0 <set_start_bits+0x7d4>
    12c4:	b	12d0 <set_start_bits+0x6e4>
    12c8:	b	13c0 <set_start_bits+0x7d4>
    12cc:	b	12f8 <set_start_bits+0x70c>
    12d0:	ldrb	r1, [r5, #1]
    12d4:	orr	r1, r1, #2
    12d8:	strb	r1, [r5, #1]
    12dc:	ldrb	r3, [r5, #4]
    12e0:	orr	r3, r3, #1
    12e4:	strb	r3, [r5, #4]
    12e8:	ldrb	r3, [r5, #20]
    12ec:	orr	ip, r3, #1
    12f0:	strb	ip, [r5, #20]
    12f4:	b	13b8 <set_start_bits+0x7cc>
    12f8:	ldrb	r3, [r5, #1]
    12fc:	orr	r0, r3, #4
    1300:	strb	r0, [r5, #1]
    1304:	orr	r0, r0, #8
    1308:	strb	r0, [r5, #1]
    130c:	orr	r0, r0, #16
    1310:	strb	r0, [r5, #1]
    1314:	orr	r0, r0, #32
    1318:	strb	r0, [r5, #1]
    131c:	ldrb	r3, [r5, #16]
    1320:	orr	r2, r3, #32
    1324:	strb	r2, [r5, #16]
    1328:	b	13b8 <set_start_bits+0x7cc>
    132c:	mov	r1, #64	; 0x40
    1330:	mov	r3, r4
    1334:	mov	r2, sl
    1338:	mov	r0, r5
    133c:	bl	b88 <set_nottype_bits>
    1340:	b	13b8 <set_start_bits+0x7cc>
    1344:	mov	r1, #64	; 0x40
    1348:	mov	r3, r4
    134c:	mov	r2, sl
    1350:	mov	r0, r5
    1354:	bl	b28 <set_type_bits>
    1358:	b	13b8 <set_start_bits+0x7cc>
    135c:	mov	r1, #0
    1360:	mov	r3, r4
    1364:	mov	r2, sl
    1368:	mov	r0, r5
    136c:	bl	b88 <set_nottype_bits>
    1370:	b	13b8 <set_start_bits+0x7cc>
    1374:	mov	r1, #0
    1378:	mov	r3, r4
    137c:	mov	r2, sl
    1380:	mov	r0, r5
    1384:	bl	b28 <set_type_bits>
    1388:	b	13b8 <set_start_bits+0x7cc>
    138c:	mov	r1, #160	; 0xa0
    1390:	mov	r3, r4
    1394:	mov	r2, sl
    1398:	mov	r0, r5
    139c:	bl	b88 <set_nottype_bits>
    13a0:	b	13b8 <set_start_bits+0x7cc>
    13a4:	mov	r1, #160	; 0xa0
    13a8:	mov	r3, r4
    13ac:	mov	r2, sl
    13b0:	mov	r0, r5
    13b4:	bl	b28 <set_type_bits>
    13b8:	add	fp, fp, #2
    13bc:	b	1458 <set_start_bits+0x86c>
    13c0:	mov	r0, #0
    13c4:	b	1488 <set_start_bits+0x89c>
    13c8:	add	r3, fp, #1
    13cc:	add	r0, r3, #32
    13d0:	mov	r1, #0
    13d4:	ldrb	ip, [r5, r1]
    13d8:	ldrb	r2, [r3, r1]
    13dc:	orr	ip, ip, r2
    13e0:	strb	ip, [r5, r1]
    13e4:	add	r1, r1, #1
    13e8:	cmp	r1, #32
    13ec:	bcc	13d4 <set_start_bits+0x7e8>
    13f0:	ldrb	r2, [r0]
    13f4:	sub	r1, r2, #98	; 0x62
    13f8:	cmp	r1, #12
    13fc:	bcs	1460 <set_start_bits+0x874>
    1400:	add	pc, pc, r1, lsl #2
    1404:	nop	{0}
    1408:	b	1438 <set_start_bits+0x84c>
    140c:	b	1438 <set_start_bits+0x84c>
    1410:	b	1460 <set_start_bits+0x874>
    1414:	b	1460 <set_start_bits+0x874>
    1418:	b	1438 <set_start_bits+0x84c>
    141c:	b	1438 <set_start_bits+0x84c>
    1420:	b	1440 <set_start_bits+0x854>
    1424:	b	1440 <set_start_bits+0x854>
    1428:	b	1438 <set_start_bits+0x84c>
    142c:	b	1460 <set_start_bits+0x874>
    1430:	b	1438 <set_start_bits+0x84c>
    1434:	b	1440 <set_start_bits+0x854>
    1438:	add	fp, r0, #1
    143c:	b	1458 <set_start_bits+0x86c>
    1440:	ldrb	r1, [r0, #2]
    1444:	ldrb	r2, [r0, #1]
    1448:	orr	r3, r1, r2, lsl #8
    144c:	cmp	r3, #0
    1450:	bne	1460 <set_start_bits+0x874>
    1454:	add	fp, r0, #5
    1458:	cmp	r8, #0
    145c:	bne	c7c <set_start_bits+0x90>
    1460:	ldrb	ip, [r6, #2]
    1464:	ldrb	r2, [r6, #1]
    1468:	orr	r3, ip, r2, lsl #8
    146c:	add	r6, r6, r3
    1470:	ldrb	ip, [r6]
    1474:	cmp	ip, #119	; 0x77
    1478:	beq	c34 <set_start_bits+0x48>
    147c:	mov	r0, r7
    1480:	b	1488 <set_start_bits+0x89c>
    1484:	mov	r0, #3
    1488:	ldr	r4, [sp, #16]
    148c:	ldr	r5, [sp, #20]
    1490:	ldr	r6, [sp, #24]
    1494:	ldr	r7, [sp, #28]
    1498:	ldr	r8, [sp, #32]
    149c:	ldr	r9, [sp, #36]	; 0x24
    14a0:	ldr	sl, [sp, #40]	; 0x28
    14a4:	ldr	fp, [sp, #44]	; 0x2c
    14a8:	ldr	lr, [sp, #8]
    14ac:	add	sp, sp, #48	; 0x30
    14b0:	bx	lr
    14b4:	.word	0x00000000

000014b8 <coda_pcre_study>:
    14b8:	mov	ip, sp
    14bc:	sub	sp, sp, #224	; 0xe0
    14c0:	str	ip, [sp, #8]
    14c4:	str	lr, [sp, #12]
    14c8:	str	r4, [sp, #16]
    14cc:	str	r5, [sp, #20]
    14d0:	str	r6, [sp, #24]
    14d4:	str	r7, [sp, #28]
    14d8:	str	r8, [sp, #32]
    14dc:	str	r9, [sp, #36]	; 0x24
    14e0:	mov	r4, r2
    14e4:	mov	r5, r1
    14e8:	mov	r6, r0
    14ec:	mov	r1, #0
    14f0:	str	r1, [sp, #40]	; 0x28
    14f4:	mov	r9, #0
    14f8:	mov	r7, #0
    14fc:	mov	ip, #0
    1500:	str	ip, [r4]
    1504:	cmp	r6, #0
    1508:	beq	176c <coda_pcre_study+0x2b4>
    150c:	ldr	r1, [r6]
    1510:	movw	lr, #21061	; 0x5245
    1514:	movt	lr, #20547	; 0x5043
    1518:	cmp	r1, lr
    151c:	bne	176c <coda_pcre_study+0x2b4>
    1520:	ldr	r1, [r6, #12]
    1524:	and	r0, r1, #1
    1528:	cmp	r0, #0
    152c:	bne	1540 <coda_pcre_study+0x88>
    1530:	ldr	ip, [pc, #628]	; 17ac <coda_pcre_study+0x2f4>
    1534:	str	ip, [r4]
    1538:	mov	r7, #0
    153c:	b	1778 <coda_pcre_study+0x2c0>
    1540:	bic	r2, r5, #15
    1544:	cmp	r2, #0
    1548:	beq	155c <coda_pcre_study+0xa4>
    154c:	ldr	r2, [pc, #588]	; 17a0 <coda_pcre_study+0x2e8>
    1550:	str	r2, [r4]
    1554:	mov	r7, #0
    1558:	b	1778 <coda_pcre_study+0x2c0>
    155c:	ldrh	ip, [r6, #38]	; 0x26
    1560:	ldrh	r2, [r6, #36]	; 0x24
    1564:	ldrh	r0, [r6, #34]	; 0x22
    1568:	add	r3, r6, r0
    156c:	mla	r8, ip, r2, r3
    1570:	ldr	r0, [r6, #8]
    1574:	and	r3, r0, #16
    1578:	cmp	r3, #0
    157c:	bne	1628 <coda_pcre_study+0x170>
    1580:	and	r1, r1, #272	; 0x110
    1584:	cmp	r1, #0
    1588:	bne	1628 <coda_pcre_study+0x170>
    158c:	ldr	r3, [r6, #48]	; 0x30
    1590:	str	r3, [sp, #44]	; 0x2c
    1594:	cmp	r3, #0
    1598:	bne	15b0 <coda_pcre_study+0xf8>
    159c:	mov	r1, #0
    15a0:	mov	r2, #11
    15a4:	add	r3, sp, #44	; 0x2c
    15a8:	mov	r0, r6
    15ac:	bl	0 <coda_pcre_fullinfo>
    15b0:	ldr	r0, [sp, #44]	; 0x2c
    15b4:	str	r0, [sp, #80]	; 0x50
    15b8:	add	r2, r0, #256	; 0x100
    15bc:	str	r2, [sp, #84]	; 0x54
    15c0:	add	r1, r0, #512	; 0x200
    15c4:	str	r1, [sp, #88]	; 0x58
    15c8:	add	r3, r0, #832	; 0x340
    15cc:	str	r3, [sp, #92]	; 0x5c
    15d0:	add	r0, sp, #48	; 0x30
    15d4:	mov	r1, #0
    15d8:	mov	r2, #32
    15dc:	bl	0 <memset>
    15e0:	add	r1, sp, #48	; 0x30
    15e4:	ldr	r2, [r6, #8]
    15e8:	and	ip, r2, #2048	; 0x800
    15ec:	cmp	ip, #0
    15f0:	movne	r2, #1
    15f4:	moveq	r2, #0
    15f8:	add	r3, sp, #80	; 0x50
    15fc:	mov	r0, r8
    1600:	bl	bec <set_start_bits>
    1604:	cmp	r0, #1
    1608:	moveq	r9, #1
    160c:	movne	r9, #0
    1610:	cmp	r0, #3
    1614:	bne	1628 <coda_pcre_study+0x170>
    1618:	ldr	r0, [pc, #404]	; 17b4 <coda_pcre_study+0x2fc>
    161c:	str	r0, [r4]
    1620:	mov	r7, #0
    1624:	b	1778 <coda_pcre_study+0x2c0>
    1628:	ldr	r3, [r6, #8]
    162c:	mov	r2, #0
    1630:	add	r0, sp, #40	; 0x28
    1634:	str	r0, [sp, #4]
    1638:	str	r2, [sp]
    163c:	mov	r2, r8
    1640:	mov	r1, r8
    1644:	mov	r0, r6
    1648:	bl	0 <find_minlength>
    164c:	mov	r6, r0
    1650:	cmn	r0, #3
    1654:	beq	175c <coda_pcre_study+0x2a4>
    1658:	cmn	r0, #2
    165c:	bne	1670 <coda_pcre_study+0x1b8>
    1660:	ldr	r3, [pc, #328]	; 17b0 <coda_pcre_study+0x2f8>
    1664:	str	r3, [r4]
    1668:	mov	r7, #0
    166c:	b	1778 <coda_pcre_study+0x2c0>
    1670:	mov	ip, #1
    1674:	cmp	r6, #0
    1678:	movgt	r2, #1
    167c:	movle	r2, #0
    1680:	cmp	r9, #0
    1684:	movne	r3, ip
    1688:	moveq	r3, r2
    168c:	mov	r1, #1
    1690:	and	r0, r5, #8
    1694:	cmp	r0, #0
    1698:	movne	r2, #1
    169c:	moveq	r2, #0
    16a0:	cmp	r3, #0
    16a4:	movne	r2, r1
    16a8:	moveq	r2, r2
    16ac:	cmp	r2, #0
    16b0:	beq	1778 <coda_pcre_study+0x2c0>
    16b4:	ldr	r3, [pc, #232]	; 17a4 <coda_pcre_study+0x2ec>
    16b8:	ldr	ip, [r3]
    16bc:	mov	r0, #76	; 0x4c
    16c0:	blx	ip
    16c4:	mov	r7, r0
    16c8:	cmp	r7, #0
    16cc:	bne	16e0 <coda_pcre_study+0x228>
    16d0:	ldr	r1, [pc, #224]	; 17b8 <coda_pcre_study+0x300>
    16d4:	str	r1, [r4]
    16d8:	mov	r7, #0
    16dc:	b	1778 <coda_pcre_study+0x2c0>
    16e0:	add	r4, r7, #32
    16e4:	mov	r1, #1
    16e8:	str	r1, [r7]
    16ec:	str	r4, [r7, #4]
    16f0:	mov	r1, #44	; 0x2c
    16f4:	str	r1, [r7, #32]
    16f8:	mov	ip, #0
    16fc:	str	ip, [r7, #36]	; 0x24
    1700:	cmp	r9, #0
    1704:	beq	1724 <coda_pcre_study+0x26c>
    1708:	orr	r0, ip, #1
    170c:	str	r0, [r7, #36]	; 0x24
    1710:	add	r0, r7, #40	; 0x28
    1714:	add	r1, sp, #48	; 0x30
    1718:	mov	r2, #32
    171c:	bl	0 <memcpy>
    1720:	b	1734 <coda_pcre_study+0x27c>
    1724:	add	r0, r7, #40	; 0x28
    1728:	mov	r1, #0
    172c:	mov	r2, #32
    1730:	bl	0 <memset>
    1734:	cmp	r6, #0
    1738:	ble	1750 <coda_pcre_study+0x298>
    173c:	ldr	r3, [r4, #4]
    1740:	orr	r0, r3, #2
    1744:	str	r0, [r4, #4]
    1748:	str	r6, [r4, #40]	; 0x28
    174c:	b	1778 <coda_pcre_study+0x2c0>
    1750:	mov	r3, #0
    1754:	str	r3, [r4, #40]	; 0x28
    1758:	b	1778 <coda_pcre_study+0x2c0>
    175c:	ldr	r2, [pc, #80]	; 17b4 <coda_pcre_study+0x2fc>
    1760:	str	r2, [r4]
    1764:	mov	r7, #0
    1768:	b	1778 <coda_pcre_study+0x2c0>
    176c:	ldr	r0, [pc, #52]	; 17a8 <coda_pcre_study+0x2f0>
    1770:	str	r0, [r4]
    1774:	mov	r7, #0
    1778:	mov	r0, r7
    177c:	ldr	r4, [sp, #16]
    1780:	ldr	r5, [sp, #20]
    1784:	ldr	r6, [sp, #24]
    1788:	ldr	r7, [sp, #28]
    178c:	ldr	r8, [sp, #32]
    1790:	ldr	r9, [sp, #36]	; 0x24
    1794:	ldr	lr, [sp, #12]
    1798:	add	sp, sp, #224	; 0xe0
    179c:	bx	lr
    17a0:	.word	0x00000093
    17a4:	.word	0x00000000
    17a8:	.word	0x00000065
    17ac:	.word	0x000000ba
    17b0:	.word	0x00000000
    17b4:	.word	0x0000002a
    17b8:	.word	0x00000050

000017bc <coda_pcre_free_study>:
    17bc:	mov	ip, sp
    17c0:	sub	sp, sp, #8
    17c4:	str	ip, [sp]
    17c8:	str	lr, [sp, #4]
    17cc:	cmp	r0, #0
    17d0:	beq	17e8 <coda_pcre_free_study+0x2c>
    17d4:	ldr	r1, [pc, #24]	; 17f4 <coda_pcre_free_study+0x38>
    17d8:	ldr	ip, [r1]
    17dc:	ldr	lr, [sp, #4]
    17e0:	add	sp, sp, #8
    17e4:	bx	ip
    17e8:	ldr	lr, [sp, #4]
    17ec:	add	sp, sp, #8
    17f0:	bx	lr
    17f4:	.word	0x00000000
