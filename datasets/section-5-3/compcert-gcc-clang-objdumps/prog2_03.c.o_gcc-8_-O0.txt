
../compcert-repos/prog2/CMakeFiles/0.3.dir/Aula00_Conceitos_base/03.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <avg>:
   0:	push	{fp}		; (str fp, [sp, #-4]!)
   4:	add	fp, sp, #0
   8:	sub	sp, sp, #20
   c:	str	r0, [fp, #-16]
  10:	mov	r3, #0
  14:	str	r3, [fp, #-12]
  18:	mov	r3, #0
  1c:	str	r3, [fp, #-8]
  20:	b	50 <avg+0x50>
  24:	ldr	r3, [fp, #-8]
  28:	lsl	r3, r3, #2
  2c:	ldr	r2, [fp, #-16]
  30:	add	r3, r2, r3
  34:	vldr	s15, [r3]
  38:	vldr	s14, [fp, #-12]
  3c:	vadd.f32	s15, s14, s15
  40:	vstr	s15, [fp, #-12]
  44:	ldr	r3, [fp, #-8]
  48:	add	r3, r3, #1
  4c:	str	r3, [fp, #-8]
  50:	ldr	r3, [fp, #-8]
  54:	cmp	r3, #9
  58:	ble	24 <avg+0x24>
  5c:	vldr	s15, [fp, #-12]
  60:	vldr	s14, [pc, #20]	; 7c <avg+0x7c>
  64:	vdiv.f32	s13, s15, s14
  68:	vmov.f32	s15, s13
  6c:	vmov.f32	s0, s15
  70:	add	sp, fp, #0
  74:	pop	{fp}		; (ldr fp, [sp], #4)
  78:	bx	lr
  7c:	.word	0x41200000

00000080 <max>:
  80:	push	{fp}		; (str fp, [sp, #-4]!)
  84:	add	fp, sp, #0
  88:	sub	sp, sp, #20
  8c:	str	r0, [fp, #-16]
  90:	ldr	r3, [fp, #-16]
  94:	ldr	r3, [r3]
  98:	str	r3, [fp, #-12]
  9c:	mov	r3, #1
  a0:	str	r3, [fp, #-8]
  a4:	b	f0 <max+0x70>
  a8:	ldr	r3, [fp, #-8]
  ac:	lsl	r3, r3, #2
  b0:	ldr	r2, [fp, #-16]
  b4:	add	r3, r2, r3
  b8:	vldr	s15, [r3]
  bc:	vldr	s14, [fp, #-12]
  c0:	vcmpe.f32	s14, s15
  c4:	vmrs	APSR_nzcv, fpscr
  c8:	bpl	e4 <max+0x64>
  cc:	ldr	r3, [fp, #-8]
  d0:	lsl	r3, r3, #2
  d4:	ldr	r2, [fp, #-16]
  d8:	add	r3, r2, r3
  dc:	ldr	r3, [r3]
  e0:	str	r3, [fp, #-12]
  e4:	ldr	r3, [fp, #-8]
  e8:	add	r3, r3, #1
  ec:	str	r3, [fp, #-8]
  f0:	ldr	r3, [fp, #-8]
  f4:	cmp	r3, #9
  f8:	ble	a8 <max+0x28>
  fc:	ldr	r3, [fp, #-12]
 100:	vmov	s15, r3
 104:	vmov.f32	s0, s15
 108:	add	sp, fp, #0
 10c:	pop	{fp}		; (ldr fp, [sp], #4)
 110:	bx	lr

00000114 <min>:
 114:	push	{fp}		; (str fp, [sp, #-4]!)
 118:	add	fp, sp, #0
 11c:	sub	sp, sp, #20
 120:	str	r0, [fp, #-16]
 124:	ldr	r3, [fp, #-16]
 128:	ldr	r3, [r3]
 12c:	str	r3, [fp, #-12]
 130:	mov	r3, #1
 134:	str	r3, [fp, #-8]
 138:	b	184 <min+0x70>
 13c:	ldr	r3, [fp, #-8]
 140:	lsl	r3, r3, #2
 144:	ldr	r2, [fp, #-16]
 148:	add	r3, r2, r3
 14c:	vldr	s15, [r3]
 150:	vldr	s14, [fp, #-12]
 154:	vcmpe.f32	s14, s15
 158:	vmrs	APSR_nzcv, fpscr
 15c:	ble	178 <min+0x64>
 160:	ldr	r3, [fp, #-8]
 164:	lsl	r3, r3, #2
 168:	ldr	r2, [fp, #-16]
 16c:	add	r3, r2, r3
 170:	ldr	r3, [r3]
 174:	str	r3, [fp, #-12]
 178:	ldr	r3, [fp, #-8]
 17c:	add	r3, r3, #1
 180:	str	r3, [fp, #-8]
 184:	ldr	r3, [fp, #-8]
 188:	cmp	r3, #9
 18c:	ble	13c <min+0x28>
 190:	ldr	r3, [fp, #-12]
 194:	vmov	s15, r3
 198:	vmov.f32	s0, s15
 19c:	add	sp, fp, #0
 1a0:	pop	{fp}		; (ldr fp, [sp], #4)
 1a4:	bx	lr

000001a8 <main>:
 1a8:	str	fp, [sp, #-8]!
 1ac:	str	lr, [sp, #4]
 1b0:	add	fp, sp, #4
 1b4:	sub	sp, sp, #48	; 0x30
 1b8:	mov	r3, #0
 1bc:	str	r3, [fp, #-8]
 1c0:	b	208 <main+0x60>
 1c4:	ldr	r3, [fp, #-8]
 1c8:	add	r3, r3, #1
 1cc:	mov	r1, r3
 1d0:	movw	r0, #0
 1d4:	movt	r0, #0
 1d8:	bl	0 <printf>
 1dc:	sub	r2, fp, #48	; 0x30
 1e0:	ldr	r3, [fp, #-8]
 1e4:	lsl	r3, r3, #2
 1e8:	add	r3, r2, r3
 1ec:	mov	r1, r3
 1f0:	movw	r0, #0
 1f4:	movt	r0, #0
 1f8:	bl	0 <__isoc99_scanf>
 1fc:	ldr	r3, [fp, #-8]
 200:	add	r3, r3, #1
 204:	str	r3, [fp, #-8]
 208:	ldr	r3, [fp, #-8]
 20c:	cmp	r3, #9
 210:	ble	1c4 <main+0x1c>
 214:	sub	r3, fp, #48	; 0x30
 218:	mov	r0, r3
 21c:	bl	0 <avg>
 220:	vmov.f32	s15, s0
 224:	vcvt.f64.f32	d7, s15
 228:	vmov	r2, r3, d7
 22c:	movw	r0, #0
 230:	movt	r0, #0
 234:	bl	0 <printf>
 238:	sub	r3, fp, #48	; 0x30
 23c:	mov	r0, r3
 240:	bl	80 <max>
 244:	vmov.f32	s15, s0
 248:	vcvt.f64.f32	d7, s15
 24c:	vmov	r2, r3, d7
 250:	movw	r0, #0
 254:	movt	r0, #0
 258:	bl	0 <printf>
 25c:	sub	r3, fp, #48	; 0x30
 260:	mov	r0, r3
 264:	bl	114 <min>
 268:	vmov.f32	s15, s0
 26c:	vcvt.f64.f32	d7, s15
 270:	vmov	r2, r3, d7
 274:	movw	r0, #0
 278:	movt	r0, #0
 27c:	bl	0 <printf>
 280:	movw	r0, #0
 284:	movt	r0, #0
 288:	bl	0 <printf>
 28c:	mov	r3, #0
 290:	str	r3, [fp, #-8]
 294:	b	2d0 <main+0x128>
 298:	ldr	r3, [fp, #-8]
 29c:	lsl	r3, r3, #2
 2a0:	sub	r2, fp, #4
 2a4:	add	r3, r2, r3
 2a8:	sub	r3, r3, #44	; 0x2c
 2ac:	vldr	s15, [r3]
 2b0:	vcvt.f64.f32	d7, s15
 2b4:	vmov	r2, r3, d7
 2b8:	movw	r0, #0
 2bc:	movt	r0, #0
 2c0:	bl	0 <printf>
 2c4:	ldr	r3, [fp, #-8]
 2c8:	add	r3, r3, #1
 2cc:	str	r3, [fp, #-8]
 2d0:	ldr	r3, [fp, #-8]
 2d4:	cmp	r3, #9
 2d8:	ble	298 <main+0xf0>
 2dc:	mov	r0, #10
 2e0:	bl	0 <putchar>
 2e4:	mov	r3, #0
 2e8:	mov	r0, r3
 2ec:	sub	sp, fp, #4
 2f0:	ldr	fp, [sp]
 2f4:	add	sp, sp, #4
 2f8:	pop	{pc}		; (ldr pc, [sp], #4)
