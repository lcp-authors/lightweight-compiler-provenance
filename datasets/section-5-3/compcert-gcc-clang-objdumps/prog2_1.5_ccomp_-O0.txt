
../repos/prog2/1.5:     file format elf32-littlearm


Disassembly of section .init:

000103c4 <.init>:
   103c4:	push	{r3, lr}
   103c8:	bl	1048c <abort@plt+0x3c>
   103cc:	pop	{r3, pc}

Disassembly of section .plt:

000103d0 <strcmp@plt-0x14>:
   103d0:	push	{lr}		; (str lr, [sp, #-4]!)
   103d4:	ldr	lr, [pc, #4]	; 103e0 <strcmp@plt-0x4>
   103d8:	add	lr, pc, lr
   103dc:	ldr	pc, [lr, #8]!
   103e0:	andeq	r0, r1, r0, lsr #24

000103e4 <strcmp@plt>:
   103e4:	add	ip, pc, #0, 12
   103e8:	add	ip, ip, #16, 20	; 0x10000
   103ec:	ldr	pc, [ip, #3104]!	; 0xc20

000103f0 <printf@plt>:
   103f0:	add	ip, pc, #0, 12
   103f4:	add	ip, ip, #16, 20	; 0x10000
   103f8:	ldr	pc, [ip, #3096]!	; 0xc18

000103fc <fopen@plt>:
   103fc:	add	ip, pc, #0, 12
   10400:	add	ip, ip, #16, 20	; 0x10000
   10404:	ldr	pc, [ip, #3088]!	; 0xc10

00010408 <__libc_start_main@plt>:
   10408:	add	ip, pc, #0, 12
   1040c:	add	ip, ip, #16, 20	; 0x10000
   10410:	ldr	pc, [ip, #3080]!	; 0xc08

00010414 <__gmon_start__@plt>:
   10414:	add	ip, pc, #0, 12
   10418:	add	ip, ip, #16, 20	; 0x10000
   1041c:	ldr	pc, [ip, #3072]!	; 0xc00

00010420 <strlen@plt>:
   10420:	add	ip, pc, #0, 12
   10424:	add	ip, ip, #16, 20	; 0x10000
   10428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001042c <fgetc@plt>:
   1042c:	add	ip, pc, #0, 12
   10430:	add	ip, ip, #16, 20	; 0x10000
   10434:	ldr	pc, [ip, #3056]!	; 0xbf0

00010438 <fclose@plt>:
   10438:	add	ip, pc, #0, 12
   1043c:	add	ip, ip, #16, 20	; 0x10000
   10440:	ldr	pc, [ip, #3048]!	; 0xbe8

00010444 <fseek@plt>:
   10444:	add	ip, pc, #0, 12
   10448:	add	ip, ip, #16, 20	; 0x10000
   1044c:	ldr	pc, [ip, #3040]!	; 0xbe0

00010450 <abort@plt>:
   10450:	add	ip, pc, #0, 12
   10454:	add	ip, ip, #16, 20	; 0x10000
   10458:	ldr	pc, [ip, #3032]!	; 0xbd8

Disassembly of section .text:

0001045c <.text>:
   1045c:	bleq	4c5a0 <abort@plt+0x3c150>
   10460:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10464:	strbtmi	fp, [sl], -r2, lsl #24
   10468:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   1046c:			; <UNDEFINED> instruction: 0xc010f8df
   10470:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10474:	blmi	122488 <abort@plt+0x112038>
   10478:	svc	0x00c6f7ff
   1047c:	svc	0x00e8f7ff
   10480:	andeq	r0, r1, r1, ror r8
   10484:	andeq	r0, r1, ip, lsl r5
   10488:	andeq	r0, r1, r1, lsr r8
   1048c:	ldr	r3, [pc, #20]	; 104a8 <abort@plt+0x58>
   10490:	ldr	r2, [pc, #20]	; 104ac <abort@plt+0x5c>
   10494:	add	r3, pc, r3
   10498:	ldr	r2, [r3, r2]
   1049c:	cmp	r2, #0
   104a0:	bxeq	lr
   104a4:	b	10414 <__gmon_start__@plt>
   104a8:	andeq	r0, r1, r4, ror #22
   104ac:	andeq	r0, r0, r4, lsr r0
   104b0:	subeq	pc, r0, r1, asr #4
   104b4:	andeq	pc, r2, r0, asr #5
   104b8:	movteq	pc, #577	; 0x241	; <UNPREDICTABLE>
   104bc:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   104c0:	andle	r4, r5, r3, lsl #5
   104c4:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   104c8:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   104cc:	ldrmi	fp, [r8, -r3, lsl #2]
   104d0:	svclt	0x00004770
   104d4:	subeq	pc, r0, r1, asr #4
   104d8:	andeq	pc, r2, r0, asr #5
   104dc:	cmpeq	r0, r1, asr #4	; <UNPREDICTABLE>
   104e0:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   104e4:	svceq	0x00d91a0b
   104e8:			; <UNDEFINED> instruction: 0x01a3eb01
   104ec:	andle	r1, r5, r9, asr #32
   104f0:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   104f4:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   104f8:	ldrmi	fp, [r8, -r3, lsl #2]
   104fc:	svclt	0x00004770
   10500:	vqrshl.s8	d27, d0, d1
   10504:	vmls.i<illegal width 8>	d16, d0, d0[0]
   10508:	stmdavc	r3!, {r1, sl}
   1050c:			; <UNDEFINED> instruction: 0xf7ffb91b
   10510:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   10514:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   10518:	svclt	0x0000e7dc
   1051c:	mov	ip, sp
   10520:	sub	sp, sp, #32
   10524:	str	ip, [sp]
   10528:	str	lr, [sp, #4]
   1052c:	str	r4, [sp, #8]
   10530:	str	r5, [sp, #12]
   10534:	str	r6, [sp, #16]
   10538:	str	r7, [sp, #20]
   1053c:	str	r8, [sp, #24]
   10540:	str	r9, [sp, #28]
   10544:	mov	r7, #0
   10548:	mov	r4, #1
   1054c:	mov	r6, #0
   10550:	mov	r8, #0
   10554:	mov	r9, #0
   10558:	ldr	r0, [pc, #448]	; 10720 <abort@plt+0x2d0>
   1055c:	ldr	r1, [pc, #436]	; 10718 <abort@plt+0x2c8>
   10560:	bl	103fc <fopen@plt>
   10564:	mov	r5, r0
   10568:	mov	r0, r5
   1056c:	bl	1042c <fgetc@plt>
   10570:	and	r0, r0, #255	; 0xff
   10574:	and	r3, r0, #255	; 0xff
   10578:	cmn	r0, #1
   1057c:	beq	10688 <abort@plt+0x238>
   10580:	add	r6, r6, #1
   10584:	cmp	r3, #10
   10588:	beq	10680 <abort@plt+0x230>
   1058c:	cmp	r3, #115	; 0x73
   10590:	beq	10664 <abort@plt+0x214>
   10594:	cmp	r3, #112	; 0x70
   10598:	beq	10648 <abort@plt+0x1f8>
   1059c:	cmp	r3, #47	; 0x2f
   105a0:	beq	105fc <abort@plt+0x1ac>
   105a4:	cmp	r3, #42	; 0x2a
   105a8:	bne	10568 <abort@plt+0x118>
   105ac:	mov	r0, r5
   105b0:	bl	1042c <fgetc@plt>
   105b4:	cmp	r0, #47	; 0x2f
   105b8:	beq	105c4 <abort@plt+0x174>
   105bc:	mov	r2, #0
   105c0:	b	105d0 <abort@plt+0x180>
   105c4:	cmp	r9, #0
   105c8:	movne	r2, #1
   105cc:	moveq	r2, #0
   105d0:	cmp	r2, #0
   105d4:	bne	105ec <abort@plt+0x19c>
   105d8:	mvn	r1, #0
   105dc:	mov	r2, #1
   105e0:	mov	r0, r5
   105e4:	bl	10444 <fseek@plt>
   105e8:	b	10568 <abort@plt+0x118>
   105ec:	add	r6, r6, #1
   105f0:	add	r7, r7, #1
   105f4:	mov	r9, #0
   105f8:	b	10568 <abort@plt+0x118>
   105fc:	mov	r0, r5
   10600:	bl	1042c <fgetc@plt>
   10604:	cmp	r0, #42	; 0x2a
   10608:	beq	10614 <abort@plt+0x1c4>
   1060c:	mov	r0, #0
   10610:	b	10620 <abort@plt+0x1d0>
   10614:	cmp	r9, #0
   10618:	moveq	r0, #1
   1061c:	movne	r0, #0
   10620:	cmp	r0, #0
   10624:	bne	1063c <abort@plt+0x1ec>
   10628:	mvn	r1, #0
   1062c:	mov	r2, #1
   10630:	mov	r0, r5
   10634:	bl	10444 <fseek@plt>
   10638:	b	10568 <abort@plt+0x118>
   1063c:	mov	r9, #1
   10640:	add	r6, r6, #1
   10644:	b	10568 <abort@plt+0x118>
   10648:	ldr	r0, [pc, #188]	; 1070c <abort@plt+0x2bc>
   1064c:	mov	r1, r5
   10650:	bl	10730 <abort@plt+0x2e0>
   10654:	cmp	r0, #0
   10658:	beq	10568 <abort@plt+0x118>
   1065c:	add	r8, r8, #1
   10660:	b	10568 <abort@plt+0x118>
   10664:	ldr	r0, [pc, #176]	; 1071c <abort@plt+0x2cc>
   10668:	mov	r1, r5
   1066c:	bl	10730 <abort@plt+0x2e0>
   10670:	cmp	r0, #0
   10674:	beq	10568 <abort@plt+0x118>
   10678:	add	r8, r8, #1
   1067c:	b	10568 <abort@plt+0x118>
   10680:	add	r4, r4, #1
   10684:	b	10568 <abort@plt+0x118>
   10688:	ldr	r0, [pc, #148]	; 10724 <abort@plt+0x2d4>
   1068c:	mov	r1, r4
   10690:	bl	103f0 <printf@plt>
   10694:	ldr	r0, [pc, #120]	; 10714 <abort@plt+0x2c4>
   10698:	vmov	s2, r6
   1069c:	vcvt.f32.s32	s2, s2
   106a0:	vmov	s8, r4
   106a4:	vcvt.f32.s32	s8, s8
   106a8:	vdiv.f32	s0, s2, s8
   106ac:	vcvt.f64.f32	d2, s0
   106b0:	vmov	r2, r3, d2
   106b4:	bl	103f0 <printf@plt>
   106b8:	ldr	r0, [pc, #108]	; 1072c <abort@plt+0x2dc>
   106bc:	mov	r1, r6
   106c0:	bl	103f0 <printf@plt>
   106c4:	ldr	r0, [pc, #92]	; 10728 <abort@plt+0x2d8>
   106c8:	mov	r1, r8
   106cc:	bl	103f0 <printf@plt>
   106d0:	ldr	r0, [pc, #56]	; 10710 <abort@plt+0x2c0>
   106d4:	mov	r1, r7
   106d8:	bl	103f0 <printf@plt>
   106dc:	mov	r0, r5
   106e0:	bl	10438 <fclose@plt>
   106e4:	mov	r0, #0
   106e8:	ldr	r4, [sp, #8]
   106ec:	ldr	r5, [sp, #12]
   106f0:	ldr	r6, [sp, #16]
   106f4:	ldr	r7, [sp, #20]
   106f8:	ldr	r8, [sp, #24]
   106fc:	ldr	r9, [sp, #28]
   10700:	ldr	lr, [sp, #4]
   10704:	add	sp, sp, #32
   10708:	bx	lr
   1070c:	andeq	r0, r1, r7, ror r9
   10710:	andeq	r0, r1, r6, asr #18
   10714:	muleq	r1, r0, r9
   10718:	andeq	r0, r1, r0, lsl r9
   1071c:			; <UNDEFINED> instruction: 0x000109bb
   10720:	andeq	r0, r1, lr, ror r9
   10724:	andeq	r0, r1, r1, ror #18
   10728:	andeq	r0, r1, r2, lsl r9
   1072c:	andeq	r0, r1, r1, asr #19
   10730:	mov	ip, sp
   10734:	sub	sp, sp, #32
   10738:	str	ip, [sp]
   1073c:	str	lr, [sp, #4]
   10740:	str	r4, [sp, #8]
   10744:	str	r5, [sp, #12]
   10748:	str	r6, [sp, #16]
   1074c:	str	r7, [sp, #20]
   10750:	mov	r4, r1
   10754:	mov	r5, r0
   10758:	mvn	r1, #0
   1075c:	mov	r2, #1
   10760:	mov	r0, r4
   10764:	bl	10444 <fseek@plt>
   10768:	mov	r0, r5
   1076c:	bl	10420 <strlen@plt>
   10770:	mov	r6, r0
   10774:	mov	r1, #0
   10778:	strb	r1, [sp, #24]
   1077c:	mov	ip, #0
   10780:	strb	ip, [sp, #25]
   10784:	mov	r0, #0
   10788:	strb	r0, [sp, #26]
   1078c:	mov	r3, #0
   10790:	strb	r3, [sp, #27]
   10794:	mov	r0, #0
   10798:	strb	r0, [sp, #28]
   1079c:	mov	r3, #0
   107a0:	strb	r3, [sp, #29]
   107a4:	mov	r2, #0
   107a8:	strb	r2, [sp, #30]
   107ac:	mov	r7, #0
   107b0:	cmp	r7, r6
   107b4:	bge	107d4 <abort@plt+0x384>
   107b8:	mov	r0, r4
   107bc:	bl	1042c <fgetc@plt>
   107c0:	add	ip, sp, #24
   107c4:	and	r0, r0, #255	; 0xff
   107c8:	strb	r0, [ip, r7]
   107cc:	add	r7, r7, #1
   107d0:	b	107b0 <abort@plt+0x360>
   107d4:	add	r3, sp, #24
   107d8:	mov	r2, #0
   107dc:	strb	r2, [r3, r7]
   107e0:	rsb	r1, r6, #0
   107e4:	add	r1, r1, #1
   107e8:	mov	r2, #1
   107ec:	mov	r0, r4
   107f0:	bl	10444 <fseek@plt>
   107f4:	add	r1, sp, #24
   107f8:	mov	r0, r5
   107fc:	bl	103e4 <strcmp@plt>
   10800:	cmp	r0, #0
   10804:	bne	10810 <abort@plt+0x3c0>
   10808:	mov	r0, #1
   1080c:	b	10814 <abort@plt+0x3c4>
   10810:	mov	r0, #0
   10814:	ldr	r4, [sp, #8]
   10818:	ldr	r5, [sp, #12]
   1081c:	ldr	r6, [sp, #16]
   10820:	ldr	r7, [sp, #20]
   10824:	ldr	lr, [sp, #4]
   10828:	add	sp, sp, #32
   1082c:	bx	lr
   10830:	mvnsmi	lr, #737280	; 0xb4000
   10834:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   10838:	strmi	r4, [r8], ip, lsl #26
   1083c:			; <UNDEFINED> instruction: 0x4691447e
   10840:			; <UNDEFINED> instruction: 0xf7ff447d
   10844:	blne	1dcbf4c <abort@plt+0x1dbbafc>
   10848:	strhle	r1, [sl], -r6
   1084c:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   10850:	svccc	0x0004f855
   10854:	strbmi	r4, [r1], -sl, asr #12
   10858:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   1085c:	adcmi	r4, r6, #152, 14	; 0x2600000
   10860:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   10864:	svclt	0x000083f8
   10868:	ldrdeq	r0, [r1], -r4
   1086c:	andeq	r0, r1, ip, asr #13
   10870:	svclt	0x00004770

Disassembly of section .fini:

00010874 <.fini>:
   10874:	push	{r3, lr}
   10878:	pop	{r3, pc}
