
../repos/prog2/3.e.3:     file format elf32-littlearm


Disassembly of section .init:

000103a4 <.init>:
   103a4:	push	{r3, lr}
   103a8:	bl	10460 <abort@plt+0x3c>
   103ac:	pop	{r3, pc}

Disassembly of section .plt:

000103b0 <fopen@plt-0x14>:
   103b0:	push	{lr}		; (str lr, [sp, #-4]!)
   103b4:	ldr	lr, [pc, #4]	; 103c0 <fopen@plt-0x4>
   103b8:	add	lr, pc, lr
   103bc:	ldr	pc, [lr, #8]!
   103c0:	andeq	r0, r1, r0, asr #24

000103c4 <fopen@plt>:
   103c4:	add	ip, pc, #0, 12
   103c8:	add	ip, ip, #16, 20	; 0x10000
   103cc:	ldr	pc, [ip, #3136]!	; 0xc40

000103d0 <realloc@plt>:
   103d0:	add	ip, pc, #0, 12
   103d4:	add	ip, ip, #16, 20	; 0x10000
   103d8:	ldr	pc, [ip, #3128]!	; 0xc38

000103dc <malloc@plt>:
   103dc:	add	ip, pc, #0, 12
   103e0:	add	ip, ip, #16, 20	; 0x10000
   103e4:	ldr	pc, [ip, #3120]!	; 0xc30

000103e8 <__libc_start_main@plt>:
   103e8:	add	ip, pc, #0, 12
   103ec:	add	ip, ip, #16, 20	; 0x10000
   103f0:	ldr	pc, [ip, #3112]!	; 0xc28

000103f4 <__gmon_start__@plt>:
   103f4:	add	ip, pc, #0, 12
   103f8:	add	ip, ip, #16, 20	; 0x10000
   103fc:	ldr	pc, [ip, #3104]!	; 0xc20

00010400 <fprintf@plt>:
   10400:	add	ip, pc, #0, 12
   10404:	add	ip, ip, #16, 20	; 0x10000
   10408:	ldr	pc, [ip, #3096]!	; 0xc18

0001040c <fscanf@plt>:
   1040c:	add	ip, pc, #0, 12
   10410:	add	ip, ip, #16, 20	; 0x10000
   10414:	ldr	pc, [ip, #3088]!	; 0xc10

00010418 <fclose@plt>:
   10418:	add	ip, pc, #0, 12
   1041c:	add	ip, ip, #16, 20	; 0x10000
   10420:	ldr	pc, [ip, #3080]!	; 0xc08

00010424 <abort@plt>:
   10424:	add	ip, pc, #0, 12
   10428:	add	ip, ip, #16, 20	; 0x10000
   1042c:	ldr	pc, [ip, #3072]!	; 0xc00

Disassembly of section .text:

00010430 <.text>:
   10430:	bleq	4c574 <abort@plt+0x3c150>
   10434:	cdpeq	0, 0, cr15, cr0, cr15, {2}
   10438:	strbtmi	fp, [sl], -r2, lsl #24
   1043c:	strlt	fp, [r1], #-1028	; 0xfffffbfc
   10440:			; <UNDEFINED> instruction: 0xc010f8df
   10444:	stcgt	8, cr15, [r4, #-308]	; 0xfffffecc
   10448:	blmi	12245c <abort@plt+0x112038>
   1044c:	svc	0x00ccf7ff
   10450:	svc	0x00e8f7ff
   10454:	andeq	r0, r1, r9, lsl #14
   10458:	andeq	r0, r1, r4, lsl #13
   1045c:	andeq	r0, r1, r9, asr #13
   10460:	ldr	r3, [pc, #20]	; 1047c <abort@plt+0x58>
   10464:	ldr	r2, [pc, #20]	; 10480 <abort@plt+0x5c>
   10468:	add	r3, pc, r3
   1046c:	ldr	r2, [r3, r2]
   10470:	cmp	r2, #0
   10474:	bxeq	lr
   10478:	b	103f4 <__gmon_start__@plt>
   1047c:	muleq	r1, r0, fp
   10480:	andeq	r0, r0, r0, lsr r0
   10484:	eorseq	pc, ip, r1, asr #4
   10488:	andeq	pc, r2, r0, asr #5
   1048c:	teqeq	ip, #268435460	; 0x10000004	; <UNPREDICTABLE>
   10490:	movweq	pc, #8896	; 0x22c0	; <UNPREDICTABLE>
   10494:	andle	r4, r5, r3, lsl #5
   10498:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   1049c:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   104a0:	ldrmi	fp, [r8, -r3, lsl #2]
   104a4:	svclt	0x00004770
   104a8:	eorseq	pc, ip, r1, asr #4
   104ac:	andeq	pc, r2, r0, asr #5
   104b0:	teqeq	ip, r1, asr #4	; <UNPREDICTABLE>
   104b4:	smlabteq	r2, r0, r2, pc	; <UNPREDICTABLE>
   104b8:	svceq	0x00d91a0b
   104bc:			; <UNDEFINED> instruction: 0x01a3eb01
   104c0:	andle	r1, r5, r9, asr #32
   104c4:	movweq	pc, #576	; 0x240	; <UNPREDICTABLE>
   104c8:	movweq	pc, #704	; 0x2c0	; <UNPREDICTABLE>
   104cc:	ldrmi	fp, [r8, -r3, lsl #2]
   104d0:	svclt	0x00004770
   104d4:	vqrshl.s8	d27, d0, d1
   104d8:	vmvn.i32	d16, #786432	; 0x000c0000
   104dc:	stmdavc	r3!, {r1, sl}
   104e0:			; <UNDEFINED> instruction: 0xf7ffb91b
   104e4:	movwcs	pc, #8143	; 0x1fcf	; <UNPREDICTABLE>
   104e8:	ldclt	0, cr7, [r0, #-140]	; 0xffffff74
   104ec:	svclt	0x0000e7dc
   104f0:	mov	ip, sp
   104f4:	sub	sp, sp, #32
   104f8:	str	ip, [sp, #4]
   104fc:	str	lr, [sp, #8]
   10500:	str	r4, [sp, #16]
   10504:	str	r5, [sp, #20]
   10508:	str	r6, [sp, #24]
   1050c:	str	r7, [sp, #28]
   10510:	mov	r7, r1
   10514:	ldr	r0, [pc, #152]	; 105b4 <abort@plt+0x190>
   10518:	ldr	r1, [pc, #144]	; 105b0 <abort@plt+0x18c>
   1051c:	bl	103c4 <fopen@plt>
   10520:	mov	r4, r0
   10524:	mov	r6, #0
   10528:	mov	r0, #104	; 0x68
   1052c:	bl	103dc <malloc@plt>
   10530:	mov	r5, r0
   10534:	ldr	r1, [pc, #112]	; 105ac <abort@plt+0x188>
   10538:	mov	r3, #104	; 0x68
   1053c:	mla	r2, r3, r6, r5
   10540:	add	r3, r2, #50	; 0x32
   10544:	mov	r0, r2
   10548:	add	ip, r0, #100	; 0x64
   1054c:	str	ip, [sp]
   10550:	mov	r0, r4
   10554:	bl	1040c <fscanf@plt>
   10558:	cmp	r0, #3
   1055c:	bne	10580 <abort@plt+0x15c>
   10560:	mov	r1, #104	; 0x68
   10564:	mul	ip, r6, r1
   10568:	add	r1, ip, #104	; 0x68
   1056c:	mov	r0, r5
   10570:	bl	103d0 <realloc@plt>
   10574:	mov	r5, r0
   10578:	add	r6, r6, #1
   1057c:	b	10534 <abort@plt+0x110>
   10580:	str	r6, [r7]
   10584:	mov	r0, r4
   10588:	bl	10418 <fclose@plt>
   1058c:	mov	r0, r5
   10590:	ldr	r4, [sp, #16]
   10594:	ldr	r5, [sp, #20]
   10598:	ldr	r6, [sp, #24]
   1059c:	ldr	r7, [sp, #28]
   105a0:	ldr	lr, [sp, #8]
   105a4:	add	sp, sp, #32
   105a8:	bx	lr
   105ac:	ldrdeq	r0, [r1], -r5
   105b0:	andeq	r0, r1, r8, lsr #15
   105b4:	ldrdeq	r0, [r1], -lr
   105b8:	mov	ip, sp
   105bc:	sub	sp, sp, #32
   105c0:	str	ip, [sp, #8]
   105c4:	str	lr, [sp, #12]
   105c8:	str	r4, [sp, #16]
   105cc:	str	r5, [sp, #20]
   105d0:	str	r6, [sp, #24]
   105d4:	str	r7, [sp, #28]
   105d8:	mov	r6, r2
   105dc:	ldr	r1, [pc, #156]	; 10680 <abort@plt+0x25c>
   105e0:	bl	103c4 <fopen@plt>
   105e4:	mov	r4, r0
   105e8:	ldr	r1, [pc, #140]	; 1067c <abort@plt+0x258>
   105ec:	mov	r0, r4
   105f0:	bl	10400 <fprintf@plt>
   105f4:	mov	r0, #104	; 0x68
   105f8:	bl	103dc <malloc@plt>
   105fc:	mov	r7, r0
   10600:	mov	r5, #0
   10604:	cmp	r5, r6
   10608:	bge	10654 <abort@plt+0x230>
   1060c:	mov	r1, #104	; 0x68
   10610:	mul	ip, r5, r1
   10614:	add	r1, ip, #104	; 0x68
   10618:	mov	r0, r7
   1061c:	bl	103d0 <realloc@plt>
   10620:	mov	r7, r0
   10624:	ldr	r1, [pc, #76]	; 10678 <abort@plt+0x254>
   10628:	mov	r2, #104	; 0x68
   1062c:	mla	r0, r2, r5, r7
   10630:	add	r3, r0, #50	; 0x32
   10634:	ldr	r2, [r0, #100]	; 0x64
   10638:	str	r2, [sp, #4]
   1063c:	str	r0, [sp]
   10640:	mov	r2, r5
   10644:	mov	r0, r4
   10648:	bl	10400 <fprintf@plt>
   1064c:	add	r5, r5, #1
   10650:	b	10604 <abort@plt+0x1e0>
   10654:	mov	r0, r4
   10658:	bl	10418 <fclose@plt>
   1065c:	ldr	r4, [sp, #16]
   10660:	ldr	r5, [sp, #20]
   10664:	ldr	r6, [sp, #24]
   10668:	ldr	r7, [sp, #28]
   1066c:	ldr	lr, [sp, #12]
   10670:	add	sp, sp, #32
   10674:	bx	lr
   10678:	andeq	r0, r1, sl, lsr #15
   1067c:			; <UNDEFINED> instruction: 0x000107bc
   10680:	andeq	r0, r1, fp, ror #15
   10684:	mov	ip, sp
   10688:	sub	sp, sp, #16
   1068c:	str	ip, [sp]
   10690:	str	lr, [sp, #4]
   10694:	mov	r1, #0
   10698:	str	r1, [sp, #8]
   1069c:	add	r1, sp, #8
   106a0:	bl	104f0 <abort@plt+0xcc>
   106a4:	mov	r1, r0
   106a8:	ldr	r0, [pc, #20]	; 106c4 <abort@plt+0x2a0>
   106ac:	ldr	r2, [sp, #8]
   106b0:	bl	105b8 <abort@plt+0x194>
   106b4:	mov	r0, #0
   106b8:	ldr	lr, [sp, #4]
   106bc:	add	sp, sp, #16
   106c0:	bx	lr
   106c4:	andeq	r0, r1, r7, asr #15
   106c8:	mvnsmi	lr, #737280	; 0xb4000
   106cc:	cfmadd32mi	mvax0, mvfx4, mvfx12, mvfx7
   106d0:	strmi	r4, [r8], ip, lsl #26
   106d4:			; <UNDEFINED> instruction: 0x4691447e
   106d8:			; <UNDEFINED> instruction: 0xf7ff447d
   106dc:	blne	1dcc074 <abort@plt+0x1dbbc50>
   106e0:	strhle	r1, [sl], -r6
   106e4:	strcs	r3, [r0], #-3332	; 0xfffff2fc
   106e8:	svccc	0x0004f855
   106ec:	strbmi	r4, [r1], -sl, asr #12
   106f0:	strcc	r4, [r1], #-1592	; 0xfffff9c8
   106f4:	adcmi	r4, r6, #152, 14	; 0x2600000
   106f8:	pop	{r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
   106fc:	svclt	0x000083f8
   10700:	andeq	r0, r1, ip, lsr r8
   10704:	andeq	r0, r1, r4, lsr r8
   10708:	svclt	0x00004770

Disassembly of section .fini:

0001070c <.fini>:
   1070c:	push	{r3, lr}
   10710:	pop	{r3, pc}
