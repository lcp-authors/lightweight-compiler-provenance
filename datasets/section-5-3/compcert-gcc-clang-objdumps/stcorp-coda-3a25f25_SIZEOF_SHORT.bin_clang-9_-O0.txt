
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/CheckTypeSize/SIZEOF_SHORT.bin:     file format elf32-littlearm


Disassembly of section .init:

0001054c <.init>:
   1054c:	push	{r3, lr}
   10550:	bl	105cc <_start@@Base+0x3c>
   10554:	pop	{r3, pc}

Disassembly of section .plt:

00010558 <__libc_start_main@plt-0x14>:
   10558:	push	{lr}		; (str lr, [sp, #-4]!)
   1055c:	ldr	lr, [pc, #4]	; 10568 <__libc_start_main@plt-0x4>
   10560:	add	lr, pc, lr
   10564:	ldr	pc, [lr, #8]!
   10568:	muleq	r1, r8, sl

0001056c <__libc_start_main@plt>:
   1056c:	add	ip, pc, #0, 12
   10570:	add	ip, ip, #16, 20	; 0x10000
   10574:	ldr	pc, [ip, #2712]!	; 0xa98

00010578 <__gmon_start__@plt>:
   10578:	add	ip, pc, #0, 12
   1057c:	add	ip, ip, #16, 20	; 0x10000
   10580:	ldr	pc, [ip, #2704]!	; 0xa90

00010584 <abort@plt>:
   10584:	add	ip, pc, #0, 12
   10588:	add	ip, ip, #16, 20	; 0x10000
   1058c:	ldr	pc, [ip, #2696]!	; 0xa88

Disassembly of section .text:

00010590 <_start@@Base>:
   10590:	mov	fp, #0
   10594:	mov	lr, #0
   10598:	pop	{r1}		; (ldr r1, [sp], #4)
   1059c:	mov	r2, sp
   105a0:	push	{r2}		; (str r2, [sp, #-4]!)
   105a4:	push	{r0}		; (str r0, [sp, #-4]!)
   105a8:	ldr	ip, [pc, #16]	; 105c0 <_start@@Base+0x30>
   105ac:	push	{ip}		; (str ip, [sp, #-4]!)
   105b0:	ldr	r0, [pc, #12]	; 105c4 <_start@@Base+0x34>
   105b4:	ldr	r3, [pc, #12]	; 105c8 <_start@@Base+0x38>
   105b8:	bl	1056c <__libc_start_main@plt>
   105bc:	bl	10584 <abort@plt>
   105c0:	andeq	r0, r1, r4, lsr #14
   105c4:	andeq	r0, r1, r0, lsl #13
   105c8:	andeq	r0, r1, r4, asr #13
   105cc:	ldr	r3, [pc, #20]	; 105e8 <_start@@Base+0x58>
   105d0:	ldr	r2, [pc, #20]	; 105ec <_start@@Base+0x5c>
   105d4:	add	r3, pc, r3
   105d8:	ldr	r2, [r3, r2]
   105dc:	cmp	r2, #0
   105e0:	bxeq	lr
   105e4:	b	10578 <__gmon_start__@plt>
   105e8:	andeq	r0, r1, r4, lsr #20
   105ec:	andeq	r0, r0, r8, lsl r0
   105f0:	ldr	r0, [pc, #24]	; 10610 <_start@@Base+0x80>
   105f4:	ldr	r3, [pc, #24]	; 10614 <_start@@Base+0x84>
   105f8:	cmp	r3, r0
   105fc:	bxeq	lr
   10600:	ldr	r3, [pc, #16]	; 10618 <_start@@Base+0x88>
   10604:	cmp	r3, #0
   10608:	bxeq	lr
   1060c:	bx	r3
   10610:	andeq	r1, r2, r8, lsr r0
   10614:	andeq	r1, r2, r8, lsr r0
   10618:	andeq	r0, r0, r0
   1061c:	ldr	r0, [pc, #36]	; 10648 <_start@@Base+0xb8>
   10620:	ldr	r1, [pc, #36]	; 1064c <_start@@Base+0xbc>
   10624:	sub	r1, r1, r0
   10628:	asr	r1, r1, #2
   1062c:	add	r1, r1, r1, lsr #31
   10630:	asrs	r1, r1, #1
   10634:	bxeq	lr
   10638:	ldr	r3, [pc, #16]	; 10650 <_start@@Base+0xc0>
   1063c:	cmp	r3, #0
   10640:	bxeq	lr
   10644:	bx	r3
   10648:	andeq	r1, r2, r8, lsr r0
   1064c:	andeq	r1, r2, r8, lsr r0
   10650:	andeq	r0, r0, r0
   10654:	push	{r4, lr}
   10658:	ldr	r4, [pc, #24]	; 10678 <_start@@Base+0xe8>
   1065c:	ldrb	r3, [r4]
   10660:	cmp	r3, #0
   10664:	popne	{r4, pc}
   10668:	bl	105f0 <_start@@Base+0x60>
   1066c:	mov	r3, #1
   10670:	strb	r3, [r4]
   10674:	pop	{r4, pc}
   10678:	andeq	r1, r2, r5, lsr r0
   1067c:	b	1061c <_start@@Base+0x8c>

00010680 <main@@Base>:
   10680:	sub	sp, sp, #16
   10684:	movw	r2, #0
   10688:	str	r2, [sp, #12]
   1068c:	str	r0, [sp, #8]
   10690:	str	r1, [sp, #4]
   10694:	str	r2, [sp]
   10698:	ldr	r0, [sp, #8]
   1069c:	movw	r1, #4132	; 0x1024
   106a0:	movt	r1, #2
   106a4:	add	r0, r1, r0
   106a8:	ldrb	r0, [r0]
   106ac:	ldr	r1, [sp]
   106b0:	add	r0, r1, r0
   106b4:	str	r0, [sp]
   106b8:	ldr	r0, [sp]
   106bc:	add	sp, sp, #16
   106c0:	bx	lr

000106c4 <__libc_csu_init@@Base>:
   106c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   106c8:	mov	r7, r0
   106cc:	ldr	r6, [pc, #72]	; 1071c <__libc_csu_init@@Base+0x58>
   106d0:	ldr	r5, [pc, #72]	; 10720 <__libc_csu_init@@Base+0x5c>
   106d4:	add	r6, pc, r6
   106d8:	add	r5, pc, r5
   106dc:	sub	r6, r6, r5
   106e0:	mov	r8, r1
   106e4:	mov	r9, r2
   106e8:	bl	1054c <__libc_start_main@plt-0x20>
   106ec:	asrs	r6, r6, #2
   106f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   106f4:	mov	r4, #0
   106f8:	add	r4, r4, #1
   106fc:	ldr	r3, [r5], #4
   10700:	mov	r2, r9
   10704:	mov	r1, r8
   10708:	mov	r0, r7
   1070c:	blx	r3
   10710:	cmp	r6, r4
   10714:	bne	106f8 <__libc_csu_init@@Base+0x34>
   10718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1071c:	andeq	r0, r1, r0, lsr r8
   10720:	andeq	r0, r1, r8, lsr #16

00010724 <__libc_csu_fini@@Base>:
   10724:	bx	lr

Disassembly of section .fini:

00010728 <.fini>:
   10728:	push	{r3, lr}
   1072c:	pop	{r3, pc}
