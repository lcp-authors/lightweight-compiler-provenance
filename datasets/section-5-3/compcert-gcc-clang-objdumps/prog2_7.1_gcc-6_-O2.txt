
../compcert-repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010d10 <.init>:
   10d10:	push	{r3, lr}
   10d14:	bl	10ff8 <_start@@Base+0x3c>
   10d18:	pop	{r3, pc}

Disassembly of section .plt:

00010d1c <strcmp@plt-0x14>:
   10d1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d20:	ldr	lr, [pc, #4]	; 10d2c <strcmp@plt-0x4>
   10d24:	add	lr, pc, lr
   10d28:	ldr	pc, [lr, #8]!
   10d2c:	ldrdeq	r1, [r1], -r4

00010d30 <strcmp@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #69632	; 0x11000
   10d38:	ldr	pc, [ip, #724]!	; 0x2d4

00010d3c <printf@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #69632	; 0x11000
   10d44:	ldr	pc, [ip, #716]!	; 0x2cc

00010d48 <fopen@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #69632	; 0x11000
   10d50:	ldr	pc, [ip, #708]!	; 0x2c4

00010d54 <free@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #69632	; 0x11000
   10d5c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d60 <fgets@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #69632	; 0x11000
   10d68:	ldr	pc, [ip, #692]!	; 0x2b4

00010d6c <memcpy@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #69632	; 0x11000
   10d74:	ldr	pc, [ip, #684]!	; 0x2ac

00010d78 <stpcpy@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #69632	; 0x11000
   10d80:	ldr	pc, [ip, #676]!	; 0x2a4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #69632	; 0x11000
   10d8c:	ldr	pc, [ip, #668]!	; 0x29c

00010d90 <strcpy@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #69632	; 0x11000
   10d98:	ldr	pc, [ip, #660]!	; 0x294

00010d9c <puts@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #69632	; 0x11000
   10da4:	ldr	pc, [ip, #652]!	; 0x28c

00010da8 <malloc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #69632	; 0x11000
   10db0:	ldr	pc, [ip, #644]!	; 0x284

00010db4 <__libc_start_main@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #69632	; 0x11000
   10dbc:	ldr	pc, [ip, #636]!	; 0x27c

00010dc0 <__gmon_start__@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #69632	; 0x11000
   10dc8:	ldr	pc, [ip, #628]!	; 0x274

00010dcc <strlen@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #69632	; 0x11000
   10dd4:	ldr	pc, [ip, #620]!	; 0x26c

00010dd8 <putchar@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #69632	; 0x11000
   10de0:	ldr	pc, [ip, #612]!	; 0x264

00010de4 <fclose@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #69632	; 0x11000
   10dec:	ldr	pc, [ip, #604]!	; 0x25c

00010df0 <strtok@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #69632	; 0x11000
   10df8:	ldr	pc, [ip, #596]!	; 0x254

00010dfc <abort@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #69632	; 0x11000
   10e04:	ldr	pc, [ip, #588]!	; 0x24c

Disassembly of section .text:

00010e08 <main@@Base>:
   10e08:	push	{r4, r5, r6, r7, r8, r9, lr}
   10e0c:	sub	sp, sp, #148	; 0x94
   10e10:	ldr	r0, [pc, #376]	; 10f90 <main@@Base+0x188>
   10e14:	bl	10d9c <puts@plt>
   10e18:	ldr	lr, [pc, #372]	; 10f94 <main@@Base+0x18c>
   10e1c:	add	ip, sp, #4
   10e20:	mov	r4, sp
   10e24:	ldm	lr!, {r0, r1, r2, r3}
   10e28:	add	r6, sp, #40	; 0x28
   10e2c:	stmia	ip!, {r0, r1, r2, r3}
   10e30:	ldm	lr!, {r0, r1, r2, r3}
   10e34:	stmia	ip!, {r0, r1, r2, r3}
   10e38:	ldm	lr, {r0, r1}
   10e3c:	stm	ip, {r0, r1}
   10e40:	bl	118c0 <bst_nova@@Base>
   10e44:	mov	r5, r0
   10e48:	ldr	r1, [r4, #4]!
   10e4c:	mov	r0, r5
   10e50:	bl	11a64 <bst_insere@@Base>
   10e54:	cmp	r4, r6
   10e58:	bne	10e48 <main@@Base+0x40>
   10e5c:	ldr	r0, [r5]
   10e60:	bl	11c38 <bst_altura@@Base>
   10e64:	add	r4, sp, #44	; 0x2c
   10e68:	mov	r9, #100	; 0x64
   10e6c:	mov	r6, #0
   10e70:	mov	r1, r0
   10e74:	ldr	r0, [pc, #284]	; 10f98 <main@@Base+0x190>
   10e78:	bl	10d3c <printf@plt>
   10e7c:	mov	r0, r5
   10e80:	bl	11ce0 <bst_imprime@@Base>
   10e84:	ldr	r0, [pc, #272]	; 10f9c <main@@Base+0x194>
   10e88:	bl	10d9c <puts@plt>
   10e8c:	bl	110e4 <avl_nova@@Base>
   10e90:	ldr	r1, [pc, #264]	; 10fa0 <main@@Base+0x198>
   10e94:	ldr	r5, [pc, #264]	; 10fa4 <main@@Base+0x19c>
   10e98:	mov	r7, r0
   10e9c:	ldr	r0, [pc, #260]	; 10fa8 <main@@Base+0x1a0>
   10ea0:	bl	10d48 <fopen@plt>
   10ea4:	mov	r8, r0
   10ea8:	b	10ef0 <main@@Base+0xe8>
   10eac:	bl	10df0 <strtok@plt>
   10eb0:	mov	r1, r0
   10eb4:	mov	r0, r4
   10eb8:	bl	10d90 <strcpy@plt>
   10ebc:	mov	r1, r5
   10ec0:	mov	r0, r6
   10ec4:	bl	10df0 <strtok@plt>
   10ec8:	mov	r1, r0
   10ecc:	mov	r0, r4
   10ed0:	bl	10d78 <stpcpy@plt>
   10ed4:	add	r3, sp, #144	; 0x90
   10ed8:	mov	r1, r4
   10edc:	sub	r0, r0, r4
   10ee0:	add	r3, r3, r0
   10ee4:	mov	r0, r7
   10ee8:	strb	r6, [r3, #-101]	; 0xffffff9b
   10eec:	bl	11500 <avl_insere@@Base>
   10ef0:	mov	r1, r9
   10ef4:	mov	r2, r8
   10ef8:	mov	r0, r4
   10efc:	bl	10d60 <fgets@plt>
   10f00:	mov	r1, r5
   10f04:	cmp	r0, #0
   10f08:	mov	r0, r4
   10f0c:	bne	10eac <main@@Base+0xa4>
   10f10:	mov	r0, r8
   10f14:	bl	10de4 <fclose@plt>
   10f18:	ldr	r1, [pc, #140]	; 10fac <main@@Base+0x1a4>
   10f1c:	mov	r0, r7
   10f20:	bl	11314 <avl_pesquisa@@Base>
   10f24:	cmp	r0, #0
   10f28:	beq	10f3c <main@@Base+0x134>
   10f2c:	ldr	r2, [r0, #16]
   10f30:	ldr	r1, [r0]
   10f34:	ldr	r0, [pc, #116]	; 10fb0 <main@@Base+0x1a8>
   10f38:	bl	10d3c <printf@plt>
   10f3c:	ldr	r1, [pc, #112]	; 10fb4 <main@@Base+0x1ac>
   10f40:	mov	r0, r7
   10f44:	bl	11314 <avl_pesquisa@@Base>
   10f48:	cmp	r0, #0
   10f4c:	beq	10f60 <main@@Base+0x158>
   10f50:	ldr	r2, [r0, #16]
   10f54:	ldr	r1, [r0]
   10f58:	ldr	r0, [pc, #80]	; 10fb0 <main@@Base+0x1a8>
   10f5c:	bl	10d3c <printf@plt>
   10f60:	mov	r0, r7
   10f64:	ldr	r1, [pc, #76]	; 10fb8 <main@@Base+0x1b0>
   10f68:	bl	11314 <avl_pesquisa@@Base>
   10f6c:	cmp	r0, #0
   10f70:	beq	10f84 <main@@Base+0x17c>
   10f74:	ldr	r2, [r0, #16]
   10f78:	ldr	r1, [r0]
   10f7c:	ldr	r0, [pc, #44]	; 10fb0 <main@@Base+0x1a8>
   10f80:	bl	10d3c <printf@plt>
   10f84:	mov	r0, #0
   10f88:	add	sp, sp, #148	; 0x94
   10f8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10f90:	andeq	r1, r1, r4, lsr #27
   10f94:	andeq	r1, r1, ip, ror sp
   10f98:	andeq	r1, r1, r8, lsr #27
   10f9c:			; <UNDEFINED> instruction: 0x00011dbc
   10fa0:	andeq	r1, r1, r0, asr #27
   10fa4:	ldrdeq	r1, [r1], -r0
   10fa8:	andeq	r1, r1, r4, asr #27
   10fac:	ldrdeq	r1, [r1], -r4
   10fb0:	andeq	r1, r1, r0, ror #27
   10fb4:	andeq	r1, r1, ip, ror #27
   10fb8:	strdeq	r1, [r1], -r4

00010fbc <_start@@Base>:
   10fbc:	mov	fp, #0
   10fc0:	mov	lr, #0
   10fc4:	pop	{r1}		; (ldr r1, [sp], #4)
   10fc8:	mov	r2, sp
   10fcc:	push	{r2}		; (str r2, [sp, #-4]!)
   10fd0:	push	{r0}		; (str r0, [sp, #-4]!)
   10fd4:	ldr	ip, [pc, #16]	; 10fec <_start@@Base+0x30>
   10fd8:	push	{ip}		; (str ip, [sp, #-4]!)
   10fdc:	ldr	r0, [pc, #12]	; 10ff0 <_start@@Base+0x34>
   10fe0:	ldr	r3, [pc, #12]	; 10ff4 <_start@@Base+0x38>
   10fe4:	bl	10db4 <__libc_start_main@plt>
   10fe8:	bl	10dfc <abort@plt>
   10fec:	andeq	r1, r1, ip, ror #26
   10ff0:	andeq	r0, r1, r8, lsl #28
   10ff4:	andeq	r1, r1, ip, lsl #26
   10ff8:	ldr	r3, [pc, #20]	; 11014 <_start@@Base+0x58>
   10ffc:	ldr	r2, [pc, #20]	; 11018 <_start@@Base+0x5c>
   11000:	add	r3, pc, r3
   11004:	ldr	r2, [r3, r2]
   11008:	cmp	r2, #0
   1100c:	bxeq	lr
   11010:	b	10dc0 <__gmon_start__@plt>
   11014:	strdeq	r0, [r1], -r8
   11018:	andeq	r0, r0, r4, asr r0
   1101c:	ldr	r3, [pc, #28]	; 11040 <_start@@Base+0x84>
   11020:	ldr	r0, [pc, #28]	; 11044 <_start@@Base+0x88>
   11024:	sub	r3, r3, r0
   11028:	cmp	r3, #6
   1102c:	bxls	lr
   11030:	ldr	r3, [pc, #16]	; 11048 <_start@@Base+0x8c>
   11034:	cmp	r3, #0
   11038:	bxeq	lr
   1103c:	bx	r3
   11040:	andeq	r2, r2, r3, rrx
   11044:	andeq	r2, r2, r0, rrx
   11048:	andeq	r0, r0, r0
   1104c:	ldr	r1, [pc, #36]	; 11078 <_start@@Base+0xbc>
   11050:	ldr	r0, [pc, #36]	; 1107c <_start@@Base+0xc0>
   11054:	sub	r1, r1, r0
   11058:	asr	r1, r1, #2
   1105c:	add	r1, r1, r1, lsr #31
   11060:	asrs	r1, r1, #1
   11064:	bxeq	lr
   11068:	ldr	r3, [pc, #16]	; 11080 <_start@@Base+0xc4>
   1106c:	cmp	r3, #0
   11070:	bxeq	lr
   11074:	bx	r3
   11078:	andeq	r2, r2, r0, rrx
   1107c:	andeq	r2, r2, r0, rrx
   11080:	andeq	r0, r0, r0
   11084:	push	{r4, lr}
   11088:	ldr	r4, [pc, #24]	; 110a8 <_start@@Base+0xec>
   1108c:	ldrb	r3, [r4]
   11090:	cmp	r3, #0
   11094:	popne	{r4, pc}
   11098:	bl	1101c <_start@@Base+0x60>
   1109c:	mov	r3, #1
   110a0:	strb	r3, [r4]
   110a4:	pop	{r4, pc}
   110a8:	andeq	r2, r2, r0, rrx
   110ac:	ldr	r0, [pc, #40]	; 110dc <_start@@Base+0x120>
   110b0:	ldr	r3, [r0]
   110b4:	cmp	r3, #0
   110b8:	bne	110c0 <_start@@Base+0x104>
   110bc:	b	1104c <_start@@Base+0x90>
   110c0:	ldr	r3, [pc, #24]	; 110e0 <_start@@Base+0x124>
   110c4:	cmp	r3, #0
   110c8:	beq	110bc <_start@@Base+0x100>
   110cc:	push	{r4, lr}
   110d0:	blx	r3
   110d4:	pop	{r4, lr}
   110d8:	b	1104c <_start@@Base+0x90>
   110dc:	andeq	r1, r2, r4, lsl pc
   110e0:	andeq	r0, r0, r0

000110e4 <avl_nova@@Base>:
   110e4:	push	{r4, lr}
   110e8:	mov	r0, #4
   110ec:	bl	10da8 <malloc@plt>
   110f0:	cmp	r0, #0
   110f4:	movne	r3, #0
   110f8:	strne	r3, [r0]
   110fc:	pop	{r4, pc}

00011100 <avl_min@@Base>:
   11100:	cmp	r0, #0
   11104:	bxeq	lr
   11108:	ldr	r2, [r0]
   1110c:	b	11114 <avl_min@@Base+0x14>
   11110:	mov	r2, r3
   11114:	ldr	r3, [r2, #4]
   11118:	cmp	r3, #0
   1111c:	bne	11110 <avl_min@@Base+0x10>
   11120:	ldr	r0, [r2]
   11124:	bx	lr

00011128 <avl_max@@Base>:
   11128:	cmp	r0, #0
   1112c:	bxeq	lr
   11130:	ldr	r2, [r0]
   11134:	b	1113c <avl_max@@Base+0x14>
   11138:	mov	r2, r3
   1113c:	ldr	r3, [r2, #8]
   11140:	cmp	r3, #0
   11144:	bne	11138 <avl_max@@Base+0x10>
   11148:	ldr	r0, [r2]
   1114c:	bx	lr

00011150 <avl_altura@@Base>:
   11150:	cmp	r0, #0
   11154:	ldrne	r0, [r0, #12]
   11158:	mvneq	r0, #0
   1115c:	bx	lr

00011160 <max@@Base>:
   11160:	cmp	r1, r0
   11164:	movge	r0, r1
   11168:	bx	lr

0001116c <avl_novo_no@@Base>:
   1116c:	push	{r4, r5, r6, lr}
   11170:	mov	r5, r0
   11174:	mov	r0, #20
   11178:	bl	10da8 <malloc@plt>
   1117c:	mov	r4, r0
   11180:	mov	r0, r5
   11184:	bl	10dcc <strlen@plt>
   11188:	add	r6, r0, #1
   1118c:	mov	r0, r6
   11190:	bl	10da8 <malloc@plt>
   11194:	mov	r2, r6
   11198:	mov	r1, r5
   1119c:	str	r0, [r4]
   111a0:	bl	10d6c <memcpy@plt>
   111a4:	mov	r3, #0
   111a8:	mov	r2, #1
   111ac:	str	r2, [r4, #16]
   111b0:	str	r3, [r4, #4]
   111b4:	str	r3, [r4, #8]
   111b8:	str	r3, [r4, #12]
   111bc:	mov	r0, r4
   111c0:	pop	{r4, r5, r6, pc}

000111c4 <roda_direita@@Base>:
   111c4:	ldr	r2, [r0, #4]
   111c8:	ldr	r3, [r2, #8]
   111cc:	str	r0, [r2, #8]
   111d0:	cmp	r3, #0
   111d4:	ldr	r1, [r0, #8]
   111d8:	str	r3, [r0, #4]
   111dc:	ldrne	r3, [r3, #12]
   111e0:	mvneq	r3, #0
   111e4:	cmp	r1, #0
   111e8:	mvneq	r1, #0
   111ec:	ldrne	r1, [r1, #12]
   111f0:	ldr	ip, [r2, #4]
   111f4:	cmp	r3, r1
   111f8:	movlt	r3, r1
   111fc:	cmp	ip, #0
   11200:	add	r3, r3, #1
   11204:	str	r3, [r0, #12]
   11208:	ldrne	r1, [ip, #12]
   1120c:	beq	11228 <roda_direita@@Base+0x64>
   11210:	cmp	r3, r1
   11214:	movlt	r3, r1
   11218:	add	r3, r3, #1
   1121c:	str	r3, [r2, #12]
   11220:	mov	r0, r2
   11224:	bx	lr
   11228:	mvn	r1, #0
   1122c:	b	11210 <roda_direita@@Base+0x4c>

00011230 <roda_esquerda@@Base>:
   11230:	ldr	r2, [r0, #8]
   11234:	ldr	r1, [r2, #4]
   11238:	str	r0, [r2, #4]
   1123c:	ldr	r3, [r0, #4]
   11240:	str	r1, [r0, #8]
   11244:	cmp	r3, #0
   11248:	mvneq	r3, #0
   1124c:	ldrne	r3, [r3, #12]
   11250:	cmp	r1, #0
   11254:	beq	11294 <roda_esquerda@@Base+0x64>
   11258:	ldr	r1, [r1, #12]
   1125c:	cmp	r3, r1
   11260:	movlt	r3, r1
   11264:	add	r3, r3, #1
   11268:	str	r3, [r0, #12]
   1126c:	ldr	r1, [r2, #8]
   11270:	mov	r0, r2
   11274:	cmp	r1, #0
   11278:	mvneq	r1, #0
   1127c:	ldrne	r1, [r1, #12]
   11280:	cmp	r3, r1
   11284:	movlt	r3, r1
   11288:	add	r3, r3, #1
   1128c:	str	r3, [r2, #12]
   11290:	bx	lr
   11294:	orr	r3, r3, r3, asr #31
   11298:	add	r3, r3, #1
   1129c:	str	r3, [r0, #12]
   112a0:	b	1126c <roda_esquerda@@Base+0x3c>

000112a4 <calc_balanceamento@@Base>:
   112a4:	cmp	r0, #0
   112a8:	bxeq	lr
   112ac:	ldr	r3, [r0, #8]
   112b0:	ldr	r2, [r0, #4]
   112b4:	cmp	r3, #0
   112b8:	mvneq	r3, #0
   112bc:	ldrne	r3, [r3, #12]
   112c0:	cmp	r2, #0
   112c4:	mvneq	r0, #0
   112c8:	ldrne	r0, [r2, #12]
   112cc:	sub	r0, r3, r0
   112d0:	bx	lr

000112d4 <avl_pesquisa_impl@@Base>:
   112d4:	push	{r4, r5, r6, lr}
   112d8:	subs	r4, r0, #0
   112dc:	beq	1130c <avl_pesquisa_impl@@Base+0x38>
   112e0:	mov	r5, r1
   112e4:	ldr	r1, [r4]
   112e8:	mov	r0, r5
   112ec:	bl	10d30 <strcmp@plt>
   112f0:	cmp	r0, #0
   112f4:	ldrlt	r4, [r4, #4]
   112f8:	blt	11304 <avl_pesquisa_impl@@Base+0x30>
   112fc:	beq	1130c <avl_pesquisa_impl@@Base+0x38>
   11300:	ldr	r4, [r4, #8]
   11304:	cmp	r4, #0
   11308:	bne	112e4 <avl_pesquisa_impl@@Base+0x10>
   1130c:	mov	r0, r4
   11310:	pop	{r4, r5, r6, pc}

00011314 <avl_pesquisa@@Base>:
   11314:	cmp	r1, #0
   11318:	cmpne	r0, #0
   1131c:	beq	11328 <avl_pesquisa@@Base+0x14>
   11320:	ldr	r0, [r0]
   11324:	b	112d4 <avl_pesquisa_impl@@Base>
   11328:	mov	r0, #0
   1132c:	bx	lr

00011330 <avl_insere_impl@@Base>:
   11330:	push	{r4, r5, r6, lr}
   11334:	subs	r4, r0, #0
   11338:	beq	114d4 <avl_insere_impl@@Base+0x1a4>
   1133c:	mov	r5, r1
   11340:	mov	r0, r5
   11344:	ldr	r1, [r4]
   11348:	bl	10d30 <strcmp@plt>
   1134c:	cmp	r0, #0
   11350:	blt	1148c <avl_insere_impl@@Base+0x15c>
   11354:	beq	113e8 <avl_insere_impl@@Base+0xb8>
   11358:	mov	r1, r5
   1135c:	ldr	r0, [r4, #8]
   11360:	bl	11330 <avl_insere_impl@@Base>
   11364:	ldr	r1, [r4, #4]
   11368:	str	r0, [r4, #8]
   1136c:	cmp	r1, #0
   11370:	beq	113fc <avl_insere_impl@@Base+0xcc>
   11374:	cmp	r0, #0
   11378:	ldr	r3, [r1, #12]
   1137c:	beq	114a8 <avl_insere_impl@@Base+0x178>
   11380:	ldr	r2, [r0, #12]
   11384:	cmp	r3, r2
   11388:	movlt	r3, r2
   1138c:	add	r3, r3, #1
   11390:	str	r3, [r4, #12]
   11394:	ldr	r3, [r0, #12]
   11398:	ldr	r2, [r1, #12]
   1139c:	sub	r3, r3, r2
   113a0:	cmp	r3, #1
   113a4:	ble	11424 <avl_insere_impl@@Base+0xf4>
   113a8:	cmp	r0, #0
   113ac:	beq	113dc <avl_insere_impl@@Base+0xac>
   113b0:	ldmib	r0, {r2, r3}
   113b4:	cmp	r3, #0
   113b8:	beq	114c4 <avl_insere_impl@@Base+0x194>
   113bc:	cmp	r2, #0
   113c0:	ldr	r3, [r3, #12]
   113c4:	mvneq	r2, #0
   113c8:	beq	113d0 <avl_insere_impl@@Base+0xa0>
   113cc:	ldr	r2, [r2, #12]
   113d0:	sub	r3, r3, r2
   113d4:	cmp	r3, #0
   113d8:	blt	11478 <avl_insere_impl@@Base+0x148>
   113dc:	mov	r0, r4
   113e0:	pop	{r4, r5, r6, lr}
   113e4:	b	11230 <roda_esquerda@@Base>
   113e8:	ldr	r3, [r4, #16]
   113ec:	add	r3, r3, #1
   113f0:	str	r3, [r4, #16]
   113f4:	mov	r0, r4
   113f8:	pop	{r4, r5, r6, pc}
   113fc:	cmp	r0, #0
   11400:	beq	114f8 <avl_insere_impl@@Base+0x1c8>
   11404:	ldr	r3, [r0, #12]
   11408:	orr	r3, r3, r3, asr #31
   1140c:	add	r3, r3, #1
   11410:	str	r3, [r4, #12]
   11414:	ldr	r3, [r0, #12]
   11418:	add	r3, r3, #1
   1141c:	cmp	r3, #1
   11420:	bgt	113b0 <avl_insere_impl@@Base+0x80>
   11424:	cmn	r3, #1
   11428:	bge	113f4 <avl_insere_impl@@Base+0xc4>
   1142c:	cmp	r1, #0
   11430:	beq	114ec <avl_insere_impl@@Base+0x1bc>
   11434:	ldmib	r1, {r2, r3}
   11438:	cmp	r3, #0
   1143c:	beq	114e0 <avl_insere_impl@@Base+0x1b0>
   11440:	cmp	r2, #0
   11444:	ldr	r3, [r3, #12]
   11448:	mvneq	r2, #0
   1144c:	beq	11454 <avl_insere_impl@@Base+0x124>
   11450:	ldr	r2, [r2, #12]
   11454:	sub	r3, r3, r2
   11458:	cmp	r3, #0
   1145c:	ble	114ec <avl_insere_impl@@Base+0x1bc>
   11460:	mov	r0, r1
   11464:	bl	11230 <roda_esquerda@@Base>
   11468:	str	r0, [r4, #4]
   1146c:	mov	r0, r4
   11470:	pop	{r4, r5, r6, lr}
   11474:	b	111c4 <roda_direita@@Base>
   11478:	bl	111c4 <roda_direita@@Base>
   1147c:	str	r0, [r4, #8]
   11480:	mov	r0, r4
   11484:	pop	{r4, r5, r6, lr}
   11488:	b	11230 <roda_esquerda@@Base>
   1148c:	mov	r1, r5
   11490:	ldr	r0, [r4, #4]
   11494:	bl	11330 <avl_insere_impl@@Base>
   11498:	mov	r1, r0
   1149c:	str	r0, [r4, #4]
   114a0:	ldr	r0, [r4, #8]
   114a4:	b	1136c <avl_insere_impl@@Base+0x3c>
   114a8:	mvn	r2, #0
   114ac:	cmp	r3, r2
   114b0:	movlt	r3, r2
   114b4:	add	r3, r3, #1
   114b8:	str	r3, [r4, #12]
   114bc:	mov	r3, r2
   114c0:	b	11398 <avl_insere_impl@@Base+0x68>
   114c4:	cmp	r2, #0
   114c8:	mvnne	r3, #0
   114cc:	bne	113cc <avl_insere_impl@@Base+0x9c>
   114d0:	b	113dc <avl_insere_impl@@Base+0xac>
   114d4:	mov	r0, r1
   114d8:	pop	{r4, r5, r6, lr}
   114dc:	b	1116c <avl_novo_no@@Base>
   114e0:	cmp	r2, #0
   114e4:	mvnne	r3, #0
   114e8:	bne	11450 <avl_insere_impl@@Base+0x120>
   114ec:	mov	r0, r4
   114f0:	pop	{r4, r5, r6, lr}
   114f4:	b	111c4 <roda_direita@@Base>
   114f8:	str	r0, [r4, #12]
   114fc:	b	113f4 <avl_insere_impl@@Base+0xc4>

00011500 <avl_insere@@Base>:
   11500:	cmp	r1, #0
   11504:	cmpne	r0, #0
   11508:	push	{r4, r5, r6, lr}
   1150c:	moveq	r5, #1
   11510:	movne	r5, #0
   11514:	beq	11530 <avl_insere@@Base+0x30>
   11518:	mov	r4, r0
   1151c:	ldr	r0, [r0]
   11520:	bl	11330 <avl_insere_impl@@Base>
   11524:	str	r0, [r4]
   11528:	mov	r0, r5
   1152c:	pop	{r4, r5, r6, pc}
   11530:	mvn	r5, #0
   11534:	b	11528 <avl_insere@@Base+0x28>

00011538 <avl_no_valormin@@Base>:
   11538:	b	11540 <avl_no_valormin@@Base+0x8>
   1153c:	mov	r0, r3
   11540:	ldr	r3, [r0, #4]
   11544:	cmp	r3, #0
   11548:	bne	1153c <avl_no_valormin@@Base+0x4>
   1154c:	bx	lr

00011550 <avl_no_valormax@@Base>:
   11550:	b	11558 <avl_no_valormax@@Base+0x8>
   11554:	mov	r0, r3
   11558:	ldr	r3, [r0, #8]
   1155c:	cmp	r3, #0
   11560:	bne	11554 <avl_no_valormax@@Base+0x4>
   11564:	bx	lr

00011568 <avl_remove_impl@@Base>:
   11568:	push	{r4, r5, r6, r7, r8, lr}
   1156c:	subs	r4, r0, #0
   11570:	beq	116bc <avl_remove_impl@@Base+0x154>
   11574:	ldr	r7, [r4]
   11578:	mov	r0, r1
   1157c:	mov	r5, r1
   11580:	mov	r1, r7
   11584:	bl	10d30 <strcmp@plt>
   11588:	cmp	r0, #0
   1158c:	blt	11728 <avl_remove_impl@@Base+0x1c0>
   11590:	beq	11624 <avl_remove_impl@@Base+0xbc>
   11594:	mov	r1, r5
   11598:	ldr	r0, [r4, #8]
   1159c:	bl	11568 <avl_remove_impl@@Base>
   115a0:	ldr	r1, [r4, #4]
   115a4:	str	r0, [r4, #8]
   115a8:	cmp	r1, #0
   115ac:	beq	1168c <avl_remove_impl@@Base+0x124>
   115b0:	cmp	r0, #0
   115b4:	ldr	r3, [r1, #12]
   115b8:	beq	11744 <avl_remove_impl@@Base+0x1dc>
   115bc:	ldr	r2, [r0, #12]
   115c0:	cmp	r3, r2
   115c4:	movlt	r3, r2
   115c8:	add	r3, r3, #1
   115cc:	str	r3, [r4, #12]
   115d0:	ldr	r3, [r0, #12]
   115d4:	ldr	r2, [r1, #12]
   115d8:	sub	r3, r3, r2
   115dc:	cmp	r3, #1
   115e0:	ble	116b4 <avl_remove_impl@@Base+0x14c>
   115e4:	cmp	r0, #0
   115e8:	beq	11618 <avl_remove_impl@@Base+0xb0>
   115ec:	ldmib	r0, {r2, r3}
   115f0:	cmp	r3, #0
   115f4:	beq	11760 <avl_remove_impl@@Base+0x1f8>
   115f8:	cmp	r2, #0
   115fc:	ldr	r3, [r3, #12]
   11600:	mvneq	r2, #0
   11604:	beq	1160c <avl_remove_impl@@Base+0xa4>
   11608:	ldr	r2, [r2, #12]
   1160c:	sub	r3, r3, r2
   11610:	cmp	r3, #0
   11614:	blt	11714 <avl_remove_impl@@Base+0x1ac>
   11618:	mov	r0, r4
   1161c:	pop	{r4, r5, r6, r7, r8, lr}
   11620:	b	11230 <roda_esquerda@@Base>
   11624:	ldr	r6, [r4, #4]
   11628:	cmp	r6, #0
   1162c:	beq	117d4 <avl_remove_impl@@Base+0x26c>
   11630:	ldr	r5, [r4, #8]
   11634:	cmp	r5, #0
   11638:	bne	11644 <avl_remove_impl@@Base+0xdc>
   1163c:	b	11770 <avl_remove_impl@@Base+0x208>
   11640:	mov	r5, r3
   11644:	ldr	r3, [r5, #4]
   11648:	cmp	r3, #0
   1164c:	bne	11640 <avl_remove_impl@@Base+0xd8>
   11650:	ldr	r0, [r5]
   11654:	bl	10dcc <strlen@plt>
   11658:	add	r1, r0, #1
   1165c:	mov	r0, r7
   11660:	bl	10d84 <realloc@plt>
   11664:	str	r0, [r4]
   11668:	ldr	r1, [r5]
   1166c:	bl	10d90 <strcpy@plt>
   11670:	ldr	r1, [r5]
   11674:	ldr	r0, [r4, #8]
   11678:	bl	11568 <avl_remove_impl@@Base>
   1167c:	ldr	r1, [r4, #4]
   11680:	cmp	r1, #0
   11684:	str	r0, [r4, #8]
   11688:	bne	115b0 <avl_remove_impl@@Base+0x48>
   1168c:	cmp	r0, #0
   11690:	beq	117cc <avl_remove_impl@@Base+0x264>
   11694:	ldr	r3, [r0, #12]
   11698:	orr	r3, r3, r3, asr #31
   1169c:	add	r3, r3, #1
   116a0:	str	r3, [r4, #12]
   116a4:	ldr	r3, [r0, #12]
   116a8:	add	r3, r3, #1
   116ac:	cmp	r3, #1
   116b0:	bgt	115ec <avl_remove_impl@@Base+0x84>
   116b4:	cmn	r3, #1
   116b8:	blt	116c8 <avl_remove_impl@@Base+0x160>
   116bc:	mov	r6, r4
   116c0:	mov	r0, r6
   116c4:	pop	{r4, r5, r6, r7, r8, pc}
   116c8:	cmp	r1, #0
   116cc:	beq	117c0 <avl_remove_impl@@Base+0x258>
   116d0:	ldmib	r1, {r2, r3}
   116d4:	cmp	r3, #0
   116d8:	beq	117b4 <avl_remove_impl@@Base+0x24c>
   116dc:	cmp	r2, #0
   116e0:	ldr	r3, [r3, #12]
   116e4:	mvneq	r2, #0
   116e8:	beq	116f0 <avl_remove_impl@@Base+0x188>
   116ec:	ldr	r2, [r2, #12]
   116f0:	sub	r3, r3, r2
   116f4:	cmp	r3, #0
   116f8:	ble	117c0 <avl_remove_impl@@Base+0x258>
   116fc:	mov	r0, r1
   11700:	bl	11230 <roda_esquerda@@Base>
   11704:	str	r0, [r4, #4]
   11708:	mov	r0, r4
   1170c:	pop	{r4, r5, r6, r7, r8, lr}
   11710:	b	111c4 <roda_direita@@Base>
   11714:	bl	111c4 <roda_direita@@Base>
   11718:	str	r0, [r4, #8]
   1171c:	mov	r0, r4
   11720:	pop	{r4, r5, r6, r7, r8, lr}
   11724:	b	11230 <roda_esquerda@@Base>
   11728:	mov	r1, r5
   1172c:	ldr	r0, [r4, #4]
   11730:	bl	11568 <avl_remove_impl@@Base>
   11734:	mov	r1, r0
   11738:	str	r0, [r4, #4]
   1173c:	ldr	r0, [r4, #8]
   11740:	b	115a8 <avl_remove_impl@@Base+0x40>
   11744:	mvn	r2, #0
   11748:	cmp	r3, r2
   1174c:	movlt	r3, r2
   11750:	add	r3, r3, #1
   11754:	str	r3, [r4, #12]
   11758:	mov	r3, r2
   1175c:	b	115d4 <avl_remove_impl@@Base+0x6c>
   11760:	cmp	r2, #0
   11764:	mvnne	r3, #0
   11768:	bne	11608 <avl_remove_impl@@Base+0xa0>
   1176c:	b	11618 <avl_remove_impl@@Base+0xb0>
   11770:	ldr	r0, [r6]
   11774:	bl	10dcc <strlen@plt>
   11778:	add	r1, r0, #1
   1177c:	mov	r0, r7
   11780:	bl	10d84 <realloc@plt>
   11784:	str	r0, [r4]
   11788:	ldr	r1, [r6]
   1178c:	bl	10d90 <strcpy@plt>
   11790:	ldmib	r6, {r1, r2, r3}
   11794:	ldr	r0, [r6]
   11798:	stmib	r4, {r1, r2, r3}
   1179c:	bl	10d54 <free@plt>
   117a0:	mov	r0, r6
   117a4:	bl	10d54 <free@plt>
   117a8:	ldr	r1, [r4, #4]
   117ac:	ldr	r0, [r4, #8]
   117b0:	b	115a8 <avl_remove_impl@@Base+0x40>
   117b4:	cmp	r2, #0
   117b8:	mvnne	r3, #0
   117bc:	bne	116ec <avl_remove_impl@@Base+0x184>
   117c0:	mov	r0, r4
   117c4:	pop	{r4, r5, r6, r7, r8, lr}
   117c8:	b	111c4 <roda_direita@@Base>
   117cc:	str	r0, [r4, #12]
   117d0:	b	116bc <avl_remove_impl@@Base+0x154>
   117d4:	ldr	r6, [r4, #8]
   117d8:	cmp	r6, #0
   117dc:	bne	11770 <avl_remove_impl@@Base+0x208>
   117e0:	mov	r0, r7
   117e4:	bl	10d54 <free@plt>
   117e8:	mov	r0, r4
   117ec:	bl	10d54 <free@plt>
   117f0:	b	116c0 <avl_remove_impl@@Base+0x158>

000117f4 <avl_apaga@@Base>:
   117f4:	push	{r4, lr}
   117f8:	subs	r4, r0, #0
   117fc:	popeq	{r4, pc}
   11800:	ldr	r0, [r4]
   11804:	cmp	r0, #0
   11808:	beq	11820 <avl_apaga@@Base+0x2c>
   1180c:	ldr	r1, [r0]
   11810:	bl	11568 <avl_remove_impl@@Base>
   11814:	cmp	r0, #0
   11818:	str	r0, [r4]
   1181c:	bne	1180c <avl_apaga@@Base+0x18>
   11820:	mov	r0, r4
   11824:	pop	{r4, lr}
   11828:	b	10d54 <free@plt>

0001182c <avl_remove@@Base>:
   1182c:	cmp	r1, #0
   11830:	cmpne	r0, #0
   11834:	push	{r4, r5, r6, lr}
   11838:	moveq	r5, #1
   1183c:	movne	r5, #0
   11840:	beq	1185c <avl_remove@@Base+0x30>
   11844:	mov	r4, r0
   11848:	ldr	r0, [r0]
   1184c:	bl	11568 <avl_remove_impl@@Base>
   11850:	str	r0, [r4]
   11854:	mov	r0, r5
   11858:	pop	{r4, r5, r6, pc}
   1185c:	mvn	r5, #0
   11860:	b	11854 <avl_remove@@Base+0x28>

00011864 <avl_preordem_impl@@Base>:
   11864:	push	{r4, r5, r6, lr}
   11868:	subs	r4, r0, #0
   1186c:	popeq	{r4, r5, r6, pc}
   11870:	ldr	r5, [pc, #36]	; 1189c <avl_preordem_impl@@Base+0x38>
   11874:	ldr	r2, [r4, #16]
   11878:	ldr	r1, [r4]
   1187c:	mov	r0, r5
   11880:	bl	10d3c <printf@plt>
   11884:	ldr	r0, [r4, #4]
   11888:	bl	11864 <avl_preordem_impl@@Base>
   1188c:	ldr	r4, [r4, #8]
   11890:	cmp	r4, #0
   11894:	bne	11874 <avl_preordem_impl@@Base+0x10>
   11898:	pop	{r4, r5, r6, pc}
   1189c:	andeq	r1, r1, r4, lsr #28

000118a0 <avl_imprime@@Base>:
   118a0:	cmp	r0, #0
   118a4:	bxeq	lr
   118a8:	push	{r4, lr}
   118ac:	ldr	r0, [r0]
   118b0:	bl	11864 <avl_preordem_impl@@Base>
   118b4:	mov	r0, #10
   118b8:	pop	{r4, lr}
   118bc:	b	10dd8 <putchar@plt>

000118c0 <bst_nova@@Base>:
   118c0:	push	{r4, lr}
   118c4:	mov	r0, #4
   118c8:	bl	10da8 <malloc@plt>
   118cc:	cmp	r0, #0
   118d0:	movne	r3, #0
   118d4:	strne	r3, [r0]
   118d8:	pop	{r4, pc}

000118dc <bst_min@@Base>:
   118dc:	cmp	r0, #0
   118e0:	bxeq	lr
   118e4:	ldr	r2, [r0]
   118e8:	b	118f0 <bst_min@@Base+0x14>
   118ec:	mov	r2, r3
   118f0:	ldr	r3, [r2, #4]
   118f4:	cmp	r3, #0
   118f8:	bne	118ec <bst_min@@Base+0x10>
   118fc:	ldr	r0, [r2]
   11900:	bx	lr

00011904 <bst_max@@Base>:
   11904:	cmp	r0, #0
   11908:	bxeq	lr
   1190c:	ldr	r2, [r0]
   11910:	b	11918 <bst_max@@Base+0x14>
   11914:	mov	r2, r3
   11918:	ldr	r3, [r2, #8]
   1191c:	cmp	r3, #0
   11920:	bne	11914 <bst_max@@Base+0x10>
   11924:	ldr	r0, [r2]
   11928:	bx	lr

0001192c <bst_novo_no@@Base>:
   1192c:	push	{r4, r5, r6, lr}
   11930:	mov	r5, r0
   11934:	mov	r0, #12
   11938:	bl	10da8 <malloc@plt>
   1193c:	mov	r4, r0
   11940:	mov	r0, r5
   11944:	bl	10dcc <strlen@plt>
   11948:	add	r6, r0, #1
   1194c:	mov	r0, r6
   11950:	bl	10da8 <malloc@plt>
   11954:	mov	r2, r6
   11958:	mov	r1, r5
   1195c:	str	r0, [r4]
   11960:	bl	10d6c <memcpy@plt>
   11964:	mov	r3, #0
   11968:	str	r3, [r4, #4]
   1196c:	str	r3, [r4, #8]
   11970:	mov	r0, r4
   11974:	pop	{r4, r5, r6, pc}

00011978 <bst_no_valormin@@Base>:
   11978:	b	11980 <bst_no_valormin@@Base+0x8>
   1197c:	mov	r0, r3
   11980:	ldr	r3, [r0, #4]
   11984:	cmp	r3, #0
   11988:	bne	1197c <bst_no_valormin@@Base+0x4>
   1198c:	bx	lr

00011990 <bst_no_valormax@@Base>:
   11990:	b	11998 <bst_no_valormax@@Base+0x8>
   11994:	mov	r0, r3
   11998:	ldr	r3, [r0, #8]
   1199c:	cmp	r3, #0
   119a0:	bne	11994 <bst_no_valormax@@Base+0x4>
   119a4:	bx	lr

000119a8 <bst_pesquisa_impl@@Base>:
   119a8:	push	{r4, r5, r6, lr}
   119ac:	subs	r4, r0, #0
   119b0:	beq	119e0 <bst_pesquisa_impl@@Base+0x38>
   119b4:	mov	r5, r1
   119b8:	ldr	r1, [r4]
   119bc:	mov	r0, r5
   119c0:	bl	10d30 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	ldrlt	r4, [r4, #4]
   119cc:	blt	119d8 <bst_pesquisa_impl@@Base+0x30>
   119d0:	beq	119e0 <bst_pesquisa_impl@@Base+0x38>
   119d4:	ldr	r4, [r4, #8]
   119d8:	cmp	r4, #0
   119dc:	bne	119b8 <bst_pesquisa_impl@@Base+0x10>
   119e0:	mov	r0, r4
   119e4:	pop	{r4, r5, r6, pc}

000119e8 <bst_pesquisa@@Base>:
   119e8:	cmp	r1, #0
   119ec:	cmpne	r0, #0
   119f0:	beq	119fc <bst_pesquisa@@Base+0x14>
   119f4:	ldr	r0, [r0]
   119f8:	b	119a8 <bst_pesquisa_impl@@Base>
   119fc:	mov	r0, #0
   11a00:	bx	lr

00011a04 <bst_insere_impl@@Base>:
   11a04:	push	{r4, r5, r6, lr}
   11a08:	subs	r4, r0, #0
   11a0c:	beq	11a58 <bst_insere_impl@@Base+0x54>
   11a10:	mov	r5, r1
   11a14:	mov	r0, r5
   11a18:	ldr	r1, [r4]
   11a1c:	bl	10d30 <strcmp@plt>
   11a20:	cmp	r0, #0
   11a24:	blt	11a44 <bst_insere_impl@@Base+0x40>
   11a28:	beq	11a3c <bst_insere_impl@@Base+0x38>
   11a2c:	mov	r1, r5
   11a30:	ldr	r0, [r4, #8]
   11a34:	bl	11a04 <bst_insere_impl@@Base>
   11a38:	str	r0, [r4, #8]
   11a3c:	mov	r0, r4
   11a40:	pop	{r4, r5, r6, pc}
   11a44:	mov	r1, r5
   11a48:	ldr	r0, [r4, #4]
   11a4c:	bl	11a04 <bst_insere_impl@@Base>
   11a50:	str	r0, [r4, #4]
   11a54:	b	11a3c <bst_insere_impl@@Base+0x38>
   11a58:	mov	r0, r1
   11a5c:	pop	{r4, r5, r6, lr}
   11a60:	b	1192c <bst_novo_no@@Base>

00011a64 <bst_insere@@Base>:
   11a64:	cmp	r1, #0
   11a68:	cmpne	r0, #0
   11a6c:	push	{r4, r5, r6, lr}
   11a70:	moveq	r5, #1
   11a74:	movne	r5, #0
   11a78:	beq	11a94 <bst_insere@@Base+0x30>
   11a7c:	mov	r4, r0
   11a80:	ldr	r0, [r0]
   11a84:	bl	11a04 <bst_insere_impl@@Base>
   11a88:	str	r0, [r4]
   11a8c:	mov	r0, r5
   11a90:	pop	{r4, r5, r6, pc}
   11a94:	mvn	r5, #0
   11a98:	b	11a8c <bst_insere@@Base+0x28>

00011a9c <bst_remove_impl@@Base>:
   11a9c:	push	{r4, r5, r6, r7, r8, lr}
   11aa0:	subs	r5, r0, #0
   11aa4:	beq	11ba8 <bst_remove_impl@@Base+0x10c>
   11aa8:	ldr	r6, [r5]
   11aac:	mov	r0, r1
   11ab0:	mov	r4, r1
   11ab4:	mov	r1, r6
   11ab8:	bl	10d30 <strcmp@plt>
   11abc:	cmp	r0, #0
   11ac0:	blt	11bb4 <bst_remove_impl@@Base+0x118>
   11ac4:	bne	11b30 <bst_remove_impl@@Base+0x94>
   11ac8:	ldr	r8, [r5, #4]
   11acc:	cmp	r8, #0
   11ad0:	beq	11b4c <bst_remove_impl@@Base+0xb0>
   11ad4:	ldr	r4, [r5, #8]
   11ad8:	cmp	r4, #0
   11adc:	bne	11ae8 <bst_remove_impl@@Base+0x4c>
   11ae0:	b	11b60 <bst_remove_impl@@Base+0xc4>
   11ae4:	mov	r4, r3
   11ae8:	ldr	r3, [r4, #4]
   11aec:	cmp	r3, #0
   11af0:	bne	11ae4 <bst_remove_impl@@Base+0x48>
   11af4:	ldr	r0, [r4]
   11af8:	bl	10dcc <strlen@plt>
   11afc:	mov	r7, r5
   11b00:	add	r1, r0, #1
   11b04:	mov	r0, r6
   11b08:	bl	10d84 <realloc@plt>
   11b0c:	str	r0, [r5]
   11b10:	ldr	r1, [r4]
   11b14:	bl	10d90 <strcpy@plt>
   11b18:	ldr	r1, [r4]
   11b1c:	ldr	r0, [r5, #8]
   11b20:	bl	11a9c <bst_remove_impl@@Base>
   11b24:	str	r0, [r5, #8]
   11b28:	mov	r0, r7
   11b2c:	pop	{r4, r5, r6, r7, r8, pc}
   11b30:	mov	r1, r4
   11b34:	ldr	r0, [r5, #8]
   11b38:	bl	11a9c <bst_remove_impl@@Base>
   11b3c:	mov	r7, r5
   11b40:	str	r0, [r5, #8]
   11b44:	mov	r0, r7
   11b48:	pop	{r4, r5, r6, r7, r8, pc}
   11b4c:	ldr	r7, [r5, #8]
   11b50:	cmp	r7, #0
   11b54:	moveq	r8, r5
   11b58:	beq	11b90 <bst_remove_impl@@Base+0xf4>
   11b5c:	mov	r8, r7
   11b60:	ldr	r0, [r8]
   11b64:	bl	10dcc <strlen@plt>
   11b68:	mov	r7, r5
   11b6c:	add	r1, r0, #1
   11b70:	mov	r0, r6
   11b74:	bl	10d84 <realloc@plt>
   11b78:	str	r0, [r5]
   11b7c:	ldr	r1, [r8]
   11b80:	bl	10d90 <strcpy@plt>
   11b84:	ldmib	r8, {r2, r3}
   11b88:	ldr	r6, [r8]
   11b8c:	stmib	r5, {r2, r3}
   11b90:	mov	r0, r6
   11b94:	bl	10d54 <free@plt>
   11b98:	mov	r0, r8
   11b9c:	bl	10d54 <free@plt>
   11ba0:	mov	r0, r7
   11ba4:	pop	{r4, r5, r6, r7, r8, pc}
   11ba8:	mov	r7, r5
   11bac:	mov	r0, r7
   11bb0:	pop	{r4, r5, r6, r7, r8, pc}
   11bb4:	mov	r1, r4
   11bb8:	ldr	r0, [r5, #4]
   11bbc:	bl	11a9c <bst_remove_impl@@Base>
   11bc0:	mov	r7, r5
   11bc4:	str	r0, [r5, #4]
   11bc8:	b	11b28 <bst_remove_impl@@Base+0x8c>

00011bcc <bst_apaga@@Base>:
   11bcc:	push	{r4, lr}
   11bd0:	mov	r4, r0
   11bd4:	ldr	r0, [r0]
   11bd8:	cmp	r0, #0
   11bdc:	beq	11bf4 <bst_apaga@@Base+0x28>
   11be0:	ldr	r1, [r0]
   11be4:	bl	11a9c <bst_remove_impl@@Base>
   11be8:	cmp	r0, #0
   11bec:	str	r0, [r4]
   11bf0:	bne	11be0 <bst_apaga@@Base+0x14>
   11bf4:	mov	r0, r4
   11bf8:	pop	{r4, lr}
   11bfc:	b	10d54 <free@plt>

00011c00 <bst_remove@@Base>:
   11c00:	cmp	r1, #0
   11c04:	cmpne	r0, #0
   11c08:	push	{r4, r5, r6, lr}
   11c0c:	moveq	r5, #1
   11c10:	movne	r5, #0
   11c14:	beq	11c30 <bst_remove@@Base+0x30>
   11c18:	mov	r4, r0
   11c1c:	ldr	r0, [r0]
   11c20:	bl	11a9c <bst_remove_impl@@Base>
   11c24:	str	r0, [r4]
   11c28:	mov	r0, r5
   11c2c:	pop	{r4, r5, r6, pc}
   11c30:	mvn	r5, #0
   11c34:	b	11c28 <bst_remove@@Base+0x28>

00011c38 <bst_altura@@Base>:
   11c38:	push	{r4, r5, r6, r7, r8, lr}
   11c3c:	subs	r4, r0, #0
   11c40:	beq	11ca0 <bst_altura@@Base+0x68>
   11c44:	mov	r5, #1
   11c48:	b	11c78 <bst_altura@@Base+0x40>
   11c4c:	mov	r0, r4
   11c50:	bl	11c38 <bst_altura@@Base>
   11c54:	mov	r7, r0
   11c58:	mov	r0, r6
   11c5c:	bl	11c38 <bst_altura@@Base>
   11c60:	mov	r3, r5
   11c64:	add	r5, r5, #1
   11c68:	cmp	r7, r0
   11c6c:	movle	r4, r6
   11c70:	cmp	r4, #0
   11c74:	beq	11c98 <bst_altura@@Base+0x60>
   11c78:	ldr	r6, [r4, #8]
   11c7c:	sub	r0, r5, #1
   11c80:	cmp	r6, #0
   11c84:	ldr	r4, [r4, #4]
   11c88:	bne	11c4c <bst_altura@@Base+0x14>
   11c8c:	cmp	r4, #0
   11c90:	bne	11c4c <bst_altura@@Base+0x14>
   11c94:	pop	{r4, r5, r6, r7, r8, pc}
   11c98:	sub	r0, r3, #1
   11c9c:	pop	{r4, r5, r6, r7, r8, pc}
   11ca0:	mvn	r0, #0
   11ca4:	pop	{r4, r5, r6, r7, r8, pc}

00011ca8 <bst_preordem_impl@@Base>:
   11ca8:	push	{r4, r5, r6, lr}
   11cac:	subs	r4, r0, #0
   11cb0:	popeq	{r4, r5, r6, pc}
   11cb4:	ldr	r5, [pc, #32]	; 11cdc <bst_preordem_impl@@Base+0x34>
   11cb8:	ldr	r1, [r4]
   11cbc:	mov	r0, r5
   11cc0:	bl	10d3c <printf@plt>
   11cc4:	ldr	r0, [r4, #4]
   11cc8:	bl	11ca8 <bst_preordem_impl@@Base>
   11ccc:	ldr	r4, [r4, #8]
   11cd0:	cmp	r4, #0
   11cd4:	bne	11cb8 <bst_preordem_impl@@Base+0x10>
   11cd8:	pop	{r4, r5, r6, pc}
   11cdc:	andeq	r1, r1, ip, lsr #28

00011ce0 <bst_imprime@@Base>:
   11ce0:	push	{r4, lr}
   11ce4:	subs	r4, r0, #0
   11ce8:	popeq	{r4, pc}
   11cec:	ldr	r0, [pc, #20]	; 11d08 <bst_imprime@@Base+0x28>
   11cf0:	bl	10d3c <printf@plt>
   11cf4:	ldr	r0, [r4]
   11cf8:	bl	11ca8 <bst_preordem_impl@@Base>
   11cfc:	mov	r0, #10
   11d00:	pop	{r4, lr}
   11d04:	b	10dd8 <putchar@plt>
   11d08:	andeq	r1, r1, r0, lsr lr

00011d0c <__libc_csu_init@@Base>:
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d10:	mov	r7, r0
   11d14:	ldr	r6, [pc, #72]	; 11d64 <__libc_csu_init@@Base+0x58>
   11d18:	ldr	r5, [pc, #72]	; 11d68 <__libc_csu_init@@Base+0x5c>
   11d1c:	add	r6, pc, r6
   11d20:	add	r5, pc, r5
   11d24:	sub	r6, r6, r5
   11d28:	mov	r8, r1
   11d2c:	mov	r9, r2
   11d30:	bl	10d10 <strcmp@plt-0x20>
   11d34:	asrs	r6, r6, #2
   11d38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d3c:	mov	r4, #0
   11d40:	add	r4, r4, #1
   11d44:	ldr	r3, [r5], #4
   11d48:	mov	r2, r9
   11d4c:	mov	r1, r8
   11d50:	mov	r0, r7
   11d54:	blx	r3
   11d58:	cmp	r6, r4
   11d5c:	bne	11d40 <__libc_csu_init@@Base+0x34>
   11d60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d64:	andeq	r0, r1, ip, ror #3
   11d68:	andeq	r0, r1, r4, ror #3

00011d6c <__libc_csu_fini@@Base>:
   11d6c:	bx	lr

Disassembly of section .fini:

00011d70 <.fini>:
   11d70:	push	{r3, lr}
   11d74:	pop	{r3, pc}
