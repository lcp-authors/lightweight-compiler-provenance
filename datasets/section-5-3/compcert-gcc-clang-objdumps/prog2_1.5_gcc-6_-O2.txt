
../compcert-repos/prog2/1.5:     file format elf32-littlearm


Disassembly of section .init:

000105e8 <.init>:
   105e8:	push	{r3, lr}
   105ec:	bl	10790 <_start@@Base+0x3c>
   105f0:	pop	{r3, pc}

Disassembly of section .plt:

000105f4 <strcmp@plt-0x14>:
   105f4:	push	{lr}		; (str lr, [sp, #-4]!)
   105f8:	ldr	lr, [pc, #4]	; 10604 <strcmp@plt-0x4>
   105fc:	add	lr, pc, lr
   10600:	ldr	pc, [lr, #8]!
   10604:	strdeq	r0, [r1], -ip

00010608 <strcmp@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2556]!	; 0x9fc

00010614 <fopen@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010620 <__libc_start_main@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2540]!	; 0x9ec

0001062c <__gmon_start__@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2532]!	; 0x9e4

00010638 <strlen@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2524]!	; 0x9dc

00010644 <fgetc@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010650 <fseek@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2508]!	; 0x9cc

0001065c <abort@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2500]!	; 0x9c4

Disassembly of section .text:

00010668 <main@@Base>:
   10668:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1066c:	mov	r5, #0
   10670:	ldr	r1, [pc, #204]	; 10744 <main@@Base+0xdc>
   10674:	ldr	r0, [pc, #204]	; 10748 <main@@Base+0xe0>
   10678:	bl	10614 <fopen@plt>
   1067c:	ldr	r9, [pc, #200]	; 1074c <main@@Base+0xe4>
   10680:	ldr	r7, [pc, #200]	; 10750 <main@@Base+0xe8>
   10684:	mov	sl, r5
   10688:	mov	r6, #1
   1068c:	mvn	r8, #0
   10690:	mov	r4, r0
   10694:	mov	r0, r4
   10698:	bl	10644 <fgetc@plt>
   1069c:	uxtb	r0, r0
   106a0:	cmp	r0, #10
   106a4:	beq	10694 <main@@Base+0x2c>
   106a8:	cmp	r0, #115	; 0x73
   106ac:	beq	106fc <main@@Base+0x94>
   106b0:	cmp	r0, #112	; 0x70
   106b4:	beq	1070c <main@@Base+0xa4>
   106b8:	cmp	r0, #47	; 0x2f
   106bc:	beq	1071c <main@@Base+0xb4>
   106c0:	cmp	r0, #42	; 0x2a
   106c4:	bne	10694 <main@@Base+0x2c>
   106c8:	mov	r0, r4
   106cc:	bl	10644 <fgetc@plt>
   106d0:	cmp	r0, #47	; 0x2f
   106d4:	movne	r0, #0
   106d8:	andeq	r0, r5, #1
   106dc:	cmp	r0, #0
   106e0:	movne	r5, sl
   106e4:	bne	10694 <main@@Base+0x2c>
   106e8:	mov	r2, r6
   106ec:	mov	r1, r8
   106f0:	mov	r0, r4
   106f4:	bl	10650 <fseek@plt>
   106f8:	b	10694 <main@@Base+0x2c>
   106fc:	mov	r1, r4
   10700:	mov	r0, r7
   10704:	bl	1087c <IsIOFunction@@Base>
   10708:	b	10694 <main@@Base+0x2c>
   1070c:	mov	r1, r4
   10710:	mov	r0, r9
   10714:	bl	1087c <IsIOFunction@@Base>
   10718:	b	10694 <main@@Base+0x2c>
   1071c:	mov	r0, r4
   10720:	bl	10644 <fgetc@plt>
   10724:	eor	r3, r5, #1
   10728:	cmp	r0, #42	; 0x2a
   1072c:	movne	r3, #0
   10730:	andeq	r3, r3, #1
   10734:	cmp	r3, #0
   10738:	movne	r5, r6
   1073c:	bne	10694 <main@@Base+0x2c>
   10740:	b	106e8 <main@@Base+0x80>
   10744:	andeq	r0, r1, ip, lsl #19
   10748:	muleq	r1, r0, r9
   1074c:	andeq	r0, r1, ip, lsr #19
   10750:	andeq	r0, r1, r4, lsr #19

00010754 <_start@@Base>:
   10754:	mov	fp, #0
   10758:	mov	lr, #0
   1075c:	pop	{r1}		; (ldr r1, [sp], #4)
   10760:	mov	r2, sp
   10764:	push	{r2}		; (str r2, [sp, #-4]!)
   10768:	push	{r0}		; (str r0, [sp, #-4]!)
   1076c:	ldr	ip, [pc, #16]	; 10784 <_start@@Base+0x30>
   10770:	push	{ip}		; (str ip, [sp, #-4]!)
   10774:	ldr	r0, [pc, #12]	; 10788 <_start@@Base+0x34>
   10778:	ldr	r3, [pc, #12]	; 1078c <_start@@Base+0x38>
   1077c:	bl	10620 <__libc_start_main@plt>
   10780:	bl	1065c <abort@plt>
   10784:	andeq	r0, r1, ip, ror r9
   10788:	andeq	r0, r1, r8, ror #12
   1078c:	andeq	r0, r1, ip, lsl r9
   10790:	ldr	r3, [pc, #20]	; 107ac <_start@@Base+0x58>
   10794:	ldr	r2, [pc, #20]	; 107b0 <_start@@Base+0x5c>
   10798:	add	r3, pc, r3
   1079c:	ldr	r2, [r3, r2]
   107a0:	cmp	r2, #0
   107a4:	bxeq	lr
   107a8:	b	1062c <__gmon_start__@plt>
   107ac:	andeq	r0, r1, r0, ror #16
   107b0:	andeq	r0, r0, ip, lsr #32
   107b4:	ldr	r3, [pc, #28]	; 107d8 <_start@@Base+0x84>
   107b8:	ldr	r0, [pc, #28]	; 107dc <_start@@Base+0x88>
   107bc:	sub	r3, r3, r0
   107c0:	cmp	r3, #6
   107c4:	bxls	lr
   107c8:	ldr	r3, [pc, #16]	; 107e0 <_start@@Base+0x8c>
   107cc:	cmp	r3, #0
   107d0:	bxeq	lr
   107d4:	bx	r3
   107d8:	andeq	r1, r2, fp, lsr r0
   107dc:	andeq	r1, r2, r8, lsr r0
   107e0:	andeq	r0, r0, r0
   107e4:	ldr	r1, [pc, #36]	; 10810 <_start@@Base+0xbc>
   107e8:	ldr	r0, [pc, #36]	; 10814 <_start@@Base+0xc0>
   107ec:	sub	r1, r1, r0
   107f0:	asr	r1, r1, #2
   107f4:	add	r1, r1, r1, lsr #31
   107f8:	asrs	r1, r1, #1
   107fc:	bxeq	lr
   10800:	ldr	r3, [pc, #16]	; 10818 <_start@@Base+0xc4>
   10804:	cmp	r3, #0
   10808:	bxeq	lr
   1080c:	bx	r3
   10810:	andeq	r1, r2, r8, lsr r0
   10814:	andeq	r1, r2, r8, lsr r0
   10818:	andeq	r0, r0, r0
   1081c:	push	{r4, lr}
   10820:	ldr	r4, [pc, #24]	; 10840 <_start@@Base+0xec>
   10824:	ldrb	r3, [r4]
   10828:	cmp	r3, #0
   1082c:	popne	{r4, pc}
   10830:	bl	107b4 <_start@@Base+0x60>
   10834:	mov	r3, #1
   10838:	strb	r3, [r4]
   1083c:	pop	{r4, pc}
   10840:	andeq	r1, r2, r8, lsr r0
   10844:	ldr	r0, [pc, #40]	; 10874 <_start@@Base+0x120>
   10848:	ldr	r3, [r0]
   1084c:	cmp	r3, #0
   10850:	bne	10858 <_start@@Base+0x104>
   10854:	b	107e4 <_start@@Base+0x90>
   10858:	ldr	r3, [pc, #24]	; 10878 <_start@@Base+0x124>
   1085c:	cmp	r3, #0
   10860:	beq	10854 <_start@@Base+0x100>
   10864:	push	{r4, lr}
   10868:	blx	r3
   1086c:	pop	{r4, lr}
   10870:	b	107e4 <_start@@Base+0x90>
   10874:	andeq	r0, r2, r4, lsl pc
   10878:	andeq	r0, r0, r0

0001087c <IsIOFunction@@Base>:
   1087c:	push	{r4, r5, r6, r7, r8, r9, lr}
   10880:	mov	r2, #1
   10884:	sub	sp, sp, #12
   10888:	mov	r8, r0
   1088c:	mov	r5, r1
   10890:	mov	r0, r1
   10894:	mvn	r1, #0
   10898:	bl	10650 <fseek@plt>
   1089c:	mov	r0, r8
   108a0:	bl	10638 <strlen@plt>
   108a4:	mov	r3, #0
   108a8:	strb	r3, [sp, #6]
   108ac:	str	r3, [sp]
   108b0:	strh	r3, [sp, #4]
   108b4:	mov	r9, sp
   108b8:	subs	r7, r0, #0
   108bc:	ble	108e0 <IsIOFunction@@Base+0x64>
   108c0:	mov	r4, sp
   108c4:	add	r6, sp, r7
   108c8:	mov	r0, r5
   108cc:	bl	10644 <fgetc@plt>
   108d0:	strb	r0, [r4], #1
   108d4:	cmp	r4, r6
   108d8:	bne	108c8 <IsIOFunction@@Base+0x4c>
   108dc:	mov	r3, r7
   108e0:	add	r2, sp, #8
   108e4:	add	r3, r2, r3
   108e8:	mov	ip, #0
   108ec:	rsb	r1, r7, #1
   108f0:	mov	r2, #1
   108f4:	mov	r0, r5
   108f8:	strb	ip, [r3, #-8]
   108fc:	bl	10650 <fseek@plt>
   10900:	mov	r1, r9
   10904:	mov	r0, r8
   10908:	bl	10608 <strcmp@plt>
   1090c:	clz	r0, r0
   10910:	lsr	r0, r0, #5
   10914:	add	sp, sp, #12
   10918:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001091c <__libc_csu_init@@Base>:
   1091c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10920:	mov	r7, r0
   10924:	ldr	r6, [pc, #72]	; 10974 <__libc_csu_init@@Base+0x58>
   10928:	ldr	r5, [pc, #72]	; 10978 <__libc_csu_init@@Base+0x5c>
   1092c:	add	r6, pc, r6
   10930:	add	r5, pc, r5
   10934:	sub	r6, r6, r5
   10938:	mov	r8, r1
   1093c:	mov	r9, r2
   10940:	bl	105e8 <strcmp@plt-0x20>
   10944:	asrs	r6, r6, #2
   10948:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1094c:	mov	r4, #0
   10950:	add	r4, r4, #1
   10954:	ldr	r3, [r5], #4
   10958:	mov	r2, r9
   1095c:	mov	r1, r8
   10960:	mov	r0, r7
   10964:	blx	r3
   10968:	cmp	r6, r4
   1096c:	bne	10950 <__libc_csu_init@@Base+0x34>
   10970:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10974:	ldrdeq	r0, [r1], -ip
   10978:	ldrdeq	r0, [r1], -r4

0001097c <__libc_csu_fini@@Base>:
   1097c:	bx	lr

Disassembly of section .fini:

00010980 <.fini>:
   10980:	push	{r3, lr}
   10984:	pop	{r3, pc}
