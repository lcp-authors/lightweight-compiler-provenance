
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-definition-parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_read_product_definition>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	ldr	r0, [r0, #24]
      18:	cmp	r0, #0
      1c:	bne	24 <coda_read_product_definition+0x24>
      20:	b	44 <coda_read_product_definition+0x44>
      24:	movw	r0, #0
      28:	movt	r0, #0
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	movw	r2, #4269	; 0x10ad
      38:	movw	r3, #0
      3c:	movt	r3, #0
      40:	bl	0 <__assert_fail>
      44:	ldr	r0, [fp, #-8]
      48:	ldr	r0, [r0, #44]	; 0x2c
      4c:	ldr	r0, [r0, #20]
      50:	str	r0, [sp, #12]
      54:	ldr	r0, [sp, #12]
      58:	ldr	r0, [r0, #8]
      5c:	movw	r1, #0
      60:	movt	r1, #0
      64:	bl	0 <coda_za_open>
      68:	str	r0, [sp, #8]
      6c:	ldr	r0, [sp, #8]
      70:	movw	r1, #0
      74:	cmp	r0, r1
      78:	bne	88 <coda_read_product_definition+0x88>
      7c:	mvn	r0, #0
      80:	str	r0, [fp, #-4]
      84:	b	e0 <coda_read_product_definition+0xe0>
      88:	ldr	r0, [sp, #8]
      8c:	ldr	r1, [fp, #-8]
      90:	ldr	r2, [r1, #8]
      94:	ldr	r3, [sp, #12]
      98:	ldr	r1, [fp, #-8]
      9c:	movw	ip, #2
      a0:	str	r1, [sp, #4]
      a4:	mov	r1, ip
      a8:	ldr	ip, [sp, #4]
      ac:	str	ip, [sp]
      b0:	bl	148 <parse_entry>
      b4:	cmp	r0, #0
      b8:	beq	d0 <coda_read_product_definition+0xd0>
      bc:	ldr	r0, [sp, #8]
      c0:	bl	0 <coda_za_close>
      c4:	mvn	r0, #0
      c8:	str	r0, [fp, #-4]
      cc:	b	e0 <coda_read_product_definition+0xe0>
      d0:	ldr	r0, [sp, #8]
      d4:	bl	0 <coda_za_close>
      d8:	movw	r0, #0
      dc:	str	r0, [fp, #-4]
      e0:	ldr	r0, [fp, #-4]
      e4:	mov	sp, fp
      e8:	pop	{fp, pc}

000000ec <handle_ziparchive_error>:
      ec:	sub	sp, sp, #12
      f0:	push	{fp, lr}
      f4:	mov	fp, sp
      f8:	sub	sp, sp, #12
      fc:	str	r3, [fp, #16]
     100:	str	r2, [fp, #12]
     104:	str	r1, [fp, #8]
     108:	str	r0, [fp, #-4]
     10c:	movw	r1, #0
     110:	movt	r1, #0
     114:	movw	r0, #65136	; 0xfe70
     118:	movt	r0, #65535	; 0xffff
     11c:	bl	0 <coda_set_error>
     120:	add	r0, fp, #8
     124:	str	r0, [sp, #4]
     128:	ldr	r0, [fp, #-4]
     12c:	ldr	r1, [sp, #4]
     130:	bl	0 <coda_add_error_message_vargs>
     134:	add	r0, sp, #4
     138:	mov	sp, fp
     13c:	pop	{fp, lr}
     140:	add	sp, sp, #12
     144:	bx	lr

00000148 <parse_entry>:
     148:	push	{fp, lr}
     14c:	mov	fp, sp
     150:	sub	sp, sp, #176	; 0xb0
     154:	ldr	ip, [fp, #8]
     158:	str	r0, [fp, #-8]
     15c:	str	r1, [fp, #-12]
     160:	str	r2, [fp, #-16]
     164:	str	r3, [fp, #-20]	; 0xffffffec
     168:	mov	r0, #0
     16c:	str	r0, [fp, #-76]	; 0xffffffb4
     170:	ldr	r0, [fp, #-12]
     174:	cmp	r0, #0
     178:	str	r0, [sp, #80]	; 0x50
     17c:	beq	1a4 <parse_entry+0x5c>
     180:	b	184 <parse_entry+0x3c>
     184:	ldr	r0, [sp, #80]	; 0x50
     188:	cmp	r0, #1
     18c:	beq	1e4 <parse_entry+0x9c>
     190:	b	194 <parse_entry+0x4c>
     194:	ldr	r0, [sp, #80]	; 0x50
     198:	cmp	r0, #2
     19c:	beq	290 <parse_entry+0x148>
     1a0:	b	338 <parse_entry+0x1f0>
     1a4:	movw	r0, #0
     1a8:	movt	r0, #0
     1ac:	bl	0 <strdup>
     1b0:	str	r0, [fp, #-76]	; 0xffffffb4
     1b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
     1b8:	movw	r1, #0
     1bc:	cmp	r0, r1
     1c0:	bne	1e0 <parse_entry+0x98>
     1c4:	mvn	r0, #0
     1c8:	movw	r1, #0
     1cc:	movt	r1, #0
     1d0:	movw	r2, #0
     1d4:	movt	r2, #0
     1d8:	movw	r3, #4097	; 0x1001
     1dc:	bl	0 <coda_set_error>
     1e0:	b	338 <parse_entry+0x1f0>
     1e4:	ldr	r0, [fp, #-16]
     1e8:	movw	r1, #0
     1ec:	cmp	r0, r1
     1f0:	beq	1f8 <parse_entry+0xb0>
     1f4:	b	218 <parse_entry+0xd0>
     1f8:	movw	r0, #0
     1fc:	movt	r0, #0
     200:	movw	r1, #0
     204:	movt	r1, #0
     208:	movw	r2, #4101	; 0x1005
     20c:	movw	r3, #0
     210:	movt	r3, #0
     214:	bl	0 <__assert_fail>
     218:	ldr	r0, [fp, #-16]
     21c:	bl	0 <strlen>
     220:	add	r0, r0, #6
     224:	add	r0, r0, #4
     228:	add	r0, r0, #1
     22c:	bl	0 <malloc>
     230:	str	r0, [fp, #-76]	; 0xffffffb4
     234:	ldr	r0, [fp, #-76]	; 0xffffffb4
     238:	movw	r1, #0
     23c:	cmp	r0, r1
     240:	bne	278 <parse_entry+0x130>
     244:	ldr	r0, [fp, #-16]
     248:	bl	0 <strlen>
     24c:	add	r0, r0, #6
     250:	add	r0, r0, #4
     254:	add	r2, r0, #1
     258:	mvn	r0, #0
     25c:	movw	r1, #0
     260:	movt	r1, #0
     264:	movw	r3, #0
     268:	movt	r3, #0
     26c:	movw	ip, #4106	; 0x100a
     270:	str	ip, [sp]
     274:	bl	0 <coda_set_error>
     278:	ldr	r0, [fp, #-76]	; 0xffffffb4
     27c:	ldr	r2, [fp, #-16]
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	bl	0 <sprintf>
     28c:	b	338 <parse_entry+0x1f0>
     290:	ldr	r0, [fp, #-16]
     294:	movw	r1, #0
     298:	cmp	r0, r1
     29c:	beq	2a4 <parse_entry+0x15c>
     2a0:	b	2c4 <parse_entry+0x17c>
     2a4:	movw	r0, #0
     2a8:	movt	r0, #0
     2ac:	movw	r1, #0
     2b0:	movt	r1, #0
     2b4:	movw	r2, #4111	; 0x100f
     2b8:	movw	r3, #0
     2bc:	movt	r3, #0
     2c0:	bl	0 <__assert_fail>
     2c4:	ldr	r0, [fp, #-16]
     2c8:	bl	0 <strlen>
     2cc:	add	r0, r0, #9
     2d0:	add	r0, r0, #4
     2d4:	add	r0, r0, #1
     2d8:	bl	0 <malloc>
     2dc:	str	r0, [fp, #-76]	; 0xffffffb4
     2e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
     2e4:	movw	r1, #0
     2e8:	cmp	r0, r1
     2ec:	bne	324 <parse_entry+0x1dc>
     2f0:	ldr	r0, [fp, #-16]
     2f4:	bl	0 <strlen>
     2f8:	add	r0, r0, #9
     2fc:	add	r0, r0, #4
     300:	add	r2, r0, #1
     304:	mvn	r0, #0
     308:	movw	r1, #0
     30c:	movt	r1, #0
     310:	movw	r3, #0
     314:	movt	r3, #0
     318:	movw	ip, #4116	; 0x1014
     31c:	str	ip, [sp]
     320:	bl	0 <coda_set_error>
     324:	ldr	r0, [fp, #-76]	; 0xffffffb4
     328:	ldr	r2, [fp, #-16]
     32c:	movw	r1, #0
     330:	movt	r1, #0
     334:	bl	0 <sprintf>
     338:	ldr	r0, [fp, #-8]
     33c:	ldr	r1, [fp, #-76]	; 0xffffffb4
     340:	bl	0 <coda_za_get_entry_by_name>
     344:	str	r0, [fp, #-80]	; 0xffffffb0
     348:	ldr	r0, [fp, #-80]	; 0xffffffb0
     34c:	movw	r1, #0
     350:	cmp	r0, r1
     354:	bne	41c <parse_entry+0x2d4>
     358:	ldr	r0, [fp, #-12]
     35c:	cmp	r0, #0
     360:	str	r0, [sp, #76]	; 0x4c
     364:	beq	38c <parse_entry+0x244>
     368:	b	36c <parse_entry+0x224>
     36c:	ldr	r0, [sp, #76]	; 0x4c
     370:	cmp	r0, #1
     374:	beq	3b4 <parse_entry+0x26c>
     378:	b	37c <parse_entry+0x234>
     37c:	ldr	r0, [sp, #76]	; 0x4c
     380:	cmp	r0, #2
     384:	beq	3e0 <parse_entry+0x298>
     388:	b	408 <parse_entry+0x2c0>
     38c:	ldr	r0, [fp, #-8]
     390:	bl	0 <coda_za_get_filename>
     394:	ldr	r1, [pc, #1300]	; 8b0 <parse_entry+0x768>
     398:	str	r0, [sp, #72]	; 0x48
     39c:	mov	r0, r1
     3a0:	movw	r1, #0
     3a4:	movt	r1, #0
     3a8:	ldr	r2, [sp, #72]	; 0x48
     3ac:	bl	0 <coda_set_error>
     3b0:	b	408 <parse_entry+0x2c0>
     3b4:	ldr	r0, [fp, #-8]
     3b8:	bl	0 <coda_za_get_filename>
     3bc:	ldr	r1, [pc, #1260]	; 8b0 <parse_entry+0x768>
     3c0:	ldr	r3, [fp, #-16]
     3c4:	str	r0, [sp, #68]	; 0x44
     3c8:	mov	r0, r1
     3cc:	movw	r1, #0
     3d0:	movt	r1, #0
     3d4:	ldr	r2, [sp, #68]	; 0x44
     3d8:	bl	0 <coda_set_error>
     3dc:	b	408 <parse_entry+0x2c0>
     3e0:	ldr	r0, [fp, #-8]
     3e4:	bl	0 <coda_za_get_filename>
     3e8:	ldr	r1, [pc, #1216]	; 8b0 <parse_entry+0x768>
     3ec:	ldr	r3, [fp, #-16]
     3f0:	str	r0, [sp, #64]	; 0x40
     3f4:	mov	r0, r1
     3f8:	movw	r1, #0
     3fc:	movt	r1, #0
     400:	ldr	r2, [sp, #64]	; 0x40
     404:	bl	0 <coda_set_error>
     408:	ldr	r0, [fp, #-76]	; 0xffffffb4
     40c:	bl	0 <free>
     410:	mvn	r0, #0
     414:	str	r0, [fp, #-4]
     418:	b	898 <parse_entry+0x750>
     41c:	ldr	r0, [fp, #-76]	; 0xffffffb4
     420:	bl	0 <free>
     424:	sub	r0, fp, #72	; 0x48
     428:	bl	d24 <parser_info_init>
     42c:	ldr	r0, [fp, #-8]
     430:	str	r0, [fp, #-56]	; 0xffffffc8
     434:	ldr	r0, [fp, #-16]
     438:	str	r0, [fp, #-52]	; 0xffffffcc
     43c:	ldr	r0, [fp, #-20]	; 0xffffffec
     440:	str	r0, [fp, #-48]	; 0xffffffd0
     444:	ldr	r0, [fp, #8]
     448:	str	r0, [fp, #-44]	; 0xffffffd4
     44c:	ldr	r0, [fp, #-80]	; 0xffffffb0
     450:	bl	0 <coda_za_get_entry_size>
     454:	str	r0, [fp, #-84]	; 0xffffffac
     458:	ldr	r0, [fp, #-84]	; 0xffffffac
     45c:	bl	0 <malloc>
     460:	str	r0, [fp, #-60]	; 0xffffffc4
     464:	ldr	r0, [fp, #-60]	; 0xffffffc4
     468:	movw	r1, #0
     46c:	cmp	r0, r1
     470:	bne	4ac <parse_entry+0x364>
     474:	ldr	r2, [fp, #-84]	; 0xffffffac
     478:	mvn	r0, #0
     47c:	movw	r1, #0
     480:	movt	r1, #0
     484:	movw	r3, #0
     488:	movt	r3, #0
     48c:	movw	ip, #4156	; 0x103c
     490:	str	ip, [sp]
     494:	bl	0 <coda_set_error>
     498:	sub	r0, fp, #72	; 0x48
     49c:	bl	d9c <parser_info_delete>
     4a0:	mvn	r0, #0
     4a4:	str	r0, [fp, #-4]
     4a8:	b	898 <parse_entry+0x750>
     4ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
     4b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
     4b4:	bl	0 <coda_za_read_entry>
     4b8:	cmp	r0, #0
     4bc:	beq	4d4 <parse_entry+0x38c>
     4c0:	sub	r0, fp, #72	; 0x48
     4c4:	bl	d9c <parser_info_delete>
     4c8:	mvn	r0, #0
     4cc:	str	r0, [fp, #-4]
     4d0:	b	898 <parse_entry+0x750>
     4d4:	movw	r0, #1
     4d8:	bl	0 <coda_hashtable_new>
     4dc:	str	r0, [fp, #-64]	; 0xffffffc0
     4e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
     4e4:	movw	r1, #0
     4e8:	cmp	r0, r1
     4ec:	bne	520 <parse_entry+0x3d8>
     4f0:	mvn	r0, #0
     4f4:	movw	r1, #0
     4f8:	movt	r1, #0
     4fc:	movw	r2, #0
     500:	movt	r2, #0
     504:	movw	r3, #4170	; 0x104a
     508:	bl	0 <coda_set_error>
     50c:	sub	r0, fp, #72	; 0x48
     510:	bl	d9c <parser_info_delete>
     514:	mvn	r0, #0
     518:	str	r0, [fp, #-4]
     51c:	b	898 <parse_entry+0x750>
     520:	movw	r0, #0
     524:	str	r0, [sp, #84]	; 0x54
     528:	ldr	r0, [sp, #84]	; 0x54
     52c:	cmp	r0, #43	; 0x2b
     530:	bge	58c <parse_entry+0x444>
     534:	ldr	r0, [fp, #-64]	; 0xffffffc0
     538:	ldr	r1, [sp, #84]	; 0x54
     53c:	movw	r2, #0
     540:	movt	r2, #0
     544:	add	r1, r2, r1, lsl #2
     548:	ldr	r1, [r1]
     54c:	bl	0 <coda_hashtable_add_name>
     550:	cmp	r0, #0
     554:	beq	578 <parse_entry+0x430>
     558:	movw	r0, #0
     55c:	movt	r0, #0
     560:	movw	r1, #0
     564:	movt	r1, #0
     568:	movw	r2, #4178	; 0x1052
     56c:	movw	r3, #0
     570:	movt	r3, #0
     574:	bl	0 <__assert_fail>
     578:	b	57c <parse_entry+0x434>
     57c:	ldr	r0, [sp, #84]	; 0x54
     580:	add	r0, r0, #1
     584:	str	r0, [sp, #84]	; 0x54
     588:	b	528 <parse_entry+0x3e0>
     58c:	movw	r0, #0
     590:	movw	r1, #32
     594:	and	r1, r1, #255	; 0xff
     598:	bl	0 <coda_XML_ParserCreateNS>
     59c:	str	r0, [fp, #-68]	; 0xffffffbc
     5a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5a4:	movw	r1, #0
     5a8:	cmp	r0, r1
     5ac:	bne	5d4 <parse_entry+0x48c>
     5b0:	mvn	r0, #13
     5b4:	movw	r1, #0
     5b8:	movt	r1, #0
     5bc:	bl	0 <coda_set_error>
     5c0:	sub	r0, fp, #72	; 0x48
     5c4:	bl	d9c <parser_info_delete>
     5c8:	mvn	r0, #0
     5cc:	str	r0, [fp, #-4]
     5d0:	b	898 <parse_entry+0x750>
     5d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5d8:	sub	r1, fp, #72	; 0x48
     5dc:	str	r1, [sp, #60]	; 0x3c
     5e0:	bl	0 <coda_XML_SetUserData>
     5e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
     5e8:	movw	r1, #0
     5ec:	movt	r1, #0
     5f0:	movw	r2, #0
     5f4:	movt	r2, #0
     5f8:	bl	0 <coda_XML_SetElementHandler>
     5fc:	mvn	r1, #0
     600:	mov	r0, #0
     604:	ldr	r2, [sp, #60]	; 0x3c
     608:	str	r0, [sp, #56]	; 0x38
     60c:	mov	r0, r2
     610:	ldr	r2, [sp, #56]	; 0x38
     614:	bl	1150 <push_node>
     618:	ldr	r1, [fp, #-72]	; 0xffffffb8
     61c:	ldr	r2, [sp, #56]	; 0x38
     620:	str	r2, [r1, #48]	; 0x30
     624:	ldr	r1, [fp, #-12]
     628:	cmp	r1, #0
     62c:	str	r1, [sp, #52]	; 0x34
     630:	beq	658 <parse_entry+0x510>
     634:	b	638 <parse_entry+0x4f0>
     638:	ldr	r0, [sp, #52]	; 0x34
     63c:	cmp	r0, #1
     640:	beq	678 <parse_entry+0x530>
     644:	b	648 <parse_entry+0x500>
     648:	ldr	r0, [sp, #52]	; 0x34
     64c:	cmp	r0, #2
     650:	beq	68c <parse_entry+0x544>
     654:	b	6a4 <parse_entry+0x55c>
     658:	ldr	r0, [fp, #-72]	; 0xffffffb8
     65c:	movw	r1, #30
     660:	movw	r2, #0
     664:	movt	r2, #0
     668:	movw	r3, #0
     66c:	movt	r3, #0
     670:	bl	1344 <register_sub_element>
     674:	b	6a4 <parse_entry+0x55c>
     678:	ldr	r0, [fp, #-72]	; 0xffffffb8
     67c:	movw	r1, #0
     680:	movt	r1, #0
     684:	bl	1684 <register_type_elements>
     688:	b	6a4 <parse_entry+0x55c>
     68c:	ldr	r0, [fp, #-72]	; 0xffffffb8
     690:	movw	r1, #31
     694:	movw	r2, #0
     698:	movt	r2, #0
     69c:	movw	r3, #0
     6a0:	bl	1344 <register_sub_element>
     6a4:	ldr	r0, [pc, #504]	; 8a4 <parse_entry+0x75c>
     6a8:	ldr	r0, [pc, r0]
     6ac:	str	r0, [sp, #48]	; 0x30
     6b0:	bl	0 <__aeabi_read_tp>
     6b4:	mov	r1, #0
     6b8:	ldr	r2, [sp, #48]	; 0x30
     6bc:	str	r1, [r0, r2]
     6c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
     6c4:	ldr	r1, [fp, #-60]	; 0xffffffc4
     6c8:	ldr	r2, [fp, #-84]	; 0xffffffac
     6cc:	movw	r3, #1
     6d0:	bl	0 <coda_XML_Parse>
     6d4:	str	r0, [sp, #88]	; 0x58
     6d8:	ldr	r0, [sp, #88]	; 0x58
     6dc:	cmp	r0, #0
     6e0:	beq	704 <parse_entry+0x5bc>
     6e4:	ldr	r0, [pc, #444]	; 8a8 <parse_entry+0x760>
     6e8:	ldr	r0, [pc, r0]
     6ec:	str	r0, [sp, #44]	; 0x2c
     6f0:	bl	0 <__aeabi_read_tp>
     6f4:	ldr	r1, [sp, #44]	; 0x2c
     6f8:	ldr	r0, [r0, r1]
     6fc:	cmp	r0, #0
     700:	beq	888 <parse_entry+0x740>
     704:	ldr	r0, [fp, #-32]	; 0xffffffe0
     708:	cmp	r0, #0
     70c:	bne	888 <parse_entry+0x740>
     710:	ldr	r0, [pc, #404]	; 8ac <parse_entry+0x764>
     714:	ldr	r0, [pc, r0]
     718:	str	r0, [sp, #40]	; 0x28
     71c:	bl	0 <__aeabi_read_tp>
     720:	ldr	r1, [sp, #40]	; 0x28
     724:	ldr	r0, [r0, r1]
     728:	cmp	r0, #0
     72c:	bne	758 <parse_entry+0x610>
     730:	ldr	r0, [fp, #-68]	; 0xffffffbc
     734:	bl	0 <coda_XML_GetErrorCode>
     738:	bl	0 <coda_XML_ErrorString>
     73c:	ldr	r1, [pc, #364]	; 8b0 <parse_entry+0x768>
     740:	str	r0, [sp, #36]	; 0x24
     744:	mov	r0, r1
     748:	movw	r1, #0
     74c:	movt	r1, #0
     750:	ldr	r2, [sp, #36]	; 0x24
     754:	bl	0 <coda_set_error>
     758:	ldr	r0, [pc, #340]	; 8b4 <parse_entry+0x76c>
     75c:	ldr	r0, [pc, r0]
     760:	str	r0, [sp, #32]
     764:	bl	0 <__aeabi_read_tp>
     768:	ldr	r1, [sp, #32]
     76c:	ldr	r0, [r0, r1]
     770:	cmn	r0, #400	; 0x190
     774:	beq	79c <parse_entry+0x654>
     778:	ldr	r0, [pc, #312]	; 8b8 <parse_entry+0x770>
     77c:	ldr	r0, [pc, r0]
     780:	str	r0, [sp, #28]
     784:	bl	0 <__aeabi_read_tp>
     788:	ldr	r1, [sp, #28]
     78c:	ldr	r0, [r0, r1]
     790:	mvn	r1, #400	; 0x190
     794:	cmp	r0, r1
     798:	bne	874 <parse_entry+0x72c>
     79c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     7a0:	cmp	r0, #0
     7a4:	beq	874 <parse_entry+0x72c>
     7a8:	ldr	r0, [fp, #-8]
     7ac:	bl	0 <coda_za_get_filename>
     7b0:	movw	r1, #0
     7b4:	movt	r1, #0
     7b8:	str	r0, [sp, #24]
     7bc:	mov	r0, r1
     7c0:	ldr	r1, [sp, #24]
     7c4:	bl	0 <coda_add_error_message>
     7c8:	ldr	r0, [fp, #-12]
     7cc:	cmp	r0, #0
     7d0:	str	r0, [sp, #20]
     7d4:	beq	7fc <parse_entry+0x6b4>
     7d8:	b	7dc <parse_entry+0x694>
     7dc:	ldr	r0, [sp, #20]
     7e0:	cmp	r0, #1
     7e4:	beq	810 <parse_entry+0x6c8>
     7e8:	b	7ec <parse_entry+0x6a4>
     7ec:	ldr	r0, [sp, #20]
     7f0:	cmp	r0, #2
     7f4:	beq	824 <parse_entry+0x6dc>
     7f8:	b	834 <parse_entry+0x6ec>
     7fc:	movw	r0, #0
     800:	movt	r0, #0
     804:	movw	r1, #0
     808:	bl	0 <coda_add_error_message>
     80c:	b	834 <parse_entry+0x6ec>
     810:	ldr	r1, [fp, #-16]
     814:	movw	r0, #0
     818:	movt	r0, #0
     81c:	bl	0 <coda_add_error_message>
     820:	b	834 <parse_entry+0x6ec>
     824:	ldr	r1, [fp, #-16]
     828:	movw	r0, #0
     82c:	movt	r0, #0
     830:	bl	0 <coda_add_error_message>
     834:	ldr	r0, [fp, #-68]	; 0xffffffbc
     838:	bl	0 <coda_XML_GetCurrentLineNumber>
     83c:	ldr	r2, [fp, #-68]	; 0xffffffbc
     840:	str	r0, [sp, #16]
     844:	mov	r0, r2
     848:	str	r1, [sp, #12]
     84c:	bl	0 <coda_XML_GetCurrentByteIndex>
     850:	movw	r2, #0
     854:	movt	r2, #0
     858:	str	r0, [sp, #8]
     85c:	mov	r0, r2
     860:	ldr	r2, [sp, #16]
     864:	str	r1, [sp, #4]
     868:	mov	r1, r2
     86c:	ldr	r2, [sp, #8]
     870:	bl	0 <coda_add_error_message>
     874:	sub	r0, fp, #72	; 0x48
     878:	bl	d9c <parser_info_delete>
     87c:	mvn	r0, #0
     880:	str	r0, [fp, #-4]
     884:	b	898 <parse_entry+0x750>
     888:	sub	r0, fp, #72	; 0x48
     88c:	bl	d9c <parser_info_delete>
     890:	movw	r0, #0
     894:	str	r0, [fp, #-4]
     898:	ldr	r0, [fp, #-4]
     89c:	mov	sp, fp
     8a0:	pop	{fp, pc}
     8a4:	.word	0x000001f4
     8a8:	.word	0x000001b8
     8ac:	.word	0x00000190
     8b0:	.word	0xfffffe70
     8b4:	.word	0x00000150
     8b8:	.word	0x00000134

000008bc <coda_read_definitions>:
     8bc:	push	{fp, lr}
     8c0:	mov	fp, sp
     8c4:	sub	sp, sp, #176	; 0xb0
     8c8:	str	r0, [fp, #-8]
     8cc:	movw	r0, #58	; 0x3a
     8d0:	strb	r0, [fp, #-9]
     8d4:	ldr	r0, [fp, #-8]
     8d8:	bl	0 <strdup>
     8dc:	str	r0, [fp, #-16]
     8e0:	ldr	r0, [fp, #-16]
     8e4:	movw	r1, #0
     8e8:	cmp	r0, r1
     8ec:	bne	918 <coda_read_definitions+0x5c>
     8f0:	mvn	r0, #0
     8f4:	movw	r1, #0
     8f8:	movt	r1, #0
     8fc:	movw	r2, #0
     900:	movt	r2, #0
     904:	movw	r3, #4302	; 0x10ce
     908:	bl	0 <coda_set_error>
     90c:	mvn	r0, #0
     910:	str	r0, [fp, #-4]
     914:	b	c7c <coda_read_definitions+0x3c0>
     918:	ldr	r0, [fp, #-16]
     91c:	str	r0, [fp, #-20]	; 0xffffffec
     920:	ldr	r0, [fp, #-20]	; 0xffffffec
     924:	ldrb	r0, [r0]
     928:	cmp	r0, #0
     92c:	beq	c6c <coda_read_definitions+0x3b0>
     930:	ldr	r0, [fp, #-20]	; 0xffffffec
     934:	str	r0, [sp, #60]	; 0x3c
     938:	ldr	r0, [sp, #60]	; 0x3c
     93c:	ldrb	r0, [r0]
     940:	cmp	r0, #0
     944:	movw	r0, #0
     948:	str	r0, [sp, #40]	; 0x28
     94c:	beq	968 <coda_read_definitions+0xac>
     950:	ldr	r0, [sp, #60]	; 0x3c
     954:	ldrb	r0, [r0]
     958:	cmp	r0, #58	; 0x3a
     95c:	movw	r0, #0
     960:	movne	r0, #1
     964:	str	r0, [sp, #40]	; 0x28
     968:	ldr	r0, [sp, #40]	; 0x28
     96c:	tst	r0, #1
     970:	beq	984 <coda_read_definitions+0xc8>
     974:	ldr	r0, [sp, #60]	; 0x3c
     978:	add	r0, r0, #1
     97c:	str	r0, [sp, #60]	; 0x3c
     980:	b	938 <coda_read_definitions+0x7c>
     984:	ldr	r0, [sp, #60]	; 0x3c
     988:	ldrb	r0, [r0]
     98c:	cmp	r0, #0
     990:	beq	9ac <coda_read_definitions+0xf0>
     994:	ldr	r0, [sp, #60]	; 0x3c
     998:	movw	r1, #0
     99c:	strb	r1, [r0]
     9a0:	ldr	r0, [sp, #60]	; 0x3c
     9a4:	add	r0, r0, #1
     9a8:	str	r0, [sp, #60]	; 0x3c
     9ac:	ldr	r0, [fp, #-20]	; 0xffffffec
     9b0:	add	r1, sp, #64	; 0x40
     9b4:	bl	0 <stat>
     9b8:	cmp	r0, #0
     9bc:	bne	c60 <coda_read_definitions+0x3a4>
     9c0:	ldr	r0, [sp, #80]	; 0x50
     9c4:	and	r0, r0, #16384	; 0x4000
     9c8:	cmp	r0, #0
     9cc:	beq	c20 <coda_read_definitions+0x364>
     9d0:	ldr	r0, [fp, #-20]	; 0xffffffec
     9d4:	bl	0 <opendir>
     9d8:	str	r0, [sp, #56]	; 0x38
     9dc:	ldr	r0, [sp, #56]	; 0x38
     9e0:	movw	r1, #0
     9e4:	cmp	r0, r1
     9e8:	bne	a34 <coda_read_definitions+0x178>
     9ec:	ldr	r2, [fp, #-20]	; 0xffffffec
     9f0:	str	r2, [sp, #36]	; 0x24
     9f4:	bl	0 <__errno_location>
     9f8:	ldr	r0, [r0]
     9fc:	bl	0 <strerror>
     a00:	ldr	r1, [pc, #640]	; c88 <coda_read_definitions+0x3cc>
     a04:	str	r0, [sp, #32]
     a08:	mov	r0, r1
     a0c:	movw	r1, #0
     a10:	movt	r1, #0
     a14:	ldr	r2, [sp, #36]	; 0x24
     a18:	ldr	r3, [sp, #32]
     a1c:	bl	0 <coda_set_error>
     a20:	ldr	r0, [fp, #-16]
     a24:	bl	0 <free>
     a28:	mvn	r0, #0
     a2c:	str	r0, [fp, #-4]
     a30:	b	c7c <coda_read_definitions+0x3c0>
     a34:	b	a38 <coda_read_definitions+0x17c>
     a38:	ldr	r0, [sp, #56]	; 0x38
     a3c:	bl	0 <readdir>
     a40:	str	r0, [sp, #52]	; 0x34
     a44:	movw	r1, #0
     a48:	cmp	r0, r1
     a4c:	beq	c14 <coda_read_definitions+0x358>
     a50:	ldr	r0, [sp, #52]	; 0x34
     a54:	add	r0, r0, #11
     a58:	bl	0 <strlen>
     a5c:	str	r0, [sp, #48]	; 0x30
     a60:	ldr	r0, [sp, #48]	; 0x30
     a64:	cmp	r0, #8
     a68:	ble	c10 <coda_read_definitions+0x354>
     a6c:	ldr	r0, [sp, #52]	; 0x34
     a70:	add	r0, r0, #11
     a74:	ldr	r1, [sp, #48]	; 0x30
     a78:	sub	r1, r1, #8
     a7c:	add	r0, r0, r1
     a80:	movw	r1, #0
     a84:	movt	r1, #0
     a88:	bl	0 <strcmp>
     a8c:	cmp	r0, #0
     a90:	bne	c10 <coda_read_definitions+0x354>
     a94:	ldr	r0, [fp, #-20]	; 0xffffffec
     a98:	bl	0 <strlen>
     a9c:	add	r0, r0, #1
     aa0:	ldr	r1, [sp, #48]	; 0x30
     aa4:	add	r0, r0, r1
     aa8:	add	r0, r0, #1
     aac:	bl	0 <malloc>
     ab0:	str	r0, [sp, #44]	; 0x2c
     ab4:	ldr	r0, [sp, #44]	; 0x2c
     ab8:	movw	r1, #0
     abc:	cmp	r0, r1
     ac0:	bne	b20 <coda_read_definitions+0x264>
     ac4:	ldr	r0, [fp, #-20]	; 0xffffffec
     ac8:	bl	0 <strlen>
     acc:	add	r0, r0, #1
     ad0:	ldr	r1, [sp, #48]	; 0x30
     ad4:	add	r0, r0, r1
     ad8:	add	r2, r0, #1
     adc:	mvn	r0, #0
     ae0:	movw	r1, #0
     ae4:	movt	r1, #0
     ae8:	movw	r3, #0
     aec:	movt	r3, #0
     af0:	movw	ip, #4427	; 0x114b
     af4:	str	ip, [sp]
     af8:	bl	0 <coda_set_error>
     afc:	ldr	r0, [sp, #56]	; 0x38
     b00:	bl	0 <closedir>
     b04:	ldr	r1, [fp, #-16]
     b08:	str	r0, [sp, #28]
     b0c:	mov	r0, r1
     b10:	bl	0 <free>
     b14:	mvn	r0, #0
     b18:	str	r0, [fp, #-4]
     b1c:	b	c7c <coda_read_definitions+0x3c0>
     b20:	ldr	r0, [sp, #44]	; 0x2c
     b24:	ldr	r2, [fp, #-20]	; 0xffffffec
     b28:	ldr	r1, [sp, #52]	; 0x34
     b2c:	add	r3, r1, #11
     b30:	movw	r1, #0
     b34:	movt	r1, #0
     b38:	bl	0 <sprintf>
     b3c:	ldr	r1, [sp, #44]	; 0x2c
     b40:	str	r0, [sp, #24]
     b44:	mov	r0, r1
     b48:	add	r1, sp, #64	; 0x40
     b4c:	bl	0 <stat>
     b50:	cmp	r0, #0
     b54:	beq	bb8 <coda_read_definitions+0x2fc>
     b58:	ldr	r2, [sp, #44]	; 0x2c
     b5c:	str	r2, [sp, #20]
     b60:	bl	0 <__errno_location>
     b64:	ldr	r0, [r0]
     b68:	bl	0 <strerror>
     b6c:	ldr	r1, [pc, #276]	; c88 <coda_read_definitions+0x3cc>
     b70:	str	r0, [sp, #16]
     b74:	mov	r0, r1
     b78:	movw	r1, #0
     b7c:	movt	r1, #0
     b80:	ldr	r2, [sp, #20]
     b84:	ldr	r3, [sp, #16]
     b88:	bl	0 <coda_set_error>
     b8c:	ldr	r0, [sp, #44]	; 0x2c
     b90:	bl	0 <free>
     b94:	ldr	r0, [sp, #56]	; 0x38
     b98:	bl	0 <closedir>
     b9c:	ldr	r1, [fp, #-16]
     ba0:	str	r0, [sp, #12]
     ba4:	mov	r0, r1
     ba8:	bl	0 <free>
     bac:	mvn	r0, #0
     bb0:	str	r0, [fp, #-4]
     bb4:	b	c7c <coda_read_definitions+0x3c0>
     bb8:	ldr	r0, [sp, #80]	; 0x50
     bbc:	and	r0, r0, #32768	; 0x8000
     bc0:	cmp	r0, #0
     bc4:	beq	c08 <coda_read_definitions+0x34c>
     bc8:	ldr	r0, [sp, #44]	; 0x2c
     bcc:	bl	c8c <read_definition_file>
     bd0:	cmp	r0, #0
     bd4:	beq	c04 <coda_read_definitions+0x348>
     bd8:	ldr	r0, [sp, #44]	; 0x2c
     bdc:	bl	0 <free>
     be0:	ldr	r0, [sp, #56]	; 0x38
     be4:	bl	0 <closedir>
     be8:	ldr	r1, [fp, #-16]
     bec:	str	r0, [sp, #8]
     bf0:	mov	r0, r1
     bf4:	bl	0 <free>
     bf8:	mvn	r0, #0
     bfc:	str	r0, [fp, #-4]
     c00:	b	c7c <coda_read_definitions+0x3c0>
     c04:	b	c08 <coda_read_definitions+0x34c>
     c08:	ldr	r0, [sp, #44]	; 0x2c
     c0c:	bl	0 <free>
     c10:	b	a38 <coda_read_definitions+0x17c>
     c14:	ldr	r0, [sp, #56]	; 0x38
     c18:	bl	0 <closedir>
     c1c:	b	c5c <coda_read_definitions+0x3a0>
     c20:	ldr	r0, [sp, #80]	; 0x50
     c24:	and	r0, r0, #32768	; 0x8000
     c28:	cmp	r0, #0
     c2c:	beq	c58 <coda_read_definitions+0x39c>
     c30:	ldr	r0, [fp, #-20]	; 0xffffffec
     c34:	bl	c8c <read_definition_file>
     c38:	cmp	r0, #0
     c3c:	beq	c54 <coda_read_definitions+0x398>
     c40:	ldr	r0, [fp, #-16]
     c44:	bl	0 <free>
     c48:	mvn	r0, #0
     c4c:	str	r0, [fp, #-4]
     c50:	b	c7c <coda_read_definitions+0x3c0>
     c54:	b	c58 <coda_read_definitions+0x39c>
     c58:	b	c5c <coda_read_definitions+0x3a0>
     c5c:	b	c60 <coda_read_definitions+0x3a4>
     c60:	ldr	r0, [sp, #60]	; 0x3c
     c64:	str	r0, [fp, #-20]	; 0xffffffec
     c68:	b	920 <coda_read_definitions+0x64>
     c6c:	ldr	r0, [fp, #-16]
     c70:	bl	0 <free>
     c74:	movw	r0, #0
     c78:	str	r0, [fp, #-4]
     c7c:	ldr	r0, [fp, #-4]
     c80:	mov	sp, fp
     c84:	pop	{fp, pc}
     c88:	.word	0xfffffe70

00000c8c <read_definition_file>:
     c8c:	push	{fp, lr}
     c90:	mov	fp, sp
     c94:	sub	sp, sp, #24
     c98:	str	r0, [fp, #-8]
     c9c:	ldr	r0, [fp, #-8]
     ca0:	movw	r1, #0
     ca4:	movt	r1, #0
     ca8:	bl	0 <coda_za_open>
     cac:	str	r0, [sp, #12]
     cb0:	ldr	r0, [sp, #12]
     cb4:	movw	r1, #0
     cb8:	cmp	r0, r1
     cbc:	bne	ccc <read_definition_file+0x40>
     cc0:	mvn	r0, #0
     cc4:	str	r0, [fp, #-4]
     cc8:	b	d18 <read_definition_file+0x8c>
     ccc:	ldr	r0, [sp, #12]
     cd0:	movw	r1, #0
     cd4:	str	r1, [sp, #8]
     cd8:	ldr	r2, [sp, #8]
     cdc:	ldr	r3, [sp, #8]
     ce0:	ldr	ip, [sp, #8]
     ce4:	str	ip, [sp]
     ce8:	bl	148 <parse_entry>
     cec:	cmp	r0, #0
     cf0:	beq	d08 <read_definition_file+0x7c>
     cf4:	ldr	r0, [sp, #12]
     cf8:	bl	0 <coda_za_close>
     cfc:	mvn	r0, #0
     d00:	str	r0, [fp, #-4]
     d04:	b	d18 <read_definition_file+0x8c>
     d08:	ldr	r0, [sp, #12]
     d0c:	bl	0 <coda_za_close>
     d10:	movw	r0, #0
     d14:	str	r0, [fp, #-4]
     d18:	ldr	r0, [fp, #-4]
     d1c:	mov	sp, fp
     d20:	pop	{fp, pc}

00000d24 <parser_info_init>:
     d24:	sub	sp, sp, #4
     d28:	str	r0, [sp]
     d2c:	ldr	r0, [sp]
     d30:	movw	r1, #0
     d34:	str	r1, [r0]
     d38:	ldr	r0, [sp]
     d3c:	str	r1, [r0, #4]
     d40:	ldr	r0, [sp]
     d44:	str	r1, [r0, #8]
     d48:	ldr	r0, [sp]
     d4c:	str	r1, [r0, #12]
     d50:	ldr	r0, [sp]
     d54:	str	r1, [r0, #16]
     d58:	ldr	r0, [sp]
     d5c:	str	r1, [r0, #24]
     d60:	ldr	r0, [sp]
     d64:	str	r1, [r0, #28]
     d68:	ldr	r0, [sp]
     d6c:	str	r1, [r0, #32]
     d70:	ldr	r0, [sp]
     d74:	str	r1, [r0, #36]	; 0x24
     d78:	ldr	r0, [sp]
     d7c:	str	r1, [r0, #40]	; 0x28
     d80:	ldr	r0, [sp]
     d84:	movw	r2, #1
     d88:	str	r2, [r0, #44]	; 0x2c
     d8c:	ldr	r0, [sp]
     d90:	str	r1, [r0, #48]	; 0x30
     d94:	add	sp, sp, #4
     d98:	bx	lr

00000d9c <parser_info_delete>:
     d9c:	push	{fp, lr}
     da0:	mov	fp, sp
     da4:	sub	sp, sp, #16
     da8:	str	r0, [fp, #-4]
     dac:	ldr	r0, [fp, #-4]
     db0:	ldr	r0, [r0]
     db4:	movw	r1, #0
     db8:	cmp	r0, r1
     dbc:	beq	e74 <parser_info_delete+0xd8>
     dc0:	ldr	r0, [fp, #-4]
     dc4:	ldr	r0, [r0]
     dc8:	str	r0, [sp, #8]
     dcc:	ldr	r0, [sp, #8]
     dd0:	ldr	r0, [r0, #8]
     dd4:	movw	r1, #0
     dd8:	cmp	r0, r1
     ddc:	beq	e38 <parser_info_delete+0x9c>
     de0:	ldr	r0, [sp, #8]
     de4:	ldr	r0, [r0, #40]	; 0x28
     de8:	movw	r1, #0
     dec:	cmp	r0, r1
     df0:	beq	df8 <parser_info_delete+0x5c>
     df4:	b	e18 <parser_info_delete+0x7c>
     df8:	movw	r0, #0
     dfc:	movt	r0, #0
     e00:	movw	r1, #0
     e04:	movt	r1, #0
     e08:	movw	r2, #4055	; 0xfd7
     e0c:	movw	r3, #0
     e10:	movt	r3, #0
     e14:	bl	0 <__assert_fail>
     e18:	ldr	r0, [sp, #8]
     e1c:	ldr	r0, [r0, #40]	; 0x28
     e20:	ldr	r1, [sp, #8]
     e24:	ldr	r1, [r1, #8]
     e28:	str	r0, [sp, #4]
     e2c:	mov	r0, r1
     e30:	ldr	r1, [sp, #4]
     e34:	blx	r1
     e38:	ldr	r0, [sp, #8]
     e3c:	ldr	r0, [r0, #12]
     e40:	movw	r1, #0
     e44:	cmp	r0, r1
     e48:	beq	e58 <parser_info_delete+0xbc>
     e4c:	ldr	r0, [sp, #8]
     e50:	ldr	r0, [r0, #12]
     e54:	bl	0 <free>
     e58:	ldr	r0, [sp, #8]
     e5c:	ldr	r0, [r0, #396]	; 0x18c
     e60:	ldr	r1, [fp, #-4]
     e64:	str	r0, [r1]
     e68:	ldr	r0, [sp, #8]
     e6c:	bl	0 <free>
     e70:	b	dac <parser_info_delete+0x10>
     e74:	ldr	r0, [fp, #-4]
     e78:	ldr	r0, [r0, #4]
     e7c:	movw	r1, #0
     e80:	cmp	r0, r1
     e84:	beq	e94 <parser_info_delete+0xf8>
     e88:	ldr	r0, [fp, #-4]
     e8c:	ldr	r0, [r0, #4]
     e90:	bl	0 <coda_XML_ParserFree>
     e94:	ldr	r0, [fp, #-4]
     e98:	ldr	r0, [r0, #8]
     e9c:	movw	r1, #0
     ea0:	cmp	r0, r1
     ea4:	beq	eb4 <parser_info_delete+0x118>
     ea8:	ldr	r0, [fp, #-4]
     eac:	ldr	r0, [r0, #8]
     eb0:	bl	0 <coda_hashtable_delete>
     eb4:	ldr	r0, [fp, #-4]
     eb8:	ldr	r0, [r0, #12]
     ebc:	movw	r1, #0
     ec0:	cmp	r0, r1
     ec4:	beq	ed4 <parser_info_delete+0x138>
     ec8:	ldr	r0, [fp, #-4]
     ecc:	ldr	r0, [r0, #12]
     ed0:	bl	0 <free>
     ed4:	ldr	r0, [fp, #-4]
     ed8:	movw	r1, #0
     edc:	str	r1, [r0, #16]
     ee0:	mov	sp, fp
     ee4:	pop	{fp, pc}

00000ee8 <start_element_handler>:
     ee8:	push	{fp, lr}
     eec:	mov	fp, sp
     ef0:	sub	sp, sp, #48	; 0x30
     ef4:	str	r0, [fp, #-4]
     ef8:	str	r1, [fp, #-8]
     efc:	str	r2, [fp, #-12]
     f00:	ldr	r0, [fp, #-4]
     f04:	str	r0, [fp, #-16]
     f08:	ldr	r0, [fp, #-16]
     f0c:	ldr	r0, [r0, #48]	; 0x30
     f10:	cmp	r0, #0
     f14:	ble	f2c <start_element_handler+0x44>
     f18:	ldr	r0, [fp, #-16]
     f1c:	ldr	r1, [r0, #48]	; 0x30
     f20:	add	r1, r1, #1
     f24:	str	r1, [r0, #48]	; 0x30
     f28:	b	10cc <start_element_handler+0x1e4>
     f2c:	ldr	r0, [fp, #-16]
     f30:	ldr	r0, [r0, #8]
     f34:	ldr	r1, [fp, #-8]
     f38:	bl	0 <coda_hashtable_get_index_from_name>
     f3c:	str	r0, [fp, #-20]	; 0xffffffec
     f40:	ldr	r0, [fp, #-20]	; 0xffffffec
     f44:	cmp	r0, #0
     f48:	bge	f78 <start_element_handler+0x90>
     f4c:	ldr	r0, [fp, #-8]
     f50:	movw	r1, #0
     f54:	movt	r1, #0
     f58:	movw	r2, #44	; 0x2c
     f5c:	bl	0 <strncmp>
     f60:	cmp	r0, #0
     f64:	beq	f78 <start_element_handler+0x90>
     f68:	ldr	r0, [fp, #-16]
     f6c:	movw	r1, #1
     f70:	str	r1, [r0, #48]	; 0x30
     f74:	b	10cc <start_element_handler+0x1e4>
     f78:	ldr	r0, [fp, #-20]	; 0xffffffec
     f7c:	cmp	r0, #0
     f80:	blt	fa8 <start_element_handler+0xc0>
     f84:	ldr	r0, [fp, #-16]
     f88:	ldr	r0, [r0]
     f8c:	add	r0, r0, #52	; 0x34
     f90:	ldr	r1, [fp, #-20]	; 0xffffffec
     f94:	add	r0, r0, r1, lsl #2
     f98:	ldr	r0, [r0]
     f9c:	movw	r1, #0
     fa0:	cmp	r0, r1
     fa4:	bne	10ac <start_element_handler+0x1c4>
     fa8:	ldr	r0, [fp, #-16]
     fac:	ldr	r0, [r0]
     fb0:	ldr	r0, [r0]
     fb4:	cmn	r0, #1
     fb8:	bne	fe4 <start_element_handler+0xfc>
     fbc:	ldr	r0, [fp, #-8]
     fc0:	bl	0 <coda_element_name_from_xml_name>
     fc4:	ldr	r1, [pc, #264]	; 10d4 <start_element_handler+0x1ec>
     fc8:	str	r0, [sp, #24]
     fcc:	mov	r0, r1
     fd0:	movw	r1, #0
     fd4:	movt	r1, #0
     fd8:	ldr	r2, [sp, #24]
     fdc:	bl	0 <coda_set_error>
     fe0:	b	10a0 <start_element_handler+0x1b8>
     fe4:	ldr	r0, [fp, #-16]
     fe8:	ldr	r0, [r0]
     fec:	ldr	r0, [r0, #48]	; 0x30
     ff0:	cmp	r0, #0
     ff4:	beq	105c <start_element_handler+0x174>
     ff8:	ldr	r0, [fp, #-8]
     ffc:	bl	0 <coda_element_name_from_xml_name>
    1000:	ldr	r1, [fp, #-16]
    1004:	ldr	r1, [r1]
    1008:	ldr	r1, [r1]
    100c:	str	r0, [sp, #20]
    1010:	mov	r0, r1
    1014:	bl	1adc <xml_element_name>
    1018:	ldr	r1, [fp, #-16]
    101c:	ldr	r1, [r1]
    1020:	ldr	r1, [r1, #44]	; 0x2c
    1024:	str	r0, [sp, #16]
    1028:	mov	r0, r1
    102c:	bl	0 <coda_type_get_format_name>
    1030:	ldr	r1, [pc, #156]	; 10d4 <start_element_handler+0x1ec>
    1034:	str	r0, [sp, #12]
    1038:	mov	r0, r1
    103c:	movw	r1, #0
    1040:	movt	r1, #0
    1044:	ldr	r2, [sp, #20]
    1048:	ldr	r3, [sp, #16]
    104c:	ldr	ip, [sp, #12]
    1050:	str	ip, [sp]
    1054:	bl	0 <coda_set_error>
    1058:	b	109c <start_element_handler+0x1b4>
    105c:	ldr	r0, [fp, #-8]
    1060:	bl	0 <coda_element_name_from_xml_name>
    1064:	ldr	r1, [fp, #-16]
    1068:	ldr	r1, [r1]
    106c:	ldr	r1, [r1]
    1070:	str	r0, [sp, #8]
    1074:	mov	r0, r1
    1078:	bl	1adc <xml_element_name>
    107c:	ldr	r1, [pc, #80]	; 10d4 <start_element_handler+0x1ec>
    1080:	str	r0, [sp, #4]
    1084:	mov	r0, r1
    1088:	movw	r1, #0
    108c:	movt	r1, #0
    1090:	ldr	r2, [sp, #8]
    1094:	ldr	r3, [sp, #4]
    1098:	bl	0 <coda_set_error>
    109c:	b	10a0 <start_element_handler+0x1b8>
    10a0:	ldr	r0, [fp, #-16]
    10a4:	bl	1b58 <abort_parser>
    10a8:	b	10cc <start_element_handler+0x1e4>
    10ac:	ldr	r0, [fp, #-16]
    10b0:	ldr	r1, [fp, #-20]	; 0xffffffec
    10b4:	ldr	r2, [fp, #-12]
    10b8:	bl	1150 <push_node>
    10bc:	cmp	r0, #0
    10c0:	beq	10cc <start_element_handler+0x1e4>
    10c4:	ldr	r0, [fp, #-16]
    10c8:	bl	1b58 <abort_parser>
    10cc:	mov	sp, fp
    10d0:	pop	{fp, pc}
    10d4:	.word	0xfffffe70

000010d8 <end_element_handler>:
    10d8:	push	{fp, lr}
    10dc:	mov	fp, sp
    10e0:	sub	sp, sp, #16
    10e4:	str	r0, [fp, #-4]
    10e8:	str	r1, [sp, #8]
    10ec:	ldr	r0, [fp, #-4]
    10f0:	str	r0, [sp, #4]
    10f4:	ldr	r0, [sp, #4]
    10f8:	ldr	r0, [r0, #36]	; 0x24
    10fc:	cmp	r0, #0
    1100:	beq	1108 <end_element_handler+0x30>
    1104:	b	1148 <end_element_handler+0x70>
    1108:	ldr	r0, [sp, #4]
    110c:	ldr	r0, [r0, #48]	; 0x30
    1110:	cmp	r0, #0
    1114:	ble	1130 <end_element_handler+0x58>
    1118:	ldr	r0, [sp, #4]
    111c:	ldr	r1, [r0, #48]	; 0x30
    1120:	mvn	r2, #0
    1124:	add	r1, r1, r2
    1128:	str	r1, [r0, #48]	; 0x30
    112c:	b	1148 <end_element_handler+0x70>
    1130:	ldr	r0, [sp, #4]
    1134:	bl	1b90 <pop_node>
    1138:	cmp	r0, #0
    113c:	beq	1148 <end_element_handler+0x70>
    1140:	ldr	r0, [sp, #4]
    1144:	bl	1b58 <abort_parser>
    1148:	mov	sp, fp
    114c:	pop	{fp, pc}

00001150 <push_node>:
    1150:	push	{fp, lr}
    1154:	mov	fp, sp
    1158:	sub	sp, sp, #40	; 0x28
    115c:	str	r0, [fp, #-8]
    1160:	str	r1, [fp, #-12]
    1164:	str	r2, [fp, #-16]
    1168:	movw	r0, #400	; 0x190
    116c:	bl	0 <malloc>
    1170:	str	r0, [sp, #20]
    1174:	ldr	r0, [sp, #20]
    1178:	movw	r1, #0
    117c:	cmp	r0, r1
    1180:	beq	1188 <push_node+0x38>
    1184:	b	11a8 <push_node+0x58>
    1188:	movw	r0, #0
    118c:	movt	r0, #0
    1190:	movw	r1, #0
    1194:	movt	r1, #0
    1198:	movw	r2, #3877	; 0xf25
    119c:	movw	r3, #0
    11a0:	movt	r3, #0
    11a4:	bl	0 <__assert_fail>
    11a8:	ldr	r0, [fp, #-12]
    11ac:	ldr	r1, [sp, #20]
    11b0:	str	r0, [r1]
    11b4:	ldr	r0, [sp, #20]
    11b8:	mov	r1, #0
    11bc:	str	r1, [r0, #4]
    11c0:	ldr	r0, [sp, #20]
    11c4:	str	r1, [r0, #8]
    11c8:	ldr	r0, [sp, #20]
    11cc:	str	r1, [r0, #12]
    11d0:	ldr	r0, [sp, #20]
    11d4:	mvn	r1, #0
    11d8:	str	r1, [r0, #20]
    11dc:	str	r1, [r0, #16]
    11e0:	bl	0 <coda_NaN>
    11e4:	ldr	r0, [sp, #20]
    11e8:	vstr	d0, [r0, #24]
    11ec:	ldr	r0, [sp, #20]
    11f0:	movw	r1, #0
    11f4:	str	r1, [r0, #32]
    11f8:	ldr	r0, [sp, #20]
    11fc:	str	r1, [r0, #36]	; 0x24
    1200:	ldr	r0, [sp, #20]
    1204:	str	r1, [r0, #40]	; 0x28
    1208:	ldr	r0, [sp, #20]
    120c:	str	r1, [r0, #48]	; 0x30
    1210:	ldr	r0, [sp, #20]
    1214:	add	r0, r0, #52	; 0x34
    1218:	movw	r2, #0
    121c:	and	r3, r2, #255	; 0xff
    1220:	str	r1, [sp, #16]
    1224:	mov	r1, r3
    1228:	movw	r3, #172	; 0xac
    122c:	str	r2, [sp, #12]
    1230:	mov	r2, r3
    1234:	str	r3, [sp, #8]
    1238:	bl	0 <memset>
    123c:	ldr	r0, [sp, #20]
    1240:	add	r0, r0, #224	; 0xe0
    1244:	ldr	r1, [sp, #12]
    1248:	and	r1, r1, #255	; 0xff
    124c:	ldr	r2, [sp, #8]
    1250:	bl	0 <memset>
    1254:	ldr	r0, [fp, #-8]
    1258:	ldr	r0, [r0]
    125c:	ldr	r1, [sp, #20]
    1260:	str	r0, [r1, #396]	; 0x18c
    1264:	ldr	r0, [sp, #20]
    1268:	ldr	r1, [fp, #-8]
    126c:	str	r0, [r1]
    1270:	ldr	r0, [sp, #20]
    1274:	ldr	r0, [r0, #396]	; 0x18c
    1278:	ldr	r1, [sp, #16]
    127c:	cmp	r0, r1
    1280:	beq	12f4 <push_node+0x1a4>
    1284:	ldr	r0, [sp, #20]
    1288:	ldr	r0, [r0, #396]	; 0x18c
    128c:	add	r0, r0, #52	; 0x34
    1290:	ldr	r1, [fp, #-12]
    1294:	add	r0, r0, r1, lsl #2
    1298:	ldr	r0, [r0]
    129c:	movw	r1, #0
    12a0:	cmp	r0, r1
    12a4:	beq	12f4 <push_node+0x1a4>
    12a8:	ldr	r0, [sp, #20]
    12ac:	ldr	r0, [r0, #396]	; 0x18c
    12b0:	add	r0, r0, #52	; 0x34
    12b4:	ldr	r1, [fp, #-12]
    12b8:	add	r0, r0, r1, lsl #2
    12bc:	ldr	r0, [r0]
    12c0:	ldr	r1, [fp, #-8]
    12c4:	ldr	r2, [fp, #-16]
    12c8:	str	r0, [sp, #4]
    12cc:	mov	r0, r1
    12d0:	mov	r1, r2
    12d4:	ldr	r2, [sp, #4]
    12d8:	blx	r2
    12dc:	cmp	r0, #0
    12e0:	beq	12f0 <push_node+0x1a0>
    12e4:	mvn	r0, #0
    12e8:	str	r0, [fp, #-4]
    12ec:	b	1338 <push_node+0x1e8>
    12f0:	b	12f4 <push_node+0x1a4>
    12f4:	ldr	r0, [sp, #20]
    12f8:	ldr	r0, [r0, #32]
    12fc:	cmp	r0, #0
    1300:	beq	131c <push_node+0x1cc>
    1304:	ldr	r0, [fp, #-8]
    1308:	ldr	r0, [r0, #4]
    130c:	movw	r1, #0
    1310:	movt	r1, #0
    1314:	bl	0 <coda_XML_SetCharacterDataHandler>
    1318:	b	1330 <push_node+0x1e0>
    131c:	ldr	r0, [fp, #-8]
    1320:	ldr	r0, [r0, #4]
    1324:	movw	r1, #0
    1328:	movt	r1, #0
    132c:	bl	0 <coda_XML_SetCharacterDataHandler>
    1330:	movw	r0, #0
    1334:	str	r0, [fp, #-4]
    1338:	ldr	r0, [fp, #-4]
    133c:	mov	sp, fp
    1340:	pop	{fp, pc}

00001344 <register_sub_element>:
    1344:	push	{fp, lr}
    1348:	mov	fp, sp
    134c:	sub	sp, sp, #16
    1350:	str	r0, [fp, #-4]
    1354:	str	r1, [sp, #8]
    1358:	str	r2, [sp, #4]
    135c:	str	r3, [sp]
    1360:	ldr	r0, [sp, #4]
    1364:	movw	r1, #0
    1368:	cmp	r0, r1
    136c:	beq	1374 <register_sub_element+0x30>
    1370:	b	1394 <register_sub_element+0x50>
    1374:	movw	r0, #0
    1378:	movt	r0, #0
    137c:	movw	r1, #0
    1380:	movt	r1, #0
    1384:	movw	r2, #735	; 0x2df
    1388:	movw	r3, #0
    138c:	movt	r3, #0
    1390:	bl	0 <__assert_fail>
    1394:	ldr	r0, [sp, #4]
    1398:	ldr	r1, [fp, #-4]
    139c:	ldr	r2, [sp, #8]
    13a0:	add	r1, r1, r2, lsl #2
    13a4:	str	r0, [r1, #52]	; 0x34
    13a8:	ldr	r0, [sp]
    13ac:	ldr	r1, [fp, #-4]
    13b0:	add	r1, r1, #224	; 0xe0
    13b4:	ldr	r2, [sp, #8]
    13b8:	add	r1, r1, r2, lsl #2
    13bc:	str	r0, [r1]
    13c0:	mov	sp, fp
    13c4:	pop	{fp, pc}

000013c8 <cd_product_class_init>:
    13c8:	push	{fp, lr}
    13cc:	mov	fp, sp
    13d0:	sub	sp, sp, #40	; 0x28
    13d4:	str	r0, [fp, #-8]
    13d8:	str	r1, [fp, #-12]
    13dc:	movw	r0, #0
    13e0:	str	r0, [sp, #20]
    13e4:	ldr	r0, [fp, #-12]
    13e8:	ldr	r1, [fp, #-8]
    13ec:	ldr	r1, [r1]
    13f0:	ldr	r2, [r1]
    13f4:	movw	r1, #0
    13f8:	movt	r1, #0
    13fc:	bl	20e4 <get_mandatory_attribute_value>
    1400:	str	r0, [fp, #-16]
    1404:	ldr	r0, [fp, #-16]
    1408:	movw	r1, #0
    140c:	cmp	r0, r1
    1410:	bne	1420 <cd_product_class_init+0x58>
    1414:	mvn	r0, #0
    1418:	str	r0, [fp, #-4]
    141c:	b	1624 <cd_product_class_init+0x25c>
    1420:	ldr	r0, [fp, #-8]
    1424:	add	r1, sp, #20
    1428:	bl	215c <get_product_class_revision>
    142c:	cmp	r0, #0
    1430:	beq	1440 <cd_product_class_init+0x78>
    1434:	mvn	r0, #0
    1438:	str	r0, [fp, #-4]
    143c:	b	1624 <cd_product_class_init+0x25c>
    1440:	ldr	r0, [fp, #-16]
    1444:	bl	0 <coda_data_dictionary_has_product_class>
    1448:	cmp	r0, #0
    144c:	beq	14d8 <cd_product_class_init+0x110>
    1450:	ldr	r0, [fp, #-16]
    1454:	bl	0 <coda_data_dictionary_get_product_class>
    1458:	str	r0, [sp, #16]
    145c:	ldr	r0, [sp, #16]
    1460:	movw	r1, #0
    1464:	cmp	r0, r1
    1468:	bne	1478 <cd_product_class_init+0xb0>
    146c:	mvn	r0, #0
    1470:	str	r0, [fp, #-4]
    1474:	b	1624 <cd_product_class_init+0x25c>
    1478:	ldr	r0, [sp, #20]
    147c:	ldr	r1, [sp, #16]
    1480:	str	r0, [sp, #12]
    1484:	mov	r0, r1
    1488:	bl	0 <coda_product_class_get_revision>
    148c:	ldr	r1, [sp, #12]
    1490:	cmp	r1, r0
    1494:	bgt	14b8 <cd_product_class_init+0xf0>
    1498:	ldr	r0, [fp, #-8]
    149c:	movw	r1, #1
    14a0:	str	r1, [r0, #40]	; 0x28
    14a4:	ldr	r0, [fp, #-8]
    14a8:	bl	1b58 <abort_parser>
    14ac:	movw	r0, #0
    14b0:	str	r0, [fp, #-4]
    14b4:	b	1624 <cd_product_class_init+0x25c>
    14b8:	ldr	r0, [sp, #16]
    14bc:	bl	0 <coda_data_dictionary_remove_product_class>
    14c0:	cmp	r0, #0
    14c4:	beq	14d4 <cd_product_class_init+0x10c>
    14c8:	mvn	r0, #0
    14cc:	str	r0, [fp, #-4]
    14d0:	b	1624 <cd_product_class_init+0x25c>
    14d4:	b	14d8 <cd_product_class_init+0x110>
    14d8:	movw	r0, #0
    14dc:	movt	r0, #0
    14e0:	ldr	r1, [fp, #-8]
    14e4:	ldr	r1, [r1]
    14e8:	str	r0, [r1, #40]	; 0x28
    14ec:	ldr	r0, [fp, #-16]
    14f0:	bl	0 <coda_product_class_new>
    14f4:	ldr	r1, [fp, #-8]
    14f8:	str	r0, [r1, #24]
    14fc:	ldr	r0, [fp, #-8]
    1500:	ldr	r0, [r0, #24]
    1504:	movw	r1, #0
    1508:	cmp	r0, r1
    150c:	bne	151c <cd_product_class_init+0x154>
    1510:	mvn	r0, #0
    1514:	str	r0, [fp, #-4]
    1518:	b	1624 <cd_product_class_init+0x25c>
    151c:	ldr	r0, [fp, #-8]
    1520:	ldr	r0, [r0, #24]
    1524:	ldr	r1, [fp, #-8]
    1528:	ldr	r1, [r1, #16]
    152c:	str	r0, [sp, #8]
    1530:	mov	r0, r1
    1534:	bl	0 <coda_za_get_filename>
    1538:	ldr	r1, [sp, #8]
    153c:	str	r0, [sp, #4]
    1540:	mov	r0, r1
    1544:	ldr	r1, [sp, #4]
    1548:	bl	0 <coda_product_class_set_definition_file>
    154c:	cmp	r0, #0
    1550:	beq	1578 <cd_product_class_init+0x1b0>
    1554:	ldr	r0, [fp, #-8]
    1558:	ldr	r0, [r0, #24]
    155c:	bl	0 <coda_product_class_delete>
    1560:	ldr	r0, [fp, #-8]
    1564:	movw	r1, #0
    1568:	str	r1, [r0, #24]
    156c:	mvn	r0, #0
    1570:	str	r0, [fp, #-4]
    1574:	b	1624 <cd_product_class_init+0x25c>
    1578:	ldr	r0, [fp, #-8]
    157c:	ldr	r0, [r0, #24]
    1580:	ldr	r1, [sp, #20]
    1584:	bl	0 <coda_product_class_set_revision>
    1588:	cmp	r0, #0
    158c:	beq	15b4 <cd_product_class_init+0x1ec>
    1590:	ldr	r0, [fp, #-8]
    1594:	ldr	r0, [r0, #24]
    1598:	bl	0 <coda_product_class_delete>
    159c:	ldr	r0, [fp, #-8]
    15a0:	movw	r1, #0
    15a4:	str	r1, [r0, #24]
    15a8:	mvn	r0, #0
    15ac:	str	r0, [fp, #-4]
    15b0:	b	1624 <cd_product_class_init+0x25c>
    15b4:	ldr	r0, [fp, #-8]
    15b8:	ldr	r0, [r0, #24]
    15bc:	ldr	r1, [fp, #-8]
    15c0:	ldr	r1, [r1]
    15c4:	str	r0, [r1, #8]
    15c8:	ldr	r0, [fp, #-8]
    15cc:	ldr	r0, [r0]
    15d0:	movw	r1, #11
    15d4:	movw	r2, #0
    15d8:	movt	r2, #0
    15dc:	movw	r3, #0
    15e0:	movt	r3, #0
    15e4:	bl	1344 <register_sub_element>
    15e8:	ldr	r0, [fp, #-8]
    15ec:	ldr	r0, [r0]
    15f0:	movw	r1, #32
    15f4:	movw	r2, #0
    15f8:	movt	r2, #0
    15fc:	movw	r3, #0
    1600:	movt	r3, #0
    1604:	bl	1344 <register_sub_element>
    1608:	ldr	r0, [fp, #-8]
    160c:	ldr	r0, [r0]
    1610:	movw	r1, #0
    1614:	movt	r1, #0
    1618:	str	r1, [r0, #36]	; 0x24
    161c:	movw	r0, #0
    1620:	str	r0, [fp, #-4]
    1624:	ldr	r0, [fp, #-4]
    1628:	mov	sp, fp
    162c:	pop	{fp, pc}

00001630 <data_dictionary_add_product_class>:
    1630:	push	{fp, lr}
    1634:	mov	fp, sp
    1638:	sub	sp, sp, #8
    163c:	str	r0, [sp]
    1640:	ldr	r0, [sp]
    1644:	ldr	r0, [r0]
    1648:	ldr	r0, [r0, #8]
    164c:	bl	0 <coda_data_dictionary_add_product_class>
    1650:	cmp	r0, #0
    1654:	beq	1664 <data_dictionary_add_product_class+0x34>
    1658:	mvn	r0, #0
    165c:	str	r0, [sp, #4]
    1660:	b	1678 <data_dictionary_add_product_class+0x48>
    1664:	ldr	r0, [sp]
    1668:	ldr	r0, [r0]
    166c:	movw	r1, #0
    1670:	str	r1, [r0, #8]
    1674:	str	r1, [sp, #4]
    1678:	ldr	r0, [sp, #4]
    167c:	mov	sp, fp
    1680:	pop	{fp, pc}

00001684 <register_type_elements>:
    1684:	push	{fp, lr}
    1688:	mov	fp, sp
    168c:	sub	sp, sp, #8
    1690:	str	r0, [sp, #4]
    1694:	str	r1, [sp]
    1698:	ldr	r0, [sp, #4]
    169c:	ldr	r3, [sp]
    16a0:	movw	r1, #1
    16a4:	movw	r2, #0
    16a8:	movt	r2, #0
    16ac:	bl	1344 <register_sub_element>
    16b0:	ldr	r0, [sp, #4]
    16b4:	ldr	r3, [sp]
    16b8:	movw	r1, #2
    16bc:	movw	r2, #0
    16c0:	movt	r2, #0
    16c4:	bl	1344 <register_sub_element>
    16c8:	ldr	r0, [sp, #4]
    16cc:	ldr	r3, [sp]
    16d0:	movw	r1, #3
    16d4:	movw	r2, #0
    16d8:	movt	r2, #0
    16dc:	bl	1344 <register_sub_element>
    16e0:	ldr	r0, [sp, #4]
    16e4:	ldr	r3, [sp]
    16e8:	movw	r1, #0
    16ec:	movw	r2, #0
    16f0:	movt	r2, #0
    16f4:	bl	1344 <register_sub_element>
    16f8:	ldr	r0, [sp, #4]
    16fc:	ldr	r3, [sp]
    1700:	movw	r1, #9
    1704:	movw	r2, #0
    1708:	movt	r2, #0
    170c:	bl	1344 <register_sub_element>
    1710:	ldr	r0, [sp, #4]
    1714:	ldr	r3, [sp]
    1718:	movw	r1, #17
    171c:	movw	r2, #0
    1720:	movt	r2, #0
    1724:	bl	1344 <register_sub_element>
    1728:	ldr	r0, [sp, #4]
    172c:	ldr	r3, [sp]
    1730:	movw	r1, #20
    1734:	movw	r2, #0
    1738:	movt	r2, #0
    173c:	bl	1344 <register_sub_element>
    1740:	ldr	r0, [sp, #4]
    1744:	ldr	r3, [sp]
    1748:	movw	r1, #27
    174c:	movw	r2, #0
    1750:	movt	r2, #0
    1754:	bl	1344 <register_sub_element>
    1758:	ldr	r0, [sp, #4]
    175c:	ldr	r3, [sp]
    1760:	movw	r1, #34	; 0x22
    1764:	movw	r2, #0
    1768:	movt	r2, #0
    176c:	bl	1344 <register_sub_element>
    1770:	ldr	r0, [sp, #4]
    1774:	ldr	r3, [sp]
    1778:	movw	r1, #35	; 0x23
    177c:	movw	r2, #0
    1780:	movt	r2, #0
    1784:	bl	1344 <register_sub_element>
    1788:	ldr	r0, [sp, #4]
    178c:	ldr	r3, [sp]
    1790:	movw	r1, #37	; 0x25
    1794:	movw	r2, #0
    1798:	movt	r2, #0
    179c:	bl	1344 <register_sub_element>
    17a0:	ldr	r0, [sp, #4]
    17a4:	ldr	r3, [sp]
    17a8:	movw	r1, #38	; 0x26
    17ac:	movw	r2, #0
    17b0:	movt	r2, #0
    17b4:	bl	1344 <register_sub_element>
    17b8:	ldr	r0, [sp, #4]
    17bc:	ldr	r3, [sp]
    17c0:	movw	r1, #39	; 0x27
    17c4:	movw	r2, #0
    17c8:	movt	r2, #0
    17cc:	bl	1344 <register_sub_element>
    17d0:	ldr	r0, [sp, #4]
    17d4:	ldr	r3, [sp]
    17d8:	movw	r1, #40	; 0x28
    17dc:	movw	r2, #0
    17e0:	movt	r2, #0
    17e4:	bl	1344 <register_sub_element>
    17e8:	ldr	r0, [sp, #4]
    17ec:	ldr	r3, [sp]
    17f0:	movw	r1, #42	; 0x2a
    17f4:	movw	r2, #0
    17f8:	movt	r2, #0
    17fc:	bl	1344 <register_sub_element>
    1800:	mov	sp, fp
    1804:	pop	{fp, pc}

00001808 <product_class_add_named_type>:
    1808:	push	{fp, lr}
    180c:	mov	fp, sp
    1810:	sub	sp, sp, #8
    1814:	str	r0, [sp]
    1818:	ldr	r0, [sp]
    181c:	ldr	r0, [r0, #24]
    1820:	movw	r1, #0
    1824:	cmp	r0, r1
    1828:	beq	1830 <product_class_add_named_type+0x28>
    182c:	b	1850 <product_class_add_named_type+0x48>
    1830:	movw	r0, #0
    1834:	movt	r0, #0
    1838:	movw	r1, #0
    183c:	movt	r1, #0
    1840:	movw	r2, #1002	; 0x3ea
    1844:	movw	r3, #0
    1848:	movt	r3, #0
    184c:	bl	0 <__assert_fail>
    1850:	ldr	r0, [sp]
    1854:	ldr	r0, [r0, #24]
    1858:	ldr	r1, [sp]
    185c:	ldr	r1, [r1]
    1860:	ldr	r1, [r1, #8]
    1864:	bl	0 <coda_product_class_add_named_type>
    1868:	cmp	r0, #0
    186c:	beq	187c <product_class_add_named_type+0x74>
    1870:	mvn	r0, #0
    1874:	str	r0, [sp, #4]
    1878:	b	1884 <product_class_add_named_type+0x7c>
    187c:	movw	r0, #0
    1880:	str	r0, [sp, #4]
    1884:	ldr	r0, [sp, #4]
    1888:	mov	sp, fp
    188c:	pop	{fp, pc}

00001890 <cd_product_definition_sub_init>:
    1890:	push	{fp, lr}
    1894:	mov	fp, sp
    1898:	sub	sp, sp, #24
    189c:	str	r0, [fp, #-8]
    18a0:	str	r1, [sp, #12]
    18a4:	ldr	r0, [fp, #-8]
    18a8:	ldr	r0, [r0, #28]
    18ac:	movw	r1, #0
    18b0:	cmp	r0, r1
    18b4:	beq	18bc <cd_product_definition_sub_init+0x2c>
    18b8:	b	18dc <cd_product_definition_sub_init+0x4c>
    18bc:	movw	r0, #0
    18c0:	movt	r0, #0
    18c4:	movw	r1, #0
    18c8:	movt	r1, #0
    18cc:	movw	r2, #2974	; 0xb9e
    18d0:	movw	r3, #0
    18d4:	movt	r3, #0
    18d8:	bl	0 <__assert_fail>
    18dc:	ldr	r0, [fp, #-8]
    18e0:	ldr	r0, [r0]
    18e4:	movw	r1, #0
    18e8:	movt	r1, #0
    18ec:	str	r1, [r0, #40]	; 0x28
    18f0:	ldr	r0, [fp, #-8]
    18f4:	ldr	r0, [r0, #28]
    18f8:	ldr	r1, [fp, #-8]
    18fc:	ldr	r1, [r1]
    1900:	str	r0, [r1, #8]
    1904:	ldr	r0, [sp, #12]
    1908:	ldr	r1, [fp, #-8]
    190c:	ldr	r1, [r1]
    1910:	ldr	r2, [r1]
    1914:	movw	r1, #0
    1918:	movt	r1, #0
    191c:	bl	20e4 <get_mandatory_attribute_value>
    1920:	str	r0, [sp, #8]
    1924:	ldr	r0, [sp, #8]
    1928:	movw	r1, #0
    192c:	cmp	r0, r1
    1930:	bne	1940 <cd_product_definition_sub_init+0xb0>
    1934:	mvn	r0, #0
    1938:	str	r0, [fp, #-4]
    193c:	b	1acc <cd_product_definition_sub_init+0x23c>
    1940:	ldr	r0, [fp, #-8]
    1944:	ldr	r0, [r0, #28]
    1948:	ldr	r0, [r0, #8]
    194c:	ldr	r1, [sp, #8]
    1950:	bl	0 <strcmp>
    1954:	cmp	r0, #0
    1958:	beq	1988 <cd_product_definition_sub_init+0xf8>
    195c:	ldr	r0, [pc, #372]	; 1ad8 <cd_product_definition_sub_init+0x248>
    1960:	ldr	r2, [sp, #8]
    1964:	ldr	r1, [fp, #-8]
    1968:	ldr	r1, [r1, #28]
    196c:	ldr	r3, [r1, #8]
    1970:	movw	r1, #0
    1974:	movt	r1, #0
    1978:	bl	0 <coda_set_error>
    197c:	mvn	r0, #0
    1980:	str	r0, [fp, #-4]
    1984:	b	1acc <cd_product_definition_sub_init+0x23c>
    1988:	ldr	r0, [sp, #12]
    198c:	ldr	r1, [fp, #-8]
    1990:	ldr	r1, [r1]
    1994:	ldr	r2, [r1]
    1998:	movw	r1, #0
    199c:	movt	r1, #0
    19a0:	bl	20e4 <get_mandatory_attribute_value>
    19a4:	str	r0, [sp, #4]
    19a8:	ldr	r0, [sp, #4]
    19ac:	movw	r1, #0
    19b0:	cmp	r0, r1
    19b4:	bne	19c4 <cd_product_definition_sub_init+0x134>
    19b8:	mvn	r0, #0
    19bc:	str	r0, [fp, #-4]
    19c0:	b	1acc <cd_product_definition_sub_init+0x23c>
    19c4:	ldr	r0, [sp, #4]
    19c8:	ldr	r1, [fp, #-8]
    19cc:	ldr	r1, [r1]
    19d0:	add	r1, r1, #44	; 0x2c
    19d4:	bl	0 <coda_format_from_string>
    19d8:	cmp	r0, #0
    19dc:	beq	19ec <cd_product_definition_sub_init+0x15c>
    19e0:	mvn	r0, #0
    19e4:	str	r0, [fp, #-4]
    19e8:	b	1acc <cd_product_definition_sub_init+0x23c>
    19ec:	ldr	r0, [fp, #-8]
    19f0:	ldr	r0, [r0]
    19f4:	movw	r1, #1
    19f8:	str	r1, [r0, #48]	; 0x30
    19fc:	ldr	r0, [fp, #-8]
    1a00:	ldr	r0, [r0, #28]
    1a04:	ldr	r0, [r0]
    1a08:	ldr	r1, [fp, #-8]
    1a0c:	ldr	r1, [r1]
    1a10:	ldr	r1, [r1, #44]	; 0x2c
    1a14:	cmp	r0, r1
    1a18:	beq	1a44 <cd_product_definition_sub_init+0x1b4>
    1a1c:	ldr	r0, [pc, #180]	; 1ad8 <cd_product_definition_sub_init+0x248>
    1a20:	ldr	r1, [fp, #-8]
    1a24:	ldr	r1, [r1, #28]
    1a28:	ldr	r2, [r1, #8]
    1a2c:	movw	r1, #0
    1a30:	movt	r1, #0
    1a34:	bl	0 <coda_set_error>
    1a38:	mvn	r0, #0
    1a3c:	str	r0, [fp, #-4]
    1a40:	b	1acc <cd_product_definition_sub_init+0x23c>
    1a44:	ldr	r0, [fp, #-8]
    1a48:	ldr	r0, [r0, #28]
    1a4c:	ldr	r0, [r0]
    1a50:	cmp	r0, #2
    1a54:	bne	1a7c <cd_product_definition_sub_init+0x1ec>
    1a58:	ldr	r0, [fp, #-8]
    1a5c:	ldr	r0, [r0]
    1a60:	movw	r1, #35	; 0x23
    1a64:	movw	r2, #0
    1a68:	movt	r2, #0
    1a6c:	movw	r3, #0
    1a70:	movt	r3, #0
    1a74:	bl	1344 <register_sub_element>
    1a78:	b	1a90 <cd_product_definition_sub_init+0x200>
    1a7c:	ldr	r0, [fp, #-8]
    1a80:	ldr	r0, [r0]
    1a84:	movw	r1, #0
    1a88:	movt	r1, #0
    1a8c:	bl	1684 <register_type_elements>
    1a90:	ldr	r0, [fp, #-8]
    1a94:	ldr	r0, [r0]
    1a98:	movw	r1, #33	; 0x21
    1a9c:	movw	r2, #0
    1aa0:	movt	r2, #0
    1aa4:	movw	r3, #0
    1aa8:	movt	r3, #0
    1aac:	bl	1344 <register_sub_element>
    1ab0:	ldr	r0, [fp, #-8]
    1ab4:	ldr	r0, [r0]
    1ab8:	movw	r1, #0
    1abc:	movt	r1, #0
    1ac0:	str	r1, [r0, #36]	; 0x24
    1ac4:	movw	r0, #0
    1ac8:	str	r0, [fp, #-4]
    1acc:	ldr	r0, [fp, #-4]
    1ad0:	mov	sp, fp
    1ad4:	pop	{fp, pc}
    1ad8:	.word	0xfffffe70

00001adc <xml_element_name>:
    1adc:	sub	sp, sp, #12
    1ae0:	str	r0, [sp, #4]
    1ae4:	ldr	r0, [sp, #4]
    1ae8:	cmn	r0, #1
    1aec:	bne	1b00 <xml_element_name+0x24>
    1af0:	movw	r0, #0
    1af4:	movt	r0, #0
    1af8:	str	r0, [sp, #8]
    1afc:	b	1b4c <xml_element_name+0x70>
    1b00:	ldr	r0, [sp, #4]
    1b04:	movw	r1, #0
    1b08:	movt	r1, #0
    1b0c:	add	r0, r1, r0, lsl #2
    1b10:	ldr	r0, [r0]
    1b14:	str	r0, [sp]
    1b18:	ldr	r0, [sp]
    1b1c:	ldrb	r0, [r0]
    1b20:	cmp	r0, #32
    1b24:	beq	1b38 <xml_element_name+0x5c>
    1b28:	ldr	r0, [sp]
    1b2c:	add	r0, r0, #1
    1b30:	str	r0, [sp]
    1b34:	b	1b18 <xml_element_name+0x3c>
    1b38:	ldr	r0, [sp]
    1b3c:	add	r0, r0, #1
    1b40:	str	r0, [sp]
    1b44:	ldr	r0, [sp]
    1b48:	str	r0, [sp, #8]
    1b4c:	ldr	r0, [sp, #8]
    1b50:	add	sp, sp, #12
    1b54:	bx	lr

00001b58 <abort_parser>:
    1b58:	push	{fp, lr}
    1b5c:	mov	fp, sp
    1b60:	sub	sp, sp, #8
    1b64:	str	r0, [sp, #4]
    1b68:	ldr	r0, [sp, #4]
    1b6c:	ldr	r0, [r0, #4]
    1b70:	movw	r1, #0
    1b74:	and	r1, r1, #255	; 0xff
    1b78:	bl	0 <coda_XML_StopParser>
    1b7c:	ldr	r1, [sp, #4]
    1b80:	movw	r2, #1
    1b84:	str	r2, [r1, #36]	; 0x24
    1b88:	mov	sp, fp
    1b8c:	pop	{fp, pc}

00001b90 <pop_node>:
    1b90:	push	{fp, lr}
    1b94:	mov	fp, sp
    1b98:	sub	sp, sp, #24
    1b9c:	str	r0, [fp, #-8]
    1ba0:	ldr	r0, [fp, #-8]
    1ba4:	ldr	r0, [r0]
    1ba8:	str	r0, [sp, #12]
    1bac:	ldr	r0, [sp, #12]
    1bb0:	movw	r1, #0
    1bb4:	cmp	r0, r1
    1bb8:	beq	1bc0 <pop_node+0x30>
    1bbc:	b	1be0 <pop_node+0x50>
    1bc0:	movw	r0, #0
    1bc4:	movt	r0, #0
    1bc8:	movw	r1, #0
    1bcc:	movt	r1, #0
    1bd0:	movw	r2, #3917	; 0xf4d
    1bd4:	movw	r3, #0
    1bd8:	movt	r3, #0
    1bdc:	bl	0 <__assert_fail>
    1be0:	ldr	r0, [sp, #12]
    1be4:	ldr	r0, [r0, #36]	; 0x24
    1be8:	movw	r1, #0
    1bec:	cmp	r0, r1
    1bf0:	beq	1c28 <pop_node+0x98>
    1bf4:	ldr	r0, [sp, #12]
    1bf8:	ldr	r0, [r0, #36]	; 0x24
    1bfc:	ldr	r1, [fp, #-8]
    1c00:	str	r0, [sp, #8]
    1c04:	mov	r0, r1
    1c08:	ldr	r1, [sp, #8]
    1c0c:	blx	r1
    1c10:	cmp	r0, #0
    1c14:	beq	1c24 <pop_node+0x94>
    1c18:	mvn	r0, #0
    1c1c:	str	r0, [fp, #-4]
    1c20:	b	1da4 <pop_node+0x214>
    1c24:	b	1c28 <pop_node+0x98>
    1c28:	ldr	r0, [sp, #12]
    1c2c:	ldr	r0, [r0, #396]	; 0x18c
    1c30:	movw	r1, #0
    1c34:	cmp	r0, r1
    1c38:	beq	1ca4 <pop_node+0x114>
    1c3c:	ldr	r0, [sp, #12]
    1c40:	ldr	r1, [r0]
    1c44:	ldr	r0, [r0, #396]	; 0x18c
    1c48:	add	r0, r0, #224	; 0xe0
    1c4c:	add	r0, r0, r1, lsl #2
    1c50:	ldr	r0, [r0]
    1c54:	movw	r1, #0
    1c58:	cmp	r0, r1
    1c5c:	beq	1ca4 <pop_node+0x114>
    1c60:	ldr	r0, [sp, #12]
    1c64:	ldr	r1, [r0]
    1c68:	ldr	r0, [r0, #396]	; 0x18c
    1c6c:	add	r0, r0, #224	; 0xe0
    1c70:	add	r0, r0, r1, lsl #2
    1c74:	ldr	r0, [r0]
    1c78:	ldr	r1, [fp, #-8]
    1c7c:	str	r0, [sp, #4]
    1c80:	mov	r0, r1
    1c84:	ldr	r1, [sp, #4]
    1c88:	blx	r1
    1c8c:	cmp	r0, #0
    1c90:	beq	1ca0 <pop_node+0x110>
    1c94:	mvn	r0, #0
    1c98:	str	r0, [fp, #-4]
    1c9c:	b	1da4 <pop_node+0x214>
    1ca0:	b	1ca4 <pop_node+0x114>
    1ca4:	ldr	r0, [sp, #12]
    1ca8:	ldr	r0, [r0, #8]
    1cac:	movw	r1, #0
    1cb0:	cmp	r0, r1
    1cb4:	beq	1d10 <pop_node+0x180>
    1cb8:	ldr	r0, [sp, #12]
    1cbc:	ldr	r0, [r0, #40]	; 0x28
    1cc0:	movw	r1, #0
    1cc4:	cmp	r0, r1
    1cc8:	beq	1cd0 <pop_node+0x140>
    1ccc:	b	1cf0 <pop_node+0x160>
    1cd0:	movw	r0, #0
    1cd4:	movt	r0, #0
    1cd8:	movw	r1, #0
    1cdc:	movt	r1, #0
    1ce0:	movw	r2, #3937	; 0xf61
    1ce4:	movw	r3, #0
    1ce8:	movt	r3, #0
    1cec:	bl	0 <__assert_fail>
    1cf0:	ldr	r0, [sp, #12]
    1cf4:	ldr	r0, [r0, #40]	; 0x28
    1cf8:	ldr	r1, [sp, #12]
    1cfc:	ldr	r1, [r1, #8]
    1d00:	str	r0, [sp]
    1d04:	mov	r0, r1
    1d08:	ldr	r1, [sp]
    1d0c:	blx	r1
    1d10:	ldr	r0, [sp, #12]
    1d14:	ldr	r0, [r0, #12]
    1d18:	movw	r1, #0
    1d1c:	cmp	r0, r1
    1d20:	beq	1d30 <pop_node+0x1a0>
    1d24:	ldr	r0, [sp, #12]
    1d28:	ldr	r0, [r0, #12]
    1d2c:	bl	0 <free>
    1d30:	ldr	r0, [sp, #12]
    1d34:	ldr	r0, [r0, #396]	; 0x18c
    1d38:	ldr	r1, [fp, #-8]
    1d3c:	str	r0, [r1]
    1d40:	ldr	r0, [sp, #12]
    1d44:	bl	0 <free>
    1d48:	ldr	r0, [fp, #-8]
    1d4c:	ldr	r0, [r0]
    1d50:	movw	r1, #0
    1d54:	cmp	r0, r1
    1d58:	beq	1d88 <pop_node+0x1f8>
    1d5c:	ldr	r0, [fp, #-8]
    1d60:	ldr	r0, [r0]
    1d64:	ldr	r0, [r0, #32]
    1d68:	cmp	r0, #0
    1d6c:	beq	1d88 <pop_node+0x1f8>
    1d70:	ldr	r0, [fp, #-8]
    1d74:	ldr	r0, [r0, #4]
    1d78:	movw	r1, #0
    1d7c:	movt	r1, #0
    1d80:	bl	0 <coda_XML_SetCharacterDataHandler>
    1d84:	b	1d9c <pop_node+0x20c>
    1d88:	ldr	r0, [fp, #-8]
    1d8c:	ldr	r0, [r0, #4]
    1d90:	movw	r1, #0
    1d94:	movt	r1, #0
    1d98:	bl	0 <coda_XML_SetCharacterDataHandler>
    1d9c:	movw	r0, #0
    1da0:	str	r0, [fp, #-4]
    1da4:	ldr	r0, [fp, #-4]
    1da8:	mov	sp, fp
    1dac:	pop	{fp, pc}

00001db0 <string_handler>:
    1db0:	push	{fp, lr}
    1db4:	mov	fp, sp
    1db8:	sub	sp, sp, #32
    1dbc:	str	r0, [fp, #-4]
    1dc0:	str	r1, [fp, #-8]
    1dc4:	str	r2, [fp, #-12]
    1dc8:	ldr	r0, [fp, #-4]
    1dcc:	str	r0, [sp, #16]
    1dd0:	ldr	r0, [sp, #16]
    1dd4:	ldr	r0, [r0, #48]	; 0x30
    1dd8:	cmp	r0, #0
    1ddc:	ble	1de4 <string_handler+0x34>
    1de0:	b	1f7c <string_handler+0x1cc>
    1de4:	ldr	r0, [sp, #16]
    1de8:	ldr	r0, [r0]
    1dec:	ldr	r0, [r0, #12]
    1df0:	movw	r1, #0
    1df4:	cmp	r0, r1
    1df8:	bne	1e98 <string_handler+0xe8>
    1dfc:	ldr	r0, [fp, #-12]
    1e00:	add	r0, r0, #1
    1e04:	bl	0 <malloc>
    1e08:	ldr	r1, [sp, #16]
    1e0c:	ldr	r1, [r1]
    1e10:	str	r0, [r1, #12]
    1e14:	ldr	r0, [sp, #16]
    1e18:	ldr	r0, [r0]
    1e1c:	ldr	r0, [r0, #12]
    1e20:	movw	r1, #0
    1e24:	cmp	r0, r1
    1e28:	bne	1e60 <string_handler+0xb0>
    1e2c:	ldr	r0, [fp, #-12]
    1e30:	add	r2, r0, #1
    1e34:	mvn	r0, #0
    1e38:	movw	r1, #0
    1e3c:	movt	r1, #0
    1e40:	movw	r3, #0
    1e44:	movt	r3, #0
    1e48:	movw	ip, #3841	; 0xf01
    1e4c:	str	ip, [sp]
    1e50:	bl	0 <coda_set_error>
    1e54:	ldr	r0, [sp, #16]
    1e58:	bl	1b58 <abort_parser>
    1e5c:	b	1f7c <string_handler+0x1cc>
    1e60:	ldr	r0, [sp, #16]
    1e64:	ldr	r0, [r0]
    1e68:	ldr	r0, [r0, #12]
    1e6c:	ldr	r1, [fp, #-8]
    1e70:	ldr	r2, [fp, #-12]
    1e74:	bl	0 <memcpy>
    1e78:	ldr	r0, [sp, #16]
    1e7c:	ldr	r0, [r0]
    1e80:	ldr	r0, [r0, #12]
    1e84:	ldr	r1, [fp, #-12]
    1e88:	add	r0, r0, r1
    1e8c:	movw	r1, #0
    1e90:	strb	r1, [r0]
    1e94:	b	1f7c <string_handler+0x1cc>
    1e98:	ldr	r0, [sp, #16]
    1e9c:	ldr	r0, [r0]
    1ea0:	ldr	r0, [r0, #12]
    1ea4:	bl	0 <strlen>
    1ea8:	str	r0, [sp, #8]
    1eac:	ldr	r0, [sp, #8]
    1eb0:	ldr	r1, [fp, #-12]
    1eb4:	add	r0, r0, r1
    1eb8:	add	r0, r0, #1
    1ebc:	bl	0 <malloc>
    1ec0:	str	r0, [sp, #12]
    1ec4:	ldr	r0, [sp, #12]
    1ec8:	movw	r1, #0
    1ecc:	cmp	r0, r1
    1ed0:	bne	1f10 <string_handler+0x160>
    1ed4:	ldr	r0, [sp, #8]
    1ed8:	ldr	r1, [fp, #-12]
    1edc:	add	r0, r0, r1
    1ee0:	add	r2, r0, #1
    1ee4:	mvn	r0, #0
    1ee8:	movw	r1, #0
    1eec:	movt	r1, #0
    1ef0:	movw	r3, #0
    1ef4:	movt	r3, #0
    1ef8:	movw	ip, #3857	; 0xf11
    1efc:	str	ip, [sp]
    1f00:	bl	0 <coda_set_error>
    1f04:	ldr	r0, [sp, #16]
    1f08:	bl	1b58 <abort_parser>
    1f0c:	b	1f7c <string_handler+0x1cc>
    1f10:	ldr	r0, [sp, #12]
    1f14:	ldr	r1, [sp, #16]
    1f18:	ldr	r1, [r1]
    1f1c:	ldr	r1, [r1, #12]
    1f20:	ldr	r2, [sp, #8]
    1f24:	bl	0 <memcpy>
    1f28:	ldr	r0, [sp, #12]
    1f2c:	ldr	r1, [sp, #8]
    1f30:	add	r0, r0, r1
    1f34:	ldr	r1, [fp, #-8]
    1f38:	ldr	r2, [fp, #-12]
    1f3c:	bl	0 <memcpy>
    1f40:	ldr	r0, [sp, #12]
    1f44:	ldr	r1, [sp, #8]
    1f48:	ldr	r2, [fp, #-12]
    1f4c:	add	r1, r1, r2
    1f50:	add	r0, r0, r1
    1f54:	movw	r1, #0
    1f58:	strb	r1, [r0]
    1f5c:	ldr	r0, [sp, #16]
    1f60:	ldr	r0, [r0]
    1f64:	ldr	r0, [r0, #12]
    1f68:	bl	0 <free>
    1f6c:	ldr	r0, [sp, #12]
    1f70:	ldr	r1, [sp, #16]
    1f74:	ldr	r1, [r1]
    1f78:	str	r0, [r1, #12]
    1f7c:	mov	sp, fp
    1f80:	pop	{fp, pc}

00001f84 <whitespace_handler>:
    1f84:	push	{fp, lr}
    1f88:	mov	fp, sp
    1f8c:	sub	sp, sp, #16
    1f90:	str	r0, [fp, #-4]
    1f94:	str	r1, [sp, #8]
    1f98:	str	r2, [sp, #4]
    1f9c:	ldr	r0, [fp, #-4]
    1fa0:	str	r0, [sp]
    1fa4:	ldr	r0, [sp]
    1fa8:	ldr	r0, [r0, #48]	; 0x30
    1fac:	cmp	r0, #0
    1fb0:	ble	1fb8 <whitespace_handler+0x34>
    1fb4:	b	1fe4 <whitespace_handler+0x60>
    1fb8:	ldr	r0, [sp, #8]
    1fbc:	ldr	r1, [sp, #4]
    1fc0:	bl	1ff0 <is_whitespace>
    1fc4:	cmp	r0, #0
    1fc8:	bne	1fe4 <whitespace_handler+0x60>
    1fcc:	ldr	r0, [pc, #24]	; 1fec <whitespace_handler+0x68>
    1fd0:	movw	r1, #0
    1fd4:	movt	r1, #0
    1fd8:	bl	0 <coda_set_error>
    1fdc:	ldr	r0, [sp]
    1fe0:	bl	1b58 <abort_parser>
    1fe4:	mov	sp, fp
    1fe8:	pop	{fp, pc}
    1fec:	.word	0xfffffe70

00001ff0 <is_whitespace>:
    1ff0:	push	{fp, lr}
    1ff4:	mov	fp, sp
    1ff8:	sub	sp, sp, #16
    1ffc:	str	r0, [sp, #8]
    2000:	str	r1, [sp, #4]
    2004:	ldr	r0, [sp, #8]
    2008:	movw	r1, #0
    200c:	cmp	r0, r1
    2010:	beq	2018 <is_whitespace+0x28>
    2014:	b	2038 <is_whitespace+0x48>
    2018:	movw	r0, #0
    201c:	movt	r0, #0
    2020:	movw	r1, #0
    2024:	movt	r1, #0
    2028:	movw	r2, #290	; 0x122
    202c:	movw	r3, #0
    2030:	movt	r3, #0
    2034:	bl	0 <__assert_fail>
    2038:	movw	r0, #0
    203c:	str	r0, [sp]
    2040:	ldr	r0, [sp]
    2044:	ldr	r1, [sp, #4]
    2048:	cmp	r0, r1
    204c:	bge	20d0 <is_whitespace+0xe0>
    2050:	ldr	r0, [sp, #8]
    2054:	ldr	r1, [sp]
    2058:	add	r0, r0, r1
    205c:	ldrb	r0, [r0]
    2060:	cmp	r0, #32
    2064:	beq	20bc <is_whitespace+0xcc>
    2068:	ldr	r0, [sp, #8]
    206c:	ldr	r1, [sp]
    2070:	add	r0, r0, r1
    2074:	ldrb	r0, [r0]
    2078:	cmp	r0, #9
    207c:	beq	20bc <is_whitespace+0xcc>
    2080:	ldr	r0, [sp, #8]
    2084:	ldr	r1, [sp]
    2088:	add	r0, r0, r1
    208c:	ldrb	r0, [r0]
    2090:	cmp	r0, #10
    2094:	beq	20bc <is_whitespace+0xcc>
    2098:	ldr	r0, [sp, #8]
    209c:	ldr	r1, [sp]
    20a0:	add	r0, r0, r1
    20a4:	ldrb	r0, [r0]
    20a8:	cmp	r0, #13
    20ac:	beq	20bc <is_whitespace+0xcc>
    20b0:	movw	r0, #0
    20b4:	str	r0, [fp, #-4]
    20b8:	b	20d8 <is_whitespace+0xe8>
    20bc:	b	20c0 <is_whitespace+0xd0>
    20c0:	ldr	r0, [sp]
    20c4:	add	r0, r0, #1
    20c8:	str	r0, [sp]
    20cc:	b	2040 <is_whitespace+0x50>
    20d0:	movw	r0, #1
    20d4:	str	r0, [fp, #-4]
    20d8:	ldr	r0, [fp, #-4]
    20dc:	mov	sp, fp
    20e0:	pop	{fp, pc}

000020e4 <get_mandatory_attribute_value>:
    20e4:	push	{fp, lr}
    20e8:	mov	fp, sp
    20ec:	sub	sp, sp, #24
    20f0:	str	r0, [fp, #-4]
    20f4:	str	r1, [fp, #-8]
    20f8:	str	r2, [sp, #12]
    20fc:	ldr	r0, [fp, #-4]
    2100:	ldr	r1, [fp, #-8]
    2104:	bl	24f4 <get_attribute_value>
    2108:	str	r0, [sp, #8]
    210c:	ldr	r0, [sp, #8]
    2110:	movw	r1, #0
    2114:	cmp	r0, r1
    2118:	bne	214c <get_mandatory_attribute_value+0x68>
    211c:	ldr	r2, [fp, #-8]
    2120:	ldr	r0, [sp, #12]
    2124:	str	r2, [sp, #4]
    2128:	bl	1adc <xml_element_name>
    212c:	ldr	r1, [pc, #36]	; 2158 <get_mandatory_attribute_value+0x74>
    2130:	str	r0, [sp]
    2134:	mov	r0, r1
    2138:	movw	r1, #0
    213c:	movt	r1, #0
    2140:	ldr	r2, [sp, #4]
    2144:	ldr	r3, [sp]
    2148:	bl	0 <coda_set_error>
    214c:	ldr	r0, [sp, #8]
    2150:	mov	sp, fp
    2154:	pop	{fp, pc}
    2158:	.word	0xfffffe70

0000215c <get_product_class_revision>:
    215c:	push	{fp, lr}
    2160:	mov	fp, sp
    2164:	sub	sp, sp, #40	; 0x28
    2168:	str	r0, [fp, #-8]
    216c:	str	r1, [fp, #-12]
    2170:	ldr	r0, [fp, #-8]
    2174:	ldr	r0, [r0, #16]
    2178:	movw	r1, #0
    217c:	movt	r1, #0
    2180:	bl	0 <coda_za_get_entry_by_name>
    2184:	str	r0, [fp, #-16]
    2188:	ldr	r0, [fp, #-16]
    218c:	movw	r1, #0
    2190:	cmp	r0, r1
    2194:	bne	21ac <get_product_class_revision+0x50>
    2198:	ldr	r0, [fp, #-12]
    219c:	movw	r1, #0
    21a0:	str	r1, [r0]
    21a4:	str	r1, [fp, #-4]
    21a8:	b	22bc <get_product_class_revision+0x160>
    21ac:	ldr	r0, [fp, #-16]
    21b0:	bl	0 <coda_za_get_entry_size>
    21b4:	str	r0, [sp, #16]
    21b8:	ldr	r0, [sp, #16]
    21bc:	cmp	r0, #0
    21c0:	bne	21d8 <get_product_class_revision+0x7c>
    21c4:	ldr	r0, [fp, #-12]
    21c8:	movw	r1, #0
    21cc:	str	r1, [r0]
    21d0:	str	r1, [fp, #-4]
    21d4:	b	22bc <get_product_class_revision+0x160>
    21d8:	ldr	r0, [sp, #16]
    21dc:	add	r0, r0, #1
    21e0:	bl	0 <malloc>
    21e4:	str	r0, [sp, #20]
    21e8:	ldr	r0, [sp, #20]
    21ec:	movw	r1, #0
    21f0:	cmp	r0, r1
    21f4:	bne	222c <get_product_class_revision+0xd0>
    21f8:	ldr	r0, [sp, #16]
    21fc:	add	r2, r0, #1
    2200:	mvn	r0, #0
    2204:	movw	r1, #0
    2208:	movt	r1, #0
    220c:	movw	r3, #0
    2210:	movt	r3, #0
    2214:	movw	ip, #2774	; 0xad6
    2218:	str	ip, [sp]
    221c:	bl	0 <coda_set_error>
    2220:	mvn	r0, #0
    2224:	str	r0, [fp, #-4]
    2228:	b	22bc <get_product_class_revision+0x160>
    222c:	ldr	r0, [fp, #-16]
    2230:	ldr	r1, [sp, #20]
    2234:	bl	0 <coda_za_read_entry>
    2238:	cmp	r0, #0
    223c:	beq	2254 <get_product_class_revision+0xf8>
    2240:	ldr	r0, [sp, #20]
    2244:	bl	0 <free>
    2248:	mvn	r0, #0
    224c:	str	r0, [fp, #-4]
    2250:	b	22bc <get_product_class_revision+0x160>
    2254:	ldr	r0, [sp, #20]
    2258:	ldr	r1, [sp, #16]
    225c:	add	r0, r0, r1
    2260:	movw	r1, #0
    2264:	strb	r1, [r0]
    2268:	ldr	r0, [sp, #20]
    226c:	ldr	r1, [sp, #16]
    2270:	add	r2, sp, #8
    2274:	movw	r3, #1
    2278:	bl	0 <coda_ascii_parse_int64>
    227c:	cmp	r0, #0
    2280:	bge	22a0 <get_product_class_revision+0x144>
    2284:	ldr	r0, [sp, #20]
    2288:	bl	0 <free>
    228c:	ldr	r0, [fp, #-12]
    2290:	movw	r1, #0
    2294:	str	r1, [r0]
    2298:	str	r1, [fp, #-4]
    229c:	b	22bc <get_product_class_revision+0x160>
    22a0:	ldr	r0, [sp, #20]
    22a4:	bl	0 <free>
    22a8:	ldr	r0, [sp, #8]
    22ac:	ldr	r1, [fp, #-12]
    22b0:	str	r0, [r1]
    22b4:	movw	r0, #0
    22b8:	str	r0, [fp, #-4]
    22bc:	ldr	r0, [fp, #-4]
    22c0:	mov	sp, fp
    22c4:	pop	{fp, pc}

000022c8 <string_data_init>:
    22c8:	sub	sp, sp, #8
    22cc:	str	r0, [sp, #4]
    22d0:	str	r1, [sp]
    22d4:	ldr	r0, [sp, #4]
    22d8:	ldr	r0, [r0]
    22dc:	movw	r1, #1
    22e0:	str	r1, [r0, #32]
    22e4:	ldr	r0, [sp, #4]
    22e8:	ldr	r0, [r0]
    22ec:	movw	r1, #0
    22f0:	movt	r1, #0
    22f4:	str	r1, [r0, #36]	; 0x24
    22f8:	movw	r0, #0
    22fc:	add	sp, sp, #8
    2300:	bx	lr

00002304 <cd_product_class_set_description>:
    2304:	push	{fp, lr}
    2308:	mov	fp, sp
    230c:	sub	sp, sp, #8
    2310:	str	r0, [sp]
    2314:	ldr	r0, [sp]
    2318:	ldr	r0, [r0]
    231c:	ldr	r0, [r0, #12]
    2320:	movw	r1, #0
    2324:	cmp	r0, r1
    2328:	bne	2350 <cd_product_class_set_description+0x4c>
    232c:	ldr	r0, [sp]
    2330:	ldr	r0, [r0]
    2334:	ldr	r0, [r0, #396]	; 0x18c
    2338:	ldr	r0, [r0, #8]
    233c:	movw	r1, #0
    2340:	movt	r1, #0
    2344:	bl	0 <coda_product_class_set_description>
    2348:	str	r0, [sp, #4]
    234c:	b	2374 <cd_product_class_set_description+0x70>
    2350:	ldr	r0, [sp]
    2354:	ldr	r0, [r0]
    2358:	ldr	r0, [r0, #396]	; 0x18c
    235c:	ldr	r0, [r0, #8]
    2360:	ldr	r1, [sp]
    2364:	ldr	r1, [r1]
    2368:	ldr	r1, [r1, #12]
    236c:	bl	0 <coda_product_class_set_description>
    2370:	str	r0, [sp, #4]
    2374:	ldr	r0, [sp, #4]
    2378:	mov	sp, fp
    237c:	pop	{fp, pc}

00002380 <cd_product_type_init>:
    2380:	push	{fp, lr}
    2384:	mov	fp, sp
    2388:	sub	sp, sp, #16
    238c:	str	r0, [sp, #8]
    2390:	str	r1, [sp, #4]
    2394:	ldr	r0, [sp, #4]
    2398:	ldr	r1, [sp, #8]
    239c:	ldr	r1, [r1]
    23a0:	ldr	r2, [r1]
    23a4:	movw	r1, #0
    23a8:	movt	r1, #0
    23ac:	bl	20e4 <get_mandatory_attribute_value>
    23b0:	str	r0, [sp]
    23b4:	ldr	r0, [sp]
    23b8:	movw	r1, #0
    23bc:	cmp	r0, r1
    23c0:	bne	23d0 <cd_product_type_init+0x50>
    23c4:	mvn	r0, #0
    23c8:	str	r0, [fp, #-4]
    23cc:	b	2464 <cd_product_type_init+0xe4>
    23d0:	movw	r0, #0
    23d4:	movt	r0, #0
    23d8:	ldr	r1, [sp, #8]
    23dc:	ldr	r1, [r1]
    23e0:	str	r0, [r1, #40]	; 0x28
    23e4:	ldr	r0, [sp]
    23e8:	bl	0 <coda_product_type_new>
    23ec:	ldr	r1, [sp, #8]
    23f0:	ldr	r1, [r1]
    23f4:	str	r0, [r1, #8]
    23f8:	ldr	r0, [sp, #8]
    23fc:	ldr	r0, [r0]
    2400:	ldr	r0, [r0, #8]
    2404:	movw	r1, #0
    2408:	cmp	r0, r1
    240c:	bne	241c <cd_product_type_init+0x9c>
    2410:	mvn	r0, #0
    2414:	str	r0, [fp, #-4]
    2418:	b	2464 <cd_product_type_init+0xe4>
    241c:	ldr	r0, [sp, #8]
    2420:	ldr	r0, [r0]
    2424:	movw	r1, #11
    2428:	movw	r2, #0
    242c:	movt	r2, #0
    2430:	movw	r3, #0
    2434:	movt	r3, #0
    2438:	bl	1344 <register_sub_element>
    243c:	ldr	r0, [sp, #8]
    2440:	ldr	r0, [r0]
    2444:	movw	r1, #31
    2448:	movw	r2, #0
    244c:	movt	r2, #0
    2450:	movw	r3, #0
    2454:	movt	r3, #0
    2458:	bl	1344 <register_sub_element>
    245c:	movw	r0, #0
    2460:	str	r0, [fp, #-4]
    2464:	ldr	r0, [fp, #-4]
    2468:	mov	sp, fp
    246c:	pop	{fp, pc}

00002470 <cd_product_class_add_product_type>:
    2470:	push	{fp, lr}
    2474:	mov	fp, sp
    2478:	sub	sp, sp, #8
    247c:	str	r0, [sp]
    2480:	ldr	r0, [sp]
    2484:	ldr	r0, [r0]
    2488:	ldr	r0, [r0, #396]	; 0x18c
    248c:	ldr	r0, [r0, #8]
    2490:	ldr	r1, [sp]
    2494:	ldr	r1, [r1]
    2498:	ldr	r1, [r1, #8]
    249c:	bl	0 <coda_product_class_add_product_type>
    24a0:	cmp	r0, #0
    24a4:	beq	24b4 <cd_product_class_add_product_type+0x44>
    24a8:	mvn	r0, #0
    24ac:	str	r0, [sp, #4]
    24b0:	b	24c8 <cd_product_class_add_product_type+0x58>
    24b4:	ldr	r0, [sp]
    24b8:	ldr	r0, [r0]
    24bc:	movw	r1, #0
    24c0:	str	r1, [r0, #8]
    24c4:	str	r1, [sp, #4]
    24c8:	ldr	r0, [sp, #4]
    24cc:	mov	sp, fp
    24d0:	pop	{fp, pc}

000024d4 <cd_product_class_finalise>:
    24d4:	sub	sp, sp, #4
    24d8:	str	r0, [sp]
    24dc:	ldr	r0, [sp]
    24e0:	movw	r1, #0
    24e4:	str	r1, [r0, #24]
    24e8:	mov	r0, r1
    24ec:	add	sp, sp, #4
    24f0:	bx	lr

000024f4 <get_attribute_value>:
    24f4:	push	{fp, lr}
    24f8:	mov	fp, sp
    24fc:	sub	sp, sp, #16
    2500:	str	r0, [sp, #8]
    2504:	str	r1, [sp, #4]
    2508:	ldr	r0, [sp, #8]
    250c:	ldr	r0, [r0]
    2510:	movw	r1, #0
    2514:	cmp	r0, r1
    2518:	beq	2554 <get_attribute_value+0x60>
    251c:	ldr	r0, [sp, #8]
    2520:	ldr	r0, [r0]
    2524:	ldr	r1, [sp, #4]
    2528:	bl	0 <strcmp>
    252c:	cmp	r0, #0
    2530:	bne	2544 <get_attribute_value+0x50>
    2534:	ldr	r0, [sp, #8]
    2538:	ldr	r0, [r0, #4]
    253c:	str	r0, [fp, #-4]
    2540:	b	255c <get_attribute_value+0x68>
    2544:	ldr	r0, [sp, #8]
    2548:	add	r0, r0, #8
    254c:	str	r0, [sp, #8]
    2550:	b	2508 <get_attribute_value+0x14>
    2554:	movw	r0, #0
    2558:	str	r0, [fp, #-4]
    255c:	ldr	r0, [fp, #-4]
    2560:	mov	sp, fp
    2564:	pop	{fp, pc}

00002568 <string_data_finalise>:
    2568:	push	{fp, lr}
    256c:	mov	fp, sp
    2570:	sub	sp, sp, #8
    2574:	str	r0, [sp, #4]
    2578:	ldr	r0, [sp, #4]
    257c:	ldr	r0, [r0]
    2580:	ldr	r0, [r0, #12]
    2584:	bl	259c <decode_xml_string>
    2588:	movw	r1, #0
    258c:	str	r0, [sp]
    2590:	mov	r0, r1
    2594:	mov	sp, fp
    2598:	pop	{fp, pc}

0000259c <decode_xml_string>:
    259c:	push	{fp, lr}
    25a0:	mov	fp, sp
    25a4:	sub	sp, sp, #16
    25a8:	str	r0, [sp, #8]
    25ac:	ldr	r0, [sp, #8]
    25b0:	movw	r1, #0
    25b4:	cmp	r0, r1
    25b8:	bne	25c8 <decode_xml_string+0x2c>
    25bc:	movw	r0, #0
    25c0:	str	r0, [fp, #-4]
    25c4:	b	2844 <decode_xml_string+0x2a8>
    25c8:	movw	r0, #0
    25cc:	str	r0, [sp, #4]
    25d0:	str	r0, [sp]
    25d4:	ldr	r0, [sp, #8]
    25d8:	ldr	r1, [sp, #4]
    25dc:	add	r0, r0, r1
    25e0:	ldrb	r0, [r0]
    25e4:	cmp	r0, #0
    25e8:	beq	2828 <decode_xml_string+0x28c>
    25ec:	ldr	r0, [sp, #8]
    25f0:	ldr	r1, [sp, #4]
    25f4:	add	r0, r0, r1
    25f8:	ldrb	r0, [r0]
    25fc:	cmp	r0, #38	; 0x26
    2600:	bne	27f0 <decode_xml_string+0x254>
    2604:	ldr	r0, [sp, #8]
    2608:	ldr	r1, [sp, #4]
    260c:	add	r1, r1, #1
    2610:	add	r0, r0, r1
    2614:	movw	r1, #0
    2618:	movt	r1, #0
    261c:	movw	r2, #4
    2620:	bl	0 <strncmp>
    2624:	cmp	r0, #0
    2628:	bne	2658 <decode_xml_string+0xbc>
    262c:	ldr	r0, [sp, #8]
    2630:	ldr	r1, [sp]
    2634:	add	r2, r1, #1
    2638:	str	r2, [sp]
    263c:	add	r0, r0, r1
    2640:	movw	r1, #38	; 0x26
    2644:	strb	r1, [r0]
    2648:	ldr	r0, [sp, #4]
    264c:	add	r0, r0, #5
    2650:	str	r0, [sp, #4]
    2654:	b	27ec <decode_xml_string+0x250>
    2658:	ldr	r0, [sp, #8]
    265c:	ldr	r1, [sp, #4]
    2660:	add	r1, r1, #1
    2664:	add	r0, r0, r1
    2668:	movw	r1, #0
    266c:	movt	r1, #0
    2670:	movw	r2, #5
    2674:	bl	0 <strncmp>
    2678:	cmp	r0, #0
    267c:	bne	26ac <decode_xml_string+0x110>
    2680:	ldr	r0, [sp, #8]
    2684:	ldr	r1, [sp]
    2688:	add	r2, r1, #1
    268c:	str	r2, [sp]
    2690:	add	r0, r0, r1
    2694:	movw	r1, #39	; 0x27
    2698:	strb	r1, [r0]
    269c:	ldr	r0, [sp, #4]
    26a0:	add	r0, r0, #6
    26a4:	str	r0, [sp, #4]
    26a8:	b	27e8 <decode_xml_string+0x24c>
    26ac:	ldr	r0, [sp, #8]
    26b0:	ldr	r1, [sp, #4]
    26b4:	add	r1, r1, #1
    26b8:	add	r0, r0, r1
    26bc:	movw	r1, #0
    26c0:	movt	r1, #0
    26c4:	movw	r2, #3
    26c8:	bl	0 <strncmp>
    26cc:	cmp	r0, #0
    26d0:	bne	2700 <decode_xml_string+0x164>
    26d4:	ldr	r0, [sp, #8]
    26d8:	ldr	r1, [sp]
    26dc:	add	r2, r1, #1
    26e0:	str	r2, [sp]
    26e4:	add	r0, r0, r1
    26e8:	movw	r1, #60	; 0x3c
    26ec:	strb	r1, [r0]
    26f0:	ldr	r0, [sp, #4]
    26f4:	add	r0, r0, #4
    26f8:	str	r0, [sp, #4]
    26fc:	b	27e4 <decode_xml_string+0x248>
    2700:	ldr	r0, [sp, #8]
    2704:	ldr	r1, [sp, #4]
    2708:	add	r1, r1, #1
    270c:	add	r0, r0, r1
    2710:	movw	r1, #0
    2714:	movt	r1, #0
    2718:	movw	r2, #3
    271c:	bl	0 <strncmp>
    2720:	cmp	r0, #0
    2724:	bne	2754 <decode_xml_string+0x1b8>
    2728:	ldr	r0, [sp, #8]
    272c:	ldr	r1, [sp]
    2730:	add	r2, r1, #1
    2734:	str	r2, [sp]
    2738:	add	r0, r0, r1
    273c:	movw	r1, #60	; 0x3c
    2740:	strb	r1, [r0]
    2744:	ldr	r0, [sp, #4]
    2748:	add	r0, r0, #4
    274c:	str	r0, [sp, #4]
    2750:	b	27e0 <decode_xml_string+0x244>
    2754:	ldr	r0, [sp, #8]
    2758:	ldr	r1, [sp, #4]
    275c:	add	r1, r1, #1
    2760:	add	r0, r0, r1
    2764:	movw	r1, #0
    2768:	movt	r1, #0
    276c:	movw	r2, #5
    2770:	bl	0 <strncmp>
    2774:	cmp	r0, #0
    2778:	bne	27a8 <decode_xml_string+0x20c>
    277c:	ldr	r0, [sp, #8]
    2780:	ldr	r1, [sp]
    2784:	add	r2, r1, #1
    2788:	str	r2, [sp]
    278c:	add	r0, r0, r1
    2790:	movw	r1, #34	; 0x22
    2794:	strb	r1, [r0]
    2798:	ldr	r0, [sp, #4]
    279c:	add	r0, r0, #6
    27a0:	str	r0, [sp, #4]
    27a4:	b	27dc <decode_xml_string+0x240>
    27a8:	ldr	r0, [sp, #8]
    27ac:	ldr	r1, [sp, #4]
    27b0:	add	r0, r0, r1
    27b4:	ldrb	r0, [r0]
    27b8:	ldr	r1, [sp, #8]
    27bc:	ldr	r2, [sp]
    27c0:	add	r3, r2, #1
    27c4:	str	r3, [sp]
    27c8:	add	r1, r1, r2
    27cc:	strb	r0, [r1]
    27d0:	ldr	r0, [sp, #4]
    27d4:	add	r0, r0, #1
    27d8:	str	r0, [sp, #4]
    27dc:	b	27e0 <decode_xml_string+0x244>
    27e0:	b	27e4 <decode_xml_string+0x248>
    27e4:	b	27e8 <decode_xml_string+0x24c>
    27e8:	b	27ec <decode_xml_string+0x250>
    27ec:	b	2824 <decode_xml_string+0x288>
    27f0:	ldr	r0, [sp, #8]
    27f4:	ldr	r1, [sp, #4]
    27f8:	add	r0, r0, r1
    27fc:	ldrb	r0, [r0]
    2800:	ldr	r1, [sp, #8]
    2804:	ldr	r2, [sp]
    2808:	add	r3, r2, #1
    280c:	str	r3, [sp]
    2810:	add	r1, r1, r2
    2814:	strb	r0, [r1]
    2818:	ldr	r0, [sp, #4]
    281c:	add	r0, r0, #1
    2820:	str	r0, [sp, #4]
    2824:	b	25d4 <decode_xml_string+0x38>
    2828:	ldr	r0, [sp, #8]
    282c:	ldr	r1, [sp]
    2830:	add	r0, r0, r1
    2834:	movw	r1, #0
    2838:	strb	r1, [r0]
    283c:	ldr	r0, [sp]
    2840:	str	r0, [fp, #-4]
    2844:	ldr	r0, [fp, #-4]
    2848:	mov	sp, fp
    284c:	pop	{fp, pc}

00002850 <cd_product_type_set_description>:
    2850:	push	{fp, lr}
    2854:	mov	fp, sp
    2858:	sub	sp, sp, #8
    285c:	str	r0, [sp]
    2860:	ldr	r0, [sp]
    2864:	ldr	r0, [r0]
    2868:	ldr	r0, [r0, #12]
    286c:	movw	r1, #0
    2870:	cmp	r0, r1
    2874:	bne	289c <cd_product_type_set_description+0x4c>
    2878:	ldr	r0, [sp]
    287c:	ldr	r0, [r0]
    2880:	ldr	r0, [r0, #396]	; 0x18c
    2884:	ldr	r0, [r0, #8]
    2888:	movw	r1, #0
    288c:	movt	r1, #0
    2890:	bl	0 <coda_product_type_set_description>
    2894:	str	r0, [sp, #4]
    2898:	b	28c0 <cd_product_type_set_description+0x70>
    289c:	ldr	r0, [sp]
    28a0:	ldr	r0, [r0]
    28a4:	ldr	r0, [r0, #396]	; 0x18c
    28a8:	ldr	r0, [r0, #8]
    28ac:	ldr	r1, [sp]
    28b0:	ldr	r1, [r1]
    28b4:	ldr	r1, [r1, #12]
    28b8:	bl	0 <coda_product_type_set_description>
    28bc:	str	r0, [sp, #4]
    28c0:	ldr	r0, [sp, #4]
    28c4:	mov	sp, fp
    28c8:	pop	{fp, pc}

000028cc <cd_product_definition_init>:
    28cc:	push	{fp, lr}
    28d0:	mov	fp, sp
    28d4:	sub	sp, sp, #40	; 0x28
    28d8:	str	r0, [fp, #-8]
    28dc:	str	r1, [fp, #-12]
    28e0:	ldr	r0, [fp, #-12]
    28e4:	ldr	r1, [fp, #-8]
    28e8:	ldr	r1, [r1]
    28ec:	ldr	r2, [r1]
    28f0:	movw	r1, #0
    28f4:	movt	r1, #0
    28f8:	bl	20e4 <get_mandatory_attribute_value>
    28fc:	str	r0, [fp, #-16]
    2900:	ldr	r0, [fp, #-16]
    2904:	movw	r1, #0
    2908:	cmp	r0, r1
    290c:	bne	291c <cd_product_definition_init+0x50>
    2910:	mvn	r0, #0
    2914:	str	r0, [fp, #-4]
    2918:	b	2b44 <cd_product_definition_init+0x278>
    291c:	ldr	r0, [fp, #-12]
    2920:	ldr	r1, [fp, #-8]
    2924:	ldr	r1, [r1]
    2928:	ldr	r2, [r1]
    292c:	movw	r1, #0
    2930:	movt	r1, #0
    2934:	bl	20e4 <get_mandatory_attribute_value>
    2938:	str	r0, [sp, #20]
    293c:	ldr	r0, [sp, #20]
    2940:	movw	r1, #0
    2944:	cmp	r0, r1
    2948:	bne	2958 <cd_product_definition_init+0x8c>
    294c:	mvn	r0, #0
    2950:	str	r0, [fp, #-4]
    2954:	b	2b44 <cd_product_definition_init+0x278>
    2958:	ldr	r0, [sp, #20]
    295c:	ldr	r1, [fp, #-8]
    2960:	ldr	r1, [r1]
    2964:	add	r1, r1, #44	; 0x2c
    2968:	bl	0 <coda_format_from_string>
    296c:	cmp	r0, #0
    2970:	beq	2980 <cd_product_definition_init+0xb4>
    2974:	mvn	r0, #0
    2978:	str	r0, [fp, #-4]
    297c:	b	2b44 <cd_product_definition_init+0x278>
    2980:	ldr	r0, [fp, #-8]
    2984:	ldr	r0, [r0]
    2988:	movw	r1, #1
    298c:	str	r1, [r0, #48]	; 0x30
    2990:	ldr	r0, [fp, #-12]
    2994:	ldr	r1, [fp, #-8]
    2998:	ldr	r1, [r1]
    299c:	ldr	r2, [r1]
    29a0:	movw	r1, #0
    29a4:	movt	r1, #0
    29a8:	bl	20e4 <get_mandatory_attribute_value>
    29ac:	str	r0, [sp, #16]
    29b0:	ldr	r0, [sp, #16]
    29b4:	movw	r1, #0
    29b8:	cmp	r0, r1
    29bc:	bne	29cc <cd_product_definition_init+0x100>
    29c0:	mvn	r0, #0
    29c4:	str	r0, [fp, #-4]
    29c8:	b	2b44 <cd_product_definition_init+0x278>
    29cc:	ldr	r0, [sp, #16]
    29d0:	movw	r1, #0
    29d4:	movt	r1, #0
    29d8:	add	r2, sp, #12
    29dc:	bl	0 <__isoc99_sscanf>
    29e0:	cmp	r0, #1
    29e4:	beq	2a08 <cd_product_definition_init+0x13c>
    29e8:	ldr	r0, [pc, #356]	; 2b54 <cd_product_definition_init+0x288>
    29ec:	ldr	r2, [sp, #16]
    29f0:	movw	r1, #0
    29f4:	movt	r1, #0
    29f8:	bl	0 <coda_set_error>
    29fc:	mvn	r0, #0
    2a00:	str	r0, [fp, #-4]
    2a04:	b	2b44 <cd_product_definition_init+0x278>
    2a08:	movw	r0, #0
    2a0c:	movt	r0, #0
    2a10:	ldr	r1, [fp, #-8]
    2a14:	ldr	r1, [r1]
    2a18:	str	r0, [r1, #40]	; 0x28
    2a1c:	ldr	r0, [fp, #-16]
    2a20:	ldr	r1, [fp, #-8]
    2a24:	ldr	r1, [r1]
    2a28:	ldr	r1, [r1, #44]	; 0x2c
    2a2c:	ldr	r2, [sp, #12]
    2a30:	bl	0 <coda_product_definition_new>
    2a34:	ldr	r1, [fp, #-8]
    2a38:	str	r0, [r1, #28]
    2a3c:	ldr	r0, [fp, #-8]
    2a40:	ldr	r0, [r0, #28]
    2a44:	movw	r1, #0
    2a48:	cmp	r0, r1
    2a4c:	bne	2a5c <cd_product_definition_init+0x190>
    2a50:	mvn	r0, #0
    2a54:	str	r0, [fp, #-4]
    2a58:	b	2b44 <cd_product_definition_init+0x278>
    2a5c:	ldr	r0, [pc, #236]	; 2b50 <cd_product_definition_init+0x284>
    2a60:	ldr	r0, [pc, r0]
    2a64:	str	r0, [sp, #8]
    2a68:	bl	0 <__aeabi_read_tp>
    2a6c:	ldr	r1, [sp, #8]
    2a70:	ldr	r0, [r0, r1]
    2a74:	cmp	r0, #0
    2a78:	beq	2ae8 <cd_product_definition_init+0x21c>
    2a7c:	ldr	r0, [fp, #-8]
    2a80:	ldr	r0, [r0, #16]
    2a84:	ldr	r2, [fp, #-16]
    2a88:	ldr	r1, [fp, #-8]
    2a8c:	ldr	r3, [r1, #24]
    2a90:	ldr	r1, [fp, #-8]
    2a94:	ldr	r1, [r1, #28]
    2a98:	movw	ip, #2
    2a9c:	str	r1, [sp, #4]
    2aa0:	mov	r1, ip
    2aa4:	ldr	ip, [sp, #4]
    2aa8:	str	ip, [sp]
    2aac:	bl	148 <parse_entry>
    2ab0:	cmp	r0, #0
    2ab4:	beq	2ae4 <cd_product_definition_init+0x218>
    2ab8:	ldr	r0, [fp, #-8]
    2abc:	ldr	r0, [r0, #28]
    2ac0:	bl	0 <coda_product_definition_delete>
    2ac4:	ldr	r0, [fp, #-8]
    2ac8:	movw	r1, #0
    2acc:	str	r1, [r0, #28]
    2ad0:	ldr	r0, [fp, #-8]
    2ad4:	str	r1, [r0, #44]	; 0x2c
    2ad8:	mvn	r0, #0
    2adc:	str	r0, [fp, #-4]
    2ae0:	b	2b44 <cd_product_definition_init+0x278>
    2ae4:	b	2ae8 <cd_product_definition_init+0x21c>
    2ae8:	ldr	r0, [fp, #-8]
    2aec:	ldr	r0, [r0, #28]
    2af0:	ldr	r1, [fp, #-8]
    2af4:	ldr	r1, [r1]
    2af8:	str	r0, [r1, #8]
    2afc:	ldr	r0, [fp, #-8]
    2b00:	ldr	r0, [r0]
    2b04:	movw	r1, #11
    2b08:	movw	r2, #0
    2b0c:	movt	r2, #0
    2b10:	movw	r3, #0
    2b14:	movt	r3, #0
    2b18:	bl	1344 <register_sub_element>
    2b1c:	ldr	r0, [fp, #-8]
    2b20:	ldr	r0, [r0]
    2b24:	movw	r1, #12
    2b28:	movw	r2, #0
    2b2c:	movt	r2, #0
    2b30:	movw	r3, #0
    2b34:	movt	r3, #0
    2b38:	bl	1344 <register_sub_element>
    2b3c:	movw	r0, #0
    2b40:	str	r0, [fp, #-4]
    2b44:	ldr	r0, [fp, #-4]
    2b48:	mov	sp, fp
    2b4c:	pop	{fp, pc}
    2b50:	.word	0x000000e8
    2b54:	.word	0xfffffe70

00002b58 <cd_product_type_add_product_definition>:
    2b58:	push	{fp, lr}
    2b5c:	mov	fp, sp
    2b60:	sub	sp, sp, #8
    2b64:	str	r0, [sp]
    2b68:	ldr	r0, [sp]
    2b6c:	ldr	r0, [r0]
    2b70:	ldr	r0, [r0, #396]	; 0x18c
    2b74:	ldr	r0, [r0, #8]
    2b78:	ldr	r1, [sp]
    2b7c:	ldr	r1, [r1]
    2b80:	ldr	r1, [r1, #8]
    2b84:	bl	0 <coda_product_type_add_product_definition>
    2b88:	cmp	r0, #0
    2b8c:	beq	2b9c <cd_product_type_add_product_definition+0x44>
    2b90:	mvn	r0, #0
    2b94:	str	r0, [sp, #4]
    2b98:	b	2bb0 <cd_product_type_add_product_definition+0x58>
    2b9c:	ldr	r0, [sp]
    2ba0:	ldr	r0, [r0]
    2ba4:	movw	r1, #0
    2ba8:	str	r1, [r0, #8]
    2bac:	str	r1, [sp, #4]
    2bb0:	ldr	r0, [sp, #4]
    2bb4:	mov	sp, fp
    2bb8:	pop	{fp, pc}

00002bbc <cd_product_definition_set_description>:
    2bbc:	push	{fp, lr}
    2bc0:	mov	fp, sp
    2bc4:	sub	sp, sp, #8
    2bc8:	str	r0, [sp]
    2bcc:	ldr	r0, [sp]
    2bd0:	ldr	r0, [r0]
    2bd4:	ldr	r0, [r0, #12]
    2bd8:	movw	r1, #0
    2bdc:	cmp	r0, r1
    2be0:	bne	2c08 <cd_product_definition_set_description+0x4c>
    2be4:	ldr	r0, [sp]
    2be8:	ldr	r0, [r0]
    2bec:	ldr	r0, [r0, #396]	; 0x18c
    2bf0:	ldr	r0, [r0, #8]
    2bf4:	movw	r1, #0
    2bf8:	movt	r1, #0
    2bfc:	bl	0 <coda_product_definition_set_description>
    2c00:	str	r0, [sp, #4]
    2c04:	b	2c2c <cd_product_definition_set_description+0x70>
    2c08:	ldr	r0, [sp]
    2c0c:	ldr	r0, [r0]
    2c10:	ldr	r0, [r0, #396]	; 0x18c
    2c14:	ldr	r0, [r0, #8]
    2c18:	ldr	r1, [sp]
    2c1c:	ldr	r1, [r1]
    2c20:	ldr	r1, [r1, #12]
    2c24:	bl	0 <coda_product_definition_set_description>
    2c28:	str	r0, [sp, #4]
    2c2c:	ldr	r0, [sp, #4]
    2c30:	mov	sp, fp
    2c34:	pop	{fp, pc}

00002c38 <cd_detection_rule_init>:
    2c38:	push	{fp, lr}
    2c3c:	mov	fp, sp
    2c40:	sub	sp, sp, #16
    2c44:	movw	r2, #0
    2c48:	movt	r2, #0
    2c4c:	str	r0, [sp, #8]
    2c50:	str	r1, [sp, #4]
    2c54:	ldr	r0, [sp, #8]
    2c58:	ldr	r0, [r0]
    2c5c:	str	r2, [r0, #40]	; 0x28
    2c60:	bl	0 <coda_detection_rule_new>
    2c64:	ldr	r1, [sp, #8]
    2c68:	ldr	r1, [r1]
    2c6c:	str	r0, [r1, #8]
    2c70:	ldr	r0, [sp, #8]
    2c74:	ldr	r0, [r0]
    2c78:	ldr	r0, [r0, #8]
    2c7c:	movw	r1, #0
    2c80:	cmp	r0, r1
    2c84:	bne	2c94 <cd_detection_rule_init+0x5c>
    2c88:	mvn	r0, #0
    2c8c:	str	r0, [fp, #-4]
    2c90:	b	2d1c <cd_detection_rule_init+0xe4>
    2c94:	ldr	r0, [sp, #8]
    2c98:	ldr	r0, [r0]
    2c9c:	movw	r1, #23
    2ca0:	movw	r2, #0
    2ca4:	movt	r2, #0
    2ca8:	movw	r3, #0
    2cac:	movt	r3, #0
    2cb0:	bl	1344 <register_sub_element>
    2cb4:	ldr	r0, [sp, #8]
    2cb8:	ldr	r0, [r0]
    2cbc:	movw	r1, #24
    2cc0:	movw	r2, #0
    2cc4:	movt	r2, #0
    2cc8:	movw	r3, #0
    2ccc:	movt	r3, #0
    2cd0:	bl	1344 <register_sub_element>
    2cd4:	ldr	r0, [sp, #8]
    2cd8:	ldr	r0, [r0]
    2cdc:	movw	r1, #25
    2ce0:	movw	r2, #0
    2ce4:	movt	r2, #0
    2ce8:	movw	r3, #0
    2cec:	movt	r3, #0
    2cf0:	bl	1344 <register_sub_element>
    2cf4:	ldr	r0, [sp, #8]
    2cf8:	ldr	r0, [r0]
    2cfc:	movw	r1, #26
    2d00:	movw	r2, #0
    2d04:	movt	r2, #0
    2d08:	movw	r3, #0
    2d0c:	movt	r3, #0
    2d10:	bl	1344 <register_sub_element>
    2d14:	movw	r0, #0
    2d18:	str	r0, [fp, #-4]
    2d1c:	ldr	r0, [fp, #-4]
    2d20:	mov	sp, fp
    2d24:	pop	{fp, pc}

00002d28 <cd_product_definition_add_detection_rule>:
    2d28:	push	{fp, lr}
    2d2c:	mov	fp, sp
    2d30:	sub	sp, sp, #8
    2d34:	str	r0, [sp]
    2d38:	ldr	r0, [sp]
    2d3c:	ldr	r0, [r0]
    2d40:	ldr	r0, [r0, #396]	; 0x18c
    2d44:	ldr	r0, [r0, #8]
    2d48:	ldr	r1, [sp]
    2d4c:	ldr	r1, [r1]
    2d50:	ldr	r1, [r1, #8]
    2d54:	bl	0 <coda_product_definition_add_detection_rule>
    2d58:	cmp	r0, #0
    2d5c:	beq	2d6c <cd_product_definition_add_detection_rule+0x44>
    2d60:	mvn	r0, #0
    2d64:	str	r0, [sp, #4]
    2d68:	b	2d80 <cd_product_definition_add_detection_rule+0x58>
    2d6c:	ldr	r0, [sp]
    2d70:	ldr	r0, [r0]
    2d74:	movw	r1, #0
    2d78:	str	r1, [r0, #8]
    2d7c:	str	r1, [sp, #4]
    2d80:	ldr	r0, [sp, #4]
    2d84:	mov	sp, fp
    2d88:	pop	{fp, pc}

00002d8c <cd_match_data_init>:
    2d8c:	push	{fp, lr}
    2d90:	mov	fp, sp
    2d94:	sub	sp, sp, #40	; 0x28
    2d98:	movw	r2, #0
    2d9c:	movt	r2, #0
    2da0:	str	r0, [fp, #-8]
    2da4:	str	r1, [fp, #-12]
    2da8:	ldr	r0, [fp, #-8]
    2dac:	ldr	r0, [r0]
    2db0:	str	r2, [r0, #40]	; 0x28
    2db4:	ldr	r0, [fp, #-12]
    2db8:	movw	r1, #0
    2dbc:	movt	r1, #0
    2dc0:	bl	24f4 <get_attribute_value>
    2dc4:	str	r0, [fp, #-16]
    2dc8:	ldr	r0, [fp, #-12]
    2dcc:	movw	r1, #0
    2dd0:	movt	r1, #0
    2dd4:	bl	24f4 <get_attribute_value>
    2dd8:	str	r0, [sp, #20]
    2ddc:	ldr	r0, [sp, #20]
    2de0:	movw	r1, #0
    2de4:	cmp	r0, r1
    2de8:	bne	2e28 <cd_match_data_init+0x9c>
    2dec:	movw	r0, #0
    2df0:	bl	0 <coda_detection_rule_entry_new>
    2df4:	ldr	r1, [fp, #-8]
    2df8:	ldr	r1, [r1]
    2dfc:	str	r0, [r1, #8]
    2e00:	ldr	r0, [fp, #-8]
    2e04:	ldr	r0, [r0]
    2e08:	ldr	r0, [r0, #8]
    2e0c:	movw	r1, #0
    2e10:	cmp	r0, r1
    2e14:	bne	2e24 <cd_match_data_init+0x98>
    2e18:	mvn	r0, #0
    2e1c:	str	r0, [fp, #-4]
    2e20:	b	2fe8 <cd_match_data_init+0x25c>
    2e24:	b	2e28 <cd_match_data_init+0x9c>
    2e28:	ldr	r0, [fp, #-16]
    2e2c:	movw	r1, #0
    2e30:	cmp	r0, r1
    2e34:	beq	2f34 <cd_match_data_init+0x1a8>
    2e38:	ldr	r0, [sp, #20]
    2e3c:	movw	r1, #0
    2e40:	cmp	r0, r1
    2e44:	beq	2e64 <cd_match_data_init+0xd8>
    2e48:	ldr	r0, [pc, #420]	; 2ff4 <cd_match_data_init+0x268>
    2e4c:	movw	r1, #0
    2e50:	movt	r1, #0
    2e54:	bl	0 <coda_set_error>
    2e58:	mvn	r0, #0
    2e5c:	str	r0, [fp, #-4]
    2e60:	b	2fe8 <cd_match_data_init+0x25c>
    2e64:	ldr	r0, [fp, #-16]
    2e68:	bl	0 <strdup>
    2e6c:	str	r0, [sp, #12]
    2e70:	ldr	r0, [sp, #12]
    2e74:	movw	r1, #0
    2e78:	cmp	r0, r1
    2e7c:	bne	2ea8 <cd_match_data_init+0x11c>
    2e80:	mvn	r0, #0
    2e84:	movw	r1, #0
    2e88:	movt	r1, #0
    2e8c:	movw	r2, #0
    2e90:	movt	r2, #0
    2e94:	movw	r3, #2459	; 0x99b
    2e98:	bl	0 <coda_set_error>
    2e9c:	mvn	r0, #0
    2ea0:	str	r0, [fp, #-4]
    2ea4:	b	2fe8 <cd_match_data_init+0x25c>
    2ea8:	ldr	r1, [sp, #12]
    2eac:	movw	r0, #20
    2eb0:	movw	r2, #0
    2eb4:	str	r2, [sp, #8]
    2eb8:	ldr	r3, [sp, #8]
    2ebc:	ldr	ip, [sp, #8]
    2ec0:	str	ip, [sp]
    2ec4:	str	ip, [sp, #4]
    2ec8:	bl	0 <coda_expression_new>
    2ecc:	str	r0, [sp, #16]
    2ed0:	ldr	r0, [sp, #16]
    2ed4:	movw	r1, #0
    2ed8:	cmp	r0, r1
    2edc:	bne	2f00 <cd_match_data_init+0x174>
    2ee0:	ldr	r0, [pc, #268]	; 2ff4 <cd_match_data_init+0x268>
    2ee4:	ldr	r2, [fp, #-16]
    2ee8:	movw	r1, #0
    2eec:	movt	r1, #0
    2ef0:	bl	0 <coda_set_error>
    2ef4:	mvn	r0, #0
    2ef8:	str	r0, [fp, #-4]
    2efc:	b	2fe8 <cd_match_data_init+0x25c>
    2f00:	ldr	r0, [fp, #-8]
    2f04:	ldr	r0, [r0]
    2f08:	ldr	r0, [r0, #8]
    2f0c:	ldr	r1, [sp, #16]
    2f10:	bl	0 <coda_detection_rule_entry_set_expression>
    2f14:	cmp	r0, #0
    2f18:	beq	2f30 <cd_match_data_init+0x1a4>
    2f1c:	ldr	r0, [sp, #16]
    2f20:	bl	0 <coda_expression_delete>
    2f24:	mvn	r0, #0
    2f28:	str	r0, [fp, #-4]
    2f2c:	b	2fe8 <cd_match_data_init+0x25c>
    2f30:	b	2fbc <cd_match_data_init+0x230>
    2f34:	ldr	r0, [sp, #20]
    2f38:	movw	r1, #0
    2f3c:	cmp	r0, r1
    2f40:	beq	2fb8 <cd_match_data_init+0x22c>
    2f44:	ldr	r0, [fp, #-8]
    2f48:	ldr	r0, [r0]
    2f4c:	ldr	r0, [r0, #396]	; 0x18c
    2f50:	ldr	r0, [r0, #8]
    2f54:	ldr	r1, [sp, #20]
    2f58:	add	r2, sp, #12
    2f5c:	bl	34d8 <add_detection_rule_entry_for_path>
    2f60:	cmp	r0, #0
    2f64:	beq	2f74 <cd_match_data_init+0x1e8>
    2f68:	mvn	r0, #0
    2f6c:	str	r0, [fp, #-4]
    2f70:	b	2fe8 <cd_match_data_init+0x25c>
    2f74:	ldr	r0, [sp, #12]
    2f78:	bl	0 <coda_detection_rule_entry_new>
    2f7c:	ldr	r1, [fp, #-8]
    2f80:	ldr	r1, [r1]
    2f84:	str	r0, [r1, #8]
    2f88:	ldr	r0, [sp, #12]
    2f8c:	bl	0 <free>
    2f90:	ldr	r0, [fp, #-8]
    2f94:	ldr	r0, [r0]
    2f98:	ldr	r0, [r0, #8]
    2f9c:	movw	r1, #0
    2fa0:	cmp	r0, r1
    2fa4:	bne	2fb4 <cd_match_data_init+0x228>
    2fa8:	mvn	r0, #0
    2fac:	str	r0, [fp, #-4]
    2fb0:	b	2fe8 <cd_match_data_init+0x25c>
    2fb4:	b	2fb8 <cd_match_data_init+0x22c>
    2fb8:	b	2fbc <cd_match_data_init+0x230>
    2fbc:	ldr	r0, [fp, #-8]
    2fc0:	ldr	r0, [r0]
    2fc4:	movw	r1, #1
    2fc8:	str	r1, [r0, #32]
    2fcc:	ldr	r0, [fp, #-8]
    2fd0:	ldr	r0, [r0]
    2fd4:	movw	r1, #0
    2fd8:	movt	r1, #0
    2fdc:	str	r1, [r0, #36]	; 0x24
    2fe0:	movw	r0, #0
    2fe4:	str	r0, [fp, #-4]
    2fe8:	ldr	r0, [fp, #-4]
    2fec:	mov	sp, fp
    2ff0:	pop	{fp, pc}
    2ff4:	.word	0xfffffe70

00002ff8 <cd_detection_rule_add_entry>:
    2ff8:	push	{fp, lr}
    2ffc:	mov	fp, sp
    3000:	sub	sp, sp, #8
    3004:	str	r0, [sp]
    3008:	ldr	r0, [sp]
    300c:	ldr	r0, [r0]
    3010:	ldr	r0, [r0, #8]
    3014:	movw	r1, #0
    3018:	cmp	r0, r1
    301c:	beq	3064 <cd_detection_rule_add_entry+0x6c>
    3020:	ldr	r0, [sp]
    3024:	ldr	r0, [r0]
    3028:	ldr	r0, [r0, #396]	; 0x18c
    302c:	ldr	r0, [r0, #8]
    3030:	ldr	r1, [sp]
    3034:	ldr	r1, [r1]
    3038:	ldr	r1, [r1, #8]
    303c:	bl	0 <coda_detection_rule_add_entry>
    3040:	cmp	r0, #0
    3044:	beq	3054 <cd_detection_rule_add_entry+0x5c>
    3048:	mvn	r0, #0
    304c:	str	r0, [sp, #4]
    3050:	b	306c <cd_detection_rule_add_entry+0x74>
    3054:	ldr	r0, [sp]
    3058:	ldr	r0, [r0]
    305c:	movw	r1, #0
    3060:	str	r1, [r0, #8]
    3064:	movw	r0, #0
    3068:	str	r0, [sp, #4]
    306c:	ldr	r0, [sp, #4]
    3070:	mov	sp, fp
    3074:	pop	{fp, pc}

00003078 <cd_match_expression_init>:
    3078:	push	{fp, lr}
    307c:	mov	fp, sp
    3080:	sub	sp, sp, #16
    3084:	str	r0, [sp, #8]
    3088:	str	r1, [sp, #4]
    308c:	ldr	r0, [sp, #4]
    3090:	movw	r1, #0
    3094:	movt	r1, #0
    3098:	bl	24f4 <get_attribute_value>
    309c:	movw	r1, #0
    30a0:	movt	r1, #0
    30a4:	str	r0, [sp]
    30a8:	ldr	r0, [sp, #8]
    30ac:	ldr	r0, [r0]
    30b0:	str	r1, [r0, #40]	; 0x28
    30b4:	ldr	r0, [sp]
    30b8:	bl	0 <coda_detection_rule_entry_new>
    30bc:	ldr	r1, [sp, #8]
    30c0:	ldr	r1, [r1]
    30c4:	str	r0, [r1, #8]
    30c8:	ldr	r0, [sp, #8]
    30cc:	ldr	r0, [r0]
    30d0:	ldr	r0, [r0, #8]
    30d4:	movw	r1, #0
    30d8:	cmp	r0, r1
    30dc:	bne	30ec <cd_match_expression_init+0x74>
    30e0:	mvn	r0, #0
    30e4:	str	r0, [fp, #-4]
    30e8:	b	3118 <cd_match_expression_init+0xa0>
    30ec:	ldr	r0, [sp, #8]
    30f0:	ldr	r0, [r0]
    30f4:	movw	r1, #1
    30f8:	str	r1, [r0, #32]
    30fc:	ldr	r0, [sp, #8]
    3100:	ldr	r0, [r0]
    3104:	movw	r1, #0
    3108:	movt	r1, #0
    310c:	str	r1, [r0, #36]	; 0x24
    3110:	movw	r0, #0
    3114:	str	r0, [fp, #-4]
    3118:	ldr	r0, [fp, #-4]
    311c:	mov	sp, fp
    3120:	pop	{fp, pc}

00003124 <cd_match_filename_init>:
    3124:	push	{fp, lr}
    3128:	mov	fp, sp
    312c:	sub	sp, sp, #40	; 0x28
    3130:	str	r0, [fp, #-8]
    3134:	str	r1, [fp, #-12]
    3138:	ldr	r0, [fp, #-12]
    313c:	ldr	r1, [fp, #-8]
    3140:	ldr	r1, [r1]
    3144:	ldr	r2, [r1]
    3148:	movw	r1, #0
    314c:	movt	r1, #0
    3150:	bl	20e4 <get_mandatory_attribute_value>
    3154:	str	r0, [fp, #-16]
    3158:	ldr	r0, [fp, #-16]
    315c:	movw	r1, #0
    3160:	cmp	r0, r1
    3164:	bne	3174 <cd_match_filename_init+0x50>
    3168:	mvn	r0, #0
    316c:	str	r0, [fp, #-4]
    3170:	b	32b8 <cd_match_filename_init+0x194>
    3174:	movw	r0, #0
    3178:	movt	r0, #0
    317c:	ldr	r1, [fp, #-8]
    3180:	ldr	r1, [r1]
    3184:	str	r0, [r1, #40]	; 0x28
    3188:	movw	r0, #0
    318c:	bl	0 <coda_detection_rule_entry_new>
    3190:	ldr	r1, [fp, #-8]
    3194:	ldr	r1, [r1]
    3198:	str	r0, [r1, #8]
    319c:	ldr	r0, [fp, #-8]
    31a0:	ldr	r0, [r0]
    31a4:	ldr	r0, [r0, #8]
    31a8:	movw	r1, #0
    31ac:	cmp	r0, r1
    31b0:	bne	31c0 <cd_match_filename_init+0x9c>
    31b4:	mvn	r0, #0
    31b8:	str	r0, [fp, #-4]
    31bc:	b	32b8 <cd_match_filename_init+0x194>
    31c0:	ldr	r0, [fp, #-16]
    31c4:	bl	0 <strdup>
    31c8:	str	r0, [sp, #16]
    31cc:	ldr	r0, [sp, #16]
    31d0:	movw	r1, #0
    31d4:	cmp	r0, r1
    31d8:	bne	3204 <cd_match_filename_init+0xe0>
    31dc:	mvn	r0, #0
    31e0:	movw	r1, #0
    31e4:	movt	r1, #0
    31e8:	movw	r2, #0
    31ec:	movt	r2, #0
    31f0:	movw	r3, #2649	; 0xa59
    31f4:	bl	0 <coda_set_error>
    31f8:	mvn	r0, #0
    31fc:	str	r0, [fp, #-4]
    3200:	b	32b8 <cd_match_filename_init+0x194>
    3204:	ldr	r1, [sp, #16]
    3208:	movw	r0, #20
    320c:	movw	r2, #0
    3210:	str	r2, [sp, #12]
    3214:	ldr	r3, [sp, #12]
    3218:	ldr	ip, [sp, #12]
    321c:	str	ip, [sp]
    3220:	str	ip, [sp, #4]
    3224:	bl	0 <coda_expression_new>
    3228:	str	r0, [sp, #20]
    322c:	ldr	r0, [sp, #20]
    3230:	movw	r1, #0
    3234:	cmp	r0, r1
    3238:	bne	325c <cd_match_filename_init+0x138>
    323c:	ldr	r0, [pc, #128]	; 32c4 <cd_match_filename_init+0x1a0>
    3240:	ldr	r2, [fp, #-16]
    3244:	movw	r1, #0
    3248:	movt	r1, #0
    324c:	bl	0 <coda_set_error>
    3250:	mvn	r0, #0
    3254:	str	r0, [fp, #-4]
    3258:	b	32b8 <cd_match_filename_init+0x194>
    325c:	ldr	r0, [fp, #-8]
    3260:	ldr	r0, [r0]
    3264:	ldr	r0, [r0, #8]
    3268:	ldr	r1, [sp, #20]
    326c:	bl	0 <coda_detection_rule_entry_set_expression>
    3270:	cmp	r0, #0
    3274:	beq	328c <cd_match_filename_init+0x168>
    3278:	ldr	r0, [sp, #20]
    327c:	bl	0 <coda_expression_delete>
    3280:	mvn	r0, #0
    3284:	str	r0, [fp, #-4]
    3288:	b	32b8 <cd_match_filename_init+0x194>
    328c:	ldr	r0, [fp, #-8]
    3290:	ldr	r0, [r0]
    3294:	movw	r1, #1
    3298:	str	r1, [r0, #32]
    329c:	ldr	r0, [fp, #-8]
    32a0:	ldr	r0, [r0]
    32a4:	movw	r1, #0
    32a8:	movt	r1, #0
    32ac:	str	r1, [r0, #36]	; 0x24
    32b0:	movw	r0, #0
    32b4:	str	r0, [fp, #-4]
    32b8:	ldr	r0, [fp, #-4]
    32bc:	mov	sp, fp
    32c0:	pop	{fp, pc}
    32c4:	.word	0xfffffe70

000032c8 <cd_match_size_init>:
    32c8:	push	{fp, lr}
    32cc:	mov	fp, sp
    32d0:	sub	sp, sp, #56	; 0x38
    32d4:	movw	r2, #0
    32d8:	movt	r2, #0
    32dc:	str	r0, [fp, #-8]
    32e0:	str	r1, [fp, #-12]
    32e4:	ldr	r0, [fp, #-8]
    32e8:	ldr	r0, [r0]
    32ec:	str	r2, [r0, #40]	; 0x28
    32f0:	movw	r0, #0
    32f4:	bl	0 <coda_detection_rule_entry_new>
    32f8:	ldr	r1, [fp, #-8]
    32fc:	ldr	r1, [r1]
    3300:	str	r0, [r1, #8]
    3304:	ldr	r0, [fp, #-8]
    3308:	ldr	r0, [r0]
    330c:	ldr	r0, [r0, #8]
    3310:	movw	r1, #0
    3314:	cmp	r0, r1
    3318:	bne	3328 <cd_match_size_init+0x60>
    331c:	mvn	r0, #0
    3320:	str	r0, [fp, #-4]
    3324:	b	34c8 <cd_match_size_init+0x200>
    3328:	ldr	r0, [fp, #-12]
    332c:	ldr	r1, [fp, #-8]
    3330:	ldr	r1, [r1]
    3334:	ldr	r2, [r1]
    3338:	movw	r1, #0
    333c:	movt	r1, #0
    3340:	bl	20e4 <get_mandatory_attribute_value>
    3344:	str	r0, [fp, #-16]
    3348:	ldr	r0, [fp, #-16]
    334c:	movw	r1, #0
    3350:	cmp	r0, r1
    3354:	bne	3364 <cd_match_size_init+0x9c>
    3358:	mvn	r0, #0
    335c:	str	r0, [fp, #-4]
    3360:	b	34c8 <cd_match_size_init+0x200>
    3364:	ldr	r0, [fp, #-16]
    3368:	bl	0 <strdup>
    336c:	str	r0, [sp, #24]
    3370:	ldr	r0, [sp, #24]
    3374:	movw	r1, #0
    3378:	cmp	r0, r1
    337c:	bne	33a8 <cd_match_size_init+0xe0>
    3380:	mvn	r0, #0
    3384:	movw	r1, #0
    3388:	movt	r1, #0
    338c:	movw	r2, #0
    3390:	movt	r2, #0
    3394:	movw	r3, #2694	; 0xa86
    3398:	bl	0 <coda_set_error>
    339c:	mvn	r0, #0
    33a0:	str	r0, [fp, #-4]
    33a4:	b	34c8 <cd_match_size_init+0x200>
    33a8:	ldr	r1, [sp, #24]
    33ac:	movw	r0, #20
    33b0:	movw	r2, #0
    33b4:	str	r2, [sp, #20]
    33b8:	ldr	r3, [sp, #20]
    33bc:	ldr	ip, [sp, #20]
    33c0:	str	ip, [sp]
    33c4:	str	ip, [sp, #4]
    33c8:	bl	0 <coda_expression_new>
    33cc:	str	r0, [fp, #-24]	; 0xffffffe8
    33d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    33d4:	movw	r1, #0
    33d8:	cmp	r0, r1
    33dc:	bne	3400 <cd_match_size_init+0x138>
    33e0:	ldr	r0, [pc, #236]	; 34d4 <cd_match_size_init+0x20c>
    33e4:	ldr	r2, [fp, #-16]
    33e8:	movw	r1, #0
    33ec:	movt	r1, #0
    33f0:	bl	0 <coda_set_error>
    33f4:	mvn	r0, #0
    33f8:	str	r0, [fp, #-4]
    33fc:	b	34c8 <cd_match_size_init+0x200>
    3400:	movw	r0, #27
    3404:	movw	r1, #0
    3408:	str	r1, [sp, #16]
    340c:	ldr	r2, [sp, #16]
    3410:	ldr	r3, [sp, #16]
    3414:	ldr	ip, [sp, #16]
    3418:	str	ip, [sp]
    341c:	str	ip, [sp, #4]
    3420:	bl	0 <coda_expression_new>
    3424:	str	r0, [fp, #-20]	; 0xffffffec
    3428:	ldr	r0, [fp, #-20]	; 0xffffffec
    342c:	movw	r1, #0
    3430:	cmp	r0, r1
    3434:	bne	344c <cd_match_size_init+0x184>
    3438:	ldr	r0, [fp, #-24]	; 0xffffffe8
    343c:	bl	0 <coda_expression_delete>
    3440:	mvn	r0, #0
    3444:	str	r0, [fp, #-4]
    3448:	b	34c8 <cd_match_size_init+0x200>
    344c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3450:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3454:	movw	r0, #25
    3458:	movw	r1, #0
    345c:	str	r1, [sp, #12]
    3460:	ldr	ip, [sp, #12]
    3464:	str	ip, [sp]
    3468:	str	ip, [sp, #4]
    346c:	bl	0 <coda_expression_new>
    3470:	str	r0, [sp, #28]
    3474:	ldr	r0, [sp, #28]
    3478:	movw	r1, #0
    347c:	cmp	r0, r1
    3480:	bne	3490 <cd_match_size_init+0x1c8>
    3484:	mvn	r0, #0
    3488:	str	r0, [fp, #-4]
    348c:	b	34c8 <cd_match_size_init+0x200>
    3490:	ldr	r0, [fp, #-8]
    3494:	ldr	r0, [r0]
    3498:	ldr	r0, [r0, #8]
    349c:	ldr	r1, [sp, #28]
    34a0:	bl	0 <coda_detection_rule_entry_set_expression>
    34a4:	cmp	r0, #0
    34a8:	beq	34c0 <cd_match_size_init+0x1f8>
    34ac:	ldr	r0, [sp, #28]
    34b0:	bl	0 <coda_expression_delete>
    34b4:	mvn	r0, #0
    34b8:	str	r0, [fp, #-4]
    34bc:	b	34c8 <cd_match_size_init+0x200>
    34c0:	movw	r0, #0
    34c4:	str	r0, [fp, #-4]
    34c8:	ldr	r0, [fp, #-4]
    34cc:	mov	sp, fp
    34d0:	pop	{fp, pc}
    34d4:	.word	0xfffffe70

000034d8 <add_detection_rule_entry_for_path>:
    34d8:	push	{fp, lr}
    34dc:	mov	fp, sp
    34e0:	sub	sp, sp, #120	; 0x78
    34e4:	str	r0, [fp, #-8]
    34e8:	str	r1, [fp, #-12]
    34ec:	str	r2, [fp, #-16]
    34f0:	movw	r0, #1
    34f4:	str	r0, [fp, #-28]	; 0xffffffe4
    34f8:	movw	r0, #0
    34fc:	str	r0, [fp, #-32]	; 0xffffffe0
    3500:	str	r0, [fp, #-36]	; 0xffffffdc
    3504:	ldr	r1, [fp, #-12]
    3508:	cmp	r1, r0
    350c:	beq	3514 <add_detection_rule_entry_for_path+0x3c>
    3510:	b	3534 <add_detection_rule_entry_for_path+0x5c>
    3514:	movw	r0, #0
    3518:	movt	r0, #0
    351c:	movw	r1, #0
    3520:	movt	r1, #0
    3524:	movw	r2, #2236	; 0x8bc
    3528:	movw	r3, #0
    352c:	movt	r3, #0
    3530:	bl	0 <__assert_fail>
    3534:	ldr	r0, [fp, #-16]
    3538:	movw	r1, #0
    353c:	str	r1, [r0]
    3540:	ldr	r0, [fp, #-12]
    3544:	bl	0 <strdup>
    3548:	str	r0, [fp, #-40]	; 0xffffffd8
    354c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3550:	movw	r1, #0
    3554:	cmp	r0, r1
    3558:	bne	3584 <add_detection_rule_entry_for_path+0xac>
    355c:	mvn	r0, #0
    3560:	movw	r1, #0
    3564:	movt	r1, #0
    3568:	movw	r2, #0
    356c:	movt	r2, #0
    3570:	movw	r3, #2245	; 0x8c5
    3574:	bl	0 <coda_set_error>
    3578:	mvn	r0, #0
    357c:	str	r0, [fp, #-4]
    3580:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3584:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3588:	str	r0, [fp, #-48]	; 0xffffffd0
    358c:	ldr	r0, [fp, #-12]
    3590:	bl	0 <strlen>
    3594:	add	r0, r0, #6
    3598:	bl	0 <malloc>
    359c:	str	r0, [fp, #-44]	; 0xffffffd4
    35a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    35a4:	movw	r1, #0
    35a8:	cmp	r0, r1
    35ac:	bne	35d8 <add_detection_rule_entry_for_path+0x100>
    35b0:	mvn	r0, #0
    35b4:	movw	r1, #0
    35b8:	movt	r1, #0
    35bc:	movw	r2, #0
    35c0:	movt	r2, #0
    35c4:	movw	r3, #2257	; 0x8d1
    35c8:	bl	0 <coda_set_error>
    35cc:	mvn	r0, #0
    35d0:	str	r0, [fp, #-4]
    35d4:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    35d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    35dc:	movw	r1, #0
    35e0:	strb	r1, [r0]
    35e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    35e8:	str	r0, [fp, #-52]	; 0xffffffcc
    35ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
    35f0:	ldrb	r0, [r0]
    35f4:	cmp	r0, #47	; 0x2f
    35f8:	bne	3624 <add_detection_rule_entry_for_path+0x14c>
    35fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3600:	ldrb	r0, [r0]
    3604:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3608:	strb	r0, [r1]
    360c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3610:	add	r0, r0, #1
    3614:	str	r0, [fp, #-52]	; 0xffffffcc
    3618:	ldr	r0, [fp, #-48]	; 0xffffffd0
    361c:	add	r0, r0, #1
    3620:	str	r0, [fp, #-48]	; 0xffffffd0
    3624:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3628:	ldrb	r0, [r0]
    362c:	cmp	r0, #64	; 0x40
    3630:	bne	3664 <add_detection_rule_entry_for_path+0x18c>
    3634:	movw	r0, #1
    3638:	str	r0, [fp, #-36]	; 0xffffffdc
    363c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3640:	ldrb	r0, [r0]
    3644:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3648:	strb	r0, [r1]
    364c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3650:	add	r0, r0, #1
    3654:	str	r0, [fp, #-52]	; 0xffffffcc
    3658:	ldr	r0, [fp, #-48]	; 0xffffffd0
    365c:	add	r0, r0, #1
    3660:	str	r0, [fp, #-48]	; 0xffffffd0
    3664:	b	3668 <add_detection_rule_entry_for_path+0x190>
    3668:	ldr	r0, [fp, #-32]	; 0xffffffe0
    366c:	cmp	r0, #0
    3670:	movw	r0, #0
    3674:	movne	r0, #1
    3678:	mvn	r1, #0
    367c:	eor	r0, r0, r1
    3680:	tst	r0, #1
    3684:	beq	3ba4 <add_detection_rule_entry_for_path+0x6cc>
    3688:	ldr	r0, [fp, #-36]	; 0xffffffdc
    368c:	str	r0, [fp, #-56]	; 0xffffffc8
    3690:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3694:	cmp	r0, #0
    3698:	bne	36d0 <add_detection_rule_entry_for_path+0x1f8>
    369c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    36a0:	cmp	r0, #0
    36a4:	movw	r0, #0
    36a8:	movne	r0, #1
    36ac:	tst	r0, #1
    36b0:	movw	r0, #64	; 0x40
    36b4:	moveq	r0, #47	; 0x2f
    36b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    36bc:	strb	r0, [r1]
    36c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    36c4:	add	r0, r0, #1
    36c8:	str	r0, [fp, #-52]	; 0xffffffcc
    36cc:	b	36d8 <add_detection_rule_entry_for_path+0x200>
    36d0:	movw	r0, #0
    36d4:	str	r0, [fp, #-28]	; 0xffffffe4
    36d8:	movw	r0, #0
    36dc:	str	r0, [fp, #-20]	; 0xffffffec
    36e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    36e4:	ldrb	r0, [r0]
    36e8:	cmp	r0, #123	; 0x7b
    36ec:	bne	3784 <add_detection_rule_entry_for_path+0x2ac>
    36f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    36f4:	add	r0, r0, #1
    36f8:	str	r0, [fp, #-48]	; 0xffffffd0
    36fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3700:	str	r0, [fp, #-20]	; 0xffffffec
    3704:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3708:	ldrb	r0, [r0]
    370c:	cmp	r0, #125	; 0x7d
    3710:	beq	376c <add_detection_rule_entry_for_path+0x294>
    3714:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3718:	ldrb	r0, [r0]
    371c:	cmp	r0, #0
    3720:	bne	375c <add_detection_rule_entry_for_path+0x284>
    3724:	ldr	r0, [fp, #-8]
    3728:	ldr	r0, [r0, #8]
    372c:	ldr	r2, [r0, #8]
    3730:	mvn	r0, #99	; 0x63
    3734:	movw	r1, #0
    3738:	movt	r1, #0
    373c:	bl	0 <coda_set_error>
    3740:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3744:	bl	0 <free>
    3748:	ldr	r0, [fp, #-40]	; 0xffffffd8
    374c:	bl	0 <free>
    3750:	mvn	r0, #0
    3754:	str	r0, [fp, #-4]
    3758:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    375c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3760:	add	r0, r0, #1
    3764:	str	r0, [fp, #-48]	; 0xffffffd0
    3768:	b	3704 <add_detection_rule_entry_for_path+0x22c>
    376c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3770:	movw	r1, #0
    3774:	strb	r1, [r0]
    3778:	ldr	r0, [fp, #-48]	; 0xffffffd0
    377c:	add	r0, r0, #1
    3780:	str	r0, [fp, #-48]	; 0xffffffd0
    3784:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3788:	str	r0, [fp, #-24]	; 0xffffffe8
    378c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3790:	ldrb	r0, [r0]
    3794:	cmp	r0, #47	; 0x2f
    3798:	movw	r0, #0
    379c:	str	r0, [sp, #32]
    37a0:	beq	37d4 <add_detection_rule_entry_for_path+0x2fc>
    37a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37a8:	ldrb	r0, [r0]
    37ac:	cmp	r0, #64	; 0x40
    37b0:	movw	r0, #0
    37b4:	str	r0, [sp, #32]
    37b8:	beq	37d4 <add_detection_rule_entry_for_path+0x2fc>
    37bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37c0:	ldrb	r0, [r0]
    37c4:	cmp	r0, #0
    37c8:	movw	r0, #0
    37cc:	movne	r0, #1
    37d0:	str	r0, [sp, #32]
    37d4:	ldr	r0, [sp, #32]
    37d8:	tst	r0, #1
    37dc:	beq	37f0 <add_detection_rule_entry_for_path+0x318>
    37e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37e4:	add	r0, r0, #1
    37e8:	str	r0, [fp, #-48]	; 0xffffffd0
    37ec:	b	378c <add_detection_rule_entry_for_path+0x2b4>
    37f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    37f4:	ldrb	r0, [r0]
    37f8:	cmp	r0, #64	; 0x40
    37fc:	movw	r0, #0
    3800:	moveq	r0, #1
    3804:	and	r0, r0, #1
    3808:	str	r0, [fp, #-36]	; 0xffffffdc
    380c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3810:	ldrb	r0, [r0]
    3814:	cmp	r0, #0
    3818:	movw	r0, #0
    381c:	moveq	r0, #1
    3820:	and	r0, r0, #1
    3824:	str	r0, [fp, #-32]	; 0xffffffe0
    3828:	ldr	r0, [fp, #-48]	; 0xffffffd0
    382c:	movw	r1, #0
    3830:	strb	r1, [r0]
    3834:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3838:	movw	r1, #0
    383c:	bl	0 <coda_identifier_from_name>
    3840:	str	r0, [sp, #52]	; 0x34
    3844:	ldr	r0, [sp, #52]	; 0x34
    3848:	movw	r1, #0
    384c:	cmp	r0, r1
    3850:	bne	3870 <add_detection_rule_entry_for_path+0x398>
    3854:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3858:	bl	0 <free>
    385c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3860:	bl	0 <free>
    3864:	mvn	r0, #0
    3868:	str	r0, [fp, #-4]
    386c:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3870:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3874:	ldr	r1, [sp, #52]	; 0x34
    3878:	bl	0 <strcpy>
    387c:	ldr	r1, [sp, #52]	; 0x34
    3880:	str	r0, [sp, #28]
    3884:	mov	r0, r1
    3888:	bl	0 <strlen>
    388c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    3890:	add	r0, r1, r0
    3894:	str	r0, [fp, #-52]	; 0xffffffcc
    3898:	ldr	r0, [sp, #52]	; 0x34
    389c:	bl	0 <free>
    38a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    38a4:	movw	r1, #0
    38a8:	cmp	r0, r1
    38ac:	beq	3b44 <add_detection_rule_entry_for_path+0x66c>
    38b0:	movw	r0, #36	; 0x24
    38b4:	movw	r1, #0
    38b8:	str	r1, [sp, #24]
    38bc:	ldr	r2, [sp, #24]
    38c0:	ldr	r3, [sp, #24]
    38c4:	ldr	ip, [sp, #24]
    38c8:	str	ip, [sp]
    38cc:	str	ip, [sp, #4]
    38d0:	bl	0 <coda_expression_new>
    38d4:	str	r0, [sp, #56]	; 0x38
    38d8:	ldr	r0, [sp, #56]	; 0x38
    38dc:	movw	r1, #0
    38e0:	cmp	r0, r1
    38e4:	bne	3904 <add_detection_rule_entry_for_path+0x42c>
    38e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    38ec:	bl	0 <free>
    38f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    38f4:	bl	0 <free>
    38f8:	mvn	r0, #0
    38fc:	str	r0, [fp, #-4]
    3900:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3904:	ldr	r2, [sp, #56]	; 0x38
    3908:	movw	r0, #75	; 0x4b
    390c:	movw	r1, #0
    3910:	str	r1, [sp, #20]
    3914:	ldr	r3, [sp, #20]
    3918:	ldr	ip, [sp, #20]
    391c:	str	ip, [sp]
    3920:	str	ip, [sp, #4]
    3924:	bl	0 <coda_expression_new>
    3928:	str	r0, [sp, #44]	; 0x2c
    392c:	ldr	r0, [sp, #44]	; 0x2c
    3930:	movw	r1, #0
    3934:	cmp	r0, r1
    3938:	bne	3958 <add_detection_rule_entry_for_path+0x480>
    393c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3940:	bl	0 <free>
    3944:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3948:	bl	0 <free>
    394c:	mvn	r0, #0
    3950:	str	r0, [fp, #-4]
    3954:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3958:	ldr	r0, [fp, #-20]	; 0xffffffec
    395c:	bl	0 <strdup>
    3960:	str	r0, [sp, #36]	; 0x24
    3964:	ldr	r0, [sp, #36]	; 0x24
    3968:	movw	r1, #0
    396c:	cmp	r0, r1
    3970:	bne	39b4 <add_detection_rule_entry_for_path+0x4dc>
    3974:	mvn	r0, #0
    3978:	movw	r1, #0
    397c:	movt	r1, #0
    3980:	movw	r2, #0
    3984:	movt	r2, #0
    3988:	movw	r3, #2359	; 0x937
    398c:	bl	0 <coda_set_error>
    3990:	ldr	r0, [sp, #44]	; 0x2c
    3994:	bl	0 <coda_expression_delete>
    3998:	ldr	r0, [fp, #-44]	; 0xffffffd4
    399c:	bl	0 <free>
    39a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    39a4:	bl	0 <free>
    39a8:	mvn	r0, #0
    39ac:	str	r0, [fp, #-4]
    39b0:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    39b4:	ldr	r1, [sp, #36]	; 0x24
    39b8:	movw	r0, #22
    39bc:	movw	r2, #0
    39c0:	str	r2, [sp, #16]
    39c4:	ldr	r3, [sp, #16]
    39c8:	ldr	ip, [sp, #16]
    39cc:	str	ip, [sp]
    39d0:	str	ip, [sp, #4]
    39d4:	bl	0 <coda_expression_new>
    39d8:	str	r0, [sp, #40]	; 0x28
    39dc:	ldr	r0, [sp, #40]	; 0x28
    39e0:	movw	r1, #0
    39e4:	cmp	r0, r1
    39e8:	bne	3a10 <add_detection_rule_entry_for_path+0x538>
    39ec:	ldr	r0, [sp, #44]	; 0x2c
    39f0:	bl	0 <coda_expression_delete>
    39f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    39f8:	bl	0 <free>
    39fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a00:	bl	0 <free>
    3a04:	mvn	r0, #0
    3a08:	str	r0, [fp, #-4]
    3a0c:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3a10:	ldr	r2, [sp, #44]	; 0x2c
    3a14:	ldr	r3, [sp, #40]	; 0x28
    3a18:	movw	r0, #25
    3a1c:	movw	r1, #0
    3a20:	str	r1, [sp, #12]
    3a24:	ldr	ip, [sp, #12]
    3a28:	str	ip, [sp]
    3a2c:	str	ip, [sp, #4]
    3a30:	bl	0 <coda_expression_new>
    3a34:	str	r0, [sp, #60]	; 0x3c
    3a38:	ldr	r0, [sp, #60]	; 0x3c
    3a3c:	movw	r1, #0
    3a40:	cmp	r0, r1
    3a44:	bne	3a64 <add_detection_rule_entry_for_path+0x58c>
    3a48:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3a4c:	bl	0 <free>
    3a50:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3a54:	bl	0 <free>
    3a58:	mvn	r0, #0
    3a5c:	str	r0, [fp, #-4]
    3a60:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3a64:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3a68:	movw	r1, #0
    3a6c:	movt	r1, #0
    3a70:	bl	0 <strcpy>
    3a74:	ldr	r1, [fp, #-44]	; 0xffffffd4
    3a78:	str	r0, [sp, #8]
    3a7c:	mov	r0, r1
    3a80:	bl	0 <coda_detection_rule_entry_new>
    3a84:	str	r0, [sp, #48]	; 0x30
    3a88:	ldr	r0, [fp, #-52]	; 0xffffffcc
    3a8c:	movw	r1, #0
    3a90:	strb	r1, [r0]
    3a94:	ldr	r0, [sp, #48]	; 0x30
    3a98:	movw	r1, #0
    3a9c:	cmp	r0, r1
    3aa0:	bne	3ac8 <add_detection_rule_entry_for_path+0x5f0>
    3aa4:	ldr	r0, [sp, #60]	; 0x3c
    3aa8:	bl	0 <coda_expression_delete>
    3aac:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3ab0:	bl	0 <free>
    3ab4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ab8:	bl	0 <free>
    3abc:	mvn	r0, #0
    3ac0:	str	r0, [fp, #-4]
    3ac4:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3ac8:	ldr	r0, [sp, #48]	; 0x30
    3acc:	ldr	r1, [sp, #60]	; 0x3c
    3ad0:	bl	0 <coda_detection_rule_entry_set_expression>
    3ad4:	cmp	r0, #0
    3ad8:	beq	3b08 <add_detection_rule_entry_for_path+0x630>
    3adc:	ldr	r0, [sp, #48]	; 0x30
    3ae0:	bl	0 <coda_detection_rule_entry_delete>
    3ae4:	ldr	r0, [sp, #60]	; 0x3c
    3ae8:	bl	0 <coda_expression_delete>
    3aec:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3af0:	bl	0 <free>
    3af4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3af8:	bl	0 <free>
    3afc:	mvn	r0, #0
    3b00:	str	r0, [fp, #-4]
    3b04:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3b08:	ldr	r0, [fp, #-8]
    3b0c:	ldr	r1, [sp, #48]	; 0x30
    3b10:	bl	0 <coda_detection_rule_add_entry>
    3b14:	cmp	r0, #0
    3b18:	beq	3b40 <add_detection_rule_entry_for_path+0x668>
    3b1c:	ldr	r0, [sp, #48]	; 0x30
    3b20:	bl	0 <coda_detection_rule_entry_delete>
    3b24:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3b28:	bl	0 <free>
    3b2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b30:	bl	0 <free>
    3b34:	mvn	r0, #0
    3b38:	str	r0, [fp, #-4]
    3b3c:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3b40:	b	3b44 <add_detection_rule_entry_for_path+0x66c>
    3b44:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3b48:	cmp	r0, #0
    3b4c:	bne	3ba0 <add_detection_rule_entry_for_path+0x6c8>
    3b50:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3b54:	cmp	r0, #0
    3b58:	beq	3b94 <add_detection_rule_entry_for_path+0x6bc>
    3b5c:	ldr	r0, [fp, #-8]
    3b60:	ldr	r0, [r0, #8]
    3b64:	ldr	r2, [r0, #8]
    3b68:	mvn	r0, #99	; 0x63
    3b6c:	movw	r1, #0
    3b70:	movt	r1, #0
    3b74:	bl	0 <coda_set_error>
    3b78:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3b7c:	bl	0 <free>
    3b80:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3b84:	bl	0 <free>
    3b88:	mvn	r0, #0
    3b8c:	str	r0, [fp, #-4]
    3b90:	b	3bc0 <add_detection_rule_entry_for_path+0x6e8>
    3b94:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3b98:	add	r0, r0, #1
    3b9c:	str	r0, [fp, #-48]	; 0xffffffd0
    3ba0:	b	3668 <add_detection_rule_entry_for_path+0x190>
    3ba4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ba8:	bl	0 <free>
    3bac:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3bb0:	ldr	r1, [fp, #-16]
    3bb4:	str	r0, [r1]
    3bb8:	movw	r0, #0
    3bbc:	str	r0, [fp, #-4]
    3bc0:	ldr	r0, [fp, #-4]
    3bc4:	mov	sp, fp
    3bc8:	pop	{fp, pc}

00003bcc <cd_match_data_finalise>:
    3bcc:	push	{fp, lr}
    3bd0:	mov	fp, sp
    3bd4:	sub	sp, sp, #152	; 0x98
    3bd8:	str	r0, [fp, #-8]
    3bdc:	ldr	r0, [fp, #-8]
    3be0:	ldr	r0, [r0]
    3be4:	ldr	r0, [r0, #8]
    3be8:	str	r0, [fp, #-12]
    3bec:	ldr	r0, [fp, #-8]
    3bf0:	ldr	r0, [r0]
    3bf4:	ldr	r0, [r0, #12]
    3bf8:	bl	429c <escaped_string_length>
    3bfc:	str	r0, [fp, #-32]	; 0xffffffe0
    3c00:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3c04:	cmp	r0, #0
    3c08:	bge	3c28 <cd_match_data_finalise+0x5c>
    3c0c:	ldr	r0, [pc, #1668]	; 4298 <cd_match_data_finalise+0x6cc>
    3c10:	movw	r1, #0
    3c14:	movt	r1, #0
    3c18:	bl	0 <coda_set_error>
    3c1c:	mvn	r0, #0
    3c20:	str	r0, [fp, #-4]
    3c24:	b	428c <cd_match_data_finalise+0x6c0>
    3c28:	ldr	r0, [fp, #-12]
    3c2c:	ldr	r0, [r0, #4]
    3c30:	movw	r1, #0
    3c34:	cmp	r0, r1
    3c38:	bne	4008 <cd_match_data_finalise+0x43c>
    3c3c:	ldr	r0, [fp, #-12]
    3c40:	ldr	r0, [r0]
    3c44:	movw	r1, #0
    3c48:	cmp	r0, r1
    3c4c:	beq	3e00 <cd_match_data_finalise+0x234>
    3c50:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3c54:	cmp	r0, #0
    3c58:	bne	3c68 <cd_match_data_finalise+0x9c>
    3c5c:	movw	r0, #0
    3c60:	str	r0, [fp, #-4]
    3c64:	b	428c <cd_match_data_finalise+0x6c0>
    3c68:	movw	r0, #36	; 0x24
    3c6c:	movw	r1, #0
    3c70:	str	r1, [sp, #68]	; 0x44
    3c74:	ldr	r2, [sp, #68]	; 0x44
    3c78:	ldr	r3, [sp, #68]	; 0x44
    3c7c:	ldr	ip, [sp, #68]	; 0x44
    3c80:	str	ip, [sp]
    3c84:	str	ip, [sp, #4]
    3c88:	bl	0 <coda_expression_new>
    3c8c:	str	r0, [fp, #-36]	; 0xffffffdc
    3c90:	ldr	r0, [fp, #-36]	; 0xffffffdc
    3c94:	movw	r1, #0
    3c98:	cmp	r0, r1
    3c9c:	bne	3cac <cd_match_data_finalise+0xe0>
    3ca0:	mvn	r0, #0
    3ca4:	str	r0, [fp, #-4]
    3ca8:	b	428c <cd_match_data_finalise+0x6c0>
    3cac:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3cb0:	movw	r0, #75	; 0x4b
    3cb4:	movw	r1, #0
    3cb8:	str	r1, [sp, #64]	; 0x40
    3cbc:	ldr	r3, [sp, #64]	; 0x40
    3cc0:	ldr	ip, [sp, #64]	; 0x40
    3cc4:	str	ip, [sp]
    3cc8:	str	ip, [sp, #4]
    3ccc:	bl	0 <coda_expression_new>
    3cd0:	str	r0, [fp, #-16]
    3cd4:	ldr	r0, [fp, #-16]
    3cd8:	movw	r1, #0
    3cdc:	cmp	r0, r1
    3ce0:	bne	3cf0 <cd_match_data_finalise+0x124>
    3ce4:	mvn	r0, #0
    3ce8:	str	r0, [fp, #-4]
    3cec:	b	428c <cd_match_data_finalise+0x6c0>
    3cf0:	ldr	r0, [fp, #-8]
    3cf4:	ldr	r0, [r0]
    3cf8:	ldr	r0, [r0, #12]
    3cfc:	bl	0 <strdup>
    3d00:	str	r0, [fp, #-28]	; 0xffffffe4
    3d04:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3d08:	movw	r1, #0
    3d0c:	cmp	r0, r1
    3d10:	bne	3d44 <cd_match_data_finalise+0x178>
    3d14:	mvn	r0, #0
    3d18:	movw	r1, #0
    3d1c:	movt	r1, #0
    3d20:	movw	r2, #0
    3d24:	movt	r2, #0
    3d28:	movw	r3, #2090	; 0x82a
    3d2c:	bl	0 <coda_set_error>
    3d30:	ldr	r0, [fp, #-16]
    3d34:	bl	0 <coda_expression_delete>
    3d38:	mvn	r0, #0
    3d3c:	str	r0, [fp, #-4]
    3d40:	b	428c <cd_match_data_finalise+0x6c0>
    3d44:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3d48:	movw	r0, #22
    3d4c:	movw	r2, #0
    3d50:	str	r2, [sp, #60]	; 0x3c
    3d54:	ldr	r3, [sp, #60]	; 0x3c
    3d58:	ldr	ip, [sp, #60]	; 0x3c
    3d5c:	str	ip, [sp]
    3d60:	str	ip, [sp, #4]
    3d64:	bl	0 <coda_expression_new>
    3d68:	str	r0, [fp, #-20]	; 0xffffffec
    3d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3d70:	movw	r1, #0
    3d74:	cmp	r0, r1
    3d78:	bne	3d90 <cd_match_data_finalise+0x1c4>
    3d7c:	ldr	r0, [fp, #-16]
    3d80:	bl	0 <coda_expression_delete>
    3d84:	mvn	r0, #0
    3d88:	str	r0, [fp, #-4]
    3d8c:	b	428c <cd_match_data_finalise+0x6c0>
    3d90:	ldr	r2, [fp, #-16]
    3d94:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d98:	movw	r0, #25
    3d9c:	movw	r1, #0
    3da0:	str	r1, [sp, #56]	; 0x38
    3da4:	ldr	ip, [sp, #56]	; 0x38
    3da8:	str	ip, [sp]
    3dac:	str	ip, [sp, #4]
    3db0:	bl	0 <coda_expression_new>
    3db4:	str	r0, [fp, #-24]	; 0xffffffe8
    3db8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3dbc:	movw	r1, #0
    3dc0:	cmp	r0, r1
    3dc4:	bne	3dd4 <cd_match_data_finalise+0x208>
    3dc8:	mvn	r0, #0
    3dcc:	str	r0, [fp, #-4]
    3dd0:	b	428c <cd_match_data_finalise+0x6c0>
    3dd4:	ldr	r0, [fp, #-12]
    3dd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3ddc:	bl	0 <coda_detection_rule_entry_set_expression>
    3de0:	cmp	r0, #0
    3de4:	beq	3dfc <cd_match_data_finalise+0x230>
    3de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3dec:	bl	0 <coda_expression_delete>
    3df0:	mvn	r0, #0
    3df4:	str	r0, [fp, #-4]
    3df8:	b	428c <cd_match_data_finalise+0x6c0>
    3dfc:	b	4004 <cd_match_data_finalise+0x438>
    3e00:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3e04:	cmp	r0, #0
    3e08:	bne	3e28 <cd_match_data_finalise+0x25c>
    3e0c:	ldr	r0, [pc, #1156]	; 4298 <cd_match_data_finalise+0x6cc>
    3e10:	movw	r1, #0
    3e14:	movt	r1, #0
    3e18:	bl	0 <coda_set_error>
    3e1c:	mvn	r0, #0
    3e20:	str	r0, [fp, #-4]
    3e24:	b	428c <cd_match_data_finalise+0x6c0>
    3e28:	movw	r0, #38	; 0x26
    3e2c:	movw	r1, #0
    3e30:	str	r1, [sp, #52]	; 0x34
    3e34:	ldr	r2, [sp, #52]	; 0x34
    3e38:	ldr	r3, [sp, #52]	; 0x34
    3e3c:	ldr	ip, [sp, #52]	; 0x34
    3e40:	str	ip, [sp]
    3e44:	str	ip, [sp, #4]
    3e48:	bl	0 <coda_expression_new>
    3e4c:	str	r0, [fp, #-40]	; 0xffffffd8
    3e50:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3e54:	movw	r1, #0
    3e58:	cmp	r0, r1
    3e5c:	bne	3e6c <cd_match_data_finalise+0x2a0>
    3e60:	mvn	r0, #0
    3e64:	str	r0, [fp, #-4]
    3e68:	b	428c <cd_match_data_finalise+0x6c0>
    3e6c:	movw	r0, #0
    3e70:	movt	r0, #0
    3e74:	bl	0 <strdup>
    3e78:	movw	r1, #20
    3e7c:	str	r0, [sp, #48]	; 0x30
    3e80:	mov	r0, r1
    3e84:	ldr	r1, [sp, #48]	; 0x30
    3e88:	movw	r2, #0
    3e8c:	str	r2, [sp, #44]	; 0x2c
    3e90:	ldr	r3, [sp, #44]	; 0x2c
    3e94:	ldr	ip, [sp, #44]	; 0x2c
    3e98:	str	ip, [sp]
    3e9c:	str	ip, [sp, #4]
    3ea0:	bl	0 <coda_expression_new>
    3ea4:	str	r0, [fp, #-44]	; 0xffffffd4
    3ea8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3eac:	movw	r1, #0
    3eb0:	cmp	r0, r1
    3eb4:	bne	3ecc <cd_match_data_finalise+0x300>
    3eb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3ebc:	bl	0 <coda_expression_delete>
    3ec0:	mvn	r0, #0
    3ec4:	str	r0, [fp, #-4]
    3ec8:	b	428c <cd_match_data_finalise+0x6c0>
    3ecc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    3ed0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3ed4:	movw	r0, #16
    3ed8:	movw	r1, #0
    3edc:	str	r1, [sp, #40]	; 0x28
    3ee0:	ldr	ip, [sp, #40]	; 0x28
    3ee4:	str	ip, [sp]
    3ee8:	str	ip, [sp, #4]
    3eec:	bl	0 <coda_expression_new>
    3ef0:	str	r0, [fp, #-20]	; 0xffffffec
    3ef4:	ldr	r0, [fp, #-20]	; 0xffffffec
    3ef8:	movw	r1, #0
    3efc:	cmp	r0, r1
    3f00:	bne	3f10 <cd_match_data_finalise+0x344>
    3f04:	mvn	r0, #0
    3f08:	str	r0, [fp, #-4]
    3f0c:	b	428c <cd_match_data_finalise+0x6c0>
    3f10:	ldr	r0, [fp, #-8]
    3f14:	ldr	r0, [r0]
    3f18:	ldr	r0, [r0, #12]
    3f1c:	bl	44a8 <regexp_match_string>
    3f20:	str	r0, [fp, #-28]	; 0xffffffe4
    3f24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3f28:	movw	r1, #0
    3f2c:	cmp	r0, r1
    3f30:	bne	3f48 <cd_match_data_finalise+0x37c>
    3f34:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f38:	bl	0 <coda_expression_delete>
    3f3c:	mvn	r0, #0
    3f40:	str	r0, [fp, #-4]
    3f44:	b	428c <cd_match_data_finalise+0x6c0>
    3f48:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3f4c:	movw	r0, #21
    3f50:	movw	r2, #0
    3f54:	str	r2, [sp, #36]	; 0x24
    3f58:	ldr	r3, [sp, #36]	; 0x24
    3f5c:	ldr	ip, [sp, #36]	; 0x24
    3f60:	str	ip, [sp]
    3f64:	str	ip, [sp, #4]
    3f68:	bl	0 <coda_expression_new>
    3f6c:	str	r0, [fp, #-16]
    3f70:	ldr	r0, [fp, #-16]
    3f74:	movw	r1, #0
    3f78:	cmp	r0, r1
    3f7c:	bne	3f94 <cd_match_data_finalise+0x3c8>
    3f80:	ldr	r0, [fp, #-20]	; 0xffffffec
    3f84:	bl	0 <coda_expression_delete>
    3f88:	mvn	r0, #0
    3f8c:	str	r0, [fp, #-4]
    3f90:	b	428c <cd_match_data_finalise+0x6c0>
    3f94:	ldr	r2, [fp, #-16]
    3f98:	ldr	r3, [fp, #-20]	; 0xffffffec
    3f9c:	movw	r0, #71	; 0x47
    3fa0:	movw	r1, #0
    3fa4:	str	r1, [sp, #32]
    3fa8:	ldr	ip, [sp, #32]
    3fac:	str	ip, [sp]
    3fb0:	str	ip, [sp, #4]
    3fb4:	bl	0 <coda_expression_new>
    3fb8:	str	r0, [fp, #-24]	; 0xffffffe8
    3fbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3fc0:	movw	r1, #0
    3fc4:	cmp	r0, r1
    3fc8:	bne	3fd8 <cd_match_data_finalise+0x40c>
    3fcc:	mvn	r0, #0
    3fd0:	str	r0, [fp, #-4]
    3fd4:	b	428c <cd_match_data_finalise+0x6c0>
    3fd8:	ldr	r0, [fp, #-12]
    3fdc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3fe0:	bl	0 <coda_detection_rule_entry_set_expression>
    3fe4:	cmp	r0, #0
    3fe8:	beq	4000 <cd_match_data_finalise+0x434>
    3fec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3ff0:	bl	0 <coda_expression_delete>
    3ff4:	mvn	r0, #0
    3ff8:	str	r0, [fp, #-4]
    3ffc:	b	428c <cd_match_data_finalise+0x6c0>
    4000:	b	4004 <cd_match_data_finalise+0x438>
    4004:	b	4284 <cd_match_data_finalise+0x6b8>
    4008:	ldr	r0, [fp, #-12]
    400c:	ldr	r0, [r0, #4]
    4010:	ldr	r0, [r0]
    4014:	cmp	r0, #20
    4018:	bne	4280 <cd_match_data_finalise+0x6b4>
    401c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4020:	cmp	r0, #0
    4024:	bne	4044 <cd_match_data_finalise+0x478>
    4028:	ldr	r0, [pc, #616]	; 4298 <cd_match_data_finalise+0x6cc>
    402c:	movw	r1, #0
    4030:	movt	r1, #0
    4034:	bl	0 <coda_set_error>
    4038:	mvn	r0, #0
    403c:	str	r0, [fp, #-4]
    4040:	b	428c <cd_match_data_finalise+0x6c0>
    4044:	movw	r0, #38	; 0x26
    4048:	movw	r1, #0
    404c:	str	r1, [sp, #28]
    4050:	ldr	r2, [sp, #28]
    4054:	ldr	r3, [sp, #28]
    4058:	ldr	ip, [sp, #28]
    405c:	str	ip, [sp]
    4060:	str	ip, [sp, #4]
    4064:	bl	0 <coda_expression_new>
    4068:	str	r0, [sp, #76]	; 0x4c
    406c:	ldr	r0, [sp, #76]	; 0x4c
    4070:	movw	r1, #0
    4074:	cmp	r0, r1
    4078:	bne	4088 <cd_match_data_finalise+0x4bc>
    407c:	mvn	r0, #0
    4080:	str	r0, [fp, #-4]
    4084:	b	428c <cd_match_data_finalise+0x6c0>
    4088:	sub	r2, fp, #69	; 0x45
    408c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    4090:	asr	r1, r0, #31
    4094:	bl	0 <coda_str64>
    4098:	sub	r0, fp, #69	; 0x45
    409c:	bl	0 <strdup>
    40a0:	str	r0, [fp, #-28]	; 0xffffffe4
    40a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    40a8:	movw	r1, #0
    40ac:	cmp	r0, r1
    40b0:	bne	40e4 <cd_match_data_finalise+0x518>
    40b4:	mvn	r0, #0
    40b8:	movw	r1, #0
    40bc:	movt	r1, #0
    40c0:	movw	r2, #0
    40c4:	movt	r2, #0
    40c8:	movw	r3, #2184	; 0x888
    40cc:	bl	0 <coda_set_error>
    40d0:	ldr	r0, [sp, #76]	; 0x4c
    40d4:	bl	0 <coda_expression_delete>
    40d8:	mvn	r0, #0
    40dc:	str	r0, [fp, #-4]
    40e0:	b	428c <cd_match_data_finalise+0x6c0>
    40e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    40e8:	movw	r0, #20
    40ec:	movw	r2, #0
    40f0:	str	r2, [sp, #24]
    40f4:	ldr	r3, [sp, #24]
    40f8:	ldr	ip, [sp, #24]
    40fc:	str	ip, [sp]
    4100:	str	ip, [sp, #4]
    4104:	bl	0 <coda_expression_new>
    4108:	str	r0, [sp, #72]	; 0x48
    410c:	ldr	r0, [sp, #72]	; 0x48
    4110:	movw	r1, #0
    4114:	cmp	r0, r1
    4118:	bne	4130 <cd_match_data_finalise+0x564>
    411c:	ldr	r0, [sp, #76]	; 0x4c
    4120:	bl	0 <coda_expression_delete>
    4124:	mvn	r0, #0
    4128:	str	r0, [fp, #-4]
    412c:	b	428c <cd_match_data_finalise+0x6c0>
    4130:	ldr	r2, [sp, #76]	; 0x4c
    4134:	ldr	r0, [fp, #-12]
    4138:	ldr	r3, [r0, #4]
    413c:	ldr	r0, [sp, #72]	; 0x48
    4140:	movw	r1, #16
    4144:	str	r0, [sp, #20]
    4148:	mov	r0, r1
    414c:	movw	r1, #0
    4150:	str	r1, [sp, #16]
    4154:	ldr	ip, [sp, #20]
    4158:	str	ip, [sp]
    415c:	ldr	lr, [sp, #16]
    4160:	str	lr, [sp, #4]
    4164:	bl	0 <coda_expression_new>
    4168:	str	r0, [fp, #-16]
    416c:	ldr	r0, [fp, #-12]
    4170:	movw	r1, #0
    4174:	str	r1, [r0, #4]
    4178:	ldr	r0, [fp, #-16]
    417c:	cmp	r0, r1
    4180:	bne	4190 <cd_match_data_finalise+0x5c4>
    4184:	mvn	r0, #0
    4188:	str	r0, [fp, #-4]
    418c:	b	428c <cd_match_data_finalise+0x6c0>
    4190:	ldr	r0, [fp, #-8]
    4194:	ldr	r0, [r0]
    4198:	ldr	r0, [r0, #12]
    419c:	bl	0 <strdup>
    41a0:	str	r0, [fp, #-28]	; 0xffffffe4
    41a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    41a8:	movw	r1, #0
    41ac:	cmp	r0, r1
    41b0:	bne	41e4 <cd_match_data_finalise+0x618>
    41b4:	mvn	r0, #0
    41b8:	movw	r1, #0
    41bc:	movt	r1, #0
    41c0:	movw	r2, #0
    41c4:	movt	r2, #0
    41c8:	movw	r3, #2204	; 0x89c
    41cc:	bl	0 <coda_set_error>
    41d0:	ldr	r0, [fp, #-16]
    41d4:	bl	0 <coda_expression_delete>
    41d8:	mvn	r0, #0
    41dc:	str	r0, [fp, #-4]
    41e0:	b	428c <cd_match_data_finalise+0x6c0>
    41e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    41e8:	movw	r0, #22
    41ec:	movw	r2, #0
    41f0:	str	r2, [sp, #12]
    41f4:	ldr	r3, [sp, #12]
    41f8:	ldr	ip, [sp, #12]
    41fc:	str	ip, [sp]
    4200:	str	ip, [sp, #4]
    4204:	bl	0 <coda_expression_new>
    4208:	str	r0, [fp, #-20]	; 0xffffffec
    420c:	ldr	r0, [fp, #-20]	; 0xffffffec
    4210:	movw	r1, #0
    4214:	cmp	r0, r1
    4218:	bne	4230 <cd_match_data_finalise+0x664>
    421c:	ldr	r0, [fp, #-16]
    4220:	bl	0 <coda_expression_delete>
    4224:	mvn	r0, #0
    4228:	str	r0, [fp, #-4]
    422c:	b	428c <cd_match_data_finalise+0x6c0>
    4230:	ldr	r2, [fp, #-16]
    4234:	ldr	r3, [fp, #-20]	; 0xffffffec
    4238:	movw	r0, #25
    423c:	movw	r1, #0
    4240:	str	r1, [sp, #8]
    4244:	ldr	ip, [sp, #8]
    4248:	str	ip, [sp]
    424c:	str	ip, [sp, #4]
    4250:	bl	0 <coda_expression_new>
    4254:	ldr	r1, [fp, #-12]
    4258:	str	r0, [r1, #4]
    425c:	ldr	r0, [fp, #-12]
    4260:	ldr	r0, [r0, #4]
    4264:	movw	r1, #0
    4268:	cmp	r0, r1
    426c:	bne	427c <cd_match_data_finalise+0x6b0>
    4270:	mvn	r0, #0
    4274:	str	r0, [fp, #-4]
    4278:	b	428c <cd_match_data_finalise+0x6c0>
    427c:	b	4280 <cd_match_data_finalise+0x6b4>
    4280:	b	4284 <cd_match_data_finalise+0x6b8>
    4284:	movw	r0, #0
    4288:	str	r0, [fp, #-4]
    428c:	ldr	r0, [fp, #-4]
    4290:	mov	sp, fp
    4294:	pop	{fp, pc}
    4298:	.word	0xfffffe70

0000429c <escaped_string_length>:
    429c:	sub	sp, sp, #20
    42a0:	str	r0, [sp, #12]
    42a4:	ldr	r0, [sp, #12]
    42a8:	movw	r1, #0
    42ac:	cmp	r0, r1
    42b0:	bne	42c0 <escaped_string_length+0x24>
    42b4:	movw	r0, #0
    42b8:	str	r0, [sp, #16]
    42bc:	b	449c <escaped_string_length+0x200>
    42c0:	movw	r0, #0
    42c4:	str	r0, [sp, #8]
    42c8:	str	r0, [sp, #4]
    42cc:	ldr	r0, [sp, #12]
    42d0:	ldr	r1, [sp, #8]
    42d4:	add	r0, r0, r1
    42d8:	ldrb	r0, [r0]
    42dc:	cmp	r0, #0
    42e0:	beq	4494 <escaped_string_length+0x1f8>
    42e4:	ldr	r0, [sp, #12]
    42e8:	ldr	r1, [sp, #8]
    42ec:	add	r0, r0, r1
    42f0:	ldrb	r0, [r0]
    42f4:	cmp	r0, #92	; 0x5c
    42f8:	bne	4478 <escaped_string_length+0x1dc>
    42fc:	ldr	r0, [sp, #8]
    4300:	add	r0, r0, #1
    4304:	str	r0, [sp, #8]
    4308:	ldr	r0, [sp, #12]
    430c:	ldr	r1, [sp, #8]
    4310:	ldrb	r0, [r0, r1]
    4314:	mov	r1, r0
    4318:	cmp	r0, #92	; 0x5c
    431c:	str	r1, [sp]
    4320:	beq	4390 <escaped_string_length+0xf4>
    4324:	b	4328 <escaped_string_length+0x8c>
    4328:	ldr	r0, [sp]
    432c:	sub	r1, r0, #97	; 0x61
    4330:	cmp	r1, #2
    4334:	bcc	4390 <escaped_string_length+0xf4>
    4338:	b	433c <escaped_string_length+0xa0>
    433c:	ldr	r0, [sp]
    4340:	sub	r1, r0, #101	; 0x65
    4344:	cmp	r1, #2
    4348:	bcc	4390 <escaped_string_length+0xf4>
    434c:	b	4350 <escaped_string_length+0xb4>
    4350:	ldr	r0, [sp]
    4354:	cmp	r0, #110	; 0x6e
    4358:	beq	4390 <escaped_string_length+0xf4>
    435c:	b	4360 <escaped_string_length+0xc4>
    4360:	ldr	r0, [sp]
    4364:	cmp	r0, #114	; 0x72
    4368:	beq	4390 <escaped_string_length+0xf4>
    436c:	b	4370 <escaped_string_length+0xd4>
    4370:	ldr	r0, [sp]
    4374:	cmp	r0, #116	; 0x74
    4378:	beq	4390 <escaped_string_length+0xf4>
    437c:	b	4380 <escaped_string_length+0xe4>
    4380:	ldr	r0, [sp]
    4384:	cmp	r0, #118	; 0x76
    4388:	bne	43a0 <escaped_string_length+0x104>
    438c:	b	4390 <escaped_string_length+0xf4>
    4390:	ldr	r0, [sp, #4]
    4394:	add	r0, r0, #1
    4398:	str	r0, [sp, #4]
    439c:	b	4474 <escaped_string_length+0x1d8>
    43a0:	ldr	r0, [sp, #12]
    43a4:	ldr	r1, [sp, #8]
    43a8:	add	r0, r0, r1
    43ac:	ldrb	r0, [r0]
    43b0:	cmp	r0, #48	; 0x30
    43b4:	blt	43d0 <escaped_string_length+0x134>
    43b8:	ldr	r0, [sp, #12]
    43bc:	ldr	r1, [sp, #8]
    43c0:	add	r0, r0, r1
    43c4:	ldrb	r0, [r0]
    43c8:	cmp	r0, #57	; 0x39
    43cc:	ble	43dc <escaped_string_length+0x140>
    43d0:	mvn	r0, #0
    43d4:	str	r0, [sp, #16]
    43d8:	b	449c <escaped_string_length+0x200>
    43dc:	ldr	r0, [sp, #12]
    43e0:	ldr	r1, [sp, #8]
    43e4:	add	r1, r1, #1
    43e8:	add	r0, r0, r1
    43ec:	ldrb	r0, [r0]
    43f0:	cmp	r0, #48	; 0x30
    43f4:	blt	4468 <escaped_string_length+0x1cc>
    43f8:	ldr	r0, [sp, #12]
    43fc:	ldr	r1, [sp, #8]
    4400:	add	r1, r1, #1
    4404:	add	r0, r0, r1
    4408:	ldrb	r0, [r0]
    440c:	cmp	r0, #57	; 0x39
    4410:	bgt	4468 <escaped_string_length+0x1cc>
    4414:	ldr	r0, [sp, #8]
    4418:	add	r0, r0, #1
    441c:	str	r0, [sp, #8]
    4420:	ldr	r0, [sp, #12]
    4424:	ldr	r1, [sp, #8]
    4428:	add	r1, r1, #1
    442c:	add	r0, r0, r1
    4430:	ldrb	r0, [r0]
    4434:	cmp	r0, #48	; 0x30
    4438:	blt	4464 <escaped_string_length+0x1c8>
    443c:	ldr	r0, [sp, #12]
    4440:	ldr	r1, [sp, #8]
    4444:	add	r1, r1, #1
    4448:	add	r0, r0, r1
    444c:	ldrb	r0, [r0]
    4450:	cmp	r0, #57	; 0x39
    4454:	bgt	4464 <escaped_string_length+0x1c8>
    4458:	ldr	r0, [sp, #8]
    445c:	add	r0, r0, #1
    4460:	str	r0, [sp, #8]
    4464:	b	4468 <escaped_string_length+0x1cc>
    4468:	ldr	r0, [sp, #4]
    446c:	add	r0, r0, #1
    4470:	str	r0, [sp, #4]
    4474:	b	4484 <escaped_string_length+0x1e8>
    4478:	ldr	r0, [sp, #4]
    447c:	add	r0, r0, #1
    4480:	str	r0, [sp, #4]
    4484:	ldr	r0, [sp, #8]
    4488:	add	r0, r0, #1
    448c:	str	r0, [sp, #8]
    4490:	b	42cc <escaped_string_length+0x30>
    4494:	ldr	r0, [sp, #4]
    4498:	str	r0, [sp, #16]
    449c:	ldr	r0, [sp, #16]
    44a0:	add	sp, sp, #20
    44a4:	bx	lr

000044a8 <regexp_match_string>:
    44a8:	push	{fp, lr}
    44ac:	mov	fp, sp
    44b0:	sub	sp, sp, #40	; 0x28
    44b4:	str	r0, [fp, #-8]
    44b8:	ldr	r0, [fp, #-8]
    44bc:	bl	0 <strlen>
    44c0:	str	r0, [fp, #-16]
    44c4:	movw	r0, #0
    44c8:	str	r0, [sp, #20]
    44cc:	str	r0, [sp, #16]
    44d0:	ldr	r0, [sp, #16]
    44d4:	ldr	r1, [fp, #-16]
    44d8:	cmp	r0, r1
    44dc:	bge	469c <regexp_match_string+0x1f4>
    44e0:	ldr	r0, [fp, #-8]
    44e4:	ldr	r1, [sp, #16]
    44e8:	ldrb	r0, [r0, r1]
    44ec:	sub	r0, r0, #36	; 0x24
    44f0:	cmp	r0, #88	; 0x58
    44f4:	str	r0, [sp, #8]
    44f8:	bhi	467c <regexp_match_string+0x1d4>
    44fc:	add	r0, pc, #8
    4500:	ldr	r1, [sp, #8]
    4504:	ldr	r0, [r0, r1, lsl #2]
    4508:	mov	pc, r0
    450c:	.word	0x00004670
    4510:	.word	0x0000467c
    4514:	.word	0x0000467c
    4518:	.word	0x0000467c
    451c:	.word	0x00004670
    4520:	.word	0x00004670
    4524:	.word	0x00004670
    4528:	.word	0x00004670
    452c:	.word	0x0000467c
    4530:	.word	0x0000467c
    4534:	.word	0x00004670
    4538:	.word	0x0000467c
    453c:	.word	0x0000467c
    4540:	.word	0x0000467c
    4544:	.word	0x0000467c
    4548:	.word	0x0000467c
    454c:	.word	0x0000467c
    4550:	.word	0x0000467c
    4554:	.word	0x0000467c
    4558:	.word	0x0000467c
    455c:	.word	0x0000467c
    4560:	.word	0x0000467c
    4564:	.word	0x0000467c
    4568:	.word	0x0000467c
    456c:	.word	0x0000467c
    4570:	.word	0x0000467c
    4574:	.word	0x0000467c
    4578:	.word	0x00004670
    457c:	.word	0x0000467c
    4580:	.word	0x0000467c
    4584:	.word	0x0000467c
    4588:	.word	0x0000467c
    458c:	.word	0x0000467c
    4590:	.word	0x0000467c
    4594:	.word	0x0000467c
    4598:	.word	0x0000467c
    459c:	.word	0x0000467c
    45a0:	.word	0x0000467c
    45a4:	.word	0x0000467c
    45a8:	.word	0x0000467c
    45ac:	.word	0x0000467c
    45b0:	.word	0x0000467c
    45b4:	.word	0x0000467c
    45b8:	.word	0x0000467c
    45bc:	.word	0x0000467c
    45c0:	.word	0x0000467c
    45c4:	.word	0x0000467c
    45c8:	.word	0x0000467c
    45cc:	.word	0x0000467c
    45d0:	.word	0x0000467c
    45d4:	.word	0x0000467c
    45d8:	.word	0x0000467c
    45dc:	.word	0x0000467c
    45e0:	.word	0x0000467c
    45e4:	.word	0x0000467c
    45e8:	.word	0x00004670
    45ec:	.word	0x00004670
    45f0:	.word	0x0000467c
    45f4:	.word	0x00004670
    45f8:	.word	0x0000467c
    45fc:	.word	0x0000467c
    4600:	.word	0x0000467c
    4604:	.word	0x0000467c
    4608:	.word	0x0000467c
    460c:	.word	0x0000467c
    4610:	.word	0x0000467c
    4614:	.word	0x0000467c
    4618:	.word	0x0000467c
    461c:	.word	0x0000467c
    4620:	.word	0x0000467c
    4624:	.word	0x0000467c
    4628:	.word	0x0000467c
    462c:	.word	0x0000467c
    4630:	.word	0x0000467c
    4634:	.word	0x0000467c
    4638:	.word	0x0000467c
    463c:	.word	0x0000467c
    4640:	.word	0x0000467c
    4644:	.word	0x0000467c
    4648:	.word	0x0000467c
    464c:	.word	0x0000467c
    4650:	.word	0x0000467c
    4654:	.word	0x0000467c
    4658:	.word	0x0000467c
    465c:	.word	0x0000467c
    4660:	.word	0x0000467c
    4664:	.word	0x0000467c
    4668:	.word	0x00004670
    466c:	.word	0x00004670
    4670:	ldr	r0, [sp, #20]
    4674:	add	r0, r0, #1
    4678:	str	r0, [sp, #20]
    467c:	ldr	r0, [sp, #20]
    4680:	add	r0, r0, #1
    4684:	str	r0, [sp, #20]
    4688:	b	468c <regexp_match_string+0x1e4>
    468c:	ldr	r0, [sp, #16]
    4690:	add	r0, r0, #1
    4694:	str	r0, [sp, #16]
    4698:	b	44d0 <regexp_match_string+0x28>
    469c:	ldr	r0, [sp, #20]
    46a0:	add	r0, r0, #1
    46a4:	bl	0 <malloc>
    46a8:	str	r0, [fp, #-12]
    46ac:	ldr	r0, [fp, #-12]
    46b0:	movw	r1, #0
    46b4:	cmp	r0, r1
    46b8:	bne	46f0 <regexp_match_string+0x248>
    46bc:	ldr	r0, [sp, #20]
    46c0:	add	r2, r0, #1
    46c4:	mvn	r0, #0
    46c8:	movw	r1, #0
    46cc:	movt	r1, #0
    46d0:	movw	r3, #0
    46d4:	movt	r3, #0
    46d8:	movw	ip, #339	; 0x153
    46dc:	str	ip, [sp]
    46e0:	bl	0 <coda_set_error>
    46e4:	movw	r0, #0
    46e8:	str	r0, [fp, #-4]
    46ec:	b	4910 <regexp_match_string+0x468>
    46f0:	movw	r0, #0
    46f4:	str	r0, [sp, #12]
    46f8:	str	r0, [sp, #16]
    46fc:	ldr	r0, [sp, #16]
    4700:	ldr	r1, [fp, #-16]
    4704:	cmp	r0, r1
    4708:	bge	48f4 <regexp_match_string+0x44c>
    470c:	ldr	r0, [fp, #-8]
    4710:	ldr	r1, [sp, #16]
    4714:	ldrb	r0, [r0, r1]
    4718:	sub	r0, r0, #36	; 0x24
    471c:	cmp	r0, #88	; 0x58
    4720:	str	r0, [sp, #4]
    4724:	bhi	48b8 <regexp_match_string+0x410>
    4728:	add	r0, pc, #8
    472c:	ldr	r1, [sp, #4]
    4730:	ldr	r0, [r0, r1, lsl #2]
    4734:	mov	pc, r0
    4738:	.word	0x0000489c
    473c:	.word	0x000048b8
    4740:	.word	0x000048b8
    4744:	.word	0x000048b8
    4748:	.word	0x0000489c
    474c:	.word	0x0000489c
    4750:	.word	0x0000489c
    4754:	.word	0x0000489c
    4758:	.word	0x000048b8
    475c:	.word	0x000048b8
    4760:	.word	0x0000489c
    4764:	.word	0x000048b8
    4768:	.word	0x000048b8
    476c:	.word	0x000048b8
    4770:	.word	0x000048b8
    4774:	.word	0x000048b8
    4778:	.word	0x000048b8
    477c:	.word	0x000048b8
    4780:	.word	0x000048b8
    4784:	.word	0x000048b8
    4788:	.word	0x000048b8
    478c:	.word	0x000048b8
    4790:	.word	0x000048b8
    4794:	.word	0x000048b8
    4798:	.word	0x000048b8
    479c:	.word	0x000048b8
    47a0:	.word	0x000048b8
    47a4:	.word	0x0000489c
    47a8:	.word	0x000048b8
    47ac:	.word	0x000048b8
    47b0:	.word	0x000048b8
    47b4:	.word	0x000048b8
    47b8:	.word	0x000048b8
    47bc:	.word	0x000048b8
    47c0:	.word	0x000048b8
    47c4:	.word	0x000048b8
    47c8:	.word	0x000048b8
    47cc:	.word	0x000048b8
    47d0:	.word	0x000048b8
    47d4:	.word	0x000048b8
    47d8:	.word	0x000048b8
    47dc:	.word	0x000048b8
    47e0:	.word	0x000048b8
    47e4:	.word	0x000048b8
    47e8:	.word	0x000048b8
    47ec:	.word	0x000048b8
    47f0:	.word	0x000048b8
    47f4:	.word	0x000048b8
    47f8:	.word	0x000048b8
    47fc:	.word	0x000048b8
    4800:	.word	0x000048b8
    4804:	.word	0x000048b8
    4808:	.word	0x000048b8
    480c:	.word	0x000048b8
    4810:	.word	0x000048b8
    4814:	.word	0x0000489c
    4818:	.word	0x0000489c
    481c:	.word	0x000048b8
    4820:	.word	0x0000489c
    4824:	.word	0x000048b8
    4828:	.word	0x000048b8
    482c:	.word	0x000048b8
    4830:	.word	0x000048b8
    4834:	.word	0x000048b8
    4838:	.word	0x000048b8
    483c:	.word	0x000048b8
    4840:	.word	0x000048b8
    4844:	.word	0x000048b8
    4848:	.word	0x000048b8
    484c:	.word	0x000048b8
    4850:	.word	0x000048b8
    4854:	.word	0x000048b8
    4858:	.word	0x000048b8
    485c:	.word	0x000048b8
    4860:	.word	0x000048b8
    4864:	.word	0x000048b8
    4868:	.word	0x000048b8
    486c:	.word	0x000048b8
    4870:	.word	0x000048b8
    4874:	.word	0x000048b8
    4878:	.word	0x000048b8
    487c:	.word	0x000048b8
    4880:	.word	0x000048b8
    4884:	.word	0x000048b8
    4888:	.word	0x000048b8
    488c:	.word	0x000048b8
    4890:	.word	0x000048b8
    4894:	.word	0x0000489c
    4898:	.word	0x0000489c
    489c:	ldr	r0, [fp, #-12]
    48a0:	ldr	r1, [sp, #12]
    48a4:	add	r2, r1, #1
    48a8:	str	r2, [sp, #12]
    48ac:	add	r0, r0, r1
    48b0:	movw	r1, #92	; 0x5c
    48b4:	strb	r1, [r0]
    48b8:	ldr	r0, [fp, #-8]
    48bc:	ldr	r1, [sp, #16]
    48c0:	add	r0, r0, r1
    48c4:	ldrb	r0, [r0]
    48c8:	ldr	r1, [fp, #-12]
    48cc:	ldr	r2, [sp, #12]
    48d0:	add	r3, r2, #1
    48d4:	str	r3, [sp, #12]
    48d8:	add	r1, r1, r2
    48dc:	strb	r0, [r1]
    48e0:	b	48e4 <regexp_match_string+0x43c>
    48e4:	ldr	r0, [sp, #16]
    48e8:	add	r0, r0, #1
    48ec:	str	r0, [sp, #16]
    48f0:	b	46fc <regexp_match_string+0x254>
    48f4:	ldr	r0, [fp, #-12]
    48f8:	ldr	r1, [sp, #12]
    48fc:	add	r0, r0, r1
    4900:	movw	r1, #0
    4904:	strb	r1, [r0]
    4908:	ldr	r0, [fp, #-12]
    490c:	str	r0, [fp, #-4]
    4910:	ldr	r0, [fp, #-4]
    4914:	mov	sp, fp
    4918:	pop	{fp, pc}

0000491c <cd_match_expression_finalise>:
    491c:	push	{fp, lr}
    4920:	mov	fp, sp
    4924:	sub	sp, sp, #24
    4928:	str	r0, [fp, #-8]
    492c:	ldr	r0, [fp, #-8]
    4930:	ldr	r0, [r0]
    4934:	ldr	r0, [r0, #12]
    4938:	movw	r1, #0
    493c:	cmp	r0, r1
    4940:	beq	49a8 <cd_match_expression_finalise+0x8c>
    4944:	ldr	r0, [fp, #-8]
    4948:	ldr	r0, [r0]
    494c:	ldr	r0, [r0, #12]
    4950:	ldr	r1, [fp, #-8]
    4954:	ldr	r1, [r1]
    4958:	ldr	r1, [r1, #12]
    495c:	str	r0, [sp, #4]
    4960:	mov	r0, r1
    4964:	bl	0 <strlen>
    4968:	ldr	r1, [sp, #4]
    496c:	str	r0, [sp]
    4970:	mov	r0, r1
    4974:	ldr	r1, [sp]
    4978:	bl	1ff0 <is_whitespace>
    497c:	cmp	r0, #0
    4980:	beq	49a4 <cd_match_expression_finalise+0x88>
    4984:	ldr	r0, [fp, #-8]
    4988:	ldr	r0, [r0]
    498c:	ldr	r0, [r0, #12]
    4990:	bl	0 <free>
    4994:	ldr	r0, [fp, #-8]
    4998:	ldr	r0, [r0]
    499c:	movw	r1, #0
    49a0:	str	r1, [r0, #12]
    49a4:	b	49a8 <cd_match_expression_finalise+0x8c>
    49a8:	ldr	r0, [fp, #-8]
    49ac:	ldr	r0, [r0]
    49b0:	ldr	r0, [r0, #12]
    49b4:	movw	r1, #0
    49b8:	cmp	r0, r1
    49bc:	bne	49dc <cd_match_expression_finalise+0xc0>
    49c0:	ldr	r0, [pc, #204]	; 4a94 <cd_match_expression_finalise+0x178>
    49c4:	movw	r1, #0
    49c8:	movt	r1, #0
    49cc:	bl	0 <coda_set_error>
    49d0:	mvn	r0, #0
    49d4:	str	r0, [fp, #-4]
    49d8:	b	4a88 <cd_match_expression_finalise+0x16c>
    49dc:	ldr	r0, [fp, #-8]
    49e0:	ldr	r0, [r0]
    49e4:	ldr	r0, [r0, #12]
    49e8:	add	r1, sp, #8
    49ec:	bl	0 <coda_expression_from_string>
    49f0:	cmp	r0, #0
    49f4:	beq	4a04 <cd_match_expression_finalise+0xe8>
    49f8:	mvn	r0, #0
    49fc:	str	r0, [fp, #-4]
    4a00:	b	4a88 <cd_match_expression_finalise+0x16c>
    4a04:	ldr	r0, [fp, #-8]
    4a08:	ldr	r0, [r0]
    4a0c:	ldr	r0, [r0, #12]
    4a10:	bl	0 <free>
    4a14:	ldr	r0, [fp, #-8]
    4a18:	ldr	r0, [r0]
    4a1c:	movw	r1, #0
    4a20:	str	r1, [r0, #12]
    4a24:	ldr	r0, [sp, #8]
    4a28:	ldr	r1, [fp, #-8]
    4a2c:	ldr	r1, [r1]
    4a30:	ldr	r1, [r1, #8]
    4a34:	str	r0, [r1, #4]
    4a38:	ldr	r0, [sp, #8]
    4a3c:	add	r1, sp, #12
    4a40:	bl	0 <coda_expression_get_type>
    4a44:	cmp	r0, #0
    4a48:	beq	4a58 <cd_match_expression_finalise+0x13c>
    4a4c:	mvn	r0, #0
    4a50:	str	r0, [fp, #-4]
    4a54:	b	4a88 <cd_match_expression_finalise+0x16c>
    4a58:	ldr	r0, [sp, #12]
    4a5c:	cmp	r0, #0
    4a60:	beq	4a80 <cd_match_expression_finalise+0x164>
    4a64:	ldr	r0, [pc, #40]	; 4a94 <cd_match_expression_finalise+0x178>
    4a68:	movw	r1, #0
    4a6c:	movt	r1, #0
    4a70:	bl	0 <coda_set_error>
    4a74:	mvn	r0, #0
    4a78:	str	r0, [fp, #-4]
    4a7c:	b	4a88 <cd_match_expression_finalise+0x16c>
    4a80:	movw	r0, #0
    4a84:	str	r0, [fp, #-4]
    4a88:	ldr	r0, [fp, #-4]
    4a8c:	mov	sp, fp
    4a90:	pop	{fp, pc}
    4a94:	.word	0xfffffe70

00004a98 <cd_match_filename_finalise>:
    4a98:	push	{fp, lr}
    4a9c:	mov	fp, sp
    4aa0:	sub	sp, sp, #96	; 0x60
    4aa4:	str	r0, [fp, #-8]
    4aa8:	ldr	r0, [fp, #-8]
    4aac:	ldr	r0, [r0]
    4ab0:	ldr	r0, [r0, #8]
    4ab4:	str	r0, [fp, #-12]
    4ab8:	ldr	r0, [fp, #-8]
    4abc:	ldr	r0, [r0]
    4ac0:	ldr	r0, [r0, #12]
    4ac4:	bl	429c <escaped_string_length>
    4ac8:	str	r0, [sp, #32]
    4acc:	ldr	r0, [sp, #32]
    4ad0:	cmp	r0, #0
    4ad4:	bge	4af4 <cd_match_filename_finalise+0x5c>
    4ad8:	ldr	r0, [pc, #640]	; 4d60 <cd_match_filename_finalise+0x2c8>
    4adc:	movw	r1, #0
    4ae0:	movt	r1, #0
    4ae4:	bl	0 <coda_set_error>
    4ae8:	mvn	r0, #0
    4aec:	str	r0, [fp, #-4]
    4af0:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4af4:	ldr	r0, [sp, #32]
    4af8:	cmp	r0, #0
    4afc:	bne	4b1c <cd_match_filename_finalise+0x84>
    4b00:	ldr	r0, [pc, #600]	; 4d60 <cd_match_filename_finalise+0x2c8>
    4b04:	movw	r1, #0
    4b08:	movt	r1, #0
    4b0c:	bl	0 <coda_set_error>
    4b10:	mvn	r0, #0
    4b14:	str	r0, [fp, #-4]
    4b18:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4b1c:	movw	r0, #28
    4b20:	movw	r1, #0
    4b24:	str	r1, [sp, #28]
    4b28:	ldr	r2, [sp, #28]
    4b2c:	ldr	r3, [sp, #28]
    4b30:	ldr	ip, [sp, #28]
    4b34:	str	ip, [sp]
    4b38:	str	ip, [sp, #4]
    4b3c:	bl	0 <coda_expression_new>
    4b40:	str	r0, [fp, #-16]
    4b44:	ldr	r0, [fp, #-16]
    4b48:	movw	r1, #0
    4b4c:	cmp	r0, r1
    4b50:	bne	4b60 <cd_match_filename_finalise+0xc8>
    4b54:	mvn	r0, #0
    4b58:	str	r0, [fp, #-4]
    4b5c:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4b60:	add	r2, sp, #43	; 0x2b
    4b64:	ldr	r0, [sp, #32]
    4b68:	asr	r1, r0, #31
    4b6c:	bl	0 <coda_str64>
    4b70:	add	r0, sp, #43	; 0x2b
    4b74:	bl	0 <strdup>
    4b78:	str	r0, [sp, #36]	; 0x24
    4b7c:	ldr	r0, [sp, #36]	; 0x24
    4b80:	movw	r1, #0
    4b84:	cmp	r0, r1
    4b88:	bne	4bb4 <cd_match_filename_finalise+0x11c>
    4b8c:	mvn	r0, #0
    4b90:	movw	r1, #0
    4b94:	movt	r1, #0
    4b98:	movw	r2, #0
    4b9c:	movt	r2, #0
    4ba0:	movw	r3, #2588	; 0xa1c
    4ba4:	bl	0 <coda_set_error>
    4ba8:	mvn	r0, #0
    4bac:	str	r0, [fp, #-4]
    4bb0:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4bb4:	ldr	r1, [sp, #36]	; 0x24
    4bb8:	movw	r0, #20
    4bbc:	movw	r2, #0
    4bc0:	str	r2, [sp, #24]
    4bc4:	ldr	r3, [sp, #24]
    4bc8:	ldr	ip, [sp, #24]
    4bcc:	str	ip, [sp]
    4bd0:	str	ip, [sp, #4]
    4bd4:	bl	0 <coda_expression_new>
    4bd8:	str	r0, [fp, #-20]	; 0xffffffec
    4bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    4be0:	movw	r1, #0
    4be4:	cmp	r0, r1
    4be8:	bne	4c00 <cd_match_filename_finalise+0x168>
    4bec:	ldr	r0, [fp, #-16]
    4bf0:	bl	0 <coda_expression_delete>
    4bf4:	mvn	r0, #0
    4bf8:	str	r0, [fp, #-4]
    4bfc:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4c00:	ldr	r0, [fp, #-12]
    4c04:	ldr	r2, [r0, #4]
    4c08:	ldr	r3, [fp, #-20]	; 0xffffffec
    4c0c:	ldr	r0, [fp, #-16]
    4c10:	movw	r1, #77	; 0x4d
    4c14:	str	r0, [sp, #20]
    4c18:	mov	r0, r1
    4c1c:	movw	r1, #0
    4c20:	str	r1, [sp, #16]
    4c24:	ldr	ip, [sp, #20]
    4c28:	str	ip, [sp]
    4c2c:	ldr	lr, [sp, #16]
    4c30:	str	lr, [sp, #4]
    4c34:	bl	0 <coda_expression_new>
    4c38:	str	r0, [fp, #-24]	; 0xffffffe8
    4c3c:	ldr	r0, [fp, #-12]
    4c40:	movw	r1, #0
    4c44:	str	r1, [r0, #4]
    4c48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4c4c:	cmp	r0, r1
    4c50:	bne	4c60 <cd_match_filename_finalise+0x1c8>
    4c54:	mvn	r0, #0
    4c58:	str	r0, [fp, #-4]
    4c5c:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4c60:	ldr	r0, [fp, #-8]
    4c64:	ldr	r0, [r0]
    4c68:	ldr	r0, [r0, #12]
    4c6c:	bl	0 <strdup>
    4c70:	str	r0, [sp, #36]	; 0x24
    4c74:	ldr	r0, [sp, #36]	; 0x24
    4c78:	movw	r1, #0
    4c7c:	cmp	r0, r1
    4c80:	bne	4cb4 <cd_match_filename_finalise+0x21c>
    4c84:	mvn	r0, #0
    4c88:	movw	r1, #0
    4c8c:	movt	r1, #0
    4c90:	movw	r2, #0
    4c94:	movt	r2, #0
    4c98:	movw	r3, #2607	; 0xa2f
    4c9c:	bl	0 <coda_set_error>
    4ca0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4ca4:	bl	0 <coda_expression_delete>
    4ca8:	mvn	r0, #0
    4cac:	str	r0, [fp, #-4]
    4cb0:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4cb4:	ldr	r1, [sp, #36]	; 0x24
    4cb8:	movw	r0, #22
    4cbc:	movw	r2, #0
    4cc0:	str	r2, [sp, #12]
    4cc4:	ldr	r3, [sp, #12]
    4cc8:	ldr	ip, [sp, #12]
    4ccc:	str	ip, [sp]
    4cd0:	str	ip, [sp, #4]
    4cd4:	bl	0 <coda_expression_new>
    4cd8:	str	r0, [fp, #-28]	; 0xffffffe4
    4cdc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    4ce0:	movw	r1, #0
    4ce4:	cmp	r0, r1
    4ce8:	bne	4d00 <cd_match_filename_finalise+0x268>
    4cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    4cf0:	bl	0 <coda_expression_delete>
    4cf4:	mvn	r0, #0
    4cf8:	str	r0, [fp, #-4]
    4cfc:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4d00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4d04:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4d08:	movw	r0, #25
    4d0c:	movw	r1, #0
    4d10:	str	r1, [sp, #8]
    4d14:	ldr	ip, [sp, #8]
    4d18:	str	ip, [sp]
    4d1c:	str	ip, [sp, #4]
    4d20:	bl	0 <coda_expression_new>
    4d24:	ldr	r1, [fp, #-12]
    4d28:	str	r0, [r1, #4]
    4d2c:	ldr	r0, [fp, #-12]
    4d30:	ldr	r0, [r0, #4]
    4d34:	movw	r1, #0
    4d38:	cmp	r0, r1
    4d3c:	bne	4d4c <cd_match_filename_finalise+0x2b4>
    4d40:	mvn	r0, #0
    4d44:	str	r0, [fp, #-4]
    4d48:	b	4d54 <cd_match_filename_finalise+0x2bc>
    4d4c:	movw	r0, #0
    4d50:	str	r0, [fp, #-4]
    4d54:	ldr	r0, [fp, #-4]
    4d58:	mov	sp, fp
    4d5c:	pop	{fp, pc}
    4d60:	.word	0xfffffe70

00004d64 <cd_ascii_line_init>:
    4d64:	push	{fp, lr}
    4d68:	mov	fp, sp
    4d6c:	sub	sp, sp, #16
    4d70:	str	r0, [sp, #8]
    4d74:	str	r1, [sp, #4]
    4d78:	ldr	r0, [sp, #8]
    4d7c:	ldr	r1, [sp, #4]
    4d80:	bl	7028 <handle_format_attribute_for_type>
    4d84:	cmp	r0, #0
    4d88:	beq	4d98 <cd_ascii_line_init+0x34>
    4d8c:	mvn	r0, #0
    4d90:	str	r0, [fp, #-4]
    4d94:	b	4e5c <cd_ascii_line_init+0xf8>
    4d98:	movw	r0, #0
    4d9c:	movt	r0, #0
    4da0:	ldr	r1, [sp, #8]
    4da4:	ldr	r1, [r1]
    4da8:	str	r0, [r1, #40]	; 0x28
    4dac:	ldr	r0, [sp, #8]
    4db0:	ldr	r0, [r0]
    4db4:	ldr	r0, [r0, #44]	; 0x2c
    4db8:	bl	0 <coda_type_text_new>
    4dbc:	ldr	r1, [sp, #8]
    4dc0:	ldr	r1, [r1]
    4dc4:	str	r0, [r1, #8]
    4dc8:	ldr	r0, [sp, #8]
    4dcc:	ldr	r0, [r0]
    4dd0:	ldr	r0, [r0, #8]
    4dd4:	movw	r1, #0
    4dd8:	cmp	r0, r1
    4ddc:	bne	4dec <cd_ascii_line_init+0x88>
    4de0:	mvn	r0, #0
    4de4:	str	r0, [fp, #-4]
    4de8:	b	4e5c <cd_ascii_line_init+0xf8>
    4dec:	ldr	r0, [sp, #8]
    4df0:	ldr	r0, [r0]
    4df4:	ldr	r0, [r0, #8]
    4df8:	movw	r1, #3
    4dfc:	bl	0 <coda_type_text_set_special_text_type>
    4e00:	cmp	r0, #0
    4e04:	beq	4e14 <cd_ascii_line_init+0xb0>
    4e08:	mvn	r0, #0
    4e0c:	str	r0, [fp, #-4]
    4e10:	b	4e5c <cd_ascii_line_init+0xf8>
    4e14:	ldr	r0, [sp, #8]
    4e18:	ldr	r1, [sp, #4]
    4e1c:	bl	7154 <handle_name_attribute_for_type>
    4e20:	cmp	r0, #0
    4e24:	beq	4e34 <cd_ascii_line_init+0xd0>
    4e28:	mvn	r0, #0
    4e2c:	str	r0, [fp, #-4]
    4e30:	b	4e5c <cd_ascii_line_init+0xf8>
    4e34:	ldr	r0, [sp, #8]
    4e38:	ldr	r0, [r0]
    4e3c:	movw	r1, #11
    4e40:	movw	r2, #0
    4e44:	movt	r2, #0
    4e48:	movw	r3, #0
    4e4c:	movt	r3, #0
    4e50:	bl	1344 <register_sub_element>
    4e54:	movw	r0, #0
    4e58:	str	r0, [fp, #-4]
    4e5c:	ldr	r0, [fp, #-4]
    4e60:	mov	sp, fp
    4e64:	pop	{fp, pc}

00004e68 <cd_ascii_line_separator_init>:
    4e68:	push	{fp, lr}
    4e6c:	mov	fp, sp
    4e70:	sub	sp, sp, #16
    4e74:	str	r0, [sp, #8]
    4e78:	str	r1, [sp, #4]
    4e7c:	ldr	r0, [sp, #8]
    4e80:	ldr	r1, [sp, #4]
    4e84:	bl	7028 <handle_format_attribute_for_type>
    4e88:	cmp	r0, #0
    4e8c:	beq	4e9c <cd_ascii_line_separator_init+0x34>
    4e90:	mvn	r0, #0
    4e94:	str	r0, [fp, #-4]
    4e98:	b	4f60 <cd_ascii_line_separator_init+0xf8>
    4e9c:	movw	r0, #0
    4ea0:	movt	r0, #0
    4ea4:	ldr	r1, [sp, #8]
    4ea8:	ldr	r1, [r1]
    4eac:	str	r0, [r1, #40]	; 0x28
    4eb0:	ldr	r0, [sp, #8]
    4eb4:	ldr	r0, [r0]
    4eb8:	ldr	r0, [r0, #44]	; 0x2c
    4ebc:	bl	0 <coda_type_text_new>
    4ec0:	ldr	r1, [sp, #8]
    4ec4:	ldr	r1, [r1]
    4ec8:	str	r0, [r1, #8]
    4ecc:	ldr	r0, [sp, #8]
    4ed0:	ldr	r0, [r0]
    4ed4:	ldr	r0, [r0, #8]
    4ed8:	movw	r1, #0
    4edc:	cmp	r0, r1
    4ee0:	bne	4ef0 <cd_ascii_line_separator_init+0x88>
    4ee4:	mvn	r0, #0
    4ee8:	str	r0, [fp, #-4]
    4eec:	b	4f60 <cd_ascii_line_separator_init+0xf8>
    4ef0:	ldr	r0, [sp, #8]
    4ef4:	ldr	r0, [r0]
    4ef8:	ldr	r0, [r0, #8]
    4efc:	movw	r1, #1
    4f00:	bl	0 <coda_type_text_set_special_text_type>
    4f04:	cmp	r0, #0
    4f08:	beq	4f18 <cd_ascii_line_separator_init+0xb0>
    4f0c:	mvn	r0, #0
    4f10:	str	r0, [fp, #-4]
    4f14:	b	4f60 <cd_ascii_line_separator_init+0xf8>
    4f18:	ldr	r0, [sp, #8]
    4f1c:	ldr	r1, [sp, #4]
    4f20:	bl	7154 <handle_name_attribute_for_type>
    4f24:	cmp	r0, #0
    4f28:	beq	4f38 <cd_ascii_line_separator_init+0xd0>
    4f2c:	mvn	r0, #0
    4f30:	str	r0, [fp, #-4]
    4f34:	b	4f60 <cd_ascii_line_separator_init+0xf8>
    4f38:	ldr	r0, [sp, #8]
    4f3c:	ldr	r0, [r0]
    4f40:	movw	r1, #11
    4f44:	movw	r2, #0
    4f48:	movt	r2, #0
    4f4c:	movw	r3, #0
    4f50:	movt	r3, #0
    4f54:	bl	1344 <register_sub_element>
    4f58:	movw	r0, #0
    4f5c:	str	r0, [fp, #-4]
    4f60:	ldr	r0, [fp, #-4]
    4f64:	mov	sp, fp
    4f68:	pop	{fp, pc}

00004f6c <cd_ascii_white_space_init>:
    4f6c:	push	{fp, lr}
    4f70:	mov	fp, sp
    4f74:	sub	sp, sp, #16
    4f78:	str	r0, [sp, #8]
    4f7c:	str	r1, [sp, #4]
    4f80:	ldr	r0, [sp, #8]
    4f84:	ldr	r1, [sp, #4]
    4f88:	bl	7028 <handle_format_attribute_for_type>
    4f8c:	cmp	r0, #0
    4f90:	beq	4fa0 <cd_ascii_white_space_init+0x34>
    4f94:	mvn	r0, #0
    4f98:	str	r0, [fp, #-4]
    4f9c:	b	5064 <cd_ascii_white_space_init+0xf8>
    4fa0:	movw	r0, #0
    4fa4:	movt	r0, #0
    4fa8:	ldr	r1, [sp, #8]
    4fac:	ldr	r1, [r1]
    4fb0:	str	r0, [r1, #40]	; 0x28
    4fb4:	ldr	r0, [sp, #8]
    4fb8:	ldr	r0, [r0]
    4fbc:	ldr	r0, [r0, #44]	; 0x2c
    4fc0:	bl	0 <coda_type_text_new>
    4fc4:	ldr	r1, [sp, #8]
    4fc8:	ldr	r1, [r1]
    4fcc:	str	r0, [r1, #8]
    4fd0:	ldr	r0, [sp, #8]
    4fd4:	ldr	r0, [r0]
    4fd8:	ldr	r0, [r0, #8]
    4fdc:	movw	r1, #0
    4fe0:	cmp	r0, r1
    4fe4:	bne	4ff4 <cd_ascii_white_space_init+0x88>
    4fe8:	mvn	r0, #0
    4fec:	str	r0, [fp, #-4]
    4ff0:	b	5064 <cd_ascii_white_space_init+0xf8>
    4ff4:	ldr	r0, [sp, #8]
    4ff8:	ldr	r0, [r0]
    4ffc:	ldr	r0, [r0, #8]
    5000:	movw	r1, #4
    5004:	bl	0 <coda_type_text_set_special_text_type>
    5008:	cmp	r0, #0
    500c:	beq	501c <cd_ascii_white_space_init+0xb0>
    5010:	mvn	r0, #0
    5014:	str	r0, [fp, #-4]
    5018:	b	5064 <cd_ascii_white_space_init+0xf8>
    501c:	ldr	r0, [sp, #8]
    5020:	ldr	r1, [sp, #4]
    5024:	bl	7154 <handle_name_attribute_for_type>
    5028:	cmp	r0, #0
    502c:	beq	503c <cd_ascii_white_space_init+0xd0>
    5030:	mvn	r0, #0
    5034:	str	r0, [fp, #-4]
    5038:	b	5064 <cd_ascii_white_space_init+0xf8>
    503c:	ldr	r0, [sp, #8]
    5040:	ldr	r0, [r0]
    5044:	movw	r1, #11
    5048:	movw	r2, #0
    504c:	movt	r2, #0
    5050:	movw	r3, #0
    5054:	movt	r3, #0
    5058:	bl	1344 <register_sub_element>
    505c:	movw	r0, #0
    5060:	str	r0, [fp, #-4]
    5064:	ldr	r0, [fp, #-4]
    5068:	mov	sp, fp
    506c:	pop	{fp, pc}

00005070 <cd_array_init>:
    5070:	push	{fp, lr}
    5074:	mov	fp, sp
    5078:	sub	sp, sp, #16
    507c:	str	r0, [sp, #8]
    5080:	str	r1, [sp, #4]
    5084:	ldr	r0, [sp, #8]
    5088:	ldr	r1, [sp, #4]
    508c:	bl	7028 <handle_format_attribute_for_type>
    5090:	cmp	r0, #0
    5094:	beq	50a4 <cd_array_init+0x34>
    5098:	mvn	r0, #0
    509c:	str	r0, [fp, #-4]
    50a0:	b	51a8 <cd_array_init+0x138>
    50a4:	movw	r0, #0
    50a8:	movt	r0, #0
    50ac:	ldr	r1, [sp, #8]
    50b0:	ldr	r1, [r1]
    50b4:	str	r0, [r1, #40]	; 0x28
    50b8:	ldr	r0, [sp, #8]
    50bc:	ldr	r0, [r0]
    50c0:	ldr	r0, [r0, #44]	; 0x2c
    50c4:	bl	0 <coda_type_array_new>
    50c8:	ldr	r1, [sp, #8]
    50cc:	ldr	r1, [r1]
    50d0:	str	r0, [r1, #8]
    50d4:	ldr	r0, [sp, #8]
    50d8:	ldr	r0, [r0]
    50dc:	ldr	r0, [r0, #8]
    50e0:	movw	r1, #0
    50e4:	cmp	r0, r1
    50e8:	bne	50f8 <cd_array_init+0x88>
    50ec:	mvn	r0, #0
    50f0:	str	r0, [fp, #-4]
    50f4:	b	51a8 <cd_array_init+0x138>
    50f8:	ldr	r0, [sp, #8]
    50fc:	ldr	r1, [sp, #4]
    5100:	bl	7154 <handle_name_attribute_for_type>
    5104:	cmp	r0, #0
    5108:	beq	5118 <cd_array_init+0xa8>
    510c:	mvn	r0, #0
    5110:	str	r0, [fp, #-4]
    5114:	b	51a8 <cd_array_init+0x138>
    5118:	ldr	r0, [sp, #8]
    511c:	ldr	r0, [r0]
    5120:	movw	r1, #0
    5124:	movt	r1, #0
    5128:	bl	1684 <register_type_elements>
    512c:	ldr	r0, [sp, #8]
    5130:	ldr	r0, [r0]
    5134:	movw	r1, #13
    5138:	movw	r2, #0
    513c:	movt	r2, #0
    5140:	movw	r3, #0
    5144:	movt	r3, #0
    5148:	bl	1344 <register_sub_element>
    514c:	ldr	r0, [sp, #8]
    5150:	ldr	r0, [r0]
    5154:	movw	r1, #11
    5158:	movw	r2, #0
    515c:	movt	r2, #0
    5160:	movw	r3, #0
    5164:	movt	r3, #0
    5168:	bl	1344 <register_sub_element>
    516c:	ldr	r0, [sp, #8]
    5170:	ldr	r0, [r0]
    5174:	movw	r1, #4
    5178:	movw	r2, #0
    517c:	movt	r2, #0
    5180:	movw	r3, #0
    5184:	movt	r3, #0
    5188:	bl	1344 <register_sub_element>
    518c:	ldr	r0, [sp, #8]
    5190:	ldr	r0, [r0]
    5194:	movw	r1, #0
    5198:	movt	r1, #0
    519c:	str	r1, [r0, #36]	; 0x24
    51a0:	movw	r0, #0
    51a4:	str	r0, [fp, #-4]
    51a8:	ldr	r0, [fp, #-4]
    51ac:	mov	sp, fp
    51b0:	pop	{fp, pc}

000051b4 <cd_complex_init>:
    51b4:	push	{fp, lr}
    51b8:	mov	fp, sp
    51bc:	sub	sp, sp, #16
    51c0:	str	r0, [sp, #8]
    51c4:	str	r1, [sp, #4]
    51c8:	ldr	r0, [sp, #8]
    51cc:	ldr	r1, [sp, #4]
    51d0:	bl	7028 <handle_format_attribute_for_type>
    51d4:	cmp	r0, #0
    51d8:	beq	51e8 <cd_complex_init+0x34>
    51dc:	mvn	r0, #0
    51e0:	str	r0, [fp, #-4]
    51e4:	b	52d8 <cd_complex_init+0x124>
    51e8:	movw	r0, #0
    51ec:	movt	r0, #0
    51f0:	ldr	r1, [sp, #8]
    51f4:	ldr	r1, [r1]
    51f8:	str	r0, [r1, #40]	; 0x28
    51fc:	ldr	r0, [sp, #8]
    5200:	ldr	r0, [r0]
    5204:	ldr	r0, [r0, #44]	; 0x2c
    5208:	bl	0 <coda_type_complex_new>
    520c:	ldr	r1, [sp, #8]
    5210:	ldr	r1, [r1]
    5214:	str	r0, [r1, #8]
    5218:	ldr	r0, [sp, #8]
    521c:	ldr	r0, [r0]
    5220:	ldr	r0, [r0, #8]
    5224:	movw	r1, #0
    5228:	cmp	r0, r1
    522c:	bne	523c <cd_complex_init+0x88>
    5230:	mvn	r0, #0
    5234:	str	r0, [fp, #-4]
    5238:	b	52d8 <cd_complex_init+0x124>
    523c:	ldr	r0, [sp, #8]
    5240:	ldr	r1, [sp, #4]
    5244:	bl	7154 <handle_name_attribute_for_type>
    5248:	cmp	r0, #0
    524c:	beq	525c <cd_complex_init+0xa8>
    5250:	mvn	r0, #0
    5254:	str	r0, [fp, #-4]
    5258:	b	52d8 <cd_complex_init+0x124>
    525c:	ldr	r0, [sp, #8]
    5260:	ldr	r0, [r0]
    5264:	movw	r1, #11
    5268:	movw	r2, #0
    526c:	movt	r2, #0
    5270:	movw	r3, #0
    5274:	movt	r3, #0
    5278:	bl	1344 <register_sub_element>
    527c:	ldr	r0, [sp, #8]
    5280:	ldr	r0, [r0]
    5284:	movw	r1, #17
    5288:	movw	r2, #0
    528c:	movt	r2, #0
    5290:	movw	r3, #0
    5294:	movt	r3, #0
    5298:	bl	1344 <register_sub_element>
    529c:	ldr	r0, [sp, #8]
    52a0:	ldr	r0, [r0]
    52a4:	movw	r1, #20
    52a8:	movw	r2, #0
    52ac:	movt	r2, #0
    52b0:	movw	r3, #0
    52b4:	movt	r3, #0
    52b8:	bl	1344 <register_sub_element>
    52bc:	ldr	r0, [sp, #8]
    52c0:	ldr	r0, [r0]
    52c4:	movw	r1, #0
    52c8:	movt	r1, #0
    52cc:	str	r1, [r0, #36]	; 0x24
    52d0:	movw	r0, #0
    52d4:	str	r0, [fp, #-4]
    52d8:	ldr	r0, [fp, #-4]
    52dc:	mov	sp, fp
    52e0:	pop	{fp, pc}

000052e4 <cd_float_init>:
    52e4:	push	{fp, lr}
    52e8:	mov	fp, sp
    52ec:	sub	sp, sp, #16
    52f0:	str	r0, [sp, #8]
    52f4:	str	r1, [sp, #4]
    52f8:	ldr	r0, [sp, #8]
    52fc:	ldr	r1, [sp, #4]
    5300:	bl	7028 <handle_format_attribute_for_type>
    5304:	cmp	r0, #0
    5308:	beq	5318 <cd_float_init+0x34>
    530c:	mvn	r0, #0
    5310:	str	r0, [fp, #-4]
    5314:	b	54cc <cd_float_init+0x1e8>
    5318:	movw	r0, #0
    531c:	movt	r0, #0
    5320:	ldr	r1, [sp, #8]
    5324:	ldr	r1, [r1]
    5328:	str	r0, [r1, #40]	; 0x28
    532c:	ldr	r0, [sp, #8]
    5330:	ldr	r0, [r0]
    5334:	ldr	r0, [r0, #44]	; 0x2c
    5338:	movw	r1, #3
    533c:	bl	0 <coda_type_number_new>
    5340:	ldr	r1, [sp, #8]
    5344:	ldr	r1, [r1]
    5348:	str	r0, [r1, #8]
    534c:	ldr	r0, [sp, #8]
    5350:	ldr	r0, [r0]
    5354:	ldr	r0, [r0, #8]
    5358:	movw	r1, #0
    535c:	cmp	r0, r1
    5360:	bne	5370 <cd_float_init+0x8c>
    5364:	mvn	r0, #0
    5368:	str	r0, [fp, #-4]
    536c:	b	54cc <cd_float_init+0x1e8>
    5370:	ldr	r0, [sp, #8]
    5374:	ldr	r1, [sp, #4]
    5378:	bl	7154 <handle_name_attribute_for_type>
    537c:	cmp	r0, #0
    5380:	beq	5390 <cd_float_init+0xac>
    5384:	mvn	r0, #0
    5388:	str	r0, [fp, #-4]
    538c:	b	54cc <cd_float_init+0x1e8>
    5390:	ldr	r0, [sp, #8]
    5394:	ldr	r0, [r0]
    5398:	movw	r1, #41	; 0x29
    539c:	movw	r2, #0
    53a0:	movt	r2, #0
    53a4:	movw	r3, #0
    53a8:	movt	r3, #0
    53ac:	bl	1344 <register_sub_element>
    53b0:	ldr	r0, [sp, #8]
    53b4:	ldr	r0, [r0]
    53b8:	movw	r1, #28
    53bc:	movw	r2, #0
    53c0:	movt	r2, #0
    53c4:	movw	r3, #0
    53c8:	movt	r3, #0
    53cc:	bl	1344 <register_sub_element>
    53d0:	ldr	r0, [sp, #8]
    53d4:	ldr	r0, [r0]
    53d8:	movw	r1, #10
    53dc:	movw	r2, #0
    53e0:	movt	r2, #0
    53e4:	movw	r3, #0
    53e8:	movt	r3, #0
    53ec:	bl	1344 <register_sub_element>
    53f0:	ldr	r0, [sp, #8]
    53f4:	ldr	r0, [r0]
    53f8:	movw	r1, #7
    53fc:	movw	r2, #0
    5400:	movt	r2, #0
    5404:	movw	r3, #0
    5408:	movt	r3, #0
    540c:	bl	1344 <register_sub_element>
    5410:	ldr	r0, [sp, #8]
    5414:	ldr	r0, [r0]
    5418:	movw	r1, #8
    541c:	movw	r2, #0
    5420:	movt	r2, #0
    5424:	movw	r3, #0
    5428:	movt	r3, #0
    542c:	bl	1344 <register_sub_element>
    5430:	ldr	r0, [sp, #8]
    5434:	ldr	r0, [r0]
    5438:	movw	r1, #21
    543c:	movw	r2, #0
    5440:	movt	r2, #0
    5444:	movw	r3, #0
    5448:	movt	r3, #0
    544c:	bl	1344 <register_sub_element>
    5450:	ldr	r0, [sp, #8]
    5454:	ldr	r0, [r0]
    5458:	movw	r1, #22
    545c:	movw	r2, #0
    5460:	movt	r2, #0
    5464:	movw	r3, #0
    5468:	movt	r3, #0
    546c:	bl	1344 <register_sub_element>
    5470:	ldr	r0, [sp, #8]
    5474:	ldr	r0, [r0]
    5478:	movw	r1, #11
    547c:	movw	r2, #0
    5480:	movt	r2, #0
    5484:	movw	r3, #0
    5488:	movt	r3, #0
    548c:	bl	1344 <register_sub_element>
    5490:	ldr	r0, [sp, #8]
    5494:	ldr	r0, [r0]
    5498:	movw	r1, #4
    549c:	movw	r2, #0
    54a0:	movt	r2, #0
    54a4:	movw	r3, #0
    54a8:	movt	r3, #0
    54ac:	bl	1344 <register_sub_element>
    54b0:	ldr	r0, [sp, #8]
    54b4:	ldr	r0, [r0]
    54b8:	movw	r1, #0
    54bc:	movt	r1, #0
    54c0:	str	r1, [r0, #36]	; 0x24
    54c4:	movw	r0, #0
    54c8:	str	r0, [fp, #-4]
    54cc:	ldr	r0, [fp, #-4]
    54d0:	mov	sp, fp
    54d4:	pop	{fp, pc}

000054d8 <cd_integer_init>:
    54d8:	push	{fp, lr}
    54dc:	mov	fp, sp
    54e0:	sub	sp, sp, #16
    54e4:	str	r0, [sp, #8]
    54e8:	str	r1, [sp, #4]
    54ec:	ldr	r0, [sp, #8]
    54f0:	ldr	r1, [sp, #4]
    54f4:	bl	7028 <handle_format_attribute_for_type>
    54f8:	cmp	r0, #0
    54fc:	beq	550c <cd_integer_init+0x34>
    5500:	mvn	r0, #0
    5504:	str	r0, [fp, #-4]
    5508:	b	56c0 <cd_integer_init+0x1e8>
    550c:	movw	r0, #0
    5510:	movt	r0, #0
    5514:	ldr	r1, [sp, #8]
    5518:	ldr	r1, [r1]
    551c:	str	r0, [r1, #40]	; 0x28
    5520:	ldr	r0, [sp, #8]
    5524:	ldr	r0, [r0]
    5528:	ldr	r0, [r0, #44]	; 0x2c
    552c:	movw	r1, #2
    5530:	bl	0 <coda_type_number_new>
    5534:	ldr	r1, [sp, #8]
    5538:	ldr	r1, [r1]
    553c:	str	r0, [r1, #8]
    5540:	ldr	r0, [sp, #8]
    5544:	ldr	r0, [r0]
    5548:	ldr	r0, [r0, #8]
    554c:	movw	r1, #0
    5550:	cmp	r0, r1
    5554:	bne	5564 <cd_integer_init+0x8c>
    5558:	mvn	r0, #0
    555c:	str	r0, [fp, #-4]
    5560:	b	56c0 <cd_integer_init+0x1e8>
    5564:	ldr	r0, [sp, #8]
    5568:	ldr	r1, [sp, #4]
    556c:	bl	7154 <handle_name_attribute_for_type>
    5570:	cmp	r0, #0
    5574:	beq	5584 <cd_integer_init+0xac>
    5578:	mvn	r0, #0
    557c:	str	r0, [fp, #-4]
    5580:	b	56c0 <cd_integer_init+0x1e8>
    5584:	ldr	r0, [sp, #8]
    5588:	ldr	r0, [r0]
    558c:	movw	r1, #11
    5590:	movw	r2, #0
    5594:	movt	r2, #0
    5598:	movw	r3, #0
    559c:	movt	r3, #0
    55a0:	bl	1344 <register_sub_element>
    55a4:	ldr	r0, [sp, #8]
    55a8:	ldr	r0, [r0]
    55ac:	movw	r1, #41	; 0x29
    55b0:	movw	r2, #0
    55b4:	movt	r2, #0
    55b8:	movw	r3, #0
    55bc:	movt	r3, #0
    55c0:	bl	1344 <register_sub_element>
    55c4:	ldr	r0, [sp, #8]
    55c8:	ldr	r0, [r0]
    55cc:	movw	r1, #8
    55d0:	movw	r2, #0
    55d4:	movt	r2, #0
    55d8:	movw	r3, #0
    55dc:	movt	r3, #0
    55e0:	bl	1344 <register_sub_element>
    55e4:	ldr	r0, [sp, #8]
    55e8:	ldr	r0, [r0]
    55ec:	movw	r1, #7
    55f0:	movw	r2, #0
    55f4:	movt	r2, #0
    55f8:	movw	r3, #0
    55fc:	movt	r3, #0
    5600:	bl	1344 <register_sub_element>
    5604:	ldr	r0, [sp, #8]
    5608:	ldr	r0, [r0]
    560c:	movw	r1, #21
    5610:	movw	r2, #0
    5614:	movt	r2, #0
    5618:	movw	r3, #0
    561c:	movt	r3, #0
    5620:	bl	1344 <register_sub_element>
    5624:	ldr	r0, [sp, #8]
    5628:	ldr	r0, [r0]
    562c:	movw	r1, #28
    5630:	movw	r2, #0
    5634:	movt	r2, #0
    5638:	movw	r3, #0
    563c:	movt	r3, #0
    5640:	bl	1344 <register_sub_element>
    5644:	ldr	r0, [sp, #8]
    5648:	ldr	r0, [r0]
    564c:	movw	r1, #10
    5650:	movw	r2, #0
    5654:	movt	r2, #0
    5658:	movw	r3, #0
    565c:	movt	r3, #0
    5660:	bl	1344 <register_sub_element>
    5664:	ldr	r0, [sp, #8]
    5668:	ldr	r0, [r0]
    566c:	movw	r1, #22
    5670:	movw	r2, #0
    5674:	movt	r2, #0
    5678:	movw	r3, #0
    567c:	movt	r3, #0
    5680:	bl	1344 <register_sub_element>
    5684:	ldr	r0, [sp, #8]
    5688:	ldr	r0, [r0]
    568c:	movw	r1, #4
    5690:	movw	r2, #0
    5694:	movt	r2, #0
    5698:	movw	r3, #0
    569c:	movt	r3, #0
    56a0:	bl	1344 <register_sub_element>
    56a4:	ldr	r0, [sp, #8]
    56a8:	ldr	r0, [r0]
    56ac:	movw	r1, #0
    56b0:	movt	r1, #0
    56b4:	str	r1, [r0, #36]	; 0x24
    56b8:	movw	r0, #0
    56bc:	str	r0, [fp, #-4]
    56c0:	ldr	r0, [fp, #-4]
    56c4:	mov	sp, fp
    56c8:	pop	{fp, pc}

000056cc <cd_named_type_init>:
    56cc:	push	{fp, lr}
    56d0:	mov	fp, sp
    56d4:	sub	sp, sp, #24
    56d8:	str	r0, [fp, #-8]
    56dc:	str	r1, [sp, #12]
    56e0:	ldr	r0, [sp, #12]
    56e4:	ldr	r1, [fp, #-8]
    56e8:	ldr	r1, [r1]
    56ec:	ldr	r2, [r1]
    56f0:	movw	r1, #0
    56f4:	movt	r1, #0
    56f8:	bl	20e4 <get_mandatory_attribute_value>
    56fc:	str	r0, [sp, #4]
    5700:	ldr	r0, [sp, #4]
    5704:	movw	r1, #0
    5708:	cmp	r0, r1
    570c:	bne	571c <cd_named_type_init+0x50>
    5710:	mvn	r0, #0
    5714:	str	r0, [fp, #-4]
    5718:	b	57c8 <cd_named_type_init+0xfc>
    571c:	movw	r0, #0
    5720:	movt	r0, #0
    5724:	ldr	r1, [fp, #-8]
    5728:	ldr	r1, [r1]
    572c:	str	r0, [r1, #40]	; 0x28
    5730:	ldr	r0, [fp, #-8]
    5734:	ldr	r0, [r0, #24]
    5738:	movw	r1, #0
    573c:	cmp	r0, r1
    5740:	beq	5748 <cd_named_type_init+0x7c>
    5744:	b	5768 <cd_named_type_init+0x9c>
    5748:	movw	r0, #0
    574c:	movt	r0, #0
    5750:	movw	r1, #0
    5754:	movt	r1, #0
    5758:	movw	r2, #1889	; 0x761
    575c:	movw	r3, #0
    5760:	movt	r3, #0
    5764:	bl	0 <__assert_fail>
    5768:	ldr	r0, [fp, #-8]
    576c:	ldr	r1, [sp, #4]
    5770:	add	r2, sp, #8
    5774:	bl	94b0 <get_named_type>
    5778:	cmp	r0, #0
    577c:	beq	578c <cd_named_type_init+0xc0>
    5780:	mvn	r0, #0
    5784:	str	r0, [fp, #-4]
    5788:	b	57c8 <cd_named_type_init+0xfc>
    578c:	ldr	r0, [sp, #8]
    5790:	ldr	r0, [r0]
    5794:	ldr	r1, [fp, #-8]
    5798:	ldr	r1, [r1]
    579c:	str	r0, [r1, #44]	; 0x2c
    57a0:	ldr	r0, [fp, #-8]
    57a4:	ldr	r0, [r0]
    57a8:	movw	r1, #1
    57ac:	str	r1, [r0, #48]	; 0x30
    57b0:	ldr	r0, [sp, #8]
    57b4:	ldr	r1, [fp, #-8]
    57b8:	ldr	r1, [r1]
    57bc:	str	r0, [r1, #8]
    57c0:	movw	r0, #0
    57c4:	str	r0, [fp, #-4]
    57c8:	ldr	r0, [fp, #-4]
    57cc:	mov	sp, fp
    57d0:	pop	{fp, pc}

000057d4 <cd_raw_init>:
    57d4:	push	{fp, lr}
    57d8:	mov	fp, sp
    57dc:	sub	sp, sp, #16
    57e0:	str	r0, [sp, #8]
    57e4:	str	r1, [sp, #4]
    57e8:	ldr	r0, [sp, #8]
    57ec:	ldr	r1, [sp, #4]
    57f0:	bl	7028 <handle_format_attribute_for_type>
    57f4:	cmp	r0, #0
    57f8:	beq	5808 <cd_raw_init+0x34>
    57fc:	mvn	r0, #0
    5800:	str	r0, [fp, #-4]
    5804:	b	58f8 <cd_raw_init+0x124>
    5808:	movw	r0, #0
    580c:	movt	r0, #0
    5810:	ldr	r1, [sp, #8]
    5814:	ldr	r1, [r1]
    5818:	str	r0, [r1, #40]	; 0x28
    581c:	ldr	r0, [sp, #8]
    5820:	ldr	r0, [r0]
    5824:	ldr	r0, [r0, #44]	; 0x2c
    5828:	bl	0 <coda_type_raw_new>
    582c:	ldr	r1, [sp, #8]
    5830:	ldr	r1, [r1]
    5834:	str	r0, [r1, #8]
    5838:	ldr	r0, [sp, #8]
    583c:	ldr	r0, [r0]
    5840:	ldr	r0, [r0, #8]
    5844:	movw	r1, #0
    5848:	cmp	r0, r1
    584c:	bne	585c <cd_raw_init+0x88>
    5850:	mvn	r0, #0
    5854:	str	r0, [fp, #-4]
    5858:	b	58f8 <cd_raw_init+0x124>
    585c:	ldr	r0, [sp, #8]
    5860:	ldr	r1, [sp, #4]
    5864:	bl	7154 <handle_name_attribute_for_type>
    5868:	cmp	r0, #0
    586c:	beq	587c <cd_raw_init+0xa8>
    5870:	mvn	r0, #0
    5874:	str	r0, [fp, #-4]
    5878:	b	58f8 <cd_raw_init+0x124>
    587c:	ldr	r0, [sp, #8]
    5880:	ldr	r0, [r0]
    5884:	movw	r1, #11
    5888:	movw	r2, #0
    588c:	movt	r2, #0
    5890:	movw	r3, #0
    5894:	movt	r3, #0
    5898:	bl	1344 <register_sub_element>
    589c:	ldr	r0, [sp, #8]
    58a0:	ldr	r0, [r0]
    58a4:	movw	r1, #7
    58a8:	movw	r2, #0
    58ac:	movt	r2, #0
    58b0:	movw	r3, #0
    58b4:	movt	r3, #0
    58b8:	bl	1344 <register_sub_element>
    58bc:	ldr	r0, [sp, #8]
    58c0:	ldr	r0, [r0]
    58c4:	movw	r1, #16
    58c8:	movw	r2, #0
    58cc:	movt	r2, #0
    58d0:	movw	r3, #0
    58d4:	movt	r3, #0
    58d8:	bl	1344 <register_sub_element>
    58dc:	ldr	r0, [sp, #8]
    58e0:	ldr	r0, [r0]
    58e4:	movw	r1, #0
    58e8:	movt	r1, #0
    58ec:	str	r1, [r0, #36]	; 0x24
    58f0:	movw	r0, #0
    58f4:	str	r0, [fp, #-4]
    58f8:	ldr	r0, [fp, #-4]
    58fc:	mov	sp, fp
    5900:	pop	{fp, pc}

00005904 <cd_record_init>:
    5904:	push	{fp, lr}
    5908:	mov	fp, sp
    590c:	sub	sp, sp, #16
    5910:	str	r0, [sp, #8]
    5914:	str	r1, [sp, #4]
    5918:	ldr	r0, [sp, #8]
    591c:	ldr	r1, [sp, #4]
    5920:	bl	7028 <handle_format_attribute_for_type>
    5924:	cmp	r0, #0
    5928:	beq	5938 <cd_record_init+0x34>
    592c:	mvn	r0, #0
    5930:	str	r0, [fp, #-4]
    5934:	b	5a68 <cd_record_init+0x164>
    5938:	movw	r0, #0
    593c:	movt	r0, #0
    5940:	ldr	r1, [sp, #8]
    5944:	ldr	r1, [r1]
    5948:	str	r0, [r1, #40]	; 0x28
    594c:	ldr	r0, [sp, #8]
    5950:	ldr	r0, [r0]
    5954:	ldr	r0, [r0, #44]	; 0x2c
    5958:	bl	0 <coda_type_record_new>
    595c:	ldr	r1, [sp, #8]
    5960:	ldr	r1, [r1]
    5964:	str	r0, [r1, #8]
    5968:	ldr	r0, [sp, #8]
    596c:	ldr	r0, [r0]
    5970:	ldr	r0, [r0, #8]
    5974:	movw	r1, #0
    5978:	cmp	r0, r1
    597c:	bne	598c <cd_record_init+0x88>
    5980:	mvn	r0, #0
    5984:	str	r0, [fp, #-4]
    5988:	b	5a68 <cd_record_init+0x164>
    598c:	ldr	r0, [sp, #8]
    5990:	ldr	r1, [sp, #4]
    5994:	bl	7154 <handle_name_attribute_for_type>
    5998:	cmp	r0, #0
    599c:	beq	59ac <cd_record_init+0xa8>
    59a0:	mvn	r0, #0
    59a4:	str	r0, [fp, #-4]
    59a8:	b	5a68 <cd_record_init+0x164>
    59ac:	ldr	r0, [sp, #8]
    59b0:	ldr	r0, [r0]
    59b4:	movw	r1, #11
    59b8:	movw	r2, #0
    59bc:	movt	r2, #0
    59c0:	movw	r3, #0
    59c4:	movt	r3, #0
    59c8:	bl	1344 <register_sub_element>
    59cc:	ldr	r0, [sp, #8]
    59d0:	ldr	r0, [r0]
    59d4:	movw	r1, #7
    59d8:	movw	r2, #0
    59dc:	movt	r2, #0
    59e0:	movw	r3, #0
    59e4:	movt	r3, #0
    59e8:	bl	1344 <register_sub_element>
    59ec:	ldr	r0, [sp, #8]
    59f0:	ldr	r0, [r0]
    59f4:	movw	r1, #14
    59f8:	movw	r2, #0
    59fc:	movt	r2, #0
    5a00:	movw	r3, #0
    5a04:	movt	r3, #0
    5a08:	bl	1344 <register_sub_element>
    5a0c:	ldr	r0, [sp, #8]
    5a10:	ldr	r0, [r0]
    5a14:	movw	r1, #4
    5a18:	movw	r2, #0
    5a1c:	movt	r2, #0
    5a20:	movw	r3, #0
    5a24:	movt	r3, #0
    5a28:	bl	1344 <register_sub_element>
    5a2c:	ldr	r0, [sp, #8]
    5a30:	ldr	r0, [r0]
    5a34:	movw	r1, #0
    5a38:	movt	r1, #0
    5a3c:	str	r1, [r0, #36]	; 0x24
    5a40:	ldr	r0, [sp, #8]
    5a44:	ldr	r1, [sp, #4]
    5a48:	bl	99fc <handle_xml_name>
    5a4c:	cmp	r0, #0
    5a50:	beq	5a60 <cd_record_init+0x15c>
    5a54:	mvn	r0, #0
    5a58:	str	r0, [fp, #-4]
    5a5c:	b	5a68 <cd_record_init+0x164>
    5a60:	movw	r0, #0
    5a64:	str	r0, [fp, #-4]
    5a68:	ldr	r0, [fp, #-4]
    5a6c:	mov	sp, fp
    5a70:	pop	{fp, pc}

00005a74 <cd_text_init>:
    5a74:	push	{fp, lr}
    5a78:	mov	fp, sp
    5a7c:	sub	sp, sp, #16
    5a80:	str	r0, [sp, #8]
    5a84:	str	r1, [sp, #4]
    5a88:	ldr	r0, [sp, #8]
    5a8c:	ldr	r1, [sp, #4]
    5a90:	bl	7028 <handle_format_attribute_for_type>
    5a94:	cmp	r0, #0
    5a98:	beq	5aa8 <cd_text_init+0x34>
    5a9c:	mvn	r0, #0
    5aa0:	str	r0, [fp, #-4]
    5aa4:	b	5bf8 <cd_text_init+0x184>
    5aa8:	movw	r0, #0
    5aac:	movt	r0, #0
    5ab0:	ldr	r1, [sp, #8]
    5ab4:	ldr	r1, [r1]
    5ab8:	str	r0, [r1, #40]	; 0x28
    5abc:	ldr	r0, [sp, #8]
    5ac0:	ldr	r0, [r0]
    5ac4:	ldr	r0, [r0, #44]	; 0x2c
    5ac8:	bl	0 <coda_type_text_new>
    5acc:	ldr	r1, [sp, #8]
    5ad0:	ldr	r1, [r1]
    5ad4:	str	r0, [r1, #8]
    5ad8:	ldr	r0, [sp, #8]
    5adc:	ldr	r0, [r0]
    5ae0:	ldr	r0, [r0, #8]
    5ae4:	movw	r1, #0
    5ae8:	cmp	r0, r1
    5aec:	bne	5afc <cd_text_init+0x88>
    5af0:	mvn	r0, #0
    5af4:	str	r0, [fp, #-4]
    5af8:	b	5bf8 <cd_text_init+0x184>
    5afc:	ldr	r0, [sp, #8]
    5b00:	ldr	r1, [sp, #4]
    5b04:	bl	7154 <handle_name_attribute_for_type>
    5b08:	cmp	r0, #0
    5b0c:	beq	5b1c <cd_text_init+0xa8>
    5b10:	mvn	r0, #0
    5b14:	str	r0, [fp, #-4]
    5b18:	b	5bf8 <cd_text_init+0x184>
    5b1c:	ldr	r0, [sp, #8]
    5b20:	ldr	r0, [r0]
    5b24:	movw	r1, #11
    5b28:	movw	r2, #0
    5b2c:	movt	r2, #0
    5b30:	movw	r3, #0
    5b34:	movt	r3, #0
    5b38:	bl	1344 <register_sub_element>
    5b3c:	ldr	r0, [sp, #8]
    5b40:	ldr	r0, [r0]
    5b44:	movw	r1, #8
    5b48:	movw	r2, #0
    5b4c:	movt	r2, #0
    5b50:	movw	r3, #0
    5b54:	movt	r3, #0
    5b58:	bl	1344 <register_sub_element>
    5b5c:	ldr	r0, [sp, #8]
    5b60:	ldr	r0, [r0]
    5b64:	movw	r1, #16
    5b68:	movw	r2, #0
    5b6c:	movt	r2, #0
    5b70:	movw	r3, #0
    5b74:	movt	r3, #0
    5b78:	bl	1344 <register_sub_element>
    5b7c:	ldr	r0, [sp, #8]
    5b80:	ldr	r0, [r0]
    5b84:	movw	r1, #28
    5b88:	movw	r2, #0
    5b8c:	movt	r2, #0
    5b90:	movw	r3, #0
    5b94:	movt	r3, #0
    5b98:	bl	1344 <register_sub_element>
    5b9c:	ldr	r0, [sp, #8]
    5ba0:	ldr	r0, [r0]
    5ba4:	movw	r1, #4
    5ba8:	movw	r2, #0
    5bac:	movt	r2, #0
    5bb0:	movw	r3, #0
    5bb4:	movt	r3, #0
    5bb8:	bl	1344 <register_sub_element>
    5bbc:	ldr	r0, [sp, #8]
    5bc0:	ldr	r0, [r0]
    5bc4:	movw	r1, #0
    5bc8:	movt	r1, #0
    5bcc:	str	r1, [r0, #36]	; 0x24
    5bd0:	ldr	r0, [sp, #8]
    5bd4:	ldr	r1, [sp, #4]
    5bd8:	bl	99fc <handle_xml_name>
    5bdc:	cmp	r0, #0
    5be0:	beq	5bf0 <cd_text_init+0x17c>
    5be4:	mvn	r0, #0
    5be8:	str	r0, [fp, #-4]
    5bec:	b	5bf8 <cd_text_init+0x184>
    5bf0:	movw	r0, #0
    5bf4:	str	r0, [fp, #-4]
    5bf8:	ldr	r0, [fp, #-4]
    5bfc:	mov	sp, fp
    5c00:	pop	{fp, pc}

00005c04 <cd_time_init>:
    5c04:	push	{r4, r5, fp, lr}
    5c08:	add	fp, sp, #8
    5c0c:	sub	sp, sp, #360	; 0x168
    5c10:	str	r0, [fp, #-16]
    5c14:	str	r1, [fp, #-20]	; 0xffffffec
    5c18:	movw	r0, #0
    5c1c:	str	r0, [fp, #-36]	; 0xffffffdc
    5c20:	ldr	r0, [fp, #-16]
    5c24:	ldr	r1, [fp, #-20]	; 0xffffffec
    5c28:	bl	7028 <handle_format_attribute_for_type>
    5c2c:	cmp	r0, #0
    5c30:	beq	5c40 <cd_time_init+0x3c>
    5c34:	mvn	r0, #0
    5c38:	str	r0, [fp, #-12]
    5c3c:	b	6bf8 <cd_time_init+0xff4>
    5c40:	ldr	r0, [fp, #-20]	; 0xffffffec
    5c44:	ldr	r1, [fp, #-16]
    5c48:	ldr	r1, [r1]
    5c4c:	ldr	r2, [r1]
    5c50:	movw	r1, #0
    5c54:	movt	r1, #0
    5c58:	bl	20e4 <get_mandatory_attribute_value>
    5c5c:	str	r0, [fp, #-24]	; 0xffffffe8
    5c60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5c64:	movw	r1, #0
    5c68:	cmp	r0, r1
    5c6c:	bne	5c7c <cd_time_init+0x78>
    5c70:	mvn	r0, #0
    5c74:	str	r0, [fp, #-12]
    5c78:	b	6bf8 <cd_time_init+0xff4>
    5c7c:	ldr	r0, [fp, #-16]
    5c80:	ldr	r0, [r0]
    5c84:	ldr	r0, [r0, #44]	; 0x2c
    5c88:	cmp	r0, #0
    5c8c:	bne	6164 <cd_time_init+0x560>
    5c90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5c94:	movw	r1, #0
    5c98:	movt	r1, #0
    5c9c:	bl	0 <strcmp>
    5ca0:	cmp	r0, #0
    5ca4:	bne	5d08 <cd_time_init+0x104>
    5ca8:	movw	r0, #0
    5cac:	movt	r0, #0
    5cb0:	str	r0, [fp, #-24]	; 0xffffffe8
    5cb4:	ldr	r0, [fp, #-16]
    5cb8:	ldr	r0, [r0]
    5cbc:	ldr	r0, [r0, #44]	; 0x2c
    5cc0:	bl	0 <coda_type_text_new>
    5cc4:	str	r0, [fp, #-36]	; 0xffffffdc
    5cc8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5ccc:	movw	r1, #11
    5cd0:	bl	0 <coda_type_set_read_type>
    5cd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5cd8:	str	r0, [fp, #-52]	; 0xffffffcc
    5cdc:	mov	r0, r1
    5ce0:	movw	r1, #0
    5ce4:	movt	r1, #0
    5ce8:	bl	0 <coda_type_set_description>
    5cec:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5cf0:	mov	r2, #27
    5cf4:	mov	r3, #0
    5cf8:	str	r0, [fp, #-56]	; 0xffffffc8
    5cfc:	mov	r0, r1
    5d00:	bl	0 <coda_type_set_byte_size>
    5d04:	b	6160 <cd_time_init+0x55c>
    5d08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5d0c:	movw	r1, #0
    5d10:	movt	r1, #0
    5d14:	bl	0 <strcmp>
    5d18:	cmp	r0, #0
    5d1c:	bne	5d80 <cd_time_init+0x17c>
    5d20:	movw	r0, #0
    5d24:	movt	r0, #0
    5d28:	str	r0, [fp, #-24]	; 0xffffffe8
    5d2c:	ldr	r0, [fp, #-16]
    5d30:	ldr	r0, [r0]
    5d34:	ldr	r0, [r0, #44]	; 0x2c
    5d38:	bl	0 <coda_type_text_new>
    5d3c:	str	r0, [fp, #-36]	; 0xffffffdc
    5d40:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5d44:	movw	r1, #11
    5d48:	bl	0 <coda_type_set_read_type>
    5d4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d50:	str	r0, [fp, #-60]	; 0xffffffc4
    5d54:	mov	r0, r1
    5d58:	movw	r1, #0
    5d5c:	movt	r1, #0
    5d60:	bl	0 <coda_type_set_description>
    5d64:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5d68:	mov	r2, #24
    5d6c:	mov	r3, #0
    5d70:	str	r0, [fp, #-64]	; 0xffffffc0
    5d74:	mov	r0, r1
    5d78:	bl	0 <coda_type_set_byte_size>
    5d7c:	b	615c <cd_time_init+0x558>
    5d80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5d84:	movw	r1, #0
    5d88:	movt	r1, #0
    5d8c:	bl	0 <strcmp>
    5d90:	cmp	r0, #0
    5d94:	bne	5df8 <cd_time_init+0x1f4>
    5d98:	movw	r0, #0
    5d9c:	movt	r0, #0
    5da0:	str	r0, [fp, #-24]	; 0xffffffe8
    5da4:	ldr	r0, [fp, #-16]
    5da8:	ldr	r0, [r0]
    5dac:	ldr	r0, [r0, #44]	; 0x2c
    5db0:	bl	0 <coda_type_text_new>
    5db4:	str	r0, [fp, #-36]	; 0xffffffdc
    5db8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5dbc:	movw	r1, #11
    5dc0:	bl	0 <coda_type_set_read_type>
    5dc4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5dc8:	str	r0, [fp, #-68]	; 0xffffffbc
    5dcc:	mov	r0, r1
    5dd0:	movw	r1, #0
    5dd4:	movt	r1, #0
    5dd8:	bl	0 <coda_type_set_description>
    5ddc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5de0:	mov	r2, #15
    5de4:	mov	r3, #0
    5de8:	str	r0, [fp, #-72]	; 0xffffffb8
    5dec:	mov	r0, r1
    5df0:	bl	0 <coda_type_set_byte_size>
    5df4:	b	6158 <cd_time_init+0x554>
    5df8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5dfc:	movw	r1, #0
    5e00:	movt	r1, #0
    5e04:	bl	0 <strcmp>
    5e08:	cmp	r0, #0
    5e0c:	bne	5e70 <cd_time_init+0x26c>
    5e10:	movw	r0, #0
    5e14:	movt	r0, #0
    5e18:	str	r0, [fp, #-24]	; 0xffffffe8
    5e1c:	ldr	r0, [fp, #-16]
    5e20:	ldr	r0, [r0]
    5e24:	ldr	r0, [r0, #44]	; 0x2c
    5e28:	bl	0 <coda_type_text_new>
    5e2c:	str	r0, [fp, #-36]	; 0xffffffdc
    5e30:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5e34:	movw	r1, #11
    5e38:	bl	0 <coda_type_set_read_type>
    5e3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5e40:	str	r0, [fp, #-76]	; 0xffffffb4
    5e44:	mov	r0, r1
    5e48:	movw	r1, #0
    5e4c:	movt	r1, #0
    5e50:	bl	0 <coda_type_set_description>
    5e54:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5e58:	mov	r2, #18
    5e5c:	mov	r3, #0
    5e60:	str	r0, [fp, #-80]	; 0xffffffb0
    5e64:	mov	r0, r1
    5e68:	bl	0 <coda_type_set_byte_size>
    5e6c:	b	6154 <cd_time_init+0x550>
    5e70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5e74:	movw	r1, #0
    5e78:	movt	r1, #0
    5e7c:	bl	0 <strcmp>
    5e80:	cmp	r0, #0
    5e84:	bne	5ee8 <cd_time_init+0x2e4>
    5e88:	movw	r0, #0
    5e8c:	movt	r0, #0
    5e90:	str	r0, [fp, #-24]	; 0xffffffe8
    5e94:	ldr	r0, [fp, #-16]
    5e98:	ldr	r0, [r0]
    5e9c:	ldr	r0, [r0, #44]	; 0x2c
    5ea0:	bl	0 <coda_type_text_new>
    5ea4:	str	r0, [fp, #-36]	; 0xffffffdc
    5ea8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5eac:	movw	r1, #11
    5eb0:	bl	0 <coda_type_set_read_type>
    5eb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5eb8:	str	r0, [fp, #-84]	; 0xffffffac
    5ebc:	mov	r0, r1
    5ec0:	movw	r1, #0
    5ec4:	movt	r1, #0
    5ec8:	bl	0 <coda_type_set_description>
    5ecc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5ed0:	mov	r2, #19
    5ed4:	mov	r3, #0
    5ed8:	str	r0, [fp, #-88]	; 0xffffffa8
    5edc:	mov	r0, r1
    5ee0:	bl	0 <coda_type_set_byte_size>
    5ee4:	b	6150 <cd_time_init+0x54c>
    5ee8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5eec:	movw	r1, #0
    5ef0:	movt	r1, #0
    5ef4:	bl	0 <strcmp>
    5ef8:	cmp	r0, #0
    5efc:	bne	5f60 <cd_time_init+0x35c>
    5f00:	movw	r0, #0
    5f04:	movt	r0, #0
    5f08:	str	r0, [fp, #-24]	; 0xffffffe8
    5f0c:	ldr	r0, [fp, #-16]
    5f10:	ldr	r0, [r0]
    5f14:	ldr	r0, [r0, #44]	; 0x2c
    5f18:	bl	0 <coda_type_text_new>
    5f1c:	str	r0, [fp, #-36]	; 0xffffffdc
    5f20:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5f24:	movw	r1, #11
    5f28:	bl	0 <coda_type_set_read_type>
    5f2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f30:	str	r0, [fp, #-92]	; 0xffffffa4
    5f34:	mov	r0, r1
    5f38:	movw	r1, #0
    5f3c:	movt	r1, #0
    5f40:	bl	0 <coda_type_set_description>
    5f44:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5f48:	mov	r2, #23
    5f4c:	mov	r3, #0
    5f50:	str	r0, [fp, #-96]	; 0xffffffa0
    5f54:	mov	r0, r1
    5f58:	bl	0 <coda_type_set_byte_size>
    5f5c:	b	614c <cd_time_init+0x548>
    5f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5f64:	movw	r1, #0
    5f68:	movt	r1, #0
    5f6c:	bl	0 <strcmp>
    5f70:	cmp	r0, #0
    5f74:	bne	5fd8 <cd_time_init+0x3d4>
    5f78:	movw	r0, #0
    5f7c:	movt	r0, #0
    5f80:	str	r0, [fp, #-24]	; 0xffffffe8
    5f84:	ldr	r0, [fp, #-16]
    5f88:	ldr	r0, [r0]
    5f8c:	ldr	r0, [r0, #44]	; 0x2c
    5f90:	bl	0 <coda_type_text_new>
    5f94:	str	r0, [fp, #-36]	; 0xffffffdc
    5f98:	ldr	r0, [fp, #-36]	; 0xffffffdc
    5f9c:	movw	r1, #11
    5fa0:	bl	0 <coda_type_set_read_type>
    5fa4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5fa8:	str	r0, [fp, #-100]	; 0xffffff9c
    5fac:	mov	r0, r1
    5fb0:	movw	r1, #0
    5fb4:	movt	r1, #0
    5fb8:	bl	0 <coda_type_set_description>
    5fbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    5fc0:	mov	r2, #26
    5fc4:	mov	r3, #0
    5fc8:	str	r0, [fp, #-104]	; 0xffffff98
    5fcc:	mov	r0, r1
    5fd0:	bl	0 <coda_type_set_byte_size>
    5fd4:	b	6148 <cd_time_init+0x544>
    5fd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    5fdc:	movw	r1, #0
    5fe0:	movt	r1, #0
    5fe4:	bl	0 <strcmp>
    5fe8:	cmp	r0, #0
    5fec:	bne	6050 <cd_time_init+0x44c>
    5ff0:	movw	r0, #0
    5ff4:	movt	r0, #0
    5ff8:	str	r0, [fp, #-24]	; 0xffffffe8
    5ffc:	ldr	r0, [fp, #-16]
    6000:	ldr	r0, [r0]
    6004:	ldr	r0, [r0, #44]	; 0x2c
    6008:	bl	0 <coda_type_text_new>
    600c:	str	r0, [fp, #-36]	; 0xffffffdc
    6010:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6014:	movw	r1, #11
    6018:	bl	0 <coda_type_set_read_type>
    601c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6020:	str	r0, [fp, #-108]	; 0xffffff94
    6024:	mov	r0, r1
    6028:	movw	r1, #0
    602c:	movt	r1, #0
    6030:	bl	0 <coda_type_set_description>
    6034:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6038:	mov	r2, #30
    603c:	mov	r3, #0
    6040:	str	r0, [fp, #-112]	; 0xffffff90
    6044:	mov	r0, r1
    6048:	bl	0 <coda_type_set_byte_size>
    604c:	b	6144 <cd_time_init+0x540>
    6050:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6054:	movw	r1, #0
    6058:	movt	r1, #0
    605c:	bl	0 <strcmp>
    6060:	cmp	r0, #0
    6064:	bne	60c8 <cd_time_init+0x4c4>
    6068:	movw	r0, #0
    606c:	movt	r0, #0
    6070:	str	r0, [fp, #-24]	; 0xffffffe8
    6074:	ldr	r0, [fp, #-16]
    6078:	ldr	r0, [r0]
    607c:	ldr	r0, [r0, #44]	; 0x2c
    6080:	bl	0 <coda_type_text_new>
    6084:	str	r0, [fp, #-36]	; 0xffffffdc
    6088:	ldr	r0, [fp, #-36]	; 0xffffffdc
    608c:	movw	r1, #11
    6090:	bl	0 <coda_type_set_read_type>
    6094:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6098:	str	r0, [fp, #-116]	; 0xffffff8c
    609c:	mov	r0, r1
    60a0:	movw	r1, #0
    60a4:	movt	r1, #0
    60a8:	bl	0 <coda_type_set_description>
    60ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
    60b0:	mov	r2, #17
    60b4:	mov	r3, #0
    60b8:	str	r0, [fp, #-120]	; 0xffffff88
    60bc:	mov	r0, r1
    60c0:	bl	0 <coda_type_set_byte_size>
    60c4:	b	6140 <cd_time_init+0x53c>
    60c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    60cc:	movw	r1, #0
    60d0:	movt	r1, #0
    60d4:	bl	0 <strcmp>
    60d8:	cmp	r0, #0
    60dc:	bne	613c <cd_time_init+0x538>
    60e0:	movw	r0, #0
    60e4:	movt	r0, #0
    60e8:	str	r0, [fp, #-24]	; 0xffffffe8
    60ec:	ldr	r0, [fp, #-16]
    60f0:	ldr	r0, [r0]
    60f4:	ldr	r0, [r0, #44]	; 0x2c
    60f8:	bl	0 <coda_type_text_new>
    60fc:	str	r0, [fp, #-36]	; 0xffffffdc
    6100:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6104:	movw	r1, #11
    6108:	bl	0 <coda_type_set_read_type>
    610c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6110:	str	r0, [fp, #-124]	; 0xffffff84
    6114:	mov	r0, r1
    6118:	movw	r1, #0
    611c:	movt	r1, #0
    6120:	bl	0 <coda_type_set_description>
    6124:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6128:	mov	r2, #24
    612c:	mov	r3, #0
    6130:	str	r0, [fp, #-128]	; 0xffffff80
    6134:	mov	r0, r1
    6138:	bl	0 <coda_type_set_byte_size>
    613c:	b	6140 <cd_time_init+0x53c>
    6140:	b	6144 <cd_time_init+0x540>
    6144:	b	6148 <cd_time_init+0x544>
    6148:	b	614c <cd_time_init+0x548>
    614c:	b	6150 <cd_time_init+0x54c>
    6150:	b	6154 <cd_time_init+0x550>
    6154:	b	6158 <cd_time_init+0x554>
    6158:	b	615c <cd_time_init+0x558>
    615c:	b	6160 <cd_time_init+0x55c>
    6160:	b	69e0 <cd_time_init+0xddc>
    6164:	ldr	r0, [fp, #-16]
    6168:	ldr	r0, [r0]
    616c:	ldr	r0, [r0, #44]	; 0x2c
    6170:	cmp	r0, #1
    6174:	bne	69dc <cd_time_init+0xdd8>
    6178:	ldr	r0, [fp, #-24]	; 0xffffffe8
    617c:	movw	r1, #0
    6180:	movt	r1, #0
    6184:	bl	0 <strcmp>
    6188:	cmp	r0, #0
    618c:	bne	63e8 <cd_time_init+0x7e4>
    6190:	movw	r0, #0
    6194:	movt	r0, #0
    6198:	str	r0, [fp, #-24]	; 0xffffffe8
    619c:	ldr	r0, [fp, #-16]
    61a0:	ldr	r0, [r0]
    61a4:	ldr	r0, [r0, #44]	; 0x2c
    61a8:	bl	0 <coda_type_record_new>
    61ac:	str	r0, [fp, #-40]	; 0xffffffd8
    61b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    61b4:	str	r0, [fp, #-36]	; 0xffffffdc
    61b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    61bc:	movw	r1, #0
    61c0:	movt	r1, #0
    61c4:	bl	0 <coda_type_set_description>
    61c8:	ldr	r1, [fp, #-16]
    61cc:	ldr	r1, [r1]
    61d0:	ldr	r1, [r1, #44]	; 0x2c
    61d4:	str	r0, [fp, #-132]	; 0xffffff7c
    61d8:	mov	r0, r1
    61dc:	movw	r1, #2
    61e0:	bl	0 <coda_type_number_new>
    61e4:	str	r0, [fp, #-48]	; 0xffffffd0
    61e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    61ec:	movw	r1, #0
    61f0:	movt	r1, #0
    61f4:	bl	0 <coda_type_set_description>
    61f8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    61fc:	str	r0, [fp, #-136]	; 0xffffff78
    6200:	mov	r0, r1
    6204:	movw	r1, #4
    6208:	bl	0 <coda_type_set_read_type>
    620c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6210:	mov	r2, #32
    6214:	mov	r3, #0
    6218:	str	r0, [fp, #-140]	; 0xffffff74
    621c:	mov	r0, r1
    6220:	bl	0 <coda_type_set_bit_size>
    6224:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6228:	str	r0, [fp, #-144]	; 0xffffff70
    622c:	mov	r0, r1
    6230:	movw	r1, #0
    6234:	movt	r1, #0
    6238:	bl	0 <coda_type_number_set_unit>
    623c:	movw	r1, #0
    6240:	movt	r1, #0
    6244:	str	r0, [fp, #-148]	; 0xffffff6c
    6248:	mov	r0, r1
    624c:	bl	0 <coda_type_record_field_new>
    6250:	str	r0, [fp, #-44]	; 0xffffffd4
    6254:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6258:	ldr	r1, [fp, #-48]	; 0xffffffd0
    625c:	bl	0 <coda_type_record_field_set_type>
    6260:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6264:	str	r0, [fp, #-152]	; 0xffffff68
    6268:	mov	r0, r1
    626c:	bl	0 <coda_type_release>
    6270:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6274:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6278:	bl	0 <coda_type_record_add_field>
    627c:	ldr	r1, [fp, #-16]
    6280:	ldr	r1, [r1]
    6284:	ldr	r1, [r1, #44]	; 0x2c
    6288:	str	r0, [fp, #-156]	; 0xffffff64
    628c:	mov	r0, r1
    6290:	movw	r1, #2
    6294:	bl	0 <coda_type_number_new>
    6298:	str	r0, [fp, #-48]	; 0xffffffd0
    629c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    62a0:	movw	r1, #0
    62a4:	movt	r1, #0
    62a8:	bl	0 <coda_type_set_description>
    62ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
    62b0:	str	r0, [fp, #-160]	; 0xffffff60
    62b4:	mov	r0, r1
    62b8:	movw	r1, #5
    62bc:	bl	0 <coda_type_set_read_type>
    62c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    62c4:	mov	r2, #32
    62c8:	mov	r3, #0
    62cc:	str	r0, [fp, #-164]	; 0xffffff5c
    62d0:	mov	r0, r1
    62d4:	bl	0 <coda_type_set_bit_size>
    62d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    62dc:	str	r0, [fp, #-168]	; 0xffffff58
    62e0:	mov	r0, r1
    62e4:	movw	r1, #0
    62e8:	movt	r1, #0
    62ec:	bl	0 <coda_type_number_set_unit>
    62f0:	movw	r1, #0
    62f4:	movt	r1, #0
    62f8:	str	r0, [fp, #-172]	; 0xffffff54
    62fc:	mov	r0, r1
    6300:	bl	0 <coda_type_record_field_new>
    6304:	str	r0, [fp, #-44]	; 0xffffffd4
    6308:	ldr	r0, [fp, #-44]	; 0xffffffd4
    630c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6310:	bl	0 <coda_type_record_field_set_type>
    6314:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6318:	str	r0, [fp, #-176]	; 0xffffff50
    631c:	mov	r0, r1
    6320:	bl	0 <coda_type_release>
    6324:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6328:	ldr	r1, [fp, #-44]	; 0xffffffd4
    632c:	bl	0 <coda_type_record_add_field>
    6330:	ldr	r1, [fp, #-16]
    6334:	ldr	r1, [r1]
    6338:	ldr	r1, [r1, #44]	; 0x2c
    633c:	str	r0, [fp, #-180]	; 0xffffff4c
    6340:	mov	r0, r1
    6344:	movw	r1, #2
    6348:	bl	0 <coda_type_number_new>
    634c:	str	r0, [fp, #-48]	; 0xffffffd0
    6350:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6354:	movw	r1, #0
    6358:	movt	r1, #0
    635c:	bl	0 <coda_type_set_description>
    6360:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6364:	str	r0, [sp, #184]	; 0xb8
    6368:	mov	r0, r1
    636c:	movw	r1, #5
    6370:	bl	0 <coda_type_set_read_type>
    6374:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6378:	mov	r2, #32
    637c:	mov	r3, #0
    6380:	str	r0, [sp, #180]	; 0xb4
    6384:	mov	r0, r1
    6388:	bl	0 <coda_type_set_bit_size>
    638c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6390:	str	r0, [sp, #176]	; 0xb0
    6394:	mov	r0, r1
    6398:	movw	r1, #0
    639c:	movt	r1, #0
    63a0:	bl	0 <coda_type_number_set_unit>
    63a4:	movw	r1, #0
    63a8:	movt	r1, #0
    63ac:	str	r0, [sp, #172]	; 0xac
    63b0:	mov	r0, r1
    63b4:	bl	0 <coda_type_record_field_new>
    63b8:	str	r0, [fp, #-44]	; 0xffffffd4
    63bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    63c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    63c4:	bl	0 <coda_type_record_field_set_type>
    63c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    63cc:	str	r0, [sp, #168]	; 0xa8
    63d0:	mov	r0, r1
    63d4:	bl	0 <coda_type_release>
    63d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    63dc:	ldr	r1, [fp, #-44]	; 0xffffffd4
    63e0:	bl	0 <coda_type_record_add_field>
    63e4:	b	69d8 <cd_time_init+0xdd4>
    63e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    63ec:	movw	r1, #0
    63f0:	movt	r1, #0
    63f4:	bl	0 <strcmp>
    63f8:	cmp	r0, #0
    63fc:	bne	65a4 <cd_time_init+0x9a0>
    6400:	movw	r0, #0
    6404:	movt	r0, #0
    6408:	str	r0, [fp, #-24]	; 0xffffffe8
    640c:	ldr	r0, [fp, #-16]
    6410:	ldr	r0, [r0]
    6414:	ldr	r0, [r0, #44]	; 0x2c
    6418:	bl	0 <coda_type_record_new>
    641c:	str	r0, [fp, #-40]	; 0xffffffd8
    6420:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6424:	str	r0, [fp, #-36]	; 0xffffffdc
    6428:	ldr	r0, [fp, #-36]	; 0xffffffdc
    642c:	movw	r1, #0
    6430:	movt	r1, #0
    6434:	bl	0 <coda_type_set_description>
    6438:	ldr	r1, [fp, #-16]
    643c:	ldr	r1, [r1]
    6440:	ldr	r1, [r1, #44]	; 0x2c
    6444:	str	r0, [sp, #164]	; 0xa4
    6448:	mov	r0, r1
    644c:	movw	r1, #2
    6450:	bl	0 <coda_type_number_new>
    6454:	str	r0, [fp, #-48]	; 0xffffffd0
    6458:	ldr	r0, [fp, #-48]	; 0xffffffd0
    645c:	movw	r1, #0
    6460:	movt	r1, #0
    6464:	bl	0 <coda_type_set_description>
    6468:	ldr	r1, [fp, #-48]	; 0xffffffd0
    646c:	str	r0, [sp, #160]	; 0xa0
    6470:	mov	r0, r1
    6474:	movw	r1, #4
    6478:	bl	0 <coda_type_set_read_type>
    647c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6480:	mov	r2, #32
    6484:	mov	r3, #0
    6488:	str	r0, [sp, #156]	; 0x9c
    648c:	mov	r0, r1
    6490:	bl	0 <coda_type_set_bit_size>
    6494:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6498:	str	r0, [sp, #152]	; 0x98
    649c:	mov	r0, r1
    64a0:	movw	r1, #0
    64a4:	movt	r1, #0
    64a8:	bl	0 <coda_type_number_set_unit>
    64ac:	movw	r1, #0
    64b0:	movt	r1, #0
    64b4:	str	r0, [sp, #148]	; 0x94
    64b8:	mov	r0, r1
    64bc:	bl	0 <coda_type_record_field_new>
    64c0:	str	r0, [fp, #-44]	; 0xffffffd4
    64c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    64c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    64cc:	bl	0 <coda_type_record_field_set_type>
    64d0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    64d4:	str	r0, [sp, #144]	; 0x90
    64d8:	mov	r0, r1
    64dc:	bl	0 <coda_type_release>
    64e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    64e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    64e8:	bl	0 <coda_type_record_add_field>
    64ec:	ldr	r1, [fp, #-16]
    64f0:	ldr	r1, [r1]
    64f4:	ldr	r1, [r1, #44]	; 0x2c
    64f8:	str	r0, [sp, #140]	; 0x8c
    64fc:	mov	r0, r1
    6500:	movw	r1, #2
    6504:	bl	0 <coda_type_number_new>
    6508:	str	r0, [fp, #-48]	; 0xffffffd0
    650c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6510:	movw	r1, #0
    6514:	movt	r1, #0
    6518:	bl	0 <coda_type_set_description>
    651c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6520:	str	r0, [sp, #136]	; 0x88
    6524:	mov	r0, r1
    6528:	movw	r1, #5
    652c:	bl	0 <coda_type_set_read_type>
    6530:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6534:	mov	r2, #32
    6538:	mov	r3, #0
    653c:	str	r0, [sp, #132]	; 0x84
    6540:	mov	r0, r1
    6544:	bl	0 <coda_type_set_bit_size>
    6548:	ldr	r1, [fp, #-48]	; 0xffffffd0
    654c:	str	r0, [sp, #128]	; 0x80
    6550:	mov	r0, r1
    6554:	movw	r1, #0
    6558:	movt	r1, #0
    655c:	bl	0 <coda_type_number_set_unit>
    6560:	movw	r1, #0
    6564:	movt	r1, #0
    6568:	str	r0, [sp, #124]	; 0x7c
    656c:	mov	r0, r1
    6570:	bl	0 <coda_type_record_field_new>
    6574:	str	r0, [fp, #-44]	; 0xffffffd4
    6578:	ldr	r0, [fp, #-44]	; 0xffffffd4
    657c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6580:	bl	0 <coda_type_record_field_set_type>
    6584:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6588:	str	r0, [sp, #120]	; 0x78
    658c:	mov	r0, r1
    6590:	bl	0 <coda_type_release>
    6594:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6598:	ldr	r1, [fp, #-44]	; 0xffffffd4
    659c:	bl	0 <coda_type_record_add_field>
    65a0:	b	69d4 <cd_time_init+0xdd0>
    65a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    65a8:	movw	r1, #0
    65ac:	movt	r1, #0
    65b0:	bl	0 <strcmp>
    65b4:	cmp	r0, #0
    65b8:	bne	6760 <cd_time_init+0xb5c>
    65bc:	movw	r0, #0
    65c0:	movt	r0, #0
    65c4:	str	r0, [fp, #-24]	; 0xffffffe8
    65c8:	ldr	r0, [fp, #-16]
    65cc:	ldr	r0, [r0]
    65d0:	ldr	r0, [r0, #44]	; 0x2c
    65d4:	bl	0 <coda_type_record_new>
    65d8:	str	r0, [fp, #-40]	; 0xffffffd8
    65dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    65e0:	str	r0, [fp, #-36]	; 0xffffffdc
    65e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    65e8:	movw	r1, #0
    65ec:	movt	r1, #0
    65f0:	bl	0 <coda_type_set_description>
    65f4:	ldr	r1, [fp, #-16]
    65f8:	ldr	r1, [r1]
    65fc:	ldr	r1, [r1, #44]	; 0x2c
    6600:	str	r0, [sp, #116]	; 0x74
    6604:	mov	r0, r1
    6608:	movw	r1, #2
    660c:	bl	0 <coda_type_number_new>
    6610:	str	r0, [fp, #-48]	; 0xffffffd0
    6614:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6618:	movw	r1, #0
    661c:	movt	r1, #0
    6620:	bl	0 <coda_type_set_description>
    6624:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6628:	str	r0, [sp, #112]	; 0x70
    662c:	mov	r0, r1
    6630:	movw	r1, #3
    6634:	bl	0 <coda_type_set_read_type>
    6638:	ldr	r1, [fp, #-48]	; 0xffffffd0
    663c:	mov	r2, #16
    6640:	mov	r3, #0
    6644:	str	r0, [sp, #108]	; 0x6c
    6648:	mov	r0, r1
    664c:	bl	0 <coda_type_set_bit_size>
    6650:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6654:	str	r0, [sp, #104]	; 0x68
    6658:	mov	r0, r1
    665c:	movw	r1, #0
    6660:	movt	r1, #0
    6664:	bl	0 <coda_type_number_set_unit>
    6668:	movw	r1, #0
    666c:	movt	r1, #0
    6670:	str	r0, [sp, #100]	; 0x64
    6674:	mov	r0, r1
    6678:	bl	0 <coda_type_record_field_new>
    667c:	str	r0, [fp, #-44]	; 0xffffffd4
    6680:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6684:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6688:	bl	0 <coda_type_record_field_set_type>
    668c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6690:	str	r0, [sp, #96]	; 0x60
    6694:	mov	r0, r1
    6698:	bl	0 <coda_type_release>
    669c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    66a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
    66a4:	bl	0 <coda_type_record_add_field>
    66a8:	ldr	r1, [fp, #-16]
    66ac:	ldr	r1, [r1]
    66b0:	ldr	r1, [r1, #44]	; 0x2c
    66b4:	str	r0, [sp, #92]	; 0x5c
    66b8:	mov	r0, r1
    66bc:	movw	r1, #2
    66c0:	bl	0 <coda_type_number_new>
    66c4:	str	r0, [fp, #-48]	; 0xffffffd0
    66c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
    66cc:	movw	r1, #0
    66d0:	movt	r1, #0
    66d4:	bl	0 <coda_type_set_description>
    66d8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    66dc:	str	r0, [sp, #88]	; 0x58
    66e0:	mov	r0, r1
    66e4:	movw	r1, #5
    66e8:	bl	0 <coda_type_set_read_type>
    66ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
    66f0:	mov	r2, #32
    66f4:	mov	r3, #0
    66f8:	str	r0, [sp, #84]	; 0x54
    66fc:	mov	r0, r1
    6700:	bl	0 <coda_type_set_bit_size>
    6704:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6708:	str	r0, [sp, #80]	; 0x50
    670c:	mov	r0, r1
    6710:	movw	r1, #0
    6714:	movt	r1, #0
    6718:	bl	0 <coda_type_number_set_unit>
    671c:	movw	r1, #0
    6720:	movt	r1, #0
    6724:	str	r0, [sp, #76]	; 0x4c
    6728:	mov	r0, r1
    672c:	bl	0 <coda_type_record_field_new>
    6730:	str	r0, [fp, #-44]	; 0xffffffd4
    6734:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6738:	ldr	r1, [fp, #-48]	; 0xffffffd0
    673c:	bl	0 <coda_type_record_field_set_type>
    6740:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6744:	str	r0, [sp, #72]	; 0x48
    6748:	mov	r0, r1
    674c:	bl	0 <coda_type_release>
    6750:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6754:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6758:	bl	0 <coda_type_record_add_field>
    675c:	b	69d0 <cd_time_init+0xdcc>
    6760:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6764:	movw	r1, #0
    6768:	movt	r1, #0
    676c:	bl	0 <strcmp>
    6770:	cmp	r0, #0
    6774:	bne	69cc <cd_time_init+0xdc8>
    6778:	movw	r0, #0
    677c:	movt	r0, #0
    6780:	str	r0, [fp, #-24]	; 0xffffffe8
    6784:	ldr	r0, [fp, #-16]
    6788:	ldr	r0, [r0]
    678c:	ldr	r0, [r0, #44]	; 0x2c
    6790:	bl	0 <coda_type_record_new>
    6794:	str	r0, [fp, #-40]	; 0xffffffd8
    6798:	ldr	r0, [fp, #-40]	; 0xffffffd8
    679c:	str	r0, [fp, #-36]	; 0xffffffdc
    67a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    67a4:	movw	r1, #0
    67a8:	movt	r1, #0
    67ac:	bl	0 <coda_type_set_description>
    67b0:	ldr	r1, [fp, #-16]
    67b4:	ldr	r1, [r1]
    67b8:	ldr	r1, [r1, #44]	; 0x2c
    67bc:	str	r0, [sp, #68]	; 0x44
    67c0:	mov	r0, r1
    67c4:	movw	r1, #2
    67c8:	bl	0 <coda_type_number_new>
    67cc:	str	r0, [fp, #-48]	; 0xffffffd0
    67d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    67d4:	movw	r1, #0
    67d8:	movt	r1, #0
    67dc:	bl	0 <coda_type_set_description>
    67e0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    67e4:	str	r0, [sp, #64]	; 0x40
    67e8:	mov	r0, r1
    67ec:	movw	r1, #3
    67f0:	bl	0 <coda_type_set_read_type>
    67f4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    67f8:	mov	r2, #16
    67fc:	mov	r3, #0
    6800:	str	r0, [sp, #60]	; 0x3c
    6804:	mov	r0, r1
    6808:	bl	0 <coda_type_set_bit_size>
    680c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6810:	str	r0, [sp, #56]	; 0x38
    6814:	mov	r0, r1
    6818:	movw	r1, #0
    681c:	movt	r1, #0
    6820:	bl	0 <coda_type_number_set_unit>
    6824:	movw	r1, #0
    6828:	movt	r1, #0
    682c:	str	r0, [sp, #52]	; 0x34
    6830:	mov	r0, r1
    6834:	bl	0 <coda_type_record_field_new>
    6838:	str	r0, [fp, #-44]	; 0xffffffd4
    683c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    6840:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6844:	bl	0 <coda_type_record_field_set_type>
    6848:	ldr	r1, [fp, #-48]	; 0xffffffd0
    684c:	str	r0, [sp, #48]	; 0x30
    6850:	mov	r0, r1
    6854:	bl	0 <coda_type_release>
    6858:	ldr	r0, [fp, #-40]	; 0xffffffd8
    685c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6860:	bl	0 <coda_type_record_add_field>
    6864:	ldr	r1, [fp, #-16]
    6868:	ldr	r1, [r1]
    686c:	ldr	r1, [r1, #44]	; 0x2c
    6870:	str	r0, [sp, #44]	; 0x2c
    6874:	mov	r0, r1
    6878:	movw	r1, #2
    687c:	bl	0 <coda_type_number_new>
    6880:	str	r0, [fp, #-48]	; 0xffffffd0
    6884:	ldr	r0, [fp, #-48]	; 0xffffffd0
    6888:	movw	r1, #0
    688c:	movt	r1, #0
    6890:	bl	0 <coda_type_set_description>
    6894:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6898:	str	r0, [sp, #40]	; 0x28
    689c:	mov	r0, r1
    68a0:	movw	r1, #5
    68a4:	bl	0 <coda_type_set_read_type>
    68a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    68ac:	mov	r2, #32
    68b0:	mov	r3, #0
    68b4:	str	r0, [sp, #36]	; 0x24
    68b8:	mov	r0, r1
    68bc:	bl	0 <coda_type_set_bit_size>
    68c0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    68c4:	str	r0, [sp, #32]
    68c8:	mov	r0, r1
    68cc:	movw	r1, #0
    68d0:	movt	r1, #0
    68d4:	bl	0 <coda_type_number_set_unit>
    68d8:	movw	r1, #0
    68dc:	movt	r1, #0
    68e0:	str	r0, [sp, #28]
    68e4:	mov	r0, r1
    68e8:	bl	0 <coda_type_record_field_new>
    68ec:	str	r0, [fp, #-44]	; 0xffffffd4
    68f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    68f4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    68f8:	bl	0 <coda_type_record_field_set_type>
    68fc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6900:	str	r0, [sp, #24]
    6904:	mov	r0, r1
    6908:	bl	0 <coda_type_release>
    690c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    6910:	ldr	r1, [fp, #-44]	; 0xffffffd4
    6914:	bl	0 <coda_type_record_add_field>
    6918:	ldr	r1, [fp, #-16]
    691c:	ldr	r1, [r1]
    6920:	ldr	r1, [r1, #44]	; 0x2c
    6924:	str	r0, [sp, #20]
    6928:	mov	r0, r1
    692c:	movw	r1, #2
    6930:	bl	0 <coda_type_number_new>
    6934:	str	r0, [fp, #-48]	; 0xffffffd0
    6938:	ldr	r0, [fp, #-48]	; 0xffffffd0
    693c:	movw	r1, #0
    6940:	movt	r1, #0
    6944:	bl	0 <coda_type_set_description>
    6948:	ldr	r1, [fp, #-48]	; 0xffffffd0
    694c:	str	r0, [sp, #16]
    6950:	mov	r0, r1
    6954:	movw	r1, #3
    6958:	bl	0 <coda_type_set_read_type>
    695c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6960:	mov	r2, #16
    6964:	mov	r3, #0
    6968:	str	r0, [sp, #12]
    696c:	mov	r0, r1
    6970:	bl	0 <coda_type_set_bit_size>
    6974:	ldr	r1, [fp, #-48]	; 0xffffffd0
    6978:	str	r0, [sp, #8]
    697c:	mov	r0, r1
    6980:	movw	r1, #0
    6984:	movt	r1, #0
    6988:	bl	0 <coda_type_number_set_unit>
    698c:	movw	r1, #0
    6990:	movt	r1, #0
    6994:	str	r0, [sp, #4]
    6998:	mov	r0, r1
    699c:	bl	0 <coda_type_record_field_new>
    69a0:	str	r0, [fp, #-44]	; 0xffffffd4
    69a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    69a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69ac:	bl	0 <coda_type_record_field_set_type>
    69b0:	ldr	r1, [fp, #-48]	; 0xffffffd0
    69b4:	str	r0, [sp]
    69b8:	mov	r0, r1
    69bc:	bl	0 <coda_type_release>
    69c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    69c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    69c8:	bl	0 <coda_type_record_add_field>
    69cc:	b	69d0 <cd_time_init+0xdcc>
    69d0:	b	69d4 <cd_time_init+0xdd0>
    69d4:	b	69d8 <cd_time_init+0xdd4>
    69d8:	b	69dc <cd_time_init+0xdd8>
    69dc:	b	69e0 <cd_time_init+0xddc>
    69e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    69e4:	sub	r1, fp, #32
    69e8:	bl	0 <coda_expression_from_string>
    69ec:	cmp	r0, #0
    69f0:	beq	6a08 <cd_time_init+0xe04>
    69f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    69f8:	bl	0 <coda_type_release>
    69fc:	mvn	r0, #0
    6a00:	str	r0, [fp, #-12]
    6a04:	b	6bf8 <cd_time_init+0xff4>
    6a08:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a0c:	sub	r1, fp, #28
    6a10:	bl	0 <coda_expression_get_type>
    6a14:	cmp	r0, #0
    6a18:	beq	6a38 <cd_time_init+0xe34>
    6a1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6a20:	bl	0 <coda_type_release>
    6a24:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a28:	bl	0 <coda_expression_delete>
    6a2c:	mvn	r0, #0
    6a30:	str	r0, [fp, #-12]
    6a34:	b	6bf8 <cd_time_init+0xff4>
    6a38:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6a3c:	cmp	r0, #2
    6a40:	beq	6a70 <cd_time_init+0xe6c>
    6a44:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6a48:	bl	0 <coda_type_release>
    6a4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6a50:	bl	0 <coda_expression_delete>
    6a54:	ldr	r0, [pc, #424]	; 6c04 <cd_time_init+0x1000>
    6a58:	movw	r1, #0
    6a5c:	movt	r1, #0
    6a60:	bl	0 <coda_set_error>
    6a64:	mvn	r0, #0
    6a68:	str	r0, [fp, #-12]
    6a6c:	b	6bf8 <cd_time_init+0xff4>
    6a70:	movw	r0, #0
    6a74:	movt	r0, #0
    6a78:	ldr	r1, [fp, #-16]
    6a7c:	ldr	r1, [r1]
    6a80:	str	r0, [r1, #40]	; 0x28
    6a84:	ldr	r0, [fp, #-16]
    6a88:	ldr	r0, [r0]
    6a8c:	ldr	r0, [r0, #44]	; 0x2c
    6a90:	ldr	r1, [fp, #-32]	; 0xffffffe0
    6a94:	bl	0 <coda_type_time_new>
    6a98:	ldr	r1, [fp, #-16]
    6a9c:	ldr	r1, [r1]
    6aa0:	str	r0, [r1, #8]
    6aa4:	ldr	r0, [fp, #-16]
    6aa8:	ldr	r0, [r0]
    6aac:	ldr	r0, [r0, #8]
    6ab0:	movw	r1, #0
    6ab4:	cmp	r0, r1
    6ab8:	bne	6ad8 <cd_time_init+0xed4>
    6abc:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6ac0:	bl	0 <coda_type_release>
    6ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    6ac8:	bl	0 <coda_expression_delete>
    6acc:	mvn	r0, #0
    6ad0:	str	r0, [fp, #-12]
    6ad4:	b	6bf8 <cd_time_init+0xff4>
    6ad8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6adc:	movw	r1, #0
    6ae0:	cmp	r0, r1
    6ae4:	beq	6b20 <cd_time_init+0xf1c>
    6ae8:	ldr	r0, [fp, #-16]
    6aec:	ldr	r0, [r0]
    6af0:	ldr	r0, [r0, #8]
    6af4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    6af8:	bl	0 <coda_type_time_set_base_type>
    6afc:	cmp	r0, #0
    6b00:	beq	6b18 <cd_time_init+0xf14>
    6b04:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b08:	bl	0 <coda_type_release>
    6b0c:	mvn	r0, #0
    6b10:	str	r0, [fp, #-12]
    6b14:	b	6bf8 <cd_time_init+0xff4>
    6b18:	ldr	r0, [fp, #-36]	; 0xffffffdc
    6b1c:	bl	0 <coda_type_release>
    6b20:	ldr	r0, [fp, #-16]
    6b24:	ldr	r1, [fp, #-20]	; 0xffffffec
    6b28:	bl	7154 <handle_name_attribute_for_type>
    6b2c:	cmp	r0, #0
    6b30:	beq	6b40 <cd_time_init+0xf3c>
    6b34:	mvn	r0, #0
    6b38:	str	r0, [fp, #-12]
    6b3c:	b	6bf8 <cd_time_init+0xff4>
    6b40:	ldr	r0, [fp, #-16]
    6b44:	ldr	r0, [r0]
    6b48:	movw	r1, #0
    6b4c:	movt	r1, #0
    6b50:	bl	1684 <register_type_elements>
    6b54:	ldr	r0, [fp, #-16]
    6b58:	ldr	r0, [r0]
    6b5c:	movw	r1, #11
    6b60:	movw	r2, #0
    6b64:	movt	r2, #0
    6b68:	movw	r3, #0
    6b6c:	movt	r3, #0
    6b70:	bl	1344 <register_sub_element>
    6b74:	ldr	r0, [fp, #-16]
    6b78:	ldr	r0, [r0]
    6b7c:	movw	r1, #22
    6b80:	movw	r2, #0
    6b84:	movt	r2, #0
    6b88:	movw	r3, #0
    6b8c:	movt	r3, #0
    6b90:	bl	1344 <register_sub_element>
    6b94:	ldr	r0, [fp, #-16]
    6b98:	ldr	r0, [r0]
    6b9c:	ldr	r0, [r0, #44]	; 0x2c
    6ba0:	cmp	r0, #0
    6ba4:	beq	6bdc <cd_time_init+0xfd8>
    6ba8:	ldr	r0, [fp, #-16]
    6bac:	ldr	r0, [r0]
    6bb0:	ldr	r0, [r0, #44]	; 0x2c
    6bb4:	cmp	r0, #1
    6bb8:	beq	6bdc <cd_time_init+0xfd8>
    6bbc:	ldr	r0, [fp, #-16]
    6bc0:	ldr	r0, [r0]
    6bc4:	movw	r1, #4
    6bc8:	movw	r2, #0
    6bcc:	movt	r2, #0
    6bd0:	movw	r3, #0
    6bd4:	movt	r3, #0
    6bd8:	bl	1344 <register_sub_element>
    6bdc:	ldr	r0, [fp, #-16]
    6be0:	ldr	r0, [r0]
    6be4:	movw	r1, #0
    6be8:	movt	r1, #0
    6bec:	str	r1, [r0, #36]	; 0x24
    6bf0:	movw	r0, #0
    6bf4:	str	r0, [fp, #-12]
    6bf8:	ldr	r0, [fp, #-12]
    6bfc:	sub	sp, fp, #8
    6c00:	pop	{r4, r5, fp, pc}
    6c04:	.word	0xfffffe70

00006c08 <cd_type_init>:
    6c08:	push	{fp, lr}
    6c0c:	mov	fp, sp
    6c10:	sub	sp, sp, #16
    6c14:	str	r0, [sp, #8]
    6c18:	str	r1, [sp, #4]
    6c1c:	ldr	r0, [sp, #4]
    6c20:	movw	r1, #0
    6c24:	movt	r1, #0
    6c28:	bl	24f4 <get_attribute_value>
    6c2c:	movw	r1, #0
    6c30:	cmp	r0, r1
    6c34:	beq	6c54 <cd_type_init+0x4c>
    6c38:	ldr	r0, [pc, #272]	; 6d50 <cd_type_init+0x148>
    6c3c:	movw	r1, #0
    6c40:	movt	r1, #0
    6c44:	bl	0 <coda_set_error>
    6c48:	mvn	r0, #0
    6c4c:	str	r0, [fp, #-4]
    6c50:	b	6d44 <cd_type_init+0x13c>
    6c54:	ldr	r0, [sp, #8]
    6c58:	ldr	r1, [sp, #4]
    6c5c:	bl	7028 <handle_format_attribute_for_type>
    6c60:	cmp	r0, #0
    6c64:	beq	6c74 <cd_type_init+0x6c>
    6c68:	mvn	r0, #0
    6c6c:	str	r0, [fp, #-4]
    6c70:	b	6d44 <cd_type_init+0x13c>
    6c74:	movw	r0, #0
    6c78:	movt	r0, #0
    6c7c:	ldr	r1, [sp, #8]
    6c80:	ldr	r1, [r1]
    6c84:	str	r0, [r1, #40]	; 0x28
    6c88:	ldr	r0, [sp, #8]
    6c8c:	ldr	r0, [r0]
    6c90:	ldr	r0, [r0, #44]	; 0x2c
    6c94:	bl	0 <coda_type_text_new>
    6c98:	ldr	r1, [sp, #8]
    6c9c:	ldr	r1, [r1]
    6ca0:	str	r0, [r1, #8]
    6ca4:	ldr	r0, [sp, #8]
    6ca8:	ldr	r0, [r0]
    6cac:	ldr	r0, [r0, #8]
    6cb0:	movw	r1, #0
    6cb4:	cmp	r0, r1
    6cb8:	bne	6cc8 <cd_type_init+0xc0>
    6cbc:	mvn	r0, #0
    6cc0:	str	r0, [fp, #-4]
    6cc4:	b	6d44 <cd_type_init+0x13c>
    6cc8:	ldr	r0, [sp, #8]
    6ccc:	ldr	r0, [r0]
    6cd0:	movw	r1, #0
    6cd4:	movt	r1, #0
    6cd8:	bl	1684 <register_type_elements>
    6cdc:	ldr	r0, [sp, #8]
    6ce0:	ldr	r0, [r0]
    6ce4:	movw	r1, #11
    6ce8:	movw	r2, #0
    6cec:	movt	r2, #0
    6cf0:	movw	r3, #0
    6cf4:	movt	r3, #0
    6cf8:	bl	1344 <register_sub_element>
    6cfc:	ldr	r0, [sp, #8]
    6d00:	ldr	r0, [r0]
    6d04:	movw	r1, #4
    6d08:	movw	r2, #0
    6d0c:	movt	r2, #0
    6d10:	movw	r3, #0
    6d14:	movt	r3, #0
    6d18:	bl	1344 <register_sub_element>
    6d1c:	ldr	r0, [sp, #8]
    6d20:	ldr	r1, [sp, #4]
    6d24:	bl	99fc <handle_xml_name>
    6d28:	cmp	r0, #0
    6d2c:	beq	6d3c <cd_type_init+0x134>
    6d30:	mvn	r0, #0
    6d34:	str	r0, [fp, #-4]
    6d38:	b	6d44 <cd_type_init+0x13c>
    6d3c:	movw	r0, #0
    6d40:	str	r0, [fp, #-4]
    6d44:	ldr	r0, [fp, #-4]
    6d48:	mov	sp, fp
    6d4c:	pop	{fp, pc}
    6d50:	.word	0xfffffe70

00006d54 <cd_union_init>:
    6d54:	push	{fp, lr}
    6d58:	mov	fp, sp
    6d5c:	sub	sp, sp, #16
    6d60:	str	r0, [sp, #8]
    6d64:	str	r1, [sp, #4]
    6d68:	ldr	r0, [sp, #8]
    6d6c:	ldr	r1, [sp, #4]
    6d70:	bl	7028 <handle_format_attribute_for_type>
    6d74:	cmp	r0, #0
    6d78:	beq	6d88 <cd_union_init+0x34>
    6d7c:	mvn	r0, #0
    6d80:	str	r0, [fp, #-4]
    6d84:	b	6ed8 <cd_union_init+0x184>
    6d88:	movw	r0, #0
    6d8c:	movt	r0, #0
    6d90:	ldr	r1, [sp, #8]
    6d94:	ldr	r1, [r1]
    6d98:	str	r0, [r1, #40]	; 0x28
    6d9c:	ldr	r0, [sp, #8]
    6da0:	ldr	r0, [r0]
    6da4:	ldr	r0, [r0, #44]	; 0x2c
    6da8:	bl	0 <coda_type_union_new>
    6dac:	ldr	r1, [sp, #8]
    6db0:	ldr	r1, [r1]
    6db4:	str	r0, [r1, #8]
    6db8:	ldr	r0, [sp, #8]
    6dbc:	ldr	r0, [r0]
    6dc0:	ldr	r0, [r0, #8]
    6dc4:	movw	r1, #0
    6dc8:	cmp	r0, r1
    6dcc:	bne	6ddc <cd_union_init+0x88>
    6dd0:	mvn	r0, #0
    6dd4:	str	r0, [fp, #-4]
    6dd8:	b	6ed8 <cd_union_init+0x184>
    6ddc:	ldr	r0, [sp, #8]
    6de0:	ldr	r1, [sp, #4]
    6de4:	bl	7154 <handle_name_attribute_for_type>
    6de8:	cmp	r0, #0
    6dec:	beq	6dfc <cd_union_init+0xa8>
    6df0:	mvn	r0, #0
    6df4:	str	r0, [fp, #-4]
    6df8:	b	6ed8 <cd_union_init+0x184>
    6dfc:	ldr	r0, [sp, #8]
    6e00:	ldr	r0, [r0]
    6e04:	movw	r1, #11
    6e08:	movw	r2, #0
    6e0c:	movt	r2, #0
    6e10:	movw	r3, #0
    6e14:	movt	r3, #0
    6e18:	bl	1344 <register_sub_element>
    6e1c:	ldr	r0, [sp, #8]
    6e20:	ldr	r0, [r0]
    6e24:	movw	r1, #7
    6e28:	movw	r2, #0
    6e2c:	movt	r2, #0
    6e30:	movw	r3, #0
    6e34:	movt	r3, #0
    6e38:	bl	1344 <register_sub_element>
    6e3c:	ldr	r0, [sp, #8]
    6e40:	ldr	r0, [r0]
    6e44:	movw	r1, #15
    6e48:	movw	r2, #0
    6e4c:	movt	r2, #0
    6e50:	movw	r3, #0
    6e54:	movt	r3, #0
    6e58:	bl	1344 <register_sub_element>
    6e5c:	ldr	r0, [sp, #8]
    6e60:	ldr	r0, [r0]
    6e64:	movw	r1, #14
    6e68:	movw	r2, #0
    6e6c:	movt	r2, #0
    6e70:	movw	r3, #0
    6e74:	movt	r3, #0
    6e78:	bl	1344 <register_sub_element>
    6e7c:	ldr	r0, [sp, #8]
    6e80:	ldr	r0, [r0]
    6e84:	movw	r1, #4
    6e88:	movw	r2, #0
    6e8c:	movt	r2, #0
    6e90:	movw	r3, #0
    6e94:	movt	r3, #0
    6e98:	bl	1344 <register_sub_element>
    6e9c:	ldr	r0, [sp, #8]
    6ea0:	ldr	r0, [r0]
    6ea4:	movw	r1, #0
    6ea8:	movt	r1, #0
    6eac:	str	r1, [r0, #36]	; 0x24
    6eb0:	ldr	r0, [sp, #8]
    6eb4:	ldr	r1, [sp, #4]
    6eb8:	bl	99fc <handle_xml_name>
    6ebc:	cmp	r0, #0
    6ec0:	beq	6ed0 <cd_union_init+0x17c>
    6ec4:	mvn	r0, #0
    6ec8:	str	r0, [fp, #-4]
    6ecc:	b	6ed8 <cd_union_init+0x184>
    6ed0:	movw	r0, #0
    6ed4:	str	r0, [fp, #-4]
    6ed8:	ldr	r0, [fp, #-4]
    6edc:	mov	sp, fp
    6ee0:	pop	{fp, pc}

00006ee4 <cd_vsf_integer_init>:
    6ee4:	push	{fp, lr}
    6ee8:	mov	fp, sp
    6eec:	sub	sp, sp, #16
    6ef0:	str	r0, [sp, #8]
    6ef4:	str	r1, [sp, #4]
    6ef8:	ldr	r0, [sp, #8]
    6efc:	ldr	r1, [sp, #4]
    6f00:	bl	7028 <handle_format_attribute_for_type>
    6f04:	cmp	r0, #0
    6f08:	beq	6f18 <cd_vsf_integer_init+0x34>
    6f0c:	mvn	r0, #0
    6f10:	str	r0, [fp, #-4]
    6f14:	b	701c <cd_vsf_integer_init+0x138>
    6f18:	movw	r0, #0
    6f1c:	movt	r0, #0
    6f20:	ldr	r1, [sp, #8]
    6f24:	ldr	r1, [r1]
    6f28:	str	r0, [r1, #40]	; 0x28
    6f2c:	ldr	r0, [sp, #8]
    6f30:	ldr	r0, [r0]
    6f34:	ldr	r0, [r0, #44]	; 0x2c
    6f38:	bl	0 <coda_type_vsf_integer_new>
    6f3c:	ldr	r1, [sp, #8]
    6f40:	ldr	r1, [r1]
    6f44:	str	r0, [r1, #8]
    6f48:	ldr	r0, [sp, #8]
    6f4c:	ldr	r0, [r0]
    6f50:	ldr	r0, [r0, #8]
    6f54:	movw	r1, #0
    6f58:	cmp	r0, r1
    6f5c:	bne	6f6c <cd_vsf_integer_init+0x88>
    6f60:	mvn	r0, #0
    6f64:	str	r0, [fp, #-4]
    6f68:	b	701c <cd_vsf_integer_init+0x138>
    6f6c:	ldr	r0, [sp, #8]
    6f70:	ldr	r1, [sp, #4]
    6f74:	bl	7154 <handle_name_attribute_for_type>
    6f78:	cmp	r0, #0
    6f7c:	beq	6f8c <cd_vsf_integer_init+0xa8>
    6f80:	mvn	r0, #0
    6f84:	str	r0, [fp, #-4]
    6f88:	b	701c <cd_vsf_integer_init+0x138>
    6f8c:	ldr	r0, [sp, #8]
    6f90:	ldr	r0, [r0]
    6f94:	movw	r1, #11
    6f98:	movw	r2, #0
    6f9c:	movt	r2, #0
    6fa0:	movw	r3, #0
    6fa4:	movt	r3, #0
    6fa8:	bl	1344 <register_sub_element>
    6fac:	ldr	r0, [sp, #8]
    6fb0:	ldr	r0, [r0]
    6fb4:	movw	r1, #0
    6fb8:	movt	r1, #0
    6fbc:	bl	1684 <register_type_elements>
    6fc0:	ldr	r0, [sp, #8]
    6fc4:	ldr	r0, [r0]
    6fc8:	movw	r1, #36	; 0x24
    6fcc:	movw	r2, #0
    6fd0:	movt	r2, #0
    6fd4:	movw	r3, #0
    6fd8:	movt	r3, #0
    6fdc:	bl	1344 <register_sub_element>
    6fe0:	ldr	r0, [sp, #8]
    6fe4:	ldr	r0, [r0]
    6fe8:	movw	r1, #41	; 0x29
    6fec:	movw	r2, #0
    6ff0:	movt	r2, #0
    6ff4:	movw	r3, #0
    6ff8:	movt	r3, #0
    6ffc:	bl	1344 <register_sub_element>
    7000:	ldr	r0, [sp, #8]
    7004:	ldr	r0, [r0]
    7008:	movw	r1, #0
    700c:	movt	r1, #0
    7010:	str	r1, [r0, #36]	; 0x24
    7014:	movw	r0, #0
    7018:	str	r0, [fp, #-4]
    701c:	ldr	r0, [fp, #-4]
    7020:	mov	sp, fp
    7024:	pop	{fp, pc}

00007028 <handle_format_attribute_for_type>:
    7028:	push	{fp, lr}
    702c:	mov	fp, sp
    7030:	sub	sp, sp, #16
    7034:	str	r0, [sp, #8]
    7038:	str	r1, [sp, #4]
    703c:	ldr	r0, [sp, #8]
    7040:	ldr	r0, [r0]
    7044:	ldr	r0, [r0, #396]	; 0x18c
    7048:	ldr	r0, [r0, #48]	; 0x30
    704c:	cmp	r0, #0
    7050:	bne	70bc <handle_format_attribute_for_type+0x94>
    7054:	ldr	r0, [sp, #4]
    7058:	ldr	r1, [sp, #8]
    705c:	ldr	r1, [r1]
    7060:	ldr	r2, [r1]
    7064:	movw	r1, #0
    7068:	movt	r1, #0
    706c:	bl	20e4 <get_mandatory_attribute_value>
    7070:	str	r0, [sp]
    7074:	ldr	r0, [sp]
    7078:	movw	r1, #0
    707c:	cmp	r0, r1
    7080:	bne	7090 <handle_format_attribute_for_type+0x68>
    7084:	mvn	r0, #0
    7088:	str	r0, [fp, #-4]
    708c:	b	7148 <handle_format_attribute_for_type+0x120>
    7090:	ldr	r0, [sp]
    7094:	ldr	r1, [sp, #8]
    7098:	ldr	r1, [r1]
    709c:	add	r1, r1, #44	; 0x2c
    70a0:	bl	0 <coda_format_from_string>
    70a4:	cmp	r0, #0
    70a8:	beq	70b8 <handle_format_attribute_for_type+0x90>
    70ac:	mvn	r0, #0
    70b0:	str	r0, [fp, #-4]
    70b4:	b	7148 <handle_format_attribute_for_type+0x120>
    70b8:	b	7130 <handle_format_attribute_for_type+0x108>
    70bc:	ldr	r0, [sp, #4]
    70c0:	movw	r1, #0
    70c4:	movt	r1, #0
    70c8:	bl	24f4 <get_attribute_value>
    70cc:	str	r0, [sp]
    70d0:	ldr	r0, [sp]
    70d4:	movw	r1, #0
    70d8:	cmp	r0, r1
    70dc:	bne	7100 <handle_format_attribute_for_type+0xd8>
    70e0:	ldr	r0, [sp, #8]
    70e4:	ldr	r0, [r0]
    70e8:	ldr	r0, [r0, #396]	; 0x18c
    70ec:	ldr	r0, [r0, #44]	; 0x2c
    70f0:	ldr	r1, [sp, #8]
    70f4:	ldr	r1, [r1]
    70f8:	str	r0, [r1, #44]	; 0x2c
    70fc:	b	712c <handle_format_attribute_for_type+0x104>
    7100:	ldr	r0, [sp]
    7104:	ldr	r1, [sp, #8]
    7108:	ldr	r1, [r1]
    710c:	add	r1, r1, #44	; 0x2c
    7110:	bl	0 <coda_format_from_string>
    7114:	cmp	r0, #0
    7118:	beq	7128 <handle_format_attribute_for_type+0x100>
    711c:	mvn	r0, #0
    7120:	str	r0, [fp, #-4]
    7124:	b	7148 <handle_format_attribute_for_type+0x120>
    7128:	b	712c <handle_format_attribute_for_type+0x104>
    712c:	b	7130 <handle_format_attribute_for_type+0x108>
    7130:	ldr	r0, [sp, #8]
    7134:	ldr	r0, [r0]
    7138:	movw	r1, #1
    713c:	str	r1, [r0, #48]	; 0x30
    7140:	movw	r0, #0
    7144:	str	r0, [fp, #-4]
    7148:	ldr	r0, [fp, #-4]
    714c:	mov	sp, fp
    7150:	pop	{fp, pc}

00007154 <handle_name_attribute_for_type>:
    7154:	push	{fp, lr}
    7158:	mov	fp, sp
    715c:	sub	sp, sp, #16
    7160:	str	r0, [sp, #8]
    7164:	str	r1, [sp, #4]
    7168:	ldr	r0, [sp, #8]
    716c:	ldr	r0, [r0]
    7170:	ldr	r0, [r0, #396]	; 0x18c
    7174:	ldr	r0, [r0, #396]	; 0x18c
    7178:	movw	r1, #0
    717c:	cmp	r0, r1
    7180:	bne	7228 <handle_name_attribute_for_type+0xd4>
    7184:	ldr	r0, [sp, #4]
    7188:	ldr	r1, [sp, #8]
    718c:	ldr	r1, [r1]
    7190:	ldr	r2, [r1]
    7194:	movw	r1, #0
    7198:	movt	r1, #0
    719c:	bl	20e4 <get_mandatory_attribute_value>
    71a0:	str	r0, [sp]
    71a4:	ldr	r0, [sp]
    71a8:	movw	r1, #0
    71ac:	cmp	r0, r1
    71b0:	bne	71c0 <handle_name_attribute_for_type+0x6c>
    71b4:	mvn	r0, #0
    71b8:	str	r0, [fp, #-4]
    71bc:	b	7274 <handle_name_attribute_for_type+0x120>
    71c0:	ldr	r0, [sp]
    71c4:	ldr	r1, [sp, #8]
    71c8:	ldr	r1, [r1, #20]
    71cc:	bl	0 <strcmp>
    71d0:	cmp	r0, #0
    71d4:	beq	71fc <handle_name_attribute_for_type+0xa8>
    71d8:	ldr	r0, [pc, #160]	; 7280 <handle_name_attribute_for_type+0x12c>
    71dc:	ldr	r1, [sp, #8]
    71e0:	ldr	r2, [r1, #20]
    71e4:	movw	r1, #0
    71e8:	movt	r1, #0
    71ec:	bl	0 <coda_set_error>
    71f0:	mvn	r0, #0
    71f4:	str	r0, [fp, #-4]
    71f8:	b	7274 <handle_name_attribute_for_type+0x120>
    71fc:	ldr	r0, [sp, #8]
    7200:	ldr	r0, [r0]
    7204:	ldr	r0, [r0, #8]
    7208:	ldr	r1, [sp]
    720c:	bl	0 <coda_type_set_name>
    7210:	cmp	r0, #0
    7214:	beq	7224 <handle_name_attribute_for_type+0xd0>
    7218:	mvn	r0, #0
    721c:	str	r0, [fp, #-4]
    7220:	b	7274 <handle_name_attribute_for_type+0x120>
    7224:	b	726c <handle_name_attribute_for_type+0x118>
    7228:	ldr	r0, [sp, #4]
    722c:	movw	r1, #0
    7230:	movt	r1, #0
    7234:	bl	24f4 <get_attribute_value>
    7238:	str	r0, [sp]
    723c:	ldr	r0, [sp]
    7240:	movw	r1, #0
    7244:	cmp	r0, r1
    7248:	beq	7268 <handle_name_attribute_for_type+0x114>
    724c:	ldr	r0, [pc, #44]	; 7280 <handle_name_attribute_for_type+0x12c>
    7250:	movw	r1, #0
    7254:	movt	r1, #0
    7258:	bl	0 <coda_set_error>
    725c:	mvn	r0, #0
    7260:	str	r0, [fp, #-4]
    7264:	b	7274 <handle_name_attribute_for_type+0x120>
    7268:	b	726c <handle_name_attribute_for_type+0x118>
    726c:	movw	r0, #0
    7270:	str	r0, [fp, #-4]
    7274:	ldr	r0, [fp, #-4]
    7278:	mov	sp, fp
    727c:	pop	{fp, pc}
    7280:	.word	0xfffffe70

00007284 <type_set_description>:
    7284:	push	{fp, lr}
    7288:	mov	fp, sp
    728c:	sub	sp, sp, #8
    7290:	str	r0, [sp]
    7294:	ldr	r0, [sp]
    7298:	ldr	r0, [r0]
    729c:	ldr	r0, [r0, #12]
    72a0:	movw	r1, #0
    72a4:	cmp	r0, r1
    72a8:	bne	72d0 <type_set_description+0x4c>
    72ac:	ldr	r0, [sp]
    72b0:	ldr	r0, [r0]
    72b4:	ldr	r0, [r0, #396]	; 0x18c
    72b8:	ldr	r0, [r0, #8]
    72bc:	movw	r1, #0
    72c0:	movt	r1, #0
    72c4:	bl	0 <coda_type_set_description>
    72c8:	str	r0, [sp, #4]
    72cc:	b	72f4 <type_set_description+0x70>
    72d0:	ldr	r0, [sp]
    72d4:	ldr	r0, [r0]
    72d8:	ldr	r0, [r0, #396]	; 0x18c
    72dc:	ldr	r0, [r0, #8]
    72e0:	ldr	r1, [sp]
    72e4:	ldr	r1, [r1]
    72e8:	ldr	r1, [r1, #12]
    72ec:	bl	0 <coda_type_set_description>
    72f0:	str	r0, [sp, #4]
    72f4:	ldr	r0, [sp, #4]
    72f8:	mov	sp, fp
    72fc:	pop	{fp, pc}

00007300 <cd_array_set_type>:
    7300:	push	{fp, lr}
    7304:	mov	fp, sp
    7308:	sub	sp, sp, #8
    730c:	str	r0, [sp, #4]
    7310:	ldr	r0, [sp, #4]
    7314:	ldr	r0, [r0]
    7318:	ldr	r0, [r0, #396]	; 0x18c
    731c:	ldr	r0, [r0, #8]
    7320:	ldr	r1, [sp, #4]
    7324:	ldr	r1, [r1]
    7328:	ldr	r1, [r1, #8]
    732c:	bl	0 <coda_type_array_set_base_type>
    7330:	mov	sp, fp
    7334:	pop	{fp, pc}

00007338 <optional_integer_constant_or_expression_init>:
    7338:	sub	sp, sp, #8
    733c:	movw	r2, #0
    7340:	movt	r2, #0
    7344:	str	r0, [sp, #4]
    7348:	str	r1, [sp]
    734c:	ldr	r0, [sp, #4]
    7350:	ldr	r0, [r0]
    7354:	movw	r1, #1
    7358:	str	r1, [r0, #32]
    735c:	ldr	r0, [sp, #4]
    7360:	ldr	r0, [r0]
    7364:	str	r2, [r0, #40]	; 0x28
    7368:	ldr	r0, [sp, #4]
    736c:	ldr	r0, [r0]
    7370:	movw	r1, #0
    7374:	movt	r1, #0
    7378:	str	r1, [r0, #36]	; 0x24
    737c:	movw	r0, #0
    7380:	add	sp, sp, #8
    7384:	bx	lr

00007388 <cd_array_add_dimension>:
    7388:	push	{fp, lr}
    738c:	mov	fp, sp
    7390:	sub	sp, sp, #8
    7394:	str	r0, [sp]
    7398:	ldr	r0, [sp]
    739c:	ldr	r0, [r0]
    73a0:	ldr	r0, [r0, #8]
    73a4:	movw	r1, #0
    73a8:	cmp	r0, r1
    73ac:	bne	73c4 <cd_array_add_dimension+0x3c>
    73b0:	ldr	r0, [sp]
    73b4:	ldr	r0, [r0]
    73b8:	ldr	r0, [r0, #4]
    73bc:	cmp	r0, #0
    73c0:	beq	740c <cd_array_add_dimension+0x84>
    73c4:	ldr	r0, [sp]
    73c8:	ldr	r0, [r0]
    73cc:	ldr	r0, [r0, #396]	; 0x18c
    73d0:	ldr	r0, [r0, #8]
    73d4:	ldr	r1, [sp]
    73d8:	ldr	r1, [r1]
    73dc:	ldr	r1, [r1, #8]
    73e0:	bl	0 <coda_type_array_add_variable_dimension>
    73e4:	cmp	r0, #0
    73e8:	beq	73f8 <cd_array_add_dimension+0x70>
    73ec:	mvn	r0, #0
    73f0:	str	r0, [sp, #4]
    73f4:	b	7444 <cd_array_add_dimension+0xbc>
    73f8:	ldr	r0, [sp]
    73fc:	ldr	r0, [r0]
    7400:	movw	r1, #0
    7404:	str	r1, [r0, #8]
    7408:	b	743c <cd_array_add_dimension+0xb4>
    740c:	ldr	r0, [sp]
    7410:	ldr	r0, [r0]
    7414:	ldr	r1, [r0, #16]
    7418:	ldr	r0, [r0, #396]	; 0x18c
    741c:	ldr	r0, [r0, #8]
    7420:	bl	0 <coda_type_array_add_fixed_dimension>
    7424:	cmp	r0, #0
    7428:	beq	7438 <cd_array_add_dimension+0xb0>
    742c:	mvn	r0, #0
    7430:	str	r0, [sp, #4]
    7434:	b	7444 <cd_array_add_dimension+0xbc>
    7438:	b	743c <cd_array_add_dimension+0xb4>
    743c:	movw	r0, #0
    7440:	str	r0, [sp, #4]
    7444:	ldr	r0, [sp, #4]
    7448:	mov	sp, fp
    744c:	pop	{fp, pc}

00007450 <cd_attribute_init>:
    7450:	push	{fp, lr}
    7454:	mov	fp, sp
    7458:	sub	sp, sp, #32
    745c:	str	r0, [fp, #-8]
    7460:	str	r1, [fp, #-12]
    7464:	movw	r0, #0
    7468:	str	r0, [sp, #16]
    746c:	str	r0, [sp, #12]
    7470:	str	r0, [sp, #8]
    7474:	ldr	r0, [fp, #-12]
    7478:	movw	r1, #0
    747c:	movt	r1, #0
    7480:	bl	24f4 <get_attribute_value>
    7484:	str	r0, [sp, #16]
    7488:	ldr	r0, [sp, #16]
    748c:	movw	r1, #0
    7490:	cmp	r0, r1
    7494:	beq	74b4 <cd_attribute_init+0x64>
    7498:	ldr	r0, [pc, #708]	; 7764 <cd_attribute_init+0x314>
    749c:	movw	r1, #0
    74a0:	movt	r1, #0
    74a4:	bl	0 <coda_set_error>
    74a8:	mvn	r0, #0
    74ac:	str	r0, [fp, #-4]
    74b0:	b	7758 <cd_attribute_init+0x308>
    74b4:	ldr	r0, [fp, #-8]
    74b8:	ldr	r0, [r0]
    74bc:	ldr	r0, [r0, #396]	; 0x18c
    74c0:	ldr	r0, [r0, #48]	; 0x30
    74c4:	cmp	r0, #0
    74c8:	beq	74d0 <cd_attribute_init+0x80>
    74cc:	b	74f0 <cd_attribute_init+0xa0>
    74d0:	movw	r0, #0
    74d4:	movt	r0, #0
    74d8:	movw	r1, #0
    74dc:	movt	r1, #0
    74e0:	movw	r2, #1439	; 0x59f
    74e4:	movw	r3, #0
    74e8:	movt	r3, #0
    74ec:	bl	0 <__assert_fail>
    74f0:	ldr	r0, [fp, #-8]
    74f4:	ldr	r0, [r0]
    74f8:	ldr	r0, [r0, #396]	; 0x18c
    74fc:	ldr	r0, [r0, #44]	; 0x2c
    7500:	ldr	r1, [fp, #-8]
    7504:	ldr	r1, [r1]
    7508:	str	r0, [r1, #44]	; 0x2c
    750c:	ldr	r0, [fp, #-8]
    7510:	ldr	r0, [r0]
    7514:	movw	r1, #1
    7518:	str	r1, [r0, #48]	; 0x30
    751c:	ldr	r0, [fp, #-12]
    7520:	movw	r1, #0
    7524:	movt	r1, #0
    7528:	bl	24f4 <get_attribute_value>
    752c:	movw	r1, #0
    7530:	cmp	r0, r1
    7534:	beq	7554 <cd_attribute_init+0x104>
    7538:	ldr	r0, [pc, #548]	; 7764 <cd_attribute_init+0x314>
    753c:	movw	r1, #0
    7540:	movt	r1, #0
    7544:	bl	0 <coda_set_error>
    7548:	mvn	r0, #0
    754c:	str	r0, [fp, #-4]
    7550:	b	7758 <cd_attribute_init+0x308>
    7554:	ldr	r0, [fp, #-12]
    7558:	ldr	r1, [fp, #-8]
    755c:	ldr	r1, [r1]
    7560:	ldr	r2, [r1]
    7564:	movw	r1, #0
    7568:	movt	r1, #0
    756c:	bl	20e4 <get_mandatory_attribute_value>
    7570:	str	r0, [sp, #12]
    7574:	ldr	r0, [sp, #12]
    7578:	movw	r1, #0
    757c:	cmp	r0, r1
    7580:	bne	7590 <cd_attribute_init+0x140>
    7584:	mvn	r0, #0
    7588:	str	r0, [fp, #-4]
    758c:	b	7758 <cd_attribute_init+0x308>
    7590:	ldr	r0, [fp, #-12]
    7594:	movw	r1, #0
    7598:	movt	r1, #0
    759c:	bl	24f4 <get_attribute_value>
    75a0:	movw	r1, #0
    75a4:	movt	r1, #0
    75a8:	str	r0, [sp, #8]
    75ac:	ldr	r0, [fp, #-8]
    75b0:	ldr	r0, [r0]
    75b4:	str	r1, [r0, #40]	; 0x28
    75b8:	ldr	r0, [fp, #-8]
    75bc:	ldr	r0, [r0]
    75c0:	ldr	r0, [r0, #44]	; 0x2c
    75c4:	cmp	r0, #2
    75c8:	bne	7634 <cd_attribute_init+0x1e4>
    75cc:	ldr	r0, [sp, #8]
    75d0:	movw	r1, #0
    75d4:	cmp	r0, r1
    75d8:	bne	7634 <cd_attribute_init+0x1e4>
    75dc:	ldr	r0, [sp, #12]
    75e0:	str	r0, [sp, #8]
    75e4:	ldr	r0, [sp, #12]
    75e8:	bl	0 <coda_element_name_from_xml_name>
    75ec:	movw	r1, #0
    75f0:	bl	0 <coda_identifier_from_name>
    75f4:	str	r0, [sp, #4]
    75f8:	ldr	r0, [sp, #4]
    75fc:	movw	r1, #0
    7600:	cmp	r0, r1
    7604:	bne	7614 <cd_attribute_init+0x1c4>
    7608:	mvn	r0, #0
    760c:	str	r0, [fp, #-4]
    7610:	b	7758 <cd_attribute_init+0x308>
    7614:	ldr	r0, [sp, #4]
    7618:	bl	0 <coda_type_record_field_new>
    761c:	ldr	r1, [fp, #-8]
    7620:	ldr	r1, [r1]
    7624:	str	r0, [r1, #8]
    7628:	ldr	r0, [sp, #4]
    762c:	bl	0 <free>
    7630:	b	7648 <cd_attribute_init+0x1f8>
    7634:	ldr	r0, [sp, #12]
    7638:	bl	0 <coda_type_record_field_new>
    763c:	ldr	r1, [fp, #-8]
    7640:	ldr	r1, [r1]
    7644:	str	r0, [r1, #8]
    7648:	ldr	r0, [fp, #-8]
    764c:	ldr	r0, [r0]
    7650:	ldr	r0, [r0, #8]
    7654:	movw	r1, #0
    7658:	cmp	r0, r1
    765c:	bne	766c <cd_attribute_init+0x21c>
    7660:	mvn	r0, #0
    7664:	str	r0, [fp, #-4]
    7668:	b	7758 <cd_attribute_init+0x308>
    766c:	ldr	r0, [sp, #8]
    7670:	movw	r1, #0
    7674:	cmp	r0, r1
    7678:	beq	76a8 <cd_attribute_init+0x258>
    767c:	ldr	r0, [fp, #-8]
    7680:	ldr	r0, [r0]
    7684:	ldr	r0, [r0, #8]
    7688:	ldr	r1, [sp, #8]
    768c:	bl	0 <coda_type_record_field_set_real_name>
    7690:	cmp	r0, #0
    7694:	beq	76a4 <cd_attribute_init+0x254>
    7698:	mvn	r0, #0
    769c:	str	r0, [fp, #-4]
    76a0:	b	7758 <cd_attribute_init+0x308>
    76a4:	b	76a8 <cd_attribute_init+0x258>
    76a8:	ldr	r0, [fp, #-8]
    76ac:	ldr	r0, [r0]
    76b0:	movw	r1, #0
    76b4:	movt	r1, #0
    76b8:	bl	1684 <register_type_elements>
    76bc:	ldr	r0, [fp, #-8]
    76c0:	ldr	r0, [r0]
    76c4:	movw	r1, #18
    76c8:	movw	r2, #0
    76cc:	movt	r2, #0
    76d0:	movw	r3, #0
    76d4:	movt	r3, #0
    76d8:	bl	1344 <register_sub_element>
    76dc:	ldr	r0, [fp, #-8]
    76e0:	ldr	r0, [r0]
    76e4:	movw	r1, #29
    76e8:	movw	r2, #0
    76ec:	movt	r2, #0
    76f0:	movw	r3, #0
    76f4:	movt	r3, #0
    76f8:	bl	1344 <register_sub_element>
    76fc:	ldr	r0, [fp, #-8]
    7700:	ldr	r0, [r0]
    7704:	movw	r1, #5
    7708:	movw	r2, #0
    770c:	movt	r2, #0
    7710:	movw	r3, #0
    7714:	movt	r3, #0
    7718:	bl	1344 <register_sub_element>
    771c:	ldr	r0, [fp, #-8]
    7720:	ldr	r0, [r0]
    7724:	movw	r1, #16
    7728:	movw	r2, #0
    772c:	movt	r2, #0
    7730:	movw	r3, #0
    7734:	movt	r3, #0
    7738:	bl	1344 <register_sub_element>
    773c:	ldr	r0, [fp, #-8]
    7740:	ldr	r0, [r0]
    7744:	movw	r1, #0
    7748:	movt	r1, #0
    774c:	str	r1, [r0, #36]	; 0x24
    7750:	movw	r0, #0
    7754:	str	r0, [fp, #-4]
    7758:	ldr	r0, [fp, #-4]
    775c:	mov	sp, fp
    7760:	pop	{fp, pc}
    7764:	.word	0xfffffe70

00007768 <type_add_attribute>:
    7768:	push	{fp, lr}
    776c:	mov	fp, sp
    7770:	sub	sp, sp, #8
    7774:	str	r0, [sp]
    7778:	ldr	r0, [sp]
    777c:	ldr	r0, [r0]
    7780:	ldr	r0, [r0, #396]	; 0x18c
    7784:	ldr	r0, [r0, #8]
    7788:	ldr	r1, [sp]
    778c:	ldr	r1, [r1]
    7790:	ldr	r1, [r1, #8]
    7794:	bl	0 <coda_type_add_attribute>
    7798:	cmp	r0, #0
    779c:	beq	77ac <type_add_attribute+0x44>
    77a0:	mvn	r0, #0
    77a4:	str	r0, [sp, #4]
    77a8:	b	77c0 <type_add_attribute+0x58>
    77ac:	ldr	r0, [sp]
    77b0:	ldr	r0, [r0]
    77b4:	movw	r1, #0
    77b8:	str	r1, [r0, #8]
    77bc:	str	r1, [sp, #4]
    77c0:	ldr	r0, [sp, #4]
    77c4:	mov	sp, fp
    77c8:	pop	{fp, pc}

000077cc <cd_array_finalise>:
    77cc:	push	{fp, lr}
    77d0:	mov	fp, sp
    77d4:	sub	sp, sp, #8
    77d8:	str	r0, [sp, #4]
    77dc:	ldr	r0, [sp, #4]
    77e0:	ldr	r0, [r0]
    77e4:	ldr	r0, [r0, #8]
    77e8:	bl	0 <coda_type_array_validate>
    77ec:	mov	sp, fp
    77f0:	pop	{fp, pc}

000077f4 <optional_integer_constant_or_expression_finalise>:
    77f4:	push	{fp, lr}
    77f8:	mov	fp, sp
    77fc:	sub	sp, sp, #24
    7800:	str	r0, [fp, #-8]
    7804:	ldr	r0, [fp, #-8]
    7808:	ldr	r0, [r0]
    780c:	ldr	r0, [r0, #12]
    7810:	movw	r1, #0
    7814:	cmp	r0, r1
    7818:	beq	7880 <optional_integer_constant_or_expression_finalise+0x8c>
    781c:	ldr	r0, [fp, #-8]
    7820:	ldr	r0, [r0]
    7824:	ldr	r0, [r0, #12]
    7828:	ldr	r1, [fp, #-8]
    782c:	ldr	r1, [r1]
    7830:	ldr	r1, [r1, #12]
    7834:	str	r0, [sp, #4]
    7838:	mov	r0, r1
    783c:	bl	0 <strlen>
    7840:	ldr	r1, [sp, #4]
    7844:	str	r0, [sp]
    7848:	mov	r0, r1
    784c:	ldr	r1, [sp]
    7850:	bl	1ff0 <is_whitespace>
    7854:	cmp	r0, #0
    7858:	beq	787c <optional_integer_constant_or_expression_finalise+0x88>
    785c:	ldr	r0, [fp, #-8]
    7860:	ldr	r0, [r0]
    7864:	ldr	r0, [r0, #12]
    7868:	bl	0 <free>
    786c:	ldr	r0, [fp, #-8]
    7870:	ldr	r0, [r0]
    7874:	movw	r1, #0
    7878:	str	r1, [r0, #12]
    787c:	b	7880 <optional_integer_constant_or_expression_finalise+0x8c>
    7880:	ldr	r0, [fp, #-8]
    7884:	ldr	r0, [r0]
    7888:	ldr	r0, [r0, #12]
    788c:	movw	r1, #0
    7890:	cmp	r0, r1
    7894:	bne	78b4 <optional_integer_constant_or_expression_finalise+0xc0>
    7898:	ldr	r0, [fp, #-8]
    789c:	ldr	r0, [r0]
    78a0:	movw	r1, #1
    78a4:	str	r1, [r0, #4]
    78a8:	movw	r0, #0
    78ac:	str	r0, [fp, #-4]
    78b0:	b	79b8 <optional_integer_constant_or_expression_finalise+0x1c4>
    78b4:	ldr	r0, [fp, #-8]
    78b8:	ldr	r0, [r0]
    78bc:	ldr	r0, [r0, #12]
    78c0:	add	r1, sp, #8
    78c4:	bl	0 <coda_expression_from_string>
    78c8:	cmp	r0, #0
    78cc:	beq	78dc <optional_integer_constant_or_expression_finalise+0xe8>
    78d0:	mvn	r0, #0
    78d4:	str	r0, [fp, #-4]
    78d8:	b	79b8 <optional_integer_constant_or_expression_finalise+0x1c4>
    78dc:	ldr	r0, [fp, #-8]
    78e0:	ldr	r0, [r0]
    78e4:	ldr	r0, [r0, #12]
    78e8:	bl	0 <free>
    78ec:	ldr	r0, [fp, #-8]
    78f0:	ldr	r0, [r0]
    78f4:	movw	r1, #0
    78f8:	str	r1, [r0, #12]
    78fc:	ldr	r0, [sp, #8]
    7900:	ldr	r1, [fp, #-8]
    7904:	ldr	r1, [r1]
    7908:	str	r0, [r1, #8]
    790c:	ldr	r0, [sp, #8]
    7910:	add	r1, sp, #12
    7914:	bl	0 <coda_expression_get_type>
    7918:	cmp	r0, #0
    791c:	beq	7934 <optional_integer_constant_or_expression_finalise+0x140>
    7920:	ldr	r0, [sp, #8]
    7924:	bl	0 <coda_expression_delete>
    7928:	mvn	r0, #0
    792c:	str	r0, [fp, #-4]
    7930:	b	79b8 <optional_integer_constant_or_expression_finalise+0x1c4>
    7934:	ldr	r0, [sp, #12]
    7938:	cmp	r0, #1
    793c:	beq	795c <optional_integer_constant_or_expression_finalise+0x168>
    7940:	ldr	r0, [pc, #124]	; 79c4 <optional_integer_constant_or_expression_finalise+0x1d0>
    7944:	movw	r1, #0
    7948:	movt	r1, #0
    794c:	bl	0 <coda_set_error>
    7950:	mvn	r0, #0
    7954:	str	r0, [fp, #-4]
    7958:	b	79b8 <optional_integer_constant_or_expression_finalise+0x1c4>
    795c:	ldr	r0, [sp, #8]
    7960:	bl	0 <coda_expression_is_constant>
    7964:	cmp	r0, #0
    7968:	beq	79b0 <optional_integer_constant_or_expression_finalise+0x1bc>
    796c:	ldr	r0, [sp, #8]
    7970:	ldr	r1, [fp, #-8]
    7974:	ldr	r1, [r1]
    7978:	add	r2, r1, #16
    797c:	movw	r1, #0
    7980:	bl	0 <coda_expression_eval_integer>
    7984:	cmp	r0, #0
    7988:	beq	7998 <optional_integer_constant_or_expression_finalise+0x1a4>
    798c:	mvn	r0, #0
    7990:	str	r0, [fp, #-4]
    7994:	b	79b8 <optional_integer_constant_or_expression_finalise+0x1c4>
    7998:	ldr	r0, [fp, #-8]
    799c:	ldr	r0, [r0]
    79a0:	movw	r1, #0
    79a4:	str	r1, [r0, #8]
    79a8:	ldr	r0, [sp, #8]
    79ac:	bl	0 <coda_expression_delete>
    79b0:	movw	r0, #0
    79b4:	str	r0, [fp, #-4]
    79b8:	ldr	r0, [fp, #-4]
    79bc:	mov	sp, fp
    79c0:	pop	{fp, pc}
    79c4:	.word	0xfffffe70

000079c8 <cd_field_set_type>:
    79c8:	push	{fp, lr}
    79cc:	mov	fp, sp
    79d0:	sub	sp, sp, #8
    79d4:	str	r0, [sp, #4]
    79d8:	ldr	r0, [sp, #4]
    79dc:	ldr	r0, [r0]
    79e0:	ldr	r0, [r0, #396]	; 0x18c
    79e4:	ldr	r0, [r0, #8]
    79e8:	ldr	r1, [sp, #4]
    79ec:	ldr	r1, [r1]
    79f0:	ldr	r1, [r1, #8]
    79f4:	bl	0 <coda_type_record_field_set_type>
    79f8:	mov	sp, fp
    79fc:	pop	{fp, pc}

00007a00 <dummy_init>:
    7a00:	sub	sp, sp, #8
    7a04:	str	r0, [sp, #4]
    7a08:	str	r1, [sp]
    7a0c:	movw	r0, #0
    7a10:	add	sp, sp, #8
    7a14:	bx	lr

00007a18 <cd_field_set_hidden>:
    7a18:	push	{fp, lr}
    7a1c:	mov	fp, sp
    7a20:	sub	sp, sp, #8
    7a24:	str	r0, [sp, #4]
    7a28:	ldr	r0, [sp, #4]
    7a2c:	ldr	r0, [r0]
    7a30:	ldr	r0, [r0, #396]	; 0x18c
    7a34:	ldr	r0, [r0, #8]
    7a38:	bl	0 <coda_type_record_field_set_hidden>
    7a3c:	mov	sp, fp
    7a40:	pop	{fp, pc}

00007a44 <cd_field_set_optional>:
    7a44:	push	{fp, lr}
    7a48:	mov	fp, sp
    7a4c:	sub	sp, sp, #8
    7a50:	str	r0, [sp, #4]
    7a54:	ldr	r0, [sp, #4]
    7a58:	ldr	r0, [r0]
    7a5c:	ldr	r0, [r0, #396]	; 0x18c
    7a60:	ldr	r0, [r0, #8]
    7a64:	bl	0 <coda_type_record_field_set_optional>
    7a68:	mov	sp, fp
    7a6c:	pop	{fp, pc}

00007a70 <bool_expression_init>:
    7a70:	sub	sp, sp, #8
    7a74:	movw	r2, #0
    7a78:	movt	r2, #0
    7a7c:	str	r0, [sp, #4]
    7a80:	str	r1, [sp]
    7a84:	ldr	r0, [sp, #4]
    7a88:	ldr	r0, [r0]
    7a8c:	movw	r1, #1
    7a90:	str	r1, [r0, #32]
    7a94:	ldr	r0, [sp, #4]
    7a98:	ldr	r0, [r0]
    7a9c:	str	r2, [r0, #40]	; 0x28
    7aa0:	ldr	r0, [sp, #4]
    7aa4:	ldr	r0, [r0]
    7aa8:	movw	r1, #0
    7aac:	movt	r1, #0
    7ab0:	str	r1, [r0, #36]	; 0x24
    7ab4:	movw	r0, #0
    7ab8:	add	sp, sp, #8
    7abc:	bx	lr

00007ac0 <cd_field_set_available>:
    7ac0:	push	{fp, lr}
    7ac4:	mov	fp, sp
    7ac8:	sub	sp, sp, #8
    7acc:	str	r0, [sp]
    7ad0:	ldr	r0, [sp]
    7ad4:	ldr	r0, [r0]
    7ad8:	ldr	r0, [r0, #396]	; 0x18c
    7adc:	ldr	r0, [r0, #8]
    7ae0:	ldr	r1, [sp]
    7ae4:	ldr	r1, [r1]
    7ae8:	ldr	r1, [r1, #8]
    7aec:	bl	0 <coda_type_record_field_set_available_expression>
    7af0:	cmp	r0, #0
    7af4:	beq	7b04 <cd_field_set_available+0x44>
    7af8:	mvn	r0, #0
    7afc:	str	r0, [sp, #4]
    7b00:	b	7b18 <cd_field_set_available+0x58>
    7b04:	ldr	r0, [sp]
    7b08:	ldr	r0, [r0]
    7b0c:	movw	r1, #0
    7b10:	str	r1, [r0, #8]
    7b14:	str	r1, [sp, #4]
    7b18:	ldr	r0, [sp, #4]
    7b1c:	mov	sp, fp
    7b20:	pop	{fp, pc}

00007b24 <cd_attribute_set_fixed_value>:
    7b24:	push	{fp, lr}
    7b28:	mov	fp, sp
    7b2c:	sub	sp, sp, #24
    7b30:	str	r0, [fp, #-8]
    7b34:	movw	r0, #0
    7b38:	str	r0, [sp, #12]
    7b3c:	ldr	r0, [fp, #-8]
    7b40:	ldr	r0, [r0]
    7b44:	ldr	r0, [r0, #12]
    7b48:	bl	7f18 <decode_escaped_string>
    7b4c:	cmp	r0, #0
    7b50:	bge	7b70 <cd_attribute_set_fixed_value+0x4c>
    7b54:	ldr	r0, [pc, #360]	; 7cc4 <cd_attribute_set_fixed_value+0x1a0>
    7b58:	movw	r1, #0
    7b5c:	movt	r1, #0
    7b60:	bl	0 <coda_set_error>
    7b64:	mvn	r0, #0
    7b68:	str	r0, [fp, #-4]
    7b6c:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7b70:	ldr	r0, [fp, #-8]
    7b74:	ldr	r0, [r0]
    7b78:	ldr	r0, [r0, #396]	; 0x18c
    7b7c:	ldr	r0, [r0, #8]
    7b80:	add	r1, sp, #12
    7b84:	bl	0 <coda_type_record_field_get_type>
    7b88:	cmp	r0, #0
    7b8c:	beq	7b9c <cd_attribute_set_fixed_value+0x78>
    7b90:	mvn	r0, #0
    7b94:	str	r0, [fp, #-4]
    7b98:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7b9c:	ldr	r0, [sp, #12]
    7ba0:	movw	r1, #0
    7ba4:	cmp	r0, r1
    7ba8:	beq	7bc8 <cd_attribute_set_fixed_value+0xa4>
    7bac:	ldr	r0, [pc, #272]	; 7cc4 <cd_attribute_set_fixed_value+0x1a0>
    7bb0:	movw	r1, #0
    7bb4:	movt	r1, #0
    7bb8:	bl	0 <coda_set_error>
    7bbc:	mvn	r0, #0
    7bc0:	str	r0, [fp, #-4]
    7bc4:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7bc8:	ldr	r0, [fp, #-8]
    7bcc:	ldr	r0, [r0]
    7bd0:	ldr	r0, [r0, #396]	; 0x18c
    7bd4:	ldr	r0, [r0, #44]	; 0x2c
    7bd8:	bl	0 <coda_type_text_new>
    7bdc:	str	r0, [sp, #12]
    7be0:	ldr	r0, [sp, #12]
    7be4:	movw	r1, #0
    7be8:	cmp	r0, r1
    7bec:	bne	7bfc <cd_attribute_set_fixed_value+0xd8>
    7bf0:	mvn	r0, #0
    7bf4:	str	r0, [fp, #-4]
    7bf8:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7bfc:	ldr	r0, [fp, #-8]
    7c00:	ldr	r0, [r0]
    7c04:	ldr	r0, [r0, #396]	; 0x18c
    7c08:	ldr	r0, [r0, #8]
    7c0c:	ldr	r1, [sp, #12]
    7c10:	bl	0 <coda_type_record_field_set_type>
    7c14:	cmp	r0, #0
    7c18:	beq	7c30 <cd_attribute_set_fixed_value+0x10c>
    7c1c:	ldr	r0, [sp, #12]
    7c20:	bl	0 <coda_type_release>
    7c24:	mvn	r0, #0
    7c28:	str	r0, [fp, #-4]
    7c2c:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7c30:	ldr	r0, [sp, #12]
    7c34:	bl	0 <coda_type_release>
    7c38:	ldr	r0, [sp, #12]
    7c3c:	ldr	r1, [fp, #-8]
    7c40:	ldr	r1, [r1]
    7c44:	ldr	r1, [r1, #12]
    7c48:	bl	0 <coda_type_text_set_fixed_value>
    7c4c:	cmp	r0, #0
    7c50:	beq	7c60 <cd_attribute_set_fixed_value+0x13c>
    7c54:	mvn	r0, #0
    7c58:	str	r0, [fp, #-4]
    7c5c:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7c60:	ldr	r0, [sp, #12]
    7c64:	ldr	r1, [fp, #-8]
    7c68:	ldr	r1, [r1]
    7c6c:	ldr	r1, [r1, #12]
    7c70:	str	r0, [sp, #8]
    7c74:	mov	r0, r1
    7c78:	bl	0 <strlen>
    7c7c:	mov	r1, r0
    7c80:	mov	r3, #0
    7c84:	ldr	r2, [sp, #8]
    7c88:	str	r0, [sp, #4]
    7c8c:	mov	r0, r2
    7c90:	ldr	r2, [sp, #4]
    7c94:	str	r1, [sp]
    7c98:	bl	0 <coda_type_set_byte_size>
    7c9c:	cmp	r0, #0
    7ca0:	beq	7cb0 <cd_attribute_set_fixed_value+0x18c>
    7ca4:	mvn	r0, #0
    7ca8:	str	r0, [fp, #-4]
    7cac:	b	7cb8 <cd_attribute_set_fixed_value+0x194>
    7cb0:	movw	r0, #0
    7cb4:	str	r0, [fp, #-4]
    7cb8:	ldr	r0, [fp, #-4]
    7cbc:	mov	sp, fp
    7cc0:	pop	{fp, pc}
    7cc4:	.word	0xfffffe70

00007cc8 <cd_attribute_finalise>:
    7cc8:	push	{fp, lr}
    7ccc:	mov	fp, sp
    7cd0:	sub	sp, sp, #16
    7cd4:	str	r0, [sp, #8]
    7cd8:	movw	r0, #0
    7cdc:	str	r0, [sp, #4]
    7ce0:	ldr	r0, [sp, #8]
    7ce4:	ldr	r0, [r0]
    7ce8:	ldr	r0, [r0, #8]
    7cec:	add	r1, sp, #4
    7cf0:	bl	0 <coda_type_record_field_get_type>
    7cf4:	cmp	r0, #0
    7cf8:	beq	7d08 <cd_attribute_finalise+0x40>
    7cfc:	mvn	r0, #0
    7d00:	str	r0, [fp, #-4]
    7d04:	b	7d94 <cd_attribute_finalise+0xcc>
    7d08:	ldr	r0, [sp, #4]
    7d0c:	movw	r1, #0
    7d10:	cmp	r0, r1
    7d14:	bne	7d80 <cd_attribute_finalise+0xb8>
    7d18:	ldr	r0, [sp, #8]
    7d1c:	ldr	r0, [r0]
    7d20:	ldr	r0, [r0, #44]	; 0x2c
    7d24:	bl	0 <coda_type_text_new>
    7d28:	str	r0, [sp, #4]
    7d2c:	ldr	r0, [sp, #4]
    7d30:	movw	r1, #0
    7d34:	cmp	r0, r1
    7d38:	bne	7d48 <cd_attribute_finalise+0x80>
    7d3c:	mvn	r0, #0
    7d40:	str	r0, [fp, #-4]
    7d44:	b	7d94 <cd_attribute_finalise+0xcc>
    7d48:	ldr	r0, [sp, #8]
    7d4c:	ldr	r0, [r0]
    7d50:	ldr	r0, [r0, #8]
    7d54:	ldr	r1, [sp, #4]
    7d58:	bl	0 <coda_type_record_field_set_type>
    7d5c:	cmp	r0, #0
    7d60:	beq	7d78 <cd_attribute_finalise+0xb0>
    7d64:	ldr	r0, [sp, #4]
    7d68:	bl	0 <coda_type_release>
    7d6c:	mvn	r0, #0
    7d70:	str	r0, [fp, #-4]
    7d74:	b	7d94 <cd_attribute_finalise+0xcc>
    7d78:	ldr	r0, [sp, #4]
    7d7c:	bl	0 <coda_type_release>
    7d80:	ldr	r0, [sp, #8]
    7d84:	ldr	r0, [r0]
    7d88:	ldr	r0, [r0, #8]
    7d8c:	bl	0 <coda_type_record_field_validate>
    7d90:	str	r0, [fp, #-4]
    7d94:	ldr	r0, [fp, #-4]
    7d98:	mov	sp, fp
    7d9c:	pop	{fp, pc}

00007da0 <bool_expression_finalise>:
    7da0:	push	{fp, lr}
    7da4:	mov	fp, sp
    7da8:	sub	sp, sp, #24
    7dac:	str	r0, [fp, #-8]
    7db0:	ldr	r0, [fp, #-8]
    7db4:	ldr	r0, [r0]
    7db8:	ldr	r0, [r0, #12]
    7dbc:	movw	r1, #0
    7dc0:	cmp	r0, r1
    7dc4:	beq	7e2c <bool_expression_finalise+0x8c>
    7dc8:	ldr	r0, [fp, #-8]
    7dcc:	ldr	r0, [r0]
    7dd0:	ldr	r0, [r0, #12]
    7dd4:	ldr	r1, [fp, #-8]
    7dd8:	ldr	r1, [r1]
    7ddc:	ldr	r1, [r1, #12]
    7de0:	str	r0, [sp, #4]
    7de4:	mov	r0, r1
    7de8:	bl	0 <strlen>
    7dec:	ldr	r1, [sp, #4]
    7df0:	str	r0, [sp]
    7df4:	mov	r0, r1
    7df8:	ldr	r1, [sp]
    7dfc:	bl	1ff0 <is_whitespace>
    7e00:	cmp	r0, #0
    7e04:	beq	7e28 <bool_expression_finalise+0x88>
    7e08:	ldr	r0, [fp, #-8]
    7e0c:	ldr	r0, [r0]
    7e10:	ldr	r0, [r0, #12]
    7e14:	bl	0 <free>
    7e18:	ldr	r0, [fp, #-8]
    7e1c:	ldr	r0, [r0]
    7e20:	movw	r1, #0
    7e24:	str	r1, [r0, #12]
    7e28:	b	7e2c <bool_expression_finalise+0x8c>
    7e2c:	ldr	r0, [fp, #-8]
    7e30:	ldr	r0, [r0]
    7e34:	ldr	r0, [r0, #12]
    7e38:	movw	r1, #0
    7e3c:	cmp	r0, r1
    7e40:	bne	7e60 <bool_expression_finalise+0xc0>
    7e44:	ldr	r0, [pc, #200]	; 7f14 <bool_expression_finalise+0x174>
    7e48:	movw	r1, #0
    7e4c:	movt	r1, #0
    7e50:	bl	0 <coda_set_error>
    7e54:	mvn	r0, #0
    7e58:	str	r0, [fp, #-4]
    7e5c:	b	7f08 <bool_expression_finalise+0x168>
    7e60:	ldr	r0, [fp, #-8]
    7e64:	ldr	r0, [r0]
    7e68:	ldr	r0, [r0, #12]
    7e6c:	add	r1, sp, #8
    7e70:	bl	0 <coda_expression_from_string>
    7e74:	cmp	r0, #0
    7e78:	beq	7e88 <bool_expression_finalise+0xe8>
    7e7c:	mvn	r0, #0
    7e80:	str	r0, [fp, #-4]
    7e84:	b	7f08 <bool_expression_finalise+0x168>
    7e88:	ldr	r0, [fp, #-8]
    7e8c:	ldr	r0, [r0]
    7e90:	ldr	r0, [r0, #12]
    7e94:	bl	0 <free>
    7e98:	ldr	r0, [fp, #-8]
    7e9c:	ldr	r0, [r0]
    7ea0:	movw	r1, #0
    7ea4:	str	r1, [r0, #12]
    7ea8:	ldr	r0, [sp, #8]
    7eac:	ldr	r1, [fp, #-8]
    7eb0:	ldr	r1, [r1]
    7eb4:	str	r0, [r1, #8]
    7eb8:	ldr	r0, [sp, #8]
    7ebc:	add	r1, sp, #12
    7ec0:	bl	0 <coda_expression_get_type>
    7ec4:	cmp	r0, #0
    7ec8:	beq	7ed8 <bool_expression_finalise+0x138>
    7ecc:	mvn	r0, #0
    7ed0:	str	r0, [fp, #-4]
    7ed4:	b	7f08 <bool_expression_finalise+0x168>
    7ed8:	ldr	r0, [sp, #12]
    7edc:	cmp	r0, #0
    7ee0:	beq	7f00 <bool_expression_finalise+0x160>
    7ee4:	ldr	r0, [pc, #40]	; 7f14 <bool_expression_finalise+0x174>
    7ee8:	movw	r1, #0
    7eec:	movt	r1, #0
    7ef0:	bl	0 <coda_set_error>
    7ef4:	mvn	r0, #0
    7ef8:	str	r0, [fp, #-4]
    7efc:	b	7f08 <bool_expression_finalise+0x168>
    7f00:	movw	r0, #0
    7f04:	str	r0, [fp, #-4]
    7f08:	ldr	r0, [fp, #-4]
    7f0c:	mov	sp, fp
    7f10:	pop	{fp, pc}
    7f14:	.word	0xfffffe70

00007f18 <decode_escaped_string>:
    7f18:	sub	sp, sp, #20
    7f1c:	str	r0, [sp, #12]
    7f20:	ldr	r0, [sp, #12]
    7f24:	movw	r1, #0
    7f28:	cmp	r0, r1
    7f2c:	bne	7f3c <decode_escaped_string+0x24>
    7f30:	movw	r0, #0
    7f34:	str	r0, [sp, #16]
    7f38:	b	8304 <decode_escaped_string+0x3ec>
    7f3c:	movw	r0, #0
    7f40:	str	r0, [sp, #8]
    7f44:	str	r0, [sp, #4]
    7f48:	ldr	r0, [sp, #12]
    7f4c:	ldr	r1, [sp, #8]
    7f50:	add	r0, r0, r1
    7f54:	ldrb	r0, [r0]
    7f58:	cmp	r0, #0
    7f5c:	beq	82e8 <decode_escaped_string+0x3d0>
    7f60:	ldr	r0, [sp, #12]
    7f64:	ldr	r1, [sp, #8]
    7f68:	add	r0, r0, r1
    7f6c:	ldrb	r0, [r0]
    7f70:	cmp	r0, #92	; 0x5c
    7f74:	bne	82b0 <decode_escaped_string+0x398>
    7f78:	ldr	r0, [sp, #8]
    7f7c:	add	r0, r0, #1
    7f80:	str	r0, [sp, #8]
    7f84:	ldr	r0, [sp, #12]
    7f88:	ldr	r1, [sp, #8]
    7f8c:	ldrb	r0, [r0, r1]
    7f90:	sub	r0, r0, #92	; 0x5c
    7f94:	cmp	r0, #26
    7f98:	str	r0, [sp]
    7f9c:	bhi	813c <decode_escaped_string+0x224>
    7fa0:	add	r0, pc, #8
    7fa4:	ldr	r1, [sp]
    7fa8:	ldr	r0, [r0, r1, lsl #2]
    7fac:	mov	pc, r0
    7fb0:	.word	0x0000811c
    7fb4:	.word	0x0000813c
    7fb8:	.word	0x0000813c
    7fbc:	.word	0x0000813c
    7fc0:	.word	0x0000813c
    7fc4:	.word	0x0000803c
    7fc8:	.word	0x0000805c
    7fcc:	.word	0x0000813c
    7fd0:	.word	0x0000813c
    7fd4:	.word	0x0000801c
    7fd8:	.word	0x0000807c
    7fdc:	.word	0x0000813c
    7fe0:	.word	0x0000813c
    7fe4:	.word	0x0000813c
    7fe8:	.word	0x0000813c
    7fec:	.word	0x0000813c
    7ff0:	.word	0x0000813c
    7ff4:	.word	0x0000813c
    7ff8:	.word	0x0000809c
    7ffc:	.word	0x0000813c
    8000:	.word	0x0000813c
    8004:	.word	0x0000813c
    8008:	.word	0x000080bc
    800c:	.word	0x0000813c
    8010:	.word	0x000080dc
    8014:	.word	0x0000813c
    8018:	.word	0x000080fc
    801c:	ldr	r0, [sp, #12]
    8020:	ldr	r1, [sp, #4]
    8024:	add	r2, r1, #1
    8028:	str	r2, [sp, #4]
    802c:	add	r0, r0, r1
    8030:	movw	r1, #27
    8034:	strb	r1, [r0]
    8038:	b	82ac <decode_escaped_string+0x394>
    803c:	ldr	r0, [sp, #12]
    8040:	ldr	r1, [sp, #4]
    8044:	add	r2, r1, #1
    8048:	str	r2, [sp, #4]
    804c:	add	r0, r0, r1
    8050:	movw	r1, #7
    8054:	strb	r1, [r0]
    8058:	b	82ac <decode_escaped_string+0x394>
    805c:	ldr	r0, [sp, #12]
    8060:	ldr	r1, [sp, #4]
    8064:	add	r2, r1, #1
    8068:	str	r2, [sp, #4]
    806c:	add	r0, r0, r1
    8070:	movw	r1, #8
    8074:	strb	r1, [r0]
    8078:	b	82ac <decode_escaped_string+0x394>
    807c:	ldr	r0, [sp, #12]
    8080:	ldr	r1, [sp, #4]
    8084:	add	r2, r1, #1
    8088:	str	r2, [sp, #4]
    808c:	add	r0, r0, r1
    8090:	movw	r1, #12
    8094:	strb	r1, [r0]
    8098:	b	82ac <decode_escaped_string+0x394>
    809c:	ldr	r0, [sp, #12]
    80a0:	ldr	r1, [sp, #4]
    80a4:	add	r2, r1, #1
    80a8:	str	r2, [sp, #4]
    80ac:	add	r0, r0, r1
    80b0:	movw	r1, #10
    80b4:	strb	r1, [r0]
    80b8:	b	82ac <decode_escaped_string+0x394>
    80bc:	ldr	r0, [sp, #12]
    80c0:	ldr	r1, [sp, #4]
    80c4:	add	r2, r1, #1
    80c8:	str	r2, [sp, #4]
    80cc:	add	r0, r0, r1
    80d0:	movw	r1, #13
    80d4:	strb	r1, [r0]
    80d8:	b	82ac <decode_escaped_string+0x394>
    80dc:	ldr	r0, [sp, #12]
    80e0:	ldr	r1, [sp, #4]
    80e4:	add	r2, r1, #1
    80e8:	str	r2, [sp, #4]
    80ec:	add	r0, r0, r1
    80f0:	movw	r1, #9
    80f4:	strb	r1, [r0]
    80f8:	b	82ac <decode_escaped_string+0x394>
    80fc:	ldr	r0, [sp, #12]
    8100:	ldr	r1, [sp, #4]
    8104:	add	r2, r1, #1
    8108:	str	r2, [sp, #4]
    810c:	add	r0, r0, r1
    8110:	movw	r1, #11
    8114:	strb	r1, [r0]
    8118:	b	82ac <decode_escaped_string+0x394>
    811c:	ldr	r0, [sp, #12]
    8120:	ldr	r1, [sp, #4]
    8124:	add	r2, r1, #1
    8128:	str	r2, [sp, #4]
    812c:	add	r0, r0, r1
    8130:	movw	r1, #92	; 0x5c
    8134:	strb	r1, [r0]
    8138:	b	82ac <decode_escaped_string+0x394>
    813c:	ldr	r0, [sp, #12]
    8140:	ldr	r1, [sp, #8]
    8144:	add	r0, r0, r1
    8148:	ldrb	r0, [r0]
    814c:	cmp	r0, #48	; 0x30
    8150:	blt	816c <decode_escaped_string+0x254>
    8154:	ldr	r0, [sp, #12]
    8158:	ldr	r1, [sp, #8]
    815c:	add	r0, r0, r1
    8160:	ldrb	r0, [r0]
    8164:	cmp	r0, #57	; 0x39
    8168:	ble	8178 <decode_escaped_string+0x260>
    816c:	mvn	r0, #0
    8170:	str	r0, [sp, #16]
    8174:	b	8304 <decode_escaped_string+0x3ec>
    8178:	ldr	r0, [sp, #12]
    817c:	ldr	r1, [sp, #8]
    8180:	add	r0, r0, r1
    8184:	ldrb	r0, [r0]
    8188:	sub	r0, r0, #48	; 0x30
    818c:	ldr	r1, [sp, #12]
    8190:	ldr	r2, [sp, #4]
    8194:	add	r1, r1, r2
    8198:	strb	r0, [r1]
    819c:	ldr	r0, [sp, #12]
    81a0:	ldr	r1, [sp, #8]
    81a4:	add	r1, r1, #1
    81a8:	add	r0, r0, r1
    81ac:	ldrb	r0, [r0]
    81b0:	cmp	r0, #48	; 0x30
    81b4:	blt	82a0 <decode_escaped_string+0x388>
    81b8:	ldr	r0, [sp, #12]
    81bc:	ldr	r1, [sp, #8]
    81c0:	add	r1, r1, #1
    81c4:	add	r0, r0, r1
    81c8:	ldrb	r0, [r0]
    81cc:	cmp	r0, #57	; 0x39
    81d0:	bgt	82a0 <decode_escaped_string+0x388>
    81d4:	ldr	r0, [sp, #8]
    81d8:	add	r0, r0, #1
    81dc:	str	r0, [sp, #8]
    81e0:	ldr	r0, [sp, #12]
    81e4:	ldr	r1, [sp, #4]
    81e8:	ldrb	r0, [r0, r1]
    81ec:	mov	r1, r0
    81f0:	lsl	r0, r0, #3
    81f4:	ldr	r2, [sp, #12]
    81f8:	ldr	r3, [sp, #8]
    81fc:	add	r2, r2, r3
    8200:	ldrb	r2, [r2]
    8204:	sub	r2, r2, #48	; 0x30
    8208:	add	r0, r0, r2
    820c:	ldr	r2, [sp, #12]
    8210:	ldr	r3, [sp, #4]
    8214:	add	r2, r2, r3
    8218:	strb	r0, [r2]
    821c:	ldr	r0, [sp, #12]
    8220:	ldr	r2, [sp, #8]
    8224:	add	r2, r2, #1
    8228:	add	r0, r0, r2
    822c:	ldrb	r0, [r0]
    8230:	cmp	r0, #48	; 0x30
    8234:	blt	829c <decode_escaped_string+0x384>
    8238:	ldr	r0, [sp, #12]
    823c:	ldr	r1, [sp, #8]
    8240:	add	r1, r1, #1
    8244:	add	r0, r0, r1
    8248:	ldrb	r0, [r0]
    824c:	cmp	r0, #57	; 0x39
    8250:	bgt	829c <decode_escaped_string+0x384>
    8254:	ldr	r0, [sp, #8]
    8258:	add	r0, r0, #1
    825c:	str	r0, [sp, #8]
    8260:	ldr	r0, [sp, #12]
    8264:	ldr	r1, [sp, #4]
    8268:	ldrb	r0, [r0, r1]
    826c:	mov	r1, r0
    8270:	lsl	r0, r0, #3
    8274:	ldr	r2, [sp, #12]
    8278:	ldr	r3, [sp, #8]
    827c:	add	r2, r2, r3
    8280:	ldrb	r2, [r2]
    8284:	sub	r2, r2, #48	; 0x30
    8288:	add	r0, r0, r2
    828c:	ldr	r2, [sp, #12]
    8290:	ldr	r3, [sp, #4]
    8294:	add	r2, r2, r3
    8298:	strb	r0, [r2]
    829c:	b	82a0 <decode_escaped_string+0x388>
    82a0:	ldr	r0, [sp, #4]
    82a4:	add	r0, r0, #1
    82a8:	str	r0, [sp, #4]
    82ac:	b	82d8 <decode_escaped_string+0x3c0>
    82b0:	ldr	r0, [sp, #12]
    82b4:	ldr	r1, [sp, #8]
    82b8:	add	r0, r0, r1
    82bc:	ldrb	r0, [r0]
    82c0:	ldr	r1, [sp, #12]
    82c4:	ldr	r2, [sp, #4]
    82c8:	add	r3, r2, #1
    82cc:	str	r3, [sp, #4]
    82d0:	add	r1, r1, r2
    82d4:	strb	r0, [r1]
    82d8:	ldr	r0, [sp, #8]
    82dc:	add	r0, r0, #1
    82e0:	str	r0, [sp, #8]
    82e4:	b	7f48 <decode_escaped_string+0x30>
    82e8:	ldr	r0, [sp, #12]
    82ec:	ldr	r1, [sp, #4]
    82f0:	add	r0, r0, r1
    82f4:	movw	r1, #0
    82f8:	strb	r1, [r0]
    82fc:	ldr	r0, [sp, #4]
    8300:	str	r0, [sp, #16]
    8304:	ldr	r0, [sp, #16]
    8308:	add	sp, sp, #20
    830c:	bx	lr

00008310 <cd_complex_set_type>:
    8310:	push	{fp, lr}
    8314:	mov	fp, sp
    8318:	sub	sp, sp, #8
    831c:	str	r0, [sp, #4]
    8320:	ldr	r0, [sp, #4]
    8324:	ldr	r0, [r0]
    8328:	ldr	r0, [r0, #396]	; 0x18c
    832c:	ldr	r0, [r0, #8]
    8330:	ldr	r1, [sp, #4]
    8334:	ldr	r1, [r1]
    8338:	ldr	r1, [r1, #8]
    833c:	bl	0 <coda_type_complex_set_type>
    8340:	mov	sp, fp
    8344:	pop	{fp, pc}

00008348 <cd_complex_finalise>:
    8348:	push	{fp, lr}
    834c:	mov	fp, sp
    8350:	sub	sp, sp, #8
    8354:	str	r0, [sp, #4]
    8358:	ldr	r0, [sp, #4]
    835c:	ldr	r0, [r0]
    8360:	ldr	r0, [r0, #8]
    8364:	bl	0 <coda_type_complex_validate>
    8368:	mov	sp, fp
    836c:	pop	{fp, pc}

00008370 <cd_float_set_unit>:
    8370:	push	{fp, lr}
    8374:	mov	fp, sp
    8378:	sub	sp, sp, #8
    837c:	str	r0, [sp]
    8380:	ldr	r0, [sp]
    8384:	ldr	r0, [r0]
    8388:	ldr	r0, [r0, #12]
    838c:	movw	r1, #0
    8390:	cmp	r0, r1
    8394:	bne	83bc <cd_float_set_unit+0x4c>
    8398:	ldr	r0, [sp]
    839c:	ldr	r0, [r0]
    83a0:	ldr	r0, [r0, #396]	; 0x18c
    83a4:	ldr	r0, [r0, #8]
    83a8:	movw	r1, #0
    83ac:	movt	r1, #0
    83b0:	bl	0 <coda_type_number_set_unit>
    83b4:	str	r0, [sp, #4]
    83b8:	b	83e0 <cd_float_set_unit+0x70>
    83bc:	ldr	r0, [sp]
    83c0:	ldr	r0, [r0]
    83c4:	ldr	r0, [r0, #396]	; 0x18c
    83c8:	ldr	r0, [r0, #8]
    83cc:	ldr	r1, [sp]
    83d0:	ldr	r1, [r1]
    83d4:	ldr	r1, [r1, #12]
    83d8:	bl	0 <coda_type_number_set_unit>
    83dc:	str	r0, [sp, #4]
    83e0:	ldr	r0, [sp, #4]
    83e4:	mov	sp, fp
    83e8:	pop	{fp, pc}

000083ec <cd_native_type_init>:
    83ec:	sub	sp, sp, #8
    83f0:	str	r0, [sp, #4]
    83f4:	str	r1, [sp]
    83f8:	ldr	r0, [sp, #4]
    83fc:	ldr	r0, [r0]
    8400:	movw	r1, #1
    8404:	str	r1, [r0, #32]
    8408:	ldr	r0, [sp, #4]
    840c:	ldr	r0, [r0]
    8410:	movw	r1, #0
    8414:	movt	r1, #0
    8418:	str	r1, [r0, #36]	; 0x24
    841c:	movw	r0, #0
    8420:	add	sp, sp, #8
    8424:	bx	lr

00008428 <cd_float_set_read_type>:
    8428:	push	{fp, lr}
    842c:	mov	fp, sp
    8430:	sub	sp, sp, #8
    8434:	str	r0, [sp, #4]
    8438:	ldr	r0, [sp, #4]
    843c:	ldr	r0, [r0]
    8440:	ldr	r1, [r0, #16]
    8444:	ldr	r0, [r0, #396]	; 0x18c
    8448:	ldr	r0, [r0, #8]
    844c:	bl	0 <coda_type_set_read_type>
    8450:	mov	sp, fp
    8454:	pop	{fp, pc}

00008458 <cd_conversion_init>:
    8458:	push	{fp, lr}
    845c:	mov	fp, sp
    8460:	sub	sp, sp, #96	; 0x60
    8464:	vldr	d16, [pc, #676]	; 8710 <cd_conversion_init+0x2b8>
    8468:	str	r0, [fp, #-8]
    846c:	str	r1, [fp, #-12]
    8470:	vstr	d16, [sp, #40]	; 0x28
    8474:	bl	0 <coda_NaN>
    8478:	vstr	d0, [sp, #32]
    847c:	ldr	r0, [fp, #-12]
    8480:	ldr	r1, [fp, #-8]
    8484:	ldr	r1, [r1]
    8488:	ldr	r2, [r1]
    848c:	movw	r1, #0
    8490:	movt	r1, #0
    8494:	bl	20e4 <get_mandatory_attribute_value>
    8498:	str	r0, [fp, #-16]
    849c:	ldr	r0, [fp, #-16]
    84a0:	movw	r1, #0
    84a4:	cmp	r0, r1
    84a8:	bne	84b8 <cd_conversion_init+0x60>
    84ac:	mvn	r0, #0
    84b0:	str	r0, [fp, #-4]
    84b4:	b	8700 <cd_conversion_init+0x2a8>
    84b8:	ldr	r0, [fp, #-12]
    84bc:	ldr	r1, [fp, #-8]
    84c0:	ldr	r1, [r1]
    84c4:	ldr	r2, [r1]
    84c8:	movw	r1, #0
    84cc:	movt	r1, #0
    84d0:	bl	20e4 <get_mandatory_attribute_value>
    84d4:	str	r0, [fp, #-20]	; 0xffffffec
    84d8:	ldr	r0, [fp, #-20]	; 0xffffffec
    84dc:	movw	r1, #0
    84e0:	cmp	r0, r1
    84e4:	bne	84f4 <cd_conversion_init+0x9c>
    84e8:	mvn	r0, #0
    84ec:	str	r0, [fp, #-4]
    84f0:	b	8700 <cd_conversion_init+0x2a8>
    84f4:	ldr	r0, [fp, #-16]
    84f8:	ldr	r1, [fp, #-16]
    84fc:	str	r0, [sp, #28]
    8500:	mov	r0, r1
    8504:	bl	0 <strlen>
    8508:	ldr	r1, [sp, #28]
    850c:	str	r0, [sp, #24]
    8510:	mov	r0, r1
    8514:	ldr	r1, [sp, #24]
    8518:	sub	r2, fp, #40	; 0x28
    851c:	movw	r3, #1
    8520:	bl	0 <coda_ascii_parse_double>
    8524:	cmp	r0, #0
    8528:	bge	854c <cd_conversion_init+0xf4>
    852c:	ldr	r0, [pc, #484]	; 8718 <cd_conversion_init+0x2c0>
    8530:	ldr	r2, [fp, #-16]
    8534:	movw	r1, #0
    8538:	movt	r1, #0
    853c:	bl	0 <coda_set_error>
    8540:	mvn	r0, #0
    8544:	str	r0, [fp, #-4]
    8548:	b	8700 <cd_conversion_init+0x2a8>
    854c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8550:	ldr	r1, [fp, #-20]	; 0xffffffec
    8554:	str	r0, [sp, #20]
    8558:	mov	r0, r1
    855c:	bl	0 <strlen>
    8560:	ldr	r1, [sp, #20]
    8564:	str	r0, [sp, #16]
    8568:	mov	r0, r1
    856c:	ldr	r1, [sp, #16]
    8570:	add	r2, sp, #48	; 0x30
    8574:	movw	r3, #1
    8578:	bl	0 <coda_ascii_parse_double>
    857c:	cmp	r0, #0
    8580:	bge	85a4 <cd_conversion_init+0x14c>
    8584:	ldr	r0, [pc, #396]	; 8718 <cd_conversion_init+0x2c0>
    8588:	ldr	r2, [fp, #-20]	; 0xffffffec
    858c:	movw	r1, #0
    8590:	movt	r1, #0
    8594:	bl	0 <coda_set_error>
    8598:	mvn	r0, #0
    859c:	str	r0, [fp, #-4]
    85a0:	b	8700 <cd_conversion_init+0x2a8>
    85a4:	ldr	r0, [fp, #-12]
    85a8:	movw	r1, #0
    85ac:	movt	r1, #0
    85b0:	bl	24f4 <get_attribute_value>
    85b4:	str	r0, [fp, #-24]	; 0xffffffe8
    85b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    85bc:	movw	r1, #0
    85c0:	cmp	r0, r1
    85c4:	beq	8624 <cd_conversion_init+0x1cc>
    85c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    85cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    85d0:	str	r0, [sp, #12]
    85d4:	mov	r0, r1
    85d8:	bl	0 <strlen>
    85dc:	ldr	r1, [sp, #12]
    85e0:	str	r0, [sp, #8]
    85e4:	mov	r0, r1
    85e8:	ldr	r1, [sp, #8]
    85ec:	add	r2, sp, #40	; 0x28
    85f0:	movw	r3, #1
    85f4:	bl	0 <coda_ascii_parse_double>
    85f8:	cmp	r0, #0
    85fc:	bge	8620 <cd_conversion_init+0x1c8>
    8600:	ldr	r0, [pc, #272]	; 8718 <cd_conversion_init+0x2c0>
    8604:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8608:	movw	r1, #0
    860c:	movt	r1, #0
    8610:	bl	0 <coda_set_error>
    8614:	mvn	r0, #0
    8618:	str	r0, [fp, #-4]
    861c:	b	8700 <cd_conversion_init+0x2a8>
    8620:	b	8624 <cd_conversion_init+0x1cc>
    8624:	ldr	r0, [fp, #-12]
    8628:	movw	r1, #0
    862c:	movt	r1, #0
    8630:	bl	24f4 <get_attribute_value>
    8634:	str	r0, [fp, #-28]	; 0xffffffe4
    8638:	ldr	r0, [fp, #-28]	; 0xffffffe4
    863c:	movw	r1, #0
    8640:	cmp	r0, r1
    8644:	beq	86a4 <cd_conversion_init+0x24c>
    8648:	ldr	r0, [fp, #-28]	; 0xffffffe4
    864c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8650:	str	r0, [sp, #4]
    8654:	mov	r0, r1
    8658:	bl	0 <strlen>
    865c:	ldr	r1, [sp, #4]
    8660:	str	r0, [sp]
    8664:	mov	r0, r1
    8668:	ldr	r1, [sp]
    866c:	add	r2, sp, #32
    8670:	movw	r3, #1
    8674:	bl	0 <coda_ascii_parse_double>
    8678:	cmp	r0, #0
    867c:	bge	86a0 <cd_conversion_init+0x248>
    8680:	ldr	r0, [pc, #144]	; 8718 <cd_conversion_init+0x2c0>
    8684:	ldr	r2, [fp, #-28]	; 0xffffffe4
    8688:	movw	r1, #0
    868c:	movt	r1, #0
    8690:	bl	0 <coda_set_error>
    8694:	mvn	r0, #0
    8698:	str	r0, [fp, #-4]
    869c:	b	8700 <cd_conversion_init+0x2a8>
    86a0:	b	86a4 <cd_conversion_init+0x24c>
    86a4:	movw	r0, #0
    86a8:	movt	r0, #0
    86ac:	ldr	r1, [fp, #-8]
    86b0:	ldr	r1, [r1]
    86b4:	str	r0, [r1, #40]	; 0x28
    86b8:	vldr	d0, [fp, #-40]	; 0xffffffd8
    86bc:	vldr	d1, [sp, #48]	; 0x30
    86c0:	vldr	d2, [sp, #40]	; 0x28
    86c4:	vldr	d3, [sp, #32]
    86c8:	bl	0 <coda_conversion_new>
    86cc:	ldr	r1, [fp, #-8]
    86d0:	ldr	r1, [r1]
    86d4:	str	r0, [r1, #8]
    86d8:	ldr	r0, [fp, #-8]
    86dc:	ldr	r0, [r0]
    86e0:	movw	r1, #41	; 0x29
    86e4:	movw	r2, #0
    86e8:	movt	r2, #0
    86ec:	movw	r3, #0
    86f0:	movt	r3, #0
    86f4:	bl	1344 <register_sub_element>
    86f8:	movw	r0, #0
    86fc:	str	r0, [fp, #-4]
    8700:	ldr	r0, [fp, #-4]
    8704:	mov	sp, fp
    8708:	pop	{fp, pc}
    870c:	nop	{0}
	...
    8718:	.word	0xfffffe70

0000871c <cd_float_set_conversion>:
    871c:	push	{fp, lr}
    8720:	mov	fp, sp
    8724:	sub	sp, sp, #8
    8728:	str	r0, [sp]
    872c:	ldr	r0, [sp]
    8730:	ldr	r0, [r0]
    8734:	ldr	r0, [r0, #396]	; 0x18c
    8738:	ldr	r0, [r0, #8]
    873c:	ldr	r1, [sp]
    8740:	ldr	r1, [r1]
    8744:	ldr	r1, [r1, #8]
    8748:	bl	0 <coda_type_number_set_conversion>
    874c:	cmp	r0, #0
    8750:	beq	8760 <cd_float_set_conversion+0x44>
    8754:	mvn	r0, #0
    8758:	str	r0, [sp, #4]
    875c:	b	8774 <cd_float_set_conversion+0x58>
    8760:	ldr	r0, [sp]
    8764:	ldr	r0, [r0]
    8768:	movw	r1, #0
    876c:	str	r1, [r0, #8]
    8770:	str	r1, [sp, #4]
    8774:	ldr	r0, [sp, #4]
    8778:	mov	sp, fp
    877c:	pop	{fp, pc}

00008780 <integer_constant_or_expression_init>:
    8780:	sub	sp, sp, #8
    8784:	movw	r2, #0
    8788:	movt	r2, #0
    878c:	str	r0, [sp, #4]
    8790:	str	r1, [sp]
    8794:	ldr	r0, [sp, #4]
    8798:	ldr	r0, [r0]
    879c:	movw	r1, #1
    87a0:	str	r1, [r0, #32]
    87a4:	ldr	r0, [sp, #4]
    87a8:	ldr	r0, [r0]
    87ac:	str	r2, [r0, #40]	; 0x28
    87b0:	ldr	r0, [sp, #4]
    87b4:	ldr	r0, [r0]
    87b8:	movw	r1, #0
    87bc:	movt	r1, #0
    87c0:	str	r1, [r0, #36]	; 0x24
    87c4:	movw	r0, #0
    87c8:	add	sp, sp, #8
    87cc:	bx	lr

000087d0 <type_set_bit_size>:
    87d0:	push	{fp, lr}
    87d4:	mov	fp, sp
    87d8:	sub	sp, sp, #8
    87dc:	str	r0, [sp]
    87e0:	ldr	r0, [sp]
    87e4:	ldr	r0, [r0]
    87e8:	ldr	r0, [r0, #8]
    87ec:	movw	r1, #0
    87f0:	cmp	r0, r1
    87f4:	beq	8840 <type_set_bit_size+0x70>
    87f8:	ldr	r0, [sp]
    87fc:	ldr	r0, [r0]
    8800:	ldr	r0, [r0, #396]	; 0x18c
    8804:	ldr	r0, [r0, #8]
    8808:	ldr	r1, [sp]
    880c:	ldr	r1, [r1]
    8810:	ldr	r1, [r1, #8]
    8814:	bl	0 <coda_type_set_bit_size_expression>
    8818:	cmp	r0, #0
    881c:	beq	882c <type_set_bit_size+0x5c>
    8820:	mvn	r0, #0
    8824:	str	r0, [sp, #4]
    8828:	b	8880 <type_set_bit_size+0xb0>
    882c:	ldr	r0, [sp]
    8830:	ldr	r0, [r0]
    8834:	movw	r1, #0
    8838:	str	r1, [r0, #8]
    883c:	b	8878 <type_set_bit_size+0xa8>
    8840:	ldr	r0, [sp]
    8844:	ldr	r0, [r0]
    8848:	ldr	r1, [r0, #16]
    884c:	ldr	r0, [r0, #396]	; 0x18c
    8850:	ldr	r0, [r0, #8]
    8854:	asr	r3, r1, #31
    8858:	mov	r2, r1
    885c:	bl	0 <coda_type_set_bit_size>
    8860:	cmp	r0, #0
    8864:	beq	8874 <type_set_bit_size+0xa4>
    8868:	mvn	r0, #0
    886c:	str	r0, [sp, #4]
    8870:	b	8880 <type_set_bit_size+0xb0>
    8874:	b	8878 <type_set_bit_size+0xa8>
    8878:	movw	r0, #0
    887c:	str	r0, [sp, #4]
    8880:	ldr	r0, [sp, #4]
    8884:	mov	sp, fp
    8888:	pop	{fp, pc}

0000888c <type_set_byte_size>:
    888c:	push	{fp, lr}
    8890:	mov	fp, sp
    8894:	sub	sp, sp, #8
    8898:	str	r0, [sp]
    889c:	ldr	r0, [sp]
    88a0:	ldr	r0, [r0]
    88a4:	ldr	r0, [r0, #8]
    88a8:	movw	r1, #0
    88ac:	cmp	r0, r1
    88b0:	beq	88fc <type_set_byte_size+0x70>
    88b4:	ldr	r0, [sp]
    88b8:	ldr	r0, [r0]
    88bc:	ldr	r0, [r0, #396]	; 0x18c
    88c0:	ldr	r0, [r0, #8]
    88c4:	ldr	r1, [sp]
    88c8:	ldr	r1, [r1]
    88cc:	ldr	r1, [r1, #8]
    88d0:	bl	0 <coda_type_set_byte_size_expression>
    88d4:	cmp	r0, #0
    88d8:	beq	88e8 <type_set_byte_size+0x5c>
    88dc:	mvn	r0, #0
    88e0:	str	r0, [sp, #4]
    88e4:	b	893c <type_set_byte_size+0xb0>
    88e8:	ldr	r0, [sp]
    88ec:	ldr	r0, [r0]
    88f0:	movw	r1, #0
    88f4:	str	r1, [r0, #8]
    88f8:	b	8934 <type_set_byte_size+0xa8>
    88fc:	ldr	r0, [sp]
    8900:	ldr	r0, [r0]
    8904:	ldr	r1, [r0, #16]
    8908:	ldr	r0, [r0, #396]	; 0x18c
    890c:	ldr	r0, [r0, #8]
    8910:	asr	r3, r1, #31
    8914:	mov	r2, r1
    8918:	bl	0 <coda_type_set_byte_size>
    891c:	cmp	r0, #0
    8920:	beq	8930 <type_set_byte_size+0xa4>
    8924:	mvn	r0, #0
    8928:	str	r0, [sp, #4]
    892c:	b	893c <type_set_byte_size+0xb0>
    8930:	b	8934 <type_set_byte_size+0xa8>
    8934:	movw	r0, #0
    8938:	str	r0, [sp, #4]
    893c:	ldr	r0, [sp, #4]
    8940:	mov	sp, fp
    8944:	pop	{fp, pc}

00008948 <cd_float_set_little_endian>:
    8948:	push	{fp, lr}
    894c:	mov	fp, sp
    8950:	sub	sp, sp, #8
    8954:	str	r0, [sp, #4]
    8958:	ldr	r0, [sp, #4]
    895c:	ldr	r0, [r0]
    8960:	ldr	r0, [r0, #396]	; 0x18c
    8964:	ldr	r0, [r0, #8]
    8968:	movw	r1, #1
    896c:	bl	0 <coda_type_number_set_endianness>
    8970:	mov	sp, fp
    8974:	pop	{fp, pc}

00008978 <cd_mapping_init>:
    8978:	push	{fp, lr}
    897c:	mov	fp, sp
    8980:	sub	sp, sp, #48	; 0x30
    8984:	str	r0, [fp, #-8]
    8988:	str	r1, [fp, #-12]
    898c:	ldr	r0, [fp, #-12]
    8990:	ldr	r1, [fp, #-8]
    8994:	ldr	r1, [r1]
    8998:	ldr	r2, [r1]
    899c:	movw	r1, #0
    89a0:	movt	r1, #0
    89a4:	bl	20e4 <get_mandatory_attribute_value>
    89a8:	str	r0, [fp, #-16]
    89ac:	ldr	r0, [fp, #-16]
    89b0:	movw	r1, #0
    89b4:	cmp	r0, r1
    89b8:	bne	89c8 <cd_mapping_init+0x50>
    89bc:	mvn	r0, #0
    89c0:	str	r0, [fp, #-4]
    89c4:	b	8c48 <cd_mapping_init+0x2d0>
    89c8:	ldr	r0, [fp, #-12]
    89cc:	ldr	r1, [fp, #-8]
    89d0:	ldr	r1, [r1]
    89d4:	ldr	r2, [r1]
    89d8:	movw	r1, #0
    89dc:	movt	r1, #0
    89e0:	bl	20e4 <get_mandatory_attribute_value>
    89e4:	str	r0, [fp, #-20]	; 0xffffffec
    89e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    89ec:	movw	r1, #0
    89f0:	cmp	r0, r1
    89f4:	bne	8a04 <cd_mapping_init+0x8c>
    89f8:	mvn	r0, #0
    89fc:	str	r0, [fp, #-4]
    8a00:	b	8c48 <cd_mapping_init+0x2d0>
    8a04:	ldr	r0, [fp, #-8]
    8a08:	ldr	r0, [r0]
    8a0c:	ldr	r0, [r0, #396]	; 0x18c
    8a10:	ldr	r0, [r0]
    8a14:	cmp	r0, #20
    8a18:	bne	8acc <cd_mapping_init+0x154>
    8a1c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8a20:	ldr	r1, [fp, #-20]	; 0xffffffec
    8a24:	str	r0, [sp, #4]
    8a28:	mov	r0, r1
    8a2c:	bl	0 <strlen>
    8a30:	ldr	r1, [sp, #4]
    8a34:	str	r0, [sp]
    8a38:	mov	r0, r1
    8a3c:	ldr	r1, [sp]
    8a40:	add	r2, sp, #16
    8a44:	movw	r3, #0
    8a48:	bl	0 <coda_ascii_parse_int64>
    8a4c:	cmp	r0, #0
    8a50:	bge	8a74 <cd_mapping_init+0xfc>
    8a54:	ldr	r0, [pc, #504]	; 8c54 <cd_mapping_init+0x2dc>
    8a58:	ldr	r2, [fp, #-20]	; 0xffffffec
    8a5c:	movw	r1, #0
    8a60:	movt	r1, #0
    8a64:	bl	0 <coda_set_error>
    8a68:	mvn	r0, #0
    8a6c:	str	r0, [fp, #-4]
    8a70:	b	8c48 <cd_mapping_init+0x2d0>
    8a74:	ldr	r0, [fp, #-8]
    8a78:	ldr	r0, [r0]
    8a7c:	movw	r1, #0
    8a80:	movt	r1, #0
    8a84:	str	r1, [r0, #40]	; 0x28
    8a88:	ldr	r0, [fp, #-16]
    8a8c:	ldr	r2, [sp, #16]
    8a90:	ldr	r3, [sp, #20]
    8a94:	bl	0 <coda_ascii_integer_mapping_new>
    8a98:	ldr	r1, [fp, #-8]
    8a9c:	ldr	r1, [r1]
    8aa0:	str	r0, [r1, #8]
    8aa4:	ldr	r0, [fp, #-8]
    8aa8:	ldr	r0, [r0]
    8aac:	ldr	r0, [r0, #8]
    8ab0:	movw	r1, #0
    8ab4:	cmp	r0, r1
    8ab8:	bne	8ac8 <cd_mapping_init+0x150>
    8abc:	mvn	r0, #0
    8ac0:	str	r0, [fp, #-4]
    8ac4:	b	8c48 <cd_mapping_init+0x2d0>
    8ac8:	b	8c40 <cd_mapping_init+0x2c8>
    8acc:	ldr	r0, [fp, #-8]
    8ad0:	ldr	r0, [r0]
    8ad4:	ldr	r0, [r0, #396]	; 0x18c
    8ad8:	ldr	r0, [r0]
    8adc:	cmp	r0, #17
    8ae0:	beq	8afc <cd_mapping_init+0x184>
    8ae4:	ldr	r0, [fp, #-8]
    8ae8:	ldr	r0, [r0]
    8aec:	ldr	r0, [r0, #396]	; 0x18c
    8af0:	ldr	r0, [r0]
    8af4:	cmp	r0, #38	; 0x26
    8af8:	bne	8c1c <cd_mapping_init+0x2a4>
    8afc:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b00:	movw	r1, #0
    8b04:	movt	r1, #0
    8b08:	bl	0 <strcasecmp>
    8b0c:	cmp	r0, #0
    8b10:	bne	8b20 <cd_mapping_init+0x1a8>
    8b14:	bl	0 <coda_NaN>
    8b18:	vstr	d0, [sp, #8]
    8b1c:	b	8bc8 <cd_mapping_init+0x250>
    8b20:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b24:	movw	r1, #0
    8b28:	movt	r1, #0
    8b2c:	bl	0 <strcasecmp>
    8b30:	cmp	r0, #0
    8b34:	beq	8b50 <cd_mapping_init+0x1d8>
    8b38:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b3c:	movw	r1, #0
    8b40:	movt	r1, #0
    8b44:	bl	0 <strcasecmp>
    8b48:	cmp	r0, #0
    8b4c:	bne	8b5c <cd_mapping_init+0x1e4>
    8b50:	bl	0 <coda_PlusInf>
    8b54:	vstr	d0, [sp, #8]
    8b58:	b	8bc4 <cd_mapping_init+0x24c>
    8b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b60:	movw	r1, #0
    8b64:	movt	r1, #0
    8b68:	bl	0 <strcasecmp>
    8b6c:	cmp	r0, #0
    8b70:	bne	8b80 <cd_mapping_init+0x208>
    8b74:	bl	0 <coda_MinInf>
    8b78:	vstr	d0, [sp, #8]
    8b7c:	b	8bc0 <cd_mapping_init+0x248>
    8b80:	ldr	r0, [fp, #-20]	; 0xffffffec
    8b84:	movw	r1, #0
    8b88:	movt	r1, #0
    8b8c:	add	r2, sp, #8
    8b90:	bl	0 <__isoc99_sscanf>
    8b94:	cmp	r0, #1
    8b98:	beq	8bbc <cd_mapping_init+0x244>
    8b9c:	ldr	r0, [pc, #176]	; 8c54 <cd_mapping_init+0x2dc>
    8ba0:	ldr	r2, [fp, #-20]	; 0xffffffec
    8ba4:	movw	r1, #0
    8ba8:	movt	r1, #0
    8bac:	bl	0 <coda_set_error>
    8bb0:	mvn	r0, #0
    8bb4:	str	r0, [fp, #-4]
    8bb8:	b	8c48 <cd_mapping_init+0x2d0>
    8bbc:	b	8bc0 <cd_mapping_init+0x248>
    8bc0:	b	8bc4 <cd_mapping_init+0x24c>
    8bc4:	b	8bc8 <cd_mapping_init+0x250>
    8bc8:	movw	r0, #0
    8bcc:	movt	r0, #0
    8bd0:	ldr	r1, [fp, #-8]
    8bd4:	ldr	r1, [r1]
    8bd8:	str	r0, [r1, #40]	; 0x28
    8bdc:	ldr	r0, [fp, #-16]
    8be0:	vldr	d0, [sp, #8]
    8be4:	bl	0 <coda_ascii_float_mapping_new>
    8be8:	ldr	r1, [fp, #-8]
    8bec:	ldr	r1, [r1]
    8bf0:	str	r0, [r1, #8]
    8bf4:	ldr	r0, [fp, #-8]
    8bf8:	ldr	r0, [r0]
    8bfc:	ldr	r0, [r0, #8]
    8c00:	movw	r1, #0
    8c04:	cmp	r0, r1
    8c08:	bne	8c18 <cd_mapping_init+0x2a0>
    8c0c:	mvn	r0, #0
    8c10:	str	r0, [fp, #-4]
    8c14:	b	8c48 <cd_mapping_init+0x2d0>
    8c18:	b	8c3c <cd_mapping_init+0x2c4>
    8c1c:	movw	r0, #0
    8c20:	movt	r0, #0
    8c24:	movw	r1, #0
    8c28:	movt	r1, #0
    8c2c:	movw	r2, #2040	; 0x7f8
    8c30:	movw	r3, #0
    8c34:	movt	r3, #0
    8c38:	bl	0 <__assert_fail>
    8c3c:	b	8c40 <cd_mapping_init+0x2c8>
    8c40:	movw	r0, #0
    8c44:	str	r0, [fp, #-4]
    8c48:	ldr	r0, [fp, #-4]
    8c4c:	mov	sp, fp
    8c50:	pop	{fp, pc}
    8c54:	.word	0xfffffe70

00008c58 <cd_float_add_mapping>:
    8c58:	push	{fp, lr}
    8c5c:	mov	fp, sp
    8c60:	sub	sp, sp, #8
    8c64:	str	r0, [sp]
    8c68:	ldr	r0, [sp]
    8c6c:	ldr	r0, [r0]
    8c70:	ldr	r0, [r0, #396]	; 0x18c
    8c74:	ldr	r0, [r0, #8]
    8c78:	ldr	r1, [sp]
    8c7c:	ldr	r1, [r1]
    8c80:	ldr	r1, [r1, #8]
    8c84:	bl	0 <coda_type_number_add_ascii_float_mapping>
    8c88:	cmp	r0, #0
    8c8c:	beq	8c9c <cd_float_add_mapping+0x44>
    8c90:	mvn	r0, #0
    8c94:	str	r0, [sp, #4]
    8c98:	b	8cb0 <cd_float_add_mapping+0x58>
    8c9c:	ldr	r0, [sp]
    8ca0:	ldr	r0, [r0]
    8ca4:	movw	r1, #0
    8ca8:	str	r1, [r0, #8]
    8cac:	str	r1, [sp, #4]
    8cb0:	ldr	r0, [sp, #4]
    8cb4:	mov	sp, fp
    8cb8:	pop	{fp, pc}

00008cbc <cd_float_finalise>:
    8cbc:	push	{fp, lr}
    8cc0:	mov	fp, sp
    8cc4:	sub	sp, sp, #8
    8cc8:	str	r0, [sp, #4]
    8ccc:	ldr	r0, [sp, #4]
    8cd0:	ldr	r0, [r0]
    8cd4:	ldr	r0, [r0, #8]
    8cd8:	bl	0 <coda_type_number_validate>
    8cdc:	mov	sp, fp
    8ce0:	pop	{fp, pc}

00008ce4 <cd_native_type_finalise>:
    8ce4:	push	{fp, lr}
    8ce8:	mov	fp, sp
    8cec:	sub	sp, sp, #8
    8cf0:	str	r0, [sp]
    8cf4:	ldr	r0, [sp]
    8cf8:	ldr	r0, [r0]
    8cfc:	ldr	r0, [r0, #12]
    8d00:	movw	r1, #0
    8d04:	cmp	r0, r1
    8d08:	bne	8d28 <cd_native_type_finalise+0x44>
    8d0c:	ldr	r0, [pc, #892]	; 9090 <cd_native_type_finalise+0x3ac>
    8d10:	movw	r1, #0
    8d14:	movt	r1, #0
    8d18:	bl	0 <coda_set_error>
    8d1c:	mvn	r0, #0
    8d20:	str	r0, [sp, #4]
    8d24:	b	9084 <cd_native_type_finalise+0x3a0>
    8d28:	ldr	r0, [sp]
    8d2c:	ldr	r0, [r0]
    8d30:	ldr	r0, [r0, #12]
    8d34:	movw	r1, #0
    8d38:	movt	r1, #0
    8d3c:	bl	0 <strcmp>
    8d40:	cmp	r0, #0
    8d44:	bne	8d60 <cd_native_type_finalise+0x7c>
    8d48:	ldr	r0, [sp]
    8d4c:	ldr	r0, [r0]
    8d50:	mov	r1, #0
    8d54:	str	r1, [r0, #20]
    8d58:	str	r1, [r0, #16]
    8d5c:	b	907c <cd_native_type_finalise+0x398>
    8d60:	ldr	r0, [sp]
    8d64:	ldr	r0, [r0]
    8d68:	ldr	r0, [r0, #12]
    8d6c:	movw	r1, #0
    8d70:	movt	r1, #0
    8d74:	bl	0 <strcmp>
    8d78:	cmp	r0, #0
    8d7c:	bne	8d9c <cd_native_type_finalise+0xb8>
    8d80:	ldr	r0, [sp]
    8d84:	ldr	r0, [r0]
    8d88:	mov	r1, #0
    8d8c:	str	r1, [r0, #20]
    8d90:	mov	r1, #2
    8d94:	str	r1, [r0, #16]
    8d98:	b	9078 <cd_native_type_finalise+0x394>
    8d9c:	ldr	r0, [sp]
    8da0:	ldr	r0, [r0]
    8da4:	ldr	r0, [r0, #12]
    8da8:	movw	r1, #0
    8dac:	movt	r1, #0
    8db0:	bl	0 <strcmp>
    8db4:	cmp	r0, #0
    8db8:	bne	8dd8 <cd_native_type_finalise+0xf4>
    8dbc:	ldr	r0, [sp]
    8dc0:	ldr	r0, [r0]
    8dc4:	mov	r1, #0
    8dc8:	str	r1, [r0, #20]
    8dcc:	mov	r1, #4
    8dd0:	str	r1, [r0, #16]
    8dd4:	b	9074 <cd_native_type_finalise+0x390>
    8dd8:	ldr	r0, [sp]
    8ddc:	ldr	r0, [r0]
    8de0:	ldr	r0, [r0, #12]
    8de4:	movw	r1, #0
    8de8:	movt	r1, #0
    8dec:	bl	0 <strcmp>
    8df0:	cmp	r0, #0
    8df4:	bne	8e14 <cd_native_type_finalise+0x130>
    8df8:	ldr	r0, [sp]
    8dfc:	ldr	r0, [r0]
    8e00:	mov	r1, #0
    8e04:	str	r1, [r0, #20]
    8e08:	mov	r1, #6
    8e0c:	str	r1, [r0, #16]
    8e10:	b	9070 <cd_native_type_finalise+0x38c>
    8e14:	ldr	r0, [sp]
    8e18:	ldr	r0, [r0]
    8e1c:	ldr	r0, [r0, #12]
    8e20:	movw	r1, #0
    8e24:	movt	r1, #0
    8e28:	bl	0 <strcmp>
    8e2c:	cmp	r0, #0
    8e30:	bne	8e50 <cd_native_type_finalise+0x16c>
    8e34:	ldr	r0, [sp]
    8e38:	ldr	r0, [r0]
    8e3c:	mov	r1, #0
    8e40:	str	r1, [r0, #20]
    8e44:	mov	r1, #1
    8e48:	str	r1, [r0, #16]
    8e4c:	b	906c <cd_native_type_finalise+0x388>
    8e50:	ldr	r0, [sp]
    8e54:	ldr	r0, [r0]
    8e58:	ldr	r0, [r0, #12]
    8e5c:	movw	r1, #0
    8e60:	movt	r1, #0
    8e64:	bl	0 <strcmp>
    8e68:	cmp	r0, #0
    8e6c:	bne	8e8c <cd_native_type_finalise+0x1a8>
    8e70:	ldr	r0, [sp]
    8e74:	ldr	r0, [r0]
    8e78:	mov	r1, #0
    8e7c:	str	r1, [r0, #20]
    8e80:	mov	r1, #3
    8e84:	str	r1, [r0, #16]
    8e88:	b	9068 <cd_native_type_finalise+0x384>
    8e8c:	ldr	r0, [sp]
    8e90:	ldr	r0, [r0]
    8e94:	ldr	r0, [r0, #12]
    8e98:	movw	r1, #0
    8e9c:	movt	r1, #0
    8ea0:	bl	0 <strcmp>
    8ea4:	cmp	r0, #0
    8ea8:	bne	8ec8 <cd_native_type_finalise+0x1e4>
    8eac:	ldr	r0, [sp]
    8eb0:	ldr	r0, [r0]
    8eb4:	mov	r1, #0
    8eb8:	str	r1, [r0, #20]
    8ebc:	mov	r1, #5
    8ec0:	str	r1, [r0, #16]
    8ec4:	b	9064 <cd_native_type_finalise+0x380>
    8ec8:	ldr	r0, [sp]
    8ecc:	ldr	r0, [r0]
    8ed0:	ldr	r0, [r0, #12]
    8ed4:	movw	r1, #0
    8ed8:	movt	r1, #0
    8edc:	bl	0 <strcmp>
    8ee0:	cmp	r0, #0
    8ee4:	bne	8f04 <cd_native_type_finalise+0x220>
    8ee8:	ldr	r0, [sp]
    8eec:	ldr	r0, [r0]
    8ef0:	mov	r1, #0
    8ef4:	str	r1, [r0, #20]
    8ef8:	mov	r1, #7
    8efc:	str	r1, [r0, #16]
    8f00:	b	9060 <cd_native_type_finalise+0x37c>
    8f04:	ldr	r0, [sp]
    8f08:	ldr	r0, [r0]
    8f0c:	ldr	r0, [r0, #12]
    8f10:	movw	r1, #0
    8f14:	movt	r1, #0
    8f18:	bl	0 <strcmp>
    8f1c:	cmp	r0, #0
    8f20:	bne	8f40 <cd_native_type_finalise+0x25c>
    8f24:	ldr	r0, [sp]
    8f28:	ldr	r0, [r0]
    8f2c:	mov	r1, #0
    8f30:	str	r1, [r0, #20]
    8f34:	mov	r1, #8
    8f38:	str	r1, [r0, #16]
    8f3c:	b	905c <cd_native_type_finalise+0x378>
    8f40:	ldr	r0, [sp]
    8f44:	ldr	r0, [r0]
    8f48:	ldr	r0, [r0, #12]
    8f4c:	movw	r1, #0
    8f50:	movt	r1, #0
    8f54:	bl	0 <strcmp>
    8f58:	cmp	r0, #0
    8f5c:	bne	8f7c <cd_native_type_finalise+0x298>
    8f60:	ldr	r0, [sp]
    8f64:	ldr	r0, [r0]
    8f68:	mov	r1, #0
    8f6c:	str	r1, [r0, #20]
    8f70:	mov	r1, #9
    8f74:	str	r1, [r0, #16]
    8f78:	b	9058 <cd_native_type_finalise+0x374>
    8f7c:	ldr	r0, [sp]
    8f80:	ldr	r0, [r0]
    8f84:	ldr	r0, [r0, #12]
    8f88:	movw	r1, #0
    8f8c:	movt	r1, #0
    8f90:	bl	0 <strcmp>
    8f94:	cmp	r0, #0
    8f98:	bne	8fb8 <cd_native_type_finalise+0x2d4>
    8f9c:	ldr	r0, [sp]
    8fa0:	ldr	r0, [r0]
    8fa4:	mov	r1, #0
    8fa8:	str	r1, [r0, #20]
    8fac:	mov	r1, #10
    8fb0:	str	r1, [r0, #16]
    8fb4:	b	9054 <cd_native_type_finalise+0x370>
    8fb8:	ldr	r0, [sp]
    8fbc:	ldr	r0, [r0]
    8fc0:	ldr	r0, [r0, #12]
    8fc4:	movw	r1, #0
    8fc8:	movt	r1, #0
    8fcc:	bl	0 <strcmp>
    8fd0:	cmp	r0, #0
    8fd4:	bne	8ff4 <cd_native_type_finalise+0x310>
    8fd8:	ldr	r0, [sp]
    8fdc:	ldr	r0, [r0]
    8fe0:	mov	r1, #0
    8fe4:	str	r1, [r0, #20]
    8fe8:	mov	r1, #11
    8fec:	str	r1, [r0, #16]
    8ff0:	b	9050 <cd_native_type_finalise+0x36c>
    8ff4:	ldr	r0, [sp]
    8ff8:	ldr	r0, [r0]
    8ffc:	ldr	r0, [r0, #12]
    9000:	movw	r1, #0
    9004:	movt	r1, #0
    9008:	bl	0 <strcmp>
    900c:	cmp	r0, #0
    9010:	bne	9030 <cd_native_type_finalise+0x34c>
    9014:	ldr	r0, [sp]
    9018:	ldr	r0, [r0]
    901c:	mov	r1, #0
    9020:	str	r1, [r0, #20]
    9024:	mov	r1, #12
    9028:	str	r1, [r0, #16]
    902c:	b	904c <cd_native_type_finalise+0x368>
    9030:	ldr	r0, [pc, #88]	; 9090 <cd_native_type_finalise+0x3ac>
    9034:	movw	r1, #0
    9038:	movt	r1, #0
    903c:	bl	0 <coda_set_error>
    9040:	mvn	r0, #0
    9044:	str	r0, [sp, #4]
    9048:	b	9084 <cd_native_type_finalise+0x3a0>
    904c:	b	9050 <cd_native_type_finalise+0x36c>
    9050:	b	9054 <cd_native_type_finalise+0x370>
    9054:	b	9058 <cd_native_type_finalise+0x374>
    9058:	b	905c <cd_native_type_finalise+0x378>
    905c:	b	9060 <cd_native_type_finalise+0x37c>
    9060:	b	9064 <cd_native_type_finalise+0x380>
    9064:	b	9068 <cd_native_type_finalise+0x384>
    9068:	b	906c <cd_native_type_finalise+0x388>
    906c:	b	9070 <cd_native_type_finalise+0x38c>
    9070:	b	9074 <cd_native_type_finalise+0x390>
    9074:	b	9078 <cd_native_type_finalise+0x394>
    9078:	b	907c <cd_native_type_finalise+0x398>
    907c:	movw	r0, #0
    9080:	str	r0, [sp, #4]
    9084:	ldr	r0, [sp, #4]
    9088:	mov	sp, fp
    908c:	pop	{fp, pc}
    9090:	.word	0xfffffe70

00009094 <cd_conversion_set_unit>:
    9094:	push	{fp, lr}
    9098:	mov	fp, sp
    909c:	sub	sp, sp, #8
    90a0:	str	r0, [sp]
    90a4:	ldr	r0, [sp]
    90a8:	ldr	r0, [r0]
    90ac:	ldr	r0, [r0, #12]
    90b0:	movw	r1, #0
    90b4:	cmp	r0, r1
    90b8:	bne	90e0 <cd_conversion_set_unit+0x4c>
    90bc:	ldr	r0, [sp]
    90c0:	ldr	r0, [r0]
    90c4:	ldr	r0, [r0, #396]	; 0x18c
    90c8:	ldr	r0, [r0, #8]
    90cc:	movw	r1, #0
    90d0:	movt	r1, #0
    90d4:	bl	0 <coda_conversion_set_unit>
    90d8:	str	r0, [sp, #4]
    90dc:	b	9104 <cd_conversion_set_unit+0x70>
    90e0:	ldr	r0, [sp]
    90e4:	ldr	r0, [r0]
    90e8:	ldr	r0, [r0, #396]	; 0x18c
    90ec:	ldr	r0, [r0, #8]
    90f0:	ldr	r1, [sp]
    90f4:	ldr	r1, [r1]
    90f8:	ldr	r1, [r1, #12]
    90fc:	bl	0 <coda_conversion_set_unit>
    9100:	str	r0, [sp, #4]
    9104:	ldr	r0, [sp, #4]
    9108:	mov	sp, fp
    910c:	pop	{fp, pc}

00009110 <integer_constant_or_expression_finalise>:
    9110:	push	{fp, lr}
    9114:	mov	fp, sp
    9118:	sub	sp, sp, #24
    911c:	str	r0, [fp, #-8]
    9120:	ldr	r0, [fp, #-8]
    9124:	ldr	r0, [r0]
    9128:	ldr	r0, [r0, #12]
    912c:	movw	r1, #0
    9130:	cmp	r0, r1
    9134:	beq	919c <integer_constant_or_expression_finalise+0x8c>
    9138:	ldr	r0, [fp, #-8]
    913c:	ldr	r0, [r0]
    9140:	ldr	r0, [r0, #12]
    9144:	ldr	r1, [fp, #-8]
    9148:	ldr	r1, [r1]
    914c:	ldr	r1, [r1, #12]
    9150:	str	r0, [sp, #4]
    9154:	mov	r0, r1
    9158:	bl	0 <strlen>
    915c:	ldr	r1, [sp, #4]
    9160:	str	r0, [sp]
    9164:	mov	r0, r1
    9168:	ldr	r1, [sp]
    916c:	bl	1ff0 <is_whitespace>
    9170:	cmp	r0, #0
    9174:	beq	9198 <integer_constant_or_expression_finalise+0x88>
    9178:	ldr	r0, [fp, #-8]
    917c:	ldr	r0, [r0]
    9180:	ldr	r0, [r0, #12]
    9184:	bl	0 <free>
    9188:	ldr	r0, [fp, #-8]
    918c:	ldr	r0, [r0]
    9190:	movw	r1, #0
    9194:	str	r1, [r0, #12]
    9198:	b	919c <integer_constant_or_expression_finalise+0x8c>
    919c:	ldr	r0, [fp, #-8]
    91a0:	ldr	r0, [r0]
    91a4:	ldr	r0, [r0, #12]
    91a8:	movw	r1, #0
    91ac:	cmp	r0, r1
    91b0:	bne	91d0 <integer_constant_or_expression_finalise+0xc0>
    91b4:	ldr	r0, [pc, #292]	; 92e0 <integer_constant_or_expression_finalise+0x1d0>
    91b8:	movw	r1, #0
    91bc:	movt	r1, #0
    91c0:	bl	0 <coda_set_error>
    91c4:	mvn	r0, #0
    91c8:	str	r0, [fp, #-4]
    91cc:	b	92d4 <integer_constant_or_expression_finalise+0x1c4>
    91d0:	ldr	r0, [fp, #-8]
    91d4:	ldr	r0, [r0]
    91d8:	ldr	r0, [r0, #12]
    91dc:	add	r1, sp, #8
    91e0:	bl	0 <coda_expression_from_string>
    91e4:	cmp	r0, #0
    91e8:	beq	91f8 <integer_constant_or_expression_finalise+0xe8>
    91ec:	mvn	r0, #0
    91f0:	str	r0, [fp, #-4]
    91f4:	b	92d4 <integer_constant_or_expression_finalise+0x1c4>
    91f8:	ldr	r0, [fp, #-8]
    91fc:	ldr	r0, [r0]
    9200:	ldr	r0, [r0, #12]
    9204:	bl	0 <free>
    9208:	ldr	r0, [fp, #-8]
    920c:	ldr	r0, [r0]
    9210:	movw	r1, #0
    9214:	str	r1, [r0, #12]
    9218:	ldr	r0, [sp, #8]
    921c:	ldr	r1, [fp, #-8]
    9220:	ldr	r1, [r1]
    9224:	str	r0, [r1, #8]
    9228:	ldr	r0, [sp, #8]
    922c:	add	r1, sp, #12
    9230:	bl	0 <coda_expression_get_type>
    9234:	cmp	r0, #0
    9238:	beq	9250 <integer_constant_or_expression_finalise+0x140>
    923c:	ldr	r0, [sp, #8]
    9240:	bl	0 <coda_expression_delete>
    9244:	mvn	r0, #0
    9248:	str	r0, [fp, #-4]
    924c:	b	92d4 <integer_constant_or_expression_finalise+0x1c4>
    9250:	ldr	r0, [sp, #12]
    9254:	cmp	r0, #1
    9258:	beq	9278 <integer_constant_or_expression_finalise+0x168>
    925c:	ldr	r0, [pc, #124]	; 92e0 <integer_constant_or_expression_finalise+0x1d0>
    9260:	movw	r1, #0
    9264:	movt	r1, #0
    9268:	bl	0 <coda_set_error>
    926c:	mvn	r0, #0
    9270:	str	r0, [fp, #-4]
    9274:	b	92d4 <integer_constant_or_expression_finalise+0x1c4>
    9278:	ldr	r0, [sp, #8]
    927c:	bl	0 <coda_expression_is_constant>
    9280:	cmp	r0, #0
    9284:	beq	92cc <integer_constant_or_expression_finalise+0x1bc>
    9288:	ldr	r0, [sp, #8]
    928c:	ldr	r1, [fp, #-8]
    9290:	ldr	r1, [r1]
    9294:	add	r2, r1, #16
    9298:	movw	r1, #0
    929c:	bl	0 <coda_expression_eval_integer>
    92a0:	cmp	r0, #0
    92a4:	beq	92b4 <integer_constant_or_expression_finalise+0x1a4>
    92a8:	mvn	r0, #0
    92ac:	str	r0, [fp, #-4]
    92b0:	b	92d4 <integer_constant_or_expression_finalise+0x1c4>
    92b4:	ldr	r0, [fp, #-8]
    92b8:	ldr	r0, [r0]
    92bc:	movw	r1, #0
    92c0:	str	r1, [r0, #8]
    92c4:	ldr	r0, [sp, #8]
    92c8:	bl	0 <coda_expression_delete>
    92cc:	movw	r0, #0
    92d0:	str	r0, [fp, #-4]
    92d4:	ldr	r0, [fp, #-4]
    92d8:	mov	sp, fp
    92dc:	pop	{fp, pc}
    92e0:	.word	0xfffffe70

000092e4 <cd_integer_set_unit>:
    92e4:	push	{fp, lr}
    92e8:	mov	fp, sp
    92ec:	sub	sp, sp, #8
    92f0:	str	r0, [sp]
    92f4:	ldr	r0, [sp]
    92f8:	ldr	r0, [r0]
    92fc:	ldr	r0, [r0, #12]
    9300:	movw	r1, #0
    9304:	cmp	r0, r1
    9308:	bne	9330 <cd_integer_set_unit+0x4c>
    930c:	ldr	r0, [sp]
    9310:	ldr	r0, [r0]
    9314:	ldr	r0, [r0, #396]	; 0x18c
    9318:	ldr	r0, [r0, #8]
    931c:	movw	r1, #0
    9320:	movt	r1, #0
    9324:	bl	0 <coda_type_number_set_unit>
    9328:	str	r0, [sp, #4]
    932c:	b	9354 <cd_integer_set_unit+0x70>
    9330:	ldr	r0, [sp]
    9334:	ldr	r0, [r0]
    9338:	ldr	r0, [r0, #396]	; 0x18c
    933c:	ldr	r0, [r0, #8]
    9340:	ldr	r1, [sp]
    9344:	ldr	r1, [r1]
    9348:	ldr	r1, [r1, #12]
    934c:	bl	0 <coda_type_number_set_unit>
    9350:	str	r0, [sp, #4]
    9354:	ldr	r0, [sp, #4]
    9358:	mov	sp, fp
    935c:	pop	{fp, pc}

00009360 <cd_integer_set_little_endian>:
    9360:	push	{fp, lr}
    9364:	mov	fp, sp
    9368:	sub	sp, sp, #8
    936c:	str	r0, [sp, #4]
    9370:	ldr	r0, [sp, #4]
    9374:	ldr	r0, [r0]
    9378:	ldr	r0, [r0, #396]	; 0x18c
    937c:	ldr	r0, [r0, #8]
    9380:	movw	r1, #1
    9384:	bl	0 <coda_type_number_set_endianness>
    9388:	mov	sp, fp
    938c:	pop	{fp, pc}

00009390 <cd_integer_set_read_type>:
    9390:	push	{fp, lr}
    9394:	mov	fp, sp
    9398:	sub	sp, sp, #8
    939c:	str	r0, [sp, #4]
    93a0:	ldr	r0, [sp, #4]
    93a4:	ldr	r0, [r0]
    93a8:	ldr	r1, [r0, #16]
    93ac:	ldr	r0, [r0, #396]	; 0x18c
    93b0:	ldr	r0, [r0, #8]
    93b4:	bl	0 <coda_type_set_read_type>
    93b8:	mov	sp, fp
    93bc:	pop	{fp, pc}

000093c0 <cd_integer_set_conversion>:
    93c0:	push	{fp, lr}
    93c4:	mov	fp, sp
    93c8:	sub	sp, sp, #8
    93cc:	str	r0, [sp]
    93d0:	ldr	r0, [sp]
    93d4:	ldr	r0, [r0]
    93d8:	ldr	r0, [r0, #396]	; 0x18c
    93dc:	ldr	r0, [r0, #8]
    93e0:	ldr	r1, [sp]
    93e4:	ldr	r1, [r1]
    93e8:	ldr	r1, [r1, #8]
    93ec:	bl	0 <coda_type_number_set_conversion>
    93f0:	cmp	r0, #0
    93f4:	beq	9404 <cd_integer_set_conversion+0x44>
    93f8:	mvn	r0, #0
    93fc:	str	r0, [sp, #4]
    9400:	b	9418 <cd_integer_set_conversion+0x58>
    9404:	ldr	r0, [sp]
    9408:	ldr	r0, [r0]
    940c:	movw	r1, #0
    9410:	str	r1, [r0, #8]
    9414:	str	r1, [sp, #4]
    9418:	ldr	r0, [sp, #4]
    941c:	mov	sp, fp
    9420:	pop	{fp, pc}

00009424 <cd_integer_add_mapping>:
    9424:	push	{fp, lr}
    9428:	mov	fp, sp
    942c:	sub	sp, sp, #8
    9430:	str	r0, [sp]
    9434:	ldr	r0, [sp]
    9438:	ldr	r0, [r0]
    943c:	ldr	r0, [r0, #396]	; 0x18c
    9440:	ldr	r0, [r0, #8]
    9444:	ldr	r1, [sp]
    9448:	ldr	r1, [r1]
    944c:	ldr	r1, [r1, #8]
    9450:	bl	0 <coda_type_number_add_ascii_integer_mapping>
    9454:	cmp	r0, #0
    9458:	beq	9468 <cd_integer_add_mapping+0x44>
    945c:	mvn	r0, #0
    9460:	str	r0, [sp, #4]
    9464:	b	947c <cd_integer_add_mapping+0x58>
    9468:	ldr	r0, [sp]
    946c:	ldr	r0, [r0]
    9470:	movw	r1, #0
    9474:	str	r1, [r0, #8]
    9478:	str	r1, [sp, #4]
    947c:	ldr	r0, [sp, #4]
    9480:	mov	sp, fp
    9484:	pop	{fp, pc}

00009488 <cd_integer_finalise>:
    9488:	push	{fp, lr}
    948c:	mov	fp, sp
    9490:	sub	sp, sp, #8
    9494:	str	r0, [sp, #4]
    9498:	ldr	r0, [sp, #4]
    949c:	ldr	r0, [r0]
    94a0:	ldr	r0, [r0, #8]
    94a4:	bl	0 <coda_type_number_validate>
    94a8:	mov	sp, fp
    94ac:	pop	{fp, pc}

000094b0 <get_named_type>:
    94b0:	push	{fp, lr}
    94b4:	mov	fp, sp
    94b8:	sub	sp, sp, #24
    94bc:	str	r0, [fp, #-8]
    94c0:	str	r1, [sp, #12]
    94c4:	str	r2, [sp, #8]
    94c8:	ldr	r0, [fp, #-8]
    94cc:	ldr	r0, [r0, #24]
    94d0:	movw	r1, #0
    94d4:	cmp	r0, r1
    94d8:	beq	94e0 <get_named_type+0x30>
    94dc:	b	9500 <get_named_type+0x50>
    94e0:	movw	r0, #0
    94e4:	movt	r0, #0
    94e8:	movw	r1, #0
    94ec:	movt	r1, #0
    94f0:	movw	r2, #710	; 0x2c6
    94f4:	movw	r3, #0
    94f8:	movt	r3, #0
    94fc:	bl	0 <__assert_fail>
    9500:	ldr	r0, [fp, #-8]
    9504:	ldr	r0, [r0, #24]
    9508:	ldr	r1, [sp, #12]
    950c:	bl	0 <coda_product_class_has_named_type>
    9510:	cmp	r0, #0
    9514:	bne	9570 <get_named_type+0xc0>
    9518:	ldr	r0, [fp, #-8]
    951c:	ldr	r0, [r0, #16]
    9520:	ldr	r2, [sp, #12]
    9524:	ldr	r1, [fp, #-8]
    9528:	ldr	r3, [r1, #24]
    952c:	ldr	r1, [fp, #-8]
    9530:	ldr	r1, [r1, #28]
    9534:	movw	ip, #1
    9538:	str	r1, [sp, #4]
    953c:	mov	r1, ip
    9540:	ldr	ip, [sp, #4]
    9544:	str	ip, [sp]
    9548:	bl	148 <parse_entry>
    954c:	cmp	r0, #0
    9550:	beq	956c <get_named_type+0xbc>
    9554:	ldr	r0, [fp, #-8]
    9558:	movw	r1, #0
    955c:	str	r1, [r0, #44]	; 0x2c
    9560:	mvn	r0, #0
    9564:	str	r0, [fp, #-4]
    9568:	b	95a4 <get_named_type+0xf4>
    956c:	b	9570 <get_named_type+0xc0>
    9570:	ldr	r0, [fp, #-8]
    9574:	ldr	r0, [r0, #24]
    9578:	ldr	r1, [sp, #12]
    957c:	bl	0 <coda_product_class_get_named_type>
    9580:	ldr	r1, [sp, #8]
    9584:	str	r0, [r1]
    9588:	ldr	r0, [sp, #8]
    958c:	ldr	r0, [r0]
    9590:	ldr	r1, [r0, #4]
    9594:	add	r1, r1, #1
    9598:	str	r1, [r0, #4]
    959c:	movw	r0, #0
    95a0:	str	r0, [fp, #-4]
    95a4:	ldr	r0, [fp, #-4]
    95a8:	mov	sp, fp
    95ac:	pop	{fp, pc}

000095b0 <cd_raw_set_fixed_value>:
    95b0:	push	{fp, lr}
    95b4:	mov	fp, sp
    95b8:	sub	sp, sp, #16
    95bc:	str	r0, [sp, #8]
    95c0:	ldr	r0, [sp, #8]
    95c4:	ldr	r0, [r0]
    95c8:	ldr	r0, [r0, #12]
    95cc:	bl	7f18 <decode_escaped_string>
    95d0:	str	r0, [sp, #4]
    95d4:	ldr	r0, [sp, #4]
    95d8:	cmp	r0, #0
    95dc:	bge	95fc <cd_raw_set_fixed_value+0x4c>
    95e0:	ldr	r0, [pc, #112]	; 9658 <cd_raw_set_fixed_value+0xa8>
    95e4:	movw	r1, #0
    95e8:	movt	r1, #0
    95ec:	bl	0 <coda_set_error>
    95f0:	mvn	r0, #0
    95f4:	str	r0, [fp, #-4]
    95f8:	b	964c <cd_raw_set_fixed_value+0x9c>
    95fc:	ldr	r0, [sp, #4]
    9600:	cmp	r0, #0
    9604:	ble	9644 <cd_raw_set_fixed_value+0x94>
    9608:	ldr	r0, [sp, #8]
    960c:	ldr	r0, [r0]
    9610:	ldr	r0, [r0, #396]	; 0x18c
    9614:	ldr	r0, [r0, #8]
    9618:	ldr	r1, [sp, #4]
    961c:	ldr	r2, [sp, #8]
    9620:	ldr	r2, [r2]
    9624:	ldr	r2, [r2, #12]
    9628:	bl	0 <coda_type_raw_set_fixed_value>
    962c:	cmp	r0, #0
    9630:	beq	9640 <cd_raw_set_fixed_value+0x90>
    9634:	mvn	r0, #0
    9638:	str	r0, [fp, #-4]
    963c:	b	964c <cd_raw_set_fixed_value+0x9c>
    9640:	b	9644 <cd_raw_set_fixed_value+0x94>
    9644:	movw	r0, #0
    9648:	str	r0, [fp, #-4]
    964c:	ldr	r0, [fp, #-4]
    9650:	mov	sp, fp
    9654:	pop	{fp, pc}
    9658:	.word	0xfffffe70

0000965c <cd_raw_finalise>:
    965c:	push	{fp, lr}
    9660:	mov	fp, sp
    9664:	sub	sp, sp, #8
    9668:	str	r0, [sp, #4]
    966c:	ldr	r0, [sp, #4]
    9670:	ldr	r0, [r0]
    9674:	ldr	r0, [r0, #8]
    9678:	bl	0 <coda_type_raw_validate>
    967c:	mov	sp, fp
    9680:	pop	{fp, pc}

00009684 <integer_expression_init>:
    9684:	sub	sp, sp, #8
    9688:	movw	r2, #0
    968c:	movt	r2, #0
    9690:	str	r0, [sp, #4]
    9694:	str	r1, [sp]
    9698:	ldr	r0, [sp, #4]
    969c:	ldr	r0, [r0]
    96a0:	movw	r1, #1
    96a4:	str	r1, [r0, #32]
    96a8:	ldr	r0, [sp, #4]
    96ac:	ldr	r0, [r0]
    96b0:	str	r2, [r0, #40]	; 0x28
    96b4:	ldr	r0, [sp, #4]
    96b8:	ldr	r0, [r0]
    96bc:	movw	r1, #0
    96c0:	movt	r1, #0
    96c4:	str	r1, [r0, #36]	; 0x24
    96c8:	movw	r0, #0
    96cc:	add	sp, sp, #8
    96d0:	bx	lr

000096d4 <cd_field_init>:
    96d4:	push	{fp, lr}
    96d8:	mov	fp, sp
    96dc:	sub	sp, sp, #24
    96e0:	str	r0, [fp, #-8]
    96e4:	str	r1, [sp, #12]
    96e8:	movw	r0, #0
    96ec:	str	r0, [sp, #8]
    96f0:	str	r0, [sp, #4]
    96f4:	str	r0, [sp]
    96f8:	ldr	r0, [sp, #12]
    96fc:	movw	r1, #0
    9700:	movt	r1, #0
    9704:	bl	24f4 <get_attribute_value>
    9708:	str	r0, [sp, #8]
    970c:	ldr	r0, [sp, #8]
    9710:	movw	r1, #0
    9714:	cmp	r0, r1
    9718:	beq	9738 <cd_field_init+0x64>
    971c:	ldr	r0, [pc, #584]	; 996c <cd_field_init+0x298>
    9720:	movw	r1, #0
    9724:	movt	r1, #0
    9728:	bl	0 <coda_set_error>
    972c:	mvn	r0, #0
    9730:	str	r0, [fp, #-4]
    9734:	b	9960 <cd_field_init+0x28c>
    9738:	ldr	r0, [fp, #-8]
    973c:	ldr	r0, [r0]
    9740:	ldr	r0, [r0, #396]	; 0x18c
    9744:	ldr	r0, [r0, #48]	; 0x30
    9748:	cmp	r0, #0
    974c:	beq	9754 <cd_field_init+0x80>
    9750:	b	9774 <cd_field_init+0xa0>
    9754:	movw	r0, #0
    9758:	movt	r0, #0
    975c:	movw	r1, #0
    9760:	movt	r1, #0
    9764:	movw	r2, #1685	; 0x695
    9768:	movw	r3, #0
    976c:	movt	r3, #0
    9770:	bl	0 <__assert_fail>
    9774:	ldr	r0, [fp, #-8]
    9778:	ldr	r0, [r0]
    977c:	ldr	r0, [r0, #396]	; 0x18c
    9780:	ldr	r0, [r0, #44]	; 0x2c
    9784:	ldr	r1, [fp, #-8]
    9788:	ldr	r1, [r1]
    978c:	str	r0, [r1, #44]	; 0x2c
    9790:	ldr	r0, [fp, #-8]
    9794:	ldr	r0, [r0]
    9798:	movw	r1, #1
    979c:	str	r1, [r0, #48]	; 0x30
    97a0:	ldr	r0, [sp, #12]
    97a4:	movw	r1, #0
    97a8:	movt	r1, #0
    97ac:	bl	24f4 <get_attribute_value>
    97b0:	movw	r1, #0
    97b4:	cmp	r0, r1
    97b8:	beq	97d8 <cd_field_init+0x104>
    97bc:	ldr	r0, [pc, #424]	; 996c <cd_field_init+0x298>
    97c0:	movw	r1, #0
    97c4:	movt	r1, #0
    97c8:	bl	0 <coda_set_error>
    97cc:	mvn	r0, #0
    97d0:	str	r0, [fp, #-4]
    97d4:	b	9960 <cd_field_init+0x28c>
    97d8:	ldr	r0, [sp, #12]
    97dc:	ldr	r1, [fp, #-8]
    97e0:	ldr	r1, [r1]
    97e4:	ldr	r2, [r1]
    97e8:	movw	r1, #0
    97ec:	movt	r1, #0
    97f0:	bl	20e4 <get_mandatory_attribute_value>
    97f4:	str	r0, [sp, #4]
    97f8:	ldr	r0, [sp, #4]
    97fc:	movw	r1, #0
    9800:	cmp	r0, r1
    9804:	bne	9814 <cd_field_init+0x140>
    9808:	mvn	r0, #0
    980c:	str	r0, [fp, #-4]
    9810:	b	9960 <cd_field_init+0x28c>
    9814:	movw	r0, #0
    9818:	movt	r0, #0
    981c:	ldr	r1, [fp, #-8]
    9820:	ldr	r1, [r1]
    9824:	str	r0, [r1, #40]	; 0x28
    9828:	ldr	r0, [sp, #4]
    982c:	bl	0 <coda_type_record_field_new>
    9830:	ldr	r1, [fp, #-8]
    9834:	ldr	r1, [r1]
    9838:	str	r0, [r1, #8]
    983c:	ldr	r0, [fp, #-8]
    9840:	ldr	r0, [r0]
    9844:	ldr	r0, [r0, #8]
    9848:	movw	r1, #0
    984c:	cmp	r0, r1
    9850:	bne	9860 <cd_field_init+0x18c>
    9854:	mvn	r0, #0
    9858:	str	r0, [fp, #-4]
    985c:	b	9960 <cd_field_init+0x28c>
    9860:	ldr	r0, [sp, #12]
    9864:	movw	r1, #0
    9868:	movt	r1, #0
    986c:	bl	24f4 <get_attribute_value>
    9870:	str	r0, [sp]
    9874:	ldr	r0, [sp]
    9878:	movw	r1, #0
    987c:	cmp	r0, r1
    9880:	beq	98b0 <cd_field_init+0x1dc>
    9884:	ldr	r0, [fp, #-8]
    9888:	ldr	r0, [r0]
    988c:	ldr	r0, [r0, #8]
    9890:	ldr	r1, [sp]
    9894:	bl	0 <coda_type_record_field_set_real_name>
    9898:	cmp	r0, #0
    989c:	beq	98ac <cd_field_init+0x1d8>
    98a0:	mvn	r0, #0
    98a4:	str	r0, [fp, #-4]
    98a8:	b	9960 <cd_field_init+0x28c>
    98ac:	b	98b0 <cd_field_init+0x1dc>
    98b0:	ldr	r0, [fp, #-8]
    98b4:	ldr	r0, [r0]
    98b8:	movw	r1, #0
    98bc:	movt	r1, #0
    98c0:	bl	1684 <register_type_elements>
    98c4:	ldr	r0, [fp, #-8]
    98c8:	ldr	r0, [r0]
    98cc:	movw	r1, #18
    98d0:	movw	r2, #0
    98d4:	movt	r2, #0
    98d8:	movw	r3, #0
    98dc:	movt	r3, #0
    98e0:	bl	1344 <register_sub_element>
    98e4:	ldr	r0, [fp, #-8]
    98e8:	ldr	r0, [r0]
    98ec:	movw	r1, #29
    98f0:	movw	r2, #0
    98f4:	movt	r2, #0
    98f8:	movw	r3, #0
    98fc:	movt	r3, #0
    9900:	bl	1344 <register_sub_element>
    9904:	ldr	r0, [fp, #-8]
    9908:	ldr	r0, [r0]
    990c:	movw	r1, #5
    9910:	movw	r2, #0
    9914:	movt	r2, #0
    9918:	movw	r3, #0
    991c:	movt	r3, #0
    9920:	bl	1344 <register_sub_element>
    9924:	ldr	r0, [fp, #-8]
    9928:	ldr	r0, [r0]
    992c:	movw	r1, #6
    9930:	movw	r2, #0
    9934:	movt	r2, #0
    9938:	movw	r3, #0
    993c:	movt	r3, #0
    9940:	bl	1344 <register_sub_element>
    9944:	ldr	r0, [fp, #-8]
    9948:	ldr	r0, [r0]
    994c:	movw	r1, #0
    9950:	movt	r1, #0
    9954:	str	r1, [r0, #36]	; 0x24
    9958:	movw	r0, #0
    995c:	str	r0, [fp, #-4]
    9960:	ldr	r0, [fp, #-4]
    9964:	mov	sp, fp
    9968:	pop	{fp, pc}
    996c:	.word	0xfffffe70

00009970 <cd_record_add_field>:
    9970:	push	{fp, lr}
    9974:	mov	fp, sp
    9978:	sub	sp, sp, #8
    997c:	str	r0, [sp]
    9980:	ldr	r0, [sp]
    9984:	ldr	r0, [r0]
    9988:	ldr	r0, [r0, #396]	; 0x18c
    998c:	ldr	r0, [r0, #8]
    9990:	ldr	r1, [sp]
    9994:	ldr	r1, [r1]
    9998:	ldr	r1, [r1, #8]
    999c:	bl	0 <coda_type_record_add_field>
    99a0:	cmp	r0, #0
    99a4:	beq	99b4 <cd_record_add_field+0x44>
    99a8:	mvn	r0, #0
    99ac:	str	r0, [sp, #4]
    99b0:	b	99c8 <cd_record_add_field+0x58>
    99b4:	ldr	r0, [sp]
    99b8:	ldr	r0, [r0]
    99bc:	movw	r1, #0
    99c0:	str	r1, [r0, #8]
    99c4:	str	r1, [sp, #4]
    99c8:	ldr	r0, [sp, #4]
    99cc:	mov	sp, fp
    99d0:	pop	{fp, pc}

000099d4 <cd_record_finalise>:
    99d4:	push	{fp, lr}
    99d8:	mov	fp, sp
    99dc:	sub	sp, sp, #8
    99e0:	str	r0, [sp, #4]
    99e4:	ldr	r0, [sp, #4]
    99e8:	ldr	r0, [r0]
    99ec:	ldr	r0, [r0, #8]
    99f0:	bl	0 <coda_type_record_validate>
    99f4:	mov	sp, fp
    99f8:	pop	{fp, pc}

000099fc <handle_xml_name>:
    99fc:	push	{fp, lr}
    9a00:	mov	fp, sp
    9a04:	sub	sp, sp, #24
    9a08:	str	r0, [fp, #-8]
    9a0c:	str	r1, [sp, #12]
    9a10:	ldr	r0, [fp, #-8]
    9a14:	ldr	r0, [r0]
    9a18:	ldr	r0, [r0, #48]	; 0x30
    9a1c:	cmp	r0, #0
    9a20:	beq	9a28 <handle_xml_name+0x2c>
    9a24:	b	9a48 <handle_xml_name+0x4c>
    9a28:	movw	r0, #0
    9a2c:	movt	r0, #0
    9a30:	movw	r1, #0
    9a34:	movt	r1, #0
    9a38:	movw	r2, #676	; 0x2a4
    9a3c:	movw	r3, #0
    9a40:	movt	r3, #0
    9a44:	bl	0 <__assert_fail>
    9a48:	ldr	r0, [fp, #-8]
    9a4c:	ldr	r0, [r0]
    9a50:	ldr	r0, [r0, #44]	; 0x2c
    9a54:	cmp	r0, #2
    9a58:	beq	9a68 <handle_xml_name+0x6c>
    9a5c:	movw	r0, #0
    9a60:	str	r0, [fp, #-4]
    9a64:	b	9b3c <handle_xml_name+0x140>
    9a68:	ldr	r0, [fp, #-8]
    9a6c:	ldr	r0, [r0]
    9a70:	ldr	r0, [r0, #396]	; 0x18c
    9a74:	str	r0, [sp, #4]
    9a78:	ldr	r0, [sp, #4]
    9a7c:	ldr	r0, [r0]
    9a80:	cmp	r0, #14
    9a84:	beq	9ab4 <handle_xml_name+0xb8>
    9a88:	ldr	r0, [sp, #4]
    9a8c:	ldr	r0, [r0]
    9a90:	cmn	r0, #1
    9a94:	bne	9aa4 <handle_xml_name+0xa8>
    9a98:	movw	r0, #0
    9a9c:	str	r0, [fp, #-4]
    9aa0:	b	9b3c <handle_xml_name+0x140>
    9aa4:	ldr	r0, [sp, #4]
    9aa8:	ldr	r0, [r0, #396]	; 0x18c
    9aac:	str	r0, [sp, #4]
    9ab0:	b	9a78 <handle_xml_name+0x7c>
    9ab4:	ldr	r0, [sp, #12]
    9ab8:	movw	r1, #0
    9abc:	movt	r1, #0
    9ac0:	bl	24f4 <get_attribute_value>
    9ac4:	str	r0, [sp, #8]
    9ac8:	ldr	r0, [sp, #8]
    9acc:	movw	r1, #0
    9ad0:	cmp	r0, r1
    9ad4:	beq	9b34 <handle_xml_name+0x138>
    9ad8:	ldr	r0, [sp, #4]
    9adc:	ldr	r0, [r0, #8]
    9ae0:	ldr	r0, [r0, #4]
    9ae4:	movw	r1, #0
    9ae8:	cmp	r0, r1
    9aec:	beq	9b0c <handle_xml_name+0x110>
    9af0:	ldr	r0, [pc, #80]	; 9b48 <handle_xml_name+0x14c>
    9af4:	movw	r1, #0
    9af8:	movt	r1, #0
    9afc:	bl	0 <coda_set_error>
    9b00:	mvn	r0, #0
    9b04:	str	r0, [fp, #-4]
    9b08:	b	9b3c <handle_xml_name+0x140>
    9b0c:	ldr	r0, [sp, #4]
    9b10:	ldr	r0, [r0, #8]
    9b14:	ldr	r1, [sp, #8]
    9b18:	bl	0 <coda_type_record_field_set_real_name>
    9b1c:	cmp	r0, #0
    9b20:	beq	9b30 <handle_xml_name+0x134>
    9b24:	mvn	r0, #0
    9b28:	str	r0, [fp, #-4]
    9b2c:	b	9b3c <handle_xml_name+0x140>
    9b30:	b	9b34 <handle_xml_name+0x138>
    9b34:	movw	r0, #0
    9b38:	str	r0, [fp, #-4]
    9b3c:	ldr	r0, [fp, #-4]
    9b40:	mov	sp, fp
    9b44:	pop	{fp, pc}
    9b48:	.word	0xfffffe70

00009b4c <integer_expression_finalise>:
    9b4c:	push	{fp, lr}
    9b50:	mov	fp, sp
    9b54:	sub	sp, sp, #24
    9b58:	str	r0, [fp, #-8]
    9b5c:	ldr	r0, [fp, #-8]
    9b60:	ldr	r0, [r0]
    9b64:	ldr	r0, [r0, #12]
    9b68:	movw	r1, #0
    9b6c:	cmp	r0, r1
    9b70:	beq	9bd8 <integer_expression_finalise+0x8c>
    9b74:	ldr	r0, [fp, #-8]
    9b78:	ldr	r0, [r0]
    9b7c:	ldr	r0, [r0, #12]
    9b80:	ldr	r1, [fp, #-8]
    9b84:	ldr	r1, [r1]
    9b88:	ldr	r1, [r1, #12]
    9b8c:	str	r0, [sp, #4]
    9b90:	mov	r0, r1
    9b94:	bl	0 <strlen>
    9b98:	ldr	r1, [sp, #4]
    9b9c:	str	r0, [sp]
    9ba0:	mov	r0, r1
    9ba4:	ldr	r1, [sp]
    9ba8:	bl	1ff0 <is_whitespace>
    9bac:	cmp	r0, #0
    9bb0:	beq	9bd4 <integer_expression_finalise+0x88>
    9bb4:	ldr	r0, [fp, #-8]
    9bb8:	ldr	r0, [r0]
    9bbc:	ldr	r0, [r0, #12]
    9bc0:	bl	0 <free>
    9bc4:	ldr	r0, [fp, #-8]
    9bc8:	ldr	r0, [r0]
    9bcc:	movw	r1, #0
    9bd0:	str	r1, [r0, #12]
    9bd4:	b	9bd8 <integer_expression_finalise+0x8c>
    9bd8:	ldr	r0, [fp, #-8]
    9bdc:	ldr	r0, [r0]
    9be0:	ldr	r0, [r0, #12]
    9be4:	movw	r1, #0
    9be8:	cmp	r0, r1
    9bec:	bne	9c0c <integer_expression_finalise+0xc0>
    9bf0:	ldr	r0, [pc, #200]	; 9cc0 <integer_expression_finalise+0x174>
    9bf4:	movw	r1, #0
    9bf8:	movt	r1, #0
    9bfc:	bl	0 <coda_set_error>
    9c00:	mvn	r0, #0
    9c04:	str	r0, [fp, #-4]
    9c08:	b	9cb4 <integer_expression_finalise+0x168>
    9c0c:	ldr	r0, [fp, #-8]
    9c10:	ldr	r0, [r0]
    9c14:	ldr	r0, [r0, #12]
    9c18:	add	r1, sp, #8
    9c1c:	bl	0 <coda_expression_from_string>
    9c20:	cmp	r0, #0
    9c24:	beq	9c34 <integer_expression_finalise+0xe8>
    9c28:	mvn	r0, #0
    9c2c:	str	r0, [fp, #-4]
    9c30:	b	9cb4 <integer_expression_finalise+0x168>
    9c34:	ldr	r0, [fp, #-8]
    9c38:	ldr	r0, [r0]
    9c3c:	ldr	r0, [r0, #12]
    9c40:	bl	0 <free>
    9c44:	ldr	r0, [fp, #-8]
    9c48:	ldr	r0, [r0]
    9c4c:	movw	r1, #0
    9c50:	str	r1, [r0, #12]
    9c54:	ldr	r0, [sp, #8]
    9c58:	ldr	r1, [fp, #-8]
    9c5c:	ldr	r1, [r1]
    9c60:	str	r0, [r1, #8]
    9c64:	ldr	r0, [sp, #8]
    9c68:	add	r1, sp, #12
    9c6c:	bl	0 <coda_expression_get_type>
    9c70:	cmp	r0, #0
    9c74:	beq	9c84 <integer_expression_finalise+0x138>
    9c78:	mvn	r0, #0
    9c7c:	str	r0, [fp, #-4]
    9c80:	b	9cb4 <integer_expression_finalise+0x168>
    9c84:	ldr	r0, [sp, #12]
    9c88:	cmp	r0, #1
    9c8c:	beq	9cac <integer_expression_finalise+0x160>
    9c90:	ldr	r0, [pc, #40]	; 9cc0 <integer_expression_finalise+0x174>
    9c94:	movw	r1, #0
    9c98:	movt	r1, #0
    9c9c:	bl	0 <coda_set_error>
    9ca0:	mvn	r0, #0
    9ca4:	str	r0, [fp, #-4]
    9ca8:	b	9cb4 <integer_expression_finalise+0x168>
    9cac:	movw	r0, #0
    9cb0:	str	r0, [fp, #-4]
    9cb4:	ldr	r0, [fp, #-4]
    9cb8:	mov	sp, fp
    9cbc:	pop	{fp, pc}
    9cc0:	.word	0xfffffe70

00009cc4 <cd_field_set_bit_offset>:
    9cc4:	push	{fp, lr}
    9cc8:	mov	fp, sp
    9ccc:	sub	sp, sp, #8
    9cd0:	str	r0, [sp]
    9cd4:	ldr	r0, [sp]
    9cd8:	ldr	r0, [r0]
    9cdc:	ldr	r0, [r0, #396]	; 0x18c
    9ce0:	ldr	r0, [r0, #8]
    9ce4:	ldr	r1, [sp]
    9ce8:	ldr	r1, [r1]
    9cec:	ldr	r1, [r1, #8]
    9cf0:	bl	0 <coda_type_record_field_set_bit_offset_expression>
    9cf4:	cmp	r0, #0
    9cf8:	beq	9d08 <cd_field_set_bit_offset+0x44>
    9cfc:	mvn	r0, #0
    9d00:	str	r0, [sp, #4]
    9d04:	b	9d1c <cd_field_set_bit_offset+0x58>
    9d08:	ldr	r0, [sp]
    9d0c:	ldr	r0, [r0]
    9d10:	movw	r1, #0
    9d14:	str	r1, [r0, #8]
    9d18:	str	r1, [sp, #4]
    9d1c:	ldr	r0, [sp, #4]
    9d20:	mov	sp, fp
    9d24:	pop	{fp, pc}

00009d28 <cd_field_finalise>:
    9d28:	push	{fp, lr}
    9d2c:	mov	fp, sp
    9d30:	sub	sp, sp, #8
    9d34:	str	r0, [sp, #4]
    9d38:	ldr	r0, [sp, #4]
    9d3c:	ldr	r0, [r0]
    9d40:	ldr	r0, [r0, #8]
    9d44:	bl	0 <coda_type_record_field_validate>
    9d48:	mov	sp, fp
    9d4c:	pop	{fp, pc}

00009d50 <cd_text_set_fixed_value>:
    9d50:	push	{fp, lr}
    9d54:	mov	fp, sp
    9d58:	sub	sp, sp, #8
    9d5c:	str	r0, [sp]
    9d60:	ldr	r0, [sp]
    9d64:	ldr	r0, [r0]
    9d68:	ldr	r0, [r0, #12]
    9d6c:	bl	7f18 <decode_escaped_string>
    9d70:	cmp	r0, #0
    9d74:	bge	9d94 <cd_text_set_fixed_value+0x44>
    9d78:	ldr	r0, [pc, #68]	; 9dc4 <cd_text_set_fixed_value+0x74>
    9d7c:	movw	r1, #0
    9d80:	movt	r1, #0
    9d84:	bl	0 <coda_set_error>
    9d88:	mvn	r0, #0
    9d8c:	str	r0, [sp, #4]
    9d90:	b	9db8 <cd_text_set_fixed_value+0x68>
    9d94:	ldr	r0, [sp]
    9d98:	ldr	r0, [r0]
    9d9c:	ldr	r0, [r0, #396]	; 0x18c
    9da0:	ldr	r0, [r0, #8]
    9da4:	ldr	r1, [sp]
    9da8:	ldr	r1, [r1]
    9dac:	ldr	r1, [r1, #12]
    9db0:	bl	0 <coda_type_text_set_fixed_value>
    9db4:	str	r0, [sp, #4]
    9db8:	ldr	r0, [sp, #4]
    9dbc:	mov	sp, fp
    9dc0:	pop	{fp, pc}
    9dc4:	.word	0xfffffe70

00009dc8 <cd_text_set_read_type>:
    9dc8:	push	{fp, lr}
    9dcc:	mov	fp, sp
    9dd0:	sub	sp, sp, #8
    9dd4:	str	r0, [sp, #4]
    9dd8:	ldr	r0, [sp, #4]
    9ddc:	ldr	r0, [r0]
    9de0:	ldr	r1, [r0, #16]
    9de4:	ldr	r0, [r0, #396]	; 0x18c
    9de8:	ldr	r0, [r0, #8]
    9dec:	bl	0 <coda_type_set_read_type>
    9df0:	mov	sp, fp
    9df4:	pop	{fp, pc}

00009df8 <cd_text_finalise>:
    9df8:	push	{fp, lr}
    9dfc:	mov	fp, sp
    9e00:	sub	sp, sp, #8
    9e04:	str	r0, [sp, #4]
    9e08:	ldr	r0, [sp, #4]
    9e0c:	ldr	r0, [r0]
    9e10:	ldr	r0, [r0, #8]
    9e14:	bl	0 <coda_type_text_validate>
    9e18:	mov	sp, fp
    9e1c:	pop	{fp, pc}

00009e20 <cd_time_set_type>:
    9e20:	push	{fp, lr}
    9e24:	mov	fp, sp
    9e28:	sub	sp, sp, #8
    9e2c:	str	r0, [sp, #4]
    9e30:	ldr	r0, [sp, #4]
    9e34:	ldr	r0, [r0]
    9e38:	ldr	r0, [r0, #396]	; 0x18c
    9e3c:	ldr	r0, [r0, #8]
    9e40:	ldr	r1, [sp, #4]
    9e44:	ldr	r1, [r1]
    9e48:	ldr	r1, [r1, #8]
    9e4c:	bl	0 <coda_type_time_set_base_type>
    9e50:	mov	sp, fp
    9e54:	pop	{fp, pc}

00009e58 <cd_time_add_mapping>:
    9e58:	push	{fp, lr}
    9e5c:	mov	fp, sp
    9e60:	sub	sp, sp, #8
    9e64:	str	r0, [sp]
    9e68:	ldr	r0, [sp]
    9e6c:	ldr	r0, [r0]
    9e70:	ldr	r0, [r0, #396]	; 0x18c
    9e74:	ldr	r0, [r0, #8]
    9e78:	ldr	r1, [sp]
    9e7c:	ldr	r1, [r1]
    9e80:	ldr	r1, [r1, #8]
    9e84:	bl	0 <coda_type_time_add_ascii_float_mapping>
    9e88:	cmp	r0, #0
    9e8c:	beq	9e9c <cd_time_add_mapping+0x44>
    9e90:	mvn	r0, #0
    9e94:	str	r0, [sp, #4]
    9e98:	b	9eb0 <cd_time_add_mapping+0x58>
    9e9c:	ldr	r0, [sp]
    9ea0:	ldr	r0, [r0]
    9ea4:	movw	r1, #0
    9ea8:	str	r1, [r0, #8]
    9eac:	str	r1, [sp, #4]
    9eb0:	ldr	r0, [sp, #4]
    9eb4:	mov	sp, fp
    9eb8:	pop	{fp, pc}

00009ebc <cd_time_finalise>:
    9ebc:	push	{fp, lr}
    9ec0:	mov	fp, sp
    9ec4:	sub	sp, sp, #8
    9ec8:	str	r0, [sp, #4]
    9ecc:	ldr	r0, [sp, #4]
    9ed0:	ldr	r0, [r0]
    9ed4:	ldr	r0, [r0, #8]
    9ed8:	bl	0 <coda_type_time_validate>
    9edc:	mov	sp, fp
    9ee0:	pop	{fp, pc}

00009ee4 <cd_type_set_type>:
    9ee4:	push	{fp, lr}
    9ee8:	mov	fp, sp
    9eec:	sub	sp, sp, #8
    9ef0:	str	r0, [sp, #4]
    9ef4:	ldr	r0, [sp, #4]
    9ef8:	ldr	r0, [r0]
    9efc:	ldr	r0, [r0, #396]	; 0x18c
    9f00:	ldr	r0, [r0, #8]
    9f04:	str	r0, [sp]
    9f08:	ldr	r0, [sp]
    9f0c:	ldr	r0, [r0, #20]
    9f10:	movw	r1, #0
    9f14:	cmp	r0, r1
    9f18:	beq	9f34 <cd_type_set_type+0x50>
    9f1c:	ldr	r0, [sp, #4]
    9f20:	ldr	r0, [r0]
    9f24:	ldr	r0, [r0, #8]
    9f28:	ldr	r1, [sp]
    9f2c:	ldr	r1, [r1, #20]
    9f30:	bl	0 <coda_type_set_description>
    9f34:	ldr	r0, [sp]
    9f38:	ldr	r0, [r0, #36]	; 0x24
    9f3c:	movw	r1, #0
    9f40:	cmp	r0, r1
    9f44:	beq	9fc8 <cd_type_set_type+0xe4>
    9f48:	ldr	r0, [sp, #4]
    9f4c:	ldr	r0, [r0]
    9f50:	ldr	r0, [r0, #8]
    9f54:	ldr	r0, [r0, #36]	; 0x24
    9f58:	movw	r1, #0
    9f5c:	cmp	r0, r1
    9f60:	bne	9f68 <cd_type_set_type+0x84>
    9f64:	b	9f88 <cd_type_set_type+0xa4>
    9f68:	movw	r0, #0
    9f6c:	movt	r0, #0
    9f70:	movw	r1, #0
    9f74:	movt	r1, #0
    9f78:	movw	r2, #3653	; 0xe45
    9f7c:	movw	r3, #0
    9f80:	movt	r3, #0
    9f84:	bl	0 <__assert_fail>
    9f88:	ldr	r0, [sp]
    9f8c:	ldr	r0, [r0, #36]	; 0x24
    9f90:	ldr	r1, [sp, #4]
    9f94:	ldr	r1, [r1]
    9f98:	ldr	r1, [r1, #8]
    9f9c:	str	r0, [r1, #36]	; 0x24
    9fa0:	ldr	r0, [sp]
    9fa4:	ldr	r0, [r0, #36]	; 0x24
    9fa8:	ldr	r1, [sp, #4]
    9fac:	ldr	r1, [r1]
    9fb0:	ldr	r1, [r1, #8]
    9fb4:	ldr	r1, [r1]
    9fb8:	bl	a008 <type_set_format>
    9fbc:	ldr	r1, [sp]
    9fc0:	movw	r2, #0
    9fc4:	str	r2, [r1, #36]	; 0x24
    9fc8:	ldr	r0, [sp]
    9fcc:	bl	0 <coda_type_release>
    9fd0:	ldr	r0, [sp, #4]
    9fd4:	ldr	r0, [r0]
    9fd8:	ldr	r0, [r0, #8]
    9fdc:	ldr	r1, [sp, #4]
    9fe0:	ldr	r1, [r1]
    9fe4:	ldr	r1, [r1, #396]	; 0x18c
    9fe8:	str	r0, [r1, #8]
    9fec:	ldr	r0, [sp, #4]
    9ff0:	ldr	r0, [r0]
    9ff4:	movw	r1, #0
    9ff8:	str	r1, [r0, #8]
    9ffc:	mov	r0, r1
    a000:	mov	sp, fp
    a004:	pop	{fp, pc}

0000a008 <type_set_format>:
    a008:	push	{fp, lr}
    a00c:	mov	fp, sp
    a010:	sub	sp, sp, #24
    a014:	str	r0, [fp, #-4]
    a018:	str	r1, [fp, #-8]
    a01c:	ldr	r0, [fp, #-8]
    a020:	ldr	r1, [fp, #-4]
    a024:	str	r0, [r1]
    a028:	ldr	r0, [fp, #-4]
    a02c:	ldr	r0, [r0, #8]
    a030:	cmp	r0, #0
    a034:	str	r0, [sp, #4]
    a038:	beq	a060 <type_set_format+0x58>
    a03c:	b	a040 <type_set_format+0x38>
    a040:	ldr	r0, [sp, #4]
    a044:	cmp	r0, #1
    a048:	beq	a0b8 <type_set_format+0xb0>
    a04c:	b	a050 <type_set_format+0x48>
    a050:	ldr	r0, [sp, #4]
    a054:	cmp	r0, #6
    a058:	beq	a0cc <type_set_format+0xc4>
    a05c:	b	a0e0 <type_set_format+0xd8>
    a060:	ldr	r0, [fp, #-4]
    a064:	add	r1, sp, #12
    a068:	bl	0 <coda_type_get_num_record_fields>
    a06c:	movw	r1, #0
    a070:	str	r1, [sp, #8]
    a074:	ldr	r0, [sp, #8]
    a078:	ldr	r1, [sp, #12]
    a07c:	cmp	r0, r1
    a080:	bge	a0b4 <type_set_format+0xac>
    a084:	ldr	r0, [fp, #-4]
    a088:	ldr	r0, [r0, #52]	; 0x34
    a08c:	ldr	r1, [sp, #8]
    a090:	add	r0, r0, r1, lsl #2
    a094:	ldr	r0, [r0]
    a098:	ldr	r0, [r0, #8]
    a09c:	ldr	r1, [fp, #-8]
    a0a0:	bl	a008 <type_set_format>
    a0a4:	ldr	r0, [sp, #8]
    a0a8:	add	r0, r0, #1
    a0ac:	str	r0, [sp, #8]
    a0b0:	b	a074 <type_set_format+0x6c>
    a0b4:	b	a0e4 <type_set_format+0xdc>
    a0b8:	ldr	r0, [fp, #-4]
    a0bc:	ldr	r0, [r0, #40]	; 0x28
    a0c0:	ldr	r1, [fp, #-8]
    a0c4:	bl	a008 <type_set_format>
    a0c8:	b	a0e4 <type_set_format+0xdc>
    a0cc:	ldr	r0, [fp, #-4]
    a0d0:	ldr	r0, [r0, #44]	; 0x2c
    a0d4:	ldr	r1, [fp, #-8]
    a0d8:	bl	a008 <type_set_format>
    a0dc:	b	a0e4 <type_set_format+0xdc>
    a0e0:	b	a0e4 <type_set_format+0xdc>
    a0e4:	ldr	r0, [fp, #-4]
    a0e8:	ldr	r0, [r0, #36]	; 0x24
    a0ec:	movw	r1, #0
    a0f0:	cmp	r0, r1
    a0f4:	beq	a108 <type_set_format+0x100>
    a0f8:	ldr	r0, [fp, #-4]
    a0fc:	ldr	r0, [r0, #36]	; 0x24
    a100:	ldr	r1, [fp, #-8]
    a104:	bl	a008 <type_set_format>
    a108:	movw	r0, #0
    a10c:	mov	sp, fp
    a110:	pop	{fp, pc}

0000a114 <cd_union_set_field_expression>:
    a114:	push	{fp, lr}
    a118:	mov	fp, sp
    a11c:	sub	sp, sp, #8
    a120:	str	r0, [sp]
    a124:	ldr	r0, [sp]
    a128:	ldr	r0, [r0]
    a12c:	ldr	r0, [r0, #396]	; 0x18c
    a130:	ldr	r0, [r0, #8]
    a134:	ldr	r1, [sp]
    a138:	ldr	r1, [r1]
    a13c:	ldr	r1, [r1, #8]
    a140:	bl	0 <coda_type_union_set_field_expression>
    a144:	cmp	r0, #0
    a148:	beq	a158 <cd_union_set_field_expression+0x44>
    a14c:	mvn	r0, #0
    a150:	str	r0, [sp, #4]
    a154:	b	a16c <cd_union_set_field_expression+0x58>
    a158:	ldr	r0, [sp]
    a15c:	ldr	r0, [r0]
    a160:	movw	r1, #0
    a164:	str	r1, [r0, #8]
    a168:	str	r1, [sp, #4]
    a16c:	ldr	r0, [sp, #4]
    a170:	mov	sp, fp
    a174:	pop	{fp, pc}

0000a178 <cd_union_add_field>:
    a178:	push	{fp, lr}
    a17c:	mov	fp, sp
    a180:	sub	sp, sp, #16
    a184:	str	r0, [sp, #8]
    a188:	ldr	r0, [sp, #8]
    a18c:	ldr	r0, [r0]
    a190:	ldr	r0, [r0, #8]
    a194:	bl	0 <coda_type_record_field_set_optional>
    a198:	ldr	r1, [sp, #8]
    a19c:	ldr	r1, [r1]
    a1a0:	ldr	r1, [r1, #396]	; 0x18c
    a1a4:	ldr	r1, [r1, #8]
    a1a8:	ldr	r2, [sp, #8]
    a1ac:	ldr	r2, [r2]
    a1b0:	ldr	r2, [r2, #8]
    a1b4:	str	r0, [sp, #4]
    a1b8:	mov	r0, r1
    a1bc:	mov	r1, r2
    a1c0:	bl	0 <coda_type_record_add_field>
    a1c4:	cmp	r0, #0
    a1c8:	beq	a1d8 <cd_union_add_field+0x60>
    a1cc:	mvn	r0, #0
    a1d0:	str	r0, [fp, #-4]
    a1d4:	b	a1ec <cd_union_add_field+0x74>
    a1d8:	ldr	r0, [sp, #8]
    a1dc:	ldr	r0, [r0]
    a1e0:	movw	r1, #0
    a1e4:	str	r1, [r0, #8]
    a1e8:	str	r1, [fp, #-4]
    a1ec:	ldr	r0, [fp, #-4]
    a1f0:	mov	sp, fp
    a1f4:	pop	{fp, pc}

0000a1f8 <cd_union_finalise>:
    a1f8:	push	{fp, lr}
    a1fc:	mov	fp, sp
    a200:	sub	sp, sp, #8
    a204:	str	r0, [sp, #4]
    a208:	ldr	r0, [sp, #4]
    a20c:	ldr	r0, [r0]
    a210:	ldr	r0, [r0, #8]
    a214:	bl	0 <coda_type_record_validate>
    a218:	mov	sp, fp
    a21c:	pop	{fp, pc}

0000a220 <cd_vsf_integer_set_type>:
    a220:	push	{fp, lr}
    a224:	mov	fp, sp
    a228:	sub	sp, sp, #8
    a22c:	str	r0, [sp, #4]
    a230:	ldr	r0, [sp, #4]
    a234:	ldr	r0, [r0]
    a238:	ldr	r0, [r0, #396]	; 0x18c
    a23c:	ldr	r0, [r0, #8]
    a240:	ldr	r1, [sp, #4]
    a244:	ldr	r1, [r1]
    a248:	ldr	r1, [r1, #8]
    a24c:	bl	0 <coda_type_vsf_integer_set_type>
    a250:	mov	sp, fp
    a254:	pop	{fp, pc}

0000a258 <cd_scale_factor_init>:
    a258:	push	{fp, lr}
    a25c:	mov	fp, sp
    a260:	sub	sp, sp, #16
    a264:	str	r0, [sp, #8]
    a268:	str	r1, [sp, #4]
    a26c:	ldr	r0, [sp, #4]
    a270:	movw	r1, #0
    a274:	movt	r1, #0
    a278:	bl	24f4 <get_attribute_value>
    a27c:	movw	r1, #0
    a280:	cmp	r0, r1
    a284:	beq	a2a4 <cd_scale_factor_init+0x4c>
    a288:	ldr	r0, [pc, #348]	; a3ec <cd_scale_factor_init+0x194>
    a28c:	movw	r1, #0
    a290:	movt	r1, #0
    a294:	bl	0 <coda_set_error>
    a298:	mvn	r0, #0
    a29c:	str	r0, [fp, #-4]
    a2a0:	b	a3e0 <cd_scale_factor_init+0x188>
    a2a4:	ldr	r0, [sp, #8]
    a2a8:	ldr	r0, [r0]
    a2ac:	ldr	r0, [r0, #396]	; 0x18c
    a2b0:	ldr	r0, [r0, #48]	; 0x30
    a2b4:	cmp	r0, #0
    a2b8:	beq	a2c0 <cd_scale_factor_init+0x68>
    a2bc:	b	a2e0 <cd_scale_factor_init+0x88>
    a2c0:	movw	r0, #0
    a2c4:	movt	r0, #0
    a2c8:	movw	r1, #0
    a2cc:	movt	r1, #0
    a2d0:	movw	r2, #3242	; 0xcaa
    a2d4:	movw	r3, #0
    a2d8:	movt	r3, #0
    a2dc:	bl	0 <__assert_fail>
    a2e0:	ldr	r0, [sp, #8]
    a2e4:	ldr	r0, [r0]
    a2e8:	ldr	r0, [r0, #396]	; 0x18c
    a2ec:	ldr	r0, [r0, #44]	; 0x2c
    a2f0:	ldr	r1, [sp, #8]
    a2f4:	ldr	r1, [r1]
    a2f8:	str	r0, [r1, #44]	; 0x2c
    a2fc:	ldr	r0, [sp, #8]
    a300:	ldr	r0, [r0]
    a304:	movw	r1, #1
    a308:	str	r1, [r0, #48]	; 0x30
    a30c:	ldr	r0, [sp, #4]
    a310:	movw	r1, #0
    a314:	movt	r1, #0
    a318:	bl	24f4 <get_attribute_value>
    a31c:	movw	r1, #0
    a320:	cmp	r0, r1
    a324:	beq	a344 <cd_scale_factor_init+0xec>
    a328:	ldr	r0, [pc, #188]	; a3ec <cd_scale_factor_init+0x194>
    a32c:	movw	r1, #0
    a330:	movt	r1, #0
    a334:	bl	0 <coda_set_error>
    a338:	mvn	r0, #0
    a33c:	str	r0, [fp, #-4]
    a340:	b	a3e0 <cd_scale_factor_init+0x188>
    a344:	ldr	r0, [sp, #4]
    a348:	movw	r1, #0
    a34c:	movt	r1, #0
    a350:	bl	24f4 <get_attribute_value>
    a354:	movw	r1, #0
    a358:	cmp	r0, r1
    a35c:	beq	a37c <cd_scale_factor_init+0x124>
    a360:	ldr	r0, [pc, #132]	; a3ec <cd_scale_factor_init+0x194>
    a364:	movw	r1, #0
    a368:	movt	r1, #0
    a36c:	bl	0 <coda_set_error>
    a370:	mvn	r0, #0
    a374:	str	r0, [fp, #-4]
    a378:	b	a3e0 <cd_scale_factor_init+0x188>
    a37c:	movw	r0, #0
    a380:	movt	r0, #0
    a384:	ldr	r1, [sp, #8]
    a388:	ldr	r1, [r1]
    a38c:	str	r0, [r1, #40]	; 0x28
    a390:	ldr	r0, [sp, #8]
    a394:	ldr	r0, [r0]
    a398:	movw	r1, #0
    a39c:	movt	r1, #0
    a3a0:	bl	1684 <register_type_elements>
    a3a4:	ldr	r0, [sp, #8]
    a3a8:	ldr	r0, [r0]
    a3ac:	movw	r1, #0
    a3b0:	movt	r1, #0
    a3b4:	str	r1, [r0, #36]	; 0x24
    a3b8:	ldr	r0, [sp, #8]
    a3bc:	ldr	r0, [r0]
    a3c0:	movw	r1, #11
    a3c4:	movw	r2, #0
    a3c8:	movt	r2, #0
    a3cc:	movw	r3, #0
    a3d0:	movt	r3, #0
    a3d4:	bl	1344 <register_sub_element>
    a3d8:	movw	r0, #0
    a3dc:	str	r0, [fp, #-4]
    a3e0:	ldr	r0, [fp, #-4]
    a3e4:	mov	sp, fp
    a3e8:	pop	{fp, pc}
    a3ec:	.word	0xfffffe70

0000a3f0 <cd_vsf_integer_set_scale_factor>:
    a3f0:	push	{fp, lr}
    a3f4:	mov	fp, sp
    a3f8:	sub	sp, sp, #8
    a3fc:	str	r0, [sp, #4]
    a400:	ldr	r0, [sp, #4]
    a404:	ldr	r0, [r0]
    a408:	ldr	r0, [r0, #396]	; 0x18c
    a40c:	ldr	r0, [r0, #8]
    a410:	ldr	r1, [sp, #4]
    a414:	ldr	r1, [r1]
    a418:	ldr	r1, [r1, #8]
    a41c:	bl	0 <coda_type_vsf_integer_set_scale_factor>
    a420:	mov	sp, fp
    a424:	pop	{fp, pc}

0000a428 <cd_vsf_integer_set_unit>:
    a428:	push	{fp, lr}
    a42c:	mov	fp, sp
    a430:	sub	sp, sp, #8
    a434:	str	r0, [sp]
    a438:	ldr	r0, [sp]
    a43c:	ldr	r0, [r0]
    a440:	ldr	r0, [r0, #12]
    a444:	movw	r1, #0
    a448:	cmp	r0, r1
    a44c:	bne	a474 <cd_vsf_integer_set_unit+0x4c>
    a450:	ldr	r0, [sp]
    a454:	ldr	r0, [r0]
    a458:	ldr	r0, [r0, #396]	; 0x18c
    a45c:	ldr	r0, [r0, #8]
    a460:	movw	r1, #0
    a464:	movt	r1, #0
    a468:	bl	0 <coda_type_vsf_integer_set_unit>
    a46c:	str	r0, [sp, #4]
    a470:	b	a498 <cd_vsf_integer_set_unit+0x70>
    a474:	ldr	r0, [sp]
    a478:	ldr	r0, [r0]
    a47c:	ldr	r0, [r0, #396]	; 0x18c
    a480:	ldr	r0, [r0, #8]
    a484:	ldr	r1, [sp]
    a488:	ldr	r1, [r1]
    a48c:	ldr	r1, [r1, #12]
    a490:	bl	0 <coda_type_vsf_integer_set_unit>
    a494:	str	r0, [sp, #4]
    a498:	ldr	r0, [sp, #4]
    a49c:	mov	sp, fp
    a4a0:	pop	{fp, pc}

0000a4a4 <cd_vsf_integer_finalise>:
    a4a4:	push	{fp, lr}
    a4a8:	mov	fp, sp
    a4ac:	sub	sp, sp, #8
    a4b0:	str	r0, [sp, #4]
    a4b4:	ldr	r0, [sp, #4]
    a4b8:	ldr	r0, [r0]
    a4bc:	ldr	r0, [r0, #8]
    a4c0:	bl	0 <coda_type_vsf_integer_validate>
    a4c4:	mov	sp, fp
    a4c8:	pop	{fp, pc}

0000a4cc <cd_scale_factor_set_type>:
    a4cc:	sub	sp, sp, #4
    a4d0:	str	r0, [sp]
    a4d4:	ldr	r0, [sp]
    a4d8:	ldr	r0, [r0]
    a4dc:	ldr	r0, [r0, #8]
    a4e0:	ldr	r1, [sp]
    a4e4:	ldr	r1, [r1]
    a4e8:	ldr	r1, [r1, #396]	; 0x18c
    a4ec:	str	r0, [r1, #8]
    a4f0:	ldr	r0, [sp]
    a4f4:	ldr	r0, [r0]
    a4f8:	movw	r1, #0
    a4fc:	str	r1, [r0, #8]
    a500:	mov	r0, r1
    a504:	add	sp, sp, #4
    a508:	bx	lr

0000a50c <cd_scale_factor_finalise>:
    a50c:	push	{fp, lr}
    a510:	mov	fp, sp
    a514:	sub	sp, sp, #8
    a518:	str	r0, [sp]
    a51c:	ldr	r0, [sp]
    a520:	ldr	r0, [r0]
    a524:	ldr	r0, [r0, #8]
    a528:	movw	r1, #0
    a52c:	cmp	r0, r1
    a530:	bne	a550 <cd_scale_factor_finalise+0x44>
    a534:	ldr	r0, [pc, #40]	; a564 <cd_scale_factor_finalise+0x58>
    a538:	movw	r1, #0
    a53c:	movt	r1, #0
    a540:	bl	0 <coda_set_error>
    a544:	mvn	r0, #0
    a548:	str	r0, [sp, #4]
    a54c:	b	a558 <cd_scale_factor_finalise+0x4c>
    a550:	movw	r0, #0
    a554:	str	r0, [sp, #4]
    a558:	ldr	r0, [sp, #4]
    a55c:	mov	sp, fp
    a560:	pop	{fp, pc}
    a564:	.word	0xfffffe70

0000a568 <dummy_free_handler>:
    a568:	sub	sp, sp, #4
    a56c:	str	r0, [sp]
    a570:	add	sp, sp, #4
    a574:	bx	lr

0000a578 <xml_root_init>:
    a578:	push	{fp, lr}
    a57c:	mov	fp, sp
    a580:	sub	sp, sp, #24
    a584:	str	r0, [fp, #-8]
    a588:	str	r1, [sp, #12]
    a58c:	movw	r0, #0
    a590:	str	r0, [sp, #8]
    a594:	ldr	r1, [fp, #-8]
    a598:	ldr	r1, [r1, #28]
    a59c:	cmp	r1, r0
    a5a0:	beq	a5a8 <xml_root_init+0x30>
    a5a4:	b	a5c8 <xml_root_init+0x50>
    a5a8:	movw	r0, #0
    a5ac:	movt	r0, #0
    a5b0:	movw	r1, #0
    a5b4:	movt	r1, #0
    a5b8:	movw	r2, #1184	; 0x4a0
    a5bc:	movw	r3, #0
    a5c0:	movt	r3, #0
    a5c4:	bl	0 <__assert_fail>
    a5c8:	ldr	r0, [fp, #-8]
    a5cc:	ldr	r1, [sp, #12]
    a5d0:	bl	7028 <handle_format_attribute_for_type>
    a5d4:	cmp	r0, #0
    a5d8:	beq	a5e8 <xml_root_init+0x70>
    a5dc:	mvn	r0, #0
    a5e0:	str	r0, [fp, #-4]
    a5e4:	b	a750 <xml_root_init+0x1d8>
    a5e8:	ldr	r0, [fp, #-8]
    a5ec:	ldr	r0, [r0]
    a5f0:	ldr	r0, [r0, #44]	; 0x2c
    a5f4:	cmp	r0, #2
    a5f8:	beq	a640 <xml_root_init+0xc8>
    a5fc:	ldr	r0, [fp, #-8]
    a600:	ldr	r0, [r0]
    a604:	ldr	r0, [r0, #44]	; 0x2c
    a608:	bl	0 <coda_type_get_format_name>
    a60c:	ldr	r1, [pc, #328]	; a75c <xml_root_init+0x1e4>
    a610:	ldr	r2, [fp, #-8]
    a614:	ldr	r2, [r2, #28]
    a618:	ldr	r3, [r2, #8]
    a61c:	str	r0, [sp, #4]
    a620:	mov	r0, r1
    a624:	movw	r1, #0
    a628:	movt	r1, #0
    a62c:	ldr	r2, [sp, #4]
    a630:	bl	0 <coda_set_error>
    a634:	mvn	r0, #0
    a638:	str	r0, [fp, #-4]
    a63c:	b	a750 <xml_root_init+0x1d8>
    a640:	ldr	r0, [sp, #12]
    a644:	movw	r1, #0
    a648:	movt	r1, #0
    a64c:	bl	24f4 <get_attribute_value>
    a650:	str	r0, [sp, #8]
    a654:	ldr	r0, [sp, #8]
    a658:	movw	r1, #0
    a65c:	cmp	r0, r1
    a660:	beq	a680 <xml_root_init+0x108>
    a664:	ldr	r0, [pc, #240]	; a75c <xml_root_init+0x1e4>
    a668:	movw	r1, #0
    a66c:	movt	r1, #0
    a670:	bl	0 <coda_set_error>
    a674:	mvn	r0, #0
    a678:	str	r0, [fp, #-4]
    a67c:	b	a750 <xml_root_init+0x1d8>
    a680:	ldr	r0, [sp, #12]
    a684:	movw	r1, #0
    a688:	movt	r1, #0
    a68c:	bl	24f4 <get_attribute_value>
    a690:	str	r0, [sp, #8]
    a694:	ldr	r0, [sp, #8]
    a698:	movw	r1, #0
    a69c:	cmp	r0, r1
    a6a0:	beq	a6c0 <xml_root_init+0x148>
    a6a4:	ldr	r0, [pc, #176]	; a75c <xml_root_init+0x1e4>
    a6a8:	movw	r1, #0
    a6ac:	movt	r1, #0
    a6b0:	bl	0 <coda_set_error>
    a6b4:	mvn	r0, #0
    a6b8:	str	r0, [fp, #-4]
    a6bc:	b	a750 <xml_root_init+0x1d8>
    a6c0:	movw	r0, #0
    a6c4:	movt	r0, #0
    a6c8:	ldr	r1, [fp, #-8]
    a6cc:	ldr	r1, [r1]
    a6d0:	str	r0, [r1, #40]	; 0x28
    a6d4:	movw	r0, #2
    a6d8:	bl	0 <coda_type_record_new>
    a6dc:	ldr	r1, [fp, #-8]
    a6e0:	ldr	r1, [r1]
    a6e4:	str	r0, [r1, #8]
    a6e8:	ldr	r0, [fp, #-8]
    a6ec:	ldr	r1, [sp, #12]
    a6f0:	bl	7154 <handle_name_attribute_for_type>
    a6f4:	cmp	r0, #0
    a6f8:	beq	a708 <xml_root_init+0x190>
    a6fc:	mvn	r0, #0
    a700:	str	r0, [fp, #-4]
    a704:	b	a750 <xml_root_init+0x1d8>
    a708:	ldr	r0, [fp, #-8]
    a70c:	ldr	r0, [r0]
    a710:	movw	r1, #11
    a714:	movw	r2, #0
    a718:	movt	r2, #0
    a71c:	movw	r3, #0
    a720:	movt	r3, #0
    a724:	bl	1344 <register_sub_element>
    a728:	ldr	r0, [fp, #-8]
    a72c:	ldr	r0, [r0]
    a730:	movw	r1, #14
    a734:	movw	r2, #0
    a738:	movt	r2, #0
    a73c:	movw	r3, #0
    a740:	movt	r3, #0
    a744:	bl	1344 <register_sub_element>
    a748:	movw	r0, #0
    a74c:	str	r0, [fp, #-4]
    a750:	ldr	r0, [fp, #-4]
    a754:	mov	sp, fp
    a758:	pop	{fp, pc}
    a75c:	.word	0xfffffe70

0000a760 <cd_product_definition_set_root_type>:
    a760:	push	{fp, lr}
    a764:	mov	fp, sp
    a768:	sub	sp, sp, #8
    a76c:	str	r0, [sp]
    a770:	ldr	r0, [sp]
    a774:	ldr	r0, [r0]
    a778:	ldr	r0, [r0, #396]	; 0x18c
    a77c:	ldr	r0, [r0, #8]
    a780:	ldr	r1, [sp]
    a784:	ldr	r1, [r1]
    a788:	ldr	r1, [r1, #8]
    a78c:	bl	0 <coda_product_definition_set_root_type>
    a790:	cmp	r0, #0
    a794:	beq	a7a4 <cd_product_definition_set_root_type+0x44>
    a798:	mvn	r0, #0
    a79c:	str	r0, [sp, #4]
    a7a0:	b	a7ac <cd_product_definition_set_root_type+0x4c>
    a7a4:	movw	r0, #0
    a7a8:	str	r0, [sp, #4]
    a7ac:	ldr	r0, [sp, #4]
    a7b0:	mov	sp, fp
    a7b4:	pop	{fp, pc}

0000a7b8 <cd_product_variable_init>:
    a7b8:	push	{fp, lr}
    a7bc:	mov	fp, sp
    a7c0:	sub	sp, sp, #16
    a7c4:	str	r0, [sp, #8]
    a7c8:	str	r1, [sp, #4]
    a7cc:	ldr	r0, [sp, #4]
    a7d0:	ldr	r1, [sp, #8]
    a7d4:	ldr	r1, [r1]
    a7d8:	ldr	r2, [r1]
    a7dc:	movw	r1, #0
    a7e0:	movt	r1, #0
    a7e4:	bl	20e4 <get_mandatory_attribute_value>
    a7e8:	str	r0, [sp]
    a7ec:	ldr	r0, [sp]
    a7f0:	movw	r1, #0
    a7f4:	cmp	r0, r1
    a7f8:	bne	a808 <cd_product_variable_init+0x50>
    a7fc:	mvn	r0, #0
    a800:	str	r0, [fp, #-4]
    a804:	b	a8b0 <cd_product_variable_init+0xf8>
    a808:	movw	r0, #0
    a80c:	movt	r0, #0
    a810:	ldr	r1, [sp, #8]
    a814:	ldr	r1, [r1]
    a818:	str	r0, [r1, #40]	; 0x28
    a81c:	ldr	r0, [sp]
    a820:	bl	0 <coda_product_variable_new>
    a824:	ldr	r1, [sp, #8]
    a828:	ldr	r1, [r1]
    a82c:	str	r0, [r1, #8]
    a830:	ldr	r0, [sp, #8]
    a834:	ldr	r0, [r0]
    a838:	ldr	r0, [r0, #8]
    a83c:	movw	r1, #0
    a840:	cmp	r0, r1
    a844:	bne	a854 <cd_product_variable_init+0x9c>
    a848:	mvn	r0, #0
    a84c:	str	r0, [fp, #-4]
    a850:	b	a8b0 <cd_product_variable_init+0xf8>
    a854:	ldr	r0, [sp, #8]
    a858:	ldr	r0, [r0]
    a85c:	movw	r1, #13
    a860:	movw	r2, #0
    a864:	movt	r2, #0
    a868:	movw	r3, #0
    a86c:	movt	r3, #0
    a870:	bl	1344 <register_sub_element>
    a874:	ldr	r0, [sp, #8]
    a878:	ldr	r0, [r0]
    a87c:	movw	r1, #19
    a880:	movw	r2, #0
    a884:	movt	r2, #0
    a888:	movw	r3, #0
    a88c:	movt	r3, #0
    a890:	bl	1344 <register_sub_element>
    a894:	ldr	r0, [sp, #8]
    a898:	ldr	r0, [r0]
    a89c:	movw	r1, #0
    a8a0:	movt	r1, #0
    a8a4:	str	r1, [r0, #36]	; 0x24
    a8a8:	movw	r0, #0
    a8ac:	str	r0, [fp, #-4]
    a8b0:	ldr	r0, [fp, #-4]
    a8b4:	mov	sp, fp
    a8b8:	pop	{fp, pc}

0000a8bc <cd_product_definition_add_product_variable>:
    a8bc:	push	{fp, lr}
    a8c0:	mov	fp, sp
    a8c4:	sub	sp, sp, #8
    a8c8:	str	r0, [sp]
    a8cc:	ldr	r0, [sp]
    a8d0:	ldr	r0, [r0]
    a8d4:	ldr	r0, [r0, #396]	; 0x18c
    a8d8:	ldr	r0, [r0, #8]
    a8dc:	ldr	r1, [sp]
    a8e0:	ldr	r1, [r1]
    a8e4:	ldr	r1, [r1, #8]
    a8e8:	bl	0 <coda_product_definition_add_product_variable>
    a8ec:	cmp	r0, #0
    a8f0:	beq	a900 <cd_product_definition_add_product_variable+0x44>
    a8f4:	mvn	r0, #0
    a8f8:	str	r0, [sp, #4]
    a8fc:	b	a914 <cd_product_definition_add_product_variable+0x58>
    a900:	ldr	r0, [sp]
    a904:	ldr	r0, [r0]
    a908:	movw	r1, #0
    a90c:	str	r1, [r0, #8]
    a910:	str	r1, [sp, #4]
    a914:	ldr	r0, [sp, #4]
    a918:	mov	sp, fp
    a91c:	pop	{fp, pc}

0000a920 <cd_product_definition_finalise>:
    a920:	push	{fp, lr}
    a924:	mov	fp, sp
    a928:	sub	sp, sp, #8
    a92c:	str	r0, [sp, #4]
    a930:	ldr	r0, [sp, #4]
    a934:	ldr	r0, [r0]
    a938:	ldr	r0, [r0, #8]
    a93c:	bl	0 <coda_product_definition_validate>
    a940:	mov	sp, fp
    a944:	pop	{fp, pc}

0000a948 <xml_root_set_field>:
    a948:	push	{fp, lr}
    a94c:	mov	fp, sp
    a950:	sub	sp, sp, #8
    a954:	str	r0, [sp]
    a958:	ldr	r0, [sp]
    a95c:	ldr	r0, [r0]
    a960:	ldr	r0, [r0, #396]	; 0x18c
    a964:	ldr	r0, [r0, #8]
    a968:	ldr	r1, [sp]
    a96c:	ldr	r1, [r1]
    a970:	ldr	r1, [r1, #8]
    a974:	bl	0 <coda_type_record_add_field>
    a978:	cmp	r0, #0
    a97c:	beq	a98c <xml_root_set_field+0x44>
    a980:	mvn	r0, #0
    a984:	str	r0, [sp, #4]
    a988:	b	a9a0 <xml_root_set_field+0x58>
    a98c:	ldr	r0, [sp]
    a990:	ldr	r0, [r0]
    a994:	movw	r1, #0
    a998:	str	r1, [r0, #8]
    a99c:	str	r1, [sp, #4]
    a9a0:	ldr	r0, [sp, #4]
    a9a4:	mov	sp, fp
    a9a8:	pop	{fp, pc}

0000a9ac <cd_product_variable_set_size_expression>:
    a9ac:	push	{fp, lr}
    a9b0:	mov	fp, sp
    a9b4:	sub	sp, sp, #8
    a9b8:	str	r0, [sp]
    a9bc:	ldr	r0, [sp]
    a9c0:	ldr	r0, [r0]
    a9c4:	ldr	r0, [r0, #396]	; 0x18c
    a9c8:	ldr	r0, [r0, #8]
    a9cc:	ldr	r1, [sp]
    a9d0:	ldr	r1, [r1]
    a9d4:	ldr	r1, [r1, #8]
    a9d8:	bl	0 <coda_product_variable_set_size_expression>
    a9dc:	cmp	r0, #0
    a9e0:	beq	a9f0 <cd_product_variable_set_size_expression+0x44>
    a9e4:	mvn	r0, #0
    a9e8:	str	r0, [sp, #4]
    a9ec:	b	aa04 <cd_product_variable_set_size_expression+0x58>
    a9f0:	ldr	r0, [sp]
    a9f4:	ldr	r0, [r0]
    a9f8:	movw	r1, #0
    a9fc:	str	r1, [r0, #8]
    aa00:	str	r1, [sp, #4]
    aa04:	ldr	r0, [sp, #4]
    aa08:	mov	sp, fp
    aa0c:	pop	{fp, pc}

0000aa10 <void_expression_init>:
    aa10:	sub	sp, sp, #8
    aa14:	movw	r2, #0
    aa18:	movt	r2, #0
    aa1c:	str	r0, [sp, #4]
    aa20:	str	r1, [sp]
    aa24:	ldr	r0, [sp, #4]
    aa28:	ldr	r0, [r0]
    aa2c:	movw	r1, #1
    aa30:	str	r1, [r0, #32]
    aa34:	ldr	r0, [sp, #4]
    aa38:	ldr	r0, [r0]
    aa3c:	str	r2, [r0, #40]	; 0x28
    aa40:	ldr	r0, [sp, #4]
    aa44:	ldr	r0, [r0]
    aa48:	movw	r1, #0
    aa4c:	movt	r1, #0
    aa50:	str	r1, [r0, #36]	; 0x24
    aa54:	movw	r0, #0
    aa58:	add	sp, sp, #8
    aa5c:	bx	lr

0000aa60 <cd_product_variable_set_init_expression>:
    aa60:	push	{fp, lr}
    aa64:	mov	fp, sp
    aa68:	sub	sp, sp, #8
    aa6c:	str	r0, [sp]
    aa70:	ldr	r0, [sp]
    aa74:	ldr	r0, [r0]
    aa78:	ldr	r0, [r0, #396]	; 0x18c
    aa7c:	ldr	r0, [r0, #8]
    aa80:	ldr	r1, [sp]
    aa84:	ldr	r1, [r1]
    aa88:	ldr	r1, [r1, #8]
    aa8c:	bl	0 <coda_product_variable_set_init_expression>
    aa90:	cmp	r0, #0
    aa94:	beq	aaa4 <cd_product_variable_set_init_expression+0x44>
    aa98:	mvn	r0, #0
    aa9c:	str	r0, [sp, #4]
    aaa0:	b	aab8 <cd_product_variable_set_init_expression+0x58>
    aaa4:	ldr	r0, [sp]
    aaa8:	ldr	r0, [r0]
    aaac:	movw	r1, #0
    aab0:	str	r1, [r0, #8]
    aab4:	str	r1, [sp, #4]
    aab8:	ldr	r0, [sp, #4]
    aabc:	mov	sp, fp
    aac0:	pop	{fp, pc}

0000aac4 <cd_product_variable_finalise>:
    aac4:	push	{fp, lr}
    aac8:	mov	fp, sp
    aacc:	sub	sp, sp, #8
    aad0:	str	r0, [sp, #4]
    aad4:	ldr	r0, [sp, #4]
    aad8:	ldr	r0, [r0]
    aadc:	ldr	r0, [r0, #8]
    aae0:	bl	0 <coda_product_variable_validate>
    aae4:	mov	sp, fp
    aae8:	pop	{fp, pc}

0000aaec <void_expression_finalise>:
    aaec:	push	{fp, lr}
    aaf0:	mov	fp, sp
    aaf4:	sub	sp, sp, #24
    aaf8:	str	r0, [fp, #-8]
    aafc:	ldr	r0, [fp, #-8]
    ab00:	ldr	r0, [r0]
    ab04:	ldr	r0, [r0, #12]
    ab08:	movw	r1, #0
    ab0c:	cmp	r0, r1
    ab10:	beq	ab78 <void_expression_finalise+0x8c>
    ab14:	ldr	r0, [fp, #-8]
    ab18:	ldr	r0, [r0]
    ab1c:	ldr	r0, [r0, #12]
    ab20:	ldr	r1, [fp, #-8]
    ab24:	ldr	r1, [r1]
    ab28:	ldr	r1, [r1, #12]
    ab2c:	str	r0, [sp, #4]
    ab30:	mov	r0, r1
    ab34:	bl	0 <strlen>
    ab38:	ldr	r1, [sp, #4]
    ab3c:	str	r0, [sp]
    ab40:	mov	r0, r1
    ab44:	ldr	r1, [sp]
    ab48:	bl	1ff0 <is_whitespace>
    ab4c:	cmp	r0, #0
    ab50:	beq	ab74 <void_expression_finalise+0x88>
    ab54:	ldr	r0, [fp, #-8]
    ab58:	ldr	r0, [r0]
    ab5c:	ldr	r0, [r0, #12]
    ab60:	bl	0 <free>
    ab64:	ldr	r0, [fp, #-8]
    ab68:	ldr	r0, [r0]
    ab6c:	movw	r1, #0
    ab70:	str	r1, [r0, #12]
    ab74:	b	ab78 <void_expression_finalise+0x8c>
    ab78:	ldr	r0, [fp, #-8]
    ab7c:	ldr	r0, [r0]
    ab80:	ldr	r0, [r0, #12]
    ab84:	movw	r1, #0
    ab88:	cmp	r0, r1
    ab8c:	bne	abac <void_expression_finalise+0xc0>
    ab90:	ldr	r0, [pc, #200]	; ac60 <void_expression_finalise+0x174>
    ab94:	movw	r1, #0
    ab98:	movt	r1, #0
    ab9c:	bl	0 <coda_set_error>
    aba0:	mvn	r0, #0
    aba4:	str	r0, [fp, #-4]
    aba8:	b	ac54 <void_expression_finalise+0x168>
    abac:	ldr	r0, [fp, #-8]
    abb0:	ldr	r0, [r0]
    abb4:	ldr	r0, [r0, #12]
    abb8:	add	r1, sp, #8
    abbc:	bl	0 <coda_expression_from_string>
    abc0:	cmp	r0, #0
    abc4:	beq	abd4 <void_expression_finalise+0xe8>
    abc8:	mvn	r0, #0
    abcc:	str	r0, [fp, #-4]
    abd0:	b	ac54 <void_expression_finalise+0x168>
    abd4:	ldr	r0, [fp, #-8]
    abd8:	ldr	r0, [r0]
    abdc:	ldr	r0, [r0, #12]
    abe0:	bl	0 <free>
    abe4:	ldr	r0, [fp, #-8]
    abe8:	ldr	r0, [r0]
    abec:	movw	r1, #0
    abf0:	str	r1, [r0, #12]
    abf4:	ldr	r0, [sp, #8]
    abf8:	ldr	r1, [fp, #-8]
    abfc:	ldr	r1, [r1]
    ac00:	str	r0, [r1, #8]
    ac04:	ldr	r0, [sp, #8]
    ac08:	add	r1, sp, #12
    ac0c:	bl	0 <coda_expression_get_type>
    ac10:	cmp	r0, #0
    ac14:	beq	ac24 <void_expression_finalise+0x138>
    ac18:	mvn	r0, #0
    ac1c:	str	r0, [fp, #-4]
    ac20:	b	ac54 <void_expression_finalise+0x168>
    ac24:	ldr	r0, [sp, #12]
    ac28:	cmp	r0, #5
    ac2c:	beq	ac4c <void_expression_finalise+0x160>
    ac30:	ldr	r0, [pc, #40]	; ac60 <void_expression_finalise+0x174>
    ac34:	movw	r1, #0
    ac38:	movt	r1, #0
    ac3c:	bl	0 <coda_set_error>
    ac40:	mvn	r0, #0
    ac44:	str	r0, [fp, #-4]
    ac48:	b	ac54 <void_expression_finalise+0x168>
    ac4c:	movw	r0, #0
    ac50:	str	r0, [fp, #-4]
    ac54:	ldr	r0, [fp, #-4]
    ac58:	mov	sp, fp
    ac5c:	pop	{fp, pc}
    ac60:	.word	0xfffffe70
