
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascbin-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascbin_cursor_set_product>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #8
       c:	str	r0, [sp, #4]
      10:	str	r1, [sp]
      14:	ldr	r0, [sp]
      18:	ldr	r1, [sp, #4]
      1c:	str	r0, [r1]
      20:	ldr	r0, [sp, #4]
      24:	movw	r1, #1
      28:	str	r1, [r0, #4]
      2c:	ldr	r0, [sp]
      30:	ldr	r0, [r0, #20]
      34:	movw	r1, #0
      38:	cmp	r0, r1
      3c:	beq	44 <coda_ascbin_cursor_set_product+0x44>
      40:	b	64 <coda_ascbin_cursor_set_product+0x64>
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	movw	r1, #0
      50:	movt	r1, #0
      54:	movw	r2, #234	; 0xea
      58:	movw	r3, #0
      5c:	movt	r3, #0
      60:	bl	0 <__assert_fail>
      64:	ldr	r0, [sp]
      68:	ldr	r0, [r0, #20]
      6c:	ldr	r1, [sp, #4]
      70:	str	r0, [r1, #8]
      74:	ldr	r0, [sp, #4]
      78:	mvn	r1, #0
      7c:	str	r1, [r0, #12]
      80:	ldr	r0, [sp, #4]
      84:	mov	r1, #0
      88:	str	r1, [r0, #20]
      8c:	str	r1, [r0, #16]
      90:	movw	r0, #0
      94:	mov	sp, fp
      98:	pop	{fp, pc}

0000009c <coda_ascbin_cursor_goto_record_field_by_index>:
      9c:	push	{fp, lr}
      a0:	mov	fp, sp
      a4:	sub	sp, sp, #48	; 0x30
      a8:	str	r0, [fp, #-8]
      ac:	str	r1, [fp, #-12]
      b0:	mov	r0, #1
      b4:	str	r0, [sp, #20]
      b8:	ldr	r0, [fp, #-8]
      bc:	add	r1, r0, #8
      c0:	ldr	r0, [r0, #4]
      c4:	sub	r0, r0, #1
      c8:	add	r0, r1, r0, lsl #4
      cc:	ldr	r0, [r0]
      d0:	ldr	r0, [r0]
      d4:	cmp	r0, #100	; 0x64
      d8:	bcs	fc <coda_ascbin_cursor_goto_record_field_by_index+0x60>
      dc:	ldr	r0, [fp, #-8]
      e0:	add	r1, r0, #8
      e4:	ldr	r0, [r0, #4]
      e8:	sub	r0, r0, #1
      ec:	add	r0, r1, r0, lsl #4
      f0:	ldr	r0, [r0]
      f4:	str	r0, [sp, #4]
      f8:	b	11c <coda_ascbin_cursor_goto_record_field_by_index+0x80>
      fc:	ldr	r0, [fp, #-8]
     100:	add	r1, r0, #8
     104:	ldr	r0, [r0, #4]
     108:	sub	r0, r0, #1
     10c:	add	r0, r1, r0, lsl #4
     110:	ldr	r0, [r0]
     114:	ldr	r0, [r0, #4]
     118:	str	r0, [sp, #4]
     11c:	ldr	r0, [sp, #4]
     120:	str	r0, [fp, #-16]
     124:	ldr	r0, [fp, #-12]
     128:	cmp	r0, #0
     12c:	blt	144 <coda_ascbin_cursor_goto_record_field_by_index+0xa8>
     130:	ldr	r0, [fp, #-12]
     134:	ldr	r1, [fp, #-16]
     138:	ldr	r1, [r1, #48]	; 0x30
     13c:	cmp	r0, r1
     140:	blt	16c <coda_ascbin_cursor_goto_record_field_by_index+0xd0>
     144:	ldr	r2, [fp, #-12]
     148:	ldr	r0, [fp, #-16]
     14c:	ldr	r3, [r0, #48]	; 0x30
     150:	mvn	r0, #100	; 0x64
     154:	movw	r1, #0
     158:	movt	r1, #0
     15c:	bl	0 <coda_set_error>
     160:	mvn	r0, #0
     164:	str	r0, [fp, #-4]
     168:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     16c:	ldr	r0, [fp, #-8]
     170:	ldr	r1, [r0, #4]
     174:	ldr	r1, [r0, r1, lsl #4]!
     178:	ldr	r0, [r0, #4]
     17c:	str	r0, [sp, #28]
     180:	str	r1, [sp, #24]
     184:	ldr	r0, [fp, #-16]
     188:	ldr	r0, [r0, #68]	; 0x44
     18c:	movw	r1, #0
     190:	cmp	r0, r1
     194:	beq	1d4 <coda_ascbin_cursor_goto_record_field_by_index+0x138>
     198:	ldr	r0, [fp, #-8]
     19c:	add	r1, sp, #16
     1a0:	bl	0 <coda_cursor_get_available_union_field_index>
     1a4:	cmp	r0, #0
     1a8:	beq	1b8 <coda_ascbin_cursor_goto_record_field_by_index+0x11c>
     1ac:	mvn	r0, #0
     1b0:	str	r0, [fp, #-4]
     1b4:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     1b8:	ldr	r0, [fp, #-12]
     1bc:	ldr	r1, [sp, #16]
     1c0:	cmp	r0, r1
     1c4:	beq	1d0 <coda_ascbin_cursor_goto_record_field_by_index+0x134>
     1c8:	movw	r0, #0
     1cc:	str	r0, [sp, #20]
     1d0:	b	290 <coda_ascbin_cursor_goto_record_field_by_index+0x1f4>
     1d4:	ldr	r0, [fp, #-8]
     1d8:	ldr	r1, [fp, #-12]
     1dc:	add	r2, sp, #8
     1e0:	bl	340 <get_relative_field_bit_offset_by_index>
     1e4:	cmp	r0, #0
     1e8:	beq	1f8 <coda_ascbin_cursor_goto_record_field_by_index+0x15c>
     1ec:	mvn	r0, #0
     1f0:	str	r0, [fp, #-4]
     1f4:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     1f8:	ldr	r0, [sp, #8]
     1fc:	ldr	r1, [sp, #12]
     200:	ldr	r2, [sp, #24]
     204:	ldr	r3, [sp, #28]
     208:	adds	r0, r2, r0
     20c:	adc	r1, r3, r1
     210:	str	r0, [sp, #24]
     214:	str	r1, [sp, #28]
     218:	ldr	r0, [fp, #-16]
     21c:	ldr	r0, [r0, #52]	; 0x34
     220:	ldr	r1, [fp, #-12]
     224:	add	r0, r0, r1, lsl #2
     228:	ldr	r0, [r0]
     22c:	ldr	r0, [r0, #20]
     230:	movw	r1, #0
     234:	cmp	r0, r1
     238:	beq	28c <coda_ascbin_cursor_goto_record_field_by_index+0x1f0>
     23c:	ldr	r0, [fp, #-16]
     240:	ldr	r0, [r0, #52]	; 0x34
     244:	ldr	r1, [fp, #-12]
     248:	add	r0, r0, r1, lsl #2
     24c:	ldr	r0, [r0]
     250:	ldr	r0, [r0, #20]
     254:	ldr	r1, [fp, #-8]
     258:	add	r2, sp, #20
     25c:	bl	0 <coda_expression_eval_bool>
     260:	cmp	r0, #0
     264:	beq	288 <coda_ascbin_cursor_goto_record_field_by_index+0x1ec>
     268:	movw	r0, #0
     26c:	movt	r0, #0
     270:	bl	0 <coda_add_error_message>
     274:	ldr	r0, [fp, #-8]
     278:	bl	0 <coda_cursor_add_to_error_message>
     27c:	mvn	r0, #0
     280:	str	r0, [fp, #-4]
     284:	b	334 <coda_ascbin_cursor_goto_record_field_by_index+0x298>
     288:	b	28c <coda_ascbin_cursor_goto_record_field_by_index+0x1f0>
     28c:	b	290 <coda_ascbin_cursor_goto_record_field_by_index+0x1f4>
     290:	ldr	r0, [fp, #-8]
     294:	ldr	r1, [r0, #4]
     298:	add	r1, r1, #1
     29c:	str	r1, [r0, #4]
     2a0:	ldr	r0, [sp, #20]
     2a4:	cmp	r0, #0
     2a8:	beq	2dc <coda_ascbin_cursor_goto_record_field_by_index+0x240>
     2ac:	ldr	r0, [fp, #-16]
     2b0:	ldr	r0, [r0, #52]	; 0x34
     2b4:	ldr	r1, [fp, #-12]
     2b8:	ldr	r0, [r0, r1, lsl #2]
     2bc:	ldr	r0, [r0, #8]
     2c0:	ldr	r1, [fp, #-8]
     2c4:	add	r2, r1, #8
     2c8:	ldr	r1, [r1, #4]
     2cc:	sub	r1, r1, #1
     2d0:	add	r1, r2, r1, lsl #4
     2d4:	str	r0, [r1]
     2d8:	b	300 <coda_ascbin_cursor_goto_record_field_by_index+0x264>
     2dc:	ldr	r0, [fp, #-16]
     2e0:	ldr	r0, [r0]
     2e4:	bl	0 <coda_no_data_singleton>
     2e8:	ldr	lr, [fp, #-8]
     2ec:	add	r1, lr, #8
     2f0:	ldr	lr, [lr, #4]
     2f4:	sub	lr, lr, #1
     2f8:	add	r1, r1, lr, lsl #4
     2fc:	str	r0, [r1]
     300:	ldr	r0, [fp, #-12]
     304:	ldr	r1, [fp, #-8]
     308:	ldr	r2, [r1, #4]
     30c:	add	r1, r1, r2, lsl #4
     310:	str	r0, [r1, #-4]
     314:	ldr	r0, [sp, #24]
     318:	ldr	r1, [sp, #28]
     31c:	ldr	r2, [fp, #-8]
     320:	ldr	r3, [r2, #4]
     324:	str	r0, [r2, r3, lsl #4]!
     328:	str	r1, [r2, #4]
     32c:	movw	r0, #0
     330:	str	r0, [fp, #-4]
     334:	ldr	r0, [fp, #-4]
     338:	mov	sp, fp
     33c:	pop	{fp, pc}

00000340 <get_relative_field_bit_offset_by_index>:
     340:	push	{r4, sl, fp, lr}
     344:	add	fp, sp, #8
     348:	sub	sp, sp, #592	; 0x250
     34c:	str	r0, [fp, #-16]
     350:	str	r1, [fp, #-20]	; 0xffffffec
     354:	str	r2, [fp, #-24]	; 0xffffffe8
     358:	ldr	r0, [fp, #-16]
     35c:	ldr	r1, [r0, #4]
     360:	add	r0, r0, r1, lsl #4
     364:	ldr	r0, [r0, #-8]
     368:	str	r0, [fp, #-32]	; 0xffffffe0
     36c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     370:	ldr	r0, [r0, #52]	; 0x34
     374:	ldr	r1, [fp, #-20]	; 0xffffffec
     378:	ldr	r0, [r0, r1, lsl #2]
     37c:	str	r0, [fp, #-28]	; 0xffffffe4
     380:	ldr	r0, [fp, #-28]	; 0xffffffe4
     384:	ldr	r0, [r0, #28]
     388:	cmp	r0, #0
     38c:	blt	3b8 <get_relative_field_bit_offset_by_index+0x78>
     390:	b	394 <get_relative_field_bit_offset_by_index+0x54>
     394:	ldr	r0, [fp, #-28]	; 0xffffffe4
     398:	ldr	r1, [r0, #24]
     39c:	ldr	r0, [r0, #28]
     3a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     3a4:	str	r0, [r2, #4]
     3a8:	str	r1, [r2]
     3ac:	movw	r0, #0
     3b0:	str	r0, [fp, #-12]
     3b4:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     3b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3bc:	ldr	r0, [r0, #32]
     3c0:	movw	r1, #0
     3c4:	cmp	r0, r1
     3c8:	beq	4b8 <get_relative_field_bit_offset_by_index+0x178>
     3cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3d0:	ldr	r0, [r0, #20]
     3d4:	movw	r1, #0
     3d8:	cmp	r0, r1
     3dc:	beq	470 <get_relative_field_bit_offset_by_index+0x130>
     3e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     3e4:	ldr	r0, [r0, #20]
     3e8:	ldr	r1, [fp, #-16]
     3ec:	add	r2, sp, #28
     3f0:	bl	0 <coda_expression_eval_bool>
     3f4:	cmp	r0, #0
     3f8:	beq	41c <get_relative_field_bit_offset_by_index+0xdc>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	bl	0 <coda_add_error_message>
     408:	ldr	r0, [fp, #-16]
     40c:	bl	0 <coda_cursor_add_to_error_message>
     410:	mvn	r0, #0
     414:	str	r0, [fp, #-12]
     418:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     41c:	ldr	r0, [sp, #28]
     420:	cmp	r0, #0
     424:	bne	46c <get_relative_field_bit_offset_by_index+0x12c>
     428:	ldr	r0, [fp, #-20]	; 0xffffffec
     42c:	cmp	r0, #0
     430:	bne	450 <get_relative_field_bit_offset_by_index+0x110>
     434:	ldr	r0, [fp, #-24]	; 0xffffffe8
     438:	mov	r1, #0
     43c:	str	r1, [r0, #4]
     440:	str	r1, [r0]
     444:	movw	r0, #0
     448:	str	r0, [fp, #-12]
     44c:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     450:	ldr	r0, [fp, #-16]
     454:	ldr	r1, [fp, #-20]	; 0xffffffec
     458:	sub	r1, r1, #1
     45c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     460:	bl	340 <get_relative_field_bit_offset_by_index>
     464:	str	r0, [fp, #-12]
     468:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     46c:	b	470 <get_relative_field_bit_offset_by_index+0x130>
     470:	ldr	r0, [fp, #-28]	; 0xffffffe4
     474:	ldr	r0, [r0, #32]
     478:	ldr	r1, [fp, #-16]
     47c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     480:	bl	0 <coda_expression_eval_integer>
     484:	cmp	r0, #0
     488:	beq	4ac <get_relative_field_bit_offset_by_index+0x16c>
     48c:	movw	r0, #0
     490:	movt	r0, #0
     494:	bl	0 <coda_add_error_message>
     498:	ldr	r0, [fp, #-16]
     49c:	bl	0 <coda_cursor_add_to_error_message>
     4a0:	mvn	r0, #0
     4a4:	str	r0, [fp, #-12]
     4a8:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     4ac:	movw	r0, #0
     4b0:	str	r0, [fp, #-12]
     4b4:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     4b8:	ldr	r0, [fp, #-20]	; 0xffffffec
     4bc:	cmp	r0, #0
     4c0:	beq	4c8 <get_relative_field_bit_offset_by_index+0x188>
     4c4:	b	4e8 <get_relative_field_bit_offset_by_index+0x1a8>
     4c8:	movw	r0, #0
     4cc:	movt	r0, #0
     4d0:	movw	r1, #0
     4d4:	movt	r1, #0
     4d8:	movw	r2, #99	; 0x63
     4dc:	movw	r3, #0
     4e0:	movt	r3, #0
     4e4:	bl	0 <__assert_fail>
     4e8:	ldr	r0, [fp, #-20]	; 0xffffffec
     4ec:	sub	r0, r0, #1
     4f0:	str	r0, [sp, #36]	; 0x24
     4f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     4f8:	ldr	r0, [r0, #52]	; 0x34
     4fc:	ldr	r1, [sp, #36]	; 0x24
     500:	ldr	r0, [r0, r1, lsl #2]
     504:	ldr	r1, [r0, #24]
     508:	ldr	r0, [r0, #28]
     50c:	and	r0, r1, r0
     510:	mov	r1, #0
     514:	cmn	r0, #1
     518:	str	r1, [sp, #8]
     51c:	bne	550 <get_relative_field_bit_offset_by_index+0x210>
     520:	b	524 <get_relative_field_bit_offset_by_index+0x1e4>
     524:	ldr	r0, [fp, #-32]	; 0xffffffe0
     528:	ldr	r0, [r0, #52]	; 0x34
     52c:	ldr	r1, [sp, #36]	; 0x24
     530:	add	r0, r0, r1, lsl #2
     534:	ldr	r0, [r0]
     538:	ldr	r0, [r0, #32]
     53c:	movw	r1, #0
     540:	cmp	r0, r1
     544:	movw	r0, #0
     548:	moveq	r0, #1
     54c:	str	r0, [sp, #8]
     550:	ldr	r0, [sp, #8]
     554:	tst	r0, #1
     558:	beq	5a0 <get_relative_field_bit_offset_by_index+0x260>
     55c:	ldr	r0, [sp, #36]	; 0x24
     560:	mvn	r1, #0
     564:	add	r0, r0, r1
     568:	str	r0, [sp, #36]	; 0x24
     56c:	ldr	r0, [sp, #36]	; 0x24
     570:	cmp	r0, #0
     574:	blt	57c <get_relative_field_bit_offset_by_index+0x23c>
     578:	b	59c <get_relative_field_bit_offset_by_index+0x25c>
     57c:	movw	r0, #0
     580:	movt	r0, #0
     584:	movw	r1, #0
     588:	movt	r1, #0
     58c:	movw	r2, #110	; 0x6e
     590:	movw	r3, #0
     594:	movt	r3, #0
     598:	bl	0 <__assert_fail>
     59c:	b	4f4 <get_relative_field_bit_offset_by_index+0x1b4>
     5a0:	ldr	r0, [fp, #-16]
     5a4:	ldr	r1, [sp, #36]	; 0x24
     5a8:	add	r2, sp, #40	; 0x28
     5ac:	bl	340 <get_relative_field_bit_offset_by_index>
     5b0:	cmp	r0, #0
     5b4:	beq	5c4 <get_relative_field_bit_offset_by_index+0x284>
     5b8:	mvn	r0, #0
     5bc:	str	r0, [fp, #-12]
     5c0:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     5c4:	ldr	r1, [fp, #-16]
     5c8:	add	r0, sp, #48	; 0x30
     5cc:	mov	r2, #520	; 0x208
     5d0:	str	r0, [sp, #4]
     5d4:	bl	0 <memcpy>
     5d8:	ldr	r1, [sp, #52]	; 0x34
     5dc:	add	r1, r1, #1
     5e0:	str	r1, [sp, #52]	; 0x34
     5e4:	ldr	r1, [fp, #-16]
     5e8:	ldr	r2, [r1, #4]
     5ec:	ldr	r2, [r1, r2, lsl #4]!
     5f0:	ldr	r1, [r1, #4]
     5f4:	ldr	lr, [sp, #40]	; 0x28
     5f8:	ldr	r3, [sp, #44]	; 0x2c
     5fc:	adds	r2, r2, lr
     600:	adc	r1, r1, r3
     604:	ldr	r3, [sp, #52]	; 0x34
     608:	ldr	lr, [sp, #4]
     60c:	str	r2, [lr, r3, lsl #4]
     610:	add	r2, lr, r3, lsl #4
     614:	str	r1, [r2, #4]
     618:	ldr	r1, [sp, #36]	; 0x24
     61c:	str	r1, [sp, #32]
     620:	str	r0, [sp]
     624:	ldr	r0, [sp, #32]
     628:	ldr	r1, [fp, #-20]	; 0xffffffec
     62c:	cmp	r0, r1
     630:	bge	770 <get_relative_field_bit_offset_by_index+0x430>
     634:	mov	r0, #1
     638:	str	r0, [sp, #12]
     63c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     640:	ldr	r0, [r0, #52]	; 0x34
     644:	ldr	r1, [sp, #32]
     648:	add	r0, r0, r1, lsl #2
     64c:	ldr	r0, [r0]
     650:	ldr	r0, [r0, #20]
     654:	movw	r1, #0
     658:	cmp	r0, r1
     65c:	beq	6a8 <get_relative_field_bit_offset_by_index+0x368>
     660:	ldr	r0, [fp, #-32]	; 0xffffffe0
     664:	ldr	r0, [r0, #52]	; 0x34
     668:	ldr	r1, [sp, #32]
     66c:	add	r0, r0, r1, lsl #2
     670:	ldr	r0, [r0]
     674:	ldr	r0, [r0, #20]
     678:	ldr	r1, [fp, #-16]
     67c:	add	r2, sp, #12
     680:	bl	0 <coda_expression_eval_bool>
     684:	cmp	r0, #0
     688:	beq	6a4 <get_relative_field_bit_offset_by_index+0x364>
     68c:	movw	r0, #0
     690:	movt	r0, #0
     694:	bl	0 <coda_add_error_message>
     698:	mvn	r0, #0
     69c:	str	r0, [fp, #-12]
     6a0:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     6a4:	b	6a8 <get_relative_field_bit_offset_by_index+0x368>
     6a8:	ldr	r0, [sp, #12]
     6ac:	cmp	r0, #0
     6b0:	beq	75c <get_relative_field_bit_offset_by_index+0x41c>
     6b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     6b8:	ldr	r0, [r0, #52]	; 0x34
     6bc:	ldr	r1, [sp, #32]
     6c0:	ldr	r0, [r0, r1, lsl #2]
     6c4:	ldr	r0, [r0, #8]
     6c8:	add	r1, sp, #48	; 0x30
     6cc:	add	r1, r1, #8
     6d0:	ldr	r2, [sp, #52]	; 0x34
     6d4:	add	r2, r1, r2, lsl #4
     6d8:	str	r0, [r2, #-16]
     6dc:	ldr	r0, [sp, #32]
     6e0:	ldr	r2, [sp, #52]	; 0x34
     6e4:	sub	r2, r2, #1
     6e8:	add	r1, r1, r2, lsl #4
     6ec:	str	r0, [r1, #4]
     6f0:	add	r0, sp, #48	; 0x30
     6f4:	add	r1, sp, #16
     6f8:	bl	0 <coda_cursor_get_bit_size>
     6fc:	cmp	r0, #0
     700:	beq	710 <get_relative_field_bit_offset_by_index+0x3d0>
     704:	mvn	r0, #0
     708:	str	r0, [fp, #-12]
     70c:	b	78c <get_relative_field_bit_offset_by_index+0x44c>
     710:	ldr	r0, [sp, #16]
     714:	ldr	r1, [sp, #20]
     718:	ldr	r2, [sp, #40]	; 0x28
     71c:	ldr	r3, [sp, #44]	; 0x2c
     720:	adds	r0, r2, r0
     724:	adc	r1, r3, r1
     728:	str	r0, [sp, #40]	; 0x28
     72c:	str	r1, [sp, #44]	; 0x2c
     730:	ldr	r0, [sp, #16]
     734:	ldr	r1, [sp, #20]
     738:	ldr	r2, [sp, #52]	; 0x34
     73c:	add	r3, sp, #48	; 0x30
     740:	add	ip, r3, r2, lsl #4
     744:	ldr	lr, [ip, #4]
     748:	ldr	r4, [r3, r2, lsl #4]
     74c:	adds	r0, r4, r0
     750:	adc	r1, lr, r1
     754:	str	r0, [r3, r2, lsl #4]
     758:	str	r1, [ip, #4]
     75c:	b	760 <get_relative_field_bit_offset_by_index+0x420>
     760:	ldr	r0, [sp, #32]
     764:	add	r0, r0, #1
     768:	str	r0, [sp, #32]
     76c:	b	624 <get_relative_field_bit_offset_by_index+0x2e4>
     770:	ldr	r0, [sp, #40]	; 0x28
     774:	ldr	r1, [sp, #44]	; 0x2c
     778:	ldr	r2, [fp, #-24]	; 0xffffffe8
     77c:	str	r1, [r2, #4]
     780:	str	r0, [r2]
     784:	movw	r0, #0
     788:	str	r0, [fp, #-12]
     78c:	ldr	r0, [fp, #-12]
     790:	sub	sp, fp, #8
     794:	pop	{r4, sl, fp, pc}

00000798 <coda_ascbin_cursor_goto_next_record_field>:
     798:	push	{r4, r5, fp, lr}
     79c:	add	fp, sp, #8
     7a0:	sub	sp, sp, #1104	; 0x450
     7a4:	str	r0, [fp, #-16]
     7a8:	mov	r0, #1
     7ac:	str	r0, [fp, #-36]	; 0xffffffdc
     7b0:	ldr	r0, [fp, #-16]
     7b4:	add	r1, r0, #8
     7b8:	ldr	r0, [r0, #4]
     7bc:	sub	r0, r0, #2
     7c0:	add	r0, r1, r0, lsl #4
     7c4:	ldr	r0, [r0]
     7c8:	ldr	r0, [r0]
     7cc:	cmp	r0, #100	; 0x64
     7d0:	bcs	7f4 <coda_ascbin_cursor_goto_next_record_field+0x5c>
     7d4:	ldr	r0, [fp, #-16]
     7d8:	add	r1, r0, #8
     7dc:	ldr	r0, [r0, #4]
     7e0:	sub	r0, r0, #2
     7e4:	add	r0, r1, r0, lsl #4
     7e8:	ldr	r0, [r0]
     7ec:	str	r0, [sp, #12]
     7f0:	b	814 <coda_ascbin_cursor_goto_next_record_field+0x7c>
     7f4:	ldr	r0, [fp, #-16]
     7f8:	add	r1, r0, #8
     7fc:	ldr	r0, [r0, #4]
     800:	sub	r0, r0, #2
     804:	add	r0, r1, r0, lsl #4
     808:	ldr	r0, [r0]
     80c:	ldr	r0, [r0, #4]
     810:	str	r0, [sp, #12]
     814:	ldr	r0, [sp, #12]
     818:	str	r0, [fp, #-20]	; 0xffffffec
     81c:	ldr	r0, [fp, #-16]
     820:	add	r1, r0, #8
     824:	ldr	r0, [r0, #4]
     828:	sub	r0, r0, #1
     82c:	add	r0, r1, r0, lsl #4
     830:	ldr	r0, [r0, #4]
     834:	add	r0, r0, #1
     838:	str	r0, [fp, #-40]	; 0xffffffd8
     83c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     840:	cmp	r0, #0
     844:	blt	85c <coda_ascbin_cursor_goto_next_record_field+0xc4>
     848:	ldr	r0, [fp, #-40]	; 0xffffffd8
     84c:	ldr	r1, [fp, #-20]	; 0xffffffec
     850:	ldr	r1, [r1, #48]	; 0x30
     854:	cmp	r0, r1
     858:	blt	884 <coda_ascbin_cursor_goto_next_record_field+0xec>
     85c:	ldr	r2, [fp, #-40]	; 0xffffffd8
     860:	ldr	r0, [fp, #-20]	; 0xffffffec
     864:	ldr	r3, [r0, #48]	; 0x30
     868:	mvn	r0, #100	; 0x64
     86c:	movw	r1, #0
     870:	movt	r1, #0
     874:	bl	0 <coda_set_error>
     878:	mvn	r0, #0
     87c:	str	r0, [fp, #-12]
     880:	b	a9c <coda_ascbin_cursor_goto_next_record_field+0x304>
     884:	ldr	r0, [fp, #-16]
     888:	ldr	r1, [r0, #4]
     88c:	add	r0, r0, r1, lsl #4
     890:	ldr	r1, [r0, #-16]
     894:	ldr	r0, [r0, #-12]
     898:	str	r0, [fp, #-28]	; 0xffffffe4
     89c:	str	r1, [fp, #-32]	; 0xffffffe0
     8a0:	ldr	r0, [fp, #-20]	; 0xffffffec
     8a4:	ldr	r0, [r0, #68]	; 0x44
     8a8:	movw	r1, #0
     8ac:	cmp	r0, r1
     8b0:	beq	928 <coda_ascbin_cursor_goto_next_record_field+0x190>
     8b4:	ldr	r0, [fp, #-16]
     8b8:	add	r1, sp, #552	; 0x228
     8bc:	mov	r2, r1
     8c0:	str	r0, [sp, #8]
     8c4:	mov	r0, r2
     8c8:	ldr	r2, [sp, #8]
     8cc:	str	r1, [sp, #4]
     8d0:	mov	r1, r2
     8d4:	movw	r2, #520	; 0x208
     8d8:	bl	0 <memcpy>
     8dc:	ldr	r0, [sp, #556]	; 0x22c
     8e0:	mvn	r1, #0
     8e4:	add	r0, r0, r1
     8e8:	str	r0, [sp, #556]	; 0x22c
     8ec:	ldr	r0, [sp, #4]
     8f0:	add	r1, sp, #548	; 0x224
     8f4:	bl	0 <coda_cursor_get_available_union_field_index>
     8f8:	cmp	r0, #0
     8fc:	beq	90c <coda_ascbin_cursor_goto_next_record_field+0x174>
     900:	mvn	r0, #0
     904:	str	r0, [fp, #-12]
     908:	b	a9c <coda_ascbin_cursor_goto_next_record_field+0x304>
     90c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     910:	ldr	r1, [sp, #548]	; 0x224
     914:	cmp	r0, r1
     918:	beq	924 <coda_ascbin_cursor_goto_next_record_field+0x18c>
     91c:	movw	r0, #0
     920:	str	r0, [fp, #-36]	; 0xffffffdc
     924:	b	a08 <coda_ascbin_cursor_goto_next_record_field+0x270>
     928:	ldr	r0, [fp, #-16]
     92c:	add	r1, sp, #536	; 0x218
     930:	movw	r2, #0
     934:	bl	aa8 <get_next_relative_field_bit_offset>
     938:	cmp	r0, #0
     93c:	beq	94c <coda_ascbin_cursor_goto_next_record_field+0x1b4>
     940:	mvn	r0, #0
     944:	str	r0, [fp, #-12]
     948:	b	a9c <coda_ascbin_cursor_goto_next_record_field+0x304>
     94c:	ldr	r0, [sp, #536]	; 0x218
     950:	ldr	r1, [sp, #540]	; 0x21c
     954:	ldr	r2, [fp, #-32]	; 0xffffffe0
     958:	ldr	r3, [fp, #-28]	; 0xffffffe4
     95c:	adds	r0, r2, r0
     960:	adc	r1, r3, r1
     964:	str	r0, [fp, #-32]	; 0xffffffe0
     968:	str	r1, [fp, #-28]	; 0xffffffe4
     96c:	ldr	r0, [fp, #-20]	; 0xffffffec
     970:	ldr	r0, [r0, #52]	; 0x34
     974:	ldr	r1, [fp, #-40]	; 0xffffffd8
     978:	add	r0, r0, r1, lsl #2
     97c:	ldr	r0, [r0]
     980:	ldr	r0, [r0, #20]
     984:	movw	r1, #0
     988:	cmp	r0, r1
     98c:	beq	a04 <coda_ascbin_cursor_goto_next_record_field+0x26c>
     990:	ldr	r1, [fp, #-16]
     994:	add	r0, sp, #16
     998:	mov	r2, #520	; 0x208
     99c:	bl	0 <memcpy>
     9a0:	ldr	r1, [sp, #20]
     9a4:	sub	r1, r1, #1
     9a8:	str	r1, [sp, #20]
     9ac:	ldr	r1, [fp, #-20]	; 0xffffffec
     9b0:	ldr	r1, [r1, #52]	; 0x34
     9b4:	ldr	r2, [fp, #-40]	; 0xffffffd8
     9b8:	add	r1, r1, r2, lsl #2
     9bc:	ldr	r1, [r1]
     9c0:	ldr	r1, [r1, #20]
     9c4:	str	r0, [sp]
     9c8:	mov	r0, r1
     9cc:	add	r1, sp, #16
     9d0:	sub	r2, fp, #36	; 0x24
     9d4:	bl	0 <coda_expression_eval_bool>
     9d8:	cmp	r0, #0
     9dc:	beq	a00 <coda_ascbin_cursor_goto_next_record_field+0x268>
     9e0:	movw	r0, #0
     9e4:	movt	r0, #0
     9e8:	bl	0 <coda_add_error_message>
     9ec:	ldr	r0, [fp, #-16]
     9f0:	bl	0 <coda_cursor_add_to_error_message>
     9f4:	mvn	r0, #0
     9f8:	str	r0, [fp, #-12]
     9fc:	b	a9c <coda_ascbin_cursor_goto_next_record_field+0x304>
     a00:	b	a04 <coda_ascbin_cursor_goto_next_record_field+0x26c>
     a04:	b	a08 <coda_ascbin_cursor_goto_next_record_field+0x270>
     a08:	ldr	r0, [fp, #-36]	; 0xffffffdc
     a0c:	cmp	r0, #0
     a10:	beq	a44 <coda_ascbin_cursor_goto_next_record_field+0x2ac>
     a14:	ldr	r0, [fp, #-20]	; 0xffffffec
     a18:	ldr	r0, [r0, #52]	; 0x34
     a1c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     a20:	ldr	r0, [r0, r1, lsl #2]
     a24:	ldr	r0, [r0, #8]
     a28:	ldr	r1, [fp, #-16]
     a2c:	add	r2, r1, #8
     a30:	ldr	r1, [r1, #4]
     a34:	sub	r1, r1, #1
     a38:	add	r1, r2, r1, lsl #4
     a3c:	str	r0, [r1]
     a40:	b	a68 <coda_ascbin_cursor_goto_next_record_field+0x2d0>
     a44:	ldr	r0, [fp, #-20]	; 0xffffffec
     a48:	ldr	r0, [r0]
     a4c:	bl	0 <coda_no_data_singleton>
     a50:	ldr	lr, [fp, #-16]
     a54:	add	r1, lr, #8
     a58:	ldr	lr, [lr, #4]
     a5c:	sub	lr, lr, #1
     a60:	add	r1, r1, lr, lsl #4
     a64:	str	r0, [r1]
     a68:	ldr	r0, [fp, #-40]	; 0xffffffd8
     a6c:	ldr	r1, [fp, #-16]
     a70:	ldr	r2, [r1, #4]
     a74:	add	r1, r1, r2, lsl #4
     a78:	str	r0, [r1, #-4]
     a7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     a80:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a84:	ldr	r2, [fp, #-16]
     a88:	ldr	r3, [r2, #4]
     a8c:	str	r0, [r2, r3, lsl #4]!
     a90:	str	r1, [r2, #4]
     a94:	movw	r0, #0
     a98:	str	r0, [fp, #-12]
     a9c:	ldr	r0, [fp, #-12]
     aa0:	sub	sp, fp, #8
     aa4:	pop	{r4, r5, fp, pc}

00000aa8 <get_next_relative_field_bit_offset>:
     aa8:	push	{r4, r5, fp, lr}
     aac:	add	fp, sp, #8
     ab0:	sub	sp, sp, #576	; 0x240
     ab4:	str	r0, [fp, #-16]
     ab8:	str	r1, [fp, #-20]	; 0xffffffec
     abc:	str	r2, [fp, #-24]	; 0xffffffe8
     ac0:	ldr	r0, [fp, #-16]
     ac4:	ldr	r1, [r0, #4]
     ac8:	add	r0, r0, r1, lsl #4
     acc:	ldr	r0, [r0, #-24]	; 0xffffffe8
     ad0:	str	r0, [fp, #-32]	; 0xffffffe0
     ad4:	ldr	r0, [fp, #-16]
     ad8:	add	r1, r0, #8
     adc:	ldr	r0, [r0, #4]
     ae0:	sub	r0, r0, #1
     ae4:	add	r0, r1, r0, lsl #4
     ae8:	ldr	r0, [r0, #4]
     aec:	add	r0, r0, #1
     af0:	str	r0, [fp, #-52]	; 0xffffffcc
     af4:	ldr	r0, [fp, #-52]	; 0xffffffcc
     af8:	ldr	r1, [fp, #-32]	; 0xffffffe0
     afc:	ldr	r1, [r1, #48]	; 0x30
     b00:	cmp	r0, r1
     b04:	bge	b0c <get_next_relative_field_bit_offset+0x64>
     b08:	b	b2c <get_next_relative_field_bit_offset+0x84>
     b0c:	movw	r0, #0
     b10:	movt	r0, #0
     b14:	movw	r1, #0
     b18:	movt	r1, #0
     b1c:	movw	r2, #161	; 0xa1
     b20:	movw	r3, #0
     b24:	movt	r3, #0
     b28:	bl	0 <__assert_fail>
     b2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
     b30:	ldr	r0, [r0, #52]	; 0x34
     b34:	ldr	r1, [fp, #-52]	; 0xffffffcc
     b38:	ldr	r0, [r0, r1, lsl #2]
     b3c:	str	r0, [fp, #-28]	; 0xffffffe4
     b40:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b44:	ldr	r0, [r0, #28]
     b48:	cmp	r0, #0
     b4c:	blt	b98 <get_next_relative_field_bit_offset+0xf0>
     b50:	b	b54 <get_next_relative_field_bit_offset+0xac>
     b54:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b58:	ldr	r1, [r0, #24]
     b5c:	ldr	r0, [r0, #28]
     b60:	ldr	r2, [fp, #-20]	; 0xffffffec
     b64:	str	r0, [r2, #4]
     b68:	str	r1, [r2]
     b6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b70:	movw	r1, #0
     b74:	cmp	r0, r1
     b78:	beq	b8c <get_next_relative_field_bit_offset+0xe4>
     b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b80:	mvn	r1, #0
     b84:	str	r1, [r0, #4]
     b88:	str	r1, [r0]
     b8c:	movw	r0, #0
     b90:	str	r0, [fp, #-12]
     b94:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     b98:	ldr	r0, [fp, #-16]
     b9c:	ldr	r1, [r0, #4]
     ba0:	ldr	r1, [r0, r1, lsl #4]!
     ba4:	ldr	r2, [r0, #-16]
     ba8:	ldr	r3, [r0, #-12]
     bac:	ldr	r0, [r0, #4]
     bb0:	subs	r1, r1, r2
     bb4:	sbc	r0, r0, r3
     bb8:	str	r1, [fp, #-40]	; 0xffffffd8
     bbc:	str	r0, [fp, #-36]	; 0xffffffdc
     bc0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     bc4:	ldr	r0, [r0, #32]
     bc8:	movw	r1, #0
     bcc:	cmp	r0, r1
     bd0:	beq	ce8 <get_next_relative_field_bit_offset+0x240>
     bd4:	ldr	r0, [fp, #-16]
     bd8:	add	r1, sp, #8
     bdc:	str	r0, [sp]
     be0:	mov	r0, r1
     be4:	ldr	r1, [sp]
     be8:	movw	r2, #520	; 0x208
     bec:	bl	0 <memcpy>
     bf0:	ldr	r0, [sp, #12]
     bf4:	mvn	r1, #0
     bf8:	add	r0, r0, r1
     bfc:	str	r0, [sp, #12]
     c00:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c04:	movw	r1, #0
     c08:	cmp	r0, r1
     c0c:	beq	c20 <get_next_relative_field_bit_offset+0x178>
     c10:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c14:	mvn	r1, #0
     c18:	str	r1, [r0, #4]
     c1c:	str	r1, [r0]
     c20:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c24:	ldr	r0, [r0, #20]
     c28:	movw	r1, #0
     c2c:	cmp	r0, r1
     c30:	beq	ca0 <get_next_relative_field_bit_offset+0x1f8>
     c34:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c38:	ldr	r0, [r0, #20]
     c3c:	add	r1, sp, #8
     c40:	add	r2, sp, #4
     c44:	bl	0 <coda_expression_eval_bool>
     c48:	cmp	r0, #0
     c4c:	beq	c70 <get_next_relative_field_bit_offset+0x1c8>
     c50:	movw	r0, #0
     c54:	movt	r0, #0
     c58:	bl	0 <coda_add_error_message>
     c5c:	ldr	r0, [fp, #-16]
     c60:	bl	0 <coda_cursor_add_to_error_message>
     c64:	mvn	r0, #0
     c68:	str	r0, [fp, #-12]
     c6c:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     c70:	ldr	r0, [sp, #4]
     c74:	cmp	r0, #0
     c78:	bne	c9c <get_next_relative_field_bit_offset+0x1f4>
     c7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     c80:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c84:	ldr	r2, [fp, #-20]	; 0xffffffec
     c88:	str	r1, [r2, #4]
     c8c:	str	r0, [r2]
     c90:	movw	r0, #0
     c94:	str	r0, [fp, #-12]
     c98:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     c9c:	b	ca0 <get_next_relative_field_bit_offset+0x1f8>
     ca0:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ca4:	ldr	r0, [r0, #32]
     ca8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cac:	add	r1, sp, #8
     cb0:	bl	0 <coda_expression_eval_integer>
     cb4:	cmp	r0, #0
     cb8:	beq	cdc <get_next_relative_field_bit_offset+0x234>
     cbc:	movw	r0, #0
     cc0:	movt	r0, #0
     cc4:	bl	0 <coda_add_error_message>
     cc8:	ldr	r0, [fp, #-16]
     ccc:	bl	0 <coda_cursor_add_to_error_message>
     cd0:	mvn	r0, #0
     cd4:	str	r0, [fp, #-12]
     cd8:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     cdc:	movw	r0, #0
     ce0:	str	r0, [fp, #-12]
     ce4:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     ce8:	ldr	r0, [fp, #-16]
     cec:	sub	r1, fp, #48	; 0x30
     cf0:	bl	0 <coda_cursor_get_bit_size>
     cf4:	cmp	r0, #0
     cf8:	beq	d08 <get_next_relative_field_bit_offset+0x260>
     cfc:	mvn	r0, #0
     d00:	str	r0, [fp, #-12]
     d04:	b	d58 <get_next_relative_field_bit_offset+0x2b0>
     d08:	ldr	r0, [fp, #-40]	; 0xffffffd8
     d0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     d10:	ldr	r2, [fp, #-48]	; 0xffffffd0
     d14:	ldr	r3, [fp, #-44]	; 0xffffffd4
     d18:	adds	r0, r0, r2
     d1c:	adc	r1, r1, r3
     d20:	ldr	r2, [fp, #-20]	; 0xffffffec
     d24:	str	r0, [r2]
     d28:	str	r1, [r2, #4]
     d2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d30:	movw	r1, #0
     d34:	cmp	r0, r1
     d38:	beq	d50 <get_next_relative_field_bit_offset+0x2a8>
     d3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
     d40:	ldr	r1, [fp, #-44]	; 0xffffffd4
     d44:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d48:	str	r1, [r2, #4]
     d4c:	str	r0, [r2]
     d50:	movw	r0, #0
     d54:	str	r0, [fp, #-12]
     d58:	ldr	r0, [fp, #-12]
     d5c:	sub	sp, fp, #8
     d60:	pop	{r4, r5, fp, pc}

00000d64 <coda_ascbin_cursor_goto_available_union_field>:
     d64:	push	{fp, lr}
     d68:	mov	fp, sp
     d6c:	sub	sp, sp, #24
     d70:	str	r0, [fp, #-8]
     d74:	ldr	r0, [fp, #-8]
     d78:	add	r1, r0, #8
     d7c:	ldr	r0, [r0, #4]
     d80:	sub	r0, r0, #1
     d84:	add	r0, r1, r0, lsl #4
     d88:	ldr	r0, [r0]
     d8c:	ldr	r0, [r0]
     d90:	cmp	r0, #100	; 0x64
     d94:	bcs	db8 <coda_ascbin_cursor_goto_available_union_field+0x54>
     d98:	ldr	r0, [fp, #-8]
     d9c:	add	r1, r0, #8
     da0:	ldr	r0, [r0, #4]
     da4:	sub	r0, r0, #1
     da8:	add	r0, r1, r0, lsl #4
     dac:	ldr	r0, [r0]
     db0:	str	r0, [sp, #4]
     db4:	b	dd8 <coda_ascbin_cursor_goto_available_union_field+0x74>
     db8:	ldr	r0, [fp, #-8]
     dbc:	add	r1, r0, #8
     dc0:	ldr	r0, [r0, #4]
     dc4:	sub	r0, r0, #1
     dc8:	add	r0, r1, r0, lsl #4
     dcc:	ldr	r0, [r0]
     dd0:	ldr	r0, [r0, #4]
     dd4:	str	r0, [sp, #4]
     dd8:	ldr	r0, [sp, #4]
     ddc:	str	r0, [sp, #12]
     de0:	ldr	r0, [sp, #12]
     de4:	ldr	r0, [r0, #68]	; 0x44
     de8:	movw	r1, #0
     dec:	cmp	r0, r1
     df0:	bne	e10 <coda_ascbin_cursor_goto_available_union_field+0xac>
     df4:	mvn	r0, #104	; 0x68
     df8:	movw	r1, #0
     dfc:	movt	r1, #0
     e00:	bl	0 <coda_set_error>
     e04:	mvn	r0, #0
     e08:	str	r0, [fp, #-4]
     e0c:	b	e9c <coda_ascbin_cursor_goto_available_union_field+0x138>
     e10:	ldr	r0, [fp, #-8]
     e14:	add	r1, sp, #8
     e18:	bl	ea8 <coda_ascbin_cursor_get_available_union_field_index>
     e1c:	cmp	r0, #0
     e20:	beq	e30 <coda_ascbin_cursor_goto_available_union_field+0xcc>
     e24:	mvn	r0, #0
     e28:	str	r0, [fp, #-4]
     e2c:	b	e9c <coda_ascbin_cursor_goto_available_union_field+0x138>
     e30:	ldr	r0, [fp, #-8]
     e34:	ldr	r1, [r0, #4]
     e38:	add	r1, r1, #1
     e3c:	str	r1, [r0, #4]
     e40:	ldr	r0, [sp, #12]
     e44:	ldr	r0, [r0, #52]	; 0x34
     e48:	ldr	r1, [sp, #8]
     e4c:	ldr	r0, [r0, r1, lsl #2]
     e50:	ldr	r0, [r0, #8]
     e54:	ldr	r1, [fp, #-8]
     e58:	ldr	r2, [r1, #4]
     e5c:	add	r1, r1, r2, lsl #4
     e60:	str	r0, [r1, #-8]
     e64:	ldr	r0, [sp, #8]
     e68:	ldr	r1, [fp, #-8]
     e6c:	ldr	r2, [r1, #4]
     e70:	add	r1, r1, r2, lsl #4
     e74:	str	r0, [r1, #-4]
     e78:	ldr	r0, [fp, #-8]
     e7c:	ldr	r1, [r0, #4]
     e80:	add	r2, r0, r1, lsl #4
     e84:	ldr	r3, [r2, #-16]
     e88:	ldr	ip, [r2, #-12]
     e8c:	str	r3, [r0, r1, lsl #4]
     e90:	str	ip, [r2, #4]
     e94:	movw	r0, #0
     e98:	str	r0, [fp, #-4]
     e9c:	ldr	r0, [fp, #-4]
     ea0:	mov	sp, fp
     ea4:	pop	{fp, pc}

00000ea8 <coda_ascbin_cursor_get_available_union_field_index>:
     ea8:	push	{r4, r5, fp, lr}
     eac:	add	fp, sp, #8
     eb0:	sub	sp, sp, #640	; 0x280
     eb4:	str	r0, [fp, #-16]
     eb8:	str	r1, [fp, #-20]	; 0xffffffec
     ebc:	ldr	r0, [fp, #-16]
     ec0:	add	r1, r0, #8
     ec4:	ldr	r0, [r0, #4]
     ec8:	sub	r0, r0, #1
     ecc:	add	r0, r1, r0, lsl #4
     ed0:	ldr	r0, [r0]
     ed4:	ldr	r0, [r0]
     ed8:	cmp	r0, #100	; 0x64
     edc:	bcs	f00 <coda_ascbin_cursor_get_available_union_field_index+0x58>
     ee0:	ldr	r0, [fp, #-16]
     ee4:	add	r1, r0, #8
     ee8:	ldr	r0, [r0, #4]
     eec:	sub	r0, r0, #1
     ef0:	add	r0, r1, r0, lsl #4
     ef4:	ldr	r0, [r0]
     ef8:	str	r0, [sp, #48]	; 0x30
     efc:	b	f20 <coda_ascbin_cursor_get_available_union_field_index+0x78>
     f00:	ldr	r0, [fp, #-16]
     f04:	add	r1, r0, #8
     f08:	ldr	r0, [r0, #4]
     f0c:	sub	r0, r0, #1
     f10:	add	r0, r1, r0, lsl #4
     f14:	ldr	r0, [r0]
     f18:	ldr	r0, [r0, #4]
     f1c:	str	r0, [sp, #48]	; 0x30
     f20:	ldr	r0, [sp, #48]	; 0x30
     f24:	str	r0, [fp, #-24]	; 0xffffffe8
     f28:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f2c:	ldr	r0, [r0, #68]	; 0x44
     f30:	movw	r1, #0
     f34:	cmp	r0, r1
     f38:	bne	f58 <coda_ascbin_cursor_get_available_union_field_index+0xb0>
     f3c:	mvn	r0, #104	; 0x68
     f40:	movw	r1, #0
     f44:	movt	r1, #0
     f48:	bl	0 <coda_set_error>
     f4c:	mvn	r0, #0
     f50:	str	r0, [fp, #-12]
     f54:	b	1140 <coda_ascbin_cursor_get_available_union_field_index+0x298>
     f58:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f5c:	ldr	r0, [r0, #48]	; 0x30
     f60:	cmp	r0, #0
     f64:	ble	f6c <coda_ascbin_cursor_get_available_union_field_index+0xc4>
     f68:	b	f8c <coda_ascbin_cursor_get_available_union_field_index+0xe4>
     f6c:	movw	r0, #0
     f70:	movt	r0, #0
     f74:	movw	r1, #0
     f78:	movt	r1, #0
     f7c:	movw	r2, #889	; 0x379
     f80:	movw	r3, #0
     f84:	movt	r3, #0
     f88:	bl	0 <__assert_fail>
     f8c:	ldr	r1, [fp, #-16]
     f90:	add	r0, sp, #104	; 0x68
     f94:	mov	r2, #520	; 0x208
     f98:	str	r0, [sp, #44]	; 0x2c
     f9c:	bl	0 <memcpy>
     fa0:	ldr	r1, [sp, #108]	; 0x6c
     fa4:	add	r1, r1, #1
     fa8:	str	r1, [sp, #108]	; 0x6c
     fac:	ldr	r1, [fp, #-24]	; 0xffffffe8
     fb0:	ldr	r1, [r1, #52]	; 0x34
     fb4:	ldr	r1, [r1]
     fb8:	ldr	r1, [r1, #8]
     fbc:	ldr	r2, [sp, #44]	; 0x2c
     fc0:	add	lr, r2, #8
     fc4:	ldr	r3, [sp, #108]	; 0x6c
     fc8:	add	r3, lr, r3, lsl #4
     fcc:	str	r1, [r3, #-16]
     fd0:	ldr	r1, [sp, #108]	; 0x6c
     fd4:	add	r1, lr, r1, lsl #4
     fd8:	sub	r1, r1, #16
     fdc:	mvn	r3, #0
     fe0:	str	r3, [r1, #4]
     fe4:	ldr	r1, [sp, #108]	; 0x6c
     fe8:	add	r1, lr, r1, lsl #4
     fec:	ldr	r3, [r1, #-24]	; 0xffffffe8
     ff0:	ldr	lr, [r1, #-20]	; 0xffffffec
     ff4:	str	lr, [r1, #-4]
     ff8:	str	r3, [r1, #-8]
     ffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1000:	ldr	r1, [r1, #68]	; 0x44
    1004:	str	r0, [sp, #40]	; 0x28
    1008:	mov	r0, r1
    100c:	add	r1, sp, #104	; 0x68
    1010:	add	r2, sp, #96	; 0x60
    1014:	bl	0 <coda_expression_eval_integer>
    1018:	cmp	r0, #0
    101c:	beq	1040 <coda_ascbin_cursor_get_available_union_field_index+0x198>
    1020:	movw	r0, #0
    1024:	movt	r0, #0
    1028:	bl	0 <coda_add_error_message>
    102c:	ldr	r0, [fp, #-16]
    1030:	bl	0 <coda_cursor_add_to_error_message>
    1034:	mvn	r0, #0
    1038:	str	r0, [fp, #-12]
    103c:	b	1140 <coda_ascbin_cursor_get_available_union_field_index+0x298>
    1040:	ldr	r0, [sp, #100]	; 0x64
    1044:	cmp	r0, #0
    1048:	blt	1078 <coda_ascbin_cursor_get_available_union_field_index+0x1d0>
    104c:	b	1050 <coda_ascbin_cursor_get_available_union_field_index+0x1a8>
    1050:	ldr	r0, [sp, #96]	; 0x60
    1054:	ldr	r1, [sp, #100]	; 0x64
    1058:	ldr	r2, [fp, #-24]	; 0xffffffe8
    105c:	ldr	r2, [r2, #48]	; 0x30
    1060:	subs	r0, r0, r2
    1064:	sbcs	r1, r1, r2, asr #31
    1068:	str	r0, [sp, #36]	; 0x24
    106c:	str	r1, [sp, #32]
    1070:	blt	112c <coda_ascbin_cursor_get_available_union_field_index+0x284>
    1074:	b	1078 <coda_ascbin_cursor_get_available_union_field_index+0x1d0>
    1078:	ldr	r0, [pc, #204]	; 114c <coda_ascbin_cursor_get_available_union_field_index+0x2a4>
    107c:	ldr	r1, [sp, #96]	; 0x60
    1080:	ldr	r2, [sp, #100]	; 0x64
    1084:	add	r3, sp, #75	; 0x4b
    1088:	str	r0, [sp, #28]
    108c:	mov	r0, r1
    1090:	mov	r1, r2
    1094:	mov	r2, r3
    1098:	str	r3, [sp, #24]
    109c:	bl	0 <coda_str64>
    10a0:	ldr	r0, [fp, #-16]
    10a4:	ldr	r1, [r0, #4]
    10a8:	ldr	r1, [r0, r1, lsl #4]!
    10ac:	ldr	r0, [r0, #4]
    10b0:	lsr	r1, r1, #3
    10b4:	orr	r1, r1, r0, lsl #29
    10b8:	asr	r0, r0, #3
    10bc:	add	r2, sp, #54	; 0x36
    10c0:	str	r0, [sp, #20]
    10c4:	mov	r0, r1
    10c8:	ldr	r1, [sp, #20]
    10cc:	str	r2, [sp, #16]
    10d0:	bl	0 <coda_str64>
    10d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10d8:	ldr	r3, [r0, #48]	; 0x30
    10dc:	ldr	r0, [fp, #-16]
    10e0:	ldr	r1, [r0, #4]
    10e4:	ldr	r0, [r0, r1, lsl #4]
    10e8:	and	r0, r0, #7
    10ec:	ldr	r1, [sp, #28]
    10f0:	str	r0, [sp, #12]
    10f4:	mov	r0, r1
    10f8:	movw	r1, #0
    10fc:	movt	r1, #0
    1100:	ldr	r2, [sp, #24]
    1104:	ldr	lr, [sp, #16]
    1108:	str	lr, [sp]
    110c:	ldr	ip, [sp, #12]
    1110:	str	ip, [sp, #4]
    1114:	bl	0 <coda_set_error>
    1118:	ldr	r0, [fp, #-16]
    111c:	bl	0 <coda_cursor_add_to_error_message>
    1120:	mvn	r0, #0
    1124:	str	r0, [fp, #-12]
    1128:	b	1140 <coda_ascbin_cursor_get_available_union_field_index+0x298>
    112c:	ldr	r0, [sp, #96]	; 0x60
    1130:	ldr	r1, [fp, #-20]	; 0xffffffec
    1134:	str	r0, [r1]
    1138:	movw	r0, #0
    113c:	str	r0, [fp, #-12]
    1140:	ldr	r0, [fp, #-12]
    1144:	sub	sp, fp, #8
    1148:	pop	{r4, r5, fp, pc}
    114c:	.word	0xfffffed4

00001150 <coda_ascbin_cursor_goto_array_element>:
    1150:	push	{fp, lr}
    1154:	mov	fp, sp
    1158:	sub	sp, sp, #56	; 0x38
    115c:	str	r0, [fp, #-8]
    1160:	str	r1, [fp, #-12]
    1164:	str	r2, [fp, #-16]
    1168:	ldr	r0, [fp, #-8]
    116c:	add	r1, r0, #8
    1170:	ldr	r0, [r0, #4]
    1174:	sub	r0, r0, #1
    1178:	add	r0, r1, r0, lsl #4
    117c:	ldr	r0, [r0]
    1180:	ldr	r0, [r0]
    1184:	cmp	r0, #100	; 0x64
    1188:	bcs	11ac <coda_ascbin_cursor_goto_array_element+0x5c>
    118c:	ldr	r0, [fp, #-8]
    1190:	add	r1, r0, #8
    1194:	ldr	r0, [r0, #4]
    1198:	sub	r0, r0, #1
    119c:	add	r0, r1, r0, lsl #4
    11a0:	ldr	r0, [r0]
    11a4:	str	r0, [sp, #4]
    11a8:	b	11cc <coda_ascbin_cursor_goto_array_element+0x7c>
    11ac:	ldr	r0, [fp, #-8]
    11b0:	add	r1, r0, #8
    11b4:	ldr	r0, [r0, #4]
    11b8:	sub	r0, r0, #1
    11bc:	add	r0, r1, r0, lsl #4
    11c0:	ldr	r0, [r0]
    11c4:	ldr	r0, [r0, #4]
    11c8:	str	r0, [sp, #4]
    11cc:	ldr	r0, [sp, #4]
    11d0:	str	r0, [fp, #-20]	; 0xffffffec
    11d4:	ldr	r0, [fp, #-12]
    11d8:	ldr	r1, [fp, #-20]	; 0xffffffec
    11dc:	ldr	r1, [r1, #48]	; 0x30
    11e0:	cmp	r0, r1
    11e4:	beq	1210 <coda_ascbin_cursor_goto_array_element+0xc0>
    11e8:	ldr	r2, [fp, #-12]
    11ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    11f0:	ldr	r3, [r0, #48]	; 0x30
    11f4:	mvn	r0, #105	; 0x69
    11f8:	movw	r1, #0
    11fc:	movt	r1, #0
    1200:	bl	0 <coda_set_error>
    1204:	mvn	r0, #0
    1208:	str	r0, [fp, #-4]
    120c:	b	14e8 <coda_ascbin_cursor_goto_array_element+0x398>
    1210:	movw	r0, #0
    1214:	str	r0, [fp, #-24]	; 0xffffffe8
    1218:	str	r0, [sp, #28]
    121c:	ldr	r0, [sp, #28]
    1220:	ldr	r1, [fp, #-20]	; 0xffffffec
    1224:	ldr	r1, [r1, #48]	; 0x30
    1228:	cmp	r0, r1
    122c:	bge	1368 <coda_ascbin_cursor_goto_array_element+0x218>
    1230:	ldr	r0, [fp, #-20]	; 0xffffffec
    1234:	add	r0, r0, #52	; 0x34
    1238:	ldr	r1, [sp, #28]
    123c:	add	r0, r0, r1, lsl #2
    1240:	ldr	r0, [r0]
    1244:	cmn	r0, #1
    1248:	bne	12a4 <coda_ascbin_cursor_goto_array_element+0x154>
    124c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1250:	add	r0, r0, #84	; 0x54
    1254:	ldr	r1, [sp, #28]
    1258:	add	r0, r0, r1, lsl #2
    125c:	ldr	r0, [r0]
    1260:	ldr	r1, [fp, #-8]
    1264:	add	r2, sp, #16
    1268:	bl	0 <coda_expression_eval_integer>
    126c:	cmp	r0, #0
    1270:	beq	1298 <coda_ascbin_cursor_goto_array_element+0x148>
    1274:	ldr	r1, [sp, #28]
    1278:	movw	r0, #0
    127c:	movt	r0, #0
    1280:	bl	0 <coda_add_error_message>
    1284:	ldr	r0, [fp, #-8]
    1288:	bl	0 <coda_cursor_add_to_error_message>
    128c:	mvn	r0, #0
    1290:	str	r0, [fp, #-4]
    1294:	b	14e8 <coda_ascbin_cursor_goto_array_element+0x398>
    1298:	ldr	r0, [sp, #16]
    129c:	str	r0, [sp, #24]
    12a0:	b	12bc <coda_ascbin_cursor_goto_array_element+0x16c>
    12a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    12a8:	add	r0, r0, #52	; 0x34
    12ac:	ldr	r1, [sp, #28]
    12b0:	add	r0, r0, r1, lsl #2
    12b4:	ldr	r0, [r0]
    12b8:	str	r0, [sp, #24]
    12bc:	ldr	r0, [fp, #-16]
    12c0:	ldr	r1, [sp, #28]
    12c4:	add	r0, r0, r1, lsl #2
    12c8:	ldr	r0, [r0]
    12cc:	cmp	r0, #0
    12d0:	blt	12f0 <coda_ascbin_cursor_goto_array_element+0x1a0>
    12d4:	ldr	r0, [fp, #-16]
    12d8:	ldr	r1, [sp, #28]
    12dc:	add	r0, r0, r1, lsl #2
    12e0:	ldr	r0, [r0]
    12e4:	ldr	r1, [sp, #24]
    12e8:	cmp	r0, r1
    12ec:	blt	1320 <coda_ascbin_cursor_goto_array_element+0x1d0>
    12f0:	ldr	r0, [fp, #-16]
    12f4:	ldr	r1, [sp, #28]
    12f8:	add	r0, r0, r1, lsl #2
    12fc:	ldr	r2, [r0]
    1300:	ldr	r3, [sp, #24]
    1304:	mvn	r0, #106	; 0x6a
    1308:	movw	r1, #0
    130c:	movt	r1, #0
    1310:	bl	0 <coda_set_error>
    1314:	mvn	r0, #0
    1318:	str	r0, [fp, #-4]
    131c:	b	14e8 <coda_ascbin_cursor_goto_array_element+0x398>
    1320:	ldr	r0, [sp, #28]
    1324:	cmp	r0, #0
    1328:	ble	133c <coda_ascbin_cursor_goto_array_element+0x1ec>
    132c:	ldr	r0, [sp, #24]
    1330:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1334:	mul	r0, r1, r0
    1338:	str	r0, [fp, #-24]	; 0xffffffe8
    133c:	ldr	r0, [fp, #-16]
    1340:	ldr	r1, [sp, #28]
    1344:	add	r0, r0, r1, lsl #2
    1348:	ldr	r0, [r0]
    134c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1350:	add	r0, r1, r0
    1354:	str	r0, [fp, #-24]	; 0xffffffe8
    1358:	ldr	r0, [sp, #28]
    135c:	add	r0, r0, #1
    1360:	str	r0, [sp, #28]
    1364:	b	121c <coda_ascbin_cursor_goto_array_element+0xcc>
    1368:	ldr	r0, [fp, #-8]
    136c:	ldr	r1, [r0, #4]
    1370:	add	r1, r1, #1
    1374:	str	r1, [r0, #4]
    1378:	ldr	r0, [fp, #-8]
    137c:	ldr	r1, [r0, #4]
    1380:	add	r2, r0, r1, lsl #4
    1384:	ldr	r3, [r2, #-16]
    1388:	ldr	ip, [r2, #-12]
    138c:	str	r3, [r0, r1, lsl #4]
    1390:	str	ip, [r2, #4]
    1394:	ldr	r0, [fp, #-20]	; 0xffffffec
    1398:	ldr	r0, [r0, #40]	; 0x28
    139c:	ldr	r0, [r0, #28]
    13a0:	cmp	r0, #0
    13a4:	blt	13f4 <coda_ascbin_cursor_goto_array_element+0x2a4>
    13a8:	b	13ac <coda_ascbin_cursor_goto_array_element+0x25c>
    13ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13b0:	asr	r1, r0, #31
    13b4:	ldr	r2, [fp, #-20]	; 0xffffffec
    13b8:	ldr	r2, [r2, #40]	; 0x28
    13bc:	ldr	r3, [r2, #24]
    13c0:	ldr	r2, [r2, #28]
    13c4:	umull	ip, lr, r0, r3
    13c8:	mla	r0, r0, r2, lr
    13cc:	mla	r0, r1, r3, r0
    13d0:	ldr	r1, [fp, #-8]
    13d4:	ldr	r2, [r1, #4]
    13d8:	ldr	r2, [r1, r2, lsl #4]!
    13dc:	ldr	r3, [r1, #4]
    13e0:	adds	r2, r2, ip
    13e4:	adc	r0, r3, r0
    13e8:	str	r2, [r1]
    13ec:	str	r0, [r1, #4]
    13f0:	b	14ac <coda_ascbin_cursor_goto_array_element+0x35c>
    13f4:	movw	r0, #0
    13f8:	str	r0, [sp, #28]
    13fc:	ldr	r0, [sp, #28]
    1400:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1404:	cmp	r0, r1
    1408:	bge	14a8 <coda_ascbin_cursor_goto_array_element+0x358>
    140c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1410:	ldr	r0, [r0, #40]	; 0x28
    1414:	ldr	r1, [fp, #-8]
    1418:	ldr	r2, [r1, #4]
    141c:	add	r1, r1, r2, lsl #4
    1420:	str	r0, [r1, #-8]
    1424:	ldr	r0, [sp, #28]
    1428:	ldr	r1, [fp, #-8]
    142c:	add	r2, r1, #8
    1430:	ldr	r1, [r1, #4]
    1434:	sub	r1, r1, #1
    1438:	add	r1, r2, r1, lsl #4
    143c:	str	r0, [r1, #4]
    1440:	ldr	r0, [fp, #-8]
    1444:	add	r1, sp, #8
    1448:	bl	0 <coda_cursor_get_bit_size>
    144c:	cmp	r0, #0
    1450:	beq	1470 <coda_ascbin_cursor_goto_array_element+0x320>
    1454:	ldr	r0, [fp, #-8]
    1458:	ldr	r1, [r0, #4]
    145c:	mvn	r2, #0
    1460:	add	r1, r1, r2
    1464:	str	r1, [r0, #4]
    1468:	str	r2, [fp, #-4]
    146c:	b	14e8 <coda_ascbin_cursor_goto_array_element+0x398>
    1470:	ldr	r0, [sp, #8]
    1474:	ldr	r1, [sp, #12]
    1478:	ldr	r2, [fp, #-8]
    147c:	ldr	r3, [r2, #4]
    1480:	ldr	r3, [r2, r3, lsl #4]!
    1484:	ldr	ip, [r2, #4]
    1488:	adds	r0, r3, r0
    148c:	adc	r1, ip, r1
    1490:	str	r0, [r2]
    1494:	str	r1, [r2, #4]
    1498:	ldr	r0, [sp, #28]
    149c:	add	r0, r0, #1
    14a0:	str	r0, [sp, #28]
    14a4:	b	13fc <coda_ascbin_cursor_goto_array_element+0x2ac>
    14a8:	b	14ac <coda_ascbin_cursor_goto_array_element+0x35c>
    14ac:	ldr	r0, [fp, #-20]	; 0xffffffec
    14b0:	ldr	r0, [r0, #40]	; 0x28
    14b4:	ldr	r1, [fp, #-8]
    14b8:	ldr	r2, [r1, #4]
    14bc:	add	r1, r1, r2, lsl #4
    14c0:	str	r0, [r1, #-8]
    14c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14c8:	ldr	r1, [fp, #-8]
    14cc:	add	r2, r1, #8
    14d0:	ldr	r1, [r1, #4]
    14d4:	sub	r1, r1, #1
    14d8:	add	r1, r2, r1, lsl #4
    14dc:	str	r0, [r1, #4]
    14e0:	movw	r0, #0
    14e4:	str	r0, [fp, #-4]
    14e8:	ldr	r0, [fp, #-4]
    14ec:	mov	sp, fp
    14f0:	pop	{fp, pc}

000014f4 <coda_ascbin_cursor_goto_array_element_by_index>:
    14f4:	push	{fp, lr}
    14f8:	mov	fp, sp
    14fc:	sub	sp, sp, #40	; 0x28
    1500:	str	r0, [fp, #-8]
    1504:	str	r1, [fp, #-12]
    1508:	ldr	r0, [fp, #-8]
    150c:	add	r1, r0, #8
    1510:	ldr	r0, [r0, #4]
    1514:	sub	r0, r0, #1
    1518:	add	r0, r1, r0, lsl #4
    151c:	ldr	r0, [r0]
    1520:	ldr	r0, [r0]
    1524:	cmp	r0, #100	; 0x64
    1528:	bcs	154c <coda_ascbin_cursor_goto_array_element_by_index+0x58>
    152c:	ldr	r0, [fp, #-8]
    1530:	add	r1, r0, #8
    1534:	ldr	r0, [r0, #4]
    1538:	sub	r0, r0, #1
    153c:	add	r0, r1, r0, lsl #4
    1540:	ldr	r0, [r0]
    1544:	str	r0, [sp, #4]
    1548:	b	156c <coda_ascbin_cursor_goto_array_element_by_index+0x78>
    154c:	ldr	r0, [fp, #-8]
    1550:	add	r1, r0, #8
    1554:	ldr	r0, [r0, #4]
    1558:	sub	r0, r0, #1
    155c:	add	r0, r1, r0, lsl #4
    1560:	ldr	r0, [r0]
    1564:	ldr	r0, [r0, #4]
    1568:	str	r0, [sp, #4]
    156c:	ldr	r0, [sp, #4]
    1570:	str	r0, [fp, #-16]
    1574:	ldr	r0, [pc, #520]	; 1784 <coda_ascbin_cursor_goto_array_element_by_index+0x290>
    1578:	ldr	r0, [pc, r0]
    157c:	str	r0, [sp]
    1580:	bl	0 <__aeabi_read_tp>
    1584:	ldr	ip, [sp]
    1588:	ldr	r0, [r0, ip]
    158c:	cmp	r0, #0
    1590:	beq	15f8 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    1594:	ldr	r0, [fp, #-8]
    1598:	add	r1, sp, #16
    159c:	bl	0 <coda_cursor_get_num_elements>
    15a0:	cmp	r0, #0
    15a4:	beq	15b4 <coda_ascbin_cursor_goto_array_element_by_index+0xc0>
    15a8:	mvn	r0, #0
    15ac:	str	r0, [fp, #-4]
    15b0:	b	1778 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    15b4:	ldr	r0, [fp, #-12]
    15b8:	cmp	r0, #0
    15bc:	blt	15d0 <coda_ascbin_cursor_goto_array_element_by_index+0xdc>
    15c0:	ldr	r0, [fp, #-12]
    15c4:	ldr	r1, [sp, #16]
    15c8:	cmp	r0, r1
    15cc:	blt	15f4 <coda_ascbin_cursor_goto_array_element_by_index+0x100>
    15d0:	ldr	r2, [fp, #-12]
    15d4:	ldr	r3, [sp, #16]
    15d8:	mvn	r0, #106	; 0x6a
    15dc:	movw	r1, #0
    15e0:	movt	r1, #0
    15e4:	bl	0 <coda_set_error>
    15e8:	mvn	r0, #0
    15ec:	str	r0, [fp, #-4]
    15f0:	b	1778 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    15f4:	b	15f8 <coda_ascbin_cursor_goto_array_element_by_index+0x104>
    15f8:	ldr	r0, [fp, #-8]
    15fc:	ldr	r1, [r0, #4]
    1600:	add	r1, r1, #1
    1604:	str	r1, [r0, #4]
    1608:	ldr	r0, [fp, #-8]
    160c:	ldr	r1, [r0, #4]
    1610:	add	r2, r0, r1, lsl #4
    1614:	ldr	r3, [r2, #-16]
    1618:	ldr	ip, [r2, #-12]
    161c:	str	r3, [r0, r1, lsl #4]
    1620:	str	ip, [r2, #4]
    1624:	ldr	r0, [fp, #-16]
    1628:	ldr	r0, [r0, #40]	; 0x28
    162c:	ldr	r0, [r0, #28]
    1630:	cmp	r0, #0
    1634:	blt	1684 <coda_ascbin_cursor_goto_array_element_by_index+0x190>
    1638:	b	163c <coda_ascbin_cursor_goto_array_element_by_index+0x148>
    163c:	ldr	r0, [fp, #-12]
    1640:	asr	r1, r0, #31
    1644:	ldr	r2, [fp, #-16]
    1648:	ldr	r2, [r2, #40]	; 0x28
    164c:	ldr	r3, [r2, #24]
    1650:	ldr	r2, [r2, #28]
    1654:	umull	ip, lr, r0, r3
    1658:	mla	r0, r0, r2, lr
    165c:	mla	r0, r1, r3, r0
    1660:	ldr	r1, [fp, #-8]
    1664:	ldr	r2, [r1, #4]
    1668:	ldr	r2, [r1, r2, lsl #4]!
    166c:	ldr	r3, [r1, #4]
    1670:	adds	r2, r2, ip
    1674:	adc	r0, r3, r0
    1678:	str	r2, [r1]
    167c:	str	r0, [r1, #4]
    1680:	b	173c <coda_ascbin_cursor_goto_array_element_by_index+0x248>
    1684:	movw	r0, #0
    1688:	str	r0, [sp, #20]
    168c:	ldr	r0, [sp, #20]
    1690:	ldr	r1, [fp, #-12]
    1694:	cmp	r0, r1
    1698:	bge	1738 <coda_ascbin_cursor_goto_array_element_by_index+0x244>
    169c:	ldr	r0, [fp, #-16]
    16a0:	ldr	r0, [r0, #40]	; 0x28
    16a4:	ldr	r1, [fp, #-8]
    16a8:	ldr	r2, [r1, #4]
    16ac:	add	r1, r1, r2, lsl #4
    16b0:	str	r0, [r1, #-8]
    16b4:	ldr	r0, [sp, #20]
    16b8:	ldr	r1, [fp, #-8]
    16bc:	add	r2, r1, #8
    16c0:	ldr	r1, [r1, #4]
    16c4:	sub	r1, r1, #1
    16c8:	add	r1, r2, r1, lsl #4
    16cc:	str	r0, [r1, #4]
    16d0:	ldr	r0, [fp, #-8]
    16d4:	add	r1, sp, #8
    16d8:	bl	0 <coda_cursor_get_bit_size>
    16dc:	cmp	r0, #0
    16e0:	beq	1700 <coda_ascbin_cursor_goto_array_element_by_index+0x20c>
    16e4:	ldr	r0, [fp, #-8]
    16e8:	ldr	r1, [r0, #4]
    16ec:	mvn	r2, #0
    16f0:	add	r1, r1, r2
    16f4:	str	r1, [r0, #4]
    16f8:	str	r2, [fp, #-4]
    16fc:	b	1778 <coda_ascbin_cursor_goto_array_element_by_index+0x284>
    1700:	ldr	r0, [sp, #8]
    1704:	ldr	r1, [sp, #12]
    1708:	ldr	r2, [fp, #-8]
    170c:	ldr	r3, [r2, #4]
    1710:	ldr	r3, [r2, r3, lsl #4]!
    1714:	ldr	ip, [r2, #4]
    1718:	adds	r0, r3, r0
    171c:	adc	r1, ip, r1
    1720:	str	r0, [r2]
    1724:	str	r1, [r2, #4]
    1728:	ldr	r0, [sp, #20]
    172c:	add	r0, r0, #1
    1730:	str	r0, [sp, #20]
    1734:	b	168c <coda_ascbin_cursor_goto_array_element_by_index+0x198>
    1738:	b	173c <coda_ascbin_cursor_goto_array_element_by_index+0x248>
    173c:	ldr	r0, [fp, #-16]
    1740:	ldr	r0, [r0, #40]	; 0x28
    1744:	ldr	r1, [fp, #-8]
    1748:	ldr	r2, [r1, #4]
    174c:	add	r1, r1, r2, lsl #4
    1750:	str	r0, [r1, #-8]
    1754:	ldr	r0, [fp, #-12]
    1758:	ldr	r1, [fp, #-8]
    175c:	add	r2, r1, #8
    1760:	ldr	r1, [r1, #4]
    1764:	sub	r1, r1, #1
    1768:	add	r1, r2, r1, lsl #4
    176c:	str	r0, [r1, #4]
    1770:	movw	r0, #0
    1774:	str	r0, [fp, #-4]
    1778:	ldr	r0, [fp, #-4]
    177c:	mov	sp, fp
    1780:	pop	{fp, pc}
    1784:	.word	0x00000204

00001788 <coda_ascbin_cursor_goto_next_array_element>:
    1788:	push	{fp, lr}
    178c:	mov	fp, sp
    1790:	sub	sp, sp, #40	; 0x28
    1794:	str	r0, [fp, #-8]
    1798:	ldr	r0, [fp, #-8]
    179c:	add	r1, r0, #8
    17a0:	ldr	r0, [r0, #4]
    17a4:	sub	r0, r0, #2
    17a8:	add	r0, r1, r0, lsl #4
    17ac:	ldr	r0, [r0]
    17b0:	ldr	r0, [r0]
    17b4:	cmp	r0, #100	; 0x64
    17b8:	bcs	17dc <coda_ascbin_cursor_goto_next_array_element+0x54>
    17bc:	ldr	r0, [fp, #-8]
    17c0:	add	r1, r0, #8
    17c4:	ldr	r0, [r0, #4]
    17c8:	sub	r0, r0, #2
    17cc:	add	r0, r1, r0, lsl #4
    17d0:	ldr	r0, [r0]
    17d4:	str	r0, [sp, #4]
    17d8:	b	17fc <coda_ascbin_cursor_goto_next_array_element+0x74>
    17dc:	ldr	r0, [fp, #-8]
    17e0:	add	r1, r0, #8
    17e4:	ldr	r0, [r0, #4]
    17e8:	sub	r0, r0, #2
    17ec:	add	r0, r1, r0, lsl #4
    17f0:	ldr	r0, [r0]
    17f4:	ldr	r0, [r0, #4]
    17f8:	str	r0, [sp, #4]
    17fc:	ldr	r0, [sp, #4]
    1800:	str	r0, [fp, #-12]
    1804:	ldr	r0, [fp, #-8]
    1808:	ldr	r1, [r0, #4]
    180c:	add	r0, r0, r1, lsl #4
    1810:	ldr	r0, [r0, #-4]
    1814:	add	r0, r0, #1
    1818:	str	r0, [sp, #12]
    181c:	ldr	r0, [pc, #312]	; 195c <coda_ascbin_cursor_goto_next_array_element+0x1d4>
    1820:	ldr	r0, [pc, r0]
    1824:	str	r0, [sp]
    1828:	bl	0 <__aeabi_read_tp>
    182c:	ldr	r1, [sp]
    1830:	ldr	r0, [r0, r1]
    1834:	cmp	r0, #0
    1838:	beq	18d4 <coda_ascbin_cursor_goto_next_array_element+0x14c>
    183c:	ldr	r0, [fp, #-8]
    1840:	ldr	r1, [r0, #4]
    1844:	mvn	r2, #0
    1848:	add	r1, r1, r2
    184c:	str	r1, [r0, #4]
    1850:	ldr	r0, [fp, #-8]
    1854:	add	r1, sp, #8
    1858:	bl	0 <coda_cursor_get_num_elements>
    185c:	cmp	r0, #0
    1860:	beq	1880 <coda_ascbin_cursor_goto_next_array_element+0xf8>
    1864:	ldr	r0, [fp, #-8]
    1868:	ldr	r1, [r0, #4]
    186c:	add	r1, r1, #1
    1870:	str	r1, [r0, #4]
    1874:	mvn	r0, #0
    1878:	str	r0, [fp, #-4]
    187c:	b	1950 <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    1880:	ldr	r0, [fp, #-8]
    1884:	ldr	r1, [r0, #4]
    1888:	add	r1, r1, #1
    188c:	str	r1, [r0, #4]
    1890:	ldr	r0, [sp, #12]
    1894:	cmp	r0, #0
    1898:	blt	18ac <coda_ascbin_cursor_goto_next_array_element+0x124>
    189c:	ldr	r0, [sp, #12]
    18a0:	ldr	r1, [sp, #8]
    18a4:	cmp	r0, r1
    18a8:	blt	18d0 <coda_ascbin_cursor_goto_next_array_element+0x148>
    18ac:	ldr	r2, [sp, #12]
    18b0:	ldr	r3, [sp, #8]
    18b4:	mvn	r0, #106	; 0x6a
    18b8:	movw	r1, #0
    18bc:	movt	r1, #0
    18c0:	bl	0 <coda_set_error>
    18c4:	mvn	r0, #0
    18c8:	str	r0, [fp, #-4]
    18cc:	b	1950 <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    18d0:	b	18d4 <coda_ascbin_cursor_goto_next_array_element+0x14c>
    18d4:	ldr	r0, [fp, #-8]
    18d8:	add	r1, sp, #16
    18dc:	bl	0 <coda_cursor_get_bit_size>
    18e0:	cmp	r0, #0
    18e4:	beq	18f4 <coda_ascbin_cursor_goto_next_array_element+0x16c>
    18e8:	mvn	r0, #0
    18ec:	str	r0, [fp, #-4]
    18f0:	b	1950 <coda_ascbin_cursor_goto_next_array_element+0x1c8>
    18f4:	ldr	r0, [fp, #-12]
    18f8:	ldr	r0, [r0, #40]	; 0x28
    18fc:	ldr	r1, [fp, #-8]
    1900:	ldr	r2, [r1, #4]
    1904:	add	r1, r1, r2, lsl #4
    1908:	str	r0, [r1, #-8]
    190c:	ldr	r0, [sp, #12]
    1910:	ldr	r1, [fp, #-8]
    1914:	ldr	r2, [r1, #4]
    1918:	add	r1, r1, r2, lsl #4
    191c:	str	r0, [r1, #-4]
    1920:	ldr	r0, [sp, #16]
    1924:	ldr	r1, [sp, #20]
    1928:	ldr	r2, [fp, #-8]
    192c:	ldr	r3, [r2, #4]
    1930:	ldr	r3, [r2, r3, lsl #4]!
    1934:	ldr	ip, [r2, #4]
    1938:	adds	r0, r3, r0
    193c:	adc	r1, ip, r1
    1940:	str	r0, [r2]
    1944:	str	r1, [r2, #4]
    1948:	movw	r0, #0
    194c:	str	r0, [fp, #-4]
    1950:	ldr	r0, [fp, #-4]
    1954:	mov	sp, fp
    1958:	pop	{fp, pc}
    195c:	.word	0x00000134

00001960 <coda_ascbin_cursor_goto_attributes>:
    1960:	push	{fp, lr}
    1964:	mov	fp, sp
    1968:	sub	sp, sp, #16
    196c:	str	r0, [fp, #-4]
    1970:	ldr	r0, [fp, #-4]
    1974:	add	r1, r0, #8
    1978:	ldr	r0, [r0, #4]
    197c:	sub	r0, r0, #1
    1980:	add	r0, r1, r0, lsl #4
    1984:	ldr	r0, [r0]
    1988:	ldr	r0, [r0]
    198c:	cmp	r0, #100	; 0x64
    1990:	bcs	19b4 <coda_ascbin_cursor_goto_attributes+0x54>
    1994:	ldr	r0, [fp, #-4]
    1998:	add	r1, r0, #8
    199c:	ldr	r0, [r0, #4]
    19a0:	sub	r0, r0, #1
    19a4:	add	r0, r1, r0, lsl #4
    19a8:	ldr	r0, [r0]
    19ac:	str	r0, [sp, #4]
    19b0:	b	19d4 <coda_ascbin_cursor_goto_attributes+0x74>
    19b4:	ldr	r0, [fp, #-4]
    19b8:	add	r1, r0, #8
    19bc:	ldr	r0, [r0, #4]
    19c0:	sub	r0, r0, #1
    19c4:	add	r0, r1, r0, lsl #4
    19c8:	ldr	r0, [r0]
    19cc:	ldr	r0, [r0, #4]
    19d0:	str	r0, [sp, #4]
    19d4:	ldr	r0, [sp, #4]
    19d8:	ldr	r0, [r0]
    19dc:	str	r0, [sp, #8]
    19e0:	ldr	r0, [fp, #-4]
    19e4:	ldr	r1, [r0, #4]
    19e8:	add	r1, r1, #1
    19ec:	str	r1, [r0, #4]
    19f0:	ldr	r0, [sp, #8]
    19f4:	bl	0 <coda_type_empty_record>
    19f8:	ldr	r1, [fp, #-4]
    19fc:	ldr	lr, [r1, #4]
    1a00:	add	r1, r1, lr, lsl #4
    1a04:	str	r0, [r1, #-8]
    1a08:	ldr	r0, [fp, #-4]
    1a0c:	ldr	r1, [r0, #4]
    1a10:	add	r0, r0, r1, lsl #4
    1a14:	mvn	r1, #0
    1a18:	str	r1, [r0, #-4]
    1a1c:	ldr	r0, [fp, #-4]
    1a20:	ldr	lr, [r0, #4]
    1a24:	str	r1, [r0, lr, lsl #4]!
    1a28:	str	r1, [r0, #4]
    1a2c:	movw	r0, #0
    1a30:	mov	sp, fp
    1a34:	pop	{fp, pc}

00001a38 <coda_ascbin_cursor_use_base_type_of_special_type>:
    1a38:	sub	sp, sp, #12
    1a3c:	str	r0, [sp, #8]
    1a40:	ldr	r0, [sp, #8]
    1a44:	add	r1, r0, #8
    1a48:	ldr	r0, [r0, #4]
    1a4c:	sub	r0, r0, #1
    1a50:	add	r0, r1, r0, lsl #4
    1a54:	ldr	r0, [r0]
    1a58:	ldr	r0, [r0]
    1a5c:	cmp	r0, #100	; 0x64
    1a60:	bcs	1a84 <coda_ascbin_cursor_use_base_type_of_special_type+0x4c>
    1a64:	ldr	r0, [sp, #8]
    1a68:	add	r1, r0, #8
    1a6c:	ldr	r0, [r0, #4]
    1a70:	sub	r0, r0, #1
    1a74:	add	r0, r1, r0, lsl #4
    1a78:	ldr	r0, [r0]
    1a7c:	str	r0, [sp]
    1a80:	b	1aa4 <coda_ascbin_cursor_use_base_type_of_special_type+0x6c>
    1a84:	ldr	r0, [sp, #8]
    1a88:	add	r1, r0, #8
    1a8c:	ldr	r0, [r0, #4]
    1a90:	sub	r0, r0, #1
    1a94:	add	r0, r1, r0, lsl #4
    1a98:	ldr	r0, [r0]
    1a9c:	ldr	r0, [r0, #4]
    1aa0:	str	r0, [sp]
    1aa4:	ldr	r0, [sp]
    1aa8:	str	r0, [sp, #4]
    1aac:	ldr	r0, [sp, #4]
    1ab0:	ldr	r0, [r0, #44]	; 0x2c
    1ab4:	ldr	r1, [sp, #8]
    1ab8:	add	r2, r1, #8
    1abc:	ldr	r1, [r1, #4]
    1ac0:	sub	r1, r1, #1
    1ac4:	add	r1, r2, r1, lsl #4
    1ac8:	str	r0, [r1]
    1acc:	movw	r0, #0
    1ad0:	add	sp, sp, #12
    1ad4:	bx	lr

00001ad8 <coda_ascbin_cursor_get_bit_size>:
    1ad8:	push	{r4, sl, fp, lr}
    1adc:	add	fp, sp, #8
    1ae0:	sub	sp, sp, #1696	; 0x6a0
    1ae4:	str	r0, [fp, #-16]
    1ae8:	str	r1, [fp, #-20]	; 0xffffffec
    1aec:	ldr	r0, [fp, #-16]
    1af0:	add	r1, r0, #8
    1af4:	ldr	r0, [r0, #4]
    1af8:	sub	r0, r0, #1
    1afc:	add	r0, r1, r0, lsl #4
    1b00:	ldr	r0, [r0]
    1b04:	ldr	r0, [r0]
    1b08:	cmp	r0, #100	; 0x64
    1b0c:	bcs	1b30 <coda_ascbin_cursor_get_bit_size+0x58>
    1b10:	ldr	r0, [fp, #-16]
    1b14:	add	r1, r0, #8
    1b18:	ldr	r0, [r0, #4]
    1b1c:	sub	r0, r0, #1
    1b20:	add	r0, r1, r0, lsl #4
    1b24:	ldr	r0, [r0]
    1b28:	str	r0, [sp, #36]	; 0x24
    1b2c:	b	1b50 <coda_ascbin_cursor_get_bit_size+0x78>
    1b30:	ldr	r0, [fp, #-16]
    1b34:	add	r1, r0, #8
    1b38:	ldr	r0, [r0, #4]
    1b3c:	sub	r0, r0, #1
    1b40:	add	r0, r1, r0, lsl #4
    1b44:	ldr	r0, [r0]
    1b48:	ldr	r0, [r0, #4]
    1b4c:	str	r0, [sp, #36]	; 0x24
    1b50:	ldr	r0, [sp, #36]	; 0x24
    1b54:	str	r0, [fp, #-24]	; 0xffffffe8
    1b58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b5c:	ldr	r0, [r0, #28]
    1b60:	cmp	r0, #0
    1b64:	blt	1b88 <coda_ascbin_cursor_get_bit_size+0xb0>
    1b68:	b	1b6c <coda_ascbin_cursor_get_bit_size+0x94>
    1b6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b70:	ldr	r1, [r0, #24]
    1b74:	ldr	r0, [r0, #28]
    1b78:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b7c:	str	r0, [r2, #4]
    1b80:	str	r1, [r2]
    1b84:	b	21a0 <coda_ascbin_cursor_get_bit_size+0x6c8>
    1b88:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1b8c:	ldr	r0, [r0, #8]
    1b90:	cmp	r0, #0
    1b94:	str	r0, [sp, #32]
    1b98:	beq	1bb0 <coda_ascbin_cursor_get_bit_size+0xd8>
    1b9c:	b	1ba0 <coda_ascbin_cursor_get_bit_size+0xc8>
    1ba0:	ldr	r0, [sp, #32]
    1ba4:	cmp	r0, #1
    1ba8:	beq	1fbc <coda_ascbin_cursor_get_bit_size+0x4e4>
    1bac:	b	217c <coda_ascbin_cursor_get_bit_size+0x6a4>
    1bb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1bb4:	str	r0, [fp, #-28]	; 0xffffffe4
    1bb8:	ldr	r0, [pc, #1524]	; 21b4 <coda_ascbin_cursor_get_bit_size+0x6dc>
    1bbc:	ldr	r0, [pc, r0]
    1bc0:	str	r0, [sp, #28]
    1bc4:	bl	0 <__aeabi_read_tp>
    1bc8:	ldr	ip, [sp, #28]
    1bcc:	ldr	r0, [r0, ip]
    1bd0:	cmp	r0, #0
    1bd4:	beq	1cb4 <coda_ascbin_cursor_get_bit_size+0x1dc>
    1bd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1bdc:	ldr	r0, [r0, #32]
    1be0:	movw	r1, #0
    1be4:	cmp	r0, r1
    1be8:	beq	1cb4 <coda_ascbin_cursor_get_bit_size+0x1dc>
    1bec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1bf0:	ldr	r0, [r0, #32]
    1bf4:	ldr	r1, [fp, #-16]
    1bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1bfc:	bl	0 <coda_expression_eval_integer>
    1c00:	cmp	r0, #0
    1c04:	beq	1c28 <coda_ascbin_cursor_get_bit_size+0x150>
    1c08:	movw	r0, #0
    1c0c:	movt	r0, #0
    1c10:	bl	0 <coda_add_error_message>
    1c14:	ldr	r0, [fp, #-16]
    1c18:	bl	0 <coda_cursor_add_to_error_message>
    1c1c:	mvn	r0, #0
    1c20:	str	r0, [fp, #-12]
    1c24:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1c28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1c2c:	ldr	r1, [r0, #24]
    1c30:	ldr	r0, [r0, #28]
    1c34:	mvn	r2, #7
    1c38:	eor	r1, r1, r2
    1c3c:	mvn	r0, r0
    1c40:	orr	r0, r1, r0
    1c44:	cmp	r0, #0
    1c48:	bne	1c70 <coda_ascbin_cursor_get_bit_size+0x198>
    1c4c:	b	1c50 <coda_ascbin_cursor_get_bit_size+0x178>
    1c50:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c54:	ldr	r1, [r0]
    1c58:	ldr	r2, [r0, #4]
    1c5c:	lsl	r2, r2, #3
    1c60:	orr	r2, r2, r1, lsr #29
    1c64:	lsl	r1, r1, #3
    1c68:	str	r1, [r0]
    1c6c:	str	r2, [r0, #4]
    1c70:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c74:	ldr	r0, [r0, #4]
    1c78:	cmn	r0, #1
    1c7c:	bgt	1cb0 <coda_ascbin_cursor_get_bit_size+0x1d8>
    1c80:	b	1c84 <coda_ascbin_cursor_get_bit_size+0x1ac>
    1c84:	ldr	r0, [pc, #1324]	; 21b8 <coda_ascbin_cursor_get_bit_size+0x6e0>
    1c88:	ldr	r1, [fp, #-20]	; 0xffffffec
    1c8c:	ldr	r2, [r1]
    1c90:	movw	r1, #0
    1c94:	movt	r1, #0
    1c98:	bl	0 <coda_set_error>
    1c9c:	ldr	r0, [fp, #-16]
    1ca0:	bl	0 <coda_cursor_add_to_error_message>
    1ca4:	mvn	r0, #0
    1ca8:	str	r0, [fp, #-12]
    1cac:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1cb0:	b	1fb8 <coda_ascbin_cursor_get_bit_size+0x4e0>
    1cb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1cb8:	ldr	r0, [r0, #68]	; 0x44
    1cbc:	movw	r1, #0
    1cc0:	cmp	r0, r1
    1cc4:	beq	1d30 <coda_ascbin_cursor_get_bit_size+0x258>
    1cc8:	ldr	r0, [fp, #-16]
    1ccc:	sub	r1, fp, #552	; 0x228
    1cd0:	mov	r2, r1
    1cd4:	str	r0, [sp, #24]
    1cd8:	mov	r0, r2
    1cdc:	ldr	r2, [sp, #24]
    1ce0:	str	r1, [sp, #20]
    1ce4:	mov	r1, r2
    1ce8:	movw	r2, #520	; 0x208
    1cec:	bl	0 <memcpy>
    1cf0:	ldr	r0, [sp, #20]
    1cf4:	bl	0 <coda_cursor_goto_available_union_field>
    1cf8:	cmp	r0, #0
    1cfc:	beq	1d0c <coda_ascbin_cursor_get_bit_size+0x234>
    1d00:	mvn	r0, #0
    1d04:	str	r0, [fp, #-12]
    1d08:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d0c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1d10:	sub	r0, fp, #552	; 0x228
    1d14:	bl	0 <coda_cursor_get_bit_size>
    1d18:	cmp	r0, #0
    1d1c:	beq	1d2c <coda_ascbin_cursor_get_bit_size+0x254>
    1d20:	mvn	r0, #0
    1d24:	str	r0, [fp, #-12]
    1d28:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d2c:	b	1fb4 <coda_ascbin_cursor_get_bit_size+0x4dc>
    1d30:	mov	r0, #0
    1d34:	str	r0, [fp, #-556]	; 0xfffffdd4
    1d38:	str	r0, [fp, #-560]	; 0xfffffdd0
    1d3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1d40:	ldr	r0, [r0, #48]	; 0x30
    1d44:	cmp	r0, #0
    1d48:	ble	1fa0 <coda_ascbin_cursor_get_bit_size+0x4c8>
    1d4c:	ldr	r0, [fp, #-16]
    1d50:	add	r1, sp, #624	; 0x270
    1d54:	mov	r2, r1
    1d58:	str	r0, [sp, #16]
    1d5c:	mov	r0, r2
    1d60:	ldr	r2, [sp, #16]
    1d64:	str	r1, [sp, #12]
    1d68:	mov	r1, r2
    1d6c:	movw	r2, #520	; 0x208
    1d70:	bl	0 <memcpy>
    1d74:	ldr	r0, [sp, #12]
    1d78:	bl	0 <coda_cursor_goto_first_record_field>
    1d7c:	cmp	r0, #0
    1d80:	beq	1d90 <coda_ascbin_cursor_get_bit_size+0x2b8>
    1d84:	mvn	r0, #0
    1d88:	str	r0, [fp, #-12]
    1d8c:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1d90:	movw	r0, #0
    1d94:	str	r0, [sp, #620]	; 0x26c
    1d98:	ldr	r0, [sp, #620]	; 0x26c
    1d9c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1da0:	ldr	r1, [r1, #48]	; 0x30
    1da4:	cmp	r0, r1
    1da8:	bge	1f9c <coda_ascbin_cursor_get_bit_size+0x4c4>
    1dac:	mvn	r0, #0
    1db0:	str	r0, [sp, #604]	; 0x25c
    1db4:	str	r0, [sp, #600]	; 0x258
    1db8:	ldr	r0, [sp, #620]	; 0x26c
    1dbc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1dc0:	ldr	r1, [r1, #48]	; 0x30
    1dc4:	sub	r1, r1, #1
    1dc8:	cmp	r0, r1
    1dcc:	bge	1df8 <coda_ascbin_cursor_get_bit_size+0x320>
    1dd0:	add	r0, sp, #624	; 0x270
    1dd4:	add	r1, sp, #608	; 0x260
    1dd8:	add	r2, sp, #600	; 0x258
    1ddc:	bl	aa8 <get_next_relative_field_bit_offset>
    1de0:	cmp	r0, #0
    1de4:	beq	1df4 <coda_ascbin_cursor_get_bit_size+0x31c>
    1de8:	mvn	r0, #0
    1dec:	str	r0, [fp, #-12]
    1df0:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1df4:	b	1df8 <coda_ascbin_cursor_get_bit_size+0x320>
    1df8:	ldr	r0, [sp, #604]	; 0x25c
    1dfc:	cmn	r0, #1
    1e00:	bgt	1e2c <coda_ascbin_cursor_get_bit_size+0x354>
    1e04:	b	1e08 <coda_ascbin_cursor_get_bit_size+0x330>
    1e08:	add	r0, sp, #624	; 0x270
    1e0c:	add	r1, sp, #600	; 0x258
    1e10:	bl	0 <coda_cursor_get_bit_size>
    1e14:	cmp	r0, #0
    1e18:	beq	1e28 <coda_ascbin_cursor_get_bit_size+0x350>
    1e1c:	mvn	r0, #0
    1e20:	str	r0, [fp, #-12]
    1e24:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1e28:	b	1e2c <coda_ascbin_cursor_get_bit_size+0x354>
    1e2c:	ldr	r0, [sp, #600]	; 0x258
    1e30:	ldr	r1, [sp, #604]	; 0x25c
    1e34:	ldr	r2, [fp, #-560]	; 0xfffffdd0
    1e38:	ldr	r3, [fp, #-556]	; 0xfffffdd4
    1e3c:	adds	r0, r2, r0
    1e40:	adc	r1, r3, r1
    1e44:	str	r0, [fp, #-560]	; 0xfffffdd0
    1e48:	str	r1, [fp, #-556]	; 0xfffffdd4
    1e4c:	ldr	r0, [sp, #620]	; 0x26c
    1e50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1e54:	ldr	r1, [r1, #48]	; 0x30
    1e58:	sub	r1, r1, #1
    1e5c:	cmp	r0, r1
    1e60:	bge	1f88 <coda_ascbin_cursor_get_bit_size+0x4b0>
    1e64:	mov	r0, #1
    1e68:	str	r0, [sp, #596]	; 0x254
    1e6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1e70:	ldr	r0, [r0, #52]	; 0x34
    1e74:	ldr	r1, [sp, #620]	; 0x26c
    1e78:	add	r1, r1, #1
    1e7c:	add	r0, r0, r1, lsl #2
    1e80:	ldr	r0, [r0]
    1e84:	ldr	r0, [r0, #20]
    1e88:	movw	r1, #0
    1e8c:	cmp	r0, r1
    1e90:	beq	1ed4 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1e94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1e98:	ldr	r0, [r0, #52]	; 0x34
    1e9c:	ldr	r1, [sp, #620]	; 0x26c
    1ea0:	add	r1, r1, #1
    1ea4:	add	r0, r0, r1, lsl #2
    1ea8:	ldr	r0, [r0]
    1eac:	ldr	r0, [r0, #20]
    1eb0:	ldr	r1, [fp, #-16]
    1eb4:	add	r2, sp, #596	; 0x254
    1eb8:	bl	0 <coda_expression_eval_bool>
    1ebc:	cmp	r0, #0
    1ec0:	beq	1ed0 <coda_ascbin_cursor_get_bit_size+0x3f8>
    1ec4:	mvn	r0, #0
    1ec8:	str	r0, [fp, #-12]
    1ecc:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1ed0:	b	1ed4 <coda_ascbin_cursor_get_bit_size+0x3fc>
    1ed4:	ldr	r0, [sp, #596]	; 0x254
    1ed8:	cmp	r0, #0
    1edc:	beq	1f14 <coda_ascbin_cursor_get_bit_size+0x43c>
    1ee0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1ee4:	ldr	r0, [r0, #52]	; 0x34
    1ee8:	ldr	r1, [sp, #620]	; 0x26c
    1eec:	add	r0, r0, r1, lsl #2
    1ef0:	ldr	r0, [r0, #4]
    1ef4:	ldr	r0, [r0, #8]
    1ef8:	add	r1, sp, #624	; 0x270
    1efc:	add	r1, r1, #8
    1f00:	ldr	r2, [sp, #628]	; 0x274
    1f04:	sub	r2, r2, #1
    1f08:	add	r1, r1, r2, lsl #4
    1f0c:	str	r0, [r1]
    1f10:	b	1f38 <coda_ascbin_cursor_get_bit_size+0x460>
    1f14:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1f18:	ldr	r0, [r0]
    1f1c:	bl	0 <coda_no_data_singleton>
    1f20:	add	lr, sp, #624	; 0x270
    1f24:	add	lr, lr, #8
    1f28:	ldr	r1, [sp, #628]	; 0x274
    1f2c:	sub	r1, r1, #1
    1f30:	add	r1, lr, r1, lsl #4
    1f34:	str	r0, [r1]
    1f38:	ldr	r0, [sp, #620]	; 0x26c
    1f3c:	add	r0, r0, #1
    1f40:	add	r1, sp, #624	; 0x270
    1f44:	add	r1, r1, #8
    1f48:	ldr	r2, [sp, #628]	; 0x274
    1f4c:	add	r2, r1, r2, lsl #4
    1f50:	sub	r2, r2, #16
    1f54:	str	r0, [r2, #4]
    1f58:	ldr	r0, [sp, #628]	; 0x274
    1f5c:	add	r0, r1, r0, lsl #4
    1f60:	ldr	r1, [fp, #-16]
    1f64:	ldr	r2, [r1, #4]
    1f68:	ldr	r2, [r1, r2, lsl #4]!
    1f6c:	ldr	r1, [r1, #4]
    1f70:	ldr	r3, [sp, #608]	; 0x260
    1f74:	ldr	ip, [sp, #612]	; 0x264
    1f78:	adds	r2, r2, r3
    1f7c:	adc	r1, r1, ip
    1f80:	str	r2, [r0, #-8]
    1f84:	str	r1, [r0, #-4]
    1f88:	b	1f8c <coda_ascbin_cursor_get_bit_size+0x4b4>
    1f8c:	ldr	r0, [sp, #620]	; 0x26c
    1f90:	add	r0, r0, #1
    1f94:	str	r0, [sp, #620]	; 0x26c
    1f98:	b	1d98 <coda_ascbin_cursor_get_bit_size+0x2c0>
    1f9c:	b	1fa0 <coda_ascbin_cursor_get_bit_size+0x4c8>
    1fa0:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    1fa4:	ldr	r1, [fp, #-556]	; 0xfffffdd4
    1fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fac:	str	r1, [r2, #4]
    1fb0:	str	r0, [r2]
    1fb4:	b	1fb8 <coda_ascbin_cursor_get_bit_size+0x4e0>
    1fb8:	b	219c <coda_ascbin_cursor_get_bit_size+0x6c4>
    1fbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1fc0:	str	r0, [sp, #592]	; 0x250
    1fc4:	ldr	r0, [fp, #-16]
    1fc8:	add	r1, sp, #588	; 0x24c
    1fcc:	bl	0 <coda_cursor_get_num_elements>
    1fd0:	cmp	r0, #0
    1fd4:	beq	1fe4 <coda_ascbin_cursor_get_bit_size+0x50c>
    1fd8:	mvn	r0, #0
    1fdc:	str	r0, [fp, #-12]
    1fe0:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    1fe4:	ldr	r0, [sp, #588]	; 0x24c
    1fe8:	cmp	r0, #0
    1fec:	bne	2004 <coda_ascbin_cursor_get_bit_size+0x52c>
    1ff0:	ldr	r0, [fp, #-20]	; 0xffffffec
    1ff4:	mov	r1, #0
    1ff8:	str	r1, [r0, #4]
    1ffc:	str	r1, [r0]
    2000:	b	2178 <coda_ascbin_cursor_get_bit_size+0x6a0>
    2004:	ldr	r0, [sp, #592]	; 0x250
    2008:	ldr	r0, [r0, #40]	; 0x28
    200c:	ldr	r0, [r0, #28]
    2010:	cmp	r0, #0
    2014:	blt	2050 <coda_ascbin_cursor_get_bit_size+0x578>
    2018:	b	201c <coda_ascbin_cursor_get_bit_size+0x544>
    201c:	ldr	r0, [sp, #588]	; 0x24c
    2020:	asr	r1, r0, #31
    2024:	ldr	r2, [sp, #592]	; 0x250
    2028:	ldr	r2, [r2, #40]	; 0x28
    202c:	ldr	r3, [r2, #24]
    2030:	ldr	r2, [r2, #28]
    2034:	umull	ip, lr, r0, r3
    2038:	mla	r0, r0, r2, lr
    203c:	mla	r0, r1, r3, r0
    2040:	ldr	r1, [fp, #-20]	; 0xffffffec
    2044:	str	ip, [r1]
    2048:	str	r0, [r1, #4]
    204c:	b	2174 <coda_ascbin_cursor_get_bit_size+0x69c>
    2050:	mov	r0, #0
    2054:	str	r0, [sp, #60]	; 0x3c
    2058:	str	r0, [sp, #56]	; 0x38
    205c:	ldr	r1, [fp, #-16]
    2060:	add	r0, sp, #64	; 0x40
    2064:	mov	r2, #520	; 0x208
    2068:	str	r0, [sp, #8]
    206c:	bl	0 <memcpy>
    2070:	ldr	r1, [sp, #68]	; 0x44
    2074:	add	r1, r1, #1
    2078:	str	r1, [sp, #68]	; 0x44
    207c:	ldr	r1, [sp, #68]	; 0x44
    2080:	ldr	r2, [sp, #8]
    2084:	add	lr, r2, r1, lsl #4
    2088:	ldr	r3, [lr, #-16]
    208c:	ldr	ip, [lr, #-12]
    2090:	str	r3, [r2, r1, lsl #4]
    2094:	str	ip, [lr, #4]
    2098:	movw	r1, #0
    209c:	str	r1, [sp, #52]	; 0x34
    20a0:	str	r0, [sp, #4]
    20a4:	ldr	r0, [sp, #52]	; 0x34
    20a8:	ldr	r1, [sp, #588]	; 0x24c
    20ac:	cmp	r0, r1
    20b0:	bge	2160 <coda_ascbin_cursor_get_bit_size+0x688>
    20b4:	ldr	r0, [sp, #592]	; 0x250
    20b8:	ldr	r0, [r0, #40]	; 0x28
    20bc:	add	r1, sp, #64	; 0x40
    20c0:	add	r1, r1, #8
    20c4:	ldr	r2, [sp, #68]	; 0x44
    20c8:	add	r2, r1, r2, lsl #4
    20cc:	str	r0, [r2, #-16]
    20d0:	ldr	r0, [sp, #52]	; 0x34
    20d4:	ldr	r2, [sp, #68]	; 0x44
    20d8:	sub	r2, r2, #1
    20dc:	add	r1, r1, r2, lsl #4
    20e0:	str	r0, [r1, #4]
    20e4:	add	r0, sp, #64	; 0x40
    20e8:	add	r1, sp, #40	; 0x28
    20ec:	bl	0 <coda_cursor_get_bit_size>
    20f0:	cmp	r0, #0
    20f4:	beq	2104 <coda_ascbin_cursor_get_bit_size+0x62c>
    20f8:	mvn	r0, #0
    20fc:	str	r0, [fp, #-12]
    2100:	b	21a8 <coda_ascbin_cursor_get_bit_size+0x6d0>
    2104:	ldr	r0, [sp, #40]	; 0x28
    2108:	ldr	r1, [sp, #44]	; 0x2c
    210c:	ldr	r2, [sp, #56]	; 0x38
    2110:	ldr	r3, [sp, #60]	; 0x3c
    2114:	adds	r0, r2, r0
    2118:	adc	r1, r3, r1
    211c:	str	r0, [sp, #56]	; 0x38
    2120:	str	r1, [sp, #60]	; 0x3c
    2124:	ldr	r0, [sp, #40]	; 0x28
    2128:	ldr	r1, [sp, #44]	; 0x2c
    212c:	ldr	r2, [sp, #68]	; 0x44
    2130:	add	r3, sp, #64	; 0x40
    2134:	add	ip, r3, r2, lsl #4
    2138:	ldr	lr, [ip, #4]
    213c:	ldr	r4, [r3, r2, lsl #4]
    2140:	adds	r0, r4, r0
    2144:	adc	r1, lr, r1
    2148:	str	r0, [r3, r2, lsl #4]
    214c:	str	r1, [ip, #4]
    2150:	ldr	r0, [sp, #52]	; 0x34
    2154:	add	r0, r0, #1
    2158:	str	r0, [sp, #52]	; 0x34
    215c:	b	20a4 <coda_ascbin_cursor_get_bit_size+0x5cc>
    2160:	ldr	r0, [sp, #56]	; 0x38
    2164:	ldr	r1, [sp, #60]	; 0x3c
    2168:	ldr	r2, [fp, #-20]	; 0xffffffec
    216c:	str	r1, [r2, #4]
    2170:	str	r0, [r2]
    2174:	b	2178 <coda_ascbin_cursor_get_bit_size+0x6a0>
    2178:	b	219c <coda_ascbin_cursor_get_bit_size+0x6c4>
    217c:	movw	r0, #0
    2180:	movt	r0, #0
    2184:	movw	r1, #0
    2188:	movt	r1, #0
    218c:	movw	r2, #768	; 0x300
    2190:	movw	r3, #0
    2194:	movt	r3, #0
    2198:	bl	0 <__assert_fail>
    219c:	b	21a0 <coda_ascbin_cursor_get_bit_size+0x6c8>
    21a0:	movw	r0, #0
    21a4:	str	r0, [fp, #-12]
    21a8:	ldr	r0, [fp, #-12]
    21ac:	sub	sp, fp, #8
    21b0:	pop	{r4, sl, fp, pc}
    21b4:	.word	0x000005f0
    21b8:	.word	0xfffffed4

000021bc <coda_ascbin_cursor_get_num_elements>:
    21bc:	push	{fp, lr}
    21c0:	mov	fp, sp
    21c4:	sub	sp, sp, #72	; 0x48
    21c8:	str	r0, [fp, #-8]
    21cc:	str	r1, [fp, #-12]
    21d0:	ldr	r0, [fp, #-8]
    21d4:	add	r1, r0, #8
    21d8:	ldr	r0, [r0, #4]
    21dc:	sub	r0, r0, #1
    21e0:	add	r0, r1, r0, lsl #4
    21e4:	ldr	r0, [r0]
    21e8:	ldr	r0, [r0]
    21ec:	cmp	r0, #100	; 0x64
    21f0:	bcs	2214 <coda_ascbin_cursor_get_num_elements+0x58>
    21f4:	ldr	r0, [fp, #-8]
    21f8:	add	r1, r0, #8
    21fc:	ldr	r0, [r0, #4]
    2200:	sub	r0, r0, #1
    2204:	add	r0, r1, r0, lsl #4
    2208:	ldr	r0, [r0]
    220c:	str	r0, [sp, #4]
    2210:	b	2234 <coda_ascbin_cursor_get_num_elements+0x78>
    2214:	ldr	r0, [fp, #-8]
    2218:	add	r1, r0, #8
    221c:	ldr	r0, [r0, #4]
    2220:	sub	r0, r0, #1
    2224:	add	r0, r1, r0, lsl #4
    2228:	ldr	r0, [r0]
    222c:	ldr	r0, [r0, #4]
    2230:	str	r0, [sp, #4]
    2234:	ldr	r0, [sp, #4]
    2238:	str	r0, [fp, #-16]
    223c:	ldr	r0, [fp, #-16]
    2240:	ldr	r0, [r0, #8]
    2244:	cmp	r0, #0
    2248:	str	r0, [sp]
    224c:	beq	2264 <coda_ascbin_cursor_get_num_elements+0xa8>
    2250:	b	2254 <coda_ascbin_cursor_get_num_elements+0x98>
    2254:	ldr	r0, [sp]
    2258:	cmp	r0, #1
    225c:	beq	2278 <coda_ascbin_cursor_get_num_elements+0xbc>
    2260:	b	23d0 <coda_ascbin_cursor_get_num_elements+0x214>
    2264:	ldr	r0, [fp, #-16]
    2268:	ldr	r0, [r0, #48]	; 0x30
    226c:	ldr	r1, [fp, #-12]
    2270:	str	r0, [r1]
    2274:	b	23f0 <coda_ascbin_cursor_get_num_elements+0x234>
    2278:	ldr	r0, [fp, #-16]
    227c:	str	r0, [fp, #-20]	; 0xffffffec
    2280:	ldr	r0, [fp, #-20]	; 0xffffffec
    2284:	ldr	r0, [r0, #44]	; 0x2c
    2288:	cmn	r0, #1
    228c:	beq	22a4 <coda_ascbin_cursor_get_num_elements+0xe8>
    2290:	ldr	r0, [fp, #-20]	; 0xffffffec
    2294:	ldr	r0, [r0, #44]	; 0x2c
    2298:	ldr	r1, [fp, #-12]
    229c:	str	r0, [r1]
    22a0:	b	23cc <coda_ascbin_cursor_get_num_elements+0x210>
    22a4:	movw	r0, #1
    22a8:	str	r0, [fp, #-24]	; 0xffffffe8
    22ac:	movw	r0, #0
    22b0:	str	r0, [fp, #-28]	; 0xffffffe4
    22b4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    22b8:	ldr	r1, [fp, #-20]	; 0xffffffec
    22bc:	ldr	r1, [r1, #48]	; 0x30
    22c0:	cmp	r0, r1
    22c4:	bge	23c0 <coda_ascbin_cursor_get_num_elements+0x204>
    22c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    22cc:	add	r0, r0, #52	; 0x34
    22d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22d4:	add	r0, r0, r1, lsl #2
    22d8:	ldr	r0, [r0]
    22dc:	cmn	r0, #1
    22e0:	bne	238c <coda_ascbin_cursor_get_num_elements+0x1d0>
    22e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    22e8:	add	r0, r0, #84	; 0x54
    22ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    22f0:	add	r0, r0, r1, lsl #2
    22f4:	ldr	r0, [r0]
    22f8:	ldr	r1, [fp, #-8]
    22fc:	add	r2, sp, #32
    2300:	bl	0 <coda_expression_eval_integer>
    2304:	cmp	r0, #0
    2308:	beq	2330 <coda_ascbin_cursor_get_num_elements+0x174>
    230c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2310:	movw	r0, #0
    2314:	movt	r0, #0
    2318:	bl	0 <coda_add_error_message>
    231c:	ldr	r0, [fp, #-8]
    2320:	bl	0 <coda_cursor_add_to_error_message>
    2324:	mvn	r0, #0
    2328:	str	r0, [fp, #-4]
    232c:	b	23f8 <coda_ascbin_cursor_get_num_elements+0x23c>
    2330:	ldr	r0, [sp, #36]	; 0x24
    2334:	cmn	r0, #1
    2338:	bgt	2378 <coda_ascbin_cursor_get_num_elements+0x1bc>
    233c:	b	2340 <coda_ascbin_cursor_get_num_elements+0x184>
    2340:	add	r2, sp, #11
    2344:	ldr	r0, [sp, #32]
    2348:	ldr	r1, [sp, #36]	; 0x24
    234c:	bl	0 <coda_str64>
    2350:	ldr	r0, [pc, #172]	; 2404 <coda_ascbin_cursor_get_num_elements+0x248>
    2354:	add	r2, sp, #11
    2358:	movw	r1, #0
    235c:	movt	r1, #0
    2360:	bl	0 <coda_set_error>
    2364:	ldr	r0, [fp, #-8]
    2368:	bl	0 <coda_cursor_add_to_error_message>
    236c:	mvn	r0, #0
    2370:	str	r0, [fp, #-4]
    2374:	b	23f8 <coda_ascbin_cursor_get_num_elements+0x23c>
    2378:	ldr	r0, [sp, #32]
    237c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2380:	mul	r0, r1, r0
    2384:	str	r0, [fp, #-24]	; 0xffffffe8
    2388:	b	23ac <coda_ascbin_cursor_get_num_elements+0x1f0>
    238c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2390:	add	r0, r0, #52	; 0x34
    2394:	ldr	r1, [fp, #-28]	; 0xffffffe4
    2398:	add	r0, r0, r1, lsl #2
    239c:	ldr	r0, [r0]
    23a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    23a4:	mul	r0, r1, r0
    23a8:	str	r0, [fp, #-24]	; 0xffffffe8
    23ac:	b	23b0 <coda_ascbin_cursor_get_num_elements+0x1f4>
    23b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    23b4:	add	r0, r0, #1
    23b8:	str	r0, [fp, #-28]	; 0xffffffe4
    23bc:	b	22b4 <coda_ascbin_cursor_get_num_elements+0xf8>
    23c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    23c4:	ldr	r1, [fp, #-12]
    23c8:	str	r0, [r1]
    23cc:	b	23f0 <coda_ascbin_cursor_get_num_elements+0x234>
    23d0:	movw	r0, #0
    23d4:	movt	r0, #0
    23d8:	movw	r1, #0
    23dc:	movt	r1, #0
    23e0:	movw	r2, #835	; 0x343
    23e4:	movw	r3, #0
    23e8:	movt	r3, #0
    23ec:	bl	0 <__assert_fail>
    23f0:	movw	r0, #0
    23f4:	str	r0, [fp, #-4]
    23f8:	ldr	r0, [fp, #-4]
    23fc:	mov	sp, fp
    2400:	pop	{fp, pc}
    2404:	.word	0xfffffed4

00002408 <coda_ascbin_cursor_get_record_field_available_status>:
    2408:	push	{fp, lr}
    240c:	mov	fp, sp
    2410:	sub	sp, sp, #32
    2414:	str	r0, [fp, #-8]
    2418:	str	r1, [fp, #-12]
    241c:	str	r2, [sp, #16]
    2420:	ldr	r0, [fp, #-8]
    2424:	add	r1, r0, #8
    2428:	ldr	r0, [r0, #4]
    242c:	sub	r0, r0, #1
    2430:	add	r0, r1, r0, lsl #4
    2434:	ldr	r0, [r0]
    2438:	ldr	r0, [r0]
    243c:	cmp	r0, #100	; 0x64
    2440:	bcs	2464 <coda_ascbin_cursor_get_record_field_available_status+0x5c>
    2444:	ldr	r0, [fp, #-8]
    2448:	add	r1, r0, #8
    244c:	ldr	r0, [r0, #4]
    2450:	sub	r0, r0, #1
    2454:	add	r0, r1, r0, lsl #4
    2458:	ldr	r0, [r0]
    245c:	str	r0, [sp, #4]
    2460:	b	2484 <coda_ascbin_cursor_get_record_field_available_status+0x7c>
    2464:	ldr	r0, [fp, #-8]
    2468:	add	r1, r0, #8
    246c:	ldr	r0, [r0, #4]
    2470:	sub	r0, r0, #1
    2474:	add	r0, r1, r0, lsl #4
    2478:	ldr	r0, [r0]
    247c:	ldr	r0, [r0, #4]
    2480:	str	r0, [sp, #4]
    2484:	ldr	r0, [sp, #4]
    2488:	str	r0, [sp, #12]
    248c:	ldr	r0, [fp, #-12]
    2490:	cmp	r0, #0
    2494:	blt	24ac <coda_ascbin_cursor_get_record_field_available_status+0xa4>
    2498:	ldr	r0, [fp, #-12]
    249c:	ldr	r1, [sp, #12]
    24a0:	ldr	r1, [r1, #48]	; 0x30
    24a4:	cmp	r0, r1
    24a8:	blt	24d4 <coda_ascbin_cursor_get_record_field_available_status+0xcc>
    24ac:	ldr	r2, [fp, #-12]
    24b0:	ldr	r0, [sp, #12]
    24b4:	ldr	r3, [r0, #48]	; 0x30
    24b8:	mvn	r0, #100	; 0x64
    24bc:	movw	r1, #0
    24c0:	movt	r1, #0
    24c4:	bl	0 <coda_set_error>
    24c8:	mvn	r0, #0
    24cc:	str	r0, [fp, #-4]
    24d0:	b	25a4 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    24d4:	ldr	r0, [sp, #12]
    24d8:	ldr	r0, [r0, #68]	; 0x44
    24dc:	movw	r1, #0
    24e0:	cmp	r0, r1
    24e4:	beq	252c <coda_ascbin_cursor_get_record_field_available_status+0x124>
    24e8:	ldr	r0, [fp, #-8]
    24ec:	add	r1, sp, #8
    24f0:	bl	0 <coda_cursor_get_available_union_field_index>
    24f4:	cmp	r0, #0
    24f8:	beq	2508 <coda_ascbin_cursor_get_record_field_available_status+0x100>
    24fc:	mvn	r0, #0
    2500:	str	r0, [fp, #-4]
    2504:	b	25a4 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2508:	ldr	r0, [fp, #-12]
    250c:	ldr	r1, [sp, #8]
    2510:	cmp	r0, r1
    2514:	movw	r0, #0
    2518:	moveq	r0, #1
    251c:	and	r0, r0, #1
    2520:	ldr	r1, [sp, #16]
    2524:	str	r0, [r1]
    2528:	b	259c <coda_ascbin_cursor_get_record_field_available_status+0x194>
    252c:	ldr	r0, [sp, #12]
    2530:	ldr	r0, [r0, #52]	; 0x34
    2534:	ldr	r1, [fp, #-12]
    2538:	add	r0, r0, r1, lsl #2
    253c:	ldr	r0, [r0]
    2540:	ldr	r0, [r0, #20]
    2544:	movw	r1, #0
    2548:	cmp	r0, r1
    254c:	beq	258c <coda_ascbin_cursor_get_record_field_available_status+0x184>
    2550:	ldr	r0, [sp, #12]
    2554:	ldr	r0, [r0, #52]	; 0x34
    2558:	ldr	r1, [fp, #-12]
    255c:	add	r0, r0, r1, lsl #2
    2560:	ldr	r0, [r0]
    2564:	ldr	r0, [r0, #20]
    2568:	ldr	r1, [fp, #-8]
    256c:	ldr	r2, [sp, #16]
    2570:	bl	0 <coda_expression_eval_bool>
    2574:	cmp	r0, #0
    2578:	beq	2588 <coda_ascbin_cursor_get_record_field_available_status+0x180>
    257c:	mvn	r0, #0
    2580:	str	r0, [fp, #-4]
    2584:	b	25a4 <coda_ascbin_cursor_get_record_field_available_status+0x19c>
    2588:	b	2598 <coda_ascbin_cursor_get_record_field_available_status+0x190>
    258c:	ldr	r0, [sp, #16]
    2590:	movw	r1, #1
    2594:	str	r1, [r0]
    2598:	b	259c <coda_ascbin_cursor_get_record_field_available_status+0x194>
    259c:	movw	r0, #0
    25a0:	str	r0, [fp, #-4]
    25a4:	ldr	r0, [fp, #-4]
    25a8:	mov	sp, fp
    25ac:	pop	{fp, pc}

000025b0 <coda_ascbin_cursor_get_array_dim>:
    25b0:	push	{fp, lr}
    25b4:	mov	fp, sp
    25b8:	sub	sp, sp, #64	; 0x40
    25bc:	str	r0, [fp, #-8]
    25c0:	str	r1, [fp, #-12]
    25c4:	str	r2, [fp, #-16]
    25c8:	ldr	r0, [fp, #-8]
    25cc:	add	r1, r0, #8
    25d0:	ldr	r0, [r0, #4]
    25d4:	sub	r0, r0, #1
    25d8:	add	r0, r1, r0, lsl #4
    25dc:	ldr	r0, [r0]
    25e0:	ldr	r0, [r0]
    25e4:	cmp	r0, #100	; 0x64
    25e8:	bcs	260c <coda_ascbin_cursor_get_array_dim+0x5c>
    25ec:	ldr	r0, [fp, #-8]
    25f0:	add	r1, r0, #8
    25f4:	ldr	r0, [r0, #4]
    25f8:	sub	r0, r0, #1
    25fc:	add	r0, r1, r0, lsl #4
    2600:	ldr	r0, [r0]
    2604:	str	r0, [sp, #4]
    2608:	b	262c <coda_ascbin_cursor_get_array_dim+0x7c>
    260c:	ldr	r0, [fp, #-8]
    2610:	add	r1, r0, #8
    2614:	ldr	r0, [r0, #4]
    2618:	sub	r0, r0, #1
    261c:	add	r0, r1, r0, lsl #4
    2620:	ldr	r0, [r0]
    2624:	ldr	r0, [r0, #4]
    2628:	str	r0, [sp, #4]
    262c:	ldr	r0, [sp, #4]
    2630:	str	r0, [fp, #-20]	; 0xffffffec
    2634:	ldr	r0, [fp, #-20]	; 0xffffffec
    2638:	ldr	r0, [r0, #48]	; 0x30
    263c:	ldr	r1, [fp, #-12]
    2640:	str	r0, [r1]
    2644:	movw	r0, #0
    2648:	str	r0, [fp, #-24]	; 0xffffffe8
    264c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2650:	ldr	r1, [fp, #-20]	; 0xffffffec
    2654:	ldr	r1, [r1, #48]	; 0x30
    2658:	cmp	r0, r1
    265c:	bge	2758 <coda_ascbin_cursor_get_array_dim+0x1a8>
    2660:	ldr	r0, [fp, #-20]	; 0xffffffec
    2664:	add	r0, r0, #52	; 0x34
    2668:	ldr	r1, [fp, #-24]	; 0xffffffe8
    266c:	add	r0, r0, r1, lsl #2
    2670:	ldr	r0, [r0]
    2674:	cmn	r0, #1
    2678:	bne	2728 <coda_ascbin_cursor_get_array_dim+0x178>
    267c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2680:	add	r0, r0, #84	; 0x54
    2684:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2688:	add	r0, r0, r1, lsl #2
    268c:	ldr	r0, [r0]
    2690:	ldr	r1, [fp, #-8]
    2694:	add	r2, sp, #32
    2698:	bl	0 <coda_expression_eval_integer>
    269c:	cmp	r0, #0
    26a0:	beq	26c8 <coda_ascbin_cursor_get_array_dim+0x118>
    26a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    26a8:	movw	r0, #0
    26ac:	movt	r0, #0
    26b0:	bl	0 <coda_add_error_message>
    26b4:	ldr	r0, [fp, #-8]
    26b8:	bl	0 <coda_cursor_add_to_error_message>
    26bc:	mvn	r0, #0
    26c0:	str	r0, [fp, #-4]
    26c4:	b	2760 <coda_ascbin_cursor_get_array_dim+0x1b0>
    26c8:	ldr	r0, [sp, #36]	; 0x24
    26cc:	cmn	r0, #1
    26d0:	bgt	2710 <coda_ascbin_cursor_get_array_dim+0x160>
    26d4:	b	26d8 <coda_ascbin_cursor_get_array_dim+0x128>
    26d8:	add	r2, sp, #11
    26dc:	ldr	r0, [sp, #32]
    26e0:	ldr	r1, [sp, #36]	; 0x24
    26e4:	bl	0 <coda_str64>
    26e8:	ldr	r0, [pc, #124]	; 276c <coda_ascbin_cursor_get_array_dim+0x1bc>
    26ec:	add	r2, sp, #11
    26f0:	movw	r1, #0
    26f4:	movt	r1, #0
    26f8:	bl	0 <coda_set_error>
    26fc:	ldr	r0, [fp, #-8]
    2700:	bl	0 <coda_cursor_add_to_error_message>
    2704:	mvn	r0, #0
    2708:	str	r0, [fp, #-4]
    270c:	b	2760 <coda_ascbin_cursor_get_array_dim+0x1b0>
    2710:	ldr	r0, [sp, #32]
    2714:	ldr	r1, [fp, #-16]
    2718:	ldr	r2, [fp, #-24]	; 0xffffffe8
    271c:	add	r1, r1, r2, lsl #2
    2720:	str	r0, [r1]
    2724:	b	2744 <coda_ascbin_cursor_get_array_dim+0x194>
    2728:	ldr	r0, [fp, #-20]	; 0xffffffec
    272c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2730:	add	r0, r0, r1, lsl #2
    2734:	ldr	r0, [r0, #52]	; 0x34
    2738:	ldr	r2, [fp, #-16]
    273c:	add	r1, r2, r1, lsl #2
    2740:	str	r0, [r1]
    2744:	b	2748 <coda_ascbin_cursor_get_array_dim+0x198>
    2748:	ldr	r0, [fp, #-24]	; 0xffffffe8
    274c:	add	r0, r0, #1
    2750:	str	r0, [fp, #-24]	; 0xffffffe8
    2754:	b	264c <coda_ascbin_cursor_get_array_dim+0x9c>
    2758:	movw	r0, #0
    275c:	str	r0, [fp, #-4]
    2760:	ldr	r0, [fp, #-4]
    2764:	mov	sp, fp
    2768:	pop	{fp, pc}
    276c:	.word	0xfffffed4
