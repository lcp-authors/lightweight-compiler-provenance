
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <read_bytes>:
       0:	strd	r4, [sp, #-24]!	; 0xffffffe8
       4:	strd	r6, [sp, #8]
       8:	str	fp, [sp, #16]
       c:	str	lr, [sp, #20]
      10:	add	fp, sp, #20
      14:	sub	sp, sp, #96	; 0x60
      18:	str	r0, [fp, #-96]	; 0xffffffa0
      1c:	strd	r2, [fp, #-108]	; 0xffffff94
      20:	ldr	r3, [fp, #-96]	; 0xffffffa0
      24:	ldr	r3, [r3, #48]	; 0x30
      28:	cmp	r3, #0
      2c:	beq	110 <read_bytes+0x110>
      30:	ldrd	r0, [fp, #-108]	; 0xffffff94
      34:	ldrd	r2, [fp, #4]
      38:	adds	r6, r0, r2
      3c:	adc	r7, r1, r3
      40:	ldr	r3, [fp, #-96]	; 0xffffffa0
      44:	ldrd	r2, [r3, #40]	; 0x28
      48:	cmp	r7, r3
      4c:	cmpeq	r6, r2
      50:	bls	ec <read_bytes+0xec>
      54:	ldr	r3, [fp, #-96]	; 0xffffffa0
      58:	ldr	r3, [r3, #16]
      5c:	cmp	r3, #0
      60:	beq	74 <read_bytes+0x74>
      64:	ldr	r3, [fp, #-96]	; 0xffffffa0
      68:	ldr	r3, [r3, #16]
      6c:	cmp	r3, #1
      70:	bne	8c <read_bytes+0x8c>
      74:	movw	r1, #0
      78:	movt	r1, #0
      7c:	mvn	r0, #300	; 0x12c
      80:	bl	0 <coda_set_error>
      84:	mvn	r3, #0
      88:	b	1e8 <read_bytes+0x1e8>
      8c:	sub	r3, fp, #44	; 0x2c
      90:	mov	r2, r3
      94:	ldrd	r0, [fp, #4]
      98:	bl	0 <coda_str64>
      9c:	sub	r3, fp, #68	; 0x44
      a0:	mov	r2, r3
      a4:	ldrd	r0, [fp, #-108]	; 0xffffff94
      a8:	bl	0 <coda_str64>
      ac:	ldr	r3, [fp, #-96]	; 0xffffffa0
      b0:	ldrd	r0, [r3, #40]	; 0x28
      b4:	sub	r3, fp, #92	; 0x5c
      b8:	mov	r2, r3
      bc:	bl	0 <coda_str64>
      c0:	sub	r1, fp, #68	; 0x44
      c4:	sub	r2, fp, #44	; 0x2c
      c8:	sub	r3, fp, #92	; 0x5c
      cc:	str	r3, [sp]
      d0:	mov	r3, r1
      d4:	movw	r1, #0
      d8:	movt	r1, #0
      dc:	mvn	r0, #300	; 0x12c
      e0:	bl	0 <coda_set_error>
      e4:	mvn	r3, #0
      e8:	b	1e8 <read_bytes+0x1e8>
      ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
      f0:	ldr	r2, [r3, #48]	; 0x30
      f4:	ldr	r3, [fp, #-108]	; 0xffffff94
      f8:	add	r3, r2, r3
      fc:	ldr	r2, [fp, #4]
     100:	mov	r1, r3
     104:	ldr	r0, [fp, #12]
     108:	bl	0 <memcpy>
     10c:	b	1e4 <read_bytes+0x1e4>
     110:	ldr	r3, [fp, #-96]	; 0xffffffa0
     114:	ldr	r3, [r3, #16]
     118:	cmp	r3, #0
     11c:	beq	150 <read_bytes+0x150>
     120:	ldr	r3, [fp, #-96]	; 0xffffffa0
     124:	ldr	r3, [r3, #16]
     128:	cmp	r3, #1
     12c:	beq	150 <read_bytes+0x150>
     130:	movw	r3, #0
     134:	movt	r3, #0
     138:	mov	r2, #83	; 0x53
     13c:	movw	r1, #0
     140:	movt	r1, #0
     144:	movw	r0, #0
     148:	movt	r0, #0
     14c:	bl	0 <__assert_fail>
     150:	ldrd	r0, [fp, #-108]	; 0xffffff94
     154:	ldrd	r2, [fp, #4]
     158:	adds	r4, r0, r2
     15c:	adc	r5, r1, r3
     160:	ldr	r3, [fp, #-96]	; 0xffffffa0
     164:	ldrd	r2, [r3, #8]
     168:	cmp	r5, r3
     16c:	cmpeq	r4, r2
     170:	bls	18c <read_bytes+0x18c>
     174:	movw	r1, #0
     178:	movt	r1, #0
     17c:	mvn	r0, #300	; 0x12c
     180:	bl	0 <coda_set_error>
     184:	mvn	r3, #0
     188:	b	1e8 <read_bytes+0x1e8>
     18c:	ldr	r3, [fp, #-96]	; 0xffffffa0
     190:	ldr	r0, [r3, #56]	; 0x38
     194:	ldr	r2, [fp, #4]
     198:	ldr	r3, [fp, #-108]	; 0xffffff94
     19c:	ldr	r1, [fp, #12]
     1a0:	bl	0 <pread>
     1a4:	mov	r3, r0
     1a8:	cmp	r3, #0
     1ac:	bge	1e4 <read_bytes+0x1e4>
     1b0:	bl	0 <__errno_location>
     1b4:	mov	r3, r0
     1b8:	ldr	r3, [r3]
     1bc:	mov	r0, r3
     1c0:	bl	0 <strerror>
     1c4:	mov	r3, r0
     1c8:	mov	r2, r3
     1cc:	movw	r1, #0
     1d0:	movt	r1, #0
     1d4:	mvn	r0, #21
     1d8:	bl	0 <coda_set_error>
     1dc:	mvn	r3, #0
     1e0:	b	1e8 <read_bytes+0x1e8>
     1e4:	mov	r3, #0
     1e8:	mov	r0, r3
     1ec:	sub	sp, fp, #20
     1f0:	ldrd	r4, [sp]
     1f4:	ldrd	r6, [sp, #8]
     1f8:	ldr	fp, [sp, #16]
     1fc:	add	sp, sp, #20
     200:	pop	{pc}		; (ldr pc, [sp], #4)

00000204 <read_bytes_in_bounds>:
     204:	str	fp, [sp, #-8]!
     208:	str	lr, [sp, #4]
     20c:	add	fp, sp, #4
     210:	sub	sp, sp, #16
     214:	str	r0, [fp, #-8]
     218:	strd	r2, [fp, #-20]	; 0xffffffec
     21c:	ldr	r3, [fp, #-8]
     220:	ldr	r3, [r3, #48]	; 0x30
     224:	cmp	r3, #0
     228:	beq	250 <read_bytes_in_bounds+0x4c>
     22c:	ldr	r3, [fp, #-8]
     230:	ldr	r2, [r3, #48]	; 0x30
     234:	ldr	r3, [fp, #-20]	; 0xffffffec
     238:	add	r3, r2, r3
     23c:	ldr	r2, [fp, #4]
     240:	mov	r1, r3
     244:	ldr	r0, [fp, #12]
     248:	bl	0 <memcpy>
     24c:	b	2e8 <read_bytes_in_bounds+0xe4>
     250:	ldr	r3, [fp, #-8]
     254:	ldr	r3, [r3, #16]
     258:	cmp	r3, #0
     25c:	beq	290 <read_bytes_in_bounds+0x8c>
     260:	ldr	r3, [fp, #-8]
     264:	ldr	r3, [r3, #16]
     268:	cmp	r3, #1
     26c:	beq	290 <read_bytes_in_bounds+0x8c>
     270:	movw	r3, #0
     274:	movt	r3, #0
     278:	mov	r2, #62	; 0x3e
     27c:	movw	r1, #0
     280:	movt	r1, #0
     284:	movw	r0, #0
     288:	movt	r0, #0
     28c:	bl	0 <__assert_fail>
     290:	ldr	r3, [fp, #-8]
     294:	ldr	r0, [r3, #56]	; 0x38
     298:	ldr	r2, [fp, #4]
     29c:	ldr	r3, [fp, #-20]	; 0xffffffec
     2a0:	ldr	r1, [fp, #12]
     2a4:	bl	0 <pread>
     2a8:	mov	r3, r0
     2ac:	cmp	r3, #0
     2b0:	bge	2e8 <read_bytes_in_bounds+0xe4>
     2b4:	bl	0 <__errno_location>
     2b8:	mov	r3, r0
     2bc:	ldr	r3, [r3]
     2c0:	mov	r0, r3
     2c4:	bl	0 <strerror>
     2c8:	mov	r3, r0
     2cc:	mov	r2, r3
     2d0:	movw	r1, #0
     2d4:	movt	r1, #0
     2d8:	mvn	r0, #21
     2dc:	bl	0 <coda_set_error>
     2e0:	mvn	r3, #0
     2e4:	b	2ec <read_bytes_in_bounds+0xe8>
     2e8:	mov	r3, #0
     2ec:	mov	r0, r3
     2f0:	sub	sp, fp, #4
     2f4:	ldr	fp, [sp]
     2f8:	add	sp, sp, #4
     2fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000300 <read_array>:
     300:	str	fp, [sp, #-8]!
     304:	str	lr, [sp, #4]
     308:	add	fp, sp, #4
     30c:	sub	sp, sp, #632	; 0x278
     310:	str	r0, [fp, #-624]	; 0xfffffd90
     314:	str	r1, [fp, #-628]	; 0xfffffd8c
     318:	str	r2, [fp, #-632]	; 0xfffffd88
     31c:	str	r3, [fp, #-636]	; 0xfffffd84
     320:	sub	r2, fp, #580	; 0x244
     324:	sub	r3, fp, #584	; 0x248
     328:	mov	r1, r3
     32c:	ldr	r0, [fp, #-624]	; 0xfffffd90
     330:	bl	0 <coda_cursor_get_array_dim>
     334:	mov	r3, r0
     338:	cmp	r3, #0
     33c:	beq	348 <read_array+0x48>
     340:	mvn	r3, #0
     344:	b	6f4 <read_array+0x3f4>
     348:	ldr	r2, [fp, #-624]	; 0xfffffd90
     34c:	sub	r3, fp, #548	; 0x224
     350:	mov	r1, r2
     354:	mov	r2, #520	; 0x208
     358:	mov	r0, r3
     35c:	bl	0 <memcpy>
     360:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     364:	cmp	r3, #1
     368:	ble	378 <read_array+0x78>
     36c:	ldr	r3, [fp, #4]
     370:	cmp	r3, #1
     374:	beq	494 <read_array+0x194>
     378:	mov	r3, #1
     37c:	str	r3, [fp, #-8]
     380:	mov	r3, #0
     384:	str	r3, [fp, #-12]
     388:	b	3b8 <read_array+0xb8>
     38c:	ldr	r3, [fp, #-12]
     390:	lsl	r3, r3, #2
     394:	sub	r2, fp, #4
     398:	add	r3, r2, r3
     39c:	ldr	r2, [r3, #-576]	; 0xfffffdc0
     3a0:	ldr	r3, [fp, #-8]
     3a4:	mul	r3, r2, r3
     3a8:	str	r3, [fp, #-8]
     3ac:	ldr	r3, [fp, #-12]
     3b0:	add	r3, r3, #1
     3b4:	str	r3, [fp, #-12]
     3b8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     3bc:	ldr	r2, [fp, #-12]
     3c0:	cmp	r2, r3
     3c4:	blt	38c <read_array+0x8c>
     3c8:	ldr	r3, [fp, #-8]
     3cc:	cmp	r3, #0
     3d0:	ble	6f0 <read_array+0x3f0>
     3d4:	sub	r3, fp, #548	; 0x224
     3d8:	mov	r1, #0
     3dc:	mov	r0, r3
     3e0:	bl	0 <coda_cursor_goto_array_element_by_index>
     3e4:	mov	r3, r0
     3e8:	cmp	r3, #0
     3ec:	beq	3f8 <read_array+0xf8>
     3f0:	mvn	r3, #0
     3f4:	b	6f4 <read_array+0x3f4>
     3f8:	mov	r3, #0
     3fc:	str	r3, [fp, #-12]
     400:	b	480 <read_array+0x180>
     404:	ldr	r3, [fp, #-12]
     408:	ldr	r2, [fp, #-636]	; 0xfffffd84
     40c:	mul	r3, r2, r3
     410:	mov	r2, r3
     414:	ldr	r3, [fp, #-632]	; 0xfffffd88
     418:	add	r1, r3, r2
     41c:	sub	r2, fp, #548	; 0x224
     420:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     424:	mov	r0, r2
     428:	blx	r3
     42c:	mov	r3, r0
     430:	cmp	r3, #0
     434:	beq	440 <read_array+0x140>
     438:	mvn	r3, #0
     43c:	b	6f4 <read_array+0x3f4>
     440:	ldr	r3, [fp, #-8]
     444:	sub	r3, r3, #1
     448:	ldr	r2, [fp, #-12]
     44c:	cmp	r2, r3
     450:	bge	474 <read_array+0x174>
     454:	sub	r3, fp, #548	; 0x224
     458:	mov	r0, r3
     45c:	bl	0 <coda_cursor_goto_next_array_element>
     460:	mov	r3, r0
     464:	cmp	r3, #0
     468:	beq	474 <read_array+0x174>
     46c:	mvn	r3, #0
     470:	b	6f4 <read_array+0x3f4>
     474:	ldr	r3, [fp, #-12]
     478:	add	r3, r3, #1
     47c:	str	r3, [fp, #-12]
     480:	ldr	r2, [fp, #-12]
     484:	ldr	r3, [fp, #-8]
     488:	cmp	r2, r3
     48c:	blt	404 <read_array+0x104>
     490:	b	6f0 <read_array+0x3f0>
     494:	mov	r3, #1
     498:	str	r3, [fp, #-620]	; 0xfffffd94
     49c:	mov	r3, #0
     4a0:	str	r3, [fp, #-12]
     4a4:	b	4f8 <read_array+0x1f8>
     4a8:	ldr	r3, [fp, #-12]
     4ac:	lsl	r3, r3, #2
     4b0:	sub	r2, fp, #4
     4b4:	add	r3, r2, r3
     4b8:	ldr	r2, [r3, #-616]	; 0xfffffd98
     4bc:	ldr	r3, [fp, #-12]
     4c0:	lsl	r3, r3, #2
     4c4:	sub	r1, fp, #4
     4c8:	add	r3, r1, r3
     4cc:	ldr	r1, [r3, #-576]	; 0xfffffdc0
     4d0:	ldr	r3, [fp, #-12]
     4d4:	add	r3, r3, #1
     4d8:	mul	r2, r1, r2
     4dc:	lsl	r3, r3, #2
     4e0:	sub	r1, fp, #4
     4e4:	add	r3, r1, r3
     4e8:	str	r2, [r3, #-616]	; 0xfffffd98
     4ec:	ldr	r3, [fp, #-12]
     4f0:	add	r3, r3, #1
     4f4:	str	r3, [fp, #-12]
     4f8:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     4fc:	ldr	r2, [fp, #-12]
     500:	cmp	r2, r3
     504:	blt	4a8 <read_array+0x1a8>
     508:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     50c:	sub	r3, r3, #1
     510:	lsl	r3, r3, #2
     514:	sub	r2, fp, #4
     518:	add	r3, r2, r3
     51c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     520:	str	r3, [fp, #-24]	; 0xffffffe8
     524:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     528:	lsl	r3, r3, #2
     52c:	sub	r2, fp, #4
     530:	add	r3, r2, r3
     534:	ldr	r3, [r3, #-616]	; 0xfffffd98
     538:	str	r3, [fp, #-8]
     53c:	ldr	r3, [fp, #-8]
     540:	cmp	r3, #0
     544:	ble	6f0 <read_array+0x3f0>
     548:	mov	r3, #0
     54c:	str	r3, [fp, #-16]
     550:	mov	r3, #0
     554:	str	r3, [fp, #-20]	; 0xffffffec
     558:	sub	r3, fp, #548	; 0x224
     55c:	mov	r1, #0
     560:	mov	r0, r3
     564:	bl	0 <coda_cursor_goto_array_element_by_index>
     568:	mov	r3, r0
     56c:	cmp	r3, #0
     570:	beq	57c <read_array+0x27c>
     574:	mvn	r3, #0
     578:	b	6f4 <read_array+0x3f4>
     57c:	ldr	r3, [fp, #-20]	; 0xffffffec
     580:	ldr	r2, [fp, #-636]	; 0xfffffd84
     584:	mul	r3, r2, r3
     588:	mov	r2, r3
     58c:	ldr	r3, [fp, #-632]	; 0xfffffd88
     590:	add	r1, r3, r2
     594:	sub	r2, fp, #548	; 0x224
     598:	ldr	r3, [fp, #-628]	; 0xfffffd8c
     59c:	mov	r0, r2
     5a0:	blx	r3
     5a4:	mov	r3, r0
     5a8:	cmp	r3, #0
     5ac:	beq	5b8 <read_array+0x2b8>
     5b0:	mvn	r3, #0
     5b4:	b	6f4 <read_array+0x3f4>
     5b8:	ldr	r3, [fp, #-16]
     5bc:	add	r3, r3, #1
     5c0:	str	r3, [fp, #-16]
     5c4:	ldr	r2, [fp, #-16]
     5c8:	ldr	r3, [fp, #-8]
     5cc:	cmp	r2, r3
     5d0:	bge	5f4 <read_array+0x2f4>
     5d4:	sub	r3, fp, #548	; 0x224
     5d8:	mov	r0, r3
     5dc:	bl	0 <coda_cursor_goto_next_array_element>
     5e0:	mov	r3, r0
     5e4:	cmp	r3, #0
     5e8:	beq	5f4 <read_array+0x2f4>
     5ec:	mvn	r3, #0
     5f0:	b	6f4 <read_array+0x3f4>
     5f4:	ldr	r2, [fp, #-20]	; 0xffffffec
     5f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5fc:	add	r3, r2, r3
     600:	str	r3, [fp, #-20]	; 0xffffffec
     604:	ldr	r2, [fp, #-20]	; 0xffffffec
     608:	ldr	r3, [fp, #-8]
     60c:	cmp	r2, r3
     610:	blt	57c <read_array+0x27c>
     614:	ldr	r2, [fp, #-16]
     618:	ldr	r3, [fp, #-8]
     61c:	cmp	r2, r3
     620:	beq	6ec <read_array+0x3ec>
     624:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     628:	sub	r3, r3, #2
     62c:	lsl	r3, r3, #2
     630:	sub	r2, fp, #4
     634:	add	r3, r2, r3
     638:	ldr	r2, [r3, #-616]	; 0xfffffd98
     63c:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     640:	lsl	r3, r3, #2
     644:	sub	r1, fp, #4
     648:	add	r3, r1, r3
     64c:	ldr	r3, [r3, #-616]	; 0xfffffd98
     650:	sub	r3, r2, r3
     654:	ldr	r2, [fp, #-20]	; 0xffffffec
     658:	add	r3, r2, r3
     65c:	str	r3, [fp, #-20]	; 0xffffffec
     660:	ldr	r3, [fp, #-584]	; 0xfffffdb8
     664:	sub	r3, r3, #3
     668:	str	r3, [fp, #-12]
     66c:	b	6b8 <read_array+0x3b8>
     670:	ldr	r3, [fp, #-12]
     674:	lsl	r3, r3, #2
     678:	sub	r2, fp, #4
     67c:	add	r3, r2, r3
     680:	ldr	r2, [r3, #-616]	; 0xfffffd98
     684:	ldr	r3, [fp, #-12]
     688:	add	r3, r3, #2
     68c:	lsl	r3, r3, #2
     690:	sub	r1, fp, #4
     694:	add	r3, r1, r3
     698:	ldr	r3, [r3, #-616]	; 0xfffffd98
     69c:	sub	r3, r2, r3
     6a0:	ldr	r2, [fp, #-20]	; 0xffffffec
     6a4:	add	r3, r2, r3
     6a8:	str	r3, [fp, #-20]	; 0xffffffec
     6ac:	ldr	r3, [fp, #-12]
     6b0:	sub	r3, r3, #1
     6b4:	str	r3, [fp, #-12]
     6b8:	ldr	r3, [fp, #-12]
     6bc:	cmp	r3, #0
     6c0:	blt	57c <read_array+0x27c>
     6c4:	ldr	r3, [fp, #-12]
     6c8:	add	r3, r3, #2
     6cc:	lsl	r3, r3, #2
     6d0:	sub	r2, fp, #4
     6d4:	add	r3, r2, r3
     6d8:	ldr	r3, [r3, #-616]	; 0xfffffd98
     6dc:	ldr	r2, [fp, #-20]	; 0xffffffec
     6e0:	cmp	r2, r3
     6e4:	bge	670 <read_array+0x370>
     6e8:	b	57c <read_array+0x27c>
     6ec:	nop	{0}
     6f0:	mov	r3, #0
     6f4:	mov	r0, r3
     6f8:	sub	sp, fp, #4
     6fc:	ldr	fp, [sp]
     700:	add	sp, sp, #4
     704:	pop	{pc}		; (ldr pc, [sp], #4)

00000708 <read_partial_array>:
     708:	str	fp, [sp, #-8]!
     70c:	str	lr, [sp, #4]
     710:	add	fp, sp, #4
     714:	sub	sp, sp, #544	; 0x220
     718:	str	r0, [fp, #-536]	; 0xfffffde8
     71c:	str	r1, [fp, #-540]	; 0xfffffde4
     720:	str	r2, [fp, #-544]	; 0xfffffde0
     724:	str	r3, [fp, #-548]	; 0xfffffddc
     728:	ldr	r2, [fp, #-536]	; 0xfffffde8
     72c:	sub	r3, fp, #532	; 0x214
     730:	mov	r1, r2
     734:	mov	r2, #520	; 0x208
     738:	mov	r0, r3
     73c:	bl	0 <memcpy>
     740:	ldr	r3, [fp, #-548]	; 0xfffffddc
     744:	cmp	r3, #0
     748:	ble	808 <read_partial_array+0x100>
     74c:	sub	r3, fp, #532	; 0x214
     750:	ldr	r1, [fp, #-544]	; 0xfffffde0
     754:	mov	r0, r3
     758:	bl	0 <coda_cursor_goto_array_element_by_index>
     75c:	mov	r3, r0
     760:	cmp	r3, #0
     764:	beq	770 <read_partial_array+0x68>
     768:	mvn	r3, #0
     76c:	b	80c <read_partial_array+0x104>
     770:	mov	r3, #0
     774:	str	r3, [fp, #-8]
     778:	b	7f8 <read_partial_array+0xf0>
     77c:	ldr	r3, [fp, #-8]
     780:	ldr	r2, [fp, #8]
     784:	mul	r3, r2, r3
     788:	mov	r2, r3
     78c:	ldr	r3, [fp, #4]
     790:	add	r1, r3, r2
     794:	sub	r2, fp, #532	; 0x214
     798:	ldr	r3, [fp, #-540]	; 0xfffffde4
     79c:	mov	r0, r2
     7a0:	blx	r3
     7a4:	mov	r3, r0
     7a8:	cmp	r3, #0
     7ac:	beq	7b8 <read_partial_array+0xb0>
     7b0:	mvn	r3, #0
     7b4:	b	80c <read_partial_array+0x104>
     7b8:	ldr	r3, [fp, #-548]	; 0xfffffddc
     7bc:	sub	r3, r3, #1
     7c0:	ldr	r2, [fp, #-8]
     7c4:	cmp	r2, r3
     7c8:	bge	7ec <read_partial_array+0xe4>
     7cc:	sub	r3, fp, #532	; 0x214
     7d0:	mov	r0, r3
     7d4:	bl	0 <coda_cursor_goto_next_array_element>
     7d8:	mov	r3, r0
     7dc:	cmp	r3, #0
     7e0:	beq	7ec <read_partial_array+0xe4>
     7e4:	mvn	r3, #0
     7e8:	b	80c <read_partial_array+0x104>
     7ec:	ldr	r3, [fp, #-8]
     7f0:	add	r3, r3, #1
     7f4:	str	r3, [fp, #-8]
     7f8:	ldr	r2, [fp, #-8]
     7fc:	ldr	r3, [fp, #-548]	; 0xfffffddc
     800:	cmp	r2, r3
     804:	blt	77c <read_partial_array+0x74>
     808:	mov	r3, #0
     80c:	mov	r0, r3
     810:	sub	sp, fp, #4
     814:	ldr	fp, [sp]
     818:	add	sp, sp, #4
     81c:	pop	{pc}		; (ldr pc, [sp], #4)

00000820 <transpose_array>:
     820:	str	fp, [sp, #-8]!
     824:	str	lr, [sp, #4]
     828:	add	fp, sp, #4
     82c:	sub	sp, sp, #208	; 0xd0
     830:	str	r0, [fp, #-192]	; 0xffffff40
     834:	str	r1, [fp, #-196]	; 0xffffff3c
     838:	str	r2, [fp, #-200]	; 0xffffff38
     83c:	mov	r3, #0
     840:	str	r3, [fp, #-12]
     844:	sub	r2, fp, #72	; 0x48
     848:	sub	r3, fp, #76	; 0x4c
     84c:	mov	r1, r3
     850:	ldr	r0, [fp, #-192]	; 0xffffff40
     854:	bl	0 <coda_cursor_get_array_dim>
     858:	mov	r3, r0
     85c:	cmp	r3, #0
     860:	beq	86c <transpose_array+0x4c>
     864:	mvn	r3, #0
     868:	b	10f0 <transpose_array+0x8d0>
     86c:	ldr	r3, [fp, #-76]	; 0xffffffb4
     870:	cmp	r3, #1
     874:	bgt	880 <transpose_array+0x60>
     878:	mov	r3, #0
     87c:	b	10f0 <transpose_array+0x8d0>
     880:	ldr	r3, [fp, #-196]	; 0xffffff3c
     884:	str	r3, [fp, #-36]	; 0xffffffdc
     888:	mov	r3, #1
     88c:	str	r3, [fp, #-8]
     890:	mov	r3, #0
     894:	str	r3, [fp, #-16]
     898:	b	914 <transpose_array+0xf4>
     89c:	ldr	r3, [fp, #-16]
     8a0:	lsl	r3, r3, #2
     8a4:	sub	r2, fp, #4
     8a8:	add	r3, r2, r3
     8ac:	ldr	r2, [r3, #-68]	; 0xffffffbc
     8b0:	ldr	r3, [fp, #-8]
     8b4:	mul	r3, r2, r3
     8b8:	str	r3, [fp, #-8]
     8bc:	ldr	r3, [fp, #-16]
     8c0:	lsl	r3, r3, #2
     8c4:	sub	r2, fp, #4
     8c8:	add	r3, r2, r3
     8cc:	mov	r2, #0
     8d0:	str	r2, [r3, #-144]	; 0xffffff70
     8d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
     8d8:	sub	r2, r3, #1
     8dc:	ldr	r3, [fp, #-16]
     8e0:	sub	r3, r2, r3
     8e4:	lsl	r3, r3, #2
     8e8:	sub	r2, fp, #4
     8ec:	add	r3, r2, r3
     8f0:	ldr	r2, [r3, #-68]	; 0xffffffbc
     8f4:	ldr	r3, [fp, #-16]
     8f8:	lsl	r3, r3, #2
     8fc:	sub	r1, fp, #4
     900:	add	r3, r1, r3
     904:	str	r2, [r3, #-180]	; 0xffffff4c
     908:	ldr	r3, [fp, #-16]
     90c:	add	r3, r3, #1
     910:	str	r3, [fp, #-16]
     914:	ldr	r3, [fp, #-76]	; 0xffffffb4
     918:	ldr	r2, [fp, #-16]
     91c:	cmp	r2, r3
     920:	blt	89c <transpose_array+0x7c>
     924:	ldr	r3, [fp, #-8]
     928:	cmp	r3, #1
     92c:	bgt	938 <transpose_array+0x118>
     930:	mov	r3, #0
     934:	b	10f0 <transpose_array+0x8d0>
     938:	ldr	r3, [fp, #-76]	; 0xffffffb4
     93c:	lsl	r3, r3, #2
     940:	sub	r2, fp, #4
     944:	add	r3, r2, r3
     948:	mov	r2, #1
     94c:	str	r2, [r3, #-108]	; 0xffffff94
     950:	ldr	r3, [fp, #-76]	; 0xffffffb4
     954:	lsl	r3, r3, #2
     958:	sub	r2, fp, #4
     95c:	add	r3, r2, r3
     960:	mov	r2, #1
     964:	str	r2, [r3, #-180]	; 0xffffff4c
     968:	ldr	r3, [fp, #-76]	; 0xffffffb4
     96c:	str	r3, [fp, #-16]
     970:	b	9c4 <transpose_array+0x1a4>
     974:	ldr	r3, [fp, #-16]
     978:	lsl	r3, r3, #2
     97c:	sub	r2, fp, #4
     980:	add	r3, r2, r3
     984:	ldr	r2, [r3, #-108]	; 0xffffff94
     988:	ldr	r3, [fp, #-16]
     98c:	lsl	r3, r3, #2
     990:	sub	r1, fp, #4
     994:	add	r3, r1, r3
     998:	ldr	r1, [r3, #-180]	; 0xffffff4c
     99c:	ldr	r3, [fp, #-16]
     9a0:	sub	r3, r3, #1
     9a4:	mul	r2, r1, r2
     9a8:	lsl	r3, r3, #2
     9ac:	sub	r1, fp, #4
     9b0:	add	r3, r1, r3
     9b4:	str	r2, [r3, #-108]	; 0xffffff94
     9b8:	ldr	r3, [fp, #-16]
     9bc:	sub	r3, r3, #1
     9c0:	str	r3, [fp, #-16]
     9c4:	ldr	r3, [fp, #-16]
     9c8:	cmp	r3, #0
     9cc:	bgt	974 <transpose_array+0x154>
     9d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
     9d4:	lsl	r3, r3, #2
     9d8:	sub	r2, fp, #4
     9dc:	add	r3, r2, r3
     9e0:	mov	r2, #0
     9e4:	str	r2, [r3, #-180]	; 0xffffff4c
     9e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
     9ec:	lsl	r3, r3, #2
     9f0:	sub	r2, fp, #4
     9f4:	add	r3, r2, r3
     9f8:	mov	r2, #0
     9fc:	str	r2, [r3, #-144]	; 0xffffff70
     a00:	ldr	r3, [fp, #-8]
     a04:	ldr	r2, [fp, #-200]	; 0xffffff38
     a08:	mul	r3, r2, r3
     a0c:	mov	r0, r3
     a10:	bl	0 <malloc>
     a14:	mov	r3, r0
     a18:	str	r3, [fp, #-40]	; 0xffffffd8
     a1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     a20:	cmp	r3, #0
     a24:	bne	a5c <transpose_array+0x23c>
     a28:	ldr	r3, [fp, #-8]
     a2c:	ldr	r2, [fp, #-200]	; 0xffffff38
     a30:	mul	r2, r2, r3
     a34:	mov	r3, #93	; 0x5d
     a38:	str	r3, [sp]
     a3c:	movw	r3, #0
     a40:	movt	r3, #0
     a44:	movw	r1, #0
     a48:	movt	r1, #0
     a4c:	mvn	r0, #0
     a50:	bl	0 <coda_set_error>
     a54:	mvn	r3, #0
     a58:	b	10f0 <transpose_array+0x8d0>
     a5c:	ldr	r3, [fp, #-200]	; 0xffffff38
     a60:	sub	r3, r3, #1
     a64:	cmp	r3, #7
     a68:	ldrls	pc, [pc, r3, lsl #2]
     a6c:	b	10a8 <transpose_array+0x888>
     a70:	.word	0x00000a90
     a74:	.word	0x00000c10
     a78:	.word	0x000010a8
     a7c:	.word	0x00000d98
     a80:	.word	0x000010a8
     a84:	.word	0x000010a8
     a88:	.word	0x000010a8
     a8c:	.word	0x00000f20
     a90:	mov	r3, #0
     a94:	str	r3, [fp, #-16]
     a98:	b	bfc <transpose_array+0x3dc>
     a9c:	mov	r3, #0
     aa0:	str	r3, [fp, #-20]	; 0xffffffec
     aa4:	ldr	r3, [fp, #-16]
     aa8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     aac:	add	r2, r2, r3
     ab0:	ldr	r3, [fp, #-12]
     ab4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     ab8:	add	r3, r1, r3
     abc:	ldrb	r2, [r2]
     ac0:	strb	r2, [r3]
     ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ac8:	lsl	r3, r3, #2
     acc:	sub	r2, fp, #4
     ad0:	add	r3, r2, r3
     ad4:	ldr	r3, [r3, #-108]	; 0xffffff94
     ad8:	ldr	r2, [fp, #-12]
     adc:	add	r3, r2, r3
     ae0:	str	r3, [fp, #-12]
     ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ae8:	lsl	r3, r3, #2
     aec:	sub	r2, fp, #4
     af0:	add	r3, r2, r3
     af4:	ldr	r3, [r3, #-144]	; 0xffffff70
     af8:	add	r2, r3, #1
     afc:	ldr	r3, [fp, #-20]	; 0xffffffec
     b00:	lsl	r3, r3, #2
     b04:	sub	r1, fp, #4
     b08:	add	r3, r1, r3
     b0c:	str	r2, [r3, #-144]	; 0xffffff70
     b10:	b	bbc <transpose_array+0x39c>
     b14:	ldr	r3, [fp, #-20]	; 0xffffffec
     b18:	lsl	r3, r3, #2
     b1c:	sub	r2, fp, #4
     b20:	add	r3, r2, r3
     b24:	mov	r2, #0
     b28:	str	r2, [r3, #-144]	; 0xffffff70
     b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
     b30:	lsl	r3, r3, #2
     b34:	sub	r2, fp, #4
     b38:	add	r3, r2, r3
     b3c:	ldr	r2, [r3, #-108]	; 0xffffff94
     b40:	ldr	r3, [fp, #-20]	; 0xffffffec
     b44:	lsl	r3, r3, #2
     b48:	sub	r1, fp, #4
     b4c:	add	r3, r1, r3
     b50:	ldr	r3, [r3, #-180]	; 0xffffff4c
     b54:	mul	r3, r3, r2
     b58:	ldr	r2, [fp, #-12]
     b5c:	sub	r3, r2, r3
     b60:	str	r3, [fp, #-12]
     b64:	ldr	r3, [fp, #-20]	; 0xffffffec
     b68:	add	r3, r3, #1
     b6c:	str	r3, [fp, #-20]	; 0xffffffec
     b70:	ldr	r3, [fp, #-20]	; 0xffffffec
     b74:	lsl	r3, r3, #2
     b78:	sub	r2, fp, #4
     b7c:	add	r3, r2, r3
     b80:	ldr	r3, [r3, #-108]	; 0xffffff94
     b84:	ldr	r2, [fp, #-12]
     b88:	add	r3, r2, r3
     b8c:	str	r3, [fp, #-12]
     b90:	ldr	r3, [fp, #-20]	; 0xffffffec
     b94:	lsl	r3, r3, #2
     b98:	sub	r2, fp, #4
     b9c:	add	r3, r2, r3
     ba0:	ldr	r3, [r3, #-144]	; 0xffffff70
     ba4:	add	r2, r3, #1
     ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
     bac:	lsl	r3, r3, #2
     bb0:	sub	r1, fp, #4
     bb4:	add	r3, r1, r3
     bb8:	str	r2, [r3, #-144]	; 0xffffff70
     bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
     bc0:	lsl	r3, r3, #2
     bc4:	sub	r2, fp, #4
     bc8:	add	r3, r2, r3
     bcc:	ldr	r2, [r3, #-144]	; 0xffffff70
     bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
     bd4:	lsl	r3, r3, #2
     bd8:	sub	r1, fp, #4
     bdc:	add	r3, r1, r3
     be0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     be4:	cmp	r2, r3
     be8:	beq	b14 <transpose_array+0x2f4>
     bec:	nop	{0}
     bf0:	ldr	r3, [fp, #-16]
     bf4:	add	r3, r3, #1
     bf8:	str	r3, [fp, #-16]
     bfc:	ldr	r2, [fp, #-16]
     c00:	ldr	r3, [fp, #-8]
     c04:	cmp	r2, r3
     c08:	blt	a9c <transpose_array+0x27c>
     c0c:	b	10c8 <transpose_array+0x8a8>
     c10:	mov	r3, #0
     c14:	str	r3, [fp, #-16]
     c18:	b	d84 <transpose_array+0x564>
     c1c:	mov	r3, #0
     c20:	str	r3, [fp, #-24]	; 0xffffffe8
     c24:	ldr	r3, [fp, #-16]
     c28:	lsl	r3, r3, #1
     c2c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c30:	add	r2, r2, r3
     c34:	ldr	r3, [fp, #-12]
     c38:	lsl	r3, r3, #1
     c3c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     c40:	add	r3, r1, r3
     c44:	ldrh	r2, [r2]
     c48:	strh	r2, [r3]
     c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c50:	lsl	r3, r3, #2
     c54:	sub	r2, fp, #4
     c58:	add	r3, r2, r3
     c5c:	ldr	r3, [r3, #-108]	; 0xffffff94
     c60:	ldr	r2, [fp, #-12]
     c64:	add	r3, r2, r3
     c68:	str	r3, [fp, #-12]
     c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c70:	lsl	r3, r3, #2
     c74:	sub	r2, fp, #4
     c78:	add	r3, r2, r3
     c7c:	ldr	r3, [r3, #-144]	; 0xffffff70
     c80:	add	r2, r3, #1
     c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c88:	lsl	r3, r3, #2
     c8c:	sub	r1, fp, #4
     c90:	add	r3, r1, r3
     c94:	str	r2, [r3, #-144]	; 0xffffff70
     c98:	b	d44 <transpose_array+0x524>
     c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca0:	lsl	r3, r3, #2
     ca4:	sub	r2, fp, #4
     ca8:	add	r3, r2, r3
     cac:	mov	r2, #0
     cb0:	str	r2, [r3, #-144]	; 0xffffff70
     cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb8:	lsl	r3, r3, #2
     cbc:	sub	r2, fp, #4
     cc0:	add	r3, r2, r3
     cc4:	ldr	r2, [r3, #-108]	; 0xffffff94
     cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ccc:	lsl	r3, r3, #2
     cd0:	sub	r1, fp, #4
     cd4:	add	r3, r1, r3
     cd8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     cdc:	mul	r3, r3, r2
     ce0:	ldr	r2, [fp, #-12]
     ce4:	sub	r3, r2, r3
     ce8:	str	r3, [fp, #-12]
     cec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cf0:	add	r3, r3, #1
     cf4:	str	r3, [fp, #-24]	; 0xffffffe8
     cf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cfc:	lsl	r3, r3, #2
     d00:	sub	r2, fp, #4
     d04:	add	r3, r2, r3
     d08:	ldr	r3, [r3, #-108]	; 0xffffff94
     d0c:	ldr	r2, [fp, #-12]
     d10:	add	r3, r2, r3
     d14:	str	r3, [fp, #-12]
     d18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d1c:	lsl	r3, r3, #2
     d20:	sub	r2, fp, #4
     d24:	add	r3, r2, r3
     d28:	ldr	r3, [r3, #-144]	; 0xffffff70
     d2c:	add	r2, r3, #1
     d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d34:	lsl	r3, r3, #2
     d38:	sub	r1, fp, #4
     d3c:	add	r3, r1, r3
     d40:	str	r2, [r3, #-144]	; 0xffffff70
     d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d48:	lsl	r3, r3, #2
     d4c:	sub	r2, fp, #4
     d50:	add	r3, r2, r3
     d54:	ldr	r2, [r3, #-144]	; 0xffffff70
     d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d5c:	lsl	r3, r3, #2
     d60:	sub	r1, fp, #4
     d64:	add	r3, r1, r3
     d68:	ldr	r3, [r3, #-180]	; 0xffffff4c
     d6c:	cmp	r2, r3
     d70:	beq	c9c <transpose_array+0x47c>
     d74:	nop	{0}
     d78:	ldr	r3, [fp, #-16]
     d7c:	add	r3, r3, #1
     d80:	str	r3, [fp, #-16]
     d84:	ldr	r2, [fp, #-16]
     d88:	ldr	r3, [fp, #-8]
     d8c:	cmp	r2, r3
     d90:	blt	c1c <transpose_array+0x3fc>
     d94:	b	10c8 <transpose_array+0x8a8>
     d98:	mov	r3, #0
     d9c:	str	r3, [fp, #-16]
     da0:	b	f0c <transpose_array+0x6ec>
     da4:	mov	r3, #0
     da8:	str	r3, [fp, #-28]	; 0xffffffe4
     dac:	ldr	r3, [fp, #-16]
     db0:	lsl	r3, r3, #2
     db4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     db8:	add	r2, r2, r3
     dbc:	ldr	r3, [fp, #-12]
     dc0:	lsl	r3, r3, #2
     dc4:	ldr	r1, [fp, #-40]	; 0xffffffd8
     dc8:	add	r3, r1, r3
     dcc:	ldr	r2, [r2]
     dd0:	str	r2, [r3]
     dd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dd8:	lsl	r3, r3, #2
     ddc:	sub	r2, fp, #4
     de0:	add	r3, r2, r3
     de4:	ldr	r3, [r3, #-108]	; 0xffffff94
     de8:	ldr	r2, [fp, #-12]
     dec:	add	r3, r2, r3
     df0:	str	r3, [fp, #-12]
     df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     df8:	lsl	r3, r3, #2
     dfc:	sub	r2, fp, #4
     e00:	add	r3, r2, r3
     e04:	ldr	r3, [r3, #-144]	; 0xffffff70
     e08:	add	r2, r3, #1
     e0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e10:	lsl	r3, r3, #2
     e14:	sub	r1, fp, #4
     e18:	add	r3, r1, r3
     e1c:	str	r2, [r3, #-144]	; 0xffffff70
     e20:	b	ecc <transpose_array+0x6ac>
     e24:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e28:	lsl	r3, r3, #2
     e2c:	sub	r2, fp, #4
     e30:	add	r3, r2, r3
     e34:	mov	r2, #0
     e38:	str	r2, [r3, #-144]	; 0xffffff70
     e3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e40:	lsl	r3, r3, #2
     e44:	sub	r2, fp, #4
     e48:	add	r3, r2, r3
     e4c:	ldr	r2, [r3, #-108]	; 0xffffff94
     e50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e54:	lsl	r3, r3, #2
     e58:	sub	r1, fp, #4
     e5c:	add	r3, r1, r3
     e60:	ldr	r3, [r3, #-180]	; 0xffffff4c
     e64:	mul	r3, r3, r2
     e68:	ldr	r2, [fp, #-12]
     e6c:	sub	r3, r2, r3
     e70:	str	r3, [fp, #-12]
     e74:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e78:	add	r3, r3, #1
     e7c:	str	r3, [fp, #-28]	; 0xffffffe4
     e80:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e84:	lsl	r3, r3, #2
     e88:	sub	r2, fp, #4
     e8c:	add	r3, r2, r3
     e90:	ldr	r3, [r3, #-108]	; 0xffffff94
     e94:	ldr	r2, [fp, #-12]
     e98:	add	r3, r2, r3
     e9c:	str	r3, [fp, #-12]
     ea0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ea4:	lsl	r3, r3, #2
     ea8:	sub	r2, fp, #4
     eac:	add	r3, r2, r3
     eb0:	ldr	r3, [r3, #-144]	; 0xffffff70
     eb4:	add	r2, r3, #1
     eb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ebc:	lsl	r3, r3, #2
     ec0:	sub	r1, fp, #4
     ec4:	add	r3, r1, r3
     ec8:	str	r2, [r3, #-144]	; 0xffffff70
     ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ed0:	lsl	r3, r3, #2
     ed4:	sub	r2, fp, #4
     ed8:	add	r3, r2, r3
     edc:	ldr	r2, [r3, #-144]	; 0xffffff70
     ee0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ee4:	lsl	r3, r3, #2
     ee8:	sub	r1, fp, #4
     eec:	add	r3, r1, r3
     ef0:	ldr	r3, [r3, #-180]	; 0xffffff4c
     ef4:	cmp	r2, r3
     ef8:	beq	e24 <transpose_array+0x604>
     efc:	nop	{0}
     f00:	ldr	r3, [fp, #-16]
     f04:	add	r3, r3, #1
     f08:	str	r3, [fp, #-16]
     f0c:	ldr	r2, [fp, #-16]
     f10:	ldr	r3, [fp, #-8]
     f14:	cmp	r2, r3
     f18:	blt	da4 <transpose_array+0x584>
     f1c:	b	10c8 <transpose_array+0x8a8>
     f20:	mov	r3, #0
     f24:	str	r3, [fp, #-16]
     f28:	b	1094 <transpose_array+0x874>
     f2c:	mov	r3, #0
     f30:	str	r3, [fp, #-32]	; 0xffffffe0
     f34:	ldr	r3, [fp, #-16]
     f38:	lsl	r3, r3, #3
     f3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     f40:	add	r3, r2, r3
     f44:	ldr	r2, [fp, #-12]
     f48:	lsl	r2, r2, #3
     f4c:	ldr	r1, [fp, #-40]	; 0xffffffd8
     f50:	add	r1, r1, r2
     f54:	ldrd	r2, [r3]
     f58:	strd	r2, [r1]
     f5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f60:	lsl	r3, r3, #2
     f64:	sub	r2, fp, #4
     f68:	add	r3, r2, r3
     f6c:	ldr	r3, [r3, #-108]	; 0xffffff94
     f70:	ldr	r2, [fp, #-12]
     f74:	add	r3, r2, r3
     f78:	str	r3, [fp, #-12]
     f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f80:	lsl	r3, r3, #2
     f84:	sub	r2, fp, #4
     f88:	add	r3, r2, r3
     f8c:	ldr	r3, [r3, #-144]	; 0xffffff70
     f90:	add	r2, r3, #1
     f94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f98:	lsl	r3, r3, #2
     f9c:	sub	r1, fp, #4
     fa0:	add	r3, r1, r3
     fa4:	str	r2, [r3, #-144]	; 0xffffff70
     fa8:	b	1054 <transpose_array+0x834>
     fac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fb0:	lsl	r3, r3, #2
     fb4:	sub	r2, fp, #4
     fb8:	add	r3, r2, r3
     fbc:	mov	r2, #0
     fc0:	str	r2, [r3, #-144]	; 0xffffff70
     fc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fc8:	lsl	r3, r3, #2
     fcc:	sub	r2, fp, #4
     fd0:	add	r3, r2, r3
     fd4:	ldr	r2, [r3, #-108]	; 0xffffff94
     fd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     fdc:	lsl	r3, r3, #2
     fe0:	sub	r1, fp, #4
     fe4:	add	r3, r1, r3
     fe8:	ldr	r3, [r3, #-180]	; 0xffffff4c
     fec:	mul	r3, r3, r2
     ff0:	ldr	r2, [fp, #-12]
     ff4:	sub	r3, r2, r3
     ff8:	str	r3, [fp, #-12]
     ffc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1000:	add	r3, r3, #1
    1004:	str	r3, [fp, #-32]	; 0xffffffe0
    1008:	ldr	r3, [fp, #-32]	; 0xffffffe0
    100c:	lsl	r3, r3, #2
    1010:	sub	r2, fp, #4
    1014:	add	r3, r2, r3
    1018:	ldr	r3, [r3, #-108]	; 0xffffff94
    101c:	ldr	r2, [fp, #-12]
    1020:	add	r3, r2, r3
    1024:	str	r3, [fp, #-12]
    1028:	ldr	r3, [fp, #-32]	; 0xffffffe0
    102c:	lsl	r3, r3, #2
    1030:	sub	r2, fp, #4
    1034:	add	r3, r2, r3
    1038:	ldr	r3, [r3, #-144]	; 0xffffff70
    103c:	add	r2, r3, #1
    1040:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1044:	lsl	r3, r3, #2
    1048:	sub	r1, fp, #4
    104c:	add	r3, r1, r3
    1050:	str	r2, [r3, #-144]	; 0xffffff70
    1054:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1058:	lsl	r3, r3, #2
    105c:	sub	r2, fp, #4
    1060:	add	r3, r2, r3
    1064:	ldr	r2, [r3, #-144]	; 0xffffff70
    1068:	ldr	r3, [fp, #-32]	; 0xffffffe0
    106c:	lsl	r3, r3, #2
    1070:	sub	r1, fp, #4
    1074:	add	r3, r1, r3
    1078:	ldr	r3, [r3, #-180]	; 0xffffff4c
    107c:	cmp	r2, r3
    1080:	beq	fac <transpose_array+0x78c>
    1084:	nop	{0}
    1088:	ldr	r3, [fp, #-16]
    108c:	add	r3, r3, #1
    1090:	str	r3, [fp, #-16]
    1094:	ldr	r2, [fp, #-16]
    1098:	ldr	r3, [fp, #-8]
    109c:	cmp	r2, r3
    10a0:	blt	f2c <transpose_array+0x70c>
    10a4:	b	10c8 <transpose_array+0x8a8>
    10a8:	movw	r3, #0
    10ac:	movt	r3, #0
    10b0:	mov	r2, #172	; 0xac
    10b4:	movw	r1, #0
    10b8:	movt	r1, #0
    10bc:	movw	r0, #0
    10c0:	movt	r0, #0
    10c4:	bl	0 <__assert_fail>
    10c8:	ldr	r3, [fp, #-8]
    10cc:	ldr	r2, [fp, #-200]	; 0xffffff38
    10d0:	mul	r3, r2, r3
    10d4:	mov	r2, r3
    10d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    10dc:	ldr	r0, [fp, #-196]	; 0xffffff3c
    10e0:	bl	0 <memcpy>
    10e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    10e8:	bl	0 <free>
    10ec:	mov	r3, #0
    10f0:	mov	r0, r3
    10f4:	sub	sp, fp, #4
    10f8:	ldr	fp, [sp]
    10fc:	add	sp, sp, #4
    1100:	pop	{pc}		; (ldr pc, [sp], #4)

00001104 <ipow>:
    1104:	push	{fp}		; (str fp, [sp, #-4]!)
    1108:	add	fp, sp, #0
    110c:	sub	sp, sp, #28
    1110:	vstr	d0, [fp, #-20]	; 0xffffffec
    1114:	str	r0, [fp, #-24]	; 0xffffffe8
    1118:	mov	r2, #0
    111c:	mov	r3, #0
    1120:	movt	r3, #16368	; 0x3ff0
    1124:	strd	r2, [fp, #-12]
    1128:	ldr	r3, [fp, #-24]	; 0xffffffe8
    112c:	cmp	r3, #0
    1130:	bge	1180 <ipow+0x7c>
    1134:	b	1148 <ipow+0x44>
    1138:	vldr	d6, [fp, #-12]
    113c:	vldr	d7, [fp, #-20]	; 0xffffffec
    1140:	vmul.f64	d7, d6, d7
    1144:	vstr	d7, [fp, #-12]
    1148:	ldr	r3, [fp, #-24]	; 0xffffffe8
    114c:	add	r2, r3, #1
    1150:	str	r2, [fp, #-24]	; 0xffffffe8
    1154:	cmp	r3, #0
    1158:	bne	1138 <ipow+0x34>
    115c:	vldr	d5, [pc, #76]	; 11b0 <ipow+0xac>
    1160:	vldr	d6, [fp, #-12]
    1164:	vdiv.f64	d7, d5, d6
    1168:	vstr	d7, [fp, #-12]
    116c:	b	1194 <ipow+0x90>
    1170:	vldr	d6, [fp, #-12]
    1174:	vldr	d7, [fp, #-20]	; 0xffffffec
    1178:	vmul.f64	d7, d6, d7
    117c:	vstr	d7, [fp, #-12]
    1180:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1184:	sub	r2, r3, #1
    1188:	str	r2, [fp, #-24]	; 0xffffffe8
    118c:	cmp	r3, #0
    1190:	bne	1170 <ipow+0x6c>
    1194:	ldrd	r2, [fp, #-12]
    1198:	vmov	d7, r2, r3
    119c:	vmov.f64	d0, d7
    11a0:	add	sp, fp, #0
    11a4:	pop	{fp}		; (ldr fp, [sp], #4)
    11a8:	bx	lr
    11ac:	nop	{0}
    11b0:	.word	0x00000000
    11b4:	.word	0x3ff00000

000011b8 <get_bit_size_boundary>:
    11b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
    11bc:	strd	r6, [sp, #8]
    11c0:	strd	r8, [sp, #16]
    11c4:	str	fp, [sp, #24]
    11c8:	str	lr, [sp, #28]
    11cc:	add	fp, sp, #28
    11d0:	sub	sp, sp, #240	; 0xf0
    11d4:	str	r0, [fp, #-208]	; 0xffffff30
    11d8:	str	r1, [fp, #-212]	; 0xffffff2c
    11dc:	strd	r2, [fp, #-220]	; 0xffffff24
    11e0:	ldr	r3, [fp, #-208]	; 0xffffff30
    11e4:	ldr	r3, [r3, #4]
    11e8:	sub	r3, r3, #1
    11ec:	ldr	r2, [fp, #-208]	; 0xffffff30
    11f0:	add	r3, r3, #1
    11f4:	lsl	r3, r3, #4
    11f8:	add	r3, r2, r3
    11fc:	ldrd	r2, [r3]
    1200:	strd	r2, [fp, #-36]	; 0xffffffdc
    1204:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1208:	cmp	r2, #0
    120c:	sbcs	r3, r3, #0
    1210:	bge	1220 <get_bit_size_boundary+0x68>
    1214:	mov	r2, #0
    1218:	mov	r3, #0
    121c:	strd	r2, [fp, #-220]	; 0xffffff24
    1220:	ldr	r3, [fp, #-208]	; 0xffffff30
    1224:	ldr	r3, [r3]
    1228:	ldr	r3, [r3, #16]
    122c:	cmp	r3, #0
    1230:	beq	1248 <get_bit_size_boundary+0x90>
    1234:	ldr	r3, [fp, #-208]	; 0xffffff30
    1238:	ldr	r3, [r3]
    123c:	ldr	r3, [r3, #16]
    1240:	cmp	r3, #1
    1244:	bne	12e0 <get_bit_size_boundary+0x128>
    1248:	ldr	r3, [fp, #-208]	; 0xffffff30
    124c:	ldr	r3, [r3]
    1250:	ldr	r3, [r3, #48]	; 0x30
    1254:	cmp	r3, #0
    1258:	beq	1284 <get_bit_size_boundary+0xcc>
    125c:	ldr	r3, [fp, #-208]	; 0xffffff30
    1260:	ldr	r3, [r3]
    1264:	ldrd	r0, [r3, #40]	; 0x28
    1268:	mov	r2, #0
    126c:	mov	r3, #0
    1270:	lsl	r3, r1, #3
    1274:	orr	r3, r3, r0, lsr #29
    1278:	lsl	r2, r0, #3
    127c:	strd	r2, [fp, #-44]	; 0xffffffd4
    1280:	b	12a8 <get_bit_size_boundary+0xf0>
    1284:	ldr	r3, [fp, #-208]	; 0xffffff30
    1288:	ldr	r3, [r3]
    128c:	ldrd	r0, [r3, #8]
    1290:	mov	r2, #0
    1294:	mov	r3, #0
    1298:	lsl	r3, r1, #3
    129c:	orr	r3, r3, r0, lsr #29
    12a0:	lsl	r2, r0, #3
    12a4:	strd	r2, [fp, #-44]	; 0xffffffd4
    12a8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    12ac:	ldrd	r2, [fp, #-220]	; 0xffffff24
    12b0:	adds	r4, r0, r2
    12b4:	adc	r5, r1, r3
    12b8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    12bc:	cmp	r4, r2
    12c0:	sbcs	r3, r5, r3
    12c4:	blt	16c0 <get_bit_size_boundary+0x508>
    12c8:	movw	r1, #0
    12cc:	movt	r1, #0
    12d0:	mvn	r0, #300	; 0x12c
    12d4:	bl	0 <coda_set_error>
    12d8:	mvn	r3, #0
    12dc:	b	16ec <get_bit_size_boundary+0x534>
    12e0:	ldr	r3, [fp, #-208]	; 0xffffff30
    12e4:	ldr	r3, [r3, #4]
    12e8:	sub	r3, r3, #1
    12ec:	str	r3, [fp, #-48]	; 0xffffffd0
    12f0:	b	1300 <get_bit_size_boundary+0x148>
    12f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    12f8:	sub	r3, r3, #1
    12fc:	str	r3, [fp, #-48]	; 0xffffffd0
    1300:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1304:	cmp	r3, #0
    1308:	ble	134c <get_bit_size_boundary+0x194>
    130c:	ldr	r2, [fp, #-208]	; 0xffffff30
    1310:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1314:	lsl	r3, r3, #4
    1318:	add	r3, r2, r3
    131c:	ldr	r3, [r3, #8]
    1320:	ldr	r3, [r3]
    1324:	cmp	r3, #0
    1328:	beq	12f4 <get_bit_size_boundary+0x13c>
    132c:	ldr	r2, [fp, #-208]	; 0xffffff30
    1330:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1334:	lsl	r3, r3, #4
    1338:	add	r3, r2, r3
    133c:	ldr	r3, [r3, #8]
    1340:	ldr	r3, [r3]
    1344:	cmp	r3, #1
    1348:	beq	12f4 <get_bit_size_boundary+0x13c>
    134c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1350:	cmp	r3, #0
    1354:	blt	1398 <get_bit_size_boundary+0x1e0>
    1358:	ldr	r2, [fp, #-208]	; 0xffffff30
    135c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1360:	lsl	r3, r3, #4
    1364:	add	r3, r2, r3
    1368:	ldr	r3, [r3, #8]
    136c:	ldr	r3, [r3]
    1370:	cmp	r3, #100	; 0x64
    1374:	bne	1398 <get_bit_size_boundary+0x1e0>
    1378:	ldr	r2, [fp, #-208]	; 0xffffff30
    137c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1380:	lsl	r3, r3, #4
    1384:	add	r3, r2, r3
    1388:	ldr	r3, [r3, #8]
    138c:	ldr	r3, [r3, #8]
    1390:	cmp	r3, #2
    1394:	beq	13b8 <get_bit_size_boundary+0x200>
    1398:	movw	r3, #0
    139c:	movt	r3, #0
    13a0:	mov	r2, #122	; 0x7a
    13a4:	movw	r1, #0
    13a8:	movt	r1, #0
    13ac:	movw	r0, #0
    13b0:	movt	r0, #0
    13b4:	bl	0 <__assert_fail>
    13b8:	ldr	r2, [fp, #-208]	; 0xffffff30
    13bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    13c0:	lsl	r3, r3, #4
    13c4:	add	r3, r2, r3
    13c8:	ldr	r3, [r3, #8]
    13cc:	ldrd	r2, [r3, #24]
    13d0:	mov	r0, #0
    13d4:	mov	r1, #0
    13d8:	lsl	r1, r3, #3
    13dc:	orr	r1, r1, r2, lsr #29
    13e0:	lsl	r0, r2, #3
    13e4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    13e8:	subs	r6, r2, r0
    13ec:	sbc	r7, r3, r1
    13f0:	strd	r6, [fp, #-36]	; 0xffffffdc
    13f4:	ldr	r2, [fp, #-208]	; 0xffffff30
    13f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    13fc:	lsl	r3, r3, #4
    1400:	add	r3, r2, r3
    1404:	ldr	r3, [r3, #8]
    1408:	ldr	r3, [r3, #16]
    140c:	lsl	r3, r3, #3
    1410:	mov	r2, r3
    1414:	asr	r3, r2, #31
    1418:	strd	r2, [fp, #-44]	; 0xffffffd4
    141c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1420:	cmp	r2, #0
    1424:	sbcs	r3, r3, #0
    1428:	blt	1440 <get_bit_size_boundary+0x288>
    142c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    1430:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1434:	cmp	r2, r0
    1438:	sbcs	r3, r3, r1
    143c:	bge	14f4 <get_bit_size_boundary+0x33c>
    1440:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1444:	mov	r0, #0
    1448:	mov	r1, #0
    144c:	lsr	r0, r2, #3
    1450:	orr	r0, r0, r3, lsl #29
    1454:	asr	r1, r3, #3
    1458:	sub	r3, fp, #80	; 0x50
    145c:	mov	r2, r3
    1460:	bl	0 <coda_str64>
    1464:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    1468:	mov	r0, #7
    146c:	mov	r1, #0
    1470:	and	r8, r2, r0
    1474:	and	r9, r3, r1
    1478:	orrs	r3, r8, r9
    147c:	beq	14b0 <get_bit_size_boundary+0x2f8>
    1480:	sub	r3, fp, #80	; 0x50
    1484:	mov	r0, r3
    1488:	bl	0 <strlen>
    148c:	mov	r2, r0
    1490:	sub	r3, fp, #80	; 0x50
    1494:	add	r0, r3, r2
    1498:	ldr	r3, [fp, #-36]	; 0xffffffdc
    149c:	and	r3, r3, #7
    14a0:	mov	r2, r3
    14a4:	movw	r1, #0
    14a8:	movt	r1, #0
    14ac:	bl	0 <sprintf>
    14b0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    14b4:	mov	r0, #0
    14b8:	mov	r1, #0
    14bc:	lsr	r0, r2, #3
    14c0:	orr	r0, r0, r3, lsl #29
    14c4:	asr	r1, r3, #3
    14c8:	sub	r3, fp, #104	; 0x68
    14cc:	mov	r2, r3
    14d0:	bl	0 <coda_str64>
    14d4:	sub	r3, fp, #104	; 0x68
    14d8:	sub	r2, fp, #80	; 0x50
    14dc:	movw	r1, #0
    14e0:	movt	r1, #0
    14e4:	mvn	r0, #300	; 0x12c
    14e8:	bl	0 <coda_set_error>
    14ec:	mvn	r3, #0
    14f0:	b	16ec <get_bit_size_boundary+0x534>
    14f4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    14f8:	ldrd	r2, [fp, #-220]	; 0xffffff24
    14fc:	adds	ip, r0, r2
    1500:	str	ip, [fp, #-228]	; 0xffffff1c
    1504:	adc	r3, r1, r3
    1508:	str	r3, [fp, #-224]	; 0xffffff20
    150c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1510:	ldrd	r0, [fp, #-228]	; 0xffffff1c
    1514:	cmp	r2, r0
    1518:	sbcs	r3, r3, r1
    151c:	bge	16c0 <get_bit_size_boundary+0x508>
    1520:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1524:	mov	r0, #0
    1528:	mov	r1, #0
    152c:	lsr	r0, r2, #3
    1530:	orr	r0, r0, r3, lsl #29
    1534:	asr	r1, r3, #3
    1538:	sub	r3, fp, #136	; 0x88
    153c:	mov	r2, r3
    1540:	bl	0 <coda_str64>
    1544:	ldrd	r2, [fp, #-220]	; 0xffffff24
    1548:	mov	r0, #7
    154c:	mov	r1, #0
    1550:	and	ip, r2, r0
    1554:	str	ip, [fp, #-236]	; 0xffffff14
    1558:	and	r3, r3, r1
    155c:	str	r3, [fp, #-232]	; 0xffffff18
    1560:	ldrd	r2, [fp, #-236]	; 0xffffff14
    1564:	orrs	r3, r2, r3
    1568:	beq	159c <get_bit_size_boundary+0x3e4>
    156c:	sub	r3, fp, #136	; 0x88
    1570:	mov	r0, r3
    1574:	bl	0 <strlen>
    1578:	mov	r2, r0
    157c:	sub	r3, fp, #136	; 0x88
    1580:	add	r0, r3, r2
    1584:	ldr	r3, [fp, #-220]	; 0xffffff24
    1588:	and	r3, r3, #7
    158c:	mov	r2, r3
    1590:	movw	r1, #0
    1594:	movt	r1, #0
    1598:	bl	0 <sprintf>
    159c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    15a0:	mov	r0, #0
    15a4:	mov	r1, #0
    15a8:	lsr	r0, r2, #3
    15ac:	orr	r0, r0, r3, lsl #29
    15b0:	asr	r1, r3, #3
    15b4:	sub	r3, fp, #168	; 0xa8
    15b8:	mov	r2, r3
    15bc:	bl	0 <coda_str64>
    15c0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    15c4:	mov	r0, #7
    15c8:	mov	r1, #0
    15cc:	and	ip, r2, r0
    15d0:	str	ip, [fp, #-244]	; 0xffffff0c
    15d4:	and	r3, r3, r1
    15d8:	str	r3, [fp, #-240]	; 0xffffff10
    15dc:	ldrd	r2, [fp, #-244]	; 0xffffff0c
    15e0:	orrs	r3, r2, r3
    15e4:	beq	1618 <get_bit_size_boundary+0x460>
    15e8:	sub	r3, fp, #168	; 0xa8
    15ec:	mov	r0, r3
    15f0:	bl	0 <strlen>
    15f4:	mov	r2, r0
    15f8:	sub	r3, fp, #168	; 0xa8
    15fc:	add	r0, r3, r2
    1600:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1604:	and	r3, r3, #7
    1608:	mov	r2, r3
    160c:	movw	r1, #0
    1610:	movt	r1, #0
    1614:	bl	0 <sprintf>
    1618:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    161c:	mov	r0, #0
    1620:	mov	r1, #0
    1624:	lsr	r0, r2, #3
    1628:	orr	r0, r0, r3, lsl #29
    162c:	asr	r1, r3, #3
    1630:	sub	r3, fp, #200	; 0xc8
    1634:	mov	r2, r3
    1638:	bl	0 <coda_str64>
    163c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1640:	mov	r0, #7
    1644:	mov	r1, #0
    1648:	and	ip, r2, r0
    164c:	str	ip, [fp, #-252]	; 0xffffff04
    1650:	and	r3, r3, r1
    1654:	str	r3, [fp, #-248]	; 0xffffff08
    1658:	ldrd	r2, [fp, #-252]	; 0xffffff04
    165c:	orrs	r3, r2, r3
    1660:	beq	1694 <get_bit_size_boundary+0x4dc>
    1664:	sub	r3, fp, #200	; 0xc8
    1668:	mov	r0, r3
    166c:	bl	0 <strlen>
    1670:	mov	r2, r0
    1674:	sub	r3, fp, #200	; 0xc8
    1678:	add	r0, r3, r2
    167c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    1680:	and	r3, r3, #7
    1684:	mov	r2, r3
    1688:	movw	r1, #0
    168c:	movt	r1, #0
    1690:	bl	0 <sprintf>
    1694:	sub	r1, fp, #168	; 0xa8
    1698:	sub	r2, fp, #136	; 0x88
    169c:	sub	r3, fp, #200	; 0xc8
    16a0:	str	r3, [sp]
    16a4:	mov	r3, r1
    16a8:	movw	r1, #0
    16ac:	movt	r1, #0
    16b0:	mvn	r0, #300	; 0x12c
    16b4:	bl	0 <coda_set_error>
    16b8:	mvn	r3, #0
    16bc:	b	16ec <get_bit_size_boundary+0x534>
    16c0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    16c4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    16c8:	subs	ip, r0, r2
    16cc:	str	ip, [fp, #-260]	; 0xfffffefc
    16d0:	sbc	r3, r1, r3
    16d4:	str	r3, [fp, #-256]	; 0xffffff00
    16d8:	ldr	r3, [fp, #-212]	; 0xffffff2c
    16dc:	sub	r2, fp, #260	; 0x104
    16e0:	ldrd	r0, [r2]
    16e4:	strd	r0, [r3]
    16e8:	mov	r3, #0
    16ec:	mov	r0, r3
    16f0:	sub	sp, fp, #28
    16f4:	ldrd	r4, [sp]
    16f8:	ldrd	r6, [sp, #8]
    16fc:	ldrd	r8, [sp, #16]
    1700:	ldr	fp, [sp, #24]
    1704:	add	sp, sp, #28
    1708:	pop	{pc}		; (ldr pc, [sp], #4)

0000170c <parse_mapping_size>:
    170c:	str	fp, [sp, #-8]!
    1710:	str	lr, [sp, #4]
    1714:	add	fp, sp, #4
    1718:	sub	sp, sp, #24
    171c:	str	r0, [fp, #-16]
    1720:	str	r1, [fp, #-20]	; 0xffffffec
    1724:	str	r2, [fp, #-24]	; 0xffffffe8
    1728:	str	r3, [fp, #-28]	; 0xffffffe4
    172c:	mov	r3, #0
    1730:	str	r3, [fp, #-8]
    1734:	b	183c <parse_mapping_size+0x130>
    1738:	ldr	r3, [fp, #-24]	; 0xffffffe8
    173c:	ldr	r2, [r3, #12]
    1740:	ldr	r3, [fp, #-8]
    1744:	lsl	r3, r3, #2
    1748:	add	r3, r2, r3
    174c:	ldr	r3, [r3]
    1750:	ldr	r3, [r3]
    1754:	cmp	r3, #0
    1758:	bne	1780 <parse_mapping_size+0x74>
    175c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1760:	cmp	r3, #0
    1764:	bne	1830 <parse_mapping_size+0x124>
    1768:	ldr	r1, [fp, #-28]	; 0xffffffe4
    176c:	mov	r2, #0
    1770:	mov	r3, #0
    1774:	strd	r2, [r1]
    1778:	mov	r3, #1
    177c:	b	1880 <parse_mapping_size+0x174>
    1780:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1784:	ldr	r2, [r3, #12]
    1788:	ldr	r3, [fp, #-8]
    178c:	lsl	r3, r3, #2
    1790:	add	r3, r2, r3
    1794:	ldr	r3, [r3]
    1798:	ldr	r3, [r3]
    179c:	ldr	r2, [fp, #-20]	; 0xffffffec
    17a0:	cmp	r2, r3
    17a4:	blt	1830 <parse_mapping_size+0x124>
    17a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17ac:	ldr	r2, [r3, #12]
    17b0:	ldr	r3, [fp, #-8]
    17b4:	lsl	r3, r3, #2
    17b8:	add	r3, r2, r3
    17bc:	ldr	r3, [r3]
    17c0:	ldr	r0, [r3, #4]
    17c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17c8:	ldr	r2, [r3, #12]
    17cc:	ldr	r3, [fp, #-8]
    17d0:	lsl	r3, r3, #2
    17d4:	add	r3, r2, r3
    17d8:	ldr	r3, [r3]
    17dc:	ldr	r3, [r3]
    17e0:	mov	r2, r3
    17e4:	ldr	r1, [fp, #-16]
    17e8:	bl	0 <memcmp>
    17ec:	mov	r3, r0
    17f0:	cmp	r3, #0
    17f4:	bne	1830 <parse_mapping_size+0x124>
    17f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    17fc:	ldr	r2, [r3, #12]
    1800:	ldr	r3, [fp, #-8]
    1804:	lsl	r3, r3, #2
    1808:	add	r3, r2, r3
    180c:	ldr	r3, [r3]
    1810:	ldr	r3, [r3]
    1814:	lsl	r3, r3, #3
    1818:	mov	r2, r3
    181c:	asr	r3, r2, #31
    1820:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1824:	strd	r2, [r1]
    1828:	mov	r3, #1
    182c:	b	1880 <parse_mapping_size+0x174>
    1830:	ldr	r3, [fp, #-8]
    1834:	add	r3, r3, #1
    1838:	str	r3, [fp, #-8]
    183c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1840:	ldr	r3, [r3, #8]
    1844:	ldr	r2, [fp, #-8]
    1848:	cmp	r2, r3
    184c:	blt	1738 <parse_mapping_size+0x2c>
    1850:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1854:	ldrd	r2, [r3]
    1858:	cmp	r2, #0
    185c:	sbcs	r3, r3, #0
    1860:	blt	187c <parse_mapping_size+0x170>
    1864:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1868:	ldrd	r2, [r3]
    186c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1870:	strd	r2, [r1]
    1874:	mov	r3, #1
    1878:	b	1880 <parse_mapping_size+0x174>
    187c:	mov	r3, #0
    1880:	mov	r0, r3
    1884:	sub	sp, fp, #4
    1888:	ldr	fp, [sp]
    188c:	add	sp, sp, #4
    1890:	pop	{pc}		; (ldr pc, [sp], #4)

00001894 <parse_integer_mapping>:
    1894:	str	fp, [sp, #-8]!
    1898:	str	lr, [sp, #4]
    189c:	add	fp, sp, #4
    18a0:	sub	sp, sp, #24
    18a4:	str	r0, [fp, #-16]
    18a8:	str	r1, [fp, #-20]	; 0xffffffec
    18ac:	str	r2, [fp, #-24]	; 0xffffffe8
    18b0:	str	r3, [fp, #-28]	; 0xffffffe4
    18b4:	mov	r3, #0
    18b8:	str	r3, [fp, #-8]
    18bc:	b	1a18 <parse_integer_mapping+0x184>
    18c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18c4:	ldr	r2, [r3, #12]
    18c8:	ldr	r3, [fp, #-8]
    18cc:	lsl	r3, r3, #2
    18d0:	add	r3, r2, r3
    18d4:	ldr	r3, [r3]
    18d8:	ldr	r3, [r3]
    18dc:	cmp	r3, #0
    18e0:	bne	191c <parse_integer_mapping+0x88>
    18e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    18e8:	cmp	r3, #0
    18ec:	bne	1a0c <parse_integer_mapping+0x178>
    18f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18f4:	ldr	r2, [r3, #12]
    18f8:	ldr	r3, [fp, #-8]
    18fc:	lsl	r3, r3, #2
    1900:	add	r3, r2, r3
    1904:	ldr	r3, [r3]
    1908:	ldrd	r2, [r3, #8]
    190c:	ldr	r1, [fp, #4]
    1910:	strd	r2, [r1]
    1914:	mov	r3, #1
    1918:	b	1a30 <parse_integer_mapping+0x19c>
    191c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1920:	ldr	r2, [r3, #12]
    1924:	ldr	r3, [fp, #-8]
    1928:	lsl	r3, r3, #2
    192c:	add	r3, r2, r3
    1930:	ldr	r3, [r3]
    1934:	ldr	r3, [r3]
    1938:	ldr	r2, [fp, #-20]	; 0xffffffec
    193c:	cmp	r2, r3
    1940:	blt	1a0c <parse_integer_mapping+0x178>
    1944:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1948:	ldr	r2, [r3, #12]
    194c:	ldr	r3, [fp, #-8]
    1950:	lsl	r3, r3, #2
    1954:	add	r3, r2, r3
    1958:	ldr	r3, [r3]
    195c:	ldr	r0, [r3, #4]
    1960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1964:	ldr	r2, [r3, #12]
    1968:	ldr	r3, [fp, #-8]
    196c:	lsl	r3, r3, #2
    1970:	add	r3, r2, r3
    1974:	ldr	r3, [r3]
    1978:	ldr	r3, [r3]
    197c:	mov	r2, r3
    1980:	ldr	r1, [fp, #-16]
    1984:	bl	0 <memcmp>
    1988:	mov	r3, r0
    198c:	cmp	r3, #0
    1990:	bne	1a0c <parse_integer_mapping+0x178>
    1994:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1998:	cmp	r3, #0
    199c:	bne	19e0 <parse_integer_mapping+0x14c>
    19a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19a4:	ldr	r2, [r3, #12]
    19a8:	ldr	r3, [fp, #-8]
    19ac:	lsl	r3, r3, #2
    19b0:	add	r3, r2, r3
    19b4:	ldr	r3, [r3]
    19b8:	ldr	r3, [r3]
    19bc:	ldr	r2, [fp, #-20]	; 0xffffffec
    19c0:	cmp	r2, r3
    19c4:	beq	19e0 <parse_integer_mapping+0x14c>
    19c8:	movw	r1, #0
    19cc:	movt	r1, #0
    19d0:	mvn	r0, #102	; 0x66
    19d4:	bl	0 <coda_set_error>
    19d8:	mvn	r3, #0
    19dc:	b	1a30 <parse_integer_mapping+0x19c>
    19e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19e4:	ldr	r2, [r3, #12]
    19e8:	ldr	r3, [fp, #-8]
    19ec:	lsl	r3, r3, #2
    19f0:	add	r3, r2, r3
    19f4:	ldr	r3, [r3]
    19f8:	ldrd	r2, [r3, #8]
    19fc:	ldr	r1, [fp, #4]
    1a00:	strd	r2, [r1]
    1a04:	mov	r3, #1
    1a08:	b	1a30 <parse_integer_mapping+0x19c>
    1a0c:	ldr	r3, [fp, #-8]
    1a10:	add	r3, r3, #1
    1a14:	str	r3, [fp, #-8]
    1a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a1c:	ldr	r3, [r3, #8]
    1a20:	ldr	r2, [fp, #-8]
    1a24:	cmp	r2, r3
    1a28:	blt	18c0 <parse_integer_mapping+0x2c>
    1a2c:	mov	r3, #0
    1a30:	mov	r0, r3
    1a34:	sub	sp, fp, #4
    1a38:	ldr	fp, [sp]
    1a3c:	add	sp, sp, #4
    1a40:	pop	{pc}		; (ldr pc, [sp], #4)

00001a44 <parse_float_mapping>:
    1a44:	str	fp, [sp, #-8]!
    1a48:	str	lr, [sp, #4]
    1a4c:	add	fp, sp, #4
    1a50:	sub	sp, sp, #24
    1a54:	str	r0, [fp, #-16]
    1a58:	str	r1, [fp, #-20]	; 0xffffffec
    1a5c:	str	r2, [fp, #-24]	; 0xffffffe8
    1a60:	str	r3, [fp, #-28]	; 0xffffffe4
    1a64:	mov	r3, #0
    1a68:	str	r3, [fp, #-8]
    1a6c:	b	1bc8 <parse_float_mapping+0x184>
    1a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a74:	ldr	r2, [r3, #12]
    1a78:	ldr	r3, [fp, #-8]
    1a7c:	lsl	r3, r3, #2
    1a80:	add	r3, r2, r3
    1a84:	ldr	r3, [r3]
    1a88:	ldr	r3, [r3]
    1a8c:	cmp	r3, #0
    1a90:	bne	1acc <parse_float_mapping+0x88>
    1a94:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a98:	cmp	r3, #0
    1a9c:	bne	1bbc <parse_float_mapping+0x178>
    1aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1aa4:	ldr	r2, [r3, #12]
    1aa8:	ldr	r3, [fp, #-8]
    1aac:	lsl	r3, r3, #2
    1ab0:	add	r3, r2, r3
    1ab4:	ldr	r3, [r3]
    1ab8:	ldrd	r2, [r3, #8]
    1abc:	ldr	r1, [fp, #4]
    1ac0:	strd	r2, [r1]
    1ac4:	mov	r3, #1
    1ac8:	b	1be0 <parse_float_mapping+0x19c>
    1acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ad0:	ldr	r2, [r3, #12]
    1ad4:	ldr	r3, [fp, #-8]
    1ad8:	lsl	r3, r3, #2
    1adc:	add	r3, r2, r3
    1ae0:	ldr	r3, [r3]
    1ae4:	ldr	r3, [r3]
    1ae8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1aec:	cmp	r2, r3
    1af0:	blt	1bbc <parse_float_mapping+0x178>
    1af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1af8:	ldr	r2, [r3, #12]
    1afc:	ldr	r3, [fp, #-8]
    1b00:	lsl	r3, r3, #2
    1b04:	add	r3, r2, r3
    1b08:	ldr	r3, [r3]
    1b0c:	ldr	r0, [r3, #4]
    1b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b14:	ldr	r2, [r3, #12]
    1b18:	ldr	r3, [fp, #-8]
    1b1c:	lsl	r3, r3, #2
    1b20:	add	r3, r2, r3
    1b24:	ldr	r3, [r3]
    1b28:	ldr	r3, [r3]
    1b2c:	mov	r2, r3
    1b30:	ldr	r1, [fp, #-16]
    1b34:	bl	0 <memcmp>
    1b38:	mov	r3, r0
    1b3c:	cmp	r3, #0
    1b40:	bne	1bbc <parse_float_mapping+0x178>
    1b44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1b48:	cmp	r3, #0
    1b4c:	bne	1b90 <parse_float_mapping+0x14c>
    1b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b54:	ldr	r2, [r3, #12]
    1b58:	ldr	r3, [fp, #-8]
    1b5c:	lsl	r3, r3, #2
    1b60:	add	r3, r2, r3
    1b64:	ldr	r3, [r3]
    1b68:	ldr	r3, [r3]
    1b6c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b70:	cmp	r2, r3
    1b74:	beq	1b90 <parse_float_mapping+0x14c>
    1b78:	movw	r1, #0
    1b7c:	movt	r1, #0
    1b80:	mvn	r0, #102	; 0x66
    1b84:	bl	0 <coda_set_error>
    1b88:	mvn	r3, #0
    1b8c:	b	1be0 <parse_float_mapping+0x19c>
    1b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1b94:	ldr	r2, [r3, #12]
    1b98:	ldr	r3, [fp, #-8]
    1b9c:	lsl	r3, r3, #2
    1ba0:	add	r3, r2, r3
    1ba4:	ldr	r3, [r3]
    1ba8:	ldrd	r2, [r3, #8]
    1bac:	ldr	r1, [fp, #4]
    1bb0:	strd	r2, [r1]
    1bb4:	mov	r3, #1
    1bb8:	b	1be0 <parse_float_mapping+0x19c>
    1bbc:	ldr	r3, [fp, #-8]
    1bc0:	add	r3, r3, #1
    1bc4:	str	r3, [fp, #-8]
    1bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1bcc:	ldr	r3, [r3, #8]
    1bd0:	ldr	r2, [fp, #-8]
    1bd4:	cmp	r2, r3
    1bd8:	blt	1a70 <parse_float_mapping+0x2c>
    1bdc:	mov	r3, #0
    1be0:	mov	r0, r3
    1be4:	sub	sp, fp, #4
    1be8:	ldr	fp, [sp]
    1bec:	add	sp, sp, #4
    1bf0:	pop	{pc}		; (ldr pc, [sp], #4)

00001bf4 <coda_ascii_parse_int64>:
    1bf4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1bf8:	strd	r6, [sp, #8]
    1bfc:	strd	r8, [sp, #16]
    1c00:	str	fp, [sp, #24]
    1c04:	str	lr, [sp, #28]
    1c08:	add	fp, sp, #28
    1c0c:	sub	sp, sp, #56	; 0x38
    1c10:	str	r0, [fp, #-64]	; 0xffffffc0
    1c14:	str	r1, [fp, #-68]	; 0xffffffbc
    1c18:	str	r2, [fp, #-72]	; 0xffffffb8
    1c1c:	str	r3, [fp, #-76]	; 0xffffffb4
    1c20:	mov	r3, #0
    1c24:	str	r3, [fp, #-48]	; 0xffffffd0
    1c28:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1c2c:	str	r3, [fp, #-32]	; 0xffffffe0
    1c30:	b	1c4c <coda_ascii_parse_int64+0x58>
    1c34:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c38:	add	r3, r3, #1
    1c3c:	str	r3, [fp, #-64]	; 0xffffffc0
    1c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1c44:	sub	r3, r3, #1
    1c48:	str	r3, [fp, #-32]	; 0xffffffe0
    1c4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1c50:	cmp	r3, #0
    1c54:	ble	1c78 <coda_ascii_parse_int64+0x84>
    1c58:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c5c:	ldrb	r3, [r3]
    1c60:	cmp	r3, #32
    1c64:	beq	1c34 <coda_ascii_parse_int64+0x40>
    1c68:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c6c:	ldrb	r3, [r3]
    1c70:	cmp	r3, #9
    1c74:	beq	1c34 <coda_ascii_parse_int64+0x40>
    1c78:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c7c:	ldrb	r3, [r3]
    1c80:	cmp	r3, #43	; 0x2b
    1c84:	beq	1c98 <coda_ascii_parse_int64+0xa4>
    1c88:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c8c:	ldrb	r3, [r3]
    1c90:	cmp	r3, #45	; 0x2d
    1c94:	bne	1ccc <coda_ascii_parse_int64+0xd8>
    1c98:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1c9c:	ldrb	r3, [r3]
    1ca0:	cmp	r3, #45	; 0x2d
    1ca4:	moveq	r3, #1
    1ca8:	movne	r3, #0
    1cac:	uxtb	r3, r3
    1cb0:	str	r3, [fp, #-48]	; 0xffffffd0
    1cb4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1cb8:	add	r3, r3, #1
    1cbc:	str	r3, [fp, #-64]	; 0xffffffc0
    1cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1cc4:	sub	r3, r3, #1
    1cc8:	str	r3, [fp, #-32]	; 0xffffffe0
    1ccc:	mov	r2, #0
    1cd0:	mov	r3, #0
    1cd4:	strd	r2, [fp, #-44]	; 0xffffffd4
    1cd8:	mov	r3, #0
    1cdc:	str	r3, [fp, #-36]	; 0xffffffdc
    1ce0:	b	1dfc <coda_ascii_parse_int64+0x208>
    1ce4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ce8:	ldrb	r3, [r3]
    1cec:	cmp	r3, #47	; 0x2f
    1cf0:	bls	1e08 <coda_ascii_parse_int64+0x214>
    1cf4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1cf8:	ldrb	r3, [r3]
    1cfc:	cmp	r3, #57	; 0x39
    1d00:	bhi	1e08 <coda_ascii_parse_int64+0x214>
    1d04:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1d08:	ldrb	r3, [r3]
    1d0c:	sub	r3, r3, #48	; 0x30
    1d10:	mov	r2, r3
    1d14:	asr	r3, r2, #31
    1d18:	strd	r2, [fp, #-60]	; 0xffffffc4
    1d1c:	mvn	r0, #0
    1d20:	mvn	r1, #-2147483648	; 0x80000000
    1d24:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1d28:	subs	r8, r0, r2
    1d2c:	sbc	r9, r1, r3
    1d30:	mov	r2, #10
    1d34:	mov	r3, #0
    1d38:	mov	r0, r8
    1d3c:	mov	r1, r9
    1d40:	bl	0 <__aeabi_ldivmod>
    1d44:	mov	r2, r0
    1d48:	mov	r3, r1
    1d4c:	mov	r0, r2
    1d50:	mov	r1, r3
    1d54:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1d58:	cmp	r0, r2
    1d5c:	sbcs	r3, r1, r3
    1d60:	bge	1d7c <coda_ascii_parse_int64+0x188>
    1d64:	movw	r1, #0
    1d68:	movt	r1, #0
    1d6c:	mvn	r0, #102	; 0x66
    1d70:	bl	0 <coda_set_error>
    1d74:	mvn	r3, #0
    1d78:	b	1ee4 <coda_ascii_parse_int64+0x2f0>
    1d7c:	ldrd	r4, [fp, #-44]	; 0xffffffd4
    1d80:	mov	r2, r4
    1d84:	mov	r3, r5
    1d88:	mov	r0, #0
    1d8c:	mov	r1, #0
    1d90:	lsl	r1, r3, #2
    1d94:	orr	r1, r1, r2, lsr #30
    1d98:	lsl	r0, r2, #2
    1d9c:	mov	r2, r0
    1da0:	mov	r3, r1
    1da4:	adds	r2, r2, r4
    1da8:	adc	r3, r3, r5
    1dac:	adds	r1, r2, r2
    1db0:	str	r1, [fp, #-84]	; 0xffffffac
    1db4:	adc	r3, r3, r3
    1db8:	str	r3, [fp, #-80]	; 0xffffffb0
    1dbc:	ldrd	r2, [fp, #-84]	; 0xffffffac
    1dc0:	mov	r0, r2
    1dc4:	mov	r1, r3
    1dc8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    1dcc:	adds	r6, r2, r0
    1dd0:	adc	r7, r3, r1
    1dd4:	strd	r6, [fp, #-44]	; 0xffffffd4
    1dd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1ddc:	add	r3, r3, #1
    1de0:	str	r3, [fp, #-36]	; 0xffffffdc
    1de4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1de8:	add	r3, r3, #1
    1dec:	str	r3, [fp, #-64]	; 0xffffffc0
    1df0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1df4:	sub	r3, r3, #1
    1df8:	str	r3, [fp, #-32]	; 0xffffffe0
    1dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e00:	cmp	r3, #0
    1e04:	bgt	1ce4 <coda_ascii_parse_int64+0xf0>
    1e08:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1e0c:	cmp	r3, #0
    1e10:	bne	1e2c <coda_ascii_parse_int64+0x238>
    1e14:	movw	r1, #0
    1e18:	movt	r1, #0
    1e1c:	mvn	r0, #102	; 0x66
    1e20:	bl	0 <coda_set_error>
    1e24:	mvn	r3, #0
    1e28:	b	1ee4 <coda_ascii_parse_int64+0x2f0>
    1e2c:	ldr	r3, [fp, #-76]	; 0xffffffb4
    1e30:	cmp	r3, #0
    1e34:	bne	1eb0 <coda_ascii_parse_int64+0x2bc>
    1e38:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e3c:	cmp	r3, #0
    1e40:	beq	1eb0 <coda_ascii_parse_int64+0x2bc>
    1e44:	b	1e60 <coda_ascii_parse_int64+0x26c>
    1e48:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1e4c:	add	r3, r3, #1
    1e50:	str	r3, [fp, #-64]	; 0xffffffc0
    1e54:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e58:	sub	r3, r3, #1
    1e5c:	str	r3, [fp, #-32]	; 0xffffffe0
    1e60:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e64:	cmp	r3, #0
    1e68:	ble	1e8c <coda_ascii_parse_int64+0x298>
    1e6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1e70:	ldrb	r3, [r3]
    1e74:	cmp	r3, #32
    1e78:	beq	1e48 <coda_ascii_parse_int64+0x254>
    1e7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1e80:	ldrb	r3, [r3]
    1e84:	cmp	r3, #9
    1e88:	beq	1e48 <coda_ascii_parse_int64+0x254>
    1e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1e90:	cmp	r3, #0
    1e94:	beq	1eb0 <coda_ascii_parse_int64+0x2bc>
    1e98:	movw	r1, #0
    1e9c:	movt	r1, #0
    1ea0:	mvn	r0, #102	; 0x66
    1ea4:	bl	0 <coda_set_error>
    1ea8:	mvn	r3, #0
    1eac:	b	1ee4 <coda_ascii_parse_int64+0x2f0>
    1eb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    1eb4:	cmp	r3, #0
    1eb8:	beq	1ecc <coda_ascii_parse_int64+0x2d8>
    1ebc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1ec0:	rsbs	r2, r2, #0
    1ec4:	rsc	r3, r3, #0
    1ec8:	strd	r2, [fp, #-44]	; 0xffffffd4
    1ecc:	ldr	r1, [fp, #-72]	; 0xffffffb8
    1ed0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    1ed4:	strd	r2, [r1]
    1ed8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1edc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ee0:	sub	r3, r2, r3
    1ee4:	mov	r0, r3
    1ee8:	sub	sp, fp, #28
    1eec:	ldrd	r4, [sp]
    1ef0:	ldrd	r6, [sp, #8]
    1ef4:	ldrd	r8, [sp, #16]
    1ef8:	ldr	fp, [sp, #24]
    1efc:	add	sp, sp, #28
    1f00:	pop	{pc}		; (ldr pc, [sp], #4)

00001f04 <coda_ascii_parse_uint64>:
    1f04:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1f08:	strd	r6, [sp, #8]
    1f0c:	strd	r8, [sp, #16]
    1f10:	str	fp, [sp, #24]
    1f14:	str	lr, [sp, #28]
    1f18:	add	fp, sp, #28
    1f1c:	sub	sp, sp, #48	; 0x30
    1f20:	str	r0, [fp, #-56]	; 0xffffffc8
    1f24:	str	r1, [fp, #-60]	; 0xffffffc4
    1f28:	str	r2, [fp, #-64]	; 0xffffffc0
    1f2c:	str	r3, [fp, #-68]	; 0xffffffbc
    1f30:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1f34:	str	r3, [fp, #-32]	; 0xffffffe0
    1f38:	b	1f54 <coda_ascii_parse_uint64+0x50>
    1f3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f40:	add	r3, r3, #1
    1f44:	str	r3, [fp, #-56]	; 0xffffffc8
    1f48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1f4c:	sub	r3, r3, #1
    1f50:	str	r3, [fp, #-32]	; 0xffffffe0
    1f54:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1f58:	cmp	r3, #0
    1f5c:	ble	1f80 <coda_ascii_parse_uint64+0x7c>
    1f60:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f64:	ldrb	r3, [r3]
    1f68:	cmp	r3, #32
    1f6c:	beq	1f3c <coda_ascii_parse_uint64+0x38>
    1f70:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f74:	ldrb	r3, [r3]
    1f78:	cmp	r3, #9
    1f7c:	beq	1f3c <coda_ascii_parse_uint64+0x38>
    1f80:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f84:	ldrb	r3, [r3]
    1f88:	cmp	r3, #43	; 0x2b
    1f8c:	bne	1fa8 <coda_ascii_parse_uint64+0xa4>
    1f90:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f94:	add	r3, r3, #1
    1f98:	str	r3, [fp, #-56]	; 0xffffffc8
    1f9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1fa0:	sub	r3, r3, #1
    1fa4:	str	r3, [fp, #-32]	; 0xffffffe0
    1fa8:	mov	r2, #0
    1fac:	mov	r3, #0
    1fb0:	strd	r2, [fp, #-44]	; 0xffffffd4
    1fb4:	mov	r3, #0
    1fb8:	str	r3, [fp, #-36]	; 0xffffffdc
    1fbc:	b	20d0 <coda_ascii_parse_uint64+0x1cc>
    1fc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fc4:	ldrb	r3, [r3]
    1fc8:	cmp	r3, #47	; 0x2f
    1fcc:	bls	20dc <coda_ascii_parse_uint64+0x1d8>
    1fd0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fd4:	ldrb	r3, [r3]
    1fd8:	cmp	r3, #57	; 0x39
    1fdc:	bhi	20dc <coda_ascii_parse_uint64+0x1d8>
    1fe0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fe4:	ldrb	r3, [r3]
    1fe8:	sub	r3, r3, #48	; 0x30
    1fec:	mov	r2, r3
    1ff0:	asr	r3, r2, #31
    1ff4:	strd	r2, [fp, #-52]	; 0xffffffcc
    1ff8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    1ffc:	mvn	r8, r2
    2000:	mvn	r9, r3
    2004:	mov	r2, #10
    2008:	mov	r3, #0
    200c:	mov	r0, r8
    2010:	mov	r1, r9
    2014:	bl	0 <__aeabi_uldivmod>
    2018:	mov	r2, r0
    201c:	mov	r3, r1
    2020:	mov	r0, r2
    2024:	mov	r1, r3
    2028:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    202c:	cmp	r3, r1
    2030:	cmpeq	r2, r0
    2034:	bls	2050 <coda_ascii_parse_uint64+0x14c>
    2038:	movw	r1, #0
    203c:	movt	r1, #0
    2040:	mvn	r0, #102	; 0x66
    2044:	bl	0 <coda_set_error>
    2048:	mvn	r3, #0
    204c:	b	219c <coda_ascii_parse_uint64+0x298>
    2050:	ldrd	r4, [fp, #-44]	; 0xffffffd4
    2054:	mov	r2, r4
    2058:	mov	r3, r5
    205c:	mov	r0, #0
    2060:	mov	r1, #0
    2064:	lsl	r1, r3, #2
    2068:	orr	r1, r1, r2, lsr #30
    206c:	lsl	r0, r2, #2
    2070:	mov	r2, r0
    2074:	mov	r3, r1
    2078:	adds	r2, r2, r4
    207c:	adc	r3, r3, r5
    2080:	adds	r1, r2, r2
    2084:	str	r1, [fp, #-76]	; 0xffffffb4
    2088:	adc	r3, r3, r3
    208c:	str	r3, [fp, #-72]	; 0xffffffb8
    2090:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    2094:	mov	r0, r2
    2098:	mov	r1, r3
    209c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    20a0:	adds	r6, r0, r2
    20a4:	adc	r7, r1, r3
    20a8:	strd	r6, [fp, #-44]	; 0xffffffd4
    20ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
    20b0:	add	r3, r3, #1
    20b4:	str	r3, [fp, #-36]	; 0xffffffdc
    20b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    20bc:	add	r3, r3, #1
    20c0:	str	r3, [fp, #-56]	; 0xffffffc8
    20c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    20c8:	sub	r3, r3, #1
    20cc:	str	r3, [fp, #-32]	; 0xffffffe0
    20d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    20d4:	cmp	r3, #0
    20d8:	bgt	1fc0 <coda_ascii_parse_uint64+0xbc>
    20dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    20e0:	cmp	r3, #0
    20e4:	bne	2100 <coda_ascii_parse_uint64+0x1fc>
    20e8:	movw	r1, #0
    20ec:	movt	r1, #0
    20f0:	mvn	r0, #102	; 0x66
    20f4:	bl	0 <coda_set_error>
    20f8:	mvn	r3, #0
    20fc:	b	219c <coda_ascii_parse_uint64+0x298>
    2100:	ldr	r3, [fp, #-68]	; 0xffffffbc
    2104:	cmp	r3, #0
    2108:	bne	2184 <coda_ascii_parse_uint64+0x280>
    210c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2110:	cmp	r3, #0
    2114:	beq	2184 <coda_ascii_parse_uint64+0x280>
    2118:	b	2134 <coda_ascii_parse_uint64+0x230>
    211c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2120:	add	r3, r3, #1
    2124:	str	r3, [fp, #-56]	; 0xffffffc8
    2128:	ldr	r3, [fp, #-32]	; 0xffffffe0
    212c:	sub	r3, r3, #1
    2130:	str	r3, [fp, #-32]	; 0xffffffe0
    2134:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2138:	cmp	r3, #0
    213c:	ble	2160 <coda_ascii_parse_uint64+0x25c>
    2140:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2144:	ldrb	r3, [r3]
    2148:	cmp	r3, #32
    214c:	beq	211c <coda_ascii_parse_uint64+0x218>
    2150:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2154:	ldrb	r3, [r3]
    2158:	cmp	r3, #9
    215c:	beq	211c <coda_ascii_parse_uint64+0x218>
    2160:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2164:	cmp	r3, #0
    2168:	beq	2184 <coda_ascii_parse_uint64+0x280>
    216c:	movw	r1, #0
    2170:	movt	r1, #0
    2174:	mvn	r0, #102	; 0x66
    2178:	bl	0 <coda_set_error>
    217c:	mvn	r3, #0
    2180:	b	219c <coda_ascii_parse_uint64+0x298>
    2184:	ldr	r1, [fp, #-64]	; 0xffffffc0
    2188:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    218c:	strd	r2, [r1]
    2190:	ldr	r2, [fp, #-60]	; 0xffffffc4
    2194:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2198:	sub	r3, r2, r3
    219c:	mov	r0, r3
    21a0:	sub	sp, fp, #28
    21a4:	ldrd	r4, [sp]
    21a8:	ldrd	r6, [sp, #8]
    21ac:	ldrd	r8, [sp, #16]
    21b0:	ldr	fp, [sp, #24]
    21b4:	add	sp, sp, #28
    21b8:	pop	{pc}		; (ldr pc, [sp], #4)

000021bc <coda_ascii_parse_double>:
    21bc:	str	fp, [sp, #-8]!
    21c0:	str	lr, [sp, #4]
    21c4:	add	fp, sp, #4
    21c8:	sub	sp, sp, #56	; 0x38
    21cc:	str	r0, [fp, #-48]	; 0xffffffd0
    21d0:	str	r1, [fp, #-52]	; 0xffffffcc
    21d4:	str	r2, [fp, #-56]	; 0xffffffc8
    21d8:	str	r3, [fp, #-60]	; 0xffffffc4
    21dc:	mov	r3, #0
    21e0:	str	r3, [fp, #-36]	; 0xffffffdc
    21e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    21e8:	str	r3, [fp, #-8]
    21ec:	b	2208 <coda_ascii_parse_double+0x4c>
    21f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    21f4:	add	r3, r3, #1
    21f8:	str	r3, [fp, #-48]	; 0xffffffd0
    21fc:	ldr	r3, [fp, #-8]
    2200:	sub	r3, r3, #1
    2204:	str	r3, [fp, #-8]
    2208:	ldr	r3, [fp, #-8]
    220c:	cmp	r3, #0
    2210:	ble	2234 <coda_ascii_parse_double+0x78>
    2214:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2218:	ldrb	r3, [r3]
    221c:	cmp	r3, #32
    2220:	beq	21f0 <coda_ascii_parse_double+0x34>
    2224:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2228:	ldrb	r3, [r3]
    222c:	cmp	r3, #9
    2230:	beq	21f0 <coda_ascii_parse_double+0x34>
    2234:	mov	r3, #0
    2238:	str	r3, [fp, #-20]	; 0xffffffec
    223c:	ldr	r3, [fp, #-8]
    2240:	cmp	r3, #0
    2244:	ble	22a4 <coda_ascii_parse_double+0xe8>
    2248:	ldr	r3, [fp, #-48]	; 0xffffffd0
    224c:	ldrb	r3, [r3]
    2250:	cmp	r3, #43	; 0x2b
    2254:	beq	2268 <coda_ascii_parse_double+0xac>
    2258:	ldr	r3, [fp, #-48]	; 0xffffffd0
    225c:	ldrb	r3, [r3]
    2260:	cmp	r3, #45	; 0x2d
    2264:	bne	22a4 <coda_ascii_parse_double+0xe8>
    2268:	ldr	r3, [fp, #-48]	; 0xffffffd0
    226c:	ldrb	r3, [r3]
    2270:	cmp	r3, #45	; 0x2d
    2274:	moveq	r3, #1
    2278:	movne	r3, #0
    227c:	uxtb	r3, r3
    2280:	str	r3, [fp, #-36]	; 0xffffffdc
    2284:	mov	r3, #1
    2288:	str	r3, [fp, #-20]	; 0xffffffec
    228c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2290:	add	r3, r3, #1
    2294:	str	r3, [fp, #-48]	; 0xffffffd0
    2298:	ldr	r3, [fp, #-8]
    229c:	sub	r3, r3, #1
    22a0:	str	r3, [fp, #-8]
    22a4:	ldr	r3, [fp, #-8]
    22a8:	cmp	r3, #2
    22ac:	ble	246c <coda_ascii_parse_double+0x2b0>
    22b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22b4:	ldrb	r3, [r3]
    22b8:	cmp	r3, #78	; 0x4e
    22bc:	beq	22d0 <coda_ascii_parse_double+0x114>
    22c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22c4:	ldrb	r3, [r3]
    22c8:	cmp	r3, #110	; 0x6e
    22cc:	bne	2388 <coda_ascii_parse_double+0x1cc>
    22d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22d4:	add	r3, r3, #1
    22d8:	ldrb	r3, [r3]
    22dc:	cmp	r3, #65	; 0x41
    22e0:	beq	22f8 <coda_ascii_parse_double+0x13c>
    22e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22e8:	add	r3, r3, #1
    22ec:	ldrb	r3, [r3]
    22f0:	cmp	r3, #97	; 0x61
    22f4:	bne	2388 <coda_ascii_parse_double+0x1cc>
    22f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    22fc:	add	r3, r3, #2
    2300:	ldrb	r3, [r3]
    2304:	cmp	r3, #78	; 0x4e
    2308:	beq	2320 <coda_ascii_parse_double+0x164>
    230c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2310:	add	r3, r3, #2
    2314:	ldrb	r3, [r3]
    2318:	cmp	r3, #110	; 0x6e
    231c:	bne	2388 <coda_ascii_parse_double+0x1cc>
    2320:	ldr	r3, [fp, #-20]	; 0xffffffec
    2324:	cmp	r3, #0
    2328:	bne	2388 <coda_ascii_parse_double+0x1cc>
    232c:	ldr	r3, [fp, #-8]
    2330:	sub	r3, r3, #3
    2334:	str	r3, [fp, #-8]
    2338:	ldr	r3, [fp, #-60]	; 0xffffffc4
    233c:	cmp	r3, #0
    2340:	bne	2368 <coda_ascii_parse_double+0x1ac>
    2344:	ldr	r3, [fp, #-8]
    2348:	cmp	r3, #0
    234c:	beq	2368 <coda_ascii_parse_double+0x1ac>
    2350:	movw	r1, #0
    2354:	movt	r1, #0
    2358:	mvn	r0, #102	; 0x66
    235c:	bl	0 <coda_set_error>
    2360:	mvn	r3, #0
    2364:	b	2868 <coda_ascii_parse_double+0x6ac>
    2368:	bl	0 <coda_NaN>
    236c:	vmov.f64	d7, d0
    2370:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2374:	vstr	d7, [r3]
    2378:	ldr	r2, [fp, #-52]	; 0xffffffcc
    237c:	ldr	r3, [fp, #-8]
    2380:	sub	r3, r2, r3
    2384:	b	2868 <coda_ascii_parse_double+0x6ac>
    2388:	ldr	r3, [fp, #-48]	; 0xffffffd0
    238c:	ldrb	r3, [r3]
    2390:	cmp	r3, #73	; 0x49
    2394:	beq	23a8 <coda_ascii_parse_double+0x1ec>
    2398:	ldr	r3, [fp, #-48]	; 0xffffffd0
    239c:	ldrb	r3, [r3]
    23a0:	cmp	r3, #105	; 0x69
    23a4:	bne	246c <coda_ascii_parse_double+0x2b0>
    23a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23ac:	add	r3, r3, #1
    23b0:	ldrb	r3, [r3]
    23b4:	cmp	r3, #78	; 0x4e
    23b8:	beq	23d0 <coda_ascii_parse_double+0x214>
    23bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23c0:	add	r3, r3, #1
    23c4:	ldrb	r3, [r3]
    23c8:	cmp	r3, #110	; 0x6e
    23cc:	bne	246c <coda_ascii_parse_double+0x2b0>
    23d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23d4:	add	r3, r3, #2
    23d8:	ldrb	r3, [r3]
    23dc:	cmp	r3, #70	; 0x46
    23e0:	beq	23f8 <coda_ascii_parse_double+0x23c>
    23e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    23e8:	add	r3, r3, #2
    23ec:	ldrb	r3, [r3]
    23f0:	cmp	r3, #102	; 0x66
    23f4:	bne	246c <coda_ascii_parse_double+0x2b0>
    23f8:	ldr	r3, [fp, #-8]
    23fc:	sub	r3, r3, #3
    2400:	str	r3, [fp, #-8]
    2404:	ldr	r3, [fp, #-60]	; 0xffffffc4
    2408:	cmp	r3, #0
    240c:	bne	2434 <coda_ascii_parse_double+0x278>
    2410:	ldr	r3, [fp, #-8]
    2414:	cmp	r3, #0
    2418:	beq	2434 <coda_ascii_parse_double+0x278>
    241c:	movw	r1, #0
    2420:	movt	r1, #0
    2424:	mvn	r0, #102	; 0x66
    2428:	bl	0 <coda_set_error>
    242c:	mvn	r3, #0
    2430:	b	2868 <coda_ascii_parse_double+0x6ac>
    2434:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2438:	cmp	r3, #0
    243c:	beq	244c <coda_ascii_parse_double+0x290>
    2440:	bl	0 <coda_MinInf>
    2444:	vmov.f64	d7, d0
    2448:	b	2454 <coda_ascii_parse_double+0x298>
    244c:	bl	0 <coda_PlusInf>
    2450:	vmov.f64	d7, d0
    2454:	ldr	r3, [fp, #-56]	; 0xffffffc8
    2458:	vstr	d7, [r3]
    245c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2460:	ldr	r3, [fp, #-8]
    2464:	sub	r3, r2, r3
    2468:	b	2868 <coda_ascii_parse_double+0x6ac>
    246c:	mov	r2, #0
    2470:	mov	r3, #0
    2474:	strd	r2, [fp, #-28]	; 0xffffffe4
    2478:	mov	r3, #0
    247c:	str	r3, [fp, #-32]	; 0xffffffe0
    2480:	mov	r3, #0
    2484:	str	r3, [fp, #-12]
    2488:	b	24f8 <coda_ascii_parse_double+0x33c>
    248c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2490:	ldrb	r3, [r3]
    2494:	cmp	r3, #47	; 0x2f
    2498:	bls	2504 <coda_ascii_parse_double+0x348>
    249c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24a0:	ldrb	r3, [r3]
    24a4:	cmp	r3, #57	; 0x39
    24a8:	bhi	2504 <coda_ascii_parse_double+0x348>
    24ac:	vldr	d7, [fp, #-28]	; 0xffffffe4
    24b0:	vldr	d6, [pc, #968]	; 2880 <coda_ascii_parse_double+0x6c4>
    24b4:	vmul.f64	d6, d7, d6
    24b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24bc:	ldrb	r3, [r3]
    24c0:	sub	r3, r3, #48	; 0x30
    24c4:	vmov	s15, r3
    24c8:	vcvt.f64.s32	d7, s15
    24cc:	vadd.f64	d7, d6, d7
    24d0:	vstr	d7, [fp, #-28]	; 0xffffffe4
    24d4:	ldr	r3, [fp, #-12]
    24d8:	add	r3, r3, #1
    24dc:	str	r3, [fp, #-12]
    24e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    24e4:	add	r3, r3, #1
    24e8:	str	r3, [fp, #-48]	; 0xffffffd0
    24ec:	ldr	r3, [fp, #-8]
    24f0:	sub	r3, r3, #1
    24f4:	str	r3, [fp, #-8]
    24f8:	ldr	r3, [fp, #-8]
    24fc:	cmp	r3, #0
    2500:	bgt	248c <coda_ascii_parse_double+0x2d0>
    2504:	ldr	r3, [fp, #-8]
    2508:	cmp	r3, #0
    250c:	ble	25c0 <coda_ascii_parse_double+0x404>
    2510:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2514:	ldrb	r3, [r3]
    2518:	cmp	r3, #46	; 0x2e
    251c:	bne	25c0 <coda_ascii_parse_double+0x404>
    2520:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2524:	add	r3, r3, #1
    2528:	str	r3, [fp, #-48]	; 0xffffffd0
    252c:	ldr	r3, [fp, #-8]
    2530:	sub	r3, r3, #1
    2534:	str	r3, [fp, #-8]
    2538:	b	25b4 <coda_ascii_parse_double+0x3f8>
    253c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2540:	ldrb	r3, [r3]
    2544:	cmp	r3, #47	; 0x2f
    2548:	bls	25c0 <coda_ascii_parse_double+0x404>
    254c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2550:	ldrb	r3, [r3]
    2554:	cmp	r3, #57	; 0x39
    2558:	bhi	25c0 <coda_ascii_parse_double+0x404>
    255c:	vldr	d7, [fp, #-28]	; 0xffffffe4
    2560:	vldr	d6, [pc, #792]	; 2880 <coda_ascii_parse_double+0x6c4>
    2564:	vmul.f64	d6, d7, d6
    2568:	ldr	r3, [fp, #-48]	; 0xffffffd0
    256c:	ldrb	r3, [r3]
    2570:	sub	r3, r3, #48	; 0x30
    2574:	vmov	s15, r3
    2578:	vcvt.f64.s32	d7, s15
    257c:	vadd.f64	d7, d6, d7
    2580:	vstr	d7, [fp, #-28]	; 0xffffffe4
    2584:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2588:	sub	r3, r3, #1
    258c:	str	r3, [fp, #-32]	; 0xffffffe0
    2590:	ldr	r3, [fp, #-12]
    2594:	add	r3, r3, #1
    2598:	str	r3, [fp, #-12]
    259c:	ldr	r3, [fp, #-48]	; 0xffffffd0
    25a0:	add	r3, r3, #1
    25a4:	str	r3, [fp, #-48]	; 0xffffffd0
    25a8:	ldr	r3, [fp, #-8]
    25ac:	sub	r3, r3, #1
    25b0:	str	r3, [fp, #-8]
    25b4:	ldr	r3, [fp, #-8]
    25b8:	cmp	r3, #0
    25bc:	bgt	253c <coda_ascii_parse_double+0x380>
    25c0:	ldr	r3, [fp, #-12]
    25c4:	cmp	r3, #0
    25c8:	bne	25e4 <coda_ascii_parse_double+0x428>
    25cc:	movw	r1, #0
    25d0:	movt	r1, #0
    25d4:	mvn	r0, #102	; 0x66
    25d8:	bl	0 <coda_set_error>
    25dc:	mvn	r3, #0
    25e0:	b	2868 <coda_ascii_parse_double+0x6ac>
    25e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    25e8:	cmp	r3, #0
    25ec:	beq	25fc <coda_ascii_parse_double+0x440>
    25f0:	vldr	d7, [fp, #-28]	; 0xffffffe4
    25f4:	vneg.f64	d7, d7
    25f8:	vstr	d7, [fp, #-28]	; 0xffffffe4
    25fc:	ldr	r3, [fp, #-8]
    2600:	cmp	r3, #0
    2604:	ble	27a4 <coda_ascii_parse_double+0x5e8>
    2608:	ldr	r3, [fp, #-48]	; 0xffffffd0
    260c:	ldrb	r3, [r3]
    2610:	cmp	r3, #100	; 0x64
    2614:	beq	2648 <coda_ascii_parse_double+0x48c>
    2618:	ldr	r3, [fp, #-48]	; 0xffffffd0
    261c:	ldrb	r3, [r3]
    2620:	cmp	r3, #68	; 0x44
    2624:	beq	2648 <coda_ascii_parse_double+0x48c>
    2628:	ldr	r3, [fp, #-48]	; 0xffffffd0
    262c:	ldrb	r3, [r3]
    2630:	cmp	r3, #101	; 0x65
    2634:	beq	2648 <coda_ascii_parse_double+0x48c>
    2638:	ldr	r3, [fp, #-48]	; 0xffffffd0
    263c:	ldrb	r3, [r3]
    2640:	cmp	r3, #69	; 0x45
    2644:	bne	27a4 <coda_ascii_parse_double+0x5e8>
    2648:	ldr	r3, [fp, #-48]	; 0xffffffd0
    264c:	add	r3, r3, #1
    2650:	str	r3, [fp, #-48]	; 0xffffffd0
    2654:	ldr	r3, [fp, #-8]
    2658:	sub	r3, r3, #1
    265c:	str	r3, [fp, #-8]
    2660:	mov	r3, #0
    2664:	str	r3, [fp, #-36]	; 0xffffffdc
    2668:	ldr	r3, [fp, #-8]
    266c:	cmp	r3, #0
    2670:	ble	26c8 <coda_ascii_parse_double+0x50c>
    2674:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2678:	ldrb	r3, [r3]
    267c:	cmp	r3, #43	; 0x2b
    2680:	beq	2694 <coda_ascii_parse_double+0x4d8>
    2684:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2688:	ldrb	r3, [r3]
    268c:	cmp	r3, #45	; 0x2d
    2690:	bne	26c8 <coda_ascii_parse_double+0x50c>
    2694:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2698:	ldrb	r3, [r3]
    269c:	cmp	r3, #45	; 0x2d
    26a0:	moveq	r3, #1
    26a4:	movne	r3, #0
    26a8:	uxtb	r3, r3
    26ac:	str	r3, [fp, #-36]	; 0xffffffdc
    26b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    26b4:	add	r3, r3, #1
    26b8:	str	r3, [fp, #-48]	; 0xffffffd0
    26bc:	ldr	r3, [fp, #-8]
    26c0:	sub	r3, r3, #1
    26c4:	str	r3, [fp, #-8]
    26c8:	mov	r3, #0
    26cc:	str	r3, [fp, #-40]	; 0xffffffd8
    26d0:	mov	r3, #0
    26d4:	str	r3, [fp, #-16]
    26d8:	b	274c <coda_ascii_parse_double+0x590>
    26dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
    26e0:	ldrb	r3, [r3]
    26e4:	cmp	r3, #47	; 0x2f
    26e8:	bls	2758 <coda_ascii_parse_double+0x59c>
    26ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
    26f0:	ldrb	r3, [r3]
    26f4:	cmp	r3, #57	; 0x39
    26f8:	bhi	2758 <coda_ascii_parse_double+0x59c>
    26fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    2700:	mov	r3, r2
    2704:	lsl	r3, r3, #2
    2708:	add	r3, r3, r2
    270c:	lsl	r3, r3, #1
    2710:	mov	r2, r3
    2714:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2718:	ldrb	r3, [r3]
    271c:	sub	r3, r3, #48	; 0x30
    2720:	add	r3, r2, r3
    2724:	str	r3, [fp, #-40]	; 0xffffffd8
    2728:	ldr	r3, [fp, #-16]
    272c:	add	r3, r3, #1
    2730:	str	r3, [fp, #-16]
    2734:	ldr	r3, [fp, #-48]	; 0xffffffd0
    2738:	add	r3, r3, #1
    273c:	str	r3, [fp, #-48]	; 0xffffffd0
    2740:	ldr	r3, [fp, #-8]
    2744:	sub	r3, r3, #1
    2748:	str	r3, [fp, #-8]
    274c:	ldr	r3, [fp, #-8]
    2750:	cmp	r3, #0
    2754:	bgt	26dc <coda_ascii_parse_double+0x520>
    2758:	ldr	r3, [fp, #-16]
    275c:	cmp	r3, #0
    2760:	bne	277c <coda_ascii_parse_double+0x5c0>
    2764:	movw	r1, #0
    2768:	movt	r1, #0
    276c:	mvn	r0, #102	; 0x66
    2770:	bl	0 <coda_set_error>
    2774:	mvn	r3, #0
    2778:	b	2868 <coda_ascii_parse_double+0x6ac>
    277c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2780:	cmp	r3, #0
    2784:	beq	2794 <coda_ascii_parse_double+0x5d8>
    2788:	ldr	r3, [fp, #-40]	; 0xffffffd8
    278c:	rsb	r3, r3, #0
    2790:	str	r3, [fp, #-40]	; 0xffffffd8
    2794:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2798:	ldr	r3, [fp, #-40]	; 0xffffffd8
    279c:	add	r3, r2, r3
    27a0:	str	r3, [fp, #-32]	; 0xffffffe0
    27a4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    27a8:	cmp	r3, #0
    27ac:	bne	2828 <coda_ascii_parse_double+0x66c>
    27b0:	ldr	r3, [fp, #-8]
    27b4:	cmp	r3, #0
    27b8:	beq	2828 <coda_ascii_parse_double+0x66c>
    27bc:	b	27d8 <coda_ascii_parse_double+0x61c>
    27c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
    27c4:	add	r3, r3, #1
    27c8:	str	r3, [fp, #-48]	; 0xffffffd0
    27cc:	ldr	r3, [fp, #-8]
    27d0:	sub	r3, r3, #1
    27d4:	str	r3, [fp, #-8]
    27d8:	ldr	r3, [fp, #-8]
    27dc:	cmp	r3, #0
    27e0:	ble	2804 <coda_ascii_parse_double+0x648>
    27e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    27e8:	ldrb	r3, [r3]
    27ec:	cmp	r3, #32
    27f0:	beq	27c0 <coda_ascii_parse_double+0x604>
    27f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    27f8:	ldrb	r3, [r3]
    27fc:	cmp	r3, #9
    2800:	beq	27c0 <coda_ascii_parse_double+0x604>
    2804:	ldr	r3, [fp, #-8]
    2808:	cmp	r3, #0
    280c:	beq	2828 <coda_ascii_parse_double+0x66c>
    2810:	movw	r1, #0
    2814:	movt	r1, #0
    2818:	mvn	r0, #102	; 0x66
    281c:	bl	0 <coda_set_error>
    2820:	mvn	r3, #0
    2824:	b	2868 <coda_ascii_parse_double+0x6ac>
    2828:	ldr	r3, [fp, #-32]	; 0xffffffe0
    282c:	cmp	r3, #0
    2830:	beq	2850 <coda_ascii_parse_double+0x694>
    2834:	ldr	r0, [fp, #-32]	; 0xffffffe0
    2838:	vldr	d0, [pc, #64]	; 2880 <coda_ascii_parse_double+0x6c4>
    283c:	bl	1104 <ipow>
    2840:	vmov.f64	d6, d0
    2844:	vldr	d7, [fp, #-28]	; 0xffffffe4
    2848:	vmul.f64	d7, d7, d6
    284c:	vstr	d7, [fp, #-28]	; 0xffffffe4
    2850:	ldr	r1, [fp, #-56]	; 0xffffffc8
    2854:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    2858:	strd	r2, [r1]
    285c:	ldr	r2, [fp, #-52]	; 0xffffffcc
    2860:	ldr	r3, [fp, #-8]
    2864:	sub	r3, r2, r3
    2868:	mov	r0, r3
    286c:	sub	sp, fp, #4
    2870:	ldr	fp, [sp]
    2874:	add	sp, sp, #4
    2878:	pop	{pc}		; (ldr pc, [sp], #4)
    287c:	nop	{0}
    2880:	.word	0x00000000
    2884:	.word	0x40240000

00002888 <coda_ascii_cursor_set_asciilines>:
    2888:	str	fp, [sp, #-8]!
    288c:	str	lr, [sp, #4]
    2890:	add	fp, sp, #4
    2894:	sub	sp, sp, #24
    2898:	str	r0, [fp, #-24]	; 0xffffffe8
    289c:	str	r1, [fp, #-28]	; 0xffffffe4
    28a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    28a4:	str	r3, [fp, #-8]
    28a8:	ldr	r3, [fp, #-8]
    28ac:	ldr	r3, [r3, #68]	; 0x44
    28b0:	cmp	r3, #0
    28b4:	bne	28d4 <coda_ascii_cursor_set_asciilines+0x4c>
    28b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    28bc:	bl	0 <coda_ascii_init_asciilines>
    28c0:	mov	r3, r0
    28c4:	cmp	r3, #0
    28c8:	beq	28d4 <coda_ascii_cursor_set_asciilines+0x4c>
    28cc:	mvn	r3, #0
    28d0:	b	29ec <coda_ascii_cursor_set_asciilines+0x164>
    28d4:	ldr	r3, [fp, #-8]
    28d8:	ldr	r3, [r3, #76]	; 0x4c
    28dc:	cmp	r3, #0
    28e0:	bne	29a4 <coda_ascii_cursor_set_asciilines+0x11c>
    28e4:	mov	r0, #0
    28e8:	bl	0 <coda_type_array_new>
    28ec:	str	r0, [fp, #-12]
    28f0:	ldr	r3, [fp, #-12]
    28f4:	cmp	r3, #0
    28f8:	bne	2904 <coda_ascii_cursor_set_asciilines+0x7c>
    28fc:	mvn	r3, #0
    2900:	b	29ec <coda_ascii_cursor_set_asciilines+0x164>
    2904:	ldr	r3, [fp, #-8]
    2908:	ldr	r3, [r3, #64]	; 0x40
    290c:	mov	r1, r3
    2910:	ldr	r0, [fp, #-12]
    2914:	bl	0 <coda_type_array_add_fixed_dimension>
    2918:	mov	r3, r0
    291c:	cmp	r3, #0
    2920:	beq	2934 <coda_ascii_cursor_set_asciilines+0xac>
    2924:	ldr	r0, [fp, #-12]
    2928:	bl	0 <coda_type_release>
    292c:	mvn	r3, #0
    2930:	b	29ec <coda_ascii_cursor_set_asciilines+0x164>
    2934:	mov	r0, #0
    2938:	bl	0 <coda_type_text_new>
    293c:	str	r0, [fp, #-16]
    2940:	ldr	r3, [fp, #-16]
    2944:	cmp	r3, #0
    2948:	bne	295c <coda_ascii_cursor_set_asciilines+0xd4>
    294c:	ldr	r0, [fp, #-12]
    2950:	bl	0 <coda_type_release>
    2954:	mvn	r3, #0
    2958:	b	29ec <coda_ascii_cursor_set_asciilines+0x164>
    295c:	mov	r1, #2
    2960:	ldr	r0, [fp, #-16]
    2964:	bl	0 <coda_type_text_set_special_text_type>
    2968:	ldr	r1, [fp, #-16]
    296c:	ldr	r0, [fp, #-12]
    2970:	bl	0 <coda_type_array_set_base_type>
    2974:	mov	r3, r0
    2978:	cmp	r3, #0
    297c:	beq	2998 <coda_ascii_cursor_set_asciilines+0x110>
    2980:	ldr	r0, [fp, #-12]
    2984:	bl	0 <coda_type_release>
    2988:	ldr	r0, [fp, #-16]
    298c:	bl	0 <coda_type_release>
    2990:	mvn	r3, #0
    2994:	b	29ec <coda_ascii_cursor_set_asciilines+0x164>
    2998:	ldr	r3, [fp, #-8]
    299c:	ldr	r2, [fp, #-12]
    29a0:	str	r2, [r3, #76]	; 0x4c
    29a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    29ac:	str	r2, [r3]
    29b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29b4:	mov	r2, #1
    29b8:	str	r2, [r3, #4]
    29bc:	ldr	r3, [fp, #-8]
    29c0:	ldr	r2, [r3, #76]	; 0x4c
    29c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29c8:	str	r2, [r3, #8]
    29cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    29d0:	mvn	r2, #0
    29d4:	str	r2, [r3, #12]
    29d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    29dc:	mov	r2, #0
    29e0:	mov	r3, #0
    29e4:	strd	r2, [r1, #16]
    29e8:	mov	r3, #0
    29ec:	mov	r0, r3
    29f0:	sub	sp, fp, #4
    29f4:	ldr	fp, [sp]
    29f8:	add	sp, sp, #4
    29fc:	pop	{pc}		; (ldr pc, [sp], #4)

00002a00 <coda_ascii_cursor_get_string_length>:
    2a00:	str	fp, [sp, #-8]!
    2a04:	str	lr, [sp, #4]
    2a08:	add	fp, sp, #4
    2a0c:	sub	sp, sp, #16
    2a10:	str	r0, [fp, #-16]
    2a14:	str	r1, [fp, #-20]	; 0xffffffec
    2a18:	sub	r3, fp, #12
    2a1c:	mov	r1, r3
    2a20:	ldr	r0, [fp, #-16]
    2a24:	bl	2a94 <coda_ascii_cursor_get_bit_size>
    2a28:	mov	r3, r0
    2a2c:	cmp	r3, #0
    2a30:	beq	2a3c <coda_ascii_cursor_get_string_length+0x3c>
    2a34:	mvn	r3, #0
    2a38:	b	2a80 <coda_ascii_cursor_get_string_length+0x80>
    2a3c:	ldrd	r2, [fp, #-12]
    2a40:	cmp	r2, #0
    2a44:	sbcs	r3, r3, #0
    2a48:	bge	2a5c <coda_ascii_cursor_get_string_length+0x5c>
    2a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2a50:	mvn	r2, #0
    2a54:	str	r2, [r3]
    2a58:	b	2a7c <coda_ascii_cursor_get_string_length+0x7c>
    2a5c:	ldrd	r0, [fp, #-12]
    2a60:	mov	r2, #0
    2a64:	mov	r3, #0
    2a68:	lsr	r2, r0, #3
    2a6c:	orr	r2, r2, r1, lsl #29
    2a70:	asr	r3, r1, #3
    2a74:	ldr	r3, [fp, #-20]	; 0xffffffec
    2a78:	str	r2, [r3]
    2a7c:	mov	r3, #0
    2a80:	mov	r0, r3
    2a84:	sub	sp, fp, #4
    2a88:	ldr	fp, [sp]
    2a8c:	add	sp, sp, #4
    2a90:	pop	{pc}		; (ldr pc, [sp], #4)

00002a94 <coda_ascii_cursor_get_bit_size>:
    2a94:	strd	r4, [sp, #-32]!	; 0xffffffe0
    2a98:	strd	r6, [sp, #8]
    2a9c:	strd	r8, [sp, #16]
    2aa0:	str	fp, [sp, #24]
    2aa4:	str	lr, [sp, #28]
    2aa8:	add	fp, sp, #28
    2aac:	sub	sp, sp, #928	; 0x3a0
    2ab0:	str	r0, [fp, #-800]	; 0xfffffce0
    2ab4:	str	r1, [fp, #-804]	; 0xfffffcdc
    2ab8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2abc:	ldr	r3, [r3, #4]
    2ac0:	sub	r3, r3, #1
    2ac4:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2ac8:	lsl	r3, r3, #4
    2acc:	add	r3, r2, r3
    2ad0:	ldr	r3, [r3, #8]
    2ad4:	ldr	r3, [r3]
    2ad8:	cmp	r3, #99	; 0x63
    2adc:	bhi	2b00 <coda_ascii_cursor_get_bit_size+0x6c>
    2ae0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2ae4:	ldr	r3, [r3, #4]
    2ae8:	sub	r3, r3, #1
    2aec:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2af0:	lsl	r3, r3, #4
    2af4:	add	r3, r2, r3
    2af8:	ldr	r3, [r3, #8]
    2afc:	b	2b20 <coda_ascii_cursor_get_bit_size+0x8c>
    2b00:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2b04:	ldr	r3, [r3, #4]
    2b08:	sub	r3, r3, #1
    2b0c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2b10:	lsl	r3, r3, #4
    2b14:	add	r3, r2, r3
    2b18:	ldr	r3, [r3, #8]
    2b1c:	ldr	r3, [r3, #4]
    2b20:	str	r3, [fp, #-72]	; 0xffffffb8
    2b24:	mov	r3, #0
    2b28:	str	r3, [fp, #-32]	; 0xffffffe0
    2b2c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2b30:	ldr	r3, [r3, #4]
    2b34:	sub	r3, r3, #1
    2b38:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2b3c:	add	r3, r3, #1
    2b40:	lsl	r3, r3, #4
    2b44:	add	r3, r2, r3
    2b48:	ldrd	r2, [r3]
    2b4c:	strd	r2, [fp, #-84]	; 0xffffffac
    2b50:	mvn	r3, #0
    2b54:	str	r3, [fp, #-36]	; 0xffffffdc
    2b58:	mov	r3, #0
    2b5c:	str	r3, [fp, #-40]	; 0xffffffd8
    2b60:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b64:	ldrd	r2, [r3, #24]
    2b68:	cmp	r2, #0
    2b6c:	sbcs	r3, r3, #0
    2b70:	blt	2b8c <coda_ascii_cursor_get_bit_size+0xf8>
    2b74:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b78:	ldrd	r2, [r3, #24]
    2b7c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2b80:	strd	r2, [r1]
    2b84:	mov	r3, #0
    2b88:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2b8c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2b90:	ldr	r3, [r3, #8]
    2b94:	cmp	r3, #0
    2b98:	beq	2bac <coda_ascii_cursor_get_bit_size+0x118>
    2b9c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2ba0:	ldr	r3, [r3, #8]
    2ba4:	cmp	r3, #1
    2ba8:	bne	2bc0 <coda_ascii_cursor_get_bit_size+0x12c>
    2bac:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2bb0:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2bb4:	bl	0 <coda_ascbin_cursor_get_bit_size>
    2bb8:	mov	r3, r0
    2bbc:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2bc0:	sub	r1, fp, #148	; 0x94
    2bc4:	mvn	r2, #0
    2bc8:	mvn	r3, #0
    2bcc:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2bd0:	bl	11b8 <get_bit_size_boundary>
    2bd4:	mov	r3, r0
    2bd8:	cmp	r3, #0
    2bdc:	beq	2be8 <coda_ascii_cursor_get_bit_size+0x154>
    2be0:	mvn	r3, #0
    2be4:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2be8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2bec:	ldr	r3, [r3, #8]
    2bf0:	cmp	r3, #2
    2bf4:	beq	2c08 <coda_ascii_cursor_get_bit_size+0x174>
    2bf8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2bfc:	ldr	r3, [r3, #8]
    2c00:	cmp	r3, #3
    2c04:	bne	2c44 <coda_ascii_cursor_get_bit_size+0x1b0>
    2c08:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c0c:	ldr	r3, [r3, #52]	; 0x34
    2c10:	str	r3, [fp, #-32]	; 0xffffffe0
    2c14:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2c18:	cmp	r3, #0
    2c1c:	bne	2c30 <coda_ascii_cursor_get_bit_size+0x19c>
    2c20:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c24:	ldr	r3, [r3, #32]
    2c28:	cmp	r3, #0
    2c2c:	bne	2c38 <coda_ascii_cursor_get_bit_size+0x1a4>
    2c30:	mov	r3, #1
    2c34:	b	2c3c <coda_ascii_cursor_get_bit_size+0x1a8>
    2c38:	mov	r3, #0
    2c3c:	str	r3, [fp, #-40]	; 0xffffffd8
    2c40:	b	2d28 <coda_ascii_cursor_get_bit_size+0x294>
    2c44:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c48:	ldr	r3, [r3, #8]
    2c4c:	cmp	r3, #4
    2c50:	bne	2ca8 <coda_ascii_cursor_get_bit_size+0x214>
    2c54:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c58:	ldr	r3, [r3, #32]
    2c5c:	cmp	r3, #0
    2c60:	bne	2c88 <coda_ascii_cursor_get_bit_size+0x1f4>
    2c64:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c68:	ldr	r3, [r3, #44]	; 0x2c
    2c6c:	cmp	r3, #0
    2c70:	bne	2c88 <coda_ascii_cursor_get_bit_size+0x1f4>
    2c74:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2c78:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2c7c:	strd	r2, [r1]
    2c80:	mov	r3, #0
    2c84:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2c88:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2c8c:	ldr	r3, [r3, #32]
    2c90:	cmp	r3, #0
    2c94:	moveq	r3, #1
    2c98:	movne	r3, #0
    2c9c:	uxtb	r3, r3
    2ca0:	str	r3, [fp, #-40]	; 0xffffffd8
    2ca4:	b	2d28 <coda_ascii_cursor_get_bit_size+0x294>
    2ca8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2cac:	ldr	r3, [r3, #8]
    2cb0:	cmp	r3, #6
    2cb4:	bne	2d28 <coda_ascii_cursor_get_bit_size+0x294>
    2cb8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2cbc:	ldr	r3, [r3, #40]	; 0x28
    2cc0:	cmp	r3, #2
    2cc4:	bne	2d28 <coda_ascii_cursor_get_bit_size+0x294>
    2cc8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2ccc:	ldr	r3, [r3, #44]	; 0x2c
    2cd0:	str	r3, [fp, #-88]	; 0xffffffa8
    2cd4:	ldr	r3, [fp, #-88]	; 0xffffffa8
    2cd8:	ldr	r3, [r3, #8]
    2cdc:	cmp	r3, #4
    2ce0:	beq	2d04 <coda_ascii_cursor_get_bit_size+0x270>
    2ce4:	movw	r3, #0
    2ce8:	movt	r3, #0
    2cec:	movw	r2, #693	; 0x2b5
    2cf0:	movw	r1, #0
    2cf4:	movt	r1, #0
    2cf8:	movw	r0, #0
    2cfc:	movt	r0, #0
    2d00:	bl	0 <__assert_fail>
    2d04:	ldr	r3, [fp, #-88]	; 0xffffffa8
    2d08:	ldr	r3, [r3, #44]	; 0x2c
    2d0c:	cmp	r3, #0
    2d10:	bne	2d28 <coda_ascii_cursor_get_bit_size+0x294>
    2d14:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2d18:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2d1c:	strd	r2, [r1]
    2d20:	mov	r3, #0
    2d24:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2d28:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2d2c:	cmp	r3, #0
    2d30:	beq	2de0 <coda_ascii_cursor_get_bit_size+0x34c>
    2d34:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2d38:	mov	r0, #0
    2d3c:	mov	r1, #0
    2d40:	lsr	r0, r2, #3
    2d44:	orr	r0, r0, r3, lsl #29
    2d48:	asr	r1, r3, #3
    2d4c:	cmp	r0, #64	; 0x40
    2d50:	sbcs	r3, r1, #0
    2d54:	bge	2d7c <coda_ascii_cursor_get_bit_size+0x2e8>
    2d58:	ldrd	r2, [fp, #-148]	; 0xffffff6c
    2d5c:	mov	r0, #0
    2d60:	mov	r1, #0
    2d64:	lsr	r0, r2, #3
    2d68:	orr	r0, r0, r3, lsl #29
    2d6c:	asr	r1, r3, #3
    2d70:	mov	r3, r0
    2d74:	str	r3, [fp, #-36]	; 0xffffffdc
    2d78:	b	2d84 <coda_ascii_cursor_get_bit_size+0x2f0>
    2d7c:	mov	r3, #64	; 0x40
    2d80:	str	r3, [fp, #-36]	; 0xffffffdc
    2d84:	ldr	r3, [fp, #-800]	; 0xfffffce0
    2d88:	ldr	ip, [r3]
    2d8c:	ldrd	r2, [fp, #-84]	; 0xffffffac
    2d90:	mov	r4, #0
    2d94:	mov	r5, #0
    2d98:	lsr	r4, r2, #3
    2d9c:	orr	r4, r4, r3, lsl #29
    2da0:	asr	r5, r3, #3
    2da4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2da8:	mov	r0, r3
    2dac:	asr	r1, r0, #31
    2db0:	sub	r3, fp, #212	; 0xd4
    2db4:	str	r3, [sp, #8]
    2db8:	strd	r0, [sp]
    2dbc:	mov	r2, r4
    2dc0:	mov	r3, r5
    2dc4:	mov	r0, ip
    2dc8:	bl	204 <read_bytes_in_bounds>
    2dcc:	mov	r3, r0
    2dd0:	cmp	r3, #0
    2dd4:	beq	2de0 <coda_ascii_cursor_get_bit_size+0x34c>
    2dd8:	mvn	r3, #0
    2ddc:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2de0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    2de4:	cmp	r3, #0
    2de8:	beq	2e14 <coda_ascii_cursor_get_bit_size+0x380>
    2dec:	sub	r0, fp, #212	; 0xd4
    2df0:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2df4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2df8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2dfc:	bl	170c <parse_mapping_size>
    2e00:	mov	r3, r0
    2e04:	cmp	r3, #0
    2e08:	beq	2e14 <coda_ascii_cursor_get_bit_size+0x380>
    2e0c:	mov	r3, #0
    2e10:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2e14:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2e18:	ldr	r3, [r3, #8]
    2e1c:	cmp	r3, #6
    2e20:	bne	2e74 <coda_ascii_cursor_get_bit_size+0x3e0>
    2e24:	ldr	r2, [fp, #-800]	; 0xfffffce0
    2e28:	sub	r3, fp, #796	; 0x31c
    2e2c:	mov	r1, r2
    2e30:	mov	r2, #520	; 0x208
    2e34:	mov	r0, r3
    2e38:	bl	0 <memcpy>
    2e3c:	sub	r3, fp, #796	; 0x31c
    2e40:	mov	r0, r3
    2e44:	bl	0 <coda_cursor_use_base_type_of_special_type>
    2e48:	mov	r3, r0
    2e4c:	cmp	r3, #0
    2e50:	beq	2e5c <coda_ascii_cursor_get_bit_size+0x3c8>
    2e54:	mvn	r3, #0
    2e58:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2e5c:	sub	r3, fp, #796	; 0x31c
    2e60:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2e64:	mov	r0, r3
    2e68:	bl	0 <coda_cursor_get_bit_size>
    2e6c:	mov	r3, r0
    2e70:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2e74:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2e78:	ldr	r3, [r3, #32]
    2e7c:	cmp	r3, #0
    2e80:	beq	2f54 <coda_ascii_cursor_get_bit_size+0x4c0>
    2e84:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2e88:	ldr	r3, [r3, #32]
    2e8c:	ldr	r2, [fp, #-804]	; 0xfffffcdc
    2e90:	ldr	r1, [fp, #-800]	; 0xfffffce0
    2e94:	mov	r0, r3
    2e98:	bl	0 <coda_expression_eval_integer>
    2e9c:	mov	r3, r0
    2ea0:	cmp	r3, #0
    2ea4:	beq	2ec4 <coda_ascii_cursor_get_bit_size+0x430>
    2ea8:	movw	r0, #0
    2eac:	movt	r0, #0
    2eb0:	bl	0 <coda_add_error_message>
    2eb4:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2eb8:	bl	0 <coda_cursor_add_to_error_message>
    2ebc:	mvn	r3, #0
    2ec0:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2ec4:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2ec8:	ldrd	r2, [r3, #24]
    2ecc:	mvn	r0, #7
    2ed0:	mvn	r1, #0
    2ed4:	cmp	r3, r1
    2ed8:	cmpeq	r2, r0
    2edc:	bne	2f04 <coda_ascii_cursor_get_bit_size+0x470>
    2ee0:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2ee4:	ldrd	r0, [r3]
    2ee8:	mov	r2, #0
    2eec:	mov	r3, #0
    2ef0:	lsl	r3, r1, #3
    2ef4:	orr	r3, r3, r0, lsr #29
    2ef8:	lsl	r2, r0, #3
    2efc:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    2f00:	strd	r2, [r1]
    2f04:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2f08:	ldrd	r2, [r3]
    2f0c:	cmp	r2, #0
    2f10:	sbcs	r3, r3, #0
    2f14:	bge	2f4c <coda_ascii_cursor_get_bit_size+0x4b8>
    2f18:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    2f1c:	ldrd	r2, [r3]
    2f20:	mov	r3, r2
    2f24:	mov	r2, r3
    2f28:	movw	r1, #0
    2f2c:	movt	r1, #0
    2f30:	movw	r0, #65236	; 0xfed4
    2f34:	movt	r0, #65535	; 0xffff
    2f38:	bl	0 <coda_set_error>
    2f3c:	ldr	r0, [fp, #-800]	; 0xfffffce0
    2f40:	bl	0 <coda_cursor_add_to_error_message>
    2f44:	mvn	r3, #0
    2f48:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2f4c:	mov	r3, #0
    2f50:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    2f54:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2f58:	ldr	r3, [r3, #8]
    2f5c:	cmp	r3, #2
    2f60:	beq	2f74 <coda_ascii_cursor_get_bit_size+0x4e0>
    2f64:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2f68:	ldr	r3, [r3, #8]
    2f6c:	cmp	r3, #3
    2f70:	bne	3058 <coda_ascii_cursor_get_bit_size+0x5c4>
    2f74:	ldr	r3, [fp, #-72]	; 0xffffffb8
    2f78:	ldr	r3, [r3, #12]
    2f7c:	cmp	r3, #9
    2f80:	ldrls	pc, [pc, r3, lsl #2]
    2f84:	b	3004 <coda_ascii_cursor_get_bit_size+0x570>
    2f88:	.word	0x00002fb0
    2f8c:	.word	0x00002fcc
    2f90:	.word	0x00002fb0
    2f94:	.word	0x00002fcc
    2f98:	.word	0x00002fb0
    2f9c:	.word	0x00002fcc
    2fa0:	.word	0x00002fb0
    2fa4:	.word	0x00002fcc
    2fa8:	.word	0x00002fe8
    2fac:	.word	0x00002fe8
    2fb0:	sub	r2, fp, #220	; 0xdc
    2fb4:	sub	r0, fp, #212	; 0xd4
    2fb8:	mov	r3, #1
    2fbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2fc0:	bl	1bf4 <coda_ascii_parse_int64>
    2fc4:	str	r0, [fp, #-44]	; 0xffffffd4
    2fc8:	b	3024 <coda_ascii_cursor_get_bit_size+0x590>
    2fcc:	sub	r2, fp, #228	; 0xe4
    2fd0:	sub	r0, fp, #212	; 0xd4
    2fd4:	mov	r3, #1
    2fd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2fdc:	bl	1f04 <coda_ascii_parse_uint64>
    2fe0:	str	r0, [fp, #-44]	; 0xffffffd4
    2fe4:	b	3024 <coda_ascii_cursor_get_bit_size+0x590>
    2fe8:	sub	r2, fp, #236	; 0xec
    2fec:	sub	r0, fp, #212	; 0xd4
    2ff0:	mov	r3, #1
    2ff4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2ff8:	bl	21bc <coda_ascii_parse_double>
    2ffc:	str	r0, [fp, #-44]	; 0xffffffd4
    3000:	b	3024 <coda_ascii_cursor_get_bit_size+0x590>
    3004:	movw	r3, #0
    3008:	movt	r3, #0
    300c:	mov	r2, #800	; 0x320
    3010:	movw	r1, #0
    3014:	movt	r1, #0
    3018:	movw	r0, #0
    301c:	movt	r0, #0
    3020:	bl	0 <__assert_fail>
    3024:	ldr	r3, [fp, #-44]	; 0xffffffd4
    3028:	cmp	r3, #0
    302c:	bge	3038 <coda_ascii_cursor_get_bit_size+0x5a4>
    3030:	mvn	r3, #0
    3034:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3038:	ldr	r3, [fp, #-44]	; 0xffffffd4
    303c:	lsl	r3, r3, #3
    3040:	mov	r2, r3
    3044:	asr	r3, r2, #31
    3048:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    304c:	strd	r2, [r1]
    3050:	mov	r3, #0
    3054:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3058:	ldr	r3, [fp, #-72]	; 0xffffffb8
    305c:	ldr	r3, [r3, #8]
    3060:	cmp	r3, #4
    3064:	beq	3088 <coda_ascii_cursor_get_bit_size+0x5f4>
    3068:	movw	r3, #0
    306c:	movt	r3, #0
    3070:	mov	r2, #812	; 0x32c
    3074:	movw	r1, #0
    3078:	movt	r1, #0
    307c:	movw	r0, #0
    3080:	movt	r0, #0
    3084:	bl	0 <__assert_fail>
    3088:	ldr	r3, [fp, #-72]	; 0xffffffb8
    308c:	ldr	r3, [r3, #44]	; 0x2c
    3090:	cmp	r3, #4
    3094:	ldrls	pc, [pc, r3, lsl #2]
    3098:	b	3a64 <coda_ascii_cursor_get_bit_size+0xfd0>
    309c:	.word	0x00003a38
    30a0:	.word	0x000030b0
    30a4:	.word	0x0000335c
    30a8:	.word	0x0000335c
    30ac:	.word	0x00003890
    30b0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    30b4:	ldr	r3, [r3]
    30b8:	ldr	r3, [r3, #16]
    30bc:	cmp	r3, #0
    30c0:	beq	30e4 <coda_ascii_cursor_get_bit_size+0x650>
    30c4:	movw	r3, #0
    30c8:	movt	r3, #0
    30cc:	mov	r2, #816	; 0x330
    30d0:	movw	r1, #0
    30d4:	movt	r1, #0
    30d8:	movw	r0, #0
    30dc:	movt	r0, #0
    30e0:	bl	0 <__assert_fail>
    30e4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    30e8:	ldr	r3, [r3]
    30ec:	ldr	r3, [r3, #60]	; 0x3c
    30f0:	cmp	r3, #3
    30f4:	ldrls	pc, [pc, r3, lsl #2]
    30f8:	b	3a58 <coda_ascii_cursor_get_bit_size+0xfc4>
    30fc:	.word	0x00003134
    3100:	.word	0x0000310c
    3104:	.word	0x0000310c
    3108:	.word	0x00003120
    310c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    3110:	mov	r2, #8
    3114:	mov	r3, #0
    3118:	strd	r2, [r1]
    311c:	b	3358 <coda_ascii_cursor_get_bit_size+0x8c4>
    3120:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    3124:	mov	r2, #16
    3128:	mov	r3, #0
    312c:	strd	r2, [r1]
    3130:	b	3358 <coda_ascii_cursor_get_bit_size+0x8c4>
    3134:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3138:	ldr	r3, [r3, #4]
    313c:	sub	r3, r3, #1
    3140:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3144:	add	r3, r3, #1
    3148:	lsl	r3, r3, #4
    314c:	add	r3, r2, r3
    3150:	ldrd	r2, [r3]
    3154:	mov	r0, #7
    3158:	mov	r1, #0
    315c:	and	ip, r2, r0
    3160:	str	ip, [fp, #-812]	; 0xfffffcd4
    3164:	and	r3, r3, r1
    3168:	str	r3, [fp, #-808]	; 0xfffffcd8
    316c:	sub	r3, fp, #812	; 0x32c
    3170:	ldrd	r2, [r3]
    3174:	orrs	r3, r2, r3
    3178:	beq	3198 <coda_ascii_cursor_get_bit_size+0x704>
    317c:	movw	r1, #0
    3180:	movt	r1, #0
    3184:	movw	r0, #65236	; 0xfed4
    3188:	movt	r0, #65535	; 0xffff
    318c:	bl	0 <coda_set_error>
    3190:	mvn	r3, #0
    3194:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3198:	sub	r1, fp, #240	; 0xf0
    319c:	mov	r2, #1
    31a0:	mov	r3, #0
    31a4:	strd	r2, [sp]
    31a8:	mov	r2, #0
    31ac:	mov	r3, #0
    31b0:	ldr	r0, [fp, #-800]	; 0xfffffce0
    31b4:	bl	4cc4 <coda_ascii_cursor_read_bytes>
    31b8:	mov	r3, r0
    31bc:	cmp	r3, #0
    31c0:	beq	31cc <coda_ascii_cursor_get_bit_size+0x738>
    31c4:	mvn	r3, #0
    31c8:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    31cc:	ldrb	r3, [fp, #-240]	; 0xffffff10
    31d0:	cmp	r3, #10
    31d4:	beq	31e4 <coda_ascii_cursor_get_bit_size+0x750>
    31d8:	cmp	r3, #13
    31dc:	beq	3208 <coda_ascii_cursor_get_bit_size+0x774>
    31e0:	b	32f4 <coda_ascii_cursor_get_bit_size+0x860>
    31e4:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    31e8:	mov	r2, #8
    31ec:	mov	r3, #0
    31f0:	strd	r2, [r1]
    31f4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    31f8:	ldr	r3, [r3]
    31fc:	mov	r2, #1
    3200:	str	r2, [r3, #60]	; 0x3c
    3204:	b	3358 <coda_ascii_cursor_get_bit_size+0x8c4>
    3208:	ldr	r3, [fp, #-800]	; 0xfffffce0
    320c:	ldr	r3, [r3]
    3210:	ldrd	r4, [r3, #8]
    3214:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3218:	ldr	r3, [r3, #4]
    321c:	sub	r3, r3, #1
    3220:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3224:	add	r3, r3, #1
    3228:	lsl	r3, r3, #4
    322c:	add	r3, r2, r3
    3230:	ldrd	r0, [r3]
    3234:	mov	r2, #0
    3238:	mov	r3, #0
    323c:	lsr	r2, r0, #3
    3240:	orr	r2, r2, r1, lsl #29
    3244:	asr	r3, r1, #3
    3248:	subs	r1, r4, r2
    324c:	str	r1, [fp, #-820]	; 0xfffffccc
    3250:	sbc	r3, r5, r3
    3254:	str	r3, [fp, #-816]	; 0xfffffcd0
    3258:	sub	r3, fp, #820	; 0x334
    325c:	ldrd	r2, [r3]
    3260:	cmp	r2, #2
    3264:	sbcs	r3, r3, #0
    3268:	blt	32d0 <coda_ascii_cursor_get_bit_size+0x83c>
    326c:	sub	r1, fp, #240	; 0xf0
    3270:	mov	r2, #1
    3274:	mov	r3, #0
    3278:	strd	r2, [sp]
    327c:	mov	r2, #1
    3280:	mov	r3, #0
    3284:	ldr	r0, [fp, #-800]	; 0xfffffce0
    3288:	bl	4cc4 <coda_ascii_cursor_read_bytes>
    328c:	mov	r3, r0
    3290:	cmp	r3, #0
    3294:	beq	32a0 <coda_ascii_cursor_get_bit_size+0x80c>
    3298:	mvn	r3, #0
    329c:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    32a0:	ldrb	r3, [fp, #-240]	; 0xffffff10
    32a4:	cmp	r3, #10
    32a8:	bne	32d0 <coda_ascii_cursor_get_bit_size+0x83c>
    32ac:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    32b0:	mov	r2, #16
    32b4:	mov	r3, #0
    32b8:	strd	r2, [r1]
    32bc:	ldr	r3, [fp, #-800]	; 0xfffffce0
    32c0:	ldr	r3, [r3]
    32c4:	mov	r2, #3
    32c8:	str	r2, [r3, #60]	; 0x3c
    32cc:	b	3358 <coda_ascii_cursor_get_bit_size+0x8c4>
    32d0:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    32d4:	mov	r2, #8
    32d8:	mov	r3, #0
    32dc:	strd	r2, [r1]
    32e0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    32e4:	ldr	r3, [r3]
    32e8:	mov	r2, #2
    32ec:	str	r2, [r3, #60]	; 0x3c
    32f0:	b	3358 <coda_ascii_cursor_get_bit_size+0x8c4>
    32f4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    32f8:	ldr	r3, [r3, #4]
    32fc:	sub	r3, r3, #1
    3300:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3304:	add	r3, r3, #1
    3308:	lsl	r3, r3, #4
    330c:	add	r3, r2, r3
    3310:	ldrd	r2, [r3]
    3314:	mov	r0, #0
    3318:	mov	r1, #0
    331c:	lsr	r0, r2, #3
    3320:	orr	r0, r0, r3, lsl #29
    3324:	asr	r1, r3, #3
    3328:	sub	r3, fp, #264	; 0x108
    332c:	mov	r2, r3
    3330:	bl	0 <coda_str64>
    3334:	sub	r3, fp, #264	; 0x108
    3338:	mov	r2, r3
    333c:	movw	r1, #0
    3340:	movt	r1, #0
    3344:	movw	r0, #65236	; 0xfed4
    3348:	movt	r0, #65535	; 0xffff
    334c:	bl	0 <coda_set_error>
    3350:	mvn	r3, #0
    3354:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3358:	b	3a58 <coda_ascii_cursor_get_bit_size+0xfc4>
    335c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3360:	ldr	r3, [r3]
    3364:	ldr	r3, [r3, #16]
    3368:	cmp	r3, #0
    336c:	bne	35fc <coda_ascii_cursor_get_bit_size+0xb68>
    3370:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3374:	ldr	r3, [r3, #4]
    3378:	sub	r3, r3, #1
    337c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3380:	add	r3, r3, #1
    3384:	lsl	r3, r3, #4
    3388:	add	r3, r2, r3
    338c:	ldrd	r2, [r3]
    3390:	mov	r0, #7
    3394:	mov	r1, #0
    3398:	and	ip, r2, r0
    339c:	str	ip, [fp, #-828]	; 0xfffffcc4
    33a0:	and	r3, r3, r1
    33a4:	str	r3, [fp, #-824]	; 0xfffffcc8
    33a8:	sub	r3, fp, #828	; 0x33c
    33ac:	ldrd	r2, [r3]
    33b0:	orrs	r3, r2, r3
    33b4:	beq	33d4 <coda_ascii_cursor_get_bit_size+0x940>
    33b8:	movw	r1, #0
    33bc:	movt	r1, #0
    33c0:	movw	r0, #65236	; 0xfed4
    33c4:	movt	r0, #65535	; 0xffff
    33c8:	bl	0 <coda_set_error>
    33cc:	mvn	r3, #0
    33d0:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    33d4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    33d8:	ldr	r3, [r3]
    33dc:	ldr	r3, [r3, #68]	; 0x44
    33e0:	cmp	r3, #0
    33e4:	bne	340c <coda_ascii_cursor_get_bit_size+0x978>
    33e8:	ldr	r3, [fp, #-800]	; 0xfffffce0
    33ec:	ldr	r3, [r3]
    33f0:	mov	r0, r3
    33f4:	bl	0 <coda_ascii_init_asciilines>
    33f8:	mov	r3, r0
    33fc:	cmp	r3, #0
    3400:	beq	340c <coda_ascii_cursor_get_bit_size+0x978>
    3404:	mvn	r3, #0
    3408:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    340c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3410:	ldr	r3, [r3]
    3414:	ldr	r3, [r3, #64]	; 0x40
    3418:	cmp	r3, #0
    341c:	bne	3438 <coda_ascii_cursor_get_bit_size+0x9a4>
    3420:	movw	r1, #0
    3424:	movt	r1, #0
    3428:	mvn	r0, #300	; 0x12c
    342c:	bl	0 <coda_set_error>
    3430:	mvn	r3, #0
    3434:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3438:	mov	r3, #0
    343c:	str	r3, [fp, #-48]	; 0xffffffd0
    3440:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3444:	ldr	r3, [r3]
    3448:	ldr	r3, [r3, #64]	; 0x40
    344c:	sub	r3, r3, #1
    3450:	str	r3, [fp, #-52]	; 0xffffffcc
    3454:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3458:	ldr	r3, [r3]
    345c:	ldr	r3, [r3, #68]	; 0x44
    3460:	str	r3, [fp, #-92]	; 0xffffffa4
    3464:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3468:	ldr	r3, [r3, #4]
    346c:	sub	r3, r3, #1
    3470:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3474:	add	r3, r3, #1
    3478:	lsl	r3, r3, #4
    347c:	add	r3, r2, r3
    3480:	ldrd	r0, [r3]
    3484:	mov	r2, #0
    3488:	mov	r3, #0
    348c:	lsr	r2, r0, #3
    3490:	orr	r2, r2, r1, lsl #29
    3494:	asr	r3, r1, #3
    3498:	strd	r2, [fp, #-100]	; 0xffffff9c
    349c:	b	3500 <coda_ascii_cursor_get_bit_size+0xa6c>
    34a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
    34a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
    34a8:	add	r3, r2, r3
    34ac:	lsr	r2, r3, #31
    34b0:	add	r3, r2, r3
    34b4:	asr	r3, r3, #1
    34b8:	str	r3, [fp, #-104]	; 0xffffff98
    34bc:	ldr	r3, [fp, #-104]	; 0xffffff98
    34c0:	lsl	r3, r3, #2
    34c4:	ldr	r2, [fp, #-92]	; 0xffffffa4
    34c8:	add	r3, r2, r3
    34cc:	ldr	r3, [r3]
    34d0:	mov	r2, r3
    34d4:	asr	r3, r2, #31
    34d8:	ldrd	r0, [fp, #-100]	; 0xffffff9c
    34dc:	cmp	r0, r2
    34e0:	sbcs	r3, r1, r3
    34e4:	bge	34f4 <coda_ascii_cursor_get_bit_size+0xa60>
    34e8:	ldr	r3, [fp, #-104]	; 0xffffff98
    34ec:	str	r3, [fp, #-52]	; 0xffffffcc
    34f0:	b	3500 <coda_ascii_cursor_get_bit_size+0xa6c>
    34f4:	ldr	r3, [fp, #-104]	; 0xffffff98
    34f8:	add	r3, r3, #1
    34fc:	str	r3, [fp, #-48]	; 0xffffffd0
    3500:	ldr	r2, [fp, #-52]	; 0xffffffcc
    3504:	ldr	r3, [fp, #-48]	; 0xffffffd0
    3508:	cmp	r2, r3
    350c:	bne	34a0 <coda_ascii_cursor_get_bit_size+0xa0c>
    3510:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3514:	lsl	r3, r3, #2
    3518:	ldr	r2, [fp, #-92]	; 0xffffffa4
    351c:	add	r3, r2, r3
    3520:	ldr	r3, [r3]
    3524:	mov	r0, r3
    3528:	asr	r1, r0, #31
    352c:	ldrd	r2, [fp, #-100]	; 0xffffff9c
    3530:	subs	r6, r0, r2
    3534:	sbc	r7, r1, r3
    3538:	mov	r2, #0
    353c:	mov	r3, #0
    3540:	lsl	r3, r7, #3
    3544:	orr	r3, r3, r6, lsr #29
    3548:	lsl	r2, r6, #3
    354c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    3550:	strd	r2, [r1]
    3554:	ldr	r3, [fp, #-72]	; 0xffffffb8
    3558:	ldr	r3, [r3, #44]	; 0x2c
    355c:	cmp	r3, #3
    3560:	bne	3a60 <coda_ascii_cursor_get_bit_size+0xfcc>
    3564:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3568:	ldr	r3, [r3]
    356c:	ldr	r3, [r3, #64]	; 0x40
    3570:	sub	r3, r3, #1
    3574:	ldr	r2, [fp, #-52]	; 0xffffffcc
    3578:	cmp	r2, r3
    357c:	bne	3594 <coda_ascii_cursor_get_bit_size+0xb00>
    3580:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3584:	ldr	r3, [r3]
    3588:	ldr	r3, [r3, #72]	; 0x48
    358c:	cmp	r3, #0
    3590:	beq	3a60 <coda_ascii_cursor_get_bit_size+0xfcc>
    3594:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    3598:	ldrd	r2, [r3]
    359c:	subs	r1, r2, #8
    35a0:	str	r1, [fp, #-836]	; 0xfffffcbc
    35a4:	sbc	r3, r3, #0
    35a8:	str	r3, [fp, #-832]	; 0xfffffcc0
    35ac:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    35b0:	sub	r2, fp, #836	; 0x344
    35b4:	ldrd	r0, [r2]
    35b8:	strd	r0, [r3]
    35bc:	ldr	r3, [fp, #-800]	; 0xfffffce0
    35c0:	ldr	r3, [r3]
    35c4:	ldr	r3, [r3, #60]	; 0x3c
    35c8:	cmp	r3, #3
    35cc:	bne	3a60 <coda_ascii_cursor_get_bit_size+0xfcc>
    35d0:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    35d4:	ldrd	r2, [r3]
    35d8:	subs	r1, r2, #8
    35dc:	str	r1, [fp, #-844]	; 0xfffffcb4
    35e0:	sbc	r3, r3, #0
    35e4:	str	r3, [fp, #-840]	; 0xfffffcb8
    35e8:	ldr	r3, [fp, #-804]	; 0xfffffcdc
    35ec:	sub	r2, fp, #844	; 0x34c
    35f0:	ldrd	r0, [r2]
    35f4:	strd	r0, [r3]
    35f8:	b	3a60 <coda_ascii_cursor_get_bit_size+0xfcc>
    35fc:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3600:	ldr	r3, [r3, #4]
    3604:	sub	r3, r3, #1
    3608:	ldr	r2, [fp, #-800]	; 0xfffffce0
    360c:	add	r3, r3, #1
    3610:	lsl	r3, r3, #4
    3614:	add	r3, r2, r3
    3618:	ldrd	r0, [r3]
    361c:	mov	r2, #7
    3620:	mov	r3, #0
    3624:	and	ip, r0, r2
    3628:	str	ip, [fp, #-852]	; 0xfffffcac
    362c:	and	r3, r1, r3
    3630:	str	r3, [fp, #-848]	; 0xfffffcb0
    3634:	sub	r3, fp, #852	; 0x354
    3638:	ldrd	r2, [r3]
    363c:	orrs	r3, r2, r3
    3640:	beq	3660 <coda_ascii_cursor_get_bit_size+0xbcc>
    3644:	movw	r1, #0
    3648:	movt	r1, #0
    364c:	movw	r0, #65236	; 0xfed4
    3650:	movt	r0, #65535	; 0xffff
    3654:	bl	0 <coda_set_error>
    3658:	mvn	r3, #0
    365c:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3660:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3664:	ldr	r3, [r3, #4]
    3668:	sub	r3, r3, #1
    366c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3670:	add	r3, r3, #1
    3674:	lsl	r3, r3, #4
    3678:	add	r3, r2, r3
    367c:	ldrd	r2, [r3]
    3680:	mov	r0, #0
    3684:	mov	r1, #0
    3688:	lsr	r0, r2, #3
    368c:	orr	r0, r0, r3, lsl #29
    3690:	asr	r1, r3, #3
    3694:	strd	r0, [fp, #-116]	; 0xffffff8c
    3698:	ldr	r3, [fp, #-800]	; 0xfffffce0
    369c:	ldr	r3, [r3]
    36a0:	ldrd	r0, [r3, #8]
    36a4:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    36a8:	subs	ip, r0, r2
    36ac:	str	ip, [fp, #-900]	; 0xfffffc7c
    36b0:	sbc	r3, r1, r3
    36b4:	str	r3, [fp, #-896]	; 0xfffffc80
    36b8:	sub	r3, fp, #900	; 0x384
    36bc:	ldrd	r2, [r3]
    36c0:	strd	r2, [fp, #-124]	; 0xffffff84
    36c4:	mov	r2, #0
    36c8:	mov	r3, #0
    36cc:	strd	r2, [fp, #-60]	; 0xffffffc4
    36d0:	b	3764 <coda_ascii_cursor_get_bit_size+0xcd0>
    36d4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    36d8:	ldr	ip, [r3]
    36dc:	ldrd	r0, [fp, #-116]	; 0xffffff8c
    36e0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    36e4:	adds	lr, r0, r2
    36e8:	str	lr, [fp, #-860]	; 0xfffffca4
    36ec:	adc	r3, r1, r3
    36f0:	str	r3, [fp, #-856]	; 0xfffffca8
    36f4:	sub	r3, fp, #268	; 0x10c
    36f8:	str	r3, [sp, #8]
    36fc:	mov	r2, #1
    3700:	mov	r3, #0
    3704:	strd	r2, [sp]
    3708:	sub	r3, fp, #860	; 0x35c
    370c:	ldrd	r2, [r3]
    3710:	mov	r0, ip
    3714:	bl	204 <read_bytes_in_bounds>
    3718:	mov	r3, r0
    371c:	cmp	r3, #0
    3720:	beq	372c <coda_ascii_cursor_get_bit_size+0xc98>
    3724:	mvn	r3, #0
    3728:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    372c:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    3730:	cmp	r3, #13
    3734:	beq	3778 <coda_ascii_cursor_get_bit_size+0xce4>
    3738:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    373c:	cmp	r3, #10
    3740:	beq	3778 <coda_ascii_cursor_get_bit_size+0xce4>
    3744:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3748:	adds	r1, r2, #1
    374c:	str	r1, [fp, #-908]	; 0xfffffc74
    3750:	adc	r3, r3, #0
    3754:	str	r3, [fp, #-904]	; 0xfffffc78
    3758:	sub	r3, fp, #908	; 0x38c
    375c:	ldrd	r2, [r3]
    3760:	strd	r2, [fp, #-60]	; 0xffffffc4
    3764:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    3768:	ldrd	r2, [fp, #-124]	; 0xffffff84
    376c:	cmp	r0, r2
    3770:	sbcs	r3, r1, r3
    3774:	blt	36d4 <coda_ascii_cursor_get_bit_size+0xc40>
    3778:	ldr	r3, [fp, #-72]	; 0xffffffb8
    377c:	ldr	r3, [r3, #44]	; 0x2c
    3780:	cmp	r3, #2
    3784:	bne	386c <coda_ascii_cursor_get_bit_size+0xdd8>
    3788:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    378c:	cmp	r3, #13
    3790:	bne	384c <coda_ascii_cursor_get_bit_size+0xdb8>
    3794:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3798:	adds	r1, r2, #1
    379c:	str	r1, [fp, #-868]	; 0xfffffc9c
    37a0:	adc	r3, r3, #0
    37a4:	str	r3, [fp, #-864]	; 0xfffffca0
    37a8:	ldrd	r2, [fp, #-124]	; 0xffffff84
    37ac:	sub	r1, fp, #868	; 0x364
    37b0:	ldrd	r0, [r1]
    37b4:	cmp	r0, r2
    37b8:	sbcs	r3, r1, r3
    37bc:	bge	384c <coda_ascii_cursor_get_bit_size+0xdb8>
    37c0:	ldr	r3, [fp, #-800]	; 0xfffffce0
    37c4:	ldr	ip, [r3]
    37c8:	ldrd	r0, [fp, #-116]	; 0xffffff8c
    37cc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    37d0:	adds	r8, r0, r2
    37d4:	adc	r9, r1, r3
    37d8:	adds	r3, r8, #1
    37dc:	str	r3, [fp, #-876]	; 0xfffffc94
    37e0:	adc	r3, r9, #0
    37e4:	str	r3, [fp, #-872]	; 0xfffffc98
    37e8:	sub	r3, fp, #268	; 0x10c
    37ec:	str	r3, [sp, #8]
    37f0:	mov	r2, #1
    37f4:	mov	r3, #0
    37f8:	strd	r2, [sp]
    37fc:	sub	r3, fp, #876	; 0x36c
    3800:	ldrd	r2, [r3]
    3804:	mov	r0, ip
    3808:	bl	204 <read_bytes_in_bounds>
    380c:	mov	r3, r0
    3810:	cmp	r3, #0
    3814:	beq	3820 <coda_ascii_cursor_get_bit_size+0xd8c>
    3818:	mvn	r3, #0
    381c:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    3820:	ldrb	r3, [fp, #-268]	; 0xfffffef4
    3824:	cmp	r3, #10
    3828:	bne	384c <coda_ascii_cursor_get_bit_size+0xdb8>
    382c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3830:	adds	r1, r2, #1
    3834:	str	r1, [fp, #-916]	; 0xfffffc6c
    3838:	adc	r3, r3, #0
    383c:	str	r3, [fp, #-912]	; 0xfffffc70
    3840:	sub	r3, fp, #916	; 0x394
    3844:	ldrd	r2, [r3]
    3848:	strd	r2, [fp, #-60]	; 0xffffffc4
    384c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
    3850:	adds	r1, r2, #1
    3854:	str	r1, [fp, #-924]	; 0xfffffc64
    3858:	adc	r3, r3, #0
    385c:	str	r3, [fp, #-920]	; 0xfffffc68
    3860:	sub	r3, fp, #924	; 0x39c
    3864:	ldrd	r2, [r3]
    3868:	strd	r2, [fp, #-60]	; 0xffffffc4
    386c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    3870:	mov	r2, #0
    3874:	mov	r3, #0
    3878:	lsl	r3, r1, #3
    387c:	orr	r3, r3, r0, lsr #29
    3880:	lsl	r2, r0, #3
    3884:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    3888:	strd	r2, [r1]
    388c:	b	3a60 <coda_ascii_cursor_get_bit_size+0xfcc>
    3890:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3894:	ldr	r3, [r3, #4]
    3898:	sub	r3, r3, #1
    389c:	ldr	r2, [fp, #-800]	; 0xfffffce0
    38a0:	add	r3, r3, #1
    38a4:	lsl	r3, r3, #4
    38a8:	add	r3, r2, r3
    38ac:	ldrd	r2, [r3]
    38b0:	mov	r0, #7
    38b4:	mov	r1, #0
    38b8:	and	ip, r2, r0
    38bc:	str	ip, [fp, #-884]	; 0xfffffc8c
    38c0:	and	r3, r3, r1
    38c4:	str	r3, [fp, #-880]	; 0xfffffc90
    38c8:	sub	r3, fp, #884	; 0x374
    38cc:	ldrd	r2, [r3]
    38d0:	orrs	r3, r2, r3
    38d4:	beq	38f4 <coda_ascii_cursor_get_bit_size+0xe60>
    38d8:	movw	r1, #0
    38dc:	movt	r1, #0
    38e0:	movw	r0, #65236	; 0xfed4
    38e4:	movt	r0, #65535	; 0xffff
    38e8:	bl	0 <coda_set_error>
    38ec:	mvn	r3, #0
    38f0:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    38f4:	ldr	r3, [fp, #-800]	; 0xfffffce0
    38f8:	ldr	r3, [r3, #4]
    38fc:	sub	r3, r3, #1
    3900:	ldr	r2, [fp, #-800]	; 0xfffffce0
    3904:	add	r3, r3, #1
    3908:	lsl	r3, r3, #4
    390c:	add	r3, r2, r3
    3910:	ldrd	r0, [r3]
    3914:	mov	r2, #0
    3918:	mov	r3, #0
    391c:	lsr	r2, r0, #3
    3920:	orr	r2, r2, r1, lsl #29
    3924:	asr	r3, r1, #3
    3928:	strd	r2, [fp, #-132]	; 0xffffff7c
    392c:	ldr	r3, [fp, #-800]	; 0xfffffce0
    3930:	ldr	r3, [r3]
    3934:	ldrd	r0, [r3, #8]
    3938:	ldrd	r2, [fp, #-132]	; 0xffffff7c
    393c:	subs	ip, r0, r2
    3940:	str	ip, [fp, #-932]	; 0xfffffc5c
    3944:	sbc	r3, r1, r3
    3948:	str	r3, [fp, #-928]	; 0xfffffc60
    394c:	sub	r3, fp, #932	; 0x3a4
    3950:	ldrd	r2, [r3]
    3954:	strd	r2, [fp, #-140]	; 0xffffff74
    3958:	mov	r2, #0
    395c:	mov	r3, #0
    3960:	strd	r2, [fp, #-68]	; 0xffffffbc
    3964:	b	39f8 <coda_ascii_cursor_get_bit_size+0xf64>
    3968:	ldr	r3, [fp, #-800]	; 0xfffffce0
    396c:	ldr	ip, [r3]
    3970:	ldrd	r0, [fp, #-132]	; 0xffffff7c
    3974:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    3978:	adds	lr, r0, r2
    397c:	str	lr, [fp, #-892]	; 0xfffffc84
    3980:	adc	r3, r1, r3
    3984:	str	r3, [fp, #-888]	; 0xfffffc88
    3988:	sub	r3, fp, #272	; 0x110
    398c:	str	r3, [sp, #8]
    3990:	mov	r2, #1
    3994:	mov	r3, #0
    3998:	strd	r2, [sp]
    399c:	sub	r3, fp, #892	; 0x37c
    39a0:	ldrd	r2, [r3]
    39a4:	mov	r0, ip
    39a8:	bl	204 <read_bytes_in_bounds>
    39ac:	mov	r3, r0
    39b0:	cmp	r3, #0
    39b4:	beq	39c0 <coda_ascii_cursor_get_bit_size+0xf2c>
    39b8:	mvn	r3, #0
    39bc:	b	3a68 <coda_ascii_cursor_get_bit_size+0xfd4>
    39c0:	ldrb	r3, [fp, #-272]	; 0xfffffef0
    39c4:	cmp	r3, #32
    39c8:	beq	39d8 <coda_ascii_cursor_get_bit_size+0xf44>
    39cc:	ldrb	r3, [fp, #-272]	; 0xfffffef0
    39d0:	cmp	r3, #9
    39d4:	bne	3a10 <coda_ascii_cursor_get_bit_size+0xf7c>
    39d8:	ldrd	r2, [fp, #-68]	; 0xffffffbc
    39dc:	adds	r1, r2, #1
    39e0:	str	r1, [fp, #-940]	; 0xfffffc54
    39e4:	adc	r3, r3, #0
    39e8:	str	r3, [fp, #-936]	; 0xfffffc58
    39ec:	sub	r3, fp, #940	; 0x3ac
    39f0:	ldrd	r2, [r3]
    39f4:	strd	r2, [fp, #-68]	; 0xffffffbc
    39f8:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    39fc:	ldrd	r2, [fp, #-140]	; 0xffffff74
    3a00:	cmp	r0, r2
    3a04:	sbcs	r3, r1, r3
    3a08:	blt	3968 <coda_ascii_cursor_get_bit_size+0xed4>
    3a0c:	b	3a14 <coda_ascii_cursor_get_bit_size+0xf80>
    3a10:	nop	{0}
    3a14:	ldrd	r0, [fp, #-68]	; 0xffffffbc
    3a18:	mov	r2, #0
    3a1c:	mov	r3, #0
    3a20:	lsl	r3, r1, #3
    3a24:	orr	r3, r3, r0, lsr #29
    3a28:	lsl	r2, r0, #3
    3a2c:	ldr	r1, [fp, #-804]	; 0xfffffcdc
    3a30:	strd	r2, [r1]
    3a34:	b	3a64 <coda_ascii_cursor_get_bit_size+0xfd0>
    3a38:	movw	r3, #0
    3a3c:	movt	r3, #0
    3a40:	movw	r2, #1030	; 0x406
    3a44:	movw	r1, #0
    3a48:	movt	r1, #0
    3a4c:	movw	r0, #0
    3a50:	movt	r0, #0
    3a54:	bl	0 <__assert_fail>
    3a58:	nop	{0}
    3a5c:	b	3a64 <coda_ascii_cursor_get_bit_size+0xfd0>
    3a60:	nop	{0}
    3a64:	mov	r3, #0
    3a68:	mov	r0, r3
    3a6c:	sub	sp, fp, #28
    3a70:	ldrd	r4, [sp]
    3a74:	ldrd	r6, [sp, #8]
    3a78:	ldrd	r8, [sp, #16]
    3a7c:	ldr	fp, [sp, #24]
    3a80:	add	sp, sp, #28
    3a84:	pop	{pc}		; (ldr pc, [sp], #4)

00003a88 <coda_ascii_cursor_get_num_elements>:
    3a88:	str	fp, [sp, #-8]!
    3a8c:	str	lr, [sp, #4]
    3a90:	add	fp, sp, #4
    3a94:	sub	sp, sp, #8
    3a98:	str	r0, [fp, #-8]
    3a9c:	str	r1, [fp, #-12]
    3aa0:	ldr	r3, [fp, #-8]
    3aa4:	ldr	r3, [r3, #4]
    3aa8:	sub	r3, r3, #1
    3aac:	ldr	r2, [fp, #-8]
    3ab0:	lsl	r3, r3, #4
    3ab4:	add	r3, r2, r3
    3ab8:	ldr	r3, [r3, #8]
    3abc:	ldr	r3, [r3]
    3ac0:	cmp	r3, #99	; 0x63
    3ac4:	bhi	3ae8 <coda_ascii_cursor_get_num_elements+0x60>
    3ac8:	ldr	r3, [fp, #-8]
    3acc:	ldr	r3, [r3, #4]
    3ad0:	sub	r3, r3, #1
    3ad4:	ldr	r2, [fp, #-8]
    3ad8:	lsl	r3, r3, #4
    3adc:	add	r3, r2, r3
    3ae0:	ldr	r3, [r3, #8]
    3ae4:	b	3b08 <coda_ascii_cursor_get_num_elements+0x80>
    3ae8:	ldr	r3, [fp, #-8]
    3aec:	ldr	r3, [r3, #4]
    3af0:	sub	r3, r3, #1
    3af4:	ldr	r2, [fp, #-8]
    3af8:	lsl	r3, r3, #4
    3afc:	add	r3, r2, r3
    3b00:	ldr	r3, [r3, #8]
    3b04:	ldr	r3, [r3, #4]
    3b08:	ldr	r3, [r3, #8]
    3b0c:	cmp	r3, #1
    3b10:	bhi	3b28 <coda_ascii_cursor_get_num_elements+0xa0>
    3b14:	ldr	r1, [fp, #-12]
    3b18:	ldr	r0, [fp, #-8]
    3b1c:	bl	0 <coda_ascbin_cursor_get_num_elements>
    3b20:	mov	r3, r0
    3b24:	b	3b3c <coda_ascii_cursor_get_num_elements+0xb4>
    3b28:	ldr	r3, [fp, #-12]
    3b2c:	mov	r2, #1
    3b30:	str	r2, [r3]
    3b34:	nop	{0}
    3b38:	mov	r3, #0
    3b3c:	mov	r0, r3
    3b40:	sub	sp, fp, #4
    3b44:	ldr	fp, [sp]
    3b48:	add	sp, sp, #4
    3b4c:	pop	{pc}		; (ldr pc, [sp], #4)

00003b50 <coda_ascii_cursor_read_int64>:
    3b50:	strd	r4, [sp, #-16]!
    3b54:	str	fp, [sp, #8]
    3b58:	str	lr, [sp, #12]
    3b5c:	add	fp, sp, #12
    3b60:	sub	sp, sp, #120	; 0x78
    3b64:	str	r0, [fp, #-112]	; 0xffffff90
    3b68:	str	r1, [fp, #-116]	; 0xffffff8c
    3b6c:	ldr	r3, [fp, #-112]	; 0xffffff90
    3b70:	ldr	r3, [r3, #4]
    3b74:	sub	r3, r3, #1
    3b78:	ldr	r2, [fp, #-112]	; 0xffffff90
    3b7c:	lsl	r3, r3, #4
    3b80:	add	r3, r2, r3
    3b84:	ldr	r3, [r3, #8]
    3b88:	ldr	r3, [r3]
    3b8c:	cmp	r3, #99	; 0x63
    3b90:	bhi	3bb4 <coda_ascii_cursor_read_int64+0x64>
    3b94:	ldr	r3, [fp, #-112]	; 0xffffff90
    3b98:	ldr	r3, [r3, #4]
    3b9c:	sub	r3, r3, #1
    3ba0:	ldr	r2, [fp, #-112]	; 0xffffff90
    3ba4:	lsl	r3, r3, #4
    3ba8:	add	r3, r2, r3
    3bac:	ldr	r3, [r3, #8]
    3bb0:	b	3bd4 <coda_ascii_cursor_read_int64+0x84>
    3bb4:	ldr	r3, [fp, #-112]	; 0xffffff90
    3bb8:	ldr	r3, [r3, #4]
    3bbc:	sub	r3, r3, #1
    3bc0:	ldr	r2, [fp, #-112]	; 0xffffff90
    3bc4:	lsl	r3, r3, #4
    3bc8:	add	r3, r2, r3
    3bcc:	ldr	r3, [r3, #8]
    3bd0:	ldr	r3, [r3, #4]
    3bd4:	str	r3, [fp, #-24]	; 0xffffffe8
    3bd8:	ldr	r3, [fp, #-112]	; 0xffffff90
    3bdc:	ldr	r3, [r3, #4]
    3be0:	sub	r3, r3, #1
    3be4:	ldr	r2, [fp, #-112]	; 0xffffff90
    3be8:	add	r3, r3, #1
    3bec:	lsl	r3, r3, #4
    3bf0:	add	r3, r2, r3
    3bf4:	ldrd	r2, [r3]
    3bf8:	strd	r2, [fp, #-36]	; 0xffffffdc
    3bfc:	mov	r3, #1
    3c00:	str	r3, [fp, #-20]	; 0xffffffec
    3c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c08:	ldrd	r2, [r3, #24]
    3c0c:	sub	r1, fp, #44	; 0x2c
    3c10:	ldr	r0, [fp, #-112]	; 0xffffff90
    3c14:	bl	11b8 <get_bit_size_boundary>
    3c18:	mov	r3, r0
    3c1c:	cmp	r3, #0
    3c20:	beq	3c2c <coda_ascii_cursor_read_int64+0xdc>
    3c24:	mvn	r3, #0
    3c28:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3c2c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    3c30:	mov	r0, #7
    3c34:	mov	r1, #0
    3c38:	and	r4, r2, r0
    3c3c:	and	r5, r3, r1
    3c40:	orrs	r3, r4, r5
    3c44:	beq	3c60 <coda_ascii_cursor_read_int64+0x110>
    3c48:	movw	r1, #0
    3c4c:	movt	r1, #0
    3c50:	mvn	r0, #21
    3c54:	bl	0 <coda_set_error>
    3c58:	mvn	r3, #0
    3c5c:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3c60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c64:	ldrd	r2, [r3, #24]
    3c68:	cmp	r2, #0
    3c6c:	sbcs	r3, r3, #0
    3c70:	blt	3ccc <coda_ascii_cursor_read_int64+0x17c>
    3c74:	mov	r3, #0
    3c78:	str	r3, [fp, #-20]	; 0xffffffec
    3c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c80:	ldrd	r0, [r3, #24]
    3c84:	mov	r2, #0
    3c88:	mov	r3, #0
    3c8c:	lsr	r2, r0, #3
    3c90:	orr	r2, r2, r1, lsl #29
    3c94:	asr	r3, r1, #3
    3c98:	mov	r3, r2
    3c9c:	str	r3, [fp, #-16]
    3ca0:	ldr	r3, [fp, #-16]
    3ca4:	cmp	r3, #64	; 0x40
    3ca8:	ble	3d1c <coda_ascii_cursor_read_int64+0x1cc>
    3cac:	movw	r3, #0
    3cb0:	movt	r3, #0
    3cb4:	movw	r2, #1076	; 0x434
    3cb8:	movw	r1, #0
    3cbc:	movt	r1, #0
    3cc0:	movw	r0, #0
    3cc4:	movt	r0, #0
    3cc8:	bl	0 <__assert_fail>
    3ccc:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3cd0:	mov	r2, #0
    3cd4:	mov	r3, #0
    3cd8:	lsr	r2, r0, #3
    3cdc:	orr	r2, r2, r1, lsl #29
    3ce0:	asr	r3, r1, #3
    3ce4:	cmp	r2, #64	; 0x40
    3ce8:	sbcs	r3, r3, #0
    3cec:	bge	3d14 <coda_ascii_cursor_read_int64+0x1c4>
    3cf0:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3cf4:	mov	r2, #0
    3cf8:	mov	r3, #0
    3cfc:	lsr	r2, r0, #3
    3d00:	orr	r2, r2, r1, lsl #29
    3d04:	asr	r3, r1, #3
    3d08:	mov	r3, r2
    3d0c:	str	r3, [fp, #-16]
    3d10:	b	3d1c <coda_ascii_cursor_read_int64+0x1cc>
    3d14:	mov	r3, #64	; 0x40
    3d18:	str	r3, [fp, #-16]
    3d1c:	ldr	r3, [fp, #-112]	; 0xffffff90
    3d20:	ldr	lr, [r3]
    3d24:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    3d28:	mov	r2, #0
    3d2c:	mov	r3, #0
    3d30:	lsr	r2, r0, #3
    3d34:	orr	r2, r2, r1, lsl #29
    3d38:	asr	r3, r1, #3
    3d3c:	ldr	r1, [fp, #-16]
    3d40:	mov	r0, r1
    3d44:	asr	r1, r0, #31
    3d48:	sub	ip, fp, #108	; 0x6c
    3d4c:	str	ip, [sp, #8]
    3d50:	strd	r0, [sp]
    3d54:	mov	r0, lr
    3d58:	bl	204 <read_bytes_in_bounds>
    3d5c:	mov	r3, r0
    3d60:	cmp	r3, #0
    3d64:	beq	3d70 <coda_ascii_cursor_read_int64+0x220>
    3d68:	mvn	r3, #0
    3d6c:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3d70:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d74:	ldr	r3, [r3, #52]	; 0x34
    3d78:	cmp	r3, #0
    3d7c:	beq	3dc4 <coda_ascii_cursor_read_int64+0x274>
    3d80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d84:	ldr	r2, [r3, #52]	; 0x34
    3d88:	sub	r0, fp, #108	; 0x6c
    3d8c:	ldr	r3, [fp, #-116]	; 0xffffff8c
    3d90:	str	r3, [sp]
    3d94:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d98:	ldr	r1, [fp, #-16]
    3d9c:	bl	1894 <parse_integer_mapping>
    3da0:	mov	r3, r0
    3da4:	cmp	r3, #0
    3da8:	beq	3dcc <coda_ascii_cursor_read_int64+0x27c>
    3dac:	cmp	r3, #1
    3db0:	bne	3dbc <coda_ascii_cursor_read_int64+0x26c>
    3db4:	mov	r3, #0
    3db8:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3dbc:	mvn	r3, #0
    3dc0:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3dc4:	nop	{0}
    3dc8:	b	3dd0 <coda_ascii_cursor_read_int64+0x280>
    3dcc:	nop	{0}
    3dd0:	sub	r0, fp, #108	; 0x6c
    3dd4:	ldr	r3, [fp, #-20]	; 0xffffffec
    3dd8:	ldr	r2, [fp, #-116]	; 0xffffff8c
    3ddc:	ldr	r1, [fp, #-16]
    3de0:	bl	1bf4 <coda_ascii_parse_int64>
    3de4:	mov	r3, r0
    3de8:	cmp	r3, #0
    3dec:	bge	3df8 <coda_ascii_cursor_read_int64+0x2a8>
    3df0:	mvn	r3, #0
    3df4:	b	3dfc <coda_ascii_cursor_read_int64+0x2ac>
    3df8:	mov	r3, #0
    3dfc:	mov	r0, r3
    3e00:	sub	sp, fp, #12
    3e04:	ldrd	r4, [sp]
    3e08:	ldr	fp, [sp, #8]
    3e0c:	add	sp, sp, #12
    3e10:	pop	{pc}		; (ldr pc, [sp], #4)

00003e14 <coda_ascii_cursor_read_uint64>:
    3e14:	strd	r4, [sp, #-16]!
    3e18:	str	fp, [sp, #8]
    3e1c:	str	lr, [sp, #12]
    3e20:	add	fp, sp, #12
    3e24:	sub	sp, sp, #120	; 0x78
    3e28:	str	r0, [fp, #-112]	; 0xffffff90
    3e2c:	str	r1, [fp, #-116]	; 0xffffff8c
    3e30:	ldr	r3, [fp, #-112]	; 0xffffff90
    3e34:	ldr	r3, [r3, #4]
    3e38:	sub	r3, r3, #1
    3e3c:	ldr	r2, [fp, #-112]	; 0xffffff90
    3e40:	lsl	r3, r3, #4
    3e44:	add	r3, r2, r3
    3e48:	ldr	r3, [r3, #8]
    3e4c:	ldr	r3, [r3]
    3e50:	cmp	r3, #99	; 0x63
    3e54:	bhi	3e78 <coda_ascii_cursor_read_uint64+0x64>
    3e58:	ldr	r3, [fp, #-112]	; 0xffffff90
    3e5c:	ldr	r3, [r3, #4]
    3e60:	sub	r3, r3, #1
    3e64:	ldr	r2, [fp, #-112]	; 0xffffff90
    3e68:	lsl	r3, r3, #4
    3e6c:	add	r3, r2, r3
    3e70:	ldr	r3, [r3, #8]
    3e74:	b	3e98 <coda_ascii_cursor_read_uint64+0x84>
    3e78:	ldr	r3, [fp, #-112]	; 0xffffff90
    3e7c:	ldr	r3, [r3, #4]
    3e80:	sub	r3, r3, #1
    3e84:	ldr	r2, [fp, #-112]	; 0xffffff90
    3e88:	lsl	r3, r3, #4
    3e8c:	add	r3, r2, r3
    3e90:	ldr	r3, [r3, #8]
    3e94:	ldr	r3, [r3, #4]
    3e98:	str	r3, [fp, #-24]	; 0xffffffe8
    3e9c:	ldr	r3, [fp, #-112]	; 0xffffff90
    3ea0:	ldr	r3, [r3, #4]
    3ea4:	sub	r3, r3, #1
    3ea8:	ldr	r2, [fp, #-112]	; 0xffffff90
    3eac:	add	r3, r3, #1
    3eb0:	lsl	r3, r3, #4
    3eb4:	add	r3, r2, r3
    3eb8:	ldrd	r2, [r3]
    3ebc:	strd	r2, [fp, #-36]	; 0xffffffdc
    3ec0:	mov	r3, #1
    3ec4:	str	r3, [fp, #-20]	; 0xffffffec
    3ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3ecc:	ldrd	r2, [r3, #24]
    3ed0:	sub	r1, fp, #44	; 0x2c
    3ed4:	ldr	r0, [fp, #-112]	; 0xffffff90
    3ed8:	bl	11b8 <get_bit_size_boundary>
    3edc:	mov	r3, r0
    3ee0:	cmp	r3, #0
    3ee4:	beq	3ef0 <coda_ascii_cursor_read_uint64+0xdc>
    3ee8:	mvn	r3, #0
    3eec:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    3ef0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    3ef4:	mov	r0, #7
    3ef8:	mov	r1, #0
    3efc:	and	r4, r2, r0
    3f00:	and	r5, r3, r1
    3f04:	orrs	r3, r4, r5
    3f08:	beq	3f24 <coda_ascii_cursor_read_uint64+0x110>
    3f0c:	movw	r1, #0
    3f10:	movt	r1, #0
    3f14:	mvn	r0, #21
    3f18:	bl	0 <coda_set_error>
    3f1c:	mvn	r3, #0
    3f20:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    3f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f28:	ldrd	r2, [r3, #24]
    3f2c:	cmp	r2, #0
    3f30:	sbcs	r3, r3, #0
    3f34:	blt	3f90 <coda_ascii_cursor_read_uint64+0x17c>
    3f38:	mov	r3, #0
    3f3c:	str	r3, [fp, #-20]	; 0xffffffec
    3f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f44:	ldrd	r0, [r3, #24]
    3f48:	mov	r2, #0
    3f4c:	mov	r3, #0
    3f50:	lsr	r2, r0, #3
    3f54:	orr	r2, r2, r1, lsl #29
    3f58:	asr	r3, r1, #3
    3f5c:	mov	r3, r2
    3f60:	str	r3, [fp, #-16]
    3f64:	ldr	r3, [fp, #-16]
    3f68:	cmp	r3, #64	; 0x40
    3f6c:	ble	3fe0 <coda_ascii_cursor_read_uint64+0x1cc>
    3f70:	movw	r3, #0
    3f74:	movt	r3, #0
    3f78:	movw	r2, #1137	; 0x471
    3f7c:	movw	r1, #0
    3f80:	movt	r1, #0
    3f84:	movw	r0, #0
    3f88:	movt	r0, #0
    3f8c:	bl	0 <__assert_fail>
    3f90:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3f94:	mov	r2, #0
    3f98:	mov	r3, #0
    3f9c:	lsr	r2, r0, #3
    3fa0:	orr	r2, r2, r1, lsl #29
    3fa4:	asr	r3, r1, #3
    3fa8:	cmp	r2, #64	; 0x40
    3fac:	sbcs	r3, r3, #0
    3fb0:	bge	3fd8 <coda_ascii_cursor_read_uint64+0x1c4>
    3fb4:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    3fb8:	mov	r2, #0
    3fbc:	mov	r3, #0
    3fc0:	lsr	r2, r0, #3
    3fc4:	orr	r2, r2, r1, lsl #29
    3fc8:	asr	r3, r1, #3
    3fcc:	mov	r3, r2
    3fd0:	str	r3, [fp, #-16]
    3fd4:	b	3fe0 <coda_ascii_cursor_read_uint64+0x1cc>
    3fd8:	mov	r3, #64	; 0x40
    3fdc:	str	r3, [fp, #-16]
    3fe0:	ldr	r3, [fp, #-112]	; 0xffffff90
    3fe4:	ldr	lr, [r3]
    3fe8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    3fec:	mov	r2, #0
    3ff0:	mov	r3, #0
    3ff4:	lsr	r2, r0, #3
    3ff8:	orr	r2, r2, r1, lsl #29
    3ffc:	asr	r3, r1, #3
    4000:	ldr	r1, [fp, #-16]
    4004:	mov	r0, r1
    4008:	asr	r1, r0, #31
    400c:	sub	ip, fp, #108	; 0x6c
    4010:	str	ip, [sp, #8]
    4014:	strd	r0, [sp]
    4018:	mov	r0, lr
    401c:	bl	204 <read_bytes_in_bounds>
    4020:	mov	r3, r0
    4024:	cmp	r3, #0
    4028:	beq	4034 <coda_ascii_cursor_read_uint64+0x220>
    402c:	mvn	r3, #0
    4030:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    4034:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4038:	ldr	r3, [r3, #52]	; 0x34
    403c:	cmp	r3, #0
    4040:	beq	4088 <coda_ascii_cursor_read_uint64+0x274>
    4044:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4048:	ldr	r2, [r3, #52]	; 0x34
    404c:	sub	r0, fp, #108	; 0x6c
    4050:	ldr	r3, [fp, #-116]	; 0xffffff8c
    4054:	str	r3, [sp]
    4058:	ldr	r3, [fp, #-20]	; 0xffffffec
    405c:	ldr	r1, [fp, #-16]
    4060:	bl	1894 <parse_integer_mapping>
    4064:	mov	r3, r0
    4068:	cmp	r3, #0
    406c:	beq	4090 <coda_ascii_cursor_read_uint64+0x27c>
    4070:	cmp	r3, #1
    4074:	bne	4080 <coda_ascii_cursor_read_uint64+0x26c>
    4078:	mov	r3, #0
    407c:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    4080:	mvn	r3, #0
    4084:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    4088:	nop	{0}
    408c:	b	4094 <coda_ascii_cursor_read_uint64+0x280>
    4090:	nop	{0}
    4094:	sub	r0, fp, #108	; 0x6c
    4098:	ldr	r3, [fp, #-20]	; 0xffffffec
    409c:	ldr	r2, [fp, #-116]	; 0xffffff8c
    40a0:	ldr	r1, [fp, #-16]
    40a4:	bl	1f04 <coda_ascii_parse_uint64>
    40a8:	mov	r3, r0
    40ac:	cmp	r3, #0
    40b0:	bge	40bc <coda_ascii_cursor_read_uint64+0x2a8>
    40b4:	mvn	r3, #0
    40b8:	b	40c0 <coda_ascii_cursor_read_uint64+0x2ac>
    40bc:	mov	r3, #0
    40c0:	mov	r0, r3
    40c4:	sub	sp, fp, #12
    40c8:	ldrd	r4, [sp]
    40cc:	ldr	fp, [sp, #8]
    40d0:	add	sp, sp, #12
    40d4:	pop	{pc}		; (ldr pc, [sp], #4)

000040d8 <coda_ascii_cursor_read_int8>:
    40d8:	str	fp, [sp, #-8]!
    40dc:	str	lr, [sp, #4]
    40e0:	add	fp, sp, #4
    40e4:	sub	sp, sp, #16
    40e8:	str	r0, [fp, #-16]
    40ec:	str	r1, [fp, #-20]	; 0xffffffec
    40f0:	sub	r3, fp, #12
    40f4:	mov	r1, r3
    40f8:	ldr	r0, [fp, #-16]
    40fc:	bl	3b50 <coda_ascii_cursor_read_int64>
    4100:	mov	r3, r0
    4104:	cmp	r3, #0
    4108:	beq	4114 <coda_ascii_cursor_read_int8+0x3c>
    410c:	mvn	r3, #0
    4110:	b	416c <coda_ascii_cursor_read_int8+0x94>
    4114:	ldrd	r2, [fp, #-12]
    4118:	cmp	r2, #128	; 0x80
    411c:	sbcs	r3, r3, #0
    4120:	bge	413c <coda_ascii_cursor_read_int8+0x64>
    4124:	ldrd	r2, [fp, #-12]
    4128:	mvn	r0, #127	; 0x7f
    412c:	mvn	r1, #0
    4130:	cmp	r2, r0
    4134:	sbcs	r3, r3, r1
    4138:	bge	4158 <coda_ascii_cursor_read_int8+0x80>
    413c:	movw	r1, #0
    4140:	movt	r1, #0
    4144:	movw	r0, #65236	; 0xfed4
    4148:	movt	r0, #65535	; 0xffff
    414c:	bl	0 <coda_set_error>
    4150:	mvn	r3, #0
    4154:	b	416c <coda_ascii_cursor_read_int8+0x94>
    4158:	ldrd	r2, [fp, #-12]
    415c:	sxtb	r2, r2
    4160:	ldr	r3, [fp, #-20]	; 0xffffffec
    4164:	strb	r2, [r3]
    4168:	mov	r3, #0
    416c:	mov	r0, r3
    4170:	sub	sp, fp, #4
    4174:	ldr	fp, [sp]
    4178:	add	sp, sp, #4
    417c:	pop	{pc}		; (ldr pc, [sp], #4)

00004180 <coda_ascii_cursor_read_uint8>:
    4180:	str	fp, [sp, #-8]!
    4184:	str	lr, [sp, #4]
    4188:	add	fp, sp, #4
    418c:	sub	sp, sp, #16
    4190:	str	r0, [fp, #-16]
    4194:	str	r1, [fp, #-20]	; 0xffffffec
    4198:	sub	r3, fp, #12
    419c:	mov	r1, r3
    41a0:	ldr	r0, [fp, #-16]
    41a4:	bl	3e14 <coda_ascii_cursor_read_uint64>
    41a8:	mov	r3, r0
    41ac:	cmp	r3, #0
    41b0:	beq	41bc <coda_ascii_cursor_read_uint8+0x3c>
    41b4:	mvn	r3, #0
    41b8:	b	41fc <coda_ascii_cursor_read_uint8+0x7c>
    41bc:	ldrd	r2, [fp, #-12]
    41c0:	cmp	r3, #0
    41c4:	cmpeq	r2, #255	; 0xff
    41c8:	bls	41e8 <coda_ascii_cursor_read_uint8+0x68>
    41cc:	movw	r1, #0
    41d0:	movt	r1, #0
    41d4:	movw	r0, #65236	; 0xfed4
    41d8:	movt	r0, #65535	; 0xffff
    41dc:	bl	0 <coda_set_error>
    41e0:	mvn	r3, #0
    41e4:	b	41fc <coda_ascii_cursor_read_uint8+0x7c>
    41e8:	ldrd	r2, [fp, #-12]
    41ec:	uxtb	r2, r2
    41f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    41f4:	strb	r2, [r3]
    41f8:	mov	r3, #0
    41fc:	mov	r0, r3
    4200:	sub	sp, fp, #4
    4204:	ldr	fp, [sp]
    4208:	add	sp, sp, #4
    420c:	pop	{pc}		; (ldr pc, [sp], #4)

00004210 <coda_ascii_cursor_read_int16>:
    4210:	str	fp, [sp, #-8]!
    4214:	str	lr, [sp, #4]
    4218:	add	fp, sp, #4
    421c:	sub	sp, sp, #16
    4220:	str	r0, [fp, #-16]
    4224:	str	r1, [fp, #-20]	; 0xffffffec
    4228:	sub	r3, fp, #12
    422c:	mov	r1, r3
    4230:	ldr	r0, [fp, #-16]
    4234:	bl	3b50 <coda_ascii_cursor_read_int64>
    4238:	mov	r3, r0
    423c:	cmp	r3, #0
    4240:	beq	424c <coda_ascii_cursor_read_int16+0x3c>
    4244:	mvn	r3, #0
    4248:	b	42b0 <coda_ascii_cursor_read_int16+0xa0>
    424c:	ldrd	r2, [fp, #-12]
    4250:	movw	r0, #32767	; 0x7fff
    4254:	mov	r1, #0
    4258:	cmp	r0, r2
    425c:	sbcs	r3, r1, r3
    4260:	blt	4280 <coda_ascii_cursor_read_int16+0x70>
    4264:	ldrd	r2, [fp, #-12]
    4268:	mov	r0, #32768	; 0x8000
    426c:	movt	r0, #65535	; 0xffff
    4270:	mvn	r1, #0
    4274:	cmp	r2, r0
    4278:	sbcs	r3, r3, r1
    427c:	bge	429c <coda_ascii_cursor_read_int16+0x8c>
    4280:	movw	r1, #0
    4284:	movt	r1, #0
    4288:	movw	r0, #65236	; 0xfed4
    428c:	movt	r0, #65535	; 0xffff
    4290:	bl	0 <coda_set_error>
    4294:	mvn	r3, #0
    4298:	b	42b0 <coda_ascii_cursor_read_int16+0xa0>
    429c:	ldrd	r2, [fp, #-12]
    42a0:	sxth	r2, r2
    42a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    42a8:	strh	r2, [r3]
    42ac:	mov	r3, #0
    42b0:	mov	r0, r3
    42b4:	sub	sp, fp, #4
    42b8:	ldr	fp, [sp]
    42bc:	add	sp, sp, #4
    42c0:	pop	{pc}		; (ldr pc, [sp], #4)

000042c4 <coda_ascii_cursor_read_uint16>:
    42c4:	str	fp, [sp, #-8]!
    42c8:	str	lr, [sp, #4]
    42cc:	add	fp, sp, #4
    42d0:	sub	sp, sp, #16
    42d4:	str	r0, [fp, #-16]
    42d8:	str	r1, [fp, #-20]	; 0xffffffec
    42dc:	sub	r3, fp, #12
    42e0:	mov	r1, r3
    42e4:	ldr	r0, [fp, #-16]
    42e8:	bl	3e14 <coda_ascii_cursor_read_uint64>
    42ec:	mov	r3, r0
    42f0:	cmp	r3, #0
    42f4:	beq	4300 <coda_ascii_cursor_read_uint16+0x3c>
    42f8:	mvn	r3, #0
    42fc:	b	4348 <coda_ascii_cursor_read_uint16+0x84>
    4300:	ldrd	r2, [fp, #-12]
    4304:	movw	r0, #65535	; 0xffff
    4308:	mov	r1, #0
    430c:	cmp	r3, r1
    4310:	cmpeq	r2, r0
    4314:	bls	4334 <coda_ascii_cursor_read_uint16+0x70>
    4318:	movw	r1, #0
    431c:	movt	r1, #0
    4320:	movw	r0, #65236	; 0xfed4
    4324:	movt	r0, #65535	; 0xffff
    4328:	bl	0 <coda_set_error>
    432c:	mvn	r3, #0
    4330:	b	4348 <coda_ascii_cursor_read_uint16+0x84>
    4334:	ldrd	r2, [fp, #-12]
    4338:	uxth	r2, r2
    433c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4340:	strh	r2, [r3]
    4344:	mov	r3, #0
    4348:	mov	r0, r3
    434c:	sub	sp, fp, #4
    4350:	ldr	fp, [sp]
    4354:	add	sp, sp, #4
    4358:	pop	{pc}		; (ldr pc, [sp], #4)

0000435c <coda_ascii_cursor_read_int32>:
    435c:	str	fp, [sp, #-8]!
    4360:	str	lr, [sp, #4]
    4364:	add	fp, sp, #4
    4368:	sub	sp, sp, #16
    436c:	str	r0, [fp, #-16]
    4370:	str	r1, [fp, #-20]	; 0xffffffec
    4374:	sub	r3, fp, #12
    4378:	mov	r1, r3
    437c:	ldr	r0, [fp, #-16]
    4380:	bl	3b50 <coda_ascii_cursor_read_int64>
    4384:	mov	r3, r0
    4388:	cmp	r3, #0
    438c:	beq	4398 <coda_ascii_cursor_read_int32+0x3c>
    4390:	mvn	r3, #0
    4394:	b	43f4 <coda_ascii_cursor_read_int32+0x98>
    4398:	ldrd	r2, [fp, #-12]
    439c:	mvn	r0, #-2147483648	; 0x80000000
    43a0:	mov	r1, #0
    43a4:	cmp	r0, r2
    43a8:	sbcs	r3, r1, r3
    43ac:	blt	43c8 <coda_ascii_cursor_read_int32+0x6c>
    43b0:	ldrd	r2, [fp, #-12]
    43b4:	mov	r0, #-2147483648	; 0x80000000
    43b8:	mvn	r1, #0
    43bc:	cmp	r2, r0
    43c0:	sbcs	r3, r3, r1
    43c4:	bge	43e4 <coda_ascii_cursor_read_int32+0x88>
    43c8:	movw	r1, #0
    43cc:	movt	r1, #0
    43d0:	movw	r0, #65236	; 0xfed4
    43d4:	movt	r0, #65535	; 0xffff
    43d8:	bl	0 <coda_set_error>
    43dc:	mvn	r3, #0
    43e0:	b	43f4 <coda_ascii_cursor_read_int32+0x98>
    43e4:	ldrd	r2, [fp, #-12]
    43e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    43ec:	str	r2, [r3]
    43f0:	mov	r3, #0
    43f4:	mov	r0, r3
    43f8:	sub	sp, fp, #4
    43fc:	ldr	fp, [sp]
    4400:	add	sp, sp, #4
    4404:	pop	{pc}		; (ldr pc, [sp], #4)

00004408 <coda_ascii_cursor_read_uint32>:
    4408:	str	fp, [sp, #-8]!
    440c:	str	lr, [sp, #4]
    4410:	add	fp, sp, #4
    4414:	sub	sp, sp, #16
    4418:	str	r0, [fp, #-16]
    441c:	str	r1, [fp, #-20]	; 0xffffffec
    4420:	sub	r3, fp, #12
    4424:	mov	r1, r3
    4428:	ldr	r0, [fp, #-16]
    442c:	bl	3e14 <coda_ascii_cursor_read_uint64>
    4430:	mov	r3, r0
    4434:	cmp	r3, #0
    4438:	beq	4444 <coda_ascii_cursor_read_uint32+0x3c>
    443c:	mvn	r3, #0
    4440:	b	4488 <coda_ascii_cursor_read_uint32+0x80>
    4444:	ldrd	r2, [fp, #-12]
    4448:	mvn	r0, #0
    444c:	mov	r1, #0
    4450:	cmp	r3, r1
    4454:	cmpeq	r2, r0
    4458:	bls	4478 <coda_ascii_cursor_read_uint32+0x70>
    445c:	movw	r1, #0
    4460:	movt	r1, #0
    4464:	movw	r0, #65236	; 0xfed4
    4468:	movt	r0, #65535	; 0xffff
    446c:	bl	0 <coda_set_error>
    4470:	mvn	r3, #0
    4474:	b	4488 <coda_ascii_cursor_read_uint32+0x80>
    4478:	ldrd	r2, [fp, #-12]
    447c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4480:	str	r2, [r3]
    4484:	mov	r3, #0
    4488:	mov	r0, r3
    448c:	sub	sp, fp, #4
    4490:	ldr	fp, [sp]
    4494:	add	sp, sp, #4
    4498:	pop	{pc}		; (ldr pc, [sp], #4)

0000449c <coda_ascii_cursor_read_double>:
    449c:	strd	r4, [sp, #-16]!
    44a0:	str	fp, [sp, #8]
    44a4:	str	lr, [sp, #12]
    44a8:	add	fp, sp, #12
    44ac:	sub	sp, sp, #120	; 0x78
    44b0:	str	r0, [fp, #-112]	; 0xffffff90
    44b4:	str	r1, [fp, #-116]	; 0xffffff8c
    44b8:	ldr	r3, [fp, #-112]	; 0xffffff90
    44bc:	ldr	r3, [r3, #4]
    44c0:	sub	r3, r3, #1
    44c4:	ldr	r2, [fp, #-112]	; 0xffffff90
    44c8:	lsl	r3, r3, #4
    44cc:	add	r3, r2, r3
    44d0:	ldr	r3, [r3, #8]
    44d4:	ldr	r3, [r3]
    44d8:	cmp	r3, #99	; 0x63
    44dc:	bhi	4500 <coda_ascii_cursor_read_double+0x64>
    44e0:	ldr	r3, [fp, #-112]	; 0xffffff90
    44e4:	ldr	r3, [r3, #4]
    44e8:	sub	r3, r3, #1
    44ec:	ldr	r2, [fp, #-112]	; 0xffffff90
    44f0:	lsl	r3, r3, #4
    44f4:	add	r3, r2, r3
    44f8:	ldr	r3, [r3, #8]
    44fc:	b	4520 <coda_ascii_cursor_read_double+0x84>
    4500:	ldr	r3, [fp, #-112]	; 0xffffff90
    4504:	ldr	r3, [r3, #4]
    4508:	sub	r3, r3, #1
    450c:	ldr	r2, [fp, #-112]	; 0xffffff90
    4510:	lsl	r3, r3, #4
    4514:	add	r3, r2, r3
    4518:	ldr	r3, [r3, #8]
    451c:	ldr	r3, [r3, #4]
    4520:	str	r3, [fp, #-24]	; 0xffffffe8
    4524:	ldr	r3, [fp, #-112]	; 0xffffff90
    4528:	ldr	r3, [r3, #4]
    452c:	sub	r3, r3, #1
    4530:	ldr	r2, [fp, #-112]	; 0xffffff90
    4534:	add	r3, r3, #1
    4538:	lsl	r3, r3, #4
    453c:	add	r3, r2, r3
    4540:	ldrd	r2, [r3]
    4544:	strd	r2, [fp, #-36]	; 0xffffffdc
    4548:	mov	r3, #1
    454c:	str	r3, [fp, #-20]	; 0xffffffec
    4550:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4554:	ldrd	r2, [r3, #24]
    4558:	sub	r1, fp, #44	; 0x2c
    455c:	ldr	r0, [fp, #-112]	; 0xffffff90
    4560:	bl	11b8 <get_bit_size_boundary>
    4564:	mov	r3, r0
    4568:	cmp	r3, #0
    456c:	beq	4578 <coda_ascii_cursor_read_double+0xdc>
    4570:	mvn	r3, #0
    4574:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    4578:	ldrd	r2, [fp, #-36]	; 0xffffffdc
    457c:	mov	r0, #7
    4580:	mov	r1, #0
    4584:	and	r4, r2, r0
    4588:	and	r5, r3, r1
    458c:	orrs	r3, r4, r5
    4590:	beq	45ac <coda_ascii_cursor_read_double+0x110>
    4594:	movw	r1, #0
    4598:	movt	r1, #0
    459c:	mvn	r0, #21
    45a0:	bl	0 <coda_set_error>
    45a4:	mvn	r3, #0
    45a8:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    45ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    45b0:	ldrd	r2, [r3, #24]
    45b4:	cmp	r2, #0
    45b8:	sbcs	r3, r3, #0
    45bc:	blt	4618 <coda_ascii_cursor_read_double+0x17c>
    45c0:	mov	r3, #0
    45c4:	str	r3, [fp, #-20]	; 0xffffffec
    45c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    45cc:	ldrd	r0, [r3, #24]
    45d0:	mov	r2, #0
    45d4:	mov	r3, #0
    45d8:	lsr	r2, r0, #3
    45dc:	orr	r2, r2, r1, lsl #29
    45e0:	asr	r3, r1, #3
    45e4:	mov	r3, r2
    45e8:	str	r3, [fp, #-16]
    45ec:	ldr	r3, [fp, #-16]
    45f0:	cmp	r3, #64	; 0x40
    45f4:	ble	4668 <coda_ascii_cursor_read_double+0x1cc>
    45f8:	movw	r3, #0
    45fc:	movt	r3, #0
    4600:	movw	r2, #1306	; 0x51a
    4604:	movw	r1, #0
    4608:	movt	r1, #0
    460c:	movw	r0, #0
    4610:	movt	r0, #0
    4614:	bl	0 <__assert_fail>
    4618:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    461c:	mov	r2, #0
    4620:	mov	r3, #0
    4624:	lsr	r2, r0, #3
    4628:	orr	r2, r2, r1, lsl #29
    462c:	asr	r3, r1, #3
    4630:	cmp	r2, #64	; 0x40
    4634:	sbcs	r3, r3, #0
    4638:	bge	4660 <coda_ascii_cursor_read_double+0x1c4>
    463c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    4640:	mov	r2, #0
    4644:	mov	r3, #0
    4648:	lsr	r2, r0, #3
    464c:	orr	r2, r2, r1, lsl #29
    4650:	asr	r3, r1, #3
    4654:	mov	r3, r2
    4658:	str	r3, [fp, #-16]
    465c:	b	4668 <coda_ascii_cursor_read_double+0x1cc>
    4660:	mov	r3, #64	; 0x40
    4664:	str	r3, [fp, #-16]
    4668:	ldr	r3, [fp, #-112]	; 0xffffff90
    466c:	ldr	lr, [r3]
    4670:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    4674:	mov	r2, #0
    4678:	mov	r3, #0
    467c:	lsr	r2, r0, #3
    4680:	orr	r2, r2, r1, lsl #29
    4684:	asr	r3, r1, #3
    4688:	ldr	r1, [fp, #-16]
    468c:	mov	r0, r1
    4690:	asr	r1, r0, #31
    4694:	sub	ip, fp, #108	; 0x6c
    4698:	str	ip, [sp, #8]
    469c:	strd	r0, [sp]
    46a0:	mov	r0, lr
    46a4:	bl	204 <read_bytes_in_bounds>
    46a8:	mov	r3, r0
    46ac:	cmp	r3, #0
    46b0:	beq	46bc <coda_ascii_cursor_read_double+0x220>
    46b4:	mvn	r3, #0
    46b8:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    46bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    46c0:	ldr	r3, [r3, #52]	; 0x34
    46c4:	cmp	r3, #0
    46c8:	beq	4710 <coda_ascii_cursor_read_double+0x274>
    46cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    46d0:	ldr	r2, [r3, #52]	; 0x34
    46d4:	sub	r0, fp, #108	; 0x6c
    46d8:	ldr	r3, [fp, #-116]	; 0xffffff8c
    46dc:	str	r3, [sp]
    46e0:	ldr	r3, [fp, #-20]	; 0xffffffec
    46e4:	ldr	r1, [fp, #-16]
    46e8:	bl	1a44 <parse_float_mapping>
    46ec:	mov	r3, r0
    46f0:	cmp	r3, #0
    46f4:	beq	4718 <coda_ascii_cursor_read_double+0x27c>
    46f8:	cmp	r3, #1
    46fc:	bne	4708 <coda_ascii_cursor_read_double+0x26c>
    4700:	mov	r3, #0
    4704:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    4708:	mvn	r3, #0
    470c:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    4710:	nop	{0}
    4714:	b	471c <coda_ascii_cursor_read_double+0x280>
    4718:	nop	{0}
    471c:	sub	r0, fp, #108	; 0x6c
    4720:	ldr	r3, [fp, #-20]	; 0xffffffec
    4724:	ldr	r2, [fp, #-116]	; 0xffffff8c
    4728:	ldr	r1, [fp, #-16]
    472c:	bl	21bc <coda_ascii_parse_double>
    4730:	mov	r3, r0
    4734:	cmp	r3, #0
    4738:	bge	4744 <coda_ascii_cursor_read_double+0x2a8>
    473c:	mvn	r3, #0
    4740:	b	4748 <coda_ascii_cursor_read_double+0x2ac>
    4744:	mov	r3, #0
    4748:	mov	r0, r3
    474c:	sub	sp, fp, #12
    4750:	ldrd	r4, [sp]
    4754:	ldr	fp, [sp, #8]
    4758:	add	sp, sp, #12
    475c:	pop	{pc}		; (ldr pc, [sp], #4)

00004760 <coda_ascii_cursor_read_float>:
    4760:	str	fp, [sp, #-8]!
    4764:	str	lr, [sp, #4]
    4768:	add	fp, sp, #4
    476c:	sub	sp, sp, #16
    4770:	str	r0, [fp, #-16]
    4774:	str	r1, [fp, #-20]	; 0xffffffec
    4778:	sub	r3, fp, #12
    477c:	mov	r1, r3
    4780:	ldr	r0, [fp, #-16]
    4784:	bl	449c <coda_ascii_cursor_read_double>
    4788:	mov	r3, r0
    478c:	cmp	r3, #0
    4790:	beq	479c <coda_ascii_cursor_read_float+0x3c>
    4794:	mvn	r3, #0
    4798:	b	47b0 <coda_ascii_cursor_read_float+0x50>
    479c:	vldr	d7, [fp, #-12]
    47a0:	vcvt.f32.f64	s15, d7
    47a4:	ldr	r3, [fp, #-20]	; 0xffffffec
    47a8:	vstr	s15, [r3]
    47ac:	mov	r3, #0
    47b0:	mov	r0, r3
    47b4:	sub	sp, fp, #4
    47b8:	ldr	fp, [sp]
    47bc:	add	sp, sp, #4
    47c0:	pop	{pc}		; (ldr pc, [sp], #4)

000047c4 <coda_ascii_cursor_read_char>:
    47c4:	strd	r4, [sp, #-16]!
    47c8:	str	fp, [sp, #8]
    47cc:	str	lr, [sp, #12]
    47d0:	add	fp, sp, #12
    47d4:	sub	sp, sp, #40	; 0x28
    47d8:	str	r0, [fp, #-32]	; 0xffffffe0
    47dc:	str	r1, [fp, #-36]	; 0xffffffdc
    47e0:	sub	r1, fp, #28
    47e4:	mov	r2, #8
    47e8:	mov	r3, #0
    47ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
    47f0:	bl	11b8 <get_bit_size_boundary>
    47f4:	mov	r3, r0
    47f8:	cmp	r3, #0
    47fc:	beq	4808 <coda_ascii_cursor_read_char+0x44>
    4800:	mvn	r3, #0
    4804:	b	48a4 <coda_ascii_cursor_read_char+0xe0>
    4808:	ldr	r3, [fp, #-32]	; 0xffffffe0
    480c:	ldr	r3, [r3, #4]
    4810:	sub	r3, r3, #1
    4814:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4818:	add	r3, r3, #1
    481c:	lsl	r3, r3, #4
    4820:	add	r3, r2, r3
    4824:	ldrd	r2, [r3]
    4828:	strd	r2, [fp, #-20]	; 0xffffffec
    482c:	ldrd	r2, [fp, #-20]	; 0xffffffec
    4830:	mov	r0, #7
    4834:	mov	r1, #0
    4838:	and	r4, r2, r0
    483c:	and	r5, r3, r1
    4840:	orrs	r3, r4, r5
    4844:	beq	4864 <coda_ascii_cursor_read_char+0xa0>
    4848:	movw	r1, #0
    484c:	movt	r1, #0
    4850:	movw	r0, #65236	; 0xfed4
    4854:	movt	r0, #65535	; 0xffff
    4858:	bl	0 <coda_set_error>
    485c:	mvn	r3, #0
    4860:	b	48a4 <coda_ascii_cursor_read_char+0xe0>
    4864:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4868:	ldr	ip, [r3]
    486c:	ldrd	r0, [fp, #-20]	; 0xffffffec
    4870:	mov	r2, #0
    4874:	mov	r3, #0
    4878:	lsr	r2, r0, #3
    487c:	orr	r2, r2, r1, lsl #29
    4880:	asr	r3, r1, #3
    4884:	ldr	r1, [fp, #-36]	; 0xffffffdc
    4888:	str	r1, [sp, #8]
    488c:	mov	r0, #1
    4890:	mov	r1, #0
    4894:	strd	r0, [sp]
    4898:	mov	r0, ip
    489c:	bl	204 <read_bytes_in_bounds>
    48a0:	mov	r3, r0
    48a4:	mov	r0, r3
    48a8:	sub	sp, fp, #12
    48ac:	ldrd	r4, [sp]
    48b0:	ldr	fp, [sp, #8]
    48b4:	add	sp, sp, #12
    48b8:	pop	{pc}		; (ldr pc, [sp], #4)

000048bc <coda_ascii_cursor_read_string>:
    48bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    48c0:	strd	r6, [sp, #8]
    48c4:	str	fp, [sp, #16]
    48c8:	str	lr, [sp, #20]
    48cc:	add	fp, sp, #20
    48d0:	sub	sp, sp, #72	; 0x48
    48d4:	str	r0, [fp, #-64]	; 0xffffffc0
    48d8:	str	r1, [fp, #-68]	; 0xffffffbc
    48dc:	str	r2, [fp, #-72]	; 0xffffffb8
    48e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
    48e4:	ldr	r3, [r3, #4]
    48e8:	sub	r3, r3, #1
    48ec:	ldr	r2, [fp, #-64]	; 0xffffffc0
    48f0:	lsl	r3, r3, #4
    48f4:	add	r3, r2, r3
    48f8:	ldr	r3, [r3, #8]
    48fc:	ldr	r3, [r3]
    4900:	cmp	r3, #99	; 0x63
    4904:	bhi	4928 <coda_ascii_cursor_read_string+0x6c>
    4908:	ldr	r3, [fp, #-64]	; 0xffffffc0
    490c:	ldr	r3, [r3, #4]
    4910:	sub	r3, r3, #1
    4914:	ldr	r2, [fp, #-64]	; 0xffffffc0
    4918:	lsl	r3, r3, #4
    491c:	add	r3, r2, r3
    4920:	ldr	r3, [r3, #8]
    4924:	b	4948 <coda_ascii_cursor_read_string+0x8c>
    4928:	ldr	r3, [fp, #-64]	; 0xffffffc0
    492c:	ldr	r3, [r3, #4]
    4930:	sub	r3, r3, #1
    4934:	ldr	r2, [fp, #-64]	; 0xffffffc0
    4938:	lsl	r3, r3, #4
    493c:	add	r3, r2, r3
    4940:	ldr	r3, [r3, #8]
    4944:	ldr	r3, [r3, #4]
    4948:	str	r3, [fp, #-32]	; 0xffffffe0
    494c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4950:	ldr	r3, [r3, #4]
    4954:	sub	r3, r3, #1
    4958:	ldr	r2, [fp, #-64]	; 0xffffffc0
    495c:	add	r3, r3, #1
    4960:	lsl	r3, r3, #4
    4964:	add	r3, r2, r3
    4968:	ldrd	r2, [r3]
    496c:	strd	r2, [fp, #-44]	; 0xffffffd4
    4970:	mov	r2, #0
    4974:	mov	r3, #0
    4978:	strd	r2, [fp, #-28]	; 0xffffffe4
    497c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    4980:	mov	r0, #7
    4984:	mov	r1, #0
    4988:	and	r6, r2, r0
    498c:	and	r7, r3, r1
    4990:	orrs	r3, r6, r7
    4994:	beq	49b4 <coda_ascii_cursor_read_string+0xf8>
    4998:	movw	r1, #0
    499c:	movt	r1, #0
    49a0:	movw	r0, #65236	; 0xfed4
    49a4:	movt	r0, #65535	; 0xffff
    49a8:	bl	0 <coda_set_error>
    49ac:	mvn	r3, #0
    49b0:	b	4b40 <coda_ascii_cursor_read_string+0x284>
    49b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    49b8:	ldrd	r2, [r3, #24]
    49bc:	cmp	r2, #0
    49c0:	sbcs	r3, r3, #0
    49c4:	bge	4a44 <coda_ascii_cursor_read_string+0x188>
    49c8:	sub	r3, fp, #52	; 0x34
    49cc:	mov	r1, r3
    49d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
    49d4:	bl	2a94 <coda_ascii_cursor_get_bit_size>
    49d8:	mov	r3, r0
    49dc:	cmp	r3, #0
    49e0:	beq	49ec <coda_ascii_cursor_read_string+0x130>
    49e4:	mvn	r3, #0
    49e8:	b	4b40 <coda_ascii_cursor_read_string+0x284>
    49ec:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    49f0:	mov	r0, #7
    49f4:	mov	r1, #0
    49f8:	and	r4, r2, r0
    49fc:	and	r5, r3, r1
    4a00:	orrs	r3, r4, r5
    4a04:	beq	4a24 <coda_ascii_cursor_read_string+0x168>
    4a08:	movw	r1, #0
    4a0c:	movt	r1, #0
    4a10:	movw	r0, #65236	; 0xfed4
    4a14:	movt	r0, #65535	; 0xffff
    4a18:	bl	0 <coda_set_error>
    4a1c:	mvn	r3, #0
    4a20:	b	4b40 <coda_ascii_cursor_read_string+0x284>
    4a24:	ldrd	r0, [fp, #-52]	; 0xffffffcc
    4a28:	mov	r2, #0
    4a2c:	mov	r3, #0
    4a30:	lsr	r2, r0, #3
    4a34:	orr	r2, r2, r1, lsl #29
    4a38:	asr	r3, r1, #3
    4a3c:	strd	r2, [fp, #-28]	; 0xffffffe4
    4a40:	b	4a8c <coda_ascii_cursor_read_string+0x1d0>
    4a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4a48:	ldrd	r2, [r3, #24]
    4a4c:	sub	r1, fp, #60	; 0x3c
    4a50:	ldr	r0, [fp, #-64]	; 0xffffffc0
    4a54:	bl	11b8 <get_bit_size_boundary>
    4a58:	mov	r3, r0
    4a5c:	cmp	r3, #0
    4a60:	beq	4a6c <coda_ascii_cursor_read_string+0x1b0>
    4a64:	mvn	r3, #0
    4a68:	b	4b40 <coda_ascii_cursor_read_string+0x284>
    4a6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4a70:	ldrd	r0, [r3, #24]
    4a74:	mov	r2, #0
    4a78:	mov	r3, #0
    4a7c:	lsr	r2, r0, #3
    4a80:	orr	r2, r2, r1, lsl #29
    4a84:	asr	r3, r1, #3
    4a88:	strd	r2, [fp, #-28]	; 0xffffffe4
    4a8c:	ldr	r3, [fp, #-72]	; 0xffffffb8
    4a90:	mov	r2, r3
    4a94:	asr	r3, r2, #31
    4a98:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    4a9c:	cmp	r0, r2
    4aa0:	sbcs	r3, r1, r3
    4aa4:	blt	4abc <coda_ascii_cursor_read_string+0x200>
    4aa8:	ldr	r3, [fp, #-72]	; 0xffffffb8
    4aac:	sub	r3, r3, #1
    4ab0:	mov	r2, r3
    4ab4:	asr	r3, r2, #31
    4ab8:	strd	r2, [fp, #-28]	; 0xffffffe4
    4abc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    4ac0:	cmp	r2, #1
    4ac4:	sbcs	r3, r3, #0
    4ac8:	blt	4b30 <coda_ascii_cursor_read_string+0x274>
    4acc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    4ad0:	ldr	ip, [r3]
    4ad4:	ldrd	r0, [fp, #-44]	; 0xffffffd4
    4ad8:	mov	r2, #0
    4adc:	mov	r3, #0
    4ae0:	lsr	r2, r0, #3
    4ae4:	orr	r2, r2, r1, lsl #29
    4ae8:	asr	r3, r1, #3
    4aec:	ldr	r1, [fp, #-68]	; 0xffffffbc
    4af0:	str	r1, [sp, #8]
    4af4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    4af8:	strd	r0, [sp]
    4afc:	mov	r0, ip
    4b00:	bl	0 <read_bytes>
    4b04:	mov	r3, r0
    4b08:	cmp	r3, #0
    4b0c:	beq	4b18 <coda_ascii_cursor_read_string+0x25c>
    4b10:	mvn	r3, #0
    4b14:	b	4b40 <coda_ascii_cursor_read_string+0x284>
    4b18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4b1c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    4b20:	add	r3, r2, r3
    4b24:	mov	r2, #0
    4b28:	strb	r2, [r3]
    4b2c:	b	4b3c <coda_ascii_cursor_read_string+0x280>
    4b30:	ldr	r3, [fp, #-68]	; 0xffffffbc
    4b34:	mov	r2, #0
    4b38:	strb	r2, [r3]
    4b3c:	mov	r3, #0
    4b40:	mov	r0, r3
    4b44:	sub	sp, fp, #20
    4b48:	ldrd	r4, [sp]
    4b4c:	ldrd	r6, [sp, #8]
    4b50:	ldr	fp, [sp, #16]
    4b54:	add	sp, sp, #20
    4b58:	pop	{pc}		; (ldr pc, [sp], #4)

00004b5c <coda_ascii_cursor_read_bits>:
    4b5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
    4b60:	strd	r6, [sp, #8]
    4b64:	strd	r8, [sp, #16]
    4b68:	str	fp, [sp, #24]
    4b6c:	str	lr, [sp, #28]
    4b70:	add	fp, sp, #28
    4b74:	sub	sp, sp, #40	; 0x28
    4b78:	str	r0, [fp, #-32]	; 0xffffffe0
    4b7c:	str	r1, [fp, #-36]	; 0xffffffdc
    4b80:	strd	r2, [fp, #-44]	; 0xffffffd4
    4b84:	ldrd	r2, [fp, #4]
    4b88:	mov	r0, #7
    4b8c:	mov	r1, #0
    4b90:	and	ip, r2, r0
    4b94:	str	ip, [fp, #-52]	; 0xffffffcc
    4b98:	and	r3, r3, r1
    4b9c:	str	r3, [fp, #-48]	; 0xffffffd0
    4ba0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
    4ba4:	orrs	r3, r2, r3
    4ba8:	beq	4bc4 <coda_ascii_cursor_read_bits+0x68>
    4bac:	movw	r1, #0
    4bb0:	movt	r1, #0
    4bb4:	mvn	r0, #99	; 0x63
    4bb8:	bl	0 <coda_set_error>
    4bbc:	mvn	r3, #0
    4bc0:	b	4ca4 <coda_ascii_cursor_read_bits+0x148>
    4bc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4bc8:	ldr	r3, [r3, #4]
    4bcc:	sub	r3, r3, #1
    4bd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4bd4:	add	r3, r3, #1
    4bd8:	lsl	r3, r3, #4
    4bdc:	add	r3, r2, r3
    4be0:	ldrd	r0, [r3]
    4be4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    4be8:	adds	r6, r0, r2
    4bec:	adc	r7, r1, r3
    4bf0:	mov	r2, #7
    4bf4:	mov	r3, #0
    4bf8:	and	r8, r6, r2
    4bfc:	and	r9, r7, r3
    4c00:	orrs	r3, r8, r9
    4c04:	beq	4c24 <coda_ascii_cursor_read_bits+0xc8>
    4c08:	movw	r1, #0
    4c0c:	movt	r1, #0
    4c10:	movw	r0, #65236	; 0xfed4
    4c14:	movt	r0, #65535	; 0xffff
    4c18:	bl	0 <coda_set_error>
    4c1c:	mvn	r3, #0
    4c20:	b	4ca4 <coda_ascii_cursor_read_bits+0x148>
    4c24:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4c28:	ldr	lr, [r3]
    4c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    4c30:	ldr	r3, [r3, #4]
    4c34:	sub	r3, r3, #1
    4c38:	ldr	r2, [fp, #-32]	; 0xffffffe0
    4c3c:	add	r3, r3, #1
    4c40:	lsl	r3, r3, #4
    4c44:	add	r3, r2, r3
    4c48:	ldrd	r0, [r3]
    4c4c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
    4c50:	adds	r4, r0, r2
    4c54:	adc	r5, r1, r3
    4c58:	mov	r0, #0
    4c5c:	mov	r1, #0
    4c60:	lsr	r0, r4, #3
    4c64:	orr	r0, r0, r5, lsl #29
    4c68:	asr	r1, r5, #3
    4c6c:	ldrd	r4, [fp, #4]
    4c70:	mov	r2, #0
    4c74:	mov	r3, #0
    4c78:	lsr	r2, r4, #3
    4c7c:	orr	r2, r2, r5, lsl #29
    4c80:	asr	r3, r5, #3
    4c84:	ldr	ip, [fp, #-36]	; 0xffffffdc
    4c88:	str	ip, [sp, #8]
    4c8c:	strd	r2, [sp]
    4c90:	mov	r2, r0
    4c94:	mov	r3, r1
    4c98:	mov	r0, lr
    4c9c:	bl	0 <read_bytes>
    4ca0:	mov	r3, r0
    4ca4:	mov	r0, r3
    4ca8:	sub	sp, fp, #28
    4cac:	ldrd	r4, [sp]
    4cb0:	ldrd	r6, [sp, #8]
    4cb4:	ldrd	r8, [sp, #16]
    4cb8:	ldr	fp, [sp, #24]
    4cbc:	add	sp, sp, #28
    4cc0:	pop	{pc}		; (ldr pc, [sp], #4)

00004cc4 <coda_ascii_cursor_read_bytes>:
    4cc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
    4cc8:	strd	r6, [sp, #8]
    4ccc:	str	fp, [sp, #16]
    4cd0:	str	lr, [sp, #20]
    4cd4:	add	fp, sp, #20
    4cd8:	sub	sp, sp, #32
    4cdc:	str	r0, [fp, #-24]	; 0xffffffe8
    4ce0:	str	r1, [fp, #-28]	; 0xffffffe4
    4ce4:	strd	r2, [fp, #-36]	; 0xffffffdc
    4ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4cec:	ldr	r3, [r3, #4]
    4cf0:	sub	r3, r3, #1
    4cf4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4cf8:	add	r3, r3, #1
    4cfc:	lsl	r3, r3, #4
    4d00:	add	r3, r2, r3
    4d04:	ldrd	r2, [r3]
    4d08:	mov	r0, #7
    4d0c:	mov	r1, #0
    4d10:	and	r4, r2, r0
    4d14:	and	r5, r3, r1
    4d18:	orrs	r3, r4, r5
    4d1c:	beq	4d3c <coda_ascii_cursor_read_bytes+0x78>
    4d20:	movw	r1, #0
    4d24:	movt	r1, #0
    4d28:	movw	r0, #65236	; 0xfed4
    4d2c:	movt	r0, #65535	; 0xffff
    4d30:	bl	0 <coda_set_error>
    4d34:	mvn	r3, #0
    4d38:	b	4da8 <coda_ascii_cursor_read_bytes+0xe4>
    4d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d40:	ldr	ip, [r3]
    4d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4d48:	ldr	r3, [r3, #4]
    4d4c:	sub	r3, r3, #1
    4d50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    4d54:	add	r3, r3, #1
    4d58:	lsl	r3, r3, #4
    4d5c:	add	r3, r2, r3
    4d60:	ldrd	r0, [r3]
    4d64:	mov	r2, #0
    4d68:	mov	r3, #0
    4d6c:	lsr	r2, r0, #3
    4d70:	orr	r2, r2, r1, lsl #29
    4d74:	asr	r3, r1, #3
    4d78:	ldrd	r0, [fp, #-36]	; 0xffffffdc
    4d7c:	adds	r6, r2, r0
    4d80:	adc	r7, r3, r1
    4d84:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4d88:	str	r3, [sp, #8]
    4d8c:	ldrd	r2, [fp, #4]
    4d90:	strd	r2, [sp]
    4d94:	mov	r2, r6
    4d98:	mov	r3, r7
    4d9c:	mov	r0, ip
    4da0:	bl	0 <read_bytes>
    4da4:	mov	r3, r0
    4da8:	mov	r0, r3
    4dac:	sub	sp, fp, #20
    4db0:	ldrd	r4, [sp]
    4db4:	ldrd	r6, [sp, #8]
    4db8:	ldr	fp, [sp, #16]
    4dbc:	add	sp, sp, #20
    4dc0:	pop	{pc}		; (ldr pc, [sp], #4)

00004dc4 <coda_ascii_cursor_read_int8_array>:
    4dc4:	str	fp, [sp, #-8]!
    4dc8:	str	lr, [sp, #4]
    4dcc:	add	fp, sp, #4
    4dd0:	sub	sp, sp, #32
    4dd4:	str	r0, [fp, #-16]
    4dd8:	str	r1, [fp, #-20]	; 0xffffffec
    4ddc:	str	r2, [fp, #-24]	; 0xffffffe8
    4de0:	ldr	r3, [fp, #-16]
    4de4:	ldr	r3, [r3, #4]
    4de8:	sub	r3, r3, #1
    4dec:	ldr	r2, [fp, #-16]
    4df0:	lsl	r3, r3, #4
    4df4:	add	r3, r2, r3
    4df8:	ldr	r3, [r3, #8]
    4dfc:	ldr	r3, [r3]
    4e00:	cmp	r3, #99	; 0x63
    4e04:	bhi	4e28 <coda_ascii_cursor_read_int8_array+0x64>
    4e08:	ldr	r3, [fp, #-16]
    4e0c:	ldr	r3, [r3, #4]
    4e10:	sub	r3, r3, #1
    4e14:	ldr	r2, [fp, #-16]
    4e18:	lsl	r3, r3, #4
    4e1c:	add	r3, r2, r3
    4e20:	ldr	r3, [r3, #8]
    4e24:	b	4e48 <coda_ascii_cursor_read_int8_array+0x84>
    4e28:	ldr	r3, [fp, #-16]
    4e2c:	ldr	r3, [r3, #4]
    4e30:	sub	r3, r3, #1
    4e34:	ldr	r2, [fp, #-16]
    4e38:	lsl	r3, r3, #4
    4e3c:	add	r3, r2, r3
    4e40:	ldr	r3, [r3, #8]
    4e44:	ldr	r3, [r3, #4]
    4e48:	str	r3, [fp, #-8]
    4e4c:	ldr	r3, [fp, #-8]
    4e50:	ldr	r3, [r3, #40]	; 0x28
    4e54:	ldr	r3, [r3]
    4e58:	cmp	r3, #0
    4e5c:	beq	4e80 <coda_ascii_cursor_read_int8_array+0xbc>
    4e60:	movw	r3, #0
    4e64:	movt	r3, #0
    4e68:	movw	r2, #1464	; 0x5b8
    4e6c:	movw	r1, #0
    4e70:	movt	r1, #0
    4e74:	movw	r0, #0
    4e78:	movt	r0, #0
    4e7c:	bl	0 <__assert_fail>
    4e80:	mov	r3, #0
    4e84:	str	r3, [sp]
    4e88:	mov	r3, #1
    4e8c:	ldr	r2, [fp, #-20]	; 0xffffffec
    4e90:	movw	r1, #0
    4e94:	movt	r1, #0
    4e98:	ldr	r0, [fp, #-16]
    4e9c:	bl	300 <read_array>
    4ea0:	mov	r3, r0
    4ea4:	cmp	r3, #0
    4ea8:	beq	4eb4 <coda_ascii_cursor_read_int8_array+0xf0>
    4eac:	mvn	r3, #0
    4eb0:	b	4ee8 <coda_ascii_cursor_read_int8_array+0x124>
    4eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4eb8:	cmp	r3, #0
    4ebc:	beq	4ee4 <coda_ascii_cursor_read_int8_array+0x120>
    4ec0:	mov	r2, #1
    4ec4:	ldr	r1, [fp, #-20]	; 0xffffffec
    4ec8:	ldr	r0, [fp, #-16]
    4ecc:	bl	820 <transpose_array>
    4ed0:	mov	r3, r0
    4ed4:	cmp	r3, #0
    4ed8:	beq	4ee4 <coda_ascii_cursor_read_int8_array+0x120>
    4edc:	mvn	r3, #0
    4ee0:	b	4ee8 <coda_ascii_cursor_read_int8_array+0x124>
    4ee4:	mov	r3, #0
    4ee8:	mov	r0, r3
    4eec:	sub	sp, fp, #4
    4ef0:	ldr	fp, [sp]
    4ef4:	add	sp, sp, #4
    4ef8:	pop	{pc}		; (ldr pc, [sp], #4)

00004efc <coda_ascii_cursor_read_uint8_array>:
    4efc:	str	fp, [sp, #-8]!
    4f00:	str	lr, [sp, #4]
    4f04:	add	fp, sp, #4
    4f08:	sub	sp, sp, #32
    4f0c:	str	r0, [fp, #-16]
    4f10:	str	r1, [fp, #-20]	; 0xffffffec
    4f14:	str	r2, [fp, #-24]	; 0xffffffe8
    4f18:	ldr	r3, [fp, #-16]
    4f1c:	ldr	r3, [r3, #4]
    4f20:	sub	r3, r3, #1
    4f24:	ldr	r2, [fp, #-16]
    4f28:	lsl	r3, r3, #4
    4f2c:	add	r3, r2, r3
    4f30:	ldr	r3, [r3, #8]
    4f34:	ldr	r3, [r3]
    4f38:	cmp	r3, #99	; 0x63
    4f3c:	bhi	4f60 <coda_ascii_cursor_read_uint8_array+0x64>
    4f40:	ldr	r3, [fp, #-16]
    4f44:	ldr	r3, [r3, #4]
    4f48:	sub	r3, r3, #1
    4f4c:	ldr	r2, [fp, #-16]
    4f50:	lsl	r3, r3, #4
    4f54:	add	r3, r2, r3
    4f58:	ldr	r3, [r3, #8]
    4f5c:	b	4f80 <coda_ascii_cursor_read_uint8_array+0x84>
    4f60:	ldr	r3, [fp, #-16]
    4f64:	ldr	r3, [r3, #4]
    4f68:	sub	r3, r3, #1
    4f6c:	ldr	r2, [fp, #-16]
    4f70:	lsl	r3, r3, #4
    4f74:	add	r3, r2, r3
    4f78:	ldr	r3, [r3, #8]
    4f7c:	ldr	r3, [r3, #4]
    4f80:	str	r3, [fp, #-8]
    4f84:	ldr	r3, [fp, #-8]
    4f88:	ldr	r3, [r3, #40]	; 0x28
    4f8c:	ldr	r3, [r3]
    4f90:	cmp	r3, #0
    4f94:	beq	4fb8 <coda_ascii_cursor_read_uint8_array+0xbc>
    4f98:	movw	r3, #0
    4f9c:	movt	r3, #0
    4fa0:	movw	r2, #1484	; 0x5cc
    4fa4:	movw	r1, #0
    4fa8:	movt	r1, #0
    4fac:	movw	r0, #0
    4fb0:	movt	r0, #0
    4fb4:	bl	0 <__assert_fail>
    4fb8:	mov	r3, #0
    4fbc:	str	r3, [sp]
    4fc0:	mov	r3, #1
    4fc4:	ldr	r2, [fp, #-20]	; 0xffffffec
    4fc8:	movw	r1, #0
    4fcc:	movt	r1, #0
    4fd0:	ldr	r0, [fp, #-16]
    4fd4:	bl	300 <read_array>
    4fd8:	mov	r3, r0
    4fdc:	cmp	r3, #0
    4fe0:	beq	4fec <coda_ascii_cursor_read_uint8_array+0xf0>
    4fe4:	mvn	r3, #0
    4fe8:	b	5020 <coda_ascii_cursor_read_uint8_array+0x124>
    4fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ff0:	cmp	r3, #0
    4ff4:	beq	501c <coda_ascii_cursor_read_uint8_array+0x120>
    4ff8:	mov	r2, #1
    4ffc:	ldr	r1, [fp, #-20]	; 0xffffffec
    5000:	ldr	r0, [fp, #-16]
    5004:	bl	820 <transpose_array>
    5008:	mov	r3, r0
    500c:	cmp	r3, #0
    5010:	beq	501c <coda_ascii_cursor_read_uint8_array+0x120>
    5014:	mvn	r3, #0
    5018:	b	5020 <coda_ascii_cursor_read_uint8_array+0x124>
    501c:	mov	r3, #0
    5020:	mov	r0, r3
    5024:	sub	sp, fp, #4
    5028:	ldr	fp, [sp]
    502c:	add	sp, sp, #4
    5030:	pop	{pc}		; (ldr pc, [sp], #4)

00005034 <coda_ascii_cursor_read_int16_array>:
    5034:	str	fp, [sp, #-8]!
    5038:	str	lr, [sp, #4]
    503c:	add	fp, sp, #4
    5040:	sub	sp, sp, #32
    5044:	str	r0, [fp, #-16]
    5048:	str	r1, [fp, #-20]	; 0xffffffec
    504c:	str	r2, [fp, #-24]	; 0xffffffe8
    5050:	ldr	r3, [fp, #-16]
    5054:	ldr	r3, [r3, #4]
    5058:	sub	r3, r3, #1
    505c:	ldr	r2, [fp, #-16]
    5060:	lsl	r3, r3, #4
    5064:	add	r3, r2, r3
    5068:	ldr	r3, [r3, #8]
    506c:	ldr	r3, [r3]
    5070:	cmp	r3, #99	; 0x63
    5074:	bhi	5098 <coda_ascii_cursor_read_int16_array+0x64>
    5078:	ldr	r3, [fp, #-16]
    507c:	ldr	r3, [r3, #4]
    5080:	sub	r3, r3, #1
    5084:	ldr	r2, [fp, #-16]
    5088:	lsl	r3, r3, #4
    508c:	add	r3, r2, r3
    5090:	ldr	r3, [r3, #8]
    5094:	b	50b8 <coda_ascii_cursor_read_int16_array+0x84>
    5098:	ldr	r3, [fp, #-16]
    509c:	ldr	r3, [r3, #4]
    50a0:	sub	r3, r3, #1
    50a4:	ldr	r2, [fp, #-16]
    50a8:	lsl	r3, r3, #4
    50ac:	add	r3, r2, r3
    50b0:	ldr	r3, [r3, #8]
    50b4:	ldr	r3, [r3, #4]
    50b8:	str	r3, [fp, #-8]
    50bc:	ldr	r3, [fp, #-8]
    50c0:	ldr	r3, [r3, #40]	; 0x28
    50c4:	ldr	r3, [r3]
    50c8:	cmp	r3, #0
    50cc:	beq	50f0 <coda_ascii_cursor_read_int16_array+0xbc>
    50d0:	movw	r3, #0
    50d4:	movt	r3, #0
    50d8:	mov	r2, #1504	; 0x5e0
    50dc:	movw	r1, #0
    50e0:	movt	r1, #0
    50e4:	movw	r0, #0
    50e8:	movt	r0, #0
    50ec:	bl	0 <__assert_fail>
    50f0:	mov	r3, #0
    50f4:	str	r3, [sp]
    50f8:	mov	r3, #2
    50fc:	ldr	r2, [fp, #-20]	; 0xffffffec
    5100:	movw	r1, #0
    5104:	movt	r1, #0
    5108:	ldr	r0, [fp, #-16]
    510c:	bl	300 <read_array>
    5110:	mov	r3, r0
    5114:	cmp	r3, #0
    5118:	beq	5124 <coda_ascii_cursor_read_int16_array+0xf0>
    511c:	mvn	r3, #0
    5120:	b	5158 <coda_ascii_cursor_read_int16_array+0x124>
    5124:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5128:	cmp	r3, #0
    512c:	beq	5154 <coda_ascii_cursor_read_int16_array+0x120>
    5130:	mov	r2, #2
    5134:	ldr	r1, [fp, #-20]	; 0xffffffec
    5138:	ldr	r0, [fp, #-16]
    513c:	bl	820 <transpose_array>
    5140:	mov	r3, r0
    5144:	cmp	r3, #0
    5148:	beq	5154 <coda_ascii_cursor_read_int16_array+0x120>
    514c:	mvn	r3, #0
    5150:	b	5158 <coda_ascii_cursor_read_int16_array+0x124>
    5154:	mov	r3, #0
    5158:	mov	r0, r3
    515c:	sub	sp, fp, #4
    5160:	ldr	fp, [sp]
    5164:	add	sp, sp, #4
    5168:	pop	{pc}		; (ldr pc, [sp], #4)

0000516c <coda_ascii_cursor_read_uint16_array>:
    516c:	str	fp, [sp, #-8]!
    5170:	str	lr, [sp, #4]
    5174:	add	fp, sp, #4
    5178:	sub	sp, sp, #32
    517c:	str	r0, [fp, #-16]
    5180:	str	r1, [fp, #-20]	; 0xffffffec
    5184:	str	r2, [fp, #-24]	; 0xffffffe8
    5188:	ldr	r3, [fp, #-16]
    518c:	ldr	r3, [r3, #4]
    5190:	sub	r3, r3, #1
    5194:	ldr	r2, [fp, #-16]
    5198:	lsl	r3, r3, #4
    519c:	add	r3, r2, r3
    51a0:	ldr	r3, [r3, #8]
    51a4:	ldr	r3, [r3]
    51a8:	cmp	r3, #99	; 0x63
    51ac:	bhi	51d0 <coda_ascii_cursor_read_uint16_array+0x64>
    51b0:	ldr	r3, [fp, #-16]
    51b4:	ldr	r3, [r3, #4]
    51b8:	sub	r3, r3, #1
    51bc:	ldr	r2, [fp, #-16]
    51c0:	lsl	r3, r3, #4
    51c4:	add	r3, r2, r3
    51c8:	ldr	r3, [r3, #8]
    51cc:	b	51f0 <coda_ascii_cursor_read_uint16_array+0x84>
    51d0:	ldr	r3, [fp, #-16]
    51d4:	ldr	r3, [r3, #4]
    51d8:	sub	r3, r3, #1
    51dc:	ldr	r2, [fp, #-16]
    51e0:	lsl	r3, r3, #4
    51e4:	add	r3, r2, r3
    51e8:	ldr	r3, [r3, #8]
    51ec:	ldr	r3, [r3, #4]
    51f0:	str	r3, [fp, #-8]
    51f4:	ldr	r3, [fp, #-8]
    51f8:	ldr	r3, [r3, #40]	; 0x28
    51fc:	ldr	r3, [r3]
    5200:	cmp	r3, #0
    5204:	beq	5228 <coda_ascii_cursor_read_uint16_array+0xbc>
    5208:	movw	r3, #0
    520c:	movt	r3, #0
    5210:	movw	r2, #1524	; 0x5f4
    5214:	movw	r1, #0
    5218:	movt	r1, #0
    521c:	movw	r0, #0
    5220:	movt	r0, #0
    5224:	bl	0 <__assert_fail>
    5228:	mov	r3, #0
    522c:	str	r3, [sp]
    5230:	mov	r3, #2
    5234:	ldr	r2, [fp, #-20]	; 0xffffffec
    5238:	movw	r1, #0
    523c:	movt	r1, #0
    5240:	ldr	r0, [fp, #-16]
    5244:	bl	300 <read_array>
    5248:	mov	r3, r0
    524c:	cmp	r3, #0
    5250:	beq	525c <coda_ascii_cursor_read_uint16_array+0xf0>
    5254:	mvn	r3, #0
    5258:	b	5290 <coda_ascii_cursor_read_uint16_array+0x124>
    525c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5260:	cmp	r3, #0
    5264:	beq	528c <coda_ascii_cursor_read_uint16_array+0x120>
    5268:	mov	r2, #2
    526c:	ldr	r1, [fp, #-20]	; 0xffffffec
    5270:	ldr	r0, [fp, #-16]
    5274:	bl	820 <transpose_array>
    5278:	mov	r3, r0
    527c:	cmp	r3, #0
    5280:	beq	528c <coda_ascii_cursor_read_uint16_array+0x120>
    5284:	mvn	r3, #0
    5288:	b	5290 <coda_ascii_cursor_read_uint16_array+0x124>
    528c:	mov	r3, #0
    5290:	mov	r0, r3
    5294:	sub	sp, fp, #4
    5298:	ldr	fp, [sp]
    529c:	add	sp, sp, #4
    52a0:	pop	{pc}		; (ldr pc, [sp], #4)

000052a4 <coda_ascii_cursor_read_int32_array>:
    52a4:	str	fp, [sp, #-8]!
    52a8:	str	lr, [sp, #4]
    52ac:	add	fp, sp, #4
    52b0:	sub	sp, sp, #32
    52b4:	str	r0, [fp, #-16]
    52b8:	str	r1, [fp, #-20]	; 0xffffffec
    52bc:	str	r2, [fp, #-24]	; 0xffffffe8
    52c0:	ldr	r3, [fp, #-16]
    52c4:	ldr	r3, [r3, #4]
    52c8:	sub	r3, r3, #1
    52cc:	ldr	r2, [fp, #-16]
    52d0:	lsl	r3, r3, #4
    52d4:	add	r3, r2, r3
    52d8:	ldr	r3, [r3, #8]
    52dc:	ldr	r3, [r3]
    52e0:	cmp	r3, #99	; 0x63
    52e4:	bhi	5308 <coda_ascii_cursor_read_int32_array+0x64>
    52e8:	ldr	r3, [fp, #-16]
    52ec:	ldr	r3, [r3, #4]
    52f0:	sub	r3, r3, #1
    52f4:	ldr	r2, [fp, #-16]
    52f8:	lsl	r3, r3, #4
    52fc:	add	r3, r2, r3
    5300:	ldr	r3, [r3, #8]
    5304:	b	5328 <coda_ascii_cursor_read_int32_array+0x84>
    5308:	ldr	r3, [fp, #-16]
    530c:	ldr	r3, [r3, #4]
    5310:	sub	r3, r3, #1
    5314:	ldr	r2, [fp, #-16]
    5318:	lsl	r3, r3, #4
    531c:	add	r3, r2, r3
    5320:	ldr	r3, [r3, #8]
    5324:	ldr	r3, [r3, #4]
    5328:	str	r3, [fp, #-8]
    532c:	ldr	r3, [fp, #-8]
    5330:	ldr	r3, [r3, #40]	; 0x28
    5334:	ldr	r3, [r3]
    5338:	cmp	r3, #0
    533c:	beq	5360 <coda_ascii_cursor_read_int32_array+0xbc>
    5340:	movw	r3, #0
    5344:	movt	r3, #0
    5348:	movw	r2, #1544	; 0x608
    534c:	movw	r1, #0
    5350:	movt	r1, #0
    5354:	movw	r0, #0
    5358:	movt	r0, #0
    535c:	bl	0 <__assert_fail>
    5360:	mov	r3, #0
    5364:	str	r3, [sp]
    5368:	mov	r3, #4
    536c:	ldr	r2, [fp, #-20]	; 0xffffffec
    5370:	movw	r1, #0
    5374:	movt	r1, #0
    5378:	ldr	r0, [fp, #-16]
    537c:	bl	300 <read_array>
    5380:	mov	r3, r0
    5384:	cmp	r3, #0
    5388:	beq	5394 <coda_ascii_cursor_read_int32_array+0xf0>
    538c:	mvn	r3, #0
    5390:	b	53c8 <coda_ascii_cursor_read_int32_array+0x124>
    5394:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5398:	cmp	r3, #0
    539c:	beq	53c4 <coda_ascii_cursor_read_int32_array+0x120>
    53a0:	mov	r2, #4
    53a4:	ldr	r1, [fp, #-20]	; 0xffffffec
    53a8:	ldr	r0, [fp, #-16]
    53ac:	bl	820 <transpose_array>
    53b0:	mov	r3, r0
    53b4:	cmp	r3, #0
    53b8:	beq	53c4 <coda_ascii_cursor_read_int32_array+0x120>
    53bc:	mvn	r3, #0
    53c0:	b	53c8 <coda_ascii_cursor_read_int32_array+0x124>
    53c4:	mov	r3, #0
    53c8:	mov	r0, r3
    53cc:	sub	sp, fp, #4
    53d0:	ldr	fp, [sp]
    53d4:	add	sp, sp, #4
    53d8:	pop	{pc}		; (ldr pc, [sp], #4)

000053dc <coda_ascii_cursor_read_uint32_array>:
    53dc:	str	fp, [sp, #-8]!
    53e0:	str	lr, [sp, #4]
    53e4:	add	fp, sp, #4
    53e8:	sub	sp, sp, #32
    53ec:	str	r0, [fp, #-16]
    53f0:	str	r1, [fp, #-20]	; 0xffffffec
    53f4:	str	r2, [fp, #-24]	; 0xffffffe8
    53f8:	ldr	r3, [fp, #-16]
    53fc:	ldr	r3, [r3, #4]
    5400:	sub	r3, r3, #1
    5404:	ldr	r2, [fp, #-16]
    5408:	lsl	r3, r3, #4
    540c:	add	r3, r2, r3
    5410:	ldr	r3, [r3, #8]
    5414:	ldr	r3, [r3]
    5418:	cmp	r3, #99	; 0x63
    541c:	bhi	5440 <coda_ascii_cursor_read_uint32_array+0x64>
    5420:	ldr	r3, [fp, #-16]
    5424:	ldr	r3, [r3, #4]
    5428:	sub	r3, r3, #1
    542c:	ldr	r2, [fp, #-16]
    5430:	lsl	r3, r3, #4
    5434:	add	r3, r2, r3
    5438:	ldr	r3, [r3, #8]
    543c:	b	5460 <coda_ascii_cursor_read_uint32_array+0x84>
    5440:	ldr	r3, [fp, #-16]
    5444:	ldr	r3, [r3, #4]
    5448:	sub	r3, r3, #1
    544c:	ldr	r2, [fp, #-16]
    5450:	lsl	r3, r3, #4
    5454:	add	r3, r2, r3
    5458:	ldr	r3, [r3, #8]
    545c:	ldr	r3, [r3, #4]
    5460:	str	r3, [fp, #-8]
    5464:	ldr	r3, [fp, #-8]
    5468:	ldr	r3, [r3, #40]	; 0x28
    546c:	ldr	r3, [r3]
    5470:	cmp	r3, #0
    5474:	beq	5498 <coda_ascii_cursor_read_uint32_array+0xbc>
    5478:	movw	r3, #0
    547c:	movt	r3, #0
    5480:	movw	r2, #1564	; 0x61c
    5484:	movw	r1, #0
    5488:	movt	r1, #0
    548c:	movw	r0, #0
    5490:	movt	r0, #0
    5494:	bl	0 <__assert_fail>
    5498:	mov	r3, #0
    549c:	str	r3, [sp]
    54a0:	mov	r3, #4
    54a4:	ldr	r2, [fp, #-20]	; 0xffffffec
    54a8:	movw	r1, #0
    54ac:	movt	r1, #0
    54b0:	ldr	r0, [fp, #-16]
    54b4:	bl	300 <read_array>
    54b8:	mov	r3, r0
    54bc:	cmp	r3, #0
    54c0:	beq	54cc <coda_ascii_cursor_read_uint32_array+0xf0>
    54c4:	mvn	r3, #0
    54c8:	b	5500 <coda_ascii_cursor_read_uint32_array+0x124>
    54cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    54d0:	cmp	r3, #0
    54d4:	beq	54fc <coda_ascii_cursor_read_uint32_array+0x120>
    54d8:	mov	r2, #4
    54dc:	ldr	r1, [fp, #-20]	; 0xffffffec
    54e0:	ldr	r0, [fp, #-16]
    54e4:	bl	820 <transpose_array>
    54e8:	mov	r3, r0
    54ec:	cmp	r3, #0
    54f0:	beq	54fc <coda_ascii_cursor_read_uint32_array+0x120>
    54f4:	mvn	r3, #0
    54f8:	b	5500 <coda_ascii_cursor_read_uint32_array+0x124>
    54fc:	mov	r3, #0
    5500:	mov	r0, r3
    5504:	sub	sp, fp, #4
    5508:	ldr	fp, [sp]
    550c:	add	sp, sp, #4
    5510:	pop	{pc}		; (ldr pc, [sp], #4)

00005514 <coda_ascii_cursor_read_int64_array>:
    5514:	str	fp, [sp, #-8]!
    5518:	str	lr, [sp, #4]
    551c:	add	fp, sp, #4
    5520:	sub	sp, sp, #32
    5524:	str	r0, [fp, #-16]
    5528:	str	r1, [fp, #-20]	; 0xffffffec
    552c:	str	r2, [fp, #-24]	; 0xffffffe8
    5530:	ldr	r3, [fp, #-16]
    5534:	ldr	r3, [r3, #4]
    5538:	sub	r3, r3, #1
    553c:	ldr	r2, [fp, #-16]
    5540:	lsl	r3, r3, #4
    5544:	add	r3, r2, r3
    5548:	ldr	r3, [r3, #8]
    554c:	ldr	r3, [r3]
    5550:	cmp	r3, #99	; 0x63
    5554:	bhi	5578 <coda_ascii_cursor_read_int64_array+0x64>
    5558:	ldr	r3, [fp, #-16]
    555c:	ldr	r3, [r3, #4]
    5560:	sub	r3, r3, #1
    5564:	ldr	r2, [fp, #-16]
    5568:	lsl	r3, r3, #4
    556c:	add	r3, r2, r3
    5570:	ldr	r3, [r3, #8]
    5574:	b	5598 <coda_ascii_cursor_read_int64_array+0x84>
    5578:	ldr	r3, [fp, #-16]
    557c:	ldr	r3, [r3, #4]
    5580:	sub	r3, r3, #1
    5584:	ldr	r2, [fp, #-16]
    5588:	lsl	r3, r3, #4
    558c:	add	r3, r2, r3
    5590:	ldr	r3, [r3, #8]
    5594:	ldr	r3, [r3, #4]
    5598:	str	r3, [fp, #-8]
    559c:	ldr	r3, [fp, #-8]
    55a0:	ldr	r3, [r3, #40]	; 0x28
    55a4:	ldr	r3, [r3]
    55a8:	cmp	r3, #0
    55ac:	beq	55d0 <coda_ascii_cursor_read_int64_array+0xbc>
    55b0:	movw	r3, #0
    55b4:	movt	r3, #0
    55b8:	mov	r2, #1584	; 0x630
    55bc:	movw	r1, #0
    55c0:	movt	r1, #0
    55c4:	movw	r0, #0
    55c8:	movt	r0, #0
    55cc:	bl	0 <__assert_fail>
    55d0:	mov	r3, #0
    55d4:	str	r3, [sp]
    55d8:	mov	r3, #8
    55dc:	ldr	r2, [fp, #-20]	; 0xffffffec
    55e0:	movw	r1, #0
    55e4:	movt	r1, #0
    55e8:	ldr	r0, [fp, #-16]
    55ec:	bl	300 <read_array>
    55f0:	mov	r3, r0
    55f4:	cmp	r3, #0
    55f8:	beq	5604 <coda_ascii_cursor_read_int64_array+0xf0>
    55fc:	mvn	r3, #0
    5600:	b	5638 <coda_ascii_cursor_read_int64_array+0x124>
    5604:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5608:	cmp	r3, #0
    560c:	beq	5634 <coda_ascii_cursor_read_int64_array+0x120>
    5610:	mov	r2, #4
    5614:	ldr	r1, [fp, #-20]	; 0xffffffec
    5618:	ldr	r0, [fp, #-16]
    561c:	bl	820 <transpose_array>
    5620:	mov	r3, r0
    5624:	cmp	r3, #0
    5628:	beq	5634 <coda_ascii_cursor_read_int64_array+0x120>
    562c:	mvn	r3, #0
    5630:	b	5638 <coda_ascii_cursor_read_int64_array+0x124>
    5634:	mov	r3, #0
    5638:	mov	r0, r3
    563c:	sub	sp, fp, #4
    5640:	ldr	fp, [sp]
    5644:	add	sp, sp, #4
    5648:	pop	{pc}		; (ldr pc, [sp], #4)

0000564c <coda_ascii_cursor_read_uint64_array>:
    564c:	str	fp, [sp, #-8]!
    5650:	str	lr, [sp, #4]
    5654:	add	fp, sp, #4
    5658:	sub	sp, sp, #32
    565c:	str	r0, [fp, #-16]
    5660:	str	r1, [fp, #-20]	; 0xffffffec
    5664:	str	r2, [fp, #-24]	; 0xffffffe8
    5668:	ldr	r3, [fp, #-16]
    566c:	ldr	r3, [r3, #4]
    5670:	sub	r3, r3, #1
    5674:	ldr	r2, [fp, #-16]
    5678:	lsl	r3, r3, #4
    567c:	add	r3, r2, r3
    5680:	ldr	r3, [r3, #8]
    5684:	ldr	r3, [r3]
    5688:	cmp	r3, #99	; 0x63
    568c:	bhi	56b0 <coda_ascii_cursor_read_uint64_array+0x64>
    5690:	ldr	r3, [fp, #-16]
    5694:	ldr	r3, [r3, #4]
    5698:	sub	r3, r3, #1
    569c:	ldr	r2, [fp, #-16]
    56a0:	lsl	r3, r3, #4
    56a4:	add	r3, r2, r3
    56a8:	ldr	r3, [r3, #8]
    56ac:	b	56d0 <coda_ascii_cursor_read_uint64_array+0x84>
    56b0:	ldr	r3, [fp, #-16]
    56b4:	ldr	r3, [r3, #4]
    56b8:	sub	r3, r3, #1
    56bc:	ldr	r2, [fp, #-16]
    56c0:	lsl	r3, r3, #4
    56c4:	add	r3, r2, r3
    56c8:	ldr	r3, [r3, #8]
    56cc:	ldr	r3, [r3, #4]
    56d0:	str	r3, [fp, #-8]
    56d4:	ldr	r3, [fp, #-8]
    56d8:	ldr	r3, [r3, #40]	; 0x28
    56dc:	ldr	r3, [r3]
    56e0:	cmp	r3, #0
    56e4:	beq	5708 <coda_ascii_cursor_read_uint64_array+0xbc>
    56e8:	movw	r3, #0
    56ec:	movt	r3, #0
    56f0:	movw	r2, #1604	; 0x644
    56f4:	movw	r1, #0
    56f8:	movt	r1, #0
    56fc:	movw	r0, #0
    5700:	movt	r0, #0
    5704:	bl	0 <__assert_fail>
    5708:	mov	r3, #0
    570c:	str	r3, [sp]
    5710:	mov	r3, #8
    5714:	ldr	r2, [fp, #-20]	; 0xffffffec
    5718:	movw	r1, #0
    571c:	movt	r1, #0
    5720:	ldr	r0, [fp, #-16]
    5724:	bl	300 <read_array>
    5728:	mov	r3, r0
    572c:	cmp	r3, #0
    5730:	beq	573c <coda_ascii_cursor_read_uint64_array+0xf0>
    5734:	mvn	r3, #0
    5738:	b	5770 <coda_ascii_cursor_read_uint64_array+0x124>
    573c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5740:	cmp	r3, #0
    5744:	beq	576c <coda_ascii_cursor_read_uint64_array+0x120>
    5748:	mov	r2, #8
    574c:	ldr	r1, [fp, #-20]	; 0xffffffec
    5750:	ldr	r0, [fp, #-16]
    5754:	bl	820 <transpose_array>
    5758:	mov	r3, r0
    575c:	cmp	r3, #0
    5760:	beq	576c <coda_ascii_cursor_read_uint64_array+0x120>
    5764:	mvn	r3, #0
    5768:	b	5770 <coda_ascii_cursor_read_uint64_array+0x124>
    576c:	mov	r3, #0
    5770:	mov	r0, r3
    5774:	sub	sp, fp, #4
    5778:	ldr	fp, [sp]
    577c:	add	sp, sp, #4
    5780:	pop	{pc}		; (ldr pc, [sp], #4)

00005784 <coda_ascii_cursor_read_float_array>:
    5784:	str	fp, [sp, #-8]!
    5788:	str	lr, [sp, #4]
    578c:	add	fp, sp, #4
    5790:	sub	sp, sp, #32
    5794:	str	r0, [fp, #-16]
    5798:	str	r1, [fp, #-20]	; 0xffffffec
    579c:	str	r2, [fp, #-24]	; 0xffffffe8
    57a0:	ldr	r3, [fp, #-16]
    57a4:	ldr	r3, [r3, #4]
    57a8:	sub	r3, r3, #1
    57ac:	ldr	r2, [fp, #-16]
    57b0:	lsl	r3, r3, #4
    57b4:	add	r3, r2, r3
    57b8:	ldr	r3, [r3, #8]
    57bc:	ldr	r3, [r3]
    57c0:	cmp	r3, #99	; 0x63
    57c4:	bhi	57e8 <coda_ascii_cursor_read_float_array+0x64>
    57c8:	ldr	r3, [fp, #-16]
    57cc:	ldr	r3, [r3, #4]
    57d0:	sub	r3, r3, #1
    57d4:	ldr	r2, [fp, #-16]
    57d8:	lsl	r3, r3, #4
    57dc:	add	r3, r2, r3
    57e0:	ldr	r3, [r3, #8]
    57e4:	b	5808 <coda_ascii_cursor_read_float_array+0x84>
    57e8:	ldr	r3, [fp, #-16]
    57ec:	ldr	r3, [r3, #4]
    57f0:	sub	r3, r3, #1
    57f4:	ldr	r2, [fp, #-16]
    57f8:	lsl	r3, r3, #4
    57fc:	add	r3, r2, r3
    5800:	ldr	r3, [r3, #8]
    5804:	ldr	r3, [r3, #4]
    5808:	str	r3, [fp, #-8]
    580c:	ldr	r3, [fp, #-8]
    5810:	ldr	r3, [r3, #40]	; 0x28
    5814:	ldr	r3, [r3]
    5818:	cmp	r3, #0
    581c:	beq	5840 <coda_ascii_cursor_read_float_array+0xbc>
    5820:	movw	r3, #0
    5824:	movt	r3, #0
    5828:	movw	r2, #1624	; 0x658
    582c:	movw	r1, #0
    5830:	movt	r1, #0
    5834:	movw	r0, #0
    5838:	movt	r0, #0
    583c:	bl	0 <__assert_fail>
    5840:	mov	r3, #0
    5844:	str	r3, [sp]
    5848:	mov	r3, #4
    584c:	ldr	r2, [fp, #-20]	; 0xffffffec
    5850:	movw	r1, #0
    5854:	movt	r1, #0
    5858:	ldr	r0, [fp, #-16]
    585c:	bl	300 <read_array>
    5860:	mov	r3, r0
    5864:	cmp	r3, #0
    5868:	beq	5874 <coda_ascii_cursor_read_float_array+0xf0>
    586c:	mvn	r3, #0
    5870:	b	58a8 <coda_ascii_cursor_read_float_array+0x124>
    5874:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5878:	cmp	r3, #0
    587c:	beq	58a4 <coda_ascii_cursor_read_float_array+0x120>
    5880:	mov	r2, #4
    5884:	ldr	r1, [fp, #-20]	; 0xffffffec
    5888:	ldr	r0, [fp, #-16]
    588c:	bl	820 <transpose_array>
    5890:	mov	r3, r0
    5894:	cmp	r3, #0
    5898:	beq	58a4 <coda_ascii_cursor_read_float_array+0x120>
    589c:	mvn	r3, #0
    58a0:	b	58a8 <coda_ascii_cursor_read_float_array+0x124>
    58a4:	mov	r3, #0
    58a8:	mov	r0, r3
    58ac:	sub	sp, fp, #4
    58b0:	ldr	fp, [sp]
    58b4:	add	sp, sp, #4
    58b8:	pop	{pc}		; (ldr pc, [sp], #4)

000058bc <coda_ascii_cursor_read_double_array>:
    58bc:	str	fp, [sp, #-8]!
    58c0:	str	lr, [sp, #4]
    58c4:	add	fp, sp, #4
    58c8:	sub	sp, sp, #32
    58cc:	str	r0, [fp, #-16]
    58d0:	str	r1, [fp, #-20]	; 0xffffffec
    58d4:	str	r2, [fp, #-24]	; 0xffffffe8
    58d8:	ldr	r3, [fp, #-16]
    58dc:	ldr	r3, [r3, #4]
    58e0:	sub	r3, r3, #1
    58e4:	ldr	r2, [fp, #-16]
    58e8:	lsl	r3, r3, #4
    58ec:	add	r3, r2, r3
    58f0:	ldr	r3, [r3, #8]
    58f4:	ldr	r3, [r3]
    58f8:	cmp	r3, #99	; 0x63
    58fc:	bhi	5920 <coda_ascii_cursor_read_double_array+0x64>
    5900:	ldr	r3, [fp, #-16]
    5904:	ldr	r3, [r3, #4]
    5908:	sub	r3, r3, #1
    590c:	ldr	r2, [fp, #-16]
    5910:	lsl	r3, r3, #4
    5914:	add	r3, r2, r3
    5918:	ldr	r3, [r3, #8]
    591c:	b	5940 <coda_ascii_cursor_read_double_array+0x84>
    5920:	ldr	r3, [fp, #-16]
    5924:	ldr	r3, [r3, #4]
    5928:	sub	r3, r3, #1
    592c:	ldr	r2, [fp, #-16]
    5930:	lsl	r3, r3, #4
    5934:	add	r3, r2, r3
    5938:	ldr	r3, [r3, #8]
    593c:	ldr	r3, [r3, #4]
    5940:	str	r3, [fp, #-8]
    5944:	ldr	r3, [fp, #-8]
    5948:	ldr	r3, [r3, #40]	; 0x28
    594c:	ldr	r3, [r3]
    5950:	cmp	r3, #0
    5954:	beq	5978 <coda_ascii_cursor_read_double_array+0xbc>
    5958:	movw	r3, #0
    595c:	movt	r3, #0
    5960:	movw	r2, #1644	; 0x66c
    5964:	movw	r1, #0
    5968:	movt	r1, #0
    596c:	movw	r0, #0
    5970:	movt	r0, #0
    5974:	bl	0 <__assert_fail>
    5978:	mov	r3, #0
    597c:	str	r3, [sp]
    5980:	mov	r3, #8
    5984:	ldr	r2, [fp, #-20]	; 0xffffffec
    5988:	movw	r1, #0
    598c:	movt	r1, #0
    5990:	ldr	r0, [fp, #-16]
    5994:	bl	300 <read_array>
    5998:	mov	r3, r0
    599c:	cmp	r3, #0
    59a0:	beq	59ac <coda_ascii_cursor_read_double_array+0xf0>
    59a4:	mvn	r3, #0
    59a8:	b	59e0 <coda_ascii_cursor_read_double_array+0x124>
    59ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    59b0:	cmp	r3, #0
    59b4:	beq	59dc <coda_ascii_cursor_read_double_array+0x120>
    59b8:	mov	r2, #8
    59bc:	ldr	r1, [fp, #-20]	; 0xffffffec
    59c0:	ldr	r0, [fp, #-16]
    59c4:	bl	820 <transpose_array>
    59c8:	mov	r3, r0
    59cc:	cmp	r3, #0
    59d0:	beq	59dc <coda_ascii_cursor_read_double_array+0x120>
    59d4:	mvn	r3, #0
    59d8:	b	59e0 <coda_ascii_cursor_read_double_array+0x124>
    59dc:	mov	r3, #0
    59e0:	mov	r0, r3
    59e4:	sub	sp, fp, #4
    59e8:	ldr	fp, [sp]
    59ec:	add	sp, sp, #4
    59f0:	pop	{pc}		; (ldr pc, [sp], #4)

000059f4 <coda_ascii_cursor_read_char_array>:
    59f4:	str	fp, [sp, #-8]!
    59f8:	str	lr, [sp, #4]
    59fc:	add	fp, sp, #4
    5a00:	sub	sp, sp, #32
    5a04:	str	r0, [fp, #-16]
    5a08:	str	r1, [fp, #-20]	; 0xffffffec
    5a0c:	str	r2, [fp, #-24]	; 0xffffffe8
    5a10:	ldr	r3, [fp, #-16]
    5a14:	ldr	r3, [r3, #4]
    5a18:	sub	r3, r3, #1
    5a1c:	ldr	r2, [fp, #-16]
    5a20:	lsl	r3, r3, #4
    5a24:	add	r3, r2, r3
    5a28:	ldr	r3, [r3, #8]
    5a2c:	ldr	r3, [r3]
    5a30:	cmp	r3, #99	; 0x63
    5a34:	bhi	5a58 <coda_ascii_cursor_read_char_array+0x64>
    5a38:	ldr	r3, [fp, #-16]
    5a3c:	ldr	r3, [r3, #4]
    5a40:	sub	r3, r3, #1
    5a44:	ldr	r2, [fp, #-16]
    5a48:	lsl	r3, r3, #4
    5a4c:	add	r3, r2, r3
    5a50:	ldr	r3, [r3, #8]
    5a54:	b	5a78 <coda_ascii_cursor_read_char_array+0x84>
    5a58:	ldr	r3, [fp, #-16]
    5a5c:	ldr	r3, [r3, #4]
    5a60:	sub	r3, r3, #1
    5a64:	ldr	r2, [fp, #-16]
    5a68:	lsl	r3, r3, #4
    5a6c:	add	r3, r2, r3
    5a70:	ldr	r3, [r3, #8]
    5a74:	ldr	r3, [r3, #4]
    5a78:	str	r3, [fp, #-8]
    5a7c:	ldr	r3, [fp, #-8]
    5a80:	ldr	r3, [r3, #40]	; 0x28
    5a84:	ldr	r3, [r3]
    5a88:	cmp	r3, #0
    5a8c:	beq	5ab0 <coda_ascii_cursor_read_char_array+0xbc>
    5a90:	movw	r3, #0
    5a94:	movt	r3, #0
    5a98:	mov	r2, #1664	; 0x680
    5a9c:	movw	r1, #0
    5aa0:	movt	r1, #0
    5aa4:	movw	r0, #0
    5aa8:	movt	r0, #0
    5aac:	bl	0 <__assert_fail>
    5ab0:	mov	r3, #0
    5ab4:	str	r3, [sp]
    5ab8:	mov	r3, #1
    5abc:	ldr	r2, [fp, #-20]	; 0xffffffec
    5ac0:	movw	r1, #0
    5ac4:	movt	r1, #0
    5ac8:	ldr	r0, [fp, #-16]
    5acc:	bl	300 <read_array>
    5ad0:	mov	r3, r0
    5ad4:	cmp	r3, #0
    5ad8:	beq	5ae4 <coda_ascii_cursor_read_char_array+0xf0>
    5adc:	mvn	r3, #0
    5ae0:	b	5b18 <coda_ascii_cursor_read_char_array+0x124>
    5ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5ae8:	cmp	r3, #0
    5aec:	beq	5b14 <coda_ascii_cursor_read_char_array+0x120>
    5af0:	mov	r2, #1
    5af4:	ldr	r1, [fp, #-20]	; 0xffffffec
    5af8:	ldr	r0, [fp, #-16]
    5afc:	bl	820 <transpose_array>
    5b00:	mov	r3, r0
    5b04:	cmp	r3, #0
    5b08:	beq	5b14 <coda_ascii_cursor_read_char_array+0x120>
    5b0c:	mvn	r3, #0
    5b10:	b	5b18 <coda_ascii_cursor_read_char_array+0x124>
    5b14:	mov	r3, #0
    5b18:	mov	r0, r3
    5b1c:	sub	sp, fp, #4
    5b20:	ldr	fp, [sp]
    5b24:	add	sp, sp, #4
    5b28:	pop	{pc}		; (ldr pc, [sp], #4)

00005b2c <coda_ascii_cursor_read_int8_partial_array>:
    5b2c:	str	fp, [sp, #-8]!
    5b30:	str	lr, [sp, #4]
    5b34:	add	fp, sp, #4
    5b38:	sub	sp, sp, #32
    5b3c:	str	r0, [fp, #-16]
    5b40:	str	r1, [fp, #-20]	; 0xffffffec
    5b44:	str	r2, [fp, #-24]	; 0xffffffe8
    5b48:	str	r3, [fp, #-28]	; 0xffffffe4
    5b4c:	ldr	r3, [fp, #-16]
    5b50:	ldr	r3, [r3, #4]
    5b54:	sub	r3, r3, #1
    5b58:	ldr	r2, [fp, #-16]
    5b5c:	lsl	r3, r3, #4
    5b60:	add	r3, r2, r3
    5b64:	ldr	r3, [r3, #8]
    5b68:	ldr	r3, [r3]
    5b6c:	cmp	r3, #99	; 0x63
    5b70:	bhi	5b94 <coda_ascii_cursor_read_int8_partial_array+0x68>
    5b74:	ldr	r3, [fp, #-16]
    5b78:	ldr	r3, [r3, #4]
    5b7c:	sub	r3, r3, #1
    5b80:	ldr	r2, [fp, #-16]
    5b84:	lsl	r3, r3, #4
    5b88:	add	r3, r2, r3
    5b8c:	ldr	r3, [r3, #8]
    5b90:	b	5bb4 <coda_ascii_cursor_read_int8_partial_array+0x88>
    5b94:	ldr	r3, [fp, #-16]
    5b98:	ldr	r3, [r3, #4]
    5b9c:	sub	r3, r3, #1
    5ba0:	ldr	r2, [fp, #-16]
    5ba4:	lsl	r3, r3, #4
    5ba8:	add	r3, r2, r3
    5bac:	ldr	r3, [r3, #8]
    5bb0:	ldr	r3, [r3, #4]
    5bb4:	str	r3, [fp, #-8]
    5bb8:	ldr	r3, [fp, #-8]
    5bbc:	ldr	r3, [r3, #40]	; 0x28
    5bc0:	ldr	r3, [r3]
    5bc4:	cmp	r3, #0
    5bc8:	beq	5bec <coda_ascii_cursor_read_int8_partial_array+0xc0>
    5bcc:	movw	r3, #0
    5bd0:	movt	r3, #0
    5bd4:	movw	r2, #1684	; 0x694
    5bd8:	movw	r1, #0
    5bdc:	movt	r1, #0
    5be0:	movw	r0, #0
    5be4:	movt	r0, #0
    5be8:	bl	0 <__assert_fail>
    5bec:	mov	r3, #1
    5bf0:	str	r3, [sp, #4]
    5bf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5bf8:	str	r3, [sp]
    5bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c00:	ldr	r2, [fp, #-20]	; 0xffffffec
    5c04:	movw	r1, #0
    5c08:	movt	r1, #0
    5c0c:	ldr	r0, [fp, #-16]
    5c10:	bl	708 <read_partial_array>
    5c14:	mov	r3, r0
    5c18:	mov	r0, r3
    5c1c:	sub	sp, fp, #4
    5c20:	ldr	fp, [sp]
    5c24:	add	sp, sp, #4
    5c28:	pop	{pc}		; (ldr pc, [sp], #4)

00005c2c <coda_ascii_cursor_read_uint8_partial_array>:
    5c2c:	str	fp, [sp, #-8]!
    5c30:	str	lr, [sp, #4]
    5c34:	add	fp, sp, #4
    5c38:	sub	sp, sp, #32
    5c3c:	str	r0, [fp, #-16]
    5c40:	str	r1, [fp, #-20]	; 0xffffffec
    5c44:	str	r2, [fp, #-24]	; 0xffffffe8
    5c48:	str	r3, [fp, #-28]	; 0xffffffe4
    5c4c:	ldr	r3, [fp, #-16]
    5c50:	ldr	r3, [r3, #4]
    5c54:	sub	r3, r3, #1
    5c58:	ldr	r2, [fp, #-16]
    5c5c:	lsl	r3, r3, #4
    5c60:	add	r3, r2, r3
    5c64:	ldr	r3, [r3, #8]
    5c68:	ldr	r3, [r3]
    5c6c:	cmp	r3, #99	; 0x63
    5c70:	bhi	5c94 <coda_ascii_cursor_read_uint8_partial_array+0x68>
    5c74:	ldr	r3, [fp, #-16]
    5c78:	ldr	r3, [r3, #4]
    5c7c:	sub	r3, r3, #1
    5c80:	ldr	r2, [fp, #-16]
    5c84:	lsl	r3, r3, #4
    5c88:	add	r3, r2, r3
    5c8c:	ldr	r3, [r3, #8]
    5c90:	b	5cb4 <coda_ascii_cursor_read_uint8_partial_array+0x88>
    5c94:	ldr	r3, [fp, #-16]
    5c98:	ldr	r3, [r3, #4]
    5c9c:	sub	r3, r3, #1
    5ca0:	ldr	r2, [fp, #-16]
    5ca4:	lsl	r3, r3, #4
    5ca8:	add	r3, r2, r3
    5cac:	ldr	r3, [r3, #8]
    5cb0:	ldr	r3, [r3, #4]
    5cb4:	str	r3, [fp, #-8]
    5cb8:	ldr	r3, [fp, #-8]
    5cbc:	ldr	r3, [r3, #40]	; 0x28
    5cc0:	ldr	r3, [r3]
    5cc4:	cmp	r3, #0
    5cc8:	beq	5cec <coda_ascii_cursor_read_uint8_partial_array+0xc0>
    5ccc:	movw	r3, #0
    5cd0:	movt	r3, #0
    5cd4:	movw	r2, #1693	; 0x69d
    5cd8:	movw	r1, #0
    5cdc:	movt	r1, #0
    5ce0:	movw	r0, #0
    5ce4:	movt	r0, #0
    5ce8:	bl	0 <__assert_fail>
    5cec:	mov	r3, #1
    5cf0:	str	r3, [sp, #4]
    5cf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5cf8:	str	r3, [sp]
    5cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5d00:	ldr	r2, [fp, #-20]	; 0xffffffec
    5d04:	movw	r1, #0
    5d08:	movt	r1, #0
    5d0c:	ldr	r0, [fp, #-16]
    5d10:	bl	708 <read_partial_array>
    5d14:	mov	r3, r0
    5d18:	mov	r0, r3
    5d1c:	sub	sp, fp, #4
    5d20:	ldr	fp, [sp]
    5d24:	add	sp, sp, #4
    5d28:	pop	{pc}		; (ldr pc, [sp], #4)

00005d2c <coda_ascii_cursor_read_int16_partial_array>:
    5d2c:	str	fp, [sp, #-8]!
    5d30:	str	lr, [sp, #4]
    5d34:	add	fp, sp, #4
    5d38:	sub	sp, sp, #32
    5d3c:	str	r0, [fp, #-16]
    5d40:	str	r1, [fp, #-20]	; 0xffffffec
    5d44:	str	r2, [fp, #-24]	; 0xffffffe8
    5d48:	str	r3, [fp, #-28]	; 0xffffffe4
    5d4c:	ldr	r3, [fp, #-16]
    5d50:	ldr	r3, [r3, #4]
    5d54:	sub	r3, r3, #1
    5d58:	ldr	r2, [fp, #-16]
    5d5c:	lsl	r3, r3, #4
    5d60:	add	r3, r2, r3
    5d64:	ldr	r3, [r3, #8]
    5d68:	ldr	r3, [r3]
    5d6c:	cmp	r3, #99	; 0x63
    5d70:	bhi	5d94 <coda_ascii_cursor_read_int16_partial_array+0x68>
    5d74:	ldr	r3, [fp, #-16]
    5d78:	ldr	r3, [r3, #4]
    5d7c:	sub	r3, r3, #1
    5d80:	ldr	r2, [fp, #-16]
    5d84:	lsl	r3, r3, #4
    5d88:	add	r3, r2, r3
    5d8c:	ldr	r3, [r3, #8]
    5d90:	b	5db4 <coda_ascii_cursor_read_int16_partial_array+0x88>
    5d94:	ldr	r3, [fp, #-16]
    5d98:	ldr	r3, [r3, #4]
    5d9c:	sub	r3, r3, #1
    5da0:	ldr	r2, [fp, #-16]
    5da4:	lsl	r3, r3, #4
    5da8:	add	r3, r2, r3
    5dac:	ldr	r3, [r3, #8]
    5db0:	ldr	r3, [r3, #4]
    5db4:	str	r3, [fp, #-8]
    5db8:	ldr	r3, [fp, #-8]
    5dbc:	ldr	r3, [r3, #40]	; 0x28
    5dc0:	ldr	r3, [r3]
    5dc4:	cmp	r3, #0
    5dc8:	beq	5dec <coda_ascii_cursor_read_int16_partial_array+0xc0>
    5dcc:	movw	r3, #0
    5dd0:	movt	r3, #0
    5dd4:	movw	r2, #1702	; 0x6a6
    5dd8:	movw	r1, #0
    5ddc:	movt	r1, #0
    5de0:	movw	r0, #0
    5de4:	movt	r0, #0
    5de8:	bl	0 <__assert_fail>
    5dec:	mov	r3, #2
    5df0:	str	r3, [sp, #4]
    5df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5df8:	str	r3, [sp]
    5dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5e00:	ldr	r2, [fp, #-20]	; 0xffffffec
    5e04:	movw	r1, #0
    5e08:	movt	r1, #0
    5e0c:	ldr	r0, [fp, #-16]
    5e10:	bl	708 <read_partial_array>
    5e14:	mov	r3, r0
    5e18:	mov	r0, r3
    5e1c:	sub	sp, fp, #4
    5e20:	ldr	fp, [sp]
    5e24:	add	sp, sp, #4
    5e28:	pop	{pc}		; (ldr pc, [sp], #4)

00005e2c <coda_ascii_cursor_read_uint16_partial_array>:
    5e2c:	str	fp, [sp, #-8]!
    5e30:	str	lr, [sp, #4]
    5e34:	add	fp, sp, #4
    5e38:	sub	sp, sp, #32
    5e3c:	str	r0, [fp, #-16]
    5e40:	str	r1, [fp, #-20]	; 0xffffffec
    5e44:	str	r2, [fp, #-24]	; 0xffffffe8
    5e48:	str	r3, [fp, #-28]	; 0xffffffe4
    5e4c:	ldr	r3, [fp, #-16]
    5e50:	ldr	r3, [r3, #4]
    5e54:	sub	r3, r3, #1
    5e58:	ldr	r2, [fp, #-16]
    5e5c:	lsl	r3, r3, #4
    5e60:	add	r3, r2, r3
    5e64:	ldr	r3, [r3, #8]
    5e68:	ldr	r3, [r3]
    5e6c:	cmp	r3, #99	; 0x63
    5e70:	bhi	5e94 <coda_ascii_cursor_read_uint16_partial_array+0x68>
    5e74:	ldr	r3, [fp, #-16]
    5e78:	ldr	r3, [r3, #4]
    5e7c:	sub	r3, r3, #1
    5e80:	ldr	r2, [fp, #-16]
    5e84:	lsl	r3, r3, #4
    5e88:	add	r3, r2, r3
    5e8c:	ldr	r3, [r3, #8]
    5e90:	b	5eb4 <coda_ascii_cursor_read_uint16_partial_array+0x88>
    5e94:	ldr	r3, [fp, #-16]
    5e98:	ldr	r3, [r3, #4]
    5e9c:	sub	r3, r3, #1
    5ea0:	ldr	r2, [fp, #-16]
    5ea4:	lsl	r3, r3, #4
    5ea8:	add	r3, r2, r3
    5eac:	ldr	r3, [r3, #8]
    5eb0:	ldr	r3, [r3, #4]
    5eb4:	str	r3, [fp, #-8]
    5eb8:	ldr	r3, [fp, #-8]
    5ebc:	ldr	r3, [r3, #40]	; 0x28
    5ec0:	ldr	r3, [r3]
    5ec4:	cmp	r3, #0
    5ec8:	beq	5eec <coda_ascii_cursor_read_uint16_partial_array+0xc0>
    5ecc:	movw	r3, #0
    5ed0:	movt	r3, #0
    5ed4:	movw	r2, #1711	; 0x6af
    5ed8:	movw	r1, #0
    5edc:	movt	r1, #0
    5ee0:	movw	r0, #0
    5ee4:	movt	r0, #0
    5ee8:	bl	0 <__assert_fail>
    5eec:	mov	r3, #2
    5ef0:	str	r3, [sp, #4]
    5ef4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ef8:	str	r3, [sp]
    5efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5f00:	ldr	r2, [fp, #-20]	; 0xffffffec
    5f04:	movw	r1, #0
    5f08:	movt	r1, #0
    5f0c:	ldr	r0, [fp, #-16]
    5f10:	bl	708 <read_partial_array>
    5f14:	mov	r3, r0
    5f18:	mov	r0, r3
    5f1c:	sub	sp, fp, #4
    5f20:	ldr	fp, [sp]
    5f24:	add	sp, sp, #4
    5f28:	pop	{pc}		; (ldr pc, [sp], #4)

00005f2c <coda_ascii_cursor_read_int32_partial_array>:
    5f2c:	str	fp, [sp, #-8]!
    5f30:	str	lr, [sp, #4]
    5f34:	add	fp, sp, #4
    5f38:	sub	sp, sp, #32
    5f3c:	str	r0, [fp, #-16]
    5f40:	str	r1, [fp, #-20]	; 0xffffffec
    5f44:	str	r2, [fp, #-24]	; 0xffffffe8
    5f48:	str	r3, [fp, #-28]	; 0xffffffe4
    5f4c:	ldr	r3, [fp, #-16]
    5f50:	ldr	r3, [r3, #4]
    5f54:	sub	r3, r3, #1
    5f58:	ldr	r2, [fp, #-16]
    5f5c:	lsl	r3, r3, #4
    5f60:	add	r3, r2, r3
    5f64:	ldr	r3, [r3, #8]
    5f68:	ldr	r3, [r3]
    5f6c:	cmp	r3, #99	; 0x63
    5f70:	bhi	5f94 <coda_ascii_cursor_read_int32_partial_array+0x68>
    5f74:	ldr	r3, [fp, #-16]
    5f78:	ldr	r3, [r3, #4]
    5f7c:	sub	r3, r3, #1
    5f80:	ldr	r2, [fp, #-16]
    5f84:	lsl	r3, r3, #4
    5f88:	add	r3, r2, r3
    5f8c:	ldr	r3, [r3, #8]
    5f90:	b	5fb4 <coda_ascii_cursor_read_int32_partial_array+0x88>
    5f94:	ldr	r3, [fp, #-16]
    5f98:	ldr	r3, [r3, #4]
    5f9c:	sub	r3, r3, #1
    5fa0:	ldr	r2, [fp, #-16]
    5fa4:	lsl	r3, r3, #4
    5fa8:	add	r3, r2, r3
    5fac:	ldr	r3, [r3, #8]
    5fb0:	ldr	r3, [r3, #4]
    5fb4:	str	r3, [fp, #-8]
    5fb8:	ldr	r3, [fp, #-8]
    5fbc:	ldr	r3, [r3, #40]	; 0x28
    5fc0:	ldr	r3, [r3]
    5fc4:	cmp	r3, #0
    5fc8:	beq	5fec <coda_ascii_cursor_read_int32_partial_array+0xc0>
    5fcc:	movw	r3, #0
    5fd0:	movt	r3, #0
    5fd4:	movw	r2, #1720	; 0x6b8
    5fd8:	movw	r1, #0
    5fdc:	movt	r1, #0
    5fe0:	movw	r0, #0
    5fe4:	movt	r0, #0
    5fe8:	bl	0 <__assert_fail>
    5fec:	mov	r3, #4
    5ff0:	str	r3, [sp, #4]
    5ff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    5ff8:	str	r3, [sp]
    5ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6000:	ldr	r2, [fp, #-20]	; 0xffffffec
    6004:	movw	r1, #0
    6008:	movt	r1, #0
    600c:	ldr	r0, [fp, #-16]
    6010:	bl	708 <read_partial_array>
    6014:	mov	r3, r0
    6018:	mov	r0, r3
    601c:	sub	sp, fp, #4
    6020:	ldr	fp, [sp]
    6024:	add	sp, sp, #4
    6028:	pop	{pc}		; (ldr pc, [sp], #4)

0000602c <coda_ascii_cursor_read_uint32_partial_array>:
    602c:	str	fp, [sp, #-8]!
    6030:	str	lr, [sp, #4]
    6034:	add	fp, sp, #4
    6038:	sub	sp, sp, #32
    603c:	str	r0, [fp, #-16]
    6040:	str	r1, [fp, #-20]	; 0xffffffec
    6044:	str	r2, [fp, #-24]	; 0xffffffe8
    6048:	str	r3, [fp, #-28]	; 0xffffffe4
    604c:	ldr	r3, [fp, #-16]
    6050:	ldr	r3, [r3, #4]
    6054:	sub	r3, r3, #1
    6058:	ldr	r2, [fp, #-16]
    605c:	lsl	r3, r3, #4
    6060:	add	r3, r2, r3
    6064:	ldr	r3, [r3, #8]
    6068:	ldr	r3, [r3]
    606c:	cmp	r3, #99	; 0x63
    6070:	bhi	6094 <coda_ascii_cursor_read_uint32_partial_array+0x68>
    6074:	ldr	r3, [fp, #-16]
    6078:	ldr	r3, [r3, #4]
    607c:	sub	r3, r3, #1
    6080:	ldr	r2, [fp, #-16]
    6084:	lsl	r3, r3, #4
    6088:	add	r3, r2, r3
    608c:	ldr	r3, [r3, #8]
    6090:	b	60b4 <coda_ascii_cursor_read_uint32_partial_array+0x88>
    6094:	ldr	r3, [fp, #-16]
    6098:	ldr	r3, [r3, #4]
    609c:	sub	r3, r3, #1
    60a0:	ldr	r2, [fp, #-16]
    60a4:	lsl	r3, r3, #4
    60a8:	add	r3, r2, r3
    60ac:	ldr	r3, [r3, #8]
    60b0:	ldr	r3, [r3, #4]
    60b4:	str	r3, [fp, #-8]
    60b8:	ldr	r3, [fp, #-8]
    60bc:	ldr	r3, [r3, #40]	; 0x28
    60c0:	ldr	r3, [r3]
    60c4:	cmp	r3, #0
    60c8:	beq	60ec <coda_ascii_cursor_read_uint32_partial_array+0xc0>
    60cc:	movw	r3, #0
    60d0:	movt	r3, #0
    60d4:	movw	r2, #1729	; 0x6c1
    60d8:	movw	r1, #0
    60dc:	movt	r1, #0
    60e0:	movw	r0, #0
    60e4:	movt	r0, #0
    60e8:	bl	0 <__assert_fail>
    60ec:	mov	r3, #4
    60f0:	str	r3, [sp, #4]
    60f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    60f8:	str	r3, [sp]
    60fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6100:	ldr	r2, [fp, #-20]	; 0xffffffec
    6104:	movw	r1, #0
    6108:	movt	r1, #0
    610c:	ldr	r0, [fp, #-16]
    6110:	bl	708 <read_partial_array>
    6114:	mov	r3, r0
    6118:	mov	r0, r3
    611c:	sub	sp, fp, #4
    6120:	ldr	fp, [sp]
    6124:	add	sp, sp, #4
    6128:	pop	{pc}		; (ldr pc, [sp], #4)

0000612c <coda_ascii_cursor_read_int64_partial_array>:
    612c:	str	fp, [sp, #-8]!
    6130:	str	lr, [sp, #4]
    6134:	add	fp, sp, #4
    6138:	sub	sp, sp, #32
    613c:	str	r0, [fp, #-16]
    6140:	str	r1, [fp, #-20]	; 0xffffffec
    6144:	str	r2, [fp, #-24]	; 0xffffffe8
    6148:	str	r3, [fp, #-28]	; 0xffffffe4
    614c:	ldr	r3, [fp, #-16]
    6150:	ldr	r3, [r3, #4]
    6154:	sub	r3, r3, #1
    6158:	ldr	r2, [fp, #-16]
    615c:	lsl	r3, r3, #4
    6160:	add	r3, r2, r3
    6164:	ldr	r3, [r3, #8]
    6168:	ldr	r3, [r3]
    616c:	cmp	r3, #99	; 0x63
    6170:	bhi	6194 <coda_ascii_cursor_read_int64_partial_array+0x68>
    6174:	ldr	r3, [fp, #-16]
    6178:	ldr	r3, [r3, #4]
    617c:	sub	r3, r3, #1
    6180:	ldr	r2, [fp, #-16]
    6184:	lsl	r3, r3, #4
    6188:	add	r3, r2, r3
    618c:	ldr	r3, [r3, #8]
    6190:	b	61b4 <coda_ascii_cursor_read_int64_partial_array+0x88>
    6194:	ldr	r3, [fp, #-16]
    6198:	ldr	r3, [r3, #4]
    619c:	sub	r3, r3, #1
    61a0:	ldr	r2, [fp, #-16]
    61a4:	lsl	r3, r3, #4
    61a8:	add	r3, r2, r3
    61ac:	ldr	r3, [r3, #8]
    61b0:	ldr	r3, [r3, #4]
    61b4:	str	r3, [fp, #-8]
    61b8:	ldr	r3, [fp, #-8]
    61bc:	ldr	r3, [r3, #40]	; 0x28
    61c0:	ldr	r3, [r3]
    61c4:	cmp	r3, #0
    61c8:	beq	61ec <coda_ascii_cursor_read_int64_partial_array+0xc0>
    61cc:	movw	r3, #0
    61d0:	movt	r3, #0
    61d4:	movw	r2, #1738	; 0x6ca
    61d8:	movw	r1, #0
    61dc:	movt	r1, #0
    61e0:	movw	r0, #0
    61e4:	movt	r0, #0
    61e8:	bl	0 <__assert_fail>
    61ec:	mov	r3, #8
    61f0:	str	r3, [sp, #4]
    61f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    61f8:	str	r3, [sp]
    61fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6200:	ldr	r2, [fp, #-20]	; 0xffffffec
    6204:	movw	r1, #0
    6208:	movt	r1, #0
    620c:	ldr	r0, [fp, #-16]
    6210:	bl	708 <read_partial_array>
    6214:	mov	r3, r0
    6218:	mov	r0, r3
    621c:	sub	sp, fp, #4
    6220:	ldr	fp, [sp]
    6224:	add	sp, sp, #4
    6228:	pop	{pc}		; (ldr pc, [sp], #4)

0000622c <coda_ascii_cursor_read_uint64_partial_array>:
    622c:	str	fp, [sp, #-8]!
    6230:	str	lr, [sp, #4]
    6234:	add	fp, sp, #4
    6238:	sub	sp, sp, #32
    623c:	str	r0, [fp, #-16]
    6240:	str	r1, [fp, #-20]	; 0xffffffec
    6244:	str	r2, [fp, #-24]	; 0xffffffe8
    6248:	str	r3, [fp, #-28]	; 0xffffffe4
    624c:	ldr	r3, [fp, #-16]
    6250:	ldr	r3, [r3, #4]
    6254:	sub	r3, r3, #1
    6258:	ldr	r2, [fp, #-16]
    625c:	lsl	r3, r3, #4
    6260:	add	r3, r2, r3
    6264:	ldr	r3, [r3, #8]
    6268:	ldr	r3, [r3]
    626c:	cmp	r3, #99	; 0x63
    6270:	bhi	6294 <coda_ascii_cursor_read_uint64_partial_array+0x68>
    6274:	ldr	r3, [fp, #-16]
    6278:	ldr	r3, [r3, #4]
    627c:	sub	r3, r3, #1
    6280:	ldr	r2, [fp, #-16]
    6284:	lsl	r3, r3, #4
    6288:	add	r3, r2, r3
    628c:	ldr	r3, [r3, #8]
    6290:	b	62b4 <coda_ascii_cursor_read_uint64_partial_array+0x88>
    6294:	ldr	r3, [fp, #-16]
    6298:	ldr	r3, [r3, #4]
    629c:	sub	r3, r3, #1
    62a0:	ldr	r2, [fp, #-16]
    62a4:	lsl	r3, r3, #4
    62a8:	add	r3, r2, r3
    62ac:	ldr	r3, [r3, #8]
    62b0:	ldr	r3, [r3, #4]
    62b4:	str	r3, [fp, #-8]
    62b8:	ldr	r3, [fp, #-8]
    62bc:	ldr	r3, [r3, #40]	; 0x28
    62c0:	ldr	r3, [r3]
    62c4:	cmp	r3, #0
    62c8:	beq	62ec <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    62cc:	movw	r3, #0
    62d0:	movt	r3, #0
    62d4:	movw	r2, #1747	; 0x6d3
    62d8:	movw	r1, #0
    62dc:	movt	r1, #0
    62e0:	movw	r0, #0
    62e4:	movt	r0, #0
    62e8:	bl	0 <__assert_fail>
    62ec:	mov	r3, #8
    62f0:	str	r3, [sp, #4]
    62f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    62f8:	str	r3, [sp]
    62fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6300:	ldr	r2, [fp, #-20]	; 0xffffffec
    6304:	movw	r1, #0
    6308:	movt	r1, #0
    630c:	ldr	r0, [fp, #-16]
    6310:	bl	708 <read_partial_array>
    6314:	mov	r3, r0
    6318:	mov	r0, r3
    631c:	sub	sp, fp, #4
    6320:	ldr	fp, [sp]
    6324:	add	sp, sp, #4
    6328:	pop	{pc}		; (ldr pc, [sp], #4)

0000632c <coda_ascii_cursor_read_float_partial_array>:
    632c:	str	fp, [sp, #-8]!
    6330:	str	lr, [sp, #4]
    6334:	add	fp, sp, #4
    6338:	sub	sp, sp, #32
    633c:	str	r0, [fp, #-16]
    6340:	str	r1, [fp, #-20]	; 0xffffffec
    6344:	str	r2, [fp, #-24]	; 0xffffffe8
    6348:	str	r3, [fp, #-28]	; 0xffffffe4
    634c:	ldr	r3, [fp, #-16]
    6350:	ldr	r3, [r3, #4]
    6354:	sub	r3, r3, #1
    6358:	ldr	r2, [fp, #-16]
    635c:	lsl	r3, r3, #4
    6360:	add	r3, r2, r3
    6364:	ldr	r3, [r3, #8]
    6368:	ldr	r3, [r3]
    636c:	cmp	r3, #99	; 0x63
    6370:	bhi	6394 <coda_ascii_cursor_read_float_partial_array+0x68>
    6374:	ldr	r3, [fp, #-16]
    6378:	ldr	r3, [r3, #4]
    637c:	sub	r3, r3, #1
    6380:	ldr	r2, [fp, #-16]
    6384:	lsl	r3, r3, #4
    6388:	add	r3, r2, r3
    638c:	ldr	r3, [r3, #8]
    6390:	b	63b4 <coda_ascii_cursor_read_float_partial_array+0x88>
    6394:	ldr	r3, [fp, #-16]
    6398:	ldr	r3, [r3, #4]
    639c:	sub	r3, r3, #1
    63a0:	ldr	r2, [fp, #-16]
    63a4:	lsl	r3, r3, #4
    63a8:	add	r3, r2, r3
    63ac:	ldr	r3, [r3, #8]
    63b0:	ldr	r3, [r3, #4]
    63b4:	str	r3, [fp, #-8]
    63b8:	ldr	r3, [fp, #-8]
    63bc:	ldr	r3, [r3, #40]	; 0x28
    63c0:	ldr	r3, [r3]
    63c4:	cmp	r3, #0
    63c8:	beq	63ec <coda_ascii_cursor_read_float_partial_array+0xc0>
    63cc:	movw	r3, #0
    63d0:	movt	r3, #0
    63d4:	movw	r2, #1756	; 0x6dc
    63d8:	movw	r1, #0
    63dc:	movt	r1, #0
    63e0:	movw	r0, #0
    63e4:	movt	r0, #0
    63e8:	bl	0 <__assert_fail>
    63ec:	mov	r3, #4
    63f0:	str	r3, [sp, #4]
    63f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    63f8:	str	r3, [sp]
    63fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6400:	ldr	r2, [fp, #-20]	; 0xffffffec
    6404:	movw	r1, #0
    6408:	movt	r1, #0
    640c:	ldr	r0, [fp, #-16]
    6410:	bl	708 <read_partial_array>
    6414:	mov	r3, r0
    6418:	mov	r0, r3
    641c:	sub	sp, fp, #4
    6420:	ldr	fp, [sp]
    6424:	add	sp, sp, #4
    6428:	pop	{pc}		; (ldr pc, [sp], #4)

0000642c <coda_ascii_cursor_read_double_partial_array>:
    642c:	str	fp, [sp, #-8]!
    6430:	str	lr, [sp, #4]
    6434:	add	fp, sp, #4
    6438:	sub	sp, sp, #32
    643c:	str	r0, [fp, #-16]
    6440:	str	r1, [fp, #-20]	; 0xffffffec
    6444:	str	r2, [fp, #-24]	; 0xffffffe8
    6448:	str	r3, [fp, #-28]	; 0xffffffe4
    644c:	ldr	r3, [fp, #-16]
    6450:	ldr	r3, [r3, #4]
    6454:	sub	r3, r3, #1
    6458:	ldr	r2, [fp, #-16]
    645c:	lsl	r3, r3, #4
    6460:	add	r3, r2, r3
    6464:	ldr	r3, [r3, #8]
    6468:	ldr	r3, [r3]
    646c:	cmp	r3, #99	; 0x63
    6470:	bhi	6494 <coda_ascii_cursor_read_double_partial_array+0x68>
    6474:	ldr	r3, [fp, #-16]
    6478:	ldr	r3, [r3, #4]
    647c:	sub	r3, r3, #1
    6480:	ldr	r2, [fp, #-16]
    6484:	lsl	r3, r3, #4
    6488:	add	r3, r2, r3
    648c:	ldr	r3, [r3, #8]
    6490:	b	64b4 <coda_ascii_cursor_read_double_partial_array+0x88>
    6494:	ldr	r3, [fp, #-16]
    6498:	ldr	r3, [r3, #4]
    649c:	sub	r3, r3, #1
    64a0:	ldr	r2, [fp, #-16]
    64a4:	lsl	r3, r3, #4
    64a8:	add	r3, r2, r3
    64ac:	ldr	r3, [r3, #8]
    64b0:	ldr	r3, [r3, #4]
    64b4:	str	r3, [fp, #-8]
    64b8:	ldr	r3, [fp, #-8]
    64bc:	ldr	r3, [r3, #40]	; 0x28
    64c0:	ldr	r3, [r3]
    64c4:	cmp	r3, #0
    64c8:	beq	64ec <coda_ascii_cursor_read_double_partial_array+0xc0>
    64cc:	movw	r3, #0
    64d0:	movt	r3, #0
    64d4:	movw	r2, #1765	; 0x6e5
    64d8:	movw	r1, #0
    64dc:	movt	r1, #0
    64e0:	movw	r0, #0
    64e4:	movt	r0, #0
    64e8:	bl	0 <__assert_fail>
    64ec:	mov	r3, #8
    64f0:	str	r3, [sp, #4]
    64f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    64f8:	str	r3, [sp]
    64fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6500:	ldr	r2, [fp, #-20]	; 0xffffffec
    6504:	movw	r1, #0
    6508:	movt	r1, #0
    650c:	ldr	r0, [fp, #-16]
    6510:	bl	708 <read_partial_array>
    6514:	mov	r3, r0
    6518:	mov	r0, r3
    651c:	sub	sp, fp, #4
    6520:	ldr	fp, [sp]
    6524:	add	sp, sp, #4
    6528:	pop	{pc}		; (ldr pc, [sp], #4)

0000652c <coda_ascii_cursor_read_char_partial_array>:
    652c:	str	fp, [sp, #-8]!
    6530:	str	lr, [sp, #4]
    6534:	add	fp, sp, #4
    6538:	sub	sp, sp, #32
    653c:	str	r0, [fp, #-16]
    6540:	str	r1, [fp, #-20]	; 0xffffffec
    6544:	str	r2, [fp, #-24]	; 0xffffffe8
    6548:	str	r3, [fp, #-28]	; 0xffffffe4
    654c:	ldr	r3, [fp, #-16]
    6550:	ldr	r3, [r3, #4]
    6554:	sub	r3, r3, #1
    6558:	ldr	r2, [fp, #-16]
    655c:	lsl	r3, r3, #4
    6560:	add	r3, r2, r3
    6564:	ldr	r3, [r3, #8]
    6568:	ldr	r3, [r3]
    656c:	cmp	r3, #99	; 0x63
    6570:	bhi	6594 <coda_ascii_cursor_read_char_partial_array+0x68>
    6574:	ldr	r3, [fp, #-16]
    6578:	ldr	r3, [r3, #4]
    657c:	sub	r3, r3, #1
    6580:	ldr	r2, [fp, #-16]
    6584:	lsl	r3, r3, #4
    6588:	add	r3, r2, r3
    658c:	ldr	r3, [r3, #8]
    6590:	b	65b4 <coda_ascii_cursor_read_char_partial_array+0x88>
    6594:	ldr	r3, [fp, #-16]
    6598:	ldr	r3, [r3, #4]
    659c:	sub	r3, r3, #1
    65a0:	ldr	r2, [fp, #-16]
    65a4:	lsl	r3, r3, #4
    65a8:	add	r3, r2, r3
    65ac:	ldr	r3, [r3, #8]
    65b0:	ldr	r3, [r3, #4]
    65b4:	str	r3, [fp, #-8]
    65b8:	ldr	r3, [fp, #-8]
    65bc:	ldr	r3, [r3, #40]	; 0x28
    65c0:	ldr	r3, [r3]
    65c4:	cmp	r3, #0
    65c8:	beq	65ec <coda_ascii_cursor_read_char_partial_array+0xc0>
    65cc:	movw	r3, #0
    65d0:	movt	r3, #0
    65d4:	movw	r2, #1774	; 0x6ee
    65d8:	movw	r1, #0
    65dc:	movt	r1, #0
    65e0:	movw	r0, #0
    65e4:	movt	r0, #0
    65e8:	bl	0 <__assert_fail>
    65ec:	mov	r3, #1
    65f0:	str	r3, [sp, #4]
    65f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    65f8:	str	r3, [sp]
    65fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6600:	ldr	r2, [fp, #-20]	; 0xffffffec
    6604:	movw	r1, #0
    6608:	movt	r1, #0
    660c:	ldr	r0, [fp, #-16]
    6610:	bl	708 <read_partial_array>
    6614:	mov	r3, r0
    6618:	mov	r0, r3
    661c:	sub	sp, fp, #4
    6620:	ldr	fp, [sp]
    6624:	add	sp, sp, #4
    6628:	pop	{pc}		; (ldr pc, [sp], #4)
