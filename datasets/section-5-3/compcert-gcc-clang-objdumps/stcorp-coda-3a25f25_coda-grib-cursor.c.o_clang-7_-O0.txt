
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_cursor_set_product>:
       0:	sub	sp, sp, #8
       4:	str	r0, [sp, #4]
       8:	str	r1, [sp]
       c:	ldr	r0, [sp]
      10:	ldr	r1, [sp, #4]
      14:	str	r0, [r1]
      18:	ldr	r0, [sp, #4]
      1c:	mov	r1, #1
      20:	str	r1, [r0, #4]
      24:	ldr	r0, [sp]
      28:	ldr	r0, [r0, #20]
      2c:	ldr	r1, [sp, #4]
      30:	str	r0, [r1, #8]
      34:	ldr	r0, [sp, #4]
      38:	mvn	r1, #0
      3c:	str	r1, [r0, #12]
      40:	ldr	r0, [sp, #4]
      44:	str	r1, [r0, #20]
      48:	str	r1, [r0, #16]
      4c:	movw	r0, #0
      50:	add	sp, sp, #8
      54:	bx	lr

00000058 <coda_grib_cursor_goto_array_element>:
      58:	push	{fp, lr}
      5c:	mov	fp, sp
      60:	sub	sp, sp, #24
      64:	str	r0, [fp, #-8]
      68:	str	r1, [sp, #12]
      6c:	str	r2, [sp, #8]
      70:	ldr	r0, [sp, #12]
      74:	cmp	r0, #1
      78:	beq	ac <coda_grib_cursor_goto_array_element+0x54>
      7c:	ldr	r2, [sp, #12]
      80:	mvn	r0, #105	; 0x69
      84:	movw	r1, #0
      88:	movt	r1, #0
      8c:	movw	r3, #0
      90:	movt	r3, #0
      94:	movw	ip, #68	; 0x44
      98:	str	ip, [sp]
      9c:	bl	0 <coda_set_error>
      a0:	mvn	r0, #0
      a4:	str	r0, [fp, #-4]
      a8:	b	c0 <coda_grib_cursor_goto_array_element+0x68>
      ac:	ldr	r0, [fp, #-8]
      b0:	ldr	r1, [sp, #8]
      b4:	ldr	r1, [r1]
      b8:	bl	cc <coda_grib_cursor_goto_array_element_by_index>
      bc:	str	r0, [fp, #-4]
      c0:	ldr	r0, [fp, #-4]
      c4:	mov	sp, fp
      c8:	pop	{fp, pc}

000000cc <coda_grib_cursor_goto_array_element_by_index>:
      cc:	push	{fp, lr}
      d0:	mov	fp, sp
      d4:	sub	sp, sp, #32
      d8:	str	r0, [fp, #-8]
      dc:	str	r1, [fp, #-12]
      e0:	ldr	r0, [fp, #-8]
      e4:	ldr	r1, [r0, #4]
      e8:	add	r0, r0, r1, lsl #4
      ec:	ldr	r0, [r0, #-8]
      f0:	str	r0, [sp, #16]
      f4:	ldr	r0, [pc, #220]	; 1d8 <coda_grib_cursor_goto_array_element_by_index+0x10c>
      f8:	ldr	r0, [pc, r0]
      fc:	str	r0, [sp, #12]
     100:	bl	0 <__aeabi_read_tp>
     104:	ldr	r1, [sp, #12]
     108:	ldr	r0, [r0, r1]
     10c:	cmp	r0, #0
     110:	beq	174 <coda_grib_cursor_goto_array_element_by_index+0xa8>
     114:	ldr	r0, [fp, #-12]
     118:	cmp	r0, #0
     11c:	blt	134 <coda_grib_cursor_goto_array_element_by_index+0x68>
     120:	ldr	r0, [fp, #-12]
     124:	ldr	r1, [sp, #16]
     128:	ldr	r1, [r1, #8]
     12c:	cmp	r0, r1
     130:	blt	170 <coda_grib_cursor_goto_array_element_by_index+0xa4>
     134:	ldr	r2, [fp, #-12]
     138:	ldr	r0, [sp, #16]
     13c:	ldr	r3, [r0, #8]
     140:	mvn	r0, #106	; 0x6a
     144:	movw	r1, #0
     148:	movt	r1, #0
     14c:	movw	ip, #0
     150:	movt	ip, #0
     154:	str	ip, [sp]
     158:	movw	ip, #84	; 0x54
     15c:	str	ip, [sp, #4]
     160:	bl	0 <coda_set_error>
     164:	mvn	r0, #0
     168:	str	r0, [fp, #-4]
     16c:	b	1cc <coda_grib_cursor_goto_array_element_by_index+0x100>
     170:	b	174 <coda_grib_cursor_goto_array_element_by_index+0xa8>
     174:	ldr	r0, [fp, #-8]
     178:	ldr	r1, [r0, #4]
     17c:	add	r1, r1, #1
     180:	str	r1, [r0, #4]
     184:	ldr	r0, [sp, #16]
     188:	ldr	r0, [r0, #12]
     18c:	ldr	r1, [fp, #-8]
     190:	ldr	r2, [r1, #4]
     194:	add	r1, r1, r2, lsl #4
     198:	str	r0, [r1, #-8]
     19c:	ldr	r0, [fp, #-12]
     1a0:	ldr	r1, [fp, #-8]
     1a4:	ldr	r2, [r1, #4]
     1a8:	add	r1, r1, r2, lsl #4
     1ac:	str	r0, [r1, #-4]
     1b0:	ldr	r0, [fp, #-8]
     1b4:	ldr	r1, [r0, #4]
     1b8:	mvn	r2, #0
     1bc:	str	r2, [r0, r1, lsl #4]!
     1c0:	str	r2, [r0, #4]
     1c4:	movw	r0, #0
     1c8:	str	r0, [fp, #-4]
     1cc:	ldr	r0, [fp, #-4]
     1d0:	mov	sp, fp
     1d4:	pop	{fp, pc}
     1d8:	.word	0x000000d8

000001dc <coda_grib_cursor_goto_next_array_element>:
     1dc:	push	{fp, lr}
     1e0:	mov	fp, sp
     1e4:	sub	sp, sp, #8
     1e8:	str	r0, [sp]
     1ec:	ldr	r0, [sp]
     1f0:	ldr	r1, [r0, #4]
     1f4:	sub	r1, r1, #1
     1f8:	str	r1, [r0, #4]
     1fc:	ldr	r0, [sp]
     200:	add	r1, r0, #8
     204:	ldr	r2, [r0, #4]
     208:	add	r1, r1, r2, lsl #4
     20c:	ldr	r1, [r1, #4]
     210:	add	r1, r1, #1
     214:	bl	cc <coda_grib_cursor_goto_array_element_by_index>
     218:	cmp	r0, #0
     21c:	beq	23c <coda_grib_cursor_goto_next_array_element+0x60>
     220:	ldr	r0, [sp]
     224:	ldr	r1, [r0, #4]
     228:	add	r1, r1, #1
     22c:	str	r1, [r0, #4]
     230:	mvn	r0, #0
     234:	str	r0, [sp, #4]
     238:	b	244 <coda_grib_cursor_goto_next_array_element+0x68>
     23c:	movw	r0, #0
     240:	str	r0, [sp, #4]
     244:	ldr	r0, [sp, #4]
     248:	mov	sp, fp
     24c:	pop	{fp, pc}

00000250 <coda_grib_cursor_goto_attributes>:
     250:	push	{fp, lr}
     254:	mov	fp, sp
     258:	sub	sp, sp, #8
     25c:	str	r0, [sp, #4]
     260:	ldr	r0, [sp, #4]
     264:	ldr	r1, [r0, #4]
     268:	add	r0, r0, r1, lsl #4
     26c:	ldr	r0, [r0, #-8]
     270:	ldr	r0, [r0, #4]
     274:	ldr	r0, [r0]
     278:	str	r0, [sp]
     27c:	ldr	r0, [sp, #4]
     280:	ldr	r1, [r0, #4]
     284:	add	r1, r1, #1
     288:	str	r1, [r0, #4]
     28c:	ldr	r0, [sp]
     290:	bl	0 <coda_mem_empty_record>
     294:	ldr	r1, [sp, #4]
     298:	ldr	lr, [r1, #4]
     29c:	add	r1, r1, lr, lsl #4
     2a0:	str	r0, [r1, #-8]
     2a4:	ldr	r0, [sp, #4]
     2a8:	ldr	r1, [r0, #4]
     2ac:	add	r0, r0, r1, lsl #4
     2b0:	mvn	r1, #0
     2b4:	str	r1, [r0, #-4]
     2b8:	ldr	r0, [sp, #4]
     2bc:	ldr	lr, [r0, #4]
     2c0:	str	r1, [r0, lr, lsl #4]!
     2c4:	str	r1, [r0, #4]
     2c8:	movw	r0, #0
     2cc:	mov	sp, fp
     2d0:	pop	{fp, pc}

000002d4 <coda_grib_cursor_get_num_elements>:
     2d4:	sub	sp, sp, #8
     2d8:	str	r0, [sp, #4]
     2dc:	str	r1, [sp]
     2e0:	ldr	r0, [sp, #4]
     2e4:	add	r1, r0, #8
     2e8:	ldr	r0, [r0, #4]
     2ec:	sub	r0, r0, #1
     2f0:	add	r0, r1, r0, lsl #4
     2f4:	ldr	r0, [r0]
     2f8:	ldr	r0, [r0, #4]
     2fc:	ldr	r0, [r0, #8]
     300:	cmp	r0, #1
     304:	bne	330 <coda_grib_cursor_get_num_elements+0x5c>
     308:	ldr	r0, [sp, #4]
     30c:	add	r1, r0, #8
     310:	ldr	r0, [r0, #4]
     314:	sub	r0, r0, #1
     318:	add	r0, r1, r0, lsl #4
     31c:	ldr	r0, [r0]
     320:	ldr	r0, [r0, #8]
     324:	ldr	r1, [sp]
     328:	str	r0, [r1]
     32c:	b	33c <coda_grib_cursor_get_num_elements+0x68>
     330:	ldr	r0, [sp]
     334:	movw	r1, #1
     338:	str	r1, [r0]
     33c:	movw	r0, #0
     340:	add	sp, sp, #8
     344:	bx	lr

00000348 <coda_grib_cursor_get_array_dim>:
     348:	push	{fp, lr}
     34c:	mov	fp, sp
     350:	sub	sp, sp, #16
     354:	str	r0, [fp, #-4]
     358:	str	r1, [sp, #8]
     35c:	str	r2, [sp, #4]
     360:	ldr	r0, [sp, #8]
     364:	movw	r1, #1
     368:	str	r1, [r0]
     36c:	ldr	r0, [fp, #-4]
     370:	ldr	r1, [sp, #4]
     374:	bl	2d4 <coda_grib_cursor_get_num_elements>
     378:	mov	sp, fp
     37c:	pop	{fp, pc}

00000380 <coda_grib_cursor_read_float>:
     380:	push	{r4, sl, fp, lr}
     384:	add	fp, sp, #8
     388:	sub	sp, sp, #72	; 0x48
     38c:	str	r0, [fp, #-16]
     390:	str	r1, [fp, #-20]	; 0xffffffec
     394:	ldr	r0, [fp, #-16]
     398:	ldr	r0, [r0, #4]
     39c:	cmp	r0, #1
     3a0:	ble	3a8 <coda_grib_cursor_read_float+0x28>
     3a4:	b	3c8 <coda_grib_cursor_read_float+0x48>
     3a8:	movw	r0, #0
     3ac:	movt	r0, #0
     3b0:	movw	r1, #0
     3b4:	movt	r1, #0
     3b8:	movw	r2, #144	; 0x90
     3bc:	movw	r3, #0
     3c0:	movt	r3, #0
     3c4:	bl	0 <__assert_fail>
     3c8:	ldr	r0, [fp, #-16]
     3cc:	add	r1, r0, #8
     3d0:	ldr	r0, [r0, #4]
     3d4:	sub	r0, r0, #2
     3d8:	add	r0, r1, r0, lsl #4
     3dc:	ldr	r0, [r0]
     3e0:	str	r0, [fp, #-24]	; 0xffffffe8
     3e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3e8:	ldr	r0, [r0, #4]
     3ec:	ldr	r0, [r0, #8]
     3f0:	cmp	r0, #1
     3f4:	bne	3fc <coda_grib_cursor_read_float+0x7c>
     3f8:	b	41c <coda_grib_cursor_read_float+0x9c>
     3fc:	movw	r0, #0
     400:	movt	r0, #0
     404:	movw	r1, #0
     408:	movt	r1, #0
     40c:	movw	r2, #146	; 0x92
     410:	movw	r3, #0
     414:	movt	r3, #0
     418:	bl	0 <__assert_fail>
     41c:	ldr	r0, [fp, #-16]
     420:	add	r1, r0, #8
     424:	ldr	r0, [r0, #4]
     428:	sub	r0, r0, #1
     42c:	add	r0, r1, r0, lsl #4
     430:	ldr	r0, [r0, #4]
     434:	str	r0, [fp, #-28]	; 0xffffffe4
     438:	ldr	r0, [fp, #-24]	; 0xffffffe8
     43c:	ldr	r0, [r0, #24]
     440:	cmp	r0, #0
     444:	beq	6d8 <coda_grib_cursor_read_float+0x358>
     448:	mov	r0, #0
     44c:	str	r0, [sp, #44]	; 0x2c
     450:	str	r0, [sp, #40]	; 0x28
     454:	ldr	r0, [fp, #-24]	; 0xffffffe8
     458:	ldr	r0, [r0, #28]
     45c:	cmp	r0, #0
     460:	bne	480 <coda_grib_cursor_read_float+0x100>
     464:	ldr	r0, [fp, #-24]	; 0xffffffe8
     468:	vldr	s0, [r0, #36]	; 0x24
     46c:	ldr	r0, [fp, #-20]	; 0xffffffec
     470:	vstr	s0, [r0]
     474:	movw	r0, #0
     478:	str	r0, [fp, #-12]
     47c:	b	750 <coda_grib_cursor_read_float+0x3d0>
     480:	ldr	r0, [fp, #-24]	; 0xffffffe8
     484:	ldr	r0, [r0, #56]	; 0x38
     488:	movw	r1, #0
     48c:	cmp	r0, r1
     490:	beq	604 <coda_grib_cursor_read_float+0x284>
     494:	movw	r0, #0
     498:	str	r0, [sp, #24]
     49c:	ldr	r0, [fp, #-28]	; 0xffffffe4
     4a0:	asr	r0, r0, #3
     4a4:	str	r0, [sp, #28]
     4a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4ac:	ldr	r0, [r0, #56]	; 0x38
     4b0:	ldr	r1, [sp, #28]
     4b4:	add	r0, r0, r1
     4b8:	ldrb	r0, [r0]
     4bc:	strb	r0, [sp, #35]	; 0x23
     4c0:	ldrb	r0, [sp, #35]	; 0x23
     4c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     4c8:	and	r1, r1, #7
     4cc:	movw	r2, #7
     4d0:	sub	r1, r2, r1
     4d4:	asr	r0, r0, r1
     4d8:	and	r0, r0, #1
     4dc:	cmp	r0, #0
     4e0:	bne	500 <coda_grib_cursor_read_float+0x180>
     4e4:	bl	0 <coda_NaN>
     4e8:	vcvt.f32.f64	s2, d0
     4ec:	ldr	lr, [fp, #-20]	; 0xffffffec
     4f0:	vstr	s2, [lr]
     4f4:	movw	lr, #0
     4f8:	str	lr, [fp, #-12]
     4fc:	b	750 <coda_grib_cursor_read_float+0x3d0>
     500:	movw	r0, #0
     504:	str	r0, [sp, #20]
     508:	ldr	r0, [sp, #20]
     50c:	ldr	r1, [sp, #28]
     510:	asr	r1, r1, #4
     514:	cmp	r0, r1
     518:	bge	554 <coda_grib_cursor_read_float+0x1d4>
     51c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     520:	ldr	r0, [r0, #60]	; 0x3c
     524:	ldr	r1, [sp, #20]
     528:	lsl	r1, r1, #4
     52c:	add	r1, r1, #15
     530:	add	r0, r0, r1
     534:	ldrb	r0, [r0]
     538:	ldr	r1, [sp, #24]
     53c:	add	r0, r1, r0
     540:	str	r0, [sp, #24]
     544:	ldr	r0, [sp, #20]
     548:	add	r0, r0, #1
     54c:	str	r0, [sp, #20]
     550:	b	508 <coda_grib_cursor_read_float+0x188>
     554:	ldr	r0, [sp, #28]
     558:	asr	r1, r0, #31
     55c:	add	r1, r0, r1, lsr #28
     560:	bic	r1, r1, #15
     564:	sub	r0, r0, r1
     568:	cmp	r0, #0
     56c:	beq	594 <coda_grib_cursor_read_float+0x214>
     570:	ldr	r0, [fp, #-24]	; 0xffffffe8
     574:	ldr	r0, [r0, #60]	; 0x3c
     578:	ldr	r1, [sp, #28]
     57c:	sub	r1, r1, #1
     580:	add	r0, r0, r1
     584:	ldrb	r0, [r0]
     588:	ldr	r1, [sp, #24]
     58c:	add	r0, r1, r0
     590:	str	r0, [sp, #24]
     594:	ldr	r0, [fp, #-24]	; 0xffffffe8
     598:	ldr	r0, [r0, #56]	; 0x38
     59c:	ldr	r1, [sp, #28]
     5a0:	add	r0, r0, r1
     5a4:	ldrb	r0, [r0]
     5a8:	strb	r0, [sp, #35]	; 0x23
     5ac:	movw	r0, #0
     5b0:	str	r0, [sp, #20]
     5b4:	ldr	r0, [sp, #20]
     5b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     5bc:	and	r1, r1, #7
     5c0:	cmp	r0, r1
     5c4:	bge	5fc <coda_grib_cursor_read_float+0x27c>
     5c8:	ldrb	r0, [sp, #35]	; 0x23
     5cc:	ldr	r1, [sp, #20]
     5d0:	movw	r2, #7
     5d4:	sub	r1, r2, r1
     5d8:	asr	r0, r0, r1
     5dc:	and	r0, r0, #1
     5e0:	ldr	r1, [sp, #24]
     5e4:	add	r0, r1, r0
     5e8:	str	r0, [sp, #24]
     5ec:	ldr	r0, [sp, #20]
     5f0:	add	r0, r0, #1
     5f4:	str	r0, [sp, #20]
     5f8:	b	5b4 <coda_grib_cursor_read_float+0x234>
     5fc:	ldr	r0, [sp, #24]
     600:	str	r0, [fp, #-28]	; 0xffffffe4
     604:	ldr	r0, [fp, #-24]	; 0xffffffe8
     608:	ldr	r0, [r0, #28]
     60c:	asr	r1, r0, #3
     610:	mov	r2, #1
     614:	add	r2, r2, r0, asr #3
     618:	tst	r0, #7
     61c:	movne	r1, r2
     620:	rsb	r0, r1, #8
     624:	add	r1, sp, #40	; 0x28
     628:	add	r0, r1, r0
     62c:	str	r0, [sp, #36]	; 0x24
     630:	ldr	r0, [fp, #-16]
     634:	ldr	r0, [r0]
     638:	ldr	r0, [r0, #52]	; 0x34
     63c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     640:	ldr	r2, [fp, #-28]	; 0xffffffe4
     644:	ldr	r3, [r1, #16]
     648:	ldr	ip, [r1, #20]
     64c:	ldr	r1, [r1, #28]
     650:	asr	lr, r1, #31
     654:	mul	r2, r2, r1
     658:	adds	r3, r3, r2
     65c:	adc	r2, ip, r2, asr #31
     660:	ldr	ip, [sp, #36]	; 0x24
     664:	mov	r4, sp
     668:	str	ip, [r4, #8]
     66c:	str	lr, [r4, #4]
     670:	str	r1, [r4]
     674:	str	r2, [sp, #16]
     678:	mov	r2, r3
     67c:	ldr	r3, [sp, #16]
     680:	bl	75c <read_bits>
     684:	cmp	r0, #0
     688:	beq	698 <coda_grib_cursor_read_float+0x318>
     68c:	mvn	r0, #0
     690:	str	r0, [fp, #-12]
     694:	b	750 <coda_grib_cursor_read_float+0x3d0>
     698:	add	r0, sp, #40	; 0x28
     69c:	bl	d28 <swap8>
     6a0:	ldr	r0, [sp, #40]	; 0x28
     6a4:	ldr	r1, [sp, #44]	; 0x2c
     6a8:	bl	0 <__aeabi_l2d>
     6ac:	vmov	d16, r0, r1
     6b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6b4:	vldr	d17, [r0, #40]	; 0x28
     6b8:	vmul.f64	d16, d16, d17
     6bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6c0:	vldr	d17, [r0, #48]	; 0x30
     6c4:	vadd.f64	d16, d16, d17
     6c8:	vcvt.f32.f64	s0, d16
     6cc:	ldr	r0, [fp, #-20]	; 0xffffffec
     6d0:	vstr	s0, [r0]
     6d4:	b	748 <coda_grib_cursor_read_float+0x3c8>
     6d8:	ldr	r0, [fp, #-16]
     6dc:	ldr	r0, [r0]
     6e0:	ldr	r0, [r0, #52]	; 0x34
     6e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     6e8:	ldr	r2, [r1, #16]
     6ec:	ldr	r1, [r1, #20]
     6f0:	lsr	r2, r2, #3
     6f4:	orr	r2, r2, r1, lsl #29
     6f8:	asr	r1, r1, #3
     6fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     700:	lsl	ip, r3, #2
     704:	adds	r2, r2, r3, lsl #2
     708:	adc	r3, r1, ip, asr #31
     70c:	ldr	r1, [fp, #-20]	; 0xffffffec
     710:	mov	ip, sp
     714:	str	r1, [ip, #8]
     718:	mov	r1, #0
     71c:	str	r1, [ip, #4]
     720:	mov	r1, #4
     724:	str	r1, [ip]
     728:	bl	e90 <read_bytes>
     72c:	cmp	r0, #0
     730:	beq	740 <coda_grib_cursor_read_float+0x3c0>
     734:	mvn	r0, #0
     738:	str	r0, [fp, #-12]
     73c:	b	750 <coda_grib_cursor_read_float+0x3d0>
     740:	ldr	r0, [fp, #-20]	; 0xffffffec
     744:	bl	10f8 <swap4>
     748:	movw	r0, #0
     74c:	str	r0, [fp, #-12]
     750:	ldr	r0, [fp, #-12]
     754:	sub	sp, fp, #8
     758:	pop	{r4, sl, fp, pc}

0000075c <read_bits>:
     75c:	push	{r4, r5, r6, sl, fp, lr}
     760:	add	fp, sp, #16
     764:	sub	sp, sp, #136	; 0x88
     768:	ldr	r1, [fp, #12]
     76c:	ldr	ip, [fp, #8]
     770:	ldr	lr, [fp, #16]
     774:	str	r0, [fp, #-24]	; 0xffffffe8
     778:	str	r3, [fp, #-28]	; 0xffffffe4
     77c:	str	r2, [fp, #-32]	; 0xffffffe0
     780:	str	r1, [fp, #-36]	; 0xffffffdc
     784:	str	ip, [fp, #-40]	; 0xffffffd8
     788:	ldr	r0, [fp, #-32]	; 0xffffffe0
     78c:	and	r0, r0, #7
     790:	ldr	r1, [fp, #-40]	; 0xffffffd8
     794:	ldr	r2, [fp, #-36]	; 0xffffffdc
     798:	adds	r0, r0, r1
     79c:	adc	r1, r2, #0
     7a0:	str	r0, [fp, #-56]	; 0xffffffc8
     7a4:	str	r1, [fp, #-52]	; 0xffffffcc
     7a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     7ac:	rsb	r0, r0, #0
     7b0:	and	r0, r0, #7
     7b4:	str	r0, [fp, #-44]	; 0xffffffd4
     7b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
     7bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
     7c0:	rsbs	r0, r0, #8
     7c4:	rscs	r1, r1, #0
     7c8:	str	lr, [sp, #60]	; 0x3c
     7cc:	str	r0, [sp, #56]	; 0x38
     7d0:	str	r1, [sp, #52]	; 0x34
     7d4:	blt	880 <read_bits+0x124>
     7d8:	b	7dc <read_bits+0x80>
     7dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     7e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     7e8:	lsr	r1, r1, #3
     7ec:	orr	r1, r1, r2, lsl #29
     7f0:	asr	r3, r2, #3
     7f4:	ldr	r2, [fp, #16]
     7f8:	mov	ip, sp
     7fc:	str	r2, [ip, #8]
     800:	mov	r2, #0
     804:	str	r2, [ip, #4]
     808:	mov	r2, #1
     80c:	str	r2, [ip]
     810:	mov	r2, r1
     814:	bl	e90 <read_bytes>
     818:	cmp	r0, #0
     81c:	beq	82c <read_bits+0xd0>
     820:	mvn	r0, #0
     824:	str	r0, [fp, #-20]	; 0xffffffec
     828:	b	d1c <read_bits+0x5c0>
     82c:	ldr	r0, [fp, #-44]	; 0xffffffd4
     830:	cmp	r0, #0
     834:	beq	84c <read_bits+0xf0>
     838:	ldr	r0, [fp, #-44]	; 0xffffffd4
     83c:	ldr	r1, [fp, #16]
     840:	ldrb	r2, [r1]
     844:	asr	r0, r2, r0
     848:	strb	r0, [r1]
     84c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     850:	tst	r0, #7
     854:	beq	87c <read_bits+0x120>
     858:	b	85c <read_bits+0x100>
     85c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     860:	movw	r1, #1
     864:	lsl	r0, r1, r0
     868:	sub	r0, r0, #1
     86c:	ldr	r1, [fp, #16]
     870:	ldrb	r2, [r1]
     874:	and	r0, r2, r0
     878:	strb	r0, [r1]
     87c:	b	d14 <read_bits+0x5b8>
     880:	ldr	r0, [fp, #-44]	; 0xffffffd4
     884:	cmp	r0, #0
     888:	bne	9e0 <read_bits+0x284>
     88c:	ldrb	r0, [fp, #-40]	; 0xffffffd8
     890:	tst	r0, #7
     894:	beq	95c <read_bits+0x200>
     898:	b	89c <read_bits+0x140>
     89c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     8a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     8a8:	lsr	r1, r1, #3
     8ac:	orr	r1, r1, r2, lsl #29
     8b0:	asr	r3, r2, #3
     8b4:	mov	r2, sp
     8b8:	sub	ip, fp, #61	; 0x3d
     8bc:	str	ip, [r2, #8]
     8c0:	mov	ip, #0
     8c4:	str	ip, [r2, #4]
     8c8:	mov	ip, #1
     8cc:	str	ip, [r2]
     8d0:	mov	r2, r1
     8d4:	bl	e90 <read_bytes>
     8d8:	cmp	r0, #0
     8dc:	beq	8ec <read_bits+0x190>
     8e0:	mvn	r0, #0
     8e4:	str	r0, [fp, #-20]	; 0xffffffec
     8e8:	b	d1c <read_bits+0x5c0>
     8ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
     8f0:	and	r0, r0, #7
     8f4:	str	r0, [fp, #-60]	; 0xffffffc4
     8f8:	ldrb	r0, [fp, #-61]	; 0xffffffc3
     8fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
     900:	mov	r2, #1
     904:	mvn	r3, #0
     908:	add	r1, r3, r2, lsl r1
     90c:	and	r0, r0, r1
     910:	ldr	r1, [fp, #16]
     914:	strb	r0, [r1]
     918:	ldr	r0, [fp, #16]
     91c:	add	r0, r0, #1
     920:	str	r0, [fp, #16]
     924:	ldr	r0, [fp, #-60]	; 0xffffffc4
     928:	ldr	r1, [fp, #-32]	; 0xffffffe0
     92c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     930:	adds	r0, r1, r0
     934:	adc	r1, r2, #0
     938:	str	r0, [fp, #-32]	; 0xffffffe0
     93c:	str	r1, [fp, #-28]	; 0xffffffe4
     940:	ldr	r0, [fp, #-60]	; 0xffffffc4
     944:	ldr	r1, [fp, #-40]	; 0xffffffd8
     948:	ldr	r2, [fp, #-36]	; 0xffffffdc
     94c:	subs	r0, r1, r0
     950:	sbc	r1, r2, #0
     954:	str	r0, [fp, #-40]	; 0xffffffd8
     958:	str	r1, [fp, #-36]	; 0xffffffdc
     95c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     960:	ldr	r1, [fp, #-36]	; 0xffffffdc
     964:	subs	r0, r0, #1
     968:	sbcs	r1, r1, #0
     96c:	str	r0, [sp, #48]	; 0x30
     970:	str	r1, [sp, #44]	; 0x2c
     974:	blt	9dc <read_bits+0x280>
     978:	b	97c <read_bits+0x220>
     97c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     980:	ldr	r1, [fp, #-32]	; 0xffffffe0
     984:	ldr	r2, [fp, #-28]	; 0xffffffe4
     988:	lsr	r1, r1, #3
     98c:	orr	r1, r1, r2, lsl #29
     990:	asr	r3, r2, #3
     994:	ldr	r2, [fp, #-40]	; 0xffffffd8
     998:	ldr	ip, [fp, #-36]	; 0xffffffdc
     99c:	lsr	r2, r2, #3
     9a0:	orr	r2, r2, ip, lsl #29
     9a4:	asr	ip, ip, #3
     9a8:	ldr	lr, [fp, #16]
     9ac:	mov	r4, sp
     9b0:	str	lr, [r4, #8]
     9b4:	str	ip, [r4, #4]
     9b8:	str	r2, [r4]
     9bc:	mov	r2, r1
     9c0:	bl	e90 <read_bytes>
     9c4:	cmp	r0, #0
     9c8:	beq	9d8 <read_bits+0x27c>
     9cc:	mvn	r0, #0
     9d0:	str	r0, [fp, #-20]	; 0xffffffec
     9d4:	b	d1c <read_bits+0x5c0>
     9d8:	b	9dc <read_bits+0x280>
     9dc:	b	d10 <read_bits+0x5b4>
     9e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     9e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     9e8:	mov	r2, #24
     9ec:	mov	r3, #0
     9f0:	bl	0 <__aeabi_ldivmod>
     9f4:	orr	r2, r2, r3
     9f8:	cmp	r2, #0
     9fc:	str	r0, [sp, #40]	; 0x28
     a00:	str	r1, [sp, #36]	; 0x24
     a04:	beq	c04 <read_bits+0x4a8>
     a08:	b	a0c <read_bits+0x2b0>
     a0c:	sub	r0, fp, #65	; 0x41
     a10:	ldr	r1, [fp, #-40]	; 0xffffffd8
     a14:	ldr	r2, [fp, #-36]	; 0xffffffdc
     a18:	mov	r3, #24
     a1c:	mov	ip, #0
     a20:	str	r0, [sp, #32]
     a24:	mov	r0, r1
     a28:	mov	r1, r2
     a2c:	mov	r2, r3
     a30:	mov	r3, ip
     a34:	str	ip, [sp, #28]
     a38:	bl	0 <__aeabi_ldivmod>
     a3c:	str	r2, [sp, #76]	; 0x4c
     a40:	ldr	r2, [fp, #-32]	; 0xffffffe0
     a44:	and	r2, r2, #7
     a48:	ldr	r3, [sp, #76]	; 0x4c
     a4c:	add	r2, r2, r3
     a50:	lsr	r3, r2, #3
     a54:	mov	ip, #1
     a58:	add	lr, ip, r2, lsr #3
     a5c:	tst	r2, #7
     a60:	movne	r3, lr
     a64:	str	r3, [sp, #72]	; 0x48
     a68:	ldr	r2, [sp, #76]	; 0x4c
     a6c:	lsr	r3, r2, #3
     a70:	add	ip, ip, r2, lsr #3
     a74:	tst	r2, #7
     a78:	movne	r3, ip
     a7c:	str	r3, [sp, #68]	; 0x44
     a80:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a84:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a88:	ldr	ip, [fp, #-28]	; 0xffffffe4
     a8c:	lsr	r3, r3, #3
     a90:	orr	r3, r3, ip, lsl #29
     a94:	asr	ip, ip, #3
     a98:	ldr	lr, [sp, #72]	; 0x48
     a9c:	mov	r4, sp
     aa0:	ldr	r5, [sp, #32]
     aa4:	str	r5, [r4, #8]
     aa8:	ldr	r6, [sp, #28]
     aac:	str	r6, [r4, #4]
     ab0:	str	lr, [r4]
     ab4:	str	r0, [sp, #24]
     ab8:	mov	r0, r2
     abc:	mov	r2, r3
     ac0:	mov	r3, ip
     ac4:	str	r1, [sp, #20]
     ac8:	bl	e90 <read_bytes>
     acc:	cmp	r0, #0
     ad0:	beq	ae0 <read_bits+0x384>
     ad4:	mvn	r0, #0
     ad8:	str	r0, [fp, #-20]	; 0xffffffec
     adc:	b	d1c <read_bits+0x5c0>
     ae0:	movw	r0, #0
     ae4:	str	r0, [fp, #-72]	; 0xffffffb8
     ae8:	str	r0, [sp, #64]	; 0x40
     aec:	ldr	r0, [sp, #64]	; 0x40
     af0:	ldr	r1, [sp, #72]	; 0x48
     af4:	cmp	r0, r1
     af8:	bcs	b34 <read_bits+0x3d8>
     afc:	ldr	r0, [sp, #64]	; 0x40
     b00:	sub	r1, fp, #65	; 0x41
     b04:	add	r0, r1, r0
     b08:	ldrb	r0, [r0]
     b0c:	sub	r1, fp, #72	; 0x48
     b10:	ldr	r2, [sp, #64]	; 0x40
     b14:	movw	r3, #3
     b18:	sub	r2, r3, r2
     b1c:	add	r1, r1, r2
     b20:	strb	r0, [r1]
     b24:	ldr	r0, [sp, #64]	; 0x40
     b28:	add	r0, r0, #1
     b2c:	str	r0, [sp, #64]	; 0x40
     b30:	b	aec <read_bits+0x390>
     b34:	ldr	r0, [fp, #-72]	; 0xffffffb8
     b38:	ldr	r1, [fp, #-44]	; 0xffffffd4
     b3c:	ldr	r2, [sp, #72]	; 0x48
     b40:	rsb	r2, r2, #4
     b44:	lsl	r2, r2, #3
     b48:	add	r1, r1, r2
     b4c:	lsr	r0, r0, r1
     b50:	ldr	r1, [sp, #76]	; 0x4c
     b54:	movw	r2, #1
     b58:	lsl	r1, r2, r1
     b5c:	sub	r1, r1, #1
     b60:	and	r0, r0, r1
     b64:	str	r0, [fp, #-72]	; 0xffffffb8
     b68:	movw	r0, #0
     b6c:	str	r0, [sp, #64]	; 0x40
     b70:	ldr	r0, [sp, #64]	; 0x40
     b74:	ldr	r1, [sp, #68]	; 0x44
     b78:	cmp	r0, r1
     b7c:	bcs	bbc <read_bits+0x460>
     b80:	sub	r0, fp, #72	; 0x48
     b84:	ldr	r1, [sp, #68]	; 0x44
     b88:	sub	r1, r1, #1
     b8c:	ldr	r2, [sp, #64]	; 0x40
     b90:	sub	r1, r1, r2
     b94:	add	r0, r0, r1
     b98:	ldrb	r0, [r0]
     b9c:	ldr	r1, [fp, #16]
     ba0:	ldr	r2, [sp, #64]	; 0x40
     ba4:	add	r1, r1, r2
     ba8:	strb	r0, [r1]
     bac:	ldr	r0, [sp, #64]	; 0x40
     bb0:	add	r0, r0, #1
     bb4:	str	r0, [sp, #64]	; 0x40
     bb8:	b	b70 <read_bits+0x414>
     bbc:	ldr	r0, [sp, #68]	; 0x44
     bc0:	ldr	r1, [fp, #16]
     bc4:	add	r0, r1, r0
     bc8:	str	r0, [fp, #16]
     bcc:	ldr	r0, [sp, #76]	; 0x4c
     bd0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     bd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bd8:	adds	r0, r1, r0
     bdc:	adc	r1, r2, #0
     be0:	str	r0, [fp, #-32]	; 0xffffffe0
     be4:	str	r1, [fp, #-28]	; 0xffffffe4
     be8:	ldr	r0, [sp, #76]	; 0x4c
     bec:	ldr	r1, [fp, #-40]	; 0xffffffd8
     bf0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     bf4:	subs	r0, r1, r0
     bf8:	sbc	r1, r2, #0
     bfc:	str	r0, [fp, #-40]	; 0xffffffd8
     c00:	str	r1, [fp, #-36]	; 0xffffffdc
     c04:	b	c08 <read_bits+0x4ac>
     c08:	ldr	r0, [fp, #-40]	; 0xffffffd8
     c0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c10:	subs	r0, r0, #1
     c14:	sbcs	r1, r1, #0
     c18:	str	r0, [sp, #16]
     c1c:	str	r1, [sp, #12]
     c20:	blt	d0c <read_bits+0x5b0>
     c24:	b	c28 <read_bits+0x4cc>
     c28:	sub	r0, fp, #65	; 0x41
     c2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     c30:	ldr	r2, [fp, #-32]	; 0xffffffe0
     c34:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c38:	lsr	r2, r2, #3
     c3c:	orr	r2, r2, r3, lsl #29
     c40:	asr	r3, r3, #3
     c44:	mov	ip, sp
     c48:	str	r0, [ip, #8]
     c4c:	mov	r0, #0
     c50:	str	r0, [ip, #4]
     c54:	mov	r0, #4
     c58:	str	r0, [ip]
     c5c:	mov	r0, r1
     c60:	bl	e90 <read_bytes>
     c64:	cmp	r0, #0
     c68:	beq	c78 <read_bits+0x51c>
     c6c:	mvn	r0, #0
     c70:	str	r0, [fp, #-20]	; 0xffffffec
     c74:	b	d1c <read_bits+0x5c0>
     c78:	ldrb	r0, [fp, #-62]	; 0xffffffc2
     c7c:	strb	r0, [fp, #-72]	; 0xffffffb8
     c80:	ldrb	r0, [fp, #-63]	; 0xffffffc1
     c84:	strb	r0, [fp, #-71]	; 0xffffffb9
     c88:	ldrb	r0, [fp, #-64]	; 0xffffffc0
     c8c:	strb	r0, [fp, #-70]	; 0xffffffba
     c90:	ldrb	r0, [fp, #-65]	; 0xffffffbf
     c94:	strb	r0, [fp, #-69]	; 0xffffffbb
     c98:	ldr	r0, [fp, #-44]	; 0xffffffd4
     c9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
     ca0:	lsr	r0, r1, r0
     ca4:	str	r0, [fp, #-72]	; 0xffffffb8
     ca8:	ldrb	r0, [fp, #-70]	; 0xffffffba
     cac:	ldr	r1, [fp, #16]
     cb0:	strb	r0, [r1]
     cb4:	ldrb	r0, [fp, #-71]	; 0xffffffb9
     cb8:	ldr	r1, [fp, #16]
     cbc:	strb	r0, [r1, #1]
     cc0:	ldrb	r0, [fp, #-72]	; 0xffffffb8
     cc4:	ldr	r1, [fp, #16]
     cc8:	strb	r0, [r1, #2]
     ccc:	ldr	r0, [fp, #16]
     cd0:	add	r0, r0, #3
     cd4:	str	r0, [fp, #16]
     cd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
     cdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
     ce0:	adds	r0, r0, #24
     ce4:	adc	r1, r1, #0
     ce8:	str	r0, [fp, #-32]	; 0xffffffe0
     cec:	str	r1, [fp, #-28]	; 0xffffffe4
     cf0:	ldr	r0, [fp, #-40]	; 0xffffffd8
     cf4:	ldr	r1, [fp, #-36]	; 0xffffffdc
     cf8:	subs	r0, r0, #24
     cfc:	sbc	r1, r1, #0
     d00:	str	r0, [fp, #-40]	; 0xffffffd8
     d04:	str	r1, [fp, #-36]	; 0xffffffdc
     d08:	b	c08 <read_bits+0x4ac>
     d0c:	b	d10 <read_bits+0x5b4>
     d10:	b	d14 <read_bits+0x5b8>
     d14:	movw	r0, #0
     d18:	str	r0, [fp, #-20]	; 0xffffffec
     d1c:	ldr	r0, [fp, #-20]	; 0xffffffec
     d20:	sub	sp, fp, #16
     d24:	pop	{r4, r5, r6, sl, fp, pc}

00000d28 <swap8>:
     d28:	sub	sp, sp, #8
     d2c:	str	r0, [sp, #4]
     d30:	ldr	r0, [sp, #4]
     d34:	str	r0, [sp]
     d38:	ldr	r0, [sp]
     d3c:	ldrb	r0, [r0]
     d40:	ldr	r1, [sp]
     d44:	ldrb	r1, [r1, #7]
     d48:	eor	r0, r0, r1
     d4c:	ldr	r1, [sp]
     d50:	strb	r0, [r1]
     d54:	ldr	r0, [sp]
     d58:	ldrb	r0, [r0]
     d5c:	ldr	r1, [sp]
     d60:	ldrb	r1, [r1, #7]
     d64:	eor	r0, r0, r1
     d68:	ldr	r1, [sp]
     d6c:	strb	r0, [r1, #7]
     d70:	ldr	r0, [sp]
     d74:	ldrb	r0, [r0]
     d78:	ldr	r1, [sp]
     d7c:	ldrb	r1, [r1, #7]
     d80:	eor	r0, r0, r1
     d84:	ldr	r1, [sp]
     d88:	strb	r0, [r1]
     d8c:	ldr	r0, [sp]
     d90:	ldrb	r0, [r0, #1]
     d94:	ldr	r1, [sp]
     d98:	ldrb	r1, [r1, #6]
     d9c:	eor	r0, r0, r1
     da0:	ldr	r1, [sp]
     da4:	strb	r0, [r1, #1]
     da8:	ldr	r0, [sp]
     dac:	ldrb	r0, [r0, #1]
     db0:	ldr	r1, [sp]
     db4:	ldrb	r1, [r1, #6]
     db8:	eor	r0, r0, r1
     dbc:	ldr	r1, [sp]
     dc0:	strb	r0, [r1, #6]
     dc4:	ldr	r0, [sp]
     dc8:	ldrb	r0, [r0, #1]
     dcc:	ldr	r1, [sp]
     dd0:	ldrb	r1, [r1, #6]
     dd4:	eor	r0, r0, r1
     dd8:	ldr	r1, [sp]
     ddc:	strb	r0, [r1, #1]
     de0:	ldr	r0, [sp]
     de4:	ldrb	r0, [r0, #2]
     de8:	ldr	r1, [sp]
     dec:	ldrb	r1, [r1, #5]
     df0:	eor	r0, r0, r1
     df4:	ldr	r1, [sp]
     df8:	strb	r0, [r1, #2]
     dfc:	ldr	r0, [sp]
     e00:	ldrb	r0, [r0, #2]
     e04:	ldr	r1, [sp]
     e08:	ldrb	r1, [r1, #5]
     e0c:	eor	r0, r0, r1
     e10:	ldr	r1, [sp]
     e14:	strb	r0, [r1, #5]
     e18:	ldr	r0, [sp]
     e1c:	ldrb	r0, [r0, #2]
     e20:	ldr	r1, [sp]
     e24:	ldrb	r1, [r1, #5]
     e28:	eor	r0, r0, r1
     e2c:	ldr	r1, [sp]
     e30:	strb	r0, [r1, #2]
     e34:	ldr	r0, [sp]
     e38:	ldrb	r0, [r0, #3]
     e3c:	ldr	r1, [sp]
     e40:	ldrb	r1, [r1, #4]
     e44:	eor	r0, r0, r1
     e48:	ldr	r1, [sp]
     e4c:	strb	r0, [r1, #3]
     e50:	ldr	r0, [sp]
     e54:	ldrb	r0, [r0, #3]
     e58:	ldr	r1, [sp]
     e5c:	ldrb	r1, [r1, #4]
     e60:	eor	r0, r0, r1
     e64:	ldr	r1, [sp]
     e68:	strb	r0, [r1, #4]
     e6c:	ldr	r0, [sp]
     e70:	ldrb	r0, [r0, #3]
     e74:	ldr	r1, [sp]
     e78:	ldrb	r1, [r1, #4]
     e7c:	eor	r0, r0, r1
     e80:	ldr	r1, [sp]
     e84:	strb	r0, [r1, #3]
     e88:	add	sp, sp, #8
     e8c:	bx	lr

00000e90 <read_bytes>:
     e90:	push	{fp, lr}
     e94:	mov	fp, sp
     e98:	sub	sp, sp, #128	; 0x80
     e9c:	ldr	r1, [fp, #12]
     ea0:	ldr	ip, [fp, #8]
     ea4:	ldr	lr, [fp, #16]
     ea8:	str	r0, [fp, #-8]
     eac:	str	r3, [fp, #-12]
     eb0:	str	r2, [fp, #-16]
     eb4:	str	r1, [fp, #-20]	; 0xffffffec
     eb8:	str	ip, [fp, #-24]	; 0xffffffe8
     ebc:	ldr	r0, [fp, #-8]
     ec0:	ldr	r0, [r0, #48]	; 0x30
     ec4:	movw	r1, #0
     ec8:	cmp	r0, r1
     ecc:	str	lr, [sp, #36]	; 0x24
     ed0:	beq	ff0 <read_bytes+0x160>
     ed4:	ldr	r0, [fp, #-16]
     ed8:	ldr	r1, [fp, #-12]
     edc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ee4:	adds	r0, r0, r2
     ee8:	adc	r1, r1, r3
     eec:	ldr	r2, [fp, #-8]
     ef0:	ldr	r3, [r2, #40]	; 0x28
     ef4:	ldr	r2, [r2, #44]	; 0x2c
     ef8:	subs	r0, r3, r0
     efc:	sbcs	r1, r2, r1
     f00:	str	r0, [sp, #32]
     f04:	str	r1, [sp, #28]
     f08:	bcs	fd0 <read_bytes+0x140>
     f0c:	b	f10 <read_bytes+0x80>
     f10:	ldr	r0, [fp, #-8]
     f14:	ldr	r0, [r0, #16]
     f18:	cmp	r0, #0
     f1c:	beq	f30 <read_bytes+0xa0>
     f20:	ldr	r0, [fp, #-8]
     f24:	ldr	r0, [r0, #16]
     f28:	cmp	r0, #1
     f2c:	bne	f4c <read_bytes+0xbc>
     f30:	mvn	r0, #300	; 0x12c
     f34:	movw	r1, #0
     f38:	movt	r1, #0
     f3c:	bl	0 <coda_set_error>
     f40:	mvn	r0, #0
     f44:	str	r0, [fp, #-4]
     f48:	b	10ec <read_bytes+0x25c>
     f4c:	add	r2, sp, #41	; 0x29
     f50:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f54:	ldr	r1, [fp, #-20]	; 0xffffffec
     f58:	sub	r3, fp, #45	; 0x2d
     f5c:	str	r2, [sp, #24]
     f60:	mov	r2, r3
     f64:	bl	0 <coda_str64>
     f68:	ldr	r0, [fp, #-16]
     f6c:	ldr	r1, [fp, #-12]
     f70:	add	r2, sp, #62	; 0x3e
     f74:	bl	0 <coda_str64>
     f78:	ldr	r0, [fp, #-8]
     f7c:	ldr	r1, [r0, #40]	; 0x28
     f80:	ldr	r0, [r0, #44]	; 0x2c
     f84:	str	r0, [sp, #20]
     f88:	mov	r0, r1
     f8c:	ldr	r1, [sp, #20]
     f90:	ldr	r2, [sp, #24]
     f94:	bl	0 <coda_str64>
     f98:	add	r0, sp, #41	; 0x29
     f9c:	add	r3, sp, #62	; 0x3e
     fa0:	sub	r2, fp, #45	; 0x2d
     fa4:	mvn	r1, #300	; 0x12c
     fa8:	str	r0, [sp, #16]
     fac:	mov	r0, r1
     fb0:	movw	r1, #0
     fb4:	movt	r1, #0
     fb8:	ldr	lr, [sp, #16]
     fbc:	str	lr, [sp]
     fc0:	bl	0 <coda_set_error>
     fc4:	mvn	r0, #0
     fc8:	str	r0, [fp, #-4]
     fcc:	b	10ec <read_bytes+0x25c>
     fd0:	ldr	r0, [fp, #16]
     fd4:	ldr	r1, [fp, #-8]
     fd8:	ldr	r1, [r1, #48]	; 0x30
     fdc:	ldr	r2, [fp, #-16]
     fe0:	add	r1, r1, r2
     fe4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     fe8:	bl	0 <memcpy>
     fec:	b	10e4 <read_bytes+0x254>
     ff0:	ldr	r0, [fp, #-8]
     ff4:	ldr	r0, [r0, #16]
     ff8:	cmp	r0, #0
     ffc:	beq	1010 <read_bytes+0x180>
    1000:	ldr	r0, [fp, #-8]
    1004:	ldr	r0, [r0, #16]
    1008:	cmp	r0, #1
    100c:	bne	1014 <read_bytes+0x184>
    1010:	b	1034 <read_bytes+0x1a4>
    1014:	movw	r0, #0
    1018:	movt	r0, #0
    101c:	movw	r1, #0
    1020:	movt	r1, #0
    1024:	movw	r2, #83	; 0x53
    1028:	movw	r3, #0
    102c:	movt	r3, #0
    1030:	bl	0 <__assert_fail>
    1034:	ldr	r0, [fp, #-16]
    1038:	ldr	r1, [fp, #-12]
    103c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1040:	ldr	r3, [fp, #-20]	; 0xffffffec
    1044:	adds	r0, r0, r2
    1048:	adc	r1, r1, r3
    104c:	ldr	r2, [fp, #-8]
    1050:	ldr	r3, [r2, #8]
    1054:	ldr	r2, [r2, #12]
    1058:	subs	r0, r3, r0
    105c:	sbcs	r1, r2, r1
    1060:	str	r0, [sp, #12]
    1064:	str	r1, [sp, #8]
    1068:	bcs	108c <read_bytes+0x1fc>
    106c:	b	1070 <read_bytes+0x1e0>
    1070:	mvn	r0, #300	; 0x12c
    1074:	movw	r1, #0
    1078:	movt	r1, #0
    107c:	bl	0 <coda_set_error>
    1080:	mvn	r0, #0
    1084:	str	r0, [fp, #-4]
    1088:	b	10ec <read_bytes+0x25c>
    108c:	ldr	r0, [fp, #-8]
    1090:	ldr	r0, [r0, #56]	; 0x38
    1094:	ldr	r1, [fp, #16]
    1098:	ldr	r2, [fp, #-24]	; 0xffffffe8
    109c:	ldr	r3, [fp, #-16]
    10a0:	bl	0 <pread>
    10a4:	cmp	r0, #0
    10a8:	bge	10e0 <read_bytes+0x250>
    10ac:	bl	0 <__errno_location>
    10b0:	ldr	r0, [r0]
    10b4:	bl	0 <strerror>
    10b8:	mvn	lr, #21
    10bc:	str	r0, [sp, #4]
    10c0:	mov	r0, lr
    10c4:	movw	r1, #0
    10c8:	movt	r1, #0
    10cc:	ldr	r2, [sp, #4]
    10d0:	bl	0 <coda_set_error>
    10d4:	mvn	r0, #0
    10d8:	str	r0, [fp, #-4]
    10dc:	b	10ec <read_bytes+0x25c>
    10e0:	b	10e4 <read_bytes+0x254>
    10e4:	movw	r0, #0
    10e8:	str	r0, [fp, #-4]
    10ec:	ldr	r0, [fp, #-4]
    10f0:	mov	sp, fp
    10f4:	pop	{fp, pc}

000010f8 <swap4>:
    10f8:	sub	sp, sp, #8
    10fc:	str	r0, [sp, #4]
    1100:	ldr	r0, [sp, #4]
    1104:	str	r0, [sp]
    1108:	ldr	r0, [sp]
    110c:	ldrb	r0, [r0]
    1110:	ldr	r1, [sp]
    1114:	ldrb	r1, [r1, #3]
    1118:	eor	r0, r0, r1
    111c:	ldr	r1, [sp]
    1120:	strb	r0, [r1]
    1124:	ldr	r0, [sp]
    1128:	ldrb	r0, [r0]
    112c:	ldr	r1, [sp]
    1130:	ldrb	r1, [r1, #3]
    1134:	eor	r0, r0, r1
    1138:	ldr	r1, [sp]
    113c:	strb	r0, [r1, #3]
    1140:	ldr	r0, [sp]
    1144:	ldrb	r0, [r0]
    1148:	ldr	r1, [sp]
    114c:	ldrb	r1, [r1, #3]
    1150:	eor	r0, r0, r1
    1154:	ldr	r1, [sp]
    1158:	strb	r0, [r1]
    115c:	ldr	r0, [sp]
    1160:	ldrb	r0, [r0, #1]
    1164:	ldr	r1, [sp]
    1168:	ldrb	r1, [r1, #2]
    116c:	eor	r0, r0, r1
    1170:	ldr	r1, [sp]
    1174:	strb	r0, [r1, #1]
    1178:	ldr	r0, [sp]
    117c:	ldrb	r0, [r0, #1]
    1180:	ldr	r1, [sp]
    1184:	ldrb	r1, [r1, #2]
    1188:	eor	r0, r0, r1
    118c:	ldr	r1, [sp]
    1190:	strb	r0, [r1, #2]
    1194:	ldr	r0, [sp]
    1198:	ldrb	r0, [r0, #1]
    119c:	ldr	r1, [sp]
    11a0:	ldrb	r1, [r1, #2]
    11a4:	eor	r0, r0, r1
    11a8:	ldr	r1, [sp]
    11ac:	strb	r0, [r1, #1]
    11b0:	add	sp, sp, #8
    11b4:	bx	lr

000011b8 <coda_grib_cursor_read_float_array>:
    11b8:	push	{r4, r5, fp, lr}
    11bc:	add	fp, sp, #8
    11c0:	sub	sp, sp, #552	; 0x228
    11c4:	str	r0, [fp, #-16]
    11c8:	str	r1, [fp, #-20]	; 0xffffffec
    11cc:	ldr	r0, [fp, #-16]
    11d0:	add	r1, r0, #8
    11d4:	ldr	r0, [r0, #4]
    11d8:	sub	r0, r0, #1
    11dc:	add	r0, r1, r0, lsl #4
    11e0:	ldr	r0, [r0]
    11e4:	str	r0, [fp, #-24]	; 0xffffffe8
    11e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11ec:	ldr	r0, [r0, #8]
    11f0:	cmp	r0, #0
    11f4:	ble	12c0 <coda_grib_cursor_read_float_array+0x108>
    11f8:	ldr	r1, [fp, #-16]
    11fc:	add	r0, sp, #16
    1200:	mov	r2, #520	; 0x208
    1204:	str	r0, [sp, #8]
    1208:	bl	0 <memcpy>
    120c:	ldr	r1, [sp, #20]
    1210:	add	r1, r1, #1
    1214:	str	r1, [sp, #20]
    1218:	ldr	r1, [fp, #-24]	; 0xffffffe8
    121c:	ldr	r1, [r1, #12]
    1220:	ldr	r2, [sp, #8]
    1224:	add	lr, r2, #8
    1228:	ldr	r3, [sp, #20]
    122c:	add	r3, lr, r3, lsl #4
    1230:	str	r1, [r3, #-16]
    1234:	ldr	r1, [sp, #20]
    1238:	add	r1, lr, r1, lsl #4
    123c:	mvn	r3, #0
    1240:	str	r3, [r1, #-4]
    1244:	str	r3, [r1, #-8]
    1248:	movw	r1, #0
    124c:	str	r1, [sp, #12]
    1250:	str	r0, [sp, #4]
    1254:	ldr	r0, [sp, #12]
    1258:	ldr	r1, [fp, #-24]	; 0xffffffe8
    125c:	ldr	r1, [r1, #8]
    1260:	cmp	r0, r1
    1264:	bge	12bc <coda_grib_cursor_read_float_array+0x104>
    1268:	ldr	r0, [sp, #12]
    126c:	ldr	r1, [sp, #20]
    1270:	add	r2, sp, #16
    1274:	add	r1, r2, r1, lsl #4
    1278:	sub	r1, r1, #8
    127c:	str	r0, [r1, #4]
    1280:	ldr	r0, [fp, #-20]	; 0xffffffec
    1284:	ldr	r1, [sp, #12]
    1288:	add	r1, r0, r1, lsl #2
    128c:	add	r0, sp, #16
    1290:	bl	380 <coda_grib_cursor_read_float>
    1294:	cmp	r0, #0
    1298:	beq	12a8 <coda_grib_cursor_read_float_array+0xf0>
    129c:	mvn	r0, #0
    12a0:	str	r0, [fp, #-12]
    12a4:	b	12c8 <coda_grib_cursor_read_float_array+0x110>
    12a8:	b	12ac <coda_grib_cursor_read_float_array+0xf4>
    12ac:	ldr	r0, [sp, #12]
    12b0:	add	r0, r0, #1
    12b4:	str	r0, [sp, #12]
    12b8:	b	1254 <coda_grib_cursor_read_float_array+0x9c>
    12bc:	b	12c0 <coda_grib_cursor_read_float_array+0x108>
    12c0:	movw	r0, #0
    12c4:	str	r0, [fp, #-12]
    12c8:	ldr	r0, [fp, #-12]
    12cc:	sub	sp, fp, #8
    12d0:	pop	{r4, r5, fp, pc}

000012d4 <coda_grib_cursor_read_float_partial_array>:
    12d4:	push	{r4, r5, fp, lr}
    12d8:	add	fp, sp, #8
    12dc:	sub	sp, sp, #560	; 0x230
    12e0:	str	r0, [fp, #-16]
    12e4:	str	r1, [fp, #-20]	; 0xffffffec
    12e8:	str	r2, [fp, #-24]	; 0xffffffe8
    12ec:	str	r3, [fp, #-28]	; 0xffffffe4
    12f0:	ldr	r0, [fp, #-16]
    12f4:	add	r1, r0, #8
    12f8:	ldr	r0, [r0, #4]
    12fc:	sub	r0, r0, #1
    1300:	add	r0, r1, r0, lsl #4
    1304:	ldr	r0, [r0]
    1308:	str	r0, [fp, #-32]	; 0xffffffe0
    130c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1310:	ldr	r0, [r0, #8]
    1314:	cmp	r0, #0
    1318:	ble	13e8 <coda_grib_cursor_read_float_partial_array+0x114>
    131c:	ldr	r1, [fp, #-16]
    1320:	add	r0, sp, #16
    1324:	mov	r2, #520	; 0x208
    1328:	str	r0, [sp, #8]
    132c:	bl	0 <memcpy>
    1330:	ldr	r1, [sp, #20]
    1334:	add	r1, r1, #1
    1338:	str	r1, [sp, #20]
    133c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1340:	ldr	r1, [r1, #12]
    1344:	ldr	r2, [sp, #8]
    1348:	add	lr, r2, #8
    134c:	ldr	r3, [sp, #20]
    1350:	add	r3, lr, r3, lsl #4
    1354:	str	r1, [r3, #-16]
    1358:	ldr	r1, [sp, #20]
    135c:	add	r1, lr, r1, lsl #4
    1360:	mvn	r3, #0
    1364:	str	r3, [r1, #-4]
    1368:	str	r3, [r1, #-8]
    136c:	movw	r1, #0
    1370:	str	r1, [sp, #12]
    1374:	str	r0, [sp, #4]
    1378:	ldr	r0, [sp, #12]
    137c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1380:	cmp	r0, r1
    1384:	bge	13e4 <coda_grib_cursor_read_float_partial_array+0x110>
    1388:	ldr	r0, [fp, #-20]	; 0xffffffec
    138c:	ldr	r1, [sp, #12]
    1390:	add	r0, r0, r1
    1394:	ldr	r1, [sp, #20]
    1398:	add	r2, sp, #16
    139c:	add	r1, r2, r1, lsl #4
    13a0:	sub	r1, r1, #8
    13a4:	str	r0, [r1, #4]
    13a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    13ac:	ldr	r1, [sp, #12]
    13b0:	add	r1, r0, r1, lsl #2
    13b4:	add	r0, sp, #16
    13b8:	bl	380 <coda_grib_cursor_read_float>
    13bc:	cmp	r0, #0
    13c0:	beq	13d0 <coda_grib_cursor_read_float_partial_array+0xfc>
    13c4:	mvn	r0, #0
    13c8:	str	r0, [fp, #-12]
    13cc:	b	13f0 <coda_grib_cursor_read_float_partial_array+0x11c>
    13d0:	b	13d4 <coda_grib_cursor_read_float_partial_array+0x100>
    13d4:	ldr	r0, [sp, #12]
    13d8:	add	r0, r0, #1
    13dc:	str	r0, [sp, #12]
    13e0:	b	1378 <coda_grib_cursor_read_float_partial_array+0xa4>
    13e4:	b	13e8 <coda_grib_cursor_read_float_partial_array+0x114>
    13e8:	movw	r0, #0
    13ec:	str	r0, [fp, #-12]
    13f0:	ldr	r0, [fp, #-12]
    13f4:	sub	sp, fp, #8
    13f8:	pop	{r4, r5, fp, pc}
