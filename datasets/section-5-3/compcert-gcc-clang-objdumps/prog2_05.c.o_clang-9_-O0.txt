
../compcert-repos/prog2/CMakeFiles/1.5.dir/Aula01_Ficheiros_e_Formatos_de_dados/05.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #56	; 0x38
   c:	movw	r0, #0
  10:	str	r0, [fp, #-4]
  14:	str	r0, [fp, #-8]
  18:	movw	r1, #1
  1c:	str	r1, [fp, #-12]
  20:	str	r0, [fp, #-16]
  24:	str	r0, [fp, #-20]	; 0xffffffec
  28:	str	r0, [fp, #-24]	; 0xffffffe8
  2c:	movw	r0, #0
  30:	movt	r0, #0
  34:	movw	r1, #0
  38:	movt	r1, #0
  3c:	bl	0 <fopen>
  40:	str	r0, [sp, #24]
  44:	ldr	r0, [sp, #24]
  48:	bl	0 <fgetc>
  4c:	strb	r0, [fp, #-25]	; 0xffffffe7
  50:	and	r0, r0, #255	; 0xff
  54:	mvn	r1, #0
  58:	cmp	r1, r0
  5c:	beq	1b8 <main+0x1b8>
  60:	ldr	r0, [fp, #-16]
  64:	add	r0, r0, #1
  68:	str	r0, [fp, #-16]
  6c:	ldrb	r0, [fp, #-25]	; 0xffffffe7
  70:	cmp	r0, #10
  74:	bne	88 <main+0x88>
  78:	ldr	r0, [fp, #-12]
  7c:	add	r0, r0, #1
  80:	str	r0, [fp, #-12]
  84:	b	1b4 <main+0x1b4>
  88:	ldrb	r0, [fp, #-25]	; 0xffffffe7
  8c:	cmp	r0, #115	; 0x73
  90:	bne	bc <main+0xbc>
  94:	ldr	r1, [sp, #24]
  98:	movw	r0, #0
  9c:	movt	r0, #0
  a0:	bl	26c <IsIOFunction>
  a4:	cmp	r0, #0
  a8:	beq	b8 <main+0xb8>
  ac:	ldr	r0, [fp, #-20]	; 0xffffffec
  b0:	add	r0, r0, #1
  b4:	str	r0, [fp, #-20]	; 0xffffffec
  b8:	b	1b0 <main+0x1b0>
  bc:	ldrb	r0, [fp, #-25]	; 0xffffffe7
  c0:	cmp	r0, #112	; 0x70
  c4:	bne	f0 <main+0xf0>
  c8:	ldr	r1, [sp, #24]
  cc:	movw	r0, #0
  d0:	movt	r0, #0
  d4:	bl	26c <IsIOFunction>
  d8:	cmp	r0, #0
  dc:	beq	ec <main+0xec>
  e0:	ldr	r0, [fp, #-20]	; 0xffffffec
  e4:	add	r0, r0, #1
  e8:	str	r0, [fp, #-20]	; 0xffffffec
  ec:	b	1ac <main+0x1ac>
  f0:	ldrb	r0, [fp, #-25]	; 0xffffffe7
  f4:	cmp	r0, #47	; 0x2f
  f8:	bne	144 <main+0x144>
  fc:	ldr	r0, [sp, #24]
 100:	bl	0 <fgetc>
 104:	cmp	r0, #42	; 0x2a
 108:	bne	130 <main+0x130>
 10c:	ldr	r0, [fp, #-24]	; 0xffffffe8
 110:	cmp	r0, #0
 114:	bne	130 <main+0x130>
 118:	movw	r0, #1
 11c:	str	r0, [fp, #-24]	; 0xffffffe8
 120:	ldr	r0, [fp, #-16]
 124:	add	r0, r0, #1
 128:	str	r0, [fp, #-16]
 12c:	b	140 <main+0x140>
 130:	ldr	r0, [sp, #24]
 134:	mvn	r1, #0
 138:	movw	r2, #1
 13c:	bl	0 <fseek>
 140:	b	1a8 <main+0x1a8>
 144:	ldrb	r0, [fp, #-25]	; 0xffffffe7
 148:	cmp	r0, #42	; 0x2a
 14c:	bne	1a4 <main+0x1a4>
 150:	ldr	r0, [sp, #24]
 154:	bl	0 <fgetc>
 158:	cmp	r0, #47	; 0x2f
 15c:	bne	190 <main+0x190>
 160:	ldr	r0, [fp, #-24]	; 0xffffffe8
 164:	cmp	r0, #0
 168:	beq	190 <main+0x190>
 16c:	ldr	r0, [fp, #-16]
 170:	add	r0, r0, #1
 174:	str	r0, [fp, #-16]
 178:	ldr	r0, [fp, #-8]
 17c:	add	r0, r0, #1
 180:	str	r0, [fp, #-8]
 184:	movw	r0, #0
 188:	str	r0, [fp, #-24]	; 0xffffffe8
 18c:	b	1a0 <main+0x1a0>
 190:	ldr	r0, [sp, #24]
 194:	mvn	r1, #0
 198:	movw	r2, #1
 19c:	bl	0 <fseek>
 1a0:	b	1a4 <main+0x1a4>
 1a4:	b	1a8 <main+0x1a8>
 1a8:	b	1ac <main+0x1ac>
 1ac:	b	1b0 <main+0x1b0>
 1b0:	b	1b4 <main+0x1b4>
 1b4:	b	44 <main+0x44>
 1b8:	ldr	r1, [fp, #-12]
 1bc:	movw	r0, #0
 1c0:	movt	r0, #0
 1c4:	bl	0 <printf>
 1c8:	ldr	r1, [fp, #-16]
 1cc:	vmov	s0, r1
 1d0:	vcvt.f32.s32	s0, s0
 1d4:	ldr	r1, [fp, #-12]
 1d8:	vmov	s2, r1
 1dc:	vcvt.f32.s32	s2, s2
 1e0:	vdiv.f32	s0, s0, s2
 1e4:	vcvt.f64.f32	d16, s0
 1e8:	movw	r1, #0
 1ec:	movt	r1, #0
 1f0:	str	r0, [sp, #20]
 1f4:	mov	r0, r1
 1f8:	vmov	r2, r3, d16
 1fc:	bl	0 <printf>
 200:	ldr	r1, [fp, #-16]
 204:	movw	r2, #0
 208:	movt	r2, #0
 20c:	str	r0, [sp, #16]
 210:	mov	r0, r2
 214:	bl	0 <printf>
 218:	ldr	r1, [fp, #-20]	; 0xffffffec
 21c:	movw	r2, #0
 220:	movt	r2, #0
 224:	str	r0, [sp, #12]
 228:	mov	r0, r2
 22c:	bl	0 <printf>
 230:	ldr	r1, [fp, #-8]
 234:	movw	r2, #0
 238:	movt	r2, #0
 23c:	str	r0, [sp, #8]
 240:	mov	r0, r2
 244:	bl	0 <printf>
 248:	ldr	r1, [sp, #24]
 24c:	str	r0, [sp, #4]
 250:	mov	r0, r1
 254:	bl	0 <fclose>
 258:	ldr	r1, [fp, #-4]
 25c:	str	r0, [sp]
 260:	mov	r0, r1
 264:	mov	sp, fp
 268:	pop	{fp, pc}

0000026c <IsIOFunction>:
 26c:	push	{fp, lr}
 270:	mov	fp, sp
 274:	sub	sp, sp, #40	; 0x28
 278:	str	r0, [fp, #-8]
 27c:	str	r1, [fp, #-12]
 280:	ldr	r0, [fp, #-12]
 284:	mvn	r1, #0
 288:	movw	r2, #1
 28c:	bl	0 <fseek>
 290:	ldr	r1, [fp, #-8]
 294:	str	r0, [sp, #8]
 298:	mov	r0, r1
 29c:	bl	0 <strlen>
 2a0:	str	r0, [fp, #-16]
 2a4:	add	r0, sp, #13
 2a8:	movw	r1, #0
 2ac:	and	r1, r1, #255	; 0xff
 2b0:	movw	r2, #7
 2b4:	bl	0 <memset>
 2b8:	movw	r0, #0
 2bc:	str	r0, [sp, #20]
 2c0:	ldr	r0, [sp, #20]
 2c4:	ldr	r1, [fp, #-16]
 2c8:	cmp	r0, r1
 2cc:	bge	2f8 <IsIOFunction+0x8c>
 2d0:	ldr	r0, [fp, #-12]
 2d4:	bl	0 <fgetc>
 2d8:	ldr	r1, [sp, #20]
 2dc:	add	r2, sp, #13
 2e0:	add	r1, r2, r1
 2e4:	strb	r0, [r1]
 2e8:	ldr	r0, [sp, #20]
 2ec:	add	r0, r0, #1
 2f0:	str	r0, [sp, #20]
 2f4:	b	2c0 <IsIOFunction+0x54>
 2f8:	ldr	r0, [sp, #20]
 2fc:	add	r1, sp, #13
 300:	add	r0, r1, r0
 304:	movw	r1, #0
 308:	strb	r1, [r0]
 30c:	ldr	r0, [fp, #-12]
 310:	ldr	r1, [fp, #-16]
 314:	movw	r2, #0
 318:	sub	r1, r2, r1
 31c:	add	r1, r1, #1
 320:	movw	r2, #1
 324:	bl	0 <fseek>
 328:	add	r1, sp, #13
 32c:	ldr	r2, [fp, #-8]
 330:	str	r0, [sp, #4]
 334:	mov	r0, r2
 338:	bl	0 <strcmp>
 33c:	cmp	r0, #0
 340:	bne	350 <IsIOFunction+0xe4>
 344:	movw	r0, #1
 348:	str	r0, [fp, #-4]
 34c:	b	358 <IsIOFunction+0xec>
 350:	movw	r0, #0
 354:	str	r0, [fp, #-4]
 358:	ldr	r0, [fp, #-4]
 35c:	mov	sp, fp
 360:	pop	{fp, pc}
