
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_type_delete>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	cmp	r0, #0
       c:	beq	118 <coda_mem_type_delete+0x118>
      10:	mov	r4, r0
      14:	ldr	r0, [r0]
      18:	cmp	r0, #100	; 0x64
      1c:	bne	130 <coda_mem_type_delete+0x130>
      20:	ldr	r0, [r4, #8]
      24:	cmp	r0, #3
      28:	beq	dc <coda_mem_type_delete+0xdc>
      2c:	cmp	r0, #1
      30:	beq	88 <coda_mem_type_delete+0x88>
      34:	cmp	r0, #0
      38:	bne	ec <coda_mem_type_delete+0xec>
      3c:	ldr	r0, [r4, #20]
      40:	cmp	r0, #0
      44:	beq	ec <coda_mem_type_delete+0xec>
      48:	ldr	r2, [r4, #16]
      4c:	cmp	r2, #1
      50:	blt	d4 <coda_mem_type_delete+0xd4>
      54:	mov	r5, #0
      58:	b	68 <coda_mem_type_delete+0x68>
      5c:	add	r5, r5, #1
      60:	cmp	r5, r2
      64:	bge	d4 <coda_mem_type_delete+0xd4>
      68:	ldr	r1, [r0, r5, lsl #2]
      6c:	cmp	r1, #0
      70:	beq	5c <coda_mem_type_delete+0x5c>
      74:	mov	r0, r1
      78:	bl	0 <coda_dynamic_type_delete>
      7c:	ldr	r2, [r4, #16]
      80:	ldr	r0, [r4, #20]
      84:	b	5c <coda_mem_type_delete+0x5c>
      88:	ldr	r0, [r4, #20]
      8c:	cmp	r0, #0
      90:	beq	ec <coda_mem_type_delete+0xec>
      94:	ldr	r2, [r4, #16]
      98:	cmp	r2, #1
      9c:	blt	d4 <coda_mem_type_delete+0xd4>
      a0:	mov	r5, #0
      a4:	b	b4 <coda_mem_type_delete+0xb4>
      a8:	add	r5, r5, #1
      ac:	cmp	r5, r2
      b0:	bge	d4 <coda_mem_type_delete+0xd4>
      b4:	ldr	r1, [r0, r5, lsl #2]
      b8:	cmp	r1, #0
      bc:	beq	a8 <coda_mem_type_delete+0xa8>
      c0:	mov	r0, r1
      c4:	bl	0 <coda_dynamic_type_delete>
      c8:	ldr	r2, [r4, #16]
      cc:	ldr	r0, [r4, #20]
      d0:	b	a8 <coda_mem_type_delete+0xa8>
      d4:	bl	0 <free>
      d8:	b	ec <coda_mem_type_delete+0xec>
      dc:	ldr	r0, [r4, #16]
      e0:	cmp	r0, #0
      e4:	beq	ec <coda_mem_type_delete+0xec>
      e8:	bl	0 <coda_dynamic_type_delete>
      ec:	ldr	r0, [r4, #12]
      f0:	cmp	r0, #0
      f4:	beq	fc <coda_mem_type_delete+0xfc>
      f8:	bl	0 <coda_dynamic_type_delete>
      fc:	ldr	r0, [r4, #4]
     100:	cmp	r0, #0
     104:	beq	10c <coda_mem_type_delete+0x10c>
     108:	bl	0 <coda_type_release>
     10c:	mov	r0, r4
     110:	pop	{r4, r5, fp, lr}
     114:	b	0 <free>
     118:	movw	r0, #0
     11c:	movw	r1, #0
     120:	movw	r3, #0
     124:	mov	r2, #42	; 0x2a
     128:	movt	r0, #0
     12c:	b	144 <coda_mem_type_delete+0x144>
     130:	movw	r0, #0
     134:	movw	r1, #0
     138:	movw	r3, #0
     13c:	mov	r2, #43	; 0x2b
     140:	movt	r0, #0
     144:	movt	r1, #0
     148:	movt	r3, #0
     14c:	bl	0 <__assert_fail>

00000150 <coda_mem_type_update>:
     150:	push	{r4, r5, r6, r7, fp, lr}
     154:	add	fp, sp, #16
     158:	sub	sp, sp, #8
     15c:	ldr	r4, [r0]
     160:	mov	r6, r1
     164:	mov	r5, r0
     168:	mvn	r7, #0
     16c:	ldr	r0, [r4]
     170:	cmp	r0, #2
     174:	bcc	1f8 <coda_mem_type_update+0xa8>
     178:	cmp	r0, #100	; 0x64
     17c:	bne	4a0 <coda_mem_type_update+0x350>
     180:	ldr	r0, [r4, #4]
     184:	cmp	r0, r6
     188:	beq	2ac <coda_mem_type_update+0x15c>
     18c:	ldr	r2, [r6, #8]
     190:	ldr	r1, [r0, #8]
     194:	cmp	r2, #1
     198:	bne	21c <coda_mem_type_update+0xcc>
     19c:	cmp	r1, #1
     1a0:	beq	228 <coda_mem_type_update+0xd8>
     1a4:	ldr	r0, [r6]
     1a8:	cmp	r0, #2
     1ac:	bne	4b8 <coda_mem_type_update+0x368>
     1b0:	mov	r0, r6
     1b4:	mov	r1, #0
     1b8:	bl	538 <coda_mem_array_new>
     1bc:	cmp	r0, #0
     1c0:	beq	204 <coda_mem_type_update+0xb4>
     1c4:	ldr	r1, [r6, #40]	; 0x28
     1c8:	mov	r4, r0
     1cc:	mov	r0, r5
     1d0:	bl	150 <coda_mem_type_update>
     1d4:	cmp	r0, #0
     1d8:	bne	210 <coda_mem_type_update+0xc0>
     1dc:	ldr	r1, [r5]
     1e0:	mov	r0, r4
     1e4:	bl	70c <coda_mem_array_add_element>
     1e8:	cmp	r0, #0
     1ec:	bne	210 <coda_mem_type_update+0xc0>
     1f0:	str	r4, [r5]
     1f4:	b	16c <coda_mem_type_update+0x1c>
     1f8:	mov	r7, #0
     1fc:	cmp	r4, r6
     200:	bne	4d0 <coda_mem_type_update+0x380>
     204:	mov	r0, r7
     208:	sub	sp, fp, #16
     20c:	pop	{r4, r5, r6, r7, fp, pc}
     210:	mov	r0, r4
     214:	bl	0 <coda_dynamic_type_delete>
     218:	b	204 <coda_mem_type_update+0xb4>
     21c:	cmp	r2, #4
     220:	cmpeq	r1, #0
     224:	beq	248 <coda_mem_type_update+0xf8>
     228:	movw	r0, #0
     22c:	movw	r1, #0
     230:	movw	r3, #0
     234:	mov	r2, #153	; 0x99
     238:	movt	r0, #0
     23c:	movt	r1, #0
     240:	movt	r3, #0
     244:	bl	0 <__assert_fail>
     248:	ldr	r1, [r0]
     24c:	cmp	r1, #2
     250:	bne	4e8 <coda_mem_type_update+0x398>
     254:	ldr	r0, [r0, #48]	; 0x30
     258:	cmp	r0, #0
     25c:	bne	500 <coda_mem_type_update+0x3b0>
     260:	ldr	r0, [r6, #12]
     264:	cmp	r0, #11
     268:	bne	518 <coda_mem_type_update+0x3c8>
     26c:	mov	r7, #0
     270:	mov	r0, r6
     274:	mov	r1, #0
     278:	mov	r2, #0
     27c:	mov	r3, #0
     280:	str	r7, [sp]
     284:	bl	1394 <coda_mem_data_new>
     288:	mov	r4, r0
     28c:	ldr	r0, [r5]
     290:	ldr	r0, [r0, #12]
     294:	str	r0, [r4, #12]
     298:	ldr	r0, [r5]
     29c:	str	r7, [r0, #12]
     2a0:	ldr	r0, [r5]
     2a4:	bl	0 <coda_dynamic_type_delete>
     2a8:	str	r4, [r5]
     2ac:	ldr	r0, [r4, #8]
     2b0:	cmp	r0, #0
     2b4:	beq	330 <coda_mem_type_update+0x1e0>
     2b8:	cmp	r0, #3
     2bc:	beq	310 <coda_mem_type_update+0x1c0>
     2c0:	cmp	r0, #1
     2c4:	bne	408 <coda_mem_type_update+0x2b8>
     2c8:	ldr	r0, [r4, #16]
     2cc:	cmp	r0, #1
     2d0:	blt	408 <coda_mem_type_update+0x2b8>
     2d4:	mov	r5, #0
     2d8:	mov	r6, #0
     2dc:	ldr	r1, [r4, #4]
     2e0:	ldr	r0, [r4, #20]
     2e4:	ldr	r1, [r1, #40]	; 0x28
     2e8:	add	r0, r0, r5
     2ec:	bl	150 <coda_mem_type_update>
     2f0:	cmp	r0, #0
     2f4:	bne	45c <coda_mem_type_update+0x30c>
     2f8:	ldr	r0, [r4, #16]
     2fc:	add	r6, r6, #1
     300:	add	r5, r5, #4
     304:	cmp	r6, r0
     308:	blt	2dc <coda_mem_type_update+0x18c>
     30c:	b	408 <coda_mem_type_update+0x2b8>
     310:	ldr	r0, [r4, #4]
     314:	ldr	r1, [r0, #44]	; 0x2c
     318:	add	r0, r4, #16
     31c:	bl	150 <coda_mem_type_update>
     320:	mvn	r7, #0
     324:	cmp	r0, #0
     328:	bne	204 <coda_mem_type_update+0xb4>
     32c:	b	408 <coda_mem_type_update+0x2b8>
     330:	ldr	r1, [r4, #4]
     334:	ldr	r0, [r4, #16]
     338:	ldr	r2, [r1, #48]	; 0x30
     33c:	cmp	r0, r2
     340:	bge	3a0 <coda_mem_type_update+0x250>
     344:	ldr	r0, [r4, #20]
     348:	lsl	r1, r2, #2
     34c:	bl	0 <realloc>
     350:	cmp	r0, #0
     354:	beq	46c <coda_mem_type_update+0x31c>
     358:	str	r0, [r4, #20]
     35c:	ldr	r1, [r4, #4]
     360:	ldr	r7, [r4, #16]
     364:	ldr	r2, [r1, #48]	; 0x30
     368:	cmp	r7, r2
     36c:	bge	39c <coda_mem_type_update+0x24c>
     370:	mov	r3, #0
     374:	str	r3, [r0, r7, lsl #2]
     378:	add	r0, r7, #1
     37c:	ldr	r1, [r4, #4]
     380:	ldr	r2, [r1, #48]	; 0x30
     384:	cmp	r0, r2
     388:	bge	39c <coda_mem_type_update+0x24c>
     38c:	ldr	r1, [r4, #20]
     390:	str	r3, [r1, r0, lsl #2]
     394:	add	r0, r0, #1
     398:	b	37c <coda_mem_type_update+0x22c>
     39c:	str	r2, [r4, #16]
     3a0:	cmp	r2, #1
     3a4:	blt	408 <coda_mem_type_update+0x2b8>
     3a8:	mov	r5, #0
     3ac:	mov	r6, #1
     3b0:	mov	r7, #0
     3b4:	b	3d8 <coda_mem_type_update+0x288>
     3b8:	ldrb	r0, [r2, #16]
     3bc:	cmp	r0, #0
     3c0:	strbeq	r6, [r2, #16]
     3c4:	ldr	r0, [r1, #48]	; 0x30
     3c8:	add	r7, r7, #1
     3cc:	add	r5, r5, #4
     3d0:	cmp	r7, r0
     3d4:	bge	408 <coda_mem_type_update+0x2b8>
     3d8:	ldr	r0, [r1, #52]	; 0x34
     3dc:	ldr	r2, [r0, r7, lsl #2]
     3e0:	ldr	r0, [r4, #20]
     3e4:	ldr	r3, [r0, r5]!
     3e8:	cmp	r3, #0
     3ec:	beq	3b8 <coda_mem_type_update+0x268>
     3f0:	ldr	r1, [r2, #8]
     3f4:	bl	150 <coda_mem_type_update>
     3f8:	cmp	r0, #0
     3fc:	bne	45c <coda_mem_type_update+0x30c>
     400:	ldr	r1, [r4, #4]
     404:	b	3c4 <coda_mem_type_update+0x274>
     408:	mov	r5, r4
     40c:	ldr	r0, [r5, #12]!
     410:	cmp	r0, #0
     414:	beq	438 <coda_mem_type_update+0x2e8>
     418:	ldr	r0, [r4, #4]
     41c:	ldr	r1, [r0, #36]	; 0x24
     420:	mov	r0, r5
     424:	bl	150 <coda_mem_type_update>
     428:	cmp	r0, #0
     42c:	mvn	r7, #0
     430:	moveq	r7, #0
     434:	b	204 <coda_mem_type_update+0xb4>
     438:	ldr	r0, [r4, #4]
     43c:	ldr	r0, [r0, #36]	; 0x24
     440:	cmp	r0, #0
     444:	beq	464 <coda_mem_type_update+0x314>
     448:	mov	r1, #0
     44c:	bl	914 <coda_mem_record_new>
     450:	cmp	r0, #0
     454:	str	r0, [r5]
     458:	bne	418 <coda_mem_type_update+0x2c8>
     45c:	mvn	r7, #0
     460:	b	204 <coda_mem_type_update+0xb4>
     464:	mov	r7, #0
     468:	b	204 <coda_mem_type_update+0xb4>
     46c:	ldr	r0, [r4, #4]
     470:	mov	r1, #177	; 0xb1
     474:	movw	r3, #0
     478:	mvn	r7, #0
     47c:	movt	r3, #0
     480:	ldr	r0, [r0, #48]	; 0x30
     484:	str	r1, [sp]
     488:	movw	r1, #0
     48c:	movt	r1, #0
     490:	lsl	r2, r0, #2
     494:	mvn	r0, #0
     498:	bl	0 <coda_set_error>
     49c:	b	204 <coda_mem_type_update+0xb4>
     4a0:	movw	r0, #0
     4a4:	movw	r1, #0
     4a8:	movw	r3, #0
     4ac:	mov	r2, #108	; 0x6c
     4b0:	movt	r0, #0
     4b4:	b	23c <coda_mem_type_update+0xec>
     4b8:	movw	r0, #0
     4bc:	movw	r1, #0
     4c0:	movw	r3, #0
     4c4:	mov	r2, #114	; 0x72
     4c8:	movt	r0, #0
     4cc:	b	23c <coda_mem_type_update+0xec>
     4d0:	movw	r0, #0
     4d4:	movw	r1, #0
     4d8:	movw	r3, #0
     4dc:	mov	r2, #104	; 0x68
     4e0:	movt	r0, #0
     4e4:	b	23c <coda_mem_type_update+0xec>
     4e8:	movw	r0, #0
     4ec:	movw	r1, #0
     4f0:	movw	r3, #0
     4f4:	mov	r2, #141	; 0x8d
     4f8:	movt	r0, #0
     4fc:	b	23c <coda_mem_type_update+0xec>
     500:	movw	r0, #0
     504:	movw	r1, #0
     508:	movw	r3, #0
     50c:	mov	r2, #142	; 0x8e
     510:	movt	r0, #0
     514:	b	23c <coda_mem_type_update+0xec>
     518:	movw	r0, #0
     51c:	movw	r1, #0
     520:	movw	r3, #0
     524:	movw	r2, #935	; 0x3a7
     528:	movt	r0, #0
     52c:	movt	r1, #0
     530:	movt	r3, #0
     534:	bl	0 <__assert_fail>

00000538 <coda_mem_array_new>:
     538:	push	{r4, r5, r6, sl, fp, lr}
     53c:	add	fp, sp, #16
     540:	sub	sp, sp, #8
     544:	cmp	r0, #0
     548:	beq	664 <coda_mem_array_new+0x12c>
     54c:	mov	r5, r0
     550:	mov	r0, #24
     554:	mov	r6, r1
     558:	bl	0 <malloc>
     55c:	cmp	r0, #0
     560:	beq	680 <coda_mem_array_new+0x148>
     564:	ldr	r1, [r5, #4]
     568:	mov	r4, r0
     56c:	cmp	r6, #0
     570:	mov	r0, #100	; 0x64
     574:	mov	r2, #1
     578:	add	r1, r1, #1
     57c:	str	r1, [r5, #4]
     580:	mov	r1, #0
     584:	stm	r4, {r0, r5}
     588:	str	r2, [r4, #8]
     58c:	str	r6, [r4, #12]
     590:	str	r1, [r4, #16]
     594:	str	r1, [r4, #20]
     598:	beq	6b4 <coda_mem_array_new+0x17c>
     59c:	ldr	r0, [r5, #44]	; 0x2c
     5a0:	cmp	r0, #1
     5a4:	blt	6a8 <coda_mem_array_new+0x170>
     5a8:	lsl	r0, r0, #2
     5ac:	bl	0 <malloc>
     5b0:	str	r0, [r4, #20]
     5b4:	cmp	r0, #0
     5b8:	ldr	r1, [r5, #44]	; 0x2c
     5bc:	beq	6dc <coda_mem_array_new+0x1a4>
     5c0:	cmp	r1, #1
     5c4:	str	r1, [r4, #16]
     5c8:	blt	6a8 <coda_mem_array_new+0x170>
     5cc:	mov	r2, #0
     5d0:	cmp	r1, #1
     5d4:	str	r2, [r0]
     5d8:	beq	6a8 <coda_mem_array_new+0x170>
     5dc:	sub	r2, r1, #1
     5e0:	sub	r3, r1, #2
     5e4:	mov	r1, #1
     5e8:	and	r0, r2, #3
     5ec:	cmp	r3, #3
     5f0:	bcc	640 <coda_mem_array_new+0x108>
     5f4:	sub	r1, r2, r0
     5f8:	mov	r3, #0
     5fc:	mov	r2, #0
     600:	ldr	r6, [r4, #20]
     604:	add	r6, r6, r2, lsl #2
     608:	str	r3, [r6, #4]
     60c:	ldr	r6, [r4, #20]
     610:	add	r6, r6, r2, lsl #2
     614:	str	r3, [r6, #8]
     618:	ldr	r6, [r4, #20]
     61c:	add	r6, r6, r2, lsl #2
     620:	str	r3, [r6, #12]
     624:	ldr	r6, [r4, #20]
     628:	add	r6, r6, r2, lsl #2
     62c:	add	r2, r2, #4
     630:	cmp	r1, r2
     634:	str	r3, [r6, #16]
     638:	bne	600 <coda_mem_array_new+0xc8>
     63c:	add	r1, r2, #1
     640:	cmp	r0, #0
     644:	beq	6a8 <coda_mem_array_new+0x170>
     648:	mov	r2, #0
     64c:	ldr	r3, [r4, #20]
     650:	subs	r0, r0, #1
     654:	str	r2, [r3, r1, lsl #2]
     658:	add	r1, r1, #1
     65c:	bne	64c <coda_mem_array_new+0x114>
     660:	b	6a8 <coda_mem_array_new+0x170>
     664:	movw	r1, #0
     668:	movw	r2, #0
     66c:	mvn	r0, #99	; 0x63
     670:	movw	r3, #583	; 0x247
     674:	movt	r1, #0
     678:	movt	r2, #0
     67c:	b	6a0 <coda_mem_array_new+0x168>
     680:	movw	r1, #0
     684:	movw	r3, #0
     688:	movw	r0, #590	; 0x24e
     68c:	mov	r2, #24
     690:	str	r0, [sp]
     694:	movt	r1, #0
     698:	movt	r3, #0
     69c:	mvn	r0, #0
     6a0:	bl	0 <coda_set_error>
     6a4:	mov	r4, #0
     6a8:	mov	r0, r4
     6ac:	sub	sp, fp, #16
     6b0:	pop	{r4, r5, r6, sl, fp, pc}
     6b4:	ldr	r0, [r5, #36]	; 0x24
     6b8:	cmp	r0, #0
     6bc:	beq	59c <coda_mem_array_new+0x64>
     6c0:	mov	r1, #0
     6c4:	bl	914 <coda_mem_record_new>
     6c8:	cmp	r0, #0
     6cc:	str	r0, [r4, #12]
     6d0:	beq	700 <coda_mem_array_new+0x1c8>
     6d4:	ldr	r5, [r4, #4]
     6d8:	b	59c <coda_mem_array_new+0x64>
     6dc:	movw	r3, #0
     6e0:	lsl	r2, r1, #2
     6e4:	movw	r1, #0
     6e8:	movw	r0, #617	; 0x269
     6ec:	movt	r1, #0
     6f0:	movt	r3, #0
     6f4:	str	r0, [sp]
     6f8:	mvn	r0, #0
     6fc:	bl	0 <coda_set_error>
     700:	mov	r0, r4
     704:	bl	0 <coda_mem_type_delete>
     708:	b	6a4 <coda_mem_array_new+0x16c>

0000070c <coda_mem_array_add_element>:
     70c:	push	{r4, r5, r6, sl, fp, lr}
     710:	add	fp, sp, #16
     714:	sub	sp, sp, #8
     718:	cmp	r0, #0
     71c:	beq	76c <coda_mem_array_add_element+0x60>
     720:	mov	r4, r1
     724:	cmp	r1, #0
     728:	beq	788 <coda_mem_array_add_element+0x7c>
     72c:	mov	r5, r0
     730:	ldr	r0, [r0, #4]
     734:	ldr	r1, [r4, #4]
     738:	ldr	r2, [r0, #40]	; 0x28
     73c:	cmp	r2, r1
     740:	beq	7a4 <coda_mem_array_add_element+0x98>
     744:	ldr	r2, [r5, #16]
     748:	movw	r0, #681	; 0x2a9
     74c:	movw	r1, #0
     750:	movw	r3, #0
     754:	str	r0, [sp]
     758:	movw	r0, #65136	; 0xfe70
     75c:	movt	r1, #0
     760:	movt	r3, #0
     764:	movt	r0, #65535	; 0xffff
     768:	b	814 <coda_mem_array_add_element+0x108>
     76c:	movw	r1, #0
     770:	movw	r2, #0
     774:	mvn	r0, #99	; 0x63
     778:	movw	r3, #670	; 0x29e
     77c:	movt	r1, #0
     780:	movt	r2, #0
     784:	b	814 <coda_mem_array_add_element+0x108>
     788:	movw	r1, #0
     78c:	movw	r2, #0
     790:	mvn	r0, #99	; 0x63
     794:	movw	r3, #675	; 0x2a3
     798:	movt	r1, #0
     79c:	movt	r2, #0
     7a0:	b	814 <coda_mem_array_add_element+0x108>
     7a4:	ldr	r0, [r0, #44]	; 0x2c
     7a8:	ldr	r3, [r5, #16]
     7ac:	cmp	r0, #1
     7b0:	blt	7e0 <coda_mem_array_add_element+0xd4>
     7b4:	cmp	r3, #1
     7b8:	blt	7f0 <coda_mem_array_add_element+0xe4>
     7bc:	ldr	r0, [r5, #20]
     7c0:	mov	r2, #0
     7c4:	ldr	r1, [r0, r2, lsl #2]
     7c8:	cmp	r1, #0
     7cc:	beq	828 <coda_mem_array_add_element+0x11c>
     7d0:	add	r2, r2, #1
     7d4:	cmp	r2, r3
     7d8:	blt	7c4 <coda_mem_array_add_element+0xb8>
     7dc:	b	7f4 <coda_mem_array_add_element+0xe8>
     7e0:	tst	r3, #15
     7e4:	beq	830 <coda_mem_array_add_element+0x124>
     7e8:	ldr	r0, [r5, #20]
     7ec:	b	850 <coda_mem_array_add_element+0x144>
     7f0:	mov	r2, #0
     7f4:	movw	r1, #0
     7f8:	mov	r0, #696	; 0x2b8
     7fc:	movt	r1, #0
     800:	str	r0, [sp, #4]
     804:	mvn	r0, #100	; 0x64
     808:	str	r1, [sp]
     80c:	movw	r1, #0
     810:	movt	r1, #0
     814:	bl	0 <coda_set_error>
     818:	mvn	r4, #0
     81c:	mov	r0, r4
     820:	sub	sp, fp, #16
     824:	pop	{r4, r5, r6, sl, fp, pc}
     828:	str	r4, [r0, r2, lsl #2]
     82c:	b	85c <coda_mem_array_add_element+0x150>
     830:	ldr	r0, [r5, #20]
     834:	mov	r6, #64	; 0x40
     838:	add	r1, r6, r3, lsl #2
     83c:	bl	0 <realloc>
     840:	cmp	r0, #0
     844:	beq	864 <coda_mem_array_add_element+0x158>
     848:	str	r0, [r5, #20]
     84c:	ldr	r3, [r5, #16]
     850:	add	r1, r3, #1
     854:	str	r1, [r5, #16]
     858:	str	r4, [r0, r3, lsl #2]
     85c:	mov	r4, #0
     860:	b	81c <coda_mem_array_add_element+0x110>
     864:	ldr	r0, [r5, #16]
     868:	movw	r1, #711	; 0x2c7
     86c:	movw	r3, #0
     870:	mvn	r4, #0
     874:	str	r1, [sp]
     878:	movw	r1, #0
     87c:	movt	r3, #0
     880:	movt	r1, #0
     884:	add	r2, r6, r0, lsl #2
     888:	mvn	r0, #0
     88c:	bl	0 <coda_set_error>
     890:	b	81c <coda_mem_array_add_element+0x110>

00000894 <coda_mem_string_new>:
     894:	push	{r4, r5, r6, r7, fp, lr}
     898:	add	fp, sp, #16
     89c:	sub	sp, sp, #8
     8a0:	mov	r7, r0
     8a4:	ldr	r0, [r0, #12]
     8a8:	cmp	r0, #11
     8ac:	bne	8f4 <coda_mem_string_new+0x60>
     8b0:	mov	r6, r3
     8b4:	mov	r4, r2
     8b8:	mov	r5, r1
     8bc:	cmp	r3, #0
     8c0:	beq	8d4 <coda_mem_string_new+0x40>
     8c4:	mov	r0, r6
     8c8:	bl	0 <strlen>
     8cc:	mov	r3, r0
     8d0:	b	8d8 <coda_mem_string_new+0x44>
     8d4:	mov	r3, #0
     8d8:	mov	r0, r7
     8dc:	mov	r1, r5
     8e0:	mov	r2, r4
     8e4:	str	r6, [sp]
     8e8:	bl	1394 <coda_mem_data_new>
     8ec:	sub	sp, fp, #16
     8f0:	pop	{r4, r5, r6, r7, fp, pc}
     8f4:	movw	r0, #0
     8f8:	movw	r1, #0
     8fc:	movw	r3, #0
     900:	movw	r2, #935	; 0x3a7
     904:	movt	r0, #0
     908:	movt	r1, #0
     90c:	movt	r3, #0
     910:	bl	0 <__assert_fail>

00000914 <coda_mem_record_new>:
     914:	push	{r4, r5, r6, sl, fp, lr}
     918:	add	fp, sp, #16
     91c:	sub	sp, sp, #8
     920:	cmp	r0, #0
     924:	beq	a60 <coda_mem_record_new+0x14c>
     928:	mov	r5, r0
     92c:	ldr	r0, [r0, #64]	; 0x40
     930:	mov	r6, r1
     934:	cmp	r0, #0
     938:	beq	95c <coda_mem_record_new+0x48>
     93c:	ldr	r0, [r5, #68]	; 0x44
     940:	cmp	r0, #0
     944:	beq	95c <coda_mem_record_new+0x48>
     948:	movw	r1, #0
     94c:	mvn	r0, #99	; 0x63
     950:	movt	r1, #0
     954:	bl	0 <coda_set_error>
     958:	b	aa0 <coda_mem_record_new+0x18c>
     95c:	mov	r0, #24
     960:	bl	0 <malloc>
     964:	cmp	r0, #0
     968:	beq	a7c <coda_mem_record_new+0x168>
     96c:	ldr	r1, [r5, #4]
     970:	mov	r4, r0
     974:	cmp	r6, #0
     978:	mov	r0, #100	; 0x64
     97c:	add	r1, r1, #1
     980:	str	r1, [r5, #4]
     984:	mov	r1, #0
     988:	stm	r4, {r0, r5}
     98c:	str	r1, [r4, #8]
     990:	str	r6, [r4, #12]
     994:	str	r1, [r4, #16]
     998:	str	r1, [r4, #20]
     99c:	beq	ab0 <coda_mem_record_new+0x19c>
     9a0:	ldr	r6, [r5, #48]	; 0x30
     9a4:	cmp	r6, #1
     9a8:	blt	aa4 <coda_mem_record_new+0x190>
     9ac:	lsl	r5, r6, #2
     9b0:	mov	r0, r5
     9b4:	bl	0 <malloc>
     9b8:	cmp	r0, #0
     9bc:	str	r0, [r4, #20]
     9c0:	beq	ad4 <coda_mem_record_new+0x1c0>
     9c4:	mov	r1, #0
     9c8:	cmp	r6, #1
     9cc:	str	r1, [r0]
     9d0:	beq	a58 <coda_mem_record_new+0x144>
     9d4:	sub	r2, r6, #1
     9d8:	sub	r3, r6, #2
     9dc:	mov	r1, #1
     9e0:	and	r0, r2, #3
     9e4:	cmp	r3, #3
     9e8:	bcc	a38 <coda_mem_record_new+0x124>
     9ec:	sub	r1, r2, r0
     9f0:	mov	r3, #0
     9f4:	mov	r2, #0
     9f8:	ldr	r5, [r4, #20]
     9fc:	add	r5, r5, r2, lsl #2
     a00:	str	r3, [r5, #4]
     a04:	ldr	r5, [r4, #20]
     a08:	add	r5, r5, r2, lsl #2
     a0c:	str	r3, [r5, #8]
     a10:	ldr	r5, [r4, #20]
     a14:	add	r5, r5, r2, lsl #2
     a18:	str	r3, [r5, #12]
     a1c:	ldr	r5, [r4, #20]
     a20:	add	r5, r5, r2, lsl #2
     a24:	add	r2, r2, #4
     a28:	cmp	r1, r2
     a2c:	str	r3, [r5, #16]
     a30:	bne	9f8 <coda_mem_record_new+0xe4>
     a34:	add	r1, r2, #1
     a38:	cmp	r0, #0
     a3c:	beq	a58 <coda_mem_record_new+0x144>
     a40:	mov	r2, #0
     a44:	ldr	r3, [r4, #20]
     a48:	subs	r0, r0, #1
     a4c:	str	r2, [r3, r1, lsl #2]
     a50:	add	r1, r1, #1
     a54:	bne	a44 <coda_mem_record_new+0x130>
     a58:	str	r6, [r4, #16]
     a5c:	b	aa4 <coda_mem_record_new+0x190>
     a60:	movw	r1, #0
     a64:	movw	r2, #0
     a68:	mvn	r0, #99	; 0x63
     a6c:	mov	r3, #428	; 0x1ac
     a70:	movt	r1, #0
     a74:	movt	r2, #0
     a78:	b	a9c <coda_mem_record_new+0x188>
     a7c:	movw	r1, #0
     a80:	movw	r3, #0
     a84:	movw	r0, #442	; 0x1ba
     a88:	mov	r2, #24
     a8c:	str	r0, [sp]
     a90:	movt	r1, #0
     a94:	movt	r3, #0
     a98:	mvn	r0, #0
     a9c:	bl	0 <coda_set_error>
     aa0:	mov	r4, #0
     aa4:	mov	r0, r4
     aa8:	sub	sp, fp, #16
     aac:	pop	{r4, r5, r6, sl, fp, pc}
     ab0:	ldr	r0, [r5, #36]	; 0x24
     ab4:	cmp	r0, #0
     ab8:	beq	9a0 <coda_mem_record_new+0x8c>
     abc:	mov	r1, #0
     ac0:	bl	914 <coda_mem_record_new>
     ac4:	cmp	r0, #0
     ac8:	str	r0, [r4, #12]
     acc:	bne	9a0 <coda_mem_record_new+0x8c>
     ad0:	b	af8 <coda_mem_record_new+0x1e4>
     ad4:	movw	r1, #0
     ad8:	movw	r3, #0
     adc:	movw	r0, #469	; 0x1d5
     ae0:	mov	r2, r5
     ae4:	movt	r1, #0
     ae8:	movt	r3, #0
     aec:	str	r0, [sp]
     af0:	mvn	r0, #0
     af4:	bl	0 <coda_set_error>
     af8:	mov	r0, r4
     afc:	bl	0 <coda_mem_type_delete>
     b00:	b	aa0 <coda_mem_record_new+0x18c>

00000b04 <coda_mem_type_add_attribute>:
     b04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     b08:	add	fp, sp, #24
     b0c:	sub	sp, sp, #8
     b10:	cmp	r0, #0
     b14:	beq	b84 <coda_mem_type_add_attribute+0x80>
     b18:	mov	r5, r1
     b1c:	cmp	r1, #0
     b20:	beq	ba0 <coda_mem_type_add_attribute+0x9c>
     b24:	mov	r9, r2
     b28:	cmp	r2, #0
     b2c:	beq	bbc <coda_mem_type_add_attribute+0xb8>
     b30:	ldr	r6, [r0, #12]
     b34:	mov	r7, r3
     b38:	mov	r4, r0
     b3c:	cmp	r6, #0
     b40:	beq	bd8 <coda_mem_type_add_attribute+0xd4>
     b44:	ldr	r0, [r6]
     b48:	cmp	r0, #100	; 0x64
     b4c:	bne	cf4 <coda_mem_type_add_attribute+0x1f0>
     b50:	ldr	r1, [r4, #4]
     b54:	ldr	r0, [r6, #4]
     b58:	ldr	r1, [r1, #36]	; 0x24
     b5c:	cmp	r1, r0
     b60:	beq	c20 <coda_mem_type_add_attribute+0x11c>
     b64:	movw	r0, #0
     b68:	movw	r1, #0
     b6c:	movw	r3, #0
     b70:	movw	r2, #318	; 0x13e
     b74:	movt	r0, #0
     b78:	movt	r1, #0
     b7c:	movt	r3, #0
     b80:	bl	0 <__assert_fail>
     b84:	movw	r1, #0
     b88:	movw	r2, #0
     b8c:	mvn	r0, #99	; 0x63
     b90:	mov	r3, #272	; 0x110
     b94:	movt	r1, #0
     b98:	movt	r2, #0
     b9c:	b	da4 <coda_mem_type_add_attribute+0x2a0>
     ba0:	movw	r1, #0
     ba4:	movw	r2, #0
     ba8:	mvn	r0, #99	; 0x63
     bac:	movw	r3, #277	; 0x115
     bb0:	movt	r1, #0
     bb4:	movt	r2, #0
     bb8:	b	da4 <coda_mem_type_add_attribute+0x2a0>
     bbc:	movw	r1, #0
     bc0:	movw	r2, #0
     bc4:	mvn	r0, #99	; 0x63
     bc8:	movw	r3, #282	; 0x11a
     bcc:	movt	r1, #0
     bd0:	movt	r2, #0
     bd4:	b	da4 <coda_mem_type_add_attribute+0x2a0>
     bd8:	cmp	r7, #0
     bdc:	beq	d3c <coda_mem_type_add_attribute+0x238>
     be0:	ldr	r1, [r4, #4]
     be4:	ldr	r0, [r1, #36]	; 0x24
     be8:	cmp	r0, #0
     bec:	bne	c08 <coda_mem_type_add_attribute+0x104>
     bf0:	ldr	r0, [r1]
     bf4:	bl	0 <coda_type_record_new>
     bf8:	ldr	r1, [r4, #4]
     bfc:	cmp	r0, #0
     c00:	str	r0, [r1, #36]	; 0x24
     c04:	beq	da8 <coda_mem_type_add_attribute+0x2a4>
     c08:	mov	r1, #0
     c0c:	bl	914 <coda_mem_record_new>
     c10:	mov	r6, r0
     c14:	cmp	r0, #0
     c18:	str	r0, [r4, #12]
     c1c:	beq	da8 <coda_mem_type_add_attribute+0x2a4>
     c20:	ldr	r0, [r6, #4]
     c24:	mov	r1, r5
     c28:	ldr	r0, [r0, #44]	; 0x2c
     c2c:	bl	0 <coda_hashtable_get_index_from_name>
     c30:	mov	r8, r0
     c34:	cmp	r7, #0
     c38:	beq	d10 <coda_mem_type_add_attribute+0x20c>
     c3c:	cmp	r8, #0
     c40:	bmi	c60 <coda_mem_type_add_attribute+0x15c>
     c44:	ldr	r0, [r6, #16]
     c48:	cmp	r8, r0
     c4c:	bge	c8c <coda_mem_type_add_attribute+0x188>
     c50:	ldr	r1, [r6, #20]
     c54:	ldr	r1, [r1, r8, lsl #2]
     c58:	cmp	r1, #0
     c5c:	beq	c8c <coda_mem_type_add_attribute+0x188>
     c60:	ldr	r2, [r9, #4]
     c64:	ldr	r0, [r6, #4]
     c68:	mov	r1, r5
     c6c:	bl	0 <coda_type_record_create_field>
     c70:	mvn	r4, #0
     c74:	cmp	r0, #0
     c78:	bne	dac <coda_mem_type_add_attribute+0x2a8>
     c7c:	ldr	r1, [r6, #4]
     c80:	ldr	r0, [r6, #16]
     c84:	ldr	r1, [r1, #48]	; 0x30
     c88:	sub	r8, r1, #1
     c8c:	ldr	r1, [r6, #4]
     c90:	ldr	r1, [r1, #48]	; 0x30
     c94:	cmp	r0, r1
     c98:	bge	db8 <coda_mem_type_add_attribute+0x2b4>
     c9c:	ldr	r0, [r6, #20]
     ca0:	lsl	r1, r1, #2
     ca4:	bl	0 <realloc>
     ca8:	cmp	r0, #0
     cac:	beq	dc8 <coda_mem_type_add_attribute+0x2c4>
     cb0:	str	r0, [r6, #20]
     cb4:	ldr	r1, [r6, #4]
     cb8:	ldr	r3, [r6, #16]
     cbc:	ldr	r2, [r1, #48]	; 0x30
     cc0:	cmp	r3, r2
     cc4:	bge	d60 <coda_mem_type_add_attribute+0x25c>
     cc8:	mov	r1, #0
     ccc:	str	r1, [r0, r3, lsl #2]
     cd0:	add	r0, r3, #1
     cd4:	ldr	r2, [r6, #4]
     cd8:	ldr	r2, [r2, #48]	; 0x30
     cdc:	cmp	r0, r2
     ce0:	bge	d60 <coda_mem_type_add_attribute+0x25c>
     ce4:	ldr	r2, [r6, #20]
     ce8:	str	r1, [r2, r0, lsl #2]
     cec:	add	r0, r0, #1
     cf0:	b	cd4 <coda_mem_type_add_attribute+0x1d0>
     cf4:	movw	r1, #0
     cf8:	movw	r2, #0
     cfc:	mvn	r0, #99	; 0x63
     d00:	movw	r3, #315	; 0x13b
     d04:	movt	r1, #0
     d08:	movt	r2, #0
     d0c:	b	da4 <coda_mem_type_add_attribute+0x2a0>
     d10:	cmn	r8, #1
     d14:	ble	d44 <coda_mem_type_add_attribute+0x240>
     d18:	ldr	r0, [r6, #20]
     d1c:	ldr	r0, [r0, r8, lsl #2]
     d20:	cmp	r0, #0
     d24:	beq	d68 <coda_mem_type_add_attribute+0x264>
     d28:	movw	r1, #0
     d2c:	movw	r0, #367	; 0x16f
     d30:	movt	r1, #0
     d34:	str	r0, [sp]
     d38:	b	d94 <coda_mem_type_add_attribute+0x290>
     d3c:	movw	r0, #307	; 0x133
     d40:	b	d48 <coda_mem_type_add_attribute+0x244>
     d44:	movw	r0, #361	; 0x169
     d48:	movw	r1, #0
     d4c:	movw	r3, #0
     d50:	str	r0, [sp]
     d54:	mvn	r0, #101	; 0x65
     d58:	movt	r1, #0
     d5c:	b	d9c <coda_mem_type_add_attribute+0x298>
     d60:	str	r2, [r6, #16]
     d64:	b	db8 <coda_mem_type_add_attribute+0x2b4>
     d68:	ldr	r0, [r6, #4]
     d6c:	ldr	r1, [r9, #4]
     d70:	ldr	r0, [r0, #52]	; 0x34
     d74:	ldr	r0, [r0, r8, lsl #2]
     d78:	ldr	r0, [r0, #8]
     d7c:	cmp	r0, r1
     d80:	beq	db8 <coda_mem_type_add_attribute+0x2b4>
     d84:	movw	r1, #0
     d88:	movw	r0, #373	; 0x175
     d8c:	str	r0, [sp]
     d90:	movt	r1, #0
     d94:	movw	r3, #0
     d98:	mvn	r0, #99	; 0x63
     d9c:	movt	r3, #0
     da0:	mov	r2, r5
     da4:	bl	0 <coda_set_error>
     da8:	mvn	r4, #0
     dac:	mov	r0, r4
     db0:	sub	sp, fp, #24
     db4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     db8:	ldr	r0, [r6, #20]
     dbc:	mov	r4, #0
     dc0:	str	r9, [r0, r8, lsl #2]
     dc4:	b	dac <coda_mem_type_add_attribute+0x2a8>
     dc8:	ldr	r0, [r6, #4]
     dcc:	mov	r1, #344	; 0x158
     dd0:	movw	r3, #0
     dd4:	mvn	r4, #0
     dd8:	movt	r3, #0
     ddc:	ldr	r0, [r0, #48]	; 0x30
     de0:	str	r1, [sp]
     de4:	movw	r1, #0
     de8:	movt	r1, #0
     dec:	lsl	r2, r0, #2
     df0:	mvn	r0, #0
     df4:	bl	0 <coda_set_error>
     df8:	b	dac <coda_mem_type_add_attribute+0x2a8>

00000dfc <coda_mem_type_set_attributes>:
     dfc:	push	{r4, r5, fp, lr}
     e00:	add	fp, sp, #8
     e04:	cmp	r0, #0
     e08:	beq	e40 <coda_mem_type_set_attributes+0x44>
     e0c:	mov	r4, r1
     e10:	cmp	r1, #0
     e14:	beq	e58 <coda_mem_type_set_attributes+0x5c>
     e18:	mov	r5, r0
     e1c:	ldr	r0, [r0, #12]
     e20:	cmp	r0, #0
     e24:	beq	e7c <coda_mem_type_set_attributes+0x80>
     e28:	movw	r1, #0
     e2c:	movw	r2, #0
     e30:	mvn	r0, #99	; 0x63
     e34:	mov	r3, #396	; 0x18c
     e38:	movt	r1, #0
     e3c:	b	e6c <coda_mem_type_set_attributes+0x70>
     e40:	movw	r1, #0
     e44:	movw	r2, #0
     e48:	mvn	r0, #99	; 0x63
     e4c:	movw	r3, #386	; 0x182
     e50:	movt	r1, #0
     e54:	b	e6c <coda_mem_type_set_attributes+0x70>
     e58:	movw	r1, #0
     e5c:	movw	r2, #0
     e60:	mvn	r0, #99	; 0x63
     e64:	movw	r3, #391	; 0x187
     e68:	movt	r1, #0
     e6c:	movt	r2, #0
     e70:	bl	0 <coda_set_error>
     e74:	mvn	r0, #0
     e78:	pop	{r4, r5, fp, pc}
     e7c:	cmp	r2, #0
     e80:	beq	eb8 <coda_mem_type_set_attributes+0xbc>
     e84:	ldr	r1, [r4, #4]
     e88:	ldr	r0, [r1, #8]
     e8c:	cmp	r0, #0
     e90:	bne	ee4 <coda_mem_type_set_attributes+0xe8>
     e94:	ldr	r0, [r5, #4]
     e98:	bl	0 <coda_type_set_attributes>
     e9c:	mov	r1, r0
     ea0:	mvn	r0, #0
     ea4:	cmp	r1, #0
     ea8:	popne	{r4, r5, fp, pc}
     eac:	mov	r0, #0
     eb0:	str	r4, [r5, #12]
     eb4:	pop	{r4, r5, fp, pc}
     eb8:	ldr	r1, [r5, #4]
     ebc:	ldr	r0, [r4, #4]
     ec0:	ldr	r1, [r1, #36]	; 0x24
     ec4:	cmp	r1, r0
     ec8:	beq	eac <coda_mem_type_set_attributes+0xb0>
     ecc:	movw	r1, #0
     ed0:	movw	r2, #0
     ed4:	mvn	r0, #99	; 0x63
     ed8:	mov	r3, #412	; 0x19c
     edc:	movt	r1, #0
     ee0:	b	e6c <coda_mem_type_set_attributes+0x70>
     ee4:	movw	r0, #0
     ee8:	movw	r1, #0
     eec:	movw	r3, #0
     ef0:	movw	r2, #401	; 0x191
     ef4:	movt	r0, #0
     ef8:	movt	r1, #0
     efc:	movt	r3, #0
     f00:	bl	0 <__assert_fail>

00000f04 <coda_mem_record_add_field>:
     f04:	push	{r4, r5, r6, r7, fp, lr}
     f08:	add	fp, sp, #16
     f0c:	sub	sp, sp, #8
     f10:	cmp	r0, #0
     f14:	beq	fc0 <coda_mem_record_add_field+0xbc>
     f18:	mov	r4, r2
     f1c:	cmp	r2, #0
     f20:	beq	fdc <coda_mem_record_add_field+0xd8>
     f24:	mov	r5, r0
     f28:	ldr	r0, [r0, #4]
     f2c:	mov	r7, r1
     f30:	cmp	r3, #0
     f34:	beq	ff8 <coda_mem_record_add_field+0xf4>
     f38:	ldr	r2, [r4, #4]
     f3c:	mov	r1, r7
     f40:	bl	0 <coda_type_record_create_field>
     f44:	mvn	r6, #0
     f48:	cmp	r0, #0
     f4c:	bne	1098 <coda_mem_record_add_field+0x194>
     f50:	ldr	r0, [r5, #4]
     f54:	ldr	r2, [r5, #16]
     f58:	ldr	r1, [r0, #48]	; 0x30
     f5c:	sub	r6, r1, #1
     f60:	cmp	r2, r1
     f64:	bge	10a8 <coda_mem_record_add_field+0x1a4>
     f68:	ldr	r0, [r5, #20]
     f6c:	lsl	r1, r1, #2
     f70:	bl	0 <realloc>
     f74:	cmp	r0, #0
     f78:	beq	10b8 <coda_mem_record_add_field+0x1b4>
     f7c:	str	r0, [r5, #20]
     f80:	ldr	r1, [r5, #4]
     f84:	ldr	r3, [r5, #16]
     f88:	ldr	r2, [r1, #48]	; 0x30
     f8c:	cmp	r3, r2
     f90:	bge	10a4 <coda_mem_record_add_field+0x1a0>
     f94:	mov	r1, #0
     f98:	str	r1, [r0, r3, lsl #2]
     f9c:	add	r0, r3, #1
     fa0:	ldr	r2, [r5, #4]
     fa4:	ldr	r2, [r2, #48]	; 0x30
     fa8:	cmp	r0, r2
     fac:	bge	10a4 <coda_mem_record_add_field+0x1a0>
     fb0:	ldr	r2, [r5, #20]
     fb4:	str	r1, [r2, r0, lsl #2]
     fb8:	add	r0, r0, #1
     fbc:	b	fa0 <coda_mem_record_add_field+0x9c>
     fc0:	movw	r1, #0
     fc4:	movw	r2, #0
     fc8:	mvn	r0, #99	; 0x63
     fcc:	movw	r3, #491	; 0x1eb
     fd0:	movt	r1, #0
     fd4:	movt	r2, #0
     fd8:	b	1090 <coda_mem_record_add_field+0x18c>
     fdc:	movw	r1, #0
     fe0:	movw	r2, #0
     fe4:	mvn	r0, #99	; 0x63
     fe8:	mov	r3, #496	; 0x1f0
     fec:	movt	r1, #0
     ff0:	movt	r2, #0
     ff4:	b	1090 <coda_mem_record_add_field+0x18c>
     ff8:	ldr	r0, [r0, #44]	; 0x2c
     ffc:	mov	r1, r7
    1000:	bl	0 <coda_hashtable_get_index_from_name>
    1004:	cmn	r0, #1
    1008:	ble	1034 <coda_mem_record_add_field+0x130>
    100c:	mov	r6, r0
    1010:	ldr	r0, [r5, #20]
    1014:	ldr	r0, [r0, r6, lsl #2]
    1018:	cmp	r0, #0
    101c:	beq	1054 <coda_mem_record_add_field+0x150>
    1020:	movw	r1, #0
    1024:	mov	r0, #540	; 0x21c
    1028:	movt	r1, #0
    102c:	str	r0, [sp]
    1030:	b	1080 <coda_mem_record_add_field+0x17c>
    1034:	movw	r1, #0
    1038:	movw	r3, #0
    103c:	movw	r0, #534	; 0x216
    1040:	str	r0, [sp]
    1044:	movt	r1, #0
    1048:	movt	r3, #0
    104c:	mvn	r0, #101	; 0x65
    1050:	b	108c <coda_mem_record_add_field+0x188>
    1054:	ldr	r0, [r5, #4]
    1058:	ldr	r1, [r4, #4]
    105c:	ldr	r0, [r0, #52]	; 0x34
    1060:	ldr	r0, [r0, r6, lsl #2]
    1064:	ldr	r0, [r0, #8]
    1068:	cmp	r0, r1
    106c:	beq	10a8 <coda_mem_record_add_field+0x1a4>
    1070:	movw	r1, #0
    1074:	movw	r0, #546	; 0x222
    1078:	str	r0, [sp]
    107c:	movt	r1, #0
    1080:	movw	r3, #0
    1084:	mvn	r0, #99	; 0x63
    1088:	movt	r3, #0
    108c:	mov	r2, r7
    1090:	bl	0 <coda_set_error>
    1094:	mvn	r6, #0
    1098:	mov	r0, r6
    109c:	sub	sp, fp, #16
    10a0:	pop	{r4, r5, r6, r7, fp, pc}
    10a4:	str	r2, [r5, #16]
    10a8:	ldr	r0, [r5, #20]
    10ac:	str	r4, [r0, r6, lsl #2]
    10b0:	mov	r6, #0
    10b4:	b	1098 <coda_mem_record_add_field+0x194>
    10b8:	ldr	r0, [r5, #4]
    10bc:	mov	r1, #516	; 0x204
    10c0:	movw	r3, #0
    10c4:	mvn	r6, #0
    10c8:	movt	r3, #0
    10cc:	ldr	r0, [r0, #48]	; 0x30
    10d0:	str	r1, [sp]
    10d4:	movw	r1, #0
    10d8:	movt	r1, #0
    10dc:	lsl	r2, r0, #2
    10e0:	mvn	r0, #0
    10e4:	bl	0 <coda_set_error>
    10e8:	b	1098 <coda_mem_record_add_field+0x194>

000010ec <coda_mem_record_validate>:
    10ec:	push	{fp, lr}
    10f0:	mov	fp, sp
    10f4:	cmp	r0, #0
    10f8:	beq	1178 <coda_mem_record_validate+0x8c>
    10fc:	ldr	ip, [r0, #4]
    1100:	ldr	lr, [r0, #16]
    1104:	ldr	r1, [ip, #48]	; 0x30
    1108:	cmp	lr, r1
    110c:	bne	119c <coda_mem_record_validate+0xb0>
    1110:	cmp	lr, #1
    1114:	blt	1170 <coda_mem_record_validate+0x84>
    1118:	ldr	r0, [r0, #20]
    111c:	mov	r3, #0
    1120:	b	1130 <coda_mem_record_validate+0x44>
    1124:	add	r3, r3, #1
    1128:	cmp	lr, r3
    112c:	beq	1170 <coda_mem_record_validate+0x84>
    1130:	ldr	r1, [r0, r3, lsl #2]
    1134:	cmp	r1, #0
    1138:	bne	1124 <coda_mem_record_validate+0x38>
    113c:	ldr	r1, [ip, #52]	; 0x34
    1140:	ldr	r1, [r1, r3, lsl #2]
    1144:	ldrb	r2, [r1, #16]
    1148:	cmp	r2, #0
    114c:	bne	1124 <coda_mem_record_validate+0x38>
    1150:	ldr	r2, [r1]
    1154:	movw	r0, #65136	; 0xfe70
    1158:	movw	r1, #0
    115c:	movt	r0, #65535	; 0xffff
    1160:	movt	r1, #0
    1164:	bl	0 <coda_set_error>
    1168:	mvn	r0, #0
    116c:	pop	{fp, pc}
    1170:	mov	r0, #0
    1174:	pop	{fp, pc}
    1178:	movw	r1, #0
    117c:	movw	r2, #0
    1180:	mvn	r0, #99	; 0x63
    1184:	movw	r3, #561	; 0x231
    1188:	movt	r1, #0
    118c:	movt	r2, #0
    1190:	bl	0 <coda_set_error>
    1194:	mvn	r0, #0
    1198:	pop	{fp, pc}
    119c:	movw	r0, #0
    11a0:	movw	r1, #0
    11a4:	movw	r3, #0
    11a8:	mov	r2, #564	; 0x234
    11ac:	movt	r0, #0
    11b0:	movt	r1, #0
    11b4:	movt	r3, #0
    11b8:	bl	0 <__assert_fail>

000011bc <coda_mem_array_set_element>:
    11bc:	push	{fp, lr}
    11c0:	mov	fp, sp
    11c4:	sub	sp, sp, #8
    11c8:	cmp	r0, #0
    11cc:	beq	1220 <coda_mem_array_set_element+0x64>
    11d0:	ldr	r3, [r0, #16]
    11d4:	mov	ip, r1
    11d8:	cmp	r1, #0
    11dc:	bmi	123c <coda_mem_array_set_element+0x80>
    11e0:	cmp	r3, ip
    11e4:	ble	123c <coda_mem_array_set_element+0x80>
    11e8:	cmp	r2, #0
    11ec:	beq	1264 <coda_mem_array_set_element+0xa8>
    11f0:	ldr	lr, [r0, #20]
    11f4:	ldr	r1, [lr, ip, lsl #2]
    11f8:	cmp	r1, #0
    11fc:	beq	1280 <coda_mem_array_set_element+0xc4>
    1200:	movw	r1, #0
    1204:	movw	r3, #0
    1208:	mov	r0, #652	; 0x28c
    120c:	movt	r1, #0
    1210:	movt	r3, #0
    1214:	str	r0, [sp]
    1218:	mvn	r0, #99	; 0x63
    121c:	b	125c <coda_mem_array_set_element+0xa0>
    1220:	movw	r1, #0
    1224:	movw	r2, #0
    1228:	mvn	r0, #99	; 0x63
    122c:	movw	r3, #635	; 0x27b
    1230:	movt	r1, #0
    1234:	movt	r2, #0
    1238:	b	12bc <coda_mem_array_set_element+0x100>
    123c:	movw	r1, #0
    1240:	movw	r0, #641	; 0x281
    1244:	movt	r1, #0
    1248:	str	r0, [sp, #4]
    124c:	mvn	r0, #100	; 0x64
    1250:	str	r1, [sp]
    1254:	movw	r1, #0
    1258:	movt	r1, #0
    125c:	mov	r2, ip
    1260:	b	12bc <coda_mem_array_set_element+0x100>
    1264:	movw	r1, #0
    1268:	movw	r2, #0
    126c:	mvn	r0, #99	; 0x63
    1270:	movw	r3, #646	; 0x286
    1274:	movt	r1, #0
    1278:	movt	r2, #0
    127c:	b	12bc <coda_mem_array_set_element+0x100>
    1280:	ldr	r0, [r0, #4]
    1284:	ldr	r1, [r2, #4]
    1288:	ldr	r0, [r0, #40]	; 0x28
    128c:	cmp	r0, r1
    1290:	beq	12cc <coda_mem_array_set_element+0x110>
    1294:	movw	ip, #0
    1298:	movw	r0, #658	; 0x292
    129c:	movw	r1, #0
    12a0:	mov	r2, r3
    12a4:	movt	ip, #0
    12a8:	str	r0, [sp]
    12ac:	movw	r0, #65136	; 0xfe70
    12b0:	movt	r1, #0
    12b4:	movt	r0, #65535	; 0xffff
    12b8:	mov	r3, ip
    12bc:	bl	0 <coda_set_error>
    12c0:	mvn	r0, #0
    12c4:	mov	sp, fp
    12c8:	pop	{fp, pc}
    12cc:	str	r2, [lr, ip, lsl #2]
    12d0:	mov	r0, #0
    12d4:	mov	sp, fp
    12d8:	pop	{fp, pc}

000012dc <coda_mem_array_validate>:
    12dc:	push	{r4, sl, fp, lr}
    12e0:	add	fp, sp, #8
    12e4:	cmp	r0, #0
    12e8:	beq	1354 <coda_mem_array_validate+0x78>
    12ec:	mov	r4, r0
    12f0:	ldr	r0, [r0, #4]
    12f4:	ldr	r3, [r0, #44]	; 0x2c
    12f8:	cmp	r3, #0
    12fc:	bmi	1320 <coda_mem_array_validate+0x44>
    1300:	ldr	r2, [r4, #16]
    1304:	cmp	r2, r3
    1308:	beq	1320 <coda_mem_array_validate+0x44>
    130c:	movw	r0, #65136	; 0xfe70
    1310:	movw	r1, #0
    1314:	movt	r0, #65535	; 0xffff
    1318:	movt	r1, #0
    131c:	bl	0 <coda_set_error>
    1320:	ldr	r0, [r4, #16]
    1324:	cmp	r0, #1
    1328:	blt	134c <coda_mem_array_validate+0x70>
    132c:	ldr	r1, [r4, #20]
    1330:	mov	r2, #0
    1334:	ldr	r3, [r1, r2, lsl #2]
    1338:	cmp	r3, #0
    133c:	beq	1378 <coda_mem_array_validate+0x9c>
    1340:	add	r2, r2, #1
    1344:	cmp	r2, r0
    1348:	blt	1334 <coda_mem_array_validate+0x58>
    134c:	mov	r0, #0
    1350:	pop	{r4, sl, fp, pc}
    1354:	movw	r1, #0
    1358:	movw	r2, #0
    135c:	mvn	r0, #99	; 0x63
    1360:	movw	r3, #729	; 0x2d9
    1364:	movt	r1, #0
    1368:	movt	r2, #0
    136c:	bl	0 <coda_set_error>
    1370:	mvn	r0, #0
    1374:	pop	{r4, sl, fp, pc}
    1378:	movw	r0, #65136	; 0xfe70
    137c:	movw	r1, #0
    1380:	movt	r0, #65535	; 0xffff
    1384:	movt	r1, #0
    1388:	bl	0 <coda_set_error>
    138c:	mvn	r0, #0
    1390:	pop	{r4, sl, fp, pc}

00001394 <coda_mem_data_new>:
    1394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1398:	add	fp, sp, #28
    139c:	sub	sp, sp, #4
    13a0:	cmp	r0, #0
    13a4:	beq	13ec <coda_mem_data_new+0x58>
    13a8:	mov	r5, r3
    13ac:	cmn	r3, #1
    13b0:	ble	1638 <coda_mem_data_new+0x2a4>
    13b4:	ldr	r8, [fp, #8]
    13b8:	mov	r7, r2
    13bc:	mov	r6, r1
    13c0:	mov	r9, r0
    13c4:	cmp	r5, #0
    13c8:	beq	1408 <coda_mem_data_new+0x74>
    13cc:	cmp	r8, #0
    13d0:	bne	1408 <coda_mem_data_new+0x74>
    13d4:	movw	r1, #0
    13d8:	movw	r2, #0
    13dc:	mvn	r0, #99	; 0x63
    13e0:	mov	r3, #764	; 0x2fc
    13e4:	movt	r1, #0
    13e8:	b	1400 <coda_mem_data_new+0x6c>
    13ec:	movw	r1, #0
    13f0:	movw	r2, #0
    13f4:	mvn	r0, #99	; 0x63
    13f8:	movw	r3, #758	; 0x2f6
    13fc:	movt	r1, #0
    1400:	movt	r2, #0
    1404:	b	1508 <coda_mem_data_new+0x174>
    1408:	ldr	r0, [r9, #28]
    140c:	cmp	r0, #0
    1410:	bmi	1430 <coda_mem_data_new+0x9c>
    1414:	ldr	r1, [r9, #24]
    1418:	lsr	r2, r1, #3
    141c:	tst	r1, #7
    1420:	orr	r3, r2, r0, lsl #29
    1424:	addne	r3, r3, #1
    1428:	cmp	r3, r5
    142c:	bne	14f4 <coda_mem_data_new+0x160>
    1430:	cmp	r5, #1
    1434:	beq	1464 <coda_mem_data_new+0xd0>
    1438:	ldr	r0, [r9, #12]
    143c:	cmp	r0, #10
    1440:	bne	1464 <coda_mem_data_new+0xd0>
    1444:	movw	r1, #0
    1448:	movw	r3, #0
    144c:	movw	r0, #782	; 0x30e
    1450:	str	r0, [sp]
    1454:	movt	r1, #0
    1458:	movt	r3, #0
    145c:	mvn	r0, #99	; 0x63
    1460:	b	1504 <coda_mem_data_new+0x170>
    1464:	mov	r0, #32
    1468:	bl	0 <malloc>
    146c:	cmp	r0, #0
    1470:	beq	151c <coda_mem_data_new+0x188>
    1474:	mov	r4, r0
    1478:	mov	r0, #100	; 0x64
    147c:	cmp	r5, #0
    1480:	stm	r4, {r0, r9}
    1484:	ldr	r0, [r9, #4]
    1488:	add	r0, r0, #1
    148c:	str	r0, [r9, #4]
    1490:	mov	r0, #0
    1494:	mov	r9, r4
    1498:	str	r0, [r9, #24]!
    149c:	str	r0, [r9, #4]
    14a0:	mov	r0, #2
    14a4:	str	r0, [r9, #-16]
    14a8:	str	r6, [r9, #-12]
    14ac:	str	r5, [r9, #-8]
    14b0:	beq	15d8 <coda_mem_data_new+0x244>
    14b4:	cmp	r7, #0
    14b8:	beq	1540 <coda_mem_data_new+0x1ac>
    14bc:	mov	r6, r7
    14c0:	ldr	r2, [r6, #40]!	; 0x28
    14c4:	ldr	lr, [r6, #4]
    14c8:	orrs	r0, r2, lr
    14cc:	beq	155c <coda_mem_data_new+0x1c8>
    14d0:	subs	r0, r2, #1
    14d4:	sbc	r1, lr, #0
    14d8:	asr	r3, r1, #31
    14dc:	adds	r3, r0, r3, lsr #20
    14e0:	adc	ip, r1, #0
    14e4:	lsr	r3, r3, #12
    14e8:	orr	r3, r3, ip, lsl #20
    14ec:	add	ip, r3, #1
    14f0:	b	1568 <coda_mem_data_new+0x1d4>
    14f4:	movw	r0, #65236	; 0xfed4
    14f8:	movw	r1, #0
    14fc:	movt	r0, #65535	; 0xffff
    1500:	movt	r1, #0
    1504:	mov	r2, r5
    1508:	bl	0 <coda_set_error>
    150c:	mov	r4, #0
    1510:	mov	r0, r4
    1514:	sub	sp, fp, #28
    1518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    151c:	movw	r1, #0
    1520:	movw	r3, #0
    1524:	movw	r0, #790	; 0x316
    1528:	mov	r2, #32
    152c:	movt	r1, #0
    1530:	movt	r3, #0
    1534:	str	r0, [sp]
    1538:	mvn	r0, #0
    153c:	b	1508 <coda_mem_data_new+0x174>
    1540:	movw	r1, #0
    1544:	movw	r2, #0
    1548:	mvn	r0, #99	; 0x63
    154c:	movw	r3, #805	; 0x325
    1550:	movt	r1, #0
    1554:	movt	r2, #0
    1558:	b	1628 <coda_mem_data_new+0x294>
    155c:	mvn	r0, #0
    1560:	mov	ip, #0
    1564:	mvn	r1, #0
    1568:	adds	r0, r0, r5
    156c:	adc	r1, r1, r5, asr #31
    1570:	asr	r3, r1, #31
    1574:	adds	r0, r0, r3, lsr #20
    1578:	adc	r1, r1, #0
    157c:	lsr	r0, r0, #12
    1580:	orr	r0, r0, r1, lsl #20
    1584:	add	r1, r0, #1
    1588:	ldr	r0, [r7, #48]	; 0x30
    158c:	cmp	r1, ip
    1590:	ble	15b0 <coda_mem_data_new+0x21c>
    1594:	lsl	sl, r1, #12
    1598:	mov	r1, sl
    159c:	bl	0 <realloc>
    15a0:	cmp	r0, #0
    15a4:	beq	1608 <coda_mem_data_new+0x274>
    15a8:	str	r0, [r7, #48]	; 0x30
    15ac:	ldm	r6, {r2, lr}
    15b0:	stm	r9, {r2, lr}
    15b4:	add	r0, r0, r2
    15b8:	mov	r1, r8
    15bc:	mov	r2, r5
    15c0:	bl	0 <memcpy>
    15c4:	ldrd	r0, [r6]
    15c8:	adds	r0, r0, r5
    15cc:	adc	r1, r1, r5, asr #31
    15d0:	strd	r0, [r6]
    15d4:	ldr	r6, [r4, #12]
    15d8:	cmp	r6, #0
    15dc:	bne	1510 <coda_mem_data_new+0x17c>
    15e0:	ldr	r0, [r4, #4]
    15e4:	ldr	r0, [r0, #36]	; 0x24
    15e8:	cmp	r0, #0
    15ec:	beq	1510 <coda_mem_data_new+0x17c>
    15f0:	mov	r1, #0
    15f4:	bl	914 <coda_mem_record_new>
    15f8:	cmp	r0, #0
    15fc:	str	r0, [r4, #12]
    1600:	bne	1510 <coda_mem_data_new+0x17c>
    1604:	b	162c <coda_mem_data_new+0x298>
    1608:	movw	r1, #0
    160c:	movw	r3, #0
    1610:	movw	r0, #821	; 0x335
    1614:	mov	r2, sl
    1618:	movt	r1, #0
    161c:	movt	r3, #0
    1620:	str	r0, [sp]
    1624:	mvn	r0, #0
    1628:	bl	0 <coda_set_error>
    162c:	mov	r0, r4
    1630:	bl	0 <coda_mem_type_delete>
    1634:	b	150c <coda_mem_data_new+0x178>
    1638:	movw	r0, #0
    163c:	movw	r1, #0
    1640:	movw	r3, #0
    1644:	movw	r2, #761	; 0x2f9
    1648:	movt	r0, #0
    164c:	movt	r1, #0
    1650:	movt	r3, #0
    1654:	bl	0 <__assert_fail>

00001658 <coda_mem_int8_new>:
    1658:	push	{r4, r5, fp, lr}
    165c:	add	fp, sp, #8
    1660:	sub	sp, sp, #8
    1664:	strb	r3, [sp, #7]
    1668:	ldrd	r4, [r0, #24]
    166c:	eor	r3, r4, #8
    1670:	orrs	r3, r3, r5
    1674:	bne	169c <coda_mem_int8_new+0x44>
    1678:	ldr	r3, [r0, #12]
    167c:	cmp	r3, #0
    1680:	bne	16b4 <coda_mem_int8_new+0x5c>
    1684:	add	r3, sp, #7
    1688:	str	r3, [sp]
    168c:	mov	r3, #1
    1690:	bl	1394 <coda_mem_data_new>
    1694:	sub	sp, fp, #8
    1698:	pop	{r4, r5, fp, pc}
    169c:	movw	r0, #0
    16a0:	movw	r1, #0
    16a4:	movw	r3, #0
    16a8:	movw	r2, #847	; 0x34f
    16ac:	movt	r0, #0
    16b0:	b	16c8 <coda_mem_int8_new+0x70>
    16b4:	movw	r0, #0
    16b8:	movw	r1, #0
    16bc:	movw	r3, #0
    16c0:	mov	r2, #848	; 0x350
    16c4:	movt	r0, #0
    16c8:	movt	r1, #0
    16cc:	movt	r3, #0
    16d0:	bl	0 <__assert_fail>

000016d4 <coda_mem_uint8_new>:
    16d4:	push	{r4, r5, fp, lr}
    16d8:	add	fp, sp, #8
    16dc:	sub	sp, sp, #8
    16e0:	strb	r3, [sp, #7]
    16e4:	ldrd	r4, [r0, #24]
    16e8:	eor	r3, r4, #8
    16ec:	orrs	r3, r3, r5
    16f0:	bne	1718 <coda_mem_uint8_new+0x44>
    16f4:	ldr	r3, [r0, #12]
    16f8:	cmp	r3, #1
    16fc:	bne	1730 <coda_mem_uint8_new+0x5c>
    1700:	add	r3, sp, #7
    1704:	str	r3, [sp]
    1708:	mov	r3, #1
    170c:	bl	1394 <coda_mem_data_new>
    1710:	sub	sp, fp, #8
    1714:	pop	{r4, r5, fp, pc}
    1718:	movw	r0, #0
    171c:	movw	r1, #0
    1720:	movw	r3, #0
    1724:	movw	r2, #855	; 0x357
    1728:	movt	r0, #0
    172c:	b	1744 <coda_mem_uint8_new+0x70>
    1730:	movw	r0, #0
    1734:	movw	r1, #0
    1738:	movw	r3, #0
    173c:	mov	r2, #856	; 0x358
    1740:	movt	r0, #0
    1744:	movt	r1, #0
    1748:	movt	r3, #0
    174c:	bl	0 <__assert_fail>

00001750 <coda_mem_int16_new>:
    1750:	push	{r4, r5, fp, lr}
    1754:	add	fp, sp, #8
    1758:	sub	sp, sp, #8
    175c:	strh	r3, [sp, #6]
    1760:	ldrd	r4, [r0, #24]
    1764:	eor	r3, r4, #16
    1768:	orrs	r3, r3, r5
    176c:	bne	1794 <coda_mem_int16_new+0x44>
    1770:	ldr	r3, [r0, #12]
    1774:	cmp	r3, #2
    1778:	bne	17ac <coda_mem_int16_new+0x5c>
    177c:	add	r3, sp, #6
    1780:	str	r3, [sp]
    1784:	mov	r3, #2
    1788:	bl	1394 <coda_mem_data_new>
    178c:	sub	sp, fp, #8
    1790:	pop	{r4, r5, fp, pc}
    1794:	movw	r0, #0
    1798:	movw	r1, #0
    179c:	movw	r3, #0
    17a0:	movw	r2, #863	; 0x35f
    17a4:	movt	r0, #0
    17a8:	b	17c0 <coda_mem_int16_new+0x70>
    17ac:	movw	r0, #0
    17b0:	movw	r1, #0
    17b4:	movw	r3, #0
    17b8:	mov	r2, #864	; 0x360
    17bc:	movt	r0, #0
    17c0:	movt	r1, #0
    17c4:	movt	r3, #0
    17c8:	bl	0 <__assert_fail>

000017cc <coda_mem_uint16_new>:
    17cc:	push	{r4, r5, fp, lr}
    17d0:	add	fp, sp, #8
    17d4:	sub	sp, sp, #8
    17d8:	strh	r3, [sp, #6]
    17dc:	ldrd	r4, [r0, #24]
    17e0:	eor	r3, r4, #16
    17e4:	orrs	r3, r3, r5
    17e8:	bne	1810 <coda_mem_uint16_new+0x44>
    17ec:	ldr	r3, [r0, #12]
    17f0:	cmp	r3, #3
    17f4:	bne	1828 <coda_mem_uint16_new+0x5c>
    17f8:	add	r3, sp, #6
    17fc:	str	r3, [sp]
    1800:	mov	r3, #2
    1804:	bl	1394 <coda_mem_data_new>
    1808:	sub	sp, fp, #8
    180c:	pop	{r4, r5, fp, pc}
    1810:	movw	r0, #0
    1814:	movw	r1, #0
    1818:	movw	r3, #0
    181c:	movw	r2, #871	; 0x367
    1820:	movt	r0, #0
    1824:	b	183c <coda_mem_uint16_new+0x70>
    1828:	movw	r0, #0
    182c:	movw	r1, #0
    1830:	movw	r3, #0
    1834:	mov	r2, #872	; 0x368
    1838:	movt	r0, #0
    183c:	movt	r1, #0
    1840:	movt	r3, #0
    1844:	bl	0 <__assert_fail>

00001848 <coda_mem_int32_new>:
    1848:	push	{r4, r5, fp, lr}
    184c:	add	fp, sp, #8
    1850:	sub	sp, sp, #8
    1854:	str	r3, [sp, #4]
    1858:	ldrd	r4, [r0, #24]
    185c:	eor	r3, r4, #32
    1860:	orrs	r3, r3, r5
    1864:	bne	188c <coda_mem_int32_new+0x44>
    1868:	ldr	r3, [r0, #12]
    186c:	cmp	r3, #4
    1870:	bne	18a4 <coda_mem_int32_new+0x5c>
    1874:	add	r3, sp, #4
    1878:	str	r3, [sp]
    187c:	mov	r3, #4
    1880:	bl	1394 <coda_mem_data_new>
    1884:	sub	sp, fp, #8
    1888:	pop	{r4, r5, fp, pc}
    188c:	movw	r0, #0
    1890:	movw	r1, #0
    1894:	movw	r3, #0
    1898:	movw	r2, #879	; 0x36f
    189c:	movt	r0, #0
    18a0:	b	18b8 <coda_mem_int32_new+0x70>
    18a4:	movw	r0, #0
    18a8:	movw	r1, #0
    18ac:	movw	r3, #0
    18b0:	mov	r2, #880	; 0x370
    18b4:	movt	r0, #0
    18b8:	movt	r1, #0
    18bc:	movt	r3, #0
    18c0:	bl	0 <__assert_fail>

000018c4 <coda_mem_uint32_new>:
    18c4:	push	{r4, r5, fp, lr}
    18c8:	add	fp, sp, #8
    18cc:	sub	sp, sp, #8
    18d0:	str	r3, [sp, #4]
    18d4:	ldrd	r4, [r0, #24]
    18d8:	eor	r3, r4, #32
    18dc:	orrs	r3, r3, r5
    18e0:	bne	1908 <coda_mem_uint32_new+0x44>
    18e4:	ldr	r3, [r0, #12]
    18e8:	cmp	r3, #5
    18ec:	bne	1920 <coda_mem_uint32_new+0x5c>
    18f0:	add	r3, sp, #4
    18f4:	str	r3, [sp]
    18f8:	mov	r3, #4
    18fc:	bl	1394 <coda_mem_data_new>
    1900:	sub	sp, fp, #8
    1904:	pop	{r4, r5, fp, pc}
    1908:	movw	r0, #0
    190c:	movw	r1, #0
    1910:	movw	r3, #0
    1914:	movw	r2, #887	; 0x377
    1918:	movt	r0, #0
    191c:	b	1934 <coda_mem_uint32_new+0x70>
    1920:	movw	r0, #0
    1924:	movw	r1, #0
    1928:	movw	r3, #0
    192c:	mov	r2, #888	; 0x378
    1930:	movt	r0, #0
    1934:	movt	r1, #0
    1938:	movt	r3, #0
    193c:	bl	0 <__assert_fail>

00001940 <coda_mem_int64_new>:
    1940:	push	{r4, r5, fp, lr}
    1944:	add	fp, sp, #8
    1948:	sub	sp, sp, #16
    194c:	ldr	r3, [fp, #12]
    1950:	str	r3, [sp, #12]
    1954:	ldr	r3, [fp, #8]
    1958:	str	r3, [sp, #8]
    195c:	ldrd	r4, [r0, #24]
    1960:	eor	r3, r4, #64	; 0x40
    1964:	orrs	r3, r3, r5
    1968:	bne	1990 <coda_mem_int64_new+0x50>
    196c:	ldr	r3, [r0, #12]
    1970:	cmp	r3, #6
    1974:	bne	19a8 <coda_mem_int64_new+0x68>
    1978:	add	r3, sp, #8
    197c:	str	r3, [sp]
    1980:	mov	r3, #8
    1984:	bl	1394 <coda_mem_data_new>
    1988:	sub	sp, fp, #8
    198c:	pop	{r4, r5, fp, pc}
    1990:	movw	r0, #0
    1994:	movw	r1, #0
    1998:	movw	r3, #0
    199c:	movw	r2, #895	; 0x37f
    19a0:	movt	r0, #0
    19a4:	b	19bc <coda_mem_int64_new+0x7c>
    19a8:	movw	r0, #0
    19ac:	movw	r1, #0
    19b0:	movw	r3, #0
    19b4:	mov	r2, #896	; 0x380
    19b8:	movt	r0, #0
    19bc:	movt	r1, #0
    19c0:	movt	r3, #0
    19c4:	bl	0 <__assert_fail>

000019c8 <coda_mem_uint64_new>:
    19c8:	push	{r4, r5, fp, lr}
    19cc:	add	fp, sp, #8
    19d0:	sub	sp, sp, #16
    19d4:	ldr	r3, [fp, #12]
    19d8:	str	r3, [sp, #12]
    19dc:	ldr	r3, [fp, #8]
    19e0:	str	r3, [sp, #8]
    19e4:	ldrd	r4, [r0, #24]
    19e8:	eor	r3, r4, #64	; 0x40
    19ec:	orrs	r3, r3, r5
    19f0:	bne	1a18 <coda_mem_uint64_new+0x50>
    19f4:	ldr	r3, [r0, #12]
    19f8:	cmp	r3, #7
    19fc:	bne	1a30 <coda_mem_uint64_new+0x68>
    1a00:	add	r3, sp, #8
    1a04:	str	r3, [sp]
    1a08:	mov	r3, #8
    1a0c:	bl	1394 <coda_mem_data_new>
    1a10:	sub	sp, fp, #8
    1a14:	pop	{r4, r5, fp, pc}
    1a18:	movw	r0, #0
    1a1c:	movw	r1, #0
    1a20:	movw	r3, #0
    1a24:	movw	r2, #903	; 0x387
    1a28:	movt	r0, #0
    1a2c:	b	1a44 <coda_mem_uint64_new+0x7c>
    1a30:	movw	r0, #0
    1a34:	movw	r1, #0
    1a38:	movw	r3, #0
    1a3c:	mov	r2, #904	; 0x388
    1a40:	movt	r0, #0
    1a44:	movt	r1, #0
    1a48:	movt	r3, #0
    1a4c:	bl	0 <__assert_fail>

00001a50 <coda_mem_float_new>:
    1a50:	push	{r4, r5, fp, lr}
    1a54:	add	fp, sp, #8
    1a58:	sub	sp, sp, #8
    1a5c:	vstr	s0, [sp, #4]
    1a60:	ldrd	r4, [r0, #24]
    1a64:	eor	r3, r4, #32
    1a68:	orrs	r3, r3, r5
    1a6c:	bne	1a94 <coda_mem_float_new+0x44>
    1a70:	ldr	r3, [r0, #12]
    1a74:	cmp	r3, #8
    1a78:	bne	1aac <coda_mem_float_new+0x5c>
    1a7c:	add	r3, sp, #4
    1a80:	str	r3, [sp]
    1a84:	mov	r3, #4
    1a88:	bl	1394 <coda_mem_data_new>
    1a8c:	sub	sp, fp, #8
    1a90:	pop	{r4, r5, fp, pc}
    1a94:	movw	r0, #0
    1a98:	movw	r1, #0
    1a9c:	movw	r3, #0
    1aa0:	movw	r2, #911	; 0x38f
    1aa4:	movt	r0, #0
    1aa8:	b	1ac0 <coda_mem_float_new+0x70>
    1aac:	movw	r0, #0
    1ab0:	movw	r1, #0
    1ab4:	movw	r3, #0
    1ab8:	mov	r2, #912	; 0x390
    1abc:	movt	r0, #0
    1ac0:	movt	r1, #0
    1ac4:	movt	r3, #0
    1ac8:	bl	0 <__assert_fail>

00001acc <coda_mem_double_new>:
    1acc:	push	{r4, r5, fp, lr}
    1ad0:	add	fp, sp, #8
    1ad4:	sub	sp, sp, #16
    1ad8:	vstr	d0, [sp, #8]
    1adc:	ldrd	r4, [r0, #24]
    1ae0:	eor	r3, r4, #64	; 0x40
    1ae4:	orrs	r3, r3, r5
    1ae8:	bne	1b10 <coda_mem_double_new+0x44>
    1aec:	ldr	r3, [r0, #12]
    1af0:	cmp	r3, #9
    1af4:	bne	1b28 <coda_mem_double_new+0x5c>
    1af8:	add	r3, sp, #8
    1afc:	str	r3, [sp]
    1b00:	mov	r3, #8
    1b04:	bl	1394 <coda_mem_data_new>
    1b08:	sub	sp, fp, #8
    1b0c:	pop	{r4, r5, fp, pc}
    1b10:	movw	r0, #0
    1b14:	movw	r1, #0
    1b18:	movw	r3, #0
    1b1c:	movw	r2, #919	; 0x397
    1b20:	movt	r0, #0
    1b24:	b	1b3c <coda_mem_double_new+0x70>
    1b28:	movw	r0, #0
    1b2c:	movw	r1, #0
    1b30:	movw	r3, #0
    1b34:	mov	r2, #920	; 0x398
    1b38:	movt	r0, #0
    1b3c:	movt	r1, #0
    1b40:	movt	r3, #0
    1b44:	bl	0 <__assert_fail>

00001b48 <coda_mem_char_new>:
    1b48:	push	{r4, r5, fp, lr}
    1b4c:	add	fp, sp, #8
    1b50:	sub	sp, sp, #8
    1b54:	strb	r3, [sp, #7]
    1b58:	ldrd	r4, [r0, #24]
    1b5c:	eor	r3, r4, #8
    1b60:	orrs	r3, r3, r5
    1b64:	bne	1b8c <coda_mem_char_new+0x44>
    1b68:	ldr	r3, [r0, #12]
    1b6c:	cmp	r3, #10
    1b70:	bne	1ba4 <coda_mem_char_new+0x5c>
    1b74:	add	r3, sp, #7
    1b78:	str	r3, [sp]
    1b7c:	mov	r3, #1
    1b80:	bl	1394 <coda_mem_data_new>
    1b84:	sub	sp, fp, #8
    1b88:	pop	{r4, r5, fp, pc}
    1b8c:	movw	r0, #0
    1b90:	movw	r1, #0
    1b94:	movw	r3, #0
    1b98:	movw	r2, #927	; 0x39f
    1b9c:	movt	r0, #0
    1ba0:	b	1bb8 <coda_mem_char_new+0x70>
    1ba4:	movw	r0, #0
    1ba8:	movw	r1, #0
    1bac:	movw	r3, #0
    1bb0:	mov	r2, #928	; 0x3a0
    1bb4:	movt	r0, #0
    1bb8:	movt	r1, #0
    1bbc:	movt	r3, #0
    1bc0:	bl	0 <__assert_fail>

00001bc4 <coda_mem_raw_new>:
    1bc4:	push	{fp, lr}
    1bc8:	mov	fp, sp
    1bcc:	ldr	ip, [r0, #8]
    1bd0:	cmp	ip, #5
    1bd4:	bne	1be0 <coda_mem_raw_new+0x1c>
    1bd8:	pop	{fp, lr}
    1bdc:	b	1394 <coda_mem_data_new>
    1be0:	movw	r0, #0
    1be4:	movw	r1, #0
    1be8:	movw	r3, #0
    1bec:	movw	r2, #943	; 0x3af
    1bf0:	movt	r0, #0
    1bf4:	movt	r1, #0
    1bf8:	movt	r3, #0
    1bfc:	bl	0 <__assert_fail>

00001c00 <coda_mem_time_new>:
    1c00:	push	{r4, r5, r6, r7, fp, lr}
    1c04:	add	fp, sp, #16
    1c08:	sub	sp, sp, #8
    1c0c:	cmp	r0, #0
    1c10:	beq	1c60 <coda_mem_time_new+0x60>
    1c14:	mov	r5, r0
    1c18:	ldr	r0, [r0, #8]
    1c1c:	cmp	r0, #6
    1c20:	bne	1c78 <coda_mem_time_new+0x78>
    1c24:	ldr	r0, [r5, #40]	; 0x28
    1c28:	cmp	r0, #2
    1c2c:	bne	1c90 <coda_mem_time_new+0x90>
    1c30:	mov	r6, r1
    1c34:	ldr	r0, [r2, #4]
    1c38:	ldr	r1, [r5, #44]	; 0x2c
    1c3c:	mov	r7, r2
    1c40:	cmp	r1, r0
    1c44:	beq	1cbc <coda_mem_time_new+0xbc>
    1c48:	movw	r1, #0
    1c4c:	movw	r2, #0
    1c50:	mvn	r0, #99	; 0x63
    1c54:	movw	r3, #970	; 0x3ca
    1c58:	movt	r1, #0
    1c5c:	b	1ca4 <coda_mem_time_new+0xa4>
    1c60:	movw	r1, #0
    1c64:	movw	r2, #0
    1c68:	mvn	r0, #99	; 0x63
    1c6c:	movw	r3, #954	; 0x3ba
    1c70:	movt	r1, #0
    1c74:	b	1ca4 <coda_mem_time_new+0xa4>
    1c78:	movw	r1, #0
    1c7c:	movw	r2, #0
    1c80:	mvn	r0, #99	; 0x63
    1c84:	movw	r3, #959	; 0x3bf
    1c88:	movt	r1, #0
    1c8c:	b	1ca4 <coda_mem_time_new+0xa4>
    1c90:	movw	r1, #0
    1c94:	movw	r2, #0
    1c98:	mvn	r0, #99	; 0x63
    1c9c:	mov	r3, #964	; 0x3c4
    1ca0:	movt	r1, #0
    1ca4:	movt	r2, #0
    1ca8:	bl	0 <coda_set_error>
    1cac:	mov	r4, #0
    1cb0:	mov	r0, r4
    1cb4:	sub	sp, fp, #16
    1cb8:	pop	{r4, r5, r6, r7, fp, pc}
    1cbc:	mov	r0, #20
    1cc0:	bl	0 <malloc>
    1cc4:	cmp	r0, #0
    1cc8:	beq	1d24 <coda_mem_time_new+0x124>
    1ccc:	ldr	r1, [r5, #4]
    1cd0:	mov	r4, r0
    1cd4:	mov	r0, #100	; 0x64
    1cd8:	cmp	r6, #0
    1cdc:	add	r1, r1, #1
    1ce0:	str	r1, [r5, #4]
    1ce4:	stm	r4, {r0, r5}
    1ce8:	mov	r1, #3
    1cec:	add	r0, r4, #8
    1cf0:	stm	r0, {r1, r6, r7}
    1cf4:	bne	1cb0 <coda_mem_time_new+0xb0>
    1cf8:	ldr	r0, [r5, #36]	; 0x24
    1cfc:	cmp	r0, #0
    1d00:	beq	1cb0 <coda_mem_time_new+0xb0>
    1d04:	mov	r1, #0
    1d08:	bl	914 <coda_mem_record_new>
    1d0c:	cmp	r0, #0
    1d10:	str	r0, [r4, #12]
    1d14:	bne	1cb0 <coda_mem_time_new+0xb0>
    1d18:	mov	r0, r4
    1d1c:	bl	0 <coda_mem_type_delete>
    1d20:	b	1cac <coda_mem_time_new+0xac>
    1d24:	movw	r1, #0
    1d28:	movw	r3, #0
    1d2c:	movw	r0, #978	; 0x3d2
    1d30:	mov	r2, #20
    1d34:	movt	r1, #0
    1d38:	movt	r3, #0
    1d3c:	str	r0, [sp]
    1d40:	mvn	r0, #0
    1d44:	b	1ca8 <coda_mem_time_new+0xa8>

00001d48 <coda_mem_no_data_new>:
    1d48:	push	{r4, r5, fp, lr}
    1d4c:	add	fp, sp, #8
    1d50:	sub	sp, sp, #8
    1d54:	mov	r5, r0
    1d58:	mov	r0, #20
    1d5c:	bl	0 <malloc>
    1d60:	cmp	r0, #0
    1d64:	beq	1e10 <coda_mem_no_data_new+0xc8>
    1d68:	mov	r4, r0
    1d6c:	mov	r2, #100	; 0x64
    1d70:	mov	r0, #0
    1d74:	mov	r1, #3
    1d78:	str	r2, [r4]
    1d7c:	stmib	r4, {r0, r1}
    1d80:	str	r0, [r4, #12]
    1d84:	str	r0, [r4, #16]
    1d88:	mov	r0, r5
    1d8c:	bl	0 <coda_type_no_data_singleton>
    1d90:	cmp	r0, #0
    1d94:	str	r0, [r4, #4]
    1d98:	beq	1e04 <coda_mem_no_data_new+0xbc>
    1d9c:	ldr	r2, [r0, #4]
    1da0:	mov	r1, r0
    1da4:	ldr	r0, [r0, #44]	; 0x2c
    1da8:	add	r2, r2, #1
    1dac:	str	r2, [r1, #4]
    1db0:	ldr	r1, [r0, #8]
    1db4:	cmp	r1, #5
    1db8:	bne	1e44 <coda_mem_no_data_new+0xfc>
    1dbc:	mov	r1, #0
    1dc0:	mov	r2, #0
    1dc4:	mov	r3, #0
    1dc8:	str	r1, [sp]
    1dcc:	mov	r1, #0
    1dd0:	bl	1394 <coda_mem_data_new>
    1dd4:	cmp	r0, #0
    1dd8:	str	r0, [r4, #16]
    1ddc:	beq	1e04 <coda_mem_no_data_new+0xbc>
    1de0:	ldr	r0, [r4, #4]
    1de4:	ldr	r0, [r0, #36]	; 0x24
    1de8:	cmp	r0, #0
    1dec:	beq	1e38 <coda_mem_no_data_new+0xf0>
    1df0:	mov	r1, #0
    1df4:	bl	914 <coda_mem_record_new>
    1df8:	cmp	r0, #0
    1dfc:	str	r0, [r4, #12]
    1e00:	bne	1e38 <coda_mem_no_data_new+0xf0>
    1e04:	mov	r0, r4
    1e08:	bl	0 <coda_mem_type_delete>
    1e0c:	b	1e34 <coda_mem_no_data_new+0xec>
    1e10:	movw	r1, #0
    1e14:	movw	r3, #0
    1e18:	movw	r0, #1009	; 0x3f1
    1e1c:	mov	r2, #20
    1e20:	movt	r1, #0
    1e24:	movt	r3, #0
    1e28:	str	r0, [sp]
    1e2c:	mvn	r0, #0
    1e30:	bl	0 <coda_set_error>
    1e34:	mov	r4, #0
    1e38:	mov	r0, r4
    1e3c:	sub	sp, fp, #8
    1e40:	pop	{r4, r5, fp, pc}
    1e44:	movw	r0, #0
    1e48:	movw	r1, #0
    1e4c:	movw	r3, #0
    1e50:	movw	r2, #943	; 0x3af
    1e54:	movt	r0, #0
    1e58:	movt	r1, #0
    1e5c:	movt	r3, #0
    1e60:	bl	0 <__assert_fail>
