
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-detection.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_detection_rule_entry_delete>:
       0:	push	{fp, lr}
       4:	add	fp, sp, #4
       8:	sub	sp, sp, #8
       c:	str	r0, [fp, #-8]
      10:	ldr	r3, [fp, #-8]
      14:	ldr	r3, [r3]
      18:	cmp	r3, #0
      1c:	beq	30 <coda_detection_rule_entry_delete+0x30>
      20:	ldr	r3, [fp, #-8]
      24:	ldr	r3, [r3]
      28:	mov	r0, r3
      2c:	bl	0 <free>
      30:	ldr	r3, [fp, #-8]
      34:	ldr	r3, [r3, #4]
      38:	cmp	r3, #0
      3c:	beq	50 <coda_detection_rule_entry_delete+0x50>
      40:	ldr	r3, [fp, #-8]
      44:	ldr	r3, [r3, #4]
      48:	mov	r0, r3
      4c:	bl	0 <coda_expression_delete>
      50:	ldr	r0, [fp, #-8]
      54:	bl	0 <free>
      58:	nop			; (mov r0, r0)
      5c:	sub	sp, fp, #4
      60:	pop	{fp, pc}

00000064 <coda_detection_rule_entry_new>:
      64:	push	{fp, lr}
      68:	add	fp, sp, #4
      6c:	sub	sp, sp, #32
      70:	str	r0, [fp, #-24]	; 0xffffffe8
      74:	ldr	r3, [fp, #-24]	; 0xffffffe8
      78:	cmp	r3, #0
      7c:	beq	104 <coda_detection_rule_entry_new+0xa0>
      80:	sub	r3, fp, #16
      84:	mov	r1, r3
      88:	ldr	r0, [fp, #-24]	; 0xffffffe8
      8c:	bl	0 <coda_expression_from_string>
      90:	mov	r3, r0
      94:	cmp	r3, #0
      98:	beq	a4 <coda_detection_rule_entry_new+0x40>
      9c:	mov	r3, #0
      a0:	b	1b8 <coda_detection_rule_entry_new+0x154>
      a4:	ldr	r3, [fp, #-16]
      a8:	sub	r2, fp, #12
      ac:	mov	r1, r2
      b0:	mov	r0, r3
      b4:	bl	0 <coda_expression_get_type>
      b8:	mov	r3, r0
      bc:	cmp	r3, #0
      c0:	beq	d8 <coda_detection_rule_entry_new+0x74>
      c4:	ldr	r3, [fp, #-16]
      c8:	mov	r0, r3
      cc:	bl	0 <coda_expression_delete>
      d0:	mov	r3, #0
      d4:	b	1b8 <coda_detection_rule_entry_new+0x154>
      d8:	ldr	r3, [fp, #-16]
      dc:	mov	r0, r3
      e0:	bl	0 <coda_expression_delete>
      e4:	ldr	r3, [fp, #-12]
      e8:	cmp	r3, #4
      ec:	beq	104 <coda_detection_rule_entry_new+0xa0>
      f0:	ldr	r1, [pc, #204]	; 1c4 <coda_detection_rule_entry_new+0x160>
      f4:	ldr	r0, [pc, #204]	; 1c8 <coda_detection_rule_entry_new+0x164>
      f8:	bl	0 <coda_set_error>
      fc:	mov	r3, #0
     100:	b	1b8 <coda_detection_rule_entry_new+0x154>
     104:	mov	r0, #8
     108:	bl	0 <malloc>
     10c:	mov	r3, r0
     110:	str	r3, [fp, #-8]
     114:	ldr	r3, [fp, #-8]
     118:	cmp	r3, #0
     11c:	bne	144 <coda_detection_rule_entry_new+0xe0>
     120:	mov	r3, #82	; 0x52
     124:	str	r3, [sp]
     128:	ldr	r3, [pc, #156]	; 1cc <coda_detection_rule_entry_new+0x168>
     12c:	mov	r2, #8
     130:	ldr	r1, [pc, #152]	; 1d0 <coda_detection_rule_entry_new+0x16c>
     134:	mvn	r0, #0
     138:	bl	0 <coda_set_error>
     13c:	mov	r3, #0
     140:	b	1b8 <coda_detection_rule_entry_new+0x154>
     144:	ldr	r3, [fp, #-8]
     148:	mov	r2, #0
     14c:	str	r2, [r3]
     150:	ldr	r3, [fp, #-8]
     154:	mov	r2, #0
     158:	str	r2, [r3, #4]
     15c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     160:	cmp	r3, #0
     164:	beq	1b4 <coda_detection_rule_entry_new+0x150>
     168:	ldr	r0, [fp, #-24]	; 0xffffffe8
     16c:	bl	0 <strdup>
     170:	mov	r3, r0
     174:	mov	r2, r3
     178:	ldr	r3, [fp, #-8]
     17c:	str	r2, [r3]
     180:	ldr	r3, [fp, #-8]
     184:	ldr	r3, [r3]
     188:	cmp	r3, #0
     18c:	bne	1b4 <coda_detection_rule_entry_new+0x150>
     190:	mov	r3, #94	; 0x5e
     194:	ldr	r2, [pc, #48]	; 1cc <coda_detection_rule_entry_new+0x168>
     198:	ldr	r1, [pc, #52]	; 1d4 <coda_detection_rule_entry_new+0x170>
     19c:	mvn	r0, #0
     1a0:	bl	0 <coda_set_error>
     1a4:	ldr	r0, [fp, #-8]
     1a8:	bl	0 <free>
     1ac:	mov	r3, #0
     1b0:	b	1b8 <coda_detection_rule_entry_new+0x154>
     1b4:	ldr	r3, [fp, #-8]
     1b8:	mov	r0, r3
     1bc:	sub	sp, fp, #4
     1c0:	pop	{fp, pc}
     1c4:	.word	0x00000000
     1c8:	.word	0xfffffe70
     1cc:	.word	0x00000024
     1d0:	.word	0x00000074
     1d4:	.word	0x000000ac

000001d8 <coda_detection_rule_entry_set_expression>:
     1d8:	push	{fp, lr}
     1dc:	add	fp, sp, #4
     1e0:	sub	sp, sp, #8
     1e4:	str	r0, [fp, #-8]
     1e8:	str	r1, [fp, #-12]
     1ec:	ldr	r3, [fp, #-8]
     1f0:	ldr	r3, [r3, #4]
     1f4:	cmp	r3, #0
     1f8:	beq	210 <coda_detection_rule_entry_set_expression+0x38>
     1fc:	ldr	r1, [pc, #40]	; 22c <coda_detection_rule_entry_set_expression+0x54>
     200:	ldr	r0, [pc, #40]	; 230 <coda_detection_rule_entry_set_expression+0x58>
     204:	bl	0 <coda_set_error>
     208:	mvn	r3, #0
     20c:	b	220 <coda_detection_rule_entry_set_expression+0x48>
     210:	ldr	r3, [fp, #-8]
     214:	ldr	r2, [fp, #-12]
     218:	str	r2, [r3, #4]
     21c:	mov	r3, #0
     220:	mov	r0, r3
     224:	sub	sp, fp, #4
     228:	pop	{fp, pc}
     22c:	.word	0x000000e0
     230:	.word	0xfffffe70

00000234 <coda_detection_rule_delete>:
     234:	push	{fp, lr}
     238:	add	fp, sp, #4
     23c:	sub	sp, sp, #16
     240:	str	r0, [fp, #-16]
     244:	ldr	r3, [fp, #-16]
     248:	ldr	r3, [r3, #4]
     24c:	cmp	r3, #0
     250:	beq	2d0 <coda_detection_rule_delete+0x9c>
     254:	mov	r3, #0
     258:	str	r3, [fp, #-8]
     25c:	b	2ac <coda_detection_rule_delete+0x78>
     260:	ldr	r3, [fp, #-16]
     264:	ldr	r2, [r3, #4]
     268:	ldr	r3, [fp, #-8]
     26c:	lsl	r3, r3, #2
     270:	add	r3, r2, r3
     274:	ldr	r3, [r3]
     278:	cmp	r3, #0
     27c:	beq	2a0 <coda_detection_rule_delete+0x6c>
     280:	ldr	r3, [fp, #-16]
     284:	ldr	r2, [r3, #4]
     288:	ldr	r3, [fp, #-8]
     28c:	lsl	r3, r3, #2
     290:	add	r3, r2, r3
     294:	ldr	r3, [r3]
     298:	mov	r0, r3
     29c:	bl	0 <coda_detection_rule_entry_delete>
     2a0:	ldr	r3, [fp, #-8]
     2a4:	add	r3, r3, #1
     2a8:	str	r3, [fp, #-8]
     2ac:	ldr	r3, [fp, #-16]
     2b0:	ldr	r2, [r3]
     2b4:	ldr	r3, [fp, #-8]
     2b8:	cmp	r2, r3
     2bc:	bgt	260 <coda_detection_rule_delete+0x2c>
     2c0:	ldr	r3, [fp, #-16]
     2c4:	ldr	r3, [r3, #4]
     2c8:	mov	r0, r3
     2cc:	bl	0 <free>
     2d0:	ldr	r0, [fp, #-16]
     2d4:	bl	0 <free>
     2d8:	nop			; (mov r0, r0)
     2dc:	sub	sp, fp, #4
     2e0:	pop	{fp, pc}

000002e4 <coda_detection_rule_new>:
     2e4:	push	{fp, lr}
     2e8:	add	fp, sp, #4
     2ec:	sub	sp, sp, #16
     2f0:	mov	r0, #12
     2f4:	bl	0 <malloc>
     2f8:	mov	r3, r0
     2fc:	str	r3, [fp, #-8]
     300:	ldr	r3, [fp, #-8]
     304:	cmp	r3, #0
     308:	bne	330 <coda_detection_rule_new+0x4c>
     30c:	mov	r3, #141	; 0x8d
     310:	str	r3, [sp]
     314:	ldr	r3, [pc, #72]	; 364 <coda_detection_rule_new+0x80>
     318:	mov	r2, #12
     31c:	ldr	r1, [pc, #68]	; 368 <coda_detection_rule_new+0x84>
     320:	mvn	r0, #0
     324:	bl	0 <coda_set_error>
     328:	mov	r3, #0
     32c:	b	358 <coda_detection_rule_new+0x74>
     330:	ldr	r3, [fp, #-8]
     334:	mov	r2, #0
     338:	str	r2, [r3]
     33c:	ldr	r3, [fp, #-8]
     340:	mov	r2, #0
     344:	str	r2, [r3, #4]
     348:	ldr	r3, [fp, #-8]
     34c:	mov	r2, #0
     350:	str	r2, [r3, #8]
     354:	ldr	r3, [fp, #-8]
     358:	mov	r0, r3
     35c:	sub	sp, fp, #4
     360:	pop	{fp, pc}
     364:	.word	0x00000024
     368:	.word	0x00000074

0000036c <coda_detection_rule_add_entry>:
     36c:	push	{fp, lr}
     370:	add	fp, sp, #4
     374:	sub	sp, sp, #24
     378:	str	r0, [fp, #-16]
     37c:	str	r1, [fp, #-20]	; 0xffffffec
     380:	ldr	r3, [fp, #-20]	; 0xffffffec
     384:	ldr	r3, [r3]
     388:	cmp	r3, #0
     38c:	bne	3b4 <coda_detection_rule_add_entry+0x48>
     390:	ldr	r3, [fp, #-20]	; 0xffffffec
     394:	ldr	r3, [r3, #4]
     398:	cmp	r3, #0
     39c:	bne	3b4 <coda_detection_rule_add_entry+0x48>
     3a0:	ldr	r1, [pc, #196]	; 46c <coda_detection_rule_add_entry+0x100>
     3a4:	ldr	r0, [pc, #196]	; 470 <coda_detection_rule_add_entry+0x104>
     3a8:	bl	0 <coda_set_error>
     3ac:	mvn	r3, #0
     3b0:	b	460 <coda_detection_rule_add_entry+0xf4>
     3b4:	ldr	r3, [fp, #-16]
     3b8:	ldr	r2, [r3, #4]
     3bc:	ldr	r3, [fp, #-16]
     3c0:	ldr	r3, [r3]
     3c4:	add	r3, r3, #1
     3c8:	lsl	r3, r3, #2
     3cc:	mov	r1, r3
     3d0:	mov	r0, r2
     3d4:	bl	0 <realloc>
     3d8:	str	r0, [fp, #-8]
     3dc:	ldr	r3, [fp, #-8]
     3e0:	cmp	r3, #0
     3e4:	bne	418 <coda_detection_rule_add_entry+0xac>
     3e8:	ldr	r3, [fp, #-16]
     3ec:	ldr	r3, [r3]
     3f0:	add	r3, r3, #1
     3f4:	lsl	r2, r3, #2
     3f8:	mov	r3, #165	; 0xa5
     3fc:	str	r3, [sp]
     400:	ldr	r3, [pc, #108]	; 474 <coda_detection_rule_add_entry+0x108>
     404:	ldr	r1, [pc, #108]	; 478 <coda_detection_rule_add_entry+0x10c>
     408:	mvn	r0, #0
     40c:	bl	0 <coda_set_error>
     410:	mvn	r3, #0
     414:	b	460 <coda_detection_rule_add_entry+0xf4>
     418:	ldr	r3, [fp, #-16]
     41c:	ldr	r2, [fp, #-8]
     420:	str	r2, [r3, #4]
     424:	ldr	r3, [fp, #-16]
     428:	ldr	r3, [r3]
     42c:	add	r2, r3, #1
     430:	ldr	r3, [fp, #-16]
     434:	str	r2, [r3]
     438:	ldr	r3, [fp, #-16]
     43c:	ldr	r2, [r3, #4]
     440:	ldr	r3, [fp, #-16]
     444:	ldr	r3, [r3]
     448:	sub	r3, r3, #-1073741823	; 0xc0000001
     44c:	lsl	r3, r3, #2
     450:	add	r3, r2, r3
     454:	ldr	r2, [fp, #-20]	; 0xffffffec
     458:	str	r2, [r3]
     45c:	mov	r3, #0
     460:	mov	r0, r3
     464:	sub	sp, fp, #4
     468:	pop	{fp, pc}
     46c:	.word	0x0000010c
     470:	.word	0xfffffe70
     474:	.word	0x00000024
     478:	.word	0x00000074

0000047c <delete_detection_node>:
     47c:	push	{fp, lr}
     480:	add	fp, sp, #4
     484:	sub	sp, sp, #16
     488:	str	r0, [fp, #-16]
     48c:	ldr	r3, [fp, #-16]
     490:	ldr	r3, [r3]
     494:	cmp	r3, #0
     498:	beq	4ac <delete_detection_node+0x30>
     49c:	ldr	r3, [fp, #-16]
     4a0:	ldr	r3, [r3]
     4a4:	mov	r0, r3
     4a8:	bl	0 <free>
     4ac:	ldr	r3, [fp, #-16]
     4b0:	ldr	r3, [r3, #16]
     4b4:	cmp	r3, #0
     4b8:	beq	518 <delete_detection_node+0x9c>
     4bc:	mov	r3, #0
     4c0:	str	r3, [fp, #-8]
     4c4:	b	4f4 <delete_detection_node+0x78>
     4c8:	ldr	r3, [fp, #-16]
     4cc:	ldr	r2, [r3, #16]
     4d0:	ldr	r3, [fp, #-8]
     4d4:	lsl	r3, r3, #2
     4d8:	add	r3, r2, r3
     4dc:	ldr	r3, [r3]
     4e0:	mov	r0, r3
     4e4:	bl	47c <delete_detection_node>
     4e8:	ldr	r3, [fp, #-8]
     4ec:	add	r3, r3, #1
     4f0:	str	r3, [fp, #-8]
     4f4:	ldr	r3, [fp, #-16]
     4f8:	ldr	r2, [r3, #12]
     4fc:	ldr	r3, [fp, #-8]
     500:	cmp	r2, r3
     504:	bgt	4c8 <delete_detection_node+0x4c>
     508:	ldr	r3, [fp, #-16]
     50c:	ldr	r3, [r3, #16]
     510:	mov	r0, r3
     514:	bl	0 <free>
     518:	ldr	r0, [fp, #-16]
     51c:	bl	0 <free>
     520:	nop			; (mov r0, r0)
     524:	sub	sp, fp, #4
     528:	pop	{fp, pc}

0000052c <detection_node_new>:
     52c:	push	{fp, lr}
     530:	add	fp, sp, #4
     534:	sub	sp, sp, #16
     538:	mov	r0, #20
     53c:	bl	0 <malloc>
     540:	mov	r3, r0
     544:	str	r3, [fp, #-8]
     548:	ldr	r3, [fp, #-8]
     54c:	cmp	r3, #0
     550:	bne	578 <detection_node_new+0x4c>
     554:	mov	r3, #202	; 0xca
     558:	str	r3, [sp]
     55c:	ldr	r3, [pc, #96]	; 5c4 <detection_node_new+0x98>
     560:	mov	r2, #20
     564:	ldr	r1, [pc, #92]	; 5c8 <detection_node_new+0x9c>
     568:	mvn	r0, #0
     56c:	bl	0 <coda_set_error>
     570:	mov	r3, #0
     574:	b	5b8 <detection_node_new+0x8c>
     578:	ldr	r3, [fp, #-8]
     57c:	mov	r2, #0
     580:	str	r2, [r3]
     584:	ldr	r3, [fp, #-8]
     588:	mov	r2, #0
     58c:	str	r2, [r3, #4]
     590:	ldr	r3, [fp, #-8]
     594:	mov	r2, #0
     598:	str	r2, [r3, #8]
     59c:	ldr	r3, [fp, #-8]
     5a0:	mov	r2, #0
     5a4:	str	r2, [r3, #12]
     5a8:	ldr	r3, [fp, #-8]
     5ac:	mov	r2, #0
     5b0:	str	r2, [r3, #16]
     5b4:	ldr	r3, [fp, #-8]
     5b8:	mov	r0, r3
     5bc:	sub	sp, fp, #4
     5c0:	pop	{fp, pc}
     5c4:	.word	0x00000024
     5c8:	.word	0x00000074

000005cc <detection_node_add_node>:
     5cc:	push	{fp, lr}
     5d0:	add	fp, sp, #4
     5d4:	sub	sp, sp, #32
     5d8:	str	r0, [fp, #-24]	; 0xffffffe8
     5dc:	str	r1, [fp, #-28]	; 0xffffffe4
     5e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5e4:	ldr	r3, [r3, #12]
     5e8:	and	r3, r3, #15
     5ec:	cmp	r3, #0
     5f0:	bne	664 <detection_node_add_node+0x98>
     5f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     5f8:	ldr	r2, [r3, #16]
     5fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     600:	ldr	r3, [r3, #12]
     604:	add	r3, r3, #16
     608:	lsl	r3, r3, #2
     60c:	mov	r1, r3
     610:	mov	r0, r2
     614:	bl	0 <realloc>
     618:	str	r0, [fp, #-12]
     61c:	ldr	r3, [fp, #-12]
     620:	cmp	r3, #0
     624:	bne	658 <detection_node_add_node+0x8c>
     628:	ldr	r3, [fp, #-24]	; 0xffffffe8
     62c:	ldr	r3, [r3, #12]
     630:	add	r3, r3, #16
     634:	lsl	r2, r3, #2
     638:	mov	r3, #226	; 0xe2
     63c:	str	r3, [sp]
     640:	ldr	r3, [pc, #328]	; 790 <detection_node_add_node+0x1c4>
     644:	ldr	r1, [pc, #328]	; 794 <detection_node_add_node+0x1c8>
     648:	mvn	r0, #0
     64c:	bl	0 <coda_set_error>
     650:	mvn	r3, #0
     654:	b	784 <detection_node_add_node+0x1b8>
     658:	ldr	r3, [fp, #-24]	; 0xffffffe8
     65c:	ldr	r2, [fp, #-12]
     660:	str	r2, [r3, #16]
     664:	ldr	r3, [fp, #-24]	; 0xffffffe8
     668:	ldr	r2, [r3, #16]
     66c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     670:	ldr	r3, [r3, #12]
     674:	lsl	r3, r3, #2
     678:	add	r3, r2, r3
     67c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     680:	str	r2, [r3]
     684:	ldr	r3, [fp, #-24]	; 0xffffffe8
     688:	ldr	r3, [r3, #12]
     68c:	add	r2, r3, #1
     690:	ldr	r3, [fp, #-24]	; 0xffffffe8
     694:	str	r2, [r3, #12]
     698:	ldr	r3, [fp, #-24]	; 0xffffffe8
     69c:	ldr	r3, [r3, #12]
     6a0:	sub	r3, r3, #1
     6a4:	str	r3, [fp, #-8]
     6a8:	b	728 <detection_node_add_node+0x15c>
     6ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6b0:	ldr	r2, [r3, #16]
     6b4:	ldr	r3, [fp, #-8]
     6b8:	lsl	r3, r3, #2
     6bc:	add	r3, r2, r3
     6c0:	ldr	r3, [r3]
     6c4:	str	r3, [fp, #-16]
     6c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     6cc:	ldr	r2, [r3, #16]
     6d0:	ldr	r3, [fp, #-8]
     6d4:	lsl	r3, r3, #2
     6d8:	add	r3, r2, r3
     6dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     6e0:	ldr	r1, [r2, #16]
     6e4:	ldr	r2, [fp, #-8]
     6e8:	sub	r2, r2, #-1073741823	; 0xc0000001
     6ec:	lsl	r2, r2, #2
     6f0:	add	r2, r1, r2
     6f4:	ldr	r2, [r2]
     6f8:	str	r2, [r3]
     6fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     700:	ldr	r2, [r3, #16]
     704:	ldr	r3, [fp, #-8]
     708:	sub	r3, r3, #-1073741823	; 0xc0000001
     70c:	lsl	r3, r3, #2
     710:	add	r3, r2, r3
     714:	ldr	r2, [fp, #-16]
     718:	str	r2, [r3]
     71c:	ldr	r3, [fp, #-8]
     720:	sub	r3, r3, #1
     724:	str	r3, [fp, #-8]
     728:	ldr	r3, [fp, #-8]
     72c:	cmp	r3, #0
     730:	ble	780 <detection_node_add_node+0x1b4>
     734:	ldr	r3, [fp, #-24]	; 0xffffffe8
     738:	ldr	r2, [r3, #16]
     73c:	ldr	r3, [fp, #-8]
     740:	lsl	r3, r3, #2
     744:	add	r3, r2, r3
     748:	ldr	r3, [r3]
     74c:	ldr	r3, [r3]
     750:	cmp	r3, #0
     754:	beq	780 <detection_node_add_node+0x1b4>
     758:	ldr	r3, [fp, #-24]	; 0xffffffe8
     75c:	ldr	r2, [r3, #16]
     760:	ldr	r3, [fp, #-8]
     764:	sub	r3, r3, #-1073741823	; 0xc0000001
     768:	lsl	r3, r3, #2
     76c:	add	r3, r2, r3
     770:	ldr	r3, [r3]
     774:	ldr	r3, [r3, #4]
     778:	cmp	r3, #0
     77c:	bne	6ac <detection_node_add_node+0xe0>
     780:	mov	r3, #0
     784:	mov	r0, r3
     788:	sub	sp, fp, #4
     78c:	pop	{fp, pc}
     790:	.word	0x00000024
     794:	.word	0x00000074

00000798 <pathcmp>:
     798:	push	{fp}		; (str fp, [sp, #-4]!)
     79c:	add	fp, sp, #0
     7a0:	sub	sp, sp, #20
     7a4:	str	r0, [fp, #-8]
     7a8:	str	r1, [fp, #-12]
     7ac:	str	r2, [fp, #-16]
     7b0:	ldr	r3, [fp, #-16]
     7b4:	mov	r2, #0
     7b8:	str	r2, [r3]
     7bc:	b	7d4 <pathcmp+0x3c>
     7c0:	ldr	r3, [fp, #-16]
     7c4:	ldr	r3, [r3]
     7c8:	add	r2, r3, #1
     7cc:	ldr	r3, [fp, #-16]
     7d0:	str	r2, [r3]
     7d4:	ldr	r3, [fp, #-16]
     7d8:	ldr	r3, [r3]
     7dc:	mov	r2, r3
     7e0:	ldr	r3, [fp, #-8]
     7e4:	add	r3, r3, r2
     7e8:	ldrb	r3, [r3]
     7ec:	cmp	r3, #0
     7f0:	beq	82c <pathcmp+0x94>
     7f4:	ldr	r3, [fp, #-16]
     7f8:	ldr	r3, [r3]
     7fc:	mov	r2, r3
     800:	ldr	r3, [fp, #-8]
     804:	add	r3, r3, r2
     808:	ldrb	r2, [r3]
     80c:	ldr	r3, [fp, #-16]
     810:	ldr	r3, [r3]
     814:	mov	r1, r3
     818:	ldr	r3, [fp, #-12]
     81c:	add	r3, r3, r1
     820:	ldrb	r3, [r3]
     824:	cmp	r2, r3
     828:	beq	7c0 <pathcmp+0x28>
     82c:	ldr	r3, [fp, #-16]
     830:	ldr	r3, [r3]
     834:	mov	r2, r3
     838:	ldr	r3, [fp, #-8]
     83c:	add	r3, r3, r2
     840:	ldrb	r2, [r3]
     844:	ldr	r3, [fp, #-16]
     848:	ldr	r3, [r3]
     84c:	mov	r1, r3
     850:	ldr	r3, [fp, #-12]
     854:	add	r3, r3, r1
     858:	ldrb	r3, [r3]
     85c:	cmp	r2, r3
     860:	bne	86c <pathcmp+0xd4>
     864:	mov	r3, #0
     868:	b	870 <pathcmp+0xd8>
     86c:	mov	r3, #1
     870:	mov	r0, r3
     874:	add	sp, fp, #0
     878:	pop	{fp}		; (ldr fp, [sp], #4)
     87c:	bx	lr

00000880 <get_node_for_entry>:
     880:	push	{fp, lr}
     884:	add	fp, sp, #4
     888:	sub	sp, sp, #48	; 0x30
     88c:	str	r0, [fp, #-32]	; 0xffffffe0
     890:	str	r1, [fp, #-36]	; 0xffffffdc
     894:	str	r2, [fp, #-40]	; 0xffffffd8
     898:	ldr	r3, [fp, #-36]	; 0xffffffdc
     89c:	cmp	r3, #0
     8a0:	beq	8bc <get_node_for_entry+0x3c>
     8a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8a8:	ldrb	r3, [r3]
     8ac:	cmp	r3, #0
     8b0:	bne	8bc <get_node_for_entry+0x3c>
     8b4:	mov	r3, #0
     8b8:	str	r3, [fp, #-36]	; 0xffffffdc
     8bc:	mov	r3, #0
     8c0:	str	r3, [fp, #-8]
     8c4:	b	ecc <get_node_for_entry+0x64c>
     8c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     8cc:	cmp	r3, #0
     8d0:	beq	e3c <get_node_for_entry+0x5bc>
     8d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8d8:	ldr	r2, [r3, #16]
     8dc:	ldr	r3, [fp, #-8]
     8e0:	lsl	r3, r3, #2
     8e4:	add	r3, r2, r3
     8e8:	ldr	r3, [r3]
     8ec:	ldr	r3, [r3]
     8f0:	cmp	r3, #0
     8f4:	beq	eb4 <get_node_for_entry+0x634>
     8f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8fc:	ldr	r2, [r3, #16]
     900:	ldr	r3, [fp, #-8]
     904:	lsl	r3, r3, #2
     908:	add	r3, r2, r3
     90c:	ldr	r3, [r3]
     910:	ldr	r3, [r3]
     914:	sub	r2, fp, #28
     918:	ldr	r1, [fp, #-36]	; 0xffffffdc
     91c:	mov	r0, r3
     920:	bl	798 <pathcmp>
     924:	mov	r3, r0
     928:	cmp	r3, #0
     92c:	bne	98c <get_node_for_entry+0x10c>
     930:	ldr	r3, [fp, #-40]	; 0xffffffd8
     934:	ldr	r3, [r3, #4]
     938:	cmp	r3, #0
     93c:	beq	970 <get_node_for_entry+0xf0>
     940:	ldr	r3, [fp, #-32]	; 0xffffffe0
     944:	ldr	r2, [r3, #16]
     948:	ldr	r3, [fp, #-8]
     94c:	lsl	r3, r3, #2
     950:	add	r3, r2, r3
     954:	ldr	r3, [r3]
     958:	ldr	r2, [fp, #-40]	; 0xffffffd8
     95c:	mov	r1, #0
     960:	mov	r0, r3
     964:	bl	880 <get_node_for_entry>
     968:	mov	r3, r0
     96c:	b	fbc <get_node_for_entry+0x73c>
     970:	ldr	r3, [fp, #-32]	; 0xffffffe0
     974:	ldr	r2, [r3, #16]
     978:	ldr	r3, [fp, #-8]
     97c:	lsl	r3, r3, #2
     980:	add	r3, r2, r3
     984:	ldr	r3, [r3]
     988:	b	fbc <get_node_for_entry+0x73c>
     98c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     990:	ldr	r2, [r3, #16]
     994:	ldr	r3, [fp, #-8]
     998:	lsl	r3, r3, #2
     99c:	add	r3, r2, r3
     9a0:	ldr	r3, [r3]
     9a4:	ldr	r3, [r3]
     9a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
     9ac:	add	r3, r3, r2
     9b0:	ldrb	r3, [r3]
     9b4:	cmp	r3, #0
     9b8:	bne	a78 <get_node_for_entry+0x1f8>
     9bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9c0:	mov	r2, r3
     9c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9c8:	add	r3, r3, r2
     9cc:	ldrb	r3, [r3]
     9d0:	cmp	r3, #47	; 0x2f
     9d4:	beq	a10 <get_node_for_entry+0x190>
     9d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9dc:	mov	r2, r3
     9e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9e4:	add	r3, r3, r2
     9e8:	ldrb	r3, [r3]
     9ec:	cmp	r3, #64	; 0x40
     9f0:	beq	a10 <get_node_for_entry+0x190>
     9f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9f8:	mov	r2, r3
     9fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a00:	add	r3, r3, r2
     a04:	ldrb	r3, [r3]
     a08:	cmp	r3, #91	; 0x5b
     a0c:	bne	ec0 <get_node_for_entry+0x640>
     a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a14:	ldr	r2, [r3, #16]
     a18:	ldr	r3, [fp, #-8]
     a1c:	lsl	r3, r3, #2
     a20:	add	r3, r2, r3
     a24:	ldr	r0, [r3]
     a28:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a2c:	mov	r2, r3
     a30:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a34:	add	r3, r3, r2
     a38:	ldrb	r3, [r3]
     a3c:	cmp	r3, #47	; 0x2f
     a40:	moveq	r3, #1
     a44:	movne	r3, #0
     a48:	uxtb	r3, r3
     a4c:	mov	r2, r3
     a50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a54:	add	r3, r2, r3
     a58:	mov	r2, r3
     a5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     a60:	add	r3, r3, r2
     a64:	ldr	r2, [fp, #-40]	; 0xffffffd8
     a68:	mov	r1, r3
     a6c:	bl	880 <get_node_for_entry>
     a70:	mov	r3, r0
     a74:	b	fbc <get_node_for_entry+0x73c>
     a78:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a7c:	cmp	r3, #1
     a80:	ble	ac8 <get_node_for_entry+0x248>
     a84:	ldr	r3, [fp, #-28]	; 0xffffffe4
     a88:	sub	r3, r3, #1
     a8c:	ldr	r2, [fp, #-36]	; 0xffffffdc
     a90:	add	r3, r2, r3
     a94:	ldrb	r3, [r3]
     a98:	cmp	r3, #47	; 0x2f
     a9c:	beq	abc <get_node_for_entry+0x23c>
     aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     aa4:	sub	r3, r3, #1
     aa8:	ldr	r2, [fp, #-36]	; 0xffffffdc
     aac:	add	r3, r2, r3
     ab0:	ldrb	r3, [r3]
     ab4:	cmp	r3, #91	; 0x5b
     ab8:	bne	ac8 <get_node_for_entry+0x248>
     abc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ac0:	sub	r3, r3, #1
     ac4:	str	r3, [fp, #-28]	; 0xffffffe4
     ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     acc:	cmp	r3, #0
     ad0:	ble	ec0 <get_node_for_entry+0x640>
     ad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ad8:	mov	r2, r3
     adc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     ae0:	add	r3, r3, r2
     ae4:	ldrb	r3, [r3]
     ae8:	cmp	r3, #47	; 0x2f
     aec:	beq	b28 <get_node_for_entry+0x2a8>
     af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     af4:	mov	r2, r3
     af8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     afc:	add	r3, r3, r2
     b00:	ldrb	r3, [r3]
     b04:	cmp	r3, #64	; 0x40
     b08:	beq	b28 <get_node_for_entry+0x2a8>
     b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     b10:	mov	r2, r3
     b14:	ldr	r3, [fp, #-36]	; 0xffffffdc
     b18:	add	r3, r3, r2
     b1c:	ldrb	r3, [r3]
     b20:	cmp	r3, #91	; 0x5b
     b24:	bne	ec0 <get_node_for_entry+0x640>
     b28:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b2c:	ldr	r2, [r3, #16]
     b30:	ldr	r3, [fp, #-8]
     b34:	lsl	r3, r3, #2
     b38:	add	r3, r2, r3
     b3c:	ldr	r3, [r3]
     b40:	ldr	r3, [r3]
     b44:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b48:	add	r3, r3, r2
     b4c:	ldrb	r3, [r3]
     b50:	cmp	r3, #47	; 0x2f
     b54:	beq	bb8 <get_node_for_entry+0x338>
     b58:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b5c:	ldr	r2, [r3, #16]
     b60:	ldr	r3, [fp, #-8]
     b64:	lsl	r3, r3, #2
     b68:	add	r3, r2, r3
     b6c:	ldr	r3, [r3]
     b70:	ldr	r3, [r3]
     b74:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b78:	add	r3, r3, r2
     b7c:	ldrb	r3, [r3]
     b80:	cmp	r3, #64	; 0x40
     b84:	beq	bb8 <get_node_for_entry+0x338>
     b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b8c:	ldr	r2, [r3, #16]
     b90:	ldr	r3, [fp, #-8]
     b94:	lsl	r3, r3, #2
     b98:	add	r3, r2, r3
     b9c:	ldr	r3, [r3]
     ba0:	ldr	r3, [r3]
     ba4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     ba8:	add	r3, r3, r2
     bac:	ldrb	r3, [r3]
     bb0:	cmp	r3, #91	; 0x5b
     bb4:	bne	ec0 <get_node_for_entry+0x640>
     bb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     bbc:	ldr	r2, [r3, #16]
     bc0:	ldr	r3, [fp, #-8]
     bc4:	lsl	r3, r3, #2
     bc8:	add	r3, r2, r3
     bcc:	ldr	r3, [r3]
     bd0:	ldr	r3, [r3]
     bd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     bd8:	add	r3, r3, r2
     bdc:	ldrb	r3, [r3]
     be0:	cmp	r3, #47	; 0x2f
     be4:	moveq	r3, #1
     be8:	movne	r3, #0
     bec:	uxtb	r3, r3
     bf0:	mov	r2, r3
     bf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     bf8:	add	r3, r2, r3
     bfc:	str	r3, [fp, #-16]
     c00:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c04:	mov	r2, r3
     c08:	ldr	r3, [fp, #-36]	; 0xffffffdc
     c0c:	add	r3, r3, r2
     c10:	ldrb	r3, [r3]
     c14:	cmp	r3, #47	; 0x2f
     c18:	moveq	r3, #1
     c1c:	movne	r3, #0
     c20:	uxtb	r3, r3
     c24:	mov	r2, r3
     c28:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c2c:	add	r3, r2, r3
     c30:	str	r3, [fp, #-20]	; 0xffffffec
     c34:	bl	52c <detection_node_new>
     c38:	str	r0, [fp, #-24]	; 0xffffffe8
     c3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c40:	cmp	r3, #0
     c44:	bne	c50 <get_node_for_entry+0x3d0>
     c48:	mov	r3, #0
     c4c:	b	fbc <get_node_for_entry+0x73c>
     c50:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c54:	add	r3, r3, #1
     c58:	mov	r0, r3
     c5c:	bl	0 <malloc>
     c60:	mov	r3, r0
     c64:	mov	r2, r3
     c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c6c:	str	r2, [r3]
     c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c74:	ldr	r3, [r3]
     c78:	cmp	r3, #0
     c7c:	bne	ca4 <get_node_for_entry+0x424>
     c80:	ldr	r2, [fp, #-28]	; 0xffffffe4
     c84:	ldr	r3, [pc, #828]	; fc8 <get_node_for_entry+0x748>
     c88:	str	r3, [sp]
     c8c:	ldr	r3, [pc, #824]	; fcc <get_node_for_entry+0x74c>
     c90:	ldr	r1, [pc, #824]	; fd0 <get_node_for_entry+0x750>
     c94:	mvn	r0, #0
     c98:	bl	0 <coda_set_error>
     c9c:	mov	r3, #0
     ca0:	b	fbc <get_node_for_entry+0x73c>
     ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca8:	ldr	r3, [r3]
     cac:	ldr	r2, [fp, #-28]	; 0xffffffe4
     cb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     cb4:	mov	r0, r3
     cb8:	bl	0 <memcpy>
     cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cc0:	ldr	r3, [r3]
     cc4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     cc8:	add	r3, r3, r2
     ccc:	mov	r2, #0
     cd0:	strb	r2, [r3]
     cd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     cd8:	ldr	r2, [r3, #16]
     cdc:	ldr	r3, [fp, #-8]
     ce0:	lsl	r3, r3, #2
     ce4:	add	r3, r2, r3
     ce8:	ldr	r3, [r3]
     cec:	mov	r1, r3
     cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cf4:	bl	5cc <detection_node_add_node>
     cf8:	mov	r3, r0
     cfc:	cmp	r3, #0
     d00:	beq	d14 <get_node_for_entry+0x494>
     d04:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d08:	bl	47c <delete_detection_node>
     d0c:	mov	r3, #0
     d10:	b	fbc <get_node_for_entry+0x73c>
     d14:	ldr	r3, [fp, #-16]
     d18:	str	r3, [fp, #-12]
     d1c:	b	d84 <get_node_for_entry+0x504>
     d20:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d24:	ldr	r2, [r3, #16]
     d28:	ldr	r3, [fp, #-8]
     d2c:	lsl	r3, r3, #2
     d30:	add	r3, r2, r3
     d34:	ldr	r3, [r3]
     d38:	ldr	r3, [r3]
     d3c:	ldr	r1, [fp, #-12]
     d40:	ldr	r2, [fp, #-16]
     d44:	sub	r2, r1, r2
     d48:	add	r3, r3, r2
     d4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     d50:	ldr	r1, [r2, #16]
     d54:	ldr	r2, [fp, #-8]
     d58:	lsl	r2, r2, #2
     d5c:	add	r2, r1, r2
     d60:	ldr	r2, [r2]
     d64:	ldr	r1, [r2]
     d68:	ldr	r2, [fp, #-12]
     d6c:	add	r2, r1, r2
     d70:	ldrb	r2, [r2]
     d74:	strb	r2, [r3]
     d78:	ldr	r3, [fp, #-12]
     d7c:	add	r3, r3, #1
     d80:	str	r3, [fp, #-12]
     d84:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d88:	ldr	r2, [r3, #16]
     d8c:	ldr	r3, [fp, #-8]
     d90:	lsl	r3, r3, #2
     d94:	add	r3, r2, r3
     d98:	ldr	r3, [r3]
     d9c:	ldr	r2, [r3]
     da0:	ldr	r3, [fp, #-12]
     da4:	add	r3, r2, r3
     da8:	ldrb	r3, [r3]
     dac:	cmp	r3, #0
     db0:	bne	d20 <get_node_for_entry+0x4a0>
     db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     db8:	ldr	r2, [r3, #16]
     dbc:	ldr	r3, [fp, #-8]
     dc0:	lsl	r3, r3, #2
     dc4:	add	r3, r2, r3
     dc8:	ldr	r3, [r3]
     dcc:	ldr	r3, [r3]
     dd0:	ldr	r1, [fp, #-12]
     dd4:	ldr	r2, [fp, #-16]
     dd8:	sub	r2, r1, r2
     ddc:	add	r3, r3, r2
     de0:	mov	r2, #0
     de4:	strb	r2, [r3]
     de8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     dec:	ldr	r2, [r3, #16]
     df0:	ldr	r3, [fp, #-8]
     df4:	lsl	r3, r3, #2
     df8:	add	r3, r2, r3
     dfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
     e00:	str	r2, [r3]
     e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e08:	ldr	r2, [r3, #16]
     e0c:	ldr	r3, [fp, #-8]
     e10:	lsl	r3, r3, #2
     e14:	add	r3, r2, r3
     e18:	ldr	r0, [r3]
     e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
     e20:	ldr	r2, [fp, #-36]	; 0xffffffdc
     e24:	add	r3, r2, r3
     e28:	ldr	r2, [fp, #-40]	; 0xffffffd8
     e2c:	mov	r1, r3
     e30:	bl	880 <get_node_for_entry>
     e34:	mov	r3, r0
     e38:	b	fbc <get_node_for_entry+0x73c>
     e3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e40:	ldr	r2, [r3, #16]
     e44:	ldr	r3, [fp, #-8]
     e48:	lsl	r3, r3, #2
     e4c:	add	r3, r2, r3
     e50:	ldr	r3, [r3]
     e54:	ldr	r3, [r3]
     e58:	cmp	r3, #0
     e5c:	bne	ebc <get_node_for_entry+0x63c>
     e60:	ldr	r3, [fp, #-40]	; 0xffffffd8
     e64:	ldr	r0, [r3, #4]
     e68:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e6c:	ldr	r2, [r3, #16]
     e70:	ldr	r3, [fp, #-8]
     e74:	lsl	r3, r3, #2
     e78:	add	r3, r2, r3
     e7c:	ldr	r3, [r3]
     e80:	ldr	r3, [r3, #4]
     e84:	mov	r1, r3
     e88:	bl	0 <coda_expression_is_equal>
     e8c:	mov	r3, r0
     e90:	cmp	r3, #0
     e94:	beq	ec0 <get_node_for_entry+0x640>
     e98:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e9c:	ldr	r2, [r3, #16]
     ea0:	ldr	r3, [fp, #-8]
     ea4:	lsl	r3, r3, #2
     ea8:	add	r3, r2, r3
     eac:	ldr	r3, [r3]
     eb0:	b	fbc <get_node_for_entry+0x73c>
     eb4:	nop			; (mov r0, r0)
     eb8:	b	ec0 <get_node_for_entry+0x640>
     ebc:	nop			; (mov r0, r0)
     ec0:	ldr	r3, [fp, #-8]
     ec4:	add	r3, r3, #1
     ec8:	str	r3, [fp, #-8]
     ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ed0:	ldr	r2, [r3, #12]
     ed4:	ldr	r3, [fp, #-8]
     ed8:	cmp	r2, r3
     edc:	bgt	8c8 <get_node_for_entry+0x48>
     ee0:	bl	52c <detection_node_new>
     ee4:	str	r0, [fp, #-24]	; 0xffffffe8
     ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     eec:	cmp	r3, #0
     ef0:	bne	efc <get_node_for_entry+0x67c>
     ef4:	mov	r3, #0
     ef8:	b	fbc <get_node_for_entry+0x73c>
     efc:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f00:	cmp	r3, #0
     f04:	beq	f4c <get_node_for_entry+0x6cc>
     f08:	ldr	r0, [fp, #-36]	; 0xffffffdc
     f0c:	bl	0 <strdup>
     f10:	mov	r3, r0
     f14:	mov	r2, r3
     f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f1c:	str	r2, [r3]
     f20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f24:	ldr	r3, [r3]
     f28:	cmp	r3, #0
     f2c:	bne	f5c <get_node_for_entry+0x6dc>
     f30:	ldr	r3, [pc, #156]	; fd4 <get_node_for_entry+0x754>
     f34:	ldr	r2, [pc, #144]	; fcc <get_node_for_entry+0x74c>
     f38:	ldr	r1, [pc, #152]	; fd8 <get_node_for_entry+0x758>
     f3c:	mvn	r0, #0
     f40:	bl	0 <coda_set_error>
     f44:	mov	r3, #0
     f48:	b	fbc <get_node_for_entry+0x73c>
     f4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f50:	ldr	r2, [r3, #4]
     f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f58:	str	r2, [r3, #4]
     f5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     f60:	ldr	r0, [fp, #-32]	; 0xffffffe0
     f64:	bl	5cc <detection_node_add_node>
     f68:	mov	r3, r0
     f6c:	cmp	r3, #0
     f70:	beq	f84 <get_node_for_entry+0x704>
     f74:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f78:	bl	47c <delete_detection_node>
     f7c:	mov	r3, #0
     f80:	b	fbc <get_node_for_entry+0x73c>
     f84:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f88:	cmp	r3, #0
     f8c:	beq	fb8 <get_node_for_entry+0x738>
     f90:	ldr	r3, [fp, #-40]	; 0xffffffd8
     f94:	ldr	r3, [r3, #4]
     f98:	cmp	r3, #0
     f9c:	beq	fb8 <get_node_for_entry+0x738>
     fa0:	ldr	r2, [fp, #-40]	; 0xffffffd8
     fa4:	mov	r1, #0
     fa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     fac:	bl	880 <get_node_for_entry>
     fb0:	mov	r3, r0
     fb4:	b	fbc <get_node_for_entry+0x73c>
     fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fbc:	mov	r0, r3
     fc0:	sub	sp, fp, #4
     fc4:	pop	{fp, pc}
     fc8:	.word	0x0000014b
     fcc:	.word	0x00000024
     fd0:	.word	0x00000074
     fd4:	.word	0x0000017f
     fd8:	.word	0x000000ac

00000fdc <coda_detection_tree_delete>:
     fdc:	push	{fp, lr}
     fe0:	add	fp, sp, #4
     fe4:	sub	sp, sp, #8
     fe8:	str	r0, [fp, #-8]
     fec:	ldr	r0, [fp, #-8]
     ff0:	bl	47c <delete_detection_node>
     ff4:	nop			; (mov r0, r0)
     ff8:	sub	sp, fp, #4
     ffc:	pop	{fp, pc}

00001000 <coda_detection_tree_add_rule>:
    1000:	push	{fp, lr}
    1004:	add	fp, sp, #4
    1008:	sub	sp, sp, #16
    100c:	str	r0, [fp, #-16]
    1010:	str	r1, [fp, #-20]	; 0xffffffec
    1014:	ldr	r3, [fp, #-20]	; 0xffffffec
    1018:	ldr	r3, [r3]
    101c:	cmp	r3, #0
    1020:	bne	1048 <coda_detection_tree_add_rule+0x48>
    1024:	ldr	r3, [fp, #-20]	; 0xffffffec
    1028:	ldr	r3, [r3, #8]
    102c:	ldr	r3, [r3, #8]
    1030:	mov	r2, r3
    1034:	ldr	r1, [pc, #300]	; 1168 <coda_detection_tree_add_rule+0x168>
    1038:	ldr	r0, [pc, #300]	; 116c <coda_detection_tree_add_rule+0x16c>
    103c:	bl	0 <coda_set_error>
    1040:	mvn	r3, #0
    1044:	b	115c <coda_detection_tree_add_rule+0x15c>
    1048:	ldr	r3, [fp, #-16]
    104c:	ldr	r3, [r3]
    1050:	str	r3, [fp, #-8]
    1054:	ldr	r3, [fp, #-8]
    1058:	cmp	r3, #0
    105c:	bne	1088 <coda_detection_tree_add_rule+0x88>
    1060:	bl	52c <detection_node_new>
    1064:	str	r0, [fp, #-8]
    1068:	ldr	r3, [fp, #-8]
    106c:	cmp	r3, #0
    1070:	bne	107c <coda_detection_tree_add_rule+0x7c>
    1074:	mvn	r3, #0
    1078:	b	115c <coda_detection_tree_add_rule+0x15c>
    107c:	ldr	r3, [fp, #-16]
    1080:	ldr	r2, [fp, #-8]
    1084:	str	r2, [r3]
    1088:	mov	r3, #0
    108c:	str	r3, [fp, #-12]
    1090:	b	10f8 <coda_detection_tree_add_rule+0xf8>
    1094:	ldr	r3, [fp, #-20]	; 0xffffffec
    1098:	ldr	r2, [r3, #4]
    109c:	ldr	r3, [fp, #-12]
    10a0:	lsl	r3, r3, #2
    10a4:	add	r3, r2, r3
    10a8:	ldr	r3, [r3]
    10ac:	ldr	r1, [r3]
    10b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    10b4:	ldr	r2, [r3, #4]
    10b8:	ldr	r3, [fp, #-12]
    10bc:	lsl	r3, r3, #2
    10c0:	add	r3, r2, r3
    10c4:	ldr	r3, [r3]
    10c8:	mov	r2, r3
    10cc:	ldr	r0, [fp, #-8]
    10d0:	bl	880 <get_node_for_entry>
    10d4:	str	r0, [fp, #-8]
    10d8:	ldr	r3, [fp, #-8]
    10dc:	cmp	r3, #0
    10e0:	bne	10ec <coda_detection_tree_add_rule+0xec>
    10e4:	mvn	r3, #0
    10e8:	b	115c <coda_detection_tree_add_rule+0x15c>
    10ec:	ldr	r3, [fp, #-12]
    10f0:	add	r3, r3, #1
    10f4:	str	r3, [fp, #-12]
    10f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    10fc:	ldr	r2, [r3]
    1100:	ldr	r3, [fp, #-12]
    1104:	cmp	r2, r3
    1108:	bgt	1094 <coda_detection_tree_add_rule+0x94>
    110c:	ldr	r3, [fp, #-8]
    1110:	ldr	r3, [r3, #8]
    1114:	cmp	r3, #0
    1118:	beq	114c <coda_detection_tree_add_rule+0x14c>
    111c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1120:	ldr	r3, [r3, #8]
    1124:	ldr	r2, [r3, #8]
    1128:	ldr	r3, [fp, #-8]
    112c:	ldr	r3, [r3, #8]
    1130:	ldr	r3, [r3, #8]
    1134:	ldr	r3, [r3, #8]
    1138:	ldr	r1, [pc, #48]	; 1170 <coda_detection_tree_add_rule+0x170>
    113c:	ldr	r0, [pc, #40]	; 116c <coda_detection_tree_add_rule+0x16c>
    1140:	bl	0 <coda_set_error>
    1144:	mvn	r3, #0
    1148:	b	115c <coda_detection_tree_add_rule+0x15c>
    114c:	ldr	r3, [fp, #-8]
    1150:	ldr	r2, [fp, #-20]	; 0xffffffec
    1154:	str	r2, [r3, #8]
    1158:	mov	r3, #0
    115c:	mov	r0, r3
    1160:	sub	sp, fp, #4
    1164:	pop	{fp, pc}
    1168:	.word	0x00000144
    116c:	.word	0xfffffe70
    1170:	.word	0x0000017c

00001174 <coda_evaluate_detection_node>:
    1174:	push	{fp, lr}
    1178:	add	fp, sp, #4
    117c:	sub	sp, sp, #552	; 0x228
    1180:	str	r0, [fp, #-544]	; 0xfffffde0
    1184:	str	r1, [fp, #-548]	; 0xfffffddc
    1188:	str	r2, [fp, #-552]	; 0xfffffdd8
    118c:	ldr	r2, [fp, #-548]	; 0xfffffddc
    1190:	sub	r3, fp, #532	; 0x214
    1194:	mov	r1, r2
    1198:	mov	r2, #520	; 0x208
    119c:	mov	r0, r3
    11a0:	bl	0 <memcpy>
    11a4:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    11a8:	mov	r2, #0
    11ac:	str	r2, [r3]
    11b0:	ldr	r3, [fp, #-544]	; 0xfffffde0
    11b4:	cmp	r3, #0
    11b8:	bne	11c4 <coda_evaluate_detection_node+0x50>
    11bc:	mov	r3, #0
    11c0:	b	1328 <coda_evaluate_detection_node+0x1b4>
    11c4:	ldr	r3, [fp, #-544]	; 0xfffffde0
    11c8:	ldr	r3, [r3]
    11cc:	cmp	r3, #0
    11d0:	beq	1218 <coda_evaluate_detection_node+0xa4>
    11d4:	ldr	r3, [fp, #-544]	; 0xfffffde0
    11d8:	ldr	r2, [r3]
    11dc:	sub	r3, fp, #532	; 0x214
    11e0:	mov	r1, r2
    11e4:	mov	r0, r3
    11e8:	bl	0 <coda_cursor_goto>
    11ec:	mov	r3, r0
    11f0:	cmp	r3, #0
    11f4:	beq	1280 <coda_evaluate_detection_node+0x10c>
    11f8:	ldr	r3, [pc, #308]	; 1334 <coda_evaluate_detection_node+0x1c0>
    11fc:	ldr	r3, [pc, r3]
    1200:	bl	0 <__aeabi_read_tp>
    1204:	mov	r1, r0
    1208:	mov	r2, #0
    120c:	str	r2, [r1, r3]
    1210:	mov	r3, #0
    1214:	b	1328 <coda_evaluate_detection_node+0x1b4>
    1218:	ldr	r3, [fp, #-544]	; 0xfffffde0
    121c:	ldr	r3, [r3, #4]
    1220:	cmp	r3, #0
    1224:	beq	1280 <coda_evaluate_detection_node+0x10c>
    1228:	ldr	r3, [fp, #-544]	; 0xfffffde0
    122c:	ldr	r3, [r3, #4]
    1230:	sub	r2, fp, #536	; 0x218
    1234:	sub	r1, fp, #532	; 0x214
    1238:	mov	r0, r3
    123c:	bl	0 <coda_expression_eval_bool>
    1240:	mov	r3, r0
    1244:	cmp	r3, #0
    1248:	beq	126c <coda_evaluate_detection_node+0xf8>
    124c:	ldr	r3, [pc, #228]	; 1338 <coda_evaluate_detection_node+0x1c4>
    1250:	ldr	r3, [pc, r3]
    1254:	bl	0 <__aeabi_read_tp>
    1258:	mov	r1, r0
    125c:	mov	r2, #0
    1260:	str	r2, [r1, r3]
    1264:	mov	r3, #0
    1268:	b	1328 <coda_evaluate_detection_node+0x1b4>
    126c:	ldr	r3, [fp, #-536]	; 0xfffffde8
    1270:	cmp	r3, #0
    1274:	bne	1280 <coda_evaluate_detection_node+0x10c>
    1278:	mov	r3, #0
    127c:	b	1328 <coda_evaluate_detection_node+0x1b4>
    1280:	mov	r3, #0
    1284:	str	r3, [fp, #-8]
    1288:	b	12ec <coda_evaluate_detection_node+0x178>
    128c:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1290:	ldr	r2, [r3, #16]
    1294:	ldr	r3, [fp, #-8]
    1298:	lsl	r3, r3, #2
    129c:	add	r3, r2, r3
    12a0:	ldr	r3, [r3]
    12a4:	sub	r1, fp, #532	; 0x214
    12a8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
    12ac:	mov	r0, r3
    12b0:	bl	1174 <coda_evaluate_detection_node>
    12b4:	mov	r3, r0
    12b8:	cmp	r3, #0
    12bc:	beq	12c8 <coda_evaluate_detection_node+0x154>
    12c0:	mvn	r3, #0
    12c4:	b	1328 <coda_evaluate_detection_node+0x1b4>
    12c8:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    12cc:	ldr	r3, [r3]
    12d0:	cmp	r3, #0
    12d4:	beq	12e0 <coda_evaluate_detection_node+0x16c>
    12d8:	mov	r3, #0
    12dc:	b	1328 <coda_evaluate_detection_node+0x1b4>
    12e0:	ldr	r3, [fp, #-8]
    12e4:	add	r3, r3, #1
    12e8:	str	r3, [fp, #-8]
    12ec:	ldr	r3, [fp, #-544]	; 0xfffffde0
    12f0:	ldr	r2, [r3, #12]
    12f4:	ldr	r3, [fp, #-8]
    12f8:	cmp	r2, r3
    12fc:	bgt	128c <coda_evaluate_detection_node+0x118>
    1300:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1304:	ldr	r3, [r3, #8]
    1308:	cmp	r3, #0
    130c:	beq	1324 <coda_evaluate_detection_node+0x1b0>
    1310:	ldr	r3, [fp, #-544]	; 0xfffffde0
    1314:	ldr	r3, [r3, #8]
    1318:	ldr	r2, [r3, #8]
    131c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
    1320:	str	r2, [r3]
    1324:	mov	r3, #0
    1328:	mov	r0, r3
    132c:	sub	sp, fp, #4
    1330:	pop	{fp, pc}
    1334:	.word	0x00000130
    1338:	.word	0x000000e0
