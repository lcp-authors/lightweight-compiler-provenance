
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-utils.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_format_from_string>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r1
   c:	movw	r1, #0
  10:	mov	r5, r0
  14:	movt	r1, #0
  18:	bl	0 <strcmp>
  1c:	cmp	r0, #0
  20:	moveq	r0, #0
  24:	streq	r0, [r4]
  28:	popeq	{r4, r5, fp, pc}
  2c:	movw	r1, #0
  30:	mov	r0, r5
  34:	movt	r1, #0
  38:	bl	0 <strcmp>
  3c:	cmp	r0, #0
  40:	beq	124 <coda_format_from_string+0x124>
  44:	movw	r1, #0
  48:	mov	r0, r5
  4c:	movt	r1, #0
  50:	bl	0 <strcmp>
  54:	cmp	r0, #0
  58:	beq	12c <coda_format_from_string+0x12c>
  5c:	movw	r1, #0
  60:	mov	r0, r5
  64:	movt	r1, #0
  68:	bl	0 <strcmp>
  6c:	cmp	r0, #0
  70:	beq	134 <coda_format_from_string+0x134>
  74:	movw	r1, #0
  78:	mov	r0, r5
  7c:	movt	r1, #0
  80:	bl	0 <strcmp>
  84:	cmp	r0, #0
  88:	beq	13c <coda_format_from_string+0x13c>
  8c:	movw	r1, #0
  90:	mov	r0, r5
  94:	movt	r1, #0
  98:	bl	0 <strcmp>
  9c:	cmp	r0, #0
  a0:	beq	144 <coda_format_from_string+0x144>
  a4:	movw	r1, #0
  a8:	mov	r0, r5
  ac:	movt	r1, #0
  b0:	bl	0 <strcmp>
  b4:	cmp	r0, #0
  b8:	beq	14c <coda_format_from_string+0x14c>
  bc:	movw	r1, #0
  c0:	mov	r0, r5
  c4:	movt	r1, #0
  c8:	bl	0 <strcmp>
  cc:	cmp	r0, #0
  d0:	beq	154 <coda_format_from_string+0x154>
  d4:	movw	r1, #0
  d8:	mov	r0, r5
  dc:	movt	r1, #0
  e0:	bl	0 <strcmp>
  e4:	cmp	r0, #0
  e8:	beq	15c <coda_format_from_string+0x15c>
  ec:	movw	r1, #0
  f0:	mov	r0, r5
  f4:	movt	r1, #0
  f8:	bl	0 <strcmp>
  fc:	cmp	r0, #0
 100:	beq	164 <coda_format_from_string+0x164>
 104:	movw	r0, #65136	; 0xfe70
 108:	movw	r1, #0
 10c:	mov	r2, r5
 110:	movt	r0, #65535	; 0xffff
 114:	movt	r1, #0
 118:	bl	0 <coda_set_error>
 11c:	mvn	r0, #0
 120:	pop	{r4, r5, fp, pc}
 124:	mov	r0, #1
 128:	b	168 <coda_format_from_string+0x168>
 12c:	mov	r0, #2
 130:	b	168 <coda_format_from_string+0x168>
 134:	mov	r0, #3
 138:	b	168 <coda_format_from_string+0x168>
 13c:	mov	r0, #4
 140:	b	168 <coda_format_from_string+0x168>
 144:	mov	r0, #5
 148:	b	168 <coda_format_from_string+0x168>
 14c:	mov	r0, #6
 150:	b	168 <coda_format_from_string+0x168>
 154:	mov	r0, #7
 158:	b	168 <coda_format_from_string+0x168>
 15c:	mov	r0, #8
 160:	b	168 <coda_format_from_string+0x168>
 164:	mov	r0, #9
 168:	str	r0, [r4]
 16c:	mov	r0, #0
 170:	pop	{r4, r5, fp, pc}

00000174 <coda_element_name_from_xml_name>:
 174:	mov	r1, r0
 178:	ldrb	r2, [r1], #1
 17c:	orr	r3, r2, #32
 180:	cmp	r3, #32
 184:	bne	178 <coda_element_name_from_xml_name+0x4>
 188:	cmp	r2, #0
 18c:	moveq	r1, r0
 190:	mov	r0, r1
 194:	bx	lr

00000198 <coda_is_identifier>:
 198:	push	{r4, r5, fp, lr}
 19c:	add	fp, sp, #8
 1a0:	mov	r4, #0
 1a4:	cmp	r0, #0
 1a8:	beq	210 <coda_is_identifier+0x78>
 1ac:	mov	r5, r0
 1b0:	bl	0 <__ctype_b_loc>
 1b4:	ldrb	r1, [r5]
 1b8:	ldr	r0, [r0]
 1bc:	add	r1, r0, r1, lsl #1
 1c0:	ldrb	r1, [r1, #1]
 1c4:	tst	r1, #4
 1c8:	beq	210 <coda_is_identifier+0x78>
 1cc:	ldrb	r2, [r5, #1]
 1d0:	cmp	r2, #0
 1d4:	beq	204 <coda_is_identifier+0x6c>
 1d8:	add	r1, r5, #2
 1dc:	uxtb	r2, r2
 1e0:	cmp	r2, #95	; 0x5f
 1e4:	beq	1f8 <coda_is_identifier+0x60>
 1e8:	add	r2, r0, r2, lsl #1
 1ec:	ldrh	r2, [r2]
 1f0:	ands	r2, r2, #8
 1f4:	beq	210 <coda_is_identifier+0x78>
 1f8:	ldrb	r2, [r1], #1
 1fc:	cmp	r2, #0
 200:	bne	1dc <coda_is_identifier+0x44>
 204:	mov	r4, #1
 208:	mov	r0, r4
 20c:	pop	{r4, r5, fp, pc}
 210:	mov	r0, r4
 214:	pop	{r4, r5, fp, pc}

00000218 <coda_identifier_from_name>:
 218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 21c:	add	fp, sp, #28
 220:	sub	sp, sp, #4
 224:	movw	r9, #0
 228:	mov	r8, r1
 22c:	cmp	r0, #0
 230:	movt	r9, #0
 234:	beq	278 <coda_identifier_from_name+0x60>
 238:	ldrb	r4, [r0]
 23c:	mov	r5, r0
 240:	cmp	r4, #0
 244:	beq	278 <coda_identifier_from_name+0x60>
 248:	bl	0 <__ctype_b_loc>
 24c:	ldr	r0, [r0]
 250:	uxtb	r1, r4
 254:	add	r1, r0, r1, lsl #1
 258:	ldrb	r1, [r1, #1]
 25c:	tst	r1, #4
 260:	bne	274 <coda_identifier_from_name+0x5c>
 264:	ldrb	r4, [r5, #1]!
 268:	cmp	r4, #0
 26c:	bne	250 <coda_identifier_from_name+0x38>
 270:	b	278 <coda_identifier_from_name+0x60>
 274:	mov	r9, r5
 278:	mov	r0, r9
 27c:	bl	0 <strlen>
 280:	mov	sl, r0
 284:	add	r0, r0, #5
 288:	bl	0 <malloc>
 28c:	mov	r5, r0
 290:	cmp	r0, #0
 294:	beq	344 <coda_identifier_from_name+0x12c>
 298:	ldrb	r0, [r9]
 29c:	cmp	sl, #2
 2a0:	strb	r0, [r5]
 2a4:	blt	2dc <coda_identifier_from_name+0xc4>
 2a8:	add	r4, r5, #1
 2ac:	sub	r6, sl, #1
 2b0:	add	r7, r9, #1
 2b4:	bl	0 <__ctype_b_loc>
 2b8:	ldrb	r1, [r7], #1
 2bc:	ldr	r2, [r0]
 2c0:	add	r2, r2, r1, lsl #1
 2c4:	ldrh	r2, [r2]
 2c8:	tst	r2, #8
 2cc:	movweq	r1, #95	; 0x5f
 2d0:	subs	r6, r6, #1
 2d4:	strb	r1, [r4], #1
 2d8:	bne	2b8 <coda_identifier_from_name+0xa0>
 2dc:	mov	r0, #0
 2e0:	mov	r6, r5
 2e4:	cmp	r8, #0
 2e8:	strb	r0, [r6, sl]!
 2ec:	beq	368 <coda_identifier_from_name+0x150>
 2f0:	mov	r0, r8
 2f4:	mov	r1, r5
 2f8:	bl	0 <coda_hashtable_get_index_from_name>
 2fc:	cmp	r0, #0
 300:	blt	368 <coda_identifier_from_name+0x150>
 304:	movw	r4, #0
 308:	mov	r7, #1
 30c:	movt	r4, #0
 310:	cmp	r7, #1000	; 0x3e8
 314:	bcs	374 <coda_identifier_from_name+0x15c>
 318:	mov	r0, r6
 31c:	mov	r1, r4
 320:	mov	r2, r7
 324:	bl	0 <sprintf>
 328:	mov	r0, r8
 32c:	mov	r1, r5
 330:	bl	0 <coda_hashtable_get_index_from_name>
 334:	add	r7, r7, #1
 338:	cmn	r0, #1
 33c:	bgt	310 <coda_identifier_from_name+0xf8>
 340:	b	368 <coda_identifier_from_name+0x150>
 344:	movw	r1, #0
 348:	movw	r3, #0
 34c:	mov	r0, #172	; 0xac
 350:	add	r2, sl, #4
 354:	str	r0, [sp]
 358:	movt	r1, #0
 35c:	movt	r3, #0
 360:	mvn	r0, #0
 364:	bl	0 <coda_set_error>
 368:	mov	r0, r5
 36c:	sub	sp, fp, #28
 370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 374:	movw	r0, #0
 378:	movw	r1, #0
 37c:	movw	r3, #0
 380:	mov	r2, #203	; 0xcb
 384:	movt	r0, #0
 388:	movt	r1, #0
 38c:	movt	r3, #0
 390:	bl	0 <__assert_fail>

00000394 <coda_c_index_to_fortran_index>:
 394:	push	{r4, r5, fp, lr}
 398:	add	fp, sp, #8
 39c:	sub	sp, sp, #32
 3a0:	mov	ip, r0
 3a4:	cmp	r0, #8
 3a8:	ble	3d0 <coda_c_index_to_fortran_index+0x3c>
 3ac:	movw	r1, #0
 3b0:	mvn	r0, #99	; 0x63
 3b4:	mov	r2, ip
 3b8:	mov	r3, #8
 3bc:	movt	r1, #0
 3c0:	bl	0 <coda_set_error>
 3c4:	mvn	r0, #0
 3c8:	sub	sp, fp, #8
 3cc:	pop	{r4, r5, fp, pc}
 3d0:	mov	r0, #0
 3d4:	cmp	ip, #1
 3d8:	blt	434 <coda_c_index_to_fortran_index+0xa0>
 3dc:	sub	r3, ip, #1
 3e0:	mov	lr, sp
 3e4:	ldr	r4, [r1, r3, lsl #2]
 3e8:	sdiv	r5, r2, r4
 3ec:	mls	r2, r5, r4, r2
 3f0:	str	r2, [lr, r3, lsl #2]
 3f4:	sub	r2, r3, #1
 3f8:	add	r3, r3, #1
 3fc:	cmp	r3, #1
 400:	mov	r3, r2
 404:	mov	r2, r5
 408:	bgt	3e4 <coda_c_index_to_fortran_index+0x50>
 40c:	cmp	ip, #1
 410:	blt	434 <coda_c_index_to_fortran_index+0xa0>
 414:	mov	r0, #0
 418:	mov	r2, #1
 41c:	ldr	r3, [lr], #4
 420:	subs	ip, ip, #1
 424:	mla	r0, r3, r2, r0
 428:	ldr	r3, [r1], #4
 42c:	mul	r2, r3, r2
 430:	bne	41c <coda_c_index_to_fortran_index+0x88>
 434:	sub	sp, fp, #8
 438:	pop	{r4, r5, fp, pc}

0000043c <coda_path_find_file>:
 43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 440:	add	fp, sp, #28
 444:	sub	sp, sp, #100	; 0x64
 448:	mov	r4, r0
 44c:	mov	r0, r1
 450:	mov	r7, r2
 454:	mov	r5, r1
 458:	bl	0 <strlen>
 45c:	cmp	r4, #0
 460:	str	r0, [sp, #4]
 464:	ldrbne	r0, [r4]
 468:	cmpne	r0, #0
 46c:	bne	484 <coda_path_find_file+0x48>
 470:	mov	r4, #0
 474:	str	r4, [r7]
 478:	mov	r0, r4
 47c:	sub	sp, fp, #28
 480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 484:	mov	r0, r4
 488:	bl	0 <strdup>
 48c:	cmp	r0, #0
 490:	beq	5b0 <coda_path_find_file+0x174>
 494:	mov	sl, r0
 498:	ldrb	r0, [r0]
 49c:	cmp	r0, #0
 4a0:	beq	5a4 <coda_path_find_file+0x168>
 4a4:	mov	r6, #0
 4a8:	mov	r9, #0
 4ac:	str	sl, [sp]
 4b0:	mvn	r1, #57	; 0x39
 4b4:	add	r8, sl, #1
 4b8:	uxtab	r1, r1, r0
 4bc:	uxtb	r0, r0
 4c0:	cmp	r0, #58	; 0x3a
 4c4:	clz	r0, r0
 4c8:	movwne	r1, #1
 4cc:	lsr	r0, r0, #5
 4d0:	cmp	r0, r1
 4d4:	beq	4fc <coda_path_find_file+0xc0>
 4d8:	ldrb	r0, [r8], #1
 4dc:	subs	r1, r0, #58	; 0x3a
 4e0:	clz	r0, r0
 4e4:	movwne	r1, #1
 4e8:	lsr	r0, r0, #5
 4ec:	teq	r0, r1
 4f0:	bne	4d8 <coda_path_find_file+0x9c>
 4f4:	sub	r1, r8, #1
 4f8:	b	500 <coda_path_find_file+0xc4>
 4fc:	mov	r1, sl
 500:	cmp	r0, #0
 504:	moveq	r0, #0
 508:	movne	r8, r1
 50c:	strbeq	r0, [r1]
 510:	mov	r0, sl
 514:	bl	0 <strlen>
 518:	ldr	r1, [sp, #4]
 51c:	add	r4, r0, r1
 520:	cmp	r9, r4
 524:	bgt	544 <coda_path_find_file+0x108>
 528:	add	r1, r4, #2
 52c:	mov	r0, r6
 530:	bl	0 <realloc>
 534:	cmp	r0, #0
 538:	beq	5d4 <coda_path_find_file+0x198>
 53c:	add	r9, r4, #1
 540:	mov	r6, r0
 544:	movw	r1, #0
 548:	mov	r0, r6
 54c:	mov	r2, sl
 550:	mov	r3, r5
 554:	movt	r1, #0
 558:	bl	0 <sprintf>
 55c:	mov	r0, #3
 560:	mov	r1, r6
 564:	add	r2, sp, #8
 568:	bl	0 <__xstat>
 56c:	cmp	r0, #0
 570:	bne	580 <coda_path_find_file+0x144>
 574:	ldrb	r0, [sp, #25]
 578:	tst	r0, #128	; 0x80
 57c:	bne	608 <coda_path_find_file+0x1cc>
 580:	ldrb	r0, [r8]
 584:	mov	sl, r8
 588:	cmp	r0, #0
 58c:	bne	4b0 <coda_path_find_file+0x74>
 590:	ldr	sl, [sp]
 594:	cmp	r6, #0
 598:	beq	5a4 <coda_path_find_file+0x168>
 59c:	mov	r0, r6
 5a0:	bl	0 <free>
 5a4:	mov	r0, sl
 5a8:	bl	0 <free>
 5ac:	b	470 <coda_path_find_file+0x34>
 5b0:	movw	r1, #0
 5b4:	movw	r2, #0
 5b8:	mvn	r0, #0
 5bc:	movw	r3, #391	; 0x187
 5c0:	mvn	r4, #0
 5c4:	movt	r1, #0
 5c8:	movt	r2, #0
 5cc:	bl	0 <coda_set_error>
 5d0:	b	478 <coda_path_find_file+0x3c>
 5d4:	movw	r1, #0
 5d8:	movw	r2, #0
 5dc:	mvn	r0, #0
 5e0:	movw	r3, #421	; 0x1a5
 5e4:	mvn	r4, #0
 5e8:	movt	r1, #0
 5ec:	movt	r2, #0
 5f0:	bl	0 <coda_set_error>
 5f4:	cmp	r6, #0
 5f8:	beq	478 <coda_path_find_file+0x3c>
 5fc:	mov	r0, r6
 600:	bl	0 <free>
 604:	b	478 <coda_path_find_file+0x3c>
 608:	ldr	r0, [sp]
 60c:	str	r6, [r7]
 610:	bl	0 <free>
 614:	mov	r4, #0
 618:	b	478 <coda_path_find_file+0x3c>

0000061c <coda_path_from_path>:
 61c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 620:	add	fp, sp, #24
 624:	mov	r9, r3
 628:	mov	r8, r2
 62c:	mov	r4, r1
 630:	mov	r7, r0
 634:	bl	0 <strlen>
 638:	mov	r5, r0
 63c:	cmp	r8, #0
 640:	beq	688 <coda_path_from_path+0x6c>
 644:	mov	r0, r8
 648:	bl	0 <strlen>
 64c:	mov	r6, r0
 650:	cmp	r4, #0
 654:	beq	694 <coda_path_from_path+0x78>
 658:	cmp	r5, #1
 65c:	blt	694 <coda_path_from_path+0x78>
 660:	sub	r0, r7, #1
 664:	ldrb	r1, [r0, r5]
 668:	cmp	r1, #47	; 0x2f
 66c:	cmpne	r1, #92	; 0x5c
 670:	beq	694 <coda_path_from_path+0x78>
 674:	sub	r5, r5, #1
 678:	add	r1, r5, #1
 67c:	cmp	r1, #1
 680:	bgt	664 <coda_path_from_path+0x48>
 684:	b	694 <coda_path_from_path+0x78>
 688:	mov	r6, #0
 68c:	cmp	r4, #0
 690:	bne	658 <coda_path_from_path+0x3c>
 694:	add	r0, r6, r5
 698:	add	r0, r0, #2
 69c:	bl	0 <malloc>
 6a0:	cmp	r0, #0
 6a4:	str	r0, [r9]
 6a8:	beq	6e0 <coda_path_from_path+0xc4>
 6ac:	mov	r4, r0
 6b0:	cmp	r5, #1
 6b4:	blt	708 <coda_path_from_path+0xec>
 6b8:	mov	r0, r4
 6bc:	mov	r1, r7
 6c0:	mov	r2, r5
 6c4:	bl	0 <memcpy>
 6c8:	add	r7, r4, r5
 6cc:	cmp	r6, #1
 6d0:	blt	728 <coda_path_from_path+0x10c>
 6d4:	mov	r0, #47	; 0x2f
 6d8:	strb	r0, [r7], #1
 6dc:	b	714 <coda_path_from_path+0xf8>
 6e0:	movw	r1, #0
 6e4:	movw	r2, #0
 6e8:	mvn	r0, #0
 6ec:	movw	r3, #481	; 0x1e1
 6f0:	mvn	r6, #0
 6f4:	movt	r1, #0
 6f8:	movt	r2, #0
 6fc:	bl	0 <coda_set_error>
 700:	mov	r0, r6
 704:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 708:	cmp	r6, #1
 70c:	mov	r7, r4
 710:	blt	728 <coda_path_from_path+0x10c>
 714:	mov	r0, r7
 718:	mov	r1, r8
 71c:	mov	r2, r6
 720:	bl	0 <memcpy>
 724:	add	r7, r7, r6
 728:	mov	r6, #0
 72c:	strb	r6, [r7]
 730:	ldrb	r0, [r4]
 734:	cmp	r0, #0
 738:	beq	8a4 <coda_path_from_path+0x288>
 73c:	cmp	r0, #46	; 0x2e
 740:	bne	764 <coda_path_from_path+0x148>
 744:	mov	r6, #0
 748:	add	r0, r4, r6
 74c:	ldrb	r1, [r0, #1]
 750:	cmp	r1, #47	; 0x2f
 754:	ldrbeq	r0, [r0, #2]
 758:	addeq	r6, r6, #2
 75c:	cmpeq	r0, #46	; 0x2e
 760:	beq	748 <coda_path_from_path+0x12c>
 764:	sub	ip, r4, #1
 768:	mov	lr, #0
 76c:	b	778 <coda_path_from_path+0x15c>
 770:	strb	r2, [r4, lr]
 774:	add	lr, lr, #1
 778:	mov	r5, r6
 77c:	ldrb	r2, [r4, r5]
 780:	mov	r3, r5
 784:	cmp	r2, #47	; 0x2f
 788:	cmpne	r2, #92	; 0x5c
 78c:	bne	854 <coda_path_from_path+0x238>
 790:	add	r6, r3, #1
 794:	ldrb	r0, [r4, r6]
 798:	cmp	r0, #46	; 0x2e
 79c:	beq	7bc <coda_path_from_path+0x1a0>
 7a0:	cmp	r0, #47	; 0x2f
 7a4:	mov	r5, r6
 7a8:	beq	77c <coda_path_from_path+0x160>
 7ac:	cmp	r0, #92	; 0x5c
 7b0:	mov	r5, r6
 7b4:	beq	77c <coda_path_from_path+0x160>
 7b8:	b	770 <coda_path_from_path+0x154>
 7bc:	add	r5, r3, #2
 7c0:	ldrb	r7, [r4, r5]
 7c4:	cmp	r7, #46	; 0x2e
 7c8:	ble	7e0 <coda_path_from_path+0x1c4>
 7cc:	cmp	r7, #47	; 0x2f
 7d0:	beq	77c <coda_path_from_path+0x160>
 7d4:	cmp	r7, #92	; 0x5c
 7d8:	beq	77c <coda_path_from_path+0x160>
 7dc:	b	770 <coda_path_from_path+0x154>
 7e0:	cmp	r7, #0
 7e4:	beq	77c <coda_path_from_path+0x160>
 7e8:	cmp	r7, #46	; 0x2e
 7ec:	bne	770 <coda_path_from_path+0x154>
 7f0:	add	r3, r3, #3
 7f4:	ldrb	r0, [r4, r3]
 7f8:	cmp	r0, #0
 7fc:	cmpne	r0, #92	; 0x5c
 800:	bne	864 <coda_path_from_path+0x248>
 804:	cmp	lr, #2
 808:	blt	824 <coda_path_from_path+0x208>
 80c:	add	r0, r4, lr
 810:	ldrb	r1, [r0, #-1]
 814:	cmp	r1, #46	; 0x2e
 818:	ldrbeq	r1, [r0, #-2]
 81c:	cmpeq	r1, #46	; 0x2e
 820:	beq	870 <coda_path_from_path+0x254>
 824:	mov	r0, lr
 828:	subs	r1, r0, #1
 82c:	blt	770 <coda_path_from_path+0x154>
 830:	ldrb	r0, [ip, r0]
 834:	cmp	r0, #47	; 0x2f
 838:	beq	848 <coda_path_from_path+0x22c>
 83c:	cmp	r0, #92	; 0x5c
 840:	mov	r0, r1
 844:	bne	828 <coda_path_from_path+0x20c>
 848:	mov	r6, r3
 84c:	mov	lr, r1
 850:	b	778 <coda_path_from_path+0x15c>
 854:	cmp	r2, #0
 858:	beq	88c <coda_path_from_path+0x270>
 85c:	add	r6, r3, #1
 860:	b	770 <coda_path_from_path+0x154>
 864:	cmp	r0, #47	; 0x2f
 868:	bne	770 <coda_path_from_path+0x154>
 86c:	b	804 <coda_path_from_path+0x1e8>
 870:	cmp	lr, #2
 874:	beq	770 <coda_path_from_path+0x154>
 878:	ldrb	r0, [r0, #-3]
 87c:	cmp	r0, #47	; 0x2f
 880:	cmpne	r0, #92	; 0x5c
 884:	beq	770 <coda_path_from_path+0x154>
 888:	b	824 <coda_path_from_path+0x208>
 88c:	cmp	lr, #0
 890:	mov	r6, #0
 894:	moveq	r0, #46	; 0x2e
 898:	moveq	lr, #1
 89c:	strbeq	r0, [r4]
 8a0:	strb	r6, [r4, lr]
 8a4:	mov	r0, r6
 8a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000008ac <coda_path_for_program>:
 8ac:	push	{r4, r5, r6, sl, fp, lr}
 8b0:	add	fp, sp, #16
 8b4:	sub	sp, sp, #8
 8b8:	sub	sp, sp, #1024	; 0x400
 8bc:	mov	r6, #0
 8c0:	cmp	r0, #0
 8c4:	str	r6, [r1]
 8c8:	beq	944 <coda_path_for_program+0x98>
 8cc:	mov	r4, r1
 8d0:	mov	r5, r0
 8d4:	b	8dc <coda_path_for_program+0x30>
 8d8:	add	r0, r0, #1
 8dc:	ldrb	r1, [r0]
 8e0:	cmp	r1, #0
 8e4:	beq	9c4 <coda_path_for_program+0x118>
 8e8:	cmp	r1, #47	; 0x2f
 8ec:	cmpne	r1, #92	; 0x5c
 8f0:	bne	8d8 <coda_path_for_program+0x2c>
 8f4:	mov	r0, r5
 8f8:	bl	0 <strdup>
 8fc:	mov	r5, r0
 900:	cmp	r0, #0
 904:	str	r0, [r4]
 908:	beq	924 <coda_path_for_program+0x78>
 90c:	ldrb	r6, [r5]
 910:	cmp	r6, #47	; 0x2f
 914:	cmpne	r6, #92	; 0x5c
 918:	bne	950 <coda_path_for_program+0xa4>
 91c:	mov	r6, #0
 920:	b	944 <coda_path_for_program+0x98>
 924:	movw	r1, #0
 928:	movw	r2, #0
 92c:	mvn	r0, #0
 930:	movw	r3, #537	; 0x219
 934:	mvn	r6, #0
 938:	movt	r1, #0
 93c:	movt	r2, #0
 940:	bl	0 <coda_set_error>
 944:	mov	r0, r6
 948:	sub	sp, fp, #16
 94c:	pop	{r4, r5, r6, sl, fp, pc}
 950:	bl	0 <__ctype_b_loc>
 954:	ldr	r0, [r0]
 958:	add	r0, r0, r6, lsl #1
 95c:	ldrb	r0, [r0, #1]
 960:	tst	r0, #4
 964:	beq	974 <coda_path_for_program+0xc8>
 968:	ldrb	r0, [r5, #1]
 96c:	cmp	r0, #58	; 0x3a
 970:	beq	91c <coda_path_for_program+0x70>
 974:	add	r0, sp, #7
 978:	mov	r1, #1024	; 0x400
 97c:	bl	0 <getcwd>
 980:	cmp	r0, #0
 984:	beq	91c <coda_path_for_program+0x70>
 988:	mov	r0, #0
 98c:	mov	r1, #0
 990:	mov	r3, r4
 994:	strb	r0, [sp, #1031]	; 0x407
 998:	add	r0, sp, #7
 99c:	ldr	r5, [r4]
 9a0:	mov	r2, r5
 9a4:	bl	61c <coda_path_from_path>
 9a8:	mov	r4, r0
 9ac:	mov	r0, r5
 9b0:	bl	0 <free>
 9b4:	mvn	r6, #0
 9b8:	cmp	r4, #0
 9bc:	moveq	r6, #0
 9c0:	b	944 <coda_path_for_program+0x98>
 9c4:	movw	r0, #0
 9c8:	movt	r0, #0
 9cc:	bl	0 <getenv>
 9d0:	cmp	r0, #0
 9d4:	beq	a00 <coda_path_for_program+0x154>
 9d8:	mov	r1, r5
 9dc:	mov	r2, r4
 9e0:	bl	43c <coda_path_find_file>
 9e4:	mvn	r6, #0
 9e8:	cmp	r0, #0
 9ec:	bne	944 <coda_path_for_program+0x98>
 9f0:	ldr	r5, [r4]
 9f4:	cmp	r5, #0
 9f8:	bne	90c <coda_path_for_program+0x60>
 9fc:	b	91c <coda_path_for_program+0x70>
 a00:	mov	r0, #0
 a04:	str	r0, [r4]
 a08:	b	91c <coda_path_for_program+0x70>

00000a0c <coda_isNaN>:
 a0c:	vmov	r0, r1, d0
 a10:	mov	r2, r1
 a14:	bfc	r2, #20, #12
 a18:	orrs	r0, r0, r2
 a1c:	movw	r2, #0
 a20:	movt	r2, #32752	; 0x7ff0
 a24:	movwne	r0, #1
 a28:	bic	r1, r2, r1
 a2c:	clz	r1, r1
 a30:	lsr	r1, r1, #5
 a34:	and	r0, r1, r0
 a38:	bx	lr
 a3c:	nop	{0}

00000a40 <coda_NaN>:
 a40:	vldr	d0, [pc]	; a48 <coda_NaN+0x8>
 a44:	bx	lr
 a48:	.word	0x00000000
 a4c:	.word	0x7ff80000

00000a50 <coda_isInf>:
 a50:	mov	r0, #-2147483648	; 0x80000000
 a54:	vmov	r1, r2, d0
 a58:	add	r0, r0, #267386880	; 0xff00000
 a5c:	orr	r2, r2, #-2147483648	; 0x80000000
 a60:	add	r0, r0, #1879048192	; 0x70000000
 a64:	eor	r0, r2, r0
 a68:	orr	r0, r1, r0
 a6c:	clz	r0, r0
 a70:	lsr	r0, r0, #5
 a74:	bx	lr

00000a78 <coda_isPlusInf>:
 a78:	vmov	r0, r1, d0
 a7c:	eor	r1, r1, #267386880	; 0xff00000
 a80:	eor	r1, r1, #1879048192	; 0x70000000
 a84:	orr	r0, r0, r1
 a88:	clz	r0, r0
 a8c:	lsr	r0, r0, #5
 a90:	bx	lr

00000a94 <coda_isMinInf>:
 a94:	vmov	r0, r1, d0
 a98:	eor	r1, r1, #267386880	; 0xff00000
 a9c:	eor	r1, r1, #-268435456	; 0xf0000000
 aa0:	orr	r0, r0, r1
 aa4:	clz	r0, r0
 aa8:	lsr	r0, r0, #5
 aac:	bx	lr

00000ab0 <coda_PlusInf>:
 ab0:	vldr	d0, [pc]	; ab8 <coda_PlusInf+0x8>
 ab4:	bx	lr
 ab8:	.word	0x00000000
 abc:	.word	0x7ff00000

00000ac0 <coda_MinInf>:
 ac0:	vldr	d0, [pc]	; ac8 <coda_MinInf+0x8>
 ac4:	bx	lr
 ac8:	.word	0x00000000
 acc:	.word	0xfff00000

00000ad0 <coda_str64>:
 ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 ad4:	add	fp, sp, #24
 ad8:	sub	sp, sp, #8
 adc:	mov	r4, r2
 ae0:	mov	r6, r1
 ae4:	mov	r5, r0
 ae8:	cmn	r1, #1
 aec:	ble	b14 <coda_str64+0x44>
 af0:	cmp	r6, #0
 af4:	bne	b28 <coda_str64+0x58>
 af8:	movw	r1, #0
 afc:	mov	r0, r4
 b00:	mov	r2, r5
 b04:	movt	r1, #0
 b08:	sub	sp, fp, #24
 b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
 b10:	b	0 <sprintf>
 b14:	rsbs	r5, r5, #0
 b18:	mov	r0, #45	; 0x2d
 b1c:	strb	r0, [r4], #1
 b20:	rscs	r6, r6, #0
 b24:	beq	af8 <coda_str64+0x28>
 b28:	movw	r7, #57600	; 0xe100
 b2c:	mov	r0, r5
 b30:	mov	r1, r6
 b34:	mov	r3, #0
 b38:	movt	r7, #1525	; 0x5f5
 b3c:	mov	r2, r7
 b40:	bl	0 <__aeabi_uldivmod>
 b44:	mov	r2, r7
 b48:	mov	r3, #0
 b4c:	mls	r8, r0, r7, r5
 b50:	bl	0 <__aeabi_uldivmod>
 b54:	movw	r1, #65535	; 0xffff
 b58:	movw	r0, #34546	; 0x86f2
 b5c:	mov	r7, r2
 b60:	movt	r1, #28608	; 0x6fc0
 b64:	movt	r0, #35	; 0x23
 b68:	subs	r1, r1, r5
 b6c:	sbcs	r0, r0, r6
 b70:	bcs	bb4 <coda_str64+0xe4>
 b74:	movw	r2, #0
 b78:	movw	r3, #34546	; 0x86f2
 b7c:	mov	r0, r5
 b80:	mov	r1, r6
 b84:	movt	r2, #28609	; 0x6fc1
 b88:	movt	r3, #35	; 0x23
 b8c:	bl	0 <__aeabi_uldivmod>
 b90:	movw	r1, #0
 b94:	mov	r2, r0
 b98:	mov	r0, r4
 b9c:	mov	r3, r7
 ba0:	str	r8, [sp]
 ba4:	movt	r1, #0
 ba8:	bl	0 <sprintf>
 bac:	sub	sp, fp, #24
 bb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 bb4:	movw	r1, #0
 bb8:	mov	r0, r4
 bbc:	mov	r2, r7
 bc0:	mov	r3, r8
 bc4:	movt	r1, #0
 bc8:	sub	sp, fp, #24
 bcc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
 bd0:	b	0 <sprintf>

00000bd4 <coda_str64u>:
 bd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 bd8:	add	fp, sp, #24
 bdc:	sub	sp, sp, #8
 be0:	mov	r4, r2
 be4:	mov	r5, r0
 be8:	cmp	r1, #0
 bec:	bne	c0c <coda_str64u+0x38>
 bf0:	movw	r1, #0
 bf4:	mov	r0, r4
 bf8:	mov	r2, r5
 bfc:	movt	r1, #0
 c00:	sub	sp, fp, #24
 c04:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
 c08:	b	0 <sprintf>
 c0c:	movw	r7, #57600	; 0xe100
 c10:	mov	r0, r5
 c14:	mov	r3, #0
 c18:	mov	r6, r1
 c1c:	movt	r7, #1525	; 0x5f5
 c20:	mov	r2, r7
 c24:	bl	0 <__aeabi_uldivmod>
 c28:	mov	r2, r7
 c2c:	mov	r3, #0
 c30:	mls	r8, r0, r7, r5
 c34:	bl	0 <__aeabi_uldivmod>
 c38:	movw	r1, #0
 c3c:	movw	r0, #34546	; 0x86f2
 c40:	mov	r7, r2
 c44:	movt	r1, #28609	; 0x6fc1
 c48:	movt	r0, #35	; 0x23
 c4c:	subs	r1, r5, r1
 c50:	sbcs	r0, r6, r0
 c54:	bcc	c98 <coda_str64u+0xc4>
 c58:	movw	r2, #0
 c5c:	movw	r3, #34546	; 0x86f2
 c60:	mov	r0, r5
 c64:	mov	r1, r6
 c68:	movt	r2, #28609	; 0x6fc1
 c6c:	movt	r3, #35	; 0x23
 c70:	bl	0 <__aeabi_uldivmod>
 c74:	movw	r1, #0
 c78:	mov	r2, r0
 c7c:	mov	r0, r4
 c80:	mov	r3, r7
 c84:	str	r8, [sp]
 c88:	movt	r1, #0
 c8c:	bl	0 <sprintf>
 c90:	sub	sp, fp, #24
 c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 c98:	movw	r1, #0
 c9c:	mov	r0, r4
 ca0:	mov	r2, r7
 ca4:	mov	r3, r8
 ca8:	movt	r1, #0
 cac:	sub	sp, fp, #24
 cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
 cb4:	b	0 <sprintf>

00000cb8 <coda_strfl>:
 cb8:	vmov	r2, r3, d0
 cbc:	movw	ip, #0
 cc0:	mov	r1, r3
 cc4:	movt	ip, #32752	; 0x7ff0
 cc8:	bfc	r1, #20, #12
 ccc:	orrs	r1, r2, r1
 cd0:	beq	cec <coda_strfl+0x34>
 cd4:	and	r1, r3, ip
 cd8:	teq	r1, ip
 cdc:	movweq	r1, #24942	; 0x616e
 ce0:	movteq	r1, #110	; 0x6e
 ce4:	streq	r1, [r0]
 ce8:	bxeq	lr
 cec:	eor	r1, r3, #267386880	; 0xff00000
 cf0:	eor	r1, r1, #-268435456	; 0xf0000000
 cf4:	orrs	r1, r2, r1
 cf8:	beq	d18 <coda_strfl+0x60>
 cfc:	eor	r1, r3, ip
 d00:	orrs	r1, r2, r1
 d04:	bne	d30 <coda_strfl+0x78>
 d08:	mov	r1, #0
 d0c:	strb	r1, [r0, #4]
 d10:	movw	r1, #26923	; 0x692b
 d14:	b	d24 <coda_strfl+0x6c>
 d18:	mov	r1, #0
 d1c:	strb	r1, [r0, #4]
 d20:	movw	r1, #26925	; 0x692d
 d24:	movt	r1, #26222	; 0x666e
 d28:	str	r1, [r0]
 d2c:	bx	lr
 d30:	movw	r1, #0
 d34:	movt	r1, #0
 d38:	b	0 <sprintf>
