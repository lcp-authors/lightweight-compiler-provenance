
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_recognize_file>:
       0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
       4:	add	fp, sp, #24
       8:	sub	sp, sp, #8
       c:	mov	r7, r1
      10:	mov	r1, #0
      14:	mov	r6, r2
      18:	mov	r2, #0
      1c:	mov	r5, r3
      20:	str	r1, [sp, #4]
      24:	mov	r1, sp
      28:	bl	108 <open_file>
      2c:	mvn	r4, #0
      30:	cmp	r0, #0
      34:	bne	fc <coda_recognize_file+0xfc>
      38:	ldr	r8, [sp]
      3c:	add	r1, sp, #4
      40:	mov	r0, r8
      44:	bl	0 <coda_data_dictionary_find_definition_for_product>
      48:	cmp	r0, #0
      4c:	beq	5c <coda_recognize_file+0x5c>
      50:	mov	r0, r8
      54:	bl	678 <coda_close>
      58:	b	fc <coda_recognize_file+0xfc>
      5c:	cmp	r7, #0
      60:	ldrdne	r0, [r8, #8]
      64:	strdne	r0, [r7]
      68:	ldr	r0, [fp, #12]
      6c:	ldr	r1, [fp, #8]
      70:	ldr	r2, [sp, #4]
      74:	cmp	r2, #0
      78:	beq	bc <coda_recognize_file+0xbc>
      7c:	cmp	r6, #0
      80:	ldrne	r3, [r2]
      84:	strne	r3, [r6]
      88:	cmp	r5, #0
      8c:	ldrne	r3, [r2, #44]	; 0x2c
      90:	ldrne	r3, [r3, #20]
      94:	ldrne	r3, [r3]
      98:	strne	r3, [r5]
      9c:	cmp	r1, #0
      a0:	ldrne	r3, [r2, #44]	; 0x2c
      a4:	ldrne	r3, [r3]
      a8:	strne	r3, [r1]
      ac:	cmp	r0, #0
      b0:	beq	f0 <coda_recognize_file+0xf0>
      b4:	ldr	r1, [r2, #4]
      b8:	b	ec <coda_recognize_file+0xec>
      bc:	cmp	r6, #0
      c0:	ldrne	r2, [r8, #16]
      c4:	strne	r2, [r6]
      c8:	cmp	r5, #0
      cc:	movne	r2, #0
      d0:	strne	r2, [r5]
      d4:	cmp	r1, #0
      d8:	movne	r2, #0
      dc:	strne	r2, [r1]
      e0:	cmp	r0, #0
      e4:	beq	f0 <coda_recognize_file+0xf0>
      e8:	mvn	r1, #0
      ec:	str	r1, [r0]
      f0:	mov	r0, r8
      f4:	bl	678 <coda_close>
      f8:	mov	r4, #0
      fc:	mov	r0, r4
     100:	sub	sp, fp, #24
     104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00000108 <open_file>:
     108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     10c:	add	fp, sp, #28
     110:	sub	sp, sp, #620	; 0x26c
     114:	cmp	r0, #0
     118:	beq	658 <open_file+0x550>
     11c:	mov	r4, r0
     120:	mov	r6, r2
     124:	mov	r5, r1
     128:	add	r2, sp, #16
     12c:	mov	r0, #3
     130:	mov	r1, r4
     134:	bl	0 <__xstat>
     138:	cmp	r0, #0
     13c:	beq	160 <open_file+0x58>
     140:	bl	0 <__errno_location>
     144:	ldr	r0, [r0]
     148:	cmp	r0, #2
     14c:	bne	188 <open_file+0x80>
     150:	movw	r1, #0
     154:	mvn	r0, #19
     158:	movt	r1, #0
     15c:	b	178 <open_file+0x70>
     160:	ldrb	r0, [sp, #33]	; 0x21
     164:	tst	r0, #128	; 0x80
     168:	bne	1ac <open_file+0xa4>
     16c:	movw	r1, #0
     170:	mvn	r0, #20
     174:	movt	r1, #0
     178:	mov	r2, r4
     17c:	bl	0 <coda_set_error>
     180:	mvn	r4, #0
     184:	b	208 <open_file+0x100>
     188:	bl	0 <strerror>
     18c:	movw	r1, #0
     190:	mov	r3, r0
     194:	mvn	r0, #20
     198:	mov	r2, r4
     19c:	movt	r1, #0
     1a0:	bl	0 <coda_set_error>
     1a4:	mvn	r4, #0
     1a8:	b	208 <open_file+0x100>
     1ac:	ldr	r2, [sp, #60]	; 0x3c
     1b0:	add	r0, sp, #12
     1b4:	str	r0, [sp]
     1b8:	mov	r0, r4
     1bc:	asr	r3, r2, #31
     1c0:	bl	0 <coda_bin_open>
     1c4:	mvn	r4, #0
     1c8:	cmp	r0, #0
     1cc:	bne	208 <open_file+0x100>
     1d0:	cmp	r6, #0
     1d4:	beq	1e8 <open_file+0xe0>
     1d8:	ldr	r0, [sp, #12]
     1dc:	mov	r4, #0
     1e0:	str	r0, [r5]
     1e4:	b	208 <open_file+0x100>
     1e8:	ldr	r1, [sp, #12]
     1ec:	add	r0, sp, #16
     1f0:	ldrd	r6, [r1, #8]
     1f4:	bl	0 <coda_cursor_set_product>
     1f8:	cmp	r0, #0
     1fc:	beq	214 <open_file+0x10c>
     200:	ldr	r0, [sp, #12]
     204:	bl	678 <coda_close>
     208:	mov	r0, r4
     20c:	sub	sp, fp, #28
     210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     214:	subs	r0, r6, #4
     218:	sbcs	r0, r7, #0
     21c:	blt	1d8 <open_file+0xd0>
     220:	mov	r0, #0
     224:	mov	r1, #4
     228:	mov	r2, #0
     22c:	mov	r3, #0
     230:	str	r1, [sp]
     234:	str	r0, [sp, #4]
     238:	add	r0, sp, #16
     23c:	sub	r1, fp, #112	; 0x70
     240:	bl	0 <coda_cursor_read_bytes>
     244:	cmp	r0, #0
     248:	bne	200 <open_file+0xf8>
     24c:	movw	r1, #0
     250:	sub	r8, fp, #112	; 0x70
     254:	mov	r2, #3
     258:	movt	r1, #0
     25c:	mov	r0, r8
     260:	bl	0 <memcmp>
     264:	cmp	r0, #0
     268:	beq	39c <open_file+0x294>
     26c:	ldr	r0, [fp, #-112]	; 0xffffff90
     270:	movw	r1, #782	; 0x30e
     274:	movt	r1, #275	; 0x113
     278:	cmp	r0, r1
     27c:	beq	3cc <open_file+0x2c4>
     280:	subs	r0, r6, #8
     284:	sbcs	r0, r7, #0
     288:	blt	1d8 <open_file+0xd0>
     28c:	mov	r0, #0
     290:	mov	r1, #4
     294:	mov	r2, #4
     298:	mov	r3, #0
     29c:	str	r1, [sp]
     2a0:	str	r0, [sp, #4]
     2a4:	add	r1, r8, #4
     2a8:	add	r0, sp, #16
     2ac:	bl	0 <coda_cursor_read_bytes>
     2b0:	cmp	r0, #0
     2b4:	bne	200 <open_file+0xf8>
     2b8:	movw	r1, #0
     2bc:	sub	r0, fp, #112	; 0x70
     2c0:	mov	r2, #8
     2c4:	movt	r1, #0
     2c8:	bl	0 <memcmp>
     2cc:	cmp	r0, #0
     2d0:	beq	5e0 <open_file+0x4d8>
     2d4:	movw	r1, #0
     2d8:	sub	r0, fp, #112	; 0x70
     2dc:	mov	r2, #8
     2e0:	movt	r1, #0
     2e4:	bl	0 <memcmp>
     2e8:	cmp	r0, #0
     2ec:	beq	3dc <open_file+0x2d4>
     2f0:	movw	r1, #0
     2f4:	sub	r0, fp, #112	; 0x70
     2f8:	mov	r2, #8
     2fc:	movt	r1, #0
     300:	bl	0 <memcmp>
     304:	cmp	r0, #0
     308:	beq	3dc <open_file+0x2d4>
     30c:	movw	r1, #0
     310:	sub	r0, fp, #112	; 0x70
     314:	mov	r2, #8
     318:	movt	r1, #0
     31c:	bl	0 <memcmp>
     320:	cmp	r0, #0
     324:	beq	3dc <open_file+0x2d4>
     328:	movw	r1, #0
     32c:	sub	r0, fp, #112	; 0x70
     330:	mov	r2, #8
     334:	movt	r1, #0
     338:	bl	0 <memcmp>
     33c:	cmp	r0, #0
     340:	beq	3dc <open_file+0x2d4>
     344:	movw	r1, #0
     348:	sub	r0, fp, #112	; 0x70
     34c:	mov	r2, #8
     350:	movt	r1, #0
     354:	bl	0 <memcmp>
     358:	cmp	r0, #0
     35c:	beq	3dc <open_file+0x2d4>
     360:	ldr	r0, [fp, #-112]	; 0xffffff90
     364:	movw	r1, #21063	; 0x5247
     368:	movt	r1, #16969	; 0x4249
     36c:	cmp	r0, r1
     370:	bne	3f0 <open_file+0x2e8>
     374:	ldrb	r0, [fp, #-105]	; 0xffffff97
     378:	sub	r0, r0, #1
     37c:	uxtb	r0, r0
     380:	cmp	r0, #2
     384:	bcs	3f0 <open_file+0x2e8>
     388:	add	r0, sp, #12
     38c:	bl	0 <coda_grib_reopen>
     390:	cmp	r0, #0
     394:	bne	208 <open_file+0x100>
     398:	b	1d8 <open_file+0xd0>
     39c:	ldrb	r0, [fp, #-109]	; 0xffffff93
     3a0:	cmp	r0, #5
     3a4:	bhi	26c <open_file+0x164>
     3a8:	mov	r1, #1
     3ac:	mov	r2, #38	; 0x26
     3b0:	tst	r2, r1, lsl r0
     3b4:	beq	26c <open_file+0x164>
     3b8:	add	r0, sp, #12
     3bc:	bl	0 <coda_netcdf_reopen>
     3c0:	cmp	r0, #0
     3c4:	bne	208 <open_file+0x100>
     3c8:	b	1d8 <open_file+0xd0>
     3cc:	mvn	r0, #10
     3d0:	mov	r1, #0
     3d4:	bl	0 <coda_set_error>
     3d8:	b	208 <open_file+0x100>
     3dc:	add	r0, sp, #12
     3e0:	bl	0 <coda_cdf_reopen>
     3e4:	cmp	r0, #0
     3e8:	bne	208 <open_file+0x100>
     3ec:	b	1d8 <open_file+0xd0>
     3f0:	movw	r1, #0
     3f4:	sub	r0, fp, #112	; 0x70
     3f8:	mov	r2, #5
     3fc:	movt	r1, #0
     400:	bl	0 <memcmp>
     404:	cmp	r0, #0
     408:	beq	5e8 <open_file+0x4e0>
     40c:	movw	r1, #0
     410:	sub	r8, fp, #112	; 0x70
     414:	mov	r2, #8
     418:	movt	r1, #0
     41c:	mov	r0, r8
     420:	bl	0 <memcmp>
     424:	cmp	r0, #0
     428:	beq	5e8 <open_file+0x4e0>
     42c:	subs	r0, r6, #40	; 0x28
     430:	sbcs	r0, r7, #0
     434:	blt	1d8 <open_file+0xd0>
     438:	mov	r0, #0
     43c:	mov	r1, #32
     440:	mov	r2, #8
     444:	mov	r3, #0
     448:	str	r1, [sp]
     44c:	str	r0, [sp, #4]
     450:	add	r1, r8, #8
     454:	add	r0, sp, #16
     458:	bl	0 <coda_cursor_read_bytes>
     45c:	cmp	r0, #0
     460:	bne	200 <open_file+0xf8>
     464:	subs	r0, r6, #60	; 0x3c
     468:	sbcs	r0, r7, #0
     46c:	blt	504 <open_file+0x3fc>
     470:	ldrb	r0, [fp, #-112]	; 0xffffff90
     474:	cmp	r0, #35	; 0x23
     478:	bne	504 <open_file+0x3fc>
     47c:	ldrb	r0, [fp, #-111]	; 0xffffff91
     480:	sub	r0, r0, #97	; 0x61
     484:	uxtb	r0, r0
     488:	cmp	r0, #2
     48c:	bhi	504 <open_file+0x3fc>
     490:	ldrb	r0, [fp, #-110]	; 0xffffff92
     494:	cmp	r0, #86	; 0x56
     498:	cmpne	r0, #80	; 0x50
     49c:	bne	504 <open_file+0x3fc>
     4a0:	ldrb	r0, [fp, #-109]	; 0xffffff93
     4a4:	sub	r0, r0, #48	; 0x30
     4a8:	uxtb	r0, r0
     4ac:	cmp	r0, #9
     4b0:	bhi	504 <open_file+0x3fc>
     4b4:	ldrb	r0, [fp, #-108]	; 0xffffff94
     4b8:	sub	r0, r0, #48	; 0x30
     4bc:	uxtb	r0, r0
     4c0:	cmp	r0, #9
     4c4:	bhi	504 <open_file+0x3fc>
     4c8:	ldrb	r0, [fp, #-107]	; 0xffffff95
     4cc:	sub	r0, r0, #48	; 0x30
     4d0:	uxtb	r0, r0
     4d4:	cmp	r0, #9
     4d8:	bhi	504 <open_file+0x3fc>
     4dc:	ldrb	r0, [fp, #-106]	; 0xffffff96
     4e0:	sub	r0, r0, #48	; 0x30
     4e4:	uxtb	r0, r0
     4e8:	cmp	r0, #9
     4ec:	bhi	504 <open_file+0x3fc>
     4f0:	ldrb	r0, [fp, #-105]	; 0xffffff97
     4f4:	cmp	r0, #32
     4f8:	ldrbeq	r0, [fp, #-102]	; 0xffffff9a
     4fc:	cmpeq	r0, #32
     500:	beq	610 <open_file+0x508>
     504:	subs	r0, r6, #80	; 0x50
     508:	sbcs	r0, r7, #0
     50c:	blt	1d8 <open_file+0xd0>
     510:	mov	r0, #0
     514:	mov	r1, #20
     518:	mov	r2, #60	; 0x3c
     51c:	mov	r3, #0
     520:	str	r1, [sp]
     524:	str	r0, [sp, #4]
     528:	add	r0, sp, #16
     52c:	sub	r1, fp, #112	; 0x70
     530:	bl	0 <coda_cursor_read_bytes>
     534:	cmp	r0, #0
     538:	bne	200 <open_file+0xf8>
     53c:	movw	r1, #0
     540:	sub	r0, fp, #112	; 0x70
     544:	mov	r2, #20
     548:	movt	r1, #0
     54c:	bl	0 <memcmp>
     550:	cmp	r0, #0
     554:	beq	5fc <open_file+0x4f4>
     558:	movw	r0, #521	; 0x209
     55c:	subs	r0, r6, r0
     560:	sbcs	r0, r7, #0
     564:	blt	1d8 <open_file+0xd0>
     568:	mov	r9, #512	; 0x200
     56c:	sub	sl, fp, #112	; 0x70
     570:	mov	r8, #0
     574:	mov	r0, #8
     578:	mov	r1, sl
     57c:	mov	r2, r9
     580:	mov	r3, r8
     584:	str	r0, [sp]
     588:	mov	r0, #0
     58c:	str	r0, [sp, #4]
     590:	add	r0, sp, #16
     594:	bl	0 <coda_cursor_read_bytes>
     598:	cmp	r0, #0
     59c:	bne	200 <open_file+0xf8>
     5a0:	movw	r1, #0
     5a4:	mov	r0, sl
     5a8:	mov	r2, #8
     5ac:	movt	r1, #0
     5b0:	bl	0 <memcmp>
     5b4:	cmp	r0, #0
     5b8:	beq	5e0 <open_file+0x4d8>
     5bc:	lsl	r0, r8, #1
     5c0:	orr	r8, r0, r9, lsr #31
     5c4:	lsl	r9, r9, #1
     5c8:	adds	r0, r9, #8
     5cc:	adc	r1, r8, #0
     5d0:	subs	r0, r0, r6
     5d4:	sbcs	r0, r1, r7
     5d8:	blt	574 <open_file+0x46c>
     5dc:	b	1d8 <open_file+0xd0>
     5e0:	mvn	r0, #12
     5e4:	b	3d0 <open_file+0x2c8>
     5e8:	add	r0, sp, #12
     5ec:	bl	0 <coda_xml_reopen>
     5f0:	cmp	r0, #0
     5f4:	bne	208 <open_file+0x100>
     5f8:	b	1d8 <open_file+0xd0>
     5fc:	add	r0, sp, #12
     600:	bl	0 <coda_rinex_reopen>
     604:	cmp	r0, #0
     608:	bne	208 <open_file+0x100>
     60c:	b	1d8 <open_file+0xd0>
     610:	ldrb	r0, [fp, #-99]	; 0xffffff9d
     614:	cmp	r0, #32
     618:	ldrbeq	r0, [fp, #-96]	; 0xffffffa0
     61c:	cmpeq	r0, #32
     620:	bne	504 <open_file+0x3fc>
     624:	ldrb	r0, [fp, #-93]	; 0xffffffa3
     628:	cmp	r0, #32
     62c:	ldrbeq	r0, [fp, #-81]	; 0xffffffaf
     630:	cmpeq	r0, #32
     634:	bne	504 <open_file+0x3fc>
     638:	ldrb	r0, [fp, #-73]	; 0xffffffb7
     63c:	cmp	r0, #32
     640:	bne	504 <open_file+0x3fc>
     644:	add	r0, sp, #12
     648:	bl	0 <coda_sp3_reopen>
     64c:	cmp	r0, #0
     650:	bne	208 <open_file+0x100>
     654:	b	1d8 <open_file+0xd0>
     658:	movw	r0, #0
     65c:	movw	r1, #0
     660:	movw	r3, #0
     664:	mov	r2, #162	; 0xa2
     668:	movt	r0, #0
     66c:	movt	r1, #0
     670:	movt	r3, #0
     674:	bl	0 <__assert_fail>

00000678 <coda_close>:
     678:	push	{r4, r5, fp, lr}
     67c:	add	fp, sp, #8
     680:	cmp	r0, #0
     684:	beq	744 <coda_close+0xcc>
     688:	mov	r4, r0
     68c:	ldr	r0, [r0, #28]
     690:	cmp	r0, #0
     694:	beq	6a4 <coda_close+0x2c>
     698:	bl	0 <free>
     69c:	mov	r0, #0
     6a0:	str	r0, [r4, #28]
     6a4:	ldr	r0, [r4, #32]
     6a8:	cmp	r0, #0
     6ac:	beq	6fc <coda_close+0x84>
     6b0:	ldr	r2, [r4, #24]
     6b4:	ldr	r1, [r2, #32]
     6b8:	cmp	r1, #1
     6bc:	blt	6f0 <coda_close+0x78>
     6c0:	mov	r5, #0
     6c4:	ldr	r1, [r0, r5, lsl #2]
     6c8:	cmp	r1, #0
     6cc:	beq	6e0 <coda_close+0x68>
     6d0:	mov	r0, r1
     6d4:	bl	0 <free>
     6d8:	ldr	r2, [r4, #24]
     6dc:	ldr	r0, [r4, #32]
     6e0:	ldr	r1, [r2, #32]
     6e4:	add	r5, r5, #1
     6e8:	cmp	r5, r1
     6ec:	blt	6c4 <coda_close+0x4c>
     6f0:	bl	0 <free>
     6f4:	mov	r0, #0
     6f8:	str	r0, [r4, #32]
     6fc:	ldr	r0, [r4, #16]
     700:	cmp	r0, #9
     704:	bhi	7d8 <coda_close+0x160>
     708:	add	r1, pc, #0
     70c:	ldr	pc, [r1, r0, lsl #2]
     710:	.word	0x00000738
     714:	.word	0x00000788
     718:	.word	0x00000770
     71c:	.word	0x00000794
     720:	.word	0x00000768
     724:	.word	0x000007b4
     728:	.word	0x000007c0
     72c:	.word	0x000007a8
     730:	.word	0x000007cc
     734:	.word	0x0000077c
     738:	mov	r0, r4
     73c:	pop	{r4, r5, fp, lr}
     740:	b	0 <coda_ascii_close>
     744:	movw	r1, #0
     748:	movw	r2, #0
     74c:	mvn	r0, #99	; 0x63
     750:	movw	r3, #777	; 0x309
     754:	movt	r1, #0
     758:	movt	r2, #0
     75c:	bl	0 <coda_set_error>
     760:	mvn	r0, #0
     764:	pop	{r4, r5, fp, pc}
     768:	mvn	r0, #12
     76c:	b	798 <coda_close+0x120>
     770:	mov	r0, r4
     774:	pop	{r4, r5, fp, lr}
     778:	b	0 <coda_xml_close>
     77c:	mov	r0, r4
     780:	pop	{r4, r5, fp, lr}
     784:	b	0 <coda_sp3_close>
     788:	mov	r0, r4
     78c:	pop	{r4, r5, fp, lr}
     790:	b	0 <coda_bin_close>
     794:	mvn	r0, #10
     798:	mov	r1, #0
     79c:	bl	0 <coda_set_error>
     7a0:	mvn	r0, #0
     7a4:	pop	{r4, r5, fp, pc}
     7a8:	mov	r0, r4
     7ac:	pop	{r4, r5, fp, lr}
     7b0:	b	0 <coda_grib_close>
     7b4:	mov	r0, r4
     7b8:	pop	{r4, r5, fp, lr}
     7bc:	b	0 <coda_cdf_close>
     7c0:	mov	r0, r4
     7c4:	pop	{r4, r5, fp, lr}
     7c8:	b	0 <coda_netcdf_close>
     7cc:	mov	r0, r4
     7d0:	pop	{r4, r5, fp, lr}
     7d4:	b	0 <coda_rinex_close>
     7d8:	movw	r0, #0
     7dc:	movw	r1, #0
     7e0:	movw	r3, #0
     7e4:	mov	r2, #836	; 0x344
     7e8:	movt	r0, #0
     7ec:	movt	r1, #0
     7f0:	movt	r3, #0
     7f4:	bl	0 <__assert_fail>

000007f8 <coda_open>:
     7f8:	push	{r4, r5, r6, sl, fp, lr}
     7fc:	add	fp, sp, #16
     800:	sub	sp, sp, #8
     804:	mov	r5, r1
     808:	mov	r1, #0
     80c:	cmp	r0, #0
     810:	str	r1, [sp, #4]
     814:	beq	85c <coda_open+0x64>
     818:	cmp	r5, #0
     81c:	beq	874 <coda_open+0x7c>
     820:	mov	r1, sp
     824:	mov	r2, #0
     828:	bl	108 <open_file>
     82c:	mvn	r4, #0
     830:	cmp	r0, #0
     834:	bne	894 <coda_open+0x9c>
     838:	ldr	r6, [sp]
     83c:	add	r1, sp, #4
     840:	mov	r0, r6
     844:	bl	0 <coda_data_dictionary_find_definition_for_product>
     848:	cmp	r0, #0
     84c:	beq	8a0 <coda_open+0xa8>
     850:	mov	r0, r6
     854:	bl	678 <coda_close>
     858:	b	894 <coda_open+0x9c>
     85c:	movw	r1, #0
     860:	movw	r2, #0
     864:	mvn	r0, #99	; 0x63
     868:	mov	r3, #668	; 0x29c
     86c:	movt	r1, #0
     870:	b	888 <coda_open+0x90>
     874:	movw	r1, #0
     878:	movw	r2, #0
     87c:	mvn	r0, #99	; 0x63
     880:	movw	r3, #673	; 0x2a1
     884:	movt	r1, #0
     888:	movt	r2, #0
     88c:	bl	0 <coda_set_error>
     890:	mvn	r4, #0
     894:	mov	r0, r4
     898:	sub	sp, fp, #16
     89c:	pop	{r4, r5, r6, sl, fp, pc}
     8a0:	ldr	r1, [sp, #4]
     8a4:	mov	r0, sp
     8a8:	bl	8d0 <set_definition>
     8ac:	mov	r1, r0
     8b0:	ldr	r0, [sp]
     8b4:	cmp	r1, #0
     8b8:	beq	8c4 <coda_open+0xcc>
     8bc:	bl	678 <coda_close>
     8c0:	b	894 <coda_open+0x9c>
     8c4:	mov	r4, #0
     8c8:	str	r0, [r5]
     8cc:	b	894 <coda_open+0x9c>

000008d0 <set_definition>:
     8d0:	push	{r4, r5, r6, r7, fp, lr}
     8d4:	add	fp, sp, #16
     8d8:	sub	sp, sp, #8
     8dc:	mov	r4, r0
     8e0:	ldr	r0, [r0]
     8e4:	mov	r6, r1
     8e8:	cmp	r6, #0
     8ec:	ldr	r1, [r0, #16]
     8f0:	beq	974 <set_definition+0xa4>
     8f4:	ldr	r0, [r6]
     8f8:	cmp	r1, r0
     8fc:	beq	940 <set_definition+0x70>
     900:	cmp	r1, #1
     904:	cmpeq	r0, #0
     908:	beq	940 <set_definition+0x70>
     90c:	bl	0 <coda_type_get_format_name>
     910:	mov	r5, r0
     914:	ldr	r0, [r4]
     918:	ldr	r0, [r0, #16]
     91c:	bl	0 <coda_type_get_format_name>
     920:	movw	r1, #0
     924:	mov	r3, r0
     928:	mvn	r0, #199	; 0xc7
     92c:	mov	r2, r5
     930:	movt	r1, #0
     934:	bl	0 <coda_set_error>
     938:	mvn	r5, #0
     93c:	b	aa4 <set_definition+0x1d4>
     940:	ldr	r1, [r6, #24]
     944:	cmp	r1, #0
     948:	beq	994 <set_definition+0xc4>
     94c:	cmp	r0, #2
     950:	beq	9b4 <set_definition+0xe4>
     954:	cmp	r0, #1
     958:	beq	9c4 <set_definition+0xf4>
     95c:	cmp	r0, #0
     960:	bne	9e0 <set_definition+0x110>
     964:	mov	r0, r4
     968:	mov	r1, r6
     96c:	bl	0 <coda_ascii_reopen_with_definition>
     970:	b	9d0 <set_definition+0x100>
     974:	mov	r5, #0
     978:	cmp	r1, #1
     97c:	bhi	aa4 <set_definition+0x1d4>
     980:	mvn	r0, #199	; 0xc7
     984:	mov	r1, #0
     988:	bl	0 <coda_set_error>
     98c:	mvn	r5, #0
     990:	b	aa4 <set_definition+0x1d4>
     994:	mov	r0, r6
     998:	bl	0 <coda_read_product_definition>
     99c:	mvn	r5, #0
     9a0:	cmp	r0, #0
     9a4:	bne	aa4 <set_definition+0x1d4>
     9a8:	ldr	r0, [r6]
     9ac:	cmp	r0, #2
     9b0:	bne	954 <set_definition+0x84>
     9b4:	mov	r0, r4
     9b8:	mov	r1, r6
     9bc:	bl	0 <coda_xml_reopen_with_definition>
     9c0:	b	9d0 <set_definition+0x100>
     9c4:	mov	r0, r4
     9c8:	mov	r1, r6
     9cc:	bl	0 <coda_bin_reopen_with_definition>
     9d0:	mvn	r5, #0
     9d4:	cmp	r0, #0
     9d8:	bne	aa4 <set_definition+0x1d4>
     9dc:	b	9e8 <set_definition+0x118>
     9e0:	ldr	r0, [r4]
     9e4:	str	r6, [r0, #24]
     9e8:	ldr	r5, [r4]
     9ec:	ldr	r0, [r5, #24]
     9f0:	ldr	r7, [r0, #32]
     9f4:	cmp	r7, #1
     9f8:	blt	a6c <set_definition+0x19c>
     9fc:	lsl	r6, r7, #2
     a00:	mov	r0, r6
     a04:	bl	0 <malloc>
     a08:	str	r0, [r5, #28]
     a0c:	ldr	r5, [r4]
     a10:	ldr	r0, [r5, #28]
     a14:	cmp	r0, #0
     a18:	beq	a74 <set_definition+0x1a4>
     a1c:	mov	r0, r6
     a20:	bl	0 <malloc>
     a24:	str	r0, [r5, #32]
     a28:	ldr	r0, [r4]
     a2c:	ldr	r0, [r0, #32]
     a30:	cmp	r0, #0
     a34:	beq	a7c <set_definition+0x1ac>
     a38:	mov	r5, #0
     a3c:	cmp	r7, #1
     a40:	str	r5, [r0]
     a44:	beq	aa4 <set_definition+0x1d4>
     a48:	mov	r0, #1
     a4c:	mov	r5, #0
     a50:	ldr	r1, [r4]
     a54:	ldr	r1, [r1, #32]
     a58:	str	r5, [r1, r0, lsl #2]
     a5c:	add	r0, r0, #1
     a60:	cmp	r7, r0
     a64:	bne	a50 <set_definition+0x180>
     a68:	b	aa4 <set_definition+0x1d4>
     a6c:	mov	r5, #0
     a70:	b	aa4 <set_definition+0x1d4>
     a74:	mov	r0, #500	; 0x1f4
     a78:	b	a80 <set_definition+0x1b0>
     a7c:	movw	r0, #507	; 0x1fb
     a80:	movw	r1, #0
     a84:	movw	r3, #0
     a88:	str	r0, [sp]
     a8c:	mvn	r0, #0
     a90:	mov	r2, r6
     a94:	mvn	r5, #0
     a98:	movt	r1, #0
     a9c:	movt	r3, #0
     aa0:	bl	0 <coda_set_error>
     aa4:	mov	r0, r5
     aa8:	sub	sp, fp, #16
     aac:	pop	{r4, r5, r6, r7, fp, pc}

00000ab0 <coda_open_as>:
     ab0:	push	{r4, r5, r6, r7, fp, lr}
     ab4:	add	fp, sp, #16
     ab8:	sub	sp, sp, #8
     abc:	mov	r5, #0
     ac0:	cmp	r0, #0
     ac4:	str	r5, [sp, #4]
     ac8:	beq	b6c <coda_open_as+0xbc>
     acc:	ldr	r7, [fp, #8]
     ad0:	mov	r4, r0
     ad4:	cmp	r1, #0
     ad8:	beq	b2c <coda_open_as+0x7c>
     adc:	cmp	r2, #0
     ae0:	beq	b84 <coda_open_as+0xd4>
     ae4:	cmp	r7, #0
     ae8:	beq	b9c <coda_open_as+0xec>
     aec:	add	r6, sp, #4
     af0:	mov	r0, r1
     af4:	mov	r1, r2
     af8:	mov	r2, r3
     afc:	mov	r3, r6
     b00:	bl	0 <coda_data_dictionary_get_definition>
     b04:	mvn	r6, #0
     b08:	cmp	r0, #0
     b0c:	bne	bbc <coda_open_as+0x10c>
     b10:	ldr	r0, [sp, #4]
     b14:	cmp	r0, #0
     b18:	beq	b2c <coda_open_as+0x7c>
     b1c:	ldr	r0, [r0]
     b20:	mov	r5, #0
     b24:	cmp	r0, #2
     b28:	movwcc	r5, #1
     b2c:	mov	r1, sp
     b30:	mov	r0, r4
     b34:	mov	r2, r5
     b38:	bl	108 <open_file>
     b3c:	mvn	r6, #0
     b40:	cmp	r0, #0
     b44:	bne	bbc <coda_open_as+0x10c>
     b48:	ldr	r1, [sp, #4]
     b4c:	mov	r0, sp
     b50:	bl	8d0 <set_definition>
     b54:	mov	r1, r0
     b58:	ldr	r0, [sp]
     b5c:	cmp	r1, #0
     b60:	beq	bc8 <coda_open_as+0x118>
     b64:	bl	678 <coda_close>
     b68:	b	bbc <coda_open_as+0x10c>
     b6c:	movw	r1, #0
     b70:	movw	r2, #0
     b74:	mvn	r0, #99	; 0x63
     b78:	movw	r3, #719	; 0x2cf
     b7c:	movt	r1, #0
     b80:	b	bb0 <coda_open_as+0x100>
     b84:	movw	r1, #0
     b88:	movw	r2, #0
     b8c:	mvn	r0, #99	; 0x63
     b90:	movw	r3, #726	; 0x2d6
     b94:	movt	r1, #0
     b98:	b	bb0 <coda_open_as+0x100>
     b9c:	movw	r1, #0
     ba0:	movw	r2, #0
     ba4:	mvn	r0, #99	; 0x63
     ba8:	movw	r3, #731	; 0x2db
     bac:	movt	r1, #0
     bb0:	movt	r2, #0
     bb4:	bl	0 <coda_set_error>
     bb8:	mvn	r6, #0
     bbc:	mov	r0, r6
     bc0:	sub	sp, fp, #16
     bc4:	pop	{r4, r5, r6, r7, fp, pc}
     bc8:	mov	r6, #0
     bcc:	str	r0, [r7]
     bd0:	b	bbc <coda_open_as+0x10c>

00000bd4 <coda_get_product_filename>:
     bd4:	cmp	r0, #0
     bd8:	ldrne	r0, [r0]
     bdc:	strne	r0, [r1]
     be0:	movne	r0, #0
     be4:	bxne	lr
     be8:	push	{fp, lr}
     bec:	mov	fp, sp
     bf0:	movw	r1, #0
     bf4:	movw	r2, #0
     bf8:	mvn	r0, #99	; 0x63
     bfc:	mov	r3, #856	; 0x358
     c00:	movt	r1, #0
     c04:	movt	r2, #0
     c08:	bl	0 <coda_set_error>
     c0c:	mvn	r0, #0
     c10:	pop	{fp, pc}

00000c14 <coda_get_product_file_size>:
     c14:	push	{fp, lr}
     c18:	mov	fp, sp
     c1c:	cmp	r0, #0
     c20:	beq	c54 <coda_get_product_file_size+0x40>
     c24:	cmp	r1, #0
     c28:	ldrne	r3, [r0, #12]
     c2c:	ldrne	r0, [r0, #8]
     c30:	stmne	r1, {r0, r3}
     c34:	movne	r0, #0
     c38:	popne	{fp, pc}
     c3c:	movw	r1, #0
     c40:	movw	r2, #0
     c44:	mvn	r0, #99	; 0x63
     c48:	movw	r3, #881	; 0x371
     c4c:	movt	r1, #0
     c50:	b	c68 <coda_get_product_file_size+0x54>
     c54:	movw	r1, #0
     c58:	movw	r2, #0
     c5c:	mvn	r0, #99	; 0x63
     c60:	mov	r3, #876	; 0x36c
     c64:	movt	r1, #0
     c68:	movt	r2, #0
     c6c:	bl	0 <coda_set_error>
     c70:	mvn	r0, #0
     c74:	pop	{fp, pc}

00000c78 <coda_get_product_format>:
     c78:	push	{fp, lr}
     c7c:	mov	fp, sp
     c80:	cmp	r0, #0
     c84:	beq	cb4 <coda_get_product_format+0x3c>
     c88:	cmp	r1, #0
     c8c:	ldrne	r0, [r0, #16]
     c90:	strne	r0, [r1]
     c94:	movne	r0, #0
     c98:	popne	{fp, pc}
     c9c:	movw	r1, #0
     ca0:	movw	r2, #0
     ca4:	mvn	r0, #99	; 0x63
     ca8:	movw	r3, #909	; 0x38d
     cac:	movt	r1, #0
     cb0:	b	cc8 <coda_get_product_format+0x50>
     cb4:	movw	r1, #0
     cb8:	movw	r2, #0
     cbc:	mvn	r0, #99	; 0x63
     cc0:	mov	r3, #904	; 0x388
     cc4:	movt	r1, #0
     cc8:	movt	r2, #0
     ccc:	bl	0 <coda_set_error>
     cd0:	mvn	r0, #0
     cd4:	pop	{fp, pc}

00000cd8 <coda_get_product_class>:
     cd8:	push	{fp, lr}
     cdc:	mov	fp, sp
     ce0:	cmp	r0, #0
     ce4:	beq	d14 <coda_get_product_class+0x3c>
     ce8:	cmp	r1, #0
     cec:	beq	d2c <coda_get_product_class+0x54>
     cf0:	ldr	r2, [r0, #24]
     cf4:	mov	r3, #0
     cf8:	mov	r0, #0
     cfc:	cmp	r2, #0
     d00:	ldrne	r2, [r2, #44]	; 0x2c
     d04:	ldrne	r2, [r2, #20]
     d08:	ldrne	r3, [r2]
     d0c:	str	r3, [r1]
     d10:	pop	{fp, pc}
     d14:	movw	r1, #0
     d18:	movw	r2, #0
     d1c:	mvn	r0, #99	; 0x63
     d20:	movw	r3, #933	; 0x3a5
     d24:	movt	r1, #0
     d28:	b	d40 <coda_get_product_class+0x68>
     d2c:	movw	r1, #0
     d30:	movw	r2, #0
     d34:	mvn	r0, #99	; 0x63
     d38:	movw	r3, #938	; 0x3aa
     d3c:	movt	r1, #0
     d40:	movt	r2, #0
     d44:	bl	0 <coda_set_error>
     d48:	mvn	r0, #0
     d4c:	pop	{fp, pc}

00000d50 <coda_get_product_type>:
     d50:	push	{fp, lr}
     d54:	mov	fp, sp
     d58:	cmp	r0, #0
     d5c:	beq	d88 <coda_get_product_type+0x38>
     d60:	cmp	r1, #0
     d64:	beq	da0 <coda_get_product_type+0x50>
     d68:	ldr	r2, [r0, #24]
     d6c:	mov	r3, #0
     d70:	mov	r0, #0
     d74:	cmp	r2, #0
     d78:	ldrne	r2, [r2, #44]	; 0x2c
     d7c:	ldrne	r3, [r2]
     d80:	str	r3, [r1]
     d84:	pop	{fp, pc}
     d88:	movw	r1, #0
     d8c:	movw	r2, #0
     d90:	mvn	r0, #99	; 0x63
     d94:	movw	r3, #969	; 0x3c9
     d98:	movt	r1, #0
     d9c:	b	db4 <coda_get_product_type+0x64>
     da0:	movw	r1, #0
     da4:	movw	r2, #0
     da8:	mvn	r0, #99	; 0x63
     dac:	movw	r3, #974	; 0x3ce
     db0:	movt	r1, #0
     db4:	movt	r2, #0
     db8:	bl	0 <coda_set_error>
     dbc:	mvn	r0, #0
     dc0:	pop	{fp, pc}

00000dc4 <coda_get_product_version>:
     dc4:	push	{fp, lr}
     dc8:	mov	fp, sp
     dcc:	cmp	r0, #0
     dd0:	beq	df8 <coda_get_product_version+0x34>
     dd4:	cmp	r1, #0
     dd8:	beq	e10 <coda_get_product_version+0x4c>
     ddc:	ldr	r0, [r0, #24]
     de0:	cmp	r0, #0
     de4:	ldrne	r0, [r0, #4]
     de8:	mvneq	r0, #0
     dec:	str	r0, [r1]
     df0:	mov	r0, #0
     df4:	pop	{fp, pc}
     df8:	movw	r1, #0
     dfc:	movw	r2, #0
     e00:	mvn	r0, #99	; 0x63
     e04:	movw	r3, #1003	; 0x3eb
     e08:	movt	r1, #0
     e0c:	b	e24 <coda_get_product_version+0x60>
     e10:	movw	r1, #0
     e14:	movw	r2, #0
     e18:	mvn	r0, #99	; 0x63
     e1c:	mov	r3, #1008	; 0x3f0
     e20:	movt	r1, #0
     e24:	movt	r2, #0
     e28:	bl	0 <coda_set_error>
     e2c:	mvn	r0, #0
     e30:	pop	{fp, pc}

00000e34 <coda_get_product_root_type>:
     e34:	push	{fp, lr}
     e38:	mov	fp, sp
     e3c:	cmp	r0, #0
     e40:	beq	e7c <coda_get_product_root_type+0x48>
     e44:	cmp	r1, #0
     e48:	beq	e94 <coda_get_product_root_type+0x60>
     e4c:	ldr	r2, [r0, #24]
     e50:	cmp	r2, #0
     e54:	ldrne	r2, [r2, #28]
     e58:	cmpne	r2, #0
     e5c:	bne	e70 <coda_get_product_root_type+0x3c>
     e60:	ldr	r2, [r0, #20]
     e64:	ldr	r0, [r2]
     e68:	cmp	r0, #99	; 0x63
     e6c:	ldrhi	r2, [r2, #4]
     e70:	mov	r0, #0
     e74:	str	r2, [r1]
     e78:	pop	{fp, pc}
     e7c:	movw	r1, #0
     e80:	movw	r2, #0
     e84:	mvn	r0, #99	; 0x63
     e88:	movw	r3, #1043	; 0x413
     e8c:	movt	r1, #0
     e90:	b	ea8 <coda_get_product_root_type+0x74>
     e94:	movw	r1, #0
     e98:	movw	r2, #0
     e9c:	mvn	r0, #99	; 0x63
     ea0:	movw	r3, #1048	; 0x418
     ea4:	movt	r1, #0
     ea8:	movt	r2, #0
     eac:	bl	0 <coda_set_error>
     eb0:	mvn	r0, #0
     eb4:	pop	{fp, pc}

00000eb8 <coda_get_product_definition_file>:
     eb8:	push	{fp, lr}
     ebc:	mov	fp, sp
     ec0:	cmp	r0, #0
     ec4:	beq	ef4 <coda_get_product_definition_file+0x3c>
     ec8:	cmp	r1, #0
     ecc:	beq	f0c <coda_get_product_definition_file+0x54>
     ed0:	ldr	r2, [r0, #24]
     ed4:	mov	r3, #0
     ed8:	mov	r0, #0
     edc:	cmp	r2, #0
     ee0:	ldrne	r2, [r2, #44]	; 0x2c
     ee4:	ldrne	r2, [r2, #20]
     ee8:	ldrne	r3, [r2, #8]
     eec:	str	r3, [r1]
     ef0:	pop	{fp, pc}
     ef4:	movw	r1, #0
     ef8:	movw	r2, #0
     efc:	mvn	r0, #99	; 0x63
     f00:	movw	r3, #1080	; 0x438
     f04:	movt	r1, #0
     f08:	b	f20 <coda_get_product_definition_file+0x68>
     f0c:	movw	r1, #0
     f10:	movw	r2, #0
     f14:	mvn	r0, #99	; 0x63
     f18:	movw	r3, #1085	; 0x43d
     f1c:	movt	r1, #0
     f20:	movt	r2, #0
     f24:	bl	0 <coda_set_error>
     f28:	mvn	r0, #0
     f2c:	pop	{fp, pc}

00000f30 <coda_get_product_variable_value>:
     f30:	push	{r4, r5, r6, r7, fp, lr}
     f34:	add	fp, sp, #16
     f38:	sub	sp, sp, #8
     f3c:	cmp	r0, #0
     f40:	beq	f88 <coda_get_product_variable_value+0x58>
     f44:	mov	r5, r1
     f48:	cmp	r1, #0
     f4c:	beq	fa4 <coda_get_product_variable_value+0x74>
     f50:	mov	r6, r2
     f54:	mov	r2, sp
     f58:	mov	r1, r5
     f5c:	mov	r4, r3
     f60:	mov	r7, r0
     f64:	bl	0 <coda_product_variable_get_size>
     f68:	cmp	r0, #0
     f6c:	beq	fc0 <coda_get_product_variable_value+0x90>
     f70:	movw	r1, #0
     f74:	mvn	r0, #101	; 0x65
     f78:	mov	r2, r5
     f7c:	movt	r1, #0
     f80:	bl	0 <coda_set_error>
     f84:	b	fe8 <coda_get_product_variable_value+0xb8>
     f88:	movw	r1, #0
     f8c:	movw	r2, #0
     f90:	mvn	r0, #99	; 0x63
     f94:	movw	r3, #1124	; 0x464
     f98:	movt	r1, #0
     f9c:	movt	r2, #0
     fa0:	b	fe4 <coda_get_product_variable_value+0xb4>
     fa4:	movw	r1, #0
     fa8:	movw	r2, #0
     fac:	mvn	r0, #99	; 0x63
     fb0:	movw	r3, #1129	; 0x469
     fb4:	movt	r1, #0
     fb8:	movt	r2, #0
     fbc:	b	fe4 <coda_get_product_variable_value+0xb4>
     fc0:	cmp	r6, #0
     fc4:	ldrge	r0, [sp]
     fc8:	cmpge	r0, r6
     fcc:	bgt	ff4 <coda_get_product_variable_value+0xc4>
     fd0:	movw	r1, #0
     fd4:	mvn	r0, #100	; 0x64
     fd8:	mov	r2, r6
     fdc:	mov	r3, r5
     fe0:	movt	r1, #0
     fe4:	bl	0 <coda_set_error>
     fe8:	mvn	r0, #0
     fec:	sub	sp, fp, #16
     ff0:	pop	{r4, r5, r6, r7, fp, pc}
     ff4:	add	r3, sp, #4
     ff8:	mov	r0, r7
     ffc:	mov	r1, r5
    1000:	mov	r2, r6
    1004:	bl	0 <coda_product_variable_get_pointer>
    1008:	mov	r1, r0
    100c:	mvn	r0, #0
    1010:	cmp	r1, #0
    1014:	beq	1020 <coda_get_product_variable_value+0xf0>
    1018:	sub	sp, fp, #16
    101c:	pop	{r4, r5, r6, r7, fp, pc}
    1020:	ldr	r0, [sp, #4]
    1024:	ldrd	r0, [r0]
    1028:	strd	r0, [r4]
    102c:	mov	r0, #0
    1030:	sub	sp, fp, #16
    1034:	pop	{r4, r5, r6, r7, fp, pc}
