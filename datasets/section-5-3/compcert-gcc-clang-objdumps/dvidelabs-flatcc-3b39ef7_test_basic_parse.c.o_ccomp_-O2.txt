
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/CMakeFiles/test_basic_parse.dir/test_basic_parse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <test>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #120	; 0x78
       8:	str	ip, [sp, #4]
       c:	str	lr, [sp, #8]
      10:	str	r4, [sp, #16]
      14:	str	r5, [sp, #20]
      18:	str	r6, [sp, #24]
      1c:	str	r7, [sp, #28]
      20:	str	r8, [sp, #32]
      24:	str	r9, [sp, #36]	; 0x24
      28:	str	sl, [sp, #40]	; 0x28
      2c:	str	fp, [sp, #44]	; 0x2c
      30:	mov	r6, r3
      34:	mov	r5, r2
      38:	mov	r4, r1
      3c:	mov	r7, r0
      40:	add	r9, sp, #56	; 0x38
      44:	mov	r1, #0
      48:	mov	r2, #44	; 0x2c
      4c:	mov	r0, r9
      50:	bl	0 <memset>
      54:	mov	r0, #1
      58:	str	r0, [sp, #72]	; 0x48
      5c:	str	r4, [sp, #60]	; 0x3c
      60:	ldr	r1, [pc, #4012]	; 1014 <test+0x1014>
      64:	mov	r2, #0
      68:	mov	r3, #0
      6c:	mov	r0, r7
      70:	bl	0 <flatcc_builder_start_buffer>
      74:	mov	r2, r5
      78:	mov	r1, r4
      7c:	add	r0, sp, #56	; 0x38
      80:	sub	r3, r2, r1
      84:	cmp	r3, #1
      88:	ble	bc <test+0xbc>
      8c:	ldrb	r3, [r1]
      90:	cmp	r3, #32
      94:	ble	a0 <test+0xa0>
      98:	mov	r0, r1
      9c:	b	c0 <test+0xc0>
      a0:	cmp	r3, #32
      a4:	bne	bc <test+0xbc>
      a8:	ldrb	r3, [r1, #1]
      ac:	cmp	r3, #32
      b0:	ble	bc <test+0xbc>
      b4:	add	r0, r1, #1
      b8:	b	c0 <test+0xc0>
      bc:	bl	0 <flatcc_json_parser_space_ext>
      c0:	mov	sl, r0
      c4:	cmp	sl, r5
      c8:	bne	e0 <test+0xe0>
      cc:	ldr	ip, [pc, #3916]	; 1020 <test+0x1020>
      d0:	ldr	r0, [ip]
      d4:	ldr	r1, [pc, #3904]	; 101c <test+0x101c>
      d8:	bl	0 <fprintf>
      dc:	b	176c <test+0x176c>
      e0:	cmp	r5, sl
      e4:	bls	1740 <test+0x1740>
      e8:	ldrb	r2, [sl]
      ec:	cmp	r2, #123	; 0x7b
      f0:	bne	1740 <test+0x1740>
      f4:	add	r1, sl, #1
      f8:	add	r2, sp, #56	; 0x38
      fc:	sub	r3, r5, r1
     100:	cmp	r3, #1
     104:	ble	138 <test+0x138>
     108:	ldrb	r3, [r0, #1]
     10c:	cmp	r3, #32
     110:	ble	11c <test+0x11c>
     114:	mov	r0, r1
     118:	b	144 <test+0x144>
     11c:	cmp	r3, #32
     120:	bne	138 <test+0x138>
     124:	ldrb	r3, [r0, #2]
     128:	cmp	r3, #32
     12c:	ble	138 <test+0x138>
     130:	add	r0, r0, #2
     134:	b	144 <test+0x144>
     138:	mov	r0, r2
     13c:	mov	r2, r5
     140:	bl	0 <flatcc_json_parser_space_ext>
     144:	mov	sl, r0
     148:	cmp	sl, r5
     14c:	bne	164 <test+0x164>
     150:	ldr	r2, [pc, #3784]	; 1020 <test+0x1020>
     154:	ldr	r0, [r2]
     158:	ldr	r1, [pc, #3772]	; 101c <test+0x101c>
     15c:	bl	0 <fprintf>
     160:	b	176c <test+0x176c>
     164:	mov	r1, #11
     168:	mov	r0, r7
     16c:	bl	0 <flatcc_builder_start_table>
     170:	mov	r2, r5
     174:	mov	r1, sl
     178:	add	r0, sp, #56	; 0x38
     17c:	cmp	r1, r2
     180:	beq	1bc <test+0x1bc>
     184:	ldrb	r3, [r1]
     188:	cmp	r3, #34	; 0x22
     18c:	beq	1b0 <test+0x1b0>
     190:	cmp	r3, #46	; 0x2e
     194:	bne	1a4 <test+0x1a4>
     198:	mov	r3, #5
     19c:	bl	0 <flatcc_json_parser_set_error>
     1a0:	b	1c0 <test+0x1c0>
     1a4:	mov	r2, #1
     1a8:	str	r2, [sp, #68]	; 0x44
     1ac:	b	1bc <test+0x1bc>
     1b0:	add	r1, r1, #1
     1b4:	mov	r2, #0
     1b8:	str	r2, [sp, #68]	; 0x44
     1bc:	mov	r0, r1
     1c0:	mov	r1, r0
     1c4:	sub	r0, r5, r1
     1c8:	mov	ip, r1
     1cc:	mov	r2, #0
     1d0:	mov	r3, #0
     1d4:	mov	r4, #8
     1d8:	cmp	r0, #8
     1dc:	movhi	r0, r4
     1e0:	movls	r0, r0
     1e4:	cmp	r0, #9
     1e8:	bcs	264 <test+0x264>
     1ec:	add	pc, pc, r0, lsl #2
     1f0:	nop	{0}
     1f4:	b	264 <test+0x264>
     1f8:	b	25c <test+0x25c>
     1fc:	b	254 <test+0x254>
     200:	b	24c <test+0x24c>
     204:	b	244 <test+0x244>
     208:	b	238 <test+0x238>
     20c:	b	22c <test+0x22c>
     210:	b	220 <test+0x220>
     214:	b	218 <test+0x218>
     218:	mov	r2, #0
     21c:	ldrb	r3, [ip, #7]
     220:	ldrb	r0, [ip, #6]
     224:	orr	r2, r2, r0, lsr #24
     228:	orr	r3, r3, r0, lsl #8
     22c:	ldrb	r0, [ip, #5]
     230:	orr	r2, r2, r0, lsr #16
     234:	orr	r3, r3, r0, lsl #16
     238:	ldrb	r0, [ip, #4]
     23c:	orr	r2, r2, r0, lsr #8
     240:	orr	r3, r3, r0, lsl #24
     244:	ldrb	r0, [ip, #3]
     248:	orr	r2, r2, r0
     24c:	ldrb	r0, [ip, #2]
     250:	orr	r2, r2, r0, lsl #8
     254:	ldrb	r0, [ip, #1]
     258:	orr	r2, r2, r0, lsl #16
     25c:	ldrb	ip, [ip]
     260:	orr	r2, r2, ip, lsl #24
     264:	add	ip, r1, #8
     268:	sub	r0, r5, r1
     26c:	cmp	r0, #8
     270:	movgt	ip, ip
     274:	movle	ip, r5
     278:	mov	r4, r2
     27c:	mov	r0, r3
     280:	bic	r0, r0, #255	; 0xff
     284:	bic	r0, r0, #65280	; 0xff00
     288:	movw	lr, #25455	; 0x636f
     28c:	movt	lr, #29541	; 0x7365
     290:	cmp	r4, lr
     294:	bne	2ac <test+0x2ac>
     298:	movw	lr, #0
     29c:	movt	lr, #28260	; 0x6e64
     2a0:	cmp	r0, lr
     2a4:	bcc	1210 <test+0x1210>
     2a8:	b	2bc <test+0x2bc>
     2ac:	movw	lr, #25455	; 0x636f
     2b0:	movt	lr, #29541	; 0x7365
     2b4:	cmp	r4, lr
     2b8:	bcc	1210 <test+0x1210>
     2bc:	mov	r4, r2
     2c0:	mov	r0, r4
     2c4:	movw	lr, #27765	; 0x6c75
     2c8:	movt	lr, #31349	; 0x7a75
     2cc:	cmp	r0, lr
     2d0:	beq	2e4 <test+0x2e4>
     2d4:	movw	lr, #27765	; 0x6c75
     2d8:	movt	lr, #31349	; 0x7a75
     2dc:	cmp	r0, lr
     2e0:	bcc	6cc <test+0x6cc>
     2e4:	mov	ip, #0
     2e8:	eor	r0, r2, #117	; 0x75
     2ec:	eor	r0, r0, #93184	; 0x16c00
     2f0:	eor	r0, r0, #41156608	; 0x2740000
     2f4:	eor	r0, r0, #2013265920	; 0x78000000
     2f8:	orr	r3, r0, ip
     2fc:	cmp	r3, #0
     300:	bne	6b4 <test+0x6b4>
     304:	add	r1, r1, #4
     308:	mov	r2, r5
     30c:	add	r0, sp, #56	; 0x38
     310:	mov	r3, #0
     314:	ldr	ip, [sp, #68]	; 0x44
     318:	cmp	ip, #0
     31c:	beq	3dc <test+0x3dc>
     320:	cmp	r1, r2
     324:	beq	3c8 <test+0x3c8>
     328:	ldrb	ip, [r1]
     32c:	cmp	ip, #32
     330:	ble	3c8 <test+0x3c8>
     334:	and	r3, ip, #255	; 0xff
     338:	mov	r8, #1
     33c:	cmp	r3, #46	; 0x2e
     340:	moveq	r4, #1
     344:	movne	r4, #0
     348:	cmp	r3, #95	; 0x5f
     34c:	moveq	r8, r8
     350:	movne	r8, r4
     354:	mov	r4, #1
     358:	and	ip, ip, #128	; 0x80
     35c:	cmp	ip, #0
     360:	movne	ip, #1
     364:	moveq	ip, #0
     368:	cmp	r8, #0
     36c:	movne	ip, r4
     370:	moveq	ip, ip
     374:	cmp	ip, #0
     378:	bne	3c0 <test+0x3c0>
     37c:	cmp	r3, #48	; 0x30
     380:	blt	38c <test+0x38c>
     384:	cmp	r3, #57	; 0x39
     388:	ble	3c0 <test+0x3c0>
     38c:	orr	ip, r3, #32
     390:	and	r8, ip, #255	; 0xff
     394:	cmp	r8, #122	; 0x7a
     398:	movle	ip, #1
     39c:	movgt	ip, #0
     3a0:	mov	r4, #0
     3a4:	cmp	r8, #97	; 0x61
     3a8:	movge	ip, ip
     3ac:	movlt	ip, r4
     3b0:	cmp	ip, #0
     3b4:	beq	3c8 <test+0x3c8>
     3b8:	add	r1, r1, #1
     3bc:	b	320 <test+0x320>
     3c0:	add	r1, r1, #1
     3c4:	b	320 <test+0x320>
     3c8:	cmp	r3, #46	; 0x2e
     3cc:	bne	428 <test+0x428>
     3d0:	mov	r3, #5
     3d4:	bl	0 <flatcc_json_parser_set_error>
     3d8:	b	438 <test+0x438>
     3dc:	cmp	r1, r2
     3e0:	beq	410 <test+0x410>
     3e4:	ldrb	r3, [r1]
     3e8:	cmp	r3, #34	; 0x22
     3ec:	beq	410 <test+0x410>
     3f0:	cmp	r3, #92	; 0x5c
     3f4:	bne	408 <test+0x408>
     3f8:	sub	r3, r2, r1
     3fc:	cmp	r3, #2
     400:	blt	410 <test+0x410>
     404:	add	r1, r1, #1
     408:	add	r1, r1, #1
     40c:	b	3dc <test+0x3dc>
     410:	cmp	r1, r2
     414:	beq	430 <test+0x430>
     418:	ldrb	r3, [r1]
     41c:	cmp	r3, #34	; 0x22
     420:	bne	430 <test+0x430>
     424:	add	r1, r1, #1
     428:	mov	r0, r1
     42c:	b	438 <test+0x438>
     430:	mov	r3, #20
     434:	bl	0 <flatcc_json_parser_set_error>
     438:	mov	r2, r5
     43c:	mov	r1, r0
     440:	add	r0, sp, #56	; 0x38
     444:	sub	r3, r2, r1
     448:	cmp	r3, #1
     44c:	ble	480 <test+0x480>
     450:	ldrb	r3, [r1]
     454:	cmp	r3, #32
     458:	ble	464 <test+0x464>
     45c:	mov	sl, r1
     460:	b	488 <test+0x488>
     464:	cmp	r3, #32
     468:	bne	480 <test+0x480>
     46c:	ldrb	r3, [r1, #1]
     470:	cmp	r3, #32
     474:	ble	480 <test+0x480>
     478:	add	sl, r1, #1
     47c:	b	488 <test+0x488>
     480:	bl	0 <flatcc_json_parser_space_ext>
     484:	mov	sl, r0
     488:	cmp	sl, r5
     48c:	bne	4a4 <test+0x4a4>
     490:	ldr	r0, [pc, #2952]	; 1020 <test+0x1020>
     494:	ldr	r0, [r0]
     498:	ldr	r1, [pc, #2940]	; 101c <test+0x101c>
     49c:	bl	0 <fprintf>
     4a0:	b	176c <test+0x176c>
     4a4:	cmp	r5, sl
     4a8:	bls	684 <test+0x684>
     4ac:	ldrb	r3, [sl]
     4b0:	cmp	r3, #58	; 0x3a
     4b4:	bne	684 <test+0x684>
     4b8:	add	r1, sl, #1
     4bc:	mov	r2, r5
     4c0:	add	r0, sp, #56	; 0x38
     4c4:	sub	r3, r2, r1
     4c8:	cmp	r3, #1
     4cc:	ble	500 <test+0x500>
     4d0:	ldrb	r3, [sl, #1]
     4d4:	cmp	r3, #32
     4d8:	ble	4e4 <test+0x4e4>
     4dc:	mov	r0, r1
     4e0:	b	504 <test+0x504>
     4e4:	cmp	r3, #32
     4e8:	bne	500 <test+0x500>
     4ec:	ldrb	r3, [sl, #2]
     4f0:	cmp	r3, #32
     4f4:	ble	500 <test+0x500>
     4f8:	add	r0, sl, #2
     4fc:	b	504 <test+0x504>
     500:	bl	0 <flatcc_json_parser_space_ext>
     504:	mov	sl, r0
     508:	cmp	sl, r5
     50c:	bne	524 <test+0x524>
     510:	ldr	r0, [pc, #2824]	; 1020 <test+0x1020>
     514:	ldr	r0, [r0]
     518:	ldr	r1, [pc, #2812]	; 101c <test+0x101c>
     51c:	bl	0 <fprintf>
     520:	b	176c <test+0x176c>
     524:	mov	r1, sl
     528:	add	r0, sp, #56	; 0x38
     52c:	cmp	r1, r5
     530:	beq	548 <test+0x548>
     534:	ldrb	ip, [r1]
     538:	cmp	ip, #34	; 0x22
     53c:	bne	548 <test+0x548>
     540:	add	r1, r1, #1
     544:	b	558 <test+0x558>
     548:	mov	r3, #16
     54c:	mov	r2, r5
     550:	bl	0 <flatcc_json_parser_set_error>
     554:	mov	r1, r0
     558:	mov	r4, r1
     55c:	mov	r2, r5
     560:	mov	r0, r9
     564:	bl	0 <flatcc_json_parser_string_part>
     568:	mov	sl, r0
     56c:	cmp	sl, r5
     570:	beq	176c <test+0x176c>
     574:	ldrb	ip, [sl]
     578:	cmp	ip, #34	; 0x22
     57c:	beq	618 <test+0x618>
     580:	mov	r0, r7
     584:	bl	0 <flatcc_builder_start_string>
     588:	sub	r1, sl, r4
     58c:	mov	r0, r7
     590:	bl	0 <flatcc_builder_extend_string>
     594:	cmp	r0, #0
     598:	beq	176c <test+0x176c>
     59c:	sub	r2, sl, r4
     5a0:	mov	r1, r4
     5a4:	bl	0 <memcpy>
     5a8:	add	r3, sp, #48	; 0x30
     5ac:	mov	r2, r5
     5b0:	mov	r1, sl
     5b4:	mov	r0, r9
     5b8:	bl	0 <flatcc_json_parser_string_escape>
     5bc:	mov	r4, r0
     5c0:	add	r1, sp, #49	; 0x31
     5c4:	ldrb	r2, [sp, #48]	; 0x30
     5c8:	mov	r0, r7
     5cc:	bl	0 <flatcc_builder_append_string>
     5d0:	mov	r2, r5
     5d4:	mov	r1, r4
     5d8:	mov	r0, r9
     5dc:	bl	0 <flatcc_json_parser_string_part>
     5e0:	mov	sl, r0
     5e4:	cmp	sl, r5
     5e8:	beq	176c <test+0x176c>
     5ec:	sub	r2, sl, r4
     5f0:	mov	r1, r4
     5f4:	mov	r0, r7
     5f8:	bl	0 <flatcc_builder_append_string>
     5fc:	ldrb	r0, [sl]
     600:	cmp	r0, #34	; 0x22
     604:	bne	5a8 <test+0x5a8>
     608:	mov	r0, r7
     60c:	bl	0 <flatcc_builder_end_string>
     610:	mov	r4, r0
     614:	b	62c <test+0x62c>
     618:	sub	r2, sl, r4
     61c:	mov	r1, r4
     620:	mov	r0, r7
     624:	bl	0 <flatcc_builder_create_string>
     628:	mov	r4, r0
     62c:	cmp	r4, #0
     630:	beq	176c <test+0x176c>
     634:	mov	r1, #10
     638:	mov	r0, r7
     63c:	bl	0 <flatcc_builder_table_add_offset>
     640:	cmp	r0, #0
     644:	beq	176c <test+0x176c>
     648:	str	r4, [r0]
     64c:	mov	r1, sl
     650:	add	r0, sp, #56	; 0x38
     654:	cmp	r1, r5
     658:	beq	670 <test+0x670>
     65c:	ldrb	r3, [r1]
     660:	cmp	r3, #34	; 0x22
     664:	bne	670 <test+0x670>
     668:	add	sl, r1, #1
     66c:	b	1548 <test+0x1548>
     670:	mov	r3, #20
     674:	mov	r2, r5
     678:	bl	0 <flatcc_json_parser_set_error>
     67c:	mov	sl, r0
     680:	b	1548 <test+0x1548>
     684:	ldr	r3, [pc, #2452]	; 1020 <test+0x1020>
     688:	ldr	r0, [r3]
     68c:	ldr	r1, [pc, #2436]	; 1018 <test+0x1018>
     690:	mov	r2, #58	; 0x3a
     694:	bl	0 <fprintf>
     698:	mov	r3, #17
     69c:	mov	r2, r5
     6a0:	mov	r1, sl
     6a4:	mov	r0, r9
     6a8:	bl	0 <flatcc_json_parser_set_error>
     6ac:	mov	sl, r0
     6b0:	b	176c <test+0x176c>
     6b4:	mov	r3, #13
     6b8:	mov	r2, r5
     6bc:	mov	r0, r9
     6c0:	bl	0 <flatcc_json_parser_set_error>
     6c4:	mov	sl, r0
     6c8:	b	176c <test+0x176c>
     6cc:	mov	r0, r3
     6d0:	movw	lr, #25455	; 0x636f
     6d4:	movt	lr, #29541	; 0x7365
     6d8:	cmp	r4, lr
     6dc:	bne	6f4 <test+0x6f4>
     6e0:	movw	lr, #29472	; 0x7320
     6e4:	movt	lr, #28260	; 0x6e64
     6e8:	cmp	r0, lr
     6ec:	bcc	f2c <test+0xf2c>
     6f0:	b	704 <test+0x704>
     6f4:	movw	lr, #25455	; 0x636f
     6f8:	movt	lr, #29541	; 0x7365
     6fc:	cmp	r4, lr
     700:	bcc	f2c <test+0xf2c>
     704:	eor	r0, r2, #111	; 0x6f
     708:	eor	r0, r0, #25344	; 0x6300
     70c:	eor	r0, r0, #6619136	; 0x650000
     710:	eor	r0, r0, #1929379840	; 0x73000000
     714:	eor	r2, r3, #800	; 0x320
     718:	eor	r2, r2, #290816	; 0x47000
     71c:	eor	r2, r2, #241172480	; 0xe600000
     720:	eor	r2, r2, #1610612736	; 0x60000000
     724:	orr	r0, r0, r2
     728:	cmp	r0, #0
     72c:	bne	f14 <test+0xf14>
     730:	sub	r2, r5, ip
     734:	mov	r3, ip
     738:	mov	r1, #0
     73c:	mov	r0, #8
     740:	cmp	r2, #8
     744:	movhi	r2, r0
     748:	movls	r2, r2
     74c:	cmp	r2, #9
     750:	bcs	7bc <test+0x7bc>
     754:	add	pc, pc, r2, lsl #2
     758:	nop	{0}
     75c:	b	7bc <test+0x7bc>
     760:	b	7b4 <test+0x7b4>
     764:	b	7ac <test+0x7ac>
     768:	b	7a4 <test+0x7a4>
     76c:	b	79c <test+0x79c>
     770:	b	794 <test+0x794>
     774:	b	78c <test+0x78c>
     778:	b	784 <test+0x784>
     77c:	b	780 <test+0x780>
     780:	mov	r1, #0
     784:	ldrb	r2, [r3, #6]
     788:	orr	r1, r1, r2, lsr #24
     78c:	ldrb	r0, [r3, #5]
     790:	orr	r1, r1, r0, lsr #16
     794:	ldrb	r2, [r3, #4]
     798:	orr	r1, r1, r2, lsr #8
     79c:	ldrb	r2, [r3, #3]
     7a0:	orr	r1, r1, r2
     7a4:	ldrb	r0, [r3, #2]
     7a8:	orr	r1, r1, r0, lsl #8
     7ac:	ldrb	r2, [r3, #1]
     7b0:	orr	r1, r1, r2, lsl #16
     7b4:	ldrb	r0, [r3]
     7b8:	orr	r1, r1, r0, lsl #24
     7bc:	mov	r2, r1
     7c0:	mov	r3, #0
     7c4:	movw	lr, #26228	; 0x6674
     7c8:	movt	lr, #27749	; 0x6c65
     7cc:	cmp	r2, lr
     7d0:	beq	7e4 <test+0x7e4>
     7d4:	movw	lr, #26228	; 0x6674
     7d8:	movt	lr, #27749	; 0x6c65
     7dc:	cmp	r2, lr
     7e0:	bcc	b5c <test+0xb5c>
     7e4:	mov	r3, #0
     7e8:	eor	r0, r1, #628	; 0x274
     7ec:	eor	r0, r0, #91136	; 0x16400
     7f0:	eor	r0, r0, #6553600	; 0x640000
     7f4:	eor	r0, r0, #1811939328	; 0x6c000000
     7f8:	orr	r2, r0, r3
     7fc:	cmp	r2, #0
     800:	bne	b40 <test+0xb40>
     804:	add	r1, ip, #4
     808:	mov	r2, r5
     80c:	add	r0, sp, #56	; 0x38
     810:	mov	r3, #0
     814:	ldr	ip, [sp, #68]	; 0x44
     818:	cmp	ip, #0
     81c:	beq	8e0 <test+0x8e0>
     820:	cmp	r1, r2
     824:	beq	8c8 <test+0x8c8>
     828:	ldrb	ip, [r1]
     82c:	cmp	ip, #32
     830:	ble	8c8 <test+0x8c8>
     834:	and	r3, ip, #255	; 0xff
     838:	mov	r8, #1
     83c:	cmp	r3, #46	; 0x2e
     840:	moveq	r4, #1
     844:	movne	r4, #0
     848:	cmp	r3, #95	; 0x5f
     84c:	moveq	r8, r8
     850:	movne	r8, r4
     854:	mov	r4, #1
     858:	and	ip, ip, #128	; 0x80
     85c:	cmp	ip, #0
     860:	movne	ip, #1
     864:	moveq	ip, #0
     868:	cmp	r8, #0
     86c:	movne	ip, r4
     870:	moveq	ip, ip
     874:	cmp	ip, #0
     878:	bne	8c0 <test+0x8c0>
     87c:	cmp	r3, #48	; 0x30
     880:	blt	88c <test+0x88c>
     884:	cmp	r3, #57	; 0x39
     888:	ble	8c0 <test+0x8c0>
     88c:	orr	ip, r3, #32
     890:	and	ip, ip, #255	; 0xff
     894:	cmp	ip, #122	; 0x7a
     898:	movle	r4, #1
     89c:	movgt	r4, #0
     8a0:	mov	r8, #0
     8a4:	cmp	ip, #97	; 0x61
     8a8:	movge	ip, r4
     8ac:	movlt	ip, r8
     8b0:	cmp	ip, #0
     8b4:	beq	8c8 <test+0x8c8>
     8b8:	add	r1, r1, #1
     8bc:	b	820 <test+0x820>
     8c0:	add	r1, r1, #1
     8c4:	b	820 <test+0x820>
     8c8:	cmp	r3, #46	; 0x2e
     8cc:	bne	93c <test+0x93c>
     8d0:	mov	r3, #5
     8d4:	bl	0 <flatcc_json_parser_set_error>
     8d8:	mov	r1, r0
     8dc:	b	93c <test+0x93c>
     8e0:	cmp	r1, r2
     8e4:	beq	914 <test+0x914>
     8e8:	ldrb	r3, [r1]
     8ec:	cmp	r3, #34	; 0x22
     8f0:	beq	914 <test+0x914>
     8f4:	cmp	r3, #92	; 0x5c
     8f8:	bne	90c <test+0x90c>
     8fc:	sub	r3, r2, r1
     900:	cmp	r3, #2
     904:	blt	914 <test+0x914>
     908:	add	r1, r1, #1
     90c:	add	r1, r1, #1
     910:	b	8e0 <test+0x8e0>
     914:	cmp	r1, r2
     918:	beq	930 <test+0x930>
     91c:	ldrb	ip, [r1]
     920:	cmp	ip, #34	; 0x22
     924:	bne	930 <test+0x930>
     928:	add	r1, r1, #1
     92c:	b	93c <test+0x93c>
     930:	mov	r3, #20
     934:	bl	0 <flatcc_json_parser_set_error>
     938:	mov	r1, r0
     93c:	mov	r2, r5
     940:	add	r0, sp, #56	; 0x38
     944:	sub	ip, r2, r1
     948:	cmp	ip, #1
     94c:	ble	97c <test+0x97c>
     950:	ldrb	r3, [r1]
     954:	cmp	r3, #32
     958:	bgt	974 <test+0x974>
     95c:	cmp	r3, #32
     960:	bne	97c <test+0x97c>
     964:	ldrb	r3, [r1, #1]
     968:	cmp	r3, #32
     96c:	ble	97c <test+0x97c>
     970:	add	r1, r1, #1
     974:	mov	r3, r1
     978:	b	984 <test+0x984>
     97c:	bl	0 <flatcc_json_parser_space_ext>
     980:	mov	r3, r0
     984:	mov	sl, r3
     988:	cmp	sl, r5
     98c:	bne	9a4 <test+0x9a4>
     990:	ldr	ip, [pc, #1672]	; 1020 <test+0x1020>
     994:	ldr	r0, [ip]
     998:	ldr	r1, [pc, #1660]	; 101c <test+0x101c>
     99c:	bl	0 <fprintf>
     9a0:	b	176c <test+0x176c>
     9a4:	cmp	r5, sl
     9a8:	bls	b10 <test+0xb10>
     9ac:	ldrb	r1, [sl]
     9b0:	cmp	r1, #58	; 0x3a
     9b4:	bne	b10 <test+0xb10>
     9b8:	add	r1, sl, #1
     9bc:	mov	r2, r5
     9c0:	add	r0, sp, #56	; 0x38
     9c4:	sub	ip, r2, r1
     9c8:	cmp	ip, #1
     9cc:	ble	9fc <test+0x9fc>
     9d0:	ldrb	ip, [r3, #1]
     9d4:	cmp	ip, #32
     9d8:	bgt	9f4 <test+0x9f4>
     9dc:	cmp	ip, #32
     9e0:	bne	9fc <test+0x9fc>
     9e4:	ldrb	ip, [r3, #2]
     9e8:	cmp	ip, #32
     9ec:	ble	9fc <test+0x9fc>
     9f0:	add	r1, r3, #2
     9f4:	mov	sl, r1
     9f8:	b	a04 <test+0xa04>
     9fc:	bl	0 <flatcc_json_parser_space_ext>
     a00:	mov	sl, r0
     a04:	cmp	sl, r5
     a08:	bne	a20 <test+0xa20>
     a0c:	ldr	ip, [pc, #1548]	; 1020 <test+0x1020>
     a10:	ldr	r0, [ip]
     a14:	ldr	r1, [pc, #1536]	; 101c <test+0x101c>
     a18:	bl	0 <fprintf>
     a1c:	b	176c <test+0x176c>
     a20:	mov	r1, #2
     a24:	mov	r2, #4
     a28:	mov	r3, #4
     a2c:	mov	r0, r7
     a30:	bl	0 <flatcc_builder_table_add>
     a34:	cmp	r0, #0
     a38:	beq	176c <test+0x176c>
     a3c:	mov	fp, sl
     a40:	mov	r8, r0
     a44:	mov	r4, r5
     a48:	mov	r1, sl
     a4c:	add	r0, sp, #56	; 0x38
     a50:	mov	ip, #0
     a54:	mov	r3, #0
     a58:	str	r3, [sp, #112]	; 0x70
     a5c:	str	ip, [sp, #116]	; 0x74
     a60:	mov	r2, #0
     a64:	str	r2, [sp, #104]	; 0x68
     a68:	mov	sl, r1
     a6c:	mov	r2, #0
     a70:	str	r2, [r8]
     a74:	cmp	r1, r4
     a78:	bne	a84 <test+0xa84>
     a7c:	mov	r0, r1
     a80:	b	b00 <test+0xb00>
     a84:	add	r3, sp, #104	; 0x68
     a88:	add	r2, sp, #112	; 0x70
     a8c:	str	r2, [sp]
     a90:	mov	r2, r4
     a94:	bl	0 <flatcc_json_parser_integer>
     a98:	mov	r1, r0
     a9c:	cmp	r1, sl
     aa0:	beq	afc <test+0xafc>
     aa4:	ldr	r3, [sp, #104]	; 0x68
     aa8:	ldr	r2, [sp, #112]	; 0x70
     aac:	ldr	r0, [sp, #116]	; 0x74
     ab0:	mov	ip, r0
     ab4:	mov	sl, r2
     ab8:	mov	r2, r4
     abc:	add	r0, sp, #56	; 0x38
     ac0:	cmp	r3, #0
     ac4:	beq	ad4 <test+0xad4>
     ac8:	mov	r3, #8
     acc:	bl	0 <flatcc_json_parser_set_error>
     ad0:	b	b00 <test+0xb00>
     ad4:	cmp	ip, #0
     ad8:	beq	af0 <test+0xaf0>
     adc:	cmp	ip, #0
     ae0:	bls	af0 <test+0xaf0>
     ae4:	mov	r3, #7
     ae8:	bl	0 <flatcc_json_parser_set_error>
     aec:	b	b00 <test+0xb00>
     af0:	str	sl, [r8]
     af4:	mov	r0, r1
     af8:	b	b00 <test+0xb00>
     afc:	mov	r0, r1
     b00:	mov	sl, r0
     b04:	cmp	fp, sl
     b08:	beq	176c <test+0x176c>
     b0c:	b	1548 <test+0x1548>
     b10:	ldr	r1, [pc, #1288]	; 1020 <test+0x1020>
     b14:	ldr	r0, [r1]
     b18:	ldr	r1, [pc, #1272]	; 1018 <test+0x1018>
     b1c:	mov	r2, #58	; 0x3a
     b20:	bl	0 <fprintf>
     b24:	mov	r3, #17
     b28:	mov	r2, r5
     b2c:	mov	r1, sl
     b30:	mov	r0, r9
     b34:	bl	0 <flatcc_json_parser_set_error>
     b38:	mov	sl, r0
     b3c:	b	176c <test+0x176c>
     b40:	mov	r3, #13
     b44:	mov	r2, r5
     b48:	mov	r1, ip
     b4c:	mov	r0, r9
     b50:	bl	0 <flatcc_json_parser_set_error>
     b54:	mov	sl, r0
     b58:	b	176c <test+0x176c>
     b5c:	eor	r2, r2, #356	; 0x164
     b60:	eor	r2, r2, #352256	; 0x56000
     b64:	eor	r2, r2, #207618048	; 0xc600000
     b68:	eor	r2, r2, #1610612736	; 0x60000000
     b6c:	orr	r1, r2, r3
     b70:	cmp	r1, #0
     b74:	bne	ef8 <test+0xef8>
     b78:	add	r1, ip, #4
     b7c:	mov	r2, r5
     b80:	add	r0, sp, #56	; 0x38
     b84:	mov	r3, #0
     b88:	ldr	ip, [sp, #68]	; 0x44
     b8c:	cmp	ip, #0
     b90:	beq	c50 <test+0xc50>
     b94:	cmp	r1, r2
     b98:	beq	c3c <test+0xc3c>
     b9c:	ldrb	ip, [r1]
     ba0:	cmp	ip, #32
     ba4:	ble	c3c <test+0xc3c>
     ba8:	and	r3, ip, #255	; 0xff
     bac:	mov	r8, #1
     bb0:	cmp	r3, #46	; 0x2e
     bb4:	moveq	r4, #1
     bb8:	movne	r4, #0
     bbc:	cmp	r3, #95	; 0x5f
     bc0:	moveq	r4, r8
     bc4:	movne	r4, r4
     bc8:	mov	r8, #1
     bcc:	and	ip, ip, #128	; 0x80
     bd0:	cmp	ip, #0
     bd4:	movne	ip, #1
     bd8:	moveq	ip, #0
     bdc:	cmp	r4, #0
     be0:	movne	ip, r8
     be4:	moveq	ip, ip
     be8:	cmp	ip, #0
     bec:	bne	c34 <test+0xc34>
     bf0:	cmp	r3, #48	; 0x30
     bf4:	blt	c00 <test+0xc00>
     bf8:	cmp	r3, #57	; 0x39
     bfc:	ble	c34 <test+0xc34>
     c00:	orr	ip, r3, #32
     c04:	and	r4, ip, #255	; 0xff
     c08:	cmp	r4, #122	; 0x7a
     c0c:	movle	ip, #1
     c10:	movgt	ip, #0
     c14:	mov	r8, #0
     c18:	cmp	r4, #97	; 0x61
     c1c:	movge	ip, ip
     c20:	movlt	ip, r8
     c24:	cmp	ip, #0
     c28:	beq	c3c <test+0xc3c>
     c2c:	add	r1, r1, #1
     c30:	b	b94 <test+0xb94>
     c34:	add	r1, r1, #1
     c38:	b	b94 <test+0xb94>
     c3c:	cmp	r3, #46	; 0x2e
     c40:	bne	c9c <test+0xc9c>
     c44:	mov	r3, #5
     c48:	bl	0 <flatcc_json_parser_set_error>
     c4c:	b	cac <test+0xcac>
     c50:	cmp	r1, r2
     c54:	beq	c84 <test+0xc84>
     c58:	ldrb	r3, [r1]
     c5c:	cmp	r3, #34	; 0x22
     c60:	beq	c84 <test+0xc84>
     c64:	cmp	r3, #92	; 0x5c
     c68:	bne	c7c <test+0xc7c>
     c6c:	sub	r3, r2, r1
     c70:	cmp	r3, #2
     c74:	blt	c84 <test+0xc84>
     c78:	add	r1, r1, #1
     c7c:	add	r1, r1, #1
     c80:	b	c50 <test+0xc50>
     c84:	cmp	r1, r2
     c88:	beq	ca4 <test+0xca4>
     c8c:	ldrb	ip, [r1]
     c90:	cmp	ip, #34	; 0x22
     c94:	bne	ca4 <test+0xca4>
     c98:	add	r1, r1, #1
     c9c:	mov	r0, r1
     ca0:	b	cac <test+0xcac>
     ca4:	mov	r3, #20
     ca8:	bl	0 <flatcc_json_parser_set_error>
     cac:	add	r1, sp, #56	; 0x38
     cb0:	sub	r2, r5, r0
     cb4:	cmp	r2, #1
     cb8:	ble	ce4 <test+0xce4>
     cbc:	ldrb	r2, [r0]
     cc0:	cmp	r2, #32
     cc4:	bgt	cf8 <test+0xcf8>
     cc8:	cmp	r2, #32
     ccc:	bne	ce4 <test+0xce4>
     cd0:	ldrb	r3, [r0, #1]
     cd4:	cmp	r3, #32
     cd8:	ble	ce4 <test+0xce4>
     cdc:	add	r0, r0, #1
     ce0:	b	cf8 <test+0xcf8>
     ce4:	mov	r2, r5
     ce8:	mov	r3, r0
     cec:	mov	r0, r1
     cf0:	mov	r1, r3
     cf4:	bl	0 <flatcc_json_parser_space_ext>
     cf8:	mov	sl, r0
     cfc:	cmp	sl, r5
     d00:	bne	d18 <test+0xd18>
     d04:	ldr	r2, [pc, #788]	; 1020 <test+0x1020>
     d08:	ldr	r0, [r2]
     d0c:	ldr	r1, [pc, #776]	; 101c <test+0x101c>
     d10:	bl	0 <fprintf>
     d14:	b	176c <test+0x176c>
     d18:	cmp	r5, sl
     d1c:	bls	ec8 <test+0xec8>
     d20:	ldrb	ip, [sl]
     d24:	cmp	ip, #58	; 0x3a
     d28:	bne	ec8 <test+0xec8>
     d2c:	add	r1, sl, #1
     d30:	add	r2, sp, #56	; 0x38
     d34:	sub	ip, r5, r1
     d38:	cmp	ip, #1
     d3c:	ble	d6c <test+0xd6c>
     d40:	ldrb	ip, [r0, #1]
     d44:	cmp	ip, #32
     d48:	bgt	d64 <test+0xd64>
     d4c:	cmp	ip, #32
     d50:	bne	d6c <test+0xd6c>
     d54:	ldrb	ip, [r0, #2]
     d58:	cmp	ip, #32
     d5c:	ble	d6c <test+0xd6c>
     d60:	add	r1, r0, #2
     d64:	mov	sl, r1
     d68:	b	d7c <test+0xd7c>
     d6c:	mov	r0, r2
     d70:	mov	r2, r5
     d74:	bl	0 <flatcc_json_parser_space_ext>
     d78:	mov	sl, r0
     d7c:	cmp	sl, r5
     d80:	bne	d98 <test+0xd98>
     d84:	ldr	r2, [pc, #660]	; 1020 <test+0x1020>
     d88:	ldr	r0, [r2]
     d8c:	ldr	r1, [pc, #648]	; 101c <test+0x101c>
     d90:	bl	0 <fprintf>
     d94:	b	176c <test+0x176c>
     d98:	mov	r1, #3
     d9c:	mov	r2, #8
     da0:	mov	r3, #8
     da4:	mov	r0, r7
     da8:	bl	0 <flatcc_builder_table_add>
     dac:	mov	r4, r0
     db0:	cmp	r4, #0
     db4:	beq	176c <test+0x176c>
     db8:	mov	r8, sl
     dbc:	mov	r1, sl
     dc0:	add	r0, sp, #56	; 0x38
     dc4:	mov	r2, #0
     dc8:	mov	r3, #0
     dcc:	str	r3, [sp, #112]	; 0x70
     dd0:	str	r2, [sp, #116]	; 0x74
     dd4:	mov	ip, #0
     dd8:	str	ip, [sp, #104]	; 0x68
     ddc:	mov	sl, r1
     de0:	str	r3, [r4]
     de4:	str	r2, [r4, #4]
     de8:	cmp	r1, r5
     dec:	beq	eb8 <test+0xeb8>
     df0:	add	r3, sp, #104	; 0x68
     df4:	add	r2, sp, #112	; 0x70
     df8:	str	r2, [sp]
     dfc:	mov	r2, r5
     e00:	bl	0 <flatcc_json_parser_integer>
     e04:	cmp	r0, sl
     e08:	beq	eb4 <test+0xeb4>
     e0c:	ldr	sl, [sp, #104]	; 0x68
     e10:	ldr	r3, [sp, #112]	; 0x70
     e14:	ldr	ip, [sp, #116]	; 0x74
     e18:	mov	r2, r5
     e1c:	add	r1, sp, #56	; 0x38
     e20:	cmp	sl, #0
     e24:	beq	e78 <test+0xe78>
     e28:	mov	sl, ip
     e2c:	cmp	sl, #-2147483648	; 0x80000000
     e30:	bne	e44 <test+0xe44>
     e34:	mov	sl, r3
     e38:	cmp	sl, #0
     e3c:	bhi	e4c <test+0xe4c>
     e40:	b	e64 <test+0xe64>
     e44:	cmp	sl, #-2147483648	; 0x80000000
     e48:	bls	e64 <test+0xe64>
     e4c:	mov	r3, #8
     e50:	mov	ip, r0
     e54:	mov	r0, r1
     e58:	mov	r1, ip
     e5c:	bl	0 <flatcc_json_parser_set_error>
     e60:	b	eac <test+0xeac>
     e64:	rsbs	r2, r3, #0
     e68:	rsc	r1, ip, #0
     e6c:	str	r2, [r4]
     e70:	str	r1, [r4, #4]
     e74:	b	eac <test+0xeac>
     e78:	mov	sl, ip
     e7c:	cmn	sl, #-2147483647	; 0x80000001
     e80:	beq	ea4 <test+0xea4>
     e84:	cmn	sl, #-2147483647	; 0x80000001
     e88:	bls	ea4 <test+0xea4>
     e8c:	mov	r3, #7
     e90:	mov	ip, r0
     e94:	mov	r0, r1
     e98:	mov	r1, ip
     e9c:	bl	0 <flatcc_json_parser_set_error>
     ea0:	b	eac <test+0xeac>
     ea4:	str	r3, [r4]
     ea8:	str	ip, [r4, #4]
     eac:	mov	r1, r0
     eb0:	b	eb8 <test+0xeb8>
     eb4:	mov	r1, r0
     eb8:	mov	sl, r1
     ebc:	cmp	r8, sl
     ec0:	beq	176c <test+0x176c>
     ec4:	b	1548 <test+0x1548>
     ec8:	ldr	r0, [pc, #336]	; 1020 <test+0x1020>
     ecc:	ldr	r0, [r0]
     ed0:	ldr	r1, [pc, #320]	; 1018 <test+0x1018>
     ed4:	mov	r2, #58	; 0x3a
     ed8:	bl	0 <fprintf>
     edc:	mov	r3, #17
     ee0:	mov	r2, r5
     ee4:	mov	r1, sl
     ee8:	mov	r0, r9
     eec:	bl	0 <flatcc_json_parser_set_error>
     ef0:	mov	sl, r0
     ef4:	b	176c <test+0x176c>
     ef8:	mov	r3, #13
     efc:	mov	r2, r5
     f00:	mov	r1, ip
     f04:	mov	r0, r9
     f08:	bl	0 <flatcc_json_parser_set_error>
     f0c:	mov	sl, r0
     f10:	b	176c <test+0x176c>
     f14:	mov	r3, #13
     f18:	mov	r2, r5
     f1c:	mov	r0, r9
     f20:	bl	0 <flatcc_json_parser_set_error>
     f24:	mov	sl, r0
     f28:	b	176c <test+0x176c>
     f2c:	bic	r3, r3, #255	; 0xff
     f30:	bic	r3, r3, #65280	; 0xff00
     f34:	eor	r2, r2, #111	; 0x6f
     f38:	eor	r2, r2, #25344	; 0x6300
     f3c:	eor	r2, r2, #6619136	; 0x650000
     f40:	eor	r2, r2, #1929379840	; 0x73000000
     f44:	eor	r3, r3, #40108032	; 0x2640000
     f48:	eor	r3, r3, #1811939328	; 0x6c000000
     f4c:	orr	r3, r2, r3
     f50:	cmp	r3, #0
     f54:	bne	11f8 <test+0x11f8>
     f58:	add	r1, r1, #6
     f5c:	mov	r2, r5
     f60:	add	r0, sp, #56	; 0x38
     f64:	mov	r3, #0
     f68:	ldr	ip, [sp, #68]	; 0x44
     f6c:	cmp	ip, #0
     f70:	beq	1044 <test+0x1044>
     f74:	cmp	r1, r2
     f78:	beq	102c <test+0x102c>
     f7c:	ldrb	ip, [r1]
     f80:	cmp	ip, #32
     f84:	ble	102c <test+0x102c>
     f88:	and	r3, ip, #255	; 0xff
     f8c:	mov	r4, #1
     f90:	cmp	r3, #46	; 0x2e
     f94:	moveq	r8, #1
     f98:	movne	r8, #0
     f9c:	cmp	r3, #95	; 0x5f
     fa0:	moveq	r8, r4
     fa4:	movne	r8, r8
     fa8:	mov	r4, #1
     fac:	and	ip, ip, #128	; 0x80
     fb0:	cmp	ip, #0
     fb4:	movne	ip, #1
     fb8:	moveq	ip, #0
     fbc:	cmp	r8, #0
     fc0:	movne	ip, r4
     fc4:	moveq	ip, ip
     fc8:	cmp	ip, #0
     fcc:	bne	1024 <test+0x1024>
     fd0:	cmp	r3, #48	; 0x30
     fd4:	blt	fe0 <test+0xfe0>
     fd8:	cmp	r3, #57	; 0x39
     fdc:	ble	1024 <test+0x1024>
     fe0:	orr	ip, r3, #32
     fe4:	and	r4, ip, #255	; 0xff
     fe8:	cmp	r4, #122	; 0x7a
     fec:	movle	r8, #1
     ff0:	movgt	r8, #0
     ff4:	mov	ip, #0
     ff8:	cmp	r4, #97	; 0x61
     ffc:	movge	ip, r8
    1000:	movlt	ip, ip
    1004:	cmp	ip, #0
    1008:	beq	102c <test+0x102c>
    100c:	add	r1, r1, #1
    1010:	b	f74 <test+0xf74>
    1014:	.word	0x0000004f
    1018:	.word	0x0000001e
    101c:	.word	0x00000010
    1020:	.word	0x00000000
    1024:	add	r1, r1, #1
    1028:	b	f74 <test+0xf74>
    102c:	cmp	r3, #46	; 0x2e
    1030:	bne	1090 <test+0x1090>
    1034:	mov	r3, #5
    1038:	bl	0 <flatcc_json_parser_set_error>
    103c:	mov	sl, r0
    1040:	b	10a4 <test+0x10a4>
    1044:	cmp	r1, r2
    1048:	beq	1078 <test+0x1078>
    104c:	ldrb	ip, [r1]
    1050:	cmp	ip, #34	; 0x22
    1054:	beq	1078 <test+0x1078>
    1058:	cmp	ip, #92	; 0x5c
    105c:	bne	1070 <test+0x1070>
    1060:	sub	r3, r2, r1
    1064:	cmp	r3, #2
    1068:	blt	1078 <test+0x1078>
    106c:	add	r1, r1, #1
    1070:	add	r1, r1, #1
    1074:	b	1044 <test+0x1044>
    1078:	cmp	r1, r2
    107c:	beq	1098 <test+0x1098>
    1080:	ldrb	ip, [r1]
    1084:	cmp	ip, #34	; 0x22
    1088:	bne	1098 <test+0x1098>
    108c:	add	r1, r1, #1
    1090:	mov	sl, r1
    1094:	b	10a4 <test+0x10a4>
    1098:	mov	r3, #20
    109c:	bl	0 <flatcc_json_parser_set_error>
    10a0:	mov	sl, r0
    10a4:	mov	r2, r5
    10a8:	add	r0, sp, #56	; 0x38
    10ac:	sub	r1, r2, sl
    10b0:	cmp	r1, #1
    10b4:	ble	10e0 <test+0x10e0>
    10b8:	ldrb	ip, [sl]
    10bc:	cmp	ip, #32
    10c0:	bgt	10ec <test+0x10ec>
    10c4:	cmp	ip, #32
    10c8:	bne	10e0 <test+0x10e0>
    10cc:	ldrb	r1, [sl, #1]
    10d0:	cmp	r1, #32
    10d4:	ble	10e0 <test+0x10e0>
    10d8:	add	sl, sl, #1
    10dc:	b	10ec <test+0x10ec>
    10e0:	mov	r1, sl
    10e4:	bl	0 <flatcc_json_parser_space_ext>
    10e8:	mov	sl, r0
    10ec:	cmp	sl, r5
    10f0:	bne	1108 <test+0x1108>
    10f4:	ldr	r2, [pc, #1808]	; 180c <test+0x180c>
    10f8:	ldr	r0, [r2]
    10fc:	ldr	r1, [pc, #1796]	; 1808 <test+0x1808>
    1100:	bl	0 <fprintf>
    1104:	b	176c <test+0x176c>
    1108:	cmp	r5, sl
    110c:	bls	11c8 <test+0x11c8>
    1110:	ldrb	r0, [sl]
    1114:	cmp	r0, #58	; 0x3a
    1118:	bne	11c8 <test+0x11c8>
    111c:	add	r1, sl, #1
    1120:	mov	r2, r5
    1124:	add	r0, sp, #56	; 0x38
    1128:	sub	r3, r2, r1
    112c:	cmp	r3, #1
    1130:	ble	1160 <test+0x1160>
    1134:	ldrb	r3, [sl, #1]
    1138:	cmp	r3, #32
    113c:	bgt	1158 <test+0x1158>
    1140:	cmp	r3, #32
    1144:	bne	1160 <test+0x1160>
    1148:	ldrb	r3, [sl, #2]
    114c:	cmp	r3, #32
    1150:	ble	1160 <test+0x1160>
    1154:	add	r1, sl, #2
    1158:	mov	sl, r1
    115c:	b	1168 <test+0x1168>
    1160:	bl	0 <flatcc_json_parser_space_ext>
    1164:	mov	sl, r0
    1168:	cmp	sl, r5
    116c:	bne	1184 <test+0x1184>
    1170:	ldr	r2, [pc, #1684]	; 180c <test+0x180c>
    1174:	ldr	r0, [r2]
    1178:	ldr	r1, [pc, #1672]	; 1808 <test+0x1808>
    117c:	bl	0 <fprintf>
    1180:	b	176c <test+0x176c>
    1184:	mov	r1, #1
    1188:	mov	r2, #8
    118c:	mov	r3, #8
    1190:	mov	r0, r7
    1194:	bl	0 <flatcc_builder_table_add>
    1198:	cmp	r0, #0
    119c:	beq	176c <test+0x176c>
    11a0:	mov	r4, sl
    11a4:	mov	r3, r0
    11a8:	mov	r2, r5
    11ac:	mov	r1, sl
    11b0:	mov	r0, r9
    11b4:	bl	0 <flatcc_json_parser_double>
    11b8:	mov	sl, r0
    11bc:	cmp	r4, sl
    11c0:	beq	176c <test+0x176c>
    11c4:	b	1548 <test+0x1548>
    11c8:	ldr	ip, [pc, #1596]	; 180c <test+0x180c>
    11cc:	ldr	r0, [ip]
    11d0:	ldr	r1, [pc, #1572]	; 17fc <test+0x17fc>
    11d4:	mov	r2, #58	; 0x3a
    11d8:	bl	0 <fprintf>
    11dc:	mov	r3, #17
    11e0:	mov	r2, r5
    11e4:	mov	r1, sl
    11e8:	mov	r0, r9
    11ec:	bl	0 <flatcc_json_parser_set_error>
    11f0:	mov	sl, r0
    11f4:	b	176c <test+0x176c>
    11f8:	mov	r3, #13
    11fc:	mov	r2, r5
    1200:	mov	r0, r9
    1204:	bl	0 <flatcc_json_parser_set_error>
    1208:	mov	sl, r0
    120c:	b	176c <test+0x176c>
    1210:	and	r3, r3, #-16777216	; 0xff000000
    1214:	eor	r0, r2, #115	; 0x73
    1218:	eor	r0, r0, #29184	; 0x7200
    121c:	eor	r0, r0, #6881280	; 0x690000
    1220:	eor	r0, r0, #1711276032	; 0x66000000
    1224:	eor	r2, r3, #1946157056	; 0x74000000
    1228:	orr	r3, r0, r2
    122c:	cmp	r3, #0
    1230:	bne	1728 <test+0x1728>
    1234:	add	r1, r1, #5
    1238:	mov	r2, r5
    123c:	add	r0, sp, #56	; 0x38
    1240:	mov	r3, #0
    1244:	ldr	ip, [sp, #68]	; 0x44
    1248:	cmp	ip, #0
    124c:	beq	1310 <test+0x1310>
    1250:	cmp	r1, r2
    1254:	beq	12f8 <test+0x12f8>
    1258:	ldrb	ip, [r1]
    125c:	cmp	ip, #32
    1260:	ble	12f8 <test+0x12f8>
    1264:	and	r3, ip, #255	; 0xff
    1268:	mov	r4, #1
    126c:	cmp	r3, #46	; 0x2e
    1270:	moveq	r8, #1
    1274:	movne	r8, #0
    1278:	cmp	r3, #95	; 0x5f
    127c:	moveq	r8, r4
    1280:	movne	r8, r8
    1284:	mov	r4, #1
    1288:	and	ip, ip, #128	; 0x80
    128c:	cmp	ip, #0
    1290:	movne	ip, #1
    1294:	moveq	ip, #0
    1298:	cmp	r8, #0
    129c:	movne	ip, r4
    12a0:	moveq	ip, ip
    12a4:	cmp	ip, #0
    12a8:	bne	12f0 <test+0x12f0>
    12ac:	cmp	r3, #48	; 0x30
    12b0:	blt	12bc <test+0x12bc>
    12b4:	cmp	r3, #57	; 0x39
    12b8:	ble	12f0 <test+0x12f0>
    12bc:	orr	ip, r3, #32
    12c0:	and	r4, ip, #255	; 0xff
    12c4:	cmp	r4, #122	; 0x7a
    12c8:	movle	r8, #1
    12cc:	movgt	r8, #0
    12d0:	mov	ip, #0
    12d4:	cmp	r4, #97	; 0x61
    12d8:	movge	ip, r8
    12dc:	movlt	ip, ip
    12e0:	cmp	ip, #0
    12e4:	beq	12f8 <test+0x12f8>
    12e8:	add	r1, r1, #1
    12ec:	b	1250 <test+0x1250>
    12f0:	add	r1, r1, #1
    12f4:	b	1250 <test+0x1250>
    12f8:	cmp	r3, #46	; 0x2e
    12fc:	bne	136c <test+0x136c>
    1300:	mov	r3, #5
    1304:	bl	0 <flatcc_json_parser_set_error>
    1308:	mov	r1, r0
    130c:	b	136c <test+0x136c>
    1310:	cmp	r1, r2
    1314:	beq	1344 <test+0x1344>
    1318:	ldrb	r3, [r1]
    131c:	cmp	r3, #34	; 0x22
    1320:	beq	1344 <test+0x1344>
    1324:	cmp	r3, #92	; 0x5c
    1328:	bne	133c <test+0x133c>
    132c:	sub	r3, r2, r1
    1330:	cmp	r3, #2
    1334:	blt	1344 <test+0x1344>
    1338:	add	r1, r1, #1
    133c:	add	r1, r1, #1
    1340:	b	1310 <test+0x1310>
    1344:	cmp	r1, r2
    1348:	beq	1360 <test+0x1360>
    134c:	ldrb	r3, [r1]
    1350:	cmp	r3, #34	; 0x22
    1354:	bne	1360 <test+0x1360>
    1358:	add	r1, r1, #1
    135c:	b	136c <test+0x136c>
    1360:	mov	r3, #20
    1364:	bl	0 <flatcc_json_parser_set_error>
    1368:	mov	r1, r0
    136c:	add	r0, sp, #56	; 0x38
    1370:	sub	r3, r5, r1
    1374:	cmp	r3, #1
    1378:	ble	13a8 <test+0x13a8>
    137c:	ldrb	r2, [r1]
    1380:	cmp	r2, #32
    1384:	bgt	13a0 <test+0x13a0>
    1388:	cmp	r2, #32
    138c:	bne	13a8 <test+0x13a8>
    1390:	ldrb	ip, [r1, #1]
    1394:	cmp	ip, #32
    1398:	ble	13a8 <test+0x13a8>
    139c:	add	r1, r1, #1
    13a0:	mov	ip, r1
    13a4:	b	13b4 <test+0x13b4>
    13a8:	mov	r2, r5
    13ac:	bl	0 <flatcc_json_parser_space_ext>
    13b0:	mov	ip, r0
    13b4:	mov	sl, ip
    13b8:	cmp	sl, r5
    13bc:	bne	13d4 <test+0x13d4>
    13c0:	ldr	r1, [pc, #1092]	; 180c <test+0x180c>
    13c4:	ldr	r0, [r1]
    13c8:	ldr	r1, [pc, #1080]	; 1808 <test+0x1808>
    13cc:	bl	0 <fprintf>
    13d0:	b	176c <test+0x176c>
    13d4:	cmp	r5, sl
    13d8:	bls	16f8 <test+0x16f8>
    13dc:	ldrb	r3, [sl]
    13e0:	cmp	r3, #58	; 0x3a
    13e4:	bne	16f8 <test+0x16f8>
    13e8:	add	r1, sl, #1
    13ec:	add	r0, sp, #56	; 0x38
    13f0:	sub	r3, r5, r1
    13f4:	cmp	r3, #1
    13f8:	ble	1428 <test+0x1428>
    13fc:	ldrb	r2, [ip, #1]
    1400:	cmp	r2, #32
    1404:	bgt	1420 <test+0x1420>
    1408:	cmp	r2, #32
    140c:	bne	1428 <test+0x1428>
    1410:	ldrb	r2, [ip, #2]
    1414:	cmp	r2, #32
    1418:	ble	1428 <test+0x1428>
    141c:	add	r1, ip, #2
    1420:	mov	sl, r1
    1424:	b	1434 <test+0x1434>
    1428:	mov	r2, r5
    142c:	bl	0 <flatcc_json_parser_space_ext>
    1430:	mov	sl, r0
    1434:	cmp	sl, r5
    1438:	bne	1450 <test+0x1450>
    143c:	ldr	r2, [pc, #968]	; 180c <test+0x180c>
    1440:	ldr	r0, [r2]
    1444:	ldr	r1, [pc, #956]	; 1808 <test+0x1808>
    1448:	bl	0 <fprintf>
    144c:	b	176c <test+0x176c>
    1450:	mov	r1, #0
    1454:	mov	r2, #1
    1458:	mov	r3, #1
    145c:	mov	r0, r7
    1460:	bl	0 <flatcc_builder_table_add>
    1464:	cmp	r0, #0
    1468:	beq	176c <test+0x176c>
    146c:	mov	fp, sl
    1470:	mov	r8, r0
    1474:	mov	r4, r5
    1478:	mov	r1, sl
    147c:	add	r0, sp, #56	; 0x38
    1480:	mov	ip, #0
    1484:	mov	r3, #0
    1488:	str	r3, [sp, #112]	; 0x70
    148c:	str	ip, [sp, #116]	; 0x74
    1490:	mov	r2, #0
    1494:	str	r2, [sp, #104]	; 0x68
    1498:	mov	sl, r1
    149c:	mov	r3, #0
    14a0:	strb	r3, [r8]
    14a4:	cmp	r1, r4
    14a8:	bne	14b4 <test+0x14b4>
    14ac:	mov	r0, r1
    14b0:	b	153c <test+0x153c>
    14b4:	add	r3, sp, #104	; 0x68
    14b8:	add	r2, sp, #112	; 0x70
    14bc:	str	r2, [sp]
    14c0:	mov	r2, r4
    14c4:	bl	0 <flatcc_json_parser_integer>
    14c8:	mov	r1, r0
    14cc:	cmp	r1, sl
    14d0:	beq	1538 <test+0x1538>
    14d4:	ldr	r2, [sp, #104]	; 0x68
    14d8:	ldr	ip, [sp, #112]	; 0x70
    14dc:	ldr	r3, [sp, #116]	; 0x74
    14e0:	mov	sl, r2
    14e4:	mov	r2, r4
    14e8:	add	r0, sp, #56	; 0x38
    14ec:	cmp	sl, #0
    14f0:	beq	1500 <test+0x1500>
    14f4:	mov	r3, #8
    14f8:	bl	0 <flatcc_json_parser_set_error>
    14fc:	b	153c <test+0x153c>
    1500:	mov	r4, ip
    1504:	cmp	r3, #0
    1508:	bne	1518 <test+0x1518>
    150c:	cmp	r4, #255	; 0xff
    1510:	bhi	1520 <test+0x1520>
    1514:	b	152c <test+0x152c>
    1518:	cmp	r3, #0
    151c:	bls	152c <test+0x152c>
    1520:	mov	r3, #7
    1524:	bl	0 <flatcc_json_parser_set_error>
    1528:	b	153c <test+0x153c>
    152c:	strb	ip, [r8]
    1530:	mov	r0, r1
    1534:	b	153c <test+0x153c>
    1538:	mov	r0, r1
    153c:	mov	sl, r0
    1540:	cmp	fp, sl
    1544:	beq	176c <test+0x176c>
    1548:	mov	r2, r5
    154c:	mov	r1, sl
    1550:	add	r0, sp, #56	; 0x38
    1554:	sub	ip, r2, r1
    1558:	cmp	ip, #1
    155c:	ble	1590 <test+0x1590>
    1560:	ldrb	ip, [r1]
    1564:	cmp	ip, #32
    1568:	ble	1574 <test+0x1574>
    156c:	mov	sl, r1
    1570:	b	1598 <test+0x1598>
    1574:	cmp	ip, #32
    1578:	bne	1590 <test+0x1590>
    157c:	ldrb	ip, [r1, #1]
    1580:	cmp	ip, #32
    1584:	ble	1590 <test+0x1590>
    1588:	add	sl, r1, #1
    158c:	b	1598 <test+0x1598>
    1590:	bl	0 <flatcc_json_parser_space_ext>
    1594:	mov	sl, r0
    1598:	cmp	sl, r5
    159c:	bne	15b4 <test+0x15b4>
    15a0:	ldr	r3, [pc, #612]	; 180c <test+0x180c>
    15a4:	ldr	r0, [r3]
    15a8:	ldr	r1, [pc, #600]	; 1808 <test+0x1808>
    15ac:	bl	0 <fprintf>
    15b0:	b	176c <test+0x176c>
    15b4:	ldrb	r0, [sl]
    15b8:	cmp	r0, #44	; 0x2c
    15bc:	bne	1638 <test+0x1638>
    15c0:	add	r1, sl, #1
    15c4:	mov	r2, r5
    15c8:	add	r0, sp, #56	; 0x38
    15cc:	sub	ip, r2, r1
    15d0:	cmp	ip, #1
    15d4:	ble	1608 <test+0x1608>
    15d8:	ldrb	r3, [sl, #1]
    15dc:	cmp	r3, #32
    15e0:	ble	15ec <test+0x15ec>
    15e4:	mov	r0, r1
    15e8:	b	160c <test+0x160c>
    15ec:	cmp	r3, #32
    15f0:	bne	1608 <test+0x1608>
    15f4:	ldrb	r3, [sl, #2]
    15f8:	cmp	r3, #32
    15fc:	ble	1608 <test+0x1608>
    1600:	add	r0, sl, #2
    1604:	b	160c <test+0x160c>
    1608:	bl	0 <flatcc_json_parser_space_ext>
    160c:	mov	sl, r0
    1610:	cmp	sl, r5
    1614:	bne	162c <test+0x162c>
    1618:	ldr	ip, [pc, #492]	; 180c <test+0x180c>
    161c:	ldr	r0, [ip]
    1620:	ldr	r1, [pc, #480]	; 1808 <test+0x1808>
    1624:	bl	0 <fprintf>
    1628:	b	176c <test+0x176c>
    162c:	ldrb	ip, [sl]
    1630:	cmp	ip, #125	; 0x7d
    1634:	bne	170 <test+0x170>
    1638:	cmp	r5, sl
    163c:	bls	16c8 <test+0x16c8>
    1640:	ldrb	r3, [sl]
    1644:	cmp	r3, #125	; 0x7d
    1648:	bne	16c8 <test+0x16c8>
    164c:	add	sl, sl, #1
    1650:	mov	r0, r7
    1654:	bl	0 <flatcc_builder_end_table>
    1658:	mov	r1, r0
    165c:	mov	r0, r7
    1660:	bl	0 <flatcc_builder_end_buffer>
    1664:	mov	r2, r5
    1668:	add	r0, sp, #56	; 0x38
    166c:	sub	r1, r2, sl
    1670:	cmp	r1, #1
    1674:	ble	16a0 <test+0x16a0>
    1678:	ldrb	r3, [sl]
    167c:	cmp	r3, #32
    1680:	bgt	16ac <test+0x16ac>
    1684:	cmp	r3, #32
    1688:	bne	16a0 <test+0x16a0>
    168c:	ldrb	r1, [sl, #1]
    1690:	cmp	r1, #32
    1694:	ble	16a0 <test+0x16a0>
    1698:	add	sl, sl, #1
    169c:	b	16ac <test+0x16ac>
    16a0:	mov	r1, sl
    16a4:	bl	0 <flatcc_json_parser_space_ext>
    16a8:	mov	sl, r0
    16ac:	cmp	sl, r5
    16b0:	beq	176c <test+0x176c>
    16b4:	ldr	r3, [pc, #336]	; 180c <test+0x180c>
    16b8:	ldr	r0, [r3]
    16bc:	ldr	r1, [pc, #332]	; 1810 <test+0x1810>
    16c0:	bl	0 <fprintf>
    16c4:	b	176c <test+0x176c>
    16c8:	ldr	r3, [pc, #316]	; 180c <test+0x180c>
    16cc:	ldr	r0, [r3]
    16d0:	ldr	r1, [pc, #292]	; 17fc <test+0x17fc>
    16d4:	mov	r2, #125	; 0x7d
    16d8:	bl	0 <fprintf>
    16dc:	mov	r3, #17
    16e0:	mov	r2, r5
    16e4:	mov	r1, sl
    16e8:	mov	r0, r9
    16ec:	bl	0 <flatcc_json_parser_set_error>
    16f0:	mov	sl, r0
    16f4:	b	176c <test+0x176c>
    16f8:	ldr	r2, [pc, #268]	; 180c <test+0x180c>
    16fc:	ldr	r0, [r2]
    1700:	ldr	r1, [pc, #244]	; 17fc <test+0x17fc>
    1704:	mov	r2, #58	; 0x3a
    1708:	bl	0 <fprintf>
    170c:	mov	r3, #17
    1710:	mov	r2, r5
    1714:	mov	r1, sl
    1718:	mov	r0, r9
    171c:	bl	0 <flatcc_json_parser_set_error>
    1720:	mov	sl, r0
    1724:	b	176c <test+0x176c>
    1728:	mov	r3, #13
    172c:	mov	r2, r5
    1730:	mov	r0, r9
    1734:	bl	0 <flatcc_json_parser_set_error>
    1738:	mov	sl, r0
    173c:	b	176c <test+0x176c>
    1740:	ldr	r1, [pc, #196]	; 180c <test+0x180c>
    1744:	ldr	r0, [r1]
    1748:	ldr	r1, [pc, #172]	; 17fc <test+0x17fc>
    174c:	mov	r2, #123	; 0x7b
    1750:	bl	0 <fprintf>
    1754:	mov	r3, #17
    1758:	mov	r2, r5
    175c:	mov	r1, sl
    1760:	mov	r0, r9
    1764:	bl	0 <flatcc_json_parser_set_error>
    1768:	mov	sl, r0
    176c:	ldr	r0, [sp, #80]	; 0x50
    1770:	cmp	r0, #0
    1774:	beq	17b4 <test+0x17b4>
    1778:	bl	0 <flatcc_json_parser_error_string>
    177c:	ldr	r1, [pc, #136]	; 180c <test+0x180c>
    1780:	ldr	ip, [r1]
    1784:	ldr	r1, [pc, #120]	; 1804 <test+0x1804>
    1788:	ldr	r2, [sp, #72]	; 0x48
    178c:	ldr	r4, [sp, #92]	; 0x5c
    1790:	ldr	r3, [sp, #60]	; 0x3c
    1794:	sub	r3, r4, r3
    1798:	add	r3, r3, #1
    179c:	str	r0, [sp]
    17a0:	mov	r0, ip
    17a4:	bl	0 <fprintf>
    17a8:	mov	r0, r7
    17ac:	bl	0 <flatcc_builder_reset>
    17b0:	b	17c4 <test+0x17c4>
    17b4:	ldr	r1, [pc, #80]	; 180c <test+0x180c>
    17b8:	ldr	r0, [r1]
    17bc:	ldr	r1, [pc, #60]	; 1800 <test+0x1800>
    17c0:	bl	0 <fprintf>
    17c4:	ldr	ip, [sp, #80]	; 0x50
    17c8:	str	ip, [r6]
    17cc:	mov	r0, sl
    17d0:	ldr	r4, [sp, #16]
    17d4:	ldr	r5, [sp, #20]
    17d8:	ldr	r6, [sp, #24]
    17dc:	ldr	r7, [sp, #28]
    17e0:	ldr	r8, [sp, #32]
    17e4:	ldr	r9, [sp, #36]	; 0x24
    17e8:	ldr	sl, [sp, #40]	; 0x28
    17ec:	ldr	fp, [sp, #44]	; 0x2c
    17f0:	ldr	lr, [sp, #8]
    17f4:	add	sp, sp, #120	; 0x78
    17f8:	bx	lr
    17fc:	.word	0x0000001e
    1800:	.word	0x00000000
    1804:	.word	0x00000054
    1808:	.word	0x00000010
    180c:	.word	0x00000000
    1810:	.word	0x00000034

00001814 <main>:
    1814:	mov	ip, sp
    1818:	sub	sp, sp, #248	; 0xf8
    181c:	str	ip, [sp]
    1820:	str	lr, [sp, #4]
    1824:	mvn	r0, #0
    1828:	str	r0, [sp, #8]
    182c:	add	r0, sp, #16
    1830:	bl	0 <flatcc_builder_init>
    1834:	add	r0, sp, #16
    1838:	ldr	r1, [pc, #32]	; 1860 <main+0x4c>
    183c:	ldr	r2, [pc, #32]	; 1864 <main+0x50>
    1840:	add	r3, sp, #8
    1844:	bl	0 <test>
    1848:	add	r0, sp, #16
    184c:	bl	0 <flatcc_builder_clear>
    1850:	ldr	r0, [sp, #8]
    1854:	ldr	lr, [sp, #4]
    1858:	add	sp, sp, #248	; 0xf8
    185c:	bx	lr
    1860:	.word	0x00000000
    1864:	.word	0x00000285
