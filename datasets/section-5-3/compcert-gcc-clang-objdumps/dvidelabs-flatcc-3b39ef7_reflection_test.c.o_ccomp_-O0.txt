
../repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <readfile>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #40	; 0x28
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	mov	r8, r1
      28:	cmp	r2, #0
      2c:	bne	38 <readfile+0x38>
      30:	add	r4, sp, #32
      34:	b	3c <readfile+0x3c>
      38:	mov	r4, r2
      3c:	ldr	r1, [pc, #272]	; 154 <readfile+0x154>
      40:	bl	0 <fopen>
      44:	mov	r7, r0
      48:	mov	r6, #0
      4c:	mov	r5, #0
      50:	cmp	r7, #0
      54:	beq	108 <readfile+0x108>
      58:	mov	r1, #0
      5c:	mov	r2, #2
      60:	mov	r0, r7
      64:	bl	0 <fseek>
      68:	mov	r0, r7
      6c:	bl	0 <ftell>
      70:	mov	r6, r0
      74:	str	r6, [r4]
      78:	cmp	r8, #0
      7c:	bhi	88 <readfile+0x88>
      80:	mov	r2, #0
      84:	b	94 <readfile+0x94>
      88:	cmp	r6, r8
      8c:	movhi	r2, #1
      90:	movls	r2, #0
      94:	cmp	r2, #0
      98:	bne	108 <readfile+0x108>
      9c:	mov	r0, r7
      a0:	bl	0 <rewind>
      a4:	cmp	r6, #0
      a8:	bne	b4 <readfile+0xb4>
      ac:	mov	r0, #1
      b0:	b	b8 <readfile+0xb8>
      b4:	mov	r0, r6
      b8:	bl	0 <malloc>
      bc:	mov	r5, r0
      c0:	cmp	r5, #0
      c4:	beq	108 <readfile+0x108>
      c8:	mov	r8, #0
      cc:	add	r0, r5, r8
      d0:	mov	r1, #1
      d4:	sub	r2, r6, r8
      d8:	mov	r3, r7
      dc:	bl	0 <fread>
      e0:	cmp	r0, #0
      e4:	beq	f0 <readfile+0xf0>
      e8:	add	r8, r8, r0
      ec:	b	cc <readfile+0xcc>
      f0:	cmp	r8, r6
      f4:	bne	108 <readfile+0x108>
      f8:	mov	r0, r7
      fc:	bl	0 <fclose>
     100:	str	r6, [r4]
     104:	b	130 <readfile+0x130>
     108:	cmp	r7, #0
     10c:	beq	118 <readfile+0x118>
     110:	mov	r0, r7
     114:	bl	0 <fclose>
     118:	cmp	r5, #0
     11c:	beq	128 <readfile+0x128>
     120:	mov	r0, r5
     124:	bl	0 <free>
     128:	str	r6, [r4]
     12c:	mov	r5, #0
     130:	mov	r0, r5
     134:	ldr	r4, [sp, #8]
     138:	ldr	r5, [sp, #12]
     13c:	ldr	r6, [sp, #16]
     140:	ldr	r7, [sp, #20]
     144:	ldr	r8, [sp, #24]
     148:	ldr	lr, [sp, #4]
     14c:	add	sp, sp, #40	; 0x28
     150:	bx	lr
     154:	.word	0x00000082

00000158 <flatbuffers_int32_cast_from_pe>:
     158:	mov	ip, sp
     15c:	sub	sp, sp, #8
     160:	str	ip, [sp]
     164:	str	lr, [sp, #4]
     168:	ldr	lr, [sp, #4]
     16c:	add	sp, sp, #8
     170:	bx	lr

00000174 <flatbuffers_int32_read_from_pe>:
     174:	mov	ip, sp
     178:	sub	sp, sp, #8
     17c:	str	ip, [sp]
     180:	str	lr, [sp, #4]
     184:	ldr	r0, [r0]
     188:	bl	158 <flatbuffers_int32_cast_from_pe>
     18c:	ldr	lr, [sp, #4]
     190:	add	sp, sp, #8
     194:	bx	lr

00000198 <flatbuffers_int64_cast_from_pe>:
     198:	mov	ip, sp
     19c:	sub	sp, sp, #8
     1a0:	str	ip, [sp]
     1a4:	str	lr, [sp, #4]
     1a8:	ldr	lr, [sp, #4]
     1ac:	add	sp, sp, #8
     1b0:	bx	lr

000001b4 <flatbuffers_int64_read_from_pe>:
     1b4:	mov	ip, sp
     1b8:	sub	sp, sp, #8
     1bc:	str	ip, [sp]
     1c0:	str	lr, [sp, #4]
     1c4:	mov	r1, r0
     1c8:	ldr	r0, [r1]
     1cc:	ldr	r1, [r1, #4]
     1d0:	bl	198 <flatbuffers_int64_cast_from_pe>
     1d4:	ldr	lr, [sp, #4]
     1d8:	add	sp, sp, #8
     1dc:	bx	lr

000001e0 <__flatbuffers_uoffset_cast_from_pe>:
     1e0:	mov	ip, sp
     1e4:	sub	sp, sp, #8
     1e8:	str	ip, [sp]
     1ec:	str	lr, [sp, #4]
     1f0:	ldr	lr, [sp, #4]
     1f4:	add	sp, sp, #8
     1f8:	bx	lr

000001fc <__flatbuffers_uoffset_read_from_pe>:
     1fc:	mov	ip, sp
     200:	sub	sp, sp, #8
     204:	str	ip, [sp]
     208:	str	lr, [sp, #4]
     20c:	ldr	r0, [r0]
     210:	bl	1e0 <__flatbuffers_uoffset_cast_from_pe>
     214:	ldr	lr, [sp, #4]
     218:	add	sp, sp, #8
     21c:	bx	lr

00000220 <__flatbuffers_soffset_cast_from_pe>:
     220:	mov	ip, sp
     224:	sub	sp, sp, #8
     228:	str	ip, [sp]
     22c:	str	lr, [sp, #4]
     230:	ldr	lr, [sp, #4]
     234:	add	sp, sp, #8
     238:	bx	lr

0000023c <__flatbuffers_soffset_read_from_pe>:
     23c:	mov	ip, sp
     240:	sub	sp, sp, #8
     244:	str	ip, [sp]
     248:	str	lr, [sp, #4]
     24c:	ldr	r0, [r0]
     250:	bl	220 <__flatbuffers_soffset_cast_from_pe>
     254:	ldr	lr, [sp, #4]
     258:	add	sp, sp, #8
     25c:	bx	lr

00000260 <__flatbuffers_voffset_cast_from_pe>:
     260:	mov	ip, sp
     264:	sub	sp, sp, #8
     268:	str	ip, [sp]
     26c:	str	lr, [sp, #4]
     270:	bic	r0, r0, #16711680	; 0xff0000
     274:	bic	r0, r0, #-16777216	; 0xff000000
     278:	ldr	lr, [sp, #4]
     27c:	add	sp, sp, #8
     280:	bx	lr

00000284 <__flatbuffers_voffset_read_from_pe>:
     284:	mov	ip, sp
     288:	sub	sp, sp, #8
     28c:	str	ip, [sp]
     290:	str	lr, [sp, #4]
     294:	ldrh	r0, [r0]
     298:	bic	r0, r0, #16711680	; 0xff0000
     29c:	bic	r0, r0, #-16777216	; 0xff000000
     2a0:	bl	260 <__flatbuffers_voffset_cast_from_pe>
     2a4:	bic	r0, r0, #16711680	; 0xff0000
     2a8:	bic	r0, r0, #-16777216	; 0xff000000
     2ac:	ldr	lr, [sp, #4]
     2b0:	add	sp, sp, #8
     2b4:	bx	lr

000002b8 <__flatbuffers_thash_cast_from_pe>:
     2b8:	mov	ip, sp
     2bc:	sub	sp, sp, #8
     2c0:	str	ip, [sp]
     2c4:	str	lr, [sp, #4]
     2c8:	ldr	lr, [sp, #4]
     2cc:	add	sp, sp, #8
     2d0:	bx	lr

000002d4 <__flatbuffers_thash_cast_from_le>:
     2d4:	mov	ip, sp
     2d8:	sub	sp, sp, #8
     2dc:	str	ip, [sp]
     2e0:	str	lr, [sp, #4]
     2e4:	ldr	lr, [sp, #4]
     2e8:	add	sp, sp, #8
     2ec:	bx	lr

000002f0 <__flatbuffers_thash_read_from_pe>:
     2f0:	mov	ip, sp
     2f4:	sub	sp, sp, #8
     2f8:	str	ip, [sp]
     2fc:	str	lr, [sp, #4]
     300:	ldr	r0, [r0]
     304:	bl	2b8 <__flatbuffers_thash_cast_from_pe>
     308:	ldr	lr, [sp, #4]
     30c:	add	sp, sp, #8
     310:	bx	lr

00000314 <flatbuffers_vec_len>:
     314:	mov	ip, sp
     318:	sub	sp, sp, #8
     31c:	str	ip, [sp]
     320:	str	lr, [sp, #4]
     324:	cmp	r0, #0
     328:	beq	338 <flatbuffers_vec_len+0x24>
     32c:	sub	r0, r0, #4
     330:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     334:	b	33c <flatbuffers_vec_len+0x28>
     338:	mov	r0, #0
     33c:	ldr	lr, [sp, #4]
     340:	add	sp, sp, #8
     344:	bx	lr

00000348 <__flatbuffers_string_cmp>:
     348:	mov	ip, sp
     34c:	sub	sp, sp, #8
     350:	str	ip, [sp]
     354:	str	lr, [sp, #4]
     358:	bl	0 <strcmp>
     35c:	ldr	lr, [sp, #4]
     360:	add	sp, sp, #8
     364:	bx	lr

00000368 <flatbuffers_has_identifier>:
     368:	mov	ip, sp
     36c:	sub	sp, sp, #24
     370:	str	ip, [sp]
     374:	str	lr, [sp, #4]
     378:	str	r4, [sp, #8]
     37c:	mov	r4, r0
     380:	mov	r3, #0
     384:	str	r3, [sp, #16]
     388:	cmp	r1, #0
     38c:	bne	398 <flatbuffers_has_identifier+0x30>
     390:	mov	r0, #1
     394:	b	3dc <flatbuffers_has_identifier+0x74>
     398:	add	r0, sp, #16
     39c:	mov	r2, #4
     3a0:	bl	0 <strncpy>
     3a4:	ldr	r0, [sp, #16]
     3a8:	bl	2d4 <__flatbuffers_thash_cast_from_le>
     3ac:	str	r0, [sp, #16]
     3b0:	add	r0, r4, #4
     3b4:	bl	2f0 <__flatbuffers_thash_read_from_pe>
     3b8:	ldr	r1, [sp, #16]
     3bc:	cmp	r1, #0
     3c0:	beq	3d8 <flatbuffers_has_identifier+0x70>
     3c4:	ldr	r1, [sp, #16]
     3c8:	cmp	r0, r1
     3cc:	moveq	r0, #1
     3d0:	movne	r0, #0
     3d4:	b	3dc <flatbuffers_has_identifier+0x74>
     3d8:	mov	r0, #1
     3dc:	ldr	r4, [sp, #8]
     3e0:	ldr	lr, [sp, #4]
     3e4:	add	sp, sp, #24
     3e8:	bx	lr

000003ec <reflection_BaseType_cast_from_pe>:
     3ec:	mov	ip, sp
     3f0:	sub	sp, sp, #8
     3f4:	str	ip, [sp]
     3f8:	str	lr, [sp, #4]
     3fc:	and	r0, r0, #255	; 0xff
     400:	sbfx	r0, r0, #0, #8
     404:	sbfx	r0, r0, #0, #8
     408:	ldr	lr, [sp, #4]
     40c:	add	sp, sp, #8
     410:	bx	lr

00000414 <reflection_BaseType_read_from_pe>:
     414:	mov	ip, sp
     418:	sub	sp, sp, #8
     41c:	str	ip, [sp]
     420:	str	lr, [sp, #4]
     424:	ldrsb	r0, [r0]
     428:	sbfx	r0, r0, #0, #8
     42c:	bl	3ec <reflection_BaseType_cast_from_pe>
     430:	sbfx	r0, r0, #0, #8
     434:	ldr	lr, [sp, #4]
     438:	add	sp, sp, #8
     43c:	bx	lr

00000440 <reflection_Type_base_type>:
     440:	mov	ip, sp
     444:	sub	sp, sp, #24
     448:	str	ip, [sp]
     44c:	str	lr, [sp, #4]
     450:	str	r4, [sp, #8]
     454:	str	r5, [sp, #12]
     458:	str	r6, [sp, #16]
     45c:	str	r7, [sp, #20]
     460:	mov	r4, r0
     464:	mov	r5, #0
     468:	cmp	r4, #0
     46c:	beq	484 <reflection_Type_base_type+0x44>
     470:	ldr	r2, [pc, #172]	; 524 <reflection_Type_base_type+0xe4>
     474:	cmp	r2, #0
     478:	movne	ip, #1
     47c:	moveq	ip, #0
     480:	b	488 <reflection_Type_base_type+0x48>
     484:	mov	ip, #0
     488:	cmp	ip, #0
     48c:	bne	4a4 <reflection_Type_base_type+0x64>
     490:	ldr	r0, [pc, #128]	; 518 <reflection_Type_base_type+0xd8>
     494:	ldr	r1, [pc, #132]	; 520 <reflection_Type_base_type+0xe0>
     498:	mov	r2, #147	; 0x93
     49c:	ldr	r3, [pc, #120]	; 51c <reflection_Type_base_type+0xdc>
     4a0:	bl	0 <__assert_fail>
     4a4:	mov	r7, #0
     4a8:	mov	r0, r4
     4ac:	bl	23c <__flatbuffers_soffset_read_from_pe>
     4b0:	sub	r6, r4, r0
     4b4:	mov	r0, r6
     4b8:	bl	284 <__flatbuffers_voffset_read_from_pe>
     4bc:	lsl	r1, r7, #1
     4c0:	add	r1, r1, #6
     4c4:	cmp	r0, r1
     4c8:	bcc	4e0 <reflection_Type_base_type+0xa0>
     4cc:	add	r0, r6, r7, lsl #1
     4d0:	add	r0, r0, #4
     4d4:	bl	284 <__flatbuffers_voffset_read_from_pe>
     4d8:	bic	r5, r0, #16711680	; 0xff0000
     4dc:	bic	r5, r5, #-16777216	; 0xff000000
     4e0:	cmp	r5, #0
     4e4:	beq	4f4 <reflection_Type_base_type+0xb4>
     4e8:	add	r0, r4, r5
     4ec:	bl	414 <reflection_BaseType_read_from_pe>
     4f0:	b	4f8 <reflection_Type_base_type+0xb8>
     4f4:	mov	r0, #0
     4f8:	sbfx	r0, r0, #0, #8
     4fc:	ldr	r4, [sp, #8]
     500:	ldr	r5, [sp, #12]
     504:	ldr	r6, [sp, #16]
     508:	ldr	r7, [sp, #20]
     50c:	ldr	lr, [sp, #4]
     510:	add	sp, sp, #24
     514:	bx	lr
     518:	.word	0x00000000
     51c:	.word	0x000003a5
     520:	.word	0x000001c0
     524:	.word	0x00000085

00000528 <reflection_Type_element>:
     528:	mov	ip, sp
     52c:	sub	sp, sp, #24
     530:	str	ip, [sp]
     534:	str	lr, [sp, #4]
     538:	str	r4, [sp, #8]
     53c:	str	r5, [sp, #12]
     540:	str	r6, [sp, #16]
     544:	str	r7, [sp, #20]
     548:	mov	r4, r0
     54c:	mov	r5, #0
     550:	cmp	r4, #0
     554:	beq	56c <reflection_Type_element+0x44>
     558:	ldr	r2, [pc, #172]	; 60c <reflection_Type_element+0xe4>
     55c:	cmp	r2, #0
     560:	movne	ip, #1
     564:	moveq	ip, #0
     568:	b	570 <reflection_Type_element+0x48>
     56c:	mov	ip, #0
     570:	cmp	ip, #0
     574:	bne	58c <reflection_Type_element+0x64>
     578:	ldr	r0, [pc, #128]	; 600 <reflection_Type_element+0xd8>
     57c:	ldr	r1, [pc, #132]	; 608 <reflection_Type_element+0xe0>
     580:	mov	r2, #148	; 0x94
     584:	ldr	r3, [pc, #120]	; 604 <reflection_Type_element+0xdc>
     588:	bl	0 <__assert_fail>
     58c:	mov	r7, #1
     590:	mov	r0, r4
     594:	bl	23c <__flatbuffers_soffset_read_from_pe>
     598:	sub	r6, r4, r0
     59c:	mov	r0, r6
     5a0:	bl	284 <__flatbuffers_voffset_read_from_pe>
     5a4:	lsl	r1, r7, #1
     5a8:	add	r1, r1, #6
     5ac:	cmp	r0, r1
     5b0:	bcc	5c8 <reflection_Type_element+0xa0>
     5b4:	add	r0, r6, r7, lsl #1
     5b8:	add	r0, r0, #4
     5bc:	bl	284 <__flatbuffers_voffset_read_from_pe>
     5c0:	bic	r5, r0, #16711680	; 0xff0000
     5c4:	bic	r5, r5, #-16777216	; 0xff000000
     5c8:	cmp	r5, #0
     5cc:	beq	5dc <reflection_Type_element+0xb4>
     5d0:	add	r0, r4, r5
     5d4:	bl	414 <reflection_BaseType_read_from_pe>
     5d8:	b	5e0 <reflection_Type_element+0xb8>
     5dc:	mov	r0, #0
     5e0:	sbfx	r0, r0, #0, #8
     5e4:	ldr	r4, [sp, #8]
     5e8:	ldr	r5, [sp, #12]
     5ec:	ldr	r6, [sp, #16]
     5f0:	ldr	r7, [sp, #20]
     5f4:	ldr	lr, [sp, #4]
     5f8:	add	sp, sp, #24
     5fc:	bx	lr
     600:	.word	0x00000000
     604:	.word	0x000003bf
     608:	.word	0x000001c0
     60c:	.word	0x00000085

00000610 <reflection_Type_index>:
     610:	mov	ip, sp
     614:	sub	sp, sp, #24
     618:	str	ip, [sp]
     61c:	str	lr, [sp, #4]
     620:	str	r4, [sp, #8]
     624:	str	r5, [sp, #12]
     628:	str	r6, [sp, #16]
     62c:	str	r7, [sp, #20]
     630:	mov	r4, r0
     634:	mov	r5, #0
     638:	cmp	r4, #0
     63c:	beq	654 <reflection_Type_index+0x44>
     640:	ldr	r2, [pc, #168]	; 6f0 <reflection_Type_index+0xe0>
     644:	cmp	r2, #0
     648:	movne	ip, #1
     64c:	moveq	ip, #0
     650:	b	658 <reflection_Type_index+0x48>
     654:	mov	ip, #0
     658:	cmp	ip, #0
     65c:	bne	674 <reflection_Type_index+0x64>
     660:	ldr	r0, [pc, #124]	; 6e4 <reflection_Type_index+0xd4>
     664:	ldr	r1, [pc, #128]	; 6ec <reflection_Type_index+0xdc>
     668:	mov	r2, #149	; 0x95
     66c:	ldr	r3, [pc, #116]	; 6e8 <reflection_Type_index+0xd8>
     670:	bl	0 <__assert_fail>
     674:	mov	r7, #2
     678:	mov	r0, r4
     67c:	bl	23c <__flatbuffers_soffset_read_from_pe>
     680:	sub	r6, r4, r0
     684:	mov	r0, r6
     688:	bl	284 <__flatbuffers_voffset_read_from_pe>
     68c:	lsl	r1, r7, #1
     690:	add	r1, r1, #6
     694:	cmp	r0, r1
     698:	bcc	6b0 <reflection_Type_index+0xa0>
     69c:	add	r0, r6, r7, lsl #1
     6a0:	add	r0, r0, #4
     6a4:	bl	284 <__flatbuffers_voffset_read_from_pe>
     6a8:	bic	r5, r0, #16711680	; 0xff0000
     6ac:	bic	r5, r5, #-16777216	; 0xff000000
     6b0:	cmp	r5, #0
     6b4:	beq	6c4 <reflection_Type_index+0xb4>
     6b8:	add	r0, r4, r5
     6bc:	bl	174 <flatbuffers_int32_read_from_pe>
     6c0:	b	6c8 <reflection_Type_index+0xb8>
     6c4:	mvn	r0, #0
     6c8:	ldr	r4, [sp, #8]
     6cc:	ldr	r5, [sp, #12]
     6d0:	ldr	r6, [sp, #16]
     6d4:	ldr	r7, [sp, #20]
     6d8:	ldr	lr, [sp, #4]
     6dc:	add	sp, sp, #24
     6e0:	bx	lr
     6e4:	.word	0x00000000
     6e8:	.word	0x000003d7
     6ec:	.word	0x000001c0
     6f0:	.word	0x00000085

000006f4 <reflection_Field_vec_len>:
     6f4:	mov	ip, sp
     6f8:	sub	sp, sp, #8
     6fc:	str	ip, [sp]
     700:	str	lr, [sp, #4]
     704:	cmp	r0, #0
     708:	beq	718 <reflection_Field_vec_len+0x24>
     70c:	sub	r0, r0, #4
     710:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     714:	b	71c <reflection_Field_vec_len+0x28>
     718:	mov	r0, #0
     71c:	ldr	lr, [sp, #4]
     720:	add	sp, sp, #8
     724:	bx	lr

00000728 <reflection_Field_vec_at>:
     728:	mov	ip, sp
     72c:	sub	sp, sp, #16
     730:	str	ip, [sp]
     734:	str	lr, [sp, #4]
     738:	str	r4, [sp, #8]
     73c:	str	r5, [sp, #12]
     740:	mov	r4, r1
     744:	add	r5, r0, r4, lsl #2
     748:	bl	314 <flatbuffers_vec_len>
     74c:	cmp	r0, r4
     750:	bls	768 <reflection_Field_vec_at+0x40>
     754:	ldr	r3, [pc, #80]	; 7ac <reflection_Field_vec_at+0x84>
     758:	cmp	r3, #0
     75c:	movne	r1, #1
     760:	moveq	r1, #0
     764:	b	76c <reflection_Field_vec_at+0x44>
     768:	mov	r1, #0
     76c:	cmp	r1, #0
     770:	bne	788 <reflection_Field_vec_at+0x60>
     774:	ldr	r0, [pc, #52]	; 7b0 <reflection_Field_vec_at+0x88>
     778:	ldr	r1, [pc, #52]	; 7b4 <reflection_Field_vec_at+0x8c>
     77c:	mov	r2, #192	; 0xc0
     780:	ldr	r3, [pc, #32]	; 7a8 <reflection_Field_vec_at+0x80>
     784:	bl	0 <__assert_fail>
     788:	mov	r0, r5
     78c:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     790:	add	r0, r5, r0
     794:	ldr	r4, [sp, #8]
     798:	ldr	r5, [sp, #12]
     79c:	ldr	lr, [sp, #4]
     7a0:	add	sp, sp, #16
     7a4:	bx	lr
     7a8:	.word	0x000003ed
     7ac:	.word	0x0000003d
     7b0:	.word	0x0000032c
     7b4:	.word	0x000001c0

000007b8 <reflection_Field_name>:
     7b8:	mov	ip, sp
     7bc:	sub	sp, sp, #24
     7c0:	str	ip, [sp]
     7c4:	str	lr, [sp, #4]
     7c8:	str	r4, [sp, #8]
     7cc:	str	r5, [sp, #12]
     7d0:	str	r6, [sp, #16]
     7d4:	str	r7, [sp, #20]
     7d8:	mov	r4, r0
     7dc:	mov	r6, #0
     7e0:	cmp	r4, #0
     7e4:	beq	7fc <reflection_Field_name+0x44>
     7e8:	ldr	r1, [pc, #252]	; 8ec <reflection_Field_name+0x134>
     7ec:	cmp	r1, #0
     7f0:	movne	r0, #1
     7f4:	moveq	r0, #0
     7f8:	b	800 <reflection_Field_name+0x48>
     7fc:	mov	r0, #0
     800:	cmp	r0, #0
     804:	bne	81c <reflection_Field_name+0x64>
     808:	ldr	r0, [pc, #200]	; 8d8 <reflection_Field_name+0x120>
     80c:	ldr	r1, [pc, #212]	; 8e8 <reflection_Field_name+0x130>
     810:	mov	r2, #195	; 0xc3
     814:	ldr	r3, [pc, #192]	; 8dc <reflection_Field_name+0x124>
     818:	bl	0 <__assert_fail>
     81c:	mov	r7, #0
     820:	mov	r0, r4
     824:	bl	23c <__flatbuffers_soffset_read_from_pe>
     828:	sub	r5, r4, r0
     82c:	mov	r0, r5
     830:	bl	284 <__flatbuffers_voffset_read_from_pe>
     834:	lsl	r3, r7, #1
     838:	add	r1, r3, #6
     83c:	cmp	r0, r1
     840:	bcc	858 <reflection_Field_name+0xa0>
     844:	add	r1, r5, r7, lsl #1
     848:	add	r0, r1, #4
     84c:	bl	284 <__flatbuffers_voffset_read_from_pe>
     850:	bic	r6, r0, #16711680	; 0xff0000
     854:	bic	r6, r6, #-16777216	; 0xff000000
     858:	cmp	r6, #0
     85c:	beq	878 <reflection_Field_name+0xc0>
     860:	add	r4, r4, r6
     864:	mov	r0, r4
     868:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     86c:	add	r0, r4, r0
     870:	add	r0, r0, #4
     874:	b	8bc <reflection_Field_name+0x104>
     878:	mov	r0, #0
     87c:	cmp	r0, #0
     880:	beq	898 <reflection_Field_name+0xe0>
     884:	ldr	r0, [pc, #88]	; 8e4 <reflection_Field_name+0x12c>
     888:	cmp	r0, #0
     88c:	movne	r0, #1
     890:	moveq	r0, #0
     894:	b	89c <reflection_Field_name+0xe4>
     898:	mov	r0, #0
     89c:	cmp	r0, #0
     8a0:	bne	8b8 <reflection_Field_name+0x100>
     8a4:	ldr	r0, [pc, #52]	; 8e0 <reflection_Field_name+0x128>
     8a8:	ldr	r1, [pc, #56]	; 8e8 <reflection_Field_name+0x130>
     8ac:	mov	r2, #195	; 0xc3
     8b0:	ldr	r3, [pc, #36]	; 8dc <reflection_Field_name+0x124>
     8b4:	bl	0 <__assert_fail>
     8b8:	mov	r0, #0
     8bc:	ldr	r4, [sp, #8]
     8c0:	ldr	r5, [sp, #12]
     8c4:	ldr	r6, [sp, #16]
     8c8:	ldr	r7, [sp, #20]
     8cc:	ldr	lr, [sp, #4]
     8d0:	add	sp, sp, #24
     8d4:	bx	lr
     8d8:	.word	0x00000000
     8dc:	.word	0x00000405
     8e0:	.word	0x00000127
     8e4:	.word	0x0000028b
     8e8:	.word	0x000001c0
     8ec:	.word	0x00000085

000008f0 <reflection_Field_vec_find_by_name>:
     8f0:	mov	ip, sp
     8f4:	sub	sp, sp, #32
     8f8:	str	ip, [sp]
     8fc:	str	lr, [sp, #4]
     900:	str	r4, [sp, #8]
     904:	str	r5, [sp, #12]
     908:	str	r6, [sp, #16]
     90c:	str	r7, [sp, #20]
     910:	str	r8, [sp, #24]
     914:	mov	r4, r1
     918:	mov	r7, r0
     91c:	mov	r5, #0
     920:	mov	r0, r7
     924:	bl	6f4 <reflection_Field_vec_len>
     928:	cmp	r0, #0
     92c:	bne	93c <reflection_Field_vec_find_by_name+0x4c>
     930:	ldr	r0, [pc, #168]	; 9e0 <reflection_Field_vec_find_by_name+0xf0>
     934:	ldr	r0, [r0]
     938:	b	9c0 <reflection_Field_vec_find_by_name+0xd0>
     93c:	sub	r8, r0, #1
     940:	cmp	r5, r8
     944:	bcs	984 <reflection_Field_vec_find_by_name+0x94>
     948:	sub	r0, r8, r5
     94c:	add	r6, r5, r0, lsr #1
     950:	mov	r1, r6
     954:	mov	r0, r7
     958:	bl	728 <reflection_Field_vec_at>
     95c:	bl	7b8 <reflection_Field_name>
     960:	mov	r2, #0
     964:	mov	r1, r4
     968:	bl	348 <__flatbuffers_string_cmp>
     96c:	cmp	r0, #0
     970:	bge	97c <reflection_Field_vec_find_by_name+0x8c>
     974:	add	r5, r6, #1
     978:	b	940 <reflection_Field_vec_find_by_name+0x50>
     97c:	mov	r8, r6
     980:	b	940 <reflection_Field_vec_find_by_name+0x50>
     984:	cmp	r5, r8
     988:	bne	9b8 <reflection_Field_vec_find_by_name+0xc8>
     98c:	mov	r1, r5
     990:	mov	r0, r7
     994:	bl	728 <reflection_Field_vec_at>
     998:	bl	7b8 <reflection_Field_name>
     99c:	mov	r2, #0
     9a0:	mov	r1, r4
     9a4:	bl	348 <__flatbuffers_string_cmp>
     9a8:	cmp	r0, #0
     9ac:	bne	9b8 <reflection_Field_vec_find_by_name+0xc8>
     9b0:	mov	r0, r5
     9b4:	b	9c0 <reflection_Field_vec_find_by_name+0xd0>
     9b8:	ldr	r0, [pc, #32]	; 9e0 <reflection_Field_vec_find_by_name+0xf0>
     9bc:	ldr	r0, [r0]
     9c0:	ldr	r4, [sp, #8]
     9c4:	ldr	r5, [sp, #12]
     9c8:	ldr	r6, [sp, #16]
     9cc:	ldr	r7, [sp, #20]
     9d0:	ldr	r8, [sp, #24]
     9d4:	ldr	lr, [sp, #4]
     9d8:	add	sp, sp, #32
     9dc:	bx	lr
     9e0:	.word	0x00000000

000009e4 <reflection_Field_vec_find>:
     9e4:	mov	ip, sp
     9e8:	sub	sp, sp, #8
     9ec:	str	ip, [sp]
     9f0:	str	lr, [sp, #4]
     9f4:	bl	8f0 <reflection_Field_vec_find_by_name>
     9f8:	ldr	lr, [sp, #4]
     9fc:	add	sp, sp, #8
     a00:	bx	lr

00000a04 <reflection_Field_type>:
     a04:	mov	ip, sp
     a08:	sub	sp, sp, #24
     a0c:	str	ip, [sp]
     a10:	str	lr, [sp, #4]
     a14:	str	r4, [sp, #8]
     a18:	str	r5, [sp, #12]
     a1c:	str	r6, [sp, #16]
     a20:	str	r7, [sp, #20]
     a24:	mov	r4, r0
     a28:	mov	r6, #0
     a2c:	cmp	r4, #0
     a30:	beq	a48 <reflection_Field_type+0x44>
     a34:	ldr	r2, [pc, #248]	; b34 <reflection_Field_type+0x130>
     a38:	cmp	r2, #0
     a3c:	movne	r1, #1
     a40:	moveq	r1, #0
     a44:	b	a4c <reflection_Field_type+0x48>
     a48:	mov	r1, #0
     a4c:	cmp	r1, #0
     a50:	bne	a68 <reflection_Field_type+0x64>
     a54:	ldr	r0, [pc, #196]	; b20 <reflection_Field_type+0x11c>
     a58:	ldr	r1, [pc, #208]	; b30 <reflection_Field_type+0x12c>
     a5c:	mov	r2, #201	; 0xc9
     a60:	ldr	r3, [pc, #188]	; b24 <reflection_Field_type+0x120>
     a64:	bl	0 <__assert_fail>
     a68:	mov	r7, #1
     a6c:	mov	r0, r4
     a70:	bl	23c <__flatbuffers_soffset_read_from_pe>
     a74:	sub	r5, r4, r0
     a78:	mov	r0, r5
     a7c:	bl	284 <__flatbuffers_voffset_read_from_pe>
     a80:	lsl	r3, r7, #1
     a84:	add	ip, r3, #6
     a88:	cmp	r0, ip
     a8c:	bcc	aa4 <reflection_Field_type+0xa0>
     a90:	add	r1, r5, r7, lsl #1
     a94:	add	r0, r1, #4
     a98:	bl	284 <__flatbuffers_voffset_read_from_pe>
     a9c:	bic	r6, r0, #16711680	; 0xff0000
     aa0:	bic	r6, r6, #-16777216	; 0xff000000
     aa4:	cmp	r6, #0
     aa8:	beq	ac0 <reflection_Field_type+0xbc>
     aac:	add	r4, r4, r6
     ab0:	mov	r0, r4
     ab4:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     ab8:	add	r0, r4, r0
     abc:	b	b04 <reflection_Field_type+0x100>
     ac0:	mov	r0, #0
     ac4:	cmp	r0, #0
     ac8:	beq	ae0 <reflection_Field_type+0xdc>
     acc:	ldr	r0, [pc, #88]	; b2c <reflection_Field_type+0x128>
     ad0:	cmp	r0, #0
     ad4:	movne	r0, #1
     ad8:	moveq	r0, #0
     adc:	b	ae4 <reflection_Field_type+0xe0>
     ae0:	mov	r0, #0
     ae4:	cmp	r0, #0
     ae8:	bne	b00 <reflection_Field_type+0xfc>
     aec:	ldr	r0, [pc, #52]	; b28 <reflection_Field_type+0x124>
     af0:	ldr	r1, [pc, #56]	; b30 <reflection_Field_type+0x12c>
     af4:	mov	r2, #201	; 0xc9
     af8:	ldr	r3, [pc, #36]	; b24 <reflection_Field_type+0x120>
     afc:	bl	0 <__assert_fail>
     b00:	mov	r0, #0
     b04:	ldr	r4, [sp, #8]
     b08:	ldr	r5, [sp, #12]
     b0c:	ldr	r6, [sp, #16]
     b10:	ldr	r7, [sp, #20]
     b14:	ldr	lr, [sp, #4]
     b18:	add	sp, sp, #24
     b1c:	bx	lr
     b20:	.word	0x00000000
     b24:	.word	0x0000041b
     b28:	.word	0x00000127
     b2c:	.word	0x0000028b
     b30:	.word	0x000001c0
     b34:	.word	0x00000085

00000b38 <reflection_Field_default_integer>:
     b38:	mov	ip, sp
     b3c:	sub	sp, sp, #24
     b40:	str	ip, [sp]
     b44:	str	lr, [sp, #4]
     b48:	str	r4, [sp, #8]
     b4c:	str	r5, [sp, #12]
     b50:	str	r6, [sp, #16]
     b54:	str	r7, [sp, #20]
     b58:	mov	r4, r0
     b5c:	mov	r6, #0
     b60:	cmp	r4, #0
     b64:	beq	b7c <reflection_Field_default_integer+0x44>
     b68:	ldr	r0, [pc, #168]	; c18 <reflection_Field_default_integer+0xe0>
     b6c:	cmp	r0, #0
     b70:	movne	r1, #1
     b74:	moveq	r1, #0
     b78:	b	b80 <reflection_Field_default_integer+0x48>
     b7c:	mov	r1, #0
     b80:	cmp	r1, #0
     b84:	bne	b9c <reflection_Field_default_integer+0x64>
     b88:	ldr	r0, [pc, #128]	; c10 <reflection_Field_default_integer+0xd8>
     b8c:	ldr	r1, [pc, #128]	; c14 <reflection_Field_default_integer+0xdc>
     b90:	mov	r2, #204	; 0xcc
     b94:	ldr	r3, [pc, #128]	; c1c <reflection_Field_default_integer+0xe4>
     b98:	bl	0 <__assert_fail>
     b9c:	mov	r7, #4
     ba0:	mov	r0, r4
     ba4:	bl	23c <__flatbuffers_soffset_read_from_pe>
     ba8:	sub	r5, r4, r0
     bac:	mov	r0, r5
     bb0:	bl	284 <__flatbuffers_voffset_read_from_pe>
     bb4:	lsl	ip, r7, #1
     bb8:	add	r3, ip, #6
     bbc:	cmp	r0, r3
     bc0:	bcc	bd8 <reflection_Field_default_integer+0xa0>
     bc4:	add	r0, r5, r7, lsl #1
     bc8:	add	r0, r0, #4
     bcc:	bl	284 <__flatbuffers_voffset_read_from_pe>
     bd0:	bic	r6, r0, #16711680	; 0xff0000
     bd4:	bic	r6, r6, #-16777216	; 0xff000000
     bd8:	cmp	r6, #0
     bdc:	beq	bec <reflection_Field_default_integer+0xb4>
     be0:	add	r0, r4, r6
     be4:	bl	1b4 <flatbuffers_int64_read_from_pe>
     be8:	b	bf4 <reflection_Field_default_integer+0xbc>
     bec:	mov	r1, #0
     bf0:	mov	r0, #0
     bf4:	ldr	r4, [sp, #8]
     bf8:	ldr	r5, [sp, #12]
     bfc:	ldr	r6, [sp, #16]
     c00:	ldr	r7, [sp, #20]
     c04:	ldr	lr, [sp, #4]
     c08:	add	sp, sp, #24
     c0c:	bx	lr
     c10:	.word	0x00000000
     c14:	.word	0x000001c0
     c18:	.word	0x00000085
     c1c:	.word	0x00000431

00000c20 <reflection_Object_vec_len>:
     c20:	mov	ip, sp
     c24:	sub	sp, sp, #8
     c28:	str	ip, [sp]
     c2c:	str	lr, [sp, #4]
     c30:	cmp	r0, #0
     c34:	beq	c44 <reflection_Object_vec_len+0x24>
     c38:	sub	r0, r0, #4
     c3c:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     c40:	b	c48 <reflection_Object_vec_len+0x28>
     c44:	mov	r0, #0
     c48:	ldr	lr, [sp, #4]
     c4c:	add	sp, sp, #8
     c50:	bx	lr

00000c54 <reflection_Object_vec_at>:
     c54:	mov	ip, sp
     c58:	sub	sp, sp, #16
     c5c:	str	ip, [sp]
     c60:	str	lr, [sp, #4]
     c64:	str	r4, [sp, #8]
     c68:	str	r5, [sp, #12]
     c6c:	mov	r4, r1
     c70:	add	r5, r0, r4, lsl #2
     c74:	bl	314 <flatbuffers_vec_len>
     c78:	cmp	r0, r4
     c7c:	bls	c94 <reflection_Object_vec_at+0x40>
     c80:	ldr	r3, [pc, #76]	; cd4 <reflection_Object_vec_at+0x80>
     c84:	cmp	r3, #0
     c88:	movne	r1, #1
     c8c:	moveq	r1, #0
     c90:	b	c98 <reflection_Object_vec_at+0x44>
     c94:	mov	r1, #0
     c98:	cmp	r1, #0
     c9c:	bne	cb4 <reflection_Object_vec_at+0x60>
     ca0:	ldr	r0, [pc, #48]	; cd8 <reflection_Object_vec_at+0x84>
     ca4:	ldr	r1, [pc, #52]	; ce0 <reflection_Object_vec_at+0x8c>
     ca8:	mov	r2, #215	; 0xd7
     cac:	ldr	r3, [pc, #40]	; cdc <reflection_Object_vec_at+0x88>
     cb0:	bl	0 <__assert_fail>
     cb4:	mov	r0, r5
     cb8:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     cbc:	add	r0, r5, r0
     cc0:	ldr	r4, [sp, #8]
     cc4:	ldr	r5, [sp, #12]
     cc8:	ldr	lr, [sp, #4]
     ccc:	add	sp, sp, #16
     cd0:	bx	lr
     cd4:	.word	0x0000003d
     cd8:	.word	0x0000032c
     cdc:	.word	0x00000452
     ce0:	.word	0x000001c0

00000ce4 <reflection_Object_name>:
     ce4:	mov	ip, sp
     ce8:	sub	sp, sp, #24
     cec:	str	ip, [sp]
     cf0:	str	lr, [sp, #4]
     cf4:	str	r4, [sp, #8]
     cf8:	str	r5, [sp, #12]
     cfc:	str	r6, [sp, #16]
     d00:	str	r7, [sp, #20]
     d04:	mov	r4, r0
     d08:	mov	r6, #0
     d0c:	cmp	r4, #0
     d10:	beq	d28 <reflection_Object_name+0x44>
     d14:	ldr	r1, [pc, #252]	; e18 <reflection_Object_name+0x134>
     d18:	cmp	r1, #0
     d1c:	movne	r0, #1
     d20:	moveq	r0, #0
     d24:	b	d2c <reflection_Object_name+0x48>
     d28:	mov	r0, #0
     d2c:	cmp	r0, #0
     d30:	bne	d48 <reflection_Object_name+0x64>
     d34:	ldr	r0, [pc, #200]	; e04 <reflection_Object_name+0x120>
     d38:	ldr	r1, [pc, #212]	; e14 <reflection_Object_name+0x130>
     d3c:	mov	r2, #218	; 0xda
     d40:	ldr	r3, [pc, #196]	; e0c <reflection_Object_name+0x128>
     d44:	bl	0 <__assert_fail>
     d48:	mov	r7, #0
     d4c:	mov	r0, r4
     d50:	bl	23c <__flatbuffers_soffset_read_from_pe>
     d54:	sub	r5, r4, r0
     d58:	mov	r0, r5
     d5c:	bl	284 <__flatbuffers_voffset_read_from_pe>
     d60:	lsl	r3, r7, #1
     d64:	add	r1, r3, #6
     d68:	cmp	r0, r1
     d6c:	bcc	d84 <reflection_Object_name+0xa0>
     d70:	add	r1, r5, r7, lsl #1
     d74:	add	r0, r1, #4
     d78:	bl	284 <__flatbuffers_voffset_read_from_pe>
     d7c:	bic	r6, r0, #16711680	; 0xff0000
     d80:	bic	r6, r6, #-16777216	; 0xff000000
     d84:	cmp	r6, #0
     d88:	beq	da4 <reflection_Object_name+0xc0>
     d8c:	add	r4, r4, r6
     d90:	mov	r0, r4
     d94:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     d98:	add	r0, r4, r0
     d9c:	add	r0, r0, #4
     da0:	b	de8 <reflection_Object_name+0x104>
     da4:	mov	r0, #0
     da8:	cmp	r0, #0
     dac:	beq	dc4 <reflection_Object_name+0xe0>
     db0:	ldr	r0, [pc, #88]	; e10 <reflection_Object_name+0x12c>
     db4:	cmp	r0, #0
     db8:	movne	r0, #1
     dbc:	moveq	r0, #0
     dc0:	b	dc8 <reflection_Object_name+0xe4>
     dc4:	mov	r0, #0
     dc8:	cmp	r0, #0
     dcc:	bne	de4 <reflection_Object_name+0x100>
     dd0:	ldr	r0, [pc, #48]	; e08 <reflection_Object_name+0x124>
     dd4:	ldr	r1, [pc, #56]	; e14 <reflection_Object_name+0x130>
     dd8:	mov	r2, #218	; 0xda
     ddc:	ldr	r3, [pc, #40]	; e0c <reflection_Object_name+0x128>
     de0:	bl	0 <__assert_fail>
     de4:	mov	r0, #0
     de8:	ldr	r4, [sp, #8]
     dec:	ldr	r5, [sp, #12]
     df0:	ldr	r6, [sp, #16]
     df4:	ldr	r7, [sp, #20]
     df8:	ldr	lr, [sp, #4]
     dfc:	add	sp, sp, #24
     e00:	bx	lr
     e04:	.word	0x00000000
     e08:	.word	0x00000127
     e0c:	.word	0x0000046b
     e10:	.word	0x0000028b
     e14:	.word	0x000001c0
     e18:	.word	0x00000085

00000e1c <reflection_Object_vec_find_by_name>:
     e1c:	mov	ip, sp
     e20:	sub	sp, sp, #32
     e24:	str	ip, [sp]
     e28:	str	lr, [sp, #4]
     e2c:	str	r4, [sp, #8]
     e30:	str	r5, [sp, #12]
     e34:	str	r6, [sp, #16]
     e38:	str	r7, [sp, #20]
     e3c:	str	r8, [sp, #24]
     e40:	mov	r4, r1
     e44:	mov	r7, r0
     e48:	mov	r5, #0
     e4c:	mov	r0, r7
     e50:	bl	c20 <reflection_Object_vec_len>
     e54:	cmp	r0, #0
     e58:	bne	e68 <reflection_Object_vec_find_by_name+0x4c>
     e5c:	ldr	r0, [pc, #168]	; f0c <reflection_Object_vec_find_by_name+0xf0>
     e60:	ldr	r0, [r0]
     e64:	b	eec <reflection_Object_vec_find_by_name+0xd0>
     e68:	sub	r8, r0, #1
     e6c:	cmp	r5, r8
     e70:	bcs	eb0 <reflection_Object_vec_find_by_name+0x94>
     e74:	sub	r0, r8, r5
     e78:	add	r6, r5, r0, lsr #1
     e7c:	mov	r1, r6
     e80:	mov	r0, r7
     e84:	bl	c54 <reflection_Object_vec_at>
     e88:	bl	ce4 <reflection_Object_name>
     e8c:	mov	r2, #0
     e90:	mov	r1, r4
     e94:	bl	348 <__flatbuffers_string_cmp>
     e98:	cmp	r0, #0
     e9c:	bge	ea8 <reflection_Object_vec_find_by_name+0x8c>
     ea0:	add	r5, r6, #1
     ea4:	b	e6c <reflection_Object_vec_find_by_name+0x50>
     ea8:	mov	r8, r6
     eac:	b	e6c <reflection_Object_vec_find_by_name+0x50>
     eb0:	cmp	r5, r8
     eb4:	bne	ee4 <reflection_Object_vec_find_by_name+0xc8>
     eb8:	mov	r1, r5
     ebc:	mov	r0, r7
     ec0:	bl	c54 <reflection_Object_vec_at>
     ec4:	bl	ce4 <reflection_Object_name>
     ec8:	mov	r2, #0
     ecc:	mov	r1, r4
     ed0:	bl	348 <__flatbuffers_string_cmp>
     ed4:	cmp	r0, #0
     ed8:	bne	ee4 <reflection_Object_vec_find_by_name+0xc8>
     edc:	mov	r0, r5
     ee0:	b	eec <reflection_Object_vec_find_by_name+0xd0>
     ee4:	ldr	r0, [pc, #32]	; f0c <reflection_Object_vec_find_by_name+0xf0>
     ee8:	ldr	r0, [r0]
     eec:	ldr	r4, [sp, #8]
     ef0:	ldr	r5, [sp, #12]
     ef4:	ldr	r6, [sp, #16]
     ef8:	ldr	r7, [sp, #20]
     efc:	ldr	r8, [sp, #24]
     f00:	ldr	lr, [sp, #4]
     f04:	add	sp, sp, #32
     f08:	bx	lr
     f0c:	.word	0x00000000

00000f10 <reflection_Object_vec_find>:
     f10:	mov	ip, sp
     f14:	sub	sp, sp, #8
     f18:	str	ip, [sp]
     f1c:	str	lr, [sp, #4]
     f20:	bl	e1c <reflection_Object_vec_find_by_name>
     f24:	ldr	lr, [sp, #4]
     f28:	add	sp, sp, #8
     f2c:	bx	lr

00000f30 <reflection_Object_fields>:
     f30:	mov	ip, sp
     f34:	sub	sp, sp, #24
     f38:	str	ip, [sp]
     f3c:	str	lr, [sp, #4]
     f40:	str	r4, [sp, #8]
     f44:	str	r5, [sp, #12]
     f48:	str	r6, [sp, #16]
     f4c:	str	r7, [sp, #20]
     f50:	mov	r4, r0
     f54:	mov	r6, #0
     f58:	cmp	r4, #0
     f5c:	beq	f74 <reflection_Object_fields+0x44>
     f60:	ldr	r1, [pc, #252]	; 1064 <reflection_Object_fields+0x134>
     f64:	cmp	r1, #0
     f68:	movne	r0, #1
     f6c:	moveq	r0, #0
     f70:	b	f78 <reflection_Object_fields+0x48>
     f74:	mov	r0, #0
     f78:	cmp	r0, #0
     f7c:	bne	f94 <reflection_Object_fields+0x64>
     f80:	ldr	r0, [pc, #200]	; 1050 <reflection_Object_fields+0x120>
     f84:	ldr	r1, [pc, #212]	; 1060 <reflection_Object_fields+0x130>
     f88:	mov	r2, #224	; 0xe0
     f8c:	ldr	r3, [pc, #196]	; 1058 <reflection_Object_fields+0x128>
     f90:	bl	0 <__assert_fail>
     f94:	mov	r7, #1
     f98:	mov	r0, r4
     f9c:	bl	23c <__flatbuffers_soffset_read_from_pe>
     fa0:	sub	r5, r4, r0
     fa4:	mov	r0, r5
     fa8:	bl	284 <__flatbuffers_voffset_read_from_pe>
     fac:	lsl	r3, r7, #1
     fb0:	add	r1, r3, #6
     fb4:	cmp	r0, r1
     fb8:	bcc	fd0 <reflection_Object_fields+0xa0>
     fbc:	add	r1, r5, r7, lsl #1
     fc0:	add	r0, r1, #4
     fc4:	bl	284 <__flatbuffers_voffset_read_from_pe>
     fc8:	bic	r6, r0, #16711680	; 0xff0000
     fcc:	bic	r6, r6, #-16777216	; 0xff000000
     fd0:	cmp	r6, #0
     fd4:	beq	ff0 <reflection_Object_fields+0xc0>
     fd8:	add	r4, r4, r6
     fdc:	mov	r0, r4
     fe0:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
     fe4:	add	r0, r4, r0
     fe8:	add	r0, r0, #4
     fec:	b	1034 <reflection_Object_fields+0x104>
     ff0:	mov	r0, #0
     ff4:	cmp	r0, #0
     ff8:	beq	1010 <reflection_Object_fields+0xe0>
     ffc:	ldr	r0, [pc, #88]	; 105c <reflection_Object_fields+0x12c>
    1000:	cmp	r0, #0
    1004:	movne	r0, #1
    1008:	moveq	r0, #0
    100c:	b	1014 <reflection_Object_fields+0xe4>
    1010:	mov	r0, #0
    1014:	cmp	r0, #0
    1018:	bne	1030 <reflection_Object_fields+0x100>
    101c:	ldr	r0, [pc, #48]	; 1054 <reflection_Object_fields+0x124>
    1020:	ldr	r1, [pc, #56]	; 1060 <reflection_Object_fields+0x130>
    1024:	mov	r2, #224	; 0xe0
    1028:	ldr	r3, [pc, #40]	; 1058 <reflection_Object_fields+0x128>
    102c:	bl	0 <__assert_fail>
    1030:	mov	r0, #0
    1034:	ldr	r4, [sp, #8]
    1038:	ldr	r5, [sp, #12]
    103c:	ldr	r6, [sp, #16]
    1040:	ldr	r7, [sp, #20]
    1044:	ldr	lr, [sp, #4]
    1048:	add	sp, sp, #24
    104c:	bx	lr
    1050:	.word	0x00000000
    1054:	.word	0x00000127
    1058:	.word	0x00000482
    105c:	.word	0x0000028b
    1060:	.word	0x000001c0
    1064:	.word	0x00000085

00001068 <reflection_Schema_as_root>:
    1068:	mov	ip, sp
    106c:	sub	sp, sp, #16
    1070:	str	ip, [sp]
    1074:	str	lr, [sp, #4]
    1078:	str	r4, [sp, #8]
    107c:	mov	r4, r0
    1080:	ldr	r1, [pc, #76]	; 10d4 <reflection_Schema_as_root+0x6c>
    1084:	cmp	r4, #0
    1088:	beq	10a4 <reflection_Schema_as_root+0x3c>
    108c:	mov	r0, r4
    1090:	bl	368 <flatbuffers_has_identifier>
    1094:	cmp	r0, #0
    1098:	moveq	r1, #1
    109c:	movne	r1, #0
    10a0:	b	10a8 <reflection_Schema_as_root+0x40>
    10a4:	mov	r1, #1
    10a8:	cmp	r1, #0
    10ac:	bne	10c0 <reflection_Schema_as_root+0x58>
    10b0:	mov	r0, r4
    10b4:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
    10b8:	add	r0, r4, r0
    10bc:	b	10c4 <reflection_Schema_as_root+0x5c>
    10c0:	mov	r0, #0
    10c4:	ldr	r4, [sp, #8]
    10c8:	ldr	lr, [sp, #4]
    10cc:	add	sp, sp, #16
    10d0:	bx	lr
    10d4:	.word	0x000002a2

000010d8 <reflection_Schema_objects>:
    10d8:	mov	ip, sp
    10dc:	sub	sp, sp, #24
    10e0:	str	ip, [sp]
    10e4:	str	lr, [sp, #4]
    10e8:	str	r4, [sp, #8]
    10ec:	str	r5, [sp, #12]
    10f0:	str	r6, [sp, #16]
    10f4:	str	r7, [sp, #20]
    10f8:	mov	r4, r0
    10fc:	mov	r6, #0
    1100:	cmp	r4, #0
    1104:	beq	111c <reflection_Schema_objects+0x44>
    1108:	ldr	r1, [pc, #252]	; 120c <reflection_Schema_objects+0x134>
    110c:	cmp	r1, #0
    1110:	movne	r0, #1
    1114:	moveq	r0, #0
    1118:	b	1120 <reflection_Schema_objects+0x48>
    111c:	mov	r0, #0
    1120:	cmp	r0, #0
    1124:	bne	113c <reflection_Schema_objects+0x64>
    1128:	ldr	r0, [pc, #200]	; 11f8 <reflection_Schema_objects+0x120>
    112c:	ldr	r1, [pc, #212]	; 1208 <reflection_Schema_objects+0x130>
    1130:	mov	r2, #237	; 0xed
    1134:	ldr	r3, [pc, #200]	; 1204 <reflection_Schema_objects+0x12c>
    1138:	bl	0 <__assert_fail>
    113c:	mov	r7, #0
    1140:	mov	r0, r4
    1144:	bl	23c <__flatbuffers_soffset_read_from_pe>
    1148:	sub	r5, r4, r0
    114c:	mov	r0, r5
    1150:	bl	284 <__flatbuffers_voffset_read_from_pe>
    1154:	lsl	r3, r7, #1
    1158:	add	r1, r3, #6
    115c:	cmp	r0, r1
    1160:	bcc	1178 <reflection_Schema_objects+0xa0>
    1164:	add	r1, r5, r7, lsl #1
    1168:	add	r0, r1, #4
    116c:	bl	284 <__flatbuffers_voffset_read_from_pe>
    1170:	bic	r6, r0, #16711680	; 0xff0000
    1174:	bic	r6, r6, #-16777216	; 0xff000000
    1178:	cmp	r6, #0
    117c:	beq	1198 <reflection_Schema_objects+0xc0>
    1180:	add	r4, r4, r6
    1184:	mov	r0, r4
    1188:	bl	1fc <__flatbuffers_uoffset_read_from_pe>
    118c:	add	r0, r4, r0
    1190:	add	r0, r0, #4
    1194:	b	11dc <reflection_Schema_objects+0x104>
    1198:	mov	r0, #0
    119c:	cmp	r0, #0
    11a0:	beq	11b8 <reflection_Schema_objects+0xe0>
    11a4:	ldr	r0, [pc, #84]	; 1200 <reflection_Schema_objects+0x128>
    11a8:	cmp	r0, #0
    11ac:	movne	r0, #1
    11b0:	moveq	r0, #0
    11b4:	b	11bc <reflection_Schema_objects+0xe4>
    11b8:	mov	r0, #0
    11bc:	cmp	r0, #0
    11c0:	bne	11d8 <reflection_Schema_objects+0x100>
    11c4:	ldr	r0, [pc, #48]	; 11fc <reflection_Schema_objects+0x124>
    11c8:	ldr	r1, [pc, #56]	; 1208 <reflection_Schema_objects+0x130>
    11cc:	mov	r2, #237	; 0xed
    11d0:	ldr	r3, [pc, #44]	; 1204 <reflection_Schema_objects+0x12c>
    11d4:	bl	0 <__assert_fail>
    11d8:	mov	r0, #0
    11dc:	ldr	r4, [sp, #8]
    11e0:	ldr	r5, [sp, #12]
    11e4:	ldr	r6, [sp, #16]
    11e8:	ldr	r7, [sp, #20]
    11ec:	ldr	lr, [sp, #4]
    11f0:	add	sp, sp, #24
    11f4:	bx	lr
    11f8:	.word	0x00000000
    11fc:	.word	0x00000127
    1200:	.word	0x0000028b
    1204:	.word	0x0000049b
    1208:	.word	0x000001c0
    120c:	.word	0x00000085

00001210 <test_schema>:
    1210:	mov	ip, sp
    1214:	sub	sp, sp, #40	; 0x28
    1218:	str	ip, [sp]
    121c:	str	lr, [sp, #4]
    1220:	str	r4, [sp, #8]
    1224:	str	r5, [sp, #12]
    1228:	str	r6, [sp, #16]
    122c:	str	r7, [sp, #20]
    1230:	str	r8, [sp, #24]
    1234:	mvn	r7, #0
    1238:	movw	r1, #10000	; 0x2710
    123c:	add	r2, sp, #32
    1240:	bl	0 <readfile>
    1244:	mov	r6, r0
    1248:	cmp	r6, #0
    124c:	bne	125c <test_schema+0x4c>
    1250:	ldr	r0, [pc, #744]	; 1540 <test_schema+0x330>
    1254:	bl	0 <printf>
    1258:	b	14c8 <test_schema+0x2b8>
    125c:	mov	r0, r6
    1260:	bl	1068 <reflection_Schema_as_root>
    1264:	bl	10d8 <reflection_Schema_objects>
    1268:	mov	r4, r0
    126c:	mov	r5, #0
    1270:	mov	r0, r4
    1274:	bl	c20 <reflection_Object_vec_len>
    1278:	cmp	r5, r0
    127c:	bcs	12ac <test_schema+0x9c>
    1280:	mov	r1, r5
    1284:	mov	r0, r4
    1288:	bl	c54 <reflection_Object_vec_at>
    128c:	bl	ce4 <reflection_Object_name>
    1290:	ldr	r1, [pc, #652]	; 1524 <test_schema+0x314>
    1294:	mov	r2, r0
    1298:	mov	r0, r1
    129c:	mov	r1, r5
    12a0:	bl	0 <printf>
    12a4:	add	r5, r5, #1
    12a8:	b	1270 <test_schema+0x60>
    12ac:	ldr	r1, [pc, #592]	; 1504 <test_schema+0x2f4>
    12b0:	mov	r0, r4
    12b4:	bl	f10 <reflection_Object_vec_find>
    12b8:	mov	r8, r0
    12bc:	ldr	ip, [pc, #596]	; 1518 <test_schema+0x308>
    12c0:	ldr	r2, [ip]
    12c4:	cmp	r8, r2
    12c8:	bne	12d8 <test_schema+0xc8>
    12cc:	ldr	r0, [pc, #604]	; 1530 <test_schema+0x320>
    12d0:	bl	0 <printf>
    12d4:	b	14c8 <test_schema+0x2b8>
    12d8:	mov	r1, r8
    12dc:	mov	r0, r4
    12e0:	bl	c54 <reflection_Object_vec_at>
    12e4:	mov	r4, r0
    12e8:	mov	r0, r4
    12ec:	bl	ce4 <reflection_Object_name>
    12f0:	ldr	r1, [pc, #524]	; 1504 <test_schema+0x2f4>
    12f4:	bl	0 <strcmp>
    12f8:	cmp	r0, #0
    12fc:	beq	130c <test_schema+0xfc>
    1300:	ldr	r0, [pc, #532]	; 151c <test_schema+0x30c>
    1304:	bl	0 <printf>
    1308:	b	14c8 <test_schema+0x2b8>
    130c:	mov	r0, r4
    1310:	bl	f30 <reflection_Object_fields>
    1314:	mov	r5, r0
    1318:	ldr	r1, [pc, #500]	; 1514 <test_schema+0x304>
    131c:	mov	r0, r5
    1320:	bl	9e4 <reflection_Field_vec_find>
    1324:	mov	r1, r0
    1328:	ldr	r0, [pc, #488]	; 1518 <test_schema+0x308>
    132c:	ldr	r2, [r0]
    1330:	cmp	r1, r2
    1334:	bne	1344 <test_schema+0x134>
    1338:	ldr	r0, [pc, #444]	; 14fc <test_schema+0x2ec>
    133c:	bl	0 <printf>
    1340:	b	14c8 <test_schema+0x2b8>
    1344:	mov	r0, r5
    1348:	bl	728 <reflection_Field_vec_at>
    134c:	mov	r4, r0
    1350:	mov	r0, r4
    1354:	bl	b38 <reflection_Field_default_integer>
    1358:	eor	r2, r0, #150	; 0x96
    135c:	orr	ip, r1, r2
    1360:	cmp	ip, #0
    1364:	beq	13a0 <test_schema+0x190>
    1368:	ldr	r0, [pc, #412]	; 150c <test_schema+0x2fc>
    136c:	bl	0 <printf>
    1370:	mov	r0, r4
    1374:	bl	7b8 <reflection_Field_name>
    1378:	mov	r1, r0
    137c:	ldr	r0, [pc, #388]	; 1508 <test_schema+0x2f8>
    1380:	bl	0 <printf>
    1384:	mov	r0, r4
    1388:	bl	b38 <reflection_Field_default_integer>
    138c:	mov	r3, r1
    1390:	mov	r2, r0
    1394:	ldr	r0, [pc, #372]	; 1510 <test_schema+0x300>
    1398:	bl	0 <printf>
    139c:	b	14c8 <test_schema+0x2b8>
    13a0:	mov	r0, r4
    13a4:	bl	a04 <reflection_Field_type>
    13a8:	bl	440 <reflection_Type_base_type>
    13ac:	cmp	r0, #5
    13b0:	beq	13c0 <test_schema+0x1b0>
    13b4:	ldr	r0, [pc, #384]	; 153c <test_schema+0x32c>
    13b8:	bl	0 <printf>
    13bc:	b	14c8 <test_schema+0x2b8>
    13c0:	ldr	r1, [pc, #364]	; 1534 <test_schema+0x324>
    13c4:	mov	r0, r5
    13c8:	bl	9e4 <reflection_Field_vec_find>
    13cc:	ldr	r1, [pc, #324]	; 1518 <test_schema+0x308>
    13d0:	ldr	r3, [r1]
    13d4:	cmp	r0, r3
    13d8:	bne	13e8 <test_schema+0x1d8>
    13dc:	ldr	r0, [pc, #328]	; 152c <test_schema+0x31c>
    13e0:	bl	0 <printf>
    13e4:	b	14c8 <test_schema+0x2b8>
    13e8:	mov	r1, r0
    13ec:	mov	r0, r5
    13f0:	bl	728 <reflection_Field_vec_at>
    13f4:	bl	a04 <reflection_Field_type>
    13f8:	mov	r4, r0
    13fc:	mov	r0, r4
    1400:	bl	440 <reflection_Type_base_type>
    1404:	cmp	r0, #15
    1408:	beq	1418 <test_schema+0x208>
    140c:	ldr	r0, [pc, #304]	; 1544 <test_schema+0x334>
    1410:	bl	0 <printf>
    1414:	b	14c8 <test_schema+0x2b8>
    1418:	mov	r0, r4
    141c:	bl	610 <reflection_Type_index>
    1420:	cmp	r0, r8
    1424:	beq	1434 <test_schema+0x224>
    1428:	ldr	r0, [pc, #240]	; 1520 <test_schema+0x310>
    142c:	bl	0 <printf>
    1430:	b	14c8 <test_schema+0x2b8>
    1434:	ldr	r1, [pc, #236]	; 1528 <test_schema+0x318>
    1438:	mov	r0, r5
    143c:	bl	9e4 <reflection_Field_vec_find>
    1440:	mov	r1, r0
    1444:	ldr	r3, [pc, #204]	; 1518 <test_schema+0x308>
    1448:	ldr	r2, [r3]
    144c:	cmp	r1, r2
    1450:	bne	1460 <test_schema+0x250>
    1454:	ldr	r0, [pc, #236]	; 1548 <test_schema+0x338>
    1458:	bl	0 <printf>
    145c:	b	14c8 <test_schema+0x2b8>
    1460:	mov	r0, r5
    1464:	bl	728 <reflection_Field_vec_at>
    1468:	bl	a04 <reflection_Field_type>
    146c:	mov	r4, r0
    1470:	mov	r0, r4
    1474:	bl	440 <reflection_Type_base_type>
    1478:	cmp	r0, #14
    147c:	beq	148c <test_schema+0x27c>
    1480:	ldr	r0, [pc, #176]	; 1538 <test_schema+0x328>
    1484:	bl	0 <printf>
    1488:	b	14c8 <test_schema+0x2b8>
    148c:	mov	r0, r4
    1490:	bl	528 <reflection_Type_element>
    1494:	cmp	r0, #15
    1498:	beq	14a8 <test_schema+0x298>
    149c:	ldr	r0, [pc, #92]	; 1500 <test_schema+0x2f0>
    14a0:	bl	0 <printf>
    14a4:	b	14c8 <test_schema+0x2b8>
    14a8:	mov	r0, r4
    14ac:	bl	610 <reflection_Type_index>
    14b0:	cmp	r0, r8
    14b4:	beq	14c4 <test_schema+0x2b4>
    14b8:	ldr	r0, [pc, #140]	; 154c <test_schema+0x33c>
    14bc:	bl	0 <printf>
    14c0:	b	14c8 <test_schema+0x2b8>
    14c4:	mov	r7, #0
    14c8:	cmp	r6, #0
    14cc:	beq	14d8 <test_schema+0x2c8>
    14d0:	mov	r0, r6
    14d4:	bl	0 <free>
    14d8:	mov	r0, r7
    14dc:	ldr	r4, [sp, #8]
    14e0:	ldr	r5, [sp, #12]
    14e4:	ldr	r6, [sp, #16]
    14e8:	ldr	r7, [sp, #20]
    14ec:	ldr	r8, [sp, #24]
    14f0:	ldr	lr, [sp, #4]
    14f4:	add	sp, sp, #40	; 0x28
    14f8:	bx	lr
    14fc:	.word	0x00000238
    1500:	.word	0x00000191
    1504:	.word	0x0000006b
    1508:	.word	0x00000263
    150c:	.word	0x00000381
    1510:	.word	0x000000d3
    1514:	.word	0x00000273
    1518:	.word	0x00000000
    151c:	.word	0x00000109
    1520:	.word	0x000000bb
    1524:	.word	0x00000278
    1528:	.word	0x000000d9
    152c:	.word	0x00000026
    1530:	.word	0x00000148
    1534:	.word	0x00000363
    1538:	.word	0x0000016a
    153c:	.word	0x00000311
    1540:	.word	0x000000eb
    1544:	.word	0x00000369
    1548:	.word	0x00000050
    154c:	.word	0x000002e8

00001550 <main>:
    1550:	mov	ip, sp
    1554:	sub	sp, sp, #16
    1558:	str	ip, [sp]
    155c:	str	lr, [sp, #4]
    1560:	str	r4, [sp, #8]
    1564:	str	r5, [sp, #12]
    1568:	mov	r4, r1
    156c:	mov	r5, r0
    1570:	cmp	r5, #1
    1574:	bne	1580 <main+0x30>
    1578:	mov	ip, #0
    157c:	b	158c <main+0x3c>
    1580:	cmp	r5, #2
    1584:	movne	ip, #1
    1588:	moveq	ip, #0
    158c:	cmp	ip, #0
    1590:	beq	15ac <main+0x5c>
    1594:	ldr	r3, [pc, #72]	; 15e4 <main+0x94>
    1598:	ldr	r0, [r3]
    159c:	ldr	r1, [pc, #60]	; 15e0 <main+0x90>
    15a0:	bl	0 <fprintf>
    15a4:	mov	r0, #1
    15a8:	bl	0 <exit>
    15ac:	cmp	r5, #2
    15b0:	bne	15c0 <main+0x70>
    15b4:	ldr	r0, [pc, #44]	; 15e8 <main+0x98>
    15b8:	ldr	r1, [r4, #4]
    15bc:	str	r1, [r0]
    15c0:	ldr	r0, [pc, #32]	; 15e8 <main+0x98>
    15c4:	ldr	r0, [r0]
    15c8:	bl	1210 <test_schema>
    15cc:	ldr	r4, [sp, #8]
    15d0:	ldr	r5, [sp, #12]
    15d4:	ldr	lr, [sp, #4]
    15d8:	add	sp, sp, #16
    15dc:	bx	lr
    15e0:	.word	0x000002a7
	...
