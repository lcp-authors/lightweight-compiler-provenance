
../compcert-repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010748 <.init>:
   10748:	push	{r3, lr}
   1074c:	bl	1081c <_start@@Base+0x3c>
   10750:	pop	{r3, pc}

Disassembly of section .plt:

00010754 <strcmp@plt-0x14>:
   10754:	push	{lr}		; (str lr, [sp, #-4]!)
   10758:	ldr	lr, [pc, #4]	; 10764 <strcmp@plt-0x4>
   1075c:	add	lr, pc, lr
   10760:	ldr	pc, [lr, #8]!
   10764:	muleq	r1, ip, r8

00010768 <strcmp@plt>:
   10768:	add	ip, pc, #0, 12
   1076c:	add	ip, ip, #16, 20	; 0x10000
   10770:	ldr	pc, [ip, #2204]!	; 0x89c

00010774 <memcpy@plt>:
   10774:	add	ip, pc, #0, 12
   10778:	add	ip, ip, #16, 20	; 0x10000
   1077c:	ldr	pc, [ip, #2196]!	; 0x894

00010780 <strcat@plt>:
   10780:	add	ip, pc, #0, 12
   10784:	add	ip, ip, #16, 20	; 0x10000
   10788:	ldr	pc, [ip, #2188]!	; 0x88c

0001078c <strcpy@plt>:
   1078c:	add	ip, pc, #0, 12
   10790:	add	ip, ip, #16, 20	; 0x10000
   10794:	ldr	pc, [ip, #2180]!	; 0x884

00010798 <puts@plt>:
   10798:	add	ip, pc, #0, 12
   1079c:	add	ip, ip, #16, 20	; 0x10000
   107a0:	ldr	pc, [ip, #2172]!	; 0x87c

000107a4 <__libc_start_main@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #16, 20	; 0x10000
   107ac:	ldr	pc, [ip, #2164]!	; 0x874

000107b0 <__gmon_start__@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #16, 20	; 0x10000
   107b8:	ldr	pc, [ip, #2156]!	; 0x86c

000107bc <strlen@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #16, 20	; 0x10000
   107c4:	ldr	pc, [ip, #2148]!	; 0x864

000107c8 <__isoc99_scanf@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #16, 20	; 0x10000
   107d0:	ldr	pc, [ip, #2140]!	; 0x85c

000107d4 <abort@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #16, 20	; 0x10000
   107dc:	ldr	pc, [ip, #2132]!	; 0x854

Disassembly of section .text:

000107e0 <_start@@Base>:
   107e0:	mov	fp, #0
   107e4:	mov	lr, #0
   107e8:	pop	{r1}		; (ldr r1, [sp], #4)
   107ec:	mov	r2, sp
   107f0:	push	{r2}		; (str r2, [sp, #-4]!)
   107f4:	push	{r0}		; (str r0, [sp, #-4]!)
   107f8:	ldr	ip, [pc, #16]	; 10810 <_start@@Base+0x30>
   107fc:	push	{ip}		; (str ip, [sp, #-4]!)
   10800:	ldr	r0, [pc, #12]	; 10814 <_start@@Base+0x34>
   10804:	ldr	r3, [pc, #12]	; 10818 <_start@@Base+0x38>
   10808:	bl	107a4 <__libc_start_main@plt>
   1080c:	bl	107d4 <abort@plt>
   10810:			; <UNDEFINED> instruction: 0x00010bb4
   10814:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10818:	andeq	r0, r1, r4, asr fp
   1081c:	ldr	r3, [pc, #20]	; 10838 <_start@@Base+0x58>
   10820:	ldr	r2, [pc, #20]	; 1083c <_start@@Base+0x5c>
   10824:	add	r3, pc, r3
   10828:	ldr	r2, [r3, r2]
   1082c:	cmp	r2, #0
   10830:	bxeq	lr
   10834:	b	107b0 <__gmon_start__@plt>
   10838:	ldrdeq	r0, [r1], -r4
   1083c:	andeq	r0, r0, r4, lsr r0
   10840:	ldr	r0, [pc, #24]	; 10860 <_start@@Base+0x80>
   10844:	ldr	r3, [pc, #24]	; 10864 <_start@@Base+0x84>
   10848:	cmp	r3, r0
   1084c:	bxeq	lr
   10850:	ldr	r3, [pc, #16]	; 10868 <_start@@Base+0x88>
   10854:	cmp	r3, #0
   10858:	bxeq	lr
   1085c:	bx	r3
   10860:	andeq	r1, r2, r0, asr #32
   10864:	andeq	r1, r2, r0, asr #32
   10868:	andeq	r0, r0, r0
   1086c:	ldr	r0, [pc, #36]	; 10898 <_start@@Base+0xb8>
   10870:	ldr	r1, [pc, #36]	; 1089c <_start@@Base+0xbc>
   10874:	sub	r1, r1, r0
   10878:	asr	r1, r1, #2
   1087c:	add	r1, r1, r1, lsr #31
   10880:	asrs	r1, r1, #1
   10884:	bxeq	lr
   10888:	ldr	r3, [pc, #16]	; 108a0 <_start@@Base+0xc0>
   1088c:	cmp	r3, #0
   10890:	bxeq	lr
   10894:	bx	r3
   10898:	andeq	r1, r2, r0, asr #32
   1089c:	andeq	r1, r2, r0, asr #32
   108a0:	andeq	r0, r0, r0
   108a4:	push	{r4, lr}
   108a8:	ldr	r4, [pc, #24]	; 108c8 <_start@@Base+0xe8>
   108ac:	ldrb	r3, [r4]
   108b0:	cmp	r3, #0
   108b4:	popne	{r4, pc}
   108b8:	bl	10840 <_start@@Base+0x60>
   108bc:	mov	r3, #1
   108c0:	strb	r3, [r4]
   108c4:	pop	{r4, pc}
   108c8:	andeq	r1, r2, r0, asr #32
   108cc:	b	1086c <_start@@Base+0x8c>

000108d0 <main@@Base>:
   108d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108d4:	add	fp, sp, #28
   108d8:	sub	sp, sp, #100	; 0x64
   108dc:	add	r4, sp, #64	; 0x40
   108e0:	vmov.i32	q8, #0	; 0x00000000
   108e4:	mov	r0, #10
   108e8:	mov	r1, r4
   108ec:	vst1.64	{d16-d17}, [r1], r0
   108f0:	movw	r0, #3012	; 0xbc4
   108f4:	vst1.16	{d16-d17}, [r1]
   108f8:	movt	r0, #1
   108fc:	sub	r1, fp, #38	; 0x26
   10900:	bl	107c8 <__isoc99_scanf@plt>
   10904:	ldrb	r0, [fp, #-38]	; 0xffffffda
   10908:	cmp	r0, #46	; 0x2e
   1090c:	beq	10a2c <main@@Base+0x15c>
   10910:	add	r5, sp, #12
   10914:	mov	r9, #0
   10918:	sub	r7, fp, #38	; 0x26
   1091c:	add	r0, r5, #1
   10920:	str	r0, [sp, #4]
   10924:	add	r0, sp, #38	; 0x26
   10928:	add	r0, r0, #1
   1092c:	str	r0, [sp]
   10930:	movw	r0, #3015	; 0xbc7
   10934:	add	r1, sp, #8
   10938:	movt	r0, #1
   1093c:	bl	107c8 <__isoc99_scanf@plt>
   10940:	ldr	r6, [sp, #8]
   10944:	strb	r9, [sp, #64]	; 0x40
   10948:	cmp	r6, #1
   1094c:	blt	10964 <main@@Base+0x94>
   10950:	mov	r0, r4
   10954:	mov	r1, r7
   10958:	bl	10780 <strcat@plt>
   1095c:	subs	r6, r6, #1
   10960:	bne	10950 <main@@Base+0x80>
   10964:	mov	r0, r4
   10968:	bl	107bc <strlen@plt>
   1096c:	add	r0, r4, r0
   10970:	ldrb	r0, [r0, #-1]
   10974:	strb	r0, [sp, #38]	; 0x26
   10978:	mov	r0, r4
   1097c:	bl	107bc <strlen@plt>
   10980:	mov	r8, r0
   10984:	cmp	r0, #2
   10988:	ldr	r0, [sp]
   1098c:	bcc	109a8 <main@@Base+0xd8>
   10990:	ldr	r0, [sp]
   10994:	sub	r2, r8, #1
   10998:	mov	r1, r4
   1099c:	bl	10774 <memcpy@plt>
   109a0:	add	r0, sp, #38	; 0x26
   109a4:	add	r0, r0, r8
   109a8:	strb	r9, [r0]
   109ac:	mov	r0, r4
   109b0:	add	r1, sp, #38	; 0x26
   109b4:	bl	10768 <strcmp@plt>
   109b8:	mov	sl, r0
   109bc:	mov	r0, r4
   109c0:	bl	10798 <puts@plt>
   109c4:	mov	r0, r5
   109c8:	mov	r1, r4
   109cc:	bl	1078c <strcpy@plt>
   109d0:	ldrb	r6, [sp, #12]
   109d4:	mov	r0, r5
   109d8:	bl	107bc <strlen@plt>
   109dc:	mov	r8, r0
   109e0:	sub	r2, r0, #1
   109e4:	mov	r0, #1
   109e8:	cmp	r8, #2
   109ec:	strb	r6, [r4, r2]
   109f0:	bcc	10a04 <main@@Base+0x134>
   109f4:	ldr	r1, [sp, #4]
   109f8:	mov	r0, r4
   109fc:	bl	10774 <memcpy@plt>
   10a00:	mov	r0, r8
   10a04:	cmp	sl, #0
   10a08:	strb	r9, [r4, r0]
   10a0c:	bne	109ac <main@@Base+0xdc>
   10a10:	movw	r0, #3012	; 0xbc4
   10a14:	mov	r1, r7
   10a18:	movt	r0, #1
   10a1c:	bl	107c8 <__isoc99_scanf@plt>
   10a20:	ldrb	r0, [fp, #-38]	; 0xffffffda
   10a24:	cmp	r0, #46	; 0x2e
   10a28:	bne	10930 <main@@Base+0x60>
   10a2c:	mov	r0, #0
   10a30:	sub	sp, fp, #28
   10a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a38 <StringSet@@Base>:
   10a38:	push	{r4, r5, r6, sl, fp, lr}
   10a3c:	add	fp, sp, #16
   10a40:	mov	r6, r0
   10a44:	mov	r0, #0
   10a48:	cmp	r2, #1
   10a4c:	strb	r0, [r1]
   10a50:	poplt	{r4, r5, r6, sl, fp, pc}
   10a54:	mov	r4, r2
   10a58:	mov	r5, r1
   10a5c:	mov	r0, r5
   10a60:	mov	r1, r6
   10a64:	bl	10780 <strcat@plt>
   10a68:	subs	r4, r4, #1
   10a6c:	bne	10a5c <StringSet@@Base+0x24>
   10a70:	pop	{r4, r5, r6, sl, fp, pc}

00010a74 <R_ShiftString@@Base>:
   10a74:	push	{r4, r5, r6, r7, fp, lr}
   10a78:	add	fp, sp, #16
   10a7c:	mov	r4, r1
   10a80:	mov	r5, r0
   10a84:	bl	107bc <strlen@plt>
   10a88:	add	r0, r5, r0
   10a8c:	ldrb	r0, [r0, #-1]
   10a90:	strb	r0, [r4]
   10a94:	mov	r0, r5
   10a98:	bl	107bc <strlen@plt>
   10a9c:	mov	r1, #1
   10aa0:	cmp	r0, #2
   10aa4:	bcc	10ad8 <R_ShiftString@@Base+0x64>
   10aa8:	add	r6, r4, #1
   10aac:	mov	r7, #0
   10ab0:	ldrb	r0, [r5, r7]
   10ab4:	strb	r0, [r6, r7]
   10ab8:	mov	r0, r5
   10abc:	bl	107bc <strlen@plt>
   10ac0:	add	r2, r7, #2
   10ac4:	add	r1, r7, #1
   10ac8:	cmp	r2, r0
   10acc:	mov	r7, r1
   10ad0:	bcc	10ab0 <R_ShiftString@@Base+0x3c>
   10ad4:	add	r1, r1, #1
   10ad8:	mov	r0, #0
   10adc:	strb	r0, [r4, r1]
   10ae0:	pop	{r4, r5, r6, r7, fp, pc}

00010ae4 <L_ShiftString@@Base>:
   10ae4:	push	{r4, r5, r6, sl, fp, lr}
   10ae8:	add	fp, sp, #16
   10aec:	ldrb	r6, [r0]
   10af0:	mov	r4, r1
   10af4:	mov	r5, r0
   10af8:	bl	107bc <strlen@plt>
   10afc:	add	r0, r4, r0
   10b00:	strb	r6, [r0, #-1]
   10b04:	mov	r0, r5
   10b08:	bl	107bc <strlen@plt>
   10b0c:	mov	r1, #1
   10b10:	cmp	r0, #2
   10b14:	bcc	10b48 <L_ShiftString@@Base+0x64>
   10b18:	mov	r6, #0
   10b1c:	add	r0, r5, r6
   10b20:	ldrb	r0, [r0, #1]
   10b24:	strb	r0, [r4, r6]
   10b28:	mov	r0, r5
   10b2c:	bl	107bc <strlen@plt>
   10b30:	add	r2, r6, #2
   10b34:	add	r1, r6, #1
   10b38:	cmp	r2, r0
   10b3c:	mov	r6, r1
   10b40:	bcc	10b1c <L_ShiftString@@Base+0x38>
   10b44:	add	r1, r1, #1
   10b48:	mov	r0, #0
   10b4c:	strb	r0, [r4, r1]
   10b50:	pop	{r4, r5, r6, sl, fp, pc}

00010b54 <__libc_csu_init@@Base>:
   10b54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b58:	mov	r7, r0
   10b5c:	ldr	r6, [pc, #72]	; 10bac <__libc_csu_init@@Base+0x58>
   10b60:	ldr	r5, [pc, #72]	; 10bb0 <__libc_csu_init@@Base+0x5c>
   10b64:	add	r6, pc, r6
   10b68:	add	r5, pc, r5
   10b6c:	sub	r6, r6, r5
   10b70:	mov	r8, r1
   10b74:	mov	r9, r2
   10b78:	bl	10748 <strcmp@plt-0x20>
   10b7c:	asrs	r6, r6, #2
   10b80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b84:	mov	r4, #0
   10b88:	add	r4, r4, #1
   10b8c:	ldr	r3, [r5], #4
   10b90:	mov	r2, r9
   10b94:	mov	r1, r8
   10b98:	mov	r0, r7
   10b9c:	blx	r3
   10ba0:	cmp	r6, r4
   10ba4:	bne	10b88 <__libc_csu_init@@Base+0x34>
   10ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bac:	andeq	r0, r1, r0, lsr #7
   10bb0:	muleq	r1, r8, r3

00010bb4 <__libc_csu_fini@@Base>:
   10bb4:	bx	lr

Disassembly of section .fini:

00010bb8 <.fini>:
   10bb8:	push	{r3, lr}
   10bbc:	pop	{r3, pc}
