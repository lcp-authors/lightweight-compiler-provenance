
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_reopen_with_definition>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	sub	sp, sp, #8
   c:	cmp	r1, #0
  10:	beq	14c <coda_ascii_reopen_with_definition+0x14c>
  14:	ldr	r7, [r0]
  18:	mov	r4, r0
  1c:	ldr	r0, [r7, #16]
  20:	cmp	r0, #1
  24:	bne	16c <coda_ascii_reopen_with_definition+0x16c>
  28:	ldr	r0, [r1]
  2c:	mov	r6, r1
  30:	cmp	r0, #0
  34:	bne	18c <coda_ascii_reopen_with_definition+0x18c>
  38:	mov	r0, #80	; 0x50
  3c:	bl	0 <malloc>
  40:	cmp	r0, #0
  44:	beq	f0 <coda_ascii_reopen_with_definition+0xf0>
  48:	mov	r5, r0
  4c:	mov	r0, #0
  50:	str	r0, [r5]
  54:	ldrd	r2, [r7, #8]
  58:	ldr	r1, [r6, #28]
  5c:	str	r2, [r5, #8]
  60:	add	r2, r5, #16
  64:	str	r3, [r5, #12]
  68:	stm	r2, {r0, r1, r6}
  6c:	str	r0, [r5, #28]
  70:	str	r0, [r5, #32]
  74:	mvn	r6, #0
  78:	ldr	r1, [r7, #40]	; 0x28
  7c:	ldr	r2, [r7, #44]	; 0x2c
  80:	str	r2, [r5, #44]	; 0x2c
  84:	str	r1, [r5, #40]	; 0x28
  88:	str	r0, [r7, #44]	; 0x2c
  8c:	str	r0, [r7, #40]	; 0x28
  90:	ldr	r1, [r7, #48]	; 0x30
  94:	str	r1, [r5, #48]	; 0x30
  98:	str	r0, [r7, #48]	; 0x30
  9c:	ldr	r1, [r4]
  a0:	ldr	r2, [r1, #52]	; 0x34
  a4:	str	r2, [r5, #52]	; 0x34
  a8:	ldr	r2, [r1, #56]	; 0x38
  ac:	str	r2, [r5, #56]	; 0x38
  b0:	str	r6, [r1, #56]	; 0x38
  b4:	str	r6, [r5, #64]	; 0x40
  b8:	str	r0, [r5, #60]	; 0x3c
  bc:	str	r0, [r5, #68]	; 0x44
  c0:	str	r0, [r5, #72]	; 0x48
  c4:	str	r0, [r5, #76]	; 0x4c
  c8:	ldr	r0, [r1]
  cc:	bl	0 <strdup>
  d0:	cmp	r0, #0
  d4:	str	r0, [r5]
  d8:	beq	11c <coda_ascii_reopen_with_definition+0x11c>
  dc:	ldr	r0, [r4]
  e0:	bl	0 <coda_close>
  e4:	mov	r6, #0
  e8:	str	r5, [r4]
  ec:	b	140 <coda_ascii_reopen_with_definition+0x140>
  f0:	movw	r1, #0
  f4:	movw	r3, #0
  f8:	mov	r0, #61	; 0x3d
  fc:	mov	r2, #80	; 0x50
 100:	mvn	r6, #0
 104:	str	r0, [sp]
 108:	movt	r1, #0
 10c:	movt	r3, #0
 110:	mvn	r0, #0
 114:	bl	0 <coda_set_error>
 118:	b	140 <coda_ascii_reopen_with_definition+0x140>
 11c:	movw	r1, #0
 120:	movw	r2, #0
 124:	mvn	r0, #0
 128:	mov	r3, #97	; 0x61
 12c:	movt	r1, #0
 130:	movt	r2, #0
 134:	bl	0 <coda_set_error>
 138:	mov	r0, r5
 13c:	bl	0 <free>
 140:	mov	r0, r6
 144:	sub	sp, fp, #16
 148:	pop	{r4, r5, r6, r7, fp, pc}
 14c:	movw	r0, #0
 150:	movw	r1, #0
 154:	movw	r3, #0
 158:	mov	r2, #52	; 0x34
 15c:	movt	r0, #0
 160:	movt	r1, #0
 164:	movt	r3, #0
 168:	bl	0 <__assert_fail>
 16c:	movw	r0, #0
 170:	movw	r1, #0
 174:	movw	r3, #0
 178:	mov	r2, #53	; 0x35
 17c:	movt	r0, #0
 180:	movt	r1, #0
 184:	movt	r3, #0
 188:	bl	0 <__assert_fail>
 18c:	movw	r0, #0
 190:	movw	r1, #0
 194:	movw	r3, #0
 198:	mov	r2, #54	; 0x36
 19c:	movt	r0, #0
 1a0:	movt	r1, #0
 1a4:	movt	r3, #0
 1a8:	bl	0 <__assert_fail>

000001ac <coda_ascii_close>:
 1ac:	push	{r4, sl, fp, lr}
 1b0:	add	fp, sp, #8
 1b4:	mov	r4, r0
 1b8:	bl	0 <coda_bin_product_close>
 1bc:	mov	r1, r0
 1c0:	mvn	r0, #0
 1c4:	cmp	r1, #0
 1c8:	popne	{r4, sl, fp, pc}
 1cc:	ldr	r0, [r4]
 1d0:	cmp	r0, #0
 1d4:	beq	1dc <coda_ascii_close+0x30>
 1d8:	bl	0 <free>
 1dc:	ldr	r0, [r4, #68]	; 0x44
 1e0:	cmp	r0, #0
 1e4:	beq	1ec <coda_ascii_close+0x40>
 1e8:	bl	0 <free>
 1ec:	ldr	r0, [r4, #76]	; 0x4c
 1f0:	cmp	r0, #0
 1f4:	beq	1fc <coda_ascii_close+0x50>
 1f8:	bl	0 <coda_type_release>
 1fc:	mov	r0, r4
 200:	bl	0 <free>
 204:	mov	r0, #0
 208:	pop	{r4, sl, fp, pc}

0000020c <coda_ascii_init_asciilines>:
 20c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 210:	add	fp, sp, #28
 214:	sub	sp, sp, #148	; 0x94
 218:	sub	sp, sp, #4096	; 0x1000
 21c:	mov	sl, r0
 220:	ldr	r0, [r0, #64]	; 0x40
 224:	cmn	r0, #1
 228:	bne	9b8 <coda_ascii_init_asciilines+0x7ac>
 22c:	ldr	r0, [sl, #52]	; 0x34
 230:	cmp	r0, #0
 234:	bne	250 <coda_ascii_init_asciilines+0x44>
 238:	ldr	r0, [sl, #56]	; 0x38
 23c:	mov	r1, #0
 240:	mov	r2, #0
 244:	bl	0 <lseek>
 248:	cmn	r0, #1
 24c:	ble	750 <coda_ascii_init_asciilines+0x544>
 250:	mov	r4, sl
 254:	mov	r7, #0
 258:	mov	r5, #4096	; 0x1000
 25c:	mov	r6, #0
 260:	ldr	r0, [r4, #8]!
 264:	ldr	r1, [r4, #4]
 268:	subs	r2, r0, #4096	; 0x1000
 26c:	sbcs	r2, r1, #0
 270:	movwlt	r7, #1
 274:	cmp	r7, #0
 278:	movne	r5, r0
 27c:	movne	r7, r1
 280:	orrs	r2, r5, r7
 284:	beq	734 <coda_ascii_init_asciilines+0x528>
 288:	mov	r2, #0
 28c:	add	r3, sl, #40	; 0x28
 290:	mov	r8, #0
 294:	mov	r9, #0
 298:	mov	lr, #0
 29c:	str	r4, [sp, #48]	; 0x30
 2a0:	str	sl, [sp, #72]	; 0x48
 2a4:	str	r2, [sp, #68]	; 0x44
 2a8:	mov	r2, #0
 2ac:	str	r3, [sp, #32]
 2b0:	str	r2, [sp, #76]	; 0x4c
 2b4:	mov	r2, #0
 2b8:	str	r2, [sp, #64]	; 0x40
 2bc:	mov	r2, #0
 2c0:	str	r2, [sp, #40]	; 0x28
 2c4:	mov	r2, #0
 2c8:	str	r2, [sp, #44]	; 0x2c
 2cc:	mov	r2, #0
 2d0:	str	r2, [sp, #28]
 2d4:	mov	r2, #0
 2d8:	str	r2, [sp, #20]
 2dc:	mov	r2, #0
 2e0:	str	r2, [sp, #24]
 2e4:	mov	r2, #0
 2e8:	str	r2, [sp, #16]
 2ec:	mov	r2, #0
 2f0:	str	r2, [sp, #60]	; 0x3c
 2f4:	ldr	r2, [sl, #48]	; 0x30
 2f8:	str	r9, [sp, #52]	; 0x34
 2fc:	str	lr, [sp, #56]	; 0x38
 300:	cmp	r2, #0
 304:	beq	344 <coda_ascii_init_asciilines+0x138>
 308:	ldr	r0, [sp, #76]	; 0x4c
 30c:	adds	r6, r5, r0
 310:	ldrd	r0, [r3]
 314:	adc	ip, r7, r9
 318:	subs	r0, r0, r6
 31c:	sbcs	r0, r1, ip
 320:	bcc	82c <coda_ascii_init_asciilines+0x620>
 324:	ldr	r0, [sp, #76]	; 0x4c
 328:	mov	r6, r5
 32c:	add	r1, r2, r0
 330:	mov	r4, r0
 334:	add	r0, sp, #80	; 0x50
 338:	mov	r2, r5
 33c:	bl	0 <memcpy>
 340:	b	38c <coda_ascii_init_asciilines+0x180>
 344:	ldr	r2, [sl, #16]
 348:	cmp	r2, #2
 34c:	bcs	9f8 <coda_ascii_init_asciilines+0x7ec>
 350:	ldr	r2, [sp, #76]	; 0x4c
 354:	adds	r2, r5, r2
 358:	adc	r6, r7, r9
 35c:	subs	r0, r0, r2
 360:	sbcs	r0, r1, r6
 364:	bcc	838 <coda_ascii_init_asciilines+0x62c>
 368:	ldr	r3, [sp, #76]	; 0x4c
 36c:	ldr	r0, [sl, #56]	; 0x38
 370:	add	r1, sp, #80	; 0x50
 374:	mov	r2, r5
 378:	mov	r6, r5
 37c:	mov	r4, r3
 380:	bl	0 <pread>
 384:	cmn	r0, #1
 388:	ble	8c8 <coda_ascii_init_asciilines+0x6bc>
 38c:	ldrb	r0, [sp, #80]	; 0x50
 390:	ldr	r5, [sp, #68]	; 0x44
 394:	uxtb	r2, r8
 398:	mov	r3, r4
 39c:	mov	lr, r6
 3a0:	cmp	r2, #13
 3a4:	str	r0, [sp, #76]	; 0x4c
 3a8:	bne	3e4 <coda_ascii_init_asciilines+0x1d8>
 3ac:	ldr	r0, [sp, #76]	; 0x4c
 3b0:	cmp	r0, #10
 3b4:	beq	3e4 <coda_ascii_init_asciilines+0x1d8>
 3b8:	ldr	r0, [sl, #60]	; 0x3c
 3bc:	cmp	r0, #3
 3c0:	bhi	9d8 <coda_ascii_init_asciilines+0x7cc>
 3c4:	add	r1, pc, #0
 3c8:	ldr	pc, [r1, r0, lsl #2]
 3cc:	.word	0x000003dc
 3d0:	.word	0x00000774
 3d4:	.word	0x000003e4
 3d8:	.word	0x00000780
 3dc:	mov	r0, #2
 3e0:	str	r0, [sl, #60]	; 0x3c
 3e4:	subs	r0, lr, #1
 3e8:	sbcs	r0, r7, #0
 3ec:	blt	664 <coda_ascii_init_asciilines+0x458>
 3f0:	ldr	r8, [sp, #64]	; 0x40
 3f4:	ldr	r4, [sp, #60]	; 0x3c
 3f8:	subs	r0, lr, #1
 3fc:	mov	sl, #0
 400:	mov	r9, #0
 404:	str	r2, [sp, #36]	; 0x24
 408:	str	r0, [sp, #12]
 40c:	sbc	r0, r7, #0
 410:	str	r0, [sp, #8]
 414:	ldr	r0, [sp, #76]	; 0x4c
 418:	cmp	r0, #10
 41c:	bne	42c <coda_ascii_init_asciilines+0x220>
 420:	cmp	r2, #13
 424:	cmpeq	sl, #0
 428:	beq	500 <coda_ascii_init_asciilines+0x2f4>
 42c:	add	r0, sp, #80	; 0x50
 430:	ldrb	r6, [r0, sl]
 434:	cmp	r6, #10
 438:	cmpne	r6, #13
 43c:	bne	5a4 <coda_ascii_init_asciilines+0x398>
 440:	tst	r4, #15
 444:	bne	4a4 <coda_ascii_init_asciilines+0x298>
 448:	mov	r0, #64	; 0x40
 44c:	str	r8, [sp, #64]	; 0x40
 450:	str	r7, [sp, #68]	; 0x44
 454:	mov	r7, lr
 458:	mov	r8, r3
 45c:	add	r5, r0, r4, lsl #2
 460:	ldr	r0, [sp, #56]	; 0x38
 464:	mov	r1, r5
 468:	bl	0 <realloc>
 46c:	cmp	r0, #0
 470:	beq	8e4 <coda_ascii_init_asciilines+0x6d8>
 474:	mov	lr, r7
 478:	ldr	r7, [sp, #68]	; 0x44
 47c:	mov	r3, r8
 480:	mov	r8, r0
 484:	mov	r1, r0
 488:	str	r0, [sp, #24]
 48c:	str	r0, [sp, #20]
 490:	str	r0, [sp, #28]
 494:	str	r0, [sp, #56]	; 0x38
 498:	str	r0, [sp, #44]	; 0x2c
 49c:	str	r0, [sp, #40]	; 0x28
 4a0:	str	r0, [sp, #16]
 4a4:	add	r1, sl, #1
 4a8:	add	r0, r4, #1
 4ac:	cmp	r6, #13
 4b0:	add	r2, r1, r3
 4b4:	str	r2, [r8, r4, lsl #2]
 4b8:	beq	548 <coda_ascii_init_asciilines+0x33c>
 4bc:	ldr	r2, [sp, #36]	; 0x24
 4c0:	mov	r5, #0
 4c4:	cmp	r6, #10
 4c8:	bne	608 <coda_ascii_init_asciilines+0x3fc>
 4cc:	ldr	r1, [sp, #72]	; 0x48
 4d0:	ldr	r5, [r1, #60]	; 0x3c
 4d4:	cmp	r5, #3
 4d8:	bhi	9d8 <coda_ascii_init_asciilines+0x7cc>
 4dc:	add	r1, pc, #4
 4e0:	mov	r4, r0
 4e4:	ldr	pc, [r1, r5, lsl #2]
 4e8:	.word	0x000004f8
 4ec:	.word	0x0000064c
 4f0:	.word	0x000007e4
 4f4:	.word	0x000007f0
 4f8:	mov	r5, #1
 4fc:	b	640 <coda_ascii_init_asciilines+0x434>
 500:	add	r0, r8, r4, lsl #2
 504:	ldr	r1, [r0, #-4]
 508:	add	r1, r1, #1
 50c:	str	r1, [r0, #-4]
 510:	ldr	r0, [sp, #72]	; 0x48
 514:	ldr	r5, [r0, #60]	; 0x3c
 518:	cmp	r5, #3
 51c:	bhi	9d8 <coda_ascii_init_asciilines+0x7cc>
 520:	add	r0, pc, #0
 524:	ldr	pc, [r0, r5, lsl #2]
 528:	.word	0x00000538
 52c:	.word	0x000007ac
 530:	.word	0x000007b8
 534:	.word	0x0000064c
 538:	ldr	r0, [sp, #72]	; 0x48
 53c:	mov	r5, #3
 540:	str	r5, [r0, #60]	; 0x3c
 544:	b	64c <coda_ascii_init_asciilines+0x440>
 548:	ldr	r6, [sp, #12]
 54c:	mov	r5, #2
 550:	subs	r6, sl, r6
 554:	ldr	r6, [sp, #8]
 558:	sbcs	r6, r9, r6
 55c:	bge	630 <coda_ascii_init_asciilines+0x424>
 560:	mov	r9, r4
 564:	mov	r4, r7
 568:	add	r7, sp, #80	; 0x50
 56c:	ldrb	r6, [r7, r1]
 570:	ldr	r7, [sp, #72]	; 0x48
 574:	ldr	r5, [r7, #60]	; 0x3c
 578:	cmp	r6, #10
 57c:	bne	5e8 <coda_ascii_init_asciilines+0x3dc>
 580:	cmp	r5, #0
 584:	beq	610 <coda_ascii_init_asciilines+0x404>
 588:	cmp	r5, #1
 58c:	beq	84c <coda_ascii_init_asciilines+0x640>
 590:	cmp	r5, #2
 594:	beq	898 <coda_ascii_init_asciilines+0x68c>
 598:	cmp	r5, #3
 59c:	beq	61c <coda_ascii_init_asciilines+0x410>
 5a0:	b	9d8 <coda_ascii_init_asciilines+0x7cc>
 5a4:	ldr	r2, [sp, #48]	; 0x30
 5a8:	mov	ip, r8
 5ac:	ldr	r1, [sp, #52]	; 0x34
 5b0:	mov	r8, r5
 5b4:	adds	r0, sl, r3
 5b8:	ldm	r2, {r2, r5}
 5bc:	adc	r1, r9, r1
 5c0:	subs	r2, r2, #1
 5c4:	eor	r0, r0, r2
 5c8:	ldr	r2, [sp, #36]	; 0x24
 5cc:	sbc	r5, r5, #0
 5d0:	eor	r1, r1, r5
 5d4:	mov	r5, r8
 5d8:	mov	r8, ip
 5dc:	orrs	r0, r0, r1
 5e0:	beq	440 <coda_ascii_init_asciilines+0x234>
 5e4:	b	64c <coda_ascii_init_asciilines+0x440>
 5e8:	ldr	r2, [sp, #36]	; 0x24
 5ec:	cmp	r5, #0
 5f0:	mov	r7, r4
 5f4:	beq	63c <coda_ascii_init_asciilines+0x430>
 5f8:	cmp	r5, #1
 5fc:	beq	858 <coda_ascii_init_asciilines+0x64c>
 600:	cmp	r5, #2
 604:	bne	864 <coda_ascii_init_asciilines+0x658>
 608:	mov	r4, r0
 60c:	b	64c <coda_ascii_init_asciilines+0x440>
 610:	ldr	r7, [sp, #72]	; 0x48
 614:	mov	r5, #3
 618:	str	r5, [r7, #60]	; 0x3c
 61c:	add	r2, r2, #1
 620:	mov	r5, #3
 624:	mov	sl, r1
 628:	mov	r7, r4
 62c:	str	r2, [r8, r9, lsl #2]
 630:	ldr	r2, [sp, #36]	; 0x24
 634:	mov	r4, r0
 638:	b	64c <coda_ascii_init_asciilines+0x440>
 63c:	mov	r5, #2
 640:	ldr	r1, [sp, #72]	; 0x48
 644:	mov	r4, r0
 648:	str	r5, [r1, #60]	; 0x3c
 64c:	add	sl, sl, #1
 650:	subs	r0, sl, lr
 654:	asr	r9, sl, #31
 658:	rscs	r0, r7, sl, asr #31
 65c:	blt	414 <coda_ascii_init_asciilines+0x208>
 660:	b	66c <coda_ascii_init_asciilines+0x460>
 664:	ldr	r8, [sp, #64]	; 0x40
 668:	ldr	r4, [sp, #60]	; 0x3c
 66c:	str	r4, [sp, #60]	; 0x3c
 670:	ldr	r4, [sp, #48]	; 0x30
 674:	str	r5, [sp, #68]	; 0x44
 678:	str	r8, [sp, #64]	; 0x40
 67c:	ldr	r9, [sp, #52]	; 0x34
 680:	adds	r3, lr, r3
 684:	ldr	sl, [sp, #72]	; 0x48
 688:	ldrd	r0, [r4]
 68c:	adc	r9, r7, r9
 690:	adds	r2, r3, #4096	; 0x1000
 694:	str	r3, [sp, #76]	; 0x4c
 698:	adc	r6, r9, #0
 69c:	subs	r2, r0, r2
 6a0:	sbcs	r2, r1, r6
 6a4:	mov	r2, #0
 6a8:	movwlt	r2, #1
 6ac:	subs	r6, r0, r3
 6b0:	ldr	r3, [sp, #32]
 6b4:	sbc	r7, r1, r9
 6b8:	cmp	r2, #0
 6bc:	moveq	r7, r2
 6c0:	mov	r2, #4096	; 0x1000
 6c4:	moveq	r6, r2
 6c8:	add	r2, sp, #80	; 0x50
 6cc:	add	r2, r2, lr
 6d0:	ldr	lr, [sp, #56]	; 0x38
 6d4:	mov	r5, r6
 6d8:	ldrb	r8, [r2, #-1]
 6dc:	orrs	r2, r6, r7
 6e0:	bne	2f4 <coda_ascii_init_asciilines+0xe8>
 6e4:	cmp	r8, #13
 6e8:	bne	980 <coda_ascii_init_asciilines+0x774>
 6ec:	ldr	r0, [sl, #60]	; 0x3c
 6f0:	ldr	r7, [sp, #60]	; 0x3c
 6f4:	ldr	r5, [sp, #68]	; 0x44
 6f8:	mov	r6, #0
 6fc:	cmp	r0, #3
 700:	bhi	9d8 <coda_ascii_init_asciilines+0x7cc>
 704:	add	r1, pc, #12
 708:	ldr	r4, [sp, #16]
 70c:	movw	r3, #0
 710:	movt	r3, #0
 714:	ldr	pc, [r1, r0, lsl #2]
 718:	.word	0x00000728
 71c:	.word	0x0000099c
 720:	.word	0x00000740
 724:	.word	0x00000994
 728:	mov	r0, #2
 72c:	str	r0, [sl, #60]	; 0x3c
 730:	b	740 <coda_ascii_init_asciilines+0x534>
 734:	mov	r5, #0
 738:	mov	r4, #0
 73c:	mov	r7, #0
 740:	str	r7, [sl, #64]	; 0x40
 744:	str	r4, [sl, #68]	; 0x44
 748:	str	r5, [sl, #72]	; 0x48
 74c:	b	820 <coda_ascii_init_asciilines+0x614>
 750:	bl	0 <__errno_location>
 754:	ldr	r0, [r0]
 758:	bl	0 <strerror>
 75c:	movw	r1, #0
 760:	mov	r2, r0
 764:	movt	r1, #0
 768:	mvn	r0, #21
 76c:	bl	0 <coda_set_error>
 770:	b	81c <coda_ascii_init_asciilines+0x610>
 774:	movw	r3, #0
 778:	movt	r3, #0
 77c:	b	788 <coda_ascii_init_asciilines+0x57c>
 780:	movw	r3, #0
 784:	movt	r3, #0
 788:	movw	r0, #65236	; 0xfed4
 78c:	movw	r1, #0
 790:	movw	r2, #0
 794:	movt	r0, #65535	; 0xffff
 798:	movt	r1, #0
 79c:	movt	r2, #0
 7a0:	bl	0 <coda_set_error>
 7a4:	ldr	r0, [sp, #40]	; 0x28
 7a8:	b	818 <coda_ascii_init_asciilines+0x60c>
 7ac:	movw	r3, #0
 7b0:	movt	r3, #0
 7b4:	b	7c0 <coda_ascii_init_asciilines+0x5b4>
 7b8:	movw	r3, #0
 7bc:	movt	r3, #0
 7c0:	movw	r0, #65236	; 0xfed4
 7c4:	movw	r1, #0
 7c8:	movw	r2, #0
 7cc:	movt	r0, #65535	; 0xffff
 7d0:	movt	r1, #0
 7d4:	movt	r2, #0
 7d8:	bl	0 <coda_set_error>
 7dc:	ldr	r0, [sp, #44]	; 0x2c
 7e0:	b	818 <coda_ascii_init_asciilines+0x60c>
 7e4:	movw	r3, #0
 7e8:	movt	r3, #0
 7ec:	b	7f8 <coda_ascii_init_asciilines+0x5ec>
 7f0:	movw	r3, #0
 7f4:	movt	r3, #0
 7f8:	movw	r0, #65236	; 0xfed4
 7fc:	movw	r1, #0
 800:	movw	r2, #0
 804:	movt	r0, #65535	; 0xffff
 808:	movt	r1, #0
 80c:	movt	r2, #0
 810:	bl	0 <coda_set_error>
 814:	ldr	r0, [sp, #28]
 818:	bl	0 <free>
 81c:	mvn	r6, #0
 820:	mov	r0, r6
 824:	sub	sp, fp, #28
 828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 82c:	ldr	r0, [sl, #16]
 830:	cmp	r0, #1
 834:	bhi	924 <coda_ascii_init_asciilines+0x718>
 838:	movw	r1, #0
 83c:	mvn	r0, #300	; 0x12c
 840:	movt	r1, #0
 844:	bl	0 <coda_set_error>
 848:	b	81c <coda_ascii_init_asciilines+0x610>
 84c:	movw	r3, #0
 850:	movt	r3, #0
 854:	b	8a0 <coda_ascii_init_asciilines+0x694>
 858:	movw	r3, #0
 85c:	movt	r3, #0
 860:	b	874 <coda_ascii_init_asciilines+0x668>
 864:	cmp	r5, #3
 868:	bne	9d8 <coda_ascii_init_asciilines+0x7cc>
 86c:	movw	r3, #0
 870:	movt	r3, #0
 874:	movw	r0, #65236	; 0xfed4
 878:	movw	r1, #0
 87c:	movw	r2, #0
 880:	movt	r0, #65535	; 0xffff
 884:	movt	r1, #0
 888:	movt	r2, #0
 88c:	bl	0 <coda_set_error>
 890:	ldr	r0, [sp, #24]
 894:	b	818 <coda_ascii_init_asciilines+0x60c>
 898:	movw	r3, #0
 89c:	movt	r3, #0
 8a0:	ldr	r4, [sp, #20]
 8a4:	movw	r0, #65236	; 0xfed4
 8a8:	movw	r1, #0
 8ac:	movw	r2, #0
 8b0:	movt	r0, #65535	; 0xffff
 8b4:	movt	r1, #0
 8b8:	movt	r2, #0
 8bc:	bl	0 <coda_set_error>
 8c0:	mov	r0, r4
 8c4:	b	818 <coda_ascii_init_asciilines+0x60c>
 8c8:	bl	0 <__errno_location>
 8cc:	ldr	r0, [r0]
 8d0:	bl	0 <strerror>
 8d4:	movw	r1, #0
 8d8:	mov	r2, r0
 8dc:	movt	r1, #0
 8e0:	b	768 <coda_ascii_init_asciilines+0x55c>
 8e4:	movw	r1, #0
 8e8:	movw	r3, #0
 8ec:	mov	r0, #245	; 0xf5
 8f0:	mov	r2, r5
 8f4:	mvn	r6, #0
 8f8:	str	r0, [sp]
 8fc:	movt	r1, #0
 900:	movt	r3, #0
 904:	mvn	r0, #0
 908:	bl	0 <coda_set_error>
 90c:	ldr	r0, [sp, #64]	; 0x40
 910:	cmp	r0, #0
 914:	beq	820 <coda_ascii_init_asciilines+0x614>
 918:	ldr	r0, [sp, #56]	; 0x38
 91c:	bl	0 <free>
 920:	b	820 <coda_ascii_init_asciilines+0x614>
 924:	mov	r1, r7
 928:	sub	r7, fp, #53	; 0x35
 92c:	mov	r0, r5
 930:	mov	r6, r3
 934:	mov	r2, r7
 938:	bl	0 <coda_str64>
 93c:	ldr	r0, [sp, #76]	; 0x4c
 940:	sub	r4, fp, #74	; 0x4a
 944:	mov	r1, r9
 948:	mov	r2, r4
 94c:	bl	0 <coda_str64>
 950:	ldrd	r0, [r6]
 954:	sub	r6, fp, #95	; 0x5f
 958:	mov	r2, r6
 95c:	bl	0 <coda_str64>
 960:	movw	r1, #0
 964:	mvn	r0, #300	; 0x12c
 968:	mov	r2, r7
 96c:	mov	r3, r4
 970:	str	r6, [sp]
 974:	movt	r1, #0
 978:	bl	0 <coda_set_error>
 97c:	b	81c <coda_ascii_init_asciilines+0x610>
 980:	ldr	r4, [sp, #16]
 984:	ldr	r7, [sp, #60]	; 0x3c
 988:	ldr	r5, [sp, #68]	; 0x44
 98c:	mov	r6, #0
 990:	b	740 <coda_ascii_init_asciilines+0x534>
 994:	movw	r3, #0
 998:	movt	r3, #0
 99c:	movw	r0, #65236	; 0xfed4
 9a0:	movw	r1, #0
 9a4:	movw	r2, #0
 9a8:	movt	r0, #65535	; 0xffff
 9ac:	movt	r1, #0
 9b0:	movt	r2, #0
 9b4:	b	8bc <coda_ascii_init_asciilines+0x6b0>
 9b8:	movw	r0, #0
 9bc:	movw	r1, #0
 9c0:	movw	r3, #0
 9c4:	mov	r2, #185	; 0xb9
 9c8:	movt	r0, #0
 9cc:	movt	r1, #0
 9d0:	movt	r3, #0
 9d4:	bl	0 <__assert_fail>
 9d8:	movw	r0, #0
 9dc:	movw	r1, #0
 9e0:	movw	r3, #0
 9e4:	mov	r2, #150	; 0x96
 9e8:	movt	r0, #0
 9ec:	movt	r1, #0
 9f0:	movt	r3, #0
 9f4:	bl	0 <__assert_fail>
 9f8:	movw	r0, #0
 9fc:	movw	r1, #0
 a00:	movw	r3, #0
 a04:	mov	r2, #83	; 0x53
 a08:	movt	r0, #0
 a0c:	movt	r1, #0
 a10:	movt	r3, #0
 a14:	bl	0 <__assert_fail>
