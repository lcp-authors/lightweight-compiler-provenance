
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	movw	r3, #0
   8:	movt	r3, #0
   c:	push	{lr}		; (str lr, [sp, #-4]!)
  10:	sub	sp, sp, #12
  14:	ldr	r1, [sp, #16]
  18:	add	ip, sp, #20
  1c:	mov	r2, ip
  20:	ldr	r0, [r3]
  24:	str	ip, [sp, #4]
  28:	bl	0 <vfprintf>
  2c:	add	sp, sp, #12
  30:	pop	{lr}		; (ldr lr, [sp], #4)
  34:	add	sp, sp, #16
  38:	bx	lr

0000003c <print_escaped>:
  3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
  40:	subs	r5, r1, #0
  44:	strd	r6, [sp, #8]
  48:	str	r8, [sp, #16]
  4c:	str	lr, [sp, #20]
  50:	ble	e8 <print_escaped+0xac>
  54:	sub	r4, r0, #1
  58:	movw	r6, #0
  5c:	movt	r6, #0
  60:	movw	r8, #0
  64:	movt	r8, #0
  68:	movw	r7, #0
  6c:	movt	r7, #0
  70:	add	r5, r4, r5
  74:	b	ac <print_escaped+0x70>
  78:	cmp	r1, #9
  7c:	beq	148 <print_escaped+0x10c>
  80:	cmp	r1, #10
  84:	beq	138 <print_escaped+0xfc>
  88:	cmp	r1, #8
  8c:	beq	128 <print_escaped+0xec>
  90:	sub	r3, r1, #32
  94:	cmp	r3, #94	; 0x5e
  98:	movls	r0, r7
  9c:	movhi	r0, r8
  a0:	bl	0 <ff_printf>
  a4:	cmp	r4, r5
  a8:	beq	e8 <print_escaped+0xac>
  ac:	ldrb	r1, [r4, #1]!
  b0:	cmp	r1, #12
  b4:	beq	fc <print_escaped+0xc0>
  b8:	bls	78 <print_escaped+0x3c>
  bc:	cmp	r1, #34	; 0x22
  c0:	beq	118 <print_escaped+0xdc>
  c4:	cmp	r1, #92	; 0x5c
  c8:	beq	108 <print_escaped+0xcc>
  cc:	cmp	r1, #13
  d0:	bne	90 <print_escaped+0x54>
  d4:	movw	r0, #0
  d8:	movt	r0, #0
  dc:	bl	0 <ff_printf>
  e0:	cmp	r4, r5
  e4:	bne	ac <print_escaped+0x70>
  e8:	ldrd	r4, [sp]
  ec:	ldrd	r6, [sp, #8]
  f0:	ldr	r8, [sp, #16]
  f4:	add	sp, sp, #20
  f8:	pop	{pc}		; (ldr pc, [sp], #4)
  fc:	mov	r0, r6
 100:	bl	0 <ff_printf>
 104:	b	a4 <print_escaped+0x68>
 108:	movw	r0, #0
 10c:	movt	r0, #0
 110:	bl	0 <ff_printf>
 114:	b	a4 <print_escaped+0x68>
 118:	movw	r0, #0
 11c:	movt	r0, #0
 120:	bl	0 <ff_printf>
 124:	b	a4 <print_escaped+0x68>
 128:	movw	r0, #0
 12c:	movt	r0, #0
 130:	bl	0 <ff_printf>
 134:	b	a4 <print_escaped+0x68>
 138:	movw	r0, #0
 13c:	movt	r0, #0
 140:	bl	0 <ff_printf>
 144:	b	a4 <print_escaped+0x68>
 148:	movw	r0, #0
 14c:	movt	r0, #0
 150:	bl	0 <ff_printf>
 154:	b	a4 <print_escaped+0x68>

00000158 <indent>:
 158:	movw	r3, #0
 15c:	movt	r3, #0
 160:	strd	r4, [sp, #-16]!
 164:	ldr	r4, [r3]
 168:	str	r6, [sp, #8]
 16c:	str	lr, [sp, #12]
 170:	cmp	r4, #0
 174:	blt	1b8 <indent+0x60>
 178:	beq	1a8 <indent+0x50>
 17c:	movw	r6, #0
 180:	movt	r6, #0
 184:	movw	r5, #0
 188:	movt	r5, #0
 18c:	mov	r2, #2
 190:	mov	r1, #1
 194:	ldr	r3, [r6]
 198:	mov	r0, r5
 19c:	bl	0 <fwrite>
 1a0:	subs	r4, r4, #1
 1a4:	bne	18c <indent+0x34>
 1a8:	ldrd	r4, [sp]
 1ac:	ldr	r6, [sp, #8]
 1b0:	add	sp, sp, #12
 1b4:	pop	{pc}		; (ldr pc, [sp], #4)
 1b8:	movw	r3, #0
 1bc:	movt	r3, #0
 1c0:	movw	r1, #0
 1c4:	movt	r1, #0
 1c8:	movw	r0, #0
 1cc:	movt	r0, #0
 1d0:	mov	r2, #44	; 0x2c
 1d4:	bl	0 <__assert_fail>

000001d8 <fi_printf>:
 1d8:	push	{r0, r1, r2, r3}
 1dc:	push	{lr}		; (str lr, [sp, #-4]!)
 1e0:	sub	sp, sp, #12
 1e4:	bl	158 <indent>
 1e8:	ldr	r1, [sp, #16]
 1ec:	add	ip, sp, #20
 1f0:	movw	r3, #0
 1f4:	movt	r3, #0
 1f8:	mov	r2, ip
 1fc:	ldr	r0, [r3]
 200:	str	ip, [sp, #4]
 204:	bl	0 <vfprintf>
 208:	add	sp, sp, #12
 20c:	pop	{lr}		; (ldr lr, [sp], #4)
 210:	add	sp, sp, #16
 214:	bx	lr

00000218 <print_data>:
 218:	strd	r4, [sp, #-32]!	; 0xffffffe0
 21c:	movw	r4, #0
 220:	movt	r4, #0
 224:	ldr	r3, [r4, #4]
 228:	mov	r2, #0
 22c:	mov	r5, r0
 230:	strd	r6, [sp, #8]
 234:	mov	r7, r1
 238:	strd	r8, [sp, #16]
 23c:	str	sl, [sp, #24]
 240:	str	lr, [sp, #28]
 244:	sub	sp, sp, #72	; 0x48
 248:	cmp	r3, r2
 24c:	str	r2, [sp, #12]
 250:	bne	590 <print_data+0x378>
 254:	add	r1, sp, #8
 258:	mov	r0, r5
 25c:	bl	0 <coda_cursor_get_type_class>
 260:	cmp	r0, #0
 264:	bne	588 <print_data+0x370>
 268:	ldr	r3, [sp, #8]
 26c:	cmp	r3, #6
 270:	ldrls	pc, [pc, r3, lsl #2]
 274:	b	308 <print_data+0xf0>
 278:	.word	0x000004a4
 27c:	.word	0x000003d0
 280:	.word	0x00000370
 284:	.word	0x00000370
 288:	.word	0x00000370
 28c:	.word	0x00000370
 290:	.word	0x0000033c
 294:	add	r1, sp, #40	; 0x28
 298:	mov	r0, r5
 29c:	bl	0 <coda_cursor_get_string_length>
 2a0:	cmp	r0, #0
 2a4:	bne	adc <print_data+0x8c4>
 2a8:	ldr	r0, [sp, #40]	; 0x28
 2ac:	add	r0, r0, #1
 2b0:	bl	0 <malloc>
 2b4:	subs	r6, r0, #0
 2b8:	beq	b3c <print_data+0x924>
 2bc:	ldr	r2, [sp, #40]	; 0x28
 2c0:	mov	r0, r5
 2c4:	mov	r1, r6
 2c8:	add	r2, r2, #1
 2cc:	bl	0 <coda_cursor_read_string>
 2d0:	cmp	r0, #0
 2d4:	bne	af4 <print_data+0x8dc>
 2d8:	movw	r0, #0
 2dc:	movt	r0, #0
 2e0:	bl	0 <ff_printf>
 2e4:	mov	r0, r6
 2e8:	ldr	r1, [sp, #40]	; 0x28
 2ec:	bl	3c <print_escaped>
 2f0:	movw	r0, #0
 2f4:	movt	r0, #0
 2f8:	ldr	r1, [sp, #40]	; 0x28
 2fc:	bl	0 <ff_printf>
 300:	mov	r0, r6
 304:	bl	0 <free>
 308:	ldr	r3, [sp, #12]
 30c:	cmp	r3, #0
 310:	beq	320 <print_data+0x108>
 314:	ldr	r3, [r4]
 318:	sub	r3, r3, #1
 31c:	str	r3, [r4]
 320:	add	sp, sp, #72	; 0x48
 324:	ldrd	r4, [sp]
 328:	ldrd	r6, [sp, #8]
 32c:	ldrd	r8, [sp, #16]
 330:	ldr	sl, [sp, #24]
 334:	add	sp, sp, #28
 338:	pop	{pc}		; (ldr pc, [sp], #4)
 33c:	add	r1, sp, #28
 340:	mov	r0, r5
 344:	bl	0 <coda_cursor_get_special_type>
 348:	cmp	r0, #0
 34c:	bne	630 <print_data+0x418>
 350:	ldr	r3, [sp, #28]
 354:	cmp	r3, #3
 358:	ldrls	pc, [pc, r3, lsl #2]
 35c:	b	308 <print_data+0xf0>
 360:	.word	0x00000664
 364:	.word	0x000007f8
 368:	.word	0x000007b0
 36c:	.word	0x00000820
 370:	add	r1, sp, #28
 374:	mov	r0, r5
 378:	bl	0 <coda_cursor_get_read_type>
 37c:	cmp	r0, #0
 380:	bne	628 <print_data+0x410>
 384:	ldr	r3, [sp, #28]
 388:	add	r3, r3, #1
 38c:	cmp	r3, #13
 390:	ldrls	pc, [pc, r3, lsl #2]
 394:	b	308 <print_data+0xf0>
 398:	.word	0x00000664
 39c:	.word	0x0000087c
 3a0:	.word	0x000008a4
 3a4:	.word	0x0000087c
 3a8:	.word	0x000008a4
 3ac:	.word	0x0000087c
 3b0:	.word	0x000008a4
 3b4:	.word	0x000008cc
 3b8:	.word	0x00000938
 3bc:	.word	0x00000900
 3c0:	.word	0x00000900
 3c4:	.word	0x000009f8
 3c8:	.word	0x00000294
 3cc:	.word	0x0000096c
 3d0:	add	r2, sp, #40	; 0x28
 3d4:	add	r1, sp, #32
 3d8:	mov	r0, r5
 3dc:	bl	0 <coda_cursor_get_array_dim>
 3e0:	cmp	r0, #0
 3e4:	bne	620 <print_data+0x408>
 3e8:	ldr	r7, [sp, #32]
 3ec:	cmp	r7, #0
 3f0:	blt	638 <print_data+0x420>
 3f4:	beq	a70 <print_data+0x858>
 3f8:	add	r3, sp, #36	; 0x24
 3fc:	mov	r6, #1
 400:	add	r1, r3, r7, lsl #2
 404:	ldr	r2, [r3, #4]!
 408:	cmp	r3, r1
 40c:	mul	r6, r2, r6
 410:	bne	404 <print_data+0x1ec>
 414:	cmp	r6, #0
 418:	subgt	r7, r6, #1
 41c:	ble	638 <print_data+0x420>
 420:	movw	r0, #0
 424:	movt	r0, #0
 428:	bl	0 <ff_printf>
 42c:	mov	r0, r5
 430:	bl	0 <coda_cursor_goto_first_array_element>
 434:	cmp	r0, #0
 438:	bne	a58 <print_data+0x840>
 43c:	movw	r9, #0
 440:	movt	r9, #0
 444:	mov	r8, #0
 448:	mov	r0, r9
 44c:	bl	1d8 <fi_printf>
 450:	ldr	r3, [r4]
 454:	mov	r0, r5
 458:	mov	r1, #0
 45c:	add	r3, r3, #1
 460:	str	r3, [r4]
 464:	bl	218 <print_data>
 468:	ldr	r3, [r4]
 46c:	cmp	r8, r7
 470:	mov	r0, r5
 474:	add	r8, r8, #1
 478:	sub	r3, r3, #1
 47c:	str	r3, [r4]
 480:	blt	674 <print_data+0x45c>
 484:	cmp	r6, r8
 488:	bgt	448 <print_data+0x230>
 48c:	mov	r0, r5
 490:	bl	0 <coda_cursor_goto_parent>
 494:	ldr	r3, [sp, #12]
 498:	cmp	r3, #0
 49c:	beq	320 <print_data+0x108>
 4a0:	b	314 <print_data+0xfc>
 4a4:	add	r1, sp, #16
 4a8:	mov	r0, r5
 4ac:	bl	0 <coda_cursor_get_num_elements>
 4b0:	cmp	r0, #0
 4b4:	bne	618 <print_data+0x400>
 4b8:	ldr	r3, [sp, #16]
 4bc:	cmp	r3, #0
 4c0:	ble	654 <print_data+0x43c>
 4c4:	cmp	r7, #0
 4c8:	bne	a40 <print_data+0x828>
 4cc:	add	r1, sp, #20
 4d0:	mov	r0, r5
 4d4:	bl	0 <coda_cursor_get_type>
 4d8:	cmp	r0, #0
 4dc:	bne	a50 <print_data+0x838>
 4e0:	add	r1, sp, #24
 4e4:	ldr	r0, [sp, #20]
 4e8:	bl	0 <coda_type_get_record_union_status>
 4ec:	cmp	r0, #0
 4f0:	bne	a38 <print_data+0x820>
 4f4:	ldr	r6, [sp, #24]
 4f8:	cmp	r6, #0
 4fc:	beq	690 <print_data+0x478>
 500:	add	r1, sp, #28
 504:	mov	r0, r5
 508:	bl	0 <coda_cursor_get_available_union_field_index>
 50c:	cmp	r0, #0
 510:	bne	86c <print_data+0x654>
 514:	add	r2, sp, #40	; 0x28
 518:	ldr	r0, [sp, #20]
 51c:	ldr	r1, [sp, #28]
 520:	bl	0 <coda_type_get_record_field_name>
 524:	cmp	r0, #0
 528:	bne	864 <print_data+0x64c>
 52c:	mov	r0, r5
 530:	ldr	r1, [sp, #28]
 534:	bl	0 <coda_cursor_goto_record_field_by_index>
 538:	cmp	r0, #0
 53c:	bne	85c <print_data+0x644>
 540:	cmp	r7, #0
 544:	bne	854 <print_data+0x63c>
 548:	movw	r0, #0
 54c:	movt	r0, #0
 550:	ldr	r1, [sp, #40]	; 0x28
 554:	bl	0 <ff_printf>
 558:	ldr	r3, [r4]
 55c:	mov	r1, #1
 560:	mov	r0, r5
 564:	add	r3, r3, r1
 568:	str	r3, [r4]
 56c:	bl	218 <print_data>
 570:	ldr	r3, [r4]
 574:	mov	r0, r5
 578:	sub	r3, r3, #1
 57c:	str	r3, [r4]
 580:	bl	0 <coda_cursor_goto_parent>
 584:	b	308 <print_data+0xf0>
 588:	bl	0 <handle_coda_error>
 58c:	b	268 <print_data+0x50>
 590:	add	r1, sp, #12
 594:	bl	0 <coda_cursor_has_attributes>
 598:	cmp	r0, #0
 59c:	bne	688 <print_data+0x470>
 5a0:	ldr	r3, [sp, #12]
 5a4:	cmp	r3, #0
 5a8:	beq	254 <print_data+0x3c>
 5ac:	cmp	r7, #0
 5b0:	bne	79c <print_data+0x584>
 5b4:	movw	r0, #0
 5b8:	movt	r0, #0
 5bc:	bl	0 <ff_printf>
 5c0:	mov	r0, r5
 5c4:	bl	0 <coda_cursor_goto_attributes>
 5c8:	cmp	r0, #0
 5cc:	bne	794 <print_data+0x57c>
 5d0:	ldr	r3, [r4]
 5d4:	mov	r1, #1
 5d8:	mov	r0, r5
 5dc:	add	r3, r3, r1
 5e0:	str	r3, [r4]
 5e4:	bl	218 <print_data>
 5e8:	ldr	r3, [r4]
 5ec:	mov	r0, r5
 5f0:	sub	r3, r3, #1
 5f4:	str	r3, [r4]
 5f8:	bl	0 <coda_cursor_goto_parent>
 5fc:	movw	r0, #0
 600:	movt	r0, #0
 604:	bl	1d8 <fi_printf>
 608:	ldr	r3, [r4]
 60c:	add	r3, r3, #1
 610:	str	r3, [r4]
 614:	b	254 <print_data+0x3c>
 618:	bl	0 <handle_coda_error>
 61c:	b	4b8 <print_data+0x2a0>
 620:	bl	0 <handle_coda_error>
 624:	b	3e8 <print_data+0x1d0>
 628:	bl	0 <handle_coda_error>
 62c:	b	384 <print_data+0x16c>
 630:	bl	0 <handle_coda_error>
 634:	b	350 <print_data+0x138>
 638:	movw	r0, #0
 63c:	movt	r0, #0
 640:	bl	0 <ff_printf>
 644:	ldr	r3, [sp, #12]
 648:	cmp	r3, #0
 64c:	beq	320 <print_data+0x108>
 650:	b	314 <print_data+0xfc>
 654:	movw	r0, #0
 658:	movt	r0, #0
 65c:	bl	0 <ff_printf>
 660:	b	308 <print_data+0xf0>
 664:	movw	r0, #0
 668:	movt	r0, #0
 66c:	bl	0 <ff_printf>
 670:	b	308 <print_data+0xf0>
 674:	bl	0 <coda_cursor_goto_next_array_element>
 678:	cmp	r0, #0
 67c:	beq	484 <print_data+0x26c>
 680:	bl	0 <handle_coda_error>
 684:	b	484 <print_data+0x26c>
 688:	bl	0 <handle_coda_error>
 68c:	b	5a0 <print_data+0x388>
 690:	mov	r0, r5
 694:	bl	0 <coda_cursor_goto_first_record_field>
 698:	cmp	r0, #0
 69c:	bne	874 <print_data+0x65c>
 6a0:	ldr	r3, [sp, #16]
 6a4:	mov	r2, #0
 6a8:	str	r2, [sp, #28]
 6ac:	cmp	r3, r2
 6b0:	ble	48c <print_data+0x274>
 6b4:	movw	sl, #0
 6b8:	movt	sl, #0
 6bc:	mov	r8, #1
 6c0:	add	r9, sp, #40	; 0x28
 6c4:	mov	r1, r6
 6c8:	mov	r2, r9
 6cc:	ldr	r0, [sp, #20]
 6d0:	bl	0 <coda_type_get_record_field_hidden_status>
 6d4:	cmp	r0, #0
 6d8:	bne	710 <print_data+0x4f8>
 6dc:	ldr	r1, [sp, #28]
 6e0:	ldr	r3, [sp, #40]	; 0x28
 6e4:	cmp	r3, #0
 6e8:	beq	734 <print_data+0x51c>
 6ec:	ldr	r3, [sp, #16]
 6f0:	sub	r2, r3, #1
 6f4:	cmp	r2, r1
 6f8:	bgt	718 <print_data+0x500>
 6fc:	add	r6, r1, #1
 700:	cmp	r6, r3
 704:	str	r6, [sp, #28]
 708:	blt	6c4 <print_data+0x4ac>
 70c:	b	48c <print_data+0x274>
 710:	bl	0 <handle_coda_error>
 714:	b	6dc <print_data+0x4c4>
 718:	mov	r0, r5
 71c:	bl	0 <coda_cursor_goto_next_record_field>
 720:	cmp	r0, #0
 724:	bne	a68 <print_data+0x850>
 728:	ldr	r3, [sp, #16]
 72c:	ldr	r1, [sp, #28]
 730:	b	6fc <print_data+0x4e4>
 734:	add	r2, sp, #32
 738:	ldr	r0, [sp, #20]
 73c:	bl	0 <coda_type_get_record_field_name>
 740:	cmp	r0, #0
 744:	bne	a60 <print_data+0x848>
 748:	eor	r8, r8, #1
 74c:	orrs	r3, r8, r7
 750:	beq	758 <print_data+0x540>
 754:	bl	158 <indent>
 758:	mov	r0, sl
 75c:	ldr	r1, [sp, #32]
 760:	mov	r8, #0
 764:	bl	0 <ff_printf>
 768:	ldr	r3, [r4]
 76c:	mov	r1, #1
 770:	mov	r0, r5
 774:	add	r3, r3, r1
 778:	str	r3, [r4]
 77c:	bl	218 <print_data>
 780:	ldr	r3, [r4]
 784:	ldr	r1, [sp, #28]
 788:	sub	r3, r3, #1
 78c:	str	r3, [r4]
 790:	b	6ec <print_data+0x4d4>
 794:	bl	0 <handle_coda_error>
 798:	b	5d0 <print_data+0x3b8>
 79c:	movw	r0, #0
 7a0:	movt	r0, #0
 7a4:	bl	0 <ff_printf>
 7a8:	bl	158 <indent>
 7ac:	b	5b4 <print_data+0x39c>
 7b0:	mov	r0, r5
 7b4:	add	r1, sp, #32
 7b8:	bl	0 <coda_cursor_read_double>
 7bc:	cmp	r0, #0
 7c0:	bne	a78 <print_data+0x860>
 7c4:	vldr	d0, [sp, #32]
 7c8:	bl	0 <coda_isNaN>
 7cc:	cmp	r0, #0
 7d0:	bne	7e4 <print_data+0x5cc>
 7d4:	vldr	d0, [sp, #32]
 7d8:	bl	0 <coda_isInf>
 7dc:	cmp	r0, #0
 7e0:	beq	aa0 <print_data+0x888>
 7e4:	movw	r0, #0
 7e8:	movt	r0, #0
 7ec:	ldrd	r2, [sp, #32]
 7f0:	bl	0 <ff_printf>
 7f4:	b	308 <print_data+0xf0>
 7f8:	mov	r0, r5
 7fc:	add	r1, sp, #40	; 0x28
 800:	bl	0 <coda_cursor_read_double>
 804:	cmp	r0, #0
 808:	bne	a80 <print_data+0x868>
 80c:	movw	r0, #0
 810:	movt	r0, #0
 814:	ldrd	r2, [sp, #40]	; 0x28
 818:	bl	0 <ff_printf>
 81c:	b	308 <print_data+0xf0>
 820:	mov	r0, r5
 824:	add	r2, sp, #40	; 0x28
 828:	add	r1, sp, #32
 82c:	bl	0 <coda_cursor_read_complex_double_split>
 830:	cmp	r0, #0
 834:	bne	a88 <print_data+0x870>
 838:	movw	r0, #0
 83c:	movt	r0, #0
 840:	ldrd	r2, [sp, #32]
 844:	ldrd	r6, [sp, #40]	; 0x28
 848:	strd	r6, [sp]
 84c:	bl	0 <ff_printf>
 850:	b	308 <print_data+0xf0>
 854:	bl	158 <indent>
 858:	b	548 <print_data+0x330>
 85c:	bl	0 <handle_coda_error>
 860:	b	540 <print_data+0x328>
 864:	bl	0 <handle_coda_error>
 868:	b	52c <print_data+0x314>
 86c:	bl	0 <handle_coda_error>
 870:	b	514 <print_data+0x2fc>
 874:	bl	0 <handle_coda_error>
 878:	b	6a0 <print_data+0x488>
 87c:	mov	r0, r5
 880:	add	r1, sp, #40	; 0x28
 884:	bl	0 <coda_cursor_read_int32>
 888:	cmp	r0, #0
 88c:	bne	a90 <print_data+0x878>
 890:	movw	r0, #0
 894:	movt	r0, #0
 898:	ldr	r1, [sp, #40]	; 0x28
 89c:	bl	0 <ff_printf>
 8a0:	b	308 <print_data+0xf0>
 8a4:	mov	r0, r5
 8a8:	add	r1, sp, #40	; 0x28
 8ac:	bl	0 <coda_cursor_read_uint32>
 8b0:	cmp	r0, #0
 8b4:	bne	acc <print_data+0x8b4>
 8b8:	movw	r0, #0
 8bc:	movt	r0, #0
 8c0:	ldr	r1, [sp, #40]	; 0x28
 8c4:	bl	0 <ff_printf>
 8c8:	b	308 <print_data+0xf0>
 8cc:	mov	r0, r5
 8d0:	add	r1, sp, #32
 8d4:	bl	0 <coda_cursor_read_int64>
 8d8:	cmp	r0, #0
 8dc:	bne	ae4 <print_data+0x8cc>
 8e0:	add	r2, sp, #40	; 0x28
 8e4:	ldrd	r0, [sp, #32]
 8e8:	bl	0 <coda_str64>
 8ec:	add	r1, sp, #40	; 0x28
 8f0:	movw	r0, #0
 8f4:	movt	r0, #0
 8f8:	bl	0 <ff_printf>
 8fc:	b	308 <print_data+0xf0>
 900:	mov	r0, r5
 904:	add	r1, sp, #40	; 0x28
 908:	bl	0 <coda_cursor_read_double>
 90c:	cmp	r0, #0
 910:	bne	ad4 <print_data+0x8bc>
 914:	ldr	r1, [sp, #28]
 918:	ldrd	r2, [sp, #40]	; 0x28
 91c:	cmp	r1, #8
 920:	movweq	r0, #0
 924:	movwne	r0, #0
 928:	movteq	r0, #0
 92c:	movtne	r0, #0
 930:	bl	0 <ff_printf>
 934:	b	308 <print_data+0xf0>
 938:	mov	r0, r5
 93c:	add	r1, sp, #32
 940:	bl	0 <coda_cursor_read_uint64>
 944:	cmp	r0, #0
 948:	bne	aec <print_data+0x8d4>
 94c:	add	r2, sp, #40	; 0x28
 950:	ldrd	r0, [sp, #32]
 954:	bl	0 <coda_str64u>
 958:	add	r1, sp, #40	; 0x28
 95c:	movw	r0, #0
 960:	movt	r0, #0
 964:	bl	0 <ff_printf>
 968:	b	308 <print_data+0xf0>
 96c:	add	r1, sp, #40	; 0x28
 970:	mov	r0, r5
 974:	bl	0 <coda_cursor_get_bit_size>
 978:	cmp	r0, #0
 97c:	bne	b04 <print_data+0x8ec>
 980:	ldrd	r8, [sp, #40]	; 0x28
 984:	lsr	r2, r8, #3
 988:	ands	r1, r8, #7
 98c:	movne	r1, #1
 990:	orr	r2, r2, r9, lsl #29
 994:	adds	r6, r2, r1
 998:	mov	r0, r6
 99c:	bl	0 <malloc>
 9a0:	subs	sl, r0, #0
 9a4:	beq	b0c <print_data+0x8f4>
 9a8:	mov	r0, r5
 9ac:	mov	r1, sl
 9b0:	strd	r8, [sp]
 9b4:	mov	r2, #0
 9b8:	mov	r3, #0
 9bc:	bl	0 <coda_cursor_read_bits>
 9c0:	cmp	r0, #0
 9c4:	bne	afc <print_data+0x8e4>
 9c8:	movw	r0, #0
 9cc:	movt	r0, #0
 9d0:	bl	0 <ff_printf>
 9d4:	mov	r1, r6
 9d8:	mov	r0, sl
 9dc:	bl	3c <print_escaped>
 9e0:	movw	r0, #0
 9e4:	movt	r0, #0
 9e8:	bl	0 <ff_printf>
 9ec:	mov	r0, sl
 9f0:	bl	0 <free>
 9f4:	b	308 <print_data+0xf0>
 9f8:	add	r9, sp, #40	; 0x28
 9fc:	mov	r0, r5
 a00:	mov	r1, r9
 a04:	bl	0 <coda_cursor_read_char>
 a08:	cmp	r0, #0
 a0c:	bne	a98 <print_data+0x880>
 a10:	movw	r0, #0
 a14:	movt	r0, #0
 a18:	bl	0 <ff_printf>
 a1c:	mov	r0, r9
 a20:	mov	r1, #1
 a24:	bl	3c <print_escaped>
 a28:	movw	r0, #0
 a2c:	movt	r0, #0
 a30:	bl	0 <ff_printf>
 a34:	b	308 <print_data+0xf0>
 a38:	bl	0 <handle_coda_error>
 a3c:	b	4f4 <print_data+0x2dc>
 a40:	movw	r0, #0
 a44:	movt	r0, #0
 a48:	bl	0 <ff_printf>
 a4c:	b	4cc <print_data+0x2b4>
 a50:	bl	0 <handle_coda_error>
 a54:	b	4e0 <print_data+0x2c8>
 a58:	bl	0 <handle_coda_error>
 a5c:	b	43c <print_data+0x224>
 a60:	bl	0 <handle_coda_error>
 a64:	b	748 <print_data+0x530>
 a68:	bl	0 <handle_coda_error>
 a6c:	b	728 <print_data+0x510>
 a70:	mov	r6, #1
 a74:	b	420 <print_data+0x208>
 a78:	bl	0 <handle_coda_error>
 a7c:	b	7c4 <print_data+0x5ac>
 a80:	bl	0 <handle_coda_error>
 a84:	b	80c <print_data+0x5f4>
 a88:	bl	0 <handle_coda_error>
 a8c:	b	838 <print_data+0x620>
 a90:	bl	0 <handle_coda_error>
 a94:	b	890 <print_data+0x678>
 a98:	bl	0 <handle_coda_error>
 a9c:	b	a10 <print_data+0x7f8>
 aa0:	movw	r0, #0
 aa4:	movt	r0, #0
 aa8:	vldr	d0, [sp, #32]
 aac:	add	r1, sp, #40	; 0x28
 ab0:	bl	0 <coda_time_double_to_string>
 ab4:	cmp	r0, #0
 ab8:	beq	b6c <print_data+0x954>
 abc:	movw	r0, #0
 ac0:	movt	r0, #0
 ac4:	bl	0 <ff_printf>
 ac8:	b	308 <print_data+0xf0>
 acc:	bl	0 <handle_coda_error>
 ad0:	b	8b8 <print_data+0x6a0>
 ad4:	bl	0 <handle_coda_error>
 ad8:	b	914 <print_data+0x6fc>
 adc:	bl	0 <handle_coda_error>
 ae0:	b	2a8 <print_data+0x90>
 ae4:	bl	0 <handle_coda_error>
 ae8:	b	8e0 <print_data+0x6c8>
 aec:	bl	0 <handle_coda_error>
 af0:	b	94c <print_data+0x734>
 af4:	bl	0 <handle_coda_error>
 af8:	b	2d8 <print_data+0xc0>
 afc:	bl	0 <handle_coda_error>
 b00:	b	9c8 <print_data+0x7b0>
 b04:	bl	0 <handle_coda_error>
 b08:	b	980 <print_data+0x768>
 b0c:	mov	r0, #392	; 0x188
 b10:	mov	r2, r6
 b14:	movw	r3, #0
 b18:	movt	r3, #0
 b1c:	movw	r1, #0
 b20:	movt	r1, #0
 b24:	str	r0, [sp]
 b28:	mvn	r0, #0
 b2c:	bl	0 <coda_set_error>
 b30:	bl	0 <handle_coda_error>
 b34:	ldrd	r8, [sp, #40]	; 0x28
 b38:	b	9a8 <print_data+0x790>
 b3c:	ldr	r2, [sp, #40]	; 0x28
 b40:	movw	r0, #361	; 0x169
 b44:	movw	r3, #0
 b48:	movt	r3, #0
 b4c:	movw	r1, #0
 b50:	movt	r1, #0
 b54:	str	r0, [sp]
 b58:	mvn	r0, #0
 b5c:	add	r2, r2, #1
 b60:	bl	0 <coda_set_error>
 b64:	bl	0 <handle_coda_error>
 b68:	b	2bc <print_data+0xa4>
 b6c:	add	r1, sp, #40	; 0x28
 b70:	movw	r0, #0
 b74:	movt	r0, #0
 b78:	bl	0 <ff_printf>
 b7c:	b	308 <print_data+0xf0>

00000b80 <print_yaml_data>:
 b80:	movw	r3, #0
 b84:	movt	r3, #0
 b88:	str	r4, [sp, #-8]!
 b8c:	movw	r4, #0
 b90:	movt	r4, #0
 b94:	str	lr, [sp, #4]
 b98:	sub	sp, sp, #528	; 0x210
 b9c:	str	r0, [r3, #4]
 ba0:	add	r1, sp, #4
 ba4:	ldr	r0, [r4]
 ba8:	bl	0 <coda_open>
 bac:	cmp	r0, #0
 bb0:	bne	c20 <print_yaml_data+0xa0>
 bb4:	add	r0, sp, #8
 bb8:	ldr	r1, [sp, #4]
 bbc:	bl	0 <coda_cursor_set_product>
 bc0:	cmp	r0, #0
 bc4:	bne	c18 <print_yaml_data+0x98>
 bc8:	movw	r3, #0
 bcc:	movt	r3, #0
 bd0:	ldr	r1, [r3]
 bd4:	cmp	r1, #0
 bd8:	beq	bec <print_yaml_data+0x6c>
 bdc:	add	r0, sp, #8
 be0:	bl	0 <coda_cursor_goto>
 be4:	cmp	r0, #0
 be8:	bne	c38 <print_yaml_data+0xb8>
 bec:	mov	r0, #0
 bf0:	bl	0 <coda_set_option_perform_boundary_checks>
 bf4:	add	r0, sp, #8
 bf8:	mov	r1, #0
 bfc:	bl	218 <print_data>
 c00:	ldr	r0, [sp, #4]
 c04:	bl	0 <coda_close>
 c08:	add	sp, sp, #528	; 0x210
 c0c:	ldr	r4, [sp]
 c10:	add	sp, sp, #4
 c14:	pop	{pc}		; (ldr pc, [sp], #4)
 c18:	bl	0 <handle_coda_error>
 c1c:	b	bc8 <print_yaml_data+0x48>
 c20:	bl	0 <coda_get_errno>
 c24:	ldr	r3, [r0]
 c28:	cmn	r3, #21
 c2c:	beq	c40 <print_yaml_data+0xc0>
 c30:	bl	0 <handle_coda_error>
 c34:	b	bb4 <print_yaml_data+0x34>
 c38:	bl	0 <handle_coda_error>
 c3c:	b	bec <print_yaml_data+0x6c>
 c40:	mov	r0, #0
 c44:	bl	0 <coda_set_option_use_mmap>
 c48:	add	r1, sp, #4
 c4c:	ldr	r0, [r4]
 c50:	bl	0 <coda_open>
 c54:	mov	r4, r0
 c58:	mov	r0, #1
 c5c:	bl	0 <coda_set_option_use_mmap>
 c60:	cmp	r4, #0
 c64:	bne	c30 <print_yaml_data+0xb0>
 c68:	b	bb4 <print_yaml_data+0x34>
