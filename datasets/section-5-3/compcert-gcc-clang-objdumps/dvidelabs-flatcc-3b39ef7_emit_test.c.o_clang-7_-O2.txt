
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/emit_test/CMakeFiles/emit_test.dir/emit_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <dbg_emitter>:
   0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4:	add	fp, sp, #24
   8:	mov	r4, r3
   c:	ldr	r3, [fp, #8]
  10:	movw	r0, #0
  14:	mov	r6, r1
  18:	mov	r5, r2
  1c:	mov	r1, r2
  20:	movt	r0, #0
  24:	mov	r2, r4
  28:	bl	0 <printf>
  2c:	cmp	r5, #1
  30:	blt	a8 <dbg_emitter+0xa8>
  34:	movw	r7, #0
  38:	movw	r8, #0
  3c:	movw	r9, #0
  40:	add	r6, r6, #4
  44:	movt	r7, #0
  48:	movt	r8, #0
  4c:	movt	r9, #0
  50:	b	84 <dbg_emitter+0x84>
  54:	ldr	r2, [r6]
  58:	mov	r0, r8
  5c:	mov	r1, r4
  60:	bl	0 <printf>
  64:	ldr	r0, [r6, #-4]
  68:	cmp	r0, #0
  6c:	bne	98 <dbg_emitter+0x98>
  70:	ldr	r2, [r6]
  74:	mov	r0, r9
  78:	mov	r1, r4
  7c:	bl	0 <printf>
  80:	b	98 <dbg_emitter+0x98>
  84:	ldr	r0, [r6, #-4]
  88:	cmp	r0, r7
  8c:	beq	54 <dbg_emitter+0x54>
  90:	cmp	r0, #0
  94:	beq	70 <dbg_emitter+0x70>
  98:	ldr	r0, [r6], #8
  9c:	subs	r5, r5, #1
  a0:	add	r4, r0, r4
  a4:	bne	84 <dbg_emitter+0x84>
  a8:	mov	r0, #0
  ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000000b0 <debug_test>:
  b0:	push	{r4, r5, r6, r7, fp, lr}
  b4:	add	fp, sp, #16
  b8:	sub	sp, sp, #280	; 0x118
  bc:	add	r4, sp, #8
  c0:	vmov.i32	q8, #0	; 0x00000000
  c4:	mov	r5, #0
  c8:	add	r0, r4, #16
  cc:	mov	r1, r4
  d0:	str	r5, [sp, #40]	; 0x28
  d4:	vst1.64	{d16-d17}, [r0]
  d8:	mov	r0, #36	; 0x24
  dc:	vst1.64	{d16-d17}, [r1], r0
  e0:	movw	r0, #0
  e4:	movt	r0, #0
  e8:	str	r5, [r1]
  ec:	bl	0 <puts>
  f0:	movw	r1, #0
  f4:	str	r5, [sp]
  f8:	add	r5, sp, #48	; 0x30
  fc:	mov	r2, #0
 100:	mov	r3, #0
 104:	movt	r1, #0
 108:	mov	r0, r5
 10c:	bl	0 <flatcc_builder_custom_init>
 110:	mvn	r0, #-1073741824	; 0xc0000000
 114:	mov	r1, #4
 118:	mov	r2, #10
 11c:	mov	r3, #4
 120:	str	r1, [sp]
 124:	str	r0, [sp, #4]
 128:	mov	r0, r5
 12c:	mov	r1, r4
 130:	bl	0 <flatcc_builder_create_vector>
 134:	mov	r1, r0
 138:	mov	r0, r5
 13c:	bl	154 <main_create_as_root>
 140:	mov	r0, r5
 144:	bl	0 <flatcc_builder_clear>
 148:	mov	r0, #0
 14c:	sub	sp, fp, #16
 150:	pop	{r4, r5, r6, r7, fp, pc}

00000154 <main_create_as_root>:
 154:	push	{r4, r5, r6, r7, fp, lr}
 158:	add	fp, sp, #16
 15c:	mov	r5, r1
 160:	mov	r1, #0
 164:	mov	r2, #0
 168:	mov	r3, #0
 16c:	mov	r4, r0
 170:	mov	r7, #0
 174:	bl	0 <flatcc_builder_start_buffer>
 178:	cmp	r0, #0
 17c:	popne	{r4, r5, r6, r7, fp, pc}
 180:	mov	r0, r4
 184:	mov	r1, #3
 188:	bl	0 <flatcc_builder_start_table>
 18c:	cmp	r0, #0
 190:	beq	1a4 <main_create_as_root+0x50>
 194:	mov	r0, r4
 198:	mov	r1, r7
 19c:	pop	{r4, r5, r6, r7, fp, lr}
 1a0:	b	0 <flatcc_builder_end_buffer>
 1a4:	mov	r0, r4
 1a8:	mov	r1, #0
 1ac:	mov	r2, #8
 1b0:	mov	r3, #8
 1b4:	mov	r7, #0
 1b8:	bl	0 <flatcc_builder_table_add>
 1bc:	cmp	r0, #0
 1c0:	beq	194 <main_create_as_root+0x40>
 1c4:	mov	r7, #0
 1c8:	mov	r6, #42	; 0x2a
 1cc:	cmp	r5, #0
 1d0:	strd	r6, [r0]
 1d4:	beq	194 <main_create_as_root+0x40>
 1d8:	mov	r0, r4
 1dc:	mov	r1, #2
 1e0:	bl	0 <flatcc_builder_table_add_offset>
 1e4:	cmp	r0, #0
 1e8:	beq	194 <main_create_as_root+0x40>
 1ec:	str	r5, [r0]
 1f0:	mov	r0, r4
 1f4:	mov	r1, #1
 1f8:	mov	r2, #1
 1fc:	mov	r3, #1
 200:	mov	r5, #1
 204:	bl	0 <flatcc_builder_table_add>
 208:	cmp	r0, #0
 20c:	beq	194 <main_create_as_root+0x40>
 210:	movw	r1, #0
 214:	strb	r5, [r0]
 218:	mov	r0, r4
 21c:	mov	r2, #0
 220:	movt	r1, #0
 224:	bl	0 <flatcc_builder_check_required>
 228:	cmp	r0, #0
 22c:	beq	240 <main_create_as_root+0xec>
 230:	mov	r0, r4
 234:	bl	0 <flatcc_builder_end_table>
 238:	mov	r7, r0
 23c:	b	194 <main_create_as_root+0x40>
 240:	movw	r0, #0
 244:	movw	r1, #0
 248:	movw	r3, #0
 24c:	mov	r2, #21
 250:	movt	r0, #0
 254:	movt	r1, #0
 258:	movt	r3, #0
 25c:	bl	0 <__assert_fail>

00000260 <emit_test>:
 260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 264:	add	fp, sp, #28
 268:	sub	sp, sp, #284	; 0x11c
 26c:	movw	r0, #0
 270:	add	r6, sp, #28
 274:	add	r4, sp, #8
 278:	movt	r0, #0
 27c:	vld1.64	{d16-d17}, [r0]
 280:	mov	r0, r6
 284:	vst1.64	{d16-d17}, [r4]
 288:	bl	0 <flatcc_builder_init>
 28c:	mov	r0, r6
 290:	bl	0 <flatcc_builder_get_emit_context>
 294:	mov	r5, r0
 298:	mvn	r0, #-1073741824	; 0xc0000000
 29c:	mov	r1, #4
 2a0:	mov	r2, #4
 2a4:	mov	r3, #4
 2a8:	str	r1, [sp]
 2ac:	str	r0, [sp, #4]
 2b0:	mov	r0, r6
 2b4:	mov	r1, r4
 2b8:	bl	0 <flatcc_builder_create_vector>
 2bc:	mov	r1, r0
 2c0:	mov	r0, r6
 2c4:	bl	154 <main_create_as_root>
 2c8:	ldm	r5, {r1, r2}
 2cc:	mvn	r0, #0
 2d0:	cmp	r1, r2
 2d4:	bne	4ec <emit_test+0x28c>
 2d8:	ldr	r4, [r5, #8]
 2dc:	cmp	r4, #0
 2e0:	beq	4ec <emit_test+0x28c>
 2e4:	ldr	r5, [r5, #24]
 2e8:	add	r0, sp, #28
 2ec:	bl	0 <flatcc_builder_get_buffer_size>
 2f0:	cmp	r5, r0
 2f4:	bne	554 <emit_test+0x2f4>
 2f8:	movw	r6, #0
 2fc:	movw	r1, #0
 300:	mov	r2, r5
 304:	movt	r6, #0
 308:	movt	r1, #0
 30c:	ldr	r0, [r6]
 310:	bl	0 <fprintf>
 314:	ldr	r6, [r6]
 318:	movw	r1, #0
 31c:	movw	r2, #0
 320:	movt	r1, #0
 324:	movt	r2, #0
 328:	mov	r0, r6
 32c:	bl	0 <fprintf>
 330:	cmp	r5, #0
 334:	beq	410 <emit_test+0x1b0>
 338:	movw	sl, #0
 33c:	sub	r7, fp, #49	; 0x31
 340:	mov	r8, #0
 344:	movt	sl, #0
 348:	ands	r9, r8, #15
 34c:	bne	384 <emit_test+0x124>
 350:	cmp	r8, #0
 354:	beq	36c <emit_test+0x10c>
 358:	movw	r1, #0
 35c:	mov	r0, r6
 360:	mov	r2, r7
 364:	movt	r1, #0
 368:	bl	0 <fprintf>
 36c:	movw	r1, #0
 370:	mov	r0, r6
 374:	mov	r2, r8
 378:	movt	r1, #0
 37c:	bl	0 <fprintf>
 380:	b	398 <emit_test+0x138>
 384:	tst	r8, #7
 388:	bne	398 <emit_test+0x138>
 38c:	mov	r0, #32
 390:	mov	r1, r6
 394:	bl	0 <fputc>
 398:	ldrb	r2, [r4, r8]
 39c:	mov	r0, r6
 3a0:	mov	r1, sl
 3a4:	bl	0 <fprintf>
 3a8:	ldrb	r0, [r4, r8]
 3ac:	add	r8, r8, #1
 3b0:	sub	r1, r0, #32
 3b4:	uxtb	r1, r1
 3b8:	cmp	r1, #94	; 0x5e
 3bc:	mov	r1, #0
 3c0:	movwhi	r0, #46	; 0x2e
 3c4:	cmp	r5, r8
 3c8:	strb	r0, [r7, r9]
 3cc:	add	r0, r7, r9
 3d0:	strb	r1, [r0, #1]
 3d4:	bne	348 <emit_test+0xe8>
 3d8:	tst	r5, #15
 3dc:	beq	410 <emit_test+0x1b0>
 3e0:	movw	r8, #0
 3e4:	add	r7, r5, #1
 3e8:	movt	r8, #0
 3ec:	mov	r0, r8
 3f0:	mov	r1, #3
 3f4:	mov	r2, #1
 3f8:	mov	r3, r6
 3fc:	bl	0 <fwrite>
 400:	add	r0, r7, #1
 404:	tst	r7, #15
 408:	mov	r7, r0
 40c:	bne	3ec <emit_test+0x18c>
 410:	movw	r1, #0
 414:	sub	r2, fp, #49	; 0x31
 418:	mov	r0, r6
 41c:	movt	r1, #0
 420:	bl	0 <fprintf>
 424:	cmp	r5, #58	; 0x3a
 428:	bne	574 <emit_test+0x314>
 42c:	movw	r1, #0
 430:	mov	r0, r4
 434:	mov	r2, #58	; 0x3a
 438:	movt	r1, #0
 43c:	bl	0 <memcmp>
 440:	cmp	r0, #0
 444:	bne	594 <emit_test+0x334>
 448:	ldr	r0, [r4]
 44c:	ldr	r1, [r4, r0]!
 450:	mov	r0, r4
 454:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 458:	cmp	r1, #6
 45c:	bcc	4f4 <emit_test+0x294>
 460:	ldrh	r2, [r0, #4]
 464:	cmp	r2, #0
 468:	beq	4f4 <emit_test+0x294>
 46c:	mov	r3, r4
 470:	ldr	r2, [r3, r2]!
 474:	ldr	r3, [r3, #4]
 478:	eor	r2, r2, #42	; 0x2a
 47c:	orrs	r2, r2, r3
 480:	bne	4f4 <emit_test+0x294>
 484:	cmp	r1, #8
 488:	bcc	514 <emit_test+0x2b4>
 48c:	ldrh	r2, [r0, #6]
 490:	cmp	r2, #0
 494:	beq	514 <emit_test+0x2b4>
 498:	ldrb	r2, [r4, r2]
 49c:	cmp	r2, #1
 4a0:	bne	514 <emit_test+0x2b4>
 4a4:	cmp	r1, #10
 4a8:	bcc	534 <emit_test+0x2d4>
 4ac:	ldrh	r0, [r0, #8]
 4b0:	cmp	r0, #0
 4b4:	beq	534 <emit_test+0x2d4>
 4b8:	ldr	r0, [r4, r0]!
 4bc:	ldr	r0, [r4, r0]!
 4c0:	cmp	r0, #4
 4c4:	bne	534 <emit_test+0x2d4>
 4c8:	add	r0, r4, #4
 4cc:	vldr	s0, [pc, #256]	; 5d4 <emit_test+0x374>
 4d0:	vldr	s2, [r0, #8]
 4d4:	vcmp.f32	s2, s0
 4d8:	vmrs	APSR_nzcv, fpscr
 4dc:	bne	5b4 <emit_test+0x354>
 4e0:	add	r0, sp, #28
 4e4:	bl	0 <flatcc_builder_clear>
 4e8:	mov	r0, #0
 4ec:	sub	sp, fp, #28
 4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4f4:	movw	r0, #0
 4f8:	movw	r1, #0
 4fc:	movw	r3, #0
 500:	mov	r2, #112	; 0x70
 504:	movt	r0, #0
 508:	movt	r1, #0
 50c:	movt	r3, #0
 510:	bl	0 <__assert_fail>
 514:	movw	r0, #0
 518:	movw	r1, #0
 51c:	movw	r3, #0
 520:	mov	r2, #113	; 0x71
 524:	movt	r0, #0
 528:	movt	r1, #0
 52c:	movt	r3, #0
 530:	bl	0 <__assert_fail>
 534:	movw	r0, #0
 538:	movw	r1, #0
 53c:	movw	r3, #0
 540:	mov	r2, #114	; 0x72
 544:	movt	r0, #0
 548:	movt	r1, #0
 54c:	movt	r3, #0
 550:	bl	0 <__assert_fail>
 554:	movw	r0, #0
 558:	movw	r1, #0
 55c:	movw	r3, #0
 560:	mov	r2, #101	; 0x65
 564:	movt	r0, #0
 568:	movt	r1, #0
 56c:	movt	r3, #0
 570:	bl	0 <__assert_fail>
 574:	movw	r0, #0
 578:	movw	r1, #0
 57c:	movw	r3, #0
 580:	mov	r2, #106	; 0x6a
 584:	movt	r0, #0
 588:	movt	r1, #0
 58c:	movt	r3, #0
 590:	bl	0 <__assert_fail>
 594:	movw	r0, #0
 598:	movw	r1, #0
 59c:	movw	r3, #0
 5a0:	mov	r2, #108	; 0x6c
 5a4:	movt	r0, #0
 5a8:	movt	r1, #0
 5ac:	movt	r3, #0
 5b0:	bl	0 <__assert_fail>
 5b4:	movw	r0, #0
 5b8:	movw	r1, #0
 5bc:	movw	r3, #0
 5c0:	mov	r2, #115	; 0x73
 5c4:	movt	r0, #0
 5c8:	movt	r1, #0
 5cc:	movt	r3, #0
 5d0:	bl	0 <__assert_fail>
 5d4:	.word	0x3f99999a

000005d8 <main>:
 5d8:	push	{r4, r5, r6, r7, fp, lr}
 5dc:	add	fp, sp, #16
 5e0:	sub	sp, sp, #280	; 0x118
 5e4:	add	r4, sp, #8
 5e8:	vmov.i32	q8, #0	; 0x00000000
 5ec:	mov	r5, #0
 5f0:	add	r0, r4, #16
 5f4:	mov	r1, r4
 5f8:	str	r5, [sp, #40]	; 0x28
 5fc:	vst1.64	{d16-d17}, [r0]
 600:	mov	r0, #36	; 0x24
 604:	vst1.64	{d16-d17}, [r1], r0
 608:	movw	r0, #0
 60c:	movt	r0, #0
 610:	str	r5, [r1]
 614:	bl	0 <puts>
 618:	movw	r1, #0
 61c:	str	r5, [sp]
 620:	add	r5, sp, #48	; 0x30
 624:	mov	r2, #0
 628:	mov	r3, #0
 62c:	movt	r1, #0
 630:	mov	r0, r5
 634:	bl	0 <flatcc_builder_custom_init>
 638:	mvn	r0, #-1073741824	; 0xc0000000
 63c:	mov	r1, #4
 640:	mov	r2, #10
 644:	mov	r3, #4
 648:	str	r1, [sp]
 64c:	str	r0, [sp, #4]
 650:	mov	r0, r5
 654:	mov	r1, r4
 658:	bl	0 <flatcc_builder_create_vector>
 65c:	mov	r1, r0
 660:	mov	r0, r5
 664:	bl	154 <main_create_as_root>
 668:	mov	r0, r5
 66c:	bl	0 <flatcc_builder_clear>
 670:	bl	260 <emit_test>
 674:	sub	sp, fp, #16
 678:	pop	{r4, r5, r6, r7, fp, pc}
