
../repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <readfile>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #40	; 0x28
       8:	str	ip, [sp]
       c:	str	lr, [sp, #4]
      10:	str	r4, [sp, #8]
      14:	str	r5, [sp, #12]
      18:	str	r6, [sp, #16]
      1c:	str	r7, [sp, #20]
      20:	str	r8, [sp, #24]
      24:	mov	r8, r1
      28:	cmp	r2, #0
      2c:	bne	38 <readfile+0x38>
      30:	add	r4, sp, #32
      34:	b	3c <readfile+0x3c>
      38:	mov	r4, r2
      3c:	ldr	r1, [pc, #272]	; 154 <readfile+0x154>
      40:	bl	0 <fopen>
      44:	mov	r7, r0
      48:	mov	r6, #0
      4c:	mov	r5, #0
      50:	cmp	r7, #0
      54:	beq	108 <readfile+0x108>
      58:	mov	r1, #0
      5c:	mov	r2, #2
      60:	mov	r0, r7
      64:	bl	0 <fseek>
      68:	mov	r0, r7
      6c:	bl	0 <ftell>
      70:	mov	r6, r0
      74:	str	r6, [r4]
      78:	cmp	r8, #0
      7c:	bhi	88 <readfile+0x88>
      80:	mov	r2, #0
      84:	b	94 <readfile+0x94>
      88:	cmp	r6, r8
      8c:	movhi	r2, #1
      90:	movls	r2, #0
      94:	cmp	r2, #0
      98:	bne	108 <readfile+0x108>
      9c:	mov	r0, r7
      a0:	bl	0 <rewind>
      a4:	cmp	r6, #0
      a8:	bne	b4 <readfile+0xb4>
      ac:	mov	r0, #1
      b0:	b	b8 <readfile+0xb8>
      b4:	mov	r0, r6
      b8:	bl	0 <malloc>
      bc:	mov	r5, r0
      c0:	cmp	r5, #0
      c4:	beq	108 <readfile+0x108>
      c8:	mov	r8, #0
      cc:	add	r0, r5, r8
      d0:	mov	r1, #1
      d4:	sub	r2, r6, r8
      d8:	mov	r3, r7
      dc:	bl	0 <fread>
      e0:	cmp	r0, #0
      e4:	beq	f0 <readfile+0xf0>
      e8:	add	r8, r8, r0
      ec:	b	cc <readfile+0xcc>
      f0:	cmp	r8, r6
      f4:	bne	108 <readfile+0x108>
      f8:	mov	r0, r7
      fc:	bl	0 <fclose>
     100:	str	r6, [r4]
     104:	b	130 <readfile+0x130>
     108:	cmp	r7, #0
     10c:	beq	118 <readfile+0x118>
     110:	mov	r0, r7
     114:	bl	0 <fclose>
     118:	cmp	r5, #0
     11c:	beq	128 <readfile+0x128>
     120:	mov	r0, r5
     124:	bl	0 <free>
     128:	str	r6, [r4]
     12c:	mov	r5, #0
     130:	mov	r0, r5
     134:	ldr	r4, [sp, #8]
     138:	ldr	r5, [sp, #12]
     13c:	ldr	r6, [sp, #16]
     140:	ldr	r7, [sp, #20]
     144:	ldr	r8, [sp, #24]
     148:	ldr	lr, [sp, #4]
     14c:	add	sp, sp, #40	; 0x28
     150:	bx	lr
     154:	.word	0x0000017d

00000158 <flatbuffers_uint16_cast_from_pe>:
     158:	mov	ip, sp
     15c:	sub	sp, sp, #8
     160:	str	ip, [sp]
     164:	str	lr, [sp, #4]
     168:	bic	r0, r0, #16711680	; 0xff0000
     16c:	bic	r0, r0, #-16777216	; 0xff000000
     170:	ldr	lr, [sp, #4]
     174:	add	sp, sp, #8
     178:	bx	lr

0000017c <flatbuffers_uint16_read_from_pe>:
     17c:	mov	ip, sp
     180:	sub	sp, sp, #8
     184:	str	ip, [sp]
     188:	str	lr, [sp, #4]
     18c:	ldrh	r0, [r0]
     190:	bic	r0, r0, #16711680	; 0xff0000
     194:	bic	r0, r0, #-16777216	; 0xff000000
     198:	bl	158 <flatbuffers_uint16_cast_from_pe>
     19c:	bic	r0, r0, #16711680	; 0xff0000
     1a0:	bic	r0, r0, #-16777216	; 0xff000000
     1a4:	ldr	lr, [sp, #4]
     1a8:	add	sp, sp, #8
     1ac:	bx	lr

000001b0 <flatbuffers_int32_cast_from_pe>:
     1b0:	mov	ip, sp
     1b4:	sub	sp, sp, #8
     1b8:	str	ip, [sp]
     1bc:	str	lr, [sp, #4]
     1c0:	ldr	lr, [sp, #4]
     1c4:	add	sp, sp, #8
     1c8:	bx	lr

000001cc <flatbuffers_int32_read_from_pe>:
     1cc:	mov	ip, sp
     1d0:	sub	sp, sp, #8
     1d4:	str	ip, [sp]
     1d8:	str	lr, [sp, #4]
     1dc:	ldr	r0, [r0]
     1e0:	bl	1b0 <flatbuffers_int32_cast_from_pe>
     1e4:	ldr	lr, [sp, #4]
     1e8:	add	sp, sp, #8
     1ec:	bx	lr

000001f0 <flatbuffers_int64_cast_from_pe>:
     1f0:	mov	ip, sp
     1f4:	sub	sp, sp, #8
     1f8:	str	ip, [sp]
     1fc:	str	lr, [sp, #4]
     200:	ldr	lr, [sp, #4]
     204:	add	sp, sp, #8
     208:	bx	lr

0000020c <flatbuffers_int64_read_from_pe>:
     20c:	mov	ip, sp
     210:	sub	sp, sp, #8
     214:	str	ip, [sp]
     218:	str	lr, [sp, #4]
     21c:	mov	r1, r0
     220:	ldr	r0, [r1]
     224:	ldr	r1, [r1, #4]
     228:	bl	1f0 <flatbuffers_int64_cast_from_pe>
     22c:	ldr	lr, [sp, #4]
     230:	add	sp, sp, #8
     234:	bx	lr

00000238 <flatbuffers_double_cast_from_pe>:
     238:	mov	ip, sp
     23c:	sub	sp, sp, #16
     240:	str	ip, [sp]
     244:	str	lr, [sp, #4]
     248:	vstr	d0, [sp, #8]
     24c:	ldr	r0, [sp, #8]
     250:	ldr	r1, [sp, #12]
     254:	str	r0, [sp, #8]
     258:	str	r1, [sp, #12]
     25c:	vldr	d0, [sp, #8]
     260:	ldr	lr, [sp, #4]
     264:	add	sp, sp, #16
     268:	bx	lr

0000026c <flatbuffers_double_read_from_pe>:
     26c:	mov	ip, sp
     270:	sub	sp, sp, #8
     274:	str	ip, [sp]
     278:	str	lr, [sp, #4]
     27c:	vldr	d0, [r0]
     280:	bl	238 <flatbuffers_double_cast_from_pe>
     284:	ldr	lr, [sp, #4]
     288:	add	sp, sp, #8
     28c:	bx	lr

00000290 <flatbuffers_bool_cast_from_pe>:
     290:	mov	ip, sp
     294:	sub	sp, sp, #8
     298:	str	ip, [sp]
     29c:	str	lr, [sp, #4]
     2a0:	and	r0, r0, #255	; 0xff
     2a4:	ldr	lr, [sp, #4]
     2a8:	add	sp, sp, #8
     2ac:	bx	lr

000002b0 <flatbuffers_bool_read_from_pe>:
     2b0:	mov	ip, sp
     2b4:	sub	sp, sp, #8
     2b8:	str	ip, [sp]
     2bc:	str	lr, [sp, #4]
     2c0:	ldrb	r0, [r0]
     2c4:	and	r0, r0, #255	; 0xff
     2c8:	bl	290 <flatbuffers_bool_cast_from_pe>
     2cc:	and	r0, r0, #255	; 0xff
     2d0:	ldr	lr, [sp, #4]
     2d4:	add	sp, sp, #8
     2d8:	bx	lr

000002dc <__flatbuffers_uoffset_cast_from_pe>:
     2dc:	mov	ip, sp
     2e0:	sub	sp, sp, #8
     2e4:	str	ip, [sp]
     2e8:	str	lr, [sp, #4]
     2ec:	ldr	lr, [sp, #4]
     2f0:	add	sp, sp, #8
     2f4:	bx	lr

000002f8 <__flatbuffers_uoffset_read_from_pe>:
     2f8:	mov	ip, sp
     2fc:	sub	sp, sp, #8
     300:	str	ip, [sp]
     304:	str	lr, [sp, #4]
     308:	ldr	r0, [r0]
     30c:	bl	2dc <__flatbuffers_uoffset_cast_from_pe>
     310:	ldr	lr, [sp, #4]
     314:	add	sp, sp, #8
     318:	bx	lr

0000031c <__flatbuffers_soffset_cast_from_pe>:
     31c:	mov	ip, sp
     320:	sub	sp, sp, #8
     324:	str	ip, [sp]
     328:	str	lr, [sp, #4]
     32c:	ldr	lr, [sp, #4]
     330:	add	sp, sp, #8
     334:	bx	lr

00000338 <__flatbuffers_soffset_read_from_pe>:
     338:	mov	ip, sp
     33c:	sub	sp, sp, #8
     340:	str	ip, [sp]
     344:	str	lr, [sp, #4]
     348:	ldr	r0, [r0]
     34c:	bl	31c <__flatbuffers_soffset_cast_from_pe>
     350:	ldr	lr, [sp, #4]
     354:	add	sp, sp, #8
     358:	bx	lr

0000035c <__flatbuffers_voffset_cast_from_pe>:
     35c:	mov	ip, sp
     360:	sub	sp, sp, #8
     364:	str	ip, [sp]
     368:	str	lr, [sp, #4]
     36c:	bic	r0, r0, #16711680	; 0xff0000
     370:	bic	r0, r0, #-16777216	; 0xff000000
     374:	ldr	lr, [sp, #4]
     378:	add	sp, sp, #8
     37c:	bx	lr

00000380 <__flatbuffers_voffset_read_from_pe>:
     380:	mov	ip, sp
     384:	sub	sp, sp, #8
     388:	str	ip, [sp]
     38c:	str	lr, [sp, #4]
     390:	ldrh	r0, [r0]
     394:	bic	r0, r0, #16711680	; 0xff0000
     398:	bic	r0, r0, #-16777216	; 0xff000000
     39c:	bl	35c <__flatbuffers_voffset_cast_from_pe>
     3a0:	bic	r0, r0, #16711680	; 0xff0000
     3a4:	bic	r0, r0, #-16777216	; 0xff000000
     3a8:	ldr	lr, [sp, #4]
     3ac:	add	sp, sp, #8
     3b0:	bx	lr

000003b4 <__flatbuffers_thash_cast_from_pe>:
     3b4:	mov	ip, sp
     3b8:	sub	sp, sp, #8
     3bc:	str	ip, [sp]
     3c0:	str	lr, [sp, #4]
     3c4:	ldr	lr, [sp, #4]
     3c8:	add	sp, sp, #8
     3cc:	bx	lr

000003d0 <__flatbuffers_thash_cast_from_le>:
     3d0:	mov	ip, sp
     3d4:	sub	sp, sp, #8
     3d8:	str	ip, [sp]
     3dc:	str	lr, [sp, #4]
     3e0:	ldr	lr, [sp, #4]
     3e4:	add	sp, sp, #8
     3e8:	bx	lr

000003ec <__flatbuffers_thash_read_from_pe>:
     3ec:	mov	ip, sp
     3f0:	sub	sp, sp, #8
     3f4:	str	ip, [sp]
     3f8:	str	lr, [sp, #4]
     3fc:	ldr	r0, [r0]
     400:	bl	3b4 <__flatbuffers_thash_cast_from_pe>
     404:	ldr	lr, [sp, #4]
     408:	add	sp, sp, #8
     40c:	bx	lr

00000410 <flatbuffers_vec_len>:
     410:	mov	ip, sp
     414:	sub	sp, sp, #8
     418:	str	ip, [sp]
     41c:	str	lr, [sp, #4]
     420:	cmp	r0, #0
     424:	beq	434 <flatbuffers_vec_len+0x24>
     428:	sub	r0, r0, #4
     42c:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
     430:	b	438 <flatbuffers_vec_len+0x28>
     434:	mov	r0, #0
     438:	ldr	lr, [sp, #4]
     43c:	add	sp, sp, #8
     440:	bx	lr

00000444 <flatbuffers_has_identifier>:
     444:	mov	ip, sp
     448:	sub	sp, sp, #24
     44c:	str	ip, [sp]
     450:	str	lr, [sp, #4]
     454:	str	r4, [sp, #8]
     458:	mov	r4, r0
     45c:	mov	r3, #0
     460:	str	r3, [sp, #16]
     464:	cmp	r1, #0
     468:	bne	474 <flatbuffers_has_identifier+0x30>
     46c:	mov	r0, #1
     470:	b	4b8 <flatbuffers_has_identifier+0x74>
     474:	add	r0, sp, #16
     478:	mov	r2, #4
     47c:	bl	0 <strncpy>
     480:	ldr	r0, [sp, #16]
     484:	bl	3d0 <__flatbuffers_thash_cast_from_le>
     488:	str	r0, [sp, #16]
     48c:	add	r0, r4, #4
     490:	bl	3ec <__flatbuffers_thash_read_from_pe>
     494:	ldr	r1, [sp, #16]
     498:	cmp	r1, #0
     49c:	beq	4b4 <flatbuffers_has_identifier+0x70>
     4a0:	ldr	r1, [sp, #16]
     4a4:	cmp	r0, r1
     4a8:	moveq	r0, #1
     4ac:	movne	r0, #0
     4b0:	b	4b8 <flatbuffers_has_identifier+0x74>
     4b4:	mov	r0, #1
     4b8:	ldr	r4, [sp, #8]
     4bc:	ldr	lr, [sp, #4]
     4c0:	add	sp, sp, #24
     4c4:	bx	lr

000004c8 <reflection_BaseType_cast_from_pe>:
     4c8:	mov	ip, sp
     4cc:	sub	sp, sp, #8
     4d0:	str	ip, [sp]
     4d4:	str	lr, [sp, #4]
     4d8:	and	r0, r0, #255	; 0xff
     4dc:	sbfx	r0, r0, #0, #8
     4e0:	sbfx	r0, r0, #0, #8
     4e4:	ldr	lr, [sp, #4]
     4e8:	add	sp, sp, #8
     4ec:	bx	lr

000004f0 <reflection_BaseType_read_from_pe>:
     4f0:	mov	ip, sp
     4f4:	sub	sp, sp, #8
     4f8:	str	ip, [sp]
     4fc:	str	lr, [sp, #4]
     500:	ldrsb	r0, [r0]
     504:	sbfx	r0, r0, #0, #8
     508:	bl	4c8 <reflection_BaseType_cast_from_pe>
     50c:	sbfx	r0, r0, #0, #8
     510:	ldr	lr, [sp, #4]
     514:	add	sp, sp, #8
     518:	bx	lr

0000051c <reflection_BaseType_name>:
     51c:	mov	ip, sp
     520:	sub	sp, sp, #8
     524:	str	ip, [sp]
     528:	str	lr, [sp, #4]
     52c:	cmp	r0, #17
     530:	bcs	608 <reflection_BaseType_name+0xec>
     534:	add	pc, pc, r0, lsl #2
     538:	nop	{0}
     53c:	b	580 <reflection_BaseType_name+0x64>
     540:	b	588 <reflection_BaseType_name+0x6c>
     544:	b	590 <reflection_BaseType_name+0x74>
     548:	b	598 <reflection_BaseType_name+0x7c>
     54c:	b	5a0 <reflection_BaseType_name+0x84>
     550:	b	5a8 <reflection_BaseType_name+0x8c>
     554:	b	5b0 <reflection_BaseType_name+0x94>
     558:	b	5b8 <reflection_BaseType_name+0x9c>
     55c:	b	5c0 <reflection_BaseType_name+0xa4>
     560:	b	5c8 <reflection_BaseType_name+0xac>
     564:	b	5d0 <reflection_BaseType_name+0xb4>
     568:	b	5d8 <reflection_BaseType_name+0xbc>
     56c:	b	5e0 <reflection_BaseType_name+0xc4>
     570:	b	5e8 <reflection_BaseType_name+0xcc>
     574:	b	5f0 <reflection_BaseType_name+0xd4>
     578:	b	5f8 <reflection_BaseType_name+0xdc>
     57c:	b	600 <reflection_BaseType_name+0xe4>
     580:	ldr	r0, [pc, #204]	; 654 <reflection_BaseType_name+0x138>
     584:	b	60c <reflection_BaseType_name+0xf0>
     588:	ldr	r0, [pc, #140]	; 61c <reflection_BaseType_name+0x100>
     58c:	b	60c <reflection_BaseType_name+0xf0>
     590:	ldr	r0, [pc, #176]	; 648 <reflection_BaseType_name+0x12c>
     594:	b	60c <reflection_BaseType_name+0xf0>
     598:	ldr	r0, [pc, #188]	; 65c <reflection_BaseType_name+0x140>
     59c:	b	60c <reflection_BaseType_name+0xf0>
     5a0:	ldr	r0, [pc, #156]	; 644 <reflection_BaseType_name+0x128>
     5a4:	b	60c <reflection_BaseType_name+0xf0>
     5a8:	ldr	r0, [pc, #140]	; 63c <reflection_BaseType_name+0x120>
     5ac:	b	60c <reflection_BaseType_name+0xf0>
     5b0:	ldr	r0, [pc, #128]	; 638 <reflection_BaseType_name+0x11c>
     5b4:	b	60c <reflection_BaseType_name+0xf0>
     5b8:	ldr	r0, [pc, #88]	; 618 <reflection_BaseType_name+0xfc>
     5bc:	b	60c <reflection_BaseType_name+0xf0>
     5c0:	ldr	r0, [pc, #96]	; 628 <reflection_BaseType_name+0x10c>
     5c4:	b	60c <reflection_BaseType_name+0xf0>
     5c8:	ldr	r0, [pc, #96]	; 630 <reflection_BaseType_name+0x114>
     5cc:	b	60c <reflection_BaseType_name+0xf0>
     5d0:	ldr	r0, [pc, #104]	; 640 <reflection_BaseType_name+0x124>
     5d4:	b	60c <reflection_BaseType_name+0xf0>
     5d8:	ldr	r0, [pc, #120]	; 658 <reflection_BaseType_name+0x13c>
     5dc:	b	60c <reflection_BaseType_name+0xf0>
     5e0:	ldr	r0, [pc, #56]	; 620 <reflection_BaseType_name+0x104>
     5e4:	b	60c <reflection_BaseType_name+0xf0>
     5e8:	ldr	r0, [pc, #52]	; 624 <reflection_BaseType_name+0x108>
     5ec:	b	60c <reflection_BaseType_name+0xf0>
     5f0:	ldr	r0, [pc, #88]	; 650 <reflection_BaseType_name+0x134>
     5f4:	b	60c <reflection_BaseType_name+0xf0>
     5f8:	ldr	r0, [pc, #76]	; 64c <reflection_BaseType_name+0x130>
     5fc:	b	60c <reflection_BaseType_name+0xf0>
     600:	ldr	r0, [pc, #36]	; 62c <reflection_BaseType_name+0x110>
     604:	b	60c <reflection_BaseType_name+0xf0>
     608:	ldr	r0, [pc, #36]	; 634 <reflection_BaseType_name+0x118>
     60c:	ldr	lr, [sp, #4]
     610:	add	sp, sp, #8
     614:	bx	lr
     618:	.word	0x00000370
     61c:	.word	0x000003d1
     620:	.word	0x000003ff
     624:	.word	0x00000233
     628:	.word	0x00000180
     62c:	.word	0x00000358
     630:	.word	0x000000e2
     634:	.word	0x000004f0
     638:	.word	0x00000176
     63c:	.word	0x0000023a
     640:	.word	0x00000000
     644:	.word	0x0000038b
     648:	.word	0x00000185
     64c:	.word	0x00000172
     650:	.word	0x0000035e
     654:	.word	0x00000439
     658:	.word	0x0000049d
     65c:	.word	0x00000498

00000660 <reflection_Type_base_type>:
     660:	mov	ip, sp
     664:	sub	sp, sp, #24
     668:	str	ip, [sp]
     66c:	str	lr, [sp, #4]
     670:	str	r4, [sp, #8]
     674:	str	r5, [sp, #12]
     678:	str	r6, [sp, #16]
     67c:	str	r7, [sp, #20]
     680:	mov	r4, r0
     684:	mov	r5, #0
     688:	cmp	r4, #0
     68c:	beq	6a4 <reflection_Type_base_type+0x44>
     690:	ldr	r2, [pc, #168]	; 740 <reflection_Type_base_type+0xe0>
     694:	cmp	r2, #0
     698:	movne	ip, #1
     69c:	moveq	ip, #0
     6a0:	b	6a8 <reflection_Type_base_type+0x48>
     6a4:	mov	ip, #0
     6a8:	cmp	ip, #0
     6ac:	bne	6c4 <reflection_Type_base_type+0x64>
     6b0:	ldr	r0, [pc, #132]	; 73c <reflection_Type_base_type+0xdc>
     6b4:	ldr	r1, [pc, #124]	; 738 <reflection_Type_base_type+0xd8>
     6b8:	mov	r2, #147	; 0x93
     6bc:	ldr	r3, [pc, #128]	; 744 <reflection_Type_base_type+0xe4>
     6c0:	bl	0 <__assert_fail>
     6c4:	mov	r7, #0
     6c8:	mov	r0, r4
     6cc:	bl	338 <__flatbuffers_soffset_read_from_pe>
     6d0:	sub	r6, r4, r0
     6d4:	mov	r0, r6
     6d8:	bl	380 <__flatbuffers_voffset_read_from_pe>
     6dc:	lsl	r1, r7, #1
     6e0:	add	r1, r1, #6
     6e4:	cmp	r0, r1
     6e8:	bcc	700 <reflection_Type_base_type+0xa0>
     6ec:	add	r0, r6, r7, lsl #1
     6f0:	add	r0, r0, #4
     6f4:	bl	380 <__flatbuffers_voffset_read_from_pe>
     6f8:	bic	r5, r0, #16711680	; 0xff0000
     6fc:	bic	r5, r5, #-16777216	; 0xff000000
     700:	cmp	r5, #0
     704:	beq	714 <reflection_Type_base_type+0xb4>
     708:	add	r0, r4, r5
     70c:	bl	4f0 <reflection_BaseType_read_from_pe>
     710:	b	718 <reflection_Type_base_type+0xb8>
     714:	mov	r0, #0
     718:	sbfx	r0, r0, #0, #8
     71c:	ldr	r4, [sp, #8]
     720:	ldr	r5, [sp, #12]
     724:	ldr	r6, [sp, #16]
     728:	ldr	r7, [sp, #20]
     72c:	ldr	lr, [sp, #4]
     730:	add	sp, sp, #24
     734:	bx	lr
     738:	.word	0x000002aa
     73c:	.word	0x0000011a
     740:	.word	0x000001b8
     744:	.word	0x000004f1

00000748 <reflection_Type_base_type_is_present>:
     748:	mov	ip, sp
     74c:	sub	sp, sp, #24
     750:	str	ip, [sp]
     754:	str	lr, [sp, #4]
     758:	str	r4, [sp, #8]
     75c:	str	r5, [sp, #12]
     760:	str	r6, [sp, #16]
     764:	mov	r4, r0
     768:	mov	r5, #0
     76c:	cmp	r4, #0
     770:	beq	788 <reflection_Type_base_type_is_present+0x40>
     774:	ldr	r3, [pc, #152]	; 814 <reflection_Type_base_type_is_present+0xcc>
     778:	cmp	r3, #0
     77c:	movne	r1, #1
     780:	moveq	r1, #0
     784:	b	78c <reflection_Type_base_type_is_present+0x44>
     788:	mov	r1, #0
     78c:	cmp	r1, #0
     790:	bne	7a8 <reflection_Type_base_type_is_present+0x60>
     794:	ldr	r0, [pc, #116]	; 810 <reflection_Type_base_type_is_present+0xc8>
     798:	ldr	r1, [pc, #104]	; 808 <reflection_Type_base_type_is_present+0xc0>
     79c:	mov	r2, #147	; 0x93
     7a0:	ldr	r3, [pc, #100]	; 80c <reflection_Type_base_type_is_present+0xc4>
     7a4:	bl	0 <__assert_fail>
     7a8:	mov	r6, #0
     7ac:	mov	r0, r4
     7b0:	bl	338 <__flatbuffers_soffset_read_from_pe>
     7b4:	sub	r4, r4, r0
     7b8:	mov	r0, r4
     7bc:	bl	380 <__flatbuffers_voffset_read_from_pe>
     7c0:	lsl	r1, r6, #1
     7c4:	add	ip, r1, #6
     7c8:	cmp	r0, ip
     7cc:	bcc	7e4 <reflection_Type_base_type_is_present+0x9c>
     7d0:	add	r0, r4, r6, lsl #1
     7d4:	add	r0, r0, #4
     7d8:	bl	380 <__flatbuffers_voffset_read_from_pe>
     7dc:	bic	r5, r0, #16711680	; 0xff0000
     7e0:	bic	r5, r5, #-16777216	; 0xff000000
     7e4:	cmp	r5, #0
     7e8:	movne	r0, #1
     7ec:	moveq	r0, #0
     7f0:	ldr	r4, [sp, #8]
     7f4:	ldr	r5, [sp, #12]
     7f8:	ldr	r6, [sp, #16]
     7fc:	ldr	lr, [sp, #4]
     800:	add	sp, sp, #24
     804:	bx	lr
     808:	.word	0x000002aa
     80c:	.word	0x0000050b
     810:	.word	0x0000011a
     814:	.word	0x000001b8

00000818 <reflection_Type_element_is_present>:
     818:	mov	ip, sp
     81c:	sub	sp, sp, #24
     820:	str	ip, [sp]
     824:	str	lr, [sp, #4]
     828:	str	r4, [sp, #8]
     82c:	str	r5, [sp, #12]
     830:	str	r6, [sp, #16]
     834:	mov	r4, r0
     838:	mov	r5, #0
     83c:	cmp	r4, #0
     840:	beq	858 <reflection_Type_element_is_present+0x40>
     844:	ldr	r3, [pc, #152]	; 8e4 <reflection_Type_element_is_present+0xcc>
     848:	cmp	r3, #0
     84c:	movne	r1, #1
     850:	moveq	r1, #0
     854:	b	85c <reflection_Type_element_is_present+0x44>
     858:	mov	r1, #0
     85c:	cmp	r1, #0
     860:	bne	878 <reflection_Type_element_is_present+0x60>
     864:	ldr	r0, [pc, #116]	; 8e0 <reflection_Type_element_is_present+0xc8>
     868:	ldr	r1, [pc, #104]	; 8d8 <reflection_Type_element_is_present+0xc0>
     86c:	mov	r2, #148	; 0x94
     870:	ldr	r3, [pc, #100]	; 8dc <reflection_Type_element_is_present+0xc4>
     874:	bl	0 <__assert_fail>
     878:	mov	r6, #1
     87c:	mov	r0, r4
     880:	bl	338 <__flatbuffers_soffset_read_from_pe>
     884:	sub	r4, r4, r0
     888:	mov	r0, r4
     88c:	bl	380 <__flatbuffers_voffset_read_from_pe>
     890:	lsl	r1, r6, #1
     894:	add	ip, r1, #6
     898:	cmp	r0, ip
     89c:	bcc	8b4 <reflection_Type_element_is_present+0x9c>
     8a0:	add	r0, r4, r6, lsl #1
     8a4:	add	r0, r0, #4
     8a8:	bl	380 <__flatbuffers_voffset_read_from_pe>
     8ac:	bic	r5, r0, #16711680	; 0xff0000
     8b0:	bic	r5, r5, #-16777216	; 0xff000000
     8b4:	cmp	r5, #0
     8b8:	movne	r0, #1
     8bc:	moveq	r0, #0
     8c0:	ldr	r4, [sp, #8]
     8c4:	ldr	r5, [sp, #12]
     8c8:	ldr	r6, [sp, #16]
     8cc:	ldr	lr, [sp, #4]
     8d0:	add	sp, sp, #24
     8d4:	bx	lr
     8d8:	.word	0x000002aa
     8dc:	.word	0x00000530
     8e0:	.word	0x0000011a
     8e4:	.word	0x000001b8

000008e8 <reflection_Type_index>:
     8e8:	mov	ip, sp
     8ec:	sub	sp, sp, #24
     8f0:	str	ip, [sp]
     8f4:	str	lr, [sp, #4]
     8f8:	str	r4, [sp, #8]
     8fc:	str	r5, [sp, #12]
     900:	str	r6, [sp, #16]
     904:	str	r7, [sp, #20]
     908:	mov	r4, r0
     90c:	mov	r5, #0
     910:	cmp	r4, #0
     914:	beq	92c <reflection_Type_index+0x44>
     918:	ldr	r2, [pc, #168]	; 9c8 <reflection_Type_index+0xe0>
     91c:	cmp	r2, #0
     920:	movne	ip, #1
     924:	moveq	ip, #0
     928:	b	930 <reflection_Type_index+0x48>
     92c:	mov	ip, #0
     930:	cmp	ip, #0
     934:	bne	94c <reflection_Type_index+0x64>
     938:	ldr	r0, [pc, #132]	; 9c4 <reflection_Type_index+0xdc>
     93c:	ldr	r1, [pc, #120]	; 9bc <reflection_Type_index+0xd4>
     940:	mov	r2, #149	; 0x95
     944:	ldr	r3, [pc, #116]	; 9c0 <reflection_Type_index+0xd8>
     948:	bl	0 <__assert_fail>
     94c:	mov	r7, #2
     950:	mov	r0, r4
     954:	bl	338 <__flatbuffers_soffset_read_from_pe>
     958:	sub	r6, r4, r0
     95c:	mov	r0, r6
     960:	bl	380 <__flatbuffers_voffset_read_from_pe>
     964:	lsl	r1, r7, #1
     968:	add	r1, r1, #6
     96c:	cmp	r0, r1
     970:	bcc	988 <reflection_Type_index+0xa0>
     974:	add	r0, r6, r7, lsl #1
     978:	add	r0, r0, #4
     97c:	bl	380 <__flatbuffers_voffset_read_from_pe>
     980:	bic	r5, r0, #16711680	; 0xff0000
     984:	bic	r5, r5, #-16777216	; 0xff000000
     988:	cmp	r5, #0
     98c:	beq	99c <reflection_Type_index+0xb4>
     990:	add	r0, r4, r5
     994:	bl	1cc <flatbuffers_int32_read_from_pe>
     998:	b	9a0 <reflection_Type_index+0xb8>
     99c:	mvn	r0, #0
     9a0:	ldr	r4, [sp, #8]
     9a4:	ldr	r5, [sp, #12]
     9a8:	ldr	r6, [sp, #16]
     9ac:	ldr	r7, [sp, #20]
     9b0:	ldr	lr, [sp, #4]
     9b4:	add	sp, sp, #24
     9b8:	bx	lr
     9bc:	.word	0x000002aa
     9c0:	.word	0x00000553
     9c4:	.word	0x0000011a
     9c8:	.word	0x000001b8

000009cc <reflection_Type_index_is_present>:
     9cc:	mov	ip, sp
     9d0:	sub	sp, sp, #24
     9d4:	str	ip, [sp]
     9d8:	str	lr, [sp, #4]
     9dc:	str	r4, [sp, #8]
     9e0:	str	r5, [sp, #12]
     9e4:	str	r6, [sp, #16]
     9e8:	mov	r4, r0
     9ec:	mov	r5, #0
     9f0:	cmp	r4, #0
     9f4:	beq	a0c <reflection_Type_index_is_present+0x40>
     9f8:	ldr	r3, [pc, #148]	; a94 <reflection_Type_index_is_present+0xc8>
     9fc:	cmp	r3, #0
     a00:	movne	r1, #1
     a04:	moveq	r1, #0
     a08:	b	a10 <reflection_Type_index_is_present+0x44>
     a0c:	mov	r1, #0
     a10:	cmp	r1, #0
     a14:	bne	a2c <reflection_Type_index_is_present+0x60>
     a18:	ldr	r0, [pc, #112]	; a90 <reflection_Type_index_is_present+0xc4>
     a1c:	ldr	r1, [pc, #104]	; a8c <reflection_Type_index_is_present+0xc0>
     a20:	mov	r2, #149	; 0x95
     a24:	ldr	r3, [pc, #108]	; a98 <reflection_Type_index_is_present+0xcc>
     a28:	bl	0 <__assert_fail>
     a2c:	mov	r6, #2
     a30:	mov	r0, r4
     a34:	bl	338 <__flatbuffers_soffset_read_from_pe>
     a38:	sub	r4, r4, r0
     a3c:	mov	r0, r4
     a40:	bl	380 <__flatbuffers_voffset_read_from_pe>
     a44:	lsl	r1, r6, #1
     a48:	add	ip, r1, #6
     a4c:	cmp	r0, ip
     a50:	bcc	a68 <reflection_Type_index_is_present+0x9c>
     a54:	add	r0, r4, r6, lsl #1
     a58:	add	r0, r0, #4
     a5c:	bl	380 <__flatbuffers_voffset_read_from_pe>
     a60:	bic	r5, r0, #16711680	; 0xff0000
     a64:	bic	r5, r5, #-16777216	; 0xff000000
     a68:	cmp	r5, #0
     a6c:	movne	r0, #1
     a70:	moveq	r0, #0
     a74:	ldr	r4, [sp, #8]
     a78:	ldr	r5, [sp, #12]
     a7c:	ldr	r6, [sp, #16]
     a80:	ldr	lr, [sp, #4]
     a84:	add	sp, sp, #24
     a88:	bx	lr
     a8c:	.word	0x000002aa
     a90:	.word	0x0000011a
     a94:	.word	0x000001b8
     a98:	.word	0x00000569

00000a9c <reflection_EnumVal_vec_at>:
     a9c:	mov	ip, sp
     aa0:	sub	sp, sp, #16
     aa4:	str	ip, [sp]
     aa8:	str	lr, [sp, #4]
     aac:	str	r4, [sp, #8]
     ab0:	str	r5, [sp, #12]
     ab4:	mov	r4, r1
     ab8:	add	r5, r0, r4, lsl #2
     abc:	bl	410 <flatbuffers_vec_len>
     ac0:	cmp	r0, r4
     ac4:	bls	adc <reflection_EnumVal_vec_at+0x40>
     ac8:	ldr	r3, [pc, #88]	; b28 <reflection_EnumVal_vec_at+0x8c>
     acc:	cmp	r3, #0
     ad0:	movne	r1, #1
     ad4:	moveq	r1, #0
     ad8:	b	ae0 <reflection_EnumVal_vec_at+0x44>
     adc:	mov	r1, #0
     ae0:	cmp	r1, #0
     ae4:	bne	afc <reflection_EnumVal_vec_at+0x60>
     ae8:	ldr	r0, [pc, #44]	; b1c <reflection_EnumVal_vec_at+0x80>
     aec:	ldr	r1, [pc, #44]	; b20 <reflection_EnumVal_vec_at+0x84>
     af0:	mov	r2, #156	; 0x9c
     af4:	ldr	r3, [pc, #40]	; b24 <reflection_EnumVal_vec_at+0x88>
     af8:	bl	0 <__assert_fail>
     afc:	mov	r0, r5
     b00:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
     b04:	add	r0, r5, r0
     b08:	ldr	r4, [sp, #8]
     b0c:	ldr	r5, [sp, #12]
     b10:	ldr	lr, [sp, #4]
     b14:	add	sp, sp, #16
     b18:	bx	lr
     b1c:	.word	0x0000043e
     b20:	.word	0x000002aa
     b24:	.word	0x0000058a
     b28:	.word	0x00000140

00000b2c <reflection_EnumVal_name>:
     b2c:	mov	ip, sp
     b30:	sub	sp, sp, #24
     b34:	str	ip, [sp]
     b38:	str	lr, [sp, #4]
     b3c:	str	r4, [sp, #8]
     b40:	str	r5, [sp, #12]
     b44:	str	r6, [sp, #16]
     b48:	str	r7, [sp, #20]
     b4c:	mov	r4, r0
     b50:	mov	r6, #0
     b54:	cmp	r4, #0
     b58:	beq	b70 <reflection_EnumVal_name+0x44>
     b5c:	ldr	r1, [pc, #248]	; c5c <reflection_EnumVal_name+0x130>
     b60:	cmp	r1, #0
     b64:	movne	r0, #1
     b68:	moveq	r0, #0
     b6c:	b	b74 <reflection_EnumVal_name+0x48>
     b70:	mov	r0, #0
     b74:	cmp	r0, #0
     b78:	bne	b90 <reflection_EnumVal_name+0x64>
     b7c:	ldr	r0, [pc, #212]	; c58 <reflection_EnumVal_name+0x12c>
     b80:	ldr	r1, [pc, #196]	; c4c <reflection_EnumVal_name+0x120>
     b84:	mov	r2, #159	; 0x9f
     b88:	ldr	r3, [pc, #208]	; c60 <reflection_EnumVal_name+0x134>
     b8c:	bl	0 <__assert_fail>
     b90:	mov	r7, #0
     b94:	mov	r0, r4
     b98:	bl	338 <__flatbuffers_soffset_read_from_pe>
     b9c:	sub	r5, r4, r0
     ba0:	mov	r0, r5
     ba4:	bl	380 <__flatbuffers_voffset_read_from_pe>
     ba8:	lsl	r3, r7, #1
     bac:	add	r1, r3, #6
     bb0:	cmp	r0, r1
     bb4:	bcc	bcc <reflection_EnumVal_name+0xa0>
     bb8:	add	r1, r5, r7, lsl #1
     bbc:	add	r0, r1, #4
     bc0:	bl	380 <__flatbuffers_voffset_read_from_pe>
     bc4:	bic	r6, r0, #16711680	; 0xff0000
     bc8:	bic	r6, r6, #-16777216	; 0xff000000
     bcc:	cmp	r6, #0
     bd0:	beq	bec <reflection_EnumVal_name+0xc0>
     bd4:	add	r4, r4, r6
     bd8:	mov	r0, r4
     bdc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
     be0:	add	r0, r4, r0
     be4:	add	r0, r0, #4
     be8:	b	c30 <reflection_EnumVal_name+0x104>
     bec:	mov	r0, #0
     bf0:	cmp	r0, #0
     bf4:	beq	c0c <reflection_EnumVal_name+0xe0>
     bf8:	ldr	r0, [pc, #80]	; c50 <reflection_EnumVal_name+0x124>
     bfc:	cmp	r0, #0
     c00:	movne	r0, #1
     c04:	moveq	r0, #0
     c08:	b	c10 <reflection_EnumVal_name+0xe4>
     c0c:	mov	r0, #0
     c10:	cmp	r0, #0
     c14:	bne	c2c <reflection_EnumVal_name+0x100>
     c18:	ldr	r0, [pc, #52]	; c54 <reflection_EnumVal_name+0x128>
     c1c:	ldr	r1, [pc, #40]	; c4c <reflection_EnumVal_name+0x120>
     c20:	mov	r2, #159	; 0x9f
     c24:	ldr	r3, [pc, #52]	; c60 <reflection_EnumVal_name+0x134>
     c28:	bl	0 <__assert_fail>
     c2c:	mov	r0, #0
     c30:	ldr	r4, [sp, #8]
     c34:	ldr	r5, [sp, #12]
     c38:	ldr	r6, [sp, #16]
     c3c:	ldr	r7, [sp, #20]
     c40:	ldr	lr, [sp, #4]
     c44:	add	sp, sp, #24
     c48:	bx	lr
     c4c:	.word	0x000002aa
     c50:	.word	0x000003d7
     c54:	.word	0x00000240
     c58:	.word	0x0000011a
     c5c:	.word	0x000001b8
     c60:	.word	0x000005a4

00000c64 <reflection_EnumVal_value>:
     c64:	mov	ip, sp
     c68:	sub	sp, sp, #24
     c6c:	str	ip, [sp]
     c70:	str	lr, [sp, #4]
     c74:	str	r4, [sp, #8]
     c78:	str	r5, [sp, #12]
     c7c:	str	r6, [sp, #16]
     c80:	str	r7, [sp, #20]
     c84:	mov	r4, r0
     c88:	mov	r6, #0
     c8c:	cmp	r4, #0
     c90:	beq	ca8 <reflection_EnumVal_value+0x44>
     c94:	ldr	r0, [pc, #168]	; d44 <reflection_EnumVal_value+0xe0>
     c98:	cmp	r0, #0
     c9c:	movne	r1, #1
     ca0:	moveq	r1, #0
     ca4:	b	cac <reflection_EnumVal_value+0x48>
     ca8:	mov	r1, #0
     cac:	cmp	r1, #0
     cb0:	bne	cc8 <reflection_EnumVal_value+0x64>
     cb4:	ldr	r0, [pc, #132]	; d40 <reflection_EnumVal_value+0xdc>
     cb8:	ldr	r1, [pc, #124]	; d3c <reflection_EnumVal_value+0xd8>
     cbc:	mov	r2, #160	; 0xa0
     cc0:	ldr	r3, [pc, #128]	; d48 <reflection_EnumVal_value+0xe4>
     cc4:	bl	0 <__assert_fail>
     cc8:	mov	r7, #1
     ccc:	mov	r0, r4
     cd0:	bl	338 <__flatbuffers_soffset_read_from_pe>
     cd4:	sub	r5, r4, r0
     cd8:	mov	r0, r5
     cdc:	bl	380 <__flatbuffers_voffset_read_from_pe>
     ce0:	lsl	ip, r7, #1
     ce4:	add	r3, ip, #6
     ce8:	cmp	r0, r3
     cec:	bcc	d04 <reflection_EnumVal_value+0xa0>
     cf0:	add	r0, r5, r7, lsl #1
     cf4:	add	r0, r0, #4
     cf8:	bl	380 <__flatbuffers_voffset_read_from_pe>
     cfc:	bic	r6, r0, #16711680	; 0xff0000
     d00:	bic	r6, r6, #-16777216	; 0xff000000
     d04:	cmp	r6, #0
     d08:	beq	d18 <reflection_EnumVal_value+0xb4>
     d0c:	add	r0, r4, r6
     d10:	bl	20c <flatbuffers_int64_read_from_pe>
     d14:	b	d20 <reflection_EnumVal_value+0xbc>
     d18:	mov	r1, #0
     d1c:	mov	r0, #0
     d20:	ldr	r4, [sp, #8]
     d24:	ldr	r5, [sp, #12]
     d28:	ldr	r6, [sp, #16]
     d2c:	ldr	r7, [sp, #20]
     d30:	ldr	lr, [sp, #4]
     d34:	add	sp, sp, #24
     d38:	bx	lr
     d3c:	.word	0x000002aa
     d40:	.word	0x0000011a
     d44:	.word	0x000001b8
     d48:	.word	0x000005bc

00000d4c <reflection_EnumVal_value_is_present>:
     d4c:	mov	ip, sp
     d50:	sub	sp, sp, #24
     d54:	str	ip, [sp]
     d58:	str	lr, [sp, #4]
     d5c:	str	r4, [sp, #8]
     d60:	str	r5, [sp, #12]
     d64:	str	r6, [sp, #16]
     d68:	mov	r4, r0
     d6c:	mov	r5, #0
     d70:	cmp	r4, #0
     d74:	beq	d8c <reflection_EnumVal_value_is_present+0x40>
     d78:	ldr	r3, [pc, #148]	; e14 <reflection_EnumVal_value_is_present+0xc8>
     d7c:	cmp	r3, #0
     d80:	movne	r1, #1
     d84:	moveq	r1, #0
     d88:	b	d90 <reflection_EnumVal_value_is_present+0x44>
     d8c:	mov	r1, #0
     d90:	cmp	r1, #0
     d94:	bne	dac <reflection_EnumVal_value_is_present+0x60>
     d98:	ldr	r0, [pc, #112]	; e10 <reflection_EnumVal_value_is_present+0xc4>
     d9c:	ldr	r1, [pc, #104]	; e0c <reflection_EnumVal_value_is_present+0xc0>
     da0:	mov	r2, #160	; 0xa0
     da4:	ldr	r3, [pc, #108]	; e18 <reflection_EnumVal_value_is_present+0xcc>
     da8:	bl	0 <__assert_fail>
     dac:	mov	r6, #1
     db0:	mov	r0, r4
     db4:	bl	338 <__flatbuffers_soffset_read_from_pe>
     db8:	sub	r4, r4, r0
     dbc:	mov	r0, r4
     dc0:	bl	380 <__flatbuffers_voffset_read_from_pe>
     dc4:	lsl	r1, r6, #1
     dc8:	add	ip, r1, #6
     dcc:	cmp	r0, ip
     dd0:	bcc	de8 <reflection_EnumVal_value_is_present+0x9c>
     dd4:	add	r0, r4, r6, lsl #1
     dd8:	add	r0, r0, #4
     ddc:	bl	380 <__flatbuffers_voffset_read_from_pe>
     de0:	bic	r5, r0, #16711680	; 0xff0000
     de4:	bic	r5, r5, #-16777216	; 0xff000000
     de8:	cmp	r5, #0
     dec:	movne	r0, #1
     df0:	moveq	r0, #0
     df4:	ldr	r4, [sp, #8]
     df8:	ldr	r5, [sp, #12]
     dfc:	ldr	r6, [sp, #16]
     e00:	ldr	lr, [sp, #4]
     e04:	add	sp, sp, #24
     e08:	bx	lr
     e0c:	.word	0x000002aa
     e10:	.word	0x0000011a
     e14:	.word	0x000001b8
     e18:	.word	0x000005d5

00000e1c <reflection_EnumVal_object>:
     e1c:	mov	ip, sp
     e20:	sub	sp, sp, #24
     e24:	str	ip, [sp]
     e28:	str	lr, [sp, #4]
     e2c:	str	r4, [sp, #8]
     e30:	str	r5, [sp, #12]
     e34:	str	r6, [sp, #16]
     e38:	str	r7, [sp, #20]
     e3c:	mov	r4, r0
     e40:	mov	r6, #0
     e44:	cmp	r4, #0
     e48:	beq	e60 <reflection_EnumVal_object+0x44>
     e4c:	ldr	r2, [pc, #248]	; f4c <reflection_EnumVal_object+0x130>
     e50:	cmp	r2, #0
     e54:	movne	r1, #1
     e58:	moveq	r1, #0
     e5c:	b	e64 <reflection_EnumVal_object+0x48>
     e60:	mov	r1, #0
     e64:	cmp	r1, #0
     e68:	bne	e80 <reflection_EnumVal_object+0x64>
     e6c:	ldr	r0, [pc, #212]	; f48 <reflection_EnumVal_object+0x12c>
     e70:	ldr	r1, [pc, #196]	; f3c <reflection_EnumVal_object+0x120>
     e74:	mov	r2, #167	; 0xa7
     e78:	ldr	r3, [pc, #192]	; f40 <reflection_EnumVal_object+0x124>
     e7c:	bl	0 <__assert_fail>
     e80:	mov	r7, #2
     e84:	mov	r0, r4
     e88:	bl	338 <__flatbuffers_soffset_read_from_pe>
     e8c:	sub	r5, r4, r0
     e90:	mov	r0, r5
     e94:	bl	380 <__flatbuffers_voffset_read_from_pe>
     e98:	lsl	r3, r7, #1
     e9c:	add	ip, r3, #6
     ea0:	cmp	r0, ip
     ea4:	bcc	ebc <reflection_EnumVal_object+0xa0>
     ea8:	add	r1, r5, r7, lsl #1
     eac:	add	r0, r1, #4
     eb0:	bl	380 <__flatbuffers_voffset_read_from_pe>
     eb4:	bic	r6, r0, #16711680	; 0xff0000
     eb8:	bic	r6, r6, #-16777216	; 0xff000000
     ebc:	cmp	r6, #0
     ec0:	beq	ed8 <reflection_EnumVal_object+0xbc>
     ec4:	add	r4, r4, r6
     ec8:	mov	r0, r4
     ecc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
     ed0:	add	r0, r4, r0
     ed4:	b	f1c <reflection_EnumVal_object+0x100>
     ed8:	mov	r0, #1
     edc:	cmp	r0, #0
     ee0:	beq	ef8 <reflection_EnumVal_object+0xdc>
     ee4:	ldr	r0, [pc, #88]	; f44 <reflection_EnumVal_object+0x128>
     ee8:	cmp	r0, #0
     eec:	movne	r0, #1
     ef0:	moveq	r0, #0
     ef4:	b	efc <reflection_EnumVal_object+0xe0>
     ef8:	mov	r0, #0
     efc:	cmp	r0, #0
     f00:	bne	f18 <reflection_EnumVal_object+0xfc>
     f04:	ldr	r0, [pc, #44]	; f38 <reflection_EnumVal_object+0x11c>
     f08:	ldr	r1, [pc, #44]	; f3c <reflection_EnumVal_object+0x120>
     f0c:	mov	r2, #167	; 0xa7
     f10:	ldr	r3, [pc, #40]	; f40 <reflection_EnumVal_object+0x124>
     f14:	bl	0 <__assert_fail>
     f18:	mov	r0, #0
     f1c:	ldr	r4, [sp, #8]
     f20:	ldr	r5, [sp, #12]
     f24:	ldr	r6, [sp, #16]
     f28:	ldr	r7, [sp, #20]
     f2c:	ldr	lr, [sp, #4]
     f30:	add	sp, sp, #24
     f34:	bx	lr
     f38:	.word	0x000001ff
     f3c:	.word	0x000002aa
     f40:	.word	0x000005f9
     f44:	.word	0x000003d7
     f48:	.word	0x0000011a
     f4c:	.word	0x000001b8

00000f50 <reflection_EnumVal_object_is_present>:
     f50:	mov	ip, sp
     f54:	sub	sp, sp, #24
     f58:	str	ip, [sp]
     f5c:	str	lr, [sp, #4]
     f60:	str	r4, [sp, #8]
     f64:	str	r5, [sp, #12]
     f68:	str	r6, [sp, #16]
     f6c:	mov	r4, r0
     f70:	mov	r5, #0
     f74:	cmp	r4, #0
     f78:	beq	f90 <reflection_EnumVal_object_is_present+0x40>
     f7c:	ldr	r3, [pc, #152]	; 101c <reflection_EnumVal_object_is_present+0xcc>
     f80:	cmp	r3, #0
     f84:	movne	r1, #1
     f88:	moveq	r1, #0
     f8c:	b	f94 <reflection_EnumVal_object_is_present+0x44>
     f90:	mov	r1, #0
     f94:	cmp	r1, #0
     f98:	bne	fb0 <reflection_EnumVal_object_is_present+0x60>
     f9c:	ldr	r0, [pc, #116]	; 1018 <reflection_EnumVal_object_is_present+0xc8>
     fa0:	ldr	r1, [pc, #108]	; 1014 <reflection_EnumVal_object_is_present+0xc4>
     fa4:	mov	r2, #167	; 0xa7
     fa8:	ldr	r3, [pc, #96]	; 1010 <reflection_EnumVal_object_is_present+0xc0>
     fac:	bl	0 <__assert_fail>
     fb0:	mov	r6, #2
     fb4:	mov	r0, r4
     fb8:	bl	338 <__flatbuffers_soffset_read_from_pe>
     fbc:	sub	r4, r4, r0
     fc0:	mov	r0, r4
     fc4:	bl	380 <__flatbuffers_voffset_read_from_pe>
     fc8:	lsl	r1, r6, #1
     fcc:	add	ip, r1, #6
     fd0:	cmp	r0, ip
     fd4:	bcc	fec <reflection_EnumVal_object_is_present+0x9c>
     fd8:	add	r0, r4, r6, lsl #1
     fdc:	add	r0, r0, #4
     fe0:	bl	380 <__flatbuffers_voffset_read_from_pe>
     fe4:	bic	r5, r0, #16711680	; 0xff0000
     fe8:	bic	r5, r5, #-16777216	; 0xff000000
     fec:	cmp	r5, #0
     ff0:	movne	r0, #1
     ff4:	moveq	r0, #0
     ff8:	ldr	r4, [sp, #8]
     ffc:	ldr	r5, [sp, #12]
    1000:	ldr	r6, [sp, #16]
    1004:	ldr	lr, [sp, #4]
    1008:	add	sp, sp, #24
    100c:	bx	lr
    1010:	.word	0x00000613
    1014:	.word	0x000002aa
    1018:	.word	0x0000011a
    101c:	.word	0x000001b8

00001020 <reflection_Enum_vec_len>:
    1020:	mov	ip, sp
    1024:	sub	sp, sp, #8
    1028:	str	ip, [sp]
    102c:	str	lr, [sp, #4]
    1030:	cmp	r0, #0
    1034:	beq	1044 <reflection_Enum_vec_len+0x24>
    1038:	sub	r0, r0, #4
    103c:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    1040:	b	1048 <reflection_Enum_vec_len+0x28>
    1044:	mov	r0, #0
    1048:	ldr	lr, [sp, #4]
    104c:	add	sp, sp, #8
    1050:	bx	lr

00001054 <reflection_Enum_vec_at>:
    1054:	mov	ip, sp
    1058:	sub	sp, sp, #16
    105c:	str	ip, [sp]
    1060:	str	lr, [sp, #4]
    1064:	str	r4, [sp, #8]
    1068:	str	r5, [sp, #12]
    106c:	mov	r4, r1
    1070:	add	r5, r0, r4, lsl #2
    1074:	bl	410 <flatbuffers_vec_len>
    1078:	cmp	r0, r4
    107c:	bls	1094 <reflection_Enum_vec_at+0x40>
    1080:	ldr	r3, [pc, #88]	; 10e0 <reflection_Enum_vec_at+0x8c>
    1084:	cmp	r3, #0
    1088:	movne	r1, #1
    108c:	moveq	r1, #0
    1090:	b	1098 <reflection_Enum_vec_at+0x44>
    1094:	mov	r1, #0
    1098:	cmp	r1, #0
    109c:	bne	10b4 <reflection_Enum_vec_at+0x60>
    10a0:	ldr	r0, [pc, #44]	; 10d4 <reflection_Enum_vec_at+0x80>
    10a4:	ldr	r1, [pc, #48]	; 10dc <reflection_Enum_vec_at+0x88>
    10a8:	mov	r2, #174	; 0xae
    10ac:	ldr	r3, [pc, #36]	; 10d8 <reflection_Enum_vec_at+0x84>
    10b0:	bl	0 <__assert_fail>
    10b4:	mov	r0, r5
    10b8:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    10bc:	add	r0, r5, r0
    10c0:	ldr	r4, [sp, #8]
    10c4:	ldr	r5, [sp, #12]
    10c8:	ldr	lr, [sp, #4]
    10cc:	add	sp, sp, #16
    10d0:	bx	lr
    10d4:	.word	0x0000043e
    10d8:	.word	0x00000638
    10dc:	.word	0x000002aa
    10e0:	.word	0x00000140

000010e4 <reflection_Enum_name>:
    10e4:	mov	ip, sp
    10e8:	sub	sp, sp, #24
    10ec:	str	ip, [sp]
    10f0:	str	lr, [sp, #4]
    10f4:	str	r4, [sp, #8]
    10f8:	str	r5, [sp, #12]
    10fc:	str	r6, [sp, #16]
    1100:	str	r7, [sp, #20]
    1104:	mov	r4, r0
    1108:	mov	r6, #0
    110c:	cmp	r4, #0
    1110:	beq	1128 <reflection_Enum_name+0x44>
    1114:	ldr	r1, [pc, #252]	; 1218 <reflection_Enum_name+0x134>
    1118:	cmp	r1, #0
    111c:	movne	r0, #1
    1120:	moveq	r0, #0
    1124:	b	112c <reflection_Enum_name+0x48>
    1128:	mov	r0, #0
    112c:	cmp	r0, #0
    1130:	bne	1148 <reflection_Enum_name+0x64>
    1134:	ldr	r0, [pc, #216]	; 1214 <reflection_Enum_name+0x130>
    1138:	ldr	r1, [pc, #200]	; 1208 <reflection_Enum_name+0x124>
    113c:	mov	r2, #177	; 0xb1
    1140:	ldr	r3, [pc, #188]	; 1204 <reflection_Enum_name+0x120>
    1144:	bl	0 <__assert_fail>
    1148:	mov	r7, #0
    114c:	mov	r0, r4
    1150:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1154:	sub	r5, r4, r0
    1158:	mov	r0, r5
    115c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1160:	lsl	r3, r7, #1
    1164:	add	r1, r3, #6
    1168:	cmp	r0, r1
    116c:	bcc	1184 <reflection_Enum_name+0xa0>
    1170:	add	r1, r5, r7, lsl #1
    1174:	add	r0, r1, #4
    1178:	bl	380 <__flatbuffers_voffset_read_from_pe>
    117c:	bic	r6, r0, #16711680	; 0xff0000
    1180:	bic	r6, r6, #-16777216	; 0xff000000
    1184:	cmp	r6, #0
    1188:	beq	11a4 <reflection_Enum_name+0xc0>
    118c:	add	r4, r4, r6
    1190:	mov	r0, r4
    1194:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    1198:	add	r0, r4, r0
    119c:	add	r0, r0, #4
    11a0:	b	11e8 <reflection_Enum_name+0x104>
    11a4:	mov	r0, #0
    11a8:	cmp	r0, #0
    11ac:	beq	11c4 <reflection_Enum_name+0xe0>
    11b0:	ldr	r0, [pc, #84]	; 120c <reflection_Enum_name+0x128>
    11b4:	cmp	r0, #0
    11b8:	movne	r0, #1
    11bc:	moveq	r0, #0
    11c0:	b	11c8 <reflection_Enum_name+0xe4>
    11c4:	mov	r0, #0
    11c8:	cmp	r0, #0
    11cc:	bne	11e4 <reflection_Enum_name+0x100>
    11d0:	ldr	r0, [pc, #56]	; 1210 <reflection_Enum_name+0x12c>
    11d4:	ldr	r1, [pc, #44]	; 1208 <reflection_Enum_name+0x124>
    11d8:	mov	r2, #177	; 0xb1
    11dc:	ldr	r3, [pc, #32]	; 1204 <reflection_Enum_name+0x120>
    11e0:	bl	0 <__assert_fail>
    11e4:	mov	r0, #0
    11e8:	ldr	r4, [sp, #8]
    11ec:	ldr	r5, [sp, #12]
    11f0:	ldr	r6, [sp, #16]
    11f4:	ldr	r7, [sp, #20]
    11f8:	ldr	lr, [sp, #4]
    11fc:	add	sp, sp, #24
    1200:	bx	lr
    1204:	.word	0x0000064f
    1208:	.word	0x000002aa
    120c:	.word	0x000003d7
    1210:	.word	0x00000240
    1214:	.word	0x0000011a
    1218:	.word	0x000001b8

0000121c <reflection_Enum_values>:
    121c:	mov	ip, sp
    1220:	sub	sp, sp, #24
    1224:	str	ip, [sp]
    1228:	str	lr, [sp, #4]
    122c:	str	r4, [sp, #8]
    1230:	str	r5, [sp, #12]
    1234:	str	r6, [sp, #16]
    1238:	str	r7, [sp, #20]
    123c:	mov	r4, r0
    1240:	mov	r6, #0
    1244:	cmp	r4, #0
    1248:	beq	1260 <reflection_Enum_values+0x44>
    124c:	ldr	r1, [pc, #252]	; 1350 <reflection_Enum_values+0x134>
    1250:	cmp	r1, #0
    1254:	movne	r0, #1
    1258:	moveq	r0, #0
    125c:	b	1264 <reflection_Enum_values+0x48>
    1260:	mov	r0, #0
    1264:	cmp	r0, #0
    1268:	bne	1280 <reflection_Enum_values+0x64>
    126c:	ldr	r0, [pc, #216]	; 134c <reflection_Enum_values+0x130>
    1270:	ldr	r1, [pc, #196]	; 133c <reflection_Enum_values+0x120>
    1274:	mov	r2, #183	; 0xb7
    1278:	ldr	r3, [pc, #196]	; 1344 <reflection_Enum_values+0x128>
    127c:	bl	0 <__assert_fail>
    1280:	mov	r7, #1
    1284:	mov	r0, r4
    1288:	bl	338 <__flatbuffers_soffset_read_from_pe>
    128c:	sub	r5, r4, r0
    1290:	mov	r0, r5
    1294:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1298:	lsl	r3, r7, #1
    129c:	add	r1, r3, #6
    12a0:	cmp	r0, r1
    12a4:	bcc	12bc <reflection_Enum_values+0xa0>
    12a8:	add	r1, r5, r7, lsl #1
    12ac:	add	r0, r1, #4
    12b0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    12b4:	bic	r6, r0, #16711680	; 0xff0000
    12b8:	bic	r6, r6, #-16777216	; 0xff000000
    12bc:	cmp	r6, #0
    12c0:	beq	12dc <reflection_Enum_values+0xc0>
    12c4:	add	r4, r4, r6
    12c8:	mov	r0, r4
    12cc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    12d0:	add	r0, r4, r0
    12d4:	add	r0, r0, #4
    12d8:	b	1320 <reflection_Enum_values+0x104>
    12dc:	mov	r0, #0
    12e0:	cmp	r0, #0
    12e4:	beq	12fc <reflection_Enum_values+0xe0>
    12e8:	ldr	r0, [pc, #80]	; 1340 <reflection_Enum_values+0x124>
    12ec:	cmp	r0, #0
    12f0:	movne	r0, #1
    12f4:	moveq	r0, #0
    12f8:	b	1300 <reflection_Enum_values+0xe4>
    12fc:	mov	r0, #0
    1300:	cmp	r0, #0
    1304:	bne	131c <reflection_Enum_values+0x100>
    1308:	ldr	r0, [pc, #56]	; 1348 <reflection_Enum_values+0x12c>
    130c:	ldr	r1, [pc, #40]	; 133c <reflection_Enum_values+0x120>
    1310:	mov	r2, #183	; 0xb7
    1314:	ldr	r3, [pc, #40]	; 1344 <reflection_Enum_values+0x128>
    1318:	bl	0 <__assert_fail>
    131c:	mov	r0, #0
    1320:	ldr	r4, [sp, #8]
    1324:	ldr	r5, [sp, #12]
    1328:	ldr	r6, [sp, #16]
    132c:	ldr	r7, [sp, #20]
    1330:	ldr	lr, [sp, #4]
    1334:	add	sp, sp, #24
    1338:	bx	lr
    133c:	.word	0x000002aa
    1340:	.word	0x000003d7
    1344:	.word	0x00000664
    1348:	.word	0x00000240
    134c:	.word	0x0000011a
    1350:	.word	0x000001b8

00001354 <reflection_Enum_is_union>:
    1354:	mov	ip, sp
    1358:	sub	sp, sp, #24
    135c:	str	ip, [sp]
    1360:	str	lr, [sp, #4]
    1364:	str	r4, [sp, #8]
    1368:	str	r5, [sp, #12]
    136c:	str	r6, [sp, #16]
    1370:	str	r7, [sp, #20]
    1374:	mov	r4, r0
    1378:	mov	r5, #0
    137c:	cmp	r4, #0
    1380:	beq	1398 <reflection_Enum_is_union+0x44>
    1384:	ldr	r2, [pc, #168]	; 1434 <reflection_Enum_is_union+0xe0>
    1388:	cmp	r2, #0
    138c:	movne	ip, #1
    1390:	moveq	ip, #0
    1394:	b	139c <reflection_Enum_is_union+0x48>
    1398:	mov	ip, #0
    139c:	cmp	ip, #0
    13a0:	bne	13b8 <reflection_Enum_is_union+0x64>
    13a4:	ldr	r0, [pc, #132]	; 1430 <reflection_Enum_is_union+0xdc>
    13a8:	ldr	r1, [pc, #124]	; 142c <reflection_Enum_is_union+0xd8>
    13ac:	mov	r2, #184	; 0xb8
    13b0:	ldr	r3, [pc, #128]	; 1438 <reflection_Enum_is_union+0xe4>
    13b4:	bl	0 <__assert_fail>
    13b8:	mov	r7, #2
    13bc:	mov	r0, r4
    13c0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    13c4:	sub	r6, r4, r0
    13c8:	mov	r0, r6
    13cc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    13d0:	lsl	r1, r7, #1
    13d4:	add	r1, r1, #6
    13d8:	cmp	r0, r1
    13dc:	bcc	13f4 <reflection_Enum_is_union+0xa0>
    13e0:	add	r0, r6, r7, lsl #1
    13e4:	add	r0, r0, #4
    13e8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    13ec:	bic	r5, r0, #16711680	; 0xff0000
    13f0:	bic	r5, r5, #-16777216	; 0xff000000
    13f4:	cmp	r5, #0
    13f8:	beq	1408 <reflection_Enum_is_union+0xb4>
    13fc:	add	r0, r4, r5
    1400:	bl	2b0 <flatbuffers_bool_read_from_pe>
    1404:	b	140c <reflection_Enum_is_union+0xb8>
    1408:	mov	r0, #0
    140c:	and	r0, r0, #255	; 0xff
    1410:	ldr	r4, [sp, #8]
    1414:	ldr	r5, [sp, #12]
    1418:	ldr	r6, [sp, #16]
    141c:	ldr	r7, [sp, #20]
    1420:	ldr	lr, [sp, #4]
    1424:	add	sp, sp, #24
    1428:	bx	lr
    142c:	.word	0x000002aa
    1430:	.word	0x0000011a
    1434:	.word	0x000001b8
    1438:	.word	0x0000067b

0000143c <reflection_Enum_is_union_is_present>:
    143c:	mov	ip, sp
    1440:	sub	sp, sp, #24
    1444:	str	ip, [sp]
    1448:	str	lr, [sp, #4]
    144c:	str	r4, [sp, #8]
    1450:	str	r5, [sp, #12]
    1454:	str	r6, [sp, #16]
    1458:	mov	r4, r0
    145c:	mov	r5, #0
    1460:	cmp	r4, #0
    1464:	beq	147c <reflection_Enum_is_union_is_present+0x40>
    1468:	ldr	r3, [pc, #152]	; 1508 <reflection_Enum_is_union_is_present+0xcc>
    146c:	cmp	r3, #0
    1470:	movne	r1, #1
    1474:	moveq	r1, #0
    1478:	b	1480 <reflection_Enum_is_union_is_present+0x44>
    147c:	mov	r1, #0
    1480:	cmp	r1, #0
    1484:	bne	149c <reflection_Enum_is_union_is_present+0x60>
    1488:	ldr	r0, [pc, #116]	; 1504 <reflection_Enum_is_union_is_present+0xc8>
    148c:	ldr	r1, [pc, #104]	; 14fc <reflection_Enum_is_union_is_present+0xc0>
    1490:	mov	r2, #184	; 0xb8
    1494:	ldr	r3, [pc, #100]	; 1500 <reflection_Enum_is_union_is_present+0xc4>
    1498:	bl	0 <__assert_fail>
    149c:	mov	r6, #2
    14a0:	mov	r0, r4
    14a4:	bl	338 <__flatbuffers_soffset_read_from_pe>
    14a8:	sub	r4, r4, r0
    14ac:	mov	r0, r4
    14b0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    14b4:	lsl	r1, r6, #1
    14b8:	add	ip, r1, #6
    14bc:	cmp	r0, ip
    14c0:	bcc	14d8 <reflection_Enum_is_union_is_present+0x9c>
    14c4:	add	r0, r4, r6, lsl #1
    14c8:	add	r0, r0, #4
    14cc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    14d0:	bic	r5, r0, #16711680	; 0xff0000
    14d4:	bic	r5, r5, #-16777216	; 0xff000000
    14d8:	cmp	r5, #0
    14dc:	movne	r0, #1
    14e0:	moveq	r0, #0
    14e4:	ldr	r4, [sp, #8]
    14e8:	ldr	r5, [sp, #12]
    14ec:	ldr	r6, [sp, #16]
    14f0:	ldr	lr, [sp, #4]
    14f4:	add	sp, sp, #24
    14f8:	bx	lr
    14fc:	.word	0x000002aa
    1500:	.word	0x00000694
    1504:	.word	0x0000011a
    1508:	.word	0x000001b8

0000150c <reflection_Enum_underlying_type>:
    150c:	mov	ip, sp
    1510:	sub	sp, sp, #24
    1514:	str	ip, [sp]
    1518:	str	lr, [sp, #4]
    151c:	str	r4, [sp, #8]
    1520:	str	r5, [sp, #12]
    1524:	str	r6, [sp, #16]
    1528:	str	r7, [sp, #20]
    152c:	mov	r4, r0
    1530:	mov	r6, #0
    1534:	cmp	r4, #0
    1538:	beq	1550 <reflection_Enum_underlying_type+0x44>
    153c:	ldr	r2, [pc, #248]	; 163c <reflection_Enum_underlying_type+0x130>
    1540:	cmp	r2, #0
    1544:	movne	r1, #1
    1548:	moveq	r1, #0
    154c:	b	1554 <reflection_Enum_underlying_type+0x48>
    1550:	mov	r1, #0
    1554:	cmp	r1, #0
    1558:	bne	1570 <reflection_Enum_underlying_type+0x64>
    155c:	ldr	r0, [pc, #212]	; 1638 <reflection_Enum_underlying_type+0x12c>
    1560:	ldr	r1, [pc, #192]	; 1628 <reflection_Enum_underlying_type+0x11c>
    1564:	mov	r2, #185	; 0xb9
    1568:	ldr	r3, [pc, #196]	; 1634 <reflection_Enum_underlying_type+0x128>
    156c:	bl	0 <__assert_fail>
    1570:	mov	r7, #3
    1574:	mov	r0, r4
    1578:	bl	338 <__flatbuffers_soffset_read_from_pe>
    157c:	sub	r5, r4, r0
    1580:	mov	r0, r5
    1584:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1588:	lsl	r3, r7, #1
    158c:	add	ip, r3, #6
    1590:	cmp	r0, ip
    1594:	bcc	15ac <reflection_Enum_underlying_type+0xa0>
    1598:	add	r1, r5, r7, lsl #1
    159c:	add	r0, r1, #4
    15a0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    15a4:	bic	r6, r0, #16711680	; 0xff0000
    15a8:	bic	r6, r6, #-16777216	; 0xff000000
    15ac:	cmp	r6, #0
    15b0:	beq	15c8 <reflection_Enum_underlying_type+0xbc>
    15b4:	add	r4, r4, r6
    15b8:	mov	r0, r4
    15bc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    15c0:	add	r0, r4, r0
    15c4:	b	160c <reflection_Enum_underlying_type+0x100>
    15c8:	mov	r0, #0
    15cc:	cmp	r0, #0
    15d0:	beq	15e8 <reflection_Enum_underlying_type+0xdc>
    15d4:	ldr	r0, [pc, #80]	; 162c <reflection_Enum_underlying_type+0x120>
    15d8:	cmp	r0, #0
    15dc:	movne	r0, #1
    15e0:	moveq	r0, #0
    15e4:	b	15ec <reflection_Enum_underlying_type+0xe0>
    15e8:	mov	r0, #0
    15ec:	cmp	r0, #0
    15f0:	bne	1608 <reflection_Enum_underlying_type+0xfc>
    15f4:	ldr	r0, [pc, #52]	; 1630 <reflection_Enum_underlying_type+0x124>
    15f8:	ldr	r1, [pc, #40]	; 1628 <reflection_Enum_underlying_type+0x11c>
    15fc:	mov	r2, #185	; 0xb9
    1600:	ldr	r3, [pc, #44]	; 1634 <reflection_Enum_underlying_type+0x128>
    1604:	bl	0 <__assert_fail>
    1608:	mov	r0, #0
    160c:	ldr	r4, [sp, #8]
    1610:	ldr	r5, [sp, #12]
    1614:	ldr	r6, [sp, #16]
    1618:	ldr	r7, [sp, #20]
    161c:	ldr	lr, [sp, #4]
    1620:	add	sp, sp, #24
    1624:	bx	lr
    1628:	.word	0x000002aa
    162c:	.word	0x000003d7
    1630:	.word	0x00000240
    1634:	.word	0x000006b8
    1638:	.word	0x0000011a
    163c:	.word	0x000001b8

00001640 <reflection_Field_vec_len>:
    1640:	mov	ip, sp
    1644:	sub	sp, sp, #8
    1648:	str	ip, [sp]
    164c:	str	lr, [sp, #4]
    1650:	cmp	r0, #0
    1654:	beq	1664 <reflection_Field_vec_len+0x24>
    1658:	sub	r0, r0, #4
    165c:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    1660:	b	1668 <reflection_Field_vec_len+0x28>
    1664:	mov	r0, #0
    1668:	ldr	lr, [sp, #4]
    166c:	add	sp, sp, #8
    1670:	bx	lr

00001674 <reflection_Field_vec_at>:
    1674:	mov	ip, sp
    1678:	sub	sp, sp, #16
    167c:	str	ip, [sp]
    1680:	str	lr, [sp, #4]
    1684:	str	r4, [sp, #8]
    1688:	str	r5, [sp, #12]
    168c:	mov	r4, r1
    1690:	add	r5, r0, r4, lsl #2
    1694:	bl	410 <flatbuffers_vec_len>
    1698:	cmp	r0, r4
    169c:	bls	16b4 <reflection_Field_vec_at+0x40>
    16a0:	ldr	r3, [pc, #88]	; 1700 <reflection_Field_vec_at+0x8c>
    16a4:	cmp	r3, #0
    16a8:	movne	r1, #1
    16ac:	moveq	r1, #0
    16b0:	b	16b8 <reflection_Field_vec_at+0x44>
    16b4:	mov	r1, #0
    16b8:	cmp	r1, #0
    16bc:	bne	16d4 <reflection_Field_vec_at+0x60>
    16c0:	ldr	r0, [pc, #44]	; 16f4 <reflection_Field_vec_at+0x80>
    16c4:	ldr	r1, [pc, #44]	; 16f8 <reflection_Field_vec_at+0x84>
    16c8:	mov	r2, #192	; 0xc0
    16cc:	ldr	r3, [pc, #40]	; 16fc <reflection_Field_vec_at+0x88>
    16d0:	bl	0 <__assert_fail>
    16d4:	mov	r0, r5
    16d8:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    16dc:	add	r0, r5, r0
    16e0:	ldr	r4, [sp, #8]
    16e4:	ldr	r5, [sp, #12]
    16e8:	ldr	lr, [sp, #4]
    16ec:	add	sp, sp, #16
    16f0:	bx	lr
    16f4:	.word	0x0000043e
    16f8:	.word	0x000002aa
    16fc:	.word	0x000006d8
    1700:	.word	0x00000140

00001704 <reflection_Field_name>:
    1704:	mov	ip, sp
    1708:	sub	sp, sp, #24
    170c:	str	ip, [sp]
    1710:	str	lr, [sp, #4]
    1714:	str	r4, [sp, #8]
    1718:	str	r5, [sp, #12]
    171c:	str	r6, [sp, #16]
    1720:	str	r7, [sp, #20]
    1724:	mov	r4, r0
    1728:	mov	r6, #0
    172c:	cmp	r4, #0
    1730:	beq	1748 <reflection_Field_name+0x44>
    1734:	ldr	r1, [pc, #252]	; 1838 <reflection_Field_name+0x134>
    1738:	cmp	r1, #0
    173c:	movne	r0, #1
    1740:	moveq	r0, #0
    1744:	b	174c <reflection_Field_name+0x48>
    1748:	mov	r0, #0
    174c:	cmp	r0, #0
    1750:	bne	1768 <reflection_Field_name+0x64>
    1754:	ldr	r0, [pc, #216]	; 1834 <reflection_Field_name+0x130>
    1758:	ldr	r1, [pc, #200]	; 1828 <reflection_Field_name+0x124>
    175c:	mov	r2, #195	; 0xc3
    1760:	ldr	r3, [pc, #188]	; 1824 <reflection_Field_name+0x120>
    1764:	bl	0 <__assert_fail>
    1768:	mov	r7, #0
    176c:	mov	r0, r4
    1770:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1774:	sub	r5, r4, r0
    1778:	mov	r0, r5
    177c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1780:	lsl	r3, r7, #1
    1784:	add	r1, r3, #6
    1788:	cmp	r0, r1
    178c:	bcc	17a4 <reflection_Field_name+0xa0>
    1790:	add	r1, r5, r7, lsl #1
    1794:	add	r0, r1, #4
    1798:	bl	380 <__flatbuffers_voffset_read_from_pe>
    179c:	bic	r6, r0, #16711680	; 0xff0000
    17a0:	bic	r6, r6, #-16777216	; 0xff000000
    17a4:	cmp	r6, #0
    17a8:	beq	17c4 <reflection_Field_name+0xc0>
    17ac:	add	r4, r4, r6
    17b0:	mov	r0, r4
    17b4:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    17b8:	add	r0, r4, r0
    17bc:	add	r0, r0, #4
    17c0:	b	1808 <reflection_Field_name+0x104>
    17c4:	mov	r0, #0
    17c8:	cmp	r0, #0
    17cc:	beq	17e4 <reflection_Field_name+0xe0>
    17d0:	ldr	r0, [pc, #84]	; 182c <reflection_Field_name+0x128>
    17d4:	cmp	r0, #0
    17d8:	movne	r0, #1
    17dc:	moveq	r0, #0
    17e0:	b	17e8 <reflection_Field_name+0xe4>
    17e4:	mov	r0, #0
    17e8:	cmp	r0, #0
    17ec:	bne	1804 <reflection_Field_name+0x100>
    17f0:	ldr	r0, [pc, #56]	; 1830 <reflection_Field_name+0x12c>
    17f4:	ldr	r1, [pc, #44]	; 1828 <reflection_Field_name+0x124>
    17f8:	mov	r2, #195	; 0xc3
    17fc:	ldr	r3, [pc, #32]	; 1824 <reflection_Field_name+0x120>
    1800:	bl	0 <__assert_fail>
    1804:	mov	r0, #0
    1808:	ldr	r4, [sp, #8]
    180c:	ldr	r5, [sp, #12]
    1810:	ldr	r6, [sp, #16]
    1814:	ldr	r7, [sp, #20]
    1818:	ldr	lr, [sp, #4]
    181c:	add	sp, sp, #24
    1820:	bx	lr
    1824:	.word	0x000006f0
    1828:	.word	0x000002aa
    182c:	.word	0x000003d7
    1830:	.word	0x00000240
    1834:	.word	0x0000011a
    1838:	.word	0x000001b8

0000183c <reflection_Field_type>:
    183c:	mov	ip, sp
    1840:	sub	sp, sp, #24
    1844:	str	ip, [sp]
    1848:	str	lr, [sp, #4]
    184c:	str	r4, [sp, #8]
    1850:	str	r5, [sp, #12]
    1854:	str	r6, [sp, #16]
    1858:	str	r7, [sp, #20]
    185c:	mov	r4, r0
    1860:	mov	r6, #0
    1864:	cmp	r4, #0
    1868:	beq	1880 <reflection_Field_type+0x44>
    186c:	ldr	r2, [pc, #244]	; 1968 <reflection_Field_type+0x12c>
    1870:	cmp	r2, #0
    1874:	movne	r1, #1
    1878:	moveq	r1, #0
    187c:	b	1884 <reflection_Field_type+0x48>
    1880:	mov	r1, #0
    1884:	cmp	r1, #0
    1888:	bne	18a0 <reflection_Field_type+0x64>
    188c:	ldr	r0, [pc, #208]	; 1964 <reflection_Field_type+0x128>
    1890:	ldr	r1, [pc, #192]	; 1958 <reflection_Field_type+0x11c>
    1894:	mov	r2, #201	; 0xc9
    1898:	ldr	r3, [pc, #204]	; 196c <reflection_Field_type+0x130>
    189c:	bl	0 <__assert_fail>
    18a0:	mov	r7, #1
    18a4:	mov	r0, r4
    18a8:	bl	338 <__flatbuffers_soffset_read_from_pe>
    18ac:	sub	r5, r4, r0
    18b0:	mov	r0, r5
    18b4:	bl	380 <__flatbuffers_voffset_read_from_pe>
    18b8:	lsl	r3, r7, #1
    18bc:	add	ip, r3, #6
    18c0:	cmp	r0, ip
    18c4:	bcc	18dc <reflection_Field_type+0xa0>
    18c8:	add	r1, r5, r7, lsl #1
    18cc:	add	r0, r1, #4
    18d0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    18d4:	bic	r6, r0, #16711680	; 0xff0000
    18d8:	bic	r6, r6, #-16777216	; 0xff000000
    18dc:	cmp	r6, #0
    18e0:	beq	18f8 <reflection_Field_type+0xbc>
    18e4:	add	r4, r4, r6
    18e8:	mov	r0, r4
    18ec:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    18f0:	add	r0, r4, r0
    18f4:	b	193c <reflection_Field_type+0x100>
    18f8:	mov	r0, #0
    18fc:	cmp	r0, #0
    1900:	beq	1918 <reflection_Field_type+0xdc>
    1904:	ldr	r0, [pc, #80]	; 195c <reflection_Field_type+0x120>
    1908:	cmp	r0, #0
    190c:	movne	r0, #1
    1910:	moveq	r0, #0
    1914:	b	191c <reflection_Field_type+0xe0>
    1918:	mov	r0, #0
    191c:	cmp	r0, #0
    1920:	bne	1938 <reflection_Field_type+0xfc>
    1924:	ldr	r0, [pc, #52]	; 1960 <reflection_Field_type+0x124>
    1928:	ldr	r1, [pc, #40]	; 1958 <reflection_Field_type+0x11c>
    192c:	mov	r2, #201	; 0xc9
    1930:	ldr	r3, [pc, #52]	; 196c <reflection_Field_type+0x130>
    1934:	bl	0 <__assert_fail>
    1938:	mov	r0, #0
    193c:	ldr	r4, [sp, #8]
    1940:	ldr	r5, [sp, #12]
    1944:	ldr	r6, [sp, #16]
    1948:	ldr	r7, [sp, #20]
    194c:	ldr	lr, [sp, #4]
    1950:	add	sp, sp, #24
    1954:	bx	lr
    1958:	.word	0x000002aa
    195c:	.word	0x000003d7
    1960:	.word	0x00000240
    1964:	.word	0x0000011a
    1968:	.word	0x000001b8
    196c:	.word	0x00000706

00001970 <reflection_Field_id>:
    1970:	mov	ip, sp
    1974:	sub	sp, sp, #24
    1978:	str	ip, [sp]
    197c:	str	lr, [sp, #4]
    1980:	str	r4, [sp, #8]
    1984:	str	r5, [sp, #12]
    1988:	str	r6, [sp, #16]
    198c:	str	r7, [sp, #20]
    1990:	mov	r4, r0
    1994:	mov	r5, #0
    1998:	cmp	r4, #0
    199c:	beq	19b4 <reflection_Field_id+0x44>
    19a0:	ldr	r2, [pc, #176]	; 1a58 <reflection_Field_id+0xe8>
    19a4:	cmp	r2, #0
    19a8:	movne	ip, #1
    19ac:	moveq	ip, #0
    19b0:	b	19b8 <reflection_Field_id+0x48>
    19b4:	mov	ip, #0
    19b8:	cmp	ip, #0
    19bc:	bne	19d4 <reflection_Field_id+0x64>
    19c0:	ldr	r0, [pc, #140]	; 1a54 <reflection_Field_id+0xe4>
    19c4:	ldr	r1, [pc, #132]	; 1a50 <reflection_Field_id+0xe0>
    19c8:	mov	r2, #202	; 0xca
    19cc:	ldr	r3, [pc, #120]	; 1a4c <reflection_Field_id+0xdc>
    19d0:	bl	0 <__assert_fail>
    19d4:	mov	r7, #2
    19d8:	mov	r0, r4
    19dc:	bl	338 <__flatbuffers_soffset_read_from_pe>
    19e0:	sub	r6, r4, r0
    19e4:	mov	r0, r6
    19e8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    19ec:	lsl	r1, r7, #1
    19f0:	add	r1, r1, #6
    19f4:	cmp	r0, r1
    19f8:	bcc	1a10 <reflection_Field_id+0xa0>
    19fc:	add	r0, r6, r7, lsl #1
    1a00:	add	r0, r0, #4
    1a04:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1a08:	bic	r5, r0, #16711680	; 0xff0000
    1a0c:	bic	r5, r5, #-16777216	; 0xff000000
    1a10:	cmp	r5, #0
    1a14:	beq	1a24 <reflection_Field_id+0xb4>
    1a18:	add	r0, r4, r5
    1a1c:	bl	17c <flatbuffers_uint16_read_from_pe>
    1a20:	b	1a28 <reflection_Field_id+0xb8>
    1a24:	mov	r0, #0
    1a28:	bic	r0, r0, #16711680	; 0xff0000
    1a2c:	bic	r0, r0, #-16777216	; 0xff000000
    1a30:	ldr	r4, [sp, #8]
    1a34:	ldr	r5, [sp, #12]
    1a38:	ldr	r6, [sp, #16]
    1a3c:	ldr	r7, [sp, #20]
    1a40:	ldr	lr, [sp, #4]
    1a44:	add	sp, sp, #24
    1a48:	bx	lr
    1a4c:	.word	0x0000071c
    1a50:	.word	0x000002aa
    1a54:	.word	0x0000011a
    1a58:	.word	0x000001b8

00001a5c <reflection_Field_id_is_present>:
    1a5c:	mov	ip, sp
    1a60:	sub	sp, sp, #24
    1a64:	str	ip, [sp]
    1a68:	str	lr, [sp, #4]
    1a6c:	str	r4, [sp, #8]
    1a70:	str	r5, [sp, #12]
    1a74:	str	r6, [sp, #16]
    1a78:	mov	r4, r0
    1a7c:	mov	r5, #0
    1a80:	cmp	r4, #0
    1a84:	beq	1a9c <reflection_Field_id_is_present+0x40>
    1a88:	ldr	r3, [pc, #152]	; 1b28 <reflection_Field_id_is_present+0xcc>
    1a8c:	cmp	r3, #0
    1a90:	movne	r1, #1
    1a94:	moveq	r1, #0
    1a98:	b	1aa0 <reflection_Field_id_is_present+0x44>
    1a9c:	mov	r1, #0
    1aa0:	cmp	r1, #0
    1aa4:	bne	1abc <reflection_Field_id_is_present+0x60>
    1aa8:	ldr	r0, [pc, #116]	; 1b24 <reflection_Field_id_is_present+0xc8>
    1aac:	ldr	r1, [pc, #104]	; 1b1c <reflection_Field_id_is_present+0xc0>
    1ab0:	mov	r2, #202	; 0xca
    1ab4:	ldr	r3, [pc, #100]	; 1b20 <reflection_Field_id_is_present+0xc4>
    1ab8:	bl	0 <__assert_fail>
    1abc:	mov	r6, #2
    1ac0:	mov	r0, r4
    1ac4:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1ac8:	sub	r4, r4, r0
    1acc:	mov	r0, r4
    1ad0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1ad4:	lsl	r1, r6, #1
    1ad8:	add	ip, r1, #6
    1adc:	cmp	r0, ip
    1ae0:	bcc	1af8 <reflection_Field_id_is_present+0x9c>
    1ae4:	add	r0, r4, r6, lsl #1
    1ae8:	add	r0, r0, #4
    1aec:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1af0:	bic	r5, r0, #16711680	; 0xff0000
    1af4:	bic	r5, r5, #-16777216	; 0xff000000
    1af8:	cmp	r5, #0
    1afc:	movne	r0, #1
    1b00:	moveq	r0, #0
    1b04:	ldr	r4, [sp, #8]
    1b08:	ldr	r5, [sp, #12]
    1b0c:	ldr	r6, [sp, #16]
    1b10:	ldr	lr, [sp, #4]
    1b14:	add	sp, sp, #24
    1b18:	bx	lr
    1b1c:	.word	0x000002aa
    1b20:	.word	0x00000730
    1b24:	.word	0x0000011a
    1b28:	.word	0x000001b8

00001b2c <reflection_Field_default_integer>:
    1b2c:	mov	ip, sp
    1b30:	sub	sp, sp, #24
    1b34:	str	ip, [sp]
    1b38:	str	lr, [sp, #4]
    1b3c:	str	r4, [sp, #8]
    1b40:	str	r5, [sp, #12]
    1b44:	str	r6, [sp, #16]
    1b48:	str	r7, [sp, #20]
    1b4c:	mov	r4, r0
    1b50:	mov	r6, #0
    1b54:	cmp	r4, #0
    1b58:	beq	1b70 <reflection_Field_default_integer+0x44>
    1b5c:	ldr	r0, [pc, #172]	; 1c10 <reflection_Field_default_integer+0xe4>
    1b60:	cmp	r0, #0
    1b64:	movne	r1, #1
    1b68:	moveq	r1, #0
    1b6c:	b	1b74 <reflection_Field_default_integer+0x48>
    1b70:	mov	r1, #0
    1b74:	cmp	r1, #0
    1b78:	bne	1b90 <reflection_Field_default_integer+0x64>
    1b7c:	ldr	r0, [pc, #136]	; 1c0c <reflection_Field_default_integer+0xe0>
    1b80:	ldr	r1, [pc, #128]	; 1c08 <reflection_Field_default_integer+0xdc>
    1b84:	mov	r2, #204	; 0xcc
    1b88:	ldr	r3, [pc, #116]	; 1c04 <reflection_Field_default_integer+0xd8>
    1b8c:	bl	0 <__assert_fail>
    1b90:	mov	r7, #4
    1b94:	mov	r0, r4
    1b98:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1b9c:	sub	r5, r4, r0
    1ba0:	mov	r0, r5
    1ba4:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1ba8:	lsl	ip, r7, #1
    1bac:	add	r3, ip, #6
    1bb0:	cmp	r0, r3
    1bb4:	bcc	1bcc <reflection_Field_default_integer+0xa0>
    1bb8:	add	r0, r5, r7, lsl #1
    1bbc:	add	r0, r0, #4
    1bc0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1bc4:	bic	r6, r0, #16711680	; 0xff0000
    1bc8:	bic	r6, r6, #-16777216	; 0xff000000
    1bcc:	cmp	r6, #0
    1bd0:	beq	1be0 <reflection_Field_default_integer+0xb4>
    1bd4:	add	r0, r4, r6
    1bd8:	bl	20c <flatbuffers_int64_read_from_pe>
    1bdc:	b	1be8 <reflection_Field_default_integer+0xbc>
    1be0:	mov	r1, #0
    1be4:	mov	r0, #0
    1be8:	ldr	r4, [sp, #8]
    1bec:	ldr	r5, [sp, #12]
    1bf0:	ldr	r6, [sp, #16]
    1bf4:	ldr	r7, [sp, #20]
    1bf8:	ldr	lr, [sp, #4]
    1bfc:	add	sp, sp, #24
    1c00:	bx	lr
    1c04:	.word	0x0000074f
    1c08:	.word	0x000002aa
    1c0c:	.word	0x0000011a
    1c10:	.word	0x000001b8

00001c14 <reflection_Field_default_integer_is_present>:
    1c14:	mov	ip, sp
    1c18:	sub	sp, sp, #24
    1c1c:	str	ip, [sp]
    1c20:	str	lr, [sp, #4]
    1c24:	str	r4, [sp, #8]
    1c28:	str	r5, [sp, #12]
    1c2c:	str	r6, [sp, #16]
    1c30:	mov	r4, r0
    1c34:	mov	r5, #0
    1c38:	cmp	r4, #0
    1c3c:	beq	1c54 <reflection_Field_default_integer_is_present+0x40>
    1c40:	ldr	r3, [pc, #152]	; 1ce0 <reflection_Field_default_integer_is_present+0xcc>
    1c44:	cmp	r3, #0
    1c48:	movne	r1, #1
    1c4c:	moveq	r1, #0
    1c50:	b	1c58 <reflection_Field_default_integer_is_present+0x44>
    1c54:	mov	r1, #0
    1c58:	cmp	r1, #0
    1c5c:	bne	1c74 <reflection_Field_default_integer_is_present+0x60>
    1c60:	ldr	r0, [pc, #116]	; 1cdc <reflection_Field_default_integer_is_present+0xc8>
    1c64:	ldr	r1, [pc, #108]	; 1cd8 <reflection_Field_default_integer_is_present+0xc4>
    1c68:	mov	r2, #204	; 0xcc
    1c6c:	ldr	r3, [pc, #96]	; 1cd4 <reflection_Field_default_integer_is_present+0xc0>
    1c70:	bl	0 <__assert_fail>
    1c74:	mov	r6, #4
    1c78:	mov	r0, r4
    1c7c:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1c80:	sub	r4, r4, r0
    1c84:	mov	r0, r4
    1c88:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1c8c:	lsl	r1, r6, #1
    1c90:	add	ip, r1, #6
    1c94:	cmp	r0, ip
    1c98:	bcc	1cb0 <reflection_Field_default_integer_is_present+0x9c>
    1c9c:	add	r0, r4, r6, lsl #1
    1ca0:	add	r0, r0, #4
    1ca4:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1ca8:	bic	r5, r0, #16711680	; 0xff0000
    1cac:	bic	r5, r5, #-16777216	; 0xff000000
    1cb0:	cmp	r5, #0
    1cb4:	movne	r0, #1
    1cb8:	moveq	r0, #0
    1cbc:	ldr	r4, [sp, #8]
    1cc0:	ldr	r5, [sp, #12]
    1cc4:	ldr	r6, [sp, #16]
    1cc8:	ldr	lr, [sp, #4]
    1ccc:	add	sp, sp, #24
    1cd0:	bx	lr
    1cd4:	.word	0x00000770
    1cd8:	.word	0x000002aa
    1cdc:	.word	0x0000011a
    1ce0:	.word	0x000001b8

00001ce4 <reflection_Field_default_real>:
    1ce4:	mov	ip, sp
    1ce8:	sub	sp, sp, #24
    1cec:	str	ip, [sp]
    1cf0:	str	lr, [sp, #4]
    1cf4:	str	r4, [sp, #8]
    1cf8:	str	r5, [sp, #12]
    1cfc:	str	r6, [sp, #16]
    1d00:	str	r7, [sp, #20]
    1d04:	mov	r4, r0
    1d08:	mov	r5, #0
    1d0c:	cmp	r4, #0
    1d10:	beq	1d28 <reflection_Field_default_real+0x44>
    1d14:	ldr	r2, [pc, #164]	; 1dc0 <reflection_Field_default_real+0xdc>
    1d18:	cmp	r2, #0
    1d1c:	movne	ip, #1
    1d20:	moveq	ip, #0
    1d24:	b	1d2c <reflection_Field_default_real+0x48>
    1d28:	mov	ip, #0
    1d2c:	cmp	ip, #0
    1d30:	bne	1d48 <reflection_Field_default_real+0x64>
    1d34:	ldr	r0, [pc, #128]	; 1dbc <reflection_Field_default_real+0xd8>
    1d38:	ldr	r1, [pc, #120]	; 1db8 <reflection_Field_default_real+0xd4>
    1d3c:	mov	r2, #205	; 0xcd
    1d40:	ldr	r3, [pc, #124]	; 1dc4 <reflection_Field_default_real+0xe0>
    1d44:	bl	0 <__assert_fail>
    1d48:	mov	r7, #5
    1d4c:	mov	r0, r4
    1d50:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1d54:	sub	r6, r4, r0
    1d58:	mov	r0, r6
    1d5c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1d60:	lsl	r1, r7, #1
    1d64:	add	r1, r1, #6
    1d68:	cmp	r0, r1
    1d6c:	bcc	1d84 <reflection_Field_default_real+0xa0>
    1d70:	add	r0, r6, r7, lsl #1
    1d74:	add	r0, r0, #4
    1d78:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1d7c:	bic	r5, r0, #16711680	; 0xff0000
    1d80:	bic	r5, r5, #-16777216	; 0xff000000
    1d84:	cmp	r5, #0
    1d88:	beq	1d98 <reflection_Field_default_real+0xb4>
    1d8c:	add	r0, r4, r5
    1d90:	bl	26c <flatbuffers_double_read_from_pe>
    1d94:	b	1d9c <reflection_Field_default_real+0xb8>
    1d98:	vldr	d0, [pc, #40]	; 1dc8 <reflection_Field_default_real+0xe4>
    1d9c:	ldr	r4, [sp, #8]
    1da0:	ldr	r5, [sp, #12]
    1da4:	ldr	r6, [sp, #16]
    1da8:	ldr	r7, [sp, #20]
    1dac:	ldr	lr, [sp, #4]
    1db0:	add	sp, sp, #24
    1db4:	bx	lr
    1db8:	.word	0x000002aa
    1dbc:	.word	0x0000011a
    1dc0:	.word	0x000001b8
    1dc4:	.word	0x0000079c
	...

00001dd0 <reflection_Field_default_real_is_present>:
    1dd0:	mov	ip, sp
    1dd4:	sub	sp, sp, #24
    1dd8:	str	ip, [sp]
    1ddc:	str	lr, [sp, #4]
    1de0:	str	r4, [sp, #8]
    1de4:	str	r5, [sp, #12]
    1de8:	str	r6, [sp, #16]
    1dec:	mov	r4, r0
    1df0:	mov	r5, #0
    1df4:	cmp	r4, #0
    1df8:	beq	1e10 <reflection_Field_default_real_is_present+0x40>
    1dfc:	ldr	r3, [pc, #152]	; 1e9c <reflection_Field_default_real_is_present+0xcc>
    1e00:	cmp	r3, #0
    1e04:	movne	r1, #1
    1e08:	moveq	r1, #0
    1e0c:	b	1e14 <reflection_Field_default_real_is_present+0x44>
    1e10:	mov	r1, #0
    1e14:	cmp	r1, #0
    1e18:	bne	1e30 <reflection_Field_default_real_is_present+0x60>
    1e1c:	ldr	r0, [pc, #116]	; 1e98 <reflection_Field_default_real_is_present+0xc8>
    1e20:	ldr	r1, [pc, #108]	; 1e94 <reflection_Field_default_real_is_present+0xc4>
    1e24:	mov	r2, #205	; 0xcd
    1e28:	ldr	r3, [pc, #96]	; 1e90 <reflection_Field_default_real_is_present+0xc0>
    1e2c:	bl	0 <__assert_fail>
    1e30:	mov	r6, #5
    1e34:	mov	r0, r4
    1e38:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1e3c:	sub	r4, r4, r0
    1e40:	mov	r0, r4
    1e44:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1e48:	lsl	r1, r6, #1
    1e4c:	add	ip, r1, #6
    1e50:	cmp	r0, ip
    1e54:	bcc	1e6c <reflection_Field_default_real_is_present+0x9c>
    1e58:	add	r0, r4, r6, lsl #1
    1e5c:	add	r0, r0, #4
    1e60:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1e64:	bic	r5, r0, #16711680	; 0xff0000
    1e68:	bic	r5, r5, #-16777216	; 0xff000000
    1e6c:	cmp	r5, #0
    1e70:	movne	r0, #1
    1e74:	moveq	r0, #0
    1e78:	ldr	r4, [sp, #8]
    1e7c:	ldr	r5, [sp, #12]
    1e80:	ldr	r6, [sp, #16]
    1e84:	ldr	lr, [sp, #4]
    1e88:	add	sp, sp, #24
    1e8c:	bx	lr
    1e90:	.word	0x000007ba
    1e94:	.word	0x000002aa
    1e98:	.word	0x0000011a
    1e9c:	.word	0x000001b8

00001ea0 <reflection_Field_required>:
    1ea0:	mov	ip, sp
    1ea4:	sub	sp, sp, #24
    1ea8:	str	ip, [sp]
    1eac:	str	lr, [sp, #4]
    1eb0:	str	r4, [sp, #8]
    1eb4:	str	r5, [sp, #12]
    1eb8:	str	r6, [sp, #16]
    1ebc:	str	r7, [sp, #20]
    1ec0:	mov	r4, r0
    1ec4:	mov	r5, #0
    1ec8:	cmp	r4, #0
    1ecc:	beq	1ee4 <reflection_Field_required+0x44>
    1ed0:	ldr	r2, [pc, #172]	; 1f84 <reflection_Field_required+0xe4>
    1ed4:	cmp	r2, #0
    1ed8:	movne	ip, #1
    1edc:	moveq	ip, #0
    1ee0:	b	1ee8 <reflection_Field_required+0x48>
    1ee4:	mov	ip, #0
    1ee8:	cmp	ip, #0
    1eec:	bne	1f04 <reflection_Field_required+0x64>
    1ef0:	ldr	r0, [pc, #136]	; 1f80 <reflection_Field_required+0xe0>
    1ef4:	ldr	r1, [pc, #124]	; 1f78 <reflection_Field_required+0xd8>
    1ef8:	mov	r2, #207	; 0xcf
    1efc:	ldr	r3, [pc, #120]	; 1f7c <reflection_Field_required+0xdc>
    1f00:	bl	0 <__assert_fail>
    1f04:	mov	r7, #7
    1f08:	mov	r0, r4
    1f0c:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1f10:	sub	r6, r4, r0
    1f14:	mov	r0, r6
    1f18:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1f1c:	lsl	r1, r7, #1
    1f20:	add	r1, r1, #6
    1f24:	cmp	r0, r1
    1f28:	bcc	1f40 <reflection_Field_required+0xa0>
    1f2c:	add	r0, r6, r7, lsl #1
    1f30:	add	r0, r0, #4
    1f34:	bl	380 <__flatbuffers_voffset_read_from_pe>
    1f38:	bic	r5, r0, #16711680	; 0xff0000
    1f3c:	bic	r5, r5, #-16777216	; 0xff000000
    1f40:	cmp	r5, #0
    1f44:	beq	1f54 <reflection_Field_required+0xb4>
    1f48:	add	r0, r4, r5
    1f4c:	bl	2b0 <flatbuffers_bool_read_from_pe>
    1f50:	b	1f58 <reflection_Field_required+0xb8>
    1f54:	mov	r0, #0
    1f58:	and	r0, r0, #255	; 0xff
    1f5c:	ldr	r4, [sp, #8]
    1f60:	ldr	r5, [sp, #12]
    1f64:	ldr	r6, [sp, #16]
    1f68:	ldr	r7, [sp, #20]
    1f6c:	ldr	lr, [sp, #4]
    1f70:	add	sp, sp, #24
    1f74:	bx	lr
    1f78:	.word	0x000002aa
    1f7c:	.word	0x000007e3
    1f80:	.word	0x0000011a
    1f84:	.word	0x000001b8

00001f88 <reflection_Field_required_is_present>:
    1f88:	mov	ip, sp
    1f8c:	sub	sp, sp, #24
    1f90:	str	ip, [sp]
    1f94:	str	lr, [sp, #4]
    1f98:	str	r4, [sp, #8]
    1f9c:	str	r5, [sp, #12]
    1fa0:	str	r6, [sp, #16]
    1fa4:	mov	r4, r0
    1fa8:	mov	r5, #0
    1fac:	cmp	r4, #0
    1fb0:	beq	1fc8 <reflection_Field_required_is_present+0x40>
    1fb4:	ldr	r3, [pc, #152]	; 2054 <reflection_Field_required_is_present+0xcc>
    1fb8:	cmp	r3, #0
    1fbc:	movne	r1, #1
    1fc0:	moveq	r1, #0
    1fc4:	b	1fcc <reflection_Field_required_is_present+0x44>
    1fc8:	mov	r1, #0
    1fcc:	cmp	r1, #0
    1fd0:	bne	1fe8 <reflection_Field_required_is_present+0x60>
    1fd4:	ldr	r0, [pc, #116]	; 2050 <reflection_Field_required_is_present+0xc8>
    1fd8:	ldr	r1, [pc, #104]	; 2048 <reflection_Field_required_is_present+0xc0>
    1fdc:	mov	r2, #207	; 0xcf
    1fe0:	ldr	r3, [pc, #100]	; 204c <reflection_Field_required_is_present+0xc4>
    1fe4:	bl	0 <__assert_fail>
    1fe8:	mov	r6, #7
    1fec:	mov	r0, r4
    1ff0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    1ff4:	sub	r4, r4, r0
    1ff8:	mov	r0, r4
    1ffc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2000:	lsl	r1, r6, #1
    2004:	add	ip, r1, #6
    2008:	cmp	r0, ip
    200c:	bcc	2024 <reflection_Field_required_is_present+0x9c>
    2010:	add	r0, r4, r6, lsl #1
    2014:	add	r0, r0, #4
    2018:	bl	380 <__flatbuffers_voffset_read_from_pe>
    201c:	bic	r5, r0, #16711680	; 0xff0000
    2020:	bic	r5, r5, #-16777216	; 0xff000000
    2024:	cmp	r5, #0
    2028:	movne	r0, #1
    202c:	moveq	r0, #0
    2030:	ldr	r4, [sp, #8]
    2034:	ldr	r5, [sp, #12]
    2038:	ldr	r6, [sp, #16]
    203c:	ldr	lr, [sp, #4]
    2040:	add	sp, sp, #24
    2044:	bx	lr
    2048:	.word	0x000002aa
    204c:	.word	0x000007fd
    2050:	.word	0x0000011a
    2054:	.word	0x000001b8

00002058 <reflection_Field_key>:
    2058:	mov	ip, sp
    205c:	sub	sp, sp, #24
    2060:	str	ip, [sp]
    2064:	str	lr, [sp, #4]
    2068:	str	r4, [sp, #8]
    206c:	str	r5, [sp, #12]
    2070:	str	r6, [sp, #16]
    2074:	str	r7, [sp, #20]
    2078:	mov	r4, r0
    207c:	mov	r5, #0
    2080:	cmp	r4, #0
    2084:	beq	209c <reflection_Field_key+0x44>
    2088:	ldr	r2, [pc, #168]	; 2138 <reflection_Field_key+0xe0>
    208c:	cmp	r2, #0
    2090:	movne	ip, #1
    2094:	moveq	ip, #0
    2098:	b	20a0 <reflection_Field_key+0x48>
    209c:	mov	ip, #0
    20a0:	cmp	ip, #0
    20a4:	bne	20bc <reflection_Field_key+0x64>
    20a8:	ldr	r0, [pc, #132]	; 2134 <reflection_Field_key+0xdc>
    20ac:	ldr	r1, [pc, #124]	; 2130 <reflection_Field_key+0xd8>
    20b0:	mov	r2, #208	; 0xd0
    20b4:	ldr	r3, [pc, #128]	; 213c <reflection_Field_key+0xe4>
    20b8:	bl	0 <__assert_fail>
    20bc:	mov	r7, #8
    20c0:	mov	r0, r4
    20c4:	bl	338 <__flatbuffers_soffset_read_from_pe>
    20c8:	sub	r6, r4, r0
    20cc:	mov	r0, r6
    20d0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    20d4:	lsl	r1, r7, #1
    20d8:	add	r1, r1, #6
    20dc:	cmp	r0, r1
    20e0:	bcc	20f8 <reflection_Field_key+0xa0>
    20e4:	add	r0, r6, r7, lsl #1
    20e8:	add	r0, r0, #4
    20ec:	bl	380 <__flatbuffers_voffset_read_from_pe>
    20f0:	bic	r5, r0, #16711680	; 0xff0000
    20f4:	bic	r5, r5, #-16777216	; 0xff000000
    20f8:	cmp	r5, #0
    20fc:	beq	210c <reflection_Field_key+0xb4>
    2100:	add	r0, r4, r5
    2104:	bl	2b0 <flatbuffers_bool_read_from_pe>
    2108:	b	2110 <reflection_Field_key+0xb8>
    210c:	mov	r0, #0
    2110:	and	r0, r0, #255	; 0xff
    2114:	ldr	r4, [sp, #8]
    2118:	ldr	r5, [sp, #12]
    211c:	ldr	r6, [sp, #16]
    2120:	ldr	r7, [sp, #20]
    2124:	ldr	lr, [sp, #4]
    2128:	add	sp, sp, #24
    212c:	bx	lr
    2130:	.word	0x000002aa
    2134:	.word	0x0000011a
    2138:	.word	0x000001b8
    213c:	.word	0x00000822

00002140 <reflection_Field_key_is_present>:
    2140:	mov	ip, sp
    2144:	sub	sp, sp, #24
    2148:	str	ip, [sp]
    214c:	str	lr, [sp, #4]
    2150:	str	r4, [sp, #8]
    2154:	str	r5, [sp, #12]
    2158:	str	r6, [sp, #16]
    215c:	mov	r4, r0
    2160:	mov	r5, #0
    2164:	cmp	r4, #0
    2168:	beq	2180 <reflection_Field_key_is_present+0x40>
    216c:	ldr	r3, [pc, #148]	; 2208 <reflection_Field_key_is_present+0xc8>
    2170:	cmp	r3, #0
    2174:	movne	r1, #1
    2178:	moveq	r1, #0
    217c:	b	2184 <reflection_Field_key_is_present+0x44>
    2180:	mov	r1, #0
    2184:	cmp	r1, #0
    2188:	bne	21a0 <reflection_Field_key_is_present+0x60>
    218c:	ldr	r0, [pc, #112]	; 2204 <reflection_Field_key_is_present+0xc4>
    2190:	ldr	r1, [pc, #104]	; 2200 <reflection_Field_key_is_present+0xc0>
    2194:	mov	r2, #208	; 0xd0
    2198:	ldr	r3, [pc, #108]	; 220c <reflection_Field_key_is_present+0xcc>
    219c:	bl	0 <__assert_fail>
    21a0:	mov	r6, #8
    21a4:	mov	r0, r4
    21a8:	bl	338 <__flatbuffers_soffset_read_from_pe>
    21ac:	sub	r4, r4, r0
    21b0:	mov	r0, r4
    21b4:	bl	380 <__flatbuffers_voffset_read_from_pe>
    21b8:	lsl	r1, r6, #1
    21bc:	add	ip, r1, #6
    21c0:	cmp	r0, ip
    21c4:	bcc	21dc <reflection_Field_key_is_present+0x9c>
    21c8:	add	r0, r4, r6, lsl #1
    21cc:	add	r0, r0, #4
    21d0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    21d4:	bic	r5, r0, #16711680	; 0xff0000
    21d8:	bic	r5, r5, #-16777216	; 0xff000000
    21dc:	cmp	r5, #0
    21e0:	movne	r0, #1
    21e4:	moveq	r0, #0
    21e8:	ldr	r4, [sp, #8]
    21ec:	ldr	r5, [sp, #12]
    21f0:	ldr	r6, [sp, #16]
    21f4:	ldr	lr, [sp, #4]
    21f8:	add	sp, sp, #24
    21fc:	bx	lr
    2200:	.word	0x000002aa
    2204:	.word	0x0000011a
    2208:	.word	0x000001b8
    220c:	.word	0x00000837

00002210 <reflection_Object_vec_len>:
    2210:	mov	ip, sp
    2214:	sub	sp, sp, #8
    2218:	str	ip, [sp]
    221c:	str	lr, [sp, #4]
    2220:	cmp	r0, #0
    2224:	beq	2234 <reflection_Object_vec_len+0x24>
    2228:	sub	r0, r0, #4
    222c:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2230:	b	2238 <reflection_Object_vec_len+0x28>
    2234:	mov	r0, #0
    2238:	ldr	lr, [sp, #4]
    223c:	add	sp, sp, #8
    2240:	bx	lr

00002244 <reflection_Object_vec_at>:
    2244:	mov	ip, sp
    2248:	sub	sp, sp, #16
    224c:	str	ip, [sp]
    2250:	str	lr, [sp, #4]
    2254:	str	r4, [sp, #8]
    2258:	str	r5, [sp, #12]
    225c:	mov	r4, r1
    2260:	add	r5, r0, r4, lsl #2
    2264:	bl	410 <flatbuffers_vec_len>
    2268:	cmp	r0, r4
    226c:	bls	2284 <reflection_Object_vec_at+0x40>
    2270:	ldr	r3, [pc, #88]	; 22d0 <reflection_Object_vec_at+0x8c>
    2274:	cmp	r3, #0
    2278:	movne	r1, #1
    227c:	moveq	r1, #0
    2280:	b	2288 <reflection_Object_vec_at+0x44>
    2284:	mov	r1, #0
    2288:	cmp	r1, #0
    228c:	bne	22a4 <reflection_Object_vec_at+0x60>
    2290:	ldr	r0, [pc, #44]	; 22c4 <reflection_Object_vec_at+0x80>
    2294:	ldr	r1, [pc, #48]	; 22cc <reflection_Object_vec_at+0x88>
    2298:	mov	r2, #215	; 0xd7
    229c:	ldr	r3, [pc, #36]	; 22c8 <reflection_Object_vec_at+0x84>
    22a0:	bl	0 <__assert_fail>
    22a4:	mov	r0, r5
    22a8:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    22ac:	add	r0, r5, r0
    22b0:	ldr	r4, [sp, #8]
    22b4:	ldr	r5, [sp, #12]
    22b8:	ldr	lr, [sp, #4]
    22bc:	add	sp, sp, #16
    22c0:	bx	lr
    22c4:	.word	0x0000043e
    22c8:	.word	0x00000857
    22cc:	.word	0x000002aa
    22d0:	.word	0x00000140

000022d4 <reflection_Object_name>:
    22d4:	mov	ip, sp
    22d8:	sub	sp, sp, #24
    22dc:	str	ip, [sp]
    22e0:	str	lr, [sp, #4]
    22e4:	str	r4, [sp, #8]
    22e8:	str	r5, [sp, #12]
    22ec:	str	r6, [sp, #16]
    22f0:	str	r7, [sp, #20]
    22f4:	mov	r4, r0
    22f8:	mov	r6, #0
    22fc:	cmp	r4, #0
    2300:	beq	2318 <reflection_Object_name+0x44>
    2304:	ldr	r1, [pc, #252]	; 2408 <reflection_Object_name+0x134>
    2308:	cmp	r1, #0
    230c:	movne	r0, #1
    2310:	moveq	r0, #0
    2314:	b	231c <reflection_Object_name+0x48>
    2318:	mov	r0, #0
    231c:	cmp	r0, #0
    2320:	bne	2338 <reflection_Object_name+0x64>
    2324:	ldr	r0, [pc, #216]	; 2404 <reflection_Object_name+0x130>
    2328:	ldr	r1, [pc, #200]	; 23f8 <reflection_Object_name+0x124>
    232c:	mov	r2, #218	; 0xda
    2330:	ldr	r3, [pc, #188]	; 23f4 <reflection_Object_name+0x120>
    2334:	bl	0 <__assert_fail>
    2338:	mov	r7, #0
    233c:	mov	r0, r4
    2340:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2344:	sub	r5, r4, r0
    2348:	mov	r0, r5
    234c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2350:	lsl	r3, r7, #1
    2354:	add	r1, r3, #6
    2358:	cmp	r0, r1
    235c:	bcc	2374 <reflection_Object_name+0xa0>
    2360:	add	r1, r5, r7, lsl #1
    2364:	add	r0, r1, #4
    2368:	bl	380 <__flatbuffers_voffset_read_from_pe>
    236c:	bic	r6, r0, #16711680	; 0xff0000
    2370:	bic	r6, r6, #-16777216	; 0xff000000
    2374:	cmp	r6, #0
    2378:	beq	2394 <reflection_Object_name+0xc0>
    237c:	add	r4, r4, r6
    2380:	mov	r0, r4
    2384:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2388:	add	r0, r4, r0
    238c:	add	r0, r0, #4
    2390:	b	23d8 <reflection_Object_name+0x104>
    2394:	mov	r0, #0
    2398:	cmp	r0, #0
    239c:	beq	23b4 <reflection_Object_name+0xe0>
    23a0:	ldr	r0, [pc, #84]	; 23fc <reflection_Object_name+0x128>
    23a4:	cmp	r0, #0
    23a8:	movne	r0, #1
    23ac:	moveq	r0, #0
    23b0:	b	23b8 <reflection_Object_name+0xe4>
    23b4:	mov	r0, #0
    23b8:	cmp	r0, #0
    23bc:	bne	23d4 <reflection_Object_name+0x100>
    23c0:	ldr	r0, [pc, #56]	; 2400 <reflection_Object_name+0x12c>
    23c4:	ldr	r1, [pc, #44]	; 23f8 <reflection_Object_name+0x124>
    23c8:	mov	r2, #218	; 0xda
    23cc:	ldr	r3, [pc, #32]	; 23f4 <reflection_Object_name+0x120>
    23d0:	bl	0 <__assert_fail>
    23d4:	mov	r0, #0
    23d8:	ldr	r4, [sp, #8]
    23dc:	ldr	r5, [sp, #12]
    23e0:	ldr	r6, [sp, #16]
    23e4:	ldr	r7, [sp, #20]
    23e8:	ldr	lr, [sp, #4]
    23ec:	add	sp, sp, #24
    23f0:	bx	lr
    23f4:	.word	0x00000870
    23f8:	.word	0x000002aa
    23fc:	.word	0x000003d7
    2400:	.word	0x00000240
    2404:	.word	0x0000011a
    2408:	.word	0x000001b8

0000240c <reflection_Object_fields>:
    240c:	mov	ip, sp
    2410:	sub	sp, sp, #24
    2414:	str	ip, [sp]
    2418:	str	lr, [sp, #4]
    241c:	str	r4, [sp, #8]
    2420:	str	r5, [sp, #12]
    2424:	str	r6, [sp, #16]
    2428:	str	r7, [sp, #20]
    242c:	mov	r4, r0
    2430:	mov	r6, #0
    2434:	cmp	r4, #0
    2438:	beq	2450 <reflection_Object_fields+0x44>
    243c:	ldr	r1, [pc, #252]	; 2540 <reflection_Object_fields+0x134>
    2440:	cmp	r1, #0
    2444:	movne	r0, #1
    2448:	moveq	r0, #0
    244c:	b	2454 <reflection_Object_fields+0x48>
    2450:	mov	r0, #0
    2454:	cmp	r0, #0
    2458:	bne	2470 <reflection_Object_fields+0x64>
    245c:	ldr	r0, [pc, #216]	; 253c <reflection_Object_fields+0x130>
    2460:	ldr	r1, [pc, #196]	; 252c <reflection_Object_fields+0x120>
    2464:	mov	r2, #224	; 0xe0
    2468:	ldr	r3, [pc, #192]	; 2530 <reflection_Object_fields+0x124>
    246c:	bl	0 <__assert_fail>
    2470:	mov	r7, #1
    2474:	mov	r0, r4
    2478:	bl	338 <__flatbuffers_soffset_read_from_pe>
    247c:	sub	r5, r4, r0
    2480:	mov	r0, r5
    2484:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2488:	lsl	r3, r7, #1
    248c:	add	r1, r3, #6
    2490:	cmp	r0, r1
    2494:	bcc	24ac <reflection_Object_fields+0xa0>
    2498:	add	r1, r5, r7, lsl #1
    249c:	add	r0, r1, #4
    24a0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    24a4:	bic	r6, r0, #16711680	; 0xff0000
    24a8:	bic	r6, r6, #-16777216	; 0xff000000
    24ac:	cmp	r6, #0
    24b0:	beq	24cc <reflection_Object_fields+0xc0>
    24b4:	add	r4, r4, r6
    24b8:	mov	r0, r4
    24bc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    24c0:	add	r0, r4, r0
    24c4:	add	r0, r0, #4
    24c8:	b	2510 <reflection_Object_fields+0x104>
    24cc:	mov	r0, #0
    24d0:	cmp	r0, #0
    24d4:	beq	24ec <reflection_Object_fields+0xe0>
    24d8:	ldr	r0, [pc, #84]	; 2534 <reflection_Object_fields+0x128>
    24dc:	cmp	r0, #0
    24e0:	movne	r0, #1
    24e4:	moveq	r0, #0
    24e8:	b	24f0 <reflection_Object_fields+0xe4>
    24ec:	mov	r0, #0
    24f0:	cmp	r0, #0
    24f4:	bne	250c <reflection_Object_fields+0x100>
    24f8:	ldr	r0, [pc, #56]	; 2538 <reflection_Object_fields+0x12c>
    24fc:	ldr	r1, [pc, #40]	; 252c <reflection_Object_fields+0x120>
    2500:	mov	r2, #224	; 0xe0
    2504:	ldr	r3, [pc, #36]	; 2530 <reflection_Object_fields+0x124>
    2508:	bl	0 <__assert_fail>
    250c:	mov	r0, #0
    2510:	ldr	r4, [sp, #8]
    2514:	ldr	r5, [sp, #12]
    2518:	ldr	r6, [sp, #16]
    251c:	ldr	r7, [sp, #20]
    2520:	ldr	lr, [sp, #4]
    2524:	add	sp, sp, #24
    2528:	bx	lr
    252c:	.word	0x000002aa
    2530:	.word	0x00000887
    2534:	.word	0x000003d7
    2538:	.word	0x00000240
    253c:	.word	0x0000011a
    2540:	.word	0x000001b8

00002544 <reflection_Object_is_struct>:
    2544:	mov	ip, sp
    2548:	sub	sp, sp, #24
    254c:	str	ip, [sp]
    2550:	str	lr, [sp, #4]
    2554:	str	r4, [sp, #8]
    2558:	str	r5, [sp, #12]
    255c:	str	r6, [sp, #16]
    2560:	str	r7, [sp, #20]
    2564:	mov	r4, r0
    2568:	mov	r5, #0
    256c:	cmp	r4, #0
    2570:	beq	2588 <reflection_Object_is_struct+0x44>
    2574:	ldr	r2, [pc, #172]	; 2628 <reflection_Object_is_struct+0xe4>
    2578:	cmp	r2, #0
    257c:	movne	ip, #1
    2580:	moveq	ip, #0
    2584:	b	258c <reflection_Object_is_struct+0x48>
    2588:	mov	ip, #0
    258c:	cmp	ip, #0
    2590:	bne	25a8 <reflection_Object_is_struct+0x64>
    2594:	ldr	r0, [pc, #136]	; 2624 <reflection_Object_is_struct+0xe0>
    2598:	ldr	r1, [pc, #124]	; 261c <reflection_Object_is_struct+0xd8>
    259c:	mov	r2, #225	; 0xe1
    25a0:	ldr	r3, [pc, #120]	; 2620 <reflection_Object_is_struct+0xdc>
    25a4:	bl	0 <__assert_fail>
    25a8:	mov	r7, #2
    25ac:	mov	r0, r4
    25b0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    25b4:	sub	r6, r4, r0
    25b8:	mov	r0, r6
    25bc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    25c0:	lsl	r1, r7, #1
    25c4:	add	r1, r1, #6
    25c8:	cmp	r0, r1
    25cc:	bcc	25e4 <reflection_Object_is_struct+0xa0>
    25d0:	add	r0, r6, r7, lsl #1
    25d4:	add	r0, r0, #4
    25d8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    25dc:	bic	r5, r0, #16711680	; 0xff0000
    25e0:	bic	r5, r5, #-16777216	; 0xff000000
    25e4:	cmp	r5, #0
    25e8:	beq	25f8 <reflection_Object_is_struct+0xb4>
    25ec:	add	r0, r4, r5
    25f0:	bl	2b0 <flatbuffers_bool_read_from_pe>
    25f4:	b	25fc <reflection_Object_is_struct+0xb8>
    25f8:	mov	r0, #0
    25fc:	and	r0, r0, #255	; 0xff
    2600:	ldr	r4, [sp, #8]
    2604:	ldr	r5, [sp, #12]
    2608:	ldr	r6, [sp, #16]
    260c:	ldr	r7, [sp, #20]
    2610:	ldr	lr, [sp, #4]
    2614:	add	sp, sp, #24
    2618:	bx	lr
    261c:	.word	0x000002aa
    2620:	.word	0x000008a0
    2624:	.word	0x0000011a
    2628:	.word	0x000001b8

0000262c <reflection_Object_is_struct_is_present>:
    262c:	mov	ip, sp
    2630:	sub	sp, sp, #24
    2634:	str	ip, [sp]
    2638:	str	lr, [sp, #4]
    263c:	str	r4, [sp, #8]
    2640:	str	r5, [sp, #12]
    2644:	str	r6, [sp, #16]
    2648:	mov	r4, r0
    264c:	mov	r5, #0
    2650:	cmp	r4, #0
    2654:	beq	266c <reflection_Object_is_struct_is_present+0x40>
    2658:	ldr	r3, [pc, #148]	; 26f4 <reflection_Object_is_struct_is_present+0xc8>
    265c:	cmp	r3, #0
    2660:	movne	r1, #1
    2664:	moveq	r1, #0
    2668:	b	2670 <reflection_Object_is_struct_is_present+0x44>
    266c:	mov	r1, #0
    2670:	cmp	r1, #0
    2674:	bne	268c <reflection_Object_is_struct_is_present+0x60>
    2678:	ldr	r0, [pc, #112]	; 26f0 <reflection_Object_is_struct_is_present+0xc4>
    267c:	ldr	r1, [pc, #104]	; 26ec <reflection_Object_is_struct_is_present+0xc0>
    2680:	mov	r2, #225	; 0xe1
    2684:	ldr	r3, [pc, #108]	; 26f8 <reflection_Object_is_struct_is_present+0xcc>
    2688:	bl	0 <__assert_fail>
    268c:	mov	r6, #2
    2690:	mov	r0, r4
    2694:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2698:	sub	r4, r4, r0
    269c:	mov	r0, r4
    26a0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    26a4:	lsl	r1, r6, #1
    26a8:	add	ip, r1, #6
    26ac:	cmp	r0, ip
    26b0:	bcc	26c8 <reflection_Object_is_struct_is_present+0x9c>
    26b4:	add	r0, r4, r6, lsl #1
    26b8:	add	r0, r0, #4
    26bc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    26c0:	bic	r5, r0, #16711680	; 0xff0000
    26c4:	bic	r5, r5, #-16777216	; 0xff000000
    26c8:	cmp	r5, #0
    26cc:	movne	r0, #1
    26d0:	moveq	r0, #0
    26d4:	ldr	r4, [sp, #8]
    26d8:	ldr	r5, [sp, #12]
    26dc:	ldr	r6, [sp, #16]
    26e0:	ldr	lr, [sp, #4]
    26e4:	add	sp, sp, #24
    26e8:	bx	lr
    26ec:	.word	0x000002aa
    26f0:	.word	0x0000011a
    26f4:	.word	0x000001b8
    26f8:	.word	0x000008bc

000026fc <reflection_Object_minalign>:
    26fc:	mov	ip, sp
    2700:	sub	sp, sp, #24
    2704:	str	ip, [sp]
    2708:	str	lr, [sp, #4]
    270c:	str	r4, [sp, #8]
    2710:	str	r5, [sp, #12]
    2714:	str	r6, [sp, #16]
    2718:	str	r7, [sp, #20]
    271c:	mov	r4, r0
    2720:	mov	r5, #0
    2724:	cmp	r4, #0
    2728:	beq	2740 <reflection_Object_minalign+0x44>
    272c:	ldr	r2, [pc, #168]	; 27dc <reflection_Object_minalign+0xe0>
    2730:	cmp	r2, #0
    2734:	movne	ip, #1
    2738:	moveq	ip, #0
    273c:	b	2744 <reflection_Object_minalign+0x48>
    2740:	mov	ip, #0
    2744:	cmp	ip, #0
    2748:	bne	2760 <reflection_Object_minalign+0x64>
    274c:	ldr	r0, [pc, #132]	; 27d8 <reflection_Object_minalign+0xdc>
    2750:	ldr	r1, [pc, #120]	; 27d0 <reflection_Object_minalign+0xd4>
    2754:	mov	r2, #226	; 0xe2
    2758:	ldr	r3, [pc, #116]	; 27d4 <reflection_Object_minalign+0xd8>
    275c:	bl	0 <__assert_fail>
    2760:	mov	r7, #3
    2764:	mov	r0, r4
    2768:	bl	338 <__flatbuffers_soffset_read_from_pe>
    276c:	sub	r6, r4, r0
    2770:	mov	r0, r6
    2774:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2778:	lsl	r1, r7, #1
    277c:	add	r1, r1, #6
    2780:	cmp	r0, r1
    2784:	bcc	279c <reflection_Object_minalign+0xa0>
    2788:	add	r0, r6, r7, lsl #1
    278c:	add	r0, r0, #4
    2790:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2794:	bic	r5, r0, #16711680	; 0xff0000
    2798:	bic	r5, r5, #-16777216	; 0xff000000
    279c:	cmp	r5, #0
    27a0:	beq	27b0 <reflection_Object_minalign+0xb4>
    27a4:	add	r0, r4, r5
    27a8:	bl	1cc <flatbuffers_int32_read_from_pe>
    27ac:	b	27b4 <reflection_Object_minalign+0xb8>
    27b0:	mov	r0, #0
    27b4:	ldr	r4, [sp, #8]
    27b8:	ldr	r5, [sp, #12]
    27bc:	ldr	r6, [sp, #16]
    27c0:	ldr	r7, [sp, #20]
    27c4:	ldr	lr, [sp, #4]
    27c8:	add	sp, sp, #24
    27cc:	bx	lr
    27d0:	.word	0x000002aa
    27d4:	.word	0x000008e3
    27d8:	.word	0x0000011a
    27dc:	.word	0x000001b8

000027e0 <reflection_Object_minalign_is_present>:
    27e0:	mov	ip, sp
    27e4:	sub	sp, sp, #24
    27e8:	str	ip, [sp]
    27ec:	str	lr, [sp, #4]
    27f0:	str	r4, [sp, #8]
    27f4:	str	r5, [sp, #12]
    27f8:	str	r6, [sp, #16]
    27fc:	mov	r4, r0
    2800:	mov	r5, #0
    2804:	cmp	r4, #0
    2808:	beq	2820 <reflection_Object_minalign_is_present+0x40>
    280c:	ldr	r3, [pc, #152]	; 28ac <reflection_Object_minalign_is_present+0xcc>
    2810:	cmp	r3, #0
    2814:	movne	r1, #1
    2818:	moveq	r1, #0
    281c:	b	2824 <reflection_Object_minalign_is_present+0x44>
    2820:	mov	r1, #0
    2824:	cmp	r1, #0
    2828:	bne	2840 <reflection_Object_minalign_is_present+0x60>
    282c:	ldr	r0, [pc, #116]	; 28a8 <reflection_Object_minalign_is_present+0xc8>
    2830:	ldr	r1, [pc, #104]	; 28a0 <reflection_Object_minalign_is_present+0xc0>
    2834:	mov	r2, #226	; 0xe2
    2838:	ldr	r3, [pc, #100]	; 28a4 <reflection_Object_minalign_is_present+0xc4>
    283c:	bl	0 <__assert_fail>
    2840:	mov	r6, #3
    2844:	mov	r0, r4
    2848:	bl	338 <__flatbuffers_soffset_read_from_pe>
    284c:	sub	r4, r4, r0
    2850:	mov	r0, r4
    2854:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2858:	lsl	r1, r6, #1
    285c:	add	ip, r1, #6
    2860:	cmp	r0, ip
    2864:	bcc	287c <reflection_Object_minalign_is_present+0x9c>
    2868:	add	r0, r4, r6, lsl #1
    286c:	add	r0, r0, #4
    2870:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2874:	bic	r5, r0, #16711680	; 0xff0000
    2878:	bic	r5, r5, #-16777216	; 0xff000000
    287c:	cmp	r5, #0
    2880:	movne	r0, #1
    2884:	moveq	r0, #0
    2888:	ldr	r4, [sp, #8]
    288c:	ldr	r5, [sp, #12]
    2890:	ldr	r6, [sp, #16]
    2894:	ldr	lr, [sp, #4]
    2898:	add	sp, sp, #24
    289c:	bx	lr
    28a0:	.word	0x000002aa
    28a4:	.word	0x000008fe
    28a8:	.word	0x0000011a
    28ac:	.word	0x000001b8

000028b0 <reflection_Object_bytesize>:
    28b0:	mov	ip, sp
    28b4:	sub	sp, sp, #24
    28b8:	str	ip, [sp]
    28bc:	str	lr, [sp, #4]
    28c0:	str	r4, [sp, #8]
    28c4:	str	r5, [sp, #12]
    28c8:	str	r6, [sp, #16]
    28cc:	str	r7, [sp, #20]
    28d0:	mov	r4, r0
    28d4:	mov	r5, #0
    28d8:	cmp	r4, #0
    28dc:	beq	28f4 <reflection_Object_bytesize+0x44>
    28e0:	ldr	r2, [pc, #164]	; 298c <reflection_Object_bytesize+0xdc>
    28e4:	cmp	r2, #0
    28e8:	movne	ip, #1
    28ec:	moveq	ip, #0
    28f0:	b	28f8 <reflection_Object_bytesize+0x48>
    28f4:	mov	ip, #0
    28f8:	cmp	ip, #0
    28fc:	bne	2914 <reflection_Object_bytesize+0x64>
    2900:	ldr	r0, [pc, #128]	; 2988 <reflection_Object_bytesize+0xd8>
    2904:	ldr	r1, [pc, #120]	; 2984 <reflection_Object_bytesize+0xd4>
    2908:	mov	r2, #227	; 0xe3
    290c:	ldr	r3, [pc, #124]	; 2990 <reflection_Object_bytesize+0xe0>
    2910:	bl	0 <__assert_fail>
    2914:	mov	r7, #4
    2918:	mov	r0, r4
    291c:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2920:	sub	r6, r4, r0
    2924:	mov	r0, r6
    2928:	bl	380 <__flatbuffers_voffset_read_from_pe>
    292c:	lsl	r1, r7, #1
    2930:	add	r1, r1, #6
    2934:	cmp	r0, r1
    2938:	bcc	2950 <reflection_Object_bytesize+0xa0>
    293c:	add	r0, r6, r7, lsl #1
    2940:	add	r0, r0, #4
    2944:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2948:	bic	r5, r0, #16711680	; 0xff0000
    294c:	bic	r5, r5, #-16777216	; 0xff000000
    2950:	cmp	r5, #0
    2954:	beq	2964 <reflection_Object_bytesize+0xb4>
    2958:	add	r0, r4, r5
    295c:	bl	1cc <flatbuffers_int32_read_from_pe>
    2960:	b	2968 <reflection_Object_bytesize+0xb8>
    2964:	mov	r0, #0
    2968:	ldr	r4, [sp, #8]
    296c:	ldr	r5, [sp, #12]
    2970:	ldr	r6, [sp, #16]
    2974:	ldr	r7, [sp, #20]
    2978:	ldr	lr, [sp, #4]
    297c:	add	sp, sp, #24
    2980:	bx	lr
    2984:	.word	0x000002aa
    2988:	.word	0x0000011a
    298c:	.word	0x000001b8
    2990:	.word	0x00000924

00002994 <reflection_Object_bytesize_is_present>:
    2994:	mov	ip, sp
    2998:	sub	sp, sp, #24
    299c:	str	ip, [sp]
    29a0:	str	lr, [sp, #4]
    29a4:	str	r4, [sp, #8]
    29a8:	str	r5, [sp, #12]
    29ac:	str	r6, [sp, #16]
    29b0:	mov	r4, r0
    29b4:	mov	r5, #0
    29b8:	cmp	r4, #0
    29bc:	beq	29d4 <reflection_Object_bytesize_is_present+0x40>
    29c0:	ldr	r3, [pc, #152]	; 2a60 <reflection_Object_bytesize_is_present+0xcc>
    29c4:	cmp	r3, #0
    29c8:	movne	r1, #1
    29cc:	moveq	r1, #0
    29d0:	b	29d8 <reflection_Object_bytesize_is_present+0x44>
    29d4:	mov	r1, #0
    29d8:	cmp	r1, #0
    29dc:	bne	29f4 <reflection_Object_bytesize_is_present+0x60>
    29e0:	ldr	r0, [pc, #116]	; 2a5c <reflection_Object_bytesize_is_present+0xc8>
    29e4:	ldr	r1, [pc, #108]	; 2a58 <reflection_Object_bytesize_is_present+0xc4>
    29e8:	mov	r2, #227	; 0xe3
    29ec:	ldr	r3, [pc, #96]	; 2a54 <reflection_Object_bytesize_is_present+0xc0>
    29f0:	bl	0 <__assert_fail>
    29f4:	mov	r6, #4
    29f8:	mov	r0, r4
    29fc:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2a00:	sub	r4, r4, r0
    2a04:	mov	r0, r4
    2a08:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2a0c:	lsl	r1, r6, #1
    2a10:	add	ip, r1, #6
    2a14:	cmp	r0, ip
    2a18:	bcc	2a30 <reflection_Object_bytesize_is_present+0x9c>
    2a1c:	add	r0, r4, r6, lsl #1
    2a20:	add	r0, r0, #4
    2a24:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2a28:	bic	r5, r0, #16711680	; 0xff0000
    2a2c:	bic	r5, r5, #-16777216	; 0xff000000
    2a30:	cmp	r5, #0
    2a34:	movne	r0, #1
    2a38:	moveq	r0, #0
    2a3c:	ldr	r4, [sp, #8]
    2a40:	ldr	r5, [sp, #12]
    2a44:	ldr	r6, [sp, #16]
    2a48:	ldr	lr, [sp, #4]
    2a4c:	add	sp, sp, #24
    2a50:	bx	lr
    2a54:	.word	0x0000093f
    2a58:	.word	0x000002aa
    2a5c:	.word	0x0000011a
    2a60:	.word	0x000001b8

00002a64 <reflection_Schema_as_root>:
    2a64:	mov	ip, sp
    2a68:	sub	sp, sp, #16
    2a6c:	str	ip, [sp]
    2a70:	str	lr, [sp, #4]
    2a74:	str	r4, [sp, #8]
    2a78:	mov	r4, r0
    2a7c:	ldr	r1, [pc, #76]	; 2ad0 <reflection_Schema_as_root+0x6c>
    2a80:	cmp	r4, #0
    2a84:	beq	2aa0 <reflection_Schema_as_root+0x3c>
    2a88:	mov	r0, r4
    2a8c:	bl	444 <flatbuffers_has_identifier>
    2a90:	cmp	r0, #0
    2a94:	moveq	r1, #1
    2a98:	movne	r1, #0
    2a9c:	b	2aa4 <reflection_Schema_as_root+0x40>
    2aa0:	mov	r1, #1
    2aa4:	cmp	r1, #0
    2aa8:	bne	2abc <reflection_Schema_as_root+0x58>
    2aac:	mov	r0, r4
    2ab0:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2ab4:	add	r0, r4, r0
    2ab8:	b	2ac0 <reflection_Schema_as_root+0x5c>
    2abc:	mov	r0, #0
    2ac0:	ldr	r4, [sp, #8]
    2ac4:	ldr	lr, [sp, #4]
    2ac8:	add	sp, sp, #16
    2acc:	bx	lr
    2ad0:	.word	0x000003ee

00002ad4 <reflection_Schema_objects>:
    2ad4:	mov	ip, sp
    2ad8:	sub	sp, sp, #24
    2adc:	str	ip, [sp]
    2ae0:	str	lr, [sp, #4]
    2ae4:	str	r4, [sp, #8]
    2ae8:	str	r5, [sp, #12]
    2aec:	str	r6, [sp, #16]
    2af0:	str	r7, [sp, #20]
    2af4:	mov	r4, r0
    2af8:	mov	r6, #0
    2afc:	cmp	r4, #0
    2b00:	beq	2b18 <reflection_Schema_objects+0x44>
    2b04:	ldr	r1, [pc, #252]	; 2c08 <reflection_Schema_objects+0x134>
    2b08:	cmp	r1, #0
    2b0c:	movne	r0, #1
    2b10:	moveq	r0, #0
    2b14:	b	2b1c <reflection_Schema_objects+0x48>
    2b18:	mov	r0, #0
    2b1c:	cmp	r0, #0
    2b20:	bne	2b38 <reflection_Schema_objects+0x64>
    2b24:	ldr	r0, [pc, #216]	; 2c04 <reflection_Schema_objects+0x130>
    2b28:	ldr	r1, [pc, #196]	; 2bf4 <reflection_Schema_objects+0x120>
    2b2c:	mov	r2, #237	; 0xed
    2b30:	ldr	r3, [pc, #200]	; 2c00 <reflection_Schema_objects+0x12c>
    2b34:	bl	0 <__assert_fail>
    2b38:	mov	r7, #0
    2b3c:	mov	r0, r4
    2b40:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2b44:	sub	r5, r4, r0
    2b48:	mov	r0, r5
    2b4c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2b50:	lsl	r3, r7, #1
    2b54:	add	r1, r3, #6
    2b58:	cmp	r0, r1
    2b5c:	bcc	2b74 <reflection_Schema_objects+0xa0>
    2b60:	add	r1, r5, r7, lsl #1
    2b64:	add	r0, r1, #4
    2b68:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2b6c:	bic	r6, r0, #16711680	; 0xff0000
    2b70:	bic	r6, r6, #-16777216	; 0xff000000
    2b74:	cmp	r6, #0
    2b78:	beq	2b94 <reflection_Schema_objects+0xc0>
    2b7c:	add	r4, r4, r6
    2b80:	mov	r0, r4
    2b84:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2b88:	add	r0, r4, r0
    2b8c:	add	r0, r0, #4
    2b90:	b	2bd8 <reflection_Schema_objects+0x104>
    2b94:	mov	r0, #0
    2b98:	cmp	r0, #0
    2b9c:	beq	2bb4 <reflection_Schema_objects+0xe0>
    2ba0:	ldr	r0, [pc, #80]	; 2bf8 <reflection_Schema_objects+0x124>
    2ba4:	cmp	r0, #0
    2ba8:	movne	r0, #1
    2bac:	moveq	r0, #0
    2bb0:	b	2bb8 <reflection_Schema_objects+0xe4>
    2bb4:	mov	r0, #0
    2bb8:	cmp	r0, #0
    2bbc:	bne	2bd4 <reflection_Schema_objects+0x100>
    2bc0:	ldr	r0, [pc, #52]	; 2bfc <reflection_Schema_objects+0x128>
    2bc4:	ldr	r1, [pc, #40]	; 2bf4 <reflection_Schema_objects+0x120>
    2bc8:	mov	r2, #237	; 0xed
    2bcc:	ldr	r3, [pc, #44]	; 2c00 <reflection_Schema_objects+0x12c>
    2bd0:	bl	0 <__assert_fail>
    2bd4:	mov	r0, #0
    2bd8:	ldr	r4, [sp, #8]
    2bdc:	ldr	r5, [sp, #12]
    2be0:	ldr	r6, [sp, #16]
    2be4:	ldr	r7, [sp, #20]
    2be8:	ldr	lr, [sp, #4]
    2bec:	add	sp, sp, #24
    2bf0:	bx	lr
    2bf4:	.word	0x000002aa
    2bf8:	.word	0x000003d7
    2bfc:	.word	0x00000240
    2c00:	.word	0x00000965
    2c04:	.word	0x0000011a
    2c08:	.word	0x000001b8

00002c0c <reflection_Schema_enums>:
    2c0c:	mov	ip, sp
    2c10:	sub	sp, sp, #24
    2c14:	str	ip, [sp]
    2c18:	str	lr, [sp, #4]
    2c1c:	str	r4, [sp, #8]
    2c20:	str	r5, [sp, #12]
    2c24:	str	r6, [sp, #16]
    2c28:	str	r7, [sp, #20]
    2c2c:	mov	r4, r0
    2c30:	mov	r6, #0
    2c34:	cmp	r4, #0
    2c38:	beq	2c50 <reflection_Schema_enums+0x44>
    2c3c:	ldr	r1, [pc, #248]	; 2d3c <reflection_Schema_enums+0x130>
    2c40:	cmp	r1, #0
    2c44:	movne	r0, #1
    2c48:	moveq	r0, #0
    2c4c:	b	2c54 <reflection_Schema_enums+0x48>
    2c50:	mov	r0, #0
    2c54:	cmp	r0, #0
    2c58:	bne	2c70 <reflection_Schema_enums+0x64>
    2c5c:	ldr	r0, [pc, #212]	; 2d38 <reflection_Schema_enums+0x12c>
    2c60:	ldr	r1, [pc, #196]	; 2d2c <reflection_Schema_enums+0x120>
    2c64:	mov	r2, #238	; 0xee
    2c68:	ldr	r3, [pc, #208]	; 2d40 <reflection_Schema_enums+0x134>
    2c6c:	bl	0 <__assert_fail>
    2c70:	mov	r7, #1
    2c74:	mov	r0, r4
    2c78:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2c7c:	sub	r5, r4, r0
    2c80:	mov	r0, r5
    2c84:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2c88:	lsl	r3, r7, #1
    2c8c:	add	r1, r3, #6
    2c90:	cmp	r0, r1
    2c94:	bcc	2cac <reflection_Schema_enums+0xa0>
    2c98:	add	r1, r5, r7, lsl #1
    2c9c:	add	r0, r1, #4
    2ca0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2ca4:	bic	r6, r0, #16711680	; 0xff0000
    2ca8:	bic	r6, r6, #-16777216	; 0xff000000
    2cac:	cmp	r6, #0
    2cb0:	beq	2ccc <reflection_Schema_enums+0xc0>
    2cb4:	add	r4, r4, r6
    2cb8:	mov	r0, r4
    2cbc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2cc0:	add	r0, r4, r0
    2cc4:	add	r0, r0, #4
    2cc8:	b	2d10 <reflection_Schema_enums+0x104>
    2ccc:	mov	r0, #0
    2cd0:	cmp	r0, #0
    2cd4:	beq	2cec <reflection_Schema_enums+0xe0>
    2cd8:	ldr	r0, [pc, #80]	; 2d30 <reflection_Schema_enums+0x124>
    2cdc:	cmp	r0, #0
    2ce0:	movne	r0, #1
    2ce4:	moveq	r0, #0
    2ce8:	b	2cf0 <reflection_Schema_enums+0xe4>
    2cec:	mov	r0, #0
    2cf0:	cmp	r0, #0
    2cf4:	bne	2d0c <reflection_Schema_enums+0x100>
    2cf8:	ldr	r0, [pc, #52]	; 2d34 <reflection_Schema_enums+0x128>
    2cfc:	ldr	r1, [pc, #40]	; 2d2c <reflection_Schema_enums+0x120>
    2d00:	mov	r2, #238	; 0xee
    2d04:	ldr	r3, [pc, #52]	; 2d40 <reflection_Schema_enums+0x134>
    2d08:	bl	0 <__assert_fail>
    2d0c:	mov	r0, #0
    2d10:	ldr	r4, [sp, #8]
    2d14:	ldr	r5, [sp, #12]
    2d18:	ldr	r6, [sp, #16]
    2d1c:	ldr	r7, [sp, #20]
    2d20:	ldr	lr, [sp, #4]
    2d24:	add	sp, sp, #24
    2d28:	bx	lr
    2d2c:	.word	0x000002aa
    2d30:	.word	0x000003d7
    2d34:	.word	0x00000240
    2d38:	.word	0x0000011a
    2d3c:	.word	0x000001b8
    2d40:	.word	0x0000097f

00002d44 <reflection_Schema_file_ident>:
    2d44:	mov	ip, sp
    2d48:	sub	sp, sp, #24
    2d4c:	str	ip, [sp]
    2d50:	str	lr, [sp, #4]
    2d54:	str	r4, [sp, #8]
    2d58:	str	r5, [sp, #12]
    2d5c:	str	r6, [sp, #16]
    2d60:	str	r7, [sp, #20]
    2d64:	mov	r4, r0
    2d68:	mov	r6, #0
    2d6c:	cmp	r4, #0
    2d70:	beq	2d88 <reflection_Schema_file_ident+0x44>
    2d74:	ldr	r1, [pc, #248]	; 2e74 <reflection_Schema_file_ident+0x130>
    2d78:	cmp	r1, #0
    2d7c:	movne	r0, #1
    2d80:	moveq	r0, #0
    2d84:	b	2d8c <reflection_Schema_file_ident+0x48>
    2d88:	mov	r0, #0
    2d8c:	cmp	r0, #0
    2d90:	bne	2da8 <reflection_Schema_file_ident+0x64>
    2d94:	ldr	r0, [pc, #212]	; 2e70 <reflection_Schema_file_ident+0x12c>
    2d98:	ldr	r1, [pc, #200]	; 2e68 <reflection_Schema_file_ident+0x124>
    2d9c:	mov	r2, #239	; 0xef
    2da0:	ldr	r3, [pc, #208]	; 2e78 <reflection_Schema_file_ident+0x134>
    2da4:	bl	0 <__assert_fail>
    2da8:	mov	r7, #2
    2dac:	mov	r0, r4
    2db0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2db4:	sub	r5, r4, r0
    2db8:	mov	r0, r5
    2dbc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2dc0:	lsl	r3, r7, #1
    2dc4:	add	r1, r3, #6
    2dc8:	cmp	r0, r1
    2dcc:	bcc	2de4 <reflection_Schema_file_ident+0xa0>
    2dd0:	add	r1, r5, r7, lsl #1
    2dd4:	add	r0, r1, #4
    2dd8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2ddc:	bic	r6, r0, #16711680	; 0xff0000
    2de0:	bic	r6, r6, #-16777216	; 0xff000000
    2de4:	cmp	r6, #0
    2de8:	beq	2e04 <reflection_Schema_file_ident+0xc0>
    2dec:	add	r4, r4, r6
    2df0:	mov	r0, r4
    2df4:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    2df8:	add	r0, r4, r0
    2dfc:	add	r0, r0, #4
    2e00:	b	2e48 <reflection_Schema_file_ident+0x104>
    2e04:	mov	r0, #1
    2e08:	cmp	r0, #0
    2e0c:	beq	2e24 <reflection_Schema_file_ident+0xe0>
    2e10:	ldr	r0, [pc, #84]	; 2e6c <reflection_Schema_file_ident+0x128>
    2e14:	cmp	r0, #0
    2e18:	movne	r0, #1
    2e1c:	moveq	r0, #0
    2e20:	b	2e28 <reflection_Schema_file_ident+0xe4>
    2e24:	mov	r0, #0
    2e28:	cmp	r0, #0
    2e2c:	bne	2e44 <reflection_Schema_file_ident+0x100>
    2e30:	ldr	r0, [pc, #44]	; 2e64 <reflection_Schema_file_ident+0x120>
    2e34:	ldr	r1, [pc, #44]	; 2e68 <reflection_Schema_file_ident+0x124>
    2e38:	mov	r2, #239	; 0xef
    2e3c:	ldr	r3, [pc, #52]	; 2e78 <reflection_Schema_file_ident+0x134>
    2e40:	bl	0 <__assert_fail>
    2e44:	mov	r0, #0
    2e48:	ldr	r4, [sp, #8]
    2e4c:	ldr	r5, [sp, #12]
    2e50:	ldr	r6, [sp, #16]
    2e54:	ldr	r7, [sp, #20]
    2e58:	ldr	lr, [sp, #4]
    2e5c:	add	sp, sp, #24
    2e60:	bx	lr
    2e64:	.word	0x000001ff
    2e68:	.word	0x000002aa
    2e6c:	.word	0x000003d7
    2e70:	.word	0x0000011a
    2e74:	.word	0x000001b8
    2e78:	.word	0x00000997

00002e7c <reflection_Schema_file_ident_is_present>:
    2e7c:	mov	ip, sp
    2e80:	sub	sp, sp, #24
    2e84:	str	ip, [sp]
    2e88:	str	lr, [sp, #4]
    2e8c:	str	r4, [sp, #8]
    2e90:	str	r5, [sp, #12]
    2e94:	str	r6, [sp, #16]
    2e98:	mov	r4, r0
    2e9c:	mov	r5, #0
    2ea0:	cmp	r4, #0
    2ea4:	beq	2ebc <reflection_Schema_file_ident_is_present+0x40>
    2ea8:	ldr	r3, [pc, #152]	; 2f48 <reflection_Schema_file_ident_is_present+0xcc>
    2eac:	cmp	r3, #0
    2eb0:	movne	r1, #1
    2eb4:	moveq	r1, #0
    2eb8:	b	2ec0 <reflection_Schema_file_ident_is_present+0x44>
    2ebc:	mov	r1, #0
    2ec0:	cmp	r1, #0
    2ec4:	bne	2edc <reflection_Schema_file_ident_is_present+0x60>
    2ec8:	ldr	r0, [pc, #116]	; 2f44 <reflection_Schema_file_ident_is_present+0xc8>
    2ecc:	ldr	r1, [pc, #108]	; 2f40 <reflection_Schema_file_ident_is_present+0xc4>
    2ed0:	mov	r2, #239	; 0xef
    2ed4:	ldr	r3, [pc, #96]	; 2f3c <reflection_Schema_file_ident_is_present+0xc0>
    2ed8:	bl	0 <__assert_fail>
    2edc:	mov	r6, #2
    2ee0:	mov	r0, r4
    2ee4:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2ee8:	sub	r4, r4, r0
    2eec:	mov	r0, r4
    2ef0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2ef4:	lsl	r1, r6, #1
    2ef8:	add	ip, r1, #6
    2efc:	cmp	r0, ip
    2f00:	bcc	2f18 <reflection_Schema_file_ident_is_present+0x9c>
    2f04:	add	r0, r4, r6, lsl #1
    2f08:	add	r0, r0, #4
    2f0c:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2f10:	bic	r5, r0, #16711680	; 0xff0000
    2f14:	bic	r5, r5, #-16777216	; 0xff000000
    2f18:	cmp	r5, #0
    2f1c:	movne	r0, #1
    2f20:	moveq	r0, #0
    2f24:	ldr	r4, [sp, #8]
    2f28:	ldr	r5, [sp, #12]
    2f2c:	ldr	r6, [sp, #16]
    2f30:	ldr	lr, [sp, #4]
    2f34:	add	sp, sp, #24
    2f38:	bx	lr
    2f3c:	.word	0x000009b4
    2f40:	.word	0x000002aa
    2f44:	.word	0x0000011a
    2f48:	.word	0x000001b8

00002f4c <reflection_Schema_file_ext>:
    2f4c:	mov	ip, sp
    2f50:	sub	sp, sp, #24
    2f54:	str	ip, [sp]
    2f58:	str	lr, [sp, #4]
    2f5c:	str	r4, [sp, #8]
    2f60:	str	r5, [sp, #12]
    2f64:	str	r6, [sp, #16]
    2f68:	str	r7, [sp, #20]
    2f6c:	mov	r4, r0
    2f70:	mov	r6, #0
    2f74:	cmp	r4, #0
    2f78:	beq	2f90 <reflection_Schema_file_ext+0x44>
    2f7c:	ldr	r1, [pc, #248]	; 307c <reflection_Schema_file_ext+0x130>
    2f80:	cmp	r1, #0
    2f84:	movne	r0, #1
    2f88:	moveq	r0, #0
    2f8c:	b	2f94 <reflection_Schema_file_ext+0x48>
    2f90:	mov	r0, #0
    2f94:	cmp	r0, #0
    2f98:	bne	2fb0 <reflection_Schema_file_ext+0x64>
    2f9c:	ldr	r0, [pc, #212]	; 3078 <reflection_Schema_file_ext+0x12c>
    2fa0:	ldr	r1, [pc, #200]	; 3070 <reflection_Schema_file_ext+0x124>
    2fa4:	mov	r2, #240	; 0xf0
    2fa8:	ldr	r3, [pc, #208]	; 3080 <reflection_Schema_file_ext+0x134>
    2fac:	bl	0 <__assert_fail>
    2fb0:	mov	r7, #3
    2fb4:	mov	r0, r4
    2fb8:	bl	338 <__flatbuffers_soffset_read_from_pe>
    2fbc:	sub	r5, r4, r0
    2fc0:	mov	r0, r5
    2fc4:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2fc8:	lsl	r3, r7, #1
    2fcc:	add	r1, r3, #6
    2fd0:	cmp	r0, r1
    2fd4:	bcc	2fec <reflection_Schema_file_ext+0xa0>
    2fd8:	add	r1, r5, r7, lsl #1
    2fdc:	add	r0, r1, #4
    2fe0:	bl	380 <__flatbuffers_voffset_read_from_pe>
    2fe4:	bic	r6, r0, #16711680	; 0xff0000
    2fe8:	bic	r6, r6, #-16777216	; 0xff000000
    2fec:	cmp	r6, #0
    2ff0:	beq	300c <reflection_Schema_file_ext+0xc0>
    2ff4:	add	r4, r4, r6
    2ff8:	mov	r0, r4
    2ffc:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    3000:	add	r0, r4, r0
    3004:	add	r0, r0, #4
    3008:	b	3050 <reflection_Schema_file_ext+0x104>
    300c:	mov	r0, #1
    3010:	cmp	r0, #0
    3014:	beq	302c <reflection_Schema_file_ext+0xe0>
    3018:	ldr	r0, [pc, #84]	; 3074 <reflection_Schema_file_ext+0x128>
    301c:	cmp	r0, #0
    3020:	movne	r0, #1
    3024:	moveq	r0, #0
    3028:	b	3030 <reflection_Schema_file_ext+0xe4>
    302c:	mov	r0, #0
    3030:	cmp	r0, #0
    3034:	bne	304c <reflection_Schema_file_ext+0x100>
    3038:	ldr	r0, [pc, #44]	; 306c <reflection_Schema_file_ext+0x120>
    303c:	ldr	r1, [pc, #44]	; 3070 <reflection_Schema_file_ext+0x124>
    3040:	mov	r2, #240	; 0xf0
    3044:	ldr	r3, [pc, #52]	; 3080 <reflection_Schema_file_ext+0x134>
    3048:	bl	0 <__assert_fail>
    304c:	mov	r0, #0
    3050:	ldr	r4, [sp, #8]
    3054:	ldr	r5, [sp, #12]
    3058:	ldr	r6, [sp, #16]
    305c:	ldr	r7, [sp, #20]
    3060:	ldr	lr, [sp, #4]
    3064:	add	sp, sp, #24
    3068:	bx	lr
    306c:	.word	0x000001ff
    3070:	.word	0x000002aa
    3074:	.word	0x000003d7
    3078:	.word	0x0000011a
    307c:	.word	0x000001b8
    3080:	.word	0x000009dc

00003084 <reflection_Schema_file_ext_is_present>:
    3084:	mov	ip, sp
    3088:	sub	sp, sp, #24
    308c:	str	ip, [sp]
    3090:	str	lr, [sp, #4]
    3094:	str	r4, [sp, #8]
    3098:	str	r5, [sp, #12]
    309c:	str	r6, [sp, #16]
    30a0:	mov	r4, r0
    30a4:	mov	r5, #0
    30a8:	cmp	r4, #0
    30ac:	beq	30c4 <reflection_Schema_file_ext_is_present+0x40>
    30b0:	ldr	r3, [pc, #148]	; 314c <reflection_Schema_file_ext_is_present+0xc8>
    30b4:	cmp	r3, #0
    30b8:	movne	r1, #1
    30bc:	moveq	r1, #0
    30c0:	b	30c8 <reflection_Schema_file_ext_is_present+0x44>
    30c4:	mov	r1, #0
    30c8:	cmp	r1, #0
    30cc:	bne	30e4 <reflection_Schema_file_ext_is_present+0x60>
    30d0:	ldr	r0, [pc, #112]	; 3148 <reflection_Schema_file_ext_is_present+0xc4>
    30d4:	ldr	r1, [pc, #104]	; 3144 <reflection_Schema_file_ext_is_present+0xc0>
    30d8:	mov	r2, #240	; 0xf0
    30dc:	ldr	r3, [pc, #108]	; 3150 <reflection_Schema_file_ext_is_present+0xcc>
    30e0:	bl	0 <__assert_fail>
    30e4:	mov	r6, #3
    30e8:	mov	r0, r4
    30ec:	bl	338 <__flatbuffers_soffset_read_from_pe>
    30f0:	sub	r4, r4, r0
    30f4:	mov	r0, r4
    30f8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    30fc:	lsl	r1, r6, #1
    3100:	add	ip, r1, #6
    3104:	cmp	r0, ip
    3108:	bcc	3120 <reflection_Schema_file_ext_is_present+0x9c>
    310c:	add	r0, r4, r6, lsl #1
    3110:	add	r0, r0, #4
    3114:	bl	380 <__flatbuffers_voffset_read_from_pe>
    3118:	bic	r5, r0, #16711680	; 0xff0000
    311c:	bic	r5, r5, #-16777216	; 0xff000000
    3120:	cmp	r5, #0
    3124:	movne	r0, #1
    3128:	moveq	r0, #0
    312c:	ldr	r4, [sp, #8]
    3130:	ldr	r5, [sp, #12]
    3134:	ldr	r6, [sp, #16]
    3138:	ldr	lr, [sp, #4]
    313c:	add	sp, sp, #24
    3140:	bx	lr
    3144:	.word	0x000002aa
    3148:	.word	0x0000011a
    314c:	.word	0x000001b8
    3150:	.word	0x000009f7

00003154 <reflection_Schema_root_table>:
    3154:	mov	ip, sp
    3158:	sub	sp, sp, #24
    315c:	str	ip, [sp]
    3160:	str	lr, [sp, #4]
    3164:	str	r4, [sp, #8]
    3168:	str	r5, [sp, #12]
    316c:	str	r6, [sp, #16]
    3170:	str	r7, [sp, #20]
    3174:	mov	r4, r0
    3178:	mov	r6, #0
    317c:	cmp	r4, #0
    3180:	beq	3198 <reflection_Schema_root_table+0x44>
    3184:	ldr	r2, [pc, #248]	; 3284 <reflection_Schema_root_table+0x130>
    3188:	cmp	r2, #0
    318c:	movne	r1, #1
    3190:	moveq	r1, #0
    3194:	b	319c <reflection_Schema_root_table+0x48>
    3198:	mov	r1, #0
    319c:	cmp	r1, #0
    31a0:	bne	31b8 <reflection_Schema_root_table+0x64>
    31a4:	ldr	r0, [pc, #212]	; 3280 <reflection_Schema_root_table+0x12c>
    31a8:	ldr	r1, [pc, #196]	; 3274 <reflection_Schema_root_table+0x120>
    31ac:	mov	r2, #241	; 0xf1
    31b0:	ldr	r3, [pc, #196]	; 327c <reflection_Schema_root_table+0x128>
    31b4:	bl	0 <__assert_fail>
    31b8:	mov	r7, #4
    31bc:	mov	r0, r4
    31c0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    31c4:	sub	r5, r4, r0
    31c8:	mov	r0, r5
    31cc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    31d0:	lsl	r3, r7, #1
    31d4:	add	ip, r3, #6
    31d8:	cmp	r0, ip
    31dc:	bcc	31f4 <reflection_Schema_root_table+0xa0>
    31e0:	add	r1, r5, r7, lsl #1
    31e4:	add	r0, r1, #4
    31e8:	bl	380 <__flatbuffers_voffset_read_from_pe>
    31ec:	bic	r6, r0, #16711680	; 0xff0000
    31f0:	bic	r6, r6, #-16777216	; 0xff000000
    31f4:	cmp	r6, #0
    31f8:	beq	3210 <reflection_Schema_root_table+0xbc>
    31fc:	add	r4, r4, r6
    3200:	mov	r0, r4
    3204:	bl	2f8 <__flatbuffers_uoffset_read_from_pe>
    3208:	add	r0, r4, r0
    320c:	b	3254 <reflection_Schema_root_table+0x100>
    3210:	mov	r0, #1
    3214:	cmp	r0, #0
    3218:	beq	3230 <reflection_Schema_root_table+0xdc>
    321c:	ldr	r0, [pc, #84]	; 3278 <reflection_Schema_root_table+0x124>
    3220:	cmp	r0, #0
    3224:	movne	r0, #1
    3228:	moveq	r0, #0
    322c:	b	3234 <reflection_Schema_root_table+0xe0>
    3230:	mov	r0, #0
    3234:	cmp	r0, #0
    3238:	bne	3250 <reflection_Schema_root_table+0xfc>
    323c:	ldr	r0, [pc, #44]	; 3270 <reflection_Schema_root_table+0x11c>
    3240:	ldr	r1, [pc, #44]	; 3274 <reflection_Schema_root_table+0x120>
    3244:	mov	r2, #241	; 0xf1
    3248:	ldr	r3, [pc, #44]	; 327c <reflection_Schema_root_table+0x128>
    324c:	bl	0 <__assert_fail>
    3250:	mov	r0, #0
    3254:	ldr	r4, [sp, #8]
    3258:	ldr	r5, [sp, #12]
    325c:	ldr	r6, [sp, #16]
    3260:	ldr	r7, [sp, #20]
    3264:	ldr	lr, [sp, #4]
    3268:	add	sp, sp, #24
    326c:	bx	lr
    3270:	.word	0x000001ff
    3274:	.word	0x000002aa
    3278:	.word	0x000003d7
    327c:	.word	0x00000a1d
    3280:	.word	0x0000011a
    3284:	.word	0x000001b8

00003288 <reflection_Schema_root_table_is_present>:
    3288:	mov	ip, sp
    328c:	sub	sp, sp, #24
    3290:	str	ip, [sp]
    3294:	str	lr, [sp, #4]
    3298:	str	r4, [sp, #8]
    329c:	str	r5, [sp, #12]
    32a0:	str	r6, [sp, #16]
    32a4:	mov	r4, r0
    32a8:	mov	r5, #0
    32ac:	cmp	r4, #0
    32b0:	beq	32c8 <reflection_Schema_root_table_is_present+0x40>
    32b4:	ldr	r3, [pc, #152]	; 3354 <reflection_Schema_root_table_is_present+0xcc>
    32b8:	cmp	r3, #0
    32bc:	movne	r1, #1
    32c0:	moveq	r1, #0
    32c4:	b	32cc <reflection_Schema_root_table_is_present+0x44>
    32c8:	mov	r1, #0
    32cc:	cmp	r1, #0
    32d0:	bne	32e8 <reflection_Schema_root_table_is_present+0x60>
    32d4:	ldr	r0, [pc, #116]	; 3350 <reflection_Schema_root_table_is_present+0xc8>
    32d8:	ldr	r1, [pc, #104]	; 3348 <reflection_Schema_root_table_is_present+0xc0>
    32dc:	mov	r2, #241	; 0xf1
    32e0:	ldr	r3, [pc, #100]	; 334c <reflection_Schema_root_table_is_present+0xc4>
    32e4:	bl	0 <__assert_fail>
    32e8:	mov	r6, #4
    32ec:	mov	r0, r4
    32f0:	bl	338 <__flatbuffers_soffset_read_from_pe>
    32f4:	sub	r4, r4, r0
    32f8:	mov	r0, r4
    32fc:	bl	380 <__flatbuffers_voffset_read_from_pe>
    3300:	lsl	r1, r6, #1
    3304:	add	ip, r1, #6
    3308:	cmp	r0, ip
    330c:	bcc	3324 <reflection_Schema_root_table_is_present+0x9c>
    3310:	add	r0, r4, r6, lsl #1
    3314:	add	r0, r0, #4
    3318:	bl	380 <__flatbuffers_voffset_read_from_pe>
    331c:	bic	r5, r0, #16711680	; 0xff0000
    3320:	bic	r5, r5, #-16777216	; 0xff000000
    3324:	cmp	r5, #0
    3328:	movne	r0, #1
    332c:	moveq	r0, #0
    3330:	ldr	r4, [sp, #8]
    3334:	ldr	r5, [sp, #12]
    3338:	ldr	r6, [sp, #16]
    333c:	ldr	lr, [sp, #4]
    3340:	add	sp, sp, #24
    3344:	bx	lr
    3348:	.word	0x000002aa
    334c:	.word	0x00000a3a
    3350:	.word	0x0000011a
    3354:	.word	0x000001b8

00003358 <print_type>:
    3358:	mov	ip, sp
    335c:	sub	sp, sp, #16
    3360:	str	ip, [sp]
    3364:	str	lr, [sp, #4]
    3368:	str	r4, [sp, #8]
    336c:	str	r5, [sp, #12]
    3370:	mov	r4, r0
    3374:	mov	r5, #1
    3378:	ldr	r0, [pc, #236]	; 346c <print_type+0x114>
    337c:	bl	0 <printf>
    3380:	mov	r0, r4
    3384:	bl	748 <reflection_Type_base_type_is_present>
    3388:	cmp	r0, #0
    338c:	beq	33c8 <print_type+0x70>
    3390:	cmp	r5, #0
    3394:	bne	33a0 <print_type+0x48>
    3398:	ldr	r0, [pc, #208]	; 3470 <print_type+0x118>
    339c:	bl	0 <printf>
    33a0:	mov	r0, r4
    33a4:	bl	660 <reflection_Type_base_type>
    33a8:	sbfx	r0, r0, #0, #8
    33ac:	bl	51c <reflection_BaseType_name>
    33b0:	ldr	r1, [pc, #172]	; 3464 <print_type+0x10c>
    33b4:	mov	r2, r0
    33b8:	mov	r0, r1
    33bc:	mov	r1, r2
    33c0:	bl	0 <printf>
    33c4:	mov	r5, #0
    33c8:	mov	r0, r4
    33cc:	bl	818 <reflection_Type_element_is_present>
    33d0:	cmp	r0, #0
    33d4:	beq	3408 <print_type+0xb0>
    33d8:	cmp	r5, #0
    33dc:	bne	33e8 <print_type+0x90>
    33e0:	ldr	r0, [pc, #136]	; 3470 <print_type+0x118>
    33e4:	bl	0 <printf>
    33e8:	mov	r0, r4
    33ec:	bl	660 <reflection_Type_base_type>
    33f0:	sbfx	r0, r0, #0, #8
    33f4:	bl	51c <reflection_BaseType_name>
    33f8:	mov	r1, r0
    33fc:	ldr	r0, [pc, #112]	; 3474 <print_type+0x11c>
    3400:	bl	0 <printf>
    3404:	mov	r5, #0
    3408:	mov	r0, r4
    340c:	bl	9cc <reflection_Type_index_is_present>
    3410:	cmp	r0, #0
    3414:	beq	3444 <print_type+0xec>
    3418:	cmp	r5, #0
    341c:	bne	3428 <print_type+0xd0>
    3420:	ldr	r0, [pc, #72]	; 3470 <print_type+0x118>
    3424:	bl	0 <printf>
    3428:	mov	r0, r4
    342c:	bl	8e8 <reflection_Type_index>
    3430:	ldr	r1, [pc, #48]	; 3468 <print_type+0x110>
    3434:	mov	r3, r0
    3438:	mov	r0, r1
    343c:	mov	r1, r3
    3440:	bl	0 <printf>
    3444:	ldr	r0, [pc, #20]	; 3460 <print_type+0x108>
    3448:	bl	0 <printf>
    344c:	ldr	r4, [sp, #8]
    3450:	ldr	r5, [sp, #12]
    3454:	ldr	lr, [sp, #4]
    3458:	add	sp, sp, #16
    345c:	bx	lr
    3460:	.word	0x0000034a
    3464:	.word	0x00000406
    3468:	.word	0x00000391
    346c:	.word	0x00000170
    3470:	.word	0x000004a3
    3474:	.word	0x00000330

00003478 <print_object>:
    3478:	mov	ip, sp
    347c:	sub	sp, sp, #24
    3480:	str	ip, [sp]
    3484:	str	lr, [sp, #4]
    3488:	str	r4, [sp, #8]
    348c:	str	r5, [sp, #12]
    3490:	str	r6, [sp, #16]
    3494:	str	r7, [sp, #20]
    3498:	mov	r5, r0
    349c:	mov	r0, r5
    34a0:	bl	240c <reflection_Object_fields>
    34a4:	mov	r7, r0
    34a8:	mov	r0, r5
    34ac:	bl	22d4 <reflection_Object_name>
    34b0:	mov	r1, r0
    34b4:	ldr	r0, [pc, #576]	; 36fc <print_object+0x284>
    34b8:	bl	0 <printf>
    34bc:	ldr	r0, [pc, #556]	; 36f0 <print_object+0x278>
    34c0:	bl	0 <printf>
    34c4:	mov	r6, #0
    34c8:	mov	r0, r7
    34cc:	bl	1640 <reflection_Field_vec_len>
    34d0:	cmp	r6, r0
    34d4:	bcs	3610 <print_object+0x198>
    34d8:	cmp	r6, #0
    34dc:	bls	34e8 <print_object+0x70>
    34e0:	ldr	r0, [pc, #508]	; 36e4 <print_object+0x26c>
    34e4:	bl	0 <printf>
    34e8:	mov	r1, r6
    34ec:	mov	r0, r7
    34f0:	bl	1674 <reflection_Field_vec_at>
    34f4:	mov	r4, r0
    34f8:	mov	r0, r4
    34fc:	bl	1704 <reflection_Field_name>
    3500:	ldr	r3, [pc, #452]	; 36cc <print_object+0x254>
    3504:	mov	r1, r0
    3508:	mov	r0, r3
    350c:	bl	0 <printf>
    3510:	mov	r0, r4
    3514:	bl	183c <reflection_Field_type>
    3518:	bl	3358 <print_type>
    351c:	mov	r0, r4
    3520:	bl	1a5c <reflection_Field_id_is_present>
    3524:	cmp	r0, #0
    3528:	beq	3540 <print_object+0xc8>
    352c:	mov	r0, r4
    3530:	bl	1970 <reflection_Field_id>
    3534:	mov	r1, r0
    3538:	ldr	r0, [pc, #392]	; 36c8 <print_object+0x250>
    353c:	bl	0 <printf>
    3540:	mov	r0, r4
    3544:	bl	1c14 <reflection_Field_default_integer_is_present>
    3548:	cmp	r0, #0
    354c:	beq	3570 <print_object+0xf8>
    3550:	mov	r0, r4
    3554:	bl	1b2c <reflection_Field_default_integer>
    3558:	ldr	r2, [pc, #404]	; 36f4 <print_object+0x27c>
    355c:	mov	r3, r1
    3560:	mov	ip, r0
    3564:	mov	r0, r2
    3568:	mov	r2, ip
    356c:	bl	0 <printf>
    3570:	mov	r0, r4
    3574:	bl	1dd0 <reflection_Field_default_real_is_present>
    3578:	cmp	r0, #0
    357c:	beq	3598 <print_object+0x120>
    3580:	mov	r0, r4
    3584:	bl	1ce4 <reflection_Field_default_real>
    3588:	ldr	r0, [pc, #360]	; 36f8 <print_object+0x280>
    358c:	vmov.f64	d2, d0
    3590:	vmov	r2, r3, d2
    3594:	bl	0 <printf>
    3598:	mov	r0, r4
    359c:	bl	1f88 <reflection_Field_required_is_present>
    35a0:	cmp	r0, #0
    35a4:	beq	35cc <print_object+0x154>
    35a8:	mov	r0, r4
    35ac:	bl	1ea0 <reflection_Field_required>
    35b0:	cmp	r0, #0
    35b4:	bne	35c0 <print_object+0x148>
    35b8:	ldr	r1, [pc, #320]	; 3700 <print_object+0x288>
    35bc:	b	35c4 <print_object+0x14c>
    35c0:	ldr	r1, [pc, #264]	; 36d0 <print_object+0x258>
    35c4:	ldr	r0, [pc, #272]	; 36dc <print_object+0x264>
    35c8:	bl	0 <printf>
    35cc:	mov	r0, r4
    35d0:	bl	2140 <reflection_Field_key_is_present>
    35d4:	cmp	r0, #0
    35d8:	beq	3600 <print_object+0x188>
    35dc:	mov	r0, r4
    35e0:	bl	2058 <reflection_Field_key>
    35e4:	cmp	r0, #0
    35e8:	bne	35f4 <print_object+0x17c>
    35ec:	ldr	r1, [pc, #268]	; 3700 <print_object+0x288>
    35f0:	b	35f8 <print_object+0x180>
    35f4:	ldr	r1, [pc, #212]	; 36d0 <print_object+0x258>
    35f8:	ldr	r0, [pc, #224]	; 36e0 <print_object+0x268>
    35fc:	bl	0 <printf>
    3600:	ldr	r0, [pc, #188]	; 36c4 <print_object+0x24c>
    3604:	bl	0 <printf>
    3608:	add	r6, r6, #1
    360c:	b	34c8 <print_object+0x50>
    3610:	ldr	r0, [pc, #192]	; 36d8 <print_object+0x260>
    3614:	bl	0 <printf>
    3618:	mov	r0, r5
    361c:	bl	262c <reflection_Object_is_struct_is_present>
    3620:	cmp	r0, #0
    3624:	beq	364c <print_object+0x1d4>
    3628:	mov	r0, r5
    362c:	bl	2544 <reflection_Object_is_struct>
    3630:	cmp	r0, #0
    3634:	bne	3640 <print_object+0x1c8>
    3638:	ldr	r1, [pc, #192]	; 3700 <print_object+0x288>
    363c:	b	3644 <print_object+0x1cc>
    3640:	ldr	r1, [pc, #136]	; 36d0 <print_object+0x258>
    3644:	ldr	r0, [pc, #156]	; 36e8 <print_object+0x270>
    3648:	bl	0 <printf>
    364c:	mov	r0, r5
    3650:	bl	27e0 <reflection_Object_minalign_is_present>
    3654:	cmp	r0, #0
    3658:	beq	3674 <print_object+0x1fc>
    365c:	mov	r0, r5
    3660:	bl	26fc <reflection_Object_minalign>
    3664:	ldr	r2, [pc, #104]	; 36d4 <print_object+0x25c>
    3668:	mov	r1, r0
    366c:	mov	r0, r2
    3670:	bl	0 <printf>
    3674:	mov	r0, r5
    3678:	bl	2994 <reflection_Object_bytesize_is_present>
    367c:	cmp	r0, #0
    3680:	beq	36a0 <print_object+0x228>
    3684:	mov	r0, r5
    3688:	bl	28b0 <reflection_Object_bytesize>
    368c:	ldr	r1, [pc, #88]	; 36ec <print_object+0x274>
    3690:	mov	r2, r0
    3694:	mov	r0, r1
    3698:	mov	r1, r2
    369c:	bl	0 <printf>
    36a0:	ldr	r0, [pc, #28]	; 36c4 <print_object+0x24c>
    36a4:	bl	0 <printf>
    36a8:	ldr	r4, [sp, #8]
    36ac:	ldr	r5, [sp, #12]
    36b0:	ldr	r6, [sp, #16]
    36b4:	ldr	r7, [sp, #20]
    36b8:	ldr	lr, [sp, #4]
    36bc:	add	sp, sp, #24
    36c0:	bx	lr
    36c4:	.word	0x0000034a
    36c8:	.word	0x00000013
    36cc:	.word	0x000000e7
    36d0:	.word	0x000001a2
    36d4:	.word	0x000001dc
    36d8:	.word	0x000001b6
    36dc:	.word	0x000000fc
    36e0:	.word	0x000001d2
    36e4:	.word	0x000004a3
    36e8:	.word	0x0000001d
    36ec:	.word	0x0000028a
    36f0:	.word	0x000003f3
    36f4:	.word	0x0000018a
    36f8:	.word	0x00000374
    36fc:	.word	0x00000006
    3700:	.word	0x00000417

00003704 <print_enum>:
    3704:	mov	ip, sp
    3708:	sub	sp, sp, #24
    370c:	str	ip, [sp]
    3710:	str	lr, [sp, #4]
    3714:	str	r4, [sp, #8]
    3718:	str	r5, [sp, #12]
    371c:	str	r6, [sp, #16]
    3720:	str	r7, [sp, #20]
    3724:	mov	r6, r0
    3728:	mov	r0, r6
    372c:	bl	10e4 <reflection_Enum_name>
    3730:	ldr	r2, [pc, #356]	; 389c <print_enum+0x198>
    3734:	mov	r1, r0
    3738:	mov	r0, r2
    373c:	bl	0 <printf>
    3740:	mov	r0, r6
    3744:	bl	121c <reflection_Enum_values>
    3748:	mov	r5, r0
    374c:	ldr	r0, [pc, #324]	; 3898 <print_enum+0x194>
    3750:	bl	0 <printf>
    3754:	mov	r7, #0
    3758:	mov	r0, r5
    375c:	bl	1020 <reflection_Enum_vec_len>
    3760:	cmp	r7, r0
    3764:	bcs	3808 <print_enum+0x104>
    3768:	mov	r1, r7
    376c:	mov	r0, r5
    3770:	bl	a9c <reflection_EnumVal_vec_at>
    3774:	mov	r4, r0
    3778:	cmp	r7, #0
    377c:	bls	3788 <print_enum+0x84>
    3780:	ldr	r0, [pc, #268]	; 3894 <print_enum+0x190>
    3784:	bl	0 <printf>
    3788:	mov	r0, r4
    378c:	bl	b2c <reflection_EnumVal_name>
    3790:	ldr	r1, [pc, #260]	; 389c <print_enum+0x198>
    3794:	mov	r3, r0
    3798:	mov	r0, r1
    379c:	mov	r1, r3
    37a0:	bl	0 <printf>
    37a4:	mov	r0, r4
    37a8:	bl	d4c <reflection_EnumVal_value_is_present>
    37ac:	cmp	r0, #0
    37b0:	beq	37d4 <print_enum+0xd0>
    37b4:	mov	r0, r4
    37b8:	bl	c64 <reflection_EnumVal_value>
    37bc:	ldr	r2, [pc, #204]	; 3890 <print_enum+0x18c>
    37c0:	mov	r3, r1
    37c4:	mov	ip, r0
    37c8:	mov	r0, r2
    37cc:	mov	r2, ip
    37d0:	bl	0 <printf>
    37d4:	mov	r0, r4
    37d8:	bl	f50 <reflection_EnumVal_object_is_present>
    37dc:	cmp	r0, #0
    37e0:	beq	37f8 <print_enum+0xf4>
    37e4:	ldr	r0, [pc, #152]	; 3884 <print_enum+0x180>
    37e8:	bl	0 <printf>
    37ec:	mov	r0, r4
    37f0:	bl	e1c <reflection_EnumVal_object>
    37f4:	bl	3478 <print_object>
    37f8:	ldr	r0, [pc, #124]	; 387c <print_enum+0x178>
    37fc:	bl	0 <printf>
    3800:	add	r7, r7, #1
    3804:	b	3758 <print_enum+0x54>
    3808:	ldr	r0, [pc, #120]	; 3888 <print_enum+0x184>
    380c:	bl	0 <printf>
    3810:	mov	r0, r6
    3814:	bl	143c <reflection_Enum_is_union_is_present>
    3818:	cmp	r0, #0
    381c:	beq	3844 <print_enum+0x140>
    3820:	mov	r0, r6
    3824:	bl	1354 <reflection_Enum_is_union>
    3828:	cmp	r0, #0
    382c:	bne	3838 <print_enum+0x134>
    3830:	ldr	r1, [pc, #104]	; 38a0 <print_enum+0x19c>
    3834:	b	383c <print_enum+0x138>
    3838:	ldr	r1, [pc, #64]	; 3880 <print_enum+0x17c>
    383c:	ldr	r0, [pc, #72]	; 388c <print_enum+0x188>
    3840:	bl	0 <printf>
    3844:	ldr	r0, [pc, #88]	; 38a4 <print_enum+0x1a0>
    3848:	bl	0 <printf>
    384c:	mov	r0, r6
    3850:	bl	150c <reflection_Enum_underlying_type>
    3854:	bl	3358 <print_type>
    3858:	ldr	r0, [pc, #28]	; 387c <print_enum+0x178>
    385c:	bl	0 <printf>
    3860:	ldr	r4, [sp, #8]
    3864:	ldr	r5, [sp, #12]
    3868:	ldr	r6, [sp, #16]
    386c:	ldr	r7, [sp, #20]
    3870:	ldr	lr, [sp, #4]
    3874:	add	sp, sp, #24
    3878:	bx	lr
    387c:	.word	0x0000034a
    3880:	.word	0x000001a2
    3884:	.word	0x00000365
    3888:	.word	0x000001b6
    388c:	.word	0x0000010b
    3890:	.word	0x00000322
    3894:	.word	0x000004a3
    3898:	.word	0x000003c5
    389c:	.word	0x00000006
    38a0:	.word	0x00000417
    38a4:	.word	0x000001eb

000038a8 <print_schema>:
    38a8:	mov	ip, sp
    38ac:	sub	sp, sp, #24
    38b0:	str	ip, [sp]
    38b4:	str	lr, [sp, #4]
    38b8:	str	r4, [sp, #8]
    38bc:	str	r5, [sp, #12]
    38c0:	str	r6, [sp, #16]
    38c4:	mov	r4, r0
    38c8:	mov	r0, r4
    38cc:	bl	2ad4 <reflection_Schema_objects>
    38d0:	mov	r6, r0
    38d4:	ldr	r0, [pc, #320]	; 3a1c <print_schema+0x174>
    38d8:	bl	0 <printf>
    38dc:	ldr	r0, [pc, #296]	; 3a0c <print_schema+0x164>
    38e0:	bl	0 <printf>
    38e4:	mov	r5, #0
    38e8:	mov	r0, r6
    38ec:	bl	2210 <reflection_Object_vec_len>
    38f0:	cmp	r5, r0
    38f4:	bcs	3920 <print_schema+0x78>
    38f8:	cmp	r5, #0
    38fc:	bls	3908 <print_schema+0x60>
    3900:	ldr	r0, [pc, #280]	; 3a20 <print_schema+0x178>
    3904:	bl	0 <printf>
    3908:	mov	r1, r5
    390c:	mov	r0, r6
    3910:	bl	2244 <reflection_Object_vec_at>
    3914:	bl	3478 <print_object>
    3918:	add	r5, r5, #1
    391c:	b	38e8 <print_schema+0x40>
    3920:	ldr	r0, [pc, #236]	; 3a14 <print_schema+0x16c>
    3924:	bl	0 <printf>
    3928:	mov	r0, r4
    392c:	bl	2c0c <reflection_Schema_enums>
    3930:	mov	r5, r0
    3934:	ldr	r0, [pc, #236]	; 3a28 <print_schema+0x180>
    3938:	bl	0 <printf>
    393c:	mov	r6, #0
    3940:	mov	r0, r5
    3944:	bl	1020 <reflection_Enum_vec_len>
    3948:	cmp	r6, r0
    394c:	bcs	3978 <print_schema+0xd0>
    3950:	cmp	r6, #0
    3954:	bls	3960 <print_schema+0xb8>
    3958:	ldr	r0, [pc, #192]	; 3a20 <print_schema+0x178>
    395c:	bl	0 <printf>
    3960:	mov	r1, r6
    3964:	mov	r0, r5
    3968:	bl	1054 <reflection_Enum_vec_at>
    396c:	bl	3704 <print_enum>
    3970:	add	r6, r6, #1
    3974:	b	3940 <print_schema+0x98>
    3978:	ldr	r0, [pc, #148]	; 3a14 <print_schema+0x16c>
    397c:	bl	0 <printf>
    3980:	mov	r0, r4
    3984:	bl	2e7c <reflection_Schema_file_ident_is_present>
    3988:	cmp	r0, #0
    398c:	beq	39a4 <print_schema+0xfc>
    3990:	mov	r0, r4
    3994:	bl	2d44 <reflection_Schema_file_ident>
    3998:	mov	r1, r0
    399c:	ldr	r0, [pc, #108]	; 3a10 <print_schema+0x168>
    39a0:	bl	0 <printf>
    39a4:	mov	r0, r4
    39a8:	bl	3084 <reflection_Schema_file_ext_is_present>
    39ac:	cmp	r0, #0
    39b0:	beq	39c8 <print_schema+0x120>
    39b4:	mov	r0, r4
    39b8:	bl	2f4c <reflection_Schema_file_ext>
    39bc:	mov	r1, r0
    39c0:	ldr	r0, [pc, #100]	; 3a2c <print_schema+0x184>
    39c4:	bl	0 <printf>
    39c8:	mov	r0, r4
    39cc:	bl	3288 <reflection_Schema_root_table_is_present>
    39d0:	cmp	r0, #0
    39d4:	beq	39ec <print_schema+0x144>
    39d8:	ldr	r0, [pc, #68]	; 3a24 <print_schema+0x17c>
    39dc:	bl	0 <printf>
    39e0:	mov	r0, r4
    39e4:	bl	3154 <reflection_Schema_root_table>
    39e8:	bl	3478 <print_object>
    39ec:	ldr	r0, [pc, #36]	; 3a18 <print_schema+0x170>
    39f0:	bl	0 <printf>
    39f4:	ldr	r4, [sp, #8]
    39f8:	ldr	r5, [sp, #12]
    39fc:	ldr	r6, [sp, #16]
    3a00:	ldr	lr, [sp, #4]
    3a04:	add	sp, sp, #24
    3a08:	bx	lr
    3a0c:	.word	0x0000034c
    3a10:	.word	0x00000220
    3a14:	.word	0x000001b6
    3a18:	.word	0x00000495
    3a1c:	.word	0x00000170
    3a20:	.word	0x000004a3
    3a24:	.word	0x000001a7
    3a28:	.word	0x0000033f
    3a2c:	.word	0x00000299

00003a30 <load_and_dump_schema>:
    3a30:	mov	ip, sp
    3a34:	sub	sp, sp, #32
    3a38:	str	ip, [sp]
    3a3c:	str	lr, [sp, #4]
    3a40:	str	r4, [sp, #8]
    3a44:	str	r5, [sp, #12]
    3a48:	str	r6, [sp, #16]
    3a4c:	mov	r4, r0
    3a50:	mvn	r6, #0
    3a54:	movw	r1, #10000	; 0x2710
    3a58:	add	r2, sp, #24
    3a5c:	mov	r0, r4
    3a60:	bl	0 <readfile>
    3a64:	mov	r5, r0
    3a68:	cmp	r5, #0
    3a6c:	bne	3a88 <load_and_dump_schema+0x58>
    3a70:	ldr	r0, [pc, #204]	; 3b44 <load_and_dump_schema+0x114>
    3a74:	ldr	r0, [r0]
    3a78:	ldr	r1, [pc, #184]	; 3b38 <load_and_dump_schema+0x108>
    3a7c:	mov	r2, r4
    3a80:	bl	0 <fprintf>
    3a84:	b	3b0c <load_and_dump_schema+0xdc>
    3a88:	ldr	r3, [sp, #24]
    3a8c:	cmp	r3, #12
    3a90:	bcs	3aac <load_and_dump_schema+0x7c>
    3a94:	ldr	r2, [pc, #168]	; 3b44 <load_and_dump_schema+0x114>
    3a98:	ldr	r0, [r2]
    3a9c:	ldr	r1, [pc, #152]	; 3b3c <load_and_dump_schema+0x10c>
    3aa0:	mov	r2, r4
    3aa4:	bl	0 <fprintf>
    3aa8:	b	3b0c <load_and_dump_schema+0xdc>
    3aac:	mov	r0, r5
    3ab0:	bl	2a64 <reflection_Schema_as_root>
    3ab4:	mov	r4, r0
    3ab8:	cmp	r4, #0
    3abc:	bne	3ae4 <load_and_dump_schema+0xb4>
    3ac0:	add	r0, r5, #4
    3ac4:	bl	2a64 <reflection_Schema_as_root>
    3ac8:	mov	r4, r0
    3acc:	cmp	r4, #0
    3ad0:	beq	3ae4 <load_and_dump_schema+0xb4>
    3ad4:	ldr	r2, [pc, #104]	; 3b44 <load_and_dump_schema+0x114>
    3ad8:	ldr	r0, [r2]
    3adc:	ldr	r1, [pc, #92]	; 3b40 <load_and_dump_schema+0x110>
    3ae0:	bl	0 <fprintf>
    3ae4:	cmp	r4, #0
    3ae8:	bne	3b00 <load_and_dump_schema+0xd0>
    3aec:	ldr	ip, [pc, #80]	; 3b44 <load_and_dump_schema+0x114>
    3af0:	ldr	r0, [ip]
    3af4:	ldr	r1, [pc, #76]	; 3b48 <load_and_dump_schema+0x118>
    3af8:	bl	0 <fprintf>
    3afc:	b	3b0c <load_and_dump_schema+0xdc>
    3b00:	mov	r0, r4
    3b04:	bl	38a8 <print_schema>
    3b08:	mov	r6, #0
    3b0c:	cmp	r5, #0
    3b10:	beq	3b1c <load_and_dump_schema+0xec>
    3b14:	mov	r0, r5
    3b18:	bl	0 <free>
    3b1c:	mov	r0, r6
    3b20:	ldr	r4, [sp, #8]
    3b24:	ldr	r5, [sp, #12]
    3b28:	ldr	r6, [sp, #16]
    3b2c:	ldr	lr, [sp, #4]
    3b30:	add	sp, sp, #32
    3b34:	bx	lr
    3b38:	.word	0x00000261
    3b3c:	.word	0x00000475
    3b40:	.word	0x0000039c
    3b44:	.word	0x00000000
    3b48:	.word	0x0000041d

00003b4c <main>:
    3b4c:	mov	ip, sp
    3b50:	sub	sp, sp, #16
    3b54:	str	ip, [sp]
    3b58:	str	lr, [sp, #4]
    3b5c:	str	r4, [sp, #8]
    3b60:	mov	r4, r1
    3b64:	cmp	r0, #2
    3b68:	beq	3ba4 <main+0x58>
    3b6c:	ldr	r3, [pc, #80]	; 3bc4 <main+0x78>
    3b70:	ldr	r0, [r3]
    3b74:	ldr	r1, [pc, #68]	; 3bc0 <main+0x74>
    3b78:	bl	0 <fprintf>
    3b7c:	ldr	r2, [pc, #64]	; 3bc4 <main+0x78>
    3b80:	ldr	r0, [r2]
    3b84:	ldr	r1, [pc, #48]	; 3bbc <main+0x70>
    3b88:	bl	0 <fprintf>
    3b8c:	ldr	ip, [pc, #48]	; 3bc4 <main+0x78>
    3b90:	ldr	r0, [ip]
    3b94:	ldr	r1, [pc, #44]	; 3bc8 <main+0x7c>
    3b98:	bl	0 <fprintf>
    3b9c:	mvn	r0, #0
    3ba0:	bl	0 <exit>
    3ba4:	ldr	r0, [r4, #4]
    3ba8:	bl	3a30 <load_and_dump_schema>
    3bac:	ldr	r4, [sp, #8]
    3bb0:	ldr	lr, [sp, #4]
    3bb4:	add	sp, sp, #16
    3bb8:	bx	lr
    3bbc:	.word	0x000004a5
    3bc0:	.word	0x00000153
    3bc4:	.word	0x00000000
    3bc8:	.word	0x0000002d
