
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codaeval.dir/tools/codaeval/codaeval.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <callback>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #24
       c:	str	r0, [fp, #-8]
      10:	str	r1, [sp, #12]
      14:	str	r2, [sp, #8]
      18:	str	r3, [sp, #4]
      1c:	ldr	r0, [sp, #12]
      20:	cmp	r0, #0
      24:	bne	4c <callback+0x4c>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	ldr	r0, [r0]
      34:	ldr	r2, [sp, #8]
      38:	ldr	r3, [fp, #-8]
      3c:	movw	r1, #0
      40:	movt	r1, #0
      44:	bl	0 <fprintf>
      48:	b	ac <callback+0xac>
      4c:	ldr	r0, [sp, #12]
      50:	cmp	r0, #2
      54:	bne	78 <callback+0x78>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	ldr	r0, [r0]
      64:	ldr	r2, [fp, #-8]
      68:	movw	r1, #0
      6c:	movt	r1, #0
      70:	bl	0 <fprintf>
      74:	b	a8 <callback+0xa8>
      78:	ldr	r0, [sp, #12]
      7c:	cmp	r0, #1
      80:	bne	a4 <callback+0xa4>
      84:	movw	r0, #0
      88:	movt	r0, #0
      8c:	ldr	r0, [r0]
      90:	ldr	r2, [fp, #-8]
      94:	ldr	r3, [sp, #8]
      98:	movw	r1, #0
      9c:	movt	r1, #0
      a0:	bl	0 <fprintf>
      a4:	b	a8 <callback+0xa8>
      a8:	b	ac <callback+0xac>
      ac:	ldr	r0, [sp, #12]
      b0:	cmp	r0, #4
      b4:	bne	c8 <callback+0xc8>
      b8:	ldr	r0, [fp, #-8]
      bc:	bl	dc <eval_expression_for_file>
      c0:	str	r0, [fp, #-4]
      c4:	b	d0 <callback+0xd0>
      c8:	movw	r0, #0
      cc:	str	r0, [fp, #-4]
      d0:	ldr	r0, [fp, #-4]
      d4:	mov	sp, fp
      d8:	pop	{fp, pc}

000000dc <eval_expression_for_file>:
      dc:	push	{r4, r5, fp, lr}
      e0:	add	fp, sp, #8
      e4:	sub	sp, sp, #560	; 0x230
      e8:	str	r0, [fp, #-16]
      ec:	movw	r0, #0
      f0:	str	r0, [fp, #-20]	; 0xffffffec
      f4:	ldr	r0, [fp, #-16]
      f8:	sub	r1, fp, #20
      fc:	bl	0 <coda_open>
     100:	cmp	r0, #0
     104:	beq	114 <eval_expression_for_file+0x38>
     108:	movw	r0, #1
     10c:	str	r0, [fp, #-12]
     110:	b	238 <eval_expression_for_file+0x15c>
     114:	ldr	r1, [fp, #-20]	; 0xffffffec
     118:	add	r0, sp, #24
     11c:	bl	0 <coda_cursor_set_product>
     120:	cmp	r0, #0
     124:	beq	13c <eval_expression_for_file+0x60>
     128:	ldr	r0, [fp, #-20]	; 0xffffffec
     12c:	bl	0 <coda_close>
     130:	movw	r1, #1
     134:	str	r1, [fp, #-12]
     138:	b	238 <eval_expression_for_file+0x15c>
     13c:	movw	r0, #0
     140:	movt	r0, #0
     144:	ldr	r0, [r0]
     148:	movw	r1, #0
     14c:	cmp	r0, r1
     150:	beq	1c8 <eval_expression_for_file+0xec>
     154:	movw	r0, #0
     158:	movt	r0, #0
     15c:	ldr	r0, [r0]
     160:	add	r1, sp, #24
     164:	bl	0 <coda_expression_eval_node>
     168:	cmp	r0, #0
     16c:	beq	1c4 <eval_expression_for_file+0xe8>
     170:	movw	r0, #0
     174:	movt	r0, #0
     178:	ldr	r0, [r0]
     17c:	str	r0, [sp, #20]
     180:	bl	0 <coda_get_errno>
     184:	ldr	r0, [r0]
     188:	bl	0 <coda_errno_to_string>
     18c:	ldr	r1, [sp, #20]
     190:	str	r0, [sp, #16]
     194:	mov	r0, r1
     198:	movw	r1, #0
     19c:	movt	r1, #0
     1a0:	ldr	r2, [sp, #16]
     1a4:	bl	0 <fprintf>
     1a8:	ldr	r1, [fp, #-20]	; 0xffffffec
     1ac:	str	r0, [sp, #12]
     1b0:	mov	r0, r1
     1b4:	bl	0 <coda_close>
     1b8:	movw	r1, #0
     1bc:	str	r1, [fp, #-12]
     1c0:	b	238 <eval_expression_for_file+0x15c>
     1c4:	b	1c8 <eval_expression_for_file+0xec>
     1c8:	add	r0, sp, #24
     1cc:	bl	9d8 <eval_expression>
     1d0:	cmp	r0, #0
     1d4:	beq	214 <eval_expression_for_file+0x138>
     1d8:	movw	r0, #0
     1dc:	movt	r0, #0
     1e0:	ldr	r0, [r0]
     1e4:	str	r0, [sp, #8]
     1e8:	bl	0 <coda_get_errno>
     1ec:	ldr	r0, [r0]
     1f0:	bl	0 <coda_errno_to_string>
     1f4:	ldr	r3, [fp, #-16]
     1f8:	ldr	r1, [sp, #8]
     1fc:	str	r0, [sp, #4]
     200:	mov	r0, r1
     204:	movw	r1, #0
     208:	movt	r1, #0
     20c:	ldr	r2, [sp, #4]
     210:	bl	0 <fprintf>
     214:	ldr	r0, [fp, #-20]	; 0xffffffec
     218:	bl	0 <coda_close>
     21c:	cmp	r0, #0
     220:	beq	230 <eval_expression_for_file+0x154>
     224:	movw	r0, #1
     228:	str	r0, [fp, #-12]
     22c:	b	238 <eval_expression_for_file+0x15c>
     230:	movw	r0, #0
     234:	str	r0, [fp, #-12]
     238:	ldr	r0, [fp, #-12]
     23c:	sub	sp, fp, #8
     240:	pop	{r4, r5, fp, pc}

00000244 <main>:
     244:	push	{fp, lr}
     248:	mov	fp, sp
     24c:	sub	sp, sp, #152	; 0x98
     250:	movw	r2, #0
     254:	str	r2, [fp, #-4]
     258:	str	r0, [fp, #-8]
     25c:	str	r1, [fp, #-12]
     260:	movw	r0, #1
     264:	str	r0, [fp, #-16]
     268:	str	r2, [fp, #-20]	; 0xffffffec
     26c:	ldr	r0, [fp, #-8]
     270:	cmp	r0, #1
     274:	beq	2b0 <main+0x6c>
     278:	ldr	r0, [fp, #-12]
     27c:	ldr	r0, [r0, #4]
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	bl	0 <strcmp>
     28c:	cmp	r0, #0
     290:	beq	2b0 <main+0x6c>
     294:	ldr	r0, [fp, #-12]
     298:	ldr	r0, [r0, #4]
     29c:	movw	r1, #0
     2a0:	movt	r1, #0
     2a4:	bl	0 <strcmp>
     2a8:	cmp	r0, #0
     2ac:	bne	2bc <main+0x78>
     2b0:	bl	c6c <print_help>
     2b4:	movw	r0, #0
     2b8:	bl	0 <exit>
     2bc:	ldr	r0, [fp, #-12]
     2c0:	ldr	r0, [r0, #4]
     2c4:	movw	r1, #0
     2c8:	movt	r1, #0
     2cc:	bl	0 <strcmp>
     2d0:	cmp	r0, #0
     2d4:	beq	2f4 <main+0xb0>
     2d8:	ldr	r0, [fp, #-12]
     2dc:	ldr	r0, [r0, #4]
     2e0:	movw	r1, #0
     2e4:	movt	r1, #0
     2e8:	bl	0 <strcmp>
     2ec:	cmp	r0, #0
     2f0:	bne	300 <main+0xbc>
     2f4:	bl	f70 <print_version>
     2f8:	movw	r0, #0
     2fc:	bl	0 <exit>
     300:	movw	r0, #1
     304:	str	r0, [fp, #-24]	; 0xffffffe8
     308:	ldr	r0, [fp, #-24]	; 0xffffffe8
     30c:	add	r0, r0, #1
     310:	ldr	r1, [fp, #-8]
     314:	cmp	r0, r1
     318:	bge	368 <main+0x124>
     31c:	ldr	r0, [fp, #-12]
     320:	ldr	r1, [fp, #-24]	; 0xffffffe8
     324:	add	r0, r0, r1, lsl #2
     328:	ldr	r0, [r0]
     32c:	movw	r1, #0
     330:	movt	r1, #0
     334:	bl	0 <strcmp>
     338:	cmp	r0, #0
     33c:	bne	368 <main+0x124>
     340:	ldr	r0, [fp, #-12]
     344:	ldr	r1, [fp, #-24]	; 0xffffffe8
     348:	add	r1, r1, #1
     34c:	add	r0, r0, r1, lsl #2
     350:	ldr	r0, [r0]
     354:	bl	0 <coda_set_definition_path>
     358:	ldr	r1, [fp, #-24]	; 0xffffffe8
     35c:	add	r1, r1, #2
     360:	str	r1, [fp, #-24]	; 0xffffffe8
     364:	b	3dc <main+0x198>
     368:	movw	r0, #0
     36c:	movt	r0, #0
     370:	str	r0, [fp, #-28]	; 0xffffffe4
     374:	ldr	r0, [fp, #-12]
     378:	ldr	r0, [r0]
     37c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     380:	movw	r1, #0
     384:	bl	0 <coda_set_definition_path_conditional>
     388:	cmp	r0, #0
     38c:	beq	3d8 <main+0x194>
     390:	movw	r0, #0
     394:	movt	r0, #0
     398:	ldr	r0, [r0]
     39c:	str	r0, [fp, #-32]	; 0xffffffe0
     3a0:	bl	0 <coda_get_errno>
     3a4:	ldr	r0, [r0]
     3a8:	bl	0 <coda_errno_to_string>
     3ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
     3b0:	str	r0, [fp, #-36]	; 0xffffffdc
     3b4:	mov	r0, r1
     3b8:	movw	r1, #0
     3bc:	movt	r1, #0
     3c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     3c4:	bl	0 <fprintf>
     3c8:	movw	r1, #1
     3cc:	str	r0, [fp, #-40]	; 0xffffffd8
     3d0:	mov	r0, r1
     3d4:	bl	0 <exit>
     3d8:	b	3dc <main+0x198>
     3dc:	b	3e0 <main+0x19c>
     3e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3e4:	ldr	r1, [fp, #-8]
     3e8:	cmp	r0, r1
     3ec:	bge	5d0 <main+0x38c>
     3f0:	ldr	r0, [fp, #-12]
     3f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     3f8:	add	r0, r0, r1, lsl #2
     3fc:	ldr	r0, [r0]
     400:	movw	r1, #0
     404:	movt	r1, #0
     408:	bl	0 <strcmp>
     40c:	cmp	r0, #0
     410:	beq	438 <main+0x1f4>
     414:	ldr	r0, [fp, #-12]
     418:	ldr	r1, [fp, #-24]	; 0xffffffe8
     41c:	add	r0, r0, r1, lsl #2
     420:	ldr	r0, [r0]
     424:	movw	r1, #0
     428:	movt	r1, #0
     42c:	bl	0 <strcmp>
     430:	cmp	r0, #0
     434:	bne	444 <main+0x200>
     438:	movw	r0, #1
     43c:	str	r0, [fp, #-20]	; 0xffffffec
     440:	b	5c0 <main+0x37c>
     444:	ldr	r0, [fp, #-12]
     448:	ldr	r1, [fp, #-24]	; 0xffffffe8
     44c:	add	r0, r0, r1, lsl #2
     450:	ldr	r0, [r0]
     454:	movw	r1, #0
     458:	movt	r1, #0
     45c:	bl	0 <strcmp>
     460:	cmp	r0, #0
     464:	beq	48c <main+0x248>
     468:	ldr	r0, [fp, #-12]
     46c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     470:	add	r0, r0, r1, lsl #2
     474:	ldr	r0, [r0]
     478:	movw	r1, #0
     47c:	movt	r1, #0
     480:	bl	0 <strcmp>
     484:	cmp	r0, #0
     488:	bne	498 <main+0x254>
     48c:	movw	r0, #0
     490:	str	r0, [fp, #-16]
     494:	b	5bc <main+0x378>
     498:	ldr	r0, [fp, #-12]
     49c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4a0:	add	r0, r0, r1, lsl #2
     4a4:	ldr	r0, [r0]
     4a8:	movw	r1, #0
     4ac:	movt	r1, #0
     4b0:	bl	0 <strcmp>
     4b4:	cmp	r0, #0
     4b8:	bne	570 <main+0x32c>
     4bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4c0:	add	r0, r0, #1
     4c4:	ldr	r1, [fp, #-8]
     4c8:	cmp	r0, r1
     4cc:	bge	570 <main+0x32c>
     4d0:	ldr	r0, [fp, #-12]
     4d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4d8:	add	r1, r1, #1
     4dc:	add	r0, r0, r1, lsl #2
     4e0:	ldr	r0, [r0]
     4e4:	ldrb	r0, [r0]
     4e8:	cmp	r0, #45	; 0x2d
     4ec:	beq	570 <main+0x32c>
     4f0:	ldr	r0, [fp, #-12]
     4f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
     4f8:	add	r1, r1, #1
     4fc:	add	r0, r0, r1, lsl #2
     500:	ldr	r0, [r0]
     504:	movw	r1, #0
     508:	movt	r1, #0
     50c:	bl	0 <coda_expression_from_string>
     510:	cmp	r0, #0
     514:	beq	560 <main+0x31c>
     518:	movw	r0, #0
     51c:	movt	r0, #0
     520:	ldr	r0, [r0]
     524:	str	r0, [fp, #-44]	; 0xffffffd4
     528:	bl	0 <coda_get_errno>
     52c:	ldr	r0, [r0]
     530:	bl	0 <coda_errno_to_string>
     534:	ldr	r1, [fp, #-44]	; 0xffffffd4
     538:	str	r0, [fp, #-48]	; 0xffffffd0
     53c:	mov	r0, r1
     540:	movw	r1, #0
     544:	movt	r1, #0
     548:	ldr	r2, [fp, #-48]	; 0xffffffd0
     54c:	bl	0 <fprintf>
     550:	movw	r1, #1
     554:	str	r0, [fp, #-52]	; 0xffffffcc
     558:	mov	r0, r1
     55c:	bl	0 <exit>
     560:	ldr	r0, [fp, #-24]	; 0xffffffe8
     564:	add	r0, r0, #1
     568:	str	r0, [fp, #-24]	; 0xffffffe8
     56c:	b	5b8 <main+0x374>
     570:	ldr	r0, [fp, #-12]
     574:	ldr	r1, [fp, #-24]	; 0xffffffe8
     578:	add	r0, r0, r1, lsl #2
     57c:	ldr	r0, [r0]
     580:	ldrb	r0, [r0]
     584:	cmp	r0, #45	; 0x2d
     588:	beq	590 <main+0x34c>
     58c:	b	5d0 <main+0x38c>
     590:	movw	r0, #0
     594:	movt	r0, #0
     598:	ldr	r0, [r0]
     59c:	movw	r1, #0
     5a0:	movt	r1, #0
     5a4:	bl	0 <fprintf>
     5a8:	str	r0, [fp, #-56]	; 0xffffffc8
     5ac:	bl	c6c <print_help>
     5b0:	movw	r0, #1
     5b4:	bl	0 <exit>
     5b8:	b	5bc <main+0x378>
     5bc:	b	5c0 <main+0x37c>
     5c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5c4:	add	r0, r0, #1
     5c8:	str	r0, [fp, #-24]	; 0xffffffe8
     5cc:	b	3e0 <main+0x19c>
     5d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5d4:	ldr	r1, [fp, #-8]
     5d8:	cmp	r0, r1
     5dc:	blt	608 <main+0x3c4>
     5e0:	movw	r0, #0
     5e4:	movt	r0, #0
     5e8:	ldr	r0, [r0]
     5ec:	movw	r1, #0
     5f0:	movt	r1, #0
     5f4:	bl	0 <fprintf>
     5f8:	str	r0, [fp, #-60]	; 0xffffffc4
     5fc:	bl	c6c <print_help>
     600:	movw	r0, #1
     604:	bl	0 <exit>
     608:	ldr	r0, [fp, #-12]
     60c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     610:	add	r0, r0, r1, lsl #2
     614:	ldr	r0, [r0]
     618:	movw	r1, #0
     61c:	movt	r1, #0
     620:	bl	0 <coda_expression_from_string>
     624:	cmp	r0, #0
     628:	beq	674 <main+0x430>
     62c:	movw	r0, #0
     630:	movt	r0, #0
     634:	ldr	r0, [r0]
     638:	str	r0, [fp, #-64]	; 0xffffffc0
     63c:	bl	0 <coda_get_errno>
     640:	ldr	r0, [r0]
     644:	bl	0 <coda_errno_to_string>
     648:	ldr	r1, [fp, #-64]	; 0xffffffc0
     64c:	str	r0, [fp, #-68]	; 0xffffffbc
     650:	mov	r0, r1
     654:	movw	r1, #0
     658:	movt	r1, #0
     65c:	ldr	r2, [fp, #-68]	; 0xffffffbc
     660:	bl	0 <fprintf>
     664:	movw	r1, #1
     668:	str	r0, [fp, #-72]	; 0xffffffb8
     66c:	mov	r0, r1
     670:	bl	0 <exit>
     674:	ldr	r0, [fp, #-24]	; 0xffffffe8
     678:	add	r0, r0, #1
     67c:	str	r0, [fp, #-24]	; 0xffffffe8
     680:	movw	r0, #0
     684:	movt	r0, #0
     688:	ldr	r0, [r0]
     68c:	movw	r1, #0
     690:	movt	r1, #0
     694:	bl	0 <coda_expression_get_type>
     698:	cmp	r0, #0
     69c:	beq	6e8 <main+0x4a4>
     6a0:	movw	r0, #0
     6a4:	movt	r0, #0
     6a8:	ldr	r0, [r0]
     6ac:	str	r0, [sp, #76]	; 0x4c
     6b0:	bl	0 <coda_get_errno>
     6b4:	ldr	r0, [r0]
     6b8:	bl	0 <coda_errno_to_string>
     6bc:	ldr	r1, [sp, #76]	; 0x4c
     6c0:	str	r0, [sp, #72]	; 0x48
     6c4:	mov	r0, r1
     6c8:	movw	r1, #0
     6cc:	movt	r1, #0
     6d0:	ldr	r2, [sp, #72]	; 0x48
     6d4:	bl	0 <fprintf>
     6d8:	movw	r1, #1
     6dc:	str	r0, [sp, #68]	; 0x44
     6e0:	mov	r0, r1
     6e4:	bl	0 <exit>
     6e8:	movw	r0, #0
     6ec:	movt	r0, #0
     6f0:	ldr	r0, [r0]
     6f4:	cmp	r0, #4
     6f8:	beq	710 <main+0x4cc>
     6fc:	movw	r0, #0
     700:	movt	r0, #0
     704:	ldr	r0, [r0]
     708:	cmp	r0, #5
     70c:	bne	760 <main+0x51c>
     710:	movw	r0, #0
     714:	movt	r0, #0
     718:	ldr	r0, [r0]
     71c:	movw	r1, #0
     720:	movt	r1, #0
     724:	ldr	r1, [r1]
     728:	str	r0, [sp, #64]	; 0x40
     72c:	mov	r0, r1
     730:	bl	0 <coda_expression_get_type_name>
     734:	ldr	r1, [sp, #64]	; 0x40
     738:	str	r0, [sp, #60]	; 0x3c
     73c:	mov	r0, r1
     740:	movw	r1, #0
     744:	movt	r1, #0
     748:	ldr	r2, [sp, #60]	; 0x3c
     74c:	bl	0 <fprintf>
     750:	movw	r1, #1
     754:	str	r0, [sp, #56]	; 0x38
     758:	mov	r0, r1
     75c:	bl	0 <exit>
     760:	ldr	r0, [fp, #-20]	; 0xffffffec
     764:	cmp	r0, #0
     768:	beq	7b0 <main+0x56c>
     76c:	movw	r0, #0
     770:	movt	r0, #0
     774:	ldr	r0, [r0]
     778:	bl	0 <coda_expression_delete>
     77c:	movw	r0, #0
     780:	movt	r0, #0
     784:	ldr	r0, [r0]
     788:	movw	r1, #0
     78c:	cmp	r0, r1
     790:	beq	7a4 <main+0x560>
     794:	movw	r0, #0
     798:	movt	r0, #0
     79c:	ldr	r0, [r0]
     7a0:	bl	0 <coda_expression_delete>
     7a4:	movw	r0, #0
     7a8:	str	r0, [fp, #-4]
     7ac:	b	9cc <main+0x788>
     7b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7b4:	ldr	r1, [fp, #-8]
     7b8:	cmp	r0, r1
     7bc:	bge	8b0 <main+0x66c>
     7c0:	bl	0 <coda_init>
     7c4:	cmp	r0, #0
     7c8:	beq	814 <main+0x5d0>
     7cc:	movw	r0, #0
     7d0:	movt	r0, #0
     7d4:	ldr	r0, [r0]
     7d8:	str	r0, [sp, #52]	; 0x34
     7dc:	bl	0 <coda_get_errno>
     7e0:	ldr	r0, [r0]
     7e4:	bl	0 <coda_errno_to_string>
     7e8:	ldr	r1, [sp, #52]	; 0x34
     7ec:	str	r0, [sp, #48]	; 0x30
     7f0:	mov	r0, r1
     7f4:	movw	r1, #0
     7f8:	movt	r1, #0
     7fc:	ldr	r2, [sp, #48]	; 0x30
     800:	bl	0 <fprintf>
     804:	movw	r1, #1
     808:	str	r0, [sp, #44]	; 0x2c
     80c:	mov	r0, r1
     810:	bl	0 <exit>
     814:	ldr	r0, [fp, #-16]
     818:	bl	0 <coda_set_option_perform_conversions>
     81c:	ldr	r1, [fp, #-8]
     820:	ldr	r2, [fp, #-24]	; 0xffffffe8
     824:	sub	r1, r1, r2
     828:	ldr	r3, [fp, #-12]
     82c:	add	r2, r3, r2, lsl #2
     830:	movw	r3, #0
     834:	str	r0, [sp, #40]	; 0x28
     838:	mov	r0, r3
     83c:	movw	ip, #0
     840:	movt	ip, #0
     844:	str	r3, [sp, #36]	; 0x24
     848:	mov	r3, ip
     84c:	ldr	ip, [sp, #36]	; 0x24
     850:	str	ip, [sp]
     854:	bl	0 <coda_match_filefilter>
     858:	cmp	r0, #0
     85c:	beq	8a8 <main+0x664>
     860:	movw	r0, #0
     864:	movt	r0, #0
     868:	ldr	r0, [r0]
     86c:	str	r0, [sp, #32]
     870:	bl	0 <coda_get_errno>
     874:	ldr	r0, [r0]
     878:	bl	0 <coda_errno_to_string>
     87c:	ldr	r1, [sp, #32]
     880:	str	r0, [sp, #28]
     884:	mov	r0, r1
     888:	movw	r1, #0
     88c:	movt	r1, #0
     890:	ldr	r2, [sp, #28]
     894:	bl	0 <fprintf>
     898:	movw	r1, #1
     89c:	str	r0, [sp, #24]
     8a0:	mov	r0, r1
     8a4:	bl	0 <exit>
     8a8:	bl	0 <coda_done>
     8ac:	b	98c <main+0x748>
     8b0:	movw	r0, #0
     8b4:	movt	r0, #0
     8b8:	ldr	r0, [r0]
     8bc:	movw	r1, #0
     8c0:	cmp	r0, r1
     8c4:	beq	8f0 <main+0x6ac>
     8c8:	movw	r0, #0
     8cc:	movt	r0, #0
     8d0:	ldr	r0, [r0]
     8d4:	movw	r1, #0
     8d8:	movt	r1, #0
     8dc:	bl	0 <fprintf>
     8e0:	movw	r1, #1
     8e4:	str	r0, [sp, #20]
     8e8:	mov	r0, r1
     8ec:	bl	0 <exit>
     8f0:	movw	r0, #0
     8f4:	movt	r0, #0
     8f8:	ldr	r0, [r0]
     8fc:	bl	0 <coda_expression_is_constant>
     900:	cmp	r0, #0
     904:	bne	930 <main+0x6ec>
     908:	movw	r0, #0
     90c:	movt	r0, #0
     910:	ldr	r0, [r0]
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	bl	0 <fprintf>
     920:	movw	r1, #1
     924:	str	r0, [sp, #16]
     928:	mov	r0, r1
     92c:	bl	0 <exit>
     930:	movw	r0, #0
     934:	bl	9d8 <eval_expression>
     938:	cmp	r0, #0
     93c:	beq	988 <main+0x744>
     940:	movw	r0, #0
     944:	movt	r0, #0
     948:	ldr	r0, [r0]
     94c:	str	r0, [sp, #12]
     950:	bl	0 <coda_get_errno>
     954:	ldr	r0, [r0]
     958:	bl	0 <coda_errno_to_string>
     95c:	ldr	r1, [sp, #12]
     960:	str	r0, [sp, #8]
     964:	mov	r0, r1
     968:	movw	r1, #0
     96c:	movt	r1, #0
     970:	ldr	r2, [sp, #8]
     974:	bl	0 <fprintf>
     978:	movw	r1, #1
     97c:	str	r0, [sp, #4]
     980:	mov	r0, r1
     984:	bl	0 <exit>
     988:	b	98c <main+0x748>
     98c:	movw	r0, #0
     990:	movt	r0, #0
     994:	ldr	r0, [r0]
     998:	bl	0 <coda_expression_delete>
     99c:	movw	r0, #0
     9a0:	movt	r0, #0
     9a4:	ldr	r0, [r0]
     9a8:	movw	r1, #0
     9ac:	cmp	r0, r1
     9b0:	beq	9c4 <main+0x780>
     9b4:	movw	r0, #0
     9b8:	movt	r0, #0
     9bc:	ldr	r0, [r0]
     9c0:	bl	0 <coda_expression_delete>
     9c4:	movw	r0, #0
     9c8:	str	r0, [fp, #-4]
     9cc:	ldr	r0, [fp, #-4]
     9d0:	mov	sp, fp
     9d4:	pop	{fp, pc}

000009d8 <eval_expression>:
     9d8:	push	{fp, lr}
     9dc:	mov	fp, sp
     9e0:	sub	sp, sp, #88	; 0x58
     9e4:	str	r0, [fp, #-8]
     9e8:	movw	r0, #0
     9ec:	movt	r0, #0
     9f0:	ldr	r0, [r0]
     9f4:	cmp	r0, #5
     9f8:	str	r0, [sp, #20]
     9fc:	bhi	c58 <eval_expression+0x280>
     a00:	add	r0, pc, #8
     a04:	ldr	r1, [sp, #20]
     a08:	ldr	r0, [r0, r1, lsl #2]
     a0c:	mov	pc, r0
     a10:	.word	0x00000a28
     a14:	.word	0x00000ac0
     a18:	.word	0x00000b38
     a1c:	.word	0x00000ba4
     a20:	.word	0x00000c38
     a24:	.word	0x00000c38
     a28:	movw	r0, #0
     a2c:	movt	r0, #0
     a30:	ldr	r0, [r0]
     a34:	ldr	r1, [fp, #-8]
     a38:	sub	r2, fp, #12
     a3c:	bl	0 <coda_expression_eval_bool>
     a40:	cmp	r0, #0
     a44:	beq	a7c <eval_expression+0xa4>
     a48:	bl	0 <coda_get_errno>
     a4c:	ldr	r0, [r0]
     a50:	bl	0 <coda_errno_to_string>
     a54:	mvn	r1, #400	; 0x190
     a58:	str	r0, [sp, #16]
     a5c:	mov	r0, r1
     a60:	movw	r1, #0
     a64:	movt	r1, #0
     a68:	ldr	r2, [sp, #16]
     a6c:	bl	0 <coda_set_error>
     a70:	mvn	r0, #0
     a74:	str	r0, [fp, #-4]
     a78:	b	c60 <eval_expression+0x288>
     a7c:	ldr	r0, [fp, #-12]
     a80:	cmp	r0, #0
     a84:	movw	r0, #0
     a88:	movne	r0, #1
     a8c:	tst	r0, #1
     a90:	movw	r0, #0
     a94:	movt	r0, #0
     a98:	movw	r1, #0
     a9c:	movt	r1, #0
     aa0:	movne	r0, r1
     aa4:	movw	r1, #0
     aa8:	movt	r1, #0
     aac:	str	r0, [sp, #12]
     ab0:	mov	r0, r1
     ab4:	ldr	r1, [sp, #12]
     ab8:	bl	0 <printf>
     abc:	b	c58 <eval_expression+0x280>
     ac0:	movw	r0, #0
     ac4:	movt	r0, #0
     ac8:	ldr	r0, [r0]
     acc:	ldr	r1, [fp, #-8]
     ad0:	sub	r2, fp, #24
     ad4:	bl	0 <coda_expression_eval_integer>
     ad8:	cmp	r0, #0
     adc:	beq	b14 <eval_expression+0x13c>
     ae0:	bl	0 <coda_get_errno>
     ae4:	ldr	r0, [r0]
     ae8:	bl	0 <coda_errno_to_string>
     aec:	mvn	r1, #400	; 0x190
     af0:	str	r0, [sp, #8]
     af4:	mov	r0, r1
     af8:	movw	r1, #0
     afc:	movt	r1, #0
     b00:	ldr	r2, [sp, #8]
     b04:	bl	0 <coda_set_error>
     b08:	mvn	r0, #0
     b0c:	str	r0, [fp, #-4]
     b10:	b	c60 <eval_expression+0x288>
     b14:	add	r2, sp, #43	; 0x2b
     b18:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b1c:	ldr	r1, [fp, #-20]	; 0xffffffec
     b20:	bl	0 <coda_str64>
     b24:	add	r1, sp, #43	; 0x2b
     b28:	movw	r0, #0
     b2c:	movt	r0, #0
     b30:	bl	0 <printf>
     b34:	b	c58 <eval_expression+0x280>
     b38:	movw	r0, #0
     b3c:	movt	r0, #0
     b40:	ldr	r0, [r0]
     b44:	ldr	r1, [fp, #-8]
     b48:	add	r2, sp, #32
     b4c:	bl	0 <coda_expression_eval_float>
     b50:	cmp	r0, #0
     b54:	beq	b8c <eval_expression+0x1b4>
     b58:	bl	0 <coda_get_errno>
     b5c:	ldr	r0, [r0]
     b60:	bl	0 <coda_errno_to_string>
     b64:	mvn	r1, #400	; 0x190
     b68:	str	r0, [sp, #4]
     b6c:	mov	r0, r1
     b70:	movw	r1, #0
     b74:	movt	r1, #0
     b78:	ldr	r2, [sp, #4]
     b7c:	bl	0 <coda_set_error>
     b80:	mvn	r0, #0
     b84:	str	r0, [fp, #-4]
     b88:	b	c60 <eval_expression+0x288>
     b8c:	vldr	d16, [sp, #32]
     b90:	movw	r0, #0
     b94:	movt	r0, #0
     b98:	vmov	r2, r3, d16
     b9c:	bl	0 <printf>
     ba0:	b	c58 <eval_expression+0x280>
     ba4:	movw	r0, #0
     ba8:	str	r0, [sp, #28]
     bac:	movw	r0, #0
     bb0:	movt	r0, #0
     bb4:	ldr	r0, [r0]
     bb8:	ldr	r1, [fp, #-8]
     bbc:	add	r2, sp, #28
     bc0:	add	r3, sp, #24
     bc4:	bl	0 <coda_expression_eval_string>
     bc8:	cmp	r0, #0
     bcc:	beq	c04 <eval_expression+0x22c>
     bd0:	bl	0 <coda_get_errno>
     bd4:	ldr	r0, [r0]
     bd8:	bl	0 <coda_errno_to_string>
     bdc:	mvn	r1, #400	; 0x190
     be0:	str	r0, [sp]
     be4:	mov	r0, r1
     be8:	movw	r1, #0
     bec:	movt	r1, #0
     bf0:	ldr	r2, [sp]
     bf4:	bl	0 <coda_set_error>
     bf8:	mvn	r0, #0
     bfc:	str	r0, [fp, #-4]
     c00:	b	c60 <eval_expression+0x288>
     c04:	ldr	r0, [sp, #28]
     c08:	ldr	r1, [sp, #24]
     c0c:	bl	fc8 <generate_escaped_string>
     c10:	movw	r0, #0
     c14:	movt	r0, #0
     c18:	bl	0 <printf>
     c1c:	ldr	r1, [sp, #28]
     c20:	movw	r2, #0
     c24:	cmp	r1, r2
     c28:	beq	c34 <eval_expression+0x25c>
     c2c:	ldr	r0, [sp, #28]
     c30:	bl	0 <free>
     c34:	b	c58 <eval_expression+0x280>
     c38:	movw	r0, #0
     c3c:	movt	r0, #0
     c40:	movw	r1, #0
     c44:	movt	r1, #0
     c48:	movw	r2, #230	; 0xe6
     c4c:	movw	r3, #0
     c50:	movt	r3, #0
     c54:	bl	0 <__assert_fail>
     c58:	movw	r0, #0
     c5c:	str	r0, [fp, #-4]
     c60:	ldr	r0, [fp, #-4]
     c64:	mov	sp, fp
     c68:	pop	{fp, pc}

00000c6c <print_help>:
     c6c:	push	{fp, lr}
     c70:	mov	fp, sp
     c74:	sub	sp, sp, #152	; 0x98
     c78:	movw	r0, #0
     c7c:	movt	r0, #0
     c80:	bl	0 <printf>
     c84:	movw	r1, #0
     c88:	movt	r1, #0
     c8c:	str	r0, [fp, #-4]
     c90:	mov	r0, r1
     c94:	bl	0 <printf>
     c98:	movw	r1, #0
     c9c:	movt	r1, #0
     ca0:	str	r0, [fp, #-8]
     ca4:	mov	r0, r1
     ca8:	bl	0 <printf>
     cac:	movw	r1, #0
     cb0:	movt	r1, #0
     cb4:	str	r0, [fp, #-12]
     cb8:	mov	r0, r1
     cbc:	bl	0 <printf>
     cc0:	movw	r1, #0
     cc4:	movt	r1, #0
     cc8:	str	r0, [fp, #-16]
     ccc:	mov	r0, r1
     cd0:	bl	0 <printf>
     cd4:	movw	r1, #0
     cd8:	movt	r1, #0
     cdc:	str	r0, [fp, #-20]	; 0xffffffec
     ce0:	mov	r0, r1
     ce4:	bl	0 <printf>
     ce8:	movw	r1, #0
     cec:	movt	r1, #0
     cf0:	str	r0, [fp, #-24]	; 0xffffffe8
     cf4:	mov	r0, r1
     cf8:	bl	0 <printf>
     cfc:	movw	r1, #0
     d00:	movt	r1, #0
     d04:	str	r0, [fp, #-28]	; 0xffffffe4
     d08:	mov	r0, r1
     d0c:	bl	0 <printf>
     d10:	movw	r1, #0
     d14:	movt	r1, #0
     d18:	str	r0, [fp, #-32]	; 0xffffffe0
     d1c:	mov	r0, r1
     d20:	bl	0 <printf>
     d24:	movw	r1, #0
     d28:	movt	r1, #0
     d2c:	str	r0, [fp, #-36]	; 0xffffffdc
     d30:	mov	r0, r1
     d34:	bl	0 <printf>
     d38:	movw	r1, #0
     d3c:	movt	r1, #0
     d40:	str	r0, [fp, #-40]	; 0xffffffd8
     d44:	mov	r0, r1
     d48:	bl	0 <printf>
     d4c:	movw	r1, #0
     d50:	movt	r1, #0
     d54:	str	r0, [fp, #-44]	; 0xffffffd4
     d58:	mov	r0, r1
     d5c:	bl	0 <printf>
     d60:	movw	r1, #0
     d64:	movt	r1, #0
     d68:	str	r0, [fp, #-48]	; 0xffffffd0
     d6c:	mov	r0, r1
     d70:	bl	0 <printf>
     d74:	movw	r1, #0
     d78:	movt	r1, #0
     d7c:	str	r0, [fp, #-52]	; 0xffffffcc
     d80:	mov	r0, r1
     d84:	bl	0 <printf>
     d88:	movw	r1, #0
     d8c:	movt	r1, #0
     d90:	str	r0, [fp, #-56]	; 0xffffffc8
     d94:	mov	r0, r1
     d98:	bl	0 <printf>
     d9c:	movw	r1, #0
     da0:	movt	r1, #0
     da4:	str	r0, [fp, #-60]	; 0xffffffc4
     da8:	mov	r0, r1
     dac:	bl	0 <printf>
     db0:	movw	r1, #0
     db4:	movt	r1, #0
     db8:	str	r0, [fp, #-64]	; 0xffffffc0
     dbc:	mov	r0, r1
     dc0:	bl	0 <printf>
     dc4:	movw	r1, #0
     dc8:	movt	r1, #0
     dcc:	str	r0, [fp, #-68]	; 0xffffffbc
     dd0:	mov	r0, r1
     dd4:	bl	0 <printf>
     dd8:	movw	r1, #0
     ddc:	movt	r1, #0
     de0:	str	r0, [fp, #-72]	; 0xffffffb8
     de4:	mov	r0, r1
     de8:	bl	0 <printf>
     dec:	movw	r1, #0
     df0:	movt	r1, #0
     df4:	str	r0, [sp, #76]	; 0x4c
     df8:	mov	r0, r1
     dfc:	bl	0 <printf>
     e00:	movw	r1, #0
     e04:	movt	r1, #0
     e08:	str	r0, [sp, #72]	; 0x48
     e0c:	mov	r0, r1
     e10:	bl	0 <printf>
     e14:	movw	r1, #0
     e18:	movt	r1, #0
     e1c:	str	r0, [sp, #68]	; 0x44
     e20:	mov	r0, r1
     e24:	bl	0 <printf>
     e28:	movw	r1, #0
     e2c:	movt	r1, #0
     e30:	str	r0, [sp, #64]	; 0x40
     e34:	mov	r0, r1
     e38:	bl	0 <printf>
     e3c:	movw	r1, #0
     e40:	movt	r1, #0
     e44:	str	r0, [sp, #60]	; 0x3c
     e48:	mov	r0, r1
     e4c:	bl	0 <printf>
     e50:	movw	r1, #0
     e54:	movt	r1, #0
     e58:	str	r0, [sp, #56]	; 0x38
     e5c:	mov	r0, r1
     e60:	bl	0 <printf>
     e64:	movw	r1, #0
     e68:	movt	r1, #0
     e6c:	str	r0, [sp, #52]	; 0x34
     e70:	mov	r0, r1
     e74:	bl	0 <printf>
     e78:	movw	r1, #0
     e7c:	movt	r1, #0
     e80:	str	r0, [sp, #48]	; 0x30
     e84:	mov	r0, r1
     e88:	bl	0 <printf>
     e8c:	movw	r1, #0
     e90:	movt	r1, #0
     e94:	str	r0, [sp, #44]	; 0x2c
     e98:	mov	r0, r1
     e9c:	bl	0 <printf>
     ea0:	movw	r1, #0
     ea4:	movt	r1, #0
     ea8:	str	r0, [sp, #40]	; 0x28
     eac:	mov	r0, r1
     eb0:	bl	0 <printf>
     eb4:	movw	r1, #0
     eb8:	movt	r1, #0
     ebc:	str	r0, [sp, #36]	; 0x24
     ec0:	mov	r0, r1
     ec4:	bl	0 <printf>
     ec8:	movw	r1, #0
     ecc:	movt	r1, #0
     ed0:	str	r0, [sp, #32]
     ed4:	mov	r0, r1
     ed8:	bl	0 <printf>
     edc:	movw	r1, #0
     ee0:	movt	r1, #0
     ee4:	str	r0, [sp, #28]
     ee8:	mov	r0, r1
     eec:	bl	0 <printf>
     ef0:	movw	r1, #0
     ef4:	movt	r1, #0
     ef8:	str	r0, [sp, #24]
     efc:	mov	r0, r1
     f00:	bl	0 <printf>
     f04:	movw	r1, #0
     f08:	movt	r1, #0
     f0c:	str	r0, [sp, #20]
     f10:	mov	r0, r1
     f14:	bl	0 <printf>
     f18:	movw	r1, #0
     f1c:	movt	r1, #0
     f20:	str	r0, [sp, #16]
     f24:	mov	r0, r1
     f28:	bl	0 <printf>
     f2c:	movw	r1, #0
     f30:	movt	r1, #0
     f34:	str	r0, [sp, #12]
     f38:	mov	r0, r1
     f3c:	bl	0 <printf>
     f40:	movw	r1, #0
     f44:	movt	r1, #0
     f48:	str	r0, [sp, #8]
     f4c:	mov	r0, r1
     f50:	bl	0 <printf>
     f54:	movw	r1, #0
     f58:	movt	r1, #0
     f5c:	str	r0, [sp, #4]
     f60:	mov	r0, r1
     f64:	bl	0 <printf>
     f68:	mov	sp, fp
     f6c:	pop	{fp, pc}

00000f70 <print_version>:
     f70:	push	{fp, lr}
     f74:	mov	fp, sp
     f78:	sub	sp, sp, #16
     f7c:	bl	0 <coda_get_libcoda_version>
     f80:	movw	r1, #0
     f84:	movt	r1, #0
     f88:	str	r0, [fp, #-4]
     f8c:	mov	r0, r1
     f90:	ldr	r1, [fp, #-4]
     f94:	bl	0 <printf>
     f98:	movw	r1, #0
     f9c:	movt	r1, #0
     fa0:	str	r0, [sp, #8]
     fa4:	mov	r0, r1
     fa8:	bl	0 <printf>
     fac:	movw	r1, #0
     fb0:	movt	r1, #0
     fb4:	str	r0, [sp, #4]
     fb8:	mov	r0, r1
     fbc:	bl	0 <printf>
     fc0:	mov	sp, fp
     fc4:	pop	{fp, pc}

00000fc8 <generate_escaped_string>:
     fc8:	push	{fp, lr}
     fcc:	mov	fp, sp
     fd0:	sub	sp, sp, #16
     fd4:	str	r0, [fp, #-4]
     fd8:	str	r1, [sp, #8]
     fdc:	movw	r0, #0
     fe0:	str	r0, [sp, #4]
     fe4:	ldr	r0, [sp, #8]
     fe8:	cmp	r0, #0
     fec:	beq	1000 <generate_escaped_string+0x38>
     ff0:	ldr	r0, [fp, #-4]
     ff4:	movw	r1, #0
     ff8:	cmp	r0, r1
     ffc:	bne	1004 <generate_escaped_string+0x3c>
    1000:	b	12d0 <generate_escaped_string+0x308>
    1004:	ldr	r0, [sp, #8]
    1008:	cmp	r0, #0
    100c:	bge	101c <generate_escaped_string+0x54>
    1010:	ldr	r0, [fp, #-4]
    1014:	bl	0 <strlen>
    1018:	str	r0, [sp, #8]
    101c:	b	1020 <generate_escaped_string+0x58>
    1020:	ldr	r0, [sp, #4]
    1024:	ldr	r1, [sp, #8]
    1028:	cmp	r0, r1
    102c:	bge	12d0 <generate_escaped_string+0x308>
    1030:	ldr	r0, [fp, #-4]
    1034:	ldr	r1, [sp, #4]
    1038:	ldrb	r0, [r0, r1]
    103c:	sub	r0, r0, #7
    1040:	cmp	r0, #85	; 0x55
    1044:	str	r0, [sp]
    1048:	bhi	1254 <generate_escaped_string+0x28c>
    104c:	add	r0, pc, #8
    1050:	ldr	r1, [sp]
    1054:	ldr	r0, [r0, r1, lsl #2]
    1058:	mov	pc, r0
    105c:	.word	0x000011c4
    1060:	.word	0x000011d4
    1064:	.word	0x00001214
    1068:	.word	0x000011f4
    106c:	.word	0x00001224
    1070:	.word	0x000011e4
    1074:	.word	0x00001204
    1078:	.word	0x00001254
    107c:	.word	0x00001254
    1080:	.word	0x00001254
    1084:	.word	0x00001254
    1088:	.word	0x00001254
    108c:	.word	0x00001254
    1090:	.word	0x00001254
    1094:	.word	0x00001254
    1098:	.word	0x00001254
    109c:	.word	0x00001254
    10a0:	.word	0x00001254
    10a4:	.word	0x00001254
    10a8:	.word	0x00001254
    10ac:	.word	0x000011b4
    10b0:	.word	0x00001254
    10b4:	.word	0x00001254
    10b8:	.word	0x00001254
    10bc:	.word	0x00001254
    10c0:	.word	0x00001254
    10c4:	.word	0x00001254
    10c8:	.word	0x00001244
    10cc:	.word	0x00001254
    10d0:	.word	0x00001254
    10d4:	.word	0x00001254
    10d8:	.word	0x00001254
    10dc:	.word	0x00001254
    10e0:	.word	0x00001254
    10e4:	.word	0x00001254
    10e8:	.word	0x00001254
    10ec:	.word	0x00001254
    10f0:	.word	0x00001254
    10f4:	.word	0x00001254
    10f8:	.word	0x00001254
    10fc:	.word	0x00001254
    1100:	.word	0x00001254
    1104:	.word	0x00001254
    1108:	.word	0x00001254
    110c:	.word	0x00001254
    1110:	.word	0x00001254
    1114:	.word	0x00001254
    1118:	.word	0x00001254
    111c:	.word	0x00001254
    1120:	.word	0x00001254
    1124:	.word	0x00001254
    1128:	.word	0x00001254
    112c:	.word	0x00001254
    1130:	.word	0x00001254
    1134:	.word	0x00001254
    1138:	.word	0x00001254
    113c:	.word	0x00001254
    1140:	.word	0x00001254
    1144:	.word	0x00001254
    1148:	.word	0x00001254
    114c:	.word	0x00001254
    1150:	.word	0x00001254
    1154:	.word	0x00001254
    1158:	.word	0x00001254
    115c:	.word	0x00001254
    1160:	.word	0x00001254
    1164:	.word	0x00001254
    1168:	.word	0x00001254
    116c:	.word	0x00001254
    1170:	.word	0x00001254
    1174:	.word	0x00001254
    1178:	.word	0x00001254
    117c:	.word	0x00001254
    1180:	.word	0x00001254
    1184:	.word	0x00001254
    1188:	.word	0x00001254
    118c:	.word	0x00001254
    1190:	.word	0x00001254
    1194:	.word	0x00001254
    1198:	.word	0x00001254
    119c:	.word	0x00001254
    11a0:	.word	0x00001254
    11a4:	.word	0x00001254
    11a8:	.word	0x00001254
    11ac:	.word	0x00001254
    11b0:	.word	0x00001234
    11b4:	movw	r0, #0
    11b8:	movt	r0, #0
    11bc:	bl	0 <printf>
    11c0:	b	12c0 <generate_escaped_string+0x2f8>
    11c4:	movw	r0, #0
    11c8:	movt	r0, #0
    11cc:	bl	0 <printf>
    11d0:	b	12c0 <generate_escaped_string+0x2f8>
    11d4:	movw	r0, #0
    11d8:	movt	r0, #0
    11dc:	bl	0 <printf>
    11e0:	b	12c0 <generate_escaped_string+0x2f8>
    11e4:	movw	r0, #0
    11e8:	movt	r0, #0
    11ec:	bl	0 <printf>
    11f0:	b	12c0 <generate_escaped_string+0x2f8>
    11f4:	movw	r0, #0
    11f8:	movt	r0, #0
    11fc:	bl	0 <printf>
    1200:	b	12c0 <generate_escaped_string+0x2f8>
    1204:	movw	r0, #0
    1208:	movt	r0, #0
    120c:	bl	0 <printf>
    1210:	b	12c0 <generate_escaped_string+0x2f8>
    1214:	movw	r0, #0
    1218:	movt	r0, #0
    121c:	bl	0 <printf>
    1220:	b	12c0 <generate_escaped_string+0x2f8>
    1224:	movw	r0, #0
    1228:	movt	r0, #0
    122c:	bl	0 <printf>
    1230:	b	12c0 <generate_escaped_string+0x2f8>
    1234:	movw	r0, #0
    1238:	movt	r0, #0
    123c:	bl	0 <printf>
    1240:	b	12c0 <generate_escaped_string+0x2f8>
    1244:	movw	r0, #0
    1248:	movt	r0, #0
    124c:	bl	0 <printf>
    1250:	b	12c0 <generate_escaped_string+0x2f8>
    1254:	bl	0 <__ctype_b_loc>
    1258:	ldr	r0, [r0]
    125c:	ldr	r1, [fp, #-4]
    1260:	ldr	r2, [sp, #4]
    1264:	ldrb	r1, [r1, r2]
    1268:	mov	r2, r1
    126c:	add	r0, r0, r1, lsl #1
    1270:	ldrh	r0, [r0]
    1274:	and	r0, r0, #16384	; 0x4000
    1278:	cmp	r0, #0
    127c:	bne	12a0 <generate_escaped_string+0x2d8>
    1280:	ldr	r0, [fp, #-4]
    1284:	ldr	r1, [sp, #4]
    1288:	add	r0, r0, r1
    128c:	ldrb	r1, [r0]
    1290:	movw	r0, #0
    1294:	movt	r0, #0
    1298:	bl	0 <printf>
    129c:	b	12bc <generate_escaped_string+0x2f4>
    12a0:	ldr	r0, [fp, #-4]
    12a4:	ldr	r1, [sp, #4]
    12a8:	add	r0, r0, r1
    12ac:	ldrb	r1, [r0]
    12b0:	movw	r0, #0
    12b4:	movt	r0, #0
    12b8:	bl	0 <printf>
    12bc:	b	12c0 <generate_escaped_string+0x2f8>
    12c0:	ldr	r0, [sp, #4]
    12c4:	add	r0, r0, #1
    12c8:	str	r0, [sp, #4]
    12cc:	b	1020 <generate_escaped_string+0x58>
    12d0:	mov	sp, fp
    12d4:	pop	{fp, pc}
