
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-grib-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_grib_type_delete>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	sub	sp, sp, #8
   c:	str	r0, [sp, #4]
  10:	ldr	r0, [sp, #4]
  14:	movw	r1, #0
  18:	cmp	r0, r1
  1c:	beq	24 <coda_grib_type_delete+0x24>
  20:	b	44 <coda_grib_type_delete+0x44>
  24:	movw	r0, #0
  28:	movt	r0, #0
  2c:	movw	r1, #0
  30:	movt	r1, #0
  34:	movw	r2, #61	; 0x3d
  38:	movw	r3, #0
  3c:	movt	r3, #0
  40:	bl	0 <__assert_fail>
  44:	ldr	r0, [sp, #4]
  48:	ldr	r0, [r0]
  4c:	cmp	r0, #105	; 0x69
  50:	bne	58 <coda_grib_type_delete+0x58>
  54:	b	78 <coda_grib_type_delete+0x78>
  58:	movw	r0, #0
  5c:	movt	r0, #0
  60:	movw	r1, #0
  64:	movt	r1, #0
  68:	movw	r2, #62	; 0x3e
  6c:	movw	r3, #0
  70:	movt	r3, #0
  74:	bl	0 <__assert_fail>
  78:	ldr	r0, [sp, #4]
  7c:	ldr	r0, [r0, #4]
  80:	ldr	r0, [r0, #8]
  84:	cmp	r0, #1
  88:	bne	f0 <coda_grib_type_delete+0xf0>
  8c:	ldr	r0, [sp, #4]
  90:	ldr	r0, [r0, #12]
  94:	movw	r1, #0
  98:	cmp	r0, r1
  9c:	beq	ac <coda_grib_type_delete+0xac>
  a0:	ldr	r0, [sp, #4]
  a4:	ldr	r0, [r0, #12]
  a8:	bl	0 <coda_dynamic_type_delete>
  ac:	ldr	r0, [sp, #4]
  b0:	ldr	r0, [r0, #56]	; 0x38
  b4:	movw	r1, #0
  b8:	cmp	r0, r1
  bc:	beq	cc <coda_grib_type_delete+0xcc>
  c0:	ldr	r0, [sp, #4]
  c4:	ldr	r0, [r0, #56]	; 0x38
  c8:	bl	0 <free>
  cc:	ldr	r0, [sp, #4]
  d0:	ldr	r0, [r0, #60]	; 0x3c
  d4:	movw	r1, #0
  d8:	cmp	r0, r1
  dc:	beq	ec <coda_grib_type_delete+0xec>
  e0:	ldr	r0, [sp, #4]
  e4:	ldr	r0, [r0, #60]	; 0x3c
  e8:	bl	0 <free>
  ec:	b	f0 <coda_grib_type_delete+0xf0>
  f0:	ldr	r0, [sp, #4]
  f4:	ldr	r0, [r0, #4]
  f8:	movw	r1, #0
  fc:	cmp	r0, r1
 100:	beq	110 <coda_grib_type_delete+0x110>
 104:	ldr	r0, [sp, #4]
 108:	ldr	r0, [r0, #4]
 10c:	bl	0 <coda_type_release>
 110:	ldr	r0, [sp, #4]
 114:	bl	0 <free>
 118:	mov	sp, fp
 11c:	pop	{fp, pc}

00000120 <coda_grib_value_array_new>:
 120:	push	{fp, lr}
 124:	mov	fp, sp
 128:	sub	sp, sp, #40	; 0x28
 12c:	str	r0, [fp, #-8]
 130:	str	r1, [fp, #-12]
 134:	str	r3, [sp, #20]
 138:	str	r2, [sp, #16]
 13c:	ldr	r0, [fp, #-8]
 140:	movw	r1, #0
 144:	cmp	r0, r1
 148:	bne	174 <coda_grib_value_array_new+0x54>
 14c:	mvn	r0, #99	; 0x63
 150:	movw	r1, #0
 154:	movt	r1, #0
 158:	movw	r2, #0
 15c:	movt	r2, #0
 160:	movw	r3, #92	; 0x5c
 164:	bl	0 <coda_set_error>
 168:	movw	r0, #0
 16c:	str	r0, [fp, #-4]
 170:	b	364 <coda_grib_value_array_new+0x244>
 174:	ldr	r0, [fp, #-8]
 178:	ldr	r0, [r0, #40]	; 0x28
 17c:	ldr	r0, [r0, #8]
 180:	cmp	r0, #3
 184:	beq	1c0 <coda_grib_value_array_new+0xa0>
 188:	ldr	r0, [fp, #-8]
 18c:	ldr	r0, [r0, #40]	; 0x28
 190:	ldr	r0, [r0, #8]
 194:	bl	0 <coda_type_get_class_name>
 198:	ldr	lr, [pc, #476]	; 37c <coda_grib_value_array_new+0x25c>
 19c:	str	r0, [sp, #8]
 1a0:	mov	r0, lr
 1a4:	movw	r1, #0
 1a8:	movt	r1, #0
 1ac:	ldr	r2, [sp, #8]
 1b0:	bl	0 <coda_set_error>
 1b4:	movw	r0, #0
 1b8:	str	r0, [fp, #-4]
 1bc:	b	364 <coda_grib_value_array_new+0x244>
 1c0:	movw	r0, #64	; 0x40
 1c4:	bl	0 <malloc>
 1c8:	str	r0, [sp, #12]
 1cc:	ldr	r0, [sp, #12]
 1d0:	movw	lr, #0
 1d4:	cmp	r0, lr
 1d8:	bne	20c <coda_grib_value_array_new+0xec>
 1dc:	mvn	r0, #0
 1e0:	movw	r1, #0
 1e4:	movt	r1, #0
 1e8:	movw	r2, #64	; 0x40
 1ec:	movw	r3, #0
 1f0:	movt	r3, #0
 1f4:	movw	ip, #106	; 0x6a
 1f8:	str	ip, [sp]
 1fc:	bl	0 <coda_set_error>
 200:	movw	r0, #0
 204:	str	r0, [fp, #-4]
 208:	b	364 <coda_grib_value_array_new+0x244>
 20c:	vldr	d16, [pc, #348]	; 370 <coda_grib_value_array_new+0x250>
 210:	vldr	s0, [pc, #352]	; 378 <coda_grib_value_array_new+0x258>
 214:	ldr	r0, [sp, #12]
 218:	mov	r1, #105	; 0x69
 21c:	str	r1, [r0]
 220:	ldr	r0, [fp, #-8]
 224:	ldr	r1, [sp, #12]
 228:	str	r0, [r1, #4]
 22c:	ldr	r0, [fp, #-8]
 230:	ldr	r1, [r0, #4]
 234:	add	r1, r1, #1
 238:	str	r1, [r0, #4]
 23c:	ldr	r0, [fp, #-12]
 240:	ldr	r1, [sp, #12]
 244:	str	r0, [r1, #8]
 248:	ldr	r0, [sp, #12]
 24c:	mov	r1, #0
 250:	str	r1, [r0, #12]
 254:	ldr	r0, [sp, #16]
 258:	ldr	r1, [sp, #20]
 25c:	lsl	r1, r1, #3
 260:	orr	r1, r1, r0, lsr #29
 264:	lsl	r0, r0, #3
 268:	ldr	r2, [sp, #12]
 26c:	str	r0, [r2, #16]
 270:	str	r1, [r2, #20]
 274:	ldr	r0, [sp, #12]
 278:	movw	r1, #0
 27c:	str	r1, [r0, #24]
 280:	ldr	r0, [sp, #12]
 284:	movw	r2, #32
 288:	str	r2, [r0, #28]
 28c:	ldr	r0, [sp, #12]
 290:	movw	r2, #0
 294:	strh	r2, [r0, #32]
 298:	ldr	r0, [sp, #12]
 29c:	strh	r2, [r0, #34]	; 0x22
 2a0:	ldr	r0, [sp, #12]
 2a4:	vstr	s0, [r0, #36]	; 0x24
 2a8:	ldr	r0, [sp, #12]
 2ac:	vstr	d16, [r0, #40]	; 0x28
 2b0:	ldr	r0, [sp, #12]
 2b4:	vstr	d16, [r0, #48]	; 0x30
 2b8:	ldr	r0, [sp, #12]
 2bc:	str	r1, [r0, #56]	; 0x38
 2c0:	ldr	r0, [sp, #12]
 2c4:	str	r1, [r0, #60]	; 0x3c
 2c8:	movw	r0, #8
 2cc:	bl	0 <malloc>
 2d0:	ldr	r1, [sp, #12]
 2d4:	str	r0, [r1, #12]
 2d8:	ldr	r0, [sp, #12]
 2dc:	ldr	r0, [r0, #12]
 2e0:	movw	r1, #0
 2e4:	cmp	r0, r1
 2e8:	bne	324 <coda_grib_value_array_new+0x204>
 2ec:	ldr	r0, [sp, #12]
 2f0:	bl	0 <coda_grib_type_delete>
 2f4:	mvn	r0, #0
 2f8:	movw	r1, #0
 2fc:	movt	r1, #0
 300:	movw	r2, #8
 304:	movw	r3, #0
 308:	movt	r3, #0
 30c:	movw	lr, #130	; 0x82
 310:	str	lr, [sp]
 314:	bl	0 <coda_set_error>
 318:	movw	r0, #0
 31c:	str	r0, [fp, #-4]
 320:	b	364 <coda_grib_value_array_new+0x244>
 324:	ldr	r0, [sp, #12]
 328:	ldr	r0, [r0, #12]
 32c:	movw	r1, #105	; 0x69
 330:	str	r1, [r0]
 334:	ldr	r0, [fp, #-8]
 338:	ldr	r0, [r0, #40]	; 0x28
 33c:	ldr	r1, [sp, #12]
 340:	ldr	r1, [r1, #12]
 344:	str	r0, [r1, #4]
 348:	ldr	r0, [fp, #-8]
 34c:	ldr	r0, [r0, #40]	; 0x28
 350:	ldr	r1, [r0, #4]
 354:	add	r1, r1, #1
 358:	str	r1, [r0, #4]
 35c:	ldr	r0, [sp, #12]
 360:	str	r0, [fp, #-4]
 364:	ldr	r0, [fp, #-4]
 368:	mov	sp, fp
 36c:	pop	{fp, pc}
	...
 37c:	.word	0xfffffe70

00000380 <coda_grib_value_array_simple_packing_new>:
 380:	push	{r4, r5, fp, lr}
 384:	add	fp, sp, #8
 388:	sub	sp, sp, #104	; 0x68
 38c:	ldr	ip, [fp, #20]
 390:	ldr	lr, [fp, #16]
 394:	ldr	r4, [fp, #12]
 398:	ldr	r5, [fp, #8]
 39c:	str	r0, [fp, #-16]
 3a0:	str	r1, [fp, #-20]	; 0xffffffec
 3a4:	str	r3, [fp, #-28]	; 0xffffffe4
 3a8:	str	r2, [fp, #-32]	; 0xffffffe0
 3ac:	strh	r4, [fp, #-34]	; 0xffffffde
 3b0:	strh	lr, [fp, #-36]	; 0xffffffdc
 3b4:	vstr	s0, [fp, #-40]	; 0xffffffd8
 3b8:	ldr	r0, [fp, #-16]
 3bc:	ldr	r1, [fp, #-20]	; 0xffffffec
 3c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
 3c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
 3c8:	str	ip, [sp, #52]	; 0x34
 3cc:	str	r5, [sp, #48]	; 0x30
 3d0:	bl	120 <coda_grib_value_array_new>
 3d4:	str	r0, [fp, #-44]	; 0xffffffd4
 3d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 3dc:	movw	r1, #0
 3e0:	cmp	r0, r1
 3e4:	bne	3f4 <coda_grib_value_array_simple_packing_new+0x74>
 3e8:	movw	r0, #0
 3ec:	str	r0, [fp, #-12]
 3f0:	b	6c4 <coda_grib_value_array_simple_packing_new+0x344>
 3f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
 3f8:	movw	r1, #1
 3fc:	str	r1, [r0, #24]
 400:	ldr	r0, [fp, #8]
 404:	ldr	r1, [fp, #-44]	; 0xffffffd4
 408:	str	r0, [r1, #28]
 40c:	ldrh	r0, [fp, #-34]	; 0xffffffde
 410:	ldr	r1, [fp, #-44]	; 0xffffffd4
 414:	strh	r0, [r1, #32]
 418:	ldrh	r0, [fp, #-36]	; 0xffffffdc
 41c:	ldr	r1, [fp, #-44]	; 0xffffffd4
 420:	strh	r0, [r1, #34]	; 0x22
 424:	vldr	s0, [fp, #-40]	; 0xffffffd8
 428:	ldr	r0, [fp, #-44]	; 0xffffffd4
 42c:	vstr	s0, [r0, #36]	; 0x24
 430:	ldrsh	r1, [fp, #-36]	; 0xffffffdc
 434:	movw	r0, #2
 438:	bl	6d0 <fpow>
 43c:	ldrsh	r0, [fp, #-34]	; 0xffffffde
 440:	movw	r1, #0
 444:	sub	r1, r1, r0
 448:	movw	r0, #10
 44c:	vstr	d0, [sp, #40]	; 0x28
 450:	bl	6d0 <fpow>
 454:	vldr	d16, [sp, #40]	; 0x28
 458:	vmul.f64	d16, d16, d0
 45c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 460:	vstr	d16, [r0, #40]	; 0x28
 464:	vldr	s2, [fp, #-40]	; 0xffffffd8
 468:	vcvt.f64.f32	d16, s2
 46c:	ldrsh	r0, [fp, #-34]	; 0xffffffde
 470:	movw	r1, #0
 474:	sub	r1, r1, r0
 478:	movw	r0, #10
 47c:	vstr	d16, [sp, #32]
 480:	bl	6d0 <fpow>
 484:	vldr	d16, [sp, #32]
 488:	vmul.f64	d16, d16, d0
 48c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 490:	vstr	d16, [r0, #48]	; 0x30
 494:	ldr	r0, [fp, #-44]	; 0xffffffd4
 498:	movw	r1, #0
 49c:	str	r1, [r0, #56]	; 0x38
 4a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
 4a4:	str	r1, [r0, #60]	; 0x3c
 4a8:	ldr	r0, [fp, #20]
 4ac:	cmp	r0, r1
 4b0:	beq	6bc <coda_grib_value_array_simple_packing_new+0x33c>
 4b4:	ldr	r0, [fp, #-20]	; 0xffffffec
 4b8:	asr	r1, r0, #3
 4bc:	mov	r2, #1
 4c0:	add	r2, r2, r0, asr #3
 4c4:	tst	r0, #7
 4c8:	movne	r1, r2
 4cc:	str	r1, [fp, #-48]	; 0xffffffd0
 4d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
 4d4:	mov	r1, r0
 4d8:	str	r1, [sp, #28]
 4dc:	bl	0 <malloc>
 4e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
 4e4:	str	r0, [r1, #56]	; 0x38
 4e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
 4ec:	ldr	r0, [r0, #56]	; 0x38
 4f0:	movw	r1, #0
 4f4:	cmp	r0, r1
 4f8:	bne	548 <coda_grib_value_array_simple_packing_new+0x1c8>
 4fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
 500:	bl	0 <coda_grib_type_delete>
 504:	ldr	r0, [fp, #-48]	; 0xffffffd0
 508:	mov	lr, r0
 50c:	mvn	r1, #0
 510:	str	r0, [sp, #24]
 514:	mov	r0, r1
 518:	movw	r1, #0
 51c:	movt	r1, #0
 520:	ldr	r2, [sp, #24]
 524:	movw	r3, #0
 528:	movt	r3, #0
 52c:	movw	ip, #173	; 0xad
 530:	str	ip, [sp]
 534:	str	lr, [sp, #20]
 538:	bl	0 <coda_set_error>
 53c:	movw	r0, #0
 540:	str	r0, [fp, #-12]
 544:	b	6c4 <coda_grib_value_array_simple_packing_new+0x344>
 548:	ldr	r0, [fp, #-44]	; 0xffffffd4
 54c:	ldr	r0, [r0, #56]	; 0x38
 550:	ldr	r1, [fp, #20]
 554:	ldr	r2, [fp, #-48]	; 0xffffffd0
 558:	bl	0 <memcpy>
 55c:	ldr	r1, [fp, #-48]	; 0xffffffd0
 560:	mov	r2, r1
 564:	str	r0, [sp, #16]
 568:	mov	r0, r1
 56c:	str	r2, [sp, #12]
 570:	bl	0 <malloc>
 574:	ldr	r1, [fp, #-44]	; 0xffffffd4
 578:	str	r0, [r1, #60]	; 0x3c
 57c:	ldr	r0, [fp, #-44]	; 0xffffffd4
 580:	ldr	r0, [r0, #60]	; 0x3c
 584:	movw	r1, #0
 588:	cmp	r0, r1
 58c:	bne	5dc <coda_grib_value_array_simple_packing_new+0x25c>
 590:	ldr	r0, [fp, #-44]	; 0xffffffd4
 594:	bl	0 <coda_grib_type_delete>
 598:	ldr	r0, [fp, #-48]	; 0xffffffd0
 59c:	mov	lr, r0
 5a0:	mvn	r1, #0
 5a4:	str	r0, [sp, #8]
 5a8:	mov	r0, r1
 5ac:	movw	r1, #0
 5b0:	movt	r1, #0
 5b4:	ldr	r2, [sp, #8]
 5b8:	movw	r3, #0
 5bc:	movt	r3, #0
 5c0:	movw	ip, #183	; 0xb7
 5c4:	str	ip, [sp]
 5c8:	str	lr, [sp, #4]
 5cc:	bl	0 <coda_set_error>
 5d0:	movw	r0, #0
 5d4:	str	r0, [fp, #-12]
 5d8:	b	6c4 <coda_grib_value_array_simple_packing_new+0x344>
 5dc:	movw	r0, #0
 5e0:	str	r0, [fp, #-52]	; 0xffffffcc
 5e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
 5e8:	ldr	r1, [fp, #-48]	; 0xffffffd0
 5ec:	cmp	r0, r1
 5f0:	bge	6b8 <coda_grib_value_array_simple_packing_new+0x338>
 5f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
 5f8:	ldr	r0, [r0, #56]	; 0x38
 5fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
 600:	ldrb	r0, [r0, r1]
 604:	strb	r0, [fp, #-53]	; 0xffffffcb
 608:	ldrb	r0, [fp, #-53]	; 0xffffffcb
 60c:	ubfx	r1, r0, #6, #1
 610:	add	r1, r1, r0, lsr #7
 614:	ubfx	r2, r0, #5, #1
 618:	add	r1, r1, r2
 61c:	ubfx	r2, r0, #4, #1
 620:	add	r1, r1, r2
 624:	ubfx	r2, r0, #3, #1
 628:	add	r1, r1, r2
 62c:	ubfx	r2, r0, #2, #1
 630:	add	r1, r1, r2
 634:	ubfx	r2, r0, #1, #1
 638:	add	r1, r1, r2
 63c:	and	r0, r0, #1
 640:	add	r0, r1, r0
 644:	ldr	r1, [fp, #-44]	; 0xffffffd4
 648:	ldr	r1, [r1, #60]	; 0x3c
 64c:	ldr	r2, [fp, #-52]	; 0xffffffcc
 650:	strb	r0, [r1, r2]
 654:	ldr	r0, [fp, #-52]	; 0xffffffcc
 658:	asr	r1, r0, #31
 65c:	add	r1, r0, r1, lsr #28
 660:	bic	r1, r1, #15
 664:	sub	r0, r0, r1
 668:	cmp	r0, #0
 66c:	beq	6a4 <coda_grib_value_array_simple_packing_new+0x324>
 670:	ldr	r0, [fp, #-44]	; 0xffffffd4
 674:	ldr	r0, [r0, #60]	; 0x3c
 678:	ldr	r1, [fp, #-52]	; 0xffffffcc
 67c:	sub	r1, r1, #1
 680:	add	r0, r0, r1
 684:	ldrb	r0, [r0]
 688:	ldr	r1, [fp, #-44]	; 0xffffffd4
 68c:	ldr	r1, [r1, #60]	; 0x3c
 690:	ldr	r2, [fp, #-52]	; 0xffffffcc
 694:	add	r1, r1, r2
 698:	ldrb	r2, [r1]
 69c:	add	r0, r2, r0
 6a0:	strb	r0, [r1]
 6a4:	b	6a8 <coda_grib_value_array_simple_packing_new+0x328>
 6a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
 6ac:	add	r0, r0, #1
 6b0:	str	r0, [fp, #-52]	; 0xffffffcc
 6b4:	b	5e4 <coda_grib_value_array_simple_packing_new+0x264>
 6b8:	b	6bc <coda_grib_value_array_simple_packing_new+0x33c>
 6bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
 6c0:	str	r0, [fp, #-12]
 6c4:	ldr	r0, [fp, #-12]
 6c8:	sub	sp, fp, #8
 6cc:	pop	{r4, r5, fp, pc}

000006d0 <fpow>:
 6d0:	sub	sp, sp, #24
 6d4:	str	r0, [sp, #12]
 6d8:	str	r1, [sp, #8]
 6dc:	vmov.f64	d16, #112	; 0x3f800000  1.0
 6e0:	vstr	d16, [sp]
 6e4:	ldr	r0, [sp, #8]
 6e8:	cmp	r0, #0
 6ec:	bge	748 <fpow+0x78>
 6f0:	ldr	r0, [sp, #8]
 6f4:	movw	r1, #0
 6f8:	sub	r0, r1, r0
 6fc:	str	r0, [sp, #8]
 700:	ldr	r0, [sp, #8]
 704:	mvn	r1, #0
 708:	add	r1, r0, r1
 70c:	str	r1, [sp, #8]
 710:	cmp	r0, #0
 714:	beq	734 <fpow+0x64>
 718:	ldr	r0, [sp, #12]
 71c:	vmov	s0, r0
 720:	vcvt.f64.s32	d16, s0
 724:	vldr	d17, [sp]
 728:	vmul.f64	d16, d17, d16
 72c:	vstr	d16, [sp]
 730:	b	700 <fpow+0x30>
 734:	vldr	d16, [sp]
 738:	vmov.f64	d17, #112	; 0x3f800000  1.0
 73c:	vdiv.f64	d16, d17, d16
 740:	vstr	d16, [sp, #16]
 744:	b	788 <fpow+0xb8>
 748:	b	74c <fpow+0x7c>
 74c:	ldr	r0, [sp, #8]
 750:	mvn	r1, #0
 754:	add	r1, r0, r1
 758:	str	r1, [sp, #8]
 75c:	cmp	r0, #0
 760:	beq	780 <fpow+0xb0>
 764:	ldr	r0, [sp, #12]
 768:	vmov	s0, r0
 76c:	vcvt.f64.s32	d16, s0
 770:	vldr	d17, [sp]
 774:	vmul.f64	d16, d17, d16
 778:	vstr	d16, [sp]
 77c:	b	74c <fpow+0x7c>
 780:	vldr	d16, [sp]
 784:	vstr	d16, [sp, #16]
 788:	vldr	d0, [sp, #16]
 78c:	add	sp, sp, #24
 790:	bx	lr
