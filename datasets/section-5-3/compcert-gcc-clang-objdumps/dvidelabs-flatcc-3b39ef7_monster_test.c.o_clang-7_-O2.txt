
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/monster_test/CMakeFiles/monster_test.dir/monster_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_empty_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	cmp	r0, #0
       c:	beq	64 <verify_empty_monster+0x64>
      10:	ldr	r1, [r0, #4]
      14:	movw	r2, #20301	; 0x4f4d
      18:	movt	r2, #21326	; 0x534e
      1c:	cmp	r1, r2
      20:	bne	64 <verify_empty_monster+0x64>
      24:	ldr	r1, [r0]
      28:	ldr	r2, [r0, r1]!
      2c:	mov	r1, r0
      30:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
      34:	cmp	r2, #9
      38:	bls	70 <verify_empty_monster+0x70>
      3c:	ldrh	r2, [r1, #8]
      40:	cmp	r2, #0
      44:	beq	7c <verify_empty_monster+0x7c>
      48:	add	r0, r0, r2
      4c:	ldrh	r0, [r0]
      50:	cmp	r0, #100	; 0x64
      54:	bne	a0 <verify_empty_monster+0xa0>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	b	94 <verify_empty_monster+0x94>
      64:	movw	r0, #0
      68:	movt	r0, #0
      6c:	b	94 <verify_empty_monster+0x94>
      70:	mov	r0, #0
      74:	cmp	r2, #6
      78:	popcc	{fp, pc}
      7c:	ldrh	r0, [r1, #4]
      80:	cmp	r0, #0
      84:	moveq	r0, #0
      88:	popeq	{fp, pc}
      8c:	movw	r0, #0
      90:	movt	r0, #0
      94:	bl	0 <puts>
      98:	mvn	r0, #0
      9c:	pop	{fp, pc}
      a0:	movw	r0, #0
      a4:	movt	r0, #0
      a8:	b	94 <verify_empty_monster+0x94>

000000ac <test_enums>:
      ac:	mov	r0, #0
      b0:	bx	lr
      b4:	nop	{0}

000000b8 <test_type_aliases>:
      b8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
      bc:	add	fp, sp, #24
      c0:	sub	sp, sp, #16
      c4:	mov	r4, r0
      c8:	bl	0 <flatcc_builder_reset>
      cc:	mvn	r0, #0
      d0:	mov	r1, #1
      d4:	mov	r2, #0
      d8:	mov	r3, #1
      dc:	mov	r8, #0
      e0:	str	r1, [sp]
      e4:	str	r0, [sp, #4]
      e8:	mov	r0, r4
      ec:	mov	r1, #0
      f0:	bl	0 <flatcc_builder_create_vector>
      f4:	mov	r6, r0
      f8:	mvn	r0, #-536870912	; 0xe0000000
      fc:	mov	r1, #8
     100:	mov	r2, #0
     104:	mov	r3, #8
     108:	str	r1, [sp]
     10c:	str	r0, [sp, #4]
     110:	mov	r0, r4
     114:	mov	r1, #0
     118:	bl	0 <flatcc_builder_create_vector>
     11c:	movw	r1, #0
     120:	mov	r5, r0
     124:	mov	r0, r4
     128:	mov	r2, #0
     12c:	mov	r3, #0
     130:	movt	r1, #0
     134:	bl	0 <flatcc_builder_start_buffer>
     138:	cmp	r0, #0
     13c:	bne	160 <test_type_aliases+0xa8>
     140:	mov	r0, r4
     144:	mov	r1, #12
     148:	bl	0 <flatcc_builder_start_table>
     14c:	cmp	r0, #0
     150:	beq	2cc <test_type_aliases+0x214>
     154:	mov	r0, r4
     158:	mov	r1, r8
     15c:	bl	0 <flatcc_builder_end_buffer>
     160:	add	r1, sp, #12
     164:	mov	r0, r4
     168:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     16c:	ldr	r1, [sp, #12]
     170:	movw	r2, #0
     174:	movw	r3, #0
     178:	mov	r4, r0
     17c:	movt	r2, #0
     180:	movt	r3, #0
     184:	bl	0 <flatcc_verify_table_as_root>
     188:	cmp	r0, #0
     18c:	beq	1d0 <test_type_aliases+0x118>
     190:	mov	r5, r0
     194:	movw	r0, #0
     198:	ldr	r2, [sp, #12]
     19c:	mov	r1, r4
     1a0:	movt	r0, #0
     1a4:	ldr	r3, [r0]
     1a8:	movw	r0, #0
     1ac:	movt	r0, #0
     1b0:	bl	5d4 <hexdump>
     1b4:	mov	r0, r5
     1b8:	bl	0 <flatcc_verify_error_string>
     1bc:	mov	r1, r0
     1c0:	movw	r0, #0
     1c4:	movt	r0, #0
     1c8:	bl	0 <printf>
     1cc:	b	2b8 <test_type_aliases+0x200>
     1d0:	cmp	r4, #0
     1d4:	beq	588 <test_type_aliases+0x4d0>
     1d8:	ldr	r0, [r4, #4]
     1dc:	movw	r1, #20301	; 0x4f4d
     1e0:	movt	r1, #21326	; 0x534e
     1e4:	cmp	r0, r1
     1e8:	bne	588 <test_type_aliases+0x4d0>
     1ec:	ldr	r1, [r4]
     1f0:	mov	r6, r4
     1f4:	ldr	r2, [r6, r1]!
     1f8:	mov	r1, r6
     1fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     200:	cmp	r2, #5
     204:	bls	2a8 <test_type_aliases+0x1f0>
     208:	ldrh	r3, [r1, #4]
     20c:	cmp	r3, #0
     210:	beq	2a8 <test_type_aliases+0x1f0>
     214:	cmp	r2, #10
     218:	bcc	2a8 <test_type_aliases+0x1f0>
     21c:	ldrb	r3, [r6, r3]
     220:	cmp	r3, #128	; 0x80
     224:	bne	2a8 <test_type_aliases+0x1f0>
     228:	ldrh	r3, [r1, #8]
     22c:	cmp	r3, #0
     230:	beq	2a8 <test_type_aliases+0x1f0>
     234:	cmp	r2, #14
     238:	bcc	2a8 <test_type_aliases+0x1f0>
     23c:	add	r3, r6, r3
     240:	ldrh	r3, [r3]
     244:	cmp	r3, #32768	; 0x8000
     248:	bne	2a8 <test_type_aliases+0x1f0>
     24c:	ldrh	r3, [r1, #12]
     250:	cmp	r3, #0
     254:	beq	2a8 <test_type_aliases+0x1f0>
     258:	cmp	r2, #18
     25c:	bcc	2a8 <test_type_aliases+0x1f0>
     260:	ldr	r3, [r6, r3]
     264:	cmp	r3, #-2147483648	; 0x80000000
     268:	bne	2a8 <test_type_aliases+0x1f0>
     26c:	ldrh	r3, [r1, #16]
     270:	cmp	r3, #0
     274:	beq	2a8 <test_type_aliases+0x1f0>
     278:	mov	r0, r6
     27c:	ldr	r3, [r0, r3]!
     280:	ldr	r0, [r0, #4]
     284:	eor	r0, r0, #-2147483648	; 0x80000000
     288:	orrs	r0, r3, r0
     28c:	bne	2a8 <test_type_aliases+0x1f0>
     290:	ldrh	r3, [r1, #6]
     294:	cmp	r3, #0
     298:	beq	2a8 <test_type_aliases+0x1f0>
     29c:	ldrb	r0, [r6, r3]
     2a0:	cmp	r0, #255	; 0xff
     2a4:	beq	4bc <test_type_aliases+0x404>
     2a8:	movw	r0, #0
     2ac:	movt	r0, #0
     2b0:	bl	0 <puts>
     2b4:	mvn	r5, #0
     2b8:	mov	r0, r4
     2bc:	bl	0 <flatcc_builder_aligned_free>
     2c0:	mov	r0, r5
     2c4:	sub	sp, fp, #24
     2c8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
     2cc:	mov	r0, r4
     2d0:	mov	r1, #6
     2d4:	mov	r2, #8
     2d8:	mov	r3, #8
     2dc:	bl	0 <flatcc_builder_table_add>
     2e0:	cmp	r0, #0
     2e4:	beq	154 <test_type_aliases+0x9c>
     2e8:	mov	r9, #-2147483648	; 0x80000000
     2ec:	mov	r8, #0
     2f0:	mov	r1, #7
     2f4:	mov	r2, #8
     2f8:	mov	r3, #8
     2fc:	strd	r8, [r0]
     300:	mov	r0, r4
     304:	bl	0 <flatcc_builder_table_add>
     308:	cmp	r0, #0
     30c:	beq	154 <test_type_aliases+0x9c>
     310:	mvn	r1, #0
     314:	mov	r2, #8
     318:	mov	r3, #8
     31c:	str	r1, [r0]
     320:	str	r1, [r0, #4]
     324:	mov	r0, r4
     328:	mov	r1, #9
     32c:	bl	0 <flatcc_builder_table_add>
     330:	cmp	r0, #0
     334:	beq	154 <test_type_aliases+0x9c>
     338:	movw	r1, #26214	; 0x6666
     33c:	movw	r2, #26214	; 0x6666
     340:	mov	r3, #4
     344:	movt	r2, #26214	; 0x6666
     348:	movt	r1, #16386	; 0x4002
     34c:	str	r2, [r0]
     350:	str	r1, [r0, #4]
     354:	mov	r0, r4
     358:	mov	r1, #4
     35c:	mov	r2, #4
     360:	bl	0 <flatcc_builder_table_add>
     364:	cmp	r0, #0
     368:	beq	154 <test_type_aliases+0x9c>
     36c:	mov	r1, #-2147483648	; 0x80000000
     370:	mov	r2, #4
     374:	mov	r3, #4
     378:	str	r1, [r0]
     37c:	mov	r0, r4
     380:	mov	r1, #5
     384:	bl	0 <flatcc_builder_table_add>
     388:	cmp	r0, #0
     38c:	beq	154 <test_type_aliases+0x9c>
     390:	mvn	r1, #0
     394:	mov	r2, #4
     398:	mov	r3, #4
     39c:	str	r1, [r0]
     3a0:	mov	r0, r4
     3a4:	mov	r1, #8
     3a8:	bl	0 <flatcc_builder_table_add>
     3ac:	cmp	r0, #0
     3b0:	beq	154 <test_type_aliases+0x9c>
     3b4:	movw	r1, #13107	; 0x3333
     3b8:	cmp	r6, #0
     3bc:	movt	r1, #16403	; 0x4013
     3c0:	str	r1, [r0]
     3c4:	beq	154 <test_type_aliases+0x9c>
     3c8:	mov	r0, r4
     3cc:	mov	r1, #10
     3d0:	bl	0 <flatcc_builder_table_add_offset>
     3d4:	cmp	r0, #0
     3d8:	strne	r6, [r0]
     3dc:	cmpne	r5, #0
     3e0:	beq	154 <test_type_aliases+0x9c>
     3e4:	mov	r0, r4
     3e8:	mov	r1, #11
     3ec:	bl	0 <flatcc_builder_table_add_offset>
     3f0:	cmp	r0, #0
     3f4:	beq	154 <test_type_aliases+0x9c>
     3f8:	str	r5, [r0]
     3fc:	mov	r0, r4
     400:	mov	r1, #2
     404:	mov	r2, #2
     408:	mov	r3, #2
     40c:	bl	0 <flatcc_builder_table_add>
     410:	cmp	r0, #0
     414:	beq	154 <test_type_aliases+0x9c>
     418:	mov	r1, #32768	; 0x8000
     41c:	mov	r2, #2
     420:	mov	r3, #2
     424:	strh	r1, [r0]
     428:	mov	r0, r4
     42c:	mov	r1, #3
     430:	bl	0 <flatcc_builder_table_add>
     434:	cmp	r0, #0
     438:	beq	154 <test_type_aliases+0x9c>
     43c:	movw	r1, #65535	; 0xffff
     440:	mov	r2, #1
     444:	mov	r3, #1
     448:	mov	r8, #0
     44c:	strh	r1, [r0]
     450:	mov	r0, r4
     454:	mov	r1, #0
     458:	bl	0 <flatcc_builder_table_add>
     45c:	cmp	r0, #0
     460:	beq	154 <test_type_aliases+0x9c>
     464:	mov	r1, #128	; 0x80
     468:	mov	r2, #1
     46c:	mov	r3, #1
     470:	strb	r1, [r0]
     474:	mov	r0, r4
     478:	mov	r1, #1
     47c:	bl	0 <flatcc_builder_table_add>
     480:	cmp	r0, #0
     484:	beq	154 <test_type_aliases+0x9c>
     488:	mov	r1, #255	; 0xff
     48c:	mov	r2, #0
     490:	strb	r1, [r0]
     494:	movw	r1, #0
     498:	mov	r0, r4
     49c:	movt	r1, #0
     4a0:	bl	0 <flatcc_builder_check_required>
     4a4:	cmp	r0, #0
     4a8:	beq	5a8 <test_type_aliases+0x4f0>
     4ac:	mov	r0, r4
     4b0:	bl	0 <flatcc_builder_end_table>
     4b4:	mov	r8, r0
     4b8:	b	154 <test_type_aliases+0x9c>
     4bc:	ldrh	r3, [r1, #10]
     4c0:	cmp	r3, #0
     4c4:	beq	2a8 <test_type_aliases+0x1f0>
     4c8:	add	r0, r6, r3
     4cc:	movw	r3, #65535	; 0xffff
     4d0:	ldrh	r0, [r0]
     4d4:	cmp	r0, r3
     4d8:	bne	2a8 <test_type_aliases+0x1f0>
     4dc:	ldrh	r3, [r1, #14]
     4e0:	cmp	r3, #0
     4e4:	beq	2a8 <test_type_aliases+0x1f0>
     4e8:	cmp	r2, #20
     4ec:	bcc	2a8 <test_type_aliases+0x1f0>
     4f0:	ldr	r0, [r6, r3]
     4f4:	cmn	r0, #1
     4f8:	bne	2a8 <test_type_aliases+0x1f0>
     4fc:	ldrh	r3, [r1, #18]
     500:	cmp	r3, #0
     504:	beq	2a8 <test_type_aliases+0x1f0>
     508:	cmp	r2, #22
     50c:	bcc	2a8 <test_type_aliases+0x1f0>
     510:	mov	r0, r6
     514:	mvn	r5, #0
     518:	ldr	r3, [r0, r3]!
     51c:	ldr	r0, [r0, #4]
     520:	eor	r3, r3, r5
     524:	eor	r0, r0, r5
     528:	orrs	r0, r3, r0
     52c:	bne	2a8 <test_type_aliases+0x1f0>
     530:	ldrh	r3, [r1, #20]
     534:	cmp	r3, #0
     538:	beq	2a8 <test_type_aliases+0x1f0>
     53c:	cmp	r2, #24
     540:	bcc	2a8 <test_type_aliases+0x1f0>
     544:	add	r0, r6, r3
     548:	vldr	s2, [pc, #128]	; 5d0 <test_type_aliases+0x518>
     54c:	vldr	s0, [r0]
     550:	vcmp.f32	s0, s2
     554:	vmrs	APSR_nzcv, fpscr
     558:	bne	2a8 <test_type_aliases+0x1f0>
     55c:	ldrh	r1, [r1, #22]
     560:	cmp	r1, #0
     564:	beq	2a8 <test_type_aliases+0x1f0>
     568:	add	r0, r6, r1
     56c:	vldr	d16, [pc, #84]	; 5c8 <test_type_aliases+0x510>
     570:	vldr	d17, [r0]
     574:	vcmp.f64	d17, d16
     578:	vmrs	APSR_nzcv, fpscr
     57c:	bne	2a8 <test_type_aliases+0x1f0>
     580:	mov	r5, #0
     584:	b	2b8 <test_type_aliases+0x200>
     588:	movw	r0, #0
     58c:	movw	r1, #0
     590:	movw	r3, #0
     594:	movw	r2, #749	; 0x2ed
     598:	movt	r0, #0
     59c:	movt	r1, #0
     5a0:	movt	r3, #0
     5a4:	bl	0 <__assert_fail>
     5a8:	movw	r0, #0
     5ac:	movw	r1, #0
     5b0:	movw	r3, #0
     5b4:	mov	r2, #237	; 0xed
     5b8:	movt	r0, #0
     5bc:	movt	r1, #0
     5c0:	movt	r3, #0
     5c4:	bl	0 <__assert_fail>
     5c8:	.word	0x66666666
     5cc:	.word	0x40026666
     5d0:	.word	0x40133333

000005d4 <hexdump>:
     5d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d8:	add	fp, sp, #28
     5dc:	sub	sp, sp, #20
     5e0:	mov	r4, r3
     5e4:	mov	r5, r2
     5e8:	mov	r6, r1
     5ec:	cmp	r0, #0
     5f0:	beq	608 <hexdump+0x34>
     5f4:	movw	r1, #0
     5f8:	mov	r2, r0
     5fc:	mov	r0, r4
     600:	movt	r1, #0
     604:	bl	0 <fprintf>
     608:	cmp	r5, #0
     60c:	beq	6e8 <hexdump+0x114>
     610:	movw	sl, #0
     614:	add	r7, sp, #3
     618:	mov	r8, #0
     61c:	movt	sl, #0
     620:	ands	r9, r8, #15
     624:	beq	640 <hexdump+0x6c>
     628:	tst	r8, #7
     62c:	bne	670 <hexdump+0x9c>
     630:	mov	r0, #32
     634:	mov	r1, r4
     638:	bl	0 <fputc>
     63c:	b	670 <hexdump+0x9c>
     640:	cmp	r8, #0
     644:	beq	65c <hexdump+0x88>
     648:	movw	r1, #0
     64c:	mov	r0, r4
     650:	mov	r2, r7
     654:	movt	r1, #0
     658:	bl	0 <fprintf>
     65c:	movw	r1, #0
     660:	mov	r0, r4
     664:	mov	r2, r8
     668:	movt	r1, #0
     66c:	bl	0 <fprintf>
     670:	ldrb	r2, [r6, r8]
     674:	mov	r0, r4
     678:	mov	r1, sl
     67c:	bl	0 <fprintf>
     680:	ldrb	r0, [r6, r8]
     684:	add	r8, r8, #1
     688:	sub	r1, r0, #32
     68c:	uxtb	r1, r1
     690:	cmp	r1, #94	; 0x5e
     694:	mov	r1, #0
     698:	movwhi	r0, #46	; 0x2e
     69c:	cmp	r5, r8
     6a0:	strb	r0, [r7, r9]
     6a4:	add	r0, r7, r9
     6a8:	strb	r1, [r0, #1]
     6ac:	bne	620 <hexdump+0x4c>
     6b0:	tst	r5, #15
     6b4:	beq	6e8 <hexdump+0x114>
     6b8:	add	r6, r5, #1
     6bc:	movw	r5, #0
     6c0:	movt	r5, #0
     6c4:	mov	r0, r5
     6c8:	mov	r1, #3
     6cc:	mov	r2, #1
     6d0:	mov	r3, r4
     6d4:	bl	0 <fwrite>
     6d8:	add	r0, r6, #1
     6dc:	tst	r6, #15
     6e0:	mov	r6, r0
     6e4:	bne	6c4 <hexdump+0xf0>
     6e8:	movw	r1, #0
     6ec:	add	r2, sp, #3
     6f0:	mov	r0, r4
     6f4:	movt	r1, #0
     6f8:	bl	0 <fprintf>
     6fc:	sub	sp, fp, #28
     700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000704 <test_empty_monster>:
     704:	push	{r4, r5, fp, lr}
     708:	add	fp, sp, #8
     70c:	sub	sp, sp, #8
     710:	mov	r4, r0
     714:	bl	0 <flatcc_builder_reset>
     718:	movw	r1, #0
     71c:	mov	r0, r4
     720:	mov	r2, #0
     724:	mov	r3, #0
     728:	movt	r1, #0
     72c:	bl	0 <flatcc_builder_start_buffer>
     730:	mov	r0, r4
     734:	mov	r1, #36	; 0x24
     738:	bl	0 <flatcc_builder_start_table>
     73c:	movw	r1, #0
     740:	mov	r0, r4
     744:	movt	r1, #0
     748:	bl	0 <flatcc_builder_create_string_str>
     74c:	cmp	r0, #0
     750:	beq	76c <test_empty_monster+0x68>
     754:	mov	r5, r0
     758:	mov	r0, r4
     75c:	mov	r1, #3
     760:	bl	0 <flatcc_builder_table_add_offset>
     764:	cmp	r0, #0
     768:	strne	r5, [r0]
     76c:	movw	r1, #0
     770:	mov	r0, r4
     774:	mov	r2, #1
     778:	movt	r1, #0
     77c:	bl	0 <flatcc_builder_check_required>
     780:	cmp	r0, #0
     784:	beq	8f8 <test_empty_monster+0x1f4>
     788:	mov	r0, r4
     78c:	bl	0 <flatcc_builder_end_table>
     790:	mov	r1, r0
     794:	mov	r0, r4
     798:	bl	0 <flatcc_builder_end_buffer>
     79c:	add	r1, sp, #4
     7a0:	mov	r0, r4
     7a4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     7a8:	mov	r4, r0
     7ac:	movw	r0, #0
     7b0:	ldr	r2, [sp, #4]
     7b4:	movt	r0, #0
     7b8:	mov	r1, r4
     7bc:	ldr	r3, [r0]
     7c0:	movw	r0, #0
     7c4:	movt	r0, #0
     7c8:	bl	5d4 <hexdump>
     7cc:	cmp	r4, #0
     7d0:	beq	82c <test_empty_monster+0x128>
     7d4:	ldr	r0, [r4, #4]
     7d8:	movw	r1, #20301	; 0x4f4d
     7dc:	movt	r1, #21326	; 0x534e
     7e0:	cmp	r0, r1
     7e4:	bne	82c <test_empty_monster+0x128>
     7e8:	ldr	r0, [r4]
     7ec:	mov	r1, r4
     7f0:	ldr	r2, [r1, r0]!
     7f4:	mov	r0, r1
     7f8:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
     7fc:	cmp	r2, #9
     800:	bls	850 <test_empty_monster+0x14c>
     804:	ldrh	r2, [r0, #8]
     808:	cmp	r2, #0
     80c:	beq	858 <test_empty_monster+0x154>
     810:	add	r0, r1, r2
     814:	ldrh	r0, [r0]
     818:	cmp	r0, #100	; 0x64
     81c:	bne	8b0 <test_empty_monster+0x1ac>
     820:	movw	r0, #0
     824:	movt	r0, #0
     828:	b	834 <test_empty_monster+0x130>
     82c:	movw	r0, #0
     830:	movt	r0, #0
     834:	bl	0 <puts>
     838:	mvn	r5, #0
     83c:	mov	r0, r4
     840:	bl	0 <flatcc_builder_aligned_free>
     844:	mov	r0, r5
     848:	sub	sp, fp, #8
     84c:	pop	{r4, r5, fp, pc}
     850:	cmp	r2, #6
     854:	bcc	870 <test_empty_monster+0x16c>
     858:	ldrh	r0, [r0, #4]
     85c:	cmp	r0, #0
     860:	beq	870 <test_empty_monster+0x16c>
     864:	movw	r0, #0
     868:	movt	r0, #0
     86c:	b	834 <test_empty_monster+0x130>
     870:	ldr	r1, [sp, #4]
     874:	movw	r2, #0
     878:	movw	r3, #0
     87c:	mov	r0, r4
     880:	movt	r2, #0
     884:	movt	r3, #0
     888:	bl	0 <flatcc_verify_table_as_root>
     88c:	cmp	r0, #0
     890:	beq	8bc <test_empty_monster+0x1b8>
     894:	bl	0 <flatcc_verify_error_string>
     898:	mov	r1, r0
     89c:	movw	r0, #0
     8a0:	movt	r0, #0
     8a4:	bl	0 <printf>
     8a8:	mvn	r5, #0
     8ac:	b	844 <test_empty_monster+0x140>
     8b0:	movw	r0, #0
     8b4:	movt	r0, #0
     8b8:	b	834 <test_empty_monster+0x130>
     8bc:	ldr	r0, [sp, #4]
     8c0:	movw	r2, #0
     8c4:	movw	r3, #0
     8c8:	movt	r2, #0
     8cc:	movt	r3, #0
     8d0:	sub	r1, r0, #1
     8d4:	mov	r0, r4
     8d8:	bl	0 <flatcc_verify_table_as_root>
     8dc:	mov	r5, #0
     8e0:	cmp	r0, #0
     8e4:	bne	83c <test_empty_monster+0x138>
     8e8:	movw	r0, #0
     8ec:	movt	r0, #0
     8f0:	bl	0 <puts>
     8f4:	b	8a8 <test_empty_monster+0x1a4>
     8f8:	movw	r0, #0
     8fc:	movw	r1, #0
     900:	movw	r3, #0
     904:	mov	r2, #235	; 0xeb
     908:	movt	r0, #0
     90c:	movt	r1, #0
     910:	movt	r3, #0
     914:	bl	0 <__assert_fail>

00000918 <test_typed_empty_monster>:
     918:	push	{r4, r5, r6, sl, fp, lr}
     91c:	add	fp, sp, #16
     920:	sub	sp, sp, #8
     924:	mov	r4, r0
     928:	mov	r0, #0
     92c:	str	r0, [sp]
     930:	mov	r0, r4
     934:	bl	0 <flatcc_builder_reset>
     938:	movw	r1, #0
     93c:	mov	r0, r4
     940:	mov	r2, #0
     944:	mov	r3, #0
     948:	movt	r1, #0
     94c:	bl	0 <flatcc_builder_start_buffer>
     950:	mov	r0, r4
     954:	mov	r1, #36	; 0x24
     958:	bl	0 <flatcc_builder_start_table>
     95c:	movw	r1, #0
     960:	mov	r0, r4
     964:	movt	r1, #0
     968:	bl	0 <flatcc_builder_create_string_str>
     96c:	cmp	r0, #0
     970:	beq	98c <test_typed_empty_monster+0x74>
     974:	mov	r5, r0
     978:	mov	r0, r4
     97c:	mov	r1, #3
     980:	bl	0 <flatcc_builder_table_add_offset>
     984:	cmp	r0, #0
     988:	strne	r5, [r0]
     98c:	movw	r1, #0
     990:	mov	r0, r4
     994:	mov	r2, #1
     998:	movt	r1, #0
     99c:	bl	0 <flatcc_builder_check_required>
     9a0:	cmp	r0, #0
     9a4:	beq	b68 <test_typed_empty_monster+0x250>
     9a8:	mov	r0, r4
     9ac:	bl	0 <flatcc_builder_end_table>
     9b0:	mov	r1, r0
     9b4:	mov	r0, r4
     9b8:	bl	0 <flatcc_builder_end_buffer>
     9bc:	add	r1, sp, #4
     9c0:	mov	r0, r4
     9c4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     9c8:	mov	r4, r0
     9cc:	movw	r0, #0
     9d0:	ldr	r2, [sp, #4]
     9d4:	movt	r0, #0
     9d8:	mov	r1, r4
     9dc:	ldr	r3, [r0]
     9e0:	movw	r0, #0
     9e4:	movt	r0, #0
     9e8:	bl	5d4 <hexdump>
     9ec:	ldr	r1, [r4, #4]
     9f0:	movw	r6, #62593	; 0xf481
     9f4:	movt	r6, #13070	; 0x330e
     9f8:	cmp	r1, r6
     9fc:	bne	a70 <test_typed_empty_monster+0x158>
     a00:	movw	r0, #0
     a04:	movt	r0, #0
     a08:	bl	0 <puts>
     a0c:	ldr	r1, [sp, #4]
     a10:	movw	r2, #0
     a14:	movw	r3, #0
     a18:	mov	r0, r4
     a1c:	movt	r2, #0
     a20:	movt	r3, #0
     a24:	bl	0 <flatcc_verify_table_as_root>
     a28:	cmp	r0, #0
     a2c:	bne	a54 <test_typed_empty_monster+0x13c>
     a30:	ldr	r1, [sp, #4]
     a34:	movw	r2, #0
     a38:	movw	r3, #0
     a3c:	mov	r0, r4
     a40:	movt	r2, #0
     a44:	movt	r3, #0
     a48:	bl	0 <flatcc_verify_table_as_root>
     a4c:	cmp	r0, #0
     a50:	beq	a94 <test_typed_empty_monster+0x17c>
     a54:	mov	r5, r0
     a58:	bl	0 <flatcc_verify_error_string>
     a5c:	mov	r1, r0
     a60:	movw	r0, #0
     a64:	movt	r0, #0
     a68:	bl	0 <printf>
     a6c:	b	a80 <test_typed_empty_monster+0x168>
     a70:	movw	r0, #0
     a74:	movt	r0, #0
     a78:	bl	0 <printf>
     a7c:	mvn	r5, #0
     a80:	mov	r0, r4
     a84:	bl	0 <flatcc_builder_aligned_free>
     a88:	mov	r0, r5
     a8c:	sub	sp, fp, #16
     a90:	pop	{r4, r5, r6, sl, fp, pc}
     a94:	ldr	r1, [sp, #4]
     a98:	movw	r3, #0
     a9c:	mov	r0, r4
     aa0:	mov	r2, r6
     aa4:	movt	r3, #0
     aa8:	bl	0 <flatcc_verify_table_as_typed_root>
     aac:	cmp	r0, #0
     ab0:	beq	ad0 <test_typed_empty_monster+0x1b8>
     ab4:	mov	r5, r0
     ab8:	bl	0 <flatcc_verify_error_string>
     abc:	mov	r1, r0
     ac0:	movw	r0, #0
     ac4:	movt	r0, #0
     ac8:	bl	0 <printf>
     acc:	b	a80 <test_typed_empty_monster+0x168>
     ad0:	ldr	r1, [sp, #4]
     ad4:	movw	r3, #0
     ad8:	mov	r0, r4
     adc:	mov	r2, r6
     ae0:	movt	r3, #0
     ae4:	bl	0 <flatcc_verify_table_as_typed_root>
     ae8:	cmp	r0, #0
     aec:	beq	b0c <test_typed_empty_monster+0x1f4>
     af0:	mov	r5, r0
     af4:	bl	0 <flatcc_verify_error_string>
     af8:	mov	r1, r0
     afc:	movw	r0, #0
     b00:	movt	r0, #0
     b04:	bl	0 <printf>
     b08:	b	a80 <test_typed_empty_monster+0x168>
     b0c:	ldr	r1, [sp, #4]
     b10:	movw	r3, #0
     b14:	mov	r2, sp
     b18:	mov	r0, r4
     b1c:	str	r6, [sp]
     b20:	movt	r3, #0
     b24:	bl	0 <flatcc_verify_table_as_root>
     b28:	cmp	r0, #0
     b2c:	bne	a54 <test_typed_empty_monster+0x13c>
     b30:	ldr	r1, [sp, #4]
     b34:	movw	r2, #0
     b38:	movw	r3, #0
     b3c:	mov	r0, r4
     b40:	movt	r2, #0
     b44:	movt	r3, #0
     b48:	bl	0 <flatcc_verify_table_as_root>
     b4c:	mov	r5, #0
     b50:	cmp	r0, #0
     b54:	bne	a80 <test_typed_empty_monster+0x168>
     b58:	movw	r0, #0
     b5c:	movt	r0, #0
     b60:	bl	0 <puts>
     b64:	b	a80 <test_typed_empty_monster+0x168>
     b68:	movw	r0, #0
     b6c:	movw	r1, #0
     b70:	movw	r3, #0
     b74:	mov	r2, #235	; 0xeb
     b78:	movt	r0, #0
     b7c:	movt	r1, #0
     b80:	movt	r3, #0
     b84:	bl	0 <__assert_fail>

00000b88 <verify_table_with_emptystruct>:
     b88:	push	{fp, lr}
     b8c:	mov	fp, sp
     b90:	cmp	r0, #0
     b94:	beq	be8 <verify_table_with_emptystruct+0x60>
     b98:	ldr	r1, [r0, #4]
     b9c:	movw	r2, #20301	; 0x4f4d
     ba0:	movt	r2, #21326	; 0x534e
     ba4:	cmp	r1, r2
     ba8:	bne	be8 <verify_table_with_emptystruct+0x60>
     bac:	ldr	r1, [r0]
     bb0:	ldr	r2, [r0, r1]!
     bb4:	mov	r1, r0
     bb8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     bbc:	cmp	r2, #5
     bc0:	bls	bdc <verify_table_with_emptystruct+0x54>
     bc4:	ldrh	r1, [r1, #4]
     bc8:	cmp	r1, #0
     bcc:	beq	bdc <verify_table_with_emptystruct+0x54>
     bd0:	adds	r0, r0, r1
     bd4:	mov	r0, #0
     bd8:	popne	{fp, pc}
     bdc:	movw	r0, #0
     be0:	movt	r0, #0
     be4:	b	bf0 <verify_table_with_emptystruct+0x68>
     be8:	movw	r0, #0
     bec:	movt	r0, #0
     bf0:	bl	0 <puts>
     bf4:	mvn	r0, #0
     bf8:	pop	{fp, pc}

00000bfc <test_table_with_emptystruct>:
     bfc:	push	{r4, r5, fp, lr}
     c00:	add	fp, sp, #8
     c04:	sub	sp, sp, #8
     c08:	mov	r4, r0
     c0c:	bl	0 <flatcc_builder_reset>
     c10:	movw	r1, #0
     c14:	mov	r0, r4
     c18:	mov	r2, #0
     c1c:	mov	r3, #0
     c20:	mov	r5, #0
     c24:	movt	r1, #0
     c28:	bl	0 <flatcc_builder_start_buffer>
     c2c:	cmp	r0, #0
     c30:	bne	c9c <test_table_with_emptystruct+0xa0>
     c34:	mov	r0, r4
     c38:	mov	r1, #1
     c3c:	bl	0 <flatcc_builder_start_table>
     c40:	cmp	r0, #0
     c44:	bne	c90 <test_table_with_emptystruct+0x94>
     c48:	mov	r0, r4
     c4c:	mov	r1, #0
     c50:	mov	r2, #0
     c54:	mov	r3, #1
     c58:	mov	r5, #0
     c5c:	bl	0 <flatcc_builder_table_add>
     c60:	cmp	r0, #0
     c64:	beq	c90 <test_table_with_emptystruct+0x94>
     c68:	movw	r1, #0
     c6c:	mov	r0, r4
     c70:	mov	r2, #0
     c74:	movt	r1, #0
     c78:	bl	0 <flatcc_builder_check_required>
     c7c:	cmp	r0, #0
     c80:	beq	d4c <test_table_with_emptystruct+0x150>
     c84:	mov	r0, r4
     c88:	bl	0 <flatcc_builder_end_table>
     c8c:	mov	r5, r0
     c90:	mov	r0, r4
     c94:	mov	r1, r5
     c98:	bl	0 <flatcc_builder_end_buffer>
     c9c:	add	r1, sp, #4
     ca0:	mov	r0, r4
     ca4:	bl	0 <flatcc_builder_finalize_aligned_buffer>
     ca8:	mov	r4, r0
     cac:	movw	r0, #0
     cb0:	ldr	r2, [sp, #4]
     cb4:	movt	r0, #0
     cb8:	mov	r1, r4
     cbc:	ldr	r3, [r0]
     cc0:	movw	r0, #0
     cc4:	movt	r0, #0
     cc8:	bl	5d4 <hexdump>
     ccc:	cmp	r4, #0
     cd0:	beq	d28 <test_table_with_emptystruct+0x12c>
     cd4:	ldr	r0, [r4, #4]
     cd8:	movw	r1, #20301	; 0x4f4d
     cdc:	movt	r1, #21326	; 0x534e
     ce0:	cmp	r0, r1
     ce4:	bne	d28 <test_table_with_emptystruct+0x12c>
     ce8:	ldr	r1, [r4]
     cec:	mov	r0, r4
     cf0:	ldr	r2, [r0, r1]!
     cf4:	mov	r1, r0
     cf8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
     cfc:	cmp	r2, #5
     d00:	bls	d1c <test_table_with_emptystruct+0x120>
     d04:	ldrh	r1, [r1, #4]
     d08:	cmp	r1, #0
     d0c:	beq	d1c <test_table_with_emptystruct+0x120>
     d10:	adds	r0, r0, r1
     d14:	mov	r5, #0
     d18:	bne	d38 <test_table_with_emptystruct+0x13c>
     d1c:	movw	r0, #0
     d20:	movt	r0, #0
     d24:	b	d30 <test_table_with_emptystruct+0x134>
     d28:	movw	r0, #0
     d2c:	movt	r0, #0
     d30:	bl	0 <puts>
     d34:	mvn	r5, #0
     d38:	mov	r0, r4
     d3c:	bl	0 <flatcc_builder_aligned_free>
     d40:	mov	r0, r5
     d44:	sub	sp, fp, #8
     d48:	pop	{r4, r5, fp, pc}
     d4c:	movw	r0, #0
     d50:	movw	r1, #0
     d54:	movw	r3, #0
     d58:	mov	r2, #215	; 0xd7
     d5c:	movt	r0, #0
     d60:	movt	r1, #0
     d64:	movt	r3, #0
     d68:	bl	0 <__assert_fail>

00000d6c <test_typed_table_with_emptystruct>:
     d6c:	push	{r4, r5, fp, lr}
     d70:	add	fp, sp, #8
     d74:	sub	sp, sp, #8
     d78:	mov	r4, r0
     d7c:	bl	0 <flatcc_builder_reset>
     d80:	movw	r1, #0
     d84:	mov	r0, r4
     d88:	mov	r2, #0
     d8c:	mov	r3, #0
     d90:	mov	r5, #0
     d94:	movt	r1, #0
     d98:	bl	0 <flatcc_builder_start_buffer>
     d9c:	cmp	r0, #0
     da0:	bne	e0c <test_typed_table_with_emptystruct+0xa0>
     da4:	mov	r0, r4
     da8:	mov	r1, #1
     dac:	bl	0 <flatcc_builder_start_table>
     db0:	cmp	r0, #0
     db4:	bne	e00 <test_typed_table_with_emptystruct+0x94>
     db8:	mov	r0, r4
     dbc:	mov	r1, #0
     dc0:	mov	r2, #0
     dc4:	mov	r3, #1
     dc8:	mov	r5, #0
     dcc:	bl	0 <flatcc_builder_table_add>
     dd0:	cmp	r0, #0
     dd4:	beq	e00 <test_typed_table_with_emptystruct+0x94>
     dd8:	movw	r1, #0
     ddc:	mov	r0, r4
     de0:	mov	r2, #0
     de4:	movt	r1, #0
     de8:	bl	0 <flatcc_builder_check_required>
     dec:	cmp	r0, #0
     df0:	beq	f0c <test_typed_table_with_emptystruct+0x1a0>
     df4:	mov	r0, r4
     df8:	bl	0 <flatcc_builder_end_table>
     dfc:	mov	r5, r0
     e00:	mov	r0, r4
     e04:	mov	r1, r5
     e08:	bl	0 <flatcc_builder_end_buffer>
     e0c:	add	r1, sp, #4
     e10:	mov	r0, r4
     e14:	bl	0 <flatcc_builder_get_direct_buffer>
     e18:	mov	r4, r0
     e1c:	movw	r0, #0
     e20:	ldr	r2, [sp, #4]
     e24:	movt	r0, #0
     e28:	mov	r1, r4
     e2c:	ldr	r3, [r0]
     e30:	movw	r0, #0
     e34:	movt	r0, #0
     e38:	bl	5d4 <hexdump>
     e3c:	ldr	r1, [sp, #4]
     e40:	movw	r2, #0
     e44:	movw	r3, #0
     e48:	mov	r0, r4
     e4c:	movt	r2, #0
     e50:	movt	r3, #0
     e54:	bl	0 <flatcc_verify_table_as_root>
     e58:	cmp	r0, #0
     e5c:	beq	e6c <test_typed_table_with_emptystruct+0x100>
     e60:	movw	r0, #0
     e64:	movt	r0, #0
     e68:	b	ecc <test_typed_table_with_emptystruct+0x160>
     e6c:	ldr	r1, [sp, #4]
     e70:	movw	r2, #0
     e74:	movw	r3, #0
     e78:	mov	r0, r4
     e7c:	movt	r2, #0
     e80:	movt	r3, #0
     e84:	bl	0 <flatcc_verify_table_as_root>
     e88:	cmp	r0, #0
     e8c:	beq	e9c <test_typed_table_with_emptystruct+0x130>
     e90:	movw	r0, #0
     e94:	movt	r0, #0
     e98:	b	ecc <test_typed_table_with_emptystruct+0x160>
     e9c:	ldr	r1, [sp, #4]
     ea0:	movw	r5, #14262	; 0x37b6
     ea4:	movw	r3, #0
     ea8:	mov	r0, r4
     eac:	movt	r5, #45277	; 0xb0dd
     eb0:	movt	r3, #0
     eb4:	mov	r2, r5
     eb8:	bl	0 <flatcc_verify_table_as_typed_root>
     ebc:	cmp	r0, #0
     ec0:	beq	edc <test_typed_table_with_emptystruct+0x170>
     ec4:	movw	r0, #0
     ec8:	movt	r0, #0
     ecc:	bl	0 <puts>
     ed0:	mvn	r0, #0
     ed4:	sub	sp, fp, #8
     ed8:	pop	{r4, r5, fp, pc}
     edc:	cmp	r4, #0
     ee0:	beq	f00 <test_typed_table_with_emptystruct+0x194>
     ee4:	ldr	r1, [r4, #4]
     ee8:	mov	r0, #0
     eec:	cmp	r1, r5
     ef0:	beq	ed4 <test_typed_table_with_emptystruct+0x168>
     ef4:	movw	r0, #0
     ef8:	movt	r0, #0
     efc:	b	ecc <test_typed_table_with_emptystruct+0x160>
     f00:	movw	r0, #0
     f04:	movt	r0, #0
     f08:	b	ecc <test_typed_table_with_emptystruct+0x160>
     f0c:	movw	r0, #0
     f10:	movw	r1, #0
     f14:	movw	r3, #0
     f18:	mov	r2, #215	; 0xd7
     f1c:	movt	r0, #0
     f20:	movt	r1, #0
     f24:	movt	r3, #0
     f28:	bl	0 <__assert_fail>

00000f2c <verify_monster>:
     f2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     f30:	add	fp, sp, #24
     f34:	ldr	r1, [r0, #4]
     f38:	movw	r2, #20301	; 0x4f4d
     f3c:	movt	r2, #21326	; 0x534e
     f40:	cmp	r1, r2
     f44:	bne	fa0 <verify_monster+0x74>
     f48:	ldr	r1, [r0]
     f4c:	adds	r5, r0, r1
     f50:	beq	fb8 <verify_monster+0x8c>
     f54:	ldr	r1, [r5]
     f58:	mov	r0, r5
     f5c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
     f60:	cmp	r1, #10
     f64:	bcc	fac <verify_monster+0x80>
     f68:	ldrh	r1, [r0, #8]
     f6c:	cmp	r1, #0
     f70:	beq	fac <verify_monster+0x80>
     f74:	add	r1, r5, r1
     f78:	ldrh	r1, [r1]
     f7c:	cmp	r1, #80	; 0x50
     f80:	bne	fac <verify_monster+0x80>
     f84:	ldrh	r0, [r0, #4]
     f88:	cmp	r0, #0
     f8c:	addsne	r4, r5, r0
     f90:	bne	fcc <verify_monster+0xa0>
     f94:	movw	r0, #0
     f98:	movt	r0, #0
     f9c:	b	fc0 <verify_monster+0x94>
     fa0:	movw	r0, #0
     fa4:	movt	r0, #0
     fa8:	b	fc0 <verify_monster+0x94>
     fac:	movw	r0, #0
     fb0:	movt	r0, #0
     fb4:	b	fc0 <verify_monster+0x94>
     fb8:	movw	r0, #0
     fbc:	movt	r0, #0
     fc0:	bl	0 <puts>
     fc4:	mvn	r0, #0
     fc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     fcc:	tst	r4, #15
     fd0:	beq	fe0 <verify_monster+0xb4>
     fd4:	movw	r0, #0
     fd8:	movt	r0, #0
     fdc:	bl	0 <puts>
     fe0:	vldr	s0, [pc, #992]	; 13c8 <verify_monster+0x49c>
     fe4:	vldr	s2, [r4, #8]
     fe8:	vcmp.f32	s2, s0
     fec:	vmrs	APSR_nzcv, fpscr
     ff0:	beq	1000 <verify_monster+0xd4>
     ff4:	movw	r0, #0
     ff8:	movt	r0, #0
     ffc:	b	fc0 <verify_monster+0x94>
    1000:	vldr	s0, [r4]
    1004:	vmov.f32	s2, #112	; 0x3f800000  1.0
    1008:	vcmp.f32	s0, s2
    100c:	vmrs	APSR_nzcv, fpscr
    1010:	bne	1028 <verify_monster+0xfc>
    1014:	vldr	s0, [r4, #4]
    1018:	vmov.f32	s2, #0	; 0x40000000  2.0
    101c:	vcmp.f32	s0, s2
    1020:	vmrs	APSR_nzcv, fpscr
    1024:	beq	1034 <verify_monster+0x108>
    1028:	movw	r0, #0
    102c:	movt	r0, #0
    1030:	b	fc0 <verify_monster+0x94>
    1034:	vldr	d16, [r4, #16]
    1038:	vcmp.f64	d16, #0.0
    103c:	vmrs	APSR_nzcv, fpscr
    1040:	bne	1050 <verify_monster+0x124>
    1044:	ldr	r0, [r4, #26]
    1048:	cmp	r0, #0
    104c:	beq	105c <verify_monster+0x130>
    1050:	movw	r0, #0
    1054:	movt	r0, #0
    1058:	b	fc0 <verify_monster+0x94>
    105c:	ldr	r0, [r5]
    1060:	mov	r6, r5
    1064:	ldrh	r7, [r6, -r0]!
    1068:	cmp	r7, #12
    106c:	bcc	1a30 <verify_monster+0xb04>
    1070:	ldrh	r0, [r6, #10]
    1074:	cmp	r0, #0
    1078:	beq	1a30 <verify_monster+0xb04>
    107c:	mov	r1, r5
    1080:	ldr	r0, [r1, r0]!
    1084:	add	r0, r1, r0
    1088:	movw	r1, #0
    108c:	add	r4, r0, #4
    1090:	movt	r1, #0
    1094:	mov	r0, r4
    1098:	bl	0 <strcmp>
    109c:	cmp	r0, #0
    10a0:	beq	10b0 <verify_monster+0x184>
    10a4:	movw	r0, #0
    10a8:	movt	r0, #0
    10ac:	b	fc0 <verify_monster+0x94>
    10b0:	ldr	r0, [r4, #-4]
    10b4:	cmp	r0, #9
    10b8:	bne	11d0 <verify_monster+0x2a4>
    10bc:	cmp	r7, #18
    10c0:	bcc	11dc <verify_monster+0x2b0>
    10c4:	ldrh	r0, [r6, #16]
    10c8:	cmp	r0, #0
    10cc:	beq	11dc <verify_monster+0x2b0>
    10d0:	ldrb	r0, [r5, r0]
    10d4:	cmp	r0, #2
    10d8:	bne	11dc <verify_monster+0x2b0>
    10dc:	ldrh	r1, [r6, #14]
    10e0:	cmp	r1, #0
    10e4:	beq	11e8 <verify_monster+0x2bc>
    10e8:	mov	r0, r5
    10ec:	ldr	r1, [r0, r1]!
    10f0:	ldr	r1, [r0, r1]!
    10f4:	cmp	r1, #10
    10f8:	bne	11e8 <verify_monster+0x2bc>
    10fc:	add	r0, r0, #4
    1100:	mov	r1, #0
    1104:	ldrb	r2, [r0]
    1108:	cmp	r2, #0
    110c:	bne	11f4 <verify_monster+0x2c8>
    1110:	ldrb	r2, [r0, #1]
    1114:	mov	r1, #1
    1118:	cmp	r2, #1
    111c:	bne	11f4 <verify_monster+0x2c8>
    1120:	ldrb	r2, [r0, #2]
    1124:	mov	r1, #2
    1128:	cmp	r2, #2
    112c:	bne	11f4 <verify_monster+0x2c8>
    1130:	ldrb	r2, [r0, #3]
    1134:	mov	r1, #3
    1138:	cmp	r2, #3
    113c:	bne	11f4 <verify_monster+0x2c8>
    1140:	ldrb	r2, [r0, #4]
    1144:	mov	r1, #4
    1148:	cmp	r2, #4
    114c:	bne	11f4 <verify_monster+0x2c8>
    1150:	ldrb	r2, [r0, #5]
    1154:	mov	r1, #5
    1158:	cmp	r2, #5
    115c:	bne	11f4 <verify_monster+0x2c8>
    1160:	ldrb	r2, [r0, #6]
    1164:	mov	r1, #6
    1168:	cmp	r2, #6
    116c:	bne	11f4 <verify_monster+0x2c8>
    1170:	ldrb	r2, [r0, #7]
    1174:	mov	r1, #7
    1178:	cmp	r2, #7
    117c:	bne	11f4 <verify_monster+0x2c8>
    1180:	ldrb	r2, [r0, #8]
    1184:	mov	r1, #8
    1188:	cmp	r2, #8
    118c:	bne	11f4 <verify_monster+0x2c8>
    1190:	ldrb	r0, [r0, #9]
    1194:	mov	r1, #9
    1198:	cmp	r0, #9
    119c:	bne	11f4 <verify_monster+0x2c8>
    11a0:	cmp	r7, #7
    11a4:	bls	137c <verify_monster+0x450>
    11a8:	ldrh	r0, [r6, #6]
    11ac:	cmp	r0, #0
    11b0:	beq	1204 <verify_monster+0x2d8>
    11b4:	add	r0, r5, r0
    11b8:	ldrh	r0, [r0]
    11bc:	cmp	r0, #150	; 0x96
    11c0:	bne	1388 <verify_monster+0x45c>
    11c4:	movw	r0, #0
    11c8:	movt	r0, #0
    11cc:	b	fc0 <verify_monster+0x94>
    11d0:	movw	r0, #0
    11d4:	movt	r0, #0
    11d8:	b	fc0 <verify_monster+0x94>
    11dc:	movw	r0, #0
    11e0:	movt	r0, #0
    11e4:	b	fc0 <verify_monster+0x94>
    11e8:	movw	r0, #0
    11ec:	movt	r0, #0
    11f0:	b	fc0 <verify_monster+0x94>
    11f4:	movw	r0, #0
    11f8:	movt	r0, #0
    11fc:	bl	0 <printf>
    1200:	b	fc4 <verify_monster+0x98>
    1204:	cmp	r7, #10
    1208:	bcc	137c <verify_monster+0x450>
    120c:	ldrh	r0, [r6, #8]
    1210:	cmp	r0, #0
    1214:	beq	137c <verify_monster+0x450>
    1218:	ldrh	r0, [r6, #4]
    121c:	cmp	r0, #0
    1220:	beq	13a0 <verify_monster+0x474>
    1224:	cmp	r7, #24
    1228:	bcc	1394 <verify_monster+0x468>
    122c:	ldrh	r1, [r6, #22]
    1230:	cmp	r1, #0
    1234:	beq	1394 <verify_monster+0x468>
    1238:	mov	r0, r5
    123c:	ldr	r1, [r0, r1]!
    1240:	ldr	r1, [r0, r1]!
    1244:	cmp	r1, #5
    1248:	bne	1394 <verify_monster+0x468>
    124c:	add	r0, r0, #4
    1250:	mov	r1, #0
    1254:	ldrh	r2, [r0]
    1258:	cmp	r2, #16
    125c:	bne	13ac <verify_monster+0x480>
    1260:	ldrb	r2, [r0, #2]
    1264:	mov	r1, #0
    1268:	cmp	r2, #32
    126c:	bne	13ac <verify_monster+0x480>
    1270:	ldrh	r2, [r0, #4]
    1274:	mov	r1, #1
    1278:	cmp	r2, #48	; 0x30
    127c:	bne	13ac <verify_monster+0x480>
    1280:	ldrb	r2, [r0, #6]
    1284:	mov	r1, #1
    1288:	cmp	r2, #64	; 0x40
    128c:	bne	13ac <verify_monster+0x480>
    1290:	ldrh	r2, [r0, #8]
    1294:	mov	r1, #2
    1298:	cmp	r2, #80	; 0x50
    129c:	bne	13ac <verify_monster+0x480>
    12a0:	ldrb	r2, [r0, #10]
    12a4:	mov	r1, #2
    12a8:	cmp	r2, #96	; 0x60
    12ac:	bne	13ac <verify_monster+0x480>
    12b0:	ldrh	r2, [r0, #12]
    12b4:	mov	r1, #3
    12b8:	cmp	r2, #112	; 0x70
    12bc:	bne	13ac <verify_monster+0x480>
    12c0:	ldrb	r2, [r0, #14]
    12c4:	mov	r1, #3
    12c8:	cmp	r2, #128	; 0x80
    12cc:	bne	13ac <verify_monster+0x480>
    12d0:	ldrh	r2, [r0, #16]
    12d4:	movw	r3, #401	; 0x191
    12d8:	mov	r1, #4
    12dc:	cmp	r2, r3
    12e0:	bne	13ac <verify_monster+0x480>
    12e4:	ldrb	r0, [r0, #18]
    12e8:	mov	r1, #4
    12ec:	cmp	r0, #145	; 0x91
    12f0:	bne	13ac <verify_monster+0x480>
    12f4:	cmp	r7, #27
    12f8:	bls	13bc <verify_monster+0x490>
    12fc:	ldrh	r1, [r6, #26]
    1300:	cmp	r1, #0
    1304:	beq	13bc <verify_monster+0x490>
    1308:	mov	r0, r5
    130c:	ldr	r1, [r0, r1]!
    1310:	ldr	r1, [r0, r1]!
    1314:	cmp	r1, #8
    1318:	bne	13bc <verify_monster+0x490>
    131c:	add	r9, r0, #4
    1320:	mov	r4, r9
    1324:	ldr	r0, [r4, #20]!
    1328:	ldr	r8, [r4, r0]!
    132c:	mov	r0, r4
    1330:	ldrh	r1, [r0, -r8]!
    1334:	cmp	r1, #12
    1338:	bcc	1a30 <verify_monster+0xb04>
    133c:	ldrh	r0, [r0, #10]
    1340:	cmp	r0, #0
    1344:	beq	1a30 <verify_monster+0xb04>
    1348:	mov	r1, r4
    134c:	ldr	r0, [r1, r0]!
    1350:	add	r0, r1, r0
    1354:	movw	r1, #0
    1358:	add	r0, r0, #4
    135c:	movt	r1, #0
    1360:	bl	0 <strcmp>
    1364:	cmp	r0, #0
    1368:	beq	13cc <verify_monster+0x4a0>
    136c:	movw	r0, #0
    1370:	movt	r0, #0
    1374:	bl	0 <printf>
    1378:	b	fc4 <verify_monster+0x98>
    137c:	movw	r0, #0
    1380:	movt	r0, #0
    1384:	b	fc0 <verify_monster+0x94>
    1388:	movw	r0, #0
    138c:	movt	r0, #0
    1390:	b	fc0 <verify_monster+0x94>
    1394:	movw	r0, #0
    1398:	movt	r0, #0
    139c:	b	fc0 <verify_monster+0x94>
    13a0:	movw	r0, #0
    13a4:	movt	r0, #0
    13a8:	b	fc0 <verify_monster+0x94>
    13ac:	movw	r0, #0
    13b0:	movt	r0, #0
    13b4:	bl	0 <printf>
    13b8:	b	fc4 <verify_monster+0x98>
    13bc:	movw	r0, #0
    13c0:	movt	r0, #0
    13c4:	b	fc0 <verify_monster+0x94>
    13c8:	.word	0xc04ccccd
    13cc:	mov	r0, r9
    13d0:	ldr	r1, [r0, #4]!
    13d4:	add	r0, r0, r1
    13d8:	cmp	r0, r4
    13dc:	beq	13ec <verify_monster+0x4c0>
    13e0:	movw	r0, #0
    13e4:	movt	r0, #0
    13e8:	b	fc0 <verify_monster+0x94>
    13ec:	rsb	r2, r8, #0
    13f0:	mov	r1, r0
    13f4:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
    13f8:	cmp	r2, #12
    13fc:	bcc	1a30 <verify_monster+0xb04>
    1400:	ldrh	r1, [r1, #10]
    1404:	cmp	r1, #0
    1408:	beq	1a30 <verify_monster+0xb04>
    140c:	ldr	r1, [r0, r1]!
    1410:	add	r0, r0, r1
    1414:	movw	r1, #0
    1418:	add	r8, r0, #4
    141c:	movt	r1, #0
    1420:	mov	r0, r8
    1424:	bl	0 <strcmp>
    1428:	cmp	r0, #0
    142c:	beq	143c <verify_monster+0x510>
    1430:	movw	r0, #0
    1434:	movt	r0, #0
    1438:	b	15f0 <verify_monster+0x6c4>
    143c:	mov	r0, r9
    1440:	ldr	r1, [r0, #8]!
    1444:	ldr	r2, [r0, r1]!
    1448:	mov	r1, r0
    144c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1450:	cmp	r2, #12
    1454:	bcc	1a30 <verify_monster+0xb04>
    1458:	ldrh	r1, [r1, #10]
    145c:	cmp	r1, #0
    1460:	beq	1a30 <verify_monster+0xb04>
    1464:	ldr	r1, [r0, r1]!
    1468:	add	r0, r0, r1
    146c:	movw	r1, #0
    1470:	add	r8, r0, #4
    1474:	movt	r1, #0
    1478:	mov	r0, r8
    147c:	bl	0 <strcmp>
    1480:	cmp	r0, #0
    1484:	beq	1494 <verify_monster+0x568>
    1488:	movw	r0, #0
    148c:	movt	r0, #0
    1490:	b	15f0 <verify_monster+0x6c4>
    1494:	ldr	r1, [r9]
    1498:	mov	r0, r9
    149c:	ldr	r2, [r0, r1]!
    14a0:	mov	r1, r0
    14a4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    14a8:	cmp	r2, #12
    14ac:	bcc	1a30 <verify_monster+0xb04>
    14b0:	ldrh	r1, [r1, #10]
    14b4:	cmp	r1, #0
    14b8:	beq	1a30 <verify_monster+0xb04>
    14bc:	ldr	r1, [r0, r1]!
    14c0:	add	r0, r0, r1
    14c4:	movw	r1, #0
    14c8:	add	r8, r0, #4
    14cc:	movt	r1, #0
    14d0:	mov	r0, r8
    14d4:	bl	0 <strcmp>
    14d8:	cmp	r0, #0
    14dc:	beq	14ec <verify_monster+0x5c0>
    14e0:	movw	r0, #0
    14e4:	movt	r0, #0
    14e8:	b	15f0 <verify_monster+0x6c4>
    14ec:	mov	r0, r9
    14f0:	ldr	r1, [r0, #12]!
    14f4:	ldr	r2, [r0, r1]!
    14f8:	mov	r1, r0
    14fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1500:	cmp	r2, #12
    1504:	bcc	1a30 <verify_monster+0xb04>
    1508:	ldrh	r1, [r1, #10]
    150c:	cmp	r1, #0
    1510:	beq	1a30 <verify_monster+0xb04>
    1514:	ldr	r1, [r0, r1]!
    1518:	add	r0, r0, r1
    151c:	movw	r1, #0
    1520:	add	r8, r0, #4
    1524:	movt	r1, #0
    1528:	mov	r0, r8
    152c:	bl	0 <strcmp>
    1530:	cmp	r0, #0
    1534:	beq	1544 <verify_monster+0x618>
    1538:	movw	r0, #0
    153c:	movt	r0, #0
    1540:	b	15f0 <verify_monster+0x6c4>
    1544:	mov	r0, r9
    1548:	ldr	r1, [r0, #16]!
    154c:	ldr	r2, [r0, r1]!
    1550:	mov	r1, r0
    1554:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1558:	cmp	r2, #12
    155c:	bcc	1a30 <verify_monster+0xb04>
    1560:	ldrh	r1, [r1, #10]
    1564:	cmp	r1, #0
    1568:	beq	1a30 <verify_monster+0xb04>
    156c:	ldr	r1, [r0, r1]!
    1570:	add	r0, r0, r1
    1574:	movw	r1, #0
    1578:	add	r8, r0, #4
    157c:	movt	r1, #0
    1580:	mov	r0, r8
    1584:	bl	0 <strcmp>
    1588:	cmp	r0, #0
    158c:	beq	159c <verify_monster+0x670>
    1590:	movw	r0, #0
    1594:	movt	r0, #0
    1598:	b	15f0 <verify_monster+0x6c4>
    159c:	mov	r0, r9
    15a0:	ldr	r1, [r0, #24]!
    15a4:	ldr	r2, [r0, r1]!
    15a8:	mov	r1, r0
    15ac:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    15b0:	cmp	r2, #12
    15b4:	bcc	1a30 <verify_monster+0xb04>
    15b8:	ldrh	r1, [r1, #10]
    15bc:	cmp	r1, #0
    15c0:	beq	1a30 <verify_monster+0xb04>
    15c4:	ldr	r1, [r0, r1]!
    15c8:	add	r0, r0, r1
    15cc:	movw	r1, #0
    15d0:	add	r8, r0, #4
    15d4:	movt	r1, #0
    15d8:	mov	r0, r8
    15dc:	bl	0 <strcmp>
    15e0:	cmp	r0, #0
    15e4:	beq	15fc <verify_monster+0x6d0>
    15e8:	movw	r0, #0
    15ec:	movt	r0, #0
    15f0:	mov	r1, r8
    15f4:	bl	0 <printf>
    15f8:	b	fc4 <verify_monster+0x98>
    15fc:	ldr	r0, [r9, #28]!
    1600:	ldr	r1, [r9, r0]!
    1604:	mov	r0, r9
    1608:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    160c:	cmp	r1, #12
    1610:	bcc	1a30 <verify_monster+0xb04>
    1614:	ldrh	r0, [r0, #10]
    1618:	cmp	r0, #0
    161c:	beq	1a30 <verify_monster+0xb04>
    1620:	ldr	r0, [r9, r0]!
    1624:	movw	r1, #0
    1628:	movt	r1, #0
    162c:	add	r0, r9, r0
    1630:	add	r4, r0, #4
    1634:	mov	r0, r4
    1638:	bl	0 <strcmp>
    163c:	cmp	r0, #0
    1640:	beq	1658 <verify_monster+0x72c>
    1644:	movw	r0, #0
    1648:	mov	r1, r4
    164c:	movt	r0, #0
    1650:	bl	0 <printf>
    1654:	b	fc4 <verify_monster+0x98>
    1658:	ldrh	r1, [r6, #24]
    165c:	cmp	r1, #0
    1660:	beq	16a8 <verify_monster+0x77c>
    1664:	mov	r0, r5
    1668:	ldr	r1, [r0, r1]!
    166c:	ldr	r1, [r0, r1]!
    1670:	cmp	r1, #3
    1674:	bne	16a8 <verify_monster+0x77c>
    1678:	add	r4, r0, #4
    167c:	movw	r1, #0
    1680:	ldr	r0, [r4]
    1684:	movt	r1, #0
    1688:	add	r0, r4, r0
    168c:	add	r0, r0, #4
    1690:	bl	0 <strcmp>
    1694:	cmp	r0, #0
    1698:	beq	16b4 <verify_monster+0x788>
    169c:	movw	r0, #0
    16a0:	movt	r0, #0
    16a4:	b	fc0 <verify_monster+0x94>
    16a8:	movw	r0, #0
    16ac:	movt	r0, #0
    16b0:	b	fc0 <verify_monster+0x94>
    16b4:	mov	r0, r4
    16b8:	ldr	r1, [r0, #4]!
    16bc:	ldr	r1, [r0, r1]!
    16c0:	cmp	r1, #2
    16c4:	bne	16e4 <verify_monster+0x7b8>
    16c8:	add	r0, r0, #4
    16cc:	ldrh	r0, [r0]
    16d0:	cmp	r0, #44	; 0x2c
    16d4:	beq	16f4 <verify_monster+0x7c8>
    16d8:	movw	r0, #0
    16dc:	movt	r0, #0
    16e0:	b	fc0 <verify_monster+0x94>
    16e4:	movw	r0, #0
    16e8:	movt	r0, #0
    16ec:	bl	0 <printf>
    16f0:	b	fc4 <verify_monster+0x98>
    16f4:	ldr	r0, [r4, #8]!
    16f8:	movw	r1, #0
    16fc:	movt	r1, #0
    1700:	add	r0, r4, r0
    1704:	add	r0, r0, #4
    1708:	bl	0 <strcmp>
    170c:	cmp	r0, #0
    1710:	beq	1720 <verify_monster+0x7f4>
    1714:	movw	r0, #0
    1718:	movt	r0, #0
    171c:	b	fc0 <verify_monster+0x94>
    1720:	cmp	r7, #54	; 0x36
    1724:	bcc	179c <verify_monster+0x870>
    1728:	ldrh	r1, [r6, #52]	; 0x34
    172c:	cmp	r1, #0
    1730:	beq	179c <verify_monster+0x870>
    1734:	mov	r0, r5
    1738:	ldr	r1, [r0, r1]!
    173c:	ldr	r1, [r0, r1]!
    1740:	cmp	r1, #4
    1744:	bne	17a8 <verify_monster+0x87c>
    1748:	add	r0, r0, #4
    174c:	mov	r1, #0
    1750:	ldrb	r2, [r0]
    1754:	cmp	r2, #0
    1758:	bne	178c <verify_monster+0x860>
    175c:	ldrb	r2, [r0, #1]
    1760:	mov	r1, #1
    1764:	cmp	r2, #1
    1768:	bne	178c <verify_monster+0x860>
    176c:	ldrb	r2, [r0, #2]
    1770:	mov	r1, #2
    1774:	cmp	r2, #1
    1778:	bne	178c <verify_monster+0x860>
    177c:	ldrb	r0, [r0, #3]
    1780:	mov	r1, #3
    1784:	cmp	r0, #0
    1788:	beq	17b4 <verify_monster+0x888>
    178c:	movw	r0, #0
    1790:	movt	r0, #0
    1794:	bl	0 <printf>
    1798:	b	fc4 <verify_monster+0x98>
    179c:	movw	r0, #0
    17a0:	movt	r0, #0
    17a4:	b	fc0 <verify_monster+0x94>
    17a8:	movw	r0, #0
    17ac:	movt	r0, #0
    17b0:	b	fc0 <verify_monster+0x94>
    17b4:	ldrh	r0, [r6, #18]
    17b8:	cmp	r0, #0
    17bc:	beq	1830 <verify_monster+0x904>
    17c0:	ldrb	r0, [r5, r0]
    17c4:	cmp	r0, #1
    17c8:	bne	1830 <verify_monster+0x904>
    17cc:	ldrh	r0, [r6, #20]
    17d0:	cmp	r0, #0
    17d4:	movne	r1, r5
    17d8:	ldrne	r0, [r1, r0]!
    17dc:	addsne	r0, r1, r0
    17e0:	beq	19ac <verify_monster+0xa80>
    17e4:	ldr	r2, [r0]
    17e8:	mov	r1, r0
    17ec:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    17f0:	cmp	r2, #12
    17f4:	bcc	1a30 <verify_monster+0xb04>
    17f8:	ldrh	r1, [r1, #10]
    17fc:	cmp	r1, #0
    1800:	beq	1a30 <verify_monster+0xb04>
    1804:	ldr	r1, [r0, r1]!
    1808:	add	r0, r0, r1
    180c:	movw	r1, #0
    1810:	add	r0, r0, #4
    1814:	movt	r1, #0
    1818:	bl	0 <strcmp>
    181c:	cmp	r0, #0
    1820:	beq	183c <verify_monster+0x910>
    1824:	movw	r0, #0
    1828:	movt	r0, #0
    182c:	b	fc0 <verify_monster+0x94>
    1830:	movw	r0, #0
    1834:	movt	r0, #0
    1838:	b	fc0 <verify_monster+0x94>
    183c:	ldrh	r0, [r6, #28]
    1840:	cmp	r0, #0
    1844:	movne	r1, r5
    1848:	ldrne	r0, [r1, r0]!
    184c:	addsne	r4, r1, r0
    1850:	beq	19ac <verify_monster+0xa80>
    1854:	ldr	r0, [r4]
    1858:	mov	r7, r4
    185c:	ldrh	r8, [r7, -r0]!
    1860:	cmp	r8, #12
    1864:	bcc	1a30 <verify_monster+0xb04>
    1868:	ldrh	r0, [r7, #10]
    186c:	cmp	r0, #0
    1870:	beq	1a30 <verify_monster+0xb04>
    1874:	mov	r1, r4
    1878:	ldr	r0, [r1, r0]!
    187c:	add	r0, r1, r0
    1880:	movw	r1, #0
    1884:	add	r0, r0, #4
    1888:	movt	r1, #0
    188c:	bl	0 <strcmp>
    1890:	cmp	r0, #0
    1894:	beq	18a4 <verify_monster+0x978>
    1898:	movw	r0, #0
    189c:	movt	r0, #0
    18a0:	b	fc0 <verify_monster+0x94>
    18a4:	cmp	r8, #20
    18a8:	bcc	18c0 <verify_monster+0x994>
    18ac:	ldrh	r0, [r7, #18]
    18b0:	cmp	r0, #0
    18b4:	ldrbne	r0, [r4, r0]
    18b8:	cmpne	r0, #0
    18bc:	bne	1904 <verify_monster+0x9d8>
    18c0:	ldrh	r2, [r6, #20]
    18c4:	mov	r1, #0
    18c8:	mov	r0, #0
    18cc:	cmp	r2, #0
    18d0:	movne	r1, r5
    18d4:	ldrne	r2, [r1, r2]!
    18d8:	addne	r1, r1, r2
    18dc:	ldrh	r2, [r6, #20]
    18e0:	cmp	r2, #0
    18e4:	movne	r0, r5
    18e8:	ldrne	r2, [r0, r2]!
    18ec:	addne	r0, r0, r2
    18f0:	cmp	r1, r0
    18f4:	beq	1910 <verify_monster+0x9e4>
    18f8:	movw	r0, #0
    18fc:	movt	r0, #0
    1900:	b	fc0 <verify_monster+0x94>
    1904:	movw	r0, #0
    1908:	movt	r0, #0
    190c:	b	fc0 <verify_monster+0x94>
    1910:	cmp	r8, #28
    1914:	bcc	1930 <verify_monster+0xa04>
    1918:	ldrh	r0, [r7, #26]
    191c:	cmp	r0, #0
    1920:	ldrne	r0, [r4, r0]!
    1924:	ldrne	r0, [r4, r0]!
    1928:	cmpne	r0, #0
    192c:	bne	1950 <verify_monster+0xa24>
    1930:	movw	r0, #0
    1934:	movw	r1, #0
    1938:	movw	r3, #0
    193c:	movw	r2, #693	; 0x2b5
    1940:	movt	r0, #0
    1944:	movt	r1, #0
    1948:	movt	r3, #0
    194c:	bl	0 <__assert_fail>
    1950:	add	r1, r4, #4
    1954:	add	r0, r1, r0, lsl #2
    1958:	ldr	r1, [r0, #-4]!
    195c:	adds	r0, r0, r1
    1960:	beq	19b8 <verify_monster+0xa8c>
    1964:	ldr	r2, [r0]
    1968:	mov	r1, r0
    196c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    1970:	cmp	r2, #20
    1974:	bcc	19d8 <verify_monster+0xaac>
    1978:	ldrh	r3, [r1, #18]
    197c:	cmp	r3, #0
    1980:	beq	19d8 <verify_monster+0xaac>
    1984:	ldrb	r3, [r0, r3]
    1988:	cmp	r3, #1
    198c:	bne	19d8 <verify_monster+0xaac>
    1990:	cmp	r2, #22
    1994:	bcc	19ac <verify_monster+0xa80>
    1998:	ldrh	r1, [r1, #20]
    199c:	cmp	r1, #0
    19a0:	ldrne	r1, [r0, r1]!
    19a4:	addsne	r0, r0, r1
    19a8:	bne	19e4 <verify_monster+0xab8>
    19ac:	movw	r0, #0
    19b0:	movt	r0, #0
    19b4:	b	1a38 <verify_monster+0xb0c>
    19b8:	movw	r0, #0
    19bc:	movw	r1, #0
    19c0:	movw	r3, #0
    19c4:	movw	r2, #717	; 0x2cd
    19c8:	movt	r0, #0
    19cc:	movt	r1, #0
    19d0:	movt	r3, #0
    19d4:	bl	0 <__assert_fail>
    19d8:	movw	r0, #0
    19dc:	movt	r0, #0
    19e0:	b	fc0 <verify_monster+0x94>
    19e4:	ldr	r2, [r0]
    19e8:	mov	r1, r0
    19ec:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    19f0:	cmp	r2, #12
    19f4:	bcc	1a30 <verify_monster+0xb04>
    19f8:	ldrh	r1, [r1, #10]
    19fc:	cmp	r1, #0
    1a00:	beq	1a30 <verify_monster+0xb04>
    1a04:	ldr	r1, [r0, r1]!
    1a08:	add	r0, r0, r1
    1a0c:	movw	r1, #0
    1a10:	add	r0, r0, #4
    1a14:	movt	r1, #0
    1a18:	bl	0 <strcmp>
    1a1c:	cmp	r0, #0
    1a20:	beq	1a50 <verify_monster+0xb24>
    1a24:	movw	r0, #0
    1a28:	movt	r0, #0
    1a2c:	b	fc0 <verify_monster+0x94>
    1a30:	movw	r0, #0
    1a34:	movt	r0, #0
    1a38:	movw	r1, #0
    1a3c:	movw	r3, #0
    1a40:	movw	r2, #699	; 0x2bb
    1a44:	movt	r1, #0
    1a48:	movt	r3, #0
    1a4c:	bl	0 <__assert_fail>
    1a50:	ldrh	r0, [r6, #34]	; 0x22
    1a54:	cmp	r0, #0
    1a58:	beq	1a68 <verify_monster+0xb3c>
    1a5c:	ldrb	r0, [r5, r0]
    1a60:	cmp	r0, #0
    1a64:	beq	1a74 <verify_monster+0xb48>
    1a68:	movw	r0, #0
    1a6c:	movt	r0, #0
    1a70:	b	fc0 <verify_monster+0x94>
    1a74:	ldrh	r0, [r6, #32]
    1a78:	cmp	r0, #0
    1a7c:	beq	1ae0 <verify_monster+0xbb4>
    1a80:	ldr	r0, [r5, r0]!
    1a84:	adds	r1, r5, r0
    1a88:	beq	1aec <verify_monster+0xbc0>
    1a8c:	ldr	r0, [r1]
    1a90:	ldrh	r2, [r1, -r0]!
    1a94:	mov	r0, #0
    1a98:	cmp	r2, #6
    1a9c:	bcc	fc8 <verify_monster+0x9c>
    1aa0:	ldrh	r3, [r1, #4]
    1aa4:	cmp	r3, #0
    1aa8:	bne	1ad4 <verify_monster+0xba8>
    1aac:	cmp	r2, #8
    1ab0:	bcc	fc8 <verify_monster+0x9c>
    1ab4:	ldrh	r3, [r1, #6]
    1ab8:	cmp	r3, #0
    1abc:	bne	1ad4 <verify_monster+0xba8>
    1ac0:	cmp	r2, #10
    1ac4:	bcc	fc8 <verify_monster+0x9c>
    1ac8:	ldrh	r1, [r1, #8]
    1acc:	cmp	r1, #0
    1ad0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    1ad4:	movw	r0, #0
    1ad8:	movt	r0, #0
    1adc:	b	fc0 <verify_monster+0x94>
    1ae0:	movw	r0, #0
    1ae4:	movt	r0, #0
    1ae8:	b	fc0 <verify_monster+0x94>
    1aec:	movw	r0, #0
    1af0:	movw	r1, #0
    1af4:	movw	r3, #0
    1af8:	movw	r2, #607	; 0x25f
    1afc:	movt	r0, #0
    1b00:	movt	r1, #0
    1b04:	movt	r3, #0
    1b08:	bl	0 <__assert_fail>

00001b0c <gen_monster>:
    1b0c:	push	{r4, r5, r6, sl, fp, lr}
    1b10:	add	fp, sp, #16
    1b14:	sub	sp, sp, #48	; 0x30
    1b18:	mov	r4, r0
    1b1c:	movw	r0, #0
    1b20:	mov	r5, r1
    1b24:	movt	r0, #0
    1b28:	vldr	d16, [r0]
    1b2c:	movw	r0, #2312	; 0x908
    1b30:	strh	r0, [sp, #40]	; 0x28
    1b34:	movw	r0, #256	; 0x100
    1b38:	movt	r0, #1
    1b3c:	str	r0, [sp, #8]
    1b40:	mov	r0, r4
    1b44:	vstr	d16, [sp, #32]
    1b48:	bl	0 <flatcc_builder_reset>
    1b4c:	cmp	r5, #0
    1b50:	movw	r1, #0
    1b54:	mov	r0, r4
    1b58:	mov	r2, #0
    1b5c:	moveq	r3, #0
    1b60:	movt	r1, #0
    1b64:	movne	r3, #2
    1b68:	bl	0 <flatcc_builder_start_buffer>
    1b6c:	cmp	r0, #0
    1b70:	bne	1b80 <gen_monster+0x74>
    1b74:	mov	r0, r4
    1b78:	mov	r1, #36	; 0x24
    1b7c:	bl	0 <flatcc_builder_start_table>
    1b80:	mov	r0, r4
    1b84:	mov	r1, #2
    1b88:	mov	r2, #2
    1b8c:	mov	r3, #2
    1b90:	bl	0 <flatcc_builder_table_add>
    1b94:	cmp	r0, #0
    1b98:	mov	r2, #32
    1b9c:	mov	r3, #16
    1ba0:	movne	r1, #80	; 0x50
    1ba4:	strhne	r1, [r0]
    1ba8:	mov	r0, r4
    1bac:	mov	r1, #0
    1bb0:	bl	0 <flatcc_builder_table_add>
    1bb4:	movw	r3, #52429	; 0xcccd
    1bb8:	mov	r1, #1065353216	; 0x3f800000
    1bbc:	mov	r2, #1073741824	; 0x40000000
    1bc0:	movt	r3, #49228	; 0xc04c
    1bc4:	stm	r0, {r1, r2, r3}
    1bc8:	movw	r1, #0
    1bcc:	mov	r0, r4
    1bd0:	movt	r1, #0
    1bd4:	bl	0 <flatcc_builder_create_string_str>
    1bd8:	cmp	r0, #0
    1bdc:	beq	1bf8 <gen_monster+0xec>
    1be0:	mov	r5, r0
    1be4:	mov	r0, r4
    1be8:	mov	r1, #3
    1bec:	bl	0 <flatcc_builder_table_add_offset>
    1bf0:	cmp	r0, #0
    1bf4:	strne	r5, [r0]
    1bf8:	mov	r0, r4
    1bfc:	mov	r1, #6
    1c00:	mov	r2, #1
    1c04:	mov	r3, #1
    1c08:	mov	r5, #1
    1c0c:	bl	0 <flatcc_builder_table_add>
    1c10:	cmp	r0, #0
    1c14:	mov	r2, #10
    1c18:	mov	r3, #1
    1c1c:	movne	r1, #2
    1c20:	strbne	r1, [r0]
    1c24:	mvn	r0, #0
    1c28:	add	r1, sp, #32
    1c2c:	str	r5, [sp]
    1c30:	str	r0, [sp, #4]
    1c34:	mov	r0, r4
    1c38:	bl	0 <flatcc_builder_create_vector>
    1c3c:	cmp	r0, #0
    1c40:	beq	1c5c <gen_monster+0x150>
    1c44:	mov	r5, r0
    1c48:	mov	r0, r4
    1c4c:	mov	r1, #5
    1c50:	bl	0 <flatcc_builder_table_add_offset>
    1c54:	cmp	r0, #0
    1c58:	strne	r5, [r0]
    1c5c:	mov	r0, r4
    1c60:	mov	r1, #4
    1c64:	mov	r2, #2
    1c68:	mvn	r3, #-1073741824	; 0xc0000000
    1c6c:	bl	0 <flatcc_builder_start_vector>
    1c70:	mov	r0, r4
    1c74:	mov	r1, #1
    1c78:	bl	0 <flatcc_builder_extend_vector>
    1c7c:	mov	r1, #16
    1c80:	strh	r1, [r0]
    1c84:	mov	r1, #32
    1c88:	strb	r1, [r0, #2]
    1c8c:	mov	r0, r4
    1c90:	mov	r1, #2
    1c94:	bl	0 <flatcc_builder_extend_vector>
    1c98:	mov	r1, #48	; 0x30
    1c9c:	strh	r1, [r0]
    1ca0:	mov	r1, #64	; 0x40
    1ca4:	strb	r1, [r0, #2]
    1ca8:	mov	r1, #80	; 0x50
    1cac:	strh	r1, [r0, #4]
    1cb0:	mov	r1, #96	; 0x60
    1cb4:	strb	r1, [r0, #6]
    1cb8:	mov	r0, r4
    1cbc:	mov	r1, #1
    1cc0:	bl	0 <flatcc_builder_extend_vector>
    1cc4:	cmp	r0, #0
    1cc8:	movne	r1, #128	; 0x80
    1ccc:	strbne	r1, [r0, #2]
    1cd0:	movne	r1, #112	; 0x70
    1cd4:	strhne	r1, [r0]
    1cd8:	mov	r0, r4
    1cdc:	mov	r1, #1
    1ce0:	bl	0 <flatcc_builder_extend_vector>
    1ce4:	movw	r5, #400	; 0x190
    1ce8:	cmp	r0, #0
    1cec:	mov	r1, #1
    1cf0:	movt	r5, #145	; 0x91
    1cf4:	strne	r5, [r0]
    1cf8:	mov	r0, r4
    1cfc:	bl	0 <flatcc_builder_extend_vector>
    1d00:	cmp	r0, #0
    1d04:	mov	r1, #1
    1d08:	strne	r5, [r0]
    1d0c:	mov	r0, r4
    1d10:	bl	0 <flatcc_builder_extend_vector>
    1d14:	cmp	r0, #0
    1d18:	strne	r5, [r0]
    1d1c:	mov	r0, r4
    1d20:	bl	0 <flatcc_builder_vector_count>
    1d24:	cmp	r0, #7
    1d28:	bne	242c <gen_monster+0x920>
    1d2c:	mov	r0, r4
    1d30:	mov	r1, #2
    1d34:	bl	0 <flatcc_builder_truncate_vector>
    1d38:	mov	r0, r4
    1d3c:	bl	0 <flatcc_builder_vector_count>
    1d40:	cmp	r0, #5
    1d44:	bne	244c <gen_monster+0x940>
    1d48:	mov	r0, r4
    1d4c:	bl	0 <flatcc_builder_vector_edit>
    1d50:	ldrh	r1, [r0, #16]
    1d54:	add	r1, r1, #1
    1d58:	strh	r1, [r0, #16]
    1d5c:	mov	r0, r4
    1d60:	bl	0 <flatcc_builder_end_vector>
    1d64:	cmp	r0, #0
    1d68:	beq	1d84 <gen_monster+0x278>
    1d6c:	mov	r5, r0
    1d70:	mov	r0, r4
    1d74:	mov	r1, #9
    1d78:	bl	0 <flatcc_builder_table_add_offset>
    1d7c:	cmp	r0, #0
    1d80:	strne	r5, [r0]
    1d84:	mov	r0, r4
    1d88:	mov	r1, #36	; 0x24
    1d8c:	bl	0 <flatcc_builder_start_table>
    1d90:	movw	r1, #0
    1d94:	mov	r0, r4
    1d98:	mov	r2, #7
    1d9c:	movt	r1, #0
    1da0:	bl	0 <flatcc_builder_create_string>
    1da4:	cmp	r0, #0
    1da8:	beq	1dc4 <gen_monster+0x2b8>
    1dac:	mov	r5, r0
    1db0:	mov	r0, r4
    1db4:	mov	r1, #3
    1db8:	bl	0 <flatcc_builder_table_add_offset>
    1dbc:	cmp	r0, #0
    1dc0:	strne	r5, [r0]
    1dc4:	movw	r1, #0
    1dc8:	mov	r0, r4
    1dcc:	mov	r2, #1
    1dd0:	movt	r1, #0
    1dd4:	bl	0 <flatcc_builder_check_required>
    1dd8:	cmp	r0, #0
    1ddc:	beq	240c <gen_monster+0x900>
    1de0:	mov	r0, r4
    1de4:	bl	0 <flatcc_builder_end_table>
    1de8:	mov	r5, r0
    1dec:	mov	r0, r4
    1df0:	bl	0 <flatcc_builder_start_offset_vector>
    1df4:	mov	r0, r4
    1df8:	mov	r1, #2
    1dfc:	bl	0 <flatcc_builder_extend_offset_vector>
    1e00:	str	r5, [r0]
    1e04:	str	r5, [r0, #4]
    1e08:	mov	r0, r4
    1e0c:	mov	r1, #36	; 0x24
    1e10:	bl	0 <flatcc_builder_start_table>
    1e14:	movw	r1, #0
    1e18:	mov	r0, r4
    1e1c:	mov	r2, #30
    1e20:	movt	r1, #0
    1e24:	bl	0 <flatcc_builder_create_string_strn>
    1e28:	cmp	r0, #0
    1e2c:	beq	1e48 <gen_monster+0x33c>
    1e30:	mov	r6, r0
    1e34:	mov	r0, r4
    1e38:	mov	r1, #3
    1e3c:	bl	0 <flatcc_builder_table_add_offset>
    1e40:	cmp	r0, #0
    1e44:	strne	r6, [r0]
    1e48:	movw	r1, #0
    1e4c:	mov	r0, r4
    1e50:	mov	r2, #1
    1e54:	movt	r1, #0
    1e58:	bl	0 <flatcc_builder_check_required>
    1e5c:	cmp	r0, #0
    1e60:	beq	240c <gen_monster+0x900>
    1e64:	mov	r0, r4
    1e68:	bl	0 <flatcc_builder_end_table>
    1e6c:	mov	r1, r0
    1e70:	mov	r0, r4
    1e74:	bl	0 <flatcc_builder_offset_vector_push>
    1e78:	ldr	r6, [r0]
    1e7c:	mov	r0, r4
    1e80:	mov	r1, #3
    1e84:	bl	0 <flatcc_builder_extend_offset_vector>
    1e88:	stm	r0, {r5, r6}
    1e8c:	mov	r0, r4
    1e90:	mov	r1, #1
    1e94:	bl	0 <flatcc_builder_truncate_offset_vector>
    1e98:	mov	r0, r4
    1e9c:	bl	0 <flatcc_builder_offset_vector_count>
    1ea0:	cmp	r0, #5
    1ea4:	bne	246c <gen_monster+0x960>
    1ea8:	mov	r0, r4
    1eac:	mov	r1, #36	; 0x24
    1eb0:	bl	0 <flatcc_builder_start_table>
    1eb4:	movw	r1, #0
    1eb8:	mov	r0, r4
    1ebc:	mov	r2, #8
    1ec0:	movt	r1, #0
    1ec4:	bl	0 <flatcc_builder_create_string_strn>
    1ec8:	cmp	r0, #0
    1ecc:	beq	1ee8 <gen_monster+0x3dc>
    1ed0:	mov	r6, r0
    1ed4:	mov	r0, r4
    1ed8:	mov	r1, #3
    1edc:	bl	0 <flatcc_builder_table_add_offset>
    1ee0:	cmp	r0, #0
    1ee4:	strne	r6, [r0]
    1ee8:	movw	r1, #0
    1eec:	mov	r0, r4
    1ef0:	mov	r2, #1
    1ef4:	movt	r1, #0
    1ef8:	bl	0 <flatcc_builder_check_required>
    1efc:	cmp	r0, #0
    1f00:	beq	240c <gen_monster+0x900>
    1f04:	mov	r0, r4
    1f08:	bl	0 <flatcc_builder_end_table>
    1f0c:	mov	r1, r0
    1f10:	mov	r0, r4
    1f14:	bl	0 <flatcc_builder_offset_vector_push>
    1f18:	ldr	r0, [r0]
    1f1c:	str	r0, [sp, #24]
    1f20:	mov	r0, r4
    1f24:	bl	0 <flatcc_builder_offset_vector_count>
    1f28:	cmp	r0, #6
    1f2c:	bne	248c <gen_monster+0x980>
    1f30:	mov	r0, r4
    1f34:	bl	0 <flatcc_builder_offset_vector_edit>
    1f38:	ldr	r1, [r0, #8]
    1f3c:	ldr	r2, [r0, #20]
    1f40:	str	r1, [sp, #28]
    1f44:	str	r2, [r0]
    1f48:	str	r5, [r0, #20]
    1f4c:	add	r1, sp, #24
    1f50:	mov	r0, r4
    1f54:	mov	r2, #2
    1f58:	bl	0 <flatcc_builder_append_offset_vector>
    1f5c:	mov	r0, r4
    1f60:	bl	0 <flatcc_builder_end_offset_vector>
    1f64:	cmp	r0, #0
    1f68:	beq	1f84 <gen_monster+0x478>
    1f6c:	mov	r6, r0
    1f70:	mov	r0, r4
    1f74:	mov	r1, #11
    1f78:	bl	0 <flatcc_builder_table_add_offset>
    1f7c:	cmp	r0, #0
    1f80:	strne	r6, [r0]
    1f84:	movw	r1, #0
    1f88:	mov	r0, r4
    1f8c:	movt	r1, #0
    1f90:	bl	0 <flatcc_builder_create_string_str>
    1f94:	movw	r1, #0
    1f98:	str	r0, [sp, #12]
    1f9c:	mov	r0, r4
    1fa0:	mov	r2, #2
    1fa4:	movt	r1, #0
    1fa8:	bl	0 <flatcc_builder_create_string>
    1fac:	movw	r1, #0
    1fb0:	str	r0, [sp, #16]
    1fb4:	mov	r0, r4
    1fb8:	movt	r1, #0
    1fbc:	bl	0 <flatcc_builder_create_string_str>
    1fc0:	str	r0, [sp, #20]
    1fc4:	add	r1, sp, #12
    1fc8:	mov	r0, r4
    1fcc:	mov	r2, #3
    1fd0:	bl	0 <flatcc_builder_create_offset_vector>
    1fd4:	cmp	r0, #0
    1fd8:	beq	1ff4 <gen_monster+0x4e8>
    1fdc:	mov	r6, r0
    1fe0:	mov	r0, r4
    1fe4:	mov	r1, #10
    1fe8:	bl	0 <flatcc_builder_table_add_offset>
    1fec:	cmp	r0, #0
    1ff0:	strne	r6, [r0]
    1ff4:	mov	r0, r4
    1ff8:	mov	r1, #1
    1ffc:	mov	r2, #1
    2000:	mvn	r3, #0
    2004:	bl	0 <flatcc_builder_start_vector>
    2008:	add	r6, sp, #8
    200c:	mov	r0, r4
    2010:	mov	r2, #1
    2014:	mov	r1, r6
    2018:	bl	0 <flatcc_builder_append_vector>
    201c:	orr	r1, r6, #1
    2020:	mov	r0, r4
    2024:	mov	r2, #3
    2028:	bl	0 <flatcc_builder_append_vector>
    202c:	mov	r0, r4
    2030:	bl	0 <flatcc_builder_end_vector>
    2034:	cmp	r0, #0
    2038:	beq	2054 <gen_monster+0x548>
    203c:	mov	r6, r0
    2040:	mov	r0, r4
    2044:	mov	r1, #24
    2048:	bl	0 <flatcc_builder_table_add_offset>
    204c:	cmp	r0, #0
    2050:	strne	r6, [r0]
    2054:	cmp	r5, #0
    2058:	beq	2098 <gen_monster+0x58c>
    205c:	mov	r0, r4
    2060:	mov	r1, #7
    2064:	mov	r2, #1
    2068:	mov	r3, #1
    206c:	bl	0 <flatcc_builder_table_add>
    2070:	cmp	r0, #0
    2074:	beq	2098 <gen_monster+0x58c>
    2078:	mov	r6, r0
    207c:	mov	r0, r4
    2080:	mov	r1, #8
    2084:	bl	0 <flatcc_builder_table_add_offset>
    2088:	cmp	r0, #0
    208c:	movne	r1, #1
    2090:	strbne	r1, [r6]
    2094:	strne	r5, [r0]
    2098:	mov	r0, r4
    209c:	mov	r1, #36	; 0x24
    20a0:	bl	0 <flatcc_builder_start_table>
    20a4:	movw	r1, #0
    20a8:	mov	r0, r4
    20ac:	movt	r1, #0
    20b0:	bl	0 <flatcc_builder_create_string_str>
    20b4:	cmp	r0, #0
    20b8:	beq	20d4 <gen_monster+0x5c8>
    20bc:	mov	r6, r0
    20c0:	mov	r0, r4
    20c4:	mov	r1, #3
    20c8:	bl	0 <flatcc_builder_table_add_offset>
    20cc:	cmp	r0, #0
    20d0:	strne	r6, [r0]
    20d4:	mov	r0, r4
    20d8:	bl	0 <flatcc_builder_start_offset_vector>
    20dc:	mov	r0, r4
    20e0:	mov	r1, #36	; 0x24
    20e4:	bl	0 <flatcc_builder_start_table>
    20e8:	cmp	r5, #0
    20ec:	beq	212c <gen_monster+0x620>
    20f0:	mov	r0, r4
    20f4:	mov	r1, #7
    20f8:	mov	r2, #1
    20fc:	mov	r3, #1
    2100:	bl	0 <flatcc_builder_table_add>
    2104:	cmp	r0, #0
    2108:	beq	212c <gen_monster+0x620>
    210c:	mov	r6, r0
    2110:	mov	r0, r4
    2114:	mov	r1, #8
    2118:	bl	0 <flatcc_builder_table_add_offset>
    211c:	cmp	r0, #0
    2120:	movne	r1, #1
    2124:	strbne	r1, [r6]
    2128:	strne	r5, [r0]
    212c:	movw	r1, #0
    2130:	mov	r0, r4
    2134:	movt	r1, #0
    2138:	bl	0 <flatcc_builder_create_string_str>
    213c:	cmp	r0, #0
    2140:	beq	215c <gen_monster+0x650>
    2144:	mov	r6, r0
    2148:	mov	r0, r4
    214c:	mov	r1, #3
    2150:	bl	0 <flatcc_builder_table_add_offset>
    2154:	cmp	r0, #0
    2158:	strne	r6, [r0]
    215c:	movw	r1, #0
    2160:	mov	r0, r4
    2164:	mov	r2, #1
    2168:	movt	r1, #0
    216c:	bl	0 <flatcc_builder_check_required>
    2170:	cmp	r0, #0
    2174:	beq	240c <gen_monster+0x900>
    2178:	mov	r0, r4
    217c:	bl	0 <flatcc_builder_end_table>
    2180:	cmp	r0, #0
    2184:	beq	2194 <gen_monster+0x688>
    2188:	mov	r1, r0
    218c:	mov	r0, r4
    2190:	bl	0 <flatcc_builder_offset_vector_push>
    2194:	mov	r0, r4
    2198:	mov	r1, #36	; 0x24
    219c:	bl	0 <flatcc_builder_start_table>
    21a0:	cmp	r5, #0
    21a4:	beq	21e4 <gen_monster+0x6d8>
    21a8:	mov	r0, r4
    21ac:	mov	r1, #7
    21b0:	mov	r2, #1
    21b4:	mov	r3, #1
    21b8:	bl	0 <flatcc_builder_table_add>
    21bc:	cmp	r0, #0
    21c0:	beq	21e4 <gen_monster+0x6d8>
    21c4:	mov	r6, r0
    21c8:	mov	r0, r4
    21cc:	mov	r1, #8
    21d0:	bl	0 <flatcc_builder_table_add_offset>
    21d4:	cmp	r0, #0
    21d8:	movne	r1, #1
    21dc:	strbne	r1, [r6]
    21e0:	strne	r5, [r0]
    21e4:	movw	r1, #0
    21e8:	mov	r0, r4
    21ec:	movt	r1, #0
    21f0:	bl	0 <flatcc_builder_create_string_str>
    21f4:	cmp	r0, #0
    21f8:	beq	2214 <gen_monster+0x708>
    21fc:	mov	r6, r0
    2200:	mov	r0, r4
    2204:	mov	r1, #3
    2208:	bl	0 <flatcc_builder_table_add_offset>
    220c:	cmp	r0, #0
    2210:	strne	r6, [r0]
    2214:	movw	r1, #0
    2218:	mov	r0, r4
    221c:	mov	r2, #1
    2220:	movt	r1, #0
    2224:	bl	0 <flatcc_builder_check_required>
    2228:	cmp	r0, #0
    222c:	beq	240c <gen_monster+0x900>
    2230:	mov	r0, r4
    2234:	bl	0 <flatcc_builder_end_table>
    2238:	cmp	r0, #0
    223c:	beq	224c <gen_monster+0x740>
    2240:	mov	r1, r0
    2244:	mov	r0, r4
    2248:	bl	0 <flatcc_builder_offset_vector_push>
    224c:	mov	r0, r4
    2250:	mov	r1, #36	; 0x24
    2254:	bl	0 <flatcc_builder_start_table>
    2258:	mov	r0, r4
    225c:	mov	r1, #8
    2260:	bl	0 <flatcc_builder_table_add_offset>
    2264:	movw	r1, #0
    2268:	cmp	r0, #0
    226c:	strne	r5, [r0]
    2270:	movt	r1, #0
    2274:	mov	r0, r4
    2278:	bl	0 <flatcc_builder_create_string_str>
    227c:	cmp	r0, #0
    2280:	beq	229c <gen_monster+0x790>
    2284:	mov	r5, r0
    2288:	mov	r0, r4
    228c:	mov	r1, #3
    2290:	bl	0 <flatcc_builder_table_add_offset>
    2294:	cmp	r0, #0
    2298:	strne	r5, [r0]
    229c:	mov	r0, r4
    22a0:	mov	r1, #7
    22a4:	mov	r2, #1
    22a8:	mov	r3, #1
    22ac:	mov	r5, #1
    22b0:	bl	0 <flatcc_builder_table_add>
    22b4:	movw	r1, #0
    22b8:	cmp	r0, #0
    22bc:	mov	r2, #1
    22c0:	strbne	r5, [r0]
    22c4:	movt	r1, #0
    22c8:	mov	r0, r4
    22cc:	bl	0 <flatcc_builder_check_required>
    22d0:	cmp	r0, #0
    22d4:	beq	240c <gen_monster+0x900>
    22d8:	mov	r0, r4
    22dc:	bl	0 <flatcc_builder_end_table>
    22e0:	cmp	r0, #0
    22e4:	beq	22f4 <gen_monster+0x7e8>
    22e8:	mov	r1, r0
    22ec:	mov	r0, r4
    22f0:	bl	0 <flatcc_builder_offset_vector_push>
    22f4:	mov	r0, r4
    22f8:	bl	0 <flatcc_builder_end_offset_vector>
    22fc:	cmp	r0, #0
    2300:	beq	231c <gen_monster+0x810>
    2304:	mov	r5, r0
    2308:	mov	r0, r4
    230c:	mov	r1, #11
    2310:	bl	0 <flatcc_builder_table_add_offset>
    2314:	cmp	r0, #0
    2318:	strne	r5, [r0]
    231c:	movw	r1, #0
    2320:	mov	r0, r4
    2324:	mov	r2, #1
    2328:	movt	r1, #0
    232c:	bl	0 <flatcc_builder_check_required>
    2330:	cmp	r0, #0
    2334:	beq	240c <gen_monster+0x900>
    2338:	mov	r0, r4
    233c:	bl	0 <flatcc_builder_end_table>
    2340:	cmp	r0, #0
    2344:	beq	2360 <gen_monster+0x854>
    2348:	mov	r5, r0
    234c:	mov	r0, r4
    2350:	mov	r1, #12
    2354:	bl	0 <flatcc_builder_table_add_offset>
    2358:	cmp	r0, #0
    235c:	strne	r5, [r0]
    2360:	mov	r0, r4
    2364:	mov	r1, #15
    2368:	mov	r2, #1
    236c:	mov	r3, #1
    2370:	bl	0 <flatcc_builder_table_add>
    2374:	cmp	r0, #0
    2378:	movne	r1, #0
    237c:	strbne	r1, [r0]
    2380:	mov	r0, r4
    2384:	mov	r1, #3
    2388:	bl	0 <flatcc_builder_start_table>
    238c:	movw	r1, #0
    2390:	mov	r0, r4
    2394:	mov	r2, #0
    2398:	movt	r1, #0
    239c:	bl	0 <flatcc_builder_check_required>
    23a0:	cmp	r0, #0
    23a4:	beq	24ac <gen_monster+0x9a0>
    23a8:	mov	r0, r4
    23ac:	bl	0 <flatcc_builder_end_table>
    23b0:	cmp	r0, #0
    23b4:	beq	23d0 <gen_monster+0x8c4>
    23b8:	mov	r5, r0
    23bc:	mov	r0, r4
    23c0:	mov	r1, #14
    23c4:	bl	0 <flatcc_builder_table_add_offset>
    23c8:	cmp	r0, #0
    23cc:	strne	r5, [r0]
    23d0:	movw	r1, #0
    23d4:	mov	r0, r4
    23d8:	mov	r2, #1
    23dc:	movt	r1, #0
    23e0:	bl	0 <flatcc_builder_check_required>
    23e4:	cmp	r0, #0
    23e8:	beq	240c <gen_monster+0x900>
    23ec:	mov	r0, r4
    23f0:	bl	0 <flatcc_builder_end_table>
    23f4:	mov	r1, r0
    23f8:	mov	r0, r4
    23fc:	bl	0 <flatcc_builder_end_buffer>
    2400:	mov	r0, #0
    2404:	sub	sp, fp, #16
    2408:	pop	{r4, r5, r6, sl, fp, pc}
    240c:	movw	r0, #0
    2410:	movw	r1, #0
    2414:	movw	r3, #0
    2418:	mov	r2, #235	; 0xeb
    241c:	movt	r0, #0
    2420:	movt	r1, #0
    2424:	movt	r3, #0
    2428:	bl	0 <__assert_fail>
    242c:	movw	r0, #0
    2430:	movw	r1, #0
    2434:	movw	r3, #0
    2438:	movw	r2, #881	; 0x371
    243c:	movt	r0, #0
    2440:	movt	r1, #0
    2444:	movt	r3, #0
    2448:	bl	0 <__assert_fail>
    244c:	movw	r0, #0
    2450:	movw	r1, #0
    2454:	movw	r3, #0
    2458:	movw	r2, #883	; 0x373
    245c:	movt	r0, #0
    2460:	movt	r1, #0
    2464:	movt	r3, #0
    2468:	bl	0 <__assert_fail>
    246c:	movw	r0, #0
    2470:	movw	r1, #0
    2474:	movw	r3, #0
    2478:	movw	r2, #923	; 0x39b
    247c:	movt	r0, #0
    2480:	movt	r1, #0
    2484:	movt	r3, #0
    2488:	bl	0 <__assert_fail>
    248c:	movw	r0, #0
    2490:	movw	r1, #0
    2494:	movw	r3, #0
    2498:	movw	r2, #929	; 0x3a1
    249c:	movt	r0, #0
    24a0:	movt	r1, #0
    24a4:	movt	r3, #0
    24a8:	bl	0 <__assert_fail>
    24ac:	movw	r0, #0
    24b0:	movw	r1, #0
    24b4:	movw	r3, #0
    24b8:	mov	r2, #221	; 0xdd
    24bc:	movt	r0, #0
    24c0:	movt	r1, #0
    24c4:	movt	r3, #0
    24c8:	bl	0 <__assert_fail>

000024cc <test_monster>:
    24cc:	push	{r4, r5, fp, lr}
    24d0:	add	fp, sp, #8
    24d4:	sub	sp, sp, #8
    24d8:	mov	r1, #0
    24dc:	mov	r4, r0
    24e0:	bl	1b0c <gen_monster>
    24e4:	add	r1, sp, #4
    24e8:	mov	r0, r4
    24ec:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    24f0:	mov	r4, r0
    24f4:	movw	r0, #0
    24f8:	ldr	r2, [sp, #4]
    24fc:	movt	r0, #0
    2500:	mov	r1, r4
    2504:	ldr	r3, [r0]
    2508:	movw	r0, #0
    250c:	movt	r0, #0
    2510:	bl	5d4 <hexdump>
    2514:	ldr	r1, [sp, #4]
    2518:	movw	r2, #0
    251c:	movw	r3, #0
    2520:	mov	r0, r4
    2524:	movt	r2, #0
    2528:	movt	r3, #0
    252c:	bl	0 <flatcc_verify_table_as_root>
    2530:	cmp	r0, #0
    2534:	beq	2554 <test_monster+0x88>
    2538:	bl	0 <flatcc_verify_error_string>
    253c:	mov	r1, r0
    2540:	movw	r0, #0
    2544:	movt	r0, #0
    2548:	bl	0 <printf>
    254c:	mvn	r5, #0
    2550:	b	2568 <test_monster+0x9c>
    2554:	mov	r0, r4
    2558:	bl	f2c <verify_monster>
    255c:	mov	r5, r0
    2560:	mov	r0, r4
    2564:	bl	0 <flatcc_builder_aligned_free>
    2568:	mov	r0, r5
    256c:	sub	sp, fp, #8
    2570:	pop	{r4, r5, fp, pc}

00002574 <test_monster_with_size>:
    2574:	push	{r4, r5, fp, lr}
    2578:	add	fp, sp, #8
    257c:	sub	sp, sp, #8
    2580:	mov	r1, #1
    2584:	mov	r4, r0
    2588:	bl	1b0c <gen_monster>
    258c:	add	r1, sp, #4
    2590:	mov	r0, r4
    2594:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    2598:	mov	r4, r0
    259c:	movw	r0, #0
    25a0:	ldr	r2, [sp, #4]
    25a4:	movt	r0, #0
    25a8:	mov	r1, r4
    25ac:	ldr	r3, [r0]
    25b0:	movw	r0, #0
    25b4:	movt	r0, #0
    25b8:	bl	5d4 <hexdump>
    25bc:	tst	r4, #15
    25c0:	beq	25e8 <test_monster_with_size+0x74>
    25c4:	movw	r0, #0
    25c8:	movt	r0, #0
    25cc:	bl	0 <printf>
    25d0:	movw	r0, #0
    25d4:	mov	r1, r4
    25d8:	movt	r0, #0
    25dc:	bl	0 <printf>
    25e0:	mvn	r5, #0
    25e4:	b	265c <test_monster_with_size+0xe8>
    25e8:	mov	r5, r4
    25ec:	ldr	r0, [sp, #4]
    25f0:	ldr	r1, [r5], #4
    25f4:	sub	r2, r0, #4
    25f8:	cmp	r1, r2
    25fc:	bne	2634 <test_monster_with_size+0xc0>
    2600:	movw	r2, #0
    2604:	movw	r3, #0
    2608:	mov	r0, r5
    260c:	movt	r2, #0
    2610:	movt	r3, #0
    2614:	bl	0 <flatcc_verify_table_as_root>
    2618:	cmp	r0, #0
    261c:	beq	2648 <test_monster_with_size+0xd4>
    2620:	bl	0 <flatcc_verify_error_string>
    2624:	mov	r1, r0
    2628:	movw	r0, #0
    262c:	movt	r0, #0
    2630:	b	25dc <test_monster_with_size+0x68>
    2634:	movw	r0, #0
    2638:	movt	r0, #0
    263c:	bl	0 <printf>
    2640:	mvn	r5, #0
    2644:	b	265c <test_monster_with_size+0xe8>
    2648:	mov	r0, r5
    264c:	bl	f2c <verify_monster>
    2650:	mov	r5, r0
    2654:	mov	r0, r4
    2658:	bl	0 <flatcc_builder_aligned_free>
    265c:	mov	r0, r5
    2660:	sub	sp, fp, #8
    2664:	pop	{r4, r5, fp, pc}

00002668 <test_string>:
    2668:	push	{r4, r5, fp, lr}
    266c:	add	fp, sp, #8
    2670:	mov	r4, r0
    2674:	bl	0 <flatcc_builder_reset>
    2678:	movw	r1, #0
    267c:	mov	r0, r4
    2680:	mov	r2, #0
    2684:	mov	r3, #0
    2688:	movt	r1, #0
    268c:	bl	0 <flatcc_builder_start_buffer>
    2690:	cmp	r0, #0
    2694:	bne	26a4 <test_string+0x3c>
    2698:	mov	r0, r4
    269c:	mov	r1, #36	; 0x24
    26a0:	bl	0 <flatcc_builder_start_table>
    26a4:	mov	r0, r4
    26a8:	bl	0 <flatcc_builder_start_string>
    26ac:	mov	r0, r4
    26b0:	mov	r1, #3
    26b4:	bl	0 <flatcc_builder_extend_string>
    26b8:	movw	r1, #12849	; 0x3231
    26bc:	strh	r1, [r0]
    26c0:	mov	r1, #51	; 0x33
    26c4:	strb	r1, [r0, #2]
    26c8:	movw	r1, #0
    26cc:	mov	r0, r4
    26d0:	movt	r1, #0
    26d4:	bl	0 <flatcc_builder_append_string_str>
    26d8:	mov	r0, r4
    26dc:	bl	0 <flatcc_builder_string_len>
    26e0:	cmp	r0, #4
    26e4:	bne	2844 <test_string+0x1dc>
    26e8:	movw	r1, #0
    26ec:	mov	r0, r4
    26f0:	mov	r2, #30
    26f4:	movt	r1, #0
    26f8:	bl	0 <flatcc_builder_append_string_strn>
    26fc:	mov	r0, r4
    2700:	bl	0 <flatcc_builder_string_len>
    2704:	cmp	r0, #8
    2708:	bne	2864 <test_string+0x1fc>
    270c:	movw	r1, #0
    2710:	mov	r0, r4
    2714:	mov	r2, #2
    2718:	movt	r1, #0
    271c:	bl	0 <flatcc_builder_append_string>
    2720:	mov	r0, r4
    2724:	bl	0 <flatcc_builder_string_len>
    2728:	cmp	r0, #10
    272c:	bne	2884 <test_string+0x21c>
    2730:	mov	r0, r4
    2734:	mov	r1, #3
    2738:	bl	0 <flatcc_builder_truncate_string>
    273c:	mov	r0, r4
    2740:	bl	0 <flatcc_builder_string_len>
    2744:	cmp	r0, #7
    2748:	bne	28a4 <test_string+0x23c>
    274c:	mov	r0, r4
    2750:	bl	0 <flatcc_builder_string_edit>
    2754:	mov	r1, #46	; 0x2e
    2758:	strb	r1, [r0, #4]
    275c:	mov	r0, r4
    2760:	bl	0 <flatcc_builder_end_string>
    2764:	cmp	r0, #0
    2768:	beq	2784 <test_string+0x11c>
    276c:	mov	r5, r0
    2770:	mov	r0, r4
    2774:	mov	r1, #3
    2778:	bl	0 <flatcc_builder_table_add_offset>
    277c:	cmp	r0, #0
    2780:	strne	r5, [r0]
    2784:	movw	r1, #0
    2788:	mov	r0, r4
    278c:	mov	r2, #1
    2790:	movt	r1, #0
    2794:	bl	0 <flatcc_builder_check_required>
    2798:	cmp	r0, #0
    279c:	beq	28c4 <test_string+0x25c>
    27a0:	mov	r0, r4
    27a4:	bl	0 <flatcc_builder_end_table>
    27a8:	mov	r1, r0
    27ac:	mov	r0, r4
    27b0:	bl	0 <flatcc_builder_end_buffer>
    27b4:	mov	r0, r4
    27b8:	mov	r1, #0
    27bc:	bl	0 <flatcc_builder_get_direct_buffer>
    27c0:	cmp	r0, #0
    27c4:	beq	28e4 <test_string+0x27c>
    27c8:	ldr	r1, [r0, #4]
    27cc:	movw	r2, #20301	; 0x4f4d
    27d0:	movt	r2, #21326	; 0x534e
    27d4:	cmp	r1, r2
    27d8:	bne	2904 <test_string+0x29c>
    27dc:	ldr	r1, [r0]
    27e0:	ldr	r2, [r0, r1]!
    27e4:	mov	r1, r0
    27e8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    27ec:	cmp	r2, #11
    27f0:	bls	2838 <test_string+0x1d0>
    27f4:	ldrh	r1, [r1, #10]
    27f8:	cmp	r1, #0
    27fc:	beq	2838 <test_string+0x1d0>
    2800:	ldr	r1, [r0, r1]!
    2804:	add	r0, r0, r1
    2808:	movw	r1, #0
    280c:	add	r0, r0, #4
    2810:	movt	r1, #0
    2814:	bl	0 <strcmp>
    2818:	cmp	r0, #0
    281c:	moveq	r0, #0
    2820:	popeq	{r4, r5, fp, pc}
    2824:	movw	r0, #0
    2828:	movt	r0, #0
    282c:	bl	0 <puts>
    2830:	mvn	r0, #0
    2834:	pop	{r4, r5, fp, pc}
    2838:	movw	r0, #0
    283c:	movt	r0, #0
    2840:	b	290c <test_string+0x2a4>
    2844:	movw	r0, #0
    2848:	movw	r1, #0
    284c:	movw	r3, #0
    2850:	movw	r2, #1080	; 0x438
    2854:	movt	r0, #0
    2858:	movt	r1, #0
    285c:	movt	r3, #0
    2860:	bl	0 <__assert_fail>
    2864:	movw	r0, #0
    2868:	movw	r1, #0
    286c:	movw	r3, #0
    2870:	movw	r2, #1082	; 0x43a
    2874:	movt	r0, #0
    2878:	movt	r1, #0
    287c:	movt	r3, #0
    2880:	bl	0 <__assert_fail>
    2884:	movw	r0, #0
    2888:	movw	r1, #0
    288c:	movw	r3, #0
    2890:	movw	r2, #1084	; 0x43c
    2894:	movt	r0, #0
    2898:	movt	r1, #0
    289c:	movt	r3, #0
    28a0:	bl	0 <__assert_fail>
    28a4:	movw	r0, #0
    28a8:	movw	r1, #0
    28ac:	movw	r3, #0
    28b0:	movw	r2, #1086	; 0x43e
    28b4:	movt	r0, #0
    28b8:	movt	r1, #0
    28bc:	movt	r3, #0
    28c0:	bl	0 <__assert_fail>
    28c4:	movw	r0, #0
    28c8:	movw	r1, #0
    28cc:	movw	r3, #0
    28d0:	mov	r2, #235	; 0xeb
    28d4:	movt	r0, #0
    28d8:	movt	r1, #0
    28dc:	movt	r3, #0
    28e0:	bl	0 <__assert_fail>
    28e4:	movw	r0, #0
    28e8:	movw	r1, #0
    28ec:	movw	r3, #0
    28f0:	movw	r2, #1093	; 0x445
    28f4:	movt	r0, #0
    28f8:	movt	r1, #0
    28fc:	movt	r3, #0
    2900:	bl	0 <__assert_fail>
    2904:	movw	r0, #0
    2908:	movt	r0, #0
    290c:	movw	r1, #0
    2910:	movw	r3, #0
    2914:	movw	r2, #699	; 0x2bb
    2918:	movt	r1, #0
    291c:	movt	r3, #0
    2920:	bl	0 <__assert_fail>

00002924 <test_sort_find>:
    2924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2928:	add	fp, sp, #28
    292c:	sub	sp, sp, #20
    2930:	mov	r4, r0
    2934:	bl	0 <flatcc_builder_reset>
    2938:	movw	r1, #0
    293c:	mov	r0, r4
    2940:	mov	r2, #0
    2944:	mov	r3, #0
    2948:	movt	r1, #0
    294c:	bl	0 <flatcc_builder_start_buffer>
    2950:	cmp	r0, #0
    2954:	bne	2964 <test_sort_find+0x40>
    2958:	mov	r0, r4
    295c:	mov	r1, #36	; 0x24
    2960:	bl	0 <flatcc_builder_start_table>
    2964:	movw	r1, #0
    2968:	mov	r0, r4
    296c:	movt	r1, #0
    2970:	bl	0 <flatcc_builder_create_string_str>
    2974:	cmp	r0, #0
    2978:	beq	2994 <test_sort_find+0x70>
    297c:	mov	r5, r0
    2980:	mov	r0, r4
    2984:	mov	r1, #3
    2988:	bl	0 <flatcc_builder_table_add_offset>
    298c:	cmp	r0, #0
    2990:	strne	r5, [r0]
    2994:	mov	r0, r4
    2998:	bl	0 <flatcc_builder_start_offset_vector>
    299c:	mov	r0, r4
    29a0:	mov	r1, #36	; 0x24
    29a4:	bl	0 <flatcc_builder_start_table>
    29a8:	movw	r1, #0
    29ac:	mov	r0, r4
    29b0:	movt	r1, #0
    29b4:	bl	0 <flatcc_builder_create_string_str>
    29b8:	cmp	r0, #0
    29bc:	beq	29d8 <test_sort_find+0xb4>
    29c0:	mov	r5, r0
    29c4:	mov	r0, r4
    29c8:	mov	r1, #3
    29cc:	bl	0 <flatcc_builder_table_add_offset>
    29d0:	cmp	r0, #0
    29d4:	strne	r5, [r0]
    29d8:	movw	r1, #0
    29dc:	mov	r0, r4
    29e0:	mov	r2, #1
    29e4:	movt	r1, #0
    29e8:	bl	0 <flatcc_builder_check_required>
    29ec:	cmp	r0, #0
    29f0:	beq	33f4 <test_sort_find+0xad0>
    29f4:	mov	r0, r4
    29f8:	bl	0 <flatcc_builder_end_table>
    29fc:	cmp	r0, #0
    2a00:	beq	2a10 <test_sort_find+0xec>
    2a04:	mov	r1, r0
    2a08:	mov	r0, r4
    2a0c:	bl	0 <flatcc_builder_offset_vector_push>
    2a10:	mov	r0, r4
    2a14:	mov	r1, #36	; 0x24
    2a18:	bl	0 <flatcc_builder_start_table>
    2a1c:	movw	r1, #0
    2a20:	mov	r0, r4
    2a24:	movt	r1, #0
    2a28:	bl	0 <flatcc_builder_create_string_str>
    2a2c:	cmp	r0, #0
    2a30:	beq	2a4c <test_sort_find+0x128>
    2a34:	mov	r5, r0
    2a38:	mov	r0, r4
    2a3c:	mov	r1, #3
    2a40:	bl	0 <flatcc_builder_table_add_offset>
    2a44:	cmp	r0, #0
    2a48:	strne	r5, [r0]
    2a4c:	movw	r1, #0
    2a50:	mov	r0, r4
    2a54:	mov	r2, #1
    2a58:	movt	r1, #0
    2a5c:	bl	0 <flatcc_builder_check_required>
    2a60:	cmp	r0, #0
    2a64:	beq	33f4 <test_sort_find+0xad0>
    2a68:	mov	r0, r4
    2a6c:	bl	0 <flatcc_builder_end_table>
    2a70:	cmp	r0, #0
    2a74:	beq	2a84 <test_sort_find+0x160>
    2a78:	mov	r1, r0
    2a7c:	mov	r0, r4
    2a80:	bl	0 <flatcc_builder_offset_vector_push>
    2a84:	mov	r0, r4
    2a88:	mov	r1, #36	; 0x24
    2a8c:	bl	0 <flatcc_builder_start_table>
    2a90:	movw	r1, #0
    2a94:	mov	r0, r4
    2a98:	movt	r1, #0
    2a9c:	bl	0 <flatcc_builder_create_string_str>
    2aa0:	cmp	r0, #0
    2aa4:	beq	2ac0 <test_sort_find+0x19c>
    2aa8:	mov	r5, r0
    2aac:	mov	r0, r4
    2ab0:	mov	r1, #3
    2ab4:	bl	0 <flatcc_builder_table_add_offset>
    2ab8:	cmp	r0, #0
    2abc:	strne	r5, [r0]
    2ac0:	movw	r1, #0
    2ac4:	mov	r0, r4
    2ac8:	mov	r2, #1
    2acc:	movt	r1, #0
    2ad0:	bl	0 <flatcc_builder_check_required>
    2ad4:	cmp	r0, #0
    2ad8:	beq	33f4 <test_sort_find+0xad0>
    2adc:	mov	r0, r4
    2ae0:	bl	0 <flatcc_builder_end_table>
    2ae4:	cmp	r0, #0
    2ae8:	beq	2af8 <test_sort_find+0x1d4>
    2aec:	mov	r1, r0
    2af0:	mov	r0, r4
    2af4:	bl	0 <flatcc_builder_offset_vector_push>
    2af8:	mov	r0, r4
    2afc:	mov	r1, #36	; 0x24
    2b00:	bl	0 <flatcc_builder_start_table>
    2b04:	movw	r1, #0
    2b08:	mov	r0, r4
    2b0c:	movt	r1, #0
    2b10:	bl	0 <flatcc_builder_create_string_str>
    2b14:	cmp	r0, #0
    2b18:	beq	2b34 <test_sort_find+0x210>
    2b1c:	mov	r5, r0
    2b20:	mov	r0, r4
    2b24:	mov	r1, #3
    2b28:	bl	0 <flatcc_builder_table_add_offset>
    2b2c:	cmp	r0, #0
    2b30:	strne	r5, [r0]
    2b34:	movw	r1, #0
    2b38:	mov	r0, r4
    2b3c:	mov	r2, #1
    2b40:	movt	r1, #0
    2b44:	bl	0 <flatcc_builder_check_required>
    2b48:	cmp	r0, #0
    2b4c:	beq	33f4 <test_sort_find+0xad0>
    2b50:	mov	r0, r4
    2b54:	bl	0 <flatcc_builder_end_table>
    2b58:	cmp	r0, #0
    2b5c:	beq	2b6c <test_sort_find+0x248>
    2b60:	mov	r1, r0
    2b64:	mov	r0, r4
    2b68:	bl	0 <flatcc_builder_offset_vector_push>
    2b6c:	mov	r0, r4
    2b70:	mov	r1, #36	; 0x24
    2b74:	bl	0 <flatcc_builder_start_table>
    2b78:	movw	r1, #0
    2b7c:	mov	r0, r4
    2b80:	movt	r1, #0
    2b84:	bl	0 <flatcc_builder_create_string_str>
    2b88:	cmp	r0, #0
    2b8c:	beq	2ba8 <test_sort_find+0x284>
    2b90:	mov	r5, r0
    2b94:	mov	r0, r4
    2b98:	mov	r1, #3
    2b9c:	bl	0 <flatcc_builder_table_add_offset>
    2ba0:	cmp	r0, #0
    2ba4:	strne	r5, [r0]
    2ba8:	movw	r1, #0
    2bac:	mov	r0, r4
    2bb0:	mov	r2, #1
    2bb4:	movt	r1, #0
    2bb8:	bl	0 <flatcc_builder_check_required>
    2bbc:	cmp	r0, #0
    2bc0:	beq	33f4 <test_sort_find+0xad0>
    2bc4:	mov	r0, r4
    2bc8:	bl	0 <flatcc_builder_end_table>
    2bcc:	cmp	r0, #0
    2bd0:	beq	2be0 <test_sort_find+0x2bc>
    2bd4:	mov	r1, r0
    2bd8:	mov	r0, r4
    2bdc:	bl	0 <flatcc_builder_offset_vector_push>
    2be0:	mov	r0, r4
    2be4:	bl	0 <flatcc_builder_end_offset_vector>
    2be8:	cmp	r0, #0
    2bec:	beq	2c08 <test_sort_find+0x2e4>
    2bf0:	mov	r5, r0
    2bf4:	mov	r0, r4
    2bf8:	mov	r1, #11
    2bfc:	bl	0 <flatcc_builder_table_add_offset>
    2c00:	cmp	r0, #0
    2c04:	strne	r5, [r0]
    2c08:	movw	r1, #0
    2c0c:	mov	r0, r4
    2c10:	mov	r2, #1
    2c14:	movt	r1, #0
    2c18:	bl	0 <flatcc_builder_check_required>
    2c1c:	cmp	r0, #0
    2c20:	beq	33f4 <test_sort_find+0xad0>
    2c24:	mov	r0, r4
    2c28:	bl	0 <flatcc_builder_end_table>
    2c2c:	mov	r1, r0
    2c30:	mov	r0, r4
    2c34:	bl	0 <flatcc_builder_end_buffer>
    2c38:	add	r1, sp, #16
    2c3c:	mov	r0, r4
    2c40:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    2c44:	movw	r9, #0
    2c48:	ldr	r2, [sp, #16]
    2c4c:	mov	r4, r0
    2c50:	movw	r0, #0
    2c54:	movt	r9, #0
    2c58:	movt	r0, #0
    2c5c:	mov	r1, r4
    2c60:	ldr	r3, [r9]
    2c64:	bl	5d4 <hexdump>
    2c68:	cmp	r4, #0
    2c6c:	beq	3414 <test_sort_find+0xaf0>
    2c70:	ldr	r0, [r4, #4]
    2c74:	movw	r1, #20301	; 0x4f4d
    2c78:	movt	r1, #21326	; 0x534e
    2c7c:	cmp	r0, r1
    2c80:	bne	3414 <test_sort_find+0xaf0>
    2c84:	ldr	r1, [r4]
    2c88:	str	r4, [sp, #12]
    2c8c:	ldr	r2, [r4, r1]!
    2c90:	str	r1, [sp, #8]
    2c94:	mov	r1, r4
    2c98:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2c9c:	cmp	r2, #27
    2ca0:	bls	3434 <test_sort_find+0xb10>
    2ca4:	ldrh	r1, [r1, #26]
    2ca8:	cmp	r1, #0
    2cac:	beq	3434 <test_sort_find+0xb10>
    2cb0:	str	r1, [sp, #4]
    2cb4:	ldr	r1, [r4, r1]!
    2cb8:	ldr	sl, [r4, r1]!
    2cbc:	str	r1, [sp]
    2cc0:	add	r5, r4, #4
    2cc4:	cmp	sl, #0
    2cc8:	beq	2d68 <test_sort_find+0x444>
    2ccc:	lsr	r7, sl, #1
    2cd0:	sub	r6, sl, #1
    2cd4:	mov	r0, r5
    2cd8:	mov	r1, r7
    2cdc:	mov	r2, r6
    2ce0:	bl	a228 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    2ce4:	sub	r7, r7, #1
    2ce8:	cmn	r7, #1
    2cec:	bne	2cd4 <test_sort_find+0x3b0>
    2cf0:	cmp	r6, #0
    2cf4:	beq	2d68 <test_sort_find+0x444>
    2cf8:	mvn	r0, #3
    2cfc:	ldr	r1, [sp]
    2d00:	sub	r6, sl, #2
    2d04:	add	r7, r0, sl, lsl #2
    2d08:	mov	r0, #4
    2d0c:	sub	r8, r0, sl, lsl #2
    2d10:	ldr	r0, [sp, #8]
    2d14:	add	r0, r1, r0
    2d18:	ldr	r1, [sp, #4]
    2d1c:	add	r0, r0, sl, lsl #2
    2d20:	add	r0, r0, r1
    2d24:	ldr	r1, [sp, #12]
    2d28:	add	r4, r1, r0
    2d2c:	ldr	r0, [r4]
    2d30:	ldr	r1, [r5]
    2d34:	mov	r2, r6
    2d38:	add	r0, r7, r0
    2d3c:	str	r0, [r5]
    2d40:	add	r0, r8, r1
    2d44:	mov	r1, #0
    2d48:	str	r0, [r4], #-4
    2d4c:	mov	r0, r5
    2d50:	bl	a228 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    2d54:	sub	r6, r6, #1
    2d58:	sub	r7, r7, #4
    2d5c:	add	r8, r8, #4
    2d60:	cmn	r6, #1
    2d64:	bne	2d2c <test_sort_find+0x408>
    2d68:	ldr	r4, [sp, #12]
    2d6c:	ldr	r3, [r9]
    2d70:	ldr	r2, [sp, #16]
    2d74:	movw	r0, #0
    2d78:	movt	r0, #0
    2d7c:	mov	r1, r4
    2d80:	bl	5d4 <hexdump>
    2d84:	ldr	r0, [r5, #-4]
    2d88:	cmp	r0, #5
    2d8c:	bne	2de4 <test_sort_find+0x4c0>
    2d90:	ldr	r1, [r5]
    2d94:	mov	r0, r5
    2d98:	ldr	r2, [r0, r1]!
    2d9c:	mov	r1, r0
    2da0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2da4:	cmp	r2, #12
    2da8:	bcc	3454 <test_sort_find+0xb30>
    2dac:	ldrh	r1, [r1, #10]
    2db0:	cmp	r1, #0
    2db4:	beq	3454 <test_sort_find+0xb30>
    2db8:	ldr	r1, [r0, r1]!
    2dbc:	add	r0, r0, r1
    2dc0:	movw	r1, #0
    2dc4:	add	r0, r0, #4
    2dc8:	movt	r1, #0
    2dcc:	bl	0 <strcmp>
    2dd0:	cmp	r0, #0
    2dd4:	beq	2e08 <test_sort_find+0x4e4>
    2dd8:	movw	r0, #0
    2ddc:	movt	r0, #0
    2de0:	b	2dec <test_sort_find+0x4c8>
    2de4:	movw	r0, #0
    2de8:	movt	r0, #0
    2dec:	bl	0 <puts>
    2df0:	mvn	r6, #0
    2df4:	mov	r0, r4
    2df8:	bl	0 <flatcc_builder_aligned_free>
    2dfc:	mov	r0, r6
    2e00:	sub	sp, fp, #28
    2e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e08:	mov	r6, r5
    2e0c:	ldr	r0, [r6, #4]!
    2e10:	ldr	r1, [r6, r0]!
    2e14:	mov	r0, r6
    2e18:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    2e1c:	cmp	r1, #12
    2e20:	bcc	3454 <test_sort_find+0xb30>
    2e24:	ldrh	r0, [r0, #10]
    2e28:	cmp	r0, #0
    2e2c:	beq	3454 <test_sort_find+0xb30>
    2e30:	mov	r1, r6
    2e34:	ldr	r0, [r1, r0]!
    2e38:	add	r0, r1, r0
    2e3c:	movw	r1, #0
    2e40:	add	r0, r0, #4
    2e44:	movt	r1, #0
    2e48:	bl	0 <strcmp>
    2e4c:	cmp	r0, #0
    2e50:	beq	2e60 <test_sort_find+0x53c>
    2e54:	movw	r0, #0
    2e58:	movt	r0, #0
    2e5c:	b	2dec <test_sort_find+0x4c8>
    2e60:	mov	r7, r5
    2e64:	ldr	r0, [r7, #8]!
    2e68:	ldr	r1, [r7, r0]!
    2e6c:	mov	r0, r7
    2e70:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    2e74:	cmp	r1, #12
    2e78:	bcc	3454 <test_sort_find+0xb30>
    2e7c:	ldrh	r0, [r0, #10]
    2e80:	cmp	r0, #0
    2e84:	beq	3454 <test_sort_find+0xb30>
    2e88:	mov	r1, r7
    2e8c:	ldr	r0, [r1, r0]!
    2e90:	add	r0, r1, r0
    2e94:	movw	r1, #0
    2e98:	add	r0, r0, #4
    2e9c:	movt	r1, #0
    2ea0:	bl	0 <strcmp>
    2ea4:	cmp	r0, #0
    2ea8:	beq	2eb8 <test_sort_find+0x594>
    2eac:	movw	r0, #0
    2eb0:	movt	r0, #0
    2eb4:	b	2dec <test_sort_find+0x4c8>
    2eb8:	mov	r0, r5
    2ebc:	ldr	r1, [r0, #12]!
    2ec0:	ldr	r2, [r0, r1]!
    2ec4:	mov	r1, r0
    2ec8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2ecc:	cmp	r2, #12
    2ed0:	bcc	3454 <test_sort_find+0xb30>
    2ed4:	ldrh	r1, [r1, #10]
    2ed8:	cmp	r1, #0
    2edc:	beq	3454 <test_sort_find+0xb30>
    2ee0:	ldr	r1, [r0, r1]!
    2ee4:	add	r0, r0, r1
    2ee8:	movw	r1, #0
    2eec:	add	r0, r0, #4
    2ef0:	movt	r1, #0
    2ef4:	bl	0 <strcmp>
    2ef8:	cmp	r0, #0
    2efc:	beq	2f0c <test_sort_find+0x5e8>
    2f00:	movw	r0, #0
    2f04:	movt	r0, #0
    2f08:	b	2dec <test_sort_find+0x4c8>
    2f0c:	mov	r0, r5
    2f10:	ldr	r1, [r0, #16]!
    2f14:	ldr	r2, [r0, r1]!
    2f18:	mov	r1, r0
    2f1c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2f20:	cmp	r2, #12
    2f24:	bcc	3454 <test_sort_find+0xb30>
    2f28:	ldrh	r1, [r1, #10]
    2f2c:	cmp	r1, #0
    2f30:	beq	3454 <test_sort_find+0xb30>
    2f34:	ldr	r1, [r0, r1]!
    2f38:	add	r0, r0, r1
    2f3c:	movw	r1, #0
    2f40:	add	r0, r0, #4
    2f44:	movt	r1, #0
    2f48:	bl	0 <strcmp>
    2f4c:	cmp	r0, #0
    2f50:	beq	2f60 <test_sort_find+0x63c>
    2f54:	movw	r0, #0
    2f58:	movt	r0, #0
    2f5c:	b	2dec <test_sort_find+0x4c8>
    2f60:	cmp	r6, r7
    2f64:	beq	30e0 <test_sort_find+0x7bc>
    2f68:	movw	r1, #0
    2f6c:	mov	r0, r5
    2f70:	movt	r1, #0
    2f74:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    2f78:	cmp	r0, #3
    2f7c:	bne	30ec <test_sort_find+0x7c8>
    2f80:	ldr	r8, [r5, #-4]
    2f84:	cmp	r8, #0
    2f88:	beq	30d4 <test_sort_find+0x7b0>
    2f8c:	mov	r7, #0
    2f90:	subs	r9, r8, #1
    2f94:	beq	3048 <test_sort_find+0x724>
    2f98:	movw	sl, #0
    2f9c:	movt	sl, #0
    2fa0:	sub	r0, r9, r7
    2fa4:	add	r6, r7, r0, lsr #1
    2fa8:	cmp	r8, r6
    2fac:	bls	3474 <test_sort_find+0xb50>
    2fb0:	mov	r0, r5
    2fb4:	ldr	r1, [r0, r6, lsl #2]!
    2fb8:	adds	r0, r0, r1
    2fbc:	beq	3494 <test_sort_find+0xb70>
    2fc0:	ldr	r2, [r0]
    2fc4:	mov	r1, r0
    2fc8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    2fcc:	cmp	r2, #12
    2fd0:	bcc	3454 <test_sort_find+0xb30>
    2fd4:	ldrh	r1, [r1, #10]
    2fd8:	cmp	r1, #0
    2fdc:	beq	3454 <test_sort_find+0xb30>
    2fe0:	ldr	r1, [r0, r1]!
    2fe4:	ldr	r4, [r0, r1]!
    2fe8:	mov	r1, sl
    2fec:	cmp	r4, #5
    2ff0:	mov	r2, r4
    2ff4:	add	r0, r0, #4
    2ff8:	movcs	r2, #5
    2ffc:	bl	0 <strncmp>
    3000:	cmp	r0, #1
    3004:	mov	r1, #0
    3008:	mov	r2, #0
    300c:	movwlt	r1, #1
    3010:	cmp	r0, #0
    3014:	movwne	r0, #1
    3018:	cmp	r4, #5
    301c:	ldr	r4, [sp, #12]
    3020:	movwcc	r2, #1
    3024:	orr	r0, r2, r0
    3028:	ands	r0, r0, r1
    302c:	moveq	r9, r6
    3030:	addne	r7, r6, #1
    3034:	cmp	r9, r7
    3038:	bhi	2fa0 <test_sort_find+0x67c>
    303c:	bne	30d4 <test_sort_find+0x7b0>
    3040:	cmp	r8, r7
    3044:	bls	3474 <test_sort_find+0xb50>
    3048:	mov	r0, r5
    304c:	ldr	r1, [r0, r7, lsl #2]!
    3050:	adds	r0, r0, r1
    3054:	beq	3494 <test_sort_find+0xb70>
    3058:	ldr	r2, [r0]
    305c:	mov	r1, r0
    3060:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    3064:	cmp	r2, #12
    3068:	bcc	3454 <test_sort_find+0xb30>
    306c:	ldrh	r1, [r1, #10]
    3070:	cmp	r1, #0
    3074:	beq	3454 <test_sort_find+0xb30>
    3078:	ldr	r1, [r0, r1]!
    307c:	ldr	r4, [r0, r1]!
    3080:	movw	r1, #0
    3084:	movt	r1, #0
    3088:	cmp	r4, #5
    308c:	mov	r2, r4
    3090:	add	r0, r0, #4
    3094:	movcs	r2, #5
    3098:	bl	0 <strncmp>
    309c:	cmp	r0, #0
    30a0:	mov	r2, r0
    30a4:	mov	r1, #0
    30a8:	mvneq	r2, #0
    30ac:	cmp	r4, #5
    30b0:	movwhi	r1, #1
    30b4:	cmp	r0, #0
    30b8:	movne	r1, r2
    30bc:	cmp	r4, #5
    30c0:	ldr	r4, [sp, #12]
    30c4:	movcc	r1, r2
    30c8:	cmp	r7, #3
    30cc:	cmpeq	r1, #0
    30d0:	beq	30f8 <test_sort_find+0x7d4>
    30d4:	movw	r0, #0
    30d8:	movt	r0, #0
    30dc:	b	2dec <test_sort_find+0x4c8>
    30e0:	movw	r0, #0
    30e4:	movt	r0, #0
    30e8:	b	2dec <test_sort_find+0x4c8>
    30ec:	movw	r0, #0
    30f0:	movt	r0, #0
    30f4:	b	2dec <test_sort_find+0x4c8>
    30f8:	movw	r1, #0
    30fc:	mov	r0, r5
    3100:	movt	r1, #0
    3104:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    3108:	cmp	r0, #3
    310c:	bne	3270 <test_sort_find+0x94c>
    3110:	ldr	r8, [r5, #-4]
    3114:	cmp	r8, #0
    3118:	beq	3264 <test_sort_find+0x940>
    311c:	mov	r7, #0
    3120:	subs	r9, r8, #1
    3124:	beq	31d8 <test_sort_find+0x8b4>
    3128:	movw	sl, #0
    312c:	movt	sl, #0
    3130:	sub	r0, r9, r7
    3134:	add	r6, r7, r0, lsr #1
    3138:	cmp	r8, r6
    313c:	bls	3474 <test_sort_find+0xb50>
    3140:	mov	r0, r5
    3144:	ldr	r1, [r0, r6, lsl #2]!
    3148:	adds	r0, r0, r1
    314c:	beq	3494 <test_sort_find+0xb70>
    3150:	ldr	r2, [r0]
    3154:	mov	r1, r0
    3158:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    315c:	cmp	r2, #12
    3160:	bcc	3454 <test_sort_find+0xb30>
    3164:	ldrh	r1, [r1, #10]
    3168:	cmp	r1, #0
    316c:	beq	3454 <test_sort_find+0xb30>
    3170:	ldr	r1, [r0, r1]!
    3174:	ldr	r4, [r0, r1]!
    3178:	mov	r1, sl
    317c:	cmp	r4, #5
    3180:	mov	r2, r4
    3184:	add	r0, r0, #4
    3188:	movcs	r2, #5
    318c:	bl	0 <strncmp>
    3190:	cmp	r0, #1
    3194:	mov	r1, #0
    3198:	mov	r2, #0
    319c:	movwlt	r1, #1
    31a0:	cmp	r0, #0
    31a4:	movwne	r0, #1
    31a8:	cmp	r4, #5
    31ac:	movwcc	r2, #1
    31b0:	orr	r0, r2, r0
    31b4:	ands	r0, r0, r1
    31b8:	moveq	r9, r6
    31bc:	addne	r7, r6, #1
    31c0:	cmp	r9, r7
    31c4:	bhi	3130 <test_sort_find+0x80c>
    31c8:	ldr	r4, [sp, #12]
    31cc:	bne	3264 <test_sort_find+0x940>
    31d0:	cmp	r8, r7
    31d4:	bls	3474 <test_sort_find+0xb50>
    31d8:	mov	r0, r5
    31dc:	ldr	r1, [r0, r7, lsl #2]!
    31e0:	adds	r0, r0, r1
    31e4:	beq	3494 <test_sort_find+0xb70>
    31e8:	ldr	r2, [r0]
    31ec:	mov	r1, r0
    31f0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    31f4:	cmp	r2, #12
    31f8:	bcc	3454 <test_sort_find+0xb30>
    31fc:	ldrh	r1, [r1, #10]
    3200:	cmp	r1, #0
    3204:	beq	3454 <test_sort_find+0xb30>
    3208:	ldr	r1, [r0, r1]!
    320c:	ldr	r4, [r0, r1]!
    3210:	movw	r1, #0
    3214:	movt	r1, #0
    3218:	cmp	r4, #5
    321c:	mov	r2, r4
    3220:	add	r0, r0, #4
    3224:	movcs	r2, #5
    3228:	bl	0 <strncmp>
    322c:	cmp	r0, #0
    3230:	mov	r2, r0
    3234:	mov	r1, #0
    3238:	mvneq	r2, #0
    323c:	cmp	r4, #5
    3240:	movwhi	r1, #1
    3244:	cmp	r0, #0
    3248:	movne	r1, r2
    324c:	cmp	r4, #5
    3250:	ldr	r4, [sp, #12]
    3254:	movcc	r1, r2
    3258:	cmp	r7, #3
    325c:	cmpeq	r1, #0
    3260:	beq	327c <test_sort_find+0x958>
    3264:	movw	r0, #0
    3268:	movt	r0, #0
    326c:	b	2dec <test_sort_find+0x4c8>
    3270:	movw	r0, #0
    3274:	movt	r0, #0
    3278:	b	2dec <test_sort_find+0x4c8>
    327c:	movw	r1, #0
    3280:	mov	r0, r5
    3284:	movt	r1, #0
    3288:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    328c:	cmn	r0, #1
    3290:	beq	32a0 <test_sort_find+0x97c>
    3294:	movw	r0, #0
    3298:	movt	r0, #0
    329c:	b	32c0 <test_sort_find+0x99c>
    32a0:	movw	r1, #0
    32a4:	mov	r0, r5
    32a8:	movt	r1, #0
    32ac:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    32b0:	cmp	r0, #0
    32b4:	beq	32cc <test_sort_find+0x9a8>
    32b8:	movw	r0, #0
    32bc:	movt	r0, #0
    32c0:	bl	0 <puts>
    32c4:	ldr	r4, [sp, #12]
    32c8:	b	2df0 <test_sort_find+0x4cc>
    32cc:	movw	r1, #0
    32d0:	mov	r0, r5
    32d4:	movt	r1, #0
    32d8:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    32dc:	cmp	r0, #1
    32e0:	bne	33b8 <test_sort_find+0xa94>
    32e4:	movw	r1, #0
    32e8:	mov	r0, r5
    32ec:	movt	r1, #0
    32f0:	bl	34a0 <MyGame_Example_Monster_vec_find_by_name>
    32f4:	cmp	r0, #4
    32f8:	bne	33c8 <test_sort_find+0xaa4>
    32fc:	ldr	sl, [r5, #-4]
    3300:	mov	r6, #0
    3304:	cmp	sl, #0
    3308:	beq	33ec <test_sort_find+0xac8>
    330c:	lsr	r7, sl, #1
    3310:	sub	r4, sl, #1
    3314:	mov	r0, r5
    3318:	mov	r1, r7
    331c:	mov	r2, r4
    3320:	bl	a228 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    3324:	sub	r7, r7, #1
    3328:	cmn	r7, #1
    332c:	bne	3314 <test_sort_find+0x9f0>
    3330:	cmp	r4, #0
    3334:	ldr	r4, [sp, #12]
    3338:	beq	2df4 <test_sort_find+0x4d0>
    333c:	mvn	r0, #3
    3340:	ldr	r1, [sp]
    3344:	sub	r7, sl, #2
    3348:	mov	r6, #0
    334c:	add	r2, r0, sl, lsl #2
    3350:	mov	r0, #4
    3354:	sub	r9, r0, sl, lsl #2
    3358:	ldr	r0, [sp, #8]
    335c:	add	r0, r1, r0
    3360:	ldr	r1, [sp, #4]
    3364:	add	r0, r0, sl, lsl #2
    3368:	add	r0, r0, r1
    336c:	add	r8, r4, r0
    3370:	ldr	r0, [r8]
    3374:	ldr	r1, [r5]
    3378:	mov	sl, r2
    337c:	add	r0, r2, r0
    3380:	mov	r2, r7
    3384:	str	r0, [r5]
    3388:	add	r0, r9, r1
    338c:	mov	r1, #0
    3390:	str	r0, [r8], #-4
    3394:	mov	r0, r5
    3398:	bl	a228 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>
    339c:	sub	sl, sl, #4
    33a0:	sub	r7, r7, #1
    33a4:	add	r9, r9, #4
    33a8:	mov	r2, sl
    33ac:	cmn	r7, #1
    33b0:	bne	3370 <test_sort_find+0xa4c>
    33b4:	b	2df4 <test_sort_find+0x4d0>
    33b8:	mov	r6, r0
    33bc:	movw	r0, #0
    33c0:	movt	r0, #0
    33c4:	b	33d4 <test_sort_find+0xab0>
    33c8:	mov	r6, r0
    33cc:	movw	r0, #0
    33d0:	movt	r0, #0
    33d4:	bl	0 <puts>
    33d8:	movw	r0, #0
    33dc:	mov	r1, r6
    33e0:	movt	r0, #0
    33e4:	bl	0 <printf>
    33e8:	b	32c4 <test_sort_find+0x9a0>
    33ec:	ldr	r4, [sp, #12]
    33f0:	b	2df4 <test_sort_find+0x4d0>
    33f4:	movw	r0, #0
    33f8:	movw	r1, #0
    33fc:	movw	r3, #0
    3400:	mov	r2, #235	; 0xeb
    3404:	movt	r0, #0
    3408:	movt	r1, #0
    340c:	movt	r3, #0
    3410:	bl	0 <__assert_fail>
    3414:	movw	r0, #0
    3418:	movw	r1, #0
    341c:	movw	r3, #0
    3420:	movw	r2, #711	; 0x2c7
    3424:	movt	r0, #0
    3428:	movt	r1, #0
    342c:	movt	r3, #0
    3430:	bl	0 <__assert_fail>
    3434:	movw	r0, #0
    3438:	movw	r1, #0
    343c:	movw	r3, #0
    3440:	movw	r2, #1147	; 0x47b
    3444:	movt	r0, #0
    3448:	movt	r1, #0
    344c:	movt	r3, #0
    3450:	bl	0 <__assert_fail>
    3454:	movw	r0, #0
    3458:	movt	r0, #0
    345c:	movw	r1, #0
    3460:	movw	r3, #0
    3464:	movw	r2, #699	; 0x2bb
    3468:	movt	r1, #0
    346c:	movt	r3, #0
    3470:	bl	0 <__assert_fail>
    3474:	movw	r0, #0
    3478:	movw	r1, #0
    347c:	movw	r3, #0
    3480:	movw	r2, #693	; 0x2b5
    3484:	movt	r0, #0
    3488:	movt	r1, #0
    348c:	movt	r3, #0
    3490:	bl	0 <__assert_fail>
    3494:	movw	r0, #0
    3498:	movt	r0, #0
    349c:	b	345c <test_sort_find+0xb38>

000034a0 <MyGame_Example_Monster_vec_find_by_name>:
    34a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    34a4:	add	fp, sp, #24
    34a8:	mvn	r4, #0
    34ac:	cmp	r0, #0
    34b0:	beq	3590 <MyGame_Example_Monster_vec_find_by_name+0xf0>
    34b4:	ldr	r7, [r0, #-4]
    34b8:	mov	r9, r0
    34bc:	cmp	r7, #0
    34c0:	beq	3590 <MyGame_Example_Monster_vec_find_by_name+0xf0>
    34c4:	mov	r8, r1
    34c8:	mov	r4, #0
    34cc:	subs	r5, r7, #1
    34d0:	beq	3548 <MyGame_Example_Monster_vec_find_by_name+0xa8>
    34d4:	sub	r0, r5, r4
    34d8:	add	r6, r4, r0, lsr #1
    34dc:	cmp	r7, r6
    34e0:	bls	35b0 <MyGame_Example_Monster_vec_find_by_name+0x110>
    34e4:	mov	r0, r9
    34e8:	ldr	r1, [r0, r6, lsl #2]!
    34ec:	adds	r0, r0, r1
    34f0:	beq	35d0 <MyGame_Example_Monster_vec_find_by_name+0x130>
    34f4:	ldr	r2, [r0]
    34f8:	mov	r1, r0
    34fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    3500:	cmp	r2, #12
    3504:	bcc	35a4 <MyGame_Example_Monster_vec_find_by_name+0x104>
    3508:	ldrh	r1, [r1, #10]
    350c:	cmp	r1, #0
    3510:	beq	35a4 <MyGame_Example_Monster_vec_find_by_name+0x104>
    3514:	ldr	r1, [r0, r1]!
    3518:	add	r0, r0, r1
    351c:	mov	r1, r8
    3520:	add	r0, r0, #4
    3524:	bl	0 <strcmp>
    3528:	cmp	r0, #0
    352c:	movge	r5, r6
    3530:	addlt	r4, r6, #1
    3534:	cmp	r5, r4
    3538:	bhi	34d4 <MyGame_Example_Monster_vec_find_by_name+0x34>
    353c:	bne	3598 <MyGame_Example_Monster_vec_find_by_name+0xf8>
    3540:	cmp	r7, r4
    3544:	bls	35b0 <MyGame_Example_Monster_vec_find_by_name+0x110>
    3548:	ldr	r0, [r9, r4, lsl #2]!
    354c:	adds	r0, r9, r0
    3550:	beq	35d0 <MyGame_Example_Monster_vec_find_by_name+0x130>
    3554:	ldr	r2, [r0]
    3558:	mov	r1, r0
    355c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    3560:	cmp	r2, #12
    3564:	bcc	35a4 <MyGame_Example_Monster_vec_find_by_name+0x104>
    3568:	ldrh	r1, [r1, #10]
    356c:	cmp	r1, #0
    3570:	beq	35a4 <MyGame_Example_Monster_vec_find_by_name+0x104>
    3574:	ldr	r1, [r0, r1]!
    3578:	add	r0, r0, r1
    357c:	mov	r1, r8
    3580:	add	r0, r0, #4
    3584:	bl	0 <strcmp>
    3588:	cmp	r0, #0
    358c:	mvnne	r4, #0
    3590:	mov	r0, r4
    3594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3598:	mvn	r4, #0
    359c:	mov	r0, r4
    35a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    35a4:	movw	r0, #0
    35a8:	movt	r0, #0
    35ac:	b	35d8 <MyGame_Example_Monster_vec_find_by_name+0x138>
    35b0:	movw	r0, #0
    35b4:	movw	r1, #0
    35b8:	movw	r3, #0
    35bc:	movw	r2, #693	; 0x2b5
    35c0:	movt	r0, #0
    35c4:	movt	r1, #0
    35c8:	movt	r3, #0
    35cc:	bl	0 <__assert_fail>
    35d0:	movw	r0, #0
    35d4:	movt	r0, #0
    35d8:	movw	r1, #0
    35dc:	movw	r3, #0
    35e0:	movw	r2, #699	; 0x2bb
    35e4:	movt	r1, #0
    35e8:	movt	r3, #0
    35ec:	bl	0 <__assert_fail>

000035f0 <test_scan>:
    35f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35f4:	add	fp, sp, #28
    35f8:	sub	sp, sp, #76	; 0x4c
    35fc:	mov	r4, r0
    3600:	mov	r0, #2
    3604:	strb	r0, [fp, #-34]	; 0xffffffde
    3608:	mov	r0, #772	; 0x304
    360c:	strh	r0, [fp, #-36]	; 0xffffffdc
    3610:	movw	r0, #1798	; 0x706
    3614:	movt	r0, #769	; 0x301
    3618:	str	r0, [fp, #-40]	; 0xffffffd8
    361c:	mov	r0, r4
    3620:	bl	0 <flatcc_builder_reset>
    3624:	movw	r1, #0
    3628:	mov	r0, r4
    362c:	mov	r2, #0
    3630:	mov	r3, #0
    3634:	movt	r1, #0
    3638:	bl	0 <flatcc_builder_start_buffer>
    363c:	cmp	r0, #0
    3640:	bne	3650 <test_scan+0x60>
    3644:	mov	r0, r4
    3648:	mov	r1, #36	; 0x24
    364c:	bl	0 <flatcc_builder_start_table>
    3650:	movw	r1, #0
    3654:	mov	r0, r4
    3658:	movt	r1, #0
    365c:	bl	0 <flatcc_builder_create_string_str>
    3660:	cmp	r0, #0
    3664:	beq	3680 <test_scan+0x90>
    3668:	mov	r5, r0
    366c:	mov	r0, r4
    3670:	mov	r1, #3
    3674:	bl	0 <flatcc_builder_table_add_offset>
    3678:	cmp	r0, #0
    367c:	strne	r5, [r0]
    3680:	mvn	r0, #0
    3684:	mov	r1, #1
    3688:	mov	r2, #7
    368c:	mov	r3, #1
    3690:	str	r1, [sp]
    3694:	str	r0, [sp, #4]
    3698:	sub	r1, fp, #40	; 0x28
    369c:	mov	r0, r4
    36a0:	bl	0 <flatcc_builder_create_vector>
    36a4:	cmp	r0, #0
    36a8:	beq	36c4 <test_scan+0xd4>
    36ac:	mov	r5, r0
    36b0:	mov	r0, r4
    36b4:	mov	r1, #5
    36b8:	bl	0 <flatcc_builder_table_add_offset>
    36bc:	cmp	r0, #0
    36c0:	strne	r5, [r0]
    36c4:	mov	r0, r4
    36c8:	bl	0 <flatcc_builder_start_offset_vector>
    36cc:	mov	r0, r4
    36d0:	bl	0 <flatcc_builder_end_offset_vector>
    36d4:	cmp	r0, #0
    36d8:	beq	36f4 <test_scan+0x104>
    36dc:	mov	r5, r0
    36e0:	mov	r0, r4
    36e4:	mov	r1, #10
    36e8:	bl	0 <flatcc_builder_table_add_offset>
    36ec:	cmp	r0, #0
    36f0:	strne	r5, [r0]
    36f4:	mov	r0, r4
    36f8:	bl	0 <flatcc_builder_start_offset_vector>
    36fc:	mov	r0, r4
    3700:	mov	r1, #36	; 0x24
    3704:	bl	0 <flatcc_builder_start_table>
    3708:	movw	r1, #0
    370c:	mov	r0, r4
    3710:	movt	r1, #0
    3714:	bl	0 <flatcc_builder_create_string_str>
    3718:	cmp	r0, #0
    371c:	beq	3738 <test_scan+0x148>
    3720:	mov	r5, r0
    3724:	mov	r0, r4
    3728:	mov	r1, #3
    372c:	bl	0 <flatcc_builder_table_add_offset>
    3730:	cmp	r0, #0
    3734:	strne	r5, [r0]
    3738:	movw	r1, #0
    373c:	mov	r0, r4
    3740:	mov	r2, #1
    3744:	movt	r1, #0
    3748:	bl	0 <flatcc_builder_check_required>
    374c:	cmp	r0, #0
    3750:	beq	4640 <test_scan+0x1050>
    3754:	mov	r0, r4
    3758:	bl	0 <flatcc_builder_end_table>
    375c:	cmp	r0, #0
    3760:	beq	3770 <test_scan+0x180>
    3764:	mov	r1, r0
    3768:	mov	r0, r4
    376c:	bl	0 <flatcc_builder_offset_vector_push>
    3770:	mov	r0, r4
    3774:	mov	r1, #36	; 0x24
    3778:	bl	0 <flatcc_builder_start_table>
    377c:	movw	r1, #0
    3780:	mov	r0, r4
    3784:	movt	r1, #0
    3788:	bl	0 <flatcc_builder_create_string_str>
    378c:	cmp	r0, #0
    3790:	beq	37ac <test_scan+0x1bc>
    3794:	mov	r5, r0
    3798:	mov	r0, r4
    379c:	mov	r1, #3
    37a0:	bl	0 <flatcc_builder_table_add_offset>
    37a4:	cmp	r0, #0
    37a8:	strne	r5, [r0]
    37ac:	movw	r1, #0
    37b0:	mov	r0, r4
    37b4:	mov	r2, #1
    37b8:	movt	r1, #0
    37bc:	bl	0 <flatcc_builder_check_required>
    37c0:	cmp	r0, #0
    37c4:	beq	4640 <test_scan+0x1050>
    37c8:	mov	r0, r4
    37cc:	bl	0 <flatcc_builder_end_table>
    37d0:	cmp	r0, #0
    37d4:	beq	37e4 <test_scan+0x1f4>
    37d8:	mov	r1, r0
    37dc:	mov	r0, r4
    37e0:	bl	0 <flatcc_builder_offset_vector_push>
    37e4:	mov	r0, r4
    37e8:	mov	r1, #36	; 0x24
    37ec:	bl	0 <flatcc_builder_start_table>
    37f0:	movw	r1, #0
    37f4:	mov	r0, r4
    37f8:	movt	r1, #0
    37fc:	bl	0 <flatcc_builder_create_string_str>
    3800:	cmp	r0, #0
    3804:	beq	3820 <test_scan+0x230>
    3808:	mov	r5, r0
    380c:	mov	r0, r4
    3810:	mov	r1, #3
    3814:	bl	0 <flatcc_builder_table_add_offset>
    3818:	cmp	r0, #0
    381c:	strne	r5, [r0]
    3820:	movw	r1, #0
    3824:	mov	r0, r4
    3828:	mov	r2, #1
    382c:	movt	r1, #0
    3830:	bl	0 <flatcc_builder_check_required>
    3834:	cmp	r0, #0
    3838:	beq	4640 <test_scan+0x1050>
    383c:	mov	r0, r4
    3840:	bl	0 <flatcc_builder_end_table>
    3844:	cmp	r0, #0
    3848:	beq	3858 <test_scan+0x268>
    384c:	mov	r1, r0
    3850:	mov	r0, r4
    3854:	bl	0 <flatcc_builder_offset_vector_push>
    3858:	mov	r0, r4
    385c:	mov	r1, #36	; 0x24
    3860:	bl	0 <flatcc_builder_start_table>
    3864:	movw	r1, #0
    3868:	mov	r0, r4
    386c:	movt	r1, #0
    3870:	bl	0 <flatcc_builder_create_string_str>
    3874:	cmp	r0, #0
    3878:	beq	3894 <test_scan+0x2a4>
    387c:	mov	r5, r0
    3880:	mov	r0, r4
    3884:	mov	r1, #3
    3888:	bl	0 <flatcc_builder_table_add_offset>
    388c:	cmp	r0, #0
    3890:	strne	r5, [r0]
    3894:	movw	r1, #0
    3898:	mov	r0, r4
    389c:	mov	r2, #1
    38a0:	movt	r1, #0
    38a4:	bl	0 <flatcc_builder_check_required>
    38a8:	cmp	r0, #0
    38ac:	beq	4640 <test_scan+0x1050>
    38b0:	mov	r0, r4
    38b4:	bl	0 <flatcc_builder_end_table>
    38b8:	cmp	r0, #0
    38bc:	beq	38cc <test_scan+0x2dc>
    38c0:	mov	r1, r0
    38c4:	mov	r0, r4
    38c8:	bl	0 <flatcc_builder_offset_vector_push>
    38cc:	mov	r0, r4
    38d0:	mov	r1, #36	; 0x24
    38d4:	bl	0 <flatcc_builder_start_table>
    38d8:	movw	r1, #0
    38dc:	mov	r0, r4
    38e0:	movt	r1, #0
    38e4:	bl	0 <flatcc_builder_create_string_str>
    38e8:	cmp	r0, #0
    38ec:	beq	3908 <test_scan+0x318>
    38f0:	mov	r5, r0
    38f4:	mov	r0, r4
    38f8:	mov	r1, #3
    38fc:	bl	0 <flatcc_builder_table_add_offset>
    3900:	cmp	r0, #0
    3904:	strne	r5, [r0]
    3908:	movw	r1, #0
    390c:	mov	r0, r4
    3910:	mov	r2, #1
    3914:	movt	r1, #0
    3918:	bl	0 <flatcc_builder_check_required>
    391c:	cmp	r0, #0
    3920:	beq	4640 <test_scan+0x1050>
    3924:	mov	r0, r4
    3928:	bl	0 <flatcc_builder_end_table>
    392c:	cmp	r0, #0
    3930:	beq	3940 <test_scan+0x350>
    3934:	mov	r1, r0
    3938:	mov	r0, r4
    393c:	bl	0 <flatcc_builder_offset_vector_push>
    3940:	mov	r0, r4
    3944:	bl	0 <flatcc_builder_end_offset_vector>
    3948:	cmp	r0, #0
    394c:	beq	3968 <test_scan+0x378>
    3950:	mov	r5, r0
    3954:	mov	r0, r4
    3958:	mov	r1, #11
    395c:	bl	0 <flatcc_builder_table_add_offset>
    3960:	cmp	r0, #0
    3964:	strne	r5, [r0]
    3968:	movw	r1, #0
    396c:	mov	r0, r4
    3970:	mov	r2, #1
    3974:	movt	r1, #0
    3978:	bl	0 <flatcc_builder_check_required>
    397c:	cmp	r0, #0
    3980:	beq	4640 <test_scan+0x1050>
    3984:	mov	r0, r4
    3988:	bl	0 <flatcc_builder_end_table>
    398c:	mov	r1, r0
    3990:	mov	r0, r4
    3994:	bl	0 <flatcc_builder_end_buffer>
    3998:	sub	r1, fp, #32
    399c:	mov	r0, r4
    39a0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    39a4:	cmp	r0, #0
    39a8:	beq	4660 <test_scan+0x1070>
    39ac:	ldr	r2, [r0, #4]
    39b0:	movw	r1, #20301	; 0x4f4d
    39b4:	movt	r1, #21326	; 0x534e
    39b8:	cmp	r2, r1
    39bc:	bne	4660 <test_scan+0x1070>
    39c0:	ldr	r1, [r0]
    39c4:	mov	r3, r0
    39c8:	ldr	r2, [r3, r1]!
    39cc:	str	r1, [fp, #-48]	; 0xffffffd0
    39d0:	mov	r1, r3
    39d4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    39d8:	cmp	r2, #27
    39dc:	bls	4680 <test_scan+0x1090>
    39e0:	ldrh	r7, [r1, #26]
    39e4:	cmp	r7, #0
    39e8:	beq	4680 <test_scan+0x1090>
    39ec:	ldrh	r6, [r1, #14]
    39f0:	cmp	r6, #0
    39f4:	mov	r2, r6
    39f8:	str	r6, [sp, #48]	; 0x30
    39fc:	beq	46a0 <test_scan+0x10b0>
    3a00:	ldrh	r1, [r1, #24]
    3a04:	str	r0, [fp, #-44]	; 0xffffffd4
    3a08:	cmp	r1, #0
    3a0c:	mov	r0, r1
    3a10:	str	r1, [sp, #52]	; 0x34
    3a14:	beq	46c0 <test_scan+0x10d0>
    3a18:	mov	r2, r3
    3a1c:	ldr	r1, [r2, r7]!
    3a20:	add	r2, r2, r1
    3a24:	add	r8, r2, #4
    3a28:	ldr	sl, [r8, #-4]!
    3a2c:	cmp	sl, #0
    3a30:	beq	3bb0 <test_scan+0x5c0>
    3a34:	ldr	r0, [sp, #48]	; 0x30
    3a38:	mov	r2, r3
    3a3c:	movw	r5, #0
    3a40:	mov	r6, #0
    3a44:	movt	r5, #0
    3a48:	ldr	r0, [r2, r0]!
    3a4c:	str	r0, [sp, #28]
    3a50:	ldr	r0, [sp, #52]	; 0x34
    3a54:	str	r2, [sp, #24]
    3a58:	ldr	r0, [r3, r0]!
    3a5c:	str	r0, [sp, #36]	; 0x24
    3a60:	add	r0, r3, r0
    3a64:	add	r0, r0, #4
    3a68:	str	r0, [sp, #32]
    3a6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    3a70:	add	r9, r1, r0
    3a74:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3a78:	add	r1, r9, r7
    3a7c:	str	r1, [sp, #40]	; 0x28
    3a80:	add	r0, r0, r1
    3a84:	add	r4, r0, #8
    3a88:	str	r0, [sp, #44]	; 0x2c
    3a8c:	cmp	sl, r6
    3a90:	bls	5948 <test_scan+0x2358>
    3a94:	ldr	r0, [r4, #-4]
    3a98:	add	r1, r4, r0
    3a9c:	cmp	r1, #4
    3aa0:	beq	50e0 <test_scan+0x1af0>
    3aa4:	ldr	r1, [r1, #-4]
    3aa8:	sub	r1, r0, r1
    3aac:	add	r1, r4, r1
    3ab0:	ldrh	r2, [r1, #-4]
    3ab4:	cmp	r2, #12
    3ab8:	bcc	50d4 <test_scan+0x1ae4>
    3abc:	ldrh	r1, [r1, #6]
    3ac0:	cmp	r1, #0
    3ac4:	beq	50d4 <test_scan+0x1ae4>
    3ac8:	add	r2, r0, r1
    3acc:	add	r2, r4, r2
    3ad0:	ldr	r2, [r2, #-4]
    3ad4:	add	r0, r2, r0
    3ad8:	add	r0, r0, r1
    3adc:	mov	r1, r5
    3ae0:	add	r0, r4, r0
    3ae4:	bl	0 <strcmp>
    3ae8:	cmp	r0, #0
    3aec:	beq	3b04 <test_scan+0x514>
    3af0:	add	r6, r6, #1
    3af4:	add	r4, r4, #4
    3af8:	cmp	r6, sl
    3afc:	bcc	3a8c <test_scan+0x49c>
    3b00:	b	3bb0 <test_scan+0x5c0>
    3b04:	cmp	r6, #1
    3b08:	bne	3bb0 <test_scan+0x5c0>
    3b0c:	add	r0, r9, sl, lsl #2
    3b10:	movw	r5, #0
    3b14:	sub	r4, sl, #1
    3b18:	add	r9, r0, r7
    3b1c:	ldr	r7, [fp, #-44]	; 0xffffffd4
    3b20:	movt	r5, #0
    3b24:	add	r6, r7, r9
    3b28:	cmn	r4, #1
    3b2c:	beq	3ba0 <test_scan+0x5b0>
    3b30:	cmp	sl, r4
    3b34:	bls	5948 <test_scan+0x2358>
    3b38:	ldr	r0, [r6]
    3b3c:	adds	r1, r6, r0
    3b40:	beq	50e0 <test_scan+0x1af0>
    3b44:	ldr	r1, [r6, r0]
    3b48:	sub	r1, r0, r1
    3b4c:	add	r1, r6, r1
    3b50:	ldrh	r2, [r1]
    3b54:	cmp	r2, #12
    3b58:	bcc	50d4 <test_scan+0x1ae4>
    3b5c:	ldrh	r1, [r1, #10]
    3b60:	cmp	r1, #0
    3b64:	beq	50d4 <test_scan+0x1ae4>
    3b68:	add	r2, r0, r1
    3b6c:	ldr	r2, [r6, r2]
    3b70:	add	r0, r2, r0
    3b74:	add	r0, r0, r1
    3b78:	mov	r1, r5
    3b7c:	add	r0, r6, r0
    3b80:	add	r0, r0, #4
    3b84:	bl	0 <strcmp>
    3b88:	sub	r6, r6, #4
    3b8c:	sub	r4, r4, #1
    3b90:	cmp	r0, #0
    3b94:	bne	3b28 <test_scan+0x538>
    3b98:	cmp	r4, #0
    3b9c:	beq	3bd8 <test_scan+0x5e8>
    3ba0:	movw	r0, #0
    3ba4:	movt	r0, #0
    3ba8:	bl	0 <puts>
    3bac:	b	3bc0 <test_scan+0x5d0>
    3bb0:	movw	r0, #0
    3bb4:	movt	r0, #0
    3bb8:	bl	0 <puts>
    3bbc:	ldr	r7, [fp, #-44]	; 0xffffffd4
    3bc0:	mvn	r5, #0
    3bc4:	mov	r0, r7
    3bc8:	bl	0 <flatcc_builder_aligned_free>
    3bcc:	mov	r0, r5
    3bd0:	sub	sp, fp, #28
    3bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bd8:	ldr	r0, [sp, #44]	; 0x2c
    3bdc:	movw	r5, #0
    3be0:	str	r9, [sp, #20]
    3be4:	mov	r7, #0
    3be8:	movt	r5, #0
    3bec:	add	r9, r0, #8
    3bf0:	cmp	sl, r7
    3bf4:	bls	5948 <test_scan+0x2358>
    3bf8:	ldr	r0, [r9, #-4]
    3bfc:	add	r1, r9, r0
    3c00:	cmp	r1, #4
    3c04:	beq	50e0 <test_scan+0x1af0>
    3c08:	ldr	r1, [r1, #-4]
    3c0c:	sub	r1, r0, r1
    3c10:	add	r1, r9, r1
    3c14:	ldrh	r2, [r1, #-4]
    3c18:	cmp	r2, #12
    3c1c:	bcc	50d4 <test_scan+0x1ae4>
    3c20:	ldrh	r1, [r1, #6]
    3c24:	cmp	r1, #0
    3c28:	beq	50d4 <test_scan+0x1ae4>
    3c2c:	add	r2, r0, r1
    3c30:	add	r2, r9, r2
    3c34:	ldr	r2, [r2, #-4]
    3c38:	add	r0, r2, r0
    3c3c:	add	r0, r0, r1
    3c40:	mov	r1, r5
    3c44:	add	r0, r9, r0
    3c48:	ldr	r4, [r0, #-4]
    3c4c:	cmp	r4, #5
    3c50:	mov	r2, r4
    3c54:	movcs	r2, #5
    3c58:	bl	0 <strncmp>
    3c5c:	cmp	r0, #0
    3c60:	mov	r1, r0
    3c64:	mov	r2, #0
    3c68:	mvneq	r1, #0
    3c6c:	cmp	r4, #5
    3c70:	movwhi	r2, #1
    3c74:	cmp	r0, #0
    3c78:	movne	r2, r1
    3c7c:	cmp	r4, #5
    3c80:	movcc	r2, r1
    3c84:	cmp	r2, #0
    3c88:	beq	3ca0 <test_scan+0x6b0>
    3c8c:	add	r7, r7, #1
    3c90:	add	r9, r9, #4
    3c94:	cmp	r7, sl
    3c98:	bcc	3bf0 <test_scan+0x600>
    3c9c:	b	3d70 <test_scan+0x780>
    3ca0:	cmp	r7, #1
    3ca4:	bne	3d70 <test_scan+0x780>
    3ca8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3cac:	ldr	r1, [sp, #20]
    3cb0:	movw	r9, #0
    3cb4:	sub	r7, sl, #1
    3cb8:	movt	r9, #0
    3cbc:	add	r5, r0, r1
    3cc0:	cmn	r7, #1
    3cc4:	beq	3d70 <test_scan+0x780>
    3cc8:	cmp	sl, r7
    3ccc:	bls	5948 <test_scan+0x2358>
    3cd0:	ldr	r0, [r5]
    3cd4:	adds	r1, r5, r0
    3cd8:	beq	50e0 <test_scan+0x1af0>
    3cdc:	ldr	r1, [r5, r0]
    3ce0:	sub	r1, r0, r1
    3ce4:	add	r1, r5, r1
    3ce8:	ldrh	r2, [r1]
    3cec:	cmp	r2, #12
    3cf0:	bcc	50d4 <test_scan+0x1ae4>
    3cf4:	ldrh	r1, [r1, #10]
    3cf8:	cmp	r1, #0
    3cfc:	beq	50d4 <test_scan+0x1ae4>
    3d00:	add	r2, r0, r1
    3d04:	ldr	r2, [r5, r2]
    3d08:	add	r0, r2, r0
    3d0c:	add	r0, r0, r1
    3d10:	mov	r1, r5
    3d14:	ldr	r4, [r1, r0]!
    3d18:	cmp	r4, #5
    3d1c:	mov	r2, r4
    3d20:	add	r0, r1, #4
    3d24:	mov	r1, r9
    3d28:	movcs	r2, #5
    3d2c:	bl	0 <strncmp>
    3d30:	cmp	r0, #0
    3d34:	mov	r1, r0
    3d38:	mov	r2, #0
    3d3c:	sub	r5, r5, #4
    3d40:	sub	r7, r7, #1
    3d44:	mvneq	r1, #0
    3d48:	cmp	r4, #5
    3d4c:	movwhi	r2, #1
    3d50:	cmp	r0, #0
    3d54:	movne	r2, r1
    3d58:	cmp	r4, #5
    3d5c:	movcc	r2, r1
    3d60:	cmp	r2, #0
    3d64:	bne	3cc0 <test_scan+0x6d0>
    3d68:	cmp	r7, #0
    3d6c:	beq	3d7c <test_scan+0x78c>
    3d70:	movw	r0, #0
    3d74:	movt	r0, #0
    3d78:	b	3bb8 <test_scan+0x5c8>
    3d7c:	ldr	r7, [fp, #-44]	; 0xffffffd4
    3d80:	cmp	sl, #3
    3d84:	bcc	3e0c <test_scan+0x81c>
    3d88:	ldr	r0, [sp, #44]	; 0x2c
    3d8c:	movw	r5, #0
    3d90:	mov	r6, #2
    3d94:	movt	r5, #0
    3d98:	add	r4, r0, #12
    3d9c:	cmp	sl, r6
    3da0:	bls	5948 <test_scan+0x2358>
    3da4:	ldr	r0, [r4]
    3da8:	adds	r1, r4, r0
    3dac:	beq	50e0 <test_scan+0x1af0>
    3db0:	ldr	r1, [r4, r0]
    3db4:	sub	r1, r0, r1
    3db8:	add	r1, r4, r1
    3dbc:	ldrh	r2, [r1]
    3dc0:	cmp	r2, #12
    3dc4:	bcc	50d4 <test_scan+0x1ae4>
    3dc8:	ldrh	r1, [r1, #10]
    3dcc:	cmp	r1, #0
    3dd0:	beq	50d4 <test_scan+0x1ae4>
    3dd4:	add	r2, r0, r1
    3dd8:	ldr	r2, [r4, r2]
    3ddc:	add	r0, r2, r0
    3de0:	add	r0, r0, r1
    3de4:	mov	r1, r5
    3de8:	add	r0, r4, r0
    3dec:	add	r0, r0, #4
    3df0:	bl	0 <strcmp>
    3df4:	cmp	r0, #0
    3df8:	beq	3f2c <test_scan+0x93c>
    3dfc:	add	r6, r6, #1
    3e00:	add	r4, r4, #4
    3e04:	cmp	r6, sl
    3e08:	bcc	3d9c <test_scan+0x7ac>
    3e0c:	ldr	r0, [sp, #44]	; 0x2c
    3e10:	movw	r5, #0
    3e14:	mov	r6, #0
    3e18:	movt	r5, #0
    3e1c:	add	r4, r0, #8
    3e20:	cmp	sl, r6
    3e24:	bls	5948 <test_scan+0x2358>
    3e28:	ldr	r0, [r4, #-4]
    3e2c:	add	r1, r4, r0
    3e30:	cmp	r1, #4
    3e34:	beq	50e0 <test_scan+0x1af0>
    3e38:	ldr	r1, [r1, #-4]
    3e3c:	sub	r1, r0, r1
    3e40:	add	r1, r4, r1
    3e44:	ldrh	r2, [r1, #-4]
    3e48:	cmp	r2, #12
    3e4c:	bcc	50d4 <test_scan+0x1ae4>
    3e50:	ldrh	r1, [r1, #6]
    3e54:	cmp	r1, #0
    3e58:	beq	50d4 <test_scan+0x1ae4>
    3e5c:	add	r2, r0, r1
    3e60:	add	r2, r4, r2
    3e64:	ldr	r2, [r2, #-4]
    3e68:	add	r0, r2, r0
    3e6c:	add	r0, r0, r1
    3e70:	mov	r1, r5
    3e74:	add	r0, r4, r0
    3e78:	bl	0 <strcmp>
    3e7c:	cmp	r0, #0
    3e80:	beq	3f20 <test_scan+0x930>
    3e84:	add	r6, r6, #1
    3e88:	add	r4, r4, #4
    3e8c:	cmp	r6, sl
    3e90:	bcc	3e20 <test_scan+0x830>
    3e94:	ldr	r0, [sp, #44]	; 0x2c
    3e98:	movw	r5, #0
    3e9c:	mov	r4, #0
    3ea0:	movt	r5, #0
    3ea4:	add	r6, r0, #8
    3ea8:	cmp	sl, r4
    3eac:	bls	5948 <test_scan+0x2358>
    3eb0:	ldr	r0, [r6, #-4]
    3eb4:	add	r1, r6, r0
    3eb8:	cmp	r1, #4
    3ebc:	beq	50e0 <test_scan+0x1af0>
    3ec0:	ldr	r1, [r1, #-4]
    3ec4:	sub	r1, r0, r1
    3ec8:	add	r1, r6, r1
    3ecc:	ldrh	r2, [r1, #-4]
    3ed0:	cmp	r2, #12
    3ed4:	bcc	50d4 <test_scan+0x1ae4>
    3ed8:	ldrh	r1, [r1, #6]
    3edc:	cmp	r1, #0
    3ee0:	beq	50d4 <test_scan+0x1ae4>
    3ee4:	add	r2, r0, r1
    3ee8:	add	r2, r6, r2
    3eec:	ldr	r2, [r2, #-4]
    3ef0:	add	r0, r2, r0
    3ef4:	add	r0, r0, r1
    3ef8:	mov	r1, r5
    3efc:	add	r0, r6, r0
    3f00:	bl	0 <strcmp>
    3f04:	cmp	r0, #0
    3f08:	beq	3f38 <test_scan+0x948>
    3f0c:	add	r4, r4, #1
    3f10:	add	r6, r6, #4
    3f14:	cmp	r4, sl
    3f18:	bcc	3ea8 <test_scan+0x8b8>
    3f1c:	b	3f40 <test_scan+0x950>
    3f20:	movw	r0, #0
    3f24:	movt	r0, #0
    3f28:	b	3ba8 <test_scan+0x5b8>
    3f2c:	movw	r0, #0
    3f30:	movt	r0, #0
    3f34:	b	3ba8 <test_scan+0x5b8>
    3f38:	cmp	r4, #0
    3f3c:	beq	3f4c <test_scan+0x95c>
    3f40:	movw	r0, #0
    3f44:	movt	r0, #0
    3f48:	b	3ba8 <test_scan+0x5b8>
    3f4c:	ldr	r0, [sp, #44]	; 0x2c
    3f50:	movw	r5, #0
    3f54:	mov	r4, #0
    3f58:	movt	r5, #0
    3f5c:	add	r6, r0, #8
    3f60:	cmp	sl, r4
    3f64:	bls	5948 <test_scan+0x2358>
    3f68:	ldr	r0, [r6, #-4]
    3f6c:	add	r1, r6, r0
    3f70:	cmp	r1, #4
    3f74:	beq	50e0 <test_scan+0x1af0>
    3f78:	ldr	r1, [r1, #-4]
    3f7c:	sub	r1, r0, r1
    3f80:	add	r1, r6, r1
    3f84:	ldrh	r2, [r1, #-4]
    3f88:	cmp	r2, #12
    3f8c:	bcc	50d4 <test_scan+0x1ae4>
    3f90:	ldrh	r1, [r1, #6]
    3f94:	cmp	r1, #0
    3f98:	beq	50d4 <test_scan+0x1ae4>
    3f9c:	add	r2, r0, r1
    3fa0:	add	r2, r6, r2
    3fa4:	ldr	r2, [r2, #-4]
    3fa8:	add	r0, r2, r0
    3fac:	add	r0, r0, r1
    3fb0:	mov	r1, r5
    3fb4:	add	r0, r6, r0
    3fb8:	bl	0 <strcmp>
    3fbc:	cmp	r0, #0
    3fc0:	beq	3fd8 <test_scan+0x9e8>
    3fc4:	add	r4, r4, #1
    3fc8:	add	r6, r6, #4
    3fcc:	cmp	r4, sl
    3fd0:	bcc	3f60 <test_scan+0x970>
    3fd4:	b	42b4 <test_scan+0xcc4>
    3fd8:	cmp	r4, #2
    3fdc:	bne	42b4 <test_scan+0xcc4>
    3fe0:	ldr	r0, [sp, #20]
    3fe4:	movw	r5, #0
    3fe8:	sub	r4, sl, #1
    3fec:	movt	r5, #0
    3ff0:	add	r6, r7, r0
    3ff4:	cmn	r4, #1
    3ff8:	beq	42c0 <test_scan+0xcd0>
    3ffc:	cmp	sl, r4
    4000:	bls	5948 <test_scan+0x2358>
    4004:	ldr	r0, [r6]
    4008:	adds	r1, r6, r0
    400c:	beq	50e0 <test_scan+0x1af0>
    4010:	ldr	r1, [r6, r0]
    4014:	sub	r1, r0, r1
    4018:	add	r1, r6, r1
    401c:	ldrh	r2, [r1]
    4020:	cmp	r2, #12
    4024:	bcc	50d4 <test_scan+0x1ae4>
    4028:	ldrh	r1, [r1, #10]
    402c:	cmp	r1, #0
    4030:	beq	50d4 <test_scan+0x1ae4>
    4034:	add	r2, r0, r1
    4038:	ldr	r2, [r6, r2]
    403c:	add	r0, r2, r0
    4040:	add	r0, r0, r1
    4044:	mov	r1, r5
    4048:	add	r0, r6, r0
    404c:	add	r0, r0, #4
    4050:	bl	0 <strcmp>
    4054:	sub	r6, r6, #4
    4058:	sub	r4, r4, #1
    405c:	cmp	r0, #0
    4060:	bne	3ff4 <test_scan+0xa04>
    4064:	cmp	r4, #3
    4068:	bne	42c0 <test_scan+0xcd0>
    406c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4070:	ldr	r1, [sp, #20]
    4074:	movw	r9, #0
    4078:	sub	r7, sl, #1
    407c:	movt	r9, #0
    4080:	add	r5, r0, r1
    4084:	cmn	r7, #1
    4088:	beq	42cc <test_scan+0xcdc>
    408c:	cmp	sl, r7
    4090:	bls	5948 <test_scan+0x2358>
    4094:	ldr	r0, [r5]
    4098:	adds	r1, r5, r0
    409c:	beq	50e0 <test_scan+0x1af0>
    40a0:	ldr	r1, [r5, r0]
    40a4:	sub	r1, r0, r1
    40a8:	add	r1, r5, r1
    40ac:	ldrh	r2, [r1]
    40b0:	cmp	r2, #12
    40b4:	bcc	50d4 <test_scan+0x1ae4>
    40b8:	ldrh	r1, [r1, #10]
    40bc:	cmp	r1, #0
    40c0:	beq	50d4 <test_scan+0x1ae4>
    40c4:	add	r2, r0, r1
    40c8:	ldr	r2, [r5, r2]
    40cc:	add	r0, r2, r0
    40d0:	add	r0, r0, r1
    40d4:	mov	r1, r5
    40d8:	ldr	r4, [r1, r0]!
    40dc:	cmp	r4, #8
    40e0:	mov	r2, r4
    40e4:	add	r0, r1, #4
    40e8:	mov	r1, r9
    40ec:	movcs	r2, #8
    40f0:	bl	0 <strncmp>
    40f4:	cmp	r0, #0
    40f8:	mov	r1, r0
    40fc:	mov	r2, #0
    4100:	sub	r5, r5, #4
    4104:	sub	r7, r7, #1
    4108:	mvneq	r1, #0
    410c:	cmp	r4, #8
    4110:	movwhi	r2, #1
    4114:	cmp	r0, #0
    4118:	movne	r2, r1
    411c:	cmp	r4, #8
    4120:	movcc	r2, r1
    4124:	cmp	r2, #0
    4128:	bne	4084 <test_scan+0xa94>
    412c:	cmp	r7, #3
    4130:	bne	42cc <test_scan+0xcdc>
    4134:	ldr	r1, [sp, #40]	; 0x28
    4138:	mvn	r0, sl
    413c:	movw	r9, #0
    4140:	mov	r5, sl
    4144:	cmn	r0, #4
    4148:	str	r0, [sp, #16]
    414c:	movt	r9, #0
    4150:	mvnls	r0, #3
    4154:	cmp	sl, #3
    4158:	movcs	r5, #3
    415c:	sub	r1, r1, #4
    4160:	str	r5, [sp, #40]	; 0x28
    4164:	str	r1, [sp, #12]
    4168:	sub	r0, r1, r0, lsl #2
    416c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    4170:	add	r7, r1, r0
    4174:	cmp	r5, #2
    4178:	bcc	42cc <test_scan+0xcdc>
    417c:	sub	r5, r5, #1
    4180:	cmp	sl, r5
    4184:	bls	5948 <test_scan+0x2358>
    4188:	ldr	r0, [r7]
    418c:	adds	r1, r7, r0
    4190:	beq	50e0 <test_scan+0x1af0>
    4194:	ldr	r1, [r7, r0]
    4198:	sub	r1, r0, r1
    419c:	add	r1, r7, r1
    41a0:	ldrh	r2, [r1]
    41a4:	cmp	r2, #12
    41a8:	bcc	50d4 <test_scan+0x1ae4>
    41ac:	ldrh	r1, [r1, #10]
    41b0:	cmp	r1, #0
    41b4:	beq	50d4 <test_scan+0x1ae4>
    41b8:	add	r2, r0, r1
    41bc:	ldr	r2, [r7, r2]
    41c0:	add	r0, r2, r0
    41c4:	add	r0, r0, r1
    41c8:	mov	r1, r7
    41cc:	ldr	r4, [r1, r0]!
    41d0:	cmp	r4, #8
    41d4:	mov	r2, r4
    41d8:	add	r0, r1, #4
    41dc:	mov	r1, r9
    41e0:	movcs	r2, #8
    41e4:	bl	0 <strncmp>
    41e8:	cmp	r0, #0
    41ec:	mov	r1, r0
    41f0:	mov	r2, #0
    41f4:	sub	r7, r7, #4
    41f8:	mvneq	r1, #0
    41fc:	cmp	r4, #8
    4200:	movwhi	r2, #1
    4204:	cmp	r0, #0
    4208:	movne	r2, r1
    420c:	cmp	r4, #8
    4210:	movcc	r2, r1
    4214:	cmp	r2, #0
    4218:	bne	4174 <test_scan+0xb84>
    421c:	cmp	r5, #2
    4220:	bne	42cc <test_scan+0xcdc>
    4224:	cmp	sl, #3
    4228:	bcc	4438 <test_scan+0xe48>
    422c:	ldr	r0, [sp, #44]	; 0x2c
    4230:	movw	r5, #0
    4234:	mov	r4, #2
    4238:	movt	r5, #0
    423c:	add	r6, r0, #12
    4240:	cmp	sl, r4
    4244:	bls	5948 <test_scan+0x2358>
    4248:	ldr	r0, [r6]
    424c:	adds	r1, r6, r0
    4250:	beq	50e0 <test_scan+0x1af0>
    4254:	ldr	r1, [r6, r0]
    4258:	sub	r1, r0, r1
    425c:	add	r1, r6, r1
    4260:	ldrh	r2, [r1]
    4264:	cmp	r2, #12
    4268:	bcc	50d4 <test_scan+0x1ae4>
    426c:	ldrh	r1, [r1, #10]
    4270:	cmp	r1, #0
    4274:	beq	50d4 <test_scan+0x1ae4>
    4278:	add	r2, r0, r1
    427c:	ldr	r2, [r6, r2]
    4280:	add	r0, r2, r0
    4284:	add	r0, r0, r1
    4288:	mov	r1, r5
    428c:	add	r0, r6, r0
    4290:	add	r0, r0, #4
    4294:	bl	0 <strcmp>
    4298:	cmp	r0, #0
    429c:	beq	42d8 <test_scan+0xce8>
    42a0:	add	r4, r4, #1
    42a4:	add	r6, r6, #4
    42a8:	cmp	r4, sl
    42ac:	bcc	4240 <test_scan+0xc50>
    42b0:	b	4438 <test_scan+0xe48>
    42b4:	movw	r0, #0
    42b8:	movt	r0, #0
    42bc:	b	3ba8 <test_scan+0x5b8>
    42c0:	movw	r0, #0
    42c4:	movt	r0, #0
    42c8:	b	3bb8 <test_scan+0x5c8>
    42cc:	movw	r0, #0
    42d0:	movt	r0, #0
    42d4:	b	3bb8 <test_scan+0x5c8>
    42d8:	cmp	r4, #2
    42dc:	bne	4438 <test_scan+0xe48>
    42e0:	ldr	r0, [sp, #44]	; 0x2c
    42e4:	movw	r9, #0
    42e8:	mov	r7, #2
    42ec:	movt	r9, #0
    42f0:	add	r5, r0, #12
    42f4:	cmp	sl, r7
    42f8:	bls	5948 <test_scan+0x2358>
    42fc:	ldr	r0, [r5]
    4300:	adds	r1, r5, r0
    4304:	beq	50e0 <test_scan+0x1af0>
    4308:	ldr	r1, [r5, r0]
    430c:	sub	r1, r0, r1
    4310:	add	r1, r5, r1
    4314:	ldrh	r2, [r1]
    4318:	cmp	r2, #12
    431c:	bcc	50d4 <test_scan+0x1ae4>
    4320:	ldrh	r1, [r1, #10]
    4324:	cmp	r1, #0
    4328:	beq	50d4 <test_scan+0x1ae4>
    432c:	add	r2, r0, r1
    4330:	ldr	r2, [r5, r2]
    4334:	add	r0, r2, r0
    4338:	add	r0, r0, r1
    433c:	mov	r1, r5
    4340:	ldr	r4, [r1, r0]!
    4344:	cmp	r4, #8
    4348:	mov	r2, r4
    434c:	add	r0, r1, #4
    4350:	mov	r1, r9
    4354:	movcs	r2, #8
    4358:	bl	0 <strncmp>
    435c:	cmp	r0, #0
    4360:	mov	r1, r0
    4364:	mov	r2, #0
    4368:	mvneq	r1, #0
    436c:	cmp	r4, #8
    4370:	movwhi	r2, #1
    4374:	cmp	r0, #0
    4378:	movne	r2, r1
    437c:	cmp	r4, #8
    4380:	movcc	r2, r1
    4384:	cmp	r2, #0
    4388:	beq	43a0 <test_scan+0xdb0>
    438c:	add	r7, r7, #1
    4390:	add	r5, r5, #4
    4394:	cmp	r7, sl
    4398:	bcc	42f4 <test_scan+0xd04>
    439c:	b	4438 <test_scan+0xe48>
    43a0:	cmp	r7, #2
    43a4:	bne	4438 <test_scan+0xe48>
    43a8:	cmp	sl, #4
    43ac:	bcc	4634 <test_scan+0x1044>
    43b0:	ldr	r0, [sp, #44]	; 0x2c
    43b4:	movw	r5, #0
    43b8:	mov	r4, #3
    43bc:	movt	r5, #0
    43c0:	add	r6, r0, #16
    43c4:	cmp	sl, r4
    43c8:	bls	5948 <test_scan+0x2358>
    43cc:	ldr	r0, [r6]
    43d0:	adds	r1, r6, r0
    43d4:	beq	50e0 <test_scan+0x1af0>
    43d8:	ldr	r1, [r6, r0]
    43dc:	sub	r1, r0, r1
    43e0:	add	r1, r6, r1
    43e4:	ldrh	r2, [r1]
    43e8:	cmp	r2, #12
    43ec:	bcc	50d4 <test_scan+0x1ae4>
    43f0:	ldrh	r1, [r1, #10]
    43f4:	cmp	r1, #0
    43f8:	beq	50d4 <test_scan+0x1ae4>
    43fc:	add	r2, r0, r1
    4400:	ldr	r2, [r6, r2]
    4404:	add	r0, r2, r0
    4408:	add	r0, r0, r1
    440c:	mov	r1, r5
    4410:	add	r0, r6, r0
    4414:	add	r0, r0, #4
    4418:	bl	0 <strcmp>
    441c:	cmp	r0, #0
    4420:	beq	4444 <test_scan+0xe54>
    4424:	add	r4, r4, #1
    4428:	add	r6, r6, #4
    442c:	cmp	r4, sl
    4430:	bcc	43c4 <test_scan+0xdd4>
    4434:	b	4634 <test_scan+0x1044>
    4438:	movw	r0, #0
    443c:	movt	r0, #0
    4440:	b	3bb8 <test_scan+0x5c8>
    4444:	cmp	r4, #4
    4448:	bne	4634 <test_scan+0x1044>
    444c:	cmp	sl, #2
    4450:	bcc	4700 <test_scan+0x1110>
    4454:	ldr	r0, [sp, #44]	; 0x2c
    4458:	movw	r5, #0
    445c:	mov	r6, #1
    4460:	movt	r5, #0
    4464:	add	r4, r0, #12
    4468:	cmp	sl, r6
    446c:	bls	5948 <test_scan+0x2358>
    4470:	ldr	r0, [r4, #-4]
    4474:	add	r1, r4, r0
    4478:	cmp	r1, #4
    447c:	beq	50e0 <test_scan+0x1af0>
    4480:	ldr	r1, [r1, #-4]
    4484:	sub	r1, r0, r1
    4488:	add	r1, r4, r1
    448c:	ldrh	r2, [r1, #-4]
    4490:	cmp	r2, #12
    4494:	bcc	50d4 <test_scan+0x1ae4>
    4498:	ldrh	r1, [r1, #6]
    449c:	cmp	r1, #0
    44a0:	beq	50d4 <test_scan+0x1ae4>
    44a4:	add	r2, r0, r1
    44a8:	add	r2, r4, r2
    44ac:	ldr	r2, [r2, #-4]
    44b0:	add	r0, r2, r0
    44b4:	add	r0, r0, r1
    44b8:	mov	r1, r5
    44bc:	add	r0, r4, r0
    44c0:	bl	0 <strcmp>
    44c4:	cmp	r0, #0
    44c8:	beq	46e0 <test_scan+0x10f0>
    44cc:	ldr	r0, [sp, #40]	; 0x28
    44d0:	add	r6, r6, #1
    44d4:	add	r4, r4, #4
    44d8:	cmp	r6, r0
    44dc:	bcc	4468 <test_scan+0xe78>
    44e0:	cmp	sl, #2
    44e4:	bcc	4700 <test_scan+0x1110>
    44e8:	ldr	r0, [sp, #44]	; 0x2c
    44ec:	movw	r5, #0
    44f0:	mov	r6, #1
    44f4:	movt	r5, #0
    44f8:	add	r4, r0, #12
    44fc:	cmp	sl, r6
    4500:	bls	5948 <test_scan+0x2358>
    4504:	ldr	r0, [r4, #-4]
    4508:	add	r1, r4, r0
    450c:	cmp	r1, #4
    4510:	beq	50e0 <test_scan+0x1af0>
    4514:	ldr	r1, [r1, #-4]
    4518:	sub	r1, r0, r1
    451c:	add	r1, r4, r1
    4520:	ldrh	r2, [r1, #-4]
    4524:	cmp	r2, #12
    4528:	bcc	50d4 <test_scan+0x1ae4>
    452c:	ldrh	r1, [r1, #6]
    4530:	cmp	r1, #0
    4534:	beq	50d4 <test_scan+0x1ae4>
    4538:	add	r2, r0, r1
    453c:	add	r2, r4, r2
    4540:	ldr	r2, [r2, #-4]
    4544:	add	r0, r2, r0
    4548:	add	r0, r0, r1
    454c:	mov	r1, r5
    4550:	add	r0, r4, r0
    4554:	bl	0 <strcmp>
    4558:	cmp	r0, #0
    455c:	beq	46ec <test_scan+0x10fc>
    4560:	ldr	r0, [sp, #40]	; 0x28
    4564:	add	r6, r6, #1
    4568:	add	r4, r4, #4
    456c:	cmp	r6, r0
    4570:	bcc	44fc <test_scan+0xf0c>
    4574:	cmp	sl, #2
    4578:	bcc	4700 <test_scan+0x1110>
    457c:	ldr	r0, [sp, #44]	; 0x2c
    4580:	movw	r5, #0
    4584:	mov	r4, #1
    4588:	mov	r7, #0
    458c:	movt	r5, #0
    4590:	add	r9, r0, #8
    4594:	cmp	sl, r4
    4598:	bls	5948 <test_scan+0x2358>
    459c:	add	r0, r8, r7
    45a0:	ldr	r0, [r0, #8]
    45a4:	add	r1, r7, r0
    45a8:	adds	r1, r9, r1
    45ac:	beq	50e0 <test_scan+0x1af0>
    45b0:	add	r1, r8, r0
    45b4:	ldr	r2, [sp, #44]	; 0x2c
    45b8:	add	r1, r1, r7
    45bc:	ldr	r1, [r1, #8]
    45c0:	sub	r1, r0, r1
    45c4:	add	r1, r2, r1
    45c8:	add	r1, r1, r7
    45cc:	ldrh	r2, [r1, #8]
    45d0:	cmp	r2, #12
    45d4:	bcc	50d4 <test_scan+0x1ae4>
    45d8:	ldrh	r1, [r1, #18]
    45dc:	cmp	r1, #0
    45e0:	beq	50d4 <test_scan+0x1ae4>
    45e4:	add	r2, r0, r1
    45e8:	add	r2, r8, r2
    45ec:	add	r2, r2, r7
    45f0:	ldr	r2, [r2, #8]
    45f4:	add	r0, r2, r0
    45f8:	add	r0, r0, r1
    45fc:	ldr	r1, [sp, #44]	; 0x2c
    4600:	add	r0, r7, r0
    4604:	add	r0, r1, r0
    4608:	mov	r1, r5
    460c:	add	r0, r0, #12
    4610:	bl	0 <strcmp>
    4614:	cmp	r0, #0
    4618:	beq	46f8 <test_scan+0x1108>
    461c:	ldr	r0, [sp, #40]	; 0x28
    4620:	add	r4, r4, #1
    4624:	add	r7, r7, #4
    4628:	cmp	r4, r0
    462c:	bcc	4594 <test_scan+0xfa4>
    4630:	b	4700 <test_scan+0x1110>
    4634:	movw	r0, #0
    4638:	movt	r0, #0
    463c:	b	3bb8 <test_scan+0x5c8>
    4640:	movw	r0, #0
    4644:	movw	r1, #0
    4648:	movw	r3, #0
    464c:	mov	r2, #235	; 0xeb
    4650:	movt	r0, #0
    4654:	movt	r1, #0
    4658:	movt	r3, #0
    465c:	bl	0 <__assert_fail>
    4660:	movw	r0, #0
    4664:	movw	r1, #0
    4668:	movw	r3, #0
    466c:	movw	r2, #711	; 0x2c7
    4670:	movt	r0, #0
    4674:	movt	r1, #0
    4678:	movt	r3, #0
    467c:	bl	0 <__assert_fail>
    4680:	movw	r0, #0
    4684:	movw	r1, #0
    4688:	movw	r3, #0
    468c:	movw	r2, #1305	; 0x519
    4690:	movt	r0, #0
    4694:	movt	r1, #0
    4698:	movt	r3, #0
    469c:	bl	0 <__assert_fail>
    46a0:	movw	r0, #0
    46a4:	movw	r1, #0
    46a8:	movw	r3, #0
    46ac:	movw	r2, #1307	; 0x51b
    46b0:	movt	r0, #0
    46b4:	movt	r1, #0
    46b8:	movt	r3, #0
    46bc:	bl	0 <__assert_fail>
    46c0:	movw	r0, #0
    46c4:	movw	r1, #0
    46c8:	movw	r3, #0
    46cc:	movw	r2, #1309	; 0x51d
    46d0:	movt	r0, #0
    46d4:	movt	r1, #0
    46d8:	movt	r3, #0
    46dc:	bl	0 <__assert_fail>
    46e0:	movw	r0, #0
    46e4:	movt	r0, #0
    46e8:	b	3bb8 <test_scan+0x5c8>
    46ec:	movw	r0, #0
    46f0:	movt	r0, #0
    46f4:	b	3bb8 <test_scan+0x5c8>
    46f8:	cmp	r7, #0
    46fc:	beq	470c <test_scan+0x111c>
    4700:	movw	r0, #0
    4704:	movt	r0, #0
    4708:	b	3bb8 <test_scan+0x5c8>
    470c:	movw	r5, #0
    4710:	mov	r4, #1
    4714:	mov	r7, #0
    4718:	movt	r5, #0
    471c:	cmp	sl, r4
    4720:	bls	5948 <test_scan+0x2358>
    4724:	add	r0, r8, r7
    4728:	ldr	r0, [r0, #8]
    472c:	add	r1, r7, r0
    4730:	adds	r1, r9, r1
    4734:	beq	50e0 <test_scan+0x1af0>
    4738:	add	r1, r8, r0
    473c:	add	r1, r1, r7
    4740:	ldr	r1, [r1, #8]
    4744:	sub	r1, r0, r1
    4748:	add	r1, r8, r1
    474c:	add	r1, r1, r7
    4750:	ldrh	r2, [r1, #8]
    4754:	cmp	r2, #12
    4758:	bcc	50d4 <test_scan+0x1ae4>
    475c:	ldrh	r1, [r1, #18]
    4760:	cmp	r1, #0
    4764:	beq	50d4 <test_scan+0x1ae4>
    4768:	add	r2, r0, r1
    476c:	add	r2, r8, r2
    4770:	add	r2, r2, r7
    4774:	ldr	r2, [r2, #8]
    4778:	add	r0, r2, r0
    477c:	add	r0, r0, r1
    4780:	ldr	r1, [sp, #44]	; 0x2c
    4784:	add	r0, r7, r0
    4788:	add	r0, r1, r0
    478c:	mov	r1, r5
    4790:	add	r0, r0, #12
    4794:	bl	0 <strcmp>
    4798:	cmp	r0, #0
    479c:	beq	47b8 <test_scan+0x11c8>
    47a0:	ldr	r0, [sp, #40]	; 0x28
    47a4:	add	r4, r4, #1
    47a8:	add	r7, r7, #4
    47ac:	cmp	r4, r0
    47b0:	bcc	471c <test_scan+0x112c>
    47b4:	b	48ec <test_scan+0x12fc>
    47b8:	cmp	r7, #4
    47bc:	bne	48ec <test_scan+0x12fc>
    47c0:	ldr	r0, [sp, #44]	; 0x2c
    47c4:	movw	r5, #0
    47c8:	mov	r6, #1
    47cc:	movt	r5, #0
    47d0:	add	r4, r0, #12
    47d4:	cmp	sl, r6
    47d8:	bls	5948 <test_scan+0x2358>
    47dc:	ldr	r0, [r4, #-4]
    47e0:	add	r1, r4, r0
    47e4:	cmp	r1, #4
    47e8:	beq	50e0 <test_scan+0x1af0>
    47ec:	ldr	r1, [r1, #-4]
    47f0:	sub	r1, r0, r1
    47f4:	add	r1, r4, r1
    47f8:	ldrh	r2, [r1, #-4]
    47fc:	cmp	r2, #12
    4800:	bcc	50d4 <test_scan+0x1ae4>
    4804:	ldrh	r1, [r1, #6]
    4808:	cmp	r1, #0
    480c:	beq	50d4 <test_scan+0x1ae4>
    4810:	add	r2, r0, r1
    4814:	add	r2, r4, r2
    4818:	ldr	r2, [r2, #-4]
    481c:	add	r0, r2, r0
    4820:	add	r0, r0, r1
    4824:	mov	r1, r5
    4828:	add	r0, r4, r0
    482c:	bl	0 <strcmp>
    4830:	cmp	r0, #0
    4834:	beq	48f8 <test_scan+0x1308>
    4838:	ldr	r0, [sp, #40]	; 0x28
    483c:	add	r6, r6, #1
    4840:	add	r4, r4, #4
    4844:	cmp	r6, r0
    4848:	bcc	47d4 <test_scan+0x11e4>
    484c:	ldr	r0, [sp, #16]
    4850:	ldr	r1, [sp, #12]
    4854:	ldr	r6, [sp, #40]	; 0x28
    4858:	movw	r5, #0
    485c:	movt	r5, #0
    4860:	cmn	r0, #4
    4864:	mvnls	r0, #3
    4868:	sub	r0, r1, r0, lsl #2
    486c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    4870:	add	r4, r1, r0
    4874:	subs	r6, r6, #1
    4878:	bls	4904 <test_scan+0x1314>
    487c:	cmp	sl, r6
    4880:	bls	5948 <test_scan+0x2358>
    4884:	ldr	r0, [r4]
    4888:	adds	r1, r4, r0
    488c:	beq	50e0 <test_scan+0x1af0>
    4890:	ldr	r1, [r4, r0]
    4894:	sub	r1, r0, r1
    4898:	add	r1, r4, r1
    489c:	ldrh	r2, [r1]
    48a0:	cmp	r2, #12
    48a4:	bcc	50d4 <test_scan+0x1ae4>
    48a8:	ldrh	r1, [r1, #10]
    48ac:	cmp	r1, #0
    48b0:	beq	50d4 <test_scan+0x1ae4>
    48b4:	add	r2, r0, r1
    48b8:	ldr	r2, [r4, r2]
    48bc:	add	r0, r2, r0
    48c0:	add	r0, r0, r1
    48c4:	mov	r1, r5
    48c8:	add	r0, r4, r0
    48cc:	add	r0, r0, #4
    48d0:	bl	0 <strcmp>
    48d4:	sub	r4, r4, #4
    48d8:	cmp	r0, #0
    48dc:	bne	4874 <test_scan+0x1284>
    48e0:	movw	r0, #0
    48e4:	movt	r0, #0
    48e8:	b	3bb8 <test_scan+0x5c8>
    48ec:	movw	r0, #0
    48f0:	movt	r0, #0
    48f4:	b	3bb8 <test_scan+0x5c8>
    48f8:	movw	r0, #0
    48fc:	movt	r0, #0
    4900:	b	3bb8 <test_scan+0x5c8>
    4904:	ldr	r0, [sp, #16]
    4908:	ldr	r1, [sp, #12]
    490c:	ldr	r6, [sp, #40]	; 0x28
    4910:	movw	r5, #0
    4914:	movt	r5, #0
    4918:	cmn	r0, #4
    491c:	mvnls	r0, #3
    4920:	sub	r0, r1, r0, lsl #2
    4924:	ldr	r1, [fp, #-44]	; 0xffffffd4
    4928:	add	r4, r1, r0
    492c:	subs	r6, r6, #1
    4930:	bls	49a4 <test_scan+0x13b4>
    4934:	cmp	sl, r6
    4938:	bls	5948 <test_scan+0x2358>
    493c:	ldr	r0, [r4]
    4940:	adds	r1, r4, r0
    4944:	beq	50e0 <test_scan+0x1af0>
    4948:	ldr	r1, [r4, r0]
    494c:	sub	r1, r0, r1
    4950:	add	r1, r4, r1
    4954:	ldrh	r2, [r1]
    4958:	cmp	r2, #12
    495c:	bcc	50d4 <test_scan+0x1ae4>
    4960:	ldrh	r1, [r1, #10]
    4964:	cmp	r1, #0
    4968:	beq	50d4 <test_scan+0x1ae4>
    496c:	add	r2, r0, r1
    4970:	ldr	r2, [r4, r2]
    4974:	add	r0, r2, r0
    4978:	add	r0, r0, r1
    497c:	mov	r1, r5
    4980:	add	r0, r4, r0
    4984:	add	r0, r0, #4
    4988:	bl	0 <strcmp>
    498c:	sub	r4, r4, #4
    4990:	cmp	r0, #0
    4994:	bne	492c <test_scan+0x133c>
    4998:	movw	r0, #0
    499c:	movt	r0, #0
    49a0:	b	3bb8 <test_scan+0x5c8>
    49a4:	ldr	r0, [sp, #16]
    49a8:	ldr	r1, [sp, #12]
    49ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
    49b0:	movw	r5, #0
    49b4:	movt	r5, #0
    49b8:	cmn	r0, #4
    49bc:	mvnls	r0, #3
    49c0:	sub	r1, r1, r0, lsl #2
    49c4:	add	r4, r2, r1
    49c8:	mvn	r1, #1
    49cc:	sub	r7, r1, r0
    49d0:	add	r0, r7, #1
    49d4:	cmp	r0, #2
    49d8:	bcc	4a4c <test_scan+0x145c>
    49dc:	cmp	sl, r7
    49e0:	bls	5948 <test_scan+0x2358>
    49e4:	ldr	r0, [r4]
    49e8:	adds	r1, r4, r0
    49ec:	beq	50e0 <test_scan+0x1af0>
    49f0:	ldr	r1, [r4, r0]
    49f4:	sub	r1, r0, r1
    49f8:	add	r1, r4, r1
    49fc:	ldrh	r2, [r1]
    4a00:	cmp	r2, #12
    4a04:	bcc	50d4 <test_scan+0x1ae4>
    4a08:	ldrh	r1, [r1, #10]
    4a0c:	cmp	r1, #0
    4a10:	beq	50d4 <test_scan+0x1ae4>
    4a14:	add	r2, r0, r1
    4a18:	ldr	r2, [r4, r2]
    4a1c:	add	r0, r2, r0
    4a20:	add	r0, r0, r1
    4a24:	mov	r1, r5
    4a28:	add	r0, r4, r0
    4a2c:	add	r0, r0, #4
    4a30:	bl	0 <strcmp>
    4a34:	sub	r4, r4, #4
    4a38:	sub	r7, r7, #1
    4a3c:	cmp	r0, #0
    4a40:	bne	49d0 <test_scan+0x13e0>
    4a44:	cmp	r7, #0
    4a48:	beq	4a58 <test_scan+0x1468>
    4a4c:	movw	r0, #0
    4a50:	movt	r0, #0
    4a54:	b	3bb8 <test_scan+0x5c8>
    4a58:	ldr	r0, [sp, #16]
    4a5c:	ldr	r1, [sp, #12]
    4a60:	ldr	r6, [sp, #40]	; 0x28
    4a64:	movw	r5, #0
    4a68:	movt	r5, #0
    4a6c:	cmn	r0, #4
    4a70:	mvnls	r0, #3
    4a74:	sub	r0, r1, r0, lsl #2
    4a78:	ldr	r1, [fp, #-44]	; 0xffffffd4
    4a7c:	add	r4, r1, r0
    4a80:	cmp	r6, #2
    4a84:	bcc	4ba0 <test_scan+0x15b0>
    4a88:	sub	r6, r6, #1
    4a8c:	cmp	sl, r6
    4a90:	bls	5948 <test_scan+0x2358>
    4a94:	ldr	r0, [r4]
    4a98:	adds	r1, r4, r0
    4a9c:	beq	50e0 <test_scan+0x1af0>
    4aa0:	ldr	r1, [r4, r0]
    4aa4:	sub	r1, r0, r1
    4aa8:	add	r1, r4, r1
    4aac:	ldrh	r2, [r1]
    4ab0:	cmp	r2, #12
    4ab4:	bcc	50d4 <test_scan+0x1ae4>
    4ab8:	ldrh	r1, [r1, #10]
    4abc:	cmp	r1, #0
    4ac0:	beq	50d4 <test_scan+0x1ae4>
    4ac4:	add	r2, r0, r1
    4ac8:	ldr	r2, [r4, r2]
    4acc:	add	r0, r2, r0
    4ad0:	add	r0, r0, r1
    4ad4:	mov	r1, r5
    4ad8:	add	r0, r4, r0
    4adc:	add	r0, r0, #4
    4ae0:	bl	0 <strcmp>
    4ae4:	sub	r4, r4, #4
    4ae8:	cmp	r0, #0
    4aec:	bne	4a80 <test_scan+0x1490>
    4af0:	cmp	r6, #2
    4af4:	bne	4ba0 <test_scan+0x15b0>
    4af8:	ldr	r0, [sp, #16]
    4afc:	ldr	r1, [sp, #12]
    4b00:	movw	r5, #0
    4b04:	movt	r5, #0
    4b08:	cmn	r0, #4
    4b0c:	mvnls	r0, #3
    4b10:	sub	r0, r1, r0, lsl #2
    4b14:	ldr	r1, [fp, #-44]	; 0xffffffd4
    4b18:	add	r4, r1, r0
    4b1c:	ldr	r0, [sp, #40]	; 0x28
    4b20:	subs	r0, r0, #1
    4b24:	str	r0, [sp, #40]	; 0x28
    4b28:	bls	4bac <test_scan+0x15bc>
    4b2c:	ldr	r0, [sp, #40]	; 0x28
    4b30:	cmp	sl, r0
    4b34:	bls	5948 <test_scan+0x2358>
    4b38:	ldr	r0, [r4]
    4b3c:	cmn	r4, r0
    4b40:	beq	50e0 <test_scan+0x1af0>
    4b44:	ldr	r1, [r4, r0]
    4b48:	sub	r1, r0, r1
    4b4c:	add	r1, r4, r1
    4b50:	ldrh	r2, [r1]
    4b54:	cmp	r2, #12
    4b58:	bcc	50d4 <test_scan+0x1ae4>
    4b5c:	ldrh	r1, [r1, #10]
    4b60:	cmp	r1, #0
    4b64:	beq	50d4 <test_scan+0x1ae4>
    4b68:	add	r2, r0, r1
    4b6c:	ldr	r2, [r4, r2]
    4b70:	add	r0, r2, r0
    4b74:	add	r0, r0, r1
    4b78:	mov	r1, r5
    4b7c:	add	r0, r4, r0
    4b80:	add	r0, r0, #4
    4b84:	bl	0 <strcmp>
    4b88:	sub	r4, r4, #4
    4b8c:	cmp	r0, #0
    4b90:	bne	4b1c <test_scan+0x152c>
    4b94:	movw	r0, #0
    4b98:	movt	r0, #0
    4b9c:	b	3bb8 <test_scan+0x5c8>
    4ba0:	movw	r0, #0
    4ba4:	movt	r0, #0
    4ba8:	b	3bb8 <test_scan+0x5c8>
    4bac:	ldr	r0, [fp, #-44]	; 0xffffffd4
    4bb0:	ldr	r1, [sp, #20]
    4bb4:	movw	r5, #0
    4bb8:	mov	r6, sl
    4bbc:	movt	r5, #0
    4bc0:	add	r4, r0, r1
    4bc4:	cmp	r6, sl
    4bc8:	bls	4c40 <test_scan+0x1650>
    4bcc:	sub	r6, r6, #1
    4bd0:	cmp	sl, r6
    4bd4:	bls	5948 <test_scan+0x2358>
    4bd8:	ldr	r0, [r4]
    4bdc:	adds	r1, r4, r0
    4be0:	beq	50e0 <test_scan+0x1af0>
    4be4:	ldr	r1, [r4, r0]
    4be8:	sub	r1, r0, r1
    4bec:	add	r1, r4, r1
    4bf0:	ldrh	r2, [r1]
    4bf4:	cmp	r2, #12
    4bf8:	bcc	50d4 <test_scan+0x1ae4>
    4bfc:	ldrh	r1, [r1, #10]
    4c00:	cmp	r1, #0
    4c04:	beq	50d4 <test_scan+0x1ae4>
    4c08:	add	r2, r0, r1
    4c0c:	ldr	r2, [r4, r2]
    4c10:	add	r0, r2, r0
    4c14:	add	r0, r0, r1
    4c18:	mov	r1, r5
    4c1c:	add	r0, r4, r0
    4c20:	add	r0, r0, #4
    4c24:	bl	0 <strcmp>
    4c28:	sub	r4, r4, #4
    4c2c:	cmp	r0, #0
    4c30:	bne	4bc4 <test_scan+0x15d4>
    4c34:	movw	r0, #0
    4c38:	movt	r0, #0
    4c3c:	b	3bb8 <test_scan+0x5c8>
    4c40:	movw	r5, #0
    4c44:	mov	r8, #0
    4c48:	movt	r5, #0
    4c4c:	cmp	sl, r8
    4c50:	bls	5948 <test_scan+0x2358>
    4c54:	ldr	r0, [r9, #-4]
    4c58:	add	r1, r9, r0
    4c5c:	cmp	r1, #4
    4c60:	beq	50e0 <test_scan+0x1af0>
    4c64:	ldr	r1, [r1, #-4]
    4c68:	sub	r1, r0, r1
    4c6c:	add	r1, r9, r1
    4c70:	ldrh	r2, [r1, #-4]
    4c74:	cmp	r2, #12
    4c78:	bcc	50d4 <test_scan+0x1ae4>
    4c7c:	ldrh	r1, [r1, #6]
    4c80:	cmp	r1, #0
    4c84:	beq	50d4 <test_scan+0x1ae4>
    4c88:	add	r2, r0, r1
    4c8c:	add	r2, r9, r2
    4c90:	ldr	r2, [r2, #-4]
    4c94:	add	r0, r2, r0
    4c98:	add	r0, r0, r1
    4c9c:	mov	r1, r5
    4ca0:	add	r0, r9, r0
    4ca4:	bl	0 <strcmp>
    4ca8:	cmp	r0, #0
    4cac:	beq	4cc4 <test_scan+0x16d4>
    4cb0:	add	r8, r8, #1
    4cb4:	add	r9, r9, #4
    4cb8:	cmp	r8, sl
    4cbc:	bcc	4c4c <test_scan+0x165c>
    4cc0:	b	4d60 <test_scan+0x1770>
    4cc4:	ldr	r0, [sp, #44]	; 0x2c
    4cc8:	movw	r5, #0
    4ccc:	mov	r4, #0
    4cd0:	movt	r5, #0
    4cd4:	add	r9, r0, #12
    4cd8:	b	4ce0 <test_scan+0x16f0>
    4cdc:	mov	r4, r6
    4ce0:	add	r7, r9, r8, lsl #2
    4ce4:	add	r6, r4, #1
    4ce8:	add	r8, r8, #1
    4cec:	cmp	r8, sl
    4cf0:	bcs	4d58 <test_scan+0x1768>
    4cf4:	ldr	r0, [r7, #-4]
    4cf8:	add	r1, r7, r0
    4cfc:	cmp	r1, #4
    4d00:	beq	50e0 <test_scan+0x1af0>
    4d04:	ldr	r1, [r1, #-4]
    4d08:	sub	r1, r0, r1
    4d0c:	add	r1, r7, r1
    4d10:	ldrh	r2, [r1, #-4]
    4d14:	cmp	r2, #12
    4d18:	bcc	50d4 <test_scan+0x1ae4>
    4d1c:	ldrh	r1, [r1, #6]
    4d20:	cmp	r1, #0
    4d24:	beq	50d4 <test_scan+0x1ae4>
    4d28:	add	r2, r0, r1
    4d2c:	add	r2, r7, r2
    4d30:	ldr	r2, [r2, #-4]
    4d34:	add	r0, r2, r0
    4d38:	add	r0, r0, r1
    4d3c:	mov	r1, r5
    4d40:	add	r0, r7, r0
    4d44:	bl	0 <strcmp>
    4d48:	add	r7, r7, #4
    4d4c:	cmp	r0, #0
    4d50:	bne	4ce8 <test_scan+0x16f8>
    4d54:	b	4cdc <test_scan+0x16ec>
    4d58:	cmp	r4, #0
    4d5c:	beq	4d6c <test_scan+0x177c>
    4d60:	movw	r0, #0
    4d64:	movt	r0, #0
    4d68:	b	3bb8 <test_scan+0x5c8>
    4d6c:	ldr	r0, [sp, #44]	; 0x2c
    4d70:	movw	r8, #0
    4d74:	mov	r5, #0
    4d78:	movt	r8, #0
    4d7c:	add	r4, r0, #8
    4d80:	cmp	sl, r5
    4d84:	bls	5948 <test_scan+0x2358>
    4d88:	ldr	r0, [r4, #-4]
    4d8c:	add	r1, r4, r0
    4d90:	cmp	r1, #4
    4d94:	beq	50e0 <test_scan+0x1af0>
    4d98:	ldr	r1, [r1, #-4]
    4d9c:	sub	r1, r0, r1
    4da0:	add	r1, r4, r1
    4da4:	ldrh	r2, [r1, #-4]
    4da8:	cmp	r2, #12
    4dac:	bcc	50d4 <test_scan+0x1ae4>
    4db0:	ldrh	r1, [r1, #6]
    4db4:	cmp	r1, #0
    4db8:	beq	50d4 <test_scan+0x1ae4>
    4dbc:	add	r2, r0, r1
    4dc0:	add	r2, r4, r2
    4dc4:	ldr	r2, [r2, #-4]
    4dc8:	add	r0, r2, r0
    4dcc:	add	r0, r0, r1
    4dd0:	mov	r1, r8
    4dd4:	add	r0, r4, r0
    4dd8:	bl	0 <strcmp>
    4ddc:	cmp	r0, #0
    4de0:	beq	4df8 <test_scan+0x1808>
    4de4:	add	r5, r5, #1
    4de8:	add	r4, r4, #4
    4dec:	cmp	r5, sl
    4df0:	bcc	4d80 <test_scan+0x1790>
    4df4:	b	4e98 <test_scan+0x18a8>
    4df8:	ldr	r0, [sp, #44]	; 0x2c
    4dfc:	movw	r8, #0
    4e00:	mov	r7, #0
    4e04:	movt	r8, #0
    4e08:	add	r4, r0, #12
    4e0c:	add	r6, r4, r5, lsl #2
    4e10:	add	r7, r7, #1
    4e14:	add	r5, r5, #1
    4e18:	cmp	r5, sl
    4e1c:	bcs	4e84 <test_scan+0x1894>
    4e20:	ldr	r0, [r6, #-4]
    4e24:	add	r1, r6, r0
    4e28:	cmp	r1, #4
    4e2c:	beq	50e0 <test_scan+0x1af0>
    4e30:	ldr	r1, [r1, #-4]
    4e34:	sub	r1, r0, r1
    4e38:	add	r1, r6, r1
    4e3c:	ldrh	r2, [r1, #-4]
    4e40:	cmp	r2, #12
    4e44:	bcc	50d4 <test_scan+0x1ae4>
    4e48:	ldrh	r1, [r1, #6]
    4e4c:	cmp	r1, #0
    4e50:	beq	50d4 <test_scan+0x1ae4>
    4e54:	add	r2, r0, r1
    4e58:	add	r2, r6, r2
    4e5c:	ldr	r2, [r2, #-4]
    4e60:	add	r0, r2, r0
    4e64:	add	r0, r0, r1
    4e68:	mov	r1, r8
    4e6c:	add	r0, r6, r0
    4e70:	bl	0 <strcmp>
    4e74:	add	r6, r6, #4
    4e78:	cmp	r0, #0
    4e7c:	bne	4e14 <test_scan+0x1824>
    4e80:	b	4e0c <test_scan+0x181c>
    4e84:	cmp	r7, #0
    4e88:	beq	4e98 <test_scan+0x18a8>
    4e8c:	movw	r0, #0
    4e90:	movt	r0, #0
    4e94:	b	3bb8 <test_scan+0x5c8>
    4e98:	ldr	r0, [sp, #44]	; 0x2c
    4e9c:	movw	r8, #0
    4ea0:	mov	r5, #0
    4ea4:	movt	r8, #0
    4ea8:	add	r4, r0, #8
    4eac:	cmp	sl, r5
    4eb0:	bls	5948 <test_scan+0x2358>
    4eb4:	ldr	r0, [r4, #-4]
    4eb8:	add	r1, r4, r0
    4ebc:	cmp	r1, #4
    4ec0:	beq	50e0 <test_scan+0x1af0>
    4ec4:	ldr	r1, [r1, #-4]
    4ec8:	sub	r1, r0, r1
    4ecc:	add	r1, r4, r1
    4ed0:	ldrh	r2, [r1, #-4]
    4ed4:	cmp	r2, #12
    4ed8:	bcc	50d4 <test_scan+0x1ae4>
    4edc:	ldrh	r1, [r1, #6]
    4ee0:	cmp	r1, #0
    4ee4:	beq	50d4 <test_scan+0x1ae4>
    4ee8:	add	r2, r0, r1
    4eec:	add	r2, r4, r2
    4ef0:	ldr	r2, [r2, #-4]
    4ef4:	add	r0, r2, r0
    4ef8:	add	r0, r0, r1
    4efc:	mov	r1, r8
    4f00:	add	r0, r4, r0
    4f04:	bl	0 <strcmp>
    4f08:	cmp	r0, #0
    4f0c:	beq	4f24 <test_scan+0x1934>
    4f10:	add	r5, r5, #1
    4f14:	add	r4, r4, #4
    4f18:	cmp	r5, sl
    4f1c:	bcc	4eac <test_scan+0x18bc>
    4f20:	b	4fb8 <test_scan+0x19c8>
    4f24:	movw	r8, #0
    4f28:	mov	r4, #0
    4f2c:	movt	r8, #0
    4f30:	b	4f38 <test_scan+0x1948>
    4f34:	mov	r4, r6
    4f38:	add	r7, r9, r5, lsl #2
    4f3c:	add	r6, r4, #1
    4f40:	add	r5, r5, #1
    4f44:	cmp	r5, sl
    4f48:	bcs	4fb0 <test_scan+0x19c0>
    4f4c:	ldr	r0, [r7, #-4]
    4f50:	add	r1, r7, r0
    4f54:	cmp	r1, #4
    4f58:	beq	50e0 <test_scan+0x1af0>
    4f5c:	ldr	r1, [r1, #-4]
    4f60:	sub	r1, r0, r1
    4f64:	add	r1, r7, r1
    4f68:	ldrh	r2, [r1, #-4]
    4f6c:	cmp	r2, #12
    4f70:	bcc	50d4 <test_scan+0x1ae4>
    4f74:	ldrh	r1, [r1, #6]
    4f78:	cmp	r1, #0
    4f7c:	beq	50d4 <test_scan+0x1ae4>
    4f80:	add	r2, r0, r1
    4f84:	add	r2, r7, r2
    4f88:	ldr	r2, [r2, #-4]
    4f8c:	add	r0, r2, r0
    4f90:	add	r0, r0, r1
    4f94:	mov	r1, r8
    4f98:	add	r0, r7, r0
    4f9c:	bl	0 <strcmp>
    4fa0:	add	r7, r7, #4
    4fa4:	cmp	r0, #0
    4fa8:	bne	4f40 <test_scan+0x1950>
    4fac:	b	4f34 <test_scan+0x1944>
    4fb0:	cmp	r4, #0
    4fb4:	beq	4fc4 <test_scan+0x19d4>
    4fb8:	movw	r0, #0
    4fbc:	movt	r0, #0
    4fc0:	b	3bb8 <test_scan+0x5c8>
    4fc4:	ldr	r0, [sp, #44]	; 0x2c
    4fc8:	movw	r8, #0
    4fcc:	mov	r5, #0
    4fd0:	movt	r8, #0
    4fd4:	add	r4, r0, #8
    4fd8:	cmp	sl, r5
    4fdc:	bls	5948 <test_scan+0x2358>
    4fe0:	ldr	r0, [r4, #-4]
    4fe4:	add	r1, r4, r0
    4fe8:	cmp	r1, #4
    4fec:	beq	50e0 <test_scan+0x1af0>
    4ff0:	ldr	r1, [r1, #-4]
    4ff4:	sub	r1, r0, r1
    4ff8:	add	r1, r4, r1
    4ffc:	ldrh	r2, [r1, #-4]
    5000:	cmp	r2, #12
    5004:	bcc	50d4 <test_scan+0x1ae4>
    5008:	ldrh	r1, [r1, #6]
    500c:	cmp	r1, #0
    5010:	beq	50d4 <test_scan+0x1ae4>
    5014:	add	r2, r0, r1
    5018:	add	r2, r4, r2
    501c:	ldr	r2, [r2, #-4]
    5020:	add	r0, r2, r0
    5024:	add	r0, r0, r1
    5028:	mov	r1, r8
    502c:	add	r0, r4, r0
    5030:	bl	0 <strcmp>
    5034:	cmp	r0, #0
    5038:	beq	5050 <test_scan+0x1a60>
    503c:	add	r5, r5, #1
    5040:	add	r4, r4, #4
    5044:	cmp	r5, sl
    5048:	bcc	4fd8 <test_scan+0x19e8>
    504c:	b	5164 <test_scan+0x1b74>
    5050:	movw	r8, #0
    5054:	mov	r7, #0
    5058:	movt	r8, #0
    505c:	add	r4, r9, r5, lsl #2
    5060:	add	r7, r7, #1
    5064:	add	r5, r5, #1
    5068:	cmp	r5, sl
    506c:	bcs	5100 <test_scan+0x1b10>
    5070:	ldr	r0, [r4, #-4]
    5074:	add	r1, r4, r0
    5078:	cmp	r1, #4
    507c:	beq	50e0 <test_scan+0x1af0>
    5080:	ldr	r1, [r1, #-4]
    5084:	sub	r1, r0, r1
    5088:	add	r1, r4, r1
    508c:	ldrh	r2, [r1, #-4]
    5090:	cmp	r2, #12
    5094:	bcc	50d4 <test_scan+0x1ae4>
    5098:	ldrh	r1, [r1, #6]
    509c:	cmp	r1, #0
    50a0:	beq	50d4 <test_scan+0x1ae4>
    50a4:	add	r2, r0, r1
    50a8:	add	r2, r4, r2
    50ac:	ldr	r2, [r2, #-4]
    50b0:	add	r0, r2, r0
    50b4:	add	r0, r0, r1
    50b8:	mov	r1, r8
    50bc:	add	r0, r4, r0
    50c0:	bl	0 <strcmp>
    50c4:	add	r4, r4, #4
    50c8:	cmp	r0, #0
    50cc:	bne	5064 <test_scan+0x1a74>
    50d0:	b	505c <test_scan+0x1a6c>
    50d4:	movw	r0, #0
    50d8:	movt	r0, #0
    50dc:	b	50e8 <test_scan+0x1af8>
    50e0:	movw	r0, #0
    50e4:	movt	r0, #0
    50e8:	movw	r1, #0
    50ec:	movw	r3, #0
    50f0:	movw	r2, #699	; 0x2bb
    50f4:	movt	r1, #0
    50f8:	movt	r3, #0
    50fc:	bl	0 <__assert_fail>
    5100:	cmp	r7, #2
    5104:	bne	5164 <test_scan+0x1b74>
    5108:	ldr	r0, [sp, #28]
    510c:	ldr	r1, [sp, #24]
    5110:	ldr	r0, [r1, r0]
    5114:	cmp	r0, #0
    5118:	beq	5178 <test_scan+0x1b88>
    511c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    5120:	ldr	r2, [sp, #28]
    5124:	ldr	r3, [fp, #-44]	; 0xffffffd4
    5128:	mov	r7, #0
    512c:	add	r2, r1, r2
    5130:	ldr	r1, [sp, #48]	; 0x30
    5134:	add	r1, r2, r1
    5138:	add	r3, r3, r1
    513c:	add	r5, r3, #4
    5140:	cmp	r0, r7
    5144:	bls	5980 <test_scan+0x2390>
    5148:	ldrb	r6, [r5, r7]
    514c:	cmp	r6, #6
    5150:	beq	5170 <test_scan+0x1b80>
    5154:	add	r7, r7, #1
    5158:	cmp	r7, r0
    515c:	bcc	5140 <test_scan+0x1b50>
    5160:	b	5178 <test_scan+0x1b88>
    5164:	movw	r0, #0
    5168:	movt	r0, #0
    516c:	b	3bb8 <test_scan+0x5c8>
    5170:	cmp	r7, #0
    5174:	beq	5184 <test_scan+0x1b94>
    5178:	movw	r0, #0
    517c:	movt	r0, #0
    5180:	b	3bb8 <test_scan+0x5c8>
    5184:	mov	r7, #0
    5188:	cmp	r0, r7
    518c:	bls	5980 <test_scan+0x2390>
    5190:	ldrb	r6, [r5, r7]
    5194:	cmp	r6, #1
    5198:	beq	51ac <test_scan+0x1bbc>
    519c:	add	r7, r7, #1
    51a0:	cmp	r7, r0
    51a4:	bcc	5188 <test_scan+0x1b98>
    51a8:	b	523c <test_scan+0x1c4c>
    51ac:	cmp	r7, #2
    51b0:	bne	523c <test_scan+0x1c4c>
    51b4:	cmp	r0, #4
    51b8:	bcc	51f0 <test_scan+0x1c00>
    51bc:	add	r7, r3, #7
    51c0:	mov	r6, #0
    51c4:	add	r4, r6, #3
    51c8:	cmp	r0, r4
    51cc:	bls	5980 <test_scan+0x2390>
    51d0:	ldrb	r4, [r7, r6]
    51d4:	cmp	r4, #1
    51d8:	beq	5248 <test_scan+0x1c58>
    51dc:	add	r4, r6, #1
    51e0:	add	r6, r6, #4
    51e4:	cmp	r6, r0
    51e8:	mov	r6, r4
    51ec:	bcc	51c4 <test_scan+0x1bd4>
    51f0:	mov	r7, #0
    51f4:	cmp	r0, r7
    51f8:	bls	5980 <test_scan+0x2390>
    51fc:	ldrb	r6, [r5, r7]
    5200:	cmp	r6, #5
    5204:	beq	52d8 <test_scan+0x1ce8>
    5208:	add	r7, r7, #1
    520c:	cmp	r7, r0
    5210:	bcc	51f4 <test_scan+0x1c04>
    5214:	mov	r7, #0
    5218:	cmp	r0, r7
    521c:	bls	5980 <test_scan+0x2390>
    5220:	ldrb	r6, [r5, r7]
    5224:	cmp	r6, #2
    5228:	beq	5254 <test_scan+0x1c64>
    522c:	add	r7, r7, #1
    5230:	cmp	r7, r0
    5234:	bcc	5218 <test_scan+0x1c28>
    5238:	b	5284 <test_scan+0x1c94>
    523c:	movw	r0, #0
    5240:	movt	r0, #0
    5244:	b	3bb8 <test_scan+0x5c8>
    5248:	movw	r0, #0
    524c:	movt	r0, #0
    5250:	b	3bb8 <test_scan+0x5c8>
    5254:	cmp	r7, #6
    5258:	bne	5284 <test_scan+0x1c94>
    525c:	mov	r7, #0
    5260:	cmp	r0, r7
    5264:	bls	5980 <test_scan+0x2390>
    5268:	ldrb	r6, [r5, r7]
    526c:	cmp	r6, #3
    5270:	beq	5290 <test_scan+0x1ca0>
    5274:	add	r7, r7, #1
    5278:	cmp	r7, r0
    527c:	bcc	5260 <test_scan+0x1c70>
    5280:	b	52d8 <test_scan+0x1ce8>
    5284:	movw	r0, #0
    5288:	movt	r0, #0
    528c:	b	3bb8 <test_scan+0x5c8>
    5290:	cmp	r7, #3
    5294:	bne	52d8 <test_scan+0x1ce8>
    5298:	cmp	r0, #4
    529c:	bcc	52ec <test_scan+0x1cfc>
    52a0:	add	r7, r3, #7
    52a4:	mov	r6, #0
    52a8:	add	r5, r6, #3
    52ac:	cmp	r0, r5
    52b0:	bls	5980 <test_scan+0x2390>
    52b4:	ldrb	r5, [r7, r6]
    52b8:	cmp	r5, #3
    52bc:	beq	52e4 <test_scan+0x1cf4>
    52c0:	add	r5, r6, #1
    52c4:	add	r6, r6, #4
    52c8:	cmp	r6, r0
    52cc:	mov	r6, r5
    52d0:	bcc	52a8 <test_scan+0x1cb8>
    52d4:	b	52ec <test_scan+0x1cfc>
    52d8:	movw	r0, #0
    52dc:	movt	r0, #0
    52e0:	b	3bb8 <test_scan+0x5c8>
    52e4:	cmp	r6, #0
    52e8:	beq	52f8 <test_scan+0x1d08>
    52ec:	movw	r0, #0
    52f0:	movt	r0, #0
    52f4:	b	3bb8 <test_scan+0x5c8>
    52f8:	cmp	r0, #5
    52fc:	bcc	5968 <test_scan+0x2378>
    5300:	add	r3, r3, #8
    5304:	mov	r7, #0
    5308:	add	r6, r7, #4
    530c:	cmp	r0, r6
    5310:	bls	5980 <test_scan+0x2390>
    5314:	ldrb	r6, [r3, r7]
    5318:	cmp	r6, #3
    531c:	beq	5338 <test_scan+0x1d48>
    5320:	add	r6, r7, #1
    5324:	add	r7, r7, #5
    5328:	cmp	r7, r0
    532c:	mov	r7, r6
    5330:	bcc	5308 <test_scan+0x1d18>
    5334:	b	5968 <test_scan+0x2378>
    5338:	cmp	r7, #1
    533c:	bne	5968 <test_scan+0x2378>
    5340:	ldr	r3, [sp, #48]	; 0x30
    5344:	add	r2, r2, r0
    5348:	add	r2, r2, r3
    534c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    5350:	add	r2, r3, r2
    5354:	add	r3, r2, #3
    5358:	sub	r2, r0, #1
    535c:	cmn	r2, #1
    5360:	beq	5974 <test_scan+0x2384>
    5364:	cmp	r0, r2
    5368:	bls	5980 <test_scan+0x2390>
    536c:	ldrb	r7, [r3], #-1
    5370:	sub	r2, r2, #1
    5374:	cmp	r7, #3
    5378:	bne	535c <test_scan+0x1d6c>
    537c:	cmp	r2, #4
    5380:	bne	5974 <test_scan+0x2384>
    5384:	mvn	r2, r0
    5388:	ldr	r3, [fp, #-44]	; 0xffffffd4
    538c:	add	r1, r1, #2
    5390:	cmn	r2, #5
    5394:	mvnls	r2, #4
    5398:	sub	r1, r1, r2
    539c:	add	r1, r3, r1
    53a0:	mvn	r3, #1
    53a4:	sub	r2, r3, r2
    53a8:	add	r3, r2, #1
    53ac:	cmp	r3, #2
    53b0:	bcc	59a0 <test_scan+0x23b0>
    53b4:	cmp	r0, r2
    53b8:	bls	5980 <test_scan+0x2390>
    53bc:	ldrb	r3, [r1], #-1
    53c0:	sub	r2, r2, #1
    53c4:	cmp	r3, #3
    53c8:	bne	53a8 <test_scan+0x1db8>
    53cc:	cmp	r2, #2
    53d0:	bne	59a0 <test_scan+0x23b0>
    53d4:	ldr	r0, [sp, #32]
    53d8:	movw	r4, #0
    53dc:	mov	r6, #0
    53e0:	movt	r4, #0
    53e4:	ldr	r1, [r0, #-4]
    53e8:	str	r1, [sp, #48]	; 0x30
    53ec:	ldr	r1, [sp, #48]	; 0x30
    53f0:	cmp	r6, r1
    53f4:	bcs	5420 <test_scan+0x1e30>
    53f8:	mov	r7, r0
    53fc:	ldr	r1, [r7], #4
    5400:	add	r0, r0, r1
    5404:	mov	r1, r4
    5408:	add	r0, r0, #4
    540c:	bl	0 <strcmp>
    5410:	cmp	r0, #0
    5414:	add	r6, r6, #1
    5418:	mov	r0, r7
    541c:	bne	53ec <test_scan+0x1dfc>
    5420:	ldr	r0, [sp, #32]
    5424:	movw	r4, #0
    5428:	mov	r6, #0
    542c:	movt	r4, #0
    5430:	ldr	r1, [sp, #48]	; 0x30
    5434:	cmp	r6, r1
    5438:	bcs	5464 <test_scan+0x1e74>
    543c:	mov	r7, r0
    5440:	ldr	r1, [r7], #4
    5444:	add	r0, r0, r1
    5448:	mov	r1, r4
    544c:	add	r0, r0, #4
    5450:	bl	0 <strcmp>
    5454:	cmp	r0, #0
    5458:	add	r6, r6, #1
    545c:	mov	r0, r7
    5460:	bne	5430 <test_scan+0x1e40>
    5464:	ldr	r0, [sp, #32]
    5468:	movw	r8, #0
    546c:	mov	r6, #0
    5470:	movt	r8, #0
    5474:	ldr	r1, [sp, #48]	; 0x30
    5478:	cmp	r6, r1
    547c:	bcs	54dc <test_scan+0x1eec>
    5480:	mov	r7, r0
    5484:	ldr	r1, [r7], #4
    5488:	ldr	r4, [r0, r1]!
    548c:	mov	r1, r8
    5490:	cmp	r4, #4
    5494:	mov	r2, r4
    5498:	add	r0, r0, #4
    549c:	movcs	r2, #4
    54a0:	bl	0 <strncmp>
    54a4:	cmp	r0, #0
    54a8:	mov	r1, r0
    54ac:	mov	r2, #0
    54b0:	add	r6, r6, #1
    54b4:	mvneq	r1, #0
    54b8:	cmp	r4, #4
    54bc:	movwhi	r2, #1
    54c0:	cmp	r0, #0
    54c4:	mov	r0, r7
    54c8:	movne	r2, r1
    54cc:	cmp	r4, #4
    54d0:	movcc	r2, r1
    54d4:	cmp	r2, #0
    54d8:	bne	5474 <test_scan+0x1e84>
    54dc:	movw	r8, #0
    54e0:	mov	r6, #0
    54e4:	movt	r8, #0
    54e8:	ldr	r0, [sp, #48]	; 0x30
    54ec:	cmp	r6, r0
    54f0:	bcs	5554 <test_scan+0x1f64>
    54f4:	ldr	r1, [sp, #32]
    54f8:	mov	r7, r1
    54fc:	ldr	r0, [r7], #4
    5500:	ldr	r4, [r1, r0]!
    5504:	cmp	r4, #4
    5508:	mov	r2, r4
    550c:	add	r0, r1, #4
    5510:	mov	r1, r8
    5514:	movcs	r2, #4
    5518:	bl	0 <strncmp>
    551c:	cmp	r0, #0
    5520:	mov	r1, r0
    5524:	mov	r2, #0
    5528:	add	r6, r6, #1
    552c:	str	r7, [sp, #32]
    5530:	mvneq	r1, #0
    5534:	cmp	r4, #4
    5538:	movwhi	r2, #1
    553c:	cmp	r0, #0
    5540:	movne	r2, r1
    5544:	cmp	r4, #4
    5548:	movcc	r2, r1
    554c:	cmp	r2, #0
    5550:	bne	54e8 <test_scan+0x1ef8>
    5554:	ldr	r0, [fp, #-48]	; 0xffffffd0
    5558:	ldr	r1, [sp, #36]	; 0x24
    555c:	movw	r5, #0
    5560:	mov	r6, #0
    5564:	mvn	r4, #0
    5568:	movt	r5, #0
    556c:	add	r0, r1, r0
    5570:	ldr	r1, [sp, #48]	; 0x30
    5574:	add	r0, r0, r1, lsl #2
    5578:	ldr	r1, [sp, #52]	; 0x34
    557c:	add	r0, r0, r1
    5580:	ldr	r1, [fp, #-44]	; 0xffffffd4
    5584:	add	r7, r1, r0
    5588:	add	r0, r7, #4
    558c:	ldr	r1, [sp, #48]	; 0x30
    5590:	cmp	r1, r6
    5594:	beq	55cc <test_scan+0x1fdc>
    5598:	ldr	r1, [sp, #48]	; 0x30
    559c:	adds	r1, r1, r4
    55a0:	bcc	59ac <test_scan+0x23bc>
    55a4:	mov	r8, r0
    55a8:	ldr	r1, [r8, #-4]!
    55ac:	add	r0, r0, r1
    55b0:	mov	r1, r5
    55b4:	bl	0 <strcmp>
    55b8:	cmp	r0, #0
    55bc:	sub	r4, r4, #1
    55c0:	add	r6, r6, #1
    55c4:	mov	r0, r8
    55c8:	bne	558c <test_scan+0x1f9c>
    55cc:	movw	r5, #0
    55d0:	add	r0, r7, #4
    55d4:	mov	r6, #0
    55d8:	mvn	r4, #0
    55dc:	movt	r5, #0
    55e0:	ldr	r1, [sp, #48]	; 0x30
    55e4:	cmp	r1, r6
    55e8:	beq	5620 <test_scan+0x2030>
    55ec:	ldr	r1, [sp, #48]	; 0x30
    55f0:	adds	r1, r1, r4
    55f4:	bcc	59ac <test_scan+0x23bc>
    55f8:	mov	r8, r0
    55fc:	ldr	r1, [r8, #-4]!
    5600:	add	r0, r0, r1
    5604:	mov	r1, r5
    5608:	bl	0 <strcmp>
    560c:	cmp	r0, #0
    5610:	sub	r4, r4, #1
    5614:	add	r6, r6, #1
    5618:	mov	r0, r8
    561c:	bne	55e0 <test_scan+0x1ff0>
    5620:	ldr	r0, [sp, #48]	; 0x30
    5624:	movw	r8, #0
    5628:	add	r6, r7, #4
    562c:	mov	r4, #0
    5630:	movt	r8, #0
    5634:	sub	r0, r0, #1
    5638:	str	r0, [fp, #-48]	; 0xffffffd0
    563c:	ldr	r0, [sp, #48]	; 0x30
    5640:	adds	r0, r0, r4
    5644:	beq	56b8 <test_scan+0x20c8>
    5648:	ldr	r0, [fp, #-48]	; 0xffffffd0
    564c:	ldr	r1, [sp, #48]	; 0x30
    5650:	add	r0, r0, r4
    5654:	cmp	r1, r0
    5658:	bls	59ac <test_scan+0x23bc>
    565c:	ldr	r1, [r7, r4, lsl #2]
    5660:	add	r0, r6, r1
    5664:	add	r1, r7, r1
    5668:	ldr	r5, [r1, r4, lsl #2]
    566c:	mov	r1, r8
    5670:	cmp	r5, #4
    5674:	mov	r2, r5
    5678:	movcs	r2, #4
    567c:	bl	0 <strncmp>
    5680:	cmp	r0, #0
    5684:	mov	r1, r0
    5688:	mov	r2, #0
    568c:	sub	r4, r4, #1
    5690:	sub	r6, r6, #4
    5694:	mvneq	r1, #0
    5698:	cmp	r5, #4
    569c:	movwhi	r2, #1
    56a0:	cmp	r0, #0
    56a4:	movne	r2, r1
    56a8:	cmp	r5, #4
    56ac:	movcc	r2, r1
    56b0:	cmp	r2, #0
    56b4:	bne	563c <test_scan+0x204c>
    56b8:	ldr	r0, [sp, #48]	; 0x30
    56bc:	add	r6, r7, #4
    56c0:	mov	r8, #0
    56c4:	rsb	r4, r0, #0
    56c8:	cmp	r4, r8
    56cc:	beq	5744 <test_scan+0x2154>
    56d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
    56d4:	ldr	r1, [sp, #48]	; 0x30
    56d8:	add	r0, r0, r8
    56dc:	cmp	r1, r0
    56e0:	bls	59ac <test_scan+0x23bc>
    56e4:	ldr	r1, [r7, r8, lsl #2]
    56e8:	add	r0, r6, r1
    56ec:	add	r1, r7, r1
    56f0:	ldr	r5, [r1, r8, lsl #2]
    56f4:	movw	r1, #0
    56f8:	movt	r1, #0
    56fc:	cmp	r5, #4
    5700:	mov	r2, r5
    5704:	movcs	r2, #4
    5708:	bl	0 <strncmp>
    570c:	cmp	r0, #0
    5710:	mov	r1, r0
    5714:	mov	r2, #0
    5718:	sub	r8, r8, #1
    571c:	sub	r6, r6, #4
    5720:	mvneq	r1, #0
    5724:	cmp	r5, #4
    5728:	movwhi	r2, #1
    572c:	cmp	r0, #0
    5730:	movne	r2, r1
    5734:	cmp	r5, #4
    5738:	movcc	r2, r1
    573c:	cmp	r2, #0
    5740:	bne	56c8 <test_scan+0x20d8>
    5744:	mov	r0, #0
    5748:	cmp	sl, r0
    574c:	bls	5948 <test_scan+0x2358>
    5750:	ldr	r1, [r9, #-8]
    5754:	add	r2, r9, r1
    5758:	cmp	r2, #8
    575c:	beq	59d4 <test_scan+0x23e4>
    5760:	ldr	r2, [r2, #-8]
    5764:	sub	r2, r1, r2
    5768:	add	r2, r9, r2
    576c:	ldrh	r3, [r2, #-8]
    5770:	cmp	r3, #10
    5774:	bcc	5798 <test_scan+0x21a8>
    5778:	ldrh	r2, [r2]
    577c:	cmp	r2, #0
    5780:	beq	5798 <test_scan+0x21a8>
    5784:	add	r1, r1, r2
    5788:	add	r1, r9, r1
    578c:	ldrh	r1, [r1, #-8]
    5790:	cmp	r1, #13
    5794:	beq	57a8 <test_scan+0x21b8>
    5798:	add	r0, r0, #1
    579c:	add	r9, r9, #4
    57a0:	cmp	r0, sl
    57a4:	bcc	5748 <test_scan+0x2158>
    57a8:	ldr	r0, [sp, #44]	; 0x2c
    57ac:	mov	r1, #1
    57b0:	add	r0, r0, #8
    57b4:	cmp	sl, r1
    57b8:	bls	5948 <test_scan+0x2358>
    57bc:	ldr	r2, [r0]
    57c0:	adds	r3, r0, r2
    57c4:	beq	59d4 <test_scan+0x23e4>
    57c8:	ldr	r3, [r0, r2]
    57cc:	sub	r3, r2, r3
    57d0:	add	r3, r0, r3
    57d4:	ldrh	r7, [r3]
    57d8:	cmp	r7, #10
    57dc:	bcc	5800 <test_scan+0x2210>
    57e0:	ldrh	r3, [r3, #8]
    57e4:	cmp	r3, #0
    57e8:	beq	5800 <test_scan+0x2210>
    57ec:	add	r2, r2, r3
    57f0:	add	r2, r0, r2
    57f4:	ldrh	r2, [r2]
    57f8:	cmp	r2, #42	; 0x2a
    57fc:	beq	5810 <test_scan+0x2220>
    5800:	add	r1, r1, #1
    5804:	add	r0, r0, #4
    5808:	cmp	r1, sl
    580c:	bcc	57b4 <test_scan+0x21c4>
    5810:	ldr	r0, [fp, #-44]	; 0xffffffd4
    5814:	ldr	r1, [sp, #20]
    5818:	mvn	r2, #0
    581c:	add	r0, r0, r1
    5820:	sub	r1, sl, #1
    5824:	cmn	r1, #1
    5828:	beq	589c <test_scan+0x22ac>
    582c:	cmp	sl, r1
    5830:	bls	5948 <test_scan+0x2358>
    5834:	ldr	r7, [r0]
    5838:	adds	r3, r0, r7
    583c:	beq	59d4 <test_scan+0x23e4>
    5840:	ldr	r3, [r0, r7]
    5844:	sub	r3, r7, r3
    5848:	add	r6, r0, r3
    584c:	mov	r3, #1
    5850:	ldrh	r5, [r6]
    5854:	cmp	r5, #10
    5858:	bcc	588c <test_scan+0x229c>
    585c:	ldrh	r6, [r6, #8]
    5860:	cmp	r6, #0
    5864:	beq	588c <test_scan+0x229c>
    5868:	add	r3, r7, r6
    586c:	add	r3, r0, r3
    5870:	ldrsh	r7, [r3]
    5874:	uxth	r6, r7
    5878:	uxtah	r3, r2, r7
    587c:	cmp	r6, #1
    5880:	movwne	r3, #1
    5884:	cmp	r7, #1
    5888:	mvnlt	r3, #0
    588c:	sub	r0, r0, #4
    5890:	sub	r1, r1, #1
    5894:	cmp	r3, #0
    5898:	bne	5824 <test_scan+0x2234>
    589c:	ldr	r2, [sp, #16]
    58a0:	ldr	r0, [sp, #12]
    58a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    58a8:	mov	r5, #0
    58ac:	cmn	r2, #3
    58b0:	mvnls	r2, #2
    58b4:	sub	r0, r0, r2, lsl #2
    58b8:	add	r0, r1, r0
    58bc:	mvn	r1, #1
    58c0:	sub	r1, r1, r2
    58c4:	mvn	r2, #41	; 0x29
    58c8:	cmn	r1, #1
    58cc:	beq	59cc <test_scan+0x23dc>
    58d0:	cmp	sl, r1
    58d4:	bls	5948 <test_scan+0x2358>
    58d8:	ldr	r7, [r0]
    58dc:	cmn	r0, r7
    58e0:	beq	59d4 <test_scan+0x23e4>
    58e4:	ldr	r3, [r0, r7]
    58e8:	sub	r3, r7, r3
    58ec:	add	r6, r0, r3
    58f0:	mov	r3, #1
    58f4:	ldrh	r4, [r6]
    58f8:	cmp	r4, #10
    58fc:	bcc	5930 <test_scan+0x2340>
    5900:	ldrh	r6, [r6, #8]
    5904:	cmp	r6, #0
    5908:	beq	5930 <test_scan+0x2340>
    590c:	add	r3, r7, r6
    5910:	add	r3, r0, r3
    5914:	ldrsh	r7, [r3]
    5918:	uxth	r6, r7
    591c:	uxtah	r3, r2, r7
    5920:	cmp	r6, #42	; 0x2a
    5924:	movwne	r3, #1
    5928:	cmp	r7, #42	; 0x2a
    592c:	mvnlt	r3, #0
    5930:	ldr	r7, [fp, #-44]	; 0xffffffd4
    5934:	sub	r0, r0, #4
    5938:	sub	r1, r1, #1
    593c:	cmp	r3, #0
    5940:	bne	58c8 <test_scan+0x22d8>
    5944:	b	3bc4 <test_scan+0x5d4>
    5948:	movw	r0, #0
    594c:	movw	r1, #0
    5950:	movw	r3, #0
    5954:	movw	r2, #693	; 0x2b5
    5958:	movt	r0, #0
    595c:	movt	r1, #0
    5960:	movt	r3, #0
    5964:	bl	0 <__assert_fail>
    5968:	movw	r0, #0
    596c:	movt	r0, #0
    5970:	b	3bb8 <test_scan+0x5c8>
    5974:	movw	r0, #0
    5978:	movt	r0, #0
    597c:	b	3bb8 <test_scan+0x5c8>
    5980:	movw	r0, #0
    5984:	movw	r1, #0
    5988:	movw	r3, #0
    598c:	movw	r2, #395	; 0x18b
    5990:	movt	r0, #0
    5994:	movt	r1, #0
    5998:	movt	r3, #0
    599c:	bl	0 <__assert_fail>
    59a0:	movw	r0, #0
    59a4:	movt	r0, #0
    59a8:	b	3bb8 <test_scan+0x5c8>
    59ac:	movw	r0, #0
    59b0:	movw	r1, #0
    59b4:	movw	r3, #0
    59b8:	mov	r2, #108	; 0x6c
    59bc:	movt	r0, #0
    59c0:	movt	r1, #0
    59c4:	movt	r3, #0
    59c8:	bl	0 <__assert_fail>
    59cc:	ldr	r7, [fp, #-44]	; 0xffffffd4
    59d0:	b	3bc4 <test_scan+0x5d4>
    59d4:	movw	r0, #0
    59d8:	movw	r1, #0
    59dc:	movw	r3, #0
    59e0:	movw	r2, #697	; 0x2b9
    59e4:	movt	r0, #0
    59e8:	movt	r1, #0
    59ec:	movt	r3, #0
    59f0:	bl	0 <__assert_fail>

000059f4 <test_basic_sort>:
    59f4:	push	{r4, r5, r6, sl, fp, lr}
    59f8:	add	fp, sp, #16
    59fc:	sub	sp, sp, #24
    5a00:	mov	r4, r0
    5a04:	mov	r0, #2
    5a08:	strb	r0, [sp, #18]
    5a0c:	mov	r0, #772	; 0x304
    5a10:	strh	r0, [sp, #16]
    5a14:	movw	r0, #1798	; 0x706
    5a18:	movt	r0, #769	; 0x301
    5a1c:	str	r0, [sp, #12]
    5a20:	mov	r0, r4
    5a24:	bl	0 <flatcc_builder_reset>
    5a28:	movw	r1, #0
    5a2c:	mov	r0, r4
    5a30:	mov	r2, #0
    5a34:	mov	r3, #0
    5a38:	movt	r1, #0
    5a3c:	bl	0 <flatcc_builder_start_buffer>
    5a40:	cmp	r0, #0
    5a44:	bne	5a54 <test_basic_sort+0x60>
    5a48:	mov	r0, r4
    5a4c:	mov	r1, #36	; 0x24
    5a50:	bl	0 <flatcc_builder_start_table>
    5a54:	movw	r1, #0
    5a58:	mov	r0, r4
    5a5c:	movt	r1, #0
    5a60:	bl	0 <flatcc_builder_create_string_str>
    5a64:	cmp	r0, #0
    5a68:	beq	5a84 <test_basic_sort+0x90>
    5a6c:	mov	r5, r0
    5a70:	mov	r0, r4
    5a74:	mov	r1, #3
    5a78:	bl	0 <flatcc_builder_table_add_offset>
    5a7c:	cmp	r0, #0
    5a80:	strne	r5, [r0]
    5a84:	mvn	r0, #0
    5a88:	mov	r1, #1
    5a8c:	mov	r2, #7
    5a90:	mov	r3, #1
    5a94:	str	r1, [sp]
    5a98:	str	r0, [sp, #4]
    5a9c:	add	r1, sp, #12
    5aa0:	mov	r0, r4
    5aa4:	bl	0 <flatcc_builder_create_vector>
    5aa8:	cmp	r0, #0
    5aac:	beq	5ac8 <test_basic_sort+0xd4>
    5ab0:	mov	r5, r0
    5ab4:	mov	r0, r4
    5ab8:	mov	r1, #5
    5abc:	bl	0 <flatcc_builder_table_add_offset>
    5ac0:	cmp	r0, #0
    5ac4:	strne	r5, [r0]
    5ac8:	movw	r1, #0
    5acc:	mov	r0, r4
    5ad0:	mov	r2, #1
    5ad4:	movt	r1, #0
    5ad8:	bl	0 <flatcc_builder_check_required>
    5adc:	cmp	r0, #0
    5ae0:	beq	5dac <test_basic_sort+0x3b8>
    5ae4:	mov	r0, r4
    5ae8:	bl	0 <flatcc_builder_end_table>
    5aec:	mov	r1, r0
    5af0:	mov	r0, r4
    5af4:	bl	0 <flatcc_builder_end_buffer>
    5af8:	add	r1, sp, #20
    5afc:	mov	r0, r4
    5b00:	bl	0 <flatcc_builder_get_direct_buffer>
    5b04:	cmp	r0, #0
    5b08:	beq	5d8c <test_basic_sort+0x398>
    5b0c:	ldr	r1, [r0, #4]
    5b10:	movw	r2, #20301	; 0x4f4d
    5b14:	movt	r2, #21326	; 0x534e
    5b18:	cmp	r1, r2
    5b1c:	bne	5d8c <test_basic_sort+0x398>
    5b20:	ldr	r1, [r0]
    5b24:	ldr	r2, [r0, r1]!
    5b28:	mov	r1, r0
    5b2c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    5b30:	cmp	r2, #15
    5b34:	bls	5b50 <test_basic_sort+0x15c>
    5b38:	ldrh	r1, [r1, #14]
    5b3c:	cmp	r1, #0
    5b40:	ldrne	r1, [r0, r1]!
    5b44:	ldrne	r1, [r0, r1]!
    5b48:	cmpne	r1, #0
    5b4c:	bne	5b70 <test_basic_sort+0x17c>
    5b50:	movw	r0, #0
    5b54:	movw	r1, #0
    5b58:	movw	r3, #0
    5b5c:	mov	r2, #1552	; 0x610
    5b60:	movt	r0, #0
    5b64:	movt	r1, #0
    5b68:	movt	r3, #0
    5b6c:	bl	0 <__assert_fail>
    5b70:	add	r0, r0, #4
    5b74:	lsr	r2, r1, #1
    5b78:	sub	lr, r1, #1
    5b7c:	b	5bf0 <test_basic_sort+0x1fc>
    5b80:	lsl	r2, ip, #1
    5b84:	mov	r3, ip
    5b88:	ldr	r4, [r0, #-4]
    5b8c:	cmp	r2, lr
    5b90:	bcs	5bb4 <test_basic_sort+0x1c0>
    5b94:	cmp	r4, r2
    5b98:	orrhi	r5, r2, #1
    5b9c:	cmphi	r4, r5
    5ba0:	bls	5d48 <test_basic_sort+0x354>
    5ba4:	ldrb	r1, [r0, r5]
    5ba8:	ldrb	r6, [r0, r2]
    5bac:	cmp	r6, r1
    5bb0:	movcc	r2, r5
    5bb4:	mov	r5, r2
    5bb8:	cmp	r4, r3
    5bbc:	cmphi	r4, r5
    5bc0:	bls	5d48 <test_basic_sort+0x354>
    5bc4:	ldrb	r2, [r0, r3]
    5bc8:	ldrb	r4, [r0, r5]
    5bcc:	cmp	r2, r4
    5bd0:	bcs	5bfc <test_basic_sort+0x208>
    5bd4:	strb	r2, [r0, r5]
    5bd8:	strb	r4, [r0, r3]
    5bdc:	lsl	r2, r5, #1
    5be0:	cmp	lr, r5, lsl #1
    5be4:	mov	r3, r5
    5be8:	bcs	5b88 <test_basic_sort+0x194>
    5bec:	b	5bfc <test_basic_sort+0x208>
    5bf0:	mov	ip, r2
    5bf4:	cmp	lr, r2, lsl #1
    5bf8:	bcs	5b80 <test_basic_sort+0x18c>
    5bfc:	sub	r2, ip, #1
    5c00:	cmp	ip, #0
    5c04:	bne	5bf0 <test_basic_sort+0x1fc>
    5c08:	b	5c8c <test_basic_sort+0x298>
    5c0c:	ldrb	r2, [r0]
    5c10:	ldrb	r1, [r0, lr]
    5c14:	mov	r4, #0
    5c18:	strb	r2, [r0, lr]
    5c1c:	sub	lr, lr, #1
    5c20:	mov	r2, #0
    5c24:	strb	r1, [r0]
    5c28:	ldr	r5, [r0, #-4]
    5c2c:	cmp	r4, lr
    5c30:	bcs	5c54 <test_basic_sort+0x260>
    5c34:	cmp	r5, r4
    5c38:	orrhi	r3, r4, #1
    5c3c:	cmphi	r5, r3
    5c40:	bls	5d48 <test_basic_sort+0x354>
    5c44:	ldrb	r1, [r0, r3]
    5c48:	ldrb	r6, [r0, r4]
    5c4c:	cmp	r6, r1
    5c50:	movcc	r4, r3
    5c54:	mov	r3, r4
    5c58:	cmp	r5, r2
    5c5c:	cmphi	r5, r3
    5c60:	bls	5d48 <test_basic_sort+0x354>
    5c64:	ldrb	r5, [r0, r2]
    5c68:	ldrb	r4, [r0, r3]
    5c6c:	cmp	r5, r4
    5c70:	bcs	5c8c <test_basic_sort+0x298>
    5c74:	strb	r5, [r0, r3]
    5c78:	strb	r4, [r0, r2]
    5c7c:	lsl	r4, r3, #1
    5c80:	cmp	lr, r3, lsl #1
    5c84:	mov	r2, r3
    5c88:	bcs	5c28 <test_basic_sort+0x234>
    5c8c:	cmp	lr, #0
    5c90:	bne	5c0c <test_basic_sort+0x218>
    5c94:	ldr	r1, [r0, #-4]
    5c98:	cmp	r1, #7
    5c9c:	bne	5b50 <test_basic_sort+0x15c>
    5ca0:	movw	ip, #0
    5ca4:	mov	r3, #0
    5ca8:	mov	r2, #0
    5cac:	movt	ip, #0
    5cb0:	cmp	r3, #7
    5cb4:	bcs	5d48 <test_basic_sort+0x354>
    5cb8:	ldrb	r5, [r0, r3]
    5cbc:	ldrb	r1, [ip, r3]
    5cc0:	cmp	r5, r1
    5cc4:	bne	5d74 <test_basic_sort+0x380>
    5cc8:	mov	r3, #0
    5ccc:	mov	r4, #6
    5cd0:	sub	r1, r4, r3
    5cd4:	add	r1, r3, r1, lsr #1
    5cd8:	cmp	r1, #7
    5cdc:	bcs	5d48 <test_basic_sort+0x354>
    5ce0:	ldrb	r6, [r0, r1]
    5ce4:	cmp	r6, r5
    5ce8:	movcs	r4, r1
    5cec:	addcc	r3, r1, #1
    5cf0:	cmp	r4, r3
    5cf4:	bhi	5cd0 <test_basic_sort+0x2dc>
    5cf8:	bne	5d68 <test_basic_sort+0x374>
    5cfc:	cmp	r3, #7
    5d00:	bcs	5d48 <test_basic_sort+0x354>
    5d04:	ldrb	r1, [r0, r3]
    5d08:	cmp	r1, r5
    5d0c:	bne	5d68 <test_basic_sort+0x374>
    5d10:	uxtb	r1, r2
    5d14:	cmp	r1, #3
    5d18:	mov	r1, r2
    5d1c:	movweq	r1, #2
    5d20:	uxtb	r1, r1
    5d24:	cmp	r3, r1
    5d28:	bne	5d68 <test_basic_sort+0x374>
    5d2c:	add	r2, r2, #1
    5d30:	uxtb	r3, r2
    5d34:	cmp	r3, #6
    5d38:	bls	5cb0 <test_basic_sort+0x2bc>
    5d3c:	mov	r0, #0
    5d40:	sub	sp, fp, #16
    5d44:	pop	{r4, r5, r6, sl, fp, pc}
    5d48:	movw	r0, #0
    5d4c:	movw	r1, #0
    5d50:	movw	r3, #0
    5d54:	movw	r2, #395	; 0x18b
    5d58:	movt	r0, #0
    5d5c:	movt	r1, #0
    5d60:	movt	r3, #0
    5d64:	bl	0 <__assert_fail>
    5d68:	movw	r0, #0
    5d6c:	movt	r0, #0
    5d70:	b	5d7c <test_basic_sort+0x388>
    5d74:	movw	r0, #0
    5d78:	movt	r0, #0
    5d7c:	bl	0 <puts>
    5d80:	mvn	r0, #0
    5d84:	sub	sp, fp, #16
    5d88:	pop	{r4, r5, r6, sl, fp, pc}
    5d8c:	movw	r0, #0
    5d90:	movw	r1, #0
    5d94:	movw	r3, #0
    5d98:	movw	r2, #706	; 0x2c2
    5d9c:	movt	r0, #0
    5da0:	movt	r1, #0
    5da4:	movt	r3, #0
    5da8:	bl	0 <__assert_fail>
    5dac:	movw	r0, #0
    5db0:	movw	r1, #0
    5db4:	movw	r3, #0
    5db8:	mov	r2, #235	; 0xeb
    5dbc:	movt	r0, #0
    5dc0:	movt	r1, #0
    5dc4:	movt	r3, #0
    5dc8:	bl	0 <__assert_fail>

00005dcc <test_clone_slice>:
    5dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dd0:	add	fp, sp, #28
    5dd4:	sub	sp, sp, #36	; 0x24
    5dd8:	mov	r5, r0
    5ddc:	mov	r0, #0
    5de0:	strb	r0, [sp, #30]
    5de4:	mov	r0, #1
    5de8:	strh	r0, [sp, #28]
    5dec:	mov	r0, #256	; 0x100
    5df0:	str	r0, [sp, #24]
    5df4:	mov	r0, r5
    5df8:	bl	0 <flatcc_builder_reset>
    5dfc:	movw	r1, #0
    5e00:	mov	r0, r5
    5e04:	mov	r2, #0
    5e08:	mov	r3, #0
    5e0c:	movt	r1, #0
    5e10:	bl	0 <flatcc_builder_start_buffer>
    5e14:	cmp	r0, #0
    5e18:	bne	5e28 <test_clone_slice+0x5c>
    5e1c:	mov	r0, r5
    5e20:	mov	r1, #36	; 0x24
    5e24:	bl	0 <flatcc_builder_start_table>
    5e28:	movw	r1, #0
    5e2c:	mov	r0, r5
    5e30:	movt	r1, #0
    5e34:	bl	0 <flatcc_builder_create_string_str>
    5e38:	cmp	r0, #0
    5e3c:	beq	5e58 <test_clone_slice+0x8c>
    5e40:	mov	r4, r0
    5e44:	mov	r0, r5
    5e48:	mov	r1, #3
    5e4c:	bl	0 <flatcc_builder_table_add_offset>
    5e50:	cmp	r0, #0
    5e54:	strne	r4, [r0]
    5e58:	mvn	r0, #0
    5e5c:	mov	r1, #1
    5e60:	mov	r2, #7
    5e64:	mov	r3, #1
    5e68:	str	r1, [sp]
    5e6c:	str	r0, [sp, #4]
    5e70:	add	r1, sp, #24
    5e74:	mov	r0, r5
    5e78:	bl	0 <flatcc_builder_create_vector>
    5e7c:	cmp	r0, #0
    5e80:	beq	5e9c <test_clone_slice+0xd0>
    5e84:	mov	r4, r0
    5e88:	mov	r0, r5
    5e8c:	mov	r1, #24
    5e90:	bl	0 <flatcc_builder_table_add_offset>
    5e94:	cmp	r0, #0
    5e98:	strne	r4, [r0]
    5e9c:	mov	r0, r5
    5ea0:	mov	r1, #4
    5ea4:	mov	r2, #2
    5ea8:	mvn	r3, #-1073741824	; 0xc0000000
    5eac:	bl	0 <flatcc_builder_start_vector>
    5eb0:	mov	r0, r5
    5eb4:	mov	r1, #2
    5eb8:	bl	0 <flatcc_builder_extend_vector>
    5ebc:	mov	r1, #22
    5ec0:	strh	r1, [r0]
    5ec4:	mov	r1, #44	; 0x2c
    5ec8:	strh	r1, [r0, #4]
    5ecc:	mov	r0, r5
    5ed0:	bl	0 <flatcc_builder_end_vector>
    5ed4:	cmp	r0, #0
    5ed8:	beq	5ef4 <test_clone_slice+0x128>
    5edc:	mov	r4, r0
    5ee0:	mov	r0, r5
    5ee4:	mov	r1, #9
    5ee8:	bl	0 <flatcc_builder_table_add_offset>
    5eec:	cmp	r0, #0
    5ef0:	strne	r4, [r0]
    5ef4:	mov	r0, r5
    5ef8:	mov	r1, #0
    5efc:	mov	r2, #32
    5f00:	mov	r3, #16
    5f04:	mov	r8, #0
    5f08:	bl	0 <flatcc_builder_table_add>
    5f0c:	movw	r1, #13107	; 0x3333
    5f10:	mov	r2, #1
    5f14:	movt	r1, #49705	; 0xc229
    5f18:	str	r1, [r0]
    5f1c:	movw	r1, #0
    5f20:	mov	r0, r5
    5f24:	movt	r1, #0
    5f28:	bl	0 <flatcc_builder_check_required>
    5f2c:	cmp	r0, #0
    5f30:	beq	677c <test_clone_slice+0x9b0>
    5f34:	mov	r0, r5
    5f38:	bl	0 <flatcc_builder_end_table>
    5f3c:	mov	r1, r0
    5f40:	mov	r0, r5
    5f44:	bl	0 <flatcc_builder_end_buffer>
    5f48:	add	r1, sp, #32
    5f4c:	mov	r0, r5
    5f50:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    5f54:	mov	r4, r0
    5f58:	movw	r0, #0
    5f5c:	ldr	r2, [sp, #32]
    5f60:	movt	r0, #0
    5f64:	mov	r1, r4
    5f68:	ldr	r3, [r0]
    5f6c:	movw	r0, #0
    5f70:	movt	r0, #0
    5f74:	bl	5d4 <hexdump>
    5f78:	movw	r1, #20301	; 0x4f4d
    5f7c:	cmp	r4, #0
    5f80:	movt	r1, #21326	; 0x534e
    5f84:	beq	5f98 <test_clone_slice+0x1cc>
    5f88:	ldr	r0, [r4, #4]
    5f8c:	cmp	r0, r1
    5f90:	ldreq	r0, [r4]
    5f94:	addeq	r8, r4, r0
    5f98:	mov	r0, r5
    5f9c:	bl	0 <flatcc_builder_reset>
    5fa0:	movw	r1, #0
    5fa4:	mov	r0, r5
    5fa8:	mov	r2, #0
    5fac:	mov	r3, #0
    5fb0:	movt	r1, #0
    5fb4:	bl	0 <flatcc_builder_start_buffer>
    5fb8:	cmp	r0, #0
    5fbc:	bne	5fcc <test_clone_slice+0x200>
    5fc0:	mov	r0, r5
    5fc4:	mov	r1, #36	; 0x24
    5fc8:	bl	0 <flatcc_builder_start_table>
    5fcc:	cmp	r8, #0
    5fd0:	beq	679c <test_clone_slice+0x9d0>
    5fd4:	ldr	r1, [r8]
    5fd8:	mov	r0, r8
    5fdc:	ldrh	r2, [r0, -r1]!
    5fe0:	cmp	r2, #12
    5fe4:	bcc	6770 <test_clone_slice+0x9a4>
    5fe8:	ldrh	r1, [r0, #10]
    5fec:	cmp	r1, #0
    5ff0:	beq	6770 <test_clone_slice+0x9a4>
    5ff4:	cmp	r2, #54	; 0x36
    5ff8:	bcc	67bc <test_clone_slice+0x9f0>
    5ffc:	ldrh	r2, [r0, #52]	; 0x34
    6000:	cmp	r2, #0
    6004:	beq	67bc <test_clone_slice+0x9f0>
    6008:	ldrh	r0, [r0, #22]
    600c:	str	r4, [sp, #20]
    6010:	cmp	r0, #0
    6014:	beq	67dc <test_clone_slice+0xa10>
    6018:	mov	r3, r8
    601c:	mov	sl, r8
    6020:	str	r8, [sp, #16]
    6024:	ldr	r0, [r8, r0]!
    6028:	ldr	r1, [r3, r1]!
    602c:	ldr	r9, [sl, r2]!
    6030:	str	r0, [sp, #12]
    6034:	mov	r0, r5
    6038:	add	r1, r3, r1
    603c:	add	r6, r1, #4
    6040:	ldr	r2, [r6, #-4]
    6044:	mov	r1, r6
    6048:	bl	0 <flatcc_builder_create_string>
    604c:	cmp	r0, #0
    6050:	beq	606c <test_clone_slice+0x2a0>
    6054:	mov	r4, r0
    6058:	mov	r0, r5
    605c:	mov	r1, #3
    6060:	bl	0 <flatcc_builder_table_add_offset>
    6064:	cmp	r0, #0
    6068:	strne	r4, [r0]
    606c:	mov	r0, r5
    6070:	bl	0 <flatcc_builder_start_offset_vector>
    6074:	ldr	r2, [r6, #-4]
    6078:	mov	r0, r5
    607c:	mov	r1, r6
    6080:	bl	0 <flatcc_builder_create_string>
    6084:	cmp	r0, #0
    6088:	beq	6098 <test_clone_slice+0x2cc>
    608c:	mov	r1, r0
    6090:	mov	r0, r5
    6094:	bl	0 <flatcc_builder_offset_vector_push>
    6098:	ldr	r0, [r6, #-4]
    609c:	cmp	r0, #4
    60a0:	mov	r2, r0
    60a4:	movcs	r2, #4
    60a8:	add	r1, r6, r2
    60ac:	sub	r2, r0, r2
    60b0:	mov	r0, r5
    60b4:	cmp	r2, #20
    60b8:	movcs	r2, #20
    60bc:	bl	0 <flatcc_builder_create_string>
    60c0:	cmp	r0, #0
    60c4:	beq	60d4 <test_clone_slice+0x308>
    60c8:	mov	r1, r0
    60cc:	mov	r0, r5
    60d0:	bl	0 <flatcc_builder_offset_vector_push>
    60d4:	ldr	r2, [r6, #-4]
    60d8:	mov	r0, r5
    60dc:	mov	r1, r6
    60e0:	cmp	r2, #3
    60e4:	movcs	r2, #3
    60e8:	bl	0 <flatcc_builder_create_string>
    60ec:	cmp	r0, #0
    60f0:	beq	6100 <test_clone_slice+0x334>
    60f4:	mov	r1, r0
    60f8:	mov	r0, r5
    60fc:	bl	0 <flatcc_builder_offset_vector_push>
    6100:	mov	r0, r5
    6104:	add	r7, sl, r9
    6108:	bl	0 <flatcc_builder_end_offset_vector>
    610c:	cmp	r0, #0
    6110:	beq	612c <test_clone_slice+0x360>
    6114:	mov	r4, r0
    6118:	mov	r0, r5
    611c:	mov	r1, #10
    6120:	bl	0 <flatcc_builder_table_add_offset>
    6124:	cmp	r0, #0
    6128:	strne	r4, [r0]
    612c:	ldr	r0, [sp, #12]
    6130:	mov	r1, #36	; 0x24
    6134:	add	sl, r7, #4
    6138:	add	r8, r8, r0
    613c:	mov	r0, r5
    6140:	bl	0 <flatcc_builder_start_table>
    6144:	ldr	r0, [r6, #-4]
    6148:	cmp	r0, #2
    614c:	mov	r2, r0
    6150:	movcs	r2, #2
    6154:	add	r1, r6, r2
    6158:	sub	r2, r0, r2
    615c:	mov	r0, r5
    6160:	cmp	r2, #20
    6164:	movcs	r2, #20
    6168:	bl	0 <flatcc_builder_create_string>
    616c:	cmp	r0, #0
    6170:	beq	618c <test_clone_slice+0x3c0>
    6174:	mov	r4, r0
    6178:	mov	r0, r5
    617c:	mov	r1, #3
    6180:	bl	0 <flatcc_builder_table_add_offset>
    6184:	cmp	r0, #0
    6188:	strne	r4, [r0]
    618c:	ldr	r2, [sl, #-4]
    6190:	mvn	r0, #0
    6194:	mov	r1, #1
    6198:	mov	r3, #1
    619c:	add	r9, r8, #4
    61a0:	str	r1, [sp]
    61a4:	str	r0, [sp, #4]
    61a8:	mov	r0, r5
    61ac:	mov	r1, sl
    61b0:	bl	0 <flatcc_builder_create_vector>
    61b4:	cmp	r0, #0
    61b8:	beq	61d4 <test_clone_slice+0x408>
    61bc:	mov	r4, r0
    61c0:	mov	r0, r5
    61c4:	mov	r1, #24
    61c8:	bl	0 <flatcc_builder_table_add_offset>
    61cc:	cmp	r0, #0
    61d0:	strne	r4, [r0]
    61d4:	ldr	r0, [r9, #-4]
    61d8:	mvn	r1, #-1073741824	; 0xc0000000
    61dc:	mov	r2, #2
    61e0:	str	r2, [sp]
    61e4:	str	r1, [sp, #4]
    61e8:	cmp	r0, #0
    61ec:	mov	r3, r0
    61f0:	movwne	r3, #1
    61f4:	sub	r0, r0, r3
    61f8:	add	r1, r9, r3, lsl #2
    61fc:	mov	r3, #4
    6200:	cmp	r0, #2
    6204:	movcc	r2, r0
    6208:	mov	r0, r5
    620c:	bl	0 <flatcc_builder_create_vector>
    6210:	ldr	r7, [sp, #16]
    6214:	cmp	r0, #0
    6218:	beq	6234 <test_clone_slice+0x468>
    621c:	mov	r4, r0
    6220:	mov	r0, r5
    6224:	mov	r1, #9
    6228:	bl	0 <flatcc_builder_table_add_offset>
    622c:	cmp	r0, #0
    6230:	strne	r4, [r0]
    6234:	movw	r1, #0
    6238:	mov	r0, r5
    623c:	mov	r2, #1
    6240:	movt	r1, #0
    6244:	bl	0 <flatcc_builder_check_required>
    6248:	cmp	r0, #0
    624c:	beq	677c <test_clone_slice+0x9b0>
    6250:	mov	r0, r5
    6254:	bl	0 <flatcc_builder_end_table>
    6258:	cmp	r0, #0
    625c:	beq	62a0 <test_clone_slice+0x4d4>
    6260:	mov	r4, r0
    6264:	mov	r0, r5
    6268:	mov	r1, #7
    626c:	mov	r2, #1
    6270:	mov	r3, #1
    6274:	bl	0 <flatcc_builder_table_add>
    6278:	cmp	r0, #0
    627c:	beq	62a0 <test_clone_slice+0x4d4>
    6280:	mov	r6, r0
    6284:	mov	r0, r5
    6288:	mov	r1, #8
    628c:	bl	0 <flatcc_builder_table_add_offset>
    6290:	cmp	r0, #0
    6294:	movne	r1, #1
    6298:	strbne	r1, [r6]
    629c:	strne	r4, [r0]
    62a0:	ldr	r0, [sl, #-4]
    62a4:	mov	r2, #1
    62a8:	mvn	r1, #0
    62ac:	mov	r3, #1
    62b0:	str	r2, [sp]
    62b4:	str	r1, [sp, #4]
    62b8:	cmp	r0, #3
    62bc:	mov	r2, r0
    62c0:	movcs	r2, #3
    62c4:	add	r1, sl, r2
    62c8:	sub	r2, r0, r2
    62cc:	mov	r0, r5
    62d0:	bl	0 <flatcc_builder_create_vector>
    62d4:	cmp	r0, #0
    62d8:	beq	62f4 <test_clone_slice+0x528>
    62dc:	mov	r4, r0
    62e0:	mov	r0, r5
    62e4:	mov	r1, #24
    62e8:	bl	0 <flatcc_builder_table_add_offset>
    62ec:	cmp	r0, #0
    62f0:	strne	r4, [r0]
    62f4:	ldr	r1, [r7]
    62f8:	mov	r0, r7
    62fc:	movw	r6, #20301	; 0x4f4d
    6300:	movt	r6, #21326	; 0x534e
    6304:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    6308:	cmp	r1, #6
    630c:	bcc	6324 <test_clone_slice+0x558>
    6310:	ldrh	r0, [r0, #4]
    6314:	cmp	r0, #0
    6318:	beq	6324 <test_clone_slice+0x558>
    631c:	add	r2, r7, r0
    6320:	b	6328 <test_clone_slice+0x55c>
    6324:	mov	r2, #0
    6328:	mov	r0, #16
    632c:	mov	r1, #0
    6330:	mov	r3, #32
    6334:	str	r0, [sp]
    6338:	mov	r0, r5
    633c:	bl	0 <flatcc_builder_table_add_copy>
    6340:	ldr	r2, [r9, #-4]
    6344:	mvn	r0, #-1073741824	; 0xc0000000
    6348:	mov	r1, #2
    634c:	mov	r3, #4
    6350:	str	r1, [sp]
    6354:	str	r0, [sp, #4]
    6358:	mov	r0, r5
    635c:	mov	r1, r9
    6360:	bl	0 <flatcc_builder_create_vector>
    6364:	cmp	r0, #0
    6368:	beq	6384 <test_clone_slice+0x5b8>
    636c:	mov	r4, r0
    6370:	mov	r0, r5
    6374:	mov	r1, #9
    6378:	bl	0 <flatcc_builder_table_add_offset>
    637c:	cmp	r0, #0
    6380:	strne	r4, [r0]
    6384:	movw	r1, #0
    6388:	mov	r0, r5
    638c:	mov	r2, #1
    6390:	movt	r1, #0
    6394:	bl	0 <flatcc_builder_check_required>
    6398:	cmp	r0, #0
    639c:	beq	677c <test_clone_slice+0x9b0>
    63a0:	mov	r0, r5
    63a4:	bl	0 <flatcc_builder_end_table>
    63a8:	mov	r1, r0
    63ac:	mov	r0, r5
    63b0:	bl	0 <flatcc_builder_end_buffer>
    63b4:	add	r1, sp, #32
    63b8:	mov	r0, r5
    63bc:	bl	0 <flatcc_builder_get_direct_buffer>
    63c0:	mov	r5, r0
    63c4:	movw	r0, #0
    63c8:	ldr	r2, [sp, #32]
    63cc:	movt	r0, #0
    63d0:	mov	r1, r5
    63d4:	ldr	r3, [r0]
    63d8:	movw	r0, #0
    63dc:	movt	r0, #0
    63e0:	bl	5d4 <hexdump>
    63e4:	cmp	r5, #0
    63e8:	beq	679c <test_clone_slice+0x9d0>
    63ec:	ldr	r0, [r5, #4]
    63f0:	cmp	r0, r6
    63f4:	bne	679c <test_clone_slice+0x9d0>
    63f8:	ldr	r0, [r5]
    63fc:	ldr	r0, [r5, r0]!
    6400:	mov	r4, r5
    6404:	ldrh	r8, [r4, -r0]!
    6408:	cmp	r8, #11
    640c:	bls	6770 <test_clone_slice+0x9a4>
    6410:	ldrh	r0, [r4, #10]
    6414:	cmp	r0, #0
    6418:	beq	6770 <test_clone_slice+0x9a4>
    641c:	mov	r1, r5
    6420:	ldr	r0, [r1, r0]!
    6424:	add	r0, r1, r0
    6428:	movw	r1, #0
    642c:	add	r0, r0, #4
    6430:	movt	r1, #0
    6434:	bl	0 <strcmp>
    6438:	cmp	r0, #0
    643c:	beq	6464 <test_clone_slice+0x698>
    6440:	movw	r0, #0
    6444:	movt	r0, #0
    6448:	bl	0 <puts>
    644c:	mvn	r5, #0
    6450:	ldr	r0, [sp, #20]
    6454:	bl	0 <flatcc_builder_aligned_free>
    6458:	mov	r0, r5
    645c:	sub	sp, fp, #28
    6460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6464:	cmp	r8, #26
    6468:	bcc	6488 <test_clone_slice+0x6bc>
    646c:	ldrh	r1, [r4, #24]
    6470:	cmp	r1, #0
    6474:	movne	r0, r5
    6478:	ldrne	r1, [r0, r1]!
    647c:	ldrne	r6, [r0, r1]!
    6480:	cmpne	r6, #0
    6484:	bne	64a8 <test_clone_slice+0x6dc>
    6488:	movw	r0, #0
    648c:	movw	r1, #0
    6490:	movw	r3, #0
    6494:	mov	r2, #108	; 0x6c
    6498:	movt	r0, #0
    649c:	movt	r1, #0
    64a0:	movt	r3, #0
    64a4:	bl	0 <__assert_fail>
    64a8:	add	r7, r0, #4
    64ac:	movw	r1, #0
    64b0:	ldr	r0, [r7]
    64b4:	movt	r1, #0
    64b8:	add	r0, r7, r0
    64bc:	add	r0, r0, #4
    64c0:	bl	0 <strcmp>
    64c4:	cmp	r0, #0
    64c8:	beq	64d8 <test_clone_slice+0x70c>
    64cc:	movw	r0, #0
    64d0:	movt	r0, #0
    64d4:	b	6448 <test_clone_slice+0x67c>
    64d8:	cmp	r6, #1
    64dc:	bls	6488 <test_clone_slice+0x6bc>
    64e0:	mov	r0, r7
    64e4:	ldr	r1, [r0, #4]!
    64e8:	ldr	r1, [r0, r1]!
    64ec:	cmp	r1, #6
    64f0:	bne	6518 <test_clone_slice+0x74c>
    64f4:	movw	r1, #0
    64f8:	add	r0, r0, #4
    64fc:	movt	r1, #0
    6500:	bl	0 <strcmp>
    6504:	cmp	r0, #0
    6508:	beq	6524 <test_clone_slice+0x758>
    650c:	movw	r0, #0
    6510:	movt	r0, #0
    6514:	b	6448 <test_clone_slice+0x67c>
    6518:	movw	r0, #0
    651c:	movt	r0, #0
    6520:	b	6448 <test_clone_slice+0x67c>
    6524:	cmp	r6, #2
    6528:	bls	6488 <test_clone_slice+0x6bc>
    652c:	ldr	r0, [r7, #8]!
    6530:	ldr	r0, [r7, r0]!
    6534:	cmp	r0, #3
    6538:	bne	6560 <test_clone_slice+0x794>
    653c:	movw	r1, #0
    6540:	add	r0, r7, #4
    6544:	movt	r1, #0
    6548:	bl	0 <strcmp>
    654c:	cmp	r0, #0
    6550:	beq	656c <test_clone_slice+0x7a0>
    6554:	movw	r0, #0
    6558:	movt	r0, #0
    655c:	b	6448 <test_clone_slice+0x67c>
    6560:	movw	r0, #0
    6564:	movt	r0, #0
    6568:	b	6448 <test_clone_slice+0x67c>
    656c:	ldrh	r0, [r4, #20]
    6570:	cmp	r0, #0
    6574:	movne	r1, r5
    6578:	ldrne	r0, [r1, r0]!
    657c:	addsne	r9, r1, r0
    6580:	bne	65a4 <test_clone_slice+0x7d8>
    6584:	movw	r0, #0
    6588:	movw	r1, #0
    658c:	movw	r3, #0
    6590:	mov	r2, #1664	; 0x680
    6594:	movt	r0, #0
    6598:	movt	r1, #0
    659c:	movt	r3, #0
    65a0:	bl	0 <__assert_fail>
    65a4:	ldr	r0, [r9]
    65a8:	mov	r7, r9
    65ac:	ldrh	r6, [r7, -r0]!
    65b0:	cmp	r6, #12
    65b4:	bcc	6770 <test_clone_slice+0x9a4>
    65b8:	ldrh	r0, [r7, #10]
    65bc:	cmp	r0, #0
    65c0:	beq	6770 <test_clone_slice+0x9a4>
    65c4:	mov	r1, r9
    65c8:	ldr	r0, [r1, r0]!
    65cc:	add	r0, r1, r0
    65d0:	movw	r1, #0
    65d4:	add	r0, r0, #4
    65d8:	movt	r1, #0
    65dc:	bl	0 <strcmp>
    65e0:	cmp	r0, #0
    65e4:	beq	65f8 <test_clone_slice+0x82c>
    65e8:	movw	r0, #0
    65ec:	movt	r0, #0
    65f0:	bl	0 <printf>
    65f4:	b	644c <test_clone_slice+0x680>
    65f8:	cmp	r6, #54	; 0x36
    65fc:	bcc	6644 <test_clone_slice+0x878>
    6600:	ldrh	r1, [r7, #52]	; 0x34
    6604:	cmp	r1, #0
    6608:	beq	6644 <test_clone_slice+0x878>
    660c:	mov	r0, r9
    6610:	ldr	r1, [r0, r1]!
    6614:	ldr	r1, [r0, r1]!
    6618:	cmp	r1, #7
    661c:	bne	6644 <test_clone_slice+0x878>
    6620:	add	r0, r0, #4
    6624:	add	r1, sp, #24
    6628:	mov	r2, #7
    662c:	bl	0 <memcmp>
    6630:	cmp	r0, #0
    6634:	beq	6650 <test_clone_slice+0x884>
    6638:	movw	r0, #0
    663c:	movt	r0, #0
    6640:	b	6448 <test_clone_slice+0x67c>
    6644:	movw	r0, #0
    6648:	movt	r0, #0
    664c:	b	6448 <test_clone_slice+0x67c>
    6650:	cmp	r8, #54	; 0x36
    6654:	bcc	6698 <test_clone_slice+0x8cc>
    6658:	ldrh	r1, [r4, #52]	; 0x34
    665c:	cmp	r1, #0
    6660:	beq	6698 <test_clone_slice+0x8cc>
    6664:	mov	r0, r5
    6668:	ldr	r1, [r0, r1]!
    666c:	ldr	r1, [r0, r1]!
    6670:	cmp	r1, #4
    6674:	bne	6698 <test_clone_slice+0x8cc>
    6678:	add	r0, r0, #4
    667c:	ldr	r1, [sp, #27]
    6680:	ldr	r0, [r0]
    6684:	cmp	r0, r1
    6688:	beq	66a4 <test_clone_slice+0x8d8>
    668c:	movw	r0, #0
    6690:	movt	r0, #0
    6694:	b	6448 <test_clone_slice+0x67c>
    6698:	movw	r0, #0
    669c:	movt	r0, #0
    66a0:	b	6448 <test_clone_slice+0x67c>
    66a4:	ldrh	r0, [r4, #4]
    66a8:	vldr	s0, [pc, #332]	; 67fc <test_clone_slice+0xa30>
    66ac:	add	r0, r5, r0
    66b0:	vldr	s2, [r0]
    66b4:	vcmp.f32	s2, s0
    66b8:	vmrs	APSR_nzcv, fpscr
    66bc:	beq	66cc <test_clone_slice+0x900>
    66c0:	movw	r0, #0
    66c4:	movt	r0, #0
    66c8:	b	6448 <test_clone_slice+0x67c>
    66cc:	ldrh	r0, [r4, #22]
    66d0:	cmp	r0, #0
    66d4:	beq	6740 <test_clone_slice+0x974>
    66d8:	ldr	r0, [r5, r0]!
    66dc:	ldr	r0, [r5, r0]!
    66e0:	cmp	r0, #2
    66e4:	bne	6740 <test_clone_slice+0x974>
    66e8:	add	r0, r5, #4
    66ec:	ldrh	r1, [r0]
    66f0:	cmp	r1, #22
    66f4:	bne	674c <test_clone_slice+0x980>
    66f8:	ldrh	r0, [r0, #4]
    66fc:	cmp	r0, #44	; 0x2c
    6700:	bne	6758 <test_clone_slice+0x98c>
    6704:	ldrh	r0, [r7, #22]
    6708:	cmp	r0, #0
    670c:	beq	6764 <test_clone_slice+0x998>
    6710:	ldr	r0, [r9, r0]!
    6714:	ldr	r0, [r9, r0]!
    6718:	cmp	r0, #1
    671c:	bne	6764 <test_clone_slice+0x998>
    6720:	add	r0, r9, #4
    6724:	mov	r5, #0
    6728:	ldrh	r0, [r0]
    672c:	cmp	r0, #44	; 0x2c
    6730:	beq	6450 <test_clone_slice+0x684>
    6734:	movw	r0, #0
    6738:	movt	r0, #0
    673c:	b	6448 <test_clone_slice+0x67c>
    6740:	movw	r0, #0
    6744:	movt	r0, #0
    6748:	b	6448 <test_clone_slice+0x67c>
    674c:	movw	r0, #0
    6750:	movt	r0, #0
    6754:	b	6448 <test_clone_slice+0x67c>
    6758:	movw	r0, #0
    675c:	movt	r0, #0
    6760:	b	6448 <test_clone_slice+0x67c>
    6764:	movw	r0, #0
    6768:	movt	r0, #0
    676c:	b	6448 <test_clone_slice+0x67c>
    6770:	movw	r0, #0
    6774:	movt	r0, #0
    6778:	b	67a4 <test_clone_slice+0x9d8>
    677c:	movw	r0, #0
    6780:	movw	r1, #0
    6784:	movw	r3, #0
    6788:	mov	r2, #235	; 0xeb
    678c:	movt	r0, #0
    6790:	movt	r1, #0
    6794:	movt	r3, #0
    6798:	bl	0 <__assert_fail>
    679c:	movw	r0, #0
    67a0:	movt	r0, #0
    67a4:	movw	r1, #0
    67a8:	movw	r3, #0
    67ac:	movw	r2, #699	; 0x2bb
    67b0:	movt	r1, #0
    67b4:	movt	r3, #0
    67b8:	bl	0 <__assert_fail>
    67bc:	movw	r0, #0
    67c0:	movw	r1, #0
    67c4:	movw	r3, #0
    67c8:	movw	r2, #1606	; 0x646
    67cc:	movt	r0, #0
    67d0:	movt	r1, #0
    67d4:	movt	r3, #0
    67d8:	bl	0 <__assert_fail>
    67dc:	movw	r0, #0
    67e0:	movw	r1, #0
    67e4:	movw	r3, #0
    67e8:	movw	r2, #1608	; 0x648
    67ec:	movt	r0, #0
    67f0:	movt	r1, #0
    67f4:	movt	r3, #0
    67f8:	bl	0 <__assert_fail>
    67fc:	.word	0xc2293333

00006800 <test_create_add_field>:
    6800:	push	{r4, r5, fp, lr}
    6804:	add	fp, sp, #8
    6808:	sub	sp, sp, #8
    680c:	mov	r4, r0
    6810:	bl	0 <flatcc_builder_reset>
    6814:	movw	r1, #0
    6818:	mov	r0, r4
    681c:	mov	r2, #0
    6820:	mov	r3, #0
    6824:	movt	r1, #0
    6828:	bl	0 <flatcc_builder_start_buffer>
    682c:	cmp	r0, #0
    6830:	bne	6840 <test_create_add_field+0x40>
    6834:	mov	r0, r4
    6838:	mov	r1, #36	; 0x24
    683c:	bl	0 <flatcc_builder_start_table>
    6840:	movw	r1, #0
    6844:	mov	r0, r4
    6848:	movt	r1, #0
    684c:	bl	0 <flatcc_builder_create_string_str>
    6850:	cmp	r0, #0
    6854:	beq	6870 <test_create_add_field+0x70>
    6858:	mov	r5, r0
    685c:	mov	r0, r4
    6860:	mov	r1, #3
    6864:	bl	0 <flatcc_builder_table_add_offset>
    6868:	cmp	r0, #0
    686c:	strne	r5, [r0]
    6870:	movw	r1, #0
    6874:	mov	r0, r4
    6878:	movt	r1, #0
    687c:	bl	0 <flatcc_builder_create_string_str>
    6880:	mov	r5, r0
    6884:	mov	r0, r4
    6888:	mov	r1, #3
    688c:	bl	0 <flatcc_builder_start_table>
    6890:	cmp	r0, #0
    6894:	beq	6928 <test_create_add_field+0x128>
    6898:	movw	r1, #0
    689c:	mov	r0, r4
    68a0:	mov	r2, #1
    68a4:	movt	r1, #0
    68a8:	bl	0 <flatcc_builder_check_required>
    68ac:	cmp	r0, #0
    68b0:	beq	6aa0 <test_create_add_field+0x2a0>
    68b4:	mov	r0, r4
    68b8:	bl	0 <flatcc_builder_end_table>
    68bc:	mov	r1, r0
    68c0:	mov	r0, r4
    68c4:	bl	0 <flatcc_builder_end_buffer>
    68c8:	add	r1, sp, #4
    68cc:	mov	r0, r4
    68d0:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    68d4:	cmp	r0, #0
    68d8:	beq	6a80 <test_create_add_field+0x280>
    68dc:	mov	r4, r0
    68e0:	ldr	r0, [r0, #4]
    68e4:	movw	r1, #20301	; 0x4f4d
    68e8:	movt	r1, #21326	; 0x534e
    68ec:	cmp	r0, r1
    68f0:	bne	6a80 <test_create_add_field+0x280>
    68f4:	ldr	r1, [r4]
    68f8:	mov	r0, r4
    68fc:	ldr	r2, [r0, r1]!
    6900:	mov	r1, r0
    6904:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    6908:	cmp	r2, #29
    690c:	bls	69fc <test_create_add_field+0x1fc>
    6910:	ldrh	r3, [r1, #28]
    6914:	cmp	r3, #0
    6918:	beq	69e0 <test_create_add_field+0x1e0>
    691c:	movw	r0, #0
    6920:	movt	r0, #0
    6924:	b	6a64 <test_create_add_field+0x264>
    6928:	mov	r0, r4
    692c:	mov	r1, #1
    6930:	mov	r2, #8
    6934:	mov	r3, #8
    6938:	bl	0 <flatcc_builder_table_add>
    693c:	cmp	r0, #0
    6940:	beq	6898 <test_create_add_field+0x98>
    6944:	mvn	r2, #99	; 0x63
    6948:	cmp	r5, #0
    694c:	mvn	r1, #0
    6950:	str	r2, [r0]
    6954:	str	r1, [r0, #4]
    6958:	beq	6898 <test_create_add_field+0x98>
    695c:	mov	r0, r4
    6960:	mov	r1, #0
    6964:	bl	0 <flatcc_builder_table_add_offset>
    6968:	cmp	r0, #0
    696c:	beq	6898 <test_create_add_field+0x98>
    6970:	str	r5, [r0]
    6974:	mov	r0, r4
    6978:	mov	r1, #2
    697c:	mov	r2, #2
    6980:	mov	r3, #2
    6984:	mov	r5, #2
    6988:	bl	0 <flatcc_builder_table_add>
    698c:	cmp	r0, #0
    6990:	beq	6898 <test_create_add_field+0x98>
    6994:	movw	r1, #0
    6998:	strh	r5, [r0]
    699c:	mov	r0, r4
    69a0:	mov	r2, #0
    69a4:	movt	r1, #0
    69a8:	bl	0 <flatcc_builder_check_required>
    69ac:	cmp	r0, #0
    69b0:	beq	6ac0 <test_create_add_field+0x2c0>
    69b4:	mov	r0, r4
    69b8:	bl	0 <flatcc_builder_end_table>
    69bc:	cmp	r0, #0
    69c0:	beq	6898 <test_create_add_field+0x98>
    69c4:	mov	r5, r0
    69c8:	mov	r0, r4
    69cc:	mov	r1, #14
    69d0:	bl	0 <flatcc_builder_table_add_offset>
    69d4:	cmp	r0, #0
    69d8:	strne	r5, [r0]
    69dc:	b	6898 <test_create_add_field+0x98>
    69e0:	cmp	r2, #34	; 0x22
    69e4:	bcc	69fc <test_create_add_field+0x1fc>
    69e8:	ldrh	r1, [r1, #32]
    69ec:	cmp	r1, #0
    69f0:	ldrne	r1, [r0, r1]!
    69f4:	addsne	r0, r0, r1
    69f8:	bne	6a1c <test_create_add_field+0x21c>
    69fc:	movw	r0, #0
    6a00:	movw	r1, #0
    6a04:	movw	r3, #0
    6a08:	mov	r2, #608	; 0x260
    6a0c:	movt	r0, #0
    6a10:	movt	r1, #0
    6a14:	movt	r3, #0
    6a18:	bl	0 <__assert_fail>
    6a1c:	ldr	r2, [r0]
    6a20:	mov	r1, r0
    6a24:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    6a28:	cmp	r2, #8
    6a2c:	bcc	6a5c <test_create_add_field+0x25c>
    6a30:	ldrh	r1, [r1, #6]
    6a34:	cmp	r1, #0
    6a38:	beq	6a5c <test_create_add_field+0x25c>
    6a3c:	ldr	r1, [r0, r1]!
    6a40:	mvn	r2, #99	; 0x63
    6a44:	mov	r5, #0
    6a48:	ldr	r0, [r0, #4]
    6a4c:	eor	r1, r1, r2
    6a50:	mvn	r0, r0
    6a54:	orrs	r0, r1, r0
    6a58:	beq	6a6c <test_create_add_field+0x26c>
    6a5c:	movw	r0, #0
    6a60:	movt	r0, #0
    6a64:	bl	0 <puts>
    6a68:	mvn	r5, #0
    6a6c:	mov	r0, r4
    6a70:	bl	0 <flatcc_builder_aligned_free>
    6a74:	mov	r0, r5
    6a78:	sub	sp, fp, #8
    6a7c:	pop	{r4, r5, fp, pc}
    6a80:	movw	r0, #0
    6a84:	movw	r1, #0
    6a88:	movw	r3, #0
    6a8c:	mov	r2, #716	; 0x2cc
    6a90:	movt	r0, #0
    6a94:	movt	r1, #0
    6a98:	movt	r3, #0
    6a9c:	bl	0 <__assert_fail>
    6aa0:	movw	r0, #0
    6aa4:	movw	r1, #0
    6aa8:	movw	r3, #0
    6aac:	mov	r2, #235	; 0xeb
    6ab0:	movt	r0, #0
    6ab4:	movt	r1, #0
    6ab8:	movt	r3, #0
    6abc:	bl	0 <__assert_fail>
    6ac0:	movw	r0, #0
    6ac4:	movw	r1, #0
    6ac8:	movw	r3, #0
    6acc:	mov	r2, #221	; 0xdd
    6ad0:	movt	r0, #0
    6ad4:	movt	r1, #0
    6ad8:	movt	r3, #0
    6adc:	bl	0 <__assert_fail>

00006ae0 <test_union_vector>:
    6ae0:	push	{r4, r5, r6, sl, fp, lr}
    6ae4:	add	fp, sp, #16
    6ae8:	sub	sp, sp, #16
    6aec:	mov	r4, r0
    6af0:	bl	0 <flatcc_builder_reset>
    6af4:	movw	r1, #0
    6af8:	mov	r0, r4
    6afc:	mov	r2, #0
    6b00:	mov	r3, #0
    6b04:	movt	r1, #0
    6b08:	bl	0 <flatcc_builder_start_buffer>
    6b0c:	cmp	r0, #0
    6b10:	bne	6b20 <test_union_vector+0x40>
    6b14:	mov	r0, r4
    6b18:	mov	r1, #36	; 0x24
    6b1c:	bl	0 <flatcc_builder_start_table>
    6b20:	movw	r1, #0
    6b24:	mov	r0, r4
    6b28:	movt	r1, #0
    6b2c:	bl	0 <flatcc_builder_create_string_str>
    6b30:	cmp	r0, #0
    6b34:	beq	6b50 <test_union_vector+0x70>
    6b38:	mov	r5, r0
    6b3c:	mov	r0, r4
    6b40:	mov	r1, #3
    6b44:	bl	0 <flatcc_builder_table_add_offset>
    6b48:	cmp	r0, #0
    6b4c:	strne	r5, [r0]
    6b50:	mov	r0, r4
    6b54:	mov	r1, #4
    6b58:	bl	0 <flatcc_builder_start_table>
    6b5c:	mov	r5, #0
    6b60:	cmp	r0, #0
    6b64:	bne	6b90 <test_union_vector+0xb0>
    6b68:	movw	r1, #0
    6b6c:	mov	r0, r4
    6b70:	mov	r2, #0
    6b74:	movt	r1, #0
    6b78:	bl	0 <flatcc_builder_check_required>
    6b7c:	cmp	r0, #0
    6b80:	beq	6ffc <test_union_vector+0x51c>
    6b84:	mov	r0, r4
    6b88:	bl	0 <flatcc_builder_end_table>
    6b8c:	mov	r5, r0
    6b90:	mov	r0, r4
    6b94:	bl	0 <flatcc_builder_start_union_vector>
    6b98:	mov	r0, r4
    6b9c:	mov	r1, #2
    6ba0:	mov	r2, r5
    6ba4:	bl	0 <flatcc_builder_union_vector_push>
    6ba8:	add	r0, sp, #4
    6bac:	mov	r1, r4
    6bb0:	bl	0 <flatcc_builder_end_union_vector>
    6bb4:	ldr	r6, [sp, #4]
    6bb8:	ldr	r5, [sp, #8]
    6bbc:	mov	r0, r4
    6bc0:	mov	r1, #4
    6bc4:	bl	0 <flatcc_builder_start_table>
    6bc8:	cmp	r6, #0
    6bcc:	cmpne	r5, #0
    6bd0:	bne	6d3c <test_union_vector+0x25c>
    6bd4:	movw	r1, #0
    6bd8:	mov	r0, r4
    6bdc:	mov	r2, #0
    6be0:	movt	r1, #0
    6be4:	bl	0 <flatcc_builder_check_required>
    6be8:	cmp	r0, #0
    6bec:	beq	6f9c <test_union_vector+0x4bc>
    6bf0:	mov	r0, r4
    6bf4:	bl	0 <flatcc_builder_end_table>
    6bf8:	cmp	r0, #0
    6bfc:	beq	6c40 <test_union_vector+0x160>
    6c00:	mov	r5, r0
    6c04:	mov	r0, r4
    6c08:	mov	r1, #7
    6c0c:	mov	r2, #1
    6c10:	mov	r3, #1
    6c14:	bl	0 <flatcc_builder_table_add>
    6c18:	cmp	r0, #0
    6c1c:	beq	6c40 <test_union_vector+0x160>
    6c20:	mov	r6, r0
    6c24:	mov	r0, r4
    6c28:	mov	r1, #8
    6c2c:	bl	0 <flatcc_builder_table_add_offset>
    6c30:	cmp	r0, #0
    6c34:	movne	r1, #4
    6c38:	strbne	r1, [r6]
    6c3c:	strne	r5, [r0]
    6c40:	movw	r1, #0
    6c44:	mov	r0, r4
    6c48:	mov	r2, #1
    6c4c:	movt	r1, #0
    6c50:	bl	0 <flatcc_builder_check_required>
    6c54:	cmp	r0, #0
    6c58:	beq	6fbc <test_union_vector+0x4dc>
    6c5c:	mov	r0, r4
    6c60:	bl	0 <flatcc_builder_end_table>
    6c64:	mov	r1, r0
    6c68:	mov	r0, r4
    6c6c:	bl	0 <flatcc_builder_end_buffer>
    6c70:	add	r1, sp, #12
    6c74:	mov	r0, r4
    6c78:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    6c7c:	ldr	r1, [sp, #12]
    6c80:	movw	r2, #0
    6c84:	movw	r3, #0
    6c88:	mov	r4, r0
    6c8c:	movt	r2, #0
    6c90:	movt	r3, #0
    6c94:	bl	0 <flatcc_verify_table_as_root>
    6c98:	cmp	r0, #0
    6c9c:	beq	6cc0 <test_union_vector+0x1e0>
    6ca0:	bl	0 <flatcc_verify_error_string>
    6ca4:	mov	r1, r0
    6ca8:	movw	r0, #0
    6cac:	movt	r0, #0
    6cb0:	bl	0 <printf>
    6cb4:	mvn	r0, #0
    6cb8:	sub	sp, fp, #16
    6cbc:	pop	{r4, r5, r6, sl, fp, pc}
    6cc0:	cmp	r4, #0
    6cc4:	beq	6fdc <test_union_vector+0x4fc>
    6cc8:	ldr	r0, [r4, #4]
    6ccc:	movw	r1, #20301	; 0x4f4d
    6cd0:	movt	r1, #21326	; 0x534e
    6cd4:	cmp	r0, r1
    6cd8:	bne	6fdc <test_union_vector+0x4fc>
    6cdc:	ldr	r1, [r4]
    6ce0:	mov	r0, r4
    6ce4:	ldr	r2, [r0, r1]!
    6ce8:	mov	r1, r0
    6cec:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    6cf0:	cmp	r2, #19
    6cf4:	bls	6d6c <test_union_vector+0x28c>
    6cf8:	ldrh	r3, [r1, #18]
    6cfc:	cmp	r3, #0
    6d00:	beq	6d6c <test_union_vector+0x28c>
    6d04:	ldrb	r3, [r0, r3]
    6d08:	cmp	r3, #4
    6d0c:	bne	6d6c <test_union_vector+0x28c>
    6d10:	cmp	r2, #22
    6d14:	bcc	6d2c <test_union_vector+0x24c>
    6d18:	ldrh	r1, [r1, #20]
    6d1c:	cmp	r1, #0
    6d20:	ldrne	r1, [r0, r1]!
    6d24:	addsne	r5, r0, r1
    6d28:	bne	6d8c <test_union_vector+0x2ac>
    6d2c:	movw	r0, #0
    6d30:	movt	r0, #0
    6d34:	bl	0 <puts>
    6d38:	b	6d78 <test_union_vector+0x298>
    6d3c:	mov	r0, r4
    6d40:	mov	r1, #2
    6d44:	bl	0 <flatcc_builder_table_add_offset>
    6d48:	cmp	r0, #0
    6d4c:	beq	6bd4 <test_union_vector+0xf4>
    6d50:	str	r6, [r0]
    6d54:	mov	r0, r4
    6d58:	mov	r1, #3
    6d5c:	bl	0 <flatcc_builder_table_add_offset>
    6d60:	cmp	r0, #0
    6d64:	strne	r5, [r0]
    6d68:	b	6bd4 <test_union_vector+0xf4>
    6d6c:	movw	r0, #0
    6d70:	movt	r0, #0
    6d74:	bl	0 <printf>
    6d78:	mov	r0, r4
    6d7c:	bl	0 <flatcc_builder_aligned_free>
    6d80:	mov	r0, #0
    6d84:	sub	sp, fp, #16
    6d88:	pop	{r4, r5, r6, sl, fp, pc}
    6d8c:	ldr	r1, [r5]
    6d90:	mov	r2, r5
    6d94:	ldrh	r3, [r2, -r1]!
    6d98:	cmp	r3, #12
    6d9c:	bcc	6db0 <test_union_vector+0x2d0>
    6da0:	ldrh	r1, [r2, #10]
    6da4:	cmp	r1, #0
    6da8:	bne	6d2c <test_union_vector+0x24c>
    6dac:	b	6db8 <test_union_vector+0x2d8>
    6db0:	cmp	r3, #10
    6db4:	bcc	6e5c <test_union_vector+0x37c>
    6db8:	ldrh	lr, [r2, #8]
    6dbc:	mov	r6, #0
    6dc0:	mov	r1, #0
    6dc4:	cmp	lr, #0
    6dc8:	movne	r0, r5
    6dcc:	ldrne	r6, [r0, lr]!
    6dd0:	addne	r0, r0, r6
    6dd4:	addne	r6, r0, #4
    6dd8:	cmp	r3, #12
    6ddc:	bcc	6e0c <test_union_vector+0x32c>
    6de0:	ldrh	r1, [r2, #10]
    6de4:	cmp	r1, #0
    6de8:	beq	6e08 <test_union_vector+0x328>
    6dec:	mov	r0, r5
    6df0:	ldr	r1, [r0, r1]!
    6df4:	add	r0, r0, r1
    6df8:	add	r1, r0, #4
    6dfc:	cmp	r6, #0
    6e00:	bne	6e14 <test_union_vector+0x334>
    6e04:	b	6e5c <test_union_vector+0x37c>
    6e08:	mov	r1, #0
    6e0c:	cmp	r6, #0
    6e10:	beq	6e5c <test_union_vector+0x37c>
    6e14:	ldr	r0, [r6, #-4]
    6e18:	cmp	r0, #1
    6e1c:	bne	6e5c <test_union_vector+0x37c>
    6e20:	ldrb	r0, [r6]
    6e24:	cmp	r0, #2
    6e28:	bne	6e68 <test_union_vector+0x388>
    6e2c:	cmp	r1, #0
    6e30:	ldrne	r0, [r1, #-4]
    6e34:	cmpne	r0, #0
    6e38:	bne	6e74 <test_union_vector+0x394>
    6e3c:	movw	r0, #0
    6e40:	movw	r1, #0
    6e44:	movw	r3, #0
    6e48:	mov	r2, #117	; 0x75
    6e4c:	movt	r0, #0
    6e50:	movt	r1, #0
    6e54:	movt	r3, #0
    6e58:	bl	0 <__assert_fail>
    6e5c:	movw	r0, #0
    6e60:	movt	r0, #0
    6e64:	b	6d34 <test_union_vector+0x254>
    6e68:	movw	r0, #0
    6e6c:	movt	r0, #0
    6e70:	b	6d34 <test_union_vector+0x254>
    6e74:	ldr	r0, [r1]
    6e78:	adds	ip, r1, r0
    6e7c:	beq	6ef0 <test_union_vector+0x410>
    6e80:	ldr	r0, [ip]
    6e84:	mov	r1, ip
    6e88:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
    6e8c:	cmp	r0, #6
    6e90:	bcc	6eb0 <test_union_vector+0x3d0>
    6e94:	ldrh	r1, [r1, #4]
    6e98:	cmp	r1, #0
    6e9c:	beq	6eb0 <test_union_vector+0x3d0>
    6ea0:	add	r0, ip, r1
    6ea4:	ldrsb	r1, [r0]
    6ea8:	cmp	r1, #2
    6eac:	bne	6f80 <test_union_vector+0x4a0>
    6eb0:	cmp	lr, #0
    6eb4:	mov	r6, #0
    6eb8:	mov	r1, #0
    6ebc:	movne	r0, r5
    6ec0:	ldrne	r6, [r0, lr]!
    6ec4:	addne	r0, r0, r6
    6ec8:	addne	r6, r0, #4
    6ecc:	cmp	r3, #12
    6ed0:	bcc	6f00 <test_union_vector+0x420>
    6ed4:	ldrh	r1, [r2, #10]
    6ed8:	cmp	r1, #0
    6edc:	beq	6efc <test_union_vector+0x41c>
    6ee0:	ldr	r0, [r5, r1]!
    6ee4:	add	r0, r5, r0
    6ee8:	add	r1, r0, #4
    6eec:	b	6f00 <test_union_vector+0x420>
    6ef0:	movw	r0, #0
    6ef4:	movt	r0, #0
    6ef8:	b	6d34 <test_union_vector+0x254>
    6efc:	mov	r1, #0
    6f00:	cmp	r6, #0
    6f04:	mov	r2, #0
    6f08:	mov	r0, #0
    6f0c:	ldrne	r2, [r6, #-4]
    6f10:	cmp	r1, #0
    6f14:	ldrne	r0, [r1, #-4]
    6f18:	cmp	r2, r0
    6f1c:	bne	701c <test_union_vector+0x53c>
    6f20:	cmp	r6, #0
    6f24:	beq	6f74 <test_union_vector+0x494>
    6f28:	ldr	r0, [r6, #-4]
    6f2c:	cmp	r0, #1
    6f30:	bne	6f74 <test_union_vector+0x494>
    6f34:	ldrb	r0, [r6]
    6f38:	cmp	r0, #0
    6f3c:	beq	6f90 <test_union_vector+0x4b0>
    6f40:	cmp	r1, #0
    6f44:	ldrne	r2, [r1, #-4]
    6f48:	cmpne	r2, #0
    6f4c:	beq	6e3c <test_union_vector+0x35c>
    6f50:	cmp	r0, #2
    6f54:	bne	6f90 <test_union_vector+0x4b0>
    6f58:	ldr	r0, [r1]
    6f5c:	add	r0, r1, r0
    6f60:	cmp	r0, ip
    6f64:	beq	6d78 <test_union_vector+0x298>
    6f68:	movw	r0, #0
    6f6c:	movt	r0, #0
    6f70:	b	6d34 <test_union_vector+0x254>
    6f74:	movw	r0, #0
    6f78:	movt	r0, #0
    6f7c:	b	6d34 <test_union_vector+0x254>
    6f80:	movw	r0, #0
    6f84:	movt	r0, #0
    6f88:	bl	0 <printf>
    6f8c:	b	6d78 <test_union_vector+0x298>
    6f90:	movw	r0, #0
    6f94:	movt	r0, #0
    6f98:	b	6d34 <test_union_vector+0x254>
    6f9c:	movw	r0, #0
    6fa0:	movw	r1, #0
    6fa4:	movw	r3, #0
    6fa8:	mov	r2, #223	; 0xdf
    6fac:	movt	r0, #0
    6fb0:	movt	r1, #0
    6fb4:	movt	r3, #0
    6fb8:	bl	0 <__assert_fail>
    6fbc:	movw	r0, #0
    6fc0:	movw	r1, #0
    6fc4:	movw	r3, #0
    6fc8:	mov	r2, #235	; 0xeb
    6fcc:	movt	r0, #0
    6fd0:	movt	r1, #0
    6fd4:	movt	r3, #0
    6fd8:	bl	0 <__assert_fail>
    6fdc:	movw	r0, #0
    6fe0:	movw	r1, #0
    6fe4:	movw	r3, #0
    6fe8:	movw	r2, #717	; 0x2cd
    6fec:	movt	r0, #0
    6ff0:	movt	r1, #0
    6ff4:	movt	r3, #0
    6ff8:	bl	0 <__assert_fail>
    6ffc:	movw	r0, #0
    7000:	movw	r1, #0
    7004:	movw	r3, #0
    7008:	mov	r2, #217	; 0xd9
    700c:	movt	r0, #0
    7010:	movt	r1, #0
    7014:	movt	r3, #0
    7018:	bl	0 <__assert_fail>
    701c:	movw	r0, #0
    7020:	movw	r1, #0
    7024:	movw	r3, #0
    7028:	movw	r2, #621	; 0x26d
    702c:	movt	r0, #0
    7030:	movt	r1, #0
    7034:	movt	r3, #0
    7038:	bl	0 <__assert_fail>

0000703c <test_mixed_type_union>:
    703c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    7040:	add	fp, sp, #24
    7044:	sub	sp, sp, #16
    7048:	mov	r4, r0
    704c:	bl	0 <flatcc_builder_reset>
    7050:	movw	r1, #0
    7054:	mov	r0, r4
    7058:	mov	r2, #0
    705c:	mov	r3, #0
    7060:	mov	r8, #0
    7064:	movt	r1, #0
    7068:	bl	0 <flatcc_builder_start_buffer>
    706c:	cmp	r0, #0
    7070:	bne	7080 <test_mixed_type_union+0x44>
    7074:	mov	r0, r4
    7078:	mov	r1, #10
    707c:	bl	0 <flatcc_builder_start_table>
    7080:	mov	r0, r4
    7084:	mov	r1, #4
    7088:	mov	r2, #4
    708c:	bl	0 <flatcc_builder_start_struct>
    7090:	cmp	r0, #0
    7094:	beq	70ac <test_mixed_type_union+0x70>
    7098:	mov	r1, #10
    709c:	str	r1, [r0]
    70a0:	mov	r0, r4
    70a4:	bl	0 <flatcc_builder_end_struct>
    70a8:	mov	r8, r0
    70ac:	mov	r0, r4
    70b0:	mov	r1, #2
    70b4:	mov	r2, #2
    70b8:	bl	0 <flatcc_builder_start_struct>
    70bc:	cmp	r0, #0
    70c0:	beq	70dc <test_mixed_type_union+0xa0>
    70c4:	mov	r1, #22
    70c8:	strh	r1, [r0]
    70cc:	mov	r0, r4
    70d0:	bl	0 <flatcc_builder_end_struct>
    70d4:	mov	r9, r0
    70d8:	b	70e0 <test_mixed_type_union+0xa4>
    70dc:	mov	r9, #0
    70e0:	mov	r0, r4
    70e4:	mov	r1, #2
    70e8:	mov	r2, #2
    70ec:	bl	0 <flatcc_builder_start_struct>
    70f0:	cmp	r0, #0
    70f4:	beq	7150 <test_mixed_type_union+0x114>
    70f8:	mov	r1, #19
    70fc:	strh	r1, [r0]
    7100:	mov	r0, r4
    7104:	bl	0 <flatcc_builder_end_struct>
    7108:	cmp	r0, #0
    710c:	beq	7150 <test_mixed_type_union+0x114>
    7110:	mov	r5, r0
    7114:	mov	r0, r4
    7118:	mov	r1, #0
    711c:	mov	r2, #1
    7120:	mov	r3, #1
    7124:	bl	0 <flatcc_builder_table_add>
    7128:	cmp	r0, #0
    712c:	beq	7150 <test_mixed_type_union+0x114>
    7130:	mov	r7, r0
    7134:	mov	r0, r4
    7138:	mov	r1, #1
    713c:	bl	0 <flatcc_builder_table_add_offset>
    7140:	cmp	r0, #0
    7144:	movne	r1, #8
    7148:	strbne	r1, [r7]
    714c:	strne	r5, [r0]
    7150:	cmp	r9, #0
    7154:	beq	7194 <test_mixed_type_union+0x158>
    7158:	mov	r0, r4
    715c:	mov	r1, #6
    7160:	mov	r2, #1
    7164:	mov	r3, #1
    7168:	bl	0 <flatcc_builder_table_add>
    716c:	cmp	r0, #0
    7170:	beq	7194 <test_mixed_type_union+0x158>
    7174:	mov	r5, r0
    7178:	mov	r0, r4
    717c:	mov	r1, #7
    7180:	bl	0 <flatcc_builder_table_add_offset>
    7184:	cmp	r0, #0
    7188:	movne	r1, #8
    718c:	strbne	r1, [r5]
    7190:	strne	r9, [r0]
    7194:	mov	r0, r4
    7198:	mov	r1, #1
    719c:	bl	0 <flatcc_builder_start_table>
    71a0:	mov	r7, #0
    71a4:	cmp	r0, #0
    71a8:	beq	7374 <test_mixed_type_union+0x338>
    71ac:	movw	r1, #0
    71b0:	mov	r0, r4
    71b4:	movt	r1, #0
    71b8:	bl	0 <flatcc_builder_create_string_str>
    71bc:	cmp	r0, #0
    71c0:	beq	7204 <test_mixed_type_union+0x1c8>
    71c4:	mov	r5, r0
    71c8:	mov	r0, r4
    71cc:	mov	r1, #4
    71d0:	mov	r2, #1
    71d4:	mov	r3, #1
    71d8:	bl	0 <flatcc_builder_table_add>
    71dc:	cmp	r0, #0
    71e0:	beq	7204 <test_mixed_type_union+0x1c8>
    71e4:	mov	r6, r0
    71e8:	mov	r0, r4
    71ec:	mov	r1, #5
    71f0:	bl	0 <flatcc_builder_table_add_offset>
    71f4:	cmp	r0, #0
    71f8:	movne	r1, #11
    71fc:	strbne	r1, [r6]
    7200:	strne	r5, [r0]
    7204:	mov	r0, r4
    7208:	bl	0 <flatcc_builder_start_union_vector>
    720c:	mov	r0, r4
    7210:	mov	r1, #8
    7214:	mov	r2, r9
    7218:	bl	0 <flatcc_builder_union_vector_push>
    721c:	mov	r0, r4
    7220:	mov	r1, #2
    7224:	mov	r2, r7
    7228:	bl	0 <flatcc_builder_union_vector_push>
    722c:	mov	r0, r4
    7230:	mov	r1, #1
    7234:	bl	0 <flatcc_builder_start_table>
    7238:	mov	r6, #0
    723c:	cmp	r0, #0
    7240:	mov	r5, #0
    7244:	bne	7298 <test_mixed_type_union+0x25c>
    7248:	mov	r0, r4
    724c:	mov	r1, #0
    7250:	mov	r2, #4
    7254:	mov	r3, #4
    7258:	mov	r5, #0
    725c:	bl	0 <flatcc_builder_table_add>
    7260:	cmp	r0, #0
    7264:	beq	7298 <test_mixed_type_union+0x25c>
    7268:	mov	r1, #1
    726c:	mov	r2, #0
    7270:	str	r1, [r0]
    7274:	movw	r1, #0
    7278:	mov	r0, r4
    727c:	movt	r1, #0
    7280:	bl	0 <flatcc_builder_check_required>
    7284:	cmp	r0, #0
    7288:	beq	79d4 <test_mixed_type_union+0x998>
    728c:	mov	r0, r4
    7290:	bl	0 <flatcc_builder_end_table>
    7294:	mov	r5, r0
    7298:	mov	r0, r4
    729c:	mov	r1, #2
    72a0:	mov	r2, r5
    72a4:	bl	0 <flatcc_builder_union_vector_push>
    72a8:	movw	r1, #0
    72ac:	mov	r0, r4
    72b0:	movt	r1, #0
    72b4:	bl	0 <flatcc_builder_create_string_str>
    72b8:	mov	r2, r0
    72bc:	mov	r0, r4
    72c0:	mov	r1, #11
    72c4:	bl	0 <flatcc_builder_union_vector_push>
    72c8:	mov	r0, r4
    72cc:	mov	r1, #9
    72d0:	mov	r2, r8
    72d4:	bl	0 <flatcc_builder_union_vector_push>
    72d8:	mov	r0, r4
    72dc:	mov	r1, #4
    72e0:	mov	r2, #4
    72e4:	bl	0 <flatcc_builder_start_struct>
    72e8:	mov	r1, #3
    72ec:	str	r1, [r0]
    72f0:	mov	r0, r4
    72f4:	bl	0 <flatcc_builder_end_struct>
    72f8:	mov	r2, r0
    72fc:	mov	r0, r4
    7300:	mov	r1, #9
    7304:	bl	0 <flatcc_builder_union_vector_push>
    7308:	mov	r0, r4
    730c:	mov	r1, #4
    7310:	mov	r2, #4
    7314:	bl	0 <flatcc_builder_start_struct>
    7318:	cmp	r0, #0
    731c:	beq	7334 <test_mixed_type_union+0x2f8>
    7320:	mov	r1, #1
    7324:	str	r1, [r0]
    7328:	mov	r0, r4
    732c:	bl	0 <flatcc_builder_end_struct>
    7330:	mov	r6, r0
    7334:	mov	r0, r4
    7338:	mov	r1, #9
    733c:	mov	r2, r6
    7340:	bl	0 <flatcc_builder_union_vector_push>
    7344:	mov	r0, r4
    7348:	mov	r1, #4
    734c:	mov	r2, #4
    7350:	bl	0 <flatcc_builder_start_struct>
    7354:	cmp	r0, #0
    7358:	beq	7414 <test_mixed_type_union+0x3d8>
    735c:	mov	r1, #2
    7360:	str	r1, [r0]
    7364:	mov	r0, r4
    7368:	bl	0 <flatcc_builder_end_struct>
    736c:	mov	r2, r0
    7370:	b	7418 <test_mixed_type_union+0x3dc>
    7374:	mov	r0, r4
    7378:	mov	r1, #0
    737c:	mov	r2, #4
    7380:	mov	r3, #4
    7384:	mov	r7, #0
    7388:	bl	0 <flatcc_builder_table_add>
    738c:	cmp	r0, #0
    7390:	beq	71ac <test_mixed_type_union+0x170>
    7394:	mov	r1, #42	; 0x2a
    7398:	mov	r2, #0
    739c:	mov	r7, #0
    73a0:	str	r1, [r0]
    73a4:	movw	r1, #0
    73a8:	mov	r0, r4
    73ac:	movt	r1, #0
    73b0:	bl	0 <flatcc_builder_check_required>
    73b4:	cmp	r0, #0
    73b8:	beq	79d4 <test_mixed_type_union+0x998>
    73bc:	mov	r0, r4
    73c0:	bl	0 <flatcc_builder_end_table>
    73c4:	cmp	r0, #0
    73c8:	beq	71ac <test_mixed_type_union+0x170>
    73cc:	mov	r5, r0
    73d0:	mov	r0, r4
    73d4:	mov	r1, #2
    73d8:	mov	r2, #1
    73dc:	mov	r3, #1
    73e0:	bl	0 <flatcc_builder_table_add>
    73e4:	cmp	r0, #0
    73e8:	beq	740c <test_mixed_type_union+0x3d0>
    73ec:	mov	r6, r0
    73f0:	mov	r0, r4
    73f4:	mov	r1, #3
    73f8:	bl	0 <flatcc_builder_table_add_offset>
    73fc:	cmp	r0, #0
    7400:	movne	r1, #2
    7404:	strbne	r1, [r6]
    7408:	strne	r5, [r0]
    740c:	mov	r7, r5
    7410:	b	71ac <test_mixed_type_union+0x170>
    7414:	mov	r2, #0
    7418:	mov	r0, r4
    741c:	mov	r1, #9
    7420:	bl	0 <flatcc_builder_union_vector_push>
    7424:	movw	r1, #0
    7428:	mov	r0, r4
    742c:	movt	r1, #0
    7430:	bl	0 <flatcc_builder_create_string_str>
    7434:	mov	r2, r0
    7438:	mov	r0, r4
    743c:	mov	r1, #11
    7440:	bl	0 <flatcc_builder_union_vector_push>
    7444:	movw	r1, #0
    7448:	mov	r0, r4
    744c:	movt	r1, #0
    7450:	bl	0 <flatcc_builder_create_string_str>
    7454:	mov	r2, r0
    7458:	mov	r0, r4
    745c:	mov	r1, #11
    7460:	bl	0 <flatcc_builder_union_vector_push>
    7464:	add	r0, sp, #8
    7468:	mov	r1, r4
    746c:	bl	0 <flatcc_builder_end_union_vector>
    7470:	ldr	r6, [sp, #8]
    7474:	cmp	r6, #0
    7478:	ldrne	r5, [sp, #12]
    747c:	cmpne	r5, #0
    7480:	bne	759c <test_mixed_type_union+0x560>
    7484:	movw	r1, #0
    7488:	mov	r0, r4
    748c:	mov	r2, #0
    7490:	movt	r1, #0
    7494:	bl	0 <flatcc_builder_check_required>
    7498:	cmp	r0, #0
    749c:	beq	7984 <test_mixed_type_union+0x948>
    74a0:	mov	r0, r4
    74a4:	bl	0 <flatcc_builder_end_table>
    74a8:	mov	r1, r0
    74ac:	mov	r0, r4
    74b0:	bl	0 <flatcc_builder_end_buffer>
    74b4:	add	r1, sp, #4
    74b8:	mov	r0, r4
    74bc:	bl	0 <flatcc_builder_finalize_aligned_buffer>
    74c0:	mov	r4, r0
    74c4:	movw	r0, #0
    74c8:	ldr	r2, [sp, #4]
    74cc:	movt	r0, #0
    74d0:	mov	r1, r4
    74d4:	ldr	r3, [r0]
    74d8:	movw	r0, #0
    74dc:	movt	r0, #0
    74e0:	bl	5d4 <hexdump>
    74e4:	ldr	r1, [sp, #4]
    74e8:	movw	r2, #0
    74ec:	movw	r3, #0
    74f0:	mov	r0, r4
    74f4:	movt	r2, #0
    74f8:	movt	r3, #0
    74fc:	bl	0 <flatcc_verify_table_as_root>
    7500:	cmp	r0, #0
    7504:	beq	7524 <test_mixed_type_union+0x4e8>
    7508:	bl	0 <flatcc_verify_error_string>
    750c:	mov	r1, r0
    7510:	movw	r0, #0
    7514:	movt	r0, #0
    7518:	bl	0 <printf>
    751c:	mvn	r5, #0
    7520:	b	75f0 <test_mixed_type_union+0x5b4>
    7524:	cmp	r4, #0
    7528:	beq	79b4 <test_mixed_type_union+0x978>
    752c:	ldr	r0, [r4, #4]
    7530:	movw	r1, #20301	; 0x4f4d
    7534:	movt	r1, #21326	; 0x534e
    7538:	cmp	r0, r1
    753c:	bne	79b4 <test_mixed_type_union+0x978>
    7540:	ldr	r0, [r4]
    7544:	mov	r5, r4
    7548:	ldr	r0, [r5, r0]!
    754c:	mov	r7, r5
    7550:	ldrh	r1, [r7, -r0]!
    7554:	cmp	r1, #7
    7558:	bls	75cc <test_mixed_type_union+0x590>
    755c:	ldrh	r0, [r7, #6]
    7560:	cmp	r0, #0
    7564:	beq	75cc <test_mixed_type_union+0x590>
    7568:	cmp	r1, #24
    756c:	bcc	75d8 <test_mixed_type_union+0x59c>
    7570:	ldrh	r6, [r7, #22]
    7574:	cmp	r6, #0
    7578:	beq	75d8 <test_mixed_type_union+0x59c>
    757c:	ldrh	r1, [r7, #4]
    7580:	cmp	r1, #0
    7584:	ldrbne	r1, [r5, r1]
    7588:	cmpne	r1, #0
    758c:	bne	75fc <test_mixed_type_union+0x5c0>
    7590:	movw	r0, #0
    7594:	movt	r0, #0
    7598:	b	75e0 <test_mixed_type_union+0x5a4>
    759c:	mov	r0, r4
    75a0:	mov	r1, #8
    75a4:	bl	0 <flatcc_builder_table_add_offset>
    75a8:	cmp	r0, #0
    75ac:	beq	7484 <test_mixed_type_union+0x448>
    75b0:	str	r6, [r0]
    75b4:	mov	r0, r4
    75b8:	mov	r1, #9
    75bc:	bl	0 <flatcc_builder_table_add_offset>
    75c0:	cmp	r0, #0
    75c4:	strne	r5, [r0]
    75c8:	b	7484 <test_mixed_type_union+0x448>
    75cc:	movw	r0, #0
    75d0:	movt	r0, #0
    75d4:	b	75e0 <test_mixed_type_union+0x5a4>
    75d8:	movw	r0, #0
    75dc:	movt	r0, #0
    75e0:	bl	0 <puts>
    75e4:	mvn	r5, #0
    75e8:	mov	r0, r4
    75ec:	bl	0 <flatcc_builder_aligned_free>
    75f0:	mov	r0, r5
    75f4:	sub	sp, fp, #24
    75f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    75fc:	cmp	r1, #8
    7600:	bne	7590 <test_mixed_type_union+0x554>
    7604:	mov	r1, r5
    7608:	ldr	r0, [r1, r0]!
    760c:	adds	r0, r1, r0
    7610:	beq	762c <test_mixed_type_union+0x5f0>
    7614:	ldrh	r0, [r0]
    7618:	cmp	r0, #20
    761c:	bcc	763c <test_mixed_type_union+0x600>
    7620:	movw	r0, #0
    7624:	movt	r0, #0
    7628:	b	75e0 <test_mixed_type_union+0x5a4>
    762c:	movw	r0, #0
    7630:	movt	r0, #0
    7634:	bl	0 <puts>
    7638:	b	7680 <test_mixed_type_union+0x644>
    763c:	cmp	r0, #19
    7640:	bne	7680 <test_mixed_type_union+0x644>
    7644:	ldrh	r0, [r7, #16]
    7648:	cmp	r0, #0
    764c:	beq	768c <test_mixed_type_union+0x650>
    7650:	ldrb	r0, [r5, r0]
    7654:	cmp	r0, #8
    7658:	bne	768c <test_mixed_type_union+0x650>
    765c:	ldrh	r0, [r7, #18]
    7660:	cmp	r0, #0
    7664:	movne	r1, r5
    7668:	ldrne	r0, [r1, r0]!
    766c:	addsne	r0, r1, r0
    7670:	bne	7698 <test_mixed_type_union+0x65c>
    7674:	movw	r0, #0
    7678:	movt	r0, #0
    767c:	b	75e0 <test_mixed_type_union+0x5a4>
    7680:	movw	r0, #0
    7684:	movt	r0, #0
    7688:	b	75e0 <test_mixed_type_union+0x5a4>
    768c:	movw	r0, #0
    7690:	movt	r0, #0
    7694:	b	75e0 <test_mixed_type_union+0x5a4>
    7698:	ldrh	r0, [r0]
    769c:	cmp	r0, #22
    76a0:	bne	76e0 <test_mixed_type_union+0x6a4>
    76a4:	ldrh	r0, [r7, #8]
    76a8:	cmp	r0, #0
    76ac:	beq	76ec <test_mixed_type_union+0x6b0>
    76b0:	ldrb	r0, [r5, r0]
    76b4:	cmp	r0, #2
    76b8:	bne	76ec <test_mixed_type_union+0x6b0>
    76bc:	ldrh	r0, [r7, #10]
    76c0:	cmp	r0, #0
    76c4:	movne	r1, r5
    76c8:	ldrne	r0, [r1, r0]!
    76cc:	addsne	r0, r1, r0
    76d0:	bne	76f8 <test_mixed_type_union+0x6bc>
    76d4:	movw	r0, #0
    76d8:	movt	r0, #0
    76dc:	b	75e0 <test_mixed_type_union+0x5a4>
    76e0:	movw	r0, #0
    76e4:	movt	r0, #0
    76e8:	b	75e0 <test_mixed_type_union+0x5a4>
    76ec:	movw	r0, #0
    76f0:	movt	r0, #0
    76f4:	b	75e0 <test_mixed_type_union+0x5a4>
    76f8:	ldr	r2, [r0]
    76fc:	mov	r1, r0
    7700:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    7704:	cmp	r2, #6
    7708:	bcc	76d4 <test_mixed_type_union+0x698>
    770c:	ldrh	r1, [r1, #4]
    7710:	cmp	r1, #0
    7714:	beq	76d4 <test_mixed_type_union+0x698>
    7718:	ldr	r0, [r0, r1]
    771c:	cmp	r0, #42	; 0x2a
    7720:	bne	76d4 <test_mixed_type_union+0x698>
    7724:	ldrh	r0, [r7, #12]
    7728:	cmp	r0, #0
    772c:	beq	778c <test_mixed_type_union+0x750>
    7730:	ldrb	r0, [r5, r0]
    7734:	cmp	r0, #11
    7738:	bne	778c <test_mixed_type_union+0x750>
    773c:	ldrh	r0, [r7, #14]
    7740:	cmp	r0, #0
    7744:	beq	7798 <test_mixed_type_union+0x75c>
    7748:	mov	r1, r5
    774c:	ldr	r0, [r1, r0]!
    7750:	adds	r9, r1, r0
    7754:	add	r8, r9, #4
    7758:	movne	r9, r8
    775c:	beq	7798 <test_mixed_type_union+0x75c>
    7760:	movw	r1, #0
    7764:	mov	r0, r9
    7768:	movt	r1, #0
    776c:	bl	0 <strcmp>
    7770:	cmp	r0, #0
    7774:	beq	77a4 <test_mixed_type_union+0x768>
    7778:	movw	r0, #0
    777c:	mov	r1, r9
    7780:	movt	r0, #0
    7784:	bl	0 <printf>
    7788:	b	75e4 <test_mixed_type_union+0x5a8>
    778c:	movw	r0, #0
    7790:	movt	r0, #0
    7794:	b	75e0 <test_mixed_type_union+0x5a4>
    7798:	movw	r0, #0
    779c:	movt	r0, #0
    77a0:	b	75e0 <test_mixed_type_union+0x5a4>
    77a4:	movw	r1, #0
    77a8:	mov	r0, r8
    77ac:	movt	r1, #0
    77b0:	bl	0 <strcmp>
    77b4:	cmp	r0, #0
    77b8:	beq	77c8 <test_mixed_type_union+0x78c>
    77bc:	movw	r0, #0
    77c0:	movt	r0, #0
    77c4:	b	77e8 <test_mixed_type_union+0x7ac>
    77c8:	movw	r1, #0
    77cc:	mov	r0, r8
    77d0:	movt	r1, #0
    77d4:	bl	0 <strcmp>
    77d8:	cmp	r0, #0
    77dc:	beq	77f4 <test_mixed_type_union+0x7b8>
    77e0:	movw	r0, #0
    77e4:	movt	r0, #0
    77e8:	mov	r1, r8
    77ec:	bl	0 <printf>
    77f0:	b	75e4 <test_mixed_type_union+0x5a8>
    77f4:	ldrh	r1, [r7, #20]
    77f8:	mov	r0, r5
    77fc:	cmp	r1, #0
    7800:	beq	7828 <test_mixed_type_union+0x7ec>
    7804:	ldr	r2, [r0, r6]!
    7808:	add	r0, r0, r2
    780c:	mov	r2, r5
    7810:	ldr	r3, [r2, r1]!
    7814:	add	r0, r0, #4
    7818:	ldr	r3, [r2, r3]!
    781c:	add	r6, r2, #4
    7820:	mov	r2, #0
    7824:	b	7840 <test_mixed_type_union+0x804>
    7828:	ldr	r2, [r0, r6]!
    782c:	mov	r6, #0
    7830:	mov	r3, #0
    7834:	add	r0, r0, r2
    7838:	mov	r2, #1
    783c:	add	r0, r0, #4
    7840:	ldr	r7, [r0, #-4]
    7844:	cmp	r3, r7
    7848:	bne	7c10 <test_mixed_type_union+0xbd4>
    784c:	cmp	r2, #0
    7850:	bne	7bd0 <test_mixed_type_union+0xb94>
    7854:	ldr	r8, [r6, #-4]
    7858:	cmp	r8, #0
    785c:	beq	7bd0 <test_mixed_type_union+0xb94>
    7860:	ldrb	r2, [r6]
    7864:	cmp	r2, #0
    7868:	beq	796c <test_mixed_type_union+0x930>
    786c:	ldr	r9, [r0, #-4]
    7870:	cmp	r9, #0
    7874:	beq	7bf0 <test_mixed_type_union+0xbb4>
    7878:	cmp	r2, #8
    787c:	bne	796c <test_mixed_type_union+0x930>
    7880:	cmp	r8, #1
    7884:	bls	7bd0 <test_mixed_type_union+0xb94>
    7888:	ldrb	r2, [r6, #1]
    788c:	cmp	r2, #0
    7890:	beq	7978 <test_mixed_type_union+0x93c>
    7894:	cmp	r9, #1
    7898:	bls	7bf0 <test_mixed_type_union+0xbb4>
    789c:	cmp	r2, #2
    78a0:	bne	7978 <test_mixed_type_union+0x93c>
    78a4:	mov	r2, r0
    78a8:	ldr	r3, [r2, #4]!
    78ac:	add	r2, r2, r3
    78b0:	ldr	r7, [r2]
    78b4:	mov	r3, r2
    78b8:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
    78bc:	cmp	r7, #6
    78c0:	bcc	79a4 <test_mixed_type_union+0x968>
    78c4:	ldrh	r3, [r3, #4]
    78c8:	cmp	r3, #0
    78cc:	beq	79a4 <test_mixed_type_union+0x968>
    78d0:	ldr	r2, [r2, r3]
    78d4:	cmp	r2, #42	; 0x2a
    78d8:	bne	79a4 <test_mixed_type_union+0x968>
    78dc:	cmp	r8, #2
    78e0:	bls	7bd0 <test_mixed_type_union+0xb94>
    78e4:	ldrb	r2, [r6, #2]
    78e8:	cmp	r2, #0
    78ec:	beq	79f4 <test_mixed_type_union+0x9b8>
    78f0:	cmp	r9, #2
    78f4:	bls	7bf0 <test_mixed_type_union+0xbb4>
    78f8:	cmp	r2, #2
    78fc:	bne	79f4 <test_mixed_type_union+0x9b8>
    7900:	mov	r2, r0
    7904:	ldr	r3, [r2, #8]!
    7908:	add	r2, r2, r3
    790c:	ldr	r7, [r2]
    7910:	mov	r3, r2
    7914:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
    7918:	cmp	r7, #6
    791c:	bcc	7a00 <test_mixed_type_union+0x9c4>
    7920:	ldrh	r3, [r3, #4]
    7924:	cmp	r3, #0
    7928:	beq	7a00 <test_mixed_type_union+0x9c4>
    792c:	ldr	r2, [r2, r3]
    7930:	cmp	r2, #1
    7934:	bne	7a00 <test_mixed_type_union+0x9c4>
    7938:	cmp	r1, #0
    793c:	ldrne	r1, [r5, r1]!
    7940:	ldrne	r1, [r5, r1]!
    7944:	cmpne	r1, #3
    7948:	bhi	7a0c <test_mixed_type_union+0x9d0>
    794c:	movw	r0, #0
    7950:	movw	r1, #0
    7954:	movw	r3, #0
    7958:	movw	r2, #405	; 0x195
    795c:	movt	r0, #0
    7960:	movt	r1, #0
    7964:	movt	r3, #0
    7968:	bl	0 <__assert_fail>
    796c:	movw	r0, #0
    7970:	movt	r0, #0
    7974:	b	79ac <test_mixed_type_union+0x970>
    7978:	movw	r0, #0
    797c:	movt	r0, #0
    7980:	b	79ac <test_mixed_type_union+0x970>
    7984:	movw	r0, #0
    7988:	movw	r1, #0
    798c:	movw	r3, #0
    7990:	mov	r2, #241	; 0xf1
    7994:	movt	r0, #0
    7998:	movt	r1, #0
    799c:	movt	r3, #0
    79a0:	bl	0 <__assert_fail>
    79a4:	movw	r0, #0
    79a8:	movt	r0, #0
    79ac:	bl	0 <printf>
    79b0:	b	75e4 <test_mixed_type_union+0x5a8>
    79b4:	movw	r0, #0
    79b8:	movw	r1, #0
    79bc:	movw	r3, #0
    79c0:	movw	r2, #819	; 0x333
    79c4:	movt	r0, #0
    79c8:	movt	r1, #0
    79cc:	movt	r3, #0
    79d0:	bl	0 <__assert_fail>
    79d4:	movw	r0, #0
    79d8:	movw	r1, #0
    79dc:	movw	r3, #0
    79e0:	mov	r2, #239	; 0xef
    79e4:	movt	r0, #0
    79e8:	movt	r1, #0
    79ec:	movt	r3, #0
    79f0:	bl	0 <__assert_fail>
    79f4:	movw	r0, #0
    79f8:	movt	r0, #0
    79fc:	b	79ac <test_mixed_type_union+0x970>
    7a00:	movw	r0, #0
    7a04:	movt	r0, #0
    7a08:	b	79ac <test_mixed_type_union+0x970>
    7a0c:	add	r1, r5, #4
    7a10:	ldrb	r1, [r1, #3]
    7a14:	cmp	r1, #11
    7a18:	bne	7a54 <test_mixed_type_union+0xa18>
    7a1c:	cmp	r9, #3
    7a20:	bls	7c30 <test_mixed_type_union+0xbf4>
    7a24:	ldr	r1, [r0, #12]!
    7a28:	add	r0, r0, r1
    7a2c:	movw	r1, #0
    7a30:	add	r5, r0, #4
    7a34:	movt	r1, #0
    7a38:	mov	r0, r5
    7a3c:	bl	0 <strcmp>
    7a40:	cmp	r0, #0
    7a44:	beq	7a60 <test_mixed_type_union+0xa24>
    7a48:	movw	r0, #0
    7a4c:	movt	r0, #0
    7a50:	b	75e0 <test_mixed_type_union+0x5a4>
    7a54:	movw	r0, #0
    7a58:	movt	r0, #0
    7a5c:	b	75e0 <test_mixed_type_union+0x5a4>
    7a60:	cmp	r8, #3
    7a64:	bls	7bd0 <test_mixed_type_union+0xb94>
    7a68:	ldrb	r0, [r6, #3]
    7a6c:	cmp	r0, #11
    7a70:	bne	7a98 <test_mixed_type_union+0xa5c>
    7a74:	movw	r1, #0
    7a78:	mov	r0, r5
    7a7c:	movt	r1, #0
    7a80:	bl	0 <strcmp>
    7a84:	cmp	r0, #0
    7a88:	beq	7aa4 <test_mixed_type_union+0xa68>
    7a8c:	movw	r0, #0
    7a90:	movt	r0, #0
    7a94:	b	75e0 <test_mixed_type_union+0x5a4>
    7a98:	movw	r0, #0
    7a9c:	movt	r0, #0
    7aa0:	b	79ac <test_mixed_type_union+0x970>
    7aa4:	cmp	r8, #4
    7aa8:	bls	7bd0 <test_mixed_type_union+0xb94>
    7aac:	ldrb	r0, [r6, #4]
    7ab0:	cmp	r0, #0
    7ab4:	beq	7b94 <test_mixed_type_union+0xb58>
    7ab8:	cmp	r9, #4
    7abc:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7ac0:	cmp	r0, #9
    7ac4:	bne	7b94 <test_mixed_type_union+0xb58>
    7ac8:	cmp	r8, #5
    7acc:	bls	7bd0 <test_mixed_type_union+0xb94>
    7ad0:	ldrb	r0, [r6, #5]
    7ad4:	cmp	r0, #0
    7ad8:	beq	7ba0 <test_mixed_type_union+0xb64>
    7adc:	cmp	r9, #5
    7ae0:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7ae4:	cmp	r0, #9
    7ae8:	bne	7ba0 <test_mixed_type_union+0xb64>
    7aec:	cmp	r8, #6
    7af0:	bls	7bd0 <test_mixed_type_union+0xb94>
    7af4:	ldrb	r0, [r6, #6]
    7af8:	cmp	r0, #0
    7afc:	beq	7bac <test_mixed_type_union+0xb70>
    7b00:	cmp	r9, #6
    7b04:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7b08:	cmp	r0, #9
    7b0c:	bne	7bac <test_mixed_type_union+0xb70>
    7b10:	cmp	r8, #7
    7b14:	bls	7bd0 <test_mixed_type_union+0xb94>
    7b18:	ldrb	r0, [r6, #7]
    7b1c:	cmp	r0, #0
    7b20:	beq	7bb8 <test_mixed_type_union+0xb7c>
    7b24:	cmp	r9, #7
    7b28:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7b2c:	cmp	r0, #9
    7b30:	bne	7bb8 <test_mixed_type_union+0xb7c>
    7b34:	cmp	r8, #8
    7b38:	bls	7bd0 <test_mixed_type_union+0xb94>
    7b3c:	ldrb	r0, [r6, #8]
    7b40:	cmp	r0, #0
    7b44:	beq	7bc4 <test_mixed_type_union+0xb88>
    7b48:	cmp	r9, #8
    7b4c:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7b50:	cmp	r0, #11
    7b54:	bne	7bc4 <test_mixed_type_union+0xb88>
    7b58:	cmp	r8, #9
    7b5c:	bls	7bd0 <test_mixed_type_union+0xb94>
    7b60:	ldrb	r0, [r6, #9]
    7b64:	cmp	r0, #0
    7b68:	beq	7bc4 <test_mixed_type_union+0xb88>
    7b6c:	cmp	r9, #9
    7b70:	bls	7bf0 <test_mixed_type_union+0xbb4>
    7b74:	cmp	r0, #11
    7b78:	bne	7bc4 <test_mixed_type_union+0xb88>
    7b7c:	mov	r5, #0
    7b80:	cmp	r8, #10
    7b84:	beq	75e8 <test_mixed_type_union+0x5ac>
    7b88:	movw	r0, #0
    7b8c:	movt	r0, #0
    7b90:	b	79ac <test_mixed_type_union+0x970>
    7b94:	movw	r0, #0
    7b98:	movt	r0, #0
    7b9c:	b	79ac <test_mixed_type_union+0x970>
    7ba0:	movw	r0, #0
    7ba4:	movt	r0, #0
    7ba8:	b	79ac <test_mixed_type_union+0x970>
    7bac:	movw	r0, #0
    7bb0:	movt	r0, #0
    7bb4:	b	79ac <test_mixed_type_union+0x970>
    7bb8:	movw	r0, #0
    7bbc:	movt	r0, #0
    7bc0:	b	79ac <test_mixed_type_union+0x970>
    7bc4:	movw	r0, #0
    7bc8:	movt	r0, #0
    7bcc:	b	79ac <test_mixed_type_union+0x970>
    7bd0:	movw	r0, #0
    7bd4:	movw	r1, #0
    7bd8:	movw	r3, #0
    7bdc:	movw	r2, #773	; 0x305
    7be0:	movt	r0, #0
    7be4:	movt	r1, #0
    7be8:	movt	r3, #0
    7bec:	bl	0 <__assert_fail>
    7bf0:	movw	r0, #0
    7bf4:	movw	r1, #0
    7bf8:	movw	r3, #0
    7bfc:	mov	r2, #117	; 0x75
    7c00:	movt	r0, #0
    7c04:	movt	r1, #0
    7c08:	movt	r3, #0
    7c0c:	bl	0 <__assert_fail>
    7c10:	movw	r0, #0
    7c14:	movw	r1, #0
    7c18:	movw	r3, #0
    7c1c:	movw	r2, #823	; 0x337
    7c20:	movt	r0, #0
    7c24:	movt	r1, #0
    7c28:	movt	r3, #0
    7c2c:	bl	0 <__assert_fail>
    7c30:	movw	r0, #0
    7c34:	movw	r1, #0
    7c38:	movw	r3, #0
    7c3c:	mov	r2, #119	; 0x77
    7c40:	movt	r0, #0
    7c44:	movt	r1, #0
    7c48:	movt	r3, #0
    7c4c:	bl	0 <__assert_fail>

00007c50 <test_add_set_defaults>:
    7c50:	push	{r4, r5, r6, sl, fp, lr}
    7c54:	add	fp, sp, #16
    7c58:	sub	sp, sp, #8
    7c5c:	mov	r4, r0
    7c60:	bl	0 <flatcc_builder_reset>
    7c64:	movw	r1, #0
    7c68:	mov	r0, r4
    7c6c:	mov	r2, #0
    7c70:	mov	r3, #0
    7c74:	movt	r1, #0
    7c78:	bl	0 <flatcc_builder_start_buffer>
    7c7c:	cmp	r0, #0
    7c80:	bne	7c90 <test_add_set_defaults+0x40>
    7c84:	mov	r0, r4
    7c88:	mov	r1, #36	; 0x24
    7c8c:	bl	0 <flatcc_builder_start_table>
    7c90:	movw	r1, #0
    7c94:	mov	r0, r4
    7c98:	movt	r1, #0
    7c9c:	bl	0 <flatcc_builder_create_string_str>
    7ca0:	cmp	r0, #0
    7ca4:	beq	7cc0 <test_add_set_defaults+0x70>
    7ca8:	mov	r5, r0
    7cac:	mov	r0, r4
    7cb0:	mov	r1, #3
    7cb4:	bl	0 <flatcc_builder_table_add_offset>
    7cb8:	cmp	r0, #0
    7cbc:	strne	r5, [r0]
    7cc0:	mov	r0, r4
    7cc4:	mov	r1, #1
    7cc8:	mov	r2, #2
    7ccc:	mov	r3, #2
    7cd0:	bl	0 <flatcc_builder_table_add>
    7cd4:	cmp	r0, #0
    7cd8:	mov	r2, #1
    7cdc:	movne	r1, #100	; 0x64
    7ce0:	strhne	r1, [r0]
    7ce4:	movw	r1, #0
    7ce8:	mov	r0, r4
    7cec:	movt	r1, #0
    7cf0:	bl	0 <flatcc_builder_check_required>
    7cf4:	cmp	r0, #0
    7cf8:	beq	7f4c <test_add_set_defaults+0x2fc>
    7cfc:	mov	r0, r4
    7d00:	bl	0 <flatcc_builder_end_table>
    7d04:	mov	r1, r0
    7d08:	mov	r0, r4
    7d0c:	bl	0 <flatcc_builder_end_buffer>
    7d10:	add	r1, sp, #4
    7d14:	mov	r0, r4
    7d18:	bl	0 <flatcc_builder_get_direct_buffer>
    7d1c:	cmp	r0, #0
    7d20:	beq	7f2c <test_add_set_defaults+0x2dc>
    7d24:	ldr	r1, [r0, #4]
    7d28:	movw	r6, #20301	; 0x4f4d
    7d2c:	movt	r6, #21326	; 0x534e
    7d30:	cmp	r1, r6
    7d34:	bne	7f2c <test_add_set_defaults+0x2dc>
    7d38:	ldr	r1, [r0]
    7d3c:	ldr	r1, [r0, r1]!
    7d40:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    7d44:	cmp	r1, #9
    7d48:	bls	7d64 <test_add_set_defaults+0x114>
    7d4c:	ldrh	r2, [r0, #8]
    7d50:	cmp	r2, #0
    7d54:	beq	7d6c <test_add_set_defaults+0x11c>
    7d58:	movw	r0, #0
    7d5c:	movt	r0, #0
    7d60:	b	7f10 <test_add_set_defaults+0x2c0>
    7d64:	cmp	r1, #8
    7d68:	bcc	7d98 <test_add_set_defaults+0x148>
    7d6c:	ldrh	r2, [r0, #6]
    7d70:	cmp	r2, #0
    7d74:	beq	7d98 <test_add_set_defaults+0x148>
    7d78:	cmp	r1, #18
    7d7c:	bcc	7da4 <test_add_set_defaults+0x154>
    7d80:	ldrh	r0, [r0, #16]
    7d84:	cmp	r0, #0
    7d88:	beq	7da4 <test_add_set_defaults+0x154>
    7d8c:	movw	r0, #0
    7d90:	movt	r0, #0
    7d94:	b	7f10 <test_add_set_defaults+0x2c0>
    7d98:	movw	r0, #0
    7d9c:	movt	r0, #0
    7da0:	b	7f10 <test_add_set_defaults+0x2c0>
    7da4:	mov	r0, r4
    7da8:	bl	0 <flatcc_builder_reset>
    7dac:	movw	r1, #0
    7db0:	mov	r0, r4
    7db4:	mov	r2, #0
    7db8:	mov	r3, #0
    7dbc:	movt	r1, #0
    7dc0:	bl	0 <flatcc_builder_start_buffer>
    7dc4:	cmp	r0, #0
    7dc8:	bne	7dd8 <test_add_set_defaults+0x188>
    7dcc:	mov	r0, r4
    7dd0:	mov	r1, #36	; 0x24
    7dd4:	bl	0 <flatcc_builder_start_table>
    7dd8:	movw	r1, #0
    7ddc:	mov	r0, r4
    7de0:	movt	r1, #0
    7de4:	bl	0 <flatcc_builder_create_string_str>
    7de8:	cmp	r0, #0
    7dec:	beq	7e08 <test_add_set_defaults+0x1b8>
    7df0:	mov	r5, r0
    7df4:	mov	r0, r4
    7df8:	mov	r1, #3
    7dfc:	bl	0 <flatcc_builder_table_add_offset>
    7e00:	cmp	r0, #0
    7e04:	strne	r5, [r0]
    7e08:	mov	r0, r4
    7e0c:	mov	r1, #2
    7e10:	mov	r2, #2
    7e14:	mov	r3, #2
    7e18:	bl	0 <flatcc_builder_table_add>
    7e1c:	cmp	r0, #0
    7e20:	mov	r2, #2
    7e24:	mov	r3, #2
    7e28:	movne	r1, #100	; 0x64
    7e2c:	strhne	r1, [r0]
    7e30:	mov	r0, r4
    7e34:	mov	r1, #1
    7e38:	bl	0 <flatcc_builder_table_add>
    7e3c:	cmp	r0, #0
    7e40:	mov	r2, #1
    7e44:	mov	r3, #1
    7e48:	movne	r1, #100	; 0x64
    7e4c:	strhne	r1, [r0]
    7e50:	mov	r0, r4
    7e54:	mov	r1, #6
    7e58:	bl	0 <flatcc_builder_table_add>
    7e5c:	cmp	r0, #0
    7e60:	mov	r2, #1
    7e64:	movne	r1, #8
    7e68:	strbne	r1, [r0]
    7e6c:	movw	r1, #0
    7e70:	mov	r0, r4
    7e74:	movt	r1, #0
    7e78:	bl	0 <flatcc_builder_check_required>
    7e7c:	cmp	r0, #0
    7e80:	beq	7f4c <test_add_set_defaults+0x2fc>
    7e84:	mov	r0, r4
    7e88:	bl	0 <flatcc_builder_end_table>
    7e8c:	mov	r1, r0
    7e90:	mov	r0, r4
    7e94:	bl	0 <flatcc_builder_end_buffer>
    7e98:	add	r1, sp, #4
    7e9c:	mov	r0, r4
    7ea0:	bl	0 <flatcc_builder_get_direct_buffer>
    7ea4:	cmp	r0, #0
    7ea8:	beq	7f2c <test_add_set_defaults+0x2dc>
    7eac:	ldr	r1, [r0, #4]
    7eb0:	cmp	r1, r6
    7eb4:	bne	7f2c <test_add_set_defaults+0x2dc>
    7eb8:	ldr	r1, [r0]
    7ebc:	ldr	r1, [r0, r1]!
    7ec0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
    7ec4:	cmp	r1, #9
    7ec8:	bls	7f08 <test_add_set_defaults+0x2b8>
    7ecc:	ldrh	r2, [r0, #8]
    7ed0:	cmp	r2, #0
    7ed4:	beq	7f08 <test_add_set_defaults+0x2b8>
    7ed8:	ldrh	r2, [r0, #6]
    7edc:	cmp	r2, #0
    7ee0:	beq	7f20 <test_add_set_defaults+0x2d0>
    7ee4:	cmp	r1, #18
    7ee8:	bcc	7efc <test_add_set_defaults+0x2ac>
    7eec:	ldrh	r1, [r0, #16]
    7ef0:	mov	r0, #0
    7ef4:	cmp	r1, #0
    7ef8:	bne	7f18 <test_add_set_defaults+0x2c8>
    7efc:	movw	r0, #0
    7f00:	movt	r0, #0
    7f04:	b	7f10 <test_add_set_defaults+0x2c0>
    7f08:	movw	r0, #0
    7f0c:	movt	r0, #0
    7f10:	bl	0 <puts>
    7f14:	mvn	r0, #0
    7f18:	sub	sp, fp, #16
    7f1c:	pop	{r4, r5, r6, sl, fp, pc}
    7f20:	movw	r0, #0
    7f24:	movt	r0, #0
    7f28:	b	7f10 <test_add_set_defaults+0x2c0>
    7f2c:	movw	r0, #0
    7f30:	movw	r1, #0
    7f34:	movw	r3, #0
    7f38:	movw	r2, #697	; 0x2b9
    7f3c:	movt	r0, #0
    7f40:	movt	r1, #0
    7f44:	movt	r3, #0
    7f48:	bl	0 <__assert_fail>
    7f4c:	movw	r0, #0
    7f50:	movw	r1, #0
    7f54:	movw	r3, #0
    7f58:	mov	r2, #235	; 0xeb
    7f5c:	movt	r0, #0
    7f60:	movt	r1, #0
    7f64:	movt	r3, #0
    7f68:	bl	0 <__assert_fail>

00007f6c <test_nested_buffer>:
    7f6c:	push	{r4, r5, r6, r7, fp, lr}
    7f70:	add	fp, sp, #16
    7f74:	sub	sp, sp, #8
    7f78:	mov	r4, r0
    7f7c:	bl	0 <flatcc_builder_reset>
    7f80:	movw	r1, #0
    7f84:	mov	r0, r4
    7f88:	mov	r2, #0
    7f8c:	mov	r3, #0
    7f90:	movt	r1, #0
    7f94:	bl	0 <flatcc_builder_start_buffer>
    7f98:	cmp	r0, #0
    7f9c:	bne	7fac <test_nested_buffer+0x40>
    7fa0:	mov	r0, r4
    7fa4:	mov	r1, #36	; 0x24
    7fa8:	bl	0 <flatcc_builder_start_table>
    7fac:	movw	r1, #0
    7fb0:	mov	r0, r4
    7fb4:	movt	r1, #0
    7fb8:	bl	0 <flatcc_builder_create_string_str>
    7fbc:	cmp	r0, #0
    7fc0:	beq	7fdc <test_nested_buffer+0x70>
    7fc4:	mov	r5, r0
    7fc8:	mov	r0, r4
    7fcc:	mov	r1, #3
    7fd0:	bl	0 <flatcc_builder_table_add_offset>
    7fd4:	cmp	r0, #0
    7fd8:	strne	r5, [r0]
    7fdc:	movw	r1, #0
    7fe0:	mov	r0, r4
    7fe4:	mov	r2, #0
    7fe8:	mov	r3, #0
    7fec:	movt	r1, #0
    7ff0:	bl	0 <flatcc_builder_start_buffer>
    7ff4:	cmp	r0, #0
    7ff8:	bne	8008 <test_nested_buffer+0x9c>
    7ffc:	mov	r0, r4
    8000:	mov	r1, #36	; 0x24
    8004:	bl	0 <flatcc_builder_start_table>
    8008:	movw	r1, #0
    800c:	mov	r0, r4
    8010:	movt	r1, #0
    8014:	bl	0 <flatcc_builder_create_string_str>
    8018:	cmp	r0, #0
    801c:	beq	8038 <test_nested_buffer+0xcc>
    8020:	mov	r5, r0
    8024:	mov	r0, r4
    8028:	mov	r1, #3
    802c:	bl	0 <flatcc_builder_table_add_offset>
    8030:	cmp	r0, #0
    8034:	strne	r5, [r0]
    8038:	movw	r1, #0
    803c:	mov	r0, r4
    8040:	mov	r2, #1
    8044:	movt	r1, #0
    8048:	bl	0 <flatcc_builder_check_required>
    804c:	cmp	r0, #0
    8050:	beq	826c <test_nested_buffer+0x300>
    8054:	mov	r0, r4
    8058:	bl	0 <flatcc_builder_end_table>
    805c:	mov	r1, r0
    8060:	mov	r0, r4
    8064:	bl	0 <flatcc_builder_end_buffer>
    8068:	cmp	r0, #0
    806c:	beq	8088 <test_nested_buffer+0x11c>
    8070:	mov	r5, r0
    8074:	mov	r0, r4
    8078:	mov	r1, #13
    807c:	bl	0 <flatcc_builder_table_add_offset>
    8080:	cmp	r0, #0
    8084:	strne	r5, [r0]
    8088:	mov	r0, r4
    808c:	mov	r1, #2
    8090:	mov	r2, #2
    8094:	mov	r3, #2
    8098:	bl	0 <flatcc_builder_table_add>
    809c:	cmp	r0, #0
    80a0:	mov	r2, #1
    80a4:	movne	r1, #10
    80a8:	strhne	r1, [r0]
    80ac:	movw	r1, #0
    80b0:	mov	r0, r4
    80b4:	movt	r1, #0
    80b8:	bl	0 <flatcc_builder_check_required>
    80bc:	cmp	r0, #0
    80c0:	beq	826c <test_nested_buffer+0x300>
    80c4:	mov	r0, r4
    80c8:	bl	0 <flatcc_builder_end_table>
    80cc:	mov	r1, r0
    80d0:	mov	r0, r4
    80d4:	bl	0 <flatcc_builder_end_buffer>
    80d8:	add	r1, sp, #4
    80dc:	mov	r0, r4
    80e0:	bl	0 <flatcc_builder_get_direct_buffer>
    80e4:	mov	r4, r0
    80e8:	movw	r0, #0
    80ec:	ldr	r2, [sp, #4]
    80f0:	movt	r0, #0
    80f4:	mov	r1, r4
    80f8:	ldr	r3, [r0]
    80fc:	movw	r0, #0
    8100:	movt	r0, #0
    8104:	bl	5d4 <hexdump>
    8108:	cmp	r4, #0
    810c:	beq	8240 <test_nested_buffer+0x2d4>
    8110:	ldr	r0, [r4, #4]
    8114:	movw	r6, #20301	; 0x4f4d
    8118:	movt	r6, #21326	; 0x534e
    811c:	cmp	r0, r6
    8120:	bne	8240 <test_nested_buffer+0x2d4>
    8124:	ldr	r0, [r4]
    8128:	ldr	r0, [r4, r0]!
    812c:	mov	r5, r4
    8130:	ldrh	r7, [r5, -r0]!
    8134:	cmp	r7, #11
    8138:	bls	824c <test_nested_buffer+0x2e0>
    813c:	ldrh	r0, [r5, #10]
    8140:	cmp	r0, #0
    8144:	beq	824c <test_nested_buffer+0x2e0>
    8148:	mov	r1, r4
    814c:	ldr	r0, [r1, r0]!
    8150:	add	r0, r1, r0
    8154:	movw	r1, #0
    8158:	add	r0, r0, #4
    815c:	movt	r1, #0
    8160:	bl	0 <strcmp>
    8164:	cmp	r0, #0
    8168:	beq	8178 <test_nested_buffer+0x20c>
    816c:	movw	r0, #0
    8170:	movt	r0, #0
    8174:	b	8230 <test_nested_buffer+0x2c4>
    8178:	mov	r0, #0
    817c:	cmp	r7, #32
    8180:	bcc	81b0 <test_nested_buffer+0x244>
    8184:	ldrh	r1, [r5, #30]
    8188:	cmp	r1, #0
    818c:	beq	81b0 <test_nested_buffer+0x244>
    8190:	mov	r2, r4
    8194:	ldr	r1, [r2, r1]!
    8198:	add	r1, r2, r1
    819c:	ldr	r2, [r1, #8]
    81a0:	cmp	r2, r6
    81a4:	addeq	r0, r1, #4
    81a8:	ldreq	r1, [r0]
    81ac:	addeq	r0, r0, r1
    81b0:	ldrh	r1, [r5, #8]
    81b4:	cmp	r1, #0
    81b8:	beq	8228 <test_nested_buffer+0x2bc>
    81bc:	add	r1, r4, r1
    81c0:	ldrh	r1, [r1]
    81c4:	cmp	r1, #10
    81c8:	bne	8228 <test_nested_buffer+0x2bc>
    81cc:	cmp	r0, #0
    81d0:	beq	8240 <test_nested_buffer+0x2d4>
    81d4:	ldr	r2, [r0]
    81d8:	mov	r1, r0
    81dc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    81e0:	cmp	r2, #12
    81e4:	bcc	824c <test_nested_buffer+0x2e0>
    81e8:	ldrh	r1, [r1, #10]
    81ec:	cmp	r1, #0
    81f0:	beq	824c <test_nested_buffer+0x2e0>
    81f4:	ldr	r1, [r0, r1]!
    81f8:	add	r0, r0, r1
    81fc:	movw	r1, #0
    8200:	add	r0, r0, #4
    8204:	movt	r1, #0
    8208:	bl	0 <strcmp>
    820c:	cmp	r0, #0
    8210:	moveq	r0, #0
    8214:	subeq	sp, fp, #16
    8218:	popeq	{r4, r5, r6, r7, fp, pc}
    821c:	movw	r0, #0
    8220:	movt	r0, #0
    8224:	b	8230 <test_nested_buffer+0x2c4>
    8228:	movw	r0, #0
    822c:	movt	r0, #0
    8230:	bl	0 <puts>
    8234:	mvn	r0, #0
    8238:	sub	sp, fp, #16
    823c:	pop	{r4, r5, r6, r7, fp, pc}
    8240:	movw	r0, #0
    8244:	movt	r0, #0
    8248:	b	8254 <test_nested_buffer+0x2e8>
    824c:	movw	r0, #0
    8250:	movt	r0, #0
    8254:	movw	r1, #0
    8258:	movw	r3, #0
    825c:	movw	r2, #699	; 0x2bb
    8260:	movt	r1, #0
    8264:	movt	r3, #0
    8268:	bl	0 <__assert_fail>
    826c:	movw	r0, #0
    8270:	movw	r1, #0
    8274:	movw	r3, #0
    8278:	mov	r2, #235	; 0xeb
    827c:	movt	r0, #0
    8280:	movt	r1, #0
    8284:	movt	r3, #0
    8288:	bl	0 <__assert_fail>

0000828c <test_nested_buffer_first>:
    828c:	push	{r4, r5, r6, r7, fp, lr}
    8290:	add	fp, sp, #16
    8294:	sub	sp, sp, #8
    8298:	mov	r4, r0
    829c:	bl	0 <flatcc_builder_reset>
    82a0:	movw	r1, #0
    82a4:	mov	r0, r4
    82a8:	mov	r2, #0
    82ac:	mov	r3, #0
    82b0:	movt	r1, #0
    82b4:	bl	0 <flatcc_builder_start_buffer>
    82b8:	cmp	r0, #0
    82bc:	bne	82cc <test_nested_buffer_first+0x40>
    82c0:	mov	r0, r4
    82c4:	mov	r1, #36	; 0x24
    82c8:	bl	0 <flatcc_builder_start_table>
    82cc:	movw	r1, #0
    82d0:	mov	r0, r4
    82d4:	mov	r2, #0
    82d8:	mov	r3, #0
    82dc:	movt	r1, #0
    82e0:	bl	0 <flatcc_builder_start_buffer>
    82e4:	cmp	r0, #0
    82e8:	bne	82f8 <test_nested_buffer_first+0x6c>
    82ec:	mov	r0, r4
    82f0:	mov	r1, #36	; 0x24
    82f4:	bl	0 <flatcc_builder_start_table>
    82f8:	movw	r1, #0
    82fc:	mov	r0, r4
    8300:	movt	r1, #0
    8304:	bl	0 <flatcc_builder_create_string_str>
    8308:	cmp	r0, #0
    830c:	beq	8328 <test_nested_buffer_first+0x9c>
    8310:	mov	r5, r0
    8314:	mov	r0, r4
    8318:	mov	r1, #3
    831c:	bl	0 <flatcc_builder_table_add_offset>
    8320:	cmp	r0, #0
    8324:	strne	r5, [r0]
    8328:	movw	r1, #0
    832c:	mov	r0, r4
    8330:	mov	r2, #1
    8334:	movt	r1, #0
    8338:	bl	0 <flatcc_builder_check_required>
    833c:	cmp	r0, #0
    8340:	beq	858c <test_nested_buffer_first+0x300>
    8344:	mov	r0, r4
    8348:	bl	0 <flatcc_builder_end_table>
    834c:	mov	r1, r0
    8350:	mov	r0, r4
    8354:	bl	0 <flatcc_builder_end_buffer>
    8358:	cmp	r0, #0
    835c:	beq	8378 <test_nested_buffer_first+0xec>
    8360:	mov	r5, r0
    8364:	mov	r0, r4
    8368:	mov	r1, #13
    836c:	bl	0 <flatcc_builder_table_add_offset>
    8370:	cmp	r0, #0
    8374:	strne	r5, [r0]
    8378:	mov	r0, r4
    837c:	mov	r1, #2
    8380:	mov	r2, #2
    8384:	mov	r3, #2
    8388:	bl	0 <flatcc_builder_table_add>
    838c:	cmp	r0, #0
    8390:	movne	r1, #10
    8394:	strhne	r1, [r0]
    8398:	movw	r1, #0
    839c:	mov	r0, r4
    83a0:	movt	r1, #0
    83a4:	bl	0 <flatcc_builder_create_string_str>
    83a8:	cmp	r0, #0
    83ac:	beq	83c8 <test_nested_buffer_first+0x13c>
    83b0:	mov	r5, r0
    83b4:	mov	r0, r4
    83b8:	mov	r1, #3
    83bc:	bl	0 <flatcc_builder_table_add_offset>
    83c0:	cmp	r0, #0
    83c4:	strne	r5, [r0]
    83c8:	movw	r1, #0
    83cc:	mov	r0, r4
    83d0:	mov	r2, #1
    83d4:	movt	r1, #0
    83d8:	bl	0 <flatcc_builder_check_required>
    83dc:	cmp	r0, #0
    83e0:	beq	858c <test_nested_buffer_first+0x300>
    83e4:	mov	r0, r4
    83e8:	bl	0 <flatcc_builder_end_table>
    83ec:	mov	r1, r0
    83f0:	mov	r0, r4
    83f4:	bl	0 <flatcc_builder_end_buffer>
    83f8:	add	r1, sp, #4
    83fc:	mov	r0, r4
    8400:	bl	0 <flatcc_builder_get_direct_buffer>
    8404:	mov	r4, r0
    8408:	movw	r0, #0
    840c:	ldr	r2, [sp, #4]
    8410:	movt	r0, #0
    8414:	mov	r1, r4
    8418:	ldr	r3, [r0]
    841c:	movw	r0, #0
    8420:	movt	r0, #0
    8424:	bl	5d4 <hexdump>
    8428:	cmp	r4, #0
    842c:	beq	8560 <test_nested_buffer_first+0x2d4>
    8430:	ldr	r0, [r4, #4]
    8434:	movw	r6, #20301	; 0x4f4d
    8438:	movt	r6, #21326	; 0x534e
    843c:	cmp	r0, r6
    8440:	bne	8560 <test_nested_buffer_first+0x2d4>
    8444:	ldr	r0, [r4]
    8448:	ldr	r0, [r4, r0]!
    844c:	mov	r5, r4
    8450:	ldrh	r7, [r5, -r0]!
    8454:	cmp	r7, #11
    8458:	bls	856c <test_nested_buffer_first+0x2e0>
    845c:	ldrh	r0, [r5, #10]
    8460:	cmp	r0, #0
    8464:	beq	856c <test_nested_buffer_first+0x2e0>
    8468:	mov	r1, r4
    846c:	ldr	r0, [r1, r0]!
    8470:	add	r0, r1, r0
    8474:	movw	r1, #0
    8478:	add	r0, r0, #4
    847c:	movt	r1, #0
    8480:	bl	0 <strcmp>
    8484:	cmp	r0, #0
    8488:	beq	8498 <test_nested_buffer_first+0x20c>
    848c:	movw	r0, #0
    8490:	movt	r0, #0
    8494:	b	8550 <test_nested_buffer_first+0x2c4>
    8498:	mov	r0, #0
    849c:	cmp	r7, #32
    84a0:	bcc	84d0 <test_nested_buffer_first+0x244>
    84a4:	ldrh	r1, [r5, #30]
    84a8:	cmp	r1, #0
    84ac:	beq	84d0 <test_nested_buffer_first+0x244>
    84b0:	mov	r2, r4
    84b4:	ldr	r1, [r2, r1]!
    84b8:	add	r1, r2, r1
    84bc:	ldr	r2, [r1, #8]
    84c0:	cmp	r2, r6
    84c4:	addeq	r0, r1, #4
    84c8:	ldreq	r1, [r0]
    84cc:	addeq	r0, r0, r1
    84d0:	ldrh	r1, [r5, #8]
    84d4:	cmp	r1, #0
    84d8:	beq	8548 <test_nested_buffer_first+0x2bc>
    84dc:	add	r1, r4, r1
    84e0:	ldrh	r1, [r1]
    84e4:	cmp	r1, #10
    84e8:	bne	8548 <test_nested_buffer_first+0x2bc>
    84ec:	cmp	r0, #0
    84f0:	beq	8560 <test_nested_buffer_first+0x2d4>
    84f4:	ldr	r2, [r0]
    84f8:	mov	r1, r0
    84fc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
    8500:	cmp	r2, #12
    8504:	bcc	856c <test_nested_buffer_first+0x2e0>
    8508:	ldrh	r1, [r1, #10]
    850c:	cmp	r1, #0
    8510:	beq	856c <test_nested_buffer_first+0x2e0>
    8514:	ldr	r1, [r0, r1]!
    8518:	add	r0, r0, r1
    851c:	movw	r1, #0
    8520:	add	r0, r0, #4
    8524:	movt	r1, #0
    8528:	bl	0 <strcmp>
    852c:	cmp	r0, #0
    8530:	moveq	r0, #0
    8534:	subeq	sp, fp, #16
    8538:	popeq	{r4, r5, r6, r7, fp, pc}
    853c:	movw	r0, #0
    8540:	movt	r0, #0
    8544:	b	8550 <test_nested_buffer_first+0x2c4>
    8548:	movw	r0, #0
    854c:	movt	r0, #0
    8550:	bl	0 <puts>
    8554:	mvn	r0, #0
    8558:	sub	sp, fp, #16
    855c:	pop	{r4, r5, r6, r7, fp, pc}
    8560:	movw	r0, #0
    8564:	movt	r0, #0
    8568:	b	8574 <test_nested_buffer_first+0x2e8>
    856c:	movw	r0, #0
    8570:	movt	r0, #0
    8574:	movw	r1, #0
    8578:	movw	r3, #0
    857c:	movw	r2, #699	; 0x2bb
    8580:	movt	r1, #0
    8584:	movt	r3, #0
    8588:	bl	0 <__assert_fail>
    858c:	movw	r0, #0
    8590:	movw	r1, #0
    8594:	movw	r3, #0
    8598:	mov	r2, #235	; 0xeb
    859c:	movt	r0, #0
    85a0:	movt	r1, #0
    85a4:	movt	r3, #0
    85a8:	bl	0 <__assert_fail>

000085ac <test_nested_buffer_using_nest>:
    85ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    85b0:	add	fp, sp, #24
    85b4:	sub	sp, sp, #1040	; 0x410
    85b8:	mov	r4, r0
    85bc:	bl	0 <flatcc_builder_reset>
    85c0:	movw	r1, #0
    85c4:	mov	r0, r4
    85c8:	mov	r2, #0
    85cc:	mov	r3, #0
    85d0:	movt	r1, #0
    85d4:	bl	0 <flatcc_builder_start_buffer>
    85d8:	cmp	r0, #0
    85dc:	bne	85ec <test_nested_buffer_using_nest+0x40>
    85e0:	mov	r0, r4
    85e4:	mov	r1, #36	; 0x24
    85e8:	bl	0 <flatcc_builder_start_table>
    85ec:	movw	r1, #0
    85f0:	mov	r0, r4
    85f4:	movt	r1, #0
    85f8:	bl	0 <flatcc_builder_create_string_str>
    85fc:	cmp	r0, #0
    8600:	beq	861c <test_nested_buffer_using_nest+0x70>
    8604:	mov	r5, r0
    8608:	mov	r0, r4
    860c:	mov	r1, #3
    8610:	bl	0 <flatcc_builder_table_add_offset>
    8614:	cmp	r0, #0
    8618:	strne	r5, [r0]
    861c:	mov	r0, r4
    8620:	mov	r1, #1
    8624:	mov	r2, #2
    8628:	mov	r3, #2
    862c:	bl	0 <flatcc_builder_table_add>
    8630:	cmp	r0, #0
    8634:	mov	r2, #1
    8638:	movne	r1, #42	; 0x2a
    863c:	strhne	r1, [r0]
    8640:	movw	r1, #0
    8644:	mov	r0, r4
    8648:	movt	r1, #0
    864c:	bl	0 <flatcc_builder_check_required>
    8650:	cmp	r0, #0
    8654:	beq	8920 <test_nested_buffer_using_nest+0x374>
    8658:	mov	r0, r4
    865c:	bl	0 <flatcc_builder_end_table>
    8660:	mov	r1, r0
    8664:	mov	r0, r4
    8668:	bl	0 <flatcc_builder_end_buffer>
    866c:	mov	r0, r4
    8670:	bl	0 <flatcc_builder_get_buffer_size>
    8674:	mov	r5, r0
    8678:	add	r1, sp, #16
    867c:	mov	r0, r4
    8680:	mov	r2, #1024	; 0x400
    8684:	bl	0 <flatcc_builder_copy_buffer>
    8688:	cmp	r0, #0
    868c:	beq	8828 <test_nested_buffer_using_nest+0x27c>
    8690:	mov	r0, r4
    8694:	bl	0 <flatcc_builder_reset>
    8698:	movw	r1, #0
    869c:	mov	r0, r4
    86a0:	mov	r2, #0
    86a4:	mov	r3, #0
    86a8:	movt	r1, #0
    86ac:	bl	0 <flatcc_builder_start_buffer>
    86b0:	cmp	r0, #0
    86b4:	bne	86c4 <test_nested_buffer_using_nest+0x118>
    86b8:	mov	r0, r4
    86bc:	mov	r1, #36	; 0x24
    86c0:	bl	0 <flatcc_builder_start_table>
    86c4:	mvn	r0, #0
    86c8:	mov	r1, #8
    86cc:	mov	r2, r5
    86d0:	mov	r3, #1
    86d4:	str	r1, [sp]
    86d8:	str	r0, [sp, #4]
    86dc:	add	r1, sp, #16
    86e0:	mov	r0, r4
    86e4:	bl	0 <flatcc_builder_create_vector>
    86e8:	cmp	r0, #0
    86ec:	beq	8708 <test_nested_buffer_using_nest+0x15c>
    86f0:	mov	r5, r0
    86f4:	mov	r0, r4
    86f8:	mov	r1, #13
    86fc:	bl	0 <flatcc_builder_table_add_offset>
    8700:	cmp	r0, #0
    8704:	strne	r5, [r0]
    8708:	mov	r0, r4
    870c:	mov	r1, #2
    8710:	mov	r2, #2
    8714:	mov	r3, #2
    8718:	bl	0 <flatcc_builder_table_add>
    871c:	cmp	r0, #0
    8720:	movne	r1, #10
    8724:	strhne	r1, [r0]
    8728:	movw	r1, #0
    872c:	mov	r0, r4
    8730:	movt	r1, #0
    8734:	bl	0 <flatcc_builder_create_string_str>
    8738:	cmp	r0, #0
    873c:	beq	8758 <test_nested_buffer_using_nest+0x1ac>
    8740:	mov	r5, r0
    8744:	mov	r0, r4
    8748:	mov	r1, #3
    874c:	bl	0 <flatcc_builder_table_add_offset>
    8750:	cmp	r0, #0
    8754:	strne	r5, [r0]
    8758:	movw	r1, #0
    875c:	mov	r0, r4
    8760:	mov	r2, #1
    8764:	movt	r1, #0
    8768:	bl	0 <flatcc_builder_check_required>
    876c:	cmp	r0, #0
    8770:	beq	8920 <test_nested_buffer_using_nest+0x374>
    8774:	mov	r0, r4
    8778:	bl	0 <flatcc_builder_end_table>
    877c:	mov	r1, r0
    8780:	mov	r0, r4
    8784:	bl	0 <flatcc_builder_end_buffer>
    8788:	add	r1, sp, #12
    878c:	mov	r0, r4
    8790:	bl	0 <flatcc_builder_get_direct_buffer>
    8794:	mov	r4, r0
    8798:	movw	r0, #0
    879c:	ldr	r2, [sp, #12]
    87a0:	movt	r0, #0
    87a4:	mov	r1, r4
    87a8:	ldr	r3, [r0]
    87ac:	movw	r0, #0
    87b0:	movt	r0, #0
    87b4:	bl	5d4 <hexdump>
    87b8:	cmp	r4, #0
    87bc:	beq	8940 <test_nested_buffer_using_nest+0x394>
    87c0:	ldr	r0, [r4, #4]
    87c4:	movw	r7, #20301	; 0x4f4d
    87c8:	movt	r7, #21326	; 0x534e
    87cc:	cmp	r0, r7
    87d0:	bne	8940 <test_nested_buffer_using_nest+0x394>
    87d4:	ldr	r0, [r4]
    87d8:	ldr	r0, [r4, r0]!
    87dc:	mov	r6, r4
    87e0:	ldrh	r5, [r6, -r0]!
    87e4:	cmp	r5, #11
    87e8:	bls	894c <test_nested_buffer_using_nest+0x3a0>
    87ec:	ldrh	r0, [r6, #10]
    87f0:	cmp	r0, #0
    87f4:	beq	894c <test_nested_buffer_using_nest+0x3a0>
    87f8:	mov	r1, r4
    87fc:	ldr	r0, [r1, r0]!
    8800:	add	r0, r1, r0
    8804:	movw	r1, #0
    8808:	add	r0, r0, #4
    880c:	movt	r1, #0
    8810:	bl	0 <strcmp>
    8814:	cmp	r0, #0
    8818:	beq	8834 <test_nested_buffer_using_nest+0x288>
    881c:	movw	r0, #0
    8820:	movt	r0, #0
    8824:	b	88e4 <test_nested_buffer_using_nest+0x338>
    8828:	movw	r0, #0
    882c:	movt	r0, #0
    8830:	b	88e4 <test_nested_buffer_using_nest+0x338>
    8834:	mov	r8, #0
    8838:	cmp	r5, #32
    883c:	bcc	8868 <test_nested_buffer_using_nest+0x2bc>
    8840:	ldrh	r0, [r6, #30]
    8844:	cmp	r0, #0
    8848:	beq	8868 <test_nested_buffer_using_nest+0x2bc>
    884c:	mov	r1, r4
    8850:	ldr	r0, [r1, r0]!
    8854:	add	r0, r1, r0
    8858:	ldr	r1, [r0, #8]
    885c:	cmp	r1, r7
    8860:	ldreq	r1, [r0, #4]!
    8864:	addeq	r8, r0, r1
    8868:	ldrh	r0, [r6, #8]
    886c:	cmp	r0, #0
    8870:	beq	88dc <test_nested_buffer_using_nest+0x330>
    8874:	add	r0, r4, r0
    8878:	ldrh	r0, [r0]
    887c:	cmp	r0, #10
    8880:	bne	88dc <test_nested_buffer_using_nest+0x330>
    8884:	cmp	r8, #0
    8888:	beq	8940 <test_nested_buffer_using_nest+0x394>
    888c:	ldr	r0, [r8]
    8890:	mov	r4, r8
    8894:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
    8898:	cmp	r0, #12
    889c:	bcc	894c <test_nested_buffer_using_nest+0x3a0>
    88a0:	ldrh	r0, [r4, #10]
    88a4:	cmp	r0, #0
    88a8:	beq	894c <test_nested_buffer_using_nest+0x3a0>
    88ac:	mov	r1, r8
    88b0:	ldr	r0, [r1, r0]!
    88b4:	add	r0, r1, r0
    88b8:	movw	r1, #0
    88bc:	add	r0, r0, #4
    88c0:	movt	r1, #0
    88c4:	bl	0 <strcmp>
    88c8:	cmp	r0, #0
    88cc:	beq	88f4 <test_nested_buffer_using_nest+0x348>
    88d0:	movw	r0, #0
    88d4:	movt	r0, #0
    88d8:	b	88e4 <test_nested_buffer_using_nest+0x338>
    88dc:	movw	r0, #0
    88e0:	movt	r0, #0
    88e4:	bl	0 <puts>
    88e8:	mvn	r0, #0
    88ec:	sub	sp, fp, #24
    88f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    88f4:	ldrh	r0, [r4, #6]
    88f8:	cmp	r0, #0
    88fc:	beq	8914 <test_nested_buffer_using_nest+0x368>
    8900:	add	r0, r8, r0
    8904:	ldrh	r1, [r0]
    8908:	mov	r0, #0
    890c:	cmp	r1, #42	; 0x2a
    8910:	beq	88ec <test_nested_buffer_using_nest+0x340>
    8914:	movw	r0, #0
    8918:	movt	r0, #0
    891c:	b	88e4 <test_nested_buffer_using_nest+0x338>
    8920:	movw	r0, #0
    8924:	movw	r1, #0
    8928:	movw	r3, #0
    892c:	mov	r2, #235	; 0xeb
    8930:	movt	r0, #0
    8934:	movt	r1, #0
    8938:	movt	r3, #0
    893c:	bl	0 <__assert_fail>
    8940:	movw	r0, #0
    8944:	movt	r0, #0
    8948:	b	8954 <test_nested_buffer_using_nest+0x3a8>
    894c:	movw	r0, #0
    8950:	movt	r0, #0
    8954:	movw	r1, #0
    8958:	movw	r3, #0
    895c:	movw	r2, #699	; 0x2bb
    8960:	movt	r1, #0
    8964:	movt	r3, #0
    8968:	bl	0 <__assert_fail>

0000896c <verify_include>:
    896c:	mov	r0, #0
    8970:	bx	lr
    8974:	nop	{0}

00008978 <test_struct_buffer>:
    8978:	push	{r4, r5, r6, sl, fp, lr}
    897c:	add	fp, sp, #16
    8980:	sub	sp, sp, #112	; 0x70
    8984:	mov	r4, r0
    8988:	bl	0 <flatcc_builder_reset>
    898c:	mov	r0, r4
    8990:	mov	r1, #32
    8994:	mov	r2, #16
    8998:	mov	r5, #16
    899c:	bl	0 <flatcc_builder_start_struct>
    89a0:	mov	r6, #0
    89a4:	cmp	r0, #0
    89a8:	mov	r3, #0
    89ac:	beq	8a04 <test_struct_buffer+0x8c>
    89b0:	movw	r1, #52428	; 0xcccc
    89b4:	movw	r2, #52429	; 0xcccd
    89b8:	movw	r3, #0
    89bc:	movt	r2, #52428	; 0xcccc
    89c0:	movt	r1, #16400	; 0x4010
    89c4:	movt	r3, #16448	; 0x4040
    89c8:	str	r2, [r0, #16]
    89cc:	str	r1, [r0, #20]
    89d0:	mov	r2, #1065353216	; 0x3f800000
    89d4:	mov	r1, #1073741824	; 0x40000000
    89d8:	str	r2, [r0]
    89dc:	stmib	r0, {r1, r3}
    89e0:	mov	r1, #8
    89e4:	strb	r1, [r0, #24]
    89e8:	movw	r1, #2730	; 0xaaa
    89ec:	strh	r1, [r0, #26]
    89f0:	mov	r1, #239	; 0xef
    89f4:	strb	r1, [r0, #28]
    89f8:	mov	r0, r4
    89fc:	bl	0 <flatcc_builder_end_struct>
    8a00:	mov	r3, r0
    8a04:	movw	r1, #0
    8a08:	mov	r0, r4
    8a0c:	mov	r2, #0
    8a10:	stm	sp, {r5, r6}
    8a14:	movt	r1, #0
    8a18:	bl	0 <flatcc_builder_create_buffer>
    8a1c:	mov	r0, r4
    8a20:	bl	0 <flatcc_builder_get_buffer_size>
    8a24:	cmp	r0, #48	; 0x30
    8a28:	bne	8b54 <test_struct_buffer+0x1dc>
    8a2c:	movw	r0, #0
    8a30:	mov	r1, #48	; 0x30
    8a34:	movt	r0, #0
    8a38:	bl	0 <printf>
    8a3c:	mov	r0, r4
    8a40:	bl	0 <flatcc_builder_get_emit_context>
    8a44:	ldr	r0, [r0, #24]
    8a48:	cmp	r0, #48	; 0x30
    8a4c:	bne	8b74 <test_struct_buffer+0x1fc>
    8a50:	add	r1, sp, #12
    8a54:	mov	r0, r4
    8a58:	mov	r2, #100	; 0x64
    8a5c:	bl	0 <flatcc_builder_copy_buffer>
    8a60:	cmp	r0, #0
    8a64:	beq	8b30 <test_struct_buffer+0x1b8>
    8a68:	movw	r0, #0
    8a6c:	add	r4, sp, #12
    8a70:	mov	r2, #48	; 0x30
    8a74:	movt	r0, #0
    8a78:	mov	r1, r4
    8a7c:	ldr	r3, [r0]
    8a80:	movw	r0, #0
    8a84:	movt	r0, #0
    8a88:	bl	5d4 <hexdump>
    8a8c:	ldr	r0, [sp, #16]
    8a90:	movw	r1, #20301	; 0x4f4d
    8a94:	movt	r1, #21326	; 0x534e
    8a98:	cmp	r0, r1
    8a9c:	bne	8b3c <test_struct_buffer+0x1c4>
    8aa0:	ldr	r0, [sp, #12]
    8aa4:	vmov.f32	s2, #112	; 0x3f800000  1.0
    8aa8:	add	r0, r4, r0
    8aac:	vldr	s0, [r0]
    8ab0:	vcmp.f32	s0, s2
    8ab4:	vmrs	APSR_nzcv, fpscr
    8ab8:	bne	8b24 <test_struct_buffer+0x1ac>
    8abc:	vldr	s0, [r0, #4]
    8ac0:	vmov.f32	s2, #0	; 0x40000000  2.0
    8ac4:	vcmp.f32	s0, s2
    8ac8:	vmrs	APSR_nzcv, fpscr
    8acc:	bne	8b24 <test_struct_buffer+0x1ac>
    8ad0:	vldr	s0, [r0, #8]
    8ad4:	vmov.f32	s2, #8	; 0x40400000  3.0
    8ad8:	vcmp.f32	s0, s2
    8adc:	vmrs	APSR_nzcv, fpscr
    8ae0:	bne	8b24 <test_struct_buffer+0x1ac>
    8ae4:	vldr	d16, [pc, #172]	; 8b98 <test_struct_buffer+0x220>
    8ae8:	vldr	d17, [r0, #16]
    8aec:	vcmp.f64	d17, d16
    8af0:	vmrs	APSR_nzcv, fpscr
    8af4:	bne	8b24 <test_struct_buffer+0x1ac>
    8af8:	ldrb	r1, [r0, #24]
    8afc:	cmp	r1, #8
    8b00:	bne	8b24 <test_struct_buffer+0x1ac>
    8b04:	ldrh	r1, [r0, #26]
    8b08:	movw	r2, #2730	; 0xaaa
    8b0c:	cmp	r1, r2
    8b10:	bne	8b24 <test_struct_buffer+0x1ac>
    8b14:	ldrb	r1, [r0, #28]
    8b18:	mov	r0, #0
    8b1c:	cmp	r1, #239	; 0xef
    8b20:	beq	8b4c <test_struct_buffer+0x1d4>
    8b24:	movw	r0, #0
    8b28:	movt	r0, #0
    8b2c:	b	8b44 <test_struct_buffer+0x1cc>
    8b30:	movw	r0, #0
    8b34:	movt	r0, #0
    8b38:	b	8b44 <test_struct_buffer+0x1cc>
    8b3c:	movw	r0, #0
    8b40:	movt	r0, #0
    8b44:	bl	0 <puts>
    8b48:	mvn	r0, #0
    8b4c:	sub	sp, fp, #16
    8b50:	pop	{r4, r5, r6, sl, fp, pc}
    8b54:	movw	r0, #0
    8b58:	movw	r1, #0
    8b5c:	movw	r3, #0
    8b60:	movw	r2, #2339	; 0x923
    8b64:	movt	r0, #0
    8b68:	movt	r1, #0
    8b6c:	movt	r3, #0
    8b70:	bl	0 <__assert_fail>
    8b74:	movw	r0, #0
    8b78:	movw	r1, #0
    8b7c:	movw	r3, #0
    8b80:	movw	r2, #2341	; 0x925
    8b84:	movt	r0, #0
    8b88:	movt	r1, #0
    8b8c:	movt	r3, #0
    8b90:	bl	0 <__assert_fail>
    8b94:	nop	{0}
    8b98:	.word	0xcccccccd
    8b9c:	.word	0x4010cccc

00008ba0 <test_typed_struct_buffer>:
    8ba0:	push	{r4, r5, r6, sl, fp, lr}
    8ba4:	add	fp, sp, #16
    8ba8:	sub	sp, sp, #112	; 0x70
    8bac:	mov	r4, r0
    8bb0:	bl	0 <flatcc_builder_reset>
    8bb4:	mov	r0, r4
    8bb8:	mov	r1, #32
    8bbc:	mov	r2, #16
    8bc0:	mov	r5, #16
    8bc4:	bl	0 <flatcc_builder_start_struct>
    8bc8:	mov	r6, #0
    8bcc:	cmp	r0, #0
    8bd0:	mov	r3, #0
    8bd4:	beq	8c2c <test_typed_struct_buffer+0x8c>
    8bd8:	movw	r1, #52428	; 0xcccc
    8bdc:	movw	r2, #52429	; 0xcccd
    8be0:	movw	r3, #0
    8be4:	movt	r2, #52428	; 0xcccc
    8be8:	movt	r1, #16400	; 0x4010
    8bec:	movt	r3, #16448	; 0x4040
    8bf0:	str	r2, [r0, #16]
    8bf4:	str	r1, [r0, #20]
    8bf8:	mov	r2, #1065353216	; 0x3f800000
    8bfc:	mov	r1, #1073741824	; 0x40000000
    8c00:	str	r2, [r0]
    8c04:	stmib	r0, {r1, r3}
    8c08:	mov	r1, #8
    8c0c:	strb	r1, [r0, #24]
    8c10:	movw	r1, #2730	; 0xaaa
    8c14:	strh	r1, [r0, #26]
    8c18:	mov	r1, #239	; 0xef
    8c1c:	strb	r1, [r0, #28]
    8c20:	mov	r0, r4
    8c24:	bl	0 <flatcc_builder_end_struct>
    8c28:	mov	r3, r0
    8c2c:	movw	r1, #0
    8c30:	mov	r0, r4
    8c34:	mov	r2, #0
    8c38:	stm	sp, {r5, r6}
    8c3c:	movt	r1, #0
    8c40:	bl	0 <flatcc_builder_create_buffer>
    8c44:	mov	r0, r4
    8c48:	bl	0 <flatcc_builder_get_buffer_size>
    8c4c:	cmp	r0, #48	; 0x30
    8c50:	bne	8df4 <test_typed_struct_buffer+0x254>
    8c54:	movw	r0, #0
    8c58:	mov	r1, #48	; 0x30
    8c5c:	movt	r0, #0
    8c60:	bl	0 <printf>
    8c64:	mov	r0, r4
    8c68:	bl	0 <flatcc_builder_get_emit_context>
    8c6c:	ldr	r0, [r0, #24]
    8c70:	cmp	r0, #48	; 0x30
    8c74:	bne	8e14 <test_typed_struct_buffer+0x274>
    8c78:	add	r1, sp, #12
    8c7c:	mov	r0, r4
    8c80:	mov	r2, #100	; 0x64
    8c84:	bl	0 <flatcc_builder_copy_buffer>
    8c88:	cmp	r0, #0
    8c8c:	beq	8cf8 <test_typed_struct_buffer+0x158>
    8c90:	movw	r0, #0
    8c94:	add	r1, sp, #12
    8c98:	mov	r2, #48	; 0x30
    8c9c:	movt	r0, #0
    8ca0:	ldr	r3, [r0]
    8ca4:	movw	r0, #0
    8ca8:	movt	r0, #0
    8cac:	bl	5d4 <hexdump>
    8cb0:	ldr	r0, [sp, #16]
    8cb4:	movw	r4, #16082	; 0x3ed2
    8cb8:	movt	r4, #43253	; 0xa8f5
    8cbc:	cmp	r0, r4
    8cc0:	bne	8d04 <test_typed_struct_buffer+0x164>
    8cc4:	mov	r0, #16
    8cc8:	add	r5, sp, #12
    8ccc:	mov	r1, #48	; 0x30
    8cd0:	mov	r2, r4
    8cd4:	mov	r3, #32
    8cd8:	str	r0, [sp]
    8cdc:	mov	r0, r5
    8ce0:	bl	0 <flatcc_verify_struct_as_typed_root>
    8ce4:	cmp	r0, #0
    8ce8:	beq	8d1c <test_typed_struct_buffer+0x17c>
    8cec:	movw	r0, #0
    8cf0:	movt	r0, #0
    8cf4:	b	8d0c <test_typed_struct_buffer+0x16c>
    8cf8:	movw	r0, #0
    8cfc:	movt	r0, #0
    8d00:	b	8d0c <test_typed_struct_buffer+0x16c>
    8d04:	movw	r0, #0
    8d08:	movt	r0, #0
    8d0c:	bl	0 <puts>
    8d10:	mvn	r0, #0
    8d14:	sub	sp, fp, #16
    8d18:	pop	{r4, r5, r6, sl, fp, pc}
    8d1c:	ldr	r0, [sp, #16]
    8d20:	cmp	r0, r4
    8d24:	bne	8d5c <test_typed_struct_buffer+0x1bc>
    8d28:	ldr	r6, [sp, #12]
    8d2c:	mov	r0, #16
    8d30:	mov	r1, #48	; 0x30
    8d34:	mov	r2, r4
    8d38:	mov	r3, #32
    8d3c:	str	r0, [sp]
    8d40:	mov	r0, r5
    8d44:	bl	0 <flatcc_verify_struct_as_typed_root>
    8d48:	cmp	r0, #0
    8d4c:	beq	8d68 <test_typed_struct_buffer+0x1c8>
    8d50:	movw	r0, #0
    8d54:	movt	r0, #0
    8d58:	b	8d0c <test_typed_struct_buffer+0x16c>
    8d5c:	movw	r0, #0
    8d60:	movt	r0, #0
    8d64:	b	8d0c <test_typed_struct_buffer+0x16c>
    8d68:	add	r0, r5, r6
    8d6c:	vmov.f32	s2, #112	; 0x3f800000  1.0
    8d70:	vldr	s0, [r0]
    8d74:	vcmp.f32	s0, s2
    8d78:	vmrs	APSR_nzcv, fpscr
    8d7c:	bne	8de8 <test_typed_struct_buffer+0x248>
    8d80:	vldr	s0, [r0, #4]
    8d84:	vmov.f32	s2, #0	; 0x40000000  2.0
    8d88:	vcmp.f32	s0, s2
    8d8c:	vmrs	APSR_nzcv, fpscr
    8d90:	bne	8de8 <test_typed_struct_buffer+0x248>
    8d94:	vldr	s0, [r0, #8]
    8d98:	vmov.f32	s2, #8	; 0x40400000  3.0
    8d9c:	vcmp.f32	s0, s2
    8da0:	vmrs	APSR_nzcv, fpscr
    8da4:	bne	8de8 <test_typed_struct_buffer+0x248>
    8da8:	vldr	d16, [pc, #136]	; 8e38 <test_typed_struct_buffer+0x298>
    8dac:	vldr	d17, [r0, #16]
    8db0:	vcmp.f64	d17, d16
    8db4:	vmrs	APSR_nzcv, fpscr
    8db8:	bne	8de8 <test_typed_struct_buffer+0x248>
    8dbc:	ldrb	r1, [r0, #24]
    8dc0:	cmp	r1, #8
    8dc4:	bne	8de8 <test_typed_struct_buffer+0x248>
    8dc8:	ldrh	r1, [r0, #26]
    8dcc:	movw	r2, #2730	; 0xaaa
    8dd0:	cmp	r1, r2
    8dd4:	bne	8de8 <test_typed_struct_buffer+0x248>
    8dd8:	ldrb	r1, [r0, #28]
    8ddc:	mov	r0, #0
    8de0:	cmp	r1, #239	; 0xef
    8de4:	beq	8d14 <test_typed_struct_buffer+0x174>
    8de8:	movw	r0, #0
    8dec:	movt	r0, #0
    8df0:	b	8d0c <test_typed_struct_buffer+0x16c>
    8df4:	movw	r0, #0
    8df8:	movw	r1, #0
    8dfc:	movw	r3, #0
    8e00:	movw	r2, #2388	; 0x954
    8e04:	movt	r0, #0
    8e08:	movt	r1, #0
    8e0c:	movt	r3, #0
    8e10:	bl	0 <__assert_fail>
    8e14:	movw	r0, #0
    8e18:	movw	r1, #0
    8e1c:	movw	r3, #0
    8e20:	movw	r2, #2390	; 0x956
    8e24:	movt	r0, #0
    8e28:	movt	r1, #0
    8e2c:	movt	r3, #0
    8e30:	bl	0 <__assert_fail>
    8e34:	nop	{0}
    8e38:	.word	0xcccccccd
    8e3c:	.word	0x4010cccc

00008e40 <gen_monster_benchmark>:
    8e40:	push	{r4, r5, fp, lr}
    8e44:	add	fp, sp, #8
    8e48:	sub	sp, sp, #24
    8e4c:	mov	r4, r0
    8e50:	movw	r0, #0
    8e54:	movt	r0, #0
    8e58:	vldr	d16, [r0]
    8e5c:	movw	r0, #2312	; 0x908
    8e60:	strh	r0, [sp, #16]
    8e64:	mov	r0, r4
    8e68:	vstr	d16, [sp, #8]
    8e6c:	bl	0 <flatcc_builder_reset>
    8e70:	movw	r1, #0
    8e74:	mov	r0, r4
    8e78:	mov	r2, #0
    8e7c:	mov	r3, #0
    8e80:	movt	r1, #0
    8e84:	bl	0 <flatcc_builder_start_buffer>
    8e88:	cmp	r0, #0
    8e8c:	bne	8e9c <gen_monster_benchmark+0x5c>
    8e90:	mov	r0, r4
    8e94:	mov	r1, #36	; 0x24
    8e98:	bl	0 <flatcc_builder_start_table>
    8e9c:	mov	r0, r4
    8ea0:	mov	r1, #2
    8ea4:	mov	r2, #2
    8ea8:	mov	r3, #2
    8eac:	bl	0 <flatcc_builder_table_add>
    8eb0:	cmp	r0, #0
    8eb4:	mov	r2, #32
    8eb8:	mov	r3, #16
    8ebc:	movne	r1, #80	; 0x50
    8ec0:	strhne	r1, [r0]
    8ec4:	mov	r0, r4
    8ec8:	mov	r1, #0
    8ecc:	bl	0 <flatcc_builder_table_add>
    8ed0:	movw	r3, #52429	; 0xcccd
    8ed4:	mov	r1, #1065353216	; 0x3f800000
    8ed8:	mov	r2, #1073741824	; 0x40000000
    8edc:	movt	r3, #49228	; 0xc04c
    8ee0:	stm	r0, {r1, r2, r3}
    8ee4:	movw	r1, #0
    8ee8:	mov	r0, r4
    8eec:	movt	r1, #0
    8ef0:	bl	0 <flatcc_builder_create_string_str>
    8ef4:	cmp	r0, #0
    8ef8:	beq	8f14 <gen_monster_benchmark+0xd4>
    8efc:	mov	r5, r0
    8f00:	mov	r0, r4
    8f04:	mov	r1, #3
    8f08:	bl	0 <flatcc_builder_table_add_offset>
    8f0c:	cmp	r0, #0
    8f10:	strne	r5, [r0]
    8f14:	mvn	r0, #0
    8f18:	mov	r1, #1
    8f1c:	mov	r2, #10
    8f20:	mov	r3, #1
    8f24:	str	r1, [sp]
    8f28:	str	r0, [sp, #4]
    8f2c:	add	r1, sp, #8
    8f30:	mov	r0, r4
    8f34:	bl	0 <flatcc_builder_create_vector>
    8f38:	cmp	r0, #0
    8f3c:	beq	8f58 <gen_monster_benchmark+0x118>
    8f40:	mov	r5, r0
    8f44:	mov	r0, r4
    8f48:	mov	r1, #5
    8f4c:	bl	0 <flatcc_builder_table_add_offset>
    8f50:	cmp	r0, #0
    8f54:	strne	r5, [r0]
    8f58:	mov	r0, r4
    8f5c:	mov	r1, #4
    8f60:	mov	r2, #2
    8f64:	mvn	r3, #-1073741824	; 0xc0000000
    8f68:	bl	0 <flatcc_builder_start_vector>
    8f6c:	mov	r0, r4
    8f70:	mov	r1, #1
    8f74:	bl	0 <flatcc_builder_extend_vector>
    8f78:	mov	r1, #16
    8f7c:	strh	r1, [r0]
    8f80:	mov	r1, #32
    8f84:	strb	r1, [r0, #2]
    8f88:	mov	r0, r4
    8f8c:	mov	r1, #2
    8f90:	bl	0 <flatcc_builder_extend_vector>
    8f94:	mov	r1, #48	; 0x30
    8f98:	strh	r1, [r0]
    8f9c:	mov	r1, #64	; 0x40
    8fa0:	strb	r1, [r0, #2]
    8fa4:	mov	r1, #80	; 0x50
    8fa8:	strh	r1, [r0, #4]
    8fac:	mov	r1, #96	; 0x60
    8fb0:	strb	r1, [r0, #6]
    8fb4:	mov	r0, r4
    8fb8:	mov	r1, #1
    8fbc:	bl	0 <flatcc_builder_extend_vector>
    8fc0:	cmp	r0, #0
    8fc4:	movne	r1, #128	; 0x80
    8fc8:	strbne	r1, [r0, #2]
    8fcc:	movne	r1, #112	; 0x70
    8fd0:	strhne	r1, [r0]
    8fd4:	mov	r0, r4
    8fd8:	mov	r1, #1
    8fdc:	bl	0 <flatcc_builder_extend_vector>
    8fe0:	cmp	r0, #0
    8fe4:	movwne	r1, #401	; 0x191
    8fe8:	movtne	r1, #145	; 0x91
    8fec:	strne	r1, [r0]
    8ff0:	mov	r0, r4
    8ff4:	bl	0 <flatcc_builder_end_vector>
    8ff8:	cmp	r0, #0
    8ffc:	beq	9018 <gen_monster_benchmark+0x1d8>
    9000:	mov	r5, r0
    9004:	mov	r0, r4
    9008:	mov	r1, #9
    900c:	bl	0 <flatcc_builder_table_add_offset>
    9010:	cmp	r0, #0
    9014:	strne	r5, [r0]
    9018:	movw	r1, #0
    901c:	mov	r0, r4
    9020:	mov	r2, #1
    9024:	movt	r1, #0
    9028:	bl	0 <flatcc_builder_check_required>
    902c:	cmp	r0, #0
    9030:	beq	9054 <gen_monster_benchmark+0x214>
    9034:	mov	r0, r4
    9038:	bl	0 <flatcc_builder_end_table>
    903c:	mov	r1, r0
    9040:	mov	r0, r4
    9044:	bl	0 <flatcc_builder_end_buffer>
    9048:	mov	r0, #0
    904c:	sub	sp, fp, #8
    9050:	pop	{r4, r5, fp, pc}
    9054:	movw	r0, #0
    9058:	movw	r1, #0
    905c:	movw	r3, #0
    9060:	mov	r2, #235	; 0xeb
    9064:	movt	r0, #0
    9068:	movt	r1, #0
    906c:	movt	r3, #0
    9070:	bl	0 <__assert_fail>
    9074:	nop	{0}

00009078 <time_monster>:
    9078:	push	{r4, r5, r6, r7, fp, lr}
    907c:	add	fp, sp, #16
    9080:	vpush	{d8-d9}
    9084:	sub	sp, sp, #8
    9088:	mov	r4, r0
    908c:	movw	r0, #0
    9090:	movt	r0, #0
    9094:	bl	0 <puts>
    9098:	mov	r0, sp
    909c:	mov	r1, #0
    90a0:	bl	0 <gettimeofday>
    90a4:	movw	r5, #0
    90a8:	movt	r5, #0
    90ac:	ldr	r0, [r5]
    90b0:	cmp	r0, #0
    90b4:	beq	90c4 <time_monster+0x4c>
    90b8:	ldr	r1, [r5, #4]
    90bc:	ldr	r2, [sp]
    90c0:	b	90d0 <time_monster+0x58>
    90c4:	ldm	sp, {r0, r1}
    90c8:	mov	r2, r0
    90cc:	strd	r0, [r5]
    90d0:	ldr	r3, [sp, #4]
    90d4:	vldr	d8, [pc, #180]	; 9190 <time_monster+0x118>
    90d8:	movw	r7, #16960	; 0x4240
    90dc:	sub	r6, r2, r0
    90e0:	movt	r7, #15
    90e4:	sub	r1, r3, r1
    90e8:	vmov	s0, r1
    90ec:	vcvt.f64.s32	d16, s0
    90f0:	vdiv.f64	d9, d16, d8
    90f4:	mov	r0, r4
    90f8:	bl	8e40 <gen_monster_benchmark>
    90fc:	subs	r7, r7, #1
    9100:	bne	90f4 <time_monster+0x7c>
    9104:	mov	r0, r4
    9108:	bl	0 <flatcc_builder_get_buffer_size>
    910c:	mov	r4, r0
    9110:	mov	r0, sp
    9114:	mov	r1, #0
    9118:	bl	0 <gettimeofday>
    911c:	vmov	s0, r6
    9120:	vcvt.f64.s32	d16, s0
    9124:	ldr	r0, [r5]
    9128:	vadd.f64	d0, d9, d16
    912c:	cmp	r0, #0
    9130:	beq	9140 <time_monster+0xc8>
    9134:	ldr	r1, [r5, #4]
    9138:	ldr	r2, [sp]
    913c:	b	914c <time_monster+0xd4>
    9140:	ldm	sp, {r0, r1}
    9144:	mov	r2, r0
    9148:	strd	r0, [r5]
    914c:	sub	r0, r2, r0
    9150:	ldr	r2, [sp, #4]
    9154:	vmov	s4, r0
    9158:	movw	r0, #0
    915c:	movt	r0, #0
    9160:	sub	r1, r2, r1
    9164:	vmov	s2, r1
    9168:	mov	r1, r4
    916c:	vcvt.f64.s32	d16, s2
    9170:	vcvt.f64.s32	d17, s4
    9174:	vdiv.f64	d16, d16, d8
    9178:	vadd.f64	d1, d16, d17
    917c:	bl	9198 <show_benchmark>
    9180:	mov	r0, #0
    9184:	sub	sp, fp, #32
    9188:	vpop	{d8-d9}
    918c:	pop	{r4, r5, r6, r7, fp, pc}
    9190:	.word	0x00000000
    9194:	.word	0x412e8480

00009198 <show_benchmark>:
    9198:	push	{r4, sl, fp, lr}
    919c:	add	fp, sp, #8
    91a0:	vpush	{d8-d9}
    91a4:	mov	r4, r1
    91a8:	mov	r1, r0
    91ac:	movw	r0, #0
    91b0:	vmov.f64	d8, d1
    91b4:	vmov.f64	d9, d0
    91b8:	movt	r0, #0
    91bc:	bl	0 <printf>
    91c0:	movw	r0, #0
    91c4:	vsub.f64	d9, d8, d9
    91c8:	vmov	r2, r3, d9
    91cc:	movt	r0, #0
    91d0:	bl	0 <printf>
    91d4:	movw	r0, #0
    91d8:	movw	r1, #16960	; 0x4240
    91dc:	movt	r0, #0
    91e0:	movt	r1, #15
    91e4:	bl	0 <printf>
    91e8:	movw	r0, #0
    91ec:	mov	r1, r4
    91f0:	movt	r0, #0
    91f4:	bl	0 <printf>
    91f8:	vldr	d8, [pc, #224]	; 92e0 <show_benchmark+0x148>
    91fc:	vmov	s0, r4
    9200:	movw	r0, #0
    9204:	vcvt.f64.u32	d16, s0
    9208:	movt	r0, #0
    920c:	vmul.f64	d16, d16, d8
    9210:	vdiv.f64	d16, d16, d8
    9214:	vdiv.f64	d16, d16, d9
    9218:	vmov	r2, r3, d16
    921c:	bl	0 <printf>
    9220:	movw	r0, #0
    9224:	vdiv.f64	d16, d8, d9
    9228:	vmov	r2, r3, d16
    922c:	movt	r0, #0
    9230:	bl	0 <printf>
    9234:	vmov.f64	d16, #112	; 0x3f800000  1.0
    9238:	movw	r0, #0
    923c:	movw	r1, #0
    9240:	vdiv.f64	d16, d16, d9
    9244:	movt	r0, #0
    9248:	movt	r1, #0
    924c:	vmov	r2, r3, d16
    9250:	bl	0 <printf>
    9254:	vldr	d17, [pc, #140]	; 92e8 <show_benchmark+0x150>
    9258:	vldr	d18, [pc, #144]	; 92f0 <show_benchmark+0x158>
    925c:	vmul.f64	d16, d9, d17
    9260:	vdiv.f64	d16, d16, d8
    9264:	vcmpe.f64	d16, d18
    9268:	vmrs	APSR_nzcv, fpscr
    926c:	bpl	9280 <show_benchmark+0xe8>
    9270:	movw	r0, #0
    9274:	vmov	r2, r3, d16
    9278:	movt	r0, #0
    927c:	b	92d0 <show_benchmark+0x138>
    9280:	vcmpe.f64	d16, d8
    9284:	vmrs	APSR_nzcv, fpscr
    9288:	bpl	92a0 <show_benchmark+0x108>
    928c:	movw	r0, #0
    9290:	vdiv.f64	d16, d16, d18
    9294:	vmov	r2, r3, d16
    9298:	movt	r0, #0
    929c:	b	92d0 <show_benchmark+0x138>
    92a0:	vcmpe.f64	d16, d17
    92a4:	vmrs	APSR_nzcv, fpscr
    92a8:	bpl	92c0 <show_benchmark+0x128>
    92ac:	movw	r0, #0
    92b0:	vdiv.f64	d16, d16, d8
    92b4:	vmov	r2, r3, d16
    92b8:	movt	r0, #0
    92bc:	b	92d0 <show_benchmark+0x138>
    92c0:	movw	r0, #0
    92c4:	vdiv.f64	d16, d16, d17
    92c8:	vmov	r2, r3, d16
    92cc:	movt	r0, #0
    92d0:	vpop	{d8-d9}
    92d4:	pop	{r4, sl, fp, lr}
    92d8:	b	0 <printf>
    92dc:	nop	{0}
    92e0:	.word	0x00000000
    92e4:	.word	0x412e8480
    92e8:	.word	0x00000000
    92ec:	.word	0x41cdcd65
    92f0:	.word	0x00000000
    92f4:	.word	0x408f4000

000092f8 <gen_struct_buffer_benchmark>:
    92f8:	push	{r4, r5, r6, sl, fp, lr}
    92fc:	add	fp, sp, #16
    9300:	sub	sp, sp, #8
    9304:	mov	r4, r0
    9308:	bl	0 <flatcc_builder_reset>
    930c:	mov	r0, r4
    9310:	mov	r1, #32
    9314:	mov	r2, #16
    9318:	mov	r5, #16
    931c:	bl	0 <flatcc_builder_start_struct>
    9320:	mov	r6, #0
    9324:	cmp	r0, #0
    9328:	mov	r3, #0
    932c:	beq	9384 <gen_struct_buffer_benchmark+0x8c>
    9330:	movw	r1, #52428	; 0xcccc
    9334:	movw	r2, #52429	; 0xcccd
    9338:	movw	r3, #0
    933c:	movt	r2, #52428	; 0xcccc
    9340:	movt	r1, #16400	; 0x4010
    9344:	movt	r3, #16448	; 0x4040
    9348:	str	r2, [r0, #16]
    934c:	str	r1, [r0, #20]
    9350:	mov	r2, #1065353216	; 0x3f800000
    9354:	mov	r1, #1073741824	; 0x40000000
    9358:	str	r2, [r0]
    935c:	stmib	r0, {r1, r3}
    9360:	mov	r1, #8
    9364:	strb	r1, [r0, #24]
    9368:	movw	r1, #2730	; 0xaaa
    936c:	strh	r1, [r0, #26]
    9370:	mov	r1, #239	; 0xef
    9374:	strb	r1, [r0, #28]
    9378:	mov	r0, r4
    937c:	bl	0 <flatcc_builder_end_struct>
    9380:	mov	r3, r0
    9384:	movw	r1, #0
    9388:	mov	r0, r4
    938c:	mov	r2, #0
    9390:	stm	sp, {r5, r6}
    9394:	movt	r1, #0
    9398:	bl	0 <flatcc_builder_create_buffer>
    939c:	mov	r0, r4
    93a0:	mov	r1, #0
    93a4:	bl	0 <flatcc_builder_get_direct_buffer>
    93a8:	cmp	r0, #0
    93ac:	beq	9438 <gen_struct_buffer_benchmark+0x140>
    93b0:	ldr	r1, [r0]
    93b4:	vmov.f32	s2, #112	; 0x3f800000  1.0
    93b8:	add	r0, r0, r1
    93bc:	vldr	s0, [r0]
    93c0:	vcmp.f32	s0, s2
    93c4:	vmrs	APSR_nzcv, fpscr
    93c8:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    93cc:	vldr	s0, [r0, #4]
    93d0:	vmov.f32	s2, #0	; 0x40000000  2.0
    93d4:	vcmp.f32	s0, s2
    93d8:	vmrs	APSR_nzcv, fpscr
    93dc:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    93e0:	vldr	s0, [r0, #8]
    93e4:	vmov.f32	s2, #8	; 0x40400000  3.0
    93e8:	vcmp.f32	s0, s2
    93ec:	vmrs	APSR_nzcv, fpscr
    93f0:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    93f4:	vldr	d16, [pc, #76]	; 9448 <gen_struct_buffer_benchmark+0x150>
    93f8:	vldr	d17, [r0, #16]
    93fc:	vcmp.f64	d17, d16
    9400:	vmrs	APSR_nzcv, fpscr
    9404:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    9408:	ldrb	r1, [r0, #24]
    940c:	cmp	r1, #8
    9410:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    9414:	ldrh	r1, [r0, #26]
    9418:	movw	r2, #2730	; 0xaaa
    941c:	cmp	r1, r2
    9420:	bne	9438 <gen_struct_buffer_benchmark+0x140>
    9424:	ldrb	r0, [r0, #28]
    9428:	subs	r0, r0, #239	; 0xef
    942c:	mvnne	r0, #0
    9430:	sub	sp, fp, #16
    9434:	pop	{r4, r5, r6, sl, fp, pc}
    9438:	mvn	r0, #0
    943c:	sub	sp, fp, #16
    9440:	pop	{r4, r5, r6, sl, fp, pc}
    9444:	nop	{0}
    9448:	.word	0xcccccccd
    944c:	.word	0x4010cccc

00009450 <time_struct_buffer>:
    9450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    9454:	add	fp, sp, #24
    9458:	vpush	{d8-d9}
    945c:	sub	sp, sp, #8
    9460:	mov	r4, r0
    9464:	movw	r0, #0
    9468:	movt	r0, #0
    946c:	bl	0 <puts>
    9470:	mov	r0, sp
    9474:	mov	r1, #0
    9478:	bl	0 <gettimeofday>
    947c:	movw	r8, #0
    9480:	movt	r8, #0
    9484:	ldr	r0, [r8]
    9488:	cmp	r0, #0
    948c:	beq	949c <time_struct_buffer+0x4c>
    9490:	ldr	r1, [r8, #4]
    9494:	ldr	r2, [sp]
    9498:	b	94a8 <time_struct_buffer+0x58>
    949c:	ldm	sp, {r0, r1}
    94a0:	mov	r2, r0
    94a4:	strd	r0, [r8]
    94a8:	ldr	r3, [sp, #4]
    94ac:	vldr	d9, [pc, #220]	; 9590 <time_struct_buffer+0x140>
    94b0:	movw	r6, #16960	; 0x4240
    94b4:	sub	r7, r2, r0
    94b8:	mov	r5, #0
    94bc:	movt	r6, #15
    94c0:	sub	r1, r3, r1
    94c4:	vmov	s0, r1
    94c8:	vcvt.f64.s32	d16, s0
    94cc:	vdiv.f64	d8, d16, d9
    94d0:	mov	r0, r4
    94d4:	bl	92f8 <gen_struct_buffer_benchmark>
    94d8:	orr	r5, r0, r5
    94dc:	subs	r6, r6, #1
    94e0:	bne	94d0 <time_struct_buffer+0x80>
    94e4:	mov	r0, sp
    94e8:	mov	r1, #0
    94ec:	bl	0 <gettimeofday>
    94f0:	vmov	s0, r7
    94f4:	vcvt.f64.s32	d16, s0
    94f8:	ldr	r0, [r8]
    94fc:	cmp	r0, #0
    9500:	beq	9510 <time_struct_buffer+0xc0>
    9504:	ldr	r1, [r8, #4]
    9508:	ldr	r2, [sp]
    950c:	b	951c <time_struct_buffer+0xcc>
    9510:	ldm	sp, {r0, r1}
    9514:	mov	r2, r0
    9518:	strd	r0, [r8]
    951c:	sub	r0, r2, r0
    9520:	ldr	r2, [sp, #4]
    9524:	vadd.f64	d8, d8, d16
    9528:	vmov	s2, r0
    952c:	mov	r0, r4
    9530:	sub	r1, r2, r1
    9534:	vmov	s0, r1
    9538:	vcvt.f64.s32	d16, s0
    953c:	vcvt.f64.s32	d17, s2
    9540:	vdiv.f64	d16, d16, d9
    9544:	vadd.f64	d9, d16, d17
    9548:	bl	0 <flatcc_builder_get_buffer_size>
    954c:	mov	r4, r0
    9550:	cmp	r5, #0
    9554:	beq	9564 <time_struct_buffer+0x114>
    9558:	movw	r0, #0
    955c:	movt	r0, #0
    9560:	bl	0 <puts>
    9564:	movw	r0, #0
    9568:	vmov.f64	d0, d8
    956c:	vmov.f64	d1, d9
    9570:	mov	r1, r4
    9574:	movt	r0, #0
    9578:	bl	9198 <show_benchmark>
    957c:	mov	r0, r5
    9580:	sub	sp, fp, #40	; 0x28
    9584:	vpop	{d8-d9}
    9588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    958c:	nop	{0}
    9590:	.word	0x00000000
    9594:	.word	0x412e8480

00009598 <main>:
    9598:	push	{r4, sl, fp, lr}
    959c:	add	fp, sp, #8
    95a0:	sub	sp, sp, #232	; 0xe8
    95a4:	mov	r4, sp
    95a8:	mov	r0, r4
    95ac:	bl	0 <flatcc_builder_init>
    95b0:	movw	r0, #0
    95b4:	movt	r0, #0
    95b8:	bl	0 <puts>
    95bc:	mov	r0, r4
    95c0:	bl	bfc <test_table_with_emptystruct>
    95c4:	cmp	r0, #0
    95c8:	bne	970c <main+0x174>
    95cc:	mov	r0, sp
    95d0:	bl	704 <test_empty_monster>
    95d4:	cmp	r0, #0
    95d8:	bne	970c <main+0x174>
    95dc:	mov	r0, sp
    95e0:	bl	24cc <test_monster>
    95e4:	cmp	r0, #0
    95e8:	bne	970c <main+0x174>
    95ec:	mov	r0, sp
    95f0:	bl	2574 <test_monster_with_size>
    95f4:	cmp	r0, #0
    95f8:	bne	970c <main+0x174>
    95fc:	mov	r0, sp
    9600:	bl	2668 <test_string>
    9604:	cmp	r0, #0
    9608:	bne	970c <main+0x174>
    960c:	mov	r0, sp
    9610:	bl	8978 <test_struct_buffer>
    9614:	cmp	r0, #0
    9618:	bne	970c <main+0x174>
    961c:	mov	r0, sp
    9620:	bl	918 <test_typed_empty_monster>
    9624:	cmp	r0, #0
    9628:	bne	970c <main+0x174>
    962c:	mov	r0, sp
    9630:	bl	d6c <test_typed_table_with_emptystruct>
    9634:	cmp	r0, #0
    9638:	bne	970c <main+0x174>
    963c:	mov	r0, sp
    9640:	bl	8ba0 <test_typed_struct_buffer>
    9644:	cmp	r0, #0
    9648:	bne	970c <main+0x174>
    964c:	mov	r0, sp
    9650:	bl	5dcc <test_clone_slice>
    9654:	cmp	r0, #0
    9658:	bne	970c <main+0x174>
    965c:	mov	r0, sp
    9660:	bl	7c50 <test_add_set_defaults>
    9664:	cmp	r0, #0
    9668:	bne	970c <main+0x174>
    966c:	mov	r0, sp
    9670:	bl	6800 <test_create_add_field>
    9674:	cmp	r0, #0
    9678:	bne	970c <main+0x174>
    967c:	mov	r0, sp
    9680:	bl	6ae0 <test_union_vector>
    9684:	cmp	r0, #0
    9688:	bne	970c <main+0x174>
    968c:	mov	r0, sp
    9690:	bl	59f4 <test_basic_sort>
    9694:	cmp	r0, #0
    9698:	bne	970c <main+0x174>
    969c:	mov	r0, sp
    96a0:	bl	2924 <test_sort_find>
    96a4:	cmp	r0, #0
    96a8:	bne	970c <main+0x174>
    96ac:	mov	r0, sp
    96b0:	bl	35f0 <test_scan>
    96b4:	cmp	r0, #0
    96b8:	bne	970c <main+0x174>
    96bc:	mov	r0, sp
    96c0:	bl	7f6c <test_nested_buffer>
    96c4:	cmp	r0, #0
    96c8:	bne	970c <main+0x174>
    96cc:	mov	r0, sp
    96d0:	bl	828c <test_nested_buffer_first>
    96d4:	cmp	r0, #0
    96d8:	bne	970c <main+0x174>
    96dc:	mov	r0, sp
    96e0:	bl	85ac <test_nested_buffer_using_nest>
    96e4:	cmp	r0, #0
    96e8:	bne	970c <main+0x174>
    96ec:	mov	r0, sp
    96f0:	bl	b8 <test_type_aliases>
    96f4:	cmp	r0, #0
    96f8:	bne	970c <main+0x174>
    96fc:	mov	r0, sp
    9700:	bl	703c <test_mixed_type_union>
    9704:	cmp	r0, #0
    9708:	beq	9724 <main+0x18c>
    970c:	movw	r0, #0
    9710:	movt	r0, #0
    9714:	bl	0 <puts>
    9718:	mvn	r0, #0
    971c:	sub	sp, fp, #8
    9720:	pop	{r4, sl, fp, pc}
    9724:	mov	r0, sp
    9728:	bl	0 <flatcc_builder_clear>
    972c:	mov	r0, #0
    9730:	sub	sp, fp, #8
    9734:	pop	{r4, sl, fp, pc}

00009738 <MyGame_Example_TypeAliases_verify_table>:
    9738:	push	{r4, sl, fp, lr}
    973c:	add	fp, sp, #8
    9740:	sub	sp, sp, #8
    9744:	mov	r1, #0
    9748:	mov	r2, #1
    974c:	mov	r3, #1
    9750:	mov	r4, r0
    9754:	bl	0 <flatcc_verify_field>
    9758:	cmp	r0, #0
    975c:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9760:	mov	r0, r4
    9764:	mov	r1, #1
    9768:	mov	r2, #1
    976c:	mov	r3, #1
    9770:	bl	0 <flatcc_verify_field>
    9774:	cmp	r0, #0
    9778:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    977c:	mov	r0, r4
    9780:	mov	r1, #2
    9784:	mov	r2, #2
    9788:	mov	r3, #2
    978c:	bl	0 <flatcc_verify_field>
    9790:	cmp	r0, #0
    9794:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9798:	mov	r0, r4
    979c:	mov	r1, #3
    97a0:	mov	r2, #2
    97a4:	mov	r3, #2
    97a8:	bl	0 <flatcc_verify_field>
    97ac:	cmp	r0, #0
    97b0:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    97b4:	mov	r0, r4
    97b8:	mov	r1, #4
    97bc:	mov	r2, #4
    97c0:	mov	r3, #4
    97c4:	bl	0 <flatcc_verify_field>
    97c8:	cmp	r0, #0
    97cc:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    97d0:	mov	r0, r4
    97d4:	mov	r1, #5
    97d8:	mov	r2, #4
    97dc:	mov	r3, #4
    97e0:	bl	0 <flatcc_verify_field>
    97e4:	cmp	r0, #0
    97e8:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    97ec:	mov	r0, r4
    97f0:	mov	r1, #6
    97f4:	mov	r2, #8
    97f8:	mov	r3, #8
    97fc:	bl	0 <flatcc_verify_field>
    9800:	cmp	r0, #0
    9804:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9808:	mov	r0, r4
    980c:	mov	r1, #7
    9810:	mov	r2, #8
    9814:	mov	r3, #8
    9818:	bl	0 <flatcc_verify_field>
    981c:	cmp	r0, #0
    9820:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9824:	mov	r0, r4
    9828:	mov	r1, #8
    982c:	mov	r2, #4
    9830:	mov	r3, #4
    9834:	bl	0 <flatcc_verify_field>
    9838:	cmp	r0, #0
    983c:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9840:	mov	r0, r4
    9844:	mov	r1, #9
    9848:	mov	r2, #8
    984c:	mov	r3, #8
    9850:	bl	0 <flatcc_verify_field>
    9854:	cmp	r0, #0
    9858:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    985c:	mvn	r0, #0
    9860:	mov	r1, #1
    9864:	mov	r2, #0
    9868:	mov	r3, #1
    986c:	str	r1, [sp]
    9870:	str	r0, [sp, #4]
    9874:	mov	r0, r4
    9878:	mov	r1, #10
    987c:	bl	0 <flatcc_verify_vector_field>
    9880:	cmp	r0, #0
    9884:	bne	98ac <MyGame_Example_TypeAliases_verify_table+0x174>
    9888:	mvn	r0, #-536870912	; 0xe0000000
    988c:	mov	r1, #8
    9890:	mov	r2, #0
    9894:	mov	r3, #8
    9898:	str	r1, [sp]
    989c:	str	r0, [sp, #4]
    98a0:	mov	r0, r4
    98a4:	mov	r1, #11
    98a8:	bl	0 <flatcc_verify_vector_field>
    98ac:	sub	sp, fp, #8
    98b0:	pop	{r4, sl, fp, pc}

000098b4 <MyGame_Example_Monster_verify_table>:
    98b4:	push	{r4, r5, r6, r7, fp, lr}
    98b8:	add	fp, sp, #16
    98bc:	sub	sp, sp, #8
    98c0:	mov	r1, #0
    98c4:	mov	r2, #32
    98c8:	mov	r3, #16
    98cc:	mov	r4, r0
    98d0:	bl	0 <flatcc_verify_field>
    98d4:	cmp	r0, #0
    98d8:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    98dc:	mov	r0, r4
    98e0:	mov	r1, #2
    98e4:	mov	r2, #2
    98e8:	mov	r3, #2
    98ec:	bl	0 <flatcc_verify_field>
    98f0:	cmp	r0, #0
    98f4:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    98f8:	mov	r0, r4
    98fc:	mov	r1, #1
    9900:	mov	r2, #2
    9904:	mov	r3, #2
    9908:	bl	0 <flatcc_verify_field>
    990c:	cmp	r0, #0
    9910:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9914:	mov	r0, r4
    9918:	mov	r1, #3
    991c:	mov	r2, #1
    9920:	bl	0 <flatcc_verify_string_field>
    9924:	cmp	r0, #0
    9928:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    992c:	mov	r0, r4
    9930:	mov	r1, #6
    9934:	mov	r2, #1
    9938:	mov	r3, #1
    993c:	mov	r5, #1
    9940:	bl	0 <flatcc_verify_field>
    9944:	cmp	r0, #0
    9948:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    994c:	mvn	r0, #0
    9950:	mov	r1, #5
    9954:	mov	r2, #0
    9958:	mov	r3, #1
    995c:	str	r5, [sp]
    9960:	str	r0, [sp, #4]
    9964:	mov	r0, r4
    9968:	bl	0 <flatcc_verify_vector_field>
    996c:	cmp	r0, #0
    9970:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9974:	movw	r3, #0
    9978:	mov	r0, r4
    997c:	mov	r1, #11
    9980:	mov	r2, #0
    9984:	movt	r3, #0
    9988:	bl	0 <flatcc_verify_table_vector_field>
    998c:	cmp	r0, #0
    9990:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9994:	mov	r0, r4
    9998:	mov	r1, #10
    999c:	mov	r2, #0
    99a0:	bl	0 <flatcc_verify_string_vector_field>
    99a4:	cmp	r0, #0
    99a8:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    99ac:	mov	r0, r4
    99b0:	mov	r1, #28
    99b4:	mov	r2, #0
    99b8:	bl	0 <flatcc_verify_string_vector_field>
    99bc:	cmp	r0, #0
    99c0:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    99c4:	mvn	r0, #0
    99c8:	mov	r1, #1
    99cc:	mov	r2, #0
    99d0:	mov	r3, #1
    99d4:	str	r1, [sp]
    99d8:	str	r0, [sp, #4]
    99dc:	mov	r0, r4
    99e0:	mov	r1, #24
    99e4:	bl	0 <flatcc_verify_vector_field>
    99e8:	cmp	r0, #0
    99ec:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    99f0:	mvn	r0, #-536870912	; 0xe0000000
    99f4:	mov	r1, #4
    99f8:	mov	r2, #0
    99fc:	mov	r3, #8
    9a00:	str	r1, [sp]
    9a04:	str	r0, [sp, #4]
    9a08:	mov	r0, r4
    9a0c:	mov	r1, #29
    9a10:	bl	0 <flatcc_verify_vector_field>
    9a14:	cmp	r0, #0
    9a18:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9a1c:	movw	r5, #0
    9a20:	mov	r0, r4
    9a24:	mov	r1, #12
    9a28:	mov	r2, #0
    9a2c:	movt	r5, #0
    9a30:	mov	r3, r5
    9a34:	bl	0 <flatcc_verify_table_field>
    9a38:	cmp	r0, #0
    9a3c:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9a40:	movw	r3, #0
    9a44:	mov	r0, r4
    9a48:	mov	r1, #8
    9a4c:	mov	r2, #0
    9a50:	movt	r3, #0
    9a54:	bl	0 <flatcc_verify_union_field>
    9a58:	cmp	r0, #0
    9a5c:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9a60:	mvn	r6, #-1073741824	; 0xc0000000
    9a64:	mov	r7, #2
    9a68:	mov	r0, r4
    9a6c:	mov	r1, #9
    9a70:	mov	r2, #0
    9a74:	mov	r3, #4
    9a78:	str	r7, [sp]
    9a7c:	str	r6, [sp, #4]
    9a80:	bl	0 <flatcc_verify_vector_field>
    9a84:	cmp	r0, #0
    9a88:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9a8c:	mov	r0, r4
    9a90:	mov	r1, #31
    9a94:	mov	r2, #0
    9a98:	mov	r3, #4
    9a9c:	str	r7, [sp]
    9aa0:	str	r6, [sp, #4]
    9aa4:	bl	0 <flatcc_verify_vector_field>
    9aa8:	cmp	r0, #0
    9aac:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9ab0:	mov	r0, #1
    9ab4:	mov	r1, #13
    9ab8:	mov	r2, #0
    9abc:	mov	r3, #0
    9ac0:	stm	sp, {r0, r5}
    9ac4:	mov	r0, r4
    9ac8:	bl	0 <flatcc_verify_table_as_nested_root>
    9acc:	cmp	r0, #0
    9ad0:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9ad4:	movw	r3, #0
    9ad8:	mov	r0, r4
    9adc:	mov	r1, #14
    9ae0:	mov	r2, #0
    9ae4:	movt	r3, #0
    9ae8:	bl	0 <flatcc_verify_table_field>
    9aec:	cmp	r0, #0
    9af0:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9af4:	mov	r0, r4
    9af8:	mov	r1, #15
    9afc:	mov	r2, #1
    9b00:	mov	r3, #1
    9b04:	bl	0 <flatcc_verify_field>
    9b08:	cmp	r0, #0
    9b0c:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b10:	mov	r0, r4
    9b14:	mov	r1, #16
    9b18:	mov	r2, #4
    9b1c:	mov	r3, #4
    9b20:	bl	0 <flatcc_verify_field>
    9b24:	cmp	r0, #0
    9b28:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b2c:	mov	r0, r4
    9b30:	mov	r1, #17
    9b34:	mov	r2, #4
    9b38:	mov	r3, #4
    9b3c:	bl	0 <flatcc_verify_field>
    9b40:	cmp	r0, #0
    9b44:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b48:	mov	r0, r4
    9b4c:	mov	r1, #18
    9b50:	mov	r2, #8
    9b54:	mov	r3, #8
    9b58:	bl	0 <flatcc_verify_field>
    9b5c:	cmp	r0, #0
    9b60:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b64:	mov	r0, r4
    9b68:	mov	r1, #19
    9b6c:	mov	r2, #8
    9b70:	mov	r3, #8
    9b74:	bl	0 <flatcc_verify_field>
    9b78:	cmp	r0, #0
    9b7c:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b80:	mov	r0, r4
    9b84:	mov	r1, #20
    9b88:	mov	r2, #4
    9b8c:	mov	r3, #4
    9b90:	bl	0 <flatcc_verify_field>
    9b94:	cmp	r0, #0
    9b98:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9b9c:	mov	r0, r4
    9ba0:	mov	r1, #21
    9ba4:	mov	r2, #4
    9ba8:	mov	r3, #4
    9bac:	bl	0 <flatcc_verify_field>
    9bb0:	cmp	r0, #0
    9bb4:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9bb8:	mov	r0, r4
    9bbc:	mov	r1, #22
    9bc0:	mov	r2, #8
    9bc4:	mov	r3, #8
    9bc8:	bl	0 <flatcc_verify_field>
    9bcc:	cmp	r0, #0
    9bd0:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9bd4:	mov	r0, r4
    9bd8:	mov	r1, #23
    9bdc:	mov	r2, #8
    9be0:	mov	r3, #8
    9be4:	bl	0 <flatcc_verify_field>
    9be8:	cmp	r0, #0
    9bec:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9bf0:	mov	r0, r4
    9bf4:	mov	r1, #25
    9bf8:	mov	r2, #4
    9bfc:	mov	r3, #4
    9c00:	bl	0 <flatcc_verify_field>
    9c04:	cmp	r0, #0
    9c08:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9c0c:	mov	r0, r4
    9c10:	mov	r1, #26
    9c14:	mov	r2, #4
    9c18:	mov	r3, #4
    9c1c:	bl	0 <flatcc_verify_field>
    9c20:	cmp	r0, #0
    9c24:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9c28:	mov	r0, r4
    9c2c:	mov	r1, #27
    9c30:	mov	r2, #4
    9c34:	mov	r3, #4
    9c38:	bl	0 <flatcc_verify_field>
    9c3c:	cmp	r0, #0
    9c40:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9c44:	mvn	r0, #0
    9c48:	mov	r1, #1
    9c4c:	mov	r2, #0
    9c50:	mov	r3, #1
    9c54:	str	r1, [sp]
    9c58:	str	r0, [sp, #4]
    9c5c:	mov	r0, r4
    9c60:	mov	r1, #30
    9c64:	bl	0 <flatcc_verify_vector_field>
    9c68:	cmp	r0, #0
    9c6c:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9c70:	mvn	r5, #-536870912	; 0xe0000000
    9c74:	mov	r6, #8
    9c78:	mov	r0, r4
    9c7c:	mov	r1, #32
    9c80:	mov	r2, #0
    9c84:	mov	r3, #8
    9c88:	str	r6, [sp]
    9c8c:	str	r5, [sp, #4]
    9c90:	bl	0 <flatcc_verify_vector_field>
    9c94:	cmp	r0, #0
    9c98:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9c9c:	mov	r0, r4
    9ca0:	mov	r1, #33	; 0x21
    9ca4:	mov	r2, #0
    9ca8:	mov	r3, #8
    9cac:	str	r6, [sp]
    9cb0:	str	r5, [sp, #4]
    9cb4:	bl	0 <flatcc_verify_vector_field>
    9cb8:	cmp	r0, #0
    9cbc:	bne	9ce0 <MyGame_Example_Monster_verify_table+0x42c>
    9cc0:	movw	r3, #0
    9cc4:	mov	r0, r4
    9cc8:	mov	r1, #34	; 0x22
    9ccc:	mov	r2, #0
    9cd0:	movt	r3, #0
    9cd4:	bl	0 <flatcc_verify_table_field>
    9cd8:	cmp	r0, #0
    9cdc:	beq	9ce8 <MyGame_Example_Monster_verify_table+0x434>
    9ce0:	sub	sp, fp, #16
    9ce4:	pop	{r4, r5, r6, r7, fp, pc}
    9ce8:	movw	r3, #0
    9cec:	mov	r0, r4
    9cf0:	mov	r1, #35	; 0x23
    9cf4:	mov	r2, #0
    9cf8:	movt	r3, #0
    9cfc:	sub	sp, fp, #16
    9d00:	pop	{r4, r5, r6, r7, fp, lr}
    9d04:	b	0 <flatcc_verify_table_field>

00009d08 <MyGame_Example_Any_union_verifier>:
    9d08:	ldrb	r1, [r0, #12]
    9d0c:	sub	r1, r1, #1
    9d10:	uxtb	r2, r1
    9d14:	cmp	r2, #3
    9d18:	movhi	r0, #0
    9d1c:	bxhi	lr
    9d20:	movw	r2, #0
    9d24:	sxtb	r1, r1
    9d28:	movt	r2, #0
    9d2c:	ldr	r1, [r2, r1, lsl #2]
    9d30:	b	0 <flatcc_verify_union_table>

00009d34 <MyGame_Example_Stat_verify_table>:
    9d34:	push	{r4, sl, fp, lr}
    9d38:	add	fp, sp, #8
    9d3c:	mov	r1, #0
    9d40:	mov	r2, #0
    9d44:	mov	r4, r0
    9d48:	bl	0 <flatcc_verify_string_field>
    9d4c:	cmp	r0, #0
    9d50:	popne	{r4, sl, fp, pc}
    9d54:	mov	r0, r4
    9d58:	mov	r1, #1
    9d5c:	mov	r2, #8
    9d60:	mov	r3, #8
    9d64:	bl	0 <flatcc_verify_field>
    9d68:	cmp	r0, #0
    9d6c:	beq	9d74 <MyGame_Example_Stat_verify_table+0x40>
    9d70:	pop	{r4, sl, fp, pc}
    9d74:	mov	r0, r4
    9d78:	mov	r1, #2
    9d7c:	mov	r2, #2
    9d80:	mov	r3, #2
    9d84:	pop	{r4, sl, fp, lr}
    9d88:	b	0 <flatcc_verify_field>

00009d8c <MyGame_InParentNamespace_verify_table>:
    9d8c:	mov	r0, #0
    9d90:	bx	lr

00009d94 <MyGame_Example_TestBase64_verify_table>:
    9d94:	push	{r4, r5, r6, sl, fp, lr}
    9d98:	add	fp, sp, #16
    9d9c:	sub	sp, sp, #8
    9da0:	mvn	r5, #0
    9da4:	mov	r6, #1
    9da8:	mov	r1, #0
    9dac:	mov	r2, #0
    9db0:	mov	r3, #1
    9db4:	mov	r4, r0
    9db8:	str	r6, [sp]
    9dbc:	str	r5, [sp, #4]
    9dc0:	bl	0 <flatcc_verify_vector_field>
    9dc4:	cmp	r0, #0
    9dc8:	bne	9df0 <MyGame_Example_TestBase64_verify_table+0x5c>
    9dcc:	mov	r0, r4
    9dd0:	mov	r1, #1
    9dd4:	mov	r2, #0
    9dd8:	mov	r3, #1
    9ddc:	str	r6, [sp]
    9de0:	str	r5, [sp, #4]
    9de4:	bl	0 <flatcc_verify_vector_field>
    9de8:	cmp	r0, #0
    9dec:	beq	9df8 <MyGame_Example_TestBase64_verify_table+0x64>
    9df0:	sub	sp, fp, #16
    9df4:	pop	{r4, r5, r6, sl, fp, pc}
    9df8:	movw	r0, #0
    9dfc:	mov	r1, #1
    9e00:	mov	r2, #0
    9e04:	mov	r3, #0
    9e08:	movt	r0, #0
    9e0c:	str	r1, [sp]
    9e10:	mov	r1, #2
    9e14:	str	r0, [sp, #4]
    9e18:	mov	r0, r4
    9e1c:	bl	0 <flatcc_verify_table_as_nested_root>
    9e20:	sub	sp, fp, #16
    9e24:	pop	{r4, r5, r6, sl, fp, pc}

00009e28 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    9e28:	push	{r4, sl, fp, lr}
    9e2c:	add	fp, sp, #8
    9e30:	mov	r1, #0
    9e34:	mov	r2, #1
    9e38:	mov	r3, #1
    9e3c:	mov	r4, r0
    9e40:	bl	0 <flatcc_verify_field>
    9e44:	cmp	r0, #0
    9e48:	bne	9e84 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x5c>
    9e4c:	mov	r0, r4
    9e50:	mov	r1, #1
    9e54:	mov	r2, #1
    9e58:	mov	r3, #1
    9e5c:	bl	0 <flatcc_verify_field>
    9e60:	cmp	r0, #0
    9e64:	popne	{r4, sl, fp, pc}
    9e68:	mov	r0, r4
    9e6c:	mov	r1, #2
    9e70:	mov	r2, #1
    9e74:	mov	r3, #1
    9e78:	bl	0 <flatcc_verify_field>
    9e7c:	cmp	r0, #0
    9e80:	beq	9e88 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x60>
    9e84:	pop	{r4, sl, fp, pc}
    9e88:	mov	r0, r4
    9e8c:	mov	r1, #3
    9e90:	mov	r2, #1
    9e94:	mov	r3, #1
    9e98:	pop	{r4, sl, fp, lr}
    9e9c:	b	0 <flatcc_verify_field>

00009ea0 <MyGame_Example2_Monster_verify_table>:
    9ea0:	mov	r0, #0
    9ea4:	bx	lr

00009ea8 <MyGame_Example_Alt_verify_table>:
    9ea8:	push	{r4, sl, fp, lr}
    9eac:	add	fp, sp, #8
    9eb0:	movw	r3, #0
    9eb4:	mov	r1, #0
    9eb8:	mov	r2, #0
    9ebc:	mov	r4, r0
    9ec0:	movt	r3, #0
    9ec4:	bl	0 <flatcc_verify_table_field>
    9ec8:	cmp	r0, #0
    9ecc:	popne	{r4, sl, fp, pc}
    9ed0:	movw	r3, #0
    9ed4:	mov	r0, r4
    9ed8:	mov	r1, #1
    9edc:	mov	r2, #0
    9ee0:	movt	r3, #0
    9ee4:	bl	0 <flatcc_verify_table_field>
    9ee8:	cmp	r0, #0
    9eec:	beq	9ef4 <MyGame_Example_Alt_verify_table+0x4c>
    9ef0:	pop	{r4, sl, fp, pc}
    9ef4:	movw	r3, #0
    9ef8:	mov	r0, r4
    9efc:	mov	r1, #3
    9f00:	mov	r2, #0
    9f04:	movt	r3, #0
    9f08:	pop	{r4, sl, fp, lr}
    9f0c:	b	0 <flatcc_verify_union_vector_field>

00009f10 <MyGame_Example_TestJSONPrefix_verify_table>:
    9f10:	push	{r4, sl, fp, lr}
    9f14:	add	fp, sp, #8
    9f18:	movw	r3, #0
    9f1c:	mov	r1, #0
    9f20:	mov	r2, #0
    9f24:	mov	r4, r0
    9f28:	movt	r3, #0
    9f2c:	bl	0 <flatcc_verify_table_field>
    9f30:	cmp	r0, #0
    9f34:	popne	{r4, sl, fp, pc}
    9f38:	movw	r3, #0
    9f3c:	mov	r0, r4
    9f40:	mov	r1, #1
    9f44:	mov	r2, #0
    9f48:	movt	r3, #0
    9f4c:	bl	0 <flatcc_verify_table_field>
    9f50:	cmp	r0, #0
    9f54:	beq	9f5c <MyGame_Example_TestJSONPrefix_verify_table+0x4c>
    9f58:	pop	{r4, sl, fp, pc}
    9f5c:	movw	r3, #0
    9f60:	mov	r0, r4
    9f64:	mov	r1, #2
    9f68:	mov	r2, #0
    9f6c:	movt	r3, #0
    9f70:	pop	{r4, sl, fp, lr}
    9f74:	b	0 <flatcc_verify_table_field>

00009f78 <Fantasy_Movie_verify_table>:
    9f78:	push	{r4, sl, fp, lr}
    9f7c:	add	fp, sp, #8
    9f80:	movw	r3, #0
    9f84:	mov	r1, #1
    9f88:	mov	r2, #0
    9f8c:	mov	r4, r0
    9f90:	movt	r3, #0
    9f94:	bl	0 <flatcc_verify_union_field>
    9f98:	cmp	r0, #0
    9f9c:	bne	a000 <Fantasy_Movie_verify_table+0x88>
    9fa0:	movw	r3, #0
    9fa4:	mov	r0, r4
    9fa8:	mov	r1, #3
    9fac:	mov	r2, #0
    9fb0:	movt	r3, #0
    9fb4:	bl	0 <flatcc_verify_union_field>
    9fb8:	cmp	r0, #0
    9fbc:	bne	a000 <Fantasy_Movie_verify_table+0x88>
    9fc0:	movw	r3, #0
    9fc4:	mov	r0, r4
    9fc8:	mov	r1, #5
    9fcc:	mov	r2, #0
    9fd0:	movt	r3, #0
    9fd4:	bl	0 <flatcc_verify_union_field>
    9fd8:	cmp	r0, #0
    9fdc:	popne	{r4, sl, fp, pc}
    9fe0:	movw	r3, #0
    9fe4:	mov	r0, r4
    9fe8:	mov	r1, #7
    9fec:	mov	r2, #0
    9ff0:	movt	r3, #0
    9ff4:	bl	0 <flatcc_verify_union_field>
    9ff8:	cmp	r0, #0
    9ffc:	beq	a004 <Fantasy_Movie_verify_table+0x8c>
    a000:	pop	{r4, sl, fp, pc}
    a004:	movw	r3, #0
    a008:	mov	r0, r4
    a00c:	mov	r1, #9
    a010:	mov	r2, #0
    a014:	movt	r3, #0
    a018:	pop	{r4, sl, fp, lr}
    a01c:	b	0 <flatcc_verify_union_vector_field>

0000a020 <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    a020:	push	{r4, sl, fp, lr}
    a024:	add	fp, sp, #8
    a028:	mov	r1, #0
    a02c:	mov	r2, #0
    a030:	mov	r4, r0
    a034:	bl	0 <flatcc_verify_string_field>
    a038:	cmp	r0, #0
    a03c:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a040:	mov	r0, r4
    a044:	mov	r1, #1
    a048:	mov	r2, #4
    a04c:	mov	r3, #4
    a050:	bl	0 <flatcc_verify_field>
    a054:	cmp	r0, #0
    a058:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a05c:	mov	r0, r4
    a060:	mov	r1, #2
    a064:	mov	r2, #0
    a068:	bl	0 <flatcc_verify_string_field>
    a06c:	cmp	r0, #0
    a070:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a074:	mov	r0, r4
    a078:	mov	r1, #3
    a07c:	mov	r2, #8
    a080:	mov	r3, #8
    a084:	bl	0 <flatcc_verify_field>
    a088:	cmp	r0, #0
    a08c:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a090:	mov	r0, r4
    a094:	mov	r1, #4
    a098:	mov	r2, #0
    a09c:	bl	0 <flatcc_verify_string_field>
    a0a0:	cmp	r0, #0
    a0a4:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a0a8:	mov	r0, r4
    a0ac:	mov	r1, #5
    a0b0:	mov	r2, #8
    a0b4:	mov	r3, #8
    a0b8:	bl	0 <flatcc_verify_field>
    a0bc:	cmp	r0, #0
    a0c0:	bne	a0fc <MyGame_Example_TestJSONPrefixParsing_verify_table+0xdc>
    a0c4:	mov	r0, r4
    a0c8:	mov	r1, #6
    a0cc:	mov	r2, #4
    a0d0:	mov	r3, #4
    a0d4:	bl	0 <flatcc_verify_field>
    a0d8:	cmp	r0, #0
    a0dc:	popne	{r4, sl, fp, pc}
    a0e0:	mov	r0, r4
    a0e4:	mov	r1, #7
    a0e8:	mov	r2, #8
    a0ec:	mov	r3, #8
    a0f0:	bl	0 <flatcc_verify_field>
    a0f4:	cmp	r0, #0
    a0f8:	beq	a100 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xe0>
    a0fc:	pop	{r4, sl, fp, pc}
    a100:	mov	r0, r4
    a104:	mov	r1, #8
    a108:	mov	r2, #4
    a10c:	mov	r3, #4
    a110:	pop	{r4, sl, fp, lr}
    a114:	b	0 <flatcc_verify_field>

0000a118 <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    a118:	push	{r4, sl, fp, lr}
    a11c:	add	fp, sp, #8
    a120:	mov	r1, #0
    a124:	mov	r2, #8
    a128:	mov	r3, #8
    a12c:	mov	r4, r0
    a130:	bl	0 <flatcc_verify_field>
    a134:	cmp	r0, #0
    a138:	popne	{r4, sl, fp, pc}
    a13c:	mov	r0, r4
    a140:	mov	r1, #1
    a144:	mov	r2, #4
    a148:	mov	r3, #4
    a14c:	pop	{r4, sl, fp, lr}
    a150:	b	0 <flatcc_verify_field>

0000a154 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    a154:	push	{r4, sl, fp, lr}
    a158:	add	fp, sp, #8
    a15c:	mov	r1, #0
    a160:	mov	r2, #8
    a164:	mov	r3, #8
    a168:	mov	r4, r0
    a16c:	bl	0 <flatcc_verify_field>
    a170:	cmp	r0, #0
    a174:	popne	{r4, sl, fp, pc}
    a178:	mov	r0, r4
    a17c:	mov	r1, #1
    a180:	mov	r2, #4
    a184:	mov	r3, #4
    a188:	pop	{r4, sl, fp, lr}
    a18c:	b	0 <flatcc_verify_field>

0000a190 <Fantasy_Character_union_verifier>:
    a190:	ldrb	r2, [r0, #12]
    a194:	sub	r1, r2, #2
    a198:	cmp	r1, #9
    a19c:	bhi	a1dc <Fantasy_Character_union_verifier+0x4c>
    a1a0:	add	r2, pc, #0
    a1a4:	ldr	pc, [r2, r1, lsl #2]
    a1a8:	.word	0x0000a1f0
    a1ac:	.word	0x0000a1e8
    a1b0:	.word	0x0000a1e8
    a1b4:	.word	0x0000a1e8
    a1b8:	.word	0x0000a1e8
    a1bc:	.word	0x0000a1e8
    a1c0:	.word	0x0000a1fc
    a1c4:	.word	0x0000a1d0
    a1c8:	.word	0x0000a1d0
    a1cc:	.word	0x0000a1e4
    a1d0:	mov	r1, #4
    a1d4:	mov	r2, #4
    a1d8:	b	0 <flatcc_verify_union_struct>
    a1dc:	cmp	r2, #255	; 0xff
    a1e0:	bne	a1e8 <Fantasy_Character_union_verifier+0x58>
    a1e4:	b	0 <flatcc_verify_union_string>
    a1e8:	mov	r0, #0
    a1ec:	bx	lr
    a1f0:	movw	r1, #0
    a1f4:	movt	r1, #0
    a1f8:	b	0 <flatcc_verify_union_table>
    a1fc:	mov	r1, #2
    a200:	mov	r2, #2
    a204:	b	0 <flatcc_verify_union_struct>

0000a208 <Fantasy_Attacker_verify_table>:
    a208:	mov	r1, #0
    a20c:	mov	r2, #4
    a210:	mov	r3, #4
    a214:	b	0 <flatcc_verify_field>

0000a218 <MyGame_Example_with_emptystruct_verify_table>:
    a218:	mov	r1, #0
    a21c:	mov	r2, #0
    a220:	mov	r3, #1
    a224:	b	0 <flatcc_verify_field>

0000a228 <__MyGame_Example_Monster_sort_by_name__heap_sift_down>:
    a228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a22c:	add	fp, sp, #28
    a230:	sub	sp, sp, #12
    a234:	cmp	r2, r1, lsl #1
    a238:	bcs	a244 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x1c>
    a23c:	sub	sp, fp, #28
    a240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a244:	mov	r9, r2
    a248:	mov	sl, r0
    a24c:	lsl	r4, r1, #1
    a250:	str	r0, [sp]
    a254:	cmp	r4, r9
    a258:	bcs	a334 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x10c>
    a25c:	cmp	sl, #0
    a260:	ldrne	r8, [sl, #-4]
    a264:	cmpne	r8, r4
    a268:	bls	a450 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x228>
    a26c:	mov	r0, sl
    a270:	ldr	r2, [r0, r4, lsl #2]!
    a274:	adds	r0, r0, r2
    a278:	beq	a47c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x254>
    a27c:	ldr	r2, [r0]
    a280:	mov	r3, r0
    a284:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    a288:	cmp	r2, #12
    a28c:	bcc	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a290:	ldrh	ip, [r3, #10]
    a294:	cmp	ip, #0
    a298:	beq	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a29c:	orr	r7, r4, #1
    a2a0:	cmp	r8, r7
    a2a4:	bls	a450 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x228>
    a2a8:	mov	r2, sl
    a2ac:	ldr	r3, [r2, r7, lsl #2]!
    a2b0:	adds	r3, r2, r3
    a2b4:	beq	a47c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x254>
    a2b8:	ldr	r6, [r3]
    a2bc:	mov	r2, r3
    a2c0:	str	r1, [sp, #8]
    a2c4:	ldrh	r6, [r2, -r6]!	; <UNPREDICTABLE>
    a2c8:	cmp	r6, #12
    a2cc:	bcc	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a2d0:	ldrh	r2, [r2, #10]
    a2d4:	cmp	r2, #0
    a2d8:	beq	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a2dc:	ldr	r1, [r0, ip]!
    a2e0:	mov	r5, r9
    a2e4:	add	r0, r0, r1
    a2e8:	ldr	r1, [r3, r2]!
    a2ec:	add	r0, r0, #4
    a2f0:	ldr	r6, [r0, #-4]
    a2f4:	ldr	r9, [r3, r1]!
    a2f8:	cmp	r6, r9
    a2fc:	mov	r2, r9
    a300:	add	r1, r3, #4
    a304:	movcc	r2, r6
    a308:	bl	0 <strncmp>
    a30c:	cmp	r0, #0
    a310:	mov	r0, r7
    a314:	ldr	r1, [sp, #8]
    a318:	movne	r0, r4
    a31c:	movlt	r0, r7
    a320:	movne	r4, r0
    a324:	cmp	r6, r9
    a328:	mov	r9, r5
    a32c:	movcc	r4, r0
    a330:	b	a340 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x118>
    a334:	cmp	sl, #0
    a338:	beq	a450 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x228>
    a33c:	ldr	r8, [sl, #-4]
    a340:	mov	r6, r4
    a344:	cmp	r8, r1
    a348:	bls	a450 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x228>
    a34c:	mov	r4, sl
    a350:	ldr	r5, [r4, r1, lsl #2]!
    a354:	adds	r0, r4, r5
    a358:	beq	a47c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x254>
    a35c:	ldr	r2, [r0]
    a360:	mov	r3, r0
    a364:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
    a368:	cmp	r2, #12
    a36c:	bcc	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a370:	ldrh	ip, [r3, #10]
    a374:	cmp	ip, #0
    a378:	beq	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a37c:	cmp	r8, r6
    a380:	bls	a450 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x228>
    a384:	mov	r7, sl
    a388:	ldr	r8, [r7, r6, lsl #2]!
    a38c:	adds	r3, r7, r8
    a390:	beq	a47c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x254>
    a394:	stmib	sp, {r5, r6}
    a398:	mov	r2, r3
    a39c:	ldr	r5, [r3]
    a3a0:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
    a3a4:	cmp	r5, #12
    a3a8:	bcc	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a3ac:	ldrh	r2, [r2, #10]
    a3b0:	cmp	r2, #0
    a3b4:	beq	a470 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x248>
    a3b8:	mov	r6, r1
    a3bc:	ldr	r1, [r0, ip]!
    a3c0:	add	r0, r0, r1
    a3c4:	ldr	r1, [r3, r2]!
    a3c8:	add	r0, r0, #4
    a3cc:	ldr	sl, [r0, #-4]
    a3d0:	ldr	r5, [r3, r1]!
    a3d4:	cmp	sl, r5
    a3d8:	mov	r2, r5
    a3dc:	add	r1, r3, #4
    a3e0:	movcc	r2, sl
    a3e4:	bl	0 <strncmp>
    a3e8:	cmp	r0, #1
    a3ec:	mov	r1, #0
    a3f0:	mov	r2, #0
    a3f4:	movwlt	r1, #1
    a3f8:	cmp	r0, #0
    a3fc:	movwne	r0, #1
    a400:	cmp	sl, r5
    a404:	ldr	sl, [sp]
    a408:	movwcc	r2, #1
    a40c:	orr	r0, r2, r0
    a410:	cmp	r0, #1
    a414:	bne	a23c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a418:	cmp	r1, #0
    a41c:	beq	a23c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a420:	ldr	r2, [sp, #8]
    a424:	sub	r0, r6, r2
    a428:	cmp	r9, r2, lsl #1
    a42c:	sub	r1, r8, r0, lsl #2
    a430:	str	r1, [r4]
    a434:	ldr	r1, [sp, #4]
    a438:	lsl	r4, r2, #1
    a43c:	add	r0, r1, r0, lsl #2
    a440:	mov	r1, r2
    a444:	str	r0, [r7]
    a448:	bcs	a254 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x2c>
    a44c:	b	a23c <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x14>
    a450:	movw	r0, #0
    a454:	movw	r1, #0
    a458:	movw	r3, #0
    a45c:	movw	r2, #693	; 0x2b5
    a460:	movt	r0, #0
    a464:	movt	r1, #0
    a468:	movt	r3, #0
    a46c:	bl	0 <__assert_fail>
    a470:	movw	r0, #0
    a474:	movt	r0, #0
    a478:	b	a484 <__MyGame_Example_Monster_sort_by_name__heap_sift_down+0x25c>
    a47c:	movw	r0, #0
    a480:	movt	r0, #0
    a484:	movw	r1, #0
    a488:	movw	r3, #0
    a48c:	movw	r2, #699	; 0x2bb
    a490:	movt	r1, #0
    a494:	movt	r3, #0
    a498:	bl	0 <__assert_fail>
