
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-ascii-cursor.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_ascii_parse_int64>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #88	; 0x58
       c:	str	r0, [fp, #-8]
      10:	str	r1, [fp, #-12]
      14:	str	r2, [fp, #-16]
      18:	str	r3, [fp, #-20]	; 0xffffffec
      1c:	movw	r0, #0
      20:	str	r0, [sp, #44]	; 0x2c
      24:	ldr	r0, [fp, #-12]
      28:	str	r0, [fp, #-24]	; 0xffffffe8
      2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
      30:	cmp	r0, #0
      34:	movw	r0, #0
      38:	str	r0, [sp, #28]
      3c:	ble	78 <coda_ascii_parse_int64+0x78>
      40:	ldr	r0, [fp, #-8]
      44:	ldrb	r0, [r0]
      48:	cmp	r0, #32
      4c:	movw	r0, #1
      50:	str	r0, [sp, #24]
      54:	beq	70 <coda_ascii_parse_int64+0x70>
      58:	ldr	r0, [fp, #-8]
      5c:	ldrb	r0, [r0]
      60:	cmp	r0, #9
      64:	movw	r0, #0
      68:	moveq	r0, #1
      6c:	str	r0, [sp, #24]
      70:	ldr	r0, [sp, #24]
      74:	str	r0, [sp, #28]
      78:	ldr	r0, [sp, #28]
      7c:	tst	r0, #1
      80:	beq	a4 <coda_ascii_parse_int64+0xa4>
      84:	ldr	r0, [fp, #-8]
      88:	add	r0, r0, #1
      8c:	str	r0, [fp, #-8]
      90:	ldr	r0, [fp, #-24]	; 0xffffffe8
      94:	mvn	r1, #0
      98:	add	r0, r0, r1
      9c:	str	r0, [fp, #-24]	; 0xffffffe8
      a0:	b	2c <coda_ascii_parse_int64+0x2c>
      a4:	ldr	r0, [fp, #-8]
      a8:	ldrb	r0, [r0]
      ac:	cmp	r0, #43	; 0x2b
      b0:	beq	c4 <coda_ascii_parse_int64+0xc4>
      b4:	ldr	r0, [fp, #-8]
      b8:	ldrb	r0, [r0]
      bc:	cmp	r0, #45	; 0x2d
      c0:	bne	fc <coda_ascii_parse_int64+0xfc>
      c4:	ldr	r0, [fp, #-8]
      c8:	ldrb	r0, [r0]
      cc:	cmp	r0, #45	; 0x2d
      d0:	movw	r0, #0
      d4:	moveq	r0, #1
      d8:	and	r0, r0, #1
      dc:	str	r0, [sp, #44]	; 0x2c
      e0:	ldr	r0, [fp, #-8]
      e4:	add	r0, r0, #1
      e8:	str	r0, [fp, #-8]
      ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
      f0:	mvn	r1, #0
      f4:	add	r0, r0, r1
      f8:	str	r0, [fp, #-24]	; 0xffffffe8
      fc:	mov	r0, #0
     100:	str	r0, [fp, #-36]	; 0xffffffdc
     104:	str	r0, [fp, #-40]	; 0xffffffd8
     108:	movw	r0, #0
     10c:	str	r0, [fp, #-28]	; 0xffffffe4
     110:	ldr	r0, [fp, #-24]	; 0xffffffe8
     114:	cmp	r0, #0
     118:	ble	230 <coda_ascii_parse_int64+0x230>
     11c:	ldr	r0, [fp, #-8]
     120:	ldrb	r0, [r0]
     124:	cmp	r0, #48	; 0x30
     128:	blt	13c <coda_ascii_parse_int64+0x13c>
     12c:	ldr	r0, [fp, #-8]
     130:	ldrb	r0, [r0]
     134:	cmp	r0, #57	; 0x39
     138:	ble	140 <coda_ascii_parse_int64+0x140>
     13c:	b	230 <coda_ascii_parse_int64+0x230>
     140:	ldr	r0, [fp, #-8]
     144:	ldrb	r0, [r0]
     148:	sub	r0, r0, #48	; 0x30
     14c:	asr	r1, r0, #31
     150:	str	r0, [sp, #32]
     154:	str	r1, [sp, #36]	; 0x24
     158:	ldr	r0, [fp, #-40]	; 0xffffffd8
     15c:	ldr	r1, [fp, #-36]	; 0xffffffdc
     160:	ldr	r2, [sp, #32]
     164:	ldr	r3, [sp, #36]	; 0x24
     168:	mvn	ip, #-2147483648	; 0x80000000
     16c:	sub	r3, ip, r3
     170:	mvn	r2, r2
     174:	mov	ip, #10
     178:	mov	lr, #0
     17c:	str	r0, [sp, #20]
     180:	mov	r0, r2
     184:	str	r1, [sp, #16]
     188:	mov	r1, r3
     18c:	mov	r2, ip
     190:	mov	r3, lr
     194:	bl	0 <__aeabi_ldivmod>
     198:	ldr	r2, [sp, #20]
     19c:	subs	r0, r0, r2
     1a0:	ldr	r2, [sp, #16]
     1a4:	sbcs	r1, r1, r2
     1a8:	str	r0, [sp, #12]
     1ac:	str	r1, [sp, #8]
     1b0:	bge	1d4 <coda_ascii_parse_int64+0x1d4>
     1b4:	b	1b8 <coda_ascii_parse_int64+0x1b8>
     1b8:	mvn	r0, #102	; 0x66
     1bc:	movw	r1, #0
     1c0:	movt	r1, #0
     1c4:	bl	0 <coda_set_error>
     1c8:	mvn	r0, #0
     1cc:	str	r0, [fp, #-4]
     1d0:	b	360 <coda_ascii_parse_int64+0x360>
     1d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     1d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
     1dc:	mov	r2, #10
     1e0:	umull	r0, r2, r0, r2
     1e4:	add	r1, r1, r1, lsl #2
     1e8:	add	r1, r2, r1, lsl #1
     1ec:	ldr	r2, [sp, #32]
     1f0:	ldr	r3, [sp, #36]	; 0x24
     1f4:	adds	r0, r0, r2
     1f8:	adc	r1, r1, r3
     1fc:	str	r0, [fp, #-40]	; 0xffffffd8
     200:	str	r1, [fp, #-36]	; 0xffffffdc
     204:	ldr	r0, [fp, #-28]	; 0xffffffe4
     208:	add	r0, r0, #1
     20c:	str	r0, [fp, #-28]	; 0xffffffe4
     210:	ldr	r0, [fp, #-8]
     214:	add	r0, r0, #1
     218:	str	r0, [fp, #-8]
     21c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     220:	mvn	r1, #0
     224:	add	r0, r0, r1
     228:	str	r0, [fp, #-24]	; 0xffffffe8
     22c:	b	110 <coda_ascii_parse_int64+0x110>
     230:	ldr	r0, [fp, #-28]	; 0xffffffe4
     234:	cmp	r0, #0
     238:	bne	258 <coda_ascii_parse_int64+0x258>
     23c:	mvn	r0, #102	; 0x66
     240:	movw	r1, #0
     244:	movt	r1, #0
     248:	bl	0 <coda_set_error>
     24c:	mvn	r0, #0
     250:	str	r0, [fp, #-4]
     254:	b	360 <coda_ascii_parse_int64+0x360>
     258:	ldr	r0, [fp, #-20]	; 0xffffffec
     25c:	cmp	r0, #0
     260:	bne	318 <coda_ascii_parse_int64+0x318>
     264:	ldr	r0, [fp, #-24]	; 0xffffffe8
     268:	cmp	r0, #0
     26c:	beq	318 <coda_ascii_parse_int64+0x318>
     270:	b	274 <coda_ascii_parse_int64+0x274>
     274:	ldr	r0, [fp, #-24]	; 0xffffffe8
     278:	cmp	r0, #0
     27c:	movw	r0, #0
     280:	str	r0, [sp, #4]
     284:	ble	2c0 <coda_ascii_parse_int64+0x2c0>
     288:	ldr	r0, [fp, #-8]
     28c:	ldrb	r0, [r0]
     290:	cmp	r0, #32
     294:	movw	r0, #1
     298:	str	r0, [sp]
     29c:	beq	2b8 <coda_ascii_parse_int64+0x2b8>
     2a0:	ldr	r0, [fp, #-8]
     2a4:	ldrb	r0, [r0]
     2a8:	cmp	r0, #9
     2ac:	movw	r0, #0
     2b0:	moveq	r0, #1
     2b4:	str	r0, [sp]
     2b8:	ldr	r0, [sp]
     2bc:	str	r0, [sp, #4]
     2c0:	ldr	r0, [sp, #4]
     2c4:	tst	r0, #1
     2c8:	beq	2ec <coda_ascii_parse_int64+0x2ec>
     2cc:	ldr	r0, [fp, #-8]
     2d0:	add	r0, r0, #1
     2d4:	str	r0, [fp, #-8]
     2d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2dc:	mvn	r1, #0
     2e0:	add	r0, r0, r1
     2e4:	str	r0, [fp, #-24]	; 0xffffffe8
     2e8:	b	274 <coda_ascii_parse_int64+0x274>
     2ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     2f0:	cmp	r0, #0
     2f4:	beq	314 <coda_ascii_parse_int64+0x314>
     2f8:	mvn	r0, #102	; 0x66
     2fc:	movw	r1, #0
     300:	movt	r1, #0
     304:	bl	0 <coda_set_error>
     308:	mvn	r0, #0
     30c:	str	r0, [fp, #-4]
     310:	b	360 <coda_ascii_parse_int64+0x360>
     314:	b	318 <coda_ascii_parse_int64+0x318>
     318:	ldr	r0, [sp, #44]	; 0x2c
     31c:	cmp	r0, #0
     320:	beq	33c <coda_ascii_parse_int64+0x33c>
     324:	ldr	r0, [fp, #-40]	; 0xffffffd8
     328:	ldr	r1, [fp, #-36]	; 0xffffffdc
     32c:	rsbs	r0, r0, #0
     330:	rsc	r1, r1, #0
     334:	str	r0, [fp, #-40]	; 0xffffffd8
     338:	str	r1, [fp, #-36]	; 0xffffffdc
     33c:	ldr	r0, [fp, #-40]	; 0xffffffd8
     340:	ldr	r1, [fp, #-36]	; 0xffffffdc
     344:	ldr	r2, [fp, #-16]
     348:	str	r1, [r2, #4]
     34c:	str	r0, [r2]
     350:	ldr	r0, [fp, #-12]
     354:	ldr	r1, [fp, #-24]	; 0xffffffe8
     358:	sub	r0, r0, r1
     35c:	str	r0, [fp, #-4]
     360:	ldr	r0, [fp, #-4]
     364:	mov	sp, fp
     368:	pop	{fp, pc}

0000036c <coda_ascii_parse_uint64>:
     36c:	push	{fp, lr}
     370:	mov	fp, sp
     374:	sub	sp, sp, #80	; 0x50
     378:	str	r0, [fp, #-8]
     37c:	str	r1, [fp, #-12]
     380:	str	r2, [fp, #-16]
     384:	str	r3, [fp, #-20]	; 0xffffffec
     388:	ldr	r0, [fp, #-12]
     38c:	str	r0, [fp, #-24]	; 0xffffffe8
     390:	ldr	r0, [fp, #-24]	; 0xffffffe8
     394:	cmp	r0, #0
     398:	movw	r0, #0
     39c:	str	r0, [sp, #28]
     3a0:	ble	3dc <coda_ascii_parse_uint64+0x70>
     3a4:	ldr	r0, [fp, #-8]
     3a8:	ldrb	r0, [r0]
     3ac:	cmp	r0, #32
     3b0:	movw	r0, #1
     3b4:	str	r0, [sp, #24]
     3b8:	beq	3d4 <coda_ascii_parse_uint64+0x68>
     3bc:	ldr	r0, [fp, #-8]
     3c0:	ldrb	r0, [r0]
     3c4:	cmp	r0, #9
     3c8:	movw	r0, #0
     3cc:	moveq	r0, #1
     3d0:	str	r0, [sp, #24]
     3d4:	ldr	r0, [sp, #24]
     3d8:	str	r0, [sp, #28]
     3dc:	ldr	r0, [sp, #28]
     3e0:	tst	r0, #1
     3e4:	beq	408 <coda_ascii_parse_uint64+0x9c>
     3e8:	ldr	r0, [fp, #-8]
     3ec:	add	r0, r0, #1
     3f0:	str	r0, [fp, #-8]
     3f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3f8:	mvn	r1, #0
     3fc:	add	r0, r0, r1
     400:	str	r0, [fp, #-24]	; 0xffffffe8
     404:	b	390 <coda_ascii_parse_uint64+0x24>
     408:	ldr	r0, [fp, #-8]
     40c:	ldrb	r0, [r0]
     410:	cmp	r0, #43	; 0x2b
     414:	bne	434 <coda_ascii_parse_uint64+0xc8>
     418:	ldr	r0, [fp, #-8]
     41c:	add	r0, r0, #1
     420:	str	r0, [fp, #-8]
     424:	ldr	r0, [fp, #-24]	; 0xffffffe8
     428:	mvn	r1, #0
     42c:	add	r0, r0, r1
     430:	str	r0, [fp, #-24]	; 0xffffffe8
     434:	mov	r0, #0
     438:	str	r0, [sp, #44]	; 0x2c
     43c:	str	r0, [sp, #40]	; 0x28
     440:	movw	r0, #0
     444:	str	r0, [fp, #-28]	; 0xffffffe4
     448:	ldr	r0, [fp, #-24]	; 0xffffffe8
     44c:	cmp	r0, #0
     450:	ble	564 <coda_ascii_parse_uint64+0x1f8>
     454:	ldr	r0, [fp, #-8]
     458:	ldrb	r0, [r0]
     45c:	cmp	r0, #48	; 0x30
     460:	blt	474 <coda_ascii_parse_uint64+0x108>
     464:	ldr	r0, [fp, #-8]
     468:	ldrb	r0, [r0]
     46c:	cmp	r0, #57	; 0x39
     470:	ble	478 <coda_ascii_parse_uint64+0x10c>
     474:	b	564 <coda_ascii_parse_uint64+0x1f8>
     478:	ldr	r0, [fp, #-8]
     47c:	ldrb	r0, [r0]
     480:	sub	r0, r0, #48	; 0x30
     484:	asr	r1, r0, #31
     488:	str	r0, [sp, #32]
     48c:	str	r1, [sp, #36]	; 0x24
     490:	ldr	r0, [sp, #40]	; 0x28
     494:	ldr	r1, [sp, #44]	; 0x2c
     498:	ldr	r2, [sp, #32]
     49c:	ldr	r3, [sp, #36]	; 0x24
     4a0:	mvn	r2, r2
     4a4:	mvn	r3, r3
     4a8:	mov	ip, #10
     4ac:	mov	lr, #0
     4b0:	str	r0, [sp, #20]
     4b4:	mov	r0, r2
     4b8:	str	r1, [sp, #16]
     4bc:	mov	r1, r3
     4c0:	mov	r2, ip
     4c4:	mov	r3, lr
     4c8:	bl	0 <__aeabi_uldivmod>
     4cc:	ldr	r2, [sp, #20]
     4d0:	subs	r0, r0, r2
     4d4:	ldr	r2, [sp, #16]
     4d8:	sbcs	r1, r1, r2
     4dc:	str	r0, [sp, #12]
     4e0:	str	r1, [sp, #8]
     4e4:	bcs	508 <coda_ascii_parse_uint64+0x19c>
     4e8:	b	4ec <coda_ascii_parse_uint64+0x180>
     4ec:	mvn	r0, #102	; 0x66
     4f0:	movw	r1, #0
     4f4:	movt	r1, #0
     4f8:	bl	0 <coda_set_error>
     4fc:	mvn	r0, #0
     500:	str	r0, [fp, #-4]
     504:	b	670 <coda_ascii_parse_uint64+0x304>
     508:	ldr	r0, [sp, #40]	; 0x28
     50c:	ldr	r1, [sp, #44]	; 0x2c
     510:	mov	r2, #10
     514:	umull	r0, r2, r0, r2
     518:	add	r1, r1, r1, lsl #2
     51c:	add	r1, r2, r1, lsl #1
     520:	ldr	r2, [sp, #32]
     524:	ldr	r3, [sp, #36]	; 0x24
     528:	adds	r0, r0, r2
     52c:	adc	r1, r1, r3
     530:	str	r0, [sp, #40]	; 0x28
     534:	str	r1, [sp, #44]	; 0x2c
     538:	ldr	r0, [fp, #-28]	; 0xffffffe4
     53c:	add	r0, r0, #1
     540:	str	r0, [fp, #-28]	; 0xffffffe4
     544:	ldr	r0, [fp, #-8]
     548:	add	r0, r0, #1
     54c:	str	r0, [fp, #-8]
     550:	ldr	r0, [fp, #-24]	; 0xffffffe8
     554:	mvn	r1, #0
     558:	add	r0, r0, r1
     55c:	str	r0, [fp, #-24]	; 0xffffffe8
     560:	b	448 <coda_ascii_parse_uint64+0xdc>
     564:	ldr	r0, [fp, #-28]	; 0xffffffe4
     568:	cmp	r0, #0
     56c:	bne	58c <coda_ascii_parse_uint64+0x220>
     570:	mvn	r0, #102	; 0x66
     574:	movw	r1, #0
     578:	movt	r1, #0
     57c:	bl	0 <coda_set_error>
     580:	mvn	r0, #0
     584:	str	r0, [fp, #-4]
     588:	b	670 <coda_ascii_parse_uint64+0x304>
     58c:	ldr	r0, [fp, #-20]	; 0xffffffec
     590:	cmp	r0, #0
     594:	bne	64c <coda_ascii_parse_uint64+0x2e0>
     598:	ldr	r0, [fp, #-24]	; 0xffffffe8
     59c:	cmp	r0, #0
     5a0:	beq	64c <coda_ascii_parse_uint64+0x2e0>
     5a4:	b	5a8 <coda_ascii_parse_uint64+0x23c>
     5a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5ac:	cmp	r0, #0
     5b0:	movw	r0, #0
     5b4:	str	r0, [sp, #4]
     5b8:	ble	5f4 <coda_ascii_parse_uint64+0x288>
     5bc:	ldr	r0, [fp, #-8]
     5c0:	ldrb	r0, [r0]
     5c4:	cmp	r0, #32
     5c8:	movw	r0, #1
     5cc:	str	r0, [sp]
     5d0:	beq	5ec <coda_ascii_parse_uint64+0x280>
     5d4:	ldr	r0, [fp, #-8]
     5d8:	ldrb	r0, [r0]
     5dc:	cmp	r0, #9
     5e0:	movw	r0, #0
     5e4:	moveq	r0, #1
     5e8:	str	r0, [sp]
     5ec:	ldr	r0, [sp]
     5f0:	str	r0, [sp, #4]
     5f4:	ldr	r0, [sp, #4]
     5f8:	tst	r0, #1
     5fc:	beq	620 <coda_ascii_parse_uint64+0x2b4>
     600:	ldr	r0, [fp, #-8]
     604:	add	r0, r0, #1
     608:	str	r0, [fp, #-8]
     60c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     610:	mvn	r1, #0
     614:	add	r0, r0, r1
     618:	str	r0, [fp, #-24]	; 0xffffffe8
     61c:	b	5a8 <coda_ascii_parse_uint64+0x23c>
     620:	ldr	r0, [fp, #-24]	; 0xffffffe8
     624:	cmp	r0, #0
     628:	beq	648 <coda_ascii_parse_uint64+0x2dc>
     62c:	mvn	r0, #102	; 0x66
     630:	movw	r1, #0
     634:	movt	r1, #0
     638:	bl	0 <coda_set_error>
     63c:	mvn	r0, #0
     640:	str	r0, [fp, #-4]
     644:	b	670 <coda_ascii_parse_uint64+0x304>
     648:	b	64c <coda_ascii_parse_uint64+0x2e0>
     64c:	ldr	r0, [sp, #40]	; 0x28
     650:	ldr	r1, [sp, #44]	; 0x2c
     654:	ldr	r2, [fp, #-16]
     658:	str	r1, [r2, #4]
     65c:	str	r0, [r2]
     660:	ldr	r0, [fp, #-12]
     664:	ldr	r1, [fp, #-24]	; 0xffffffe8
     668:	sub	r0, r0, r1
     66c:	str	r0, [fp, #-4]
     670:	ldr	r0, [fp, #-4]
     674:	mov	sp, fp
     678:	pop	{fp, pc}
     67c:	nop	{0}

00000680 <coda_ascii_parse_double>:
     680:	push	{fp, lr}
     684:	mov	fp, sp
     688:	sub	sp, sp, #88	; 0x58
     68c:	str	r0, [fp, #-8]
     690:	str	r1, [fp, #-12]
     694:	str	r2, [fp, #-16]
     698:	str	r3, [fp, #-20]	; 0xffffffec
     69c:	movw	r0, #0
     6a0:	str	r0, [sp, #32]
     6a4:	ldr	r0, [fp, #-12]
     6a8:	str	r0, [fp, #-24]	; 0xffffffe8
     6ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     6b0:	cmp	r0, #0
     6b4:	movw	r0, #0
     6b8:	str	r0, [sp, #24]
     6bc:	ble	6f8 <coda_ascii_parse_double+0x78>
     6c0:	ldr	r0, [fp, #-8]
     6c4:	ldrb	r0, [r0]
     6c8:	cmp	r0, #32
     6cc:	movw	r0, #1
     6d0:	str	r0, [sp, #20]
     6d4:	beq	6f0 <coda_ascii_parse_double+0x70>
     6d8:	ldr	r0, [fp, #-8]
     6dc:	ldrb	r0, [r0]
     6e0:	cmp	r0, #9
     6e4:	movw	r0, #0
     6e8:	moveq	r0, #1
     6ec:	str	r0, [sp, #20]
     6f0:	ldr	r0, [sp, #20]
     6f4:	str	r0, [sp, #24]
     6f8:	ldr	r0, [sp, #24]
     6fc:	tst	r0, #1
     700:	beq	724 <coda_ascii_parse_double+0xa4>
     704:	ldr	r0, [fp, #-8]
     708:	add	r0, r0, #1
     70c:	str	r0, [fp, #-8]
     710:	ldr	r0, [fp, #-24]	; 0xffffffe8
     714:	mvn	r1, #0
     718:	add	r0, r0, r1
     71c:	str	r0, [fp, #-24]	; 0xffffffe8
     720:	b	6ac <coda_ascii_parse_double+0x2c>
     724:	movw	r0, #0
     728:	str	r0, [fp, #-36]	; 0xffffffdc
     72c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     730:	cmp	r0, #0
     734:	ble	79c <coda_ascii_parse_double+0x11c>
     738:	ldr	r0, [fp, #-8]
     73c:	ldrb	r0, [r0]
     740:	cmp	r0, #43	; 0x2b
     744:	beq	758 <coda_ascii_parse_double+0xd8>
     748:	ldr	r0, [fp, #-8]
     74c:	ldrb	r0, [r0]
     750:	cmp	r0, #45	; 0x2d
     754:	bne	798 <coda_ascii_parse_double+0x118>
     758:	ldr	r0, [fp, #-8]
     75c:	ldrb	r0, [r0]
     760:	cmp	r0, #45	; 0x2d
     764:	movw	r0, #0
     768:	moveq	r0, #1
     76c:	and	r0, r0, #1
     770:	str	r0, [sp, #32]
     774:	movw	r0, #1
     778:	str	r0, [fp, #-36]	; 0xffffffdc
     77c:	ldr	r0, [fp, #-8]
     780:	add	r0, r0, #1
     784:	str	r0, [fp, #-8]
     788:	ldr	r0, [fp, #-24]	; 0xffffffe8
     78c:	mvn	r1, #0
     790:	add	r0, r0, r1
     794:	str	r0, [fp, #-24]	; 0xffffffe8
     798:	b	79c <coda_ascii_parse_double+0x11c>
     79c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     7a0:	cmp	r0, #3
     7a4:	blt	95c <coda_ascii_parse_double+0x2dc>
     7a8:	ldr	r0, [fp, #-8]
     7ac:	ldrb	r0, [r0]
     7b0:	cmp	r0, #78	; 0x4e
     7b4:	beq	7c8 <coda_ascii_parse_double+0x148>
     7b8:	ldr	r0, [fp, #-8]
     7bc:	ldrb	r0, [r0]
     7c0:	cmp	r0, #110	; 0x6e
     7c4:	bne	874 <coda_ascii_parse_double+0x1f4>
     7c8:	ldr	r0, [fp, #-8]
     7cc:	ldrb	r0, [r0, #1]
     7d0:	cmp	r0, #65	; 0x41
     7d4:	beq	7e8 <coda_ascii_parse_double+0x168>
     7d8:	ldr	r0, [fp, #-8]
     7dc:	ldrb	r0, [r0, #1]
     7e0:	cmp	r0, #97	; 0x61
     7e4:	bne	874 <coda_ascii_parse_double+0x1f4>
     7e8:	ldr	r0, [fp, #-8]
     7ec:	ldrb	r0, [r0, #2]
     7f0:	cmp	r0, #78	; 0x4e
     7f4:	beq	808 <coda_ascii_parse_double+0x188>
     7f8:	ldr	r0, [fp, #-8]
     7fc:	ldrb	r0, [r0, #2]
     800:	cmp	r0, #110	; 0x6e
     804:	bne	874 <coda_ascii_parse_double+0x1f4>
     808:	ldr	r0, [fp, #-36]	; 0xffffffdc
     80c:	cmp	r0, #0
     810:	bne	874 <coda_ascii_parse_double+0x1f4>
     814:	ldr	r0, [fp, #-24]	; 0xffffffe8
     818:	sub	r0, r0, #3
     81c:	str	r0, [fp, #-24]	; 0xffffffe8
     820:	ldr	r0, [fp, #-20]	; 0xffffffec
     824:	cmp	r0, #0
     828:	bne	854 <coda_ascii_parse_double+0x1d4>
     82c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     830:	cmp	r0, #0
     834:	beq	854 <coda_ascii_parse_double+0x1d4>
     838:	mvn	r0, #102	; 0x66
     83c:	movw	r1, #0
     840:	movt	r1, #0
     844:	bl	0 <coda_set_error>
     848:	mvn	r0, #0
     84c:	str	r0, [fp, #-4]
     850:	b	dc4 <coda_ascii_parse_double+0x744>
     854:	bl	0 <coda_NaN>
     858:	ldr	lr, [fp, #-16]
     85c:	vstr	d0, [lr]
     860:	ldr	lr, [fp, #-12]
     864:	ldr	r0, [fp, #-24]	; 0xffffffe8
     868:	sub	r0, lr, r0
     86c:	str	r0, [fp, #-4]
     870:	b	dc4 <coda_ascii_parse_double+0x744>
     874:	ldr	r0, [fp, #-8]
     878:	ldrb	r0, [r0]
     87c:	cmp	r0, #73	; 0x49
     880:	beq	894 <coda_ascii_parse_double+0x214>
     884:	ldr	r0, [fp, #-8]
     888:	ldrb	r0, [r0]
     88c:	cmp	r0, #105	; 0x69
     890:	bne	954 <coda_ascii_parse_double+0x2d4>
     894:	ldr	r0, [fp, #-8]
     898:	ldrb	r0, [r0, #1]
     89c:	cmp	r0, #78	; 0x4e
     8a0:	beq	8b4 <coda_ascii_parse_double+0x234>
     8a4:	ldr	r0, [fp, #-8]
     8a8:	ldrb	r0, [r0, #1]
     8ac:	cmp	r0, #110	; 0x6e
     8b0:	bne	954 <coda_ascii_parse_double+0x2d4>
     8b4:	ldr	r0, [fp, #-8]
     8b8:	ldrb	r0, [r0, #2]
     8bc:	cmp	r0, #70	; 0x46
     8c0:	beq	8d4 <coda_ascii_parse_double+0x254>
     8c4:	ldr	r0, [fp, #-8]
     8c8:	ldrb	r0, [r0, #2]
     8cc:	cmp	r0, #102	; 0x66
     8d0:	bne	954 <coda_ascii_parse_double+0x2d4>
     8d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8d8:	sub	r0, r0, #3
     8dc:	str	r0, [fp, #-24]	; 0xffffffe8
     8e0:	ldr	r0, [fp, #-20]	; 0xffffffec
     8e4:	cmp	r0, #0
     8e8:	bne	914 <coda_ascii_parse_double+0x294>
     8ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     8f0:	cmp	r0, #0
     8f4:	beq	914 <coda_ascii_parse_double+0x294>
     8f8:	mvn	r0, #102	; 0x66
     8fc:	movw	r1, #0
     900:	movt	r1, #0
     904:	bl	0 <coda_set_error>
     908:	mvn	r0, #0
     90c:	str	r0, [fp, #-4]
     910:	b	dc4 <coda_ascii_parse_double+0x744>
     914:	ldr	r0, [sp, #32]
     918:	cmp	r0, #0
     91c:	beq	92c <coda_ascii_parse_double+0x2ac>
     920:	bl	0 <coda_MinInf>
     924:	vstr	d0, [sp, #8]
     928:	b	934 <coda_ascii_parse_double+0x2b4>
     92c:	bl	0 <coda_PlusInf>
     930:	vstr	d0, [sp, #8]
     934:	vldr	d16, [sp, #8]
     938:	ldr	r0, [fp, #-16]
     93c:	vstr	d16, [r0]
     940:	ldr	r0, [fp, #-12]
     944:	ldr	r1, [fp, #-24]	; 0xffffffe8
     948:	sub	r0, r0, r1
     94c:	str	r0, [fp, #-4]
     950:	b	dc4 <coda_ascii_parse_double+0x744>
     954:	b	958 <coda_ascii_parse_double+0x2d8>
     958:	b	95c <coda_ascii_parse_double+0x2dc>
     95c:	vldr	d16, [pc, #1004]	; d50 <coda_ascii_parse_double+0x6d0>
     960:	vstr	d16, [sp, #40]	; 0x28
     964:	movw	r0, #0
     968:	str	r0, [sp, #36]	; 0x24
     96c:	str	r0, [fp, #-28]	; 0xffffffe4
     970:	ldr	r0, [fp, #-24]	; 0xffffffe8
     974:	cmp	r0, #0
     978:	ble	9f4 <coda_ascii_parse_double+0x374>
     97c:	ldr	r0, [fp, #-8]
     980:	ldrb	r0, [r0]
     984:	cmp	r0, #48	; 0x30
     988:	blt	99c <coda_ascii_parse_double+0x31c>
     98c:	ldr	r0, [fp, #-8]
     990:	ldrb	r0, [r0]
     994:	cmp	r0, #57	; 0x39
     998:	ble	9a0 <coda_ascii_parse_double+0x320>
     99c:	b	9f4 <coda_ascii_parse_double+0x374>
     9a0:	vldr	d16, [sp, #40]	; 0x28
     9a4:	vmov.f64	d17, #36	; 0x41200000  10.0
     9a8:	vmul.f64	d16, d17, d16
     9ac:	ldr	r0, [fp, #-8]
     9b0:	ldrb	r0, [r0]
     9b4:	sub	r0, r0, #48	; 0x30
     9b8:	vmov	s0, r0
     9bc:	vcvt.f64.s32	d17, s0
     9c0:	vadd.f64	d16, d16, d17
     9c4:	vstr	d16, [sp, #40]	; 0x28
     9c8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     9cc:	add	r0, r0, #1
     9d0:	str	r0, [fp, #-28]	; 0xffffffe4
     9d4:	ldr	r0, [fp, #-8]
     9d8:	add	r0, r0, #1
     9dc:	str	r0, [fp, #-8]
     9e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9e4:	mvn	r1, #0
     9e8:	add	r0, r0, r1
     9ec:	str	r0, [fp, #-24]	; 0xffffffe8
     9f0:	b	970 <coda_ascii_parse_double+0x2f0>
     9f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9f8:	cmp	r0, #0
     9fc:	ble	ac4 <coda_ascii_parse_double+0x444>
     a00:	ldr	r0, [fp, #-8]
     a04:	ldrb	r0, [r0]
     a08:	cmp	r0, #46	; 0x2e
     a0c:	bne	ac0 <coda_ascii_parse_double+0x440>
     a10:	ldr	r0, [fp, #-8]
     a14:	add	r0, r0, #1
     a18:	str	r0, [fp, #-8]
     a1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a20:	mvn	r1, #0
     a24:	add	r0, r0, r1
     a28:	str	r0, [fp, #-24]	; 0xffffffe8
     a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a30:	cmp	r0, #0
     a34:	ble	abc <coda_ascii_parse_double+0x43c>
     a38:	ldr	r0, [fp, #-8]
     a3c:	ldrb	r0, [r0]
     a40:	cmp	r0, #48	; 0x30
     a44:	blt	a58 <coda_ascii_parse_double+0x3d8>
     a48:	ldr	r0, [fp, #-8]
     a4c:	ldrb	r0, [r0]
     a50:	cmp	r0, #57	; 0x39
     a54:	ble	a5c <coda_ascii_parse_double+0x3dc>
     a58:	b	abc <coda_ascii_parse_double+0x43c>
     a5c:	vldr	d16, [sp, #40]	; 0x28
     a60:	vmov.f64	d17, #36	; 0x41200000  10.0
     a64:	vmul.f64	d16, d17, d16
     a68:	ldr	r0, [fp, #-8]
     a6c:	ldrb	r0, [r0]
     a70:	sub	r0, r0, #48	; 0x30
     a74:	vmov	s0, r0
     a78:	vcvt.f64.s32	d17, s0
     a7c:	vadd.f64	d16, d16, d17
     a80:	vstr	d16, [sp, #40]	; 0x28
     a84:	ldr	r0, [sp, #36]	; 0x24
     a88:	mvn	r1, #0
     a8c:	add	r0, r0, r1
     a90:	str	r0, [sp, #36]	; 0x24
     a94:	ldr	r0, [fp, #-28]	; 0xffffffe4
     a98:	add	r0, r0, #1
     a9c:	str	r0, [fp, #-28]	; 0xffffffe4
     aa0:	ldr	r0, [fp, #-8]
     aa4:	add	r0, r0, #1
     aa8:	str	r0, [fp, #-8]
     aac:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ab0:	add	r0, r0, r1
     ab4:	str	r0, [fp, #-24]	; 0xffffffe8
     ab8:	b	a2c <coda_ascii_parse_double+0x3ac>
     abc:	b	ac0 <coda_ascii_parse_double+0x440>
     ac0:	b	ac4 <coda_ascii_parse_double+0x444>
     ac4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     ac8:	cmp	r0, #0
     acc:	bne	aec <coda_ascii_parse_double+0x46c>
     ad0:	mvn	r0, #102	; 0x66
     ad4:	movw	r1, #0
     ad8:	movt	r1, #0
     adc:	bl	0 <coda_set_error>
     ae0:	mvn	r0, #0
     ae4:	str	r0, [fp, #-4]
     ae8:	b	dc4 <coda_ascii_parse_double+0x744>
     aec:	ldr	r0, [sp, #32]
     af0:	cmp	r0, #0
     af4:	beq	b04 <coda_ascii_parse_double+0x484>
     af8:	vldr	d16, [sp, #40]	; 0x28
     afc:	vneg.f64	d16, d16
     b00:	vstr	d16, [sp, #40]	; 0x28
     b04:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b08:	cmp	r0, #0
     b0c:	ble	cb8 <coda_ascii_parse_double+0x638>
     b10:	ldr	r0, [fp, #-8]
     b14:	ldrb	r0, [r0]
     b18:	cmp	r0, #100	; 0x64
     b1c:	beq	b50 <coda_ascii_parse_double+0x4d0>
     b20:	ldr	r0, [fp, #-8]
     b24:	ldrb	r0, [r0]
     b28:	cmp	r0, #68	; 0x44
     b2c:	beq	b50 <coda_ascii_parse_double+0x4d0>
     b30:	ldr	r0, [fp, #-8]
     b34:	ldrb	r0, [r0]
     b38:	cmp	r0, #101	; 0x65
     b3c:	beq	b50 <coda_ascii_parse_double+0x4d0>
     b40:	ldr	r0, [fp, #-8]
     b44:	ldrb	r0, [r0]
     b48:	cmp	r0, #69	; 0x45
     b4c:	bne	cb8 <coda_ascii_parse_double+0x638>
     b50:	ldr	r0, [fp, #-8]
     b54:	add	r0, r0, #1
     b58:	str	r0, [fp, #-8]
     b5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b60:	mvn	r1, #0
     b64:	add	r0, r0, r1
     b68:	str	r0, [fp, #-24]	; 0xffffffe8
     b6c:	movw	r0, #0
     b70:	str	r0, [sp, #32]
     b74:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b78:	cmp	r0, #0
     b7c:	ble	bdc <coda_ascii_parse_double+0x55c>
     b80:	ldr	r0, [fp, #-8]
     b84:	ldrb	r0, [r0]
     b88:	cmp	r0, #43	; 0x2b
     b8c:	beq	ba0 <coda_ascii_parse_double+0x520>
     b90:	ldr	r0, [fp, #-8]
     b94:	ldrb	r0, [r0]
     b98:	cmp	r0, #45	; 0x2d
     b9c:	bne	bd8 <coda_ascii_parse_double+0x558>
     ba0:	ldr	r0, [fp, #-8]
     ba4:	ldrb	r0, [r0]
     ba8:	cmp	r0, #45	; 0x2d
     bac:	movw	r0, #0
     bb0:	moveq	r0, #1
     bb4:	and	r0, r0, #1
     bb8:	str	r0, [sp, #32]
     bbc:	ldr	r0, [fp, #-8]
     bc0:	add	r0, r0, #1
     bc4:	str	r0, [fp, #-8]
     bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bcc:	mvn	r1, #0
     bd0:	add	r0, r0, r1
     bd4:	str	r0, [fp, #-24]	; 0xffffffe8
     bd8:	b	bdc <coda_ascii_parse_double+0x55c>
     bdc:	movw	r0, #0
     be0:	str	r0, [sp, #28]
     be4:	str	r0, [fp, #-32]	; 0xffffffe0
     be8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bec:	cmp	r0, #0
     bf0:	ble	c64 <coda_ascii_parse_double+0x5e4>
     bf4:	ldr	r0, [fp, #-8]
     bf8:	ldrb	r0, [r0]
     bfc:	cmp	r0, #48	; 0x30
     c00:	blt	c14 <coda_ascii_parse_double+0x594>
     c04:	ldr	r0, [fp, #-8]
     c08:	ldrb	r0, [r0]
     c0c:	cmp	r0, #57	; 0x39
     c10:	ble	c18 <coda_ascii_parse_double+0x598>
     c14:	b	c64 <coda_ascii_parse_double+0x5e4>
     c18:	ldr	r0, [sp, #28]
     c1c:	movw	r1, #10
     c20:	mul	r0, r0, r1
     c24:	ldr	r1, [fp, #-8]
     c28:	ldrb	r1, [r1]
     c2c:	sub	r1, r1, #48	; 0x30
     c30:	add	r0, r0, r1
     c34:	str	r0, [sp, #28]
     c38:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c3c:	add	r0, r0, #1
     c40:	str	r0, [fp, #-32]	; 0xffffffe0
     c44:	ldr	r0, [fp, #-8]
     c48:	add	r0, r0, #1
     c4c:	str	r0, [fp, #-8]
     c50:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c54:	mvn	r1, #0
     c58:	add	r0, r0, r1
     c5c:	str	r0, [fp, #-24]	; 0xffffffe8
     c60:	b	be8 <coda_ascii_parse_double+0x568>
     c64:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c68:	cmp	r0, #0
     c6c:	bne	c8c <coda_ascii_parse_double+0x60c>
     c70:	mvn	r0, #102	; 0x66
     c74:	movw	r1, #0
     c78:	movt	r1, #0
     c7c:	bl	0 <coda_set_error>
     c80:	mvn	r0, #0
     c84:	str	r0, [fp, #-4]
     c88:	b	dc4 <coda_ascii_parse_double+0x744>
     c8c:	ldr	r0, [sp, #32]
     c90:	cmp	r0, #0
     c94:	beq	ca8 <coda_ascii_parse_double+0x628>
     c98:	ldr	r0, [sp, #28]
     c9c:	movw	r1, #0
     ca0:	sub	r0, r1, r0
     ca4:	str	r0, [sp, #28]
     ca8:	ldr	r0, [sp, #28]
     cac:	ldr	r1, [sp, #36]	; 0x24
     cb0:	add	r0, r1, r0
     cb4:	str	r0, [sp, #36]	; 0x24
     cb8:	ldr	r0, [fp, #-20]	; 0xffffffec
     cbc:	cmp	r0, #0
     cc0:	bne	d84 <coda_ascii_parse_double+0x704>
     cc4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cc8:	cmp	r0, #0
     ccc:	beq	d84 <coda_ascii_parse_double+0x704>
     cd0:	b	cd4 <coda_ascii_parse_double+0x654>
     cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     cd8:	cmp	r0, #0
     cdc:	movw	r0, #0
     ce0:	str	r0, [sp, #4]
     ce4:	ble	d20 <coda_ascii_parse_double+0x6a0>
     ce8:	ldr	r0, [fp, #-8]
     cec:	ldrb	r0, [r0]
     cf0:	cmp	r0, #32
     cf4:	movw	r0, #1
     cf8:	str	r0, [sp]
     cfc:	beq	d18 <coda_ascii_parse_double+0x698>
     d00:	ldr	r0, [fp, #-8]
     d04:	ldrb	r0, [r0]
     d08:	cmp	r0, #9
     d0c:	movw	r0, #0
     d10:	moveq	r0, #1
     d14:	str	r0, [sp]
     d18:	ldr	r0, [sp]
     d1c:	str	r0, [sp, #4]
     d20:	ldr	r0, [sp, #4]
     d24:	tst	r0, #1
     d28:	beq	d58 <coda_ascii_parse_double+0x6d8>
     d2c:	ldr	r0, [fp, #-8]
     d30:	add	r0, r0, #1
     d34:	str	r0, [fp, #-8]
     d38:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d3c:	mvn	r1, #0
     d40:	add	r0, r0, r1
     d44:	str	r0, [fp, #-24]	; 0xffffffe8
     d48:	b	cd4 <coda_ascii_parse_double+0x654>
     d4c:	nop	{0}
	...
     d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
     d5c:	cmp	r0, #0
     d60:	beq	d80 <coda_ascii_parse_double+0x700>
     d64:	mvn	r0, #102	; 0x66
     d68:	movw	r1, #0
     d6c:	movt	r1, #0
     d70:	bl	0 <coda_set_error>
     d74:	mvn	r0, #0
     d78:	str	r0, [fp, #-4]
     d7c:	b	dc4 <coda_ascii_parse_double+0x744>
     d80:	b	d84 <coda_ascii_parse_double+0x704>
     d84:	ldr	r0, [sp, #36]	; 0x24
     d88:	cmp	r0, #0
     d8c:	beq	da8 <coda_ascii_parse_double+0x728>
     d90:	ldr	r0, [sp, #36]	; 0x24
     d94:	vmov.f64	d0, #36	; 0x41200000  10.0
     d98:	bl	dd0 <ipow>
     d9c:	vldr	d16, [sp, #40]	; 0x28
     da0:	vmul.f64	d16, d16, d0
     da4:	vstr	d16, [sp, #40]	; 0x28
     da8:	vldr	d16, [sp, #40]	; 0x28
     dac:	ldr	r0, [fp, #-16]
     db0:	vstr	d16, [r0]
     db4:	ldr	r0, [fp, #-12]
     db8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     dbc:	sub	r0, r0, r1
     dc0:	str	r0, [fp, #-4]
     dc4:	ldr	r0, [fp, #-4]
     dc8:	mov	sp, fp
     dcc:	pop	{fp, pc}

00000dd0 <ipow>:
     dd0:	sub	sp, sp, #24
     dd4:	vstr	d0, [sp, #16]
     dd8:	str	r0, [sp, #12]
     ddc:	vmov.f64	d0, #112	; 0x3f800000  1.0
     de0:	vstr	d0, [sp]
     de4:	ldr	r0, [sp, #12]
     de8:	cmp	r0, #0
     dec:	bge	e30 <ipow+0x60>
     df0:	b	df4 <ipow+0x24>
     df4:	ldr	r0, [sp, #12]
     df8:	add	r1, r0, #1
     dfc:	str	r1, [sp, #12]
     e00:	cmp	r0, #0
     e04:	beq	e1c <ipow+0x4c>
     e08:	vldr	d16, [sp, #16]
     e0c:	vldr	d17, [sp]
     e10:	vmul.f64	d16, d17, d16
     e14:	vstr	d16, [sp]
     e18:	b	df4 <ipow+0x24>
     e1c:	vldr	d16, [sp]
     e20:	vmov.f64	d17, #112	; 0x3f800000  1.0
     e24:	vdiv.f64	d16, d17, d16
     e28:	vstr	d16, [sp]
     e2c:	b	e64 <ipow+0x94>
     e30:	b	e34 <ipow+0x64>
     e34:	ldr	r0, [sp, #12]
     e38:	mvn	r1, #0
     e3c:	add	r1, r0, r1
     e40:	str	r1, [sp, #12]
     e44:	cmp	r0, #0
     e48:	beq	e60 <ipow+0x90>
     e4c:	vldr	d16, [sp, #16]
     e50:	vldr	d17, [sp]
     e54:	vmul.f64	d16, d17, d16
     e58:	vstr	d16, [sp]
     e5c:	b	e34 <ipow+0x64>
     e60:	b	e64 <ipow+0x94>
     e64:	vldr	d0, [sp]
     e68:	add	sp, sp, #24
     e6c:	bx	lr

00000e70 <coda_ascii_cursor_set_asciilines>:
     e70:	push	{fp, lr}
     e74:	mov	fp, sp
     e78:	sub	sp, sp, #32
     e7c:	str	r0, [fp, #-8]
     e80:	str	r1, [fp, #-12]
     e84:	ldr	r0, [fp, #-12]
     e88:	str	r0, [sp, #16]
     e8c:	ldr	r0, [sp, #16]
     e90:	ldr	r0, [r0, #68]	; 0x44
     e94:	movw	r1, #0
     e98:	cmp	r0, r1
     e9c:	bne	ec0 <coda_ascii_cursor_set_asciilines+0x50>
     ea0:	ldr	r0, [fp, #-12]
     ea4:	bl	0 <coda_ascii_init_asciilines>
     ea8:	cmp	r0, #0
     eac:	beq	ebc <coda_ascii_cursor_set_asciilines+0x4c>
     eb0:	mvn	r0, #0
     eb4:	str	r0, [fp, #-4]
     eb8:	b	ff8 <coda_ascii_cursor_set_asciilines+0x188>
     ebc:	b	ec0 <coda_ascii_cursor_set_asciilines+0x50>
     ec0:	ldr	r0, [sp, #16]
     ec4:	ldr	r0, [r0, #76]	; 0x4c
     ec8:	movw	r1, #0
     ecc:	cmp	r0, r1
     ed0:	bne	fac <coda_ascii_cursor_set_asciilines+0x13c>
     ed4:	movw	r0, #0
     ed8:	bl	0 <coda_type_array_new>
     edc:	str	r0, [sp, #12]
     ee0:	ldr	r0, [sp, #12]
     ee4:	movw	lr, #0
     ee8:	cmp	r0, lr
     eec:	bne	efc <coda_ascii_cursor_set_asciilines+0x8c>
     ef0:	mvn	r0, #0
     ef4:	str	r0, [fp, #-4]
     ef8:	b	ff8 <coda_ascii_cursor_set_asciilines+0x188>
     efc:	ldr	r0, [sp, #12]
     f00:	ldr	r1, [sp, #16]
     f04:	ldr	r1, [r1, #64]	; 0x40
     f08:	bl	0 <coda_type_array_add_fixed_dimension>
     f0c:	cmp	r0, #0
     f10:	beq	f28 <coda_ascii_cursor_set_asciilines+0xb8>
     f14:	ldr	r0, [sp, #12]
     f18:	bl	0 <coda_type_release>
     f1c:	mvn	r0, #0
     f20:	str	r0, [fp, #-4]
     f24:	b	ff8 <coda_ascii_cursor_set_asciilines+0x188>
     f28:	movw	r0, #0
     f2c:	bl	0 <coda_type_text_new>
     f30:	str	r0, [sp, #8]
     f34:	ldr	r0, [sp, #8]
     f38:	movw	lr, #0
     f3c:	cmp	r0, lr
     f40:	bne	f58 <coda_ascii_cursor_set_asciilines+0xe8>
     f44:	ldr	r0, [sp, #12]
     f48:	bl	0 <coda_type_release>
     f4c:	mvn	r0, #0
     f50:	str	r0, [fp, #-4]
     f54:	b	ff8 <coda_ascii_cursor_set_asciilines+0x188>
     f58:	ldr	r0, [sp, #8]
     f5c:	movw	r1, #2
     f60:	bl	0 <coda_type_text_set_special_text_type>
     f64:	ldr	r1, [sp, #12]
     f68:	ldr	lr, [sp, #8]
     f6c:	str	r0, [sp, #4]
     f70:	mov	r0, r1
     f74:	mov	r1, lr
     f78:	bl	0 <coda_type_array_set_base_type>
     f7c:	cmp	r0, #0
     f80:	beq	fa0 <coda_ascii_cursor_set_asciilines+0x130>
     f84:	ldr	r0, [sp, #12]
     f88:	bl	0 <coda_type_release>
     f8c:	ldr	r0, [sp, #8]
     f90:	bl	0 <coda_type_release>
     f94:	mvn	r0, #0
     f98:	str	r0, [fp, #-4]
     f9c:	b	ff8 <coda_ascii_cursor_set_asciilines+0x188>
     fa0:	ldr	r0, [sp, #12]
     fa4:	ldr	r1, [sp, #16]
     fa8:	str	r0, [r1, #76]	; 0x4c
     fac:	ldr	r0, [fp, #-12]
     fb0:	ldr	r1, [fp, #-8]
     fb4:	str	r0, [r1]
     fb8:	ldr	r0, [fp, #-8]
     fbc:	mov	r1, #1
     fc0:	str	r1, [r0, #4]
     fc4:	ldr	r0, [sp, #16]
     fc8:	ldr	r0, [r0, #76]	; 0x4c
     fcc:	ldr	r1, [fp, #-8]
     fd0:	str	r0, [r1, #8]
     fd4:	ldr	r0, [fp, #-8]
     fd8:	mvn	r1, #0
     fdc:	str	r1, [r0, #12]
     fe0:	ldr	r0, [fp, #-8]
     fe4:	mov	r1, #0
     fe8:	str	r1, [r0, #20]
     fec:	str	r1, [r0, #16]
     ff0:	movw	r0, #0
     ff4:	str	r0, [fp, #-4]
     ff8:	ldr	r0, [fp, #-4]
     ffc:	mov	sp, fp
    1000:	pop	{fp, pc}

00001004 <coda_ascii_cursor_get_string_length>:
    1004:	push	{fp, lr}
    1008:	mov	fp, sp
    100c:	sub	sp, sp, #24
    1010:	str	r0, [fp, #-8]
    1014:	str	r1, [sp, #12]
    1018:	ldr	r0, [fp, #-8]
    101c:	mov	r1, sp
    1020:	bl	1084 <coda_ascii_cursor_get_bit_size>
    1024:	cmp	r0, #0
    1028:	beq	1038 <coda_ascii_cursor_get_string_length+0x34>
    102c:	mvn	r0, #0
    1030:	str	r0, [fp, #-4]
    1034:	b	1078 <coda_ascii_cursor_get_string_length+0x74>
    1038:	ldr	r0, [sp, #4]
    103c:	cmn	r0, #1
    1040:	bgt	1058 <coda_ascii_cursor_get_string_length+0x54>
    1044:	b	1048 <coda_ascii_cursor_get_string_length+0x44>
    1048:	ldr	r0, [sp, #12]
    104c:	mvn	r1, #0
    1050:	str	r1, [r0]
    1054:	b	1070 <coda_ascii_cursor_get_string_length+0x6c>
    1058:	ldr	r0, [sp]
    105c:	ldr	r1, [sp, #4]
    1060:	lsr	r0, r0, #3
    1064:	orr	r0, r0, r1, lsl #29
    1068:	ldr	r1, [sp, #12]
    106c:	str	r0, [r1]
    1070:	movw	r0, #0
    1074:	str	r0, [fp, #-4]
    1078:	ldr	r0, [fp, #-4]
    107c:	mov	sp, fp
    1080:	pop	{fp, pc}

00001084 <coda_ascii_cursor_get_bit_size>:
    1084:	push	{r4, sl, fp, lr}
    1088:	add	fp, sp, #8
    108c:	sub	sp, sp, #880	; 0x370
    1090:	str	r0, [fp, #-16]
    1094:	str	r1, [fp, #-20]	; 0xffffffec
    1098:	ldr	r0, [fp, #-16]
    109c:	add	r1, r0, #8
    10a0:	ldr	r0, [r0, #4]
    10a4:	sub	r0, r0, #1
    10a8:	add	r0, r1, r0, lsl #4
    10ac:	ldr	r0, [r0]
    10b0:	ldr	r0, [r0]
    10b4:	cmp	r0, #100	; 0x64
    10b8:	bcs	10dc <coda_ascii_cursor_get_bit_size+0x58>
    10bc:	ldr	r0, [fp, #-16]
    10c0:	add	r1, r0, #8
    10c4:	ldr	r0, [r0, #4]
    10c8:	sub	r0, r0, #1
    10cc:	add	r0, r1, r0, lsl #4
    10d0:	ldr	r0, [r0]
    10d4:	str	r0, [sp, #96]	; 0x60
    10d8:	b	10fc <coda_ascii_cursor_get_bit_size+0x78>
    10dc:	ldr	r0, [fp, #-16]
    10e0:	add	r1, r0, #8
    10e4:	ldr	r0, [r0, #4]
    10e8:	sub	r0, r0, #1
    10ec:	add	r0, r1, r0, lsl #4
    10f0:	ldr	r0, [r0]
    10f4:	ldr	r0, [r0, #4]
    10f8:	str	r0, [sp, #96]	; 0x60
    10fc:	ldr	r0, [sp, #96]	; 0x60
    1100:	str	r0, [fp, #-24]	; 0xffffffe8
    1104:	mov	r0, #0
    1108:	str	r0, [fp, #-28]	; 0xffffffe4
    110c:	ldr	r1, [fp, #-16]
    1110:	ldr	r2, [r1, #4]
    1114:	ldr	r2, [r1, r2, lsl #4]!
    1118:	ldr	r1, [r1, #4]
    111c:	str	r1, [fp, #-36]	; 0xffffffdc
    1120:	str	r2, [fp, #-40]	; 0xffffffd8
    1124:	mvn	r1, #0
    1128:	str	r1, [fp, #-116]	; 0xffffff8c
    112c:	str	r0, [fp, #-120]	; 0xffffff88
    1130:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1134:	ldr	r0, [r0, #28]
    1138:	cmp	r0, #0
    113c:	blt	1168 <coda_ascii_cursor_get_bit_size+0xe4>
    1140:	b	1144 <coda_ascii_cursor_get_bit_size+0xc0>
    1144:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1148:	ldr	r1, [r0, #24]
    114c:	ldr	r0, [r0, #28]
    1150:	ldr	r2, [fp, #-20]	; 0xffffffec
    1154:	str	r0, [r2, #4]
    1158:	str	r1, [r2]
    115c:	movw	r0, #0
    1160:	str	r0, [fp, #-12]
    1164:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1168:	ldr	r0, [fp, #-24]	; 0xffffffe8
    116c:	ldr	r0, [r0, #8]
    1170:	cmp	r0, #0
    1174:	beq	1188 <coda_ascii_cursor_get_bit_size+0x104>
    1178:	ldr	r0, [fp, #-24]	; 0xffffffe8
    117c:	ldr	r0, [r0, #8]
    1180:	cmp	r0, #1
    1184:	bne	119c <coda_ascii_cursor_get_bit_size+0x118>
    1188:	ldr	r0, [fp, #-16]
    118c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1190:	bl	0 <coda_ascbin_cursor_get_bit_size>
    1194:	str	r0, [fp, #-12]
    1198:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    119c:	ldr	r0, [fp, #-16]
    11a0:	sub	r1, fp, #48	; 0x30
    11a4:	mvn	r2, #0
    11a8:	str	r2, [sp, #92]	; 0x5c
    11ac:	ldr	r3, [sp, #92]	; 0x5c
    11b0:	bl	2028 <get_bit_size_boundary>
    11b4:	cmp	r0, #0
    11b8:	beq	11c8 <coda_ascii_cursor_get_bit_size+0x144>
    11bc:	mvn	r0, #0
    11c0:	str	r0, [fp, #-12]
    11c4:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    11c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11cc:	ldr	r0, [r0, #8]
    11d0:	cmp	r0, #2
    11d4:	beq	11e8 <coda_ascii_cursor_get_bit_size+0x164>
    11d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11dc:	ldr	r0, [r0, #8]
    11e0:	cmp	r0, #3
    11e4:	bne	1238 <coda_ascii_cursor_get_bit_size+0x1b4>
    11e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    11ec:	ldr	r0, [r0, #52]	; 0x34
    11f0:	str	r0, [fp, #-28]	; 0xffffffe4
    11f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    11f8:	movw	r1, #0
    11fc:	cmp	r0, r1
    1200:	movw	r0, #1
    1204:	str	r0, [sp, #88]	; 0x58
    1208:	bne	1228 <coda_ascii_cursor_get_bit_size+0x1a4>
    120c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1210:	ldr	r0, [r0, #32]
    1214:	movw	r1, #0
    1218:	cmp	r0, r1
    121c:	movw	r0, #0
    1220:	moveq	r0, #1
    1224:	str	r0, [sp, #88]	; 0x58
    1228:	ldr	r0, [sp, #88]	; 0x58
    122c:	and	r0, r0, #1
    1230:	str	r0, [fp, #-120]	; 0xffffff88
    1234:	b	134c <coda_ascii_cursor_get_bit_size+0x2c8>
    1238:	ldr	r0, [fp, #-24]	; 0xffffffe8
    123c:	ldr	r0, [r0, #8]
    1240:	cmp	r0, #4
    1244:	bne	12b0 <coda_ascii_cursor_get_bit_size+0x22c>
    1248:	ldr	r0, [fp, #-24]	; 0xffffffe8
    124c:	ldr	r0, [r0, #32]
    1250:	movw	r1, #0
    1254:	cmp	r0, r1
    1258:	bne	128c <coda_ascii_cursor_get_bit_size+0x208>
    125c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1260:	ldr	r0, [r0, #44]	; 0x2c
    1264:	cmp	r0, #0
    1268:	bne	128c <coda_ascii_cursor_get_bit_size+0x208>
    126c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1270:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1274:	ldr	r2, [fp, #-20]	; 0xffffffec
    1278:	str	r1, [r2, #4]
    127c:	str	r0, [r2]
    1280:	movw	r0, #0
    1284:	str	r0, [fp, #-12]
    1288:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    128c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1290:	ldr	r0, [r0, #32]
    1294:	movw	r1, #0
    1298:	cmp	r0, r1
    129c:	movw	r0, #0
    12a0:	moveq	r0, #1
    12a4:	and	r0, r0, #1
    12a8:	str	r0, [fp, #-120]	; 0xffffff88
    12ac:	b	1348 <coda_ascii_cursor_get_bit_size+0x2c4>
    12b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12b4:	ldr	r0, [r0, #8]
    12b8:	cmp	r0, #6
    12bc:	bne	1344 <coda_ascii_cursor_get_bit_size+0x2c0>
    12c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12c4:	ldr	r0, [r0, #40]	; 0x28
    12c8:	cmp	r0, #2
    12cc:	bne	1344 <coda_ascii_cursor_get_bit_size+0x2c0>
    12d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    12d4:	ldr	r0, [r0, #44]	; 0x2c
    12d8:	str	r0, [fp, #-124]	; 0xffffff84
    12dc:	ldr	r0, [fp, #-124]	; 0xffffff84
    12e0:	ldr	r0, [r0, #8]
    12e4:	cmp	r0, #4
    12e8:	bne	12f0 <coda_ascii_cursor_get_bit_size+0x26c>
    12ec:	b	1310 <coda_ascii_cursor_get_bit_size+0x28c>
    12f0:	movw	r0, #0
    12f4:	movt	r0, #0
    12f8:	movw	r1, #0
    12fc:	movt	r1, #0
    1300:	movw	r2, #693	; 0x2b5
    1304:	movw	r3, #0
    1308:	movt	r3, #0
    130c:	bl	0 <__assert_fail>
    1310:	ldr	r0, [fp, #-124]	; 0xffffff84
    1314:	ldr	r0, [r0, #44]	; 0x2c
    1318:	cmp	r0, #0
    131c:	bne	1340 <coda_ascii_cursor_get_bit_size+0x2bc>
    1320:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1324:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1328:	ldr	r2, [fp, #-20]	; 0xffffffec
    132c:	str	r1, [r2, #4]
    1330:	str	r0, [r2]
    1334:	movw	r0, #0
    1338:	str	r0, [fp, #-12]
    133c:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1340:	b	1344 <coda_ascii_cursor_get_bit_size+0x2c0>
    1344:	b	1348 <coda_ascii_cursor_get_bit_size+0x2c4>
    1348:	b	134c <coda_ascii_cursor_get_bit_size+0x2c8>
    134c:	ldr	r0, [fp, #-120]	; 0xffffff88
    1350:	cmp	r0, #0
    1354:	beq	13fc <coda_ascii_cursor_get_bit_size+0x378>
    1358:	ldr	r0, [fp, #-48]	; 0xffffffd0
    135c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    1360:	lsr	r0, r0, #3
    1364:	orr	r0, r0, r1, lsl #29
    1368:	rsbs	r0, r0, #63	; 0x3f
    136c:	mov	r2, #0
    1370:	sbcs	r1, r2, r1, asr #3
    1374:	str	r0, [sp, #84]	; 0x54
    1378:	str	r1, [sp, #80]	; 0x50
    137c:	blt	139c <coda_ascii_cursor_get_bit_size+0x318>
    1380:	b	1384 <coda_ascii_cursor_get_bit_size+0x300>
    1384:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1388:	ldr	r1, [fp, #-44]	; 0xffffffd4
    138c:	lsr	r0, r0, #3
    1390:	orr	r0, r0, r1, lsl #29
    1394:	str	r0, [fp, #-116]	; 0xffffff8c
    1398:	b	13a4 <coda_ascii_cursor_get_bit_size+0x320>
    139c:	movw	r0, #64	; 0x40
    13a0:	str	r0, [fp, #-116]	; 0xffffff8c
    13a4:	sub	r0, fp, #112	; 0x70
    13a8:	ldr	r1, [fp, #-16]
    13ac:	ldr	r1, [r1]
    13b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
    13b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
    13b8:	lsr	r2, r2, #3
    13bc:	orr	r2, r2, r3, lsl #29
    13c0:	asr	r3, r3, #3
    13c4:	ldr	ip, [fp, #-116]	; 0xffffff8c
    13c8:	asr	lr, ip, #31
    13cc:	mov	r4, sp
    13d0:	str	r0, [r4, #8]
    13d4:	str	lr, [r4, #4]
    13d8:	str	ip, [r4]
    13dc:	mov	r0, r1
    13e0:	bl	2548 <read_bytes_in_bounds>
    13e4:	cmp	r0, #0
    13e8:	beq	13f8 <coda_ascii_cursor_get_bit_size+0x374>
    13ec:	mvn	r0, #0
    13f0:	str	r0, [fp, #-12]
    13f4:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    13f8:	b	13fc <coda_ascii_cursor_get_bit_size+0x378>
    13fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1400:	movw	r1, #0
    1404:	cmp	r0, r1
    1408:	beq	1438 <coda_ascii_cursor_get_bit_size+0x3b4>
    140c:	sub	r0, fp, #112	; 0x70
    1410:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1414:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1418:	ldr	r3, [fp, #-20]	; 0xffffffec
    141c:	bl	265c <parse_mapping_size>
    1420:	cmp	r0, #0
    1424:	beq	1434 <coda_ascii_cursor_get_bit_size+0x3b0>
    1428:	movw	r0, #0
    142c:	str	r0, [fp, #-12]
    1430:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1434:	b	1438 <coda_ascii_cursor_get_bit_size+0x3b4>
    1438:	ldr	r0, [fp, #-24]	; 0xffffffe8
    143c:	ldr	r0, [r0, #8]
    1440:	cmp	r0, #6
    1444:	bne	14a0 <coda_ascii_cursor_get_bit_size+0x41c>
    1448:	ldr	r0, [fp, #-16]
    144c:	add	r1, sp, #240	; 0xf0
    1450:	mov	r2, r1
    1454:	str	r0, [sp, #76]	; 0x4c
    1458:	mov	r0, r2
    145c:	ldr	r2, [sp, #76]	; 0x4c
    1460:	str	r1, [sp, #72]	; 0x48
    1464:	mov	r1, r2
    1468:	movw	r2, #520	; 0x208
    146c:	bl	0 <memcpy>
    1470:	ldr	r0, [sp, #72]	; 0x48
    1474:	bl	0 <coda_cursor_use_base_type_of_special_type>
    1478:	cmp	r0, #0
    147c:	beq	148c <coda_ascii_cursor_get_bit_size+0x408>
    1480:	mvn	r0, #0
    1484:	str	r0, [fp, #-12]
    1488:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    148c:	ldr	r1, [fp, #-20]	; 0xffffffec
    1490:	add	r0, sp, #240	; 0xf0
    1494:	bl	0 <coda_cursor_get_bit_size>
    1498:	str	r0, [fp, #-12]
    149c:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    14a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14a4:	ldr	r0, [r0, #32]
    14a8:	movw	r1, #0
    14ac:	cmp	r0, r1
    14b0:	beq	1584 <coda_ascii_cursor_get_bit_size+0x500>
    14b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14b8:	ldr	r0, [r0, #32]
    14bc:	ldr	r1, [fp, #-16]
    14c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    14c4:	bl	0 <coda_expression_eval_integer>
    14c8:	cmp	r0, #0
    14cc:	beq	14f0 <coda_ascii_cursor_get_bit_size+0x46c>
    14d0:	movw	r0, #0
    14d4:	movt	r0, #0
    14d8:	bl	0 <coda_add_error_message>
    14dc:	ldr	r0, [fp, #-16]
    14e0:	bl	0 <coda_cursor_add_to_error_message>
    14e4:	mvn	r0, #0
    14e8:	str	r0, [fp, #-12]
    14ec:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    14f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14f4:	ldr	r1, [r0, #24]
    14f8:	ldr	r0, [r0, #28]
    14fc:	mvn	r2, #7
    1500:	eor	r1, r1, r2
    1504:	mvn	r0, r0
    1508:	orr	r0, r1, r0
    150c:	cmp	r0, #0
    1510:	bne	1538 <coda_ascii_cursor_get_bit_size+0x4b4>
    1514:	b	1518 <coda_ascii_cursor_get_bit_size+0x494>
    1518:	ldr	r0, [fp, #-20]	; 0xffffffec
    151c:	ldr	r1, [r0]
    1520:	ldr	r2, [r0, #4]
    1524:	lsl	r2, r2, #3
    1528:	orr	r2, r2, r1, lsr #29
    152c:	lsl	r1, r1, #3
    1530:	str	r1, [r0]
    1534:	str	r2, [r0, #4]
    1538:	ldr	r0, [fp, #-20]	; 0xffffffec
    153c:	ldr	r0, [r0, #4]
    1540:	cmn	r0, #1
    1544:	bgt	1578 <coda_ascii_cursor_get_bit_size+0x4f4>
    1548:	b	154c <coda_ascii_cursor_get_bit_size+0x4c8>
    154c:	ldr	r0, [pc, #2768]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    1550:	ldr	r1, [fp, #-20]	; 0xffffffec
    1554:	ldr	r2, [r1]
    1558:	movw	r1, #0
    155c:	movt	r1, #0
    1560:	bl	0 <coda_set_error>
    1564:	ldr	r0, [fp, #-16]
    1568:	bl	0 <coda_cursor_add_to_error_message>
    156c:	mvn	r0, #0
    1570:	str	r0, [fp, #-12]
    1574:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1578:	movw	r0, #0
    157c:	str	r0, [fp, #-12]
    1580:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1584:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1588:	ldr	r0, [r0, #8]
    158c:	cmp	r0, #2
    1590:	beq	15a4 <coda_ascii_cursor_get_bit_size+0x520>
    1594:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1598:	ldr	r0, [r0, #8]
    159c:	cmp	r0, #3
    15a0:	bne	16f0 <coda_ascii_cursor_get_bit_size+0x66c>
    15a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    15a8:	ldr	r0, [r0, #12]
    15ac:	cmp	r0, #0
    15b0:	str	r0, [sp, #68]	; 0x44
    15b4:	beq	1640 <coda_ascii_cursor_get_bit_size+0x5bc>
    15b8:	b	15bc <coda_ascii_cursor_get_bit_size+0x538>
    15bc:	ldr	r0, [sp, #68]	; 0x44
    15c0:	cmp	r0, #1
    15c4:	beq	165c <coda_ascii_cursor_get_bit_size+0x5d8>
    15c8:	b	15cc <coda_ascii_cursor_get_bit_size+0x548>
    15cc:	ldr	r0, [sp, #68]	; 0x44
    15d0:	cmp	r0, #2
    15d4:	beq	1640 <coda_ascii_cursor_get_bit_size+0x5bc>
    15d8:	b	15dc <coda_ascii_cursor_get_bit_size+0x558>
    15dc:	ldr	r0, [sp, #68]	; 0x44
    15e0:	cmp	r0, #3
    15e4:	beq	165c <coda_ascii_cursor_get_bit_size+0x5d8>
    15e8:	b	15ec <coda_ascii_cursor_get_bit_size+0x568>
    15ec:	ldr	r0, [sp, #68]	; 0x44
    15f0:	cmp	r0, #4
    15f4:	beq	1640 <coda_ascii_cursor_get_bit_size+0x5bc>
    15f8:	b	15fc <coda_ascii_cursor_get_bit_size+0x578>
    15fc:	ldr	r0, [sp, #68]	; 0x44
    1600:	cmp	r0, #5
    1604:	beq	165c <coda_ascii_cursor_get_bit_size+0x5d8>
    1608:	b	160c <coda_ascii_cursor_get_bit_size+0x588>
    160c:	ldr	r0, [sp, #68]	; 0x44
    1610:	cmp	r0, #6
    1614:	beq	1640 <coda_ascii_cursor_get_bit_size+0x5bc>
    1618:	b	161c <coda_ascii_cursor_get_bit_size+0x598>
    161c:	ldr	r0, [sp, #68]	; 0x44
    1620:	cmp	r0, #7
    1624:	beq	165c <coda_ascii_cursor_get_bit_size+0x5d8>
    1628:	b	162c <coda_ascii_cursor_get_bit_size+0x5a8>
    162c:	ldr	r0, [sp, #68]	; 0x44
    1630:	sub	r1, r0, #8
    1634:	cmp	r1, #2
    1638:	bcc	1678 <coda_ascii_cursor_get_bit_size+0x5f4>
    163c:	b	1694 <coda_ascii_cursor_get_bit_size+0x610>
    1640:	sub	r0, fp, #112	; 0x70
    1644:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1648:	add	r2, sp, #224	; 0xe0
    164c:	movw	r3, #1
    1650:	bl	0 <coda_ascii_parse_int64>
    1654:	str	r0, [sp, #236]	; 0xec
    1658:	b	16b4 <coda_ascii_cursor_get_bit_size+0x630>
    165c:	sub	r0, fp, #112	; 0x70
    1660:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1664:	add	r2, sp, #216	; 0xd8
    1668:	movw	r3, #1
    166c:	bl	36c <coda_ascii_parse_uint64>
    1670:	str	r0, [sp, #236]	; 0xec
    1674:	b	16b4 <coda_ascii_cursor_get_bit_size+0x630>
    1678:	sub	r0, fp, #112	; 0x70
    167c:	ldr	r1, [fp, #-116]	; 0xffffff8c
    1680:	add	r2, sp, #208	; 0xd0
    1684:	movw	r3, #1
    1688:	bl	680 <coda_ascii_parse_double>
    168c:	str	r0, [sp, #236]	; 0xec
    1690:	b	16b4 <coda_ascii_cursor_get_bit_size+0x630>
    1694:	movw	r0, #0
    1698:	movt	r0, #0
    169c:	movw	r1, #0
    16a0:	movt	r1, #0
    16a4:	movw	r2, #800	; 0x320
    16a8:	movw	r3, #0
    16ac:	movt	r3, #0
    16b0:	bl	0 <__assert_fail>
    16b4:	ldr	r0, [sp, #236]	; 0xec
    16b8:	cmp	r0, #0
    16bc:	bge	16cc <coda_ascii_cursor_get_bit_size+0x648>
    16c0:	mvn	r0, #0
    16c4:	str	r0, [fp, #-12]
    16c8:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    16cc:	ldr	r0, [sp, #236]	; 0xec
    16d0:	lsl	r1, r0, #3
    16d4:	sbfx	r0, r0, #28, #1
    16d8:	ldr	r2, [fp, #-20]	; 0xffffffec
    16dc:	str	r0, [r2, #4]
    16e0:	str	r1, [r2]
    16e4:	movw	r0, #0
    16e8:	str	r0, [fp, #-12]
    16ec:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    16f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16f4:	ldr	r0, [r0, #8]
    16f8:	cmp	r0, #4
    16fc:	bne	1704 <coda_ascii_cursor_get_bit_size+0x680>
    1700:	b	1724 <coda_ascii_cursor_get_bit_size+0x6a0>
    1704:	movw	r0, #0
    1708:	movt	r0, #0
    170c:	movw	r1, #0
    1710:	movt	r1, #0
    1714:	movw	r2, #812	; 0x32c
    1718:	movw	r3, #0
    171c:	movt	r3, #0
    1720:	bl	0 <__assert_fail>
    1724:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1728:	ldr	r0, [r0, #44]	; 0x2c
    172c:	cmp	r0, #4
    1730:	str	r0, [sp, #64]	; 0x40
    1734:	bhi	2010 <coda_ascii_cursor_get_bit_size+0xf8c>
    1738:	add	r0, pc, #8
    173c:	ldr	r1, [sp, #64]	; 0x40
    1740:	ldr	r0, [r0, r1, lsl #2]
    1744:	mov	pc, r0
    1748:	.word	0x00001ff0
    174c:	.word	0x0000175c
    1750:	.word	0x000019f4
    1754:	.word	0x000019f4
    1758:	.word	0x00001e88
    175c:	ldr	r0, [fp, #-16]
    1760:	ldr	r0, [r0]
    1764:	ldr	r0, [r0, #16]
    1768:	cmp	r0, #0
    176c:	bne	1774 <coda_ascii_cursor_get_bit_size+0x6f0>
    1770:	b	1794 <coda_ascii_cursor_get_bit_size+0x710>
    1774:	movw	r0, #0
    1778:	movt	r0, #0
    177c:	movw	r1, #0
    1780:	movt	r1, #0
    1784:	movw	r2, #816	; 0x330
    1788:	movw	r3, #0
    178c:	movt	r3, #0
    1790:	bl	0 <__assert_fail>
    1794:	ldr	r0, [fp, #-16]
    1798:	ldr	r0, [r0]
    179c:	ldr	r0, [r0, #60]	; 0x3c
    17a0:	cmp	r0, #0
    17a4:	str	r0, [sp, #60]	; 0x3c
    17a8:	beq	1804 <coda_ascii_cursor_get_bit_size+0x780>
    17ac:	b	17b0 <coda_ascii_cursor_get_bit_size+0x72c>
    17b0:	ldr	r0, [sp, #60]	; 0x3c
    17b4:	sub	r1, r0, #1
    17b8:	cmp	r1, #2
    17bc:	bcc	17d4 <coda_ascii_cursor_get_bit_size+0x750>
    17c0:	b	17c4 <coda_ascii_cursor_get_bit_size+0x740>
    17c4:	ldr	r0, [sp, #60]	; 0x3c
    17c8:	cmp	r0, #3
    17cc:	beq	17ec <coda_ascii_cursor_get_bit_size+0x768>
    17d0:	b	19f0 <coda_ascii_cursor_get_bit_size+0x96c>
    17d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    17d8:	mov	r1, #0
    17dc:	str	r1, [r0, #4]
    17e0:	mov	r1, #8
    17e4:	str	r1, [r0]
    17e8:	b	19f0 <coda_ascii_cursor_get_bit_size+0x96c>
    17ec:	ldr	r0, [fp, #-20]	; 0xffffffec
    17f0:	mov	r1, #0
    17f4:	str	r1, [r0, #4]
    17f8:	mov	r1, #16
    17fc:	str	r1, [r0]
    1800:	b	19f0 <coda_ascii_cursor_get_bit_size+0x96c>
    1804:	ldr	r0, [fp, #-16]
    1808:	ldr	r1, [r0, #4]
    180c:	ldrb	r0, [r0, r1, lsl #4]
    1810:	tst	r0, #7
    1814:	beq	1838 <coda_ascii_cursor_get_bit_size+0x7b4>
    1818:	b	181c <coda_ascii_cursor_get_bit_size+0x798>
    181c:	ldr	r0, [pc, #2048]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    1820:	movw	r1, #0
    1824:	movt	r1, #0
    1828:	bl	0 <coda_set_error>
    182c:	mvn	r0, #0
    1830:	str	r0, [fp, #-12]
    1834:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1838:	add	r1, sp, #207	; 0xcf
    183c:	ldr	r0, [fp, #-16]
    1840:	mov	r2, sp
    1844:	mov	r3, #0
    1848:	str	r3, [r2, #4]
    184c:	mov	ip, #1
    1850:	str	ip, [r2]
    1854:	mov	r2, r3
    1858:	bl	27d8 <coda_ascii_cursor_read_bytes>
    185c:	cmp	r0, #0
    1860:	beq	1870 <coda_ascii_cursor_get_bit_size+0x7ec>
    1864:	mvn	r0, #0
    1868:	str	r0, [fp, #-12]
    186c:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1870:	ldrb	r0, [sp, #207]	; 0xcf
    1874:	mov	r1, r0
    1878:	cmp	r0, #10
    187c:	str	r1, [sp, #56]	; 0x38
    1880:	beq	1898 <coda_ascii_cursor_get_bit_size+0x814>
    1884:	b	1888 <coda_ascii_cursor_get_bit_size+0x804>
    1888:	ldr	r0, [sp, #56]	; 0x38
    188c:	cmp	r0, #13
    1890:	beq	18c0 <coda_ascii_cursor_get_bit_size+0x83c>
    1894:	b	199c <coda_ascii_cursor_get_bit_size+0x918>
    1898:	ldr	r0, [fp, #-20]	; 0xffffffec
    189c:	mov	r1, #0
    18a0:	str	r1, [r0, #4]
    18a4:	mov	r1, #8
    18a8:	str	r1, [r0]
    18ac:	ldr	r0, [fp, #-16]
    18b0:	ldr	r0, [r0]
    18b4:	movw	r1, #1
    18b8:	str	r1, [r0, #60]	; 0x3c
    18bc:	b	19ec <coda_ascii_cursor_get_bit_size+0x968>
    18c0:	ldr	r0, [fp, #-16]
    18c4:	ldr	r1, [r0]
    18c8:	ldr	r2, [r0, #4]
    18cc:	ldr	r3, [r1, #8]
    18d0:	ldr	r1, [r1, #12]
    18d4:	ldr	r2, [r0, r2, lsl #4]!
    18d8:	ldr	r0, [r0, #4]
    18dc:	lsr	r2, r2, #3
    18e0:	orr	r2, r2, r0, lsl #29
    18e4:	subs	r2, r3, r2
    18e8:	sbc	r0, r1, r0, asr #3
    18ec:	subs	r1, r2, #2
    18f0:	sbcs	r0, r0, #0
    18f4:	str	r1, [sp, #52]	; 0x34
    18f8:	str	r0, [sp, #48]	; 0x30
    18fc:	blt	1974 <coda_ascii_cursor_get_bit_size+0x8f0>
    1900:	b	1904 <coda_ascii_cursor_get_bit_size+0x880>
    1904:	add	r1, sp, #207	; 0xcf
    1908:	ldr	r0, [fp, #-16]
    190c:	mov	r2, sp
    1910:	mov	r3, #0
    1914:	str	r3, [r2, #4]
    1918:	mov	ip, #1
    191c:	str	ip, [r2]
    1920:	mov	r2, ip
    1924:	bl	27d8 <coda_ascii_cursor_read_bytes>
    1928:	cmp	r0, #0
    192c:	beq	193c <coda_ascii_cursor_get_bit_size+0x8b8>
    1930:	mvn	r0, #0
    1934:	str	r0, [fp, #-12]
    1938:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    193c:	ldrb	r0, [sp, #207]	; 0xcf
    1940:	cmp	r0, #10
    1944:	bne	1970 <coda_ascii_cursor_get_bit_size+0x8ec>
    1948:	ldr	r0, [fp, #-20]	; 0xffffffec
    194c:	mov	r1, #0
    1950:	str	r1, [r0, #4]
    1954:	mov	r1, #16
    1958:	str	r1, [r0]
    195c:	ldr	r0, [fp, #-16]
    1960:	ldr	r0, [r0]
    1964:	movw	r1, #3
    1968:	str	r1, [r0, #60]	; 0x3c
    196c:	b	19ec <coda_ascii_cursor_get_bit_size+0x968>
    1970:	b	1974 <coda_ascii_cursor_get_bit_size+0x8f0>
    1974:	ldr	r0, [fp, #-20]	; 0xffffffec
    1978:	mov	r1, #0
    197c:	str	r1, [r0, #4]
    1980:	mov	r1, #8
    1984:	str	r1, [r0]
    1988:	ldr	r0, [fp, #-16]
    198c:	ldr	r0, [r0]
    1990:	movw	r1, #2
    1994:	str	r1, [r0, #60]	; 0x3c
    1998:	b	19ec <coda_ascii_cursor_get_bit_size+0x968>
    199c:	add	r2, sp, #186	; 0xba
    19a0:	ldr	r0, [fp, #-16]
    19a4:	ldr	r1, [r0, #4]
    19a8:	ldr	r1, [r0, r1, lsl #4]!
    19ac:	ldr	r0, [r0, #4]
    19b0:	lsr	r1, r1, #3
    19b4:	orr	r1, r1, r0, lsl #29
    19b8:	asr	r0, r0, #3
    19bc:	str	r0, [sp, #44]	; 0x2c
    19c0:	mov	r0, r1
    19c4:	ldr	r1, [sp, #44]	; 0x2c
    19c8:	bl	0 <coda_str64>
    19cc:	ldr	r0, [pc, #1616]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    19d0:	add	r2, sp, #186	; 0xba
    19d4:	movw	r1, #0
    19d8:	movt	r1, #0
    19dc:	bl	0 <coda_set_error>
    19e0:	mvn	r0, #0
    19e4:	str	r0, [fp, #-12]
    19e8:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    19ec:	b	19f0 <coda_ascii_cursor_get_bit_size+0x96c>
    19f0:	b	2010 <coda_ascii_cursor_get_bit_size+0xf8c>
    19f4:	ldr	r0, [fp, #-16]
    19f8:	ldr	r0, [r0]
    19fc:	ldr	r0, [r0, #16]
    1a00:	cmp	r0, #0
    1a04:	bne	1c34 <coda_ascii_cursor_get_bit_size+0xbb0>
    1a08:	ldr	r0, [fp, #-16]
    1a0c:	ldr	r1, [r0, #4]
    1a10:	ldrb	r0, [r0, r1, lsl #4]
    1a14:	tst	r0, #7
    1a18:	beq	1a3c <coda_ascii_cursor_get_bit_size+0x9b8>
    1a1c:	b	1a20 <coda_ascii_cursor_get_bit_size+0x99c>
    1a20:	ldr	r0, [pc, #1532]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    1a24:	movw	r1, #0
    1a28:	movt	r1, #0
    1a2c:	bl	0 <coda_set_error>
    1a30:	mvn	r0, #0
    1a34:	str	r0, [fp, #-12]
    1a38:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1a3c:	ldr	r0, [fp, #-16]
    1a40:	ldr	r0, [r0]
    1a44:	ldr	r0, [r0, #68]	; 0x44
    1a48:	movw	r1, #0
    1a4c:	cmp	r0, r1
    1a50:	bne	1a78 <coda_ascii_cursor_get_bit_size+0x9f4>
    1a54:	ldr	r0, [fp, #-16]
    1a58:	ldr	r0, [r0]
    1a5c:	bl	0 <coda_ascii_init_asciilines>
    1a60:	cmp	r0, #0
    1a64:	beq	1a74 <coda_ascii_cursor_get_bit_size+0x9f0>
    1a68:	mvn	r0, #0
    1a6c:	str	r0, [fp, #-12]
    1a70:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1a74:	b	1a78 <coda_ascii_cursor_get_bit_size+0x9f4>
    1a78:	ldr	r0, [fp, #-16]
    1a7c:	ldr	r0, [r0]
    1a80:	ldr	r0, [r0, #64]	; 0x40
    1a84:	cmp	r0, #0
    1a88:	bne	1aa8 <coda_ascii_cursor_get_bit_size+0xa24>
    1a8c:	mvn	r0, #300	; 0x12c
    1a90:	movw	r1, #0
    1a94:	movt	r1, #0
    1a98:	bl	0 <coda_set_error>
    1a9c:	mvn	r0, #0
    1aa0:	str	r0, [fp, #-12]
    1aa4:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1aa8:	mov	r0, #0
    1aac:	str	r0, [sp, #168]	; 0xa8
    1ab0:	ldr	r0, [fp, #-16]
    1ab4:	ldr	r0, [r0]
    1ab8:	ldr	r0, [r0, #64]	; 0x40
    1abc:	sub	r0, r0, #1
    1ac0:	str	r0, [sp, #164]	; 0xa4
    1ac4:	ldr	r0, [fp, #-16]
    1ac8:	ldr	r0, [r0]
    1acc:	ldr	r0, [r0, #68]	; 0x44
    1ad0:	str	r0, [sp, #172]	; 0xac
    1ad4:	ldr	r0, [fp, #-16]
    1ad8:	ldr	r1, [r0, #4]
    1adc:	ldr	r1, [r0, r1, lsl #4]!
    1ae0:	ldr	r0, [r0, #4]
    1ae4:	lsr	r1, r1, #3
    1ae8:	orr	r1, r1, r0, lsl #29
    1aec:	asr	r0, r0, #3
    1af0:	str	r0, [sp, #180]	; 0xb4
    1af4:	str	r1, [sp, #176]	; 0xb0
    1af8:	ldr	r0, [sp, #164]	; 0xa4
    1afc:	ldr	r1, [sp, #168]	; 0xa8
    1b00:	cmp	r0, r1
    1b04:	beq	1b68 <coda_ascii_cursor_get_bit_size+0xae4>
    1b08:	ldr	r0, [sp, #168]	; 0xa8
    1b0c:	ldr	r1, [sp, #164]	; 0xa4
    1b10:	add	r0, r0, r1
    1b14:	add	r0, r0, r0, lsr #31
    1b18:	asr	r0, r0, #1
    1b1c:	str	r0, [sp, #160]	; 0xa0
    1b20:	ldr	r0, [sp, #176]	; 0xb0
    1b24:	ldr	r1, [sp, #180]	; 0xb4
    1b28:	ldr	r2, [sp, #172]	; 0xac
    1b2c:	ldr	r3, [sp, #160]	; 0xa0
    1b30:	ldr	r2, [r2, r3, lsl #2]
    1b34:	subs	r0, r0, r2
    1b38:	sbcs	r1, r1, r2, asr #31
    1b3c:	str	r0, [sp, #40]	; 0x28
    1b40:	str	r1, [sp, #36]	; 0x24
    1b44:	bge	1b58 <coda_ascii_cursor_get_bit_size+0xad4>
    1b48:	b	1b4c <coda_ascii_cursor_get_bit_size+0xac8>
    1b4c:	ldr	r0, [sp, #160]	; 0xa0
    1b50:	str	r0, [sp, #164]	; 0xa4
    1b54:	b	1b64 <coda_ascii_cursor_get_bit_size+0xae0>
    1b58:	ldr	r0, [sp, #160]	; 0xa0
    1b5c:	add	r0, r0, #1
    1b60:	str	r0, [sp, #168]	; 0xa8
    1b64:	b	1af8 <coda_ascii_cursor_get_bit_size+0xa74>
    1b68:	ldr	r0, [sp, #172]	; 0xac
    1b6c:	ldr	r1, [sp, #164]	; 0xa4
    1b70:	ldr	r0, [r0, r1, lsl #2]
    1b74:	ldr	r1, [sp, #176]	; 0xb0
    1b78:	ldr	r2, [sp, #180]	; 0xb4
    1b7c:	subs	r1, r0, r1
    1b80:	rsc	r0, r2, r0, asr #31
    1b84:	lsl	r0, r0, #3
    1b88:	orr	r0, r0, r1, lsr #29
    1b8c:	lsl	r1, r1, #3
    1b90:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b94:	str	r1, [r2]
    1b98:	str	r0, [r2, #4]
    1b9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1ba0:	ldr	r0, [r0, #44]	; 0x2c
    1ba4:	cmp	r0, #3
    1ba8:	bne	1c30 <coda_ascii_cursor_get_bit_size+0xbac>
    1bac:	ldr	r0, [sp, #164]	; 0xa4
    1bb0:	ldr	r1, [fp, #-16]
    1bb4:	ldr	r1, [r1]
    1bb8:	ldr	r1, [r1, #64]	; 0x40
    1bbc:	sub	r1, r1, #1
    1bc0:	cmp	r0, r1
    1bc4:	bne	1bdc <coda_ascii_cursor_get_bit_size+0xb58>
    1bc8:	ldr	r0, [fp, #-16]
    1bcc:	ldr	r0, [r0]
    1bd0:	ldr	r0, [r0, #72]	; 0x48
    1bd4:	cmp	r0, #0
    1bd8:	beq	1c2c <coda_ascii_cursor_get_bit_size+0xba8>
    1bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
    1be0:	ldr	r1, [r0]
    1be4:	ldr	r2, [r0, #4]
    1be8:	subs	r1, r1, #8
    1bec:	sbc	r2, r2, #0
    1bf0:	str	r1, [r0]
    1bf4:	str	r2, [r0, #4]
    1bf8:	ldr	r0, [fp, #-16]
    1bfc:	ldr	r0, [r0]
    1c00:	ldr	r0, [r0, #60]	; 0x3c
    1c04:	cmp	r0, #3
    1c08:	bne	1c28 <coda_ascii_cursor_get_bit_size+0xba4>
    1c0c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1c10:	ldr	r1, [r0]
    1c14:	ldr	r2, [r0, #4]
    1c18:	subs	r1, r1, #8
    1c1c:	sbc	r2, r2, #0
    1c20:	str	r1, [r0]
    1c24:	str	r2, [r0, #4]
    1c28:	b	1c2c <coda_ascii_cursor_get_bit_size+0xba8>
    1c2c:	b	1c30 <coda_ascii_cursor_get_bit_size+0xbac>
    1c30:	b	1e84 <coda_ascii_cursor_get_bit_size+0xe00>
    1c34:	ldr	r0, [fp, #-16]
    1c38:	ldr	r1, [r0, #4]
    1c3c:	ldrb	r0, [r0, r1, lsl #4]
    1c40:	tst	r0, #7
    1c44:	beq	1c68 <coda_ascii_cursor_get_bit_size+0xbe4>
    1c48:	b	1c4c <coda_ascii_cursor_get_bit_size+0xbc8>
    1c4c:	ldr	r0, [pc, #976]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    1c50:	movw	r1, #0
    1c54:	movt	r1, #0
    1c58:	bl	0 <coda_set_error>
    1c5c:	mvn	r0, #0
    1c60:	str	r0, [fp, #-12]
    1c64:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1c68:	ldr	r0, [fp, #-16]
    1c6c:	ldr	r1, [r0, #4]
    1c70:	ldr	r1, [r0, r1, lsl #4]!
    1c74:	ldr	r0, [r0, #4]
    1c78:	lsr	r1, r1, #3
    1c7c:	orr	r1, r1, r0, lsl #29
    1c80:	asr	r0, r0, #3
    1c84:	str	r0, [sp, #148]	; 0x94
    1c88:	str	r1, [sp, #144]	; 0x90
    1c8c:	ldr	r0, [fp, #-16]
    1c90:	ldr	r0, [r0]
    1c94:	ldr	r1, [r0, #8]
    1c98:	ldr	r0, [r0, #12]
    1c9c:	ldr	r2, [sp, #144]	; 0x90
    1ca0:	ldr	r3, [sp, #148]	; 0x94
    1ca4:	subs	r1, r1, r2
    1ca8:	sbc	r0, r0, r3
    1cac:	str	r1, [sp, #152]	; 0x98
    1cb0:	str	r0, [sp, #156]	; 0x9c
    1cb4:	mov	r0, #0
    1cb8:	str	r0, [sp, #140]	; 0x8c
    1cbc:	str	r0, [sp, #136]	; 0x88
    1cc0:	ldr	r0, [sp, #136]	; 0x88
    1cc4:	ldr	r1, [sp, #140]	; 0x8c
    1cc8:	ldr	r2, [sp, #152]	; 0x98
    1ccc:	ldr	r3, [sp, #156]	; 0x9c
    1cd0:	subs	r0, r0, r2
    1cd4:	sbcs	r1, r1, r3
    1cd8:	str	r0, [sp, #32]
    1cdc:	str	r1, [sp, #28]
    1ce0:	bge	1d78 <coda_ascii_cursor_get_bit_size+0xcf4>
    1ce4:	b	1ce8 <coda_ascii_cursor_get_bit_size+0xc64>
    1ce8:	add	r0, sp, #135	; 0x87
    1cec:	ldr	r1, [fp, #-16]
    1cf0:	ldr	r1, [r1]
    1cf4:	ldr	r2, [sp, #144]	; 0x90
    1cf8:	ldr	r3, [sp, #148]	; 0x94
    1cfc:	ldr	ip, [sp, #136]	; 0x88
    1d00:	ldr	lr, [sp, #140]	; 0x8c
    1d04:	adds	r2, r2, ip
    1d08:	adc	r3, r3, lr
    1d0c:	mov	ip, sp
    1d10:	str	r0, [ip, #8]
    1d14:	mov	r0, #0
    1d18:	str	r0, [ip, #4]
    1d1c:	mov	r0, #1
    1d20:	str	r0, [ip]
    1d24:	mov	r0, r1
    1d28:	bl	2548 <read_bytes_in_bounds>
    1d2c:	cmp	r0, #0
    1d30:	beq	1d40 <coda_ascii_cursor_get_bit_size+0xcbc>
    1d34:	mvn	r0, #0
    1d38:	str	r0, [fp, #-12]
    1d3c:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1d40:	ldrb	r0, [sp, #135]	; 0x87
    1d44:	cmp	r0, #13
    1d48:	beq	1d58 <coda_ascii_cursor_get_bit_size+0xcd4>
    1d4c:	ldrb	r0, [sp, #135]	; 0x87
    1d50:	cmp	r0, #10
    1d54:	bne	1d5c <coda_ascii_cursor_get_bit_size+0xcd8>
    1d58:	b	1d78 <coda_ascii_cursor_get_bit_size+0xcf4>
    1d5c:	ldr	r0, [sp, #136]	; 0x88
    1d60:	ldr	r1, [sp, #140]	; 0x8c
    1d64:	adds	r0, r0, #1
    1d68:	adc	r1, r1, #0
    1d6c:	str	r0, [sp, #136]	; 0x88
    1d70:	str	r1, [sp, #140]	; 0x8c
    1d74:	b	1cc0 <coda_ascii_cursor_get_bit_size+0xc3c>
    1d78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1d7c:	ldr	r0, [r0, #44]	; 0x2c
    1d80:	cmp	r0, #2
    1d84:	bne	1e64 <coda_ascii_cursor_get_bit_size+0xde0>
    1d88:	ldrb	r0, [sp, #135]	; 0x87
    1d8c:	cmp	r0, #13
    1d90:	bne	1e4c <coda_ascii_cursor_get_bit_size+0xdc8>
    1d94:	ldr	r0, [sp, #136]	; 0x88
    1d98:	ldr	r1, [sp, #140]	; 0x8c
    1d9c:	adds	r0, r0, #1
    1da0:	adc	r1, r1, #0
    1da4:	ldr	r2, [sp, #152]	; 0x98
    1da8:	ldr	r3, [sp, #156]	; 0x9c
    1dac:	subs	r0, r0, r2
    1db0:	sbcs	r1, r1, r3
    1db4:	str	r0, [sp, #24]
    1db8:	str	r1, [sp, #20]
    1dbc:	bge	1e4c <coda_ascii_cursor_get_bit_size+0xdc8>
    1dc0:	b	1dc4 <coda_ascii_cursor_get_bit_size+0xd40>
    1dc4:	add	r0, sp, #135	; 0x87
    1dc8:	ldr	r1, [fp, #-16]
    1dcc:	ldr	r1, [r1]
    1dd0:	ldr	r2, [sp, #144]	; 0x90
    1dd4:	ldr	r3, [sp, #148]	; 0x94
    1dd8:	ldr	ip, [sp, #136]	; 0x88
    1ddc:	ldr	lr, [sp, #140]	; 0x8c
    1de0:	adds	r2, r2, ip
    1de4:	adc	r3, r3, lr
    1de8:	adds	r2, r2, #1
    1dec:	adc	r3, r3, #0
    1df0:	mov	ip, sp
    1df4:	str	r0, [ip, #8]
    1df8:	mov	r0, #0
    1dfc:	str	r0, [ip, #4]
    1e00:	mov	r0, #1
    1e04:	str	r0, [ip]
    1e08:	mov	r0, r1
    1e0c:	bl	2548 <read_bytes_in_bounds>
    1e10:	cmp	r0, #0
    1e14:	beq	1e24 <coda_ascii_cursor_get_bit_size+0xda0>
    1e18:	mvn	r0, #0
    1e1c:	str	r0, [fp, #-12]
    1e20:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1e24:	ldrb	r0, [sp, #135]	; 0x87
    1e28:	cmp	r0, #10
    1e2c:	bne	1e48 <coda_ascii_cursor_get_bit_size+0xdc4>
    1e30:	ldr	r0, [sp, #136]	; 0x88
    1e34:	ldr	r1, [sp, #140]	; 0x8c
    1e38:	adds	r0, r0, #1
    1e3c:	adc	r1, r1, #0
    1e40:	str	r0, [sp, #136]	; 0x88
    1e44:	str	r1, [sp, #140]	; 0x8c
    1e48:	b	1e4c <coda_ascii_cursor_get_bit_size+0xdc8>
    1e4c:	ldr	r0, [sp, #136]	; 0x88
    1e50:	ldr	r1, [sp, #140]	; 0x8c
    1e54:	adds	r0, r0, #1
    1e58:	adc	r1, r1, #0
    1e5c:	str	r0, [sp, #136]	; 0x88
    1e60:	str	r1, [sp, #140]	; 0x8c
    1e64:	ldr	r0, [sp, #136]	; 0x88
    1e68:	ldr	r1, [sp, #140]	; 0x8c
    1e6c:	lsl	r1, r1, #3
    1e70:	orr	r1, r1, r0, lsr #29
    1e74:	lsl	r0, r0, #3
    1e78:	ldr	r2, [fp, #-20]	; 0xffffffec
    1e7c:	str	r0, [r2]
    1e80:	str	r1, [r2, #4]
    1e84:	b	2010 <coda_ascii_cursor_get_bit_size+0xf8c>
    1e88:	ldr	r0, [fp, #-16]
    1e8c:	ldr	r1, [r0, #4]
    1e90:	ldrb	r0, [r0, r1, lsl #4]
    1e94:	tst	r0, #7
    1e98:	beq	1ebc <coda_ascii_cursor_get_bit_size+0xe38>
    1e9c:	b	1ea0 <coda_ascii_cursor_get_bit_size+0xe1c>
    1ea0:	ldr	r0, [pc, #380]	; 2024 <coda_ascii_cursor_get_bit_size+0xfa0>
    1ea4:	movw	r1, #0
    1ea8:	movt	r1, #0
    1eac:	bl	0 <coda_set_error>
    1eb0:	mvn	r0, #0
    1eb4:	str	r0, [fp, #-12]
    1eb8:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1ebc:	ldr	r0, [fp, #-16]
    1ec0:	ldr	r1, [r0, #4]
    1ec4:	ldr	r1, [r0, r1, lsl #4]!
    1ec8:	ldr	r0, [r0, #4]
    1ecc:	lsr	r1, r1, #3
    1ed0:	orr	r1, r1, r0, lsl #29
    1ed4:	asr	r0, r0, #3
    1ed8:	str	r0, [sp, #116]	; 0x74
    1edc:	str	r1, [sp, #112]	; 0x70
    1ee0:	ldr	r0, [fp, #-16]
    1ee4:	ldr	r0, [r0]
    1ee8:	ldr	r1, [r0, #8]
    1eec:	ldr	r0, [r0, #12]
    1ef0:	ldr	r2, [sp, #112]	; 0x70
    1ef4:	ldr	r3, [sp, #116]	; 0x74
    1ef8:	subs	r1, r1, r2
    1efc:	sbc	r0, r0, r3
    1f00:	str	r1, [sp, #120]	; 0x78
    1f04:	str	r0, [sp, #124]	; 0x7c
    1f08:	mov	r0, #0
    1f0c:	str	r0, [sp, #108]	; 0x6c
    1f10:	str	r0, [sp, #104]	; 0x68
    1f14:	ldr	r0, [sp, #104]	; 0x68
    1f18:	ldr	r1, [sp, #108]	; 0x6c
    1f1c:	ldr	r2, [sp, #120]	; 0x78
    1f20:	ldr	r3, [sp, #124]	; 0x7c
    1f24:	subs	r0, r0, r2
    1f28:	sbcs	r1, r1, r3
    1f2c:	str	r0, [sp, #16]
    1f30:	str	r1, [sp, #12]
    1f34:	bge	1fcc <coda_ascii_cursor_get_bit_size+0xf48>
    1f38:	b	1f3c <coda_ascii_cursor_get_bit_size+0xeb8>
    1f3c:	add	r0, sp, #103	; 0x67
    1f40:	ldr	r1, [fp, #-16]
    1f44:	ldr	r1, [r1]
    1f48:	ldr	r2, [sp, #112]	; 0x70
    1f4c:	ldr	r3, [sp, #116]	; 0x74
    1f50:	ldr	ip, [sp, #104]	; 0x68
    1f54:	ldr	lr, [sp, #108]	; 0x6c
    1f58:	adds	r2, r2, ip
    1f5c:	adc	r3, r3, lr
    1f60:	mov	ip, sp
    1f64:	str	r0, [ip, #8]
    1f68:	mov	r0, #0
    1f6c:	str	r0, [ip, #4]
    1f70:	mov	r0, #1
    1f74:	str	r0, [ip]
    1f78:	mov	r0, r1
    1f7c:	bl	2548 <read_bytes_in_bounds>
    1f80:	cmp	r0, #0
    1f84:	beq	1f94 <coda_ascii_cursor_get_bit_size+0xf10>
    1f88:	mvn	r0, #0
    1f8c:	str	r0, [fp, #-12]
    1f90:	b	2018 <coda_ascii_cursor_get_bit_size+0xf94>
    1f94:	ldrb	r0, [sp, #103]	; 0x67
    1f98:	cmp	r0, #32
    1f9c:	beq	1fb0 <coda_ascii_cursor_get_bit_size+0xf2c>
    1fa0:	ldrb	r0, [sp, #103]	; 0x67
    1fa4:	cmp	r0, #9
    1fa8:	beq	1fb0 <coda_ascii_cursor_get_bit_size+0xf2c>
    1fac:	b	1fcc <coda_ascii_cursor_get_bit_size+0xf48>
    1fb0:	ldr	r0, [sp, #104]	; 0x68
    1fb4:	ldr	r1, [sp, #108]	; 0x6c
    1fb8:	adds	r0, r0, #1
    1fbc:	adc	r1, r1, #0
    1fc0:	str	r0, [sp, #104]	; 0x68
    1fc4:	str	r1, [sp, #108]	; 0x6c
    1fc8:	b	1f14 <coda_ascii_cursor_get_bit_size+0xe90>
    1fcc:	ldr	r0, [sp, #104]	; 0x68
    1fd0:	ldr	r1, [sp, #108]	; 0x6c
    1fd4:	lsl	r1, r1, #3
    1fd8:	orr	r1, r1, r0, lsr #29
    1fdc:	lsl	r0, r0, #3
    1fe0:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fe4:	str	r0, [r2]
    1fe8:	str	r1, [r2, #4]
    1fec:	b	2010 <coda_ascii_cursor_get_bit_size+0xf8c>
    1ff0:	movw	r0, #0
    1ff4:	movt	r0, #0
    1ff8:	movw	r1, #0
    1ffc:	movt	r1, #0
    2000:	movw	r2, #1030	; 0x406
    2004:	movw	r3, #0
    2008:	movt	r3, #0
    200c:	bl	0 <__assert_fail>
    2010:	movw	r0, #0
    2014:	str	r0, [fp, #-12]
    2018:	ldr	r0, [fp, #-12]
    201c:	sub	sp, fp, #8
    2020:	pop	{r4, sl, fp, pc}
    2024:	.word	0xfffffed4

00002028 <get_bit_size_boundary>:
    2028:	push	{r4, r5, fp, lr}
    202c:	add	fp, sp, #8
    2030:	sub	sp, sp, #264	; 0x108
    2034:	str	r0, [fp, #-16]
    2038:	str	r1, [fp, #-20]	; 0xffffffec
    203c:	str	r3, [fp, #-28]	; 0xffffffe4
    2040:	str	r2, [fp, #-32]	; 0xffffffe0
    2044:	ldr	r0, [fp, #-16]
    2048:	ldr	r1, [r0, #4]
    204c:	ldr	r1, [r0, r1, lsl #4]!
    2050:	ldr	r0, [r0, #4]
    2054:	str	r0, [fp, #-36]	; 0xffffffdc
    2058:	str	r1, [fp, #-40]	; 0xffffffd8
    205c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    2060:	cmn	r0, #1
    2064:	bgt	2078 <get_bit_size_boundary+0x50>
    2068:	b	206c <get_bit_size_boundary+0x44>
    206c:	mov	r0, #0
    2070:	str	r0, [fp, #-28]	; 0xffffffe4
    2074:	str	r0, [fp, #-32]	; 0xffffffe0
    2078:	ldr	r0, [fp, #-16]
    207c:	ldr	r0, [r0]
    2080:	ldr	r0, [r0, #16]
    2084:	cmp	r0, #0
    2088:	beq	20a0 <get_bit_size_boundary+0x78>
    208c:	ldr	r0, [fp, #-16]
    2090:	ldr	r0, [r0]
    2094:	ldr	r0, [r0, #16]
    2098:	cmp	r0, #1
    209c:	bne	215c <get_bit_size_boundary+0x134>
    20a0:	ldr	r0, [fp, #-16]
    20a4:	ldr	r0, [r0]
    20a8:	ldr	r0, [r0, #48]	; 0x30
    20ac:	movw	r1, #0
    20b0:	cmp	r0, r1
    20b4:	beq	20e0 <get_bit_size_boundary+0xb8>
    20b8:	ldr	r0, [fp, #-16]
    20bc:	ldr	r0, [r0]
    20c0:	ldr	r1, [r0, #40]	; 0x28
    20c4:	ldr	r0, [r0, #44]	; 0x2c
    20c8:	lsl	r0, r0, #3
    20cc:	orr	r0, r0, r1, lsr #29
    20d0:	lsl	r1, r1, #3
    20d4:	str	r1, [fp, #-48]	; 0xffffffd0
    20d8:	str	r0, [fp, #-44]	; 0xffffffd4
    20dc:	b	2104 <get_bit_size_boundary+0xdc>
    20e0:	ldr	r0, [fp, #-16]
    20e4:	ldr	r0, [r0]
    20e8:	ldr	r1, [r0, #8]
    20ec:	ldr	r0, [r0, #12]
    20f0:	lsl	r0, r0, #3
    20f4:	orr	r0, r0, r1, lsr #29
    20f8:	lsl	r1, r1, #3
    20fc:	str	r1, [fp, #-48]	; 0xffffffd0
    2100:	str	r0, [fp, #-44]	; 0xffffffd4
    2104:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2108:	ldr	r1, [fp, #-36]	; 0xffffffdc
    210c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2110:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2114:	adds	r0, r0, r2
    2118:	adc	r1, r1, r3
    211c:	ldr	r2, [fp, #-48]	; 0xffffffd0
    2120:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2124:	subs	r0, r0, r2
    2128:	sbcs	r1, r1, r3
    212c:	str	r0, [sp, #72]	; 0x48
    2130:	str	r1, [sp, #68]	; 0x44
    2134:	blt	2158 <get_bit_size_boundary+0x130>
    2138:	b	213c <get_bit_size_boundary+0x114>
    213c:	mvn	r0, #300	; 0x12c
    2140:	movw	r1, #0
    2144:	movt	r1, #0
    2148:	bl	0 <coda_set_error>
    214c:	mvn	r0, #0
    2150:	str	r0, [fp, #-12]
    2154:	b	253c <get_bit_size_boundary+0x514>
    2158:	b	2510 <get_bit_size_boundary+0x4e8>
    215c:	ldr	r0, [fp, #-16]
    2160:	ldr	r0, [r0, #4]
    2164:	sub	r0, r0, #1
    2168:	str	r0, [fp, #-52]	; 0xffffffcc
    216c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    2170:	cmp	r0, #0
    2174:	movw	r0, #0
    2178:	str	r0, [sp, #64]	; 0x40
    217c:	ble	21d8 <get_bit_size_boundary+0x1b0>
    2180:	ldr	r0, [fp, #-16]
    2184:	add	r0, r0, #8
    2188:	ldr	r1, [fp, #-52]	; 0xffffffcc
    218c:	add	r0, r0, r1, lsl #4
    2190:	ldr	r0, [r0]
    2194:	ldr	r0, [r0]
    2198:	cmp	r0, #0
    219c:	movw	r0, #1
    21a0:	str	r0, [sp, #60]	; 0x3c
    21a4:	beq	21d0 <get_bit_size_boundary+0x1a8>
    21a8:	ldr	r0, [fp, #-16]
    21ac:	add	r0, r0, #8
    21b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
    21b4:	add	r0, r0, r1, lsl #4
    21b8:	ldr	r0, [r0]
    21bc:	ldr	r0, [r0]
    21c0:	cmp	r0, #1
    21c4:	movw	r0, #0
    21c8:	moveq	r0, #1
    21cc:	str	r0, [sp, #60]	; 0x3c
    21d0:	ldr	r0, [sp, #60]	; 0x3c
    21d4:	str	r0, [sp, #64]	; 0x40
    21d8:	ldr	r0, [sp, #64]	; 0x40
    21dc:	tst	r0, #1
    21e0:	beq	21f8 <get_bit_size_boundary+0x1d0>
    21e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    21e8:	mvn	r1, #0
    21ec:	add	r0, r0, r1
    21f0:	str	r0, [fp, #-52]	; 0xffffffcc
    21f4:	b	216c <get_bit_size_boundary+0x144>
    21f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
    21fc:	cmp	r0, #0
    2200:	blt	2248 <get_bit_size_boundary+0x220>
    2204:	ldr	r0, [fp, #-16]
    2208:	add	r0, r0, #8
    220c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2210:	add	r0, r0, r1, lsl #4
    2214:	ldr	r0, [r0]
    2218:	ldr	r0, [r0]
    221c:	cmp	r0, #100	; 0x64
    2220:	bne	2248 <get_bit_size_boundary+0x220>
    2224:	ldr	r0, [fp, #-16]
    2228:	add	r0, r0, #8
    222c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2230:	add	r0, r0, r1, lsl #4
    2234:	ldr	r0, [r0]
    2238:	ldr	r0, [r0, #8]
    223c:	cmp	r0, #2
    2240:	bne	2248 <get_bit_size_boundary+0x220>
    2244:	b	2268 <get_bit_size_boundary+0x240>
    2248:	movw	r0, #0
    224c:	movt	r0, #0
    2250:	movw	r1, #0
    2254:	movt	r1, #0
    2258:	movw	r2, #122	; 0x7a
    225c:	movw	r3, #0
    2260:	movt	r3, #0
    2264:	bl	0 <__assert_fail>
    2268:	ldr	r0, [fp, #-16]
    226c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    2270:	add	r0, r0, r1, lsl #4
    2274:	ldr	r0, [r0, #8]
    2278:	ldr	r1, [r0, #24]
    227c:	ldr	r0, [r0, #28]
    2280:	lsl	r0, r0, #3
    2284:	orr	r0, r0, r1, lsr #29
    2288:	ldr	r2, [fp, #-40]	; 0xffffffd8
    228c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2290:	subs	r1, r2, r1, lsl #3
    2294:	sbc	r0, r3, r0
    2298:	str	r1, [fp, #-40]	; 0xffffffd8
    229c:	str	r0, [fp, #-36]	; 0xffffffdc
    22a0:	ldr	r0, [fp, #-16]
    22a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    22a8:	add	r0, r0, r1, lsl #4
    22ac:	ldr	r0, [r0, #8]
    22b0:	ldr	r0, [r0, #16]
    22b4:	lsl	r1, r0, #3
    22b8:	sbfx	r0, r0, #28, #1
    22bc:	str	r0, [fp, #-44]	; 0xffffffd4
    22c0:	str	r1, [fp, #-48]	; 0xffffffd0
    22c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
    22c8:	cmp	r0, #0
    22cc:	blt	22fc <get_bit_size_boundary+0x2d4>
    22d0:	b	22d4 <get_bit_size_boundary+0x2ac>
    22d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    22d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    22dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
    22e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    22e4:	subs	r0, r2, r0
    22e8:	sbcs	r1, r3, r1
    22ec:	str	r0, [sp, #56]	; 0x38
    22f0:	str	r1, [sp, #52]	; 0x34
    22f4:	bge	2394 <get_bit_size_boundary+0x36c>
    22f8:	b	22fc <get_bit_size_boundary+0x2d4>
    22fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2300:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2304:	lsr	r0, r0, #3
    2308:	orr	r0, r0, r1, lsl #29
    230c:	asr	r1, r1, #3
    2310:	sub	r2, fp, #82	; 0x52
    2314:	bl	0 <coda_str64>
    2318:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    231c:	tst	r0, #7
    2320:	beq	2354 <get_bit_size_boundary+0x32c>
    2324:	b	2328 <get_bit_size_boundary+0x300>
    2328:	sub	r0, fp, #82	; 0x52
    232c:	str	r0, [sp, #48]	; 0x30
    2330:	bl	0 <strlen>
    2334:	ldr	lr, [sp, #48]	; 0x30
    2338:	add	r0, lr, r0
    233c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2340:	and	r2, r1, #7
    2344:	movw	r1, #0
    2348:	movt	r1, #0
    234c:	bl	0 <sprintf>
    2350:	str	r0, [sp, #44]	; 0x2c
    2354:	sub	r2, fp, #103	; 0x67
    2358:	ldr	r0, [fp, #-48]	; 0xffffffd0
    235c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2360:	lsr	r0, r0, #3
    2364:	orr	r0, r0, r1, lsl #29
    2368:	asr	r1, r1, #3
    236c:	bl	0 <coda_str64>
    2370:	sub	r3, fp, #103	; 0x67
    2374:	sub	r2, fp, #82	; 0x52
    2378:	mvn	r0, #300	; 0x12c
    237c:	movw	r1, #0
    2380:	movt	r1, #0
    2384:	bl	0 <coda_set_error>
    2388:	mvn	r0, #0
    238c:	str	r0, [fp, #-12]
    2390:	b	253c <get_bit_size_boundary+0x514>
    2394:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2398:	ldr	r1, [fp, #-36]	; 0xffffffdc
    239c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    23a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    23a4:	adds	r0, r0, r2
    23a8:	adc	r1, r1, r3
    23ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
    23b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    23b4:	subs	r0, r2, r0
    23b8:	sbcs	r1, r3, r1
    23bc:	str	r0, [sp, #40]	; 0x28
    23c0:	str	r1, [sp, #36]	; 0x24
    23c4:	bge	250c <get_bit_size_boundary+0x4e4>
    23c8:	b	23cc <get_bit_size_boundary+0x3a4>
    23cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    23d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    23d4:	lsr	r0, r0, #3
    23d8:	orr	r0, r0, r1, lsl #29
    23dc:	asr	r1, r1, #3
    23e0:	sub	r2, fp, #133	; 0x85
    23e4:	bl	0 <coda_str64>
    23e8:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    23ec:	tst	r0, #7
    23f0:	beq	2424 <get_bit_size_boundary+0x3fc>
    23f4:	b	23f8 <get_bit_size_boundary+0x3d0>
    23f8:	sub	r0, fp, #133	; 0x85
    23fc:	str	r0, [sp, #32]
    2400:	bl	0 <strlen>
    2404:	ldr	lr, [sp, #32]
    2408:	add	r0, lr, r0
    240c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    2410:	and	r2, r1, #7
    2414:	movw	r1, #0
    2418:	movt	r1, #0
    241c:	bl	0 <sprintf>
    2420:	str	r0, [sp, #28]
    2424:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2428:	ldr	r1, [fp, #-36]	; 0xffffffdc
    242c:	lsr	r0, r0, #3
    2430:	orr	r0, r0, r1, lsl #29
    2434:	asr	r1, r1, #3
    2438:	add	r2, sp, #109	; 0x6d
    243c:	bl	0 <coda_str64>
    2440:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    2444:	tst	r0, #7
    2448:	beq	247c <get_bit_size_boundary+0x454>
    244c:	b	2450 <get_bit_size_boundary+0x428>
    2450:	add	r0, sp, #109	; 0x6d
    2454:	str	r0, [sp, #24]
    2458:	bl	0 <strlen>
    245c:	ldr	lr, [sp, #24]
    2460:	add	r0, lr, r0
    2464:	ldr	r1, [fp, #-40]	; 0xffffffd8
    2468:	and	r2, r1, #7
    246c:	movw	r1, #0
    2470:	movt	r1, #0
    2474:	bl	0 <sprintf>
    2478:	str	r0, [sp, #20]
    247c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2480:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2484:	lsr	r0, r0, #3
    2488:	orr	r0, r0, r1, lsl #29
    248c:	asr	r1, r1, #3
    2490:	add	r2, sp, #79	; 0x4f
    2494:	bl	0 <coda_str64>
    2498:	ldrb	r0, [fp, #-48]	; 0xffffffd0
    249c:	tst	r0, #7
    24a0:	beq	24d4 <get_bit_size_boundary+0x4ac>
    24a4:	b	24a8 <get_bit_size_boundary+0x480>
    24a8:	add	r0, sp, #79	; 0x4f
    24ac:	str	r0, [sp, #16]
    24b0:	bl	0 <strlen>
    24b4:	ldr	lr, [sp, #16]
    24b8:	add	r0, lr, r0
    24bc:	ldr	r1, [fp, #-48]	; 0xffffffd0
    24c0:	and	r2, r1, #7
    24c4:	movw	r1, #0
    24c8:	movt	r1, #0
    24cc:	bl	0 <sprintf>
    24d0:	str	r0, [sp, #12]
    24d4:	add	r0, sp, #79	; 0x4f
    24d8:	add	r3, sp, #109	; 0x6d
    24dc:	sub	r2, fp, #133	; 0x85
    24e0:	mvn	r1, #300	; 0x12c
    24e4:	str	r0, [sp, #8]
    24e8:	mov	r0, r1
    24ec:	movw	r1, #0
    24f0:	movt	r1, #0
    24f4:	ldr	ip, [sp, #8]
    24f8:	str	ip, [sp]
    24fc:	bl	0 <coda_set_error>
    2500:	mvn	r0, #0
    2504:	str	r0, [fp, #-12]
    2508:	b	253c <get_bit_size_boundary+0x514>
    250c:	b	2510 <get_bit_size_boundary+0x4e8>
    2510:	ldr	r0, [fp, #-48]	; 0xffffffd0
    2514:	ldr	r1, [fp, #-44]	; 0xffffffd4
    2518:	ldr	r2, [fp, #-40]	; 0xffffffd8
    251c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2520:	subs	r0, r0, r2
    2524:	sbc	r1, r1, r3
    2528:	ldr	r2, [fp, #-20]	; 0xffffffec
    252c:	str	r0, [r2]
    2530:	str	r1, [r2, #4]
    2534:	movw	r0, #0
    2538:	str	r0, [fp, #-12]
    253c:	ldr	r0, [fp, #-12]
    2540:	sub	sp, fp, #8
    2544:	pop	{r4, r5, fp, pc}

00002548 <read_bytes_in_bounds>:
    2548:	push	{fp, lr}
    254c:	mov	fp, sp
    2550:	sub	sp, sp, #32
    2554:	ldr	r1, [fp, #12]
    2558:	ldr	ip, [fp, #8]
    255c:	ldr	lr, [fp, #16]
    2560:	str	r0, [fp, #-8]
    2564:	str	r3, [sp, #20]
    2568:	str	r2, [sp, #16]
    256c:	str	r1, [sp, #12]
    2570:	str	ip, [sp, #8]
    2574:	ldr	r0, [fp, #-8]
    2578:	ldr	r0, [r0, #48]	; 0x30
    257c:	movw	r1, #0
    2580:	cmp	r0, r1
    2584:	str	lr, [sp, #4]
    2588:	beq	25ac <read_bytes_in_bounds+0x64>
    258c:	ldr	r0, [fp, #16]
    2590:	ldr	r1, [fp, #-8]
    2594:	ldr	r1, [r1, #48]	; 0x30
    2598:	ldr	r2, [sp, #16]
    259c:	add	r1, r1, r2
    25a0:	ldr	r2, [sp, #8]
    25a4:	bl	0 <memcpy>
    25a8:	b	2648 <read_bytes_in_bounds+0x100>
    25ac:	ldr	r0, [fp, #-8]
    25b0:	ldr	r0, [r0, #16]
    25b4:	cmp	r0, #0
    25b8:	beq	25cc <read_bytes_in_bounds+0x84>
    25bc:	ldr	r0, [fp, #-8]
    25c0:	ldr	r0, [r0, #16]
    25c4:	cmp	r0, #1
    25c8:	bne	25d0 <read_bytes_in_bounds+0x88>
    25cc:	b	25f0 <read_bytes_in_bounds+0xa8>
    25d0:	movw	r0, #0
    25d4:	movt	r0, #0
    25d8:	movw	r1, #0
    25dc:	movt	r1, #0
    25e0:	movw	r2, #62	; 0x3e
    25e4:	movw	r3, #0
    25e8:	movt	r3, #0
    25ec:	bl	0 <__assert_fail>
    25f0:	ldr	r0, [fp, #-8]
    25f4:	ldr	r0, [r0, #56]	; 0x38
    25f8:	ldr	r1, [fp, #16]
    25fc:	ldr	r2, [sp, #8]
    2600:	ldr	r3, [sp, #16]
    2604:	bl	0 <pread>
    2608:	cmp	r0, #0
    260c:	bge	2644 <read_bytes_in_bounds+0xfc>
    2610:	bl	0 <__errno_location>
    2614:	ldr	r0, [r0]
    2618:	bl	0 <strerror>
    261c:	mvn	lr, #21
    2620:	str	r0, [sp]
    2624:	mov	r0, lr
    2628:	movw	r1, #0
    262c:	movt	r1, #0
    2630:	ldr	r2, [sp]
    2634:	bl	0 <coda_set_error>
    2638:	mvn	r0, #0
    263c:	str	r0, [fp, #-4]
    2640:	b	2650 <read_bytes_in_bounds+0x108>
    2644:	b	2648 <read_bytes_in_bounds+0x100>
    2648:	movw	r0, #0
    264c:	str	r0, [fp, #-4]
    2650:	ldr	r0, [fp, #-4]
    2654:	mov	sp, fp
    2658:	pop	{fp, pc}

0000265c <parse_mapping_size>:
    265c:	push	{fp, lr}
    2660:	mov	fp, sp
    2664:	sub	sp, sp, #32
    2668:	str	r0, [fp, #-8]
    266c:	str	r1, [fp, #-12]
    2670:	str	r2, [sp, #16]
    2674:	str	r3, [sp, #12]
    2678:	movw	r0, #0
    267c:	str	r0, [sp, #8]
    2680:	ldr	r0, [sp, #8]
    2684:	ldr	r1, [sp, #16]
    2688:	ldr	r1, [r1, #8]
    268c:	cmp	r0, r1
    2690:	bge	278c <parse_mapping_size+0x130>
    2694:	ldr	r0, [sp, #16]
    2698:	ldr	r0, [r0, #12]
    269c:	ldr	r1, [sp, #8]
    26a0:	add	r0, r0, r1, lsl #2
    26a4:	ldr	r0, [r0]
    26a8:	ldr	r0, [r0]
    26ac:	cmp	r0, #0
    26b0:	bne	26e0 <parse_mapping_size+0x84>
    26b4:	ldr	r0, [fp, #-12]
    26b8:	cmp	r0, #0
    26bc:	bne	26dc <parse_mapping_size+0x80>
    26c0:	ldr	r0, [sp, #12]
    26c4:	mov	r1, #0
    26c8:	str	r1, [r0, #4]
    26cc:	str	r1, [r0]
    26d0:	movw	r0, #1
    26d4:	str	r0, [fp, #-4]
    26d8:	b	27cc <parse_mapping_size+0x170>
    26dc:	b	2778 <parse_mapping_size+0x11c>
    26e0:	ldr	r0, [sp, #16]
    26e4:	ldr	r0, [r0, #12]
    26e8:	ldr	r1, [sp, #8]
    26ec:	add	r0, r0, r1, lsl #2
    26f0:	ldr	r0, [r0]
    26f4:	ldr	r0, [r0]
    26f8:	ldr	r1, [fp, #-12]
    26fc:	cmp	r0, r1
    2700:	bgt	2774 <parse_mapping_size+0x118>
    2704:	ldr	r0, [sp, #16]
    2708:	ldr	r0, [r0, #12]
    270c:	ldr	r1, [sp, #8]
    2710:	ldr	r1, [r0, r1, lsl #2]!
    2714:	ldr	r1, [r1, #4]
    2718:	ldr	r2, [fp, #-8]
    271c:	ldr	r0, [r0]
    2720:	ldr	r0, [r0]
    2724:	str	r0, [sp, #4]
    2728:	mov	r0, r1
    272c:	mov	r1, r2
    2730:	ldr	r2, [sp, #4]
    2734:	bl	0 <memcmp>
    2738:	cmp	r0, #0
    273c:	bne	2774 <parse_mapping_size+0x118>
    2740:	ldr	r0, [sp, #16]
    2744:	ldr	r0, [r0, #12]
    2748:	ldr	r1, [sp, #8]
    274c:	ldr	r0, [r0, r1, lsl #2]
    2750:	ldr	r0, [r0]
    2754:	lsl	r1, r0, #3
    2758:	sbfx	r0, r0, #28, #1
    275c:	ldr	r2, [sp, #12]
    2760:	str	r0, [r2, #4]
    2764:	str	r1, [r2]
    2768:	movw	r0, #1
    276c:	str	r0, [fp, #-4]
    2770:	b	27cc <parse_mapping_size+0x170>
    2774:	b	2778 <parse_mapping_size+0x11c>
    2778:	b	277c <parse_mapping_size+0x120>
    277c:	ldr	r0, [sp, #8]
    2780:	add	r0, r0, #1
    2784:	str	r0, [sp, #8]
    2788:	b	2680 <parse_mapping_size+0x24>
    278c:	ldr	r0, [sp, #16]
    2790:	ldr	r0, [r0, #4]
    2794:	cmp	r0, #0
    2798:	blt	27c4 <parse_mapping_size+0x168>
    279c:	b	27a0 <parse_mapping_size+0x144>
    27a0:	ldr	r0, [sp, #16]
    27a4:	ldr	r1, [r0]
    27a8:	ldr	r0, [r0, #4]
    27ac:	ldr	r2, [sp, #12]
    27b0:	str	r0, [r2, #4]
    27b4:	str	r1, [r2]
    27b8:	movw	r0, #1
    27bc:	str	r0, [fp, #-4]
    27c0:	b	27cc <parse_mapping_size+0x170>
    27c4:	movw	r0, #0
    27c8:	str	r0, [fp, #-4]
    27cc:	ldr	r0, [fp, #-4]
    27d0:	mov	sp, fp
    27d4:	pop	{fp, pc}

000027d8 <coda_ascii_cursor_read_bytes>:
    27d8:	push	{r4, sl, fp, lr}
    27dc:	add	fp, sp, #8
    27e0:	sub	sp, sp, #48	; 0x30
    27e4:	ldr	ip, [fp, #12]
    27e8:	ldr	lr, [fp, #8]
    27ec:	str	r0, [fp, #-16]
    27f0:	str	r1, [fp, #-20]	; 0xffffffec
    27f4:	str	r3, [sp, #28]
    27f8:	str	r2, [sp, #24]
    27fc:	str	ip, [sp, #20]
    2800:	str	lr, [sp, #16]
    2804:	ldr	r0, [fp, #-16]
    2808:	ldr	r1, [r0, #4]
    280c:	ldrb	r0, [r0, r1, lsl #4]
    2810:	tst	r0, #7
    2814:	beq	2838 <coda_ascii_cursor_read_bytes+0x60>
    2818:	b	281c <coda_ascii_cursor_read_bytes+0x44>
    281c:	ldr	r0, [pc, #120]	; 289c <coda_ascii_cursor_read_bytes+0xc4>
    2820:	movw	r1, #0
    2824:	movt	r1, #0
    2828:	bl	0 <coda_set_error>
    282c:	mvn	r0, #0
    2830:	str	r0, [fp, #-12]
    2834:	b	2890 <coda_ascii_cursor_read_bytes+0xb8>
    2838:	ldr	r0, [fp, #-16]
    283c:	ldr	r1, [r0]
    2840:	ldr	r2, [r0, #4]
    2844:	ldr	r2, [r0, r2, lsl #4]!
    2848:	ldr	r0, [r0, #4]
    284c:	lsr	r2, r2, #3
    2850:	orr	r2, r2, r0, lsl #29
    2854:	asr	r0, r0, #3
    2858:	ldr	r3, [sp, #24]
    285c:	ldr	ip, [sp, #28]
    2860:	adds	r2, r2, r3
    2864:	adc	r3, r0, ip
    2868:	ldr	r0, [sp, #16]
    286c:	ldr	ip, [sp, #20]
    2870:	ldr	lr, [fp, #-20]	; 0xffffffec
    2874:	mov	r4, sp
    2878:	str	lr, [r4, #8]
    287c:	str	ip, [r4, #4]
    2880:	str	r0, [r4]
    2884:	mov	r0, r1
    2888:	bl	3c80 <read_bytes>
    288c:	str	r0, [fp, #-12]
    2890:	ldr	r0, [fp, #-12]
    2894:	sub	sp, fp, #8
    2898:	pop	{r4, sl, fp, pc}
    289c:	.word	0xfffffed4

000028a0 <coda_ascii_cursor_get_num_elements>:
    28a0:	push	{fp, lr}
    28a4:	mov	fp, sp
    28a8:	sub	sp, sp, #16
    28ac:	str	r0, [sp, #8]
    28b0:	str	r1, [sp, #4]
    28b4:	ldr	r0, [sp, #8]
    28b8:	add	r1, r0, #8
    28bc:	ldr	r0, [r0, #4]
    28c0:	sub	r0, r0, #1
    28c4:	add	r0, r1, r0, lsl #4
    28c8:	ldr	r0, [r0]
    28cc:	ldr	r0, [r0]
    28d0:	cmp	r0, #100	; 0x64
    28d4:	bcs	28f8 <coda_ascii_cursor_get_num_elements+0x58>
    28d8:	ldr	r0, [sp, #8]
    28dc:	add	r1, r0, #8
    28e0:	ldr	r0, [r0, #4]
    28e4:	sub	r0, r0, #1
    28e8:	add	r0, r1, r0, lsl #4
    28ec:	ldr	r0, [r0]
    28f0:	str	r0, [sp]
    28f4:	b	2918 <coda_ascii_cursor_get_num_elements+0x78>
    28f8:	ldr	r0, [sp, #8]
    28fc:	add	r1, r0, #8
    2900:	ldr	r0, [r0, #4]
    2904:	sub	r0, r0, #1
    2908:	add	r0, r1, r0, lsl #4
    290c:	ldr	r0, [r0]
    2910:	ldr	r0, [r0, #4]
    2914:	str	r0, [sp]
    2918:	ldr	r0, [sp]
    291c:	ldr	r0, [r0, #8]
    2920:	cmp	r0, #1
    2924:	bhi	2940 <coda_ascii_cursor_get_num_elements+0xa0>
    2928:	b	292c <coda_ascii_cursor_get_num_elements+0x8c>
    292c:	ldr	r0, [sp, #8]
    2930:	ldr	r1, [sp, #4]
    2934:	bl	0 <coda_ascbin_cursor_get_num_elements>
    2938:	str	r0, [fp, #-4]
    293c:	b	2954 <coda_ascii_cursor_get_num_elements+0xb4>
    2940:	ldr	r0, [sp, #4]
    2944:	movw	r1, #1
    2948:	str	r1, [r0]
    294c:	movw	r0, #0
    2950:	str	r0, [fp, #-4]
    2954:	ldr	r0, [fp, #-4]
    2958:	mov	sp, fp
    295c:	pop	{fp, pc}

00002960 <coda_ascii_cursor_read_int64>:
    2960:	push	{r4, sl, fp, lr}
    2964:	add	fp, sp, #8
    2968:	sub	sp, sp, #136	; 0x88
    296c:	str	r0, [fp, #-16]
    2970:	str	r1, [fp, #-20]	; 0xffffffec
    2974:	ldr	r0, [fp, #-16]
    2978:	add	r1, r0, #8
    297c:	ldr	r0, [r0, #4]
    2980:	sub	r0, r0, #1
    2984:	add	r0, r1, r0, lsl #4
    2988:	ldr	r0, [r0]
    298c:	ldr	r0, [r0]
    2990:	cmp	r0, #100	; 0x64
    2994:	bcs	29b8 <coda_ascii_cursor_read_int64+0x58>
    2998:	ldr	r0, [fp, #-16]
    299c:	add	r1, r0, #8
    29a0:	ldr	r0, [r0, #4]
    29a4:	sub	r0, r0, #1
    29a8:	add	r0, r1, r0, lsl #4
    29ac:	ldr	r0, [r0]
    29b0:	str	r0, [sp, #28]
    29b4:	b	29d8 <coda_ascii_cursor_read_int64+0x78>
    29b8:	ldr	r0, [fp, #-16]
    29bc:	add	r1, r0, #8
    29c0:	ldr	r0, [r0, #4]
    29c4:	sub	r0, r0, #1
    29c8:	add	r0, r1, r0, lsl #4
    29cc:	ldr	r0, [r0]
    29d0:	ldr	r0, [r0, #4]
    29d4:	str	r0, [sp, #28]
    29d8:	ldr	r0, [sp, #28]
    29dc:	str	r0, [fp, #-24]	; 0xffffffe8
    29e0:	ldr	r0, [fp, #-16]
    29e4:	ldr	r1, [r0, #4]
    29e8:	ldr	r1, [r0, r1, lsl #4]!
    29ec:	ldr	r0, [r0, #4]
    29f0:	str	r0, [fp, #-28]	; 0xffffffe4
    29f4:	str	r1, [fp, #-32]	; 0xffffffe0
    29f8:	mov	r0, #1
    29fc:	str	r0, [sp, #32]
    2a00:	ldr	r0, [fp, #-16]
    2a04:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2a08:	ldr	r2, [r1, #24]
    2a0c:	ldr	r3, [r1, #28]
    2a10:	sub	r1, fp, #40	; 0x28
    2a14:	bl	2028 <get_bit_size_boundary>
    2a18:	cmp	r0, #0
    2a1c:	beq	2a2c <coda_ascii_cursor_read_int64+0xcc>
    2a20:	mvn	r0, #0
    2a24:	str	r0, [fp, #-12]
    2a28:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2a2c:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    2a30:	tst	r0, #7
    2a34:	beq	2a58 <coda_ascii_cursor_read_int64+0xf8>
    2a38:	b	2a3c <coda_ascii_cursor_read_int64+0xdc>
    2a3c:	mvn	r0, #21
    2a40:	movw	r1, #0
    2a44:	movt	r1, #0
    2a48:	bl	0 <coda_set_error>
    2a4c:	mvn	r0, #0
    2a50:	str	r0, [fp, #-12]
    2a54:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2a58:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a5c:	ldr	r0, [r0, #28]
    2a60:	cmp	r0, #0
    2a64:	blt	2ac0 <coda_ascii_cursor_read_int64+0x160>
    2a68:	b	2a6c <coda_ascii_cursor_read_int64+0x10c>
    2a6c:	mov	r0, #0
    2a70:	str	r0, [sp, #32]
    2a74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2a78:	ldr	r1, [r0, #24]
    2a7c:	ldr	r0, [r0, #28]
    2a80:	lsr	r1, r1, #3
    2a84:	orr	r0, r1, r0, lsl #29
    2a88:	str	r0, [sp, #36]	; 0x24
    2a8c:	ldr	r0, [sp, #36]	; 0x24
    2a90:	cmp	r0, #64	; 0x40
    2a94:	bgt	2a9c <coda_ascii_cursor_read_int64+0x13c>
    2a98:	b	2abc <coda_ascii_cursor_read_int64+0x15c>
    2a9c:	movw	r0, #0
    2aa0:	movt	r0, #0
    2aa4:	movw	r1, #0
    2aa8:	movt	r1, #0
    2aac:	movw	r2, #1076	; 0x434
    2ab0:	movw	r3, #0
    2ab4:	movt	r3, #0
    2ab8:	bl	0 <__assert_fail>
    2abc:	b	2b10 <coda_ascii_cursor_read_int64+0x1b0>
    2ac0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2ac4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2ac8:	lsr	r0, r0, #3
    2acc:	orr	r0, r0, r1, lsl #29
    2ad0:	rsbs	r0, r0, #63	; 0x3f
    2ad4:	mov	r2, #0
    2ad8:	sbcs	r1, r2, r1, asr #3
    2adc:	str	r0, [sp, #24]
    2ae0:	str	r1, [sp, #20]
    2ae4:	blt	2b04 <coda_ascii_cursor_read_int64+0x1a4>
    2ae8:	b	2aec <coda_ascii_cursor_read_int64+0x18c>
    2aec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2af0:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2af4:	lsr	r0, r0, #3
    2af8:	orr	r0, r0, r1, lsl #29
    2afc:	str	r0, [sp, #36]	; 0x24
    2b00:	b	2b0c <coda_ascii_cursor_read_int64+0x1ac>
    2b04:	movw	r0, #64	; 0x40
    2b08:	str	r0, [sp, #36]	; 0x24
    2b0c:	b	2b10 <coda_ascii_cursor_read_int64+0x1b0>
    2b10:	add	r0, sp, #40	; 0x28
    2b14:	ldr	r1, [fp, #-16]
    2b18:	ldr	r1, [r1]
    2b1c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2b20:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2b24:	lsr	r2, r2, #3
    2b28:	orr	r2, r2, r3, lsl #29
    2b2c:	asr	r3, r3, #3
    2b30:	ldr	ip, [sp, #36]	; 0x24
    2b34:	asr	lr, ip, #31
    2b38:	mov	r4, sp
    2b3c:	str	r0, [r4, #8]
    2b40:	str	lr, [r4, #4]
    2b44:	str	ip, [r4]
    2b48:	mov	r0, r1
    2b4c:	bl	2548 <read_bytes_in_bounds>
    2b50:	cmp	r0, #0
    2b54:	beq	2b64 <coda_ascii_cursor_read_int64+0x204>
    2b58:	mvn	r0, #0
    2b5c:	str	r0, [fp, #-12]
    2b60:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2b64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b68:	ldr	r0, [r0, #52]	; 0x34
    2b6c:	movw	r1, #0
    2b70:	cmp	r0, r1
    2b74:	beq	2be0 <coda_ascii_cursor_read_int64+0x280>
    2b78:	ldr	r1, [sp, #36]	; 0x24
    2b7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2b80:	ldr	r2, [r0, #52]	; 0x34
    2b84:	ldr	r3, [sp, #32]
    2b88:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b8c:	mov	ip, sp
    2b90:	str	r0, [ip]
    2b94:	add	r0, sp, #40	; 0x28
    2b98:	bl	2c1c <parse_integer_mapping>
    2b9c:	mov	r1, r0
    2ba0:	cmp	r0, #0
    2ba4:	str	r1, [sp, #16]
    2ba8:	beq	2bc0 <coda_ascii_cursor_read_int64+0x260>
    2bac:	b	2bb0 <coda_ascii_cursor_read_int64+0x250>
    2bb0:	ldr	r0, [sp, #16]
    2bb4:	cmp	r0, #1
    2bb8:	beq	2bc4 <coda_ascii_cursor_read_int64+0x264>
    2bbc:	b	2bd0 <coda_ascii_cursor_read_int64+0x270>
    2bc0:	b	2bdc <coda_ascii_cursor_read_int64+0x27c>
    2bc4:	movw	r0, #0
    2bc8:	str	r0, [fp, #-12]
    2bcc:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2bd0:	mvn	r0, #0
    2bd4:	str	r0, [fp, #-12]
    2bd8:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2bdc:	b	2be0 <coda_ascii_cursor_read_int64+0x280>
    2be0:	add	r0, sp, #40	; 0x28
    2be4:	ldr	r1, [sp, #36]	; 0x24
    2be8:	ldr	r2, [fp, #-20]	; 0xffffffec
    2bec:	ldr	r3, [sp, #32]
    2bf0:	bl	0 <coda_ascii_parse_int64>
    2bf4:	cmp	r0, #0
    2bf8:	bge	2c08 <coda_ascii_cursor_read_int64+0x2a8>
    2bfc:	mvn	r0, #0
    2c00:	str	r0, [fp, #-12]
    2c04:	b	2c10 <coda_ascii_cursor_read_int64+0x2b0>
    2c08:	movw	r0, #0
    2c0c:	str	r0, [fp, #-12]
    2c10:	ldr	r0, [fp, #-12]
    2c14:	sub	sp, fp, #8
    2c18:	pop	{r4, sl, fp, pc}

00002c1c <parse_integer_mapping>:
    2c1c:	push	{fp, lr}
    2c20:	mov	fp, sp
    2c24:	sub	sp, sp, #32
    2c28:	ldr	ip, [fp, #8]
    2c2c:	str	r0, [fp, #-8]
    2c30:	str	r1, [fp, #-12]
    2c34:	str	r2, [sp, #16]
    2c38:	str	r3, [sp, #12]
    2c3c:	movw	r0, #0
    2c40:	str	r0, [sp, #8]
    2c44:	str	ip, [sp, #4]
    2c48:	ldr	r0, [sp, #8]
    2c4c:	ldr	r1, [sp, #16]
    2c50:	ldr	r1, [r1, #8]
    2c54:	cmp	r0, r1
    2c58:	bge	2db0 <parse_integer_mapping+0x194>
    2c5c:	ldr	r0, [sp, #16]
    2c60:	ldr	r0, [r0, #12]
    2c64:	ldr	r1, [sp, #8]
    2c68:	add	r0, r0, r1, lsl #2
    2c6c:	ldr	r0, [r0]
    2c70:	ldr	r0, [r0]
    2c74:	cmp	r0, #0
    2c78:	bne	2cbc <parse_integer_mapping+0xa0>
    2c7c:	ldr	r0, [fp, #-12]
    2c80:	cmp	r0, #0
    2c84:	bne	2cb8 <parse_integer_mapping+0x9c>
    2c88:	ldr	r0, [sp, #16]
    2c8c:	ldr	r0, [r0, #12]
    2c90:	ldr	r1, [sp, #8]
    2c94:	ldr	r0, [r0, r1, lsl #2]
    2c98:	ldr	r1, [r0, #8]
    2c9c:	ldr	r0, [r0, #12]
    2ca0:	ldr	r2, [fp, #8]
    2ca4:	str	r0, [r2, #4]
    2ca8:	str	r1, [r2]
    2cac:	movw	r0, #1
    2cb0:	str	r0, [fp, #-4]
    2cb4:	b	2db8 <parse_integer_mapping+0x19c>
    2cb8:	b	2d9c <parse_integer_mapping+0x180>
    2cbc:	ldr	r0, [sp, #16]
    2cc0:	ldr	r0, [r0, #12]
    2cc4:	ldr	r1, [sp, #8]
    2cc8:	add	r0, r0, r1, lsl #2
    2ccc:	ldr	r0, [r0]
    2cd0:	ldr	r0, [r0]
    2cd4:	ldr	r1, [fp, #-12]
    2cd8:	cmp	r0, r1
    2cdc:	bgt	2d98 <parse_integer_mapping+0x17c>
    2ce0:	ldr	r0, [sp, #16]
    2ce4:	ldr	r0, [r0, #12]
    2ce8:	ldr	r1, [sp, #8]
    2cec:	ldr	r1, [r0, r1, lsl #2]!
    2cf0:	ldr	r1, [r1, #4]
    2cf4:	ldr	r2, [fp, #-8]
    2cf8:	ldr	r0, [r0]
    2cfc:	ldr	r0, [r0]
    2d00:	str	r0, [sp]
    2d04:	mov	r0, r1
    2d08:	mov	r1, r2
    2d0c:	ldr	r2, [sp]
    2d10:	bl	0 <memcmp>
    2d14:	cmp	r0, #0
    2d18:	bne	2d98 <parse_integer_mapping+0x17c>
    2d1c:	ldr	r0, [sp, #12]
    2d20:	cmp	r0, #0
    2d24:	bne	2d68 <parse_integer_mapping+0x14c>
    2d28:	ldr	r0, [sp, #16]
    2d2c:	ldr	r0, [r0, #12]
    2d30:	ldr	r1, [sp, #8]
    2d34:	add	r0, r0, r1, lsl #2
    2d38:	ldr	r0, [r0]
    2d3c:	ldr	r0, [r0]
    2d40:	ldr	r1, [fp, #-12]
    2d44:	cmp	r0, r1
    2d48:	beq	2d68 <parse_integer_mapping+0x14c>
    2d4c:	mvn	r0, #102	; 0x66
    2d50:	movw	r1, #0
    2d54:	movt	r1, #0
    2d58:	bl	0 <coda_set_error>
    2d5c:	mvn	r0, #0
    2d60:	str	r0, [fp, #-4]
    2d64:	b	2db8 <parse_integer_mapping+0x19c>
    2d68:	ldr	r0, [sp, #16]
    2d6c:	ldr	r0, [r0, #12]
    2d70:	ldr	r1, [sp, #8]
    2d74:	ldr	r0, [r0, r1, lsl #2]
    2d78:	ldr	r1, [r0, #8]
    2d7c:	ldr	r0, [r0, #12]
    2d80:	ldr	r2, [fp, #8]
    2d84:	str	r0, [r2, #4]
    2d88:	str	r1, [r2]
    2d8c:	movw	r0, #1
    2d90:	str	r0, [fp, #-4]
    2d94:	b	2db8 <parse_integer_mapping+0x19c>
    2d98:	b	2d9c <parse_integer_mapping+0x180>
    2d9c:	b	2da0 <parse_integer_mapping+0x184>
    2da0:	ldr	r0, [sp, #8]
    2da4:	add	r0, r0, #1
    2da8:	str	r0, [sp, #8]
    2dac:	b	2c48 <parse_integer_mapping+0x2c>
    2db0:	movw	r0, #0
    2db4:	str	r0, [fp, #-4]
    2db8:	ldr	r0, [fp, #-4]
    2dbc:	mov	sp, fp
    2dc0:	pop	{fp, pc}

00002dc4 <coda_ascii_cursor_read_uint64>:
    2dc4:	push	{r4, sl, fp, lr}
    2dc8:	add	fp, sp, #8
    2dcc:	sub	sp, sp, #136	; 0x88
    2dd0:	str	r0, [fp, #-16]
    2dd4:	str	r1, [fp, #-20]	; 0xffffffec
    2dd8:	ldr	r0, [fp, #-16]
    2ddc:	add	r1, r0, #8
    2de0:	ldr	r0, [r0, #4]
    2de4:	sub	r0, r0, #1
    2de8:	add	r0, r1, r0, lsl #4
    2dec:	ldr	r0, [r0]
    2df0:	ldr	r0, [r0]
    2df4:	cmp	r0, #100	; 0x64
    2df8:	bcs	2e1c <coda_ascii_cursor_read_uint64+0x58>
    2dfc:	ldr	r0, [fp, #-16]
    2e00:	add	r1, r0, #8
    2e04:	ldr	r0, [r0, #4]
    2e08:	sub	r0, r0, #1
    2e0c:	add	r0, r1, r0, lsl #4
    2e10:	ldr	r0, [r0]
    2e14:	str	r0, [sp, #28]
    2e18:	b	2e3c <coda_ascii_cursor_read_uint64+0x78>
    2e1c:	ldr	r0, [fp, #-16]
    2e20:	add	r1, r0, #8
    2e24:	ldr	r0, [r0, #4]
    2e28:	sub	r0, r0, #1
    2e2c:	add	r0, r1, r0, lsl #4
    2e30:	ldr	r0, [r0]
    2e34:	ldr	r0, [r0, #4]
    2e38:	str	r0, [sp, #28]
    2e3c:	ldr	r0, [sp, #28]
    2e40:	str	r0, [fp, #-24]	; 0xffffffe8
    2e44:	ldr	r0, [fp, #-16]
    2e48:	ldr	r1, [r0, #4]
    2e4c:	ldr	r1, [r0, r1, lsl #4]!
    2e50:	ldr	r0, [r0, #4]
    2e54:	str	r0, [fp, #-28]	; 0xffffffe4
    2e58:	str	r1, [fp, #-32]	; 0xffffffe0
    2e5c:	mov	r0, #1
    2e60:	str	r0, [sp, #32]
    2e64:	ldr	r0, [fp, #-16]
    2e68:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e6c:	ldr	r2, [r1, #24]
    2e70:	ldr	r3, [r1, #28]
    2e74:	sub	r1, fp, #40	; 0x28
    2e78:	bl	2028 <get_bit_size_boundary>
    2e7c:	cmp	r0, #0
    2e80:	beq	2e90 <coda_ascii_cursor_read_uint64+0xcc>
    2e84:	mvn	r0, #0
    2e88:	str	r0, [fp, #-12]
    2e8c:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    2e90:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    2e94:	tst	r0, #7
    2e98:	beq	2ebc <coda_ascii_cursor_read_uint64+0xf8>
    2e9c:	b	2ea0 <coda_ascii_cursor_read_uint64+0xdc>
    2ea0:	mvn	r0, #21
    2ea4:	movw	r1, #0
    2ea8:	movt	r1, #0
    2eac:	bl	0 <coda_set_error>
    2eb0:	mvn	r0, #0
    2eb4:	str	r0, [fp, #-12]
    2eb8:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    2ebc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2ec0:	ldr	r0, [r0, #28]
    2ec4:	cmp	r0, #0
    2ec8:	blt	2f24 <coda_ascii_cursor_read_uint64+0x160>
    2ecc:	b	2ed0 <coda_ascii_cursor_read_uint64+0x10c>
    2ed0:	mov	r0, #0
    2ed4:	str	r0, [sp, #32]
    2ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2edc:	ldr	r1, [r0, #24]
    2ee0:	ldr	r0, [r0, #28]
    2ee4:	lsr	r1, r1, #3
    2ee8:	orr	r0, r1, r0, lsl #29
    2eec:	str	r0, [sp, #36]	; 0x24
    2ef0:	ldr	r0, [sp, #36]	; 0x24
    2ef4:	cmp	r0, #64	; 0x40
    2ef8:	bgt	2f00 <coda_ascii_cursor_read_uint64+0x13c>
    2efc:	b	2f20 <coda_ascii_cursor_read_uint64+0x15c>
    2f00:	movw	r0, #0
    2f04:	movt	r0, #0
    2f08:	movw	r1, #0
    2f0c:	movt	r1, #0
    2f10:	movw	r2, #1137	; 0x471
    2f14:	movw	r3, #0
    2f18:	movt	r3, #0
    2f1c:	bl	0 <__assert_fail>
    2f20:	b	2f74 <coda_ascii_cursor_read_uint64+0x1b0>
    2f24:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2f28:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2f2c:	lsr	r0, r0, #3
    2f30:	orr	r0, r0, r1, lsl #29
    2f34:	rsbs	r0, r0, #63	; 0x3f
    2f38:	mov	r2, #0
    2f3c:	sbcs	r1, r2, r1, asr #3
    2f40:	str	r0, [sp, #24]
    2f44:	str	r1, [sp, #20]
    2f48:	blt	2f68 <coda_ascii_cursor_read_uint64+0x1a4>
    2f4c:	b	2f50 <coda_ascii_cursor_read_uint64+0x18c>
    2f50:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2f54:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2f58:	lsr	r0, r0, #3
    2f5c:	orr	r0, r0, r1, lsl #29
    2f60:	str	r0, [sp, #36]	; 0x24
    2f64:	b	2f70 <coda_ascii_cursor_read_uint64+0x1ac>
    2f68:	movw	r0, #64	; 0x40
    2f6c:	str	r0, [sp, #36]	; 0x24
    2f70:	b	2f74 <coda_ascii_cursor_read_uint64+0x1b0>
    2f74:	add	r0, sp, #40	; 0x28
    2f78:	ldr	r1, [fp, #-16]
    2f7c:	ldr	r1, [r1]
    2f80:	ldr	r2, [fp, #-32]	; 0xffffffe0
    2f84:	ldr	r3, [fp, #-28]	; 0xffffffe4
    2f88:	lsr	r2, r2, #3
    2f8c:	orr	r2, r2, r3, lsl #29
    2f90:	asr	r3, r3, #3
    2f94:	ldr	ip, [sp, #36]	; 0x24
    2f98:	asr	lr, ip, #31
    2f9c:	mov	r4, sp
    2fa0:	str	r0, [r4, #8]
    2fa4:	str	lr, [r4, #4]
    2fa8:	str	ip, [r4]
    2fac:	mov	r0, r1
    2fb0:	bl	2548 <read_bytes_in_bounds>
    2fb4:	cmp	r0, #0
    2fb8:	beq	2fc8 <coda_ascii_cursor_read_uint64+0x204>
    2fbc:	mvn	r0, #0
    2fc0:	str	r0, [fp, #-12]
    2fc4:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    2fc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fcc:	ldr	r0, [r0, #52]	; 0x34
    2fd0:	movw	r1, #0
    2fd4:	cmp	r0, r1
    2fd8:	beq	3044 <coda_ascii_cursor_read_uint64+0x280>
    2fdc:	ldr	r1, [sp, #36]	; 0x24
    2fe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2fe4:	ldr	r2, [r0, #52]	; 0x34
    2fe8:	ldr	r3, [sp, #32]
    2fec:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ff0:	mov	ip, sp
    2ff4:	str	r0, [ip]
    2ff8:	add	r0, sp, #40	; 0x28
    2ffc:	bl	2c1c <parse_integer_mapping>
    3000:	mov	r1, r0
    3004:	cmp	r0, #0
    3008:	str	r1, [sp, #16]
    300c:	beq	3024 <coda_ascii_cursor_read_uint64+0x260>
    3010:	b	3014 <coda_ascii_cursor_read_uint64+0x250>
    3014:	ldr	r0, [sp, #16]
    3018:	cmp	r0, #1
    301c:	beq	3028 <coda_ascii_cursor_read_uint64+0x264>
    3020:	b	3034 <coda_ascii_cursor_read_uint64+0x270>
    3024:	b	3040 <coda_ascii_cursor_read_uint64+0x27c>
    3028:	movw	r0, #0
    302c:	str	r0, [fp, #-12]
    3030:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    3034:	mvn	r0, #0
    3038:	str	r0, [fp, #-12]
    303c:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    3040:	b	3044 <coda_ascii_cursor_read_uint64+0x280>
    3044:	add	r0, sp, #40	; 0x28
    3048:	ldr	r1, [sp, #36]	; 0x24
    304c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3050:	ldr	r3, [sp, #32]
    3054:	bl	36c <coda_ascii_parse_uint64>
    3058:	cmp	r0, #0
    305c:	bge	306c <coda_ascii_cursor_read_uint64+0x2a8>
    3060:	mvn	r0, #0
    3064:	str	r0, [fp, #-12]
    3068:	b	3074 <coda_ascii_cursor_read_uint64+0x2b0>
    306c:	movw	r0, #0
    3070:	str	r0, [fp, #-12]
    3074:	ldr	r0, [fp, #-12]
    3078:	sub	sp, fp, #8
    307c:	pop	{r4, sl, fp, pc}

00003080 <coda_ascii_cursor_read_int8>:
    3080:	push	{fp, lr}
    3084:	mov	fp, sp
    3088:	sub	sp, sp, #40	; 0x28
    308c:	str	r0, [fp, #-8]
    3090:	str	r1, [fp, #-12]
    3094:	ldr	r0, [fp, #-8]
    3098:	add	r1, sp, #16
    309c:	bl	2960 <coda_ascii_cursor_read_int64>
    30a0:	cmp	r0, #0
    30a4:	beq	30b4 <coda_ascii_cursor_read_int8+0x34>
    30a8:	mvn	r0, #0
    30ac:	str	r0, [fp, #-4]
    30b0:	b	312c <coda_ascii_cursor_read_int8+0xac>
    30b4:	ldr	r0, [sp, #16]
    30b8:	ldr	r1, [sp, #20]
    30bc:	rsbs	r0, r0, #127	; 0x7f
    30c0:	rscs	r1, r1, #0
    30c4:	str	r0, [sp, #12]
    30c8:	str	r1, [sp, #8]
    30cc:	blt	30fc <coda_ascii_cursor_read_int8+0x7c>
    30d0:	b	30d4 <coda_ascii_cursor_read_int8+0x54>
    30d4:	ldr	r0, [sp, #16]
    30d8:	ldr	r1, [sp, #20]
    30dc:	mvn	r2, #128	; 0x80
    30e0:	subs	r0, r2, r0
    30e4:	mvn	r2, #0
    30e8:	sbcs	r1, r2, r1
    30ec:	str	r0, [sp, #4]
    30f0:	str	r1, [sp]
    30f4:	blt	3118 <coda_ascii_cursor_read_int8+0x98>
    30f8:	b	30fc <coda_ascii_cursor_read_int8+0x7c>
    30fc:	ldr	r0, [pc, #52]	; 3138 <coda_ascii_cursor_read_int8+0xb8>
    3100:	movw	r1, #0
    3104:	movt	r1, #0
    3108:	bl	0 <coda_set_error>
    310c:	mvn	r0, #0
    3110:	str	r0, [fp, #-4]
    3114:	b	312c <coda_ascii_cursor_read_int8+0xac>
    3118:	ldrb	r0, [sp, #16]
    311c:	ldr	r1, [fp, #-12]
    3120:	strb	r0, [r1]
    3124:	movw	r0, #0
    3128:	str	r0, [fp, #-4]
    312c:	ldr	r0, [fp, #-4]
    3130:	mov	sp, fp
    3134:	pop	{fp, pc}
    3138:	.word	0xfffffed4

0000313c <coda_ascii_cursor_read_uint8>:
    313c:	push	{fp, lr}
    3140:	mov	fp, sp
    3144:	sub	sp, sp, #32
    3148:	str	r0, [fp, #-8]
    314c:	str	r1, [fp, #-12]
    3150:	ldr	r0, [fp, #-8]
    3154:	add	r1, sp, #8
    3158:	bl	2dc4 <coda_ascii_cursor_read_uint64>
    315c:	cmp	r0, #0
    3160:	beq	3170 <coda_ascii_cursor_read_uint8+0x34>
    3164:	mvn	r0, #0
    3168:	str	r0, [fp, #-4]
    316c:	b	31c0 <coda_ascii_cursor_read_uint8+0x84>
    3170:	ldr	r0, [sp, #8]
    3174:	ldr	r1, [sp, #12]
    3178:	subs	r0, r0, #256	; 0x100
    317c:	sbcs	r1, r1, #0
    3180:	str	r0, [sp, #4]
    3184:	str	r1, [sp]
    3188:	bcc	31ac <coda_ascii_cursor_read_uint8+0x70>
    318c:	b	3190 <coda_ascii_cursor_read_uint8+0x54>
    3190:	ldr	r0, [pc, #52]	; 31cc <coda_ascii_cursor_read_uint8+0x90>
    3194:	movw	r1, #0
    3198:	movt	r1, #0
    319c:	bl	0 <coda_set_error>
    31a0:	mvn	r0, #0
    31a4:	str	r0, [fp, #-4]
    31a8:	b	31c0 <coda_ascii_cursor_read_uint8+0x84>
    31ac:	ldrb	r0, [sp, #8]
    31b0:	ldr	r1, [fp, #-12]
    31b4:	strb	r0, [r1]
    31b8:	movw	r0, #0
    31bc:	str	r0, [fp, #-4]
    31c0:	ldr	r0, [fp, #-4]
    31c4:	mov	sp, fp
    31c8:	pop	{fp, pc}
    31cc:	.word	0xfffffed4

000031d0 <coda_ascii_cursor_read_int16>:
    31d0:	push	{fp, lr}
    31d4:	mov	fp, sp
    31d8:	sub	sp, sp, #40	; 0x28
    31dc:	str	r0, [fp, #-8]
    31e0:	str	r1, [fp, #-12]
    31e4:	ldr	r0, [fp, #-8]
    31e8:	add	r1, sp, #16
    31ec:	bl	2960 <coda_ascii_cursor_read_int64>
    31f0:	cmp	r0, #0
    31f4:	beq	3204 <coda_ascii_cursor_read_int16+0x34>
    31f8:	mvn	r0, #0
    31fc:	str	r0, [fp, #-4]
    3200:	b	3280 <coda_ascii_cursor_read_int16+0xb0>
    3204:	ldr	r0, [sp, #16]
    3208:	ldr	r1, [sp, #20]
    320c:	movw	r2, #32767	; 0x7fff
    3210:	subs	r0, r2, r0
    3214:	rscs	r1, r1, #0
    3218:	str	r0, [sp, #12]
    321c:	str	r1, [sp, #8]
    3220:	blt	3250 <coda_ascii_cursor_read_int16+0x80>
    3224:	b	3228 <coda_ascii_cursor_read_int16+0x58>
    3228:	ldr	r0, [sp, #16]
    322c:	ldr	r1, [sp, #20]
    3230:	mvn	r2, #32768	; 0x8000
    3234:	subs	r0, r2, r0
    3238:	mvn	r2, #0
    323c:	sbcs	r1, r2, r1
    3240:	str	r0, [sp, #4]
    3244:	str	r1, [sp]
    3248:	blt	326c <coda_ascii_cursor_read_int16+0x9c>
    324c:	b	3250 <coda_ascii_cursor_read_int16+0x80>
    3250:	ldr	r0, [pc, #52]	; 328c <coda_ascii_cursor_read_int16+0xbc>
    3254:	movw	r1, #0
    3258:	movt	r1, #0
    325c:	bl	0 <coda_set_error>
    3260:	mvn	r0, #0
    3264:	str	r0, [fp, #-4]
    3268:	b	3280 <coda_ascii_cursor_read_int16+0xb0>
    326c:	ldrh	r0, [sp, #16]
    3270:	ldr	r1, [fp, #-12]
    3274:	strh	r0, [r1]
    3278:	movw	r0, #0
    327c:	str	r0, [fp, #-4]
    3280:	ldr	r0, [fp, #-4]
    3284:	mov	sp, fp
    3288:	pop	{fp, pc}
    328c:	.word	0xfffffed4

00003290 <coda_ascii_cursor_read_uint16>:
    3290:	push	{fp, lr}
    3294:	mov	fp, sp
    3298:	sub	sp, sp, #32
    329c:	str	r0, [fp, #-8]
    32a0:	str	r1, [fp, #-12]
    32a4:	ldr	r0, [fp, #-8]
    32a8:	add	r1, sp, #8
    32ac:	bl	2dc4 <coda_ascii_cursor_read_uint64>
    32b0:	cmp	r0, #0
    32b4:	beq	32c4 <coda_ascii_cursor_read_uint16+0x34>
    32b8:	mvn	r0, #0
    32bc:	str	r0, [fp, #-4]
    32c0:	b	3314 <coda_ascii_cursor_read_uint16+0x84>
    32c4:	ldr	r0, [sp, #8]
    32c8:	ldr	r1, [sp, #12]
    32cc:	subs	r0, r0, #65536	; 0x10000
    32d0:	sbcs	r1, r1, #0
    32d4:	str	r0, [sp, #4]
    32d8:	str	r1, [sp]
    32dc:	bcc	3300 <coda_ascii_cursor_read_uint16+0x70>
    32e0:	b	32e4 <coda_ascii_cursor_read_uint16+0x54>
    32e4:	ldr	r0, [pc, #52]	; 3320 <coda_ascii_cursor_read_uint16+0x90>
    32e8:	movw	r1, #0
    32ec:	movt	r1, #0
    32f0:	bl	0 <coda_set_error>
    32f4:	mvn	r0, #0
    32f8:	str	r0, [fp, #-4]
    32fc:	b	3314 <coda_ascii_cursor_read_uint16+0x84>
    3300:	ldrh	r0, [sp, #8]
    3304:	ldr	r1, [fp, #-12]
    3308:	strh	r0, [r1]
    330c:	movw	r0, #0
    3310:	str	r0, [fp, #-4]
    3314:	ldr	r0, [fp, #-4]
    3318:	mov	sp, fp
    331c:	pop	{fp, pc}
    3320:	.word	0xfffffed4

00003324 <coda_ascii_cursor_read_int32>:
    3324:	push	{fp, lr}
    3328:	mov	fp, sp
    332c:	sub	sp, sp, #40	; 0x28
    3330:	str	r0, [fp, #-8]
    3334:	str	r1, [fp, #-12]
    3338:	ldr	r0, [fp, #-8]
    333c:	add	r1, sp, #16
    3340:	bl	2960 <coda_ascii_cursor_read_int64>
    3344:	cmp	r0, #0
    3348:	beq	3358 <coda_ascii_cursor_read_int32+0x34>
    334c:	mvn	r0, #0
    3350:	str	r0, [fp, #-4]
    3354:	b	33d4 <coda_ascii_cursor_read_int32+0xb0>
    3358:	ldr	r0, [sp, #16]
    335c:	ldr	r1, [sp, #20]
    3360:	mvn	r2, #-2147483648	; 0x80000000
    3364:	subs	r0, r2, r0
    3368:	rscs	r1, r1, #0
    336c:	str	r0, [sp, #12]
    3370:	str	r1, [sp, #8]
    3374:	blt	33a4 <coda_ascii_cursor_read_int32+0x80>
    3378:	b	337c <coda_ascii_cursor_read_int32+0x58>
    337c:	ldr	r0, [sp, #16]
    3380:	ldr	r1, [sp, #20]
    3384:	mvn	r2, #-2147483648	; 0x80000000
    3388:	subs	r0, r2, r0
    338c:	mvn	r2, #0
    3390:	sbcs	r1, r2, r1
    3394:	str	r0, [sp, #4]
    3398:	str	r1, [sp]
    339c:	blt	33c0 <coda_ascii_cursor_read_int32+0x9c>
    33a0:	b	33a4 <coda_ascii_cursor_read_int32+0x80>
    33a4:	ldr	r0, [pc, #52]	; 33e0 <coda_ascii_cursor_read_int32+0xbc>
    33a8:	movw	r1, #0
    33ac:	movt	r1, #0
    33b0:	bl	0 <coda_set_error>
    33b4:	mvn	r0, #0
    33b8:	str	r0, [fp, #-4]
    33bc:	b	33d4 <coda_ascii_cursor_read_int32+0xb0>
    33c0:	ldr	r0, [sp, #16]
    33c4:	ldr	r1, [fp, #-12]
    33c8:	str	r0, [r1]
    33cc:	movw	r0, #0
    33d0:	str	r0, [fp, #-4]
    33d4:	ldr	r0, [fp, #-4]
    33d8:	mov	sp, fp
    33dc:	pop	{fp, pc}
    33e0:	.word	0xfffffed4

000033e4 <coda_ascii_cursor_read_uint32>:
    33e4:	push	{fp, lr}
    33e8:	mov	fp, sp
    33ec:	sub	sp, sp, #24
    33f0:	str	r0, [fp, #-8]
    33f4:	str	r1, [sp, #12]
    33f8:	ldr	r0, [fp, #-8]
    33fc:	mov	r1, sp
    3400:	bl	2dc4 <coda_ascii_cursor_read_uint64>
    3404:	cmp	r0, #0
    3408:	beq	3418 <coda_ascii_cursor_read_uint32+0x34>
    340c:	mvn	r0, #0
    3410:	str	r0, [fp, #-4]
    3414:	b	3458 <coda_ascii_cursor_read_uint32+0x74>
    3418:	ldr	r0, [sp, #4]
    341c:	cmp	r0, #0
    3420:	beq	3444 <coda_ascii_cursor_read_uint32+0x60>
    3424:	b	3428 <coda_ascii_cursor_read_uint32+0x44>
    3428:	ldr	r0, [pc, #52]	; 3464 <coda_ascii_cursor_read_uint32+0x80>
    342c:	movw	r1, #0
    3430:	movt	r1, #0
    3434:	bl	0 <coda_set_error>
    3438:	mvn	r0, #0
    343c:	str	r0, [fp, #-4]
    3440:	b	3458 <coda_ascii_cursor_read_uint32+0x74>
    3444:	ldr	r0, [sp]
    3448:	ldr	r1, [sp, #12]
    344c:	str	r0, [r1]
    3450:	movw	r0, #0
    3454:	str	r0, [fp, #-4]
    3458:	ldr	r0, [fp, #-4]
    345c:	mov	sp, fp
    3460:	pop	{fp, pc}
    3464:	.word	0xfffffed4

00003468 <coda_ascii_cursor_read_double>:
    3468:	push	{r4, sl, fp, lr}
    346c:	add	fp, sp, #8
    3470:	sub	sp, sp, #136	; 0x88
    3474:	str	r0, [fp, #-16]
    3478:	str	r1, [fp, #-20]	; 0xffffffec
    347c:	ldr	r0, [fp, #-16]
    3480:	add	r1, r0, #8
    3484:	ldr	r0, [r0, #4]
    3488:	sub	r0, r0, #1
    348c:	add	r0, r1, r0, lsl #4
    3490:	ldr	r0, [r0]
    3494:	ldr	r0, [r0]
    3498:	cmp	r0, #100	; 0x64
    349c:	bcs	34c0 <coda_ascii_cursor_read_double+0x58>
    34a0:	ldr	r0, [fp, #-16]
    34a4:	add	r1, r0, #8
    34a8:	ldr	r0, [r0, #4]
    34ac:	sub	r0, r0, #1
    34b0:	add	r0, r1, r0, lsl #4
    34b4:	ldr	r0, [r0]
    34b8:	str	r0, [sp, #28]
    34bc:	b	34e0 <coda_ascii_cursor_read_double+0x78>
    34c0:	ldr	r0, [fp, #-16]
    34c4:	add	r1, r0, #8
    34c8:	ldr	r0, [r0, #4]
    34cc:	sub	r0, r0, #1
    34d0:	add	r0, r1, r0, lsl #4
    34d4:	ldr	r0, [r0]
    34d8:	ldr	r0, [r0, #4]
    34dc:	str	r0, [sp, #28]
    34e0:	ldr	r0, [sp, #28]
    34e4:	str	r0, [fp, #-24]	; 0xffffffe8
    34e8:	ldr	r0, [fp, #-16]
    34ec:	ldr	r1, [r0, #4]
    34f0:	ldr	r1, [r0, r1, lsl #4]!
    34f4:	ldr	r0, [r0, #4]
    34f8:	str	r0, [fp, #-28]	; 0xffffffe4
    34fc:	str	r1, [fp, #-32]	; 0xffffffe0
    3500:	mov	r0, #1
    3504:	str	r0, [sp, #32]
    3508:	ldr	r0, [fp, #-16]
    350c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3510:	ldr	r2, [r1, #24]
    3514:	ldr	r3, [r1, #28]
    3518:	sub	r1, fp, #40	; 0x28
    351c:	bl	2028 <get_bit_size_boundary>
    3520:	cmp	r0, #0
    3524:	beq	3534 <coda_ascii_cursor_read_double+0xcc>
    3528:	mvn	r0, #0
    352c:	str	r0, [fp, #-12]
    3530:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    3534:	ldrb	r0, [fp, #-32]	; 0xffffffe0
    3538:	tst	r0, #7
    353c:	beq	3560 <coda_ascii_cursor_read_double+0xf8>
    3540:	b	3544 <coda_ascii_cursor_read_double+0xdc>
    3544:	mvn	r0, #21
    3548:	movw	r1, #0
    354c:	movt	r1, #0
    3550:	bl	0 <coda_set_error>
    3554:	mvn	r0, #0
    3558:	str	r0, [fp, #-12]
    355c:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    3560:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3564:	ldr	r0, [r0, #28]
    3568:	cmp	r0, #0
    356c:	blt	35c8 <coda_ascii_cursor_read_double+0x160>
    3570:	b	3574 <coda_ascii_cursor_read_double+0x10c>
    3574:	mov	r0, #0
    3578:	str	r0, [sp, #32]
    357c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3580:	ldr	r1, [r0, #24]
    3584:	ldr	r0, [r0, #28]
    3588:	lsr	r1, r1, #3
    358c:	orr	r0, r1, r0, lsl #29
    3590:	str	r0, [sp, #36]	; 0x24
    3594:	ldr	r0, [sp, #36]	; 0x24
    3598:	cmp	r0, #64	; 0x40
    359c:	bgt	35a4 <coda_ascii_cursor_read_double+0x13c>
    35a0:	b	35c4 <coda_ascii_cursor_read_double+0x15c>
    35a4:	movw	r0, #0
    35a8:	movt	r0, #0
    35ac:	movw	r1, #0
    35b0:	movt	r1, #0
    35b4:	movw	r2, #1306	; 0x51a
    35b8:	movw	r3, #0
    35bc:	movt	r3, #0
    35c0:	bl	0 <__assert_fail>
    35c4:	b	3618 <coda_ascii_cursor_read_double+0x1b0>
    35c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    35cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    35d0:	lsr	r0, r0, #3
    35d4:	orr	r0, r0, r1, lsl #29
    35d8:	rsbs	r0, r0, #63	; 0x3f
    35dc:	mov	r2, #0
    35e0:	sbcs	r1, r2, r1, asr #3
    35e4:	str	r0, [sp, #24]
    35e8:	str	r1, [sp, #20]
    35ec:	blt	360c <coda_ascii_cursor_read_double+0x1a4>
    35f0:	b	35f4 <coda_ascii_cursor_read_double+0x18c>
    35f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    35f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    35fc:	lsr	r0, r0, #3
    3600:	orr	r0, r0, r1, lsl #29
    3604:	str	r0, [sp, #36]	; 0x24
    3608:	b	3614 <coda_ascii_cursor_read_double+0x1ac>
    360c:	movw	r0, #64	; 0x40
    3610:	str	r0, [sp, #36]	; 0x24
    3614:	b	3618 <coda_ascii_cursor_read_double+0x1b0>
    3618:	add	r0, sp, #40	; 0x28
    361c:	ldr	r1, [fp, #-16]
    3620:	ldr	r1, [r1]
    3624:	ldr	r2, [fp, #-32]	; 0xffffffe0
    3628:	ldr	r3, [fp, #-28]	; 0xffffffe4
    362c:	lsr	r2, r2, #3
    3630:	orr	r2, r2, r3, lsl #29
    3634:	asr	r3, r3, #3
    3638:	ldr	ip, [sp, #36]	; 0x24
    363c:	asr	lr, ip, #31
    3640:	mov	r4, sp
    3644:	str	r0, [r4, #8]
    3648:	str	lr, [r4, #4]
    364c:	str	ip, [r4]
    3650:	mov	r0, r1
    3654:	bl	2548 <read_bytes_in_bounds>
    3658:	cmp	r0, #0
    365c:	beq	366c <coda_ascii_cursor_read_double+0x204>
    3660:	mvn	r0, #0
    3664:	str	r0, [fp, #-12]
    3668:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    366c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3670:	ldr	r0, [r0, #52]	; 0x34
    3674:	movw	r1, #0
    3678:	cmp	r0, r1
    367c:	beq	36e8 <coda_ascii_cursor_read_double+0x280>
    3680:	ldr	r1, [sp, #36]	; 0x24
    3684:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3688:	ldr	r2, [r0, #52]	; 0x34
    368c:	ldr	r3, [sp, #32]
    3690:	ldr	r0, [fp, #-20]	; 0xffffffec
    3694:	mov	ip, sp
    3698:	str	r0, [ip]
    369c:	add	r0, sp, #40	; 0x28
    36a0:	bl	3724 <parse_float_mapping>
    36a4:	mov	r1, r0
    36a8:	cmp	r0, #0
    36ac:	str	r1, [sp, #16]
    36b0:	beq	36c8 <coda_ascii_cursor_read_double+0x260>
    36b4:	b	36b8 <coda_ascii_cursor_read_double+0x250>
    36b8:	ldr	r0, [sp, #16]
    36bc:	cmp	r0, #1
    36c0:	beq	36cc <coda_ascii_cursor_read_double+0x264>
    36c4:	b	36d8 <coda_ascii_cursor_read_double+0x270>
    36c8:	b	36e4 <coda_ascii_cursor_read_double+0x27c>
    36cc:	movw	r0, #0
    36d0:	str	r0, [fp, #-12]
    36d4:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    36d8:	mvn	r0, #0
    36dc:	str	r0, [fp, #-12]
    36e0:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    36e4:	b	36e8 <coda_ascii_cursor_read_double+0x280>
    36e8:	add	r0, sp, #40	; 0x28
    36ec:	ldr	r1, [sp, #36]	; 0x24
    36f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    36f4:	ldr	r3, [sp, #32]
    36f8:	bl	680 <coda_ascii_parse_double>
    36fc:	cmp	r0, #0
    3700:	bge	3710 <coda_ascii_cursor_read_double+0x2a8>
    3704:	mvn	r0, #0
    3708:	str	r0, [fp, #-12]
    370c:	b	3718 <coda_ascii_cursor_read_double+0x2b0>
    3710:	movw	r0, #0
    3714:	str	r0, [fp, #-12]
    3718:	ldr	r0, [fp, #-12]
    371c:	sub	sp, fp, #8
    3720:	pop	{r4, sl, fp, pc}

00003724 <parse_float_mapping>:
    3724:	push	{fp, lr}
    3728:	mov	fp, sp
    372c:	sub	sp, sp, #32
    3730:	ldr	ip, [fp, #8]
    3734:	str	r0, [fp, #-8]
    3738:	str	r1, [fp, #-12]
    373c:	str	r2, [sp, #16]
    3740:	str	r3, [sp, #12]
    3744:	movw	r0, #0
    3748:	str	r0, [sp, #8]
    374c:	str	ip, [sp, #4]
    3750:	ldr	r0, [sp, #8]
    3754:	ldr	r1, [sp, #16]
    3758:	ldr	r1, [r1, #8]
    375c:	cmp	r0, r1
    3760:	bge	38b0 <parse_float_mapping+0x18c>
    3764:	ldr	r0, [sp, #16]
    3768:	ldr	r0, [r0, #12]
    376c:	ldr	r1, [sp, #8]
    3770:	add	r0, r0, r1, lsl #2
    3774:	ldr	r0, [r0]
    3778:	ldr	r0, [r0]
    377c:	cmp	r0, #0
    3780:	bne	37c0 <parse_float_mapping+0x9c>
    3784:	ldr	r0, [fp, #-12]
    3788:	cmp	r0, #0
    378c:	bne	37bc <parse_float_mapping+0x98>
    3790:	ldr	r0, [sp, #16]
    3794:	ldr	r0, [r0, #12]
    3798:	ldr	r1, [sp, #8]
    379c:	add	r0, r0, r1, lsl #2
    37a0:	ldr	r0, [r0]
    37a4:	vldr	d16, [r0, #8]
    37a8:	ldr	r0, [fp, #8]
    37ac:	vstr	d16, [r0]
    37b0:	movw	r0, #1
    37b4:	str	r0, [fp, #-4]
    37b8:	b	38b8 <parse_float_mapping+0x194>
    37bc:	b	389c <parse_float_mapping+0x178>
    37c0:	ldr	r0, [sp, #16]
    37c4:	ldr	r0, [r0, #12]
    37c8:	ldr	r1, [sp, #8]
    37cc:	add	r0, r0, r1, lsl #2
    37d0:	ldr	r0, [r0]
    37d4:	ldr	r0, [r0]
    37d8:	ldr	r1, [fp, #-12]
    37dc:	cmp	r0, r1
    37e0:	bgt	3898 <parse_float_mapping+0x174>
    37e4:	ldr	r0, [sp, #16]
    37e8:	ldr	r0, [r0, #12]
    37ec:	ldr	r1, [sp, #8]
    37f0:	ldr	r1, [r0, r1, lsl #2]!
    37f4:	ldr	r1, [r1, #4]
    37f8:	ldr	r2, [fp, #-8]
    37fc:	ldr	r0, [r0]
    3800:	ldr	r0, [r0]
    3804:	str	r0, [sp]
    3808:	mov	r0, r1
    380c:	mov	r1, r2
    3810:	ldr	r2, [sp]
    3814:	bl	0 <memcmp>
    3818:	cmp	r0, #0
    381c:	bne	3898 <parse_float_mapping+0x174>
    3820:	ldr	r0, [sp, #12]
    3824:	cmp	r0, #0
    3828:	bne	386c <parse_float_mapping+0x148>
    382c:	ldr	r0, [sp, #16]
    3830:	ldr	r0, [r0, #12]
    3834:	ldr	r1, [sp, #8]
    3838:	add	r0, r0, r1, lsl #2
    383c:	ldr	r0, [r0]
    3840:	ldr	r0, [r0]
    3844:	ldr	r1, [fp, #-12]
    3848:	cmp	r0, r1
    384c:	beq	386c <parse_float_mapping+0x148>
    3850:	mvn	r0, #102	; 0x66
    3854:	movw	r1, #0
    3858:	movt	r1, #0
    385c:	bl	0 <coda_set_error>
    3860:	mvn	r0, #0
    3864:	str	r0, [fp, #-4]
    3868:	b	38b8 <parse_float_mapping+0x194>
    386c:	ldr	r0, [sp, #16]
    3870:	ldr	r0, [r0, #12]
    3874:	ldr	r1, [sp, #8]
    3878:	add	r0, r0, r1, lsl #2
    387c:	ldr	r0, [r0]
    3880:	vldr	d16, [r0, #8]
    3884:	ldr	r0, [fp, #8]
    3888:	vstr	d16, [r0]
    388c:	movw	r0, #1
    3890:	str	r0, [fp, #-4]
    3894:	b	38b8 <parse_float_mapping+0x194>
    3898:	b	389c <parse_float_mapping+0x178>
    389c:	b	38a0 <parse_float_mapping+0x17c>
    38a0:	ldr	r0, [sp, #8]
    38a4:	add	r0, r0, #1
    38a8:	str	r0, [sp, #8]
    38ac:	b	3750 <parse_float_mapping+0x2c>
    38b0:	movw	r0, #0
    38b4:	str	r0, [fp, #-4]
    38b8:	ldr	r0, [fp, #-4]
    38bc:	mov	sp, fp
    38c0:	pop	{fp, pc}

000038c4 <coda_ascii_cursor_read_float>:
    38c4:	push	{fp, lr}
    38c8:	mov	fp, sp
    38cc:	sub	sp, sp, #24
    38d0:	str	r0, [fp, #-8]
    38d4:	str	r1, [sp, #12]
    38d8:	ldr	r0, [fp, #-8]
    38dc:	mov	r1, sp
    38e0:	bl	3468 <coda_ascii_cursor_read_double>
    38e4:	cmp	r0, #0
    38e8:	beq	38f8 <coda_ascii_cursor_read_float+0x34>
    38ec:	mvn	r0, #0
    38f0:	str	r0, [fp, #-4]
    38f4:	b	3910 <coda_ascii_cursor_read_float+0x4c>
    38f8:	vldr	d16, [sp]
    38fc:	vcvt.f32.f64	s0, d16
    3900:	ldr	r0, [sp, #12]
    3904:	vstr	s0, [r0]
    3908:	movw	r0, #0
    390c:	str	r0, [fp, #-4]
    3910:	ldr	r0, [fp, #-4]
    3914:	mov	sp, fp
    3918:	pop	{fp, pc}

0000391c <coda_ascii_cursor_read_char>:
    391c:	push	{fp, lr}
    3920:	mov	fp, sp
    3924:	sub	sp, sp, #48	; 0x30
    3928:	str	r0, [fp, #-8]
    392c:	str	r1, [fp, #-12]
    3930:	ldr	r0, [fp, #-8]
    3934:	add	r1, sp, #16
    3938:	mov	r2, #8
    393c:	mov	r3, #0
    3940:	bl	2028 <get_bit_size_boundary>
    3944:	cmp	r0, #0
    3948:	beq	3958 <coda_ascii_cursor_read_char+0x3c>
    394c:	mvn	r0, #0
    3950:	str	r0, [fp, #-4]
    3954:	b	39e0 <coda_ascii_cursor_read_char+0xc4>
    3958:	ldr	r0, [fp, #-8]
    395c:	ldr	r1, [r0, #4]
    3960:	ldr	r1, [r0, r1, lsl #4]!
    3964:	ldr	r0, [r0, #4]
    3968:	str	r0, [sp, #28]
    396c:	str	r1, [sp, #24]
    3970:	ldrb	r0, [sp, #24]
    3974:	tst	r0, #7
    3978:	beq	399c <coda_ascii_cursor_read_char+0x80>
    397c:	b	3980 <coda_ascii_cursor_read_char+0x64>
    3980:	ldr	r0, [pc, #100]	; 39ec <coda_ascii_cursor_read_char+0xd0>
    3984:	movw	r1, #0
    3988:	movt	r1, #0
    398c:	bl	0 <coda_set_error>
    3990:	mvn	r0, #0
    3994:	str	r0, [fp, #-4]
    3998:	b	39e0 <coda_ascii_cursor_read_char+0xc4>
    399c:	ldr	r0, [fp, #-8]
    39a0:	ldr	r0, [r0]
    39a4:	ldr	r1, [sp, #24]
    39a8:	ldr	r2, [sp, #28]
    39ac:	lsr	r1, r1, #3
    39b0:	orr	r1, r1, r2, lsl #29
    39b4:	asr	r3, r2, #3
    39b8:	ldr	r2, [fp, #-12]
    39bc:	mov	ip, sp
    39c0:	str	r2, [ip, #8]
    39c4:	mov	r2, #0
    39c8:	str	r2, [ip, #4]
    39cc:	mov	r2, #1
    39d0:	str	r2, [ip]
    39d4:	mov	r2, r1
    39d8:	bl	2548 <read_bytes_in_bounds>
    39dc:	str	r0, [fp, #-4]
    39e0:	ldr	r0, [fp, #-4]
    39e4:	mov	sp, fp
    39e8:	pop	{fp, pc}
    39ec:	.word	0xfffffed4

000039f0 <coda_ascii_cursor_read_string>:
    39f0:	push	{r4, sl, fp, lr}
    39f4:	add	fp, sp, #8
    39f8:	sub	sp, sp, #88	; 0x58
    39fc:	str	r0, [fp, #-16]
    3a00:	str	r1, [fp, #-20]	; 0xffffffec
    3a04:	str	r2, [fp, #-24]	; 0xffffffe8
    3a08:	ldr	r0, [fp, #-16]
    3a0c:	add	r1, r0, #8
    3a10:	ldr	r0, [r0, #4]
    3a14:	sub	r0, r0, #1
    3a18:	add	r0, r1, r0, lsl #4
    3a1c:	ldr	r0, [r0]
    3a20:	ldr	r0, [r0]
    3a24:	cmp	r0, #100	; 0x64
    3a28:	bcs	3a4c <coda_ascii_cursor_read_string+0x5c>
    3a2c:	ldr	r0, [fp, #-16]
    3a30:	add	r1, r0, #8
    3a34:	ldr	r0, [r0, #4]
    3a38:	sub	r0, r0, #1
    3a3c:	add	r0, r1, r0, lsl #4
    3a40:	ldr	r0, [r0]
    3a44:	str	r0, [sp, #28]
    3a48:	b	3a6c <coda_ascii_cursor_read_string+0x7c>
    3a4c:	ldr	r0, [fp, #-16]
    3a50:	add	r1, r0, #8
    3a54:	ldr	r0, [r0, #4]
    3a58:	sub	r0, r0, #1
    3a5c:	add	r0, r1, r0, lsl #4
    3a60:	ldr	r0, [r0]
    3a64:	ldr	r0, [r0, #4]
    3a68:	str	r0, [sp, #28]
    3a6c:	ldr	r0, [sp, #28]
    3a70:	str	r0, [fp, #-28]	; 0xffffffe4
    3a74:	ldr	r0, [fp, #-16]
    3a78:	ldr	r1, [r0, #4]
    3a7c:	ldr	r1, [r0, r1, lsl #4]!
    3a80:	ldr	r0, [r0, #4]
    3a84:	str	r0, [fp, #-36]	; 0xffffffdc
    3a88:	str	r1, [fp, #-40]	; 0xffffffd8
    3a8c:	mov	r0, #0
    3a90:	str	r0, [sp, #52]	; 0x34
    3a94:	str	r0, [sp, #48]	; 0x30
    3a98:	ldrb	r0, [fp, #-40]	; 0xffffffd8
    3a9c:	tst	r0, #7
    3aa0:	beq	3ac4 <coda_ascii_cursor_read_string+0xd4>
    3aa4:	b	3aa8 <coda_ascii_cursor_read_string+0xb8>
    3aa8:	ldr	r0, [pc, #460]	; 3c7c <coda_ascii_cursor_read_string+0x28c>
    3aac:	movw	r1, #0
    3ab0:	movt	r1, #0
    3ab4:	bl	0 <coda_set_error>
    3ab8:	mvn	r0, #0
    3abc:	str	r0, [fp, #-12]
    3ac0:	b	3c70 <coda_ascii_cursor_read_string+0x280>
    3ac4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3ac8:	ldr	r0, [r0, #28]
    3acc:	cmn	r0, #1
    3ad0:	bgt	3b44 <coda_ascii_cursor_read_string+0x154>
    3ad4:	b	3ad8 <coda_ascii_cursor_read_string+0xe8>
    3ad8:	ldr	r0, [fp, #-16]
    3adc:	add	r1, sp, #40	; 0x28
    3ae0:	bl	1084 <coda_ascii_cursor_get_bit_size>
    3ae4:	cmp	r0, #0
    3ae8:	beq	3af8 <coda_ascii_cursor_read_string+0x108>
    3aec:	mvn	r0, #0
    3af0:	str	r0, [fp, #-12]
    3af4:	b	3c70 <coda_ascii_cursor_read_string+0x280>
    3af8:	ldrb	r0, [sp, #40]	; 0x28
    3afc:	tst	r0, #7
    3b00:	beq	3b24 <coda_ascii_cursor_read_string+0x134>
    3b04:	b	3b08 <coda_ascii_cursor_read_string+0x118>
    3b08:	ldr	r0, [pc, #364]	; 3c7c <coda_ascii_cursor_read_string+0x28c>
    3b0c:	movw	r1, #0
    3b10:	movt	r1, #0
    3b14:	bl	0 <coda_set_error>
    3b18:	mvn	r0, #0
    3b1c:	str	r0, [fp, #-12]
    3b20:	b	3c70 <coda_ascii_cursor_read_string+0x280>
    3b24:	ldr	r0, [sp, #40]	; 0x28
    3b28:	ldr	r1, [sp, #44]	; 0x2c
    3b2c:	lsr	r0, r0, #3
    3b30:	orr	r0, r0, r1, lsl #29
    3b34:	asr	r1, r1, #3
    3b38:	str	r1, [sp, #52]	; 0x34
    3b3c:	str	r0, [sp, #48]	; 0x30
    3b40:	b	3b90 <coda_ascii_cursor_read_string+0x1a0>
    3b44:	ldr	r0, [fp, #-16]
    3b48:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3b4c:	ldr	r2, [r1, #24]
    3b50:	ldr	r3, [r1, #28]
    3b54:	add	r1, sp, #32
    3b58:	bl	2028 <get_bit_size_boundary>
    3b5c:	cmp	r0, #0
    3b60:	beq	3b70 <coda_ascii_cursor_read_string+0x180>
    3b64:	mvn	r0, #0
    3b68:	str	r0, [fp, #-12]
    3b6c:	b	3c70 <coda_ascii_cursor_read_string+0x280>
    3b70:	ldr	r0, [fp, #-28]	; 0xffffffe4
    3b74:	ldr	r1, [r0, #24]
    3b78:	ldr	r0, [r0, #28]
    3b7c:	lsr	r1, r1, #3
    3b80:	orr	r1, r1, r0, lsl #29
    3b84:	asr	r0, r0, #3
    3b88:	str	r0, [sp, #52]	; 0x34
    3b8c:	str	r1, [sp, #48]	; 0x30
    3b90:	ldr	r0, [sp, #48]	; 0x30
    3b94:	ldr	r1, [sp, #52]	; 0x34
    3b98:	adds	r0, r0, #1
    3b9c:	adc	r1, r1, #0
    3ba0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3ba4:	subs	r0, r2, r0
    3ba8:	rscs	r1, r1, r2, asr #31
    3bac:	str	r0, [sp, #24]
    3bb0:	str	r1, [sp, #20]
    3bb4:	bge	3bd0 <coda_ascii_cursor_read_string+0x1e0>
    3bb8:	b	3bbc <coda_ascii_cursor_read_string+0x1cc>
    3bbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3bc0:	sub	r0, r0, #1
    3bc4:	asr	r1, r0, #31
    3bc8:	str	r0, [sp, #48]	; 0x30
    3bcc:	str	r1, [sp, #52]	; 0x34
    3bd0:	ldr	r0, [sp, #48]	; 0x30
    3bd4:	ldr	r1, [sp, #52]	; 0x34
    3bd8:	subs	r0, r0, #1
    3bdc:	sbcs	r1, r1, #0
    3be0:	str	r0, [sp, #16]
    3be4:	str	r1, [sp, #12]
    3be8:	blt	3c5c <coda_ascii_cursor_read_string+0x26c>
    3bec:	b	3bf0 <coda_ascii_cursor_read_string+0x200>
    3bf0:	ldr	r0, [fp, #-16]
    3bf4:	ldr	r0, [r0]
    3bf8:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3bfc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3c00:	lsr	r1, r1, #3
    3c04:	orr	r1, r1, r2, lsl #29
    3c08:	asr	r3, r2, #3
    3c0c:	ldr	r2, [sp, #48]	; 0x30
    3c10:	ldr	ip, [sp, #52]	; 0x34
    3c14:	ldr	lr, [fp, #-20]	; 0xffffffec
    3c18:	mov	r4, sp
    3c1c:	str	lr, [r4, #8]
    3c20:	str	ip, [r4, #4]
    3c24:	str	r2, [r4]
    3c28:	mov	r2, r1
    3c2c:	bl	3c80 <read_bytes>
    3c30:	cmp	r0, #0
    3c34:	beq	3c44 <coda_ascii_cursor_read_string+0x254>
    3c38:	mvn	r0, #0
    3c3c:	str	r0, [fp, #-12]
    3c40:	b	3c70 <coda_ascii_cursor_read_string+0x280>
    3c44:	ldr	r0, [fp, #-20]	; 0xffffffec
    3c48:	ldr	r1, [sp, #48]	; 0x30
    3c4c:	add	r0, r0, r1
    3c50:	movw	r1, #0
    3c54:	strb	r1, [r0]
    3c58:	b	3c68 <coda_ascii_cursor_read_string+0x278>
    3c5c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3c60:	movw	r1, #0
    3c64:	strb	r1, [r0]
    3c68:	movw	r0, #0
    3c6c:	str	r0, [fp, #-12]
    3c70:	ldr	r0, [fp, #-12]
    3c74:	sub	sp, fp, #8
    3c78:	pop	{r4, sl, fp, pc}
    3c7c:	.word	0xfffffed4

00003c80 <read_bytes>:
    3c80:	push	{fp, lr}
    3c84:	mov	fp, sp
    3c88:	sub	sp, sp, #128	; 0x80
    3c8c:	ldr	r1, [fp, #12]
    3c90:	ldr	ip, [fp, #8]
    3c94:	ldr	lr, [fp, #16]
    3c98:	str	r0, [fp, #-8]
    3c9c:	str	r3, [fp, #-12]
    3ca0:	str	r2, [fp, #-16]
    3ca4:	str	r1, [fp, #-20]	; 0xffffffec
    3ca8:	str	ip, [fp, #-24]	; 0xffffffe8
    3cac:	ldr	r0, [fp, #-8]
    3cb0:	ldr	r0, [r0, #48]	; 0x30
    3cb4:	movw	r1, #0
    3cb8:	cmp	r0, r1
    3cbc:	str	lr, [sp, #36]	; 0x24
    3cc0:	beq	3de0 <read_bytes+0x160>
    3cc4:	ldr	r0, [fp, #-16]
    3cc8:	ldr	r1, [fp, #-12]
    3ccc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
    3cd4:	adds	r0, r0, r2
    3cd8:	adc	r1, r1, r3
    3cdc:	ldr	r2, [fp, #-8]
    3ce0:	ldr	r3, [r2, #40]	; 0x28
    3ce4:	ldr	r2, [r2, #44]	; 0x2c
    3ce8:	subs	r0, r3, r0
    3cec:	sbcs	r1, r2, r1
    3cf0:	str	r0, [sp, #32]
    3cf4:	str	r1, [sp, #28]
    3cf8:	bcs	3dc0 <read_bytes+0x140>
    3cfc:	b	3d00 <read_bytes+0x80>
    3d00:	ldr	r0, [fp, #-8]
    3d04:	ldr	r0, [r0, #16]
    3d08:	cmp	r0, #0
    3d0c:	beq	3d20 <read_bytes+0xa0>
    3d10:	ldr	r0, [fp, #-8]
    3d14:	ldr	r0, [r0, #16]
    3d18:	cmp	r0, #1
    3d1c:	bne	3d3c <read_bytes+0xbc>
    3d20:	mvn	r0, #300	; 0x12c
    3d24:	movw	r1, #0
    3d28:	movt	r1, #0
    3d2c:	bl	0 <coda_set_error>
    3d30:	mvn	r0, #0
    3d34:	str	r0, [fp, #-4]
    3d38:	b	3edc <read_bytes+0x25c>
    3d3c:	add	r2, sp, #41	; 0x29
    3d40:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3d44:	ldr	r1, [fp, #-20]	; 0xffffffec
    3d48:	sub	r3, fp, #45	; 0x2d
    3d4c:	str	r2, [sp, #24]
    3d50:	mov	r2, r3
    3d54:	bl	0 <coda_str64>
    3d58:	ldr	r0, [fp, #-16]
    3d5c:	ldr	r1, [fp, #-12]
    3d60:	add	r2, sp, #62	; 0x3e
    3d64:	bl	0 <coda_str64>
    3d68:	ldr	r0, [fp, #-8]
    3d6c:	ldr	r1, [r0, #40]	; 0x28
    3d70:	ldr	r0, [r0, #44]	; 0x2c
    3d74:	str	r0, [sp, #20]
    3d78:	mov	r0, r1
    3d7c:	ldr	r1, [sp, #20]
    3d80:	ldr	r2, [sp, #24]
    3d84:	bl	0 <coda_str64>
    3d88:	add	r0, sp, #41	; 0x29
    3d8c:	add	r3, sp, #62	; 0x3e
    3d90:	sub	r2, fp, #45	; 0x2d
    3d94:	mvn	r1, #300	; 0x12c
    3d98:	str	r0, [sp, #16]
    3d9c:	mov	r0, r1
    3da0:	movw	r1, #0
    3da4:	movt	r1, #0
    3da8:	ldr	lr, [sp, #16]
    3dac:	str	lr, [sp]
    3db0:	bl	0 <coda_set_error>
    3db4:	mvn	r0, #0
    3db8:	str	r0, [fp, #-4]
    3dbc:	b	3edc <read_bytes+0x25c>
    3dc0:	ldr	r0, [fp, #16]
    3dc4:	ldr	r1, [fp, #-8]
    3dc8:	ldr	r1, [r1, #48]	; 0x30
    3dcc:	ldr	r2, [fp, #-16]
    3dd0:	add	r1, r1, r2
    3dd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3dd8:	bl	0 <memcpy>
    3ddc:	b	3ed4 <read_bytes+0x254>
    3de0:	ldr	r0, [fp, #-8]
    3de4:	ldr	r0, [r0, #16]
    3de8:	cmp	r0, #0
    3dec:	beq	3e00 <read_bytes+0x180>
    3df0:	ldr	r0, [fp, #-8]
    3df4:	ldr	r0, [r0, #16]
    3df8:	cmp	r0, #1
    3dfc:	bne	3e04 <read_bytes+0x184>
    3e00:	b	3e24 <read_bytes+0x1a4>
    3e04:	movw	r0, #0
    3e08:	movt	r0, #0
    3e0c:	movw	r1, #0
    3e10:	movt	r1, #0
    3e14:	movw	r2, #83	; 0x53
    3e18:	movw	r3, #0
    3e1c:	movt	r3, #0
    3e20:	bl	0 <__assert_fail>
    3e24:	ldr	r0, [fp, #-16]
    3e28:	ldr	r1, [fp, #-12]
    3e2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3e30:	ldr	r3, [fp, #-20]	; 0xffffffec
    3e34:	adds	r0, r0, r2
    3e38:	adc	r1, r1, r3
    3e3c:	ldr	r2, [fp, #-8]
    3e40:	ldr	r3, [r2, #8]
    3e44:	ldr	r2, [r2, #12]
    3e48:	subs	r0, r3, r0
    3e4c:	sbcs	r1, r2, r1
    3e50:	str	r0, [sp, #12]
    3e54:	str	r1, [sp, #8]
    3e58:	bcs	3e7c <read_bytes+0x1fc>
    3e5c:	b	3e60 <read_bytes+0x1e0>
    3e60:	mvn	r0, #300	; 0x12c
    3e64:	movw	r1, #0
    3e68:	movt	r1, #0
    3e6c:	bl	0 <coda_set_error>
    3e70:	mvn	r0, #0
    3e74:	str	r0, [fp, #-4]
    3e78:	b	3edc <read_bytes+0x25c>
    3e7c:	ldr	r0, [fp, #-8]
    3e80:	ldr	r0, [r0, #56]	; 0x38
    3e84:	ldr	r1, [fp, #16]
    3e88:	ldr	r2, [fp, #-24]	; 0xffffffe8
    3e8c:	ldr	r3, [fp, #-16]
    3e90:	bl	0 <pread>
    3e94:	cmp	r0, #0
    3e98:	bge	3ed0 <read_bytes+0x250>
    3e9c:	bl	0 <__errno_location>
    3ea0:	ldr	r0, [r0]
    3ea4:	bl	0 <strerror>
    3ea8:	mvn	lr, #21
    3eac:	str	r0, [sp, #4]
    3eb0:	mov	r0, lr
    3eb4:	movw	r1, #0
    3eb8:	movt	r1, #0
    3ebc:	ldr	r2, [sp, #4]
    3ec0:	bl	0 <coda_set_error>
    3ec4:	mvn	r0, #0
    3ec8:	str	r0, [fp, #-4]
    3ecc:	b	3edc <read_bytes+0x25c>
    3ed0:	b	3ed4 <read_bytes+0x254>
    3ed4:	movw	r0, #0
    3ed8:	str	r0, [fp, #-4]
    3edc:	ldr	r0, [fp, #-4]
    3ee0:	mov	sp, fp
    3ee4:	pop	{fp, pc}

00003ee8 <coda_ascii_cursor_read_bits>:
    3ee8:	push	{r4, sl, fp, lr}
    3eec:	add	fp, sp, #8
    3ef0:	sub	sp, sp, #48	; 0x30
    3ef4:	ldr	ip, [fp, #12]
    3ef8:	ldr	lr, [fp, #8]
    3efc:	str	r0, [fp, #-16]
    3f00:	str	r1, [fp, #-20]	; 0xffffffec
    3f04:	str	r3, [sp, #28]
    3f08:	str	r2, [sp, #24]
    3f0c:	str	ip, [sp, #20]
    3f10:	str	lr, [sp, #16]
    3f14:	ldrb	r0, [sp, #16]
    3f18:	tst	r0, #7
    3f1c:	beq	3f40 <coda_ascii_cursor_read_bits+0x58>
    3f20:	b	3f24 <coda_ascii_cursor_read_bits+0x3c>
    3f24:	mvn	r0, #99	; 0x63
    3f28:	movw	r1, #0
    3f2c:	movt	r1, #0
    3f30:	bl	0 <coda_set_error>
    3f34:	mvn	r0, #0
    3f38:	str	r0, [fp, #-12]
    3f3c:	b	3fe0 <coda_ascii_cursor_read_bits+0xf8>
    3f40:	ldr	r0, [fp, #-16]
    3f44:	ldr	r1, [r0, #4]
    3f48:	ldr	r0, [r0, r1, lsl #4]
    3f4c:	ldr	r1, [sp, #24]
    3f50:	add	r0, r0, r1
    3f54:	tst	r0, #7
    3f58:	beq	3f7c <coda_ascii_cursor_read_bits+0x94>
    3f5c:	b	3f60 <coda_ascii_cursor_read_bits+0x78>
    3f60:	ldr	r0, [pc, #132]	; 3fec <coda_ascii_cursor_read_bits+0x104>
    3f64:	movw	r1, #0
    3f68:	movt	r1, #0
    3f6c:	bl	0 <coda_set_error>
    3f70:	mvn	r0, #0
    3f74:	str	r0, [fp, #-12]
    3f78:	b	3fe0 <coda_ascii_cursor_read_bits+0xf8>
    3f7c:	ldr	r0, [fp, #-16]
    3f80:	ldr	r1, [r0]
    3f84:	ldr	r2, [r0, #4]
    3f88:	ldr	r2, [r0, r2, lsl #4]!
    3f8c:	ldr	r0, [r0, #4]
    3f90:	ldr	r3, [sp, #24]
    3f94:	ldr	ip, [sp, #28]
    3f98:	adds	r2, r2, r3
    3f9c:	adc	r0, r0, ip
    3fa0:	lsr	r2, r2, #3
    3fa4:	orr	r2, r2, r0, lsl #29
    3fa8:	asr	r3, r0, #3
    3fac:	ldr	r0, [sp, #16]
    3fb0:	ldr	ip, [sp, #20]
    3fb4:	lsr	r0, r0, #3
    3fb8:	orr	r0, r0, ip, lsl #29
    3fbc:	asr	ip, ip, #3
    3fc0:	ldr	lr, [fp, #-20]	; 0xffffffec
    3fc4:	mov	r4, sp
    3fc8:	str	lr, [r4, #8]
    3fcc:	str	ip, [r4, #4]
    3fd0:	str	r0, [r4]
    3fd4:	mov	r0, r1
    3fd8:	bl	3c80 <read_bytes>
    3fdc:	str	r0, [fp, #-12]
    3fe0:	ldr	r0, [fp, #-12]
    3fe4:	sub	sp, fp, #8
    3fe8:	pop	{r4, sl, fp, pc}
    3fec:	.word	0xfffffed4

00003ff0 <coda_ascii_cursor_read_int8_array>:
    3ff0:	push	{fp, lr}
    3ff4:	mov	fp, sp
    3ff8:	sub	sp, sp, #32
    3ffc:	str	r0, [fp, #-8]
    4000:	str	r1, [fp, #-12]
    4004:	str	r2, [sp, #16]
    4008:	ldr	r0, [fp, #-8]
    400c:	add	r1, r0, #8
    4010:	ldr	r0, [r0, #4]
    4014:	sub	r0, r0, #1
    4018:	add	r0, r1, r0, lsl #4
    401c:	ldr	r0, [r0]
    4020:	ldr	r0, [r0]
    4024:	cmp	r0, #100	; 0x64
    4028:	bcs	404c <coda_ascii_cursor_read_int8_array+0x5c>
    402c:	ldr	r0, [fp, #-8]
    4030:	add	r1, r0, #8
    4034:	ldr	r0, [r0, #4]
    4038:	sub	r0, r0, #1
    403c:	add	r0, r1, r0, lsl #4
    4040:	ldr	r0, [r0]
    4044:	str	r0, [sp, #8]
    4048:	b	406c <coda_ascii_cursor_read_int8_array+0x7c>
    404c:	ldr	r0, [fp, #-8]
    4050:	add	r1, r0, #8
    4054:	ldr	r0, [r0, #4]
    4058:	sub	r0, r0, #1
    405c:	add	r0, r1, r0, lsl #4
    4060:	ldr	r0, [r0]
    4064:	ldr	r0, [r0, #4]
    4068:	str	r0, [sp, #8]
    406c:	ldr	r0, [sp, #8]
    4070:	str	r0, [sp, #12]
    4074:	ldr	r0, [sp, #12]
    4078:	ldr	r0, [r0, #40]	; 0x28
    407c:	ldr	r0, [r0]
    4080:	cmp	r0, #0
    4084:	bne	408c <coda_ascii_cursor_read_int8_array+0x9c>
    4088:	b	40ac <coda_ascii_cursor_read_int8_array+0xbc>
    408c:	movw	r0, #0
    4090:	movt	r0, #0
    4094:	movw	r1, #0
    4098:	movt	r1, #0
    409c:	movw	r2, #1464	; 0x5b8
    40a0:	movw	r3, #0
    40a4:	movt	r3, #0
    40a8:	bl	0 <__assert_fail>
    40ac:	ldr	r0, [fp, #-8]
    40b0:	ldr	r2, [fp, #-12]
    40b4:	movw	r1, #0
    40b8:	movt	r1, #0
    40bc:	movw	r3, #1
    40c0:	movw	ip, #0
    40c4:	str	ip, [sp]
    40c8:	bl	4128 <read_array>
    40cc:	cmp	r0, #0
    40d0:	beq	40e0 <coda_ascii_cursor_read_int8_array+0xf0>
    40d4:	mvn	r0, #0
    40d8:	str	r0, [fp, #-4]
    40dc:	b	411c <coda_ascii_cursor_read_int8_array+0x12c>
    40e0:	ldr	r0, [sp, #16]
    40e4:	cmp	r0, #0
    40e8:	beq	4114 <coda_ascii_cursor_read_int8_array+0x124>
    40ec:	ldr	r0, [fp, #-8]
    40f0:	ldr	r1, [fp, #-12]
    40f4:	movw	r2, #1
    40f8:	bl	450c <transpose_array>
    40fc:	cmp	r0, #0
    4100:	beq	4110 <coda_ascii_cursor_read_int8_array+0x120>
    4104:	mvn	r0, #0
    4108:	str	r0, [fp, #-4]
    410c:	b	411c <coda_ascii_cursor_read_int8_array+0x12c>
    4110:	b	4114 <coda_ascii_cursor_read_int8_array+0x124>
    4114:	movw	r0, #0
    4118:	str	r0, [fp, #-4]
    411c:	ldr	r0, [fp, #-4]
    4120:	mov	sp, fp
    4124:	pop	{fp, pc}

00004128 <read_array>:
    4128:	push	{r4, r5, fp, lr}
    412c:	add	fp, sp, #8
    4130:	sub	sp, sp, #664	; 0x298
    4134:	ldr	ip, [fp, #8]
    4138:	add	lr, sp, #88	; 0x58
    413c:	str	r0, [fp, #-16]
    4140:	str	r1, [fp, #-20]	; 0xffffffec
    4144:	str	r2, [fp, #-24]	; 0xffffffe8
    4148:	str	r3, [fp, #-28]	; 0xffffffe4
    414c:	ldr	r0, [fp, #-16]
    4150:	add	r1, sp, #84	; 0x54
    4154:	mov	r2, lr
    4158:	str	ip, [sp, #24]
    415c:	bl	0 <coda_cursor_get_array_dim>
    4160:	cmp	r0, #0
    4164:	beq	4174 <read_array+0x4c>
    4168:	mvn	r0, #0
    416c:	str	r0, [fp, #-12]
    4170:	b	4500 <read_array+0x3d8>
    4174:	ldr	r0, [fp, #-16]
    4178:	add	r1, sp, #120	; 0x78
    417c:	str	r0, [sp, #20]
    4180:	mov	r0, r1
    4184:	ldr	r1, [sp, #20]
    4188:	movw	r2, #520	; 0x208
    418c:	bl	0 <memcpy>
    4190:	ldr	r0, [sp, #84]	; 0x54
    4194:	cmp	r0, #1
    4198:	ble	41a8 <read_array+0x80>
    419c:	ldr	r0, [fp, #8]
    41a0:	cmp	r0, #1
    41a4:	beq	42c8 <read_array+0x1a0>
    41a8:	movw	r0, #1
    41ac:	str	r0, [sp, #80]	; 0x50
    41b0:	movw	r0, #0
    41b4:	str	r0, [sp, #76]	; 0x4c
    41b8:	ldr	r0, [sp, #76]	; 0x4c
    41bc:	ldr	r1, [sp, #84]	; 0x54
    41c0:	cmp	r0, r1
    41c4:	bge	41f4 <read_array+0xcc>
    41c8:	ldr	r0, [sp, #76]	; 0x4c
    41cc:	add	r1, sp, #88	; 0x58
    41d0:	add	r0, r1, r0, lsl #2
    41d4:	ldr	r0, [r0]
    41d8:	ldr	r1, [sp, #80]	; 0x50
    41dc:	mul	r0, r1, r0
    41e0:	str	r0, [sp, #80]	; 0x50
    41e4:	ldr	r0, [sp, #76]	; 0x4c
    41e8:	add	r0, r0, #1
    41ec:	str	r0, [sp, #76]	; 0x4c
    41f0:	b	41b8 <read_array+0x90>
    41f4:	ldr	r0, [sp, #80]	; 0x50
    41f8:	cmp	r0, #0
    41fc:	ble	42c4 <read_array+0x19c>
    4200:	add	r0, sp, #120	; 0x78
    4204:	movw	r1, #0
    4208:	bl	0 <coda_cursor_goto_array_element_by_index>
    420c:	cmp	r0, #0
    4210:	beq	4220 <read_array+0xf8>
    4214:	mvn	r0, #0
    4218:	str	r0, [fp, #-12]
    421c:	b	4500 <read_array+0x3d8>
    4220:	movw	r0, #0
    4224:	str	r0, [sp, #76]	; 0x4c
    4228:	ldr	r0, [sp, #76]	; 0x4c
    422c:	ldr	r1, [sp, #80]	; 0x50
    4230:	cmp	r0, r1
    4234:	bge	42c0 <read_array+0x198>
    4238:	ldr	r0, [fp, #-20]	; 0xffffffec
    423c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4240:	ldr	r2, [sp, #76]	; 0x4c
    4244:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4248:	mul	r2, r2, r3
    424c:	add	r1, r1, r2
    4250:	add	r2, sp, #120	; 0x78
    4254:	str	r0, [sp, #16]
    4258:	mov	r0, r2
    425c:	ldr	r2, [sp, #16]
    4260:	blx	r2
    4264:	cmp	r0, #0
    4268:	beq	4278 <read_array+0x150>
    426c:	mvn	r0, #0
    4270:	str	r0, [fp, #-12]
    4274:	b	4500 <read_array+0x3d8>
    4278:	ldr	r0, [sp, #76]	; 0x4c
    427c:	ldr	r1, [sp, #80]	; 0x50
    4280:	sub	r1, r1, #1
    4284:	cmp	r0, r1
    4288:	bge	42ac <read_array+0x184>
    428c:	add	r0, sp, #120	; 0x78
    4290:	bl	0 <coda_cursor_goto_next_array_element>
    4294:	cmp	r0, #0
    4298:	beq	42a8 <read_array+0x180>
    429c:	mvn	r0, #0
    42a0:	str	r0, [fp, #-12]
    42a4:	b	4500 <read_array+0x3d8>
    42a8:	b	42ac <read_array+0x184>
    42ac:	b	42b0 <read_array+0x188>
    42b0:	ldr	r0, [sp, #76]	; 0x4c
    42b4:	add	r0, r0, #1
    42b8:	str	r0, [sp, #76]	; 0x4c
    42bc:	b	4228 <read_array+0x100>
    42c0:	b	42c4 <read_array+0x19c>
    42c4:	b	44f8 <read_array+0x3d0>
    42c8:	movw	r0, #1
    42cc:	str	r0, [sp, #40]	; 0x28
    42d0:	movw	r0, #0
    42d4:	str	r0, [sp, #76]	; 0x4c
    42d8:	ldr	r0, [sp, #76]	; 0x4c
    42dc:	ldr	r1, [sp, #84]	; 0x54
    42e0:	cmp	r0, r1
    42e4:	bge	431c <read_array+0x1f4>
    42e8:	ldr	r0, [sp, #76]	; 0x4c
    42ec:	add	r1, sp, #40	; 0x28
    42f0:	ldr	r2, [r1, r0, lsl #2]
    42f4:	add	r3, sp, #88	; 0x58
    42f8:	ldr	r3, [r3, r0, lsl #2]
    42fc:	mul	r2, r2, r3
    4300:	add	r0, r0, #1
    4304:	add	r0, r1, r0, lsl #2
    4308:	str	r2, [r0]
    430c:	ldr	r0, [sp, #76]	; 0x4c
    4310:	add	r0, r0, #1
    4314:	str	r0, [sp, #76]	; 0x4c
    4318:	b	42d8 <read_array+0x1b0>
    431c:	ldr	r0, [sp, #84]	; 0x54
    4320:	add	r1, sp, #40	; 0x28
    4324:	add	r0, r1, r0, lsl #2
    4328:	ldr	r0, [r0, #-4]
    432c:	str	r0, [sp, #36]	; 0x24
    4330:	ldr	r0, [sp, #84]	; 0x54
    4334:	add	r0, r1, r0, lsl #2
    4338:	ldr	r0, [r0]
    433c:	str	r0, [sp, #80]	; 0x50
    4340:	ldr	r0, [sp, #80]	; 0x50
    4344:	cmp	r0, #0
    4348:	ble	44f4 <read_array+0x3cc>
    434c:	movw	r0, #0
    4350:	str	r0, [sp, #32]
    4354:	str	r0, [sp, #28]
    4358:	add	r1, sp, #120	; 0x78
    435c:	str	r0, [sp, #12]
    4360:	mov	r0, r1
    4364:	ldr	r1, [sp, #12]
    4368:	bl	0 <coda_cursor_goto_array_element_by_index>
    436c:	cmp	r0, #0
    4370:	beq	4380 <read_array+0x258>
    4374:	mvn	r0, #0
    4378:	str	r0, [fp, #-12]
    437c:	b	4500 <read_array+0x3d8>
    4380:	b	4384 <read_array+0x25c>
    4384:	b	4388 <read_array+0x260>
    4388:	ldr	r0, [fp, #-20]	; 0xffffffec
    438c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4390:	ldr	r2, [sp, #28]
    4394:	ldr	r3, [fp, #-28]	; 0xffffffe4
    4398:	mul	r2, r2, r3
    439c:	add	r1, r1, r2
    43a0:	add	r2, sp, #120	; 0x78
    43a4:	str	r0, [sp, #8]
    43a8:	mov	r0, r2
    43ac:	ldr	r2, [sp, #8]
    43b0:	blx	r2
    43b4:	cmp	r0, #0
    43b8:	beq	43c8 <read_array+0x2a0>
    43bc:	mvn	r0, #0
    43c0:	str	r0, [fp, #-12]
    43c4:	b	4500 <read_array+0x3d8>
    43c8:	ldr	r0, [sp, #32]
    43cc:	add	r0, r0, #1
    43d0:	str	r0, [sp, #32]
    43d4:	ldr	r0, [sp, #32]
    43d8:	ldr	r1, [sp, #80]	; 0x50
    43dc:	cmp	r0, r1
    43e0:	bge	4404 <read_array+0x2dc>
    43e4:	add	r0, sp, #120	; 0x78
    43e8:	bl	0 <coda_cursor_goto_next_array_element>
    43ec:	cmp	r0, #0
    43f0:	beq	4400 <read_array+0x2d8>
    43f4:	mvn	r0, #0
    43f8:	str	r0, [fp, #-12]
    43fc:	b	4500 <read_array+0x3d8>
    4400:	b	4404 <read_array+0x2dc>
    4404:	ldr	r0, [sp, #36]	; 0x24
    4408:	ldr	r1, [sp, #28]
    440c:	add	r0, r1, r0
    4410:	str	r0, [sp, #28]
    4414:	ldr	r0, [sp, #28]
    4418:	ldr	r1, [sp, #80]	; 0x50
    441c:	cmp	r0, r1
    4420:	blt	4388 <read_array+0x260>
    4424:	ldr	r0, [sp, #32]
    4428:	ldr	r1, [sp, #80]	; 0x50
    442c:	cmp	r0, r1
    4430:	bne	4438 <read_array+0x310>
    4434:	b	44f0 <read_array+0x3c8>
    4438:	ldr	r0, [sp, #84]	; 0x54
    443c:	add	r1, sp, #40	; 0x28
    4440:	add	r0, r1, r0, lsl #2
    4444:	ldr	r1, [r0, #-8]
    4448:	ldr	r0, [r0]
    444c:	sub	r0, r1, r0
    4450:	ldr	r1, [sp, #28]
    4454:	add	r0, r1, r0
    4458:	str	r0, [sp, #28]
    445c:	ldr	r0, [sp, #84]	; 0x54
    4460:	sub	r0, r0, #3
    4464:	str	r0, [sp, #76]	; 0x4c
    4468:	ldr	r0, [sp, #76]	; 0x4c
    446c:	cmp	r0, #0
    4470:	movw	r0, #0
    4474:	str	r0, [sp, #4]
    4478:	blt	44a4 <read_array+0x37c>
    447c:	ldr	r0, [sp, #28]
    4480:	ldr	r1, [sp, #76]	; 0x4c
    4484:	add	r1, r1, #2
    4488:	add	r2, sp, #40	; 0x28
    448c:	add	r1, r2, r1, lsl #2
    4490:	ldr	r1, [r1]
    4494:	cmp	r0, r1
    4498:	movw	r0, #0
    449c:	movge	r0, #1
    44a0:	str	r0, [sp, #4]
    44a4:	ldr	r0, [sp, #4]
    44a8:	tst	r0, #1
    44ac:	beq	44ec <read_array+0x3c4>
    44b0:	ldr	r0, [sp, #76]	; 0x4c
    44b4:	add	r1, sp, #40	; 0x28
    44b8:	ldr	r2, [r1, r0, lsl #2]
    44bc:	add	r0, r0, #2
    44c0:	add	r0, r1, r0, lsl #2
    44c4:	ldr	r0, [r0]
    44c8:	sub	r0, r2, r0
    44cc:	ldr	r1, [sp, #28]
    44d0:	add	r0, r1, r0
    44d4:	str	r0, [sp, #28]
    44d8:	ldr	r0, [sp, #76]	; 0x4c
    44dc:	mvn	r1, #0
    44e0:	add	r0, r0, r1
    44e4:	str	r0, [sp, #76]	; 0x4c
    44e8:	b	4468 <read_array+0x340>
    44ec:	b	4384 <read_array+0x25c>
    44f0:	b	44f4 <read_array+0x3cc>
    44f4:	b	44f8 <read_array+0x3d0>
    44f8:	movw	r0, #0
    44fc:	str	r0, [fp, #-12]
    4500:	ldr	r0, [fp, #-12]
    4504:	sub	sp, fp, #8
    4508:	pop	{r4, r5, fp, pc}

0000450c <transpose_array>:
    450c:	push	{fp, lr}
    4510:	mov	fp, sp
    4514:	sub	sp, sp, #208	; 0xd0
    4518:	sub	r3, fp, #48	; 0x30
    451c:	str	r0, [fp, #-8]
    4520:	str	r1, [fp, #-12]
    4524:	str	r2, [fp, #-16]
    4528:	movw	r0, #0
    452c:	str	r0, [sp, #40]	; 0x28
    4530:	ldr	r0, [fp, #-8]
    4534:	sub	r1, fp, #52	; 0x34
    4538:	mov	r2, r3
    453c:	bl	0 <coda_cursor_get_array_dim>
    4540:	cmp	r0, #0
    4544:	beq	4554 <transpose_array+0x48>
    4548:	mvn	r0, #0
    454c:	str	r0, [fp, #-4]
    4550:	b	4bb0 <transpose_array+0x6a4>
    4554:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4558:	cmp	r0, #1
    455c:	bgt	456c <transpose_array+0x60>
    4560:	movw	r0, #0
    4564:	str	r0, [fp, #-4]
    4568:	b	4bb0 <transpose_array+0x6a4>
    456c:	ldr	r0, [fp, #-12]
    4570:	str	r0, [sp, #32]
    4574:	movw	r0, #1
    4578:	str	r0, [fp, #-56]	; 0xffffffc8
    457c:	movw	r0, #0
    4580:	str	r0, [sp, #36]	; 0x24
    4584:	ldr	r0, [sp, #36]	; 0x24
    4588:	ldr	r1, [fp, #-52]	; 0xffffffcc
    458c:	cmp	r0, r1
    4590:	bge	45ec <transpose_array+0xe0>
    4594:	ldr	r0, [sp, #36]	; 0x24
    4598:	sub	r1, fp, #48	; 0x30
    459c:	ldr	r0, [r1, r0, lsl #2]
    45a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
    45a4:	mul	r0, r2, r0
    45a8:	str	r0, [fp, #-56]	; 0xffffffc8
    45ac:	ldr	r0, [sp, #36]	; 0x24
    45b0:	add	r2, sp, #80	; 0x50
    45b4:	mov	r3, #0
    45b8:	str	r3, [r2, r0, lsl #2]
    45bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
    45c0:	sub	r0, r0, #1
    45c4:	ldr	r2, [sp, #36]	; 0x24
    45c8:	sub	r0, r0, r2
    45cc:	ldr	r0, [r1, r0, lsl #2]
    45d0:	add	r1, sp, #44	; 0x2c
    45d4:	add	r1, r1, r2, lsl #2
    45d8:	str	r0, [r1]
    45dc:	ldr	r0, [sp, #36]	; 0x24
    45e0:	add	r0, r0, #1
    45e4:	str	r0, [sp, #36]	; 0x24
    45e8:	b	4584 <transpose_array+0x78>
    45ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
    45f0:	cmp	r0, #1
    45f4:	bgt	4604 <transpose_array+0xf8>
    45f8:	movw	r0, #0
    45fc:	str	r0, [fp, #-4]
    4600:	b	4bb0 <transpose_array+0x6a4>
    4604:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4608:	sub	r1, fp, #92	; 0x5c
    460c:	mov	r2, #1
    4610:	str	r2, [r1, r0, lsl #2]
    4614:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4618:	add	r1, sp, #44	; 0x2c
    461c:	add	r0, r1, r0, lsl #2
    4620:	movw	r1, #1
    4624:	str	r1, [r0]
    4628:	ldr	r0, [fp, #-52]	; 0xffffffcc
    462c:	str	r0, [sp, #36]	; 0x24
    4630:	ldr	r0, [sp, #36]	; 0x24
    4634:	cmp	r0, #0
    4638:	ble	4674 <transpose_array+0x168>
    463c:	ldr	r0, [sp, #36]	; 0x24
    4640:	sub	r1, fp, #92	; 0x5c
    4644:	ldr	r2, [r1, r0, lsl #2]
    4648:	add	r3, sp, #44	; 0x2c
    464c:	ldr	r3, [r3, r0, lsl #2]
    4650:	mul	r2, r2, r3
    4654:	sub	r0, r0, #1
    4658:	add	r0, r1, r0, lsl #2
    465c:	str	r2, [r0]
    4660:	ldr	r0, [sp, #36]	; 0x24
    4664:	mvn	r1, #0
    4668:	add	r0, r0, r1
    466c:	str	r0, [sp, #36]	; 0x24
    4670:	b	4630 <transpose_array+0x124>
    4674:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4678:	add	r1, sp, #44	; 0x2c
    467c:	mov	r2, #0
    4680:	str	r2, [r1, r0, lsl #2]
    4684:	ldr	r0, [fp, #-52]	; 0xffffffcc
    4688:	add	r1, sp, #80	; 0x50
    468c:	add	r0, r1, r0, lsl #2
    4690:	movw	r1, #0
    4694:	str	r1, [r0]
    4698:	ldr	r0, [fp, #-56]	; 0xffffffc8
    469c:	ldr	r1, [fp, #-16]
    46a0:	mul	r0, r0, r1
    46a4:	bl	0 <malloc>
    46a8:	str	r0, [sp, #28]
    46ac:	ldr	r0, [sp, #28]
    46b0:	movw	r1, #0
    46b4:	cmp	r0, r1
    46b8:	bne	46f4 <transpose_array+0x1e8>
    46bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    46c0:	ldr	r1, [fp, #-16]
    46c4:	mul	r2, r0, r1
    46c8:	mvn	r0, #0
    46cc:	movw	r1, #0
    46d0:	movt	r1, #0
    46d4:	movw	r3, #0
    46d8:	movt	r3, #0
    46dc:	movw	ip, #93	; 0x5d
    46e0:	str	ip, [sp]
    46e4:	bl	0 <coda_set_error>
    46e8:	mvn	r0, #0
    46ec:	str	r0, [fp, #-4]
    46f0:	b	4bb0 <transpose_array+0x6a4>
    46f4:	ldr	r0, [fp, #-16]
    46f8:	sub	r0, r0, #1
    46fc:	cmp	r0, #7
    4700:	str	r0, [sp, #8]
    4704:	bhi	4b68 <transpose_array+0x65c>
    4708:	add	r0, pc, #8
    470c:	ldr	r1, [sp, #8]
    4710:	ldr	r0, [r0, r1, lsl #2]
    4714:	mov	pc, r0
    4718:	.word	0x00004738
    471c:	.word	0x00004840
    4720:	.word	0x00004b68
    4724:	.word	0x00004950
    4728:	.word	0x00004b68
    472c:	.word	0x00004b68
    4730:	.word	0x00004b68
    4734:	.word	0x00004a58
    4738:	movw	r0, #0
    473c:	str	r0, [sp, #36]	; 0x24
    4740:	ldr	r0, [sp, #36]	; 0x24
    4744:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4748:	cmp	r0, r1
    474c:	bge	483c <transpose_array+0x330>
    4750:	mov	r0, #0
    4754:	str	r0, [sp, #24]
    4758:	ldr	r0, [sp, #32]
    475c:	ldr	r1, [sp, #36]	; 0x24
    4760:	ldrb	r0, [r0, r1]
    4764:	ldr	r1, [sp, #28]
    4768:	ldr	r2, [sp, #40]	; 0x28
    476c:	strb	r0, [r1, r2]
    4770:	ldr	r0, [sp, #24]
    4774:	sub	r1, fp, #92	; 0x5c
    4778:	ldr	r0, [r1, r0, lsl #2]
    477c:	ldr	r1, [sp, #40]	; 0x28
    4780:	add	r0, r1, r0
    4784:	str	r0, [sp, #40]	; 0x28
    4788:	ldr	r0, [sp, #24]
    478c:	add	r1, sp, #80	; 0x50
    4790:	add	r0, r1, r0, lsl #2
    4794:	ldr	r1, [r0]
    4798:	add	r1, r1, #1
    479c:	str	r1, [r0]
    47a0:	ldr	r0, [sp, #24]
    47a4:	add	r1, sp, #80	; 0x50
    47a8:	ldr	r1, [r1, r0, lsl #2]
    47ac:	add	r2, sp, #44	; 0x2c
    47b0:	add	r0, r2, r0, lsl #2
    47b4:	ldr	r0, [r0]
    47b8:	cmp	r1, r0
    47bc:	bne	4828 <transpose_array+0x31c>
    47c0:	ldr	r0, [sp, #24]
    47c4:	add	r1, sp, #80	; 0x50
    47c8:	mov	r2, #0
    47cc:	str	r2, [r1, r0, lsl #2]
    47d0:	ldr	r0, [sp, #24]
    47d4:	sub	r2, fp, #92	; 0x5c
    47d8:	ldr	r3, [r2, r0, lsl #2]
    47dc:	add	ip, sp, #44	; 0x2c
    47e0:	ldr	r0, [ip, r0, lsl #2]
    47e4:	ldr	ip, [sp, #40]	; 0x28
    47e8:	mls	r0, r3, r0, ip
    47ec:	str	r0, [sp, #40]	; 0x28
    47f0:	ldr	r0, [sp, #24]
    47f4:	add	r0, r0, #1
    47f8:	str	r0, [sp, #24]
    47fc:	ldr	r0, [sp, #24]
    4800:	ldr	r0, [r2, r0, lsl #2]
    4804:	ldr	r2, [sp, #40]	; 0x28
    4808:	add	r0, r2, r0
    480c:	str	r0, [sp, #40]	; 0x28
    4810:	ldr	r0, [sp, #24]
    4814:	add	r0, r1, r0, lsl #2
    4818:	ldr	r1, [r0]
    481c:	add	r1, r1, #1
    4820:	str	r1, [r0]
    4824:	b	47a0 <transpose_array+0x294>
    4828:	b	482c <transpose_array+0x320>
    482c:	ldr	r0, [sp, #36]	; 0x24
    4830:	add	r0, r0, #1
    4834:	str	r0, [sp, #36]	; 0x24
    4838:	b	4740 <transpose_array+0x234>
    483c:	b	4b88 <transpose_array+0x67c>
    4840:	movw	r0, #0
    4844:	str	r0, [sp, #36]	; 0x24
    4848:	ldr	r0, [sp, #36]	; 0x24
    484c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4850:	cmp	r0, r1
    4854:	bge	494c <transpose_array+0x440>
    4858:	mov	r0, #0
    485c:	str	r0, [sp, #20]
    4860:	ldr	r0, [sp, #32]
    4864:	ldr	r1, [sp, #36]	; 0x24
    4868:	add	r0, r0, r1, lsl #1
    486c:	ldrh	r0, [r0]
    4870:	ldr	r1, [sp, #28]
    4874:	ldr	r2, [sp, #40]	; 0x28
    4878:	add	r1, r1, r2, lsl #1
    487c:	strh	r0, [r1]
    4880:	ldr	r0, [sp, #20]
    4884:	sub	r1, fp, #92	; 0x5c
    4888:	ldr	r0, [r1, r0, lsl #2]
    488c:	ldr	r1, [sp, #40]	; 0x28
    4890:	add	r0, r1, r0
    4894:	str	r0, [sp, #40]	; 0x28
    4898:	ldr	r0, [sp, #20]
    489c:	add	r1, sp, #80	; 0x50
    48a0:	add	r0, r1, r0, lsl #2
    48a4:	ldr	r1, [r0]
    48a8:	add	r1, r1, #1
    48ac:	str	r1, [r0]
    48b0:	ldr	r0, [sp, #20]
    48b4:	add	r1, sp, #80	; 0x50
    48b8:	ldr	r1, [r1, r0, lsl #2]
    48bc:	add	r2, sp, #44	; 0x2c
    48c0:	add	r0, r2, r0, lsl #2
    48c4:	ldr	r0, [r0]
    48c8:	cmp	r1, r0
    48cc:	bne	4938 <transpose_array+0x42c>
    48d0:	ldr	r0, [sp, #20]
    48d4:	add	r1, sp, #80	; 0x50
    48d8:	mov	r2, #0
    48dc:	str	r2, [r1, r0, lsl #2]
    48e0:	ldr	r0, [sp, #20]
    48e4:	sub	r2, fp, #92	; 0x5c
    48e8:	ldr	r3, [r2, r0, lsl #2]
    48ec:	add	ip, sp, #44	; 0x2c
    48f0:	ldr	r0, [ip, r0, lsl #2]
    48f4:	ldr	ip, [sp, #40]	; 0x28
    48f8:	mls	r0, r3, r0, ip
    48fc:	str	r0, [sp, #40]	; 0x28
    4900:	ldr	r0, [sp, #20]
    4904:	add	r0, r0, #1
    4908:	str	r0, [sp, #20]
    490c:	ldr	r0, [sp, #20]
    4910:	ldr	r0, [r2, r0, lsl #2]
    4914:	ldr	r2, [sp, #40]	; 0x28
    4918:	add	r0, r2, r0
    491c:	str	r0, [sp, #40]	; 0x28
    4920:	ldr	r0, [sp, #20]
    4924:	add	r0, r1, r0, lsl #2
    4928:	ldr	r1, [r0]
    492c:	add	r1, r1, #1
    4930:	str	r1, [r0]
    4934:	b	48b0 <transpose_array+0x3a4>
    4938:	b	493c <transpose_array+0x430>
    493c:	ldr	r0, [sp, #36]	; 0x24
    4940:	add	r0, r0, #1
    4944:	str	r0, [sp, #36]	; 0x24
    4948:	b	4848 <transpose_array+0x33c>
    494c:	b	4b88 <transpose_array+0x67c>
    4950:	movw	r0, #0
    4954:	str	r0, [sp, #36]	; 0x24
    4958:	ldr	r0, [sp, #36]	; 0x24
    495c:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4960:	cmp	r0, r1
    4964:	bge	4a54 <transpose_array+0x548>
    4968:	mov	r0, #0
    496c:	str	r0, [sp, #16]
    4970:	ldr	r0, [sp, #32]
    4974:	ldr	r1, [sp, #36]	; 0x24
    4978:	ldr	r0, [r0, r1, lsl #2]
    497c:	ldr	r1, [sp, #28]
    4980:	ldr	r2, [sp, #40]	; 0x28
    4984:	str	r0, [r1, r2, lsl #2]
    4988:	ldr	r0, [sp, #16]
    498c:	sub	r1, fp, #92	; 0x5c
    4990:	ldr	r0, [r1, r0, lsl #2]
    4994:	ldr	r1, [sp, #40]	; 0x28
    4998:	add	r0, r1, r0
    499c:	str	r0, [sp, #40]	; 0x28
    49a0:	ldr	r0, [sp, #16]
    49a4:	add	r1, sp, #80	; 0x50
    49a8:	add	r0, r1, r0, lsl #2
    49ac:	ldr	r1, [r0]
    49b0:	add	r1, r1, #1
    49b4:	str	r1, [r0]
    49b8:	ldr	r0, [sp, #16]
    49bc:	add	r1, sp, #80	; 0x50
    49c0:	ldr	r1, [r1, r0, lsl #2]
    49c4:	add	r2, sp, #44	; 0x2c
    49c8:	add	r0, r2, r0, lsl #2
    49cc:	ldr	r0, [r0]
    49d0:	cmp	r1, r0
    49d4:	bne	4a40 <transpose_array+0x534>
    49d8:	ldr	r0, [sp, #16]
    49dc:	add	r1, sp, #80	; 0x50
    49e0:	mov	r2, #0
    49e4:	str	r2, [r1, r0, lsl #2]
    49e8:	ldr	r0, [sp, #16]
    49ec:	sub	r2, fp, #92	; 0x5c
    49f0:	ldr	r3, [r2, r0, lsl #2]
    49f4:	add	ip, sp, #44	; 0x2c
    49f8:	ldr	r0, [ip, r0, lsl #2]
    49fc:	ldr	ip, [sp, #40]	; 0x28
    4a00:	mls	r0, r3, r0, ip
    4a04:	str	r0, [sp, #40]	; 0x28
    4a08:	ldr	r0, [sp, #16]
    4a0c:	add	r0, r0, #1
    4a10:	str	r0, [sp, #16]
    4a14:	ldr	r0, [sp, #16]
    4a18:	ldr	r0, [r2, r0, lsl #2]
    4a1c:	ldr	r2, [sp, #40]	; 0x28
    4a20:	add	r0, r2, r0
    4a24:	str	r0, [sp, #40]	; 0x28
    4a28:	ldr	r0, [sp, #16]
    4a2c:	add	r0, r1, r0, lsl #2
    4a30:	ldr	r1, [r0]
    4a34:	add	r1, r1, #1
    4a38:	str	r1, [r0]
    4a3c:	b	49b8 <transpose_array+0x4ac>
    4a40:	b	4a44 <transpose_array+0x538>
    4a44:	ldr	r0, [sp, #36]	; 0x24
    4a48:	add	r0, r0, #1
    4a4c:	str	r0, [sp, #36]	; 0x24
    4a50:	b	4958 <transpose_array+0x44c>
    4a54:	b	4b88 <transpose_array+0x67c>
    4a58:	movw	r0, #0
    4a5c:	str	r0, [sp, #36]	; 0x24
    4a60:	ldr	r0, [sp, #36]	; 0x24
    4a64:	ldr	r1, [fp, #-56]	; 0xffffffc8
    4a68:	cmp	r0, r1
    4a6c:	bge	4b64 <transpose_array+0x658>
    4a70:	mov	r0, #0
    4a74:	str	r0, [sp, #12]
    4a78:	ldr	r0, [sp, #32]
    4a7c:	ldr	r1, [sp, #36]	; 0x24
    4a80:	ldr	r1, [r0, r1, lsl #3]!
    4a84:	ldr	r0, [r0, #4]
    4a88:	ldr	r2, [sp, #28]
    4a8c:	ldr	r3, [sp, #40]	; 0x28
    4a90:	str	r1, [r2, r3, lsl #3]!
    4a94:	str	r0, [r2, #4]
    4a98:	ldr	r0, [sp, #12]
    4a9c:	sub	r1, fp, #92	; 0x5c
    4aa0:	ldr	r0, [r1, r0, lsl #2]
    4aa4:	ldr	r1, [sp, #40]	; 0x28
    4aa8:	add	r0, r1, r0
    4aac:	str	r0, [sp, #40]	; 0x28
    4ab0:	ldr	r0, [sp, #12]
    4ab4:	add	r1, sp, #80	; 0x50
    4ab8:	add	r0, r1, r0, lsl #2
    4abc:	ldr	r1, [r0]
    4ac0:	add	r1, r1, #1
    4ac4:	str	r1, [r0]
    4ac8:	ldr	r0, [sp, #12]
    4acc:	add	r1, sp, #80	; 0x50
    4ad0:	ldr	r1, [r1, r0, lsl #2]
    4ad4:	add	r2, sp, #44	; 0x2c
    4ad8:	add	r0, r2, r0, lsl #2
    4adc:	ldr	r0, [r0]
    4ae0:	cmp	r1, r0
    4ae4:	bne	4b50 <transpose_array+0x644>
    4ae8:	ldr	r0, [sp, #12]
    4aec:	add	r1, sp, #80	; 0x50
    4af0:	mov	r2, #0
    4af4:	str	r2, [r1, r0, lsl #2]
    4af8:	ldr	r0, [sp, #12]
    4afc:	sub	r2, fp, #92	; 0x5c
    4b00:	ldr	r3, [r2, r0, lsl #2]
    4b04:	add	ip, sp, #44	; 0x2c
    4b08:	ldr	r0, [ip, r0, lsl #2]
    4b0c:	ldr	ip, [sp, #40]	; 0x28
    4b10:	mls	r0, r3, r0, ip
    4b14:	str	r0, [sp, #40]	; 0x28
    4b18:	ldr	r0, [sp, #12]
    4b1c:	add	r0, r0, #1
    4b20:	str	r0, [sp, #12]
    4b24:	ldr	r0, [sp, #12]
    4b28:	ldr	r0, [r2, r0, lsl #2]
    4b2c:	ldr	r2, [sp, #40]	; 0x28
    4b30:	add	r0, r2, r0
    4b34:	str	r0, [sp, #40]	; 0x28
    4b38:	ldr	r0, [sp, #12]
    4b3c:	add	r0, r1, r0, lsl #2
    4b40:	ldr	r1, [r0]
    4b44:	add	r1, r1, #1
    4b48:	str	r1, [r0]
    4b4c:	b	4ac8 <transpose_array+0x5bc>
    4b50:	b	4b54 <transpose_array+0x648>
    4b54:	ldr	r0, [sp, #36]	; 0x24
    4b58:	add	r0, r0, #1
    4b5c:	str	r0, [sp, #36]	; 0x24
    4b60:	b	4a60 <transpose_array+0x554>
    4b64:	b	4b88 <transpose_array+0x67c>
    4b68:	movw	r0, #0
    4b6c:	movt	r0, #0
    4b70:	movw	r1, #0
    4b74:	movt	r1, #0
    4b78:	movw	r2, #172	; 0xac
    4b7c:	movw	r3, #0
    4b80:	movt	r3, #0
    4b84:	bl	0 <__assert_fail>
    4b88:	ldr	r0, [fp, #-12]
    4b8c:	ldr	r1, [sp, #28]
    4b90:	ldr	r2, [fp, #-56]	; 0xffffffc8
    4b94:	ldr	r3, [fp, #-16]
    4b98:	mul	r2, r2, r3
    4b9c:	bl	0 <memcpy>
    4ba0:	ldr	r0, [sp, #28]
    4ba4:	bl	0 <free>
    4ba8:	movw	r0, #0
    4bac:	str	r0, [fp, #-4]
    4bb0:	ldr	r0, [fp, #-4]
    4bb4:	mov	sp, fp
    4bb8:	pop	{fp, pc}

00004bbc <coda_ascii_cursor_read_uint8_array>:
    4bbc:	push	{fp, lr}
    4bc0:	mov	fp, sp
    4bc4:	sub	sp, sp, #32
    4bc8:	str	r0, [fp, #-8]
    4bcc:	str	r1, [fp, #-12]
    4bd0:	str	r2, [sp, #16]
    4bd4:	ldr	r0, [fp, #-8]
    4bd8:	add	r1, r0, #8
    4bdc:	ldr	r0, [r0, #4]
    4be0:	sub	r0, r0, #1
    4be4:	add	r0, r1, r0, lsl #4
    4be8:	ldr	r0, [r0]
    4bec:	ldr	r0, [r0]
    4bf0:	cmp	r0, #100	; 0x64
    4bf4:	bcs	4c18 <coda_ascii_cursor_read_uint8_array+0x5c>
    4bf8:	ldr	r0, [fp, #-8]
    4bfc:	add	r1, r0, #8
    4c00:	ldr	r0, [r0, #4]
    4c04:	sub	r0, r0, #1
    4c08:	add	r0, r1, r0, lsl #4
    4c0c:	ldr	r0, [r0]
    4c10:	str	r0, [sp, #8]
    4c14:	b	4c38 <coda_ascii_cursor_read_uint8_array+0x7c>
    4c18:	ldr	r0, [fp, #-8]
    4c1c:	add	r1, r0, #8
    4c20:	ldr	r0, [r0, #4]
    4c24:	sub	r0, r0, #1
    4c28:	add	r0, r1, r0, lsl #4
    4c2c:	ldr	r0, [r0]
    4c30:	ldr	r0, [r0, #4]
    4c34:	str	r0, [sp, #8]
    4c38:	ldr	r0, [sp, #8]
    4c3c:	str	r0, [sp, #12]
    4c40:	ldr	r0, [sp, #12]
    4c44:	ldr	r0, [r0, #40]	; 0x28
    4c48:	ldr	r0, [r0]
    4c4c:	cmp	r0, #0
    4c50:	bne	4c58 <coda_ascii_cursor_read_uint8_array+0x9c>
    4c54:	b	4c78 <coda_ascii_cursor_read_uint8_array+0xbc>
    4c58:	movw	r0, #0
    4c5c:	movt	r0, #0
    4c60:	movw	r1, #0
    4c64:	movt	r1, #0
    4c68:	movw	r2, #1484	; 0x5cc
    4c6c:	movw	r3, #0
    4c70:	movt	r3, #0
    4c74:	bl	0 <__assert_fail>
    4c78:	ldr	r0, [fp, #-8]
    4c7c:	ldr	r2, [fp, #-12]
    4c80:	movw	r1, #0
    4c84:	movt	r1, #0
    4c88:	movw	r3, #1
    4c8c:	movw	ip, #0
    4c90:	str	ip, [sp]
    4c94:	bl	4128 <read_array>
    4c98:	cmp	r0, #0
    4c9c:	beq	4cac <coda_ascii_cursor_read_uint8_array+0xf0>
    4ca0:	mvn	r0, #0
    4ca4:	str	r0, [fp, #-4]
    4ca8:	b	4ce8 <coda_ascii_cursor_read_uint8_array+0x12c>
    4cac:	ldr	r0, [sp, #16]
    4cb0:	cmp	r0, #0
    4cb4:	beq	4ce0 <coda_ascii_cursor_read_uint8_array+0x124>
    4cb8:	ldr	r0, [fp, #-8]
    4cbc:	ldr	r1, [fp, #-12]
    4cc0:	movw	r2, #1
    4cc4:	bl	450c <transpose_array>
    4cc8:	cmp	r0, #0
    4ccc:	beq	4cdc <coda_ascii_cursor_read_uint8_array+0x120>
    4cd0:	mvn	r0, #0
    4cd4:	str	r0, [fp, #-4]
    4cd8:	b	4ce8 <coda_ascii_cursor_read_uint8_array+0x12c>
    4cdc:	b	4ce0 <coda_ascii_cursor_read_uint8_array+0x124>
    4ce0:	movw	r0, #0
    4ce4:	str	r0, [fp, #-4]
    4ce8:	ldr	r0, [fp, #-4]
    4cec:	mov	sp, fp
    4cf0:	pop	{fp, pc}

00004cf4 <coda_ascii_cursor_read_int16_array>:
    4cf4:	push	{fp, lr}
    4cf8:	mov	fp, sp
    4cfc:	sub	sp, sp, #32
    4d00:	str	r0, [fp, #-8]
    4d04:	str	r1, [fp, #-12]
    4d08:	str	r2, [sp, #16]
    4d0c:	ldr	r0, [fp, #-8]
    4d10:	add	r1, r0, #8
    4d14:	ldr	r0, [r0, #4]
    4d18:	sub	r0, r0, #1
    4d1c:	add	r0, r1, r0, lsl #4
    4d20:	ldr	r0, [r0]
    4d24:	ldr	r0, [r0]
    4d28:	cmp	r0, #100	; 0x64
    4d2c:	bcs	4d50 <coda_ascii_cursor_read_int16_array+0x5c>
    4d30:	ldr	r0, [fp, #-8]
    4d34:	add	r1, r0, #8
    4d38:	ldr	r0, [r0, #4]
    4d3c:	sub	r0, r0, #1
    4d40:	add	r0, r1, r0, lsl #4
    4d44:	ldr	r0, [r0]
    4d48:	str	r0, [sp, #8]
    4d4c:	b	4d70 <coda_ascii_cursor_read_int16_array+0x7c>
    4d50:	ldr	r0, [fp, #-8]
    4d54:	add	r1, r0, #8
    4d58:	ldr	r0, [r0, #4]
    4d5c:	sub	r0, r0, #1
    4d60:	add	r0, r1, r0, lsl #4
    4d64:	ldr	r0, [r0]
    4d68:	ldr	r0, [r0, #4]
    4d6c:	str	r0, [sp, #8]
    4d70:	ldr	r0, [sp, #8]
    4d74:	str	r0, [sp, #12]
    4d78:	ldr	r0, [sp, #12]
    4d7c:	ldr	r0, [r0, #40]	; 0x28
    4d80:	ldr	r0, [r0]
    4d84:	cmp	r0, #0
    4d88:	bne	4d90 <coda_ascii_cursor_read_int16_array+0x9c>
    4d8c:	b	4db0 <coda_ascii_cursor_read_int16_array+0xbc>
    4d90:	movw	r0, #0
    4d94:	movt	r0, #0
    4d98:	movw	r1, #0
    4d9c:	movt	r1, #0
    4da0:	movw	r2, #1504	; 0x5e0
    4da4:	movw	r3, #0
    4da8:	movt	r3, #0
    4dac:	bl	0 <__assert_fail>
    4db0:	movw	r0, #0
    4db4:	movt	r0, #0
    4db8:	ldr	r1, [fp, #-8]
    4dbc:	ldr	r2, [fp, #-12]
    4dc0:	str	r0, [sp, #4]
    4dc4:	mov	r0, r1
    4dc8:	ldr	r1, [sp, #4]
    4dcc:	movw	r3, #2
    4dd0:	movw	ip, #0
    4dd4:	str	ip, [sp]
    4dd8:	bl	4128 <read_array>
    4ddc:	cmp	r0, #0
    4de0:	beq	4df0 <coda_ascii_cursor_read_int16_array+0xfc>
    4de4:	mvn	r0, #0
    4de8:	str	r0, [fp, #-4]
    4dec:	b	4e2c <coda_ascii_cursor_read_int16_array+0x138>
    4df0:	ldr	r0, [sp, #16]
    4df4:	cmp	r0, #0
    4df8:	beq	4e24 <coda_ascii_cursor_read_int16_array+0x130>
    4dfc:	ldr	r0, [fp, #-8]
    4e00:	ldr	r1, [fp, #-12]
    4e04:	movw	r2, #2
    4e08:	bl	450c <transpose_array>
    4e0c:	cmp	r0, #0
    4e10:	beq	4e20 <coda_ascii_cursor_read_int16_array+0x12c>
    4e14:	mvn	r0, #0
    4e18:	str	r0, [fp, #-4]
    4e1c:	b	4e2c <coda_ascii_cursor_read_int16_array+0x138>
    4e20:	b	4e24 <coda_ascii_cursor_read_int16_array+0x130>
    4e24:	movw	r0, #0
    4e28:	str	r0, [fp, #-4]
    4e2c:	ldr	r0, [fp, #-4]
    4e30:	mov	sp, fp
    4e34:	pop	{fp, pc}

00004e38 <coda_ascii_cursor_read_uint16_array>:
    4e38:	push	{fp, lr}
    4e3c:	mov	fp, sp
    4e40:	sub	sp, sp, #32
    4e44:	str	r0, [fp, #-8]
    4e48:	str	r1, [fp, #-12]
    4e4c:	str	r2, [sp, #16]
    4e50:	ldr	r0, [fp, #-8]
    4e54:	add	r1, r0, #8
    4e58:	ldr	r0, [r0, #4]
    4e5c:	sub	r0, r0, #1
    4e60:	add	r0, r1, r0, lsl #4
    4e64:	ldr	r0, [r0]
    4e68:	ldr	r0, [r0]
    4e6c:	cmp	r0, #100	; 0x64
    4e70:	bcs	4e94 <coda_ascii_cursor_read_uint16_array+0x5c>
    4e74:	ldr	r0, [fp, #-8]
    4e78:	add	r1, r0, #8
    4e7c:	ldr	r0, [r0, #4]
    4e80:	sub	r0, r0, #1
    4e84:	add	r0, r1, r0, lsl #4
    4e88:	ldr	r0, [r0]
    4e8c:	str	r0, [sp, #8]
    4e90:	b	4eb4 <coda_ascii_cursor_read_uint16_array+0x7c>
    4e94:	ldr	r0, [fp, #-8]
    4e98:	add	r1, r0, #8
    4e9c:	ldr	r0, [r0, #4]
    4ea0:	sub	r0, r0, #1
    4ea4:	add	r0, r1, r0, lsl #4
    4ea8:	ldr	r0, [r0]
    4eac:	ldr	r0, [r0, #4]
    4eb0:	str	r0, [sp, #8]
    4eb4:	ldr	r0, [sp, #8]
    4eb8:	str	r0, [sp, #12]
    4ebc:	ldr	r0, [sp, #12]
    4ec0:	ldr	r0, [r0, #40]	; 0x28
    4ec4:	ldr	r0, [r0]
    4ec8:	cmp	r0, #0
    4ecc:	bne	4ed4 <coda_ascii_cursor_read_uint16_array+0x9c>
    4ed0:	b	4ef4 <coda_ascii_cursor_read_uint16_array+0xbc>
    4ed4:	movw	r0, #0
    4ed8:	movt	r0, #0
    4edc:	movw	r1, #0
    4ee0:	movt	r1, #0
    4ee4:	movw	r2, #1524	; 0x5f4
    4ee8:	movw	r3, #0
    4eec:	movt	r3, #0
    4ef0:	bl	0 <__assert_fail>
    4ef4:	movw	r0, #0
    4ef8:	movt	r0, #0
    4efc:	ldr	r1, [fp, #-8]
    4f00:	ldr	r2, [fp, #-12]
    4f04:	str	r0, [sp, #4]
    4f08:	mov	r0, r1
    4f0c:	ldr	r1, [sp, #4]
    4f10:	movw	r3, #2
    4f14:	movw	ip, #0
    4f18:	str	ip, [sp]
    4f1c:	bl	4128 <read_array>
    4f20:	cmp	r0, #0
    4f24:	beq	4f34 <coda_ascii_cursor_read_uint16_array+0xfc>
    4f28:	mvn	r0, #0
    4f2c:	str	r0, [fp, #-4]
    4f30:	b	4f70 <coda_ascii_cursor_read_uint16_array+0x138>
    4f34:	ldr	r0, [sp, #16]
    4f38:	cmp	r0, #0
    4f3c:	beq	4f68 <coda_ascii_cursor_read_uint16_array+0x130>
    4f40:	ldr	r0, [fp, #-8]
    4f44:	ldr	r1, [fp, #-12]
    4f48:	movw	r2, #2
    4f4c:	bl	450c <transpose_array>
    4f50:	cmp	r0, #0
    4f54:	beq	4f64 <coda_ascii_cursor_read_uint16_array+0x12c>
    4f58:	mvn	r0, #0
    4f5c:	str	r0, [fp, #-4]
    4f60:	b	4f70 <coda_ascii_cursor_read_uint16_array+0x138>
    4f64:	b	4f68 <coda_ascii_cursor_read_uint16_array+0x130>
    4f68:	movw	r0, #0
    4f6c:	str	r0, [fp, #-4]
    4f70:	ldr	r0, [fp, #-4]
    4f74:	mov	sp, fp
    4f78:	pop	{fp, pc}

00004f7c <coda_ascii_cursor_read_int32_array>:
    4f7c:	push	{fp, lr}
    4f80:	mov	fp, sp
    4f84:	sub	sp, sp, #32
    4f88:	str	r0, [fp, #-8]
    4f8c:	str	r1, [fp, #-12]
    4f90:	str	r2, [sp, #16]
    4f94:	ldr	r0, [fp, #-8]
    4f98:	add	r1, r0, #8
    4f9c:	ldr	r0, [r0, #4]
    4fa0:	sub	r0, r0, #1
    4fa4:	add	r0, r1, r0, lsl #4
    4fa8:	ldr	r0, [r0]
    4fac:	ldr	r0, [r0]
    4fb0:	cmp	r0, #100	; 0x64
    4fb4:	bcs	4fd8 <coda_ascii_cursor_read_int32_array+0x5c>
    4fb8:	ldr	r0, [fp, #-8]
    4fbc:	add	r1, r0, #8
    4fc0:	ldr	r0, [r0, #4]
    4fc4:	sub	r0, r0, #1
    4fc8:	add	r0, r1, r0, lsl #4
    4fcc:	ldr	r0, [r0]
    4fd0:	str	r0, [sp, #8]
    4fd4:	b	4ff8 <coda_ascii_cursor_read_int32_array+0x7c>
    4fd8:	ldr	r0, [fp, #-8]
    4fdc:	add	r1, r0, #8
    4fe0:	ldr	r0, [r0, #4]
    4fe4:	sub	r0, r0, #1
    4fe8:	add	r0, r1, r0, lsl #4
    4fec:	ldr	r0, [r0]
    4ff0:	ldr	r0, [r0, #4]
    4ff4:	str	r0, [sp, #8]
    4ff8:	ldr	r0, [sp, #8]
    4ffc:	str	r0, [sp, #12]
    5000:	ldr	r0, [sp, #12]
    5004:	ldr	r0, [r0, #40]	; 0x28
    5008:	ldr	r0, [r0]
    500c:	cmp	r0, #0
    5010:	bne	5018 <coda_ascii_cursor_read_int32_array+0x9c>
    5014:	b	5038 <coda_ascii_cursor_read_int32_array+0xbc>
    5018:	movw	r0, #0
    501c:	movt	r0, #0
    5020:	movw	r1, #0
    5024:	movt	r1, #0
    5028:	movw	r2, #1544	; 0x608
    502c:	movw	r3, #0
    5030:	movt	r3, #0
    5034:	bl	0 <__assert_fail>
    5038:	movw	r0, #0
    503c:	movt	r0, #0
    5040:	ldr	r1, [fp, #-8]
    5044:	ldr	r2, [fp, #-12]
    5048:	str	r0, [sp, #4]
    504c:	mov	r0, r1
    5050:	ldr	r1, [sp, #4]
    5054:	movw	r3, #4
    5058:	movw	ip, #0
    505c:	str	ip, [sp]
    5060:	bl	4128 <read_array>
    5064:	cmp	r0, #0
    5068:	beq	5078 <coda_ascii_cursor_read_int32_array+0xfc>
    506c:	mvn	r0, #0
    5070:	str	r0, [fp, #-4]
    5074:	b	50b4 <coda_ascii_cursor_read_int32_array+0x138>
    5078:	ldr	r0, [sp, #16]
    507c:	cmp	r0, #0
    5080:	beq	50ac <coda_ascii_cursor_read_int32_array+0x130>
    5084:	ldr	r0, [fp, #-8]
    5088:	ldr	r1, [fp, #-12]
    508c:	movw	r2, #4
    5090:	bl	450c <transpose_array>
    5094:	cmp	r0, #0
    5098:	beq	50a8 <coda_ascii_cursor_read_int32_array+0x12c>
    509c:	mvn	r0, #0
    50a0:	str	r0, [fp, #-4]
    50a4:	b	50b4 <coda_ascii_cursor_read_int32_array+0x138>
    50a8:	b	50ac <coda_ascii_cursor_read_int32_array+0x130>
    50ac:	movw	r0, #0
    50b0:	str	r0, [fp, #-4]
    50b4:	ldr	r0, [fp, #-4]
    50b8:	mov	sp, fp
    50bc:	pop	{fp, pc}

000050c0 <coda_ascii_cursor_read_uint32_array>:
    50c0:	push	{fp, lr}
    50c4:	mov	fp, sp
    50c8:	sub	sp, sp, #32
    50cc:	str	r0, [fp, #-8]
    50d0:	str	r1, [fp, #-12]
    50d4:	str	r2, [sp, #16]
    50d8:	ldr	r0, [fp, #-8]
    50dc:	add	r1, r0, #8
    50e0:	ldr	r0, [r0, #4]
    50e4:	sub	r0, r0, #1
    50e8:	add	r0, r1, r0, lsl #4
    50ec:	ldr	r0, [r0]
    50f0:	ldr	r0, [r0]
    50f4:	cmp	r0, #100	; 0x64
    50f8:	bcs	511c <coda_ascii_cursor_read_uint32_array+0x5c>
    50fc:	ldr	r0, [fp, #-8]
    5100:	add	r1, r0, #8
    5104:	ldr	r0, [r0, #4]
    5108:	sub	r0, r0, #1
    510c:	add	r0, r1, r0, lsl #4
    5110:	ldr	r0, [r0]
    5114:	str	r0, [sp, #8]
    5118:	b	513c <coda_ascii_cursor_read_uint32_array+0x7c>
    511c:	ldr	r0, [fp, #-8]
    5120:	add	r1, r0, #8
    5124:	ldr	r0, [r0, #4]
    5128:	sub	r0, r0, #1
    512c:	add	r0, r1, r0, lsl #4
    5130:	ldr	r0, [r0]
    5134:	ldr	r0, [r0, #4]
    5138:	str	r0, [sp, #8]
    513c:	ldr	r0, [sp, #8]
    5140:	str	r0, [sp, #12]
    5144:	ldr	r0, [sp, #12]
    5148:	ldr	r0, [r0, #40]	; 0x28
    514c:	ldr	r0, [r0]
    5150:	cmp	r0, #0
    5154:	bne	515c <coda_ascii_cursor_read_uint32_array+0x9c>
    5158:	b	517c <coda_ascii_cursor_read_uint32_array+0xbc>
    515c:	movw	r0, #0
    5160:	movt	r0, #0
    5164:	movw	r1, #0
    5168:	movt	r1, #0
    516c:	movw	r2, #1564	; 0x61c
    5170:	movw	r3, #0
    5174:	movt	r3, #0
    5178:	bl	0 <__assert_fail>
    517c:	movw	r0, #0
    5180:	movt	r0, #0
    5184:	ldr	r1, [fp, #-8]
    5188:	ldr	r2, [fp, #-12]
    518c:	str	r0, [sp, #4]
    5190:	mov	r0, r1
    5194:	ldr	r1, [sp, #4]
    5198:	movw	r3, #4
    519c:	movw	ip, #0
    51a0:	str	ip, [sp]
    51a4:	bl	4128 <read_array>
    51a8:	cmp	r0, #0
    51ac:	beq	51bc <coda_ascii_cursor_read_uint32_array+0xfc>
    51b0:	mvn	r0, #0
    51b4:	str	r0, [fp, #-4]
    51b8:	b	51f8 <coda_ascii_cursor_read_uint32_array+0x138>
    51bc:	ldr	r0, [sp, #16]
    51c0:	cmp	r0, #0
    51c4:	beq	51f0 <coda_ascii_cursor_read_uint32_array+0x130>
    51c8:	ldr	r0, [fp, #-8]
    51cc:	ldr	r1, [fp, #-12]
    51d0:	movw	r2, #4
    51d4:	bl	450c <transpose_array>
    51d8:	cmp	r0, #0
    51dc:	beq	51ec <coda_ascii_cursor_read_uint32_array+0x12c>
    51e0:	mvn	r0, #0
    51e4:	str	r0, [fp, #-4]
    51e8:	b	51f8 <coda_ascii_cursor_read_uint32_array+0x138>
    51ec:	b	51f0 <coda_ascii_cursor_read_uint32_array+0x130>
    51f0:	movw	r0, #0
    51f4:	str	r0, [fp, #-4]
    51f8:	ldr	r0, [fp, #-4]
    51fc:	mov	sp, fp
    5200:	pop	{fp, pc}

00005204 <coda_ascii_cursor_read_int64_array>:
    5204:	push	{fp, lr}
    5208:	mov	fp, sp
    520c:	sub	sp, sp, #32
    5210:	str	r0, [fp, #-8]
    5214:	str	r1, [fp, #-12]
    5218:	str	r2, [sp, #16]
    521c:	ldr	r0, [fp, #-8]
    5220:	add	r1, r0, #8
    5224:	ldr	r0, [r0, #4]
    5228:	sub	r0, r0, #1
    522c:	add	r0, r1, r0, lsl #4
    5230:	ldr	r0, [r0]
    5234:	ldr	r0, [r0]
    5238:	cmp	r0, #100	; 0x64
    523c:	bcs	5260 <coda_ascii_cursor_read_int64_array+0x5c>
    5240:	ldr	r0, [fp, #-8]
    5244:	add	r1, r0, #8
    5248:	ldr	r0, [r0, #4]
    524c:	sub	r0, r0, #1
    5250:	add	r0, r1, r0, lsl #4
    5254:	ldr	r0, [r0]
    5258:	str	r0, [sp, #8]
    525c:	b	5280 <coda_ascii_cursor_read_int64_array+0x7c>
    5260:	ldr	r0, [fp, #-8]
    5264:	add	r1, r0, #8
    5268:	ldr	r0, [r0, #4]
    526c:	sub	r0, r0, #1
    5270:	add	r0, r1, r0, lsl #4
    5274:	ldr	r0, [r0]
    5278:	ldr	r0, [r0, #4]
    527c:	str	r0, [sp, #8]
    5280:	ldr	r0, [sp, #8]
    5284:	str	r0, [sp, #12]
    5288:	ldr	r0, [sp, #12]
    528c:	ldr	r0, [r0, #40]	; 0x28
    5290:	ldr	r0, [r0]
    5294:	cmp	r0, #0
    5298:	bne	52a0 <coda_ascii_cursor_read_int64_array+0x9c>
    529c:	b	52c0 <coda_ascii_cursor_read_int64_array+0xbc>
    52a0:	movw	r0, #0
    52a4:	movt	r0, #0
    52a8:	movw	r1, #0
    52ac:	movt	r1, #0
    52b0:	movw	r2, #1584	; 0x630
    52b4:	movw	r3, #0
    52b8:	movt	r3, #0
    52bc:	bl	0 <__assert_fail>
    52c0:	movw	r0, #0
    52c4:	movt	r0, #0
    52c8:	ldr	r1, [fp, #-8]
    52cc:	ldr	r2, [fp, #-12]
    52d0:	str	r0, [sp, #4]
    52d4:	mov	r0, r1
    52d8:	ldr	r1, [sp, #4]
    52dc:	movw	r3, #8
    52e0:	movw	ip, #0
    52e4:	str	ip, [sp]
    52e8:	bl	4128 <read_array>
    52ec:	cmp	r0, #0
    52f0:	beq	5300 <coda_ascii_cursor_read_int64_array+0xfc>
    52f4:	mvn	r0, #0
    52f8:	str	r0, [fp, #-4]
    52fc:	b	533c <coda_ascii_cursor_read_int64_array+0x138>
    5300:	ldr	r0, [sp, #16]
    5304:	cmp	r0, #0
    5308:	beq	5334 <coda_ascii_cursor_read_int64_array+0x130>
    530c:	ldr	r0, [fp, #-8]
    5310:	ldr	r1, [fp, #-12]
    5314:	movw	r2, #4
    5318:	bl	450c <transpose_array>
    531c:	cmp	r0, #0
    5320:	beq	5330 <coda_ascii_cursor_read_int64_array+0x12c>
    5324:	mvn	r0, #0
    5328:	str	r0, [fp, #-4]
    532c:	b	533c <coda_ascii_cursor_read_int64_array+0x138>
    5330:	b	5334 <coda_ascii_cursor_read_int64_array+0x130>
    5334:	movw	r0, #0
    5338:	str	r0, [fp, #-4]
    533c:	ldr	r0, [fp, #-4]
    5340:	mov	sp, fp
    5344:	pop	{fp, pc}

00005348 <coda_ascii_cursor_read_uint64_array>:
    5348:	push	{fp, lr}
    534c:	mov	fp, sp
    5350:	sub	sp, sp, #32
    5354:	str	r0, [fp, #-8]
    5358:	str	r1, [fp, #-12]
    535c:	str	r2, [sp, #16]
    5360:	ldr	r0, [fp, #-8]
    5364:	add	r1, r0, #8
    5368:	ldr	r0, [r0, #4]
    536c:	sub	r0, r0, #1
    5370:	add	r0, r1, r0, lsl #4
    5374:	ldr	r0, [r0]
    5378:	ldr	r0, [r0]
    537c:	cmp	r0, #100	; 0x64
    5380:	bcs	53a4 <coda_ascii_cursor_read_uint64_array+0x5c>
    5384:	ldr	r0, [fp, #-8]
    5388:	add	r1, r0, #8
    538c:	ldr	r0, [r0, #4]
    5390:	sub	r0, r0, #1
    5394:	add	r0, r1, r0, lsl #4
    5398:	ldr	r0, [r0]
    539c:	str	r0, [sp, #8]
    53a0:	b	53c4 <coda_ascii_cursor_read_uint64_array+0x7c>
    53a4:	ldr	r0, [fp, #-8]
    53a8:	add	r1, r0, #8
    53ac:	ldr	r0, [r0, #4]
    53b0:	sub	r0, r0, #1
    53b4:	add	r0, r1, r0, lsl #4
    53b8:	ldr	r0, [r0]
    53bc:	ldr	r0, [r0, #4]
    53c0:	str	r0, [sp, #8]
    53c4:	ldr	r0, [sp, #8]
    53c8:	str	r0, [sp, #12]
    53cc:	ldr	r0, [sp, #12]
    53d0:	ldr	r0, [r0, #40]	; 0x28
    53d4:	ldr	r0, [r0]
    53d8:	cmp	r0, #0
    53dc:	bne	53e4 <coda_ascii_cursor_read_uint64_array+0x9c>
    53e0:	b	5404 <coda_ascii_cursor_read_uint64_array+0xbc>
    53e4:	movw	r0, #0
    53e8:	movt	r0, #0
    53ec:	movw	r1, #0
    53f0:	movt	r1, #0
    53f4:	movw	r2, #1604	; 0x644
    53f8:	movw	r3, #0
    53fc:	movt	r3, #0
    5400:	bl	0 <__assert_fail>
    5404:	movw	r0, #0
    5408:	movt	r0, #0
    540c:	ldr	r1, [fp, #-8]
    5410:	ldr	r2, [fp, #-12]
    5414:	str	r0, [sp, #4]
    5418:	mov	r0, r1
    541c:	ldr	r1, [sp, #4]
    5420:	movw	r3, #8
    5424:	movw	ip, #0
    5428:	str	ip, [sp]
    542c:	bl	4128 <read_array>
    5430:	cmp	r0, #0
    5434:	beq	5444 <coda_ascii_cursor_read_uint64_array+0xfc>
    5438:	mvn	r0, #0
    543c:	str	r0, [fp, #-4]
    5440:	b	5480 <coda_ascii_cursor_read_uint64_array+0x138>
    5444:	ldr	r0, [sp, #16]
    5448:	cmp	r0, #0
    544c:	beq	5478 <coda_ascii_cursor_read_uint64_array+0x130>
    5450:	ldr	r0, [fp, #-8]
    5454:	ldr	r1, [fp, #-12]
    5458:	movw	r2, #8
    545c:	bl	450c <transpose_array>
    5460:	cmp	r0, #0
    5464:	beq	5474 <coda_ascii_cursor_read_uint64_array+0x12c>
    5468:	mvn	r0, #0
    546c:	str	r0, [fp, #-4]
    5470:	b	5480 <coda_ascii_cursor_read_uint64_array+0x138>
    5474:	b	5478 <coda_ascii_cursor_read_uint64_array+0x130>
    5478:	movw	r0, #0
    547c:	str	r0, [fp, #-4]
    5480:	ldr	r0, [fp, #-4]
    5484:	mov	sp, fp
    5488:	pop	{fp, pc}

0000548c <coda_ascii_cursor_read_float_array>:
    548c:	push	{fp, lr}
    5490:	mov	fp, sp
    5494:	sub	sp, sp, #32
    5498:	str	r0, [fp, #-8]
    549c:	str	r1, [fp, #-12]
    54a0:	str	r2, [sp, #16]
    54a4:	ldr	r0, [fp, #-8]
    54a8:	add	r1, r0, #8
    54ac:	ldr	r0, [r0, #4]
    54b0:	sub	r0, r0, #1
    54b4:	add	r0, r1, r0, lsl #4
    54b8:	ldr	r0, [r0]
    54bc:	ldr	r0, [r0]
    54c0:	cmp	r0, #100	; 0x64
    54c4:	bcs	54e8 <coda_ascii_cursor_read_float_array+0x5c>
    54c8:	ldr	r0, [fp, #-8]
    54cc:	add	r1, r0, #8
    54d0:	ldr	r0, [r0, #4]
    54d4:	sub	r0, r0, #1
    54d8:	add	r0, r1, r0, lsl #4
    54dc:	ldr	r0, [r0]
    54e0:	str	r0, [sp, #8]
    54e4:	b	5508 <coda_ascii_cursor_read_float_array+0x7c>
    54e8:	ldr	r0, [fp, #-8]
    54ec:	add	r1, r0, #8
    54f0:	ldr	r0, [r0, #4]
    54f4:	sub	r0, r0, #1
    54f8:	add	r0, r1, r0, lsl #4
    54fc:	ldr	r0, [r0]
    5500:	ldr	r0, [r0, #4]
    5504:	str	r0, [sp, #8]
    5508:	ldr	r0, [sp, #8]
    550c:	str	r0, [sp, #12]
    5510:	ldr	r0, [sp, #12]
    5514:	ldr	r0, [r0, #40]	; 0x28
    5518:	ldr	r0, [r0]
    551c:	cmp	r0, #0
    5520:	bne	5528 <coda_ascii_cursor_read_float_array+0x9c>
    5524:	b	5548 <coda_ascii_cursor_read_float_array+0xbc>
    5528:	movw	r0, #0
    552c:	movt	r0, #0
    5530:	movw	r1, #0
    5534:	movt	r1, #0
    5538:	movw	r2, #1624	; 0x658
    553c:	movw	r3, #0
    5540:	movt	r3, #0
    5544:	bl	0 <__assert_fail>
    5548:	movw	r0, #0
    554c:	movt	r0, #0
    5550:	ldr	r1, [fp, #-8]
    5554:	ldr	r2, [fp, #-12]
    5558:	str	r0, [sp, #4]
    555c:	mov	r0, r1
    5560:	ldr	r1, [sp, #4]
    5564:	movw	r3, #4
    5568:	movw	ip, #0
    556c:	str	ip, [sp]
    5570:	bl	4128 <read_array>
    5574:	cmp	r0, #0
    5578:	beq	5588 <coda_ascii_cursor_read_float_array+0xfc>
    557c:	mvn	r0, #0
    5580:	str	r0, [fp, #-4]
    5584:	b	55c4 <coda_ascii_cursor_read_float_array+0x138>
    5588:	ldr	r0, [sp, #16]
    558c:	cmp	r0, #0
    5590:	beq	55bc <coda_ascii_cursor_read_float_array+0x130>
    5594:	ldr	r0, [fp, #-8]
    5598:	ldr	r1, [fp, #-12]
    559c:	movw	r2, #4
    55a0:	bl	450c <transpose_array>
    55a4:	cmp	r0, #0
    55a8:	beq	55b8 <coda_ascii_cursor_read_float_array+0x12c>
    55ac:	mvn	r0, #0
    55b0:	str	r0, [fp, #-4]
    55b4:	b	55c4 <coda_ascii_cursor_read_float_array+0x138>
    55b8:	b	55bc <coda_ascii_cursor_read_float_array+0x130>
    55bc:	movw	r0, #0
    55c0:	str	r0, [fp, #-4]
    55c4:	ldr	r0, [fp, #-4]
    55c8:	mov	sp, fp
    55cc:	pop	{fp, pc}

000055d0 <coda_ascii_cursor_read_double_array>:
    55d0:	push	{fp, lr}
    55d4:	mov	fp, sp
    55d8:	sub	sp, sp, #32
    55dc:	str	r0, [fp, #-8]
    55e0:	str	r1, [fp, #-12]
    55e4:	str	r2, [sp, #16]
    55e8:	ldr	r0, [fp, #-8]
    55ec:	add	r1, r0, #8
    55f0:	ldr	r0, [r0, #4]
    55f4:	sub	r0, r0, #1
    55f8:	add	r0, r1, r0, lsl #4
    55fc:	ldr	r0, [r0]
    5600:	ldr	r0, [r0]
    5604:	cmp	r0, #100	; 0x64
    5608:	bcs	562c <coda_ascii_cursor_read_double_array+0x5c>
    560c:	ldr	r0, [fp, #-8]
    5610:	add	r1, r0, #8
    5614:	ldr	r0, [r0, #4]
    5618:	sub	r0, r0, #1
    561c:	add	r0, r1, r0, lsl #4
    5620:	ldr	r0, [r0]
    5624:	str	r0, [sp, #8]
    5628:	b	564c <coda_ascii_cursor_read_double_array+0x7c>
    562c:	ldr	r0, [fp, #-8]
    5630:	add	r1, r0, #8
    5634:	ldr	r0, [r0, #4]
    5638:	sub	r0, r0, #1
    563c:	add	r0, r1, r0, lsl #4
    5640:	ldr	r0, [r0]
    5644:	ldr	r0, [r0, #4]
    5648:	str	r0, [sp, #8]
    564c:	ldr	r0, [sp, #8]
    5650:	str	r0, [sp, #12]
    5654:	ldr	r0, [sp, #12]
    5658:	ldr	r0, [r0, #40]	; 0x28
    565c:	ldr	r0, [r0]
    5660:	cmp	r0, #0
    5664:	bne	566c <coda_ascii_cursor_read_double_array+0x9c>
    5668:	b	568c <coda_ascii_cursor_read_double_array+0xbc>
    566c:	movw	r0, #0
    5670:	movt	r0, #0
    5674:	movw	r1, #0
    5678:	movt	r1, #0
    567c:	movw	r2, #1644	; 0x66c
    5680:	movw	r3, #0
    5684:	movt	r3, #0
    5688:	bl	0 <__assert_fail>
    568c:	movw	r0, #0
    5690:	movt	r0, #0
    5694:	ldr	r1, [fp, #-8]
    5698:	ldr	r2, [fp, #-12]
    569c:	str	r0, [sp, #4]
    56a0:	mov	r0, r1
    56a4:	ldr	r1, [sp, #4]
    56a8:	movw	r3, #8
    56ac:	movw	ip, #0
    56b0:	str	ip, [sp]
    56b4:	bl	4128 <read_array>
    56b8:	cmp	r0, #0
    56bc:	beq	56cc <coda_ascii_cursor_read_double_array+0xfc>
    56c0:	mvn	r0, #0
    56c4:	str	r0, [fp, #-4]
    56c8:	b	5708 <coda_ascii_cursor_read_double_array+0x138>
    56cc:	ldr	r0, [sp, #16]
    56d0:	cmp	r0, #0
    56d4:	beq	5700 <coda_ascii_cursor_read_double_array+0x130>
    56d8:	ldr	r0, [fp, #-8]
    56dc:	ldr	r1, [fp, #-12]
    56e0:	movw	r2, #8
    56e4:	bl	450c <transpose_array>
    56e8:	cmp	r0, #0
    56ec:	beq	56fc <coda_ascii_cursor_read_double_array+0x12c>
    56f0:	mvn	r0, #0
    56f4:	str	r0, [fp, #-4]
    56f8:	b	5708 <coda_ascii_cursor_read_double_array+0x138>
    56fc:	b	5700 <coda_ascii_cursor_read_double_array+0x130>
    5700:	movw	r0, #0
    5704:	str	r0, [fp, #-4]
    5708:	ldr	r0, [fp, #-4]
    570c:	mov	sp, fp
    5710:	pop	{fp, pc}

00005714 <coda_ascii_cursor_read_char_array>:
    5714:	push	{fp, lr}
    5718:	mov	fp, sp
    571c:	sub	sp, sp, #32
    5720:	str	r0, [fp, #-8]
    5724:	str	r1, [fp, #-12]
    5728:	str	r2, [sp, #16]
    572c:	ldr	r0, [fp, #-8]
    5730:	add	r1, r0, #8
    5734:	ldr	r0, [r0, #4]
    5738:	sub	r0, r0, #1
    573c:	add	r0, r1, r0, lsl #4
    5740:	ldr	r0, [r0]
    5744:	ldr	r0, [r0]
    5748:	cmp	r0, #100	; 0x64
    574c:	bcs	5770 <coda_ascii_cursor_read_char_array+0x5c>
    5750:	ldr	r0, [fp, #-8]
    5754:	add	r1, r0, #8
    5758:	ldr	r0, [r0, #4]
    575c:	sub	r0, r0, #1
    5760:	add	r0, r1, r0, lsl #4
    5764:	ldr	r0, [r0]
    5768:	str	r0, [sp, #8]
    576c:	b	5790 <coda_ascii_cursor_read_char_array+0x7c>
    5770:	ldr	r0, [fp, #-8]
    5774:	add	r1, r0, #8
    5778:	ldr	r0, [r0, #4]
    577c:	sub	r0, r0, #1
    5780:	add	r0, r1, r0, lsl #4
    5784:	ldr	r0, [r0]
    5788:	ldr	r0, [r0, #4]
    578c:	str	r0, [sp, #8]
    5790:	ldr	r0, [sp, #8]
    5794:	str	r0, [sp, #12]
    5798:	ldr	r0, [sp, #12]
    579c:	ldr	r0, [r0, #40]	; 0x28
    57a0:	ldr	r0, [r0]
    57a4:	cmp	r0, #0
    57a8:	bne	57b0 <coda_ascii_cursor_read_char_array+0x9c>
    57ac:	b	57d0 <coda_ascii_cursor_read_char_array+0xbc>
    57b0:	movw	r0, #0
    57b4:	movt	r0, #0
    57b8:	movw	r1, #0
    57bc:	movt	r1, #0
    57c0:	movw	r2, #1664	; 0x680
    57c4:	movw	r3, #0
    57c8:	movt	r3, #0
    57cc:	bl	0 <__assert_fail>
    57d0:	ldr	r0, [fp, #-8]
    57d4:	ldr	r2, [fp, #-12]
    57d8:	movw	r1, #0
    57dc:	movt	r1, #0
    57e0:	movw	r3, #1
    57e4:	movw	ip, #0
    57e8:	str	ip, [sp]
    57ec:	bl	4128 <read_array>
    57f0:	cmp	r0, #0
    57f4:	beq	5804 <coda_ascii_cursor_read_char_array+0xf0>
    57f8:	mvn	r0, #0
    57fc:	str	r0, [fp, #-4]
    5800:	b	5840 <coda_ascii_cursor_read_char_array+0x12c>
    5804:	ldr	r0, [sp, #16]
    5808:	cmp	r0, #0
    580c:	beq	5838 <coda_ascii_cursor_read_char_array+0x124>
    5810:	ldr	r0, [fp, #-8]
    5814:	ldr	r1, [fp, #-12]
    5818:	movw	r2, #1
    581c:	bl	450c <transpose_array>
    5820:	cmp	r0, #0
    5824:	beq	5834 <coda_ascii_cursor_read_char_array+0x120>
    5828:	mvn	r0, #0
    582c:	str	r0, [fp, #-4]
    5830:	b	5840 <coda_ascii_cursor_read_char_array+0x12c>
    5834:	b	5838 <coda_ascii_cursor_read_char_array+0x124>
    5838:	movw	r0, #0
    583c:	str	r0, [fp, #-4]
    5840:	ldr	r0, [fp, #-4]
    5844:	mov	sp, fp
    5848:	pop	{fp, pc}

0000584c <coda_ascii_cursor_read_int8_partial_array>:
    584c:	push	{fp, lr}
    5850:	mov	fp, sp
    5854:	sub	sp, sp, #40	; 0x28
    5858:	str	r0, [fp, #-4]
    585c:	str	r1, [fp, #-8]
    5860:	str	r2, [fp, #-12]
    5864:	str	r3, [fp, #-16]
    5868:	ldr	r0, [fp, #-4]
    586c:	add	r1, r0, #8
    5870:	ldr	r0, [r0, #4]
    5874:	sub	r0, r0, #1
    5878:	add	r0, r1, r0, lsl #4
    587c:	ldr	r0, [r0]
    5880:	ldr	r0, [r0]
    5884:	cmp	r0, #100	; 0x64
    5888:	bcs	58ac <coda_ascii_cursor_read_int8_partial_array+0x60>
    588c:	ldr	r0, [fp, #-4]
    5890:	add	r1, r0, #8
    5894:	ldr	r0, [r0, #4]
    5898:	sub	r0, r0, #1
    589c:	add	r0, r1, r0, lsl #4
    58a0:	ldr	r0, [r0]
    58a4:	str	r0, [sp, #16]
    58a8:	b	58cc <coda_ascii_cursor_read_int8_partial_array+0x80>
    58ac:	ldr	r0, [fp, #-4]
    58b0:	add	r1, r0, #8
    58b4:	ldr	r0, [r0, #4]
    58b8:	sub	r0, r0, #1
    58bc:	add	r0, r1, r0, lsl #4
    58c0:	ldr	r0, [r0]
    58c4:	ldr	r0, [r0, #4]
    58c8:	str	r0, [sp, #16]
    58cc:	ldr	r0, [sp, #16]
    58d0:	str	r0, [sp, #20]
    58d4:	ldr	r0, [sp, #20]
    58d8:	ldr	r0, [r0, #40]	; 0x28
    58dc:	ldr	r0, [r0]
    58e0:	cmp	r0, #0
    58e4:	bne	58ec <coda_ascii_cursor_read_int8_partial_array+0xa0>
    58e8:	b	590c <coda_ascii_cursor_read_int8_partial_array+0xc0>
    58ec:	movw	r0, #0
    58f0:	movt	r0, #0
    58f4:	movw	r1, #0
    58f8:	movt	r1, #0
    58fc:	movw	r2, #1684	; 0x694
    5900:	movw	r3, #0
    5904:	movt	r3, #0
    5908:	bl	0 <__assert_fail>
    590c:	ldr	r0, [fp, #-4]
    5910:	ldr	r2, [fp, #-8]
    5914:	ldr	r3, [fp, #-12]
    5918:	ldr	r1, [fp, #-16]
    591c:	movw	ip, #0
    5920:	movt	ip, #0
    5924:	str	r1, [sp, #12]
    5928:	mov	r1, ip
    592c:	ldr	ip, [sp, #12]
    5930:	str	ip, [sp]
    5934:	movw	lr, #1
    5938:	str	lr, [sp, #4]
    593c:	bl	5948 <read_partial_array>
    5940:	mov	sp, fp
    5944:	pop	{fp, pc}

00005948 <read_partial_array>:
    5948:	push	{r4, r5, fp, lr}
    594c:	add	fp, sp, #8
    5950:	sub	sp, sp, #568	; 0x238
    5954:	ldr	ip, [fp, #12]
    5958:	ldr	lr, [fp, #8]
    595c:	str	r0, [fp, #-16]
    5960:	str	r1, [fp, #-20]	; 0xffffffec
    5964:	str	r2, [fp, #-24]	; 0xffffffe8
    5968:	str	r3, [fp, #-28]	; 0xffffffe4
    596c:	ldr	r0, [fp, #-16]
    5970:	add	r1, sp, #24
    5974:	str	r0, [sp, #16]
    5978:	mov	r0, r1
    597c:	ldr	r1, [sp, #16]
    5980:	movw	r2, #520	; 0x208
    5984:	str	lr, [sp, #12]
    5988:	str	ip, [sp, #8]
    598c:	bl	0 <memcpy>
    5990:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5994:	cmp	r0, #0
    5998:	ble	5a60 <read_partial_array+0x118>
    599c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    59a0:	add	r0, sp, #24
    59a4:	bl	0 <coda_cursor_goto_array_element_by_index>
    59a8:	cmp	r0, #0
    59ac:	beq	59bc <read_partial_array+0x74>
    59b0:	mvn	r0, #0
    59b4:	str	r0, [fp, #-12]
    59b8:	b	5a68 <read_partial_array+0x120>
    59bc:	movw	r0, #0
    59c0:	str	r0, [sp, #20]
    59c4:	ldr	r0, [sp, #20]
    59c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    59cc:	cmp	r0, r1
    59d0:	bge	5a5c <read_partial_array+0x114>
    59d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    59d8:	ldr	r1, [fp, #8]
    59dc:	ldr	r2, [sp, #20]
    59e0:	ldr	r3, [fp, #12]
    59e4:	mul	r2, r2, r3
    59e8:	add	r1, r1, r2
    59ec:	add	r2, sp, #24
    59f0:	str	r0, [sp, #4]
    59f4:	mov	r0, r2
    59f8:	ldr	r2, [sp, #4]
    59fc:	blx	r2
    5a00:	cmp	r0, #0
    5a04:	beq	5a14 <read_partial_array+0xcc>
    5a08:	mvn	r0, #0
    5a0c:	str	r0, [fp, #-12]
    5a10:	b	5a68 <read_partial_array+0x120>
    5a14:	ldr	r0, [sp, #20]
    5a18:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5a1c:	sub	r1, r1, #1
    5a20:	cmp	r0, r1
    5a24:	bge	5a48 <read_partial_array+0x100>
    5a28:	add	r0, sp, #24
    5a2c:	bl	0 <coda_cursor_goto_next_array_element>
    5a30:	cmp	r0, #0
    5a34:	beq	5a44 <read_partial_array+0xfc>
    5a38:	mvn	r0, #0
    5a3c:	str	r0, [fp, #-12]
    5a40:	b	5a68 <read_partial_array+0x120>
    5a44:	b	5a48 <read_partial_array+0x100>
    5a48:	b	5a4c <read_partial_array+0x104>
    5a4c:	ldr	r0, [sp, #20]
    5a50:	add	r0, r0, #1
    5a54:	str	r0, [sp, #20]
    5a58:	b	59c4 <read_partial_array+0x7c>
    5a5c:	b	5a60 <read_partial_array+0x118>
    5a60:	movw	r0, #0
    5a64:	str	r0, [fp, #-12]
    5a68:	ldr	r0, [fp, #-12]
    5a6c:	sub	sp, fp, #8
    5a70:	pop	{r4, r5, fp, pc}

00005a74 <coda_ascii_cursor_read_uint8_partial_array>:
    5a74:	push	{fp, lr}
    5a78:	mov	fp, sp
    5a7c:	sub	sp, sp, #40	; 0x28
    5a80:	str	r0, [fp, #-4]
    5a84:	str	r1, [fp, #-8]
    5a88:	str	r2, [fp, #-12]
    5a8c:	str	r3, [fp, #-16]
    5a90:	ldr	r0, [fp, #-4]
    5a94:	add	r1, r0, #8
    5a98:	ldr	r0, [r0, #4]
    5a9c:	sub	r0, r0, #1
    5aa0:	add	r0, r1, r0, lsl #4
    5aa4:	ldr	r0, [r0]
    5aa8:	ldr	r0, [r0]
    5aac:	cmp	r0, #100	; 0x64
    5ab0:	bcs	5ad4 <coda_ascii_cursor_read_uint8_partial_array+0x60>
    5ab4:	ldr	r0, [fp, #-4]
    5ab8:	add	r1, r0, #8
    5abc:	ldr	r0, [r0, #4]
    5ac0:	sub	r0, r0, #1
    5ac4:	add	r0, r1, r0, lsl #4
    5ac8:	ldr	r0, [r0]
    5acc:	str	r0, [sp, #16]
    5ad0:	b	5af4 <coda_ascii_cursor_read_uint8_partial_array+0x80>
    5ad4:	ldr	r0, [fp, #-4]
    5ad8:	add	r1, r0, #8
    5adc:	ldr	r0, [r0, #4]
    5ae0:	sub	r0, r0, #1
    5ae4:	add	r0, r1, r0, lsl #4
    5ae8:	ldr	r0, [r0]
    5aec:	ldr	r0, [r0, #4]
    5af0:	str	r0, [sp, #16]
    5af4:	ldr	r0, [sp, #16]
    5af8:	str	r0, [sp, #20]
    5afc:	ldr	r0, [sp, #20]
    5b00:	ldr	r0, [r0, #40]	; 0x28
    5b04:	ldr	r0, [r0]
    5b08:	cmp	r0, #0
    5b0c:	bne	5b14 <coda_ascii_cursor_read_uint8_partial_array+0xa0>
    5b10:	b	5b34 <coda_ascii_cursor_read_uint8_partial_array+0xc0>
    5b14:	movw	r0, #0
    5b18:	movt	r0, #0
    5b1c:	movw	r1, #0
    5b20:	movt	r1, #0
    5b24:	movw	r2, #1693	; 0x69d
    5b28:	movw	r3, #0
    5b2c:	movt	r3, #0
    5b30:	bl	0 <__assert_fail>
    5b34:	ldr	r0, [fp, #-4]
    5b38:	ldr	r2, [fp, #-8]
    5b3c:	ldr	r3, [fp, #-12]
    5b40:	ldr	r1, [fp, #-16]
    5b44:	movw	ip, #0
    5b48:	movt	ip, #0
    5b4c:	str	r1, [sp, #12]
    5b50:	mov	r1, ip
    5b54:	ldr	ip, [sp, #12]
    5b58:	str	ip, [sp]
    5b5c:	movw	lr, #1
    5b60:	str	lr, [sp, #4]
    5b64:	bl	5948 <read_partial_array>
    5b68:	mov	sp, fp
    5b6c:	pop	{fp, pc}

00005b70 <coda_ascii_cursor_read_int16_partial_array>:
    5b70:	push	{fp, lr}
    5b74:	mov	fp, sp
    5b78:	sub	sp, sp, #40	; 0x28
    5b7c:	str	r0, [fp, #-4]
    5b80:	str	r1, [fp, #-8]
    5b84:	str	r2, [fp, #-12]
    5b88:	str	r3, [fp, #-16]
    5b8c:	ldr	r0, [fp, #-4]
    5b90:	add	r1, r0, #8
    5b94:	ldr	r0, [r0, #4]
    5b98:	sub	r0, r0, #1
    5b9c:	add	r0, r1, r0, lsl #4
    5ba0:	ldr	r0, [r0]
    5ba4:	ldr	r0, [r0]
    5ba8:	cmp	r0, #100	; 0x64
    5bac:	bcs	5bd0 <coda_ascii_cursor_read_int16_partial_array+0x60>
    5bb0:	ldr	r0, [fp, #-4]
    5bb4:	add	r1, r0, #8
    5bb8:	ldr	r0, [r0, #4]
    5bbc:	sub	r0, r0, #1
    5bc0:	add	r0, r1, r0, lsl #4
    5bc4:	ldr	r0, [r0]
    5bc8:	str	r0, [sp, #16]
    5bcc:	b	5bf0 <coda_ascii_cursor_read_int16_partial_array+0x80>
    5bd0:	ldr	r0, [fp, #-4]
    5bd4:	add	r1, r0, #8
    5bd8:	ldr	r0, [r0, #4]
    5bdc:	sub	r0, r0, #1
    5be0:	add	r0, r1, r0, lsl #4
    5be4:	ldr	r0, [r0]
    5be8:	ldr	r0, [r0, #4]
    5bec:	str	r0, [sp, #16]
    5bf0:	ldr	r0, [sp, #16]
    5bf4:	str	r0, [sp, #20]
    5bf8:	ldr	r0, [sp, #20]
    5bfc:	ldr	r0, [r0, #40]	; 0x28
    5c00:	ldr	r0, [r0]
    5c04:	cmp	r0, #0
    5c08:	bne	5c10 <coda_ascii_cursor_read_int16_partial_array+0xa0>
    5c0c:	b	5c30 <coda_ascii_cursor_read_int16_partial_array+0xc0>
    5c10:	movw	r0, #0
    5c14:	movt	r0, #0
    5c18:	movw	r1, #0
    5c1c:	movt	r1, #0
    5c20:	movw	r2, #1702	; 0x6a6
    5c24:	movw	r3, #0
    5c28:	movt	r3, #0
    5c2c:	bl	0 <__assert_fail>
    5c30:	movw	r0, #0
    5c34:	movt	r0, #0
    5c38:	ldr	r1, [fp, #-4]
    5c3c:	ldr	r2, [fp, #-8]
    5c40:	ldr	r3, [fp, #-12]
    5c44:	ldr	ip, [fp, #-16]
    5c48:	str	r0, [sp, #12]
    5c4c:	mov	r0, r1
    5c50:	ldr	r1, [sp, #12]
    5c54:	str	ip, [sp]
    5c58:	movw	ip, #2
    5c5c:	str	ip, [sp, #4]
    5c60:	bl	5948 <read_partial_array>
    5c64:	mov	sp, fp
    5c68:	pop	{fp, pc}

00005c6c <coda_ascii_cursor_read_uint16_partial_array>:
    5c6c:	push	{fp, lr}
    5c70:	mov	fp, sp
    5c74:	sub	sp, sp, #40	; 0x28
    5c78:	str	r0, [fp, #-4]
    5c7c:	str	r1, [fp, #-8]
    5c80:	str	r2, [fp, #-12]
    5c84:	str	r3, [fp, #-16]
    5c88:	ldr	r0, [fp, #-4]
    5c8c:	add	r1, r0, #8
    5c90:	ldr	r0, [r0, #4]
    5c94:	sub	r0, r0, #1
    5c98:	add	r0, r1, r0, lsl #4
    5c9c:	ldr	r0, [r0]
    5ca0:	ldr	r0, [r0]
    5ca4:	cmp	r0, #100	; 0x64
    5ca8:	bcs	5ccc <coda_ascii_cursor_read_uint16_partial_array+0x60>
    5cac:	ldr	r0, [fp, #-4]
    5cb0:	add	r1, r0, #8
    5cb4:	ldr	r0, [r0, #4]
    5cb8:	sub	r0, r0, #1
    5cbc:	add	r0, r1, r0, lsl #4
    5cc0:	ldr	r0, [r0]
    5cc4:	str	r0, [sp, #16]
    5cc8:	b	5cec <coda_ascii_cursor_read_uint16_partial_array+0x80>
    5ccc:	ldr	r0, [fp, #-4]
    5cd0:	add	r1, r0, #8
    5cd4:	ldr	r0, [r0, #4]
    5cd8:	sub	r0, r0, #1
    5cdc:	add	r0, r1, r0, lsl #4
    5ce0:	ldr	r0, [r0]
    5ce4:	ldr	r0, [r0, #4]
    5ce8:	str	r0, [sp, #16]
    5cec:	ldr	r0, [sp, #16]
    5cf0:	str	r0, [sp, #20]
    5cf4:	ldr	r0, [sp, #20]
    5cf8:	ldr	r0, [r0, #40]	; 0x28
    5cfc:	ldr	r0, [r0]
    5d00:	cmp	r0, #0
    5d04:	bne	5d0c <coda_ascii_cursor_read_uint16_partial_array+0xa0>
    5d08:	b	5d2c <coda_ascii_cursor_read_uint16_partial_array+0xc0>
    5d0c:	movw	r0, #0
    5d10:	movt	r0, #0
    5d14:	movw	r1, #0
    5d18:	movt	r1, #0
    5d1c:	movw	r2, #1711	; 0x6af
    5d20:	movw	r3, #0
    5d24:	movt	r3, #0
    5d28:	bl	0 <__assert_fail>
    5d2c:	movw	r0, #0
    5d30:	movt	r0, #0
    5d34:	ldr	r1, [fp, #-4]
    5d38:	ldr	r2, [fp, #-8]
    5d3c:	ldr	r3, [fp, #-12]
    5d40:	ldr	ip, [fp, #-16]
    5d44:	str	r0, [sp, #12]
    5d48:	mov	r0, r1
    5d4c:	ldr	r1, [sp, #12]
    5d50:	str	ip, [sp]
    5d54:	movw	ip, #2
    5d58:	str	ip, [sp, #4]
    5d5c:	bl	5948 <read_partial_array>
    5d60:	mov	sp, fp
    5d64:	pop	{fp, pc}

00005d68 <coda_ascii_cursor_read_int32_partial_array>:
    5d68:	push	{fp, lr}
    5d6c:	mov	fp, sp
    5d70:	sub	sp, sp, #40	; 0x28
    5d74:	str	r0, [fp, #-4]
    5d78:	str	r1, [fp, #-8]
    5d7c:	str	r2, [fp, #-12]
    5d80:	str	r3, [fp, #-16]
    5d84:	ldr	r0, [fp, #-4]
    5d88:	add	r1, r0, #8
    5d8c:	ldr	r0, [r0, #4]
    5d90:	sub	r0, r0, #1
    5d94:	add	r0, r1, r0, lsl #4
    5d98:	ldr	r0, [r0]
    5d9c:	ldr	r0, [r0]
    5da0:	cmp	r0, #100	; 0x64
    5da4:	bcs	5dc8 <coda_ascii_cursor_read_int32_partial_array+0x60>
    5da8:	ldr	r0, [fp, #-4]
    5dac:	add	r1, r0, #8
    5db0:	ldr	r0, [r0, #4]
    5db4:	sub	r0, r0, #1
    5db8:	add	r0, r1, r0, lsl #4
    5dbc:	ldr	r0, [r0]
    5dc0:	str	r0, [sp, #16]
    5dc4:	b	5de8 <coda_ascii_cursor_read_int32_partial_array+0x80>
    5dc8:	ldr	r0, [fp, #-4]
    5dcc:	add	r1, r0, #8
    5dd0:	ldr	r0, [r0, #4]
    5dd4:	sub	r0, r0, #1
    5dd8:	add	r0, r1, r0, lsl #4
    5ddc:	ldr	r0, [r0]
    5de0:	ldr	r0, [r0, #4]
    5de4:	str	r0, [sp, #16]
    5de8:	ldr	r0, [sp, #16]
    5dec:	str	r0, [sp, #20]
    5df0:	ldr	r0, [sp, #20]
    5df4:	ldr	r0, [r0, #40]	; 0x28
    5df8:	ldr	r0, [r0]
    5dfc:	cmp	r0, #0
    5e00:	bne	5e08 <coda_ascii_cursor_read_int32_partial_array+0xa0>
    5e04:	b	5e28 <coda_ascii_cursor_read_int32_partial_array+0xc0>
    5e08:	movw	r0, #0
    5e0c:	movt	r0, #0
    5e10:	movw	r1, #0
    5e14:	movt	r1, #0
    5e18:	movw	r2, #1720	; 0x6b8
    5e1c:	movw	r3, #0
    5e20:	movt	r3, #0
    5e24:	bl	0 <__assert_fail>
    5e28:	movw	r0, #0
    5e2c:	movt	r0, #0
    5e30:	ldr	r1, [fp, #-4]
    5e34:	ldr	r2, [fp, #-8]
    5e38:	ldr	r3, [fp, #-12]
    5e3c:	ldr	ip, [fp, #-16]
    5e40:	str	r0, [sp, #12]
    5e44:	mov	r0, r1
    5e48:	ldr	r1, [sp, #12]
    5e4c:	str	ip, [sp]
    5e50:	movw	ip, #4
    5e54:	str	ip, [sp, #4]
    5e58:	bl	5948 <read_partial_array>
    5e5c:	mov	sp, fp
    5e60:	pop	{fp, pc}

00005e64 <coda_ascii_cursor_read_uint32_partial_array>:
    5e64:	push	{fp, lr}
    5e68:	mov	fp, sp
    5e6c:	sub	sp, sp, #40	; 0x28
    5e70:	str	r0, [fp, #-4]
    5e74:	str	r1, [fp, #-8]
    5e78:	str	r2, [fp, #-12]
    5e7c:	str	r3, [fp, #-16]
    5e80:	ldr	r0, [fp, #-4]
    5e84:	add	r1, r0, #8
    5e88:	ldr	r0, [r0, #4]
    5e8c:	sub	r0, r0, #1
    5e90:	add	r0, r1, r0, lsl #4
    5e94:	ldr	r0, [r0]
    5e98:	ldr	r0, [r0]
    5e9c:	cmp	r0, #100	; 0x64
    5ea0:	bcs	5ec4 <coda_ascii_cursor_read_uint32_partial_array+0x60>
    5ea4:	ldr	r0, [fp, #-4]
    5ea8:	add	r1, r0, #8
    5eac:	ldr	r0, [r0, #4]
    5eb0:	sub	r0, r0, #1
    5eb4:	add	r0, r1, r0, lsl #4
    5eb8:	ldr	r0, [r0]
    5ebc:	str	r0, [sp, #16]
    5ec0:	b	5ee4 <coda_ascii_cursor_read_uint32_partial_array+0x80>
    5ec4:	ldr	r0, [fp, #-4]
    5ec8:	add	r1, r0, #8
    5ecc:	ldr	r0, [r0, #4]
    5ed0:	sub	r0, r0, #1
    5ed4:	add	r0, r1, r0, lsl #4
    5ed8:	ldr	r0, [r0]
    5edc:	ldr	r0, [r0, #4]
    5ee0:	str	r0, [sp, #16]
    5ee4:	ldr	r0, [sp, #16]
    5ee8:	str	r0, [sp, #20]
    5eec:	ldr	r0, [sp, #20]
    5ef0:	ldr	r0, [r0, #40]	; 0x28
    5ef4:	ldr	r0, [r0]
    5ef8:	cmp	r0, #0
    5efc:	bne	5f04 <coda_ascii_cursor_read_uint32_partial_array+0xa0>
    5f00:	b	5f24 <coda_ascii_cursor_read_uint32_partial_array+0xc0>
    5f04:	movw	r0, #0
    5f08:	movt	r0, #0
    5f0c:	movw	r1, #0
    5f10:	movt	r1, #0
    5f14:	movw	r2, #1729	; 0x6c1
    5f18:	movw	r3, #0
    5f1c:	movt	r3, #0
    5f20:	bl	0 <__assert_fail>
    5f24:	movw	r0, #0
    5f28:	movt	r0, #0
    5f2c:	ldr	r1, [fp, #-4]
    5f30:	ldr	r2, [fp, #-8]
    5f34:	ldr	r3, [fp, #-12]
    5f38:	ldr	ip, [fp, #-16]
    5f3c:	str	r0, [sp, #12]
    5f40:	mov	r0, r1
    5f44:	ldr	r1, [sp, #12]
    5f48:	str	ip, [sp]
    5f4c:	movw	ip, #4
    5f50:	str	ip, [sp, #4]
    5f54:	bl	5948 <read_partial_array>
    5f58:	mov	sp, fp
    5f5c:	pop	{fp, pc}

00005f60 <coda_ascii_cursor_read_int64_partial_array>:
    5f60:	push	{fp, lr}
    5f64:	mov	fp, sp
    5f68:	sub	sp, sp, #40	; 0x28
    5f6c:	str	r0, [fp, #-4]
    5f70:	str	r1, [fp, #-8]
    5f74:	str	r2, [fp, #-12]
    5f78:	str	r3, [fp, #-16]
    5f7c:	ldr	r0, [fp, #-4]
    5f80:	add	r1, r0, #8
    5f84:	ldr	r0, [r0, #4]
    5f88:	sub	r0, r0, #1
    5f8c:	add	r0, r1, r0, lsl #4
    5f90:	ldr	r0, [r0]
    5f94:	ldr	r0, [r0]
    5f98:	cmp	r0, #100	; 0x64
    5f9c:	bcs	5fc0 <coda_ascii_cursor_read_int64_partial_array+0x60>
    5fa0:	ldr	r0, [fp, #-4]
    5fa4:	add	r1, r0, #8
    5fa8:	ldr	r0, [r0, #4]
    5fac:	sub	r0, r0, #1
    5fb0:	add	r0, r1, r0, lsl #4
    5fb4:	ldr	r0, [r0]
    5fb8:	str	r0, [sp, #16]
    5fbc:	b	5fe0 <coda_ascii_cursor_read_int64_partial_array+0x80>
    5fc0:	ldr	r0, [fp, #-4]
    5fc4:	add	r1, r0, #8
    5fc8:	ldr	r0, [r0, #4]
    5fcc:	sub	r0, r0, #1
    5fd0:	add	r0, r1, r0, lsl #4
    5fd4:	ldr	r0, [r0]
    5fd8:	ldr	r0, [r0, #4]
    5fdc:	str	r0, [sp, #16]
    5fe0:	ldr	r0, [sp, #16]
    5fe4:	str	r0, [sp, #20]
    5fe8:	ldr	r0, [sp, #20]
    5fec:	ldr	r0, [r0, #40]	; 0x28
    5ff0:	ldr	r0, [r0]
    5ff4:	cmp	r0, #0
    5ff8:	bne	6000 <coda_ascii_cursor_read_int64_partial_array+0xa0>
    5ffc:	b	6020 <coda_ascii_cursor_read_int64_partial_array+0xc0>
    6000:	movw	r0, #0
    6004:	movt	r0, #0
    6008:	movw	r1, #0
    600c:	movt	r1, #0
    6010:	movw	r2, #1738	; 0x6ca
    6014:	movw	r3, #0
    6018:	movt	r3, #0
    601c:	bl	0 <__assert_fail>
    6020:	movw	r0, #0
    6024:	movt	r0, #0
    6028:	ldr	r1, [fp, #-4]
    602c:	ldr	r2, [fp, #-8]
    6030:	ldr	r3, [fp, #-12]
    6034:	ldr	ip, [fp, #-16]
    6038:	str	r0, [sp, #12]
    603c:	mov	r0, r1
    6040:	ldr	r1, [sp, #12]
    6044:	str	ip, [sp]
    6048:	movw	ip, #8
    604c:	str	ip, [sp, #4]
    6050:	bl	5948 <read_partial_array>
    6054:	mov	sp, fp
    6058:	pop	{fp, pc}

0000605c <coda_ascii_cursor_read_uint64_partial_array>:
    605c:	push	{fp, lr}
    6060:	mov	fp, sp
    6064:	sub	sp, sp, #40	; 0x28
    6068:	str	r0, [fp, #-4]
    606c:	str	r1, [fp, #-8]
    6070:	str	r2, [fp, #-12]
    6074:	str	r3, [fp, #-16]
    6078:	ldr	r0, [fp, #-4]
    607c:	add	r1, r0, #8
    6080:	ldr	r0, [r0, #4]
    6084:	sub	r0, r0, #1
    6088:	add	r0, r1, r0, lsl #4
    608c:	ldr	r0, [r0]
    6090:	ldr	r0, [r0]
    6094:	cmp	r0, #100	; 0x64
    6098:	bcs	60bc <coda_ascii_cursor_read_uint64_partial_array+0x60>
    609c:	ldr	r0, [fp, #-4]
    60a0:	add	r1, r0, #8
    60a4:	ldr	r0, [r0, #4]
    60a8:	sub	r0, r0, #1
    60ac:	add	r0, r1, r0, lsl #4
    60b0:	ldr	r0, [r0]
    60b4:	str	r0, [sp, #16]
    60b8:	b	60dc <coda_ascii_cursor_read_uint64_partial_array+0x80>
    60bc:	ldr	r0, [fp, #-4]
    60c0:	add	r1, r0, #8
    60c4:	ldr	r0, [r0, #4]
    60c8:	sub	r0, r0, #1
    60cc:	add	r0, r1, r0, lsl #4
    60d0:	ldr	r0, [r0]
    60d4:	ldr	r0, [r0, #4]
    60d8:	str	r0, [sp, #16]
    60dc:	ldr	r0, [sp, #16]
    60e0:	str	r0, [sp, #20]
    60e4:	ldr	r0, [sp, #20]
    60e8:	ldr	r0, [r0, #40]	; 0x28
    60ec:	ldr	r0, [r0]
    60f0:	cmp	r0, #0
    60f4:	bne	60fc <coda_ascii_cursor_read_uint64_partial_array+0xa0>
    60f8:	b	611c <coda_ascii_cursor_read_uint64_partial_array+0xc0>
    60fc:	movw	r0, #0
    6100:	movt	r0, #0
    6104:	movw	r1, #0
    6108:	movt	r1, #0
    610c:	movw	r2, #1747	; 0x6d3
    6110:	movw	r3, #0
    6114:	movt	r3, #0
    6118:	bl	0 <__assert_fail>
    611c:	movw	r0, #0
    6120:	movt	r0, #0
    6124:	ldr	r1, [fp, #-4]
    6128:	ldr	r2, [fp, #-8]
    612c:	ldr	r3, [fp, #-12]
    6130:	ldr	ip, [fp, #-16]
    6134:	str	r0, [sp, #12]
    6138:	mov	r0, r1
    613c:	ldr	r1, [sp, #12]
    6140:	str	ip, [sp]
    6144:	movw	ip, #8
    6148:	str	ip, [sp, #4]
    614c:	bl	5948 <read_partial_array>
    6150:	mov	sp, fp
    6154:	pop	{fp, pc}

00006158 <coda_ascii_cursor_read_float_partial_array>:
    6158:	push	{fp, lr}
    615c:	mov	fp, sp
    6160:	sub	sp, sp, #40	; 0x28
    6164:	str	r0, [fp, #-4]
    6168:	str	r1, [fp, #-8]
    616c:	str	r2, [fp, #-12]
    6170:	str	r3, [fp, #-16]
    6174:	ldr	r0, [fp, #-4]
    6178:	add	r1, r0, #8
    617c:	ldr	r0, [r0, #4]
    6180:	sub	r0, r0, #1
    6184:	add	r0, r1, r0, lsl #4
    6188:	ldr	r0, [r0]
    618c:	ldr	r0, [r0]
    6190:	cmp	r0, #100	; 0x64
    6194:	bcs	61b8 <coda_ascii_cursor_read_float_partial_array+0x60>
    6198:	ldr	r0, [fp, #-4]
    619c:	add	r1, r0, #8
    61a0:	ldr	r0, [r0, #4]
    61a4:	sub	r0, r0, #1
    61a8:	add	r0, r1, r0, lsl #4
    61ac:	ldr	r0, [r0]
    61b0:	str	r0, [sp, #16]
    61b4:	b	61d8 <coda_ascii_cursor_read_float_partial_array+0x80>
    61b8:	ldr	r0, [fp, #-4]
    61bc:	add	r1, r0, #8
    61c0:	ldr	r0, [r0, #4]
    61c4:	sub	r0, r0, #1
    61c8:	add	r0, r1, r0, lsl #4
    61cc:	ldr	r0, [r0]
    61d0:	ldr	r0, [r0, #4]
    61d4:	str	r0, [sp, #16]
    61d8:	ldr	r0, [sp, #16]
    61dc:	str	r0, [sp, #20]
    61e0:	ldr	r0, [sp, #20]
    61e4:	ldr	r0, [r0, #40]	; 0x28
    61e8:	ldr	r0, [r0]
    61ec:	cmp	r0, #0
    61f0:	bne	61f8 <coda_ascii_cursor_read_float_partial_array+0xa0>
    61f4:	b	6218 <coda_ascii_cursor_read_float_partial_array+0xc0>
    61f8:	movw	r0, #0
    61fc:	movt	r0, #0
    6200:	movw	r1, #0
    6204:	movt	r1, #0
    6208:	movw	r2, #1756	; 0x6dc
    620c:	movw	r3, #0
    6210:	movt	r3, #0
    6214:	bl	0 <__assert_fail>
    6218:	movw	r0, #0
    621c:	movt	r0, #0
    6220:	ldr	r1, [fp, #-4]
    6224:	ldr	r2, [fp, #-8]
    6228:	ldr	r3, [fp, #-12]
    622c:	ldr	ip, [fp, #-16]
    6230:	str	r0, [sp, #12]
    6234:	mov	r0, r1
    6238:	ldr	r1, [sp, #12]
    623c:	str	ip, [sp]
    6240:	movw	ip, #4
    6244:	str	ip, [sp, #4]
    6248:	bl	5948 <read_partial_array>
    624c:	mov	sp, fp
    6250:	pop	{fp, pc}

00006254 <coda_ascii_cursor_read_double_partial_array>:
    6254:	push	{fp, lr}
    6258:	mov	fp, sp
    625c:	sub	sp, sp, #40	; 0x28
    6260:	str	r0, [fp, #-4]
    6264:	str	r1, [fp, #-8]
    6268:	str	r2, [fp, #-12]
    626c:	str	r3, [fp, #-16]
    6270:	ldr	r0, [fp, #-4]
    6274:	add	r1, r0, #8
    6278:	ldr	r0, [r0, #4]
    627c:	sub	r0, r0, #1
    6280:	add	r0, r1, r0, lsl #4
    6284:	ldr	r0, [r0]
    6288:	ldr	r0, [r0]
    628c:	cmp	r0, #100	; 0x64
    6290:	bcs	62b4 <coda_ascii_cursor_read_double_partial_array+0x60>
    6294:	ldr	r0, [fp, #-4]
    6298:	add	r1, r0, #8
    629c:	ldr	r0, [r0, #4]
    62a0:	sub	r0, r0, #1
    62a4:	add	r0, r1, r0, lsl #4
    62a8:	ldr	r0, [r0]
    62ac:	str	r0, [sp, #16]
    62b0:	b	62d4 <coda_ascii_cursor_read_double_partial_array+0x80>
    62b4:	ldr	r0, [fp, #-4]
    62b8:	add	r1, r0, #8
    62bc:	ldr	r0, [r0, #4]
    62c0:	sub	r0, r0, #1
    62c4:	add	r0, r1, r0, lsl #4
    62c8:	ldr	r0, [r0]
    62cc:	ldr	r0, [r0, #4]
    62d0:	str	r0, [sp, #16]
    62d4:	ldr	r0, [sp, #16]
    62d8:	str	r0, [sp, #20]
    62dc:	ldr	r0, [sp, #20]
    62e0:	ldr	r0, [r0, #40]	; 0x28
    62e4:	ldr	r0, [r0]
    62e8:	cmp	r0, #0
    62ec:	bne	62f4 <coda_ascii_cursor_read_double_partial_array+0xa0>
    62f0:	b	6314 <coda_ascii_cursor_read_double_partial_array+0xc0>
    62f4:	movw	r0, #0
    62f8:	movt	r0, #0
    62fc:	movw	r1, #0
    6300:	movt	r1, #0
    6304:	movw	r2, #1765	; 0x6e5
    6308:	movw	r3, #0
    630c:	movt	r3, #0
    6310:	bl	0 <__assert_fail>
    6314:	movw	r0, #0
    6318:	movt	r0, #0
    631c:	ldr	r1, [fp, #-4]
    6320:	ldr	r2, [fp, #-8]
    6324:	ldr	r3, [fp, #-12]
    6328:	ldr	ip, [fp, #-16]
    632c:	str	r0, [sp, #12]
    6330:	mov	r0, r1
    6334:	ldr	r1, [sp, #12]
    6338:	str	ip, [sp]
    633c:	movw	ip, #8
    6340:	str	ip, [sp, #4]
    6344:	bl	5948 <read_partial_array>
    6348:	mov	sp, fp
    634c:	pop	{fp, pc}

00006350 <coda_ascii_cursor_read_char_partial_array>:
    6350:	push	{fp, lr}
    6354:	mov	fp, sp
    6358:	sub	sp, sp, #40	; 0x28
    635c:	str	r0, [fp, #-4]
    6360:	str	r1, [fp, #-8]
    6364:	str	r2, [fp, #-12]
    6368:	str	r3, [fp, #-16]
    636c:	ldr	r0, [fp, #-4]
    6370:	add	r1, r0, #8
    6374:	ldr	r0, [r0, #4]
    6378:	sub	r0, r0, #1
    637c:	add	r0, r1, r0, lsl #4
    6380:	ldr	r0, [r0]
    6384:	ldr	r0, [r0]
    6388:	cmp	r0, #100	; 0x64
    638c:	bcs	63b0 <coda_ascii_cursor_read_char_partial_array+0x60>
    6390:	ldr	r0, [fp, #-4]
    6394:	add	r1, r0, #8
    6398:	ldr	r0, [r0, #4]
    639c:	sub	r0, r0, #1
    63a0:	add	r0, r1, r0, lsl #4
    63a4:	ldr	r0, [r0]
    63a8:	str	r0, [sp, #16]
    63ac:	b	63d0 <coda_ascii_cursor_read_char_partial_array+0x80>
    63b0:	ldr	r0, [fp, #-4]
    63b4:	add	r1, r0, #8
    63b8:	ldr	r0, [r0, #4]
    63bc:	sub	r0, r0, #1
    63c0:	add	r0, r1, r0, lsl #4
    63c4:	ldr	r0, [r0]
    63c8:	ldr	r0, [r0, #4]
    63cc:	str	r0, [sp, #16]
    63d0:	ldr	r0, [sp, #16]
    63d4:	str	r0, [sp, #20]
    63d8:	ldr	r0, [sp, #20]
    63dc:	ldr	r0, [r0, #40]	; 0x28
    63e0:	ldr	r0, [r0]
    63e4:	cmp	r0, #0
    63e8:	bne	63f0 <coda_ascii_cursor_read_char_partial_array+0xa0>
    63ec:	b	6410 <coda_ascii_cursor_read_char_partial_array+0xc0>
    63f0:	movw	r0, #0
    63f4:	movt	r0, #0
    63f8:	movw	r1, #0
    63fc:	movt	r1, #0
    6400:	movw	r2, #1774	; 0x6ee
    6404:	movw	r3, #0
    6408:	movt	r3, #0
    640c:	bl	0 <__assert_fail>
    6410:	ldr	r0, [fp, #-4]
    6414:	ldr	r2, [fp, #-8]
    6418:	ldr	r3, [fp, #-12]
    641c:	ldr	r1, [fp, #-16]
    6420:	movw	ip, #0
    6424:	movt	ip, #0
    6428:	str	r1, [sp, #12]
    642c:	mov	r1, ip
    6430:	ldr	ip, [sp, #12]
    6434:	str	ip, [sp]
    6438:	movw	lr, #1
    643c:	str	lr, [sp, #4]
    6440:	bl	5948 <read_partial_array>
    6444:	mov	sp, fp
    6448:	pop	{fp, pc}
