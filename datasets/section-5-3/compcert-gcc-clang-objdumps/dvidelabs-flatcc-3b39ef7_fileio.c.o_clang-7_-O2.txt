
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/fileio.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_copy_path_n>:
   0:	push	{r4, r5, r6, r7, fp, lr}
   4:	add	fp, sp, #16
   8:	mov	r4, r1
   c:	mov	r1, #0
  10:	mov	r5, r0
  14:	mov	r7, #0
  18:	mov	r2, r4
  1c:	bl	0 <memchr>
  20:	cmp	r0, #0
  24:	subne	r4, r0, r5
  28:	add	r0, r4, #1
  2c:	bl	0 <malloc>
  30:	mov	r6, r0
  34:	cmp	r0, #0
  38:	beq	50 <__flatcc_fb_copy_path_n+0x50>
  3c:	mov	r0, r6
  40:	mov	r1, r5
  44:	mov	r2, r4
  48:	bl	0 <memcpy>
  4c:	strb	r7, [r6, r4]
  50:	mov	r0, r6
  54:	pop	{r4, r5, r6, r7, fp, pc}

00000058 <__flatcc_fb_copy_path>:
  58:	push	{r4, r5, r6, sl, fp, lr}
  5c:	add	fp, sp, #16
  60:	mov	r5, r0
  64:	bl	0 <strlen>
  68:	mov	r4, r0
  6c:	add	r0, r0, #1
  70:	bl	0 <malloc>
  74:	mov	r6, r0
  78:	cmp	r0, #0
  7c:	beq	98 <__flatcc_fb_copy_path+0x40>
  80:	mov	r0, r6
  84:	mov	r1, r5
  88:	mov	r2, r4
  8c:	bl	0 <memcpy>
  90:	mov	r0, #0
  94:	strb	r0, [r6, r4]
  98:	mov	r0, r6
  9c:	pop	{r4, r5, r6, sl, fp, pc}

000000a0 <__flatcc_fb_chomp>:
  a0:	push	{r4, r5, r6, r7, fp, lr}
  a4:	add	fp, sp, #16
  a8:	mov	r5, r2
  ac:	mov	r4, r1
  b0:	mov	r7, r0
  b4:	cmp	r2, #0
  b8:	beq	f4 <__flatcc_fb_chomp+0x54>
  bc:	mov	r0, r5
  c0:	bl	0 <strlen>
  c4:	mov	r6, r0
  c8:	cmp	r6, r4
  cc:	bcs	ec <__flatcc_fb_chomp+0x4c>
  d0:	add	r0, r7, r4
  d4:	mov	r1, r5
  d8:	mov	r2, r6
  dc:	sub	r0, r0, r6
  e0:	bl	0 <strncmp>
  e4:	cmp	r0, #0
  e8:	subeq	r4, r4, r6
  ec:	mov	r0, r4
  f0:	pop	{r4, r5, r6, r7, fp, pc}
  f4:	mov	r6, #0
  f8:	cmp	r6, r4
  fc:	bcc	d0 <__flatcc_fb_chomp+0x30>
 100:	b	ec <__flatcc_fb_chomp+0x4c>

00000104 <__flatcc_fb_create_join_path_n>:
 104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 108:	add	fp, sp, #28
 10c:	sub	sp, sp, #12
 110:	mov	r6, r0
 114:	ldr	r0, [fp, #8]
 118:	mov	r7, r3
 11c:	mov	r4, r2
 120:	mov	r5, r1
 124:	cmp	r0, #0
 128:	beq	134 <__flatcc_fb_create_join_path_n+0x30>
 12c:	bl	0 <strlen>
 130:	b	138 <__flatcc_fb_create_join_path_n+0x34>
 134:	mov	r0, #0
 138:	ldr	r8, [fp, #12]
 13c:	cmp	r6, #0
 140:	beq	15c <__flatcc_fb_create_join_path_n+0x58>
 144:	cmp	r7, #0
 148:	beq	160 <__flatcc_fb_create_join_path_n+0x5c>
 14c:	ldrb	r1, [r4]
 150:	cmp	r1, #47	; 0x2f
 154:	cmpne	r1, #92	; 0x5c
 158:	bne	220 <__flatcc_fb_create_join_path_n+0x11c>
 15c:	mov	r5, #0
 160:	cmp	r8, #0
 164:	str	r4, [sp, #8]
 168:	cmpne	r5, #0
 16c:	bne	178 <__flatcc_fb_create_join_path_n+0x74>
 170:	mov	r8, #0
 174:	b	18c <__flatcc_fb_create_join_path_n+0x88>
 178:	add	r1, r6, r5
 17c:	ldrb	r1, [r1, #-1]
 180:	cmp	r1, #92	; 0x5c
 184:	cmpne	r1, #47	; 0x2f
 188:	moveq	r8, #0
 18c:	add	r4, r5, #1
 190:	str	r0, [sp, #4]
 194:	str	r7, [sp]
 198:	add	sl, r4, r7
 19c:	add	r9, sl, r0
 1a0:	add	r0, r9, r8
 1a4:	bl	0 <malloc>
 1a8:	mov	r7, r0
 1ac:	cmp	r0, #0
 1b0:	beq	214 <__flatcc_fb_create_join_path_n+0x110>
 1b4:	mov	r0, r7
 1b8:	mov	r1, r6
 1bc:	mov	r2, r5
 1c0:	bl	0 <memcpy>
 1c4:	cmp	r8, #0
 1c8:	beq	1e0 <__flatcc_fb_create_join_path_n+0xdc>
 1cc:	mov	r0, #47	; 0x2f
 1d0:	strb	r0, [r7, r5]
 1d4:	mov	r5, r4
 1d8:	ldm	sp, {r2, r4}
 1dc:	b	1f0 <__flatcc_fb_create_join_path_n+0xec>
 1e0:	ldr	r2, [sp]
 1e4:	ldr	r4, [sp, #4]
 1e8:	add	sl, r5, r2
 1ec:	add	r9, sl, r4
 1f0:	ldr	r1, [sp, #8]
 1f4:	add	r0, r7, r5
 1f8:	bl	0 <memcpy>
 1fc:	ldr	r1, [fp, #8]
 200:	add	r0, r7, sl
 204:	mov	r2, r4
 208:	bl	0 <memcpy>
 20c:	mov	r0, #0
 210:	strb	r0, [r7, r9]
 214:	mov	r0, r7
 218:	sub	sp, fp, #28
 21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 220:	cmp	r7, #2
 224:	bcc	160 <__flatcc_fb_create_join_path_n+0x5c>
 228:	ldrb	r1, [r4, #1]
 22c:	cmp	r1, #58	; 0x3a
 230:	moveq	r5, #0
 234:	b	160 <__flatcc_fb_create_join_path_n+0x5c>

00000238 <__flatcc_fb_create_join_path>:
 238:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 23c:	add	fp, sp, #24
 240:	sub	sp, sp, #8
 244:	mov	r8, r3
 248:	mov	r9, r2
 24c:	mov	r4, r1
 250:	mov	r6, r0
 254:	mov	r5, #0
 258:	cmp	r0, #0
 25c:	mov	r7, #0
 260:	beq	270 <__flatcc_fb_create_join_path+0x38>
 264:	mov	r0, r6
 268:	bl	0 <strlen>
 26c:	mov	r7, r0
 270:	cmp	r4, #0
 274:	beq	284 <__flatcc_fb_create_join_path+0x4c>
 278:	mov	r0, r4
 27c:	bl	0 <strlen>
 280:	mov	r5, r0
 284:	mov	r0, r6
 288:	mov	r1, r7
 28c:	mov	r2, r4
 290:	mov	r3, r5
 294:	str	r9, [sp]
 298:	str	r8, [sp, #4]
 29c:	bl	104 <__flatcc_fb_create_join_path_n>
 2a0:	sub	sp, fp, #24
 2a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000002a8 <__flatcc_fb_create_path_ext_n>:
 2a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 2ac:	add	fp, sp, #24
 2b0:	mov	r4, r2
 2b4:	mov	r5, r1
 2b8:	mov	r8, r0
 2bc:	cmp	r2, #0
 2c0:	beq	2d4 <__flatcc_fb_create_path_ext_n+0x2c>
 2c4:	mov	r0, r4
 2c8:	bl	0 <strlen>
 2cc:	mov	r9, r0
 2d0:	b	2d8 <__flatcc_fb_create_path_ext_n+0x30>
 2d4:	mov	r9, #0
 2d8:	add	r7, r9, r5
 2dc:	add	r0, r7, #1
 2e0:	bl	0 <malloc>
 2e4:	mov	r6, r0
 2e8:	cmp	r0, #0
 2ec:	beq	318 <__flatcc_fb_create_path_ext_n+0x70>
 2f0:	mov	r0, r6
 2f4:	mov	r1, r8
 2f8:	mov	r2, r5
 2fc:	bl	0 <memcpy>
 300:	add	r0, r6, r5
 304:	mov	r1, r4
 308:	mov	r2, r9
 30c:	bl	0 <memcpy>
 310:	mov	r0, #0
 314:	strb	r0, [r6, r7]
 318:	mov	r0, r6
 31c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000320 <__flatcc_fb_create_path_ext>:
 320:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 324:	add	fp, sp, #24
 328:	mov	r8, r1
 32c:	mov	r6, r0
 330:	mov	r9, #0
 334:	cmp	r0, #0
 338:	mov	r7, #0
 33c:	beq	34c <__flatcc_fb_create_path_ext+0x2c>
 340:	mov	r0, r6
 344:	bl	0 <strlen>
 348:	mov	r7, r0
 34c:	cmp	r8, #0
 350:	beq	360 <__flatcc_fb_create_path_ext+0x40>
 354:	mov	r0, r8
 358:	bl	0 <strlen>
 35c:	mov	r9, r0
 360:	add	r5, r9, r7
 364:	add	r0, r5, #1
 368:	bl	0 <malloc>
 36c:	mov	r4, r0
 370:	cmp	r0, #0
 374:	beq	3a0 <__flatcc_fb_create_path_ext+0x80>
 378:	mov	r0, r4
 37c:	mov	r1, r6
 380:	mov	r2, r7
 384:	bl	0 <memcpy>
 388:	add	r0, r4, r7
 38c:	mov	r1, r8
 390:	mov	r2, r9
 394:	bl	0 <memcpy>
 398:	mov	r0, #0
 39c:	strb	r0, [r4, r5]
 3a0:	mov	r0, r4
 3a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000003a8 <__flatcc_fb_create_make_path_n>:
 3a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 3ac:	add	fp, sp, #24
 3b0:	mov	r6, r1
 3b4:	mov	r8, r0
 3b8:	cmp	r1, #0
 3bc:	beq	408 <__flatcc_fb_create_make_path_n+0x60>
 3c0:	cmp	r6, #1
 3c4:	bne	454 <__flatcc_fb_create_make_path_n+0xac>
 3c8:	ldrb	r5, [r8]
 3cc:	cmp	r5, #92	; 0x5c
 3d0:	cmpne	r5, #32
 3d4:	bne	408 <__flatcc_fb_create_make_path_n+0x60>
 3d8:	mov	r0, #3
 3dc:	bl	0 <malloc>
 3e0:	cmp	r0, #0
 3e4:	beq	534 <__flatcc_fb_create_make_path_n+0x18c>
 3e8:	mov	r4, r0
 3ec:	strb	r5, [r0, #1]
 3f0:	mov	r0, #92	; 0x5c
 3f4:	strb	r0, [r4]
 3f8:	mov	r0, #0
 3fc:	strb	r0, [r4, #2]
 400:	mov	r0, r4
 404:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 408:	mov	r0, r8
 40c:	mov	r1, #0
 410:	mov	r2, r6
 414:	mov	r4, #0
 418:	bl	0 <memchr>
 41c:	cmp	r0, #0
 420:	subne	r6, r0, r8
 424:	add	r0, r6, #1
 428:	bl	0 <malloc>
 42c:	cmp	r0, #0
 430:	beq	52c <__flatcc_fb_create_make_path_n+0x184>
 434:	mov	r1, r8
 438:	mov	r2, r6
 43c:	mov	r7, r0
 440:	bl	0 <memcpy>
 444:	mov	r0, #0
 448:	strb	r0, [r7, r6]
 44c:	mov	r0, r7
 450:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 454:	mov	r0, r8
 458:	sub	r5, r6, #1
 45c:	ldrb	r9, [r0], #1
 460:	mov	r1, r5
 464:	mov	r2, r9
 468:	ldrb	r3, [r0], #1
 46c:	eor	r4, r2, #92	; 0x5c
 470:	uxtb	r2, r2
 474:	cmp	r2, #32
 478:	eor	r7, r3, #32
 47c:	mov	r2, r3
 480:	orr	r7, r4, r7
 484:	uxtb	r7, r7
 488:	clz	r7, r7
 48c:	lsr	r7, r7, #5
 490:	add	r6, r6, r7
 494:	addeq	r6, r6, #1
 498:	subs	r1, r1, #1
 49c:	bne	468 <__flatcc_fb_create_make_path_n+0xc0>
 4a0:	cmp	r3, #32
 4a4:	addeq	r6, r6, #1
 4a8:	add	r0, r6, #1
 4ac:	bl	0 <malloc>
 4b0:	cmp	r0, #0
 4b4:	beq	534 <__flatcc_fb_create_make_path_n+0x18c>
 4b8:	mov	r4, r0
 4bc:	add	r0, r8, #1
 4c0:	mov	r1, #0
 4c4:	mov	r2, #92	; 0x5c
 4c8:	uxtb	r3, r9
 4cc:	cmp	r3, #32
 4d0:	beq	4e8 <__flatcc_fb_create_make_path_n+0x140>
 4d4:	cmp	r3, #92	; 0x5c
 4d8:	bne	4f4 <__flatcc_fb_create_make_path_n+0x14c>
 4dc:	ldrb	r3, [r0]
 4e0:	cmp	r3, #32
 4e4:	bne	4f4 <__flatcc_fb_create_make_path_n+0x14c>
 4e8:	add	r3, r1, #1
 4ec:	strb	r2, [r4, r1]
 4f0:	b	4f8 <__flatcc_fb_create_make_path_n+0x150>
 4f4:	mov	r3, r1
 4f8:	strb	r9, [r4, r3]
 4fc:	subs	r5, r5, #1
 500:	add	r1, r3, #1
 504:	ldrb	r9, [r0], #1
 508:	bne	4c8 <__flatcc_fb_create_make_path_n+0x120>
 50c:	cmp	r9, #32
 510:	moveq	r0, #92	; 0x5c
 514:	strbeq	r0, [r4, r1]
 518:	addeq	r1, r3, #2
 51c:	mov	r0, r4
 520:	strb	r9, [r0, r1]!
 524:	mov	r1, #0
 528:	strb	r1, [r0, #1]
 52c:	mov	r0, r4
 530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 534:	mov	r4, #0
 538:	mov	r0, r4
 53c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000540 <__flatcc_fb_create_make_path>:
 540:	push	{r4, sl, fp, lr}
 544:	add	fp, sp, #8
 548:	mov	r4, r0
 54c:	bl	0 <strlen>
 550:	mov	r1, r0
 554:	mov	r0, r4
 558:	pop	{r4, sl, fp, lr}
 55c:	b	3a8 <__flatcc_fb_create_make_path_n>

00000560 <__flatcc_fb_find_basename>:
 560:	cmp	r1, #0
 564:	subeq	r0, r0, r0
 568:	bxeq	lr
 56c:	add	r2, r0, r1
 570:	sub	r1, r1, #1
 574:	ldrb	r2, [r2, #-1]
 578:	cmp	r2, #92	; 0x5c
 57c:	cmpne	r2, #47	; 0x2f
 580:	bne	560 <__flatcc_fb_find_basename>
 584:	add	r1, r0, r1
 588:	add	r1, r1, #1
 58c:	sub	r0, r1, r0
 590:	bx	lr

00000594 <__flatcc_fb_create_basename>:
 594:	push	{r4, r5, r6, r7, fp, lr}
 598:	add	fp, sp, #16
 59c:	mov	r6, r2
 5a0:	mov	r2, r1
 5a4:	cmp	r2, #0
 5a8:	beq	5d0 <__flatcc_fb_create_basename+0x3c>
 5ac:	add	r3, r0, r2
 5b0:	sub	r2, r2, #1
 5b4:	ldrb	r3, [r3, #-1]
 5b8:	cmp	r3, #92	; 0x5c
 5bc:	cmpne	r3, #47	; 0x2f
 5c0:	bne	5a4 <__flatcc_fb_create_basename+0x10>
 5c4:	add	r2, r0, r2
 5c8:	add	r4, r2, #1
 5cc:	b	5d4 <__flatcc_fb_create_basename+0x40>
 5d0:	mov	r4, r0
 5d4:	sub	r0, r0, r4
 5d8:	cmp	r6, #0
 5dc:	add	r5, r0, r1
 5e0:	beq	648 <__flatcc_fb_create_basename+0xb4>
 5e4:	mov	r0, r6
 5e8:	bl	0 <strlen>
 5ec:	mov	r7, r0
 5f0:	cmp	r7, r5
 5f4:	bcs	614 <__flatcc_fb_create_basename+0x80>
 5f8:	add	r0, r4, r5
 5fc:	mov	r1, r6
 600:	mov	r2, r7
 604:	sub	r0, r0, r7
 608:	bl	0 <strncmp>
 60c:	cmp	r0, #0
 610:	subeq	r5, r5, r7
 614:	add	r0, r5, #1
 618:	bl	0 <malloc>
 61c:	mov	r6, r0
 620:	cmp	r0, #0
 624:	beq	640 <__flatcc_fb_create_basename+0xac>
 628:	mov	r0, r6
 62c:	mov	r1, r4
 630:	mov	r2, r5
 634:	bl	0 <memcpy>
 638:	mov	r0, #0
 63c:	strb	r0, [r6, r5]
 640:	mov	r0, r6
 644:	pop	{r4, r5, r6, r7, fp, pc}
 648:	mov	r7, #0
 64c:	cmp	r7, r5
 650:	bcc	5f8 <__flatcc_fb_create_basename+0x64>
 654:	b	614 <__flatcc_fb_create_basename+0x80>

00000658 <__flatcc_fb_read_file>:
 658:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 65c:	add	fp, sp, #24
 660:	sub	sp, sp, #8
 664:	mov	r6, r1
 668:	movw	r1, #0
 66c:	add	r8, sp, #4
 670:	cmp	r2, #0
 674:	movt	r1, #0
 678:	movne	r8, r2
 67c:	bl	0 <fopen>
 680:	cmp	r0, #0
 684:	beq	728 <__flatcc_fb_read_file+0xd0>
 688:	mov	r1, #0
 68c:	mov	r2, #2
 690:	mov	r5, r0
 694:	bl	0 <fseek>
 698:	mov	r0, r5
 69c:	bl	0 <ftell>
 6a0:	mov	r4, r0
 6a4:	cmp	r6, #0
 6a8:	str	r0, [r8]
 6ac:	cmpne	r4, r6
 6b0:	bhi	71c <__flatcc_fb_read_file+0xc4>
 6b4:	mov	r0, r5
 6b8:	bl	0 <rewind>
 6bc:	cmp	r4, #0
 6c0:	mov	r0, r4
 6c4:	movweq	r0, #1
 6c8:	bl	0 <malloc>
 6cc:	cmp	r0, #0
 6d0:	beq	71c <__flatcc_fb_read_file+0xc4>
 6d4:	mov	r6, r0
 6d8:	mov	r1, #0
 6dc:	mov	r7, r1
 6e0:	add	r0, r6, r1
 6e4:	sub	r2, r4, r1
 6e8:	mov	r1, #1
 6ec:	mov	r3, r5
 6f0:	bl	0 <fread_unlocked>
 6f4:	add	r1, r0, r7
 6f8:	cmp	r0, #0
 6fc:	bne	6dc <__flatcc_fb_read_file+0x84>
 700:	mov	r0, r5
 704:	bl	0 <fclose>
 708:	cmp	r4, r7
 70c:	beq	730 <__flatcc_fb_read_file+0xd8>
 710:	mov	r0, r6
 714:	bl	0 <free>
 718:	b	72c <__flatcc_fb_read_file+0xd4>
 71c:	mov	r0, r5
 720:	bl	0 <fclose>
 724:	b	72c <__flatcc_fb_read_file+0xd4>
 728:	mov	r4, #0
 72c:	mov	r6, #0
 730:	str	r4, [r8]
 734:	mov	r0, r6
 738:	sub	sp, fp, #24
 73c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
