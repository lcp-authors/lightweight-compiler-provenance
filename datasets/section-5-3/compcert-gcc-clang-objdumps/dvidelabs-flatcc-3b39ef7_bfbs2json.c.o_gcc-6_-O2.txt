
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_type>:
   0:	push	{r4, lr}
   4:	mov	r4, r0
   8:	mov	r0, #123	; 0x7b
   c:	bl	0 <putchar>
  10:	cmp	r4, #0
  14:	beq	13c <print_type+0x13c>
  18:	ldr	r3, [r4]
  1c:	sub	r3, r4, r3
  20:	ldrh	r2, [r3]
  24:	cmp	r2, #5
  28:	bls	b4 <print_type+0xb4>
  2c:	ldrh	r1, [r3, #4]
  30:	cmp	r1, #0
  34:	moveq	r1, #1
  38:	bne	c0 <print_type+0xc0>
  3c:	cmp	r2, #7
  40:	bls	b4 <print_type+0xb4>
  44:	ldrh	r0, [r3, #6]
  48:	cmp	r0, #0
  4c:	beq	8c <print_type+0x8c>
  50:	cmp	r1, #0
  54:	beq	118 <print_type+0x118>
  58:	ldrh	r3, [r3, #4]
  5c:	cmp	r3, #0
  60:	beq	134 <print_type+0x134>
  64:	ldrb	r3, [r4, r3]
  68:	cmp	r3, #16
  6c:	ldrhi	r1, [pc, #252]	; 170 <print_type+0x170>
  70:	bls	160 <print_type+0x160>
  74:	ldr	r0, [pc, #248]	; 174 <print_type+0x174>
  78:	bl	0 <printf>
  7c:	ldr	r3, [r4]
  80:	mov	r1, #0
  84:	sub	r3, r4, r3
  88:	ldrh	r2, [r3]
  8c:	cmp	r2, #9
  90:	bls	b4 <print_type+0xb4>
  94:	ldrh	r3, [r3, #8]
  98:	cmp	r3, #0
  9c:	beq	b4 <print_type+0xb4>
  a0:	cmp	r1, #0
  a4:	beq	f4 <print_type+0xf4>
  a8:	ldr	r1, [r4, r3]
  ac:	ldr	r0, [pc, #196]	; 178 <print_type+0x178>
  b0:	bl	0 <printf>
  b4:	mov	r0, #125	; 0x7d
  b8:	pop	{r4, lr}
  bc:	b	0 <putchar>
  c0:	ldrb	r3, [r4, r1]
  c4:	ldr	r0, [pc, #176]	; 17c <print_type+0x17c>
  c8:	cmp	r3, #16
  cc:	ldrls	r2, [pc, #172]	; 180 <print_type+0x180>
  d0:	ldrhi	r1, [pc, #152]	; 170 <print_type+0x170>
  d4:	addls	r3, r2, r3, lsl #2
  d8:	ldrls	r1, [r3, #68]	; 0x44
  dc:	bl	0 <printf>
  e0:	ldr	r3, [r4]
  e4:	mov	r1, #0
  e8:	sub	r3, r4, r3
  ec:	ldrh	r2, [r3]
  f0:	b	3c <print_type+0x3c>
  f4:	mov	r0, #44	; 0x2c
  f8:	bl	0 <putchar>
  fc:	ldr	r3, [r4]
 100:	sub	r3, r4, r3
 104:	ldrh	r2, [r3]
 108:	cmp	r2, #9
 10c:	bhi	150 <print_type+0x150>
 110:	mvn	r1, #0
 114:	b	ac <print_type+0xac>
 118:	mov	r0, #44	; 0x2c
 11c:	bl	0 <putchar>
 120:	ldr	r3, [r4]
 124:	sub	r3, r4, r3
 128:	ldrh	r2, [r3]
 12c:	cmp	r2, #5
 130:	bhi	58 <print_type+0x58>
 134:	ldr	r1, [pc, #72]	; 184 <print_type+0x184>
 138:	b	74 <print_type+0x74>
 13c:	ldr	r3, [pc, #68]	; 188 <print_type+0x188>
 140:	mov	r2, #147	; 0x93
 144:	ldr	r1, [pc, #64]	; 18c <print_type+0x18c>
 148:	ldr	r0, [pc, #64]	; 190 <print_type+0x190>
 14c:	bl	0 <__assert_fail>
 150:	ldrh	r3, [r3, #8]
 154:	cmp	r3, #0
 158:	bne	a8 <print_type+0xa8>
 15c:	b	110 <print_type+0x110>
 160:	ldr	r2, [pc, #24]	; 180 <print_type+0x180>
 164:	add	r3, r2, r3, lsl #2
 168:	ldr	r1, [r3, #68]	; 0x44
 16c:	b	74 <print_type+0x74>
 170:	.word	0x00000090
 174:	.word	0x000000b0
 178:	.word	0x000000c0
 17c:	.word	0x0000009c
 180:	.word	0x00000000
 184:	.word	0x00000094
 188:	.word	0x0000001c
 18c:	.word	0x00000000
 190:	.word	0x00000068

00000194 <print_object>:
 194:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 198:	subs	sl, r0, #0
 19c:	beq	504 <print_object+0x370>
 1a0:	ldr	r3, [sl]
 1a4:	sub	r3, sl, r3
 1a8:	ldrh	r2, [r3]
 1ac:	cmp	r2, #7
 1b0:	bhi	1c8 <print_object+0x34>
 1b4:	ldr	r3, [pc, #860]	; 518 <print_object+0x384>
 1b8:	mov	r2, #224	; 0xe0
 1bc:	ldr	r1, [pc, #856]	; 51c <print_object+0x388>
 1c0:	ldr	r0, [pc, #856]	; 520 <print_object+0x38c>
 1c4:	bl	0 <__assert_fail>
 1c8:	ldrh	r2, [r3, #6]
 1cc:	cmp	r2, #0
 1d0:	beq	1b4 <print_object+0x20>
 1d4:	ldrh	r1, [r3, #4]
 1d8:	ldr	r9, [sl, r2]
 1dc:	add	r2, sl, r2
 1e0:	add	r9, r9, #4
 1e4:	cmp	r1, #0
 1e8:	add	r9, r2, r9
 1ec:	beq	4f0 <print_object+0x35c>
 1f0:	ldr	r3, [sl, r1]
 1f4:	add	r1, sl, r1
 1f8:	add	r3, r3, #4
 1fc:	add	r1, r1, r3
 200:	ldr	r0, [pc, #796]	; 524 <print_object+0x390>
 204:	bl	0 <printf>
 208:	ldr	r0, [pc, #792]	; 528 <print_object+0x394>
 20c:	bl	0 <printf>
 210:	cmp	r9, #0
 214:	beq	414 <print_object+0x280>
 218:	ldr	r3, [r9, #-4]
 21c:	cmp	r3, #0
 220:	beq	414 <print_object+0x280>
 224:	ldr	fp, [pc, #768]	; 52c <print_object+0x398>
 228:	mov	r8, r9
 22c:	mov	r7, #0
 230:	cmp	r7, r3
 234:	mov	r5, r8
 238:	bcs	4dc <print_object+0x348>
 23c:	ldr	r6, [r8]
 240:	add	r8, r8, #4
 244:	adds	r4, r5, r6
 248:	beq	4c8 <print_object+0x334>
 24c:	ldr	r3, [r5, r6]
 250:	sub	r3, r4, r3
 254:	ldrh	r2, [r3]
 258:	cmp	r2, #5
 25c:	bhi	274 <print_object+0xe0>
 260:	ldr	r3, [pc, #712]	; 530 <print_object+0x39c>
 264:	mov	r2, #195	; 0xc3
 268:	ldr	r1, [pc, #684]	; 51c <print_object+0x388>
 26c:	ldr	r0, [pc, #684]	; 520 <print_object+0x38c>
 270:	bl	0 <__assert_fail>
 274:	ldrh	r1, [r3, #4]
 278:	cmp	r1, #0
 27c:	beq	260 <print_object+0xcc>
 280:	ldr	r3, [r4, r1]
 284:	add	r1, r4, r1
 288:	add	r3, r3, #4
 28c:	add	r1, r1, r3
 290:	mov	r0, fp
 294:	bl	0 <printf>
 298:	ldr	r3, [r5, r6]
 29c:	sub	r3, r4, r3
 2a0:	ldrh	r2, [r3]
 2a4:	cmp	r2, #7
 2a8:	bhi	2c0 <print_object+0x12c>
 2ac:	ldr	r3, [pc, #640]	; 534 <print_object+0x3a0>
 2b0:	mov	r2, #201	; 0xc9
 2b4:	ldr	r1, [pc, #608]	; 51c <print_object+0x388>
 2b8:	ldr	r0, [pc, #608]	; 520 <print_object+0x38c>
 2bc:	bl	0 <__assert_fail>
 2c0:	ldrh	r3, [r3, #6]
 2c4:	cmp	r3, #0
 2c8:	beq	2ac <print_object+0x118>
 2cc:	ldr	r0, [r4, r3]
 2d0:	add	r3, r4, r3
 2d4:	add	r0, r3, r0
 2d8:	bl	0 <print_type>
 2dc:	ldr	r3, [r5, r6]
 2e0:	sub	r3, r4, r3
 2e4:	ldrh	r2, [r3]
 2e8:	cmp	r2, #9
 2ec:	bls	3e4 <print_object+0x250>
 2f0:	ldrh	r1, [r3, #8]
 2f4:	cmp	r1, #0
 2f8:	beq	314 <print_object+0x180>
 2fc:	ldrh	r1, [r4, r1]
 300:	ldr	r0, [pc, #560]	; 538 <print_object+0x3a4>
 304:	bl	0 <printf>
 308:	ldr	r3, [r5, r6]
 30c:	sub	r3, r4, r3
 310:	ldrh	r2, [r3]
 314:	cmp	r2, #13
 318:	bls	3e4 <print_object+0x250>
 31c:	ldrh	r1, [r3, #12]
 320:	cmp	r1, #0
 324:	beq	340 <print_object+0x1ac>
 328:	ldrd	r2, [r4, r1]
 32c:	ldr	r0, [pc, #520]	; 53c <print_object+0x3a8>
 330:	bl	0 <printf>
 334:	ldr	r3, [r5, r6]
 338:	sub	r3, r4, r3
 33c:	ldrh	r2, [r3]
 340:	cmp	r2, #15
 344:	bls	3e4 <print_object+0x250>
 348:	ldrh	r1, [r3, #14]
 34c:	cmp	r1, #0
 350:	beq	370 <print_object+0x1dc>
 354:	add	r1, r4, r1
 358:	ldr	r0, [pc, #480]	; 540 <print_object+0x3ac>
 35c:	ldrd	r2, [r1]
 360:	bl	0 <printf>
 364:	ldr	r3, [r5, r6]
 368:	sub	r3, r4, r3
 36c:	ldrh	r2, [r3]
 370:	cmp	r2, #19
 374:	bls	3e4 <print_object+0x250>
 378:	ldrh	r1, [r3, #18]
 37c:	cmp	r1, #0
 380:	beq	3b0 <print_object+0x21c>
 384:	ldrb	r1, [r4, r1]
 388:	ldr	r2, [pc, #436]	; 544 <print_object+0x3b0>
 38c:	ldr	r3, [pc, #436]	; 548 <print_object+0x3b4>
 390:	cmp	r1, #0
 394:	movne	r3, r2
 398:	mov	r1, r3
 39c:	ldr	r0, [pc, #424]	; 54c <print_object+0x3b8>
 3a0:	bl	0 <printf>
 3a4:	ldr	r3, [r5, r6]
 3a8:	sub	r3, r4, r3
 3ac:	ldrh	r2, [r3]
 3b0:	cmp	r2, #21
 3b4:	bls	3e4 <print_object+0x250>
 3b8:	ldrh	r3, [r3, #20]
 3bc:	cmp	r3, #0
 3c0:	beq	3e4 <print_object+0x250>
 3c4:	ldrb	r1, [r4, r3]
 3c8:	ldr	r2, [pc, #372]	; 544 <print_object+0x3b0>
 3cc:	ldr	r3, [pc, #372]	; 548 <print_object+0x3b4>
 3d0:	cmp	r1, #0
 3d4:	movne	r3, r2
 3d8:	ldr	r0, [pc, #368]	; 550 <print_object+0x3bc>
 3dc:	mov	r1, r3
 3e0:	bl	0 <printf>
 3e4:	mov	r0, #125	; 0x7d
 3e8:	bl	0 <putchar>
 3ec:	ldr	r3, [r9, #-4]
 3f0:	add	r7, r7, #1
 3f4:	cmp	r7, r3
 3f8:	bcs	414 <print_object+0x280>
 3fc:	cmp	r7, #0
 400:	beq	230 <print_object+0x9c>
 404:	mov	r0, #44	; 0x2c
 408:	bl	0 <putchar>
 40c:	ldr	r3, [r9, #-4]
 410:	b	230 <print_object+0x9c>
 414:	mov	r0, #93	; 0x5d
 418:	bl	0 <putchar>
 41c:	ldr	r3, [sl]
 420:	sub	r3, sl, r3
 424:	ldrh	r2, [r3]
 428:	cmp	r2, #9
 42c:	bls	470 <print_object+0x2dc>
 430:	ldrh	r1, [r3, #8]
 434:	cmp	r1, #0
 438:	bne	498 <print_object+0x304>
 43c:	cmp	r2, #11
 440:	bls	470 <print_object+0x2dc>
 444:	ldrh	r1, [r3, #10]
 448:	cmp	r1, #0
 44c:	bne	47c <print_object+0x2e8>
 450:	cmp	r2, #13
 454:	bls	470 <print_object+0x2dc>
 458:	ldrh	r3, [r3, #12]
 45c:	cmp	r3, #0
 460:	beq	470 <print_object+0x2dc>
 464:	ldr	r1, [sl, r3]
 468:	ldr	r0, [pc, #228]	; 554 <print_object+0x3c0>
 46c:	bl	0 <printf>
 470:	mov	r0, #125	; 0x7d
 474:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 478:	b	0 <putchar>
 47c:	ldr	r1, [sl, r1]
 480:	ldr	r0, [pc, #208]	; 558 <print_object+0x3c4>
 484:	bl	0 <printf>
 488:	ldr	r3, [sl]
 48c:	sub	r3, sl, r3
 490:	ldrh	r2, [r3]
 494:	b	450 <print_object+0x2bc>
 498:	ldrb	r1, [sl, r1]
 49c:	ldr	r2, [pc, #164]	; 548 <print_object+0x3b4>
 4a0:	ldr	r3, [pc, #156]	; 544 <print_object+0x3b0>
 4a4:	cmp	r1, #0
 4a8:	moveq	r1, r2
 4ac:	movne	r1, r3
 4b0:	ldr	r0, [pc, #164]	; 55c <print_object+0x3c8>
 4b4:	bl	0 <printf>
 4b8:	ldr	r3, [sl]
 4bc:	sub	r3, sl, r3
 4c0:	ldrh	r2, [r3]
 4c4:	b	43c <print_object+0x2a8>
 4c8:	ldr	r3, [pc, #96]	; 530 <print_object+0x39c>
 4cc:	mov	r2, #195	; 0xc3
 4d0:	ldr	r1, [pc, #68]	; 51c <print_object+0x388>
 4d4:	ldr	r0, [pc, #132]	; 560 <print_object+0x3cc>
 4d8:	bl	0 <__assert_fail>
 4dc:	ldr	r3, [pc, #128]	; 564 <print_object+0x3d0>
 4e0:	mov	r2, #192	; 0xc0
 4e4:	ldr	r1, [pc, #48]	; 51c <print_object+0x388>
 4e8:	ldr	r0, [pc, #120]	; 568 <print_object+0x3d4>
 4ec:	bl	0 <__assert_fail>
 4f0:	ldr	r3, [pc, #116]	; 56c <print_object+0x3d8>
 4f4:	mov	r2, #218	; 0xda
 4f8:	ldr	r1, [pc, #28]	; 51c <print_object+0x388>
 4fc:	ldr	r0, [pc, #28]	; 520 <print_object+0x38c>
 500:	bl	0 <__assert_fail>
 504:	ldr	r3, [pc, #12]	; 518 <print_object+0x384>
 508:	mov	r2, #224	; 0xe0
 50c:	ldr	r1, [pc, #8]	; 51c <print_object+0x388>
 510:	ldr	r0, [pc, #72]	; 560 <print_object+0x3cc>
 514:	bl	0 <__assert_fail>
 518:	.word	0x00000088
 51c:	.word	0x00000000
 520:	.word	0x000000dc
 524:	.word	0x00000100
 528:	.word	0x00000110
 52c:	.word	0x00000154
 530:	.word	0x000000d4
 534:	.word	0x000000ec
 538:	.word	0x0000016c
 53c:	.word	0x00000178
 540:	.word	0x00000190
 544:	.word	0x000000cc
 548:	.word	0x000000d4
 54c:	.word	0x000001a8
 550:	.word	0x000001b8
 554:	.word	0x000001e4
 558:	.word	0x000001d4
 55c:	.word	0x000001c4
 560:	.word	0x00000068
 564:	.word	0x000000bc
 568:	.word	0x0000011c
 56c:	.word	0x000000a4

00000570 <print_enum>:
 570:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 574:	subs	r7, r0, #0
 578:	beq	80c <print_enum+0x29c>
 57c:	ldr	r3, [r7]
 580:	sub	r3, r7, r3
 584:	ldrh	r2, [r3]
 588:	cmp	r2, #5
 58c:	bhi	5a4 <print_enum+0x34>
 590:	ldr	r3, [pc, #648]	; 820 <print_enum+0x2b0>
 594:	mov	r2, #177	; 0xb1
 598:	ldr	r1, [pc, #644]	; 824 <print_enum+0x2b4>
 59c:	ldr	r0, [pc, #644]	; 828 <print_enum+0x2b8>
 5a0:	bl	0 <__assert_fail>
 5a4:	ldrh	r1, [r3, #4]
 5a8:	cmp	r1, #0
 5ac:	beq	590 <print_enum+0x20>
 5b0:	ldr	r3, [r7, r1]
 5b4:	add	r1, r7, r1
 5b8:	add	r3, r3, #4
 5bc:	add	r1, r1, r3
 5c0:	ldr	r0, [pc, #612]	; 82c <print_enum+0x2bc>
 5c4:	bl	0 <printf>
 5c8:	ldr	r3, [r7]
 5cc:	sub	r3, r7, r3
 5d0:	ldrh	r2, [r3]
 5d4:	cmp	r2, #7
 5d8:	bhi	5f0 <print_enum+0x80>
 5dc:	ldr	r3, [pc, #588]	; 830 <print_enum+0x2c0>
 5e0:	mov	r2, #183	; 0xb7
 5e4:	ldr	r1, [pc, #568]	; 824 <print_enum+0x2b4>
 5e8:	ldr	r0, [pc, #568]	; 828 <print_enum+0x2b8>
 5ec:	bl	0 <__assert_fail>
 5f0:	ldrh	r3, [r3, #6]
 5f4:	cmp	r3, #0
 5f8:	beq	5dc <print_enum+0x6c>
 5fc:	ldr	r5, [r7, r3]
 600:	add	r4, r7, r3
 604:	add	r5, r5, #4
 608:	add	r8, r4, r5
 60c:	ldr	r0, [pc, #544]	; 834 <print_enum+0x2c4>
 610:	bl	0 <printf>
 614:	cmp	r8, #0
 618:	beq	734 <print_enum+0x1c4>
 61c:	ldr	r3, [r8, #-4]
 620:	cmp	r3, #0
 624:	beq	734 <print_enum+0x1c4>
 628:	ldr	r4, [r4, r5]
 62c:	ldr	r9, [pc, #504]	; 82c <print_enum+0x2bc>
 630:	mov	r5, #0
 634:	add	r4, r8, r4
 638:	add	r6, r8, #4
 63c:	mov	sl, #125	; 0x7d
 640:	mov	fp, #44	; 0x2c
 644:	cmp	r4, #0
 648:	beq	7f8 <print_enum+0x288>
 64c:	ldr	r3, [r4]
 650:	sub	r3, r4, r3
 654:	ldrh	r2, [r3]
 658:	cmp	r2, #5
 65c:	bhi	674 <print_enum+0x104>
 660:	ldr	r3, [pc, #464]	; 838 <print_enum+0x2c8>
 664:	mov	r2, #159	; 0x9f
 668:	ldr	r1, [pc, #436]	; 824 <print_enum+0x2b4>
 66c:	ldr	r0, [pc, #436]	; 828 <print_enum+0x2b8>
 670:	bl	0 <__assert_fail>
 674:	ldrh	r1, [r3, #4]
 678:	cmp	r1, #0
 67c:	beq	660 <print_enum+0xf0>
 680:	ldr	r3, [r4, r1]
 684:	add	r1, r4, r1
 688:	add	r3, r3, #4
 68c:	add	r1, r1, r3
 690:	mov	r0, r9
 694:	bl	0 <printf>
 698:	ldr	r3, [r4]
 69c:	sub	r3, r4, r3
 6a0:	ldrh	r2, [r3]
 6a4:	cmp	r2, #7
 6a8:	bls	71c <print_enum+0x1ac>
 6ac:	ldrh	r1, [r3, #6]
 6b0:	cmp	r1, #0
 6b4:	beq	6d0 <print_enum+0x160>
 6b8:	ldrd	r2, [r4, r1]
 6bc:	ldr	r0, [pc, #376]	; 83c <print_enum+0x2cc>
 6c0:	bl	0 <printf>
 6c4:	ldr	r3, [r4]
 6c8:	sub	r3, r4, r3
 6cc:	ldrh	r2, [r3]
 6d0:	cmp	r2, #9
 6d4:	bls	71c <print_enum+0x1ac>
 6d8:	ldrh	r3, [r3, #8]
 6dc:	cmp	r3, #0
 6e0:	beq	71c <print_enum+0x1ac>
 6e4:	ldr	r0, [pc, #340]	; 840 <print_enum+0x2d0>
 6e8:	bl	0 <printf>
 6ec:	ldr	r3, [r4]
 6f0:	sub	r3, r4, r3
 6f4:	ldrh	r2, [r3]
 6f8:	cmp	r2, #9
 6fc:	bls	7c8 <print_enum+0x258>
 700:	ldrh	r3, [r3, #8]
 704:	cmp	r3, #0
 708:	beq	7c8 <print_enum+0x258>
 70c:	ldr	r0, [r4, r3]
 710:	add	r4, r4, r3
 714:	add	r0, r4, r0
 718:	bl	194 <print_object>
 71c:	mov	r0, sl
 720:	bl	0 <putchar>
 724:	ldr	r3, [r8, #-4]
 728:	add	r5, r5, #1
 72c:	cmp	r5, r3
 730:	bcc	7ac <print_enum+0x23c>
 734:	mov	r0, #93	; 0x5d
 738:	bl	0 <putchar>
 73c:	ldr	r3, [r7]
 740:	sub	r3, r7, r3
 744:	ldrh	r2, [r3]
 748:	cmp	r2, #9
 74c:	bls	77c <print_enum+0x20c>
 750:	ldrh	r3, [r3, #8]
 754:	cmp	r3, #0
 758:	beq	77c <print_enum+0x20c>
 75c:	ldrb	r1, [r7, r3]
 760:	ldr	r2, [pc, #220]	; 844 <print_enum+0x2d4>
 764:	ldr	r3, [pc, #220]	; 848 <print_enum+0x2d8>
 768:	cmp	r1, #0
 76c:	ldr	r0, [pc, #216]	; 84c <print_enum+0x2dc>
 770:	moveq	r1, r2
 774:	movne	r1, r3
 778:	bl	0 <printf>
 77c:	ldr	r0, [pc, #204]	; 850 <print_enum+0x2e0>
 780:	bl	0 <printf>
 784:	ldr	r3, [r7]
 788:	sub	r3, r7, r3
 78c:	ldrh	r2, [r3]
 790:	cmp	r2, #11
 794:	bhi	7d0 <print_enum+0x260>
 798:	ldr	r3, [pc, #180]	; 854 <print_enum+0x2e4>
 79c:	mov	r2, #185	; 0xb9
 7a0:	ldr	r1, [pc, #124]	; 824 <print_enum+0x2b4>
 7a4:	ldr	r0, [pc, #124]	; 828 <print_enum+0x2b8>
 7a8:	bl	0 <__assert_fail>
 7ac:	ldr	r3, [r6]
 7b0:	mov	r4, r6
 7b4:	mov	r0, fp
 7b8:	add	r6, r6, #4
 7bc:	add	r4, r4, r3
 7c0:	bl	0 <putchar>
 7c4:	b	644 <print_enum+0xd4>
 7c8:	mov	r0, #0
 7cc:	b	718 <print_enum+0x1a8>
 7d0:	ldrh	r3, [r3, #10]
 7d4:	cmp	r3, #0
 7d8:	beq	798 <print_enum+0x228>
 7dc:	ldr	r0, [r7, r3]
 7e0:	add	r7, r7, r3
 7e4:	add	r0, r7, r0
 7e8:	bl	0 <print_type>
 7ec:	mov	r0, #125	; 0x7d
 7f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 7f4:	b	0 <putchar>
 7f8:	ldr	r3, [pc, #56]	; 838 <print_enum+0x2c8>
 7fc:	mov	r2, #159	; 0x9f
 800:	ldr	r1, [pc, #28]	; 824 <print_enum+0x2b4>
 804:	ldr	r0, [pc, #76]	; 858 <print_enum+0x2e8>
 808:	bl	0 <__assert_fail>
 80c:	ldr	r3, [pc, #12]	; 820 <print_enum+0x2b0>
 810:	mov	r2, #177	; 0xb1
 814:	ldr	r1, [pc, #8]	; 824 <print_enum+0x2b4>
 818:	ldr	r0, [pc, #56]	; 858 <print_enum+0x2e8>
 81c:	bl	0 <__assert_fail>
 820:	.word	0x00000104
 824:	.word	0x00000000
 828:	.word	0x000000dc
 82c:	.word	0x00000100
 830:	.word	0x0000011c
 834:	.word	0x000001f4
 838:	.word	0x00000134
 83c:	.word	0x00000200
 840:	.word	0x00000210
 844:	.word	0x000000d4
 848:	.word	0x000000cc
 84c:	.word	0x0000021c
 850:	.word	0x0000022c
 854:	.word	0x0000014c
 858:	.word	0x00000068

0000085c <print_schema>:
 85c:	push	{r4, r5, r6, r7, r8, lr}
 860:	subs	r6, r0, #0
 864:	beq	ad8 <print_schema+0x27c>
 868:	ldr	r3, [r6]
 86c:	sub	r3, r6, r3
 870:	ldrh	r2, [r3]
 874:	cmp	r2, #5
 878:	bhi	890 <print_schema+0x34>
 87c:	ldr	r3, [pc, #616]	; aec <print_schema+0x290>
 880:	mov	r2, #237	; 0xed
 884:	ldr	r1, [pc, #612]	; af0 <print_schema+0x294>
 888:	ldr	r0, [pc, #612]	; af4 <print_schema+0x298>
 88c:	bl	0 <__assert_fail>
 890:	ldrh	r3, [r3, #4]
 894:	cmp	r3, #0
 898:	beq	87c <print_schema+0x20>
 89c:	ldr	r7, [r6, r3]
 8a0:	mov	r0, #123	; 0x7b
 8a4:	add	r3, r6, r3
 8a8:	add	r7, r7, #4
 8ac:	add	r7, r3, r7
 8b0:	bl	0 <putchar>
 8b4:	ldr	r0, [pc, #572]	; af8 <print_schema+0x29c>
 8b8:	bl	0 <printf>
 8bc:	cmp	r7, #0
 8c0:	beq	91c <print_schema+0xc0>
 8c4:	ldr	r3, [r7, #-4]
 8c8:	cmp	r3, #0
 8cc:	beq	91c <print_schema+0xc0>
 8d0:	mov	r5, r7
 8d4:	mov	r4, #0
 8d8:	mov	r8, #44	; 0x2c
 8dc:	cmp	r3, r4
 8e0:	bls	ac4 <print_schema+0x268>
 8e4:	ldr	r0, [r5]
 8e8:	add	r4, r4, #1
 8ec:	add	r0, r5, r0
 8f0:	bl	194 <print_object>
 8f4:	ldr	r3, [r7, #-4]
 8f8:	add	r5, r5, #4
 8fc:	cmp	r4, r3
 900:	bcs	91c <print_schema+0xc0>
 904:	cmp	r4, #0
 908:	beq	8dc <print_schema+0x80>
 90c:	mov	r0, r8
 910:	bl	0 <putchar>
 914:	ldr	r3, [r7, #-4]
 918:	b	8dc <print_schema+0x80>
 91c:	mov	r0, #93	; 0x5d
 920:	bl	0 <putchar>
 924:	ldr	r3, [r6]
 928:	sub	r3, r6, r3
 92c:	ldrh	r2, [r3]
 930:	cmp	r2, #7
 934:	bls	a9c <print_schema+0x240>
 938:	ldrh	r3, [r3, #6]
 93c:	cmp	r3, #0
 940:	beq	a9c <print_schema+0x240>
 944:	ldr	r7, [r6, r3]
 948:	add	r3, r6, r3
 94c:	add	r7, r7, #4
 950:	add	r7, r3, r7
 954:	ldr	r0, [pc, #416]	; afc <print_schema+0x2a0>
 958:	bl	0 <printf>
 95c:	cmp	r7, #0
 960:	beq	9bc <print_schema+0x160>
 964:	ldr	r3, [r7, #-4]
 968:	cmp	r3, #0
 96c:	beq	9bc <print_schema+0x160>
 970:	mov	r5, r7
 974:	mov	r4, #0
 978:	mov	r8, #44	; 0x2c
 97c:	cmp	r3, r4
 980:	bls	ab0 <print_schema+0x254>
 984:	ldr	r0, [r5]
 988:	add	r4, r4, #1
 98c:	add	r0, r5, r0
 990:	bl	570 <print_enum>
 994:	ldr	r3, [r7, #-4]
 998:	add	r5, r5, #4
 99c:	cmp	r4, r3
 9a0:	bcs	9bc <print_schema+0x160>
 9a4:	cmp	r4, #0
 9a8:	beq	97c <print_schema+0x120>
 9ac:	mov	r0, r8
 9b0:	bl	0 <putchar>
 9b4:	ldr	r3, [r7, #-4]
 9b8:	b	97c <print_schema+0x120>
 9bc:	mov	r0, #93	; 0x5d
 9c0:	bl	0 <putchar>
 9c4:	ldr	r3, [r6]
 9c8:	sub	r3, r6, r3
 9cc:	ldrh	r2, [r3]
 9d0:	cmp	r2, #9
 9d4:	bls	a78 <print_schema+0x21c>
 9d8:	ldrh	r1, [r3, #8]
 9dc:	cmp	r1, #0
 9e0:	beq	a08 <print_schema+0x1ac>
 9e4:	ldr	r3, [r6, r1]
 9e8:	add	r1, r6, r1
 9ec:	add	r3, r3, #4
 9f0:	add	r1, r1, r3
 9f4:	ldr	r0, [pc, #260]	; b00 <print_schema+0x2a4>
 9f8:	bl	0 <printf>
 9fc:	ldr	r3, [r6]
 a00:	sub	r3, r6, r3
 a04:	ldrh	r2, [r3]
 a08:	cmp	r2, #11
 a0c:	bls	a78 <print_schema+0x21c>
 a10:	ldrh	r1, [r3, #10]
 a14:	cmp	r1, #0
 a18:	beq	a40 <print_schema+0x1e4>
 a1c:	ldr	r3, [r6, r1]
 a20:	add	r1, r6, r1
 a24:	add	r3, r3, #4
 a28:	add	r1, r1, r3
 a2c:	ldr	r0, [pc, #208]	; b04 <print_schema+0x2a8>
 a30:	bl	0 <printf>
 a34:	ldr	r3, [r6]
 a38:	sub	r3, r6, r3
 a3c:	ldrh	r2, [r3]
 a40:	cmp	r2, #13
 a44:	bls	a78 <print_schema+0x21c>
 a48:	ldrh	r3, [r3, #12]
 a4c:	cmp	r3, #0
 a50:	beq	a78 <print_schema+0x21c>
 a54:	ldr	r0, [pc, #172]	; b08 <print_schema+0x2ac>
 a58:	bl	0 <printf>
 a5c:	ldr	r3, [r6]
 a60:	sub	r3, r6, r3
 a64:	ldrh	r2, [r3]
 a68:	cmp	r2, #13
 a6c:	movls	r0, #0
 a70:	bhi	a84 <print_schema+0x228>
 a74:	bl	194 <print_object>
 a78:	ldr	r0, [pc, #140]	; b0c <print_schema+0x2b0>
 a7c:	pop	{r4, r5, r6, r7, r8, lr}
 a80:	b	0 <puts>
 a84:	ldrh	r0, [r3, #12]
 a88:	cmp	r0, #0
 a8c:	ldrne	r3, [r6, r0]
 a90:	addne	r0, r6, r0
 a94:	addne	r0, r0, r3
 a98:	b	a74 <print_schema+0x218>
 a9c:	ldr	r3, [pc, #108]	; b10 <print_schema+0x2b4>
 aa0:	mov	r2, #238	; 0xee
 aa4:	ldr	r1, [pc, #68]	; af0 <print_schema+0x294>
 aa8:	ldr	r0, [pc, #68]	; af4 <print_schema+0x298>
 aac:	bl	0 <__assert_fail>
 ab0:	ldr	r3, [pc, #92]	; b14 <print_schema+0x2b8>
 ab4:	mov	r2, #174	; 0xae
 ab8:	ldr	r1, [pc, #48]	; af0 <print_schema+0x294>
 abc:	ldr	r0, [pc, #84]	; b18 <print_schema+0x2bc>
 ac0:	bl	0 <__assert_fail>
 ac4:	ldr	r3, [pc, #80]	; b1c <print_schema+0x2c0>
 ac8:	mov	r2, #215	; 0xd7
 acc:	ldr	r1, [pc, #28]	; af0 <print_schema+0x294>
 ad0:	ldr	r0, [pc, #64]	; b18 <print_schema+0x2bc>
 ad4:	bl	0 <__assert_fail>
 ad8:	ldr	r3, [pc, #12]	; aec <print_schema+0x290>
 adc:	mov	r2, #237	; 0xed
 ae0:	ldr	r1, [pc, #8]	; af0 <print_schema+0x294>
 ae4:	ldr	r0, [pc, #52]	; b20 <print_schema+0x2c4>
 ae8:	bl	0 <__assert_fail>
 aec:	.word	0x0000016c
 af0:	.word	0x00000000
 af4:	.word	0x000000dc
 af8:	.word	0x00000240
 afc:	.word	0x0000024c
 b00:	.word	0x00000258
 b04:	.word	0x0000026c
 b08:	.word	0x00000280
 b0c:	.word	0x00000290
 b10:	.word	0x000001a4
 b14:	.word	0x000001bc
 b18:	.word	0x0000011c
 b1c:	.word	0x00000188
 b20:	.word	0x00000068

00000b24 <load_and_dump_schema>:
 b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 b28:	mov	r9, r0
 b2c:	ldr	r1, [pc, #372]	; ca8 <load_and_dump_schema+0x184>
 b30:	bl	0 <fopen>
 b34:	subs	r7, r0, #0
 b38:	beq	c0c <load_and_dump_schema+0xe8>
 b3c:	mov	r2, #2
 b40:	mov	r1, #0
 b44:	bl	0 <fseek>
 b48:	mov	r0, r7
 b4c:	bl	0 <ftell>
 b50:	ldr	r3, [pc, #340]	; cac <load_and_dump_schema+0x188>
 b54:	cmp	r0, r3
 b58:	mov	r5, r0
 b5c:	bhi	c04 <load_and_dump_schema+0xe0>
 b60:	mov	r0, r7
 b64:	bl	0 <rewind>
 b68:	cmp	r5, #0
 b6c:	movne	r0, r5
 b70:	moveq	r0, #1
 b74:	bl	0 <malloc>
 b78:	subs	r6, r0, #0
 b7c:	beq	c04 <load_and_dump_schema+0xe0>
 b80:	mov	r4, #0
 b84:	mov	r8, #1
 b88:	b	b90 <load_and_dump_schema+0x6c>
 b8c:	add	r4, r4, r0
 b90:	mov	r3, r7
 b94:	sub	r2, r5, r4
 b98:	mov	r1, r8
 b9c:	add	r0, r6, r4
 ba0:	bl	0 <fread>
 ba4:	cmp	r0, #0
 ba8:	bne	b8c <load_and_dump_schema+0x68>
 bac:	cmp	r5, r4
 bb0:	mov	r0, r7
 bb4:	bne	c2c <load_and_dump_schema+0x108>
 bb8:	bl	0 <fclose>
 bbc:	cmp	r5, #11
 bc0:	bls	c8c <load_and_dump_schema+0x168>
 bc4:	ldr	r3, [r6, #4]
 bc8:	ldr	r2, [pc, #224]	; cb0 <load_and_dump_schema+0x18c>
 bcc:	cmp	r3, r2
 bd0:	beq	c3c <load_and_dump_schema+0x118>
 bd4:	ldr	r2, [pc, #212]	; cb0 <load_and_dump_schema+0x18c>
 bd8:	ldr	r1, [r6, #8]
 bdc:	cmp	r1, r2
 be0:	beq	c64 <load_and_dump_schema+0x140>
 be4:	ldr	r3, [pc, #200]	; cb4 <load_and_dump_schema+0x190>
 be8:	mov	r2, #27
 bec:	mov	r1, #1
 bf0:	ldr	r3, [r3]
 bf4:	ldr	r0, [pc, #188]	; cb8 <load_and_dump_schema+0x194>
 bf8:	bl	0 <fwrite>
 bfc:	mvn	r4, #0
 c00:	b	c54 <load_and_dump_schema+0x130>
 c04:	mov	r0, r7
 c08:	bl	0 <fclose>
 c0c:	ldr	r3, [pc, #160]	; cb4 <load_and_dump_schema+0x190>
 c10:	mov	r2, r9
 c14:	ldr	r1, [pc, #160]	; cbc <load_and_dump_schema+0x198>
 c18:	ldr	r0, [r3]
 c1c:	mvn	r4, #0
 c20:	bl	0 <fprintf>
 c24:	mov	r0, r4
 c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 c2c:	bl	0 <fclose>
 c30:	mov	r0, r6
 c34:	bl	0 <free>
 c38:	b	c0c <load_and_dump_schema+0xe8>
 c3c:	ldr	r4, [r6]
 c40:	adds	r4, r6, r4
 c44:	beq	bd4 <load_and_dump_schema+0xb0>
 c48:	mov	r0, r4
 c4c:	bl	85c <print_schema>
 c50:	mov	r4, #0
 c54:	mov	r0, r6
 c58:	bl	0 <free>
 c5c:	mov	r0, r4
 c60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 c64:	add	r3, r3, #4
 c68:	adds	r4, r6, r3
 c6c:	beq	be4 <load_and_dump_schema+0xc0>
 c70:	ldr	r3, [pc, #60]	; cb4 <load_and_dump_schema+0x190>
 c74:	mov	r2, #40	; 0x28
 c78:	mov	r1, #1
 c7c:	ldr	r3, [r3]
 c80:	ldr	r0, [pc, #56]	; cc0 <load_and_dump_schema+0x19c>
 c84:	bl	0 <fwrite>
 c88:	b	c48 <load_and_dump_schema+0x124>
 c8c:	ldr	r3, [pc, #32]	; cb4 <load_and_dump_schema+0x190>
 c90:	mov	r2, r9
 c94:	ldr	r1, [pc, #40]	; cc4 <load_and_dump_schema+0x1a0>
 c98:	ldr	r0, [r3]
 c9c:	bl	0 <fprintf>
 ca0:	mvn	r4, #0
 ca4:	b	c54 <load_and_dump_schema+0x130>
 ca8:	.word	0x00000294
 cac:	.word	0x00002710
 cb0:	.word	0x53424642
 cb4:	.word	0x00000000
 cb8:	.word	0x00000310
 cbc:	.word	0x000002e4
 cc0:	.word	0x000002b8
 cc4:	.word	0x00000298

Disassembly of section .text.unlikely:

00000000 <reflection_Type_base_type.part.0>:
   0:	push	{r4, lr}
   4:	mov	r2, #147	; 0x93
   8:	ldr	r3, [pc, #8]	; 18 <reflection_Type_base_type.part.0+0x18>
   c:	ldr	r1, [pc, #8]	; 1c <reflection_Type_base_type.part.0+0x1c>
  10:	ldr	r0, [pc, #8]	; 20 <reflection_Type_base_type.part.0+0x20>
  14:	bl	0 <__assert_fail>
	...
  20:	.word	0x00000068

Disassembly of section .text.startup:

00000000 <main>:
   0:	cmp	r0, #2
   4:	bne	10 <main+0x10>
   8:	ldr	r0, [r1, #4]
   c:	b	b24 <load_and_dump_schema>
  10:	push	{r4, lr}
  14:	mov	r2, #28
  18:	ldr	r4, [pc, #60]	; 5c <main+0x5c>
  1c:	mov	r1, #1
  20:	ldr	r0, [pc, #56]	; 60 <main+0x60>
  24:	ldr	r3, [r4]
  28:	bl	0 <fwrite>
  2c:	ldr	r3, [r4]
  30:	mov	r2, #74	; 0x4a
  34:	mov	r1, #1
  38:	ldr	r0, [pc, #36]	; 64 <main+0x64>
  3c:	bl	0 <fwrite>
  40:	ldr	r3, [r4]
  44:	mov	r2, #180	; 0xb4
  48:	mov	r1, #1
  4c:	ldr	r0, [pc, #20]	; 68 <main+0x68>
  50:	bl	0 <fwrite>
  54:	mvn	r0, #0
  58:	bl	0 <exit>
  5c:	.word	0x00000000
  60:	.word	0x0000032c
  64:	.word	0x0000034c
  68:	.word	0x00000398
