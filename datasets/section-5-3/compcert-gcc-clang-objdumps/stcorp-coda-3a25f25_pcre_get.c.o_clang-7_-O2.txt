
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/pcre/pcre_get.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_pcre_get_stringnumber>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #12
   c:	mov	sl, r1
  10:	add	r3, sp, #4
  14:	mov	r1, #0
  18:	mov	r2, #8
  1c:	mov	r5, r0
  20:	bl	0 <coda_pcre_fullinfo>
  24:	cmp	r0, #0
  28:	bne	70 <coda_pcre_get_stringnumber+0x70>
  2c:	ldr	r0, [sp, #4]
  30:	cmp	r0, #1
  34:	blt	cc <coda_pcre_get_stringnumber+0xcc>
  38:	add	r3, sp, #8
  3c:	mov	r0, r5
  40:	mov	r1, #0
  44:	mov	r2, #7
  48:	bl	0 <coda_pcre_fullinfo>
  4c:	cmp	r0, #0
  50:	bne	70 <coda_pcre_get_stringnumber+0x70>
  54:	mov	r3, sp
  58:	mov	r0, r5
  5c:	mov	r1, #0
  60:	mov	r2, #9
  64:	bl	0 <coda_pcre_fullinfo>
  68:	cmp	r0, #0
  6c:	beq	78 <coda_pcre_get_stringnumber+0x78>
  70:	sub	sp, fp, #28
  74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  78:	ldr	r6, [sp, #4]
  7c:	cmp	r6, #1
  80:	blt	cc <coda_pcre_get_stringnumber+0xcc>
  84:	ldr	r8, [sp, #8]
  88:	ldr	r9, [sp]
  8c:	mov	r7, #0
  90:	add	r0, r6, r7
  94:	add	r0, r0, r0, lsr #31
  98:	asr	r5, r0, #1
  9c:	mov	r0, sl
  a0:	mla	r4, r8, r5, r9
  a4:	add	r1, r4, #2
  a8:	bl	0 <strcmp>
  ac:	cmp	r0, #0
  b0:	beq	d8 <coda_pcre_get_stringnumber+0xd8>
  b4:	cmp	r0, #1
  b8:	movlt	r6, r5
  bc:	addge	r7, r5, #1
  c0:	strlt	r5, [sp, #4]
  c4:	cmp	r6, r7
  c8:	bgt	90 <coda_pcre_get_stringnumber+0x90>
  cc:	mvn	r0, #6
  d0:	sub	sp, fp, #28
  d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  d8:	ldrb	r0, [r4]
  dc:	ldrb	r1, [r4, #1]
  e0:	orr	r0, r1, r0, lsl #8
  e4:	sub	sp, fp, #28
  e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000000ec <coda_pcre_get_stringtable_entries>:
  ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  f0:	add	fp, sp, #28
  f4:	sub	sp, sp, #28
  f8:	mov	r8, r3
  fc:	mov	r6, r2
 100:	mov	sl, r1
 104:	add	r3, sp, #20
 108:	mov	r1, #0
 10c:	mov	r2, #8
 110:	mov	r4, r0
 114:	bl	0 <coda_pcre_fullinfo>
 118:	mov	r7, r0
 11c:	cmp	r0, #0
 120:	bne	1d4 <coda_pcre_get_stringtable_entries+0xe8>
 124:	ldr	r0, [sp, #20]
 128:	cmp	r0, #1
 12c:	blt	1d0 <coda_pcre_get_stringtable_entries+0xe4>
 130:	add	r3, sp, #24
 134:	mov	r0, r4
 138:	mov	r1, #0
 13c:	mov	r2, #7
 140:	bl	0 <coda_pcre_fullinfo>
 144:	mov	r7, r0
 148:	cmp	r0, #0
 14c:	bne	1d4 <coda_pcre_get_stringtable_entries+0xe8>
 150:	add	r3, sp, #16
 154:	mov	r0, r4
 158:	mov	r1, #0
 15c:	mov	r2, #9
 160:	bl	0 <coda_pcre_fullinfo>
 164:	mov	r7, r0
 168:	cmp	r0, #0
 16c:	bne	1d4 <coda_pcre_get_stringtable_entries+0xe8>
 170:	ldr	r5, [sp, #20]
 174:	subs	r0, r5, #1
 178:	blt	1d0 <coda_pcre_get_stringtable_entries+0xe4>
 17c:	stm	sp, {r6, r8}
 180:	mov	r8, #0
 184:	ldr	r4, [sp, #16]
 188:	ldr	r7, [sp, #24]
 18c:	mla	r0, r0, r7, r4
 190:	str	r0, [sp, #8]
 194:	add	r0, r5, r8
 198:	add	r0, r0, r0, lsr #31
 19c:	asr	r9, r0, #1
 1a0:	mla	r0, r9, r7, r4
 1a4:	add	r1, r0, #2
 1a8:	mov	r0, sl
 1ac:	bl	0 <strcmp>
 1b0:	cmp	r0, #0
 1b4:	beq	1e0 <coda_pcre_get_stringtable_entries+0xf4>
 1b8:	cmp	r0, #1
 1bc:	movlt	r5, r9
 1c0:	addge	r8, r9, #1
 1c4:	strlt	r9, [sp, #20]
 1c8:	cmp	r5, r8
 1cc:	bgt	194 <coda_pcre_get_stringtable_entries+0xa8>
 1d0:	mvn	r7, #6
 1d4:	mov	r0, r7
 1d8:	sub	sp, fp, #28
 1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1e0:	mla	r0, r7, r9, r4
 1e4:	mov	r8, #0
 1e8:	str	r0, [sp, #12]
 1ec:	sub	r0, r9, #1
 1f0:	mla	r0, r7, r0, r4
 1f4:	add	r6, r0, #2
 1f8:	ldr	r0, [sp, #12]
 1fc:	add	r5, r0, r8
 200:	cmp	r5, r4
 204:	bls	220 <coda_pcre_get_stringtable_entries+0x134>
 208:	add	r1, r6, r8
 20c:	mov	r0, sl
 210:	bl	0 <strcmp>
 214:	sub	r8, r8, r7
 218:	cmp	r0, #0
 21c:	beq	1f8 <coda_pcre_get_stringtable_entries+0x10c>
 220:	add	r0, r9, #1
 224:	mla	r0, r7, r0, r4
 228:	mov	r4, #0
 22c:	add	r8, r0, #2
 230:	ldr	r0, [sp, #12]
 234:	add	r6, r0, r4
 238:	ldr	r0, [sp, #8]
 23c:	cmp	r6, r0
 240:	bcs	25c <coda_pcre_get_stringtable_entries+0x170>
 244:	add	r1, r8, r4
 248:	mov	r0, sl
 24c:	bl	0 <strcmp>
 250:	add	r4, r4, r7
 254:	cmp	r0, #0
 258:	beq	230 <coda_pcre_get_stringtable_entries+0x144>
 25c:	ldr	r0, [sp]
 260:	str	r5, [r0]
 264:	ldr	r0, [sp, #4]
 268:	str	r6, [r0]
 26c:	b	1d4 <coda_pcre_get_stringtable_entries+0xe8>

00000270 <coda_pcre_copy_substring>:
 270:	push	{r4, r5, fp, lr}
 274:	add	fp, sp, #8
 278:	mvn	r4, #6
 27c:	cmp	r3, #0
 280:	blt	2d0 <coda_pcre_copy_substring+0x60>
 284:	cmp	r3, r2
 288:	bge	2d0 <coda_pcre_copy_substring+0x60>
 28c:	mov	r5, #4
 290:	ldr	r2, [r1, r3, lsl #3]
 294:	ldr	ip, [fp, #12]
 298:	mvn	r4, #5
 29c:	orr	r3, r5, r3, lsl #3
 2a0:	ldr	r1, [r1, r3]
 2a4:	sub	r5, r1, r2
 2a8:	cmp	r5, ip
 2ac:	bge	2d0 <coda_pcre_copy_substring+0x60>
 2b0:	ldr	r4, [fp, #8]
 2b4:	add	r1, r0, r2
 2b8:	mov	r2, r5
 2bc:	mov	r0, r4
 2c0:	bl	0 <memcpy>
 2c4:	mov	r0, #0
 2c8:	strb	r0, [r4, r5]
 2cc:	mov	r4, r5
 2d0:	mov	r0, r4
 2d4:	pop	{r4, r5, fp, pc}

000002d8 <coda_pcre_copy_named_substring>:
 2d8:	push	{r4, r5, r6, r7, fp, lr}
 2dc:	add	fp, sp, #16
 2e0:	sub	sp, sp, #8
 2e4:	mov	r5, r2
 2e8:	ldrb	r2, [r0, #10]
 2ec:	mov	r7, r1
 2f0:	ldr	r1, [fp, #8]
 2f4:	mov	r6, r3
 2f8:	tst	r2, #8
 2fc:	ldrbeq	r2, [r0, #13]
 300:	tsteq	r2, #4
 304:	beq	360 <coda_pcre_copy_named_substring+0x88>
 308:	add	r2, sp, #4
 30c:	mov	r3, sp
 310:	bl	ec <coda_pcre_get_stringtable_entries>
 314:	cmp	r0, #0
 318:	ble	3c8 <coda_pcre_copy_named_substring+0xf0>
 31c:	ldr	r2, [sp, #4]
 320:	ldrb	r1, [r2]
 324:	ldrb	r3, [r2, #1]
 328:	orr	r1, r3, r1, lsl #8
 32c:	ldr	r3, [sp]
 330:	cmp	r2, r3
 334:	bls	350 <coda_pcre_copy_named_substring+0x78>
 338:	b	368 <coda_pcre_copy_named_substring+0x90>
 33c:	ldrb	r1, [r2, r0]!
 340:	ldrb	r4, [r2, #1]
 344:	orr	r1, r4, r1, lsl #8
 348:	cmp	r2, r3
 34c:	bhi	368 <coda_pcre_copy_named_substring+0x90>
 350:	ldr	r4, [r5, r1, lsl #3]
 354:	cmn	r4, #1
 358:	ble	33c <coda_pcre_copy_named_substring+0x64>
 35c:	b	368 <coda_pcre_copy_named_substring+0x90>
 360:	bl	0 <coda_pcre_get_stringnumber>
 364:	mov	r1, r0
 368:	cmp	r1, #1
 36c:	movlt	r0, r1
 370:	sublt	sp, fp, #16
 374:	poplt	{r4, r5, r6, r7, fp, pc}
 378:	mvn	r0, #6
 37c:	cmp	r1, r6
 380:	bge	3c8 <coda_pcre_copy_named_substring+0xf0>
 384:	mov	r0, #4
 388:	ldr	r2, [r5, r1, lsl #3]
 38c:	ldr	r3, [fp, #16]
 390:	orr	r0, r0, r1, lsl #3
 394:	ldr	r0, [r5, r0]
 398:	sub	r5, r0, r2
 39c:	mvn	r0, #5
 3a0:	cmp	r5, r3
 3a4:	bge	3c8 <coda_pcre_copy_named_substring+0xf0>
 3a8:	ldr	r6, [fp, #12]
 3ac:	add	r1, r7, r2
 3b0:	mov	r2, r5
 3b4:	mov	r0, r6
 3b8:	bl	0 <memcpy>
 3bc:	mov	r0, #0
 3c0:	strb	r0, [r6, r5]
 3c4:	mov	r0, r5
 3c8:	sub	sp, fp, #16
 3cc:	pop	{r4, r5, r6, r7, fp, pc}

000003d0 <coda_pcre_get_substring_list>:
 3d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3d4:	add	fp, sp, #28
 3d8:	sub	sp, sp, #4
 3dc:	mov	r8, r3
 3e0:	mov	r6, r2
 3e4:	mov	sl, r1
 3e8:	mov	r5, r0
 3ec:	lsl	r4, r2, #1
 3f0:	cmp	r2, #1
 3f4:	blt	424 <coda_pcre_get_substring_list+0x54>
 3f8:	cmp	r4, #2
 3fc:	mov	r0, r4
 400:	mov	r1, #1
 404:	movle	r0, #2
 408:	sub	r0, r0, #1
 40c:	add	r2, r1, r0, lsr #1
 410:	cmp	r2, #4
 414:	bcs	42c <coda_pcre_get_substring_list+0x5c>
 418:	mov	r0, #4
 41c:	mov	r1, #0
 420:	b	47c <coda_pcre_get_substring_list+0xac>
 424:	mov	r0, #4
 428:	b	4a0 <coda_pcre_get_substring_list+0xd0>
 42c:	add	r0, pc, #300	; 0x12c
 430:	bic	r3, r2, #3
 434:	vmov.i32	q9, #5	; 0x00000005
 438:	mov	r7, sl
 43c:	vld1.64	{d16-d17}, [r0 :128]
 440:	lsl	r1, r3, #1
 444:	mov	r0, r3
 448:	vld2.32	{d20-d23}, [r7]!
 44c:	subs	r0, r0, #4
 450:	vadd.i32	q8, q8, q11
 454:	vadd.i32	q8, q8, q9
 458:	vsub.i32	q8, q8, q10
 45c:	bne	448 <coda_pcre_get_substring_list+0x78>
 460:	vext.8	q9, q8, q8, #8
 464:	cmp	r2, r3
 468:	vadd.i32	q8, q8, q9
 46c:	vdup.32	q9, d16[1]
 470:	vadd.i32	q8, q8, q9
 474:	vmov.32	r0, d16[0]
 478:	beq	4a0 <coda_pcre_get_substring_list+0xd0>
 47c:	mov	r2, sl
 480:	ldr	r3, [r2, r1, lsl #2]!
 484:	add	r1, r1, #2
 488:	cmp	r1, r4
 48c:	ldr	r2, [r2, #4]
 490:	add	r0, r0, r2
 494:	add	r0, r0, #5
 498:	sub	r0, r0, r3
 49c:	blt	47c <coda_pcre_get_substring_list+0xac>
 4a0:	movw	r1, #0
 4a4:	movt	r1, #0
 4a8:	ldr	r1, [r1]
 4ac:	blx	r1
 4b0:	cmp	r0, #0
 4b4:	mvneq	r0, #5
 4b8:	subeq	sp, fp, #28
 4bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4c0:	mov	r7, r0
 4c4:	cmp	r6, #1
 4c8:	str	r0, [r8]
 4cc:	blt	544 <coda_pcre_get_substring_list+0x174>
 4d0:	add	r0, r7, r6, lsl #2
 4d4:	cmp	r4, #2
 4d8:	mvn	r1, #1
 4dc:	mov	r9, #0
 4e0:	mov	r8, r5
 4e4:	add	r6, r0, #4
 4e8:	mov	r0, r4
 4ec:	movle	r0, #2
 4f0:	add	r0, r1, r0, lsl #1
 4f4:	bic	r0, r0, #3
 4f8:	add	r0, r7, r0
 4fc:	add	r0, r0, #4
 500:	str	r0, [sp]
 504:	mov	r0, sl
 508:	ldr	r1, [r0, r9, lsl #2]!
 50c:	ldr	r0, [r0, #4]
 510:	sub	r5, r0, r1
 514:	add	r1, r8, r1
 518:	mov	r0, r6
 51c:	mov	r2, r5
 520:	bl	0 <memcpy>
 524:	mov	r0, #0
 528:	str	r6, [r7, r9, lsl #1]
 52c:	add	r9, r9, #2
 530:	strb	r0, [r6, r5]!
 534:	cmp	r9, r4
 538:	add	r6, r6, #1
 53c:	blt	504 <coda_pcre_get_substring_list+0x134>
 540:	ldr	r7, [sp]
 544:	mov	r0, #0
 548:	str	r0, [r7]
 54c:	sub	sp, fp, #28
 550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 554:	nop	{0}
 558:	nop	{0}
 55c:	nop	{0}
 560:	.word	0x00000004
	...

00000570 <coda_pcre_free_substring_list>:
 570:	movw	r1, #0
 574:	movt	r1, #0
 578:	ldr	r1, [r1]
 57c:	bx	r1

00000580 <coda_pcre_get_substring>:
 580:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 584:	add	fp, sp, #24
 588:	mvn	r4, #6
 58c:	cmp	r3, #0
 590:	blt	60c <coda_pcre_get_substring+0x8c>
 594:	mov	r7, r3
 598:	cmp	r3, r2
 59c:	bge	60c <coda_pcre_get_substring+0x8c>
 5a0:	mov	r8, r0
 5a4:	mov	r6, r1
 5a8:	ldr	r0, [r1, r7, lsl #3]
 5ac:	mov	r1, #4
 5b0:	orr	r1, r1, r7, lsl #3
 5b4:	ldr	r1, [r6, r1]
 5b8:	sub	r4, r1, r0
 5bc:	movw	r1, #0
 5c0:	movt	r1, #0
 5c4:	add	r0, r4, #1
 5c8:	ldr	r1, [r1]
 5cc:	blx	r1
 5d0:	cmp	r0, #0
 5d4:	mvneq	r4, #5
 5d8:	moveq	r0, r4
 5dc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
 5e0:	mov	r5, r0
 5e4:	lsl	r0, r7, #1
 5e8:	ldr	r9, [fp, #8]
 5ec:	mov	r2, r4
 5f0:	ldr	r0, [r6, r0, lsl #2]
 5f4:	add	r1, r8, r0
 5f8:	mov	r0, r5
 5fc:	bl	0 <memcpy>
 600:	mov	r0, #0
 604:	strb	r0, [r5, r4]
 608:	str	r5, [r9]
 60c:	mov	r0, r4
 610:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000614 <coda_pcre_get_named_substring>:
 614:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 618:	add	fp, sp, #24
 61c:	sub	sp, sp, #8
 620:	mov	r5, r2
 624:	ldrb	r2, [r0, #10]
 628:	mov	r8, r1
 62c:	ldr	r1, [fp, #8]
 630:	mov	r6, r3
 634:	tst	r2, #8
 638:	ldrbeq	r2, [r0, #13]
 63c:	tsteq	r2, #4
 640:	beq	710 <coda_pcre_get_named_substring+0xfc>
 644:	add	r2, sp, #4
 648:	mov	r3, sp
 64c:	bl	ec <coda_pcre_get_stringtable_entries>
 650:	mov	r4, r0
 654:	cmp	r0, #0
 658:	ble	72c <coda_pcre_get_named_substring+0x118>
 65c:	ldr	r0, [sp, #4]
 660:	ldrb	r1, [r0]
 664:	ldrb	r2, [r0, #1]
 668:	orr	r7, r2, r1, lsl #8
 66c:	ldr	r1, [sp]
 670:	cmp	r0, r1
 674:	bls	690 <coda_pcre_get_named_substring+0x7c>
 678:	b	69c <coda_pcre_get_named_substring+0x88>
 67c:	ldrb	r2, [r0, r4]!
 680:	ldrb	r3, [r0, #1]
 684:	orr	r7, r3, r2, lsl #8
 688:	cmp	r0, r1
 68c:	bhi	69c <coda_pcre_get_named_substring+0x88>
 690:	ldr	r2, [r5, r7, lsl #3]
 694:	cmn	r2, #1
 698:	ble	67c <coda_pcre_get_named_substring+0x68>
 69c:	cmp	r7, #1
 6a0:	blt	720 <coda_pcre_get_named_substring+0x10c>
 6a4:	mvn	r4, #6
 6a8:	cmp	r7, r6
 6ac:	bge	72c <coda_pcre_get_named_substring+0x118>
 6b0:	mov	r1, #4
 6b4:	ldr	r0, [r5, r7, lsl #3]
 6b8:	orr	r1, r1, r7, lsl #3
 6bc:	ldr	r1, [r5, r1]
 6c0:	sub	r4, r1, r0
 6c4:	movw	r1, #0
 6c8:	movt	r1, #0
 6cc:	add	r0, r4, #1
 6d0:	ldr	r1, [r1]
 6d4:	blx	r1
 6d8:	cmp	r0, #0
 6dc:	beq	728 <coda_pcre_get_named_substring+0x114>
 6e0:	mov	r6, r0
 6e4:	lsl	r0, r7, #1
 6e8:	ldr	r9, [fp, #12]
 6ec:	mov	r2, r4
 6f0:	ldr	r0, [r5, r0, lsl #2]
 6f4:	add	r1, r8, r0
 6f8:	mov	r0, r6
 6fc:	bl	0 <memcpy>
 700:	mov	r0, #0
 704:	strb	r0, [r6, r4]
 708:	str	r6, [r9]
 70c:	b	72c <coda_pcre_get_named_substring+0x118>
 710:	bl	0 <coda_pcre_get_stringnumber>
 714:	mov	r7, r0
 718:	cmp	r7, #1
 71c:	bge	6a4 <coda_pcre_get_named_substring+0x90>
 720:	mov	r4, r7
 724:	b	72c <coda_pcre_get_named_substring+0x118>
 728:	mvn	r4, #5
 72c:	mov	r0, r4
 730:	sub	sp, fp, #24
 734:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00000738 <coda_pcre_free_substring>:
 738:	movw	r1, #0
 73c:	movt	r1, #0
 740:	ldr	r1, [r1]
 744:	bx	r1
