
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadd.dir/tools/codadd/codadd-detect.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <generate_detection_tree>:
   0:	push	{fp, lr}
   4:	mov	fp, sp
   8:	bl	0 <coda_data_dictionary_get_detection_tree>
   c:	mov	r1, #0
  10:	pop	{fp, lr}
  14:	b	18 <generate_detection_tree_sub>

00000018 <generate_detection_tree_sub>:
  18:	push	{r4, r5, r6, r7, fp, lr}
  1c:	add	fp, sp, #16
  20:	cmp	r0, #0
  24:	beq	188 <generate_detection_tree_sub+0x170>
  28:	mov	r4, r1
  2c:	ldr	r1, [r0]
  30:	mov	r5, r0
  34:	cmp	r1, #0
  38:	beq	80 <generate_detection_tree_sub+0x68>
  3c:	movw	r0, #0
  40:	movt	r0, #0
  44:	ldr	r7, [r0]
  48:	cmp	r7, #0
  4c:	blt	18c <generate_detection_tree_sub+0x174>
  50:	beq	70 <generate_detection_tree_sub+0x58>
  54:	movw	r6, #0
  58:	movt	r6, #0
  5c:	mov	r0, r6
  60:	bl	0 <printf>
  64:	subs	r7, r7, #1
  68:	bne	5c <generate_detection_tree_sub+0x44>
  6c:	ldr	r1, [r5]
  70:	movw	r0, #0
  74:	movt	r0, #0
  78:	bl	0 <printf>
  7c:	b	d0 <generate_detection_tree_sub+0xb8>
  80:	ldr	r0, [r5, #4]
  84:	cmp	r0, #0
  88:	beq	138 <generate_detection_tree_sub+0x120>
  8c:	movw	r1, #0
  90:	movt	r1, #0
  94:	ldr	r7, [r1]
  98:	cmp	r7, #0
  9c:	blt	18c <generate_detection_tree_sub+0x174>
  a0:	beq	c0 <generate_detection_tree_sub+0xa8>
  a4:	movw	r6, #0
  a8:	movt	r6, #0
  ac:	mov	r0, r6
  b0:	bl	0 <printf>
  b4:	subs	r7, r7, #1
  b8:	bne	ac <generate_detection_tree_sub+0x94>
  bc:	ldr	r0, [r5, #4]
  c0:	movw	r1, #0
  c4:	add	r4, r4, #1
  c8:	movt	r1, #0
  cc:	bl	0 <coda_expression_print>
  d0:	ldr	r0, [r5, #8]
  d4:	cmp	r0, #0
  d8:	beq	130 <generate_detection_tree_sub+0x118>
  dc:	ldr	r0, [r0, #8]
  e0:	ldr	r3, [r0, #4]
  e4:	ldr	r0, [r0, #44]	; 0x2c
  e8:	ldr	r2, [r0]
  ec:	ldr	r0, [r0, #20]
  f0:	ldr	r1, [r0]
  f4:	movw	r0, #0
  f8:	movt	r0, #0
  fc:	bl	0 <printf>
 100:	ldr	r2, [r5, #12]
 104:	cmp	r2, #1
 108:	blt	120 <generate_detection_tree_sub+0x108>
 10c:	movw	r0, #0
 110:	mov	r1, r4
 114:	movt	r0, #0
 118:	bl	0 <printf>
 11c:	b	130 <generate_detection_tree_sub+0x118>
 120:	movw	r0, #0
 124:	mov	r1, r4
 128:	movt	r0, #0
 12c:	bl	0 <printf>
 130:	mov	r0, #10
 134:	bl	0 <putchar>
 138:	ldr	r0, [r5, #12]
 13c:	cmp	r0, #1
 140:	poplt	{r4, r5, r6, r7, fp, pc}
 144:	movw	r6, #0
 148:	mov	r7, #0
 14c:	movt	r6, #0
 150:	ldr	r0, [r6]
 154:	add	r0, r0, #1
 158:	add	r1, r4, r7
 15c:	str	r0, [r6]
 160:	ldr	r0, [r5, #16]
 164:	ldr	r0, [r0, r7, lsl #2]
 168:	bl	18 <generate_detection_tree_sub>
 16c:	ldr	r0, [r6]
 170:	add	r7, r7, #1
 174:	sub	r0, r0, #1
 178:	str	r0, [r6]
 17c:	ldr	r1, [r5, #12]
 180:	cmp	r7, r1
 184:	blt	154 <generate_detection_tree_sub+0x13c>
 188:	pop	{r4, r5, r6, r7, fp, pc}
 18c:	movw	r0, #0
 190:	movw	r1, #0
 194:	movw	r3, #0
 198:	mov	r2, #52	; 0x34
 19c:	movt	r0, #0
 1a0:	movt	r1, #0
 1a4:	movt	r3, #0
 1a8:	bl	0 <__assert_fail>
