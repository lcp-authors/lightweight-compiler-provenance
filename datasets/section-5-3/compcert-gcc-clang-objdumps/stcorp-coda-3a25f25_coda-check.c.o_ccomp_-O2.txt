
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda-check.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <check_data>:
       0:	mov	ip, sp
       4:	sub	sp, sp, #1456	; 0x5b0
       8:	str	ip, [sp, #12]
       c:	str	lr, [sp, #16]
      10:	str	r4, [sp, #36]	; 0x24
      14:	str	r5, [sp, #40]	; 0x28
      18:	str	r6, [sp, #44]	; 0x2c
      1c:	str	r7, [sp, #48]	; 0x30
      20:	str	r8, [sp, #52]	; 0x34
      24:	str	r9, [sp, #56]	; 0x38
      28:	str	sl, [sp, #60]	; 0x3c
      2c:	str	fp, [sp, #64]	; 0x40
      30:	ldr	ip, [ip, #8]
      34:	str	ip, [sp, #24]
      38:	ldr	ip, [sp, #12]
      3c:	ldr	r5, [ip, #4]
      40:	ldr	r9, [ip]
      44:	mov	sl, r3
      48:	str	r2, [sp, #32]
      4c:	mov	r4, r1
      50:	mov	r6, r0
      54:	mov	r0, #0
      58:	str	r0, [sp, #28]
      5c:	cmp	r9, #0
      60:	bne	78 <check_data+0x78>
      64:	ldr	r0, [pc, #3796]	; f40 <check_data+0xf40>
      68:	ldr	r1, [pc, #3864]	; f88 <check_data+0xf88>
      6c:	movw	r2, #306	; 0x132
      70:	ldr	r3, [pc, #3788]	; f44 <check_data+0xf44>
      74:	bl	0 <__assert_fail>
      78:	add	r1, sp, #80	; 0x50
      7c:	mov	r0, r6
      80:	bl	0 <coda_cursor_get_type>
      84:	cmp	r0, #0
      88:	beq	94 <check_data+0x94>
      8c:	mvn	r0, #0
      90:	b	18f8 <check_data+0x18f8>
      94:	ldr	r0, [sp, #80]	; 0x50
      98:	add	r1, sp, #72	; 0x48
      9c:	bl	0 <coda_type_get_class>
      a0:	cmp	r0, #0
      a4:	beq	b0 <check_data+0xb0>
      a8:	mvn	r0, #0
      ac:	b	18f8 <check_data+0x18f8>
      b0:	ldr	r0, [r4]
      b4:	cmp	r0, #0
      b8:	bne	c4 <check_data+0xc4>
      bc:	mov	r1, #0
      c0:	b	7c0 <check_data+0x7c0>
      c4:	add	r1, sp, #340	; 0x154
      c8:	add	r1, r1, #1024	; 0x400
      cc:	mov	r0, r6
      d0:	bl	0 <coda_cursor_get_type_class>
      d4:	cmp	r0, #0
      d8:	beq	e4 <check_data+0xe4>
      dc:	mvn	r1, #0
      e0:	b	7c0 <check_data+0x7c0>
      e4:	ldr	r0, [r4]
      e8:	add	r1, sp, #1360	; 0x550
      ec:	bl	0 <coda_type_get_class>
      f0:	cmp	r0, #0
      f4:	beq	100 <check_data+0x100>
      f8:	mvn	r1, #0
      fc:	b	7c0 <check_data+0x7c0>
     100:	ldr	r0, [sp, #1364]	; 0x554
     104:	ldr	ip, [sp, #1360]	; 0x550
     108:	cmp	r0, ip
     10c:	beq	170 <check_data+0x170>
     110:	bl	0 <coda_type_get_class_name>
     114:	mov	r7, r0
     118:	ldr	r0, [sp, #1360]	; 0x550
     11c:	bl	0 <coda_type_get_class_name>
     120:	mov	r3, r0
     124:	movw	r0, #65236	; 0xfed4
     128:	movt	r0, #65535	; 0xffff
     12c:	ldr	r1, [pc, #3684]	; f98 <check_data+0xf98>
     130:	mov	r2, r7
     134:	bl	0 <coda_set_error>
     138:	ldr	r0, [pc, #3576]	; f38 <check_data+0xf38>
     13c:	ldr	r0, [r0]
     140:	bl	0 <coda_errno_to_string>
     144:	mov	r1, r0
     148:	ldr	r2, [sp, #24]
     14c:	mov	r0, r6
     150:	blx	r5
     154:	ldr	r1, [pc, #3548]	; f38 <check_data+0xf38>
     158:	mov	ip, #0
     15c:	str	ip, [r1]
     160:	mov	r3, #0
     164:	str	r3, [r4]
     168:	mov	r1, #0
     16c:	b	7c0 <check_data+0x7c0>
     170:	cmp	r0, #7
     174:	bcs	7bc <check_data+0x7bc>
     178:	add	pc, pc, r0, lsl #2
     17c:	nop	{0}
     180:	b	360 <check_data+0x360>
     184:	b	19c <check_data+0x19c>
     188:	b	68c <check_data+0x68c>
     18c:	b	68c <check_data+0x68c>
     190:	b	7bc <check_data+0x7bc>
     194:	b	7bc <check_data+0x7bc>
     198:	b	718 <check_data+0x718>
     19c:	ldr	r7, [r4]
     1a0:	add	r1, sp, #344	; 0x158
     1a4:	add	r1, r1, #1024	; 0x400
     1a8:	add	r2, sp, #1424	; 0x590
     1ac:	mov	r0, r6
     1b0:	bl	0 <coda_cursor_get_array_dim>
     1b4:	cmp	r0, #0
     1b8:	beq	1c4 <check_data+0x1c4>
     1bc:	mvn	r1, #0
     1c0:	b	7c0 <check_data+0x7c0>
     1c4:	ldr	r2, [sp, #1368]	; 0x558
     1c8:	ldr	r3, [r7, #48]	; 0x30
     1cc:	cmp	r2, r3
     1d0:	beq	214 <check_data+0x214>
     1d4:	movw	r0, #65236	; 0xfed4
     1d8:	movt	r0, #65535	; 0xffff
     1dc:	ldr	r1, [pc, #3460]	; f68 <check_data+0xf68>
     1e0:	bl	0 <coda_set_error>
     1e4:	ldr	r0, [pc, #3404]	; f38 <check_data+0xf38>
     1e8:	ldr	r0, [r0]
     1ec:	bl	0 <coda_errno_to_string>
     1f0:	mov	r1, r0
     1f4:	ldr	r2, [sp, #24]
     1f8:	mov	r0, r6
     1fc:	blx	r5
     200:	ldr	r2, [pc, #3376]	; f38 <check_data+0xf38>
     204:	mov	r3, #0
     208:	str	r3, [r2]
     20c:	mov	r1, #0
     210:	b	7c0 <check_data+0x7c0>
     214:	mov	r8, #0
     218:	ldr	ip, [sp, #1368]	; 0x558
     21c:	cmp	r8, ip
     220:	bge	7bc <check_data+0x7bc>
     224:	lsl	r2, r8, #2
     228:	add	r3, r7, r2
     22c:	ldr	r2, [r3, #52]	; 0x34
     230:	cmp	r2, #0
     234:	bge	308 <check_data+0x308>
     238:	ldr	r0, [r3, #84]	; 0x54
     23c:	cmp	r0, #0
     240:	beq	358 <check_data+0x358>
     244:	add	r2, sp, #392	; 0x188
     248:	add	r2, r2, #1024	; 0x400
     24c:	mov	r1, r6
     250:	bl	0 <coda_expression_eval_integer>
     254:	cmp	r0, #0
     258:	bne	2d0 <check_data+0x2d0>
     25c:	add	r1, sp, #1424	; 0x590
     260:	ldr	ip, [r1, r8, lsl #2]
     264:	asr	r3, ip, #31
     268:	ldr	r2, [sp, #1416]	; 0x588
     26c:	ldr	r0, [sp, #1420]	; 0x58c
     270:	eor	r0, r3, r0
     274:	mov	r3, ip
     278:	eor	r1, r3, r2
     27c:	orr	r3, r0, r1
     280:	cmp	r3, #0
     284:	beq	358 <check_data+0x358>
     288:	movw	r0, #65236	; 0xfed4
     28c:	movt	r0, #65535	; 0xffff
     290:	ldr	r1, [pc, #3320]	; f90 <check_data+0xf90>
     294:	mov	r3, ip
     298:	str	r2, [sp]
     29c:	mov	r2, r8
     2a0:	bl	0 <coda_set_error>
     2a4:	ldr	r2, [pc, #3212]	; f38 <check_data+0xf38>
     2a8:	ldr	r0, [r2]
     2ac:	bl	0 <coda_errno_to_string>
     2b0:	mov	r1, r0
     2b4:	ldr	r2, [sp, #24]
     2b8:	mov	r0, r6
     2bc:	blx	r5
     2c0:	ldr	r0, [pc, #3184]	; f38 <check_data+0xf38>
     2c4:	mov	ip, #0
     2c8:	str	ip, [r0]
     2cc:	b	358 <check_data+0x358>
     2d0:	ldr	r0, [pc, #3244]	; f84 <check_data+0xf84>
     2d4:	mov	r1, r8
     2d8:	bl	0 <coda_add_error_message>
     2dc:	ldr	r0, [pc, #3156]	; f38 <check_data+0xf38>
     2e0:	ldr	r0, [r0]
     2e4:	bl	0 <coda_errno_to_string>
     2e8:	ldr	r2, [sp, #24]
     2ec:	mov	r1, r0
     2f0:	mov	r0, r6
     2f4:	blx	r5
     2f8:	ldr	r1, [pc, #3128]	; f38 <check_data+0xf38>
     2fc:	mov	r3, #0
     300:	str	r3, [r1]
     304:	b	358 <check_data+0x358>
     308:	add	r3, sp, #1424	; 0x590
     30c:	ldr	r3, [r3, r8, lsl #2]
     310:	cmp	r3, r2
     314:	beq	358 <check_data+0x358>
     318:	movw	r0, #65236	; 0xfed4
     31c:	movt	r0, #65535	; 0xffff
     320:	ldr	r1, [pc, #3176]	; f90 <check_data+0xf90>
     324:	str	r2, [sp]
     328:	mov	r2, r8
     32c:	bl	0 <coda_set_error>
     330:	ldr	r0, [pc, #3072]	; f38 <check_data+0xf38>
     334:	ldr	r0, [r0]
     338:	bl	0 <coda_errno_to_string>
     33c:	mov	r1, r0
     340:	ldr	r2, [sp, #24]
     344:	mov	r0, r6
     348:	blx	r5
     34c:	ldr	r2, [pc, #3044]	; f38 <check_data+0xf38>
     350:	mov	r1, #0
     354:	str	r1, [r2]
     358:	add	r8, r8, #1
     35c:	b	218 <check_data+0x218>
     360:	ldr	r7, [r4]
     364:	add	r1, sp, #348	; 0x15c
     368:	add	r1, r1, #1024	; 0x400
     36c:	mov	r0, r6
     370:	bl	0 <coda_cursor_get_type>
     374:	cmp	r0, #0
     378:	beq	384 <check_data+0x384>
     37c:	mvn	r1, #0
     380:	b	7c0 <check_data+0x7c0>
     384:	mov	r8, #0
     388:	ldr	ip, [r7, #48]	; 0x30
     38c:	cmp	r8, ip
     390:	bge	5cc <check_data+0x5cc>
     394:	mov	ip, #1
     398:	str	ip, [sp, #1380]	; 0x564
     39c:	mov	r3, #1
     3a0:	str	r3, [sp, #1384]	; 0x568
     3a4:	ldr	r3, [r7, #52]	; 0x34
     3a8:	ldr	ip, [r3, r8, lsl #2]
     3ac:	ldr	r1, [ip]
     3b0:	add	r2, sp, #364	; 0x16c
     3b4:	add	r2, r2, #1024	; 0x400
     3b8:	mov	r0, r6
     3bc:	bl	0 <coda_cursor_get_record_field_index_from_name>
     3c0:	cmp	r0, #0
     3c4:	bne	3ec <check_data+0x3ec>
     3c8:	ldr	r1, [sp, #1388]	; 0x56c
     3cc:	add	r2, sp, #360	; 0x168
     3d0:	add	r2, r2, #1024	; 0x400
     3d4:	mov	r0, r6
     3d8:	bl	0 <coda_cursor_get_record_field_available_status>
     3dc:	cmp	r0, #0
     3e0:	beq	414 <check_data+0x414>
     3e4:	mvn	r1, #0
     3e8:	b	7c0 <check_data+0x7c0>
     3ec:	ldr	r2, [pc, #2884]	; f38 <check_data+0xf38>
     3f0:	ldr	r3, [r2]
     3f4:	cmn	r3, #102	; 0x66
     3f8:	beq	404 <check_data+0x404>
     3fc:	mvn	r1, #0
     400:	b	7c0 <check_data+0x7c0>
     404:	mov	r0, #0
     408:	str	r0, [r2]
     40c:	mov	r0, #0
     410:	str	r0, [sp, #1384]	; 0x568
     414:	ldr	r0, [r7, #52]	; 0x34
     418:	ldr	r0, [r0, r8, lsl #2]
     41c:	ldrb	r3, [r0, #16]
     420:	cmp	r3, #0
     424:	beq	494 <check_data+0x494>
     428:	ldr	r0, [r0, #20]
     42c:	cmp	r0, #0
     430:	beq	48c <check_data+0x48c>
     434:	add	r2, sp, #356	; 0x164
     438:	add	r2, r2, #1024	; 0x400
     43c:	mov	r1, r6
     440:	bl	0 <coda_expression_eval_bool>
     444:	cmp	r0, #0
     448:	beq	494 <check_data+0x494>
     44c:	ldr	r0, [pc, #2888]	; f9c <check_data+0xf9c>
     450:	ldr	r1, [r7, #52]	; 0x34
     454:	ldr	r1, [r1, r8, lsl #2]
     458:	ldr	r1, [r1]
     45c:	bl	0 <coda_add_error_message>
     460:	ldr	r2, [pc, #2768]	; f38 <check_data+0xf38>
     464:	ldr	r0, [r2]
     468:	bl	0 <coda_errno_to_string>
     46c:	ldr	r2, [sp, #24]
     470:	mov	r1, r0
     474:	mov	r0, r6
     478:	blx	r5
     47c:	ldr	r3, [pc, #2740]	; f38 <check_data+0xf38>
     480:	mov	ip, #0
     484:	str	ip, [r3]
     488:	b	494 <check_data+0x494>
     48c:	mvn	r1, #0
     490:	str	r1, [sp, #1380]	; 0x564
     494:	ldr	r2, [sp, #1380]	; 0x564
     498:	cmn	r2, #1
     49c:	beq	514 <check_data+0x514>
     4a0:	ldr	r1, [sp, #1384]	; 0x568
     4a4:	cmp	r1, r2
     4a8:	beq	514 <check_data+0x514>
     4ac:	ldr	r0, [pc, #2748]	; f70 <check_data+0xf70>
     4b0:	ldr	ip, [pc, #2720]	; f58 <check_data+0xf58>
     4b4:	cmp	r1, #0
     4b8:	movne	r3, r0
     4bc:	moveq	r3, ip
     4c0:	cmp	r2, #0
     4c4:	movne	fp, r0
     4c8:	moveq	fp, ip
     4cc:	movw	r0, #65236	; 0xfed4
     4d0:	movt	r0, #65535	; 0xffff
     4d4:	ldr	r1, [pc, #2704]	; f6c <check_data+0xf6c>
     4d8:	ldr	r2, [r7, #52]	; 0x34
     4dc:	ldr	ip, [r2, r8, lsl #2]
     4e0:	ldr	r2, [ip]
     4e4:	str	fp, [sp]
     4e8:	bl	0 <coda_set_error>
     4ec:	ldr	r3, [pc, #2628]	; f38 <check_data+0xf38>
     4f0:	ldr	r0, [r3]
     4f4:	bl	0 <coda_errno_to_string>
     4f8:	ldr	r2, [sp, #24]
     4fc:	mov	r1, r0
     500:	mov	r0, r6
     504:	blx	r5
     508:	ldr	ip, [pc, #2600]	; f38 <check_data+0xf38>
     50c:	mov	r0, #0
     510:	str	r0, [ip]
     514:	ldr	r1, [sp, #1384]	; 0x568
     518:	cmp	r1, #0
     51c:	beq	5c4 <check_data+0x5c4>
     520:	ldr	r2, [sp, #1380]	; 0x564
     524:	cmp	r2, #0
     528:	beq	5c4 <check_data+0x5c4>
     52c:	ldr	r0, [sp, #1372]	; 0x55c
     530:	ldr	r1, [sp, #1388]	; 0x56c
     534:	add	r2, sp, #1392	; 0x570
     538:	bl	0 <coda_type_get_record_field_real_name>
     53c:	cmp	r0, #0
     540:	beq	54c <check_data+0x54c>
     544:	mvn	r1, #0
     548:	b	7c0 <check_data+0x7c0>
     54c:	ldr	r2, [r7, #52]	; 0x34
     550:	ldr	r1, [r2, r8, lsl #2]
     554:	ldr	fp, [r1, #4]
     558:	cmp	fp, #0
     55c:	bne	564 <check_data+0x564>
     560:	ldr	fp, [r1]
     564:	ldr	r0, [sp, #1392]	; 0x570
     568:	mov	r1, fp
     56c:	bl	0 <strcmp>
     570:	cmp	r0, #0
     574:	beq	5c4 <check_data+0x5c4>
     578:	movw	r0, #65236	; 0xfed4
     57c:	movt	r0, #65535	; 0xffff
     580:	ldr	r1, [pc, #2552]	; f80 <check_data+0xf80>
     584:	ldr	r2, [r7, #52]	; 0x34
     588:	ldr	ip, [r2, r8, lsl #2]
     58c:	ldr	r2, [ip]
     590:	ldr	r3, [sp, #1392]	; 0x570
     594:	str	fp, [sp]
     598:	bl	0 <coda_set_error>
     59c:	ldr	r2, [pc, #2452]	; f38 <check_data+0xf38>
     5a0:	ldr	r0, [r2]
     5a4:	bl	0 <coda_errno_to_string>
     5a8:	mov	r1, r0
     5ac:	ldr	r2, [sp, #24]
     5b0:	mov	r0, r6
     5b4:	blx	r5
     5b8:	ldr	r1, [pc, #2424]	; f38 <check_data+0xf38>
     5bc:	mov	r0, #0
     5c0:	str	r0, [r1]
     5c4:	add	r8, r8, #1
     5c8:	b	388 <check_data+0x388>
     5cc:	add	r1, sp, #1376	; 0x560
     5d0:	mov	r0, r6
     5d4:	bl	0 <coda_cursor_get_num_elements>
     5d8:	cmp	r0, #0
     5dc:	beq	5e8 <check_data+0x5e8>
     5e0:	mvn	r1, #0
     5e4:	b	7c0 <check_data+0x7c0>
     5e8:	mov	r7, #0
     5ec:	ldr	ip, [sp, #1376]	; 0x560
     5f0:	cmp	r7, ip
     5f4:	bge	7bc <check_data+0x7bc>
     5f8:	ldr	r0, [sp, #1372]	; 0x55c
     5fc:	add	r2, sp, #372	; 0x174
     600:	add	r2, r2, #1024	; 0x400
     604:	mov	r1, r7
     608:	bl	0 <coda_type_get_record_field_name>
     60c:	cmp	r0, #0
     610:	beq	61c <check_data+0x61c>
     614:	mvn	r1, #0
     618:	b	7c0 <check_data+0x7c0>
     61c:	ldr	r0, [r4]
     620:	ldr	r1, [sp, #1396]	; 0x574
     624:	add	r2, sp, #376	; 0x178
     628:	add	r2, r2, #1024	; 0x400
     62c:	bl	0 <coda_type_get_record_field_index_from_name>
     630:	cmp	r0, #0
     634:	beq	684 <check_data+0x684>
     638:	ldr	r3, [pc, #2296]	; f38 <check_data+0xf38>
     63c:	ldr	r0, [r3]
     640:	cmn	r0, #102	; 0x66
     644:	bne	684 <check_data+0x684>
     648:	movw	r0, #65236	; 0xfed4
     64c:	movt	r0, #65535	; 0xffff
     650:	ldr	r1, [pc, #2336]	; f78 <check_data+0xf78>
     654:	ldr	r2, [sp, #1396]	; 0x574
     658:	bl	0 <coda_set_error>
     65c:	ldr	r2, [pc, #2260]	; f38 <check_data+0xf38>
     660:	ldr	r0, [r2]
     664:	bl	0 <coda_errno_to_string>
     668:	ldr	r2, [sp, #24]
     66c:	mov	r1, r0
     670:	mov	r0, r6
     674:	blx	r5
     678:	ldr	r3, [pc, #2232]	; f38 <check_data+0xf38>
     67c:	mov	r0, #0
     680:	str	r0, [r3]
     684:	add	r7, r7, #1
     688:	b	5ec <check_data+0x5ec>
     68c:	add	r1, sp, #380	; 0x17c
     690:	add	r1, r1, #1024	; 0x400
     694:	mov	r0, r6
     698:	bl	0 <coda_cursor_get_read_type>
     69c:	cmp	r0, #0
     6a0:	beq	6ac <check_data+0x6ac>
     6a4:	mvn	r1, #0
     6a8:	b	7c0 <check_data+0x7c0>
     6ac:	ldr	r0, [sp, #1404]	; 0x57c
     6b0:	ldr	r3, [r4]
     6b4:	ldr	r3, [r3, #12]
     6b8:	cmp	r0, r3
     6bc:	beq	7bc <check_data+0x7bc>
     6c0:	bl	0 <coda_type_get_native_type_name>
     6c4:	mov	r7, r0
     6c8:	ldr	ip, [r4]
     6cc:	ldr	r0, [ip, #12]
     6d0:	bl	0 <coda_type_get_native_type_name>
     6d4:	mov	r3, r0
     6d8:	movw	r0, #65236	; 0xfed4
     6dc:	movt	r0, #65535	; 0xffff
     6e0:	ldr	r1, [pc, #2132]	; f3c <check_data+0xf3c>
     6e4:	mov	r2, r7
     6e8:	bl	0 <coda_set_error>
     6ec:	ldr	r1, [pc, #2116]	; f38 <check_data+0xf38>
     6f0:	ldr	r0, [r1]
     6f4:	bl	0 <coda_errno_to_string>
     6f8:	ldr	r2, [sp, #24]
     6fc:	mov	r1, r0
     700:	mov	r0, r6
     704:	blx	r5
     708:	ldr	r1, [pc, #2088]	; f38 <check_data+0xf38>
     70c:	mov	ip, #0
     710:	str	ip, [r1]
     714:	b	7bc <check_data+0x7bc>
     718:	add	r1, sp, #1408	; 0x580
     71c:	mov	r0, r6
     720:	bl	0 <coda_cursor_get_special_type>
     724:	cmp	r0, #0
     728:	beq	734 <check_data+0x734>
     72c:	mvn	r1, #0
     730:	b	7c0 <check_data+0x7c0>
     734:	ldr	r0, [r4]
     738:	add	r1, sp, #388	; 0x184
     73c:	add	r1, r1, #1024	; 0x400
     740:	bl	0 <coda_type_get_special_type>
     744:	cmp	r0, #0
     748:	beq	754 <check_data+0x754>
     74c:	mvn	r1, #0
     750:	b	7c0 <check_data+0x7c0>
     754:	ldr	r0, [sp, #1408]	; 0x580
     758:	ldr	ip, [sp, #1412]	; 0x584
     75c:	cmp	r0, ip
     760:	beq	7b4 <check_data+0x7b4>
     764:	bl	0 <coda_type_get_special_type_name>
     768:	mov	r7, r0
     76c:	ldr	r0, [sp, #1412]	; 0x584
     770:	bl	0 <coda_type_get_special_type_name>
     774:	mov	r3, r0
     778:	movw	r0, #65236	; 0xfed4
     77c:	movt	r0, #65535	; 0xffff
     780:	ldr	r1, [pc, #2052]	; f8c <check_data+0xf8c>
     784:	mov	r2, r7
     788:	bl	0 <coda_set_error>
     78c:	ldr	ip, [pc, #1956]	; f38 <check_data+0xf38>
     790:	ldr	r0, [ip]
     794:	bl	0 <coda_errno_to_string>
     798:	ldr	r2, [sp, #24]
     79c:	mov	r1, r0
     7a0:	mov	r0, r6
     7a4:	blx	r5
     7a8:	ldr	r3, [pc, #1928]	; f38 <check_data+0xf38>
     7ac:	mov	r0, #0
     7b0:	str	r0, [r3]
     7b4:	mov	r1, #0
     7b8:	str	r1, [r4]
     7bc:	mov	r1, #0
     7c0:	cmp	r1, #0
     7c4:	beq	7d0 <check_data+0x7d0>
     7c8:	mvn	r0, #0
     7cc:	b	18f8 <check_data+0x18f8>
     7d0:	cmp	sl, #0
     7d4:	beq	838 <check_data+0x838>
     7d8:	ldr	r3, [sp, #72]	; 0x48
     7dc:	cmp	r3, #7
     7e0:	bcs	838 <check_data+0x838>
     7e4:	add	pc, pc, r3, lsl #2
     7e8:	nop	{0}
     7ec:	b	808 <check_data+0x808>
     7f0:	b	808 <check_data+0x808>
     7f4:	b	81c <check_data+0x81c>
     7f8:	b	81c <check_data+0x81c>
     7fc:	b	81c <check_data+0x81c>
     800:	b	81c <check_data+0x81c>
     804:	b	808 <check_data+0x808>
     808:	mov	r3, #0
     80c:	mov	r2, #0
     810:	str	r2, [r9]
     814:	str	r3, [r9, #4]
     818:	b	838 <check_data+0x838>
     81c:	mov	r1, r9
     820:	mov	r0, r6
     824:	bl	0 <coda_cursor_get_bit_size>
     828:	cmp	r0, #0
     82c:	beq	838 <check_data+0x838>
     830:	mvn	r0, #0
     834:	b	18f8 <check_data+0x18f8>
     838:	ldr	r2, [sp, #32]
     83c:	cmp	r2, #0
     840:	beq	dc8 <check_data+0xdc8>
     844:	ldr	r1, [sp, #72]	; 0x48
     848:	cmp	r1, #7
     84c:	bcs	dc8 <check_data+0xdc8>
     850:	add	pc, pc, r1, lsl #2
     854:	nop	{0}
     858:	b	dc8 <check_data+0xdc8>
     85c:	b	dc8 <check_data+0xdc8>
     860:	b	874 <check_data+0x874>
     864:	b	874 <check_data+0x874>
     868:	b	8d0 <check_data+0x8d0>
     86c:	b	b50 <check_data+0xb50>
     870:	b	d48 <check_data+0xd48>
     874:	add	r1, sp, #152	; 0x98
     878:	mov	r0, r6
     87c:	bl	0 <coda_cursor_read_double>
     880:	cmp	r0, #0
     884:	beq	dc8 <check_data+0xdc8>
     888:	ldr	r3, [pc, #1704]	; f38 <check_data+0xf38>
     88c:	ldr	r1, [r3]
     890:	cmn	r1, #300	; 0x12c
     894:	beq	8b0 <check_data+0x8b0>
     898:	cmn	r1, #103	; 0x67
     89c:	beq	8b0 <check_data+0x8b0>
     8a0:	cmn	r1, #104	; 0x68
     8a4:	beq	8b0 <check_data+0x8b0>
     8a8:	mvn	r0, #0
     8ac:	b	18f8 <check_data+0x18f8>
     8b0:	ldr	r0, [pc, #1664]	; f38 <check_data+0xf38>
     8b4:	ldr	r0, [r0]
     8b8:	bl	0 <coda_errno_to_string>
     8bc:	mov	r1, r0
     8c0:	ldr	r2, [sp, #24]
     8c4:	mov	r0, r6
     8c8:	blx	r5
     8cc:	b	dc8 <check_data+0xdc8>
     8d0:	mov	r7, #0
     8d4:	add	r1, sp, #84	; 0x54
     8d8:	mov	r0, r6
     8dc:	bl	0 <coda_cursor_get_string_length>
     8e0:	cmp	r0, #0
     8e4:	beq	938 <check_data+0x938>
     8e8:	ldr	r3, [pc, #1608]	; f38 <check_data+0xf38>
     8ec:	ldr	ip, [r3]
     8f0:	cmn	ip, #300	; 0x12c
     8f4:	beq	910 <check_data+0x910>
     8f8:	cmn	ip, #103	; 0x67
     8fc:	beq	910 <check_data+0x910>
     900:	cmn	ip, #104	; 0x68
     904:	beq	910 <check_data+0x910>
     908:	mvn	r0, #0
     90c:	b	18f8 <check_data+0x18f8>
     910:	ldr	r1, [pc, #1568]	; f38 <check_data+0xf38>
     914:	ldr	r0, [r1]
     918:	bl	0 <coda_errno_to_string>
     91c:	mov	r1, r0
     920:	ldr	r2, [sp, #24]
     924:	mov	r0, r6
     928:	blx	r5
     92c:	mov	r1, #1
     930:	str	r1, [sp, #28]
     934:	b	dc8 <check_data+0xdc8>
     938:	ldr	r2, [sp, #84]	; 0x54
     93c:	cmp	r2, #0
     940:	bge	960 <check_data+0x960>
     944:	ldr	r1, [pc, #1552]	; f5c <check_data+0xf5c>
     948:	ldr	r2, [sp, #24]
     94c:	mov	r0, r6
     950:	blx	r5
     954:	mov	r3, #1
     958:	str	r3, [sp, #28]
     95c:	b	dc8 <check_data+0xdc8>
     960:	ldr	r0, [r4]
     964:	cmp	r0, #0
     968:	bne	970 <check_data+0x970>
     96c:	ldr	r0, [sp, #80]	; 0x50
     970:	add	r1, sp, #88	; 0x58
     974:	add	r2, sp, #92	; 0x5c
     978:	bl	0 <coda_type_get_fixed_value>
     97c:	cmp	r0, #0
     980:	beq	98c <check_data+0x98c>
     984:	mvn	r0, #0
     988:	b	18f8 <check_data+0x18f8>
     98c:	ldr	r1, [sp, #84]	; 0x54
     990:	cmp	r1, #0
     994:	ble	a00 <check_data+0xa00>
     998:	add	r0, r1, #1
     99c:	bl	0 <malloc>
     9a0:	mov	r7, r0
     9a4:	cmp	r7, #0
     9a8:	bne	9d4 <check_data+0x9d4>
     9ac:	mvn	r0, #0
     9b0:	ldr	r1, [pc, #1452]	; f64 <check_data+0xf64>
     9b4:	ldr	r3, [sp, #84]	; 0x54
     9b8:	add	r2, r3, #1
     9bc:	ldr	r3, [pc, #1476]	; f88 <check_data+0xf88>
     9c0:	movw	ip, #411	; 0x19b
     9c4:	str	ip, [sp]
     9c8:	bl	0 <coda_set_error>
     9cc:	mvn	r0, #0
     9d0:	b	18f8 <check_data+0x18f8>
     9d4:	ldr	ip, [sp, #84]	; 0x54
     9d8:	add	r2, ip, #1
     9dc:	mov	r1, r7
     9e0:	mov	r0, r6
     9e4:	bl	0 <coda_cursor_read_string>
     9e8:	cmp	r0, #0
     9ec:	beq	a00 <check_data+0xa00>
     9f0:	mov	r0, r7
     9f4:	bl	0 <free>
     9f8:	mvn	r0, #0
     9fc:	b	18f8 <check_data+0x18f8>
     a00:	ldr	r1, [sp, #88]	; 0x58
     a04:	cmp	r1, #0
     a08:	beq	a58 <check_data+0xa58>
     a0c:	ldr	r3, [sp, #84]	; 0x54
     a10:	ldr	r2, [sp, #92]	; 0x5c
     a14:	cmp	r3, r2
     a18:	bne	a48 <check_data+0xa48>
     a1c:	cmp	r3, #0
     a20:	ble	a58 <check_data+0xa58>
     a24:	mov	r0, r7
     a28:	bl	0 <memcmp>
     a2c:	cmp	r0, #0
     a30:	beq	a58 <check_data+0xa58>
     a34:	ldr	r1, [pc, #1272]	; f34 <check_data+0xf34>
     a38:	ldr	r2, [sp, #24]
     a3c:	mov	r0, r6
     a40:	blx	r5
     a44:	b	a58 <check_data+0xa58>
     a48:	ldr	r1, [pc, #1284]	; f54 <check_data+0xf54>
     a4c:	ldr	r2, [sp, #24]
     a50:	mov	r0, r6
     a54:	blx	r5
     a58:	ldr	r2, [sp, #80]	; 0x50
     a5c:	ldr	r2, [r2, #44]	; 0x2c
     a60:	cmp	r2, #1
     a64:	bne	b3c <check_data+0xb3c>
     a68:	ldr	r0, [r6]
     a6c:	ldr	r2, [r0, #60]	; 0x3c
     a70:	cmp	r2, #2
     a74:	bcs	acc <check_data+0xacc>
     a78:	cmp	r2, #0
     a7c:	beq	aac <check_data+0xaac>
     a80:	ldr	r0, [sp, #84]	; 0x54
     a84:	cmp	r0, #1
     a88:	bne	a98 <check_data+0xa98>
     a8c:	ldrb	r1, [r7]
     a90:	cmp	r1, #10
     a94:	beq	b3c <check_data+0xb3c>
     a98:	ldr	r1, [pc, #1268]	; f94 <check_data+0xf94>
     a9c:	ldr	r2, [sp, #24]
     aa0:	mov	r0, r6
     aa4:	blx	r5
     aa8:	b	b3c <check_data+0xb3c>
     aac:	ldr	r0, [pc, #1180]	; f50 <check_data+0xf50>
     ab0:	ldr	r1, [pc, #1232]	; f88 <check_data+0xf88>
     ab4:	movw	r2, #462	; 0x1ce
     ab8:	ldr	r3, [pc, #1156]	; f44 <check_data+0xf44>
     abc:	bl	0 <__assert_fail>
     ac0:	mov	r0, #1
     ac4:	bl	0 <exit>
     ac8:	b	b3c <check_data+0xb3c>
     acc:	cmp	r2, #2
     ad0:	beq	b14 <check_data+0xb14>
     ad4:	cmp	r2, #3
     ad8:	bne	b3c <check_data+0xb3c>
     adc:	ldr	r2, [sp, #84]	; 0x54
     ae0:	cmp	r2, #2
     ae4:	bne	b00 <check_data+0xb00>
     ae8:	ldrb	ip, [r7]
     aec:	cmp	ip, #13
     af0:	bne	b00 <check_data+0xb00>
     af4:	ldrb	r0, [r7, #1]
     af8:	cmp	r0, #10
     afc:	beq	b3c <check_data+0xb3c>
     b00:	ldr	r1, [pc, #1092]	; f4c <check_data+0xf4c>
     b04:	ldr	r2, [sp, #24]
     b08:	mov	r0, r6
     b0c:	blx	r5
     b10:	b	b3c <check_data+0xb3c>
     b14:	ldr	r1, [sp, #84]	; 0x54
     b18:	cmp	r1, #1
     b1c:	bne	b2c <check_data+0xb2c>
     b20:	ldrb	r0, [r7]
     b24:	cmp	r0, #13
     b28:	beq	b3c <check_data+0xb3c>
     b2c:	ldr	r1, [pc, #1088]	; f74 <check_data+0xf74>
     b30:	ldr	r2, [sp, #24]
     b34:	mov	r0, r6
     b38:	blx	r5
     b3c:	cmp	r7, #0
     b40:	beq	dc8 <check_data+0xdc8>
     b44:	mov	r0, r7
     b48:	bl	0 <free>
     b4c:	b	dc8 <check_data+0xdc8>
     b50:	cmp	sl, #0
     b54:	bne	bbc <check_data+0xbbc>
     b58:	mov	r1, r9
     b5c:	mov	r0, r6
     b60:	bl	0 <coda_cursor_get_bit_size>
     b64:	cmp	r0, #0
     b68:	beq	bbc <check_data+0xbbc>
     b6c:	ldr	r3, [pc, #964]	; f38 <check_data+0xf38>
     b70:	ldr	ip, [r3]
     b74:	cmn	ip, #300	; 0x12c
     b78:	beq	b94 <check_data+0xb94>
     b7c:	cmn	ip, #103	; 0x67
     b80:	beq	b94 <check_data+0xb94>
     b84:	cmn	ip, #104	; 0x68
     b88:	beq	b94 <check_data+0xb94>
     b8c:	mvn	r0, #0
     b90:	b	18f8 <check_data+0x18f8>
     b94:	ldr	r3, [pc, #924]	; f38 <check_data+0xf38>
     b98:	ldr	r0, [r3]
     b9c:	bl	0 <coda_errno_to_string>
     ba0:	mov	r1, r0
     ba4:	ldr	r2, [sp, #24]
     ba8:	mov	r0, r6
     bac:	blx	r5
     bb0:	mov	r2, #1
     bb4:	str	r2, [sp, #28]
     bb8:	b	dc8 <check_data+0xdc8>
     bbc:	ldr	ip, [r9]
     bc0:	ldr	r3, [r9, #4]
     bc4:	cmp	r3, #0
     bc8:	bge	be8 <check_data+0xbe8>
     bcc:	ldr	r1, [pc, #908]	; f60 <check_data+0xf60>
     bd0:	ldr	r2, [sp, #24]
     bd4:	mov	r0, r6
     bd8:	blx	r5
     bdc:	mov	r0, #1
     be0:	str	r0, [sp, #28]
     be4:	b	dc8 <check_data+0xdc8>
     be8:	mov	r0, #1
     bec:	mov	r1, #0
     bf0:	mov	r7, #0
     bf4:	and	r2, ip, #7
     bf8:	orr	r2, r7, r2
     bfc:	cmp	r2, #0
     c00:	movne	r2, #1
     c04:	moveq	r2, #0
     c08:	cmp	r2, #0
     c0c:	movne	r1, r0
     c10:	moveq	r1, r1
     c14:	asr	r2, r3, #3
     c18:	lsr	ip, ip, #3
     c1c:	orr	r3, ip, r3, lsl #29
     c20:	asr	ip, r1, #31
     c24:	adds	r8, r3, r1
     c28:	adc	r7, r2, ip
     c2c:	ldr	r0, [r4]
     c30:	cmp	r0, #0
     c34:	bne	c3c <check_data+0xc3c>
     c38:	ldr	r0, [sp, #80]	; 0x50
     c3c:	add	r1, sp, #96	; 0x60
     c40:	add	r2, sp, #100	; 0x64
     c44:	bl	0 <coda_type_get_fixed_value>
     c48:	cmp	r0, #0
     c4c:	beq	c58 <check_data+0xc58>
     c50:	mvn	r0, #0
     c54:	b	18f8 <check_data+0x18f8>
     c58:	ldr	r3, [sp, #96]	; 0x60
     c5c:	cmp	r3, #0
     c60:	beq	dc8 <check_data+0xdc8>
     c64:	ldr	r2, [sp, #100]	; 0x64
     c68:	asr	r0, r2, #31
     c6c:	mov	r3, r2
     c70:	eor	ip, r7, r0
     c74:	mov	r0, r8
     c78:	eor	r1, r0, r3
     c7c:	orr	r1, ip, r1
     c80:	cmp	r1, #0
     c84:	bne	d34 <check_data+0xd34>
     c88:	cmp	r2, #0
     c8c:	ble	dc8 <check_data+0xdc8>
     c90:	bl	0 <malloc>
     c94:	mov	r7, r0
     c98:	cmp	r7, #0
     c9c:	bne	cc4 <check_data+0xcc4>
     ca0:	mvn	r0, #0
     ca4:	ldr	r1, [pc, #696]	; f64 <check_data+0xf64>
     ca8:	mov	r2, r8
     cac:	ldr	r3, [pc, #724]	; f88 <check_data+0xf88>
     cb0:	mov	r4, #524	; 0x20c
     cb4:	str	r4, [sp]
     cb8:	bl	0 <coda_set_error>
     cbc:	mvn	r0, #0
     cc0:	b	18f8 <check_data+0x18f8>
     cc4:	mov	r3, #0
     cc8:	mov	r2, #0
     ccc:	ldr	r1, [r9]
     cd0:	ldr	r0, [r9, #4]
     cd4:	str	r0, [sp, #4]
     cd8:	str	r1, [sp]
     cdc:	mov	r1, r7
     ce0:	mov	r0, r6
     ce4:	bl	0 <coda_cursor_read_bits>
     ce8:	cmp	r0, #0
     cec:	beq	d00 <check_data+0xd00>
     cf0:	mov	r0, r7
     cf4:	bl	0 <free>
     cf8:	mvn	r0, #0
     cfc:	b	18f8 <check_data+0x18f8>
     d00:	ldr	r1, [sp, #96]	; 0x60
     d04:	ldr	r2, [sp, #100]	; 0x64
     d08:	mov	r0, r7
     d0c:	bl	0 <memcmp>
     d10:	cmp	r0, #0
     d14:	beq	d28 <check_data+0xd28>
     d18:	ldr	r1, [pc, #552]	; f48 <check_data+0xf48>
     d1c:	ldr	r2, [sp, #24]
     d20:	mov	r0, r6
     d24:	blx	r5
     d28:	mov	r0, r7
     d2c:	bl	0 <free>
     d30:	b	dc8 <check_data+0xdc8>
     d34:	ldr	r1, [pc, #576]	; f7c <check_data+0xf7c>
     d38:	ldr	r2, [sp, #24]
     d3c:	mov	r0, r6
     d40:	blx	r5
     d44:	b	dc8 <check_data+0xdc8>
     d48:	add	r1, sp, #104	; 0x68
     d4c:	mov	r0, r6
     d50:	bl	0 <coda_cursor_get_special_type>
     d54:	cmp	r0, #0
     d58:	beq	d64 <check_data+0xd64>
     d5c:	mvn	r0, #0
     d60:	b	18f8 <check_data+0x18f8>
     d64:	ldr	ip, [sp, #104]	; 0x68
     d68:	cmp	ip, #2
     d6c:	bne	dc8 <check_data+0xdc8>
     d70:	add	r1, sp, #160	; 0xa0
     d74:	mov	r0, r6
     d78:	bl	0 <coda_cursor_read_double>
     d7c:	cmp	r0, #0
     d80:	beq	dc8 <check_data+0xdc8>
     d84:	ldr	r2, [pc, #428]	; f38 <check_data+0xf38>
     d88:	ldr	r2, [r2]
     d8c:	cmn	r2, #300	; 0x12c
     d90:	beq	dac <check_data+0xdac>
     d94:	cmn	r2, #103	; 0x67
     d98:	beq	dac <check_data+0xdac>
     d9c:	cmn	r2, #104	; 0x68
     da0:	beq	dac <check_data+0xdac>
     da4:	mvn	r0, #0
     da8:	b	18f8 <check_data+0x18f8>
     dac:	ldr	ip, [pc, #388]	; f38 <check_data+0xf38>
     db0:	ldr	r0, [ip]
     db4:	bl	0 <coda_errno_to_string>
     db8:	ldr	r2, [sp, #24]
     dbc:	mov	r1, r0
     dc0:	mov	r0, r6
     dc4:	blx	r5
     dc8:	add	r1, sp, #76	; 0x4c
     dcc:	mov	r0, r6
     dd0:	bl	0 <coda_cursor_has_attributes>
     dd4:	cmp	r0, #0
     dd8:	beq	de4 <check_data+0xde4>
     ddc:	mvn	r0, #0
     de0:	b	18f8 <check_data+0x18f8>
     de4:	ldr	r0, [sp, #76]	; 0x4c
     de8:	cmp	r0, #0
     dec:	beq	e94 <check_data+0xe94>
     df0:	mov	r1, #0
     df4:	str	r1, [sp, #108]	; 0x6c
     df8:	ldr	r0, [r4]
     dfc:	cmp	r0, #0
     e00:	beq	e1c <check_data+0xe1c>
     e04:	add	r1, sp, #108	; 0x6c
     e08:	bl	0 <coda_type_get_attributes>
     e0c:	cmp	r0, #0
     e10:	beq	e1c <check_data+0xe1c>
     e14:	mvn	r0, #0
     e18:	b	18f8 <check_data+0x18f8>
     e1c:	mov	r0, r6
     e20:	bl	0 <coda_cursor_goto_attributes>
     e24:	cmp	r0, #0
     e28:	beq	e34 <check_data+0xe34>
     e2c:	mvn	r0, #0
     e30:	b	18f8 <check_data+0x18f8>
     e34:	add	r1, sp, #108	; 0x6c
     e38:	mov	r3, #0
     e3c:	add	r0, sp, #168	; 0xa8
     e40:	ldr	ip, [sp, #24]
     e44:	str	ip, [sp, #8]
     e48:	str	r5, [sp, #4]
     e4c:	str	r0, [sp]
     e50:	ldr	r2, [sp, #32]
     e54:	mov	r0, r6
     e58:	bl	0 <check_data>
     e5c:	cmp	r0, #0
     e60:	beq	e6c <check_data+0xe6c>
     e64:	mvn	r0, #0
     e68:	b	18f8 <check_data+0x18f8>
     e6c:	mov	r0, r6
     e70:	bl	0 <coda_cursor_goto_parent>
     e74:	ldr	r3, [r4]
     e78:	cmp	r3, #0
     e7c:	beq	e94 <check_data+0xe94>
     e80:	ldr	r1, [sp, #108]	; 0x6c
     e84:	cmp	r1, #0
     e88:	bne	e94 <check_data+0xe94>
     e8c:	mov	r3, #0
     e90:	str	r3, [r4]
     e94:	mov	r1, #1
     e98:	ldr	r3, [sp, #32]
     e9c:	cmp	r3, #0
     ea0:	movne	r2, #1
     ea4:	moveq	r2, #0
     ea8:	ldr	r0, [r4]
     eac:	cmp	r0, #0
     eb0:	movne	r1, r1
     eb4:	moveq	r1, r2
     eb8:	mov	r3, #1
     ebc:	cmp	sl, #0
     ec0:	movne	r2, #1
     ec4:	moveq	r2, #0
     ec8:	cmp	r1, #0
     ecc:	movne	r1, r3
     ed0:	moveq	r1, r2
     ed4:	cmp	r1, #0
     ed8:	beq	1460 <check_data+0x1460>
     edc:	ldr	ip, [sp, #72]	; 0x48
     ee0:	cmp	ip, #7
     ee4:	bcs	1460 <check_data+0x1460>
     ee8:	add	pc, pc, ip, lsl #2
     eec:	nop	{0}
     ef0:	b	10ac <check_data+0x10ac>
     ef4:	b	f0c <check_data+0xf0c>
     ef8:	b	1460 <check_data+0x1460>
     efc:	b	1460 <check_data+0x1460>
     f00:	b	1460 <check_data+0x1460>
     f04:	b	1460 <check_data+0x1460>
     f08:	b	13ac <check_data+0x13ac>
     f0c:	mov	r2, #0
     f10:	str	r2, [sp, #112]	; 0x70
     f14:	cmp	r0, #0
     f18:	beq	fa0 <check_data+0xfa0>
     f1c:	add	r1, sp, #112	; 0x70
     f20:	bl	0 <coda_type_get_array_base_type>
     f24:	cmp	r0, #0
     f28:	beq	fa0 <check_data+0xfa0>
     f2c:	mvn	r0, #0
     f30:	b	18f8 <check_data+0x18f8>
     f34:	.word	0x00000153
     f38:	.word	0x00000000
     f3c:	.word	0x000004aa
     f40:	.word	0x0000039e
     f44:	.word	0x00000777
     f48:	.word	0x00000235
     f4c:	.word	0x0000007c
     f50:	.word	0x000006a8
     f54:	.word	0x000000cc
     f58:	.word	0x000001b3
     f5c:	.word	0x00000647
     f60:	.word	0x00000757
     f64:	.word	0x000006aa
     f68:	.word	0x000001fc
     f6c:	.word	0x00000265
     f70:	.word	0x000001bf
     f74:	.word	0x000002a1
     f78:	.word	0x00000594
     f7c:	.word	0x000005e0
     f80:	.word	0x000004d8
     f84:	.word	0x0000017a
     f88:	.word	0x00000515
     f8c:	.word	0x00000479
     f90:	.word	0x00000611
     f94:	.word	0x00000000
     f98:	.word	0x00000415
     f9c:	.word	0x00000661
     fa0:	add	r1, sp, #116	; 0x74
     fa4:	mov	r0, r6
     fa8:	bl	0 <coda_cursor_get_num_elements>
     fac:	cmp	r0, #0
     fb0:	beq	fbc <check_data+0xfbc>
     fb4:	mvn	r0, #0
     fb8:	b	18f8 <check_data+0x18f8>
     fbc:	ldr	ip, [sp, #116]	; 0x74
     fc0:	cmp	ip, #0
     fc4:	ble	1460 <check_data+0x1460>
     fc8:	mov	r0, r6
     fcc:	bl	0 <coda_cursor_goto_first_array_element>
     fd0:	cmp	r0, #0
     fd4:	beq	fe0 <check_data+0xfe0>
     fd8:	mvn	r0, #0
     fdc:	b	18f8 <check_data+0x18f8>
     fe0:	mov	r7, #0
     fe4:	ldr	r3, [sp, #116]	; 0x74
     fe8:	cmp	r7, r3
     fec:	bge	1080 <check_data+0x1080>
     ff0:	add	r1, sp, #112	; 0x70
     ff4:	add	r2, sp, #176	; 0xb0
     ff8:	ldr	ip, [sp, #24]
     ffc:	str	ip, [sp, #8]
    1000:	str	r5, [sp, #4]
    1004:	str	r2, [sp]
    1008:	mov	r3, sl
    100c:	ldr	r2, [sp, #32]
    1010:	mov	r0, r6
    1014:	bl	0 <check_data>
    1018:	cmp	r0, #0
    101c:	beq	1028 <check_data+0x1028>
    1020:	mvn	r0, #0
    1024:	b	18f8 <check_data+0x18f8>
    1028:	cmp	sl, #0
    102c:	beq	1050 <check_data+0x1050>
    1030:	ldr	r0, [r9]
    1034:	ldr	r1, [r9, #4]
    1038:	ldr	ip, [sp, #176]	; 0xb0
    103c:	ldr	r2, [sp, #180]	; 0xb4
    1040:	adds	r3, r0, ip
    1044:	adc	r1, r1, r2
    1048:	str	r3, [r9]
    104c:	str	r1, [r9, #4]
    1050:	ldr	r0, [sp, #116]	; 0x74
    1054:	sub	ip, r0, #1
    1058:	cmp	r7, ip
    105c:	bge	1078 <check_data+0x1078>
    1060:	mov	r0, r6
    1064:	bl	0 <coda_cursor_goto_next_array_element>
    1068:	cmp	r0, #0
    106c:	beq	1078 <check_data+0x1078>
    1070:	mvn	r0, #0
    1074:	b	18f8 <check_data+0x18f8>
    1078:	add	r7, r7, #1
    107c:	b	fe4 <check_data+0xfe4>
    1080:	mov	r0, r6
    1084:	bl	0 <coda_cursor_goto_parent>
    1088:	ldr	r1, [r4]
    108c:	cmp	r1, #0
    1090:	beq	1460 <check_data+0x1460>
    1094:	ldr	r1, [sp, #112]	; 0x70
    1098:	cmp	r1, #0
    109c:	bne	1460 <check_data+0x1460>
    10a0:	mov	r3, #0
    10a4:	str	r3, [r4]
    10a8:	b	1460 <check_data+0x1460>
    10ac:	mov	r2, r6
    10b0:	add	r3, sp, #840	; 0x348
    10b4:	mov	lr, #130	; 0x82
    10b8:	ldr	ip, [r2], #4
    10bc:	subs	lr, lr, #1
    10c0:	str	ip, [r3], #4
    10c4:	bne	10b8 <check_data+0x10b8>
    10c8:	add	r0, sp, #840	; 0x348
    10cc:	add	r1, sp, #120	; 0x78
    10d0:	bl	0 <coda_cursor_get_num_elements>
    10d4:	cmp	r0, #0
    10d8:	beq	10e4 <check_data+0x10e4>
    10dc:	mvn	r0, #0
    10e0:	b	18f8 <check_data+0x18f8>
    10e4:	ldr	r0, [sp, #120]	; 0x78
    10e8:	cmp	r0, #0
    10ec:	ble	1254 <check_data+0x1254>
    10f0:	mov	r0, r6
    10f4:	bl	0 <coda_cursor_goto_first_record_field>
    10f8:	cmp	r0, #0
    10fc:	beq	1108 <check_data+0x1108>
    1100:	mvn	r0, #0
    1104:	b	18f8 <check_data+0x18f8>
    1108:	mov	r7, #0
    110c:	ldr	r0, [sp, #120]	; 0x78
    1110:	cmp	r7, r0
    1114:	bge	124c <check_data+0x124c>
    1118:	mov	ip, #0
    111c:	str	ip, [sp, #124]	; 0x7c
    1120:	add	r0, sp, #840	; 0x348
    1124:	add	r2, sp, #128	; 0x80
    1128:	mov	r1, r7
    112c:	bl	0 <coda_cursor_get_record_field_available_status>
    1130:	cmp	r0, #0
    1134:	beq	1140 <check_data+0x1140>
    1138:	mvn	r0, #0
    113c:	b	18f8 <check_data+0x18f8>
    1140:	ldr	r1, [sp, #128]	; 0x80
    1144:	cmp	r1, #0
    1148:	beq	121c <check_data+0x121c>
    114c:	ldr	ip, [r4]
    1150:	cmp	ip, #0
    1154:	beq	11bc <check_data+0x11bc>
    1158:	ldr	r0, [sp, #80]	; 0x50
    115c:	add	r2, sp, #132	; 0x84
    1160:	mov	r1, r7
    1164:	bl	0 <coda_type_get_record_field_name>
    1168:	cmp	r0, #0
    116c:	beq	1178 <check_data+0x1178>
    1170:	mvn	r0, #0
    1174:	b	18f8 <check_data+0x18f8>
    1178:	ldr	r0, [r4]
    117c:	ldr	r1, [sp, #132]	; 0x84
    1180:	add	r2, sp, #136	; 0x88
    1184:	bl	0 <coda_type_get_record_field_index_from_name>
    1188:	cmp	r0, #0
    118c:	bne	11b0 <check_data+0x11b0>
    1190:	ldr	r0, [r4]
    1194:	ldr	r1, [sp, #136]	; 0x88
    1198:	add	r2, sp, #124	; 0x7c
    119c:	bl	0 <coda_type_get_record_field_type>
    11a0:	cmp	r0, #0
    11a4:	beq	11bc <check_data+0x11bc>
    11a8:	mvn	r0, #0
    11ac:	b	18f8 <check_data+0x18f8>
    11b0:	ldr	r1, [pc, #1900]	; 1924 <check_data+0x1924>
    11b4:	mov	r2, #0
    11b8:	str	r2, [r1]
    11bc:	add	r1, sp, #124	; 0x7c
    11c0:	add	r2, sp, #176	; 0xb0
    11c4:	ldr	ip, [sp, #24]
    11c8:	str	ip, [sp, #8]
    11cc:	str	r5, [sp, #4]
    11d0:	str	r2, [sp]
    11d4:	mov	r3, sl
    11d8:	ldr	r2, [sp, #32]
    11dc:	mov	r0, r6
    11e0:	bl	0 <check_data>
    11e4:	cmp	r0, #0
    11e8:	beq	11f4 <check_data+0x11f4>
    11ec:	mvn	r0, #0
    11f0:	b	18f8 <check_data+0x18f8>
    11f4:	cmp	sl, #0
    11f8:	beq	121c <check_data+0x121c>
    11fc:	ldr	r2, [r9]
    1200:	ldr	r3, [r9, #4]
    1204:	ldr	r1, [sp, #176]	; 0xb0
    1208:	ldr	ip, [sp, #180]	; 0xb4
    120c:	adds	r1, r2, r1
    1210:	adc	r2, r3, ip
    1214:	str	r1, [r9]
    1218:	str	r2, [r9, #4]
    121c:	ldr	r1, [sp, #120]	; 0x78
    1220:	sub	r2, r1, #1
    1224:	cmp	r7, r2
    1228:	bge	1244 <check_data+0x1244>
    122c:	mov	r0, r6
    1230:	bl	0 <coda_cursor_goto_next_record_field>
    1234:	cmp	r0, #0
    1238:	beq	1244 <check_data+0x1244>
    123c:	mvn	r0, #0
    1240:	b	18f8 <check_data+0x18f8>
    1244:	add	r7, r7, #1
    1248:	b	110c <check_data+0x110c>
    124c:	mov	r0, r6
    1250:	bl	0 <coda_cursor_goto_parent>
    1254:	cmp	sl, #0
    1258:	beq	1460 <check_data+0x1460>
    125c:	ldr	r2, [sp, #80]	; 0x50
    1260:	ldr	r0, [r2, #32]
    1264:	cmp	r0, #0
    1268:	beq	1460 <check_data+0x1460>
    126c:	bl	0 <coda_get_option_use_fast_size_expressions>
    1270:	mov	r4, r0
    1274:	mov	r0, #1
    1278:	bl	0 <coda_set_option_use_fast_size_expressions>
    127c:	add	r1, sp, #184	; 0xb8
    1280:	mov	r0, r6
    1284:	bl	0 <coda_cursor_get_bit_size>
    1288:	cmp	r0, #0
    128c:	bne	137c <check_data+0x137c>
    1290:	ldr	r0, [r9]
    1294:	ldr	r3, [r9, #4]
    1298:	ldr	r1, [sp, #184]	; 0xb8
    129c:	ldr	r2, [sp, #188]	; 0xbc
    12a0:	eor	r2, r3, r2
    12a4:	eor	r1, r0, r1
    12a8:	orr	ip, r2, r1
    12ac:	cmp	ip, #0
    12b0:	beq	13a0 <check_data+0x13a0>
    12b4:	asr	r1, r3, #3
    12b8:	lsr	r0, r0, #3
    12bc:	orr	r0, r0, r3, lsl #29
    12c0:	add	r2, sp, #200	; 0xc8
    12c4:	bl	0 <coda_str64>
    12c8:	ldr	r3, [r9]
    12cc:	mov	ip, #0
    12d0:	and	r0, r3, #7
    12d4:	orr	r1, ip, r0
    12d8:	cmp	r1, #0
    12dc:	beq	1300 <check_data+0x1300>
    12e0:	add	r0, sp, #200	; 0xc8
    12e4:	bl	0 <strlen>
    12e8:	add	ip, sp, #200	; 0xc8
    12ec:	add	r0, ip, r0
    12f0:	ldr	r1, [pc, #1584]	; 1928 <check_data+0x1928>
    12f4:	ldr	ip, [r9]
    12f8:	and	r2, ip, #7
    12fc:	bl	0 <sprintf>
    1300:	ldr	r2, [sp, #184]	; 0xb8
    1304:	ldr	r0, [sp, #188]	; 0xbc
    1308:	asr	r1, r0, #3
    130c:	lsr	r2, r2, #3
    1310:	orr	r0, r2, r0, lsl #29
    1314:	add	r2, sp, #232	; 0xe8
    1318:	bl	0 <coda_str64>
    131c:	ldr	r1, [sp, #184]	; 0xb8
    1320:	mov	r0, #0
    1324:	and	ip, r1, #7
    1328:	orr	r3, r0, ip
    132c:	cmp	r3, #0
    1330:	beq	1354 <check_data+0x1354>
    1334:	add	r0, sp, #232	; 0xe8
    1338:	bl	0 <strlen>
    133c:	add	ip, sp, #232	; 0xe8
    1340:	add	r0, ip, r0
    1344:	ldr	r1, [pc, #1500]	; 1928 <check_data+0x1928>
    1348:	ldr	r2, [sp, #184]	; 0xb8
    134c:	and	r2, r2, #7
    1350:	bl	0 <sprintf>
    1354:	add	r0, sp, #328	; 0x148
    1358:	ldr	r1, [pc, #1524]	; 1954 <check_data+0x1954>
    135c:	add	r2, sp, #200	; 0xc8
    1360:	add	r3, sp, #232	; 0xe8
    1364:	bl	0 <sprintf>
    1368:	add	r1, sp, #328	; 0x148
    136c:	ldr	r2, [sp, #24]
    1370:	mov	r0, r6
    1374:	blx	r5
    1378:	b	13a0 <check_data+0x13a0>
    137c:	ldr	r0, [pc, #1440]	; 1924 <check_data+0x1924>
    1380:	ldr	r0, [r0]
    1384:	bl	0 <coda_errno_to_string>
    1388:	ldr	r2, [sp, #24]
    138c:	mov	r1, r0
    1390:	mov	r0, r6
    1394:	blx	r5
    1398:	mov	r1, #1
    139c:	str	r1, [sp, #28]
    13a0:	mov	r0, r4
    13a4:	bl	0 <coda_set_option_use_fast_size_expressions>
    13a8:	b	1460 <check_data+0x1460>
    13ac:	mov	r2, #0
    13b0:	str	r2, [sp, #144]	; 0x90
    13b4:	add	r1, sp, #140	; 0x8c
    13b8:	mov	r0, r6
    13bc:	bl	0 <coda_cursor_get_special_type>
    13c0:	cmp	r0, #0
    13c4:	beq	13d0 <check_data+0x13d0>
    13c8:	mvn	r0, #0
    13cc:	b	18f8 <check_data+0x18f8>
    13d0:	ldr	r0, [sp, #140]	; 0x8c
    13d4:	cmp	r0, #0
    13d8:	bne	13f0 <check_data+0x13f0>
    13dc:	ldr	r0, [pc, #1356]	; 1930 <check_data+0x1930>
    13e0:	ldr	r1, [pc, #1380]	; 194c <check_data+0x194c>
    13e4:	movw	r2, #778	; 0x30a
    13e8:	ldr	r3, [pc, #1348]	; 1934 <check_data+0x1934>
    13ec:	bl	0 <__assert_fail>
    13f0:	ldr	r0, [r4]
    13f4:	cmp	r0, #0
    13f8:	beq	1414 <check_data+0x1414>
    13fc:	add	r1, sp, #144	; 0x90
    1400:	bl	0 <coda_type_get_special_base_type>
    1404:	cmp	r0, #0
    1408:	beq	1414 <check_data+0x1414>
    140c:	mvn	r0, #0
    1410:	b	18f8 <check_data+0x18f8>
    1414:	mov	r0, r6
    1418:	bl	0 <coda_cursor_use_base_type_of_special_type>
    141c:	cmp	r0, #0
    1420:	beq	142c <check_data+0x142c>
    1424:	mvn	r0, #0
    1428:	b	18f8 <check_data+0x18f8>
    142c:	add	r1, sp, #144	; 0x90
    1430:	ldr	ip, [sp, #24]
    1434:	str	ip, [sp, #8]
    1438:	str	r5, [sp, #4]
    143c:	str	r9, [sp]
    1440:	mov	r3, sl
    1444:	ldr	r2, [sp, #32]
    1448:	mov	r0, r6
    144c:	bl	0 <check_data>
    1450:	cmp	r0, #0
    1454:	beq	1460 <check_data+0x1460>
    1458:	mvn	r0, #0
    145c:	b	18f8 <check_data+0x18f8>
    1460:	ldr	ip, [sp, #28]
    1464:	eor	r0, ip, #1
    1468:	mov	r3, #0
    146c:	cmp	sl, #0
    1470:	movne	r2, r0
    1474:	moveq	r2, r3
    1478:	cmp	r2, #0
    147c:	beq	18f4 <check_data+0x18f4>
    1480:	ldr	r0, [r6, #4]
    1484:	lsl	r2, r0, #4
    1488:	add	r2, r6, r2
    148c:	sub	lr, r2, #4096	; 0x1000
    1490:	ldr	ip, [lr, #4088]	; 0xff8
    1494:	ldr	r2, [ip]
    1498:	cmp	r2, #100	; 0x64
    149c:	bne	18f4 <check_data+0x18f4>
    14a0:	ldr	r2, [ip, #8]
    14a4:	cmp	r2, #2
    14a8:	bne	18f4 <check_data+0x18f4>
    14ac:	ldr	r4, [ip, #16]
    14b0:	asr	r8, r4, #31
    14b4:	mov	r2, #0
    14b8:	mov	r1, #0
    14bc:	str	r1, [sp, #192]	; 0xc0
    14c0:	str	r2, [sp, #196]	; 0xc4
    14c4:	cmp	r9, #0
    14c8:	bne	14e8 <check_data+0x14e8>
    14cc:	add	r1, sp, #192	; 0xc0
    14d0:	mov	r0, r6
    14d4:	bl	0 <coda_cursor_get_bit_size>
    14d8:	cmp	r0, #0
    14dc:	beq	14f8 <check_data+0x14f8>
    14e0:	mvn	r0, #0
    14e4:	b	18f8 <check_data+0x18f8>
    14e8:	ldr	r3, [r9]
    14ec:	ldr	ip, [r9, #4]
    14f0:	str	r3, [sp, #192]	; 0xc0
    14f4:	str	ip, [sp, #196]	; 0xc4
    14f8:	ldr	ip, [r6]
    14fc:	ldr	r3, [ip, #16]
    1500:	cmp	r3, #2
    1504:	bne	1820 <check_data+0x1820>
    1508:	ldr	ip, [sp, #192]	; 0xc0
    150c:	ldr	r0, [sp, #196]	; 0xc4
    1510:	asr	r2, r0, #3
    1514:	lsr	r1, ip, #3
    1518:	orr	r0, r1, r0, lsl #29
    151c:	and	ip, ip, #7
    1520:	cmp	ip, #0
    1524:	movne	r1, #1
    1528:	moveq	r1, #0
    152c:	asr	r3, r1, #31
    1530:	adds	lr, r0, r1
    1534:	adc	r3, r2, r3
    1538:	mov	r2, lr
    153c:	mov	ip, r4
    1540:	mov	r0, r8
    1544:	cmp	r3, r0
    1548:	bne	155c <check_data+0x155c>
    154c:	cmp	r2, ip
    1550:	movcc	ip, #1
    1554:	movcs	ip, #0
    1558:	b	1568 <check_data+0x1568>
    155c:	cmp	r3, r0
    1560:	movlt	ip, #1
    1564:	movge	ip, #0
    1568:	cmp	ip, #0
    156c:	beq	1820 <check_data+0x1820>
    1570:	ldr	r3, [r6, #4]
    1574:	lsl	ip, r3, #4
    1578:	add	ip, r6, ip
    157c:	sub	lr, ip, #4096	; 0x1000
    1580:	ldr	r3, [lr, #4088]	; 0xff8
    1584:	ldr	r7, [r3, #24]
    1588:	ldr	r0, [sp, #192]	; 0xc0
    158c:	ldr	r2, [sp, #196]	; 0xc4
    1590:	asr	r3, r2, #3
    1594:	lsr	ip, r0, #3
    1598:	orr	r2, ip, r2, lsl #29
    159c:	subs	sl, r4, r2
    15a0:	sbc	fp, r8, r3
    15a4:	add	r0, sl, #1
    15a8:	bl	0 <malloc>
    15ac:	mov	r9, r0
    15b0:	cmp	r9, #0
    15b4:	bne	15dc <check_data+0x15dc>
    15b8:	mvn	r0, #0
    15bc:	ldr	r1, [pc, #896]	; 1944 <check_data+0x1944>
    15c0:	ldr	r3, [pc, #900]	; 194c <check_data+0x194c>
    15c4:	movw	ip, #831	; 0x33f
    15c8:	str	ip, [sp]
    15cc:	mov	r2, sl
    15d0:	bl	0 <coda_set_error>
    15d4:	mvn	r0, #0
    15d8:	b	18f8 <check_data+0x18f8>
    15dc:	ldr	r4, [r6]
    15e0:	asr	r3, r7, #31
    15e4:	ldr	r1, [sp, #192]	; 0xc0
    15e8:	ldr	r2, [sp, #196]	; 0xc4
    15ec:	asr	r0, r2, #3
    15f0:	lsr	ip, r1, #3
    15f4:	orr	ip, ip, r2, lsl #29
    15f8:	adds	r7, r7, ip
    15fc:	adc	r8, r3, r0
    1600:	ldr	r1, [r4, #48]	; 0x30
    1604:	cmp	r1, #0
    1608:	bne	16bc <check_data+0x16bc>
    160c:	ldr	r2, [r4, #16]
    1610:	cmp	r2, #0
    1614:	beq	1634 <check_data+0x1634>
    1618:	cmp	r2, #1
    161c:	beq	1634 <check_data+0x1634>
    1620:	ldr	r0, [pc, #800]	; 1948 <check_data+0x1948>
    1624:	ldr	r1, [pc, #768]	; 192c <check_data+0x192c>
    1628:	mov	r2, #83	; 0x53
    162c:	ldr	r3, [pc, #776]	; 193c <check_data+0x193c>
    1630:	bl	0 <__assert_fail>
    1634:	adds	ip, r7, sl
    1638:	adc	r1, r8, fp
    163c:	ldr	r2, [r4, #8]
    1640:	ldr	r3, [r4, #12]
    1644:	cmp	r1, r3
    1648:	bne	1658 <check_data+0x1658>
    164c:	cmp	ip, r2
    1650:	bhi	1660 <check_data+0x1660>
    1654:	b	1674 <check_data+0x1674>
    1658:	cmp	r1, r3
    165c:	bls	1674 <check_data+0x1674>
    1660:	mvn	r0, #300	; 0x12c
    1664:	ldr	r1, [pc, #724]	; 1940 <check_data+0x1940>
    1668:	bl	0 <coda_set_error>
    166c:	mvn	r0, #0
    1670:	b	1784 <check_data+0x1784>
    1674:	ldr	r0, [r4, #56]	; 0x38
    1678:	mov	r2, sl
    167c:	mov	r3, r7
    1680:	mov	r1, r9
    1684:	bl	0 <pread>
    1688:	cmp	r0, #0
    168c:	bge	1780 <check_data+0x1780>
    1690:	bl	0 <__errno_location>
    1694:	ldr	r0, [r0]
    1698:	bl	0 <strerror>
    169c:	mvn	r2, #21
    16a0:	ldr	r1, [pc, #656]	; 1938 <check_data+0x1938>
    16a4:	mov	r3, r0
    16a8:	mov	r0, r2
    16ac:	mov	r2, r3
    16b0:	bl	0 <coda_set_error>
    16b4:	mvn	r0, #0
    16b8:	b	1784 <check_data+0x1784>
    16bc:	adds	r2, r7, sl
    16c0:	adc	r3, r8, fp
    16c4:	ldr	r0, [r4, #40]	; 0x28
    16c8:	ldr	r1, [r4, #44]	; 0x2c
    16cc:	cmp	r3, r1
    16d0:	bne	16e0 <check_data+0x16e0>
    16d4:	cmp	r2, r0
    16d8:	bhi	16e8 <check_data+0x16e8>
    16dc:	b	176c <check_data+0x176c>
    16e0:	cmp	r3, r1
    16e4:	bls	176c <check_data+0x176c>
    16e8:	ldr	ip, [r4, #16]
    16ec:	cmp	ip, #0
    16f0:	beq	1758 <check_data+0x1758>
    16f4:	cmp	ip, #1
    16f8:	beq	1758 <check_data+0x1758>
    16fc:	add	r2, sp, #360	; 0x168
    1700:	add	r2, r2, #1024	; 0x400
    1704:	mov	r1, fp
    1708:	mov	r0, sl
    170c:	bl	0 <coda_str64>
    1710:	add	r2, sp, #1408	; 0x580
    1714:	mov	r1, r8
    1718:	mov	r0, r7
    171c:	bl	0 <coda_str64>
    1720:	ldr	r0, [r4, #40]	; 0x28
    1724:	ldr	r1, [r4, #44]	; 0x2c
    1728:	add	r2, sp, #1360	; 0x550
    172c:	bl	0 <coda_str64>
    1730:	mvn	r0, #300	; 0x12c
    1734:	ldr	r1, [pc, #532]	; 1950 <check_data+0x1950>
    1738:	add	r2, sp, #360	; 0x168
    173c:	add	r2, r2, #1024	; 0x400
    1740:	add	r3, sp, #1408	; 0x580
    1744:	add	r4, sp, #1360	; 0x550
    1748:	str	r4, [sp]
    174c:	bl	0 <coda_set_error>
    1750:	mvn	r0, #0
    1754:	b	1784 <check_data+0x1784>
    1758:	mvn	r0, #300	; 0x12c
    175c:	ldr	r1, [pc, #476]	; 1940 <check_data+0x1940>
    1760:	bl	0 <coda_set_error>
    1764:	mvn	r0, #0
    1768:	b	1784 <check_data+0x1784>
    176c:	ldr	r2, [r4, #48]	; 0x30
    1770:	add	r1, r2, r7
    1774:	mov	r2, sl
    1778:	mov	r0, r9
    177c:	bl	0 <memcpy>
    1780:	mov	r0, #0
    1784:	cmp	r0, #0
    1788:	beq	179c <check_data+0x179c>
    178c:	mov	r0, r9
    1790:	bl	0 <free>
    1794:	mvn	r0, #0
    1798:	b	18f8 <check_data+0x18f8>
    179c:	mov	r1, #0
    17a0:	strb	r1, [r9, sl]
    17a4:	mov	r3, #0
    17a8:	mov	r2, r3
    17ac:	asr	r0, r2, #31
    17b0:	mov	ip, sl
    17b4:	mov	r1, fp
    17b8:	cmp	r0, r1
    17bc:	bne	17cc <check_data+0x17cc>
    17c0:	cmp	r2, ip
    17c4:	bcc	17d4 <check_data+0x17d4>
    17c8:	b	1814 <check_data+0x1814>
    17cc:	cmp	r0, r1
    17d0:	bge	1814 <check_data+0x1814>
    17d4:	ldrb	r1, [r9, r3]
    17d8:	cmp	r1, #32
    17dc:	beq	180c <check_data+0x180c>
    17e0:	cmp	r1, #9
    17e4:	beq	180c <check_data+0x180c>
    17e8:	cmp	r1, #10
    17ec:	beq	180c <check_data+0x180c>
    17f0:	cmp	r1, #13
    17f4:	beq	180c <check_data+0x180c>
    17f8:	ldr	r1, [pc, #348]	; 195c <check_data+0x195c>
    17fc:	ldr	r2, [sp, #24]
    1800:	mov	r0, r6
    1804:	blx	r5
    1808:	b	1814 <check_data+0x1814>
    180c:	add	r3, r3, #1
    1810:	b	17a8 <check_data+0x17a8>
    1814:	mov	r0, r9
    1818:	bl	0 <free>
    181c:	b	18f4 <check_data+0x18f4>
    1820:	ldr	r0, [sp, #192]	; 0xc0
    1824:	ldr	r3, [sp, #196]	; 0xc4
    1828:	asr	ip, r3, #3
    182c:	lsr	r1, r0, #3
    1830:	orr	r1, r1, r3, lsl #29
    1834:	and	r0, r0, #7
    1838:	cmp	r0, #0
    183c:	movne	r3, #1
    1840:	moveq	r3, #0
    1844:	asr	r0, r3, #31
    1848:	adds	r3, r1, r3
    184c:	adc	r0, ip, r0
    1850:	mov	r2, r4
    1854:	mov	ip, r8
    1858:	eor	r1, r0, ip
    185c:	eor	ip, r3, r2
    1860:	orr	r3, r1, ip
    1864:	cmp	r3, #0
    1868:	beq	18f4 <check_data+0x18f4>
    186c:	add	r2, sp, #264	; 0x108
    1870:	mov	r1, r8
    1874:	mov	r0, r4
    1878:	bl	0 <coda_str64>
    187c:	ldr	r0, [sp, #192]	; 0xc0
    1880:	ldr	r2, [sp, #196]	; 0xc4
    1884:	asr	r1, r2, #3
    1888:	lsr	r3, r0, #3
    188c:	orr	r0, r3, r2, lsl #29
    1890:	add	r2, sp, #296	; 0x128
    1894:	bl	0 <coda_str64>
    1898:	ldr	r1, [sp, #192]	; 0xc0
    189c:	mov	ip, #0
    18a0:	and	r0, r1, #7
    18a4:	orr	r2, ip, r0
    18a8:	cmp	r2, #0
    18ac:	beq	18d0 <check_data+0x18d0>
    18b0:	add	r0, sp, #296	; 0x128
    18b4:	bl	0 <strlen>
    18b8:	add	r1, sp, #296	; 0x128
    18bc:	add	r0, r1, r0
    18c0:	ldr	r1, [pc, #96]	; 1928 <check_data+0x1928>
    18c4:	ldr	r2, [sp, #192]	; 0xc0
    18c8:	and	r2, r2, #7
    18cc:	bl	0 <sprintf>
    18d0:	add	r0, sp, #584	; 0x248
    18d4:	ldr	r1, [pc, #124]	; 1958 <check_data+0x1958>
    18d8:	add	r2, sp, #264	; 0x108
    18dc:	add	r3, sp, #296	; 0x128
    18e0:	bl	0 <sprintf>
    18e4:	add	r1, sp, #584	; 0x248
    18e8:	ldr	r2, [sp, #24]
    18ec:	mov	r0, r6
    18f0:	blx	r5
    18f4:	mov	r0, #0
    18f8:	ldr	r4, [sp, #36]	; 0x24
    18fc:	ldr	r5, [sp, #40]	; 0x28
    1900:	ldr	r6, [sp, #44]	; 0x2c
    1904:	ldr	r7, [sp, #48]	; 0x30
    1908:	ldr	r8, [sp, #52]	; 0x34
    190c:	ldr	r9, [sp, #56]	; 0x38
    1910:	ldr	sl, [sp, #60]	; 0x3c
    1914:	ldr	fp, [sp, #64]	; 0x40
    1918:	ldr	lr, [sp, #16]
    191c:	add	sp, sp, #1456	; 0x5b0
    1920:	bx	lr
    1924:	.word	0x00000000
    1928:	.word	0x000000c8
    192c:	.word	0x0000033f
    1930:	.word	0x0000056f
    1934:	.word	0x00000777
    1938:	.word	0x00000321
    193c:	.word	0x0000076c
    1940:	.word	0x000006df
    1944:	.word	0x000006aa
    1948:	.word	0x00000709
    194c:	.word	0x00000515
    1950:	.word	0x0000043e
    1954:	.word	0x000003af
    1958:	.word	0x000002d9
    195c:	.word	0x000001c9

00001960 <coda_product_check>:
    1960:	mov	ip, sp
    1964:	sub	sp, sp, #896	; 0x380
    1968:	str	ip, [sp, #12]
    196c:	str	lr, [sp, #16]
    1970:	str	r4, [sp, #24]
    1974:	str	r5, [sp, #28]
    1978:	str	r6, [sp, #32]
    197c:	str	r7, [sp, #36]	; 0x24
    1980:	str	r8, [sp, #40]	; 0x28
    1984:	mov	r5, r3
    1988:	mov	r4, r2
    198c:	mov	r6, r1
    1990:	mov	r7, r0
    1994:	mov	r3, #0
    1998:	str	r3, [sp, #48]	; 0x30
    199c:	mov	ip, #0
    19a0:	mov	r3, #0
    19a4:	str	r3, [sp, #56]	; 0x38
    19a8:	str	ip, [sp, #60]	; 0x3c
    19ac:	str	r3, [sp, #64]	; 0x40
    19b0:	str	ip, [sp, #68]	; 0x44
    19b4:	add	r0, sp, #376	; 0x178
    19b8:	mov	r1, r7
    19bc:	bl	0 <coda_cursor_set_product>
    19c0:	cmp	r0, #0
    19c4:	beq	19d0 <coda_product_check+0x70>
    19c8:	mvn	r0, #0
    19cc:	b	1bd8 <coda_product_check+0x278>
    19d0:	add	r1, sp, #52	; 0x34
    19d4:	mov	r0, r7
    19d8:	bl	0 <coda_get_product_format>
    19dc:	cmp	r0, #0
    19e0:	beq	19ec <coda_product_check+0x8c>
    19e4:	mvn	r0, #0
    19e8:	b	1bd8 <coda_product_check+0x278>
    19ec:	ldr	r0, [sp, #52]	; 0x34
    19f0:	cmp	r0, #0
    19f4:	beq	1a24 <coda_product_check+0xc4>
    19f8:	cmp	r0, #1
    19fc:	beq	1a24 <coda_product_check+0xc4>
    1a00:	cmp	r0, #2
    1a04:	beq	1a24 <coda_product_check+0xc4>
    1a08:	ldr	r0, [r7, #24]
    1a0c:	cmp	r0, #0
    1a10:	beq	1a24 <coda_product_check+0xc4>
    1a14:	ldr	r0, [r0, #28]
    1a18:	cmp	r0, #0
    1a1c:	beq	1a24 <coda_product_check+0xc4>
    1a20:	str	r0, [sp, #48]	; 0x30
    1a24:	ldr	r1, [sp, #52]	; 0x34
    1a28:	cmp	r1, #0
    1a2c:	beq	1a40 <coda_product_check+0xe0>
    1a30:	cmp	r1, #1
    1a34:	moveq	r8, #1
    1a38:	movne	r8, #0
    1a3c:	b	1a44 <coda_product_check+0xe4>
    1a40:	mov	r8, #1
    1a44:	cmp	r8, #0
    1a48:	beq	1a84 <coda_product_check+0x124>
    1a4c:	add	r1, sp, #56	; 0x38
    1a50:	mov	r0, r7
    1a54:	bl	0 <coda_get_product_file_size>
    1a58:	cmp	r0, #0
    1a5c:	beq	1a68 <coda_product_check+0x108>
    1a60:	mvn	r0, #0
    1a64:	b	1bd8 <coda_product_check+0x278>
    1a68:	ldr	r2, [sp, #56]	; 0x38
    1a6c:	ldr	r3, [sp, #60]	; 0x3c
    1a70:	lsl	r1, r3, #3
    1a74:	orr	ip, r1, r2, lsr #29
    1a78:	lsl	r3, r2, #3
    1a7c:	str	r3, [sp, #56]	; 0x38
    1a80:	str	ip, [sp, #60]	; 0x3c
    1a84:	cmp	r6, #0
    1a88:	moveq	r2, #1
    1a8c:	movne	r2, #0
    1a90:	mov	r0, #0
    1a94:	cmp	r8, #0
    1a98:	movne	ip, r2
    1a9c:	moveq	ip, r0
    1aa0:	cmp	ip, #0
    1aa4:	beq	1ae8 <coda_product_check+0x188>
    1aa8:	bl	0 <coda_get_option_use_fast_size_expressions>
    1aac:	mov	r6, r0
    1ab0:	mov	r0, #0
    1ab4:	bl	0 <coda_set_option_use_fast_size_expressions>
    1ab8:	add	r0, sp, #376	; 0x178
    1abc:	add	r1, sp, #64	; 0x40
    1ac0:	bl	0 <coda_cursor_get_bit_size>
    1ac4:	cmp	r0, #0
    1ac8:	beq	1adc <coda_product_check+0x17c>
    1acc:	mov	r0, r6
    1ad0:	bl	0 <coda_set_option_use_fast_size_expressions>
    1ad4:	mvn	r0, #0
    1ad8:	b	1bd8 <coda_product_check+0x278>
    1adc:	mov	r0, r6
    1ae0:	bl	0 <coda_set_option_use_fast_size_expressions>
    1ae4:	b	1b1c <coda_product_check+0x1bc>
    1ae8:	add	r0, sp, #376	; 0x178
    1aec:	add	r1, sp, #48	; 0x30
    1af0:	add	r2, sp, #64	; 0x40
    1af4:	str	r5, [sp, #8]
    1af8:	str	r4, [sp, #4]
    1afc:	str	r2, [sp]
    1b00:	mov	r3, r8
    1b04:	mov	r2, r6
    1b08:	bl	0 <check_data>
    1b0c:	cmp	r0, #0
    1b10:	beq	1b1c <coda_product_check+0x1bc>
    1b14:	mvn	r0, #0
    1b18:	b	1bd8 <coda_product_check+0x278>
    1b1c:	cmp	r8, #0
    1b20:	beq	1bd4 <coda_product_check+0x274>
    1b24:	ldr	r3, [sp, #56]	; 0x38
    1b28:	ldr	r2, [sp, #60]	; 0x3c
    1b2c:	ldr	r0, [sp, #64]	; 0x40
    1b30:	ldr	ip, [sp, #68]	; 0x44
    1b34:	eor	r1, r2, ip
    1b38:	eor	r0, r3, r0
    1b3c:	orr	ip, r1, r0
    1b40:	cmp	ip, #0
    1b44:	beq	1bd4 <coda_product_check+0x274>
    1b48:	asr	r1, r2, #3
    1b4c:	lsr	ip, r3, #3
    1b50:	orr	r0, ip, r2, lsl #29
    1b54:	add	r2, sp, #72	; 0x48
    1b58:	bl	0 <coda_str64>
    1b5c:	ldr	r3, [sp, #64]	; 0x40
    1b60:	ldr	r2, [sp, #68]	; 0x44
    1b64:	asr	r1, r2, #3
    1b68:	lsr	r3, r3, #3
    1b6c:	orr	r0, r3, r2, lsl #29
    1b70:	add	r2, sp, #96	; 0x60
    1b74:	bl	0 <coda_str64>
    1b78:	ldr	r1, [sp, #64]	; 0x40
    1b7c:	mov	r0, #0
    1b80:	and	ip, r1, #7
    1b84:	mov	r1, ip
    1b88:	orr	r3, r0, r1
    1b8c:	cmp	r3, #0
    1b90:	beq	1bb0 <coda_product_check+0x250>
    1b94:	add	r0, sp, #120	; 0x78
    1b98:	ldr	r1, [pc, #92]	; 1bfc <coda_product_check+0x29c>
    1b9c:	add	r2, sp, #72	; 0x48
    1ba0:	add	r3, sp, #96	; 0x60
    1ba4:	str	ip, [sp]
    1ba8:	bl	0 <sprintf>
    1bac:	b	1bc4 <coda_product_check+0x264>
    1bb0:	add	r0, sp, #120	; 0x78
    1bb4:	ldr	r1, [pc, #60]	; 1bf8 <coda_product_check+0x298>
    1bb8:	add	r2, sp, #72	; 0x48
    1bbc:	add	r3, sp, #96	; 0x60
    1bc0:	bl	0 <sprintf>
    1bc4:	mov	r0, #0
    1bc8:	add	r1, sp, #120	; 0x78
    1bcc:	mov	r2, r5
    1bd0:	blx	r4
    1bd4:	mov	r0, #0
    1bd8:	ldr	r4, [sp, #24]
    1bdc:	ldr	r5, [sp, #28]
    1be0:	ldr	r6, [sp, #32]
    1be4:	ldr	r7, [sp, #36]	; 0x24
    1be8:	ldr	r8, [sp, #40]	; 0x28
    1bec:	ldr	lr, [sp, #16]
    1bf0:	add	sp, sp, #896	; 0x380
    1bf4:	bx	lr
    1bf8:	.word	0x00000030
    1bfc:	.word	0x00000104
