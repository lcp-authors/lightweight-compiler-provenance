
../compcert-repos/dvidelabs-flatcc-3b39ef7/samples/reflection/CMakeFiles/bfbs2json.dir/bfbs2json.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_type>:
   0:	push	{r4, sl, fp, lr}
   4:	add	fp, sp, #8
   8:	mov	r4, r0
   c:	mov	r0, #123	; 0x7b
  10:	bl	0 <putchar>
  14:	cmp	r4, #0
  18:	beq	188 <print_type+0x188>
  1c:	ldr	r0, [r4]
  20:	mov	r2, r4
  24:	mov	r1, #1
  28:	ldrh	r3, [r2, -r0]!
  2c:	rsb	r0, r0, #0
  30:	cmp	r3, #6
  34:	bcc	84 <print_type+0x84>
  38:	ldrh	r2, [r2, #4]
  3c:	cmp	r2, #0
  40:	beq	84 <print_type+0x84>
  44:	add	r0, r4, r2
  48:	ldrsb	r0, [r0]
  4c:	cmp	r0, #16
  50:	bhi	64 <print_type+0x64>
  54:	movw	r1, #0
  58:	movt	r1, #0
  5c:	ldr	r1, [r1, r0, lsl #2]
  60:	b	6c <print_type+0x6c>
  64:	movw	r1, #0
  68:	movt	r1, #0
  6c:	movw	r0, #0
  70:	movt	r0, #0
  74:	bl	0 <printf>
  78:	ldr	r0, [r4]
  7c:	mov	r1, #0
  80:	rsb	r0, r0, #0
  84:	mov	r2, r4
  88:	ldrh	r3, [r2, r0]!
  8c:	cmp	r3, #8
  90:	bcc	11c <print_type+0x11c>
  94:	ldrh	r2, [r2, #6]
  98:	cmp	r2, #0
  9c:	beq	11c <print_type+0x11c>
  a0:	cmp	r1, #0
  a4:	bne	b8 <print_type+0xb8>
  a8:	mov	r0, #44	; 0x2c
  ac:	bl	0 <putchar>
  b0:	ldr	r0, [r4]
  b4:	rsb	r0, r0, #0
  b8:	mov	r2, r4
  bc:	movw	r1, #0
  c0:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
  c4:	movt	r1, #0
  c8:	cmp	r0, #6
  cc:	bcc	104 <print_type+0x104>
  d0:	ldrh	r0, [r2, #4]
  d4:	cmp	r0, #0
  d8:	beq	104 <print_type+0x104>
  dc:	add	r0, r4, r0
  e0:	ldrsb	r0, [r0]
  e4:	cmp	r0, #16
  e8:	bhi	fc <print_type+0xfc>
  ec:	movw	r1, #0
  f0:	movt	r1, #0
  f4:	ldr	r1, [r1, r0, lsl #2]
  f8:	b	104 <print_type+0x104>
  fc:	movw	r1, #0
 100:	movt	r1, #0
 104:	movw	r0, #0
 108:	movt	r0, #0
 10c:	bl	0 <printf>
 110:	ldr	r0, [r4]
 114:	mov	r1, #0
 118:	rsb	r0, r0, #0
 11c:	mov	r2, r4
 120:	ldrh	r3, [r2, r0]!
 124:	cmp	r3, #10
 128:	bcc	17c <print_type+0x17c>
 12c:	ldrh	r2, [r2, #8]
 130:	cmp	r2, #0
 134:	beq	17c <print_type+0x17c>
 138:	cmp	r1, #0
 13c:	bne	150 <print_type+0x150>
 140:	mov	r0, #44	; 0x2c
 144:	bl	0 <putchar>
 148:	ldr	r0, [r4]
 14c:	rsb	r0, r0, #0
 150:	mov	r2, r4
 154:	mvn	r1, #0
 158:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
 15c:	cmp	r0, #10
 160:	bcc	170 <print_type+0x170>
 164:	ldrh	r0, [r2, #8]
 168:	cmp	r0, #0
 16c:	ldrne	r1, [r4, r0]
 170:	movw	r0, #0
 174:	movt	r0, #0
 178:	bl	0 <printf>
 17c:	mov	r0, #125	; 0x7d
 180:	pop	{r4, sl, fp, lr}
 184:	b	0 <putchar>
 188:	movw	r0, #0
 18c:	movw	r1, #0
 190:	movw	r3, #0
 194:	mov	r2, #147	; 0x93
 198:	movt	r0, #0
 19c:	movt	r1, #0
 1a0:	movt	r3, #0
 1a4:	bl	0 <__assert_fail>

000001a8 <print_object>:
 1a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1ac:	add	fp, sp, #28
 1b0:	sub	sp, sp, #4
 1b4:	cmp	r0, #0
 1b8:	beq	5d0 <print_object+0x428>
 1bc:	ldr	r1, [r0]
 1c0:	mov	r2, r0
 1c4:	ldrh	r1, [r2, -r1]!	; <UNPREDICTABLE>
 1c8:	cmp	r1, #8
 1cc:	bcc	5c4 <print_object+0x41c>
 1d0:	ldrh	r5, [r2, #6]
 1d4:	cmp	r5, #0
 1d8:	beq	5c4 <print_object+0x41c>
 1dc:	ldrh	r2, [r2, #4]
 1e0:	cmp	r2, #0
 1e4:	beq	5f0 <print_object+0x448>
 1e8:	mov	r1, r0
 1ec:	mov	r4, r0
 1f0:	str	r0, [sp]
 1f4:	ldr	r0, [r1, r2]!
 1f8:	ldr	r9, [r4, r5]!
 1fc:	add	r0, r1, r0
 200:	add	r1, r0, #4
 204:	movw	r0, #0
 208:	movt	r0, #0
 20c:	bl	0 <printf>
 210:	movw	r0, #0
 214:	movt	r0, #0
 218:	bl	0 <printf>
 21c:	ldr	r0, [r4, r9]
 220:	cmp	r0, #0
 224:	beq	494 <print_object+0x2ec>
 228:	ldr	r2, [sp]
 22c:	add	r1, r9, r5
 230:	movw	r5, #0
 234:	mov	r7, #0
 238:	movt	r5, #0
 23c:	add	r1, r1, r2
 240:	add	sl, r1, #24
 244:	cmp	r7, #0
 248:	bne	274 <print_object+0xcc>
 24c:	b	280 <print_object+0xd8>
 250:	mov	r0, #125	; 0x7d
 254:	bl	0 <putchar>
 258:	ldr	r0, [r4, r9]
 25c:	add	r7, r7, #1
 260:	add	sl, sl, #4
 264:	cmp	r7, r0
 268:	bcs	494 <print_object+0x2ec>
 26c:	cmp	r7, #0
 270:	beq	280 <print_object+0xd8>
 274:	mov	r0, #44	; 0x2c
 278:	bl	0 <putchar>
 27c:	ldr	r0, [r4, r9]
 280:	cmp	r0, r7
 284:	bls	5a4 <print_object+0x3fc>
 288:	ldr	r6, [sl, #-20]	; 0xffffffec
 28c:	add	r8, sl, r6
 290:	ldr	r0, [r8, #-20]	; 0xffffffec
 294:	sub	r0, r6, r0
 298:	add	r0, sl, r0
 29c:	ldrh	r1, [r0, #-20]	; 0xffffffec
 2a0:	cmp	r1, #6
 2a4:	bcc	564 <print_object+0x3bc>
 2a8:	ldrh	r0, [r0, #-16]
 2ac:	cmp	r0, #0
 2b0:	beq	564 <print_object+0x3bc>
 2b4:	add	r1, r6, r0
 2b8:	add	r1, sl, r1
 2bc:	ldr	r1, [r1, #-20]	; 0xffffffec
 2c0:	add	r1, r1, r6
 2c4:	add	r0, r1, r0
 2c8:	add	r0, sl, r0
 2cc:	sub	r1, r0, #16
 2d0:	mov	r0, r5
 2d4:	bl	0 <printf>
 2d8:	ldr	r0, [r8, #-20]	; 0xffffffec
 2dc:	sub	r0, r6, r0
 2e0:	add	r0, sl, r0
 2e4:	ldrh	r1, [r0, #-20]	; 0xffffffec
 2e8:	cmp	r1, #8
 2ec:	bcc	584 <print_object+0x3dc>
 2f0:	ldrh	r0, [r0, #-14]
 2f4:	cmp	r0, #0
 2f8:	beq	584 <print_object+0x3dc>
 2fc:	add	r1, r6, r0
 300:	add	r1, sl, r1
 304:	ldr	r1, [r1, #-20]	; 0xffffffec
 308:	add	r1, r1, r6
 30c:	add	r0, r1, r0
 310:	add	r0, sl, r0
 314:	sub	r0, r0, #20
 318:	bl	0 <print_type>
 31c:	ldr	r0, [r8, #-20]	; 0xffffffec
 320:	sub	r1, r6, r0
 324:	rsb	r0, r0, #0
 328:	add	r1, sl, r1
 32c:	ldrh	r2, [r1, #-20]	; 0xffffffec
 330:	cmp	r2, #10
 334:	bcc	364 <print_object+0x1bc>
 338:	ldrh	r1, [r1, #-12]
 33c:	cmp	r1, #0
 340:	beq	364 <print_object+0x1bc>
 344:	add	r0, r6, r1
 348:	add	r0, sl, r0
 34c:	ldrh	r1, [r0, #-20]	; 0xffffffec
 350:	movw	r0, #0
 354:	movt	r0, #0
 358:	bl	0 <printf>
 35c:	ldr	r0, [r8, #-20]	; 0xffffffec
 360:	rsb	r0, r0, #0
 364:	add	r1, r0, r6
 368:	add	r1, sl, r1
 36c:	ldrh	r2, [r1, #-20]	; 0xffffffec
 370:	cmp	r2, #14
 374:	bcc	3a4 <print_object+0x1fc>
 378:	ldrh	r1, [r1, #-8]
 37c:	cmp	r1, #0
 380:	beq	3a4 <print_object+0x1fc>
 384:	add	r0, r6, r1
 388:	add	r0, sl, r0
 38c:	ldrd	r2, [r0, #-20]	; 0xffffffec
 390:	movw	r0, #0
 394:	movt	r0, #0
 398:	bl	0 <printf>
 39c:	ldr	r0, [r8, #-20]	; 0xffffffec
 3a0:	rsb	r0, r0, #0
 3a4:	add	r1, r0, r6
 3a8:	add	r1, sl, r1
 3ac:	ldrh	r2, [r1, #-20]	; 0xffffffec
 3b0:	cmp	r2, #16
 3b4:	bcc	3e8 <print_object+0x240>
 3b8:	ldrh	r1, [r1, #-6]
 3bc:	cmp	r1, #0
 3c0:	beq	3e8 <print_object+0x240>
 3c4:	add	r0, r6, r1
 3c8:	add	r0, sl, r0
 3cc:	vldr	d16, [r0, #-20]	; 0xffffffec
 3d0:	movw	r0, #0
 3d4:	movt	r0, #0
 3d8:	vmov	r2, r3, d16
 3dc:	bl	0 <printf>
 3e0:	ldr	r0, [r8, #-20]	; 0xffffffec
 3e4:	rsb	r0, r0, #0
 3e8:	add	r1, r0, r6
 3ec:	add	r1, sl, r1
 3f0:	ldrh	r2, [r1, #-20]	; 0xffffffec
 3f4:	cmp	r2, #20
 3f8:	bcc	440 <print_object+0x298>
 3fc:	ldrh	r1, [r1, #-2]
 400:	cmp	r1, #0
 404:	beq	440 <print_object+0x298>
 408:	add	r0, r6, r1
 40c:	movw	r1, #0
 410:	add	r0, sl, r0
 414:	movt	r1, #0
 418:	ldrb	r0, [r0, #-20]	; 0xffffffec
 41c:	cmp	r0, #0
 420:	movw	r0, #0
 424:	movt	r0, #0
 428:	moveq	r1, r0
 42c:	movw	r0, #0
 430:	movt	r0, #0
 434:	bl	0 <printf>
 438:	ldr	r0, [r8, #-20]	; 0xffffffec
 43c:	rsb	r0, r0, #0
 440:	add	r0, r0, r6
 444:	add	r0, sl, r0
 448:	ldrh	r1, [r0, #-20]	; 0xffffffec
 44c:	cmp	r1, #22
 450:	bcc	250 <print_object+0xa8>
 454:	ldrh	r0, [r0]
 458:	cmp	r0, #0
 45c:	beq	250 <print_object+0xa8>
 460:	add	r0, r6, r0
 464:	movw	r1, #0
 468:	add	r0, sl, r0
 46c:	movt	r1, #0
 470:	ldrb	r0, [r0, #-20]	; 0xffffffec
 474:	cmp	r0, #0
 478:	movw	r0, #0
 47c:	movt	r0, #0
 480:	moveq	r1, r0
 484:	movw	r0, #0
 488:	movt	r0, #0
 48c:	bl	0 <printf>
 490:	b	250 <print_object+0xa8>
 494:	mov	r0, #93	; 0x5d
 498:	bl	0 <putchar>
 49c:	ldr	r4, [sp]
 4a0:	ldr	r0, [r4]
 4a4:	mov	r1, r4
 4a8:	ldrh	r2, [r1, -r0]!
 4ac:	rsb	r0, r0, #0
 4b0:	cmp	r2, #10
 4b4:	bcc	4f4 <print_object+0x34c>
 4b8:	ldrh	r1, [r1, #8]
 4bc:	cmp	r1, #0
 4c0:	beq	4f4 <print_object+0x34c>
 4c4:	ldrb	r0, [r4, r1]
 4c8:	movw	r2, #0
 4cc:	movw	r1, #0
 4d0:	movt	r2, #0
 4d4:	movt	r1, #0
 4d8:	cmp	r0, #0
 4dc:	movw	r0, #0
 4e0:	movt	r0, #0
 4e4:	moveq	r1, r2
 4e8:	bl	0 <printf>
 4ec:	ldr	r0, [r4]
 4f0:	rsb	r0, r0, #0
 4f4:	mov	r1, r4
 4f8:	ldrh	r2, [r1, r0]!
 4fc:	cmp	r2, #12
 500:	bcc	528 <print_object+0x380>
 504:	ldrh	r1, [r1, #10]
 508:	cmp	r1, #0
 50c:	beq	528 <print_object+0x380>
 510:	ldr	r1, [r4, r1]
 514:	movw	r0, #0
 518:	movt	r0, #0
 51c:	bl	0 <printf>
 520:	ldr	r0, [r4]
 524:	rsb	r0, r0, #0
 528:	mov	r1, r4
 52c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
 530:	cmp	r0, #14
 534:	bcc	554 <print_object+0x3ac>
 538:	ldrh	r0, [r1, #12]
 53c:	cmp	r0, #0
 540:	beq	554 <print_object+0x3ac>
 544:	ldr	r1, [r4, r0]
 548:	movw	r0, #0
 54c:	movt	r0, #0
 550:	bl	0 <printf>
 554:	mov	r0, #125	; 0x7d
 558:	sub	sp, fp, #28
 55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 560:	b	0 <putchar>
 564:	movw	r0, #0
 568:	movw	r1, #0
 56c:	movw	r3, #0
 570:	mov	r2, #195	; 0xc3
 574:	movt	r0, #0
 578:	movt	r1, #0
 57c:	movt	r3, #0
 580:	bl	0 <__assert_fail>
 584:	movw	r0, #0
 588:	movw	r1, #0
 58c:	movw	r3, #0
 590:	mov	r2, #201	; 0xc9
 594:	movt	r0, #0
 598:	movt	r1, #0
 59c:	movt	r3, #0
 5a0:	bl	0 <__assert_fail>
 5a4:	movw	r0, #0
 5a8:	movw	r1, #0
 5ac:	movw	r3, #0
 5b0:	mov	r2, #192	; 0xc0
 5b4:	movt	r0, #0
 5b8:	movt	r1, #0
 5bc:	movt	r3, #0
 5c0:	bl	0 <__assert_fail>
 5c4:	movw	r0, #0
 5c8:	movt	r0, #0
 5cc:	b	5d8 <print_object+0x430>
 5d0:	movw	r0, #0
 5d4:	movt	r0, #0
 5d8:	movw	r1, #0
 5dc:	movw	r3, #0
 5e0:	mov	r2, #224	; 0xe0
 5e4:	movt	r1, #0
 5e8:	movt	r3, #0
 5ec:	bl	0 <__assert_fail>
 5f0:	movw	r0, #0
 5f4:	movw	r1, #0
 5f8:	movw	r3, #0
 5fc:	mov	r2, #218	; 0xda
 600:	movt	r0, #0
 604:	movt	r1, #0
 608:	movt	r3, #0
 60c:	bl	0 <__assert_fail>

00000610 <print_enum>:
 610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 614:	add	fp, sp, #28
 618:	sub	sp, sp, #4
 61c:	cmp	r0, #0
 620:	beq	904 <print_enum+0x2f4>
 624:	ldr	r1, [r0]
 628:	mov	r4, r0
 62c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 630:	cmp	r1, #6
 634:	bcc	8b8 <print_enum+0x2a8>
 638:	ldrh	r0, [r0, #4]
 63c:	cmp	r0, #0
 640:	beq	8b8 <print_enum+0x2a8>
 644:	mov	r1, r4
 648:	ldr	r0, [r1, r0]!
 64c:	add	r0, r1, r0
 650:	add	r1, r0, #4
 654:	movw	r0, #0
 658:	movt	r0, #0
 65c:	bl	0 <printf>
 660:	ldr	r1, [r4]
 664:	mov	r0, r4
 668:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 66c:	cmp	r1, #8
 670:	bcc	8c4 <print_enum+0x2b4>
 674:	ldrh	r5, [r0, #6]
 678:	cmp	r5, #0
 67c:	beq	8c4 <print_enum+0x2b4>
 680:	movw	r0, #0
 684:	str	r4, [sp]
 688:	ldr	r7, [r4, r5]!
 68c:	movt	r0, #0
 690:	bl	0 <printf>
 694:	ldr	r0, [r4, r7]
 698:	cmp	r0, #0
 69c:	beq	7fc <print_enum+0x1ec>
 6a0:	ldr	r1, [sp]
 6a4:	add	r0, r7, r5
 6a8:	movw	r5, #0
 6ac:	mov	r8, #0
 6b0:	movt	r5, #0
 6b4:	add	r0, r0, r1
 6b8:	add	r6, r0, #12
 6bc:	b	6e0 <print_enum+0xd0>
 6c0:	bl	1a8 <print_object>
 6c4:	mov	r0, #125	; 0x7d
 6c8:	bl	0 <putchar>
 6cc:	ldr	r0, [r4, r7]
 6d0:	add	r8, r8, #1
 6d4:	add	r6, r6, #4
 6d8:	cmp	r8, r0
 6dc:	bcs	7fc <print_enum+0x1ec>
 6e0:	ldr	r9, [r6, #-8]
 6e4:	cmp	r8, #0
 6e8:	beq	6f4 <print_enum+0xe4>
 6ec:	mov	r0, #44	; 0x2c
 6f0:	bl	0 <putchar>
 6f4:	add	sl, r6, r9
 6f8:	ldr	r0, [sl, #-8]
 6fc:	sub	r0, r9, r0
 700:	add	r0, r6, r0
 704:	ldrh	r1, [r0, #-8]
 708:	cmp	r1, #6
 70c:	bcc	898 <print_enum+0x288>
 710:	ldrh	r0, [r0, #-4]
 714:	cmp	r0, #0
 718:	beq	898 <print_enum+0x288>
 71c:	add	r1, r9, r0
 720:	add	r1, r6, r1
 724:	ldr	r1, [r1, #-8]
 728:	add	r1, r1, r9
 72c:	add	r0, r1, r0
 730:	add	r0, r6, r0
 734:	sub	r1, r0, #4
 738:	mov	r0, r5
 73c:	bl	0 <printf>
 740:	ldr	r0, [sl, #-8]
 744:	sub	r1, r9, r0
 748:	rsb	r0, r0, #0
 74c:	add	r1, r6, r1
 750:	ldrh	r2, [r1, #-8]
 754:	cmp	r2, #8
 758:	bcc	788 <print_enum+0x178>
 75c:	ldrh	r1, [r1, #-2]
 760:	cmp	r1, #0
 764:	beq	788 <print_enum+0x178>
 768:	add	r0, r9, r1
 76c:	add	r0, r6, r0
 770:	ldrd	r2, [r0, #-8]
 774:	movw	r0, #0
 778:	movt	r0, #0
 77c:	bl	0 <printf>
 780:	ldr	r0, [sl, #-8]
 784:	rsb	r0, r0, #0
 788:	add	r0, r0, r9
 78c:	add	r0, r6, r0
 790:	ldrh	r1, [r0, #-8]
 794:	cmp	r1, #10
 798:	bcc	6c4 <print_enum+0xb4>
 79c:	ldrh	r0, [r0]
 7a0:	cmp	r0, #0
 7a4:	beq	6c4 <print_enum+0xb4>
 7a8:	movw	r0, #0
 7ac:	movt	r0, #0
 7b0:	bl	0 <printf>
 7b4:	ldr	r0, [sl, #-8]
 7b8:	sub	r0, r9, r0
 7bc:	add	r1, r6, r0
 7c0:	mov	r0, #0
 7c4:	ldrh	r2, [r1, #-8]
 7c8:	cmp	r2, #10
 7cc:	bcc	6c0 <print_enum+0xb0>
 7d0:	ldrh	r1, [r1]
 7d4:	cmp	r1, #0
 7d8:	beq	6c0 <print_enum+0xb0>
 7dc:	add	r0, r9, r1
 7e0:	add	r0, r6, r0
 7e4:	ldr	r0, [r0, #-8]
 7e8:	add	r0, r0, r9
 7ec:	add	r0, r0, r1
 7f0:	add	r0, r6, r0
 7f4:	sub	r0, r0, #8
 7f8:	b	6c0 <print_enum+0xb0>
 7fc:	mov	r0, #93	; 0x5d
 800:	bl	0 <putchar>
 804:	ldr	r4, [sp]
 808:	ldr	r1, [r4]
 80c:	mov	r0, r4
 810:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 814:	cmp	r1, #10
 818:	bcc	850 <print_enum+0x240>
 81c:	ldrh	r0, [r0, #8]
 820:	cmp	r0, #0
 824:	beq	850 <print_enum+0x240>
 828:	ldrb	r0, [r4, r0]
 82c:	movw	r2, #0
 830:	movw	r1, #0
 834:	movt	r2, #0
 838:	movt	r1, #0
 83c:	cmp	r0, #0
 840:	movw	r0, #0
 844:	movt	r0, #0
 848:	moveq	r1, r2
 84c:	bl	0 <printf>
 850:	movw	r0, #0
 854:	movt	r0, #0
 858:	bl	0 <printf>
 85c:	ldr	r1, [r4]
 860:	mov	r0, r4
 864:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 868:	cmp	r1, #12
 86c:	bcc	8e4 <print_enum+0x2d4>
 870:	ldrh	r0, [r0, #10]
 874:	cmp	r0, #0
 878:	beq	8e4 <print_enum+0x2d4>
 87c:	ldr	r0, [r4, r0]!
 880:	add	r0, r4, r0
 884:	bl	0 <print_type>
 888:	mov	r0, #125	; 0x7d
 88c:	sub	sp, fp, #28
 890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 894:	b	0 <putchar>
 898:	movw	r0, #0
 89c:	movw	r1, #0
 8a0:	movw	r3, #0
 8a4:	mov	r2, #159	; 0x9f
 8a8:	movt	r0, #0
 8ac:	movt	r1, #0
 8b0:	movt	r3, #0
 8b4:	bl	0 <__assert_fail>
 8b8:	movw	r0, #0
 8bc:	movt	r0, #0
 8c0:	b	90c <print_enum+0x2fc>
 8c4:	movw	r0, #0
 8c8:	movw	r1, #0
 8cc:	movw	r3, #0
 8d0:	mov	r2, #183	; 0xb7
 8d4:	movt	r0, #0
 8d8:	movt	r1, #0
 8dc:	movt	r3, #0
 8e0:	bl	0 <__assert_fail>
 8e4:	movw	r0, #0
 8e8:	movw	r1, #0
 8ec:	movw	r3, #0
 8f0:	mov	r2, #185	; 0xb9
 8f4:	movt	r0, #0
 8f8:	movt	r1, #0
 8fc:	movt	r3, #0
 900:	bl	0 <__assert_fail>
 904:	movw	r0, #0
 908:	movt	r0, #0
 90c:	movw	r1, #0
 910:	movw	r3, #0
 914:	mov	r2, #177	; 0xb1
 918:	movt	r1, #0
 91c:	movt	r3, #0
 920:	bl	0 <__assert_fail>

00000924 <print_schema>:
 924:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 928:	add	fp, sp, #24
 92c:	cmp	r0, #0
 930:	beq	bcc <print_schema+0x2a8>
 934:	ldr	r1, [r0]
 938:	mov	r8, r0
 93c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 940:	cmp	r1, #6
 944:	bcc	ba0 <print_schema+0x27c>
 948:	ldrh	r4, [r0, #4]
 94c:	cmp	r4, #0
 950:	beq	ba0 <print_schema+0x27c>
 954:	mov	r5, r8
 958:	mov	r0, #123	; 0x7b
 95c:	ldr	r9, [r5, r4]!
 960:	bl	0 <putchar>
 964:	movw	r0, #0
 968:	movt	r0, #0
 96c:	bl	0 <printf>
 970:	ldr	r0, [r5, r9]
 974:	cmp	r0, #0
 978:	beq	9d0 <print_schema+0xac>
 97c:	add	r1, r9, r4
 980:	mov	r4, #0
 984:	mov	r6, #0
 988:	add	r1, r1, r8
 98c:	add	r7, r1, #4
 990:	cmp	r6, #0
 994:	beq	9a4 <print_schema+0x80>
 998:	mov	r0, #44	; 0x2c
 99c:	bl	0 <putchar>
 9a0:	ldr	r0, [r5, r9]
 9a4:	cmp	r0, r6
 9a8:	bls	b60 <print_schema+0x23c>
 9ac:	ldr	r0, [r7, r6, lsl #2]
 9b0:	add	r0, r4, r0
 9b4:	add	r0, r7, r0
 9b8:	bl	1a8 <print_object>
 9bc:	ldr	r0, [r5, r9]
 9c0:	add	r6, r6, #1
 9c4:	add	r4, r4, #4
 9c8:	cmp	r6, r0
 9cc:	bcc	990 <print_schema+0x6c>
 9d0:	mov	r0, #93	; 0x5d
 9d4:	bl	0 <putchar>
 9d8:	ldr	r1, [r8]
 9dc:	mov	r0, r8
 9e0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
 9e4:	cmp	r1, #8
 9e8:	bcc	bac <print_schema+0x288>
 9ec:	ldrh	r4, [r0, #6]
 9f0:	cmp	r4, #0
 9f4:	beq	bac <print_schema+0x288>
 9f8:	mov	r5, r8
 9fc:	movw	r0, #0
 a00:	ldr	r9, [r5, r4]!
 a04:	movt	r0, #0
 a08:	bl	0 <printf>
 a0c:	ldr	r0, [r5, r9]
 a10:	cmp	r0, #0
 a14:	beq	a6c <print_schema+0x148>
 a18:	add	r1, r9, r4
 a1c:	mov	r4, #0
 a20:	mov	r6, #0
 a24:	add	r1, r1, r8
 a28:	add	r7, r1, #4
 a2c:	cmp	r6, #0
 a30:	beq	a40 <print_schema+0x11c>
 a34:	mov	r0, #44	; 0x2c
 a38:	bl	0 <putchar>
 a3c:	ldr	r0, [r5, r9]
 a40:	cmp	r0, r6
 a44:	bls	b80 <print_schema+0x25c>
 a48:	ldr	r0, [r7, r6, lsl #2]
 a4c:	add	r0, r4, r0
 a50:	add	r0, r7, r0
 a54:	bl	610 <print_enum>
 a58:	ldr	r0, [r5, r9]
 a5c:	add	r6, r6, #1
 a60:	add	r4, r4, #4
 a64:	cmp	r6, r0
 a68:	bcc	a2c <print_schema+0x108>
 a6c:	mov	r0, #93	; 0x5d
 a70:	bl	0 <putchar>
 a74:	ldr	r0, [r8]
 a78:	mov	r1, r8
 a7c:	ldrh	r2, [r1, -r0]!
 a80:	rsb	r0, r0, #0
 a84:	cmp	r2, #10
 a88:	bcc	abc <print_schema+0x198>
 a8c:	ldrh	r1, [r1, #8]
 a90:	cmp	r1, #0
 a94:	beq	abc <print_schema+0x198>
 a98:	mov	r0, r8
 a9c:	ldr	r1, [r0, r1]!
 aa0:	add	r0, r0, r1
 aa4:	add	r1, r0, #4
 aa8:	movw	r0, #0
 aac:	movt	r0, #0
 ab0:	bl	0 <printf>
 ab4:	ldr	r0, [r8]
 ab8:	rsb	r0, r0, #0
 abc:	mov	r1, r8
 ac0:	ldrh	r2, [r1, r0]!
 ac4:	cmp	r2, #12
 ac8:	bcc	afc <print_schema+0x1d8>
 acc:	ldrh	r1, [r1, #10]
 ad0:	cmp	r1, #0
 ad4:	beq	afc <print_schema+0x1d8>
 ad8:	mov	r0, r8
 adc:	ldr	r1, [r0, r1]!
 ae0:	add	r0, r0, r1
 ae4:	add	r1, r0, #4
 ae8:	movw	r0, #0
 aec:	movt	r0, #0
 af0:	bl	0 <printf>
 af4:	ldr	r0, [r8]
 af8:	rsb	r0, r0, #0
 afc:	mov	r1, r8
 b00:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
 b04:	cmp	r0, #14
 b08:	bcc	b50 <print_schema+0x22c>
 b0c:	ldrh	r0, [r1, #12]
 b10:	cmp	r0, #0
 b14:	beq	b50 <print_schema+0x22c>
 b18:	movw	r0, #0
 b1c:	movt	r0, #0
 b20:	bl	0 <printf>
 b24:	ldr	r0, [r8]
 b28:	mov	r1, r8
 b2c:	ldrh	r2, [r1, -r0]!
 b30:	mov	r0, #0
 b34:	cmp	r2, #14
 b38:	bcc	b4c <print_schema+0x228>
 b3c:	ldrh	r1, [r1, #12]
 b40:	cmp	r1, #0
 b44:	ldrne	r0, [r8, r1]!
 b48:	addne	r0, r8, r0
 b4c:	bl	1a8 <print_object>
 b50:	movw	r0, #0
 b54:	movt	r0, #0
 b58:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
 b5c:	b	0 <puts>
 b60:	movw	r0, #0
 b64:	movw	r1, #0
 b68:	movw	r3, #0
 b6c:	mov	r2, #215	; 0xd7
 b70:	movt	r0, #0
 b74:	movt	r1, #0
 b78:	movt	r3, #0
 b7c:	bl	0 <__assert_fail>
 b80:	movw	r0, #0
 b84:	movw	r1, #0
 b88:	movw	r3, #0
 b8c:	mov	r2, #174	; 0xae
 b90:	movt	r0, #0
 b94:	movt	r1, #0
 b98:	movt	r3, #0
 b9c:	bl	0 <__assert_fail>
 ba0:	movw	r0, #0
 ba4:	movt	r0, #0
 ba8:	b	bd4 <print_schema+0x2b0>
 bac:	movw	r0, #0
 bb0:	movw	r1, #0
 bb4:	movw	r3, #0
 bb8:	mov	r2, #238	; 0xee
 bbc:	movt	r0, #0
 bc0:	movt	r1, #0
 bc4:	movt	r3, #0
 bc8:	bl	0 <__assert_fail>
 bcc:	movw	r0, #0
 bd0:	movt	r0, #0
 bd4:	movw	r1, #0
 bd8:	movw	r3, #0
 bdc:	mov	r2, #237	; 0xed
 be0:	movt	r1, #0
 be4:	movt	r3, #0
 be8:	bl	0 <__assert_fail>

00000bec <load_and_dump_schema>:
 bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 bf0:	add	fp, sp, #24
 bf4:	movw	r1, #0
 bf8:	mov	r8, r0
 bfc:	movt	r1, #0
 c00:	bl	0 <fopen>
 c04:	cmp	r0, #0
 c08:	beq	ce4 <load_and_dump_schema+0xf8>
 c0c:	mov	r1, #0
 c10:	mov	r2, #2
 c14:	mov	r6, r0
 c18:	bl	0 <fseek>
 c1c:	mov	r0, r6
 c20:	bl	0 <ftell>
 c24:	mov	r7, r0
 c28:	movw	r0, #10000	; 0x2710
 c2c:	cmp	r7, r0
 c30:	bhi	cd0 <load_and_dump_schema+0xe4>
 c34:	mov	r0, r6
 c38:	bl	0 <rewind>
 c3c:	cmp	r7, #0
 c40:	mov	r0, r7
 c44:	movweq	r0, #1
 c48:	bl	0 <malloc>
 c4c:	cmp	r0, #0
 c50:	beq	cd0 <load_and_dump_schema+0xe4>
 c54:	mov	r4, r0
 c58:	mov	r1, #0
 c5c:	mov	r5, r1
 c60:	add	r0, r4, r1
 c64:	sub	r2, r7, r1
 c68:	mov	r1, #1
 c6c:	mov	r3, r6
 c70:	bl	0 <fread_unlocked>
 c74:	add	r1, r0, r5
 c78:	cmp	r0, #0
 c7c:	bne	c5c <load_and_dump_schema+0x70>
 c80:	mov	r0, r6
 c84:	bl	0 <fclose>
 c88:	cmp	r7, r5
 c8c:	bne	cdc <load_and_dump_schema+0xf0>
 c90:	cmp	r7, #11
 c94:	bls	d0c <load_and_dump_schema+0x120>
 c98:	mov	r5, r4
 c9c:	movw	r0, #17986	; 0x4642
 ca0:	ldr	r6, [r5, #4]!
 ca4:	movt	r0, #21314	; 0x5342
 ca8:	cmp	r6, r0
 cac:	bne	d2c <load_and_dump_schema+0x140>
 cb0:	ldr	r0, [r4]
 cb4:	add	r0, r4, r0
 cb8:	bl	924 <print_schema>
 cbc:	mov	r5, #0
 cc0:	mov	r0, r4
 cc4:	bl	0 <free>
 cc8:	mov	r0, r5
 ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 cd0:	mov	r0, r6
 cd4:	bl	0 <fclose>
 cd8:	b	ce4 <load_and_dump_schema+0xf8>
 cdc:	mov	r0, r4
 ce0:	bl	0 <free>
 ce4:	movw	r0, #0
 ce8:	movw	r1, #0
 cec:	mov	r2, r8
 cf0:	movt	r0, #0
 cf4:	movt	r1, #0
 cf8:	ldr	r0, [r0]
 cfc:	bl	0 <fprintf>
 d00:	mvn	r5, #0
 d04:	mov	r0, r5
 d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 d0c:	movw	r0, #0
 d10:	movw	r1, #0
 d14:	mov	r2, r8
 d18:	movt	r0, #0
 d1c:	movt	r1, #0
 d20:	ldr	r0, [r0]
 d24:	bl	0 <fprintf>
 d28:	b	d80 <load_and_dump_schema+0x194>
 d2c:	ldr	r1, [r4, #8]
 d30:	cmp	r1, r0
 d34:	bne	d60 <load_and_dump_schema+0x174>
 d38:	movw	r0, #0
 d3c:	mov	r1, #40	; 0x28
 d40:	mov	r2, #1
 d44:	movt	r0, #0
 d48:	ldr	r3, [r0]
 d4c:	movw	r0, #0
 d50:	movt	r0, #0
 d54:	bl	0 <fwrite>
 d58:	add	r0, r5, r6
 d5c:	b	cb8 <load_and_dump_schema+0xcc>
 d60:	movw	r0, #0
 d64:	mov	r1, #27
 d68:	mov	r2, #1
 d6c:	movt	r0, #0
 d70:	ldr	r3, [r0]
 d74:	movw	r0, #0
 d78:	movt	r0, #0
 d7c:	bl	0 <fwrite>
 d80:	mvn	r5, #0
 d84:	b	cc0 <load_and_dump_schema+0xd4>

00000d88 <main>:
 d88:	push	{r4, sl, fp, lr}
 d8c:	add	fp, sp, #8
 d90:	cmp	r0, #2
 d94:	bne	da4 <main+0x1c>
 d98:	ldr	r0, [r1, #4]
 d9c:	pop	{r4, sl, fp, lr}
 da0:	b	bec <load_and_dump_schema>
 da4:	movw	r4, #0
 da8:	movw	r0, #0
 dac:	mov	r1, #28
 db0:	mov	r2, #1
 db4:	movt	r4, #0
 db8:	movt	r0, #0
 dbc:	ldr	r3, [r4]
 dc0:	bl	0 <fwrite>
 dc4:	ldr	r3, [r4]
 dc8:	movw	r0, #0
 dcc:	mov	r1, #74	; 0x4a
 dd0:	mov	r2, #1
 dd4:	movt	r0, #0
 dd8:	bl	0 <fwrite>
 ddc:	ldr	r3, [r4]
 de0:	movw	r0, #0
 de4:	mov	r1, #180	; 0xb4
 de8:	mov	r2, #1
 dec:	movt	r0, #0
 df0:	bl	0 <fwrite>
 df4:	mvn	r0, #0
 df8:	bl	0 <exit>
