
../compcert-repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105f0 <.init>:
   105f0:	push	{r3, lr}
   105f4:	bl	107cc <_start@@Base+0x3c>
   105f8:	pop	{r3, pc}

Disassembly of section .plt:

000105fc <printf@plt-0x14>:
   105fc:	push	{lr}		; (str lr, [sp, #-4]!)
   10600:	ldr	lr, [pc, #4]	; 1060c <printf@plt-0x4>
   10604:	add	lr, pc, lr
   10608:	ldr	pc, [lr, #8]!
   1060c:	strdeq	r0, [r1], -r4

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2540]!	; 0x9ec

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2532]!	; 0x9e4

00010634 <putchar@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2524]!	; 0x9dc

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010658 <main@@Base>:
   10658:	push	{r4, r5, r6, r7, r8, lr}
   1065c:	sub	sp, sp, #40	; 0x28
   10660:	ldr	r8, [pc, #268]	; 10774 <main@@Base+0x11c>
   10664:	ldr	r7, [pc, #268]	; 10778 <main@@Base+0x120>
   10668:	mov	r6, sp
   1066c:	mov	r5, sp
   10670:	mov	r4, #0
   10674:	add	r4, r4, #1
   10678:	mov	r1, r4
   1067c:	mov	r0, r8
   10680:	bl	10610 <printf@plt>
   10684:	mov	r1, r5
   10688:	mov	r0, r7
   1068c:	bl	10640 <__isoc99_scanf@plt>
   10690:	cmp	r4, #10
   10694:	add	r5, r5, #4
   10698:	bne	10674 <main@@Base+0x1c>
   1069c:	vldr	s15, [pc, #200]	; 1076c <main@@Base+0x114>
   106a0:	add	r3, sp, #40	; 0x28
   106a4:	mov	r5, r6
   106a8:	vldmia	r5!, {s14}
   106ac:	cmp	r5, r3
   106b0:	vadd.f32	s15, s15, s14
   106b4:	bne	106a8 <main@@Base+0x50>
   106b8:	vldr	s13, [pc, #176]	; 10770 <main@@Base+0x118>
   106bc:	ldr	r0, [pc, #184]	; 1077c <main@@Base+0x124>
   106c0:	add	r7, sp, #4
   106c4:	mov	r4, r7
   106c8:	vdiv.f32	s14, s15, s13
   106cc:	vcvt.f64.f32	d7, s14
   106d0:	vmov	r2, r3, d7
   106d4:	bl	10610 <printf@plt>
   106d8:	vldr	s15, [sp]
   106dc:	vldmia	r4!, {s14}
   106e0:	vcmp.f32	s14, s15
   106e4:	vmrs	APSR_nzcv, fpscr
   106e8:	vmovgt.f32	s15, s14
   106ec:	cmp	r5, r4
   106f0:	bne	106dc <main@@Base+0x84>
   106f4:	vcvt.f64.f32	d7, s15
   106f8:	ldr	r0, [pc, #128]	; 10780 <main@@Base+0x128>
   106fc:	vmov	r2, r3, d7
   10700:	bl	10610 <printf@plt>
   10704:	vldr	s15, [sp]
   10708:	vldmia	r7!, {s14}
   1070c:	vcmp.f32	s14, s15
   10710:	vmrs	APSR_nzcv, fpscr
   10714:	vmovmi.f32	s15, s14
   10718:	cmp	r4, r7
   1071c:	bne	10708 <main@@Base+0xb0>
   10720:	vcvt.f64.f32	d7, s15
   10724:	ldr	r0, [pc, #88]	; 10784 <main@@Base+0x12c>
   10728:	ldr	r5, [pc, #88]	; 10788 <main@@Base+0x130>
   1072c:	vmov	r2, r3, d7
   10730:	bl	10610 <printf@plt>
   10734:	ldr	r0, [pc, #80]	; 1078c <main@@Base+0x134>
   10738:	bl	10610 <printf@plt>
   1073c:	vldmia	r6!, {s15}
   10740:	mov	r0, r5
   10744:	vcvt.f64.f32	d7, s15
   10748:	vmov	r2, r3, d7
   1074c:	bl	10610 <printf@plt>
   10750:	cmp	r6, r4
   10754:	bne	1073c <main@@Base+0xe4>
   10758:	mov	r0, #10
   1075c:	bl	10634 <putchar@plt>
   10760:	mov	r0, #0
   10764:	add	sp, sp, #40	; 0x28
   10768:	pop	{r4, r5, r6, r7, r8, pc}
   1076c:	andeq	r0, r0, r0
   10770:			; <UNDEFINED> instruction: 0x41200000
   10774:	muleq	r1, ip, r9
   10778:			; <UNDEFINED> instruction: 0x000109b4
   1077c:			; <UNDEFINED> instruction: 0x000109b8
   10780:	andeq	r0, r1, r8, asr #19
   10784:	ldrdeq	r0, [r1], -r8
   10788:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1078c:	andeq	r0, r1, r8, ror #19

00010790 <_start@@Base>:
   10790:	mov	fp, #0
   10794:	mov	lr, #0
   10798:	pop	{r1}		; (ldr r1, [sp], #4)
   1079c:	mov	r2, sp
   107a0:	push	{r2}		; (str r2, [sp, #-4]!)
   107a4:	push	{r0}		; (str r0, [sp, #-4]!)
   107a8:	ldr	ip, [pc, #16]	; 107c0 <_start@@Base+0x30>
   107ac:	push	{ip}		; (str ip, [sp, #-4]!)
   107b0:	ldr	r0, [pc, #12]	; 107c4 <_start@@Base+0x34>
   107b4:	ldr	r3, [pc, #12]	; 107c8 <_start@@Base+0x38>
   107b8:	bl	1061c <__libc_start_main@plt>
   107bc:	bl	1064c <abort@plt>
   107c0:	andeq	r0, r1, ip, lsl #19
   107c4:	andeq	r0, r1, r8, asr r6
   107c8:	andeq	r0, r1, ip, lsr #18
   107cc:	ldr	r3, [pc, #20]	; 107e8 <_start@@Base+0x58>
   107d0:	ldr	r2, [pc, #20]	; 107ec <_start@@Base+0x5c>
   107d4:	add	r3, pc, r3
   107d8:	ldr	r2, [r3, r2]
   107dc:	cmp	r2, #0
   107e0:	bxeq	lr
   107e4:	b	10628 <__gmon_start__@plt>
   107e8:	andeq	r0, r1, r4, lsr #16
   107ec:	andeq	r0, r0, r4, lsr #32
   107f0:	ldr	r3, [pc, #28]	; 10814 <_start@@Base+0x84>
   107f4:	ldr	r0, [pc, #28]	; 10818 <_start@@Base+0x88>
   107f8:	sub	r3, r3, r0
   107fc:	cmp	r3, #6
   10800:	bxls	lr
   10804:	ldr	r3, [pc, #16]	; 1081c <_start@@Base+0x8c>
   10808:	cmp	r3, #0
   1080c:	bxeq	lr
   10810:	bx	r3
   10814:	andeq	r1, r2, r3, lsr r0
   10818:	andeq	r1, r2, r0, lsr r0
   1081c:	andeq	r0, r0, r0
   10820:	ldr	r1, [pc, #36]	; 1084c <_start@@Base+0xbc>
   10824:	ldr	r0, [pc, #36]	; 10850 <_start@@Base+0xc0>
   10828:	sub	r1, r1, r0
   1082c:	asr	r1, r1, #2
   10830:	add	r1, r1, r1, lsr #31
   10834:	asrs	r1, r1, #1
   10838:	bxeq	lr
   1083c:	ldr	r3, [pc, #16]	; 10854 <_start@@Base+0xc4>
   10840:	cmp	r3, #0
   10844:	bxeq	lr
   10848:	bx	r3
   1084c:	andeq	r1, r2, r0, lsr r0
   10850:	andeq	r1, r2, r0, lsr r0
   10854:	andeq	r0, r0, r0
   10858:	push	{r4, lr}
   1085c:	ldr	r4, [pc, #24]	; 1087c <_start@@Base+0xec>
   10860:	ldrb	r3, [r4]
   10864:	cmp	r3, #0
   10868:	popne	{r4, pc}
   1086c:	bl	107f0 <_start@@Base+0x60>
   10870:	mov	r3, #1
   10874:	strb	r3, [r4]
   10878:	pop	{r4, pc}
   1087c:	andeq	r1, r2, r0, lsr r0
   10880:	ldr	r0, [pc, #40]	; 108b0 <_start@@Base+0x120>
   10884:	ldr	r3, [r0]
   10888:	cmp	r3, #0
   1088c:	bne	10894 <_start@@Base+0x104>
   10890:	b	10820 <_start@@Base+0x90>
   10894:	ldr	r3, [pc, #24]	; 108b4 <_start@@Base+0x124>
   10898:	cmp	r3, #0
   1089c:	beq	10890 <_start@@Base+0x100>
   108a0:	push	{r4, lr}
   108a4:	blx	r3
   108a8:	pop	{r4, lr}
   108ac:	b	10820 <_start@@Base+0x90>
   108b0:	andeq	r0, r2, r4, lsl pc
   108b4:	andeq	r0, r0, r0

000108b8 <avg@@Base>:
   108b8:	vldr	s15, [pc, #28]	; 108dc <avg@@Base+0x24>
   108bc:	add	r3, r0, #40	; 0x28
   108c0:	vldmia	r0!, {s14}
   108c4:	cmp	r0, r3
   108c8:	vadd.f32	s15, s15, s14
   108cc:	bne	108c0 <avg@@Base+0x8>
   108d0:	vldr	s0, [pc, #8]	; 108e0 <avg@@Base+0x28>
   108d4:	vdiv.f32	s0, s15, s0
   108d8:	bx	lr
   108dc:	andeq	r0, r0, r0
   108e0:			; <UNDEFINED> instruction: 0x41200000

000108e4 <max@@Base>:
   108e4:	add	r3, r0, #40	; 0x28
   108e8:	vldmia	r0!, {s0}
   108ec:	vldmia	r0!, {s15}
   108f0:	vcmp.f32	s15, s0
   108f4:	vmrs	APSR_nzcv, fpscr
   108f8:	vmovgt.f32	s0, s15
   108fc:	cmp	r0, r3
   10900:	bne	108ec <max@@Base+0x8>
   10904:	bx	lr

00010908 <min@@Base>:
   10908:	add	r3, r0, #40	; 0x28
   1090c:	vldmia	r0!, {s0}
   10910:	vldmia	r0!, {s15}
   10914:	vcmp.f32	s15, s0
   10918:	vmrs	APSR_nzcv, fpscr
   1091c:	vmovmi.f32	s0, s15
   10920:	cmp	r0, r3
   10924:	bne	10910 <min@@Base+0x8>
   10928:	bx	lr

0001092c <__libc_csu_init@@Base>:
   1092c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10930:	mov	r7, r0
   10934:	ldr	r6, [pc, #72]	; 10984 <__libc_csu_init@@Base+0x58>
   10938:	ldr	r5, [pc, #72]	; 10988 <__libc_csu_init@@Base+0x5c>
   1093c:	add	r6, pc, r6
   10940:	add	r5, pc, r5
   10944:	sub	r6, r6, r5
   10948:	mov	r8, r1
   1094c:	mov	r9, r2
   10950:	bl	105f0 <printf@plt-0x20>
   10954:	asrs	r6, r6, #2
   10958:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1095c:	mov	r4, #0
   10960:	add	r4, r4, #1
   10964:	ldr	r3, [r5], #4
   10968:	mov	r2, r9
   1096c:	mov	r1, r8
   10970:	mov	r0, r7
   10974:	blx	r3
   10978:	cmp	r6, r4
   1097c:	bne	10960 <__libc_csu_init@@Base+0x34>
   10980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10984:	andeq	r0, r1, ip, asr #11
   10988:	andeq	r0, r1, r4, asr #11

0001098c <__libc_csu_fini@@Base>:
   1098c:	bx	lr

Disassembly of section .fini:

00010990 <.fini>:
   10990:	push	{r3, lr}
   10994:	pop	{r3, pc}
