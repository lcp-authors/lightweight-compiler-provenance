
../compcert-repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010660 <.init>:
   10660:	push	{r3, lr}
   10664:	bl	107fc <_start@@Base+0x3c>
   10668:	pop	{r3, pc}

Disassembly of section .plt:

0001066c <strcmp@plt-0x14>:
   1066c:	push	{lr}		; (str lr, [sp, #-4]!)
   10670:	ldr	lr, [pc, #4]	; 1067c <strcmp@plt-0x4>
   10674:	add	lr, pc, lr
   10678:	ldr	pc, [lr, #8]!
   1067c:	andeq	r0, r1, r4, lsl #19

00010680 <strcmp@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2436]!	; 0x984

0001068c <strcat@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2428]!	; 0x97c

00010698 <strcpy@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2420]!	; 0x974

000106a4 <puts@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2412]!	; 0x96c

000106b0 <__libc_start_main@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2404]!	; 0x964

000106bc <__gmon_start__@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2396]!	; 0x95c

000106c8 <strlen@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2388]!	; 0x954

000106d4 <__isoc99_scanf@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2380]!	; 0x94c

000106e0 <abort@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2372]!	; 0x944

Disassembly of section .text:

000106ec <main@@Base>:
   106ec:	mov	r3, #0
   106f0:	strd	r4, [sp, #-16]!
   106f4:	movw	r5, #2636	; 0xa4c
   106f8:	movt	r5, #1
   106fc:	str	r6, [sp, #8]
   10700:	movw	r6, #2640	; 0xa50
   10704:	movt	r6, #1
   10708:	str	lr, [sp, #12]
   1070c:	sub	sp, sp, #104	; 0x68
   10710:	str	r3, [sp, #20]
   10714:	str	r3, [sp, #24]
   10718:	str	r3, [sp, #28]
   1071c:	str	r3, [sp, #32]
   10720:	str	r3, [sp, #36]	; 0x24
   10724:	str	r3, [sp, #40]	; 0x28
   10728:	strh	r3, [sp, #44]	; 0x2c
   1072c:	add	r1, sp, #8
   10730:	mov	r0, r5
   10734:	bl	106d4 <__isoc99_scanf@plt>
   10738:	ldrb	r3, [sp, #8]
   1073c:	cmp	r3, #46	; 0x2e
   10740:	beq	107a8 <main@@Base+0xbc>
   10744:	add	r1, sp, #4
   10748:	mov	r0, r6
   1074c:	bl	106d4 <__isoc99_scanf@plt>
   10750:	add	r1, sp, #20
   10754:	add	r0, sp, #8
   10758:	ldr	r2, [sp, #4]
   1075c:	bl	1098c <StringSet@@Base>
   10760:	add	r0, sp, #20
   10764:	add	r1, sp, #48	; 0x30
   10768:	bl	108b0 <R_ShiftString@@Base>
   1076c:	add	r1, sp, #48	; 0x30
   10770:	add	r0, sp, #20
   10774:	bl	10680 <strcmp@plt>
   10778:	mov	r4, r0
   1077c:	add	r0, sp, #20
   10780:	bl	106a4 <puts@plt>
   10784:	add	r1, sp, #20
   10788:	add	r0, sp, #76	; 0x4c
   1078c:	bl	10698 <strcpy@plt>
   10790:	add	r1, sp, #20
   10794:	add	r0, sp, #76	; 0x4c
   10798:	bl	1091c <L_ShiftString@@Base>
   1079c:	cmp	r4, #0
   107a0:	bne	1076c <main@@Base+0x80>
   107a4:	b	1072c <main@@Base+0x40>
   107a8:	mov	r0, #0
   107ac:	add	sp, sp, #104	; 0x68
   107b0:	ldrd	r4, [sp]
   107b4:	ldr	r6, [sp, #8]
   107b8:	add	sp, sp, #12
   107bc:	pop	{pc}		; (ldr pc, [sp], #4)

000107c0 <_start@@Base>:
   107c0:	mov	fp, #0
   107c4:	mov	lr, #0
   107c8:	pop	{r1}		; (ldr r1, [sp], #4)
   107cc:	mov	r2, sp
   107d0:	push	{r2}		; (str r2, [sp, #-4]!)
   107d4:	push	{r0}		; (str r0, [sp, #-4]!)
   107d8:	ldr	ip, [pc, #16]	; 107f0 <_start@@Base+0x30>
   107dc:	push	{ip}		; (str ip, [sp, #-4]!)
   107e0:	ldr	r0, [pc, #12]	; 107f4 <_start@@Base+0x34>
   107e4:	ldr	r3, [pc, #12]	; 107f8 <_start@@Base+0x38>
   107e8:	bl	106b0 <__libc_start_main@plt>
   107ec:	bl	106e0 <abort@plt>
   107f0:	andeq	r0, r1, ip, lsr sl
   107f4:	andeq	r0, r1, ip, ror #13
   107f8:	ldrdeq	r0, [r1], -ip
   107fc:	ldr	r3, [pc, #20]	; 10818 <_start@@Base+0x58>
   10800:	ldr	r2, [pc, #20]	; 1081c <_start@@Base+0x5c>
   10804:	add	r3, pc, r3
   10808:	ldr	r2, [r3, r2]
   1080c:	cmp	r2, #0
   10810:	bxeq	lr
   10814:	b	106bc <__gmon_start__@plt>
   10818:	strdeq	r0, [r1], -r4
   1081c:	andeq	r0, r0, r0, lsr r0
   10820:	ldr	r0, [pc, #24]	; 10840 <_start@@Base+0x80>
   10824:	ldr	r3, [pc, #24]	; 10844 <_start@@Base+0x84>
   10828:	cmp	r3, r0
   1082c:	bxeq	lr
   10830:	ldr	r3, [pc, #16]	; 10848 <_start@@Base+0x88>
   10834:	cmp	r3, #0
   10838:	bxeq	lr
   1083c:	bx	r3
   10840:	andeq	r1, r2, ip, lsr r0
   10844:	andeq	r1, r2, ip, lsr r0
   10848:	andeq	r0, r0, r0
   1084c:	ldr	r0, [pc, #36]	; 10878 <_start@@Base+0xb8>
   10850:	ldr	r1, [pc, #36]	; 1087c <_start@@Base+0xbc>
   10854:	sub	r1, r1, r0
   10858:	asr	r1, r1, #2
   1085c:	add	r1, r1, r1, lsr #31
   10860:	asrs	r1, r1, #1
   10864:	bxeq	lr
   10868:	ldr	r3, [pc, #16]	; 10880 <_start@@Base+0xc0>
   1086c:	cmp	r3, #0
   10870:	bxeq	lr
   10874:	bx	r3
   10878:	andeq	r1, r2, ip, lsr r0
   1087c:	andeq	r1, r2, ip, lsr r0
   10880:	andeq	r0, r0, r0
   10884:	push	{r4, lr}
   10888:	ldr	r4, [pc, #24]	; 108a8 <_start@@Base+0xe8>
   1088c:	ldrb	r3, [r4]
   10890:	cmp	r3, #0
   10894:	popne	{r4, pc}
   10898:	bl	10820 <_start@@Base+0x60>
   1089c:	mov	r3, #1
   108a0:	strb	r3, [r4]
   108a4:	pop	{r4, pc}
   108a8:	andeq	r1, r2, ip, lsr r0
   108ac:	b	1084c <_start@@Base+0x8c>

000108b0 <R_ShiftString@@Base>:
   108b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   108b4:	mov	r5, r1
   108b8:	strd	r6, [sp, #8]
   108bc:	mov	r6, r0
   108c0:	str	r8, [sp, #16]
   108c4:	sub	r4, r6, #1
   108c8:	rsb	r7, r6, #2
   108cc:	str	lr, [sp, #20]
   108d0:	bl	106c8 <strlen@plt>
   108d4:	add	r0, r6, r0
   108d8:	ldrb	r3, [r0, #-1]
   108dc:	strb	r3, [r5], #1
   108e0:	b	108ec <R_ShiftString@@Base+0x3c>
   108e4:	ldrb	r3, [r4, #1]!
   108e8:	strb	r3, [r5], #1
   108ec:	mov	r0, r6
   108f0:	bl	106c8 <strlen@plt>
   108f4:	add	r3, r7, r4
   108f8:	cmp	r0, r3
   108fc:	bhi	108e4 <R_ShiftString@@Base+0x34>
   10900:	mov	r3, #0
   10904:	strb	r3, [r5]
   10908:	ldrd	r4, [sp]
   1090c:	ldrd	r6, [sp, #8]
   10910:	ldr	r8, [sp, #16]
   10914:	add	sp, sp, #20
   10918:	pop	{pc}		; (ldr pc, [sp], #4)

0001091c <L_ShiftString@@Base>:
   1091c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10920:	mov	r4, #1
   10924:	strd	r6, [sp, #8]
   10928:	mov	r7, r0
   1092c:	str	r8, [sp, #16]
   10930:	mov	r8, r1
   10934:	mov	r6, r7
   10938:	str	lr, [sp, #20]
   1093c:	sub	r5, r8, #1
   10940:	bl	106c8 <strlen@plt>
   10944:	ldrb	r3, [r7]
   10948:	add	r0, r8, r0
   1094c:	strb	r3, [r0, #-1]
   10950:	b	10960 <L_ShiftString@@Base+0x44>
   10954:	ldrb	r3, [r6, #1]!
   10958:	add	r4, r4, #1
   1095c:	strb	r3, [r5, #1]!
   10960:	mov	r0, r7
   10964:	bl	106c8 <strlen@plt>
   10968:	cmp	r0, r4
   1096c:	bhi	10954 <L_ShiftString@@Base+0x38>
   10970:	mov	r3, #0
   10974:	strb	r3, [r8, r4]
   10978:	ldrd	r4, [sp]
   1097c:	ldrd	r6, [sp, #8]
   10980:	ldr	r8, [sp, #16]
   10984:	add	sp, sp, #20
   10988:	pop	{pc}		; (ldr pc, [sp], #4)

0001098c <StringSet@@Base>:
   1098c:	strd	r4, [sp, #-16]!
   10990:	mov	r4, #0
   10994:	subs	r5, r2, #0
   10998:	str	r6, [sp, #8]
   1099c:	str	lr, [sp, #12]
   109a0:	strb	r4, [r1]
   109a4:	ble	109cc <StringSet@@Base+0x40>
   109a8:	mov	r6, r0
   109ac:	mov	r3, r1
   109b0:	mov	r0, r3
   109b4:	add	r4, r4, #1
   109b8:	mov	r1, r6
   109bc:	bl	1068c <strcat@plt>
   109c0:	cmp	r5, r4
   109c4:	mov	r3, r0
   109c8:	bne	109b0 <StringSet@@Base+0x24>
   109cc:	ldrd	r4, [sp]
   109d0:	ldr	r6, [sp, #8]
   109d4:	add	sp, sp, #12
   109d8:	pop	{pc}		; (ldr pc, [sp], #4)

000109dc <__libc_csu_init@@Base>:
   109dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109e0:	mov	r7, r0
   109e4:	ldr	r6, [pc, #72]	; 10a34 <__libc_csu_init@@Base+0x58>
   109e8:	ldr	r5, [pc, #72]	; 10a38 <__libc_csu_init@@Base+0x5c>
   109ec:	add	r6, pc, r6
   109f0:	add	r5, pc, r5
   109f4:	sub	r6, r6, r5
   109f8:	mov	r8, r1
   109fc:	mov	r9, r2
   10a00:	bl	10660 <strcmp@plt-0x20>
   10a04:	asrs	r6, r6, #2
   10a08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a0c:	mov	r4, #0
   10a10:	add	r4, r4, #1
   10a14:	ldr	r3, [r5], #4
   10a18:	mov	r2, r9
   10a1c:	mov	r1, r8
   10a20:	mov	r0, r7
   10a24:	blx	r3
   10a28:	cmp	r6, r4
   10a2c:	bne	10a10 <__libc_csu_init@@Base+0x34>
   10a30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a34:	andeq	r0, r1, r0, lsr #10
   10a38:	andeq	r0, r1, r8, lsl r5

00010a3c <__libc_csu_fini@@Base>:
   10a3c:	bx	lr

Disassembly of section .fini:

00010a40 <.fini>:
   10a40:	push	{r3, lr}
   10a44:	pop	{r3, pc}
