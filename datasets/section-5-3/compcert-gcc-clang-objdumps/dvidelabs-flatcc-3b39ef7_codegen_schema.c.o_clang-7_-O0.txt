
../compcert-repos/dvidelabs-flatcc-3b39ef7/src/compiler/CMakeFiles/flatcc.dir/codegen_schema.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__flatcc_fb_codegen_bfbs_to_buffer>:
       0:	push	{r4, r5, fp, lr}
       4:	add	fp, sp, #8
       8:	sub	sp, sp, #264	; 0x108
       c:	str	r0, [fp, #-12]
      10:	str	r1, [fp, #-16]
      14:	str	r2, [fp, #-20]	; 0xffffffec
      18:	str	r3, [fp, #-24]	; 0xffffffe8
      1c:	add	r0, sp, #16
      20:	str	r0, [sp, #12]
      24:	ldr	r0, [sp, #12]
      28:	bl	0 <flatcc_builder_init>
      2c:	ldr	r1, [sp, #12]
      30:	ldr	r2, [fp, #-12]
      34:	ldr	r3, [fp, #-16]
      38:	str	r0, [sp, #8]
      3c:	mov	r0, r1
      40:	mov	r1, r2
      44:	mov	r2, r3
      48:	bl	ac <export_schema>
      4c:	ldr	r1, [sp, #12]
      50:	ldr	r2, [fp, #-20]	; 0xffffffec
      54:	ldr	r3, [fp, #-24]	; 0xffffffe8
      58:	ldr	r3, [r3]
      5c:	str	r0, [sp, #4]
      60:	mov	r0, r1
      64:	mov	r1, r2
      68:	mov	r2, r3
      6c:	bl	0 <flatcc_builder_copy_buffer>
      70:	movw	r1, #0
      74:	cmp	r0, r1
      78:	bne	80 <__flatcc_fb_codegen_bfbs_to_buffer+0x80>
      7c:	b	88 <__flatcc_fb_codegen_bfbs_to_buffer+0x88>
      80:	ldr	r0, [fp, #-20]	; 0xffffffec
      84:	bl	23c <sort_fields>
      88:	ldr	r0, [sp, #12]
      8c:	bl	0 <flatcc_builder_get_buffer_size>
      90:	ldr	lr, [fp, #-24]	; 0xffffffe8
      94:	str	r0, [lr]
      98:	ldr	r0, [sp, #12]
      9c:	bl	0 <flatcc_builder_clear>
      a0:	ldr	r0, [fp, #-20]	; 0xffffffec
      a4:	sub	sp, fp, #8
      a8:	pop	{r4, r5, fp, pc}

000000ac <export_schema>:
      ac:	push	{fp, lr}
      b0:	mov	fp, sp
      b4:	sub	sp, sp, #88	; 0x58
      b8:	str	r0, [fp, #-8]
      bc:	str	r1, [fp, #-12]
      c0:	str	r2, [fp, #-16]
      c4:	movw	r0, #0
      c8:	str	r0, [sp, #24]
      cc:	ldr	r1, [fp, #-16]
      d0:	ldr	r0, [fp, #-12]
      d4:	ldr	r2, [r0, #184]	; 0xb8
      d8:	ldr	r0, [fp, #-16]
      dc:	ldr	r3, [r0, #60]	; 0x3c
      e0:	add	r0, sp, #28
      e4:	bl	5f0 <build_catalog>
      e8:	cmp	r0, #0
      ec:	beq	fc <export_schema+0x50>
      f0:	mvn	r0, #0
      f4:	str	r0, [fp, #-4]
      f8:	b	230 <export_schema+0x184>
      fc:	ldr	r0, [sp, #32]
     100:	cmp	r0, #0
     104:	ble	138 <export_schema+0x8c>
     108:	ldr	r0, [sp, #32]
     10c:	lsl	r0, r0, #2
     110:	bl	0 <malloc>
     114:	str	r0, [sp, #24]
     118:	movw	lr, #0
     11c:	cmp	r0, lr
     120:	bne	138 <export_schema+0x8c>
     124:	add	r0, sp, #28
     128:	bl	7a8 <clear_catalog>
     12c:	mvn	r0, #0
     130:	str	r0, [fp, #-4]
     134:	b	230 <export_schema+0x184>
     138:	ldr	r0, [fp, #-12]
     13c:	ldr	r0, [r0, #188]	; 0xbc
     140:	cmp	r0, #0
     144:	beq	158 <export_schema+0xac>
     148:	ldr	r0, [fp, #-8]
     14c:	bl	834 <reflection_Schema_start_as_root_with_size>
     150:	str	r0, [sp, #20]
     154:	b	164 <export_schema+0xb8>
     158:	ldr	r0, [fp, #-8]
     15c:	bl	880 <reflection_Schema_start_as_root>
     160:	str	r0, [sp, #16]
     164:	ldr	r0, [fp, #-16]
     168:	ldrh	r0, [r0, #16]
     16c:	cmp	r0, #2
     170:	bne	190 <export_schema+0xe4>
     174:	ldr	r0, [fp, #-8]
     178:	ldr	r1, [fp, #-16]
     17c:	ldr	r1, [r1, #8]
     180:	ldr	r2, [fp, #-16]
     184:	ldr	r2, [r2, #12]
     188:	bl	8cc <reflection_Schema_file_ident_create>
     18c:	str	r0, [sp, #12]
     190:	ldr	r0, [fp, #-16]
     194:	ldrh	r0, [r0, #32]
     198:	cmp	r0, #2
     19c:	bne	1bc <export_schema+0x110>
     1a0:	ldr	r0, [fp, #-8]
     1a4:	ldr	r1, [fp, #-16]
     1a8:	ldr	r1, [r1, #24]
     1ac:	ldr	r2, [fp, #-16]
     1b0:	ldr	r2, [r2, #28]
     1b4:	bl	924 <reflection_Schema_file_ext_create>
     1b8:	str	r0, [sp, #8]
     1bc:	ldr	r0, [fp, #-8]
     1c0:	ldr	r1, [sp, #44]	; 0x2c
     1c4:	ldr	r2, [sp, #32]
     1c8:	ldr	r3, [sp, #24]
     1cc:	bl	97c <export_objects>
     1d0:	ldr	r0, [fp, #-8]
     1d4:	ldr	r1, [sp, #48]	; 0x30
     1d8:	ldr	r2, [sp, #36]	; 0x24
     1dc:	ldr	r3, [sp, #24]
     1e0:	bl	ad0 <export_enums>
     1e4:	ldr	r0, [fp, #-8]
     1e8:	ldr	r1, [fp, #-16]
     1ec:	ldr	r1, [r1, #52]	; 0x34
     1f0:	ldr	r2, [sp, #24]
     1f4:	bl	c9c <export_root_type>
     1f8:	ldr	r0, [fp, #-8]
     1fc:	bl	d08 <reflection_Schema_end_as_root>
     200:	add	r1, sp, #28
     204:	str	r0, [sp, #4]
     208:	mov	r0, r1
     20c:	bl	7a8 <clear_catalog>
     210:	ldr	r0, [sp, #24]
     214:	movw	r1, #0
     218:	cmp	r0, r1
     21c:	beq	228 <export_schema+0x17c>
     220:	ldr	r0, [sp, #24]
     224:	bl	0 <free>
     228:	movw	r0, #0
     22c:	str	r0, [fp, #-4]
     230:	ldr	r0, [fp, #-4]
     234:	mov	sp, fp
     238:	pop	{fp, pc}

0000023c <sort_fields>:
     23c:	push	{fp, lr}
     240:	mov	fp, sp
     244:	sub	sp, sp, #32
     248:	str	r0, [fp, #-4]
     24c:	ldr	r0, [fp, #-4]
     250:	bl	33a4 <reflection_Schema_as_root>
     254:	str	r0, [fp, #-12]
     258:	ldr	r0, [fp, #-12]
     25c:	bl	341c <reflection_Schema_objects>
     260:	str	r0, [sp, #16]
     264:	movw	r0, #0
     268:	str	r0, [fp, #-8]
     26c:	ldr	r0, [fp, #-8]
     270:	ldr	r1, [sp, #16]
     274:	str	r0, [sp]
     278:	mov	r0, r1
     27c:	bl	3524 <reflection_Object_vec_len>
     280:	ldr	r1, [sp]
     284:	cmp	r1, r0
     288:	bcs	2c8 <sort_fields+0x8c>
     28c:	ldr	r0, [sp, #16]
     290:	ldr	r1, [fp, #-8]
     294:	bl	3574 <reflection_Object_vec_at>
     298:	str	r0, [sp, #12]
     29c:	ldr	r0, [sp, #12]
     2a0:	bl	35f8 <reflection_Object_fields>
     2a4:	str	r0, [sp, #8]
     2a8:	ldr	r0, [sp, #8]
     2ac:	str	r0, [sp, #4]
     2b0:	ldr	r0, [sp, #4]
     2b4:	bl	3700 <reflection_Field_vec_sort_by_name>
     2b8:	ldr	r0, [fp, #-8]
     2bc:	add	r0, r0, #1
     2c0:	str	r0, [fp, #-8]
     2c4:	b	26c <sort_fields+0x30>
     2c8:	mov	sp, fp
     2cc:	pop	{fp, pc}

000002d0 <__flatcc_fb_codegen_bfbs_alloc_buffer>:
     2d0:	push	{r4, r5, fp, lr}
     2d4:	add	fp, sp, #8
     2d8:	sub	sp, sp, #256	; 0x100
     2dc:	str	r0, [fp, #-12]
     2e0:	str	r1, [fp, #-16]
     2e4:	str	r2, [fp, #-20]	; 0xffffffec
     2e8:	movw	r0, #0
     2ec:	str	r0, [sp, #4]
     2f0:	add	r0, sp, #12
     2f4:	str	r0, [sp, #8]
     2f8:	ldr	r0, [sp, #8]
     2fc:	bl	0 <flatcc_builder_init>
     300:	ldr	r1, [sp, #8]
     304:	ldr	r2, [fp, #-12]
     308:	ldr	lr, [fp, #-16]
     30c:	str	r0, [sp]
     310:	mov	r0, r1
     314:	mov	r1, r2
     318:	mov	r2, lr
     31c:	bl	ac <export_schema>
     320:	cmp	r0, #0
     324:	beq	32c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x5c>
     328:	b	354 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
     32c:	ldr	r0, [sp, #8]
     330:	ldr	r1, [fp, #-20]	; 0xffffffec
     334:	bl	0 <flatcc_builder_finalize_buffer>
     338:	str	r0, [sp, #4]
     33c:	movw	r1, #0
     340:	cmp	r0, r1
     344:	bne	34c <__flatcc_fb_codegen_bfbs_alloc_buffer+0x7c>
     348:	b	354 <__flatcc_fb_codegen_bfbs_alloc_buffer+0x84>
     34c:	ldr	r0, [sp, #4]
     350:	bl	23c <sort_fields>
     354:	ldr	r0, [sp, #8]
     358:	bl	0 <flatcc_builder_clear>
     35c:	ldr	r0, [sp, #4]
     360:	sub	sp, fp, #8
     364:	pop	{r4, r5, fp, pc}

00000368 <__flatcc_fb_codegen_bfbs_to_file>:
     368:	push	{fp, lr}
     36c:	mov	fp, sp
     370:	sub	sp, sp, #40	; 0x28
     374:	str	r0, [fp, #-8]
     378:	str	r1, [fp, #-12]
     37c:	mvn	r0, #0
     380:	str	r0, [sp, #12]
     384:	ldr	r0, [fp, #-8]
     388:	ldr	r1, [fp, #-12]
     38c:	bl	470 <open_file>
     390:	str	r0, [sp, #16]
     394:	ldr	r0, [sp, #16]
     398:	movw	r1, #0
     39c:	cmp	r0, r1
     3a0:	bne	3b0 <__flatcc_fb_codegen_bfbs_to_file+0x48>
     3a4:	mvn	r0, #0
     3a8:	str	r0, [fp, #-4]
     3ac:	b	464 <__flatcc_fb_codegen_bfbs_to_file+0xfc>
     3b0:	ldr	r0, [fp, #-8]
     3b4:	ldr	r1, [fp, #-12]
     3b8:	add	r2, sp, #20
     3bc:	bl	2d0 <__flatcc_fb_codegen_bfbs_alloc_buffer>
     3c0:	str	r0, [fp, #-16]
     3c4:	ldr	r0, [fp, #-16]
     3c8:	movw	r1, #0
     3cc:	cmp	r0, r1
     3d0:	bne	3e8 <__flatcc_fb_codegen_bfbs_to_file+0x80>
     3d4:	movw	r0, #0
     3d8:	movt	r0, #0
     3dc:	bl	0 <printf>
     3e0:	str	r0, [sp, #8]
     3e4:	b	43c <__flatcc_fb_codegen_bfbs_to_file+0xd4>
     3e8:	ldr	r0, [sp, #20]
     3ec:	ldr	r1, [fp, #-16]
     3f0:	ldr	r2, [sp, #20]
     3f4:	ldr	r3, [sp, #16]
     3f8:	str	r0, [sp, #4]
     3fc:	mov	r0, r1
     400:	movw	r1, #1
     404:	bl	0 <fwrite>
     408:	ldr	r1, [sp, #4]
     40c:	cmp	r1, r0
     410:	beq	434 <__flatcc_fb_codegen_bfbs_to_file+0xcc>
     414:	movw	r0, #0
     418:	movt	r0, #0
     41c:	ldr	r0, [r0]
     420:	movw	r1, #0
     424:	movt	r1, #0
     428:	bl	0 <fprintf>
     42c:	str	r0, [sp]
     430:	b	43c <__flatcc_fb_codegen_bfbs_to_file+0xd4>
     434:	movw	r0, #0
     438:	str	r0, [sp, #12]
     43c:	ldr	r0, [fp, #-16]
     440:	movw	r1, #0
     444:	cmp	r0, r1
     448:	beq	454 <__flatcc_fb_codegen_bfbs_to_file+0xec>
     44c:	ldr	r0, [fp, #-16]
     450:	bl	0 <free>
     454:	ldr	r0, [sp, #16]
     458:	bl	5a4 <close_file>
     45c:	ldr	r0, [sp, #12]
     460:	str	r0, [fp, #-4]
     464:	ldr	r0, [fp, #-4]
     468:	mov	sp, fp
     46c:	pop	{fp, pc}

00000470 <open_file>:
     470:	push	{fp, lr}
     474:	mov	fp, sp
     478:	sub	sp, sp, #56	; 0x38
     47c:	str	r0, [fp, #-8]
     480:	str	r1, [fp, #-12]
     484:	movw	r0, #0
     488:	str	r0, [fp, #-16]
     48c:	ldr	r1, [fp, #-8]
     490:	ldr	r1, [r1, #216]	; 0xd8
     494:	cmp	r1, r0
     498:	beq	4ac <open_file+0x3c>
     49c:	ldr	r0, [fp, #-8]
     4a0:	ldr	r0, [r0, #216]	; 0xd8
     4a4:	str	r0, [sp, #12]
     4a8:	b	4bc <open_file+0x4c>
     4ac:	movw	r0, #0
     4b0:	movt	r0, #0
     4b4:	str	r0, [sp, #12]
     4b8:	b	4bc <open_file+0x4c>
     4bc:	ldr	r0, [sp, #12]
     4c0:	str	r0, [fp, #-24]	; 0xffffffe8
     4c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4c8:	bl	0 <strlen>
     4cc:	str	r0, [sp, #24]
     4d0:	ldr	r0, [fp, #-12]
     4d4:	ldr	r0, [r0, #160]	; 0xa0
     4d8:	str	r0, [sp, #20]
     4dc:	ldr	r0, [sp, #20]
     4e0:	bl	0 <strlen>
     4e4:	str	r0, [sp, #28]
     4e8:	movw	r0, #0
     4ec:	movt	r0, #0
     4f0:	str	r0, [sp, #16]
     4f4:	ldr	r0, [fp, #-8]
     4f8:	ldr	r0, [r0, #108]	; 0x6c
     4fc:	cmp	r0, #0
     500:	beq	518 <open_file+0xa8>
     504:	movw	r0, #0
     508:	movt	r0, #0
     50c:	ldr	r0, [r0]
     510:	str	r0, [fp, #-4]
     514:	b	598 <open_file+0x128>
     518:	ldr	r0, [fp, #-24]	; 0xffffffe8
     51c:	ldr	r1, [sp, #24]
     520:	ldr	r2, [sp, #20]
     524:	ldr	r3, [sp, #28]
     528:	ldr	ip, [sp, #16]
     52c:	str	ip, [sp]
     530:	movw	ip, #1
     534:	str	ip, [sp, #4]
     538:	bl	0 <__flatcc_fb_create_join_path_n>
     53c:	str	r0, [fp, #-20]	; 0xffffffec
     540:	bl	3f28 <checkmem>
     544:	ldr	r0, [fp, #-20]	; 0xffffffec
     548:	movw	r1, #0
     54c:	movt	r1, #0
     550:	bl	0 <fopen>
     554:	str	r0, [fp, #-16]
     558:	ldr	r0, [fp, #-16]
     55c:	movw	r1, #0
     560:	cmp	r0, r1
     564:	bne	588 <open_file+0x118>
     568:	movw	r0, #0
     56c:	movt	r0, #0
     570:	ldr	r0, [r0]
     574:	ldr	r2, [fp, #-20]	; 0xffffffec
     578:	movw	r1, #0
     57c:	movt	r1, #0
     580:	bl	0 <fprintf>
     584:	str	r0, [sp, #8]
     588:	ldr	r0, [fp, #-20]	; 0xffffffec
     58c:	bl	0 <free>
     590:	ldr	r0, [fp, #-16]
     594:	str	r0, [fp, #-4]
     598:	ldr	r0, [fp, #-4]
     59c:	mov	sp, fp
     5a0:	pop	{fp, pc}

000005a4 <close_file>:
     5a4:	push	{fp, lr}
     5a8:	mov	fp, sp
     5ac:	sub	sp, sp, #8
     5b0:	str	r0, [sp, #4]
     5b4:	ldr	r0, [sp, #4]
     5b8:	movw	r1, #0
     5bc:	cmp	r0, r1
     5c0:	beq	5e8 <close_file+0x44>
     5c4:	ldr	r0, [sp, #4]
     5c8:	movw	r1, #0
     5cc:	movt	r1, #0
     5d0:	ldr	r1, [r1]
     5d4:	cmp	r0, r1
     5d8:	beq	5e8 <close_file+0x44>
     5dc:	ldr	r0, [sp, #4]
     5e0:	bl	0 <fclose>
     5e4:	str	r0, [sp]
     5e8:	mov	sp, fp
     5ec:	pop	{fp, pc}

000005f0 <build_catalog>:
     5f0:	push	{fp, lr}
     5f4:	mov	fp, sp
     5f8:	sub	sp, sp, #32
     5fc:	str	r0, [fp, #-8]
     600:	str	r1, [fp, #-12]
     604:	str	r2, [sp, #16]
     608:	str	r3, [sp, #12]
     60c:	ldr	r0, [fp, #-8]
     610:	movw	r1, #0
     614:	and	r1, r1, #255	; 0xff
     618:	movw	r2, #44	; 0x2c
     61c:	bl	0 <memset>
     620:	ldr	r0, [sp, #16]
     624:	ldr	r1, [fp, #-8]
     628:	str	r0, [r1]
     62c:	ldr	r0, [fp, #-12]
     630:	ldr	r1, [fp, #-8]
     634:	str	r0, [r1, #40]	; 0x28
     638:	ldr	r0, [sp, #12]
     63c:	ldr	r1, [fp, #-8]
     640:	movw	r2, #0
     644:	movt	r2, #0
     648:	str	r1, [sp, #8]
     64c:	mov	r1, r2
     650:	ldr	r2, [sp, #8]
     654:	bl	0 <fb_scope_table_visit>
     658:	ldr	r0, [fp, #-8]
     65c:	ldr	r0, [r0, #4]
     660:	movw	r1, #8
     664:	bl	0 <calloc>
     668:	ldr	r1, [fp, #-8]
     66c:	str	r0, [r1, #16]
     670:	ldr	r0, [fp, #-8]
     674:	ldr	r0, [r0, #8]
     678:	movw	r1, #8
     67c:	bl	0 <calloc>
     680:	ldr	r1, [fp, #-8]
     684:	str	r0, [r1, #20]
     688:	ldr	r0, [fp, #-8]
     68c:	ldr	r0, [r0, #12]
     690:	bl	0 <malloc>
     694:	ldr	r1, [fp, #-8]
     698:	str	r0, [r1, #24]
     69c:	ldr	r0, [fp, #-8]
     6a0:	ldr	r0, [r0, #16]
     6a4:	ldr	r1, [fp, #-8]
     6a8:	str	r0, [r1, #28]
     6ac:	ldr	r0, [fp, #-8]
     6b0:	ldr	r0, [r0, #20]
     6b4:	ldr	r1, [fp, #-8]
     6b8:	str	r0, [r1, #32]
     6bc:	ldr	r0, [fp, #-8]
     6c0:	ldr	r0, [r0, #24]
     6c4:	ldr	r1, [fp, #-8]
     6c8:	str	r0, [r1, #36]	; 0x24
     6cc:	ldr	r0, [fp, #-8]
     6d0:	ldr	r0, [r0, #16]
     6d4:	movw	r1, #0
     6d8:	cmp	r0, r1
     6dc:	bne	6f0 <build_catalog+0x100>
     6e0:	ldr	r0, [fp, #-8]
     6e4:	ldr	r0, [r0, #4]
     6e8:	cmp	r0, #0
     6ec:	bgt	738 <build_catalog+0x148>
     6f0:	ldr	r0, [fp, #-8]
     6f4:	ldr	r0, [r0, #20]
     6f8:	movw	r1, #0
     6fc:	cmp	r0, r1
     700:	bne	714 <build_catalog+0x124>
     704:	ldr	r0, [fp, #-8]
     708:	ldr	r0, [r0, #8]
     70c:	cmp	r0, #0
     710:	bgt	738 <build_catalog+0x148>
     714:	ldr	r0, [fp, #-8]
     718:	ldr	r0, [r0, #24]
     71c:	movw	r1, #0
     720:	cmp	r0, r1
     724:	bne	74c <build_catalog+0x15c>
     728:	ldr	r0, [fp, #-8]
     72c:	ldr	r0, [r0, #12]
     730:	cmp	r0, #0
     734:	bls	74c <build_catalog+0x15c>
     738:	ldr	r0, [fp, #-8]
     73c:	bl	7a8 <clear_catalog>
     740:	mvn	r0, #0
     744:	str	r0, [fp, #-4]
     748:	b	79c <build_catalog+0x1ac>
     74c:	ldr	r0, [sp, #12]
     750:	ldr	r1, [fp, #-8]
     754:	movw	r2, #0
     758:	movt	r2, #0
     75c:	str	r1, [sp, #4]
     760:	mov	r1, r2
     764:	ldr	r2, [sp, #4]
     768:	bl	0 <fb_scope_table_visit>
     76c:	ldr	r0, [fp, #-8]
     770:	ldr	r0, [r0, #16]
     774:	ldr	r1, [fp, #-8]
     778:	ldr	r1, [r1, #4]
     77c:	bl	db0 <sort_entries>
     780:	ldr	r0, [fp, #-8]
     784:	ldr	r0, [r0, #20]
     788:	ldr	r1, [fp, #-8]
     78c:	ldr	r1, [r1, #8]
     790:	bl	db0 <sort_entries>
     794:	movw	r0, #0
     798:	str	r0, [fp, #-4]
     79c:	ldr	r0, [fp, #-4]
     7a0:	mov	sp, fp
     7a4:	pop	{fp, pc}

000007a8 <clear_catalog>:
     7a8:	push	{fp, lr}
     7ac:	mov	fp, sp
     7b0:	sub	sp, sp, #8
     7b4:	str	r0, [sp, #4]
     7b8:	ldr	r0, [sp, #4]
     7bc:	ldr	r0, [r0, #16]
     7c0:	movw	r1, #0
     7c4:	cmp	r0, r1
     7c8:	beq	7d8 <clear_catalog+0x30>
     7cc:	ldr	r0, [sp, #4]
     7d0:	ldr	r0, [r0, #16]
     7d4:	bl	0 <free>
     7d8:	ldr	r0, [sp, #4]
     7dc:	ldr	r0, [r0, #20]
     7e0:	movw	r1, #0
     7e4:	cmp	r0, r1
     7e8:	beq	7f8 <clear_catalog+0x50>
     7ec:	ldr	r0, [sp, #4]
     7f0:	ldr	r0, [r0, #20]
     7f4:	bl	0 <free>
     7f8:	ldr	r0, [sp, #4]
     7fc:	ldr	r0, [r0, #24]
     800:	movw	r1, #0
     804:	cmp	r0, r1
     808:	beq	818 <clear_catalog+0x70>
     80c:	ldr	r0, [sp, #4]
     810:	ldr	r0, [r0, #24]
     814:	bl	0 <free>
     818:	ldr	r0, [sp, #4]
     81c:	movw	r1, #0
     820:	and	r1, r1, #255	; 0xff
     824:	movw	r2, #44	; 0x2c
     828:	bl	0 <memset>
     82c:	mov	sp, fp
     830:	pop	{fp, pc}

00000834 <reflection_Schema_start_as_root_with_size>:
     834:	push	{fp, lr}
     838:	mov	fp, sp
     83c:	sub	sp, sp, #8
     840:	str	r0, [sp, #4]
     844:	ldr	r0, [sp, #4]
     848:	movw	r1, #0
     84c:	movt	r1, #0
     850:	bl	1220 <flatbuffers_buffer_start_with_size>
     854:	cmp	r0, #0
     858:	beq	868 <reflection_Schema_start_as_root_with_size+0x34>
     85c:	mvn	r0, #0
     860:	str	r0, [sp]
     864:	b	874 <reflection_Schema_start_as_root_with_size+0x40>
     868:	ldr	r0, [sp, #4]
     86c:	bl	1254 <reflection_Schema_start>
     870:	str	r0, [sp]
     874:	ldr	r0, [sp]
     878:	mov	sp, fp
     87c:	pop	{fp, pc}

00000880 <reflection_Schema_start_as_root>:
     880:	push	{fp, lr}
     884:	mov	fp, sp
     888:	sub	sp, sp, #8
     88c:	str	r0, [sp, #4]
     890:	ldr	r0, [sp, #4]
     894:	movw	r1, #0
     898:	movt	r1, #0
     89c:	bl	1278 <flatbuffers_buffer_start>
     8a0:	cmp	r0, #0
     8a4:	beq	8b4 <reflection_Schema_start_as_root+0x34>
     8a8:	mvn	r0, #0
     8ac:	str	r0, [sp]
     8b0:	b	8c0 <reflection_Schema_start_as_root+0x40>
     8b4:	ldr	r0, [sp, #4]
     8b8:	bl	1254 <reflection_Schema_start>
     8bc:	str	r0, [sp]
     8c0:	ldr	r0, [sp]
     8c4:	mov	sp, fp
     8c8:	pop	{fp, pc}

000008cc <reflection_Schema_file_ident_create>:
     8cc:	push	{fp, lr}
     8d0:	mov	fp, sp
     8d4:	sub	sp, sp, #24
     8d8:	str	r0, [fp, #-4]
     8dc:	str	r1, [fp, #-8]
     8e0:	str	r2, [sp, #12]
     8e4:	ldr	r0, [fp, #-4]
     8e8:	ldr	r1, [fp, #-4]
     8ec:	ldr	r2, [fp, #-8]
     8f0:	ldr	r3, [sp, #12]
     8f4:	str	r0, [sp, #8]
     8f8:	mov	r0, r1
     8fc:	mov	r1, r2
     900:	mov	r2, r3
     904:	bl	0 <flatcc_builder_create_string>
     908:	ldr	r1, [sp, #8]
     90c:	str	r0, [sp, #4]
     910:	mov	r0, r1
     914:	ldr	r1, [sp, #4]
     918:	bl	12ac <reflection_Schema_file_ident_add>
     91c:	mov	sp, fp
     920:	pop	{fp, pc}

00000924 <reflection_Schema_file_ext_create>:
     924:	push	{fp, lr}
     928:	mov	fp, sp
     92c:	sub	sp, sp, #24
     930:	str	r0, [fp, #-4]
     934:	str	r1, [fp, #-8]
     938:	str	r2, [sp, #12]
     93c:	ldr	r0, [fp, #-4]
     940:	ldr	r1, [fp, #-4]
     944:	ldr	r2, [fp, #-8]
     948:	ldr	r3, [sp, #12]
     94c:	str	r0, [sp, #8]
     950:	mov	r0, r1
     954:	mov	r1, r2
     958:	mov	r2, r3
     95c:	bl	0 <flatcc_builder_create_string>
     960:	ldr	r1, [sp, #8]
     964:	str	r0, [sp, #4]
     968:	mov	r0, r1
     96c:	ldr	r1, [sp, #4]
     970:	bl	1318 <reflection_Schema_file_ext_add>
     974:	mov	sp, fp
     978:	pop	{fp, pc}

0000097c <export_objects>:
     97c:	push	{fp, lr}
     980:	mov	fp, sp
     984:	sub	sp, sp, #64	; 0x40
     988:	str	r0, [fp, #-4]
     98c:	str	r1, [fp, #-8]
     990:	str	r2, [fp, #-12]
     994:	str	r3, [fp, #-16]
     998:	movw	r0, #0
     99c:	str	r0, [fp, #-20]	; 0xffffffec
     9a0:	ldr	r0, [fp, #-20]	; 0xffffffec
     9a4:	ldr	r1, [fp, #-12]
     9a8:	cmp	r0, r1
     9ac:	bge	ab4 <export_objects+0x138>
     9b0:	ldr	r0, [fp, #-8]
     9b4:	ldr	r1, [fp, #-20]	; 0xffffffec
     9b8:	ldr	r0, [r0, r1, lsl #3]
     9bc:	str	r0, [fp, #-28]	; 0xffffffe4
     9c0:	ldr	r0, [fp, #-4]
     9c4:	bl	1384 <reflection_Object_start>
     9c8:	ldr	r1, [fp, #-4]
     9cc:	ldr	lr, [fp, #-8]
     9d0:	ldr	r2, [fp, #-20]	; 0xffffffec
     9d4:	add	r2, lr, r2, lsl #3
     9d8:	ldr	r2, [r2, #4]
     9dc:	str	r0, [sp, #32]
     9e0:	mov	r0, r1
     9e4:	mov	r1, r2
     9e8:	bl	13a8 <reflection_Object_name_create_str>
     9ec:	ldr	r1, [fp, #-4]
     9f0:	str	r0, [sp, #28]
     9f4:	mov	r0, r1
     9f8:	bl	13f4 <reflection_Object_fields_start>
     9fc:	ldr	r1, [fp, #-4]
     a00:	ldr	r2, [fp, #-28]	; 0xffffffe4
     a04:	str	r0, [sp, #24]
     a08:	mov	r0, r1
     a0c:	mov	r1, r2
     a10:	bl	1418 <export_fields>
     a14:	ldr	r0, [fp, #-4]
     a18:	bl	1850 <reflection_Object_fields_end>
     a1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a20:	ldrh	r1, [r1, #8]
     a24:	cmp	r1, #1
     a28:	movw	r1, #0
     a2c:	moveq	r1, #1
     a30:	and	r1, r1, #1
     a34:	str	r1, [fp, #-24]	; 0xffffffe8
     a38:	ldr	r1, [fp, #-24]	; 0xffffffe8
     a3c:	cmp	r1, #0
     a40:	str	r0, [sp, #20]
     a44:	beq	a5c <export_objects+0xe0>
     a48:	ldr	r0, [fp, #-4]
     a4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a50:	ldr	r1, [r1, #112]	; 0x70
     a54:	bl	1890 <reflection_Object_bytesize_add>
     a58:	str	r0, [sp, #16]
     a5c:	ldr	r0, [fp, #-4]
     a60:	ldrb	r1, [fp, #-24]	; 0xffffffe8
     a64:	bl	1918 <reflection_Object_is_struct_add>
     a68:	ldr	r1, [fp, #-4]
     a6c:	ldr	lr, [fp, #-28]	; 0xffffffe4
     a70:	ldrh	lr, [lr, #104]	; 0x68
     a74:	str	r0, [sp, #12]
     a78:	mov	r0, r1
     a7c:	mov	r1, lr
     a80:	bl	199c <reflection_Object_minalign_add>
     a84:	ldr	r1, [fp, #-4]
     a88:	str	r0, [sp, #8]
     a8c:	mov	r0, r1
     a90:	bl	1a20 <reflection_Object_end>
     a94:	ldr	r1, [fp, #-16]
     a98:	ldr	lr, [fp, #-20]	; 0xffffffec
     a9c:	add	r1, r1, lr, lsl #2
     aa0:	str	r0, [r1]
     aa4:	ldr	r0, [fp, #-20]	; 0xffffffec
     aa8:	add	r0, r0, #1
     aac:	str	r0, [fp, #-20]	; 0xffffffec
     ab0:	b	9a0 <export_objects+0x24>
     ab4:	ldr	r0, [fp, #-4]
     ab8:	ldr	r1, [fp, #-16]
     abc:	ldr	r2, [fp, #-12]
     ac0:	bl	1a80 <reflection_Schema_objects_create>
     ac4:	str	r0, [sp, #4]
     ac8:	mov	sp, fp
     acc:	pop	{fp, pc}

00000ad0 <export_enums>:
     ad0:	push	{r4, r5, fp, lr}
     ad4:	add	fp, sp, #8
     ad8:	sub	sp, sp, #104	; 0x68
     adc:	str	r0, [fp, #-12]
     ae0:	str	r1, [fp, #-16]
     ae4:	str	r2, [fp, #-20]	; 0xffffffec
     ae8:	str	r3, [fp, #-24]	; 0xffffffe8
     aec:	ldr	r0, [fp, #-12]
     af0:	bl	2a80 <reflection_Schema_enums_start>
     af4:	movw	r1, #0
     af8:	str	r1, [fp, #-28]	; 0xffffffe4
     afc:	str	r0, [fp, #-44]	; 0xffffffd4
     b00:	ldr	r0, [fp, #-28]	; 0xffffffe4
     b04:	ldr	r1, [fp, #-20]	; 0xffffffec
     b08:	cmp	r0, r1
     b0c:	bge	c88 <export_enums+0x1b8>
     b10:	ldr	r0, [fp, #-16]
     b14:	ldr	r1, [fp, #-28]	; 0xffffffe4
     b18:	ldr	r0, [r0, r1, lsl #3]
     b1c:	str	r0, [fp, #-36]	; 0xffffffdc
     b20:	ldr	r0, [fp, #-36]	; 0xffffffdc
     b24:	ldrh	r0, [r0, #8]
     b28:	sub	r0, r0, #4
     b2c:	clz	r0, r0
     b30:	lsr	r0, r0, #5
     b34:	str	r0, [fp, #-32]	; 0xffffffe0
     b38:	ldr	r0, [fp, #-12]
     b3c:	bl	2aa0 <reflection_Enum_vec_push_start>
     b40:	ldr	r1, [fp, #-12]
     b44:	ldr	lr, [fp, #-16]
     b48:	ldr	r2, [fp, #-28]	; 0xffffffe4
     b4c:	add	r2, lr, r2, lsl #3
     b50:	ldr	r2, [r2, #4]
     b54:	str	r0, [fp, #-48]	; 0xffffffd0
     b58:	mov	r0, r1
     b5c:	mov	r1, r2
     b60:	bl	2ac0 <reflection_Enum_name_create_str>
     b64:	ldr	r1, [fp, #-12]
     b68:	str	r0, [fp, #-52]	; 0xffffffcc
     b6c:	mov	r0, r1
     b70:	bl	2b0c <reflection_Enum_values_start>
     b74:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b78:	ldr	r1, [r1, #20]
     b7c:	str	r1, [fp, #-40]	; 0xffffffd8
     b80:	str	r0, [sp, #56]	; 0x38
     b84:	ldr	r0, [fp, #-40]	; 0xffffffd8
     b88:	movw	r1, #0
     b8c:	cmp	r0, r1
     b90:	beq	bf4 <export_enums+0x124>
     b94:	ldr	r0, [fp, #-12]
     b98:	ldr	r1, [fp, #-40]	; 0xffffffd8
     b9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
     ba0:	cmp	r2, #0
     ba4:	str	r0, [sp, #52]	; 0x34
     ba8:	str	r1, [sp, #48]	; 0x30
     bac:	beq	bbc <export_enums+0xec>
     bb0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bb4:	str	r0, [sp, #44]	; 0x2c
     bb8:	b	bc8 <export_enums+0xf8>
     bbc:	movw	r0, #0
     bc0:	str	r0, [sp, #44]	; 0x2c
     bc4:	b	bc8 <export_enums+0xf8>
     bc8:	ldr	r0, [sp, #44]	; 0x2c
     bcc:	ldr	r1, [sp, #52]	; 0x34
     bd0:	str	r0, [sp, #40]	; 0x28
     bd4:	mov	r0, r1
     bd8:	ldr	r1, [sp, #48]	; 0x30
     bdc:	ldr	r2, [sp, #40]	; 0x28
     be0:	bl	2b2c <export_enumval>
     be4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     be8:	ldr	r0, [r0]
     bec:	str	r0, [fp, #-40]	; 0xffffffd8
     bf0:	b	b84 <export_enums+0xb4>
     bf4:	ldr	r0, [fp, #-12]
     bf8:	bl	2bf4 <reflection_Enum_values_end>
     bfc:	ldr	lr, [fp, #-12]
     c00:	ldrb	r1, [fp, #-32]	; 0xffffffe0
     c04:	str	r0, [sp, #36]	; 0x24
     c08:	mov	r0, lr
     c0c:	bl	2c34 <reflection_Enum_is_union_add>
     c10:	ldr	r1, [fp, #-12]
     c14:	mov	lr, r1
     c18:	ldr	r2, [fp, #-36]	; 0xffffffdc
     c1c:	ldr	r3, [r2, #40]	; 0x28
     c20:	ldr	ip, [r2, #44]	; 0x2c
     c24:	ldr	r4, [r2, #48]	; 0x30
     c28:	ldr	r2, [r2, #52]	; 0x34
     c2c:	mov	r5, sp
     c30:	str	r4, [r5]
     c34:	str	r2, [r5, #4]
     c38:	str	r0, [sp, #32]
     c3c:	mov	r0, r1
     c40:	mov	r2, r3
     c44:	mov	r3, ip
     c48:	str	lr, [sp, #28]
     c4c:	bl	1eec <export_type>
     c50:	ldr	r1, [sp, #28]
     c54:	str	r0, [sp, #24]
     c58:	mov	r0, r1
     c5c:	ldr	r1, [sp, #24]
     c60:	bl	2cb8 <reflection_Enum_underlying_type_add>
     c64:	ldr	r1, [fp, #-12]
     c68:	str	r0, [sp, #20]
     c6c:	mov	r0, r1
     c70:	bl	2d24 <reflection_Enum_vec_push_end>
     c74:	str	r0, [sp, #16]
     c78:	ldr	r0, [fp, #-28]	; 0xffffffe4
     c7c:	add	r0, r0, #1
     c80:	str	r0, [fp, #-28]	; 0xffffffe4
     c84:	b	b00 <export_enums+0x30>
     c88:	ldr	r0, [fp, #-12]
     c8c:	bl	2d64 <reflection_Schema_enums_end>
     c90:	str	r0, [sp, #12]
     c94:	sub	sp, fp, #8
     c98:	pop	{r4, r5, fp, pc}

00000c9c <export_root_type>:
     c9c:	push	{fp, lr}
     ca0:	mov	fp, sp
     ca4:	sub	sp, sp, #24
     ca8:	str	r0, [fp, #-4]
     cac:	str	r1, [fp, #-8]
     cb0:	str	r2, [sp, #12]
     cb4:	ldr	r0, [fp, #-8]
     cb8:	movw	r1, #0
     cbc:	cmp	r0, r1
     cc0:	beq	d00 <export_root_type+0x64>
     cc4:	ldr	r0, [fp, #-8]
     cc8:	ldrh	r0, [r0, #8]
     ccc:	cmp	r0, #0
     cd0:	bne	cfc <export_root_type+0x60>
     cd4:	ldr	r0, [fp, #-8]
     cd8:	str	r0, [sp, #8]
     cdc:	ldr	r0, [fp, #-4]
     ce0:	ldr	r1, [sp, #12]
     ce4:	ldr	r2, [sp, #8]
     ce8:	ldr	r2, [r2, #124]	; 0x7c
     cec:	add	r1, r1, r2, lsl #2
     cf0:	ldr	r1, [r1]
     cf4:	bl	32b0 <reflection_Schema_root_table_add>
     cf8:	str	r0, [sp, #4]
     cfc:	b	d00 <export_root_type+0x64>
     d00:	mov	sp, fp
     d04:	pop	{fp, pc}

00000d08 <reflection_Schema_end_as_root>:
     d08:	push	{fp, lr}
     d0c:	mov	fp, sp
     d10:	sub	sp, sp, #16
     d14:	str	r0, [fp, #-4]
     d18:	ldr	r0, [fp, #-4]
     d1c:	ldr	r1, [fp, #-4]
     d20:	str	r0, [sp, #8]
     d24:	mov	r0, r1
     d28:	bl	3344 <reflection_Schema_end>
     d2c:	ldr	r1, [sp, #8]
     d30:	str	r0, [sp, #4]
     d34:	mov	r0, r1
     d38:	ldr	r1, [sp, #4]
     d3c:	bl	331c <flatbuffers_buffer_end>
     d40:	mov	sp, fp
     d44:	pop	{fp, pc}

00000d48 <count_symbols>:
     d48:	push	{fp, lr}
     d4c:	mov	fp, sp
     d50:	sub	sp, sp, #8
     d54:	str	r0, [sp, #4]
     d58:	str	r1, [sp]
     d5c:	ldr	r0, [sp]
     d60:	add	r0, r0, #4
     d64:	ldr	r2, [sp, #4]
     d68:	movw	r1, #0
     d6c:	movt	r1, #0
     d70:	bl	0 <fb_symbol_table_visit>
     d74:	mov	sp, fp
     d78:	pop	{fp, pc}

00000d7c <install_symbols>:
     d7c:	push	{fp, lr}
     d80:	mov	fp, sp
     d84:	sub	sp, sp, #8
     d88:	str	r0, [sp, #4]
     d8c:	str	r1, [sp]
     d90:	ldr	r0, [sp]
     d94:	add	r0, r0, #4
     d98:	ldr	r2, [sp, #4]
     d9c:	movw	r1, #0
     da0:	movt	r1, #0
     da4:	bl	0 <fb_symbol_table_visit>
     da8:	mov	sp, fp
     dac:	pop	{fp, pc}

00000db0 <sort_entries>:
     db0:	push	{fp, lr}
     db4:	mov	fp, sp
     db8:	sub	sp, sp, #16
     dbc:	str	r0, [fp, #-4]
     dc0:	str	r1, [sp, #8]
     dc4:	ldr	r0, [fp, #-4]
     dc8:	ldr	r1, [sp, #8]
     dcc:	movw	r2, #8
     dd0:	movw	r3, #0
     dd4:	movt	r3, #0
     dd8:	bl	0 <qsort>
     ddc:	movw	r0, #0
     de0:	str	r0, [sp, #4]
     de4:	ldr	r0, [sp, #4]
     de8:	ldr	r1, [sp, #8]
     dec:	cmp	r0, r1
     df0:	bge	e1c <sort_entries+0x6c>
     df4:	ldr	r0, [sp, #4]
     df8:	mov	r1, r0
     dfc:	ldr	r2, [fp, #-4]
     e00:	add	r0, r2, r0, lsl #3
     e04:	ldr	r0, [r0]
     e08:	str	r1, [r0, #124]	; 0x7c
     e0c:	ldr	r0, [sp, #4]
     e10:	add	r0, r0, #1
     e14:	str	r0, [sp, #4]
     e18:	b	de4 <sort_entries+0x34>
     e1c:	mov	sp, fp
     e20:	pop	{fp, pc}

00000e24 <count_symbol>:
     e24:	push	{fp, lr}
     e28:	mov	fp, sp
     e2c:	sub	sp, sp, #32
     e30:	str	r0, [fp, #-4]
     e34:	str	r1, [fp, #-8]
     e38:	ldr	r0, [fp, #-4]
     e3c:	str	r0, [fp, #-12]
     e40:	movw	r0, #0
     e44:	str	r0, [sp, #12]
     e48:	ldr	r0, [fp, #-12]
     e4c:	ldr	r0, [r0, #40]	; 0x28
     e50:	ldr	r1, [fp, #-8]
     e54:	bl	f5c <get_compound_if_visible>
     e58:	str	r0, [sp, #8]
     e5c:	movw	r1, #0
     e60:	cmp	r0, r1
     e64:	bne	e6c <count_symbol+0x48>
     e68:	b	f54 <count_symbol+0x130>
     e6c:	ldr	r0, [fp, #-12]
     e70:	ldr	r0, [r0]
     e74:	cmp	r0, #0
     e78:	beq	ecc <count_symbol+0xa8>
     e7c:	ldr	r0, [sp, #8]
     e80:	ldr	r0, [r0, #12]
     e84:	ldr	r0, [r0]
     e88:	str	r0, [sp, #16]
     e8c:	ldr	r0, [sp, #16]
     e90:	movw	r1, #0
     e94:	cmp	r0, r1
     e98:	beq	ec8 <count_symbol+0xa4>
     e9c:	ldr	r0, [sp, #16]
     ea0:	ldr	r0, [r0, #4]
     ea4:	ldr	r0, [r0, #4]
     ea8:	add	r0, r0, #1
     eac:	ldr	r1, [sp, #12]
     eb0:	add	r0, r1, r0
     eb4:	str	r0, [sp, #12]
     eb8:	ldr	r0, [sp, #16]
     ebc:	ldr	r0, [r0]
     ec0:	str	r0, [sp, #16]
     ec4:	b	e8c <count_symbol+0x68>
     ec8:	b	ecc <count_symbol+0xa8>
     ecc:	ldr	r0, [fp, #-8]
     ed0:	ldr	r0, [r0, #4]
     ed4:	ldr	r0, [r0, #4]
     ed8:	ldr	r1, [sp, #12]
     edc:	add	r0, r1, r0
     ee0:	add	r0, r0, #1
     ee4:	str	r0, [sp, #12]
     ee8:	ldr	r0, [sp, #12]
     eec:	ldr	r1, [fp, #-12]
     ef0:	ldr	r2, [r1, #12]
     ef4:	add	r0, r2, r0
     ef8:	str	r0, [r1, #12]
     efc:	ldr	r0, [fp, #-8]
     f00:	ldrh	r0, [r0, #8]
     f04:	cmp	r0, #2
     f08:	str	r0, [sp, #4]
     f0c:	bcc	f28 <count_symbol+0x104>
     f10:	b	f14 <count_symbol+0xf0>
     f14:	ldr	r0, [sp, #4]
     f18:	sub	r1, r0, #3
     f1c:	cmp	r1, #2
     f20:	bcc	f3c <count_symbol+0x118>
     f24:	b	f50 <count_symbol+0x12c>
     f28:	ldr	r0, [fp, #-12]
     f2c:	ldr	r1, [r0, #4]
     f30:	add	r1, r1, #1
     f34:	str	r1, [r0, #4]
     f38:	b	f54 <count_symbol+0x130>
     f3c:	ldr	r0, [fp, #-12]
     f40:	ldr	r1, [r0, #8]
     f44:	add	r1, r1, #1
     f48:	str	r1, [r0, #8]
     f4c:	b	f54 <count_symbol+0x130>
     f50:	b	f54 <count_symbol+0x130>
     f54:	mov	sp, fp
     f58:	pop	{fp, pc}

00000f5c <get_compound_if_visible>:
     f5c:	push	{fp, lr}
     f60:	mov	fp, sp
     f64:	sub	sp, sp, #16
     f68:	str	r0, [fp, #-4]
     f6c:	str	r1, [sp, #8]
     f70:	mov	r0, #0
     f74:	str	r0, [sp, #4]
     f78:	ldr	r0, [sp, #8]
     f7c:	ldrh	r0, [r0, #8]
     f80:	cmp	r0, #4
     f84:	bhi	fbc <get_compound_if_visible+0x60>
     f88:	b	f8c <get_compound_if_visible+0x30>
     f8c:	ldr	r0, [sp, #8]
     f90:	str	r0, [sp, #4]
     f94:	ldr	r0, [fp, #-4]
     f98:	add	r0, r0, #172	; 0xac
     f9c:	ldr	r1, [sp, #4]
     fa0:	ldr	r1, [r1, #16]
     fa4:	bl	fcc <ptr_set_exists>
     fa8:	cmp	r0, #0
     fac:	bne	fb8 <get_compound_if_visible+0x5c>
     fb0:	movw	r0, #0
     fb4:	str	r0, [sp, #4]
     fb8:	b	fc0 <get_compound_if_visible+0x64>
     fbc:	b	fc0 <get_compound_if_visible+0x64>
     fc0:	ldr	r0, [sp, #4]
     fc4:	mov	sp, fp
     fc8:	pop	{fp, pc}

00000fcc <ptr_set_exists>:
     fcc:	push	{fp, lr}
     fd0:	mov	fp, sp
     fd4:	sub	sp, sp, #8
     fd8:	str	r0, [sp, #4]
     fdc:	str	r1, [sp]
     fe0:	ldr	r0, [sp, #4]
     fe4:	ldr	r1, [sp]
     fe8:	bl	0 <ptr_set_find_item>
     fec:	movw	r1, #0
     ff0:	cmp	r0, r1
     ff4:	movw	r0, #0
     ff8:	movne	r0, #1
     ffc:	and	r0, r0, #1
    1000:	mov	sp, fp
    1004:	pop	{fp, pc}

00001008 <install_symbol>:
    1008:	push	{fp, lr}
    100c:	mov	fp, sp
    1010:	sub	sp, sp, #40	; 0x28
    1014:	str	r0, [fp, #-4]
    1018:	str	r1, [fp, #-8]
    101c:	ldr	r0, [fp, #-4]
    1020:	str	r0, [fp, #-12]
    1024:	movw	r0, #0
    1028:	str	r0, [sp, #20]
    102c:	ldr	r0, [fp, #-12]
    1030:	ldr	r0, [r0, #40]	; 0x28
    1034:	ldr	r1, [fp, #-8]
    1038:	bl	f5c <get_compound_if_visible>
    103c:	str	r0, [sp, #8]
    1040:	movw	r1, #0
    1044:	cmp	r0, r1
    1048:	bne	1050 <install_symbol+0x48>
    104c:	b	11e8 <install_symbol+0x1e0>
    1050:	ldr	r0, [fp, #-12]
    1054:	ldr	r0, [r0, #36]	; 0x24
    1058:	str	r0, [sp, #16]
    105c:	ldr	r0, [sp, #16]
    1060:	str	r0, [sp, #12]
    1064:	ldr	r0, [fp, #-12]
    1068:	ldr	r0, [r0]
    106c:	cmp	r0, #0
    1070:	beq	10f4 <install_symbol+0xec>
    1074:	ldr	r0, [sp, #8]
    1078:	ldr	r0, [r0, #12]
    107c:	ldr	r0, [r0]
    1080:	str	r0, [fp, #-16]
    1084:	ldr	r0, [fp, #-16]
    1088:	movw	r1, #0
    108c:	cmp	r0, r1
    1090:	beq	10f0 <install_symbol+0xe8>
    1094:	ldr	r0, [fp, #-16]
    1098:	ldr	r0, [r0, #4]
    109c:	ldr	r0, [r0, #4]
    10a0:	str	r0, [sp, #20]
    10a4:	ldr	r0, [sp, #16]
    10a8:	ldr	r1, [fp, #-16]
    10ac:	ldr	r1, [r1, #4]
    10b0:	ldr	r1, [r1]
    10b4:	ldr	r2, [sp, #20]
    10b8:	bl	0 <memcpy>
    10bc:	ldr	r0, [sp, #20]
    10c0:	ldr	r1, [sp, #16]
    10c4:	add	r0, r1, r0
    10c8:	str	r0, [sp, #16]
    10cc:	ldr	r0, [sp, #16]
    10d0:	add	r1, r0, #1
    10d4:	str	r1, [sp, #16]
    10d8:	movw	r1, #46	; 0x2e
    10dc:	strb	r1, [r0]
    10e0:	ldr	r0, [fp, #-16]
    10e4:	ldr	r0, [r0]
    10e8:	str	r0, [fp, #-16]
    10ec:	b	1084 <install_symbol+0x7c>
    10f0:	b	10f4 <install_symbol+0xec>
    10f4:	ldr	r0, [fp, #-8]
    10f8:	ldr	r0, [r0, #4]
    10fc:	ldr	r0, [r0, #4]
    1100:	str	r0, [sp, #20]
    1104:	ldr	r0, [sp, #16]
    1108:	ldr	r1, [fp, #-8]
    110c:	ldr	r1, [r1, #4]
    1110:	ldr	r1, [r1]
    1114:	ldr	r2, [sp, #20]
    1118:	bl	0 <memcpy>
    111c:	ldr	r1, [sp, #20]
    1120:	ldr	r2, [sp, #16]
    1124:	add	r1, r2, r1
    1128:	str	r1, [sp, #16]
    112c:	ldr	r1, [sp, #16]
    1130:	add	r2, r1, #1
    1134:	str	r2, [sp, #16]
    1138:	mov	r2, #0
    113c:	strb	r2, [r1]
    1140:	ldr	r1, [sp, #16]
    1144:	ldr	r2, [fp, #-12]
    1148:	str	r1, [r2, #36]	; 0x24
    114c:	ldr	r1, [fp, #-8]
    1150:	ldrh	r1, [r1, #8]
    1154:	cmp	r1, #2
    1158:	str	r0, [sp, #4]
    115c:	str	r1, [sp]
    1160:	bcc	117c <install_symbol+0x174>
    1164:	b	1168 <install_symbol+0x160>
    1168:	ldr	r0, [sp]
    116c:	sub	r1, r0, #3
    1170:	cmp	r1, #2
    1174:	bcc	11b0 <install_symbol+0x1a8>
    1178:	b	11e4 <install_symbol+0x1dc>
    117c:	ldr	r0, [fp, #-8]
    1180:	ldr	r1, [fp, #-12]
    1184:	ldr	r1, [r1, #28]
    1188:	str	r0, [r1]
    118c:	ldr	r0, [sp, #12]
    1190:	ldr	r1, [fp, #-12]
    1194:	ldr	r1, [r1, #28]
    1198:	str	r0, [r1, #4]
    119c:	ldr	r0, [fp, #-12]
    11a0:	ldr	r1, [r0, #28]
    11a4:	add	r1, r1, #8
    11a8:	str	r1, [r0, #28]
    11ac:	b	11e8 <install_symbol+0x1e0>
    11b0:	ldr	r0, [fp, #-8]
    11b4:	ldr	r1, [fp, #-12]
    11b8:	ldr	r1, [r1, #32]
    11bc:	str	r0, [r1]
    11c0:	ldr	r0, [sp, #12]
    11c4:	ldr	r1, [fp, #-12]
    11c8:	ldr	r1, [r1, #32]
    11cc:	str	r0, [r1, #4]
    11d0:	ldr	r0, [fp, #-12]
    11d4:	ldr	r1, [r0, #32]
    11d8:	add	r1, r1, #8
    11dc:	str	r1, [r0, #32]
    11e0:	b	11e8 <install_symbol+0x1e0>
    11e4:	b	11e8 <install_symbol+0x1e0>
    11e8:	mov	sp, fp
    11ec:	pop	{fp, pc}

000011f0 <compare_entries>:
    11f0:	push	{fp, lr}
    11f4:	mov	fp, sp
    11f8:	sub	sp, sp, #8
    11fc:	str	r0, [sp, #4]
    1200:	str	r1, [sp]
    1204:	ldr	r0, [sp, #4]
    1208:	ldr	r0, [r0, #4]
    120c:	ldr	r1, [sp]
    1210:	ldr	r1, [r1, #4]
    1214:	bl	0 <strcmp>
    1218:	mov	sp, fp
    121c:	pop	{fp, pc}

00001220 <flatbuffers_buffer_start_with_size>:
    1220:	push	{fp, lr}
    1224:	mov	fp, sp
    1228:	sub	sp, sp, #8
    122c:	str	r0, [sp, #4]
    1230:	str	r1, [sp]
    1234:	ldr	r0, [sp, #4]
    1238:	ldr	r1, [sp]
    123c:	movw	r2, #0
    1240:	uxth	r2, r2
    1244:	movw	r3, #2
    1248:	bl	0 <flatcc_builder_start_buffer>
    124c:	mov	sp, fp
    1250:	pop	{fp, pc}

00001254 <reflection_Schema_start>:
    1254:	push	{fp, lr}
    1258:	mov	fp, sp
    125c:	sub	sp, sp, #8
    1260:	str	r0, [sp, #4]
    1264:	ldr	r0, [sp, #4]
    1268:	movw	r1, #5
    126c:	bl	0 <flatcc_builder_start_table>
    1270:	mov	sp, fp
    1274:	pop	{fp, pc}

00001278 <flatbuffers_buffer_start>:
    1278:	push	{fp, lr}
    127c:	mov	fp, sp
    1280:	sub	sp, sp, #8
    1284:	str	r0, [sp, #4]
    1288:	str	r1, [sp]
    128c:	ldr	r0, [sp, #4]
    1290:	ldr	r1, [sp]
    1294:	movw	r2, #0
    1298:	uxth	r2, r2
    129c:	movw	r3, #0
    12a0:	bl	0 <flatcc_builder_start_buffer>
    12a4:	mov	sp, fp
    12a8:	pop	{fp, pc}

000012ac <reflection_Schema_file_ident_add>:
    12ac:	push	{fp, lr}
    12b0:	mov	fp, sp
    12b4:	sub	sp, sp, #16
    12b8:	str	r0, [fp, #-4]
    12bc:	str	r1, [sp, #8]
    12c0:	ldr	r0, [sp, #8]
    12c4:	cmp	r0, #0
    12c8:	beq	1300 <reflection_Schema_file_ident_add+0x54>
    12cc:	ldr	r0, [fp, #-4]
    12d0:	movw	r1, #2
    12d4:	bl	0 <flatcc_builder_table_add_offset>
    12d8:	str	r0, [sp, #4]
    12dc:	movw	r1, #0
    12e0:	cmp	r0, r1
    12e4:	beq	1300 <reflection_Schema_file_ident_add+0x54>
    12e8:	ldr	r0, [sp, #8]
    12ec:	ldr	r1, [sp, #4]
    12f0:	str	r0, [r1]
    12f4:	movw	r0, #0
    12f8:	str	r0, [sp]
    12fc:	b	130c <reflection_Schema_file_ident_add+0x60>
    1300:	mvn	r0, #0
    1304:	str	r0, [sp]
    1308:	b	130c <reflection_Schema_file_ident_add+0x60>
    130c:	ldr	r0, [sp]
    1310:	mov	sp, fp
    1314:	pop	{fp, pc}

00001318 <reflection_Schema_file_ext_add>:
    1318:	push	{fp, lr}
    131c:	mov	fp, sp
    1320:	sub	sp, sp, #16
    1324:	str	r0, [fp, #-4]
    1328:	str	r1, [sp, #8]
    132c:	ldr	r0, [sp, #8]
    1330:	cmp	r0, #0
    1334:	beq	136c <reflection_Schema_file_ext_add+0x54>
    1338:	ldr	r0, [fp, #-4]
    133c:	movw	r1, #3
    1340:	bl	0 <flatcc_builder_table_add_offset>
    1344:	str	r0, [sp, #4]
    1348:	movw	r1, #0
    134c:	cmp	r0, r1
    1350:	beq	136c <reflection_Schema_file_ext_add+0x54>
    1354:	ldr	r0, [sp, #8]
    1358:	ldr	r1, [sp, #4]
    135c:	str	r0, [r1]
    1360:	movw	r0, #0
    1364:	str	r0, [sp]
    1368:	b	1378 <reflection_Schema_file_ext_add+0x60>
    136c:	mvn	r0, #0
    1370:	str	r0, [sp]
    1374:	b	1378 <reflection_Schema_file_ext_add+0x60>
    1378:	ldr	r0, [sp]
    137c:	mov	sp, fp
    1380:	pop	{fp, pc}

00001384 <reflection_Object_start>:
    1384:	push	{fp, lr}
    1388:	mov	fp, sp
    138c:	sub	sp, sp, #8
    1390:	str	r0, [sp, #4]
    1394:	ldr	r0, [sp, #4]
    1398:	movw	r1, #5
    139c:	bl	0 <flatcc_builder_start_table>
    13a0:	mov	sp, fp
    13a4:	pop	{fp, pc}

000013a8 <reflection_Object_name_create_str>:
    13a8:	push	{fp, lr}
    13ac:	mov	fp, sp
    13b0:	sub	sp, sp, #16
    13b4:	str	r0, [fp, #-4]
    13b8:	str	r1, [sp, #8]
    13bc:	ldr	r0, [fp, #-4]
    13c0:	ldr	r1, [fp, #-4]
    13c4:	ldr	r2, [sp, #8]
    13c8:	str	r0, [sp, #4]
    13cc:	mov	r0, r1
    13d0:	mov	r1, r2
    13d4:	bl	0 <flatcc_builder_create_string_str>
    13d8:	ldr	r1, [sp, #4]
    13dc:	str	r0, [sp]
    13e0:	mov	r0, r1
    13e4:	ldr	r1, [sp]
    13e8:	bl	1ad8 <reflection_Object_name_add>
    13ec:	mov	sp, fp
    13f0:	pop	{fp, pc}

000013f4 <reflection_Object_fields_start>:
    13f4:	push	{fp, lr}
    13f8:	mov	fp, sp
    13fc:	sub	sp, sp, #8
    1400:	str	r0, [sp, #4]
    1404:	ldr	r0, [sp, #4]
    1408:	bl	0 <flatcc_builder_start_offset_vector>
    140c:	mov	sp, fp
    1410:	pop	{fp, pc}
    1414:	nop	{0}

00001418 <export_fields>:
    1418:	push	{r4, sl, fp, lr}
    141c:	add	fp, sp, #8
    1420:	sub	sp, sp, #168	; 0xa8
    1424:	str	r0, [fp, #-12]
    1428:	str	r1, [fp, #-16]
    142c:	movw	r0, #0
    1430:	strb	r0, [fp, #-28]	; 0xffffffe4
    1434:	ldr	r0, [fp, #-16]
    1438:	ldr	r0, [r0, #20]
    143c:	str	r0, [fp, #-20]	; 0xffffffec
    1440:	ldr	r0, [fp, #-20]	; 0xffffffec
    1444:	movw	r1, #0
    1448:	cmp	r0, r1
    144c:	beq	183c <export_fields+0x424>
    1450:	ldr	r0, [fp, #-20]	; 0xffffffec
    1454:	str	r0, [fp, #-24]	; 0xffffffe8
    1458:	ldrsb	r0, [fp, #-28]	; 0xffffffe4
    145c:	cmp	r0, #0
    1460:	movw	r0, #0
    1464:	str	r0, [fp, #-52]	; 0xffffffcc
    1468:	bne	1488 <export_fields+0x70>
    146c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1470:	ldrh	r0, [r0, #72]	; 0x48
    1474:	and	r0, r0, #128	; 0x80
    1478:	cmp	r0, #0
    147c:	movw	r0, #0
    1480:	movne	r0, #1
    1484:	str	r0, [fp, #-52]	; 0xffffffcc
    1488:	ldr	r0, [fp, #-52]	; 0xffffffcc
    148c:	vldr	d16, [pc, #948]	; 1848 <export_fields+0x430>
    1490:	and	r0, r0, #1
    1494:	strb	r0, [fp, #-25]	; 0xffffffe7
    1498:	ldr	r0, [fp, #-24]	; 0xffffffe8
    149c:	ldrh	r0, [r0, #72]	; 0x48
    14a0:	ubfx	r0, r0, #8, #1
    14a4:	strb	r0, [fp, #-27]	; 0xffffffe5
    14a8:	mov	r0, #0
    14ac:	str	r0, [fp, #-36]	; 0xffffffdc
    14b0:	str	r0, [fp, #-40]	; 0xffffffd8
    14b4:	vstr	d16, [fp, #-48]	; 0xffffffd0
    14b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14bc:	ldrh	r0, [r0, #72]	; 0x48
    14c0:	and	r0, r0, #4
    14c4:	cmp	r0, #0
    14c8:	movw	r0, #0
    14cc:	movne	r0, #1
    14d0:	and	r0, r0, #1
    14d4:	strb	r0, [fp, #-26]	; 0xffffffe6
    14d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14dc:	ldrh	r0, [r0, #24]
    14e0:	cmp	r0, #14
    14e4:	bne	1608 <export_fields+0x1f0>
    14e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14ec:	ldr	r0, [r0, #16]
    14f0:	ldrh	r0, [r0, #8]
    14f4:	cmp	r0, #4
    14f8:	bne	1608 <export_fields+0x1f0>
    14fc:	ldr	r0, [fp, #-12]
    1500:	bl	1b44 <reflection_Field_vec_push_start>
    1504:	ldr	lr, [fp, #-12]
    1508:	str	r0, [fp, #-56]	; 0xffffffc8
    150c:	mov	r0, lr
    1510:	bl	1b64 <reflection_Field_name_start>
    1514:	ldr	lr, [fp, #-12]
    1518:	ldr	r1, [fp, #-24]	; 0xffffffe8
    151c:	ldr	r1, [r1, #4]
    1520:	ldr	r2, [r1]
    1524:	ldr	r1, [r1, #4]
    1528:	str	r0, [fp, #-60]	; 0xffffffc4
    152c:	mov	r0, lr
    1530:	str	r1, [fp, #-64]	; 0xffffffc0
    1534:	mov	r1, r2
    1538:	ldr	r2, [fp, #-64]	; 0xffffffc0
    153c:	bl	1b84 <reflection_Field_name_append>
    1540:	ldr	r1, [fp, #-12]
    1544:	movw	r2, #0
    1548:	movt	r2, #0
    154c:	mov	lr, #5
    1550:	str	r0, [fp, #-68]	; 0xffffffbc
    1554:	mov	r0, r1
    1558:	mov	r1, r2
    155c:	mov	r2, lr
    1560:	bl	1b84 <reflection_Field_name_append>
    1564:	ldr	r1, [fp, #-12]
    1568:	str	r0, [fp, #-72]	; 0xffffffb8
    156c:	mov	r0, r1
    1570:	bl	1bb4 <reflection_Field_name_end>
    1574:	ldr	r1, [fp, #-12]
    1578:	mov	r2, #1
    157c:	mov	lr, #0
    1580:	mvn	r3, #0
    1584:	str	r0, [fp, #-76]	; 0xffffffb4
    1588:	mov	r0, r1
    158c:	mov	r1, r2
    1590:	mov	r2, lr
    1594:	bl	1bf4 <reflection_Field_type_create>
    1598:	ldr	r1, [fp, #-12]
    159c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15a0:	ldr	r2, [r2, #96]	; 0x60
    15a4:	mov	r3, #2
    15a8:	add	r2, r3, r2, lsl #1
    15ac:	uxth	r2, r2
    15b0:	str	r0, [fp, #-80]	; 0xffffffb0
    15b4:	mov	r0, r1
    15b8:	mov	r1, r2
    15bc:	bl	1c58 <reflection_Field_offset_add>
    15c0:	ldr	r1, [fp, #-12]
    15c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    15c8:	ldr	r2, [r2, #96]	; 0x60
    15cc:	sub	r2, r2, #1
    15d0:	str	r0, [fp, #-84]	; 0xffffffac
    15d4:	mov	r0, r1
    15d8:	uxth	r1, r2
    15dc:	bl	1cdc <reflection_Field_id_add>
    15e0:	ldr	r1, [fp, #-12]
    15e4:	str	r0, [sp, #88]	; 0x58
    15e8:	mov	r0, r1
    15ec:	ldrb	r1, [fp, #-26]	; 0xffffffe6
    15f0:	bl	1d64 <reflection_Field_deprecated_add>
    15f4:	ldr	r1, [fp, #-12]
    15f8:	str	r0, [sp, #84]	; 0x54
    15fc:	mov	r0, r1
    1600:	bl	1de8 <reflection_Field_vec_push_end>
    1604:	str	r0, [sp, #80]	; 0x50
    1608:	ldr	r0, [fp, #-12]
    160c:	bl	1b44 <reflection_Field_vec_push_start>
    1610:	ldr	lr, [fp, #-12]
    1614:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1618:	ldr	r1, [r1, #4]
    161c:	ldr	r2, [r1]
    1620:	ldr	r1, [r1, #4]
    1624:	str	r0, [sp, #76]	; 0x4c
    1628:	mov	r0, lr
    162c:	str	r1, [sp, #72]	; 0x48
    1630:	mov	r1, r2
    1634:	ldr	r2, [sp, #72]	; 0x48
    1638:	bl	1e28 <reflection_Field_name_create>
    163c:	ldr	r1, [fp, #-12]
    1640:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1644:	ldr	lr, [r2, #16]
    1648:	ldr	r3, [r2, #20]
    164c:	ldr	ip, [r2, #24]
    1650:	ldr	r2, [r2, #28]
    1654:	mov	r4, sp
    1658:	str	r2, [r4, #4]
    165c:	str	ip, [r4]
    1660:	str	r0, [sp, #68]	; 0x44
    1664:	mov	r0, r1
    1668:	mov	r2, lr
    166c:	str	r1, [sp, #64]	; 0x40
    1670:	bl	1eec <export_type>
    1674:	ldr	r1, [sp, #64]	; 0x40
    1678:	str	r0, [sp, #60]	; 0x3c
    167c:	mov	r0, r1
    1680:	ldr	r1, [sp, #60]	; 0x3c
    1684:	bl	1e80 <reflection_Field_type_add>
    1688:	ldr	r1, [fp, #-16]
    168c:	ldrh	r1, [r1, #8]
    1690:	cmp	r1, #0
    1694:	str	r0, [sp, #56]	; 0x38
    1698:	str	r1, [sp, #52]	; 0x34
    169c:	beq	16b4 <export_fields+0x29c>
    16a0:	b	16a4 <export_fields+0x28c>
    16a4:	ldr	r0, [sp, #52]	; 0x34
    16a8:	cmp	r0, #1
    16ac:	beq	17dc <export_fields+0x3c4>
    16b0:	b	17f8 <export_fields+0x3e0>
    16b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16b8:	ldrh	r0, [r0, #56]	; 0x38
    16bc:	sub	r0, r0, #3
    16c0:	cmp	r0, #3
    16c4:	str	r0, [sp, #48]	; 0x30
    16c8:	bhi	1740 <export_fields+0x328>
    16cc:	add	r0, pc, #8
    16d0:	ldr	r1, [sp, #48]	; 0x30
    16d4:	ldr	r0, [r0, r1, lsl #2]
    16d8:	mov	pc, r0
    16dc:	.word	0x00001734
    16e0:	.word	0x00001704
    16e4:	.word	0x000016ec
    16e8:	.word	0x0000171c
    16ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    16f0:	ldr	r1, [r0, #48]	; 0x30
    16f4:	ldr	r0, [r0, #52]	; 0x34
    16f8:	str	r0, [fp, #-36]	; 0xffffffdc
    16fc:	str	r1, [fp, #-40]	; 0xffffffd8
    1700:	b	1740 <export_fields+0x328>
    1704:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1708:	ldr	r1, [r0, #48]	; 0x30
    170c:	ldr	r0, [r0, #52]	; 0x34
    1710:	str	r0, [fp, #-36]	; 0xffffffdc
    1714:	str	r1, [fp, #-40]	; 0xffffffd8
    1718:	b	1740 <export_fields+0x328>
    171c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1720:	ldrb	r0, [r0, #48]	; 0x30
    1724:	mov	r1, #0
    1728:	str	r1, [fp, #-36]	; 0xffffffdc
    172c:	str	r0, [fp, #-40]	; 0xffffffd8
    1730:	b	1740 <export_fields+0x328>
    1734:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1738:	vldr	d16, [r0, #48]	; 0x30
    173c:	vstr	d16, [fp, #-48]	; 0xffffffd0
    1740:	ldr	r0, [fp, #-12]
    1744:	ldr	r2, [fp, #-40]	; 0xffffffd8
    1748:	ldr	r3, [fp, #-36]	; 0xffffffdc
    174c:	bl	21f0 <reflection_Field_default_integer_add>
    1750:	ldr	r2, [fp, #-12]
    1754:	vldr	d0, [fp, #-48]	; 0xffffffd0
    1758:	str	r0, [sp, #44]	; 0x2c
    175c:	mov	r0, r2
    1760:	bl	2288 <reflection_Field_default_real_add>
    1764:	ldr	r2, [fp, #-12]
    1768:	ldr	r3, [fp, #-24]	; 0xffffffe8
    176c:	ldrh	r1, [r3, #96]	; 0x60
    1770:	str	r0, [sp, #40]	; 0x28
    1774:	mov	r0, r2
    1778:	bl	1cdc <reflection_Field_id_add>
    177c:	ldr	r1, [fp, #-12]
    1780:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1784:	ldr	r2, [r2, #96]	; 0x60
    1788:	add	r2, r2, #2
    178c:	uxth	r2, r2
    1790:	mov	r3, r2
    1794:	lsl	r2, r2, #1
    1798:	str	r0, [sp, #36]	; 0x24
    179c:	mov	r0, r1
    17a0:	uxth	r1, r2
    17a4:	str	r3, [sp, #32]
    17a8:	bl	1c58 <reflection_Field_offset_add>
    17ac:	ldr	r1, [fp, #-12]
    17b0:	str	r0, [sp, #28]
    17b4:	mov	r0, r1
    17b8:	ldrb	r1, [fp, #-25]	; 0xffffffe7
    17bc:	bl	2310 <reflection_Field_key_add>
    17c0:	ldr	r1, [fp, #-12]
    17c4:	str	r0, [sp, #24]
    17c8:	mov	r0, r1
    17cc:	ldrb	r1, [fp, #-27]	; 0xffffffe5
    17d0:	bl	2394 <reflection_Field_required_add>
    17d4:	str	r0, [sp, #20]
    17d8:	b	17fc <export_fields+0x3e4>
    17dc:	ldr	r0, [fp, #-12]
    17e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    17e4:	ldrh	r1, [r1, #80]	; 0x50
    17e8:	uxth	r1, r1
    17ec:	bl	1c58 <reflection_Field_offset_add>
    17f0:	str	r0, [sp, #16]
    17f4:	b	17fc <export_fields+0x3e4>
    17f8:	b	17fc <export_fields+0x3e4>
    17fc:	ldr	r0, [fp, #-12]
    1800:	ldrb	r1, [fp, #-26]	; 0xffffffe6
    1804:	bl	1d64 <reflection_Field_deprecated_add>
    1808:	ldr	r1, [fp, #-12]
    180c:	str	r0, [sp, #12]
    1810:	mov	r0, r1
    1814:	bl	1de8 <reflection_Field_vec_push_end>
    1818:	ldrb	r1, [fp, #-25]	; 0xffffffe7
    181c:	ldrb	lr, [fp, #-28]	; 0xffffffe4
    1820:	orr	r1, lr, r1
    1824:	strb	r1, [fp, #-28]	; 0xffffffe4
    1828:	str	r0, [sp, #8]
    182c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1830:	ldr	r0, [r0]
    1834:	str	r0, [fp, #-20]	; 0xffffffec
    1838:	b	1440 <export_fields+0x28>
    183c:	sub	sp, fp, #8
    1840:	pop	{r4, sl, fp, pc}
    1844:	nop	{0}
	...

00001850 <reflection_Object_fields_end>:
    1850:	push	{fp, lr}
    1854:	mov	fp, sp
    1858:	sub	sp, sp, #16
    185c:	str	r0, [fp, #-4]
    1860:	ldr	r0, [fp, #-4]
    1864:	ldr	r1, [fp, #-4]
    1868:	str	r0, [sp, #8]
    186c:	mov	r0, r1
    1870:	bl	0 <flatcc_builder_end_offset_vector>
    1874:	ldr	r1, [sp, #8]
    1878:	str	r0, [sp, #4]
    187c:	mov	r0, r1
    1880:	ldr	r1, [sp, #4]
    1884:	bl	29a8 <reflection_Object_fields_add>
    1888:	mov	sp, fp
    188c:	pop	{fp, pc}

00001890 <reflection_Object_bytesize_add>:
    1890:	push	{fp, lr}
    1894:	mov	fp, sp
    1898:	sub	sp, sp, #24
    189c:	str	r0, [fp, #-8]
    18a0:	str	r1, [sp, #12]
    18a4:	ldr	r0, [sp, #12]
    18a8:	cmp	r0, #0
    18ac:	bne	18bc <reflection_Object_bytesize_add+0x2c>
    18b0:	movw	r0, #0
    18b4:	str	r0, [fp, #-4]
    18b8:	b	190c <reflection_Object_bytesize_add+0x7c>
    18bc:	ldr	r0, [fp, #-8]
    18c0:	movw	r1, #4
    18c4:	str	r1, [sp, #4]
    18c8:	ldr	r2, [sp, #4]
    18cc:	movw	r3, #4
    18d0:	uxth	r3, r3
    18d4:	bl	0 <flatcc_builder_table_add>
    18d8:	str	r0, [sp, #8]
    18dc:	movw	r1, #0
    18e0:	cmp	r0, r1
    18e4:	bne	18f4 <reflection_Object_bytesize_add+0x64>
    18e8:	mvn	r0, #0
    18ec:	str	r0, [fp, #-4]
    18f0:	b	190c <reflection_Object_bytesize_add+0x7c>
    18f4:	ldr	r0, [sp, #8]
    18f8:	ldr	r1, [sp, #12]
    18fc:	bl	2748 <flatbuffers_int32_assign_to_pe>
    1900:	movw	r1, #0
    1904:	str	r1, [fp, #-4]
    1908:	str	r0, [sp]
    190c:	ldr	r0, [fp, #-4]
    1910:	mov	sp, fp
    1914:	pop	{fp, pc}

00001918 <reflection_Object_is_struct_add>:
    1918:	push	{fp, lr}
    191c:	mov	fp, sp
    1920:	sub	sp, sp, #24
    1924:	str	r0, [fp, #-8]
    1928:	strb	r1, [fp, #-9]
    192c:	ldrb	r0, [fp, #-9]
    1930:	cmp	r0, #0
    1934:	bne	1944 <reflection_Object_is_struct_add+0x2c>
    1938:	movw	r0, #0
    193c:	str	r0, [fp, #-4]
    1940:	b	1990 <reflection_Object_is_struct_add+0x78>
    1944:	ldr	r0, [fp, #-8]
    1948:	movw	r1, #2
    194c:	movw	r2, #1
    1950:	movw	r3, #1
    1954:	uxth	r3, r3
    1958:	bl	0 <flatcc_builder_table_add>
    195c:	str	r0, [sp, #8]
    1960:	movw	r1, #0
    1964:	cmp	r0, r1
    1968:	bne	1978 <reflection_Object_is_struct_add+0x60>
    196c:	mvn	r0, #0
    1970:	str	r0, [fp, #-4]
    1974:	b	1990 <reflection_Object_is_struct_add+0x78>
    1978:	ldr	r0, [sp, #8]
    197c:	ldrb	r1, [fp, #-9]
    1980:	bl	2814 <flatbuffers_bool_assign_to_pe>
    1984:	movw	r1, #0
    1988:	str	r1, [fp, #-4]
    198c:	str	r0, [sp, #4]
    1990:	ldr	r0, [fp, #-4]
    1994:	mov	sp, fp
    1998:	pop	{fp, pc}

0000199c <reflection_Object_minalign_add>:
    199c:	push	{fp, lr}
    19a0:	mov	fp, sp
    19a4:	sub	sp, sp, #24
    19a8:	str	r0, [fp, #-8]
    19ac:	str	r1, [sp, #12]
    19b0:	ldr	r0, [sp, #12]
    19b4:	cmp	r0, #0
    19b8:	bne	19c8 <reflection_Object_minalign_add+0x2c>
    19bc:	movw	r0, #0
    19c0:	str	r0, [fp, #-4]
    19c4:	b	1a14 <reflection_Object_minalign_add+0x78>
    19c8:	ldr	r0, [fp, #-8]
    19cc:	movw	r1, #3
    19d0:	movw	r2, #4
    19d4:	movw	r3, #4
    19d8:	uxth	r3, r3
    19dc:	bl	0 <flatcc_builder_table_add>
    19e0:	str	r0, [sp, #8]
    19e4:	movw	r1, #0
    19e8:	cmp	r0, r1
    19ec:	bne	19fc <reflection_Object_minalign_add+0x60>
    19f0:	mvn	r0, #0
    19f4:	str	r0, [fp, #-4]
    19f8:	b	1a14 <reflection_Object_minalign_add+0x78>
    19fc:	ldr	r0, [sp, #8]
    1a00:	ldr	r1, [sp, #12]
    1a04:	bl	2748 <flatbuffers_int32_assign_to_pe>
    1a08:	movw	r1, #0
    1a0c:	str	r1, [fp, #-4]
    1a10:	str	r0, [sp, #4]
    1a14:	ldr	r0, [fp, #-4]
    1a18:	mov	sp, fp
    1a1c:	pop	{fp, pc}

00001a20 <reflection_Object_end>:
    1a20:	push	{fp, lr}
    1a24:	mov	fp, sp
    1a28:	sub	sp, sp, #8
    1a2c:	str	r0, [sp, #4]
    1a30:	ldr	r0, [sp, #4]
    1a34:	movw	r1, #0
    1a38:	movt	r1, #0
    1a3c:	movw	r2, #2
    1a40:	bl	0 <flatcc_builder_check_required>
    1a44:	cmp	r0, #0
    1a48:	beq	1a50 <reflection_Object_end+0x30>
    1a4c:	b	1a70 <reflection_Object_end+0x50>
    1a50:	movw	r0, #0
    1a54:	movt	r0, #0
    1a58:	movw	r1, #0
    1a5c:	movt	r1, #0
    1a60:	movw	r2, #31
    1a64:	movw	r3, #0
    1a68:	movt	r3, #0
    1a6c:	bl	0 <__assert_fail>
    1a70:	ldr	r0, [sp, #4]
    1a74:	bl	0 <flatcc_builder_end_table>
    1a78:	mov	sp, fp
    1a7c:	pop	{fp, pc}

00001a80 <reflection_Schema_objects_create>:
    1a80:	push	{fp, lr}
    1a84:	mov	fp, sp
    1a88:	sub	sp, sp, #24
    1a8c:	str	r0, [fp, #-4]
    1a90:	str	r1, [fp, #-8]
    1a94:	str	r2, [sp, #12]
    1a98:	ldr	r0, [fp, #-4]
    1a9c:	ldr	r1, [fp, #-4]
    1aa0:	ldr	r2, [fp, #-8]
    1aa4:	ldr	r3, [sp, #12]
    1aa8:	str	r0, [sp, #8]
    1aac:	mov	r0, r1
    1ab0:	mov	r1, r2
    1ab4:	mov	r2, r3
    1ab8:	bl	0 <flatcc_builder_create_offset_vector>
    1abc:	ldr	r1, [sp, #8]
    1ac0:	str	r0, [sp, #4]
    1ac4:	mov	r0, r1
    1ac8:	ldr	r1, [sp, #4]
    1acc:	bl	2a14 <reflection_Schema_objects_add>
    1ad0:	mov	sp, fp
    1ad4:	pop	{fp, pc}

00001ad8 <reflection_Object_name_add>:
    1ad8:	push	{fp, lr}
    1adc:	mov	fp, sp
    1ae0:	sub	sp, sp, #16
    1ae4:	str	r0, [fp, #-4]
    1ae8:	str	r1, [sp, #8]
    1aec:	ldr	r0, [sp, #8]
    1af0:	cmp	r0, #0
    1af4:	beq	1b2c <reflection_Object_name_add+0x54>
    1af8:	ldr	r0, [fp, #-4]
    1afc:	movw	r1, #0
    1b00:	bl	0 <flatcc_builder_table_add_offset>
    1b04:	str	r0, [sp, #4]
    1b08:	movw	r1, #0
    1b0c:	cmp	r0, r1
    1b10:	beq	1b2c <reflection_Object_name_add+0x54>
    1b14:	ldr	r0, [sp, #8]
    1b18:	ldr	r1, [sp, #4]
    1b1c:	str	r0, [r1]
    1b20:	movw	r0, #0
    1b24:	str	r0, [sp]
    1b28:	b	1b38 <reflection_Object_name_add+0x60>
    1b2c:	mvn	r0, #0
    1b30:	str	r0, [sp]
    1b34:	b	1b38 <reflection_Object_name_add+0x60>
    1b38:	ldr	r0, [sp]
    1b3c:	mov	sp, fp
    1b40:	pop	{fp, pc}

00001b44 <reflection_Field_vec_push_start>:
    1b44:	push	{fp, lr}
    1b48:	mov	fp, sp
    1b4c:	sub	sp, sp, #8
    1b50:	str	r0, [sp, #4]
    1b54:	ldr	r0, [sp, #4]
    1b58:	bl	2418 <reflection_Field_start>
    1b5c:	mov	sp, fp
    1b60:	pop	{fp, pc}

00001b64 <reflection_Field_name_start>:
    1b64:	push	{fp, lr}
    1b68:	mov	fp, sp
    1b6c:	sub	sp, sp, #8
    1b70:	str	r0, [sp, #4]
    1b74:	ldr	r0, [sp, #4]
    1b78:	bl	0 <flatcc_builder_start_string>
    1b7c:	mov	sp, fp
    1b80:	pop	{fp, pc}

00001b84 <reflection_Field_name_append>:
    1b84:	push	{fp, lr}
    1b88:	mov	fp, sp
    1b8c:	sub	sp, sp, #16
    1b90:	str	r0, [fp, #-4]
    1b94:	str	r1, [sp, #8]
    1b98:	str	r2, [sp, #4]
    1b9c:	ldr	r0, [fp, #-4]
    1ba0:	ldr	r1, [sp, #8]
    1ba4:	ldr	r2, [sp, #4]
    1ba8:	bl	0 <flatcc_builder_append_string>
    1bac:	mov	sp, fp
    1bb0:	pop	{fp, pc}

00001bb4 <reflection_Field_name_end>:
    1bb4:	push	{fp, lr}
    1bb8:	mov	fp, sp
    1bbc:	sub	sp, sp, #16
    1bc0:	str	r0, [fp, #-4]
    1bc4:	ldr	r0, [fp, #-4]
    1bc8:	ldr	r1, [fp, #-4]
    1bcc:	str	r0, [sp, #8]
    1bd0:	mov	r0, r1
    1bd4:	bl	0 <flatcc_builder_end_string>
    1bd8:	ldr	r1, [sp, #8]
    1bdc:	str	r0, [sp, #4]
    1be0:	mov	r0, r1
    1be4:	ldr	r1, [sp, #4]
    1be8:	bl	243c <reflection_Field_name_add>
    1bec:	mov	sp, fp
    1bf0:	pop	{fp, pc}

00001bf4 <reflection_Field_type_create>:
    1bf4:	push	{fp, lr}
    1bf8:	mov	fp, sp
    1bfc:	sub	sp, sp, #24
    1c00:	str	r0, [fp, #-4]
    1c04:	strb	r1, [fp, #-5]
    1c08:	strb	r2, [fp, #-6]
    1c0c:	str	r3, [sp, #12]
    1c10:	ldr	r0, [fp, #-4]
    1c14:	ldr	r1, [fp, #-4]
    1c18:	ldrb	r2, [fp, #-5]
    1c1c:	ldrb	r3, [fp, #-6]
    1c20:	ldr	ip, [sp, #12]
    1c24:	str	r0, [sp, #8]
    1c28:	mov	r0, r1
    1c2c:	sxtb	r1, r2
    1c30:	sxtb	r2, r3
    1c34:	mov	r3, ip
    1c38:	bl	24a8 <reflection_Type_create>
    1c3c:	ldr	r1, [sp, #8]
    1c40:	str	r0, [sp, #4]
    1c44:	mov	r0, r1
    1c48:	ldr	r1, [sp, #4]
    1c4c:	bl	1e80 <reflection_Field_type_add>
    1c50:	mov	sp, fp
    1c54:	pop	{fp, pc}

00001c58 <reflection_Field_offset_add>:
    1c58:	push	{fp, lr}
    1c5c:	mov	fp, sp
    1c60:	sub	sp, sp, #24
    1c64:	str	r0, [fp, #-8]
    1c68:	strh	r1, [fp, #-10]
    1c6c:	ldrh	r0, [fp, #-10]
    1c70:	cmp	r0, #0
    1c74:	bne	1c84 <reflection_Field_offset_add+0x2c>
    1c78:	movw	r0, #0
    1c7c:	str	r0, [fp, #-4]
    1c80:	b	1cd0 <reflection_Field_offset_add+0x78>
    1c84:	ldr	r0, [fp, #-8]
    1c88:	movw	r1, #3
    1c8c:	movw	r2, #2
    1c90:	movw	r3, #2
    1c94:	uxth	r3, r3
    1c98:	bl	0 <flatcc_builder_table_add>
    1c9c:	str	r0, [sp, #8]
    1ca0:	movw	r1, #0
    1ca4:	cmp	r0, r1
    1ca8:	bne	1cb8 <reflection_Field_offset_add+0x60>
    1cac:	mvn	r0, #0
    1cb0:	str	r0, [fp, #-4]
    1cb4:	b	1cd0 <reflection_Field_offset_add+0x78>
    1cb8:	ldr	r0, [sp, #8]
    1cbc:	ldrh	r1, [fp, #-10]
    1cc0:	bl	27d0 <flatbuffers_uint16_assign_to_pe>
    1cc4:	movw	r1, #0
    1cc8:	str	r1, [fp, #-4]
    1ccc:	str	r0, [sp, #4]
    1cd0:	ldr	r0, [fp, #-4]
    1cd4:	mov	sp, fp
    1cd8:	pop	{fp, pc}

00001cdc <reflection_Field_id_add>:
    1cdc:	push	{fp, lr}
    1ce0:	mov	fp, sp
    1ce4:	sub	sp, sp, #24
    1ce8:	str	r0, [fp, #-8]
    1cec:	strh	r1, [fp, #-10]
    1cf0:	ldrh	r0, [fp, #-10]
    1cf4:	cmp	r0, #0
    1cf8:	bne	1d08 <reflection_Field_id_add+0x2c>
    1cfc:	movw	r0, #0
    1d00:	str	r0, [fp, #-4]
    1d04:	b	1d58 <reflection_Field_id_add+0x7c>
    1d08:	ldr	r0, [fp, #-8]
    1d0c:	movw	r1, #2
    1d10:	str	r1, [sp, #4]
    1d14:	ldr	r2, [sp, #4]
    1d18:	movw	r3, #2
    1d1c:	uxth	r3, r3
    1d20:	bl	0 <flatcc_builder_table_add>
    1d24:	str	r0, [sp, #8]
    1d28:	movw	r1, #0
    1d2c:	cmp	r0, r1
    1d30:	bne	1d40 <reflection_Field_id_add+0x64>
    1d34:	mvn	r0, #0
    1d38:	str	r0, [fp, #-4]
    1d3c:	b	1d58 <reflection_Field_id_add+0x7c>
    1d40:	ldr	r0, [sp, #8]
    1d44:	ldrh	r1, [fp, #-10]
    1d48:	bl	27d0 <flatbuffers_uint16_assign_to_pe>
    1d4c:	movw	r1, #0
    1d50:	str	r1, [fp, #-4]
    1d54:	str	r0, [sp]
    1d58:	ldr	r0, [fp, #-4]
    1d5c:	mov	sp, fp
    1d60:	pop	{fp, pc}

00001d64 <reflection_Field_deprecated_add>:
    1d64:	push	{fp, lr}
    1d68:	mov	fp, sp
    1d6c:	sub	sp, sp, #24
    1d70:	str	r0, [fp, #-8]
    1d74:	strb	r1, [fp, #-9]
    1d78:	ldrb	r0, [fp, #-9]
    1d7c:	cmp	r0, #0
    1d80:	bne	1d90 <reflection_Field_deprecated_add+0x2c>
    1d84:	movw	r0, #0
    1d88:	str	r0, [fp, #-4]
    1d8c:	b	1ddc <reflection_Field_deprecated_add+0x78>
    1d90:	ldr	r0, [fp, #-8]
    1d94:	movw	r1, #6
    1d98:	movw	r2, #1
    1d9c:	movw	r3, #1
    1da0:	uxth	r3, r3
    1da4:	bl	0 <flatcc_builder_table_add>
    1da8:	str	r0, [sp, #8]
    1dac:	movw	r1, #0
    1db0:	cmp	r0, r1
    1db4:	bne	1dc4 <reflection_Field_deprecated_add+0x60>
    1db8:	mvn	r0, #0
    1dbc:	str	r0, [fp, #-4]
    1dc0:	b	1ddc <reflection_Field_deprecated_add+0x78>
    1dc4:	ldr	r0, [sp, #8]
    1dc8:	ldrb	r1, [fp, #-9]
    1dcc:	bl	2814 <flatbuffers_bool_assign_to_pe>
    1dd0:	movw	r1, #0
    1dd4:	str	r1, [fp, #-4]
    1dd8:	str	r0, [sp, #4]
    1ddc:	ldr	r0, [fp, #-4]
    1de0:	mov	sp, fp
    1de4:	pop	{fp, pc}

00001de8 <reflection_Field_vec_push_end>:
    1de8:	push	{fp, lr}
    1dec:	mov	fp, sp
    1df0:	sub	sp, sp, #16
    1df4:	str	r0, [fp, #-4]
    1df8:	ldr	r0, [fp, #-4]
    1dfc:	ldr	r1, [fp, #-4]
    1e00:	str	r0, [sp, #8]
    1e04:	mov	r0, r1
    1e08:	bl	28a4 <reflection_Field_end>
    1e0c:	ldr	r1, [sp, #8]
    1e10:	str	r0, [sp, #4]
    1e14:	mov	r0, r1
    1e18:	ldr	r1, [sp, #4]
    1e1c:	bl	2858 <reflection_Field_vec_push>
    1e20:	mov	sp, fp
    1e24:	pop	{fp, pc}

00001e28 <reflection_Field_name_create>:
    1e28:	push	{fp, lr}
    1e2c:	mov	fp, sp
    1e30:	sub	sp, sp, #24
    1e34:	str	r0, [fp, #-4]
    1e38:	str	r1, [fp, #-8]
    1e3c:	str	r2, [sp, #12]
    1e40:	ldr	r0, [fp, #-4]
    1e44:	ldr	r1, [fp, #-4]
    1e48:	ldr	r2, [fp, #-8]
    1e4c:	ldr	r3, [sp, #12]
    1e50:	str	r0, [sp, #8]
    1e54:	mov	r0, r1
    1e58:	mov	r1, r2
    1e5c:	mov	r2, r3
    1e60:	bl	0 <flatcc_builder_create_string>
    1e64:	ldr	r1, [sp, #8]
    1e68:	str	r0, [sp, #4]
    1e6c:	mov	r0, r1
    1e70:	ldr	r1, [sp, #4]
    1e74:	bl	243c <reflection_Field_name_add>
    1e78:	mov	sp, fp
    1e7c:	pop	{fp, pc}

00001e80 <reflection_Field_type_add>:
    1e80:	push	{fp, lr}
    1e84:	mov	fp, sp
    1e88:	sub	sp, sp, #16
    1e8c:	str	r0, [fp, #-4]
    1e90:	str	r1, [sp, #8]
    1e94:	ldr	r0, [sp, #8]
    1e98:	cmp	r0, #0
    1e9c:	beq	1ed4 <reflection_Field_type_add+0x54>
    1ea0:	ldr	r0, [fp, #-4]
    1ea4:	movw	r1, #1
    1ea8:	bl	0 <flatcc_builder_table_add_offset>
    1eac:	str	r0, [sp, #4]
    1eb0:	movw	r1, #0
    1eb4:	cmp	r0, r1
    1eb8:	beq	1ed4 <reflection_Field_type_add+0x54>
    1ebc:	ldr	r0, [sp, #8]
    1ec0:	ldr	r1, [sp, #4]
    1ec4:	str	r0, [r1]
    1ec8:	movw	r0, #0
    1ecc:	str	r0, [sp]
    1ed0:	b	1ee0 <reflection_Field_type_add+0x60>
    1ed4:	mvn	r0, #0
    1ed8:	str	r0, [sp]
    1edc:	b	1ee0 <reflection_Field_type_add+0x60>
    1ee0:	ldr	r0, [sp]
    1ee4:	mov	sp, fp
    1ee8:	pop	{fp, pc}

00001eec <export_type>:
    1eec:	push	{fp, lr}
    1ef0:	mov	fp, sp
    1ef4:	sub	sp, sp, #48	; 0x30
    1ef8:	ldr	r1, [fp, #12]
    1efc:	ldr	ip, [fp, #8]
    1f00:	str	r2, [fp, #-16]
    1f04:	str	r3, [fp, #-12]
    1f08:	str	ip, [fp, #-8]
    1f0c:	str	r1, [fp, #-4]
    1f10:	str	r0, [fp, #-20]	; 0xffffffec
    1f14:	mov	r0, #0
    1f18:	str	r0, [sp, #24]
    1f1c:	mvn	r1, #0
    1f20:	str	r1, [sp, #20]
    1f24:	strb	r0, [sp, #19]
    1f28:	strb	r0, [sp, #18]
    1f2c:	strb	r0, [sp, #17]
    1f30:	ldrh	r0, [fp, #-8]
    1f34:	sub	r0, r0, #2
    1f38:	cmp	r0, #13
    1f3c:	str	r0, [sp, #12]
    1f40:	bhi	20ac <export_type+0x1c0>
    1f44:	add	r0, pc, #8
    1f48:	ldr	r1, [sp, #12]
    1f4c:	ldr	r0, [r0, r1, lsl #2]
    1f50:	mov	pc, r0
    1f54:	.word	0x00002028
    1f58:	.word	0x000020ac
    1f5c:	.word	0x000020ac
    1f60:	.word	0x000020ac
    1f64:	.word	0x000020ac
    1f68:	.word	0x00001f98
    1f6c:	.word	0x00001f8c
    1f70:	.word	0x00001fac
    1f74:	.word	0x000020ac
    1f78:	.word	0x000020ac
    1f7c:	.word	0x000020ac
    1f80:	.word	0x000020ac
    1f84:	.word	0x00002034
    1f88:	.word	0x00001fc0
    1f8c:	ldr	r0, [fp, #-16]
    1f90:	str	r0, [sp, #24]
    1f94:	b	20b0 <export_type+0x1c4>
    1f98:	ldr	r0, [fp, #-16]
    1f9c:	str	r0, [sp, #24]
    1fa0:	movw	r0, #14
    1fa4:	strb	r0, [sp, #19]
    1fa8:	b	20b0 <export_type+0x1c4>
    1fac:	movw	r0, #13
    1fb0:	strb	r0, [sp, #18]
    1fb4:	movw	r0, #14
    1fb8:	strb	r0, [sp, #19]
    1fbc:	b	20b0 <export_type+0x1c4>
    1fc0:	ldr	r0, [fp, #-16]
    1fc4:	ldr	r0, [r0, #124]	; 0x7c
    1fc8:	str	r0, [sp, #20]
    1fcc:	ldr	r0, [fp, #-16]
    1fd0:	ldrh	r0, [r0, #8]
    1fd4:	cmp	r0, #2
    1fd8:	str	r0, [sp, #8]
    1fdc:	bcc	200c <export_type+0x120>
    1fe0:	b	1fe4 <export_type+0xf8>
    1fe4:	ldr	r0, [sp, #8]
    1fe8:	cmp	r0, #3
    1fec:	bne	2020 <export_type+0x134>
    1ff0:	b	1ff4 <export_type+0x108>
    1ff4:	ldr	r0, [fp, #-16]
    1ff8:	ldr	r0, [r0, #40]	; 0x28
    1ffc:	str	r0, [sp, #24]
    2000:	movw	r0, #14
    2004:	strb	r0, [sp, #19]
    2008:	b	2024 <export_type+0x138>
    200c:	movw	r0, #14
    2010:	strb	r0, [sp, #19]
    2014:	movw	r0, #15
    2018:	strb	r0, [sp, #18]
    201c:	b	2024 <export_type+0x138>
    2020:	b	2024 <export_type+0x138>
    2024:	b	20b0 <export_type+0x1c4>
    2028:	movw	r0, #13
    202c:	strb	r0, [sp, #19]
    2030:	b	20b0 <export_type+0x1c4>
    2034:	ldr	r0, [fp, #-16]
    2038:	ldr	r0, [r0, #124]	; 0x7c
    203c:	str	r0, [sp, #20]
    2040:	ldr	r0, [fp, #-16]
    2044:	ldrh	r0, [r0, #8]
    2048:	cmp	r0, #2
    204c:	str	r0, [sp, #4]
    2050:	bcc	2088 <export_type+0x19c>
    2054:	b	2058 <export_type+0x16c>
    2058:	ldr	r0, [sp, #4]
    205c:	cmp	r0, #3
    2060:	beq	2078 <export_type+0x18c>
    2064:	b	2068 <export_type+0x17c>
    2068:	ldr	r0, [sp, #4]
    206c:	cmp	r0, #4
    2070:	beq	2094 <export_type+0x1a8>
    2074:	b	20a0 <export_type+0x1b4>
    2078:	ldr	r0, [fp, #-16]
    207c:	ldr	r0, [r0, #40]	; 0x28
    2080:	str	r0, [sp, #24]
    2084:	b	20a8 <export_type+0x1bc>
    2088:	movw	r0, #15
    208c:	strb	r0, [sp, #19]
    2090:	b	20a8 <export_type+0x1bc>
    2094:	movw	r0, #16
    2098:	strb	r0, [sp, #19]
    209c:	b	20a8 <export_type+0x1bc>
    20a0:	mvn	r0, #0
    20a4:	str	r0, [sp, #20]
    20a8:	b	20b0 <export_type+0x1c4>
    20ac:	b	20b0 <export_type+0x1c4>
    20b0:	ldr	r0, [sp, #24]
    20b4:	cmp	r0, #11
    20b8:	str	r0, [sp]
    20bc:	bhi	2188 <export_type+0x29c>
    20c0:	add	r0, pc, #8
    20c4:	ldr	r1, [sp]
    20c8:	ldr	r0, [r0, r1, lsl #2]
    20cc:	mov	pc, r0
    20d0:	.word	0x00002100
    20d4:	.word	0x00002104
    20d8:	.word	0x00002110
    20dc:	.word	0x0000211c
    20e0:	.word	0x00002128
    20e4:	.word	0x00002134
    20e8:	.word	0x00002140
    20ec:	.word	0x0000214c
    20f0:	.word	0x00002158
    20f4:	.word	0x00002164
    20f8:	.word	0x00002170
    20fc:	.word	0x0000217c
    2100:	b	218c <export_type+0x2a0>
    2104:	movw	r0, #10
    2108:	strb	r0, [sp, #17]
    210c:	b	218c <export_type+0x2a0>
    2110:	movw	r0, #8
    2114:	strb	r0, [sp, #17]
    2118:	b	218c <export_type+0x2a0>
    211c:	movw	r0, #6
    2120:	strb	r0, [sp, #17]
    2124:	b	218c <export_type+0x2a0>
    2128:	movw	r0, #4
    212c:	strb	r0, [sp, #17]
    2130:	b	218c <export_type+0x2a0>
    2134:	movw	r0, #2
    2138:	strb	r0, [sp, #17]
    213c:	b	218c <export_type+0x2a0>
    2140:	movw	r0, #9
    2144:	strb	r0, [sp, #17]
    2148:	b	218c <export_type+0x2a0>
    214c:	movw	r0, #7
    2150:	strb	r0, [sp, #17]
    2154:	b	218c <export_type+0x2a0>
    2158:	movw	r0, #5
    215c:	strb	r0, [sp, #17]
    2160:	b	218c <export_type+0x2a0>
    2164:	movw	r0, #3
    2168:	strb	r0, [sp, #17]
    216c:	b	218c <export_type+0x2a0>
    2170:	movw	r0, #12
    2174:	strb	r0, [sp, #17]
    2178:	b	218c <export_type+0x2a0>
    217c:	movw	r0, #11
    2180:	strb	r0, [sp, #17]
    2184:	b	218c <export_type+0x2a0>
    2188:	b	218c <export_type+0x2a0>
    218c:	ldrsb	r0, [sp, #19]
    2190:	cmp	r0, #0
    2194:	bne	21a4 <export_type+0x2b8>
    2198:	ldrb	r0, [sp, #17]
    219c:	strb	r0, [sp, #19]
    21a0:	b	21cc <export_type+0x2e0>
    21a4:	ldrsb	r0, [sp, #19]
    21a8:	cmp	r0, #14
    21ac:	bne	21c8 <export_type+0x2dc>
    21b0:	ldrsb	r0, [sp, #18]
    21b4:	cmp	r0, #0
    21b8:	bne	21c4 <export_type+0x2d8>
    21bc:	ldrb	r0, [sp, #17]
    21c0:	strb	r0, [sp, #18]
    21c4:	b	21c8 <export_type+0x2dc>
    21c8:	b	21cc <export_type+0x2e0>
    21cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    21d0:	ldrb	r1, [sp, #19]
    21d4:	ldrb	r2, [sp, #18]
    21d8:	ldr	r3, [sp, #20]
    21dc:	sxtb	r1, r1
    21e0:	sxtb	r2, r2
    21e4:	bl	24a8 <reflection_Type_create>
    21e8:	mov	sp, fp
    21ec:	pop	{fp, pc}

000021f0 <reflection_Field_default_integer_add>:
    21f0:	push	{fp, lr}
    21f4:	mov	fp, sp
    21f8:	sub	sp, sp, #24
    21fc:	str	r0, [fp, #-8]
    2200:	str	r3, [sp, #12]
    2204:	str	r2, [sp, #8]
    2208:	ldr	r0, [sp, #8]
    220c:	ldr	r2, [sp, #12]
    2210:	orr	r0, r0, r2
    2214:	cmp	r0, #0
    2218:	bne	222c <reflection_Field_default_integer_add+0x3c>
    221c:	b	2220 <reflection_Field_default_integer_add+0x30>
    2220:	movw	r0, #0
    2224:	str	r0, [fp, #-4]
    2228:	b	227c <reflection_Field_default_integer_add+0x8c>
    222c:	ldr	r0, [fp, #-8]
    2230:	movw	r1, #4
    2234:	movw	r2, #8
    2238:	movw	r3, #8
    223c:	uxth	r3, r3
    2240:	bl	0 <flatcc_builder_table_add>
    2244:	str	r0, [sp, #4]
    2248:	movw	r1, #0
    224c:	cmp	r0, r1
    2250:	bne	2260 <reflection_Field_default_integer_add+0x70>
    2254:	mvn	r0, #0
    2258:	str	r0, [fp, #-4]
    225c:	b	227c <reflection_Field_default_integer_add+0x8c>
    2260:	ldr	r0, [sp, #4]
    2264:	ldr	r2, [sp, #8]
    2268:	ldr	r3, [sp, #12]
    226c:	bl	2904 <flatbuffers_int64_assign_to_pe>
    2270:	movw	r2, #0
    2274:	str	r2, [fp, #-4]
    2278:	str	r0, [sp]
    227c:	ldr	r0, [fp, #-4]
    2280:	mov	sp, fp
    2284:	pop	{fp, pc}

00002288 <reflection_Field_default_real_add>:
    2288:	push	{fp, lr}
    228c:	mov	fp, sp
    2290:	sub	sp, sp, #24
    2294:	str	r0, [fp, #-8]
    2298:	vstr	d0, [sp, #8]
    229c:	vldr	d0, [sp, #8]
    22a0:	vcmp.f64	d0, #0.0
    22a4:	vmrs	APSR_nzcv, fpscr
    22a8:	bne	22b8 <reflection_Field_default_real_add+0x30>
    22ac:	movw	r0, #0
    22b0:	str	r0, [fp, #-4]
    22b4:	b	2304 <reflection_Field_default_real_add+0x7c>
    22b8:	ldr	r0, [fp, #-8]
    22bc:	movw	r1, #5
    22c0:	movw	r2, #8
    22c4:	movw	r3, #8
    22c8:	uxth	r3, r3
    22cc:	bl	0 <flatcc_builder_table_add>
    22d0:	str	r0, [sp, #4]
    22d4:	movw	r1, #0
    22d8:	cmp	r0, r1
    22dc:	bne	22ec <reflection_Field_default_real_add+0x64>
    22e0:	mvn	r0, #0
    22e4:	str	r0, [fp, #-4]
    22e8:	b	2304 <reflection_Field_default_real_add+0x7c>
    22ec:	ldr	r0, [sp, #4]
    22f0:	vldr	d0, [sp, #8]
    22f4:	bl	295c <flatbuffers_double_assign_to_pe>
    22f8:	movw	lr, #0
    22fc:	str	lr, [fp, #-4]
    2300:	str	r0, [sp]
    2304:	ldr	r0, [fp, #-4]
    2308:	mov	sp, fp
    230c:	pop	{fp, pc}

00002310 <reflection_Field_key_add>:
    2310:	push	{fp, lr}
    2314:	mov	fp, sp
    2318:	sub	sp, sp, #24
    231c:	str	r0, [fp, #-8]
    2320:	strb	r1, [fp, #-9]
    2324:	ldrb	r0, [fp, #-9]
    2328:	cmp	r0, #0
    232c:	bne	233c <reflection_Field_key_add+0x2c>
    2330:	movw	r0, #0
    2334:	str	r0, [fp, #-4]
    2338:	b	2388 <reflection_Field_key_add+0x78>
    233c:	ldr	r0, [fp, #-8]
    2340:	movw	r1, #8
    2344:	movw	r2, #1
    2348:	movw	r3, #1
    234c:	uxth	r3, r3
    2350:	bl	0 <flatcc_builder_table_add>
    2354:	str	r0, [sp, #8]
    2358:	movw	r1, #0
    235c:	cmp	r0, r1
    2360:	bne	2370 <reflection_Field_key_add+0x60>
    2364:	mvn	r0, #0
    2368:	str	r0, [fp, #-4]
    236c:	b	2388 <reflection_Field_key_add+0x78>
    2370:	ldr	r0, [sp, #8]
    2374:	ldrb	r1, [fp, #-9]
    2378:	bl	2814 <flatbuffers_bool_assign_to_pe>
    237c:	movw	r1, #0
    2380:	str	r1, [fp, #-4]
    2384:	str	r0, [sp, #4]
    2388:	ldr	r0, [fp, #-4]
    238c:	mov	sp, fp
    2390:	pop	{fp, pc}

00002394 <reflection_Field_required_add>:
    2394:	push	{fp, lr}
    2398:	mov	fp, sp
    239c:	sub	sp, sp, #24
    23a0:	str	r0, [fp, #-8]
    23a4:	strb	r1, [fp, #-9]
    23a8:	ldrb	r0, [fp, #-9]
    23ac:	cmp	r0, #0
    23b0:	bne	23c0 <reflection_Field_required_add+0x2c>
    23b4:	movw	r0, #0
    23b8:	str	r0, [fp, #-4]
    23bc:	b	240c <reflection_Field_required_add+0x78>
    23c0:	ldr	r0, [fp, #-8]
    23c4:	movw	r1, #7
    23c8:	movw	r2, #1
    23cc:	movw	r3, #1
    23d0:	uxth	r3, r3
    23d4:	bl	0 <flatcc_builder_table_add>
    23d8:	str	r0, [sp, #8]
    23dc:	movw	r1, #0
    23e0:	cmp	r0, r1
    23e4:	bne	23f4 <reflection_Field_required_add+0x60>
    23e8:	mvn	r0, #0
    23ec:	str	r0, [fp, #-4]
    23f0:	b	240c <reflection_Field_required_add+0x78>
    23f4:	ldr	r0, [sp, #8]
    23f8:	ldrb	r1, [fp, #-9]
    23fc:	bl	2814 <flatbuffers_bool_assign_to_pe>
    2400:	movw	r1, #0
    2404:	str	r1, [fp, #-4]
    2408:	str	r0, [sp, #4]
    240c:	ldr	r0, [fp, #-4]
    2410:	mov	sp, fp
    2414:	pop	{fp, pc}

00002418 <reflection_Field_start>:
    2418:	push	{fp, lr}
    241c:	mov	fp, sp
    2420:	sub	sp, sp, #8
    2424:	str	r0, [sp, #4]
    2428:	ldr	r0, [sp, #4]
    242c:	movw	r1, #9
    2430:	bl	0 <flatcc_builder_start_table>
    2434:	mov	sp, fp
    2438:	pop	{fp, pc}

0000243c <reflection_Field_name_add>:
    243c:	push	{fp, lr}
    2440:	mov	fp, sp
    2444:	sub	sp, sp, #16
    2448:	str	r0, [fp, #-4]
    244c:	str	r1, [sp, #8]
    2450:	ldr	r0, [sp, #8]
    2454:	cmp	r0, #0
    2458:	beq	2490 <reflection_Field_name_add+0x54>
    245c:	ldr	r0, [fp, #-4]
    2460:	movw	r1, #0
    2464:	bl	0 <flatcc_builder_table_add_offset>
    2468:	str	r0, [sp, #4]
    246c:	movw	r1, #0
    2470:	cmp	r0, r1
    2474:	beq	2490 <reflection_Field_name_add+0x54>
    2478:	ldr	r0, [sp, #8]
    247c:	ldr	r1, [sp, #4]
    2480:	str	r0, [r1]
    2484:	movw	r0, #0
    2488:	str	r0, [sp]
    248c:	b	249c <reflection_Field_name_add+0x60>
    2490:	mvn	r0, #0
    2494:	str	r0, [sp]
    2498:	b	249c <reflection_Field_name_add+0x60>
    249c:	ldr	r0, [sp]
    24a0:	mov	sp, fp
    24a4:	pop	{fp, pc}

000024a8 <reflection_Type_create>:
    24a8:	push	{fp, lr}
    24ac:	mov	fp, sp
    24b0:	sub	sp, sp, #16
    24b4:	str	r0, [sp, #8]
    24b8:	strb	r1, [sp, #7]
    24bc:	strb	r2, [sp, #6]
    24c0:	str	r3, [sp]
    24c4:	ldr	r0, [sp, #8]
    24c8:	bl	2534 <reflection_Type_start>
    24cc:	cmp	r0, #0
    24d0:	bne	2510 <reflection_Type_create+0x68>
    24d4:	ldr	r0, [sp, #8]
    24d8:	ldr	r1, [sp]
    24dc:	bl	2558 <reflection_Type_index_add>
    24e0:	cmp	r0, #0
    24e4:	bne	2510 <reflection_Type_create+0x68>
    24e8:	ldr	r0, [sp, #8]
    24ec:	ldrsb	r1, [sp, #7]
    24f0:	bl	25dc <reflection_Type_base_type_add>
    24f4:	cmp	r0, #0
    24f8:	bne	2510 <reflection_Type_create+0x68>
    24fc:	ldr	r0, [sp, #8]
    2500:	ldrsb	r1, [sp, #6]
    2504:	bl	2660 <reflection_Type_element_add>
    2508:	cmp	r0, #0
    250c:	beq	251c <reflection_Type_create+0x74>
    2510:	movw	r0, #0
    2514:	str	r0, [fp, #-4]
    2518:	b	2528 <reflection_Type_create+0x80>
    251c:	ldr	r0, [sp, #8]
    2520:	bl	26e8 <reflection_Type_end>
    2524:	str	r0, [fp, #-4]
    2528:	ldr	r0, [fp, #-4]
    252c:	mov	sp, fp
    2530:	pop	{fp, pc}

00002534 <reflection_Type_start>:
    2534:	push	{fp, lr}
    2538:	mov	fp, sp
    253c:	sub	sp, sp, #8
    2540:	str	r0, [sp, #4]
    2544:	ldr	r0, [sp, #4]
    2548:	movw	r1, #3
    254c:	bl	0 <flatcc_builder_start_table>
    2550:	mov	sp, fp
    2554:	pop	{fp, pc}

00002558 <reflection_Type_index_add>:
    2558:	push	{fp, lr}
    255c:	mov	fp, sp
    2560:	sub	sp, sp, #24
    2564:	str	r0, [fp, #-8]
    2568:	str	r1, [sp, #12]
    256c:	ldr	r0, [sp, #12]
    2570:	cmn	r0, #1
    2574:	bne	2584 <reflection_Type_index_add+0x2c>
    2578:	movw	r0, #0
    257c:	str	r0, [fp, #-4]
    2580:	b	25d0 <reflection_Type_index_add+0x78>
    2584:	ldr	r0, [fp, #-8]
    2588:	movw	r1, #2
    258c:	movw	r2, #4
    2590:	movw	r3, #4
    2594:	uxth	r3, r3
    2598:	bl	0 <flatcc_builder_table_add>
    259c:	str	r0, [sp, #8]
    25a0:	movw	r1, #0
    25a4:	cmp	r0, r1
    25a8:	bne	25b8 <reflection_Type_index_add+0x60>
    25ac:	mvn	r0, #0
    25b0:	str	r0, [fp, #-4]
    25b4:	b	25d0 <reflection_Type_index_add+0x78>
    25b8:	ldr	r0, [sp, #8]
    25bc:	ldr	r1, [sp, #12]
    25c0:	bl	2748 <flatbuffers_int32_assign_to_pe>
    25c4:	movw	r1, #0
    25c8:	str	r1, [fp, #-4]
    25cc:	str	r0, [sp, #4]
    25d0:	ldr	r0, [fp, #-4]
    25d4:	mov	sp, fp
    25d8:	pop	{fp, pc}

000025dc <reflection_Type_base_type_add>:
    25dc:	push	{fp, lr}
    25e0:	mov	fp, sp
    25e4:	sub	sp, sp, #24
    25e8:	str	r0, [fp, #-8]
    25ec:	strb	r1, [fp, #-9]
    25f0:	ldrsb	r0, [fp, #-9]
    25f4:	cmp	r0, #0
    25f8:	bne	2608 <reflection_Type_base_type_add+0x2c>
    25fc:	movw	r0, #0
    2600:	str	r0, [fp, #-4]
    2604:	b	2654 <reflection_Type_base_type_add+0x78>
    2608:	ldr	r0, [fp, #-8]
    260c:	movw	r1, #0
    2610:	movw	r2, #1
    2614:	movw	r3, #1
    2618:	uxth	r3, r3
    261c:	bl	0 <flatcc_builder_table_add>
    2620:	str	r0, [sp, #8]
    2624:	movw	r1, #0
    2628:	cmp	r0, r1
    262c:	bne	263c <reflection_Type_base_type_add+0x60>
    2630:	mvn	r0, #0
    2634:	str	r0, [fp, #-4]
    2638:	b	2654 <reflection_Type_base_type_add+0x78>
    263c:	ldr	r0, [sp, #8]
    2640:	ldrsb	r1, [fp, #-9]
    2644:	bl	278c <reflection_BaseType_assign_to_pe>
    2648:	movw	r1, #0
    264c:	str	r1, [fp, #-4]
    2650:	str	r0, [sp, #4]
    2654:	ldr	r0, [fp, #-4]
    2658:	mov	sp, fp
    265c:	pop	{fp, pc}

00002660 <reflection_Type_element_add>:
    2660:	push	{fp, lr}
    2664:	mov	fp, sp
    2668:	sub	sp, sp, #24
    266c:	str	r0, [fp, #-8]
    2670:	strb	r1, [fp, #-9]
    2674:	ldrsb	r0, [fp, #-9]
    2678:	cmp	r0, #0
    267c:	bne	268c <reflection_Type_element_add+0x2c>
    2680:	movw	r0, #0
    2684:	str	r0, [fp, #-4]
    2688:	b	26dc <reflection_Type_element_add+0x7c>
    268c:	ldr	r0, [fp, #-8]
    2690:	movw	r1, #1
    2694:	str	r1, [sp, #4]
    2698:	ldr	r2, [sp, #4]
    269c:	movw	r3, #1
    26a0:	uxth	r3, r3
    26a4:	bl	0 <flatcc_builder_table_add>
    26a8:	str	r0, [sp, #8]
    26ac:	movw	r1, #0
    26b0:	cmp	r0, r1
    26b4:	bne	26c4 <reflection_Type_element_add+0x64>
    26b8:	mvn	r0, #0
    26bc:	str	r0, [fp, #-4]
    26c0:	b	26dc <reflection_Type_element_add+0x7c>
    26c4:	ldr	r0, [sp, #8]
    26c8:	ldrsb	r1, [fp, #-9]
    26cc:	bl	278c <reflection_BaseType_assign_to_pe>
    26d0:	movw	r1, #0
    26d4:	str	r1, [fp, #-4]
    26d8:	str	r0, [sp]
    26dc:	ldr	r0, [fp, #-4]
    26e0:	mov	sp, fp
    26e4:	pop	{fp, pc}

000026e8 <reflection_Type_end>:
    26e8:	push	{fp, lr}
    26ec:	mov	fp, sp
    26f0:	sub	sp, sp, #8
    26f4:	str	r0, [sp, #4]
    26f8:	ldr	r0, [sp, #4]
    26fc:	movw	r1, #0
    2700:	movt	r1, #0
    2704:	movw	r2, #0
    2708:	bl	0 <flatcc_builder_check_required>
    270c:	cmp	r0, #0
    2710:	beq	2718 <reflection_Type_end+0x30>
    2714:	b	2738 <reflection_Type_end+0x50>
    2718:	movw	r0, #0
    271c:	movt	r0, #0
    2720:	movw	r1, #0
    2724:	movt	r1, #0
    2728:	movw	r2, #23
    272c:	movw	r3, #0
    2730:	movt	r3, #0
    2734:	bl	0 <__assert_fail>
    2738:	ldr	r0, [sp, #4]
    273c:	bl	0 <flatcc_builder_end_table>
    2740:	mov	sp, fp
    2744:	pop	{fp, pc}

00002748 <flatbuffers_int32_assign_to_pe>:
    2748:	push	{fp, lr}
    274c:	mov	fp, sp
    2750:	sub	sp, sp, #8
    2754:	str	r0, [sp, #4]
    2758:	str	r1, [sp]
    275c:	ldr	r0, [sp]
    2760:	bl	2778 <flatbuffers_int32_cast_to_pe>
    2764:	ldr	r1, [sp, #4]
    2768:	str	r0, [r1]
    276c:	ldr	r0, [sp, #4]
    2770:	mov	sp, fp
    2774:	pop	{fp, pc}

00002778 <flatbuffers_int32_cast_to_pe>:
    2778:	sub	sp, sp, #4
    277c:	str	r0, [sp]
    2780:	ldr	r0, [sp]
    2784:	add	sp, sp, #4
    2788:	bx	lr

0000278c <reflection_BaseType_assign_to_pe>:
    278c:	push	{fp, lr}
    2790:	mov	fp, sp
    2794:	sub	sp, sp, #8
    2798:	str	r0, [sp, #4]
    279c:	strb	r1, [sp, #3]
    27a0:	ldrsb	r0, [sp, #3]
    27a4:	bl	27bc <reflection_BaseType_cast_to_pe>
    27a8:	ldr	r1, [sp, #4]
    27ac:	strb	r0, [r1]
    27b0:	ldr	r0, [sp, #4]
    27b4:	mov	sp, fp
    27b8:	pop	{fp, pc}

000027bc <reflection_BaseType_cast_to_pe>:
    27bc:	sub	sp, sp, #4
    27c0:	strb	r0, [sp, #3]
    27c4:	ldrsb	r0, [sp, #3]
    27c8:	add	sp, sp, #4
    27cc:	bx	lr

000027d0 <flatbuffers_uint16_assign_to_pe>:
    27d0:	push	{fp, lr}
    27d4:	mov	fp, sp
    27d8:	sub	sp, sp, #8
    27dc:	str	r0, [sp, #4]
    27e0:	strh	r1, [sp, #2]
    27e4:	ldrh	r0, [sp, #2]
    27e8:	bl	2800 <flatbuffers_uint16_cast_to_pe>
    27ec:	ldr	r1, [sp, #4]
    27f0:	strh	r0, [r1]
    27f4:	ldr	r0, [sp, #4]
    27f8:	mov	sp, fp
    27fc:	pop	{fp, pc}

00002800 <flatbuffers_uint16_cast_to_pe>:
    2800:	sub	sp, sp, #4
    2804:	strh	r0, [sp, #2]
    2808:	ldrh	r0, [sp, #2]
    280c:	add	sp, sp, #4
    2810:	bx	lr

00002814 <flatbuffers_bool_assign_to_pe>:
    2814:	push	{fp, lr}
    2818:	mov	fp, sp
    281c:	sub	sp, sp, #8
    2820:	str	r0, [sp, #4]
    2824:	strb	r1, [sp, #3]
    2828:	ldrb	r0, [sp, #3]
    282c:	bl	2844 <flatbuffers_bool_cast_to_pe>
    2830:	ldr	r1, [sp, #4]
    2834:	strb	r0, [r1]
    2838:	ldr	r0, [sp, #4]
    283c:	mov	sp, fp
    2840:	pop	{fp, pc}

00002844 <flatbuffers_bool_cast_to_pe>:
    2844:	sub	sp, sp, #4
    2848:	strb	r0, [sp, #3]
    284c:	ldrb	r0, [sp, #3]
    2850:	add	sp, sp, #4
    2854:	bx	lr

00002858 <reflection_Field_vec_push>:
    2858:	push	{fp, lr}
    285c:	mov	fp, sp
    2860:	sub	sp, sp, #16
    2864:	str	r0, [fp, #-4]
    2868:	str	r1, [sp, #8]
    286c:	ldr	r0, [sp, #8]
    2870:	cmp	r0, #0
    2874:	beq	288c <reflection_Field_vec_push+0x34>
    2878:	ldr	r0, [fp, #-4]
    287c:	ldr	r1, [sp, #8]
    2880:	bl	0 <flatcc_builder_offset_vector_push>
    2884:	str	r0, [sp, #4]
    2888:	b	2898 <reflection_Field_vec_push+0x40>
    288c:	movw	r0, #0
    2890:	str	r0, [sp, #4]
    2894:	b	2898 <reflection_Field_vec_push+0x40>
    2898:	ldr	r0, [sp, #4]
    289c:	mov	sp, fp
    28a0:	pop	{fp, pc}

000028a4 <reflection_Field_end>:
    28a4:	push	{fp, lr}
    28a8:	mov	fp, sp
    28ac:	sub	sp, sp, #8
    28b0:	str	r0, [sp, #4]
    28b4:	ldr	r0, [sp, #4]
    28b8:	movw	r1, #0
    28bc:	movt	r1, #0
    28c0:	movw	r2, #2
    28c4:	bl	0 <flatcc_builder_check_required>
    28c8:	cmp	r0, #0
    28cc:	beq	28d4 <reflection_Field_end+0x30>
    28d0:	b	28f4 <reflection_Field_end+0x50>
    28d4:	movw	r0, #0
    28d8:	movt	r0, #0
    28dc:	movw	r1, #0
    28e0:	movt	r1, #0
    28e4:	movw	r2, #29
    28e8:	movw	r3, #0
    28ec:	movt	r3, #0
    28f0:	bl	0 <__assert_fail>
    28f4:	ldr	r0, [sp, #4]
    28f8:	bl	0 <flatcc_builder_end_table>
    28fc:	mov	sp, fp
    2900:	pop	{fp, pc}

00002904 <flatbuffers_int64_assign_to_pe>:
    2904:	push	{fp, lr}
    2908:	mov	fp, sp
    290c:	sub	sp, sp, #16
    2910:	str	r0, [fp, #-4]
    2914:	str	r3, [sp, #4]
    2918:	str	r2, [sp]
    291c:	ldr	r0, [sp]
    2920:	ldr	r1, [sp, #4]
    2924:	bl	2940 <flatbuffers_int64_cast_to_pe>
    2928:	ldr	r2, [fp, #-4]
    292c:	str	r1, [r2, #4]
    2930:	str	r0, [r2]
    2934:	ldr	r0, [fp, #-4]
    2938:	mov	sp, fp
    293c:	pop	{fp, pc}

00002940 <flatbuffers_int64_cast_to_pe>:
    2940:	sub	sp, sp, #8
    2944:	str	r0, [sp]
    2948:	str	r1, [sp, #4]
    294c:	ldr	r0, [sp]
    2950:	ldr	r1, [sp, #4]
    2954:	add	sp, sp, #8
    2958:	bx	lr

0000295c <flatbuffers_double_assign_to_pe>:
    295c:	push	{fp, lr}
    2960:	mov	fp, sp
    2964:	sub	sp, sp, #16
    2968:	str	r0, [fp, #-4]
    296c:	vstr	d0, [sp]
    2970:	vldr	d0, [sp]
    2974:	bl	298c <flatbuffers_double_cast_to_pe>
    2978:	ldr	r0, [fp, #-4]
    297c:	vstr	d0, [r0]
    2980:	ldr	r0, [fp, #-4]
    2984:	mov	sp, fp
    2988:	pop	{fp, pc}

0000298c <flatbuffers_double_cast_to_pe>:
    298c:	sub	sp, sp, #16
    2990:	vstr	d0, [sp, #8]
    2994:	vldr	d0, [sp, #8]
    2998:	vstr	d0, [sp]
    299c:	vldr	d0, [sp]
    29a0:	add	sp, sp, #16
    29a4:	bx	lr

000029a8 <reflection_Object_fields_add>:
    29a8:	push	{fp, lr}
    29ac:	mov	fp, sp
    29b0:	sub	sp, sp, #16
    29b4:	str	r0, [fp, #-4]
    29b8:	str	r1, [sp, #8]
    29bc:	ldr	r0, [sp, #8]
    29c0:	cmp	r0, #0
    29c4:	beq	29fc <reflection_Object_fields_add+0x54>
    29c8:	ldr	r0, [fp, #-4]
    29cc:	movw	r1, #1
    29d0:	bl	0 <flatcc_builder_table_add_offset>
    29d4:	str	r0, [sp, #4]
    29d8:	movw	r1, #0
    29dc:	cmp	r0, r1
    29e0:	beq	29fc <reflection_Object_fields_add+0x54>
    29e4:	ldr	r0, [sp, #8]
    29e8:	ldr	r1, [sp, #4]
    29ec:	str	r0, [r1]
    29f0:	movw	r0, #0
    29f4:	str	r0, [sp]
    29f8:	b	2a08 <reflection_Object_fields_add+0x60>
    29fc:	mvn	r0, #0
    2a00:	str	r0, [sp]
    2a04:	b	2a08 <reflection_Object_fields_add+0x60>
    2a08:	ldr	r0, [sp]
    2a0c:	mov	sp, fp
    2a10:	pop	{fp, pc}

00002a14 <reflection_Schema_objects_add>:
    2a14:	push	{fp, lr}
    2a18:	mov	fp, sp
    2a1c:	sub	sp, sp, #16
    2a20:	str	r0, [fp, #-4]
    2a24:	str	r1, [sp, #8]
    2a28:	ldr	r0, [sp, #8]
    2a2c:	cmp	r0, #0
    2a30:	beq	2a68 <reflection_Schema_objects_add+0x54>
    2a34:	ldr	r0, [fp, #-4]
    2a38:	movw	r1, #0
    2a3c:	bl	0 <flatcc_builder_table_add_offset>
    2a40:	str	r0, [sp, #4]
    2a44:	movw	r1, #0
    2a48:	cmp	r0, r1
    2a4c:	beq	2a68 <reflection_Schema_objects_add+0x54>
    2a50:	ldr	r0, [sp, #8]
    2a54:	ldr	r1, [sp, #4]
    2a58:	str	r0, [r1]
    2a5c:	movw	r0, #0
    2a60:	str	r0, [sp]
    2a64:	b	2a74 <reflection_Schema_objects_add+0x60>
    2a68:	mvn	r0, #0
    2a6c:	str	r0, [sp]
    2a70:	b	2a74 <reflection_Schema_objects_add+0x60>
    2a74:	ldr	r0, [sp]
    2a78:	mov	sp, fp
    2a7c:	pop	{fp, pc}

00002a80 <reflection_Schema_enums_start>:
    2a80:	push	{fp, lr}
    2a84:	mov	fp, sp
    2a88:	sub	sp, sp, #8
    2a8c:	str	r0, [sp, #4]
    2a90:	ldr	r0, [sp, #4]
    2a94:	bl	0 <flatcc_builder_start_offset_vector>
    2a98:	mov	sp, fp
    2a9c:	pop	{fp, pc}

00002aa0 <reflection_Enum_vec_push_start>:
    2aa0:	push	{fp, lr}
    2aa4:	mov	fp, sp
    2aa8:	sub	sp, sp, #8
    2aac:	str	r0, [sp, #4]
    2ab0:	ldr	r0, [sp, #4]
    2ab4:	bl	2da4 <reflection_Enum_start>
    2ab8:	mov	sp, fp
    2abc:	pop	{fp, pc}

00002ac0 <reflection_Enum_name_create_str>:
    2ac0:	push	{fp, lr}
    2ac4:	mov	fp, sp
    2ac8:	sub	sp, sp, #16
    2acc:	str	r0, [fp, #-4]
    2ad0:	str	r1, [sp, #8]
    2ad4:	ldr	r0, [fp, #-4]
    2ad8:	ldr	r1, [fp, #-4]
    2adc:	ldr	r2, [sp, #8]
    2ae0:	str	r0, [sp, #4]
    2ae4:	mov	r0, r1
    2ae8:	mov	r1, r2
    2aec:	bl	0 <flatcc_builder_create_string_str>
    2af0:	ldr	r1, [sp, #4]
    2af4:	str	r0, [sp]
    2af8:	mov	r0, r1
    2afc:	ldr	r1, [sp]
    2b00:	bl	2dc8 <reflection_Enum_name_add>
    2b04:	mov	sp, fp
    2b08:	pop	{fp, pc}

00002b0c <reflection_Enum_values_start>:
    2b0c:	push	{fp, lr}
    2b10:	mov	fp, sp
    2b14:	sub	sp, sp, #8
    2b18:	str	r0, [sp, #4]
    2b1c:	ldr	r0, [sp, #4]
    2b20:	bl	0 <flatcc_builder_start_offset_vector>
    2b24:	mov	sp, fp
    2b28:	pop	{fp, pc}

00002b2c <export_enumval>:
    2b2c:	push	{fp, lr}
    2b30:	mov	fp, sp
    2b34:	sub	sp, sp, #32
    2b38:	str	r0, [fp, #-4]
    2b3c:	str	r1, [fp, #-8]
    2b40:	str	r2, [fp, #-12]
    2b44:	ldr	r0, [fp, #-4]
    2b48:	bl	2e34 <reflection_EnumVal_vec_push_start>
    2b4c:	ldr	r1, [fp, #-4]
    2b50:	ldr	r2, [fp, #-8]
    2b54:	ldr	r2, [r2, #4]
    2b58:	ldr	r2, [r2]
    2b5c:	ldr	lr, [fp, #-8]
    2b60:	ldr	lr, [lr, #4]
    2b64:	ldr	lr, [lr, #4]
    2b68:	str	r0, [sp, #16]
    2b6c:	mov	r0, r1
    2b70:	mov	r1, r2
    2b74:	mov	r2, lr
    2b78:	bl	2e54 <reflection_EnumVal_name_create>
    2b7c:	ldr	r1, [fp, #-12]
    2b80:	movw	r2, #0
    2b84:	cmp	r1, r2
    2b88:	str	r0, [sp, #12]
    2b8c:	beq	2bc4 <export_enumval+0x98>
    2b90:	ldr	r0, [fp, #-8]
    2b94:	ldrh	r0, [r0, #24]
    2b98:	cmp	r0, #14
    2b9c:	bne	2bc4 <export_enumval+0x98>
    2ba0:	ldr	r0, [fp, #-4]
    2ba4:	ldr	r1, [fp, #-12]
    2ba8:	ldr	r2, [fp, #-8]
    2bac:	ldr	r2, [r2, #16]
    2bb0:	ldr	r2, [r2, #124]	; 0x7c
    2bb4:	add	r1, r1, r2, lsl #2
    2bb8:	ldr	r1, [r1]
    2bbc:	bl	2eac <reflection_EnumVal_object_add>
    2bc0:	str	r0, [sp, #8]
    2bc4:	ldr	r0, [fp, #-4]
    2bc8:	ldr	r1, [fp, #-8]
    2bcc:	ldr	r2, [r1, #48]	; 0x30
    2bd0:	ldr	r3, [r1, #52]	; 0x34
    2bd4:	bl	2f18 <reflection_EnumVal_value_add>
    2bd8:	ldr	r1, [fp, #-4]
    2bdc:	str	r0, [sp, #4]
    2be0:	mov	r0, r1
    2be4:	bl	2fb0 <reflection_EnumVal_vec_push_end>
    2be8:	str	r0, [sp]
    2bec:	mov	sp, fp
    2bf0:	pop	{fp, pc}

00002bf4 <reflection_Enum_values_end>:
    2bf4:	push	{fp, lr}
    2bf8:	mov	fp, sp
    2bfc:	sub	sp, sp, #16
    2c00:	str	r0, [fp, #-4]
    2c04:	ldr	r0, [fp, #-4]
    2c08:	ldr	r1, [fp, #-4]
    2c0c:	str	r0, [sp, #8]
    2c10:	mov	r0, r1
    2c14:	bl	0 <flatcc_builder_end_offset_vector>
    2c18:	ldr	r1, [sp, #8]
    2c1c:	str	r0, [sp, #4]
    2c20:	mov	r0, r1
    2c24:	ldr	r1, [sp, #4]
    2c28:	bl	312c <reflection_Enum_values_add>
    2c2c:	mov	sp, fp
    2c30:	pop	{fp, pc}

00002c34 <reflection_Enum_is_union_add>:
    2c34:	push	{fp, lr}
    2c38:	mov	fp, sp
    2c3c:	sub	sp, sp, #24
    2c40:	str	r0, [fp, #-8]
    2c44:	strb	r1, [fp, #-9]
    2c48:	ldrb	r0, [fp, #-9]
    2c4c:	cmp	r0, #0
    2c50:	bne	2c60 <reflection_Enum_is_union_add+0x2c>
    2c54:	movw	r0, #0
    2c58:	str	r0, [fp, #-4]
    2c5c:	b	2cac <reflection_Enum_is_union_add+0x78>
    2c60:	ldr	r0, [fp, #-8]
    2c64:	movw	r1, #2
    2c68:	movw	r2, #1
    2c6c:	movw	r3, #1
    2c70:	uxth	r3, r3
    2c74:	bl	0 <flatcc_builder_table_add>
    2c78:	str	r0, [sp, #8]
    2c7c:	movw	r1, #0
    2c80:	cmp	r0, r1
    2c84:	bne	2c94 <reflection_Enum_is_union_add+0x60>
    2c88:	mvn	r0, #0
    2c8c:	str	r0, [fp, #-4]
    2c90:	b	2cac <reflection_Enum_is_union_add+0x78>
    2c94:	ldr	r0, [sp, #8]
    2c98:	ldrb	r1, [fp, #-9]
    2c9c:	bl	2814 <flatbuffers_bool_assign_to_pe>
    2ca0:	movw	r1, #0
    2ca4:	str	r1, [fp, #-4]
    2ca8:	str	r0, [sp, #4]
    2cac:	ldr	r0, [fp, #-4]
    2cb0:	mov	sp, fp
    2cb4:	pop	{fp, pc}

00002cb8 <reflection_Enum_underlying_type_add>:
    2cb8:	push	{fp, lr}
    2cbc:	mov	fp, sp
    2cc0:	sub	sp, sp, #16
    2cc4:	str	r0, [fp, #-4]
    2cc8:	str	r1, [sp, #8]
    2ccc:	ldr	r0, [sp, #8]
    2cd0:	cmp	r0, #0
    2cd4:	beq	2d0c <reflection_Enum_underlying_type_add+0x54>
    2cd8:	ldr	r0, [fp, #-4]
    2cdc:	movw	r1, #3
    2ce0:	bl	0 <flatcc_builder_table_add_offset>
    2ce4:	str	r0, [sp, #4]
    2ce8:	movw	r1, #0
    2cec:	cmp	r0, r1
    2cf0:	beq	2d0c <reflection_Enum_underlying_type_add+0x54>
    2cf4:	ldr	r0, [sp, #8]
    2cf8:	ldr	r1, [sp, #4]
    2cfc:	str	r0, [r1]
    2d00:	movw	r0, #0
    2d04:	str	r0, [sp]
    2d08:	b	2d18 <reflection_Enum_underlying_type_add+0x60>
    2d0c:	mvn	r0, #0
    2d10:	str	r0, [sp]
    2d14:	b	2d18 <reflection_Enum_underlying_type_add+0x60>
    2d18:	ldr	r0, [sp]
    2d1c:	mov	sp, fp
    2d20:	pop	{fp, pc}

00002d24 <reflection_Enum_vec_push_end>:
    2d24:	push	{fp, lr}
    2d28:	mov	fp, sp
    2d2c:	sub	sp, sp, #16
    2d30:	str	r0, [fp, #-4]
    2d34:	ldr	r0, [fp, #-4]
    2d38:	ldr	r1, [fp, #-4]
    2d3c:	str	r0, [sp, #8]
    2d40:	mov	r0, r1
    2d44:	bl	31e4 <reflection_Enum_end>
    2d48:	ldr	r1, [sp, #8]
    2d4c:	str	r0, [sp, #4]
    2d50:	mov	r0, r1
    2d54:	ldr	r1, [sp, #4]
    2d58:	bl	3198 <reflection_Enum_vec_push>
    2d5c:	mov	sp, fp
    2d60:	pop	{fp, pc}

00002d64 <reflection_Schema_enums_end>:
    2d64:	push	{fp, lr}
    2d68:	mov	fp, sp
    2d6c:	sub	sp, sp, #16
    2d70:	str	r0, [fp, #-4]
    2d74:	ldr	r0, [fp, #-4]
    2d78:	ldr	r1, [fp, #-4]
    2d7c:	str	r0, [sp, #8]
    2d80:	mov	r0, r1
    2d84:	bl	0 <flatcc_builder_end_offset_vector>
    2d88:	ldr	r1, [sp, #8]
    2d8c:	str	r0, [sp, #4]
    2d90:	mov	r0, r1
    2d94:	ldr	r1, [sp, #4]
    2d98:	bl	3244 <reflection_Schema_enums_add>
    2d9c:	mov	sp, fp
    2da0:	pop	{fp, pc}

00002da4 <reflection_Enum_start>:
    2da4:	push	{fp, lr}
    2da8:	mov	fp, sp
    2dac:	sub	sp, sp, #8
    2db0:	str	r0, [sp, #4]
    2db4:	ldr	r0, [sp, #4]
    2db8:	movw	r1, #4
    2dbc:	bl	0 <flatcc_builder_start_table>
    2dc0:	mov	sp, fp
    2dc4:	pop	{fp, pc}

00002dc8 <reflection_Enum_name_add>:
    2dc8:	push	{fp, lr}
    2dcc:	mov	fp, sp
    2dd0:	sub	sp, sp, #16
    2dd4:	str	r0, [fp, #-4]
    2dd8:	str	r1, [sp, #8]
    2ddc:	ldr	r0, [sp, #8]
    2de0:	cmp	r0, #0
    2de4:	beq	2e1c <reflection_Enum_name_add+0x54>
    2de8:	ldr	r0, [fp, #-4]
    2dec:	movw	r1, #0
    2df0:	bl	0 <flatcc_builder_table_add_offset>
    2df4:	str	r0, [sp, #4]
    2df8:	movw	r1, #0
    2dfc:	cmp	r0, r1
    2e00:	beq	2e1c <reflection_Enum_name_add+0x54>
    2e04:	ldr	r0, [sp, #8]
    2e08:	ldr	r1, [sp, #4]
    2e0c:	str	r0, [r1]
    2e10:	movw	r0, #0
    2e14:	str	r0, [sp]
    2e18:	b	2e28 <reflection_Enum_name_add+0x60>
    2e1c:	mvn	r0, #0
    2e20:	str	r0, [sp]
    2e24:	b	2e28 <reflection_Enum_name_add+0x60>
    2e28:	ldr	r0, [sp]
    2e2c:	mov	sp, fp
    2e30:	pop	{fp, pc}

00002e34 <reflection_EnumVal_vec_push_start>:
    2e34:	push	{fp, lr}
    2e38:	mov	fp, sp
    2e3c:	sub	sp, sp, #8
    2e40:	str	r0, [sp, #4]
    2e44:	ldr	r0, [sp, #4]
    2e48:	bl	2ff0 <reflection_EnumVal_start>
    2e4c:	mov	sp, fp
    2e50:	pop	{fp, pc}

00002e54 <reflection_EnumVal_name_create>:
    2e54:	push	{fp, lr}
    2e58:	mov	fp, sp
    2e5c:	sub	sp, sp, #24
    2e60:	str	r0, [fp, #-4]
    2e64:	str	r1, [fp, #-8]
    2e68:	str	r2, [sp, #12]
    2e6c:	ldr	r0, [fp, #-4]
    2e70:	ldr	r1, [fp, #-4]
    2e74:	ldr	r2, [fp, #-8]
    2e78:	ldr	r3, [sp, #12]
    2e7c:	str	r0, [sp, #8]
    2e80:	mov	r0, r1
    2e84:	mov	r1, r2
    2e88:	mov	r2, r3
    2e8c:	bl	0 <flatcc_builder_create_string>
    2e90:	ldr	r1, [sp, #8]
    2e94:	str	r0, [sp, #4]
    2e98:	mov	r0, r1
    2e9c:	ldr	r1, [sp, #4]
    2ea0:	bl	3014 <reflection_EnumVal_name_add>
    2ea4:	mov	sp, fp
    2ea8:	pop	{fp, pc}

00002eac <reflection_EnumVal_object_add>:
    2eac:	push	{fp, lr}
    2eb0:	mov	fp, sp
    2eb4:	sub	sp, sp, #16
    2eb8:	str	r0, [fp, #-4]
    2ebc:	str	r1, [sp, #8]
    2ec0:	ldr	r0, [sp, #8]
    2ec4:	cmp	r0, #0
    2ec8:	beq	2f00 <reflection_EnumVal_object_add+0x54>
    2ecc:	ldr	r0, [fp, #-4]
    2ed0:	movw	r1, #2
    2ed4:	bl	0 <flatcc_builder_table_add_offset>
    2ed8:	str	r0, [sp, #4]
    2edc:	movw	r1, #0
    2ee0:	cmp	r0, r1
    2ee4:	beq	2f00 <reflection_EnumVal_object_add+0x54>
    2ee8:	ldr	r0, [sp, #8]
    2eec:	ldr	r1, [sp, #4]
    2ef0:	str	r0, [r1]
    2ef4:	movw	r0, #0
    2ef8:	str	r0, [sp]
    2efc:	b	2f0c <reflection_EnumVal_object_add+0x60>
    2f00:	mvn	r0, #0
    2f04:	str	r0, [sp]
    2f08:	b	2f0c <reflection_EnumVal_object_add+0x60>
    2f0c:	ldr	r0, [sp]
    2f10:	mov	sp, fp
    2f14:	pop	{fp, pc}

00002f18 <reflection_EnumVal_value_add>:
    2f18:	push	{fp, lr}
    2f1c:	mov	fp, sp
    2f20:	sub	sp, sp, #24
    2f24:	str	r0, [fp, #-8]
    2f28:	str	r3, [sp, #12]
    2f2c:	str	r2, [sp, #8]
    2f30:	ldr	r0, [sp, #8]
    2f34:	ldr	r2, [sp, #12]
    2f38:	orr	r0, r0, r2
    2f3c:	cmp	r0, #0
    2f40:	bne	2f54 <reflection_EnumVal_value_add+0x3c>
    2f44:	b	2f48 <reflection_EnumVal_value_add+0x30>
    2f48:	movw	r0, #0
    2f4c:	str	r0, [fp, #-4]
    2f50:	b	2fa4 <reflection_EnumVal_value_add+0x8c>
    2f54:	ldr	r0, [fp, #-8]
    2f58:	movw	r1, #1
    2f5c:	movw	r2, #8
    2f60:	movw	r3, #8
    2f64:	uxth	r3, r3
    2f68:	bl	0 <flatcc_builder_table_add>
    2f6c:	str	r0, [sp, #4]
    2f70:	movw	r1, #0
    2f74:	cmp	r0, r1
    2f78:	bne	2f88 <reflection_EnumVal_value_add+0x70>
    2f7c:	mvn	r0, #0
    2f80:	str	r0, [fp, #-4]
    2f84:	b	2fa4 <reflection_EnumVal_value_add+0x8c>
    2f88:	ldr	r0, [sp, #4]
    2f8c:	ldr	r2, [sp, #8]
    2f90:	ldr	r3, [sp, #12]
    2f94:	bl	2904 <flatbuffers_int64_assign_to_pe>
    2f98:	movw	r2, #0
    2f9c:	str	r2, [fp, #-4]
    2fa0:	str	r0, [sp]
    2fa4:	ldr	r0, [fp, #-4]
    2fa8:	mov	sp, fp
    2fac:	pop	{fp, pc}

00002fb0 <reflection_EnumVal_vec_push_end>:
    2fb0:	push	{fp, lr}
    2fb4:	mov	fp, sp
    2fb8:	sub	sp, sp, #16
    2fbc:	str	r0, [fp, #-4]
    2fc0:	ldr	r0, [fp, #-4]
    2fc4:	ldr	r1, [fp, #-4]
    2fc8:	str	r0, [sp, #8]
    2fcc:	mov	r0, r1
    2fd0:	bl	30cc <reflection_EnumVal_end>
    2fd4:	ldr	r1, [sp, #8]
    2fd8:	str	r0, [sp, #4]
    2fdc:	mov	r0, r1
    2fe0:	ldr	r1, [sp, #4]
    2fe4:	bl	3080 <reflection_EnumVal_vec_push>
    2fe8:	mov	sp, fp
    2fec:	pop	{fp, pc}

00002ff0 <reflection_EnumVal_start>:
    2ff0:	push	{fp, lr}
    2ff4:	mov	fp, sp
    2ff8:	sub	sp, sp, #8
    2ffc:	str	r0, [sp, #4]
    3000:	ldr	r0, [sp, #4]
    3004:	movw	r1, #3
    3008:	bl	0 <flatcc_builder_start_table>
    300c:	mov	sp, fp
    3010:	pop	{fp, pc}

00003014 <reflection_EnumVal_name_add>:
    3014:	push	{fp, lr}
    3018:	mov	fp, sp
    301c:	sub	sp, sp, #16
    3020:	str	r0, [fp, #-4]
    3024:	str	r1, [sp, #8]
    3028:	ldr	r0, [sp, #8]
    302c:	cmp	r0, #0
    3030:	beq	3068 <reflection_EnumVal_name_add+0x54>
    3034:	ldr	r0, [fp, #-4]
    3038:	movw	r1, #0
    303c:	bl	0 <flatcc_builder_table_add_offset>
    3040:	str	r0, [sp, #4]
    3044:	movw	r1, #0
    3048:	cmp	r0, r1
    304c:	beq	3068 <reflection_EnumVal_name_add+0x54>
    3050:	ldr	r0, [sp, #8]
    3054:	ldr	r1, [sp, #4]
    3058:	str	r0, [r1]
    305c:	movw	r0, #0
    3060:	str	r0, [sp]
    3064:	b	3074 <reflection_EnumVal_name_add+0x60>
    3068:	mvn	r0, #0
    306c:	str	r0, [sp]
    3070:	b	3074 <reflection_EnumVal_name_add+0x60>
    3074:	ldr	r0, [sp]
    3078:	mov	sp, fp
    307c:	pop	{fp, pc}

00003080 <reflection_EnumVal_vec_push>:
    3080:	push	{fp, lr}
    3084:	mov	fp, sp
    3088:	sub	sp, sp, #16
    308c:	str	r0, [fp, #-4]
    3090:	str	r1, [sp, #8]
    3094:	ldr	r0, [sp, #8]
    3098:	cmp	r0, #0
    309c:	beq	30b4 <reflection_EnumVal_vec_push+0x34>
    30a0:	ldr	r0, [fp, #-4]
    30a4:	ldr	r1, [sp, #8]
    30a8:	bl	0 <flatcc_builder_offset_vector_push>
    30ac:	str	r0, [sp, #4]
    30b0:	b	30c0 <reflection_EnumVal_vec_push+0x40>
    30b4:	movw	r0, #0
    30b8:	str	r0, [sp, #4]
    30bc:	b	30c0 <reflection_EnumVal_vec_push+0x40>
    30c0:	ldr	r0, [sp, #4]
    30c4:	mov	sp, fp
    30c8:	pop	{fp, pc}

000030cc <reflection_EnumVal_end>:
    30cc:	push	{fp, lr}
    30d0:	mov	fp, sp
    30d4:	sub	sp, sp, #8
    30d8:	str	r0, [sp, #4]
    30dc:	ldr	r0, [sp, #4]
    30e0:	movw	r1, #0
    30e4:	movt	r1, #0
    30e8:	movw	r2, #1
    30ec:	bl	0 <flatcc_builder_check_required>
    30f0:	cmp	r0, #0
    30f4:	beq	30fc <reflection_EnumVal_end+0x30>
    30f8:	b	311c <reflection_EnumVal_end+0x50>
    30fc:	movw	r0, #0
    3100:	movt	r0, #0
    3104:	movw	r1, #0
    3108:	movt	r1, #0
    310c:	movw	r2, #25
    3110:	movw	r3, #0
    3114:	movt	r3, #0
    3118:	bl	0 <__assert_fail>
    311c:	ldr	r0, [sp, #4]
    3120:	bl	0 <flatcc_builder_end_table>
    3124:	mov	sp, fp
    3128:	pop	{fp, pc}

0000312c <reflection_Enum_values_add>:
    312c:	push	{fp, lr}
    3130:	mov	fp, sp
    3134:	sub	sp, sp, #16
    3138:	str	r0, [fp, #-4]
    313c:	str	r1, [sp, #8]
    3140:	ldr	r0, [sp, #8]
    3144:	cmp	r0, #0
    3148:	beq	3180 <reflection_Enum_values_add+0x54>
    314c:	ldr	r0, [fp, #-4]
    3150:	movw	r1, #1
    3154:	bl	0 <flatcc_builder_table_add_offset>
    3158:	str	r0, [sp, #4]
    315c:	movw	r1, #0
    3160:	cmp	r0, r1
    3164:	beq	3180 <reflection_Enum_values_add+0x54>
    3168:	ldr	r0, [sp, #8]
    316c:	ldr	r1, [sp, #4]
    3170:	str	r0, [r1]
    3174:	movw	r0, #0
    3178:	str	r0, [sp]
    317c:	b	318c <reflection_Enum_values_add+0x60>
    3180:	mvn	r0, #0
    3184:	str	r0, [sp]
    3188:	b	318c <reflection_Enum_values_add+0x60>
    318c:	ldr	r0, [sp]
    3190:	mov	sp, fp
    3194:	pop	{fp, pc}

00003198 <reflection_Enum_vec_push>:
    3198:	push	{fp, lr}
    319c:	mov	fp, sp
    31a0:	sub	sp, sp, #16
    31a4:	str	r0, [fp, #-4]
    31a8:	str	r1, [sp, #8]
    31ac:	ldr	r0, [sp, #8]
    31b0:	cmp	r0, #0
    31b4:	beq	31cc <reflection_Enum_vec_push+0x34>
    31b8:	ldr	r0, [fp, #-4]
    31bc:	ldr	r1, [sp, #8]
    31c0:	bl	0 <flatcc_builder_offset_vector_push>
    31c4:	str	r0, [sp, #4]
    31c8:	b	31d8 <reflection_Enum_vec_push+0x40>
    31cc:	movw	r0, #0
    31d0:	str	r0, [sp, #4]
    31d4:	b	31d8 <reflection_Enum_vec_push+0x40>
    31d8:	ldr	r0, [sp, #4]
    31dc:	mov	sp, fp
    31e0:	pop	{fp, pc}

000031e4 <reflection_Enum_end>:
    31e4:	push	{fp, lr}
    31e8:	mov	fp, sp
    31ec:	sub	sp, sp, #8
    31f0:	str	r0, [sp, #4]
    31f4:	ldr	r0, [sp, #4]
    31f8:	movw	r1, #0
    31fc:	movt	r1, #0
    3200:	movw	r2, #3
    3204:	bl	0 <flatcc_builder_check_required>
    3208:	cmp	r0, #0
    320c:	beq	3214 <reflection_Enum_end+0x30>
    3210:	b	3234 <reflection_Enum_end+0x50>
    3214:	movw	r0, #0
    3218:	movt	r0, #0
    321c:	movw	r1, #0
    3220:	movt	r1, #0
    3224:	movw	r2, #27
    3228:	movw	r3, #0
    322c:	movt	r3, #0
    3230:	bl	0 <__assert_fail>
    3234:	ldr	r0, [sp, #4]
    3238:	bl	0 <flatcc_builder_end_table>
    323c:	mov	sp, fp
    3240:	pop	{fp, pc}

00003244 <reflection_Schema_enums_add>:
    3244:	push	{fp, lr}
    3248:	mov	fp, sp
    324c:	sub	sp, sp, #16
    3250:	str	r0, [fp, #-4]
    3254:	str	r1, [sp, #8]
    3258:	ldr	r0, [sp, #8]
    325c:	cmp	r0, #0
    3260:	beq	3298 <reflection_Schema_enums_add+0x54>
    3264:	ldr	r0, [fp, #-4]
    3268:	movw	r1, #1
    326c:	bl	0 <flatcc_builder_table_add_offset>
    3270:	str	r0, [sp, #4]
    3274:	movw	r1, #0
    3278:	cmp	r0, r1
    327c:	beq	3298 <reflection_Schema_enums_add+0x54>
    3280:	ldr	r0, [sp, #8]
    3284:	ldr	r1, [sp, #4]
    3288:	str	r0, [r1]
    328c:	movw	r0, #0
    3290:	str	r0, [sp]
    3294:	b	32a4 <reflection_Schema_enums_add+0x60>
    3298:	mvn	r0, #0
    329c:	str	r0, [sp]
    32a0:	b	32a4 <reflection_Schema_enums_add+0x60>
    32a4:	ldr	r0, [sp]
    32a8:	mov	sp, fp
    32ac:	pop	{fp, pc}

000032b0 <reflection_Schema_root_table_add>:
    32b0:	push	{fp, lr}
    32b4:	mov	fp, sp
    32b8:	sub	sp, sp, #16
    32bc:	str	r0, [fp, #-4]
    32c0:	str	r1, [sp, #8]
    32c4:	ldr	r0, [sp, #8]
    32c8:	cmp	r0, #0
    32cc:	beq	3304 <reflection_Schema_root_table_add+0x54>
    32d0:	ldr	r0, [fp, #-4]
    32d4:	movw	r1, #4
    32d8:	bl	0 <flatcc_builder_table_add_offset>
    32dc:	str	r0, [sp, #4]
    32e0:	movw	r1, #0
    32e4:	cmp	r0, r1
    32e8:	beq	3304 <reflection_Schema_root_table_add+0x54>
    32ec:	ldr	r0, [sp, #8]
    32f0:	ldr	r1, [sp, #4]
    32f4:	str	r0, [r1]
    32f8:	movw	r0, #0
    32fc:	str	r0, [sp]
    3300:	b	3310 <reflection_Schema_root_table_add+0x60>
    3304:	mvn	r0, #0
    3308:	str	r0, [sp]
    330c:	b	3310 <reflection_Schema_root_table_add+0x60>
    3310:	ldr	r0, [sp]
    3314:	mov	sp, fp
    3318:	pop	{fp, pc}

0000331c <flatbuffers_buffer_end>:
    331c:	push	{fp, lr}
    3320:	mov	fp, sp
    3324:	sub	sp, sp, #8
    3328:	str	r0, [sp, #4]
    332c:	str	r1, [sp]
    3330:	ldr	r0, [sp, #4]
    3334:	ldr	r1, [sp]
    3338:	bl	0 <flatcc_builder_end_buffer>
    333c:	mov	sp, fp
    3340:	pop	{fp, pc}

00003344 <reflection_Schema_end>:
    3344:	push	{fp, lr}
    3348:	mov	fp, sp
    334c:	sub	sp, sp, #8
    3350:	str	r0, [sp, #4]
    3354:	ldr	r0, [sp, #4]
    3358:	movw	r1, #0
    335c:	movt	r1, #0
    3360:	movw	r2, #2
    3364:	bl	0 <flatcc_builder_check_required>
    3368:	cmp	r0, #0
    336c:	beq	3374 <reflection_Schema_end+0x30>
    3370:	b	3394 <reflection_Schema_end+0x50>
    3374:	movw	r0, #0
    3378:	movt	r0, #0
    337c:	movw	r1, #0
    3380:	movt	r1, #0
    3384:	movw	r2, #33	; 0x21
    3388:	movw	r3, #0
    338c:	movt	r3, #0
    3390:	bl	0 <__assert_fail>
    3394:	ldr	r0, [sp, #4]
    3398:	bl	0 <flatcc_builder_end_table>
    339c:	mov	sp, fp
    33a0:	pop	{fp, pc}

000033a4 <reflection_Schema_as_root>:
    33a4:	push	{fp, lr}
    33a8:	mov	fp, sp
    33ac:	sub	sp, sp, #16
    33b0:	str	r0, [fp, #-4]
    33b4:	movw	r0, #0
    33b8:	movt	r0, #0
    33bc:	str	r0, [sp, #8]
    33c0:	ldr	r0, [fp, #-4]
    33c4:	movw	r1, #0
    33c8:	cmp	r0, r1
    33cc:	beq	33e4 <reflection_Schema_as_root+0x40>
    33d0:	ldr	r0, [fp, #-4]
    33d4:	ldr	r1, [sp, #8]
    33d8:	bl	3720 <flatbuffers_has_identifier>
    33dc:	cmp	r0, #0
    33e0:	bne	33f0 <reflection_Schema_as_root+0x4c>
    33e4:	movw	r0, #0
    33e8:	str	r0, [sp, #4]
    33ec:	b	3410 <reflection_Schema_as_root+0x6c>
    33f0:	ldr	r0, [fp, #-4]
    33f4:	ldr	r1, [fp, #-4]
    33f8:	str	r0, [sp]
    33fc:	mov	r0, r1
    3400:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3404:	ldr	r1, [sp]
    3408:	add	r0, r1, r0
    340c:	str	r0, [sp, #4]
    3410:	ldr	r0, [sp, #4]
    3414:	mov	sp, fp
    3418:	pop	{fp, pc}

0000341c <reflection_Schema_objects>:
    341c:	push	{fp, lr}
    3420:	mov	fp, sp
    3424:	sub	sp, sp, #24
    3428:	str	r0, [fp, #-4]
    342c:	movw	r0, #0
    3430:	strh	r0, [fp, #-10]
    3434:	ldr	r0, [fp, #-4]
    3438:	movw	r1, #0
    343c:	cmp	r0, r1
    3440:	beq	344c <reflection_Schema_objects+0x30>
    3444:	b	3448 <reflection_Schema_objects+0x2c>
    3448:	b	346c <reflection_Schema_objects+0x50>
    344c:	movw	r0, #0
    3450:	movt	r0, #0
    3454:	movw	r1, #0
    3458:	movt	r1, #0
    345c:	movw	r2, #237	; 0xed
    3460:	movw	r3, #0
    3464:	movt	r3, #0
    3468:	bl	0 <__assert_fail>
    346c:	mov	r0, #0
    3470:	strh	r0, [sp, #12]
    3474:	ldr	r0, [fp, #-4]
    3478:	str	r0, [sp, #4]
    347c:	bl	3850 <__flatbuffers_soffset_read_from_pe>
    3480:	ldr	lr, [sp, #4]
    3484:	sub	r0, lr, r0
    3488:	str	r0, [sp, #8]
    348c:	ldr	r0, [sp, #8]
    3490:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    3494:	ldrh	lr, [sp, #12]
    3498:	add	lr, lr, #3
    349c:	lsl	lr, lr, #1
    34a0:	cmp	r0, lr
    34a4:	bcc	34c0 <reflection_Schema_objects+0xa4>
    34a8:	ldr	r0, [sp, #8]
    34ac:	ldrh	r1, [sp, #12]
    34b0:	add	r0, r0, r1, lsl #1
    34b4:	add	r0, r0, #4
    34b8:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    34bc:	strh	r0, [fp, #-10]
    34c0:	ldrsh	r0, [fp, #-10]
    34c4:	cmp	r0, #0
    34c8:	beq	3504 <reflection_Schema_objects+0xe8>
    34cc:	ldr	r0, [fp, #-4]
    34d0:	ldrh	r1, [fp, #-10]
    34d4:	add	r0, r0, r1
    34d8:	str	r0, [fp, #-8]
    34dc:	ldr	r0, [fp, #-8]
    34e0:	add	r0, r0, #4
    34e4:	ldr	r1, [fp, #-8]
    34e8:	str	r0, [sp]
    34ec:	mov	r0, r1
    34f0:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    34f4:	ldr	r1, [sp]
    34f8:	add	r0, r1, r0
    34fc:	mov	sp, fp
    3500:	pop	{fp, pc}
    3504:	movw	r0, #0
    3508:	movt	r0, #0
    350c:	movw	r1, #0
    3510:	movt	r1, #0
    3514:	movw	r2, #237	; 0xed
    3518:	movw	r3, #0
    351c:	movt	r3, #0
    3520:	bl	0 <__assert_fail>

00003524 <reflection_Object_vec_len>:
    3524:	push	{fp, lr}
    3528:	mov	fp, sp
    352c:	sub	sp, sp, #8
    3530:	str	r0, [sp, #4]
    3534:	ldr	r0, [sp, #4]
    3538:	movw	r1, #0
    353c:	cmp	r0, r1
    3540:	beq	355c <reflection_Object_vec_len+0x38>
    3544:	ldr	r0, [sp, #4]
    3548:	mvn	r1, #3
    354c:	add	r0, r0, r1
    3550:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3554:	str	r0, [sp]
    3558:	b	3568 <reflection_Object_vec_len+0x44>
    355c:	movw	r0, #0
    3560:	str	r0, [sp]
    3564:	b	3568 <reflection_Object_vec_len+0x44>
    3568:	ldr	r0, [sp]
    356c:	mov	sp, fp
    3570:	pop	{fp, pc}

00003574 <reflection_Object_vec_at>:
    3574:	push	{fp, lr}
    3578:	mov	fp, sp
    357c:	sub	sp, sp, #16
    3580:	str	r0, [fp, #-4]
    3584:	str	r1, [sp, #8]
    3588:	ldr	r0, [fp, #-4]
    358c:	ldr	r1, [sp, #8]
    3590:	add	r0, r0, r1, lsl #2
    3594:	str	r0, [sp, #4]
    3598:	ldr	r0, [fp, #-4]
    359c:	bl	38c4 <flatbuffers_vec_len>
    35a0:	ldr	r1, [sp, #8]
    35a4:	cmp	r0, r1
    35a8:	bls	35b4 <reflection_Object_vec_at+0x40>
    35ac:	b	35b0 <reflection_Object_vec_at+0x3c>
    35b0:	b	35d4 <reflection_Object_vec_at+0x60>
    35b4:	movw	r0, #0
    35b8:	movt	r0, #0
    35bc:	movw	r1, #0
    35c0:	movt	r1, #0
    35c4:	movw	r2, #215	; 0xd7
    35c8:	movw	r3, #0
    35cc:	movt	r3, #0
    35d0:	bl	0 <__assert_fail>
    35d4:	ldr	r0, [sp, #4]
    35d8:	ldr	r1, [sp, #4]
    35dc:	str	r0, [sp]
    35e0:	mov	r0, r1
    35e4:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    35e8:	ldr	r1, [sp]
    35ec:	add	r0, r1, r0
    35f0:	mov	sp, fp
    35f4:	pop	{fp, pc}

000035f8 <reflection_Object_fields>:
    35f8:	push	{fp, lr}
    35fc:	mov	fp, sp
    3600:	sub	sp, sp, #24
    3604:	str	r0, [fp, #-4]
    3608:	movw	r0, #0
    360c:	strh	r0, [fp, #-10]
    3610:	ldr	r0, [fp, #-4]
    3614:	movw	r1, #0
    3618:	cmp	r0, r1
    361c:	beq	3628 <reflection_Object_fields+0x30>
    3620:	b	3624 <reflection_Object_fields+0x2c>
    3624:	b	3648 <reflection_Object_fields+0x50>
    3628:	movw	r0, #0
    362c:	movt	r0, #0
    3630:	movw	r1, #0
    3634:	movt	r1, #0
    3638:	movw	r2, #224	; 0xe0
    363c:	movw	r3, #0
    3640:	movt	r3, #0
    3644:	bl	0 <__assert_fail>
    3648:	mov	r0, #1
    364c:	strh	r0, [sp, #12]
    3650:	ldr	r0, [fp, #-4]
    3654:	str	r0, [sp, #4]
    3658:	bl	3850 <__flatbuffers_soffset_read_from_pe>
    365c:	ldr	lr, [sp, #4]
    3660:	sub	r0, lr, r0
    3664:	str	r0, [sp, #8]
    3668:	ldr	r0, [sp, #8]
    366c:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    3670:	ldrh	lr, [sp, #12]
    3674:	add	lr, lr, #3
    3678:	lsl	lr, lr, #1
    367c:	cmp	r0, lr
    3680:	bcc	369c <reflection_Object_fields+0xa4>
    3684:	ldr	r0, [sp, #8]
    3688:	ldrh	r1, [sp, #12]
    368c:	add	r0, r0, r1, lsl #1
    3690:	add	r0, r0, #4
    3694:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    3698:	strh	r0, [fp, #-10]
    369c:	ldrsh	r0, [fp, #-10]
    36a0:	cmp	r0, #0
    36a4:	beq	36e0 <reflection_Object_fields+0xe8>
    36a8:	ldr	r0, [fp, #-4]
    36ac:	ldrh	r1, [fp, #-10]
    36b0:	add	r0, r0, r1
    36b4:	str	r0, [fp, #-8]
    36b8:	ldr	r0, [fp, #-8]
    36bc:	add	r0, r0, #4
    36c0:	ldr	r1, [fp, #-8]
    36c4:	str	r0, [sp]
    36c8:	mov	r0, r1
    36cc:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    36d0:	ldr	r1, [sp]
    36d4:	add	r0, r1, r0
    36d8:	mov	sp, fp
    36dc:	pop	{fp, pc}
    36e0:	movw	r0, #0
    36e4:	movt	r0, #0
    36e8:	movw	r1, #0
    36ec:	movt	r1, #0
    36f0:	movw	r2, #224	; 0xe0
    36f4:	movw	r3, #0
    36f8:	movt	r3, #0
    36fc:	bl	0 <__assert_fail>

00003700 <reflection_Field_vec_sort_by_name>:
    3700:	push	{fp, lr}
    3704:	mov	fp, sp
    3708:	sub	sp, sp, #8
    370c:	str	r0, [sp, #4]
    3710:	ldr	r0, [sp, #4]
    3714:	bl	3914 <__reflection_Field_sort_by_name__heap_sort>
    3718:	mov	sp, fp
    371c:	pop	{fp, pc}

00003720 <flatbuffers_has_identifier>:
    3720:	push	{fp, lr}
    3724:	mov	fp, sp
    3728:	sub	sp, sp, #32
    372c:	str	r0, [fp, #-8]
    3730:	str	r1, [fp, #-12]
    3734:	movw	r0, #0
    3738:	str	r0, [sp, #12]
    373c:	ldr	r1, [fp, #-12]
    3740:	cmp	r1, r0
    3744:	bne	3754 <flatbuffers_has_identifier+0x34>
    3748:	movw	r0, #1
    374c:	str	r0, [fp, #-4]
    3750:	b	37c0 <flatbuffers_has_identifier+0xa0>
    3754:	add	r0, sp, #12
    3758:	ldr	r1, [fp, #-12]
    375c:	movw	r2, #4
    3760:	bl	0 <strncpy>
    3764:	ldr	r1, [sp, #12]
    3768:	str	r0, [sp, #8]
    376c:	mov	r0, r1
    3770:	bl	37f0 <__flatbuffers_thash_cast_from_le>
    3774:	str	r0, [sp, #12]
    3778:	ldr	r0, [fp, #-8]
    377c:	add	r0, r0, #4
    3780:	bl	3804 <__flatbuffers_thash_read_from_pe>
    3784:	str	r0, [sp, #16]
    3788:	ldr	r0, [sp, #12]
    378c:	cmp	r0, #0
    3790:	movw	r0, #1
    3794:	str	r0, [sp, #4]
    3798:	beq	37b4 <flatbuffers_has_identifier+0x94>
    379c:	ldr	r0, [sp, #16]
    37a0:	ldr	r1, [sp, #12]
    37a4:	cmp	r0, r1
    37a8:	movw	r0, #0
    37ac:	moveq	r0, #1
    37b0:	str	r0, [sp, #4]
    37b4:	ldr	r0, [sp, #4]
    37b8:	and	r0, r0, #1
    37bc:	str	r0, [fp, #-4]
    37c0:	ldr	r0, [fp, #-4]
    37c4:	mov	sp, fp
    37c8:	pop	{fp, pc}

000037cc <__flatbuffers_uoffset_read_from_pe>:
    37cc:	push	{fp, lr}
    37d0:	mov	fp, sp
    37d4:	sub	sp, sp, #8
    37d8:	str	r0, [sp, #4]
    37dc:	ldr	r0, [sp, #4]
    37e0:	ldr	r0, [r0]
    37e4:	bl	383c <__flatbuffers_uoffset_cast_from_pe>
    37e8:	mov	sp, fp
    37ec:	pop	{fp, pc}

000037f0 <__flatbuffers_thash_cast_from_le>:
    37f0:	sub	sp, sp, #4
    37f4:	str	r0, [sp]
    37f8:	ldr	r0, [sp]
    37fc:	add	sp, sp, #4
    3800:	bx	lr

00003804 <__flatbuffers_thash_read_from_pe>:
    3804:	push	{fp, lr}
    3808:	mov	fp, sp
    380c:	sub	sp, sp, #8
    3810:	str	r0, [sp, #4]
    3814:	ldr	r0, [sp, #4]
    3818:	ldr	r0, [r0]
    381c:	bl	3828 <__flatbuffers_thash_cast_from_pe>
    3820:	mov	sp, fp
    3824:	pop	{fp, pc}

00003828 <__flatbuffers_thash_cast_from_pe>:
    3828:	sub	sp, sp, #4
    382c:	str	r0, [sp]
    3830:	ldr	r0, [sp]
    3834:	add	sp, sp, #4
    3838:	bx	lr

0000383c <__flatbuffers_uoffset_cast_from_pe>:
    383c:	sub	sp, sp, #4
    3840:	str	r0, [sp]
    3844:	ldr	r0, [sp]
    3848:	add	sp, sp, #4
    384c:	bx	lr

00003850 <__flatbuffers_soffset_read_from_pe>:
    3850:	push	{fp, lr}
    3854:	mov	fp, sp
    3858:	sub	sp, sp, #8
    385c:	str	r0, [sp, #4]
    3860:	ldr	r0, [sp, #4]
    3864:	ldr	r0, [r0]
    3868:	bl	389c <__flatbuffers_soffset_cast_from_pe>
    386c:	mov	sp, fp
    3870:	pop	{fp, pc}

00003874 <__flatbuffers_voffset_read_from_pe>:
    3874:	push	{fp, lr}
    3878:	mov	fp, sp
    387c:	sub	sp, sp, #8
    3880:	str	r0, [sp, #4]
    3884:	ldr	r0, [sp, #4]
    3888:	ldrh	r0, [r0]
    388c:	bl	38b0 <__flatbuffers_voffset_cast_from_pe>
    3890:	uxth	r0, r0
    3894:	mov	sp, fp
    3898:	pop	{fp, pc}

0000389c <__flatbuffers_soffset_cast_from_pe>:
    389c:	sub	sp, sp, #4
    38a0:	str	r0, [sp]
    38a4:	ldr	r0, [sp]
    38a8:	add	sp, sp, #4
    38ac:	bx	lr

000038b0 <__flatbuffers_voffset_cast_from_pe>:
    38b0:	sub	sp, sp, #4
    38b4:	strh	r0, [sp, #2]
    38b8:	ldrh	r0, [sp, #2]
    38bc:	add	sp, sp, #4
    38c0:	bx	lr

000038c4 <flatbuffers_vec_len>:
    38c4:	push	{fp, lr}
    38c8:	mov	fp, sp
    38cc:	sub	sp, sp, #8
    38d0:	str	r0, [sp, #4]
    38d4:	ldr	r0, [sp, #4]
    38d8:	movw	r1, #0
    38dc:	cmp	r0, r1
    38e0:	beq	38fc <flatbuffers_vec_len+0x38>
    38e4:	ldr	r0, [sp, #4]
    38e8:	mvn	r1, #3
    38ec:	add	r0, r0, r1
    38f0:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    38f4:	str	r0, [sp]
    38f8:	b	3908 <flatbuffers_vec_len+0x44>
    38fc:	movw	r0, #0
    3900:	str	r0, [sp]
    3904:	b	3908 <flatbuffers_vec_len+0x44>
    3908:	ldr	r0, [sp]
    390c:	mov	sp, fp
    3910:	pop	{fp, pc}

00003914 <__reflection_Field_sort_by_name__heap_sort>:
    3914:	push	{fp, lr}
    3918:	mov	fp, sp
    391c:	sub	sp, sp, #32
    3920:	str	r0, [fp, #-4]
    3924:	ldr	r0, [fp, #-4]
    3928:	bl	3a24 <reflection_Field_vec_len>
    392c:	str	r0, [sp, #16]
    3930:	ldr	r0, [sp, #16]
    3934:	cmp	r0, #0
    3938:	bne	3940 <__reflection_Field_sort_by_name__heap_sort+0x2c>
    393c:	b	3a1c <__reflection_Field_sort_by_name__heap_sort+0x108>
    3940:	ldr	r0, [sp, #16]
    3944:	sub	r0, r0, #1
    3948:	str	r0, [fp, #-12]
    394c:	ldr	r0, [sp, #16]
    3950:	lsr	r0, r0, #1
    3954:	str	r0, [fp, #-8]
    3958:	ldr	r0, [fp, #-4]
    395c:	ldr	r1, [fp, #-8]
    3960:	ldr	r2, [fp, #-12]
    3964:	bl	3a74 <__reflection_Field_sort_by_name__heap_sift_down>
    3968:	ldr	r0, [fp, #-8]
    396c:	mvn	r1, #0
    3970:	add	r1, r0, r1
    3974:	str	r1, [fp, #-8]
    3978:	cmp	r0, #0
    397c:	bne	3958 <__reflection_Field_sort_by_name__heap_sort+0x44>
    3980:	b	3984 <__reflection_Field_sort_by_name__heap_sort+0x70>
    3984:	ldr	r0, [fp, #-12]
    3988:	cmp	r0, #0
    398c:	bls	3a1c <__reflection_Field_sort_by_name__heap_sort+0x108>
    3990:	ldr	r0, [fp, #-12]
    3994:	rsb	r0, r0, #0
    3998:	lsl	r0, r0, #2
    399c:	str	r0, [sp, #4]
    39a0:	ldr	r0, [fp, #-4]
    39a4:	ldr	r1, [fp, #-12]
    39a8:	add	r0, r0, r1, lsl #2
    39ac:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    39b0:	ldr	r1, [sp, #4]
    39b4:	sub	r0, r0, r1
    39b8:	str	r0, [sp, #12]
    39bc:	ldr	r0, [fp, #-4]
    39c0:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    39c4:	ldr	r1, [sp, #4]
    39c8:	add	r0, r0, r1
    39cc:	str	r0, [sp, #8]
    39d0:	ldr	r0, [fp, #-4]
    39d4:	ldr	r1, [sp, #12]
    39d8:	bl	3c30 <__flatbuffers_uoffset_write_to_pe>
    39dc:	ldr	r0, [fp, #-4]
    39e0:	ldr	r1, [fp, #-12]
    39e4:	add	r0, r0, r1, lsl #2
    39e8:	ldr	r1, [sp, #8]
    39ec:	bl	3c30 <__flatbuffers_uoffset_write_to_pe>
    39f0:	ldr	r0, [fp, #-4]
    39f4:	ldr	r1, [fp, #-12]
    39f8:	mvn	lr, #0
    39fc:	add	r1, r1, lr
    3a00:	str	r1, [fp, #-12]
    3a04:	movw	lr, #0
    3a08:	str	r1, [sp]
    3a0c:	mov	r1, lr
    3a10:	ldr	r2, [sp]
    3a14:	bl	3a74 <__reflection_Field_sort_by_name__heap_sift_down>
    3a18:	b	3984 <__reflection_Field_sort_by_name__heap_sort+0x70>
    3a1c:	mov	sp, fp
    3a20:	pop	{fp, pc}

00003a24 <reflection_Field_vec_len>:
    3a24:	push	{fp, lr}
    3a28:	mov	fp, sp
    3a2c:	sub	sp, sp, #8
    3a30:	str	r0, [sp, #4]
    3a34:	ldr	r0, [sp, #4]
    3a38:	movw	r1, #0
    3a3c:	cmp	r0, r1
    3a40:	beq	3a5c <reflection_Field_vec_len+0x38>
    3a44:	ldr	r0, [sp, #4]
    3a48:	mvn	r1, #3
    3a4c:	add	r0, r0, r1
    3a50:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3a54:	str	r0, [sp]
    3a58:	b	3a68 <reflection_Field_vec_len+0x44>
    3a5c:	movw	r0, #0
    3a60:	str	r0, [sp]
    3a64:	b	3a68 <reflection_Field_vec_len+0x44>
    3a68:	ldr	r0, [sp]
    3a6c:	mov	sp, fp
    3a70:	pop	{fp, pc}

00003a74 <__reflection_Field_sort_by_name__heap_sift_down>:
    3a74:	push	{fp, lr}
    3a78:	mov	fp, sp
    3a7c:	sub	sp, sp, #72	; 0x48
    3a80:	str	r0, [fp, #-4]
    3a84:	str	r1, [fp, #-8]
    3a88:	str	r2, [fp, #-12]
    3a8c:	ldr	r0, [fp, #-8]
    3a90:	str	r0, [fp, #-20]	; 0xffffffec
    3a94:	ldr	r0, [fp, #-20]	; 0xffffffec
    3a98:	lsl	r0, r0, #1
    3a9c:	ldr	r1, [fp, #-12]
    3aa0:	cmp	r0, r1
    3aa4:	bhi	3c28 <__reflection_Field_sort_by_name__heap_sift_down+0x1b4>
    3aa8:	ldr	r0, [fp, #-20]	; 0xffffffec
    3aac:	lsl	r0, r0, #1
    3ab0:	str	r0, [fp, #-16]
    3ab4:	ldr	r0, [fp, #-16]
    3ab8:	ldr	r1, [fp, #-12]
    3abc:	cmp	r0, r1
    3ac0:	bcs	3b3c <__reflection_Field_sort_by_name__heap_sift_down+0xc8>
    3ac4:	ldr	r0, [fp, #-4]
    3ac8:	ldr	r1, [fp, #-16]
    3acc:	bl	3d64 <reflection_Field_vec_at>
    3ad0:	bl	3c5c <reflection_Field_name>
    3ad4:	str	r0, [fp, #-24]	; 0xffffffe8
    3ad8:	ldr	r0, [fp, #-4]
    3adc:	ldr	r1, [fp, #-16]
    3ae0:	add	r1, r1, #1
    3ae4:	bl	3d64 <reflection_Field_vec_at>
    3ae8:	bl	3c5c <reflection_Field_name>
    3aec:	str	r0, [fp, #-28]	; 0xffffffe4
    3af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    3af4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    3af8:	ldr	lr, [fp, #-28]	; 0xffffffe4
    3afc:	str	r0, [sp, #24]
    3b00:	mov	r0, lr
    3b04:	str	r1, [sp, #20]
    3b08:	bl	3ec4 <flatbuffers_string_len>
    3b0c:	ldr	r1, [sp, #24]
    3b10:	str	r0, [sp, #16]
    3b14:	mov	r0, r1
    3b18:	ldr	r1, [sp, #20]
    3b1c:	ldr	r2, [sp, #16]
    3b20:	bl	3de8 <__flatbuffers_string_n_cmp>
    3b24:	cmp	r0, #0
    3b28:	bge	3b38 <__reflection_Field_sort_by_name__heap_sift_down+0xc4>
    3b2c:	ldr	r0, [fp, #-16]
    3b30:	add	r0, r0, #1
    3b34:	str	r0, [fp, #-16]
    3b38:	b	3b3c <__reflection_Field_sort_by_name__heap_sift_down+0xc8>
    3b3c:	ldr	r0, [fp, #-4]
    3b40:	ldr	r1, [fp, #-20]	; 0xffffffec
    3b44:	bl	3d64 <reflection_Field_vec_at>
    3b48:	bl	3c5c <reflection_Field_name>
    3b4c:	str	r0, [fp, #-32]	; 0xffffffe0
    3b50:	ldr	r0, [fp, #-4]
    3b54:	ldr	r1, [fp, #-16]
    3b58:	bl	3d64 <reflection_Field_vec_at>
    3b5c:	bl	3c5c <reflection_Field_name>
    3b60:	str	r0, [fp, #-24]	; 0xffffffe8
    3b64:	ldr	r0, [fp, #-32]	; 0xffffffe0
    3b68:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3b6c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    3b70:	str	r0, [sp, #12]
    3b74:	mov	r0, lr
    3b78:	str	r1, [sp, #8]
    3b7c:	bl	3ec4 <flatbuffers_string_len>
    3b80:	ldr	r1, [sp, #12]
    3b84:	str	r0, [sp, #4]
    3b88:	mov	r0, r1
    3b8c:	ldr	r1, [sp, #8]
    3b90:	ldr	r2, [sp, #4]
    3b94:	bl	3de8 <__flatbuffers_string_n_cmp>
    3b98:	cmp	r0, #0
    3b9c:	bge	3c20 <__reflection_Field_sort_by_name__heap_sift_down+0x1ac>
    3ba0:	ldr	r0, [fp, #-20]	; 0xffffffec
    3ba4:	ldr	r1, [fp, #-16]
    3ba8:	sub	r0, r0, r1
    3bac:	lsl	r0, r0, #2
    3bb0:	str	r0, [sp, #28]
    3bb4:	ldr	r0, [fp, #-4]
    3bb8:	ldr	r1, [fp, #-16]
    3bbc:	add	r0, r0, r1, lsl #2
    3bc0:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3bc4:	ldr	r1, [sp, #28]
    3bc8:	sub	r0, r0, r1
    3bcc:	str	r0, [sp, #36]	; 0x24
    3bd0:	ldr	r0, [fp, #-4]
    3bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
    3bd8:	add	r0, r0, r1, lsl #2
    3bdc:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3be0:	ldr	r1, [sp, #28]
    3be4:	add	r0, r0, r1
    3be8:	str	r0, [sp, #32]
    3bec:	ldr	r0, [fp, #-4]
    3bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
    3bf4:	add	r0, r0, r1, lsl #2
    3bf8:	ldr	r1, [sp, #36]	; 0x24
    3bfc:	bl	3c30 <__flatbuffers_uoffset_write_to_pe>
    3c00:	ldr	r0, [fp, #-4]
    3c04:	ldr	r1, [fp, #-16]
    3c08:	add	r0, r0, r1, lsl #2
    3c0c:	ldr	r1, [sp, #32]
    3c10:	bl	3c30 <__flatbuffers_uoffset_write_to_pe>
    3c14:	ldr	r0, [fp, #-16]
    3c18:	str	r0, [fp, #-20]	; 0xffffffec
    3c1c:	b	3c24 <__reflection_Field_sort_by_name__heap_sift_down+0x1b0>
    3c20:	b	3c28 <__reflection_Field_sort_by_name__heap_sift_down+0x1b4>
    3c24:	b	3a94 <__reflection_Field_sort_by_name__heap_sift_down+0x20>
    3c28:	mov	sp, fp
    3c2c:	pop	{fp, pc}

00003c30 <__flatbuffers_uoffset_write_to_pe>:
    3c30:	push	{fp, lr}
    3c34:	mov	fp, sp
    3c38:	sub	sp, sp, #8
    3c3c:	str	r0, [sp, #4]
    3c40:	str	r1, [sp]
    3c44:	ldr	r0, [sp]
    3c48:	bl	3f14 <__flatbuffers_uoffset_cast_to_pe>
    3c4c:	ldr	r1, [sp, #4]
    3c50:	str	r0, [r1]
    3c54:	mov	sp, fp
    3c58:	pop	{fp, pc}

00003c5c <reflection_Field_name>:
    3c5c:	push	{fp, lr}
    3c60:	mov	fp, sp
    3c64:	sub	sp, sp, #24
    3c68:	str	r0, [fp, #-4]
    3c6c:	movw	r0, #0
    3c70:	strh	r0, [fp, #-10]
    3c74:	ldr	r0, [fp, #-4]
    3c78:	movw	r1, #0
    3c7c:	cmp	r0, r1
    3c80:	beq	3c8c <reflection_Field_name+0x30>
    3c84:	b	3c88 <reflection_Field_name+0x2c>
    3c88:	b	3cac <reflection_Field_name+0x50>
    3c8c:	movw	r0, #0
    3c90:	movt	r0, #0
    3c94:	movw	r1, #0
    3c98:	movt	r1, #0
    3c9c:	movw	r2, #195	; 0xc3
    3ca0:	movw	r3, #0
    3ca4:	movt	r3, #0
    3ca8:	bl	0 <__assert_fail>
    3cac:	mov	r0, #0
    3cb0:	strh	r0, [sp, #12]
    3cb4:	ldr	r0, [fp, #-4]
    3cb8:	str	r0, [sp, #4]
    3cbc:	bl	3850 <__flatbuffers_soffset_read_from_pe>
    3cc0:	ldr	lr, [sp, #4]
    3cc4:	sub	r0, lr, r0
    3cc8:	str	r0, [sp, #8]
    3ccc:	ldr	r0, [sp, #8]
    3cd0:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    3cd4:	ldrh	lr, [sp, #12]
    3cd8:	add	lr, lr, #3
    3cdc:	lsl	lr, lr, #1
    3ce0:	cmp	r0, lr
    3ce4:	bcc	3d00 <reflection_Field_name+0xa4>
    3ce8:	ldr	r0, [sp, #8]
    3cec:	ldrh	r1, [sp, #12]
    3cf0:	add	r0, r0, r1, lsl #1
    3cf4:	add	r0, r0, #4
    3cf8:	bl	3874 <__flatbuffers_voffset_read_from_pe>
    3cfc:	strh	r0, [fp, #-10]
    3d00:	ldrsh	r0, [fp, #-10]
    3d04:	cmp	r0, #0
    3d08:	beq	3d44 <reflection_Field_name+0xe8>
    3d0c:	ldr	r0, [fp, #-4]
    3d10:	ldrh	r1, [fp, #-10]
    3d14:	add	r0, r0, r1
    3d18:	str	r0, [fp, #-8]
    3d1c:	ldr	r0, [fp, #-8]
    3d20:	add	r0, r0, #4
    3d24:	ldr	r1, [fp, #-8]
    3d28:	str	r0, [sp]
    3d2c:	mov	r0, r1
    3d30:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3d34:	ldr	r1, [sp]
    3d38:	add	r0, r1, r0
    3d3c:	mov	sp, fp
    3d40:	pop	{fp, pc}
    3d44:	movw	r0, #0
    3d48:	movt	r0, #0
    3d4c:	movw	r1, #0
    3d50:	movt	r1, #0
    3d54:	movw	r2, #195	; 0xc3
    3d58:	movw	r3, #0
    3d5c:	movt	r3, #0
    3d60:	bl	0 <__assert_fail>

00003d64 <reflection_Field_vec_at>:
    3d64:	push	{fp, lr}
    3d68:	mov	fp, sp
    3d6c:	sub	sp, sp, #16
    3d70:	str	r0, [fp, #-4]
    3d74:	str	r1, [sp, #8]
    3d78:	ldr	r0, [fp, #-4]
    3d7c:	ldr	r1, [sp, #8]
    3d80:	add	r0, r0, r1, lsl #2
    3d84:	str	r0, [sp, #4]
    3d88:	ldr	r0, [fp, #-4]
    3d8c:	bl	38c4 <flatbuffers_vec_len>
    3d90:	ldr	r1, [sp, #8]
    3d94:	cmp	r0, r1
    3d98:	bls	3da4 <reflection_Field_vec_at+0x40>
    3d9c:	b	3da0 <reflection_Field_vec_at+0x3c>
    3da0:	b	3dc4 <reflection_Field_vec_at+0x60>
    3da4:	movw	r0, #0
    3da8:	movt	r0, #0
    3dac:	movw	r1, #0
    3db0:	movt	r1, #0
    3db4:	movw	r2, #192	; 0xc0
    3db8:	movw	r3, #0
    3dbc:	movt	r3, #0
    3dc0:	bl	0 <__assert_fail>
    3dc4:	ldr	r0, [sp, #4]
    3dc8:	ldr	r1, [sp, #4]
    3dcc:	str	r0, [sp]
    3dd0:	mov	r0, r1
    3dd4:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3dd8:	ldr	r1, [sp]
    3ddc:	add	r0, r1, r0
    3de0:	mov	sp, fp
    3de4:	pop	{fp, pc}

00003de8 <__flatbuffers_string_n_cmp>:
    3de8:	push	{fp, lr}
    3dec:	mov	fp, sp
    3df0:	sub	sp, sp, #48	; 0x30
    3df4:	str	r0, [fp, #-4]
    3df8:	str	r1, [fp, #-8]
    3dfc:	str	r2, [fp, #-12]
    3e00:	ldr	r0, [fp, #-4]
    3e04:	bl	3ec4 <flatbuffers_string_len>
    3e08:	str	r0, [fp, #-16]
    3e0c:	ldr	r0, [fp, #-4]
    3e10:	ldr	r1, [fp, #-8]
    3e14:	ldr	r2, [fp, #-16]
    3e18:	ldr	lr, [fp, #-12]
    3e1c:	cmp	r2, lr
    3e20:	str	r0, [sp, #24]
    3e24:	str	r1, [sp, #20]
    3e28:	bcs	3e38 <__flatbuffers_string_n_cmp+0x50>
    3e2c:	ldr	r0, [fp, #-16]
    3e30:	str	r0, [sp, #16]
    3e34:	b	3e40 <__flatbuffers_string_n_cmp+0x58>
    3e38:	ldr	r0, [fp, #-12]
    3e3c:	str	r0, [sp, #16]
    3e40:	ldr	r0, [sp, #16]
    3e44:	ldr	r1, [sp, #24]
    3e48:	str	r0, [sp, #12]
    3e4c:	mov	r0, r1
    3e50:	ldr	r1, [sp, #20]
    3e54:	ldr	r2, [sp, #12]
    3e58:	bl	0 <strncmp>
    3e5c:	str	r0, [fp, #-20]	; 0xffffffec
    3e60:	ldr	r0, [fp, #-20]	; 0xffffffec
    3e64:	cmp	r0, #0
    3e68:	beq	3e78 <__flatbuffers_string_n_cmp+0x90>
    3e6c:	ldr	r0, [fp, #-20]	; 0xffffffec
    3e70:	str	r0, [sp, #8]
    3e74:	b	3eb8 <__flatbuffers_string_n_cmp+0xd0>
    3e78:	ldr	r0, [fp, #-16]
    3e7c:	ldr	r1, [fp, #-12]
    3e80:	cmp	r0, r1
    3e84:	bcs	3e94 <__flatbuffers_string_n_cmp+0xac>
    3e88:	mvn	r0, #0
    3e8c:	str	r0, [sp, #4]
    3e90:	b	3eb0 <__flatbuffers_string_n_cmp+0xc8>
    3e94:	ldr	r0, [fp, #-16]
    3e98:	ldr	r1, [fp, #-12]
    3e9c:	cmp	r0, r1
    3ea0:	movw	r0, #0
    3ea4:	movhi	r0, #1
    3ea8:	and	r0, r0, #1
    3eac:	str	r0, [sp, #4]
    3eb0:	ldr	r0, [sp, #4]
    3eb4:	str	r0, [sp, #8]
    3eb8:	ldr	r0, [sp, #8]
    3ebc:	mov	sp, fp
    3ec0:	pop	{fp, pc}

00003ec4 <flatbuffers_string_len>:
    3ec4:	push	{fp, lr}
    3ec8:	mov	fp, sp
    3ecc:	sub	sp, sp, #8
    3ed0:	str	r0, [sp, #4]
    3ed4:	ldr	r0, [sp, #4]
    3ed8:	movw	r1, #0
    3edc:	cmp	r0, r1
    3ee0:	beq	3efc <flatbuffers_string_len+0x38>
    3ee4:	ldr	r0, [sp, #4]
    3ee8:	mvn	r1, #3
    3eec:	add	r0, r0, r1
    3ef0:	bl	37cc <__flatbuffers_uoffset_read_from_pe>
    3ef4:	str	r0, [sp]
    3ef8:	b	3f08 <flatbuffers_string_len+0x44>
    3efc:	movw	r0, #0
    3f00:	str	r0, [sp]
    3f04:	b	3f08 <flatbuffers_string_len+0x44>
    3f08:	ldr	r0, [sp]
    3f0c:	mov	sp, fp
    3f10:	pop	{fp, pc}

00003f14 <__flatbuffers_uoffset_cast_to_pe>:
    3f14:	sub	sp, sp, #4
    3f18:	str	r0, [sp]
    3f1c:	ldr	r0, [sp]
    3f20:	add	sp, sp, #4
    3f24:	bx	lr

00003f28 <checkmem>:
    3f28:	push	{fp, lr}
    3f2c:	mov	fp, sp
    3f30:	sub	sp, sp, #8
    3f34:	str	r0, [sp, #4]
    3f38:	ldr	r0, [sp, #4]
    3f3c:	movw	r1, #0
    3f40:	cmp	r0, r1
    3f44:	bne	3f70 <checkmem+0x48>
    3f48:	movw	r0, #0
    3f4c:	movt	r0, #0
    3f50:	ldr	r0, [r0]
    3f54:	movw	r1, #0
    3f58:	movt	r1, #0
    3f5c:	bl	0 <fprintf>
    3f60:	movw	r1, #1
    3f64:	str	r0, [sp]
    3f68:	mov	r0, r1
    3f6c:	bl	0 <exit>
    3f70:	mov	sp, fp
    3f74:	pop	{fp, pc}
