
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_new>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #56	; 0x38
       c:	ldr	ip, [fp, #12]
      10:	ldr	lr, [fp, #8]
      14:	str	r0, [fp, #-8]
      18:	str	r1, [fp, #-12]
      1c:	str	r2, [fp, #-16]
      20:	str	r3, [fp, #-20]	; 0xffffffec
      24:	ldr	r0, [fp, #-8]
      28:	sub	r0, r0, #18
      2c:	cmp	r0, #4
      30:	str	lr, [sp, #28]
      34:	str	ip, [sp, #24]
      38:	str	r0, [sp, #20]
      3c:	bhi	b4 <coda_expression_new+0xb4>
      40:	add	r0, pc, #8
      44:	ldr	r1, [sp, #20]
      48:	ldr	r0, [r0, r1, lsl #2]
      4c:	mov	pc, r0
      50:	.word	0x00000064
      54:	.word	0x00000074
      58:	.word	0x00000084
      5c:	.word	0x00000094
      60:	.word	0x000000a4
      64:	ldr	r0, [fp, #-12]
      68:	bl	614 <boolean_constant_new>
      6c:	str	r0, [fp, #-4]
      70:	b	608 <coda_expression_new+0x608>
      74:	ldr	r0, [fp, #-12]
      78:	bl	6f8 <float_constant_new>
      7c:	str	r0, [fp, #-4]
      80:	b	608 <coda_expression_new+0x608>
      84:	ldr	r0, [fp, #-12]
      88:	bl	7ec <integer_constant_new>
      8c:	str	r0, [fp, #-4]
      90:	b	608 <coda_expression_new+0x608>
      94:	ldr	r0, [fp, #-12]
      98:	bl	8e4 <rawstring_constant_new>
      9c:	str	r0, [fp, #-4]
      a0:	b	608 <coda_expression_new+0x608>
      a4:	ldr	r0, [fp, #-12]
      a8:	bl	994 <string_constant_new>
      ac:	str	r0, [fp, #-4]
      b0:	b	608 <coda_expression_new+0x608>
      b4:	b	b8 <coda_expression_new+0xb8>
      b8:	ldr	r0, [fp, #-8]
      bc:	cmp	r0, #60	; 0x3c
      c0:	bne	130 <coda_expression_new+0x130>
      c4:	ldr	r0, [fp, #-16]
      c8:	ldr	r0, [r0]
      cc:	cmp	r0, #19
      d0:	bne	f4 <coda_expression_new+0xf4>
      d4:	ldr	r0, [fp, #-16]
      d8:	vldr	d16, [r0, #16]
      dc:	vneg.f64	d16, d16
      e0:	ldr	r0, [fp, #-16]
      e4:	vstr	d16, [r0, #16]
      e8:	ldr	r0, [fp, #-16]
      ec:	str	r0, [fp, #-4]
      f0:	b	608 <coda_expression_new+0x608>
      f4:	ldr	r0, [fp, #-16]
      f8:	ldr	r0, [r0]
      fc:	cmp	r0, #20
     100:	bne	12c <coda_expression_new+0x12c>
     104:	ldr	r0, [fp, #-16]
     108:	ldr	r1, [r0, #16]
     10c:	ldr	r2, [r0, #20]
     110:	rsbs	r1, r1, #0
     114:	rsc	r2, r2, #0
     118:	str	r1, [r0, #16]
     11c:	str	r2, [r0, #20]
     120:	ldr	r0, [fp, #-16]
     124:	str	r0, [fp, #-4]
     128:	b	608 <coda_expression_new+0x608>
     12c:	b	130 <coda_expression_new+0x130>
     130:	movw	r0, #32
     134:	bl	0 <malloc>
     138:	str	r0, [fp, #-24]	; 0xffffffe8
     13c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     140:	movw	lr, #0
     144:	cmp	r0, lr
     148:	bne	1f4 <coda_expression_new+0x1f4>
     14c:	mvn	r0, #0
     150:	movw	r1, #0
     154:	movt	r1, #0
     158:	movw	r2, #32
     15c:	movw	r3, #0
     160:	movt	r3, #0
     164:	movw	ip, #387	; 0x183
     168:	str	ip, [sp]
     16c:	bl	0 <coda_set_error>
     170:	ldr	r0, [fp, #-12]
     174:	movw	r1, #0
     178:	cmp	r0, r1
     17c:	beq	188 <coda_expression_new+0x188>
     180:	ldr	r0, [fp, #-12]
     184:	bl	0 <free>
     188:	ldr	r0, [fp, #-16]
     18c:	movw	r1, #0
     190:	cmp	r0, r1
     194:	beq	1a0 <coda_expression_new+0x1a0>
     198:	ldr	r0, [fp, #-16]
     19c:	bl	a6c <coda_expression_delete>
     1a0:	ldr	r0, [fp, #-20]	; 0xffffffec
     1a4:	movw	r1, #0
     1a8:	cmp	r0, r1
     1ac:	beq	1b8 <coda_expression_new+0x1b8>
     1b0:	ldr	r0, [fp, #-20]	; 0xffffffec
     1b4:	bl	a6c <coda_expression_delete>
     1b8:	ldr	r0, [fp, #8]
     1bc:	movw	r1, #0
     1c0:	cmp	r0, r1
     1c4:	beq	1d0 <coda_expression_new+0x1d0>
     1c8:	ldr	r0, [fp, #8]
     1cc:	bl	a6c <coda_expression_delete>
     1d0:	ldr	r0, [fp, #12]
     1d4:	movw	r1, #0
     1d8:	cmp	r0, r1
     1dc:	beq	1e8 <coda_expression_new+0x1e8>
     1e0:	ldr	r0, [fp, #12]
     1e4:	bl	a6c <coda_expression_delete>
     1e8:	movw	r0, #0
     1ec:	str	r0, [fp, #-4]
     1f0:	b	608 <coda_expression_new+0x608>
     1f4:	ldr	r0, [fp, #-8]
     1f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     1fc:	str	r0, [r1]
     200:	ldr	r0, [fp, #-12]
     204:	ldr	r1, [fp, #-24]	; 0xffffffe8
     208:	str	r0, [r1, #12]
     20c:	ldr	r0, [fp, #-16]
     210:	ldr	r1, [fp, #-24]	; 0xffffffe8
     214:	str	r0, [r1, #16]
     218:	ldr	r0, [fp, #-20]	; 0xffffffec
     21c:	ldr	r1, [fp, #-24]	; 0xffffffe8
     220:	str	r0, [r1, #20]
     224:	ldr	r0, [fp, #8]
     228:	ldr	r1, [fp, #-24]	; 0xffffffe8
     22c:	str	r0, [r1, #24]
     230:	ldr	r0, [fp, #12]
     234:	ldr	r1, [fp, #-24]	; 0xffffffe8
     238:	str	r0, [r1, #28]
     23c:	ldr	r0, [fp, #-8]
     240:	cmp	r0, #86	; 0x56
     244:	str	r0, [sp, #16]
     248:	bhi	4d4 <coda_expression_new+0x4d4>
     24c:	add	r0, pc, #8
     250:	ldr	r1, [sp, #16]
     254:	ldr	r0, [r0, r1, lsl #2]
     258:	mov	pc, r0
     25c:	.word	0x00000418
     260:	.word	0x0000042c
     264:	.word	0x000003d8
     268:	.word	0x00000470
     26c:	.word	0x000003b8
     270:	.word	0x000003d8
     274:	.word	0x000003b8
     278:	.word	0x000003d8
     27c:	.word	0x00000470
     280:	.word	0x00000470
     284:	.word	0x00000408
     288:	.word	0x00000470
     28c:	.word	0x000003d8
     290:	.word	0x000003d8
     294:	.word	0x000003d8
     298:	.word	0x000003d8
     29c:	.word	0x000003e8
     2a0:	.word	0x000003c8
     2a4:	.word	0x000004b4
     2a8:	.word	0x000004b4
     2ac:	.word	0x000004b4
     2b0:	.word	0x000004b4
     2b4:	.word	0x000004b4
     2b8:	.word	0x000003d8
     2bc:	.word	0x0000042c
     2c0:	.word	0x000003b8
     2c4:	.word	0x000003b8
     2c8:	.word	0x000003d8
     2cc:	.word	0x000003e8
     2d0:	.word	0x000003c8
     2d4:	.word	0x000003c8
     2d8:	.word	0x000003f8
     2dc:	.word	0x00000408
     2e0:	.word	0x00000408
     2e4:	.word	0x00000408
     2e8:	.word	0x00000408
     2ec:	.word	0x00000408
     2f0:	.word	0x00000408
     2f4:	.word	0x00000408
     2f8:	.word	0x000003f8
     2fc:	.word	0x000003b8
     300:	.word	0x000003b8
     304:	.word	0x00000470
     308:	.word	0x000003d8
     30c:	.word	0x000003d8
     310:	.word	0x000003d8
     314:	.word	0x000003b8
     318:	.word	0x000003b8
     31c:	.word	0x000003b8
     320:	.word	0x000003b8
     324:	.word	0x000003d8
     328:	.word	0x000003b8
     32c:	.word	0x000003b8
     330:	.word	0x000003b8
     334:	.word	0x000003b8
     338:	.word	0x000003e8
     33c:	.word	0x0000042c
     340:	.word	0x0000042c
     344:	.word	0x0000042c
     348:	.word	0x0000042c
     34c:	.word	0x00000418
     350:	.word	0x000003b8
     354:	.word	0x000003b8
     358:	.word	0x000003d8
     35c:	.word	0x000003d8
     360:	.word	0x000003d8
     364:	.word	0x000003c8
     368:	.word	0x000003e8
     36c:	.word	0x000003e8
     370:	.word	0x000003e8
     374:	.word	0x000003d8
     378:	.word	0x00000484
     37c:	.word	0x000003c8
     380:	.word	0x000003e8
     384:	.word	0x000003f8
     388:	.word	0x000003e8
     38c:	.word	0x000003e8
     390:	.word	0x000003e8
     394:	.word	0x0000042c
     398:	.word	0x000003c8
     39c:	.word	0x000003e8
     3a0:	.word	0x000003d8
     3a4:	.word	0x000003b8
     3a8:	.word	0x000003d8
     3ac:	.word	0x000003f8
     3b0:	.word	0x000003d8
     3b4:	.word	0x00000470
     3b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3bc:	movw	r1, #0
     3c0:	str	r1, [r0, #4]
     3c4:	b	4d4 <coda_expression_new+0x4d4>
     3c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3cc:	movw	r1, #2
     3d0:	str	r1, [r0, #4]
     3d4:	b	4d4 <coda_expression_new+0x4d4>
     3d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3dc:	movw	r1, #1
     3e0:	str	r1, [r0, #4]
     3e4:	b	4d4 <coda_expression_new+0x4d4>
     3e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3ec:	movw	r1, #3
     3f0:	str	r1, [r0, #4]
     3f4:	b	4d4 <coda_expression_new+0x4d4>
     3f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3fc:	movw	r1, #5
     400:	str	r1, [r0, #4]
     404:	b	4d4 <coda_expression_new+0x4d4>
     408:	ldr	r0, [fp, #-24]	; 0xffffffe8
     40c:	movw	r1, #4
     410:	str	r1, [r0, #4]
     414:	b	4d4 <coda_expression_new+0x4d4>
     418:	ldr	r0, [fp, #-16]
     41c:	ldr	r0, [r0, #4]
     420:	ldr	r1, [fp, #-24]	; 0xffffffe8
     424:	str	r0, [r1, #4]
     428:	b	4d4 <coda_expression_new+0x4d4>
     42c:	ldr	r0, [fp, #-16]
     430:	ldr	r0, [r0, #4]
     434:	cmp	r0, #2
     438:	beq	44c <coda_expression_new+0x44c>
     43c:	ldr	r0, [fp, #-20]	; 0xffffffec
     440:	ldr	r0, [r0, #4]
     444:	cmp	r0, #2
     448:	bne	45c <coda_expression_new+0x45c>
     44c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     450:	movw	r1, #2
     454:	str	r1, [r0, #4]
     458:	b	46c <coda_expression_new+0x46c>
     45c:	ldr	r0, [fp, #-16]
     460:	ldr	r0, [r0, #4]
     464:	ldr	r1, [fp, #-24]	; 0xffffffe8
     468:	str	r0, [r1, #4]
     46c:	b	4d4 <coda_expression_new+0x4d4>
     470:	ldr	r0, [fp, #-20]	; 0xffffffec
     474:	ldr	r0, [r0, #4]
     478:	ldr	r1, [fp, #-24]	; 0xffffffe8
     47c:	str	r0, [r1, #4]
     480:	b	4d4 <coda_expression_new+0x4d4>
     484:	ldr	r0, [fp, #8]
     488:	movw	r1, #0
     48c:	cmp	r0, r1
     490:	bne	4a4 <coda_expression_new+0x4a4>
     494:	ldr	r0, [fp, #-24]	; 0xffffffe8
     498:	movw	r1, #0
     49c:	str	r1, [r0, #4]
     4a0:	b	4b0 <coda_expression_new+0x4b0>
     4a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4a8:	movw	r1, #3
     4ac:	str	r1, [r0, #4]
     4b0:	b	4d4 <coda_expression_new+0x4d4>
     4b4:	movw	r0, #0
     4b8:	movt	r0, #0
     4bc:	movw	r1, #0
     4c0:	movt	r1, #0
     4c4:	movw	r2, #541	; 0x21d
     4c8:	movw	r3, #0
     4cc:	movt	r3, #0
     4d0:	bl	0 <__assert_fail>
     4d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
     4d8:	ldr	r0, [r0]
     4dc:	sub	r1, r0, #27
     4e0:	cmp	r1, #2
     4e4:	str	r0, [sp, #12]
     4e8:	bcc	518 <coda_expression_new+0x518>
     4ec:	b	4f0 <coda_expression_new+0x4f0>
     4f0:	ldr	r0, [sp, #12]
     4f4:	sub	r1, r0, #67	; 0x43
     4f8:	cmp	r1, #4
     4fc:	bcc	518 <coda_expression_new+0x518>
     500:	b	504 <coda_expression_new+0x504>
     504:	ldr	r0, [sp, #12]
     508:	sub	r1, r0, #83	; 0x53
     50c:	cmp	r1, #2
     510:	bhi	528 <coda_expression_new+0x528>
     514:	b	518 <coda_expression_new+0x518>
     518:	ldr	r0, [fp, #-24]	; 0xffffffe8
     51c:	movw	r1, #0
     520:	str	r1, [r0, #8]
     524:	b	600 <coda_expression_new+0x600>
     528:	ldr	r0, [fp, #-24]	; 0xffffffe8
     52c:	ldr	r0, [r0, #4]
     530:	cmp	r0, #4
     534:	movw	r0, #0
     538:	str	r0, [sp, #8]
     53c:	beq	5f0 <coda_expression_new+0x5f0>
     540:	ldr	r0, [fp, #-16]
     544:	movw	r1, #0
     548:	cmp	r0, r1
     54c:	beq	568 <coda_expression_new+0x568>
     550:	ldr	r0, [fp, #-16]
     554:	ldr	r0, [r0, #8]
     558:	cmp	r0, #0
     55c:	movw	r0, #0
     560:	str	r0, [sp, #8]
     564:	beq	5f0 <coda_expression_new+0x5f0>
     568:	ldr	r0, [fp, #-20]	; 0xffffffec
     56c:	movw	r1, #0
     570:	cmp	r0, r1
     574:	beq	590 <coda_expression_new+0x590>
     578:	ldr	r0, [fp, #-20]	; 0xffffffec
     57c:	ldr	r0, [r0, #8]
     580:	cmp	r0, #0
     584:	movw	r0, #0
     588:	str	r0, [sp, #8]
     58c:	beq	5f0 <coda_expression_new+0x5f0>
     590:	ldr	r0, [fp, #8]
     594:	movw	r1, #0
     598:	cmp	r0, r1
     59c:	beq	5b8 <coda_expression_new+0x5b8>
     5a0:	ldr	r0, [fp, #8]
     5a4:	ldr	r0, [r0, #8]
     5a8:	cmp	r0, #0
     5ac:	movw	r0, #0
     5b0:	str	r0, [sp, #8]
     5b4:	beq	5f0 <coda_expression_new+0x5f0>
     5b8:	ldr	r0, [fp, #12]
     5bc:	movw	r1, #0
     5c0:	cmp	r0, r1
     5c4:	movw	r0, #1
     5c8:	str	r0, [sp, #4]
     5cc:	beq	5e8 <coda_expression_new+0x5e8>
     5d0:	ldr	r0, [fp, #12]
     5d4:	ldr	r0, [r0, #8]
     5d8:	cmp	r0, #0
     5dc:	movw	r0, #0
     5e0:	movne	r0, #1
     5e4:	str	r0, [sp, #4]
     5e8:	ldr	r0, [sp, #4]
     5ec:	str	r0, [sp, #8]
     5f0:	ldr	r0, [sp, #8]
     5f4:	and	r0, r0, #1
     5f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
     5fc:	str	r0, [r1, #8]
     600:	ldr	r0, [fp, #-24]	; 0xffffffe8
     604:	str	r0, [fp, #-4]
     608:	ldr	r0, [fp, #-4]
     60c:	mov	sp, fp
     610:	pop	{fp, pc}

00000614 <boolean_constant_new>:
     614:	push	{fp, lr}
     618:	mov	fp, sp
     61c:	sub	sp, sp, #24
     620:	str	r0, [fp, #-8]
     624:	movw	r0, #16
     628:	bl	0 <malloc>
     62c:	str	r0, [sp, #12]
     630:	ldr	r0, [sp, #12]
     634:	movw	lr, #0
     638:	cmp	r0, lr
     63c:	bne	678 <boolean_constant_new+0x64>
     640:	mvn	r0, #0
     644:	movw	r1, #0
     648:	movt	r1, #0
     64c:	movw	r2, #16
     650:	movw	r3, #0
     654:	movt	r3, #0
     658:	movw	ip, #232	; 0xe8
     65c:	str	ip, [sp]
     660:	bl	0 <coda_set_error>
     664:	ldr	r0, [fp, #-8]
     668:	bl	0 <free>
     66c:	movw	r0, #0
     670:	str	r0, [fp, #-4]
     674:	b	6ec <boolean_constant_new+0xd8>
     678:	ldr	r0, [sp, #12]
     67c:	movw	r1, #18
     680:	str	r1, [r0]
     684:	ldr	r0, [sp, #12]
     688:	movw	r1, #0
     68c:	str	r1, [r0, #4]
     690:	ldr	r0, [sp, #12]
     694:	movw	r1, #1
     698:	str	r1, [r0, #8]
     69c:	ldr	r0, [fp, #-8]
     6a0:	ldrb	r0, [r0]
     6a4:	cmp	r0, #116	; 0x74
     6a8:	movw	r0, #1
     6ac:	str	r0, [sp, #8]
     6b0:	beq	6cc <boolean_constant_new+0xb8>
     6b4:	ldr	r0, [fp, #-8]
     6b8:	ldrb	r0, [r0]
     6bc:	cmp	r0, #84	; 0x54
     6c0:	movw	r0, #0
     6c4:	moveq	r0, #1
     6c8:	str	r0, [sp, #8]
     6cc:	ldr	r0, [sp, #8]
     6d0:	and	r0, r0, #1
     6d4:	ldr	r1, [sp, #12]
     6d8:	str	r0, [r1, #12]
     6dc:	ldr	r0, [fp, #-8]
     6e0:	bl	0 <free>
     6e4:	ldr	r0, [sp, #12]
     6e8:	str	r0, [fp, #-4]
     6ec:	ldr	r0, [fp, #-4]
     6f0:	mov	sp, fp
     6f4:	pop	{fp, pc}

000006f8 <float_constant_new>:
     6f8:	push	{fp, lr}
     6fc:	mov	fp, sp
     700:	sub	sp, sp, #40	; 0x28
     704:	str	r0, [fp, #-8]
     708:	ldr	r0, [fp, #-8]
     70c:	ldr	r1, [fp, #-8]
     710:	str	r0, [sp, #12]
     714:	mov	r0, r1
     718:	bl	0 <strlen>
     71c:	ldr	r1, [sp, #12]
     720:	str	r0, [sp, #8]
     724:	mov	r0, r1
     728:	ldr	r1, [sp, #8]
     72c:	add	r2, sp, #16
     730:	movw	r3, #0
     734:	bl	0 <coda_ascii_parse_double>
     738:	cmp	r0, #0
     73c:	bge	754 <float_constant_new+0x5c>
     740:	ldr	r0, [fp, #-8]
     744:	bl	0 <free>
     748:	movw	r0, #0
     74c:	str	r0, [fp, #-4]
     750:	b	7e0 <float_constant_new+0xe8>
     754:	ldr	r0, [fp, #-8]
     758:	bl	0 <free>
     75c:	movw	r0, #24
     760:	bl	0 <malloc>
     764:	str	r0, [fp, #-12]
     768:	ldr	r0, [fp, #-12]
     76c:	movw	lr, #0
     770:	cmp	r0, lr
     774:	bne	7a8 <float_constant_new+0xb0>
     778:	mvn	r0, #0
     77c:	movw	r1, #0
     780:	movt	r1, #0
     784:	movw	r2, #24
     788:	movw	r3, #0
     78c:	movt	r3, #0
     790:	movw	ip, #261	; 0x105
     794:	str	ip, [sp]
     798:	bl	0 <coda_set_error>
     79c:	movw	r0, #0
     7a0:	str	r0, [fp, #-4]
     7a4:	b	7e0 <float_constant_new+0xe8>
     7a8:	ldr	r0, [fp, #-12]
     7ac:	movw	r1, #19
     7b0:	str	r1, [r0]
     7b4:	ldr	r0, [fp, #-12]
     7b8:	movw	r1, #2
     7bc:	str	r1, [r0, #4]
     7c0:	ldr	r0, [fp, #-12]
     7c4:	movw	r1, #1
     7c8:	str	r1, [r0, #8]
     7cc:	vldr	d16, [sp, #16]
     7d0:	ldr	r0, [fp, #-12]
     7d4:	vstr	d16, [r0, #16]
     7d8:	ldr	r0, [fp, #-12]
     7dc:	str	r0, [fp, #-4]
     7e0:	ldr	r0, [fp, #-4]
     7e4:	mov	sp, fp
     7e8:	pop	{fp, pc}

000007ec <integer_constant_new>:
     7ec:	push	{fp, lr}
     7f0:	mov	fp, sp
     7f4:	sub	sp, sp, #40	; 0x28
     7f8:	str	r0, [fp, #-8]
     7fc:	ldr	r0, [fp, #-8]
     800:	ldr	r1, [fp, #-8]
     804:	str	r0, [sp, #12]
     808:	mov	r0, r1
     80c:	bl	0 <strlen>
     810:	ldr	r1, [sp, #12]
     814:	str	r0, [sp, #8]
     818:	mov	r0, r1
     81c:	ldr	r1, [sp, #8]
     820:	add	r2, sp, #16
     824:	movw	r3, #0
     828:	bl	0 <coda_ascii_parse_int64>
     82c:	cmp	r0, #0
     830:	bge	848 <integer_constant_new+0x5c>
     834:	ldr	r0, [fp, #-8]
     838:	bl	0 <free>
     83c:	movw	r0, #0
     840:	str	r0, [fp, #-4]
     844:	b	8d8 <integer_constant_new+0xec>
     848:	ldr	r0, [fp, #-8]
     84c:	bl	0 <free>
     850:	movw	r0, #24
     854:	bl	0 <malloc>
     858:	str	r0, [fp, #-12]
     85c:	ldr	r0, [fp, #-12]
     860:	movw	lr, #0
     864:	cmp	r0, lr
     868:	bne	89c <integer_constant_new+0xb0>
     86c:	mvn	r0, #0
     870:	movw	r1, #0
     874:	movt	r1, #0
     878:	movw	r2, #24
     87c:	movw	r3, #0
     880:	movt	r3, #0
     884:	movw	ip, #288	; 0x120
     888:	str	ip, [sp]
     88c:	bl	0 <coda_set_error>
     890:	movw	r0, #0
     894:	str	r0, [fp, #-4]
     898:	b	8d8 <integer_constant_new+0xec>
     89c:	ldr	r0, [fp, #-12]
     8a0:	mov	r1, #20
     8a4:	str	r1, [r0]
     8a8:	ldr	r0, [fp, #-12]
     8ac:	mov	r1, #1
     8b0:	str	r1, [r0, #4]
     8b4:	ldr	r0, [fp, #-12]
     8b8:	str	r1, [r0, #8]
     8bc:	ldr	r0, [sp, #16]
     8c0:	ldr	r1, [sp, #20]
     8c4:	ldr	r2, [fp, #-12]
     8c8:	str	r1, [r2, #20]
     8cc:	str	r0, [r2, #16]
     8d0:	ldr	r0, [fp, #-12]
     8d4:	str	r0, [fp, #-4]
     8d8:	ldr	r0, [fp, #-4]
     8dc:	mov	sp, fp
     8e0:	pop	{fp, pc}

000008e4 <rawstring_constant_new>:
     8e4:	push	{fp, lr}
     8e8:	mov	fp, sp
     8ec:	sub	sp, sp, #16
     8f0:	str	r0, [sp, #8]
     8f4:	movw	r0, #20
     8f8:	bl	0 <malloc>
     8fc:	str	r0, [sp, #4]
     900:	ldr	r0, [sp, #4]
     904:	movw	lr, #0
     908:	cmp	r0, lr
     90c:	bne	940 <rawstring_constant_new+0x5c>
     910:	mvn	r0, #0
     914:	movw	r1, #0
     918:	movt	r1, #0
     91c:	movw	r2, #20
     920:	movw	r3, #0
     924:	movt	r3, #0
     928:	movw	ip, #307	; 0x133
     92c:	str	ip, [sp]
     930:	bl	0 <coda_set_error>
     934:	movw	r0, #0
     938:	str	r0, [fp, #-4]
     93c:	b	988 <rawstring_constant_new+0xa4>
     940:	ldr	r0, [sp, #4]
     944:	movw	r1, #21
     948:	str	r1, [r0]
     94c:	ldr	r0, [sp, #4]
     950:	movw	r1, #3
     954:	str	r1, [r0, #4]
     958:	ldr	r0, [sp, #4]
     95c:	movw	r1, #1
     960:	str	r1, [r0, #8]
     964:	ldr	r0, [sp, #8]
     968:	bl	0 <strlen>
     96c:	ldr	r1, [sp, #4]
     970:	str	r0, [r1, #12]
     974:	ldr	r0, [sp, #8]
     978:	ldr	r1, [sp, #4]
     97c:	str	r0, [r1, #16]
     980:	ldr	r0, [sp, #4]
     984:	str	r0, [fp, #-4]
     988:	ldr	r0, [fp, #-4]
     98c:	mov	sp, fp
     990:	pop	{fp, pc}

00000994 <string_constant_new>:
     994:	push	{fp, lr}
     998:	mov	fp, sp
     99c:	sub	sp, sp, #24
     9a0:	str	r0, [fp, #-8]
     9a4:	ldr	r0, [fp, #-8]
     9a8:	bl	d8a8 <decode_escaped_string>
     9ac:	str	r0, [sp, #8]
     9b0:	ldr	r0, [sp, #8]
     9b4:	cmp	r0, #0
     9b8:	bge	9d0 <string_constant_new+0x3c>
     9bc:	ldr	r0, [fp, #-8]
     9c0:	bl	0 <free>
     9c4:	movw	r0, #0
     9c8:	str	r0, [fp, #-4]
     9cc:	b	a60 <string_constant_new+0xcc>
     9d0:	movw	r0, #20
     9d4:	bl	0 <malloc>
     9d8:	str	r0, [sp, #12]
     9dc:	ldr	r0, [sp, #12]
     9e0:	movw	lr, #0
     9e4:	cmp	r0, lr
     9e8:	bne	a1c <string_constant_new+0x88>
     9ec:	mvn	r0, #0
     9f0:	movw	r1, #0
     9f4:	movt	r1, #0
     9f8:	movw	r2, #20
     9fc:	movw	r3, #0
     a00:	movt	r3, #0
     a04:	movw	ip, #335	; 0x14f
     a08:	str	ip, [sp]
     a0c:	bl	0 <coda_set_error>
     a10:	movw	r0, #0
     a14:	str	r0, [fp, #-4]
     a18:	b	a60 <string_constant_new+0xcc>
     a1c:	ldr	r0, [sp, #12]
     a20:	movw	r1, #22
     a24:	str	r1, [r0]
     a28:	ldr	r0, [sp, #12]
     a2c:	movw	r1, #3
     a30:	str	r1, [r0, #4]
     a34:	ldr	r0, [sp, #12]
     a38:	movw	r1, #1
     a3c:	str	r1, [r0, #8]
     a40:	ldr	r0, [sp, #8]
     a44:	ldr	r1, [sp, #12]
     a48:	str	r0, [r1, #12]
     a4c:	ldr	r0, [fp, #-8]
     a50:	ldr	r1, [sp, #12]
     a54:	str	r0, [r1, #16]
     a58:	ldr	r0, [sp, #12]
     a5c:	str	r0, [fp, #-4]
     a60:	ldr	r0, [fp, #-4]
     a64:	mov	sp, fp
     a68:	pop	{fp, pc}

00000a6c <coda_expression_delete>:
     a6c:	push	{fp, lr}
     a70:	mov	fp, sp
     a74:	sub	sp, sp, #16
     a78:	str	r0, [fp, #-4]
     a7c:	ldr	r0, [fp, #-4]
     a80:	ldr	r0, [r0]
     a84:	sub	r1, r0, #18
     a88:	cmp	r1, #3
     a8c:	str	r0, [sp]
     a90:	bcc	aac <coda_expression_delete+0x40>
     a94:	b	a98 <coda_expression_delete+0x2c>
     a98:	ldr	r0, [sp]
     a9c:	sub	r1, r0, #21
     aa0:	cmp	r1, #2
     aa4:	bcc	ab0 <coda_expression_delete+0x44>
     aa8:	b	ad4 <coda_expression_delete+0x68>
     aac:	b	b60 <coda_expression_delete+0xf4>
     ab0:	ldr	r0, [fp, #-4]
     ab4:	ldr	r0, [r0, #16]
     ab8:	movw	r1, #0
     abc:	cmp	r0, r1
     ac0:	beq	ad0 <coda_expression_delete+0x64>
     ac4:	ldr	r0, [fp, #-4]
     ac8:	ldr	r0, [r0, #16]
     acc:	bl	0 <free>
     ad0:	b	b60 <coda_expression_delete+0xf4>
     ad4:	ldr	r0, [fp, #-4]
     ad8:	str	r0, [sp, #8]
     adc:	ldr	r0, [sp, #8]
     ae0:	ldr	r0, [r0, #12]
     ae4:	movw	r1, #0
     ae8:	cmp	r0, r1
     aec:	beq	afc <coda_expression_delete+0x90>
     af0:	ldr	r0, [sp, #8]
     af4:	ldr	r0, [r0, #12]
     af8:	bl	0 <free>
     afc:	movw	r0, #0
     b00:	str	r0, [sp, #4]
     b04:	ldr	r0, [sp, #4]
     b08:	cmp	r0, #4
     b0c:	bge	b5c <coda_expression_delete+0xf0>
     b10:	ldr	r0, [sp, #8]
     b14:	add	r0, r0, #16
     b18:	ldr	r1, [sp, #4]
     b1c:	add	r0, r0, r1, lsl #2
     b20:	ldr	r0, [r0]
     b24:	movw	r1, #0
     b28:	cmp	r0, r1
     b2c:	beq	b48 <coda_expression_delete+0xdc>
     b30:	ldr	r0, [sp, #8]
     b34:	add	r0, r0, #16
     b38:	ldr	r1, [sp, #4]
     b3c:	add	r0, r0, r1, lsl #2
     b40:	ldr	r0, [r0]
     b44:	bl	a6c <coda_expression_delete>
     b48:	b	b4c <coda_expression_delete+0xe0>
     b4c:	ldr	r0, [sp, #4]
     b50:	add	r0, r0, #1
     b54:	str	r0, [sp, #4]
     b58:	b	b04 <coda_expression_delete+0x98>
     b5c:	b	b60 <coda_expression_delete+0xf4>
     b60:	ldr	r0, [fp, #-4]
     b64:	bl	0 <free>
     b68:	mov	sp, fp
     b6c:	pop	{fp, pc}

00000b70 <coda_expression_eval_void>:
     b70:	push	{r4, r5, fp, lr}
     b74:	add	fp, sp, #8
     b78:	sub	sp, sp, #584	; 0x248
     b7c:	str	r0, [fp, #-16]
     b80:	str	r1, [fp, #-20]	; 0xffffffec
     b84:	ldr	r0, [fp, #-16]
     b88:	ldr	r0, [r0, #4]
     b8c:	cmp	r0, #5
     b90:	beq	bb0 <coda_expression_eval_void+0x40>
     b94:	mvn	r0, #99	; 0x63
     b98:	movw	r1, #0
     b9c:	movt	r1, #0
     ba0:	bl	0 <coda_set_error>
     ba4:	mvn	r0, #0
     ba8:	str	r0, [fp, #-12]
     bac:	b	c08 <coda_expression_eval_void+0x98>
     bb0:	ldr	r0, [fp, #-20]	; 0xffffffec
     bb4:	movw	r1, #0
     bb8:	cmp	r0, r1
     bbc:	bne	bec <coda_expression_eval_void+0x7c>
     bc0:	ldr	r0, [fp, #-16]
     bc4:	ldr	r0, [r0, #8]
     bc8:	cmp	r0, #0
     bcc:	bne	bec <coda_expression_eval_void+0x7c>
     bd0:	mvn	r0, #99	; 0x63
     bd4:	movw	r1, #0
     bd8:	movt	r1, #0
     bdc:	bl	0 <coda_set_error>
     be0:	mvn	r0, #0
     be4:	str	r0, [fp, #-12]
     be8:	b	c08 <coda_expression_eval_void+0x98>
     bec:	ldr	r1, [fp, #-20]	; 0xffffffec
     bf0:	mov	r0, sp
     bf4:	bl	c14 <init_eval_info>
     bf8:	ldr	r1, [fp, #-16]
     bfc:	mov	r0, sp
     c00:	bl	ca0 <eval_void>
     c04:	str	r0, [fp, #-12]
     c08:	ldr	r0, [fp, #-12]
     c0c:	sub	sp, fp, #8
     c10:	pop	{r4, r5, fp, pc}

00000c14 <init_eval_info>:
     c14:	push	{fp, lr}
     c18:	mov	fp, sp
     c1c:	sub	sp, sp, #8
     c20:	str	r0, [sp, #4]
     c24:	str	r1, [sp]
     c28:	ldr	r0, [sp]
     c2c:	ldr	r1, [sp, #4]
     c30:	str	r0, [r1]
     c34:	ldr	r0, [sp]
     c38:	movw	r1, #0
     c3c:	cmp	r0, r1
     c40:	beq	c58 <init_eval_info+0x44>
     c44:	ldr	r0, [sp, #4]
     c48:	add	r0, r0, #8
     c4c:	ldr	r1, [sp]
     c50:	movw	r2, #520	; 0x208
     c54:	bl	0 <memcpy>
     c58:	ldr	r0, [sp, #4]
     c5c:	mov	r1, #0
     c60:	str	r1, [r0, #532]	; 0x214
     c64:	str	r1, [r0, #528]	; 0x210
     c68:	ldr	r0, [sp, #4]
     c6c:	str	r1, [r0, #540]	; 0x21c
     c70:	str	r1, [r0, #536]	; 0x218
     c74:	ldr	r0, [sp, #4]
     c78:	str	r1, [r0, #548]	; 0x224
     c7c:	str	r1, [r0, #544]	; 0x220
     c80:	ldr	r0, [sp, #4]
     c84:	str	r1, [r0, #556]	; 0x22c
     c88:	str	r1, [r0, #552]	; 0x228
     c8c:	ldr	r0, [sp, #4]
     c90:	movw	r1, #0
     c94:	str	r1, [r0, #560]	; 0x230
     c98:	mov	sp, fp
     c9c:	pop	{fp, pc}

00000ca0 <eval_void>:
     ca0:	push	{fp, lr}
     ca4:	mov	fp, sp
     ca8:	sub	sp, sp, #104	; 0x68
     cac:	str	r0, [fp, #-8]
     cb0:	str	r1, [fp, #-12]
     cb4:	ldr	r0, [fp, #-12]
     cb8:	str	r0, [fp, #-16]
     cbc:	ldr	r0, [fp, #-16]
     cc0:	ldr	r0, [r0]
     cc4:	cmp	r0, #31
     cc8:	str	r0, [sp, #28]
     ccc:	beq	d04 <eval_void+0x64>
     cd0:	b	cd4 <eval_void+0x34>
     cd4:	ldr	r0, [sp, #28]
     cd8:	cmp	r0, #39	; 0x27
     cdc:	beq	fa0 <eval_void+0x300>
     ce0:	b	ce4 <eval_void+0x44>
     ce4:	ldr	r0, [sp, #28]
     ce8:	cmp	r0, #74	; 0x4a
     cec:	beq	fc8 <eval_void+0x328>
     cf0:	b	cf4 <eval_void+0x54>
     cf4:	ldr	r0, [sp, #28]
     cf8:	cmp	r0, #84	; 0x54
     cfc:	beq	1014 <eval_void+0x374>
     d00:	b	110c <eval_void+0x46c>
     d04:	mov	r0, #0
     d08:	str	r0, [fp, #-44]	; 0xffffffd4
     d0c:	mov	r0, #1
     d10:	str	r0, [fp, #-48]	; 0xffffffd0
     d14:	ldr	r0, [fp, #-16]
     d18:	ldr	r0, [r0, #12]
     d1c:	ldrb	r0, [r0]
     d20:	sub	r0, r0, #105	; 0x69
     d24:	str	r0, [sp, #52]	; 0x34
     d28:	ldr	r0, [fp, #-8]
     d2c:	ldr	r1, [sp, #52]	; 0x34
     d30:	add	r0, r0, r1, lsl #3
     d34:	ldr	r1, [r0, #528]	; 0x210
     d38:	ldr	r0, [r0, #532]	; 0x214
     d3c:	str	r0, [fp, #-20]	; 0xffffffec
     d40:	str	r1, [fp, #-24]	; 0xffffffe8
     d44:	ldr	r0, [fp, #-8]
     d48:	ldr	r1, [fp, #-16]
     d4c:	ldr	r1, [r1, #16]
     d50:	sub	r2, fp, #32
     d54:	bl	70a8 <eval_integer>
     d58:	cmp	r0, #0
     d5c:	beq	d6c <eval_void+0xcc>
     d60:	mvn	r0, #0
     d64:	str	r0, [fp, #-4]
     d68:	b	1134 <eval_void+0x494>
     d6c:	ldr	r0, [fp, #-8]
     d70:	ldr	r1, [fp, #-16]
     d74:	ldr	r1, [r1, #20]
     d78:	sub	r2, fp, #40	; 0x28
     d7c:	bl	70a8 <eval_integer>
     d80:	cmp	r0, #0
     d84:	beq	d94 <eval_void+0xf4>
     d88:	mvn	r0, #0
     d8c:	str	r0, [fp, #-4]
     d90:	b	1134 <eval_void+0x494>
     d94:	ldr	r0, [fp, #-16]
     d98:	ldr	r0, [r0, #24]
     d9c:	movw	r1, #0
     da0:	cmp	r0, r1
     da4:	beq	e08 <eval_void+0x168>
     da8:	ldr	r0, [fp, #-8]
     dac:	ldr	r1, [fp, #-16]
     db0:	ldr	r1, [r1, #24]
     db4:	sub	r2, fp, #48	; 0x30
     db8:	bl	70a8 <eval_integer>
     dbc:	cmp	r0, #0
     dc0:	beq	dd0 <eval_void+0x130>
     dc4:	mvn	r0, #0
     dc8:	str	r0, [fp, #-4]
     dcc:	b	1134 <eval_void+0x494>
     dd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
     dd4:	ldr	r1, [fp, #-44]	; 0xffffffd4
     dd8:	orr	r0, r0, r1
     ddc:	cmp	r0, #0
     de0:	bne	e04 <eval_void+0x164>
     de4:	b	de8 <eval_void+0x148>
     de8:	mvn	r0, #400	; 0x190
     dec:	movw	r1, #0
     df0:	movt	r1, #0
     df4:	bl	0 <coda_set_error>
     df8:	mvn	r0, #0
     dfc:	str	r0, [fp, #-4]
     e00:	b	1134 <eval_void+0x494>
     e04:	b	e08 <eval_void+0x168>
     e08:	ldr	r0, [fp, #-48]	; 0xffffffd0
     e0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
     e10:	subs	r0, r0, #1
     e14:	sbcs	r1, r1, #0
     e18:	str	r0, [sp, #24]
     e1c:	str	r1, [sp, #20]
     e20:	blt	ed4 <eval_void+0x234>
     e24:	b	e28 <eval_void+0x188>
     e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
     e2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     e30:	ldr	r2, [fp, #-8]
     e34:	ldr	r3, [sp, #52]	; 0x34
     e38:	add	r2, r2, r3, lsl #3
     e3c:	str	r1, [r2, #532]	; 0x214
     e40:	str	r0, [r2, #528]	; 0x210
     e44:	ldr	r0, [fp, #-8]
     e48:	ldr	r1, [sp, #52]	; 0x34
     e4c:	add	r0, r0, r1, lsl #3
     e50:	ldr	r1, [r0, #528]	; 0x210
     e54:	ldr	r0, [r0, #532]	; 0x214
     e58:	ldr	r2, [fp, #-40]	; 0xffffffd8
     e5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e60:	subs	r1, r2, r1
     e64:	sbcs	r0, r3, r0
     e68:	str	r1, [sp, #16]
     e6c:	str	r0, [sp, #12]
     e70:	blt	ed0 <eval_void+0x230>
     e74:	b	e78 <eval_void+0x1d8>
     e78:	ldr	r0, [fp, #-8]
     e7c:	ldr	r1, [fp, #-16]
     e80:	ldr	r1, [r1, #28]
     e84:	bl	ca0 <eval_void>
     e88:	cmp	r0, #0
     e8c:	beq	e9c <eval_void+0x1fc>
     e90:	mvn	r0, #0
     e94:	str	r0, [fp, #-4]
     e98:	b	1134 <eval_void+0x494>
     e9c:	b	ea0 <eval_void+0x200>
     ea0:	ldr	r0, [fp, #-48]	; 0xffffffd0
     ea4:	ldr	r1, [fp, #-44]	; 0xffffffd4
     ea8:	ldr	r2, [fp, #-8]
     eac:	ldr	r3, [sp, #52]	; 0x34
     eb0:	add	r2, r2, r3, lsl #3
     eb4:	ldr	r3, [r2, #528]	; 0x210
     eb8:	ldr	ip, [r2, #532]	; 0x214
     ebc:	adds	r0, r3, r0
     ec0:	adc	r1, ip, r1
     ec4:	str	r0, [r2, #528]	; 0x210
     ec8:	str	r1, [r2, #532]	; 0x214
     ecc:	b	e44 <eval_void+0x1a4>
     ed0:	b	f80 <eval_void+0x2e0>
     ed4:	ldr	r0, [fp, #-32]	; 0xffffffe0
     ed8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     edc:	ldr	r2, [fp, #-8]
     ee0:	ldr	r3, [sp, #52]	; 0x34
     ee4:	add	r2, r2, r3, lsl #3
     ee8:	str	r1, [r2, #532]	; 0x214
     eec:	str	r0, [r2, #528]	; 0x210
     ef0:	ldr	r0, [fp, #-8]
     ef4:	ldr	r1, [sp, #52]	; 0x34
     ef8:	add	r0, r0, r1, lsl #3
     efc:	ldr	r1, [r0, #528]	; 0x210
     f00:	ldr	r0, [r0, #532]	; 0x214
     f04:	ldr	r2, [fp, #-40]	; 0xffffffd8
     f08:	ldr	r3, [fp, #-36]	; 0xffffffdc
     f0c:	subs	r1, r1, r2
     f10:	sbcs	r0, r0, r3
     f14:	str	r1, [sp, #8]
     f18:	str	r0, [sp, #4]
     f1c:	blt	f7c <eval_void+0x2dc>
     f20:	b	f24 <eval_void+0x284>
     f24:	ldr	r0, [fp, #-8]
     f28:	ldr	r1, [fp, #-16]
     f2c:	ldr	r1, [r1, #28]
     f30:	bl	ca0 <eval_void>
     f34:	cmp	r0, #0
     f38:	beq	f48 <eval_void+0x2a8>
     f3c:	mvn	r0, #0
     f40:	str	r0, [fp, #-4]
     f44:	b	1134 <eval_void+0x494>
     f48:	b	f4c <eval_void+0x2ac>
     f4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
     f50:	ldr	r1, [fp, #-44]	; 0xffffffd4
     f54:	ldr	r2, [fp, #-8]
     f58:	ldr	r3, [sp, #52]	; 0x34
     f5c:	add	r2, r2, r3, lsl #3
     f60:	ldr	r3, [r2, #528]	; 0x210
     f64:	ldr	ip, [r2, #532]	; 0x214
     f68:	adds	r0, r3, r0
     f6c:	adc	r1, ip, r1
     f70:	str	r0, [r2, #528]	; 0x210
     f74:	str	r1, [r2, #532]	; 0x214
     f78:	b	ef0 <eval_void+0x250>
     f7c:	b	f80 <eval_void+0x2e0>
     f80:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f84:	ldr	r1, [fp, #-20]	; 0xffffffec
     f88:	ldr	r2, [fp, #-8]
     f8c:	ldr	r3, [sp, #52]	; 0x34
     f90:	add	r2, r2, r3, lsl #3
     f94:	str	r1, [r2, #532]	; 0x214
     f98:	str	r0, [r2, #528]	; 0x210
     f9c:	b	112c <eval_void+0x48c>
     fa0:	ldr	r0, [fp, #-8]
     fa4:	ldr	r1, [fp, #-16]
     fa8:	ldr	r1, [r1, #16]
     fac:	bl	d2e4 <eval_cursor>
     fb0:	cmp	r0, #0
     fb4:	beq	fc4 <eval_void+0x324>
     fb8:	mvn	r0, #0
     fbc:	str	r0, [fp, #-4]
     fc0:	b	1134 <eval_void+0x494>
     fc4:	b	112c <eval_void+0x48c>
     fc8:	ldr	r0, [fp, #-8]
     fcc:	ldr	r1, [fp, #-16]
     fd0:	ldr	r1, [r1, #16]
     fd4:	bl	ca0 <eval_void>
     fd8:	cmp	r0, #0
     fdc:	beq	fec <eval_void+0x34c>
     fe0:	mvn	r0, #0
     fe4:	str	r0, [fp, #-4]
     fe8:	b	1134 <eval_void+0x494>
     fec:	ldr	r0, [fp, #-8]
     ff0:	ldr	r1, [fp, #-16]
     ff4:	ldr	r1, [r1, #20]
     ff8:	bl	ca0 <eval_void>
     ffc:	cmp	r0, #0
    1000:	beq	1010 <eval_void+0x370>
    1004:	mvn	r0, #0
    1008:	str	r0, [fp, #-4]
    100c:	b	1134 <eval_void+0x494>
    1010:	b	112c <eval_void+0x48c>
    1014:	mov	r0, #0
    1018:	str	r0, [sp, #44]	; 0x2c
    101c:	str	r0, [sp, #40]	; 0x28
    1020:	ldr	r0, [fp, #-8]
    1024:	ldr	r0, [r0]
    1028:	movw	r1, #0
    102c:	cmp	r0, r1
    1030:	beq	1038 <eval_void+0x398>
    1034:	b	1058 <eval_void+0x3b8>
    1038:	movw	r0, #0
    103c:	movt	r0, #0
    1040:	movw	r1, #0
    1044:	movt	r1, #0
    1048:	movw	r2, #3881	; 0xf29
    104c:	movw	r3, #0
    1050:	movt	r3, #0
    1054:	bl	0 <__assert_fail>
    1058:	ldr	r0, [fp, #-16]
    105c:	ldr	r0, [r0, #16]
    1060:	movw	r1, #0
    1064:	cmp	r0, r1
    1068:	beq	1098 <eval_void+0x3f8>
    106c:	ldr	r0, [fp, #-8]
    1070:	ldr	r1, [fp, #-16]
    1074:	ldr	r1, [r1, #16]
    1078:	add	r2, sp, #40	; 0x28
    107c:	bl	70a8 <eval_integer>
    1080:	cmp	r0, #0
    1084:	beq	1094 <eval_void+0x3f4>
    1088:	mvn	r0, #0
    108c:	str	r0, [fp, #-4]
    1090:	b	1134 <eval_void+0x494>
    1094:	b	1098 <eval_void+0x3f8>
    1098:	ldr	r0, [fp, #-8]
    109c:	ldr	r1, [fp, #-16]
    10a0:	ldr	r1, [r1, #20]
    10a4:	add	r2, sp, #32
    10a8:	bl	70a8 <eval_integer>
    10ac:	cmp	r0, #0
    10b0:	beq	10c0 <eval_void+0x420>
    10b4:	mvn	r0, #0
    10b8:	str	r0, [fp, #-4]
    10bc:	b	1134 <eval_void+0x494>
    10c0:	ldr	r0, [fp, #-8]
    10c4:	ldr	r0, [r0]
    10c8:	ldr	r0, [r0]
    10cc:	ldr	r1, [fp, #-16]
    10d0:	ldr	r1, [r1, #12]
    10d4:	ldr	r2, [sp, #40]	; 0x28
    10d8:	add	r3, sp, #48	; 0x30
    10dc:	bl	0 <coda_product_variable_get_pointer>
    10e0:	cmp	r0, #0
    10e4:	beq	10f4 <eval_void+0x454>
    10e8:	mvn	r0, #0
    10ec:	str	r0, [fp, #-4]
    10f0:	b	1134 <eval_void+0x494>
    10f4:	ldr	r0, [sp, #32]
    10f8:	ldr	r1, [sp, #36]	; 0x24
    10fc:	ldr	r2, [sp, #48]	; 0x30
    1100:	str	r1, [r2, #4]
    1104:	str	r0, [r2]
    1108:	b	112c <eval_void+0x48c>
    110c:	movw	r0, #0
    1110:	movt	r0, #0
    1114:	movw	r1, #0
    1118:	movt	r1, #0
    111c:	movw	r2, #3902	; 0xf3e
    1120:	movw	r3, #0
    1124:	movt	r3, #0
    1128:	bl	0 <__assert_fail>
    112c:	movw	r0, #0
    1130:	str	r0, [fp, #-4]
    1134:	ldr	r0, [fp, #-4]
    1138:	mov	sp, fp
    113c:	pop	{fp, pc}

00001140 <coda_expression_print_html>:
    1140:	push	{fp, lr}
    1144:	mov	fp, sp
    1148:	sub	sp, sp, #16
    114c:	str	r0, [fp, #-4]
    1150:	str	r1, [sp, #8]
    1154:	ldr	r0, [fp, #-4]
    1158:	ldr	r1, [sp, #8]
    115c:	movw	r2, #1
    1160:	str	r2, [sp, #4]
    1164:	ldr	r3, [sp, #4]
    1168:	movw	ip, #15
    116c:	str	ip, [sp]
    1170:	bl	117c <print_expression>
    1174:	mov	sp, fp
    1178:	pop	{fp, pc}

0000117c <print_expression>:
    117c:	push	{r4, r5, fp, lr}
    1180:	add	fp, sp, #8
    1184:	sub	sp, sp, #840	; 0x348
    1188:	sub	sp, sp, #1024	; 0x400
    118c:	ldr	ip, [fp, #8]
    1190:	str	r0, [fp, #-12]
    1194:	str	r1, [fp, #-16]
    1198:	str	r2, [fp, #-20]	; 0xffffffec
    119c:	str	r3, [fp, #-24]	; 0xffffffe8
    11a0:	ldr	r0, [fp, #-12]
    11a4:	movw	r1, #0
    11a8:	cmp	r0, r1
    11ac:	str	ip, [fp, #-76]	; 0xffffffb4
    11b0:	beq	11b8 <print_expression+0x3c>
    11b4:	b	11d8 <print_expression+0x5c>
    11b8:	movw	r0, #0
    11bc:	movt	r0, #0
    11c0:	movw	r1, #0
    11c4:	movt	r1, #0
    11c8:	movw	r2, #4196	; 0x1064
    11cc:	movw	r3, #0
    11d0:	movt	r3, #0
    11d4:	bl	0 <__assert_fail>
    11d8:	ldr	r0, [fp, #-12]
    11dc:	ldr	r0, [r0]
    11e0:	cmp	r0, #86	; 0x56
    11e4:	str	r0, [fp, #-80]	; 0xffffffb0
    11e8:	bhi	4cd8 <print_expression+0x3b5c>
    11ec:	add	r0, pc, #8
    11f0:	ldr	r1, [fp, #-80]	; 0xffffffb0
    11f4:	ldr	r0, [r0, r1, lsl #2]
    11f8:	mov	pc, r0
    11fc:	.word	0x00001358
    1200:	.word	0x000013e4
    1204:	.word	0x00001810
    1208:	.word	0x000014b0
    120c:	.word	0x00001738
    1210:	.word	0x000019a0
    1214:	.word	0x00001a78
    1218:	.word	0x00001b50
    121c:	.word	0x00001588
    1220:	.word	0x00001660
    1224:	.word	0x00001c28
    1228:	.word	0x00004b20
    122c:	.word	0x00001c6c
    1230:	.word	0x00001cf8
    1234:	.word	0x00001d84
    1238:	.word	0x00001e10
    123c:	.word	0x00001e9c
    1240:	.word	0x00001914
    1244:	.word	0x00001ff0
    1248:	.word	0x00002088
    124c:	.word	0x000020c0
    1250:	.word	0x00002108
    1254:	.word	0x00002108
    1258:	.word	0x000021bc
    125c:	.word	0x00002294
    1260:	.word	0x00002360
    1264:	.word	0x0000242c
    1268:	.word	0x000024b8
    126c:	.word	0x000024fc
    1270:	.word	0x00002540
    1274:	.word	0x000025cc
    1278:	.word	0x00002658
    127c:	.word	0x00002838
    1280:	.word	0x000028d8
    1284:	.word	0x0000293c
    1288:	.word	0x00002960
    128c:	.word	0x000029e4
    1290:	.word	0x00002a08
    1294:	.word	0x00002a7c
    1298:	.word	0x00002aa0
    129c:	.word	0x00002b2c
    12a0:	.word	0x00002c30
    12a4:	.word	0x00002d34
    12a8:	.word	0x00002e34
    12ac:	.word	0x00002ec0
    12b0:	.word	0x00002f10
    12b4:	.word	0x00002f9c
    12b8:	.word	0x00003028
    12bc:	.word	0x000030b4
    12c0:	.word	0x00003140
    12c4:	.word	0x000031cc
    12c8:	.word	0x00003258
    12cc:	.word	0x0000335c
    12d0:	.word	0x00003460
    12d4:	.word	0x0000354c
    12d8:	.word	0x00003638
    12dc:	.word	0x000036c4
    12e0:	.word	0x0000379c
    12e4:	.word	0x00003874
    12e8:	.word	0x00003940
    12ec:	.word	0x00003a0c
    12f0:	.word	0x00003a5c
    12f4:	.word	0x00003b28
    12f8:	.word	0x00003b78
    12fc:	.word	0x00003c04
    1300:	.word	0x00003c90
    1304:	.word	0x00003d5c
    1308:	.word	0x00003e28
    130c:	.word	0x00003e6c
    1310:	.word	0x00003eb0
    1314:	.word	0x00003ef4
    1318:	.word	0x00003f38
    131c:	.word	0x00004078
    1320:	.word	0x00004104
    1324:	.word	0x00004190
    1328:	.word	0x00004224
    132c:	.word	0x00004318
    1330:	.word	0x0000440c
    1334:	.word	0x00004530
    1338:	.word	0x000045fc
    133c:	.word	0x000046d4
    1340:	.word	0x00004760
    1344:	.word	0x00004838
    1348:	.word	0x000048d0
    134c:	.word	0x00004968
    1350:	.word	0x00004a7c
    1354:	.word	0x00004bf8
    1358:	ldr	r0, [fp, #-16]
    135c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1360:	cmp	r1, #0
    1364:	movw	r1, #0
    1368:	movne	r1, #1
    136c:	tst	r1, #1
    1370:	movw	r1, #0
    1374:	movt	r1, #0
    1378:	movw	r2, #0
    137c:	movt	r2, #0
    1380:	movne	r1, r2
    1384:	str	r0, [fp, #-84]	; 0xffffffac
    1388:	mov	r0, r1
    138c:	ldr	r1, [fp, #-84]	; 0xffffffac
    1390:	blx	r1
    1394:	ldr	r1, [fp, #-12]
    1398:	ldr	r1, [r1, #16]
    139c:	ldr	r2, [fp, #-16]
    13a0:	ldr	lr, [fp, #-20]	; 0xffffffec
    13a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13a8:	str	r0, [fp, #-88]	; 0xffffffa8
    13ac:	mov	r0, r1
    13b0:	mov	r1, r2
    13b4:	mov	r2, lr
    13b8:	movw	lr, #15
    13bc:	str	lr, [sp]
    13c0:	bl	117c <print_expression>
    13c4:	ldr	r1, [fp, #-16]
    13c8:	movw	r2, #0
    13cc:	movt	r2, #0
    13d0:	str	r0, [fp, #-92]	; 0xffffffa4
    13d4:	mov	r0, r2
    13d8:	blx	r1
    13dc:	str	r0, [fp, #-96]	; 0xffffffa0
    13e0:	b	4cd8 <print_expression+0x3b5c>
    13e4:	ldr	r0, [fp, #8]
    13e8:	cmp	r0, #4
    13ec:	bge	1410 <print_expression+0x294>
    13f0:	ldr	r0, [fp, #-16]
    13f4:	movw	r1, #0
    13f8:	movt	r1, #0
    13fc:	str	r0, [fp, #-100]	; 0xffffff9c
    1400:	mov	r0, r1
    1404:	ldr	r1, [fp, #-100]	; 0xffffff9c
    1408:	blx	r1
    140c:	str	r0, [fp, #-104]	; 0xffffff98
    1410:	ldr	r0, [fp, #-12]
    1414:	ldr	r0, [r0, #16]
    1418:	ldr	r1, [fp, #-16]
    141c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1420:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1424:	movw	ip, #4
    1428:	str	ip, [sp]
    142c:	bl	117c <print_expression>
    1430:	ldr	r1, [fp, #-16]
    1434:	movw	r2, #0
    1438:	movt	r2, #0
    143c:	str	r0, [fp, #-108]	; 0xffffff94
    1440:	mov	r0, r2
    1444:	blx	r1
    1448:	ldr	r1, [fp, #-12]
    144c:	ldr	r1, [r1, #20]
    1450:	ldr	r2, [fp, #-16]
    1454:	ldr	r3, [fp, #-20]	; 0xffffffec
    1458:	ldr	ip, [fp, #-24]	; 0xffffffe8
    145c:	str	r0, [fp, #-112]	; 0xffffff90
    1460:	mov	r0, r1
    1464:	mov	r1, r2
    1468:	mov	r2, r3
    146c:	mov	r3, ip
    1470:	movw	ip, #4
    1474:	str	ip, [sp]
    1478:	bl	117c <print_expression>
    147c:	ldr	r1, [fp, #8]
    1480:	cmp	r1, #4
    1484:	str	r0, [fp, #-116]	; 0xffffff8c
    1488:	bge	14ac <print_expression+0x330>
    148c:	ldr	r0, [fp, #-16]
    1490:	movw	r1, #0
    1494:	movt	r1, #0
    1498:	str	r0, [fp, #-120]	; 0xffffff88
    149c:	mov	r0, r1
    14a0:	ldr	r1, [fp, #-120]	; 0xffffff88
    14a4:	blx	r1
    14a8:	str	r0, [fp, #-124]	; 0xffffff84
    14ac:	b	4cd8 <print_expression+0x3b5c>
    14b0:	ldr	r0, [fp, #-16]
    14b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    14b8:	cmp	r1, #0
    14bc:	movw	r1, #0
    14c0:	movne	r1, #1
    14c4:	tst	r1, #1
    14c8:	movw	r1, #0
    14cc:	movt	r1, #0
    14d0:	movw	r2, #0
    14d4:	movt	r2, #0
    14d8:	movne	r1, r2
    14dc:	str	r0, [fp, #-128]	; 0xffffff80
    14e0:	mov	r0, r1
    14e4:	ldr	r1, [fp, #-128]	; 0xffffff80
    14e8:	blx	r1
    14ec:	ldr	r1, [fp, #-12]
    14f0:	ldr	r1, [r1, #16]
    14f4:	ldr	r2, [fp, #-16]
    14f8:	ldr	lr, [fp, #-20]	; 0xffffffec
    14fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1500:	str	r0, [fp, #-132]	; 0xffffff7c
    1504:	mov	r0, r1
    1508:	mov	r1, r2
    150c:	mov	r2, lr
    1510:	movw	lr, #15
    1514:	str	lr, [sp]
    1518:	bl	117c <print_expression>
    151c:	ldr	r1, [fp, #-16]
    1520:	movw	r2, #0
    1524:	movt	r2, #0
    1528:	str	r0, [fp, #-136]	; 0xffffff78
    152c:	mov	r0, r2
    1530:	blx	r1
    1534:	ldr	r1, [fp, #-12]
    1538:	ldr	r1, [r1, #20]
    153c:	ldr	r2, [fp, #-16]
    1540:	ldr	r3, [fp, #-20]	; 0xffffffec
    1544:	ldr	lr, [fp, #-24]	; 0xffffffe8
    1548:	str	r0, [fp, #-140]	; 0xffffff74
    154c:	mov	r0, r1
    1550:	mov	r1, r2
    1554:	mov	r2, r3
    1558:	mov	r3, lr
    155c:	movw	lr, #15
    1560:	str	lr, [sp]
    1564:	bl	117c <print_expression>
    1568:	ldr	r1, [fp, #-16]
    156c:	movw	r2, #0
    1570:	movt	r2, #0
    1574:	str	r0, [fp, #-144]	; 0xffffff70
    1578:	mov	r0, r2
    157c:	blx	r1
    1580:	str	r0, [fp, #-148]	; 0xffffff6c
    1584:	b	4cd8 <print_expression+0x3b5c>
    1588:	ldr	r0, [fp, #-16]
    158c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1590:	cmp	r1, #0
    1594:	movw	r1, #0
    1598:	movne	r1, #1
    159c:	tst	r1, #1
    15a0:	movw	r1, #0
    15a4:	movt	r1, #0
    15a8:	movw	r2, #0
    15ac:	movt	r2, #0
    15b0:	movne	r1, r2
    15b4:	str	r0, [fp, #-152]	; 0xffffff68
    15b8:	mov	r0, r1
    15bc:	ldr	r1, [fp, #-152]	; 0xffffff68
    15c0:	blx	r1
    15c4:	ldr	r1, [fp, #-12]
    15c8:	ldr	r1, [r1, #16]
    15cc:	ldr	r2, [fp, #-16]
    15d0:	ldr	lr, [fp, #-20]	; 0xffffffec
    15d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    15d8:	str	r0, [fp, #-156]	; 0xffffff64
    15dc:	mov	r0, r1
    15e0:	mov	r1, r2
    15e4:	mov	r2, lr
    15e8:	movw	lr, #15
    15ec:	str	lr, [sp]
    15f0:	bl	117c <print_expression>
    15f4:	ldr	r1, [fp, #-16]
    15f8:	movw	r2, #0
    15fc:	movt	r2, #0
    1600:	str	r0, [fp, #-160]	; 0xffffff60
    1604:	mov	r0, r2
    1608:	blx	r1
    160c:	ldr	r1, [fp, #-12]
    1610:	ldr	r1, [r1, #20]
    1614:	ldr	r2, [fp, #-16]
    1618:	ldr	r3, [fp, #-20]	; 0xffffffec
    161c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    1620:	str	r0, [fp, #-164]	; 0xffffff5c
    1624:	mov	r0, r1
    1628:	mov	r1, r2
    162c:	mov	r2, r3
    1630:	mov	r3, lr
    1634:	movw	lr, #15
    1638:	str	lr, [sp]
    163c:	bl	117c <print_expression>
    1640:	ldr	r1, [fp, #-16]
    1644:	movw	r2, #0
    1648:	movt	r2, #0
    164c:	str	r0, [fp, #-168]	; 0xffffff58
    1650:	mov	r0, r2
    1654:	blx	r1
    1658:	str	r0, [fp, #-172]	; 0xffffff54
    165c:	b	4cd8 <print_expression+0x3b5c>
    1660:	ldr	r0, [fp, #-16]
    1664:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1668:	cmp	r1, #0
    166c:	movw	r1, #0
    1670:	movne	r1, #1
    1674:	tst	r1, #1
    1678:	movw	r1, #0
    167c:	movt	r1, #0
    1680:	movw	r2, #0
    1684:	movt	r2, #0
    1688:	movne	r1, r2
    168c:	str	r0, [fp, #-176]	; 0xffffff50
    1690:	mov	r0, r1
    1694:	ldr	r1, [fp, #-176]	; 0xffffff50
    1698:	blx	r1
    169c:	ldr	r1, [fp, #-12]
    16a0:	ldr	r1, [r1, #16]
    16a4:	ldr	r2, [fp, #-16]
    16a8:	ldr	lr, [fp, #-20]	; 0xffffffec
    16ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    16b0:	str	r0, [fp, #-180]	; 0xffffff4c
    16b4:	mov	r0, r1
    16b8:	mov	r1, r2
    16bc:	mov	r2, lr
    16c0:	movw	lr, #15
    16c4:	str	lr, [sp]
    16c8:	bl	117c <print_expression>
    16cc:	ldr	r1, [fp, #-16]
    16d0:	movw	r2, #0
    16d4:	movt	r2, #0
    16d8:	str	r0, [fp, #-184]	; 0xffffff48
    16dc:	mov	r0, r2
    16e0:	blx	r1
    16e4:	ldr	r1, [fp, #-12]
    16e8:	ldr	r1, [r1, #20]
    16ec:	ldr	r2, [fp, #-16]
    16f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    16f4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    16f8:	str	r0, [fp, #-188]	; 0xffffff44
    16fc:	mov	r0, r1
    1700:	mov	r1, r2
    1704:	mov	r2, r3
    1708:	mov	r3, lr
    170c:	movw	lr, #15
    1710:	str	lr, [sp]
    1714:	bl	117c <print_expression>
    1718:	ldr	r1, [fp, #-16]
    171c:	movw	r2, #0
    1720:	movt	r2, #0
    1724:	str	r0, [fp, #-192]	; 0xffffff40
    1728:	mov	r0, r2
    172c:	blx	r1
    1730:	str	r0, [fp, #-196]	; 0xffffff3c
    1734:	b	4cd8 <print_expression+0x3b5c>
    1738:	ldr	r0, [fp, #-16]
    173c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1740:	cmp	r1, #0
    1744:	movw	r1, #0
    1748:	movne	r1, #1
    174c:	tst	r1, #1
    1750:	movw	r1, #0
    1754:	movt	r1, #0
    1758:	movw	r2, #0
    175c:	movt	r2, #0
    1760:	movne	r1, r2
    1764:	str	r0, [fp, #-200]	; 0xffffff38
    1768:	mov	r0, r1
    176c:	ldr	r1, [fp, #-200]	; 0xffffff38
    1770:	blx	r1
    1774:	ldr	r1, [fp, #-12]
    1778:	ldr	r1, [r1, #16]
    177c:	ldr	r2, [fp, #-16]
    1780:	ldr	lr, [fp, #-20]	; 0xffffffec
    1784:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1788:	str	r0, [fp, #-204]	; 0xffffff34
    178c:	mov	r0, r1
    1790:	mov	r1, r2
    1794:	mov	r2, lr
    1798:	movw	lr, #15
    179c:	str	lr, [sp]
    17a0:	bl	117c <print_expression>
    17a4:	ldr	r1, [fp, #-16]
    17a8:	movw	r2, #0
    17ac:	movt	r2, #0
    17b0:	str	r0, [fp, #-208]	; 0xffffff30
    17b4:	mov	r0, r2
    17b8:	blx	r1
    17bc:	ldr	r1, [fp, #-12]
    17c0:	ldr	r1, [r1, #20]
    17c4:	ldr	r2, [fp, #-16]
    17c8:	ldr	r3, [fp, #-20]	; 0xffffffec
    17cc:	ldr	lr, [fp, #-24]	; 0xffffffe8
    17d0:	str	r0, [fp, #-212]	; 0xffffff2c
    17d4:	mov	r0, r1
    17d8:	mov	r1, r2
    17dc:	mov	r2, r3
    17e0:	mov	r3, lr
    17e4:	movw	lr, #15
    17e8:	str	lr, [sp]
    17ec:	bl	117c <print_expression>
    17f0:	ldr	r1, [fp, #-16]
    17f4:	movw	r2, #0
    17f8:	movt	r2, #0
    17fc:	str	r0, [fp, #-216]	; 0xffffff28
    1800:	mov	r0, r2
    1804:	blx	r1
    1808:	str	r0, [fp, #-220]	; 0xffffff24
    180c:	b	4cd8 <print_expression+0x3b5c>
    1810:	ldr	r0, [fp, #8]
    1814:	cmp	r0, #7
    1818:	bge	183c <print_expression+0x6c0>
    181c:	ldr	r0, [fp, #-16]
    1820:	movw	r1, #0
    1824:	movt	r1, #0
    1828:	str	r0, [fp, #-224]	; 0xffffff20
    182c:	mov	r0, r1
    1830:	ldr	r1, [fp, #-224]	; 0xffffff20
    1834:	blx	r1
    1838:	str	r0, [fp, #-228]	; 0xffffff1c
    183c:	ldr	r0, [fp, #-12]
    1840:	ldr	r0, [r0, #16]
    1844:	ldr	r1, [fp, #-16]
    1848:	ldr	r2, [fp, #-20]	; 0xffffffec
    184c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1850:	movw	ip, #7
    1854:	str	ip, [sp]
    1858:	bl	117c <print_expression>
    185c:	ldr	r1, [fp, #-16]
    1860:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1864:	cmp	r2, #0
    1868:	movw	r2, #1
    186c:	str	r0, [fp, #-232]	; 0xffffff18
    1870:	str	r1, [fp, #-236]	; 0xffffff14
    1874:	str	r2, [fp, #-240]	; 0xffffff10
    1878:	bne	1890 <print_expression+0x714>
    187c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1880:	cmp	r0, #0
    1884:	movw	r0, #0
    1888:	movne	r0, #1
    188c:	str	r0, [fp, #-240]	; 0xffffff10
    1890:	ldr	r0, [fp, #-240]	; 0xffffff10
    1894:	tst	r0, #1
    1898:	movw	r0, #0
    189c:	movt	r0, #0
    18a0:	movw	r1, #0
    18a4:	movt	r1, #0
    18a8:	movne	r0, r1
    18ac:	ldr	r1, [fp, #-236]	; 0xffffff14
    18b0:	blx	r1
    18b4:	ldr	r1, [fp, #-12]
    18b8:	ldr	r1, [r1, #20]
    18bc:	ldr	lr, [fp, #-16]
    18c0:	ldr	r2, [fp, #-20]	; 0xffffffec
    18c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    18c8:	str	r0, [fp, #-244]	; 0xffffff0c
    18cc:	mov	r0, r1
    18d0:	mov	r1, lr
    18d4:	movw	lr, #7
    18d8:	str	lr, [sp]
    18dc:	bl	117c <print_expression>
    18e0:	ldr	r1, [fp, #8]
    18e4:	cmp	r1, #7
    18e8:	str	r0, [fp, #-248]	; 0xffffff08
    18ec:	bge	1910 <print_expression+0x794>
    18f0:	ldr	r0, [fp, #-16]
    18f4:	movw	r1, #0
    18f8:	movt	r1, #0
    18fc:	str	r0, [fp, #-252]	; 0xffffff04
    1900:	mov	r0, r1
    1904:	ldr	r1, [fp, #-252]	; 0xffffff04
    1908:	blx	r1
    190c:	str	r0, [fp, #-256]	; 0xffffff00
    1910:	b	4cd8 <print_expression+0x3b5c>
    1914:	ldr	r0, [fp, #-16]
    1918:	ldr	r1, [fp, #-24]	; 0xffffffe8
    191c:	cmp	r1, #0
    1920:	movw	r1, #0
    1924:	movne	r1, #1
    1928:	tst	r1, #1
    192c:	movw	r1, #0
    1930:	movt	r1, #0
    1934:	movw	r2, #0
    1938:	movt	r2, #0
    193c:	movne	r1, r2
    1940:	str	r0, [fp, #-260]	; 0xfffffefc
    1944:	mov	r0, r1
    1948:	ldr	r1, [fp, #-260]	; 0xfffffefc
    194c:	blx	r1
    1950:	ldr	r1, [fp, #-12]
    1954:	ldr	r1, [r1, #16]
    1958:	ldr	r2, [fp, #-16]
    195c:	ldr	lr, [fp, #-20]	; 0xffffffec
    1960:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1964:	str	r0, [fp, #-264]	; 0xfffffef8
    1968:	mov	r0, r1
    196c:	mov	r1, r2
    1970:	mov	r2, lr
    1974:	movw	lr, #15
    1978:	str	lr, [sp]
    197c:	bl	117c <print_expression>
    1980:	ldr	r1, [fp, #-16]
    1984:	movw	r2, #0
    1988:	movt	r2, #0
    198c:	str	r0, [fp, #-268]	; 0xfffffef4
    1990:	mov	r0, r2
    1994:	blx	r1
    1998:	str	r0, [fp, #-272]	; 0xfffffef0
    199c:	b	4cd8 <print_expression+0x3b5c>
    19a0:	ldr	r0, [fp, #-16]
    19a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    19a8:	cmp	r1, #0
    19ac:	movw	r1, #0
    19b0:	movne	r1, #1
    19b4:	tst	r1, #1
    19b8:	movw	r1, #0
    19bc:	movt	r1, #0
    19c0:	movw	r2, #0
    19c4:	movt	r2, #0
    19c8:	movne	r1, r2
    19cc:	str	r0, [fp, #-276]	; 0xfffffeec
    19d0:	mov	r0, r1
    19d4:	ldr	r1, [fp, #-276]	; 0xfffffeec
    19d8:	blx	r1
    19dc:	ldr	r1, [fp, #-12]
    19e0:	ldr	r1, [r1, #16]
    19e4:	ldr	r2, [fp, #-16]
    19e8:	ldr	lr, [fp, #-20]	; 0xffffffec
    19ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    19f0:	str	r0, [fp, #-280]	; 0xfffffee8
    19f4:	mov	r0, r1
    19f8:	mov	r1, r2
    19fc:	mov	r2, lr
    1a00:	movw	lr, #15
    1a04:	str	lr, [sp]
    1a08:	bl	117c <print_expression>
    1a0c:	ldr	r1, [fp, #-16]
    1a10:	movw	r2, #0
    1a14:	movt	r2, #0
    1a18:	str	r0, [fp, #-284]	; 0xfffffee4
    1a1c:	mov	r0, r2
    1a20:	blx	r1
    1a24:	ldr	r1, [fp, #-12]
    1a28:	ldr	r1, [r1, #20]
    1a2c:	ldr	r2, [fp, #-16]
    1a30:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a34:	ldr	lr, [fp, #-24]	; 0xffffffe8
    1a38:	str	r0, [fp, #-288]	; 0xfffffee0
    1a3c:	mov	r0, r1
    1a40:	mov	r1, r2
    1a44:	mov	r2, r3
    1a48:	mov	r3, lr
    1a4c:	movw	lr, #15
    1a50:	str	lr, [sp]
    1a54:	bl	117c <print_expression>
    1a58:	ldr	r1, [fp, #-16]
    1a5c:	movw	r2, #0
    1a60:	movt	r2, #0
    1a64:	str	r0, [fp, #-292]	; 0xfffffedc
    1a68:	mov	r0, r2
    1a6c:	blx	r1
    1a70:	str	r0, [fp, #-296]	; 0xfffffed8
    1a74:	b	4cd8 <print_expression+0x3b5c>
    1a78:	ldr	r0, [fp, #-16]
    1a7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1a80:	cmp	r1, #0
    1a84:	movw	r1, #0
    1a88:	movne	r1, #1
    1a8c:	tst	r1, #1
    1a90:	movw	r1, #0
    1a94:	movt	r1, #0
    1a98:	movw	r2, #0
    1a9c:	movt	r2, #0
    1aa0:	movne	r1, r2
    1aa4:	str	r0, [fp, #-300]	; 0xfffffed4
    1aa8:	mov	r0, r1
    1aac:	ldr	r1, [fp, #-300]	; 0xfffffed4
    1ab0:	blx	r1
    1ab4:	ldr	r1, [fp, #-12]
    1ab8:	ldr	r1, [r1, #16]
    1abc:	ldr	r2, [fp, #-16]
    1ac0:	ldr	lr, [fp, #-20]	; 0xffffffec
    1ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ac8:	str	r0, [fp, #-304]	; 0xfffffed0
    1acc:	mov	r0, r1
    1ad0:	mov	r1, r2
    1ad4:	mov	r2, lr
    1ad8:	movw	lr, #15
    1adc:	str	lr, [sp]
    1ae0:	bl	117c <print_expression>
    1ae4:	ldr	r1, [fp, #-16]
    1ae8:	movw	r2, #0
    1aec:	movt	r2, #0
    1af0:	str	r0, [fp, #-308]	; 0xfffffecc
    1af4:	mov	r0, r2
    1af8:	blx	r1
    1afc:	ldr	r1, [fp, #-12]
    1b00:	ldr	r1, [r1, #20]
    1b04:	ldr	r2, [fp, #-16]
    1b08:	ldr	r3, [fp, #-20]	; 0xffffffec
    1b0c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    1b10:	str	r0, [fp, #-312]	; 0xfffffec8
    1b14:	mov	r0, r1
    1b18:	mov	r1, r2
    1b1c:	mov	r2, r3
    1b20:	mov	r3, lr
    1b24:	movw	lr, #15
    1b28:	str	lr, [sp]
    1b2c:	bl	117c <print_expression>
    1b30:	ldr	r1, [fp, #-16]
    1b34:	movw	r2, #0
    1b38:	movt	r2, #0
    1b3c:	str	r0, [fp, #-316]	; 0xfffffec4
    1b40:	mov	r0, r2
    1b44:	blx	r1
    1b48:	str	r0, [fp, #-320]	; 0xfffffec0
    1b4c:	b	4cd8 <print_expression+0x3b5c>
    1b50:	ldr	r0, [fp, #-16]
    1b54:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1b58:	cmp	r1, #0
    1b5c:	movw	r1, #0
    1b60:	movne	r1, #1
    1b64:	tst	r1, #1
    1b68:	movw	r1, #0
    1b6c:	movt	r1, #0
    1b70:	movw	r2, #0
    1b74:	movt	r2, #0
    1b78:	movne	r1, r2
    1b7c:	str	r0, [fp, #-324]	; 0xfffffebc
    1b80:	mov	r0, r1
    1b84:	ldr	r1, [fp, #-324]	; 0xfffffebc
    1b88:	blx	r1
    1b8c:	ldr	r1, [fp, #-12]
    1b90:	ldr	r1, [r1, #16]
    1b94:	ldr	r2, [fp, #-16]
    1b98:	ldr	lr, [fp, #-20]	; 0xffffffec
    1b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1ba0:	str	r0, [fp, #-328]	; 0xfffffeb8
    1ba4:	mov	r0, r1
    1ba8:	mov	r1, r2
    1bac:	mov	r2, lr
    1bb0:	movw	lr, #15
    1bb4:	str	lr, [sp]
    1bb8:	bl	117c <print_expression>
    1bbc:	ldr	r1, [fp, #-16]
    1bc0:	movw	r2, #0
    1bc4:	movt	r2, #0
    1bc8:	str	r0, [fp, #-332]	; 0xfffffeb4
    1bcc:	mov	r0, r2
    1bd0:	blx	r1
    1bd4:	ldr	r1, [fp, #-12]
    1bd8:	ldr	r1, [r1, #20]
    1bdc:	ldr	r2, [fp, #-16]
    1be0:	ldr	r3, [fp, #-20]	; 0xffffffec
    1be4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    1be8:	str	r0, [fp, #-336]	; 0xfffffeb0
    1bec:	mov	r0, r1
    1bf0:	mov	r1, r2
    1bf4:	mov	r2, r3
    1bf8:	mov	r3, lr
    1bfc:	movw	lr, #15
    1c00:	str	lr, [sp]
    1c04:	bl	117c <print_expression>
    1c08:	ldr	r1, [fp, #-16]
    1c0c:	movw	r2, #0
    1c10:	movt	r2, #0
    1c14:	str	r0, [fp, #-340]	; 0xfffffeac
    1c18:	mov	r0, r2
    1c1c:	blx	r1
    1c20:	str	r0, [fp, #-344]	; 0xfffffea8
    1c24:	b	4cd8 <print_expression+0x3b5c>
    1c28:	ldr	r0, [fp, #-16]
    1c2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1c30:	cmp	r1, #0
    1c34:	movw	r1, #0
    1c38:	movne	r1, #1
    1c3c:	tst	r1, #1
    1c40:	movw	r1, #0
    1c44:	movt	r1, #0
    1c48:	movw	r2, #0
    1c4c:	movt	r2, #0
    1c50:	movne	r1, r2
    1c54:	str	r0, [fp, #-348]	; 0xfffffea4
    1c58:	mov	r0, r1
    1c5c:	ldr	r1, [fp, #-348]	; 0xfffffea4
    1c60:	blx	r1
    1c64:	str	r0, [fp, #-352]	; 0xfffffea0
    1c68:	b	4cd8 <print_expression+0x3b5c>
    1c6c:	ldr	r0, [fp, #-16]
    1c70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1c74:	cmp	r1, #0
    1c78:	movw	r1, #0
    1c7c:	movne	r1, #1
    1c80:	tst	r1, #1
    1c84:	movw	r1, #0
    1c88:	movt	r1, #0
    1c8c:	movw	r2, #0
    1c90:	movt	r2, #0
    1c94:	movne	r1, r2
    1c98:	str	r0, [fp, #-356]	; 0xfffffe9c
    1c9c:	mov	r0, r1
    1ca0:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    1ca4:	blx	r1
    1ca8:	ldr	r1, [fp, #-12]
    1cac:	ldr	r1, [r1, #16]
    1cb0:	ldr	r2, [fp, #-16]
    1cb4:	ldr	lr, [fp, #-20]	; 0xffffffec
    1cb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1cbc:	str	r0, [fp, #-360]	; 0xfffffe98
    1cc0:	mov	r0, r1
    1cc4:	mov	r1, r2
    1cc8:	mov	r2, lr
    1ccc:	movw	lr, #15
    1cd0:	str	lr, [sp]
    1cd4:	bl	117c <print_expression>
    1cd8:	ldr	r1, [fp, #-16]
    1cdc:	movw	r2, #0
    1ce0:	movt	r2, #0
    1ce4:	str	r0, [fp, #-364]	; 0xfffffe94
    1ce8:	mov	r0, r2
    1cec:	blx	r1
    1cf0:	str	r0, [fp, #-368]	; 0xfffffe90
    1cf4:	b	4cd8 <print_expression+0x3b5c>
    1cf8:	ldr	r0, [fp, #-16]
    1cfc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1d00:	cmp	r1, #0
    1d04:	movw	r1, #0
    1d08:	movne	r1, #1
    1d0c:	tst	r1, #1
    1d10:	movw	r1, #0
    1d14:	movt	r1, #0
    1d18:	movw	r2, #0
    1d1c:	movt	r2, #0
    1d20:	movne	r1, r2
    1d24:	str	r0, [fp, #-372]	; 0xfffffe8c
    1d28:	mov	r0, r1
    1d2c:	ldr	r1, [fp, #-372]	; 0xfffffe8c
    1d30:	blx	r1
    1d34:	ldr	r1, [fp, #-12]
    1d38:	ldr	r1, [r1, #16]
    1d3c:	ldr	r2, [fp, #-16]
    1d40:	ldr	lr, [fp, #-20]	; 0xffffffec
    1d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1d48:	str	r0, [fp, #-376]	; 0xfffffe88
    1d4c:	mov	r0, r1
    1d50:	mov	r1, r2
    1d54:	mov	r2, lr
    1d58:	movw	lr, #15
    1d5c:	str	lr, [sp]
    1d60:	bl	117c <print_expression>
    1d64:	ldr	r1, [fp, #-16]
    1d68:	movw	r2, #0
    1d6c:	movt	r2, #0
    1d70:	str	r0, [fp, #-380]	; 0xfffffe84
    1d74:	mov	r0, r2
    1d78:	blx	r1
    1d7c:	str	r0, [fp, #-384]	; 0xfffffe80
    1d80:	b	4cd8 <print_expression+0x3b5c>
    1d84:	ldr	r0, [fp, #-16]
    1d88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1d8c:	cmp	r1, #0
    1d90:	movw	r1, #0
    1d94:	movne	r1, #1
    1d98:	tst	r1, #1
    1d9c:	movw	r1, #0
    1da0:	movt	r1, #0
    1da4:	movw	r2, #0
    1da8:	movt	r2, #0
    1dac:	movne	r1, r2
    1db0:	str	r0, [fp, #-388]	; 0xfffffe7c
    1db4:	mov	r0, r1
    1db8:	ldr	r1, [fp, #-388]	; 0xfffffe7c
    1dbc:	blx	r1
    1dc0:	ldr	r1, [fp, #-12]
    1dc4:	ldr	r1, [r1, #16]
    1dc8:	ldr	r2, [fp, #-16]
    1dcc:	ldr	lr, [fp, #-20]	; 0xffffffec
    1dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1dd4:	str	r0, [fp, #-392]	; 0xfffffe78
    1dd8:	mov	r0, r1
    1ddc:	mov	r1, r2
    1de0:	mov	r2, lr
    1de4:	movw	lr, #15
    1de8:	str	lr, [sp]
    1dec:	bl	117c <print_expression>
    1df0:	ldr	r1, [fp, #-16]
    1df4:	movw	r2, #0
    1df8:	movt	r2, #0
    1dfc:	str	r0, [fp, #-396]	; 0xfffffe74
    1e00:	mov	r0, r2
    1e04:	blx	r1
    1e08:	str	r0, [fp, #-400]	; 0xfffffe70
    1e0c:	b	4cd8 <print_expression+0x3b5c>
    1e10:	ldr	r0, [fp, #-16]
    1e14:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1e18:	cmp	r1, #0
    1e1c:	movw	r1, #0
    1e20:	movne	r1, #1
    1e24:	tst	r1, #1
    1e28:	movw	r1, #0
    1e2c:	movt	r1, #0
    1e30:	movw	r2, #0
    1e34:	movt	r2, #0
    1e38:	movne	r1, r2
    1e3c:	str	r0, [fp, #-404]	; 0xfffffe6c
    1e40:	mov	r0, r1
    1e44:	ldr	r1, [fp, #-404]	; 0xfffffe6c
    1e48:	blx	r1
    1e4c:	ldr	r1, [fp, #-12]
    1e50:	ldr	r1, [r1, #16]
    1e54:	ldr	r2, [fp, #-16]
    1e58:	ldr	lr, [fp, #-20]	; 0xffffffec
    1e5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1e60:	str	r0, [fp, #-408]	; 0xfffffe68
    1e64:	mov	r0, r1
    1e68:	mov	r1, r2
    1e6c:	mov	r2, lr
    1e70:	movw	lr, #15
    1e74:	str	lr, [sp]
    1e78:	bl	117c <print_expression>
    1e7c:	ldr	r1, [fp, #-16]
    1e80:	movw	r2, #0
    1e84:	movt	r2, #0
    1e88:	str	r0, [fp, #-412]	; 0xfffffe64
    1e8c:	mov	r0, r2
    1e90:	blx	r1
    1e94:	str	r0, [fp, #-416]	; 0xfffffe60
    1e98:	b	4cd8 <print_expression+0x3b5c>
    1e9c:	ldr	r0, [fp, #-16]
    1ea0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1ea4:	cmp	r1, #0
    1ea8:	movw	r1, #0
    1eac:	movne	r1, #1
    1eb0:	tst	r1, #1
    1eb4:	movw	r1, #0
    1eb8:	movt	r1, #0
    1ebc:	movw	r2, #0
    1ec0:	movt	r2, #0
    1ec4:	movne	r1, r2
    1ec8:	str	r0, [fp, #-420]	; 0xfffffe5c
    1ecc:	mov	r0, r1
    1ed0:	ldr	r1, [fp, #-420]	; 0xfffffe5c
    1ed4:	blx	r1
    1ed8:	ldr	r1, [fp, #-12]
    1edc:	ldr	r1, [r1, #16]
    1ee0:	ldr	r2, [fp, #-16]
    1ee4:	ldr	lr, [fp, #-20]	; 0xffffffec
    1ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1eec:	str	r0, [fp, #-424]	; 0xfffffe58
    1ef0:	mov	r0, r1
    1ef4:	mov	r1, r2
    1ef8:	mov	r2, lr
    1efc:	movw	lr, #15
    1f00:	str	lr, [sp]
    1f04:	bl	117c <print_expression>
    1f08:	ldr	r1, [fp, #-12]
    1f0c:	ldr	r1, [r1, #20]
    1f10:	movw	r2, #0
    1f14:	cmp	r1, r2
    1f18:	str	r0, [fp, #-428]	; 0xfffffe54
    1f1c:	beq	1f6c <print_expression+0xdf0>
    1f20:	ldr	r0, [fp, #-16]
    1f24:	movw	r1, #0
    1f28:	movt	r1, #0
    1f2c:	str	r0, [fp, #-432]	; 0xfffffe50
    1f30:	mov	r0, r1
    1f34:	ldr	r1, [fp, #-432]	; 0xfffffe50
    1f38:	blx	r1
    1f3c:	ldr	r1, [fp, #-12]
    1f40:	ldr	r1, [r1, #20]
    1f44:	ldr	lr, [fp, #-16]
    1f48:	ldr	r2, [fp, #-20]	; 0xffffffec
    1f4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1f50:	str	r0, [fp, #-436]	; 0xfffffe4c
    1f54:	mov	r0, r1
    1f58:	mov	r1, lr
    1f5c:	movw	lr, #15
    1f60:	str	lr, [sp]
    1f64:	bl	117c <print_expression>
    1f68:	str	r0, [fp, #-440]	; 0xfffffe48
    1f6c:	ldr	r0, [fp, #-12]
    1f70:	ldr	r0, [r0, #24]
    1f74:	movw	r1, #0
    1f78:	cmp	r0, r1
    1f7c:	beq	1fcc <print_expression+0xe50>
    1f80:	ldr	r0, [fp, #-16]
    1f84:	movw	r1, #0
    1f88:	movt	r1, #0
    1f8c:	str	r0, [fp, #-444]	; 0xfffffe44
    1f90:	mov	r0, r1
    1f94:	ldr	r1, [fp, #-444]	; 0xfffffe44
    1f98:	blx	r1
    1f9c:	ldr	r1, [fp, #-12]
    1fa0:	ldr	r1, [r1, #24]
    1fa4:	ldr	lr, [fp, #-16]
    1fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
    1fac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1fb0:	str	r0, [fp, #-448]	; 0xfffffe40
    1fb4:	mov	r0, r1
    1fb8:	mov	r1, lr
    1fbc:	movw	lr, #15
    1fc0:	str	lr, [sp]
    1fc4:	bl	117c <print_expression>
    1fc8:	str	r0, [fp, #-452]	; 0xfffffe3c
    1fcc:	ldr	r0, [fp, #-16]
    1fd0:	movw	r1, #0
    1fd4:	movt	r1, #0
    1fd8:	str	r0, [fp, #-456]	; 0xfffffe38
    1fdc:	mov	r0, r1
    1fe0:	ldr	r1, [fp, #-456]	; 0xfffffe38
    1fe4:	blx	r1
    1fe8:	str	r0, [fp, #-460]	; 0xfffffe34
    1fec:	b	4cd8 <print_expression+0x3b5c>
    1ff0:	ldr	r0, [fp, #-12]
    1ff4:	ldr	r0, [r0, #12]
    1ff8:	cmp	r0, #0
    1ffc:	beq	2044 <print_expression+0xec8>
    2000:	ldr	r0, [fp, #-16]
    2004:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2008:	cmp	r1, #0
    200c:	movw	r1, #0
    2010:	movne	r1, #1
    2014:	tst	r1, #1
    2018:	movw	r1, #0
    201c:	movt	r1, #0
    2020:	movw	r2, #0
    2024:	movt	r2, #0
    2028:	movne	r1, r2
    202c:	str	r0, [fp, #-464]	; 0xfffffe30
    2030:	mov	r0, r1
    2034:	ldr	r1, [fp, #-464]	; 0xfffffe30
    2038:	blx	r1
    203c:	str	r0, [fp, #-468]	; 0xfffffe2c
    2040:	b	2084 <print_expression+0xf08>
    2044:	ldr	r0, [fp, #-16]
    2048:	ldr	r1, [fp, #-24]	; 0xffffffe8
    204c:	cmp	r1, #0
    2050:	movw	r1, #0
    2054:	movne	r1, #1
    2058:	tst	r1, #1
    205c:	movw	r1, #0
    2060:	movt	r1, #0
    2064:	movw	r2, #0
    2068:	movt	r2, #0
    206c:	movne	r1, r2
    2070:	str	r0, [fp, #-472]	; 0xfffffe28
    2074:	mov	r0, r1
    2078:	ldr	r1, [fp, #-472]	; 0xfffffe28
    207c:	blx	r1
    2080:	str	r0, [fp, #-476]	; 0xfffffe24
    2084:	b	4cd8 <print_expression+0x3b5c>
    2088:	sub	r0, fp, #48	; 0x30
    208c:	ldr	r1, [fp, #-12]
    2090:	vldr	d0, [r1, #16]
    2094:	bl	0 <coda_strfl>
    2098:	sub	r1, fp, #48	; 0x30
    209c:	ldr	r0, [fp, #-16]
    20a0:	movw	lr, #0
    20a4:	movt	lr, #0
    20a8:	str	r0, [fp, #-480]	; 0xfffffe20
    20ac:	mov	r0, lr
    20b0:	ldr	lr, [fp, #-480]	; 0xfffffe20
    20b4:	blx	lr
    20b8:	str	r0, [fp, #-484]	; 0xfffffe1c
    20bc:	b	4cd8 <print_expression+0x3b5c>
    20c0:	sub	r2, fp, #69	; 0x45
    20c4:	ldr	r0, [fp, #-12]
    20c8:	ldr	r1, [r0, #16]
    20cc:	ldr	r0, [r0, #20]
    20d0:	str	r0, [fp, #-488]	; 0xfffffe18
    20d4:	mov	r0, r1
    20d8:	ldr	r1, [fp, #-488]	; 0xfffffe18
    20dc:	bl	0 <coda_str64>
    20e0:	sub	r1, fp, #69	; 0x45
    20e4:	ldr	r0, [fp, #-16]
    20e8:	movw	r2, #0
    20ec:	movt	r2, #0
    20f0:	str	r0, [fp, #-492]	; 0xfffffe14
    20f4:	mov	r0, r2
    20f8:	ldr	r2, [fp, #-492]	; 0xfffffe14
    20fc:	blx	r2
    2100:	str	r0, [fp, #-496]	; 0xfffffe10
    2104:	b	4cd8 <print_expression+0x3b5c>
    2108:	ldr	r0, [fp, #-16]
    210c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2110:	cmp	r1, #0
    2114:	movw	r1, #0
    2118:	movne	r1, #1
    211c:	tst	r1, #1
    2120:	movw	r1, #0
    2124:	movt	r1, #0
    2128:	movw	r2, #0
    212c:	movt	r2, #0
    2130:	movne	r1, r2
    2134:	str	r0, [fp, #-500]	; 0xfffffe0c
    2138:	mov	r0, r1
    213c:	ldr	r1, [fp, #-500]	; 0xfffffe0c
    2140:	blx	r1
    2144:	ldr	r1, [fp, #-12]
    2148:	ldr	r1, [r1, #16]
    214c:	ldr	r2, [fp, #-12]
    2150:	ldr	r2, [r2, #12]
    2154:	ldr	lr, [fp, #-16]
    2158:	ldr	r3, [fp, #-20]	; 0xffffffec
    215c:	ldr	ip, [fp, #-24]	; 0xffffffe8
    2160:	str	r0, [fp, #-504]	; 0xfffffe08
    2164:	mov	r0, r1
    2168:	mov	r1, r2
    216c:	mov	r2, lr
    2170:	str	ip, [sp]
    2174:	bl	dde4 <print_escaped_string>
    2178:	ldr	r0, [fp, #-16]
    217c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2180:	cmp	r1, #0
    2184:	movw	r1, #0
    2188:	movne	r1, #1
    218c:	tst	r1, #1
    2190:	movw	r1, #0
    2194:	movt	r1, #0
    2198:	movw	r2, #0
    219c:	movt	r2, #0
    21a0:	movne	r1, r2
    21a4:	str	r0, [fp, #-508]	; 0xfffffe04
    21a8:	mov	r0, r1
    21ac:	ldr	r1, [fp, #-508]	; 0xfffffe04
    21b0:	blx	r1
    21b4:	str	r0, [fp, #-512]	; 0xfffffe00
    21b8:	b	4cd8 <print_expression+0x3b5c>
    21bc:	ldr	r0, [fp, #-16]
    21c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    21c4:	cmp	r1, #0
    21c8:	movw	r1, #0
    21cc:	movne	r1, #1
    21d0:	tst	r1, #1
    21d4:	movw	r1, #0
    21d8:	movt	r1, #0
    21dc:	movw	r2, #0
    21e0:	movt	r2, #0
    21e4:	movne	r1, r2
    21e8:	str	r0, [fp, #-516]	; 0xfffffdfc
    21ec:	mov	r0, r1
    21f0:	ldr	r1, [fp, #-516]	; 0xfffffdfc
    21f4:	blx	r1
    21f8:	ldr	r1, [fp, #-12]
    21fc:	ldr	r1, [r1, #16]
    2200:	ldr	r2, [fp, #-16]
    2204:	ldr	lr, [fp, #-20]	; 0xffffffec
    2208:	ldr	r3, [fp, #-24]	; 0xffffffe8
    220c:	str	r0, [fp, #-520]	; 0xfffffdf8
    2210:	mov	r0, r1
    2214:	mov	r1, r2
    2218:	mov	r2, lr
    221c:	movw	lr, #15
    2220:	str	lr, [sp]
    2224:	bl	117c <print_expression>
    2228:	ldr	r1, [fp, #-16]
    222c:	movw	r2, #0
    2230:	movt	r2, #0
    2234:	str	r0, [fp, #-524]	; 0xfffffdf4
    2238:	mov	r0, r2
    223c:	blx	r1
    2240:	ldr	r1, [fp, #-12]
    2244:	ldr	r1, [r1, #20]
    2248:	ldr	r2, [fp, #-16]
    224c:	ldr	r3, [fp, #-20]	; 0xffffffec
    2250:	ldr	lr, [fp, #-24]	; 0xffffffe8
    2254:	str	r0, [fp, #-528]	; 0xfffffdf0
    2258:	mov	r0, r1
    225c:	mov	r1, r2
    2260:	mov	r2, r3
    2264:	mov	r3, lr
    2268:	movw	lr, #15
    226c:	str	lr, [sp]
    2270:	bl	117c <print_expression>
    2274:	ldr	r1, [fp, #-16]
    2278:	movw	r2, #0
    227c:	movt	r2, #0
    2280:	str	r0, [fp, #-532]	; 0xfffffdec
    2284:	mov	r0, r2
    2288:	blx	r1
    228c:	str	r0, [fp, #-536]	; 0xfffffde8
    2290:	b	4cd8 <print_expression+0x3b5c>
    2294:	ldr	r0, [fp, #8]
    2298:	cmp	r0, #3
    229c:	bge	22c0 <print_expression+0x1144>
    22a0:	ldr	r0, [fp, #-16]
    22a4:	movw	r1, #0
    22a8:	movt	r1, #0
    22ac:	str	r0, [fp, #-540]	; 0xfffffde4
    22b0:	mov	r0, r1
    22b4:	ldr	r1, [fp, #-540]	; 0xfffffde4
    22b8:	blx	r1
    22bc:	str	r0, [fp, #-544]	; 0xfffffde0
    22c0:	ldr	r0, [fp, #-12]
    22c4:	ldr	r0, [r0, #16]
    22c8:	ldr	r1, [fp, #-16]
    22cc:	ldr	r2, [fp, #-20]	; 0xffffffec
    22d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    22d4:	movw	ip, #3
    22d8:	str	ip, [sp]
    22dc:	bl	117c <print_expression>
    22e0:	ldr	r1, [fp, #-16]
    22e4:	movw	r2, #0
    22e8:	movt	r2, #0
    22ec:	str	r0, [fp, #-548]	; 0xfffffddc
    22f0:	mov	r0, r2
    22f4:	blx	r1
    22f8:	ldr	r1, [fp, #-12]
    22fc:	ldr	r1, [r1, #20]
    2300:	ldr	r2, [fp, #-16]
    2304:	ldr	r3, [fp, #-20]	; 0xffffffec
    2308:	ldr	ip, [fp, #-24]	; 0xffffffe8
    230c:	str	r0, [fp, #-552]	; 0xfffffdd8
    2310:	mov	r0, r1
    2314:	mov	r1, r2
    2318:	mov	r2, r3
    231c:	mov	r3, ip
    2320:	movw	ip, #3
    2324:	str	ip, [sp]
    2328:	bl	117c <print_expression>
    232c:	ldr	r1, [fp, #8]
    2330:	cmp	r1, #3
    2334:	str	r0, [fp, #-556]	; 0xfffffdd4
    2338:	bge	235c <print_expression+0x11e0>
    233c:	ldr	r0, [fp, #-16]
    2340:	movw	r1, #0
    2344:	movt	r1, #0
    2348:	str	r0, [fp, #-560]	; 0xfffffdd0
    234c:	mov	r0, r1
    2350:	ldr	r1, [fp, #-560]	; 0xfffffdd0
    2354:	blx	r1
    2358:	str	r0, [fp, #-564]	; 0xfffffdcc
    235c:	b	4cd8 <print_expression+0x3b5c>
    2360:	ldr	r0, [fp, #8]
    2364:	cmp	r0, #6
    2368:	bge	238c <print_expression+0x1210>
    236c:	ldr	r0, [fp, #-16]
    2370:	movw	r1, #0
    2374:	movt	r1, #0
    2378:	str	r0, [fp, #-568]	; 0xfffffdc8
    237c:	mov	r0, r1
    2380:	ldr	r1, [fp, #-568]	; 0xfffffdc8
    2384:	blx	r1
    2388:	str	r0, [fp, #-572]	; 0xfffffdc4
    238c:	ldr	r0, [fp, #-12]
    2390:	ldr	r0, [r0, #16]
    2394:	ldr	r1, [fp, #-16]
    2398:	ldr	r2, [fp, #-20]	; 0xffffffec
    239c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    23a0:	movw	ip, #6
    23a4:	str	ip, [sp]
    23a8:	bl	117c <print_expression>
    23ac:	ldr	r1, [fp, #-16]
    23b0:	movw	r2, #0
    23b4:	movt	r2, #0
    23b8:	str	r0, [fp, #-576]	; 0xfffffdc0
    23bc:	mov	r0, r2
    23c0:	blx	r1
    23c4:	ldr	r1, [fp, #-12]
    23c8:	ldr	r1, [r1, #20]
    23cc:	ldr	r2, [fp, #-16]
    23d0:	ldr	r3, [fp, #-20]	; 0xffffffec
    23d4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    23d8:	str	r0, [fp, #-580]	; 0xfffffdbc
    23dc:	mov	r0, r1
    23e0:	mov	r1, r2
    23e4:	mov	r2, r3
    23e8:	mov	r3, ip
    23ec:	movw	ip, #6
    23f0:	str	ip, [sp]
    23f4:	bl	117c <print_expression>
    23f8:	ldr	r1, [fp, #8]
    23fc:	cmp	r1, #6
    2400:	str	r0, [fp, #-584]	; 0xfffffdb8
    2404:	bge	2428 <print_expression+0x12ac>
    2408:	ldr	r0, [fp, #-16]
    240c:	movw	r1, #0
    2410:	movt	r1, #0
    2414:	str	r0, [fp, #-588]	; 0xfffffdb4
    2418:	mov	r0, r1
    241c:	ldr	r1, [fp, #-588]	; 0xfffffdb4
    2420:	blx	r1
    2424:	str	r0, [fp, #-592]	; 0xfffffdb0
    2428:	b	4cd8 <print_expression+0x3b5c>
    242c:	ldr	r0, [fp, #-16]
    2430:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2434:	cmp	r1, #0
    2438:	movw	r1, #0
    243c:	movne	r1, #1
    2440:	tst	r1, #1
    2444:	movw	r1, #0
    2448:	movt	r1, #0
    244c:	movw	r2, #0
    2450:	movt	r2, #0
    2454:	movne	r1, r2
    2458:	str	r0, [fp, #-596]	; 0xfffffdac
    245c:	mov	r0, r1
    2460:	ldr	r1, [fp, #-596]	; 0xfffffdac
    2464:	blx	r1
    2468:	ldr	r1, [fp, #-12]
    246c:	ldr	r1, [r1, #16]
    2470:	ldr	r2, [fp, #-16]
    2474:	ldr	lr, [fp, #-20]	; 0xffffffec
    2478:	ldr	r3, [fp, #-24]	; 0xffffffe8
    247c:	str	r0, [fp, #-600]	; 0xfffffda8
    2480:	mov	r0, r1
    2484:	mov	r1, r2
    2488:	mov	r2, lr
    248c:	movw	lr, #15
    2490:	str	lr, [sp]
    2494:	bl	117c <print_expression>
    2498:	ldr	r1, [fp, #-16]
    249c:	movw	r2, #0
    24a0:	movt	r2, #0
    24a4:	str	r0, [fp, #-604]	; 0xfffffda4
    24a8:	mov	r0, r2
    24ac:	blx	r1
    24b0:	str	r0, [fp, #-608]	; 0xfffffda0
    24b4:	b	4cd8 <print_expression+0x3b5c>
    24b8:	ldr	r0, [fp, #-16]
    24bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    24c0:	cmp	r1, #0
    24c4:	movw	r1, #0
    24c8:	movne	r1, #1
    24cc:	tst	r1, #1
    24d0:	movw	r1, #0
    24d4:	movt	r1, #0
    24d8:	movw	r2, #0
    24dc:	movt	r2, #0
    24e0:	movne	r1, r2
    24e4:	str	r0, [fp, #-612]	; 0xfffffd9c
    24e8:	mov	r0, r1
    24ec:	ldr	r1, [fp, #-612]	; 0xfffffd9c
    24f0:	blx	r1
    24f4:	str	r0, [fp, #-616]	; 0xfffffd98
    24f8:	b	4cd8 <print_expression+0x3b5c>
    24fc:	ldr	r0, [fp, #-16]
    2500:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2504:	cmp	r1, #0
    2508:	movw	r1, #0
    250c:	movne	r1, #1
    2510:	tst	r1, #1
    2514:	movw	r1, #0
    2518:	movt	r1, #0
    251c:	movw	r2, #0
    2520:	movt	r2, #0
    2524:	movne	r1, r2
    2528:	str	r0, [fp, #-620]	; 0xfffffd94
    252c:	mov	r0, r1
    2530:	ldr	r1, [fp, #-620]	; 0xfffffd94
    2534:	blx	r1
    2538:	str	r0, [fp, #-624]	; 0xfffffd90
    253c:	b	4cd8 <print_expression+0x3b5c>
    2540:	ldr	r0, [fp, #-16]
    2544:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2548:	cmp	r1, #0
    254c:	movw	r1, #0
    2550:	movne	r1, #1
    2554:	tst	r1, #1
    2558:	movw	r1, #0
    255c:	movt	r1, #0
    2560:	movw	r2, #0
    2564:	movt	r2, #0
    2568:	movne	r1, r2
    256c:	str	r0, [fp, #-628]	; 0xfffffd8c
    2570:	mov	r0, r1
    2574:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    2578:	blx	r1
    257c:	ldr	r1, [fp, #-12]
    2580:	ldr	r1, [r1, #16]
    2584:	ldr	r2, [fp, #-16]
    2588:	ldr	lr, [fp, #-20]	; 0xffffffec
    258c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2590:	str	r0, [fp, #-632]	; 0xfffffd88
    2594:	mov	r0, r1
    2598:	mov	r1, r2
    259c:	mov	r2, lr
    25a0:	movw	lr, #15
    25a4:	str	lr, [sp]
    25a8:	bl	117c <print_expression>
    25ac:	ldr	r1, [fp, #-16]
    25b0:	movw	r2, #0
    25b4:	movt	r2, #0
    25b8:	str	r0, [fp, #-636]	; 0xfffffd84
    25bc:	mov	r0, r2
    25c0:	blx	r1
    25c4:	str	r0, [fp, #-640]	; 0xfffffd80
    25c8:	b	4cd8 <print_expression+0x3b5c>
    25cc:	ldr	r0, [fp, #-16]
    25d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    25d4:	cmp	r1, #0
    25d8:	movw	r1, #0
    25dc:	movne	r1, #1
    25e0:	tst	r1, #1
    25e4:	movw	r1, #0
    25e8:	movt	r1, #0
    25ec:	movw	r2, #0
    25f0:	movt	r2, #0
    25f4:	movne	r1, r2
    25f8:	str	r0, [fp, #-644]	; 0xfffffd7c
    25fc:	mov	r0, r1
    2600:	ldr	r1, [fp, #-644]	; 0xfffffd7c
    2604:	blx	r1
    2608:	ldr	r1, [fp, #-12]
    260c:	ldr	r1, [r1, #16]
    2610:	ldr	r2, [fp, #-16]
    2614:	ldr	lr, [fp, #-20]	; 0xffffffec
    2618:	ldr	r3, [fp, #-24]	; 0xffffffe8
    261c:	str	r0, [fp, #-648]	; 0xfffffd78
    2620:	mov	r0, r1
    2624:	mov	r1, r2
    2628:	mov	r2, lr
    262c:	movw	lr, #15
    2630:	str	lr, [sp]
    2634:	bl	117c <print_expression>
    2638:	ldr	r1, [fp, #-16]
    263c:	movw	r2, #0
    2640:	movt	r2, #0
    2644:	str	r0, [fp, #-652]	; 0xfffffd74
    2648:	mov	r0, r2
    264c:	blx	r1
    2650:	str	r0, [fp, #-656]	; 0xfffffd70
    2654:	b	4cd8 <print_expression+0x3b5c>
    2658:	ldr	r0, [fp, #-16]
    265c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2660:	cmp	r1, #0
    2664:	movw	r1, #0
    2668:	movne	r1, #1
    266c:	tst	r1, #1
    2670:	movw	r1, #0
    2674:	movt	r1, #0
    2678:	movw	r2, #0
    267c:	movt	r2, #0
    2680:	movne	r1, r2
    2684:	ldr	r2, [fp, #-12]
    2688:	ldr	r2, [r2, #12]
    268c:	str	r0, [fp, #-660]	; 0xfffffd6c
    2690:	mov	r0, r1
    2694:	mov	r1, r2
    2698:	ldr	r2, [fp, #-660]	; 0xfffffd6c
    269c:	blx	r2
    26a0:	ldr	r1, [fp, #-12]
    26a4:	ldr	r1, [r1, #16]
    26a8:	ldr	r2, [fp, #-16]
    26ac:	ldr	lr, [fp, #-20]	; 0xffffffec
    26b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    26b4:	str	r0, [fp, #-664]	; 0xfffffd68
    26b8:	mov	r0, r1
    26bc:	mov	r1, r2
    26c0:	mov	r2, lr
    26c4:	movw	lr, #15
    26c8:	str	lr, [sp]
    26cc:	bl	117c <print_expression>
    26d0:	ldr	r1, [fp, #-16]
    26d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    26d8:	cmp	r2, #0
    26dc:	movw	r2, #0
    26e0:	movne	r2, #1
    26e4:	tst	r2, #1
    26e8:	movw	r2, #0
    26ec:	movt	r2, #0
    26f0:	movw	r3, #0
    26f4:	movt	r3, #0
    26f8:	movne	r2, r3
    26fc:	str	r0, [fp, #-668]	; 0xfffffd64
    2700:	mov	r0, r2
    2704:	blx	r1
    2708:	ldr	r1, [fp, #-12]
    270c:	ldr	r1, [r1, #20]
    2710:	ldr	r2, [fp, #-16]
    2714:	ldr	r3, [fp, #-20]	; 0xffffffec
    2718:	ldr	lr, [fp, #-24]	; 0xffffffe8
    271c:	str	r0, [fp, #-672]	; 0xfffffd60
    2720:	mov	r0, r1
    2724:	mov	r1, r2
    2728:	mov	r2, r3
    272c:	mov	r3, lr
    2730:	movw	lr, #15
    2734:	str	lr, [sp]
    2738:	bl	117c <print_expression>
    273c:	ldr	r1, [fp, #-12]
    2740:	ldr	r1, [r1, #24]
    2744:	movw	r2, #0
    2748:	cmp	r1, r2
    274c:	str	r0, [fp, #-676]	; 0xfffffd5c
    2750:	beq	27c4 <print_expression+0x1648>
    2754:	ldr	r0, [fp, #-16]
    2758:	ldr	r1, [fp, #-24]	; 0xffffffe8
    275c:	cmp	r1, #0
    2760:	movw	r1, #0
    2764:	movne	r1, #1
    2768:	tst	r1, #1
    276c:	movw	r1, #0
    2770:	movt	r1, #0
    2774:	movw	r2, #0
    2778:	movt	r2, #0
    277c:	movne	r1, r2
    2780:	str	r0, [fp, #-680]	; 0xfffffd58
    2784:	mov	r0, r1
    2788:	ldr	r1, [fp, #-680]	; 0xfffffd58
    278c:	blx	r1
    2790:	ldr	r1, [fp, #-12]
    2794:	ldr	r1, [r1, #24]
    2798:	ldr	r2, [fp, #-16]
    279c:	ldr	lr, [fp, #-20]	; 0xffffffec
    27a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    27a4:	str	r0, [fp, #-684]	; 0xfffffd54
    27a8:	mov	r0, r1
    27ac:	mov	r1, r2
    27b0:	mov	r2, lr
    27b4:	movw	lr, #15
    27b8:	str	lr, [sp]
    27bc:	bl	117c <print_expression>
    27c0:	str	r0, [fp, #-688]	; 0xfffffd50
    27c4:	ldr	r0, [fp, #-16]
    27c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    27cc:	cmp	r1, #0
    27d0:	movw	r1, #0
    27d4:	movne	r1, #1
    27d8:	tst	r1, #1
    27dc:	movw	r1, #0
    27e0:	movt	r1, #0
    27e4:	movw	r2, #0
    27e8:	movt	r2, #0
    27ec:	movne	r1, r2
    27f0:	str	r0, [fp, #-692]	; 0xfffffd4c
    27f4:	mov	r0, r1
    27f8:	ldr	r1, [fp, #-692]	; 0xfffffd4c
    27fc:	blx	r1
    2800:	ldr	r1, [fp, #-12]
    2804:	ldr	r1, [r1, #28]
    2808:	ldr	r2, [fp, #-16]
    280c:	ldr	lr, [fp, #-20]	; 0xffffffec
    2810:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2814:	str	r0, [fp, #-696]	; 0xfffffd48
    2818:	mov	r0, r1
    281c:	mov	r1, r2
    2820:	mov	r2, lr
    2824:	movw	lr, #15
    2828:	str	lr, [sp]
    282c:	bl	117c <print_expression>
    2830:	str	r0, [fp, #-700]	; 0xfffffd44
    2834:	b	4cd8 <print_expression+0x3b5c>
    2838:	ldr	r0, [fp, #-12]
    283c:	ldr	r0, [r0, #16]
    2840:	movw	r1, #0
    2844:	cmp	r0, r1
    2848:	beq	2870 <print_expression+0x16f4>
    284c:	ldr	r0, [fp, #-12]
    2850:	ldr	r0, [r0, #16]
    2854:	ldr	r1, [fp, #-16]
    2858:	ldr	r2, [fp, #-20]	; 0xffffffec
    285c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2860:	movw	ip, #15
    2864:	str	ip, [sp]
    2868:	bl	117c <print_expression>
    286c:	str	r0, [fp, #-704]	; 0xfffffd40
    2870:	ldr	r0, [fp, #-16]
    2874:	movw	r1, #0
    2878:	movt	r1, #0
    287c:	str	r0, [fp, #-708]	; 0xfffffd3c
    2880:	mov	r0, r1
    2884:	ldr	r1, [fp, #-708]	; 0xfffffd3c
    2888:	blx	r1
    288c:	ldr	r1, [fp, #-12]
    2890:	ldr	r1, [r1, #20]
    2894:	ldr	lr, [fp, #-16]
    2898:	ldr	r2, [fp, #-20]	; 0xffffffec
    289c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    28a0:	str	r0, [fp, #-712]	; 0xfffffd38
    28a4:	mov	r0, r1
    28a8:	mov	r1, lr
    28ac:	movw	lr, #15
    28b0:	str	lr, [sp]
    28b4:	bl	117c <print_expression>
    28b8:	ldr	r1, [fp, #-16]
    28bc:	movw	r2, #0
    28c0:	movt	r2, #0
    28c4:	str	r0, [fp, #-716]	; 0xfffffd34
    28c8:	mov	r0, r2
    28cc:	blx	r1
    28d0:	str	r0, [fp, #-720]	; 0xfffffd30
    28d4:	b	4cd8 <print_expression+0x3b5c>
    28d8:	ldr	r0, [fp, #-12]
    28dc:	ldr	r0, [r0, #16]
    28e0:	movw	r1, #0
    28e4:	cmp	r0, r1
    28e8:	beq	2910 <print_expression+0x1794>
    28ec:	ldr	r0, [fp, #-12]
    28f0:	ldr	r0, [r0, #16]
    28f4:	ldr	r1, [fp, #-16]
    28f8:	ldr	r2, [fp, #-20]	; 0xffffffec
    28fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2900:	movw	ip, #15
    2904:	str	ip, [sp]
    2908:	bl	117c <print_expression>
    290c:	str	r0, [fp, #-724]	; 0xfffffd2c
    2910:	ldr	r0, [fp, #-16]
    2914:	ldr	r1, [fp, #-12]
    2918:	ldr	r1, [r1, #12]
    291c:	movw	r2, #0
    2920:	movt	r2, #0
    2924:	str	r0, [fp, #-728]	; 0xfffffd28
    2928:	mov	r0, r2
    292c:	ldr	r2, [fp, #-728]	; 0xfffffd28
    2930:	blx	r2
    2934:	str	r0, [fp, #-732]	; 0xfffffd24
    2938:	b	4cd8 <print_expression+0x3b5c>
    293c:	ldr	r0, [fp, #-16]
    2940:	movw	r1, #0
    2944:	movt	r1, #0
    2948:	str	r0, [fp, #-736]	; 0xfffffd20
    294c:	mov	r0, r1
    2950:	ldr	r1, [fp, #-736]	; 0xfffffd20
    2954:	blx	r1
    2958:	str	r0, [fp, #-740]	; 0xfffffd1c
    295c:	b	4cd8 <print_expression+0x3b5c>
    2960:	ldr	r0, [fp, #-12]
    2964:	ldr	r0, [r0, #16]
    2968:	ldr	r1, [fp, #-16]
    296c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2970:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2974:	movw	ip, #15
    2978:	str	ip, [sp]
    297c:	bl	117c <print_expression>
    2980:	ldr	r1, [fp, #-12]
    2984:	ldr	r1, [r1, #16]
    2988:	ldr	r1, [r1]
    298c:	cmp	r1, #38	; 0x26
    2990:	str	r0, [fp, #-744]	; 0xfffffd18
    2994:	beq	29b8 <print_expression+0x183c>
    2998:	ldr	r0, [fp, #-16]
    299c:	movw	r1, #0
    29a0:	movt	r1, #0
    29a4:	str	r0, [fp, #-748]	; 0xfffffd14
    29a8:	mov	r0, r1
    29ac:	ldr	r1, [fp, #-748]	; 0xfffffd14
    29b0:	blx	r1
    29b4:	str	r0, [fp, #-752]	; 0xfffffd10
    29b8:	ldr	r0, [fp, #-16]
    29bc:	ldr	r1, [fp, #-12]
    29c0:	ldr	r1, [r1, #12]
    29c4:	movw	r2, #0
    29c8:	movt	r2, #0
    29cc:	str	r0, [fp, #-756]	; 0xfffffd0c
    29d0:	mov	r0, r2
    29d4:	ldr	r2, [fp, #-756]	; 0xfffffd0c
    29d8:	blx	r2
    29dc:	str	r0, [fp, #-760]	; 0xfffffd08
    29e0:	b	4cd8 <print_expression+0x3b5c>
    29e4:	ldr	r0, [fp, #-16]
    29e8:	movw	r1, #0
    29ec:	movt	r1, #0
    29f0:	str	r0, [fp, #-764]	; 0xfffffd04
    29f4:	mov	r0, r1
    29f8:	ldr	r1, [fp, #-764]	; 0xfffffd04
    29fc:	blx	r1
    2a00:	str	r0, [fp, #-768]	; 0xfffffd00
    2a04:	b	4cd8 <print_expression+0x3b5c>
    2a08:	ldr	r0, [fp, #-12]
    2a0c:	ldr	r0, [r0, #16]
    2a10:	movw	r1, #0
    2a14:	cmp	r0, r1
    2a18:	beq	2a58 <print_expression+0x18dc>
    2a1c:	ldr	r0, [fp, #-12]
    2a20:	ldr	r0, [r0, #16]
    2a24:	ldr	r1, [fp, #-16]
    2a28:	ldr	r2, [fp, #-20]	; 0xffffffec
    2a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2a30:	movw	ip, #15
    2a34:	str	ip, [sp]
    2a38:	bl	117c <print_expression>
    2a3c:	ldr	r1, [fp, #-16]
    2a40:	movw	r2, #0
    2a44:	movt	r2, #0
    2a48:	str	r0, [fp, #-772]	; 0xfffffcfc
    2a4c:	mov	r0, r2
    2a50:	blx	r1
    2a54:	str	r0, [fp, #-776]	; 0xfffffcf8
    2a58:	ldr	r0, [fp, #-16]
    2a5c:	movw	r1, #0
    2a60:	movt	r1, #0
    2a64:	str	r0, [fp, #-780]	; 0xfffffcf4
    2a68:	mov	r0, r1
    2a6c:	ldr	r1, [fp, #-780]	; 0xfffffcf4
    2a70:	blx	r1
    2a74:	str	r0, [fp, #-784]	; 0xfffffcf0
    2a78:	b	4cd8 <print_expression+0x3b5c>
    2a7c:	ldr	r0, [fp, #-16]
    2a80:	movw	r1, #0
    2a84:	movt	r1, #0
    2a88:	str	r0, [fp, #-788]	; 0xfffffcec
    2a8c:	mov	r0, r1
    2a90:	ldr	r1, [fp, #-788]	; 0xfffffcec
    2a94:	blx	r1
    2a98:	str	r0, [fp, #-792]	; 0xfffffce8
    2a9c:	b	4cd8 <print_expression+0x3b5c>
    2aa0:	ldr	r0, [fp, #-16]
    2aa4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2aa8:	cmp	r1, #0
    2aac:	movw	r1, #0
    2ab0:	movne	r1, #1
    2ab4:	tst	r1, #1
    2ab8:	movw	r1, #0
    2abc:	movt	r1, #0
    2ac0:	movw	r2, #0
    2ac4:	movt	r2, #0
    2ac8:	movne	r1, r2
    2acc:	str	r0, [fp, #-796]	; 0xfffffce4
    2ad0:	mov	r0, r1
    2ad4:	ldr	r1, [fp, #-796]	; 0xfffffce4
    2ad8:	blx	r1
    2adc:	ldr	r1, [fp, #-12]
    2ae0:	ldr	r1, [r1, #16]
    2ae4:	ldr	r2, [fp, #-16]
    2ae8:	ldr	lr, [fp, #-20]	; 0xffffffec
    2aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2af0:	str	r0, [fp, #-800]	; 0xfffffce0
    2af4:	mov	r0, r1
    2af8:	mov	r1, r2
    2afc:	mov	r2, lr
    2b00:	movw	lr, #15
    2b04:	str	lr, [sp]
    2b08:	bl	117c <print_expression>
    2b0c:	ldr	r1, [fp, #-16]
    2b10:	movw	r2, #0
    2b14:	movt	r2, #0
    2b18:	str	r0, [fp, #-804]	; 0xfffffcdc
    2b1c:	mov	r0, r2
    2b20:	blx	r1
    2b24:	str	r0, [fp, #-808]	; 0xfffffcd8
    2b28:	b	4cd8 <print_expression+0x3b5c>
    2b2c:	ldr	r0, [fp, #8]
    2b30:	cmp	r0, #5
    2b34:	bge	2b58 <print_expression+0x19dc>
    2b38:	ldr	r0, [fp, #-16]
    2b3c:	movw	r1, #0
    2b40:	movt	r1, #0
    2b44:	str	r0, [fp, #-812]	; 0xfffffcd4
    2b48:	mov	r0, r1
    2b4c:	ldr	r1, [fp, #-812]	; 0xfffffcd4
    2b50:	blx	r1
    2b54:	str	r0, [fp, #-816]	; 0xfffffcd0
    2b58:	ldr	r0, [fp, #-12]
    2b5c:	ldr	r0, [r0, #16]
    2b60:	ldr	r1, [fp, #-16]
    2b64:	ldr	r2, [fp, #-20]	; 0xffffffec
    2b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2b6c:	movw	ip, #5
    2b70:	str	ip, [sp]
    2b74:	bl	117c <print_expression>
    2b78:	ldr	r1, [fp, #-16]
    2b7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2b80:	cmp	r2, #0
    2b84:	movw	r2, #1
    2b88:	str	r0, [fp, #-820]	; 0xfffffccc
    2b8c:	str	r1, [fp, #-824]	; 0xfffffcc8
    2b90:	str	r2, [fp, #-828]	; 0xfffffcc4
    2b94:	bne	2bac <print_expression+0x1a30>
    2b98:	ldr	r0, [fp, #-20]	; 0xffffffec
    2b9c:	cmp	r0, #0
    2ba0:	movw	r0, #0
    2ba4:	movne	r0, #1
    2ba8:	str	r0, [fp, #-828]	; 0xfffffcc4
    2bac:	ldr	r0, [fp, #-828]	; 0xfffffcc4
    2bb0:	tst	r0, #1
    2bb4:	movw	r0, #0
    2bb8:	movt	r0, #0
    2bbc:	movw	r1, #0
    2bc0:	movt	r1, #0
    2bc4:	movne	r0, r1
    2bc8:	ldr	r1, [fp, #-824]	; 0xfffffcc8
    2bcc:	blx	r1
    2bd0:	ldr	r1, [fp, #-12]
    2bd4:	ldr	r1, [r1, #20]
    2bd8:	ldr	lr, [fp, #-16]
    2bdc:	ldr	r2, [fp, #-20]	; 0xffffffec
    2be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2be4:	str	r0, [fp, #-832]	; 0xfffffcc0
    2be8:	mov	r0, r1
    2bec:	mov	r1, lr
    2bf0:	movw	lr, #5
    2bf4:	str	lr, [sp]
    2bf8:	bl	117c <print_expression>
    2bfc:	ldr	r1, [fp, #8]
    2c00:	cmp	r1, #5
    2c04:	str	r0, [fp, #-836]	; 0xfffffcbc
    2c08:	bge	2c2c <print_expression+0x1ab0>
    2c0c:	ldr	r0, [fp, #-16]
    2c10:	movw	r1, #0
    2c14:	movt	r1, #0
    2c18:	str	r0, [fp, #-840]	; 0xfffffcb8
    2c1c:	mov	r0, r1
    2c20:	ldr	r1, [fp, #-840]	; 0xfffffcb8
    2c24:	blx	r1
    2c28:	str	r0, [fp, #-844]	; 0xfffffcb4
    2c2c:	b	4cd8 <print_expression+0x3b5c>
    2c30:	ldr	r0, [fp, #8]
    2c34:	cmp	r0, #5
    2c38:	bge	2c5c <print_expression+0x1ae0>
    2c3c:	ldr	r0, [fp, #-16]
    2c40:	movw	r1, #0
    2c44:	movt	r1, #0
    2c48:	str	r0, [fp, #-848]	; 0xfffffcb0
    2c4c:	mov	r0, r1
    2c50:	ldr	r1, [fp, #-848]	; 0xfffffcb0
    2c54:	blx	r1
    2c58:	str	r0, [fp, #-852]	; 0xfffffcac
    2c5c:	ldr	r0, [fp, #-12]
    2c60:	ldr	r0, [r0, #16]
    2c64:	ldr	r1, [fp, #-16]
    2c68:	ldr	r2, [fp, #-20]	; 0xffffffec
    2c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c70:	movw	ip, #5
    2c74:	str	ip, [sp]
    2c78:	bl	117c <print_expression>
    2c7c:	ldr	r1, [fp, #-16]
    2c80:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2c84:	cmp	r2, #0
    2c88:	movw	r2, #1
    2c8c:	str	r0, [fp, #-856]	; 0xfffffca8
    2c90:	str	r1, [fp, #-860]	; 0xfffffca4
    2c94:	str	r2, [fp, #-864]	; 0xfffffca0
    2c98:	bne	2cb0 <print_expression+0x1b34>
    2c9c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2ca0:	cmp	r0, #0
    2ca4:	movw	r0, #0
    2ca8:	movne	r0, #1
    2cac:	str	r0, [fp, #-864]	; 0xfffffca0
    2cb0:	ldr	r0, [fp, #-864]	; 0xfffffca0
    2cb4:	tst	r0, #1
    2cb8:	movw	r0, #0
    2cbc:	movt	r0, #0
    2cc0:	movw	r1, #0
    2cc4:	movt	r1, #0
    2cc8:	movne	r0, r1
    2ccc:	ldr	r1, [fp, #-860]	; 0xfffffca4
    2cd0:	blx	r1
    2cd4:	ldr	r1, [fp, #-12]
    2cd8:	ldr	r1, [r1, #20]
    2cdc:	ldr	lr, [fp, #-16]
    2ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
    2ce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2ce8:	str	r0, [fp, #-868]	; 0xfffffc9c
    2cec:	mov	r0, r1
    2cf0:	mov	r1, lr
    2cf4:	movw	lr, #5
    2cf8:	str	lr, [sp]
    2cfc:	bl	117c <print_expression>
    2d00:	ldr	r1, [fp, #8]
    2d04:	cmp	r1, #5
    2d08:	str	r0, [fp, #-872]	; 0xfffffc98
    2d0c:	bge	2d30 <print_expression+0x1bb4>
    2d10:	ldr	r0, [fp, #-16]
    2d14:	movw	r1, #0
    2d18:	movt	r1, #0
    2d1c:	str	r0, [fp, #-876]	; 0xfffffc94
    2d20:	mov	r0, r1
    2d24:	ldr	r1, [fp, #-876]	; 0xfffffc94
    2d28:	blx	r1
    2d2c:	str	r0, [fp, #-880]	; 0xfffffc90
    2d30:	b	4cd8 <print_expression+0x3b5c>
    2d34:	ldr	r0, [fp, #-16]
    2d38:	movw	r1, #0
    2d3c:	movt	r1, #0
    2d40:	str	r0, [fp, #-884]	; 0xfffffc8c
    2d44:	mov	r0, r1
    2d48:	ldr	r1, [fp, #-884]	; 0xfffffc8c
    2d4c:	blx	r1
    2d50:	ldr	r1, [fp, #-12]
    2d54:	ldr	r1, [r1, #16]
    2d58:	ldr	lr, [fp, #-16]
    2d5c:	ldr	r2, [fp, #-20]	; 0xffffffec
    2d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2d64:	str	r0, [fp, #-888]	; 0xfffffc88
    2d68:	mov	r0, r1
    2d6c:	mov	r1, lr
    2d70:	movw	lr, #15
    2d74:	str	lr, [sp]
    2d78:	bl	117c <print_expression>
    2d7c:	ldr	r1, [fp, #-16]
    2d80:	movw	r2, #0
    2d84:	movt	r2, #0
    2d88:	str	r0, [fp, #-892]	; 0xfffffc84
    2d8c:	mov	r0, r2
    2d90:	blx	r1
    2d94:	ldr	r1, [fp, #-12]
    2d98:	ldr	r1, [r1, #20]
    2d9c:	ldr	r2, [fp, #-16]
    2da0:	ldr	r3, [fp, #-20]	; 0xffffffec
    2da4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    2da8:	str	r0, [fp, #-896]	; 0xfffffc80
    2dac:	mov	r0, r1
    2db0:	mov	r1, r2
    2db4:	mov	r2, r3
    2db8:	mov	r3, lr
    2dbc:	movw	lr, #15
    2dc0:	str	lr, [sp]
    2dc4:	bl	117c <print_expression>
    2dc8:	ldr	r1, [fp, #-16]
    2dcc:	movw	r2, #0
    2dd0:	movt	r2, #0
    2dd4:	str	r0, [fp, #-900]	; 0xfffffc7c
    2dd8:	mov	r0, r2
    2ddc:	blx	r1
    2de0:	ldr	r1, [fp, #-12]
    2de4:	ldr	r1, [r1, #24]
    2de8:	ldr	r2, [fp, #-16]
    2dec:	ldr	r3, [fp, #-20]	; 0xffffffec
    2df0:	ldr	lr, [fp, #-24]	; 0xffffffe8
    2df4:	str	r0, [fp, #-904]	; 0xfffffc78
    2df8:	mov	r0, r1
    2dfc:	mov	r1, r2
    2e00:	mov	r2, r3
    2e04:	mov	r3, lr
    2e08:	movw	lr, #15
    2e0c:	str	lr, [sp]
    2e10:	bl	117c <print_expression>
    2e14:	ldr	r1, [fp, #-16]
    2e18:	movw	r2, #0
    2e1c:	movt	r2, #0
    2e20:	str	r0, [fp, #-908]	; 0xfffffc74
    2e24:	mov	r0, r2
    2e28:	blx	r1
    2e2c:	str	r0, [fp, #-912]	; 0xfffffc70
    2e30:	b	4cd8 <print_expression+0x3b5c>
    2e34:	ldr	r0, [fp, #-16]
    2e38:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2e3c:	cmp	r1, #0
    2e40:	movw	r1, #0
    2e44:	movne	r1, #1
    2e48:	tst	r1, #1
    2e4c:	movw	r1, #0
    2e50:	movt	r1, #0
    2e54:	movw	r2, #0
    2e58:	movt	r2, #0
    2e5c:	movne	r1, r2
    2e60:	str	r0, [fp, #-916]	; 0xfffffc6c
    2e64:	mov	r0, r1
    2e68:	ldr	r1, [fp, #-916]	; 0xfffffc6c
    2e6c:	blx	r1
    2e70:	ldr	r1, [fp, #-12]
    2e74:	ldr	r1, [r1, #16]
    2e78:	ldr	r2, [fp, #-16]
    2e7c:	ldr	lr, [fp, #-20]	; 0xffffffec
    2e80:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2e84:	str	r0, [fp, #-920]	; 0xfffffc68
    2e88:	mov	r0, r1
    2e8c:	mov	r1, r2
    2e90:	mov	r2, lr
    2e94:	movw	lr, #15
    2e98:	str	lr, [sp]
    2e9c:	bl	117c <print_expression>
    2ea0:	ldr	r1, [fp, #-16]
    2ea4:	movw	r2, #0
    2ea8:	movt	r2, #0
    2eac:	str	r0, [fp, #-924]	; 0xfffffc64
    2eb0:	mov	r0, r2
    2eb4:	blx	r1
    2eb8:	str	r0, [fp, #-928]	; 0xfffffc60
    2ebc:	b	4cd8 <print_expression+0x3b5c>
    2ec0:	ldr	r0, [fp, #-16]
    2ec4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2ec8:	cmp	r1, #0
    2ecc:	movw	r1, #0
    2ed0:	movne	r1, #1
    2ed4:	tst	r1, #1
    2ed8:	movw	r1, #0
    2edc:	movt	r1, #0
    2ee0:	movw	r2, #0
    2ee4:	movt	r2, #0
    2ee8:	movne	r1, r2
    2eec:	ldr	r2, [fp, #-12]
    2ef0:	ldr	r2, [r2, #12]
    2ef4:	str	r0, [fp, #-932]	; 0xfffffc5c
    2ef8:	mov	r0, r1
    2efc:	mov	r1, r2
    2f00:	ldr	r2, [fp, #-932]	; 0xfffffc5c
    2f04:	blx	r2
    2f08:	str	r0, [sp, #936]	; 0x3a8
    2f0c:	b	4cd8 <print_expression+0x3b5c>
    2f10:	ldr	r0, [fp, #-16]
    2f14:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2f18:	cmp	r1, #0
    2f1c:	movw	r1, #0
    2f20:	movne	r1, #1
    2f24:	tst	r1, #1
    2f28:	movw	r1, #0
    2f2c:	movt	r1, #0
    2f30:	movw	r2, #0
    2f34:	movt	r2, #0
    2f38:	movne	r1, r2
    2f3c:	str	r0, [sp, #932]	; 0x3a4
    2f40:	mov	r0, r1
    2f44:	ldr	r1, [sp, #932]	; 0x3a4
    2f48:	blx	r1
    2f4c:	ldr	r1, [fp, #-12]
    2f50:	ldr	r1, [r1, #16]
    2f54:	ldr	r2, [fp, #-16]
    2f58:	ldr	lr, [fp, #-20]	; 0xffffffec
    2f5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2f60:	str	r0, [sp, #928]	; 0x3a0
    2f64:	mov	r0, r1
    2f68:	mov	r1, r2
    2f6c:	mov	r2, lr
    2f70:	movw	lr, #15
    2f74:	str	lr, [sp]
    2f78:	bl	117c <print_expression>
    2f7c:	ldr	r1, [fp, #-16]
    2f80:	movw	r2, #0
    2f84:	movt	r2, #0
    2f88:	str	r0, [sp, #924]	; 0x39c
    2f8c:	mov	r0, r2
    2f90:	blx	r1
    2f94:	str	r0, [sp, #920]	; 0x398
    2f98:	b	4cd8 <print_expression+0x3b5c>
    2f9c:	ldr	r0, [fp, #-16]
    2fa0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2fa4:	cmp	r1, #0
    2fa8:	movw	r1, #0
    2fac:	movne	r1, #1
    2fb0:	tst	r1, #1
    2fb4:	movw	r1, #0
    2fb8:	movt	r1, #0
    2fbc:	movw	r2, #0
    2fc0:	movt	r2, #0
    2fc4:	movne	r1, r2
    2fc8:	str	r0, [sp, #916]	; 0x394
    2fcc:	mov	r0, r1
    2fd0:	ldr	r1, [sp, #916]	; 0x394
    2fd4:	blx	r1
    2fd8:	ldr	r1, [fp, #-12]
    2fdc:	ldr	r1, [r1, #16]
    2fe0:	ldr	r2, [fp, #-16]
    2fe4:	ldr	lr, [fp, #-20]	; 0xffffffec
    2fe8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2fec:	str	r0, [sp, #912]	; 0x390
    2ff0:	mov	r0, r1
    2ff4:	mov	r1, r2
    2ff8:	mov	r2, lr
    2ffc:	movw	lr, #15
    3000:	str	lr, [sp]
    3004:	bl	117c <print_expression>
    3008:	ldr	r1, [fp, #-16]
    300c:	movw	r2, #0
    3010:	movt	r2, #0
    3014:	str	r0, [sp, #908]	; 0x38c
    3018:	mov	r0, r2
    301c:	blx	r1
    3020:	str	r0, [sp, #904]	; 0x388
    3024:	b	4cd8 <print_expression+0x3b5c>
    3028:	ldr	r0, [fp, #-16]
    302c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3030:	cmp	r1, #0
    3034:	movw	r1, #0
    3038:	movne	r1, #1
    303c:	tst	r1, #1
    3040:	movw	r1, #0
    3044:	movt	r1, #0
    3048:	movw	r2, #0
    304c:	movt	r2, #0
    3050:	movne	r1, r2
    3054:	str	r0, [sp, #900]	; 0x384
    3058:	mov	r0, r1
    305c:	ldr	r1, [sp, #900]	; 0x384
    3060:	blx	r1
    3064:	ldr	r1, [fp, #-12]
    3068:	ldr	r1, [r1, #16]
    306c:	ldr	r2, [fp, #-16]
    3070:	ldr	lr, [fp, #-20]	; 0xffffffec
    3074:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3078:	str	r0, [sp, #896]	; 0x380
    307c:	mov	r0, r1
    3080:	mov	r1, r2
    3084:	mov	r2, lr
    3088:	movw	lr, #15
    308c:	str	lr, [sp]
    3090:	bl	117c <print_expression>
    3094:	ldr	r1, [fp, #-16]
    3098:	movw	r2, #0
    309c:	movt	r2, #0
    30a0:	str	r0, [sp, #892]	; 0x37c
    30a4:	mov	r0, r2
    30a8:	blx	r1
    30ac:	str	r0, [sp, #888]	; 0x378
    30b0:	b	4cd8 <print_expression+0x3b5c>
    30b4:	ldr	r0, [fp, #-16]
    30b8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    30bc:	cmp	r1, #0
    30c0:	movw	r1, #0
    30c4:	movne	r1, #1
    30c8:	tst	r1, #1
    30cc:	movw	r1, #0
    30d0:	movt	r1, #0
    30d4:	movw	r2, #0
    30d8:	movt	r2, #0
    30dc:	movne	r1, r2
    30e0:	str	r0, [sp, #884]	; 0x374
    30e4:	mov	r0, r1
    30e8:	ldr	r1, [sp, #884]	; 0x374
    30ec:	blx	r1
    30f0:	ldr	r1, [fp, #-12]
    30f4:	ldr	r1, [r1, #16]
    30f8:	ldr	r2, [fp, #-16]
    30fc:	ldr	lr, [fp, #-20]	; 0xffffffec
    3100:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3104:	str	r0, [sp, #880]	; 0x370
    3108:	mov	r0, r1
    310c:	mov	r1, r2
    3110:	mov	r2, lr
    3114:	movw	lr, #15
    3118:	str	lr, [sp]
    311c:	bl	117c <print_expression>
    3120:	ldr	r1, [fp, #-16]
    3124:	movw	r2, #0
    3128:	movt	r2, #0
    312c:	str	r0, [sp, #876]	; 0x36c
    3130:	mov	r0, r2
    3134:	blx	r1
    3138:	str	r0, [sp, #872]	; 0x368
    313c:	b	4cd8 <print_expression+0x3b5c>
    3140:	ldr	r0, [fp, #-16]
    3144:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3148:	cmp	r1, #0
    314c:	movw	r1, #0
    3150:	movne	r1, #1
    3154:	tst	r1, #1
    3158:	movw	r1, #0
    315c:	movt	r1, #0
    3160:	movw	r2, #0
    3164:	movt	r2, #0
    3168:	movne	r1, r2
    316c:	str	r0, [sp, #868]	; 0x364
    3170:	mov	r0, r1
    3174:	ldr	r1, [sp, #868]	; 0x364
    3178:	blx	r1
    317c:	ldr	r1, [fp, #-12]
    3180:	ldr	r1, [r1, #16]
    3184:	ldr	r2, [fp, #-16]
    3188:	ldr	lr, [fp, #-20]	; 0xffffffec
    318c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3190:	str	r0, [sp, #864]	; 0x360
    3194:	mov	r0, r1
    3198:	mov	r1, r2
    319c:	mov	r2, lr
    31a0:	movw	lr, #15
    31a4:	str	lr, [sp]
    31a8:	bl	117c <print_expression>
    31ac:	ldr	r1, [fp, #-16]
    31b0:	movw	r2, #0
    31b4:	movt	r2, #0
    31b8:	str	r0, [sp, #860]	; 0x35c
    31bc:	mov	r0, r2
    31c0:	blx	r1
    31c4:	str	r0, [sp, #856]	; 0x358
    31c8:	b	4cd8 <print_expression+0x3b5c>
    31cc:	ldr	r0, [fp, #-16]
    31d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    31d4:	cmp	r1, #0
    31d8:	movw	r1, #0
    31dc:	movne	r1, #1
    31e0:	tst	r1, #1
    31e4:	movw	r1, #0
    31e8:	movt	r1, #0
    31ec:	movw	r2, #0
    31f0:	movt	r2, #0
    31f4:	movne	r1, r2
    31f8:	str	r0, [sp, #852]	; 0x354
    31fc:	mov	r0, r1
    3200:	ldr	r1, [sp, #852]	; 0x354
    3204:	blx	r1
    3208:	ldr	r1, [fp, #-12]
    320c:	ldr	r1, [r1, #16]
    3210:	ldr	r2, [fp, #-16]
    3214:	ldr	lr, [fp, #-20]	; 0xffffffec
    3218:	ldr	r3, [fp, #-24]	; 0xffffffe8
    321c:	str	r0, [sp, #848]	; 0x350
    3220:	mov	r0, r1
    3224:	mov	r1, r2
    3228:	mov	r2, lr
    322c:	movw	lr, #15
    3230:	str	lr, [sp]
    3234:	bl	117c <print_expression>
    3238:	ldr	r1, [fp, #-16]
    323c:	movw	r2, #0
    3240:	movt	r2, #0
    3244:	str	r0, [sp, #844]	; 0x34c
    3248:	mov	r0, r2
    324c:	blx	r1
    3250:	str	r0, [sp, #840]	; 0x348
    3254:	b	4cd8 <print_expression+0x3b5c>
    3258:	ldr	r0, [fp, #8]
    325c:	cmp	r0, #5
    3260:	bge	3284 <print_expression+0x2108>
    3264:	ldr	r0, [fp, #-16]
    3268:	movw	r1, #0
    326c:	movt	r1, #0
    3270:	str	r0, [sp, #836]	; 0x344
    3274:	mov	r0, r1
    3278:	ldr	r1, [sp, #836]	; 0x344
    327c:	blx	r1
    3280:	str	r0, [sp, #832]	; 0x340
    3284:	ldr	r0, [fp, #-12]
    3288:	ldr	r0, [r0, #16]
    328c:	ldr	r1, [fp, #-16]
    3290:	ldr	r2, [fp, #-20]	; 0xffffffec
    3294:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3298:	movw	ip, #5
    329c:	str	ip, [sp]
    32a0:	bl	117c <print_expression>
    32a4:	ldr	r1, [fp, #-16]
    32a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    32ac:	cmp	r2, #0
    32b0:	movw	r2, #1
    32b4:	str	r0, [sp, #828]	; 0x33c
    32b8:	str	r1, [sp, #824]	; 0x338
    32bc:	str	r2, [sp, #820]	; 0x334
    32c0:	bne	32d8 <print_expression+0x215c>
    32c4:	ldr	r0, [fp, #-20]	; 0xffffffec
    32c8:	cmp	r0, #0
    32cc:	movw	r0, #0
    32d0:	movne	r0, #1
    32d4:	str	r0, [sp, #820]	; 0x334
    32d8:	ldr	r0, [sp, #820]	; 0x334
    32dc:	tst	r0, #1
    32e0:	movw	r0, #0
    32e4:	movt	r0, #0
    32e8:	movw	r1, #0
    32ec:	movt	r1, #0
    32f0:	movne	r0, r1
    32f4:	ldr	r1, [sp, #824]	; 0x338
    32f8:	blx	r1
    32fc:	ldr	r1, [fp, #-12]
    3300:	ldr	r1, [r1, #20]
    3304:	ldr	lr, [fp, #-16]
    3308:	ldr	r2, [fp, #-20]	; 0xffffffec
    330c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3310:	str	r0, [sp, #816]	; 0x330
    3314:	mov	r0, r1
    3318:	mov	r1, lr
    331c:	movw	lr, #5
    3320:	str	lr, [sp]
    3324:	bl	117c <print_expression>
    3328:	ldr	r1, [fp, #8]
    332c:	cmp	r1, #5
    3330:	str	r0, [sp, #812]	; 0x32c
    3334:	bge	3358 <print_expression+0x21dc>
    3338:	ldr	r0, [fp, #-16]
    333c:	movw	r1, #0
    3340:	movt	r1, #0
    3344:	str	r0, [sp, #808]	; 0x328
    3348:	mov	r0, r1
    334c:	ldr	r1, [sp, #808]	; 0x328
    3350:	blx	r1
    3354:	str	r0, [sp, #804]	; 0x324
    3358:	b	4cd8 <print_expression+0x3b5c>
    335c:	ldr	r0, [fp, #8]
    3360:	cmp	r0, #5
    3364:	bge	3388 <print_expression+0x220c>
    3368:	ldr	r0, [fp, #-16]
    336c:	movw	r1, #0
    3370:	movt	r1, #0
    3374:	str	r0, [sp, #800]	; 0x320
    3378:	mov	r0, r1
    337c:	ldr	r1, [sp, #800]	; 0x320
    3380:	blx	r1
    3384:	str	r0, [sp, #796]	; 0x31c
    3388:	ldr	r0, [fp, #-12]
    338c:	ldr	r0, [r0, #16]
    3390:	ldr	r1, [fp, #-16]
    3394:	ldr	r2, [fp, #-20]	; 0xffffffec
    3398:	ldr	r3, [fp, #-24]	; 0xffffffe8
    339c:	movw	ip, #5
    33a0:	str	ip, [sp]
    33a4:	bl	117c <print_expression>
    33a8:	ldr	r1, [fp, #-16]
    33ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    33b0:	cmp	r2, #0
    33b4:	movw	r2, #1
    33b8:	str	r0, [sp, #792]	; 0x318
    33bc:	str	r1, [sp, #788]	; 0x314
    33c0:	str	r2, [sp, #784]	; 0x310
    33c4:	bne	33dc <print_expression+0x2260>
    33c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    33cc:	cmp	r0, #0
    33d0:	movw	r0, #0
    33d4:	movne	r0, #1
    33d8:	str	r0, [sp, #784]	; 0x310
    33dc:	ldr	r0, [sp, #784]	; 0x310
    33e0:	tst	r0, #1
    33e4:	movw	r0, #0
    33e8:	movt	r0, #0
    33ec:	movw	r1, #0
    33f0:	movt	r1, #0
    33f4:	movne	r0, r1
    33f8:	ldr	r1, [sp, #788]	; 0x314
    33fc:	blx	r1
    3400:	ldr	r1, [fp, #-12]
    3404:	ldr	r1, [r1, #20]
    3408:	ldr	lr, [fp, #-16]
    340c:	ldr	r2, [fp, #-20]	; 0xffffffec
    3410:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3414:	str	r0, [sp, #780]	; 0x30c
    3418:	mov	r0, r1
    341c:	mov	r1, lr
    3420:	movw	lr, #5
    3424:	str	lr, [sp]
    3428:	bl	117c <print_expression>
    342c:	ldr	r1, [fp, #8]
    3430:	cmp	r1, #5
    3434:	str	r0, [sp, #776]	; 0x308
    3438:	bge	345c <print_expression+0x22e0>
    343c:	ldr	r0, [fp, #-16]
    3440:	movw	r1, #0
    3444:	movt	r1, #0
    3448:	str	r0, [sp, #772]	; 0x304
    344c:	mov	r0, r1
    3450:	ldr	r1, [sp, #772]	; 0x304
    3454:	blx	r1
    3458:	str	r0, [sp, #768]	; 0x300
    345c:	b	4cd8 <print_expression+0x3b5c>
    3460:	ldr	r0, [fp, #8]
    3464:	cmp	r0, #9
    3468:	bge	348c <print_expression+0x2310>
    346c:	ldr	r0, [fp, #-16]
    3470:	movw	r1, #0
    3474:	movt	r1, #0
    3478:	str	r0, [sp, #764]	; 0x2fc
    347c:	mov	r0, r1
    3480:	ldr	r1, [sp, #764]	; 0x2fc
    3484:	blx	r1
    3488:	str	r0, [sp, #760]	; 0x2f8
    348c:	ldr	r0, [fp, #-12]
    3490:	ldr	r0, [r0, #16]
    3494:	ldr	r1, [fp, #-16]
    3498:	ldr	r2, [fp, #-20]	; 0xffffffec
    349c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    34a0:	movw	ip, #9
    34a4:	str	ip, [sp]
    34a8:	bl	117c <print_expression>
    34ac:	ldr	r1, [fp, #-16]
    34b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    34b4:	cmp	r2, #0
    34b8:	movw	r2, #0
    34bc:	movne	r2, #1
    34c0:	tst	r2, #1
    34c4:	movw	r2, #0
    34c8:	movt	r2, #0
    34cc:	movw	r3, #0
    34d0:	movt	r3, #0
    34d4:	movne	r2, r3
    34d8:	str	r0, [sp, #756]	; 0x2f4
    34dc:	mov	r0, r2
    34e0:	blx	r1
    34e4:	ldr	r1, [fp, #-12]
    34e8:	ldr	r1, [r1, #20]
    34ec:	ldr	r2, [fp, #-16]
    34f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    34f4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    34f8:	str	r0, [sp, #752]	; 0x2f0
    34fc:	mov	r0, r1
    3500:	mov	r1, r2
    3504:	mov	r2, r3
    3508:	mov	r3, ip
    350c:	movw	ip, #9
    3510:	str	ip, [sp]
    3514:	bl	117c <print_expression>
    3518:	ldr	r1, [fp, #8]
    351c:	cmp	r1, #9
    3520:	str	r0, [sp, #748]	; 0x2ec
    3524:	bge	3548 <print_expression+0x23cc>
    3528:	ldr	r0, [fp, #-16]
    352c:	movw	r1, #0
    3530:	movt	r1, #0
    3534:	str	r0, [sp, #744]	; 0x2e8
    3538:	mov	r0, r1
    353c:	ldr	r1, [sp, #744]	; 0x2e8
    3540:	blx	r1
    3544:	str	r0, [sp, #740]	; 0x2e4
    3548:	b	4cd8 <print_expression+0x3b5c>
    354c:	ldr	r0, [fp, #8]
    3550:	cmp	r0, #10
    3554:	bge	3578 <print_expression+0x23fc>
    3558:	ldr	r0, [fp, #-16]
    355c:	movw	r1, #0
    3560:	movt	r1, #0
    3564:	str	r0, [sp, #736]	; 0x2e0
    3568:	mov	r0, r1
    356c:	ldr	r1, [sp, #736]	; 0x2e0
    3570:	blx	r1
    3574:	str	r0, [sp, #732]	; 0x2dc
    3578:	ldr	r0, [fp, #-12]
    357c:	ldr	r0, [r0, #16]
    3580:	ldr	r1, [fp, #-16]
    3584:	ldr	r2, [fp, #-20]	; 0xffffffec
    3588:	ldr	r3, [fp, #-24]	; 0xffffffe8
    358c:	movw	ip, #10
    3590:	str	ip, [sp]
    3594:	bl	117c <print_expression>
    3598:	ldr	r1, [fp, #-16]
    359c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    35a0:	cmp	r2, #0
    35a4:	movw	r2, #0
    35a8:	movne	r2, #1
    35ac:	tst	r2, #1
    35b0:	movw	r2, #0
    35b4:	movt	r2, #0
    35b8:	movw	r3, #0
    35bc:	movt	r3, #0
    35c0:	movne	r2, r3
    35c4:	str	r0, [sp, #728]	; 0x2d8
    35c8:	mov	r0, r2
    35cc:	blx	r1
    35d0:	ldr	r1, [fp, #-12]
    35d4:	ldr	r1, [r1, #20]
    35d8:	ldr	r2, [fp, #-16]
    35dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    35e0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    35e4:	str	r0, [sp, #724]	; 0x2d4
    35e8:	mov	r0, r1
    35ec:	mov	r1, r2
    35f0:	mov	r2, r3
    35f4:	mov	r3, ip
    35f8:	movw	ip, #10
    35fc:	str	ip, [sp]
    3600:	bl	117c <print_expression>
    3604:	ldr	r1, [fp, #8]
    3608:	cmp	r1, #10
    360c:	str	r0, [sp, #720]	; 0x2d0
    3610:	bge	3634 <print_expression+0x24b8>
    3614:	ldr	r0, [fp, #-16]
    3618:	movw	r1, #0
    361c:	movt	r1, #0
    3620:	str	r0, [sp, #716]	; 0x2cc
    3624:	mov	r0, r1
    3628:	ldr	r1, [sp, #716]	; 0x2cc
    362c:	blx	r1
    3630:	str	r0, [sp, #712]	; 0x2c8
    3634:	b	4cd8 <print_expression+0x3b5c>
    3638:	ldr	r0, [fp, #-16]
    363c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3640:	cmp	r1, #0
    3644:	movw	r1, #0
    3648:	movne	r1, #1
    364c:	tst	r1, #1
    3650:	movw	r1, #0
    3654:	movt	r1, #0
    3658:	movw	r2, #0
    365c:	movt	r2, #0
    3660:	movne	r1, r2
    3664:	str	r0, [sp, #708]	; 0x2c4
    3668:	mov	r0, r1
    366c:	ldr	r1, [sp, #708]	; 0x2c4
    3670:	blx	r1
    3674:	ldr	r1, [fp, #-12]
    3678:	ldr	r1, [r1, #16]
    367c:	ldr	r2, [fp, #-16]
    3680:	ldr	lr, [fp, #-20]	; 0xffffffec
    3684:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3688:	str	r0, [sp, #704]	; 0x2c0
    368c:	mov	r0, r1
    3690:	mov	r1, r2
    3694:	mov	r2, lr
    3698:	movw	lr, #15
    369c:	str	lr, [sp]
    36a0:	bl	117c <print_expression>
    36a4:	ldr	r1, [fp, #-16]
    36a8:	movw	r2, #0
    36ac:	movt	r2, #0
    36b0:	str	r0, [sp, #700]	; 0x2bc
    36b4:	mov	r0, r2
    36b8:	blx	r1
    36bc:	str	r0, [sp, #696]	; 0x2b8
    36c0:	b	4cd8 <print_expression+0x3b5c>
    36c4:	ldr	r0, [fp, #-16]
    36c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    36cc:	cmp	r1, #0
    36d0:	movw	r1, #0
    36d4:	movne	r1, #1
    36d8:	tst	r1, #1
    36dc:	movw	r1, #0
    36e0:	movt	r1, #0
    36e4:	movw	r2, #0
    36e8:	movt	r2, #0
    36ec:	movne	r1, r2
    36f0:	str	r0, [sp, #692]	; 0x2b4
    36f4:	mov	r0, r1
    36f8:	ldr	r1, [sp, #692]	; 0x2b4
    36fc:	blx	r1
    3700:	ldr	r1, [fp, #-12]
    3704:	ldr	r1, [r1, #16]
    3708:	ldr	r2, [fp, #-16]
    370c:	ldr	lr, [fp, #-20]	; 0xffffffec
    3710:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3714:	str	r0, [sp, #688]	; 0x2b0
    3718:	mov	r0, r1
    371c:	mov	r1, r2
    3720:	mov	r2, lr
    3724:	movw	lr, #15
    3728:	str	lr, [sp]
    372c:	bl	117c <print_expression>
    3730:	ldr	r1, [fp, #-16]
    3734:	movw	r2, #0
    3738:	movt	r2, #0
    373c:	str	r0, [sp, #684]	; 0x2ac
    3740:	mov	r0, r2
    3744:	blx	r1
    3748:	ldr	r1, [fp, #-12]
    374c:	ldr	r1, [r1, #20]
    3750:	ldr	r2, [fp, #-16]
    3754:	ldr	r3, [fp, #-20]	; 0xffffffec
    3758:	ldr	lr, [fp, #-24]	; 0xffffffe8
    375c:	str	r0, [sp, #680]	; 0x2a8
    3760:	mov	r0, r1
    3764:	mov	r1, r2
    3768:	mov	r2, r3
    376c:	mov	r3, lr
    3770:	movw	lr, #15
    3774:	str	lr, [sp]
    3778:	bl	117c <print_expression>
    377c:	ldr	r1, [fp, #-16]
    3780:	movw	r2, #0
    3784:	movt	r2, #0
    3788:	str	r0, [sp, #676]	; 0x2a4
    378c:	mov	r0, r2
    3790:	blx	r1
    3794:	str	r0, [sp, #672]	; 0x2a0
    3798:	b	4cd8 <print_expression+0x3b5c>
    379c:	ldr	r0, [fp, #-16]
    37a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    37a4:	cmp	r1, #0
    37a8:	movw	r1, #0
    37ac:	movne	r1, #1
    37b0:	tst	r1, #1
    37b4:	movw	r1, #0
    37b8:	movt	r1, #0
    37bc:	movw	r2, #0
    37c0:	movt	r2, #0
    37c4:	movne	r1, r2
    37c8:	str	r0, [sp, #668]	; 0x29c
    37cc:	mov	r0, r1
    37d0:	ldr	r1, [sp, #668]	; 0x29c
    37d4:	blx	r1
    37d8:	ldr	r1, [fp, #-12]
    37dc:	ldr	r1, [r1, #16]
    37e0:	ldr	r2, [fp, #-16]
    37e4:	ldr	lr, [fp, #-20]	; 0xffffffec
    37e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    37ec:	str	r0, [sp, #664]	; 0x298
    37f0:	mov	r0, r1
    37f4:	mov	r1, r2
    37f8:	mov	r2, lr
    37fc:	movw	lr, #15
    3800:	str	lr, [sp]
    3804:	bl	117c <print_expression>
    3808:	ldr	r1, [fp, #-16]
    380c:	movw	r2, #0
    3810:	movt	r2, #0
    3814:	str	r0, [sp, #660]	; 0x294
    3818:	mov	r0, r2
    381c:	blx	r1
    3820:	ldr	r1, [fp, #-12]
    3824:	ldr	r1, [r1, #20]
    3828:	ldr	r2, [fp, #-16]
    382c:	ldr	r3, [fp, #-20]	; 0xffffffec
    3830:	ldr	lr, [fp, #-24]	; 0xffffffe8
    3834:	str	r0, [sp, #656]	; 0x290
    3838:	mov	r0, r1
    383c:	mov	r1, r2
    3840:	mov	r2, r3
    3844:	mov	r3, lr
    3848:	movw	lr, #15
    384c:	str	lr, [sp]
    3850:	bl	117c <print_expression>
    3854:	ldr	r1, [fp, #-16]
    3858:	movw	r2, #0
    385c:	movt	r2, #0
    3860:	str	r0, [sp, #652]	; 0x28c
    3864:	mov	r0, r2
    3868:	blx	r1
    386c:	str	r0, [sp, #648]	; 0x288
    3870:	b	4cd8 <print_expression+0x3b5c>
    3874:	ldr	r0, [fp, #8]
    3878:	cmp	r0, #3
    387c:	bge	38a0 <print_expression+0x2724>
    3880:	ldr	r0, [fp, #-16]
    3884:	movw	r1, #0
    3888:	movt	r1, #0
    388c:	str	r0, [sp, #644]	; 0x284
    3890:	mov	r0, r1
    3894:	ldr	r1, [sp, #644]	; 0x284
    3898:	blx	r1
    389c:	str	r0, [sp, #640]	; 0x280
    38a0:	ldr	r0, [fp, #-12]
    38a4:	ldr	r0, [r0, #16]
    38a8:	ldr	r1, [fp, #-16]
    38ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    38b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    38b4:	movw	ip, #3
    38b8:	str	ip, [sp]
    38bc:	bl	117c <print_expression>
    38c0:	ldr	r1, [fp, #-16]
    38c4:	movw	r2, #0
    38c8:	movt	r2, #0
    38cc:	str	r0, [sp, #636]	; 0x27c
    38d0:	mov	r0, r2
    38d4:	blx	r1
    38d8:	ldr	r1, [fp, #-12]
    38dc:	ldr	r1, [r1, #20]
    38e0:	ldr	r2, [fp, #-16]
    38e4:	ldr	r3, [fp, #-20]	; 0xffffffec
    38e8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    38ec:	str	r0, [sp, #632]	; 0x278
    38f0:	mov	r0, r1
    38f4:	mov	r1, r2
    38f8:	mov	r2, r3
    38fc:	mov	r3, ip
    3900:	movw	ip, #3
    3904:	str	ip, [sp]
    3908:	bl	117c <print_expression>
    390c:	ldr	r1, [fp, #8]
    3910:	cmp	r1, #3
    3914:	str	r0, [sp, #628]	; 0x274
    3918:	bge	393c <print_expression+0x27c0>
    391c:	ldr	r0, [fp, #-16]
    3920:	movw	r1, #0
    3924:	movt	r1, #0
    3928:	str	r0, [sp, #624]	; 0x270
    392c:	mov	r0, r1
    3930:	ldr	r1, [sp, #624]	; 0x270
    3934:	blx	r1
    3938:	str	r0, [sp, #620]	; 0x26c
    393c:	b	4cd8 <print_expression+0x3b5c>
    3940:	ldr	r0, [fp, #8]
    3944:	cmp	r0, #3
    3948:	bge	396c <print_expression+0x27f0>
    394c:	ldr	r0, [fp, #-16]
    3950:	movw	r1, #0
    3954:	movt	r1, #0
    3958:	str	r0, [sp, #616]	; 0x268
    395c:	mov	r0, r1
    3960:	ldr	r1, [sp, #616]	; 0x268
    3964:	blx	r1
    3968:	str	r0, [sp, #612]	; 0x264
    396c:	ldr	r0, [fp, #-12]
    3970:	ldr	r0, [r0, #16]
    3974:	ldr	r1, [fp, #-16]
    3978:	ldr	r2, [fp, #-20]	; 0xffffffec
    397c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3980:	movw	ip, #3
    3984:	str	ip, [sp]
    3988:	bl	117c <print_expression>
    398c:	ldr	r1, [fp, #-16]
    3990:	movw	r2, #0
    3994:	movt	r2, #0
    3998:	str	r0, [sp, #608]	; 0x260
    399c:	mov	r0, r2
    39a0:	blx	r1
    39a4:	ldr	r1, [fp, #-12]
    39a8:	ldr	r1, [r1, #20]
    39ac:	ldr	r2, [fp, #-16]
    39b0:	ldr	r3, [fp, #-20]	; 0xffffffec
    39b4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    39b8:	str	r0, [sp, #604]	; 0x25c
    39bc:	mov	r0, r1
    39c0:	mov	r1, r2
    39c4:	mov	r2, r3
    39c8:	mov	r3, ip
    39cc:	movw	ip, #3
    39d0:	str	ip, [sp]
    39d4:	bl	117c <print_expression>
    39d8:	ldr	r1, [fp, #8]
    39dc:	cmp	r1, #3
    39e0:	str	r0, [sp, #600]	; 0x258
    39e4:	bge	3a08 <print_expression+0x288c>
    39e8:	ldr	r0, [fp, #-16]
    39ec:	movw	r1, #0
    39f0:	movt	r1, #0
    39f4:	str	r0, [sp, #596]	; 0x254
    39f8:	mov	r0, r1
    39fc:	ldr	r1, [sp, #596]	; 0x254
    3a00:	blx	r1
    3a04:	str	r0, [sp, #592]	; 0x250
    3a08:	b	4cd8 <print_expression+0x3b5c>
    3a0c:	ldr	r0, [fp, #-16]
    3a10:	movw	r1, #0
    3a14:	movt	r1, #0
    3a18:	str	r0, [sp, #588]	; 0x24c
    3a1c:	mov	r0, r1
    3a20:	ldr	r1, [sp, #588]	; 0x24c
    3a24:	blx	r1
    3a28:	ldr	r1, [fp, #-12]
    3a2c:	ldr	r1, [r1, #16]
    3a30:	ldr	lr, [fp, #-16]
    3a34:	ldr	r2, [fp, #-20]	; 0xffffffec
    3a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a3c:	str	r0, [sp, #584]	; 0x248
    3a40:	mov	r0, r1
    3a44:	mov	r1, lr
    3a48:	movw	lr, #1
    3a4c:	str	lr, [sp]
    3a50:	bl	117c <print_expression>
    3a54:	str	r0, [sp, #580]	; 0x244
    3a58:	b	4cd8 <print_expression+0x3b5c>
    3a5c:	ldr	r0, [fp, #8]
    3a60:	cmp	r0, #6
    3a64:	bge	3a88 <print_expression+0x290c>
    3a68:	ldr	r0, [fp, #-16]
    3a6c:	movw	r1, #0
    3a70:	movt	r1, #0
    3a74:	str	r0, [sp, #576]	; 0x240
    3a78:	mov	r0, r1
    3a7c:	ldr	r1, [sp, #576]	; 0x240
    3a80:	blx	r1
    3a84:	str	r0, [sp, #572]	; 0x23c
    3a88:	ldr	r0, [fp, #-12]
    3a8c:	ldr	r0, [r0, #16]
    3a90:	ldr	r1, [fp, #-16]
    3a94:	ldr	r2, [fp, #-20]	; 0xffffffec
    3a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3a9c:	movw	ip, #6
    3aa0:	str	ip, [sp]
    3aa4:	bl	117c <print_expression>
    3aa8:	ldr	r1, [fp, #-16]
    3aac:	movw	r2, #0
    3ab0:	movt	r2, #0
    3ab4:	str	r0, [sp, #568]	; 0x238
    3ab8:	mov	r0, r2
    3abc:	blx	r1
    3ac0:	ldr	r1, [fp, #-12]
    3ac4:	ldr	r1, [r1, #20]
    3ac8:	ldr	r2, [fp, #-16]
    3acc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3ad0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3ad4:	str	r0, [sp, #564]	; 0x234
    3ad8:	mov	r0, r1
    3adc:	mov	r1, r2
    3ae0:	mov	r2, r3
    3ae4:	mov	r3, ip
    3ae8:	movw	ip, #6
    3aec:	str	ip, [sp]
    3af0:	bl	117c <print_expression>
    3af4:	ldr	r1, [fp, #8]
    3af8:	cmp	r1, #6
    3afc:	str	r0, [sp, #560]	; 0x230
    3b00:	bge	3b24 <print_expression+0x29a8>
    3b04:	ldr	r0, [fp, #-16]
    3b08:	movw	r1, #0
    3b0c:	movt	r1, #0
    3b10:	str	r0, [sp, #556]	; 0x22c
    3b14:	mov	r0, r1
    3b18:	ldr	r1, [sp, #556]	; 0x22c
    3b1c:	blx	r1
    3b20:	str	r0, [sp, #552]	; 0x228
    3b24:	b	4cd8 <print_expression+0x3b5c>
    3b28:	ldr	r0, [fp, #-16]
    3b2c:	movw	r1, #0
    3b30:	movt	r1, #0
    3b34:	str	r0, [sp, #548]	; 0x224
    3b38:	mov	r0, r1
    3b3c:	ldr	r1, [sp, #548]	; 0x224
    3b40:	blx	r1
    3b44:	ldr	r1, [fp, #-12]
    3b48:	ldr	r1, [r1, #16]
    3b4c:	ldr	lr, [fp, #-16]
    3b50:	ldr	r2, [fp, #-20]	; 0xffffffec
    3b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3b58:	str	r0, [sp, #544]	; 0x220
    3b5c:	mov	r0, r1
    3b60:	mov	r1, lr
    3b64:	movw	lr, #1
    3b68:	str	lr, [sp]
    3b6c:	bl	117c <print_expression>
    3b70:	str	r0, [sp, #540]	; 0x21c
    3b74:	b	4cd8 <print_expression+0x3b5c>
    3b78:	ldr	r0, [fp, #-16]
    3b7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3b80:	cmp	r1, #0
    3b84:	movw	r1, #0
    3b88:	movne	r1, #1
    3b8c:	tst	r1, #1
    3b90:	movw	r1, #0
    3b94:	movt	r1, #0
    3b98:	movw	r2, #0
    3b9c:	movt	r2, #0
    3ba0:	movne	r1, r2
    3ba4:	str	r0, [sp, #536]	; 0x218
    3ba8:	mov	r0, r1
    3bac:	ldr	r1, [sp, #536]	; 0x218
    3bb0:	blx	r1
    3bb4:	ldr	r1, [fp, #-12]
    3bb8:	ldr	r1, [r1, #16]
    3bbc:	ldr	r2, [fp, #-16]
    3bc0:	ldr	lr, [fp, #-20]	; 0xffffffec
    3bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3bc8:	str	r0, [sp, #532]	; 0x214
    3bcc:	mov	r0, r1
    3bd0:	mov	r1, r2
    3bd4:	mov	r2, lr
    3bd8:	movw	lr, #15
    3bdc:	str	lr, [sp]
    3be0:	bl	117c <print_expression>
    3be4:	ldr	r1, [fp, #-16]
    3be8:	movw	r2, #0
    3bec:	movt	r2, #0
    3bf0:	str	r0, [sp, #528]	; 0x210
    3bf4:	mov	r0, r2
    3bf8:	blx	r1
    3bfc:	str	r0, [sp, #524]	; 0x20c
    3c00:	b	4cd8 <print_expression+0x3b5c>
    3c04:	ldr	r0, [fp, #-16]
    3c08:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3c0c:	cmp	r1, #0
    3c10:	movw	r1, #0
    3c14:	movne	r1, #1
    3c18:	tst	r1, #1
    3c1c:	movw	r1, #0
    3c20:	movt	r1, #0
    3c24:	movw	r2, #0
    3c28:	movt	r2, #0
    3c2c:	movne	r1, r2
    3c30:	str	r0, [sp, #520]	; 0x208
    3c34:	mov	r0, r1
    3c38:	ldr	r1, [sp, #520]	; 0x208
    3c3c:	blx	r1
    3c40:	ldr	r1, [fp, #-12]
    3c44:	ldr	r1, [r1, #16]
    3c48:	ldr	r2, [fp, #-16]
    3c4c:	ldr	lr, [fp, #-20]	; 0xffffffec
    3c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3c54:	str	r0, [sp, #516]	; 0x204
    3c58:	mov	r0, r1
    3c5c:	mov	r1, r2
    3c60:	mov	r2, lr
    3c64:	movw	lr, #15
    3c68:	str	lr, [sp]
    3c6c:	bl	117c <print_expression>
    3c70:	ldr	r1, [fp, #-16]
    3c74:	movw	r2, #0
    3c78:	movt	r2, #0
    3c7c:	str	r0, [sp, #512]	; 0x200
    3c80:	mov	r0, r2
    3c84:	blx	r1
    3c88:	str	r0, [sp, #508]	; 0x1fc
    3c8c:	b	4cd8 <print_expression+0x3b5c>
    3c90:	ldr	r0, [fp, #8]
    3c94:	cmp	r0, #7
    3c98:	bge	3cbc <print_expression+0x2b40>
    3c9c:	ldr	r0, [fp, #-16]
    3ca0:	movw	r1, #0
    3ca4:	movt	r1, #0
    3ca8:	str	r0, [sp, #504]	; 0x1f8
    3cac:	mov	r0, r1
    3cb0:	ldr	r1, [sp, #504]	; 0x1f8
    3cb4:	blx	r1
    3cb8:	str	r0, [sp, #500]	; 0x1f4
    3cbc:	ldr	r0, [fp, #-12]
    3cc0:	ldr	r0, [r0, #16]
    3cc4:	ldr	r1, [fp, #-16]
    3cc8:	ldr	r2, [fp, #-20]	; 0xffffffec
    3ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3cd0:	movw	ip, #7
    3cd4:	str	ip, [sp]
    3cd8:	bl	117c <print_expression>
    3cdc:	ldr	r1, [fp, #-16]
    3ce0:	movw	r2, #0
    3ce4:	movt	r2, #0
    3ce8:	str	r0, [sp, #496]	; 0x1f0
    3cec:	mov	r0, r2
    3cf0:	blx	r1
    3cf4:	ldr	r1, [fp, #-12]
    3cf8:	ldr	r1, [r1, #20]
    3cfc:	ldr	r2, [fp, #-16]
    3d00:	ldr	r3, [fp, #-20]	; 0xffffffec
    3d04:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3d08:	str	r0, [sp, #492]	; 0x1ec
    3d0c:	mov	r0, r1
    3d10:	mov	r1, r2
    3d14:	mov	r2, r3
    3d18:	mov	r3, ip
    3d1c:	movw	ip, #7
    3d20:	str	ip, [sp]
    3d24:	bl	117c <print_expression>
    3d28:	ldr	r1, [fp, #8]
    3d2c:	cmp	r1, #7
    3d30:	str	r0, [sp, #488]	; 0x1e8
    3d34:	bge	3d58 <print_expression+0x2bdc>
    3d38:	ldr	r0, [fp, #-16]
    3d3c:	movw	r1, #0
    3d40:	movt	r1, #0
    3d44:	str	r0, [sp, #484]	; 0x1e4
    3d48:	mov	r0, r1
    3d4c:	ldr	r1, [sp, #484]	; 0x1e4
    3d50:	blx	r1
    3d54:	str	r0, [sp, #480]	; 0x1e0
    3d58:	b	4cd8 <print_expression+0x3b5c>
    3d5c:	ldr	r0, [fp, #8]
    3d60:	cmp	r0, #2
    3d64:	bge	3d88 <print_expression+0x2c0c>
    3d68:	ldr	r0, [fp, #-16]
    3d6c:	movw	r1, #0
    3d70:	movt	r1, #0
    3d74:	str	r0, [sp, #476]	; 0x1dc
    3d78:	mov	r0, r1
    3d7c:	ldr	r1, [sp, #476]	; 0x1dc
    3d80:	blx	r1
    3d84:	str	r0, [sp, #472]	; 0x1d8
    3d88:	ldr	r0, [fp, #-12]
    3d8c:	ldr	r0, [r0, #16]
    3d90:	ldr	r1, [fp, #-16]
    3d94:	ldr	r2, [fp, #-20]	; 0xffffffec
    3d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3d9c:	movw	ip, #2
    3da0:	str	ip, [sp]
    3da4:	bl	117c <print_expression>
    3da8:	ldr	r1, [fp, #-16]
    3dac:	movw	r2, #0
    3db0:	movt	r2, #0
    3db4:	str	r0, [sp, #468]	; 0x1d4
    3db8:	mov	r0, r2
    3dbc:	blx	r1
    3dc0:	ldr	r1, [fp, #-12]
    3dc4:	ldr	r1, [r1, #20]
    3dc8:	ldr	r2, [fp, #-16]
    3dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
    3dd0:	ldr	ip, [fp, #-24]	; 0xffffffe8
    3dd4:	str	r0, [sp, #464]	; 0x1d0
    3dd8:	mov	r0, r1
    3ddc:	mov	r1, r2
    3de0:	mov	r2, r3
    3de4:	mov	r3, ip
    3de8:	movw	ip, #2
    3dec:	str	ip, [sp]
    3df0:	bl	117c <print_expression>
    3df4:	ldr	r1, [fp, #8]
    3df8:	cmp	r1, #2
    3dfc:	str	r0, [sp, #460]	; 0x1cc
    3e00:	bge	3e24 <print_expression+0x2ca8>
    3e04:	ldr	r0, [fp, #-16]
    3e08:	movw	r1, #0
    3e0c:	movt	r1, #0
    3e10:	str	r0, [sp, #456]	; 0x1c8
    3e14:	mov	r0, r1
    3e18:	ldr	r1, [sp, #456]	; 0x1c8
    3e1c:	blx	r1
    3e20:	str	r0, [sp, #452]	; 0x1c4
    3e24:	b	4cd8 <print_expression+0x3b5c>
    3e28:	ldr	r0, [fp, #-16]
    3e2c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3e30:	cmp	r1, #0
    3e34:	movw	r1, #0
    3e38:	movne	r1, #1
    3e3c:	tst	r1, #1
    3e40:	movw	r1, #0
    3e44:	movt	r1, #0
    3e48:	movw	r2, #0
    3e4c:	movt	r2, #0
    3e50:	movne	r1, r2
    3e54:	str	r0, [sp, #448]	; 0x1c0
    3e58:	mov	r0, r1
    3e5c:	ldr	r1, [sp, #448]	; 0x1c0
    3e60:	blx	r1
    3e64:	str	r0, [sp, #444]	; 0x1bc
    3e68:	b	4cd8 <print_expression+0x3b5c>
    3e6c:	ldr	r0, [fp, #-16]
    3e70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3e74:	cmp	r1, #0
    3e78:	movw	r1, #0
    3e7c:	movne	r1, #1
    3e80:	tst	r1, #1
    3e84:	movw	r1, #0
    3e88:	movt	r1, #0
    3e8c:	movw	r2, #0
    3e90:	movt	r2, #0
    3e94:	movne	r1, r2
    3e98:	str	r0, [sp, #440]	; 0x1b8
    3e9c:	mov	r0, r1
    3ea0:	ldr	r1, [sp, #440]	; 0x1b8
    3ea4:	blx	r1
    3ea8:	str	r0, [sp, #436]	; 0x1b4
    3eac:	b	4cd8 <print_expression+0x3b5c>
    3eb0:	ldr	r0, [fp, #-16]
    3eb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3eb8:	cmp	r1, #0
    3ebc:	movw	r1, #0
    3ec0:	movne	r1, #1
    3ec4:	tst	r1, #1
    3ec8:	movw	r1, #0
    3ecc:	movt	r1, #0
    3ed0:	movw	r2, #0
    3ed4:	movt	r2, #0
    3ed8:	movne	r1, r2
    3edc:	str	r0, [sp, #432]	; 0x1b0
    3ee0:	mov	r0, r1
    3ee4:	ldr	r1, [sp, #432]	; 0x1b0
    3ee8:	blx	r1
    3eec:	str	r0, [sp, #428]	; 0x1ac
    3ef0:	b	4cd8 <print_expression+0x3b5c>
    3ef4:	ldr	r0, [fp, #-16]
    3ef8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3efc:	cmp	r1, #0
    3f00:	movw	r1, #0
    3f04:	movne	r1, #1
    3f08:	tst	r1, #1
    3f0c:	movw	r1, #0
    3f10:	movt	r1, #0
    3f14:	movw	r2, #0
    3f18:	movt	r2, #0
    3f1c:	movne	r1, r2
    3f20:	str	r0, [sp, #424]	; 0x1a8
    3f24:	mov	r0, r1
    3f28:	ldr	r1, [sp, #424]	; 0x1a8
    3f2c:	blx	r1
    3f30:	str	r0, [sp, #420]	; 0x1a4
    3f34:	b	4cd8 <print_expression+0x3b5c>
    3f38:	ldr	r0, [fp, #-16]
    3f3c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    3f40:	cmp	r1, #0
    3f44:	movw	r1, #0
    3f48:	movne	r1, #1
    3f4c:	tst	r1, #1
    3f50:	movw	r1, #0
    3f54:	movt	r1, #0
    3f58:	movw	r2, #0
    3f5c:	movt	r2, #0
    3f60:	movne	r1, r2
    3f64:	str	r0, [sp, #416]	; 0x1a0
    3f68:	mov	r0, r1
    3f6c:	ldr	r1, [sp, #416]	; 0x1a0
    3f70:	blx	r1
    3f74:	ldr	r1, [fp, #-12]
    3f78:	ldr	r1, [r1, #16]
    3f7c:	ldr	r2, [fp, #-16]
    3f80:	ldr	lr, [fp, #-20]	; 0xffffffec
    3f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
    3f88:	str	r0, [sp, #412]	; 0x19c
    3f8c:	mov	r0, r1
    3f90:	mov	r1, r2
    3f94:	mov	r2, lr
    3f98:	movw	lr, #15
    3f9c:	str	lr, [sp]
    3fa0:	bl	117c <print_expression>
    3fa4:	ldr	r1, [fp, #-16]
    3fa8:	movw	r2, #0
    3fac:	movt	r2, #0
    3fb0:	str	r0, [sp, #408]	; 0x198
    3fb4:	mov	r0, r2
    3fb8:	blx	r1
    3fbc:	ldr	r1, [fp, #-12]
    3fc0:	ldr	r1, [r1, #20]
    3fc4:	ldr	r2, [fp, #-16]
    3fc8:	ldr	r3, [fp, #-20]	; 0xffffffec
    3fcc:	ldr	lr, [fp, #-24]	; 0xffffffe8
    3fd0:	str	r0, [sp, #404]	; 0x194
    3fd4:	mov	r0, r1
    3fd8:	mov	r1, r2
    3fdc:	mov	r2, r3
    3fe0:	mov	r3, lr
    3fe4:	movw	lr, #15
    3fe8:	str	lr, [sp]
    3fec:	bl	117c <print_expression>
    3ff0:	ldr	r1, [fp, #-12]
    3ff4:	ldr	r1, [r1, #24]
    3ff8:	movw	r2, #0
    3ffc:	cmp	r1, r2
    4000:	str	r0, [sp, #400]	; 0x190
    4004:	beq	4054 <print_expression+0x2ed8>
    4008:	ldr	r0, [fp, #-16]
    400c:	movw	r1, #0
    4010:	movt	r1, #0
    4014:	str	r0, [sp, #396]	; 0x18c
    4018:	mov	r0, r1
    401c:	ldr	r1, [sp, #396]	; 0x18c
    4020:	blx	r1
    4024:	ldr	r1, [fp, #-12]
    4028:	ldr	r1, [r1, #24]
    402c:	ldr	lr, [fp, #-16]
    4030:	ldr	r2, [fp, #-20]	; 0xffffffec
    4034:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4038:	str	r0, [sp, #392]	; 0x188
    403c:	mov	r0, r1
    4040:	mov	r1, lr
    4044:	movw	lr, #15
    4048:	str	lr, [sp]
    404c:	bl	117c <print_expression>
    4050:	str	r0, [sp, #388]	; 0x184
    4054:	ldr	r0, [fp, #-16]
    4058:	movw	r1, #0
    405c:	movt	r1, #0
    4060:	str	r0, [sp, #384]	; 0x180
    4064:	mov	r0, r1
    4068:	ldr	r1, [sp, #384]	; 0x180
    406c:	blx	r1
    4070:	str	r0, [sp, #380]	; 0x17c
    4074:	b	4cd8 <print_expression+0x3b5c>
    4078:	ldr	r0, [fp, #-16]
    407c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4080:	cmp	r1, #0
    4084:	movw	r1, #0
    4088:	movne	r1, #1
    408c:	tst	r1, #1
    4090:	movw	r1, #0
    4094:	movt	r1, #0
    4098:	movw	r2, #0
    409c:	movt	r2, #0
    40a0:	movne	r1, r2
    40a4:	str	r0, [sp, #376]	; 0x178
    40a8:	mov	r0, r1
    40ac:	ldr	r1, [sp, #376]	; 0x178
    40b0:	blx	r1
    40b4:	ldr	r1, [fp, #-12]
    40b8:	ldr	r1, [r1, #16]
    40bc:	ldr	r2, [fp, #-16]
    40c0:	ldr	lr, [fp, #-20]	; 0xffffffec
    40c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    40c8:	str	r0, [sp, #372]	; 0x174
    40cc:	mov	r0, r1
    40d0:	mov	r1, r2
    40d4:	mov	r2, lr
    40d8:	movw	lr, #15
    40dc:	str	lr, [sp]
    40e0:	bl	117c <print_expression>
    40e4:	ldr	r1, [fp, #-16]
    40e8:	movw	r2, #0
    40ec:	movt	r2, #0
    40f0:	str	r0, [sp, #368]	; 0x170
    40f4:	mov	r0, r2
    40f8:	blx	r1
    40fc:	str	r0, [sp, #364]	; 0x16c
    4100:	b	4cd8 <print_expression+0x3b5c>
    4104:	ldr	r0, [fp, #-16]
    4108:	ldr	r1, [fp, #-24]	; 0xffffffe8
    410c:	cmp	r1, #0
    4110:	movw	r1, #0
    4114:	movne	r1, #1
    4118:	tst	r1, #1
    411c:	movw	r1, #0
    4120:	movt	r1, #0
    4124:	movw	r2, #0
    4128:	movt	r2, #0
    412c:	movne	r1, r2
    4130:	str	r0, [sp, #360]	; 0x168
    4134:	mov	r0, r1
    4138:	ldr	r1, [sp, #360]	; 0x168
    413c:	blx	r1
    4140:	ldr	r1, [fp, #-12]
    4144:	ldr	r1, [r1, #16]
    4148:	ldr	r2, [fp, #-16]
    414c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4150:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4154:	str	r0, [sp, #356]	; 0x164
    4158:	mov	r0, r1
    415c:	mov	r1, r2
    4160:	mov	r2, lr
    4164:	movw	lr, #15
    4168:	str	lr, [sp]
    416c:	bl	117c <print_expression>
    4170:	ldr	r1, [fp, #-16]
    4174:	movw	r2, #0
    4178:	movt	r2, #0
    417c:	str	r0, [sp, #352]	; 0x160
    4180:	mov	r0, r2
    4184:	blx	r1
    4188:	str	r0, [sp, #348]	; 0x15c
    418c:	b	4cd8 <print_expression+0x3b5c>
    4190:	ldr	r0, [fp, #-12]
    4194:	ldr	r0, [r0, #16]
    4198:	ldr	r1, [fp, #-16]
    419c:	ldr	r2, [fp, #-20]	; 0xffffffec
    41a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    41a4:	movw	ip, #15
    41a8:	str	ip, [sp]
    41ac:	bl	117c <print_expression>
    41b0:	ldr	r1, [fp, #-16]
    41b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    41b8:	cmp	r2, #0
    41bc:	movw	r2, #0
    41c0:	movne	r2, #1
    41c4:	tst	r2, #1
    41c8:	movw	r2, #0
    41cc:	movt	r2, #0
    41d0:	movw	r3, #0
    41d4:	movt	r3, #0
    41d8:	movne	r2, r3
    41dc:	str	r0, [sp, #344]	; 0x158
    41e0:	mov	r0, r2
    41e4:	blx	r1
    41e8:	ldr	r1, [fp, #-12]
    41ec:	ldr	r1, [r1, #20]
    41f0:	ldr	r2, [fp, #-16]
    41f4:	ldr	r3, [fp, #-20]	; 0xffffffec
    41f8:	ldr	ip, [fp, #-24]	; 0xffffffe8
    41fc:	str	r0, [sp, #340]	; 0x154
    4200:	mov	r0, r1
    4204:	mov	r1, r2
    4208:	mov	r2, r3
    420c:	mov	r3, ip
    4210:	movw	ip, #15
    4214:	str	ip, [sp]
    4218:	bl	117c <print_expression>
    421c:	str	r0, [sp, #336]	; 0x150
    4220:	b	4cd8 <print_expression+0x3b5c>
    4224:	ldr	r0, [fp, #-16]
    4228:	ldr	r1, [fp, #-24]	; 0xffffffe8
    422c:	cmp	r1, #0
    4230:	movw	r1, #0
    4234:	movne	r1, #1
    4238:	tst	r1, #1
    423c:	movw	r1, #0
    4240:	movt	r1, #0
    4244:	movw	r2, #0
    4248:	movt	r2, #0
    424c:	movne	r1, r2
    4250:	str	r0, [sp, #332]	; 0x14c
    4254:	mov	r0, r1
    4258:	ldr	r1, [sp, #332]	; 0x14c
    425c:	blx	r1
    4260:	ldr	r1, [fp, #-12]
    4264:	ldr	r1, [r1, #16]
    4268:	ldr	r2, [fp, #-16]
    426c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4270:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4274:	str	r0, [sp, #328]	; 0x148
    4278:	mov	r0, r1
    427c:	mov	r1, r2
    4280:	mov	r2, lr
    4284:	movw	lr, #15
    4288:	str	lr, [sp]
    428c:	bl	117c <print_expression>
    4290:	ldr	r1, [fp, #-12]
    4294:	ldr	r1, [r1, #20]
    4298:	movw	r2, #0
    429c:	cmp	r1, r2
    42a0:	str	r0, [sp, #324]	; 0x144
    42a4:	beq	42f4 <print_expression+0x3178>
    42a8:	ldr	r0, [fp, #-16]
    42ac:	movw	r1, #0
    42b0:	movt	r1, #0
    42b4:	str	r0, [sp, #320]	; 0x140
    42b8:	mov	r0, r1
    42bc:	ldr	r1, [sp, #320]	; 0x140
    42c0:	blx	r1
    42c4:	ldr	r1, [fp, #-12]
    42c8:	ldr	r1, [r1, #20]
    42cc:	ldr	lr, [fp, #-16]
    42d0:	ldr	r2, [fp, #-20]	; 0xffffffec
    42d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    42d8:	str	r0, [sp, #316]	; 0x13c
    42dc:	mov	r0, r1
    42e0:	mov	r1, lr
    42e4:	movw	lr, #15
    42e8:	str	lr, [sp]
    42ec:	bl	117c <print_expression>
    42f0:	str	r0, [sp, #312]	; 0x138
    42f4:	ldr	r0, [fp, #-16]
    42f8:	movw	r1, #0
    42fc:	movt	r1, #0
    4300:	str	r0, [sp, #308]	; 0x134
    4304:	mov	r0, r1
    4308:	ldr	r1, [sp, #308]	; 0x134
    430c:	blx	r1
    4310:	str	r0, [sp, #304]	; 0x130
    4314:	b	4cd8 <print_expression+0x3b5c>
    4318:	ldr	r0, [fp, #-16]
    431c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4320:	cmp	r1, #0
    4324:	movw	r1, #0
    4328:	movne	r1, #1
    432c:	tst	r1, #1
    4330:	movw	r1, #0
    4334:	movt	r1, #0
    4338:	movw	r2, #0
    433c:	movt	r2, #0
    4340:	movne	r1, r2
    4344:	str	r0, [sp, #300]	; 0x12c
    4348:	mov	r0, r1
    434c:	ldr	r1, [sp, #300]	; 0x12c
    4350:	blx	r1
    4354:	ldr	r1, [fp, #-12]
    4358:	ldr	r1, [r1, #16]
    435c:	ldr	r2, [fp, #-16]
    4360:	ldr	lr, [fp, #-20]	; 0xffffffec
    4364:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4368:	str	r0, [sp, #296]	; 0x128
    436c:	mov	r0, r1
    4370:	mov	r1, r2
    4374:	mov	r2, lr
    4378:	movw	lr, #15
    437c:	str	lr, [sp]
    4380:	bl	117c <print_expression>
    4384:	ldr	r1, [fp, #-12]
    4388:	ldr	r1, [r1, #20]
    438c:	movw	r2, #0
    4390:	cmp	r1, r2
    4394:	str	r0, [sp, #292]	; 0x124
    4398:	beq	43e8 <print_expression+0x326c>
    439c:	ldr	r0, [fp, #-16]
    43a0:	movw	r1, #0
    43a4:	movt	r1, #0
    43a8:	str	r0, [sp, #288]	; 0x120
    43ac:	mov	r0, r1
    43b0:	ldr	r1, [sp, #288]	; 0x120
    43b4:	blx	r1
    43b8:	ldr	r1, [fp, #-12]
    43bc:	ldr	r1, [r1, #20]
    43c0:	ldr	lr, [fp, #-16]
    43c4:	ldr	r2, [fp, #-20]	; 0xffffffec
    43c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    43cc:	str	r0, [sp, #284]	; 0x11c
    43d0:	mov	r0, r1
    43d4:	mov	r1, lr
    43d8:	movw	lr, #15
    43dc:	str	lr, [sp]
    43e0:	bl	117c <print_expression>
    43e4:	str	r0, [sp, #280]	; 0x118
    43e8:	ldr	r0, [fp, #-16]
    43ec:	movw	r1, #0
    43f0:	movt	r1, #0
    43f4:	str	r0, [sp, #276]	; 0x114
    43f8:	mov	r0, r1
    43fc:	ldr	r1, [sp, #276]	; 0x114
    4400:	blx	r1
    4404:	str	r0, [sp, #272]	; 0x110
    4408:	b	4cd8 <print_expression+0x3b5c>
    440c:	ldr	r0, [fp, #-16]
    4410:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4414:	cmp	r1, #0
    4418:	movw	r1, #0
    441c:	movne	r1, #1
    4420:	tst	r1, #1
    4424:	movw	r1, #0
    4428:	movt	r1, #0
    442c:	movw	r2, #0
    4430:	movt	r2, #0
    4434:	movne	r1, r2
    4438:	str	r0, [sp, #268]	; 0x10c
    443c:	mov	r0, r1
    4440:	ldr	r1, [sp, #268]	; 0x10c
    4444:	blx	r1
    4448:	ldr	r1, [fp, #-12]
    444c:	ldr	r1, [r1, #16]
    4450:	ldr	r2, [fp, #-16]
    4454:	ldr	lr, [fp, #-20]	; 0xffffffec
    4458:	ldr	r3, [fp, #-24]	; 0xffffffe8
    445c:	str	r0, [sp, #264]	; 0x108
    4460:	mov	r0, r1
    4464:	mov	r1, r2
    4468:	mov	r2, lr
    446c:	movw	lr, #15
    4470:	str	lr, [sp]
    4474:	bl	117c <print_expression>
    4478:	ldr	r1, [fp, #-16]
    447c:	movw	r2, #0
    4480:	movt	r2, #0
    4484:	str	r0, [sp, #260]	; 0x104
    4488:	mov	r0, r2
    448c:	blx	r1
    4490:	ldr	r1, [fp, #-12]
    4494:	ldr	r1, [r1, #20]
    4498:	ldr	r2, [fp, #-16]
    449c:	ldr	r3, [fp, #-20]	; 0xffffffec
    44a0:	ldr	lr, [fp, #-24]	; 0xffffffe8
    44a4:	str	r0, [sp, #256]	; 0x100
    44a8:	mov	r0, r1
    44ac:	mov	r1, r2
    44b0:	mov	r2, r3
    44b4:	mov	r3, lr
    44b8:	movw	lr, #15
    44bc:	str	lr, [sp]
    44c0:	bl	117c <print_expression>
    44c4:	ldr	r1, [fp, #-16]
    44c8:	movw	r2, #0
    44cc:	movt	r2, #0
    44d0:	str	r0, [sp, #252]	; 0xfc
    44d4:	mov	r0, r2
    44d8:	blx	r1
    44dc:	ldr	r1, [fp, #-12]
    44e0:	ldr	r1, [r1, #24]
    44e4:	ldr	r2, [fp, #-16]
    44e8:	ldr	r3, [fp, #-20]	; 0xffffffec
    44ec:	ldr	lr, [fp, #-24]	; 0xffffffe8
    44f0:	str	r0, [sp, #248]	; 0xf8
    44f4:	mov	r0, r1
    44f8:	mov	r1, r2
    44fc:	mov	r2, r3
    4500:	mov	r3, lr
    4504:	movw	lr, #15
    4508:	str	lr, [sp]
    450c:	bl	117c <print_expression>
    4510:	ldr	r1, [fp, #-16]
    4514:	movw	r2, #0
    4518:	movt	r2, #0
    451c:	str	r0, [sp, #244]	; 0xf4
    4520:	mov	r0, r2
    4524:	blx	r1
    4528:	str	r0, [sp, #240]	; 0xf0
    452c:	b	4cd8 <print_expression+0x3b5c>
    4530:	ldr	r0, [fp, #8]
    4534:	cmp	r0, #4
    4538:	bge	455c <print_expression+0x33e0>
    453c:	ldr	r0, [fp, #-16]
    4540:	movw	r1, #0
    4544:	movt	r1, #0
    4548:	str	r0, [sp, #236]	; 0xec
    454c:	mov	r0, r1
    4550:	ldr	r1, [sp, #236]	; 0xec
    4554:	blx	r1
    4558:	str	r0, [sp, #232]	; 0xe8
    455c:	ldr	r0, [fp, #-12]
    4560:	ldr	r0, [r0, #16]
    4564:	ldr	r1, [fp, #-16]
    4568:	ldr	r2, [fp, #-20]	; 0xffffffec
    456c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4570:	movw	ip, #4
    4574:	str	ip, [sp]
    4578:	bl	117c <print_expression>
    457c:	ldr	r1, [fp, #-16]
    4580:	movw	r2, #0
    4584:	movt	r2, #0
    4588:	str	r0, [sp, #228]	; 0xe4
    458c:	mov	r0, r2
    4590:	blx	r1
    4594:	ldr	r1, [fp, #-12]
    4598:	ldr	r1, [r1, #20]
    459c:	ldr	r2, [fp, #-16]
    45a0:	ldr	r3, [fp, #-20]	; 0xffffffec
    45a4:	ldr	ip, [fp, #-24]	; 0xffffffe8
    45a8:	str	r0, [sp, #224]	; 0xe0
    45ac:	mov	r0, r1
    45b0:	mov	r1, r2
    45b4:	mov	r2, r3
    45b8:	mov	r3, ip
    45bc:	movw	ip, #4
    45c0:	str	ip, [sp]
    45c4:	bl	117c <print_expression>
    45c8:	ldr	r1, [fp, #8]
    45cc:	cmp	r1, #4
    45d0:	str	r0, [sp, #220]	; 0xdc
    45d4:	bge	45f8 <print_expression+0x347c>
    45d8:	ldr	r0, [fp, #-16]
    45dc:	movw	r1, #0
    45e0:	movt	r1, #0
    45e4:	str	r0, [sp, #216]	; 0xd8
    45e8:	mov	r0, r1
    45ec:	ldr	r1, [sp, #216]	; 0xd8
    45f0:	blx	r1
    45f4:	str	r0, [sp, #212]	; 0xd4
    45f8:	b	4cd8 <print_expression+0x3b5c>
    45fc:	ldr	r0, [fp, #-16]
    4600:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4604:	cmp	r1, #0
    4608:	movw	r1, #0
    460c:	movne	r1, #1
    4610:	tst	r1, #1
    4614:	movw	r1, #0
    4618:	movt	r1, #0
    461c:	movw	r2, #0
    4620:	movt	r2, #0
    4624:	movne	r1, r2
    4628:	str	r0, [sp, #208]	; 0xd0
    462c:	mov	r0, r1
    4630:	ldr	r1, [sp, #208]	; 0xd0
    4634:	blx	r1
    4638:	ldr	r1, [fp, #-12]
    463c:	ldr	r1, [r1, #16]
    4640:	ldr	r2, [fp, #-16]
    4644:	ldr	lr, [fp, #-20]	; 0xffffffec
    4648:	ldr	r3, [fp, #-24]	; 0xffffffe8
    464c:	str	r0, [sp, #204]	; 0xcc
    4650:	mov	r0, r1
    4654:	mov	r1, r2
    4658:	mov	r2, lr
    465c:	movw	lr, #15
    4660:	str	lr, [sp]
    4664:	bl	117c <print_expression>
    4668:	ldr	r1, [fp, #-16]
    466c:	movw	r2, #0
    4670:	movt	r2, #0
    4674:	str	r0, [sp, #200]	; 0xc8
    4678:	mov	r0, r2
    467c:	blx	r1
    4680:	ldr	r1, [fp, #-12]
    4684:	ldr	r1, [r1, #20]
    4688:	ldr	r2, [fp, #-16]
    468c:	ldr	r3, [fp, #-20]	; 0xffffffec
    4690:	ldr	lr, [fp, #-24]	; 0xffffffe8
    4694:	str	r0, [sp, #196]	; 0xc4
    4698:	mov	r0, r1
    469c:	mov	r1, r2
    46a0:	mov	r2, r3
    46a4:	mov	r3, lr
    46a8:	movw	lr, #15
    46ac:	str	lr, [sp]
    46b0:	bl	117c <print_expression>
    46b4:	ldr	r1, [fp, #-16]
    46b8:	movw	r2, #0
    46bc:	movt	r2, #0
    46c0:	str	r0, [sp, #192]	; 0xc0
    46c4:	mov	r0, r2
    46c8:	blx	r1
    46cc:	str	r0, [sp, #188]	; 0xbc
    46d0:	b	4cd8 <print_expression+0x3b5c>
    46d4:	ldr	r0, [fp, #-16]
    46d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    46dc:	cmp	r1, #0
    46e0:	movw	r1, #0
    46e4:	movne	r1, #1
    46e8:	tst	r1, #1
    46ec:	movw	r1, #0
    46f0:	movt	r1, #0
    46f4:	movw	r2, #0
    46f8:	movt	r2, #0
    46fc:	movne	r1, r2
    4700:	str	r0, [sp, #184]	; 0xb8
    4704:	mov	r0, r1
    4708:	ldr	r1, [sp, #184]	; 0xb8
    470c:	blx	r1
    4710:	ldr	r1, [fp, #-12]
    4714:	ldr	r1, [r1, #16]
    4718:	ldr	r2, [fp, #-16]
    471c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4720:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4724:	str	r0, [sp, #180]	; 0xb4
    4728:	mov	r0, r1
    472c:	mov	r1, r2
    4730:	mov	r2, lr
    4734:	movw	lr, #15
    4738:	str	lr, [sp]
    473c:	bl	117c <print_expression>
    4740:	ldr	r1, [fp, #-16]
    4744:	movw	r2, #0
    4748:	movt	r2, #0
    474c:	str	r0, [sp, #176]	; 0xb0
    4750:	mov	r0, r2
    4754:	blx	r1
    4758:	str	r0, [sp, #172]	; 0xac
    475c:	b	4cd8 <print_expression+0x3b5c>
    4760:	ldr	r0, [fp, #-16]
    4764:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4768:	cmp	r1, #0
    476c:	movw	r1, #0
    4770:	movne	r1, #1
    4774:	tst	r1, #1
    4778:	movw	r1, #0
    477c:	movt	r1, #0
    4780:	movw	r2, #0
    4784:	movt	r2, #0
    4788:	movne	r1, r2
    478c:	str	r0, [sp, #168]	; 0xa8
    4790:	mov	r0, r1
    4794:	ldr	r1, [sp, #168]	; 0xa8
    4798:	blx	r1
    479c:	ldr	r1, [fp, #-12]
    47a0:	ldr	r1, [r1, #16]
    47a4:	ldr	r2, [fp, #-16]
    47a8:	ldr	lr, [fp, #-20]	; 0xffffffec
    47ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    47b0:	str	r0, [sp, #164]	; 0xa4
    47b4:	mov	r0, r1
    47b8:	mov	r1, r2
    47bc:	mov	r2, lr
    47c0:	movw	lr, #15
    47c4:	str	lr, [sp]
    47c8:	bl	117c <print_expression>
    47cc:	ldr	r1, [fp, #-16]
    47d0:	movw	r2, #0
    47d4:	movt	r2, #0
    47d8:	str	r0, [sp, #160]	; 0xa0
    47dc:	mov	r0, r2
    47e0:	blx	r1
    47e4:	ldr	r1, [fp, #-12]
    47e8:	ldr	r1, [r1, #20]
    47ec:	ldr	r2, [fp, #-16]
    47f0:	ldr	r3, [fp, #-20]	; 0xffffffec
    47f4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    47f8:	str	r0, [sp, #156]	; 0x9c
    47fc:	mov	r0, r1
    4800:	mov	r1, r2
    4804:	mov	r2, r3
    4808:	mov	r3, lr
    480c:	movw	lr, #15
    4810:	str	lr, [sp]
    4814:	bl	117c <print_expression>
    4818:	ldr	r1, [fp, #-16]
    481c:	movw	r2, #0
    4820:	movt	r2, #0
    4824:	str	r0, [sp, #152]	; 0x98
    4828:	mov	r0, r2
    482c:	blx	r1
    4830:	str	r0, [sp, #148]	; 0x94
    4834:	b	4cd8 <print_expression+0x3b5c>
    4838:	ldr	r0, [fp, #-16]
    483c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4840:	cmp	r1, #0
    4844:	movw	r1, #0
    4848:	movne	r1, #1
    484c:	tst	r1, #1
    4850:	movw	r1, #0
    4854:	movt	r1, #0
    4858:	movw	r2, #0
    485c:	movt	r2, #0
    4860:	movne	r1, r2
    4864:	ldr	r2, [fp, #-12]
    4868:	ldr	r2, [r2, #12]
    486c:	str	r0, [sp, #144]	; 0x90
    4870:	mov	r0, r1
    4874:	mov	r1, r2
    4878:	ldr	r2, [sp, #144]	; 0x90
    487c:	blx	r2
    4880:	ldr	r1, [fp, #-12]
    4884:	ldr	r1, [r1, #16]
    4888:	ldr	r2, [fp, #-16]
    488c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4890:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4894:	str	r0, [sp, #140]	; 0x8c
    4898:	mov	r0, r1
    489c:	mov	r1, r2
    48a0:	mov	r2, lr
    48a4:	movw	lr, #15
    48a8:	str	lr, [sp]
    48ac:	bl	117c <print_expression>
    48b0:	ldr	r1, [fp, #-16]
    48b4:	movw	r2, #0
    48b8:	movt	r2, #0
    48bc:	str	r0, [sp, #136]	; 0x88
    48c0:	mov	r0, r2
    48c4:	blx	r1
    48c8:	str	r0, [sp, #132]	; 0x84
    48cc:	b	4cd8 <print_expression+0x3b5c>
    48d0:	ldr	r0, [fp, #-16]
    48d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    48d8:	cmp	r1, #0
    48dc:	movw	r1, #0
    48e0:	movne	r1, #1
    48e4:	tst	r1, #1
    48e8:	movw	r1, #0
    48ec:	movt	r1, #0
    48f0:	movw	r2, #0
    48f4:	movt	r2, #0
    48f8:	movne	r1, r2
    48fc:	ldr	r2, [fp, #-12]
    4900:	ldr	r2, [r2, #12]
    4904:	str	r0, [sp, #128]	; 0x80
    4908:	mov	r0, r1
    490c:	mov	r1, r2
    4910:	ldr	r2, [sp, #128]	; 0x80
    4914:	blx	r2
    4918:	ldr	r1, [fp, #-12]
    491c:	ldr	r1, [r1, #16]
    4920:	ldr	r2, [fp, #-16]
    4924:	ldr	lr, [fp, #-20]	; 0xffffffec
    4928:	ldr	r3, [fp, #-24]	; 0xffffffe8
    492c:	str	r0, [sp, #124]	; 0x7c
    4930:	mov	r0, r1
    4934:	mov	r1, r2
    4938:	mov	r2, lr
    493c:	movw	lr, #15
    4940:	str	lr, [sp]
    4944:	bl	117c <print_expression>
    4948:	ldr	r1, [fp, #-16]
    494c:	movw	r2, #0
    4950:	movt	r2, #0
    4954:	str	r0, [sp, #120]	; 0x78
    4958:	mov	r0, r2
    495c:	blx	r1
    4960:	str	r0, [sp, #116]	; 0x74
    4964:	b	4cd8 <print_expression+0x3b5c>
    4968:	ldr	r0, [fp, #-16]
    496c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4970:	cmp	r1, #0
    4974:	movw	r1, #0
    4978:	movne	r1, #1
    497c:	tst	r1, #1
    4980:	movw	r1, #0
    4984:	movt	r1, #0
    4988:	movw	r2, #0
    498c:	movt	r2, #0
    4990:	movne	r1, r2
    4994:	ldr	r2, [fp, #-12]
    4998:	ldr	r2, [r2, #12]
    499c:	str	r0, [sp, #112]	; 0x70
    49a0:	mov	r0, r1
    49a4:	mov	r1, r2
    49a8:	ldr	r2, [sp, #112]	; 0x70
    49ac:	blx	r2
    49b0:	ldr	r1, [fp, #-12]
    49b4:	ldr	r1, [r1, #16]
    49b8:	movw	r2, #0
    49bc:	cmp	r1, r2
    49c0:	str	r0, [sp, #108]	; 0x6c
    49c4:	beq	4a2c <print_expression+0x38b0>
    49c8:	ldr	r0, [fp, #-16]
    49cc:	movw	r1, #0
    49d0:	movt	r1, #0
    49d4:	str	r0, [sp, #104]	; 0x68
    49d8:	mov	r0, r1
    49dc:	ldr	r1, [sp, #104]	; 0x68
    49e0:	blx	r1
    49e4:	ldr	r1, [fp, #-12]
    49e8:	ldr	r1, [r1, #16]
    49ec:	ldr	lr, [fp, #-16]
    49f0:	ldr	r2, [fp, #-20]	; 0xffffffec
    49f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    49f8:	str	r0, [sp, #100]	; 0x64
    49fc:	mov	r0, r1
    4a00:	mov	r1, lr
    4a04:	movw	lr, #15
    4a08:	str	lr, [sp]
    4a0c:	bl	117c <print_expression>
    4a10:	ldr	r1, [fp, #-16]
    4a14:	movw	r2, #0
    4a18:	movt	r2, #0
    4a1c:	str	r0, [sp, #96]	; 0x60
    4a20:	mov	r0, r2
    4a24:	blx	r1
    4a28:	str	r0, [sp, #92]	; 0x5c
    4a2c:	ldr	r0, [fp, #-16]
    4a30:	movw	r1, #0
    4a34:	movt	r1, #0
    4a38:	str	r0, [sp, #88]	; 0x58
    4a3c:	mov	r0, r1
    4a40:	ldr	r1, [sp, #88]	; 0x58
    4a44:	blx	r1
    4a48:	ldr	r1, [fp, #-12]
    4a4c:	ldr	r1, [r1, #20]
    4a50:	ldr	lr, [fp, #-16]
    4a54:	ldr	r2, [fp, #-20]	; 0xffffffec
    4a58:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4a5c:	str	r0, [sp, #84]	; 0x54
    4a60:	mov	r0, r1
    4a64:	mov	r1, lr
    4a68:	movw	lr, #15
    4a6c:	str	lr, [sp]
    4a70:	bl	117c <print_expression>
    4a74:	str	r0, [sp, #80]	; 0x50
    4a78:	b	4cd8 <print_expression+0x3b5c>
    4a7c:	ldr	r0, [fp, #-16]
    4a80:	ldr	r1, [fp, #-12]
    4a84:	ldr	r1, [r1, #12]
    4a88:	movw	r2, #0
    4a8c:	movt	r2, #0
    4a90:	str	r0, [sp, #76]	; 0x4c
    4a94:	mov	r0, r2
    4a98:	ldr	r2, [sp, #76]	; 0x4c
    4a9c:	blx	r2
    4aa0:	ldr	r1, [fp, #-12]
    4aa4:	ldr	r1, [r1, #16]
    4aa8:	movw	r2, #0
    4aac:	cmp	r1, r2
    4ab0:	str	r0, [sp, #72]	; 0x48
    4ab4:	beq	4b1c <print_expression+0x39a0>
    4ab8:	ldr	r0, [fp, #-16]
    4abc:	movw	r1, #0
    4ac0:	movt	r1, #0
    4ac4:	str	r0, [sp, #68]	; 0x44
    4ac8:	mov	r0, r1
    4acc:	ldr	r1, [sp, #68]	; 0x44
    4ad0:	blx	r1
    4ad4:	ldr	r1, [fp, #-12]
    4ad8:	ldr	r1, [r1, #16]
    4adc:	ldr	lr, [fp, #-16]
    4ae0:	ldr	r2, [fp, #-20]	; 0xffffffec
    4ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4ae8:	str	r0, [sp, #64]	; 0x40
    4aec:	mov	r0, r1
    4af0:	mov	r1, lr
    4af4:	movw	lr, #15
    4af8:	str	lr, [sp]
    4afc:	bl	117c <print_expression>
    4b00:	ldr	r1, [fp, #-16]
    4b04:	movw	r2, #0
    4b08:	movt	r2, #0
    4b0c:	str	r0, [sp, #60]	; 0x3c
    4b10:	mov	r0, r2
    4b14:	blx	r1
    4b18:	str	r0, [sp, #56]	; 0x38
    4b1c:	b	4cd8 <print_expression+0x3b5c>
    4b20:	ldr	r0, [fp, #-16]
    4b24:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4b28:	cmp	r1, #0
    4b2c:	movw	r1, #0
    4b30:	movne	r1, #1
    4b34:	tst	r1, #1
    4b38:	movw	r1, #0
    4b3c:	movt	r1, #0
    4b40:	movw	r2, #0
    4b44:	movt	r2, #0
    4b48:	movne	r1, r2
    4b4c:	str	r0, [sp, #52]	; 0x34
    4b50:	mov	r0, r1
    4b54:	ldr	r1, [sp, #52]	; 0x34
    4b58:	blx	r1
    4b5c:	ldr	r1, [fp, #-12]
    4b60:	ldr	r1, [r1, #16]
    4b64:	ldr	r2, [fp, #-16]
    4b68:	ldr	lr, [fp, #-20]	; 0xffffffec
    4b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4b70:	str	r0, [sp, #48]	; 0x30
    4b74:	mov	r0, r1
    4b78:	mov	r1, r2
    4b7c:	mov	r2, lr
    4b80:	movw	lr, #15
    4b84:	str	lr, [sp]
    4b88:	bl	117c <print_expression>
    4b8c:	ldr	r1, [fp, #-16]
    4b90:	movw	r2, #0
    4b94:	movt	r2, #0
    4b98:	str	r0, [sp, #44]	; 0x2c
    4b9c:	mov	r0, r2
    4ba0:	blx	r1
    4ba4:	ldr	r1, [fp, #-12]
    4ba8:	ldr	r1, [r1, #20]
    4bac:	ldr	r2, [fp, #-16]
    4bb0:	ldr	r3, [fp, #-20]	; 0xffffffec
    4bb4:	ldr	lr, [fp, #-24]	; 0xffffffe8
    4bb8:	str	r0, [sp, #40]	; 0x28
    4bbc:	mov	r0, r1
    4bc0:	mov	r1, r2
    4bc4:	mov	r2, r3
    4bc8:	mov	r3, lr
    4bcc:	movw	lr, #15
    4bd0:	str	lr, [sp]
    4bd4:	bl	117c <print_expression>
    4bd8:	ldr	r1, [fp, #-16]
    4bdc:	movw	r2, #0
    4be0:	movt	r2, #0
    4be4:	str	r0, [sp, #36]	; 0x24
    4be8:	mov	r0, r2
    4bec:	blx	r1
    4bf0:	str	r0, [sp, #32]
    4bf4:	b	4cd8 <print_expression+0x3b5c>
    4bf8:	ldr	r0, [fp, #-16]
    4bfc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    4c00:	cmp	r1, #0
    4c04:	movw	r1, #0
    4c08:	movne	r1, #1
    4c0c:	tst	r1, #1
    4c10:	movw	r1, #0
    4c14:	movt	r1, #0
    4c18:	movw	r2, #0
    4c1c:	movt	r2, #0
    4c20:	movne	r1, r2
    4c24:	ldr	r2, [fp, #-12]
    4c28:	ldr	r2, [r2, #12]
    4c2c:	str	r0, [sp, #28]
    4c30:	mov	r0, r1
    4c34:	mov	r1, r2
    4c38:	ldr	r2, [sp, #28]
    4c3c:	blx	r2
    4c40:	ldr	r1, [fp, #-12]
    4c44:	ldr	r1, [r1, #16]
    4c48:	ldr	r2, [fp, #-16]
    4c4c:	ldr	lr, [fp, #-20]	; 0xffffffec
    4c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
    4c54:	str	r0, [sp, #24]
    4c58:	mov	r0, r1
    4c5c:	mov	r1, r2
    4c60:	mov	r2, lr
    4c64:	movw	lr, #15
    4c68:	str	lr, [sp]
    4c6c:	bl	117c <print_expression>
    4c70:	ldr	r1, [fp, #-16]
    4c74:	movw	r2, #0
    4c78:	movt	r2, #0
    4c7c:	str	r0, [sp, #20]
    4c80:	mov	r0, r2
    4c84:	blx	r1
    4c88:	ldr	r1, [fp, #-12]
    4c8c:	ldr	r1, [r1, #20]
    4c90:	ldr	r2, [fp, #-16]
    4c94:	ldr	r3, [fp, #-20]	; 0xffffffec
    4c98:	ldr	lr, [fp, #-24]	; 0xffffffe8
    4c9c:	str	r0, [sp, #16]
    4ca0:	mov	r0, r1
    4ca4:	mov	r1, r2
    4ca8:	mov	r2, r3
    4cac:	mov	r3, lr
    4cb0:	movw	lr, #15
    4cb4:	str	lr, [sp]
    4cb8:	bl	117c <print_expression>
    4cbc:	ldr	r1, [fp, #-16]
    4cc0:	movw	r2, #0
    4cc4:	movt	r2, #0
    4cc8:	str	r0, [sp, #12]
    4ccc:	mov	r0, r2
    4cd0:	blx	r1
    4cd4:	str	r0, [sp, #8]
    4cd8:	movw	r0, #0
    4cdc:	sub	sp, fp, #8
    4ce0:	pop	{r4, r5, fp, pc}

00004ce4 <coda_expression_print_xml>:
    4ce4:	push	{fp, lr}
    4ce8:	mov	fp, sp
    4cec:	sub	sp, sp, #16
    4cf0:	str	r0, [fp, #-4]
    4cf4:	str	r1, [sp, #8]
    4cf8:	ldr	r0, [fp, #-4]
    4cfc:	ldr	r1, [sp, #8]
    4d00:	movw	r2, #1
    4d04:	movw	r3, #0
    4d08:	movw	ip, #15
    4d0c:	str	ip, [sp]
    4d10:	bl	117c <print_expression>
    4d14:	mov	sp, fp
    4d18:	pop	{fp, pc}

00004d1c <coda_expression_print>:
    4d1c:	push	{fp, lr}
    4d20:	mov	fp, sp
    4d24:	sub	sp, sp, #16
    4d28:	str	r0, [fp, #-4]
    4d2c:	str	r1, [sp, #8]
    4d30:	ldr	r0, [fp, #-4]
    4d34:	ldr	r1, [sp, #8]
    4d38:	movw	r2, #0
    4d3c:	str	r2, [sp, #4]
    4d40:	ldr	r3, [sp, #4]
    4d44:	movw	ip, #15
    4d48:	str	ip, [sp]
    4d4c:	bl	117c <print_expression>
    4d50:	mov	sp, fp
    4d54:	pop	{fp, pc}

00004d58 <coda_expression_get_type_name>:
    4d58:	sub	sp, sp, #12
    4d5c:	str	r0, [sp, #4]
    4d60:	ldr	r0, [sp, #4]
    4d64:	cmp	r0, #5
    4d68:	str	r0, [sp]
    4d6c:	bhi	4df8 <coda_expression_get_type_name+0xa0>
    4d70:	add	r0, pc, #8
    4d74:	ldr	r1, [sp]
    4d78:	ldr	r0, [r0, r1, lsl #2]
    4d7c:	mov	pc, r0
    4d80:	.word	0x00004d98
    4d84:	.word	0x00004da8
    4d88:	.word	0x00004db8
    4d8c:	.word	0x00004dc8
    4d90:	.word	0x00004dd8
    4d94:	.word	0x00004de8
    4d98:	movw	r0, #0
    4d9c:	movt	r0, #0
    4da0:	str	r0, [sp, #8]
    4da4:	b	4e04 <coda_expression_get_type_name+0xac>
    4da8:	movw	r0, #0
    4dac:	movt	r0, #0
    4db0:	str	r0, [sp, #8]
    4db4:	b	4e04 <coda_expression_get_type_name+0xac>
    4db8:	movw	r0, #0
    4dbc:	movt	r0, #0
    4dc0:	str	r0, [sp, #8]
    4dc4:	b	4e04 <coda_expression_get_type_name+0xac>
    4dc8:	movw	r0, #0
    4dcc:	movt	r0, #0
    4dd0:	str	r0, [sp, #8]
    4dd4:	b	4e04 <coda_expression_get_type_name+0xac>
    4dd8:	movw	r0, #0
    4ddc:	movt	r0, #0
    4de0:	str	r0, [sp, #8]
    4de4:	b	4e04 <coda_expression_get_type_name+0xac>
    4de8:	movw	r0, #0
    4dec:	movt	r0, #0
    4df0:	str	r0, [sp, #8]
    4df4:	b	4e04 <coda_expression_get_type_name+0xac>
    4df8:	movw	r0, #0
    4dfc:	movt	r0, #0
    4e00:	str	r0, [sp, #8]
    4e04:	ldr	r0, [sp, #8]
    4e08:	add	sp, sp, #12
    4e0c:	bx	lr

00004e10 <coda_expression_is_constant>:
    4e10:	push	{fp, lr}
    4e14:	mov	fp, sp
    4e18:	sub	sp, sp, #8
    4e1c:	str	r0, [sp]
    4e20:	ldr	r0, [sp]
    4e24:	movw	r1, #0
    4e28:	cmp	r0, r1
    4e2c:	bne	4e58 <coda_expression_is_constant+0x48>
    4e30:	mvn	r0, #99	; 0x63
    4e34:	movw	r1, #0
    4e38:	movt	r1, #0
    4e3c:	movw	r2, #0
    4e40:	movt	r2, #0
    4e44:	movw	r3, #4969	; 0x1369
    4e48:	bl	0 <coda_set_error>
    4e4c:	mvn	r0, #0
    4e50:	str	r0, [sp, #4]
    4e54:	b	4e64 <coda_expression_is_constant+0x54>
    4e58:	ldr	r0, [sp]
    4e5c:	ldr	r0, [r0, #8]
    4e60:	str	r0, [sp, #4]
    4e64:	ldr	r0, [sp, #4]
    4e68:	mov	sp, fp
    4e6c:	pop	{fp, pc}

00004e70 <coda_expression_is_equal>:
    4e70:	push	{fp, lr}
    4e74:	mov	fp, sp
    4e78:	sub	sp, sp, #32
    4e7c:	str	r0, [fp, #-8]
    4e80:	str	r1, [fp, #-12]
    4e84:	ldr	r0, [fp, #-8]
    4e88:	movw	r1, #0
    4e8c:	cmp	r0, r1
    4e90:	bne	4eb4 <coda_expression_is_equal+0x44>
    4e94:	ldr	r0, [fp, #-12]
    4e98:	movw	r1, #0
    4e9c:	cmp	r0, r1
    4ea0:	movw	r0, #0
    4ea4:	moveq	r0, #1
    4ea8:	and	r0, r0, #1
    4eac:	str	r0, [fp, #-4]
    4eb0:	b	5114 <coda_expression_is_equal+0x2a4>
    4eb4:	ldr	r0, [fp, #-12]
    4eb8:	movw	r1, #0
    4ebc:	cmp	r0, r1
    4ec0:	bne	4ed0 <coda_expression_is_equal+0x60>
    4ec4:	movw	r0, #0
    4ec8:	str	r0, [fp, #-4]
    4ecc:	b	5114 <coda_expression_is_equal+0x2a4>
    4ed0:	ldr	r0, [fp, #-8]
    4ed4:	ldr	r0, [r0]
    4ed8:	ldr	r1, [fp, #-12]
    4edc:	ldr	r1, [r1]
    4ee0:	cmp	r0, r1
    4ee4:	beq	4ef4 <coda_expression_is_equal+0x84>
    4ee8:	movw	r0, #0
    4eec:	str	r0, [fp, #-4]
    4ef0:	b	5114 <coda_expression_is_equal+0x2a4>
    4ef4:	ldr	r0, [fp, #-8]
    4ef8:	ldr	r0, [r0]
    4efc:	sub	r0, r0, #18
    4f00:	cmp	r0, #4
    4f04:	str	r0, [sp, #4]
    4f08:	bhi	5014 <coda_expression_is_equal+0x1a4>
    4f0c:	add	r0, pc, #8
    4f10:	ldr	r1, [sp, #4]
    4f14:	ldr	r0, [r0, r1, lsl #2]
    4f18:	mov	pc, r0
    4f1c:	.word	0x00004f30
    4f20:	.word	0x00004f58
    4f24:	.word	0x00004f84
    4f28:	.word	0x00004fbc
    4f2c:	.word	0x00004fbc
    4f30:	ldr	r0, [fp, #-8]
    4f34:	ldr	r0, [r0, #12]
    4f38:	ldr	r1, [fp, #-12]
    4f3c:	ldr	r1, [r1, #12]
    4f40:	cmp	r0, r1
    4f44:	movw	r0, #0
    4f48:	moveq	r0, #1
    4f4c:	and	r0, r0, #1
    4f50:	str	r0, [fp, #-4]
    4f54:	b	5114 <coda_expression_is_equal+0x2a4>
    4f58:	ldr	r0, [fp, #-8]
    4f5c:	vldr	d16, [r0, #16]
    4f60:	ldr	r0, [fp, #-12]
    4f64:	vldr	d17, [r0, #16]
    4f68:	vcmp.f64	d16, d17
    4f6c:	vmrs	APSR_nzcv, fpscr
    4f70:	movw	r0, #0
    4f74:	moveq	r0, #1
    4f78:	and	r0, r0, #1
    4f7c:	str	r0, [fp, #-4]
    4f80:	b	5114 <coda_expression_is_equal+0x2a4>
    4f84:	ldr	r0, [fp, #-8]
    4f88:	ldr	r1, [r0, #16]
    4f8c:	ldr	r0, [r0, #20]
    4f90:	ldr	r2, [fp, #-12]
    4f94:	ldr	r3, [r2, #16]
    4f98:	ldr	r2, [r2, #20]
    4f9c:	eor	r0, r0, r2
    4fa0:	eor	r1, r1, r3
    4fa4:	orr	r0, r1, r0
    4fa8:	clz	r0, r0
    4fac:	lsr	r0, r0, #5
    4fb0:	and	r0, r0, #1
    4fb4:	str	r0, [fp, #-4]
    4fb8:	b	5114 <coda_expression_is_equal+0x2a4>
    4fbc:	ldr	r0, [fp, #-8]
    4fc0:	ldr	r0, [r0, #12]
    4fc4:	ldr	r1, [fp, #-12]
    4fc8:	ldr	r1, [r1, #12]
    4fcc:	cmp	r0, r1
    4fd0:	beq	4fe0 <coda_expression_is_equal+0x170>
    4fd4:	movw	r0, #0
    4fd8:	str	r0, [fp, #-4]
    4fdc:	b	5114 <coda_expression_is_equal+0x2a4>
    4fe0:	ldr	r0, [fp, #-8]
    4fe4:	ldr	r0, [r0, #16]
    4fe8:	ldr	r1, [fp, #-12]
    4fec:	ldr	r1, [r1, #16]
    4ff0:	ldr	r2, [fp, #-8]
    4ff4:	ldr	r2, [r2, #12]
    4ff8:	bl	0 <memcmp>
    4ffc:	cmp	r0, #0
    5000:	movw	r0, #0
    5004:	moveq	r0, #1
    5008:	and	r0, r0, #1
    500c:	str	r0, [fp, #-4]
    5010:	b	5114 <coda_expression_is_equal+0x2a4>
    5014:	ldr	r0, [fp, #-8]
    5018:	str	r0, [sp, #16]
    501c:	ldr	r0, [fp, #-12]
    5020:	str	r0, [sp, #12]
    5024:	ldr	r0, [sp, #16]
    5028:	ldr	r0, [r0, #12]
    502c:	movw	r1, #0
    5030:	cmp	r0, r1
    5034:	beq	5084 <coda_expression_is_equal+0x214>
    5038:	ldr	r0, [sp, #12]
    503c:	ldr	r0, [r0, #12]
    5040:	movw	r1, #0
    5044:	cmp	r0, r1
    5048:	bne	5058 <coda_expression_is_equal+0x1e8>
    504c:	movw	r0, #0
    5050:	str	r0, [fp, #-4]
    5054:	b	5114 <coda_expression_is_equal+0x2a4>
    5058:	ldr	r0, [sp, #16]
    505c:	ldr	r0, [r0, #12]
    5060:	ldr	r1, [sp, #12]
    5064:	ldr	r1, [r1, #12]
    5068:	bl	0 <strcmp>
    506c:	cmp	r0, #0
    5070:	beq	5080 <coda_expression_is_equal+0x210>
    5074:	movw	r0, #0
    5078:	str	r0, [fp, #-4]
    507c:	b	5114 <coda_expression_is_equal+0x2a4>
    5080:	b	50a8 <coda_expression_is_equal+0x238>
    5084:	ldr	r0, [sp, #12]
    5088:	ldr	r0, [r0, #12]
    508c:	movw	r1, #0
    5090:	cmp	r0, r1
    5094:	beq	50a4 <coda_expression_is_equal+0x234>
    5098:	movw	r0, #0
    509c:	str	r0, [fp, #-4]
    50a0:	b	5114 <coda_expression_is_equal+0x2a4>
    50a4:	b	50a8 <coda_expression_is_equal+0x238>
    50a8:	movw	r0, #0
    50ac:	str	r0, [sp, #8]
    50b0:	ldr	r0, [sp, #8]
    50b4:	cmp	r0, #4
    50b8:	bge	5108 <coda_expression_is_equal+0x298>
    50bc:	ldr	r0, [sp, #16]
    50c0:	ldr	r1, [sp, #8]
    50c4:	add	r0, r0, r1, lsl #2
    50c8:	ldr	r0, [r0, #16]
    50cc:	ldr	r2, [sp, #12]
    50d0:	add	r2, r2, #16
    50d4:	add	r1, r2, r1, lsl #2
    50d8:	ldr	r1, [r1]
    50dc:	bl	4e70 <coda_expression_is_equal>
    50e0:	cmp	r0, #0
    50e4:	bne	50f4 <coda_expression_is_equal+0x284>
    50e8:	movw	r0, #0
    50ec:	str	r0, [fp, #-4]
    50f0:	b	5114 <coda_expression_is_equal+0x2a4>
    50f4:	b	50f8 <coda_expression_is_equal+0x288>
    50f8:	ldr	r0, [sp, #8]
    50fc:	add	r0, r0, #1
    5100:	str	r0, [sp, #8]
    5104:	b	50b0 <coda_expression_is_equal+0x240>
    5108:	b	510c <coda_expression_is_equal+0x29c>
    510c:	movw	r0, #1
    5110:	str	r0, [fp, #-4]
    5114:	ldr	r0, [fp, #-4]
    5118:	mov	sp, fp
    511c:	pop	{fp, pc}

00005120 <coda_expression_get_type>:
    5120:	push	{fp, lr}
    5124:	mov	fp, sp
    5128:	sub	sp, sp, #16
    512c:	str	r0, [sp, #8]
    5130:	str	r1, [sp, #4]
    5134:	ldr	r0, [sp, #8]
    5138:	movw	r1, #0
    513c:	cmp	r0, r1
    5140:	bne	516c <coda_expression_get_type+0x4c>
    5144:	mvn	r0, #99	; 0x63
    5148:	movw	r1, #0
    514c:	movt	r1, #0
    5150:	movw	r2, #0
    5154:	movt	r2, #0
    5158:	movw	r3, #5071	; 0x13cf
    515c:	bl	0 <coda_set_error>
    5160:	mvn	r0, #0
    5164:	str	r0, [fp, #-4]
    5168:	b	5184 <coda_expression_get_type+0x64>
    516c:	ldr	r0, [sp, #8]
    5170:	ldr	r0, [r0, #4]
    5174:	ldr	r1, [sp, #4]
    5178:	str	r0, [r1]
    517c:	movw	r0, #0
    5180:	str	r0, [fp, #-4]
    5184:	ldr	r0, [fp, #-4]
    5188:	mov	sp, fp
    518c:	pop	{fp, pc}

00005190 <coda_expression_eval_bool>:
    5190:	push	{r4, r5, fp, lr}
    5194:	add	fp, sp, #8
    5198:	sub	sp, sp, #584	; 0x248
    519c:	str	r0, [fp, #-16]
    51a0:	str	r1, [fp, #-20]	; 0xffffffec
    51a4:	str	r2, [fp, #-24]	; 0xffffffe8
    51a8:	ldr	r0, [fp, #-16]
    51ac:	ldr	r0, [r0, #4]
    51b0:	cmp	r0, #0
    51b4:	beq	51d4 <coda_expression_eval_bool+0x44>
    51b8:	mvn	r0, #99	; 0x63
    51bc:	movw	r1, #0
    51c0:	movt	r1, #0
    51c4:	bl	0 <coda_set_error>
    51c8:	mvn	r0, #0
    51cc:	str	r0, [fp, #-12]
    51d0:	b	527c <coda_expression_eval_bool+0xec>
    51d4:	ldr	r0, [fp, #-20]	; 0xffffffec
    51d8:	movw	r1, #0
    51dc:	cmp	r0, r1
    51e0:	bne	5210 <coda_expression_eval_bool+0x80>
    51e4:	ldr	r0, [fp, #-16]
    51e8:	ldr	r0, [r0, #8]
    51ec:	cmp	r0, #0
    51f0:	bne	5210 <coda_expression_eval_bool+0x80>
    51f4:	mvn	r0, #99	; 0x63
    51f8:	movw	r1, #0
    51fc:	movt	r1, #0
    5200:	bl	0 <coda_set_error>
    5204:	mvn	r0, #0
    5208:	str	r0, [fp, #-12]
    520c:	b	527c <coda_expression_eval_bool+0xec>
    5210:	ldr	r1, [fp, #-20]	; 0xffffffec
    5214:	mov	r0, sp
    5218:	bl	c14 <init_eval_info>
    521c:	ldr	r1, [fp, #-16]
    5220:	ldr	r2, [fp, #-24]	; 0xffffffe8
    5224:	mov	r0, sp
    5228:	bl	5288 <eval_boolean>
    522c:	cmp	r0, #0
    5230:	beq	5274 <coda_expression_eval_bool+0xe4>
    5234:	ldr	r0, [fp, #-20]	; 0xffffffec
    5238:	movw	r1, #0
    523c:	cmp	r0, r1
    5240:	beq	5268 <coda_expression_eval_bool+0xd8>
    5244:	ldr	r0, [fp, #-20]	; 0xffffffec
    5248:	mov	r1, sp
    524c:	add	r1, r1, #8
    5250:	bl	0 <coda_cursor_compare>
    5254:	cmp	r0, #0
    5258:	beq	5268 <coda_expression_eval_bool+0xd8>
    525c:	mov	r0, sp
    5260:	add	r0, r0, #8
    5264:	bl	0 <coda_cursor_add_to_error_message>
    5268:	mvn	r0, #0
    526c:	str	r0, [fp, #-12]
    5270:	b	527c <coda_expression_eval_bool+0xec>
    5274:	movw	r0, #0
    5278:	str	r0, [fp, #-12]
    527c:	ldr	r0, [fp, #-12]
    5280:	sub	sp, fp, #8
    5284:	pop	{r4, r5, fp, pc}

00005288 <eval_boolean>:
    5288:	push	{r4, sl, fp, lr}
    528c:	add	fp, sp, #8
    5290:	sub	sp, sp, #824	; 0x338
    5294:	sub	sp, sp, #2048	; 0x800
    5298:	str	r0, [fp, #-16]
    529c:	str	r1, [fp, #-20]	; 0xffffffec
    52a0:	str	r2, [fp, #-24]	; 0xffffffe8
    52a4:	ldr	r0, [fp, #-20]	; 0xffffffec
    52a8:	ldr	r0, [r0]
    52ac:	cmp	r0, #18
    52b0:	bne	52d0 <eval_boolean+0x48>
    52b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    52b8:	ldr	r0, [r0, #12]
    52bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    52c0:	str	r0, [r1]
    52c4:	movw	r0, #0
    52c8:	str	r0, [fp, #-12]
    52cc:	b	6f9c <eval_boolean+0x1d14>
    52d0:	ldr	r0, [fp, #-20]	; 0xffffffec
    52d4:	str	r0, [fp, #-28]	; 0xffffffe4
    52d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    52dc:	ldr	r0, [r0]
    52e0:	sub	r0, r0, #4
    52e4:	cmp	r0, #82	; 0x52
    52e8:	str	r0, [sp, #96]	; 0x60
    52ec:	bhi	6f74 <eval_boolean+0x1cec>
    52f0:	add	r0, pc, #8
    52f4:	ldr	r1, [sp, #96]	; 0x60
    52f8:	ldr	r0, [r0, r1, lsl #2]
    52fc:	mov	pc, r0
    5300:	.word	0x000068e0
    5304:	.word	0x00006f74
    5308:	.word	0x00006a88
    530c:	.word	0x00006f74
    5310:	.word	0x00006f74
    5314:	.word	0x00006f74
    5318:	.word	0x00006f74
    531c:	.word	0x00006e10
    5320:	.word	0x00006f74
    5324:	.word	0x00006f74
    5328:	.word	0x00006f74
    532c:	.word	0x00006f74
    5330:	.word	0x00006f74
    5334:	.word	0x00006f74
    5338:	.word	0x00006f74
    533c:	.word	0x00006f74
    5340:	.word	0x00006f74
    5344:	.word	0x00006f74
    5348:	.word	0x00006f74
    534c:	.word	0x00006f74
    5350:	.word	0x00006f74
    5354:	.word	0x0000544c
    5358:	.word	0x0000672c
    535c:	.word	0x00006f74
    5360:	.word	0x00006f74
    5364:	.word	0x00006f74
    5368:	.word	0x00006f74
    536c:	.word	0x00006f74
    5370:	.word	0x00006f74
    5374:	.word	0x00006f74
    5378:	.word	0x00006f74
    537c:	.word	0x00006f74
    5380:	.word	0x00006f74
    5384:	.word	0x00006f74
    5388:	.word	0x00006f74
    538c:	.word	0x00006f74
    5390:	.word	0x00005b40
    5394:	.word	0x000058ec
    5398:	.word	0x00006d80
    539c:	.word	0x00006f74
    53a0:	.word	0x00006f74
    53a4:	.word	0x00006f74
    53a8:	.word	0x000063ac
    53ac:	.word	0x00006424
    53b0:	.word	0x00006370
    53b4:	.word	0x000063e8
    53b8:	.word	0x00006f74
    53bc:	.word	0x00005fe8
    53c0:	.word	0x00005d94
    53c4:	.word	0x00006290
    53c8:	.word	0x00006300
    53cc:	.word	0x00006f74
    53d0:	.word	0x00006f74
    53d4:	.word	0x00006f74
    53d8:	.word	0x00006f74
    53dc:	.word	0x00006f74
    53e0:	.word	0x00006f74
    53e4:	.word	0x0000569c
    53e8:	.word	0x0000623c
    53ec:	.word	0x00006f74
    53f0:	.word	0x00006f74
    53f4:	.word	0x00006f74
    53f8:	.word	0x00006f74
    53fc:	.word	0x00006f74
    5400:	.word	0x00006f74
    5404:	.word	0x00006f74
    5408:	.word	0x00006f74
    540c:	.word	0x00006460
    5410:	.word	0x00006f74
    5414:	.word	0x00006f74
    5418:	.word	0x00006f74
    541c:	.word	0x00006f74
    5420:	.word	0x00006f74
    5424:	.word	0x00006f74
    5428:	.word	0x00006f74
    542c:	.word	0x00006f74
    5430:	.word	0x00006f74
    5434:	.word	0x00006f74
    5438:	.word	0x00006c2c
    543c:	.word	0x00006f74
    5440:	.word	0x00006f74
    5444:	.word	0x00006f74
    5448:	.word	0x00006ecc
    544c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5450:	ldr	r0, [r0, #16]
    5454:	ldr	r0, [r0, #4]
    5458:	cmp	r0, #2
    545c:	beq	5474 <eval_boolean+0x1ec>
    5460:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5464:	ldr	r0, [r0, #20]
    5468:	ldr	r0, [r0, #4]
    546c:	cmp	r0, #2
    5470:	bne	54ec <eval_boolean+0x264>
    5474:	ldr	r0, [fp, #-16]
    5478:	ldr	r1, [fp, #-28]	; 0xffffffe4
    547c:	ldr	r1, [r1, #16]
    5480:	sub	r2, fp, #40	; 0x28
    5484:	bl	96c8 <eval_float>
    5488:	cmp	r0, #0
    548c:	beq	549c <eval_boolean+0x214>
    5490:	mvn	r0, #0
    5494:	str	r0, [fp, #-12]
    5498:	b	6f9c <eval_boolean+0x1d14>
    549c:	ldr	r0, [fp, #-16]
    54a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    54a4:	ldr	r1, [r1, #20]
    54a8:	sub	r2, fp, #48	; 0x30
    54ac:	bl	96c8 <eval_float>
    54b0:	cmp	r0, #0
    54b4:	beq	54c4 <eval_boolean+0x23c>
    54b8:	mvn	r0, #0
    54bc:	str	r0, [fp, #-12]
    54c0:	b	6f9c <eval_boolean+0x1d14>
    54c4:	vldr	d16, [fp, #-40]	; 0xffffffd8
    54c8:	vldr	d17, [fp, #-48]	; 0xffffffd0
    54cc:	vcmp.f64	d16, d17
    54d0:	vmrs	APSR_nzcv, fpscr
    54d4:	movw	r0, #0
    54d8:	moveq	r0, #1
    54dc:	and	r0, r0, #1
    54e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    54e4:	str	r0, [r1]
    54e8:	b	5698 <eval_boolean+0x410>
    54ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    54f0:	ldr	r0, [r0, #16]
    54f4:	ldr	r0, [r0, #4]
    54f8:	cmp	r0, #1
    54fc:	bne	5584 <eval_boolean+0x2fc>
    5500:	ldr	r0, [fp, #-16]
    5504:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5508:	ldr	r1, [r1, #16]
    550c:	sub	r2, fp, #56	; 0x38
    5510:	bl	70a8 <eval_integer>
    5514:	cmp	r0, #0
    5518:	beq	5528 <eval_boolean+0x2a0>
    551c:	mvn	r0, #0
    5520:	str	r0, [fp, #-12]
    5524:	b	6f9c <eval_boolean+0x1d14>
    5528:	ldr	r0, [fp, #-16]
    552c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5530:	ldr	r1, [r1, #20]
    5534:	sub	r2, fp, #64	; 0x40
    5538:	bl	70a8 <eval_integer>
    553c:	cmp	r0, #0
    5540:	beq	5550 <eval_boolean+0x2c8>
    5544:	mvn	r0, #0
    5548:	str	r0, [fp, #-12]
    554c:	b	6f9c <eval_boolean+0x1d14>
    5550:	ldr	r0, [fp, #-56]	; 0xffffffc8
    5554:	ldr	r1, [fp, #-52]	; 0xffffffcc
    5558:	ldr	r2, [fp, #-64]	; 0xffffffc0
    555c:	ldr	r3, [fp, #-60]	; 0xffffffc4
    5560:	eor	r1, r1, r3
    5564:	eor	r0, r0, r2
    5568:	orr	r0, r0, r1
    556c:	clz	r0, r0
    5570:	lsr	r0, r0, #5
    5574:	and	r0, r0, #1
    5578:	ldr	r1, [fp, #-24]	; 0xffffffe8
    557c:	str	r0, [r1]
    5580:	b	5694 <eval_boolean+0x40c>
    5584:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5588:	ldr	r0, [r0, #16]
    558c:	ldr	r0, [r0, #4]
    5590:	cmp	r0, #3
    5594:	bne	5670 <eval_boolean+0x3e8>
    5598:	ldr	r0, [fp, #-16]
    559c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    55a0:	ldr	r1, [r1, #16]
    55a4:	sub	r2, fp, #68	; 0x44
    55a8:	sub	r3, fp, #76	; 0x4c
    55ac:	sub	ip, fp, #84	; 0x54
    55b0:	str	ip, [sp]
    55b4:	bl	ac2c <eval_string>
    55b8:	cmp	r0, #0
    55bc:	beq	55cc <eval_boolean+0x344>
    55c0:	mvn	r0, #0
    55c4:	str	r0, [fp, #-12]
    55c8:	b	6f9c <eval_boolean+0x1d14>
    55cc:	ldr	r0, [fp, #-16]
    55d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    55d4:	ldr	r1, [r1, #20]
    55d8:	sub	r2, fp, #72	; 0x48
    55dc:	sub	r3, fp, #80	; 0x50
    55e0:	sub	ip, fp, #88	; 0x58
    55e4:	str	ip, [sp]
    55e8:	bl	ac2c <eval_string>
    55ec:	cmp	r0, #0
    55f0:	beq	5608 <eval_boolean+0x380>
    55f4:	ldr	r0, [fp, #-84]	; 0xffffffac
    55f8:	bl	0 <free>
    55fc:	mvn	r0, #0
    5600:	str	r0, [fp, #-12]
    5604:	b	6f9c <eval_boolean+0x1d14>
    5608:	ldr	r0, [fp, #-68]	; 0xffffffbc
    560c:	ldr	r1, [fp, #-76]	; 0xffffffb4
    5610:	ldr	r2, [fp, #-84]	; 0xffffffac
    5614:	ldr	r3, [fp, #-72]	; 0xffffffb8
    5618:	ldr	ip, [fp, #-80]	; 0xffffffb0
    561c:	ldr	lr, [fp, #-88]	; 0xffffffa8
    5620:	str	ip, [sp]
    5624:	str	lr, [sp, #4]
    5628:	bl	e388 <compare_strings>
    562c:	cmp	r0, #0
    5630:	movw	r0, #0
    5634:	moveq	r0, #1
    5638:	and	r0, r0, #1
    563c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5640:	str	r0, [r1]
    5644:	ldr	r0, [fp, #-76]	; 0xffffffb4
    5648:	cmp	r0, #0
    564c:	ble	5658 <eval_boolean+0x3d0>
    5650:	ldr	r0, [fp, #-84]	; 0xffffffac
    5654:	bl	0 <free>
    5658:	ldr	r0, [fp, #-80]	; 0xffffffb0
    565c:	cmp	r0, #0
    5660:	ble	566c <eval_boolean+0x3e4>
    5664:	ldr	r0, [fp, #-88]	; 0xffffffa8
    5668:	bl	0 <free>
    566c:	b	5690 <eval_boolean+0x408>
    5670:	movw	r0, #0
    5674:	movt	r0, #0
    5678:	movw	r1, #0
    567c:	movt	r1, #0
    5680:	movw	r2, #668	; 0x29c
    5684:	movw	r3, #0
    5688:	movt	r3, #0
    568c:	bl	0 <__assert_fail>
    5690:	b	5694 <eval_boolean+0x40c>
    5694:	b	5698 <eval_boolean+0x410>
    5698:	b	6f94 <eval_boolean+0x1d0c>
    569c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    56a0:	ldr	r0, [r0, #16]
    56a4:	ldr	r0, [r0, #4]
    56a8:	cmp	r0, #2
    56ac:	beq	56c4 <eval_boolean+0x43c>
    56b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    56b4:	ldr	r0, [r0, #20]
    56b8:	ldr	r0, [r0, #4]
    56bc:	cmp	r0, #2
    56c0:	bne	573c <eval_boolean+0x4b4>
    56c4:	ldr	r0, [fp, #-16]
    56c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    56cc:	ldr	r1, [r1, #16]
    56d0:	sub	r2, fp, #96	; 0x60
    56d4:	bl	96c8 <eval_float>
    56d8:	cmp	r0, #0
    56dc:	beq	56ec <eval_boolean+0x464>
    56e0:	mvn	r0, #0
    56e4:	str	r0, [fp, #-12]
    56e8:	b	6f9c <eval_boolean+0x1d14>
    56ec:	ldr	r0, [fp, #-16]
    56f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    56f4:	ldr	r1, [r1, #20]
    56f8:	sub	r2, fp, #104	; 0x68
    56fc:	bl	96c8 <eval_float>
    5700:	cmp	r0, #0
    5704:	beq	5714 <eval_boolean+0x48c>
    5708:	mvn	r0, #0
    570c:	str	r0, [fp, #-12]
    5710:	b	6f9c <eval_boolean+0x1d14>
    5714:	vldr	d16, [fp, #-96]	; 0xffffffa0
    5718:	vldr	d17, [fp, #-104]	; 0xffffff98
    571c:	vcmp.f64	d16, d17
    5720:	vmrs	APSR_nzcv, fpscr
    5724:	movw	r0, #0
    5728:	movne	r0, #1
    572c:	and	r0, r0, #1
    5730:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5734:	str	r0, [r1]
    5738:	b	58e8 <eval_boolean+0x660>
    573c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5740:	ldr	r0, [r0, #16]
    5744:	ldr	r0, [r0, #4]
    5748:	cmp	r0, #1
    574c:	bne	57d4 <eval_boolean+0x54c>
    5750:	ldr	r0, [fp, #-16]
    5754:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5758:	ldr	r1, [r1, #16]
    575c:	sub	r2, fp, #112	; 0x70
    5760:	bl	70a8 <eval_integer>
    5764:	cmp	r0, #0
    5768:	beq	5778 <eval_boolean+0x4f0>
    576c:	mvn	r0, #0
    5770:	str	r0, [fp, #-12]
    5774:	b	6f9c <eval_boolean+0x1d14>
    5778:	ldr	r0, [fp, #-16]
    577c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5780:	ldr	r1, [r1, #20]
    5784:	sub	r2, fp, #120	; 0x78
    5788:	bl	70a8 <eval_integer>
    578c:	cmp	r0, #0
    5790:	beq	57a0 <eval_boolean+0x518>
    5794:	mvn	r0, #0
    5798:	str	r0, [fp, #-12]
    579c:	b	6f9c <eval_boolean+0x1d14>
    57a0:	ldr	r0, [fp, #-112]	; 0xffffff90
    57a4:	ldr	r1, [fp, #-108]	; 0xffffff94
    57a8:	ldr	r2, [fp, #-120]	; 0xffffff88
    57ac:	ldr	r3, [fp, #-116]	; 0xffffff8c
    57b0:	eor	r1, r1, r3
    57b4:	eor	r0, r0, r2
    57b8:	orr	r0, r0, r1
    57bc:	cmp	r0, #0
    57c0:	movwne	r0, #1
    57c4:	and	r0, r0, #1
    57c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    57cc:	str	r0, [r1]
    57d0:	b	58e4 <eval_boolean+0x65c>
    57d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    57d8:	ldr	r0, [r0, #16]
    57dc:	ldr	r0, [r0, #4]
    57e0:	cmp	r0, #3
    57e4:	bne	58c0 <eval_boolean+0x638>
    57e8:	ldr	r0, [fp, #-16]
    57ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    57f0:	ldr	r1, [r1, #16]
    57f4:	sub	r2, fp, #124	; 0x7c
    57f8:	sub	r3, fp, #132	; 0x84
    57fc:	sub	ip, fp, #140	; 0x8c
    5800:	str	ip, [sp]
    5804:	bl	ac2c <eval_string>
    5808:	cmp	r0, #0
    580c:	beq	581c <eval_boolean+0x594>
    5810:	mvn	r0, #0
    5814:	str	r0, [fp, #-12]
    5818:	b	6f9c <eval_boolean+0x1d14>
    581c:	ldr	r0, [fp, #-16]
    5820:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5824:	ldr	r1, [r1, #20]
    5828:	sub	r2, fp, #128	; 0x80
    582c:	sub	r3, fp, #136	; 0x88
    5830:	sub	ip, fp, #144	; 0x90
    5834:	str	ip, [sp]
    5838:	bl	ac2c <eval_string>
    583c:	cmp	r0, #0
    5840:	beq	5858 <eval_boolean+0x5d0>
    5844:	ldr	r0, [fp, #-140]	; 0xffffff74
    5848:	bl	0 <free>
    584c:	mvn	r0, #0
    5850:	str	r0, [fp, #-12]
    5854:	b	6f9c <eval_boolean+0x1d14>
    5858:	ldr	r0, [fp, #-124]	; 0xffffff84
    585c:	ldr	r1, [fp, #-132]	; 0xffffff7c
    5860:	ldr	r2, [fp, #-140]	; 0xffffff74
    5864:	ldr	r3, [fp, #-128]	; 0xffffff80
    5868:	ldr	ip, [fp, #-136]	; 0xffffff78
    586c:	ldr	lr, [fp, #-144]	; 0xffffff70
    5870:	str	ip, [sp]
    5874:	str	lr, [sp, #4]
    5878:	bl	e388 <compare_strings>
    587c:	cmp	r0, #0
    5880:	movw	r0, #0
    5884:	movne	r0, #1
    5888:	and	r0, r0, #1
    588c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5890:	str	r0, [r1]
    5894:	ldr	r0, [fp, #-132]	; 0xffffff7c
    5898:	cmp	r0, #0
    589c:	ble	58a8 <eval_boolean+0x620>
    58a0:	ldr	r0, [fp, #-140]	; 0xffffff74
    58a4:	bl	0 <free>
    58a8:	ldr	r0, [fp, #-136]	; 0xffffff78
    58ac:	cmp	r0, #0
    58b0:	ble	58bc <eval_boolean+0x634>
    58b4:	ldr	r0, [fp, #-144]	; 0xffffff70
    58b8:	bl	0 <free>
    58bc:	b	58e0 <eval_boolean+0x658>
    58c0:	movw	r0, #0
    58c4:	movt	r0, #0
    58c8:	movw	r1, #0
    58cc:	movt	r1, #0
    58d0:	movw	r2, #730	; 0x2da
    58d4:	movw	r3, #0
    58d8:	movt	r3, #0
    58dc:	bl	0 <__assert_fail>
    58e0:	b	58e4 <eval_boolean+0x65c>
    58e4:	b	58e8 <eval_boolean+0x660>
    58e8:	b	6f94 <eval_boolean+0x1d0c>
    58ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    58f0:	ldr	r0, [r0, #16]
    58f4:	ldr	r0, [r0, #4]
    58f8:	cmp	r0, #2
    58fc:	beq	5914 <eval_boolean+0x68c>
    5900:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5904:	ldr	r0, [r0, #20]
    5908:	ldr	r0, [r0, #4]
    590c:	cmp	r0, #2
    5910:	bne	598c <eval_boolean+0x704>
    5914:	ldr	r0, [fp, #-16]
    5918:	ldr	r1, [fp, #-28]	; 0xffffffe4
    591c:	ldr	r1, [r1, #16]
    5920:	sub	r2, fp, #152	; 0x98
    5924:	bl	96c8 <eval_float>
    5928:	cmp	r0, #0
    592c:	beq	593c <eval_boolean+0x6b4>
    5930:	mvn	r0, #0
    5934:	str	r0, [fp, #-12]
    5938:	b	6f9c <eval_boolean+0x1d14>
    593c:	ldr	r0, [fp, #-16]
    5940:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5944:	ldr	r1, [r1, #20]
    5948:	sub	r2, fp, #160	; 0xa0
    594c:	bl	96c8 <eval_float>
    5950:	cmp	r0, #0
    5954:	beq	5964 <eval_boolean+0x6dc>
    5958:	mvn	r0, #0
    595c:	str	r0, [fp, #-12]
    5960:	b	6f9c <eval_boolean+0x1d14>
    5964:	vldr	d16, [fp, #-152]	; 0xffffff68
    5968:	vldr	d17, [fp, #-160]	; 0xffffff60
    596c:	vcmpe.f64	d16, d17
    5970:	vmrs	APSR_nzcv, fpscr
    5974:	movw	r0, #0
    5978:	movgt	r0, #1
    597c:	and	r0, r0, #1
    5980:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5984:	str	r0, [r1]
    5988:	b	5b3c <eval_boolean+0x8b4>
    598c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5990:	ldr	r0, [r0, #16]
    5994:	ldr	r0, [r0, #4]
    5998:	cmp	r0, #1
    599c:	bne	5a28 <eval_boolean+0x7a0>
    59a0:	ldr	r0, [fp, #-16]
    59a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    59a8:	ldr	r1, [r1, #16]
    59ac:	sub	r2, fp, #168	; 0xa8
    59b0:	bl	70a8 <eval_integer>
    59b4:	cmp	r0, #0
    59b8:	beq	59c8 <eval_boolean+0x740>
    59bc:	mvn	r0, #0
    59c0:	str	r0, [fp, #-12]
    59c4:	b	6f9c <eval_boolean+0x1d14>
    59c8:	ldr	r0, [fp, #-16]
    59cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    59d0:	ldr	r1, [r1, #20]
    59d4:	sub	r2, fp, #176	; 0xb0
    59d8:	bl	70a8 <eval_integer>
    59dc:	cmp	r0, #0
    59e0:	beq	59f0 <eval_boolean+0x768>
    59e4:	mvn	r0, #0
    59e8:	str	r0, [fp, #-12]
    59ec:	b	6f9c <eval_boolean+0x1d14>
    59f0:	ldr	r0, [fp, #-168]	; 0xffffff58
    59f4:	ldr	r1, [fp, #-164]	; 0xffffff5c
    59f8:	ldr	r2, [fp, #-176]	; 0xffffff50
    59fc:	ldr	r3, [fp, #-172]	; 0xffffff54
    5a00:	subs	r0, r2, r0
    5a04:	sbcs	r1, r3, r1
    5a08:	mov	r2, #0
    5a0c:	movwlt	r2, #1
    5a10:	and	r2, r2, #1
    5a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5a18:	str	r2, [r3]
    5a1c:	str	r0, [sp, #92]	; 0x5c
    5a20:	str	r1, [sp, #88]	; 0x58
    5a24:	b	5b38 <eval_boolean+0x8b0>
    5a28:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5a2c:	ldr	r0, [r0, #16]
    5a30:	ldr	r0, [r0, #4]
    5a34:	cmp	r0, #3
    5a38:	bne	5b14 <eval_boolean+0x88c>
    5a3c:	ldr	r0, [fp, #-16]
    5a40:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5a44:	ldr	r1, [r1, #16]
    5a48:	sub	r2, fp, #180	; 0xb4
    5a4c:	sub	r3, fp, #188	; 0xbc
    5a50:	sub	ip, fp, #196	; 0xc4
    5a54:	str	ip, [sp]
    5a58:	bl	ac2c <eval_string>
    5a5c:	cmp	r0, #0
    5a60:	beq	5a70 <eval_boolean+0x7e8>
    5a64:	mvn	r0, #0
    5a68:	str	r0, [fp, #-12]
    5a6c:	b	6f9c <eval_boolean+0x1d14>
    5a70:	ldr	r0, [fp, #-16]
    5a74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5a78:	ldr	r1, [r1, #20]
    5a7c:	sub	r2, fp, #184	; 0xb8
    5a80:	sub	r3, fp, #192	; 0xc0
    5a84:	sub	ip, fp, #200	; 0xc8
    5a88:	str	ip, [sp]
    5a8c:	bl	ac2c <eval_string>
    5a90:	cmp	r0, #0
    5a94:	beq	5aac <eval_boolean+0x824>
    5a98:	ldr	r0, [fp, #-196]	; 0xffffff3c
    5a9c:	bl	0 <free>
    5aa0:	mvn	r0, #0
    5aa4:	str	r0, [fp, #-12]
    5aa8:	b	6f9c <eval_boolean+0x1d14>
    5aac:	ldr	r0, [fp, #-180]	; 0xffffff4c
    5ab0:	ldr	r1, [fp, #-188]	; 0xffffff44
    5ab4:	ldr	r2, [fp, #-196]	; 0xffffff3c
    5ab8:	ldr	r3, [fp, #-184]	; 0xffffff48
    5abc:	ldr	ip, [fp, #-192]	; 0xffffff40
    5ac0:	ldr	lr, [fp, #-200]	; 0xffffff38
    5ac4:	str	ip, [sp]
    5ac8:	str	lr, [sp, #4]
    5acc:	bl	e388 <compare_strings>
    5ad0:	cmp	r0, #0
    5ad4:	movw	r0, #0
    5ad8:	movgt	r0, #1
    5adc:	and	r0, r0, #1
    5ae0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5ae4:	str	r0, [r1]
    5ae8:	ldr	r0, [fp, #-188]	; 0xffffff44
    5aec:	cmp	r0, #0
    5af0:	ble	5afc <eval_boolean+0x874>
    5af4:	ldr	r0, [fp, #-196]	; 0xffffff3c
    5af8:	bl	0 <free>
    5afc:	ldr	r0, [fp, #-192]	; 0xffffff40
    5b00:	cmp	r0, #0
    5b04:	ble	5b10 <eval_boolean+0x888>
    5b08:	ldr	r0, [fp, #-200]	; 0xffffff38
    5b0c:	bl	0 <free>
    5b10:	b	5b34 <eval_boolean+0x8ac>
    5b14:	movw	r0, #0
    5b18:	movt	r0, #0
    5b1c:	movw	r1, #0
    5b20:	movt	r1, #0
    5b24:	movw	r2, #792	; 0x318
    5b28:	movw	r3, #0
    5b2c:	movt	r3, #0
    5b30:	bl	0 <__assert_fail>
    5b34:	b	5b38 <eval_boolean+0x8b0>
    5b38:	b	5b3c <eval_boolean+0x8b4>
    5b3c:	b	6f94 <eval_boolean+0x1d0c>
    5b40:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5b44:	ldr	r0, [r0, #16]
    5b48:	ldr	r0, [r0, #4]
    5b4c:	cmp	r0, #2
    5b50:	beq	5b68 <eval_boolean+0x8e0>
    5b54:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5b58:	ldr	r0, [r0, #20]
    5b5c:	ldr	r0, [r0, #4]
    5b60:	cmp	r0, #2
    5b64:	bne	5be0 <eval_boolean+0x958>
    5b68:	ldr	r0, [fp, #-16]
    5b6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5b70:	ldr	r1, [r1, #16]
    5b74:	sub	r2, fp, #208	; 0xd0
    5b78:	bl	96c8 <eval_float>
    5b7c:	cmp	r0, #0
    5b80:	beq	5b90 <eval_boolean+0x908>
    5b84:	mvn	r0, #0
    5b88:	str	r0, [fp, #-12]
    5b8c:	b	6f9c <eval_boolean+0x1d14>
    5b90:	ldr	r0, [fp, #-16]
    5b94:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5b98:	ldr	r1, [r1, #20]
    5b9c:	sub	r2, fp, #216	; 0xd8
    5ba0:	bl	96c8 <eval_float>
    5ba4:	cmp	r0, #0
    5ba8:	beq	5bb8 <eval_boolean+0x930>
    5bac:	mvn	r0, #0
    5bb0:	str	r0, [fp, #-12]
    5bb4:	b	6f9c <eval_boolean+0x1d14>
    5bb8:	vldr	d16, [fp, #-208]	; 0xffffff30
    5bbc:	vldr	d17, [fp, #-216]	; 0xffffff28
    5bc0:	vcmpe.f64	d16, d17
    5bc4:	vmrs	APSR_nzcv, fpscr
    5bc8:	movw	r0, #0
    5bcc:	movge	r0, #1
    5bd0:	and	r0, r0, #1
    5bd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5bd8:	str	r0, [r1]
    5bdc:	b	5d90 <eval_boolean+0xb08>
    5be0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5be4:	ldr	r0, [r0, #16]
    5be8:	ldr	r0, [r0, #4]
    5bec:	cmp	r0, #1
    5bf0:	bne	5c7c <eval_boolean+0x9f4>
    5bf4:	ldr	r0, [fp, #-16]
    5bf8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5bfc:	ldr	r1, [r1, #16]
    5c00:	sub	r2, fp, #224	; 0xe0
    5c04:	bl	70a8 <eval_integer>
    5c08:	cmp	r0, #0
    5c0c:	beq	5c1c <eval_boolean+0x994>
    5c10:	mvn	r0, #0
    5c14:	str	r0, [fp, #-12]
    5c18:	b	6f9c <eval_boolean+0x1d14>
    5c1c:	ldr	r0, [fp, #-16]
    5c20:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5c24:	ldr	r1, [r1, #20]
    5c28:	sub	r2, fp, #232	; 0xe8
    5c2c:	bl	70a8 <eval_integer>
    5c30:	cmp	r0, #0
    5c34:	beq	5c44 <eval_boolean+0x9bc>
    5c38:	mvn	r0, #0
    5c3c:	str	r0, [fp, #-12]
    5c40:	b	6f9c <eval_boolean+0x1d14>
    5c44:	ldr	r0, [fp, #-224]	; 0xffffff20
    5c48:	ldr	r1, [fp, #-220]	; 0xffffff24
    5c4c:	ldr	r2, [fp, #-232]	; 0xffffff18
    5c50:	ldr	r3, [fp, #-228]	; 0xffffff1c
    5c54:	subs	r0, r0, r2
    5c58:	sbcs	r1, r1, r3
    5c5c:	mov	r2, #0
    5c60:	movwge	r2, #1
    5c64:	and	r2, r2, #1
    5c68:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5c6c:	str	r2, [r3]
    5c70:	str	r0, [sp, #84]	; 0x54
    5c74:	str	r1, [sp, #80]	; 0x50
    5c78:	b	5d8c <eval_boolean+0xb04>
    5c7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5c80:	ldr	r0, [r0, #16]
    5c84:	ldr	r0, [r0, #4]
    5c88:	cmp	r0, #3
    5c8c:	bne	5d68 <eval_boolean+0xae0>
    5c90:	ldr	r0, [fp, #-16]
    5c94:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5c98:	ldr	r1, [r1, #16]
    5c9c:	sub	r2, fp, #236	; 0xec
    5ca0:	sub	r3, fp, #244	; 0xf4
    5ca4:	sub	ip, fp, #252	; 0xfc
    5ca8:	str	ip, [sp]
    5cac:	bl	ac2c <eval_string>
    5cb0:	cmp	r0, #0
    5cb4:	beq	5cc4 <eval_boolean+0xa3c>
    5cb8:	mvn	r0, #0
    5cbc:	str	r0, [fp, #-12]
    5cc0:	b	6f9c <eval_boolean+0x1d14>
    5cc4:	ldr	r0, [fp, #-16]
    5cc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5ccc:	ldr	r1, [r1, #20]
    5cd0:	sub	r2, fp, #240	; 0xf0
    5cd4:	sub	r3, fp, #248	; 0xf8
    5cd8:	sub	ip, fp, #256	; 0x100
    5cdc:	str	ip, [sp]
    5ce0:	bl	ac2c <eval_string>
    5ce4:	cmp	r0, #0
    5ce8:	beq	5d00 <eval_boolean+0xa78>
    5cec:	ldr	r0, [fp, #-252]	; 0xffffff04
    5cf0:	bl	0 <free>
    5cf4:	mvn	r0, #0
    5cf8:	str	r0, [fp, #-12]
    5cfc:	b	6f9c <eval_boolean+0x1d14>
    5d00:	ldr	r0, [fp, #-236]	; 0xffffff14
    5d04:	ldr	r1, [fp, #-244]	; 0xffffff0c
    5d08:	ldr	r2, [fp, #-252]	; 0xffffff04
    5d0c:	ldr	r3, [fp, #-240]	; 0xffffff10
    5d10:	ldr	ip, [fp, #-248]	; 0xffffff08
    5d14:	ldr	lr, [fp, #-256]	; 0xffffff00
    5d18:	str	ip, [sp]
    5d1c:	str	lr, [sp, #4]
    5d20:	bl	e388 <compare_strings>
    5d24:	cmp	r0, #0
    5d28:	movw	r0, #0
    5d2c:	movge	r0, #1
    5d30:	and	r0, r0, #1
    5d34:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5d38:	str	r0, [r1]
    5d3c:	ldr	r0, [fp, #-244]	; 0xffffff0c
    5d40:	cmp	r0, #0
    5d44:	ble	5d50 <eval_boolean+0xac8>
    5d48:	ldr	r0, [fp, #-252]	; 0xffffff04
    5d4c:	bl	0 <free>
    5d50:	ldr	r0, [fp, #-248]	; 0xffffff08
    5d54:	cmp	r0, #0
    5d58:	ble	5d64 <eval_boolean+0xadc>
    5d5c:	ldr	r0, [fp, #-256]	; 0xffffff00
    5d60:	bl	0 <free>
    5d64:	b	5d88 <eval_boolean+0xb00>
    5d68:	movw	r0, #0
    5d6c:	movt	r0, #0
    5d70:	movw	r1, #0
    5d74:	movt	r1, #0
    5d78:	movw	r2, #854	; 0x356
    5d7c:	movw	r3, #0
    5d80:	movt	r3, #0
    5d84:	bl	0 <__assert_fail>
    5d88:	b	5d8c <eval_boolean+0xb04>
    5d8c:	b	5d90 <eval_boolean+0xb08>
    5d90:	b	6f94 <eval_boolean+0x1d0c>
    5d94:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5d98:	ldr	r0, [r0, #16]
    5d9c:	ldr	r0, [r0, #4]
    5da0:	cmp	r0, #2
    5da4:	beq	5dbc <eval_boolean+0xb34>
    5da8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5dac:	ldr	r0, [r0, #20]
    5db0:	ldr	r0, [r0, #4]
    5db4:	cmp	r0, #2
    5db8:	bne	5e34 <eval_boolean+0xbac>
    5dbc:	ldr	r0, [fp, #-16]
    5dc0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5dc4:	ldr	r1, [r1, #16]
    5dc8:	sub	r2, fp, #264	; 0x108
    5dcc:	bl	96c8 <eval_float>
    5dd0:	cmp	r0, #0
    5dd4:	beq	5de4 <eval_boolean+0xb5c>
    5dd8:	mvn	r0, #0
    5ddc:	str	r0, [fp, #-12]
    5de0:	b	6f9c <eval_boolean+0x1d14>
    5de4:	ldr	r0, [fp, #-16]
    5de8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5dec:	ldr	r1, [r1, #20]
    5df0:	sub	r2, fp, #272	; 0x110
    5df4:	bl	96c8 <eval_float>
    5df8:	cmp	r0, #0
    5dfc:	beq	5e0c <eval_boolean+0xb84>
    5e00:	mvn	r0, #0
    5e04:	str	r0, [fp, #-12]
    5e08:	b	6f9c <eval_boolean+0x1d14>
    5e0c:	vldr	d16, [fp, #-264]	; 0xfffffef8
    5e10:	vldr	d17, [fp, #-272]	; 0xfffffef0
    5e14:	vcmpe.f64	d16, d17
    5e18:	vmrs	APSR_nzcv, fpscr
    5e1c:	movw	r0, #0
    5e20:	movmi	r0, #1
    5e24:	and	r0, r0, #1
    5e28:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5e2c:	str	r0, [r1]
    5e30:	b	5fe4 <eval_boolean+0xd5c>
    5e34:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5e38:	ldr	r0, [r0, #16]
    5e3c:	ldr	r0, [r0, #4]
    5e40:	cmp	r0, #1
    5e44:	bne	5ed0 <eval_boolean+0xc48>
    5e48:	ldr	r0, [fp, #-16]
    5e4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5e50:	ldr	r1, [r1, #16]
    5e54:	sub	r2, fp, #280	; 0x118
    5e58:	bl	70a8 <eval_integer>
    5e5c:	cmp	r0, #0
    5e60:	beq	5e70 <eval_boolean+0xbe8>
    5e64:	mvn	r0, #0
    5e68:	str	r0, [fp, #-12]
    5e6c:	b	6f9c <eval_boolean+0x1d14>
    5e70:	ldr	r0, [fp, #-16]
    5e74:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5e78:	ldr	r1, [r1, #20]
    5e7c:	sub	r2, fp, #288	; 0x120
    5e80:	bl	70a8 <eval_integer>
    5e84:	cmp	r0, #0
    5e88:	beq	5e98 <eval_boolean+0xc10>
    5e8c:	mvn	r0, #0
    5e90:	str	r0, [fp, #-12]
    5e94:	b	6f9c <eval_boolean+0x1d14>
    5e98:	ldr	r0, [fp, #-280]	; 0xfffffee8
    5e9c:	ldr	r1, [fp, #-276]	; 0xfffffeec
    5ea0:	ldr	r2, [fp, #-288]	; 0xfffffee0
    5ea4:	ldr	r3, [fp, #-284]	; 0xfffffee4
    5ea8:	subs	r0, r0, r2
    5eac:	sbcs	r1, r1, r3
    5eb0:	mov	r2, #0
    5eb4:	movwlt	r2, #1
    5eb8:	and	r2, r2, #1
    5ebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    5ec0:	str	r2, [r3]
    5ec4:	str	r0, [sp, #76]	; 0x4c
    5ec8:	str	r1, [sp, #72]	; 0x48
    5ecc:	b	5fe0 <eval_boolean+0xd58>
    5ed0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5ed4:	ldr	r0, [r0, #16]
    5ed8:	ldr	r0, [r0, #4]
    5edc:	cmp	r0, #3
    5ee0:	bne	5fbc <eval_boolean+0xd34>
    5ee4:	ldr	r0, [fp, #-16]
    5ee8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5eec:	ldr	r1, [r1, #16]
    5ef0:	sub	r2, fp, #292	; 0x124
    5ef4:	sub	r3, fp, #300	; 0x12c
    5ef8:	sub	ip, fp, #308	; 0x134
    5efc:	str	ip, [sp]
    5f00:	bl	ac2c <eval_string>
    5f04:	cmp	r0, #0
    5f08:	beq	5f18 <eval_boolean+0xc90>
    5f0c:	mvn	r0, #0
    5f10:	str	r0, [fp, #-12]
    5f14:	b	6f9c <eval_boolean+0x1d14>
    5f18:	ldr	r0, [fp, #-16]
    5f1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    5f20:	ldr	r1, [r1, #20]
    5f24:	sub	r2, fp, #296	; 0x128
    5f28:	sub	r3, fp, #304	; 0x130
    5f2c:	sub	ip, fp, #312	; 0x138
    5f30:	str	ip, [sp]
    5f34:	bl	ac2c <eval_string>
    5f38:	cmp	r0, #0
    5f3c:	beq	5f54 <eval_boolean+0xccc>
    5f40:	ldr	r0, [fp, #-308]	; 0xfffffecc
    5f44:	bl	0 <free>
    5f48:	mvn	r0, #0
    5f4c:	str	r0, [fp, #-12]
    5f50:	b	6f9c <eval_boolean+0x1d14>
    5f54:	ldr	r0, [fp, #-292]	; 0xfffffedc
    5f58:	ldr	r1, [fp, #-300]	; 0xfffffed4
    5f5c:	ldr	r2, [fp, #-308]	; 0xfffffecc
    5f60:	ldr	r3, [fp, #-296]	; 0xfffffed8
    5f64:	ldr	ip, [fp, #-304]	; 0xfffffed0
    5f68:	ldr	lr, [fp, #-312]	; 0xfffffec8
    5f6c:	str	ip, [sp]
    5f70:	str	lr, [sp, #4]
    5f74:	bl	e388 <compare_strings>
    5f78:	cmp	r0, #0
    5f7c:	movw	r0, #0
    5f80:	movlt	r0, #1
    5f84:	and	r0, r0, #1
    5f88:	ldr	r1, [fp, #-24]	; 0xffffffe8
    5f8c:	str	r0, [r1]
    5f90:	ldr	r0, [fp, #-300]	; 0xfffffed4
    5f94:	cmp	r0, #0
    5f98:	ble	5fa4 <eval_boolean+0xd1c>
    5f9c:	ldr	r0, [fp, #-308]	; 0xfffffecc
    5fa0:	bl	0 <free>
    5fa4:	ldr	r0, [fp, #-304]	; 0xfffffed0
    5fa8:	cmp	r0, #0
    5fac:	ble	5fb8 <eval_boolean+0xd30>
    5fb0:	ldr	r0, [fp, #-312]	; 0xfffffec8
    5fb4:	bl	0 <free>
    5fb8:	b	5fdc <eval_boolean+0xd54>
    5fbc:	movw	r0, #0
    5fc0:	movt	r0, #0
    5fc4:	movw	r1, #0
    5fc8:	movt	r1, #0
    5fcc:	movw	r2, #916	; 0x394
    5fd0:	movw	r3, #0
    5fd4:	movt	r3, #0
    5fd8:	bl	0 <__assert_fail>
    5fdc:	b	5fe0 <eval_boolean+0xd58>
    5fe0:	b	5fe4 <eval_boolean+0xd5c>
    5fe4:	b	6f94 <eval_boolean+0x1d0c>
    5fe8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    5fec:	ldr	r0, [r0, #16]
    5ff0:	ldr	r0, [r0, #4]
    5ff4:	cmp	r0, #2
    5ff8:	beq	6010 <eval_boolean+0xd88>
    5ffc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6000:	ldr	r0, [r0, #20]
    6004:	ldr	r0, [r0, #4]
    6008:	cmp	r0, #2
    600c:	bne	6088 <eval_boolean+0xe00>
    6010:	ldr	r0, [fp, #-16]
    6014:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6018:	ldr	r1, [r1, #16]
    601c:	sub	r2, fp, #320	; 0x140
    6020:	bl	96c8 <eval_float>
    6024:	cmp	r0, #0
    6028:	beq	6038 <eval_boolean+0xdb0>
    602c:	mvn	r0, #0
    6030:	str	r0, [fp, #-12]
    6034:	b	6f9c <eval_boolean+0x1d14>
    6038:	ldr	r0, [fp, #-16]
    603c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6040:	ldr	r1, [r1, #20]
    6044:	sub	r2, fp, #328	; 0x148
    6048:	bl	96c8 <eval_float>
    604c:	cmp	r0, #0
    6050:	beq	6060 <eval_boolean+0xdd8>
    6054:	mvn	r0, #0
    6058:	str	r0, [fp, #-12]
    605c:	b	6f9c <eval_boolean+0x1d14>
    6060:	vldr	d16, [fp, #-320]	; 0xfffffec0
    6064:	vldr	d17, [fp, #-328]	; 0xfffffeb8
    6068:	vcmpe.f64	d16, d17
    606c:	vmrs	APSR_nzcv, fpscr
    6070:	movw	r0, #0
    6074:	movls	r0, #1
    6078:	and	r0, r0, #1
    607c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6080:	str	r0, [r1]
    6084:	b	6238 <eval_boolean+0xfb0>
    6088:	ldr	r0, [fp, #-28]	; 0xffffffe4
    608c:	ldr	r0, [r0, #16]
    6090:	ldr	r0, [r0, #4]
    6094:	cmp	r0, #1
    6098:	bne	6124 <eval_boolean+0xe9c>
    609c:	ldr	r0, [fp, #-16]
    60a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    60a4:	ldr	r1, [r1, #16]
    60a8:	sub	r2, fp, #336	; 0x150
    60ac:	bl	70a8 <eval_integer>
    60b0:	cmp	r0, #0
    60b4:	beq	60c4 <eval_boolean+0xe3c>
    60b8:	mvn	r0, #0
    60bc:	str	r0, [fp, #-12]
    60c0:	b	6f9c <eval_boolean+0x1d14>
    60c4:	ldr	r0, [fp, #-16]
    60c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    60cc:	ldr	r1, [r1, #20]
    60d0:	sub	r2, fp, #344	; 0x158
    60d4:	bl	70a8 <eval_integer>
    60d8:	cmp	r0, #0
    60dc:	beq	60ec <eval_boolean+0xe64>
    60e0:	mvn	r0, #0
    60e4:	str	r0, [fp, #-12]
    60e8:	b	6f9c <eval_boolean+0x1d14>
    60ec:	ldr	r0, [fp, #-336]	; 0xfffffeb0
    60f0:	ldr	r1, [fp, #-332]	; 0xfffffeb4
    60f4:	ldr	r2, [fp, #-344]	; 0xfffffea8
    60f8:	ldr	r3, [fp, #-340]	; 0xfffffeac
    60fc:	subs	r0, r2, r0
    6100:	sbcs	r1, r3, r1
    6104:	mov	r2, #0
    6108:	movwge	r2, #1
    610c:	and	r2, r2, #1
    6110:	ldr	r3, [fp, #-24]	; 0xffffffe8
    6114:	str	r2, [r3]
    6118:	str	r0, [sp, #68]	; 0x44
    611c:	str	r1, [sp, #64]	; 0x40
    6120:	b	6234 <eval_boolean+0xfac>
    6124:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6128:	ldr	r0, [r0, #16]
    612c:	ldr	r0, [r0, #4]
    6130:	cmp	r0, #3
    6134:	bne	6210 <eval_boolean+0xf88>
    6138:	ldr	r0, [fp, #-16]
    613c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6140:	ldr	r1, [r1, #16]
    6144:	sub	r2, fp, #348	; 0x15c
    6148:	sub	r3, fp, #356	; 0x164
    614c:	sub	ip, fp, #364	; 0x16c
    6150:	str	ip, [sp]
    6154:	bl	ac2c <eval_string>
    6158:	cmp	r0, #0
    615c:	beq	616c <eval_boolean+0xee4>
    6160:	mvn	r0, #0
    6164:	str	r0, [fp, #-12]
    6168:	b	6f9c <eval_boolean+0x1d14>
    616c:	ldr	r0, [fp, #-16]
    6170:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6174:	ldr	r1, [r1, #20]
    6178:	sub	r2, fp, #352	; 0x160
    617c:	sub	r3, fp, #360	; 0x168
    6180:	sub	ip, fp, #368	; 0x170
    6184:	str	ip, [sp]
    6188:	bl	ac2c <eval_string>
    618c:	cmp	r0, #0
    6190:	beq	61a8 <eval_boolean+0xf20>
    6194:	ldr	r0, [fp, #-364]	; 0xfffffe94
    6198:	bl	0 <free>
    619c:	mvn	r0, #0
    61a0:	str	r0, [fp, #-12]
    61a4:	b	6f9c <eval_boolean+0x1d14>
    61a8:	ldr	r0, [fp, #-348]	; 0xfffffea4
    61ac:	ldr	r1, [fp, #-356]	; 0xfffffe9c
    61b0:	ldr	r2, [fp, #-364]	; 0xfffffe94
    61b4:	ldr	r3, [fp, #-352]	; 0xfffffea0
    61b8:	ldr	ip, [fp, #-360]	; 0xfffffe98
    61bc:	ldr	lr, [fp, #-368]	; 0xfffffe90
    61c0:	str	ip, [sp]
    61c4:	str	lr, [sp, #4]
    61c8:	bl	e388 <compare_strings>
    61cc:	cmp	r0, #0
    61d0:	movw	r0, #0
    61d4:	movle	r0, #1
    61d8:	and	r0, r0, #1
    61dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    61e0:	str	r0, [r1]
    61e4:	ldr	r0, [fp, #-356]	; 0xfffffe9c
    61e8:	cmp	r0, #0
    61ec:	ble	61f8 <eval_boolean+0xf70>
    61f0:	ldr	r0, [fp, #-364]	; 0xfffffe94
    61f4:	bl	0 <free>
    61f8:	ldr	r0, [fp, #-360]	; 0xfffffe98
    61fc:	cmp	r0, #0
    6200:	ble	620c <eval_boolean+0xf84>
    6204:	ldr	r0, [fp, #-368]	; 0xfffffe90
    6208:	bl	0 <free>
    620c:	b	6230 <eval_boolean+0xfa8>
    6210:	movw	r0, #0
    6214:	movt	r0, #0
    6218:	movw	r1, #0
    621c:	movt	r1, #0
    6220:	movw	r2, #978	; 0x3d2
    6224:	movw	r3, #0
    6228:	movt	r3, #0
    622c:	bl	0 <__assert_fail>
    6230:	b	6234 <eval_boolean+0xfac>
    6234:	b	6238 <eval_boolean+0xfb0>
    6238:	b	6f94 <eval_boolean+0x1d0c>
    623c:	ldr	r0, [fp, #-16]
    6240:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6244:	ldr	r1, [r1, #16]
    6248:	ldr	r2, [fp, #-24]	; 0xffffffe8
    624c:	bl	5288 <eval_boolean>
    6250:	cmp	r0, #0
    6254:	beq	6264 <eval_boolean+0xfdc>
    6258:	mvn	r0, #0
    625c:	str	r0, [fp, #-12]
    6260:	b	6f9c <eval_boolean+0x1d14>
    6264:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6268:	ldr	r0, [r0]
    626c:	cmp	r0, #0
    6270:	movw	r0, #0
    6274:	movne	r0, #1
    6278:	mvn	r1, #0
    627c:	eor	r0, r0, r1
    6280:	and	r0, r0, #1
    6284:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6288:	str	r0, [r1]
    628c:	b	6f94 <eval_boolean+0x1d0c>
    6290:	ldr	r0, [fp, #-16]
    6294:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6298:	ldr	r1, [r1, #16]
    629c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    62a0:	bl	5288 <eval_boolean>
    62a4:	cmp	r0, #0
    62a8:	beq	62b8 <eval_boolean+0x1030>
    62ac:	mvn	r0, #0
    62b0:	str	r0, [fp, #-12]
    62b4:	b	6f9c <eval_boolean+0x1d14>
    62b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    62bc:	ldr	r0, [r0]
    62c0:	cmp	r0, #0
    62c4:	bne	62d4 <eval_boolean+0x104c>
    62c8:	movw	r0, #0
    62cc:	str	r0, [fp, #-12]
    62d0:	b	6f9c <eval_boolean+0x1d14>
    62d4:	ldr	r0, [fp, #-16]
    62d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    62dc:	ldr	r1, [r1, #20]
    62e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    62e4:	bl	5288 <eval_boolean>
    62e8:	cmp	r0, #0
    62ec:	beq	62fc <eval_boolean+0x1074>
    62f0:	mvn	r0, #0
    62f4:	str	r0, [fp, #-12]
    62f8:	b	6f9c <eval_boolean+0x1d14>
    62fc:	b	6f94 <eval_boolean+0x1d0c>
    6300:	ldr	r0, [fp, #-16]
    6304:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6308:	ldr	r1, [r1, #16]
    630c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6310:	bl	5288 <eval_boolean>
    6314:	cmp	r0, #0
    6318:	beq	6328 <eval_boolean+0x10a0>
    631c:	mvn	r0, #0
    6320:	str	r0, [fp, #-12]
    6324:	b	6f9c <eval_boolean+0x1d14>
    6328:	ldr	r0, [fp, #-24]	; 0xffffffe8
    632c:	ldr	r0, [r0]
    6330:	cmp	r0, #0
    6334:	beq	6344 <eval_boolean+0x10bc>
    6338:	movw	r0, #0
    633c:	str	r0, [fp, #-12]
    6340:	b	6f9c <eval_boolean+0x1d14>
    6344:	ldr	r0, [fp, #-16]
    6348:	ldr	r1, [fp, #-28]	; 0xffffffe4
    634c:	ldr	r1, [r1, #20]
    6350:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6354:	bl	5288 <eval_boolean>
    6358:	cmp	r0, #0
    635c:	beq	636c <eval_boolean+0x10e4>
    6360:	mvn	r0, #0
    6364:	str	r0, [fp, #-12]
    6368:	b	6f9c <eval_boolean+0x1d14>
    636c:	b	6f94 <eval_boolean+0x1d0c>
    6370:	ldr	r0, [fp, #-16]
    6374:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6378:	ldr	r1, [r1, #16]
    637c:	sub	r2, fp, #376	; 0x178
    6380:	bl	96c8 <eval_float>
    6384:	cmp	r0, #0
    6388:	beq	6398 <eval_boolean+0x1110>
    638c:	mvn	r0, #0
    6390:	str	r0, [fp, #-12]
    6394:	b	6f9c <eval_boolean+0x1d14>
    6398:	vldr	d0, [fp, #-376]	; 0xfffffe88
    639c:	bl	0 <coda_isNaN>
    63a0:	ldr	lr, [fp, #-24]	; 0xffffffe8
    63a4:	str	r0, [lr]
    63a8:	b	6f94 <eval_boolean+0x1d0c>
    63ac:	ldr	r0, [fp, #-16]
    63b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    63b4:	ldr	r1, [r1, #16]
    63b8:	sub	r2, fp, #384	; 0x180
    63bc:	bl	96c8 <eval_float>
    63c0:	cmp	r0, #0
    63c4:	beq	63d4 <eval_boolean+0x114c>
    63c8:	mvn	r0, #0
    63cc:	str	r0, [fp, #-12]
    63d0:	b	6f9c <eval_boolean+0x1d14>
    63d4:	vldr	d0, [fp, #-384]	; 0xfffffe80
    63d8:	bl	0 <coda_isInf>
    63dc:	ldr	lr, [fp, #-24]	; 0xffffffe8
    63e0:	str	r0, [lr]
    63e4:	b	6f94 <eval_boolean+0x1d0c>
    63e8:	ldr	r0, [fp, #-16]
    63ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    63f0:	ldr	r1, [r1, #16]
    63f4:	sub	r2, fp, #392	; 0x188
    63f8:	bl	96c8 <eval_float>
    63fc:	cmp	r0, #0
    6400:	beq	6410 <eval_boolean+0x1188>
    6404:	mvn	r0, #0
    6408:	str	r0, [fp, #-12]
    640c:	b	6f9c <eval_boolean+0x1d14>
    6410:	vldr	d0, [fp, #-392]	; 0xfffffe78
    6414:	bl	0 <coda_isPlusInf>
    6418:	ldr	lr, [fp, #-24]	; 0xffffffe8
    641c:	str	r0, [lr]
    6420:	b	6f94 <eval_boolean+0x1d0c>
    6424:	ldr	r0, [fp, #-16]
    6428:	ldr	r1, [fp, #-28]	; 0xffffffe4
    642c:	ldr	r1, [r1, #16]
    6430:	sub	r2, fp, #400	; 0x190
    6434:	bl	96c8 <eval_float>
    6438:	cmp	r0, #0
    643c:	beq	644c <eval_boolean+0x11c4>
    6440:	mvn	r0, #0
    6444:	str	r0, [fp, #-12]
    6448:	b	6f9c <eval_boolean+0x1d14>
    644c:	vldr	d0, [fp, #-400]	; 0xfffffe70
    6450:	bl	0 <coda_isMinInf>
    6454:	ldr	lr, [fp, #-24]	; 0xffffffe8
    6458:	str	r0, [lr]
    645c:	b	6f94 <eval_boolean+0x1d0c>
    6460:	ldr	r0, [fp, #-16]
    6464:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6468:	ldr	r1, [r1, #16]
    646c:	sub	r2, fp, #616	; 0x268
    6470:	sub	r3, fp, #620	; 0x26c
    6474:	sub	ip, fp, #624	; 0x270
    6478:	str	ip, [sp]
    647c:	bl	ac2c <eval_string>
    6480:	cmp	r0, #0
    6484:	beq	6494 <eval_boolean+0x120c>
    6488:	mvn	r0, #0
    648c:	str	r0, [fp, #-12]
    6490:	b	6f9c <eval_boolean+0x1d14>
    6494:	ldr	r0, [fp, #-16]
    6498:	ldr	r1, [fp, #-28]	; 0xffffffe4
    649c:	ldr	r1, [r1, #20]
    64a0:	sub	r2, fp, #604	; 0x25c
    64a4:	sub	r3, fp, #608	; 0x260
    64a8:	sub	ip, fp, #612	; 0x264
    64ac:	str	ip, [sp]
    64b0:	bl	ac2c <eval_string>
    64b4:	cmp	r0, #0
    64b8:	beq	64e0 <eval_boolean+0x1258>
    64bc:	ldr	r0, [fp, #-624]	; 0xfffffd90
    64c0:	movw	r1, #0
    64c4:	cmp	r0, r1
    64c8:	beq	64d4 <eval_boolean+0x124c>
    64cc:	ldr	r0, [fp, #-624]	; 0xfffffd90
    64d0:	bl	0 <free>
    64d4:	mvn	r0, #0
    64d8:	str	r0, [fp, #-12]
    64dc:	b	6f9c <eval_boolean+0x1d14>
    64e0:	ldr	r0, [fp, #-620]	; 0xfffffd94
    64e4:	cmp	r0, #0
    64e8:	ble	6534 <eval_boolean+0x12ac>
    64ec:	ldr	r0, [fp, #-624]	; 0xfffffd90
    64f0:	ldr	r1, [fp, #-616]	; 0xfffffd98
    64f4:	ldr	r2, [fp, #-620]	; 0xfffffd94
    64f8:	add	r1, r1, r2
    64fc:	add	r0, r0, r1
    6500:	movw	r1, #0
    6504:	strb	r1, [r0]
    6508:	ldr	r0, [fp, #-624]	; 0xfffffd90
    650c:	ldr	r1, [fp, #-616]	; 0xfffffd98
    6510:	add	r0, r0, r1
    6514:	movw	r1, #36	; 0x24
    6518:	sub	r2, fp, #596	; 0x254
    651c:	sub	r3, fp, #600	; 0x258
    6520:	movw	ip, #0
    6524:	str	ip, [sp]
    6528:	bl	0 <coda_pcre_compile>
    652c:	str	r0, [fp, #-628]	; 0xfffffd8c
    6530:	b	6558 <eval_boolean+0x12d0>
    6534:	movw	r0, #0
    6538:	movt	r0, #0
    653c:	movw	r1, #36	; 0x24
    6540:	sub	r2, fp, #596	; 0x254
    6544:	sub	r3, fp, #600	; 0x258
    6548:	movw	ip, #0
    654c:	str	ip, [sp]
    6550:	bl	0 <coda_pcre_compile>
    6554:	str	r0, [fp, #-628]	; 0xfffffd8c
    6558:	ldr	r0, [fp, #-624]	; 0xfffffd90
    655c:	movw	r1, #0
    6560:	cmp	r0, r1
    6564:	beq	6570 <eval_boolean+0x12e8>
    6568:	ldr	r0, [fp, #-624]	; 0xfffffd90
    656c:	bl	0 <free>
    6570:	ldr	r0, [fp, #-628]	; 0xfffffd8c
    6574:	movw	r1, #0
    6578:	cmp	r0, r1
    657c:	bne	65bc <eval_boolean+0x1334>
    6580:	ldr	r2, [fp, #-596]	; 0xfffffdac
    6584:	ldr	r3, [fp, #-600]	; 0xfffffda8
    6588:	mvn	r0, #400	; 0x190
    658c:	movw	r1, #0
    6590:	movt	r1, #0
    6594:	bl	0 <coda_set_error>
    6598:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    659c:	movw	r1, #0
    65a0:	cmp	r0, r1
    65a4:	beq	65b0 <eval_boolean+0x1328>
    65a8:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    65ac:	bl	0 <free>
    65b0:	mvn	r0, #0
    65b4:	str	r0, [fp, #-12]
    65b8:	b	6f9c <eval_boolean+0x1d14>
    65bc:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    65c0:	movw	r1, #0
    65c4:	cmp	r0, r1
    65c8:	bne	6638 <eval_boolean+0x13b0>
    65cc:	movw	r0, #0
    65d0:	movt	r0, #0
    65d4:	bl	0 <strdup>
    65d8:	str	r0, [fp, #-612]	; 0xfffffd9c
    65dc:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    65e0:	movw	lr, #0
    65e4:	cmp	r0, lr
    65e8:	bne	6634 <eval_boolean+0x13ac>
    65ec:	mvn	r0, #0
    65f0:	movw	r1, #0
    65f4:	movt	r1, #0
    65f8:	movw	r2, #0
    65fc:	movt	r2, #0
    6600:	movw	r3, #1120	; 0x460
    6604:	bl	0 <coda_set_error>
    6608:	movw	r0, #0
    660c:	movt	r0, #0
    6610:	ldr	r0, [r0]
    6614:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    6618:	str	r0, [sp, #60]	; 0x3c
    661c:	mov	r0, r1
    6620:	ldr	r1, [sp, #60]	; 0x3c
    6624:	blx	r1
    6628:	mvn	r0, #0
    662c:	str	r0, [fp, #-12]
    6630:	b	6f9c <eval_boolean+0x1d14>
    6634:	b	6638 <eval_boolean+0x13b0>
    6638:	sub	r0, fp, #592	; 0x250
    663c:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    6640:	ldr	r2, [fp, #-612]	; 0xfffffd9c
    6644:	ldr	r3, [fp, #-604]	; 0xfffffda4
    6648:	add	r2, r2, r3
    664c:	ldr	r3, [fp, #-608]	; 0xfffffda0
    6650:	str	r0, [sp, #56]	; 0x38
    6654:	mov	r0, r1
    6658:	movw	r1, #0
    665c:	str	r1, [sp, #52]	; 0x34
    6660:	ldr	ip, [sp, #52]	; 0x34
    6664:	str	ip, [sp]
    6668:	str	ip, [sp, #4]
    666c:	ldr	lr, [sp, #56]	; 0x38
    6670:	str	lr, [sp, #8]
    6674:	movw	r4, #48	; 0x30
    6678:	str	r4, [sp, #12]
    667c:	bl	0 <coda_pcre_exec>
    6680:	str	r0, [fp, #-632]	; 0xfffffd88
    6684:	ldr	r0, [fp, #-612]	; 0xfffffd9c
    6688:	bl	0 <free>
    668c:	movw	r0, #0
    6690:	movt	r0, #0
    6694:	ldr	r0, [r0]
    6698:	ldr	r1, [fp, #-628]	; 0xfffffd8c
    669c:	str	r0, [sp, #48]	; 0x30
    66a0:	mov	r0, r1
    66a4:	ldr	r1, [sp, #48]	; 0x30
    66a8:	blx	r1
    66ac:	ldr	r0, [fp, #-632]	; 0xfffffd88
    66b0:	cmp	r0, #0
    66b4:	bge	66e4 <eval_boolean+0x145c>
    66b8:	ldr	r0, [fp, #-632]	; 0xfffffd88
    66bc:	cmn	r0, #1
    66c0:	beq	66e4 <eval_boolean+0x145c>
    66c4:	ldr	r2, [fp, #-632]	; 0xfffffd88
    66c8:	mvn	r0, #400	; 0x190
    66cc:	movw	r1, #0
    66d0:	movt	r1, #0
    66d4:	bl	0 <coda_set_error>
    66d8:	mvn	r0, #0
    66dc:	str	r0, [fp, #-12]
    66e0:	b	6f9c <eval_boolean+0x1d14>
    66e4:	ldr	r0, [fp, #-632]	; 0xfffffd88
    66e8:	cmp	r0, #0
    66ec:	bne	670c <eval_boolean+0x1484>
    66f0:	mvn	r0, #400	; 0x190
    66f4:	movw	r1, #0
    66f8:	movt	r1, #0
    66fc:	bl	0 <coda_set_error>
    6700:	mvn	r0, #0
    6704:	str	r0, [fp, #-12]
    6708:	b	6f9c <eval_boolean+0x1d14>
    670c:	ldr	r0, [fp, #-632]	; 0xfffffd88
    6710:	cmp	r0, #0
    6714:	movw	r0, #0
    6718:	movgt	r0, #1
    671c:	and	r0, r0, #1
    6720:	ldr	r1, [fp, #-24]	; 0xffffffe8
    6724:	str	r0, [r1]
    6728:	b	6f94 <eval_boolean+0x1d0c>
    672c:	ldr	r0, [fp, #-16]
    6730:	ldr	r0, [r0]
    6734:	movw	r1, #0
    6738:	cmp	r0, r1
    673c:	beq	6744 <eval_boolean+0x14bc>
    6740:	b	6764 <eval_boolean+0x14dc>
    6744:	movw	r0, #0
    6748:	movt	r0, #0
    674c:	movw	r1, #0
    6750:	movt	r1, #0
    6754:	movw	r2, #1148	; 0x47c
    6758:	movw	r3, #0
    675c:	movt	r3, #0
    6760:	bl	0 <__assert_fail>
    6764:	ldr	r0, [fp, #-16]
    6768:	add	r0, r0, #8
    676c:	sub	r1, fp, #1152	; 0x480
    6770:	str	r0, [sp, #44]	; 0x2c
    6774:	mov	r0, r1
    6778:	ldr	r1, [sp, #44]	; 0x2c
    677c:	movw	r2, #520	; 0x208
    6780:	bl	0 <memcpy>
    6784:	ldr	r0, [fp, #-16]
    6788:	ldr	r1, [fp, #-28]	; 0xffffffe4
    678c:	ldr	r1, [r1, #16]
    6790:	bl	d2e4 <eval_cursor>
    6794:	cmp	r0, #0
    6798:	beq	681c <eval_boolean+0x1594>
    679c:	ldr	r0, [pc, #2052]	; 6fa8 <eval_boolean+0x1d20>
    67a0:	ldr	r0, [pc, r0]
    67a4:	str	r0, [sp, #40]	; 0x28
    67a8:	bl	0 <__aeabi_read_tp>
    67ac:	ldr	ip, [sp, #40]	; 0x28
    67b0:	ldr	r0, [r0, ip]
    67b4:	mvn	ip, #400	; 0x190
    67b8:	cmp	r0, ip
    67bc:	beq	6810 <eval_boolean+0x1588>
    67c0:	ldr	r0, [pc, #2020]	; 6fac <eval_boolean+0x1d24>
    67c4:	ldr	r0, [pc, r0]
    67c8:	str	r0, [sp, #36]	; 0x24
    67cc:	bl	0 <__aeabi_read_tp>
    67d0:	mov	ip, #0
    67d4:	ldr	lr, [sp, #36]	; 0x24
    67d8:	str	ip, [r0, lr]
    67dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    67e0:	movw	ip, #0
    67e4:	str	ip, [r0]
    67e8:	ldr	r0, [fp, #-16]
    67ec:	add	r0, r0, #8
    67f0:	sub	lr, fp, #1152	; 0x480
    67f4:	mov	r1, lr
    67f8:	movw	r2, #520	; 0x208
    67fc:	str	ip, [sp, #32]
    6800:	bl	0 <memcpy>
    6804:	ldr	r0, [sp, #32]
    6808:	str	r0, [fp, #-12]
    680c:	b	6f9c <eval_boolean+0x1d14>
    6810:	mvn	r0, #0
    6814:	str	r0, [fp, #-12]
    6818:	b	6f9c <eval_boolean+0x1d14>
    681c:	ldr	r0, [fp, #-16]
    6820:	add	r0, r0, #8
    6824:	sub	lr, fp, #1024	; 0x400
    6828:	sub	r1, lr, #132	; 0x84
    682c:	bl	0 <coda_cursor_get_type_class>
    6830:	cmp	r0, #0
    6834:	beq	6844 <eval_boolean+0x15bc>
    6838:	mvn	r0, #0
    683c:	str	r0, [fp, #-12]
    6840:	b	6f9c <eval_boolean+0x1d14>
    6844:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    6848:	cmp	r0, #6
    684c:	bne	68bc <eval_boolean+0x1634>
    6850:	ldr	r0, [fp, #-16]
    6854:	add	r0, r0, #8
    6858:	sub	lr, fp, #1024	; 0x400
    685c:	sub	r1, lr, #136	; 0x88
    6860:	bl	0 <coda_cursor_get_special_type>
    6864:	cmp	r0, #0
    6868:	beq	6878 <eval_boolean+0x15f0>
    686c:	mvn	r0, #0
    6870:	str	r0, [fp, #-12]
    6874:	b	6f9c <eval_boolean+0x1d14>
    6878:	ldr	r0, [fp, #-1160]	; 0xfffffb78
    687c:	cmp	r0, #0
    6880:	bne	68b8 <eval_boolean+0x1630>
    6884:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6888:	movw	r1, #0
    688c:	str	r1, [r0]
    6890:	ldr	r0, [fp, #-16]
    6894:	add	r0, r0, #8
    6898:	sub	r2, fp, #1152	; 0x480
    689c:	str	r1, [sp, #28]
    68a0:	mov	r1, r2
    68a4:	movw	r2, #520	; 0x208
    68a8:	bl	0 <memcpy>
    68ac:	ldr	r0, [sp, #28]
    68b0:	str	r0, [fp, #-12]
    68b4:	b	6f9c <eval_boolean+0x1d14>
    68b8:	b	68bc <eval_boolean+0x1634>
    68bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    68c0:	movw	r1, #1
    68c4:	str	r1, [r0]
    68c8:	ldr	r0, [fp, #-16]
    68cc:	add	r0, r0, #8
    68d0:	sub	r1, fp, #1152	; 0x480
    68d4:	movw	r2, #520	; 0x208
    68d8:	bl	0 <memcpy>
    68dc:	b	6f94 <eval_boolean+0x1d0c>
    68e0:	ldr	r0, [fp, #-16]
    68e4:	ldr	r0, [r0]
    68e8:	movw	r1, #0
    68ec:	cmp	r0, r1
    68f0:	beq	68f8 <eval_boolean+0x1670>
    68f4:	b	6918 <eval_boolean+0x1690>
    68f8:	movw	r0, #0
    68fc:	movt	r0, #0
    6900:	movw	r1, #0
    6904:	movt	r1, #0
    6908:	movw	r2, #1190	; 0x4a6
    690c:	movw	r3, #0
    6910:	movt	r3, #0
    6914:	bl	0 <__assert_fail>
    6918:	ldr	r0, [fp, #-16]
    691c:	add	r0, r0, #8
    6920:	add	r1, sp, #1200	; 0x4b0
    6924:	str	r0, [sp, #24]
    6928:	mov	r0, r1
    692c:	ldr	r1, [sp, #24]
    6930:	movw	r2, #520	; 0x208
    6934:	bl	0 <memcpy>
    6938:	ldr	r0, [fp, #-16]
    693c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6940:	ldr	r1, [r1, #16]
    6944:	bl	d2e4 <eval_cursor>
    6948:	cmp	r0, #0
    694c:	beq	695c <eval_boolean+0x16d4>
    6950:	mvn	r0, #0
    6954:	str	r0, [fp, #-12]
    6958:	b	6f9c <eval_boolean+0x1d14>
    695c:	ldr	r0, [fp, #-16]
    6960:	add	r0, r0, #8
    6964:	add	lr, sp, #1024	; 0x400
    6968:	add	r1, lr, #172	; 0xac
    696c:	bl	0 <coda_cursor_get_num_elements>
    6970:	cmp	r0, #0
    6974:	beq	6984 <eval_boolean+0x16fc>
    6978:	mvn	r0, #0
    697c:	str	r0, [fp, #-12]
    6980:	b	6f9c <eval_boolean+0x1d14>
    6984:	ldr	r0, [sp, #1196]	; 0x4ac
    6988:	cmp	r0, #0
    698c:	ble	6a64 <eval_boolean+0x17dc>
    6990:	ldr	r0, [fp, #-16]
    6994:	add	r0, r0, #8
    6998:	bl	0 <coda_cursor_goto_first_array_element>
    699c:	cmp	r0, #0
    69a0:	beq	69b0 <eval_boolean+0x1728>
    69a4:	mvn	r0, #0
    69a8:	str	r0, [fp, #-12]
    69ac:	b	6f9c <eval_boolean+0x1d14>
    69b0:	movw	r0, #0
    69b4:	str	r0, [sp, #1192]	; 0x4a8
    69b8:	ldr	r0, [sp, #1192]	; 0x4a8
    69bc:	ldr	r1, [sp, #1196]	; 0x4ac
    69c0:	cmp	r0, r1
    69c4:	bge	6a60 <eval_boolean+0x17d8>
    69c8:	ldr	r0, [fp, #-16]
    69cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    69d0:	ldr	r1, [r1, #20]
    69d4:	add	lr, sp, #1024	; 0x400
    69d8:	add	r2, lr, #164	; 0xa4
    69dc:	bl	5288 <eval_boolean>
    69e0:	cmp	r0, #0
    69e4:	beq	69f4 <eval_boolean+0x176c>
    69e8:	mvn	r0, #0
    69ec:	str	r0, [fp, #-12]
    69f0:	b	6f9c <eval_boolean+0x1d14>
    69f4:	ldr	r0, [sp, #1188]	; 0x4a4
    69f8:	cmp	r0, #0
    69fc:	bne	6a14 <eval_boolean+0x178c>
    6a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6a04:	movw	r1, #0
    6a08:	str	r1, [r0]
    6a0c:	str	r1, [fp, #-12]
    6a10:	b	6f9c <eval_boolean+0x1d14>
    6a14:	ldr	r0, [sp, #1192]	; 0x4a8
    6a18:	ldr	r1, [sp, #1196]	; 0x4ac
    6a1c:	sub	r1, r1, #1
    6a20:	cmp	r0, r1
    6a24:	bge	6a4c <eval_boolean+0x17c4>
    6a28:	ldr	r0, [fp, #-16]
    6a2c:	add	r0, r0, #8
    6a30:	bl	0 <coda_cursor_goto_next_array_element>
    6a34:	cmp	r0, #0
    6a38:	beq	6a48 <eval_boolean+0x17c0>
    6a3c:	mvn	r0, #0
    6a40:	str	r0, [fp, #-12]
    6a44:	b	6f9c <eval_boolean+0x1d14>
    6a48:	b	6a4c <eval_boolean+0x17c4>
    6a4c:	b	6a50 <eval_boolean+0x17c8>
    6a50:	ldr	r0, [sp, #1192]	; 0x4a8
    6a54:	add	r0, r0, #1
    6a58:	str	r0, [sp, #1192]	; 0x4a8
    6a5c:	b	69b8 <eval_boolean+0x1730>
    6a60:	b	6a64 <eval_boolean+0x17dc>
    6a64:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6a68:	movw	r1, #1
    6a6c:	str	r1, [r0]
    6a70:	ldr	r0, [fp, #-16]
    6a74:	add	r0, r0, #8
    6a78:	add	r1, sp, #1200	; 0x4b0
    6a7c:	movw	r2, #520	; 0x208
    6a80:	bl	0 <memcpy>
    6a84:	b	6f94 <eval_boolean+0x1d0c>
    6a88:	ldr	r0, [fp, #-16]
    6a8c:	ldr	r0, [r0]
    6a90:	movw	r1, #0
    6a94:	cmp	r0, r1
    6a98:	beq	6aa0 <eval_boolean+0x1818>
    6a9c:	b	6ac0 <eval_boolean+0x1838>
    6aa0:	movw	r0, #0
    6aa4:	movt	r0, #0
    6aa8:	movw	r1, #0
    6aac:	movt	r1, #0
    6ab0:	movw	r2, #1239	; 0x4d7
    6ab4:	movw	r3, #0
    6ab8:	movt	r3, #0
    6abc:	bl	0 <__assert_fail>
    6ac0:	ldr	r0, [fp, #-16]
    6ac4:	add	r0, r0, #8
    6ac8:	add	r1, sp, #664	; 0x298
    6acc:	str	r0, [sp, #20]
    6ad0:	mov	r0, r1
    6ad4:	ldr	r1, [sp, #20]
    6ad8:	movw	r2, #520	; 0x208
    6adc:	bl	0 <memcpy>
    6ae0:	ldr	r0, [fp, #-16]
    6ae4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6ae8:	ldr	r1, [r1, #16]
    6aec:	bl	d2e4 <eval_cursor>
    6af0:	cmp	r0, #0
    6af4:	beq	6b04 <eval_boolean+0x187c>
    6af8:	mvn	r0, #0
    6afc:	str	r0, [fp, #-12]
    6b00:	b	6f9c <eval_boolean+0x1d14>
    6b04:	ldr	r0, [fp, #-16]
    6b08:	add	r0, r0, #8
    6b0c:	add	r1, sp, #660	; 0x294
    6b10:	bl	0 <coda_cursor_get_num_elements>
    6b14:	cmp	r0, #0
    6b18:	beq	6b28 <eval_boolean+0x18a0>
    6b1c:	mvn	r0, #0
    6b20:	str	r0, [fp, #-12]
    6b24:	b	6f9c <eval_boolean+0x1d14>
    6b28:	ldr	r0, [sp, #660]	; 0x294
    6b2c:	cmp	r0, #0
    6b30:	ble	6c08 <eval_boolean+0x1980>
    6b34:	ldr	r0, [fp, #-16]
    6b38:	add	r0, r0, #8
    6b3c:	bl	0 <coda_cursor_goto_first_array_element>
    6b40:	cmp	r0, #0
    6b44:	beq	6b54 <eval_boolean+0x18cc>
    6b48:	mvn	r0, #0
    6b4c:	str	r0, [fp, #-12]
    6b50:	b	6f9c <eval_boolean+0x1d14>
    6b54:	movw	r0, #0
    6b58:	str	r0, [sp, #656]	; 0x290
    6b5c:	ldr	r0, [sp, #656]	; 0x290
    6b60:	ldr	r1, [sp, #660]	; 0x294
    6b64:	cmp	r0, r1
    6b68:	bge	6c04 <eval_boolean+0x197c>
    6b6c:	ldr	r0, [fp, #-16]
    6b70:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6b74:	ldr	r1, [r1, #20]
    6b78:	add	r2, sp, #652	; 0x28c
    6b7c:	bl	5288 <eval_boolean>
    6b80:	cmp	r0, #0
    6b84:	beq	6b94 <eval_boolean+0x190c>
    6b88:	mvn	r0, #0
    6b8c:	str	r0, [fp, #-12]
    6b90:	b	6f9c <eval_boolean+0x1d14>
    6b94:	ldr	r0, [sp, #652]	; 0x28c
    6b98:	cmp	r0, #0
    6b9c:	beq	6bb8 <eval_boolean+0x1930>
    6ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6ba4:	movw	r1, #1
    6ba8:	str	r1, [r0]
    6bac:	movw	r0, #0
    6bb0:	str	r0, [fp, #-12]
    6bb4:	b	6f9c <eval_boolean+0x1d14>
    6bb8:	ldr	r0, [sp, #656]	; 0x290
    6bbc:	ldr	r1, [sp, #660]	; 0x294
    6bc0:	sub	r1, r1, #1
    6bc4:	cmp	r0, r1
    6bc8:	bge	6bf0 <eval_boolean+0x1968>
    6bcc:	ldr	r0, [fp, #-16]
    6bd0:	add	r0, r0, #8
    6bd4:	bl	0 <coda_cursor_goto_next_array_element>
    6bd8:	cmp	r0, #0
    6bdc:	beq	6bec <eval_boolean+0x1964>
    6be0:	mvn	r0, #0
    6be4:	str	r0, [fp, #-12]
    6be8:	b	6f9c <eval_boolean+0x1d14>
    6bec:	b	6bf0 <eval_boolean+0x1968>
    6bf0:	b	6bf4 <eval_boolean+0x196c>
    6bf4:	ldr	r0, [sp, #656]	; 0x290
    6bf8:	add	r0, r0, #1
    6bfc:	str	r0, [sp, #656]	; 0x290
    6c00:	b	6b5c <eval_boolean+0x18d4>
    6c04:	b	6c08 <eval_boolean+0x1980>
    6c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6c0c:	movw	r1, #0
    6c10:	str	r1, [r0]
    6c14:	ldr	r0, [fp, #-16]
    6c18:	add	r0, r0, #8
    6c1c:	add	r1, sp, #664	; 0x298
    6c20:	movw	r2, #520	; 0x208
    6c24:	bl	0 <memcpy>
    6c28:	b	6f94 <eval_boolean+0x1d0c>
    6c2c:	ldr	r0, [fp, #-16]
    6c30:	ldr	r0, [r0]
    6c34:	movw	r1, #0
    6c38:	cmp	r0, r1
    6c3c:	beq	6c44 <eval_boolean+0x19bc>
    6c40:	b	6c64 <eval_boolean+0x19dc>
    6c44:	movw	r0, #0
    6c48:	movt	r0, #0
    6c4c:	movw	r1, #0
    6c50:	movt	r1, #0
    6c54:	movw	r2, #1288	; 0x508
    6c58:	movw	r3, #0
    6c5c:	movt	r3, #0
    6c60:	bl	0 <__assert_fail>
    6c64:	ldr	r0, [fp, #-16]
    6c68:	ldr	r0, [r0, #560]	; 0x230
    6c6c:	movw	r1, #0
    6c70:	cmp	r0, r1
    6c74:	beq	6c94 <eval_boolean+0x1a0c>
    6c78:	mvn	r0, #400	; 0x190
    6c7c:	movw	r1, #0
    6c80:	movt	r1, #0
    6c84:	bl	0 <coda_set_error>
    6c88:	mvn	r0, #0
    6c8c:	str	r0, [fp, #-12]
    6c90:	b	6f9c <eval_boolean+0x1d14>
    6c94:	ldr	r0, [fp, #-16]
    6c98:	ldr	r0, [r0]
    6c9c:	ldr	r0, [r0]
    6ca0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6ca4:	ldr	r1, [r1, #12]
    6ca8:	add	r2, sp, #648	; 0x288
    6cac:	bl	0 <coda_product_variable_get_size>
    6cb0:	cmp	r0, #0
    6cb4:	beq	6cc4 <eval_boolean+0x1a3c>
    6cb8:	mvn	r0, #0
    6cbc:	str	r0, [fp, #-12]
    6cc0:	b	6f9c <eval_boolean+0x1d14>
    6cc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6cc8:	ldr	r0, [r0, #12]
    6ccc:	ldr	r1, [fp, #-16]
    6cd0:	str	r0, [r1, #560]	; 0x230
    6cd4:	movw	r0, #0
    6cd8:	str	r0, [sp, #644]	; 0x284
    6cdc:	ldr	r0, [sp, #644]	; 0x284
    6ce0:	ldr	r1, [sp, #648]	; 0x288
    6ce4:	cmp	r0, r1
    6ce8:	bge	6d68 <eval_boolean+0x1ae0>
    6cec:	ldr	r0, [sp, #644]	; 0x284
    6cf0:	asr	r1, r0, #31
    6cf4:	ldr	r2, [fp, #-16]
    6cf8:	str	r0, [r2, #552]	; 0x228
    6cfc:	str	r1, [r2, #556]	; 0x22c
    6d00:	ldr	r0, [fp, #-16]
    6d04:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6d08:	ldr	r1, [r1, #16]
    6d0c:	add	r2, sp, #640	; 0x280
    6d10:	bl	5288 <eval_boolean>
    6d14:	cmp	r0, #0
    6d18:	beq	6d28 <eval_boolean+0x1aa0>
    6d1c:	mvn	r0, #0
    6d20:	str	r0, [fp, #-12]
    6d24:	b	6f9c <eval_boolean+0x1d14>
    6d28:	ldr	r0, [sp, #640]	; 0x280
    6d2c:	cmp	r0, #0
    6d30:	beq	6d54 <eval_boolean+0x1acc>
    6d34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d38:	movw	r1, #1
    6d3c:	str	r1, [r0]
    6d40:	ldr	r0, [fp, #-16]
    6d44:	movw	r1, #0
    6d48:	str	r1, [r0, #560]	; 0x230
    6d4c:	str	r1, [fp, #-12]
    6d50:	b	6f9c <eval_boolean+0x1d14>
    6d54:	b	6d58 <eval_boolean+0x1ad0>
    6d58:	ldr	r0, [sp, #644]	; 0x284
    6d5c:	add	r0, r0, #1
    6d60:	str	r0, [sp, #644]	; 0x284
    6d64:	b	6cdc <eval_boolean+0x1a54>
    6d68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    6d6c:	movw	r1, #0
    6d70:	str	r1, [r0]
    6d74:	ldr	r0, [fp, #-16]
    6d78:	str	r1, [r0, #560]	; 0x230
    6d7c:	b	6f94 <eval_boolean+0x1d0c>
    6d80:	ldr	r0, [fp, #-16]
    6d84:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6d88:	ldr	r1, [r1, #16]
    6d8c:	add	r2, sp, #636	; 0x27c
    6d90:	bl	5288 <eval_boolean>
    6d94:	cmp	r0, #0
    6d98:	beq	6da8 <eval_boolean+0x1b20>
    6d9c:	mvn	r0, #0
    6da0:	str	r0, [fp, #-12]
    6da4:	b	6f9c <eval_boolean+0x1d14>
    6da8:	ldr	r0, [sp, #636]	; 0x27c
    6dac:	cmp	r0, #0
    6db0:	beq	6de0 <eval_boolean+0x1b58>
    6db4:	ldr	r0, [fp, #-16]
    6db8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6dbc:	ldr	r1, [r1, #20]
    6dc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6dc4:	bl	5288 <eval_boolean>
    6dc8:	cmp	r0, #0
    6dcc:	beq	6ddc <eval_boolean+0x1b54>
    6dd0:	mvn	r0, #0
    6dd4:	str	r0, [fp, #-12]
    6dd8:	b	6f9c <eval_boolean+0x1d14>
    6ddc:	b	6e0c <eval_boolean+0x1b84>
    6de0:	ldr	r0, [fp, #-16]
    6de4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6de8:	ldr	r1, [r1, #24]
    6dec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6df0:	bl	5288 <eval_boolean>
    6df4:	cmp	r0, #0
    6df8:	beq	6e08 <eval_boolean+0x1b80>
    6dfc:	mvn	r0, #0
    6e00:	str	r0, [fp, #-12]
    6e04:	b	6f9c <eval_boolean+0x1d14>
    6e08:	b	6e0c <eval_boolean+0x1b84>
    6e0c:	b	6f94 <eval_boolean+0x1d0c>
    6e10:	ldr	r0, [fp, #-16]
    6e14:	ldr	r0, [r0]
    6e18:	movw	r1, #0
    6e1c:	cmp	r0, r1
    6e20:	beq	6e28 <eval_boolean+0x1ba0>
    6e24:	b	6e48 <eval_boolean+0x1bc0>
    6e28:	movw	r0, #0
    6e2c:	movt	r0, #0
    6e30:	movw	r1, #0
    6e34:	movt	r1, #0
    6e38:	movw	r2, #1348	; 0x544
    6e3c:	movw	r3, #0
    6e40:	movt	r3, #0
    6e44:	bl	0 <__assert_fail>
    6e48:	ldr	r0, [fp, #-16]
    6e4c:	add	r0, r0, #8
    6e50:	add	r1, sp, #112	; 0x70
    6e54:	str	r0, [sp, #16]
    6e58:	mov	r0, r1
    6e5c:	ldr	r1, [sp, #16]
    6e60:	movw	r2, #520	; 0x208
    6e64:	bl	0 <memcpy>
    6e68:	ldr	r0, [fp, #-16]
    6e6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6e70:	ldr	r1, [r1, #16]
    6e74:	bl	d2e4 <eval_cursor>
    6e78:	cmp	r0, #0
    6e7c:	beq	6e8c <eval_boolean+0x1c04>
    6e80:	mvn	r0, #0
    6e84:	str	r0, [fp, #-12]
    6e88:	b	6f9c <eval_boolean+0x1d14>
    6e8c:	ldr	r0, [fp, #-16]
    6e90:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6e94:	ldr	r1, [r1, #20]
    6e98:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6e9c:	bl	5288 <eval_boolean>
    6ea0:	cmp	r0, #0
    6ea4:	beq	6eb4 <eval_boolean+0x1c2c>
    6ea8:	mvn	r0, #0
    6eac:	str	r0, [fp, #-12]
    6eb0:	b	6f9c <eval_boolean+0x1d14>
    6eb4:	ldr	r0, [fp, #-16]
    6eb8:	add	r0, r0, #8
    6ebc:	add	r1, sp, #112	; 0x70
    6ec0:	movw	r2, #520	; 0x208
    6ec4:	bl	0 <memcpy>
    6ec8:	b	6f94 <eval_boolean+0x1d0c>
    6ecc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    6ed0:	ldr	r0, [r0, #12]
    6ed4:	ldrb	r0, [r0]
    6ed8:	sub	r0, r0, #105	; 0x69
    6edc:	str	r0, [sp, #100]	; 0x64
    6ee0:	ldr	r0, [fp, #-16]
    6ee4:	ldr	r1, [sp, #100]	; 0x64
    6ee8:	add	r0, r0, r1, lsl #3
    6eec:	ldr	r1, [r0, #528]	; 0x210
    6ef0:	ldr	r0, [r0, #532]	; 0x214
    6ef4:	str	r0, [sp, #108]	; 0x6c
    6ef8:	str	r1, [sp, #104]	; 0x68
    6efc:	ldr	r0, [fp, #-16]
    6f00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6f04:	ldr	r1, [r1, #16]
    6f08:	add	r2, r0, #528	; 0x210
    6f0c:	ldr	r3, [sp, #100]	; 0x64
    6f10:	add	r2, r2, r3, lsl #3
    6f14:	bl	70a8 <eval_integer>
    6f18:	cmp	r0, #0
    6f1c:	beq	6f2c <eval_boolean+0x1ca4>
    6f20:	mvn	r0, #0
    6f24:	str	r0, [fp, #-12]
    6f28:	b	6f9c <eval_boolean+0x1d14>
    6f2c:	ldr	r0, [fp, #-16]
    6f30:	ldr	r1, [fp, #-28]	; 0xffffffe4
    6f34:	ldr	r1, [r1, #20]
    6f38:	ldr	r2, [fp, #-24]	; 0xffffffe8
    6f3c:	bl	5288 <eval_boolean>
    6f40:	cmp	r0, #0
    6f44:	beq	6f54 <eval_boolean+0x1ccc>
    6f48:	mvn	r0, #0
    6f4c:	str	r0, [fp, #-12]
    6f50:	b	6f9c <eval_boolean+0x1d14>
    6f54:	ldr	r0, [sp, #104]	; 0x68
    6f58:	ldr	r1, [sp, #108]	; 0x6c
    6f5c:	ldr	r2, [fp, #-16]
    6f60:	ldr	r3, [sp, #100]	; 0x64
    6f64:	add	r2, r2, r3, lsl #3
    6f68:	str	r1, [r2, #532]	; 0x214
    6f6c:	str	r0, [r2, #528]	; 0x210
    6f70:	b	6f94 <eval_boolean+0x1d0c>
    6f74:	movw	r0, #0
    6f78:	movt	r0, #0
    6f7c:	movw	r1, #0
    6f80:	movt	r1, #0
    6f84:	movw	r2, #1379	; 0x563
    6f88:	movw	r3, #0
    6f8c:	movt	r3, #0
    6f90:	bl	0 <__assert_fail>
    6f94:	movw	r0, #0
    6f98:	str	r0, [fp, #-12]
    6f9c:	ldr	r0, [fp, #-12]
    6fa0:	sub	sp, fp, #8
    6fa4:	pop	{r4, sl, fp, pc}
    6fa8:	.word	0x00000800
    6fac:	.word	0x000007e0

00006fb0 <coda_expression_eval_integer>:
    6fb0:	push	{r4, r5, fp, lr}
    6fb4:	add	fp, sp, #8
    6fb8:	sub	sp, sp, #584	; 0x248
    6fbc:	str	r0, [fp, #-16]
    6fc0:	str	r1, [fp, #-20]	; 0xffffffec
    6fc4:	str	r2, [fp, #-24]	; 0xffffffe8
    6fc8:	ldr	r0, [fp, #-16]
    6fcc:	ldr	r0, [r0, #4]
    6fd0:	cmp	r0, #1
    6fd4:	beq	6ff4 <coda_expression_eval_integer+0x44>
    6fd8:	mvn	r0, #99	; 0x63
    6fdc:	movw	r1, #0
    6fe0:	movt	r1, #0
    6fe4:	bl	0 <coda_set_error>
    6fe8:	mvn	r0, #0
    6fec:	str	r0, [fp, #-12]
    6ff0:	b	709c <coda_expression_eval_integer+0xec>
    6ff4:	ldr	r0, [fp, #-20]	; 0xffffffec
    6ff8:	movw	r1, #0
    6ffc:	cmp	r0, r1
    7000:	bne	7030 <coda_expression_eval_integer+0x80>
    7004:	ldr	r0, [fp, #-16]
    7008:	ldr	r0, [r0, #8]
    700c:	cmp	r0, #0
    7010:	bne	7030 <coda_expression_eval_integer+0x80>
    7014:	mvn	r0, #99	; 0x63
    7018:	movw	r1, #0
    701c:	movt	r1, #0
    7020:	bl	0 <coda_set_error>
    7024:	mvn	r0, #0
    7028:	str	r0, [fp, #-12]
    702c:	b	709c <coda_expression_eval_integer+0xec>
    7030:	ldr	r1, [fp, #-20]	; 0xffffffec
    7034:	mov	r0, sp
    7038:	bl	c14 <init_eval_info>
    703c:	ldr	r1, [fp, #-16]
    7040:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7044:	mov	r0, sp
    7048:	bl	70a8 <eval_integer>
    704c:	cmp	r0, #0
    7050:	beq	7094 <coda_expression_eval_integer+0xe4>
    7054:	ldr	r0, [fp, #-20]	; 0xffffffec
    7058:	movw	r1, #0
    705c:	cmp	r0, r1
    7060:	beq	7088 <coda_expression_eval_integer+0xd8>
    7064:	ldr	r0, [fp, #-20]	; 0xffffffec
    7068:	mov	r1, sp
    706c:	add	r1, r1, #8
    7070:	bl	0 <coda_cursor_compare>
    7074:	cmp	r0, #0
    7078:	beq	7088 <coda_expression_eval_integer+0xd8>
    707c:	mov	r0, sp
    7080:	add	r0, r0, #8
    7084:	bl	0 <coda_cursor_add_to_error_message>
    7088:	mvn	r0, #0
    708c:	str	r0, [fp, #-12]
    7090:	b	709c <coda_expression_eval_integer+0xec>
    7094:	movw	r0, #0
    7098:	str	r0, [fp, #-12]
    709c:	ldr	r0, [fp, #-12]
    70a0:	sub	sp, fp, #8
    70a4:	pop	{r4, r5, fp, pc}

000070a8 <eval_integer>:
    70a8:	push	{r4, r5, fp, lr}
    70ac:	add	fp, sp, #8
    70b0:	sub	sp, sp, #328	; 0x148
    70b4:	sub	sp, sp, #9216	; 0x2400
    70b8:	add	lr, sp, #4096	; 0x1000
    70bc:	add	r3, lr, #412	; 0x19c
    70c0:	str	r0, [fp, #-16]
    70c4:	str	r1, [fp, #-20]	; 0xffffffec
    70c8:	str	r2, [fp, #-24]	; 0xffffffe8
    70cc:	ldr	r0, [fp, #-20]	; 0xffffffec
    70d0:	ldr	r0, [r0]
    70d4:	cmp	r0, #20
    70d8:	str	r3, [sp, #256]	; 0x100
    70dc:	bne	7104 <eval_integer+0x5c>
    70e0:	ldr	r0, [fp, #-20]	; 0xffffffec
    70e4:	ldr	r1, [r0, #16]
    70e8:	ldr	r0, [r0, #20]
    70ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    70f0:	str	r0, [r2, #4]
    70f4:	str	r1, [r2]
    70f8:	movw	r0, #0
    70fc:	str	r0, [fp, #-12]
    7100:	b	95b4 <eval_integer+0x250c>
    7104:	ldr	r0, [fp, #-20]	; 0xffffffec
    7108:	str	r0, [fp, #-28]	; 0xffffffe4
    710c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7110:	ldr	r0, [r0]
    7114:	cmp	r0, #86	; 0x56
    7118:	str	r0, [sp, #252]	; 0xfc
    711c:	bhi	958c <eval_integer+0x24e4>
    7120:	add	r0, pc, #8
    7124:	ldr	r1, [sp, #252]	; 0xfc
    7128:	ldr	r0, [r0, r1, lsl #2]
    712c:	mov	pc, r0
    7130:	.word	0x00007554
    7134:	.word	0x000075e0
    7138:	.word	0x000078a4
    713c:	.word	0x00007d50
    7140:	.word	0x0000958c
    7144:	.word	0x00007b94
    7148:	.word	0x0000958c
    714c:	.word	0x000082b0
    7150:	.word	0x00007efc
    7154:	.word	0x000080dc
    7158:	.word	0x0000958c
    715c:	.word	0x00009420
    7160:	.word	0x00008df8
    7164:	.word	0x00008c20
    7168:	.word	0x00008eb0
    716c:	.word	0x00008d0c
    7170:	.word	0x0000958c
    7174:	.word	0x0000958c
    7178:	.word	0x0000958c
    717c:	.word	0x0000958c
    7180:	.word	0x0000958c
    7184:	.word	0x0000958c
    7188:	.word	0x0000958c
    718c:	.word	0x000088ac
    7190:	.word	0x0000774c
    7194:	.word	0x0000958c
    7198:	.word	0x0000958c
    719c:	.word	0x00008f70
    71a0:	.word	0x0000958c
    71a4:	.word	0x0000958c
    71a8:	.word	0x0000958c
    71ac:	.word	0x0000958c
    71b0:	.word	0x0000958c
    71b4:	.word	0x0000958c
    71b8:	.word	0x0000958c
    71bc:	.word	0x0000958c
    71c0:	.word	0x0000958c
    71c4:	.word	0x0000958c
    71c8:	.word	0x0000958c
    71cc:	.word	0x0000958c
    71d0:	.word	0x0000958c
    71d4:	.word	0x0000958c
    71d8:	.word	0x00007b04
    71dc:	.word	0x00009050
    71e0:	.word	0x00009120
    71e4:	.word	0x0000728c
    71e8:	.word	0x0000958c
    71ec:	.word	0x0000958c
    71f0:	.word	0x0000958c
    71f4:	.word	0x0000958c
    71f8:	.word	0x00008740
    71fc:	.word	0x0000958c
    7200:	.word	0x0000958c
    7204:	.word	0x0000958c
    7208:	.word	0x0000958c
    720c:	.word	0x0000958c
    7210:	.word	0x00007994
    7214:	.word	0x00007a4c
    7218:	.word	0x000077f4
    721c:	.word	0x000076d0
    7220:	.word	0x0000750c
    7224:	.word	0x0000958c
    7228:	.word	0x0000958c
    722c:	.word	0x00008a54
    7230:	.word	0x00008b4c
    7234:	.word	0x0000791c
    7238:	.word	0x0000958c
    723c:	.word	0x0000958c
    7240:	.word	0x0000958c
    7244:	.word	0x0000958c
    7248:	.word	0x00008fd4
    724c:	.word	0x0000958c
    7250:	.word	0x0000958c
    7254:	.word	0x0000958c
    7258:	.word	0x0000958c
    725c:	.word	0x0000958c
    7260:	.word	0x0000958c
    7264:	.word	0x0000958c
    7268:	.word	0x00007658
    726c:	.word	0x0000958c
    7270:	.word	0x0000958c
    7274:	.word	0x00008498
    7278:	.word	0x0000958c
    727c:	.word	0x0000914c
    7280:	.word	0x0000958c
    7284:	.word	0x000092b0
    7288:	.word	0x000094e0
    728c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7290:	ldr	r0, [r0, #16]
    7294:	ldr	r0, [r0, #4]
    7298:	cmp	r0, #4
    729c:	bne	7414 <eval_integer+0x36c>
    72a0:	ldr	r0, [fp, #-16]
    72a4:	ldr	r0, [r0]
    72a8:	movw	r1, #0
    72ac:	cmp	r0, r1
    72b0:	beq	72b8 <eval_integer+0x210>
    72b4:	b	72d8 <eval_integer+0x230>
    72b8:	movw	r0, #0
    72bc:	movt	r0, #0
    72c0:	movw	r1, #0
    72c4:	movt	r1, #0
    72c8:	movw	r2, #1936	; 0x790
    72cc:	movw	r3, #0
    72d0:	movt	r3, #0
    72d4:	bl	0 <__assert_fail>
    72d8:	ldr	r0, [fp, #-16]
    72dc:	add	r0, r0, #8
    72e0:	sub	r1, fp, #552	; 0x228
    72e4:	str	r0, [sp, #248]	; 0xf8
    72e8:	mov	r0, r1
    72ec:	ldr	r1, [sp, #248]	; 0xf8
    72f0:	movw	r2, #520	; 0x208
    72f4:	bl	0 <memcpy>
    72f8:	ldr	r0, [fp, #-16]
    72fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7300:	ldr	r1, [r1, #16]
    7304:	bl	d2e4 <eval_cursor>
    7308:	cmp	r0, #0
    730c:	beq	731c <eval_integer+0x274>
    7310:	mvn	r0, #0
    7314:	str	r0, [fp, #-12]
    7318:	b	95b4 <eval_integer+0x250c>
    731c:	bl	0 <coda_get_option_perform_conversions>
    7320:	str	r0, [fp, #-560]	; 0xfffffdd0
    7324:	movw	r0, #0
    7328:	bl	0 <coda_set_option_perform_conversions>
    732c:	ldr	lr, [fp, #-16]
    7330:	add	lr, lr, #8
    7334:	str	r0, [sp, #244]	; 0xf4
    7338:	mov	r0, lr
    733c:	sub	r1, fp, #556	; 0x22c
    7340:	bl	0 <coda_cursor_get_read_type>
    7344:	cmp	r0, #0
    7348:	beq	7364 <eval_integer+0x2bc>
    734c:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    7350:	bl	0 <coda_set_option_perform_conversions>
    7354:	mvn	lr, #0
    7358:	str	lr, [fp, #-12]
    735c:	str	r0, [sp, #240]	; 0xf0
    7360:	b	95b4 <eval_integer+0x250c>
    7364:	ldr	r0, [fp, #-556]	; 0xfffffdd4
    7368:	cmp	r0, #7
    736c:	bne	73b8 <eval_integer+0x310>
    7370:	ldr	r0, [fp, #-16]
    7374:	add	r0, r0, #8
    7378:	sub	r1, fp, #568	; 0x238
    737c:	bl	0 <coda_cursor_read_uint64>
    7380:	cmp	r0, #0
    7384:	beq	73a0 <eval_integer+0x2f8>
    7388:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    738c:	bl	0 <coda_set_option_perform_conversions>
    7390:	mvn	lr, #0
    7394:	str	lr, [fp, #-12]
    7398:	str	r0, [sp, #236]	; 0xec
    739c:	b	95b4 <eval_integer+0x250c>
    73a0:	ldr	r0, [fp, #-568]	; 0xfffffdc8
    73a4:	ldr	r1, [fp, #-564]	; 0xfffffdcc
    73a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    73ac:	str	r1, [r2, #4]
    73b0:	str	r0, [r2]
    73b4:	b	73ec <eval_integer+0x344>
    73b8:	ldr	r0, [fp, #-16]
    73bc:	add	r0, r0, #8
    73c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    73c4:	bl	0 <coda_cursor_read_int64>
    73c8:	cmp	r0, #0
    73cc:	beq	73e8 <eval_integer+0x340>
    73d0:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    73d4:	bl	0 <coda_set_option_perform_conversions>
    73d8:	mvn	lr, #0
    73dc:	str	lr, [fp, #-12]
    73e0:	str	r0, [sp, #232]	; 0xe8
    73e4:	b	95b4 <eval_integer+0x250c>
    73e8:	b	73ec <eval_integer+0x344>
    73ec:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    73f0:	bl	0 <coda_set_option_perform_conversions>
    73f4:	ldr	lr, [fp, #-16]
    73f8:	add	lr, lr, #8
    73fc:	sub	r1, fp, #552	; 0x228
    7400:	str	r0, [sp, #228]	; 0xe4
    7404:	mov	r0, lr
    7408:	movw	r2, #520	; 0x208
    740c:	bl	0 <memcpy>
    7410:	b	7508 <eval_integer+0x460>
    7414:	ldr	r0, [fp, #-28]	; 0xffffffe4
    7418:	ldr	r0, [r0, #16]
    741c:	ldr	r0, [r0, #4]
    7420:	cmp	r0, #0
    7424:	bne	7468 <eval_integer+0x3c0>
    7428:	ldr	r0, [fp, #-16]
    742c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7430:	ldr	r1, [r1, #16]
    7434:	sub	r2, fp, #572	; 0x23c
    7438:	bl	5288 <eval_boolean>
    743c:	cmp	r0, #0
    7440:	beq	7450 <eval_integer+0x3a8>
    7444:	mvn	r0, #0
    7448:	str	r0, [fp, #-12]
    744c:	b	95b4 <eval_integer+0x250c>
    7450:	ldr	r0, [fp, #-572]	; 0xfffffdc4
    7454:	asr	r1, r0, #31
    7458:	ldr	r2, [fp, #-24]	; 0xffffffe8
    745c:	str	r0, [r2]
    7460:	str	r1, [r2, #4]
    7464:	b	7504 <eval_integer+0x45c>
    7468:	ldr	r0, [fp, #-16]
    746c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7470:	ldr	r1, [r1, #16]
    7474:	sub	r2, fp, #576	; 0x240
    7478:	sub	r3, fp, #580	; 0x244
    747c:	sub	ip, fp, #584	; 0x248
    7480:	str	ip, [sp]
    7484:	bl	ac2c <eval_string>
    7488:	cmp	r0, #0
    748c:	beq	749c <eval_integer+0x3f4>
    7490:	mvn	r0, #0
    7494:	str	r0, [fp, #-12]
    7498:	b	95b4 <eval_integer+0x250c>
    749c:	ldr	r0, [fp, #-580]	; 0xfffffdbc
    74a0:	cmp	r0, #0
    74a4:	bne	74c4 <eval_integer+0x41c>
    74a8:	mvn	r0, #102	; 0x66
    74ac:	movw	r1, #0
    74b0:	movt	r1, #0
    74b4:	bl	0 <coda_set_error>
    74b8:	mvn	r0, #0
    74bc:	str	r0, [fp, #-12]
    74c0:	b	95b4 <eval_integer+0x250c>
    74c4:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    74c8:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    74cc:	add	r0, r0, r1
    74d0:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    74d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    74d8:	movw	r3, #0
    74dc:	bl	0 <coda_ascii_parse_int64>
    74e0:	cmp	r0, #0
    74e4:	bge	74fc <eval_integer+0x454>
    74e8:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    74ec:	bl	0 <free>
    74f0:	mvn	r0, #0
    74f4:	str	r0, [fp, #-12]
    74f8:	b	95b4 <eval_integer+0x250c>
    74fc:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    7500:	bl	0 <free>
    7504:	b	7508 <eval_integer+0x460>
    7508:	b	95ac <eval_integer+0x2504>
    750c:	ldr	r0, [fp, #-16]
    7510:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7514:	ldr	r1, [r1, #16]
    7518:	ldr	r2, [fp, #-24]	; 0xffffffe8
    751c:	bl	70a8 <eval_integer>
    7520:	cmp	r0, #0
    7524:	beq	7534 <eval_integer+0x48c>
    7528:	mvn	r0, #0
    752c:	str	r0, [fp, #-12]
    7530:	b	95b4 <eval_integer+0x250c>
    7534:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7538:	ldr	r1, [r0]
    753c:	ldr	r2, [r0, #4]
    7540:	rsbs	r1, r1, #0
    7544:	rsc	r2, r2, #0
    7548:	str	r1, [r0]
    754c:	str	r2, [r0, #4]
    7550:	b	95ac <eval_integer+0x2504>
    7554:	ldr	r0, [fp, #-16]
    7558:	ldr	r1, [fp, #-28]	; 0xffffffe4
    755c:	ldr	r1, [r1, #16]
    7560:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7564:	bl	70a8 <eval_integer>
    7568:	cmp	r0, #0
    756c:	beq	757c <eval_integer+0x4d4>
    7570:	mvn	r0, #0
    7574:	str	r0, [fp, #-12]
    7578:	b	95b4 <eval_integer+0x250c>
    757c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7580:	ldr	r0, [r0, #4]
    7584:	cmp	r0, #0
    7588:	blt	75a8 <eval_integer+0x500>
    758c:	b	7590 <eval_integer+0x4e8>
    7590:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7594:	ldr	r1, [r0]
    7598:	ldr	r0, [r0, #4]
    759c:	str	r1, [sp, #224]	; 0xe0
    75a0:	str	r0, [sp, #220]	; 0xdc
    75a4:	b	75c8 <eval_integer+0x520>
    75a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    75ac:	ldr	r1, [r0]
    75b0:	ldr	r0, [r0, #4]
    75b4:	rsbs	r1, r1, #0
    75b8:	rsc	r0, r0, #0
    75bc:	str	r1, [sp, #224]	; 0xe0
    75c0:	str	r0, [sp, #220]	; 0xdc
    75c4:	b	75c8 <eval_integer+0x520>
    75c8:	ldr	r0, [sp, #220]	; 0xdc
    75cc:	ldr	r1, [sp, #224]	; 0xe0
    75d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    75d4:	str	r1, [r2]
    75d8:	str	r0, [r2, #4]
    75dc:	b	95ac <eval_integer+0x2504>
    75e0:	ldr	r0, [fp, #-16]
    75e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    75e8:	ldr	r1, [r1, #16]
    75ec:	sub	r2, fp, #592	; 0x250
    75f0:	bl	70a8 <eval_integer>
    75f4:	cmp	r0, #0
    75f8:	beq	7608 <eval_integer+0x560>
    75fc:	mvn	r0, #0
    7600:	str	r0, [fp, #-12]
    7604:	b	95b4 <eval_integer+0x250c>
    7608:	ldr	r0, [fp, #-16]
    760c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7610:	ldr	r1, [r1, #20]
    7614:	sub	r2, fp, #600	; 0x258
    7618:	bl	70a8 <eval_integer>
    761c:	cmp	r0, #0
    7620:	beq	7630 <eval_integer+0x588>
    7624:	mvn	r0, #0
    7628:	str	r0, [fp, #-12]
    762c:	b	95b4 <eval_integer+0x250c>
    7630:	ldr	r0, [fp, #-592]	; 0xfffffdb0
    7634:	ldr	r1, [fp, #-588]	; 0xfffffdb4
    7638:	ldr	r2, [fp, #-600]	; 0xfffffda8
    763c:	ldr	r3, [fp, #-596]	; 0xfffffdac
    7640:	adds	r0, r0, r2
    7644:	adc	r1, r1, r3
    7648:	ldr	r2, [fp, #-24]	; 0xffffffe8
    764c:	str	r0, [r2]
    7650:	str	r1, [r2, #4]
    7654:	b	95ac <eval_integer+0x2504>
    7658:	ldr	r0, [fp, #-16]
    765c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7660:	ldr	r1, [r1, #16]
    7664:	sub	r2, fp, #608	; 0x260
    7668:	bl	70a8 <eval_integer>
    766c:	cmp	r0, #0
    7670:	beq	7680 <eval_integer+0x5d8>
    7674:	mvn	r0, #0
    7678:	str	r0, [fp, #-12]
    767c:	b	95b4 <eval_integer+0x250c>
    7680:	ldr	r0, [fp, #-16]
    7684:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7688:	ldr	r1, [r1, #20]
    768c:	sub	r2, fp, #616	; 0x268
    7690:	bl	70a8 <eval_integer>
    7694:	cmp	r0, #0
    7698:	beq	76a8 <eval_integer+0x600>
    769c:	mvn	r0, #0
    76a0:	str	r0, [fp, #-12]
    76a4:	b	95b4 <eval_integer+0x250c>
    76a8:	ldr	r0, [fp, #-608]	; 0xfffffda0
    76ac:	ldr	r1, [fp, #-604]	; 0xfffffda4
    76b0:	ldr	r2, [fp, #-616]	; 0xfffffd98
    76b4:	ldr	r3, [fp, #-612]	; 0xfffffd9c
    76b8:	subs	r0, r0, r2
    76bc:	sbc	r1, r1, r3
    76c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    76c4:	str	r0, [r2]
    76c8:	str	r1, [r2, #4]
    76cc:	b	95ac <eval_integer+0x2504>
    76d0:	ldr	r0, [fp, #-16]
    76d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    76d8:	ldr	r1, [r1, #16]
    76dc:	sub	r2, fp, #624	; 0x270
    76e0:	bl	70a8 <eval_integer>
    76e4:	cmp	r0, #0
    76e8:	beq	76f8 <eval_integer+0x650>
    76ec:	mvn	r0, #0
    76f0:	str	r0, [fp, #-12]
    76f4:	b	95b4 <eval_integer+0x250c>
    76f8:	ldr	r0, [fp, #-16]
    76fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7700:	ldr	r1, [r1, #20]
    7704:	sub	r2, fp, #632	; 0x278
    7708:	bl	70a8 <eval_integer>
    770c:	cmp	r0, #0
    7710:	beq	7720 <eval_integer+0x678>
    7714:	mvn	r0, #0
    7718:	str	r0, [fp, #-12]
    771c:	b	95b4 <eval_integer+0x250c>
    7720:	ldr	r0, [fp, #-624]	; 0xfffffd90
    7724:	ldr	r1, [fp, #-620]	; 0xfffffd94
    7728:	ldr	r2, [fp, #-632]	; 0xfffffd88
    772c:	ldr	r3, [fp, #-628]	; 0xfffffd8c
    7730:	umull	ip, lr, r0, r2
    7734:	mla	r0, r0, r3, lr
    7738:	mla	r0, r1, r2, r0
    773c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    7740:	str	ip, [r1]
    7744:	str	r0, [r1, #4]
    7748:	b	95ac <eval_integer+0x2504>
    774c:	ldr	r0, [fp, #-16]
    7750:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7754:	ldr	r1, [r1, #16]
    7758:	sub	r2, fp, #640	; 0x280
    775c:	bl	70a8 <eval_integer>
    7760:	cmp	r0, #0
    7764:	beq	7774 <eval_integer+0x6cc>
    7768:	mvn	r0, #0
    776c:	str	r0, [fp, #-12]
    7770:	b	95b4 <eval_integer+0x250c>
    7774:	ldr	r0, [fp, #-16]
    7778:	ldr	r1, [fp, #-28]	; 0xffffffe4
    777c:	ldr	r1, [r1, #20]
    7780:	sub	r2, fp, #648	; 0x288
    7784:	bl	70a8 <eval_integer>
    7788:	cmp	r0, #0
    778c:	beq	779c <eval_integer+0x6f4>
    7790:	mvn	r0, #0
    7794:	str	r0, [fp, #-12]
    7798:	b	95b4 <eval_integer+0x250c>
    779c:	ldr	r0, [fp, #-648]	; 0xfffffd78
    77a0:	ldr	r1, [fp, #-644]	; 0xfffffd7c
    77a4:	orr	r0, r0, r1
    77a8:	cmp	r0, #0
    77ac:	bne	77d0 <eval_integer+0x728>
    77b0:	b	77b4 <eval_integer+0x70c>
    77b4:	mvn	r0, #400	; 0x190
    77b8:	movw	r1, #0
    77bc:	movt	r1, #0
    77c0:	bl	0 <coda_set_error>
    77c4:	mvn	r0, #0
    77c8:	str	r0, [fp, #-12]
    77cc:	b	95b4 <eval_integer+0x250c>
    77d0:	ldr	r0, [fp, #-640]	; 0xfffffd80
    77d4:	ldr	r1, [fp, #-636]	; 0xfffffd84
    77d8:	ldr	r2, [fp, #-648]	; 0xfffffd78
    77dc:	ldr	r3, [fp, #-644]	; 0xfffffd7c
    77e0:	bl	0 <__aeabi_ldivmod>
    77e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    77e8:	str	r1, [r2, #4]
    77ec:	str	r0, [r2]
    77f0:	b	95ac <eval_integer+0x2504>
    77f4:	ldr	r0, [fp, #-16]
    77f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    77fc:	ldr	r1, [r1, #16]
    7800:	sub	r2, fp, #656	; 0x290
    7804:	bl	70a8 <eval_integer>
    7808:	cmp	r0, #0
    780c:	beq	781c <eval_integer+0x774>
    7810:	mvn	r0, #0
    7814:	str	r0, [fp, #-12]
    7818:	b	95b4 <eval_integer+0x250c>
    781c:	ldr	r0, [fp, #-16]
    7820:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7824:	ldr	r1, [r1, #20]
    7828:	sub	r2, fp, #664	; 0x298
    782c:	bl	70a8 <eval_integer>
    7830:	cmp	r0, #0
    7834:	beq	7844 <eval_integer+0x79c>
    7838:	mvn	r0, #0
    783c:	str	r0, [fp, #-12]
    7840:	b	95b4 <eval_integer+0x250c>
    7844:	ldr	r0, [fp, #-664]	; 0xfffffd68
    7848:	ldr	r1, [fp, #-660]	; 0xfffffd6c
    784c:	orr	r0, r0, r1
    7850:	cmp	r0, #0
    7854:	bne	7878 <eval_integer+0x7d0>
    7858:	b	785c <eval_integer+0x7b4>
    785c:	mvn	r0, #400	; 0x190
    7860:	movw	r1, #0
    7864:	movt	r1, #0
    7868:	bl	0 <coda_set_error>
    786c:	mvn	r0, #0
    7870:	str	r0, [fp, #-12]
    7874:	b	95b4 <eval_integer+0x250c>
    7878:	ldr	r0, [fp, #-656]	; 0xfffffd70
    787c:	ldr	r1, [fp, #-652]	; 0xfffffd74
    7880:	ldr	r2, [fp, #-664]	; 0xfffffd68
    7884:	ldr	r3, [fp, #-660]	; 0xfffffd6c
    7888:	bl	0 <__aeabi_ldivmod>
    788c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    7890:	str	r3, [lr, #4]
    7894:	str	r2, [lr]
    7898:	str	r0, [sp, #216]	; 0xd8
    789c:	str	r1, [sp, #212]	; 0xd4
    78a0:	b	95ac <eval_integer+0x2504>
    78a4:	ldr	r0, [fp, #-16]
    78a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    78ac:	ldr	r1, [r1, #16]
    78b0:	sub	r2, fp, #672	; 0x2a0
    78b4:	bl	70a8 <eval_integer>
    78b8:	cmp	r0, #0
    78bc:	beq	78cc <eval_integer+0x824>
    78c0:	mvn	r0, #0
    78c4:	str	r0, [fp, #-12]
    78c8:	b	95b4 <eval_integer+0x250c>
    78cc:	ldr	r0, [fp, #-16]
    78d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    78d4:	ldr	r1, [r1, #20]
    78d8:	sub	r2, fp, #680	; 0x2a8
    78dc:	bl	70a8 <eval_integer>
    78e0:	cmp	r0, #0
    78e4:	beq	78f4 <eval_integer+0x84c>
    78e8:	mvn	r0, #0
    78ec:	str	r0, [fp, #-12]
    78f0:	b	95b4 <eval_integer+0x250c>
    78f4:	ldr	r0, [fp, #-672]	; 0xfffffd60
    78f8:	ldr	r1, [fp, #-668]	; 0xfffffd64
    78fc:	ldr	r2, [fp, #-680]	; 0xfffffd58
    7900:	ldr	r3, [fp, #-676]	; 0xfffffd5c
    7904:	and	r0, r0, r2
    7908:	and	r1, r1, r3
    790c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7910:	str	r1, [r2, #4]
    7914:	str	r0, [r2]
    7918:	b	95ac <eval_integer+0x2504>
    791c:	ldr	r0, [fp, #-16]
    7920:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7924:	ldr	r1, [r1, #16]
    7928:	sub	r2, fp, #688	; 0x2b0
    792c:	bl	70a8 <eval_integer>
    7930:	cmp	r0, #0
    7934:	beq	7944 <eval_integer+0x89c>
    7938:	mvn	r0, #0
    793c:	str	r0, [fp, #-12]
    7940:	b	95b4 <eval_integer+0x250c>
    7944:	ldr	r0, [fp, #-16]
    7948:	ldr	r1, [fp, #-28]	; 0xffffffe4
    794c:	ldr	r1, [r1, #20]
    7950:	sub	r2, fp, #696	; 0x2b8
    7954:	bl	70a8 <eval_integer>
    7958:	cmp	r0, #0
    795c:	beq	796c <eval_integer+0x8c4>
    7960:	mvn	r0, #0
    7964:	str	r0, [fp, #-12]
    7968:	b	95b4 <eval_integer+0x250c>
    796c:	ldr	r0, [fp, #-688]	; 0xfffffd50
    7970:	ldr	r1, [fp, #-684]	; 0xfffffd54
    7974:	ldr	r2, [fp, #-696]	; 0xfffffd48
    7978:	ldr	r3, [fp, #-692]	; 0xfffffd4c
    797c:	orr	r0, r0, r2
    7980:	orr	r1, r1, r3
    7984:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7988:	str	r1, [r2, #4]
    798c:	str	r0, [r2]
    7990:	b	95ac <eval_integer+0x2504>
    7994:	ldr	r0, [fp, #-16]
    7998:	ldr	r1, [fp, #-28]	; 0xffffffe4
    799c:	ldr	r1, [r1, #16]
    79a0:	sub	r2, fp, #704	; 0x2c0
    79a4:	bl	70a8 <eval_integer>
    79a8:	cmp	r0, #0
    79ac:	beq	79bc <eval_integer+0x914>
    79b0:	mvn	r0, #0
    79b4:	str	r0, [fp, #-12]
    79b8:	b	95b4 <eval_integer+0x250c>
    79bc:	ldr	r0, [fp, #-16]
    79c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    79c4:	ldr	r1, [r1, #20]
    79c8:	sub	r2, fp, #712	; 0x2c8
    79cc:	bl	70a8 <eval_integer>
    79d0:	cmp	r0, #0
    79d4:	beq	79e4 <eval_integer+0x93c>
    79d8:	mvn	r0, #0
    79dc:	str	r0, [fp, #-12]
    79e0:	b	95b4 <eval_integer+0x250c>
    79e4:	ldr	r0, [fp, #-704]	; 0xfffffd40
    79e8:	ldr	r1, [fp, #-700]	; 0xfffffd44
    79ec:	ldr	r2, [fp, #-712]	; 0xfffffd38
    79f0:	ldr	r3, [fp, #-708]	; 0xfffffd3c
    79f4:	subs	r0, r2, r0
    79f8:	sbcs	r1, r3, r1
    79fc:	str	r0, [sp, #208]	; 0xd0
    7a00:	str	r1, [sp, #204]	; 0xcc
    7a04:	bge	7a20 <eval_integer+0x978>
    7a08:	b	7a0c <eval_integer+0x964>
    7a0c:	ldr	r0, [fp, #-704]	; 0xfffffd40
    7a10:	ldr	r1, [fp, #-700]	; 0xfffffd44
    7a14:	str	r0, [sp, #200]	; 0xc8
    7a18:	str	r1, [sp, #196]	; 0xc4
    7a1c:	b	7a34 <eval_integer+0x98c>
    7a20:	ldr	r0, [fp, #-712]	; 0xfffffd38
    7a24:	ldr	r1, [fp, #-708]	; 0xfffffd3c
    7a28:	str	r0, [sp, #200]	; 0xc8
    7a2c:	str	r1, [sp, #196]	; 0xc4
    7a30:	b	7a34 <eval_integer+0x98c>
    7a34:	ldr	r0, [sp, #196]	; 0xc4
    7a38:	ldr	r1, [sp, #200]	; 0xc8
    7a3c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7a40:	str	r1, [r2]
    7a44:	str	r0, [r2, #4]
    7a48:	b	95ac <eval_integer+0x2504>
    7a4c:	ldr	r0, [fp, #-16]
    7a50:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7a54:	ldr	r1, [r1, #16]
    7a58:	sub	r2, fp, #720	; 0x2d0
    7a5c:	bl	70a8 <eval_integer>
    7a60:	cmp	r0, #0
    7a64:	beq	7a74 <eval_integer+0x9cc>
    7a68:	mvn	r0, #0
    7a6c:	str	r0, [fp, #-12]
    7a70:	b	95b4 <eval_integer+0x250c>
    7a74:	ldr	r0, [fp, #-16]
    7a78:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7a7c:	ldr	r1, [r1, #20]
    7a80:	sub	r2, fp, #728	; 0x2d8
    7a84:	bl	70a8 <eval_integer>
    7a88:	cmp	r0, #0
    7a8c:	beq	7a9c <eval_integer+0x9f4>
    7a90:	mvn	r0, #0
    7a94:	str	r0, [fp, #-12]
    7a98:	b	95b4 <eval_integer+0x250c>
    7a9c:	ldr	r0, [fp, #-720]	; 0xfffffd30
    7aa0:	ldr	r1, [fp, #-716]	; 0xfffffd34
    7aa4:	ldr	r2, [fp, #-728]	; 0xfffffd28
    7aa8:	ldr	r3, [fp, #-724]	; 0xfffffd2c
    7aac:	subs	r0, r0, r2
    7ab0:	sbcs	r1, r1, r3
    7ab4:	str	r0, [sp, #192]	; 0xc0
    7ab8:	str	r1, [sp, #188]	; 0xbc
    7abc:	bge	7ad8 <eval_integer+0xa30>
    7ac0:	b	7ac4 <eval_integer+0xa1c>
    7ac4:	ldr	r0, [fp, #-720]	; 0xfffffd30
    7ac8:	ldr	r1, [fp, #-716]	; 0xfffffd34
    7acc:	str	r0, [sp, #184]	; 0xb8
    7ad0:	str	r1, [sp, #180]	; 0xb4
    7ad4:	b	7aec <eval_integer+0xa44>
    7ad8:	ldr	r0, [fp, #-728]	; 0xfffffd28
    7adc:	ldr	r1, [fp, #-724]	; 0xfffffd2c
    7ae0:	str	r0, [sp, #184]	; 0xb8
    7ae4:	str	r1, [sp, #180]	; 0xb4
    7ae8:	b	7aec <eval_integer+0xa44>
    7aec:	ldr	r0, [sp, #180]	; 0xb4
    7af0:	ldr	r1, [sp, #184]	; 0xb8
    7af4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7af8:	str	r1, [r2]
    7afc:	str	r0, [r2, #4]
    7b00:	b	95ac <eval_integer+0x2504>
    7b04:	ldr	r0, [fp, #-16]
    7b08:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b0c:	ldr	r1, [r1, #16]
    7b10:	sub	r2, fp, #732	; 0x2dc
    7b14:	bl	5288 <eval_boolean>
    7b18:	cmp	r0, #0
    7b1c:	beq	7b2c <eval_integer+0xa84>
    7b20:	mvn	r0, #0
    7b24:	str	r0, [fp, #-12]
    7b28:	b	95b4 <eval_integer+0x250c>
    7b2c:	ldr	r0, [fp, #-732]	; 0xfffffd24
    7b30:	cmp	r0, #0
    7b34:	beq	7b64 <eval_integer+0xabc>
    7b38:	ldr	r0, [fp, #-16]
    7b3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b40:	ldr	r1, [r1, #20]
    7b44:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7b48:	bl	70a8 <eval_integer>
    7b4c:	cmp	r0, #0
    7b50:	beq	7b60 <eval_integer+0xab8>
    7b54:	mvn	r0, #0
    7b58:	str	r0, [fp, #-12]
    7b5c:	b	95b4 <eval_integer+0x250c>
    7b60:	b	7b90 <eval_integer+0xae8>
    7b64:	ldr	r0, [fp, #-16]
    7b68:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7b6c:	ldr	r1, [r1, #24]
    7b70:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7b74:	bl	70a8 <eval_integer>
    7b78:	cmp	r0, #0
    7b7c:	beq	7b8c <eval_integer+0xae4>
    7b80:	mvn	r0, #0
    7b84:	str	r0, [fp, #-12]
    7b88:	b	95b4 <eval_integer+0x250c>
    7b8c:	b	7b90 <eval_integer+0xae8>
    7b90:	b	95ac <eval_integer+0x2504>
    7b94:	ldr	r0, [fp, #-16]
    7b98:	ldr	r0, [r0]
    7b9c:	movw	r1, #0
    7ba0:	cmp	r0, r1
    7ba4:	beq	7bac <eval_integer+0xb04>
    7ba8:	b	7bcc <eval_integer+0xb24>
    7bac:	movw	r0, #0
    7bb0:	movt	r0, #0
    7bb4:	movw	r1, #0
    7bb8:	movt	r1, #0
    7bbc:	movw	r2, #2194	; 0x892
    7bc0:	movw	r3, #0
    7bc4:	movt	r3, #0
    7bc8:	bl	0 <__assert_fail>
    7bcc:	ldr	r0, [fp, #-16]
    7bd0:	add	r0, r0, #8
    7bd4:	sub	lr, fp, #1024	; 0x400
    7bd8:	sub	r1, lr, #232	; 0xe8
    7bdc:	str	r0, [sp, #176]	; 0xb0
    7be0:	mov	r0, r1
    7be4:	ldr	r1, [sp, #176]	; 0xb0
    7be8:	movw	r2, #520	; 0x208
    7bec:	bl	0 <memcpy>
    7bf0:	ldr	r0, [fp, #-16]
    7bf4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7bf8:	ldr	r1, [r1, #16]
    7bfc:	bl	d2e4 <eval_cursor>
    7c00:	cmp	r0, #0
    7c04:	beq	7c14 <eval_integer+0xb6c>
    7c08:	mvn	r0, #0
    7c0c:	str	r0, [fp, #-12]
    7c10:	b	95b4 <eval_integer+0x250c>
    7c14:	ldr	r0, [fp, #-16]
    7c18:	add	r0, r0, #8
    7c1c:	sub	lr, fp, #1024	; 0x400
    7c20:	sub	r1, lr, #236	; 0xec
    7c24:	bl	0 <coda_cursor_get_num_elements>
    7c28:	cmp	r0, #0
    7c2c:	beq	7c3c <eval_integer+0xb94>
    7c30:	mvn	r0, #0
    7c34:	str	r0, [fp, #-12]
    7c38:	b	95b4 <eval_integer+0x250c>
    7c3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7c40:	mov	r1, #0
    7c44:	str	r1, [r0, #4]
    7c48:	str	r1, [r0]
    7c4c:	ldr	r0, [fp, #-1260]	; 0xfffffb14
    7c50:	cmp	r0, #0
    7c54:	ble	7d34 <eval_integer+0xc8c>
    7c58:	ldr	r0, [fp, #-16]
    7c5c:	add	r0, r0, #8
    7c60:	bl	0 <coda_cursor_goto_first_array_element>
    7c64:	cmp	r0, #0
    7c68:	beq	7c78 <eval_integer+0xbd0>
    7c6c:	mvn	r0, #0
    7c70:	str	r0, [fp, #-12]
    7c74:	b	95b4 <eval_integer+0x250c>
    7c78:	movw	r0, #0
    7c7c:	str	r0, [fp, #-1264]	; 0xfffffb10
    7c80:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7c84:	ldr	r1, [fp, #-1260]	; 0xfffffb14
    7c88:	cmp	r0, r1
    7c8c:	bge	7d30 <eval_integer+0xc88>
    7c90:	ldr	r0, [fp, #-16]
    7c94:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7c98:	ldr	r1, [r1, #20]
    7c9c:	sub	lr, fp, #1024	; 0x400
    7ca0:	sub	r2, lr, #244	; 0xf4
    7ca4:	bl	5288 <eval_boolean>
    7ca8:	cmp	r0, #0
    7cac:	beq	7cbc <eval_integer+0xc14>
    7cb0:	mvn	r0, #0
    7cb4:	str	r0, [fp, #-12]
    7cb8:	b	95b4 <eval_integer+0x250c>
    7cbc:	ldr	r0, [fp, #-1268]	; 0xfffffb0c
    7cc0:	cmp	r0, #0
    7cc4:	beq	7ce4 <eval_integer+0xc3c>
    7cc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7ccc:	ldr	r1, [r0]
    7cd0:	ldr	r2, [r0, #4]
    7cd4:	adds	r1, r1, #1
    7cd8:	adc	r2, r2, #0
    7cdc:	str	r1, [r0]
    7ce0:	str	r2, [r0, #4]
    7ce4:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7ce8:	ldr	r1, [fp, #-1260]	; 0xfffffb14
    7cec:	sub	r1, r1, #1
    7cf0:	cmp	r0, r1
    7cf4:	bge	7d1c <eval_integer+0xc74>
    7cf8:	ldr	r0, [fp, #-16]
    7cfc:	add	r0, r0, #8
    7d00:	bl	0 <coda_cursor_goto_next_array_element>
    7d04:	cmp	r0, #0
    7d08:	beq	7d18 <eval_integer+0xc70>
    7d0c:	mvn	r0, #0
    7d10:	str	r0, [fp, #-12]
    7d14:	b	95b4 <eval_integer+0x250c>
    7d18:	b	7d1c <eval_integer+0xc74>
    7d1c:	b	7d20 <eval_integer+0xc78>
    7d20:	ldr	r0, [fp, #-1264]	; 0xfffffb10
    7d24:	add	r0, r0, #1
    7d28:	str	r0, [fp, #-1264]	; 0xfffffb10
    7d2c:	b	7c80 <eval_integer+0xbd8>
    7d30:	b	7d34 <eval_integer+0xc8c>
    7d34:	ldr	r0, [fp, #-16]
    7d38:	add	r0, r0, #8
    7d3c:	sub	lr, fp, #1024	; 0x400
    7d40:	sub	r1, lr, #232	; 0xe8
    7d44:	movw	r2, #520	; 0x208
    7d48:	bl	0 <memcpy>
    7d4c:	b	95ac <eval_integer+0x2504>
    7d50:	ldr	r0, [fp, #-16]
    7d54:	ldr	r0, [r0]
    7d58:	movw	r1, #0
    7d5c:	cmp	r0, r1
    7d60:	beq	7d68 <eval_integer+0xcc0>
    7d64:	b	7d88 <eval_integer+0xce0>
    7d68:	movw	r0, #0
    7d6c:	movt	r0, #0
    7d70:	movw	r1, #0
    7d74:	movt	r1, #0
    7d78:	movw	r2, #2242	; 0x8c2
    7d7c:	movw	r3, #0
    7d80:	movt	r3, #0
    7d84:	bl	0 <__assert_fail>
    7d88:	ldr	r0, [fp, #-16]
    7d8c:	add	r0, r0, #8
    7d90:	sub	r1, fp, #1792	; 0x700
    7d94:	str	r0, [sp, #172]	; 0xac
    7d98:	mov	r0, r1
    7d9c:	ldr	r1, [sp, #172]	; 0xac
    7da0:	movw	r2, #520	; 0x208
    7da4:	bl	0 <memcpy>
    7da8:	ldr	r0, [fp, #-16]
    7dac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7db0:	ldr	r1, [r1, #16]
    7db4:	bl	d2e4 <eval_cursor>
    7db8:	cmp	r0, #0
    7dbc:	beq	7dcc <eval_integer+0xd24>
    7dc0:	mvn	r0, #0
    7dc4:	str	r0, [fp, #-12]
    7dc8:	b	95b4 <eval_integer+0x250c>
    7dcc:	ldr	r0, [fp, #-16]
    7dd0:	add	r0, r0, #8
    7dd4:	sub	lr, fp, #1024	; 0x400
    7dd8:	sub	r1, lr, #772	; 0x304
    7ddc:	bl	0 <coda_cursor_get_num_elements>
    7de0:	cmp	r0, #0
    7de4:	beq	7df4 <eval_integer+0xd4c>
    7de8:	mvn	r0, #0
    7dec:	str	r0, [fp, #-12]
    7df0:	b	95b4 <eval_integer+0x250c>
    7df4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7df8:	mov	r1, #0
    7dfc:	str	r1, [r0, #4]
    7e00:	str	r1, [r0]
    7e04:	ldr	r0, [fp, #-1796]	; 0xfffff8fc
    7e08:	cmp	r0, #0
    7e0c:	ble	7ee4 <eval_integer+0xe3c>
    7e10:	ldr	r0, [fp, #-16]
    7e14:	add	r0, r0, #8
    7e18:	bl	0 <coda_cursor_goto_first_array_element>
    7e1c:	cmp	r0, #0
    7e20:	beq	7e30 <eval_integer+0xd88>
    7e24:	mvn	r0, #0
    7e28:	str	r0, [fp, #-12]
    7e2c:	b	95b4 <eval_integer+0x250c>
    7e30:	movw	r0, #0
    7e34:	str	r0, [fp, #-1800]	; 0xfffff8f8
    7e38:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7e3c:	ldr	r1, [fp, #-1796]	; 0xfffff8fc
    7e40:	cmp	r0, r1
    7e44:	bge	7ee0 <eval_integer+0xe38>
    7e48:	ldr	r0, [fp, #-16]
    7e4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7e50:	ldr	r1, [r1, #20]
    7e54:	sub	r2, fp, #1808	; 0x710
    7e58:	bl	70a8 <eval_integer>
    7e5c:	cmp	r0, #0
    7e60:	beq	7e70 <eval_integer+0xdc8>
    7e64:	mvn	r0, #0
    7e68:	str	r0, [fp, #-12]
    7e6c:	b	95b4 <eval_integer+0x250c>
    7e70:	ldr	r0, [fp, #-1808]	; 0xfffff8f0
    7e74:	ldr	r1, [fp, #-1804]	; 0xfffff8f4
    7e78:	ldr	r2, [fp, #-24]	; 0xffffffe8
    7e7c:	ldr	r3, [r2]
    7e80:	ldr	ip, [r2, #4]
    7e84:	adds	r0, r3, r0
    7e88:	adc	r1, ip, r1
    7e8c:	str	r0, [r2]
    7e90:	str	r1, [r2, #4]
    7e94:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7e98:	ldr	r1, [fp, #-1796]	; 0xfffff8fc
    7e9c:	sub	r1, r1, #1
    7ea0:	cmp	r0, r1
    7ea4:	bge	7ecc <eval_integer+0xe24>
    7ea8:	ldr	r0, [fp, #-16]
    7eac:	add	r0, r0, #8
    7eb0:	bl	0 <coda_cursor_goto_next_array_element>
    7eb4:	cmp	r0, #0
    7eb8:	beq	7ec8 <eval_integer+0xe20>
    7ebc:	mvn	r0, #0
    7ec0:	str	r0, [fp, #-12]
    7ec4:	b	95b4 <eval_integer+0x250c>
    7ec8:	b	7ecc <eval_integer+0xe24>
    7ecc:	b	7ed0 <eval_integer+0xe28>
    7ed0:	ldr	r0, [fp, #-1800]	; 0xfffff8f8
    7ed4:	add	r0, r0, #1
    7ed8:	str	r0, [fp, #-1800]	; 0xfffff8f8
    7edc:	b	7e38 <eval_integer+0xd90>
    7ee0:	b	7ee4 <eval_integer+0xe3c>
    7ee4:	ldr	r0, [fp, #-16]
    7ee8:	add	r0, r0, #8
    7eec:	sub	r1, fp, #1792	; 0x700
    7ef0:	movw	r2, #520	; 0x208
    7ef4:	bl	0 <memcpy>
    7ef8:	b	95ac <eval_integer+0x2504>
    7efc:	ldr	r0, [fp, #-16]
    7f00:	ldr	r0, [r0]
    7f04:	movw	r1, #0
    7f08:	cmp	r0, r1
    7f0c:	beq	7f14 <eval_integer+0xe6c>
    7f10:	b	7f34 <eval_integer+0xe8c>
    7f14:	movw	r0, #0
    7f18:	movt	r0, #0
    7f1c:	movw	r1, #0
    7f20:	movt	r1, #0
    7f24:	movw	r2, #2287	; 0x8ef
    7f28:	movw	r3, #0
    7f2c:	movt	r3, #0
    7f30:	bl	0 <__assert_fail>
    7f34:	ldr	r0, [fp, #-16]
    7f38:	add	r0, r0, #8
    7f3c:	sub	lr, fp, #2048	; 0x800
    7f40:	sub	r1, lr, #280	; 0x118
    7f44:	str	r0, [sp, #168]	; 0xa8
    7f48:	mov	r0, r1
    7f4c:	ldr	r1, [sp, #168]	; 0xa8
    7f50:	movw	r2, #520	; 0x208
    7f54:	bl	0 <memcpy>
    7f58:	ldr	r0, [fp, #-16]
    7f5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    7f60:	ldr	r1, [r1, #16]
    7f64:	bl	d2e4 <eval_cursor>
    7f68:	cmp	r0, #0
    7f6c:	beq	7f7c <eval_integer+0xed4>
    7f70:	mvn	r0, #0
    7f74:	str	r0, [fp, #-12]
    7f78:	b	95b4 <eval_integer+0x250c>
    7f7c:	ldr	r0, [fp, #-16]
    7f80:	add	r0, r0, #8
    7f84:	sub	lr, fp, #2048	; 0x800
    7f88:	sub	r1, lr, #284	; 0x11c
    7f8c:	bl	0 <coda_cursor_get_num_elements>
    7f90:	cmp	r0, #0
    7f94:	beq	7fa4 <eval_integer+0xefc>
    7f98:	mvn	r0, #0
    7f9c:	str	r0, [fp, #-12]
    7fa0:	b	95b4 <eval_integer+0x250c>
    7fa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    7fa8:	mov	r1, #0
    7fac:	str	r1, [r0, #4]
    7fb0:	str	r1, [r0]
    7fb4:	ldr	r0, [fp, #-2332]	; 0xfffff6e4
    7fb8:	cmp	r0, #0
    7fbc:	ble	80c0 <eval_integer+0x1018>
    7fc0:	ldr	r0, [fp, #-16]
    7fc4:	add	r0, r0, #8
    7fc8:	bl	0 <coda_cursor_goto_first_array_element>
    7fcc:	cmp	r0, #0
    7fd0:	beq	7fe0 <eval_integer+0xf38>
    7fd4:	mvn	r0, #0
    7fd8:	str	r0, [fp, #-12]
    7fdc:	b	95b4 <eval_integer+0x250c>
    7fe0:	movw	r0, #0
    7fe4:	str	r0, [fp, #-2336]	; 0xfffff6e0
    7fe8:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    7fec:	ldr	r1, [fp, #-2332]	; 0xfffff6e4
    7ff0:	cmp	r0, r1
    7ff4:	bge	80bc <eval_integer+0x1014>
    7ff8:	ldr	r0, [fp, #-16]
    7ffc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8000:	ldr	r1, [r1, #20]
    8004:	sub	lr, fp, #2048	; 0x800
    8008:	sub	r2, lr, #296	; 0x128
    800c:	bl	70a8 <eval_integer>
    8010:	cmp	r0, #0
    8014:	beq	8024 <eval_integer+0xf7c>
    8018:	mvn	r0, #0
    801c:	str	r0, [fp, #-12]
    8020:	b	95b4 <eval_integer+0x250c>
    8024:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    8028:	cmp	r0, #0
    802c:	beq	805c <eval_integer+0xfb4>
    8030:	ldr	r0, [fp, #-2344]	; 0xfffff6d8
    8034:	ldr	r1, [fp, #-2340]	; 0xfffff6dc
    8038:	ldr	r2, [fp, #-24]	; 0xffffffe8
    803c:	ldr	r3, [r2]
    8040:	ldr	r2, [r2, #4]
    8044:	subs	r0, r3, r0
    8048:	sbcs	r1, r2, r1
    804c:	str	r0, [sp, #164]	; 0xa4
    8050:	str	r1, [sp, #160]	; 0xa0
    8054:	bge	8070 <eval_integer+0xfc8>
    8058:	b	805c <eval_integer+0xfb4>
    805c:	ldr	r0, [fp, #-2344]	; 0xfffff6d8
    8060:	ldr	r1, [fp, #-2340]	; 0xfffff6dc
    8064:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8068:	str	r1, [r2, #4]
    806c:	str	r0, [r2]
    8070:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    8074:	ldr	r1, [fp, #-2332]	; 0xfffff6e4
    8078:	sub	r1, r1, #1
    807c:	cmp	r0, r1
    8080:	bge	80a8 <eval_integer+0x1000>
    8084:	ldr	r0, [fp, #-16]
    8088:	add	r0, r0, #8
    808c:	bl	0 <coda_cursor_goto_next_array_element>
    8090:	cmp	r0, #0
    8094:	beq	80a4 <eval_integer+0xffc>
    8098:	mvn	r0, #0
    809c:	str	r0, [fp, #-12]
    80a0:	b	95b4 <eval_integer+0x250c>
    80a4:	b	80a8 <eval_integer+0x1000>
    80a8:	b	80ac <eval_integer+0x1004>
    80ac:	ldr	r0, [fp, #-2336]	; 0xfffff6e0
    80b0:	add	r0, r0, #1
    80b4:	str	r0, [fp, #-2336]	; 0xfffff6e0
    80b8:	b	7fe8 <eval_integer+0xf40>
    80bc:	b	80c0 <eval_integer+0x1018>
    80c0:	ldr	r0, [fp, #-16]
    80c4:	add	r0, r0, #8
    80c8:	sub	lr, fp, #2048	; 0x800
    80cc:	sub	r1, lr, #280	; 0x118
    80d0:	movw	r2, #520	; 0x208
    80d4:	bl	0 <memcpy>
    80d8:	b	95ac <eval_integer+0x2504>
    80dc:	ldr	r0, [fp, #-16]
    80e0:	ldr	r0, [r0]
    80e4:	movw	r1, #0
    80e8:	cmp	r0, r1
    80ec:	beq	80f4 <eval_integer+0x104c>
    80f0:	b	8114 <eval_integer+0x106c>
    80f4:	movw	r0, #0
    80f8:	movt	r0, #0
    80fc:	movw	r1, #0
    8100:	movt	r1, #0
    8104:	movw	r2, #2335	; 0x91f
    8108:	movw	r3, #0
    810c:	movt	r3, #0
    8110:	bl	0 <__assert_fail>
    8114:	ldr	r0, [fp, #-16]
    8118:	add	r0, r0, #8
    811c:	sub	r1, fp, #2864	; 0xb30
    8120:	str	r0, [sp, #156]	; 0x9c
    8124:	mov	r0, r1
    8128:	ldr	r1, [sp, #156]	; 0x9c
    812c:	movw	r2, #520	; 0x208
    8130:	bl	0 <memcpy>
    8134:	ldr	r0, [fp, #-16]
    8138:	ldr	r1, [fp, #-28]	; 0xffffffe4
    813c:	ldr	r1, [r1, #16]
    8140:	bl	d2e4 <eval_cursor>
    8144:	cmp	r0, #0
    8148:	beq	8158 <eval_integer+0x10b0>
    814c:	mvn	r0, #0
    8150:	str	r0, [fp, #-12]
    8154:	b	95b4 <eval_integer+0x250c>
    8158:	ldr	r0, [fp, #-16]
    815c:	add	r0, r0, #8
    8160:	sub	lr, fp, #2048	; 0x800
    8164:	sub	r1, lr, #820	; 0x334
    8168:	bl	0 <coda_cursor_get_num_elements>
    816c:	cmp	r0, #0
    8170:	beq	8180 <eval_integer+0x10d8>
    8174:	mvn	r0, #0
    8178:	str	r0, [fp, #-12]
    817c:	b	95b4 <eval_integer+0x250c>
    8180:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8184:	mov	r1, #0
    8188:	str	r1, [r0, #4]
    818c:	str	r1, [r0]
    8190:	ldr	r0, [fp, #-2868]	; 0xfffff4cc
    8194:	cmp	r0, #0
    8198:	ble	8298 <eval_integer+0x11f0>
    819c:	ldr	r0, [fp, #-16]
    81a0:	add	r0, r0, #8
    81a4:	bl	0 <coda_cursor_goto_first_array_element>
    81a8:	cmp	r0, #0
    81ac:	beq	81bc <eval_integer+0x1114>
    81b0:	mvn	r0, #0
    81b4:	str	r0, [fp, #-12]
    81b8:	b	95b4 <eval_integer+0x250c>
    81bc:	movw	r0, #0
    81c0:	str	r0, [fp, #-2872]	; 0xfffff4c8
    81c4:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    81c8:	ldr	r1, [fp, #-2868]	; 0xfffff4cc
    81cc:	cmp	r0, r1
    81d0:	bge	8294 <eval_integer+0x11ec>
    81d4:	ldr	r0, [fp, #-16]
    81d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    81dc:	ldr	r1, [r1, #20]
    81e0:	sub	r2, fp, #2880	; 0xb40
    81e4:	bl	70a8 <eval_integer>
    81e8:	cmp	r0, #0
    81ec:	beq	81fc <eval_integer+0x1154>
    81f0:	mvn	r0, #0
    81f4:	str	r0, [fp, #-12]
    81f8:	b	95b4 <eval_integer+0x250c>
    81fc:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    8200:	cmp	r0, #0
    8204:	beq	8234 <eval_integer+0x118c>
    8208:	ldr	r0, [fp, #-2880]	; 0xfffff4c0
    820c:	ldr	r1, [fp, #-2876]	; 0xfffff4c4
    8210:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8214:	ldr	r3, [r2]
    8218:	ldr	r2, [r2, #4]
    821c:	subs	r0, r0, r3
    8220:	sbcs	r1, r1, r2
    8224:	str	r0, [sp, #152]	; 0x98
    8228:	str	r1, [sp, #148]	; 0x94
    822c:	bge	8248 <eval_integer+0x11a0>
    8230:	b	8234 <eval_integer+0x118c>
    8234:	ldr	r0, [fp, #-2880]	; 0xfffff4c0
    8238:	ldr	r1, [fp, #-2876]	; 0xfffff4c4
    823c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8240:	str	r1, [r2, #4]
    8244:	str	r0, [r2]
    8248:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    824c:	ldr	r1, [fp, #-2868]	; 0xfffff4cc
    8250:	sub	r1, r1, #1
    8254:	cmp	r0, r1
    8258:	bge	8280 <eval_integer+0x11d8>
    825c:	ldr	r0, [fp, #-16]
    8260:	add	r0, r0, #8
    8264:	bl	0 <coda_cursor_goto_next_array_element>
    8268:	cmp	r0, #0
    826c:	beq	827c <eval_integer+0x11d4>
    8270:	mvn	r0, #0
    8274:	str	r0, [fp, #-12]
    8278:	b	95b4 <eval_integer+0x250c>
    827c:	b	8280 <eval_integer+0x11d8>
    8280:	b	8284 <eval_integer+0x11dc>
    8284:	ldr	r0, [fp, #-2872]	; 0xfffff4c8
    8288:	add	r0, r0, #1
    828c:	str	r0, [fp, #-2872]	; 0xfffff4c8
    8290:	b	81c4 <eval_integer+0x111c>
    8294:	b	8298 <eval_integer+0x11f0>
    8298:	ldr	r0, [fp, #-16]
    829c:	add	r0, r0, #8
    82a0:	sub	r1, fp, #2864	; 0xb30
    82a4:	movw	r2, #520	; 0x208
    82a8:	bl	0 <memcpy>
    82ac:	b	95ac <eval_integer+0x2504>
    82b0:	ldr	r0, [fp, #-16]
    82b4:	ldr	r0, [r0]
    82b8:	movw	r1, #0
    82bc:	cmp	r0, r1
    82c0:	beq	82c8 <eval_integer+0x1220>
    82c4:	b	82e8 <eval_integer+0x1240>
    82c8:	movw	r0, #0
    82cc:	movt	r0, #0
    82d0:	movw	r1, #0
    82d4:	movt	r1, #0
    82d8:	movw	r2, #2383	; 0x94f
    82dc:	movw	r3, #0
    82e0:	movt	r3, #0
    82e4:	bl	0 <__assert_fail>
    82e8:	ldr	r0, [fp, #-16]
    82ec:	add	r0, r0, #8
    82f0:	sub	lr, fp, #3072	; 0xc00
    82f4:	sub	r1, lr, #328	; 0x148
    82f8:	str	r0, [sp, #144]	; 0x90
    82fc:	mov	r0, r1
    8300:	ldr	r1, [sp, #144]	; 0x90
    8304:	movw	r2, #520	; 0x208
    8308:	bl	0 <memcpy>
    830c:	ldr	r0, [fp, #-16]
    8310:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8314:	ldr	r1, [r1, #16]
    8318:	bl	d2e4 <eval_cursor>
    831c:	cmp	r0, #0
    8320:	beq	8330 <eval_integer+0x1288>
    8324:	mvn	r0, #0
    8328:	str	r0, [fp, #-12]
    832c:	b	95b4 <eval_integer+0x250c>
    8330:	ldr	r0, [fp, #-16]
    8334:	add	r0, r0, #8
    8338:	sub	lr, fp, #3072	; 0xc00
    833c:	sub	r1, lr, #332	; 0x14c
    8340:	bl	0 <coda_cursor_get_num_elements>
    8344:	cmp	r0, #0
    8348:	beq	8358 <eval_integer+0x12b0>
    834c:	mvn	r0, #0
    8350:	str	r0, [fp, #-12]
    8354:	b	95b4 <eval_integer+0x250c>
    8358:	ldr	r0, [fp, #-24]	; 0xffffffe8
    835c:	mov	r1, #0
    8360:	str	r1, [r0, #4]
    8364:	str	r1, [r0]
    8368:	ldr	r0, [fp, #-3404]	; 0xfffff2b4
    836c:	cmp	r0, #0
    8370:	ble	846c <eval_integer+0x13c4>
    8374:	ldr	r0, [fp, #-16]
    8378:	add	r0, r0, #8
    837c:	bl	0 <coda_cursor_goto_first_array_element>
    8380:	cmp	r0, #0
    8384:	beq	8394 <eval_integer+0x12ec>
    8388:	mvn	r0, #0
    838c:	str	r0, [fp, #-12]
    8390:	b	95b4 <eval_integer+0x250c>
    8394:	movw	r0, #0
    8398:	str	r0, [fp, #-3408]	; 0xfffff2b0
    839c:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    83a0:	ldr	r1, [fp, #-3404]	; 0xfffff2b4
    83a4:	cmp	r0, r1
    83a8:	bge	8468 <eval_integer+0x13c0>
    83ac:	ldr	r0, [fp, #-16]
    83b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    83b4:	ldr	r1, [r1, #20]
    83b8:	sub	lr, fp, #3072	; 0xc00
    83bc:	sub	r2, lr, #340	; 0x154
    83c0:	bl	5288 <eval_boolean>
    83c4:	cmp	r0, #0
    83c8:	beq	83d8 <eval_integer+0x1330>
    83cc:	mvn	r0, #0
    83d0:	str	r0, [fp, #-12]
    83d4:	b	95b4 <eval_integer+0x250c>
    83d8:	ldr	r0, [fp, #-3412]	; 0xfffff2ac
    83dc:	cmp	r0, #0
    83e0:	beq	841c <eval_integer+0x1374>
    83e4:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    83e8:	asr	r1, r0, #31
    83ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    83f0:	str	r0, [r2]
    83f4:	str	r1, [r2, #4]
    83f8:	ldr	r0, [fp, #-16]
    83fc:	add	r0, r0, #8
    8400:	sub	lr, fp, #3072	; 0xc00
    8404:	sub	r1, lr, #328	; 0x148
    8408:	movw	r2, #520	; 0x208
    840c:	bl	0 <memcpy>
    8410:	movw	r0, #0
    8414:	str	r0, [fp, #-12]
    8418:	b	95b4 <eval_integer+0x250c>
    841c:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    8420:	ldr	r1, [fp, #-3404]	; 0xfffff2b4
    8424:	sub	r1, r1, #1
    8428:	cmp	r0, r1
    842c:	bge	8454 <eval_integer+0x13ac>
    8430:	ldr	r0, [fp, #-16]
    8434:	add	r0, r0, #8
    8438:	bl	0 <coda_cursor_goto_next_array_element>
    843c:	cmp	r0, #0
    8440:	beq	8450 <eval_integer+0x13a8>
    8444:	mvn	r0, #0
    8448:	str	r0, [fp, #-12]
    844c:	b	95b4 <eval_integer+0x250c>
    8450:	b	8454 <eval_integer+0x13ac>
    8454:	b	8458 <eval_integer+0x13b0>
    8458:	ldr	r0, [fp, #-3408]	; 0xfffff2b0
    845c:	add	r0, r0, #1
    8460:	str	r0, [fp, #-3408]	; 0xfffff2b0
    8464:	b	839c <eval_integer+0x12f4>
    8468:	b	846c <eval_integer+0x13c4>
    846c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8470:	mvn	r1, #0
    8474:	str	r1, [r0, #4]
    8478:	str	r1, [r0]
    847c:	ldr	r0, [fp, #-16]
    8480:	add	r0, r0, #8
    8484:	sub	lr, fp, #3072	; 0xc00
    8488:	sub	r1, lr, #328	; 0x148
    848c:	movw	r2, #520	; 0x208
    8490:	bl	0 <memcpy>
    8494:	b	95ac <eval_integer+0x2504>
    8498:	movw	r0, #0
    849c:	str	r0, [fp, #-3944]	; 0xfffff098
    84a0:	ldr	r1, [fp, #-16]
    84a4:	ldr	r1, [r1]
    84a8:	cmp	r1, r0
    84ac:	beq	84b4 <eval_integer+0x140c>
    84b0:	b	84d4 <eval_integer+0x142c>
    84b4:	movw	r0, #0
    84b8:	movt	r0, #0
    84bc:	movw	r1, #0
    84c0:	movt	r1, #0
    84c4:	movw	r2, #2435	; 0x983
    84c8:	movw	r3, #0
    84cc:	movt	r3, #0
    84d0:	bl	0 <__assert_fail>
    84d4:	ldr	r0, [fp, #-16]
    84d8:	add	r0, r0, #8
    84dc:	sub	r1, fp, #3936	; 0xf60
    84e0:	str	r0, [sp, #140]	; 0x8c
    84e4:	mov	r0, r1
    84e8:	ldr	r1, [sp, #140]	; 0x8c
    84ec:	movw	r2, #520	; 0x208
    84f0:	bl	0 <memcpy>
    84f4:	ldr	r0, [fp, #-16]
    84f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    84fc:	ldr	r1, [r1, #16]
    8500:	bl	d2e4 <eval_cursor>
    8504:	cmp	r0, #0
    8508:	beq	8518 <eval_integer+0x1470>
    850c:	mvn	r0, #0
    8510:	str	r0, [fp, #-12]
    8514:	b	95b4 <eval_integer+0x250c>
    8518:	ldr	r0, [pc, #4028]	; 94dc <eval_integer+0x2434>
    851c:	ldr	r0, [pc, r0]
    8520:	str	r0, [sp, #136]	; 0x88
    8524:	bl	0 <__aeabi_read_tp>
    8528:	ldr	ip, [sp, #136]	; 0x88
    852c:	ldr	lr, [r0, ip]
    8530:	str	lr, [fp, #-3940]	; 0xfffff09c
    8534:	mov	lr, #0
    8538:	str	lr, [r0, ip]
    853c:	ldr	r0, [fp, #-16]
    8540:	add	r0, r0, #8
    8544:	bl	0 <coda_cursor_goto_first_array_element>
    8548:	cmp	r0, #0
    854c:	beq	8580 <eval_integer+0x14d8>
    8550:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    8554:	ldr	r1, [pc, #4068]	; 9540 <eval_integer+0x2498>
    8558:	ldr	r1, [pc, r1]
    855c:	str	r0, [sp, #132]	; 0x84
    8560:	str	r1, [sp, #128]	; 0x80
    8564:	bl	0 <__aeabi_read_tp>
    8568:	ldr	r1, [sp, #132]	; 0x84
    856c:	ldr	ip, [sp, #128]	; 0x80
    8570:	str	r1, [r0, ip]
    8574:	mvn	r0, #0
    8578:	str	r0, [fp, #-12]
    857c:	b	95b4 <eval_integer+0x250c>
    8580:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8584:	mov	r1, #0
    8588:	str	r1, [r0, #4]
    858c:	str	r1, [r0]
    8590:	ldr	r0, [fp, #-3944]	; 0xfffff098
    8594:	cmp	r0, #0
    8598:	movw	r0, #0
    859c:	movne	r0, #1
    85a0:	mvn	r1, #0
    85a4:	eor	r0, r0, r1
    85a8:	tst	r0, #1
    85ac:	beq	8700 <eval_integer+0x1658>
    85b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    85b4:	ldr	r0, [r0, #24]
    85b8:	movw	r1, #0
    85bc:	cmp	r0, r1
    85c0:	beq	8618 <eval_integer+0x1570>
    85c4:	ldr	r0, [fp, #-16]
    85c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    85cc:	ldr	r1, [r1, #20]
    85d0:	sub	lr, fp, #3072	; 0xc00
    85d4:	sub	r2, lr, #872	; 0x368
    85d8:	bl	5288 <eval_boolean>
    85dc:	cmp	r0, #0
    85e0:	beq	8614 <eval_integer+0x156c>
    85e4:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    85e8:	ldr	r1, [pc, #4060]	; 95cc <eval_integer+0x2524>
    85ec:	ldr	r1, [pc, r1]
    85f0:	str	r0, [sp, #124]	; 0x7c
    85f4:	str	r1, [sp, #120]	; 0x78
    85f8:	bl	0 <__aeabi_read_tp>
    85fc:	ldr	r1, [sp, #124]	; 0x7c
    8600:	ldr	ip, [sp, #120]	; 0x78
    8604:	str	r1, [r0, ip]
    8608:	mvn	r0, #0
    860c:	str	r0, [fp, #-12]
    8610:	b	95b4 <eval_integer+0x250c>
    8614:	b	8618 <eval_integer+0x1570>
    8618:	ldr	r0, [fp, #-3944]	; 0xfffff098
    861c:	cmp	r0, #0
    8620:	beq	8638 <eval_integer+0x1590>
    8624:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8628:	mvn	r1, #0
    862c:	str	r1, [r0, #4]
    8630:	str	r1, [r0]
    8634:	b	86fc <eval_integer+0x1654>
    8638:	ldr	r0, [fp, #-16]
    863c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8640:	ldr	r1, [r1, #20]
    8644:	sub	lr, fp, #3072	; 0xc00
    8648:	sub	r2, lr, #872	; 0x368
    864c:	bl	5288 <eval_boolean>
    8650:	cmp	r0, #0
    8654:	beq	8688 <eval_integer+0x15e0>
    8658:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    865c:	ldr	r1, [pc, #3940]	; 95c8 <eval_integer+0x2520>
    8660:	ldr	r1, [pc, r1]
    8664:	str	r0, [sp, #116]	; 0x74
    8668:	str	r1, [sp, #112]	; 0x70
    866c:	bl	0 <__aeabi_read_tp>
    8670:	ldr	r1, [sp, #116]	; 0x74
    8674:	ldr	ip, [sp, #112]	; 0x70
    8678:	str	r1, [r0, ip]
    867c:	mvn	r0, #0
    8680:	str	r0, [fp, #-12]
    8684:	b	95b4 <eval_integer+0x250c>
    8688:	ldr	r0, [fp, #-3944]	; 0xfffff098
    868c:	cmp	r0, #0
    8690:	bne	86f8 <eval_integer+0x1650>
    8694:	ldr	r0, [fp, #-24]	; 0xffffffe8
    8698:	ldr	r1, [r0]
    869c:	ldr	r2, [r0, #4]
    86a0:	adds	r1, r1, #1
    86a4:	adc	r2, r2, #0
    86a8:	str	r1, [r0]
    86ac:	str	r2, [r0, #4]
    86b0:	ldr	r0, [fp, #-16]
    86b4:	add	r0, r0, #8
    86b8:	bl	0 <coda_cursor_goto_next_array_element>
    86bc:	cmp	r0, #0
    86c0:	beq	86f4 <eval_integer+0x164c>
    86c4:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    86c8:	ldr	r1, [pc, #3828]	; 95c4 <eval_integer+0x251c>
    86cc:	ldr	r1, [pc, r1]
    86d0:	str	r0, [sp, #108]	; 0x6c
    86d4:	str	r1, [sp, #104]	; 0x68
    86d8:	bl	0 <__aeabi_read_tp>
    86dc:	ldr	r1, [sp, #108]	; 0x6c
    86e0:	ldr	ip, [sp, #104]	; 0x68
    86e4:	str	r1, [r0, ip]
    86e8:	mvn	r0, #0
    86ec:	str	r0, [fp, #-12]
    86f0:	b	95b4 <eval_integer+0x250c>
    86f4:	b	86f8 <eval_integer+0x1650>
    86f8:	b	86fc <eval_integer+0x1654>
    86fc:	b	8590 <eval_integer+0x14e8>
    8700:	ldr	r0, [fp, #-3940]	; 0xfffff09c
    8704:	ldr	r1, [pc, #3764]	; 95c0 <eval_integer+0x2518>
    8708:	ldr	r1, [pc, r1]
    870c:	str	r0, [sp, #100]	; 0x64
    8710:	str	r1, [sp, #96]	; 0x60
    8714:	bl	0 <__aeabi_read_tp>
    8718:	ldr	r1, [sp, #100]	; 0x64
    871c:	ldr	ip, [sp, #96]	; 0x60
    8720:	str	r1, [r0, ip]
    8724:	ldr	r0, [fp, #-16]
    8728:	add	r0, r0, #8
    872c:	sub	ip, fp, #3936	; 0xf60
    8730:	mov	r1, ip
    8734:	movw	r2, #520	; 0x208
    8738:	bl	0 <memcpy>
    873c:	b	95ac <eval_integer+0x2504>
    8740:	ldr	r0, [fp, #-28]	; 0xffffffe4
    8744:	ldr	r0, [r0, #16]
    8748:	ldr	r0, [r0, #4]
    874c:	cmp	r0, #4
    8750:	bne	8838 <eval_integer+0x1790>
    8754:	ldr	r0, [fp, #-16]
    8758:	ldr	r0, [r0]
    875c:	movw	r1, #0
    8760:	cmp	r0, r1
    8764:	beq	876c <eval_integer+0x16c4>
    8768:	b	878c <eval_integer+0x16e4>
    876c:	movw	r0, #0
    8770:	movt	r0, #0
    8774:	movw	r1, #0
    8778:	movt	r1, #0
    877c:	movw	r2, #2491	; 0x9bb
    8780:	movw	r3, #0
    8784:	movt	r3, #0
    8788:	bl	0 <__assert_fail>
    878c:	ldr	r0, [fp, #-16]
    8790:	add	r0, r0, #8
    8794:	sub	lr, fp, #4096	; 0x1000
    8798:	sub	r1, lr, #368	; 0x170
    879c:	str	r0, [sp, #92]	; 0x5c
    87a0:	mov	r0, r1
    87a4:	ldr	r1, [sp, #92]	; 0x5c
    87a8:	movw	r2, #520	; 0x208
    87ac:	bl	0 <memcpy>
    87b0:	ldr	r0, [fp, #-16]
    87b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    87b8:	ldr	r1, [r1, #16]
    87bc:	bl	d2e4 <eval_cursor>
    87c0:	cmp	r0, #0
    87c4:	beq	87d4 <eval_integer+0x172c>
    87c8:	mvn	r0, #0
    87cc:	str	r0, [fp, #-12]
    87d0:	b	95b4 <eval_integer+0x250c>
    87d4:	ldr	r0, [fp, #-16]
    87d8:	add	r0, r0, #8
    87dc:	sub	lr, fp, #4096	; 0x1000
    87e0:	sub	r1, lr, #372	; 0x174
    87e4:	bl	0 <coda_cursor_get_string_length>
    87e8:	cmp	r0, #0
    87ec:	beq	87fc <eval_integer+0x1754>
    87f0:	mvn	r0, #0
    87f4:	str	r0, [fp, #-12]
    87f8:	b	95b4 <eval_integer+0x250c>
    87fc:	ldr	r0, [sp, #256]	; 0x100
    8800:	ldr	r1, [r0, #576]	; 0x240
    8804:	asr	r2, r1, #31
    8808:	ldr	r3, [fp, #-24]	; 0xffffffe8
    880c:	str	r1, [r3]
    8810:	str	r2, [r3, #4]
    8814:	ldr	r1, [fp, #-16]
    8818:	add	r1, r1, #8
    881c:	sub	lr, fp, #4096	; 0x1000
    8820:	sub	r2, lr, #368	; 0x170
    8824:	mov	r0, r1
    8828:	mov	r1, r2
    882c:	movw	r2, #520	; 0x208
    8830:	bl	0 <memcpy>
    8834:	b	88a8 <eval_integer+0x1800>
    8838:	ldr	r0, [fp, #-16]
    883c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8840:	ldr	r1, [r1, #16]
    8844:	sub	lr, fp, #4096	; 0x1000
    8848:	sub	r2, lr, #376	; 0x178
    884c:	sub	lr, fp, #4096	; 0x1000
    8850:	sub	r3, lr, #380	; 0x17c
    8854:	sub	ip, fp, #4480	; 0x1180
    8858:	str	ip, [sp]
    885c:	bl	ac2c <eval_string>
    8860:	cmp	r0, #0
    8864:	beq	8874 <eval_integer+0x17cc>
    8868:	mvn	r0, #0
    886c:	str	r0, [fp, #-12]
    8870:	b	95b4 <eval_integer+0x250c>
    8874:	ldr	r0, [sp, #256]	; 0x100
    8878:	ldr	r1, [r0, #568]	; 0x238
    887c:	cmp	r1, #0
    8880:	ble	8890 <eval_integer+0x17e8>
    8884:	ldr	r0, [sp, #256]	; 0x100
    8888:	ldr	r0, [r0, #564]	; 0x234
    888c:	bl	0 <free>
    8890:	ldr	r0, [sp, #256]	; 0x100
    8894:	ldr	r1, [r0, #568]	; 0x238
    8898:	asr	r2, r1, #31
    889c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    88a0:	str	r1, [r3]
    88a4:	str	r2, [r3, #4]
    88a8:	b	95ac <eval_integer+0x2504>
    88ac:	ldr	r0, [fp, #-16]
    88b0:	ldr	r0, [r0]
    88b4:	movw	r1, #0
    88b8:	cmp	r0, r1
    88bc:	beq	88c4 <eval_integer+0x181c>
    88c0:	b	88e4 <eval_integer+0x183c>
    88c4:	movw	r0, #0
    88c8:	movt	r0, #0
    88cc:	movw	r1, #0
    88d0:	movt	r1, #0
    88d4:	movw	r2, #2528	; 0x9e0
    88d8:	movw	r3, #0
    88dc:	movt	r3, #0
    88e0:	bl	0 <__assert_fail>
    88e4:	ldr	r0, [fp, #-16]
    88e8:	add	r0, r0, #8
    88ec:	add	lr, sp, #4096	; 0x1000
    88f0:	add	r1, lr, #456	; 0x1c8
    88f4:	str	r0, [sp, #88]	; 0x58
    88f8:	mov	r0, r1
    88fc:	ldr	r1, [sp, #88]	; 0x58
    8900:	movw	r2, #520	; 0x208
    8904:	bl	0 <memcpy>
    8908:	ldr	r0, [fp, #-16]
    890c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8910:	ldr	r1, [r1, #16]
    8914:	bl	d2e4 <eval_cursor>
    8918:	cmp	r0, #0
    891c:	beq	892c <eval_integer+0x1884>
    8920:	mvn	r0, #0
    8924:	str	r0, [fp, #-12]
    8928:	b	95b4 <eval_integer+0x250c>
    892c:	ldr	r0, [fp, #-16]
    8930:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8934:	ldr	r1, [r1, #20]
    8938:	add	lr, sp, #4096	; 0x1000
    893c:	add	r2, lr, #408	; 0x198
    8940:	bl	70a8 <eval_integer>
    8944:	cmp	r0, #0
    8948:	beq	8958 <eval_integer+0x18b0>
    894c:	mvn	r0, #0
    8950:	str	r0, [fp, #-12]
    8954:	b	95b4 <eval_integer+0x250c>
    8958:	add	lr, sp, #4096	; 0x1000
    895c:	add	r2, lr, #424	; 0x1a8
    8960:	ldr	r0, [fp, #-16]
    8964:	add	r0, r0, #8
    8968:	add	lr, sp, #4096	; 0x1000
    896c:	add	r1, lr, #420	; 0x1a4
    8970:	bl	0 <coda_cursor_get_array_dim>
    8974:	cmp	r0, #0
    8978:	beq	8988 <eval_integer+0x18e0>
    897c:	mvn	r0, #0
    8980:	str	r0, [fp, #-12]
    8984:	b	95b4 <eval_integer+0x250c>
    8988:	ldr	r0, [sp, #256]	; 0x100
    898c:	ldr	r1, [r0]
    8990:	cmn	r1, #1
    8994:	bgt	89c0 <eval_integer+0x1918>
    8998:	b	899c <eval_integer+0x18f4>
    899c:	ldr	r0, [sp, #256]	; 0x100
    89a0:	ldr	r2, [r0, #-4]
    89a4:	mvn	r0, #400	; 0x190
    89a8:	movw	r1, #0
    89ac:	movt	r1, #0
    89b0:	bl	0 <coda_set_error>
    89b4:	mvn	r0, #0
    89b8:	str	r0, [fp, #-12]
    89bc:	b	95b4 <eval_integer+0x250c>
    89c0:	ldr	r0, [sp, #256]	; 0x100
    89c4:	ldr	r1, [r0, #-4]
    89c8:	ldr	r2, [r0]
    89cc:	ldr	r3, [r0, #8]
    89d0:	subs	r1, r1, r3
    89d4:	sbcs	r2, r2, r3, asr #31
    89d8:	str	r1, [sp, #84]	; 0x54
    89dc:	str	r2, [sp, #80]	; 0x50
    89e0:	blt	8a10 <eval_integer+0x1968>
    89e4:	b	89e8 <eval_integer+0x1940>
    89e8:	ldr	r0, [sp, #256]	; 0x100
    89ec:	ldr	r2, [r0, #-4]
    89f0:	ldr	r3, [r0, #8]
    89f4:	mvn	r0, #400	; 0x190
    89f8:	movw	r1, #0
    89fc:	movt	r1, #0
    8a00:	bl	0 <coda_set_error>
    8a04:	mvn	r0, #0
    8a08:	str	r0, [fp, #-12]
    8a0c:	b	95b4 <eval_integer+0x250c>
    8a10:	ldr	r0, [fp, #-16]
    8a14:	add	r0, r0, #8
    8a18:	add	lr, sp, #4096	; 0x1000
    8a1c:	add	r1, lr, #456	; 0x1c8
    8a20:	mov	r2, #520	; 0x208
    8a24:	bl	0 <memcpy>
    8a28:	ldr	r1, [sp, #256]	; 0x100
    8a2c:	ldr	r2, [r1, #-4]
    8a30:	add	lr, sp, #4096	; 0x1000
    8a34:	add	lr, lr, #424	; 0x1a8
    8a38:	ldr	r2, [lr, r2, lsl #2]
    8a3c:	asr	lr, r2, #31
    8a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8a44:	str	r2, [r3]
    8a48:	str	lr, [r3, #4]
    8a4c:	str	r0, [sp, #76]	; 0x4c
    8a50:	b	95ac <eval_integer+0x2504>
    8a54:	ldr	r0, [fp, #-16]
    8a58:	ldr	r0, [r0]
    8a5c:	movw	r1, #0
    8a60:	cmp	r0, r1
    8a64:	beq	8a6c <eval_integer+0x19c4>
    8a68:	b	8a8c <eval_integer+0x19e4>
    8a6c:	movw	r0, #0
    8a70:	movt	r0, #0
    8a74:	movw	r1, #0
    8a78:	movt	r1, #0
    8a7c:	movw	r2, #2563	; 0xa03
    8a80:	movw	r3, #0
    8a84:	movt	r3, #0
    8a88:	bl	0 <__assert_fail>
    8a8c:	ldr	r0, [fp, #-16]
    8a90:	add	r0, r0, #8
    8a94:	add	r1, sp, #3984	; 0xf90
    8a98:	str	r0, [sp, #72]	; 0x48
    8a9c:	mov	r0, r1
    8aa0:	ldr	r1, [sp, #72]	; 0x48
    8aa4:	movw	r2, #520	; 0x208
    8aa8:	bl	0 <memcpy>
    8aac:	ldr	r0, [fp, #-16]
    8ab0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8ab4:	ldr	r1, [r1, #16]
    8ab8:	bl	d2e4 <eval_cursor>
    8abc:	cmp	r0, #0
    8ac0:	beq	8ad0 <eval_integer+0x1a28>
    8ac4:	mvn	r0, #0
    8ac8:	str	r0, [fp, #-12]
    8acc:	b	95b4 <eval_integer+0x250c>
    8ad0:	ldr	r0, [fp, #-16]
    8ad4:	add	r0, r0, #8
    8ad8:	add	lr, sp, #3072	; 0xc00
    8adc:	add	r1, lr, #908	; 0x38c
    8ae0:	bl	0 <coda_cursor_get_type>
    8ae4:	cmp	r0, #0
    8ae8:	beq	8af8 <eval_integer+0x1a50>
    8aec:	mvn	r0, #0
    8af0:	str	r0, [fp, #-12]
    8af4:	b	95b4 <eval_integer+0x250c>
    8af8:	ldr	r0, [sp, #3980]	; 0xf8c
    8afc:	add	lr, sp, #3072	; 0xc00
    8b00:	add	r1, lr, #904	; 0x388
    8b04:	bl	0 <coda_type_get_array_num_dims>
    8b08:	cmp	r0, #0
    8b0c:	beq	8b1c <eval_integer+0x1a74>
    8b10:	mvn	r0, #0
    8b14:	str	r0, [fp, #-12]
    8b18:	b	95b4 <eval_integer+0x250c>
    8b1c:	ldr	r0, [fp, #-16]
    8b20:	add	r0, r0, #8
    8b24:	add	r1, sp, #3984	; 0xf90
    8b28:	mov	r2, #520	; 0x208
    8b2c:	bl	0 <memcpy>
    8b30:	ldr	r1, [sp, #3976]	; 0xf88
    8b34:	asr	r2, r1, #31
    8b38:	ldr	lr, [fp, #-24]	; 0xffffffe8
    8b3c:	str	r1, [lr]
    8b40:	str	r2, [lr, #4]
    8b44:	str	r0, [sp, #68]	; 0x44
    8b48:	b	95ac <eval_integer+0x2504>
    8b4c:	ldr	r0, [fp, #-16]
    8b50:	ldr	r0, [r0]
    8b54:	movw	r1, #0
    8b58:	cmp	r0, r1
    8b5c:	beq	8b64 <eval_integer+0x1abc>
    8b60:	b	8b84 <eval_integer+0x1adc>
    8b64:	movw	r0, #0
    8b68:	movt	r0, #0
    8b6c:	movw	r1, #0
    8b70:	movt	r1, #0
    8b74:	movw	r2, #2586	; 0xa1a
    8b78:	movw	r3, #0
    8b7c:	movt	r3, #0
    8b80:	bl	0 <__assert_fail>
    8b84:	ldr	r0, [fp, #-16]
    8b88:	add	r0, r0, #8
    8b8c:	add	r1, sp, #3456	; 0xd80
    8b90:	str	r0, [sp, #64]	; 0x40
    8b94:	mov	r0, r1
    8b98:	ldr	r1, [sp, #64]	; 0x40
    8b9c:	movw	r2, #520	; 0x208
    8ba0:	bl	0 <memcpy>
    8ba4:	ldr	r0, [fp, #-16]
    8ba8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8bac:	ldr	r1, [r1, #16]
    8bb0:	bl	d2e4 <eval_cursor>
    8bb4:	cmp	r0, #0
    8bb8:	beq	8bc8 <eval_integer+0x1b20>
    8bbc:	mvn	r0, #0
    8bc0:	str	r0, [fp, #-12]
    8bc4:	b	95b4 <eval_integer+0x250c>
    8bc8:	ldr	r0, [fp, #-16]
    8bcc:	add	r0, r0, #8
    8bd0:	add	lr, sp, #3072	; 0xc00
    8bd4:	add	r1, lr, #380	; 0x17c
    8bd8:	bl	0 <coda_cursor_get_num_elements>
    8bdc:	cmp	r0, #0
    8be0:	beq	8bf0 <eval_integer+0x1b48>
    8be4:	mvn	r0, #0
    8be8:	str	r0, [fp, #-12]
    8bec:	b	95b4 <eval_integer+0x250c>
    8bf0:	ldr	r0, [fp, #-16]
    8bf4:	add	r0, r0, #8
    8bf8:	add	r1, sp, #3456	; 0xd80
    8bfc:	mov	r2, #520	; 0x208
    8c00:	bl	0 <memcpy>
    8c04:	ldr	r1, [sp, #3452]	; 0xd7c
    8c08:	asr	r2, r1, #31
    8c0c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    8c10:	str	r1, [lr]
    8c14:	str	r2, [lr, #4]
    8c18:	str	r0, [sp, #60]	; 0x3c
    8c1c:	b	95ac <eval_integer+0x2504>
    8c20:	ldr	r0, [fp, #-16]
    8c24:	ldr	r0, [r0]
    8c28:	movw	r1, #0
    8c2c:	cmp	r0, r1
    8c30:	beq	8c38 <eval_integer+0x1b90>
    8c34:	b	8c58 <eval_integer+0x1bb0>
    8c38:	movw	r0, #0
    8c3c:	movt	r0, #0
    8c40:	movw	r1, #0
    8c44:	movt	r1, #0
    8c48:	movw	r2, #2605	; 0xa2d
    8c4c:	movw	r3, #0
    8c50:	movt	r3, #0
    8c54:	bl	0 <__assert_fail>
    8c58:	ldr	r0, [fp, #-16]
    8c5c:	add	r0, r0, #8
    8c60:	add	r1, sp, #2928	; 0xb70
    8c64:	str	r0, [sp, #56]	; 0x38
    8c68:	mov	r0, r1
    8c6c:	ldr	r1, [sp, #56]	; 0x38
    8c70:	movw	r2, #520	; 0x208
    8c74:	bl	0 <memcpy>
    8c78:	ldr	r0, [fp, #-16]
    8c7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8c80:	ldr	r1, [r1, #16]
    8c84:	bl	d2e4 <eval_cursor>
    8c88:	cmp	r0, #0
    8c8c:	beq	8c9c <eval_integer+0x1bf4>
    8c90:	mvn	r0, #0
    8c94:	str	r0, [fp, #-12]
    8c98:	b	95b4 <eval_integer+0x250c>
    8c9c:	bl	0 <coda_get_option_use_fast_size_expressions>
    8ca0:	str	r0, [sp, #2924]	; 0xb6c
    8ca4:	movw	r0, #0
    8ca8:	bl	0 <coda_set_option_use_fast_size_expressions>
    8cac:	ldr	lr, [fp, #-16]
    8cb0:	add	lr, lr, #8
    8cb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8cb8:	str	r0, [sp, #52]	; 0x34
    8cbc:	mov	r0, lr
    8cc0:	bl	0 <coda_cursor_get_bit_size>
    8cc4:	cmp	r0, #0
    8cc8:	beq	8ce4 <eval_integer+0x1c3c>
    8ccc:	ldr	r0, [sp, #2924]	; 0xb6c
    8cd0:	bl	0 <coda_set_option_use_fast_size_expressions>
    8cd4:	mvn	lr, #0
    8cd8:	str	lr, [fp, #-12]
    8cdc:	str	r0, [sp, #48]	; 0x30
    8ce0:	b	95b4 <eval_integer+0x250c>
    8ce4:	ldr	r0, [sp, #2924]	; 0xb6c
    8ce8:	bl	0 <coda_set_option_use_fast_size_expressions>
    8cec:	ldr	lr, [fp, #-16]
    8cf0:	add	lr, lr, #8
    8cf4:	add	r1, sp, #2928	; 0xb70
    8cf8:	str	r0, [sp, #44]	; 0x2c
    8cfc:	mov	r0, lr
    8d00:	movw	r2, #520	; 0x208
    8d04:	bl	0 <memcpy>
    8d08:	b	95ac <eval_integer+0x2504>
    8d0c:	ldr	r0, [fp, #-16]
    8d10:	ldr	r0, [r0]
    8d14:	movw	r1, #0
    8d18:	cmp	r0, r1
    8d1c:	beq	8d24 <eval_integer+0x1c7c>
    8d20:	b	8d44 <eval_integer+0x1c9c>
    8d24:	movw	r0, #0
    8d28:	movt	r0, #0
    8d2c:	movw	r1, #0
    8d30:	movt	r1, #0
    8d34:	movw	r2, #2627	; 0xa43
    8d38:	movw	r3, #0
    8d3c:	movt	r3, #0
    8d40:	bl	0 <__assert_fail>
    8d44:	ldr	r0, [fp, #-16]
    8d48:	add	r0, r0, #8
    8d4c:	add	r1, sp, #2400	; 0x960
    8d50:	str	r0, [sp, #40]	; 0x28
    8d54:	mov	r0, r1
    8d58:	ldr	r1, [sp, #40]	; 0x28
    8d5c:	movw	r2, #520	; 0x208
    8d60:	bl	0 <memcpy>
    8d64:	ldr	r0, [fp, #-16]
    8d68:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8d6c:	ldr	r1, [r1, #16]
    8d70:	bl	d2e4 <eval_cursor>
    8d74:	cmp	r0, #0
    8d78:	beq	8d88 <eval_integer+0x1ce0>
    8d7c:	mvn	r0, #0
    8d80:	str	r0, [fp, #-12]
    8d84:	b	95b4 <eval_integer+0x250c>
    8d88:	bl	0 <coda_get_option_use_fast_size_expressions>
    8d8c:	str	r0, [sp, #2396]	; 0x95c
    8d90:	movw	r0, #0
    8d94:	bl	0 <coda_set_option_use_fast_size_expressions>
    8d98:	ldr	lr, [fp, #-16]
    8d9c:	add	lr, lr, #8
    8da0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8da4:	str	r0, [sp, #36]	; 0x24
    8da8:	mov	r0, lr
    8dac:	bl	0 <coda_cursor_get_byte_size>
    8db0:	cmp	r0, #0
    8db4:	beq	8dd0 <eval_integer+0x1d28>
    8db8:	ldr	r0, [sp, #2396]	; 0x95c
    8dbc:	bl	0 <coda_set_option_use_fast_size_expressions>
    8dc0:	mvn	lr, #0
    8dc4:	str	lr, [fp, #-12]
    8dc8:	str	r0, [sp, #32]
    8dcc:	b	95b4 <eval_integer+0x250c>
    8dd0:	ldr	r0, [sp, #2396]	; 0x95c
    8dd4:	bl	0 <coda_set_option_use_fast_size_expressions>
    8dd8:	ldr	lr, [fp, #-16]
    8ddc:	add	lr, lr, #8
    8de0:	add	r1, sp, #2400	; 0x960
    8de4:	str	r0, [sp, #28]
    8de8:	mov	r0, lr
    8dec:	movw	r2, #520	; 0x208
    8df0:	bl	0 <memcpy>
    8df4:	b	95ac <eval_integer+0x2504>
    8df8:	ldr	r0, [fp, #-16]
    8dfc:	ldr	r0, [r0]
    8e00:	movw	r1, #0
    8e04:	cmp	r0, r1
    8e08:	beq	8e10 <eval_integer+0x1d68>
    8e0c:	b	8e30 <eval_integer+0x1d88>
    8e10:	movw	r0, #0
    8e14:	movt	r0, #0
    8e18:	movw	r1, #0
    8e1c:	movt	r1, #0
    8e20:	movw	r2, #2648	; 0xa58
    8e24:	movw	r3, #0
    8e28:	movt	r3, #0
    8e2c:	bl	0 <__assert_fail>
    8e30:	ldr	r0, [fp, #-16]
    8e34:	add	r0, r0, #8
    8e38:	add	r1, sp, #1872	; 0x750
    8e3c:	str	r0, [sp, #24]
    8e40:	mov	r0, r1
    8e44:	ldr	r1, [sp, #24]
    8e48:	movw	r2, #520	; 0x208
    8e4c:	bl	0 <memcpy>
    8e50:	ldr	r0, [fp, #-16]
    8e54:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8e58:	ldr	r1, [r1, #16]
    8e5c:	bl	d2e4 <eval_cursor>
    8e60:	cmp	r0, #0
    8e64:	beq	8e74 <eval_integer+0x1dcc>
    8e68:	mvn	r0, #0
    8e6c:	str	r0, [fp, #-12]
    8e70:	b	95b4 <eval_integer+0x250c>
    8e74:	ldr	r0, [fp, #-16]
    8e78:	add	r0, r0, #8
    8e7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8e80:	bl	0 <coda_cursor_get_file_bit_offset>
    8e84:	cmp	r0, #0
    8e88:	beq	8e98 <eval_integer+0x1df0>
    8e8c:	mvn	r0, #0
    8e90:	str	r0, [fp, #-12]
    8e94:	b	95b4 <eval_integer+0x250c>
    8e98:	ldr	r0, [fp, #-16]
    8e9c:	add	r0, r0, #8
    8ea0:	add	r1, sp, #1872	; 0x750
    8ea4:	movw	r2, #520	; 0x208
    8ea8:	bl	0 <memcpy>
    8eac:	b	95ac <eval_integer+0x2504>
    8eb0:	ldr	r0, [fp, #-16]
    8eb4:	ldr	r0, [r0]
    8eb8:	movw	r1, #0
    8ebc:	cmp	r0, r1
    8ec0:	beq	8ec8 <eval_integer+0x1e20>
    8ec4:	b	8ee8 <eval_integer+0x1e40>
    8ec8:	movw	r0, #0
    8ecc:	movt	r0, #0
    8ed0:	movw	r1, #0
    8ed4:	movt	r1, #0
    8ed8:	movw	r2, #2665	; 0xa69
    8edc:	movw	r3, #0
    8ee0:	movt	r3, #0
    8ee4:	bl	0 <__assert_fail>
    8ee8:	ldr	r0, [fp, #-16]
    8eec:	add	r0, r0, #8
    8ef0:	add	lr, sp, #1024	; 0x400
    8ef4:	add	r1, lr, #328	; 0x148
    8ef8:	str	r0, [sp, #20]
    8efc:	mov	r0, r1
    8f00:	ldr	r1, [sp, #20]
    8f04:	movw	r2, #520	; 0x208
    8f08:	bl	0 <memcpy>
    8f0c:	ldr	r0, [fp, #-16]
    8f10:	ldr	r1, [fp, #-28]	; 0xffffffe4
    8f14:	ldr	r1, [r1, #16]
    8f18:	bl	d2e4 <eval_cursor>
    8f1c:	cmp	r0, #0
    8f20:	beq	8f30 <eval_integer+0x1e88>
    8f24:	mvn	r0, #0
    8f28:	str	r0, [fp, #-12]
    8f2c:	b	95b4 <eval_integer+0x250c>
    8f30:	ldr	r0, [fp, #-16]
    8f34:	add	r0, r0, #8
    8f38:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8f3c:	bl	0 <coda_cursor_get_file_byte_offset>
    8f40:	cmp	r0, #0
    8f44:	beq	8f54 <eval_integer+0x1eac>
    8f48:	mvn	r0, #0
    8f4c:	str	r0, [fp, #-12]
    8f50:	b	95b4 <eval_integer+0x250c>
    8f54:	ldr	r0, [fp, #-16]
    8f58:	add	r0, r0, #8
    8f5c:	add	lr, sp, #1024	; 0x400
    8f60:	add	r1, lr, #328	; 0x148
    8f64:	movw	r2, #520	; 0x208
    8f68:	bl	0 <memcpy>
    8f6c:	b	95ac <eval_integer+0x2504>
    8f70:	ldr	r0, [fp, #-16]
    8f74:	ldr	r0, [r0]
    8f78:	movw	r1, #0
    8f7c:	cmp	r0, r1
    8f80:	beq	8f88 <eval_integer+0x1ee0>
    8f84:	b	8fa8 <eval_integer+0x1f00>
    8f88:	movw	r0, #0
    8f8c:	movt	r0, #0
    8f90:	movw	r1, #0
    8f94:	movt	r1, #0
    8f98:	movw	r2, #2679	; 0xa77
    8f9c:	movw	r3, #0
    8fa0:	movt	r3, #0
    8fa4:	bl	0 <__assert_fail>
    8fa8:	ldr	r0, [fp, #-16]
    8fac:	ldr	r0, [r0]
    8fb0:	ldr	r0, [r0]
    8fb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    8fb8:	bl	0 <coda_get_product_file_size>
    8fbc:	cmp	r0, #0
    8fc0:	beq	8fd0 <eval_integer+0x1f28>
    8fc4:	mvn	r0, #0
    8fc8:	str	r0, [fp, #-12]
    8fcc:	b	95b4 <eval_integer+0x250c>
    8fd0:	b	95ac <eval_integer+0x2504>
    8fd4:	ldr	r0, [fp, #-16]
    8fd8:	ldr	r0, [r0]
    8fdc:	movw	r1, #0
    8fe0:	cmp	r0, r1
    8fe4:	beq	8fec <eval_integer+0x1f44>
    8fe8:	b	900c <eval_integer+0x1f64>
    8fec:	movw	r0, #0
    8ff0:	movt	r0, #0
    8ff4:	movw	r1, #0
    8ff8:	movt	r1, #0
    8ffc:	movw	r2, #2689	; 0xa81
    9000:	movw	r3, #0
    9004:	movt	r3, #0
    9008:	bl	0 <__assert_fail>
    900c:	ldr	r0, [fp, #-16]
    9010:	ldr	r0, [r0]
    9014:	ldr	r0, [r0]
    9018:	add	lr, sp, #1024	; 0x400
    901c:	add	r1, lr, #324	; 0x144
    9020:	bl	0 <coda_get_product_version>
    9024:	cmp	r0, #0
    9028:	beq	9038 <eval_integer+0x1f90>
    902c:	mvn	r0, #0
    9030:	str	r0, [fp, #-12]
    9034:	b	95b4 <eval_integer+0x250c>
    9038:	ldr	r0, [sp, #1348]	; 0x544
    903c:	asr	r1, r0, #31
    9040:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9044:	str	r0, [r2]
    9048:	str	r1, [r2, #4]
    904c:	b	95ac <eval_integer+0x2504>
    9050:	ldr	r0, [fp, #-16]
    9054:	ldr	r0, [r0]
    9058:	movw	r1, #0
    905c:	cmp	r0, r1
    9060:	beq	9068 <eval_integer+0x1fc0>
    9064:	b	9088 <eval_integer+0x1fe0>
    9068:	movw	r0, #0
    906c:	movt	r0, #0
    9070:	movw	r1, #0
    9074:	movt	r1, #0
    9078:	movw	r2, #2702	; 0xa8e
    907c:	movw	r3, #0
    9080:	movt	r3, #0
    9084:	bl	0 <__assert_fail>
    9088:	ldr	r0, [fp, #-16]
    908c:	add	r0, r0, #8
    9090:	add	r1, sp, #824	; 0x338
    9094:	str	r0, [sp, #16]
    9098:	mov	r0, r1
    909c:	ldr	r1, [sp, #16]
    90a0:	movw	r2, #520	; 0x208
    90a4:	bl	0 <memcpy>
    90a8:	ldr	r0, [fp, #-16]
    90ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    90b0:	ldr	r1, [r1, #16]
    90b4:	bl	d2e4 <eval_cursor>
    90b8:	cmp	r0, #0
    90bc:	beq	90cc <eval_integer+0x2024>
    90c0:	mvn	r0, #0
    90c4:	str	r0, [fp, #-12]
    90c8:	b	95b4 <eval_integer+0x250c>
    90cc:	ldr	r0, [fp, #-16]
    90d0:	add	r0, r0, #8
    90d4:	add	r1, sp, #820	; 0x334
    90d8:	bl	0 <coda_cursor_get_index>
    90dc:	cmp	r0, #0
    90e0:	beq	90f0 <eval_integer+0x2048>
    90e4:	mvn	r0, #0
    90e8:	str	r0, [fp, #-12]
    90ec:	b	95b4 <eval_integer+0x250c>
    90f0:	ldr	r0, [fp, #-16]
    90f4:	add	r0, r0, #8
    90f8:	add	r1, sp, #824	; 0x338
    90fc:	mov	r2, #520	; 0x208
    9100:	bl	0 <memcpy>
    9104:	ldr	r1, [sp, #820]	; 0x334
    9108:	asr	r2, r1, #31
    910c:	ldr	lr, [fp, #-24]	; 0xffffffe8
    9110:	str	r1, [lr]
    9114:	str	r2, [lr, #4]
    9118:	str	r0, [sp, #12]
    911c:	b	95ac <eval_integer+0x2504>
    9120:	ldr	r0, [fp, #-16]
    9124:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9128:	ldr	r1, [r1, #12]
    912c:	ldrb	r1, [r1]
    9130:	add	r0, r0, r1, lsl #3
    9134:	ldr	r1, [r0, #-312]	; 0xfffffec8
    9138:	ldr	r0, [r0, #-308]	; 0xfffffecc
    913c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9140:	str	r0, [r2, #4]
    9144:	str	r1, [r2]
    9148:	b	95ac <eval_integer+0x2504>
    914c:	ldr	r0, [fp, #-16]
    9150:	ldr	r0, [r0]
    9154:	movw	r1, #0
    9158:	cmp	r0, r1
    915c:	beq	9164 <eval_integer+0x20bc>
    9160:	b	9184 <eval_integer+0x20dc>
    9164:	movw	r0, #0
    9168:	movt	r0, #0
    916c:	movw	r1, #0
    9170:	movt	r1, #0
    9174:	movw	r2, #2724	; 0xaa4
    9178:	movw	r3, #0
    917c:	movt	r3, #0
    9180:	bl	0 <__assert_fail>
    9184:	ldr	r0, [fp, #-16]
    9188:	ldr	r0, [r0, #560]	; 0x230
    918c:	movw	r1, #0
    9190:	cmp	r0, r1
    9194:	beq	91b4 <eval_integer+0x210c>
    9198:	mvn	r0, #400	; 0x190
    919c:	movw	r1, #0
    91a0:	movt	r1, #0
    91a4:	bl	0 <coda_set_error>
    91a8:	mvn	r0, #0
    91ac:	str	r0, [fp, #-12]
    91b0:	b	95b4 <eval_integer+0x250c>
    91b4:	ldr	r0, [fp, #-16]
    91b8:	ldr	r0, [r0]
    91bc:	ldr	r0, [r0]
    91c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    91c4:	ldr	r1, [r1, #12]
    91c8:	add	r2, sp, #816	; 0x330
    91cc:	bl	0 <coda_product_variable_get_size>
    91d0:	cmp	r0, #0
    91d4:	beq	91e4 <eval_integer+0x213c>
    91d8:	mvn	r0, #0
    91dc:	str	r0, [fp, #-12]
    91e0:	b	95b4 <eval_integer+0x250c>
    91e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    91e8:	ldr	r0, [r0, #12]
    91ec:	ldr	r1, [fp, #-16]
    91f0:	str	r0, [r1, #560]	; 0x230
    91f4:	movw	r0, #0
    91f8:	str	r0, [sp, #812]	; 0x32c
    91fc:	ldr	r0, [sp, #812]	; 0x32c
    9200:	ldr	r1, [sp, #816]	; 0x330
    9204:	cmp	r0, r1
    9208:	bge	9290 <eval_integer+0x21e8>
    920c:	ldr	r0, [sp, #812]	; 0x32c
    9210:	asr	r1, r0, #31
    9214:	ldr	r2, [fp, #-16]
    9218:	str	r0, [r2, #552]	; 0x228
    921c:	str	r1, [r2, #556]	; 0x22c
    9220:	ldr	r0, [fp, #-16]
    9224:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9228:	ldr	r1, [r1, #16]
    922c:	add	r2, sp, #808	; 0x328
    9230:	bl	5288 <eval_boolean>
    9234:	cmp	r0, #0
    9238:	beq	9248 <eval_integer+0x21a0>
    923c:	mvn	r0, #0
    9240:	str	r0, [fp, #-12]
    9244:	b	95b4 <eval_integer+0x250c>
    9248:	ldr	r0, [sp, #808]	; 0x328
    924c:	cmp	r0, #0
    9250:	beq	927c <eval_integer+0x21d4>
    9254:	ldr	r0, [sp, #812]	; 0x32c
    9258:	asr	r1, r0, #31
    925c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9260:	str	r0, [r2]
    9264:	str	r1, [r2, #4]
    9268:	ldr	r0, [fp, #-16]
    926c:	movw	r1, #0
    9270:	str	r1, [r0, #560]	; 0x230
    9274:	str	r1, [fp, #-12]
    9278:	b	95b4 <eval_integer+0x250c>
    927c:	b	9280 <eval_integer+0x21d8>
    9280:	ldr	r0, [sp, #812]	; 0x32c
    9284:	add	r0, r0, #1
    9288:	str	r0, [sp, #812]	; 0x32c
    928c:	b	91fc <eval_integer+0x2154>
    9290:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9294:	mvn	r1, #0
    9298:	str	r1, [r0, #4]
    929c:	str	r1, [r0]
    92a0:	ldr	r0, [fp, #-16]
    92a4:	movw	r1, #0
    92a8:	str	r1, [r0, #560]	; 0x230
    92ac:	b	95ac <eval_integer+0x2504>
    92b0:	mov	r0, #0
    92b4:	str	r0, [sp, #796]	; 0x31c
    92b8:	str	r0, [sp, #792]	; 0x318
    92bc:	ldr	r0, [fp, #-16]
    92c0:	ldr	r0, [r0]
    92c4:	movw	r1, #0
    92c8:	cmp	r0, r1
    92cc:	beq	92d4 <eval_integer+0x222c>
    92d0:	b	92f4 <eval_integer+0x224c>
    92d4:	movw	r0, #0
    92d8:	movt	r0, #0
    92dc:	movw	r1, #0
    92e0:	movt	r1, #0
    92e4:	movw	r2, #2761	; 0xac9
    92e8:	movw	r3, #0
    92ec:	movt	r3, #0
    92f0:	bl	0 <__assert_fail>
    92f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    92f8:	ldr	r0, [r0, #16]
    92fc:	movw	r1, #0
    9300:	cmp	r0, r1
    9304:	beq	9388 <eval_integer+0x22e0>
    9308:	ldr	r0, [fp, #-16]
    930c:	ldr	r0, [r0, #560]	; 0x230
    9310:	movw	r1, #0
    9314:	cmp	r0, r1
    9318:	beq	935c <eval_integer+0x22b4>
    931c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9320:	ldr	r0, [r0, #12]
    9324:	ldr	r1, [fp, #-16]
    9328:	ldr	r1, [r1, #560]	; 0x230
    932c:	bl	0 <strcmp>
    9330:	cmp	r0, #0
    9334:	bne	935c <eval_integer+0x22b4>
    9338:	ldr	r0, [fp, #-28]	; 0xffffffe4
    933c:	ldr	r2, [r0, #12]
    9340:	mvn	r0, #400	; 0x190
    9344:	movw	r1, #0
    9348:	movt	r1, #0
    934c:	bl	0 <coda_set_error>
    9350:	mvn	r0, #0
    9354:	str	r0, [fp, #-12]
    9358:	b	95b4 <eval_integer+0x250c>
    935c:	ldr	r0, [fp, #-16]
    9360:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9364:	ldr	r1, [r1, #16]
    9368:	add	r2, sp, #792	; 0x318
    936c:	bl	70a8 <eval_integer>
    9370:	cmp	r0, #0
    9374:	beq	9384 <eval_integer+0x22dc>
    9378:	mvn	r0, #0
    937c:	str	r0, [fp, #-12]
    9380:	b	95b4 <eval_integer+0x250c>
    9384:	b	93d0 <eval_integer+0x2328>
    9388:	ldr	r0, [fp, #-16]
    938c:	ldr	r0, [r0, #560]	; 0x230
    9390:	movw	r1, #0
    9394:	cmp	r0, r1
    9398:	beq	93cc <eval_integer+0x2324>
    939c:	ldr	r0, [fp, #-16]
    93a0:	ldr	r0, [r0, #560]	; 0x230
    93a4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    93a8:	ldr	r1, [r1, #12]
    93ac:	bl	0 <strcmp>
    93b0:	cmp	r0, #0
    93b4:	bne	93cc <eval_integer+0x2324>
    93b8:	ldr	r0, [fp, #-16]
    93bc:	ldr	r1, [r0, #552]	; 0x228
    93c0:	ldr	r0, [r0, #556]	; 0x22c
    93c4:	str	r0, [sp, #796]	; 0x31c
    93c8:	str	r1, [sp, #792]	; 0x318
    93cc:	b	93d0 <eval_integer+0x2328>
    93d0:	ldr	r0, [fp, #-16]
    93d4:	ldr	r0, [r0]
    93d8:	ldr	r0, [r0]
    93dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    93e0:	ldr	r1, [r1, #12]
    93e4:	ldr	r2, [sp, #792]	; 0x318
    93e8:	add	r3, sp, #804	; 0x324
    93ec:	bl	0 <coda_product_variable_get_pointer>
    93f0:	cmp	r0, #0
    93f4:	beq	9404 <eval_integer+0x235c>
    93f8:	mvn	r0, #0
    93fc:	str	r0, [fp, #-12]
    9400:	b	95b4 <eval_integer+0x250c>
    9404:	ldr	r0, [sp, #804]	; 0x324
    9408:	ldr	r1, [r0]
    940c:	ldr	r0, [r0, #4]
    9410:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9414:	str	r0, [r2, #4]
    9418:	str	r1, [r2]
    941c:	b	95ac <eval_integer+0x2504>
    9420:	ldr	r0, [fp, #-16]
    9424:	ldr	r0, [r0]
    9428:	movw	r1, #0
    942c:	cmp	r0, r1
    9430:	beq	9438 <eval_integer+0x2390>
    9434:	b	9458 <eval_integer+0x23b0>
    9438:	movw	r0, #0
    943c:	movt	r0, #0
    9440:	movw	r1, #0
    9444:	movt	r1, #0
    9448:	movw	r2, #2792	; 0xae8
    944c:	movw	r3, #0
    9450:	movt	r3, #0
    9454:	bl	0 <__assert_fail>
    9458:	ldr	r0, [fp, #-16]
    945c:	add	r0, r0, #8
    9460:	add	r1, sp, #272	; 0x110
    9464:	str	r0, [sp, #8]
    9468:	mov	r0, r1
    946c:	ldr	r1, [sp, #8]
    9470:	movw	r2, #520	; 0x208
    9474:	bl	0 <memcpy>
    9478:	ldr	r0, [fp, #-16]
    947c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9480:	ldr	r1, [r1, #16]
    9484:	bl	d2e4 <eval_cursor>
    9488:	cmp	r0, #0
    948c:	beq	949c <eval_integer+0x23f4>
    9490:	mvn	r0, #0
    9494:	str	r0, [fp, #-12]
    9498:	b	95b4 <eval_integer+0x250c>
    949c:	ldr	r0, [fp, #-16]
    94a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    94a4:	ldr	r1, [r1, #20]
    94a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    94ac:	bl	70a8 <eval_integer>
    94b0:	cmp	r0, #0
    94b4:	beq	94c4 <eval_integer+0x241c>
    94b8:	mvn	r0, #0
    94bc:	str	r0, [fp, #-12]
    94c0:	b	95b4 <eval_integer+0x250c>
    94c4:	ldr	r0, [fp, #-16]
    94c8:	add	r0, r0, #8
    94cc:	add	r1, sp, #272	; 0x110
    94d0:	movw	r2, #520	; 0x208
    94d4:	bl	0 <memcpy>
    94d8:	b	95ac <eval_integer+0x2504>
    94dc:	.word	0x00000fb8
    94e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    94e4:	ldr	r0, [r0, #12]
    94e8:	ldrb	r0, [r0]
    94ec:	sub	r0, r0, #105	; 0x69
    94f0:	str	r0, [sp, #260]	; 0x104
    94f4:	ldr	r0, [fp, #-16]
    94f8:	ldr	r1, [sp, #260]	; 0x104
    94fc:	add	r0, r0, r1, lsl #3
    9500:	ldr	r1, [r0, #528]	; 0x210
    9504:	ldr	r0, [r0, #532]	; 0x214
    9508:	str	r0, [sp, #268]	; 0x10c
    950c:	str	r1, [sp, #264]	; 0x108
    9510:	ldr	r0, [fp, #-16]
    9514:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9518:	ldr	r1, [r1, #16]
    951c:	add	r2, r0, #528	; 0x210
    9520:	ldr	r3, [sp, #260]	; 0x104
    9524:	add	r2, r2, r3, lsl #3
    9528:	bl	70a8 <eval_integer>
    952c:	cmp	r0, #0
    9530:	beq	9544 <eval_integer+0x249c>
    9534:	mvn	r0, #0
    9538:	str	r0, [fp, #-12]
    953c:	b	95b4 <eval_integer+0x250c>
    9540:	.word	0x00000fe0
    9544:	ldr	r0, [fp, #-16]
    9548:	ldr	r1, [fp, #-28]	; 0xffffffe4
    954c:	ldr	r1, [r1, #20]
    9550:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9554:	bl	70a8 <eval_integer>
    9558:	cmp	r0, #0
    955c:	beq	956c <eval_integer+0x24c4>
    9560:	mvn	r0, #0
    9564:	str	r0, [fp, #-12]
    9568:	b	95b4 <eval_integer+0x250c>
    956c:	ldr	r0, [sp, #264]	; 0x108
    9570:	ldr	r1, [sp, #268]	; 0x10c
    9574:	ldr	r2, [fp, #-16]
    9578:	ldr	r3, [sp, #260]	; 0x104
    957c:	add	r2, r2, r3, lsl #3
    9580:	str	r1, [r2, #532]	; 0x214
    9584:	str	r0, [r2, #528]	; 0x210
    9588:	b	95ac <eval_integer+0x2504>
    958c:	movw	r0, #0
    9590:	movt	r0, #0
    9594:	movw	r1, #0
    9598:	movt	r1, #0
    959c:	movw	r2, #2823	; 0xb07
    95a0:	movw	r3, #0
    95a4:	movt	r3, #0
    95a8:	bl	0 <__assert_fail>
    95ac:	movw	r0, #0
    95b0:	str	r0, [fp, #-12]
    95b4:	ldr	r0, [fp, #-12]
    95b8:	sub	sp, fp, #8
    95bc:	pop	{r4, r5, fp, pc}
    95c0:	.word	0x00000eb0
    95c4:	.word	0x00000ef0
    95c8:	.word	0x00000f60
    95cc:	.word	0x00000fd8

000095d0 <coda_expression_eval_float>:
    95d0:	push	{r4, r5, fp, lr}
    95d4:	add	fp, sp, #8
    95d8:	sub	sp, sp, #584	; 0x248
    95dc:	str	r0, [fp, #-16]
    95e0:	str	r1, [fp, #-20]	; 0xffffffec
    95e4:	str	r2, [fp, #-24]	; 0xffffffe8
    95e8:	ldr	r0, [fp, #-16]
    95ec:	ldr	r0, [r0, #4]
    95f0:	cmp	r0, #2
    95f4:	beq	9614 <coda_expression_eval_float+0x44>
    95f8:	mvn	r0, #99	; 0x63
    95fc:	movw	r1, #0
    9600:	movt	r1, #0
    9604:	bl	0 <coda_set_error>
    9608:	mvn	r0, #0
    960c:	str	r0, [fp, #-12]
    9610:	b	96bc <coda_expression_eval_float+0xec>
    9614:	ldr	r0, [fp, #-20]	; 0xffffffec
    9618:	movw	r1, #0
    961c:	cmp	r0, r1
    9620:	bne	9650 <coda_expression_eval_float+0x80>
    9624:	ldr	r0, [fp, #-16]
    9628:	ldr	r0, [r0, #8]
    962c:	cmp	r0, #0
    9630:	bne	9650 <coda_expression_eval_float+0x80>
    9634:	mvn	r0, #99	; 0x63
    9638:	movw	r1, #0
    963c:	movt	r1, #0
    9640:	bl	0 <coda_set_error>
    9644:	mvn	r0, #0
    9648:	str	r0, [fp, #-12]
    964c:	b	96bc <coda_expression_eval_float+0xec>
    9650:	ldr	r1, [fp, #-20]	; 0xffffffec
    9654:	mov	r0, sp
    9658:	bl	c14 <init_eval_info>
    965c:	ldr	r1, [fp, #-16]
    9660:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9664:	mov	r0, sp
    9668:	bl	96c8 <eval_float>
    966c:	cmp	r0, #0
    9670:	beq	96b4 <coda_expression_eval_float+0xe4>
    9674:	ldr	r0, [fp, #-20]	; 0xffffffec
    9678:	movw	r1, #0
    967c:	cmp	r0, r1
    9680:	beq	96a8 <coda_expression_eval_float+0xd8>
    9684:	ldr	r0, [fp, #-20]	; 0xffffffec
    9688:	mov	r1, sp
    968c:	add	r1, r1, #8
    9690:	bl	0 <coda_cursor_compare>
    9694:	cmp	r0, #0
    9698:	beq	96a8 <coda_expression_eval_float+0xd8>
    969c:	mov	r0, sp
    96a0:	add	r0, r0, #8
    96a4:	bl	0 <coda_cursor_add_to_error_message>
    96a8:	mvn	r0, #0
    96ac:	str	r0, [fp, #-12]
    96b0:	b	96bc <coda_expression_eval_float+0xec>
    96b4:	movw	r0, #0
    96b8:	str	r0, [fp, #-12]
    96bc:	ldr	r0, [fp, #-12]
    96c0:	sub	sp, fp, #8
    96c4:	pop	{r4, r5, fp, pc}

000096c8 <eval_float>:
    96c8:	push	{r4, r5, fp, lr}
    96cc:	add	fp, sp, #8
    96d0:	sub	sp, sp, #936	; 0x3a8
    96d4:	sub	sp, sp, #2048	; 0x800
    96d8:	add	r3, sp, #1168	; 0x490
    96dc:	str	r0, [fp, #-16]
    96e0:	str	r1, [fp, #-20]	; 0xffffffec
    96e4:	str	r2, [fp, #-24]	; 0xffffffe8
    96e8:	ldr	r0, [fp, #-20]	; 0xffffffec
    96ec:	ldr	r0, [r0, #4]
    96f0:	cmp	r0, #1
    96f4:	str	r3, [sp, #96]	; 0x60
    96f8:	bne	9744 <eval_float+0x7c>
    96fc:	ldr	r0, [fp, #-16]
    9700:	ldr	r1, [fp, #-20]	; 0xffffffec
    9704:	sub	r2, fp, #40	; 0x28
    9708:	bl	70a8 <eval_integer>
    970c:	cmp	r0, #0
    9710:	beq	9720 <eval_float+0x58>
    9714:	mvn	r0, #0
    9718:	str	r0, [fp, #-12]
    971c:	b	aa14 <eval_float+0x134c>
    9720:	ldr	r0, [fp, #-40]	; 0xffffffd8
    9724:	ldr	r1, [fp, #-36]	; 0xffffffdc
    9728:	bl	0 <__aeabi_l2d>
    972c:	vmov	d16, r0, r1
    9730:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9734:	vstr	d16, [r0]
    9738:	movw	r0, #0
    973c:	str	r0, [fp, #-12]
    9740:	b	aa14 <eval_float+0x134c>
    9744:	ldr	r0, [fp, #-20]	; 0xffffffec
    9748:	ldr	r0, [r0]
    974c:	cmp	r0, #19
    9750:	bne	9770 <eval_float+0xa8>
    9754:	ldr	r0, [fp, #-20]	; 0xffffffec
    9758:	vldr	d16, [r0, #16]
    975c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9760:	vstr	d16, [r0]
    9764:	movw	r0, #0
    9768:	str	r0, [fp, #-12]
    976c:	b	aa14 <eval_float+0x134c>
    9770:	ldr	r0, [fp, #-20]	; 0xffffffec
    9774:	str	r0, [fp, #-28]	; 0xffffffe4
    9778:	ldr	r0, [fp, #-28]	; 0xffffffe4
    977c:	ldr	r0, [r0]
    9780:	cmp	r0, #86	; 0x56
    9784:	str	r0, [sp, #92]	; 0x5c
    9788:	bhi	a9ec <eval_float+0x1324>
    978c:	add	r0, pc, #8
    9790:	ldr	r1, [sp, #92]	; 0x5c
    9794:	ldr	r0, [r0, r1, lsl #2]
    9798:	mov	pc, r0
    979c:	.word	0x00009b34
    97a0:	.word	0x00009c9c
    97a4:	.word	0x0000a9ec
    97a8:	.word	0x0000a36c
    97ac:	.word	0x0000a9ec
    97b0:	.word	0x0000a9ec
    97b4:	.word	0x0000a9ec
    97b8:	.word	0x0000a9ec
    97bc:	.word	0x0000a514
    97c0:	.word	0x0000a6d0
    97c4:	.word	0x0000a9ec
    97c8:	.word	0x0000a888
    97cc:	.word	0x0000a9ec
    97d0:	.word	0x0000a9ec
    97d4:	.word	0x0000a9ec
    97d8:	.word	0x0000a9ec
    97dc:	.word	0x0000a9ec
    97e0:	.word	0x00009ba0
    97e4:	.word	0x0000a9ec
    97e8:	.word	0x0000a9ec
    97ec:	.word	0x0000a9ec
    97f0:	.word	0x0000a9ec
    97f4:	.word	0x0000a9ec
    97f8:	.word	0x0000a9ec
    97fc:	.word	0x00009dd4
    9800:	.word	0x0000a9ec
    9804:	.word	0x0000a9ec
    9808:	.word	0x0000a9ec
    980c:	.word	0x0000a9ec
    9810:	.word	0x000098f8
    9814:	.word	0x00009be0
    9818:	.word	0x0000a9ec
    981c:	.word	0x0000a9ec
    9820:	.word	0x0000a9ec
    9824:	.word	0x0000a9ec
    9828:	.word	0x0000a9ec
    982c:	.word	0x0000a9ec
    9830:	.word	0x0000a9ec
    9834:	.word	0x0000a9ec
    9838:	.word	0x0000a9ec
    983c:	.word	0x0000a9ec
    9840:	.word	0x0000a9ec
    9844:	.word	0x0000a2dc
    9848:	.word	0x0000a9ec
    984c:	.word	0x0000a9ec
    9850:	.word	0x0000a9ec
    9854:	.word	0x0000a9ec
    9858:	.word	0x0000a9ec
    985c:	.word	0x0000a9ec
    9860:	.word	0x0000a9ec
    9864:	.word	0x0000a9ec
    9868:	.word	0x0000a9ec
    986c:	.word	0x0000a9ec
    9870:	.word	0x0000a9ec
    9874:	.word	0x0000a9ec
    9878:	.word	0x0000a9ec
    987c:	.word	0x0000a02c
    9880:	.word	0x0000a0b4
    9884:	.word	0x00009e68
    9888:	.word	0x00009d6c
    988c:	.word	0x00009af4
    9890:	.word	0x0000a9ec
    9894:	.word	0x0000a9ec
    9898:	.word	0x0000a9ec
    989c:	.word	0x0000a9ec
    98a0:	.word	0x0000a9ec
    98a4:	.word	0x00009efc
    98a8:	.word	0x0000a9ec
    98ac:	.word	0x0000a9ec
    98b0:	.word	0x0000a9ec
    98b4:	.word	0x0000a9ec
    98b8:	.word	0x0000a9ec
    98bc:	.word	0x00009c20
    98c0:	.word	0x0000a9ec
    98c4:	.word	0x0000a9ec
    98c8:	.word	0x0000a9ec
    98cc:	.word	0x0000a9ec
    98d0:	.word	0x0000a9ec
    98d4:	.word	0x00009d04
    98d8:	.word	0x0000a13c
    98dc:	.word	0x0000a9ec
    98e0:	.word	0x0000a9ec
    98e4:	.word	0x0000a9ec
    98e8:	.word	0x0000a9ec
    98ec:	.word	0x0000a9ec
    98f0:	.word	0x0000a9ec
    98f4:	.word	0x0000a944
    98f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    98fc:	ldr	r0, [r0, #16]
    9900:	ldr	r0, [r0, #4]
    9904:	cmp	r0, #4
    9908:	bne	99f8 <eval_float+0x330>
    990c:	ldr	r0, [fp, #-16]
    9910:	ldr	r0, [r0]
    9914:	movw	r1, #0
    9918:	cmp	r0, r1
    991c:	beq	9924 <eval_float+0x25c>
    9920:	b	9944 <eval_float+0x27c>
    9924:	movw	r0, #0
    9928:	movt	r0, #0
    992c:	movw	r1, #0
    9930:	movt	r1, #0
    9934:	movw	r2, #1418	; 0x58a
    9938:	movw	r3, #0
    993c:	movt	r3, #0
    9940:	bl	0 <__assert_fail>
    9944:	ldr	r0, [fp, #-16]
    9948:	add	r0, r0, #8
    994c:	sub	r1, fp, #560	; 0x230
    9950:	str	r0, [sp, #88]	; 0x58
    9954:	mov	r0, r1
    9958:	ldr	r1, [sp, #88]	; 0x58
    995c:	movw	r2, #520	; 0x208
    9960:	bl	0 <memcpy>
    9964:	ldr	r0, [fp, #-16]
    9968:	ldr	r1, [fp, #-28]	; 0xffffffe4
    996c:	ldr	r1, [r1, #16]
    9970:	bl	d2e4 <eval_cursor>
    9974:	cmp	r0, #0
    9978:	beq	9988 <eval_float+0x2c0>
    997c:	mvn	r0, #0
    9980:	str	r0, [fp, #-12]
    9984:	b	aa14 <eval_float+0x134c>
    9988:	bl	0 <coda_get_option_perform_conversions>
    998c:	str	r0, [fp, #-564]	; 0xfffffdcc
    9990:	movw	r0, #0
    9994:	bl	0 <coda_set_option_perform_conversions>
    9998:	ldr	lr, [fp, #-16]
    999c:	add	lr, lr, #8
    99a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    99a4:	str	r0, [sp, #84]	; 0x54
    99a8:	mov	r0, lr
    99ac:	bl	0 <coda_cursor_read_double>
    99b0:	cmp	r0, #0
    99b4:	beq	99d0 <eval_float+0x308>
    99b8:	ldr	r0, [fp, #-564]	; 0xfffffdcc
    99bc:	bl	0 <coda_set_option_perform_conversions>
    99c0:	mvn	lr, #0
    99c4:	str	lr, [fp, #-12]
    99c8:	str	r0, [sp, #80]	; 0x50
    99cc:	b	aa14 <eval_float+0x134c>
    99d0:	ldr	r0, [fp, #-564]	; 0xfffffdcc
    99d4:	bl	0 <coda_set_option_perform_conversions>
    99d8:	ldr	lr, [fp, #-16]
    99dc:	add	lr, lr, #8
    99e0:	sub	r1, fp, #560	; 0x230
    99e4:	str	r0, [sp, #76]	; 0x4c
    99e8:	mov	r0, lr
    99ec:	movw	r2, #520	; 0x208
    99f0:	bl	0 <memcpy>
    99f4:	b	9af0 <eval_float+0x428>
    99f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    99fc:	ldr	r0, [r0, #16]
    9a00:	ldr	r0, [r0, #4]
    9a04:	cmp	r0, #3
    9a08:	bne	9aac <eval_float+0x3e4>
    9a0c:	ldr	r0, [fp, #-16]
    9a10:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9a14:	ldr	r1, [r1, #16]
    9a18:	sub	r2, fp, #568	; 0x238
    9a1c:	sub	r3, fp, #572	; 0x23c
    9a20:	sub	ip, fp, #576	; 0x240
    9a24:	str	ip, [sp]
    9a28:	bl	ac2c <eval_string>
    9a2c:	cmp	r0, #0
    9a30:	beq	9a40 <eval_float+0x378>
    9a34:	mvn	r0, #0
    9a38:	str	r0, [fp, #-12]
    9a3c:	b	aa14 <eval_float+0x134c>
    9a40:	ldr	r0, [fp, #-572]	; 0xfffffdc4
    9a44:	cmp	r0, #0
    9a48:	bne	9a68 <eval_float+0x3a0>
    9a4c:	mvn	r0, #102	; 0x66
    9a50:	movw	r1, #0
    9a54:	movt	r1, #0
    9a58:	bl	0 <coda_set_error>
    9a5c:	mvn	r0, #0
    9a60:	str	r0, [fp, #-12]
    9a64:	b	aa14 <eval_float+0x134c>
    9a68:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9a6c:	ldr	r1, [fp, #-568]	; 0xfffffdc8
    9a70:	add	r0, r0, r1
    9a74:	ldr	r1, [fp, #-572]	; 0xfffffdc4
    9a78:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9a7c:	movw	r3, #0
    9a80:	bl	0 <coda_ascii_parse_double>
    9a84:	cmp	r0, #0
    9a88:	bge	9aa0 <eval_float+0x3d8>
    9a8c:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9a90:	bl	0 <free>
    9a94:	mvn	r0, #0
    9a98:	str	r0, [fp, #-12]
    9a9c:	b	aa14 <eval_float+0x134c>
    9aa0:	ldr	r0, [fp, #-576]	; 0xfffffdc0
    9aa4:	bl	0 <free>
    9aa8:	b	9aec <eval_float+0x424>
    9aac:	ldr	r0, [fp, #-16]
    9ab0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ab4:	ldr	r1, [r1, #16]
    9ab8:	sub	r2, fp, #584	; 0x248
    9abc:	bl	70a8 <eval_integer>
    9ac0:	cmp	r0, #0
    9ac4:	beq	9ad4 <eval_float+0x40c>
    9ac8:	mvn	r0, #0
    9acc:	str	r0, [fp, #-12]
    9ad0:	b	aa14 <eval_float+0x134c>
    9ad4:	ldr	r0, [fp, #-584]	; 0xfffffdb8
    9ad8:	ldr	r1, [fp, #-580]	; 0xfffffdbc
    9adc:	bl	0 <__aeabi_l2d>
    9ae0:	vmov	d16, r0, r1
    9ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9ae8:	vstr	d16, [r0]
    9aec:	b	9af0 <eval_float+0x428>
    9af0:	b	aa0c <eval_float+0x1344>
    9af4:	ldr	r0, [fp, #-16]
    9af8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9afc:	ldr	r1, [r1, #16]
    9b00:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b04:	bl	96c8 <eval_float>
    9b08:	cmp	r0, #0
    9b0c:	beq	9b1c <eval_float+0x454>
    9b10:	mvn	r0, #0
    9b14:	str	r0, [fp, #-12]
    9b18:	b	aa14 <eval_float+0x134c>
    9b1c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b20:	vldr	d16, [r0]
    9b24:	vneg.f64	d16, d16
    9b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b2c:	vstr	d16, [r0]
    9b30:	b	aa0c <eval_float+0x1344>
    9b34:	ldr	r0, [fp, #-16]
    9b38:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9b3c:	ldr	r1, [r1, #16]
    9b40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b44:	bl	96c8 <eval_float>
    9b48:	cmp	r0, #0
    9b4c:	beq	9b5c <eval_float+0x494>
    9b50:	mvn	r0, #0
    9b54:	str	r0, [fp, #-12]
    9b58:	b	aa14 <eval_float+0x134c>
    9b5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b60:	vldr	d16, [r0]
    9b64:	vcmpe.f64	d16, #0.0
    9b68:	vmrs	APSR_nzcv, fpscr
    9b6c:	blt	9b80 <eval_float+0x4b8>
    9b70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b74:	vldr	d16, [r0]
    9b78:	vstr	d16, [sp, #64]	; 0x40
    9b7c:	b	9b90 <eval_float+0x4c8>
    9b80:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b84:	vldr	d16, [r0]
    9b88:	vneg.f64	d16, d16
    9b8c:	vstr	d16, [sp, #64]	; 0x40
    9b90:	vldr	d16, [sp, #64]	; 0x40
    9b94:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9b98:	vstr	d16, [r0]
    9b9c:	b	aa0c <eval_float+0x1344>
    9ba0:	ldr	r0, [fp, #-16]
    9ba4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ba8:	ldr	r1, [r1, #16]
    9bac:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9bb0:	bl	96c8 <eval_float>
    9bb4:	cmp	r0, #0
    9bb8:	beq	9bc8 <eval_float+0x500>
    9bbc:	mvn	r0, #0
    9bc0:	str	r0, [fp, #-12]
    9bc4:	b	aa14 <eval_float+0x134c>
    9bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9bcc:	vldr	d16, [r0]
    9bd0:	vrintp.f64	d16, d16
    9bd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9bd8:	vstr	d16, [r0]
    9bdc:	b	aa0c <eval_float+0x1344>
    9be0:	ldr	r0, [fp, #-16]
    9be4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9be8:	ldr	r1, [r1, #16]
    9bec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9bf0:	bl	96c8 <eval_float>
    9bf4:	cmp	r0, #0
    9bf8:	beq	9c08 <eval_float+0x540>
    9bfc:	mvn	r0, #0
    9c00:	str	r0, [fp, #-12]
    9c04:	b	aa14 <eval_float+0x134c>
    9c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c0c:	vldr	d16, [r0]
    9c10:	vrintm.f64	d16, d16
    9c14:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c18:	vstr	d16, [r0]
    9c1c:	b	aa0c <eval_float+0x1344>
    9c20:	ldr	r0, [fp, #-16]
    9c24:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9c28:	ldr	r1, [r1, #16]
    9c2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9c30:	bl	96c8 <eval_float>
    9c34:	cmp	r0, #0
    9c38:	beq	9c48 <eval_float+0x580>
    9c3c:	mvn	r0, #0
    9c40:	str	r0, [fp, #-12]
    9c44:	b	aa14 <eval_float+0x134c>
    9c48:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c4c:	vldr	d16, [r0]
    9c50:	vcmpe.f64	d16, #0.0
    9c54:	vmrs	APSR_nzcv, fpscr
    9c58:	bpl	9c7c <eval_float+0x5b4>
    9c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c60:	vldr	d16, [r0]
    9c64:	vmov.f64	d17, #96	; 0x3f000000  0.5
    9c68:	vsub.f64	d16, d16, d17
    9c6c:	vrintp.f64	d16, d16
    9c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c74:	vstr	d16, [r0]
    9c78:	b	9c98 <eval_float+0x5d0>
    9c7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c80:	vldr	d16, [r0]
    9c84:	vmov.f64	d17, #96	; 0x3f000000  0.5
    9c88:	vadd.f64	d16, d16, d17
    9c8c:	vrintm.f64	d16, d16
    9c90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9c94:	vstr	d16, [r0]
    9c98:	b	aa0c <eval_float+0x1344>
    9c9c:	ldr	r0, [fp, #-16]
    9ca0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ca4:	ldr	r1, [r1, #16]
    9ca8:	sub	r2, fp, #592	; 0x250
    9cac:	bl	96c8 <eval_float>
    9cb0:	cmp	r0, #0
    9cb4:	beq	9cc4 <eval_float+0x5fc>
    9cb8:	mvn	r0, #0
    9cbc:	str	r0, [fp, #-12]
    9cc0:	b	aa14 <eval_float+0x134c>
    9cc4:	ldr	r0, [fp, #-16]
    9cc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ccc:	ldr	r1, [r1, #20]
    9cd0:	sub	r2, fp, #600	; 0x258
    9cd4:	bl	96c8 <eval_float>
    9cd8:	cmp	r0, #0
    9cdc:	beq	9cec <eval_float+0x624>
    9ce0:	mvn	r0, #0
    9ce4:	str	r0, [fp, #-12]
    9ce8:	b	aa14 <eval_float+0x134c>
    9cec:	vldr	d16, [fp, #-592]	; 0xfffffdb0
    9cf0:	vldr	d17, [fp, #-600]	; 0xfffffda8
    9cf4:	vadd.f64	d16, d16, d17
    9cf8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9cfc:	vstr	d16, [r0]
    9d00:	b	aa0c <eval_float+0x1344>
    9d04:	ldr	r0, [fp, #-16]
    9d08:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d0c:	ldr	r1, [r1, #16]
    9d10:	sub	r2, fp, #608	; 0x260
    9d14:	bl	96c8 <eval_float>
    9d18:	cmp	r0, #0
    9d1c:	beq	9d2c <eval_float+0x664>
    9d20:	mvn	r0, #0
    9d24:	str	r0, [fp, #-12]
    9d28:	b	aa14 <eval_float+0x134c>
    9d2c:	ldr	r0, [fp, #-16]
    9d30:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d34:	ldr	r1, [r1, #20]
    9d38:	sub	r2, fp, #616	; 0x268
    9d3c:	bl	96c8 <eval_float>
    9d40:	cmp	r0, #0
    9d44:	beq	9d54 <eval_float+0x68c>
    9d48:	mvn	r0, #0
    9d4c:	str	r0, [fp, #-12]
    9d50:	b	aa14 <eval_float+0x134c>
    9d54:	vldr	d16, [fp, #-608]	; 0xfffffda0
    9d58:	vldr	d17, [fp, #-616]	; 0xfffffd98
    9d5c:	vsub.f64	d16, d16, d17
    9d60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9d64:	vstr	d16, [r0]
    9d68:	b	aa0c <eval_float+0x1344>
    9d6c:	ldr	r0, [fp, #-16]
    9d70:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d74:	ldr	r1, [r1, #16]
    9d78:	sub	r2, fp, #624	; 0x270
    9d7c:	bl	96c8 <eval_float>
    9d80:	cmp	r0, #0
    9d84:	beq	9d94 <eval_float+0x6cc>
    9d88:	mvn	r0, #0
    9d8c:	str	r0, [fp, #-12]
    9d90:	b	aa14 <eval_float+0x134c>
    9d94:	ldr	r0, [fp, #-16]
    9d98:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9d9c:	ldr	r1, [r1, #20]
    9da0:	sub	r2, fp, #632	; 0x278
    9da4:	bl	96c8 <eval_float>
    9da8:	cmp	r0, #0
    9dac:	beq	9dbc <eval_float+0x6f4>
    9db0:	mvn	r0, #0
    9db4:	str	r0, [fp, #-12]
    9db8:	b	aa14 <eval_float+0x134c>
    9dbc:	vldr	d16, [fp, #-624]	; 0xfffffd90
    9dc0:	vldr	d17, [fp, #-632]	; 0xfffffd88
    9dc4:	vmul.f64	d16, d16, d17
    9dc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9dcc:	vstr	d16, [r0]
    9dd0:	b	aa0c <eval_float+0x1344>
    9dd4:	ldr	r0, [fp, #-16]
    9dd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ddc:	ldr	r1, [r1, #16]
    9de0:	sub	r2, fp, #640	; 0x280
    9de4:	bl	96c8 <eval_float>
    9de8:	cmp	r0, #0
    9dec:	beq	9dfc <eval_float+0x734>
    9df0:	mvn	r0, #0
    9df4:	str	r0, [fp, #-12]
    9df8:	b	aa14 <eval_float+0x134c>
    9dfc:	ldr	r0, [fp, #-16]
    9e00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9e04:	ldr	r1, [r1, #20]
    9e08:	sub	r2, fp, #648	; 0x288
    9e0c:	bl	96c8 <eval_float>
    9e10:	cmp	r0, #0
    9e14:	beq	9e24 <eval_float+0x75c>
    9e18:	mvn	r0, #0
    9e1c:	str	r0, [fp, #-12]
    9e20:	b	aa14 <eval_float+0x134c>
    9e24:	vldr	d16, [fp, #-648]	; 0xfffffd78
    9e28:	vcmp.f64	d16, #0.0
    9e2c:	vmrs	APSR_nzcv, fpscr
    9e30:	bne	9e50 <eval_float+0x788>
    9e34:	mvn	r0, #400	; 0x190
    9e38:	movw	r1, #0
    9e3c:	movt	r1, #0
    9e40:	bl	0 <coda_set_error>
    9e44:	mvn	r0, #0
    9e48:	str	r0, [fp, #-12]
    9e4c:	b	aa14 <eval_float+0x134c>
    9e50:	vldr	d16, [fp, #-640]	; 0xfffffd80
    9e54:	vldr	d17, [fp, #-648]	; 0xfffffd78
    9e58:	vdiv.f64	d16, d16, d17
    9e5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9e60:	vstr	d16, [r0]
    9e64:	b	aa0c <eval_float+0x1344>
    9e68:	ldr	r0, [fp, #-16]
    9e6c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9e70:	ldr	r1, [r1, #16]
    9e74:	sub	r2, fp, #656	; 0x290
    9e78:	bl	96c8 <eval_float>
    9e7c:	cmp	r0, #0
    9e80:	beq	9e90 <eval_float+0x7c8>
    9e84:	mvn	r0, #0
    9e88:	str	r0, [fp, #-12]
    9e8c:	b	aa14 <eval_float+0x134c>
    9e90:	ldr	r0, [fp, #-16]
    9e94:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9e98:	ldr	r1, [r1, #20]
    9e9c:	sub	r2, fp, #664	; 0x298
    9ea0:	bl	96c8 <eval_float>
    9ea4:	cmp	r0, #0
    9ea8:	beq	9eb8 <eval_float+0x7f0>
    9eac:	mvn	r0, #0
    9eb0:	str	r0, [fp, #-12]
    9eb4:	b	aa14 <eval_float+0x134c>
    9eb8:	vldr	d16, [fp, #-664]	; 0xfffffd68
    9ebc:	vcmp.f64	d16, #0.0
    9ec0:	vmrs	APSR_nzcv, fpscr
    9ec4:	bne	9ee4 <eval_float+0x81c>
    9ec8:	mvn	r0, #400	; 0x190
    9ecc:	movw	r1, #0
    9ed0:	movt	r1, #0
    9ed4:	bl	0 <coda_set_error>
    9ed8:	mvn	r0, #0
    9edc:	str	r0, [fp, #-12]
    9ee0:	b	aa14 <eval_float+0x134c>
    9ee4:	vldr	d0, [fp, #-656]	; 0xfffffd70
    9ee8:	vldr	d1, [fp, #-664]	; 0xfffffd68
    9eec:	bl	0 <fmod>
    9ef0:	ldr	lr, [fp, #-24]	; 0xffffffe8
    9ef4:	vstr	d0, [lr]
    9ef8:	b	aa0c <eval_float+0x1344>
    9efc:	ldr	r0, [fp, #-16]
    9f00:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9f04:	ldr	r1, [r1, #16]
    9f08:	sub	r2, fp, #672	; 0x2a0
    9f0c:	bl	96c8 <eval_float>
    9f10:	cmp	r0, #0
    9f14:	beq	9f24 <eval_float+0x85c>
    9f18:	mvn	r0, #0
    9f1c:	str	r0, [fp, #-12]
    9f20:	b	aa14 <eval_float+0x134c>
    9f24:	ldr	r0, [fp, #-28]	; 0xffffffe4
    9f28:	ldr	r0, [r0, #20]
    9f2c:	ldr	r0, [r0, #4]
    9f30:	cmp	r0, #1
    9f34:	bne	9fec <eval_float+0x924>
    9f38:	ldr	r0, [fp, #-16]
    9f3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9f40:	ldr	r1, [r1, #20]
    9f44:	sub	r2, fp, #688	; 0x2b0
    9f48:	bl	70a8 <eval_integer>
    9f4c:	cmp	r0, #0
    9f50:	beq	9f60 <eval_float+0x898>
    9f54:	mvn	r0, #0
    9f58:	str	r0, [fp, #-12]
    9f5c:	b	aa14 <eval_float+0x134c>
    9f60:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9f64:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9f68:	mvn	r2, #63	; 0x3f
    9f6c:	subs	r0, r0, r2
    9f70:	mvn	r2, #0
    9f74:	sbcs	r1, r1, r2
    9f78:	str	r0, [sp, #60]	; 0x3c
    9f7c:	str	r1, [sp, #56]	; 0x38
    9f80:	blt	9fc0 <eval_float+0x8f8>
    9f84:	b	9f88 <eval_float+0x8c0>
    9f88:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9f8c:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9f90:	rsbs	r0, r0, #64	; 0x40
    9f94:	rscs	r1, r1, #0
    9f98:	str	r0, [sp, #52]	; 0x34
    9f9c:	str	r1, [sp, #48]	; 0x30
    9fa0:	blt	9fc0 <eval_float+0x8f8>
    9fa4:	b	9fa8 <eval_float+0x8e0>
    9fa8:	vldr	d0, [fp, #-672]	; 0xfffffd60
    9fac:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9fb0:	bl	e4e8 <ipow>
    9fb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9fb8:	vstr	d0, [r0]
    9fbc:	b	9fe8 <eval_float+0x920>
    9fc0:	vldr	d0, [fp, #-672]	; 0xfffffd60
    9fc4:	ldr	r0, [fp, #-688]	; 0xfffffd50
    9fc8:	ldr	r1, [fp, #-684]	; 0xfffffd54
    9fcc:	vstr	d0, [sp, #40]	; 0x28
    9fd0:	bl	0 <__aeabi_l2d>
    9fd4:	vmov	d1, r0, r1
    9fd8:	vldr	d0, [sp, #40]	; 0x28
    9fdc:	bl	0 <pow>
    9fe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    9fe4:	vstr	d0, [r0]
    9fe8:	b	a028 <eval_float+0x960>
    9fec:	ldr	r0, [fp, #-16]
    9ff0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    9ff4:	ldr	r1, [r1, #20]
    9ff8:	sub	r2, fp, #680	; 0x2a8
    9ffc:	bl	96c8 <eval_float>
    a000:	cmp	r0, #0
    a004:	beq	a014 <eval_float+0x94c>
    a008:	mvn	r0, #0
    a00c:	str	r0, [fp, #-12]
    a010:	b	aa14 <eval_float+0x134c>
    a014:	vldr	d0, [fp, #-672]	; 0xfffffd60
    a018:	vldr	d1, [fp, #-680]	; 0xfffffd58
    a01c:	bl	0 <pow>
    a020:	ldr	lr, [fp, #-24]	; 0xffffffe8
    a024:	vstr	d0, [lr]
    a028:	b	aa0c <eval_float+0x1344>
    a02c:	ldr	r0, [fp, #-16]
    a030:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a034:	ldr	r1, [r1, #16]
    a038:	sub	r2, fp, #696	; 0x2b8
    a03c:	bl	96c8 <eval_float>
    a040:	cmp	r0, #0
    a044:	beq	a054 <eval_float+0x98c>
    a048:	mvn	r0, #0
    a04c:	str	r0, [fp, #-12]
    a050:	b	aa14 <eval_float+0x134c>
    a054:	ldr	r0, [fp, #-16]
    a058:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a05c:	ldr	r1, [r1, #20]
    a060:	sub	r2, fp, #704	; 0x2c0
    a064:	bl	96c8 <eval_float>
    a068:	cmp	r0, #0
    a06c:	beq	a07c <eval_float+0x9b4>
    a070:	mvn	r0, #0
    a074:	str	r0, [fp, #-12]
    a078:	b	aa14 <eval_float+0x134c>
    a07c:	vldr	d16, [fp, #-696]	; 0xfffffd48
    a080:	vldr	d17, [fp, #-704]	; 0xfffffd40
    a084:	vcmpe.f64	d16, d17
    a088:	vmrs	APSR_nzcv, fpscr
    a08c:	ble	a09c <eval_float+0x9d4>
    a090:	vldr	d16, [fp, #-696]	; 0xfffffd48
    a094:	vstr	d16, [sp, #32]
    a098:	b	a0a4 <eval_float+0x9dc>
    a09c:	vldr	d16, [fp, #-704]	; 0xfffffd40
    a0a0:	vstr	d16, [sp, #32]
    a0a4:	vldr	d16, [sp, #32]
    a0a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a0ac:	vstr	d16, [r0]
    a0b0:	b	aa0c <eval_float+0x1344>
    a0b4:	ldr	r0, [fp, #-16]
    a0b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a0bc:	ldr	r1, [r1, #16]
    a0c0:	sub	r2, fp, #712	; 0x2c8
    a0c4:	bl	96c8 <eval_float>
    a0c8:	cmp	r0, #0
    a0cc:	beq	a0dc <eval_float+0xa14>
    a0d0:	mvn	r0, #0
    a0d4:	str	r0, [fp, #-12]
    a0d8:	b	aa14 <eval_float+0x134c>
    a0dc:	ldr	r0, [fp, #-16]
    a0e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a0e4:	ldr	r1, [r1, #20]
    a0e8:	sub	r2, fp, #720	; 0x2d0
    a0ec:	bl	96c8 <eval_float>
    a0f0:	cmp	r0, #0
    a0f4:	beq	a104 <eval_float+0xa3c>
    a0f8:	mvn	r0, #0
    a0fc:	str	r0, [fp, #-12]
    a100:	b	aa14 <eval_float+0x134c>
    a104:	vldr	d16, [fp, #-712]	; 0xfffffd38
    a108:	vldr	d17, [fp, #-720]	; 0xfffffd30
    a10c:	vcmpe.f64	d16, d17
    a110:	vmrs	APSR_nzcv, fpscr
    a114:	bpl	a124 <eval_float+0xa5c>
    a118:	vldr	d16, [fp, #-712]	; 0xfffffd38
    a11c:	vstr	d16, [sp, #24]
    a120:	b	a12c <eval_float+0xa64>
    a124:	vldr	d16, [fp, #-720]	; 0xfffffd30
    a128:	vstr	d16, [sp, #24]
    a12c:	vldr	d16, [sp, #24]
    a130:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a134:	vstr	d16, [r0]
    a138:	b	aa0c <eval_float+0x1344>
    a13c:	ldr	r0, [fp, #-16]
    a140:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a144:	ldr	r1, [r1, #16]
    a148:	sub	r2, fp, #724	; 0x2d4
    a14c:	sub	r3, fp, #732	; 0x2dc
    a150:	sub	ip, fp, #740	; 0x2e4
    a154:	str	ip, [sp]
    a158:	bl	ac2c <eval_string>
    a15c:	cmp	r0, #0
    a160:	beq	a170 <eval_float+0xaa8>
    a164:	mvn	r0, #0
    a168:	str	r0, [fp, #-12]
    a16c:	b	aa14 <eval_float+0x134c>
    a170:	ldr	r0, [fp, #-732]	; 0xfffffd24
    a174:	cmp	r0, #0
    a178:	bge	a198 <eval_float+0xad0>
    a17c:	mvn	r0, #400	; 0x190
    a180:	movw	r1, #0
    a184:	movt	r1, #0
    a188:	bl	0 <coda_set_error>
    a18c:	mvn	r0, #0
    a190:	str	r0, [fp, #-12]
    a194:	b	aa14 <eval_float+0x134c>
    a198:	ldr	r0, [fp, #-732]	; 0xfffffd24
    a19c:	cmp	r0, #0
    a1a0:	bne	a1c0 <eval_float+0xaf8>
    a1a4:	mvn	r0, #400	; 0x190
    a1a8:	movw	r1, #0
    a1ac:	movt	r1, #0
    a1b0:	bl	0 <coda_set_error>
    a1b4:	mvn	r0, #0
    a1b8:	str	r0, [fp, #-12]
    a1bc:	b	aa14 <eval_float+0x134c>
    a1c0:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a1c4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
    a1c8:	ldr	r2, [fp, #-732]	; 0xfffffd24
    a1cc:	add	r1, r1, r2
    a1d0:	add	r0, r0, r1
    a1d4:	movw	r1, #0
    a1d8:	strb	r1, [r0]
    a1dc:	ldr	r0, [fp, #-16]
    a1e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a1e4:	ldr	r1, [r1, #20]
    a1e8:	sub	r2, fp, #728	; 0x2d8
    a1ec:	sub	r3, fp, #736	; 0x2e0
    a1f0:	sub	ip, fp, #744	; 0x2e8
    a1f4:	str	ip, [sp]
    a1f8:	bl	ac2c <eval_string>
    a1fc:	cmp	r0, #0
    a200:	beq	a218 <eval_float+0xb50>
    a204:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a208:	bl	0 <free>
    a20c:	mvn	r0, #0
    a210:	str	r0, [fp, #-12]
    a214:	b	aa14 <eval_float+0x134c>
    a218:	ldr	r0, [fp, #-736]	; 0xfffffd20
    a21c:	cmp	r0, #0
    a220:	bge	a240 <eval_float+0xb78>
    a224:	mvn	r0, #400	; 0x190
    a228:	movw	r1, #0
    a22c:	movt	r1, #0
    a230:	bl	0 <coda_set_error>
    a234:	mvn	r0, #0
    a238:	str	r0, [fp, #-12]
    a23c:	b	aa14 <eval_float+0x134c>
    a240:	ldr	r0, [fp, #-736]	; 0xfffffd20
    a244:	cmp	r0, #0
    a248:	bne	a268 <eval_float+0xba0>
    a24c:	mvn	r0, #400	; 0x190
    a250:	movw	r1, #0
    a254:	movt	r1, #0
    a258:	bl	0 <coda_set_error>
    a25c:	mvn	r0, #0
    a260:	str	r0, [fp, #-12]
    a264:	b	aa14 <eval_float+0x134c>
    a268:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a26c:	ldr	r1, [fp, #-728]	; 0xfffffd28
    a270:	ldr	r2, [fp, #-736]	; 0xfffffd20
    a274:	add	r1, r1, r2
    a278:	add	r0, r0, r1
    a27c:	movw	r1, #0
    a280:	strb	r1, [r0]
    a284:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a288:	ldr	r1, [fp, #-728]	; 0xfffffd28
    a28c:	add	r0, r0, r1
    a290:	ldr	r1, [fp, #-740]	; 0xfffffd1c
    a294:	ldr	r2, [fp, #-724]	; 0xfffffd2c
    a298:	add	r1, r1, r2
    a29c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a2a0:	bl	0 <coda_time_string_to_double>
    a2a4:	cmp	r0, #0
    a2a8:	beq	a2c8 <eval_float+0xc00>
    a2ac:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a2b0:	bl	0 <free>
    a2b4:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a2b8:	bl	0 <free>
    a2bc:	mvn	r0, #0
    a2c0:	str	r0, [fp, #-12]
    a2c4:	b	aa14 <eval_float+0x134c>
    a2c8:	ldr	r0, [fp, #-744]	; 0xfffffd18
    a2cc:	bl	0 <free>
    a2d0:	ldr	r0, [fp, #-740]	; 0xfffffd1c
    a2d4:	bl	0 <free>
    a2d8:	b	aa0c <eval_float+0x1344>
    a2dc:	ldr	r0, [fp, #-16]
    a2e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a2e4:	ldr	r1, [r1, #16]
    a2e8:	sub	r2, fp, #748	; 0x2ec
    a2ec:	bl	5288 <eval_boolean>
    a2f0:	cmp	r0, #0
    a2f4:	beq	a304 <eval_float+0xc3c>
    a2f8:	mvn	r0, #0
    a2fc:	str	r0, [fp, #-12]
    a300:	b	aa14 <eval_float+0x134c>
    a304:	ldr	r0, [fp, #-748]	; 0xfffffd14
    a308:	cmp	r0, #0
    a30c:	beq	a33c <eval_float+0xc74>
    a310:	ldr	r0, [fp, #-16]
    a314:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a318:	ldr	r1, [r1, #20]
    a31c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a320:	bl	96c8 <eval_float>
    a324:	cmp	r0, #0
    a328:	beq	a338 <eval_float+0xc70>
    a32c:	mvn	r0, #0
    a330:	str	r0, [fp, #-12]
    a334:	b	aa14 <eval_float+0x134c>
    a338:	b	a368 <eval_float+0xca0>
    a33c:	ldr	r0, [fp, #-16]
    a340:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a344:	ldr	r1, [r1, #24]
    a348:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a34c:	bl	96c8 <eval_float>
    a350:	cmp	r0, #0
    a354:	beq	a364 <eval_float+0xc9c>
    a358:	mvn	r0, #0
    a35c:	str	r0, [fp, #-12]
    a360:	b	aa14 <eval_float+0x134c>
    a364:	b	a368 <eval_float+0xca0>
    a368:	b	aa0c <eval_float+0x1344>
    a36c:	ldr	r0, [fp, #-16]
    a370:	ldr	r0, [r0]
    a374:	movw	r1, #0
    a378:	cmp	r0, r1
    a37c:	beq	a384 <eval_float+0xcbc>
    a380:	b	a3a4 <eval_float+0xcdc>
    a384:	movw	r0, #0
    a388:	movt	r0, #0
    a38c:	movw	r1, #0
    a390:	movt	r1, #0
    a394:	movw	r2, #1738	; 0x6ca
    a398:	movw	r3, #0
    a39c:	movt	r3, #0
    a3a0:	bl	0 <__assert_fail>
    a3a4:	ldr	r0, [fp, #-16]
    a3a8:	add	r0, r0, #8
    a3ac:	sub	lr, fp, #1024	; 0x400
    a3b0:	sub	r1, lr, #248	; 0xf8
    a3b4:	str	r0, [sp, #20]
    a3b8:	mov	r0, r1
    a3bc:	ldr	r1, [sp, #20]
    a3c0:	movw	r2, #520	; 0x208
    a3c4:	bl	0 <memcpy>
    a3c8:	ldr	r0, [fp, #-16]
    a3cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a3d0:	ldr	r1, [r1, #16]
    a3d4:	bl	d2e4 <eval_cursor>
    a3d8:	cmp	r0, #0
    a3dc:	beq	a3ec <eval_float+0xd24>
    a3e0:	mvn	r0, #0
    a3e4:	str	r0, [fp, #-12]
    a3e8:	b	aa14 <eval_float+0x134c>
    a3ec:	ldr	r0, [fp, #-16]
    a3f0:	add	r0, r0, #8
    a3f4:	sub	lr, fp, #1024	; 0x400
    a3f8:	sub	r1, lr, #252	; 0xfc
    a3fc:	bl	0 <coda_cursor_get_num_elements>
    a400:	cmp	r0, #0
    a404:	beq	a414 <eval_float+0xd4c>
    a408:	mvn	r0, #0
    a40c:	str	r0, [fp, #-12]
    a410:	b	aa14 <eval_float+0x134c>
    a414:	vldr	d16, [pc, #972]	; a7e8 <eval_float+0x1120>
    a418:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a41c:	vstr	d16, [r0]
    a420:	ldr	r0, [fp, #-1276]	; 0xfffffb04
    a424:	cmp	r0, #0
    a428:	ble	a4f8 <eval_float+0xe30>
    a42c:	ldr	r0, [fp, #-16]
    a430:	add	r0, r0, #8
    a434:	bl	0 <coda_cursor_goto_first_array_element>
    a438:	cmp	r0, #0
    a43c:	beq	a44c <eval_float+0xd84>
    a440:	mvn	r0, #0
    a444:	str	r0, [fp, #-12]
    a448:	b	aa14 <eval_float+0x134c>
    a44c:	movw	r0, #0
    a450:	str	r0, [fp, #-1280]	; 0xfffffb00
    a454:	ldr	r0, [fp, #-1280]	; 0xfffffb00
    a458:	ldr	r1, [fp, #-1276]	; 0xfffffb04
    a45c:	cmp	r0, r1
    a460:	bge	a4f4 <eval_float+0xe2c>
    a464:	ldr	r0, [fp, #-16]
    a468:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a46c:	ldr	r1, [r1, #20]
    a470:	sub	lr, fp, #1024	; 0x400
    a474:	sub	r2, lr, #264	; 0x108
    a478:	bl	96c8 <eval_float>
    a47c:	cmp	r0, #0
    a480:	beq	a490 <eval_float+0xdc8>
    a484:	mvn	r0, #0
    a488:	str	r0, [fp, #-12]
    a48c:	b	aa14 <eval_float+0x134c>
    a490:	ldr	r0, [sp, #96]	; 0x60
    a494:	vldr	d16, [r0, #536]	; 0x218
    a498:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a49c:	vldr	d17, [r1]
    a4a0:	vadd.f64	d16, d17, d16
    a4a4:	vstr	d16, [r1]
    a4a8:	ldr	r1, [fp, #-1280]	; 0xfffffb00
    a4ac:	ldr	r2, [fp, #-1276]	; 0xfffffb04
    a4b0:	sub	r2, r2, #1
    a4b4:	cmp	r1, r2
    a4b8:	bge	a4e0 <eval_float+0xe18>
    a4bc:	ldr	r0, [fp, #-16]
    a4c0:	add	r0, r0, #8
    a4c4:	bl	0 <coda_cursor_goto_next_array_element>
    a4c8:	cmp	r0, #0
    a4cc:	beq	a4dc <eval_float+0xe14>
    a4d0:	mvn	r0, #0
    a4d4:	str	r0, [fp, #-12]
    a4d8:	b	aa14 <eval_float+0x134c>
    a4dc:	b	a4e0 <eval_float+0xe18>
    a4e0:	b	a4e4 <eval_float+0xe1c>
    a4e4:	ldr	r0, [fp, #-1280]	; 0xfffffb00
    a4e8:	add	r0, r0, #1
    a4ec:	str	r0, [fp, #-1280]	; 0xfffffb00
    a4f0:	b	a454 <eval_float+0xd8c>
    a4f4:	b	a4f8 <eval_float+0xe30>
    a4f8:	ldr	r0, [fp, #-16]
    a4fc:	add	r0, r0, #8
    a500:	sub	lr, fp, #1024	; 0x400
    a504:	sub	r1, lr, #248	; 0xf8
    a508:	movw	r2, #520	; 0x208
    a50c:	bl	0 <memcpy>
    a510:	b	aa0c <eval_float+0x1344>
    a514:	ldr	r0, [fp, #-16]
    a518:	ldr	r0, [r0]
    a51c:	movw	r1, #0
    a520:	cmp	r0, r1
    a524:	beq	a52c <eval_float+0xe64>
    a528:	b	a54c <eval_float+0xe84>
    a52c:	movw	r0, #0
    a530:	movt	r0, #0
    a534:	movw	r1, #0
    a538:	movt	r1, #0
    a53c:	movw	r2, #1783	; 0x6f7
    a540:	movw	r3, #0
    a544:	movt	r3, #0
    a548:	bl	0 <__assert_fail>
    a54c:	ldr	r0, [fp, #-16]
    a550:	add	r0, r0, #8
    a554:	add	r1, sp, #1184	; 0x4a0
    a558:	str	r0, [sp, #16]
    a55c:	mov	r0, r1
    a560:	ldr	r1, [sp, #16]
    a564:	movw	r2, #520	; 0x208
    a568:	bl	0 <memcpy>
    a56c:	ldr	r0, [fp, #-16]
    a570:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a574:	ldr	r1, [r1, #16]
    a578:	bl	d2e4 <eval_cursor>
    a57c:	cmp	r0, #0
    a580:	beq	a590 <eval_float+0xec8>
    a584:	mvn	r0, #0
    a588:	str	r0, [fp, #-12]
    a58c:	b	aa14 <eval_float+0x134c>
    a590:	ldr	r0, [fp, #-16]
    a594:	add	r0, r0, #8
    a598:	add	lr, sp, #1024	; 0x400
    a59c:	add	r1, lr, #156	; 0x9c
    a5a0:	bl	0 <coda_cursor_get_num_elements>
    a5a4:	cmp	r0, #0
    a5a8:	beq	a5b8 <eval_float+0xef0>
    a5ac:	mvn	r0, #0
    a5b0:	str	r0, [fp, #-12]
    a5b4:	b	aa14 <eval_float+0x134c>
    a5b8:	bl	0 <coda_NaN>
    a5bc:	ldr	lr, [fp, #-24]	; 0xffffffe8
    a5c0:	vstr	d0, [lr]
    a5c4:	ldr	lr, [sp, #1180]	; 0x49c
    a5c8:	cmp	lr, #0
    a5cc:	ble	a6b8 <eval_float+0xff0>
    a5d0:	ldr	r0, [fp, #-16]
    a5d4:	add	r0, r0, #8
    a5d8:	bl	0 <coda_cursor_goto_first_array_element>
    a5dc:	cmp	r0, #0
    a5e0:	beq	a5f0 <eval_float+0xf28>
    a5e4:	mvn	r0, #0
    a5e8:	str	r0, [fp, #-12]
    a5ec:	b	aa14 <eval_float+0x134c>
    a5f0:	movw	r0, #0
    a5f4:	str	r0, [sp, #1176]	; 0x498
    a5f8:	ldr	r0, [sp, #1176]	; 0x498
    a5fc:	ldr	r1, [sp, #1180]	; 0x49c
    a600:	cmp	r0, r1
    a604:	bge	a6b4 <eval_float+0xfec>
    a608:	ldr	r0, [fp, #-16]
    a60c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a610:	ldr	r1, [r1, #20]
    a614:	add	r2, sp, #1168	; 0x490
    a618:	bl	96c8 <eval_float>
    a61c:	cmp	r0, #0
    a620:	beq	a630 <eval_float+0xf68>
    a624:	mvn	r0, #0
    a628:	str	r0, [fp, #-12]
    a62c:	b	aa14 <eval_float+0x134c>
    a630:	ldr	r0, [sp, #1176]	; 0x498
    a634:	cmp	r0, #0
    a638:	beq	a658 <eval_float+0xf90>
    a63c:	ldr	r0, [sp, #96]	; 0x60
    a640:	vldr	d16, [r0]
    a644:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a648:	vldr	d17, [r1]
    a64c:	vcmpe.f64	d16, d17
    a650:	vmrs	APSR_nzcv, fpscr
    a654:	ble	a668 <eval_float+0xfa0>
    a658:	ldr	r0, [sp, #96]	; 0x60
    a65c:	vldr	d16, [r0]
    a660:	ldr	r1, [fp, #-24]	; 0xffffffe8
    a664:	vstr	d16, [r1]
    a668:	ldr	r0, [sp, #1176]	; 0x498
    a66c:	ldr	r1, [sp, #1180]	; 0x49c
    a670:	sub	r1, r1, #1
    a674:	cmp	r0, r1
    a678:	bge	a6a0 <eval_float+0xfd8>
    a67c:	ldr	r0, [fp, #-16]
    a680:	add	r0, r0, #8
    a684:	bl	0 <coda_cursor_goto_next_array_element>
    a688:	cmp	r0, #0
    a68c:	beq	a69c <eval_float+0xfd4>
    a690:	mvn	r0, #0
    a694:	str	r0, [fp, #-12]
    a698:	b	aa14 <eval_float+0x134c>
    a69c:	b	a6a0 <eval_float+0xfd8>
    a6a0:	b	a6a4 <eval_float+0xfdc>
    a6a4:	ldr	r0, [sp, #1176]	; 0x498
    a6a8:	add	r0, r0, #1
    a6ac:	str	r0, [sp, #1176]	; 0x498
    a6b0:	b	a5f8 <eval_float+0xf30>
    a6b4:	b	a6b8 <eval_float+0xff0>
    a6b8:	ldr	r0, [fp, #-16]
    a6bc:	add	r0, r0, #8
    a6c0:	add	r1, sp, #1184	; 0x4a0
    a6c4:	movw	r2, #520	; 0x208
    a6c8:	bl	0 <memcpy>
    a6cc:	b	aa0c <eval_float+0x1344>
    a6d0:	ldr	r0, [fp, #-16]
    a6d4:	ldr	r0, [r0]
    a6d8:	movw	r1, #0
    a6dc:	cmp	r0, r1
    a6e0:	beq	a6e8 <eval_float+0x1020>
    a6e4:	b	a708 <eval_float+0x1040>
    a6e8:	movw	r0, #0
    a6ec:	movt	r0, #0
    a6f0:	movw	r1, #0
    a6f4:	movt	r1, #0
    a6f8:	movw	r2, #1831	; 0x727
    a6fc:	movw	r3, #0
    a700:	movt	r3, #0
    a704:	bl	0 <__assert_fail>
    a708:	ldr	r0, [fp, #-16]
    a70c:	add	r0, r0, #8
    a710:	add	r1, sp, #648	; 0x288
    a714:	str	r0, [sp, #12]
    a718:	mov	r0, r1
    a71c:	ldr	r1, [sp, #12]
    a720:	movw	r2, #520	; 0x208
    a724:	bl	0 <memcpy>
    a728:	ldr	r0, [fp, #-16]
    a72c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a730:	ldr	r1, [r1, #16]
    a734:	bl	d2e4 <eval_cursor>
    a738:	cmp	r0, #0
    a73c:	beq	a74c <eval_float+0x1084>
    a740:	mvn	r0, #0
    a744:	str	r0, [fp, #-12]
    a748:	b	aa14 <eval_float+0x134c>
    a74c:	ldr	r0, [fp, #-16]
    a750:	add	r0, r0, #8
    a754:	add	r1, sp, #644	; 0x284
    a758:	bl	0 <coda_cursor_get_num_elements>
    a75c:	cmp	r0, #0
    a760:	beq	a770 <eval_float+0x10a8>
    a764:	mvn	r0, #0
    a768:	str	r0, [fp, #-12]
    a76c:	b	aa14 <eval_float+0x134c>
    a770:	bl	0 <coda_NaN>
    a774:	ldr	lr, [fp, #-24]	; 0xffffffe8
    a778:	vstr	d0, [lr]
    a77c:	ldr	lr, [sp, #644]	; 0x284
    a780:	cmp	lr, #0
    a784:	ble	a870 <eval_float+0x11a8>
    a788:	ldr	r0, [fp, #-16]
    a78c:	add	r0, r0, #8
    a790:	bl	0 <coda_cursor_goto_first_array_element>
    a794:	cmp	r0, #0
    a798:	beq	a7a8 <eval_float+0x10e0>
    a79c:	mvn	r0, #0
    a7a0:	str	r0, [fp, #-12]
    a7a4:	b	aa14 <eval_float+0x134c>
    a7a8:	movw	r0, #0
    a7ac:	str	r0, [sp, #640]	; 0x280
    a7b0:	ldr	r0, [sp, #640]	; 0x280
    a7b4:	ldr	r1, [sp, #644]	; 0x284
    a7b8:	cmp	r0, r1
    a7bc:	bge	a86c <eval_float+0x11a4>
    a7c0:	ldr	r0, [fp, #-16]
    a7c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a7c8:	ldr	r1, [r1, #20]
    a7cc:	add	r2, sp, #632	; 0x278
    a7d0:	bl	96c8 <eval_float>
    a7d4:	cmp	r0, #0
    a7d8:	beq	a7f0 <eval_float+0x1128>
    a7dc:	mvn	r0, #0
    a7e0:	str	r0, [fp, #-12]
    a7e4:	b	aa14 <eval_float+0x134c>
	...
    a7f0:	ldr	r0, [sp, #640]	; 0x280
    a7f4:	cmp	r0, #0
    a7f8:	beq	a814 <eval_float+0x114c>
    a7fc:	vldr	d16, [sp, #632]	; 0x278
    a800:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a804:	vldr	d17, [r0]
    a808:	vcmpe.f64	d16, d17
    a80c:	vmrs	APSR_nzcv, fpscr
    a810:	bpl	a820 <eval_float+0x1158>
    a814:	vldr	d16, [sp, #632]	; 0x278
    a818:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a81c:	vstr	d16, [r0]
    a820:	ldr	r0, [sp, #640]	; 0x280
    a824:	ldr	r1, [sp, #644]	; 0x284
    a828:	sub	r1, r1, #1
    a82c:	cmp	r0, r1
    a830:	bge	a858 <eval_float+0x1190>
    a834:	ldr	r0, [fp, #-16]
    a838:	add	r0, r0, #8
    a83c:	bl	0 <coda_cursor_goto_next_array_element>
    a840:	cmp	r0, #0
    a844:	beq	a854 <eval_float+0x118c>
    a848:	mvn	r0, #0
    a84c:	str	r0, [fp, #-12]
    a850:	b	aa14 <eval_float+0x134c>
    a854:	b	a858 <eval_float+0x1190>
    a858:	b	a85c <eval_float+0x1194>
    a85c:	ldr	r0, [sp, #640]	; 0x280
    a860:	add	r0, r0, #1
    a864:	str	r0, [sp, #640]	; 0x280
    a868:	b	a7b0 <eval_float+0x10e8>
    a86c:	b	a870 <eval_float+0x11a8>
    a870:	ldr	r0, [fp, #-16]
    a874:	add	r0, r0, #8
    a878:	add	r1, sp, #648	; 0x288
    a87c:	movw	r2, #520	; 0x208
    a880:	bl	0 <memcpy>
    a884:	b	aa0c <eval_float+0x1344>
    a888:	ldr	r0, [fp, #-16]
    a88c:	ldr	r0, [r0]
    a890:	movw	r1, #0
    a894:	cmp	r0, r1
    a898:	beq	a8a0 <eval_float+0x11d8>
    a89c:	b	a8c0 <eval_float+0x11f8>
    a8a0:	movw	r0, #0
    a8a4:	movt	r0, #0
    a8a8:	movw	r1, #0
    a8ac:	movt	r1, #0
    a8b0:	movw	r2, #1878	; 0x756
    a8b4:	movw	r3, #0
    a8b8:	movt	r3, #0
    a8bc:	bl	0 <__assert_fail>
    a8c0:	ldr	r0, [fp, #-16]
    a8c4:	add	r0, r0, #8
    a8c8:	add	r1, sp, #112	; 0x70
    a8cc:	str	r0, [sp, #8]
    a8d0:	mov	r0, r1
    a8d4:	ldr	r1, [sp, #8]
    a8d8:	movw	r2, #520	; 0x208
    a8dc:	bl	0 <memcpy>
    a8e0:	ldr	r0, [fp, #-16]
    a8e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a8e8:	ldr	r1, [r1, #16]
    a8ec:	bl	d2e4 <eval_cursor>
    a8f0:	cmp	r0, #0
    a8f4:	beq	a904 <eval_float+0x123c>
    a8f8:	mvn	r0, #0
    a8fc:	str	r0, [fp, #-12]
    a900:	b	aa14 <eval_float+0x134c>
    a904:	ldr	r0, [fp, #-16]
    a908:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a90c:	ldr	r1, [r1, #20]
    a910:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a914:	bl	96c8 <eval_float>
    a918:	cmp	r0, #0
    a91c:	beq	a92c <eval_float+0x1264>
    a920:	mvn	r0, #0
    a924:	str	r0, [fp, #-12]
    a928:	b	aa14 <eval_float+0x134c>
    a92c:	ldr	r0, [fp, #-16]
    a930:	add	r0, r0, #8
    a934:	add	r1, sp, #112	; 0x70
    a938:	movw	r2, #520	; 0x208
    a93c:	bl	0 <memcpy>
    a940:	b	aa0c <eval_float+0x1344>
    a944:	ldr	r0, [fp, #-28]	; 0xffffffe4
    a948:	ldr	r0, [r0, #12]
    a94c:	ldrb	r0, [r0]
    a950:	sub	r0, r0, #105	; 0x69
    a954:	str	r0, [sp, #100]	; 0x64
    a958:	ldr	r0, [fp, #-16]
    a95c:	ldr	r1, [sp, #100]	; 0x64
    a960:	add	r0, r0, r1, lsl #3
    a964:	ldr	r1, [r0, #528]	; 0x210
    a968:	ldr	r0, [r0, #532]	; 0x214
    a96c:	str	r0, [sp, #108]	; 0x6c
    a970:	str	r1, [sp, #104]	; 0x68
    a974:	ldr	r0, [fp, #-16]
    a978:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a97c:	ldr	r1, [r1, #16]
    a980:	add	r2, r0, #528	; 0x210
    a984:	ldr	r3, [sp, #100]	; 0x64
    a988:	add	r2, r2, r3, lsl #3
    a98c:	bl	70a8 <eval_integer>
    a990:	cmp	r0, #0
    a994:	beq	a9a4 <eval_float+0x12dc>
    a998:	mvn	r0, #0
    a99c:	str	r0, [fp, #-12]
    a9a0:	b	aa14 <eval_float+0x134c>
    a9a4:	ldr	r0, [fp, #-16]
    a9a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a9ac:	ldr	r1, [r1, #20]
    a9b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a9b4:	bl	96c8 <eval_float>
    a9b8:	cmp	r0, #0
    a9bc:	beq	a9cc <eval_float+0x1304>
    a9c0:	mvn	r0, #0
    a9c4:	str	r0, [fp, #-12]
    a9c8:	b	aa14 <eval_float+0x134c>
    a9cc:	ldr	r0, [sp, #104]	; 0x68
    a9d0:	ldr	r1, [sp, #108]	; 0x6c
    a9d4:	ldr	r2, [fp, #-16]
    a9d8:	ldr	r3, [sp, #100]	; 0x64
    a9dc:	add	r2, r2, r3, lsl #3
    a9e0:	str	r1, [r2, #532]	; 0x214
    a9e4:	str	r0, [r2, #528]	; 0x210
    a9e8:	b	aa0c <eval_float+0x1344>
    a9ec:	movw	r0, #0
    a9f0:	movt	r0, #0
    a9f4:	movw	r1, #0
    a9f8:	movt	r1, #0
    a9fc:	movw	r2, #1909	; 0x775
    aa00:	movw	r3, #0
    aa04:	movt	r3, #0
    aa08:	bl	0 <__assert_fail>
    aa0c:	movw	r0, #0
    aa10:	str	r0, [fp, #-12]
    aa14:	ldr	r0, [fp, #-12]
    aa18:	sub	sp, fp, #8
    aa1c:	pop	{r4, r5, fp, pc}

0000aa20 <coda_expression_eval_string>:
    aa20:	push	{r4, r5, fp, lr}
    aa24:	add	fp, sp, #8
    aa28:	sub	sp, sp, #608	; 0x260
    aa2c:	str	r0, [fp, #-16]
    aa30:	str	r1, [fp, #-20]	; 0xffffffec
    aa34:	str	r2, [fp, #-24]	; 0xffffffe8
    aa38:	str	r3, [fp, #-28]	; 0xffffffe4
    aa3c:	ldr	r0, [fp, #-16]
    aa40:	ldr	r0, [r0, #4]
    aa44:	cmp	r0, #3
    aa48:	beq	aa68 <coda_expression_eval_string+0x48>
    aa4c:	mvn	r0, #99	; 0x63
    aa50:	movw	r1, #0
    aa54:	movt	r1, #0
    aa58:	bl	0 <coda_set_error>
    aa5c:	mvn	r0, #0
    aa60:	str	r0, [fp, #-12]
    aa64:	b	ac20 <coda_expression_eval_string+0x200>
    aa68:	ldr	r0, [fp, #-20]	; 0xffffffec
    aa6c:	movw	r1, #0
    aa70:	cmp	r0, r1
    aa74:	bne	aaa4 <coda_expression_eval_string+0x84>
    aa78:	ldr	r0, [fp, #-16]
    aa7c:	ldr	r0, [r0, #8]
    aa80:	cmp	r0, #0
    aa84:	bne	aaa4 <coda_expression_eval_string+0x84>
    aa88:	mvn	r0, #99	; 0x63
    aa8c:	movw	r1, #0
    aa90:	movt	r1, #0
    aa94:	bl	0 <coda_set_error>
    aa98:	mvn	r0, #0
    aa9c:	str	r0, [fp, #-12]
    aaa0:	b	ac20 <coda_expression_eval_string+0x200>
    aaa4:	ldr	r1, [fp, #-20]	; 0xffffffec
    aaa8:	add	r0, sp, #16
    aaac:	bl	c14 <init_eval_info>
    aab0:	ldr	r1, [fp, #-16]
    aab4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    aab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    aabc:	add	lr, sp, #16
    aac0:	str	r0, [sp, #4]
    aac4:	mov	r0, lr
    aac8:	add	r2, sp, #12
    aacc:	ldr	lr, [sp, #4]
    aad0:	str	lr, [sp]
    aad4:	bl	ac2c <eval_string>
    aad8:	cmp	r0, #0
    aadc:	beq	ab20 <coda_expression_eval_string+0x100>
    aae0:	ldr	r0, [fp, #-20]	; 0xffffffec
    aae4:	movw	r1, #0
    aae8:	cmp	r0, r1
    aaec:	beq	ab14 <coda_expression_eval_string+0xf4>
    aaf0:	ldr	r0, [fp, #-20]	; 0xffffffec
    aaf4:	add	r1, sp, #16
    aaf8:	add	r1, r1, #8
    aafc:	bl	0 <coda_cursor_compare>
    ab00:	cmp	r0, #0
    ab04:	beq	ab14 <coda_expression_eval_string+0xf4>
    ab08:	add	r0, sp, #16
    ab0c:	add	r0, r0, #8
    ab10:	bl	0 <coda_cursor_add_to_error_message>
    ab14:	mvn	r0, #0
    ab18:	str	r0, [fp, #-12]
    ab1c:	b	ac20 <coda_expression_eval_string+0x200>
    ab20:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ab24:	ldr	r0, [r0]
    ab28:	cmp	r0, #0
    ab2c:	ble	abec <coda_expression_eval_string+0x1cc>
    ab30:	ldr	r0, [sp, #12]
    ab34:	cmp	r0, #0
    ab38:	beq	abcc <coda_expression_eval_string+0x1ac>
    ab3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ab40:	ldr	r0, [r0]
    ab44:	add	r0, r0, #1
    ab48:	bl	0 <malloc>
    ab4c:	str	r0, [sp, #8]
    ab50:	ldr	r0, [sp, #8]
    ab54:	movw	lr, #0
    ab58:	cmp	r0, lr
    ab5c:	bne	ab94 <coda_expression_eval_string+0x174>
    ab60:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ab64:	ldr	r2, [r0]
    ab68:	mvn	r0, #0
    ab6c:	movw	r1, #0
    ab70:	movt	r1, #0
    ab74:	movw	r3, #0
    ab78:	movt	r3, #0
    ab7c:	movw	ip, #5251	; 0x1483
    ab80:	str	ip, [sp]
    ab84:	bl	0 <coda_set_error>
    ab88:	mvn	r0, #0
    ab8c:	str	r0, [fp, #-12]
    ab90:	b	ac20 <coda_expression_eval_string+0x200>
    ab94:	ldr	r0, [sp, #8]
    ab98:	ldr	r1, [fp, #-24]	; 0xffffffe8
    ab9c:	ldr	r1, [r1]
    aba0:	ldr	r2, [sp, #12]
    aba4:	add	r1, r1, r2
    aba8:	ldr	r2, [fp, #-28]	; 0xffffffe4
    abac:	ldr	r2, [r2]
    abb0:	bl	0 <memcpy>
    abb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    abb8:	ldr	r0, [r0]
    abbc:	bl	0 <free>
    abc0:	ldr	r0, [sp, #8]
    abc4:	ldr	r1, [fp, #-24]	; 0xffffffe8
    abc8:	str	r0, [r1]
    abcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    abd0:	ldr	r0, [r0]
    abd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    abd8:	ldr	r1, [r1]
    abdc:	add	r0, r0, r1
    abe0:	movw	r1, #0
    abe4:	strb	r1, [r0]
    abe8:	b	ac18 <coda_expression_eval_string+0x1f8>
    abec:	ldr	r0, [fp, #-24]	; 0xffffffe8
    abf0:	ldr	r0, [r0]
    abf4:	movw	r1, #0
    abf8:	cmp	r0, r1
    abfc:	beq	ac0c <coda_expression_eval_string+0x1ec>
    ac00:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac04:	ldr	r0, [r0]
    ac08:	bl	0 <free>
    ac0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac10:	movw	r1, #0
    ac14:	str	r1, [r0]
    ac18:	movw	r0, #0
    ac1c:	str	r0, [fp, #-12]
    ac20:	ldr	r0, [fp, #-12]
    ac24:	sub	sp, fp, #8
    ac28:	pop	{r4, r5, fp, pc}

0000ac2c <eval_string>:
    ac2c:	push	{r4, sl, fp, lr}
    ac30:	add	fp, sp, #8
    ac34:	sub	sp, sp, #776	; 0x308
    ac38:	sub	sp, sp, #3072	; 0xc00
    ac3c:	ldr	ip, [fp, #8]
    ac40:	str	r0, [fp, #-16]
    ac44:	str	r1, [fp, #-20]	; 0xffffffec
    ac48:	str	r2, [fp, #-24]	; 0xffffffe8
    ac4c:	str	r3, [fp, #-28]	; 0xffffffe4
    ac50:	ldr	r0, [fp, #-20]	; 0xffffffec
    ac54:	ldr	r0, [r0]
    ac58:	cmp	r0, #22
    ac5c:	str	ip, [sp, #152]	; 0x98
    ac60:	beq	ac74 <eval_string+0x48>
    ac64:	ldr	r0, [fp, #-20]	; 0xffffffec
    ac68:	ldr	r0, [r0]
    ac6c:	cmp	r0, #21
    ac70:	bne	ad2c <eval_string+0x100>
    ac74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ac78:	movw	r1, #0
    ac7c:	str	r1, [r0]
    ac80:	ldr	r0, [fp, #-20]	; 0xffffffec
    ac84:	ldr	r0, [r0, #12]
    ac88:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ac8c:	str	r0, [r1]
    ac90:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ac94:	ldr	r0, [r0]
    ac98:	cmp	r0, #0
    ac9c:	ble	ad14 <eval_string+0xe8>
    aca0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    aca4:	ldr	r0, [r0]
    aca8:	add	r0, r0, #1
    acac:	bl	0 <malloc>
    acb0:	ldr	lr, [fp, #8]
    acb4:	str	r0, [lr]
    acb8:	ldr	r0, [fp, #8]
    acbc:	ldr	r0, [r0]
    acc0:	movw	lr, #0
    acc4:	cmp	r0, lr
    acc8:	bne	acf4 <eval_string+0xc8>
    accc:	mvn	r0, #0
    acd0:	movw	r1, #0
    acd4:	movt	r1, #0
    acd8:	movw	r2, #0
    acdc:	movt	r2, #0
    ace0:	movw	r3, #2845	; 0xb1d
    ace4:	bl	0 <coda_set_error>
    ace8:	mvn	r0, #0
    acec:	str	r0, [fp, #-12]
    acf0:	b	d1e4 <eval_string+0x25b8>
    acf4:	ldr	r0, [fp, #8]
    acf8:	ldr	r0, [r0]
    acfc:	ldr	r1, [fp, #-20]	; 0xffffffec
    ad00:	ldr	r1, [r1, #16]
    ad04:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ad08:	ldr	r2, [r2]
    ad0c:	bl	0 <memcpy>
    ad10:	b	ad20 <eval_string+0xf4>
    ad14:	ldr	r0, [fp, #8]
    ad18:	movw	r1, #0
    ad1c:	str	r1, [r0]
    ad20:	movw	r0, #0
    ad24:	str	r0, [fp, #-12]
    ad28:	b	d1e4 <eval_string+0x25b8>
    ad2c:	ldr	r0, [fp, #-20]	; 0xffffffec
    ad30:	str	r0, [fp, #-32]	; 0xffffffe0
    ad34:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ad38:	ldr	r0, [r0]
    ad3c:	sub	r0, r0, #1
    ad40:	cmp	r0, #85	; 0x55
    ad44:	str	r0, [sp, #148]	; 0x94
    ad48:	bhi	d1bc <eval_string+0x2590>
    ad4c:	add	r0, pc, #8
    ad50:	ldr	r1, [sp, #148]	; 0x94
    ad54:	ldr	r0, [r0, r1, lsl #2]
    ad58:	mov	pc, r0
    ad5c:	.word	0x0000b4d8
    ad60:	.word	0x0000d1bc
    ad64:	.word	0x0000bd64
    ad68:	.word	0x0000d1bc
    ad6c:	.word	0x0000d1bc
    ad70:	.word	0x0000d1bc
    ad74:	.word	0x0000d1bc
    ad78:	.word	0x0000c214
    ad7c:	.word	0x0000bfdc
    ad80:	.word	0x0000d1bc
    ad84:	.word	0x0000d040
    ad88:	.word	0x0000d1bc
    ad8c:	.word	0x0000d1bc
    ad90:	.word	0x0000d1bc
    ad94:	.word	0x0000d1bc
    ad98:	.word	0x0000b170
    ad9c:	.word	0x0000d1bc
    ada0:	.word	0x0000d1bc
    ada4:	.word	0x0000d1bc
    ada8:	.word	0x0000d1bc
    adac:	.word	0x0000d1bc
    adb0:	.word	0x0000d1bc
    adb4:	.word	0x0000d1bc
    adb8:	.word	0x0000d1bc
    adbc:	.word	0x0000d1bc
    adc0:	.word	0x0000d1bc
    adc4:	.word	0x0000d1bc
    adc8:	.word	0x0000c4ec
    adcc:	.word	0x0000d1bc
    add0:	.word	0x0000d1bc
    add4:	.word	0x0000d1bc
    add8:	.word	0x0000d1bc
    addc:	.word	0x0000d1bc
    ade0:	.word	0x0000d1bc
    ade4:	.word	0x0000d1bc
    ade8:	.word	0x0000d1bc
    adec:	.word	0x0000d1bc
    adf0:	.word	0x0000d1bc
    adf4:	.word	0x0000d1bc
    adf8:	.word	0x0000d1bc
    adfc:	.word	0x0000d1bc
    ae00:	.word	0x0000c444
    ae04:	.word	0x0000d1bc
    ae08:	.word	0x0000d1bc
    ae0c:	.word	0x0000d1bc
    ae10:	.word	0x0000d1bc
    ae14:	.word	0x0000d1bc
    ae18:	.word	0x0000d1bc
    ae1c:	.word	0x0000d1bc
    ae20:	.word	0x0000d1bc
    ae24:	.word	0x0000d1bc
    ae28:	.word	0x0000d1bc
    ae2c:	.word	0x0000d1bc
    ae30:	.word	0x0000d1bc
    ae34:	.word	0x0000bacc
    ae38:	.word	0x0000b7ac
    ae3c:	.word	0x0000b684
    ae40:	.word	0x0000d1bc
    ae44:	.word	0x0000d1bc
    ae48:	.word	0x0000d1bc
    ae4c:	.word	0x0000d1bc
    ae50:	.word	0x0000d1bc
    ae54:	.word	0x0000d1bc
    ae58:	.word	0x0000d1bc
    ae5c:	.word	0x0000d1bc
    ae60:	.word	0x0000d1bc
    ae64:	.word	0x0000cb00
    ae68:	.word	0x0000cc0c
    ae6c:	.word	0x0000cd24
    ae70:	.word	0x0000d1bc
    ae74:	.word	0x0000c638
    ae78:	.word	0x0000d1bc
    ae7c:	.word	0x0000bb80
    ae80:	.word	0x0000d1bc
    ae84:	.word	0x0000aeb4
    ae88:	.word	0x0000ce34
    ae8c:	.word	0x0000b8d8
    ae90:	.word	0x0000d1bc
    ae94:	.word	0x0000d1bc
    ae98:	.word	0x0000bc34
    ae9c:	.word	0x0000d1bc
    aea0:	.word	0x0000d1bc
    aea4:	.word	0x0000d1bc
    aea8:	.word	0x0000d1bc
    aeac:	.word	0x0000d1bc
    aeb0:	.word	0x0000d108
    aeb4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    aeb8:	ldr	r0, [r0, #16]
    aebc:	ldr	r0, [r0, #4]
    aec0:	cmp	r0, #4
    aec4:	bne	b0c0 <eval_string+0x494>
    aec8:	ldr	r0, [fp, #-16]
    aecc:	ldr	r0, [r0]
    aed0:	movw	r1, #0
    aed4:	cmp	r0, r1
    aed8:	beq	aee0 <eval_string+0x2b4>
    aedc:	b	af00 <eval_string+0x2d4>
    aee0:	movw	r0, #0
    aee4:	movt	r0, #0
    aee8:	movw	r1, #0
    aeec:	movt	r1, #0
    aef0:	movw	r2, #2865	; 0xb31
    aef4:	movw	r3, #0
    aef8:	movt	r3, #0
    aefc:	bl	0 <__assert_fail>
    af00:	ldr	r0, [fp, #-16]
    af04:	add	r0, r0, #8
    af08:	sub	r1, fp, #552	; 0x228
    af0c:	str	r0, [sp, #144]	; 0x90
    af10:	mov	r0, r1
    af14:	ldr	r1, [sp, #144]	; 0x90
    af18:	movw	r2, #520	; 0x208
    af1c:	bl	0 <memcpy>
    af20:	ldr	r0, [fp, #-16]
    af24:	ldr	r1, [fp, #-32]	; 0xffffffe0
    af28:	ldr	r1, [r1, #16]
    af2c:	bl	d2e4 <eval_cursor>
    af30:	cmp	r0, #0
    af34:	beq	af44 <eval_string+0x318>
    af38:	mvn	r0, #0
    af3c:	str	r0, [fp, #-12]
    af40:	b	d1e4 <eval_string+0x25b8>
    af44:	ldr	r0, [fp, #-24]	; 0xffffffe8
    af48:	movw	r1, #0
    af4c:	str	r1, [r0]
    af50:	ldr	r0, [fp, #-16]
    af54:	add	r0, r0, #8
    af58:	ldr	r1, [fp, #-28]	; 0xffffffe4
    af5c:	bl	0 <coda_cursor_get_string_length>
    af60:	cmp	r0, #0
    af64:	beq	af74 <eval_string+0x348>
    af68:	mvn	r0, #0
    af6c:	str	r0, [fp, #-12]
    af70:	b	d1e4 <eval_string+0x25b8>
    af74:	ldr	r0, [fp, #-32]	; 0xffffffe0
    af78:	ldr	r0, [r0, #20]
    af7c:	movw	r1, #0
    af80:	cmp	r0, r1
    af84:	beq	afe8 <eval_string+0x3bc>
    af88:	ldr	r0, [fp, #-16]
    af8c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    af90:	ldr	r1, [r1, #20]
    af94:	sub	r2, fp, #560	; 0x230
    af98:	bl	70a8 <eval_integer>
    af9c:	cmp	r0, #0
    afa0:	beq	afb0 <eval_string+0x384>
    afa4:	mvn	r0, #0
    afa8:	str	r0, [fp, #-12]
    afac:	b	d1e4 <eval_string+0x25b8>
    afb0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    afb4:	ldr	r0, [r0]
    afb8:	ldr	r1, [fp, #-560]	; 0xfffffdd0
    afbc:	ldr	r2, [fp, #-556]	; 0xfffffdd4
    afc0:	subs	r1, r1, r0
    afc4:	sbcs	r0, r2, r0, asr #31
    afc8:	str	r1, [sp, #140]	; 0x8c
    afcc:	str	r0, [sp, #136]	; 0x88
    afd0:	bge	afe4 <eval_string+0x3b8>
    afd4:	b	afd8 <eval_string+0x3ac>
    afd8:	ldr	r0, [fp, #-560]	; 0xfffffdd0
    afdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
    afe0:	str	r0, [r1]
    afe4:	b	afe8 <eval_string+0x3bc>
    afe8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    afec:	ldr	r0, [r0]
    aff0:	cmp	r0, #0
    aff4:	ble	b09c <eval_string+0x470>
    aff8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    affc:	ldr	r0, [r0]
    b000:	add	r0, r0, #1
    b004:	bl	0 <malloc>
    b008:	ldr	lr, [fp, #8]
    b00c:	str	r0, [lr]
    b010:	ldr	r0, [fp, #8]
    b014:	ldr	r0, [r0]
    b018:	movw	lr, #0
    b01c:	cmp	r0, lr
    b020:	bne	b058 <eval_string+0x42c>
    b024:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b028:	ldr	r2, [r0]
    b02c:	mvn	r0, #0
    b030:	movw	r1, #0
    b034:	movt	r1, #0
    b038:	movw	r3, #0
    b03c:	movt	r3, #0
    b040:	movw	ip, #2895	; 0xb4f
    b044:	str	ip, [sp]
    b048:	bl	0 <coda_set_error>
    b04c:	mvn	r0, #0
    b050:	str	r0, [fp, #-12]
    b054:	b	d1e4 <eval_string+0x25b8>
    b058:	ldr	r0, [fp, #-16]
    b05c:	add	r0, r0, #8
    b060:	ldr	r1, [fp, #8]
    b064:	ldr	r1, [r1]
    b068:	ldr	r2, [fp, #-28]	; 0xffffffe4
    b06c:	ldr	r2, [r2]
    b070:	add	r2, r2, #1
    b074:	bl	0 <coda_cursor_read_string>
    b078:	cmp	r0, #0
    b07c:	beq	b098 <eval_string+0x46c>
    b080:	ldr	r0, [fp, #8]
    b084:	ldr	r0, [r0]
    b088:	bl	0 <free>
    b08c:	mvn	r0, #0
    b090:	str	r0, [fp, #-12]
    b094:	b	d1e4 <eval_string+0x25b8>
    b098:	b	b0a8 <eval_string+0x47c>
    b09c:	ldr	r0, [fp, #8]
    b0a0:	movw	r1, #0
    b0a4:	str	r1, [r0]
    b0a8:	ldr	r0, [fp, #-16]
    b0ac:	add	r0, r0, #8
    b0b0:	sub	r1, fp, #552	; 0x228
    b0b4:	movw	r2, #520	; 0x208
    b0b8:	bl	0 <memcpy>
    b0bc:	b	b16c <eval_string+0x540>
    b0c0:	ldr	r0, [fp, #-16]
    b0c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b0c8:	ldr	r1, [r1, #16]
    b0cc:	sub	r2, fp, #568	; 0x238
    b0d0:	bl	70a8 <eval_integer>
    b0d4:	cmp	r0, #0
    b0d8:	beq	b0e8 <eval_string+0x4bc>
    b0dc:	mvn	r0, #0
    b0e0:	str	r0, [fp, #-12]
    b0e4:	b	d1e4 <eval_string+0x25b8>
    b0e8:	sub	lr, fp, #512	; 0x200
    b0ec:	sub	r2, lr, #77	; 0x4d
    b0f0:	ldr	r0, [fp, #-568]	; 0xfffffdc8
    b0f4:	ldr	r1, [fp, #-564]	; 0xfffffdcc
    b0f8:	bl	0 <coda_str64>
    b0fc:	sub	lr, fp, #512	; 0x200
    b100:	sub	r0, lr, #77	; 0x4d
    b104:	bl	0 <strdup>
    b108:	ldr	r1, [fp, #8]
    b10c:	str	r0, [r1]
    b110:	ldr	r0, [fp, #8]
    b114:	ldr	r0, [r0]
    b118:	movw	r1, #0
    b11c:	cmp	r0, r1
    b120:	bne	b14c <eval_string+0x520>
    b124:	mvn	r0, #0
    b128:	movw	r1, #0
    b12c:	movt	r1, #0
    b130:	movw	r2, #0
    b134:	movt	r2, #0
    b138:	movw	r3, #2924	; 0xb6c
    b13c:	bl	0 <coda_set_error>
    b140:	mvn	r0, #0
    b144:	str	r0, [fp, #-12]
    b148:	b	d1e4 <eval_string+0x25b8>
    b14c:	sub	lr, fp, #512	; 0x200
    b150:	sub	r0, lr, #77	; 0x4d
    b154:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b158:	movw	r2, #0
    b15c:	str	r2, [r1]
    b160:	bl	0 <strlen>
    b164:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b168:	str	r0, [r1]
    b16c:	b	d1dc <eval_string+0x25b0>
    b170:	mov	r0, #0
    b174:	str	r0, [fp, #-1116]	; 0xfffffba4
    b178:	str	r0, [fp, #-1120]	; 0xfffffba0
    b17c:	mvn	r0, #0
    b180:	str	r0, [fp, #-1132]	; 0xfffffb94
    b184:	str	r0, [fp, #-1136]	; 0xfffffb90
    b188:	ldr	r0, [fp, #-16]
    b18c:	ldr	r0, [r0]
    b190:	movw	r1, #0
    b194:	cmp	r0, r1
    b198:	beq	b1a0 <eval_string+0x574>
    b19c:	b	b1c0 <eval_string+0x594>
    b1a0:	movw	r0, #0
    b1a4:	movt	r0, #0
    b1a8:	movw	r1, #0
    b1ac:	movt	r1, #0
    b1b0:	movw	r2, #2938	; 0xb7a
    b1b4:	movw	r3, #0
    b1b8:	movt	r3, #0
    b1bc:	bl	0 <__assert_fail>
    b1c0:	ldr	r0, [fp, #-16]
    b1c4:	add	r0, r0, #8
    b1c8:	sub	lr, fp, #1024	; 0x400
    b1cc:	sub	r1, lr, #88	; 0x58
    b1d0:	str	r0, [sp, #132]	; 0x84
    b1d4:	mov	r0, r1
    b1d8:	ldr	r1, [sp, #132]	; 0x84
    b1dc:	movw	r2, #520	; 0x208
    b1e0:	bl	0 <memcpy>
    b1e4:	ldr	r0, [fp, #-16]
    b1e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b1ec:	ldr	r1, [r1, #16]
    b1f0:	bl	d2e4 <eval_cursor>
    b1f4:	cmp	r0, #0
    b1f8:	beq	b208 <eval_string+0x5dc>
    b1fc:	mvn	r0, #0
    b200:	str	r0, [fp, #-12]
    b204:	b	d1e4 <eval_string+0x25b8>
    b208:	ldr	r0, [fp, #-32]	; 0xffffffe0
    b20c:	ldr	r0, [r0, #24]
    b210:	movw	r1, #0
    b214:	cmp	r0, r1
    b218:	beq	b2b0 <eval_string+0x684>
    b21c:	ldr	r0, [fp, #-16]
    b220:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b224:	ldr	r1, [r1, #20]
    b228:	sub	r2, fp, #1120	; 0x460
    b22c:	bl	70a8 <eval_integer>
    b230:	cmp	r0, #0
    b234:	beq	b244 <eval_string+0x618>
    b238:	mvn	r0, #0
    b23c:	str	r0, [fp, #-12]
    b240:	b	d1e4 <eval_string+0x25b8>
    b244:	ldr	r0, [fp, #-16]
    b248:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b24c:	ldr	r1, [r1, #24]
    b250:	sub	lr, fp, #1024	; 0x400
    b254:	sub	r2, lr, #104	; 0x68
    b258:	bl	70a8 <eval_integer>
    b25c:	cmp	r0, #0
    b260:	beq	b270 <eval_string+0x644>
    b264:	mvn	r0, #0
    b268:	str	r0, [fp, #-12]
    b26c:	b	d1e4 <eval_string+0x25b8>
    b270:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b274:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b278:	subs	r0, r0, #1
    b27c:	sbcs	r1, r1, #0
    b280:	str	r0, [sp, #128]	; 0x80
    b284:	str	r1, [sp, #124]	; 0x7c
    b288:	blt	b2ac <eval_string+0x680>
    b28c:	b	b290 <eval_string+0x664>
    b290:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b294:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b298:	lsl	r1, r1, #3
    b29c:	orr	r1, r1, r0, lsr #29
    b2a0:	lsl	r0, r0, #3
    b2a4:	str	r0, [fp, #-1136]	; 0xfffffb90
    b2a8:	str	r1, [fp, #-1132]	; 0xfffffb94
    b2ac:	b	b35c <eval_string+0x730>
    b2b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    b2b4:	ldr	r0, [r0, #20]
    b2b8:	movw	r1, #0
    b2bc:	cmp	r0, r1
    b2c0:	beq	b330 <eval_string+0x704>
    b2c4:	ldr	r0, [fp, #-16]
    b2c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b2cc:	ldr	r1, [r1, #20]
    b2d0:	sub	lr, fp, #1024	; 0x400
    b2d4:	sub	r2, lr, #104	; 0x68
    b2d8:	bl	70a8 <eval_integer>
    b2dc:	cmp	r0, #0
    b2e0:	beq	b2f0 <eval_string+0x6c4>
    b2e4:	mvn	r0, #0
    b2e8:	str	r0, [fp, #-12]
    b2ec:	b	d1e4 <eval_string+0x25b8>
    b2f0:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b2f4:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b2f8:	subs	r0, r0, #1
    b2fc:	sbcs	r1, r1, #0
    b300:	str	r0, [sp, #120]	; 0x78
    b304:	str	r1, [sp, #116]	; 0x74
    b308:	blt	b32c <eval_string+0x700>
    b30c:	b	b310 <eval_string+0x6e4>
    b310:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b314:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b318:	lsl	r1, r1, #3
    b31c:	orr	r1, r1, r0, lsr #29
    b320:	lsl	r0, r0, #3
    b324:	str	r0, [fp, #-1136]	; 0xfffffb90
    b328:	str	r1, [fp, #-1132]	; 0xfffffb94
    b32c:	b	b358 <eval_string+0x72c>
    b330:	ldr	r0, [fp, #-16]
    b334:	add	r0, r0, #8
    b338:	sub	r1, fp, #1136	; 0x470
    b33c:	bl	0 <coda_cursor_get_bit_size>
    b340:	cmp	r0, #0
    b344:	beq	b354 <eval_string+0x728>
    b348:	mvn	r0, #0
    b34c:	str	r0, [fp, #-12]
    b350:	b	d1e4 <eval_string+0x25b8>
    b354:	b	b358 <eval_string+0x72c>
    b358:	b	b35c <eval_string+0x730>
    b35c:	ldr	r0, [fp, #-1132]	; 0xfffffb94
    b360:	cmn	r0, #1
    b364:	bgt	b388 <eval_string+0x75c>
    b368:	b	b36c <eval_string+0x740>
    b36c:	mvn	r0, #400	; 0x190
    b370:	movw	r1, #0
    b374:	movt	r1, #0
    b378:	bl	0 <coda_set_error>
    b37c:	mvn	r0, #0
    b380:	str	r0, [fp, #-12]
    b384:	b	d1e4 <eval_string+0x25b8>
    b388:	ldr	r0, [fp, #-1136]	; 0xfffffb90
    b38c:	ldr	r1, [fp, #-1132]	; 0xfffffb94
    b390:	lsr	r2, r0, #3
    b394:	orr	r2, r2, r1, lsl #29
    b398:	asr	r1, r1, #3
    b39c:	and	r0, r0, #7
    b3a0:	adds	r3, r2, #1
    b3a4:	adc	ip, r1, #0
    b3a8:	cmp	r0, #0
    b3ac:	movne	r2, r3
    b3b0:	cmp	r0, #0
    b3b4:	movne	r1, ip
    b3b8:	str	r2, [fp, #-1128]	; 0xfffffb98
    b3bc:	str	r1, [fp, #-1124]	; 0xfffffb9c
    b3c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b3c4:	mov	r1, #0
    b3c8:	str	r1, [r0]
    b3cc:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b3d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b3d4:	str	r0, [r1]
    b3d8:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b3dc:	ldr	r1, [fp, #-1124]	; 0xfffffb9c
    b3e0:	subs	r0, r0, #1
    b3e4:	sbcs	r1, r1, #0
    b3e8:	str	r0, [sp, #112]	; 0x70
    b3ec:	str	r1, [sp, #108]	; 0x6c
    b3f0:	blt	b4b0 <eval_string+0x884>
    b3f4:	b	b3f8 <eval_string+0x7cc>
    b3f8:	ldr	r0, [fp, #-1128]	; 0xfffffb98
    b3fc:	add	r0, r0, #1
    b400:	bl	0 <malloc>
    b404:	ldr	lr, [fp, #8]
    b408:	str	r0, [lr]
    b40c:	ldr	r0, [fp, #8]
    b410:	ldr	r0, [r0]
    b414:	movw	lr, #0
    b418:	cmp	r0, lr
    b41c:	bne	b450 <eval_string+0x824>
    b420:	ldr	r2, [fp, #-1128]	; 0xfffffb98
    b424:	mvn	r0, #0
    b428:	movw	r1, #0
    b42c:	movt	r1, #0
    b430:	movw	r3, #0
    b434:	movt	r3, #0
    b438:	movw	ip, #2991	; 0xbaf
    b43c:	str	ip, [sp]
    b440:	bl	0 <coda_set_error>
    b444:	mvn	r0, #0
    b448:	str	r0, [fp, #-12]
    b44c:	b	d1e4 <eval_string+0x25b8>
    b450:	ldr	r0, [fp, #-16]
    b454:	add	r0, r0, #8
    b458:	ldr	r1, [fp, #8]
    b45c:	ldr	r1, [r1]
    b460:	ldr	r2, [fp, #-1120]	; 0xfffffba0
    b464:	ldr	r3, [fp, #-1116]	; 0xfffffba4
    b468:	lsl	r3, r3, #3
    b46c:	orr	r3, r3, r2, lsr #29
    b470:	lsl	r2, r2, #3
    b474:	ldr	ip, [fp, #-1136]	; 0xfffffb90
    b478:	ldr	lr, [fp, #-1132]	; 0xfffffb94
    b47c:	mov	r4, sp
    b480:	str	lr, [r4, #4]
    b484:	str	ip, [r4]
    b488:	bl	0 <coda_cursor_read_bits>
    b48c:	cmp	r0, #0
    b490:	beq	b4ac <eval_string+0x880>
    b494:	ldr	r0, [fp, #8]
    b498:	ldr	r0, [r0]
    b49c:	bl	0 <free>
    b4a0:	mvn	r0, #0
    b4a4:	str	r0, [fp, #-12]
    b4a8:	b	d1e4 <eval_string+0x25b8>
    b4ac:	b	b4bc <eval_string+0x890>
    b4b0:	ldr	r0, [fp, #8]
    b4b4:	movw	r1, #0
    b4b8:	str	r1, [r0]
    b4bc:	ldr	r0, [fp, #-16]
    b4c0:	add	r0, r0, #8
    b4c4:	sub	lr, fp, #1024	; 0x400
    b4c8:	sub	r1, lr, #88	; 0x58
    b4cc:	movw	r2, #520	; 0x208
    b4d0:	bl	0 <memcpy>
    b4d4:	b	d1dc <eval_string+0x25b0>
    b4d8:	ldr	r0, [fp, #-16]
    b4dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b4e0:	ldr	r1, [r1, #16]
    b4e4:	sub	lr, fp, #1024	; 0x400
    b4e8:	sub	r2, lr, #116	; 0x74
    b4ec:	sub	lr, fp, #1024	; 0x400
    b4f0:	sub	r3, lr, #124	; 0x7c
    b4f4:	sub	lr, fp, #1024	; 0x400
    b4f8:	sub	ip, lr, #132	; 0x84
    b4fc:	str	ip, [sp]
    b500:	bl	ac2c <eval_string>
    b504:	cmp	r0, #0
    b508:	beq	b518 <eval_string+0x8ec>
    b50c:	mvn	r0, #0
    b510:	str	r0, [fp, #-12]
    b514:	b	d1e4 <eval_string+0x25b8>
    b518:	ldr	r0, [fp, #-16]
    b51c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b520:	ldr	r1, [r1, #20]
    b524:	sub	lr, fp, #1024	; 0x400
    b528:	sub	r2, lr, #120	; 0x78
    b52c:	sub	r3, fp, #1152	; 0x480
    b530:	sub	lr, fp, #1024	; 0x400
    b534:	sub	ip, lr, #136	; 0x88
    b538:	str	ip, [sp]
    b53c:	bl	ac2c <eval_string>
    b540:	cmp	r0, #0
    b544:	beq	b55c <eval_string+0x930>
    b548:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    b54c:	bl	0 <free>
    b550:	mvn	r0, #0
    b554:	str	r0, [fp, #-12]
    b558:	b	d1e4 <eval_string+0x25b8>
    b55c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b560:	movw	r1, #0
    b564:	str	r1, [r0]
    b568:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b56c:	ldr	r1, [fp, #-1152]	; 0xfffffb80
    b570:	add	r0, r0, r1
    b574:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b578:	str	r0, [r1]
    b57c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b580:	ldr	r0, [r0]
    b584:	cmp	r0, #0
    b588:	ble	b64c <eval_string+0xa20>
    b58c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b590:	ldr	r0, [r0]
    b594:	add	r0, r0, #1
    b598:	bl	0 <malloc>
    b59c:	ldr	lr, [fp, #8]
    b5a0:	str	r0, [lr]
    b5a4:	ldr	r0, [fp, #8]
    b5a8:	ldr	r0, [r0]
    b5ac:	movw	lr, #0
    b5b0:	cmp	r0, lr
    b5b4:	bne	b5f0 <eval_string+0x9c4>
    b5b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b5bc:	ldr	r0, [r0]
    b5c0:	add	r2, r0, #1
    b5c4:	mvn	r0, #0
    b5c8:	movw	r1, #0
    b5cc:	movt	r1, #0
    b5d0:	movw	r3, #0
    b5d4:	movt	r3, #0
    b5d8:	movw	ip, #3031	; 0xbd7
    b5dc:	str	ip, [sp]
    b5e0:	bl	0 <coda_set_error>
    b5e4:	mvn	r0, #0
    b5e8:	str	r0, [fp, #-12]
    b5ec:	b	d1e4 <eval_string+0x25b8>
    b5f0:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b5f4:	cmp	r0, #0
    b5f8:	ble	b618 <eval_string+0x9ec>
    b5fc:	ldr	r0, [fp, #8]
    b600:	ldr	r0, [r0]
    b604:	ldr	r1, [fp, #-1156]	; 0xfffffb7c
    b608:	ldr	r2, [fp, #-1140]	; 0xfffffb8c
    b60c:	add	r1, r1, r2
    b610:	ldr	r2, [fp, #-1148]	; 0xfffffb84
    b614:	bl	0 <memcpy>
    b618:	ldr	r0, [fp, #-1152]	; 0xfffffb80
    b61c:	cmp	r0, #0
    b620:	ble	b648 <eval_string+0xa1c>
    b624:	ldr	r0, [fp, #8]
    b628:	ldr	r0, [r0]
    b62c:	ldr	r1, [fp, #-1148]	; 0xfffffb84
    b630:	add	r0, r0, r1
    b634:	ldr	r1, [fp, #-1160]	; 0xfffffb78
    b638:	ldr	r2, [fp, #-1144]	; 0xfffffb88
    b63c:	add	r1, r1, r2
    b640:	ldr	r2, [fp, #-1152]	; 0xfffffb80
    b644:	bl	0 <memcpy>
    b648:	b	b658 <eval_string+0xa2c>
    b64c:	ldr	r0, [fp, #8]
    b650:	movw	r1, #0
    b654:	str	r1, [r0]
    b658:	ldr	r0, [fp, #-1148]	; 0xfffffb84
    b65c:	cmp	r0, #0
    b660:	ble	b66c <eval_string+0xa40>
    b664:	ldr	r0, [fp, #-1156]	; 0xfffffb7c
    b668:	bl	0 <free>
    b66c:	ldr	r0, [fp, #-1152]	; 0xfffffb80
    b670:	cmp	r0, #0
    b674:	ble	b680 <eval_string+0xa54>
    b678:	ldr	r0, [fp, #-1160]	; 0xfffffb78
    b67c:	bl	0 <free>
    b680:	b	d1dc <eval_string+0x25b0>
    b684:	ldr	r0, [fp, #-16]
    b688:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b68c:	ldr	r1, [r1, #16]
    b690:	sub	lr, fp, #1024	; 0x400
    b694:	sub	r2, lr, #140	; 0x8c
    b698:	sub	lr, fp, #1024	; 0x400
    b69c:	sub	r3, lr, #148	; 0x94
    b6a0:	sub	lr, fp, #1024	; 0x400
    b6a4:	sub	ip, lr, #156	; 0x9c
    b6a8:	str	ip, [sp]
    b6ac:	bl	ac2c <eval_string>
    b6b0:	cmp	r0, #0
    b6b4:	beq	b6c4 <eval_string+0xa98>
    b6b8:	mvn	r0, #0
    b6bc:	str	r0, [fp, #-12]
    b6c0:	b	d1e4 <eval_string+0x25b8>
    b6c4:	ldr	r0, [fp, #-16]
    b6c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b6cc:	ldr	r1, [r1, #20]
    b6d0:	sub	r2, fp, #1168	; 0x490
    b6d4:	sub	lr, fp, #1024	; 0x400
    b6d8:	sub	r3, lr, #152	; 0x98
    b6dc:	sub	ip, fp, #1184	; 0x4a0
    b6e0:	str	ip, [sp]
    b6e4:	bl	ac2c <eval_string>
    b6e8:	cmp	r0, #0
    b6ec:	beq	b704 <eval_string+0xad8>
    b6f0:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b6f4:	bl	0 <free>
    b6f8:	mvn	r0, #0
    b6fc:	str	r0, [fp, #-12]
    b700:	b	d1e4 <eval_string+0x25b8>
    b704:	ldr	r0, [fp, #-1164]	; 0xfffffb74
    b708:	ldr	r1, [fp, #-1172]	; 0xfffffb6c
    b70c:	ldr	r2, [fp, #-1180]	; 0xfffffb64
    b710:	ldr	r3, [fp, #-1168]	; 0xfffffb70
    b714:	ldr	ip, [fp, #-1176]	; 0xfffffb68
    b718:	ldr	lr, [fp, #-1184]	; 0xfffffb60
    b71c:	str	ip, [sp]
    b720:	str	lr, [sp, #4]
    b724:	bl	e388 <compare_strings>
    b728:	cmp	r0, #0
    b72c:	bgt	b76c <eval_string+0xb40>
    b730:	ldr	r0, [fp, #-1164]	; 0xfffffb74
    b734:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b738:	str	r0, [r1]
    b73c:	ldr	r0, [fp, #-1172]	; 0xfffffb6c
    b740:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b744:	str	r0, [r1]
    b748:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b74c:	ldr	r1, [fp, #8]
    b750:	str	r0, [r1]
    b754:	ldr	r0, [fp, #-1176]	; 0xfffffb68
    b758:	cmp	r0, #0
    b75c:	ble	b768 <eval_string+0xb3c>
    b760:	ldr	r0, [fp, #-1184]	; 0xfffffb60
    b764:	bl	0 <free>
    b768:	b	b7a8 <eval_string+0xb7c>
    b76c:	ldr	r0, [fp, #-1168]	; 0xfffffb70
    b770:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b774:	str	r0, [r1]
    b778:	ldr	r0, [fp, #-1176]	; 0xfffffb68
    b77c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b780:	str	r0, [r1]
    b784:	ldr	r0, [fp, #-1184]	; 0xfffffb60
    b788:	ldr	r1, [fp, #8]
    b78c:	str	r0, [r1]
    b790:	ldr	r0, [fp, #-1172]	; 0xfffffb6c
    b794:	cmp	r0, #0
    b798:	ble	b7a4 <eval_string+0xb78>
    b79c:	ldr	r0, [fp, #-1180]	; 0xfffffb64
    b7a0:	bl	0 <free>
    b7a4:	b	b7a8 <eval_string+0xb7c>
    b7a8:	b	d1dc <eval_string+0x25b0>
    b7ac:	ldr	r0, [fp, #-16]
    b7b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b7b4:	ldr	r1, [r1, #16]
    b7b8:	sub	lr, fp, #1024	; 0x400
    b7bc:	sub	r2, lr, #164	; 0xa4
    b7c0:	sub	lr, fp, #1024	; 0x400
    b7c4:	sub	r3, lr, #172	; 0xac
    b7c8:	sub	lr, fp, #1024	; 0x400
    b7cc:	sub	ip, lr, #180	; 0xb4
    b7d0:	str	ip, [sp]
    b7d4:	bl	ac2c <eval_string>
    b7d8:	cmp	r0, #0
    b7dc:	beq	b7ec <eval_string+0xbc0>
    b7e0:	mvn	r0, #0
    b7e4:	str	r0, [fp, #-12]
    b7e8:	b	d1e4 <eval_string+0x25b8>
    b7ec:	ldr	r0, [fp, #-16]
    b7f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b7f4:	ldr	r1, [r1, #20]
    b7f8:	sub	lr, fp, #1024	; 0x400
    b7fc:	sub	r2, lr, #168	; 0xa8
    b800:	sub	r3, fp, #1200	; 0x4b0
    b804:	sub	lr, fp, #1024	; 0x400
    b808:	sub	ip, lr, #184	; 0xb8
    b80c:	str	ip, [sp]
    b810:	bl	ac2c <eval_string>
    b814:	cmp	r0, #0
    b818:	beq	b830 <eval_string+0xc04>
    b81c:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b820:	bl	0 <free>
    b824:	mvn	r0, #0
    b828:	str	r0, [fp, #-12]
    b82c:	b	d1e4 <eval_string+0x25b8>
    b830:	ldr	r0, [fp, #-1188]	; 0xfffffb5c
    b834:	ldr	r1, [fp, #-1196]	; 0xfffffb54
    b838:	ldr	r2, [fp, #-1204]	; 0xfffffb4c
    b83c:	ldr	r3, [fp, #-1192]	; 0xfffffb58
    b840:	ldr	ip, [fp, #-1200]	; 0xfffffb50
    b844:	ldr	lr, [fp, #-1208]	; 0xfffffb48
    b848:	str	ip, [sp]
    b84c:	str	lr, [sp, #4]
    b850:	bl	e388 <compare_strings>
    b854:	cmp	r0, #0
    b858:	blt	b898 <eval_string+0xc6c>
    b85c:	ldr	r0, [fp, #-1188]	; 0xfffffb5c
    b860:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b864:	str	r0, [r1]
    b868:	ldr	r0, [fp, #-1196]	; 0xfffffb54
    b86c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b870:	str	r0, [r1]
    b874:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b878:	ldr	r1, [fp, #8]
    b87c:	str	r0, [r1]
    b880:	ldr	r0, [fp, #-1200]	; 0xfffffb50
    b884:	cmp	r0, #0
    b888:	ble	b894 <eval_string+0xc68>
    b88c:	ldr	r0, [fp, #-1208]	; 0xfffffb48
    b890:	bl	0 <free>
    b894:	b	b8d4 <eval_string+0xca8>
    b898:	ldr	r0, [fp, #-1192]	; 0xfffffb58
    b89c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    b8a0:	str	r0, [r1]
    b8a4:	ldr	r0, [fp, #-1200]	; 0xfffffb50
    b8a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    b8ac:	str	r0, [r1]
    b8b0:	ldr	r0, [fp, #-1208]	; 0xfffffb48
    b8b4:	ldr	r1, [fp, #8]
    b8b8:	str	r0, [r1]
    b8bc:	ldr	r0, [fp, #-1196]	; 0xfffffb54
    b8c0:	cmp	r0, #0
    b8c4:	ble	b8d0 <eval_string+0xca4>
    b8c8:	ldr	r0, [fp, #-1204]	; 0xfffffb4c
    b8cc:	bl	0 <free>
    b8d0:	b	b8d4 <eval_string+0xca8>
    b8d4:	b	d1dc <eval_string+0x25b0>
    b8d8:	ldr	r0, [fp, #-16]
    b8dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b8e0:	ldr	r1, [r1, #16]
    b8e4:	sub	r2, fp, #1216	; 0x4c0
    b8e8:	bl	70a8 <eval_integer>
    b8ec:	cmp	r0, #0
    b8f0:	beq	b900 <eval_string+0xcd4>
    b8f4:	mvn	r0, #0
    b8f8:	str	r0, [fp, #-12]
    b8fc:	b	d1e4 <eval_string+0x25b8>
    b900:	ldr	r0, [fp, #-1212]	; 0xfffffb44
    b904:	cmn	r0, #1
    b908:	bgt	b92c <eval_string+0xd00>
    b90c:	b	b910 <eval_string+0xce4>
    b910:	mvn	r0, #400	; 0x190
    b914:	movw	r1, #0
    b918:	movt	r1, #0
    b91c:	bl	0 <coda_set_error>
    b920:	mvn	r0, #0
    b924:	str	r0, [fp, #-12]
    b928:	b	d1e4 <eval_string+0x25b8>
    b92c:	ldr	r0, [fp, #-16]
    b930:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b934:	ldr	r1, [r1, #20]
    b938:	sub	lr, fp, #1024	; 0x400
    b93c:	sub	r2, lr, #200	; 0xc8
    b940:	bl	70a8 <eval_integer>
    b944:	cmp	r0, #0
    b948:	beq	b958 <eval_string+0xd2c>
    b94c:	mvn	r0, #0
    b950:	str	r0, [fp, #-12]
    b954:	b	d1e4 <eval_string+0x25b8>
    b958:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    b95c:	ldr	r1, [fp, #-1220]	; 0xfffffb3c
    b960:	orr	r0, r0, r1
    b964:	cmp	r0, #0
    b968:	bne	b994 <eval_string+0xd68>
    b96c:	b	b970 <eval_string+0xd44>
    b970:	ldr	r0, [fp, #-24]	; 0xffffffe8
    b974:	movw	r1, #0
    b978:	str	r1, [r0]
    b97c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b980:	str	r1, [r0]
    b984:	ldr	r0, [fp, #8]
    b988:	str	r1, [r0]
    b98c:	str	r1, [fp, #-12]
    b990:	b	d1e4 <eval_string+0x25b8>
    b994:	ldr	r0, [fp, #-1220]	; 0xfffffb3c
    b998:	cmn	r0, #1
    b99c:	bgt	b9c0 <eval_string+0xd94>
    b9a0:	b	b9a4 <eval_string+0xd78>
    b9a4:	mvn	r0, #400	; 0x190
    b9a8:	movw	r1, #0
    b9ac:	movt	r1, #0
    b9b0:	bl	0 <coda_set_error>
    b9b4:	mvn	r0, #0
    b9b8:	str	r0, [fp, #-12]
    b9bc:	b	d1e4 <eval_string+0x25b8>
    b9c0:	ldr	r0, [fp, #-16]
    b9c4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    b9c8:	ldr	r1, [r1, #24]
    b9cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    b9d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    b9d4:	ldr	ip, [fp, #8]
    b9d8:	str	ip, [sp]
    b9dc:	bl	ac2c <eval_string>
    b9e0:	cmp	r0, #0
    b9e4:	beq	b9f4 <eval_string+0xdc8>
    b9e8:	mvn	r0, #0
    b9ec:	str	r0, [fp, #-12]
    b9f0:	b	d1e4 <eval_string+0x25b8>
    b9f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    b9f8:	ldr	r0, [r0]
    b9fc:	cmp	r0, #0
    ba00:	bne	ba10 <eval_string+0xde4>
    ba04:	movw	r0, #0
    ba08:	str	r0, [fp, #-12]
    ba0c:	b	d1e4 <eval_string+0x25b8>
    ba10:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    ba14:	ldr	r1, [fp, #-1212]	; 0xfffffb44
    ba18:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ba1c:	ldr	r2, [r2]
    ba20:	subs	r0, r0, r2
    ba24:	sbcs	r1, r1, r2, asr #31
    ba28:	str	r0, [sp, #104]	; 0x68
    ba2c:	str	r1, [sp, #100]	; 0x64
    ba30:	blt	ba6c <eval_string+0xe40>
    ba34:	b	ba38 <eval_string+0xe0c>
    ba38:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ba3c:	movw	r1, #0
    ba40:	str	r1, [r0]
    ba44:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ba48:	str	r1, [r0]
    ba4c:	ldr	r0, [fp, #8]
    ba50:	ldr	r0, [r0]
    ba54:	bl	0 <free>
    ba58:	ldr	r0, [fp, #8]
    ba5c:	movw	r1, #0
    ba60:	str	r1, [r0]
    ba64:	str	r1, [fp, #-12]
    ba68:	b	d1e4 <eval_string+0x25b8>
    ba6c:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    ba70:	ldr	r1, [fp, #-24]	; 0xffffffe8
    ba74:	ldr	r2, [r1]
    ba78:	add	r0, r2, r0
    ba7c:	str	r0, [r1]
    ba80:	ldr	r0, [fp, #-1216]	; 0xfffffb40
    ba84:	ldr	r1, [fp, #-28]	; 0xffffffe4
    ba88:	ldr	r2, [r1]
    ba8c:	sub	r0, r2, r0
    ba90:	str	r0, [r1]
    ba94:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    ba98:	ldr	r1, [fp, #-1220]	; 0xfffffb3c
    ba9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
    baa0:	ldr	r2, [r2]
    baa4:	subs	r0, r0, r2
    baa8:	sbcs	r1, r1, r2, asr #31
    baac:	str	r0, [sp, #96]	; 0x60
    bab0:	str	r1, [sp, #92]	; 0x5c
    bab4:	bge	bac8 <eval_string+0xe9c>
    bab8:	b	babc <eval_string+0xe90>
    babc:	ldr	r0, [fp, #-1224]	; 0xfffffb38
    bac0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bac4:	str	r0, [r1]
    bac8:	b	d1dc <eval_string+0x25b0>
    bacc:	ldr	r0, [fp, #-16]
    bad0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bad4:	ldr	r1, [r1, #16]
    bad8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    badc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bae0:	ldr	ip, [fp, #8]
    bae4:	str	ip, [sp]
    bae8:	bl	ac2c <eval_string>
    baec:	cmp	r0, #0
    baf0:	beq	bb00 <eval_string+0xed4>
    baf4:	mvn	r0, #0
    baf8:	str	r0, [fp, #-12]
    bafc:	b	d1e4 <eval_string+0x25b8>
    bb00:	b	bb04 <eval_string+0xed8>
    bb04:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bb08:	ldr	r0, [r0]
    bb0c:	cmp	r0, #0
    bb10:	movw	r0, #0
    bb14:	str	r0, [sp, #88]	; 0x58
    bb18:	ble	bb48 <eval_string+0xf1c>
    bb1c:	ldr	r0, [fp, #8]
    bb20:	ldr	r0, [r0]
    bb24:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bb28:	ldr	r1, [r1]
    bb2c:	add	r0, r0, r1
    bb30:	ldrb	r0, [r0]
    bb34:	bl	e588 <iswhitespace>
    bb38:	cmp	r0, #0
    bb3c:	movw	r0, #0
    bb40:	movne	r0, #1
    bb44:	str	r0, [sp, #88]	; 0x58
    bb48:	ldr	r0, [sp, #88]	; 0x58
    bb4c:	tst	r0, #1
    bb50:	beq	bb7c <eval_string+0xf50>
    bb54:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bb58:	ldr	r1, [r0]
    bb5c:	mvn	r2, #0
    bb60:	add	r1, r1, r2
    bb64:	str	r1, [r0]
    bb68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bb6c:	ldr	r1, [r0]
    bb70:	add	r1, r1, #1
    bb74:	str	r1, [r0]
    bb78:	b	bb04 <eval_string+0xed8>
    bb7c:	b	d1dc <eval_string+0x25b0>
    bb80:	ldr	r0, [fp, #-16]
    bb84:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bb88:	ldr	r1, [r1, #16]
    bb8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    bb90:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bb94:	ldr	ip, [fp, #8]
    bb98:	str	ip, [sp]
    bb9c:	bl	ac2c <eval_string>
    bba0:	cmp	r0, #0
    bba4:	beq	bbb4 <eval_string+0xf88>
    bba8:	mvn	r0, #0
    bbac:	str	r0, [fp, #-12]
    bbb0:	b	d1e4 <eval_string+0x25b8>
    bbb4:	b	bbb8 <eval_string+0xf8c>
    bbb8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bbbc:	ldr	r0, [r0]
    bbc0:	cmp	r0, #0
    bbc4:	movw	r0, #0
    bbc8:	str	r0, [sp, #84]	; 0x54
    bbcc:	ble	bc0c <eval_string+0xfe0>
    bbd0:	ldr	r0, [fp, #8]
    bbd4:	ldr	r0, [r0]
    bbd8:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bbdc:	ldr	r1, [r1]
    bbe0:	ldr	r2, [fp, #-28]	; 0xffffffe4
    bbe4:	ldr	r2, [r2]
    bbe8:	add	r1, r1, r2
    bbec:	sub	r1, r1, #1
    bbf0:	add	r0, r0, r1
    bbf4:	ldrb	r0, [r0]
    bbf8:	bl	e588 <iswhitespace>
    bbfc:	cmp	r0, #0
    bc00:	movw	r0, #0
    bc04:	movne	r0, #1
    bc08:	str	r0, [sp, #84]	; 0x54
    bc0c:	ldr	r0, [sp, #84]	; 0x54
    bc10:	tst	r0, #1
    bc14:	beq	bc30 <eval_string+0x1004>
    bc18:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bc1c:	ldr	r1, [r0]
    bc20:	mvn	r2, #0
    bc24:	add	r1, r1, r2
    bc28:	str	r1, [r0]
    bc2c:	b	bbb8 <eval_string+0xf8c>
    bc30:	b	d1dc <eval_string+0x25b0>
    bc34:	ldr	r0, [fp, #-16]
    bc38:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bc3c:	ldr	r1, [r1, #16]
    bc40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    bc44:	ldr	r3, [fp, #-28]	; 0xffffffe4
    bc48:	ldr	ip, [fp, #8]
    bc4c:	str	ip, [sp]
    bc50:	bl	ac2c <eval_string>
    bc54:	cmp	r0, #0
    bc58:	beq	bc68 <eval_string+0x103c>
    bc5c:	mvn	r0, #0
    bc60:	str	r0, [fp, #-12]
    bc64:	b	d1e4 <eval_string+0x25b8>
    bc68:	b	bc6c <eval_string+0x1040>
    bc6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bc70:	ldr	r0, [r0]
    bc74:	cmp	r0, #0
    bc78:	movw	r0, #0
    bc7c:	str	r0, [sp, #80]	; 0x50
    bc80:	ble	bcb0 <eval_string+0x1084>
    bc84:	ldr	r0, [fp, #8]
    bc88:	ldr	r0, [r0]
    bc8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bc90:	ldr	r1, [r1]
    bc94:	add	r0, r0, r1
    bc98:	ldrb	r0, [r0]
    bc9c:	bl	e588 <iswhitespace>
    bca0:	cmp	r0, #0
    bca4:	movw	r0, #0
    bca8:	movne	r0, #1
    bcac:	str	r0, [sp, #80]	; 0x50
    bcb0:	ldr	r0, [sp, #80]	; 0x50
    bcb4:	tst	r0, #1
    bcb8:	beq	bce4 <eval_string+0x10b8>
    bcbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bcc0:	ldr	r1, [r0]
    bcc4:	mvn	r2, #0
    bcc8:	add	r1, r1, r2
    bccc:	str	r1, [r0]
    bcd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    bcd4:	ldr	r1, [r0]
    bcd8:	add	r1, r1, #1
    bcdc:	str	r1, [r0]
    bce0:	b	bc6c <eval_string+0x1040>
    bce4:	b	bce8 <eval_string+0x10bc>
    bce8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bcec:	ldr	r0, [r0]
    bcf0:	cmp	r0, #0
    bcf4:	movw	r0, #0
    bcf8:	str	r0, [sp, #76]	; 0x4c
    bcfc:	ble	bd3c <eval_string+0x1110>
    bd00:	ldr	r0, [fp, #8]
    bd04:	ldr	r0, [r0]
    bd08:	ldr	r1, [fp, #-24]	; 0xffffffe8
    bd0c:	ldr	r1, [r1]
    bd10:	ldr	r2, [fp, #-28]	; 0xffffffe4
    bd14:	ldr	r2, [r2]
    bd18:	add	r1, r1, r2
    bd1c:	sub	r1, r1, #1
    bd20:	add	r0, r0, r1
    bd24:	ldrb	r0, [r0]
    bd28:	bl	e588 <iswhitespace>
    bd2c:	cmp	r0, #0
    bd30:	movw	r0, #0
    bd34:	movne	r0, #1
    bd38:	str	r0, [sp, #76]	; 0x4c
    bd3c:	ldr	r0, [sp, #76]	; 0x4c
    bd40:	tst	r0, #1
    bd44:	beq	bd60 <eval_string+0x1134>
    bd48:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bd4c:	ldr	r1, [r0]
    bd50:	mvn	r2, #0
    bd54:	add	r1, r1, r2
    bd58:	str	r1, [r0]
    bd5c:	b	bce8 <eval_string+0x10bc>
    bd60:	b	d1dc <eval_string+0x25b0>
    bd64:	ldr	r0, [fp, #-16]
    bd68:	ldr	r0, [r0]
    bd6c:	movw	r1, #0
    bd70:	cmp	r0, r1
    bd74:	beq	bd7c <eval_string+0x1150>
    bd78:	b	bd9c <eval_string+0x1170>
    bd7c:	movw	r0, #0
    bd80:	movt	r0, #0
    bd84:	movw	r1, #0
    bd88:	movt	r1, #0
    bd8c:	movw	r2, #3234	; 0xca2
    bd90:	movw	r3, #0
    bd94:	movt	r3, #0
    bd98:	bl	0 <__assert_fail>
    bd9c:	ldr	r0, [fp, #-16]
    bda0:	add	r0, r0, #8
    bda4:	sub	r1, fp, #1744	; 0x6d0
    bda8:	str	r0, [sp, #72]	; 0x48
    bdac:	mov	r0, r1
    bdb0:	ldr	r1, [sp, #72]	; 0x48
    bdb4:	movw	r2, #520	; 0x208
    bdb8:	bl	0 <memcpy>
    bdbc:	ldr	r0, [fp, #-16]
    bdc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    bdc4:	ldr	r1, [r1, #16]
    bdc8:	bl	d2e4 <eval_cursor>
    bdcc:	cmp	r0, #0
    bdd0:	beq	bde0 <eval_string+0x11b4>
    bdd4:	mvn	r0, #0
    bdd8:	str	r0, [fp, #-12]
    bddc:	b	d1e4 <eval_string+0x25b8>
    bde0:	ldr	r0, [fp, #-16]
    bde4:	add	r0, r0, #8
    bde8:	sub	lr, fp, #1024	; 0x400
    bdec:	sub	r1, lr, #724	; 0x2d4
    bdf0:	bl	0 <coda_cursor_get_num_elements>
    bdf4:	cmp	r0, #0
    bdf8:	beq	be08 <eval_string+0x11dc>
    bdfc:	mvn	r0, #0
    be00:	str	r0, [fp, #-12]
    be04:	b	d1e4 <eval_string+0x25b8>
    be08:	ldr	r0, [fp, #-24]	; 0xffffffe8
    be0c:	movw	r1, #0
    be10:	str	r1, [r0]
    be14:	ldr	r0, [fp, #-28]	; 0xffffffe4
    be18:	str	r1, [r0]
    be1c:	ldr	r0, [fp, #8]
    be20:	str	r1, [r0]
    be24:	ldr	r0, [fp, #-1748]	; 0xfffff92c
    be28:	cmp	r0, #0
    be2c:	ble	bfc4 <eval_string+0x1398>
    be30:	ldr	r0, [fp, #-16]
    be34:	add	r0, r0, #8
    be38:	bl	0 <coda_cursor_goto_first_array_element>
    be3c:	cmp	r0, #0
    be40:	beq	be50 <eval_string+0x1224>
    be44:	mvn	r0, #0
    be48:	str	r0, [fp, #-12]
    be4c:	b	d1e4 <eval_string+0x25b8>
    be50:	movw	r0, #0
    be54:	str	r0, [fp, #-1752]	; 0xfffff928
    be58:	ldr	r0, [fp, #-1752]	; 0xfffff928
    be5c:	ldr	r1, [fp, #-1748]	; 0xfffff92c
    be60:	cmp	r0, r1
    be64:	bge	bfc0 <eval_string+0x1394>
    be68:	ldr	r0, [fp, #-16]
    be6c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    be70:	ldr	r1, [r1, #20]
    be74:	sub	lr, fp, #1024	; 0x400
    be78:	sub	r2, lr, #732	; 0x2dc
    be7c:	sub	r3, fp, #1760	; 0x6e0
    be80:	sub	lr, fp, #1024	; 0x400
    be84:	sub	ip, lr, #740	; 0x2e4
    be88:	str	ip, [sp]
    be8c:	bl	ac2c <eval_string>
    be90:	cmp	r0, #0
    be94:	beq	bea4 <eval_string+0x1278>
    be98:	mvn	r0, #0
    be9c:	str	r0, [fp, #-12]
    bea0:	b	d1e4 <eval_string+0x25b8>
    bea4:	ldr	r0, [fp, #-1760]	; 0xfffff920
    bea8:	cmp	r0, #0
    beac:	ble	bf74 <eval_string+0x1348>
    beb0:	ldr	r0, [fp, #8]
    beb4:	ldr	r0, [r0]
    beb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bebc:	ldr	r1, [r1]
    bec0:	ldr	r2, [fp, #-1760]	; 0xfffff920
    bec4:	add	r1, r1, r2
    bec8:	add	r1, r1, #1
    becc:	bl	0 <realloc>
    bed0:	str	r0, [fp, #-1768]	; 0xfffff918
    bed4:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bed8:	movw	r1, #0
    bedc:	cmp	r0, r1
    bee0:	bne	bf28 <eval_string+0x12fc>
    bee4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    bee8:	ldr	r0, [r0]
    beec:	ldr	r1, [fp, #-1760]	; 0xfffff920
    bef0:	add	r2, r0, r1
    bef4:	mvn	r0, #0
    bef8:	movw	r1, #0
    befc:	movt	r1, #0
    bf00:	movw	r3, #0
    bf04:	movt	r3, #0
    bf08:	movw	ip, #3275	; 0xccb
    bf0c:	str	ip, [sp]
    bf10:	bl	0 <coda_set_error>
    bf14:	ldr	r0, [fp, #-1764]	; 0xfffff91c
    bf18:	bl	0 <free>
    bf1c:	mvn	r0, #0
    bf20:	str	r0, [fp, #-12]
    bf24:	b	d1e4 <eval_string+0x25b8>
    bf28:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bf2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bf30:	ldr	r1, [r1]
    bf34:	add	r0, r0, r1
    bf38:	ldr	r1, [fp, #-1764]	; 0xfffff91c
    bf3c:	ldr	r2, [fp, #-1756]	; 0xfffff924
    bf40:	add	r1, r1, r2
    bf44:	ldr	r2, [fp, #-1760]	; 0xfffff920
    bf48:	bl	0 <memcpy>
    bf4c:	ldr	r0, [fp, #-1764]	; 0xfffff91c
    bf50:	bl	0 <free>
    bf54:	ldr	r0, [fp, #-1760]	; 0xfffff920
    bf58:	ldr	r1, [fp, #-28]	; 0xffffffe4
    bf5c:	ldr	r2, [r1]
    bf60:	add	r0, r2, r0
    bf64:	str	r0, [r1]
    bf68:	ldr	r0, [fp, #-1768]	; 0xfffff918
    bf6c:	ldr	r1, [fp, #8]
    bf70:	str	r0, [r1]
    bf74:	ldr	r0, [fp, #-1752]	; 0xfffff928
    bf78:	ldr	r1, [fp, #-1748]	; 0xfffff92c
    bf7c:	sub	r1, r1, #1
    bf80:	cmp	r0, r1
    bf84:	bge	bfac <eval_string+0x1380>
    bf88:	ldr	r0, [fp, #-16]
    bf8c:	add	r0, r0, #8
    bf90:	bl	0 <coda_cursor_goto_next_array_element>
    bf94:	cmp	r0, #0
    bf98:	beq	bfa8 <eval_string+0x137c>
    bf9c:	mvn	r0, #0
    bfa0:	str	r0, [fp, #-12]
    bfa4:	b	d1e4 <eval_string+0x25b8>
    bfa8:	b	bfac <eval_string+0x1380>
    bfac:	b	bfb0 <eval_string+0x1384>
    bfb0:	ldr	r0, [fp, #-1752]	; 0xfffff928
    bfb4:	add	r0, r0, #1
    bfb8:	str	r0, [fp, #-1752]	; 0xfffff928
    bfbc:	b	be58 <eval_string+0x122c>
    bfc0:	b	bfc4 <eval_string+0x1398>
    bfc4:	ldr	r0, [fp, #-16]
    bfc8:	add	r0, r0, #8
    bfcc:	sub	r1, fp, #1744	; 0x6d0
    bfd0:	movw	r2, #520	; 0x208
    bfd4:	bl	0 <memcpy>
    bfd8:	b	d1dc <eval_string+0x25b0>
    bfdc:	ldr	r0, [fp, #-16]
    bfe0:	ldr	r0, [r0]
    bfe4:	movw	r1, #0
    bfe8:	cmp	r0, r1
    bfec:	beq	bff4 <eval_string+0x13c8>
    bff0:	b	c014 <eval_string+0x13e8>
    bff4:	movw	r0, #0
    bff8:	movt	r0, #0
    bffc:	movw	r1, #0
    c000:	movt	r1, #0
    c004:	movw	r2, #3301	; 0xce5
    c008:	movw	r3, #0
    c00c:	movt	r3, #0
    c010:	bl	0 <__assert_fail>
    c014:	ldr	r0, [fp, #-16]
    c018:	add	r0, r0, #8
    c01c:	add	r1, sp, #1568	; 0x620
    c020:	str	r0, [sp, #68]	; 0x44
    c024:	mov	r0, r1
    c028:	ldr	r1, [sp, #68]	; 0x44
    c02c:	movw	r2, #520	; 0x208
    c030:	bl	0 <memcpy>
    c034:	ldr	r0, [fp, #-16]
    c038:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c03c:	ldr	r1, [r1, #16]
    c040:	bl	d2e4 <eval_cursor>
    c044:	cmp	r0, #0
    c048:	beq	c058 <eval_string+0x142c>
    c04c:	mvn	r0, #0
    c050:	str	r0, [fp, #-12]
    c054:	b	d1e4 <eval_string+0x25b8>
    c058:	ldr	r0, [fp, #-16]
    c05c:	add	r0, r0, #8
    c060:	add	lr, sp, #1024	; 0x400
    c064:	add	r1, lr, #540	; 0x21c
    c068:	bl	0 <coda_cursor_get_num_elements>
    c06c:	cmp	r0, #0
    c070:	beq	c080 <eval_string+0x1454>
    c074:	mvn	r0, #0
    c078:	str	r0, [fp, #-12]
    c07c:	b	d1e4 <eval_string+0x25b8>
    c080:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c084:	movw	r1, #0
    c088:	str	r1, [r0]
    c08c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c090:	str	r1, [r0]
    c094:	ldr	r0, [fp, #8]
    c098:	str	r1, [r0]
    c09c:	ldr	r0, [sp, #1564]	; 0x61c
    c0a0:	cmp	r0, #0
    c0a4:	ble	c1fc <eval_string+0x15d0>
    c0a8:	ldr	r0, [fp, #-16]
    c0ac:	add	r0, r0, #8
    c0b0:	bl	0 <coda_cursor_goto_first_array_element>
    c0b4:	cmp	r0, #0
    c0b8:	beq	c0c8 <eval_string+0x149c>
    c0bc:	mvn	r0, #0
    c0c0:	str	r0, [fp, #-12]
    c0c4:	b	d1e4 <eval_string+0x25b8>
    c0c8:	movw	r0, #0
    c0cc:	str	r0, [sp, #1560]	; 0x618
    c0d0:	ldr	r0, [sp, #1560]	; 0x618
    c0d4:	ldr	r1, [sp, #1564]	; 0x61c
    c0d8:	cmp	r0, r1
    c0dc:	bge	c1f8 <eval_string+0x15cc>
    c0e0:	ldr	r0, [fp, #-16]
    c0e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c0e8:	ldr	r1, [r1, #20]
    c0ec:	add	lr, sp, #1024	; 0x400
    c0f0:	add	r2, lr, #532	; 0x214
    c0f4:	add	r3, sp, #1552	; 0x610
    c0f8:	add	lr, sp, #1024	; 0x400
    c0fc:	add	ip, lr, #524	; 0x20c
    c100:	str	ip, [sp]
    c104:	bl	ac2c <eval_string>
    c108:	cmp	r0, #0
    c10c:	beq	c11c <eval_string+0x14f0>
    c110:	mvn	r0, #0
    c114:	str	r0, [fp, #-12]
    c118:	b	d1e4 <eval_string+0x25b8>
    c11c:	ldr	r0, [sp, #1556]	; 0x614
    c120:	ldr	r1, [sp, #1552]	; 0x610
    c124:	ldr	r2, [sp, #1548]	; 0x60c
    c128:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c12c:	ldr	r3, [r3]
    c130:	ldr	ip, [fp, #-28]	; 0xffffffe4
    c134:	ldr	ip, [ip]
    c138:	ldr	lr, [fp, #8]
    c13c:	ldr	lr, [lr]
    c140:	str	ip, [sp]
    c144:	str	lr, [sp, #4]
    c148:	bl	e388 <compare_strings>
    c14c:	cmp	r0, #0
    c150:	bge	c194 <eval_string+0x1568>
    c154:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c158:	ldr	r0, [r0]
    c15c:	cmp	r0, #0
    c160:	ble	c16c <eval_string+0x1540>
    c164:	ldr	r0, [fp, #8]
    c168:	bl	0 <free>
    c16c:	ldr	r0, [sp, #1556]	; 0x614
    c170:	ldr	r1, [fp, #-24]	; 0xffffffe8
    c174:	str	r0, [r1]
    c178:	ldr	r0, [sp, #1552]	; 0x610
    c17c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c180:	str	r0, [r1]
    c184:	ldr	r0, [sp, #1548]	; 0x60c
    c188:	ldr	r1, [fp, #8]
    c18c:	str	r0, [r1]
    c190:	b	c1ac <eval_string+0x1580>
    c194:	ldr	r0, [sp, #1552]	; 0x610
    c198:	cmp	r0, #0
    c19c:	ble	c1a8 <eval_string+0x157c>
    c1a0:	ldr	r0, [sp, #1548]	; 0x60c
    c1a4:	bl	0 <free>
    c1a8:	b	c1ac <eval_string+0x1580>
    c1ac:	ldr	r0, [sp, #1560]	; 0x618
    c1b0:	ldr	r1, [sp, #1564]	; 0x61c
    c1b4:	sub	r1, r1, #1
    c1b8:	cmp	r0, r1
    c1bc:	bge	c1e4 <eval_string+0x15b8>
    c1c0:	ldr	r0, [fp, #-16]
    c1c4:	add	r0, r0, #8
    c1c8:	bl	0 <coda_cursor_goto_next_array_element>
    c1cc:	cmp	r0, #0
    c1d0:	beq	c1e0 <eval_string+0x15b4>
    c1d4:	mvn	r0, #0
    c1d8:	str	r0, [fp, #-12]
    c1dc:	b	d1e4 <eval_string+0x25b8>
    c1e0:	b	c1e4 <eval_string+0x15b8>
    c1e4:	b	c1e8 <eval_string+0x15bc>
    c1e8:	ldr	r0, [sp, #1560]	; 0x618
    c1ec:	add	r0, r0, #1
    c1f0:	str	r0, [sp, #1560]	; 0x618
    c1f4:	b	c0d0 <eval_string+0x14a4>
    c1f8:	b	c1fc <eval_string+0x15d0>
    c1fc:	ldr	r0, [fp, #-16]
    c200:	add	r0, r0, #8
    c204:	add	r1, sp, #1568	; 0x620
    c208:	movw	r2, #520	; 0x208
    c20c:	bl	0 <memcpy>
    c210:	b	d1dc <eval_string+0x25b0>
    c214:	ldr	r0, [fp, #-16]
    c218:	ldr	r0, [r0]
    c21c:	movw	r1, #0
    c220:	cmp	r0, r1
    c224:	beq	c22c <eval_string+0x1600>
    c228:	b	c24c <eval_string+0x1620>
    c22c:	movw	r0, #0
    c230:	movt	r0, #0
    c234:	movw	r1, #0
    c238:	movt	r1, #0
    c23c:	movw	r2, #3363	; 0xd23
    c240:	movw	r3, #0
    c244:	movt	r3, #0
    c248:	bl	0 <__assert_fail>
    c24c:	ldr	r0, [fp, #-16]
    c250:	add	r0, r0, #8
    c254:	add	r1, sp, #1024	; 0x400
    c258:	str	r0, [sp, #64]	; 0x40
    c25c:	mov	r0, r1
    c260:	ldr	r1, [sp, #64]	; 0x40
    c264:	movw	r2, #520	; 0x208
    c268:	bl	0 <memcpy>
    c26c:	ldr	r0, [fp, #-16]
    c270:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c274:	ldr	r1, [r1, #16]
    c278:	bl	d2e4 <eval_cursor>
    c27c:	cmp	r0, #0
    c280:	beq	c290 <eval_string+0x1664>
    c284:	mvn	r0, #0
    c288:	str	r0, [fp, #-12]
    c28c:	b	d1e4 <eval_string+0x25b8>
    c290:	ldr	r0, [fp, #-16]
    c294:	add	r0, r0, #8
    c298:	add	r1, sp, #1020	; 0x3fc
    c29c:	bl	0 <coda_cursor_get_num_elements>
    c2a0:	cmp	r0, #0
    c2a4:	beq	c2b4 <eval_string+0x1688>
    c2a8:	mvn	r0, #0
    c2ac:	str	r0, [fp, #-12]
    c2b0:	b	d1e4 <eval_string+0x25b8>
    c2b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c2b8:	movw	r1, #0
    c2bc:	str	r1, [r0]
    c2c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c2c4:	str	r1, [r0]
    c2c8:	ldr	r0, [fp, #8]
    c2cc:	str	r1, [r0]
    c2d0:	ldr	r0, [sp, #1020]	; 0x3fc
    c2d4:	cmp	r0, #0
    c2d8:	ble	c42c <eval_string+0x1800>
    c2dc:	ldr	r0, [fp, #-16]
    c2e0:	add	r0, r0, #8
    c2e4:	bl	0 <coda_cursor_goto_first_array_element>
    c2e8:	cmp	r0, #0
    c2ec:	beq	c2fc <eval_string+0x16d0>
    c2f0:	mvn	r0, #0
    c2f4:	str	r0, [fp, #-12]
    c2f8:	b	d1e4 <eval_string+0x25b8>
    c2fc:	movw	r0, #0
    c300:	str	r0, [sp, #1016]	; 0x3f8
    c304:	ldr	r0, [sp, #1016]	; 0x3f8
    c308:	ldr	r1, [sp, #1020]	; 0x3fc
    c30c:	cmp	r0, r1
    c310:	bge	c428 <eval_string+0x17fc>
    c314:	ldr	r0, [fp, #-16]
    c318:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c31c:	ldr	r1, [r1, #20]
    c320:	add	r2, sp, #1012	; 0x3f4
    c324:	add	r3, sp, #1008	; 0x3f0
    c328:	add	ip, sp, #1004	; 0x3ec
    c32c:	str	ip, [sp]
    c330:	bl	ac2c <eval_string>
    c334:	cmp	r0, #0
    c338:	beq	c348 <eval_string+0x171c>
    c33c:	mvn	r0, #0
    c340:	str	r0, [fp, #-12]
    c344:	b	d1e4 <eval_string+0x25b8>
    c348:	ldr	r0, [sp, #1012]	; 0x3f4
    c34c:	ldr	r1, [sp, #1008]	; 0x3f0
    c350:	ldr	r2, [sp, #1004]	; 0x3ec
    c354:	ldr	r3, [fp, #-24]	; 0xffffffe8
    c358:	ldr	r3, [r3]
    c35c:	ldr	ip, [fp, #-28]	; 0xffffffe4
    c360:	ldr	ip, [ip]
    c364:	ldr	lr, [fp, #8]
    c368:	ldr	lr, [lr]
    c36c:	str	ip, [sp]
    c370:	str	lr, [sp, #4]
    c374:	bl	e388 <compare_strings>
    c378:	cmp	r0, #0
    c37c:	ble	c3c4 <eval_string+0x1798>
    c380:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c384:	ldr	r0, [r0]
    c388:	cmp	r0, #0
    c38c:	ble	c39c <eval_string+0x1770>
    c390:	ldr	r0, [fp, #8]
    c394:	ldr	r0, [r0]
    c398:	bl	0 <free>
    c39c:	ldr	r0, [sp, #1012]	; 0x3f4
    c3a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    c3a4:	str	r0, [r1]
    c3a8:	ldr	r0, [sp, #1008]	; 0x3f0
    c3ac:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c3b0:	str	r0, [r1]
    c3b4:	ldr	r0, [sp, #1004]	; 0x3ec
    c3b8:	ldr	r1, [fp, #8]
    c3bc:	str	r0, [r1]
    c3c0:	b	c3dc <eval_string+0x17b0>
    c3c4:	ldr	r0, [sp, #1008]	; 0x3f0
    c3c8:	cmp	r0, #0
    c3cc:	ble	c3d8 <eval_string+0x17ac>
    c3d0:	ldr	r0, [sp, #1004]	; 0x3ec
    c3d4:	bl	0 <free>
    c3d8:	b	c3dc <eval_string+0x17b0>
    c3dc:	ldr	r0, [sp, #1016]	; 0x3f8
    c3e0:	ldr	r1, [sp, #1020]	; 0x3fc
    c3e4:	sub	r1, r1, #1
    c3e8:	cmp	r0, r1
    c3ec:	bge	c414 <eval_string+0x17e8>
    c3f0:	ldr	r0, [fp, #-16]
    c3f4:	add	r0, r0, #8
    c3f8:	bl	0 <coda_cursor_goto_next_array_element>
    c3fc:	cmp	r0, #0
    c400:	beq	c410 <eval_string+0x17e4>
    c404:	mvn	r0, #0
    c408:	str	r0, [fp, #-12]
    c40c:	b	d1e4 <eval_string+0x25b8>
    c410:	b	c414 <eval_string+0x17e8>
    c414:	b	c418 <eval_string+0x17ec>
    c418:	ldr	r0, [sp, #1016]	; 0x3f8
    c41c:	add	r0, r0, #1
    c420:	str	r0, [sp, #1016]	; 0x3f8
    c424:	b	c304 <eval_string+0x16d8>
    c428:	b	c42c <eval_string+0x1800>
    c42c:	ldr	r0, [fp, #-16]
    c430:	add	r0, r0, #8
    c434:	add	r1, sp, #1024	; 0x400
    c438:	movw	r2, #520	; 0x208
    c43c:	bl	0 <memcpy>
    c440:	b	d1dc <eval_string+0x25b0>
    c444:	ldr	r0, [fp, #-16]
    c448:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c44c:	ldr	r1, [r1, #16]
    c450:	add	r2, sp, #1000	; 0x3e8
    c454:	bl	5288 <eval_boolean>
    c458:	cmp	r0, #0
    c45c:	beq	c46c <eval_string+0x1840>
    c460:	mvn	r0, #0
    c464:	str	r0, [fp, #-12]
    c468:	b	d1e4 <eval_string+0x25b8>
    c46c:	ldr	r0, [sp, #1000]	; 0x3e8
    c470:	cmp	r0, #0
    c474:	beq	c4b0 <eval_string+0x1884>
    c478:	ldr	r0, [fp, #-16]
    c47c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c480:	ldr	r1, [r1, #20]
    c484:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c488:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c48c:	ldr	ip, [fp, #8]
    c490:	str	ip, [sp]
    c494:	bl	ac2c <eval_string>
    c498:	cmp	r0, #0
    c49c:	beq	c4ac <eval_string+0x1880>
    c4a0:	mvn	r0, #0
    c4a4:	str	r0, [fp, #-12]
    c4a8:	b	d1e4 <eval_string+0x25b8>
    c4ac:	b	c4e8 <eval_string+0x18bc>
    c4b0:	ldr	r0, [fp, #-16]
    c4b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c4b8:	ldr	r1, [r1, #24]
    c4bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    c4c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    c4c4:	ldr	ip, [fp, #8]
    c4c8:	str	ip, [sp]
    c4cc:	bl	ac2c <eval_string>
    c4d0:	cmp	r0, #0
    c4d4:	beq	c4e4 <eval_string+0x18b8>
    c4d8:	mvn	r0, #0
    c4dc:	str	r0, [fp, #-12]
    c4e0:	b	d1e4 <eval_string+0x25b8>
    c4e4:	b	c4e8 <eval_string+0x18bc>
    c4e8:	b	d1dc <eval_string+0x25b0>
    c4ec:	ldr	r0, [fp, #-16]
    c4f0:	ldr	r0, [r0]
    c4f4:	movw	r1, #0
    c4f8:	cmp	r0, r1
    c4fc:	beq	c504 <eval_string+0x18d8>
    c500:	b	c524 <eval_string+0x18f8>
    c504:	movw	r0, #0
    c508:	movt	r0, #0
    c50c:	movw	r1, #0
    c510:	movt	r1, #0
    c514:	movw	r2, #3449	; 0xd79
    c518:	movw	r3, #0
    c51c:	movt	r3, #0
    c520:	bl	0 <__assert_fail>
    c524:	ldr	r0, [fp, #-16]
    c528:	ldr	r0, [r0]
    c52c:	ldr	r0, [r0]
    c530:	add	r1, sp, #996	; 0x3e4
    c534:	bl	0 <coda_get_product_filename>
    c538:	cmp	r0, #0
    c53c:	beq	c54c <eval_string+0x1920>
    c540:	mvn	r0, #0
    c544:	str	r0, [fp, #-12]
    c548:	b	d1e4 <eval_string+0x25b8>
    c54c:	ldr	r0, [sp, #996]	; 0x3e4
    c550:	str	r0, [sp, #992]	; 0x3e0
    c554:	ldr	r0, [sp, #996]	; 0x3e4
    c558:	ldrb	r0, [r0]
    c55c:	cmp	r0, #0
    c560:	beq	c5a0 <eval_string+0x1974>
    c564:	ldr	r0, [sp, #996]	; 0x3e4
    c568:	ldrb	r0, [r0]
    c56c:	cmp	r0, #47	; 0x2f
    c570:	beq	c584 <eval_string+0x1958>
    c574:	ldr	r0, [sp, #996]	; 0x3e4
    c578:	ldrb	r0, [r0]
    c57c:	cmp	r0, #92	; 0x5c
    c580:	bne	c590 <eval_string+0x1964>
    c584:	ldr	r0, [sp, #996]	; 0x3e4
    c588:	add	r0, r0, #1
    c58c:	str	r0, [sp, #992]	; 0x3e0
    c590:	ldr	r0, [sp, #996]	; 0x3e4
    c594:	add	r0, r0, #1
    c598:	str	r0, [sp, #996]	; 0x3e4
    c59c:	b	c554 <eval_string+0x1928>
    c5a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    c5a4:	movw	r1, #0
    c5a8:	str	r1, [r0]
    c5ac:	ldr	r0, [sp, #992]	; 0x3e0
    c5b0:	bl	0 <strlen>
    c5b4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    c5b8:	str	r0, [r1]
    c5bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c5c0:	ldr	r0, [r0]
    c5c4:	add	r0, r0, #1
    c5c8:	bl	0 <malloc>
    c5cc:	ldr	r1, [fp, #8]
    c5d0:	str	r0, [r1]
    c5d4:	ldr	r0, [fp, #8]
    c5d8:	ldr	r0, [r0]
    c5dc:	movw	r1, #0
    c5e0:	cmp	r0, r1
    c5e4:	bne	c61c <eval_string+0x19f0>
    c5e8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c5ec:	ldr	r2, [r0]
    c5f0:	mvn	r0, #0
    c5f4:	movw	r1, #0
    c5f8:	movt	r1, #0
    c5fc:	movw	r3, #0
    c600:	movt	r3, #0
    c604:	movw	ip, #3469	; 0xd8d
    c608:	str	ip, [sp]
    c60c:	bl	0 <coda_set_error>
    c610:	mvn	r0, #0
    c614:	str	r0, [fp, #-12]
    c618:	b	d1e4 <eval_string+0x25b8>
    c61c:	ldr	r0, [fp, #8]
    c620:	ldr	r0, [r0]
    c624:	ldr	r1, [sp, #992]	; 0x3e0
    c628:	ldr	r2, [fp, #-28]	; 0xffffffe4
    c62c:	ldr	r2, [r2]
    c630:	bl	0 <memcpy>
    c634:	b	d1dc <eval_string+0x25b0>
    c638:	movw	r0, #0
    c63c:	str	r0, [sp, #768]	; 0x300
    c640:	str	r0, [sp, #760]	; 0x2f8
    c644:	ldr	r0, [fp, #-16]
    c648:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c64c:	ldr	r1, [r1, #16]
    c650:	add	r2, sp, #776	; 0x308
    c654:	add	r3, sp, #772	; 0x304
    c658:	add	ip, sp, #768	; 0x300
    c65c:	str	ip, [sp]
    c660:	bl	ac2c <eval_string>
    c664:	cmp	r0, #0
    c668:	beq	c678 <eval_string+0x1a4c>
    c66c:	mvn	r0, #0
    c670:	str	r0, [fp, #-12]
    c674:	b	d1e4 <eval_string+0x25b8>
    c678:	ldr	r0, [fp, #-16]
    c67c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c680:	ldr	r1, [r1, #20]
    c684:	add	r2, sp, #788	; 0x314
    c688:	add	r3, sp, #784	; 0x310
    c68c:	add	ip, sp, #780	; 0x30c
    c690:	str	ip, [sp]
    c694:	bl	ac2c <eval_string>
    c698:	cmp	r0, #0
    c69c:	beq	c6c4 <eval_string+0x1a98>
    c6a0:	ldr	r0, [sp, #768]	; 0x300
    c6a4:	movw	r1, #0
    c6a8:	cmp	r0, r1
    c6ac:	beq	c6b8 <eval_string+0x1a8c>
    c6b0:	ldr	r0, [sp, #768]	; 0x300
    c6b4:	bl	0 <free>
    c6b8:	mvn	r0, #0
    c6bc:	str	r0, [fp, #-12]
    c6c0:	b	d1e4 <eval_string+0x25b8>
    c6c4:	ldr	r0, [sp, #772]	; 0x304
    c6c8:	cmp	r0, #0
    c6cc:	ble	c718 <eval_string+0x1aec>
    c6d0:	ldr	r0, [sp, #768]	; 0x300
    c6d4:	ldr	r1, [sp, #776]	; 0x308
    c6d8:	ldr	r2, [sp, #772]	; 0x304
    c6dc:	add	r1, r1, r2
    c6e0:	add	r0, r0, r1
    c6e4:	movw	r1, #0
    c6e8:	strb	r1, [r0]
    c6ec:	ldr	r0, [sp, #768]	; 0x300
    c6f0:	ldr	r1, [sp, #776]	; 0x308
    c6f4:	add	r0, r0, r1
    c6f8:	movw	r1, #36	; 0x24
    c6fc:	add	r2, sp, #796	; 0x31c
    c700:	add	r3, sp, #792	; 0x318
    c704:	movw	ip, #0
    c708:	str	ip, [sp]
    c70c:	bl	0 <coda_pcre_compile>
    c710:	str	r0, [sp, #764]	; 0x2fc
    c714:	b	c73c <eval_string+0x1b10>
    c718:	movw	r0, #0
    c71c:	movt	r0, #0
    c720:	movw	r1, #36	; 0x24
    c724:	add	r2, sp, #796	; 0x31c
    c728:	add	r3, sp, #792	; 0x318
    c72c:	movw	ip, #0
    c730:	str	ip, [sp]
    c734:	bl	0 <coda_pcre_compile>
    c738:	str	r0, [sp, #764]	; 0x2fc
    c73c:	ldr	r0, [sp, #768]	; 0x300
    c740:	movw	r1, #0
    c744:	cmp	r0, r1
    c748:	beq	c754 <eval_string+0x1b28>
    c74c:	ldr	r0, [sp, #768]	; 0x300
    c750:	bl	0 <free>
    c754:	ldr	r0, [sp, #764]	; 0x2fc
    c758:	movw	r1, #0
    c75c:	cmp	r0, r1
    c760:	bne	c7a0 <eval_string+0x1b74>
    c764:	ldr	r2, [sp, #796]	; 0x31c
    c768:	ldr	r3, [sp, #792]	; 0x318
    c76c:	mvn	r0, #400	; 0x190
    c770:	movw	r1, #0
    c774:	movt	r1, #0
    c778:	bl	0 <coda_set_error>
    c77c:	ldr	r0, [sp, #780]	; 0x30c
    c780:	movw	r1, #0
    c784:	cmp	r0, r1
    c788:	beq	c794 <eval_string+0x1b68>
    c78c:	ldr	r0, [sp, #780]	; 0x30c
    c790:	bl	0 <free>
    c794:	mvn	r0, #0
    c798:	str	r0, [fp, #-12]
    c79c:	b	d1e4 <eval_string+0x25b8>
    c7a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    c7a4:	ldr	r0, [r0, #24]
    c7a8:	ldr	r0, [r0, #4]
    c7ac:	cmp	r0, #1
    c7b0:	bne	c808 <eval_string+0x1bdc>
    c7b4:	ldr	r0, [fp, #-16]
    c7b8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c7bc:	ldr	r1, [r1, #24]
    c7c0:	add	r2, sp, #744	; 0x2e8
    c7c4:	bl	70a8 <eval_integer>
    c7c8:	cmp	r0, #0
    c7cc:	beq	c7fc <eval_string+0x1bd0>
    c7d0:	movw	r0, #0
    c7d4:	movt	r0, #0
    c7d8:	ldr	r0, [r0]
    c7dc:	ldr	r1, [sp, #764]	; 0x2fc
    c7e0:	str	r0, [sp, #60]	; 0x3c
    c7e4:	mov	r0, r1
    c7e8:	ldr	r1, [sp, #60]	; 0x3c
    c7ec:	blx	r1
    c7f0:	mvn	r0, #0
    c7f4:	str	r0, [fp, #-12]
    c7f8:	b	d1e4 <eval_string+0x25b8>
    c7fc:	ldr	r0, [sp, #744]	; 0x2e8
    c800:	str	r0, [sp, #760]	; 0x2f8
    c804:	b	c928 <eval_string+0x1cfc>
    c808:	ldr	r0, [fp, #-16]
    c80c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    c810:	ldr	r1, [r1, #24]
    c814:	add	r2, sp, #740	; 0x2e4
    c818:	add	r3, sp, #736	; 0x2e0
    c81c:	add	ip, sp, #732	; 0x2dc
    c820:	str	ip, [sp]
    c824:	bl	ac2c <eval_string>
    c828:	cmp	r0, #0
    c82c:	beq	c85c <eval_string+0x1c30>
    c830:	movw	r0, #0
    c834:	movt	r0, #0
    c838:	ldr	r0, [r0]
    c83c:	ldr	r1, [sp, #764]	; 0x2fc
    c840:	str	r0, [sp, #56]	; 0x38
    c844:	mov	r0, r1
    c848:	ldr	r1, [sp, #56]	; 0x38
    c84c:	blx	r1
    c850:	mvn	r0, #0
    c854:	str	r0, [fp, #-12]
    c858:	b	d1e4 <eval_string+0x25b8>
    c85c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    c860:	movw	r1, #0
    c864:	cmp	r0, r1
    c868:	bne	c8c0 <eval_string+0x1c94>
    c86c:	mvn	r0, #400	; 0x190
    c870:	movw	r1, #0
    c874:	movt	r1, #0
    c878:	bl	0 <coda_set_error>
    c87c:	ldr	r0, [sp, #732]	; 0x2dc
    c880:	movw	r1, #0
    c884:	cmp	r0, r1
    c888:	beq	c894 <eval_string+0x1c68>
    c88c:	ldr	r0, [sp, #732]	; 0x2dc
    c890:	bl	0 <free>
    c894:	movw	r0, #0
    c898:	movt	r0, #0
    c89c:	ldr	r0, [r0]
    c8a0:	ldr	r1, [sp, #764]	; 0x2fc
    c8a4:	str	r0, [sp, #52]	; 0x34
    c8a8:	mov	r0, r1
    c8ac:	ldr	r1, [sp, #52]	; 0x34
    c8b0:	blx	r1
    c8b4:	mvn	r0, #0
    c8b8:	str	r0, [fp, #-12]
    c8bc:	b	d1e4 <eval_string+0x25b8>
    c8c0:	ldr	r0, [sp, #764]	; 0x2fc
    c8c4:	ldr	r1, [sp, #732]	; 0x2dc
    c8c8:	bl	0 <coda_pcre_get_stringnumber>
    c8cc:	str	r0, [sp, #760]	; 0x2f8
    c8d0:	ldr	r0, [sp, #760]	; 0x2f8
    c8d4:	cmp	r0, #0
    c8d8:	bge	c920 <eval_string+0x1cf4>
    c8dc:	mvn	r0, #400	; 0x190
    c8e0:	movw	r1, #0
    c8e4:	movt	r1, #0
    c8e8:	bl	0 <coda_set_error>
    c8ec:	ldr	r0, [sp, #732]	; 0x2dc
    c8f0:	bl	0 <free>
    c8f4:	movw	r0, #0
    c8f8:	movt	r0, #0
    c8fc:	ldr	r0, [r0]
    c900:	ldr	r1, [sp, #764]	; 0x2fc
    c904:	str	r0, [sp, #48]	; 0x30
    c908:	mov	r0, r1
    c90c:	ldr	r1, [sp, #48]	; 0x30
    c910:	blx	r1
    c914:	mvn	r0, #0
    c918:	str	r0, [fp, #-12]
    c91c:	b	d1e4 <eval_string+0x25b8>
    c920:	ldr	r0, [sp, #732]	; 0x2dc
    c924:	bl	0 <free>
    c928:	ldr	r0, [sp, #780]	; 0x30c
    c92c:	movw	r1, #0
    c930:	cmp	r0, r1
    c934:	bne	c9a4 <eval_string+0x1d78>
    c938:	movw	r0, #0
    c93c:	movt	r0, #0
    c940:	bl	0 <strdup>
    c944:	str	r0, [sp, #780]	; 0x30c
    c948:	ldr	r0, [sp, #780]	; 0x30c
    c94c:	movw	lr, #0
    c950:	cmp	r0, lr
    c954:	bne	c9a0 <eval_string+0x1d74>
    c958:	mvn	r0, #0
    c95c:	movw	r1, #0
    c960:	movt	r1, #0
    c964:	movw	r2, #0
    c968:	movt	r2, #0
    c96c:	movw	r3, #3583	; 0xdff
    c970:	bl	0 <coda_set_error>
    c974:	movw	r0, #0
    c978:	movt	r0, #0
    c97c:	ldr	r0, [r0]
    c980:	ldr	r1, [sp, #764]	; 0x2fc
    c984:	str	r0, [sp, #44]	; 0x2c
    c988:	mov	r0, r1
    c98c:	ldr	r1, [sp, #44]	; 0x2c
    c990:	blx	r1
    c994:	mvn	r0, #0
    c998:	str	r0, [fp, #-12]
    c99c:	b	d1e4 <eval_string+0x25b8>
    c9a0:	b	c9a4 <eval_string+0x1d78>
    c9a4:	add	r0, sp, #800	; 0x320
    c9a8:	ldr	r1, [sp, #764]	; 0x2fc
    c9ac:	ldr	r2, [sp, #780]	; 0x30c
    c9b0:	ldr	r3, [sp, #788]	; 0x314
    c9b4:	add	r2, r2, r3
    c9b8:	ldr	r3, [sp, #784]	; 0x310
    c9bc:	str	r0, [sp, #40]	; 0x28
    c9c0:	mov	r0, r1
    c9c4:	movw	r1, #0
    c9c8:	str	r1, [sp, #36]	; 0x24
    c9cc:	ldr	ip, [sp, #36]	; 0x24
    c9d0:	str	ip, [sp]
    c9d4:	str	ip, [sp, #4]
    c9d8:	ldr	lr, [sp, #40]	; 0x28
    c9dc:	str	lr, [sp, #8]
    c9e0:	movw	r4, #48	; 0x30
    c9e4:	str	r4, [sp, #12]
    c9e8:	bl	0 <coda_pcre_exec>
    c9ec:	str	r0, [sp, #756]	; 0x2f4
    c9f0:	movw	r0, #0
    c9f4:	movt	r0, #0
    c9f8:	ldr	r0, [r0]
    c9fc:	ldr	r1, [sp, #764]	; 0x2fc
    ca00:	str	r0, [sp, #32]
    ca04:	mov	r0, r1
    ca08:	ldr	r1, [sp, #32]
    ca0c:	blx	r1
    ca10:	ldr	r0, [sp, #756]	; 0x2f4
    ca14:	cmp	r0, #0
    ca18:	bge	ca50 <eval_string+0x1e24>
    ca1c:	ldr	r0, [sp, #756]	; 0x2f4
    ca20:	cmn	r0, #1
    ca24:	beq	ca50 <eval_string+0x1e24>
    ca28:	ldr	r2, [sp, #756]	; 0x2f4
    ca2c:	mvn	r0, #400	; 0x190
    ca30:	movw	r1, #0
    ca34:	movt	r1, #0
    ca38:	bl	0 <coda_set_error>
    ca3c:	ldr	r0, [sp, #780]	; 0x30c
    ca40:	bl	0 <free>
    ca44:	mvn	r0, #0
    ca48:	str	r0, [fp, #-12]
    ca4c:	b	d1e4 <eval_string+0x25b8>
    ca50:	ldr	r0, [sp, #756]	; 0x2f4
    ca54:	cmp	r0, #0
    ca58:	bne	ca80 <eval_string+0x1e54>
    ca5c:	mvn	r0, #400	; 0x190
    ca60:	movw	r1, #0
    ca64:	movt	r1, #0
    ca68:	bl	0 <coda_set_error>
    ca6c:	ldr	r0, [sp, #780]	; 0x30c
    ca70:	bl	0 <free>
    ca74:	mvn	r0, #0
    ca78:	str	r0, [fp, #-12]
    ca7c:	b	d1e4 <eval_string+0x25b8>
    ca80:	ldr	r0, [sp, #760]	; 0x2f8
    ca84:	ldr	r1, [sp, #756]	; 0x2f4
    ca88:	cmp	r0, r1
    ca8c:	blt	cab8 <eval_string+0x1e8c>
    ca90:	ldr	r0, [fp, #-24]	; 0xffffffe8
    ca94:	movw	r1, #0
    ca98:	str	r1, [r0]
    ca9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    caa0:	str	r1, [r0]
    caa4:	ldr	r0, [fp, #8]
    caa8:	str	r1, [r0]
    caac:	ldr	r0, [sp, #780]	; 0x30c
    cab0:	bl	0 <free>
    cab4:	b	cafc <eval_string+0x1ed0>
    cab8:	ldr	r0, [sp, #760]	; 0x2f8
    cabc:	add	r1, sp, #800	; 0x320
    cac0:	ldr	r0, [r1, r0, lsl #3]
    cac4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    cac8:	str	r0, [r2]
    cacc:	ldr	r0, [sp, #760]	; 0x2f8
    cad0:	lsl	r2, r0, #1
    cad4:	add	r0, r1, r0, lsl #3
    cad8:	ldr	r1, [r0, #4]
    cadc:	ldr	r0, [r0]
    cae0:	sub	r0, r1, r0
    cae4:	ldr	r1, [fp, #-28]	; 0xffffffe4
    cae8:	str	r0, [r1]
    caec:	ldr	r0, [sp, #780]	; 0x30c
    caf0:	ldr	r1, [fp, #8]
    caf4:	str	r0, [r1]
    caf8:	str	r2, [sp, #28]
    cafc:	b	d1dc <eval_string+0x25b0>
    cb00:	ldr	r0, [fp, #-16]
    cb04:	ldr	r0, [r0]
    cb08:	movw	r1, #0
    cb0c:	cmp	r0, r1
    cb10:	beq	cb18 <eval_string+0x1eec>
    cb14:	b	cb38 <eval_string+0x1f0c>
    cb18:	movw	r0, #0
    cb1c:	movt	r0, #0
    cb20:	movw	r1, #0
    cb24:	movt	r1, #0
    cb28:	movw	r2, #3624	; 0xe28
    cb2c:	movw	r3, #0
    cb30:	movt	r3, #0
    cb34:	bl	0 <__assert_fail>
    cb38:	ldr	r0, [fp, #-16]
    cb3c:	ldr	r0, [r0]
    cb40:	ldr	r0, [r0]
    cb44:	add	r1, sp, #728	; 0x2d8
    cb48:	bl	0 <coda_get_product_class>
    cb4c:	cmp	r0, #0
    cb50:	beq	cb60 <eval_string+0x1f34>
    cb54:	mvn	r0, #0
    cb58:	str	r0, [fp, #-12]
    cb5c:	b	d1e4 <eval_string+0x25b8>
    cb60:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cb64:	movw	r1, #0
    cb68:	str	r1, [r0]
    cb6c:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cb70:	str	r1, [r0]
    cb74:	ldr	r0, [sp, #728]	; 0x2d8
    cb78:	cmp	r0, r1
    cb7c:	beq	cc08 <eval_string+0x1fdc>
    cb80:	ldr	r0, [sp, #728]	; 0x2d8
    cb84:	bl	0 <strlen>
    cb88:	ldr	lr, [fp, #-28]	; 0xffffffe4
    cb8c:	str	r0, [lr]
    cb90:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cb94:	ldr	r0, [r0]
    cb98:	add	r0, r0, #1
    cb9c:	bl	0 <malloc>
    cba0:	ldr	lr, [fp, #8]
    cba4:	str	r0, [lr]
    cba8:	ldr	r0, [fp, #8]
    cbac:	ldr	r0, [r0]
    cbb0:	movw	lr, #0
    cbb4:	cmp	r0, lr
    cbb8:	bne	cbf0 <eval_string+0x1fc4>
    cbbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cbc0:	ldr	r2, [r0]
    cbc4:	mvn	r0, #0
    cbc8:	movw	r1, #0
    cbcc:	movt	r1, #0
    cbd0:	movw	r3, #0
    cbd4:	movt	r3, #0
    cbd8:	movw	ip, #3638	; 0xe36
    cbdc:	str	ip, [sp]
    cbe0:	bl	0 <coda_set_error>
    cbe4:	mvn	r0, #0
    cbe8:	str	r0, [fp, #-12]
    cbec:	b	d1e4 <eval_string+0x25b8>
    cbf0:	ldr	r0, [fp, #8]
    cbf4:	ldr	r0, [r0]
    cbf8:	ldr	r1, [sp, #728]	; 0x2d8
    cbfc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cc00:	ldr	r2, [r2]
    cc04:	bl	0 <memcpy>
    cc08:	b	d1dc <eval_string+0x25b0>
    cc0c:	ldr	r0, [fp, #-16]
    cc10:	ldr	r0, [r0]
    cc14:	movw	r1, #0
    cc18:	cmp	r0, r1
    cc1c:	beq	cc24 <eval_string+0x1ff8>
    cc20:	b	cc44 <eval_string+0x2018>
    cc24:	movw	r0, #0
    cc28:	movt	r0, #0
    cc2c:	movw	r1, #0
    cc30:	movt	r1, #0
    cc34:	movw	r2, #3650	; 0xe42
    cc38:	movw	r3, #0
    cc3c:	movt	r3, #0
    cc40:	bl	0 <__assert_fail>
    cc44:	ldr	r0, [fp, #-16]
    cc48:	ldr	r0, [r0]
    cc4c:	ldr	r0, [r0]
    cc50:	add	r1, sp, #724	; 0x2d4
    cc54:	bl	0 <coda_get_product_format>
    cc58:	cmp	r0, #0
    cc5c:	beq	cc6c <eval_string+0x2040>
    cc60:	mvn	r0, #0
    cc64:	str	r0, [fp, #-12]
    cc68:	b	d1e4 <eval_string+0x25b8>
    cc6c:	ldr	r0, [sp, #724]	; 0x2d4
    cc70:	bl	0 <coda_type_get_format_name>
    cc74:	str	r0, [sp, #720]	; 0x2d0
    cc78:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cc7c:	movw	lr, #0
    cc80:	str	lr, [r0]
    cc84:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cc88:	str	lr, [r0]
    cc8c:	ldr	r0, [sp, #720]	; 0x2d0
    cc90:	cmp	r0, lr
    cc94:	beq	cd20 <eval_string+0x20f4>
    cc98:	ldr	r0, [sp, #720]	; 0x2d0
    cc9c:	bl	0 <strlen>
    cca0:	ldr	lr, [fp, #-28]	; 0xffffffe4
    cca4:	str	r0, [lr]
    cca8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ccac:	ldr	r0, [r0]
    ccb0:	add	r0, r0, #1
    ccb4:	bl	0 <malloc>
    ccb8:	ldr	lr, [fp, #8]
    ccbc:	str	r0, [lr]
    ccc0:	ldr	r0, [fp, #8]
    ccc4:	ldr	r0, [r0]
    ccc8:	movw	lr, #0
    cccc:	cmp	r0, lr
    ccd0:	bne	cd08 <eval_string+0x20dc>
    ccd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    ccd8:	ldr	r2, [r0]
    ccdc:	mvn	r0, #0
    cce0:	movw	r1, #0
    cce4:	movt	r1, #0
    cce8:	movw	r3, #0
    ccec:	movt	r3, #0
    ccf0:	movw	ip, #3665	; 0xe51
    ccf4:	str	ip, [sp]
    ccf8:	bl	0 <coda_set_error>
    ccfc:	mvn	r0, #0
    cd00:	str	r0, [fp, #-12]
    cd04:	b	d1e4 <eval_string+0x25b8>
    cd08:	ldr	r0, [fp, #8]
    cd0c:	ldr	r0, [r0]
    cd10:	ldr	r1, [sp, #720]	; 0x2d0
    cd14:	ldr	r2, [fp, #-28]	; 0xffffffe4
    cd18:	ldr	r2, [r2]
    cd1c:	bl	0 <memcpy>
    cd20:	b	d1dc <eval_string+0x25b0>
    cd24:	ldr	r0, [fp, #-16]
    cd28:	ldr	r0, [r0]
    cd2c:	movw	r1, #0
    cd30:	cmp	r0, r1
    cd34:	beq	cd3c <eval_string+0x2110>
    cd38:	b	cd5c <eval_string+0x2130>
    cd3c:	movw	r0, #0
    cd40:	movt	r0, #0
    cd44:	movw	r1, #0
    cd48:	movt	r1, #0
    cd4c:	movw	r2, #3676	; 0xe5c
    cd50:	movw	r3, #0
    cd54:	movt	r3, #0
    cd58:	bl	0 <__assert_fail>
    cd5c:	ldr	r0, [fp, #-16]
    cd60:	ldr	r0, [r0]
    cd64:	ldr	r0, [r0]
    cd68:	add	r1, sp, #716	; 0x2cc
    cd6c:	bl	0 <coda_get_product_type>
    cd70:	cmp	r0, #0
    cd74:	beq	cd84 <eval_string+0x2158>
    cd78:	mvn	r0, #0
    cd7c:	str	r0, [fp, #-12]
    cd80:	b	d1e4 <eval_string+0x25b8>
    cd84:	ldr	r0, [fp, #-24]	; 0xffffffe8
    cd88:	movw	r1, #0
    cd8c:	str	r1, [r0]
    cd90:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cd94:	str	r1, [r0]
    cd98:	ldr	r0, [sp, #716]	; 0x2cc
    cd9c:	cmp	r0, r1
    cda0:	beq	ce30 <eval_string+0x2204>
    cda4:	ldr	r0, [sp, #716]	; 0x2cc
    cda8:	bl	0 <strlen>
    cdac:	ldr	lr, [fp, #-28]	; 0xffffffe4
    cdb0:	str	r0, [lr]
    cdb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cdb8:	ldr	r0, [r0]
    cdbc:	add	r0, r0, #1
    cdc0:	bl	0 <malloc>
    cdc4:	ldr	lr, [fp, #8]
    cdc8:	str	r0, [lr]
    cdcc:	ldr	r0, [fp, #8]
    cdd0:	ldr	r0, [r0]
    cdd4:	movw	lr, #0
    cdd8:	cmp	r0, lr
    cddc:	bne	ce18 <eval_string+0x21ec>
    cde0:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cde4:	ldr	r0, [r0]
    cde8:	add	r2, r0, #1
    cdec:	mvn	r0, #0
    cdf0:	movw	r1, #0
    cdf4:	movt	r1, #0
    cdf8:	movw	r3, #0
    cdfc:	movt	r3, #0
    ce00:	movw	ip, #3690	; 0xe6a
    ce04:	str	ip, [sp]
    ce08:	bl	0 <coda_set_error>
    ce0c:	mvn	r0, #0
    ce10:	str	r0, [fp, #-12]
    ce14:	b	d1e4 <eval_string+0x25b8>
    ce18:	ldr	r0, [fp, #8]
    ce1c:	ldr	r0, [r0]
    ce20:	ldr	r1, [sp, #716]	; 0x2cc
    ce24:	ldr	r2, [fp, #-28]	; 0xffffffe4
    ce28:	ldr	r2, [r2]
    ce2c:	bl	0 <memcpy>
    ce30:	b	d1dc <eval_string+0x25b0>
    ce34:	ldr	r0, [fp, #-16]
    ce38:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ce3c:	ldr	r1, [r1, #16]
    ce40:	add	r2, sp, #704	; 0x2c0
    ce44:	bl	96c8 <eval_float>
    ce48:	cmp	r0, #0
    ce4c:	beq	ce5c <eval_string+0x2230>
    ce50:	mvn	r0, #0
    ce54:	str	r0, [fp, #-12]
    ce58:	b	d1e4 <eval_string+0x25b8>
    ce5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    ce60:	ldr	r0, [r0, #20]
    ce64:	movw	r1, #0
    ce68:	cmp	r0, r1
    ce6c:	beq	cf14 <eval_string+0x22e8>
    ce70:	ldr	r0, [fp, #-16]
    ce74:	ldr	r1, [fp, #-32]	; 0xffffffe0
    ce78:	ldr	r1, [r1, #20]
    ce7c:	add	r2, sp, #700	; 0x2bc
    ce80:	add	r3, sp, #696	; 0x2b8
    ce84:	add	ip, sp, #692	; 0x2b4
    ce88:	str	ip, [sp]
    ce8c:	bl	ac2c <eval_string>
    ce90:	cmp	r0, #0
    ce94:	beq	cea4 <eval_string+0x2278>
    ce98:	mvn	r0, #0
    ce9c:	str	r0, [fp, #-12]
    cea0:	b	d1e4 <eval_string+0x25b8>
    cea4:	ldr	r0, [sp, #696]	; 0x2b8
    cea8:	cmp	r0, #0
    ceac:	bge	cecc <eval_string+0x22a0>
    ceb0:	mvn	r0, #400	; 0x190
    ceb4:	movw	r1, #0
    ceb8:	movt	r1, #0
    cebc:	bl	0 <coda_set_error>
    cec0:	mvn	r0, #0
    cec4:	str	r0, [fp, #-12]
    cec8:	b	d1e4 <eval_string+0x25b8>
    cecc:	ldr	r0, [sp, #696]	; 0x2b8
    ced0:	cmp	r0, #0
    ced4:	bne	cef4 <eval_string+0x22c8>
    ced8:	mvn	r0, #400	; 0x190
    cedc:	movw	r1, #0
    cee0:	movt	r1, #0
    cee4:	bl	0 <coda_set_error>
    cee8:	mvn	r0, #0
    ceec:	str	r0, [fp, #-12]
    cef0:	b	d1e4 <eval_string+0x25b8>
    cef4:	ldr	r0, [sp, #692]	; 0x2b4
    cef8:	ldr	r1, [sp, #700]	; 0x2bc
    cefc:	ldr	r2, [sp, #696]	; 0x2b8
    cf00:	add	r1, r1, r2
    cf04:	add	r0, r0, r1
    cf08:	movw	r1, #0
    cf0c:	strb	r1, [r0]
    cf10:	b	cf34 <eval_string+0x2308>
    cf14:	movw	r0, #0
    cf18:	movt	r0, #0
    cf1c:	str	r0, [sp, #692]	; 0x2b4
    cf20:	ldr	r0, [sp, #692]	; 0x2b4
    cf24:	bl	0 <strlen>
    cf28:	str	r0, [sp, #696]	; 0x2b8
    cf2c:	movw	r0, #0
    cf30:	str	r0, [sp, #700]	; 0x2bc
    cf34:	ldr	r0, [sp, #696]	; 0x2b8
    cf38:	add	r0, r0, #1
    cf3c:	bl	0 <malloc>
    cf40:	ldr	lr, [fp, #8]
    cf44:	str	r0, [lr]
    cf48:	ldr	r0, [fp, #8]
    cf4c:	ldr	r0, [r0]
    cf50:	movw	lr, #0
    cf54:	cmp	r0, lr
    cf58:	bne	cfb0 <eval_string+0x2384>
    cf5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cf60:	ldr	r0, [r0, #20]
    cf64:	movw	r1, #0
    cf68:	cmp	r0, r1
    cf6c:	beq	cf78 <eval_string+0x234c>
    cf70:	ldr	r0, [sp, #692]	; 0x2b4
    cf74:	bl	0 <free>
    cf78:	ldr	r0, [fp, #-28]	; 0xffffffe4
    cf7c:	ldr	r0, [r0]
    cf80:	add	r2, r0, #1
    cf84:	mvn	r0, #0
    cf88:	movw	r1, #0
    cf8c:	movt	r1, #0
    cf90:	movw	r3, #0
    cf94:	movt	r3, #0
    cf98:	movw	ip, #3740	; 0xe9c
    cf9c:	str	ip, [sp]
    cfa0:	bl	0 <coda_set_error>
    cfa4:	mvn	r0, #0
    cfa8:	str	r0, [fp, #-12]
    cfac:	b	d1e4 <eval_string+0x25b8>
    cfb0:	vldr	d0, [sp, #704]	; 0x2c0
    cfb4:	ldr	r0, [sp, #692]	; 0x2b4
    cfb8:	ldr	r1, [sp, #700]	; 0x2bc
    cfbc:	add	r0, r0, r1
    cfc0:	ldr	r1, [fp, #8]
    cfc4:	ldr	r1, [r1]
    cfc8:	bl	0 <coda_time_double_to_string>
    cfcc:	cmp	r0, #0
    cfd0:	beq	cffc <eval_string+0x23d0>
    cfd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    cfd8:	ldr	r0, [r0, #20]
    cfdc:	movw	r1, #0
    cfe0:	cmp	r0, r1
    cfe4:	beq	cff0 <eval_string+0x23c4>
    cfe8:	ldr	r0, [sp, #692]	; 0x2b4
    cfec:	bl	0 <free>
    cff0:	mvn	r0, #0
    cff4:	str	r0, [fp, #-12]
    cff8:	b	d1e4 <eval_string+0x25b8>
    cffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    d000:	movw	r1, #0
    d004:	str	r1, [r0]
    d008:	ldr	r0, [fp, #8]
    d00c:	ldr	r0, [r0]
    d010:	str	r1, [sp, #24]
    d014:	bl	0 <strlen>
    d018:	ldr	r1, [fp, #-28]	; 0xffffffe4
    d01c:	str	r0, [r1]
    d020:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d024:	ldr	r0, [r0, #20]
    d028:	ldr	r1, [sp, #24]
    d02c:	cmp	r0, r1
    d030:	beq	d03c <eval_string+0x2410>
    d034:	ldr	r0, [sp, #692]	; 0x2b4
    d038:	bl	0 <free>
    d03c:	b	d1dc <eval_string+0x25b0>
    d040:	ldr	r0, [fp, #-16]
    d044:	ldr	r0, [r0]
    d048:	movw	r1, #0
    d04c:	cmp	r0, r1
    d050:	beq	d058 <eval_string+0x242c>
    d054:	b	d078 <eval_string+0x244c>
    d058:	movw	r0, #0
    d05c:	movt	r0, #0
    d060:	movw	r1, #0
    d064:	movt	r1, #0
    d068:	movw	r2, #3763	; 0xeb3
    d06c:	movw	r3, #0
    d070:	movt	r3, #0
    d074:	bl	0 <__assert_fail>
    d078:	ldr	r0, [fp, #-16]
    d07c:	add	r0, r0, #8
    d080:	add	r1, sp, #168	; 0xa8
    d084:	str	r0, [sp, #20]
    d088:	mov	r0, r1
    d08c:	ldr	r1, [sp, #20]
    d090:	movw	r2, #520	; 0x208
    d094:	bl	0 <memcpy>
    d098:	ldr	r0, [fp, #-16]
    d09c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    d0a0:	ldr	r1, [r1, #16]
    d0a4:	bl	d2e4 <eval_cursor>
    d0a8:	cmp	r0, #0
    d0ac:	beq	d0bc <eval_string+0x2490>
    d0b0:	mvn	r0, #0
    d0b4:	str	r0, [fp, #-12]
    d0b8:	b	d1e4 <eval_string+0x25b8>
    d0bc:	ldr	r0, [fp, #-16]
    d0c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    d0c4:	ldr	r1, [r1, #20]
    d0c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
    d0cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d0d0:	ldr	ip, [fp, #8]
    d0d4:	str	ip, [sp]
    d0d8:	bl	ac2c <eval_string>
    d0dc:	cmp	r0, #0
    d0e0:	beq	d0f0 <eval_string+0x24c4>
    d0e4:	mvn	r0, #0
    d0e8:	str	r0, [fp, #-12]
    d0ec:	b	d1e4 <eval_string+0x25b8>
    d0f0:	ldr	r0, [fp, #-16]
    d0f4:	add	r0, r0, #8
    d0f8:	add	r1, sp, #168	; 0xa8
    d0fc:	movw	r2, #520	; 0x208
    d100:	bl	0 <memcpy>
    d104:	b	d1dc <eval_string+0x25b0>
    d108:	ldr	r0, [fp, #-32]	; 0xffffffe0
    d10c:	ldr	r0, [r0, #12]
    d110:	ldrb	r0, [r0]
    d114:	sub	r0, r0, #105	; 0x69
    d118:	str	r0, [sp, #156]	; 0x9c
    d11c:	ldr	r0, [fp, #-16]
    d120:	ldr	r1, [sp, #156]	; 0x9c
    d124:	add	r0, r0, r1, lsl #3
    d128:	ldr	r1, [r0, #528]	; 0x210
    d12c:	ldr	r0, [r0, #532]	; 0x214
    d130:	str	r0, [sp, #164]	; 0xa4
    d134:	str	r1, [sp, #160]	; 0xa0
    d138:	ldr	r0, [fp, #-16]
    d13c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    d140:	ldr	r1, [r1, #16]
    d144:	add	r2, r0, #528	; 0x210
    d148:	ldr	r3, [sp, #156]	; 0x9c
    d14c:	add	r2, r2, r3, lsl #3
    d150:	bl	70a8 <eval_integer>
    d154:	cmp	r0, #0
    d158:	beq	d168 <eval_string+0x253c>
    d15c:	mvn	r0, #0
    d160:	str	r0, [fp, #-12]
    d164:	b	d1e4 <eval_string+0x25b8>
    d168:	ldr	r0, [fp, #-16]
    d16c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    d170:	ldr	r1, [r1, #20]
    d174:	ldr	r2, [fp, #-24]	; 0xffffffe8
    d178:	ldr	r3, [fp, #-28]	; 0xffffffe4
    d17c:	ldr	ip, [fp, #8]
    d180:	str	ip, [sp]
    d184:	bl	ac2c <eval_string>
    d188:	cmp	r0, #0
    d18c:	beq	d19c <eval_string+0x2570>
    d190:	mvn	r0, #0
    d194:	str	r0, [fp, #-12]
    d198:	b	d1e4 <eval_string+0x25b8>
    d19c:	ldr	r0, [sp, #160]	; 0xa0
    d1a0:	ldr	r1, [sp, #164]	; 0xa4
    d1a4:	ldr	r2, [fp, #-16]
    d1a8:	ldr	r3, [sp, #156]	; 0x9c
    d1ac:	add	r2, r2, r3, lsl #3
    d1b0:	str	r1, [r2, #532]	; 0x214
    d1b4:	str	r0, [r2, #528]	; 0x210
    d1b8:	b	d1dc <eval_string+0x25b0>
    d1bc:	movw	r0, #0
    d1c0:	movt	r0, #0
    d1c4:	movw	r1, #0
    d1c8:	movt	r1, #0
    d1cc:	movw	r2, #3794	; 0xed2
    d1d0:	movw	r3, #0
    d1d4:	movt	r3, #0
    d1d8:	bl	0 <__assert_fail>
    d1dc:	movw	r0, #0
    d1e0:	str	r0, [fp, #-12]
    d1e4:	ldr	r0, [fp, #-12]
    d1e8:	sub	sp, fp, #8
    d1ec:	pop	{r4, sl, fp, pc}

0000d1f0 <coda_expression_eval_node>:
    d1f0:	push	{r4, r5, fp, lr}
    d1f4:	add	fp, sp, #8
    d1f8:	sub	sp, sp, #584	; 0x248
    d1fc:	str	r0, [fp, #-16]
    d200:	str	r1, [fp, #-20]	; 0xffffffec
    d204:	ldr	r0, [fp, #-16]
    d208:	ldr	r0, [r0, #4]
    d20c:	cmp	r0, #4
    d210:	beq	d230 <coda_expression_eval_node+0x40>
    d214:	mvn	r0, #99	; 0x63
    d218:	movw	r1, #0
    d21c:	movt	r1, #0
    d220:	bl	0 <coda_set_error>
    d224:	mvn	r0, #0
    d228:	str	r0, [fp, #-12]
    d22c:	b	d2d8 <coda_expression_eval_node+0xe8>
    d230:	ldr	r0, [fp, #-20]	; 0xffffffec
    d234:	movw	r1, #0
    d238:	cmp	r0, r1
    d23c:	bne	d25c <coda_expression_eval_node+0x6c>
    d240:	mvn	r0, #99	; 0x63
    d244:	movw	r1, #0
    d248:	movt	r1, #0
    d24c:	bl	0 <coda_set_error>
    d250:	mvn	r0, #0
    d254:	str	r0, [fp, #-12]
    d258:	b	d2d8 <coda_expression_eval_node+0xe8>
    d25c:	ldr	r1, [fp, #-20]	; 0xffffffec
    d260:	mov	r0, sp
    d264:	bl	c14 <init_eval_info>
    d268:	ldr	r1, [fp, #-16]
    d26c:	mov	r0, sp
    d270:	bl	d2e4 <eval_cursor>
    d274:	cmp	r0, #0
    d278:	beq	d2bc <coda_expression_eval_node+0xcc>
    d27c:	ldr	r0, [fp, #-20]	; 0xffffffec
    d280:	movw	r1, #0
    d284:	cmp	r0, r1
    d288:	beq	d2b0 <coda_expression_eval_node+0xc0>
    d28c:	ldr	r0, [fp, #-20]	; 0xffffffec
    d290:	mov	r1, sp
    d294:	add	r1, r1, #8
    d298:	bl	0 <coda_cursor_compare>
    d29c:	cmp	r0, #0
    d2a0:	beq	d2b0 <coda_expression_eval_node+0xc0>
    d2a4:	mov	r0, sp
    d2a8:	add	r0, r0, #8
    d2ac:	bl	0 <coda_cursor_add_to_error_message>
    d2b0:	mvn	r0, #0
    d2b4:	str	r0, [fp, #-12]
    d2b8:	b	d2d8 <coda_expression_eval_node+0xe8>
    d2bc:	ldr	r0, [fp, #-20]	; 0xffffffec
    d2c0:	mov	r1, sp
    d2c4:	add	r1, r1, #8
    d2c8:	movw	r2, #520	; 0x208
    d2cc:	bl	0 <memcpy>
    d2d0:	movw	r0, #0
    d2d4:	str	r0, [fp, #-12]
    d2d8:	ldr	r0, [fp, #-12]
    d2dc:	sub	sp, fp, #8
    d2e0:	pop	{r4, r5, fp, pc}

0000d2e4 <eval_cursor>:
    d2e4:	push	{fp, lr}
    d2e8:	mov	fp, sp
    d2ec:	sub	sp, sp, #72	; 0x48
    d2f0:	str	r0, [fp, #-8]
    d2f4:	str	r1, [fp, #-12]
    d2f8:	ldr	r0, [fp, #-8]
    d2fc:	ldr	r0, [r0]
    d300:	movw	r1, #0
    d304:	cmp	r0, r1
    d308:	beq	d310 <eval_cursor+0x2c>
    d30c:	b	d330 <eval_cursor+0x4c>
    d310:	movw	r0, #0
    d314:	movt	r0, #0
    d318:	movw	r1, #0
    d31c:	movt	r1, #0
    d320:	movw	r2, #3913	; 0xf49
    d324:	movw	r3, #0
    d328:	movt	r3, #0
    d32c:	bl	0 <__assert_fail>
    d330:	ldr	r0, [fp, #-12]
    d334:	str	r0, [fp, #-16]
    d338:	ldr	r0, [fp, #-16]
    d33c:	ldr	r0, [r0]
    d340:	sub	r0, r0, #10
    d344:	cmp	r0, #28
    d348:	str	r0, [sp, #20]
    d34c:	bhi	d870 <eval_cursor+0x58c>
    d350:	add	r0, pc, #8
    d354:	ldr	r1, [sp, #20]
    d358:	ldr	r0, [r0, r1, lsl #2]
    d35c:	mov	pc, r0
    d360:	.word	0x0000d7ec
    d364:	.word	0x0000d870
    d368:	.word	0x0000d870
    d36c:	.word	0x0000d870
    d370:	.word	0x0000d870
    d374:	.word	0x0000d870
    d378:	.word	0x0000d870
    d37c:	.word	0x0000d870
    d380:	.word	0x0000d870
    d384:	.word	0x0000d870
    d388:	.word	0x0000d870
    d38c:	.word	0x0000d870
    d390:	.word	0x0000d870
    d394:	.word	0x0000d870
    d398:	.word	0x0000d870
    d39c:	.word	0x0000d870
    d3a0:	.word	0x0000d870
    d3a4:	.word	0x0000d870
    d3a8:	.word	0x0000d870
    d3ac:	.word	0x0000d870
    d3b0:	.word	0x0000d870
    d3b4:	.word	0x0000d870
    d3b8:	.word	0x0000d548
    d3bc:	.word	0x0000d764
    d3c0:	.word	0x0000d3d8
    d3c4:	.word	0x0000d424
    d3c8:	.word	0x0000d3d4
    d3cc:	.word	0x0000d704
    d3d0:	.word	0x0000d3f4
    d3d4:	b	d890 <eval_cursor+0x5ac>
    d3d8:	ldr	r0, [fp, #-8]
    d3dc:	add	r0, r0, #8
    d3e0:	ldr	r1, [fp, #-8]
    d3e4:	ldr	r1, [r1]
    d3e8:	movw	r2, #520	; 0x208
    d3ec:	bl	0 <memcpy>
    d3f0:	b	d890 <eval_cursor+0x5ac>
    d3f4:	ldr	r0, [fp, #-8]
    d3f8:	add	r0, r0, #8
    d3fc:	ldr	r1, [fp, #-8]
    d400:	ldr	r1, [r1]
    d404:	ldr	r1, [r1]
    d408:	bl	0 <coda_cursor_set_product>
    d40c:	cmp	r0, #0
    d410:	beq	d420 <eval_cursor+0x13c>
    d414:	mvn	r0, #0
    d418:	str	r0, [fp, #-4]
    d41c:	b	d898 <eval_cursor+0x5b4>
    d420:	b	d890 <eval_cursor+0x5ac>
    d424:	ldr	r0, [fp, #-16]
    d428:	ldr	r0, [r0, #16]
    d42c:	movw	r1, #0
    d430:	cmp	r0, r1
    d434:	beq	d460 <eval_cursor+0x17c>
    d438:	ldr	r0, [fp, #-8]
    d43c:	ldr	r1, [fp, #-16]
    d440:	ldr	r1, [r1, #16]
    d444:	bl	d2e4 <eval_cursor>
    d448:	cmp	r0, #0
    d44c:	beq	d45c <eval_cursor+0x178>
    d450:	mvn	r0, #0
    d454:	str	r0, [fp, #-4]
    d458:	b	d898 <eval_cursor+0x5b4>
    d45c:	b	d460 <eval_cursor+0x17c>
    d460:	ldr	r0, [fp, #-8]
    d464:	add	r0, r0, #8
    d468:	sub	r1, fp, #20
    d46c:	bl	0 <coda_cursor_get_type_class>
    d470:	cmp	r0, #0
    d474:	beq	d484 <eval_cursor+0x1a0>
    d478:	mvn	r0, #0
    d47c:	str	r0, [fp, #-4]
    d480:	b	d898 <eval_cursor+0x5b4>
    d484:	ldr	r0, [fp, #-20]	; 0xffffffec
    d488:	cmp	r0, #6
    d48c:	bne	d4b4 <eval_cursor+0x1d0>
    d490:	ldr	r0, [fp, #-8]
    d494:	add	r0, r0, #8
    d498:	bl	0 <coda_cursor_use_base_type_of_special_type>
    d49c:	cmp	r0, #0
    d4a0:	beq	d4b0 <eval_cursor+0x1cc>
    d4a4:	mvn	r0, #0
    d4a8:	str	r0, [fp, #-4]
    d4ac:	b	d898 <eval_cursor+0x5b4>
    d4b0:	b	d4b4 <eval_cursor+0x1d0>
    d4b4:	ldr	r0, [fp, #-16]
    d4b8:	ldr	r0, [r0, #12]
    d4bc:	movw	r1, #0
    d4c0:	cmp	r0, r1
    d4c4:	beq	d4f4 <eval_cursor+0x210>
    d4c8:	ldr	r0, [fp, #-8]
    d4cc:	add	r0, r0, #8
    d4d0:	ldr	r1, [fp, #-16]
    d4d4:	ldr	r1, [r1, #12]
    d4d8:	bl	0 <coda_cursor_goto_record_field_by_name>
    d4dc:	cmp	r0, #0
    d4e0:	beq	d4f0 <eval_cursor+0x20c>
    d4e4:	mvn	r0, #0
    d4e8:	str	r0, [fp, #-4]
    d4ec:	b	d898 <eval_cursor+0x5b4>
    d4f0:	b	d544 <eval_cursor+0x260>
    d4f4:	ldr	r0, [fp, #-8]
    d4f8:	ldr	r1, [fp, #-16]
    d4fc:	ldr	r1, [r1, #20]
    d500:	sub	r2, fp, #32
    d504:	bl	70a8 <eval_integer>
    d508:	cmp	r0, #0
    d50c:	beq	d51c <eval_cursor+0x238>
    d510:	mvn	r0, #0
    d514:	str	r0, [fp, #-4]
    d518:	b	d898 <eval_cursor+0x5b4>
    d51c:	ldr	r0, [fp, #-8]
    d520:	add	r0, r0, #8
    d524:	ldr	r1, [fp, #-32]	; 0xffffffe0
    d528:	bl	0 <coda_cursor_goto_record_field_by_index>
    d52c:	cmp	r0, #0
    d530:	beq	d540 <eval_cursor+0x25c>
    d534:	mvn	r0, #0
    d538:	str	r0, [fp, #-4]
    d53c:	b	d898 <eval_cursor+0x5b4>
    d540:	b	d544 <eval_cursor+0x260>
    d544:	b	d890 <eval_cursor+0x5ac>
    d548:	ldr	r0, [fp, #-16]
    d54c:	ldr	r0, [r0, #16]
    d550:	movw	r1, #0
    d554:	cmp	r0, r1
    d558:	beq	d584 <eval_cursor+0x2a0>
    d55c:	ldr	r0, [fp, #-8]
    d560:	ldr	r1, [fp, #-16]
    d564:	ldr	r1, [r1, #16]
    d568:	bl	d2e4 <eval_cursor>
    d56c:	cmp	r0, #0
    d570:	beq	d580 <eval_cursor+0x29c>
    d574:	mvn	r0, #0
    d578:	str	r0, [fp, #-4]
    d57c:	b	d898 <eval_cursor+0x5b4>
    d580:	b	d5b4 <eval_cursor+0x2d0>
    d584:	ldr	r0, [fp, #-8]
    d588:	add	r0, r0, #8
    d58c:	ldr	r1, [fp, #-8]
    d590:	ldr	r1, [r1]
    d594:	ldr	r1, [r1]
    d598:	bl	0 <coda_cursor_set_product>
    d59c:	cmp	r0, #0
    d5a0:	beq	d5b0 <eval_cursor+0x2cc>
    d5a4:	mvn	r0, #0
    d5a8:	str	r0, [fp, #-4]
    d5ac:	b	d898 <eval_cursor+0x5b4>
    d5b0:	b	d5b4 <eval_cursor+0x2d0>
    d5b4:	ldr	r0, [fp, #-8]
    d5b8:	ldr	r1, [fp, #-16]
    d5bc:	ldr	r1, [r1, #20]
    d5c0:	add	r2, sp, #32
    d5c4:	bl	70a8 <eval_integer>
    d5c8:	cmp	r0, #0
    d5cc:	beq	d5dc <eval_cursor+0x2f8>
    d5d0:	mvn	r0, #0
    d5d4:	str	r0, [fp, #-4]
    d5d8:	b	d898 <eval_cursor+0x5b4>
    d5dc:	ldr	r0, [pc, #704]	; d8a4 <eval_cursor+0x5c0>
    d5e0:	ldr	r0, [pc, r0]
    d5e4:	str	r0, [sp, #16]
    d5e8:	bl	0 <__aeabi_read_tp>
    d5ec:	ldr	ip, [sp, #16]
    d5f0:	ldr	r0, [r0, ip]
    d5f4:	cmp	r0, #0
    d5f8:	bne	d6dc <eval_cursor+0x3f8>
    d5fc:	ldr	r0, [fp, #-8]
    d600:	add	r0, r0, #8
    d604:	add	r1, sp, #24
    d608:	bl	0 <coda_cursor_get_type_class>
    d60c:	cmp	r0, #0
    d610:	beq	d620 <eval_cursor+0x33c>
    d614:	mvn	r0, #0
    d618:	str	r0, [fp, #-4]
    d61c:	b	d898 <eval_cursor+0x5b4>
    d620:	ldr	r0, [sp, #24]
    d624:	cmp	r0, #1
    d628:	beq	d65c <eval_cursor+0x378>
    d62c:	ldr	r0, [sp, #24]
    d630:	bl	0 <coda_type_get_class_name>
    d634:	mvn	lr, #104	; 0x68
    d638:	str	r0, [sp, #12]
    d63c:	mov	r0, lr
    d640:	movw	r1, #0
    d644:	movt	r1, #0
    d648:	ldr	r2, [sp, #12]
    d64c:	bl	0 <coda_set_error>
    d650:	mvn	r0, #0
    d654:	str	r0, [fp, #-4]
    d658:	b	d898 <eval_cursor+0x5b4>
    d65c:	ldr	r0, [fp, #-8]
    d660:	add	r0, r0, #8
    d664:	add	r1, sp, #28
    d668:	bl	0 <coda_cursor_get_num_elements>
    d66c:	cmp	r0, #0
    d670:	beq	d680 <eval_cursor+0x39c>
    d674:	mvn	r0, #0
    d678:	str	r0, [fp, #-4]
    d67c:	b	d898 <eval_cursor+0x5b4>
    d680:	ldr	r0, [sp, #36]	; 0x24
    d684:	cmp	r0, #0
    d688:	blt	d6b4 <eval_cursor+0x3d0>
    d68c:	b	d690 <eval_cursor+0x3ac>
    d690:	ldr	r0, [sp, #32]
    d694:	ldr	r1, [sp, #36]	; 0x24
    d698:	ldr	r2, [sp, #28]
    d69c:	subs	r0, r0, r2
    d6a0:	sbcs	r1, r1, r2, asr #31
    d6a4:	str	r0, [sp, #8]
    d6a8:	str	r1, [sp, #4]
    d6ac:	blt	d6d8 <eval_cursor+0x3f4>
    d6b0:	b	d6b4 <eval_cursor+0x3d0>
    d6b4:	ldr	r2, [sp, #32]
    d6b8:	ldr	r3, [sp, #28]
    d6bc:	mvn	r0, #106	; 0x6a
    d6c0:	movw	r1, #0
    d6c4:	movt	r1, #0
    d6c8:	bl	0 <coda_set_error>
    d6cc:	mvn	r0, #0
    d6d0:	str	r0, [fp, #-4]
    d6d4:	b	d898 <eval_cursor+0x5b4>
    d6d8:	b	d6dc <eval_cursor+0x3f8>
    d6dc:	ldr	r0, [fp, #-8]
    d6e0:	add	r0, r0, #8
    d6e4:	ldr	r1, [sp, #32]
    d6e8:	bl	0 <coda_cursor_goto_array_element_by_index>
    d6ec:	cmp	r0, #0
    d6f0:	beq	d700 <eval_cursor+0x41c>
    d6f4:	mvn	r0, #0
    d6f8:	str	r0, [fp, #-4]
    d6fc:	b	d898 <eval_cursor+0x5b4>
    d700:	b	d890 <eval_cursor+0x5ac>
    d704:	ldr	r0, [fp, #-16]
    d708:	ldr	r0, [r0, #16]
    d70c:	movw	r1, #0
    d710:	cmp	r0, r1
    d714:	beq	d740 <eval_cursor+0x45c>
    d718:	ldr	r0, [fp, #-8]
    d71c:	ldr	r1, [fp, #-16]
    d720:	ldr	r1, [r1, #16]
    d724:	bl	d2e4 <eval_cursor>
    d728:	cmp	r0, #0
    d72c:	beq	d73c <eval_cursor+0x458>
    d730:	mvn	r0, #0
    d734:	str	r0, [fp, #-4]
    d738:	b	d898 <eval_cursor+0x5b4>
    d73c:	b	d740 <eval_cursor+0x45c>
    d740:	ldr	r0, [fp, #-8]
    d744:	add	r0, r0, #8
    d748:	bl	0 <coda_cursor_goto_parent>
    d74c:	cmp	r0, #0
    d750:	beq	d760 <eval_cursor+0x47c>
    d754:	mvn	r0, #0
    d758:	str	r0, [fp, #-4]
    d75c:	b	d898 <eval_cursor+0x5b4>
    d760:	b	d890 <eval_cursor+0x5ac>
    d764:	ldr	r0, [fp, #-16]
    d768:	ldr	r0, [r0, #16]
    d76c:	movw	r1, #0
    d770:	cmp	r0, r1
    d774:	beq	d7a0 <eval_cursor+0x4bc>
    d778:	ldr	r0, [fp, #-8]
    d77c:	ldr	r1, [fp, #-16]
    d780:	ldr	r1, [r1, #16]
    d784:	bl	d2e4 <eval_cursor>
    d788:	cmp	r0, #0
    d78c:	beq	d79c <eval_cursor+0x4b8>
    d790:	mvn	r0, #0
    d794:	str	r0, [fp, #-4]
    d798:	b	d898 <eval_cursor+0x5b4>
    d79c:	b	d7a0 <eval_cursor+0x4bc>
    d7a0:	ldr	r0, [fp, #-8]
    d7a4:	add	r0, r0, #8
    d7a8:	bl	0 <coda_cursor_goto_attributes>
    d7ac:	cmp	r0, #0
    d7b0:	beq	d7c0 <eval_cursor+0x4dc>
    d7b4:	mvn	r0, #0
    d7b8:	str	r0, [fp, #-4]
    d7bc:	b	d898 <eval_cursor+0x5b4>
    d7c0:	ldr	r0, [fp, #-8]
    d7c4:	add	r0, r0, #8
    d7c8:	ldr	r1, [fp, #-16]
    d7cc:	ldr	r1, [r1, #12]
    d7d0:	bl	0 <coda_cursor_goto_record_field_by_name>
    d7d4:	cmp	r0, #0
    d7d8:	beq	d7e8 <eval_cursor+0x504>
    d7dc:	mvn	r0, #0
    d7e0:	str	r0, [fp, #-4]
    d7e4:	b	d898 <eval_cursor+0x5b4>
    d7e8:	b	d890 <eval_cursor+0x5ac>
    d7ec:	ldr	r0, [fp, #-8]
    d7f0:	ldr	r0, [r0]
    d7f4:	ldr	r0, [r0]
    d7f8:	ldr	r0, [r0, #16]
    d7fc:	cmp	r0, #0
    d800:	beq	d840 <eval_cursor+0x55c>
    d804:	ldr	r0, [fp, #-8]
    d808:	ldr	r0, [r0]
    d80c:	ldr	r0, [r0]
    d810:	ldr	r0, [r0, #16]
    d814:	bl	0 <coda_type_get_format_name>
    d818:	mvn	lr, #400	; 0x190
    d81c:	str	r0, [sp]
    d820:	mov	r0, lr
    d824:	movw	r1, #0
    d828:	movt	r1, #0
    d82c:	ldr	r2, [sp]
    d830:	bl	0 <coda_set_error>
    d834:	mvn	r0, #0
    d838:	str	r0, [fp, #-4]
    d83c:	b	d898 <eval_cursor+0x5b4>
    d840:	ldr	r0, [fp, #-8]
    d844:	add	r0, r0, #8
    d848:	ldr	r1, [fp, #-8]
    d84c:	ldr	r1, [r1]
    d850:	ldr	r1, [r1]
    d854:	bl	0 <coda_ascii_cursor_set_asciilines>
    d858:	cmp	r0, #0
    d85c:	beq	d86c <eval_cursor+0x588>
    d860:	mvn	r0, #0
    d864:	str	r0, [fp, #-4]
    d868:	b	d898 <eval_cursor+0x5b4>
    d86c:	b	d890 <eval_cursor+0x5ac>
    d870:	movw	r0, #0
    d874:	movt	r0, #0
    d878:	movw	r1, #0
    d87c:	movt	r1, #0
    d880:	movw	r2, #4079	; 0xfef
    d884:	movw	r3, #0
    d888:	movt	r3, #0
    d88c:	bl	0 <__assert_fail>
    d890:	movw	r0, #0
    d894:	str	r0, [fp, #-4]
    d898:	ldr	r0, [fp, #-4]
    d89c:	mov	sp, fp
    d8a0:	pop	{fp, pc}
    d8a4:	.word	0x000002bc

0000d8a8 <decode_escaped_string>:
    d8a8:	push	{fp, lr}
    d8ac:	mov	fp, sp
    d8b0:	sub	sp, sp, #24
    d8b4:	str	r0, [fp, #-8]
    d8b8:	ldr	r0, [fp, #-8]
    d8bc:	movw	r1, #0
    d8c0:	cmp	r0, r1
    d8c4:	bne	d8d4 <decode_escaped_string+0x2c>
    d8c8:	movw	r0, #0
    d8cc:	str	r0, [fp, #-4]
    d8d0:	b	ddd8 <decode_escaped_string+0x530>
    d8d4:	movw	r0, #0
    d8d8:	str	r0, [sp, #12]
    d8dc:	str	r0, [sp, #8]
    d8e0:	ldr	r0, [fp, #-8]
    d8e4:	ldr	r1, [sp, #12]
    d8e8:	add	r0, r0, r1
    d8ec:	ldrb	r0, [r0]
    d8f0:	cmp	r0, #0
    d8f4:	beq	ddbc <decode_escaped_string+0x514>
    d8f8:	ldr	r0, [fp, #-8]
    d8fc:	ldr	r1, [sp, #12]
    d900:	add	r0, r0, r1
    d904:	ldrb	r0, [r0]
    d908:	cmp	r0, #92	; 0x5c
    d90c:	bne	dd84 <decode_escaped_string+0x4dc>
    d910:	ldr	r0, [sp, #12]
    d914:	add	r0, r0, #1
    d918:	str	r0, [sp, #12]
    d91c:	ldr	r0, [fp, #-8]
    d920:	ldr	r1, [sp, #12]
    d924:	ldrb	r0, [r0, r1]
    d928:	sub	r0, r0, #34	; 0x22
    d92c:	cmp	r0, #84	; 0x54
    d930:	str	r0, [sp, #4]
    d934:	bhi	dbfc <decode_escaped_string+0x354>
    d938:	add	r0, pc, #8
    d93c:	ldr	r1, [sp, #4]
    d940:	ldr	r0, [r0, r1, lsl #2]
    d944:	mov	pc, r0
    d948:	.word	0x0000dbbc
    d94c:	.word	0x0000dbfc
    d950:	.word	0x0000dbfc
    d954:	.word	0x0000dbfc
    d958:	.word	0x0000dbfc
    d95c:	.word	0x0000dbdc
    d960:	.word	0x0000dbfc
    d964:	.word	0x0000dbfc
    d968:	.word	0x0000dbfc
    d96c:	.word	0x0000dbfc
    d970:	.word	0x0000dbfc
    d974:	.word	0x0000dbfc
    d978:	.word	0x0000dbfc
    d97c:	.word	0x0000dbfc
    d980:	.word	0x0000dbfc
    d984:	.word	0x0000dbfc
    d988:	.word	0x0000dbfc
    d98c:	.word	0x0000dbfc
    d990:	.word	0x0000dbfc
    d994:	.word	0x0000dbfc
    d998:	.word	0x0000dbfc
    d99c:	.word	0x0000dbfc
    d9a0:	.word	0x0000dbfc
    d9a4:	.word	0x0000dbfc
    d9a8:	.word	0x0000dbfc
    d9ac:	.word	0x0000dbfc
    d9b0:	.word	0x0000dbfc
    d9b4:	.word	0x0000dbfc
    d9b8:	.word	0x0000dbfc
    d9bc:	.word	0x0000dbfc
    d9c0:	.word	0x0000dbfc
    d9c4:	.word	0x0000dbfc
    d9c8:	.word	0x0000dbfc
    d9cc:	.word	0x0000dbfc
    d9d0:	.word	0x0000dbfc
    d9d4:	.word	0x0000dbfc
    d9d8:	.word	0x0000dbfc
    d9dc:	.word	0x0000dbfc
    d9e0:	.word	0x0000dbfc
    d9e4:	.word	0x0000dbfc
    d9e8:	.word	0x0000dbfc
    d9ec:	.word	0x0000dbfc
    d9f0:	.word	0x0000dbfc
    d9f4:	.word	0x0000dbfc
    d9f8:	.word	0x0000dbfc
    d9fc:	.word	0x0000dbfc
    da00:	.word	0x0000dbfc
    da04:	.word	0x0000dbfc
    da08:	.word	0x0000dbfc
    da0c:	.word	0x0000dbfc
    da10:	.word	0x0000dbfc
    da14:	.word	0x0000dbfc
    da18:	.word	0x0000dbfc
    da1c:	.word	0x0000dbfc
    da20:	.word	0x0000dbfc
    da24:	.word	0x0000dbfc
    da28:	.word	0x0000dbfc
    da2c:	.word	0x0000dbfc
    da30:	.word	0x0000db9c
    da34:	.word	0x0000dbfc
    da38:	.word	0x0000dbfc
    da3c:	.word	0x0000dbfc
    da40:	.word	0x0000dbfc
    da44:	.word	0x0000dabc
    da48:	.word	0x0000dadc
    da4c:	.word	0x0000dbfc
    da50:	.word	0x0000dbfc
    da54:	.word	0x0000da9c
    da58:	.word	0x0000dafc
    da5c:	.word	0x0000dbfc
    da60:	.word	0x0000dbfc
    da64:	.word	0x0000dbfc
    da68:	.word	0x0000dbfc
    da6c:	.word	0x0000dbfc
    da70:	.word	0x0000dbfc
    da74:	.word	0x0000dbfc
    da78:	.word	0x0000db1c
    da7c:	.word	0x0000dbfc
    da80:	.word	0x0000dbfc
    da84:	.word	0x0000dbfc
    da88:	.word	0x0000db3c
    da8c:	.word	0x0000dbfc
    da90:	.word	0x0000db5c
    da94:	.word	0x0000dbfc
    da98:	.word	0x0000db7c
    da9c:	ldr	r0, [fp, #-8]
    daa0:	ldr	r1, [sp, #8]
    daa4:	add	r2, r1, #1
    daa8:	str	r2, [sp, #8]
    daac:	add	r0, r0, r1
    dab0:	movw	r1, #27
    dab4:	strb	r1, [r0]
    dab8:	b	dd80 <decode_escaped_string+0x4d8>
    dabc:	ldr	r0, [fp, #-8]
    dac0:	ldr	r1, [sp, #8]
    dac4:	add	r2, r1, #1
    dac8:	str	r2, [sp, #8]
    dacc:	add	r0, r0, r1
    dad0:	movw	r1, #7
    dad4:	strb	r1, [r0]
    dad8:	b	dd80 <decode_escaped_string+0x4d8>
    dadc:	ldr	r0, [fp, #-8]
    dae0:	ldr	r1, [sp, #8]
    dae4:	add	r2, r1, #1
    dae8:	str	r2, [sp, #8]
    daec:	add	r0, r0, r1
    daf0:	movw	r1, #8
    daf4:	strb	r1, [r0]
    daf8:	b	dd80 <decode_escaped_string+0x4d8>
    dafc:	ldr	r0, [fp, #-8]
    db00:	ldr	r1, [sp, #8]
    db04:	add	r2, r1, #1
    db08:	str	r2, [sp, #8]
    db0c:	add	r0, r0, r1
    db10:	movw	r1, #12
    db14:	strb	r1, [r0]
    db18:	b	dd80 <decode_escaped_string+0x4d8>
    db1c:	ldr	r0, [fp, #-8]
    db20:	ldr	r1, [sp, #8]
    db24:	add	r2, r1, #1
    db28:	str	r2, [sp, #8]
    db2c:	add	r0, r0, r1
    db30:	movw	r1, #10
    db34:	strb	r1, [r0]
    db38:	b	dd80 <decode_escaped_string+0x4d8>
    db3c:	ldr	r0, [fp, #-8]
    db40:	ldr	r1, [sp, #8]
    db44:	add	r2, r1, #1
    db48:	str	r2, [sp, #8]
    db4c:	add	r0, r0, r1
    db50:	movw	r1, #13
    db54:	strb	r1, [r0]
    db58:	b	dd80 <decode_escaped_string+0x4d8>
    db5c:	ldr	r0, [fp, #-8]
    db60:	ldr	r1, [sp, #8]
    db64:	add	r2, r1, #1
    db68:	str	r2, [sp, #8]
    db6c:	add	r0, r0, r1
    db70:	movw	r1, #9
    db74:	strb	r1, [r0]
    db78:	b	dd80 <decode_escaped_string+0x4d8>
    db7c:	ldr	r0, [fp, #-8]
    db80:	ldr	r1, [sp, #8]
    db84:	add	r2, r1, #1
    db88:	str	r2, [sp, #8]
    db8c:	add	r0, r0, r1
    db90:	movw	r1, #11
    db94:	strb	r1, [r0]
    db98:	b	dd80 <decode_escaped_string+0x4d8>
    db9c:	ldr	r0, [fp, #-8]
    dba0:	ldr	r1, [sp, #8]
    dba4:	add	r2, r1, #1
    dba8:	str	r2, [sp, #8]
    dbac:	add	r0, r0, r1
    dbb0:	movw	r1, #92	; 0x5c
    dbb4:	strb	r1, [r0]
    dbb8:	b	dd80 <decode_escaped_string+0x4d8>
    dbbc:	ldr	r0, [fp, #-8]
    dbc0:	ldr	r1, [sp, #8]
    dbc4:	add	r2, r1, #1
    dbc8:	str	r2, [sp, #8]
    dbcc:	add	r0, r0, r1
    dbd0:	movw	r1, #34	; 0x22
    dbd4:	strb	r1, [r0]
    dbd8:	b	dd80 <decode_escaped_string+0x4d8>
    dbdc:	ldr	r0, [fp, #-8]
    dbe0:	ldr	r1, [sp, #8]
    dbe4:	add	r2, r1, #1
    dbe8:	str	r2, [sp, #8]
    dbec:	add	r0, r0, r1
    dbf0:	movw	r1, #39	; 0x27
    dbf4:	strb	r1, [r0]
    dbf8:	b	dd80 <decode_escaped_string+0x4d8>
    dbfc:	ldr	r0, [fp, #-8]
    dc00:	ldr	r1, [sp, #12]
    dc04:	add	r0, r0, r1
    dc08:	ldrb	r0, [r0]
    dc0c:	cmp	r0, #48	; 0x30
    dc10:	blt	dc2c <decode_escaped_string+0x384>
    dc14:	ldr	r0, [fp, #-8]
    dc18:	ldr	r1, [sp, #12]
    dc1c:	add	r0, r0, r1
    dc20:	ldrb	r0, [r0]
    dc24:	cmp	r0, #57	; 0x39
    dc28:	ble	dc48 <decode_escaped_string+0x3a0>
    dc2c:	mvn	r0, #102	; 0x66
    dc30:	movw	r1, #0
    dc34:	movt	r1, #0
    dc38:	bl	0 <coda_set_error>
    dc3c:	mvn	r0, #0
    dc40:	str	r0, [fp, #-4]
    dc44:	b	ddd8 <decode_escaped_string+0x530>
    dc48:	ldr	r0, [fp, #-8]
    dc4c:	ldr	r1, [sp, #12]
    dc50:	ldrb	r0, [r0, r1]
    dc54:	sub	r0, r0, #48	; 0x30
    dc58:	lsl	r0, r0, #6
    dc5c:	ldr	r1, [fp, #-8]
    dc60:	ldr	r2, [sp, #8]
    dc64:	add	r1, r1, r2
    dc68:	strb	r0, [r1]
    dc6c:	ldr	r0, [sp, #12]
    dc70:	add	r0, r0, #1
    dc74:	str	r0, [sp, #12]
    dc78:	ldr	r0, [fp, #-8]
    dc7c:	ldr	r1, [sp, #12]
    dc80:	add	r0, r0, r1
    dc84:	ldrb	r0, [r0]
    dc88:	cmp	r0, #48	; 0x30
    dc8c:	blt	dca8 <decode_escaped_string+0x400>
    dc90:	ldr	r0, [fp, #-8]
    dc94:	ldr	r1, [sp, #12]
    dc98:	add	r0, r0, r1
    dc9c:	ldrb	r0, [r0]
    dca0:	cmp	r0, #57	; 0x39
    dca4:	ble	dcc4 <decode_escaped_string+0x41c>
    dca8:	mvn	r0, #102	; 0x66
    dcac:	movw	r1, #0
    dcb0:	movt	r1, #0
    dcb4:	bl	0 <coda_set_error>
    dcb8:	mvn	r0, #0
    dcbc:	str	r0, [fp, #-4]
    dcc0:	b	ddd8 <decode_escaped_string+0x530>
    dcc4:	ldr	r0, [fp, #-8]
    dcc8:	ldr	r1, [sp, #12]
    dccc:	ldrb	r0, [r0, r1]
    dcd0:	sub	r0, r0, #48	; 0x30
    dcd4:	lsl	r0, r0, #3
    dcd8:	ldr	r1, [fp, #-8]
    dcdc:	ldr	r2, [sp, #8]
    dce0:	add	r1, r1, r2
    dce4:	ldrb	r2, [r1]
    dce8:	add	r0, r2, r0
    dcec:	strb	r0, [r1]
    dcf0:	ldr	r0, [sp, #12]
    dcf4:	add	r0, r0, #1
    dcf8:	str	r0, [sp, #12]
    dcfc:	ldr	r0, [fp, #-8]
    dd00:	ldr	r1, [sp, #12]
    dd04:	add	r0, r0, r1
    dd08:	ldrb	r0, [r0]
    dd0c:	cmp	r0, #48	; 0x30
    dd10:	blt	dd2c <decode_escaped_string+0x484>
    dd14:	ldr	r0, [fp, #-8]
    dd18:	ldr	r1, [sp, #12]
    dd1c:	add	r0, r0, r1
    dd20:	ldrb	r0, [r0]
    dd24:	cmp	r0, #57	; 0x39
    dd28:	ble	dd48 <decode_escaped_string+0x4a0>
    dd2c:	mvn	r0, #102	; 0x66
    dd30:	movw	r1, #0
    dd34:	movt	r1, #0
    dd38:	bl	0 <coda_set_error>
    dd3c:	mvn	r0, #0
    dd40:	str	r0, [fp, #-4]
    dd44:	b	ddd8 <decode_escaped_string+0x530>
    dd48:	ldr	r0, [fp, #-8]
    dd4c:	ldr	r1, [sp, #12]
    dd50:	add	r0, r0, r1
    dd54:	ldrb	r0, [r0]
    dd58:	sub	r0, r0, #48	; 0x30
    dd5c:	ldr	r1, [fp, #-8]
    dd60:	ldr	r2, [sp, #8]
    dd64:	add	r1, r1, r2
    dd68:	ldrb	r2, [r1]
    dd6c:	add	r0, r2, r0
    dd70:	strb	r0, [r1]
    dd74:	ldr	r0, [sp, #8]
    dd78:	add	r0, r0, #1
    dd7c:	str	r0, [sp, #8]
    dd80:	b	ddac <decode_escaped_string+0x504>
    dd84:	ldr	r0, [fp, #-8]
    dd88:	ldr	r1, [sp, #12]
    dd8c:	add	r0, r0, r1
    dd90:	ldrb	r0, [r0]
    dd94:	ldr	r1, [fp, #-8]
    dd98:	ldr	r2, [sp, #8]
    dd9c:	add	r3, r2, #1
    dda0:	str	r3, [sp, #8]
    dda4:	add	r1, r1, r2
    dda8:	strb	r0, [r1]
    ddac:	ldr	r0, [sp, #12]
    ddb0:	add	r0, r0, #1
    ddb4:	str	r0, [sp, #12]
    ddb8:	b	d8e0 <decode_escaped_string+0x38>
    ddbc:	ldr	r0, [fp, #-8]
    ddc0:	ldr	r1, [sp, #8]
    ddc4:	add	r0, r0, r1
    ddc8:	movw	r1, #0
    ddcc:	strb	r1, [r0]
    ddd0:	ldr	r0, [sp, #8]
    ddd4:	str	r0, [fp, #-4]
    ddd8:	ldr	r0, [fp, #-4]
    dddc:	mov	sp, fp
    dde0:	pop	{fp, pc}

0000dde4 <print_escaped_string>:
    dde4:	push	{fp, lr}
    dde8:	mov	fp, sp
    ddec:	sub	sp, sp, #176	; 0xb0
    ddf0:	ldr	ip, [fp, #8]
    ddf4:	str	r0, [fp, #-4]
    ddf8:	str	r1, [fp, #-8]
    ddfc:	str	r2, [fp, #-12]
    de00:	str	r3, [fp, #-16]
    de04:	movw	r0, #0
    de08:	str	r0, [fp, #-20]	; 0xffffffec
    de0c:	ldr	r0, [fp, #-8]
    de10:	cmp	r0, #0
    de14:	str	ip, [fp, #-24]	; 0xffffffe8
    de18:	beq	de2c <print_escaped_string+0x48>
    de1c:	ldr	r0, [fp, #-4]
    de20:	movw	r1, #0
    de24:	cmp	r0, r1
    de28:	bne	de30 <print_escaped_string+0x4c>
    de2c:	b	e380 <print_escaped_string+0x59c>
    de30:	ldr	r0, [fp, #-8]
    de34:	cmp	r0, #0
    de38:	bge	de48 <print_escaped_string+0x64>
    de3c:	ldr	r0, [fp, #-4]
    de40:	bl	0 <strlen>
    de44:	str	r0, [fp, #-8]
    de48:	b	de4c <print_escaped_string+0x68>
    de4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    de50:	ldr	r1, [fp, #-8]
    de54:	cmp	r0, r1
    de58:	bge	e380 <print_escaped_string+0x59c>
    de5c:	ldr	r0, [fp, #-4]
    de60:	ldr	r1, [fp, #-20]	; 0xffffffec
    de64:	ldrb	r0, [r0, r1]
    de68:	sub	r0, r0, #7
    de6c:	cmp	r0, #85	; 0x55
    de70:	str	r0, [fp, #-28]	; 0xffffffe4
    de74:	bhi	e2d8 <print_escaped_string+0x4f4>
    de78:	add	r0, pc, #8
    de7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    de80:	ldr	r0, [r0, r1, lsl #2]
    de84:	mov	pc, r0
    de88:	.word	0x0000e004
    de8c:	.word	0x0000e028
    de90:	.word	0x0000e0b8
    de94:	.word	0x0000e070
    de98:	.word	0x0000e0dc
    de9c:	.word	0x0000e04c
    dea0:	.word	0x0000e094
    dea4:	.word	0x0000e2d8
    dea8:	.word	0x0000e2d8
    deac:	.word	0x0000e2d8
    deb0:	.word	0x0000e2d8
    deb4:	.word	0x0000e2d8
    deb8:	.word	0x0000e2d8
    debc:	.word	0x0000e2d8
    dec0:	.word	0x0000e2d8
    dec4:	.word	0x0000e2d8
    dec8:	.word	0x0000e2d8
    decc:	.word	0x0000e2d8
    ded0:	.word	0x0000e2d8
    ded4:	.word	0x0000e2d8
    ded8:	.word	0x0000dfe0
    dedc:	.word	0x0000e2d8
    dee0:	.word	0x0000e2d8
    dee4:	.word	0x0000e2d8
    dee8:	.word	0x0000e2d8
    deec:	.word	0x0000e27c
    def0:	.word	0x0000e2d8
    def4:	.word	0x0000e124
    def8:	.word	0x0000e2d8
    defc:	.word	0x0000e2d8
    df00:	.word	0x0000e2d8
    df04:	.word	0x0000e220
    df08:	.word	0x0000e2d8
    df0c:	.word	0x0000e2d8
    df10:	.word	0x0000e2d8
    df14:	.word	0x0000e2d8
    df18:	.word	0x0000e2d8
    df1c:	.word	0x0000e2d8
    df20:	.word	0x0000e2d8
    df24:	.word	0x0000e2d8
    df28:	.word	0x0000e2d8
    df2c:	.word	0x0000e2d8
    df30:	.word	0x0000e2d8
    df34:	.word	0x0000e2d8
    df38:	.word	0x0000e2d8
    df3c:	.word	0x0000e2d8
    df40:	.word	0x0000e2d8
    df44:	.word	0x0000e2d8
    df48:	.word	0x0000e2d8
    df4c:	.word	0x0000e2d8
    df50:	.word	0x0000e2d8
    df54:	.word	0x0000e2d8
    df58:	.word	0x0000e2d8
    df5c:	.word	0x0000e168
    df60:	.word	0x0000e2d8
    df64:	.word	0x0000e1c4
    df68:	.word	0x0000e2d8
    df6c:	.word	0x0000e2d8
    df70:	.word	0x0000e2d8
    df74:	.word	0x0000e2d8
    df78:	.word	0x0000e2d8
    df7c:	.word	0x0000e2d8
    df80:	.word	0x0000e2d8
    df84:	.word	0x0000e2d8
    df88:	.word	0x0000e2d8
    df8c:	.word	0x0000e2d8
    df90:	.word	0x0000e2d8
    df94:	.word	0x0000e2d8
    df98:	.word	0x0000e2d8
    df9c:	.word	0x0000e2d8
    dfa0:	.word	0x0000e2d8
    dfa4:	.word	0x0000e2d8
    dfa8:	.word	0x0000e2d8
    dfac:	.word	0x0000e2d8
    dfb0:	.word	0x0000e2d8
    dfb4:	.word	0x0000e2d8
    dfb8:	.word	0x0000e2d8
    dfbc:	.word	0x0000e2d8
    dfc0:	.word	0x0000e2d8
    dfc4:	.word	0x0000e2d8
    dfc8:	.word	0x0000e2d8
    dfcc:	.word	0x0000e2d8
    dfd0:	.word	0x0000e2d8
    dfd4:	.word	0x0000e2d8
    dfd8:	.word	0x0000e2d8
    dfdc:	.word	0x0000e100
    dfe0:	ldr	r0, [fp, #-12]
    dfe4:	movw	r1, #0
    dfe8:	movt	r1, #0
    dfec:	str	r0, [fp, #-32]	; 0xffffffe0
    dff0:	mov	r0, r1
    dff4:	ldr	r1, [fp, #-32]	; 0xffffffe0
    dff8:	blx	r1
    dffc:	str	r0, [fp, #-36]	; 0xffffffdc
    e000:	b	e370 <print_escaped_string+0x58c>
    e004:	ldr	r0, [fp, #-12]
    e008:	movw	r1, #0
    e00c:	movt	r1, #0
    e010:	str	r0, [fp, #-40]	; 0xffffffd8
    e014:	mov	r0, r1
    e018:	ldr	r1, [fp, #-40]	; 0xffffffd8
    e01c:	blx	r1
    e020:	str	r0, [fp, #-44]	; 0xffffffd4
    e024:	b	e370 <print_escaped_string+0x58c>
    e028:	ldr	r0, [fp, #-12]
    e02c:	movw	r1, #0
    e030:	movt	r1, #0
    e034:	str	r0, [fp, #-48]	; 0xffffffd0
    e038:	mov	r0, r1
    e03c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    e040:	blx	r1
    e044:	str	r0, [fp, #-52]	; 0xffffffcc
    e048:	b	e370 <print_escaped_string+0x58c>
    e04c:	ldr	r0, [fp, #-12]
    e050:	movw	r1, #0
    e054:	movt	r1, #0
    e058:	str	r0, [fp, #-56]	; 0xffffffc8
    e05c:	mov	r0, r1
    e060:	ldr	r1, [fp, #-56]	; 0xffffffc8
    e064:	blx	r1
    e068:	str	r0, [fp, #-60]	; 0xffffffc4
    e06c:	b	e370 <print_escaped_string+0x58c>
    e070:	ldr	r0, [fp, #-12]
    e074:	movw	r1, #0
    e078:	movt	r1, #0
    e07c:	str	r0, [fp, #-64]	; 0xffffffc0
    e080:	mov	r0, r1
    e084:	ldr	r1, [fp, #-64]	; 0xffffffc0
    e088:	blx	r1
    e08c:	str	r0, [fp, #-68]	; 0xffffffbc
    e090:	b	e370 <print_escaped_string+0x58c>
    e094:	ldr	r0, [fp, #-12]
    e098:	movw	r1, #0
    e09c:	movt	r1, #0
    e0a0:	str	r0, [fp, #-72]	; 0xffffffb8
    e0a4:	mov	r0, r1
    e0a8:	ldr	r1, [fp, #-72]	; 0xffffffb8
    e0ac:	blx	r1
    e0b0:	str	r0, [fp, #-76]	; 0xffffffb4
    e0b4:	b	e370 <print_escaped_string+0x58c>
    e0b8:	ldr	r0, [fp, #-12]
    e0bc:	movw	r1, #0
    e0c0:	movt	r1, #0
    e0c4:	str	r0, [fp, #-80]	; 0xffffffb0
    e0c8:	mov	r0, r1
    e0cc:	ldr	r1, [fp, #-80]	; 0xffffffb0
    e0d0:	blx	r1
    e0d4:	str	r0, [fp, #-84]	; 0xffffffac
    e0d8:	b	e370 <print_escaped_string+0x58c>
    e0dc:	ldr	r0, [fp, #-12]
    e0e0:	movw	r1, #0
    e0e4:	movt	r1, #0
    e0e8:	str	r0, [sp, #88]	; 0x58
    e0ec:	mov	r0, r1
    e0f0:	ldr	r1, [sp, #88]	; 0x58
    e0f4:	blx	r1
    e0f8:	str	r0, [sp, #84]	; 0x54
    e0fc:	b	e370 <print_escaped_string+0x58c>
    e100:	ldr	r0, [fp, #-12]
    e104:	movw	r1, #0
    e108:	movt	r1, #0
    e10c:	str	r0, [sp, #80]	; 0x50
    e110:	mov	r0, r1
    e114:	ldr	r1, [sp, #80]	; 0x50
    e118:	blx	r1
    e11c:	str	r0, [sp, #76]	; 0x4c
    e120:	b	e370 <print_escaped_string+0x58c>
    e124:	ldr	r0, [fp, #-12]
    e128:	ldr	r1, [fp, #-16]
    e12c:	cmp	r1, #0
    e130:	movw	r1, #0
    e134:	movne	r1, #1
    e138:	tst	r1, #1
    e13c:	movw	r1, #0
    e140:	movt	r1, #0
    e144:	movw	r2, #0
    e148:	movt	r2, #0
    e14c:	movne	r1, r2
    e150:	str	r0, [sp, #72]	; 0x48
    e154:	mov	r0, r1
    e158:	ldr	r1, [sp, #72]	; 0x48
    e15c:	blx	r1
    e160:	str	r0, [sp, #68]	; 0x44
    e164:	b	e370 <print_escaped_string+0x58c>
    e168:	ldr	r0, [fp, #-12]
    e16c:	ldr	r1, [fp, #-16]
    e170:	cmp	r1, #0
    e174:	movw	r1, #1
    e178:	str	r0, [sp, #64]	; 0x40
    e17c:	str	r1, [sp, #60]	; 0x3c
    e180:	bne	e198 <print_escaped_string+0x3b4>
    e184:	ldr	r0, [fp, #8]
    e188:	cmp	r0, #0
    e18c:	movw	r0, #0
    e190:	movne	r0, #1
    e194:	str	r0, [sp, #60]	; 0x3c
    e198:	ldr	r0, [sp, #60]	; 0x3c
    e19c:	tst	r0, #1
    e1a0:	movw	r0, #0
    e1a4:	movt	r0, #0
    e1a8:	movw	r1, #0
    e1ac:	movt	r1, #0
    e1b0:	movne	r0, r1
    e1b4:	ldr	r1, [sp, #64]	; 0x40
    e1b8:	blx	r1
    e1bc:	str	r0, [sp, #56]	; 0x38
    e1c0:	b	e370 <print_escaped_string+0x58c>
    e1c4:	ldr	r0, [fp, #-12]
    e1c8:	ldr	r1, [fp, #-16]
    e1cc:	cmp	r1, #0
    e1d0:	movw	r1, #1
    e1d4:	str	r0, [sp, #52]	; 0x34
    e1d8:	str	r1, [sp, #48]	; 0x30
    e1dc:	bne	e1f4 <print_escaped_string+0x410>
    e1e0:	ldr	r0, [fp, #8]
    e1e4:	cmp	r0, #0
    e1e8:	movw	r0, #0
    e1ec:	movne	r0, #1
    e1f0:	str	r0, [sp, #48]	; 0x30
    e1f4:	ldr	r0, [sp, #48]	; 0x30
    e1f8:	tst	r0, #1
    e1fc:	movw	r0, #0
    e200:	movt	r0, #0
    e204:	movw	r1, #0
    e208:	movt	r1, #0
    e20c:	movne	r0, r1
    e210:	ldr	r1, [sp, #52]	; 0x34
    e214:	blx	r1
    e218:	str	r0, [sp, #44]	; 0x2c
    e21c:	b	e370 <print_escaped_string+0x58c>
    e220:	ldr	r0, [fp, #-12]
    e224:	ldr	r1, [fp, #-16]
    e228:	cmp	r1, #0
    e22c:	movw	r1, #1
    e230:	str	r0, [sp, #40]	; 0x28
    e234:	str	r1, [sp, #36]	; 0x24
    e238:	bne	e250 <print_escaped_string+0x46c>
    e23c:	ldr	r0, [fp, #8]
    e240:	cmp	r0, #0
    e244:	movw	r0, #0
    e248:	movne	r0, #1
    e24c:	str	r0, [sp, #36]	; 0x24
    e250:	ldr	r0, [sp, #36]	; 0x24
    e254:	tst	r0, #1
    e258:	movw	r0, #0
    e25c:	movt	r0, #0
    e260:	movw	r1, #0
    e264:	movt	r1, #0
    e268:	movne	r0, r1
    e26c:	ldr	r1, [sp, #40]	; 0x28
    e270:	blx	r1
    e274:	str	r0, [sp, #32]
    e278:	b	e370 <print_escaped_string+0x58c>
    e27c:	ldr	r0, [fp, #-12]
    e280:	ldr	r1, [fp, #-16]
    e284:	cmp	r1, #0
    e288:	movw	r1, #1
    e28c:	str	r0, [sp, #28]
    e290:	str	r1, [sp, #24]
    e294:	bne	e2ac <print_escaped_string+0x4c8>
    e298:	ldr	r0, [fp, #8]
    e29c:	cmp	r0, #0
    e2a0:	movw	r0, #0
    e2a4:	movne	r0, #1
    e2a8:	str	r0, [sp, #24]
    e2ac:	ldr	r0, [sp, #24]
    e2b0:	tst	r0, #1
    e2b4:	movw	r0, #0
    e2b8:	movt	r0, #0
    e2bc:	movw	r1, #0
    e2c0:	movt	r1, #0
    e2c4:	movne	r0, r1
    e2c8:	ldr	r1, [sp, #28]
    e2cc:	blx	r1
    e2d0:	str	r0, [sp, #20]
    e2d4:	b	e370 <print_escaped_string+0x58c>
    e2d8:	bl	0 <__ctype_b_loc>
    e2dc:	ldr	r0, [r0]
    e2e0:	ldr	lr, [fp, #-4]
    e2e4:	ldr	r1, [fp, #-20]	; 0xffffffec
    e2e8:	ldrb	r1, [lr, r1]
    e2ec:	mov	lr, r1
    e2f0:	add	r0, r0, r1, lsl #1
    e2f4:	ldrh	r0, [r0]
    e2f8:	and	r0, r0, #16384	; 0x4000
    e2fc:	cmp	r0, #0
    e300:	str	lr, [sp, #16]
    e304:	bne	e33c <print_escaped_string+0x558>
    e308:	ldr	r0, [fp, #-12]
    e30c:	ldr	r1, [fp, #-4]
    e310:	ldr	r2, [fp, #-20]	; 0xffffffec
    e314:	add	r1, r1, r2
    e318:	ldrb	r1, [r1]
    e31c:	movw	r2, #0
    e320:	movt	r2, #0
    e324:	str	r0, [sp, #12]
    e328:	mov	r0, r2
    e32c:	ldr	r2, [sp, #12]
    e330:	blx	r2
    e334:	str	r0, [sp, #8]
    e338:	b	e36c <print_escaped_string+0x588>
    e33c:	ldr	r0, [fp, #-12]
    e340:	ldr	r1, [fp, #-4]
    e344:	ldr	r2, [fp, #-20]	; 0xffffffec
    e348:	add	r1, r1, r2
    e34c:	ldrb	r1, [r1]
    e350:	movw	r2, #0
    e354:	movt	r2, #0
    e358:	str	r0, [sp, #4]
    e35c:	mov	r0, r2
    e360:	ldr	r2, [sp, #4]
    e364:	blx	r2
    e368:	str	r0, [sp]
    e36c:	b	e370 <print_escaped_string+0x58c>
    e370:	ldr	r0, [fp, #-20]	; 0xffffffec
    e374:	add	r0, r0, #1
    e378:	str	r0, [fp, #-20]	; 0xffffffec
    e37c:	b	de4c <print_escaped_string+0x68>
    e380:	mov	sp, fp
    e384:	pop	{fp, pc}

0000e388 <compare_strings>:
    e388:	push	{fp, lr}
    e38c:	mov	fp, sp
    e390:	sub	sp, sp, #36	; 0x24
    e394:	ldr	ip, [fp, #12]
    e398:	ldr	lr, [fp, #8]
    e39c:	str	r0, [fp, #-8]
    e3a0:	str	r1, [fp, #-12]
    e3a4:	str	r2, [fp, #-16]
    e3a8:	str	r3, [sp, #16]
    e3ac:	movw	r0, #0
    e3b0:	str	r0, [sp, #12]
    e3b4:	str	lr, [sp, #8]
    e3b8:	str	ip, [sp, #4]
    e3bc:	ldr	r0, [sp, #12]
    e3c0:	ldr	r1, [fp, #-12]
    e3c4:	cmp	r0, r1
    e3c8:	movw	r0, #0
    e3cc:	str	r0, [sp]
    e3d0:	bge	e42c <compare_strings+0xa4>
    e3d4:	ldr	r0, [sp, #12]
    e3d8:	ldr	r1, [fp, #8]
    e3dc:	cmp	r0, r1
    e3e0:	movw	r0, #0
    e3e4:	str	r0, [sp]
    e3e8:	bge	e42c <compare_strings+0xa4>
    e3ec:	ldr	r0, [fp, #-16]
    e3f0:	ldr	r1, [fp, #-8]
    e3f4:	ldr	r2, [sp, #12]
    e3f8:	add	r1, r1, r2
    e3fc:	add	r0, r0, r1
    e400:	ldrb	r0, [r0]
    e404:	ldr	r1, [fp, #12]
    e408:	ldr	r2, [sp, #16]
    e40c:	ldr	r3, [sp, #12]
    e410:	add	r2, r2, r3
    e414:	add	r1, r1, r2
    e418:	ldrb	r1, [r1]
    e41c:	cmp	r0, r1
    e420:	movw	r0, #0
    e424:	moveq	r0, #1
    e428:	str	r0, [sp]
    e42c:	ldr	r0, [sp]
    e430:	tst	r0, #1
    e434:	beq	e448 <compare_strings+0xc0>
    e438:	ldr	r0, [sp, #12]
    e43c:	add	r0, r0, #1
    e440:	str	r0, [sp, #12]
    e444:	b	e3bc <compare_strings+0x34>
    e448:	ldr	r0, [sp, #12]
    e44c:	ldr	r1, [fp, #-12]
    e450:	cmp	r0, r1
    e454:	bne	e480 <compare_strings+0xf8>
    e458:	ldr	r0, [sp, #12]
    e45c:	ldr	r1, [fp, #8]
    e460:	cmp	r0, r1
    e464:	bne	e474 <compare_strings+0xec>
    e468:	movw	r0, #0
    e46c:	str	r0, [fp, #-4]
    e470:	b	e4dc <compare_strings+0x154>
    e474:	mvn	r0, #0
    e478:	str	r0, [fp, #-4]
    e47c:	b	e4dc <compare_strings+0x154>
    e480:	ldr	r0, [sp, #12]
    e484:	ldr	r1, [fp, #8]
    e488:	cmp	r0, r1
    e48c:	beq	e4c8 <compare_strings+0x140>
    e490:	ldr	r0, [fp, #-16]
    e494:	ldr	r1, [fp, #-8]
    e498:	ldr	r2, [sp, #12]
    e49c:	add	r1, r1, r2
    e4a0:	add	r0, r0, r1
    e4a4:	ldrb	r0, [r0]
    e4a8:	ldr	r1, [fp, #12]
    e4ac:	ldr	r2, [sp, #16]
    e4b0:	ldr	r3, [sp, #12]
    e4b4:	add	r2, r2, r3
    e4b8:	add	r1, r1, r2
    e4bc:	ldrb	r1, [r1]
    e4c0:	cmp	r0, r1
    e4c4:	ble	e4d4 <compare_strings+0x14c>
    e4c8:	movw	r0, #1
    e4cc:	str	r0, [fp, #-4]
    e4d0:	b	e4dc <compare_strings+0x154>
    e4d4:	mvn	r0, #0
    e4d8:	str	r0, [fp, #-4]
    e4dc:	ldr	r0, [fp, #-4]
    e4e0:	mov	sp, fp
    e4e4:	pop	{fp, pc}

0000e4e8 <ipow>:
    e4e8:	sub	sp, sp, #24
    e4ec:	vstr	d0, [sp, #16]
    e4f0:	str	r0, [sp, #12]
    e4f4:	vmov.f64	d0, #112	; 0x3f800000  1.0
    e4f8:	vstr	d0, [sp]
    e4fc:	ldr	r0, [sp, #12]
    e500:	cmp	r0, #0
    e504:	bge	e548 <ipow+0x60>
    e508:	b	e50c <ipow+0x24>
    e50c:	ldr	r0, [sp, #12]
    e510:	add	r1, r0, #1
    e514:	str	r1, [sp, #12]
    e518:	cmp	r0, #0
    e51c:	beq	e534 <ipow+0x4c>
    e520:	vldr	d16, [sp, #16]
    e524:	vldr	d17, [sp]
    e528:	vmul.f64	d16, d17, d16
    e52c:	vstr	d16, [sp]
    e530:	b	e50c <ipow+0x24>
    e534:	vldr	d16, [sp]
    e538:	vmov.f64	d17, #112	; 0x3f800000  1.0
    e53c:	vdiv.f64	d16, d17, d16
    e540:	vstr	d16, [sp]
    e544:	b	e57c <ipow+0x94>
    e548:	b	e54c <ipow+0x64>
    e54c:	ldr	r0, [sp, #12]
    e550:	mvn	r1, #0
    e554:	add	r1, r0, r1
    e558:	str	r1, [sp, #12]
    e55c:	cmp	r0, #0
    e560:	beq	e578 <ipow+0x90>
    e564:	vldr	d16, [sp, #16]
    e568:	vldr	d17, [sp]
    e56c:	vmul.f64	d16, d17, d16
    e570:	vstr	d16, [sp]
    e574:	b	e54c <ipow+0x64>
    e578:	b	e57c <ipow+0x94>
    e57c:	vldr	d0, [sp]
    e580:	add	sp, sp, #24
    e584:	bx	lr

0000e588 <iswhitespace>:
    e588:	sub	sp, sp, #8
    e58c:	strb	r0, [sp, #7]
    e590:	ldrb	r0, [sp, #7]
    e594:	cmp	r0, #32
    e598:	movw	r0, #1
    e59c:	str	r0, [sp]
    e5a0:	beq	e5e0 <iswhitespace+0x58>
    e5a4:	ldrb	r0, [sp, #7]
    e5a8:	cmp	r0, #9
    e5ac:	movw	r0, #1
    e5b0:	str	r0, [sp]
    e5b4:	beq	e5e0 <iswhitespace+0x58>
    e5b8:	ldrb	r0, [sp, #7]
    e5bc:	cmp	r0, #10
    e5c0:	movw	r0, #1
    e5c4:	str	r0, [sp]
    e5c8:	beq	e5e0 <iswhitespace+0x58>
    e5cc:	ldrb	r0, [sp, #7]
    e5d0:	cmp	r0, #13
    e5d4:	movw	r0, #0
    e5d8:	moveq	r0, #1
    e5dc:	str	r0, [sp]
    e5e0:	ldr	r0, [sp]
    e5e4:	and	r0, r0, #1
    e5e8:	add	sp, sp, #8
    e5ec:	bx	lr
