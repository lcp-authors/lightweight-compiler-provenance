
../repos/stcorp-coda-3a25f25/CMakeFiles/coda.dir/libcoda/coda.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_get_libcoda_version>:
   0:	mov	ip, sp
   4:	sub	sp, sp, #8
   8:	str	ip, [sp]
   c:	str	lr, [sp, #4]
  10:	ldr	r0, [pc, #12]	; 24 <coda_get_libcoda_version+0x24>
  14:	ldr	r0, [r0]
  18:	ldr	lr, [sp, #4]
  1c:	add	sp, sp, #8
  20:	bx	lr
  24:	.word	0x00000000

00000028 <coda_set_option_bypass_special_types>:
  28:	mov	ip, sp
  2c:	sub	sp, sp, #8
  30:	str	ip, [sp]
  34:	str	lr, [sp, #4]
  38:	cmp	r0, #1
  3c:	movne	r1, #1
  40:	moveq	r1, #0
  44:	mov	r2, #0
  48:	cmp	r0, #0
  4c:	movne	r1, r1
  50:	moveq	r1, r2
  54:	cmp	r1, #0
  58:	beq	7c <coda_set_option_bypass_special_types+0x54>
  5c:	mvn	r2, #99	; 0x63
  60:	ldr	r1, [pc, #44]	; 94 <coda_set_option_bypass_special_types+0x6c>
  64:	mov	r3, r0
  68:	mov	r0, r2
  6c:	mov	r2, r3
  70:	bl	0 <coda_set_error>
  74:	mvn	r0, #0
  78:	b	88 <coda_set_option_bypass_special_types+0x60>
  7c:	ldr	ip, [pc, #20]	; 98 <coda_set_option_bypass_special_types+0x70>
  80:	str	r0, [ip]
  84:	mov	r0, #0
  88:	ldr	lr, [sp, #4]
  8c:	add	sp, sp, #8
  90:	bx	lr
  94:	.word	0x0000009c
  98:	.word	0x00000000

0000009c <coda_get_option_bypass_special_types>:
  9c:	mov	ip, sp
  a0:	sub	sp, sp, #8
  a4:	str	ip, [sp]
  a8:	str	lr, [sp, #4]
  ac:	ldr	r0, [pc, #12]	; c0 <coda_get_option_bypass_special_types+0x24>
  b0:	ldr	r0, [r0]
  b4:	ldr	lr, [sp, #4]
  b8:	add	sp, sp, #8
  bc:	bx	lr
  c0:	.word	0x00000000

000000c4 <coda_set_option_perform_boundary_checks>:
  c4:	mov	ip, sp
  c8:	sub	sp, sp, #8
  cc:	str	ip, [sp]
  d0:	str	lr, [sp, #4]
  d4:	cmp	r0, #1
  d8:	movne	r1, #1
  dc:	moveq	r1, #0
  e0:	mov	r2, #0
  e4:	cmp	r0, #0
  e8:	movne	r1, r1
  ec:	moveq	r1, r2
  f0:	cmp	r1, #0
  f4:	beq	118 <coda_set_option_perform_boundary_checks+0x54>
  f8:	mvn	r2, #99	; 0x63
  fc:	ldr	r1, [pc, #48]	; 134 <coda_set_option_perform_boundary_checks+0x70>
 100:	mov	r3, r0
 104:	mov	r0, r2
 108:	mov	r2, r3
 10c:	bl	0 <coda_set_error>
 110:	mvn	r0, #0
 114:	b	124 <coda_set_option_perform_boundary_checks+0x60>
 118:	ldr	ip, [pc, #16]	; 130 <coda_set_option_perform_boundary_checks+0x6c>
 11c:	str	r0, [ip]
 120:	mov	r0, #0
 124:	ldr	lr, [sp, #4]
 128:	add	sp, sp, #8
 12c:	bx	lr
 130:	.word	0x00000000
 134:	.word	0x0000009c

00000138 <coda_get_option_perform_boundary_checks>:
 138:	mov	ip, sp
 13c:	sub	sp, sp, #8
 140:	str	ip, [sp]
 144:	str	lr, [sp, #4]
 148:	ldr	r0, [pc, #12]	; 15c <coda_get_option_perform_boundary_checks+0x24>
 14c:	ldr	r0, [r0]
 150:	ldr	lr, [sp, #4]
 154:	add	sp, sp, #8
 158:	bx	lr
 15c:	.word	0x00000000

00000160 <coda_set_option_perform_conversions>:
 160:	mov	ip, sp
 164:	sub	sp, sp, #8
 168:	str	ip, [sp]
 16c:	str	lr, [sp, #4]
 170:	mov	r1, #1
 174:	cmp	r0, #1
 178:	moveq	r2, #1
 17c:	movne	r2, #0
 180:	cmp	r0, #0
 184:	moveq	r1, r1
 188:	movne	r1, r2
 18c:	cmp	r1, #0
 190:	bne	1b4 <coda_set_option_perform_conversions+0x54>
 194:	mvn	r2, #99	; 0x63
 198:	ldr	r1, [pc, #48]	; 1d0 <coda_set_option_perform_conversions+0x70>
 19c:	mov	r3, r0
 1a0:	mov	r0, r2
 1a4:	mov	r2, r3
 1a8:	bl	0 <coda_set_error>
 1ac:	mvn	r0, #0
 1b0:	b	1c0 <coda_set_option_perform_conversions+0x60>
 1b4:	ldr	ip, [pc, #16]	; 1cc <coda_set_option_perform_conversions+0x6c>
 1b8:	str	r0, [ip]
 1bc:	mov	r0, #0
 1c0:	ldr	lr, [sp, #4]
 1c4:	add	sp, sp, #8
 1c8:	bx	lr
 1cc:	.word	0x00000000
 1d0:	.word	0x0000009c

000001d4 <coda_get_option_perform_conversions>:
 1d4:	mov	ip, sp
 1d8:	sub	sp, sp, #8
 1dc:	str	ip, [sp]
 1e0:	str	lr, [sp, #4]
 1e4:	ldr	r0, [pc, #12]	; 1f8 <coda_get_option_perform_conversions+0x24>
 1e8:	ldr	r0, [r0]
 1ec:	ldr	lr, [sp, #4]
 1f0:	add	sp, sp, #8
 1f4:	bx	lr
 1f8:	.word	0x00000000

000001fc <coda_set_option_use_fast_size_expressions>:
 1fc:	mov	ip, sp
 200:	sub	sp, sp, #8
 204:	str	ip, [sp]
 208:	str	lr, [sp, #4]
 20c:	mov	r1, #1
 210:	cmp	r0, #1
 214:	moveq	r2, #1
 218:	movne	r2, #0
 21c:	cmp	r0, #0
 220:	moveq	r1, r1
 224:	movne	r1, r2
 228:	cmp	r1, #0
 22c:	bne	250 <coda_set_option_use_fast_size_expressions+0x54>
 230:	mvn	r2, #99	; 0x63
 234:	ldr	r1, [pc, #48]	; 26c <coda_set_option_use_fast_size_expressions+0x70>
 238:	mov	r3, r0
 23c:	mov	r0, r2
 240:	mov	r2, r3
 244:	bl	0 <coda_set_error>
 248:	mvn	r0, #0
 24c:	b	25c <coda_set_option_use_fast_size_expressions+0x60>
 250:	ldr	ip, [pc, #16]	; 268 <coda_set_option_use_fast_size_expressions+0x6c>
 254:	str	r0, [ip]
 258:	mov	r0, #0
 25c:	ldr	lr, [sp, #4]
 260:	add	sp, sp, #8
 264:	bx	lr
 268:	.word	0x00000000
 26c:	.word	0x0000009c

00000270 <coda_get_option_use_fast_size_expressions>:
 270:	mov	ip, sp
 274:	sub	sp, sp, #8
 278:	str	ip, [sp]
 27c:	str	lr, [sp, #4]
 280:	ldr	r0, [pc, #12]	; 294 <coda_get_option_use_fast_size_expressions+0x24>
 284:	ldr	r0, [r0]
 288:	ldr	lr, [sp, #4]
 28c:	add	sp, sp, #8
 290:	bx	lr
 294:	.word	0x00000000

00000298 <coda_set_option_use_mmap>:
 298:	mov	ip, sp
 29c:	sub	sp, sp, #8
 2a0:	str	ip, [sp]
 2a4:	str	lr, [sp, #4]
 2a8:	mov	r1, #1
 2ac:	cmp	r0, #1
 2b0:	moveq	r2, #1
 2b4:	movne	r2, #0
 2b8:	cmp	r0, #0
 2bc:	moveq	r1, r1
 2c0:	movne	r1, r2
 2c4:	cmp	r1, #0
 2c8:	bne	2ec <coda_set_option_use_mmap+0x54>
 2cc:	mvn	r2, #99	; 0x63
 2d0:	ldr	r1, [pc, #48]	; 308 <coda_set_option_use_mmap+0x70>
 2d4:	mov	r3, r0
 2d8:	mov	r0, r2
 2dc:	mov	r2, r3
 2e0:	bl	0 <coda_set_error>
 2e4:	mvn	r0, #0
 2e8:	b	2f8 <coda_set_option_use_mmap+0x60>
 2ec:	ldr	ip, [pc, #16]	; 304 <coda_set_option_use_mmap+0x6c>
 2f0:	str	r0, [ip]
 2f4:	mov	r0, #0
 2f8:	ldr	lr, [sp, #4]
 2fc:	add	sp, sp, #8
 300:	bx	lr
 304:	.word	0x00000000
 308:	.word	0x0000009c

0000030c <coda_get_option_use_mmap>:
 30c:	mov	ip, sp
 310:	sub	sp, sp, #8
 314:	str	ip, [sp]
 318:	str	lr, [sp, #4]
 31c:	ldr	r0, [pc, #12]	; 330 <coda_get_option_use_mmap+0x24>
 320:	ldr	r0, [r0]
 324:	ldr	lr, [sp, #4]
 328:	add	sp, sp, #8
 32c:	bx	lr
 330:	.word	0x00000000

00000334 <coda_set_definition_path>:
 334:	mov	ip, sp
 338:	sub	sp, sp, #16
 33c:	str	ip, [sp]
 340:	str	lr, [sp, #4]
 344:	str	r4, [sp, #8]
 348:	mov	r4, r0
 34c:	ldr	r0, [pc, #120]	; 3cc <coda_set_definition_path+0x98>
 350:	ldr	r0, [r0]
 354:	cmp	r0, #0
 358:	beq	36c <coda_set_definition_path+0x38>
 35c:	bl	0 <free>
 360:	ldr	r3, [pc, #100]	; 3cc <coda_set_definition_path+0x98>
 364:	mov	ip, #0
 368:	str	ip, [r3]
 36c:	cmp	r4, #0
 370:	bne	37c <coda_set_definition_path+0x48>
 374:	mov	r0, #0
 378:	b	3b4 <coda_set_definition_path+0x80>
 37c:	mov	r0, r4
 380:	bl	0 <strdup>
 384:	ldr	r1, [pc, #64]	; 3cc <coda_set_definition_path+0x98>
 388:	str	r0, [r1]
 38c:	cmp	r0, #0
 390:	bne	3b0 <coda_set_definition_path+0x7c>
 394:	mvn	r0, #0
 398:	ldr	r1, [pc, #36]	; 3c4 <coda_set_definition_path+0x90>
 39c:	ldr	r2, [pc, #36]	; 3c8 <coda_set_definition_path+0x94>
 3a0:	movw	r3, #385	; 0x181
 3a4:	bl	0 <coda_set_error>
 3a8:	mvn	r0, #0
 3ac:	b	3b4 <coda_set_definition_path+0x80>
 3b0:	mov	r0, #0
 3b4:	ldr	r4, [sp, #8]
 3b8:	ldr	lr, [sp, #4]
 3bc:	add	sp, sp, #16
 3c0:	bx	lr
 3c4:	.word	0x00000069
 3c8:	.word	0x00000005
 3cc:	.word	0x00000020

000003d0 <coda_set_definition_path_conditional>:
 3d0:	mov	ip, sp
 3d4:	sub	sp, sp, #32
 3d8:	str	ip, [sp]
 3dc:	str	lr, [sp, #4]
 3e0:	str	r4, [sp, #8]
 3e4:	str	r5, [sp, #12]
 3e8:	str	r6, [sp, #16]
 3ec:	mov	r4, r2
 3f0:	mov	r5, r1
 3f4:	mov	r6, r0
 3f8:	ldr	r0, [pc, #212]	; 4d4 <coda_set_definition_path_conditional+0x104>
 3fc:	bl	0 <getenv>
 400:	cmp	r0, #0
 404:	beq	410 <coda_set_definition_path_conditional+0x40>
 408:	mov	r0, #0
 40c:	b	4bc <coda_set_definition_path_conditional+0xec>
 410:	cmp	r5, #0
 414:	beq	438 <coda_set_definition_path_conditional+0x68>
 418:	add	r2, sp, #24
 41c:	mov	r1, r6
 420:	mov	r0, r5
 424:	bl	0 <coda_path_find_file>
 428:	cmp	r0, #0
 42c:	beq	454 <coda_set_definition_path_conditional+0x84>
 430:	mvn	r0, #0
 434:	b	4bc <coda_set_definition_path_conditional+0xec>
 438:	add	r1, sp, #24
 43c:	mov	r0, r6
 440:	bl	0 <coda_path_for_program>
 444:	cmp	r0, #0
 448:	beq	454 <coda_set_definition_path_conditional+0x84>
 44c:	mvn	r0, #0
 450:	b	4bc <coda_set_definition_path_conditional+0xec>
 454:	ldr	r0, [sp, #24]
 458:	cmp	r0, #0
 45c:	beq	4b8 <coda_set_definition_path_conditional+0xe8>
 460:	mov	r1, #1
 464:	add	r3, sp, #28
 468:	mov	r2, r4
 46c:	bl	0 <coda_path_from_path>
 470:	cmp	r0, #0
 474:	beq	488 <coda_set_definition_path_conditional+0xb8>
 478:	ldr	r0, [sp, #24]
 47c:	bl	0 <free>
 480:	mvn	r0, #0
 484:	b	4bc <coda_set_definition_path_conditional+0xec>
 488:	ldr	r0, [sp, #24]
 48c:	bl	0 <free>
 490:	ldr	r0, [sp, #28]
 494:	bl	334 <coda_set_definition_path>
 498:	cmp	r0, #0
 49c:	beq	4b0 <coda_set_definition_path_conditional+0xe0>
 4a0:	ldr	r0, [sp, #28]
 4a4:	bl	0 <free>
 4a8:	mvn	r0, #0
 4ac:	b	4bc <coda_set_definition_path_conditional+0xec>
 4b0:	ldr	r0, [sp, #28]
 4b4:	bl	0 <free>
 4b8:	mov	r0, #0
 4bc:	ldr	r4, [sp, #8]
 4c0:	ldr	r5, [sp, #12]
 4c4:	ldr	r6, [sp, #16]
 4c8:	ldr	lr, [sp, #4]
 4cc:	add	sp, sp, #32
 4d0:	bx	lr
 4d4:	.word	0x00000059

000004d8 <coda_init>:
 4d8:	mov	ip, sp
 4dc:	sub	sp, sp, #8
 4e0:	str	ip, [sp]
 4e4:	str	lr, [sp, #4]
 4e8:	ldr	r0, [pc, #272]	; 600 <coda_init+0x128>
 4ec:	ldr	r0, [r0]
 4f0:	cmp	r0, #0
 4f4:	bne	5c8 <coda_init+0xf0>
 4f8:	bl	0 <coda_leap_second_table_init>
 4fc:	cmp	r0, #0
 500:	beq	50c <coda_init+0x34>
 504:	mvn	r0, #0
 508:	b	5dc <coda_init+0x104>
 50c:	bl	0 <coda_data_dictionary_init>
 510:	cmp	r0, #0
 514:	beq	524 <coda_init+0x4c>
 518:	bl	0 <coda_leap_second_table_done>
 51c:	mvn	r0, #0
 520:	b	5dc <coda_init+0x104>
 524:	ldr	r0, [pc, #208]	; 5fc <coda_init+0x124>
 528:	ldr	r0, [r0]
 52c:	cmp	r0, #0
 530:	bne	584 <coda_init+0xac>
 534:	ldr	r0, [pc, #180]	; 5f0 <coda_init+0x118>
 538:	bl	0 <getenv>
 53c:	cmp	r0, #0
 540:	beq	584 <coda_init+0xac>
 544:	ldr	r0, [pc, #164]	; 5f0 <coda_init+0x118>
 548:	bl	0 <getenv>
 54c:	bl	0 <strdup>
 550:	ldr	r1, [pc, #164]	; 5fc <coda_init+0x124>
 554:	str	r0, [r1]
 558:	cmp	r0, #0
 55c:	bne	584 <coda_init+0xac>
 560:	bl	0 <coda_data_dictionary_done>
 564:	bl	0 <coda_leap_second_table_done>
 568:	mvn	r0, #0
 56c:	ldr	r1, [pc, #120]	; 5ec <coda_init+0x114>
 570:	ldr	r2, [pc, #128]	; 5f8 <coda_init+0x120>
 574:	mov	r3, #512	; 0x200
 578:	bl	0 <coda_set_error>
 57c:	mvn	r0, #0
 580:	b	5dc <coda_init+0x104>
 584:	ldr	r0, [pc, #112]	; 5fc <coda_init+0x124>
 588:	ldr	r0, [r0]
 58c:	cmp	r0, #0
 590:	beq	5b0 <coda_init+0xd8>
 594:	bl	0 <coda_read_definitions>
 598:	cmp	r0, #0
 59c:	beq	5b0 <coda_init+0xd8>
 5a0:	bl	0 <coda_data_dictionary_done>
 5a4:	bl	0 <coda_leap_second_table_done>
 5a8:	mvn	r0, #0
 5ac:	b	5dc <coda_init+0x104>
 5b0:	ldr	r2, [pc, #48]	; 5e8 <coda_init+0x110>
 5b4:	mov	r3, #1
 5b8:	str	r3, [r2]
 5bc:	ldr	r3, [pc, #48]	; 5f4 <coda_init+0x11c>
 5c0:	mov	r1, #1
 5c4:	str	r1, [r3]
 5c8:	ldr	r0, [pc, #48]	; 600 <coda_init+0x128>
 5cc:	ldr	r1, [r0]
 5d0:	add	ip, r1, #1
 5d4:	str	ip, [r0]
 5d8:	mov	r0, #0
 5dc:	ldr	lr, [sp, #4]
 5e0:	add	sp, sp, #8
 5e4:	bx	lr
 5e8:	.word	0x00000000
 5ec:	.word	0x00000069
 5f0:	.word	0x00000059
 5f4:	.word	0x00000000
 5f8:	.word	0x00000005
 5fc:	.word	0x00000020
 600:	.word	0x00000004

00000604 <coda_done>:
 604:	mov	ip, sp
 608:	sub	sp, sp, #8
 60c:	str	ip, [sp]
 610:	str	lr, [sp, #4]
 614:	ldr	r0, [pc, #108]	; 688 <coda_done+0x84>
 618:	ldr	r2, [r0]
 61c:	cmp	r2, #0
 620:	ble	678 <coda_done+0x74>
 624:	sub	r1, r2, #1
 628:	str	r1, [r0]
 62c:	cmp	r1, #0
 630:	bne	678 <coda_done+0x74>
 634:	bl	0 <coda_sp3_done>
 638:	bl	0 <coda_rinex_done>
 63c:	bl	0 <coda_grib_done>
 640:	bl	0 <coda_data_dictionary_done>
 644:	ldr	r0, [pc, #56]	; 684 <coda_done+0x80>
 648:	ldr	r0, [r0]
 64c:	cmp	r0, #0
 650:	beq	664 <coda_done+0x60>
 654:	bl	0 <free>
 658:	ldr	r3, [pc, #36]	; 684 <coda_done+0x80>
 65c:	mov	ip, #0
 660:	str	ip, [r3]
 664:	bl	0 <coda_mem_done>
 668:	bl	0 <coda_type_done>
 66c:	ldr	lr, [sp, #4]
 670:	add	sp, sp, #8
 674:	b	0 <coda_leap_second_table_done>
 678:	ldr	lr, [sp, #4]
 67c:	add	sp, sp, #8
 680:	bx	lr
 684:	.word	0x00000020
 688:	.word	0x00000004

0000068c <coda_free>:
 68c:	mov	ip, sp
 690:	sub	sp, sp, #8
 694:	str	ip, [sp]
 698:	str	lr, [sp, #4]
 69c:	ldr	lr, [sp, #4]
 6a0:	add	sp, sp, #8
 6a4:	b	0 <free>
