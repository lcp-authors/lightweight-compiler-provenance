
../compcert-repos/prog2/CMakeFiles/MT2E1-2.dir/Extras/Miniteste2-Exemplo1/prob2/heap.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <heap_nova>:
   0:	str	fp, [sp, #-8]!
   4:	str	lr, [sp, #4]
   8:	add	fp, sp, #4
   c:	sub	sp, sp, #16
  10:	str	r0, [fp, #-16]
  14:	mov	r0, #12
  18:	bl	0 <malloc>
  1c:	mov	r3, r0
  20:	str	r3, [fp, #-8]
  24:	ldr	r3, [fp, #-8]
  28:	cmp	r3, #0
  2c:	bne	38 <heap_nova+0x38>
  30:	mov	r3, #0
  34:	b	94 <heap_nova+0x94>
  38:	ldr	r3, [fp, #-8]
  3c:	mov	r2, #0
  40:	str	r2, [r3]
  44:	ldr	r3, [fp, #-8]
  48:	ldr	r2, [fp, #-16]
  4c:	str	r2, [r3, #4]
  50:	ldr	r3, [fp, #-16]
  54:	mov	r1, #4
  58:	mov	r0, r3
  5c:	bl	0 <calloc>
  60:	mov	r3, r0
  64:	mov	r2, r3
  68:	ldr	r3, [fp, #-8]
  6c:	str	r2, [r3, #8]
  70:	ldr	r3, [fp, #-8]
  74:	ldr	r3, [r3, #8]
  78:	cmp	r3, #0
  7c:	bne	90 <heap_nova+0x90>
  80:	ldr	r0, [fp, #-8]
  84:	bl	0 <free>
  88:	mov	r3, #0
  8c:	b	94 <heap_nova+0x94>
  90:	ldr	r3, [fp, #-8]
  94:	mov	r0, r3
  98:	sub	sp, fp, #4
  9c:	ldr	fp, [sp]
  a0:	add	sp, sp, #4
  a4:	pop	{pc}		; (ldr pc, [sp], #4)

000000a8 <heap_apaga>:
  a8:	str	fp, [sp, #-8]!
  ac:	str	lr, [sp, #4]
  b0:	add	fp, sp, #4
  b4:	sub	sp, sp, #16
  b8:	str	r0, [fp, #-16]
  bc:	ldr	r3, [fp, #-16]
  c0:	cmp	r3, #0
  c4:	beq	170 <heap_apaga+0xc8>
  c8:	mov	r3, #0
  cc:	str	r3, [fp, #-8]
  d0:	b	140 <heap_apaga+0x98>
  d4:	ldr	r3, [fp, #-16]
  d8:	ldr	r2, [r3, #8]
  dc:	ldr	r3, [fp, #-8]
  e0:	lsl	r3, r3, #2
  e4:	add	r3, r2, r3
  e8:	ldr	r3, [r3]
  ec:	ldr	r3, [r3, #4]
  f0:	mov	r0, r3
  f4:	bl	0 <free>
  f8:	ldr	r3, [fp, #-16]
  fc:	ldr	r2, [r3, #8]
 100:	ldr	r3, [fp, #-8]
 104:	lsl	r3, r3, #2
 108:	add	r3, r2, r3
 10c:	ldr	r3, [r3]
 110:	mov	r0, r3
 114:	bl	0 <free>
 118:	ldr	r3, [fp, #-16]
 11c:	ldr	r2, [r3, #8]
 120:	ldr	r3, [fp, #-8]
 124:	lsl	r3, r3, #2
 128:	add	r3, r2, r3
 12c:	mov	r2, #0
 130:	str	r2, [r3]
 134:	ldr	r3, [fp, #-8]
 138:	add	r3, r3, #1
 13c:	str	r3, [fp, #-8]
 140:	ldr	r3, [fp, #-16]
 144:	ldr	r3, [r3]
 148:	ldr	r2, [fp, #-8]
 14c:	cmp	r2, r3
 150:	blt	d4 <heap_apaga+0x2c>
 154:	ldr	r3, [fp, #-16]
 158:	ldr	r3, [r3, #8]
 15c:	mov	r0, r3
 160:	bl	0 <free>
 164:	ldr	r0, [fp, #-16]
 168:	bl	0 <free>
 16c:	b	174 <heap_apaga+0xcc>
 170:	nop	{0}
 174:	sub	sp, fp, #4
 178:	ldr	fp, [sp]
 17c:	add	sp, sp, #4
 180:	pop	{pc}		; (ldr pc, [sp], #4)

00000184 <elemento_cria>:
 184:	str	fp, [sp, #-8]!
 188:	str	lr, [sp, #4]
 18c:	add	fp, sp, #4
 190:	sub	sp, sp, #16
 194:	str	r0, [fp, #-16]
 198:	str	r1, [fp, #-20]	; 0xffffffec
 19c:	mov	r0, #8
 1a0:	bl	0 <malloc>
 1a4:	mov	r3, r0
 1a8:	str	r3, [fp, #-8]
 1ac:	ldr	r3, [fp, #-8]
 1b0:	cmp	r3, #0
 1b4:	bne	1c0 <elemento_cria+0x3c>
 1b8:	mov	r3, #0
 1bc:	b	230 <elemento_cria+0xac>
 1c0:	ldr	r0, [fp, #-20]	; 0xffffffec
 1c4:	bl	0 <strlen>
 1c8:	mov	r3, r0
 1cc:	add	r3, r3, #1
 1d0:	mov	r1, #1
 1d4:	mov	r0, r3
 1d8:	bl	0 <calloc>
 1dc:	mov	r3, r0
 1e0:	mov	r2, r3
 1e4:	ldr	r3, [fp, #-8]
 1e8:	str	r2, [r3, #4]
 1ec:	ldr	r3, [fp, #-8]
 1f0:	ldr	r3, [r3, #4]
 1f4:	cmp	r3, #0
 1f8:	bne	20c <elemento_cria+0x88>
 1fc:	ldr	r0, [fp, #-8]
 200:	bl	0 <free>
 204:	mov	r3, #0
 208:	b	230 <elemento_cria+0xac>
 20c:	ldr	r3, [fp, #-8]
 210:	ldr	r3, [r3, #4]
 214:	ldr	r1, [fp, #-20]	; 0xffffffec
 218:	mov	r0, r3
 21c:	bl	0 <strcpy>
 220:	ldr	r3, [fp, #-8]
 224:	ldr	r2, [fp, #-16]
 228:	str	r2, [r3]
 22c:	ldr	r3, [fp, #-8]
 230:	mov	r0, r3
 234:	sub	sp, fp, #4
 238:	ldr	fp, [sp]
 23c:	add	sp, sp, #4
 240:	pop	{pc}		; (ldr pc, [sp], #4)

00000244 <heap_insere>:
 244:	str	fp, [sp, #-8]!
 248:	str	lr, [sp, #4]
 24c:	add	fp, sp, #4
 250:	sub	sp, sp, #32
 254:	str	r0, [fp, #-24]	; 0xffffffe8
 258:	str	r1, [fp, #-28]	; 0xffffffe4
 25c:	str	r2, [fp, #-32]	; 0xffffffe0
 260:	ldr	r3, [fp, #-24]	; 0xffffffe8
 264:	ldr	r2, [r3]
 268:	ldr	r3, [fp, #-24]	; 0xffffffe8
 26c:	ldr	r3, [r3, #4]
 270:	cmp	r2, r3
 274:	blt	280 <heap_insere+0x3c>
 278:	mov	r3, #0
 27c:	b	3e8 <heap_insere+0x1a4>
 280:	ldr	r1, [fp, #-28]	; 0xffffffe4
 284:	ldr	r0, [fp, #-32]	; 0xffffffe0
 288:	bl	184 <elemento_cria>
 28c:	str	r0, [fp, #-12]
 290:	ldr	r3, [fp, #-12]
 294:	cmp	r3, #0
 298:	bne	2a4 <heap_insere+0x60>
 29c:	mov	r3, #0
 2a0:	b	3e8 <heap_insere+0x1a4>
 2a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2a8:	ldr	r3, [r3]
 2ac:	str	r3, [fp, #-8]
 2b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2b4:	ldr	r2, [r3, #8]
 2b8:	ldr	r3, [fp, #-8]
 2bc:	lsl	r3, r3, #2
 2c0:	add	r3, r2, r3
 2c4:	ldr	r2, [fp, #-12]
 2c8:	str	r2, [r3]
 2cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2d0:	ldr	r3, [r3]
 2d4:	add	r2, r3, #1
 2d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2dc:	str	r2, [r3]
 2e0:	b	384 <heap_insere+0x140>
 2e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 2e8:	ldr	r2, [r3, #8]
 2ec:	ldr	r3, [fp, #-8]
 2f0:	sub	r3, r3, #1
 2f4:	lsr	r1, r3, #31
 2f8:	add	r3, r1, r3
 2fc:	asr	r3, r3, #1
 300:	lsl	r3, r3, #2
 304:	add	r3, r2, r3
 308:	ldr	r3, [r3]
 30c:	str	r3, [fp, #-16]
 310:	ldr	r3, [fp, #-24]	; 0xffffffe8
 314:	ldr	r2, [r3, #8]
 318:	ldr	r3, [fp, #-8]
 31c:	lsl	r3, r3, #2
 320:	add	r2, r2, r3
 324:	ldr	r3, [fp, #-24]	; 0xffffffe8
 328:	ldr	r1, [r3, #8]
 32c:	ldr	r3, [fp, #-8]
 330:	sub	r3, r3, #1
 334:	lsr	r0, r3, #31
 338:	add	r3, r0, r3
 33c:	asr	r3, r3, #1
 340:	lsl	r3, r3, #2
 344:	add	r3, r1, r3
 348:	ldr	r2, [r2]
 34c:	str	r2, [r3]
 350:	ldr	r3, [fp, #-24]	; 0xffffffe8
 354:	ldr	r2, [r3, #8]
 358:	ldr	r3, [fp, #-8]
 35c:	lsl	r3, r3, #2
 360:	add	r3, r2, r3
 364:	ldr	r2, [fp, #-16]
 368:	str	r2, [r3]
 36c:	ldr	r3, [fp, #-8]
 370:	sub	r3, r3, #1
 374:	lsr	r2, r3, #31
 378:	add	r3, r2, r3
 37c:	asr	r3, r3, #1
 380:	str	r3, [fp, #-8]
 384:	ldr	r3, [fp, #-8]
 388:	cmp	r3, #0
 38c:	beq	3e4 <heap_insere+0x1a0>
 390:	ldr	r3, [fp, #-24]	; 0xffffffe8
 394:	ldr	r2, [r3, #8]
 398:	ldr	r3, [fp, #-8]
 39c:	lsl	r3, r3, #2
 3a0:	add	r3, r2, r3
 3a4:	ldr	r0, [r3]
 3a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
 3ac:	ldr	r2, [r3, #8]
 3b0:	ldr	r3, [fp, #-8]
 3b4:	sub	r3, r3, #1
 3b8:	lsr	r1, r3, #31
 3bc:	add	r3, r1, r3
 3c0:	asr	r3, r3, #1
 3c4:	lsl	r3, r3, #2
 3c8:	add	r3, r2, r3
 3cc:	ldr	r3, [r3]
 3d0:	mov	r1, r3
 3d4:	bl	78c <menor_que>
 3d8:	mov	r3, r0
 3dc:	cmp	r3, #0
 3e0:	bne	2e4 <heap_insere+0xa0>
 3e4:	mov	r3, #1
 3e8:	mov	r0, r3
 3ec:	sub	sp, fp, #4
 3f0:	ldr	fp, [sp]
 3f4:	add	sp, sp, #4
 3f8:	pop	{pc}		; (ldr pc, [sp], #4)

000003fc <heap_remove>:
 3fc:	str	fp, [sp, #-8]!
 400:	str	lr, [sp, #4]
 404:	add	fp, sp, #4
 408:	sub	sp, sp, #24
 40c:	str	r0, [fp, #-24]	; 0xffffffe8
 410:	ldr	r3, [fp, #-24]	; 0xffffffe8
 414:	cmp	r3, #0
 418:	beq	42c <heap_remove+0x30>
 41c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 420:	ldr	r3, [r3]
 424:	cmp	r3, #0
 428:	bgt	434 <heap_remove+0x38>
 42c:	mov	r3, #0
 430:	b	628 <heap_remove+0x22c>
 434:	ldr	r3, [fp, #-24]	; 0xffffffe8
 438:	ldr	r3, [r3, #8]
 43c:	ldr	r3, [r3]
 440:	ldr	r3, [r3, #4]
 444:	str	r3, [fp, #-16]
 448:	ldr	r3, [fp, #-24]	; 0xffffffe8
 44c:	ldr	r3, [r3, #8]
 450:	ldr	r3, [r3]
 454:	mov	r0, r3
 458:	bl	0 <free>
 45c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 460:	ldr	r3, [r3]
 464:	sub	r2, r3, #1
 468:	ldr	r3, [fp, #-24]	; 0xffffffe8
 46c:	str	r2, [r3]
 470:	ldr	r3, [fp, #-24]	; 0xffffffe8
 474:	ldr	r2, [r3, #8]
 478:	ldr	r3, [fp, #-24]	; 0xffffffe8
 47c:	ldr	r3, [r3]
 480:	lsl	r3, r3, #2
 484:	add	r2, r2, r3
 488:	ldr	r3, [fp, #-24]	; 0xffffffe8
 48c:	ldr	r3, [r3, #8]
 490:	ldr	r2, [r2]
 494:	str	r2, [r3]
 498:	ldr	r3, [fp, #-24]	; 0xffffffe8
 49c:	ldr	r2, [r3, #8]
 4a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4a4:	ldr	r3, [r3]
 4a8:	lsl	r3, r3, #2
 4ac:	add	r3, r2, r3
 4b0:	mov	r2, #0
 4b4:	str	r2, [r3]
 4b8:	mov	r3, #0
 4bc:	str	r3, [fp, #-8]
 4c0:	b	600 <heap_remove+0x204>
 4c4:	ldr	r3, [fp, #-8]
 4c8:	lsl	r3, r3, #1
 4cc:	add	r3, r3, #1
 4d0:	str	r3, [fp, #-12]
 4d4:	ldr	r3, [fp, #-8]
 4d8:	add	r3, r3, #1
 4dc:	lsl	r2, r3, #1
 4e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4e4:	ldr	r3, [r3]
 4e8:	cmp	r2, r3
 4ec:	bge	54c <heap_remove+0x150>
 4f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 4f4:	ldr	r2, [r3, #8]
 4f8:	ldr	r3, [fp, #-8]
 4fc:	add	r3, r3, #1
 500:	lsl	r3, r3, #3
 504:	add	r3, r2, r3
 508:	ldr	r0, [r3]
 50c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 510:	ldr	r2, [r3, #8]
 514:	ldr	r3, [fp, #-8]
 518:	lsl	r3, r3, #3
 51c:	add	r3, r3, #4
 520:	add	r3, r2, r3
 524:	ldr	r3, [r3]
 528:	mov	r1, r3
 52c:	bl	78c <menor_que>
 530:	mov	r3, r0
 534:	cmp	r3, #0
 538:	beq	54c <heap_remove+0x150>
 53c:	ldr	r3, [fp, #-8]
 540:	add	r3, r3, #1
 544:	lsl	r3, r3, #1
 548:	str	r3, [fp, #-12]
 54c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 550:	ldr	r2, [r3, #8]
 554:	ldr	r3, [fp, #-12]
 558:	lsl	r3, r3, #2
 55c:	add	r3, r2, r3
 560:	ldr	r0, [r3]
 564:	ldr	r3, [fp, #-24]	; 0xffffffe8
 568:	ldr	r2, [r3, #8]
 56c:	ldr	r3, [fp, #-8]
 570:	lsl	r3, r3, #2
 574:	add	r3, r2, r3
 578:	ldr	r3, [r3]
 57c:	mov	r1, r3
 580:	bl	78c <menor_que>
 584:	mov	r3, r0
 588:	cmp	r3, #0
 58c:	beq	620 <heap_remove+0x224>
 590:	ldr	r3, [fp, #-24]	; 0xffffffe8
 594:	ldr	r2, [r3, #8]
 598:	ldr	r3, [fp, #-12]
 59c:	lsl	r3, r3, #2
 5a0:	add	r3, r2, r3
 5a4:	ldr	r3, [r3]
 5a8:	str	r3, [fp, #-20]	; 0xffffffec
 5ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5b0:	ldr	r2, [r3, #8]
 5b4:	ldr	r3, [fp, #-8]
 5b8:	lsl	r3, r3, #2
 5bc:	add	r2, r2, r3
 5c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5c4:	ldr	r1, [r3, #8]
 5c8:	ldr	r3, [fp, #-12]
 5cc:	lsl	r3, r3, #2
 5d0:	add	r3, r1, r3
 5d4:	ldr	r2, [r2]
 5d8:	str	r2, [r3]
 5dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
 5e0:	ldr	r2, [r3, #8]
 5e4:	ldr	r3, [fp, #-8]
 5e8:	lsl	r3, r3, #2
 5ec:	add	r3, r2, r3
 5f0:	ldr	r2, [fp, #-20]	; 0xffffffec
 5f4:	str	r2, [r3]
 5f8:	ldr	r3, [fp, #-12]
 5fc:	str	r3, [fp, #-8]
 600:	ldr	r3, [fp, #-8]
 604:	lsl	r3, r3, #1
 608:	add	r2, r3, #1
 60c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 610:	ldr	r3, [r3]
 614:	cmp	r2, r3
 618:	blt	4c4 <heap_remove+0xc8>
 61c:	b	624 <heap_remove+0x228>
 620:	nop	{0}
 624:	ldr	r3, [fp, #-16]
 628:	mov	r0, r3
 62c:	sub	sp, fp, #4
 630:	ldr	fp, [sp]
 634:	add	sp, sp, #4
 638:	pop	{pc}		; (ldr pc, [sp], #4)

0000063c <mostraHeap>:
 63c:	str	fp, [sp, #-8]!
 640:	str	lr, [sp, #4]
 644:	add	fp, sp, #4
 648:	sub	sp, sp, #16
 64c:	str	r0, [fp, #-16]
 650:	str	r1, [fp, #-20]	; 0xffffffec
 654:	mov	r3, #0
 658:	str	r3, [fp, #-12]
 65c:	ldr	r3, [fp, #-16]
 660:	ldr	r3, [r3]
 664:	ldr	r2, [fp, #-20]	; 0xffffffec
 668:	cmp	r2, r3
 66c:	bge	764 <mostraHeap+0x128>
 670:	ldr	r3, [fp, #-20]	; 0xffffffec
 674:	str	r3, [fp, #-8]
 678:	b	6a0 <mostraHeap+0x64>
 67c:	ldr	r3, [fp, #-8]
 680:	sub	r3, r3, #1
 684:	lsr	r2, r3, #31
 688:	add	r3, r2, r3
 68c:	asr	r3, r3, #1
 690:	str	r3, [fp, #-8]
 694:	ldr	r3, [fp, #-12]
 698:	add	r3, r3, #1
 69c:	str	r3, [fp, #-12]
 6a0:	ldr	r3, [fp, #-8]
 6a4:	cmp	r3, #0
 6a8:	bgt	67c <mostraHeap+0x40>
 6ac:	ldr	r3, [fp, #-20]	; 0xffffffec
 6b0:	lsl	r3, r3, #1
 6b4:	add	r3, r3, #1
 6b8:	mov	r1, r3
 6bc:	ldr	r0, [fp, #-16]
 6c0:	bl	63c <mostraHeap>
 6c4:	mov	r3, #0
 6c8:	str	r3, [fp, #-8]
 6cc:	b	6e8 <mostraHeap+0xac>
 6d0:	movw	r0, #0
 6d4:	movt	r0, #0
 6d8:	bl	0 <printf>
 6dc:	ldr	r3, [fp, #-8]
 6e0:	add	r3, r3, #1
 6e4:	str	r3, [fp, #-8]
 6e8:	ldr	r2, [fp, #-12]
 6ec:	mov	r3, r2
 6f0:	lsl	r3, r3, #1
 6f4:	add	r3, r3, r2
 6f8:	ldr	r2, [fp, #-8]
 6fc:	cmp	r2, r3
 700:	blt	6d0 <mostraHeap+0x94>
 704:	ldr	r3, [fp, #-16]
 708:	ldr	r2, [r3, #8]
 70c:	ldr	r3, [fp, #-20]	; 0xffffffec
 710:	lsl	r3, r3, #2
 714:	add	r3, r2, r3
 718:	ldr	r3, [r3]
 71c:	ldr	r1, [r3, #4]
 720:	ldr	r3, [fp, #-16]
 724:	ldr	r2, [r3, #8]
 728:	ldr	r3, [fp, #-20]	; 0xffffffec
 72c:	lsl	r3, r3, #2
 730:	add	r3, r2, r3
 734:	ldr	r3, [r3]
 738:	ldr	r3, [r3]
 73c:	mov	r2, r3
 740:	movw	r0, #0
 744:	movt	r0, #0
 748:	bl	0 <printf>
 74c:	ldr	r3, [fp, #-20]	; 0xffffffec
 750:	add	r3, r3, #1
 754:	lsl	r3, r3, #1
 758:	mov	r1, r3
 75c:	ldr	r0, [fp, #-16]
 760:	bl	63c <mostraHeap>
 764:	ldr	r3, [fp, #-12]
 768:	cmp	r3, #0
 76c:	bne	778 <mostraHeap+0x13c>
 770:	mov	r0, #10
 774:	bl	0 <putchar>
 778:	nop	{0}
 77c:	sub	sp, fp, #4
 780:	ldr	fp, [sp]
 784:	add	sp, sp, #4
 788:	pop	{pc}		; (ldr pc, [sp], #4)

0000078c <menor_que>:
 78c:	push	{fp}		; (str fp, [sp, #-4]!)
 790:	add	fp, sp, #0
 794:	sub	sp, sp, #12
 798:	str	r0, [fp, #-8]
 79c:	str	r1, [fp, #-12]
 7a0:	ldr	r3, [fp, #-8]
 7a4:	cmp	r3, #0
 7a8:	beq	7b8 <menor_que+0x2c>
 7ac:	ldr	r3, [fp, #-12]
 7b0:	cmp	r3, #0
 7b4:	bne	7c0 <menor_que+0x34>
 7b8:	mov	r3, #0
 7bc:	b	7e0 <menor_que+0x54>
 7c0:	ldr	r3, [fp, #-8]
 7c4:	ldr	r2, [r3]
 7c8:	ldr	r3, [fp, #-12]
 7cc:	ldr	r3, [r3]
 7d0:	cmp	r2, r3
 7d4:	movlt	r3, #1
 7d8:	movge	r3, #0
 7dc:	uxtb	r3, r3
 7e0:	mov	r0, r3
 7e4:	add	sp, fp, #0
 7e8:	pop	{fp}		; (ldr fp, [sp], #4)
 7ec:	bx	lr
