
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-debug.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <ff_printf>:
   0:	push	{r0, r1, r2, r3}
   4:	ldr	r1, [pc, #44]	; 38 <ff_printf+0x38>
   8:	push	{lr}		; (str lr, [sp, #-4]!)
   c:	sub	sp, sp, #12
  10:	add	r3, sp, #20
  14:	mov	r2, r3
  18:	ldr	r0, [r1]
  1c:	ldr	r1, [sp, #16]
  20:	str	r3, [sp, #4]
  24:	bl	0 <vfprintf>
  28:	add	sp, sp, #12
  2c:	pop	{lr}		; (ldr lr, [sp], #4)
  30:	add	sp, sp, #16
  34:	bx	lr
  38:	.word	0x00000000

0000003c <print_escaped>:
  3c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40:	subs	r4, r1, #0
  44:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  48:	mov	fp, r0
  4c:	ldr	r8, [pc, #220]	; 130 <print_escaped+0xf4>
  50:	ldr	sl, [pc, #220]	; 134 <print_escaped+0xf8>
  54:	ldr	r9, [pc, #220]	; 138 <print_escaped+0xfc>
  58:	ldr	r7, [pc, #220]	; 13c <print_escaped+0x100>
  5c:	ldr	r6, [pc, #220]	; 140 <print_escaped+0x104>
  60:	ldr	r5, [pc, #220]	; 144 <print_escaped+0x108>
  64:	add	r4, r0, r4
  68:	b	98 <print_escaped+0x5c>
  6c:	cmp	r1, #12
  70:	beq	124 <print_escaped+0xe8>
  74:	bcc	118 <print_escaped+0xdc>
  78:	cmp	r1, #13
  7c:	beq	10c <print_escaped+0xd0>
  80:	cmp	r1, #92	; 0x5c
  84:	bne	f4 <print_escaped+0xb8>
  88:	ldr	r0, [pc, #184]	; 148 <print_escaped+0x10c>
  8c:	bl	0 <ff_printf>
  90:	cmp	fp, r4
  94:	beq	cc <print_escaped+0x90>
  98:	ldrb	r1, [fp], #1
  9c:	cmp	r1, #10
  a0:	beq	d0 <print_escaped+0x94>
  a4:	bhi	6c <print_escaped+0x30>
  a8:	cmp	r1, #8
  ac:	beq	e8 <print_escaped+0xac>
  b0:	bhi	dc <print_escaped+0xa0>
  b4:	cmp	r1, #7
  b8:	bne	f4 <print_escaped+0xb8>
  bc:	ldr	r0, [pc, #136]	; 14c <print_escaped+0x110>
  c0:	bl	0 <ff_printf>
  c4:	cmp	fp, r4
  c8:	bne	98 <print_escaped+0x5c>
  cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  d0:	mov	r0, r8
  d4:	bl	0 <ff_printf>
  d8:	b	90 <print_escaped+0x54>
  dc:	ldr	r0, [pc, #108]	; 150 <print_escaped+0x114>
  e0:	bl	0 <ff_printf>
  e4:	b	90 <print_escaped+0x54>
  e8:	ldr	r0, [pc, #100]	; 154 <print_escaped+0x118>
  ec:	bl	0 <ff_printf>
  f0:	b	90 <print_escaped+0x54>
  f4:	sub	r3, r1, #32
  f8:	cmp	r3, #94	; 0x5e
  fc:	movls	r0, r9
 100:	movhi	r0, sl
 104:	bl	0 <ff_printf>
 108:	b	90 <print_escaped+0x54>
 10c:	mov	r0, r5
 110:	bl	0 <ff_printf>
 114:	b	90 <print_escaped+0x54>
 118:	mov	r0, r6
 11c:	bl	0 <ff_printf>
 120:	b	90 <print_escaped+0x54>
 124:	mov	r0, r7
 128:	bl	0 <ff_printf>
 12c:	b	90 <print_escaped+0x54>
 130:	.word	0x0000000c
 134:	.word	0x00000024
 138:	.word	0x00000020
 13c:	.word	0x00000014
 140:	.word	0x00000010
 144:	.word	0x00000018
 148:	.word	0x0000001c
 14c:	.word	0x00000000
 150:	.word	0x00000008
 154:	.word	0x00000004

00000158 <fi_printf>:
 158:	push	{r0, r1, r2, r3}
 15c:	ldr	r3, [pc, #124]	; 1e0 <fi_printf+0x88>
 160:	push	{r4, r5, r6, r7, r8, lr}
 164:	sub	sp, sp, #8
 168:	ldr	r4, [r3]
 16c:	cmp	r4, #0
 170:	blt	1cc <fi_printf+0x74>
 174:	ldr	r5, [pc, #104]	; 1e4 <fi_printf+0x8c>
 178:	beq	1a4 <fi_printf+0x4c>
 17c:	ldr	r8, [pc, #100]	; 1e8 <fi_printf+0x90>
 180:	mov	r7, #2
 184:	mov	r6, #1
 188:	ldr	r3, [r5]
 18c:	mov	r2, r7
 190:	mov	r1, r6
 194:	mov	r0, r8
 198:	bl	0 <fwrite>
 19c:	subs	r4, r4, #1
 1a0:	bne	188 <fi_printf+0x30>
 1a4:	add	r3, sp, #36	; 0x24
 1a8:	ldr	r0, [r5]
 1ac:	mov	r2, r3
 1b0:	ldr	r1, [sp, #32]
 1b4:	str	r3, [sp, #4]
 1b8:	bl	0 <vfprintf>
 1bc:	add	sp, sp, #8
 1c0:	pop	{r4, r5, r6, r7, r8, lr}
 1c4:	add	sp, sp, #16
 1c8:	bx	lr
 1cc:	ldr	r3, [pc, #24]	; 1ec <fi_printf+0x94>
 1d0:	mov	r2, #44	; 0x2c
 1d4:	ldr	r1, [pc, #20]	; 1f0 <fi_printf+0x98>
 1d8:	ldr	r0, [pc, #20]	; 1f4 <fi_printf+0x9c>
 1dc:	bl	0 <__assert_fail>
	...
 1e8:	.word	0x0000008c
 1ec:	.word	0x00000000
 1f0:	.word	0x0000002c
 1f4:	.word	0x00000080

000001f8 <print_data>:
 1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1fc:	sub	sp, sp, #636	; 0x27c
 200:	mov	r6, r1
 204:	add	r1, sp, #32
 208:	mov	r5, r0
 20c:	bl	0 <coda_cursor_has_attributes>
 210:	cmp	r0, #0
 214:	bne	6e0 <print_data+0x4e8>
 218:	ldr	r3, [sp, #32]
 21c:	cmp	r3, #0
 220:	bne	694 <print_data+0x49c>
 224:	add	r1, sp, #28
 228:	mov	r0, r5
 22c:	bl	0 <coda_cursor_get_type_class>
 230:	cmp	r0, #0
 234:	bne	68c <print_data+0x494>
 238:	ldr	r3, [sp, #28]
 23c:	cmp	r3, #6
 240:	ldrls	pc, [pc, r3, lsl #2]
 244:	b	2a4 <print_data+0xac>
 248:	.word	0x00000584
 24c:	.word	0x0000037c
 250:	.word	0x000002fc
 254:	.word	0x000002fc
 258:	.word	0x000002fc
 25c:	.word	0x000002fc
 260:	.word	0x000002ac
 264:	mov	r0, r5
 268:	add	r1, sp, #80	; 0x50
 26c:	bl	0 <coda_cursor_read_double>
 270:	cmp	r0, #0
 274:	bne	cd8 <print_data+0xae0>
 278:	vldr	d0, [sp, #80]	; 0x50
 27c:	bl	0 <coda_isNaN>
 280:	cmp	r0, #0
 284:	bne	298 <print_data+0xa0>
 288:	vldr	d0, [sp, #80]	; 0x50
 28c:	bl	0 <coda_isInf>
 290:	cmp	r0, #0
 294:	beq	d30 <print_data+0xb38>
 298:	ldrd	r2, [sp, #80]	; 0x50
 29c:	ldr	r0, [pc, #2840]	; dbc <print_data+0xbc4>
 2a0:	bl	0 <ff_printf>
 2a4:	add	sp, sp, #636	; 0x27c
 2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2ac:	add	r1, sp, #56	; 0x38
 2b0:	mov	r0, r5
 2b4:	bl	0 <coda_cursor_get_special_type>
 2b8:	cmp	r0, #0
 2bc:	bne	7a4 <print_data+0x5ac>
 2c0:	ldr	r0, [sp, #56]	; 0x38
 2c4:	cmp	r0, #0
 2c8:	bne	770 <print_data+0x578>
 2cc:	bl	0 <coda_type_get_special_type_name>
 2d0:	mov	r1, r0
 2d4:	ldr	r0, [pc, #2788]	; dc0 <print_data+0xbc8>
 2d8:	bl	158 <fi_printf>
 2dc:	ldr	r3, [sp, #56]	; 0x38
 2e0:	cmp	r3, #3
 2e4:	ldrls	pc, [pc, r3, lsl #2]
 2e8:	b	2a4 <print_data+0xac>
 2ec:	.word	0x000009d0
 2f0:	.word	0x00000a0c
 2f4:	.word	0x00000264
 2f8:	.word	0x000009dc
 2fc:	add	r1, sp, #56	; 0x38
 300:	mov	r0, r5
 304:	bl	0 <coda_cursor_has_ascii_content>
 308:	cmp	r0, #0
 30c:	bne	7ac <print_data+0x5b4>
 310:	ldr	r3, [sp, #56]	; 0x38
 314:	cmp	r3, #0
 318:	bne	6f8 <print_data+0x500>
 31c:	add	r1, sp, #48	; 0x30
 320:	mov	r0, r5
 324:	bl	0 <coda_cursor_get_read_type>
 328:	cmp	r0, #0
 32c:	bne	6f0 <print_data+0x4f8>
 330:	ldr	r3, [sp, #48]	; 0x30
 334:	add	r3, r3, #1
 338:	cmp	r3, #13
 33c:	ldrls	pc, [pc, r3, lsl #2]
 340:	b	2a4 <print_data+0xac>
 344:	.word	0x00000bb0
 348:	.word	0x00000a30
 34c:	.word	0x00000a54
 350:	.word	0x00000a30
 354:	.word	0x00000a54
 358:	.word	0x00000a30
 35c:	.word	0x00000a54
 360:	.word	0x00000aa8
 364:	.word	0x00000bd0
 368:	.word	0x00000a78
 36c:	.word	0x00000a78
 370:	.word	0x00000bb0
 374:	.word	0x00000bb0
 378:	.word	0x00000ad8
 37c:	add	r2, sp, #80	; 0x50
 380:	add	r1, sp, #44	; 0x2c
 384:	mov	r0, r5
 388:	bl	0 <coda_cursor_get_array_dim>
 38c:	cmp	r0, #0
 390:	bne	768 <print_data+0x570>
 394:	ldr	r0, [sp, #44]	; 0x2c
 398:	cmp	r0, #0
 39c:	blt	2a4 <print_data+0xac>
 3a0:	beq	cc4 <print_data+0xacc>
 3a4:	add	r3, sp, #80	; 0x50
 3a8:	add	r0, r3, r0, lsl #2
 3ac:	add	r2, sp, #112	; 0x70
 3b0:	mov	r9, #1
 3b4:	mov	ip, #0
 3b8:	ldr	r1, [r3], #4
 3bc:	str	ip, [r2], #4
 3c0:	cmp	r0, r3
 3c4:	mul	r9, r1, r9
 3c8:	bne	3b8 <print_data+0x1c0>
 3cc:	cmp	r9, #0
 3d0:	subgt	r3, r9, #1
 3d4:	strgt	r3, [sp, #20]
 3d8:	ble	2a4 <print_data+0xac>
 3dc:	mov	r0, r5
 3e0:	bl	0 <coda_cursor_goto_first_array_element>
 3e4:	cmp	r0, #0
 3e8:	bne	cbc <print_data+0xac4>
 3ec:	ldr	r3, [pc, #2512]	; dc4 <print_data+0xbcc>
 3f0:	ldr	r2, [pc, #2512]	; dc8 <print_data+0xbd0>
 3f4:	ldr	r4, [pc, #2512]	; dcc <print_data+0xbd4>
 3f8:	ldr	r8, [pc, #2512]	; dd0 <print_data+0xbd8>
 3fc:	str	r9, [sp, #8]
 400:	mov	sl, #0
 404:	mov	r9, r2
 408:	mov	fp, r3
 40c:	str	r6, [sp, #16]
 410:	ldr	r0, [pc, #2492]	; dd4 <print_data+0xbdc>
 414:	bl	158 <fi_printf>
 418:	ldr	r3, [sp, #44]	; 0x2c
 41c:	cmp	r3, #0
 420:	addgt	r7, sp, #112	; 0x70
 424:	movgt	r6, #0
 428:	bgt	43c <print_data+0x244>
 42c:	b	470 <print_data+0x278>
 430:	add	r6, r6, #1
 434:	cmp	r6, r3
 438:	bge	470 <print_data+0x278>
 43c:	ldr	r1, [r7], #4
 440:	mov	r0, r8
 444:	bl	0 <ff_printf>
 448:	ldr	r3, [sp, #44]	; 0x2c
 44c:	sub	r2, r3, #1
 450:	cmp	r2, r6
 454:	ble	430 <print_data+0x238>
 458:	ldr	r0, [pc, #2424]	; dd8 <print_data+0xbe0>
 45c:	bl	0 <ff_printf>
 460:	ldr	r3, [sp, #44]	; 0x2c
 464:	add	r6, r6, #1
 468:	cmp	r6, r3
 46c:	blt	43c <print_data+0x244>
 470:	ldr	r0, [pc, #2404]	; ddc <print_data+0xbe4>
 474:	bl	0 <ff_printf>
 478:	ldr	r3, [fp]
 47c:	cmp	r3, #0
 480:	bne	7bc <print_data+0x5c4>
 484:	ldr	r0, [pc, #2388]	; de0 <print_data+0xbe8>
 488:	bl	0 <ff_printf>
 48c:	ldr	r2, [r9]
 490:	ldr	r0, [sp, #16]
 494:	ldr	r3, [r4]
 498:	cmp	r0, r2
 49c:	mov	r1, r0
 4a0:	movge	r1, #0
 4a4:	movlt	r1, #1
 4a8:	add	r3, r3, #1
 4ac:	orrs	r2, r1, r2, lsr #31
 4b0:	str	r3, [r4]
 4b4:	beq	824 <print_data+0x62c>
 4b8:	add	r1, r0, #1
 4bc:	mov	r0, r5
 4c0:	bl	1f8 <print_data>
 4c4:	ldr	r3, [r4]
 4c8:	ldr	r0, [sp, #44]	; 0x2c
 4cc:	sub	r3, r3, #1
 4d0:	subs	r1, r0, #1
 4d4:	str	r3, [r4]
 4d8:	bmi	548 <print_data+0x350>
 4dc:	add	r3, sp, #632	; 0x278
 4e0:	add	r2, r3, r1, lsl #2
 4e4:	ldr	r3, [r2, #-520]	; 0xfffffdf8
 4e8:	ldr	ip, [r2, #-552]	; 0xfffffdd8
 4ec:	add	r3, r3, #1
 4f0:	cmp	ip, r3
 4f4:	str	r3, [r2, #-520]	; 0xfffffdf8
 4f8:	bne	548 <print_data+0x350>
 4fc:	sub	r0, r0, #-1073741822	; 0xc0000002
 500:	add	r3, sp, #632	; 0x278
 504:	lsl	r0, r0, #2
 508:	add	r2, r3, r0
 50c:	add	r3, sp, #80	; 0x50
 510:	mov	lr, #0
 514:	sub	r2, r2, #516	; 0x204
 518:	add	r0, r3, r0
 51c:	b	538 <print_data+0x340>
 520:	ldr	r3, [r2]
 524:	ldr	ip, [r0], #-4
 528:	add	r3, r3, #1
 52c:	cmp	r3, ip
 530:	str	r3, [r2]
 534:	bne	548 <print_data+0x350>
 538:	sub	r1, r1, #1
 53c:	cmn	r1, #1
 540:	str	lr, [r2], #-4
 544:	bne	520 <print_data+0x328>
 548:	ldr	r3, [sp, #20]
 54c:	cmp	sl, r3
 550:	bge	564 <print_data+0x36c>
 554:	mov	r0, r5
 558:	bl	0 <coda_cursor_goto_next_array_element>
 55c:	cmp	r0, #0
 560:	bne	7b4 <print_data+0x5bc>
 564:	ldr	r3, [sp, #8]
 568:	add	sl, sl, #1
 56c:	cmp	r3, sl
 570:	bgt	410 <print_data+0x218>
 574:	mov	r0, r5
 578:	bl	0 <coda_cursor_goto_parent>
 57c:	add	sp, sp, #636	; 0x27c
 580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 584:	add	r1, sp, #36	; 0x24
 588:	mov	r0, r5
 58c:	bl	0 <coda_cursor_get_num_elements>
 590:	cmp	r0, #0
 594:	bne	6e8 <print_data+0x4f0>
 598:	ldr	r3, [sp, #36]	; 0x24
 59c:	cmp	r3, #0
 5a0:	ble	2a4 <print_data+0xac>
 5a4:	add	r1, sp, #40	; 0x28
 5a8:	mov	r0, r5
 5ac:	bl	0 <coda_cursor_get_type>
 5b0:	cmp	r0, #0
 5b4:	bne	cb4 <print_data+0xabc>
 5b8:	add	r1, sp, #44	; 0x2c
 5bc:	ldr	r0, [sp, #40]	; 0x28
 5c0:	bl	0 <coda_type_get_record_union_status>
 5c4:	cmp	r0, #0
 5c8:	bne	cac <print_data+0xab4>
 5cc:	ldr	r3, [sp, #44]	; 0x2c
 5d0:	cmp	r3, #0
 5d4:	beq	840 <print_data+0x648>
 5d8:	add	r1, sp, #48	; 0x30
 5dc:	mov	r0, r5
 5e0:	bl	0 <coda_cursor_get_available_union_field_index>
 5e4:	cmp	r0, #0
 5e8:	bne	c10 <print_data+0xa18>
 5ec:	add	r2, sp, #56	; 0x38
 5f0:	ldr	r1, [sp, #48]	; 0x30
 5f4:	ldr	r0, [sp, #40]	; 0x28
 5f8:	bl	0 <coda_type_get_record_field_name>
 5fc:	cmp	r0, #0
 600:	bne	c08 <print_data+0xa10>
 604:	ldr	r1, [sp, #48]	; 0x30
 608:	mov	r0, r5
 60c:	bl	0 <coda_cursor_goto_record_field_by_index>
 610:	cmp	r0, #0
 614:	bne	c80 <print_data+0xa88>
 618:	ldr	r1, [sp, #56]	; 0x38
 61c:	ldr	r0, [pc, #1984]	; de4 <print_data+0xbec>
 620:	bl	158 <fi_printf>
 624:	ldr	r3, [pc, #1944]	; dc4 <print_data+0xbcc>
 628:	ldr	r3, [r3]
 62c:	cmp	r3, #0
 630:	bne	c18 <print_data+0xa20>
 634:	ldr	r0, [pc, #1956]	; de0 <print_data+0xbe8>
 638:	bl	0 <ff_printf>
 63c:	ldr	r3, [pc, #1924]	; dc8 <print_data+0xbd0>
 640:	ldr	r4, [pc, #1924]	; dcc <print_data+0xbd4>
 644:	ldr	r2, [r3]
 648:	ldr	r3, [r4]
 64c:	cmp	r6, r2
 650:	movge	r1, #0
 654:	movlt	r1, #1
 658:	add	r3, r3, #1
 65c:	str	r3, [r4]
 660:	orrs	r2, r1, r2, lsr #31
 664:	beq	c88 <print_data+0xa90>
 668:	add	r1, r6, #1
 66c:	mov	r0, r5
 670:	bl	1f8 <print_data>
 674:	ldr	r3, [r4]
 678:	mov	r0, r5
 67c:	sub	r3, r3, #1
 680:	str	r3, [r4]
 684:	bl	0 <coda_cursor_goto_parent>
 688:	b	2a4 <print_data+0xac>
 68c:	bl	0 <handle_coda_error>
 690:	b	238 <print_data+0x40>
 694:	mov	r0, r5
 698:	bl	0 <coda_cursor_goto_attributes>
 69c:	cmp	r0, #0
 6a0:	bne	830 <print_data+0x638>
 6a4:	ldr	r4, [pc, #1824]	; dcc <print_data+0xbd4>
 6a8:	ldr	r0, [pc, #1848]	; de8 <print_data+0xbf0>
 6ac:	bl	158 <fi_printf>
 6b0:	ldr	r3, [r4]
 6b4:	mov	r0, r5
 6b8:	add	r3, r3, #1
 6bc:	mov	r1, r6
 6c0:	str	r3, [r4]
 6c4:	bl	1f8 <print_data>
 6c8:	ldr	r3, [r4]
 6cc:	mov	r0, r5
 6d0:	sub	r3, r3, #1
 6d4:	str	r3, [r4]
 6d8:	bl	0 <coda_cursor_goto_parent>
 6dc:	b	224 <print_data+0x2c>
 6e0:	bl	0 <handle_coda_error>
 6e4:	b	218 <print_data+0x20>
 6e8:	bl	0 <handle_coda_error>
 6ec:	b	598 <print_data+0x3a0>
 6f0:	bl	0 <handle_coda_error>
 6f4:	b	330 <print_data+0x138>
 6f8:	add	r1, sp, #112	; 0x70
 6fc:	mov	r0, r5
 700:	bl	0 <coda_cursor_get_string_length>
 704:	cmp	r0, #0
 708:	bne	c94 <print_data+0xa9c>
 70c:	ldr	r0, [sp, #112]	; 0x70
 710:	add	r0, r0, #1
 714:	bl	0 <malloc>
 718:	subs	r4, r0, #0
 71c:	beq	d5c <print_data+0xb64>
 720:	ldr	r2, [sp, #112]	; 0x70
 724:	mov	r1, r4
 728:	add	r2, r2, #1
 72c:	mov	r0, r5
 730:	bl	0 <coda_cursor_read_string>
 734:	cmp	r0, #0
 738:	bne	ca4 <print_data+0xaac>
 73c:	ldr	r0, [pc, #1704]	; dec <print_data+0xbf4>
 740:	bl	158 <fi_printf>
 744:	ldr	r1, [sp, #112]	; 0x70
 748:	mov	r0, r4
 74c:	bl	3c <print_escaped>
 750:	ldr	r1, [sp, #112]	; 0x70
 754:	ldr	r0, [pc, #1684]	; df0 <print_data+0xbf8>
 758:	bl	0 <ff_printf>
 75c:	mov	r0, r4
 760:	bl	0 <free>
 764:	b	31c <print_data+0x124>
 768:	bl	0 <handle_coda_error>
 76c:	b	394 <print_data+0x19c>
 770:	mov	r2, #520	; 0x208
 774:	mov	r1, r5
 778:	add	r0, sp, #112	; 0x70
 77c:	bl	0 <memcpy>
 780:	add	r0, sp, #112	; 0x70
 784:	bl	0 <coda_cursor_use_base_type_of_special_type>
 788:	cmp	r0, #0
 78c:	bne	c9c <print_data+0xaa4>
 790:	add	r0, sp, #112	; 0x70
 794:	mov	r1, r6
 798:	bl	1f8 <print_data>
 79c:	ldr	r0, [sp, #56]	; 0x38
 7a0:	b	2cc <print_data+0xd4>
 7a4:	bl	0 <handle_coda_error>
 7a8:	b	2c0 <print_data+0xc8>
 7ac:	bl	0 <handle_coda_error>
 7b0:	b	310 <print_data+0x118>
 7b4:	bl	0 <handle_coda_error>
 7b8:	b	564 <print_data+0x36c>
 7bc:	add	r1, sp, #48	; 0x30
 7c0:	mov	r0, r5
 7c4:	bl	0 <coda_cursor_get_file_bit_offset>
 7c8:	cmp	r0, #0
 7cc:	bne	838 <print_data+0x640>
 7d0:	ldrd	r2, [sp, #48]	; 0x30
 7d4:	cmp	r2, #0
 7d8:	sbcs	r1, r3, #0
 7dc:	blt	484 <print_data+0x28c>
 7e0:	lsr	r0, r2, #3
 7e4:	orr	r0, r0, r3, lsl #29
 7e8:	asr	r1, r3, #3
 7ec:	add	r2, sp, #56	; 0x38
 7f0:	bl	0 <coda_str64>
 7f4:	add	r1, sp, #56	; 0x38
 7f8:	ldr	r0, [pc, #1524]	; df4 <print_data+0xbfc>
 7fc:	bl	0 <ff_printf>
 800:	ldrd	r2, [sp, #48]	; 0x30
 804:	mov	r1, #0
 808:	and	r0, r2, #7
 80c:	orrs	r1, r0, r1
 810:	beq	484 <print_data+0x28c>
 814:	and	r1, r2, #7
 818:	ldr	r0, [pc, #1496]	; df8 <print_data+0xc00>
 81c:	bl	0 <ff_printf>
 820:	b	484 <print_data+0x28c>
 824:	ldr	r0, [pc, #1488]	; dfc <print_data+0xc04>
 828:	bl	158 <fi_printf>
 82c:	b	4c4 <print_data+0x2cc>
 830:	bl	0 <handle_coda_error>
 834:	b	6a4 <print_data+0x4ac>
 838:	bl	0 <handle_coda_error>
 83c:	b	7d0 <print_data+0x5d8>
 840:	mov	r0, r5
 844:	bl	0 <coda_cursor_goto_first_record_field>
 848:	cmp	r0, #0
 84c:	bne	c00 <print_data+0xa08>
 850:	ldr	r3, [sp, #36]	; 0x24
 854:	mov	r1, #0
 858:	cmp	r3, r1
 85c:	str	r1, [sp, #48]	; 0x30
 860:	ble	574 <print_data+0x37c>
 864:	ldr	r3, [pc, #1368]	; dc4 <print_data+0xbcc>
 868:	ldr	r2, [pc, #1368]	; dc8 <print_data+0xbd0>
 86c:	ldr	r4, [pc, #1368]	; dcc <print_data+0xbd4>
 870:	ldr	r8, [pc, #1388]	; de4 <print_data+0xbec>
 874:	ldr	r7, [pc, #1380]	; de0 <print_data+0xbe8>
 878:	ldr	r9, [pc, #1404]	; dfc <print_data+0xc04>
 87c:	mov	sl, r2
 880:	mov	fp, r3
 884:	b	908 <print_data+0x710>
 888:	ldr	r1, [sp, #56]	; 0x38
 88c:	mov	r0, r8
 890:	bl	158 <fi_printf>
 894:	ldr	r3, [fp]
 898:	cmp	r3, #0
 89c:	bne	940 <print_data+0x748>
 8a0:	mov	r0, r7
 8a4:	bl	0 <ff_printf>
 8a8:	ldr	r2, [sl]
 8ac:	ldr	r3, [r4]
 8b0:	cmp	r6, r2
 8b4:	movge	r1, #0
 8b8:	movlt	r1, #1
 8bc:	add	r3, r3, #1
 8c0:	str	r3, [r4]
 8c4:	orrs	r2, r1, r2, lsr #31
 8c8:	beq	9b4 <print_data+0x7bc>
 8cc:	add	r1, r6, #1
 8d0:	mov	r0, r5
 8d4:	bl	1f8 <print_data>
 8d8:	ldr	r2, [sp, #36]	; 0x24
 8dc:	ldr	r3, [r4]
 8e0:	ldr	r1, [sp, #48]	; 0x30
 8e4:	sub	r0, r2, #1
 8e8:	sub	r3, r3, #1
 8ec:	cmp	r0, r1
 8f0:	str	r3, [r4]
 8f4:	bgt	924 <print_data+0x72c>
 8f8:	add	r1, r1, #1
 8fc:	cmp	r1, r2
 900:	str	r1, [sp, #48]	; 0x30
 904:	bge	574 <print_data+0x37c>
 908:	add	r2, sp, #56	; 0x38
 90c:	ldr	r0, [sp, #40]	; 0x28
 910:	bl	0 <coda_type_get_record_field_name>
 914:	cmp	r0, #0
 918:	beq	888 <print_data+0x690>
 91c:	bl	0 <handle_coda_error>
 920:	b	888 <print_data+0x690>
 924:	mov	r0, r5
 928:	bl	0 <coda_cursor_goto_next_record_field>
 92c:	cmp	r0, #0
 930:	bne	9c0 <print_data+0x7c8>
 934:	ldr	r2, [sp, #36]	; 0x24
 938:	ldr	r1, [sp, #48]	; 0x30
 93c:	b	8f8 <print_data+0x700>
 940:	add	r1, sp, #80	; 0x50
 944:	mov	r0, r5
 948:	bl	0 <coda_cursor_get_file_bit_offset>
 94c:	cmp	r0, #0
 950:	bne	9c8 <print_data+0x7d0>
 954:	ldrd	r2, [sp, #80]	; 0x50
 958:	cmp	r2, #0
 95c:	sbcs	r1, r3, #0
 960:	blt	8a0 <print_data+0x6a8>
 964:	strd	r2, [sp, #8]
 968:	add	r3, sp, #112	; 0x70
 96c:	lsr	r0, r2, #3
 970:	mov	r2, r3
 974:	ldr	r3, [sp, #12]
 978:	orr	r0, r0, r3, lsl #29
 97c:	asr	r1, r3, #3
 980:	bl	0 <coda_str64>
 984:	add	r1, sp, #112	; 0x70
 988:	ldr	r0, [pc, #1124]	; df4 <print_data+0xbfc>
 98c:	bl	0 <ff_printf>
 990:	ldrd	r2, [sp, #80]	; 0x50
 994:	mov	r1, #0
 998:	and	r0, r2, #7
 99c:	orrs	r1, r0, r1
 9a0:	beq	8a0 <print_data+0x6a8>
 9a4:	and	r1, r2, #7
 9a8:	ldr	r0, [pc, #1096]	; df8 <print_data+0xc00>
 9ac:	bl	0 <ff_printf>
 9b0:	b	8a0 <print_data+0x6a8>
 9b4:	mov	r0, r9
 9b8:	bl	158 <fi_printf>
 9bc:	b	8d8 <print_data+0x6e0>
 9c0:	bl	0 <handle_coda_error>
 9c4:	b	934 <print_data+0x73c>
 9c8:	bl	0 <handle_coda_error>
 9cc:	b	954 <print_data+0x75c>
 9d0:	ldr	r0, [pc, #1032]	; de0 <print_data+0xbe8>
 9d4:	bl	0 <ff_printf>
 9d8:	b	2a4 <print_data+0xac>
 9dc:	mov	r0, r5
 9e0:	add	r2, sp, #112	; 0x70
 9e4:	add	r1, sp, #80	; 0x50
 9e8:	bl	0 <coda_cursor_read_complex_double_split>
 9ec:	cmp	r0, #0
 9f0:	bne	cd0 <print_data+0xad8>
 9f4:	ldrd	r4, [sp, #112]	; 0x70
 9f8:	ldrd	r2, [sp, #80]	; 0x50
 9fc:	ldr	r0, [pc, #1020]	; e00 <print_data+0xc08>
 a00:	strd	r4, [sp]
 a04:	bl	0 <ff_printf>
 a08:	b	2a4 <print_data+0xac>
 a0c:	mov	r0, r5
 a10:	add	r1, sp, #112	; 0x70
 a14:	bl	0 <coda_cursor_read_double>
 a18:	cmp	r0, #0
 a1c:	bne	ce0 <print_data+0xae8>
 a20:	ldrd	r2, [sp, #112]	; 0x70
 a24:	ldr	r0, [pc, #984]	; e04 <print_data+0xc0c>
 a28:	bl	0 <ff_printf>
 a2c:	b	2a4 <print_data+0xac>
 a30:	mov	r0, r5
 a34:	add	r1, sp, #112	; 0x70
 a38:	bl	0 <coda_cursor_read_int32>
 a3c:	cmp	r0, #0
 a40:	bne	cf0 <print_data+0xaf8>
 a44:	ldr	r1, [sp, #112]	; 0x70
 a48:	ldr	r0, [pc, #952]	; e08 <print_data+0xc10>
 a4c:	bl	158 <fi_printf>
 a50:	b	2a4 <print_data+0xac>
 a54:	mov	r0, r5
 a58:	add	r1, sp, #112	; 0x70
 a5c:	bl	0 <coda_cursor_read_uint32>
 a60:	cmp	r0, #0
 a64:	bne	d00 <print_data+0xb08>
 a68:	ldr	r1, [sp, #112]	; 0x70
 a6c:	ldr	r0, [pc, #920]	; e0c <print_data+0xc14>
 a70:	bl	158 <fi_printf>
 a74:	b	2a4 <print_data+0xac>
 a78:	mov	r0, r5
 a7c:	add	r1, sp, #112	; 0x70
 a80:	bl	0 <coda_cursor_read_double>
 a84:	cmp	r0, #0
 a88:	bne	cf8 <print_data+0xb00>
 a8c:	ldr	r3, [sp, #48]	; 0x30
 a90:	cmp	r3, #8
 a94:	ldrd	r2, [sp, #112]	; 0x70
 a98:	ldreq	r0, [pc, #880]	; e10 <print_data+0xc18>
 a9c:	ldrne	r0, [pc, #864]	; e04 <print_data+0xc0c>
 aa0:	bl	158 <fi_printf>
 aa4:	b	2a4 <print_data+0xac>
 aa8:	mov	r0, r5
 aac:	add	r1, sp, #80	; 0x50
 ab0:	bl	0 <coda_cursor_read_int64>
 ab4:	cmp	r0, #0
 ab8:	bne	d08 <print_data+0xb10>
 abc:	ldrd	r0, [sp, #80]	; 0x50
 ac0:	add	r2, sp, #112	; 0x70
 ac4:	bl	0 <coda_str64>
 ac8:	add	r1, sp, #112	; 0x70
 acc:	ldr	r0, [pc, #832]	; e14 <print_data+0xc1c>
 ad0:	bl	158 <fi_printf>
 ad4:	b	2a4 <print_data+0xac>
 ad8:	add	r1, sp, #80	; 0x50
 adc:	mov	r0, r5
 ae0:	bl	0 <coda_cursor_get_bit_size>
 ae4:	cmp	r0, #0
 ae8:	bne	d28 <print_data+0xb30>
 aec:	ldrd	r6, [sp, #80]	; 0x50
 af0:	mov	r1, #0
 af4:	and	r0, r6, #7
 af8:	orrs	r3, r0, r1
 afc:	lsr	r8, r6, #3
 b00:	movne	r1, #1
 b04:	moveq	r1, #0
 b08:	orr	r8, r8, r7, lsl #29
 b0c:	adds	r8, r8, r1
 b10:	mov	r0, r8
 b14:	bl	0 <malloc>
 b18:	subs	sl, r0, #0
 b1c:	beq	d94 <print_data+0xb9c>
 b20:	strd	r6, [sp]
 b24:	mov	r0, r5
 b28:	mov	r2, #0
 b2c:	mov	r3, #0
 b30:	mov	r1, sl
 b34:	bl	0 <coda_cursor_read_bits>
 b38:	cmp	r0, #0
 b3c:	bne	d20 <print_data+0xb28>
 b40:	ldr	r0, [pc, #676]	; dec <print_data+0xbf4>
 b44:	bl	158 <fi_printf>
 b48:	mov	r1, r8
 b4c:	mov	r0, sl
 b50:	bl	3c <print_escaped>
 b54:	ldr	r0, [pc, #700]	; e18 <print_data+0xc20>
 b58:	bl	0 <ff_printf>
 b5c:	ldr	r0, [sp, #80]	; 0x50
 b60:	ldr	r1, [sp, #84]	; 0x54
 b64:	add	r2, sp, #112	; 0x70
 b68:	lsr	r0, r0, #3
 b6c:	orr	r0, r0, r1, lsl #29
 b70:	asr	r1, r1, #3
 b74:	bl	0 <coda_str64>
 b78:	add	r1, sp, #112	; 0x70
 b7c:	ldr	r0, [pc, #664]	; e1c <print_data+0xc24>
 b80:	bl	0 <ff_printf>
 b84:	ldrd	r2, [sp, #80]	; 0x50
 b88:	mov	r1, #0
 b8c:	and	r0, r2, #7
 b90:	orrs	r1, r0, r1
 b94:	bne	d10 <print_data+0xb18>
 b98:	ldr	r0, [pc, #640]	; e20 <print_data+0xc28>
 b9c:	bl	0 <ff_printf>
 ba0:	mov	r0, sl
 ba4:	add	sp, sp, #636	; 0x27c
 ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 bac:	b	0 <free>
 bb0:	ldr	r3, [sp, #56]	; 0x38
 bb4:	cmp	r3, #0
 bb8:	bne	2a4 <print_data+0xac>
 bbc:	ldr	r3, [pc, #608]	; e24 <print_data+0xc2c>
 bc0:	mov	r2, #548	; 0x224
 bc4:	ldr	r1, [pc, #604]	; e28 <print_data+0xc30>
 bc8:	ldr	r0, [pc, #604]	; e2c <print_data+0xc34>
 bcc:	bl	0 <__assert_fail>
 bd0:	mov	r0, r5
 bd4:	add	r1, sp, #80	; 0x50
 bd8:	bl	0 <coda_cursor_read_uint64>
 bdc:	cmp	r0, #0
 be0:	bne	ce8 <print_data+0xaf0>
 be4:	ldrd	r0, [sp, #80]	; 0x50
 be8:	add	r2, sp, #112	; 0x70
 bec:	bl	0 <coda_str64u>
 bf0:	add	r1, sp, #112	; 0x70
 bf4:	ldr	r0, [pc, #536]	; e14 <print_data+0xc1c>
 bf8:	bl	158 <fi_printf>
 bfc:	b	2a4 <print_data+0xac>
 c00:	bl	0 <handle_coda_error>
 c04:	b	850 <print_data+0x658>
 c08:	bl	0 <handle_coda_error>
 c0c:	b	604 <print_data+0x40c>
 c10:	bl	0 <handle_coda_error>
 c14:	b	5ec <print_data+0x3f4>
 c18:	add	r1, sp, #80	; 0x50
 c1c:	mov	r0, r5
 c20:	bl	0 <coda_cursor_get_file_bit_offset>
 c24:	cmp	r0, #0
 c28:	bne	d54 <print_data+0xb5c>
 c2c:	ldrd	r8, [sp, #80]	; 0x50
 c30:	cmp	r8, #0
 c34:	sbcs	r3, r9, #0
 c38:	blt	634 <print_data+0x43c>
 c3c:	lsr	r0, r8, #3
 c40:	add	r2, sp, #112	; 0x70
 c44:	orr	r0, r0, r9, lsl #29
 c48:	asr	r1, r9, #3
 c4c:	bl	0 <coda_str64>
 c50:	add	r1, sp, #112	; 0x70
 c54:	ldr	r0, [pc, #408]	; df4 <print_data+0xbfc>
 c58:	bl	0 <ff_printf>
 c5c:	ldrd	r2, [sp, #80]	; 0x50
 c60:	mov	r1, #0
 c64:	and	r0, r2, #7
 c68:	orrs	r1, r0, r1
 c6c:	beq	634 <print_data+0x43c>
 c70:	and	r1, r2, #7
 c74:	ldr	r0, [pc, #380]	; df8 <print_data+0xc00>
 c78:	bl	0 <ff_printf>
 c7c:	b	634 <print_data+0x43c>
 c80:	bl	0 <handle_coda_error>
 c84:	b	618 <print_data+0x420>
 c88:	ldr	r0, [pc, #364]	; dfc <print_data+0xc04>
 c8c:	bl	158 <fi_printf>
 c90:	b	674 <print_data+0x47c>
 c94:	bl	0 <handle_coda_error>
 c98:	b	70c <print_data+0x514>
 c9c:	bl	0 <handle_coda_error>
 ca0:	b	790 <print_data+0x598>
 ca4:	bl	0 <handle_coda_error>
 ca8:	b	73c <print_data+0x544>
 cac:	bl	0 <handle_coda_error>
 cb0:	b	5cc <print_data+0x3d4>
 cb4:	bl	0 <handle_coda_error>
 cb8:	b	5b8 <print_data+0x3c0>
 cbc:	bl	0 <handle_coda_error>
 cc0:	b	3ec <print_data+0x1f4>
 cc4:	str	r0, [sp, #20]
 cc8:	mov	r9, #1
 ccc:	b	3dc <print_data+0x1e4>
 cd0:	bl	0 <handle_coda_error>
 cd4:	b	9f4 <print_data+0x7fc>
 cd8:	bl	0 <handle_coda_error>
 cdc:	b	278 <print_data+0x80>
 ce0:	bl	0 <handle_coda_error>
 ce4:	b	a20 <print_data+0x828>
 ce8:	bl	0 <handle_coda_error>
 cec:	b	be4 <print_data+0x9ec>
 cf0:	bl	0 <handle_coda_error>
 cf4:	b	a44 <print_data+0x84c>
 cf8:	bl	0 <handle_coda_error>
 cfc:	b	a8c <print_data+0x894>
 d00:	bl	0 <handle_coda_error>
 d04:	b	a68 <print_data+0x870>
 d08:	bl	0 <handle_coda_error>
 d0c:	b	abc <print_data+0x8c4>
 d10:	and	r1, r2, #7
 d14:	ldr	r0, [pc, #220]	; df8 <print_data+0xc00>
 d18:	bl	0 <ff_printf>
 d1c:	b	b98 <print_data+0x9a0>
 d20:	bl	0 <handle_coda_error>
 d24:	b	b40 <print_data+0x948>
 d28:	bl	0 <handle_coda_error>
 d2c:	b	aec <print_data+0x8f4>
 d30:	add	r1, sp, #112	; 0x70
 d34:	ldr	r0, [pc, #244]	; e30 <print_data+0xc38>
 d38:	vldr	d0, [sp, #80]	; 0x50
 d3c:	bl	0 <coda_time_double_to_string>
 d40:	cmp	r0, #0
 d44:	beq	d84 <print_data+0xb8c>
 d48:	ldr	r0, [pc, #228]	; e34 <print_data+0xc3c>
 d4c:	bl	0 <ff_printf>
 d50:	b	2a4 <print_data+0xac>
 d54:	bl	0 <handle_coda_error>
 d58:	b	c2c <print_data+0xa34>
 d5c:	ldr	r2, [sp, #112]	; 0x70
 d60:	ldr	r3, [pc, #208]	; e38 <print_data+0xc40>
 d64:	add	r2, r2, #1
 d68:	str	r3, [sp]
 d6c:	ldr	r1, [pc, #200]	; e3c <print_data+0xc44>
 d70:	ldr	r3, [pc, #176]	; e28 <print_data+0xc30>
 d74:	mvn	r0, #0
 d78:	bl	0 <coda_set_error>
 d7c:	bl	0 <handle_coda_error>
 d80:	b	720 <print_data+0x528>
 d84:	add	r1, sp, #112	; 0x70
 d88:	ldr	r0, [pc, #176]	; e40 <print_data+0xc48>
 d8c:	bl	0 <ff_printf>
 d90:	b	2a4 <print_data+0xac>
 d94:	ldr	r2, [pc, #168]	; e44 <print_data+0xc4c>
 d98:	ldr	r3, [pc, #136]	; e28 <print_data+0xc30>
 d9c:	str	r2, [sp]
 da0:	ldr	r1, [pc, #148]	; e3c <print_data+0xc44>
 da4:	mov	r2, r8
 da8:	mvn	r0, #0
 dac:	bl	0 <coda_set_error>
 db0:	bl	0 <handle_coda_error>
 db4:	ldrd	r6, [sp, #80]	; 0x50
 db8:	b	b20 <print_data+0x928>
 dbc:	.word	0x0000016c
 dc0:	.word	0x00000164
	...
 dd0:	.word	0x000000c4
 dd4:	.word	0x000000bc
 dd8:	.word	0x000000c8
 ddc:	.word	0x000000c0
 de0:	.word	0x000000b0
 de4:	.word	0x000000a0
 de8:	.word	0x00000090
 dec:	.word	0x00000104
 df0:	.word	0x00000108
 df4:	.word	0x000000a8
 df8:	.word	0x000000ac
 dfc:	.word	0x000000b4
 e00:	.word	0x000001b4
 e04:	.word	0x00000148
 e08:	.word	0x0000012c
 e0c:	.word	0x00000134
 e10:	.word	0x00000140
 e14:	.word	0x0000013c
 e18:	.word	0x00000118
 e1c:	.word	0x00000124
 e20:	.word	0x00000128
 e24:	.word	0x00000008
 e28:	.word	0x0000002c
 e2c:	.word	0x00000150
 e30:	.word	0x00000174
 e34:	.word	0x00000190
 e38:	.word	0x0000019a
 e3c:	.word	0x000000cc
 e40:	.word	0x000001ac
 e44:	.word	0x000001bf

00000e48 <print_debug_data>:
 e48:	push	{r4, r5, r6, r7, r8, lr}
 e4c:	subs	r6, r0, #0
 e50:	sub	sp, sp, #536	; 0x218
 e54:	ldr	r5, [pc, #324]	; fa0 <print_debug_data+0x158>
 e58:	add	r4, sp, #8
 e5c:	mov	r7, r1
 e60:	mov	r8, r2
 e64:	beq	f3c <print_debug_data+0xf4>
 e68:	mov	r3, r2
 e6c:	str	r4, [sp]
 e70:	mov	r2, r1
 e74:	ldr	r0, [r5]
 e78:	mov	r1, r6
 e7c:	bl	0 <coda_open_as>
 e80:	cmp	r0, #0
 e84:	bne	f24 <print_debug_data+0xdc>
 e88:	add	r1, sp, #12
 e8c:	ldr	r0, [sp, #8]
 e90:	bl	0 <coda_get_product_format>
 e94:	cmp	r0, #0
 e98:	bne	f1c <print_debug_data+0xd4>
 e9c:	ldr	r3, [sp, #12]
 ea0:	ldr	r2, [pc, #252]	; fa4 <print_debug_data+0x15c>
 ea4:	cmp	r3, #2
 ea8:	movhi	r3, #0
 eac:	movls	r3, #1
 eb0:	add	r0, sp, #16
 eb4:	ldr	r1, [sp, #8]
 eb8:	str	r3, [r2]
 ebc:	bl	0 <coda_cursor_set_product>
 ec0:	cmp	r0, #0
 ec4:	bne	f14 <print_debug_data+0xcc>
 ec8:	ldr	r3, [pc, #216]	; fa8 <print_debug_data+0x160>
 ecc:	ldr	r1, [r3]
 ed0:	cmp	r1, #0
 ed4:	beq	ee8 <print_debug_data+0xa0>
 ed8:	add	r0, sp, #16
 edc:	bl	0 <coda_cursor_goto>
 ee0:	cmp	r0, #0
 ee4:	bne	f0c <print_debug_data+0xc4>
 ee8:	mov	r0, #0
 eec:	bl	0 <coda_set_option_perform_boundary_checks>
 ef0:	add	r0, sp, #16
 ef4:	mov	r1, #0
 ef8:	bl	1f8 <print_data>
 efc:	ldr	r0, [sp, #8]
 f00:	bl	0 <coda_close>
 f04:	add	sp, sp, #536	; 0x218
 f08:	pop	{r4, r5, r6, r7, r8, pc}
 f0c:	bl	0 <handle_coda_error>
 f10:	b	ee8 <print_debug_data+0xa0>
 f14:	bl	0 <handle_coda_error>
 f18:	b	ec8 <print_debug_data+0x80>
 f1c:	bl	0 <handle_coda_error>
 f20:	b	e9c <print_debug_data+0x54>
 f24:	bl	0 <coda_get_errno>
 f28:	ldr	r3, [r0]
 f2c:	cmn	r3, #21
 f30:	beq	f4c <print_debug_data+0x104>
 f34:	bl	0 <handle_coda_error>
 f38:	b	e88 <print_debug_data+0x40>
 f3c:	mov	r1, r4
 f40:	ldr	r0, [r5]
 f44:	bl	0 <coda_open>
 f48:	b	e80 <print_debug_data+0x38>
 f4c:	mov	r0, #0
 f50:	bl	0 <coda_set_option_use_mmap>
 f54:	cmp	r6, #0
 f58:	beq	f8c <print_debug_data+0x144>
 f5c:	str	r4, [sp]
 f60:	ldr	r0, [r5]
 f64:	mov	r3, r8
 f68:	mov	r2, r7
 f6c:	mov	r1, r6
 f70:	bl	0 <coda_open_as>
 f74:	mov	r4, r0
 f78:	mov	r0, #1
 f7c:	bl	0 <coda_set_option_use_mmap>
 f80:	cmp	r4, #0
 f84:	bne	f34 <print_debug_data+0xec>
 f88:	b	e88 <print_debug_data+0x40>
 f8c:	mov	r1, r4
 f90:	ldr	r0, [r5]
 f94:	bl	0 <coda_open>
 f98:	mov	r4, r0
 f9c:	b	f78 <print_debug_data+0x130>
	...
