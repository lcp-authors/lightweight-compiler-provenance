
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_conversion_new>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	vpush	{d8-d11}
       c:	sub	sp, sp, #8
      10:	vcmp.f64	d1, #0.0
      14:	vmrs	APSR_nzcv, fpscr
      18:	bne	38 <coda_conversion_new+0x38>
      1c:	movw	r0, #65136	; 0xfe70
      20:	movw	r1, #0
      24:	movt	r0, #65535	; 0xffff
      28:	movt	r1, #0
      2c:	bl	0 <coda_set_error>
      30:	mov	r0, #0
      34:	b	70 <coda_conversion_new+0x70>
      38:	mov	r0, #40	; 0x28
      3c:	vorr	d8, d3, d3
      40:	vorr	d9, d2, d2
      44:	vmov.f64	d10, d1
      48:	vorr	d11, d0, d0
      4c:	bl	0 <malloc>
      50:	cmp	r0, #0
      54:	beq	7c <coda_conversion_new+0x7c>
      58:	mov	r1, #0
      5c:	vstr	d11, [r0]
      60:	vstr	d10, [r0, #8]
      64:	vstr	d9, [r0, #16]
      68:	vstr	d8, [r0, #24]
      6c:	str	r1, [r0, #32]
      70:	sub	sp, fp, #32
      74:	vpop	{d8-d11}
      78:	pop	{fp, pc}
      7c:	movw	r1, #0
      80:	movw	r3, #0
      84:	mov	r0, #171	; 0xab
      88:	mov	r2, #40	; 0x28
      8c:	str	r0, [sp]
      90:	movt	r1, #0
      94:	movt	r3, #0
      98:	mvn	r0, #0
      9c:	bl	0 <coda_set_error>
      a0:	b	30 <coda_conversion_new+0x30>

000000a4 <coda_conversion_set_unit>:
      a4:	push	{r4, r5, fp, lr}
      a8:	add	fp, sp, #8
      ac:	mov	r5, r0
      b0:	ldr	r0, [r0, #32]
      b4:	cmp	r0, #0
      b8:	beq	dc <coda_conversion_set_unit+0x38>
      bc:	movw	r0, #65136	; 0xfe70
      c0:	movw	r1, #0
      c4:	movt	r0, #65535	; 0xffff
      c8:	movt	r1, #0
      cc:	bl	0 <coda_set_error>
      d0:	mvn	r4, #0
      d4:	mov	r0, r4
      d8:	pop	{r4, r5, fp, pc}
      dc:	mov	r4, #0
      e0:	cmp	r1, #0
      e4:	mov	r0, #0
      e8:	beq	fc <coda_conversion_set_unit+0x58>
      ec:	mov	r0, r1
      f0:	bl	0 <strdup>
      f4:	cmp	r0, #0
      f8:	beq	108 <coda_conversion_set_unit+0x64>
      fc:	str	r0, [r5, #32]
     100:	mov	r0, r4
     104:	pop	{r4, r5, fp, pc}
     108:	movw	r1, #0
     10c:	movw	r2, #0
     110:	mvn	r0, #0
     114:	mov	r3, #198	; 0xc6
     118:	mvn	r4, #0
     11c:	movt	r1, #0
     120:	movt	r2, #0
     124:	bl	0 <coda_set_error>
     128:	mov	r0, r4
     12c:	pop	{r4, r5, fp, pc}

00000130 <coda_conversion_delete>:
     130:	cmp	r0, #0
     134:	bxeq	lr
     138:	push	{r4, sl, fp, lr}
     13c:	add	fp, sp, #8
     140:	mov	r4, r0
     144:	ldr	r0, [r0, #32]
     148:	cmp	r0, #0
     14c:	beq	154 <coda_conversion_delete+0x24>
     150:	bl	0 <free>
     154:	mov	r0, r4
     158:	pop	{r4, sl, fp, lr}
     15c:	b	0 <free>

00000160 <coda_ascii_integer_mapping_new>:
     160:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
     164:	add	fp, sp, #24
     168:	sub	sp, sp, #8
     16c:	cmp	r0, #0
     170:	beq	1a8 <coda_ascii_integer_mapping_new+0x48>
     174:	mov	r7, r3
     178:	mov	r8, r2
     17c:	mov	r6, r0
     180:	bl	0 <strlen>
     184:	cmp	r0, #65	; 0x41
     188:	bcc	1c4 <coda_ascii_integer_mapping_new+0x64>
     18c:	movw	r1, #0
     190:	mov	r2, r0
     194:	movw	r0, #65136	; 0xfe70
     198:	movt	r0, #65535	; 0xffff
     19c:	movt	r1, #0
     1a0:	bl	0 <coda_set_error>
     1a4:	b	234 <coda_ascii_integer_mapping_new+0xd4>
     1a8:	movw	r1, #0
     1ac:	movw	r2, #0
     1b0:	mvn	r0, #99	; 0x63
     1b4:	movw	r3, #261	; 0x105
     1b8:	movt	r1, #0
     1bc:	movt	r2, #0
     1c0:	b	230 <coda_ascii_integer_mapping_new+0xd0>
     1c4:	mov	r0, #16
     1c8:	bl	0 <malloc>
     1cc:	cmp	r0, #0
     1d0:	beq	210 <coda_ascii_integer_mapping_new+0xb0>
     1d4:	mov	r4, #0
     1d8:	mov	r5, r0
     1dc:	str	r4, [r0]
     1e0:	mov	r0, r6
     1e4:	str	r8, [r5, #8]
     1e8:	str	r7, [r5, #12]
     1ec:	bl	0 <strdup>
     1f0:	cmp	r0, #0
     1f4:	str	r0, [r5, #4]
     1f8:	beq	244 <coda_ascii_integer_mapping_new+0xe4>
     1fc:	mov	r0, r6
     200:	bl	0 <strlen>
     204:	mov	r4, r5
     208:	str	r0, [r5]
     20c:	b	238 <coda_ascii_integer_mapping_new+0xd8>
     210:	movw	r1, #0
     214:	movw	r3, #0
     218:	movw	r0, #275	; 0x113
     21c:	mov	r2, #16
     220:	str	r0, [sp]
     224:	movt	r1, #0
     228:	movt	r3, #0
     22c:	mvn	r0, #0
     230:	bl	0 <coda_set_error>
     234:	mov	r4, #0
     238:	mov	r0, r4
     23c:	sub	sp, fp, #24
     240:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
     244:	movw	r1, #0
     248:	movw	r2, #0
     24c:	mvn	r0, #0
     250:	movw	r3, #286	; 0x11e
     254:	movt	r1, #0
     258:	movt	r2, #0
     25c:	bl	0 <coda_set_error>
     260:	mov	r0, r5
     264:	bl	0 <free>
     268:	b	238 <coda_ascii_integer_mapping_new+0xd8>

0000026c <coda_ascii_integer_mapping_delete>:
     26c:	cmp	r0, #0
     270:	bxeq	lr
     274:	push	{r4, sl, fp, lr}
     278:	add	fp, sp, #8
     27c:	mov	r4, r0
     280:	ldr	r0, [r0, #4]
     284:	cmp	r0, #0
     288:	beq	290 <coda_ascii_integer_mapping_delete+0x24>
     28c:	bl	0 <free>
     290:	mov	r0, r4
     294:	pop	{r4, sl, fp, lr}
     298:	b	0 <free>

0000029c <coda_ascii_float_mapping_new>:
     29c:	push	{r4, r5, r6, sl, fp, lr}
     2a0:	add	fp, sp, #16
     2a4:	vpush	{d8}
     2a8:	sub	sp, sp, #8
     2ac:	cmp	r0, #0
     2b0:	beq	2e4 <coda_ascii_float_mapping_new+0x48>
     2b4:	vorr	d8, d0, d0
     2b8:	mov	r6, r0
     2bc:	bl	0 <strlen>
     2c0:	cmp	r0, #65	; 0x41
     2c4:	bcc	300 <coda_ascii_float_mapping_new+0x64>
     2c8:	movw	r1, #0
     2cc:	mov	r2, r0
     2d0:	movw	r0, #65136	; 0xfe70
     2d4:	movt	r0, #65535	; 0xffff
     2d8:	movt	r1, #0
     2dc:	bl	0 <coda_set_error>
     2e0:	b	36c <coda_ascii_float_mapping_new+0xd0>
     2e4:	movw	r1, #0
     2e8:	movw	r2, #0
     2ec:	mvn	r0, #99	; 0x63
     2f0:	movw	r3, #306	; 0x132
     2f4:	movt	r1, #0
     2f8:	movt	r2, #0
     2fc:	b	368 <coda_ascii_float_mapping_new+0xcc>
     300:	mov	r0, #16
     304:	bl	0 <malloc>
     308:	cmp	r0, #0
     30c:	beq	348 <coda_ascii_float_mapping_new+0xac>
     310:	mov	r4, #0
     314:	vstr	d8, [r0, #8]
     318:	mov	r5, r0
     31c:	str	r4, [r0]
     320:	mov	r0, r6
     324:	bl	0 <strdup>
     328:	cmp	r0, #0
     32c:	str	r0, [r5, #4]
     330:	beq	380 <coda_ascii_float_mapping_new+0xe4>
     334:	mov	r0, r6
     338:	bl	0 <strlen>
     33c:	mov	r4, r5
     340:	str	r0, [r5]
     344:	b	370 <coda_ascii_float_mapping_new+0xd4>
     348:	movw	r1, #0
     34c:	movw	r3, #0
     350:	movw	r0, #319	; 0x13f
     354:	mov	r2, #16
     358:	str	r0, [sp]
     35c:	movt	r1, #0
     360:	movt	r3, #0
     364:	mvn	r0, #0
     368:	bl	0 <coda_set_error>
     36c:	mov	r4, #0
     370:	mov	r0, r4
     374:	sub	sp, fp, #24
     378:	vpop	{d8}
     37c:	pop	{r4, r5, r6, sl, fp, pc}
     380:	movw	r1, #0
     384:	movw	r2, #0
     388:	mvn	r0, #0
     38c:	movw	r3, #330	; 0x14a
     390:	movt	r1, #0
     394:	movt	r2, #0
     398:	bl	0 <coda_set_error>
     39c:	mov	r0, r5
     3a0:	bl	0 <free>
     3a4:	b	370 <coda_ascii_float_mapping_new+0xd4>

000003a8 <coda_ascii_float_mapping_delete>:
     3a8:	cmp	r0, #0
     3ac:	bxeq	lr
     3b0:	push	{r4, sl, fp, lr}
     3b4:	add	fp, sp, #8
     3b8:	mov	r4, r0
     3bc:	ldr	r0, [r0, #4]
     3c0:	cmp	r0, #0
     3c4:	beq	3cc <coda_ascii_float_mapping_delete+0x24>
     3c8:	bl	0 <free>
     3cc:	mov	r0, r4
     3d0:	pop	{r4, sl, fp, lr}
     3d4:	b	0 <free>

000003d8 <coda_type_record_field_delete>:
     3d8:	cmp	r0, #0
     3dc:	bxeq	lr
     3e0:	push	{r4, sl, fp, lr}
     3e4:	add	fp, sp, #8
     3e8:	mov	r4, r0
     3ec:	ldr	r0, [r0]
     3f0:	cmp	r0, #0
     3f4:	beq	3fc <coda_type_record_field_delete+0x24>
     3f8:	bl	0 <free>
     3fc:	ldr	r0, [r4, #4]
     400:	cmp	r0, #0
     404:	beq	40c <coda_type_record_field_delete+0x34>
     408:	bl	0 <free>
     40c:	ldr	r0, [r4, #8]
     410:	cmp	r0, #0
     414:	blne	444 <coda_type_release>
     418:	ldr	r0, [r4, #20]
     41c:	cmp	r0, #0
     420:	beq	428 <coda_type_record_field_delete+0x50>
     424:	bl	0 <coda_expression_delete>
     428:	ldr	r0, [r4, #32]
     42c:	cmp	r0, #0
     430:	beq	438 <coda_type_record_field_delete+0x60>
     434:	bl	0 <coda_expression_delete>
     438:	mov	r0, r4
     43c:	pop	{r4, sl, fp, lr}
     440:	b	0 <free>

00000444 <coda_type_release>:
     444:	push	{r4, r5, r6, r7, fp, lr}
     448:	add	fp, sp, #16
     44c:	cmp	r0, #0
     450:	beq	46c <coda_type_release+0x28>
     454:	mov	r4, r0
     458:	ldr	r0, [r0, #4]
     45c:	cmp	r0, #1
     460:	blt	470 <coda_type_release+0x2c>
     464:	sub	r0, r0, #1
     468:	str	r0, [r4, #4]
     46c:	pop	{r4, r5, r6, r7, fp, pc}
     470:	ldr	r0, [r4, #8]
     474:	cmp	r0, #6
     478:	pophi	{r4, r5, r6, r7, fp, pc}
     47c:	add	r1, pc, #0
     480:	ldr	pc, [r1, r0, lsl #2]
     484:	.word	0x0000057c
     488:	.word	0x00000588
     48c:	.word	0x000004a0
     490:	.word	0x000004a0
     494:	.word	0x00000608
     498:	.word	0x00000660
     49c:	.word	0x0000066c
     4a0:	ldr	r0, [r4, #16]
     4a4:	cmp	r0, #0
     4a8:	beq	4b0 <coda_type_release+0x6c>
     4ac:	bl	0 <free>
     4b0:	ldr	r0, [r4, #20]
     4b4:	cmp	r0, #0
     4b8:	beq	4c0 <coda_type_release+0x7c>
     4bc:	bl	0 <free>
     4c0:	ldr	r0, [r4, #32]
     4c4:	cmp	r0, #0
     4c8:	beq	4d0 <coda_type_release+0x8c>
     4cc:	bl	0 <coda_expression_delete>
     4d0:	ldr	r0, [r4, #36]	; 0x24
     4d4:	cmp	r0, #0
     4d8:	blne	444 <coda_type_release>
     4dc:	ldr	r0, [r4, #40]	; 0x28
     4e0:	cmp	r0, #0
     4e4:	beq	4ec <coda_type_release+0xa8>
     4e8:	bl	0 <free>
     4ec:	ldr	r5, [r4, #48]	; 0x30
     4f0:	cmp	r5, #0
     4f4:	beq	510 <coda_type_release+0xcc>
     4f8:	ldr	r0, [r5, #32]
     4fc:	cmp	r0, #0
     500:	beq	508 <coda_type_release+0xc4>
     504:	bl	0 <free>
     508:	mov	r0, r5
     50c:	bl	0 <free>
     510:	ldr	r5, [r4, #52]	; 0x34
     514:	cmp	r5, #0
     518:	beq	654 <coda_type_release+0x210>
     51c:	ldr	r1, [r5, #12]
     520:	cmp	r1, #0
     524:	beq	574 <coda_type_release+0x130>
     528:	ldr	r0, [r5, #8]
     52c:	cmp	r0, #1
     530:	blt	56c <coda_type_release+0x128>
     534:	mov	r7, #0
     538:	ldr	r6, [r1, r7, lsl #2]
     53c:	cmp	r6, #0
     540:	beq	560 <coda_type_release+0x11c>
     544:	ldr	r0, [r6, #4]
     548:	cmp	r0, #0
     54c:	beq	554 <coda_type_release+0x110>
     550:	bl	0 <free>
     554:	mov	r0, r6
     558:	bl	0 <free>
     55c:	ldrd	r0, [r5, #8]
     560:	add	r7, r7, #1
     564:	cmp	r7, r0
     568:	blt	538 <coda_type_release+0xf4>
     56c:	mov	r0, r1
     570:	bl	0 <free>
     574:	mov	r0, r5
     578:	b	650 <coda_type_release+0x20c>
     57c:	mov	r0, r4
     580:	pop	{r4, r5, r6, r7, fp, lr}
     584:	b	678 <record_delete>
     588:	ldr	r0, [r4, #16]
     58c:	cmp	r0, #0
     590:	beq	598 <coda_type_release+0x154>
     594:	bl	0 <free>
     598:	ldr	r0, [r4, #20]
     59c:	cmp	r0, #0
     5a0:	beq	5a8 <coda_type_release+0x164>
     5a4:	bl	0 <free>
     5a8:	ldr	r0, [r4, #32]
     5ac:	cmp	r0, #0
     5b0:	beq	5b8 <coda_type_release+0x174>
     5b4:	bl	0 <coda_expression_delete>
     5b8:	ldr	r0, [r4, #36]	; 0x24
     5bc:	cmp	r0, #0
     5c0:	blne	444 <coda_type_release>
     5c4:	ldr	r0, [r4, #40]	; 0x28
     5c8:	cmp	r0, #0
     5cc:	blne	444 <coda_type_release>
     5d0:	ldr	r1, [r4, #48]	; 0x30
     5d4:	cmp	r1, #1
     5d8:	blt	654 <coda_type_release+0x210>
     5dc:	add	r5, r4, #84	; 0x54
     5e0:	mov	r6, #0
     5e4:	ldr	r0, [r5, r6, lsl #2]
     5e8:	cmp	r0, #0
     5ec:	beq	5f8 <coda_type_release+0x1b4>
     5f0:	bl	0 <coda_expression_delete>
     5f4:	ldr	r1, [r4, #48]	; 0x30
     5f8:	add	r6, r6, #1
     5fc:	cmp	r6, r1
     600:	blt	5e4 <coda_type_release+0x1a0>
     604:	b	654 <coda_type_release+0x210>
     608:	ldr	r0, [r4, #16]
     60c:	cmp	r0, #0
     610:	beq	618 <coda_type_release+0x1d4>
     614:	bl	0 <free>
     618:	ldr	r0, [r4, #20]
     61c:	cmp	r0, #0
     620:	beq	628 <coda_type_release+0x1e4>
     624:	bl	0 <free>
     628:	ldr	r0, [r4, #32]
     62c:	cmp	r0, #0
     630:	beq	638 <coda_type_release+0x1f4>
     634:	bl	0 <coda_expression_delete>
     638:	ldr	r0, [r4, #36]	; 0x24
     63c:	cmp	r0, #0
     640:	blne	444 <coda_type_release>
     644:	ldr	r0, [r4, #40]	; 0x28
     648:	cmp	r0, #0
     64c:	beq	654 <coda_type_release+0x210>
     650:	bl	0 <free>
     654:	mov	r0, r4
     658:	pop	{r4, r5, r6, r7, fp, lr}
     65c:	b	0 <free>
     660:	mov	r0, r4
     664:	pop	{r4, r5, r6, r7, fp, lr}
     668:	b	738 <raw_delete>
     66c:	mov	r0, r4
     670:	pop	{r4, r5, r6, r7, fp, lr}
     674:	b	7a4 <special_delete>

00000678 <record_delete>:
     678:	cmp	r0, #0
     67c:	bxeq	lr
     680:	push	{r4, r5, fp, lr}
     684:	add	fp, sp, #8
     688:	mov	r4, r0
     68c:	ldr	r0, [r0, #16]
     690:	cmp	r0, #0
     694:	beq	69c <record_delete+0x24>
     698:	bl	0 <free>
     69c:	ldr	r0, [r4, #20]
     6a0:	cmp	r0, #0
     6a4:	beq	6ac <record_delete+0x34>
     6a8:	bl	0 <free>
     6ac:	ldr	r0, [r4, #32]
     6b0:	cmp	r0, #0
     6b4:	beq	6bc <record_delete+0x44>
     6b8:	bl	0 <coda_expression_delete>
     6bc:	ldr	r0, [r4, #36]	; 0x24
     6c0:	cmp	r0, #0
     6c4:	blne	444 <coda_type_release>
     6c8:	ldr	r0, [r4, #40]	; 0x28
     6cc:	cmp	r0, #0
     6d0:	beq	6d8 <record_delete+0x60>
     6d4:	bl	0 <coda_hashtable_delete>
     6d8:	ldr	r0, [r4, #44]	; 0x2c
     6dc:	cmp	r0, #0
     6e0:	beq	6e8 <record_delete+0x70>
     6e4:	bl	0 <coda_hashtable_delete>
     6e8:	ldr	r0, [r4, #48]	; 0x30
     6ec:	cmp	r0, #1
     6f0:	blt	71c <record_delete+0xa4>
     6f4:	ldr	r1, [r4, #52]	; 0x34
     6f8:	mov	r5, #0
     6fc:	ldr	r0, [r1, r5, lsl #2]
     700:	bl	3d8 <coda_type_record_field_delete>
     704:	ldrd	r0, [r4, #48]	; 0x30
     708:	add	r5, r5, #1
     70c:	cmp	r5, r0
     710:	blt	6fc <record_delete+0x84>
     714:	mov	r0, r1
     718:	bl	0 <free>
     71c:	ldr	r0, [r4, #68]	; 0x44
     720:	cmp	r0, #0
     724:	beq	72c <record_delete+0xb4>
     728:	bl	0 <coda_expression_delete>
     72c:	mov	r0, r4
     730:	pop	{r4, r5, fp, lr}
     734:	b	0 <free>

00000738 <raw_delete>:
     738:	cmp	r0, #0
     73c:	bxeq	lr
     740:	push	{r4, sl, fp, lr}
     744:	add	fp, sp, #8
     748:	mov	r4, r0
     74c:	ldr	r0, [r0, #16]
     750:	cmp	r0, #0
     754:	beq	75c <raw_delete+0x24>
     758:	bl	0 <free>
     75c:	ldr	r0, [r4, #20]
     760:	cmp	r0, #0
     764:	beq	76c <raw_delete+0x34>
     768:	bl	0 <free>
     76c:	ldr	r0, [r4, #32]
     770:	cmp	r0, #0
     774:	beq	77c <raw_delete+0x44>
     778:	bl	0 <coda_expression_delete>
     77c:	ldr	r0, [r4, #36]	; 0x24
     780:	cmp	r0, #0
     784:	blne	444 <coda_type_release>
     788:	ldr	r0, [r4, #44]	; 0x2c
     78c:	cmp	r0, #0
     790:	beq	798 <raw_delete+0x60>
     794:	bl	0 <free>
     798:	mov	r0, r4
     79c:	pop	{r4, sl, fp, lr}
     7a0:	b	0 <free>

000007a4 <special_delete>:
     7a4:	cmp	r0, #0
     7a8:	bxeq	lr
     7ac:	push	{r4, sl, fp, lr}
     7b0:	add	fp, sp, #8
     7b4:	mov	r4, r0
     7b8:	ldr	r0, [r0, #16]
     7bc:	cmp	r0, #0
     7c0:	beq	7c8 <special_delete+0x24>
     7c4:	bl	0 <free>
     7c8:	ldr	r0, [r4, #20]
     7cc:	cmp	r0, #0
     7d0:	beq	7d8 <special_delete+0x34>
     7d4:	bl	0 <free>
     7d8:	ldr	r0, [r4, #32]
     7dc:	cmp	r0, #0
     7e0:	beq	7e8 <special_delete+0x44>
     7e4:	bl	0 <coda_expression_delete>
     7e8:	ldr	r0, [r4, #36]	; 0x24
     7ec:	cmp	r0, #0
     7f0:	blne	444 <coda_type_release>
     7f4:	ldr	r0, [r4, #44]	; 0x2c
     7f8:	cmp	r0, #0
     7fc:	blne	444 <coda_type_release>
     800:	ldr	r0, [r4, #48]	; 0x30
     804:	cmp	r0, #0
     808:	beq	810 <special_delete+0x6c>
     80c:	bl	0 <free>
     810:	ldr	r0, [r4, #52]	; 0x34
     814:	cmp	r0, #0
     818:	beq	820 <special_delete+0x7c>
     81c:	bl	0 <coda_expression_delete>
     820:	mov	r0, r4
     824:	pop	{r4, sl, fp, lr}
     828:	b	0 <free>

0000082c <coda_type_set_read_type>:
     82c:	push	{fp, lr}
     830:	mov	fp, sp
     834:	cmp	r0, #0
     838:	beq	880 <coda_type_set_read_type+0x54>
     83c:	ldr	ip, [r0, #8]
     840:	cmp	ip, #6
     844:	bhi	8bc <coda_type_set_read_type+0x90>
     848:	movw	r2, #0
     84c:	add	r3, pc, #4
     850:	movt	r2, #0
     854:	ldr	pc, [r3, ip, lsl #2]
     858:	.word	0x00000930
     85c:	.word	0x00000874
     860:	.word	0x0000089c
     864:	.word	0x000008b0
     868:	.word	0x0000090c
     86c:	.word	0x0000091c
     870:	.word	0x00000928
     874:	movw	r2, #0
     878:	movt	r2, #0
     87c:	b	930 <coda_type_set_read_type+0x104>
     880:	movw	r1, #0
     884:	movw	r2, #0
     888:	mvn	r0, #99	; 0x63
     88c:	movw	r3, #710	; 0x2c6
     890:	movt	r1, #0
     894:	movt	r2, #0
     898:	b	900 <coda_type_set_read_type+0xd4>
     89c:	cmp	r1, #7
     8a0:	bhi	8bc <coda_type_set_read_type+0x90>
     8a4:	str	r1, [r0, #12]
     8a8:	mov	r0, #0
     8ac:	pop	{fp, pc}
     8b0:	orr	r2, r1, #1
     8b4:	cmp	r2, #9
     8b8:	beq	8a4 <coda_type_set_read_type+0x78>
     8bc:	add	r0, r1, #1
     8c0:	movw	r3, #0
     8c4:	cmp	r0, #13
     8c8:	movt	r3, #0
     8cc:	movwls	r1, #0
     8d0:	mov	r2, r3
     8d4:	movtls	r1, #0
     8d8:	ldrls	r2, [r1, r0, lsl #2]
     8dc:	sub	r0, ip, #2
     8e0:	cmp	r0, #4
     8e4:	movwls	r1, #0
     8e8:	movtls	r1, #0
     8ec:	ldrls	r3, [r1, r0, lsl #2]
     8f0:	movw	r0, #65136	; 0xfe70
     8f4:	movw	r1, #0
     8f8:	movt	r0, #65535	; 0xffff
     8fc:	movt	r1, #0
     900:	bl	0 <coda_set_error>
     904:	mvn	r0, #0
     908:	pop	{fp, pc}
     90c:	orr	r2, r1, #1
     910:	cmp	r2, #11
     914:	beq	8a4 <coda_type_set_read_type+0x78>
     918:	b	8bc <coda_type_set_read_type+0x90>
     91c:	movw	r2, #0
     920:	movt	r2, #0
     924:	b	930 <coda_type_set_read_type+0x104>
     928:	movw	r2, #0
     92c:	movt	r2, #0
     930:	movw	r0, #65136	; 0xfe70
     934:	movw	r1, #0
     938:	movt	r0, #65535	; 0xffff
     93c:	movt	r1, #0
     940:	bl	0 <coda_set_error>
     944:	mvn	r0, #0
     948:	pop	{fp, pc}

0000094c <coda_type_get_class_name>:
     94c:	cmp	r0, #6
     950:	movwhi	r0, #0
     954:	movthi	r0, #0
     958:	bxhi	lr
     95c:	movw	r1, #0
     960:	movt	r1, #0
     964:	ldr	r0, [r1, r0, lsl #2]
     968:	bx	lr

0000096c <coda_type_get_native_type_name>:
     96c:	add	r0, r0, #1
     970:	cmp	r0, #13
     974:	movwhi	r0, #0
     978:	movthi	r0, #0
     97c:	bxhi	lr
     980:	movw	r1, #0
     984:	movt	r1, #0
     988:	ldr	r0, [r1, r0, lsl #2]
     98c:	bx	lr

00000990 <coda_type_set_name>:
     990:	push	{r4, r5, fp, lr}
     994:	add	fp, sp, #8
     998:	cmp	r0, #0
     99c:	beq	9d4 <coda_type_set_name+0x44>
     9a0:	mov	r5, r1
     9a4:	cmp	r1, #0
     9a8:	beq	9ec <coda_type_set_name+0x5c>
     9ac:	mov	r4, r0
     9b0:	ldr	r0, [r0, #16]
     9b4:	cmp	r0, #0
     9b8:	beq	a14 <coda_type_set_name+0x84>
     9bc:	movw	r0, #65136	; 0xfe70
     9c0:	movw	r1, #0
     9c4:	movt	r0, #65535	; 0xffff
     9c8:	movt	r1, #0
     9cc:	bl	0 <coda_set_error>
     9d0:	b	a08 <coda_type_set_name+0x78>
     9d4:	movw	r1, #0
     9d8:	movw	r2, #0
     9dc:	mvn	r0, #99	; 0x63
     9e0:	movw	r3, #759	; 0x2f7
     9e4:	movt	r1, #0
     9e8:	b	a00 <coda_type_set_name+0x70>
     9ec:	movw	r1, #0
     9f0:	movw	r2, #0
     9f4:	mvn	r0, #99	; 0x63
     9f8:	mov	r3, #764	; 0x2fc
     9fc:	movt	r1, #0
     a00:	movt	r2, #0
     a04:	bl	0 <coda_set_error>
     a08:	mvn	r4, #0
     a0c:	mov	r0, r4
     a10:	pop	{r4, r5, fp, pc}
     a14:	mov	r0, r5
     a18:	bl	0 <coda_is_identifier>
     a1c:	cmp	r0, #0
     a20:	beq	a68 <coda_type_set_name+0xd8>
     a24:	mov	r0, r5
     a28:	bl	0 <strdup>
     a2c:	cmp	r0, #0
     a30:	strne	r0, [r4, #16]
     a34:	movne	r4, #0
     a38:	movne	r0, r4
     a3c:	popne	{r4, r5, fp, pc}
     a40:	movw	r1, #0
     a44:	movw	r2, #0
     a48:	mvn	r0, #0
     a4c:	movw	r3, #781	; 0x30d
     a50:	mvn	r4, #0
     a54:	movt	r1, #0
     a58:	movt	r2, #0
     a5c:	bl	0 <coda_set_error>
     a60:	mov	r0, r4
     a64:	pop	{r4, r5, fp, pc}
     a68:	movw	r0, #65136	; 0xfe70
     a6c:	movw	r1, #0
     a70:	mov	r2, r5
     a74:	movt	r0, #65535	; 0xffff
     a78:	movt	r1, #0
     a7c:	bl	0 <coda_set_error>
     a80:	b	a08 <coda_type_set_name+0x78>

00000a84 <coda_type_set_description>:
     a84:	push	{r4, sl, fp, lr}
     a88:	add	fp, sp, #8
     a8c:	cmp	r0, #0
     a90:	beq	ac4 <coda_type_set_description+0x40>
     a94:	cmp	r1, #0
     a98:	beq	adc <coda_type_set_description+0x58>
     a9c:	mov	r4, r0
     aa0:	ldr	r0, [r0, #20]
     aa4:	cmp	r0, #0
     aa8:	beq	b04 <coda_type_set_description+0x80>
     aac:	movw	r0, #65136	; 0xfe70
     ab0:	movw	r1, #0
     ab4:	movt	r0, #65535	; 0xffff
     ab8:	movt	r1, #0
     abc:	bl	0 <coda_set_error>
     ac0:	b	af8 <coda_type_set_description+0x74>
     ac4:	movw	r1, #0
     ac8:	movw	r2, #0
     acc:	mvn	r0, #99	; 0x63
     ad0:	movw	r3, #795	; 0x31b
     ad4:	movt	r1, #0
     ad8:	b	af0 <coda_type_set_description+0x6c>
     adc:	movw	r1, #0
     ae0:	movw	r2, #0
     ae4:	mvn	r0, #99	; 0x63
     ae8:	mov	r3, #800	; 0x320
     aec:	movt	r1, #0
     af0:	movt	r2, #0
     af4:	bl	0 <coda_set_error>
     af8:	mvn	r4, #0
     afc:	mov	r0, r4
     b00:	pop	{r4, sl, fp, pc}
     b04:	mov	r0, r1
     b08:	bl	0 <strdup>
     b0c:	cmp	r0, #0
     b10:	strne	r0, [r4, #20]
     b14:	movne	r4, #0
     b18:	movne	r0, r4
     b1c:	popne	{r4, sl, fp, pc}
     b20:	movw	r1, #0
     b24:	movw	r2, #0
     b28:	mvn	r0, #0
     b2c:	movw	r3, #814	; 0x32e
     b30:	mvn	r4, #0
     b34:	movt	r1, #0
     b38:	movt	r2, #0
     b3c:	bl	0 <coda_set_error>
     b40:	mov	r0, r4
     b44:	pop	{r4, sl, fp, pc}

00000b48 <coda_type_set_bit_size>:
     b48:	push	{r4, r5, r6, sl, fp, lr}
     b4c:	add	fp, sp, #16
     b50:	sub	sp, sp, #24
     b54:	cmp	r0, #0
     b58:	beq	b88 <coda_type_set_bit_size+0x40>
     b5c:	mov	r1, r3
     b60:	ldr	r3, [r0, #28]
     b64:	mov	r6, r2
     b68:	mvn	r2, #0
     b6c:	cmp	r3, #0
     b70:	blt	ba8 <coda_type_set_bit_size+0x60>
     b74:	movw	r0, #65136	; 0xfe70
     b78:	movw	r1, #0
     b7c:	movt	r0, #65535	; 0xffff
     b80:	movt	r1, #0
     b84:	b	bc4 <coda_type_set_bit_size+0x7c>
     b88:	movw	r1, #0
     b8c:	movw	r2, #0
     b90:	mvn	r0, #99	; 0x63
     b94:	movw	r3, #827	; 0x33b
     b98:	movt	r1, #0
     b9c:	movt	r2, #0
     ba0:	bl	0 <coda_set_error>
     ba4:	b	bc8 <coda_type_set_bit_size+0x80>
     ba8:	ldr	r3, [r0, #32]
     bac:	cmp	r3, #0
     bb0:	beq	bd4 <coda_type_set_bit_size+0x8c>
     bb4:	movw	r0, #65136	; 0xfe70
     bb8:	movw	r1, #0
     bbc:	movt	r0, #65535	; 0xffff
     bc0:	movt	r1, #0
     bc4:	bl	0 <coda_set_error>
     bc8:	mvn	r0, #0
     bcc:	sub	sp, fp, #16
     bd0:	pop	{r4, r5, r6, sl, fp, pc}
     bd4:	cmn	r1, #1
     bd8:	ble	c14 <coda_type_set_bit_size+0xcc>
     bdc:	tst	r6, #7
     be0:	beq	c40 <coda_type_set_bit_size+0xf8>
     be4:	ldr	r3, [r0]
     be8:	cmp	r3, #0
     bec:	bne	c40 <coda_type_set_bit_size+0xf8>
     bf0:	add	r4, sp, #3
     bf4:	mov	r0, r6
     bf8:	mov	r2, r4
     bfc:	bl	0 <coda_str64>
     c00:	movw	r0, #65136	; 0xfe70
     c04:	movw	r1, #0
     c08:	movt	r0, #65535	; 0xffff
     c0c:	movt	r1, #0
     c10:	b	c34 <coda_type_set_bit_size+0xec>
     c14:	add	r4, sp, #3
     c18:	mov	r0, r6
     c1c:	mov	r2, r4
     c20:	bl	0 <coda_str64>
     c24:	movw	r0, #65136	; 0xfe70
     c28:	movw	r1, #0
     c2c:	movt	r0, #65535	; 0xffff
     c30:	movt	r1, #0
     c34:	mov	r2, r4
     c38:	bl	0 <coda_set_error>
     c3c:	b	bc8 <coda_type_set_bit_size+0x80>
     c40:	ldr	r3, [r0, #8]
     c44:	add	ip, r0, #24
     c48:	bic	r3, r3, #1
     c4c:	cmp	r3, #2
     c50:	bne	c84 <coda_type_set_bit_size+0x13c>
     c54:	ldr	r0, [r0, #52]	; 0x34
     c58:	cmp	r0, #0
     c5c:	beq	c84 <coda_type_set_bit_size+0x13c>
     c60:	ldrd	r4, [r0]
     c64:	subs	r3, r2, r4
     c68:	sbcs	r3, r2, r5
     c6c:	bge	c98 <coda_type_set_bit_size+0x150>
     c70:	movw	r0, #65136	; 0xfe70
     c74:	movw	r1, #0
     c78:	movt	r0, #65535	; 0xffff
     c7c:	movt	r1, #0
     c80:	b	bc4 <coda_type_set_bit_size+0x7c>
     c84:	str	r6, [ip]
     c88:	str	r1, [ip, #4]
     c8c:	mov	r0, #0
     c90:	sub	sp, fp, #16
     c94:	pop	{r4, r5, r6, sl, fp, pc}
     c98:	str	r6, [r0]
     c9c:	str	r1, [r0, #4]
     ca0:	str	r6, [ip]
     ca4:	str	r1, [ip, #4]
     ca8:	ldr	lr, [r0, #8]
     cac:	cmp	lr, #1
     cb0:	blt	c8c <coda_type_set_bit_size+0x144>
     cb4:	lsr	r3, r6, #3
     cb8:	mov	r4, #0
     cbc:	orr	r6, r3, r1, lsl #29
     cc0:	ldr	r3, [r0, #12]
     cc4:	lsr	r1, r1, #3
     cc8:	ldr	r0, [r3, r4, lsl #2]
     ccc:	ldr	r0, [r0]
     cd0:	eor	r5, r1, r0, asr #31
     cd4:	eor	r0, r6, r0
     cd8:	orrs	r0, r0, r5
     cdc:	bne	cf4 <coda_type_set_bit_size+0x1ac>
     ce0:	add	r4, r4, #1
     ce4:	mov	r0, #0
     ce8:	cmp	r4, lr
     cec:	blt	cc8 <coda_type_set_bit_size+0x180>
     cf0:	b	c90 <coda_type_set_bit_size+0x148>
     cf4:	str	r2, [ip]
     cf8:	str	r2, [ip, #4]
     cfc:	b	c8c <coda_type_set_bit_size+0x144>

00000d00 <coda_type_set_byte_size>:
     d00:	lsl	r1, r3, #3
     d04:	orr	r3, r1, r2, lsr #29
     d08:	lsl	r2, r2, #3
     d0c:	b	b48 <coda_type_set_bit_size>

00000d10 <coda_type_set_bit_size_expression>:
     d10:	push	{fp, lr}
     d14:	mov	fp, sp
     d18:	cmp	r0, #0
     d1c:	beq	d48 <coda_type_set_bit_size_expression+0x38>
     d20:	cmp	r1, #0
     d24:	beq	d60 <coda_type_set_bit_size_expression+0x50>
     d28:	ldr	r2, [r0, #32]
     d2c:	cmp	r2, #0
     d30:	beq	d84 <coda_type_set_bit_size_expression+0x74>
     d34:	movw	r0, #65136	; 0xfe70
     d38:	movw	r1, #0
     d3c:	movt	r0, #65535	; 0xffff
     d40:	movt	r1, #0
     d44:	b	db8 <coda_type_set_bit_size_expression+0xa8>
     d48:	movw	r1, #0
     d4c:	movw	r2, #0
     d50:	mvn	r0, #99	; 0x63
     d54:	mov	r3, #892	; 0x37c
     d58:	movt	r1, #0
     d5c:	b	d74 <coda_type_set_bit_size_expression+0x64>
     d60:	movw	r1, #0
     d64:	movw	r2, #0
     d68:	mvn	r0, #99	; 0x63
     d6c:	movw	r3, #897	; 0x381
     d70:	movt	r1, #0
     d74:	movt	r2, #0
     d78:	bl	0 <coda_set_error>
     d7c:	mvn	r0, #0
     d80:	pop	{fp, pc}
     d84:	mov	r2, r0
     d88:	ldr	ip, [r2, #24]!
     d8c:	ldr	r3, [r2, #-16]
     d90:	ldr	lr, [r2, #4]
     d94:	cmp	r3, #1
     d98:	bhi	dc4 <coda_type_set_bit_size_expression+0xb4>
     d9c:	subs	r3, ip, #1
     da0:	sbcs	r3, lr, #0
     da4:	blt	dcc <coda_type_set_bit_size_expression+0xbc>
     da8:	movw	r0, #65136	; 0xfe70
     dac:	movw	r1, #0
     db0:	movt	r0, #65535	; 0xffff
     db4:	movt	r1, #0
     db8:	bl	0 <coda_set_error>
     dbc:	mvn	r0, #0
     dc0:	pop	{fp, pc}
     dc4:	cmp	lr, #0
     dc8:	bge	da8 <coda_type_set_bit_size_expression+0x98>
     dcc:	str	r1, [r0, #32]
     dd0:	mvn	r0, #0
     dd4:	str	r0, [r2]
     dd8:	str	r0, [r2, #4]
     ddc:	mov	r0, #0
     de0:	pop	{fp, pc}

00000de4 <coda_type_set_byte_size_expression>:
     de4:	push	{r4, sl, fp, lr}
     de8:	add	fp, sp, #8
     dec:	cmp	r0, #0
     df0:	beq	e20 <coda_type_set_byte_size_expression+0x3c>
     df4:	cmp	r1, #0
     df8:	beq	e38 <coda_type_set_byte_size_expression+0x54>
     dfc:	ldr	r2, [r0, #32]
     e00:	cmp	r2, #0
     e04:	beq	e60 <coda_type_set_byte_size_expression+0x7c>
     e08:	movw	r0, #65136	; 0xfe70
     e0c:	movw	r1, #0
     e10:	movt	r0, #65535	; 0xffff
     e14:	movt	r1, #0
     e18:	bl	0 <coda_set_error>
     e1c:	b	e54 <coda_type_set_byte_size_expression+0x70>
     e20:	movw	r1, #0
     e24:	movw	r2, #0
     e28:	mvn	r0, #99	; 0x63
     e2c:	movw	r3, #931	; 0x3a3
     e30:	movt	r1, #0
     e34:	b	e4c <coda_type_set_byte_size_expression+0x68>
     e38:	movw	r1, #0
     e3c:	movw	r2, #0
     e40:	mvn	r0, #99	; 0x63
     e44:	mov	r3, #936	; 0x3a8
     e48:	movt	r1, #0
     e4c:	movt	r2, #0
     e50:	bl	0 <coda_set_error>
     e54:	mvn	r4, #0
     e58:	mov	r0, r4
     e5c:	pop	{r4, sl, fp, pc}
     e60:	mov	r2, r0
     e64:	ldr	r3, [r2, #24]!
     e68:	ldr	r4, [r2, #-16]
     e6c:	ldr	ip, [r2, #4]
     e70:	cmp	r4, #1
     e74:	bhi	e98 <coda_type_set_byte_size_expression+0xb4>
     e78:	subs	r3, r3, #1
     e7c:	sbcs	r3, ip, #0
     e80:	blt	ecc <coda_type_set_byte_size_expression+0xe8>
     e84:	movw	r0, #65136	; 0xfe70
     e88:	movw	r1, #0
     e8c:	movt	r0, #65535	; 0xffff
     e90:	movt	r1, #0
     e94:	b	e18 <coda_type_set_byte_size_expression+0x34>
     e98:	mvn	r4, #7
     e9c:	add	lr, r4, #7
     ea0:	mvn	r4, #0
     ea4:	subs	r3, lr, r3
     ea8:	sbcs	r3, r4, ip
     eac:	bge	ecc <coda_type_set_byte_size_expression+0xe8>
     eb0:	movw	r0, #65136	; 0xfe70
     eb4:	movw	r1, #0
     eb8:	movt	r0, #65535	; 0xffff
     ebc:	movt	r1, #0
     ec0:	bl	0 <coda_set_error>
     ec4:	mov	r0, r4
     ec8:	pop	{r4, sl, fp, pc}
     ecc:	str	r1, [r0, #32]
     ed0:	mvn	r1, #0
     ed4:	mvn	r0, #7
     ed8:	mov	r4, #0
     edc:	strd	r0, [r2]
     ee0:	mov	r0, r4
     ee4:	pop	{r4, sl, fp, pc}

00000ee8 <coda_type_add_attribute>:
     ee8:	push	{r4, r5, fp, lr}
     eec:	add	fp, sp, #8
     ef0:	cmp	r0, #0
     ef4:	beq	f3c <coda_type_add_attribute+0x54>
     ef8:	mov	r4, r1
     efc:	cmp	r1, #0
     f00:	beq	f54 <coda_type_add_attribute+0x6c>
     f04:	mov	r5, r0
     f08:	ldr	r0, [r0, #36]	; 0x24
     f0c:	cmp	r0, #0
     f10:	bne	f2c <coda_type_add_attribute+0x44>
     f14:	ldr	r0, [r5]
     f18:	bl	f78 <coda_type_record_new>
     f1c:	cmp	r0, #0
     f20:	str	r0, [r5, #36]	; 0x24
     f24:	mvneq	r0, #0
     f28:	popeq	{r4, r5, fp, pc}
     f2c:	ldr	r1, [r0, #48]	; 0x30
     f30:	mov	r2, r4
     f34:	pop	{r4, r5, fp, lr}
     f38:	b	16e8 <coda_type_record_insert_field>
     f3c:	movw	r1, #0
     f40:	movw	r2, #0
     f44:	mvn	r0, #99	; 0x63
     f48:	movw	r3, #970	; 0x3ca
     f4c:	movt	r1, #0
     f50:	b	f68 <coda_type_add_attribute+0x80>
     f54:	movw	r1, #0
     f58:	movw	r2, #0
     f5c:	mvn	r0, #99	; 0x63
     f60:	movw	r3, #975	; 0x3cf
     f64:	movt	r1, #0
     f68:	movt	r2, #0
     f6c:	bl	0 <coda_set_error>
     f70:	mvn	r0, #0
     f74:	pop	{r4, r5, fp, pc}

00000f78 <coda_type_record_new>:
     f78:	push	{r4, r5, fp, lr}
     f7c:	add	fp, sp, #8
     f80:	sub	sp, sp, #8
     f84:	mov	r5, r0
     f88:	mov	r0, #72	; 0x48
     f8c:	bl	0 <malloc>
     f90:	cmp	r0, #0
     f94:	beq	1034 <coda_type_record_new+0xbc>
     f98:	mov	r4, r0
     f9c:	mvn	r2, #0
     fa0:	vmov.i32	q8, #0	; 0x00000000
     fa4:	cmp	r5, #1
     fa8:	str	r2, [r0, #28]
     fac:	mov	r0, #0
     fb0:	add	r1, r4, #48	; 0x30
     fb4:	str	r5, [r4]
     fb8:	str	r0, [r4, #4]
     fbc:	str	r0, [r4, #8]
     fc0:	str	r2, [r4, #12]
     fc4:	str	r0, [r4, #16]
     fc8:	str	r0, [r4, #20]
     fcc:	vst1.64	{d16-d17}, [r1]
     fd0:	add	r1, r4, #32
     fd4:	str	r0, [r4, #64]	; 0x40
     fd8:	str	r0, [r4, #68]	; 0x44
     fdc:	vst1.64	{d16-d17}, [r1]
     fe0:	mov	r1, r4
     fe4:	str	r2, [r1, #24]!
     fe8:	movls	r2, #12
     fec:	strls	r2, [r4, #12]
     ff0:	strls	r0, [r1]
     ff4:	strls	r0, [r1, #4]
     ff8:	mov	r0, #0
     ffc:	bl	0 <coda_hashtable_new>
    1000:	cmp	r0, #0
    1004:	str	r0, [r4, #40]	; 0x28
    1008:	beq	105c <coda_type_record_new+0xe4>
    100c:	mov	r0, #1
    1010:	bl	0 <coda_hashtable_new>
    1014:	cmp	r0, #0
    1018:	str	r0, [r4, #44]	; 0x2c
    101c:	bne	1084 <coda_type_record_new+0x10c>
    1020:	movw	r1, #0
    1024:	movw	r2, #0
    1028:	mvn	r0, #0
    102c:	movw	r3, #1245	; 0x4dd
    1030:	b	106c <coda_type_record_new+0xf4>
    1034:	movw	r1, #0
    1038:	movw	r3, #0
    103c:	movw	r0, #1205	; 0x4b5
    1040:	mov	r2, #72	; 0x48
    1044:	str	r0, [sp]
    1048:	movt	r1, #0
    104c:	movt	r3, #0
    1050:	mvn	r0, #0
    1054:	bl	0 <coda_set_error>
    1058:	b	1080 <coda_type_record_new+0x108>
    105c:	movw	r1, #0
    1060:	movw	r2, #0
    1064:	mvn	r0, #0
    1068:	movw	r3, #1236	; 0x4d4
    106c:	movt	r1, #0
    1070:	movt	r2, #0
    1074:	bl	0 <coda_set_error>
    1078:	mov	r0, r4
    107c:	bl	678 <record_delete>
    1080:	mov	r4, #0
    1084:	mov	r0, r4
    1088:	sub	sp, fp, #8
    108c:	pop	{r4, r5, fp, pc}

00001090 <coda_type_record_add_field>:
    1090:	cmp	r0, #0
    1094:	beq	10a4 <coda_type_record_add_field+0x14>
    1098:	mov	r2, r1
    109c:	ldr	r1, [r0, #48]	; 0x30
    10a0:	b	16e8 <coda_type_record_insert_field>
    10a4:	push	{fp, lr}
    10a8:	mov	fp, sp
    10ac:	movw	r1, #0
    10b0:	movw	r2, #0
    10b4:	mvn	r0, #99	; 0x63
    10b8:	mov	r3, #1424	; 0x590
    10bc:	movt	r1, #0
    10c0:	movt	r2, #0
    10c4:	bl	0 <coda_set_error>
    10c8:	mvn	r0, #0
    10cc:	pop	{fp, pc}

000010d0 <coda_type_set_attributes>:
    10d0:	push	{fp, lr}
    10d4:	mov	fp, sp
    10d8:	cmp	r0, #0
    10dc:	beq	110c <coda_type_set_attributes+0x3c>
    10e0:	cmp	r1, #0
    10e4:	beq	1124 <coda_type_set_attributes+0x54>
    10e8:	ldr	r2, [r0, #36]	; 0x24
    10ec:	cmp	r2, #0
    10f0:	beq	1148 <coda_type_set_attributes+0x78>
    10f4:	movw	r1, #0
    10f8:	movw	r2, #0
    10fc:	mvn	r0, #99	; 0x63
    1100:	movw	r3, #1003	; 0x3eb
    1104:	movt	r1, #0
    1108:	b	1138 <coda_type_set_attributes+0x68>
    110c:	movw	r1, #0
    1110:	movw	r2, #0
    1114:	mvn	r0, #99	; 0x63
    1118:	movw	r3, #993	; 0x3e1
    111c:	movt	r1, #0
    1120:	b	1138 <coda_type_set_attributes+0x68>
    1124:	movw	r1, #0
    1128:	movw	r2, #0
    112c:	mvn	r0, #99	; 0x63
    1130:	movw	r3, #998	; 0x3e6
    1134:	movt	r1, #0
    1138:	movt	r2, #0
    113c:	bl	0 <coda_set_error>
    1140:	mvn	r0, #0
    1144:	pop	{fp, pc}
    1148:	str	r1, [r0, #36]	; 0x24
    114c:	ldr	r0, [r1, #4]
    1150:	add	r0, r0, #1
    1154:	str	r0, [r1, #4]
    1158:	mov	r0, #0
    115c:	pop	{fp, pc}

00001160 <coda_type_record_field_new>:
    1160:	push	{r4, r5, fp, lr}
    1164:	add	fp, sp, #8
    1168:	sub	sp, sp, #8
    116c:	cmp	r0, #0
    1170:	beq	1200 <coda_type_record_field_new+0xa0>
    1174:	mov	r5, r0
    1178:	bl	0 <coda_is_identifier>
    117c:	cmp	r0, #0
    1180:	beq	121c <coda_type_record_field_new+0xbc>
    1184:	mov	r0, #40	; 0x28
    1188:	bl	0 <malloc>
    118c:	cmp	r0, #0
    1190:	beq	1238 <coda_type_record_field_new+0xd8>
    1194:	mov	r4, r0
    1198:	mov	r0, #0
    119c:	mvn	r1, #0
    11a0:	vmov.i32	q8, #0	; 0x00000000
    11a4:	strb	r0, [r4, #16]
    11a8:	str	r0, [r4, #20]
    11ac:	str	r1, [r4, #24]
    11b0:	str	r1, [r4, #28]
    11b4:	mov	r1, #32
    11b8:	mov	r2, r4
    11bc:	vst1.64	{d16-d17}, [r2], r1
    11c0:	str	r0, [r2]
    11c4:	mov	r0, r5
    11c8:	bl	0 <strdup>
    11cc:	cmp	r0, #0
    11d0:	str	r0, [r4]
    11d4:	bne	1260 <coda_type_record_field_new+0x100>
    11d8:	movw	r1, #0
    11dc:	movw	r2, #0
    11e0:	mvn	r0, #0
    11e4:	movw	r3, #1047	; 0x417
    11e8:	movt	r1, #0
    11ec:	movt	r2, #0
    11f0:	bl	0 <coda_set_error>
    11f4:	mov	r0, r4
    11f8:	bl	3d8 <coda_type_record_field_delete>
    11fc:	b	125c <coda_type_record_field_new+0xfc>
    1200:	movw	r1, #0
    1204:	movw	r2, #0
    1208:	mvn	r0, #99	; 0x63
    120c:	movw	r3, #1017	; 0x3f9
    1210:	movt	r1, #0
    1214:	movt	r2, #0
    1218:	b	1258 <coda_type_record_field_new+0xf8>
    121c:	movw	r0, #65136	; 0xfe70
    1220:	movw	r1, #0
    1224:	mov	r2, r5
    1228:	movt	r0, #65535	; 0xffff
    122c:	movt	r1, #0
    1230:	bl	0 <coda_set_error>
    1234:	b	125c <coda_type_record_field_new+0xfc>
    1238:	movw	r1, #0
    123c:	movw	r3, #0
    1240:	movw	r0, #1031	; 0x407
    1244:	mov	r2, #40	; 0x28
    1248:	str	r0, [sp]
    124c:	movt	r1, #0
    1250:	movt	r3, #0
    1254:	mvn	r0, #0
    1258:	bl	0 <coda_set_error>
    125c:	mov	r4, #0
    1260:	mov	r0, r4
    1264:	sub	sp, fp, #8
    1268:	pop	{r4, r5, fp, pc}

0000126c <coda_type_record_field_set_real_name>:
    126c:	push	{r4, sl, fp, lr}
    1270:	add	fp, sp, #8
    1274:	cmp	r0, #0
    1278:	beq	12ac <coda_type_record_field_set_real_name+0x40>
    127c:	cmp	r1, #0
    1280:	beq	12c4 <coda_type_record_field_set_real_name+0x58>
    1284:	mov	r4, r0
    1288:	ldr	r0, [r0, #4]
    128c:	cmp	r0, #0
    1290:	beq	12ec <coda_type_record_field_set_real_name+0x80>
    1294:	movw	r0, #65136	; 0xfe70
    1298:	movw	r1, #0
    129c:	movt	r0, #65535	; 0xffff
    12a0:	movt	r1, #0
    12a4:	bl	0 <coda_set_error>
    12a8:	b	12e0 <coda_type_record_field_set_real_name+0x74>
    12ac:	movw	r1, #0
    12b0:	movw	r2, #0
    12b4:	mvn	r0, #99	; 0x63
    12b8:	movw	r3, #1059	; 0x423
    12bc:	movt	r1, #0
    12c0:	b	12d8 <coda_type_record_field_set_real_name+0x6c>
    12c4:	movw	r1, #0
    12c8:	movw	r2, #0
    12cc:	mvn	r0, #99	; 0x63
    12d0:	movw	r3, #1064	; 0x428
    12d4:	movt	r1, #0
    12d8:	movt	r2, #0
    12dc:	bl	0 <coda_set_error>
    12e0:	mvn	r4, #0
    12e4:	mov	r0, r4
    12e8:	pop	{r4, sl, fp, pc}
    12ec:	mov	r0, r1
    12f0:	bl	0 <strdup>
    12f4:	str	r0, [r4, #4]
    12f8:	mov	r4, #0
    12fc:	cmp	r0, #0
    1300:	beq	130c <coda_type_record_field_set_real_name+0xa0>
    1304:	mov	r0, r4
    1308:	pop	{r4, sl, fp, pc}
    130c:	movw	r1, #0
    1310:	movw	r2, #0
    1314:	mvn	r0, #0
    1318:	movw	r3, #1076	; 0x434
    131c:	mvn	r4, #0
    1320:	movt	r1, #0
    1324:	movt	r2, #0
    1328:	bl	0 <coda_set_error>
    132c:	mov	r0, r4
    1330:	pop	{r4, sl, fp, pc}

00001334 <coda_type_record_field_set_type>:
    1334:	push	{fp, lr}
    1338:	mov	fp, sp
    133c:	cmp	r0, #0
    1340:	beq	1374 <coda_type_record_field_set_type+0x40>
    1344:	cmp	r1, #0
    1348:	beq	138c <coda_type_record_field_set_type+0x58>
    134c:	ldr	r2, [r0, #8]
    1350:	cmp	r2, #0
    1354:	beq	13b0 <coda_type_record_field_set_type+0x7c>
    1358:	movw	r0, #65136	; 0xfe70
    135c:	movw	r1, #0
    1360:	movt	r0, #65535	; 0xffff
    1364:	movt	r1, #0
    1368:	bl	0 <coda_set_error>
    136c:	mvn	r0, #0
    1370:	pop	{fp, pc}
    1374:	movw	r1, #0
    1378:	movw	r2, #0
    137c:	mvn	r0, #99	; 0x63
    1380:	movw	r3, #1087	; 0x43f
    1384:	movt	r1, #0
    1388:	b	13a0 <coda_type_record_field_set_type+0x6c>
    138c:	movw	r1, #0
    1390:	movw	r2, #0
    1394:	mvn	r0, #99	; 0x63
    1398:	movw	r3, #1092	; 0x444
    139c:	movt	r1, #0
    13a0:	movt	r2, #0
    13a4:	bl	0 <coda_set_error>
    13a8:	mvn	r0, #0
    13ac:	pop	{fp, pc}
    13b0:	str	r1, [r0, #8]
    13b4:	ldr	r0, [r1, #4]
    13b8:	add	r0, r0, #1
    13bc:	str	r0, [r1, #4]
    13c0:	mov	r0, #0
    13c4:	pop	{fp, pc}

000013c8 <coda_type_record_field_set_hidden>:
    13c8:	cmp	r0, #0
    13cc:	movne	r1, #1
    13d0:	strne	r1, [r0, #12]
    13d4:	movne	r0, #0
    13d8:	bxne	lr
    13dc:	push	{fp, lr}
    13e0:	mov	fp, sp
    13e4:	movw	r1, #0
    13e8:	movw	r2, #0
    13ec:	mvn	r0, #99	; 0x63
    13f0:	movw	r3, #1109	; 0x455
    13f4:	movt	r1, #0
    13f8:	movt	r2, #0
    13fc:	bl	0 <coda_set_error>
    1400:	mvn	r0, #0
    1404:	pop	{fp, pc}

00001408 <coda_type_record_field_set_optional>:
    1408:	cmp	r0, #0
    140c:	movne	r1, #1
    1410:	strbne	r1, [r0, #16]
    1414:	movne	r0, #0
    1418:	bxne	lr
    141c:	push	{fp, lr}
    1420:	mov	fp, sp
    1424:	movw	r1, #0
    1428:	movw	r2, #0
    142c:	mvn	r0, #99	; 0x63
    1430:	mov	r3, #1120	; 0x460
    1434:	movt	r1, #0
    1438:	movt	r2, #0
    143c:	bl	0 <coda_set_error>
    1440:	mvn	r0, #0
    1444:	pop	{fp, pc}

00001448 <coda_type_record_field_set_available_expression>:
    1448:	push	{fp, lr}
    144c:	mov	fp, sp
    1450:	cmp	r0, #0
    1454:	beq	1488 <coda_type_record_field_set_available_expression+0x40>
    1458:	cmp	r1, #0
    145c:	beq	14a0 <coda_type_record_field_set_available_expression+0x58>
    1460:	ldr	r2, [r0, #20]
    1464:	cmp	r2, #0
    1468:	beq	14c4 <coda_type_record_field_set_available_expression+0x7c>
    146c:	movw	r0, #65136	; 0xfe70
    1470:	movw	r1, #0
    1474:	movt	r0, #65535	; 0xffff
    1478:	movt	r1, #0
    147c:	bl	0 <coda_set_error>
    1480:	mvn	r0, #0
    1484:	pop	{fp, pc}
    1488:	movw	r1, #0
    148c:	movw	r2, #0
    1490:	mvn	r0, #99	; 0x63
    1494:	movw	r3, #1131	; 0x46b
    1498:	movt	r1, #0
    149c:	b	14b4 <coda_type_record_field_set_available_expression+0x6c>
    14a0:	movw	r1, #0
    14a4:	movw	r2, #0
    14a8:	mvn	r0, #99	; 0x63
    14ac:	mov	r3, #1136	; 0x470
    14b0:	movt	r1, #0
    14b4:	movt	r2, #0
    14b8:	bl	0 <coda_set_error>
    14bc:	mvn	r0, #0
    14c0:	pop	{fp, pc}
    14c4:	mov	r2, #1
    14c8:	strb	r2, [r0, #16]
    14cc:	str	r1, [r0, #20]
    14d0:	mov	r0, #0
    14d4:	pop	{fp, pc}

000014d8 <coda_type_record_field_set_bit_offset_expression>:
    14d8:	push	{fp, lr}
    14dc:	mov	fp, sp
    14e0:	cmp	r0, #0
    14e4:	beq	1518 <coda_type_record_field_set_bit_offset_expression+0x40>
    14e8:	cmp	r1, #0
    14ec:	beq	1530 <coda_type_record_field_set_bit_offset_expression+0x58>
    14f0:	ldr	r2, [r0, #32]
    14f4:	cmp	r2, #0
    14f8:	beq	1554 <coda_type_record_field_set_bit_offset_expression+0x7c>
    14fc:	movw	r0, #65136	; 0xfe70
    1500:	movw	r1, #0
    1504:	movt	r0, #65535	; 0xffff
    1508:	movt	r1, #0
    150c:	bl	0 <coda_set_error>
    1510:	mvn	r0, #0
    1514:	pop	{fp, pc}
    1518:	movw	r1, #0
    151c:	movw	r2, #0
    1520:	mvn	r0, #99	; 0x63
    1524:	movw	r3, #1153	; 0x481
    1528:	movt	r1, #0
    152c:	b	1544 <coda_type_record_field_set_bit_offset_expression+0x6c>
    1530:	movw	r1, #0
    1534:	movw	r2, #0
    1538:	mvn	r0, #99	; 0x63
    153c:	movw	r3, #1158	; 0x486
    1540:	movt	r1, #0
    1544:	movt	r2, #0
    1548:	bl	0 <coda_set_error>
    154c:	mvn	r0, #0
    1550:	pop	{fp, pc}
    1554:	ldr	r2, [r0, #8]
    1558:	ldr	r2, [r2]
    155c:	cmp	r2, #2
    1560:	strcc	r1, [r0, #32]
    1564:	movcc	r0, #0
    1568:	popcc	{fp, pc}
    156c:	sub	r0, r2, #2
    1570:	cmp	r0, #7
    1574:	bhi	1588 <coda_type_record_field_set_bit_offset_expression+0xb0>
    1578:	movw	r1, #0
    157c:	movt	r1, #0
    1580:	ldr	r2, [r1, r0, lsl #2]
    1584:	b	1590 <coda_type_record_field_set_bit_offset_expression+0xb8>
    1588:	movw	r2, #0
    158c:	movt	r2, #0
    1590:	movw	r0, #65136	; 0xfe70
    1594:	movw	r1, #0
    1598:	movt	r0, #65535	; 0xffff
    159c:	movt	r1, #0
    15a0:	bl	0 <coda_set_error>
    15a4:	mvn	r0, #0
    15a8:	pop	{fp, pc}

000015ac <coda_type_get_format_name>:
    15ac:	cmp	r0, #9
    15b0:	movwhi	r0, #0
    15b4:	movthi	r0, #0
    15b8:	bxhi	lr
    15bc:	movw	r1, #0
    15c0:	movt	r1, #0
    15c4:	ldr	r0, [r1, r0, lsl #2]
    15c8:	bx	lr

000015cc <coda_type_record_field_validate>:
    15cc:	push	{fp, lr}
    15d0:	mov	fp, sp
    15d4:	cmp	r0, #0
    15d8:	beq	1608 <coda_type_record_field_validate+0x3c>
    15dc:	ldr	r1, [r0, #8]
    15e0:	mov	r0, #0
    15e4:	cmp	r1, #0
    15e8:	popne	{fp, pc}
    15ec:	movw	r0, #65136	; 0xfe70
    15f0:	movw	r1, #0
    15f4:	movt	r0, #65535	; 0xffff
    15f8:	movt	r1, #0
    15fc:	bl	0 <coda_set_error>
    1600:	mvn	r0, #0
    1604:	pop	{fp, pc}
    1608:	movw	r1, #0
    160c:	movw	r2, #0
    1610:	mvn	r0, #99	; 0x63
    1614:	movw	r3, #1180	; 0x49c
    1618:	movt	r1, #0
    161c:	movt	r2, #0
    1620:	bl	0 <coda_set_error>
    1624:	mvn	r0, #0
    1628:	pop	{fp, pc}

0000162c <coda_type_record_field_get_type>:
    162c:	ldr	r0, [r0, #8]
    1630:	str	r0, [r1]
    1634:	mov	r0, #0
    1638:	bx	lr

0000163c <coda_type_union_new>:
    163c:	push	{fp, lr}
    1640:	mov	fp, sp
    1644:	bl	f78 <coda_type_record_new>
    1648:	cmp	r0, #0
    164c:	movne	r1, #1
    1650:	strne	r1, [r0, #64]	; 0x40
    1654:	pop	{fp, pc}

00001658 <coda_type_empty_record>:
    1658:	push	{r4, r5, fp, lr}
    165c:	add	fp, sp, #8
    1660:	cmp	r0, #11
    1664:	bcs	16a4 <coda_type_empty_record+0x4c>
    1668:	ldr	r1, [pc, #116]	; 16e4 <coda_type_empty_record+0x8c>
    166c:	mov	r4, r0
    1670:	bl	0 <__aeabi_read_tp>
    1674:	add	r0, r0, r1
    1678:	ldr	r0, [r0, r4, lsl #2]
    167c:	cmp	r0, #0
    1680:	popne	{r4, r5, fp, pc}
    1684:	bl	0 <__aeabi_read_tp>
    1688:	add	r5, r0, r1
    168c:	mov	r0, r4
    1690:	bl	f78 <coda_type_record_new>
    1694:	cmp	r0, #0
    1698:	str	r0, [r5, r4, lsl #2]
    169c:	beq	16c4 <coda_type_empty_record+0x6c>
    16a0:	pop	{r4, r5, fp, pc}
    16a4:	movw	r0, #0
    16a8:	movw	r1, #0
    16ac:	movw	r3, #0
    16b0:	movw	r2, #1268	; 0x4f4
    16b4:	movt	r0, #0
    16b8:	movt	r1, #0
    16bc:	movt	r3, #0
    16c0:	bl	0 <__assert_fail>
    16c4:	movw	r0, #0
    16c8:	movw	r1, #0
    16cc:	movw	r3, #0
    16d0:	movw	r2, #1272	; 0x4f8
    16d4:	movt	r0, #0
    16d8:	movt	r1, #0
    16dc:	movt	r3, #0
    16e0:	bl	0 <__assert_fail>
    16e4:	.word	0x00000000

000016e8 <coda_type_record_insert_field>:
    16e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16ec:	add	fp, sp, #28
    16f0:	sub	sp, sp, #12
    16f4:	cmp	r0, #0
    16f8:	beq	17b4 <coda_type_record_insert_field+0xcc>
    16fc:	mov	r5, r2
    1700:	cmp	r2, #0
    1704:	beq	17d0 <coda_type_record_insert_field+0xe8>
    1708:	mov	r4, r0
    170c:	ldr	r0, [r5, #8]
    1710:	cmp	r0, #0
    1714:	beq	17ec <coda_type_record_insert_field+0x104>
    1718:	mov	r7, r1
    171c:	ldr	r1, [r4, #64]	; 0x40
    1720:	cmp	r1, #0
    1724:	beq	1734 <coda_type_record_insert_field+0x4c>
    1728:	ldrb	r1, [r5, #16]
    172c:	cmp	r1, #0
    1730:	beq	1808 <coda_type_record_insert_field+0x120>
    1734:	ldr	r1, [r0]
    1738:	ldr	r0, [r4]
    173c:	cmp	r0, r1
    1740:	beq	1758 <coda_type_record_insert_field+0x70>
    1744:	cmp	r1, #0
    1748:	bne	1820 <coda_type_record_insert_field+0x138>
    174c:	sub	r2, r0, #1
    1750:	cmp	r2, #2
    1754:	bcs	1820 <coda_type_record_insert_field+0x138>
    1758:	ldr	r0, [r4, #48]	; 0x30
    175c:	tst	r0, #15
    1760:	bne	1780 <coda_type_record_insert_field+0x98>
    1764:	mov	r6, #64	; 0x40
    1768:	add	r1, r6, r0, lsl #2
    176c:	ldr	r0, [r4, #52]	; 0x34
    1770:	bl	0 <realloc>
    1774:	cmp	r0, #0
    1778:	beq	1918 <coda_type_record_insert_field+0x230>
    177c:	str	r0, [r4, #52]	; 0x34
    1780:	ldr	r2, [r5]
    1784:	ldr	r0, [r4, #40]	; 0x28
    1788:	mov	r1, r7
    178c:	bl	0 <coda_hashtable_insert_name>
    1790:	cmp	r0, #0
    1794:	beq	1870 <coda_type_record_insert_field+0x188>
    1798:	ldr	r2, [r5]
    179c:	movw	r0, #65136	; 0xfe70
    17a0:	movw	r1, #0
    17a4:	movt	r0, #65535	; 0xffff
    17a8:	movt	r1, #0
    17ac:	bl	0 <coda_set_error>
    17b0:	b	1860 <coda_type_record_insert_field+0x178>
    17b4:	movw	r1, #0
    17b8:	movw	r2, #0
    17bc:	mvn	r0, #99	; 0x63
    17c0:	movw	r3, #1285	; 0x505
    17c4:	movt	r1, #0
    17c8:	movt	r2, #0
    17cc:	b	185c <coda_type_record_insert_field+0x174>
    17d0:	movw	r1, #0
    17d4:	movw	r2, #0
    17d8:	mvn	r0, #99	; 0x63
    17dc:	movw	r3, #1290	; 0x50a
    17e0:	movt	r1, #0
    17e4:	movt	r2, #0
    17e8:	b	185c <coda_type_record_insert_field+0x174>
    17ec:	movw	r1, #0
    17f0:	movw	r2, #0
    17f4:	mvn	r0, #99	; 0x63
    17f8:	movw	r3, #1295	; 0x50f
    17fc:	movt	r1, #0
    1800:	movt	r2, #0
    1804:	b	185c <coda_type_record_insert_field+0x174>
    1808:	movw	r0, #65136	; 0xfe70
    180c:	movw	r1, #0
    1810:	movt	r0, #65535	; 0xffff
    1814:	movt	r1, #0
    1818:	bl	0 <coda_set_error>
    181c:	b	1860 <coda_type_record_insert_field+0x178>
    1820:	movw	r3, #0
    1824:	cmp	r1, #9
    1828:	movt	r3, #0
    182c:	mov	r2, r3
    1830:	movwls	r2, #0
    1834:	movtls	r2, #0
    1838:	ldrls	r2, [r2, r1, lsl #2]
    183c:	cmp	r0, #9
    1840:	movwls	r1, #0
    1844:	movtls	r1, #0
    1848:	ldrls	r3, [r1, r0, lsl #2]
    184c:	movw	r0, #65136	; 0xfe70
    1850:	movw	r1, #0
    1854:	movt	r0, #65535	; 0xffff
    1858:	movt	r1, #0
    185c:	bl	0 <coda_set_error>
    1860:	mvn	r6, #0
    1864:	mov	r0, r6
    1868:	sub	sp, fp, #28
    186c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	ldr	r6, [r5, #4]
    1874:	ldr	r0, [r4, #44]	; 0x2c
    1878:	cmp	r6, #0
    187c:	ldreq	r6, [r5]
    1880:	mov	r1, r6
    1884:	bl	0 <coda_hashtable_get_index_from_name>
    1888:	cmn	r0, #1
    188c:	bgt	18a0 <coda_type_record_insert_field+0x1b8>
    1890:	ldr	r0, [r4, #44]	; 0x2c
    1894:	mov	r1, r7
    1898:	mov	r2, r6
    189c:	bl	0 <coda_hashtable_insert_name>
    18a0:	ldr	r3, [r4, #48]	; 0x30
    18a4:	cmp	r3, r7
    18a8:	ble	18cc <coda_type_record_insert_field+0x1e4>
    18ac:	mov	r0, r3
    18b0:	ldr	r1, [r4, #52]	; 0x34
    18b4:	add	r2, r1, r0, lsl #2
    18b8:	ldr	r2, [r2, #-4]
    18bc:	str	r2, [r1, r0, lsl #2]
    18c0:	sub	r0, r0, #1
    18c4:	cmp	r0, r7
    18c8:	bgt	18b0 <coda_type_record_insert_field+0x1c8>
    18cc:	add	r0, r3, #1
    18d0:	mov	r6, #0
    18d4:	str	r0, [r4, #48]	; 0x30
    18d8:	ldr	r0, [r4, #52]	; 0x34
    18dc:	str	r5, [r0, r7, lsl #2]
    18e0:	ldr	r0, [r4]
    18e4:	cmp	r0, #1
    18e8:	bhi	1864 <coda_type_record_insert_field+0x17c>
    18ec:	ldr	r1, [r4, #64]	; 0x40
    18f0:	ldr	r0, [r5, #32]
    18f4:	cmp	r1, #0
    18f8:	beq	1948 <coda_type_record_insert_field+0x260>
    18fc:	cmp	r0, #0
    1900:	beq	1a38 <coda_type_record_insert_field+0x350>
    1904:	movw	r0, #65136	; 0xfe70
    1908:	movw	r1, #0
    190c:	movt	r0, #65535	; 0xffff
    1910:	movt	r1, #0
    1914:	b	1818 <coda_type_record_insert_field+0x130>
    1918:	ldr	r0, [r4, #48]	; 0x30
    191c:	movw	r1, #1326	; 0x52e
    1920:	movw	r3, #0
    1924:	str	r1, [sp]
    1928:	movw	r1, #0
    192c:	movt	r3, #0
    1930:	movt	r1, #0
    1934:	add	r2, r6, r0, lsl #2
    1938:	mvn	r0, #0
    193c:	mvn	r6, #0
    1940:	bl	0 <coda_set_error>
    1944:	b	1864 <coda_type_record_insert_field+0x17c>
    1948:	cmp	r0, #0
    194c:	beq	1a78 <coda_type_record_insert_field+0x390>
    1950:	cmp	r3, r7
    1954:	mvn	ip, #0
    1958:	mov	r0, r3
    195c:	str	r3, [sp, #8]
    1960:	ble	19e4 <coda_type_record_insert_field+0x2fc>
    1964:	ldr	r0, [sp, #8]
    1968:	sub	r1, r0, r7
    196c:	ldr	r0, [r4, #52]	; 0x34
    1970:	add	r0, r0, r7, lsl #2
    1974:	add	r3, r0, #4
    1978:	ldr	r7, [r3]
    197c:	ldr	r0, [r7, #32]
    1980:	cmp	r0, #0
    1984:	bne	19d8 <coda_type_record_insert_field+0x2f0>
    1988:	ldr	r2, [r3, #-4]
    198c:	ldrd	r8, [r2, #24]
    1990:	subs	r0, ip, r8
    1994:	sbcs	r0, ip, r9
    1998:	bge	19d8 <coda_type_record_insert_field+0x2f0>
    199c:	ldr	r0, [r2, #8]
    19a0:	ldr	sl, [r0, #24]
    19a4:	ldr	lr, [r0, #28]
    19a8:	mvn	r0, #0
    19ac:	subs	ip, r0, sl
    19b0:	mvn	ip, #0
    19b4:	sbcs	r0, ip, lr
    19b8:	bge	19d8 <coda_type_record_insert_field+0x2f0>
    19bc:	ldrb	r0, [r2, #16]
    19c0:	cmp	r0, #0
    19c4:	bne	19d8 <coda_type_record_insert_field+0x2f0>
    19c8:	adds	r0, sl, r8
    19cc:	adc	r9, lr, r9
    19d0:	str	r0, [r7, #24]
    19d4:	str	r9, [r7, #28]
    19d8:	subs	r1, r1, #1
    19dc:	add	r3, r3, #4
    19e0:	bne	1978 <coda_type_record_insert_field+0x290>
    19e4:	mov	r1, r4
    19e8:	ldr	r3, [r1, #24]!
    19ec:	ldr	r7, [r1, #4]
    19f0:	subs	r0, ip, r3
    19f4:	sbcs	r0, ip, r7
    19f8:	bge	1864 <coda_type_record_insert_field+0x17c>
    19fc:	ldr	r0, [r5, #8]
    1a00:	ldr	r2, [r0, #24]
    1a04:	ldr	r5, [r0, #28]
    1a08:	subs	r0, ip, r2
    1a0c:	sbcs	r0, ip, r5
    1a10:	bge	1a2c <coda_type_record_insert_field+0x344>
    1a14:	ldr	r0, [r4, #52]	; 0x34
    1a18:	ldr	r4, [sp, #8]
    1a1c:	ldr	r0, [r0, r4, lsl #2]
    1a20:	ldrb	r0, [r0, #16]
    1a24:	cmp	r0, #0
    1a28:	beq	1afc <coda_type_record_insert_field+0x414>
    1a2c:	str	ip, [r1]
    1a30:	str	ip, [r1, #4]
    1a34:	b	1864 <coda_type_record_insert_field+0x17c>
    1a38:	mov	r6, #0
    1a3c:	cmp	r3, #0
    1a40:	str	r6, [r5, #24]
    1a44:	str	r6, [r5, #28]
    1a48:	beq	1adc <coda_type_record_insert_field+0x3f4>
    1a4c:	ldr	r0, [r5, #8]
    1a50:	ldr	r2, [r4, #24]!
    1a54:	ldrd	r0, [r0, #24]
    1a58:	ldr	r3, [r4, #4]
    1a5c:	eor	r1, r3, r1
    1a60:	eor	r0, r2, r0
    1a64:	orrs	r0, r0, r1
    1a68:	mvnne	r0, #0
    1a6c:	strne	r0, [r4]
    1a70:	strne	r0, [r4, #4]
    1a74:	b	1864 <coda_type_record_insert_field+0x17c>
    1a78:	cmp	r7, #0
    1a7c:	beq	1aec <coda_type_record_insert_field+0x404>
    1a80:	ldr	r0, [r4, #52]	; 0x34
    1a84:	mvn	r2, #0
    1a88:	add	r0, r0, r7, lsl #2
    1a8c:	ldr	r1, [r0, #-4]
    1a90:	ldr	r8, [r1, #24]
    1a94:	ldr	ip, [r1, #28]
    1a98:	subs	r0, r2, r8
    1a9c:	sbcs	r0, r2, ip
    1aa0:	bge	1950 <coda_type_record_insert_field+0x268>
    1aa4:	ldr	r0, [r1, #8]
    1aa8:	mvn	lr, #0
    1aac:	ldr	r9, [r0, #28]
    1ab0:	ldr	r0, [r0, #24]
    1ab4:	subs	r2, lr, r0
    1ab8:	sbcs	r2, lr, r9
    1abc:	bge	1950 <coda_type_record_insert_field+0x268>
    1ac0:	ldrb	r2, [r1, #16]
    1ac4:	cmp	r2, #0
    1ac8:	bne	1950 <coda_type_record_insert_field+0x268>
    1acc:	adds	r0, r0, r8
    1ad0:	adc	r1, r9, ip
    1ad4:	strd	r0, [r5, #24]
    1ad8:	b	1950 <coda_type_record_insert_field+0x268>
    1adc:	ldr	r0, [r5, #8]
    1ae0:	ldrd	r0, [r0, #24]
    1ae4:	strd	r0, [r4, #24]
    1ae8:	b	1864 <coda_type_record_insert_field+0x17c>
    1aec:	mov	r0, #0
    1af0:	str	r0, [r5, #24]
    1af4:	str	r0, [r5, #28]
    1af8:	b	1950 <coda_type_record_insert_field+0x268>
    1afc:	adds	r0, r2, r3
    1b00:	adc	r3, r5, r7
    1b04:	stm	r1, {r0, r3}
    1b08:	b	1864 <coda_type_record_insert_field+0x17c>

00001b0c <coda_type_record_create_field>:
    1b0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1b10:	add	fp, sp, #24
    1b14:	cmp	r0, #0
    1b18:	beq	1bc4 <coda_type_record_create_field+0xb8>
    1b1c:	mov	r7, r1
    1b20:	cmp	r1, #0
    1b24:	beq	1bdc <coda_type_record_create_field+0xd0>
    1b28:	mov	r6, r2
    1b2c:	cmp	r2, #0
    1b30:	beq	1bf4 <coda_type_record_create_field+0xe8>
    1b34:	mov	r5, r0
    1b38:	ldr	r0, [r0]
    1b3c:	cmp	r0, #2
    1b40:	mov	r0, r7
    1b44:	bne	1b50 <coda_type_record_create_field+0x44>
    1b48:	mov	r0, r7
    1b4c:	bl	0 <coda_element_name_from_xml_name>
    1b50:	ldr	r1, [r5, #40]	; 0x28
    1b54:	bl	0 <coda_identifier_from_name>
    1b58:	mvn	r4, #0
    1b5c:	cmp	r0, #0
    1b60:	beq	1cb8 <coda_type_record_create_field+0x1ac>
    1b64:	mov	r9, r0
    1b68:	bl	1160 <coda_type_record_field_new>
    1b6c:	cmp	r0, #0
    1b70:	beq	1bb4 <coda_type_record_create_field+0xa8>
    1b74:	mov	r8, r0
    1b78:	mov	r0, r9
    1b7c:	mov	r1, r7
    1b80:	bl	0 <strcmp>
    1b84:	cmp	r0, #0
    1b88:	beq	1c30 <coda_type_record_create_field+0x124>
    1b8c:	ldr	r0, [r8, #4]
    1b90:	cmp	r0, #0
    1b94:	beq	1c1c <coda_type_record_create_field+0x110>
    1b98:	movw	r0, #65136	; 0xfe70
    1b9c:	movw	r1, #0
    1ba0:	movt	r0, #65535	; 0xffff
    1ba4:	movt	r1, #0
    1ba8:	bl	0 <coda_set_error>
    1bac:	mov	r0, r8
    1bb0:	bl	3d8 <coda_type_record_field_delete>
    1bb4:	mov	r0, r9
    1bb8:	bl	0 <free>
    1bbc:	mov	r0, r4
    1bc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1bc4:	movw	r1, #0
    1bc8:	movw	r2, #0
    1bcc:	mvn	r0, #99	; 0x63
    1bd0:	movw	r3, #1437	; 0x59d
    1bd4:	movt	r1, #0
    1bd8:	b	1c08 <coda_type_record_create_field+0xfc>
    1bdc:	movw	r1, #0
    1be0:	movw	r2, #0
    1be4:	mvn	r0, #99	; 0x63
    1be8:	movw	r3, #1442	; 0x5a2
    1bec:	movt	r1, #0
    1bf0:	b	1c08 <coda_type_record_create_field+0xfc>
    1bf4:	movw	r1, #0
    1bf8:	movw	r2, #0
    1bfc:	mvn	r0, #99	; 0x63
    1c00:	movw	r3, #1447	; 0x5a7
    1c04:	movt	r1, #0
    1c08:	movt	r2, #0
    1c0c:	bl	0 <coda_set_error>
    1c10:	mvn	r4, #0
    1c14:	mov	r0, r4
    1c18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1c1c:	mov	r0, r7
    1c20:	bl	0 <strdup>
    1c24:	cmp	r0, #0
    1c28:	str	r0, [r8, #4]
    1c2c:	beq	1c94 <coda_type_record_create_field+0x188>
    1c30:	mov	r0, r9
    1c34:	bl	0 <free>
    1c38:	ldr	r0, [r8, #8]
    1c3c:	cmp	r0, #0
    1c40:	beq	1c5c <coda_type_record_create_field+0x150>
    1c44:	movw	r0, #65136	; 0xfe70
    1c48:	movw	r1, #0
    1c4c:	movt	r0, #65535	; 0xffff
    1c50:	movt	r1, #0
    1c54:	bl	0 <coda_set_error>
    1c58:	b	1c84 <coda_type_record_create_field+0x178>
    1c5c:	str	r6, [r8, #8]
    1c60:	mov	r2, r8
    1c64:	ldr	r0, [r6, #4]
    1c68:	add	r0, r0, #1
    1c6c:	str	r0, [r6, #4]
    1c70:	mov	r0, r5
    1c74:	ldr	r1, [r5, #48]	; 0x30
    1c78:	bl	16e8 <coda_type_record_insert_field>
    1c7c:	cmp	r0, #0
    1c80:	beq	1cb4 <coda_type_record_create_field+0x1a8>
    1c84:	mov	r0, r8
    1c88:	bl	3d8 <coda_type_record_field_delete>
    1c8c:	mov	r0, r4
    1c90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1c94:	movw	r1, #0
    1c98:	movw	r2, #0
    1c9c:	mvn	r0, #0
    1ca0:	movw	r3, #1076	; 0x434
    1ca4:	movt	r1, #0
    1ca8:	movt	r2, #0
    1cac:	bl	0 <coda_set_error>
    1cb0:	b	1bac <coda_type_record_create_field+0xa0>
    1cb4:	mov	r4, #0
    1cb8:	mov	r0, r4
    1cbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001cc0 <coda_type_record_get_unique_field_name>:
    1cc0:	push	{r4, sl, fp, lr}
    1cc4:	add	fp, sp, #8
    1cc8:	mov	r4, r0
    1ccc:	ldr	r0, [r0]
    1cd0:	mov	r2, r1
    1cd4:	cmp	r0, #2
    1cd8:	bne	1ce8 <coda_type_record_get_unique_field_name+0x28>
    1cdc:	mov	r0, r2
    1ce0:	bl	0 <coda_element_name_from_xml_name>
    1ce4:	mov	r2, r0
    1ce8:	ldr	r1, [r4, #40]	; 0x28
    1cec:	mov	r0, r2
    1cf0:	pop	{r4, sl, fp, lr}
    1cf4:	b	0 <coda_identifier_from_name>

00001cf8 <coda_type_union_set_field_expression>:
    1cf8:	push	{r4, r5, r7, sl, fp, lr}
    1cfc:	add	fp, sp, #16
    1d00:	cmp	r0, #0
    1d04:	beq	1d3c <coda_type_union_set_field_expression+0x44>
    1d08:	cmp	r1, #0
    1d0c:	beq	1d54 <coda_type_union_set_field_expression+0x5c>
    1d10:	ldr	r2, [r0, #64]	; 0x40
    1d14:	cmp	r2, #0
    1d18:	beq	1d78 <coda_type_union_set_field_expression+0x80>
    1d1c:	ldr	r2, [r0, #68]	; 0x44
    1d20:	cmp	r2, #0
    1d24:	beq	1d94 <coda_type_union_set_field_expression+0x9c>
    1d28:	movw	r0, #65136	; 0xfe70
    1d2c:	movw	r1, #0
    1d30:	movt	r0, #65535	; 0xffff
    1d34:	movt	r1, #0
    1d38:	b	1d88 <coda_type_union_set_field_expression+0x90>
    1d3c:	movw	r1, #0
    1d40:	movw	r2, #0
    1d44:	mvn	r0, #99	; 0x63
    1d48:	movw	r3, #1490	; 0x5d2
    1d4c:	movt	r1, #0
    1d50:	b	1d68 <coda_type_union_set_field_expression+0x70>
    1d54:	movw	r1, #0
    1d58:	movw	r2, #0
    1d5c:	mvn	r0, #99	; 0x63
    1d60:	movw	r3, #1495	; 0x5d7
    1d64:	movt	r1, #0
    1d68:	movt	r2, #0
    1d6c:	bl	0 <coda_set_error>
    1d70:	mvn	r0, #0
    1d74:	pop	{r4, r5, r7, sl, fp, pc}
    1d78:	movw	r0, #65136	; 0xfe70
    1d7c:	movw	r1, #0
    1d80:	movt	r0, #65535	; 0xffff
    1d84:	movt	r1, #0
    1d88:	bl	0 <coda_set_error>
    1d8c:	mvn	r0, #0
    1d90:	pop	{r4, r5, r7, sl, fp, pc}
    1d94:	str	r1, [r0, #68]	; 0x44
    1d98:	ldr	r1, [r0, #48]	; 0x30
    1d9c:	cmp	r1, #1
    1da0:	movlt	r0, #0
    1da4:	poplt	{r4, r5, r7, sl, fp, pc}
    1da8:	ldr	lr, [r0, #52]	; 0x34
    1dac:	add	r2, r0, #24
    1db0:	mov	ip, #0
    1db4:	mov	r3, #0
    1db8:	b	1dcc <coda_type_union_set_field_expression+0xd4>
    1dbc:	add	r3, r3, #1
    1dc0:	mov	r0, #0
    1dc4:	cmp	r3, r1
    1dc8:	popge	{r4, r5, r7, sl, fp, pc}
    1dcc:	ldr	r0, [lr, r3, lsl #2]
    1dd0:	ldr	r4, [r0, #32]
    1dd4:	cmp	r4, #0
    1dd8:	bne	1e2c <coda_type_union_set_field_expression+0x134>
    1ddc:	cmp	r3, #0
    1de0:	str	ip, [r0, #24]
    1de4:	str	ip, [r0, #28]
    1de8:	beq	1e18 <coda_type_union_set_field_expression+0x120>
    1dec:	ldr	r0, [r0, #8]
    1df0:	ldrd	r4, [r2]
    1df4:	ldr	r7, [r0, #28]
    1df8:	ldr	r0, [r0, #24]
    1dfc:	eor	r5, r5, r7
    1e00:	eor	r0, r4, r0
    1e04:	orrs	r0, r0, r5
    1e08:	mvn	r5, #0
    1e0c:	mvn	r0, #0
    1e10:	stmne	r2, {r0, r5}
    1e14:	b	1dbc <coda_type_union_set_field_expression+0xc4>
    1e18:	ldr	r0, [r0, #8]
    1e1c:	ldr	r5, [r0, #28]
    1e20:	ldr	r0, [r0, #24]
    1e24:	stm	r2, {r0, r5}
    1e28:	b	1dbc <coda_type_union_set_field_expression+0xc4>
    1e2c:	ldr	r2, [r0]
    1e30:	movw	r0, #65136	; 0xfe70
    1e34:	movw	r1, #0
    1e38:	movt	r0, #65535	; 0xffff
    1e3c:	movt	r1, #0
    1e40:	bl	0 <coda_set_error>
    1e44:	mvn	r0, #0
    1e48:	pop	{r4, r5, r7, sl, fp, pc}

00001e4c <coda_type_record_validate>:
    1e4c:	push	{fp, lr}
    1e50:	mov	fp, sp
    1e54:	cmp	r0, #0
    1e58:	beq	1ea8 <coda_type_record_validate+0x5c>
    1e5c:	ldr	r2, [r0, #64]	; 0x40
    1e60:	mov	r1, r0
    1e64:	mov	r0, #0
    1e68:	cmp	r2, #0
    1e6c:	beq	1ee0 <coda_type_record_validate+0x94>
    1e70:	ldr	r2, [r1, #48]	; 0x30
    1e74:	cmp	r2, #0
    1e78:	beq	1ec8 <coda_type_record_validate+0x7c>
    1e7c:	ldr	r2, [r1]
    1e80:	cmp	r2, #1
    1e84:	bhi	1ee0 <coda_type_record_validate+0x94>
    1e88:	ldr	r1, [r1, #68]	; 0x44
    1e8c:	cmp	r1, #0
    1e90:	popne	{fp, pc}
    1e94:	movw	r0, #65136	; 0xfe70
    1e98:	movw	r1, #0
    1e9c:	movt	r0, #65535	; 0xffff
    1ea0:	movt	r1, #0
    1ea4:	b	1ed8 <coda_type_record_validate+0x8c>
    1ea8:	movw	r1, #0
    1eac:	movw	r2, #0
    1eb0:	mvn	r0, #99	; 0x63
    1eb4:	movw	r3, #1542	; 0x606
    1eb8:	movt	r1, #0
    1ebc:	movt	r2, #0
    1ec0:	bl	0 <coda_set_error>
    1ec4:	b	1edc <coda_type_record_validate+0x90>
    1ec8:	movw	r0, #65136	; 0xfe70
    1ecc:	movw	r1, #0
    1ed0:	movt	r0, #65535	; 0xffff
    1ed4:	movt	r1, #0
    1ed8:	bl	0 <coda_set_error>
    1edc:	mvn	r0, #0
    1ee0:	pop	{fp, pc}

00001ee4 <coda_type_array_new>:
    1ee4:	push	{r4, sl, fp, lr}
    1ee8:	add	fp, sp, #8
    1eec:	sub	sp, sp, #8
    1ef0:	mov	r4, r0
    1ef4:	mov	r0, #120	; 0x78
    1ef8:	bl	0 <malloc>
    1efc:	cmp	r0, #0
    1f00:	beq	1f54 <coda_type_array_new+0x70>
    1f04:	cmp	r4, #2
    1f08:	mvn	r1, #0
    1f0c:	mov	r2, #0
    1f10:	mvn	ip, #0
    1f14:	mov	r3, #1
    1f18:	movwcc	r1, #12
    1f1c:	str	r2, [r0, #32]
    1f20:	str	r2, [r0, #36]	; 0x24
    1f24:	str	r2, [r0, #40]	; 0x28
    1f28:	str	r3, [r0, #44]	; 0x2c
    1f2c:	str	r2, [r0, #48]	; 0x30
    1f30:	str	r4, [r0]
    1f34:	stmib	r0, {r2, r3}
    1f38:	str	r1, [r0, #12]
    1f3c:	str	r2, [r0, #16]
    1f40:	str	r2, [r0, #20]
    1f44:	str	ip, [r0, #24]
    1f48:	str	ip, [r0, #28]
    1f4c:	sub	sp, fp, #8
    1f50:	pop	{r4, sl, fp, pc}
    1f54:	movw	r1, #0
    1f58:	movw	r3, #0
    1f5c:	movw	r0, #1581	; 0x62d
    1f60:	mov	r2, #120	; 0x78
    1f64:	str	r0, [sp]
    1f68:	movt	r1, #0
    1f6c:	movt	r3, #0
    1f70:	mvn	r0, #0
    1f74:	bl	0 <coda_set_error>
    1f78:	mov	r0, #0
    1f7c:	sub	sp, fp, #8
    1f80:	pop	{r4, sl, fp, pc}

00001f84 <coda_type_array_set_base_type>:
    1f84:	push	{r4, r6, r8, r9, fp, lr}
    1f88:	add	fp, sp, #16
    1f8c:	cmp	r0, #0
    1f90:	beq	1fb8 <coda_type_array_set_base_type+0x34>
    1f94:	ldr	r2, [r0, #40]	; 0x28
    1f98:	cmp	r2, #0
    1f9c:	beq	1fe0 <coda_type_array_set_base_type+0x5c>
    1fa0:	movw	r0, #65136	; 0xfe70
    1fa4:	movw	r1, #0
    1fa8:	movt	r0, #65535	; 0xffff
    1fac:	movt	r1, #0
    1fb0:	bl	0 <coda_set_error>
    1fb4:	b	1fd4 <coda_type_array_set_base_type+0x50>
    1fb8:	movw	r1, #0
    1fbc:	movw	r2, #0
    1fc0:	mvn	r0, #99	; 0x63
    1fc4:	movw	r3, #1611	; 0x64b
    1fc8:	movt	r1, #0
    1fcc:	movt	r2, #0
    1fd0:	bl	0 <coda_set_error>
    1fd4:	mvn	r2, #0
    1fd8:	mov	r0, r2
    1fdc:	pop	{r4, r6, r8, r9, fp, pc}
    1fe0:	ldr	lr, [r1]
    1fe4:	ldr	ip, [r0]
    1fe8:	cmp	ip, lr
    1fec:	beq	2004 <coda_type_array_set_base_type+0x80>
    1ff0:	cmp	lr, #0
    1ff4:	bne	2070 <coda_type_array_set_base_type+0xec>
    1ff8:	sub	r2, ip, #1
    1ffc:	cmp	r2, #2
    2000:	bcs	2070 <coda_type_array_set_base_type+0xec>
    2004:	cmp	ip, #2
    2008:	bne	2038 <coda_type_array_set_base_type+0xb4>
    200c:	cmp	lr, #2
    2010:	ldreq	r2, [r1, #8]
    2014:	cmpeq	r2, #1
    2018:	beq	20b0 <coda_type_array_set_base_type+0x12c>
    201c:	str	r1, [r0, #40]	; 0x28
    2020:	mov	r2, #0
    2024:	ldr	r0, [r1, #4]
    2028:	add	r0, r0, #1
    202c:	str	r0, [r1, #4]
    2030:	mov	r0, r2
    2034:	pop	{r4, r6, r8, r9, fp, pc}
    2038:	str	r1, [r0, #40]	; 0x28
    203c:	cmp	ip, #1
    2040:	ldr	r2, [r1, #4]
    2044:	add	r2, r2, #1
    2048:	str	r2, [r1, #4]
    204c:	mov	r2, #0
    2050:	bhi	2068 <coda_type_array_set_base_type+0xe4>
    2054:	ldr	r3, [r0, #44]	; 0x2c
    2058:	cmp	r3, #0
    205c:	ldrge	ip, [r1, #28]
    2060:	cmpge	ip, #0
    2064:	bge	20c4 <coda_type_array_set_base_type+0x140>
    2068:	mov	r0, r2
    206c:	pop	{r4, r6, r8, r9, fp, pc}
    2070:	movw	r3, #0
    2074:	cmp	lr, #9
    2078:	movw	r1, #0
    207c:	movwls	r0, #0
    2080:	movt	r3, #0
    2084:	movt	r1, #0
    2088:	mov	r2, r3
    208c:	movtls	r0, #0
    2090:	ldrls	r2, [r0, lr, lsl #2]
    2094:	cmp	ip, #9
    2098:	movwls	r0, #0
    209c:	movtls	r0, #0
    20a0:	ldrls	r3, [r0, ip, lsl #2]
    20a4:	movw	r0, #65136	; 0xfe70
    20a8:	movt	r0, #65535	; 0xffff
    20ac:	b	1fd0 <coda_type_array_set_base_type+0x4c>
    20b0:	movw	r0, #65136	; 0xfe70
    20b4:	movw	r1, #0
    20b8:	movt	r0, #65535	; 0xffff
    20bc:	movt	r1, #0
    20c0:	b	1fb0 <coda_type_array_set_base_type+0x2c>
    20c4:	ldr	r1, [r1, #24]
    20c8:	asr	r6, r3, #31
    20cc:	umull	r8, r4, r1, r3
    20d0:	mla	r1, r1, r6, r4
    20d4:	mla	r9, ip, r3, r1
    20d8:	strd	r8, [r0, #24]
    20dc:	mov	r0, r2
    20e0:	pop	{r4, r6, r8, r9, fp, pc}

000020e4 <coda_type_array_add_fixed_dimension>:
    20e4:	push	{r4, r6, r8, r9, fp, lr}
    20e8:	add	fp, sp, #16
    20ec:	cmp	r0, #0
    20f0:	beq	2128 <coda_type_array_add_fixed_dimension+0x44>
    20f4:	mov	r2, r1
    20f8:	cmn	r1, #1
    20fc:	ble	214c <coda_type_array_add_fixed_dimension+0x68>
    2100:	ldr	lr, [r0, #48]	; 0x30
    2104:	mov	r1, r0
    2108:	cmp	lr, #8
    210c:	bne	2168 <coda_type_array_add_fixed_dimension+0x84>
    2110:	movw	r0, #65136	; 0xfe70
    2114:	movw	r1, #0
    2118:	mov	r2, #8
    211c:	movt	r0, #65535	; 0xffff
    2120:	movt	r1, #0
    2124:	b	215c <coda_type_array_add_fixed_dimension+0x78>
    2128:	movw	r1, #0
    212c:	movw	r2, #0
    2130:	mvn	r0, #99	; 0x63
    2134:	movw	r3, #1658	; 0x67a
    2138:	movt	r1, #0
    213c:	movt	r2, #0
    2140:	bl	0 <coda_set_error>
    2144:	mvn	r0, #0
    2148:	pop	{r4, r6, r8, r9, fp, pc}
    214c:	movw	r0, #65136	; 0xfe70
    2150:	movw	r1, #0
    2154:	movt	r0, #65535	; 0xffff
    2158:	movt	r1, #0
    215c:	bl	0 <coda_set_error>
    2160:	mvn	r0, #0
    2164:	pop	{r4, r6, r8, r9, fp, pc}
    2168:	add	ip, r1, lr, lsl #2
    216c:	mov	r0, #0
    2170:	add	r3, lr, #1
    2174:	str	r0, [ip, #84]	; 0x54
    2178:	str	r2, [ip, #52]	; 0x34
    217c:	str	r3, [r1, #48]	; 0x30
    2180:	ldr	ip, [r1, #44]	; 0x2c
    2184:	cmn	ip, #1
    2188:	beq	21d8 <coda_type_array_add_fixed_dimension+0xf4>
    218c:	cmp	lr, #0
    2190:	movweq	ip, #1
    2194:	mul	r2, ip, r2
    2198:	str	r2, [r1, #44]	; 0x2c
    219c:	ldr	r3, [r1]
    21a0:	cmp	r3, #1
    21a4:	bhi	21d8 <coda_type_array_add_fixed_dimension+0xf4>
    21a8:	ldr	r3, [r1, #40]	; 0x28
    21ac:	cmp	r3, #0
    21b0:	beq	21d8 <coda_type_array_add_fixed_dimension+0xf4>
    21b4:	ldr	ip, [r3, #28]
    21b8:	cmp	ip, #0
    21bc:	poplt	{r4, r6, r8, r9, fp, pc}
    21c0:	ldr	r3, [r3, #24]
    21c4:	asr	r6, r2, #31
    21c8:	umull	r8, r4, r3, r2
    21cc:	mla	r3, r3, r6, r4
    21d0:	mla	r9, ip, r2, r3
    21d4:	strd	r8, [r1, #24]
    21d8:	pop	{r4, r6, r8, r9, fp, pc}

000021dc <coda_type_array_add_variable_dimension>:
    21dc:	push	{r4, r6, fp, lr}
    21e0:	add	fp, sp, #8
    21e4:	cmp	r0, #0
    21e8:	beq	2210 <coda_type_array_add_variable_dimension+0x34>
    21ec:	ldr	r2, [r0, #48]	; 0x30
    21f0:	cmp	r2, #8
    21f4:	bne	2230 <coda_type_array_add_variable_dimension+0x54>
    21f8:	movw	r0, #65136	; 0xfe70
    21fc:	movw	r1, #0
    2200:	mov	r2, #8
    2204:	movt	r0, #65535	; 0xffff
    2208:	movt	r1, #0
    220c:	b	22b8 <coda_type_array_add_variable_dimension+0xdc>
    2210:	movw	r1, #0
    2214:	movw	r2, #0
    2218:	mvn	r0, #99	; 0x63
    221c:	movw	r3, #1705	; 0x6a9
    2220:	movt	r1, #0
    2224:	movt	r2, #0
    2228:	bl	0 <coda_set_error>
    222c:	b	22bc <coda_type_array_add_variable_dimension+0xe0>
    2230:	ldr	r3, [r0]
    2234:	cmp	r3, #0
    2238:	beq	2254 <coda_type_array_add_variable_dimension+0x78>
    223c:	cmp	r1, #0
    2240:	cmpeq	r3, #1
    2244:	bne	225c <coda_type_array_add_variable_dimension+0x80>
    2248:	movw	r2, #0
    224c:	movt	r2, #0
    2250:	b	22a8 <coda_type_array_add_variable_dimension+0xcc>
    2254:	cmp	r1, #0
    2258:	beq	22a0 <coda_type_array_add_variable_dimension+0xc4>
    225c:	add	r4, r0, r2, lsl #2
    2260:	mvn	r6, #0
    2264:	cmp	r3, #1
    2268:	str	r1, [r4, #84]	; 0x54
    226c:	add	r1, r2, #1
    2270:	str	r6, [r4, #52]	; 0x34
    2274:	str	r6, [r0, #44]	; 0x2c
    2278:	str	r1, [r0, #48]	; 0x30
    227c:	mov	r1, #0
    2280:	bhi	2298 <coda_type_array_add_variable_dimension+0xbc>
    2284:	ldr	r2, [r0, #28]
    2288:	cmp	r2, #0
    228c:	addge	r0, r0, #24
    2290:	strge	r6, [r0]
    2294:	strge	r6, [r0, #4]
    2298:	mov	r0, r1
    229c:	pop	{r4, r6, fp, pc}
    22a0:	movw	r2, #0
    22a4:	movt	r2, #0
    22a8:	movw	r0, #65136	; 0xfe70
    22ac:	movw	r1, #0
    22b0:	movt	r0, #65535	; 0xffff
    22b4:	movt	r1, #0
    22b8:	bl	0 <coda_set_error>
    22bc:	mvn	r1, #0
    22c0:	mov	r0, r1
    22c4:	pop	{r4, r6, fp, pc}

000022c8 <coda_type_array_validate>:
    22c8:	push	{fp, lr}
    22cc:	mov	fp, sp
    22d0:	cmp	r0, #0
    22d4:	beq	2304 <coda_type_array_validate+0x3c>
    22d8:	ldr	r1, [r0, #48]	; 0x30
    22dc:	mov	r0, #0
    22e0:	cmp	r1, #0
    22e4:	popne	{fp, pc}
    22e8:	movw	r0, #65136	; 0xfe70
    22ec:	movw	r1, #0
    22f0:	movt	r0, #65535	; 0xffff
    22f4:	movt	r1, #0
    22f8:	bl	0 <coda_set_error>
    22fc:	mvn	r0, #0
    2300:	pop	{fp, pc}
    2304:	movw	r1, #0
    2308:	movw	r2, #0
    230c:	mvn	r0, #99	; 0x63
    2310:	movw	r3, #1742	; 0x6ce
    2314:	movt	r1, #0
    2318:	movt	r2, #0
    231c:	bl	0 <coda_set_error>
    2320:	mvn	r0, #0
    2324:	pop	{fp, pc}

00002328 <coda_type_number_new>:
    2328:	push	{r4, r5, fp, lr}
    232c:	add	fp, sp, #8
    2330:	sub	sp, sp, #8
    2334:	mov	r5, r0
    2338:	orr	r0, r1, #1
    233c:	mov	r4, r1
    2340:	cmp	r0, #3
    2344:	bne	23a4 <coda_type_number_new+0x7c>
    2348:	mov	r0, #56	; 0x38
    234c:	bl	0 <malloc>
    2350:	cmp	r0, #0
    2354:	beq	23dc <coda_type_number_new+0xb4>
    2358:	mov	r3, #9
    235c:	cmp	r4, #2
    2360:	mov	r2, #0
    2364:	mvn	r1, #0
    2368:	vmov.i32	q8, #0	; 0x00000000
    236c:	movweq	r3, #6
    2370:	str	r2, [r0, #48]	; 0x30
    2374:	str	r2, [r0, #52]	; 0x34
    2378:	str	r5, [r0]
    237c:	stmib	r0, {r2, r4}
    2380:	str	r3, [r0, #12]
    2384:	str	r2, [r0, #16]
    2388:	str	r2, [r0, #20]
    238c:	str	r1, [r0, #24]
    2390:	str	r1, [r0, #28]
    2394:	add	r1, r0, #32
    2398:	vst1.64	{d16-d17}, [r1]
    239c:	sub	sp, fp, #8
    23a0:	pop	{r4, r5, fp, pc}
    23a4:	cmp	r4, #6
    23a8:	bhi	23bc <coda_type_number_new+0x94>
    23ac:	movw	r0, #0
    23b0:	movt	r0, #0
    23b4:	ldr	r2, [r0, r4, lsl #2]
    23b8:	b	23c4 <coda_type_number_new+0x9c>
    23bc:	movw	r2, #0
    23c0:	movt	r2, #0
    23c4:	movw	r0, #65136	; 0xfe70
    23c8:	movw	r1, #0
    23cc:	movt	r0, #65535	; 0xffff
    23d0:	movt	r1, #0
    23d4:	bl	0 <coda_set_error>
    23d8:	b	2400 <coda_type_number_new+0xd8>
    23dc:	movw	r1, #0
    23e0:	movw	r3, #0
    23e4:	movw	r0, #1769	; 0x6e9
    23e8:	mov	r2, #56	; 0x38
    23ec:	str	r0, [sp]
    23f0:	movt	r1, #0
    23f4:	movt	r3, #0
    23f8:	mvn	r0, #0
    23fc:	bl	0 <coda_set_error>
    2400:	mov	r0, #0
    2404:	sub	sp, fp, #8
    2408:	pop	{r4, r5, fp, pc}

0000240c <coda_type_number_set_unit>:
    240c:	push	{r4, sl, fp, lr}
    2410:	add	fp, sp, #8
    2414:	cmp	r1, #0
    2418:	beq	2444 <coda_type_number_set_unit+0x38>
    241c:	mov	r4, r0
    2420:	ldr	r0, [r0, #40]	; 0x28
    2424:	cmp	r0, #0
    2428:	beq	246c <coda_type_number_set_unit+0x60>
    242c:	movw	r0, #65136	; 0xfe70
    2430:	movw	r1, #0
    2434:	movt	r0, #65535	; 0xffff
    2438:	movt	r1, #0
    243c:	bl	0 <coda_set_error>
    2440:	b	2460 <coda_type_number_set_unit+0x54>
    2444:	movw	r1, #0
    2448:	movw	r2, #0
    244c:	mvn	r0, #99	; 0x63
    2450:	movw	r3, #1793	; 0x701
    2454:	movt	r1, #0
    2458:	movt	r2, #0
    245c:	bl	0 <coda_set_error>
    2460:	mvn	r4, #0
    2464:	mov	r0, r4
    2468:	pop	{r4, sl, fp, pc}
    246c:	mov	r0, r1
    2470:	bl	0 <strdup>
    2474:	str	r0, [r4, #40]	; 0x28
    2478:	mov	r4, #0
    247c:	cmp	r0, #0
    2480:	beq	248c <coda_type_number_set_unit+0x80>
    2484:	mov	r0, r4
    2488:	pop	{r4, sl, fp, pc}
    248c:	movw	r1, #0
    2490:	movw	r2, #0
    2494:	mvn	r0, #0
    2498:	movw	r3, #1805	; 0x70d
    249c:	mvn	r4, #0
    24a0:	movt	r1, #0
    24a4:	movt	r2, #0
    24a8:	bl	0 <coda_set_error>
    24ac:	mov	r0, r4
    24b0:	pop	{r4, sl, fp, pc}

000024b4 <coda_type_number_set_endianness>:
    24b4:	cmp	r0, #0
    24b8:	strne	r1, [r0, #44]	; 0x2c
    24bc:	movne	r0, #0
    24c0:	bxne	lr
    24c4:	push	{fp, lr}
    24c8:	mov	fp, sp
    24cc:	movw	r1, #0
    24d0:	movw	r2, #0
    24d4:	mvn	r0, #99	; 0x63
    24d8:	movw	r3, #1816	; 0x718
    24dc:	movt	r1, #0
    24e0:	movt	r2, #0
    24e4:	bl	0 <coda_set_error>
    24e8:	mvn	r0, #0
    24ec:	pop	{fp, pc}

000024f0 <coda_type_number_set_conversion>:
    24f0:	push	{fp, lr}
    24f4:	mov	fp, sp
    24f8:	cmp	r0, #0
    24fc:	beq	2530 <coda_type_number_set_conversion+0x40>
    2500:	ldr	r2, [r0, #48]	; 0x30
    2504:	cmp	r2, #0
    2508:	streq	r1, [r0, #48]	; 0x30
    250c:	moveq	r0, #0
    2510:	popeq	{fp, pc}
    2514:	movw	r0, #65136	; 0xfe70
    2518:	movw	r1, #0
    251c:	movt	r0, #65535	; 0xffff
    2520:	movt	r1, #0
    2524:	bl	0 <coda_set_error>
    2528:	mvn	r0, #0
    252c:	pop	{fp, pc}
    2530:	movw	r1, #0
    2534:	movw	r2, #0
    2538:	mvn	r0, #99	; 0x63
    253c:	movw	r3, #1827	; 0x723
    2540:	movt	r1, #0
    2544:	movt	r2, #0
    2548:	bl	0 <coda_set_error>
    254c:	mvn	r0, #0
    2550:	pop	{fp, pc}

00002554 <coda_type_number_add_ascii_float_mapping>:
    2554:	push	{fp, lr}
    2558:	mov	fp, sp
    255c:	cmp	r0, #0
    2560:	beq	2588 <coda_type_number_add_ascii_float_mapping+0x34>
    2564:	mov	r2, r1
    2568:	cmp	r1, #0
    256c:	beq	25a0 <coda_type_number_add_ascii_float_mapping+0x4c>
    2570:	ldr	r1, [r0, #8]
    2574:	cmp	r1, #3
    2578:	bne	25c4 <coda_type_number_add_ascii_float_mapping+0x70>
    257c:	add	r1, r0, #52	; 0x34
    2580:	pop	{fp, lr}
    2584:	b	25e0 <mapping_type_add_mapping>
    2588:	movw	r1, #0
    258c:	movw	r2, #0
    2590:	mvn	r0, #99	; 0x63
    2594:	movw	r3, #1843	; 0x733
    2598:	movt	r1, #0
    259c:	b	25b4 <coda_type_number_add_ascii_float_mapping+0x60>
    25a0:	movw	r1, #0
    25a4:	movw	r2, #0
    25a8:	mvn	r0, #99	; 0x63
    25ac:	movw	r3, #1848	; 0x738
    25b0:	movt	r1, #0
    25b4:	movt	r2, #0
    25b8:	bl	0 <coda_set_error>
    25bc:	mvn	r0, #0
    25c0:	pop	{fp, pc}
    25c4:	movw	r0, #65136	; 0xfe70
    25c8:	movw	r1, #0
    25cc:	movt	r0, #65535	; 0xffff
    25d0:	movt	r1, #0
    25d4:	bl	0 <coda_set_error>
    25d8:	mvn	r0, #0
    25dc:	pop	{fp, pc}

000025e0 <mapping_type_add_mapping>:
    25e0:	push	{r4, r5, r6, r7, fp, lr}
    25e4:	add	fp, sp, #16
    25e8:	sub	sp, sp, #8
    25ec:	cmp	r2, #0
    25f0:	beq	2624 <mapping_type_add_mapping+0x44>
    25f4:	mov	r6, r1
    25f8:	cmp	r1, #0
    25fc:	beq	263c <mapping_type_add_mapping+0x5c>
    2600:	mov	r4, r0
    2604:	ldr	r0, [r6]
    2608:	mov	r5, r2
    260c:	cmp	r0, #0
    2610:	beq	2668 <mapping_type_add_mapping+0x88>
    2614:	ldr	r1, [r0, #8]
    2618:	tst	r1, #15
    261c:	bne	26c0 <mapping_type_add_mapping+0xe0>
    2620:	b	269c <mapping_type_add_mapping+0xbc>
    2624:	movw	r1, #0
    2628:	movw	r2, #0
    262c:	mvn	r0, #99	; 0x63
    2630:	mov	r3, #348	; 0x15c
    2634:	movt	r1, #0
    2638:	b	2650 <mapping_type_add_mapping+0x70>
    263c:	movw	r1, #0
    2640:	movw	r2, #0
    2644:	mvn	r0, #99	; 0x63
    2648:	movw	r3, #353	; 0x161
    264c:	movt	r1, #0
    2650:	movt	r2, #0
    2654:	bl	0 <coda_set_error>
    2658:	mvn	r6, #0
    265c:	mov	r0, r6
    2660:	sub	sp, fp, #16
    2664:	pop	{r4, r5, r6, r7, fp, pc}
    2668:	mov	r0, #16
    266c:	bl	0 <malloc>
    2670:	cmp	r0, #0
    2674:	str	r0, [r6]
    2678:	beq	2754 <mapping_type_add_mapping+0x174>
    267c:	ldrd	r2, [r4, #24]
    2680:	mov	r1, #0
    2684:	cmn	r3, #1
    2688:	orr	r7, r3, r3, asr #31
    268c:	mvnle	r2, #0
    2690:	stm	r0, {r2, r7}
    2694:	str	r1, [r0, #8]
    2698:	str	r1, [r0, #12]
    269c:	ldr	r0, [r0, #12]
    26a0:	mov	r7, #64	; 0x40
    26a4:	add	r1, r7, r1, lsl #2
    26a8:	bl	0 <realloc>
    26ac:	ldr	r1, [r6]
    26b0:	cmp	r0, #0
    26b4:	beq	272c <mapping_type_add_mapping+0x14c>
    26b8:	str	r0, [r1, #12]
    26bc:	ldr	r0, [r6]
    26c0:	ldrd	r0, [r0, #8]
    26c4:	str	r5, [r1, r0, lsl #2]
    26c8:	ldr	r1, [r6]
    26cc:	mov	r6, #0
    26d0:	ldr	r0, [r1, #8]
    26d4:	add	r0, r0, #1
    26d8:	str	r0, [r1, #8]
    26dc:	ldr	r0, [r4, #28]
    26e0:	cmp	r0, #0
    26e4:	blt	265c <mapping_type_add_mapping+0x7c>
    26e8:	ldr	r2, [r1]
    26ec:	ldr	r1, [r1, #4]
    26f0:	mvn	r0, #0
    26f4:	subs	r3, r0, r2
    26f8:	sbcs	r3, r0, r1
    26fc:	bge	265c <mapping_type_add_mapping+0x7c>
    2700:	ldr	r3, [r5]
    2704:	lsr	r2, r2, #3
    2708:	lsr	r7, r1, #3
    270c:	orr	r1, r2, r1, lsl #29
    2710:	eor	r7, r7, r3, asr #31
    2714:	eor	r1, r1, r3
    2718:	orrs	r1, r1, r7
    271c:	addne	r1, r4, #24
    2720:	strne	r0, [r1]
    2724:	strne	r0, [r1, #4]
    2728:	b	265c <mapping_type_add_mapping+0x7c>
    272c:	ldr	r0, [r1, #8]
    2730:	mov	r1, #380	; 0x17c
    2734:	movw	r3, #0
    2738:	mvn	r6, #0
    273c:	str	r1, [sp]
    2740:	movw	r1, #0
    2744:	movt	r3, #0
    2748:	movt	r1, #0
    274c:	add	r2, r7, r0, lsl #2
    2750:	b	2774 <mapping_type_add_mapping+0x194>
    2754:	movw	r1, #0
    2758:	movw	r3, #0
    275c:	movw	r0, #363	; 0x16b
    2760:	mov	r2, #16
    2764:	mvn	r6, #0
    2768:	str	r0, [sp]
    276c:	movt	r1, #0
    2770:	movt	r3, #0
    2774:	mvn	r0, #0
    2778:	bl	0 <coda_set_error>
    277c:	b	265c <mapping_type_add_mapping+0x7c>

00002780 <coda_type_number_add_ascii_integer_mapping>:
    2780:	push	{fp, lr}
    2784:	mov	fp, sp
    2788:	cmp	r0, #0
    278c:	beq	27b4 <coda_type_number_add_ascii_integer_mapping+0x34>
    2790:	mov	r2, r1
    2794:	cmp	r1, #0
    2798:	beq	27cc <coda_type_number_add_ascii_integer_mapping+0x4c>
    279c:	ldr	r1, [r0, #8]
    27a0:	cmp	r1, #2
    27a4:	bne	27f0 <coda_type_number_add_ascii_integer_mapping+0x70>
    27a8:	add	r1, r0, #52	; 0x34
    27ac:	pop	{fp, lr}
    27b0:	b	25e0 <mapping_type_add_mapping>
    27b4:	movw	r1, #0
    27b8:	movw	r2, #0
    27bc:	mvn	r0, #99	; 0x63
    27c0:	movw	r3, #1863	; 0x747
    27c4:	movt	r1, #0
    27c8:	b	27e0 <coda_type_number_add_ascii_integer_mapping+0x60>
    27cc:	movw	r1, #0
    27d0:	movw	r2, #0
    27d4:	mvn	r0, #99	; 0x63
    27d8:	movw	r3, #1868	; 0x74c
    27dc:	movt	r1, #0
    27e0:	movt	r2, #0
    27e4:	bl	0 <coda_set_error>
    27e8:	mvn	r0, #0
    27ec:	pop	{fp, pc}
    27f0:	movw	r0, #65136	; 0xfe70
    27f4:	movw	r1, #0
    27f8:	movt	r0, #65535	; 0xffff
    27fc:	movt	r1, #0
    2800:	bl	0 <coda_set_error>
    2804:	mvn	r0, #0
    2808:	pop	{fp, pc}

0000280c <coda_type_number_validate>:
    280c:	push	{r4, r5, fp, lr}
    2810:	add	fp, sp, #8
    2814:	cmp	r0, #0
    2818:	beq	28c0 <coda_type_number_validate+0xb4>
    281c:	ldr	r2, [r0]
    2820:	mov	r1, r0
    2824:	mov	r0, #0
    2828:	cmp	r2, #1
    282c:	bne	2a6c <coda_type_number_validate+0x260>
    2830:	ldrd	r4, [r1, #24]
    2834:	cmp	r5, #0
    2838:	blt	28dc <coda_type_number_validate+0xd0>
    283c:	ldr	r2, [r1, #12]
    2840:	cmp	r2, #9
    2844:	bhi	2a70 <coda_type_number_validate+0x264>
    2848:	add	r3, pc, #0
    284c:	ldr	pc, [r3, r2, lsl #2]
    2850:	.word	0x00002878
    2854:	.word	0x00002878
    2858:	.word	0x00002990
    285c:	.word	0x00002990
    2860:	.word	0x00002900
    2864:	.word	0x00002900
    2868:	.word	0x00002948
    286c:	.word	0x00002948
    2870:	.word	0x00002a00
    2874:	.word	0x000029d8
    2878:	subs	r3, r4, #9
    287c:	sbcs	r3, r5, #0
    2880:	blt	2a0c <coda_type_number_validate+0x200>
    2884:	movw	r0, #0
    2888:	movw	r1, #0
    288c:	movw	r3, #0
    2890:	cmp	r2, #0
    2894:	movt	r0, #0
    2898:	movt	r1, #0
    289c:	movt	r3, #0
    28a0:	moveq	r1, r0
    28a4:	cmp	r2, #1
    28a8:	movw	r0, #65136	; 0xfe70
    28ac:	movne	r3, r1
    28b0:	movw	r1, #0
    28b4:	movt	r0, #65535	; 0xffff
    28b8:	movt	r1, #0
    28bc:	b	2a60 <coda_type_number_validate+0x254>
    28c0:	movw	r1, #0
    28c4:	movw	r2, #0
    28c8:	mvn	r0, #99	; 0x63
    28cc:	movw	r3, #1883	; 0x75b
    28d0:	movt	r1, #0
    28d4:	movt	r2, #0
    28d8:	b	2a64 <coda_type_number_validate+0x258>
    28dc:	ldr	r2, [r1, #32]
    28e0:	cmp	r2, #0
    28e4:	bne	2a0c <coda_type_number_validate+0x200>
    28e8:	movw	r0, #65136	; 0xfe70
    28ec:	movw	r1, #0
    28f0:	movt	r0, #65535	; 0xffff
    28f4:	movt	r1, #0
    28f8:	bl	0 <coda_set_error>
    28fc:	b	2a68 <coda_type_number_validate+0x25c>
    2900:	subs	r3, r4, #33	; 0x21
    2904:	sbcs	r3, r5, #0
    2908:	blt	2a0c <coda_type_number_validate+0x200>
    290c:	movw	r0, #0
    2910:	movw	r1, #0
    2914:	movw	r3, #0
    2918:	cmp	r2, #4
    291c:	movt	r0, #0
    2920:	movt	r1, #0
    2924:	movt	r3, #0
    2928:	moveq	r1, r0
    292c:	cmp	r2, #5
    2930:	movw	r0, #65136	; 0xfe70
    2934:	movne	r3, r1
    2938:	movw	r1, #0
    293c:	movt	r0, #65535	; 0xffff
    2940:	movt	r1, #0
    2944:	b	2a60 <coda_type_number_validate+0x254>
    2948:	subs	r3, r4, #65	; 0x41
    294c:	sbcs	r3, r5, #0
    2950:	blt	2a0c <coda_type_number_validate+0x200>
    2954:	movw	r0, #0
    2958:	movw	r1, #0
    295c:	movw	r3, #0
    2960:	cmp	r2, #6
    2964:	movt	r0, #0
    2968:	movt	r1, #0
    296c:	movt	r3, #0
    2970:	moveq	r1, r0
    2974:	cmp	r2, #7
    2978:	movw	r0, #65136	; 0xfe70
    297c:	movne	r3, r1
    2980:	movw	r1, #0
    2984:	movt	r0, #65535	; 0xffff
    2988:	movt	r1, #0
    298c:	b	2a60 <coda_type_number_validate+0x254>
    2990:	subs	r3, r4, #17
    2994:	sbcs	r3, r5, #0
    2998:	blt	2a0c <coda_type_number_validate+0x200>
    299c:	movw	r0, #0
    29a0:	movw	r1, #0
    29a4:	movw	r3, #0
    29a8:	cmp	r2, #2
    29ac:	movt	r0, #0
    29b0:	movt	r1, #0
    29b4:	movt	r3, #0
    29b8:	moveq	r1, r0
    29bc:	cmp	r2, #3
    29c0:	movw	r0, #65136	; 0xfe70
    29c4:	movne	r3, r1
    29c8:	movw	r1, #0
    29cc:	movt	r0, #65535	; 0xffff
    29d0:	movt	r1, #0
    29d4:	b	2a60 <coda_type_number_validate+0x254>
    29d8:	eor	r2, r4, #64	; 0x40
    29dc:	orrs	r2, r2, r5
    29e0:	beq	2a0c <coda_type_number_validate+0x200>
    29e4:	movw	r0, #65136	; 0xfe70
    29e8:	movw	r1, #0
    29ec:	movw	r3, #0
    29f0:	movt	r0, #65535	; 0xffff
    29f4:	movt	r1, #0
    29f8:	movt	r3, #0
    29fc:	b	2a60 <coda_type_number_validate+0x254>
    2a00:	eor	r2, r4, #32
    2a04:	orrs	r2, r2, r5
    2a08:	bne	2a48 <coda_type_number_validate+0x23c>
    2a0c:	ldr	r1, [r1, #44]	; 0x2c
    2a10:	cmp	r1, #1
    2a14:	bne	2a6c <coda_type_number_validate+0x260>
    2a18:	mov	r0, #0
    2a1c:	cmp	r5, #0
    2a20:	blt	2a6c <coda_type_number_validate+0x260>
    2a24:	ands	r1, r4, #7
    2a28:	popeq	{r4, r5, fp, pc}
    2a2c:	movw	r0, #65136	; 0xfe70
    2a30:	movw	r1, #0
    2a34:	mov	r2, r4
    2a38:	movt	r0, #65535	; 0xffff
    2a3c:	movt	r1, #0
    2a40:	bl	0 <coda_set_error>
    2a44:	b	2a68 <coda_type_number_validate+0x25c>
    2a48:	movw	r0, #65136	; 0xfe70
    2a4c:	movw	r1, #0
    2a50:	movw	r3, #0
    2a54:	movt	r0, #65535	; 0xffff
    2a58:	movt	r1, #0
    2a5c:	movt	r3, #0
    2a60:	mov	r2, r4
    2a64:	bl	0 <coda_set_error>
    2a68:	mvn	r0, #0
    2a6c:	pop	{r4, r5, fp, pc}
    2a70:	movw	r0, #0
    2a74:	movw	r1, #0
    2a78:	movw	r3, #0
    2a7c:	movw	r2, #1951	; 0x79f
    2a80:	movt	r0, #0
    2a84:	movt	r1, #0
    2a88:	movt	r3, #0
    2a8c:	bl	0 <__assert_fail>

00002a90 <coda_type_text_new>:
    2a90:	push	{r4, sl, fp, lr}
    2a94:	add	fp, sp, #8
    2a98:	sub	sp, sp, #8
    2a9c:	mov	r4, r0
    2aa0:	mov	r0, #48	; 0x30
    2aa4:	bl	0 <malloc>
    2aa8:	cmp	r0, #0
    2aac:	beq	2aec <coda_type_text_new+0x5c>
    2ab0:	mvn	r1, #0
    2ab4:	mov	r2, #0
    2ab8:	mov	r3, #4
    2abc:	mov	ip, #11
    2ac0:	str	r4, [r0]
    2ac4:	vmov.i32	q8, #0	; 0x00000000
    2ac8:	stmib	r0, {r2, r3, ip}
    2acc:	str	r2, [r0, #16]
    2ad0:	str	r2, [r0, #20]
    2ad4:	str	r1, [r0, #24]
    2ad8:	str	r1, [r0, #28]
    2adc:	add	r1, r0, #32
    2ae0:	vst1.64	{d16-d17}, [r1]
    2ae4:	sub	sp, fp, #8
    2ae8:	pop	{r4, sl, fp, pc}
    2aec:	movw	r1, #0
    2af0:	movw	r3, #0
    2af4:	movw	r0, #1980	; 0x7bc
    2af8:	mov	r2, #48	; 0x30
    2afc:	str	r0, [sp]
    2b00:	movt	r1, #0
    2b04:	movt	r3, #0
    2b08:	mvn	r0, #0
    2b0c:	bl	0 <coda_set_error>
    2b10:	mov	r0, #0
    2b14:	sub	sp, fp, #8
    2b18:	pop	{r4, sl, fp, pc}

00002b1c <coda_type_text_set_fixed_value>:
    2b1c:	push	{r4, sl, fp, lr}
    2b20:	add	fp, sp, #8
    2b24:	cmp	r0, #0
    2b28:	beq	2b5c <coda_type_text_set_fixed_value+0x40>
    2b2c:	cmp	r1, #0
    2b30:	beq	2b74 <coda_type_text_set_fixed_value+0x58>
    2b34:	mov	r4, r0
    2b38:	ldr	r0, [r0, #40]	; 0x28
    2b3c:	cmp	r0, #0
    2b40:	beq	2b9c <coda_type_text_set_fixed_value+0x80>
    2b44:	movw	r0, #65136	; 0xfe70
    2b48:	movw	r1, #0
    2b4c:	movt	r0, #65535	; 0xffff
    2b50:	movt	r1, #0
    2b54:	bl	0 <coda_set_error>
    2b58:	b	2b90 <coda_type_text_set_fixed_value+0x74>
    2b5c:	movw	r1, #0
    2b60:	movw	r2, #0
    2b64:	mvn	r0, #99	; 0x63
    2b68:	movw	r3, #2002	; 0x7d2
    2b6c:	movt	r1, #0
    2b70:	b	2b88 <coda_type_text_set_fixed_value+0x6c>
    2b74:	movw	r1, #0
    2b78:	movw	r2, #0
    2b7c:	mvn	r0, #99	; 0x63
    2b80:	movw	r3, #2007	; 0x7d7
    2b84:	movt	r1, #0
    2b88:	movt	r2, #0
    2b8c:	bl	0 <coda_set_error>
    2b90:	mvn	r4, #0
    2b94:	mov	r0, r4
    2b98:	pop	{r4, sl, fp, pc}
    2b9c:	mov	r0, r1
    2ba0:	bl	0 <strdup>
    2ba4:	str	r0, [r4, #40]	; 0x28
    2ba8:	mov	r4, #0
    2bac:	cmp	r0, #0
    2bb0:	beq	2bbc <coda_type_text_set_fixed_value+0xa0>
    2bb4:	mov	r0, r4
    2bb8:	pop	{r4, sl, fp, pc}
    2bbc:	movw	r1, #0
    2bc0:	movw	r2, #0
    2bc4:	mvn	r0, #0
    2bc8:	movw	r3, #2019	; 0x7e3
    2bcc:	mvn	r4, #0
    2bd0:	movt	r1, #0
    2bd4:	movt	r2, #0
    2bd8:	bl	0 <coda_set_error>
    2bdc:	mov	r0, r4
    2be0:	pop	{r4, sl, fp, pc}

00002be4 <coda_type_text_set_special_text_type>:
    2be4:	push	{fp, lr}
    2be8:	mov	fp, sp
    2bec:	cmp	r0, #0
    2bf0:	beq	2c68 <coda_type_text_set_special_text_type+0x84>
    2bf4:	ldr	ip, [r0]
    2bf8:	cmp	ip, #9
    2bfc:	bhi	2c8c <coda_type_text_set_special_text_type+0xa8>
    2c00:	movw	r2, #0
    2c04:	add	r3, pc, #4
    2c08:	movt	r2, #0
    2c0c:	ldr	pc, [r3, ip, lsl #2]
    2c10:	.word	0x00002c38
    2c14:	.word	0x00002cf4
    2c18:	.word	0x00002c98
    2c1c:	.word	0x00002ca4
    2c20:	.word	0x00002cb0
    2c24:	.word	0x00002cbc
    2c28:	.word	0x00002cc8
    2c2c:	.word	0x00002cd4
    2c30:	.word	0x00002cec
    2c34:	.word	0x00002ce0
    2c38:	ldr	r2, [r0, #44]	; 0x2c
    2c3c:	cmp	r2, #0
    2c40:	streq	r1, [r0, #44]	; 0x2c
    2c44:	moveq	r0, #0
    2c48:	popeq	{fp, pc}
    2c4c:	movw	r0, #65136	; 0xfe70
    2c50:	movw	r1, #0
    2c54:	movt	r0, #65535	; 0xffff
    2c58:	movt	r1, #0
    2c5c:	bl	0 <coda_set_error>
    2c60:	mvn	r0, #0
    2c64:	pop	{fp, pc}
    2c68:	movw	r1, #0
    2c6c:	movw	r2, #0
    2c70:	mvn	r0, #99	; 0x63
    2c74:	movw	r3, #2030	; 0x7ee
    2c78:	movt	r1, #0
    2c7c:	movt	r2, #0
    2c80:	bl	0 <coda_set_error>
    2c84:	mvn	r0, #0
    2c88:	pop	{fp, pc}
    2c8c:	movw	r2, #0
    2c90:	movt	r2, #0
    2c94:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2c98:	movw	r2, #0
    2c9c:	movt	r2, #0
    2ca0:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2ca4:	movw	r2, #0
    2ca8:	movt	r2, #0
    2cac:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2cb0:	movw	r2, #0
    2cb4:	movt	r2, #0
    2cb8:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2cbc:	movw	r2, #0
    2cc0:	movt	r2, #0
    2cc4:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2cc8:	movw	r2, #0
    2ccc:	movt	r2, #0
    2cd0:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2cd4:	movw	r2, #0
    2cd8:	movt	r2, #0
    2cdc:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2ce0:	movw	r2, #0
    2ce4:	movt	r2, #0
    2ce8:	b	2cf4 <coda_type_text_set_special_text_type+0x110>
    2cec:	movw	r2, #0
    2cf0:	movt	r2, #0
    2cf4:	movw	r0, #65136	; 0xfe70
    2cf8:	movw	r1, #0
    2cfc:	movt	r0, #65535	; 0xffff
    2d00:	movt	r1, #0
    2d04:	bl	0 <coda_set_error>
    2d08:	mvn	r0, #0
    2d0c:	pop	{fp, pc}

00002d10 <coda_type_text_validate>:
    2d10:	push	{r4, r5, r6, r7, fp, lr}
    2d14:	add	fp, sp, #16
    2d18:	sub	sp, sp, #24
    2d1c:	cmp	r0, #0
    2d20:	beq	2d68 <coda_type_text_validate+0x58>
    2d24:	mov	r4, r0
    2d28:	ldr	r0, [r0]
    2d2c:	cmp	r0, #1
    2d30:	bhi	2dbc <coda_type_text_validate+0xac>
    2d34:	ldr	r1, [r4, #32]
    2d38:	ldr	r2, [r4, #24]
    2d3c:	ldr	r0, [r4, #28]
    2d40:	cmp	r1, #0
    2d44:	bne	2d94 <coda_type_text_validate+0x84>
    2d48:	cmn	r0, #1
    2d4c:	bgt	2d94 <coda_type_text_validate+0x84>
    2d50:	movw	r0, #65136	; 0xfe70
    2d54:	movw	r1, #0
    2d58:	movt	r0, #65535	; 0xffff
    2d5c:	movt	r1, #0
    2d60:	bl	0 <coda_set_error>
    2d64:	b	2d84 <coda_type_text_validate+0x74>
    2d68:	movw	r1, #0
    2d6c:	movw	r2, #0
    2d70:	mvn	r0, #99	; 0x63
    2d74:	movw	r3, #2052	; 0x804
    2d78:	movt	r1, #0
    2d7c:	movt	r2, #0
    2d80:	bl	0 <coda_set_error>
    2d84:	mvn	r5, #0
    2d88:	mov	r0, r5
    2d8c:	sub	sp, fp, #16
    2d90:	pop	{r4, r5, r6, r7, fp, pc}
    2d94:	cmp	r0, #0
    2d98:	blt	2dbc <coda_type_text_validate+0xac>
    2d9c:	ands	r0, r2, #7
    2da0:	beq	2dbc <coda_type_text_validate+0xac>
    2da4:	movw	r0, #65136	; 0xfe70
    2da8:	movw	r1, #0
    2dac:	movt	r0, #65535	; 0xffff
    2db0:	movt	r1, #0
    2db4:	bl	0 <coda_set_error>
    2db8:	b	2d84 <coda_type_text_validate+0x74>
    2dbc:	ldr	r0, [r4, #12]
    2dc0:	cmp	r0, #10
    2dc4:	bne	2dd8 <coda_type_text_validate+0xc8>
    2dc8:	ldrd	r2, [r4, #24]
    2dcc:	eor	r0, r2, #8
    2dd0:	orrs	r0, r0, r3
    2dd4:	bne	2e4c <coda_type_text_validate+0x13c>
    2dd8:	ldr	r0, [r4, #40]	; 0x28
    2ddc:	mov	r5, #0
    2de0:	cmp	r0, #0
    2de4:	beq	2d88 <coda_type_text_validate+0x78>
    2de8:	ldr	r7, [r4, #28]
    2dec:	cmn	r7, #1
    2df0:	ble	2e64 <coda_type_text_validate+0x154>
    2df4:	ldr	r1, [r4, #24]
    2df8:	lsr	r1, r1, #3
    2dfc:	orr	r6, r1, r7, lsl #29
    2e00:	bl	0 <strlen>
    2e04:	eor	r0, r6, r0
    2e08:	orr	r0, r0, r7, lsr #3
    2e0c:	cmp	r0, #0
    2e10:	beq	2d88 <coda_type_text_validate+0x78>
    2e14:	add	r5, sp, #3
    2e18:	lsr	r1, r7, #3
    2e1c:	mov	r0, r6
    2e20:	mov	r2, r5
    2e24:	bl	0 <coda_str64>
    2e28:	ldr	r0, [r4, #40]	; 0x28
    2e2c:	bl	0 <strlen>
    2e30:	movw	r1, #0
    2e34:	mov	r2, r0
    2e38:	movw	r0, #65136	; 0xfe70
    2e3c:	mov	r3, r5
    2e40:	movt	r0, #65535	; 0xffff
    2e44:	movt	r1, #0
    2e48:	b	2d80 <coda_type_text_validate+0x70>
    2e4c:	movw	r0, #65136	; 0xfe70
    2e50:	movw	r1, #0
    2e54:	movt	r0, #65535	; 0xffff
    2e58:	movt	r1, #0
    2e5c:	bl	0 <coda_set_error>
    2e60:	b	2d84 <coda_type_text_validate+0x74>
    2e64:	movw	r0, #65136	; 0xfe70
    2e68:	movw	r1, #0
    2e6c:	movt	r0, #65535	; 0xffff
    2e70:	movt	r1, #0
    2e74:	bl	0 <coda_set_error>
    2e78:	b	2d84 <coda_type_text_validate+0x74>

00002e7c <coda_type_raw_new>:
    2e7c:	push	{r4, sl, fp, lr}
    2e80:	add	fp, sp, #8
    2e84:	sub	sp, sp, #8
    2e88:	mov	r4, r0
    2e8c:	mov	r0, #48	; 0x30
    2e90:	bl	0 <malloc>
    2e94:	cmp	r0, #0
    2e98:	beq	2edc <coda_type_raw_new+0x60>
    2e9c:	mvn	r1, #0
    2ea0:	mov	r2, #0
    2ea4:	mov	r3, #5
    2ea8:	mov	ip, #12
    2eac:	str	r4, [r0]
    2eb0:	stmib	r0, {r2, r3, ip}
    2eb4:	str	r2, [r0, #16]
    2eb8:	str	r2, [r0, #20]
    2ebc:	str	r1, [r0, #24]
    2ec0:	str	r1, [r0, #28]
    2ec4:	str	r2, [r0, #32]
    2ec8:	str	r2, [r0, #36]	; 0x24
    2ecc:	str	r1, [r0, #40]	; 0x28
    2ed0:	str	r2, [r0, #44]	; 0x2c
    2ed4:	sub	sp, fp, #8
    2ed8:	pop	{r4, sl, fp, pc}
    2edc:	movw	r1, #0
    2ee0:	movw	r3, #0
    2ee4:	movw	r0, #2106	; 0x83a
    2ee8:	mov	r2, #48	; 0x30
    2eec:	str	r0, [sp]
    2ef0:	movt	r1, #0
    2ef4:	movt	r3, #0
    2ef8:	mvn	r0, #0
    2efc:	bl	0 <coda_set_error>
    2f00:	mov	r0, #0
    2f04:	sub	sp, fp, #8
    2f08:	pop	{r4, sl, fp, pc}

00002f0c <coda_type_raw_set_fixed_value>:
    2f0c:	push	{r4, r5, r6, r7, fp, lr}
    2f10:	add	fp, sp, #16
    2f14:	cmp	r0, #0
    2f18:	beq	2f50 <coda_type_raw_set_fixed_value+0x44>
    2f1c:	mov	r7, r2
    2f20:	mov	r6, r1
    2f24:	mov	r5, r0
    2f28:	cmp	r1, #1
    2f2c:	blt	2f70 <coda_type_raw_set_fixed_value+0x64>
    2f30:	cmp	r7, #0
    2f34:	bne	2f70 <coda_type_raw_set_fixed_value+0x64>
    2f38:	movw	r1, #0
    2f3c:	movw	r2, #0
    2f40:	mvn	r0, #99	; 0x63
    2f44:	movw	r3, #2133	; 0x855
    2f48:	movt	r1, #0
    2f4c:	b	2f64 <coda_type_raw_set_fixed_value+0x58>
    2f50:	movw	r1, #0
    2f54:	movw	r2, #0
    2f58:	mvn	r0, #99	; 0x63
    2f5c:	mov	r3, #2128	; 0x850
    2f60:	movt	r1, #0
    2f64:	movt	r2, #0
    2f68:	bl	0 <coda_set_error>
    2f6c:	b	2f9c <coda_type_raw_set_fixed_value+0x90>
    2f70:	ldr	r0, [r5, #44]	; 0x2c
    2f74:	cmp	r0, #0
    2f78:	bne	2f88 <coda_type_raw_set_fixed_value+0x7c>
    2f7c:	ldr	r0, [r5, #40]	; 0x28
    2f80:	cmp	r0, #0
    2f84:	blt	2fa8 <coda_type_raw_set_fixed_value+0x9c>
    2f88:	movw	r0, #65136	; 0xfe70
    2f8c:	movw	r1, #0
    2f90:	movt	r0, #65535	; 0xffff
    2f94:	movt	r1, #0
    2f98:	bl	0 <coda_set_error>
    2f9c:	mvn	r4, #0
    2fa0:	mov	r0, r4
    2fa4:	pop	{r4, r5, r6, r7, fp, pc}
    2fa8:	mov	r4, #0
    2fac:	cmp	r6, #1
    2fb0:	mov	r0, #0
    2fb4:	blt	2fdc <coda_type_raw_set_fixed_value+0xd0>
    2fb8:	mov	r0, r6
    2fbc:	bl	0 <malloc>
    2fc0:	cmp	r0, #0
    2fc4:	str	r0, [r5, #44]	; 0x2c
    2fc8:	beq	2fe8 <coda_type_raw_set_fixed_value+0xdc>
    2fcc:	mov	r1, r7
    2fd0:	mov	r2, r6
    2fd4:	bl	0 <memcpy>
    2fd8:	mov	r0, r6
    2fdc:	str	r0, [r5, #40]	; 0x28
    2fe0:	mov	r0, r4
    2fe4:	pop	{r4, r5, r6, r7, fp, pc}
    2fe8:	movw	r1, #0
    2fec:	movw	r2, #0
    2ff0:	mvn	r0, #0
    2ff4:	movw	r3, #2147	; 0x863
    2ff8:	mvn	r4, #0
    2ffc:	movt	r1, #0
    3000:	movt	r2, #0
    3004:	bl	0 <coda_set_error>
    3008:	mov	r0, r4
    300c:	pop	{r4, r5, r6, r7, fp, pc}

00003010 <coda_type_raw_validate>:
    3010:	push	{r4, r5, fp, lr}
    3014:	add	fp, sp, #8
    3018:	sub	sp, sp, #24
    301c:	cmp	r0, #0
    3020:	beq	30cc <coda_type_raw_validate+0xbc>
    3024:	mov	r4, r0
    3028:	ldr	r0, [r0]
    302c:	cmp	r0, #1
    3030:	bhi	304c <coda_type_raw_validate+0x3c>
    3034:	ldr	r0, [r4, #32]
    3038:	cmp	r0, #0
    303c:	bne	304c <coda_type_raw_validate+0x3c>
    3040:	ldr	r0, [r4, #28]
    3044:	cmn	r0, #1
    3048:	ble	3100 <coda_type_raw_validate+0xf0>
    304c:	ldr	r1, [r4, #44]	; 0x2c
    3050:	mov	r0, #0
    3054:	cmp	r1, #0
    3058:	beq	3118 <coda_type_raw_validate+0x108>
    305c:	ldr	r1, [r4, #28]
    3060:	cmn	r1, #1
    3064:	ble	30ec <coda_type_raw_validate+0xdc>
    3068:	ldr	r3, [r4, #24]
    306c:	lsr	ip, r1, #3
    3070:	lsr	r2, r3, #3
    3074:	orr	r5, r2, r1, lsl #29
    3078:	adds	r2, r5, #1
    307c:	adc	r1, ip, #0
    3080:	ands	r3, r3, #7
    3084:	ldr	r3, [r4, #40]	; 0x28
    3088:	moveq	r2, r5
    308c:	moveq	r1, ip
    3090:	eor	r5, r2, r3
    3094:	eor	r3, r1, r3, asr #31
    3098:	orrs	r3, r5, r3
    309c:	beq	3118 <coda_type_raw_validate+0x108>
    30a0:	add	r5, sp, #3
    30a4:	mov	r0, r2
    30a8:	mov	r2, r5
    30ac:	bl	0 <coda_str64>
    30b0:	ldr	r2, [r4, #40]	; 0x28
    30b4:	movw	r0, #65136	; 0xfe70
    30b8:	movw	r1, #0
    30bc:	mov	r3, r5
    30c0:	movt	r0, #65535	; 0xffff
    30c4:	movt	r1, #0
    30c8:	b	30e4 <coda_type_raw_validate+0xd4>
    30cc:	movw	r1, #0
    30d0:	movw	r2, #0
    30d4:	mvn	r0, #99	; 0x63
    30d8:	movw	r3, #2165	; 0x875
    30dc:	movt	r1, #0
    30e0:	movt	r2, #0
    30e4:	bl	0 <coda_set_error>
    30e8:	b	3114 <coda_type_raw_validate+0x104>
    30ec:	movw	r0, #65136	; 0xfe70
    30f0:	movw	r1, #0
    30f4:	movt	r0, #65535	; 0xffff
    30f8:	movt	r1, #0
    30fc:	b	3110 <coda_type_raw_validate+0x100>
    3100:	movw	r0, #65136	; 0xfe70
    3104:	movw	r1, #0
    3108:	movt	r0, #65535	; 0xffff
    310c:	movt	r1, #0
    3110:	bl	0 <coda_set_error>
    3114:	mvn	r0, #0
    3118:	sub	sp, fp, #8
    311c:	pop	{r4, r5, fp, pc}

00003120 <coda_type_raw_file_singleton>:
    3120:	push	{r4, r5, fp, lr}
    3124:	add	fp, sp, #8
    3128:	sub	sp, sp, #8
    312c:	ldr	r5, [pc, #252]	; 3230 <coda_type_raw_file_singleton+0x110>
    3130:	bl	0 <__aeabi_read_tp>
    3134:	ldr	r4, [r0, r5]
    3138:	cmp	r4, #0
    313c:	beq	314c <coda_type_raw_file_singleton+0x2c>
    3140:	mov	r0, r4
    3144:	sub	sp, fp, #8
    3148:	pop	{r4, r5, fp, pc}
    314c:	mov	r0, #48	; 0x30
    3150:	bl	0 <malloc>
    3154:	cmp	r0, #0
    3158:	beq	31e4 <coda_type_raw_file_singleton+0xc4>
    315c:	add	r1, pc, #188	; 0xbc
    3160:	mov	r4, r0
    3164:	mvn	r0, #0
    3168:	vld1.64	{d16-d17}, [r1 :128]
    316c:	mov	r1, #0
    3170:	mov	r2, r4
    3174:	str	r1, [r4, #16]
    3178:	str	r1, [r4, #20]
    317c:	str	r0, [r4, #24]
    3180:	str	r0, [r4, #28]
    3184:	str	r1, [r4, #32]
    3188:	str	r1, [r4, #36]	; 0x24
    318c:	str	r0, [r4, #40]	; 0x28
    3190:	mov	r0, #44	; 0x2c
    3194:	vst1.32	{d16-d17}, [r2], r0
    3198:	movw	r0, #0
    319c:	str	r1, [r2]
    31a0:	movt	r0, #0
    31a4:	add	r1, sp, #4
    31a8:	bl	0 <coda_expression_from_string>
    31ac:	cmp	r0, #0
    31b0:	movne	r0, r4
    31b4:	blne	738 <raw_delete>
    31b8:	ldr	r1, [sp, #4]
    31bc:	mov	r0, r4
    31c0:	bl	de4 <coda_type_set_byte_size_expression>
    31c4:	cmp	r0, #0
    31c8:	beq	3210 <coda_type_raw_file_singleton+0xf0>
    31cc:	ldr	r0, [sp, #4]
    31d0:	bl	0 <coda_expression_delete>
    31d4:	mov	r0, r4
    31d8:	bl	738 <raw_delete>
    31dc:	mov	r4, #0
    31e0:	b	3140 <coda_type_raw_file_singleton+0x20>
    31e4:	movw	r1, #0
    31e8:	movw	r3, #0
    31ec:	movw	r0, #2106	; 0x83a
    31f0:	mov	r2, #48	; 0x30
    31f4:	str	r0, [sp]
    31f8:	movt	r1, #0
    31fc:	movt	r3, #0
    3200:	mvn	r0, #0
    3204:	bl	0 <coda_set_error>
    3208:	mov	r4, #0
    320c:	b	3140 <coda_type_raw_file_singleton+0x20>
    3210:	bl	0 <__aeabi_read_tp>
    3214:	str	r4, [r0, r5]
    3218:	b	3140 <coda_type_raw_file_singleton+0x20>
    321c:	nop	{0}
    3220:	.word	0x00000001
    3224:	.word	0x00000000
    3228:	.word	0x00000005
    322c:	.word	0x0000000c
    3230:	.word	0x00000000

00003234 <coda_type_no_data_singleton>:
    3234:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    3238:	add	fp, sp, #24
    323c:	sub	sp, sp, #8
    3240:	cmp	r0, #11
    3244:	bcs	3394 <coda_type_no_data_singleton+0x160>
    3248:	ldr	r7, [pc, #356]	; 33b4 <coda_type_no_data_singleton+0x180>
    324c:	mov	r5, r0
    3250:	bl	0 <__aeabi_read_tp>
    3254:	add	r0, r0, r7
    3258:	ldr	r6, [r0, r5, lsl #2]
    325c:	cmp	r6, #0
    3260:	beq	3270 <coda_type_no_data_singleton+0x3c>
    3264:	mov	r0, r6
    3268:	sub	sp, fp, #24
    326c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    3270:	mov	r0, #56	; 0x38
    3274:	bl	0 <malloc>
    3278:	cmp	r0, #0
    327c:	beq	3320 <coda_type_no_data_singleton+0xec>
    3280:	mov	r4, r0
    3284:	mov	r6, #0
    3288:	mov	r0, #6
    328c:	vmov.i32	q8, #0	; 0x00000000
    3290:	mvn	r8, #0
    3294:	stm	r4, {r5, r6}
    3298:	str	r0, [r4, #8]
    329c:	add	r0, r4, #32
    32a0:	str	r8, [r4, #12]
    32a4:	str	r6, [r4, #48]	; 0x30
    32a8:	str	r6, [r4, #52]	; 0x34
    32ac:	vst1.64	{d16-d17}, [r0]
    32b0:	add	r0, r4, #16
    32b4:	vst1.64	{d16-d17}, [r0]
    32b8:	mov	r0, #48	; 0x30
    32bc:	bl	0 <malloc>
    32c0:	cmp	r0, #0
    32c4:	beq	334c <coda_type_no_data_singleton+0x118>
    32c8:	mov	r1, #5
    32cc:	mov	r2, #12
    32d0:	add	r3, r0, #8
    32d4:	stm	r0, {r5, r6}
    32d8:	stm	r3, {r1, r2, r6}
    32dc:	mov	r2, #0
    32e0:	mov	r3, #0
    32e4:	str	r6, [r0, #20]
    32e8:	str	r8, [r0, #24]
    32ec:	str	r8, [r0, #28]
    32f0:	str	r6, [r0, #32]
    32f4:	str	r6, [r0, #36]	; 0x24
    32f8:	str	r8, [r0, #40]	; 0x28
    32fc:	str	r6, [r0, #44]	; 0x2c
    3300:	str	r0, [r4, #44]	; 0x2c
    3304:	bl	b48 <coda_type_set_bit_size>
    3308:	cmp	r0, #0
    330c:	beq	3380 <coda_type_no_data_singleton+0x14c>
    3310:	mov	r0, r4
    3314:	bl	7a4 <special_delete>
    3318:	mov	r6, #0
    331c:	b	3264 <coda_type_no_data_singleton+0x30>
    3320:	movw	r1, #0
    3324:	movw	r3, #0
    3328:	movw	r0, #2245	; 0x8c5
    332c:	mov	r2, #56	; 0x38
    3330:	str	r0, [sp]
    3334:	movt	r1, #0
    3338:	movt	r3, #0
    333c:	mvn	r0, #0
    3340:	bl	0 <coda_set_error>
    3344:	mov	r6, #0
    3348:	b	3264 <coda_type_no_data_singleton+0x30>
    334c:	movw	r1, #0
    3350:	movw	r3, #0
    3354:	movw	r0, #2106	; 0x83a
    3358:	mov	r2, #48	; 0x30
    335c:	str	r0, [sp]
    3360:	movt	r1, #0
    3364:	movt	r3, #0
    3368:	mvn	r0, #0
    336c:	bl	0 <coda_set_error>
    3370:	mov	r0, r4
    3374:	str	r6, [r4, #44]	; 0x2c
    3378:	bl	7a4 <special_delete>
    337c:	b	3264 <coda_type_no_data_singleton+0x30>
    3380:	bl	0 <__aeabi_read_tp>
    3384:	add	r0, r0, r7
    3388:	mov	r6, r4
    338c:	str	r4, [r0, r5, lsl #2]
    3390:	b	3264 <coda_type_no_data_singleton+0x30>
    3394:	movw	r0, #0
    3398:	movw	r1, #0
    339c:	movw	r3, #0
    33a0:	movw	r2, #2235	; 0x8bb
    33a4:	movt	r0, #0
    33a8:	movt	r1, #0
    33ac:	movt	r3, #0
    33b0:	bl	0 <__assert_fail>
    33b4:	.word	0x00000000

000033b8 <coda_type_vsf_integer_new>:
    33b8:	push	{r4, r5, fp, lr}
    33bc:	add	fp, sp, #8
    33c0:	sub	sp, sp, #8
    33c4:	mov	r5, r0
    33c8:	mov	r0, #56	; 0x38
    33cc:	bl	0 <malloc>
    33d0:	cmp	r0, #0
    33d4:	beq	3458 <coda_type_vsf_integer_new+0xa0>
    33d8:	mov	r4, r0
    33dc:	mvn	r0, #0
    33e0:	mov	r1, #0
    33e4:	mov	r2, #6
    33e8:	mov	r3, #9
    33ec:	str	r5, [r4]
    33f0:	stmib	r4, {r1, r2, r3}
    33f4:	str	r1, [r4, #16]
    33f8:	str	r1, [r4, #20]
    33fc:	str	r0, [r4, #24]
    3400:	str	r0, [r4, #28]
    3404:	mov	r0, #1
    3408:	str	r1, [r4, #32]
    340c:	str	r1, [r4, #36]	; 0x24
    3410:	str	r0, [r4, #40]	; 0x28
    3414:	mov	r0, r5
    3418:	str	r1, [r4, #48]	; 0x30
    341c:	str	r1, [r4, #52]	; 0x34
    3420:	bl	f78 <coda_type_record_new>
    3424:	cmp	r0, #0
    3428:	str	r0, [r4, #44]	; 0x2c
    342c:	beq	3484 <coda_type_vsf_integer_new+0xcc>
    3430:	mov	r5, r0
    3434:	ldr	r0, [r0, #20]
    3438:	cmp	r0, #0
    343c:	beq	349c <coda_type_vsf_integer_new+0xe4>
    3440:	movw	r0, #65136	; 0xfe70
    3444:	movw	r1, #0
    3448:	movt	r0, #65535	; 0xffff
    344c:	movt	r1, #0
    3450:	bl	0 <coda_set_error>
    3454:	b	34d4 <coda_type_vsf_integer_new+0x11c>
    3458:	movw	r1, #0
    345c:	movw	r3, #0
    3460:	mov	r0, #2288	; 0x8f0
    3464:	mov	r2, #56	; 0x38
    3468:	str	r0, [sp]
    346c:	movt	r1, #0
    3470:	movt	r3, #0
    3474:	mvn	r0, #0
    3478:	bl	0 <coda_set_error>
    347c:	mov	r4, #0
    3480:	b	34d4 <coda_type_vsf_integer_new+0x11c>
    3484:	movw	r1, #0
    3488:	movw	r2, #0
    348c:	mvn	r0, #99	; 0x63
    3490:	movw	r3, #795	; 0x31b
    3494:	movt	r1, #0
    3498:	b	34cc <coda_type_vsf_integer_new+0x114>
    349c:	movw	r0, #0
    34a0:	movt	r0, #0
    34a4:	bl	0 <strdup>
    34a8:	cmp	r0, #0
    34ac:	beq	34b8 <coda_type_vsf_integer_new+0x100>
    34b0:	str	r0, [r5, #20]
    34b4:	b	34d4 <coda_type_vsf_integer_new+0x11c>
    34b8:	movw	r1, #0
    34bc:	movw	r2, #0
    34c0:	mvn	r0, #0
    34c4:	movw	r3, #814	; 0x32e
    34c8:	movt	r1, #0
    34cc:	movt	r2, #0
    34d0:	bl	0 <coda_set_error>
    34d4:	mov	r0, r4
    34d8:	sub	sp, fp, #8
    34dc:	pop	{r4, r5, fp, pc}

000034e0 <coda_type_vsf_integer_set_type>:
    34e0:	push	{r4, r5, r6, r7, fp, lr}
    34e4:	add	fp, sp, #16
    34e8:	mov	r7, r1
    34ec:	mov	r6, r0
    34f0:	ldr	r1, [r1]
    34f4:	ldr	r0, [r0]
    34f8:	cmp	r0, r1
    34fc:	bne	355c <coda_type_vsf_integer_set_type+0x7c>
    3500:	ldr	r0, [r6, #44]	; 0x2c
    3504:	ldr	r0, [r0, #48]	; 0x30
    3508:	cmp	r0, #1
    350c:	bne	35a0 <coda_type_vsf_integer_set_type+0xc0>
    3510:	movw	r0, #0
    3514:	movt	r0, #0
    3518:	bl	1160 <coda_type_record_field_new>
    351c:	mvn	r4, #0
    3520:	cmp	r0, #0
    3524:	beq	3600 <coda_type_vsf_integer_set_type+0x120>
    3528:	mov	r5, r0
    352c:	ldr	r0, [r0, #8]
    3530:	cmp	r0, #0
    3534:	beq	35c0 <coda_type_vsf_integer_set_type+0xe0>
    3538:	movw	r0, #65136	; 0xfe70
    353c:	movw	r1, #0
    3540:	movt	r0, #65535	; 0xffff
    3544:	movt	r1, #0
    3548:	bl	0 <coda_set_error>
    354c:	mov	r0, r5
    3550:	bl	3d8 <coda_type_record_field_delete>
    3554:	mov	r0, r4
    3558:	pop	{r4, r5, r6, r7, fp, pc}
    355c:	movw	r3, #0
    3560:	cmp	r1, #9
    3564:	movt	r3, #0
    3568:	mov	r2, r3
    356c:	movwls	r2, #0
    3570:	movtls	r2, #0
    3574:	ldrls	r2, [r2, r1, lsl #2]
    3578:	cmp	r0, #9
    357c:	movwls	r1, #0
    3580:	movtls	r1, #0
    3584:	ldrls	r3, [r1, r0, lsl #2]
    3588:	movw	r0, #65136	; 0xfe70
    358c:	movw	r1, #0
    3590:	movt	r0, #65535	; 0xffff
    3594:	movt	r1, #0
    3598:	bl	0 <coda_set_error>
    359c:	b	35b4 <coda_type_vsf_integer_set_type+0xd4>
    35a0:	movw	r0, #65136	; 0xfe70
    35a4:	movw	r1, #0
    35a8:	movt	r0, #65535	; 0xffff
    35ac:	movt	r1, #0
    35b0:	bl	0 <coda_set_error>
    35b4:	mvn	r4, #0
    35b8:	mov	r0, r4
    35bc:	pop	{r4, r5, r6, r7, fp, pc}
    35c0:	str	r7, [r5, #8]
    35c4:	ldr	r0, [r7, #4]
    35c8:	add	r0, r0, #1
    35cc:	str	r0, [r7, #4]
    35d0:	ldr	r0, [r6, #44]	; 0x2c
    35d4:	cmp	r0, #0
    35d8:	beq	3608 <coda_type_vsf_integer_set_type+0x128>
    35dc:	ldr	r1, [r0, #48]	; 0x30
    35e0:	mov	r2, r5
    35e4:	bl	16e8 <coda_type_record_insert_field>
    35e8:	cmp	r0, #0
    35ec:	bne	354c <coda_type_vsf_integer_set_type+0x6c>
    35f0:	ldr	r0, [r6, #44]	; 0x2c
    35f4:	mov	r4, #0
    35f8:	ldrd	r0, [r0, #24]
    35fc:	strd	r0, [r6, #24]
    3600:	mov	r0, r4
    3604:	pop	{r4, r5, r6, r7, fp, pc}
    3608:	movw	r1, #0
    360c:	movw	r2, #0
    3610:	mvn	r0, #99	; 0x63
    3614:	mov	r3, #1424	; 0x590
    3618:	movt	r1, #0
    361c:	movt	r2, #0
    3620:	bl	0 <coda_set_error>
    3624:	b	354c <coda_type_vsf_integer_set_type+0x6c>

00003628 <coda_type_vsf_integer_set_scale_factor>:
    3628:	push	{r4, r5, r6, r7, fp, lr}
    362c:	add	fp, sp, #16
    3630:	mov	r6, r1
    3634:	mov	r4, r0
    3638:	ldr	r1, [r1]
    363c:	ldr	r0, [r0]
    3640:	cmp	r0, r1
    3644:	bne	3670 <coda_type_vsf_integer_set_scale_factor+0x48>
    3648:	ldr	r0, [r4, #44]	; 0x2c
    364c:	ldr	r0, [r0, #48]	; 0x30
    3650:	cmp	r0, #0
    3654:	beq	36bc <coda_type_vsf_integer_set_scale_factor+0x94>
    3658:	movw	r0, #65136	; 0xfe70
    365c:	movw	r1, #0
    3660:	movt	r0, #65535	; 0xffff
    3664:	movt	r1, #0
    3668:	bl	0 <coda_set_error>
    366c:	b	36b0 <coda_type_vsf_integer_set_scale_factor+0x88>
    3670:	movw	r3, #0
    3674:	cmp	r1, #9
    3678:	movt	r3, #0
    367c:	mov	r2, r3
    3680:	movwls	r2, #0
    3684:	movtls	r2, #0
    3688:	ldrls	r2, [r2, r1, lsl #2]
    368c:	cmp	r0, #9
    3690:	movwls	r1, #0
    3694:	movtls	r1, #0
    3698:	ldrls	r3, [r1, r0, lsl #2]
    369c:	movw	r0, #65136	; 0xfe70
    36a0:	movw	r1, #0
    36a4:	movt	r0, #65535	; 0xffff
    36a8:	movt	r1, #0
    36ac:	bl	0 <coda_set_error>
    36b0:	mvn	r5, #0
    36b4:	mov	r0, r5
    36b8:	pop	{r4, r5, r6, r7, fp, pc}
    36bc:	ldr	r1, [r6, #8]
    36c0:	cmp	r1, #2
    36c4:	bne	36d8 <coda_type_vsf_integer_set_scale_factor+0xb0>
    36c8:	ldr	r0, [pc, #316]	; 380c <coda_type_vsf_integer_set_scale_factor+0x1e4>
    36cc:	ldr	r1, [pc, r0]
    36d0:	bl	0 <__aeabi_read_tp>
    36d4:	b	36ec <coda_type_vsf_integer_set_scale_factor+0xc4>
    36d8:	bl	0 <__aeabi_read_tp>
    36dc:	cmp	r1, #3
    36e0:	bne	3700 <coda_type_vsf_integer_set_scale_factor+0xd8>
    36e4:	ldr	r1, [pc, #284]	; 3808 <coda_type_vsf_integer_set_scale_factor+0x1e0>
    36e8:	ldr	r1, [pc, r1]
    36ec:	ldr	r0, [r0, r1]
    36f0:	cmp	r0, #0
    36f4:	ldrne	r0, [r6, #48]	; 0x30
    36f8:	cmpne	r0, #0
    36fc:	bne	3774 <coda_type_vsf_integer_set_scale_factor+0x14c>
    3700:	ldr	r0, [r6, #12]
    3704:	cmp	r0, #5
    3708:	bcs	3758 <coda_type_vsf_integer_set_scale_factor+0x130>
    370c:	movw	r0, #0
    3710:	movt	r0, #0
    3714:	bl	1160 <coda_type_record_field_new>
    3718:	mvn	r5, #0
    371c:	cmp	r0, #0
    3720:	beq	37e0 <coda_type_vsf_integer_set_scale_factor+0x1b8>
    3724:	mov	r7, r0
    3728:	ldr	r0, [r0, #8]
    372c:	cmp	r0, #0
    3730:	beq	37a0 <coda_type_vsf_integer_set_scale_factor+0x178>
    3734:	movw	r0, #65136	; 0xfe70
    3738:	movw	r1, #0
    373c:	movt	r0, #65535	; 0xffff
    3740:	movt	r1, #0
    3744:	bl	0 <coda_set_error>
    3748:	mov	r0, r7
    374c:	bl	3d8 <coda_type_record_field_delete>
    3750:	mov	r0, r5
    3754:	pop	{r4, r5, r6, r7, fp, pc}
    3758:	add	r0, r0, #1
    375c:	cmp	r0, #13
    3760:	bhi	3780 <coda_type_vsf_integer_set_scale_factor+0x158>
    3764:	movw	r1, #0
    3768:	movt	r1, #0
    376c:	ldr	r2, [r1, r0, lsl #2]
    3770:	b	3788 <coda_type_vsf_integer_set_scale_factor+0x160>
    3774:	movw	r2, #0
    3778:	movt	r2, #0
    377c:	b	3788 <coda_type_vsf_integer_set_scale_factor+0x160>
    3780:	movw	r2, #0
    3784:	movt	r2, #0
    3788:	movw	r0, #65136	; 0xfe70
    378c:	movw	r1, #0
    3790:	movt	r0, #65535	; 0xffff
    3794:	movt	r1, #0
    3798:	bl	0 <coda_set_error>
    379c:	b	36b0 <coda_type_vsf_integer_set_scale_factor+0x88>
    37a0:	str	r6, [r7, #8]
    37a4:	ldr	r0, [r6, #4]
    37a8:	add	r0, r0, #1
    37ac:	str	r0, [r6, #4]
    37b0:	ldr	r0, [r4, #44]	; 0x2c
    37b4:	cmp	r0, #0
    37b8:	beq	37e8 <coda_type_vsf_integer_set_scale_factor+0x1c0>
    37bc:	ldr	r1, [r0, #48]	; 0x30
    37c0:	mov	r2, r7
    37c4:	bl	16e8 <coda_type_record_insert_field>
    37c8:	cmp	r0, #0
    37cc:	bne	3748 <coda_type_vsf_integer_set_scale_factor+0x120>
    37d0:	ldr	r0, [r4, #44]	; 0x2c
    37d4:	mov	r5, #0
    37d8:	ldrd	r0, [r0, #24]
    37dc:	strd	r0, [r4, #24]
    37e0:	mov	r0, r5
    37e4:	pop	{r4, r5, r6, r7, fp, pc}
    37e8:	movw	r1, #0
    37ec:	movw	r2, #0
    37f0:	mvn	r0, #99	; 0x63
    37f4:	mov	r3, #1424	; 0x590
    37f8:	movt	r1, #0
    37fc:	movt	r2, #0
    3800:	bl	0 <coda_set_error>
    3804:	b	3748 <coda_type_vsf_integer_set_scale_factor+0x120>
    3808:	.word	0x00000118
    380c:	.word	0x00000138

00003810 <coda_type_get_read_type>:
    3810:	push	{fp, lr}
    3814:	mov	fp, sp
    3818:	cmp	r0, #0
    381c:	beq	3848 <coda_type_get_read_type+0x38>
    3820:	cmp	r1, #0
    3824:	beq	3860 <coda_type_get_read_type+0x50>
    3828:	ldr	r3, [r0, #8]
    382c:	mov	r2, r0
    3830:	cmp	r3, #2
    3834:	bne	3884 <coda_type_get_read_type+0x74>
    3838:	ldr	r0, [pc, #136]	; 38c8 <coda_type_get_read_type+0xb8>
    383c:	ldr	r3, [pc, r0]
    3840:	bl	0 <__aeabi_read_tp>
    3844:	b	3898 <coda_type_get_read_type+0x88>
    3848:	movw	r1, #0
    384c:	movw	r2, #0
    3850:	mvn	r0, #99	; 0x63
    3854:	movw	r3, #2908	; 0xb5c
    3858:	movt	r1, #0
    385c:	b	3874 <coda_type_get_read_type+0x64>
    3860:	movw	r1, #0
    3864:	movw	r2, #0
    3868:	mvn	r0, #99	; 0x63
    386c:	movw	r3, #2913	; 0xb61
    3870:	movt	r1, #0
    3874:	movt	r2, #0
    3878:	bl	0 <coda_set_error>
    387c:	mvn	r0, #0
    3880:	pop	{fp, pc}
    3884:	bl	0 <__aeabi_read_tp>
    3888:	cmp	r3, #3
    388c:	bne	38ac <coda_type_get_read_type+0x9c>
    3890:	ldr	r3, [pc, #44]	; 38c4 <coda_type_get_read_type+0xb4>
    3894:	ldr	r3, [pc, r3]
    3898:	ldr	r0, [r0, r3]
    389c:	cmp	r0, #0
    38a0:	ldrne	r0, [r2, #48]	; 0x30
    38a4:	cmpne	r0, #0
    38a8:	bne	38b4 <coda_type_get_read_type+0xa4>
    38ac:	ldr	r0, [r2, #12]
    38b0:	b	38b8 <coda_type_get_read_type+0xa8>
    38b4:	mov	r0, #9
    38b8:	str	r0, [r1]
    38bc:	mov	r0, #0
    38c0:	pop	{fp, pc}
    38c4:	.word	0x00000028
    38c8:	.word	0x00000084

000038cc <coda_type_vsf_integer_set_unit>:
    38cc:	push	{r4, sl, fp, lr}
    38d0:	add	fp, sp, #8
    38d4:	cmp	r1, #0
    38d8:	beq	3904 <coda_type_vsf_integer_set_unit+0x38>
    38dc:	mov	r4, r0
    38e0:	ldr	r0, [r0, #48]	; 0x30
    38e4:	cmp	r0, #0
    38e8:	beq	392c <coda_type_vsf_integer_set_unit+0x60>
    38ec:	movw	r0, #65136	; 0xfe70
    38f0:	movw	r1, #0
    38f4:	movt	r0, #65535	; 0xffff
    38f8:	movt	r1, #0
    38fc:	bl	0 <coda_set_error>
    3900:	b	3920 <coda_type_vsf_integer_set_unit+0x54>
    3904:	movw	r1, #0
    3908:	movw	r2, #0
    390c:	mvn	r0, #99	; 0x63
    3910:	movw	r3, #2412	; 0x96c
    3914:	movt	r1, #0
    3918:	movt	r2, #0
    391c:	bl	0 <coda_set_error>
    3920:	mvn	r4, #0
    3924:	mov	r0, r4
    3928:	pop	{r4, sl, fp, pc}
    392c:	mov	r0, r1
    3930:	bl	0 <strdup>
    3934:	str	r0, [r4, #48]	; 0x30
    3938:	mov	r4, #0
    393c:	cmp	r0, #0
    3940:	beq	394c <coda_type_vsf_integer_set_unit+0x80>
    3944:	mov	r0, r4
    3948:	pop	{r4, sl, fp, pc}
    394c:	movw	r1, #0
    3950:	movw	r2, #0
    3954:	mvn	r0, #0
    3958:	movw	r3, #2424	; 0x978
    395c:	mvn	r4, #0
    3960:	movt	r1, #0
    3964:	movt	r2, #0
    3968:	bl	0 <coda_set_error>
    396c:	mov	r0, r4
    3970:	pop	{r4, sl, fp, pc}

00003974 <coda_type_vsf_integer_validate>:
    3974:	ldr	r0, [r0, #44]	; 0x2c
    3978:	ldr	r1, [r0, #48]	; 0x30
    397c:	mov	r0, #0
    3980:	cmp	r1, #2
    3984:	bxeq	lr
    3988:	push	{fp, lr}
    398c:	mov	fp, sp
    3990:	movw	r0, #65136	; 0xfe70
    3994:	movw	r1, #0
    3998:	movt	r0, #65535	; 0xffff
    399c:	movt	r1, #0
    39a0:	bl	0 <coda_set_error>
    39a4:	mvn	r0, #0
    39a8:	pop	{fp, lr}
    39ac:	bx	lr

000039b0 <coda_type_time_new>:
    39b0:	push	{r4, r5, r6, sl, fp, lr}
    39b4:	add	fp, sp, #16
    39b8:	sub	sp, sp, #8
    39bc:	cmp	r1, #0
    39c0:	beq	3a64 <coda_type_time_new+0xb4>
    39c4:	mov	r6, r0
    39c8:	mov	r0, #56	; 0x38
    39cc:	mov	r5, r1
    39d0:	bl	0 <malloc>
    39d4:	cmp	r0, #0
    39d8:	beq	3a80 <coda_type_time_new+0xd0>
    39dc:	mov	r4, r0
    39e0:	mvn	r0, #0
    39e4:	mov	r1, #0
    39e8:	mov	r2, #6
    39ec:	mov	r3, #9
    39f0:	str	r6, [r4]
    39f4:	stmib	r4, {r1, r2, r3}
    39f8:	str	r1, [r4, #16]
    39fc:	str	r1, [r4, #20]
    3a00:	str	r0, [r4, #24]
    3a04:	str	r0, [r4, #28]
    3a08:	mov	r0, #2
    3a0c:	str	r1, [r4, #32]
    3a10:	str	r1, [r4, #36]	; 0x24
    3a14:	str	r0, [r4, #40]	; 0x28
    3a18:	movw	r0, #0
    3a1c:	str	r1, [r4, #44]	; 0x2c
    3a20:	str	r1, [r4, #48]	; 0x30
    3a24:	str	r5, [r4, #52]	; 0x34
    3a28:	movt	r0, #0
    3a2c:	bl	0 <strdup>
    3a30:	cmp	r0, #0
    3a34:	str	r0, [r4, #48]	; 0x30
    3a38:	bne	3aa8 <coda_type_time_new+0xf8>
    3a3c:	movw	r1, #0
    3a40:	movw	r2, #0
    3a44:	mvn	r0, #0
    3a48:	movw	r3, #2476	; 0x9ac
    3a4c:	movt	r1, #0
    3a50:	movt	r2, #0
    3a54:	bl	0 <coda_set_error>
    3a58:	mov	r0, r4
    3a5c:	bl	7a4 <special_delete>
    3a60:	b	3aa4 <coda_type_time_new+0xf4>
    3a64:	movw	r1, #0
    3a68:	movw	r2, #0
    3a6c:	mvn	r0, #99	; 0x63
    3a70:	movw	r3, #2447	; 0x98f
    3a74:	movt	r1, #0
    3a78:	movt	r2, #0
    3a7c:	b	3aa0 <coda_type_time_new+0xf0>
    3a80:	movw	r1, #0
    3a84:	movw	r3, #0
    3a88:	movw	r0, #2455	; 0x997
    3a8c:	mov	r2, #56	; 0x38
    3a90:	str	r0, [sp]
    3a94:	movt	r1, #0
    3a98:	movt	r3, #0
    3a9c:	mvn	r0, #0
    3aa0:	bl	0 <coda_set_error>
    3aa4:	mov	r4, #0
    3aa8:	mov	r0, r4
    3aac:	sub	sp, fp, #16
    3ab0:	pop	{r4, r5, r6, sl, fp, pc}

00003ab4 <coda_type_time_add_ascii_float_mapping>:
    3ab4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3ab8:	add	fp, sp, #24
    3abc:	sub	sp, sp, #72	; 0x48
    3ac0:	cmp	r0, #0
    3ac4:	beq	3b10 <coda_type_time_add_ascii_float_mapping+0x5c>
    3ac8:	mov	r4, r1
    3acc:	cmp	r1, #0
    3ad0:	beq	3b28 <coda_type_time_add_ascii_float_mapping+0x74>
    3ad4:	mov	r5, r0
    3ad8:	ldr	r0, [r0, #40]	; 0x28
    3adc:	cmp	r0, #3
    3ae0:	bhi	3b48 <coda_type_time_add_ascii_float_mapping+0x94>
    3ae4:	movw	r2, #0
    3ae8:	add	r1, pc, #4
    3aec:	movt	r2, #0
    3af0:	ldr	pc, [r1, r0, lsl #2]
    3af4:	.word	0x00003bac
    3af8:	.word	0x00003b04
    3afc:	.word	0x00003b54
    3b00:	.word	0x00003ba4
    3b04:	movw	r2, #0
    3b08:	movt	r2, #0
    3b0c:	b	3bac <coda_type_time_add_ascii_float_mapping+0xf8>
    3b10:	movw	r1, #0
    3b14:	movw	r2, #0
    3b18:	mvn	r0, #99	; 0x63
    3b1c:	movw	r3, #2493	; 0x9bd
    3b20:	movt	r1, #0
    3b24:	b	3b3c <coda_type_time_add_ascii_float_mapping+0x88>
    3b28:	movw	r1, #0
    3b2c:	movw	r2, #0
    3b30:	mvn	r0, #99	; 0x63
    3b34:	movw	r3, #2498	; 0x9c2
    3b38:	movt	r1, #0
    3b3c:	movt	r2, #0
    3b40:	bl	0 <coda_set_error>
    3b44:	b	3bc0 <coda_type_time_add_ascii_float_mapping+0x10c>
    3b48:	movw	r2, #0
    3b4c:	movt	r2, #0
    3b50:	b	3bac <coda_type_time_add_ascii_float_mapping+0xf8>
    3b54:	ldr	r0, [r5, #44]	; 0x2c
    3b58:	cmp	r0, #0
    3b5c:	beq	3bd0 <coda_type_time_add_ascii_float_mapping+0x11c>
    3b60:	ldr	r0, [r0, #8]
    3b64:	cmp	r0, #6
    3b68:	bhi	3be8 <coda_type_time_add_ascii_float_mapping+0x134>
    3b6c:	movw	r2, #0
    3b70:	add	r1, pc, #4
    3b74:	movt	r2, #0
    3b78:	ldr	pc, [r1, r0, lsl #2]
    3b7c:	.word	0x00003cd8
    3b80:	.word	0x00003b98
    3b84:	.word	0x00003bf4
    3b88:	.word	0x00003c00
    3b8c:	.word	0x00003c0c
    3b90:	.word	0x00003cc4
    3b94:	.word	0x00003cd0
    3b98:	movw	r2, #0
    3b9c:	movt	r2, #0
    3ba0:	b	3cd8 <coda_type_time_add_ascii_float_mapping+0x224>
    3ba4:	movw	r2, #0
    3ba8:	movt	r2, #0
    3bac:	movw	r0, #65136	; 0xfe70
    3bb0:	movw	r1, #0
    3bb4:	movt	r0, #65535	; 0xffff
    3bb8:	movt	r1, #0
    3bbc:	bl	0 <coda_set_error>
    3bc0:	mvn	r6, #0
    3bc4:	mov	r0, r6
    3bc8:	sub	sp, fp, #24
    3bcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3bd0:	movw	r0, #65136	; 0xfe70
    3bd4:	movw	r1, #0
    3bd8:	movt	r0, #65535	; 0xffff
    3bdc:	movt	r1, #0
    3be0:	bl	0 <coda_set_error>
    3be4:	b	3bc0 <coda_type_time_add_ascii_float_mapping+0x10c>
    3be8:	movw	r2, #0
    3bec:	movt	r2, #0
    3bf0:	b	3cd8 <coda_type_time_add_ascii_float_mapping+0x224>
    3bf4:	movw	r2, #0
    3bf8:	movt	r2, #0
    3bfc:	b	3cd8 <coda_type_time_add_ascii_float_mapping+0x224>
    3c00:	movw	r2, #0
    3c04:	movt	r2, #0
    3c08:	b	3cd8 <coda_type_time_add_ascii_float_mapping+0x224>
    3c0c:	ldr	r2, [r4]
    3c10:	movw	r1, #0
    3c14:	add	r6, sp, #8
    3c18:	movt	r1, #0
    3c1c:	mov	r0, r6
    3c20:	bl	0 <sprintf>
    3c24:	mov	r0, r6
    3c28:	bl	0 <strdup>
    3c2c:	mov	r6, #0
    3c30:	mov	r1, r0
    3c34:	mov	r0, #20
    3c38:	mov	r2, #0
    3c3c:	mov	r3, #0
    3c40:	str	r6, [sp]
    3c44:	str	r6, [sp, #4]
    3c48:	bl	0 <coda_expression_new>
    3c4c:	ldr	r7, [r4]
    3c50:	mov	r9, r0
    3c54:	mov	r0, #36	; 0x24
    3c58:	mov	r1, #0
    3c5c:	mov	r2, #0
    3c60:	mov	r3, #0
    3c64:	str	r6, [sp]
    3c68:	str	r6, [sp, #4]
    3c6c:	bl	0 <coda_expression_new>
    3c70:	mov	r2, r0
    3c74:	cmp	r7, #0
    3c78:	beq	3cec <coda_type_time_add_ascii_float_mapping+0x238>
    3c7c:	mov	r0, #75	; 0x4b
    3c80:	mov	r1, #0
    3c84:	mov	r3, r9
    3c88:	str	r6, [sp]
    3c8c:	str	r6, [sp, #4]
    3c90:	bl	0 <coda_expression_new>
    3c94:	mov	r8, r0
    3c98:	ldr	r0, [r4, #4]
    3c9c:	bl	0 <strdup>
    3ca0:	mov	r1, r0
    3ca4:	mov	r0, #22
    3ca8:	mov	r2, #0
    3cac:	mov	r3, #0
    3cb0:	str	r6, [sp]
    3cb4:	str	r6, [sp, #4]
    3cb8:	bl	0 <coda_expression_new>
    3cbc:	mov	r9, r0
    3cc0:	b	3d08 <coda_type_time_add_ascii_float_mapping+0x254>
    3cc4:	movw	r2, #0
    3cc8:	movt	r2, #0
    3ccc:	b	3cd8 <coda_type_time_add_ascii_float_mapping+0x224>
    3cd0:	movw	r2, #0
    3cd4:	movt	r2, #0
    3cd8:	movw	r0, #65136	; 0xfe70
    3cdc:	movw	r1, #0
    3ce0:	movt	r0, #65535	; 0xffff
    3ce4:	movt	r1, #0
    3ce8:	b	3bbc <coda_type_time_add_ascii_float_mapping+0x108>
    3cec:	mov	r0, #50	; 0x32
    3cf0:	mov	r1, #0
    3cf4:	mov	r3, #0
    3cf8:	str	r6, [sp]
    3cfc:	str	r6, [sp, #4]
    3d00:	bl	0 <coda_expression_new>
    3d04:	mov	r8, r0
    3d08:	mov	r6, #0
    3d0c:	mov	r0, #25
    3d10:	mov	r1, #0
    3d14:	mov	r2, r8
    3d18:	mov	r3, r9
    3d1c:	str	r6, [sp]
    3d20:	str	r6, [sp, #4]
    3d24:	bl	0 <coda_expression_new>
    3d28:	vldr	d0, [r4, #8]
    3d2c:	add	r7, sp, #8
    3d30:	mov	r8, r0
    3d34:	mov	r0, r7
    3d38:	bl	0 <coda_strfl>
    3d3c:	mov	r0, r7
    3d40:	bl	0 <strdup>
    3d44:	mov	r1, r0
    3d48:	mov	r0, #19
    3d4c:	mov	r2, #0
    3d50:	mov	r3, #0
    3d54:	str	r6, [sp]
    3d58:	str	r6, [sp, #4]
    3d5c:	bl	0 <coda_expression_new>
    3d60:	mov	r3, r0
    3d64:	ldr	r0, [r5, #52]	; 0x34
    3d68:	mov	r1, #0
    3d6c:	mov	r2, r8
    3d70:	stm	sp, {r0, r6}
    3d74:	mov	r0, #42	; 0x2a
    3d78:	bl	0 <coda_expression_new>
    3d7c:	str	r0, [r5, #52]	; 0x34
    3d80:	ldr	r0, [r4, #4]
    3d84:	cmp	r0, #0
    3d88:	beq	3d90 <coda_type_time_add_ascii_float_mapping+0x2dc>
    3d8c:	bl	0 <free>
    3d90:	mov	r0, r4
    3d94:	bl	0 <free>
    3d98:	b	3bc4 <coda_type_time_add_ascii_float_mapping+0x110>

00003d9c <coda_type_get_special_type_name>:
    3d9c:	cmp	r0, #3
    3da0:	movwhi	r0, #0
    3da4:	movthi	r0, #0
    3da8:	bxhi	lr
    3dac:	movw	r1, #0
    3db0:	movt	r1, #0
    3db4:	ldr	r0, [r1, r0, lsl #2]
    3db8:	bx	lr

00003dbc <coda_type_time_set_base_type>:
    3dbc:	push	{r4, r5, fp, lr}
    3dc0:	add	fp, sp, #8
    3dc4:	cmp	r0, #0
    3dc8:	beq	3e0c <coda_type_time_set_base_type+0x50>
    3dcc:	cmp	r1, #0
    3dd0:	beq	3e24 <coda_type_time_set_base_type+0x68>
    3dd4:	ldr	ip, [r0, #40]	; 0x28
    3dd8:	cmp	ip, #3
    3ddc:	bhi	3e48 <coda_type_time_set_base_type+0x8c>
    3de0:	movw	r2, #0
    3de4:	add	r3, pc, #4
    3de8:	movt	r2, #0
    3dec:	ldr	pc, [r3, ip, lsl #2]
    3df0:	.word	0x00003e84
    3df4:	.word	0x00003e00
    3df8:	.word	0x00003e54
    3dfc:	.word	0x00003e7c
    3e00:	movw	r2, #0
    3e04:	movt	r2, #0
    3e08:	b	3e84 <coda_type_time_set_base_type+0xc8>
    3e0c:	movw	r1, #0
    3e10:	movw	r2, #0
    3e14:	mvn	r0, #99	; 0x63
    3e18:	movw	r3, #2548	; 0x9f4
    3e1c:	movt	r1, #0
    3e20:	b	3e38 <coda_type_time_set_base_type+0x7c>
    3e24:	movw	r1, #0
    3e28:	movw	r2, #0
    3e2c:	mvn	r0, #99	; 0x63
    3e30:	movw	r3, #2553	; 0x9f9
    3e34:	movt	r1, #0
    3e38:	movt	r2, #0
    3e3c:	bl	0 <coda_set_error>
    3e40:	mvn	r0, #0
    3e44:	pop	{r4, r5, fp, pc}
    3e48:	movw	r2, #0
    3e4c:	movt	r2, #0
    3e50:	b	3e84 <coda_type_time_set_base_type+0xc8>
    3e54:	ldr	r2, [r0, #44]	; 0x2c
    3e58:	cmp	r2, #0
    3e5c:	beq	3ea0 <coda_type_time_set_base_type+0xe4>
    3e60:	movw	r0, #65136	; 0xfe70
    3e64:	movw	r1, #0
    3e68:	movt	r0, #65535	; 0xffff
    3e6c:	movt	r1, #0
    3e70:	bl	0 <coda_set_error>
    3e74:	mvn	r0, #0
    3e78:	pop	{r4, r5, fp, pc}
    3e7c:	movw	r2, #0
    3e80:	movt	r2, #0
    3e84:	movw	r0, #65136	; 0xfe70
    3e88:	movw	r1, #0
    3e8c:	movt	r0, #65535	; 0xffff
    3e90:	movt	r1, #0
    3e94:	bl	0 <coda_set_error>
    3e98:	mvn	r0, #0
    3e9c:	pop	{r4, r5, fp, pc}
    3ea0:	str	r1, [r0, #44]	; 0x2c
    3ea4:	ldr	r2, [r1, #4]
    3ea8:	ldrd	r4, [r1, #24]
    3eac:	add	r2, r2, #1
    3eb0:	str	r2, [r1, #4]
    3eb4:	strd	r4, [r0, #24]
    3eb8:	mov	r0, #0
    3ebc:	pop	{r4, r5, fp, pc}

00003ec0 <coda_type_time_validate>:
    3ec0:	ldr	r1, [r0, #44]	; 0x2c
    3ec4:	mov	r0, #0
    3ec8:	cmp	r1, #0
    3ecc:	bxne	lr
    3ed0:	push	{fp, lr}
    3ed4:	mov	fp, sp
    3ed8:	movw	r0, #65136	; 0xfe70
    3edc:	movw	r1, #0
    3ee0:	movt	r0, #65535	; 0xffff
    3ee4:	movt	r1, #0
    3ee8:	bl	0 <coda_set_error>
    3eec:	mvn	r0, #0
    3ef0:	pop	{fp, lr}
    3ef4:	bx	lr

00003ef8 <coda_type_complex_new>:
    3ef8:	push	{r4, sl, fp, lr}
    3efc:	add	fp, sp, #8
    3f00:	sub	sp, sp, #8
    3f04:	mov	r4, r0
    3f08:	mov	r0, #56	; 0x38
    3f0c:	bl	0 <malloc>
    3f10:	cmp	r0, #0
    3f14:	beq	3f64 <coda_type_complex_new+0x6c>
    3f18:	mvn	r1, #0
    3f1c:	mov	r2, #0
    3f20:	mov	r3, #6
    3f24:	str	r4, [r0]
    3f28:	stmib	r0, {r2, r3}
    3f2c:	str	r1, [r0, #12]
    3f30:	str	r2, [r0, #16]
    3f34:	str	r2, [r0, #20]
    3f38:	str	r1, [r0, #24]
    3f3c:	str	r1, [r0, #28]
    3f40:	mov	r1, #3
    3f44:	str	r2, [r0, #32]
    3f48:	str	r2, [r0, #36]	; 0x24
    3f4c:	str	r1, [r0, #40]	; 0x28
    3f50:	str	r2, [r0, #44]	; 0x2c
    3f54:	str	r2, [r0, #48]	; 0x30
    3f58:	str	r2, [r0, #52]	; 0x34
    3f5c:	sub	sp, fp, #8
    3f60:	pop	{r4, sl, fp, pc}
    3f64:	movw	r1, #0
    3f68:	movw	r3, #0
    3f6c:	movw	r0, #2595	; 0xa23
    3f70:	mov	r2, #56	; 0x38
    3f74:	str	r0, [sp]
    3f78:	movt	r1, #0
    3f7c:	movt	r3, #0
    3f80:	mvn	r0, #0
    3f84:	bl	0 <coda_set_error>
    3f88:	mov	r0, #0
    3f8c:	sub	sp, fp, #8
    3f90:	pop	{r4, sl, fp, pc}

00003f94 <coda_type_complex_set_type>:
    3f94:	push	{r4, r5, r6, sl, fp, lr}
    3f98:	add	fp, sp, #16
    3f9c:	mov	r4, r0
    3fa0:	ldr	r0, [r0, #44]	; 0x2c
    3fa4:	cmp	r0, #0
    3fa8:	beq	3fc8 <coda_type_complex_set_type+0x34>
    3fac:	movw	r0, #65136	; 0xfe70
    3fb0:	movw	r1, #0
    3fb4:	movt	r0, #65535	; 0xffff
    3fb8:	movt	r1, #0
    3fbc:	bl	0 <coda_set_error>
    3fc0:	mvn	r0, #0
    3fc4:	pop	{r4, r5, r6, sl, fp, pc}
    3fc8:	ldr	r0, [r1, #8]
    3fcc:	mov	r5, r1
    3fd0:	bic	r0, r0, #1
    3fd4:	cmp	r0, #2
    3fd8:	bne	4030 <coda_type_complex_set_type+0x9c>
    3fdc:	ldr	r1, [r5]
    3fe0:	ldr	r0, [r4]
    3fe4:	cmp	r0, r1
    3fe8:	bne	404c <coda_type_complex_set_type+0xb8>
    3fec:	bl	f78 <coda_type_record_new>
    3ff0:	str	r0, [r4, #44]	; 0x2c
    3ff4:	movw	r0, #0
    3ff8:	movt	r0, #0
    3ffc:	bl	1160 <coda_type_record_field_new>
    4000:	mov	r6, r0
    4004:	cmp	r0, #0
    4008:	beq	40b8 <coda_type_complex_set_type+0x124>
    400c:	ldr	r0, [r6, #8]
    4010:	cmp	r0, #0
    4014:	beq	40d8 <coda_type_complex_set_type+0x144>
    4018:	movw	r0, #65136	; 0xfe70
    401c:	movw	r1, #0
    4020:	movt	r0, #65535	; 0xffff
    4024:	movt	r1, #0
    4028:	bl	0 <coda_set_error>
    402c:	b	40e8 <coda_type_complex_set_type+0x154>
    4030:	ldr	r0, [r4, #8]
    4034:	cmp	r0, #6
    4038:	bhi	4094 <coda_type_complex_set_type+0x100>
    403c:	movw	r1, #0
    4040:	movt	r1, #0
    4044:	ldr	r2, [r1, r0, lsl #2]
    4048:	b	409c <coda_type_complex_set_type+0x108>
    404c:	movw	r3, #0
    4050:	cmp	r1, #9
    4054:	movt	r3, #0
    4058:	mov	r2, r3
    405c:	movwls	r2, #0
    4060:	movtls	r2, #0
    4064:	ldrls	r2, [r2, r1, lsl #2]
    4068:	cmp	r0, #9
    406c:	movwls	r1, #0
    4070:	movtls	r1, #0
    4074:	ldrls	r3, [r1, r0, lsl #2]
    4078:	movw	r0, #65136	; 0xfe70
    407c:	movw	r1, #0
    4080:	movt	r0, #65535	; 0xffff
    4084:	movt	r1, #0
    4088:	bl	0 <coda_set_error>
    408c:	mvn	r0, #0
    4090:	pop	{r4, r5, r6, sl, fp, pc}
    4094:	movw	r2, #0
    4098:	movt	r2, #0
    409c:	movw	r0, #65136	; 0xfe70
    40a0:	movw	r1, #0
    40a4:	movt	r0, #65535	; 0xffff
    40a8:	movt	r1, #0
    40ac:	bl	0 <coda_set_error>
    40b0:	mvn	r0, #0
    40b4:	pop	{r4, r5, r6, sl, fp, pc}
    40b8:	movw	r1, #0
    40bc:	movw	r2, #0
    40c0:	mvn	r0, #99	; 0x63
    40c4:	movw	r3, #1087	; 0x43f
    40c8:	movt	r1, #0
    40cc:	movt	r2, #0
    40d0:	bl	0 <coda_set_error>
    40d4:	b	40e8 <coda_type_complex_set_type+0x154>
    40d8:	str	r5, [r6, #8]
    40dc:	ldr	r0, [r5, #4]
    40e0:	add	r0, r0, #1
    40e4:	str	r0, [r5, #4]
    40e8:	ldr	r0, [r4, #44]	; 0x2c
    40ec:	cmp	r0, #0
    40f0:	beq	4104 <coda_type_complex_set_type+0x170>
    40f4:	ldr	r1, [r0, #48]	; 0x30
    40f8:	mov	r2, r6
    40fc:	bl	16e8 <coda_type_record_insert_field>
    4100:	b	4120 <coda_type_complex_set_type+0x18c>
    4104:	movw	r1, #0
    4108:	movw	r2, #0
    410c:	mvn	r0, #99	; 0x63
    4110:	mov	r3, #1424	; 0x590
    4114:	movt	r1, #0
    4118:	movt	r2, #0
    411c:	bl	0 <coda_set_error>
    4120:	movw	r0, #0
    4124:	movt	r0, #0
    4128:	bl	1160 <coda_type_record_field_new>
    412c:	mov	r6, r0
    4130:	cmp	r0, #0
    4134:	beq	415c <coda_type_complex_set_type+0x1c8>
    4138:	ldr	r0, [r6, #8]
    413c:	cmp	r0, #0
    4140:	beq	417c <coda_type_complex_set_type+0x1e8>
    4144:	movw	r0, #65136	; 0xfe70
    4148:	movw	r1, #0
    414c:	movt	r0, #65535	; 0xffff
    4150:	movt	r1, #0
    4154:	bl	0 <coda_set_error>
    4158:	b	418c <coda_type_complex_set_type+0x1f8>
    415c:	movw	r1, #0
    4160:	movw	r2, #0
    4164:	mvn	r0, #99	; 0x63
    4168:	movw	r3, #1087	; 0x43f
    416c:	movt	r1, #0
    4170:	movt	r2, #0
    4174:	bl	0 <coda_set_error>
    4178:	b	418c <coda_type_complex_set_type+0x1f8>
    417c:	str	r5, [r6, #8]
    4180:	ldr	r0, [r5, #4]
    4184:	add	r0, r0, #1
    4188:	str	r0, [r5, #4]
    418c:	ldr	r0, [r4, #44]	; 0x2c
    4190:	cmp	r0, #0
    4194:	beq	41a8 <coda_type_complex_set_type+0x214>
    4198:	ldr	r1, [r0, #48]	; 0x30
    419c:	mov	r2, r6
    41a0:	bl	16e8 <coda_type_record_insert_field>
    41a4:	b	41c4 <coda_type_complex_set_type+0x230>
    41a8:	movw	r1, #0
    41ac:	movw	r2, #0
    41b0:	mvn	r0, #99	; 0x63
    41b4:	mov	r3, #1424	; 0x590
    41b8:	movt	r1, #0
    41bc:	movt	r2, #0
    41c0:	bl	0 <coda_set_error>
    41c4:	ldr	r0, [r4, #44]	; 0x2c
    41c8:	ldrd	r0, [r0, #24]
    41cc:	strd	r0, [r4, #24]
    41d0:	mov	r0, #0
    41d4:	pop	{r4, r5, r6, sl, fp, pc}

000041d8 <coda_type_complex_validate>:
    41d8:	ldr	r1, [r0, #44]	; 0x2c
    41dc:	mov	r0, #0
    41e0:	cmp	r1, #0
    41e4:	bxne	lr
    41e8:	push	{fp, lr}
    41ec:	mov	fp, sp
    41f0:	movw	r0, #65136	; 0xfe70
    41f4:	movw	r1, #0
    41f8:	movt	r0, #65535	; 0xffff
    41fc:	movt	r1, #0
    4200:	bl	0 <coda_set_error>
    4204:	mvn	r0, #0
    4208:	pop	{fp, lr}
    420c:	bx	lr

00004210 <coda_type_done>:
    4210:	push	{r4, r5, fp, lr}
    4214:	add	fp, sp, #8
    4218:	ldr	r4, [pc, #572]	; 445c <coda_type_done+0x24c>
    421c:	bl	0 <__aeabi_read_tp>
    4220:	ldr	r0, [r0, r4]
    4224:	cmp	r0, #0
    4228:	blne	444 <coda_type_release>
    422c:	mov	r5, #0
    4230:	bl	0 <__aeabi_read_tp>
    4234:	str	r5, [r0, r4]!
    4238:	ldr	r0, [r0, #4]
    423c:	cmp	r0, #0
    4240:	blne	444 <coda_type_release>
    4244:	bl	0 <__aeabi_read_tp>
    4248:	add	r0, r0, r4
    424c:	str	r5, [r0, #4]
    4250:	ldr	r0, [r0, #8]
    4254:	cmp	r0, #0
    4258:	blne	444 <coda_type_release>
    425c:	bl	0 <__aeabi_read_tp>
    4260:	add	r0, r0, r4
    4264:	mov	r5, #0
    4268:	str	r5, [r0, #8]
    426c:	ldr	r0, [r0, #12]
    4270:	cmp	r0, #0
    4274:	blne	444 <coda_type_release>
    4278:	bl	0 <__aeabi_read_tp>
    427c:	add	r0, r0, r4
    4280:	str	r5, [r0, #12]
    4284:	ldr	r0, [r0, #16]
    4288:	cmp	r0, #0
    428c:	blne	444 <coda_type_release>
    4290:	bl	0 <__aeabi_read_tp>
    4294:	add	r0, r0, r4
    4298:	mov	r5, #0
    429c:	str	r5, [r0, #16]
    42a0:	ldr	r0, [r0, #20]
    42a4:	cmp	r0, #0
    42a8:	blne	444 <coda_type_release>
    42ac:	bl	0 <__aeabi_read_tp>
    42b0:	add	r0, r0, r4
    42b4:	str	r5, [r0, #20]
    42b8:	ldr	r0, [r0, #24]
    42bc:	cmp	r0, #0
    42c0:	blne	444 <coda_type_release>
    42c4:	bl	0 <__aeabi_read_tp>
    42c8:	add	r0, r0, r4
    42cc:	mov	r5, #0
    42d0:	str	r5, [r0, #24]
    42d4:	ldr	r0, [r0, #28]
    42d8:	cmp	r0, #0
    42dc:	blne	444 <coda_type_release>
    42e0:	bl	0 <__aeabi_read_tp>
    42e4:	add	r0, r0, r4
    42e8:	str	r5, [r0, #28]
    42ec:	ldr	r0, [r0, #32]
    42f0:	cmp	r0, #0
    42f4:	blne	444 <coda_type_release>
    42f8:	bl	0 <__aeabi_read_tp>
    42fc:	add	r0, r0, r4
    4300:	mov	r5, #0
    4304:	str	r5, [r0, #32]
    4308:	ldr	r0, [r0, #36]	; 0x24
    430c:	cmp	r0, #0
    4310:	blne	444 <coda_type_release>
    4314:	bl	0 <__aeabi_read_tp>
    4318:	add	r0, r0, r4
    431c:	str	r5, [r0, #36]	; 0x24
    4320:	ldr	r0, [r0, #40]	; 0x28
    4324:	cmp	r0, #0
    4328:	blne	444 <coda_type_release>
    432c:	bl	0 <__aeabi_read_tp>
    4330:	add	r1, r0, r4
    4334:	ldr	r4, [pc, #292]	; 4460 <coda_type_done+0x250>
    4338:	mov	r5, #0
    433c:	str	r5, [r1, #40]	; 0x28
    4340:	ldr	r0, [r0, r4]
    4344:	cmp	r0, #0
    4348:	blne	444 <coda_type_release>
    434c:	bl	0 <__aeabi_read_tp>
    4350:	str	r5, [r0, r4]!
    4354:	ldr	r0, [r0, #4]
    4358:	cmp	r0, #0
    435c:	blne	444 <coda_type_release>
    4360:	bl	0 <__aeabi_read_tp>
    4364:	add	r0, r0, r4
    4368:	mov	r5, #0
    436c:	str	r5, [r0, #4]
    4370:	ldr	r0, [r0, #8]
    4374:	cmp	r0, #0
    4378:	blne	444 <coda_type_release>
    437c:	bl	0 <__aeabi_read_tp>
    4380:	add	r0, r0, r4
    4384:	str	r5, [r0, #8]
    4388:	ldr	r0, [r0, #12]
    438c:	cmp	r0, #0
    4390:	blne	444 <coda_type_release>
    4394:	bl	0 <__aeabi_read_tp>
    4398:	add	r0, r0, r4
    439c:	mov	r5, #0
    43a0:	str	r5, [r0, #12]
    43a4:	ldr	r0, [r0, #16]
    43a8:	cmp	r0, #0
    43ac:	blne	444 <coda_type_release>
    43b0:	bl	0 <__aeabi_read_tp>
    43b4:	add	r0, r0, r4
    43b8:	str	r5, [r0, #16]
    43bc:	ldr	r0, [r0, #20]
    43c0:	cmp	r0, #0
    43c4:	blne	444 <coda_type_release>
    43c8:	bl	0 <__aeabi_read_tp>
    43cc:	add	r0, r0, r4
    43d0:	mov	r5, #0
    43d4:	str	r5, [r0, #20]
    43d8:	ldr	r0, [r0, #24]
    43dc:	cmp	r0, #0
    43e0:	blne	444 <coda_type_release>
    43e4:	bl	0 <__aeabi_read_tp>
    43e8:	add	r0, r0, r4
    43ec:	str	r5, [r0, #24]
    43f0:	ldr	r0, [r0, #28]
    43f4:	cmp	r0, #0
    43f8:	blne	444 <coda_type_release>
    43fc:	bl	0 <__aeabi_read_tp>
    4400:	add	r0, r0, r4
    4404:	mov	r5, #0
    4408:	str	r5, [r0, #28]
    440c:	ldr	r0, [r0, #32]
    4410:	cmp	r0, #0
    4414:	blne	444 <coda_type_release>
    4418:	bl	0 <__aeabi_read_tp>
    441c:	add	r0, r0, r4
    4420:	str	r5, [r0, #32]
    4424:	ldr	r0, [r0, #36]	; 0x24
    4428:	cmp	r0, #0
    442c:	blne	444 <coda_type_release>
    4430:	bl	0 <__aeabi_read_tp>
    4434:	add	r0, r0, r4
    4438:	mov	r5, #0
    443c:	str	r5, [r0, #36]	; 0x24
    4440:	ldr	r0, [r0, #40]	; 0x28
    4444:	cmp	r0, #0
    4448:	blne	444 <coda_type_release>
    444c:	bl	0 <__aeabi_read_tp>
    4450:	add	r0, r0, r4
    4454:	str	r5, [r0, #40]	; 0x28
    4458:	pop	{r4, r5, fp, pc}
	...

00004464 <coda_type_has_attributes>:
    4464:	push	{fp, lr}
    4468:	mov	fp, sp
    446c:	cmp	r0, #0
    4470:	beq	4494 <coda_type_has_attributes+0x30>
    4474:	cmp	r1, #0
    4478:	beq	44ac <coda_type_has_attributes+0x48>
    447c:	ldr	r0, [r0, #36]	; 0x24
    4480:	cmp	r0, #0
    4484:	movwne	r0, #1
    4488:	str	r0, [r1]
    448c:	mov	r0, #0
    4490:	pop	{fp, pc}
    4494:	movw	r1, #0
    4498:	movw	r2, #0
    449c:	mvn	r0, #99	; 0x63
    44a0:	movw	r3, #2829	; 0xb0d
    44a4:	movt	r1, #0
    44a8:	b	44c0 <coda_type_has_attributes+0x5c>
    44ac:	movw	r1, #0
    44b0:	movw	r2, #0
    44b4:	mvn	r0, #99	; 0x63
    44b8:	movw	r3, #2834	; 0xb12
    44bc:	movt	r1, #0
    44c0:	movt	r2, #0
    44c4:	bl	0 <coda_set_error>
    44c8:	mvn	r0, #0
    44cc:	pop	{fp, pc}

000044d0 <coda_type_get_format>:
    44d0:	push	{fp, lr}
    44d4:	mov	fp, sp
    44d8:	cmp	r0, #0
    44dc:	beq	450c <coda_type_get_format+0x3c>
    44e0:	cmp	r1, #0
    44e4:	ldrne	r0, [r0]
    44e8:	strne	r0, [r1]
    44ec:	movne	r0, #0
    44f0:	popne	{fp, pc}
    44f4:	movw	r1, #0
    44f8:	movw	r2, #0
    44fc:	mvn	r0, #99	; 0x63
    4500:	movw	r3, #2858	; 0xb2a
    4504:	movt	r1, #0
    4508:	b	4520 <coda_type_get_format+0x50>
    450c:	movw	r1, #0
    4510:	movw	r2, #0
    4514:	mvn	r0, #99	; 0x63
    4518:	movw	r3, #2853	; 0xb25
    451c:	movt	r1, #0
    4520:	movt	r2, #0
    4524:	bl	0 <coda_set_error>
    4528:	mvn	r0, #0
    452c:	pop	{fp, pc}

00004530 <coda_type_get_class>:
    4530:	push	{fp, lr}
    4534:	mov	fp, sp
    4538:	cmp	r0, #0
    453c:	beq	456c <coda_type_get_class+0x3c>
    4540:	cmp	r1, #0
    4544:	ldrne	r0, [r0, #8]
    4548:	strne	r0, [r1]
    454c:	movne	r0, #0
    4550:	popne	{fp, pc}
    4554:	movw	r1, #0
    4558:	movw	r2, #0
    455c:	mvn	r0, #99	; 0x63
    4560:	movw	r3, #2882	; 0xb42
    4564:	movt	r1, #0
    4568:	b	4580 <coda_type_get_class+0x50>
    456c:	movw	r1, #0
    4570:	movw	r2, #0
    4574:	mvn	r0, #99	; 0x63
    4578:	movw	r3, #2877	; 0xb3d
    457c:	movt	r1, #0
    4580:	movt	r2, #0
    4584:	bl	0 <coda_set_error>
    4588:	mvn	r0, #0
    458c:	pop	{fp, pc}

00004590 <coda_type_get_string_length>:
    4590:	push	{fp, lr}
    4594:	mov	fp, sp
    4598:	cmp	r0, #0
    459c:	beq	45e4 <coda_type_get_string_length+0x54>
    45a0:	ldr	ip, [r0, #8]
    45a4:	cmp	ip, #6
    45a8:	bhi	4608 <coda_type_get_string_length+0x78>
    45ac:	movw	r2, #0
    45b0:	add	r3, pc, #4
    45b4:	movt	r2, #0
    45b8:	ldr	pc, [r3, ip, lsl #2]
    45bc:	.word	0x0000466c
    45c0:	.word	0x000045d8
    45c4:	.word	0x00004614
    45c8:	.word	0x00004620
    45cc:	.word	0x0000462c
    45d0:	.word	0x00004658
    45d4:	.word	0x00004664
    45d8:	movw	r2, #0
    45dc:	movt	r2, #0
    45e0:	b	466c <coda_type_get_string_length+0xdc>
    45e4:	movw	r1, #0
    45e8:	movw	r2, #0
    45ec:	mvn	r0, #99	; 0x63
    45f0:	movw	r3, #2942	; 0xb7e
    45f4:	movt	r1, #0
    45f8:	movt	r2, #0
    45fc:	bl	0 <coda_set_error>
    4600:	mvn	r0, #0
    4604:	pop	{fp, pc}
    4608:	movw	r2, #0
    460c:	movt	r2, #0
    4610:	b	466c <coda_type_get_string_length+0xdc>
    4614:	movw	r2, #0
    4618:	movt	r2, #0
    461c:	b	466c <coda_type_get_string_length+0xdc>
    4620:	movw	r2, #0
    4624:	movt	r2, #0
    4628:	b	466c <coda_type_get_string_length+0xdc>
    462c:	cmp	r1, #0
    4630:	beq	4684 <coda_type_get_string_length+0xf4>
    4634:	ldr	r3, [r0, #28]
    4638:	ldr	r0, [r0, #24]
    463c:	lsr	r0, r0, #3
    4640:	cmp	r3, #0
    4644:	orr	r0, r0, r3, lsl #29
    4648:	mvnlt	r0, #0
    464c:	str	r0, [r1]
    4650:	mov	r0, #0
    4654:	pop	{fp, pc}
    4658:	movw	r2, #0
    465c:	movt	r2, #0
    4660:	b	466c <coda_type_get_string_length+0xdc>
    4664:	movw	r2, #0
    4668:	movt	r2, #0
    466c:	movw	r1, #0
    4670:	mvn	r0, #104	; 0x68
    4674:	movt	r1, #0
    4678:	bl	0 <coda_set_error>
    467c:	mvn	r0, #0
    4680:	pop	{fp, pc}
    4684:	movw	r1, #0
    4688:	movw	r2, #0
    468c:	mvn	r0, #99	; 0x63
    4690:	movw	r3, #2953	; 0xb89
    4694:	movt	r1, #0
    4698:	b	45f8 <coda_type_get_string_length+0x68>

0000469c <coda_type_get_bit_size>:
    469c:	push	{r5, sl, fp, lr}
    46a0:	add	fp, sp, #8
    46a4:	cmp	r0, #0
    46a8:	beq	46d0 <coda_type_get_bit_size+0x34>
    46ac:	cmp	r1, #0
    46b0:	beq	46e8 <coda_type_get_bit_size+0x4c>
    46b4:	ldrd	r2, [r0, #24]
    46b8:	mov	r0, #0
    46bc:	cmn	r3, #1
    46c0:	orr	r5, r3, r3, asr #31
    46c4:	mvnle	r2, #0
    46c8:	stm	r1, {r2, r5}
    46cc:	pop	{r5, sl, fp, pc}
    46d0:	movw	r1, #0
    46d4:	movw	r2, #0
    46d8:	mvn	r0, #99	; 0x63
    46dc:	movw	r3, #2980	; 0xba4
    46e0:	movt	r1, #0
    46e4:	b	46fc <coda_type_get_bit_size+0x60>
    46e8:	movw	r1, #0
    46ec:	movw	r2, #0
    46f0:	mvn	r0, #99	; 0x63
    46f4:	movw	r3, #2985	; 0xba9
    46f8:	movt	r1, #0
    46fc:	movt	r2, #0
    4700:	bl	0 <coda_set_error>
    4704:	mvn	r0, #0
    4708:	pop	{r5, sl, fp, pc}

0000470c <coda_type_get_name>:
    470c:	push	{fp, lr}
    4710:	mov	fp, sp
    4714:	cmp	r0, #0
    4718:	beq	4748 <coda_type_get_name+0x3c>
    471c:	cmp	r1, #0
    4720:	ldrne	r0, [r0, #16]
    4724:	strne	r0, [r1]
    4728:	movne	r0, #0
    472c:	popne	{fp, pc}
    4730:	movw	r1, #0
    4734:	movw	r2, #0
    4738:	mvn	r0, #99	; 0x63
    473c:	movw	r3, #3017	; 0xbc9
    4740:	movt	r1, #0
    4744:	b	475c <coda_type_get_name+0x50>
    4748:	movw	r1, #0
    474c:	movw	r2, #0
    4750:	mvn	r0, #99	; 0x63
    4754:	movw	r3, #3012	; 0xbc4
    4758:	movt	r1, #0
    475c:	movt	r2, #0
    4760:	bl	0 <coda_set_error>
    4764:	mvn	r0, #0
    4768:	pop	{fp, pc}

0000476c <coda_type_get_description>:
    476c:	push	{fp, lr}
    4770:	mov	fp, sp
    4774:	cmp	r0, #0
    4778:	beq	47a8 <coda_type_get_description+0x3c>
    477c:	cmp	r1, #0
    4780:	ldrne	r0, [r0, #20]
    4784:	strne	r0, [r1]
    4788:	movne	r0, #0
    478c:	popne	{fp, pc}
    4790:	movw	r1, #0
    4794:	movw	r2, #0
    4798:	mvn	r0, #99	; 0x63
    479c:	movw	r3, #3043	; 0xbe3
    47a0:	movt	r1, #0
    47a4:	b	47bc <coda_type_get_description+0x50>
    47a8:	movw	r1, #0
    47ac:	movw	r2, #0
    47b0:	mvn	r0, #99	; 0x63
    47b4:	movw	r3, #3038	; 0xbde
    47b8:	movt	r1, #0
    47bc:	movt	r2, #0
    47c0:	bl	0 <coda_set_error>
    47c4:	mvn	r0, #0
    47c8:	pop	{fp, pc}

000047cc <coda_type_get_unit>:
    47cc:	push	{fp, lr}
    47d0:	mov	fp, sp
    47d4:	cmp	r0, #0
    47d8:	beq	4800 <coda_type_get_unit+0x34>
    47dc:	cmp	r1, #0
    47e0:	beq	4818 <coda_type_get_unit+0x4c>
    47e4:	mov	r2, r0
    47e8:	ldr	r0, [r2, #8]
    47ec:	cmp	r0, #1
    47f0:	bne	483c <coda_type_get_unit+0x70>
    47f4:	ldr	r2, [r2, #40]	; 0x28
    47f8:	cmp	r2, #0
    47fc:	bne	47e8 <coda_type_get_unit+0x1c>
    4800:	movw	r1, #0
    4804:	movw	r2, #0
    4808:	mvn	r0, #99	; 0x63
    480c:	movw	r3, #3068	; 0xbfc
    4810:	movt	r1, #0
    4814:	b	482c <coda_type_get_unit+0x60>
    4818:	movw	r1, #0
    481c:	movw	r2, #0
    4820:	mvn	r0, #99	; 0x63
    4824:	movw	r3, #3074	; 0xc02
    4828:	movt	r1, #0
    482c:	movt	r2, #0
    4830:	bl	0 <coda_set_error>
    4834:	mvn	r0, #0
    4838:	pop	{fp, pc}
    483c:	sub	r3, r0, #2
    4840:	cmp	r3, #2
    4844:	bcs	4870 <coda_type_get_unit+0xa4>
    4848:	ldr	r0, [pc, #72]	; 4898 <coda_type_get_unit+0xcc>
    484c:	ldr	r3, [pc, r0]
    4850:	bl	0 <__aeabi_read_tp>
    4854:	ldr	r0, [r0, r3]
    4858:	cmp	r0, #0
    485c:	ldrne	r0, [r2, #48]	; 0x30
    4860:	cmpne	r0, #0
    4864:	bne	4888 <coda_type_get_unit+0xbc>
    4868:	ldr	r0, [r2, #40]	; 0x28
    486c:	b	488c <coda_type_get_unit+0xc0>
    4870:	cmp	r0, #6
    4874:	movne	r0, #0
    4878:	strne	r0, [r1]
    487c:	popne	{fp, pc}
    4880:	ldr	r0, [r2, #48]	; 0x30
    4884:	b	488c <coda_type_get_unit+0xc0>
    4888:	ldr	r0, [r0, #32]
    488c:	str	r0, [r1]
    4890:	mov	r0, #0
    4894:	pop	{fp, pc}
    4898:	.word	0x00000044

0000489c <coda_type_get_array_base_type>:
    489c:	push	{fp, lr}
    48a0:	mov	fp, sp
    48a4:	cmp	r0, #0
    48a8:	beq	4910 <coda_type_get_array_base_type+0x74>
    48ac:	ldr	ip, [r0, #8]
    48b0:	cmp	ip, #6
    48b4:	bhi	4934 <coda_type_get_array_base_type+0x98>
    48b8:	movw	r2, #0
    48bc:	add	r3, pc, #4
    48c0:	movt	r2, #0
    48c4:	ldr	pc, [r3, ip, lsl #2]
    48c8:	.word	0x00004978
    48cc:	.word	0x000048e4
    48d0:	.word	0x00004940
    48d4:	.word	0x0000494c
    48d8:	.word	0x00004958
    48dc:	.word	0x00004964
    48e0:	.word	0x00004970
    48e4:	cmp	r1, #0
    48e8:	ldrne	r0, [r0, #40]	; 0x28
    48ec:	strne	r0, [r1]
    48f0:	movne	r0, #0
    48f4:	popne	{fp, pc}
    48f8:	movw	r1, #0
    48fc:	movw	r2, #0
    4900:	mvn	r0, #99	; 0x63
    4904:	movw	r3, #3731	; 0xe93
    4908:	movt	r1, #0
    490c:	b	4924 <coda_type_get_array_base_type+0x88>
    4910:	movw	r1, #0
    4914:	movw	r2, #0
    4918:	mvn	r0, #99	; 0x63
    491c:	movw	r3, #3720	; 0xe88
    4920:	movt	r1, #0
    4924:	movt	r2, #0
    4928:	bl	0 <coda_set_error>
    492c:	mvn	r0, #0
    4930:	pop	{fp, pc}
    4934:	movw	r2, #0
    4938:	movt	r2, #0
    493c:	b	4978 <coda_type_get_array_base_type+0xdc>
    4940:	movw	r2, #0
    4944:	movt	r2, #0
    4948:	b	4978 <coda_type_get_array_base_type+0xdc>
    494c:	movw	r2, #0
    4950:	movt	r2, #0
    4954:	b	4978 <coda_type_get_array_base_type+0xdc>
    4958:	movw	r2, #0
    495c:	movt	r2, #0
    4960:	b	4978 <coda_type_get_array_base_type+0xdc>
    4964:	movw	r2, #0
    4968:	movt	r2, #0
    496c:	b	4978 <coda_type_get_array_base_type+0xdc>
    4970:	movw	r2, #0
    4974:	movt	r2, #0
    4978:	movw	r1, #0
    497c:	mvn	r0, #104	; 0x68
    4980:	movt	r1, #0
    4984:	bl	0 <coda_set_error>
    4988:	mvn	r0, #0
    498c:	pop	{fp, pc}

00004990 <coda_type_get_fixed_value>:
    4990:	push	{r4, r5, fp, lr}
    4994:	add	fp, sp, #8
    4998:	cmp	r0, #0
    499c:	beq	49ec <coda_type_get_fixed_value+0x5c>
    49a0:	cmp	r1, #0
    49a4:	beq	4a04 <coda_type_get_fixed_value+0x74>
    49a8:	mov	r4, r2
    49ac:	ldr	r2, [r0, #8]
    49b0:	cmp	r2, #5
    49b4:	beq	4a2c <coda_type_get_fixed_value+0x9c>
    49b8:	cmp	r2, #4
    49bc:	bne	4a58 <coda_type_get_fixed_value+0xc8>
    49c0:	ldr	r0, [r0, #40]	; 0x28
    49c4:	mov	r5, #0
    49c8:	cmp	r4, #0
    49cc:	str	r0, [r1]
    49d0:	beq	4a60 <coda_type_get_fixed_value+0xd0>
    49d4:	cmp	r0, #0
    49d8:	mov	r1, #0
    49dc:	beq	4a4c <coda_type_get_fixed_value+0xbc>
    49e0:	bl	0 <strlen>
    49e4:	mov	r1, r0
    49e8:	b	4a4c <coda_type_get_fixed_value+0xbc>
    49ec:	movw	r1, #0
    49f0:	movw	r2, #0
    49f4:	mvn	r0, #99	; 0x63
    49f8:	movw	r3, #3133	; 0xc3d
    49fc:	movt	r1, #0
    4a00:	b	4a18 <coda_type_get_fixed_value+0x88>
    4a04:	movw	r1, #0
    4a08:	movw	r2, #0
    4a0c:	mvn	r0, #99	; 0x63
    4a10:	movw	r3, #3138	; 0xc42
    4a14:	movt	r1, #0
    4a18:	movt	r2, #0
    4a1c:	bl	0 <coda_set_error>
    4a20:	mvn	r5, #0
    4a24:	mov	r0, r5
    4a28:	pop	{r4, r5, fp, pc}
    4a2c:	ldr	r2, [r0, #44]	; 0x2c
    4a30:	mov	r5, #0
    4a34:	cmp	r4, #0
    4a38:	str	r2, [r1]
    4a3c:	beq	4a60 <coda_type_get_fixed_value+0xd0>
    4a40:	cmp	r2, #0
    4a44:	mov	r1, #0
    4a48:	ldrne	r1, [r0, #40]	; 0x28
    4a4c:	mov	r0, r5
    4a50:	str	r1, [r4]
    4a54:	pop	{r4, r5, fp, pc}
    4a58:	mov	r5, #0
    4a5c:	str	r5, [r1]
    4a60:	mov	r0, r5
    4a64:	pop	{r4, r5, fp, pc}

00004a68 <coda_type_get_attributes>:
    4a68:	push	{r4, r5, r6, sl, fp, lr}
    4a6c:	add	fp, sp, #16
    4a70:	cmp	r0, #0
    4a74:	beq	4ae4 <coda_type_get_attributes+0x7c>
    4a78:	mov	r4, r1
    4a7c:	cmp	r1, #0
    4a80:	beq	4afc <coda_type_get_attributes+0x94>
    4a84:	ldr	r1, [r0, #36]	; 0x24
    4a88:	cmp	r1, #0
    4a8c:	movne	r0, #0
    4a90:	strne	r1, [r4]
    4a94:	popne	{r4, r5, r6, sl, fp, pc}
    4a98:	ldr	r5, [r0]
    4a9c:	cmp	r5, #11
    4aa0:	bcs	4b20 <coda_type_get_attributes+0xb8>
    4aa4:	ldr	r1, [pc, #180]	; 4b60 <coda_type_get_attributes+0xf8>
    4aa8:	bl	0 <__aeabi_read_tp>
    4aac:	add	r0, r0, r1
    4ab0:	ldr	r0, [r0, r5, lsl #2]
    4ab4:	cmp	r0, #0
    4ab8:	bne	4ad8 <coda_type_get_attributes+0x70>
    4abc:	bl	0 <__aeabi_read_tp>
    4ac0:	add	r6, r0, r1
    4ac4:	mov	r0, r5
    4ac8:	bl	f78 <coda_type_record_new>
    4acc:	cmp	r0, #0
    4ad0:	str	r0, [r6, r5, lsl #2]
    4ad4:	beq	4b40 <coda_type_get_attributes+0xd8>
    4ad8:	str	r0, [r4]
    4adc:	mov	r0, #0
    4ae0:	pop	{r4, r5, r6, sl, fp, pc}
    4ae4:	movw	r1, #0
    4ae8:	movw	r2, #0
    4aec:	mvn	r0, #99	; 0x63
    4af0:	movw	r3, #3178	; 0xc6a
    4af4:	movt	r1, #0
    4af8:	b	4b10 <coda_type_get_attributes+0xa8>
    4afc:	movw	r1, #0
    4b00:	movw	r2, #0
    4b04:	mvn	r0, #99	; 0x63
    4b08:	movw	r3, #3183	; 0xc6f
    4b0c:	movt	r1, #0
    4b10:	movt	r2, #0
    4b14:	bl	0 <coda_set_error>
    4b18:	mvn	r0, #0
    4b1c:	pop	{r4, r5, r6, sl, fp, pc}
    4b20:	movw	r0, #0
    4b24:	movw	r1, #0
    4b28:	movw	r3, #0
    4b2c:	movw	r2, #1268	; 0x4f4
    4b30:	movt	r0, #0
    4b34:	movt	r1, #0
    4b38:	movt	r3, #0
    4b3c:	bl	0 <__assert_fail>
    4b40:	movw	r0, #0
    4b44:	movw	r1, #0
    4b48:	movw	r3, #0
    4b4c:	movw	r2, #1272	; 0x4f8
    4b50:	movt	r0, #0
    4b54:	movt	r1, #0
    4b58:	movt	r3, #0
    4b5c:	bl	0 <__assert_fail>
    4b60:	.word	0x00000000

00004b64 <coda_type_get_num_record_fields>:
    4b64:	push	{fp, lr}
    4b68:	mov	fp, sp
    4b6c:	cmp	r0, #0
    4b70:	beq	4bd8 <coda_type_get_num_record_fields+0x74>
    4b74:	ldr	ip, [r0, #8]
    4b78:	cmp	ip, #6
    4b7c:	bhi	4bfc <coda_type_get_num_record_fields+0x98>
    4b80:	movw	r2, #0
    4b84:	add	r3, pc, #4
    4b88:	movt	r2, #0
    4b8c:	ldr	pc, [r3, ip, lsl #2]
    4b90:	.word	0x00004bac
    4b94:	.word	0x00004c40
    4b98:	.word	0x00004c08
    4b9c:	.word	0x00004c14
    4ba0:	.word	0x00004c20
    4ba4:	.word	0x00004c2c
    4ba8:	.word	0x00004c38
    4bac:	cmp	r1, #0
    4bb0:	ldrne	r0, [r0, #48]	; 0x30
    4bb4:	strne	r0, [r1]
    4bb8:	movne	r0, #0
    4bbc:	popne	{fp, pc}
    4bc0:	movw	r1, #0
    4bc4:	movw	r2, #0
    4bc8:	mvn	r0, #99	; 0x63
    4bcc:	movw	r3, #3220	; 0xc94
    4bd0:	movt	r1, #0
    4bd4:	b	4bec <coda_type_get_num_record_fields+0x88>
    4bd8:	movw	r1, #0
    4bdc:	movw	r2, #0
    4be0:	mvn	r0, #99	; 0x63
    4be4:	movw	r3, #3209	; 0xc89
    4be8:	movt	r1, #0
    4bec:	movt	r2, #0
    4bf0:	bl	0 <coda_set_error>
    4bf4:	mvn	r0, #0
    4bf8:	pop	{fp, pc}
    4bfc:	movw	r2, #0
    4c00:	movt	r2, #0
    4c04:	b	4c40 <coda_type_get_num_record_fields+0xdc>
    4c08:	movw	r2, #0
    4c0c:	movt	r2, #0
    4c10:	b	4c40 <coda_type_get_num_record_fields+0xdc>
    4c14:	movw	r2, #0
    4c18:	movt	r2, #0
    4c1c:	b	4c40 <coda_type_get_num_record_fields+0xdc>
    4c20:	movw	r2, #0
    4c24:	movt	r2, #0
    4c28:	b	4c40 <coda_type_get_num_record_fields+0xdc>
    4c2c:	movw	r2, #0
    4c30:	movt	r2, #0
    4c34:	b	4c40 <coda_type_get_num_record_fields+0xdc>
    4c38:	movw	r2, #0
    4c3c:	movt	r2, #0
    4c40:	movw	r1, #0
    4c44:	mvn	r0, #104	; 0x68
    4c48:	movt	r1, #0
    4c4c:	bl	0 <coda_set_error>
    4c50:	mvn	r0, #0
    4c54:	pop	{fp, pc}

00004c58 <coda_type_get_record_field_index_from_name>:
    4c58:	push	{r4, r5, fp, lr}
    4c5c:	add	fp, sp, #8
    4c60:	cmp	r0, #0
    4c64:	beq	4ce8 <coda_type_get_record_field_index_from_name+0x90>
    4c68:	mov	r4, r1
    4c6c:	ldr	r1, [r0, #8]
    4c70:	cmp	r1, #6
    4c74:	bhi	4d0c <coda_type_get_record_field_index_from_name+0xb4>
    4c78:	mov	r5, r2
    4c7c:	movw	r2, #0
    4c80:	add	r3, pc, #4
    4c84:	movt	r2, #0
    4c88:	ldr	pc, [r3, r1, lsl #2]
    4c8c:	.word	0x00004ca8
    4c90:	.word	0x00004d50
    4c94:	.word	0x00004d18
    4c98:	.word	0x00004d24
    4c9c:	.word	0x00004d30
    4ca0:	.word	0x00004d3c
    4ca4:	.word	0x00004d48
    4ca8:	cmp	r4, #0
    4cac:	beq	4d68 <coda_type_get_record_field_index_from_name+0x110>
    4cb0:	cmp	r5, #0
    4cb4:	beq	4d80 <coda_type_get_record_field_index_from_name+0x128>
    4cb8:	ldr	r0, [r0, #40]	; 0x28
    4cbc:	mov	r1, r4
    4cc0:	bl	0 <coda_hashtable_get_index_from_name>
    4cc4:	cmn	r0, #1
    4cc8:	strgt	r0, [r5]
    4ccc:	movgt	r0, #0
    4cd0:	popgt	{r4, r5, fp, pc}
    4cd4:	movw	r1, #0
    4cd8:	mvn	r0, #101	; 0x65
    4cdc:	mov	r2, r4
    4ce0:	movt	r1, #0
    4ce4:	b	4d5c <coda_type_get_record_field_index_from_name+0x104>
    4ce8:	movw	r1, #0
    4cec:	movw	r2, #0
    4cf0:	mvn	r0, #99	; 0x63
    4cf4:	movw	r3, #3244	; 0xcac
    4cf8:	movt	r1, #0
    4cfc:	movt	r2, #0
    4d00:	bl	0 <coda_set_error>
    4d04:	mvn	r0, #0
    4d08:	pop	{r4, r5, fp, pc}
    4d0c:	movw	r2, #0
    4d10:	movt	r2, #0
    4d14:	b	4d50 <coda_type_get_record_field_index_from_name+0xf8>
    4d18:	movw	r2, #0
    4d1c:	movt	r2, #0
    4d20:	b	4d50 <coda_type_get_record_field_index_from_name+0xf8>
    4d24:	movw	r2, #0
    4d28:	movt	r2, #0
    4d2c:	b	4d50 <coda_type_get_record_field_index_from_name+0xf8>
    4d30:	movw	r2, #0
    4d34:	movt	r2, #0
    4d38:	b	4d50 <coda_type_get_record_field_index_from_name+0xf8>
    4d3c:	movw	r2, #0
    4d40:	movt	r2, #0
    4d44:	b	4d50 <coda_type_get_record_field_index_from_name+0xf8>
    4d48:	movw	r2, #0
    4d4c:	movt	r2, #0
    4d50:	movw	r1, #0
    4d54:	mvn	r0, #104	; 0x68
    4d58:	movt	r1, #0
    4d5c:	bl	0 <coda_set_error>
    4d60:	mvn	r0, #0
    4d64:	pop	{r4, r5, fp, pc}
    4d68:	movw	r1, #0
    4d6c:	movw	r2, #0
    4d70:	mvn	r0, #99	; 0x63
    4d74:	movw	r3, #3255	; 0xcb7
    4d78:	movt	r1, #0
    4d7c:	b	4cfc <coda_type_get_record_field_index_from_name+0xa4>
    4d80:	movw	r1, #0
    4d84:	movw	r2, #0
    4d88:	mvn	r0, #99	; 0x63
    4d8c:	movw	r3, #3260	; 0xcbc
    4d90:	movt	r1, #0
    4d94:	b	4cfc <coda_type_get_record_field_index_from_name+0xa4>

00004d98 <coda_type_get_record_field_index_from_name_n>:
    4d98:	push	{r4, r5, r6, sl, fp, lr}
    4d9c:	add	fp, sp, #16
    4da0:	cmp	r0, #0
    4da4:	beq	4e34 <coda_type_get_record_field_index_from_name_n+0x9c>
    4da8:	mov	r4, r1
    4dac:	ldr	r1, [r0, #8]
    4db0:	cmp	r1, #6
    4db4:	bhi	4e58 <coda_type_get_record_field_index_from_name_n+0xc0>
    4db8:	mov	r6, r3
    4dbc:	mov	r5, r2
    4dc0:	movw	r2, #0
    4dc4:	add	r3, pc, #4
    4dc8:	movt	r2, #0
    4dcc:	ldr	pc, [r3, r1, lsl #2]
    4dd0:	.word	0x00004dec
    4dd4:	.word	0x00004e9c
    4dd8:	.word	0x00004e64
    4ddc:	.word	0x00004e70
    4de0:	.word	0x00004e7c
    4de4:	.word	0x00004e88
    4de8:	.word	0x00004e94
    4dec:	cmp	r4, #0
    4df0:	beq	4eb4 <coda_type_get_record_field_index_from_name_n+0x11c>
    4df4:	cmp	r6, #0
    4df8:	beq	4ecc <coda_type_get_record_field_index_from_name_n+0x134>
    4dfc:	ldr	r0, [r0, #40]	; 0x28
    4e00:	mov	r1, r4
    4e04:	mov	r2, r5
    4e08:	bl	0 <coda_hashtable_get_index_from_name_n>
    4e0c:	cmn	r0, #1
    4e10:	strgt	r0, [r6]
    4e14:	movgt	r0, #0
    4e18:	popgt	{r4, r5, r6, sl, fp, pc}
    4e1c:	movw	r1, #0
    4e20:	mvn	r0, #101	; 0x65
    4e24:	mov	r2, r5
    4e28:	mov	r3, r4
    4e2c:	movt	r1, #0
    4e30:	b	4e4c <coda_type_get_record_field_index_from_name_n+0xb4>
    4e34:	movw	r1, #0
    4e38:	movw	r2, #0
    4e3c:	mvn	r0, #99	; 0x63
    4e40:	movw	r3, #3291	; 0xcdb
    4e44:	movt	r1, #0
    4e48:	movt	r2, #0
    4e4c:	bl	0 <coda_set_error>
    4e50:	mvn	r0, #0
    4e54:	pop	{r4, r5, r6, sl, fp, pc}
    4e58:	movw	r2, #0
    4e5c:	movt	r2, #0
    4e60:	b	4e9c <coda_type_get_record_field_index_from_name_n+0x104>
    4e64:	movw	r2, #0
    4e68:	movt	r2, #0
    4e6c:	b	4e9c <coda_type_get_record_field_index_from_name_n+0x104>
    4e70:	movw	r2, #0
    4e74:	movt	r2, #0
    4e78:	b	4e9c <coda_type_get_record_field_index_from_name_n+0x104>
    4e7c:	movw	r2, #0
    4e80:	movt	r2, #0
    4e84:	b	4e9c <coda_type_get_record_field_index_from_name_n+0x104>
    4e88:	movw	r2, #0
    4e8c:	movt	r2, #0
    4e90:	b	4e9c <coda_type_get_record_field_index_from_name_n+0x104>
    4e94:	movw	r2, #0
    4e98:	movt	r2, #0
    4e9c:	movw	r1, #0
    4ea0:	mvn	r0, #104	; 0x68
    4ea4:	movt	r1, #0
    4ea8:	bl	0 <coda_set_error>
    4eac:	mvn	r0, #0
    4eb0:	pop	{r4, r5, r6, sl, fp, pc}
    4eb4:	movw	r1, #0
    4eb8:	movw	r2, #0
    4ebc:	mvn	r0, #99	; 0x63
    4ec0:	movw	r3, #3302	; 0xce6
    4ec4:	movt	r1, #0
    4ec8:	b	4e48 <coda_type_get_record_field_index_from_name_n+0xb0>
    4ecc:	movw	r1, #0
    4ed0:	movw	r2, #0
    4ed4:	mvn	r0, #99	; 0x63
    4ed8:	movw	r3, #3307	; 0xceb
    4edc:	movt	r1, #0
    4ee0:	b	4e48 <coda_type_get_record_field_index_from_name_n+0xb0>

00004ee4 <coda_type_get_record_field_index_from_real_name>:
    4ee4:	push	{r4, r5, fp, lr}
    4ee8:	add	fp, sp, #8
    4eec:	cmp	r0, #0
    4ef0:	beq	4f74 <coda_type_get_record_field_index_from_real_name+0x90>
    4ef4:	mov	r4, r1
    4ef8:	ldr	r1, [r0, #8]
    4efc:	cmp	r1, #6
    4f00:	bhi	4f98 <coda_type_get_record_field_index_from_real_name+0xb4>
    4f04:	mov	r5, r2
    4f08:	movw	r2, #0
    4f0c:	add	r3, pc, #4
    4f10:	movt	r2, #0
    4f14:	ldr	pc, [r3, r1, lsl #2]
    4f18:	.word	0x00004f34
    4f1c:	.word	0x00004fdc
    4f20:	.word	0x00004fa4
    4f24:	.word	0x00004fb0
    4f28:	.word	0x00004fbc
    4f2c:	.word	0x00004fc8
    4f30:	.word	0x00004fd4
    4f34:	cmp	r4, #0
    4f38:	beq	4ff4 <coda_type_get_record_field_index_from_real_name+0x110>
    4f3c:	cmp	r5, #0
    4f40:	beq	500c <coda_type_get_record_field_index_from_real_name+0x128>
    4f44:	ldr	r0, [r0, #44]	; 0x2c
    4f48:	mov	r1, r4
    4f4c:	bl	0 <coda_hashtable_get_index_from_name>
    4f50:	cmn	r0, #1
    4f54:	strgt	r0, [r5]
    4f58:	movgt	r0, #0
    4f5c:	popgt	{r4, r5, fp, pc}
    4f60:	movw	r1, #0
    4f64:	mvn	r0, #101	; 0x65
    4f68:	mov	r2, r4
    4f6c:	movt	r1, #0
    4f70:	b	4fe8 <coda_type_get_record_field_index_from_real_name+0x104>
    4f74:	movw	r1, #0
    4f78:	movw	r2, #0
    4f7c:	mvn	r0, #99	; 0x63
    4f80:	movw	r3, #3338	; 0xd0a
    4f84:	movt	r1, #0
    4f88:	movt	r2, #0
    4f8c:	bl	0 <coda_set_error>
    4f90:	mvn	r0, #0
    4f94:	pop	{r4, r5, fp, pc}
    4f98:	movw	r2, #0
    4f9c:	movt	r2, #0
    4fa0:	b	4fdc <coda_type_get_record_field_index_from_real_name+0xf8>
    4fa4:	movw	r2, #0
    4fa8:	movt	r2, #0
    4fac:	b	4fdc <coda_type_get_record_field_index_from_real_name+0xf8>
    4fb0:	movw	r2, #0
    4fb4:	movt	r2, #0
    4fb8:	b	4fdc <coda_type_get_record_field_index_from_real_name+0xf8>
    4fbc:	movw	r2, #0
    4fc0:	movt	r2, #0
    4fc4:	b	4fdc <coda_type_get_record_field_index_from_real_name+0xf8>
    4fc8:	movw	r2, #0
    4fcc:	movt	r2, #0
    4fd0:	b	4fdc <coda_type_get_record_field_index_from_real_name+0xf8>
    4fd4:	movw	r2, #0
    4fd8:	movt	r2, #0
    4fdc:	movw	r1, #0
    4fe0:	mvn	r0, #104	; 0x68
    4fe4:	movt	r1, #0
    4fe8:	bl	0 <coda_set_error>
    4fec:	mvn	r0, #0
    4ff0:	pop	{r4, r5, fp, pc}
    4ff4:	movw	r1, #0
    4ff8:	movw	r2, #0
    4ffc:	mvn	r0, #99	; 0x63
    5000:	movw	r3, #3349	; 0xd15
    5004:	movt	r1, #0
    5008:	b	4f88 <coda_type_get_record_field_index_from_real_name+0xa4>
    500c:	movw	r1, #0
    5010:	movw	r2, #0
    5014:	mvn	r0, #99	; 0x63
    5018:	movw	r3, #3354	; 0xd1a
    501c:	movt	r1, #0
    5020:	b	4f88 <coda_type_get_record_field_index_from_real_name+0xa4>

00005024 <coda_type_get_record_field_type>:
    5024:	push	{fp, lr}
    5028:	mov	fp, sp
    502c:	sub	sp, sp, #8
    5030:	cmp	r0, #0
    5034:	beq	50b4 <coda_type_get_record_field_type+0x90>
    5038:	mov	ip, r1
    503c:	ldr	r1, [r0, #8]
    5040:	cmp	r1, #6
    5044:	bhi	50d4 <coda_type_get_record_field_type+0xb0>
    5048:	movw	lr, #0
    504c:	add	r3, pc, #4
    5050:	movt	lr, #0
    5054:	ldr	pc, [r3, r1, lsl #2]
    5058:	.word	0x00005074
    505c:	.word	0x00005118
    5060:	.word	0x000050e0
    5064:	.word	0x000050ec
    5068:	.word	0x000050f8
    506c:	.word	0x00005104
    5070:	.word	0x00005110
    5074:	cmp	r2, #0
    5078:	beq	5138 <coda_type_get_record_field_type+0x114>
    507c:	ldr	r3, [r0, #48]	; 0x30
    5080:	cmp	ip, #0
    5084:	cmpge	r3, ip
    5088:	bgt	5150 <coda_type_get_record_field_type+0x12c>
    508c:	movw	r1, #0
    5090:	movw	r0, #3399	; 0xd47
    5094:	mov	r2, ip
    5098:	movt	r1, #0
    509c:	str	r0, [sp, #4]
    50a0:	mvn	r0, #100	; 0x64
    50a4:	str	r1, [sp]
    50a8:	movw	r1, #0
    50ac:	movt	r1, #0
    50b0:	b	50cc <coda_type_get_record_field_type+0xa8>
    50b4:	movw	r1, #0
    50b8:	movw	r2, #0
    50bc:	mvn	r0, #99	; 0x63
    50c0:	movw	r3, #3381	; 0xd35
    50c4:	movt	r1, #0
    50c8:	movt	r2, #0
    50cc:	bl	0 <coda_set_error>
    50d0:	b	512c <coda_type_get_record_field_type+0x108>
    50d4:	movw	lr, #0
    50d8:	movt	lr, #0
    50dc:	b	5118 <coda_type_get_record_field_type+0xf4>
    50e0:	movw	lr, #0
    50e4:	movt	lr, #0
    50e8:	b	5118 <coda_type_get_record_field_type+0xf4>
    50ec:	movw	lr, #0
    50f0:	movt	lr, #0
    50f4:	b	5118 <coda_type_get_record_field_type+0xf4>
    50f8:	movw	lr, #0
    50fc:	movt	lr, #0
    5100:	b	5118 <coda_type_get_record_field_type+0xf4>
    5104:	movw	lr, #0
    5108:	movt	lr, #0
    510c:	b	5118 <coda_type_get_record_field_type+0xf4>
    5110:	movw	lr, #0
    5114:	movt	lr, #0
    5118:	movw	r1, #0
    511c:	mvn	r0, #104	; 0x68
    5120:	mov	r2, lr
    5124:	movt	r1, #0
    5128:	bl	0 <coda_set_error>
    512c:	mvn	r0, #0
    5130:	mov	sp, fp
    5134:	pop	{fp, pc}
    5138:	movw	r1, #0
    513c:	movw	r2, #0
    5140:	mvn	r0, #99	; 0x63
    5144:	mov	r3, #3392	; 0xd40
    5148:	movt	r1, #0
    514c:	b	50c8 <coda_type_get_record_field_type+0xa4>
    5150:	ldr	r0, [r0, #52]	; 0x34
    5154:	ldr	r0, [r0, ip, lsl #2]
    5158:	ldr	r0, [r0, #8]
    515c:	str	r0, [r2]
    5160:	mov	r0, #0
    5164:	mov	sp, fp
    5168:	pop	{fp, pc}

0000516c <coda_type_get_record_field_name>:
    516c:	push	{fp, lr}
    5170:	mov	fp, sp
    5174:	sub	sp, sp, #8
    5178:	cmp	r0, #0
    517c:	beq	51fc <coda_type_get_record_field_name+0x90>
    5180:	mov	ip, r1
    5184:	ldr	r1, [r0, #8]
    5188:	cmp	r1, #6
    518c:	bhi	521c <coda_type_get_record_field_name+0xb0>
    5190:	movw	lr, #0
    5194:	add	r3, pc, #4
    5198:	movt	lr, #0
    519c:	ldr	pc, [r3, r1, lsl #2]
    51a0:	.word	0x000051bc
    51a4:	.word	0x00005260
    51a8:	.word	0x00005228
    51ac:	.word	0x00005234
    51b0:	.word	0x00005240
    51b4:	.word	0x0000524c
    51b8:	.word	0x00005258
    51bc:	cmp	r2, #0
    51c0:	beq	5280 <coda_type_get_record_field_name+0x114>
    51c4:	ldr	r3, [r0, #48]	; 0x30
    51c8:	cmp	ip, #0
    51cc:	cmpge	r3, ip
    51d0:	bgt	5298 <coda_type_get_record_field_name+0x12c>
    51d4:	movw	r1, #0
    51d8:	movw	r0, #3438	; 0xd6e
    51dc:	mov	r2, ip
    51e0:	movt	r1, #0
    51e4:	str	r0, [sp, #4]
    51e8:	mvn	r0, #100	; 0x64
    51ec:	str	r1, [sp]
    51f0:	movw	r1, #0
    51f4:	movt	r1, #0
    51f8:	b	5214 <coda_type_get_record_field_name+0xa8>
    51fc:	movw	r1, #0
    5200:	movw	r2, #0
    5204:	mvn	r0, #99	; 0x63
    5208:	movw	r3, #3420	; 0xd5c
    520c:	movt	r1, #0
    5210:	movt	r2, #0
    5214:	bl	0 <coda_set_error>
    5218:	b	5274 <coda_type_get_record_field_name+0x108>
    521c:	movw	lr, #0
    5220:	movt	lr, #0
    5224:	b	5260 <coda_type_get_record_field_name+0xf4>
    5228:	movw	lr, #0
    522c:	movt	lr, #0
    5230:	b	5260 <coda_type_get_record_field_name+0xf4>
    5234:	movw	lr, #0
    5238:	movt	lr, #0
    523c:	b	5260 <coda_type_get_record_field_name+0xf4>
    5240:	movw	lr, #0
    5244:	movt	lr, #0
    5248:	b	5260 <coda_type_get_record_field_name+0xf4>
    524c:	movw	lr, #0
    5250:	movt	lr, #0
    5254:	b	5260 <coda_type_get_record_field_name+0xf4>
    5258:	movw	lr, #0
    525c:	movt	lr, #0
    5260:	movw	r1, #0
    5264:	mvn	r0, #104	; 0x68
    5268:	mov	r2, lr
    526c:	movt	r1, #0
    5270:	bl	0 <coda_set_error>
    5274:	mvn	r0, #0
    5278:	mov	sp, fp
    527c:	pop	{fp, pc}
    5280:	movw	r1, #0
    5284:	movw	r2, #0
    5288:	mvn	r0, #99	; 0x63
    528c:	movw	r3, #3431	; 0xd67
    5290:	movt	r1, #0
    5294:	b	5210 <coda_type_get_record_field_name+0xa4>
    5298:	ldr	r0, [r0, #52]	; 0x34
    529c:	ldr	r0, [r0, ip, lsl #2]
    52a0:	ldr	r0, [r0]
    52a4:	str	r0, [r2]
    52a8:	mov	r0, #0
    52ac:	mov	sp, fp
    52b0:	pop	{fp, pc}

000052b4 <coda_type_get_record_field_real_name>:
    52b4:	push	{r4, r5, fp, lr}
    52b8:	add	fp, sp, #8
    52bc:	sub	sp, sp, #8
    52c0:	cmp	r0, #0
    52c4:	beq	5348 <coda_type_get_record_field_real_name+0x94>
    52c8:	mov	r4, r1
    52cc:	ldr	r1, [r0, #8]
    52d0:	cmp	r1, #6
    52d4:	bhi	5368 <coda_type_get_record_field_real_name+0xb4>
    52d8:	mov	r5, r2
    52dc:	movw	r2, #0
    52e0:	add	r3, pc, #4
    52e4:	movt	r2, #0
    52e8:	ldr	pc, [r3, r1, lsl #2]
    52ec:	.word	0x00005308
    52f0:	.word	0x000053ac
    52f4:	.word	0x00005374
    52f8:	.word	0x00005380
    52fc:	.word	0x0000538c
    5300:	.word	0x00005398
    5304:	.word	0x000053a4
    5308:	cmp	r5, #0
    530c:	beq	53c8 <coda_type_get_record_field_real_name+0x114>
    5310:	ldr	r3, [r0, #48]	; 0x30
    5314:	cmp	r4, #0
    5318:	cmpge	r3, r4
    531c:	bgt	53e0 <coda_type_get_record_field_real_name+0x12c>
    5320:	movw	r1, #0
    5324:	movw	r0, #3486	; 0xd9e
    5328:	mov	r2, r4
    532c:	movt	r1, #0
    5330:	str	r0, [sp, #4]
    5334:	mvn	r0, #100	; 0x64
    5338:	str	r1, [sp]
    533c:	movw	r1, #0
    5340:	movt	r1, #0
    5344:	b	5360 <coda_type_get_record_field_real_name+0xac>
    5348:	movw	r1, #0
    534c:	movw	r2, #0
    5350:	mvn	r0, #99	; 0x63
    5354:	movw	r3, #3468	; 0xd8c
    5358:	movt	r1, #0
    535c:	movt	r2, #0
    5360:	bl	0 <coda_set_error>
    5364:	b	53bc <coda_type_get_record_field_real_name+0x108>
    5368:	movw	r2, #0
    536c:	movt	r2, #0
    5370:	b	53ac <coda_type_get_record_field_real_name+0xf8>
    5374:	movw	r2, #0
    5378:	movt	r2, #0
    537c:	b	53ac <coda_type_get_record_field_real_name+0xf8>
    5380:	movw	r2, #0
    5384:	movt	r2, #0
    5388:	b	53ac <coda_type_get_record_field_real_name+0xf8>
    538c:	movw	r2, #0
    5390:	movt	r2, #0
    5394:	b	53ac <coda_type_get_record_field_real_name+0xf8>
    5398:	movw	r2, #0
    539c:	movt	r2, #0
    53a0:	b	53ac <coda_type_get_record_field_real_name+0xf8>
    53a4:	movw	r2, #0
    53a8:	movt	r2, #0
    53ac:	movw	r1, #0
    53b0:	mvn	r0, #104	; 0x68
    53b4:	movt	r1, #0
    53b8:	bl	0 <coda_set_error>
    53bc:	mvn	r0, #0
    53c0:	sub	sp, fp, #8
    53c4:	pop	{r4, r5, fp, pc}
    53c8:	movw	r1, #0
    53cc:	movw	r2, #0
    53d0:	mvn	r0, #99	; 0x63
    53d4:	movw	r3, #3479	; 0xd97
    53d8:	movt	r1, #0
    53dc:	b	535c <coda_type_get_record_field_real_name+0xa8>
    53e0:	ldr	r1, [r0, #52]	; 0x34
    53e4:	ldr	r2, [r1, r4, lsl #2]
    53e8:	ldr	r1, [r2, #4]
    53ec:	cmp	r1, #0
    53f0:	beq	540c <coda_type_get_record_field_real_name+0x158>
    53f4:	ldr	r0, [r0]
    53f8:	cmp	r0, #2
    53fc:	bne	5418 <coda_type_get_record_field_real_name+0x164>
    5400:	mov	r0, r1
    5404:	bl	0 <coda_element_name_from_xml_name>
    5408:	b	5410 <coda_type_get_record_field_real_name+0x15c>
    540c:	ldr	r0, [r2]
    5410:	str	r0, [r5]
    5414:	b	541c <coda_type_get_record_field_real_name+0x168>
    5418:	str	r1, [r5]
    541c:	mov	r0, #0
    5420:	sub	sp, fp, #8
    5424:	pop	{r4, r5, fp, pc}

00005428 <coda_type_get_record_field_hidden_status>:
    5428:	push	{fp, lr}
    542c:	mov	fp, sp
    5430:	sub	sp, sp, #8
    5434:	cmp	r0, #0
    5438:	beq	54b8 <coda_type_get_record_field_hidden_status+0x90>
    543c:	mov	ip, r1
    5440:	ldr	r1, [r0, #8]
    5444:	cmp	r1, #6
    5448:	bhi	54d8 <coda_type_get_record_field_hidden_status+0xb0>
    544c:	movw	lr, #0
    5450:	add	r3, pc, #4
    5454:	movt	lr, #0
    5458:	ldr	pc, [r3, r1, lsl #2]
    545c:	.word	0x00005478
    5460:	.word	0x0000551c
    5464:	.word	0x000054e4
    5468:	.word	0x000054f0
    546c:	.word	0x000054fc
    5470:	.word	0x00005508
    5474:	.word	0x00005514
    5478:	cmp	r2, #0
    547c:	beq	553c <coda_type_get_record_field_hidden_status+0x114>
    5480:	ldr	r3, [r0, #48]	; 0x30
    5484:	cmp	ip, #0
    5488:	cmpge	r3, ip
    548c:	bgt	5554 <coda_type_get_record_field_hidden_status+0x12c>
    5490:	movw	r1, #0
    5494:	movw	r0, #3542	; 0xdd6
    5498:	mov	r2, ip
    549c:	movt	r1, #0
    54a0:	str	r0, [sp, #4]
    54a4:	mvn	r0, #100	; 0x64
    54a8:	str	r1, [sp]
    54ac:	movw	r1, #0
    54b0:	movt	r1, #0
    54b4:	b	54d0 <coda_type_get_record_field_hidden_status+0xa8>
    54b8:	movw	r1, #0
    54bc:	movw	r2, #0
    54c0:	mvn	r0, #99	; 0x63
    54c4:	movw	r3, #3524	; 0xdc4
    54c8:	movt	r1, #0
    54cc:	movt	r2, #0
    54d0:	bl	0 <coda_set_error>
    54d4:	b	5530 <coda_type_get_record_field_hidden_status+0x108>
    54d8:	movw	lr, #0
    54dc:	movt	lr, #0
    54e0:	b	551c <coda_type_get_record_field_hidden_status+0xf4>
    54e4:	movw	lr, #0
    54e8:	movt	lr, #0
    54ec:	b	551c <coda_type_get_record_field_hidden_status+0xf4>
    54f0:	movw	lr, #0
    54f4:	movt	lr, #0
    54f8:	b	551c <coda_type_get_record_field_hidden_status+0xf4>
    54fc:	movw	lr, #0
    5500:	movt	lr, #0
    5504:	b	551c <coda_type_get_record_field_hidden_status+0xf4>
    5508:	movw	lr, #0
    550c:	movt	lr, #0
    5510:	b	551c <coda_type_get_record_field_hidden_status+0xf4>
    5514:	movw	lr, #0
    5518:	movt	lr, #0
    551c:	movw	r1, #0
    5520:	mvn	r0, #104	; 0x68
    5524:	mov	r2, lr
    5528:	movt	r1, #0
    552c:	bl	0 <coda_set_error>
    5530:	mvn	r0, #0
    5534:	mov	sp, fp
    5538:	pop	{fp, pc}
    553c:	movw	r1, #0
    5540:	movw	r2, #0
    5544:	mvn	r0, #99	; 0x63
    5548:	movw	r3, #3535	; 0xdcf
    554c:	movt	r1, #0
    5550:	b	54cc <coda_type_get_record_field_hidden_status+0xa4>
    5554:	ldr	r0, [r0, #52]	; 0x34
    5558:	ldr	r0, [r0, ip, lsl #2]
    555c:	ldr	r0, [r0, #12]
    5560:	str	r0, [r2]
    5564:	mov	r0, #0
    5568:	mov	sp, fp
    556c:	pop	{fp, pc}

00005570 <coda_type_get_record_field_available_status>:
    5570:	push	{fp, lr}
    5574:	mov	fp, sp
    5578:	sub	sp, sp, #8
    557c:	cmp	r0, #0
    5580:	beq	5600 <coda_type_get_record_field_available_status+0x90>
    5584:	mov	ip, r1
    5588:	ldr	r1, [r0, #8]
    558c:	cmp	r1, #6
    5590:	bhi	5620 <coda_type_get_record_field_available_status+0xb0>
    5594:	movw	lr, #0
    5598:	add	r3, pc, #4
    559c:	movt	lr, #0
    55a0:	ldr	pc, [r3, r1, lsl #2]
    55a4:	.word	0x000055c0
    55a8:	.word	0x00005664
    55ac:	.word	0x0000562c
    55b0:	.word	0x00005638
    55b4:	.word	0x00005644
    55b8:	.word	0x00005650
    55bc:	.word	0x0000565c
    55c0:	cmp	r2, #0
    55c4:	beq	5684 <coda_type_get_record_field_available_status+0x114>
    55c8:	ldr	r3, [r0, #48]	; 0x30
    55cc:	cmp	ip, #0
    55d0:	cmpge	r3, ip
    55d4:	bgt	569c <coda_type_get_record_field_available_status+0x12c>
    55d8:	movw	r1, #0
    55dc:	movw	r0, #3586	; 0xe02
    55e0:	mov	r2, ip
    55e4:	movt	r1, #0
    55e8:	str	r0, [sp, #4]
    55ec:	mvn	r0, #100	; 0x64
    55f0:	str	r1, [sp]
    55f4:	movw	r1, #0
    55f8:	movt	r1, #0
    55fc:	b	5618 <coda_type_get_record_field_available_status+0xa8>
    5600:	movw	r1, #0
    5604:	movw	r2, #0
    5608:	mvn	r0, #99	; 0x63
    560c:	mov	r3, #3568	; 0xdf0
    5610:	movt	r1, #0
    5614:	movt	r2, #0
    5618:	bl	0 <coda_set_error>
    561c:	b	5678 <coda_type_get_record_field_available_status+0x108>
    5620:	movw	lr, #0
    5624:	movt	lr, #0
    5628:	b	5664 <coda_type_get_record_field_available_status+0xf4>
    562c:	movw	lr, #0
    5630:	movt	lr, #0
    5634:	b	5664 <coda_type_get_record_field_available_status+0xf4>
    5638:	movw	lr, #0
    563c:	movt	lr, #0
    5640:	b	5664 <coda_type_get_record_field_available_status+0xf4>
    5644:	movw	lr, #0
    5648:	movt	lr, #0
    564c:	b	5664 <coda_type_get_record_field_available_status+0xf4>
    5650:	movw	lr, #0
    5654:	movt	lr, #0
    5658:	b	5664 <coda_type_get_record_field_available_status+0xf4>
    565c:	movw	lr, #0
    5660:	movt	lr, #0
    5664:	movw	r1, #0
    5668:	mvn	r0, #104	; 0x68
    566c:	mov	r2, lr
    5670:	movt	r1, #0
    5674:	bl	0 <coda_set_error>
    5678:	mvn	r0, #0
    567c:	mov	sp, fp
    5680:	pop	{fp, pc}
    5684:	movw	r1, #0
    5688:	movw	r2, #0
    568c:	mvn	r0, #99	; 0x63
    5690:	movw	r3, #3579	; 0xdfb
    5694:	movt	r1, #0
    5698:	b	5614 <coda_type_get_record_field_available_status+0xa4>
    569c:	ldr	r0, [r0, #52]	; 0x34
    56a0:	mvn	r1, #0
    56a4:	ldr	r0, [r0, ip, lsl #2]
    56a8:	ldrb	r0, [r0, #16]
    56ac:	cmp	r0, #0
    56b0:	mov	r0, #0
    56b4:	movweq	r1, #1
    56b8:	str	r1, [r2]
    56bc:	mov	sp, fp
    56c0:	pop	{fp, pc}

000056c4 <coda_type_get_record_union_status>:
    56c4:	push	{fp, lr}
    56c8:	mov	fp, sp
    56cc:	cmp	r0, #0
    56d0:	beq	5738 <coda_type_get_record_union_status+0x74>
    56d4:	ldr	ip, [r0, #8]
    56d8:	cmp	ip, #6
    56dc:	bhi	575c <coda_type_get_record_union_status+0x98>
    56e0:	movw	r2, #0
    56e4:	add	r3, pc, #4
    56e8:	movt	r2, #0
    56ec:	ldr	pc, [r3, ip, lsl #2]
    56f0:	.word	0x0000570c
    56f4:	.word	0x000057a0
    56f8:	.word	0x00005768
    56fc:	.word	0x00005774
    5700:	.word	0x00005780
    5704:	.word	0x0000578c
    5708:	.word	0x00005798
    570c:	cmp	r1, #0
    5710:	ldrne	r0, [r0, #64]	; 0x40
    5714:	strne	r0, [r1]
    5718:	movne	r0, #0
    571c:	popne	{fp, pc}
    5720:	movw	r1, #0
    5724:	movw	r2, #0
    5728:	mvn	r0, #99	; 0x63
    572c:	movw	r3, #3618	; 0xe22
    5730:	movt	r1, #0
    5734:	b	574c <coda_type_get_record_union_status+0x88>
    5738:	movw	r1, #0
    573c:	movw	r2, #0
    5740:	mvn	r0, #99	; 0x63
    5744:	movw	r3, #3607	; 0xe17
    5748:	movt	r1, #0
    574c:	movt	r2, #0
    5750:	bl	0 <coda_set_error>
    5754:	mvn	r0, #0
    5758:	pop	{fp, pc}
    575c:	movw	r2, #0
    5760:	movt	r2, #0
    5764:	b	57a0 <coda_type_get_record_union_status+0xdc>
    5768:	movw	r2, #0
    576c:	movt	r2, #0
    5770:	b	57a0 <coda_type_get_record_union_status+0xdc>
    5774:	movw	r2, #0
    5778:	movt	r2, #0
    577c:	b	57a0 <coda_type_get_record_union_status+0xdc>
    5780:	movw	r2, #0
    5784:	movt	r2, #0
    5788:	b	57a0 <coda_type_get_record_union_status+0xdc>
    578c:	movw	r2, #0
    5790:	movt	r2, #0
    5794:	b	57a0 <coda_type_get_record_union_status+0xdc>
    5798:	movw	r2, #0
    579c:	movt	r2, #0
    57a0:	movw	r1, #0
    57a4:	mvn	r0, #104	; 0x68
    57a8:	movt	r1, #0
    57ac:	bl	0 <coda_set_error>
    57b0:	mvn	r0, #0
    57b4:	pop	{fp, pc}

000057b8 <coda_type_get_array_num_dims>:
    57b8:	push	{fp, lr}
    57bc:	mov	fp, sp
    57c0:	cmp	r0, #0
    57c4:	beq	582c <coda_type_get_array_num_dims+0x74>
    57c8:	ldr	ip, [r0, #8]
    57cc:	cmp	ip, #6
    57d0:	bhi	5850 <coda_type_get_array_num_dims+0x98>
    57d4:	movw	r2, #0
    57d8:	add	r3, pc, #4
    57dc:	movt	r2, #0
    57e0:	ldr	pc, [r3, ip, lsl #2]
    57e4:	.word	0x00005894
    57e8:	.word	0x00005800
    57ec:	.word	0x0000585c
    57f0:	.word	0x00005868
    57f4:	.word	0x00005874
    57f8:	.word	0x00005880
    57fc:	.word	0x0000588c
    5800:	cmp	r1, #0
    5804:	ldrne	r0, [r0, #48]	; 0x30
    5808:	strne	r0, [r1]
    580c:	movne	r0, #0
    5810:	popne	{fp, pc}
    5814:	movw	r1, #0
    5818:	movw	r2, #0
    581c:	mvn	r0, #99	; 0x63
    5820:	movw	r3, #3649	; 0xe41
    5824:	movt	r1, #0
    5828:	b	5840 <coda_type_get_array_num_dims+0x88>
    582c:	movw	r1, #0
    5830:	movw	r2, #0
    5834:	mvn	r0, #99	; 0x63
    5838:	movw	r3, #3638	; 0xe36
    583c:	movt	r1, #0
    5840:	movt	r2, #0
    5844:	bl	0 <coda_set_error>
    5848:	mvn	r0, #0
    584c:	pop	{fp, pc}
    5850:	movw	r2, #0
    5854:	movt	r2, #0
    5858:	b	5894 <coda_type_get_array_num_dims+0xdc>
    585c:	movw	r2, #0
    5860:	movt	r2, #0
    5864:	b	5894 <coda_type_get_array_num_dims+0xdc>
    5868:	movw	r2, #0
    586c:	movt	r2, #0
    5870:	b	5894 <coda_type_get_array_num_dims+0xdc>
    5874:	movw	r2, #0
    5878:	movt	r2, #0
    587c:	b	5894 <coda_type_get_array_num_dims+0xdc>
    5880:	movw	r2, #0
    5884:	movt	r2, #0
    5888:	b	5894 <coda_type_get_array_num_dims+0xdc>
    588c:	movw	r2, #0
    5890:	movt	r2, #0
    5894:	movw	r1, #0
    5898:	mvn	r0, #104	; 0x68
    589c:	movt	r1, #0
    58a0:	bl	0 <coda_set_error>
    58a4:	mvn	r0, #0
    58a8:	pop	{fp, pc}

000058ac <coda_type_get_array_dim>:
    58ac:	push	{r4, sl, fp, lr}
    58b0:	add	fp, sp, #8
    58b4:	cmp	r0, #0
    58b8:	beq	5994 <coda_type_get_array_dim+0xe8>
    58bc:	ldr	r4, [r0, #8]
    58c0:	cmp	r4, #6
    58c4:	bhi	59b4 <coda_type_get_array_dim+0x108>
    58c8:	movw	ip, #0
    58cc:	add	r3, pc, #4
    58d0:	movt	ip, #0
    58d4:	ldr	pc, [r3, r4, lsl #2]
    58d8:	.word	0x000059f8
    58dc:	.word	0x000058f4
    58e0:	.word	0x000059c0
    58e4:	.word	0x000059cc
    58e8:	.word	0x000059d8
    58ec:	.word	0x000059e4
    58f0:	.word	0x000059f0
    58f4:	cmp	r1, #0
    58f8:	beq	5a18 <coda_type_get_array_dim+0x16c>
    58fc:	cmp	r2, #0
    5900:	beq	5a30 <coda_type_get_array_dim+0x184>
    5904:	ldr	r3, [r0, #48]	; 0x30
    5908:	str	r3, [r1]
    590c:	ldr	ip, [r0, #48]	; 0x30
    5910:	cmp	ip, #1
    5914:	movlt	r1, #0
    5918:	movlt	r0, r1
    591c:	poplt	{r4, sl, fp, pc}
    5920:	mov	r3, #0
    5924:	cmp	ip, #4
    5928:	bcc	5970 <coda_type_get_array_dim+0xc4>
    592c:	add	lr, r0, #52	; 0x34
    5930:	add	r1, lr, ip, lsl #2
    5934:	cmp	r1, r2
    5938:	bls	5948 <coda_type_get_array_dim+0x9c>
    593c:	add	r1, r2, ip, lsl #2
    5940:	cmp	lr, r1
    5944:	bcc	5970 <coda_type_get_array_dim+0xc4>
    5948:	bic	r3, ip, #3
    594c:	mov	r4, r2
    5950:	mov	r1, r3
    5954:	vld1.32	{d16-d17}, [lr]!
    5958:	subs	r1, r1, #4
    595c:	vst1.32	{d16-d17}, [r4]!
    5960:	bne	5954 <coda_type_get_array_dim+0xa8>
    5964:	mov	r1, #0
    5968:	cmp	ip, r3
    596c:	beq	598c <coda_type_get_array_dim+0xe0>
    5970:	add	r1, r0, r3, lsl #2
    5974:	ldr	r1, [r1, #52]	; 0x34
    5978:	str	r1, [r2, r3, lsl #2]
    597c:	add	r3, r3, #1
    5980:	mov	r1, #0
    5984:	cmp	r3, ip
    5988:	blt	5970 <coda_type_get_array_dim+0xc4>
    598c:	mov	r0, r1
    5990:	pop	{r4, sl, fp, pc}
    5994:	movw	r1, #0
    5998:	movw	r2, #0
    599c:	mvn	r0, #99	; 0x63
    59a0:	mov	r3, #3680	; 0xe60
    59a4:	movt	r1, #0
    59a8:	movt	r2, #0
    59ac:	bl	0 <coda_set_error>
    59b0:	b	5a0c <coda_type_get_array_dim+0x160>
    59b4:	movw	ip, #0
    59b8:	movt	ip, #0
    59bc:	b	59f8 <coda_type_get_array_dim+0x14c>
    59c0:	movw	ip, #0
    59c4:	movt	ip, #0
    59c8:	b	59f8 <coda_type_get_array_dim+0x14c>
    59cc:	movw	ip, #0
    59d0:	movt	ip, #0
    59d4:	b	59f8 <coda_type_get_array_dim+0x14c>
    59d8:	movw	ip, #0
    59dc:	movt	ip, #0
    59e0:	b	59f8 <coda_type_get_array_dim+0x14c>
    59e4:	movw	ip, #0
    59e8:	movt	ip, #0
    59ec:	b	59f8 <coda_type_get_array_dim+0x14c>
    59f0:	movw	ip, #0
    59f4:	movt	ip, #0
    59f8:	movw	r1, #0
    59fc:	mvn	r0, #104	; 0x68
    5a00:	mov	r2, ip
    5a04:	movt	r1, #0
    5a08:	bl	0 <coda_set_error>
    5a0c:	mvn	r1, #0
    5a10:	mov	r0, r1
    5a14:	pop	{r4, sl, fp, pc}
    5a18:	movw	r1, #0
    5a1c:	movw	r2, #0
    5a20:	mvn	r0, #99	; 0x63
    5a24:	movw	r3, #3691	; 0xe6b
    5a28:	movt	r1, #0
    5a2c:	b	59a8 <coda_type_get_array_dim+0xfc>
    5a30:	movw	r1, #0
    5a34:	movw	r2, #0
    5a38:	mvn	r0, #99	; 0x63
    5a3c:	mov	r3, #3696	; 0xe70
    5a40:	movt	r1, #0
    5a44:	b	59a8 <coda_type_get_array_dim+0xfc>

00005a48 <coda_type_get_special_type>:
    5a48:	push	{fp, lr}
    5a4c:	mov	fp, sp
    5a50:	cmp	r0, #0
    5a54:	beq	5a9c <coda_type_get_special_type+0x54>
    5a58:	ldr	ip, [r0, #8]
    5a5c:	cmp	ip, #6
    5a60:	bhi	5ac0 <coda_type_get_special_type+0x78>
    5a64:	movw	r2, #0
    5a68:	add	r3, pc, #4
    5a6c:	movt	r2, #0
    5a70:	ldr	pc, [r3, ip, lsl #2]
    5a74:	.word	0x00005af8
    5a78:	.word	0x00005a90
    5a7c:	.word	0x00005acc
    5a80:	.word	0x00005ad8
    5a84:	.word	0x00005ae4
    5a88:	.word	0x00005af0
    5a8c:	.word	0x00005b10
    5a90:	movw	r2, #0
    5a94:	movt	r2, #0
    5a98:	b	5af8 <coda_type_get_special_type+0xb0>
    5a9c:	movw	r1, #0
    5aa0:	movw	r2, #0
    5aa4:	mvn	r0, #99	; 0x63
    5aa8:	movw	r3, #3752	; 0xea8
    5aac:	movt	r1, #0
    5ab0:	movt	r2, #0
    5ab4:	bl	0 <coda_set_error>
    5ab8:	mvn	r0, #0
    5abc:	pop	{fp, pc}
    5ac0:	movw	r2, #0
    5ac4:	movt	r2, #0
    5ac8:	b	5af8 <coda_type_get_special_type+0xb0>
    5acc:	movw	r2, #0
    5ad0:	movt	r2, #0
    5ad4:	b	5af8 <coda_type_get_special_type+0xb0>
    5ad8:	movw	r2, #0
    5adc:	movt	r2, #0
    5ae0:	b	5af8 <coda_type_get_special_type+0xb0>
    5ae4:	movw	r2, #0
    5ae8:	movt	r2, #0
    5aec:	b	5af8 <coda_type_get_special_type+0xb0>
    5af0:	movw	r2, #0
    5af4:	movt	r2, #0
    5af8:	movw	r1, #0
    5afc:	mvn	r0, #104	; 0x68
    5b00:	movt	r1, #0
    5b04:	bl	0 <coda_set_error>
    5b08:	mvn	r0, #0
    5b0c:	pop	{fp, pc}
    5b10:	cmp	r1, #0
    5b14:	ldrne	r0, [r0, #40]	; 0x28
    5b18:	strne	r0, [r1]
    5b1c:	movne	r0, #0
    5b20:	popne	{fp, pc}
    5b24:	movw	r1, #0
    5b28:	movw	r2, #0
    5b2c:	mvn	r0, #99	; 0x63
    5b30:	movw	r3, #3763	; 0xeb3
    5b34:	movt	r1, #0
    5b38:	b	5ab0 <coda_type_get_special_type+0x68>

00005b3c <coda_type_get_special_base_type>:
    5b3c:	push	{fp, lr}
    5b40:	mov	fp, sp
    5b44:	cmp	r0, #0
    5b48:	beq	5b90 <coda_type_get_special_base_type+0x54>
    5b4c:	ldr	ip, [r0, #8]
    5b50:	cmp	ip, #6
    5b54:	bhi	5bb4 <coda_type_get_special_base_type+0x78>
    5b58:	movw	r2, #0
    5b5c:	add	r3, pc, #4
    5b60:	movt	r2, #0
    5b64:	ldr	pc, [r3, ip, lsl #2]
    5b68:	.word	0x00005bec
    5b6c:	.word	0x00005b84
    5b70:	.word	0x00005bc0
    5b74:	.word	0x00005bcc
    5b78:	.word	0x00005bd8
    5b7c:	.word	0x00005be4
    5b80:	.word	0x00005c04
    5b84:	movw	r2, #0
    5b88:	movt	r2, #0
    5b8c:	b	5bec <coda_type_get_special_base_type+0xb0>
    5b90:	movw	r1, #0
    5b94:	movw	r2, #0
    5b98:	mvn	r0, #99	; 0x63
    5b9c:	movw	r3, #3783	; 0xec7
    5ba0:	movt	r1, #0
    5ba4:	movt	r2, #0
    5ba8:	bl	0 <coda_set_error>
    5bac:	mvn	r0, #0
    5bb0:	pop	{fp, pc}
    5bb4:	movw	r2, #0
    5bb8:	movt	r2, #0
    5bbc:	b	5bec <coda_type_get_special_base_type+0xb0>
    5bc0:	movw	r2, #0
    5bc4:	movt	r2, #0
    5bc8:	b	5bec <coda_type_get_special_base_type+0xb0>
    5bcc:	movw	r2, #0
    5bd0:	movt	r2, #0
    5bd4:	b	5bec <coda_type_get_special_base_type+0xb0>
    5bd8:	movw	r2, #0
    5bdc:	movt	r2, #0
    5be0:	b	5bec <coda_type_get_special_base_type+0xb0>
    5be4:	movw	r2, #0
    5be8:	movt	r2, #0
    5bec:	movw	r1, #0
    5bf0:	mvn	r0, #104	; 0x68
    5bf4:	movt	r1, #0
    5bf8:	bl	0 <coda_set_error>
    5bfc:	mvn	r0, #0
    5c00:	pop	{fp, pc}
    5c04:	cmp	r1, #0
    5c08:	ldrne	r0, [r0, #44]	; 0x2c
    5c0c:	strne	r0, [r1]
    5c10:	movne	r0, #0
    5c14:	popne	{fp, pc}
    5c18:	movw	r1, #0
    5c1c:	movw	r2, #0
    5c20:	mvn	r0, #99	; 0x63
    5c24:	movw	r3, #3794	; 0xed2
    5c28:	movt	r1, #0
    5c2c:	b	5ba4 <coda_type_get_special_base_type+0x68>
