
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/CMakeFiles/flatc_compat.dir/flatc_compat.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <verify_monster>:
       0:	push	{fp, lr}
       4:	mov	fp, sp
       8:	sub	sp, sp, #160	; 0xa0
       c:	str	r0, [fp, #-8]
      10:	ldr	r0, [fp, #-8]
      14:	bl	84c <MyGame_Example_Monster_as_root>
      18:	str	r0, [fp, #-12]
      1c:	movw	lr, #0
      20:	cmp	r0, lr
      24:	bne	44 <verify_monster+0x44>
      28:	movw	r0, #0
      2c:	movt	r0, #0
      30:	bl	0 <printf>
      34:	mvn	lr, #0
      38:	str	lr, [fp, #-4]
      3c:	str	r0, [fp, #-60]	; 0xffffffc4
      40:	b	838 <verify_monster+0x838>
      44:	ldr	r0, [fp, #-12]
      48:	bl	8c4 <MyGame_Example_Monster_hp>
      4c:	sxth	r0, r0
      50:	cmp	r0, #80	; 0x50
      54:	beq	74 <verify_monster+0x74>
      58:	movw	r0, #0
      5c:	movt	r0, #0
      60:	bl	0 <printf>
      64:	mvn	lr, #0
      68:	str	lr, [fp, #-4]
      6c:	str	r0, [fp, #-64]	; 0xffffffc0
      70:	b	838 <verify_monster+0x838>
      74:	ldr	r0, [fp, #-12]
      78:	bl	9ac <MyGame_Example_Monster_pos>
      7c:	str	r0, [fp, #-20]	; 0xffffffec
      80:	movw	lr, #0
      84:	cmp	r0, lr
      88:	bne	a8 <verify_monster+0xa8>
      8c:	movw	r0, #0
      90:	movt	r0, #0
      94:	bl	0 <printf>
      98:	mvn	lr, #0
      9c:	str	lr, [fp, #-4]
      a0:	str	r0, [fp, #-68]	; 0xffffffbc
      a4:	b	838 <verify_monster+0x838>
      a8:	ldr	r0, [fp, #-20]	; 0xffffffec
      ac:	ldr	r1, [fp, #-8]
      b0:	sub	r0, r0, r1
      b4:	str	r0, [fp, #-40]	; 0xffffffd8
      b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
      bc:	and	r0, r0, #15
      c0:	cmp	r0, #0
      c4:	beq	e4 <verify_monster+0xe4>
      c8:	movw	r0, #0
      cc:	movt	r0, #0
      d0:	bl	0 <printf>
      d4:	mvn	lr, #0
      d8:	str	lr, [fp, #-4]
      dc:	str	r0, [fp, #-72]	; 0xffffffb8
      e0:	b	838 <verify_monster+0x838>
      e4:	ldr	r0, [fp, #-20]	; 0xffffffec
      e8:	bl	a84 <MyGame_Example_Vec3_x>
      ec:	vmov.f32	s2, #112	; 0x3f800000  1.0
      f0:	vcmp.f32	s0, s2
      f4:	vmrs	APSR_nzcv, fpscr
      f8:	beq	118 <verify_monster+0x118>
      fc:	movw	r0, #0
     100:	movt	r0, #0
     104:	bl	0 <printf>
     108:	mvn	lr, #0
     10c:	str	lr, [fp, #-4]
     110:	str	r0, [fp, #-76]	; 0xffffffb4
     114:	b	838 <verify_monster+0x838>
     118:	ldr	r0, [fp, #-20]	; 0xffffffec
     11c:	bl	ad0 <MyGame_Example_Vec3_y>
     120:	vmov.f32	s2, #0	; 0x40000000  2.0
     124:	vcmp.f32	s0, s2
     128:	vmrs	APSR_nzcv, fpscr
     12c:	beq	14c <verify_monster+0x14c>
     130:	movw	r0, #0
     134:	movt	r0, #0
     138:	bl	0 <printf>
     13c:	mvn	lr, #0
     140:	str	lr, [fp, #-4]
     144:	str	r0, [sp, #80]	; 0x50
     148:	b	838 <verify_monster+0x838>
     14c:	ldr	r0, [fp, #-20]	; 0xffffffec
     150:	bl	b20 <MyGame_Example_Vec3_z>
     154:	vmov.f32	s2, #8	; 0x40400000  3.0
     158:	vcmp.f32	s0, s2
     15c:	vmrs	APSR_nzcv, fpscr
     160:	beq	180 <verify_monster+0x180>
     164:	movw	r0, #0
     168:	movt	r0, #0
     16c:	bl	0 <printf>
     170:	mvn	lr, #0
     174:	str	lr, [fp, #-4]
     178:	str	r0, [sp, #76]	; 0x4c
     17c:	b	838 <verify_monster+0x838>
     180:	ldr	r0, [fp, #-20]	; 0xffffffec
     184:	bl	b70 <MyGame_Example_Vec3_test1>
     188:	vmov.f64	d16, #8	; 0x40400000  3.0
     18c:	vcmp.f64	d0, d16
     190:	vmrs	APSR_nzcv, fpscr
     194:	beq	1b4 <verify_monster+0x1b4>
     198:	movw	r0, #0
     19c:	movt	r0, #0
     1a0:	bl	0 <printf>
     1a4:	mvn	lr, #0
     1a8:	str	lr, [fp, #-4]
     1ac:	str	r0, [sp, #72]	; 0x48
     1b0:	b	838 <verify_monster+0x838>
     1b4:	ldr	r0, [fp, #-20]	; 0xffffffec
     1b8:	bl	bc8 <MyGame_Example_Vec3_test2>
     1bc:	sxtb	r0, r0
     1c0:	cmp	r0, #2
     1c4:	beq	1e4 <verify_monster+0x1e4>
     1c8:	movw	r0, #0
     1cc:	movt	r0, #0
     1d0:	bl	0 <printf>
     1d4:	mvn	lr, #0
     1d8:	str	lr, [fp, #-4]
     1dc:	str	r0, [sp, #68]	; 0x44
     1e0:	b	838 <verify_monster+0x838>
     1e4:	ldr	r0, [fp, #-20]	; 0xffffffec
     1e8:	bl	c1c <MyGame_Example_Vec3_test3>
     1ec:	str	r0, [fp, #-24]	; 0xffffffe8
     1f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     1f4:	bl	c5c <MyGame_Example_Test_a>
     1f8:	sxth	r0, r0
     1fc:	cmp	r0, #5
     200:	bne	218 <verify_monster+0x218>
     204:	ldr	r0, [fp, #-24]	; 0xffffffe8
     208:	bl	cac <MyGame_Example_Test_b>
     20c:	sxtb	r0, r0
     210:	cmp	r0, #6
     214:	beq	234 <verify_monster+0x234>
     218:	movw	r0, #0
     21c:	movt	r0, #0
     220:	bl	0 <printf>
     224:	mvn	lr, #0
     228:	str	lr, [fp, #-4]
     22c:	str	r0, [sp, #64]	; 0x40
     230:	b	838 <verify_monster+0x838>
     234:	ldr	r0, [fp, #-12]
     238:	bl	d00 <MyGame_Example_Monster_name>
     23c:	str	r0, [fp, #-36]	; 0xffffffdc
     240:	ldr	r0, [fp, #-36]	; 0xffffffdc
     244:	bl	e08 <flatbuffers_string_len>
     248:	cmp	r0, #9
     24c:	beq	26c <verify_monster+0x26c>
     250:	movw	r0, #0
     254:	movt	r0, #0
     258:	bl	0 <printf>
     25c:	mvn	lr, #0
     260:	str	lr, [fp, #-4]
     264:	str	r0, [sp, #60]	; 0x3c
     268:	b	838 <verify_monster+0x838>
     26c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     270:	movw	r1, #0
     274:	cmp	r0, r1
     278:	beq	294 <verify_monster+0x294>
     27c:	ldr	r0, [fp, #-36]	; 0xffffffdc
     280:	movw	r1, #0
     284:	movt	r1, #0
     288:	bl	0 <strcmp>
     28c:	cmp	r0, #0
     290:	beq	2b0 <verify_monster+0x2b0>
     294:	movw	r0, #0
     298:	movt	r0, #0
     29c:	bl	0 <printf>
     2a0:	mvn	lr, #0
     2a4:	str	lr, [fp, #-4]
     2a8:	str	r0, [sp, #56]	; 0x38
     2ac:	b	838 <verify_monster+0x838>
     2b0:	ldr	r0, [fp, #-12]
     2b4:	bl	e58 <MyGame_Example_Monster_inventory>
     2b8:	str	r0, [fp, #-44]	; 0xffffffd4
     2bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
     2c0:	bl	f54 <flatbuffers_uint8_vec_len>
     2c4:	cmp	r0, #5
     2c8:	beq	2e8 <verify_monster+0x2e8>
     2cc:	movw	r0, #0
     2d0:	movt	r0, #0
     2d4:	bl	0 <printf>
     2d8:	mvn	lr, #0
     2dc:	str	lr, [fp, #-4]
     2e0:	str	r0, [sp, #52]	; 0x34
     2e4:	b	838 <verify_monster+0x838>
     2e8:	movw	r0, #0
     2ec:	str	r0, [fp, #-56]	; 0xffffffc8
     2f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
     2f4:	cmp	r0, #5
     2f8:	bge	34c <verify_monster+0x34c>
     2fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
     300:	ldr	r1, [fp, #-56]	; 0xffffffc8
     304:	bl	f74 <flatbuffers_uint8_vec_at>
     308:	and	r0, r0, #255	; 0xff
     30c:	ldr	r1, [fp, #-56]	; 0xffffffc8
     310:	cmp	r0, r1
     314:	beq	338 <verify_monster+0x338>
     318:	ldr	r1, [fp, #-56]	; 0xffffffc8
     31c:	movw	r0, #0
     320:	movt	r0, #0
     324:	bl	0 <printf>
     328:	mvn	r1, #0
     32c:	str	r1, [fp, #-4]
     330:	str	r0, [sp, #48]	; 0x30
     334:	b	838 <verify_monster+0x838>
     338:	b	33c <verify_monster+0x33c>
     33c:	ldr	r0, [fp, #-56]	; 0xffffffc8
     340:	add	r0, r0, #1
     344:	str	r0, [fp, #-56]	; 0xffffffc8
     348:	b	2f0 <verify_monster+0x2f0>
     34c:	ldr	r0, [fp, #-12]
     350:	bl	fe0 <MyGame_Example_Monster_testarrayofstring>
     354:	str	r0, [fp, #-48]	; 0xffffffd0
     358:	movw	lr, #0
     35c:	cmp	r0, lr
     360:	bne	380 <verify_monster+0x380>
     364:	movw	r0, #0
     368:	movt	r0, #0
     36c:	bl	0 <printf>
     370:	mvn	lr, #0
     374:	str	lr, [fp, #-4]
     378:	str	r0, [sp, #44]	; 0x2c
     37c:	b	838 <verify_monster+0x838>
     380:	ldr	r0, [fp, #-48]	; 0xffffffd0
     384:	bl	10dc <flatbuffers_string_vec_len>
     388:	cmp	r0, #2
     38c:	beq	3ac <verify_monster+0x3ac>
     390:	movw	r0, #0
     394:	movt	r0, #0
     398:	bl	0 <printf>
     39c:	mvn	lr, #0
     3a0:	str	lr, [fp, #-4]
     3a4:	str	r0, [sp, #40]	; 0x28
     3a8:	b	838 <verify_monster+0x838>
     3ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
     3b0:	movw	r1, #0
     3b4:	bl	112c <flatbuffers_string_vec_at>
     3b8:	str	r0, [fp, #-52]	; 0xffffffcc
     3bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
     3c0:	movw	r1, #0
     3c4:	movt	r1, #0
     3c8:	bl	0 <strcmp>
     3cc:	cmp	r0, #0
     3d0:	beq	3f0 <verify_monster+0x3f0>
     3d4:	movw	r0, #0
     3d8:	movt	r0, #0
     3dc:	bl	0 <printf>
     3e0:	mvn	lr, #0
     3e4:	str	lr, [fp, #-4]
     3e8:	str	r0, [sp, #36]	; 0x24
     3ec:	b	838 <verify_monster+0x838>
     3f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
     3f4:	movw	r1, #1
     3f8:	bl	112c <flatbuffers_string_vec_at>
     3fc:	str	r0, [fp, #-52]	; 0xffffffcc
     400:	ldr	r0, [fp, #-52]	; 0xffffffcc
     404:	movw	r1, #0
     408:	movt	r1, #0
     40c:	bl	0 <strcmp>
     410:	cmp	r0, #0
     414:	beq	434 <verify_monster+0x434>
     418:	movw	r0, #0
     41c:	movt	r0, #0
     420:	bl	0 <printf>
     424:	mvn	lr, #0
     428:	str	lr, [fp, #-4]
     42c:	str	r0, [sp, #32]
     430:	b	838 <verify_monster+0x838>
     434:	ldr	r0, [fp, #-12]
     438:	bl	11b4 <MyGame_Example_Monster_test_type>
     43c:	strb	r0, [fp, #-29]	; 0xffffffe3
     440:	ldrb	r0, [fp, #-29]	; 0xffffffe3
     444:	cmp	r0, #1
     448:	beq	468 <verify_monster+0x468>
     44c:	movw	r0, #0
     450:	movt	r0, #0
     454:	bl	0 <printf>
     458:	mvn	lr, #0
     45c:	str	lr, [fp, #-4]
     460:	str	r0, [sp, #28]
     464:	b	838 <verify_monster+0x838>
     468:	ldr	r0, [fp, #-12]
     46c:	bl	129c <MyGame_Example_Monster_test>
     470:	str	r0, [fp, #-16]
     474:	ldr	r0, [fp, #-16]
     478:	movw	lr, #0
     47c:	cmp	r0, lr
     480:	bne	4a0 <verify_monster+0x4a0>
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	bl	0 <printf>
     490:	mvn	lr, #0
     494:	str	lr, [fp, #-4]
     498:	str	r0, [sp, #24]
     49c:	b	838 <verify_monster+0x838>
     4a0:	ldr	r0, [fp, #-16]
     4a4:	bl	d00 <MyGame_Example_Monster_name>
     4a8:	movw	r1, #0
     4ac:	movt	r1, #0
     4b0:	bl	0 <strcmp>
     4b4:	cmp	r0, #0
     4b8:	beq	4d8 <verify_monster+0x4d8>
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	bl	0 <printf>
     4c8:	mvn	lr, #0
     4cc:	str	lr, [fp, #-4]
     4d0:	str	r0, [sp, #20]
     4d4:	b	838 <verify_monster+0x838>
     4d8:	ldr	r0, [fp, #-12]
     4dc:	bl	1394 <MyGame_Example_Monster_test4>
     4e0:	str	r0, [fp, #-28]	; 0xffffffe4
     4e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     4e8:	bl	1490 <MyGame_Example_Test_vec_len>
     4ec:	cmp	r0, #2
     4f0:	beq	510 <verify_monster+0x510>
     4f4:	movw	r0, #0
     4f8:	movt	r0, #0
     4fc:	bl	0 <printf>
     500:	mvn	lr, #0
     504:	str	lr, [fp, #-4]
     508:	str	r0, [sp, #16]
     50c:	b	838 <verify_monster+0x838>
     510:	ldr	r0, [fp, #-28]	; 0xffffffe4
     514:	movw	r1, #0
     518:	bl	14e0 <MyGame_Example_Test_vec_at>
     51c:	str	r0, [fp, #-24]	; 0xffffffe8
     520:	ldr	r0, [fp, #-24]	; 0xffffffe8
     524:	bl	c5c <MyGame_Example_Test_a>
     528:	sxth	r0, r0
     52c:	cmp	r0, #10
     530:	beq	550 <verify_monster+0x550>
     534:	movw	r0, #0
     538:	movt	r0, #0
     53c:	bl	0 <printf>
     540:	mvn	lr, #0
     544:	str	lr, [fp, #-4]
     548:	str	r0, [sp, #12]
     54c:	b	838 <verify_monster+0x838>
     550:	ldr	r0, [fp, #-24]	; 0xffffffe8
     554:	bl	cac <MyGame_Example_Test_b>
     558:	sxtb	r0, r0
     55c:	cmp	r0, #20
     560:	beq	580 <verify_monster+0x580>
     564:	movw	r0, #0
     568:	movt	r0, #0
     56c:	bl	0 <printf>
     570:	mvn	lr, #0
     574:	str	lr, [fp, #-4]
     578:	str	r0, [sp, #8]
     57c:	b	838 <verify_monster+0x838>
     580:	ldr	r0, [fp, #-28]	; 0xffffffe4
     584:	movw	r1, #1
     588:	bl	14e0 <MyGame_Example_Test_vec_at>
     58c:	str	r0, [fp, #-24]	; 0xffffffe8
     590:	ldr	r0, [fp, #-24]	; 0xffffffe8
     594:	bl	c5c <MyGame_Example_Test_a>
     598:	sxth	r0, r0
     59c:	cmp	r0, #30
     5a0:	beq	5c0 <verify_monster+0x5c0>
     5a4:	movw	r0, #0
     5a8:	movt	r0, #0
     5ac:	bl	0 <printf>
     5b0:	mvn	lr, #0
     5b4:	str	lr, [fp, #-4]
     5b8:	str	r0, [sp, #4]
     5bc:	b	838 <verify_monster+0x838>
     5c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     5c4:	bl	cac <MyGame_Example_Test_b>
     5c8:	sxtb	r0, r0
     5cc:	cmp	r0, #40	; 0x28
     5d0:	beq	5f0 <verify_monster+0x5f0>
     5d4:	movw	r0, #0
     5d8:	movt	r0, #0
     5dc:	bl	0 <printf>
     5e0:	mvn	lr, #0
     5e4:	str	lr, [fp, #-4]
     5e8:	str	r0, [sp]
     5ec:	b	838 <verify_monster+0x838>
     5f0:	ldr	r0, [fp, #-12]
     5f4:	bl	1544 <MyGame_Example_Monster_testhashs32_fnv1>
     5f8:	ldr	lr, [pc, #580]	; 844 <verify_monster+0x844>
     5fc:	cmp	r0, lr
     600:	bne	608 <verify_monster+0x608>
     604:	b	628 <verify_monster+0x628>
     608:	movw	r0, #0
     60c:	movt	r0, #0
     610:	movw	r1, #0
     614:	movt	r1, #0
     618:	movw	r2, #148	; 0x94
     61c:	movw	r3, #0
     620:	movt	r3, #0
     624:	bl	0 <__assert_fail>
     628:	ldr	r0, [fp, #-12]
     62c:	bl	1624 <MyGame_Example_Monster_testhashu32_fnv1>
     630:	movw	lr, #51521	; 0xc941
     634:	movt	lr, #56697	; 0xdd79
     638:	cmp	r0, lr
     63c:	bne	648 <verify_monster+0x648>
     640:	b	644 <verify_monster+0x644>
     644:	b	668 <verify_monster+0x668>
     648:	movw	r0, #0
     64c:	movt	r0, #0
     650:	movw	r1, #0
     654:	movt	r1, #0
     658:	movw	r2, #149	; 0x95
     65c:	movw	r3, #0
     660:	movt	r3, #0
     664:	bl	0 <__assert_fail>
     668:	ldr	r0, [fp, #-12]
     66c:	bl	1704 <MyGame_Example_Monster_testhashs64_fnv1>
     670:	movw	lr, #32973	; 0x80cd
     674:	movt	lr, #28175	; 0x6e0f
     678:	eor	r1, r1, lr
     67c:	movw	lr, #37249	; 0x9181
     680:	movt	lr, #62075	; 0xf27b
     684:	eor	r0, r0, lr
     688:	orr	r0, r0, r1
     68c:	cmp	r0, #0
     690:	bne	69c <verify_monster+0x69c>
     694:	b	698 <verify_monster+0x698>
     698:	b	6bc <verify_monster+0x6bc>
     69c:	movw	r0, #0
     6a0:	movt	r0, #0
     6a4:	movw	r1, #0
     6a8:	movt	r1, #0
     6ac:	movw	r2, #150	; 0x96
     6b0:	movw	r3, #0
     6b4:	movt	r3, #0
     6b8:	bl	0 <__assert_fail>
     6bc:	ldr	r0, [fp, #-12]
     6c0:	bl	1800 <MyGame_Example_Monster_testhashu64_fnv1>
     6c4:	movw	lr, #32973	; 0x80cd
     6c8:	movt	lr, #28175	; 0x6e0f
     6cc:	eor	r1, r1, lr
     6d0:	movw	lr, #37249	; 0x9181
     6d4:	movt	lr, #62075	; 0xf27b
     6d8:	eor	r0, r0, lr
     6dc:	orr	r0, r0, r1
     6e0:	cmp	r0, #0
     6e4:	bne	6f0 <verify_monster+0x6f0>
     6e8:	b	6ec <verify_monster+0x6ec>
     6ec:	b	710 <verify_monster+0x710>
     6f0:	movw	r0, #0
     6f4:	movt	r0, #0
     6f8:	movw	r1, #0
     6fc:	movt	r1, #0
     700:	movw	r2, #151	; 0x97
     704:	movw	r3, #0
     708:	movt	r3, #0
     70c:	bl	0 <__assert_fail>
     710:	ldr	r0, [fp, #-12]
     714:	bl	18fc <MyGame_Example_Monster_testhashs32_fnv1a>
     718:	ldr	lr, [pc, #296]	; 848 <verify_monster+0x848>
     71c:	cmp	r0, lr
     720:	bne	728 <verify_monster+0x728>
     724:	b	748 <verify_monster+0x748>
     728:	movw	r0, #0
     72c:	movt	r0, #0
     730:	movw	r1, #0
     734:	movt	r1, #0
     738:	movw	r2, #152	; 0x98
     73c:	movw	r3, #0
     740:	movt	r3, #0
     744:	bl	0 <__assert_fail>
     748:	ldr	r0, [fp, #-12]
     74c:	bl	19dc <MyGame_Example_Monster_testhashu32_fnv1a>
     750:	movw	lr, #42097	; 0xa471
     754:	movt	lr, #36481	; 0x8e81
     758:	cmp	r0, lr
     75c:	bne	768 <verify_monster+0x768>
     760:	b	764 <verify_monster+0x764>
     764:	b	788 <verify_monster+0x788>
     768:	movw	r0, #0
     76c:	movt	r0, #0
     770:	movw	r1, #0
     774:	movt	r1, #0
     778:	movw	r2, #153	; 0x99
     77c:	movw	r3, #0
     780:	movt	r3, #0
     784:	bl	0 <__assert_fail>
     788:	ldr	r0, [fp, #-12]
     78c:	bl	1abc <MyGame_Example_Monster_testhashs64_fnv1a>
     790:	movw	lr, #18652	; 0x48dc
     794:	movt	lr, #17401	; 0x43f9
     798:	eor	r1, r1, lr
     79c:	movw	lr, #56817	; 0xddf1
     7a0:	movt	lr, #51047	; 0xc767
     7a4:	eor	r0, r0, lr
     7a8:	orr	r0, r0, r1
     7ac:	cmp	r0, #0
     7b0:	bne	7bc <verify_monster+0x7bc>
     7b4:	b	7b8 <verify_monster+0x7b8>
     7b8:	b	7dc <verify_monster+0x7dc>
     7bc:	movw	r0, #0
     7c0:	movt	r0, #0
     7c4:	movw	r1, #0
     7c8:	movt	r1, #0
     7cc:	movw	r2, #154	; 0x9a
     7d0:	movw	r3, #0
     7d4:	movt	r3, #0
     7d8:	bl	0 <__assert_fail>
     7dc:	ldr	r0, [fp, #-12]
     7e0:	bl	1bb8 <MyGame_Example_Monster_testhashu64_fnv1a>
     7e4:	movw	lr, #18652	; 0x48dc
     7e8:	movt	lr, #17401	; 0x43f9
     7ec:	eor	r1, r1, lr
     7f0:	movw	lr, #56817	; 0xddf1
     7f4:	movt	lr, #51047	; 0xc767
     7f8:	eor	r0, r0, lr
     7fc:	orr	r0, r0, r1
     800:	cmp	r0, #0
     804:	bne	810 <verify_monster+0x810>
     808:	b	80c <verify_monster+0x80c>
     80c:	b	830 <verify_monster+0x830>
     810:	movw	r0, #0
     814:	movt	r0, #0
     818:	movw	r1, #0
     81c:	movt	r1, #0
     820:	movw	r2, #155	; 0x9b
     824:	movw	r3, #0
     828:	movt	r3, #0
     82c:	bl	0 <__assert_fail>
     830:	movw	r0, #0
     834:	str	r0, [fp, #-4]
     838:	ldr	r0, [fp, #-4]
     83c:	mov	sp, fp
     840:	pop	{fp, pc}
     844:	.word	0xdd79c941
     848:	.word	0x8e81a471

0000084c <MyGame_Example_Monster_as_root>:
     84c:	push	{fp, lr}
     850:	mov	fp, sp
     854:	sub	sp, sp, #16
     858:	str	r0, [fp, #-4]
     85c:	movw	r0, #0
     860:	movt	r0, #0
     864:	str	r0, [sp, #8]
     868:	ldr	r0, [fp, #-4]
     86c:	movw	r1, #0
     870:	cmp	r0, r1
     874:	beq	88c <MyGame_Example_Monster_as_root+0x40>
     878:	ldr	r0, [fp, #-4]
     87c:	ldr	r1, [sp, #8]
     880:	bl	2364 <flatbuffers_has_identifier>
     884:	cmp	r0, #0
     888:	bne	898 <MyGame_Example_Monster_as_root+0x4c>
     88c:	movw	r0, #0
     890:	str	r0, [sp, #4]
     894:	b	8b8 <MyGame_Example_Monster_as_root+0x6c>
     898:	ldr	r0, [fp, #-4]
     89c:	ldr	r1, [fp, #-4]
     8a0:	str	r0, [sp]
     8a4:	mov	r0, r1
     8a8:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
     8ac:	ldr	r1, [sp]
     8b0:	add	r0, r1, r0
     8b4:	str	r0, [sp, #4]
     8b8:	ldr	r0, [sp, #4]
     8bc:	mov	sp, fp
     8c0:	pop	{fp, pc}

000008c4 <MyGame_Example_Monster_hp>:
     8c4:	push	{fp, lr}
     8c8:	mov	fp, sp
     8cc:	sub	sp, sp, #24
     8d0:	str	r0, [fp, #-4]
     8d4:	movw	r0, #0
     8d8:	strh	r0, [fp, #-6]
     8dc:	ldr	r0, [fp, #-4]
     8e0:	movw	r1, #0
     8e4:	cmp	r0, r1
     8e8:	beq	8f4 <MyGame_Example_Monster_hp+0x30>
     8ec:	b	8f0 <MyGame_Example_Monster_hp+0x2c>
     8f0:	b	914 <MyGame_Example_Monster_hp+0x50>
     8f4:	movw	r0, #0
     8f8:	movt	r0, #0
     8fc:	movw	r1, #0
     900:	movt	r1, #0
     904:	movw	r2, #697	; 0x2b9
     908:	movw	r3, #0
     90c:	movt	r3, #0
     910:	bl	0 <__assert_fail>
     914:	mov	r0, #2
     918:	strh	r0, [fp, #-8]
     91c:	ldr	r0, [fp, #-4]
     920:	str	r0, [sp, #8]
     924:	bl	2494 <__flatbuffers_soffset_read_from_pe>
     928:	ldr	lr, [sp, #8]
     92c:	sub	r0, lr, r0
     930:	str	r0, [sp, #12]
     934:	ldr	r0, [sp, #12]
     938:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     93c:	ldrh	lr, [fp, #-8]
     940:	add	lr, lr, #3
     944:	lsl	lr, lr, #1
     948:	cmp	r0, lr
     94c:	bcc	968 <MyGame_Example_Monster_hp+0xa4>
     950:	ldr	r0, [sp, #12]
     954:	ldrh	r1, [fp, #-8]
     958:	add	r0, r0, r1, lsl #1
     95c:	add	r0, r0, #4
     960:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     964:	strh	r0, [fp, #-6]
     968:	ldrh	r0, [fp, #-6]
     96c:	cmp	r0, #0
     970:	beq	990 <MyGame_Example_Monster_hp+0xcc>
     974:	ldr	r0, [fp, #-4]
     978:	ldrh	r1, [fp, #-6]
     97c:	add	r0, r0, r1
     980:	bl	24e0 <flatbuffers_int16_read_from_pe>
     984:	sxth	r0, r0
     988:	str	r0, [sp, #4]
     98c:	b	99c <MyGame_Example_Monster_hp+0xd8>
     990:	movw	r0, #100	; 0x64
     994:	str	r0, [sp, #4]
     998:	b	99c <MyGame_Example_Monster_hp+0xd8>
     99c:	ldr	r0, [sp, #4]
     9a0:	sxth	r0, r0
     9a4:	mov	sp, fp
     9a8:	pop	{fp, pc}

000009ac <MyGame_Example_Monster_pos>:
     9ac:	push	{fp, lr}
     9b0:	mov	fp, sp
     9b4:	sub	sp, sp, #24
     9b8:	str	r0, [fp, #-8]
     9bc:	movw	r0, #0
     9c0:	strh	r0, [fp, #-10]
     9c4:	ldr	r0, [fp, #-8]
     9c8:	movw	r1, #0
     9cc:	cmp	r0, r1
     9d0:	beq	9dc <MyGame_Example_Monster_pos+0x30>
     9d4:	b	9d8 <MyGame_Example_Monster_pos+0x2c>
     9d8:	b	9fc <MyGame_Example_Monster_pos+0x50>
     9dc:	movw	r0, #0
     9e0:	movt	r0, #0
     9e4:	movw	r1, #0
     9e8:	movt	r1, #0
     9ec:	movw	r2, #696	; 0x2b8
     9f0:	movw	r3, #0
     9f4:	movt	r3, #0
     9f8:	bl	0 <__assert_fail>
     9fc:	mov	r0, #0
     a00:	strh	r0, [sp, #12]
     a04:	ldr	r0, [fp, #-8]
     a08:	str	r0, [sp, #4]
     a0c:	bl	2494 <__flatbuffers_soffset_read_from_pe>
     a10:	ldr	lr, [sp, #4]
     a14:	sub	r0, lr, r0
     a18:	str	r0, [sp, #8]
     a1c:	ldr	r0, [sp, #8]
     a20:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     a24:	ldrh	lr, [sp, #12]
     a28:	add	lr, lr, #3
     a2c:	lsl	lr, lr, #1
     a30:	cmp	r0, lr
     a34:	bcc	a50 <MyGame_Example_Monster_pos+0xa4>
     a38:	ldr	r0, [sp, #8]
     a3c:	ldrh	r1, [sp, #12]
     a40:	add	r0, r0, r1, lsl #1
     a44:	add	r0, r0, #4
     a48:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     a4c:	strh	r0, [fp, #-10]
     a50:	ldrsh	r0, [fp, #-10]
     a54:	cmp	r0, #0
     a58:	beq	a70 <MyGame_Example_Monster_pos+0xc4>
     a5c:	ldr	r0, [fp, #-8]
     a60:	ldrh	r1, [fp, #-10]
     a64:	add	r0, r0, r1
     a68:	str	r0, [fp, #-4]
     a6c:	b	a78 <MyGame_Example_Monster_pos+0xcc>
     a70:	movw	r0, #0
     a74:	str	r0, [fp, #-4]
     a78:	ldr	r0, [fp, #-4]
     a7c:	mov	sp, fp
     a80:	pop	{fp, pc}

00000a84 <MyGame_Example_Vec3_x>:
     a84:	push	{fp, lr}
     a88:	mov	fp, sp
     a8c:	sub	sp, sp, #8
     a90:	str	r0, [sp, #4]
     a94:	ldr	r0, [sp, #4]
     a98:	movw	r1, #0
     a9c:	cmp	r0, r1
     aa0:	beq	ab4 <MyGame_Example_Vec3_x+0x30>
     aa4:	ldr	r0, [sp, #4]
     aa8:	bl	2544 <flatbuffers_float_read_from_pe>
     aac:	vstr	s0, [sp]
     ab0:	b	ac0 <MyGame_Example_Vec3_x+0x3c>
     ab4:	vldr	s0, [pc, #16]	; acc <MyGame_Example_Vec3_x+0x48>
     ab8:	vstr	s0, [sp]
     abc:	b	ac0 <MyGame_Example_Vec3_x+0x3c>
     ac0:	vldr	s0, [sp]
     ac4:	mov	sp, fp
     ac8:	pop	{fp, pc}
     acc:	.word	0x00000000

00000ad0 <MyGame_Example_Vec3_y>:
     ad0:	push	{fp, lr}
     ad4:	mov	fp, sp
     ad8:	sub	sp, sp, #8
     adc:	str	r0, [sp, #4]
     ae0:	ldr	r0, [sp, #4]
     ae4:	movw	r1, #0
     ae8:	cmp	r0, r1
     aec:	beq	b04 <MyGame_Example_Vec3_y+0x34>
     af0:	ldr	r0, [sp, #4]
     af4:	add	r0, r0, #4
     af8:	bl	2544 <flatbuffers_float_read_from_pe>
     afc:	vstr	s0, [sp]
     b00:	b	b10 <MyGame_Example_Vec3_y+0x40>
     b04:	vldr	s0, [pc, #16]	; b1c <MyGame_Example_Vec3_y+0x4c>
     b08:	vstr	s0, [sp]
     b0c:	b	b10 <MyGame_Example_Vec3_y+0x40>
     b10:	vldr	s0, [sp]
     b14:	mov	sp, fp
     b18:	pop	{fp, pc}
     b1c:	.word	0x00000000

00000b20 <MyGame_Example_Vec3_z>:
     b20:	push	{fp, lr}
     b24:	mov	fp, sp
     b28:	sub	sp, sp, #8
     b2c:	str	r0, [sp, #4]
     b30:	ldr	r0, [sp, #4]
     b34:	movw	r1, #0
     b38:	cmp	r0, r1
     b3c:	beq	b54 <MyGame_Example_Vec3_z+0x34>
     b40:	ldr	r0, [sp, #4]
     b44:	add	r0, r0, #8
     b48:	bl	2544 <flatbuffers_float_read_from_pe>
     b4c:	vstr	s0, [sp]
     b50:	b	b60 <MyGame_Example_Vec3_z+0x40>
     b54:	vldr	s0, [pc, #16]	; b6c <MyGame_Example_Vec3_z+0x4c>
     b58:	vstr	s0, [sp]
     b5c:	b	b60 <MyGame_Example_Vec3_z+0x40>
     b60:	vldr	s0, [sp]
     b64:	mov	sp, fp
     b68:	pop	{fp, pc}
     b6c:	.word	0x00000000

00000b70 <MyGame_Example_Vec3_test1>:
     b70:	push	{fp, lr}
     b74:	mov	fp, sp
     b78:	sub	sp, sp, #16
     b7c:	str	r0, [fp, #-4]
     b80:	ldr	r0, [fp, #-4]
     b84:	movw	r1, #0
     b88:	cmp	r0, r1
     b8c:	beq	ba4 <MyGame_Example_Vec3_test1+0x34>
     b90:	ldr	r0, [fp, #-4]
     b94:	add	r0, r0, #16
     b98:	bl	258c <flatbuffers_double_read_from_pe>
     b9c:	vstr	d0, [sp]
     ba0:	b	bb0 <MyGame_Example_Vec3_test1+0x40>
     ba4:	vldr	d16, [pc, #20]	; bc0 <MyGame_Example_Vec3_test1+0x50>
     ba8:	vstr	d16, [sp]
     bac:	b	bb0 <MyGame_Example_Vec3_test1+0x40>
     bb0:	vldr	d16, [sp]
     bb4:	vmov.f64	d0, d16
     bb8:	mov	sp, fp
     bbc:	pop	{fp, pc}
	...

00000bc8 <MyGame_Example_Vec3_test2>:
     bc8:	push	{fp, lr}
     bcc:	mov	fp, sp
     bd0:	sub	sp, sp, #8
     bd4:	str	r0, [sp, #4]
     bd8:	ldr	r0, [sp, #4]
     bdc:	movw	r1, #0
     be0:	cmp	r0, r1
     be4:	beq	c00 <MyGame_Example_Vec3_test2+0x38>
     be8:	ldr	r0, [sp, #4]
     bec:	add	r0, r0, #24
     bf0:	bl	25cc <MyGame_Example_Color_read_from_pe>
     bf4:	sxtb	r0, r0
     bf8:	str	r0, [sp]
     bfc:	b	c0c <MyGame_Example_Vec3_test2+0x44>
     c00:	movw	r0, #0
     c04:	str	r0, [sp]
     c08:	b	c0c <MyGame_Example_Vec3_test2+0x44>
     c0c:	ldr	r0, [sp]
     c10:	sxtb	r0, r0
     c14:	mov	sp, fp
     c18:	pop	{fp, pc}

00000c1c <MyGame_Example_Vec3_test3>:
     c1c:	sub	sp, sp, #8
     c20:	str	r0, [sp, #4]
     c24:	ldr	r0, [sp, #4]
     c28:	movw	r1, #0
     c2c:	cmp	r0, r1
     c30:	beq	c44 <MyGame_Example_Vec3_test3+0x28>
     c34:	ldr	r0, [sp, #4]
     c38:	add	r0, r0, #26
     c3c:	str	r0, [sp]
     c40:	b	c50 <MyGame_Example_Vec3_test3+0x34>
     c44:	movw	r0, #0
     c48:	str	r0, [sp]
     c4c:	b	c50 <MyGame_Example_Vec3_test3+0x34>
     c50:	ldr	r0, [sp]
     c54:	add	sp, sp, #8
     c58:	bx	lr

00000c5c <MyGame_Example_Test_a>:
     c5c:	push	{fp, lr}
     c60:	mov	fp, sp
     c64:	sub	sp, sp, #8
     c68:	str	r0, [sp, #4]
     c6c:	ldr	r0, [sp, #4]
     c70:	movw	r1, #0
     c74:	cmp	r0, r1
     c78:	beq	c90 <MyGame_Example_Test_a+0x34>
     c7c:	ldr	r0, [sp, #4]
     c80:	bl	24e0 <flatbuffers_int16_read_from_pe>
     c84:	sxth	r0, r0
     c88:	str	r0, [sp]
     c8c:	b	c9c <MyGame_Example_Test_a+0x40>
     c90:	movw	r0, #0
     c94:	str	r0, [sp]
     c98:	b	c9c <MyGame_Example_Test_a+0x40>
     c9c:	ldr	r0, [sp]
     ca0:	sxth	r0, r0
     ca4:	mov	sp, fp
     ca8:	pop	{fp, pc}

00000cac <MyGame_Example_Test_b>:
     cac:	push	{fp, lr}
     cb0:	mov	fp, sp
     cb4:	sub	sp, sp, #8
     cb8:	str	r0, [sp, #4]
     cbc:	ldr	r0, [sp, #4]
     cc0:	movw	r1, #0
     cc4:	cmp	r0, r1
     cc8:	beq	ce4 <MyGame_Example_Test_b+0x38>
     ccc:	ldr	r0, [sp, #4]
     cd0:	add	r0, r0, #2
     cd4:	bl	2608 <flatbuffers_int8_read_from_pe>
     cd8:	sxtb	r0, r0
     cdc:	str	r0, [sp]
     ce0:	b	cf0 <MyGame_Example_Test_b+0x44>
     ce4:	movw	r0, #0
     ce8:	str	r0, [sp]
     cec:	b	cf0 <MyGame_Example_Test_b+0x44>
     cf0:	ldr	r0, [sp]
     cf4:	sxtb	r0, r0
     cf8:	mov	sp, fp
     cfc:	pop	{fp, pc}

00000d00 <MyGame_Example_Monster_name>:
     d00:	push	{fp, lr}
     d04:	mov	fp, sp
     d08:	sub	sp, sp, #24
     d0c:	str	r0, [fp, #-4]
     d10:	movw	r0, #0
     d14:	strh	r0, [fp, #-10]
     d18:	ldr	r0, [fp, #-4]
     d1c:	movw	r1, #0
     d20:	cmp	r0, r1
     d24:	beq	d30 <MyGame_Example_Monster_name+0x30>
     d28:	b	d2c <MyGame_Example_Monster_name+0x2c>
     d2c:	b	d50 <MyGame_Example_Monster_name+0x50>
     d30:	movw	r0, #0
     d34:	movt	r0, #0
     d38:	movw	r1, #0
     d3c:	movt	r1, #0
     d40:	movw	r2, #699	; 0x2bb
     d44:	movw	r3, #0
     d48:	movt	r3, #0
     d4c:	bl	0 <__assert_fail>
     d50:	mov	r0, #3
     d54:	strh	r0, [sp, #12]
     d58:	ldr	r0, [fp, #-4]
     d5c:	str	r0, [sp, #4]
     d60:	bl	2494 <__flatbuffers_soffset_read_from_pe>
     d64:	ldr	lr, [sp, #4]
     d68:	sub	r0, lr, r0
     d6c:	str	r0, [sp, #8]
     d70:	ldr	r0, [sp, #8]
     d74:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     d78:	ldrh	lr, [sp, #12]
     d7c:	add	lr, lr, #3
     d80:	lsl	lr, lr, #1
     d84:	cmp	r0, lr
     d88:	bcc	da4 <MyGame_Example_Monster_name+0xa4>
     d8c:	ldr	r0, [sp, #8]
     d90:	ldrh	r1, [sp, #12]
     d94:	add	r0, r0, r1, lsl #1
     d98:	add	r0, r0, #4
     d9c:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     da0:	strh	r0, [fp, #-10]
     da4:	ldrsh	r0, [fp, #-10]
     da8:	cmp	r0, #0
     dac:	beq	de8 <MyGame_Example_Monster_name+0xe8>
     db0:	ldr	r0, [fp, #-4]
     db4:	ldrh	r1, [fp, #-10]
     db8:	add	r0, r0, r1
     dbc:	str	r0, [fp, #-8]
     dc0:	ldr	r0, [fp, #-8]
     dc4:	add	r0, r0, #4
     dc8:	ldr	r1, [fp, #-8]
     dcc:	str	r0, [sp]
     dd0:	mov	r0, r1
     dd4:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
     dd8:	ldr	r1, [sp]
     ddc:	add	r0, r1, r0
     de0:	mov	sp, fp
     de4:	pop	{fp, pc}
     de8:	movw	r0, #0
     dec:	movt	r0, #0
     df0:	movw	r1, #0
     df4:	movt	r1, #0
     df8:	movw	r2, #699	; 0x2bb
     dfc:	movw	r3, #0
     e00:	movt	r3, #0
     e04:	bl	0 <__assert_fail>

00000e08 <flatbuffers_string_len>:
     e08:	push	{fp, lr}
     e0c:	mov	fp, sp
     e10:	sub	sp, sp, #8
     e14:	str	r0, [sp, #4]
     e18:	ldr	r0, [sp, #4]
     e1c:	movw	r1, #0
     e20:	cmp	r0, r1
     e24:	beq	e40 <flatbuffers_string_len+0x38>
     e28:	ldr	r0, [sp, #4]
     e2c:	mvn	r1, #3
     e30:	add	r0, r0, r1
     e34:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
     e38:	str	r0, [sp]
     e3c:	b	e4c <flatbuffers_string_len+0x44>
     e40:	movw	r0, #0
     e44:	str	r0, [sp]
     e48:	b	e4c <flatbuffers_string_len+0x44>
     e4c:	ldr	r0, [sp]
     e50:	mov	sp, fp
     e54:	pop	{fp, pc}

00000e58 <MyGame_Example_Monster_inventory>:
     e58:	push	{fp, lr}
     e5c:	mov	fp, sp
     e60:	sub	sp, sp, #32
     e64:	str	r0, [fp, #-8]
     e68:	movw	r0, #0
     e6c:	strh	r0, [fp, #-14]
     e70:	ldr	r0, [fp, #-8]
     e74:	movw	r1, #0
     e78:	cmp	r0, r1
     e7c:	beq	e88 <MyGame_Example_Monster_inventory+0x30>
     e80:	b	e84 <MyGame_Example_Monster_inventory+0x2c>
     e84:	b	ea8 <MyGame_Example_Monster_inventory+0x50>
     e88:	movw	r0, #0
     e8c:	movt	r0, #0
     e90:	movw	r1, #0
     e94:	movt	r1, #0
     e98:	movw	r2, #706	; 0x2c2
     e9c:	movw	r3, #0
     ea0:	movt	r3, #0
     ea4:	bl	0 <__assert_fail>
     ea8:	mov	r0, #5
     eac:	strh	r0, [sp, #16]
     eb0:	ldr	r0, [fp, #-8]
     eb4:	str	r0, [sp, #8]
     eb8:	bl	2494 <__flatbuffers_soffset_read_from_pe>
     ebc:	ldr	lr, [sp, #8]
     ec0:	sub	r0, lr, r0
     ec4:	str	r0, [sp, #12]
     ec8:	ldr	r0, [sp, #12]
     ecc:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     ed0:	ldrh	lr, [sp, #16]
     ed4:	add	lr, lr, #3
     ed8:	lsl	lr, lr, #1
     edc:	cmp	r0, lr
     ee0:	bcc	efc <MyGame_Example_Monster_inventory+0xa4>
     ee4:	ldr	r0, [sp, #12]
     ee8:	ldrh	r1, [sp, #16]
     eec:	add	r0, r0, r1, lsl #1
     ef0:	add	r0, r0, #4
     ef4:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
     ef8:	strh	r0, [fp, #-14]
     efc:	ldrsh	r0, [fp, #-14]
     f00:	cmp	r0, #0
     f04:	beq	f40 <MyGame_Example_Monster_inventory+0xe8>
     f08:	ldr	r0, [fp, #-8]
     f0c:	ldrh	r1, [fp, #-14]
     f10:	add	r0, r0, r1
     f14:	str	r0, [fp, #-12]
     f18:	ldr	r0, [fp, #-12]
     f1c:	add	r0, r0, #4
     f20:	ldr	r1, [fp, #-12]
     f24:	str	r0, [sp, #4]
     f28:	mov	r0, r1
     f2c:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
     f30:	ldr	r1, [sp, #4]
     f34:	add	r0, r1, r0
     f38:	str	r0, [fp, #-4]
     f3c:	b	f48 <MyGame_Example_Monster_inventory+0xf0>
     f40:	movw	r0, #0
     f44:	str	r0, [fp, #-4]
     f48:	ldr	r0, [fp, #-4]
     f4c:	mov	sp, fp
     f50:	pop	{fp, pc}

00000f54 <flatbuffers_uint8_vec_len>:
     f54:	push	{fp, lr}
     f58:	mov	fp, sp
     f5c:	sub	sp, sp, #8
     f60:	str	r0, [sp, #4]
     f64:	ldr	r0, [sp, #4]
     f68:	bl	2644 <flatbuffers_vec_len>
     f6c:	mov	sp, fp
     f70:	pop	{fp, pc}

00000f74 <flatbuffers_uint8_vec_at>:
     f74:	push	{fp, lr}
     f78:	mov	fp, sp
     f7c:	sub	sp, sp, #8
     f80:	str	r0, [sp, #4]
     f84:	str	r1, [sp]
     f88:	ldr	r0, [sp, #4]
     f8c:	bl	2644 <flatbuffers_vec_len>
     f90:	ldr	r1, [sp]
     f94:	cmp	r0, r1
     f98:	bls	fa4 <flatbuffers_uint8_vec_at+0x30>
     f9c:	b	fa0 <flatbuffers_uint8_vec_at+0x2c>
     fa0:	b	fc4 <flatbuffers_uint8_vec_at+0x50>
     fa4:	movw	r0, #0
     fa8:	movt	r0, #0
     fac:	movw	r1, #0
     fb0:	movt	r1, #0
     fb4:	movw	r2, #395	; 0x18b
     fb8:	movw	r3, #0
     fbc:	movt	r3, #0
     fc0:	bl	0 <__assert_fail>
     fc4:	ldr	r0, [sp, #4]
     fc8:	ldr	r1, [sp]
     fcc:	add	r0, r0, r1
     fd0:	bl	2694 <flatbuffers_uint8_read_from_pe>
     fd4:	and	r0, r0, #255	; 0xff
     fd8:	mov	sp, fp
     fdc:	pop	{fp, pc}

00000fe0 <MyGame_Example_Monster_testarrayofstring>:
     fe0:	push	{fp, lr}
     fe4:	mov	fp, sp
     fe8:	sub	sp, sp, #32
     fec:	str	r0, [fp, #-8]
     ff0:	movw	r0, #0
     ff4:	strh	r0, [fp, #-14]
     ff8:	ldr	r0, [fp, #-8]
     ffc:	movw	r1, #0
    1000:	cmp	r0, r1
    1004:	beq	1010 <MyGame_Example_Monster_testarrayofstring+0x30>
    1008:	b	100c <MyGame_Example_Monster_testarrayofstring+0x2c>
    100c:	b	1030 <MyGame_Example_Monster_testarrayofstring+0x50>
    1010:	movw	r0, #0
    1014:	movt	r0, #0
    1018:	movw	r1, #0
    101c:	movt	r1, #0
    1020:	movw	r2, #712	; 0x2c8
    1024:	movw	r3, #0
    1028:	movt	r3, #0
    102c:	bl	0 <__assert_fail>
    1030:	mov	r0, #10
    1034:	strh	r0, [sp, #16]
    1038:	ldr	r0, [fp, #-8]
    103c:	str	r0, [sp, #8]
    1040:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1044:	ldr	lr, [sp, #8]
    1048:	sub	r0, lr, r0
    104c:	str	r0, [sp, #12]
    1050:	ldr	r0, [sp, #12]
    1054:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1058:	ldrh	lr, [sp, #16]
    105c:	add	lr, lr, #3
    1060:	lsl	lr, lr, #1
    1064:	cmp	r0, lr
    1068:	bcc	1084 <MyGame_Example_Monster_testarrayofstring+0xa4>
    106c:	ldr	r0, [sp, #12]
    1070:	ldrh	r1, [sp, #16]
    1074:	add	r0, r0, r1, lsl #1
    1078:	add	r0, r0, #4
    107c:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1080:	strh	r0, [fp, #-14]
    1084:	ldrsh	r0, [fp, #-14]
    1088:	cmp	r0, #0
    108c:	beq	10c8 <MyGame_Example_Monster_testarrayofstring+0xe8>
    1090:	ldr	r0, [fp, #-8]
    1094:	ldrh	r1, [fp, #-14]
    1098:	add	r0, r0, r1
    109c:	str	r0, [fp, #-12]
    10a0:	ldr	r0, [fp, #-12]
    10a4:	add	r0, r0, #4
    10a8:	ldr	r1, [fp, #-12]
    10ac:	str	r0, [sp, #4]
    10b0:	mov	r0, r1
    10b4:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    10b8:	ldr	r1, [sp, #4]
    10bc:	add	r0, r1, r0
    10c0:	str	r0, [fp, #-4]
    10c4:	b	10d0 <MyGame_Example_Monster_testarrayofstring+0xf0>
    10c8:	movw	r0, #0
    10cc:	str	r0, [fp, #-4]
    10d0:	ldr	r0, [fp, #-4]
    10d4:	mov	sp, fp
    10d8:	pop	{fp, pc}

000010dc <flatbuffers_string_vec_len>:
    10dc:	push	{fp, lr}
    10e0:	mov	fp, sp
    10e4:	sub	sp, sp, #8
    10e8:	str	r0, [sp, #4]
    10ec:	ldr	r0, [sp, #4]
    10f0:	movw	r1, #0
    10f4:	cmp	r0, r1
    10f8:	beq	1114 <flatbuffers_string_vec_len+0x38>
    10fc:	ldr	r0, [sp, #4]
    1100:	mvn	r1, #3
    1104:	add	r0, r0, r1
    1108:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    110c:	str	r0, [sp]
    1110:	b	1120 <flatbuffers_string_vec_len+0x44>
    1114:	movw	r0, #0
    1118:	str	r0, [sp]
    111c:	b	1120 <flatbuffers_string_vec_len+0x44>
    1120:	ldr	r0, [sp]
    1124:	mov	sp, fp
    1128:	pop	{fp, pc}

0000112c <flatbuffers_string_vec_at>:
    112c:	push	{fp, lr}
    1130:	mov	fp, sp
    1134:	sub	sp, sp, #16
    1138:	str	r0, [fp, #-4]
    113c:	str	r1, [sp, #8]
    1140:	ldr	r0, [fp, #-4]
    1144:	ldr	r1, [sp, #8]
    1148:	add	r0, r0, r1, lsl #2
    114c:	str	r0, [sp, #4]
    1150:	ldr	r0, [fp, #-4]
    1154:	bl	2644 <flatbuffers_vec_len>
    1158:	ldr	r1, [sp, #8]
    115c:	cmp	r0, r1
    1160:	bls	116c <flatbuffers_string_vec_at+0x40>
    1164:	b	1168 <flatbuffers_string_vec_at+0x3c>
    1168:	b	118c <flatbuffers_string_vec_at+0x60>
    116c:	movw	r0, #0
    1170:	movt	r0, #0
    1174:	movw	r1, #0
    1178:	movt	r1, #0
    117c:	movw	r2, #108	; 0x6c
    1180:	movw	r3, #0
    1184:	movt	r3, #0
    1188:	bl	0 <__assert_fail>
    118c:	ldr	r0, [sp, #4]
    1190:	ldr	r1, [sp, #4]
    1194:	str	r0, [sp]
    1198:	mov	r0, r1
    119c:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    11a0:	ldr	r1, [sp]
    11a4:	add	r0, r1, r0
    11a8:	add	r0, r0, #4
    11ac:	mov	sp, fp
    11b0:	pop	{fp, pc}

000011b4 <MyGame_Example_Monster_test_type>:
    11b4:	push	{fp, lr}
    11b8:	mov	fp, sp
    11bc:	sub	sp, sp, #24
    11c0:	str	r0, [fp, #-4]
    11c4:	movw	r0, #0
    11c8:	strh	r0, [fp, #-6]
    11cc:	ldr	r0, [fp, #-4]
    11d0:	movw	r1, #0
    11d4:	cmp	r0, r1
    11d8:	beq	11e4 <MyGame_Example_Monster_test_type+0x30>
    11dc:	b	11e0 <MyGame_Example_Monster_test_type+0x2c>
    11e0:	b	1204 <MyGame_Example_Monster_test_type+0x50>
    11e4:	movw	r0, #0
    11e8:	movt	r0, #0
    11ec:	movw	r1, #0
    11f0:	movt	r1, #0
    11f4:	movw	r2, #717	; 0x2cd
    11f8:	movw	r3, #0
    11fc:	movt	r3, #0
    1200:	bl	0 <__assert_fail>
    1204:	mov	r0, #7
    1208:	strh	r0, [fp, #-8]
    120c:	ldr	r0, [fp, #-4]
    1210:	str	r0, [sp, #8]
    1214:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1218:	ldr	lr, [sp, #8]
    121c:	sub	r0, lr, r0
    1220:	str	r0, [sp, #12]
    1224:	ldr	r0, [sp, #12]
    1228:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    122c:	ldrh	lr, [fp, #-8]
    1230:	add	lr, lr, #3
    1234:	lsl	lr, lr, #1
    1238:	cmp	r0, lr
    123c:	bcc	1258 <MyGame_Example_Monster_test_type+0xa4>
    1240:	ldr	r0, [sp, #12]
    1244:	ldrh	r1, [fp, #-8]
    1248:	add	r0, r0, r1, lsl #1
    124c:	add	r0, r0, #4
    1250:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1254:	strh	r0, [fp, #-6]
    1258:	ldrh	r0, [fp, #-6]
    125c:	cmp	r0, #0
    1260:	beq	1280 <MyGame_Example_Monster_test_type+0xcc>
    1264:	ldr	r0, [fp, #-4]
    1268:	ldrh	r1, [fp, #-6]
    126c:	add	r0, r0, r1
    1270:	bl	26d0 <__flatbuffers_utype_read_from_pe>
    1274:	and	r0, r0, #255	; 0xff
    1278:	str	r0, [sp, #4]
    127c:	b	128c <MyGame_Example_Monster_test_type+0xd8>
    1280:	movw	r0, #0
    1284:	str	r0, [sp, #4]
    1288:	b	128c <MyGame_Example_Monster_test_type+0xd8>
    128c:	ldr	r0, [sp, #4]
    1290:	and	r0, r0, #255	; 0xff
    1294:	mov	sp, fp
    1298:	pop	{fp, pc}

0000129c <MyGame_Example_Monster_test>:
    129c:	push	{fp, lr}
    12a0:	mov	fp, sp
    12a4:	sub	sp, sp, #32
    12a8:	str	r0, [fp, #-8]
    12ac:	movw	r0, #0
    12b0:	strh	r0, [fp, #-14]
    12b4:	ldr	r0, [fp, #-8]
    12b8:	movw	r1, #0
    12bc:	cmp	r0, r1
    12c0:	beq	12cc <MyGame_Example_Monster_test+0x30>
    12c4:	b	12c8 <MyGame_Example_Monster_test+0x2c>
    12c8:	b	12ec <MyGame_Example_Monster_test+0x50>
    12cc:	movw	r0, #0
    12d0:	movt	r0, #0
    12d4:	movw	r1, #0
    12d8:	movt	r1, #0
    12dc:	movw	r2, #717	; 0x2cd
    12e0:	movw	r3, #0
    12e4:	movt	r3, #0
    12e8:	bl	0 <__assert_fail>
    12ec:	mov	r0, #8
    12f0:	strh	r0, [sp, #16]
    12f4:	ldr	r0, [fp, #-8]
    12f8:	str	r0, [sp, #8]
    12fc:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1300:	ldr	lr, [sp, #8]
    1304:	sub	r0, lr, r0
    1308:	str	r0, [sp, #12]
    130c:	ldr	r0, [sp, #12]
    1310:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1314:	ldrh	lr, [sp, #16]
    1318:	add	lr, lr, #3
    131c:	lsl	lr, lr, #1
    1320:	cmp	r0, lr
    1324:	bcc	1340 <MyGame_Example_Monster_test+0xa4>
    1328:	ldr	r0, [sp, #12]
    132c:	ldrh	r1, [sp, #16]
    1330:	add	r0, r0, r1, lsl #1
    1334:	add	r0, r0, #4
    1338:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    133c:	strh	r0, [fp, #-14]
    1340:	ldrsh	r0, [fp, #-14]
    1344:	cmp	r0, #0
    1348:	beq	1380 <MyGame_Example_Monster_test+0xe4>
    134c:	ldr	r0, [fp, #-8]
    1350:	ldrh	r1, [fp, #-14]
    1354:	add	r0, r0, r1
    1358:	str	r0, [fp, #-12]
    135c:	ldr	r0, [fp, #-12]
    1360:	ldr	r1, [fp, #-12]
    1364:	str	r0, [sp, #4]
    1368:	mov	r0, r1
    136c:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    1370:	ldr	r1, [sp, #4]
    1374:	add	r0, r1, r0
    1378:	str	r0, [fp, #-4]
    137c:	b	1388 <MyGame_Example_Monster_test+0xec>
    1380:	movw	r0, #0
    1384:	str	r0, [fp, #-4]
    1388:	ldr	r0, [fp, #-4]
    138c:	mov	sp, fp
    1390:	pop	{fp, pc}

00001394 <MyGame_Example_Monster_test4>:
    1394:	push	{fp, lr}
    1398:	mov	fp, sp
    139c:	sub	sp, sp, #32
    13a0:	str	r0, [fp, #-8]
    13a4:	movw	r0, #0
    13a8:	strh	r0, [fp, #-14]
    13ac:	ldr	r0, [fp, #-8]
    13b0:	movw	r1, #0
    13b4:	cmp	r0, r1
    13b8:	beq	13c4 <MyGame_Example_Monster_test4+0x30>
    13bc:	b	13c0 <MyGame_Example_Monster_test4+0x2c>
    13c0:	b	13e4 <MyGame_Example_Monster_test4+0x50>
    13c4:	movw	r0, #0
    13c8:	movt	r0, #0
    13cc:	movw	r1, #0
    13d0:	movt	r1, #0
    13d4:	movw	r2, #718	; 0x2ce
    13d8:	movw	r3, #0
    13dc:	movt	r3, #0
    13e0:	bl	0 <__assert_fail>
    13e4:	mov	r0, #9
    13e8:	strh	r0, [sp, #16]
    13ec:	ldr	r0, [fp, #-8]
    13f0:	str	r0, [sp, #8]
    13f4:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    13f8:	ldr	lr, [sp, #8]
    13fc:	sub	r0, lr, r0
    1400:	str	r0, [sp, #12]
    1404:	ldr	r0, [sp, #12]
    1408:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    140c:	ldrh	lr, [sp, #16]
    1410:	add	lr, lr, #3
    1414:	lsl	lr, lr, #1
    1418:	cmp	r0, lr
    141c:	bcc	1438 <MyGame_Example_Monster_test4+0xa4>
    1420:	ldr	r0, [sp, #12]
    1424:	ldrh	r1, [sp, #16]
    1428:	add	r0, r0, r1, lsl #1
    142c:	add	r0, r0, #4
    1430:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1434:	strh	r0, [fp, #-14]
    1438:	ldrsh	r0, [fp, #-14]
    143c:	cmp	r0, #0
    1440:	beq	147c <MyGame_Example_Monster_test4+0xe8>
    1444:	ldr	r0, [fp, #-8]
    1448:	ldrh	r1, [fp, #-14]
    144c:	add	r0, r0, r1
    1450:	str	r0, [fp, #-12]
    1454:	ldr	r0, [fp, #-12]
    1458:	add	r0, r0, #4
    145c:	ldr	r1, [fp, #-12]
    1460:	str	r0, [sp, #4]
    1464:	mov	r0, r1
    1468:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    146c:	ldr	r1, [sp, #4]
    1470:	add	r0, r1, r0
    1474:	str	r0, [fp, #-4]
    1478:	b	1484 <MyGame_Example_Monster_test4+0xf0>
    147c:	movw	r0, #0
    1480:	str	r0, [fp, #-4]
    1484:	ldr	r0, [fp, #-4]
    1488:	mov	sp, fp
    148c:	pop	{fp, pc}

00001490 <MyGame_Example_Test_vec_len>:
    1490:	push	{fp, lr}
    1494:	mov	fp, sp
    1498:	sub	sp, sp, #8
    149c:	str	r0, [sp, #4]
    14a0:	ldr	r0, [sp, #4]
    14a4:	movw	r1, #0
    14a8:	cmp	r0, r1
    14ac:	beq	14c8 <MyGame_Example_Test_vec_len+0x38>
    14b0:	ldr	r0, [sp, #4]
    14b4:	mvn	r1, #3
    14b8:	add	r0, r0, r1
    14bc:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    14c0:	str	r0, [sp]
    14c4:	b	14d4 <MyGame_Example_Test_vec_len+0x44>
    14c8:	movw	r0, #0
    14cc:	str	r0, [sp]
    14d0:	b	14d4 <MyGame_Example_Test_vec_len+0x44>
    14d4:	ldr	r0, [sp]
    14d8:	mov	sp, fp
    14dc:	pop	{fp, pc}

000014e0 <MyGame_Example_Test_vec_at>:
    14e0:	push	{fp, lr}
    14e4:	mov	fp, sp
    14e8:	sub	sp, sp, #8
    14ec:	str	r0, [sp, #4]
    14f0:	str	r1, [sp]
    14f4:	ldr	r0, [sp, #4]
    14f8:	bl	2644 <flatbuffers_vec_len>
    14fc:	ldr	r1, [sp]
    1500:	cmp	r0, r1
    1504:	bls	1510 <MyGame_Example_Test_vec_at+0x30>
    1508:	b	150c <MyGame_Example_Test_vec_at+0x2c>
    150c:	b	1530 <MyGame_Example_Test_vec_at+0x50>
    1510:	movw	r0, #0
    1514:	movt	r0, #0
    1518:	movw	r1, #0
    151c:	movt	r1, #0
    1520:	movw	r2, #380	; 0x17c
    1524:	movw	r3, #0
    1528:	movt	r3, #0
    152c:	bl	0 <__assert_fail>
    1530:	ldr	r0, [sp, #4]
    1534:	ldr	r1, [sp]
    1538:	add	r0, r0, r1, lsl #2
    153c:	mov	sp, fp
    1540:	pop	{fp, pc}

00001544 <MyGame_Example_Monster_testhashs32_fnv1>:
    1544:	push	{fp, lr}
    1548:	mov	fp, sp
    154c:	sub	sp, sp, #24
    1550:	str	r0, [fp, #-4]
    1554:	movw	r0, #0
    1558:	strh	r0, [fp, #-6]
    155c:	ldr	r0, [fp, #-4]
    1560:	movw	r1, #0
    1564:	cmp	r0, r1
    1568:	beq	1574 <MyGame_Example_Monster_testhashs32_fnv1+0x30>
    156c:	b	1570 <MyGame_Example_Monster_testhashs32_fnv1+0x2c>
    1570:	b	1594 <MyGame_Example_Monster_testhashs32_fnv1+0x50>
    1574:	movw	r0, #0
    1578:	movt	r0, #0
    157c:	movw	r1, #0
    1580:	movt	r1, #0
    1584:	movw	r2, #724	; 0x2d4
    1588:	movw	r3, #0
    158c:	movt	r3, #0
    1590:	bl	0 <__assert_fail>
    1594:	mov	r0, #16
    1598:	strh	r0, [fp, #-8]
    159c:	ldr	r0, [fp, #-4]
    15a0:	str	r0, [sp, #8]
    15a4:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    15a8:	ldr	lr, [sp, #8]
    15ac:	sub	r0, lr, r0
    15b0:	str	r0, [sp, #12]
    15b4:	ldr	r0, [sp, #12]
    15b8:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    15bc:	ldrh	lr, [fp, #-8]
    15c0:	add	lr, lr, #3
    15c4:	lsl	lr, lr, #1
    15c8:	cmp	r0, lr
    15cc:	bcc	15e8 <MyGame_Example_Monster_testhashs32_fnv1+0xa4>
    15d0:	ldr	r0, [sp, #12]
    15d4:	ldrh	r1, [fp, #-8]
    15d8:	add	r0, r0, r1, lsl #1
    15dc:	add	r0, r0, #4
    15e0:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    15e4:	strh	r0, [fp, #-6]
    15e8:	ldrh	r0, [fp, #-6]
    15ec:	cmp	r0, #0
    15f0:	beq	160c <MyGame_Example_Monster_testhashs32_fnv1+0xc8>
    15f4:	ldr	r0, [fp, #-4]
    15f8:	ldrh	r1, [fp, #-6]
    15fc:	add	r0, r0, r1
    1600:	bl	270c <flatbuffers_int32_read_from_pe>
    1604:	str	r0, [sp, #4]
    1608:	b	1618 <MyGame_Example_Monster_testhashs32_fnv1+0xd4>
    160c:	movw	r0, #0
    1610:	str	r0, [sp, #4]
    1614:	b	1618 <MyGame_Example_Monster_testhashs32_fnv1+0xd4>
    1618:	ldr	r0, [sp, #4]
    161c:	mov	sp, fp
    1620:	pop	{fp, pc}

00001624 <MyGame_Example_Monster_testhashu32_fnv1>:
    1624:	push	{fp, lr}
    1628:	mov	fp, sp
    162c:	sub	sp, sp, #24
    1630:	str	r0, [fp, #-4]
    1634:	movw	r0, #0
    1638:	strh	r0, [fp, #-6]
    163c:	ldr	r0, [fp, #-4]
    1640:	movw	r1, #0
    1644:	cmp	r0, r1
    1648:	beq	1654 <MyGame_Example_Monster_testhashu32_fnv1+0x30>
    164c:	b	1650 <MyGame_Example_Monster_testhashu32_fnv1+0x2c>
    1650:	b	1674 <MyGame_Example_Monster_testhashu32_fnv1+0x50>
    1654:	movw	r0, #0
    1658:	movt	r0, #0
    165c:	movw	r1, #0
    1660:	movt	r1, #0
    1664:	movw	r2, #725	; 0x2d5
    1668:	movw	r3, #0
    166c:	movt	r3, #0
    1670:	bl	0 <__assert_fail>
    1674:	mov	r0, #17
    1678:	strh	r0, [fp, #-8]
    167c:	ldr	r0, [fp, #-4]
    1680:	str	r0, [sp, #8]
    1684:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1688:	ldr	lr, [sp, #8]
    168c:	sub	r0, lr, r0
    1690:	str	r0, [sp, #12]
    1694:	ldr	r0, [sp, #12]
    1698:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    169c:	ldrh	lr, [fp, #-8]
    16a0:	add	lr, lr, #3
    16a4:	lsl	lr, lr, #1
    16a8:	cmp	r0, lr
    16ac:	bcc	16c8 <MyGame_Example_Monster_testhashu32_fnv1+0xa4>
    16b0:	ldr	r0, [sp, #12]
    16b4:	ldrh	r1, [fp, #-8]
    16b8:	add	r0, r0, r1, lsl #1
    16bc:	add	r0, r0, #4
    16c0:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    16c4:	strh	r0, [fp, #-6]
    16c8:	ldrh	r0, [fp, #-6]
    16cc:	cmp	r0, #0
    16d0:	beq	16ec <MyGame_Example_Monster_testhashu32_fnv1+0xc8>
    16d4:	ldr	r0, [fp, #-4]
    16d8:	ldrh	r1, [fp, #-6]
    16dc:	add	r0, r0, r1
    16e0:	bl	2744 <flatbuffers_uint32_read_from_pe>
    16e4:	str	r0, [sp, #4]
    16e8:	b	16f8 <MyGame_Example_Monster_testhashu32_fnv1+0xd4>
    16ec:	movw	r0, #0
    16f0:	str	r0, [sp, #4]
    16f4:	b	16f8 <MyGame_Example_Monster_testhashu32_fnv1+0xd4>
    16f8:	ldr	r0, [sp, #4]
    16fc:	mov	sp, fp
    1700:	pop	{fp, pc}

00001704 <MyGame_Example_Monster_testhashs64_fnv1>:
    1704:	push	{fp, lr}
    1708:	mov	fp, sp
    170c:	sub	sp, sp, #32
    1710:	str	r0, [fp, #-4]
    1714:	movw	r0, #0
    1718:	strh	r0, [fp, #-6]
    171c:	ldr	r0, [fp, #-4]
    1720:	movw	r1, #0
    1724:	cmp	r0, r1
    1728:	beq	1734 <MyGame_Example_Monster_testhashs64_fnv1+0x30>
    172c:	b	1730 <MyGame_Example_Monster_testhashs64_fnv1+0x2c>
    1730:	b	1754 <MyGame_Example_Monster_testhashs64_fnv1+0x50>
    1734:	movw	r0, #0
    1738:	movt	r0, #0
    173c:	movw	r1, #0
    1740:	movt	r1, #0
    1744:	movw	r2, #726	; 0x2d6
    1748:	movw	r3, #0
    174c:	movt	r3, #0
    1750:	bl	0 <__assert_fail>
    1754:	mov	r0, #18
    1758:	strh	r0, [fp, #-8]
    175c:	ldr	r0, [fp, #-4]
    1760:	str	r0, [sp, #16]
    1764:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1768:	ldr	lr, [sp, #16]
    176c:	sub	r0, lr, r0
    1770:	str	r0, [fp, #-12]
    1774:	ldr	r0, [fp, #-12]
    1778:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    177c:	ldrh	lr, [fp, #-8]
    1780:	add	lr, lr, #3
    1784:	lsl	lr, lr, #1
    1788:	cmp	r0, lr
    178c:	bcc	17a8 <MyGame_Example_Monster_testhashs64_fnv1+0xa4>
    1790:	ldr	r0, [fp, #-12]
    1794:	ldrh	r1, [fp, #-8]
    1798:	add	r0, r0, r1, lsl #1
    179c:	add	r0, r0, #4
    17a0:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    17a4:	strh	r0, [fp, #-6]
    17a8:	ldrh	r0, [fp, #-6]
    17ac:	cmp	r0, #0
    17b0:	beq	17d0 <MyGame_Example_Monster_testhashs64_fnv1+0xcc>
    17b4:	ldr	r0, [fp, #-4]
    17b8:	ldrh	r1, [fp, #-6]
    17bc:	add	r0, r0, r1
    17c0:	bl	277c <flatbuffers_int64_read_from_pe>
    17c4:	str	r0, [sp, #12]
    17c8:	str	r1, [sp, #8]
    17cc:	b	17e4 <MyGame_Example_Monster_testhashs64_fnv1+0xe0>
    17d0:	mov	r0, #0
    17d4:	mov	r1, r0
    17d8:	str	r1, [sp, #12]
    17dc:	str	r0, [sp, #8]
    17e0:	b	17e4 <MyGame_Example_Monster_testhashs64_fnv1+0xe0>
    17e4:	ldr	r0, [sp, #8]
    17e8:	ldr	r1, [sp, #12]
    17ec:	str	r0, [sp, #4]
    17f0:	mov	r0, r1
    17f4:	ldr	r1, [sp, #4]
    17f8:	mov	sp, fp
    17fc:	pop	{fp, pc}

00001800 <MyGame_Example_Monster_testhashu64_fnv1>:
    1800:	push	{fp, lr}
    1804:	mov	fp, sp
    1808:	sub	sp, sp, #32
    180c:	str	r0, [fp, #-4]
    1810:	movw	r0, #0
    1814:	strh	r0, [fp, #-6]
    1818:	ldr	r0, [fp, #-4]
    181c:	movw	r1, #0
    1820:	cmp	r0, r1
    1824:	beq	1830 <MyGame_Example_Monster_testhashu64_fnv1+0x30>
    1828:	b	182c <MyGame_Example_Monster_testhashu64_fnv1+0x2c>
    182c:	b	1850 <MyGame_Example_Monster_testhashu64_fnv1+0x50>
    1830:	movw	r0, #0
    1834:	movt	r0, #0
    1838:	movw	r1, #0
    183c:	movt	r1, #0
    1840:	movw	r2, #727	; 0x2d7
    1844:	movw	r3, #0
    1848:	movt	r3, #0
    184c:	bl	0 <__assert_fail>
    1850:	mov	r0, #19
    1854:	strh	r0, [fp, #-8]
    1858:	ldr	r0, [fp, #-4]
    185c:	str	r0, [sp, #16]
    1860:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1864:	ldr	lr, [sp, #16]
    1868:	sub	r0, lr, r0
    186c:	str	r0, [fp, #-12]
    1870:	ldr	r0, [fp, #-12]
    1874:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1878:	ldrh	lr, [fp, #-8]
    187c:	add	lr, lr, #3
    1880:	lsl	lr, lr, #1
    1884:	cmp	r0, lr
    1888:	bcc	18a4 <MyGame_Example_Monster_testhashu64_fnv1+0xa4>
    188c:	ldr	r0, [fp, #-12]
    1890:	ldrh	r1, [fp, #-8]
    1894:	add	r0, r0, r1, lsl #1
    1898:	add	r0, r0, #4
    189c:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    18a0:	strh	r0, [fp, #-6]
    18a4:	ldrh	r0, [fp, #-6]
    18a8:	cmp	r0, #0
    18ac:	beq	18cc <MyGame_Example_Monster_testhashu64_fnv1+0xcc>
    18b0:	ldr	r0, [fp, #-4]
    18b4:	ldrh	r1, [fp, #-6]
    18b8:	add	r0, r0, r1
    18bc:	bl	27cc <flatbuffers_uint64_read_from_pe>
    18c0:	str	r0, [sp, #12]
    18c4:	str	r1, [sp, #8]
    18c8:	b	18e0 <MyGame_Example_Monster_testhashu64_fnv1+0xe0>
    18cc:	mov	r0, #0
    18d0:	mov	r1, r0
    18d4:	str	r1, [sp, #12]
    18d8:	str	r0, [sp, #8]
    18dc:	b	18e0 <MyGame_Example_Monster_testhashu64_fnv1+0xe0>
    18e0:	ldr	r0, [sp, #8]
    18e4:	ldr	r1, [sp, #12]
    18e8:	str	r0, [sp, #4]
    18ec:	mov	r0, r1
    18f0:	ldr	r1, [sp, #4]
    18f4:	mov	sp, fp
    18f8:	pop	{fp, pc}

000018fc <MyGame_Example_Monster_testhashs32_fnv1a>:
    18fc:	push	{fp, lr}
    1900:	mov	fp, sp
    1904:	sub	sp, sp, #24
    1908:	str	r0, [fp, #-4]
    190c:	movw	r0, #0
    1910:	strh	r0, [fp, #-6]
    1914:	ldr	r0, [fp, #-4]
    1918:	movw	r1, #0
    191c:	cmp	r0, r1
    1920:	beq	192c <MyGame_Example_Monster_testhashs32_fnv1a+0x30>
    1924:	b	1928 <MyGame_Example_Monster_testhashs32_fnv1a+0x2c>
    1928:	b	194c <MyGame_Example_Monster_testhashs32_fnv1a+0x50>
    192c:	movw	r0, #0
    1930:	movt	r0, #0
    1934:	movw	r1, #0
    1938:	movt	r1, #0
    193c:	movw	r2, #728	; 0x2d8
    1940:	movw	r3, #0
    1944:	movt	r3, #0
    1948:	bl	0 <__assert_fail>
    194c:	mov	r0, #20
    1950:	strh	r0, [fp, #-8]
    1954:	ldr	r0, [fp, #-4]
    1958:	str	r0, [sp, #8]
    195c:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1960:	ldr	lr, [sp, #8]
    1964:	sub	r0, lr, r0
    1968:	str	r0, [sp, #12]
    196c:	ldr	r0, [sp, #12]
    1970:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1974:	ldrh	lr, [fp, #-8]
    1978:	add	lr, lr, #3
    197c:	lsl	lr, lr, #1
    1980:	cmp	r0, lr
    1984:	bcc	19a0 <MyGame_Example_Monster_testhashs32_fnv1a+0xa4>
    1988:	ldr	r0, [sp, #12]
    198c:	ldrh	r1, [fp, #-8]
    1990:	add	r0, r0, r1, lsl #1
    1994:	add	r0, r0, #4
    1998:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    199c:	strh	r0, [fp, #-6]
    19a0:	ldrh	r0, [fp, #-6]
    19a4:	cmp	r0, #0
    19a8:	beq	19c4 <MyGame_Example_Monster_testhashs32_fnv1a+0xc8>
    19ac:	ldr	r0, [fp, #-4]
    19b0:	ldrh	r1, [fp, #-6]
    19b4:	add	r0, r0, r1
    19b8:	bl	270c <flatbuffers_int32_read_from_pe>
    19bc:	str	r0, [sp, #4]
    19c0:	b	19d0 <MyGame_Example_Monster_testhashs32_fnv1a+0xd4>
    19c4:	movw	r0, #0
    19c8:	str	r0, [sp, #4]
    19cc:	b	19d0 <MyGame_Example_Monster_testhashs32_fnv1a+0xd4>
    19d0:	ldr	r0, [sp, #4]
    19d4:	mov	sp, fp
    19d8:	pop	{fp, pc}

000019dc <MyGame_Example_Monster_testhashu32_fnv1a>:
    19dc:	push	{fp, lr}
    19e0:	mov	fp, sp
    19e4:	sub	sp, sp, #24
    19e8:	str	r0, [fp, #-4]
    19ec:	movw	r0, #0
    19f0:	strh	r0, [fp, #-6]
    19f4:	ldr	r0, [fp, #-4]
    19f8:	movw	r1, #0
    19fc:	cmp	r0, r1
    1a00:	beq	1a0c <MyGame_Example_Monster_testhashu32_fnv1a+0x30>
    1a04:	b	1a08 <MyGame_Example_Monster_testhashu32_fnv1a+0x2c>
    1a08:	b	1a2c <MyGame_Example_Monster_testhashu32_fnv1a+0x50>
    1a0c:	movw	r0, #0
    1a10:	movt	r0, #0
    1a14:	movw	r1, #0
    1a18:	movt	r1, #0
    1a1c:	movw	r2, #729	; 0x2d9
    1a20:	movw	r3, #0
    1a24:	movt	r3, #0
    1a28:	bl	0 <__assert_fail>
    1a2c:	mov	r0, #21
    1a30:	strh	r0, [fp, #-8]
    1a34:	ldr	r0, [fp, #-4]
    1a38:	str	r0, [sp, #8]
    1a3c:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1a40:	ldr	lr, [sp, #8]
    1a44:	sub	r0, lr, r0
    1a48:	str	r0, [sp, #12]
    1a4c:	ldr	r0, [sp, #12]
    1a50:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1a54:	ldrh	lr, [fp, #-8]
    1a58:	add	lr, lr, #3
    1a5c:	lsl	lr, lr, #1
    1a60:	cmp	r0, lr
    1a64:	bcc	1a80 <MyGame_Example_Monster_testhashu32_fnv1a+0xa4>
    1a68:	ldr	r0, [sp, #12]
    1a6c:	ldrh	r1, [fp, #-8]
    1a70:	add	r0, r0, r1, lsl #1
    1a74:	add	r0, r0, #4
    1a78:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1a7c:	strh	r0, [fp, #-6]
    1a80:	ldrh	r0, [fp, #-6]
    1a84:	cmp	r0, #0
    1a88:	beq	1aa4 <MyGame_Example_Monster_testhashu32_fnv1a+0xc8>
    1a8c:	ldr	r0, [fp, #-4]
    1a90:	ldrh	r1, [fp, #-6]
    1a94:	add	r0, r0, r1
    1a98:	bl	2744 <flatbuffers_uint32_read_from_pe>
    1a9c:	str	r0, [sp, #4]
    1aa0:	b	1ab0 <MyGame_Example_Monster_testhashu32_fnv1a+0xd4>
    1aa4:	movw	r0, #0
    1aa8:	str	r0, [sp, #4]
    1aac:	b	1ab0 <MyGame_Example_Monster_testhashu32_fnv1a+0xd4>
    1ab0:	ldr	r0, [sp, #4]
    1ab4:	mov	sp, fp
    1ab8:	pop	{fp, pc}

00001abc <MyGame_Example_Monster_testhashs64_fnv1a>:
    1abc:	push	{fp, lr}
    1ac0:	mov	fp, sp
    1ac4:	sub	sp, sp, #32
    1ac8:	str	r0, [fp, #-4]
    1acc:	movw	r0, #0
    1ad0:	strh	r0, [fp, #-6]
    1ad4:	ldr	r0, [fp, #-4]
    1ad8:	movw	r1, #0
    1adc:	cmp	r0, r1
    1ae0:	beq	1aec <MyGame_Example_Monster_testhashs64_fnv1a+0x30>
    1ae4:	b	1ae8 <MyGame_Example_Monster_testhashs64_fnv1a+0x2c>
    1ae8:	b	1b0c <MyGame_Example_Monster_testhashs64_fnv1a+0x50>
    1aec:	movw	r0, #0
    1af0:	movt	r0, #0
    1af4:	movw	r1, #0
    1af8:	movt	r1, #0
    1afc:	movw	r2, #730	; 0x2da
    1b00:	movw	r3, #0
    1b04:	movt	r3, #0
    1b08:	bl	0 <__assert_fail>
    1b0c:	mov	r0, #22
    1b10:	strh	r0, [fp, #-8]
    1b14:	ldr	r0, [fp, #-4]
    1b18:	str	r0, [sp, #16]
    1b1c:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1b20:	ldr	lr, [sp, #16]
    1b24:	sub	r0, lr, r0
    1b28:	str	r0, [fp, #-12]
    1b2c:	ldr	r0, [fp, #-12]
    1b30:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1b34:	ldrh	lr, [fp, #-8]
    1b38:	add	lr, lr, #3
    1b3c:	lsl	lr, lr, #1
    1b40:	cmp	r0, lr
    1b44:	bcc	1b60 <MyGame_Example_Monster_testhashs64_fnv1a+0xa4>
    1b48:	ldr	r0, [fp, #-12]
    1b4c:	ldrh	r1, [fp, #-8]
    1b50:	add	r0, r0, r1, lsl #1
    1b54:	add	r0, r0, #4
    1b58:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1b5c:	strh	r0, [fp, #-6]
    1b60:	ldrh	r0, [fp, #-6]
    1b64:	cmp	r0, #0
    1b68:	beq	1b88 <MyGame_Example_Monster_testhashs64_fnv1a+0xcc>
    1b6c:	ldr	r0, [fp, #-4]
    1b70:	ldrh	r1, [fp, #-6]
    1b74:	add	r0, r0, r1
    1b78:	bl	277c <flatbuffers_int64_read_from_pe>
    1b7c:	str	r0, [sp, #12]
    1b80:	str	r1, [sp, #8]
    1b84:	b	1b9c <MyGame_Example_Monster_testhashs64_fnv1a+0xe0>
    1b88:	mov	r0, #0
    1b8c:	mov	r1, r0
    1b90:	str	r1, [sp, #12]
    1b94:	str	r0, [sp, #8]
    1b98:	b	1b9c <MyGame_Example_Monster_testhashs64_fnv1a+0xe0>
    1b9c:	ldr	r0, [sp, #8]
    1ba0:	ldr	r1, [sp, #12]
    1ba4:	str	r0, [sp, #4]
    1ba8:	mov	r0, r1
    1bac:	ldr	r1, [sp, #4]
    1bb0:	mov	sp, fp
    1bb4:	pop	{fp, pc}

00001bb8 <MyGame_Example_Monster_testhashu64_fnv1a>:
    1bb8:	push	{fp, lr}
    1bbc:	mov	fp, sp
    1bc0:	sub	sp, sp, #32
    1bc4:	str	r0, [fp, #-4]
    1bc8:	movw	r0, #0
    1bcc:	strh	r0, [fp, #-6]
    1bd0:	ldr	r0, [fp, #-4]
    1bd4:	movw	r1, #0
    1bd8:	cmp	r0, r1
    1bdc:	beq	1be8 <MyGame_Example_Monster_testhashu64_fnv1a+0x30>
    1be0:	b	1be4 <MyGame_Example_Monster_testhashu64_fnv1a+0x2c>
    1be4:	b	1c08 <MyGame_Example_Monster_testhashu64_fnv1a+0x50>
    1be8:	movw	r0, #0
    1bec:	movt	r0, #0
    1bf0:	movw	r1, #0
    1bf4:	movt	r1, #0
    1bf8:	movw	r2, #731	; 0x2db
    1bfc:	movw	r3, #0
    1c00:	movt	r3, #0
    1c04:	bl	0 <__assert_fail>
    1c08:	mov	r0, #23
    1c0c:	strh	r0, [fp, #-8]
    1c10:	ldr	r0, [fp, #-4]
    1c14:	str	r0, [sp, #16]
    1c18:	bl	2494 <__flatbuffers_soffset_read_from_pe>
    1c1c:	ldr	lr, [sp, #16]
    1c20:	sub	r0, lr, r0
    1c24:	str	r0, [fp, #-12]
    1c28:	ldr	r0, [fp, #-12]
    1c2c:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1c30:	ldrh	lr, [fp, #-8]
    1c34:	add	lr, lr, #3
    1c38:	lsl	lr, lr, #1
    1c3c:	cmp	r0, lr
    1c40:	bcc	1c5c <MyGame_Example_Monster_testhashu64_fnv1a+0xa4>
    1c44:	ldr	r0, [fp, #-12]
    1c48:	ldrh	r1, [fp, #-8]
    1c4c:	add	r0, r0, r1, lsl #1
    1c50:	add	r0, r0, #4
    1c54:	bl	24b8 <__flatbuffers_voffset_read_from_pe>
    1c58:	strh	r0, [fp, #-6]
    1c5c:	ldrh	r0, [fp, #-6]
    1c60:	cmp	r0, #0
    1c64:	beq	1c84 <MyGame_Example_Monster_testhashu64_fnv1a+0xcc>
    1c68:	ldr	r0, [fp, #-4]
    1c6c:	ldrh	r1, [fp, #-6]
    1c70:	add	r0, r0, r1
    1c74:	bl	27cc <flatbuffers_uint64_read_from_pe>
    1c78:	str	r0, [sp, #12]
    1c7c:	str	r1, [sp, #8]
    1c80:	b	1c98 <MyGame_Example_Monster_testhashu64_fnv1a+0xe0>
    1c84:	mov	r0, #0
    1c88:	mov	r1, r0
    1c8c:	str	r1, [sp, #12]
    1c90:	str	r0, [sp, #8]
    1c94:	b	1c98 <MyGame_Example_Monster_testhashu64_fnv1a+0xe0>
    1c98:	ldr	r0, [sp, #8]
    1c9c:	ldr	r1, [sp, #12]
    1ca0:	str	r0, [sp, #4]
    1ca4:	mov	r0, r1
    1ca8:	ldr	r1, [sp, #4]
    1cac:	mov	sp, fp
    1cb0:	pop	{fp, pc}

00001cb4 <main>:
    1cb4:	push	{fp, lr}
    1cb8:	mov	fp, sp
    1cbc:	sub	sp, sp, #48	; 0x30
    1cc0:	movw	r2, #0
    1cc4:	str	r2, [fp, #-4]
    1cc8:	str	r0, [fp, #-8]
    1ccc:	str	r1, [fp, #-12]
    1cd0:	ldr	r0, [fp, #-8]
    1cd4:	cmp	r0, #1
    1cd8:	beq	1d10 <main+0x5c>
    1cdc:	ldr	r0, [fp, #-8]
    1ce0:	cmp	r0, #2
    1ce4:	beq	1d10 <main+0x5c>
    1ce8:	movw	r0, #0
    1cec:	movt	r0, #0
    1cf0:	ldr	r0, [r0]
    1cf4:	movw	r1, #0
    1cf8:	movt	r1, #0
    1cfc:	bl	0 <fprintf>
    1d00:	movw	r1, #1
    1d04:	str	r0, [sp, #16]
    1d08:	mov	r0, r1
    1d0c:	bl	0 <exit>
    1d10:	ldr	r0, [fp, #-8]
    1d14:	cmp	r0, #2
    1d18:	bne	1d30 <main+0x7c>
    1d1c:	ldr	r0, [fp, #-12]
    1d20:	ldr	r0, [r0, #4]
    1d24:	movw	r1, #0
    1d28:	movt	r1, #0
    1d2c:	str	r0, [r1]
    1d30:	movw	r0, #0
    1d34:	movt	r0, #0
    1d38:	ldr	r0, [r0]
    1d3c:	movw	r1, #1024	; 0x400
    1d40:	sub	r2, fp, #20
    1d44:	bl	1e98 <readfile>
    1d48:	str	r0, [sp, #20]
    1d4c:	ldr	r0, [fp, #-20]	; 0xffffffec
    1d50:	add	r0, r0, #256	; 0x100
    1d54:	sub	r0, r0, #1
    1d58:	mvn	r1, #255	; 0xff
    1d5c:	and	r1, r0, r1
    1d60:	movw	r0, #256	; 0x100
    1d64:	bl	2084 <__portable_aligned_alloc>
    1d68:	str	r0, [sp, #24]
    1d6c:	ldr	r0, [sp, #24]
    1d70:	ldr	r1, [sp, #20]
    1d74:	ldr	r2, [fp, #-20]	; 0xffffffec
    1d78:	bl	0 <memcpy>
    1d7c:	ldr	r0, [sp, #20]
    1d80:	bl	0 <free>
    1d84:	ldr	r0, [sp, #24]
    1d88:	movw	r1, #0
    1d8c:	cmp	r0, r1
    1d90:	bne	1dc8 <main+0x114>
    1d94:	movw	r0, #0
    1d98:	movt	r0, #0
    1d9c:	ldr	r0, [r0]
    1da0:	movw	r1, #0
    1da4:	movt	r1, #0
    1da8:	ldr	r2, [r1]
    1dac:	movw	r1, #0
    1db0:	movt	r1, #0
    1db4:	bl	0 <fprintf>
    1db8:	mvn	r1, #0
    1dbc:	str	r1, [fp, #-4]
    1dc0:	str	r0, [sp, #12]
    1dc4:	b	1e8c <main+0x1d8>
    1dc8:	ldr	r1, [sp, #24]
    1dcc:	ldr	r2, [fp, #-20]	; 0xffffffec
    1dd0:	movw	r0, #0
    1dd4:	movt	r0, #0
    1dd8:	ldr	r3, [r0]
    1ddc:	movw	r0, #0
    1de0:	movt	r0, #0
    1de4:	bl	2100 <hexdump>
    1de8:	ldr	r0, [sp, #24]
    1dec:	ldr	r1, [fp, #-20]	; 0xffffffec
    1df0:	movw	r2, #0
    1df4:	movt	r2, #0
    1df8:	bl	22f4 <MyGame_Example_Monster_verify_as_root_with_identifier>
    1dfc:	movw	r1, #0
    1e00:	cmp	r1, r0
    1e04:	beq	1e30 <main+0x17c>
    1e08:	movw	r0, #0
    1e0c:	movt	r0, #0
    1e10:	ldr	r0, [r0]
    1e14:	movw	r1, #0
    1e18:	movt	r1, #0
    1e1c:	bl	0 <fprintf>
    1e20:	mvn	r1, #0
    1e24:	str	r1, [fp, #-16]
    1e28:	str	r0, [sp, #8]
    1e2c:	b	1e7c <main+0x1c8>
    1e30:	ldr	r0, [sp, #24]
    1e34:	ldr	r1, [fp, #-20]	; 0xffffffec
    1e38:	bl	232c <MyGame_Example_Monster_verify_as_root>
    1e3c:	movw	r1, #0
    1e40:	cmp	r1, r0
    1e44:	beq	1e70 <main+0x1bc>
    1e48:	movw	r0, #0
    1e4c:	movt	r0, #0
    1e50:	ldr	r0, [r0]
    1e54:	movw	r1, #0
    1e58:	movt	r1, #0
    1e5c:	bl	0 <fprintf>
    1e60:	mvn	r1, #0
    1e64:	str	r1, [fp, #-16]
    1e68:	str	r0, [sp, #4]
    1e6c:	b	1e7c <main+0x1c8>
    1e70:	ldr	r0, [sp, #24]
    1e74:	bl	0 <verify_monster>
    1e78:	str	r0, [fp, #-16]
    1e7c:	ldr	r0, [sp, #24]
    1e80:	bl	0 <free>
    1e84:	ldr	r0, [fp, #-16]
    1e88:	str	r0, [fp, #-4]
    1e8c:	ldr	r0, [fp, #-4]
    1e90:	mov	sp, fp
    1e94:	pop	{fp, pc}

00001e98 <readfile>:
    1e98:	push	{fp, lr}
    1e9c:	mov	fp, sp
    1ea0:	sub	sp, sp, #64	; 0x40
    1ea4:	str	r0, [fp, #-8]
    1ea8:	str	r1, [fp, #-12]
    1eac:	str	r2, [fp, #-16]
    1eb0:	ldr	r0, [fp, #-16]
    1eb4:	movw	r1, #0
    1eb8:	cmp	r0, r1
    1ebc:	beq	1ecc <readfile+0x34>
    1ec0:	ldr	r0, [fp, #-16]
    1ec4:	str	r0, [sp, #20]
    1ec8:	b	1ed8 <readfile+0x40>
    1ecc:	add	r0, sp, #28
    1ed0:	str	r0, [sp, #20]
    1ed4:	b	1ed8 <readfile+0x40>
    1ed8:	ldr	r0, [sp, #20]
    1edc:	str	r0, [fp, #-16]
    1ee0:	ldr	r0, [fp, #-8]
    1ee4:	movw	r1, #0
    1ee8:	movt	r1, #0
    1eec:	bl	0 <fopen>
    1ef0:	str	r0, [fp, #-20]	; 0xffffffec
    1ef4:	movw	r0, #0
    1ef8:	str	r0, [fp, #-24]	; 0xffffffe8
    1efc:	str	r0, [sp, #24]
    1f00:	ldr	r1, [fp, #-20]	; 0xffffffec
    1f04:	cmp	r1, r0
    1f08:	bne	1f10 <readfile+0x78>
    1f0c:	b	2030 <readfile+0x198>
    1f10:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f14:	movw	r1, #0
    1f18:	movw	r2, #2
    1f1c:	bl	0 <fseek>
    1f20:	ldr	r1, [fp, #-20]	; 0xffffffec
    1f24:	str	r0, [sp, #16]
    1f28:	mov	r0, r1
    1f2c:	bl	0 <ftell>
    1f30:	str	r0, [fp, #-24]	; 0xffffffe8
    1f34:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1f38:	ldr	r1, [fp, #-16]
    1f3c:	str	r0, [r1]
    1f40:	ldr	r0, [fp, #-12]
    1f44:	cmp	r0, #0
    1f48:	bls	1f60 <readfile+0xc8>
    1f4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1f50:	ldr	r1, [fp, #-12]
    1f54:	cmp	r0, r1
    1f58:	bls	1f60 <readfile+0xc8>
    1f5c:	b	2030 <readfile+0x198>
    1f60:	ldr	r0, [fp, #-20]	; 0xffffffec
    1f64:	bl	0 <rewind>
    1f68:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1f6c:	cmp	r0, #0
    1f70:	beq	1f80 <readfile+0xe8>
    1f74:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1f78:	str	r0, [sp, #12]
    1f7c:	b	1f8c <readfile+0xf4>
    1f80:	movw	r0, #1
    1f84:	str	r0, [sp, #12]
    1f88:	b	1f8c <readfile+0xf4>
    1f8c:	ldr	r0, [sp, #12]
    1f90:	bl	0 <malloc>
    1f94:	str	r0, [sp, #24]
    1f98:	ldr	r0, [sp, #24]
    1f9c:	movw	lr, #0
    1fa0:	cmp	r0, lr
    1fa4:	bne	1fac <readfile+0x114>
    1fa8:	b	2030 <readfile+0x198>
    1fac:	movw	r0, #0
    1fb0:	str	r0, [fp, #-28]	; 0xffffffe4
    1fb4:	ldr	r0, [sp, #24]
    1fb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1fbc:	add	r0, r0, r1
    1fc0:	ldr	r1, [fp, #-24]	; 0xffffffe8
    1fc4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1fc8:	sub	r2, r1, r2
    1fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
    1fd0:	movw	r1, #1
    1fd4:	bl	0 <fread>
    1fd8:	str	r0, [sp, #32]
    1fdc:	cmp	r0, #0
    1fe0:	beq	1ff8 <readfile+0x160>
    1fe4:	ldr	r0, [sp, #32]
    1fe8:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1fec:	add	r0, r1, r0
    1ff0:	str	r0, [fp, #-28]	; 0xffffffe4
    1ff4:	b	1fb4 <readfile+0x11c>
    1ff8:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1ffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
    2000:	cmp	r0, r1
    2004:	beq	200c <readfile+0x174>
    2008:	b	2030 <readfile+0x198>
    200c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2010:	bl	0 <fclose>
    2014:	ldr	lr, [fp, #-24]	; 0xffffffe8
    2018:	ldr	r1, [fp, #-16]
    201c:	str	lr, [r1]
    2020:	ldr	r1, [sp, #24]
    2024:	str	r1, [fp, #-4]
    2028:	str	r0, [sp, #8]
    202c:	b	2078 <readfile+0x1e0>
    2030:	ldr	r0, [fp, #-20]	; 0xffffffec
    2034:	movw	r1, #0
    2038:	cmp	r0, r1
    203c:	beq	204c <readfile+0x1b4>
    2040:	ldr	r0, [fp, #-20]	; 0xffffffec
    2044:	bl	0 <fclose>
    2048:	str	r0, [sp, #4]
    204c:	ldr	r0, [sp, #24]
    2050:	movw	r1, #0
    2054:	cmp	r0, r1
    2058:	beq	2064 <readfile+0x1cc>
    205c:	ldr	r0, [sp, #24]
    2060:	bl	0 <free>
    2064:	ldr	r0, [fp, #-24]	; 0xffffffe8
    2068:	ldr	r1, [fp, #-16]
    206c:	str	r0, [r1]
    2070:	movw	r0, #0
    2074:	str	r0, [fp, #-4]
    2078:	ldr	r0, [fp, #-4]
    207c:	mov	sp, fp
    2080:	pop	{fp, pc}

00002084 <__portable_aligned_alloc>:
    2084:	push	{fp, lr}
    2088:	mov	fp, sp
    208c:	sub	sp, sp, #16
    2090:	str	r0, [fp, #-4]
    2094:	str	r1, [sp, #8]
    2098:	movw	r0, #0
    209c:	str	r0, [sp]
    20a0:	ldr	r0, [fp, #-4]
    20a4:	cmp	r0, #4
    20a8:	bcs	20b4 <__portable_aligned_alloc+0x30>
    20ac:	movw	r0, #4
    20b0:	str	r0, [fp, #-4]
    20b4:	ldr	r1, [fp, #-4]
    20b8:	ldr	r2, [sp, #8]
    20bc:	mov	r0, sp
    20c0:	bl	0 <posix_memalign>
    20c4:	str	r0, [sp, #4]
    20c8:	ldr	r0, [sp, #4]
    20cc:	cmp	r0, #0
    20d0:	beq	20f4 <__portable_aligned_alloc+0x70>
    20d4:	ldr	r0, [sp]
    20d8:	movw	r1, #0
    20dc:	cmp	r0, r1
    20e0:	beq	20f4 <__portable_aligned_alloc+0x70>
    20e4:	ldr	r0, [sp]
    20e8:	bl	0 <free>
    20ec:	movw	r0, #0
    20f0:	str	r0, [sp]
    20f4:	ldr	r0, [sp]
    20f8:	mov	sp, fp
    20fc:	pop	{fp, pc}

00002100 <hexdump>:
    2100:	push	{fp, lr}
    2104:	mov	fp, sp
    2108:	sub	sp, sp, #72	; 0x48
    210c:	str	r0, [fp, #-4]
    2110:	str	r1, [fp, #-8]
    2114:	str	r2, [fp, #-12]
    2118:	str	r3, [fp, #-16]
    211c:	ldr	r0, [fp, #-8]
    2120:	str	r0, [sp, #28]
    2124:	ldr	r0, [fp, #-4]
    2128:	movw	r1, #0
    212c:	cmp	r0, r1
    2130:	beq	214c <hexdump+0x4c>
    2134:	ldr	r0, [fp, #-16]
    2138:	ldr	r2, [fp, #-4]
    213c:	movw	r1, #0
    2140:	movt	r1, #0
    2144:	bl	0 <fprintf>
    2148:	str	r0, [sp, #24]
    214c:	movw	r0, #0
    2150:	str	r0, [fp, #-20]	; 0xffffffec
    2154:	ldr	r0, [fp, #-20]	; 0xffffffec
    2158:	ldr	r1, [fp, #-12]
    215c:	cmp	r0, r1
    2160:	bcs	229c <hexdump+0x19c>
    2164:	ldr	r0, [fp, #-20]	; 0xffffffec
    2168:	and	r0, r0, #15
    216c:	cmp	r0, #0
    2170:	bne	21b4 <hexdump+0xb4>
    2174:	ldr	r0, [fp, #-20]	; 0xffffffec
    2178:	cmp	r0, #0
    217c:	beq	2198 <hexdump+0x98>
    2180:	add	r2, sp, #35	; 0x23
    2184:	ldr	r0, [fp, #-16]
    2188:	movw	r1, #0
    218c:	movt	r1, #0
    2190:	bl	0 <fprintf>
    2194:	str	r0, [sp, #20]
    2198:	ldr	r0, [fp, #-16]
    219c:	ldr	r2, [fp, #-20]	; 0xffffffec
    21a0:	movw	r1, #0
    21a4:	movt	r1, #0
    21a8:	bl	0 <fprintf>
    21ac:	str	r0, [sp, #16]
    21b0:	b	21dc <hexdump+0xdc>
    21b4:	ldr	r0, [fp, #-20]	; 0xffffffec
    21b8:	and	r0, r0, #7
    21bc:	cmp	r0, #0
    21c0:	bne	21d8 <hexdump+0xd8>
    21c4:	ldr	r0, [fp, #-16]
    21c8:	movw	r1, #0
    21cc:	movt	r1, #0
    21d0:	bl	0 <fprintf>
    21d4:	str	r0, [sp, #12]
    21d8:	b	21dc <hexdump+0xdc>
    21dc:	ldr	r0, [fp, #-16]
    21e0:	ldr	r1, [sp, #28]
    21e4:	ldr	r2, [fp, #-20]	; 0xffffffec
    21e8:	add	r1, r1, r2
    21ec:	ldrb	r2, [r1]
    21f0:	movw	r1, #0
    21f4:	movt	r1, #0
    21f8:	bl	0 <fprintf>
    21fc:	ldr	r1, [sp, #28]
    2200:	ldr	r2, [fp, #-20]	; 0xffffffec
    2204:	add	r1, r1, r2
    2208:	ldrb	r1, [r1]
    220c:	cmp	r1, #32
    2210:	str	r0, [sp, #8]
    2214:	blt	2230 <hexdump+0x130>
    2218:	ldr	r0, [sp, #28]
    221c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2220:	add	r0, r0, r1
    2224:	ldrb	r0, [r0]
    2228:	cmp	r0, #126	; 0x7e
    222c:	ble	224c <hexdump+0x14c>
    2230:	ldr	r0, [fp, #-20]	; 0xffffffec
    2234:	and	r0, r0, #15
    2238:	add	r1, sp, #35	; 0x23
    223c:	add	r0, r1, r0
    2240:	movw	r1, #46	; 0x2e
    2244:	strb	r1, [r0]
    2248:	b	2270 <hexdump+0x170>
    224c:	ldr	r0, [sp, #28]
    2250:	ldr	r1, [fp, #-20]	; 0xffffffec
    2254:	add	r0, r0, r1
    2258:	ldrb	r0, [r0]
    225c:	ldr	r1, [fp, #-20]	; 0xffffffec
    2260:	and	r1, r1, #15
    2264:	add	r2, sp, #35	; 0x23
    2268:	add	r1, r2, r1
    226c:	strb	r0, [r1]
    2270:	ldr	r0, [fp, #-20]	; 0xffffffec
    2274:	and	r0, r0, #15
    2278:	add	r0, r0, #1
    227c:	add	r1, sp, #35	; 0x23
    2280:	add	r0, r1, r0
    2284:	movw	r1, #0
    2288:	strb	r1, [r0]
    228c:	ldr	r0, [fp, #-20]	; 0xffffffec
    2290:	add	r0, r0, #1
    2294:	str	r0, [fp, #-20]	; 0xffffffec
    2298:	b	2154 <hexdump+0x54>
    229c:	b	22a0 <hexdump+0x1a0>
    22a0:	ldr	r0, [fp, #-20]	; 0xffffffec
    22a4:	and	r0, r0, #15
    22a8:	cmp	r0, #0
    22ac:	beq	22d4 <hexdump+0x1d4>
    22b0:	ldr	r0, [fp, #-16]
    22b4:	movw	r1, #0
    22b8:	movt	r1, #0
    22bc:	bl	0 <fprintf>
    22c0:	ldr	r1, [fp, #-20]	; 0xffffffec
    22c4:	add	r1, r1, #1
    22c8:	str	r1, [fp, #-20]	; 0xffffffec
    22cc:	str	r0, [sp, #4]
    22d0:	b	22a0 <hexdump+0x1a0>
    22d4:	add	r2, sp, #35	; 0x23
    22d8:	ldr	r0, [fp, #-16]
    22dc:	movw	r1, #0
    22e0:	movt	r1, #0
    22e4:	bl	0 <fprintf>
    22e8:	str	r0, [sp]
    22ec:	mov	sp, fp
    22f0:	pop	{fp, pc}

000022f4 <MyGame_Example_Monster_verify_as_root_with_identifier>:
    22f4:	push	{fp, lr}
    22f8:	mov	fp, sp
    22fc:	sub	sp, sp, #16
    2300:	str	r0, [fp, #-4]
    2304:	str	r1, [sp, #8]
    2308:	str	r2, [sp, #4]
    230c:	ldr	r0, [fp, #-4]
    2310:	ldr	r1, [sp, #8]
    2314:	ldr	r2, [sp, #4]
    2318:	movw	r3, #0
    231c:	movt	r3, #0
    2320:	bl	0 <flatcc_verify_table_as_root>
    2324:	mov	sp, fp
    2328:	pop	{fp, pc}

0000232c <MyGame_Example_Monster_verify_as_root>:
    232c:	push	{fp, lr}
    2330:	mov	fp, sp
    2334:	sub	sp, sp, #8
    2338:	str	r0, [sp, #4]
    233c:	str	r1, [sp]
    2340:	ldr	r0, [sp, #4]
    2344:	ldr	r1, [sp]
    2348:	movw	r2, #0
    234c:	movt	r2, #0
    2350:	movw	r3, #0
    2354:	movt	r3, #0
    2358:	bl	0 <flatcc_verify_table_as_root>
    235c:	mov	sp, fp
    2360:	pop	{fp, pc}

00002364 <flatbuffers_has_identifier>:
    2364:	push	{fp, lr}
    2368:	mov	fp, sp
    236c:	sub	sp, sp, #32
    2370:	str	r0, [fp, #-8]
    2374:	str	r1, [fp, #-12]
    2378:	movw	r0, #0
    237c:	str	r0, [sp, #12]
    2380:	ldr	r1, [fp, #-12]
    2384:	cmp	r1, r0
    2388:	bne	2398 <flatbuffers_has_identifier+0x34>
    238c:	movw	r0, #1
    2390:	str	r0, [fp, #-4]
    2394:	b	2404 <flatbuffers_has_identifier+0xa0>
    2398:	add	r0, sp, #12
    239c:	ldr	r1, [fp, #-12]
    23a0:	movw	r2, #4
    23a4:	bl	0 <strncpy>
    23a8:	ldr	r1, [sp, #12]
    23ac:	str	r0, [sp, #8]
    23b0:	mov	r0, r1
    23b4:	bl	2434 <__flatbuffers_thash_cast_from_le>
    23b8:	str	r0, [sp, #12]
    23bc:	ldr	r0, [fp, #-8]
    23c0:	add	r0, r0, #4
    23c4:	bl	2448 <__flatbuffers_thash_read_from_pe>
    23c8:	str	r0, [sp, #16]
    23cc:	ldr	r0, [sp, #12]
    23d0:	cmp	r0, #0
    23d4:	movw	r0, #1
    23d8:	str	r0, [sp, #4]
    23dc:	beq	23f8 <flatbuffers_has_identifier+0x94>
    23e0:	ldr	r0, [sp, #16]
    23e4:	ldr	r1, [sp, #12]
    23e8:	cmp	r0, r1
    23ec:	movw	r0, #0
    23f0:	moveq	r0, #1
    23f4:	str	r0, [sp, #4]
    23f8:	ldr	r0, [sp, #4]
    23fc:	and	r0, r0, #1
    2400:	str	r0, [fp, #-4]
    2404:	ldr	r0, [fp, #-4]
    2408:	mov	sp, fp
    240c:	pop	{fp, pc}

00002410 <__flatbuffers_uoffset_read_from_pe>:
    2410:	push	{fp, lr}
    2414:	mov	fp, sp
    2418:	sub	sp, sp, #8
    241c:	str	r0, [sp, #4]
    2420:	ldr	r0, [sp, #4]
    2424:	ldr	r0, [r0]
    2428:	bl	2480 <__flatbuffers_uoffset_cast_from_pe>
    242c:	mov	sp, fp
    2430:	pop	{fp, pc}

00002434 <__flatbuffers_thash_cast_from_le>:
    2434:	sub	sp, sp, #4
    2438:	str	r0, [sp]
    243c:	ldr	r0, [sp]
    2440:	add	sp, sp, #4
    2444:	bx	lr

00002448 <__flatbuffers_thash_read_from_pe>:
    2448:	push	{fp, lr}
    244c:	mov	fp, sp
    2450:	sub	sp, sp, #8
    2454:	str	r0, [sp, #4]
    2458:	ldr	r0, [sp, #4]
    245c:	ldr	r0, [r0]
    2460:	bl	246c <__flatbuffers_thash_cast_from_pe>
    2464:	mov	sp, fp
    2468:	pop	{fp, pc}

0000246c <__flatbuffers_thash_cast_from_pe>:
    246c:	sub	sp, sp, #4
    2470:	str	r0, [sp]
    2474:	ldr	r0, [sp]
    2478:	add	sp, sp, #4
    247c:	bx	lr

00002480 <__flatbuffers_uoffset_cast_from_pe>:
    2480:	sub	sp, sp, #4
    2484:	str	r0, [sp]
    2488:	ldr	r0, [sp]
    248c:	add	sp, sp, #4
    2490:	bx	lr

00002494 <__flatbuffers_soffset_read_from_pe>:
    2494:	push	{fp, lr}
    2498:	mov	fp, sp
    249c:	sub	sp, sp, #8
    24a0:	str	r0, [sp, #4]
    24a4:	ldr	r0, [sp, #4]
    24a8:	ldr	r0, [r0]
    24ac:	bl	2508 <__flatbuffers_soffset_cast_from_pe>
    24b0:	mov	sp, fp
    24b4:	pop	{fp, pc}

000024b8 <__flatbuffers_voffset_read_from_pe>:
    24b8:	push	{fp, lr}
    24bc:	mov	fp, sp
    24c0:	sub	sp, sp, #8
    24c4:	str	r0, [sp, #4]
    24c8:	ldr	r0, [sp, #4]
    24cc:	ldrh	r0, [r0]
    24d0:	bl	251c <__flatbuffers_voffset_cast_from_pe>
    24d4:	uxth	r0, r0
    24d8:	mov	sp, fp
    24dc:	pop	{fp, pc}

000024e0 <flatbuffers_int16_read_from_pe>:
    24e0:	push	{fp, lr}
    24e4:	mov	fp, sp
    24e8:	sub	sp, sp, #8
    24ec:	str	r0, [sp, #4]
    24f0:	ldr	r0, [sp, #4]
    24f4:	ldrsh	r0, [r0]
    24f8:	bl	2530 <flatbuffers_int16_cast_from_pe>
    24fc:	sxth	r0, r0
    2500:	mov	sp, fp
    2504:	pop	{fp, pc}

00002508 <__flatbuffers_soffset_cast_from_pe>:
    2508:	sub	sp, sp, #4
    250c:	str	r0, [sp]
    2510:	ldr	r0, [sp]
    2514:	add	sp, sp, #4
    2518:	bx	lr

0000251c <__flatbuffers_voffset_cast_from_pe>:
    251c:	sub	sp, sp, #4
    2520:	strh	r0, [sp, #2]
    2524:	ldrh	r0, [sp, #2]
    2528:	add	sp, sp, #4
    252c:	bx	lr

00002530 <flatbuffers_int16_cast_from_pe>:
    2530:	sub	sp, sp, #4
    2534:	strh	r0, [sp, #2]
    2538:	ldrsh	r0, [sp, #2]
    253c:	add	sp, sp, #4
    2540:	bx	lr

00002544 <flatbuffers_float_read_from_pe>:
    2544:	push	{fp, lr}
    2548:	mov	fp, sp
    254c:	sub	sp, sp, #8
    2550:	str	r0, [sp, #4]
    2554:	ldr	r0, [sp, #4]
    2558:	vldr	s0, [r0]
    255c:	bl	2568 <flatbuffers_float_cast_from_pe>
    2560:	mov	sp, fp
    2564:	pop	{fp, pc}

00002568 <flatbuffers_float_cast_from_pe>:
    2568:	sub	sp, sp, #8
    256c:	vstr	s0, [sp, #4]
    2570:	vldr	s0, [sp, #4]
    2574:	vstr	s0, [sp]
    2578:	ldr	r0, [sp]
    257c:	str	r0, [sp]
    2580:	vldr	s0, [sp]
    2584:	add	sp, sp, #8
    2588:	bx	lr

0000258c <flatbuffers_double_read_from_pe>:
    258c:	push	{fp, lr}
    2590:	mov	fp, sp
    2594:	sub	sp, sp, #8
    2598:	str	r0, [sp, #4]
    259c:	ldr	r0, [sp, #4]
    25a0:	vldr	d0, [r0]
    25a4:	bl	25b0 <flatbuffers_double_cast_from_pe>
    25a8:	mov	sp, fp
    25ac:	pop	{fp, pc}

000025b0 <flatbuffers_double_cast_from_pe>:
    25b0:	sub	sp, sp, #16
    25b4:	vstr	d0, [sp, #8]
    25b8:	vldr	d0, [sp, #8]
    25bc:	vstr	d0, [sp]
    25c0:	vldr	d0, [sp]
    25c4:	add	sp, sp, #16
    25c8:	bx	lr

000025cc <MyGame_Example_Color_read_from_pe>:
    25cc:	push	{fp, lr}
    25d0:	mov	fp, sp
    25d4:	sub	sp, sp, #8
    25d8:	str	r0, [sp, #4]
    25dc:	ldr	r0, [sp, #4]
    25e0:	ldrsb	r0, [r0]
    25e4:	bl	25f4 <MyGame_Example_Color_cast_from_pe>
    25e8:	sxtb	r0, r0
    25ec:	mov	sp, fp
    25f0:	pop	{fp, pc}

000025f4 <MyGame_Example_Color_cast_from_pe>:
    25f4:	sub	sp, sp, #4
    25f8:	strb	r0, [sp, #3]
    25fc:	ldrsb	r0, [sp, #3]
    2600:	add	sp, sp, #4
    2604:	bx	lr

00002608 <flatbuffers_int8_read_from_pe>:
    2608:	push	{fp, lr}
    260c:	mov	fp, sp
    2610:	sub	sp, sp, #8
    2614:	str	r0, [sp, #4]
    2618:	ldr	r0, [sp, #4]
    261c:	ldrsb	r0, [r0]
    2620:	bl	2630 <flatbuffers_int8_cast_from_pe>
    2624:	sxtb	r0, r0
    2628:	mov	sp, fp
    262c:	pop	{fp, pc}

00002630 <flatbuffers_int8_cast_from_pe>:
    2630:	sub	sp, sp, #4
    2634:	strb	r0, [sp, #3]
    2638:	ldrsb	r0, [sp, #3]
    263c:	add	sp, sp, #4
    2640:	bx	lr

00002644 <flatbuffers_vec_len>:
    2644:	push	{fp, lr}
    2648:	mov	fp, sp
    264c:	sub	sp, sp, #8
    2650:	str	r0, [sp, #4]
    2654:	ldr	r0, [sp, #4]
    2658:	movw	r1, #0
    265c:	cmp	r0, r1
    2660:	beq	267c <flatbuffers_vec_len+0x38>
    2664:	ldr	r0, [sp, #4]
    2668:	mvn	r1, #3
    266c:	add	r0, r0, r1
    2670:	bl	2410 <__flatbuffers_uoffset_read_from_pe>
    2674:	str	r0, [sp]
    2678:	b	2688 <flatbuffers_vec_len+0x44>
    267c:	movw	r0, #0
    2680:	str	r0, [sp]
    2684:	b	2688 <flatbuffers_vec_len+0x44>
    2688:	ldr	r0, [sp]
    268c:	mov	sp, fp
    2690:	pop	{fp, pc}

00002694 <flatbuffers_uint8_read_from_pe>:
    2694:	push	{fp, lr}
    2698:	mov	fp, sp
    269c:	sub	sp, sp, #8
    26a0:	str	r0, [sp, #4]
    26a4:	ldr	r0, [sp, #4]
    26a8:	ldrb	r0, [r0]
    26ac:	bl	26bc <flatbuffers_uint8_cast_from_pe>
    26b0:	and	r0, r0, #255	; 0xff
    26b4:	mov	sp, fp
    26b8:	pop	{fp, pc}

000026bc <flatbuffers_uint8_cast_from_pe>:
    26bc:	sub	sp, sp, #4
    26c0:	strb	r0, [sp, #3]
    26c4:	ldrb	r0, [sp, #3]
    26c8:	add	sp, sp, #4
    26cc:	bx	lr

000026d0 <__flatbuffers_utype_read_from_pe>:
    26d0:	push	{fp, lr}
    26d4:	mov	fp, sp
    26d8:	sub	sp, sp, #8
    26dc:	str	r0, [sp, #4]
    26e0:	ldr	r0, [sp, #4]
    26e4:	ldrb	r0, [r0]
    26e8:	bl	26f8 <__flatbuffers_utype_cast_from_pe>
    26ec:	and	r0, r0, #255	; 0xff
    26f0:	mov	sp, fp
    26f4:	pop	{fp, pc}

000026f8 <__flatbuffers_utype_cast_from_pe>:
    26f8:	sub	sp, sp, #4
    26fc:	strb	r0, [sp, #3]
    2700:	ldrb	r0, [sp, #3]
    2704:	add	sp, sp, #4
    2708:	bx	lr

0000270c <flatbuffers_int32_read_from_pe>:
    270c:	push	{fp, lr}
    2710:	mov	fp, sp
    2714:	sub	sp, sp, #8
    2718:	str	r0, [sp, #4]
    271c:	ldr	r0, [sp, #4]
    2720:	ldr	r0, [r0]
    2724:	bl	2730 <flatbuffers_int32_cast_from_pe>
    2728:	mov	sp, fp
    272c:	pop	{fp, pc}

00002730 <flatbuffers_int32_cast_from_pe>:
    2730:	sub	sp, sp, #4
    2734:	str	r0, [sp]
    2738:	ldr	r0, [sp]
    273c:	add	sp, sp, #4
    2740:	bx	lr

00002744 <flatbuffers_uint32_read_from_pe>:
    2744:	push	{fp, lr}
    2748:	mov	fp, sp
    274c:	sub	sp, sp, #8
    2750:	str	r0, [sp, #4]
    2754:	ldr	r0, [sp, #4]
    2758:	ldr	r0, [r0]
    275c:	bl	2768 <flatbuffers_uint32_cast_from_pe>
    2760:	mov	sp, fp
    2764:	pop	{fp, pc}

00002768 <flatbuffers_uint32_cast_from_pe>:
    2768:	sub	sp, sp, #4
    276c:	str	r0, [sp]
    2770:	ldr	r0, [sp]
    2774:	add	sp, sp, #4
    2778:	bx	lr

0000277c <flatbuffers_int64_read_from_pe>:
    277c:	push	{fp, lr}
    2780:	mov	fp, sp
    2784:	sub	sp, sp, #8
    2788:	str	r0, [sp, #4]
    278c:	ldr	r0, [sp, #4]
    2790:	ldr	r1, [r0]
    2794:	ldr	r0, [r0, #4]
    2798:	str	r0, [sp]
    279c:	mov	r0, r1
    27a0:	ldr	r1, [sp]
    27a4:	bl	27b0 <flatbuffers_int64_cast_from_pe>
    27a8:	mov	sp, fp
    27ac:	pop	{fp, pc}

000027b0 <flatbuffers_int64_cast_from_pe>:
    27b0:	sub	sp, sp, #8
    27b4:	str	r0, [sp]
    27b8:	str	r1, [sp, #4]
    27bc:	ldr	r0, [sp]
    27c0:	ldr	r1, [sp, #4]
    27c4:	add	sp, sp, #8
    27c8:	bx	lr

000027cc <flatbuffers_uint64_read_from_pe>:
    27cc:	push	{fp, lr}
    27d0:	mov	fp, sp
    27d4:	sub	sp, sp, #8
    27d8:	str	r0, [sp, #4]
    27dc:	ldr	r0, [sp, #4]
    27e0:	ldr	r1, [r0]
    27e4:	ldr	r0, [r0, #4]
    27e8:	str	r0, [sp]
    27ec:	mov	r0, r1
    27f0:	ldr	r1, [sp]
    27f4:	bl	2800 <flatbuffers_uint64_cast_from_pe>
    27f8:	mov	sp, fp
    27fc:	pop	{fp, pc}

00002800 <flatbuffers_uint64_cast_from_pe>:
    2800:	sub	sp, sp, #8
    2804:	str	r0, [sp]
    2808:	str	r1, [sp, #4]
    280c:	ldr	r0, [sp]
    2810:	ldr	r1, [sp, #4]
    2814:	add	sp, sp, #8
    2818:	bx	lr

0000281c <MyGame_Example_Monster_verify_table>:
    281c:	push	{fp, lr}
    2820:	mov	fp, sp
    2824:	sub	sp, sp, #48	; 0x30
    2828:	str	r0, [fp, #-8]
    282c:	ldr	r0, [fp, #-8]
    2830:	movw	r1, #0
    2834:	uxth	r1, r1
    2838:	movw	r2, #32
    283c:	movw	r3, #16
    2840:	uxth	r3, r3
    2844:	bl	0 <flatcc_verify_field>
    2848:	str	r0, [fp, #-12]
    284c:	cmp	r0, #0
    2850:	beq	2860 <MyGame_Example_Monster_verify_table+0x44>
    2854:	ldr	r0, [fp, #-12]
    2858:	str	r0, [fp, #-4]
    285c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2860:	ldr	r0, [fp, #-8]
    2864:	movw	r1, #2
    2868:	uxth	r2, r1
    286c:	str	r1, [fp, #-16]
    2870:	mov	r1, r2
    2874:	movw	r2, #2
    2878:	ldr	r3, [fp, #-16]
    287c:	uxth	r3, r3
    2880:	bl	0 <flatcc_verify_field>
    2884:	str	r0, [fp, #-12]
    2888:	cmp	r0, #0
    288c:	beq	289c <MyGame_Example_Monster_verify_table+0x80>
    2890:	ldr	r0, [fp, #-12]
    2894:	str	r0, [fp, #-4]
    2898:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    289c:	ldr	r0, [fp, #-8]
    28a0:	movw	r1, #1
    28a4:	uxth	r1, r1
    28a8:	movw	r2, #2
    28ac:	movw	r3, #2
    28b0:	uxth	r3, r3
    28b4:	bl	0 <flatcc_verify_field>
    28b8:	str	r0, [fp, #-12]
    28bc:	cmp	r0, #0
    28c0:	beq	28d0 <MyGame_Example_Monster_verify_table+0xb4>
    28c4:	ldr	r0, [fp, #-12]
    28c8:	str	r0, [fp, #-4]
    28cc:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    28d0:	ldr	r0, [fp, #-8]
    28d4:	movw	r1, #3
    28d8:	uxth	r1, r1
    28dc:	movw	r2, #1
    28e0:	bl	0 <flatcc_verify_string_field>
    28e4:	str	r0, [fp, #-12]
    28e8:	cmp	r0, #0
    28ec:	beq	28fc <MyGame_Example_Monster_verify_table+0xe0>
    28f0:	ldr	r0, [fp, #-12]
    28f4:	str	r0, [fp, #-4]
    28f8:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    28fc:	ldr	r0, [fp, #-8]
    2900:	movw	r1, #6
    2904:	uxth	r1, r1
    2908:	movw	r2, #1
    290c:	movw	r3, #1
    2910:	uxth	r3, r3
    2914:	bl	0 <flatcc_verify_field>
    2918:	str	r0, [fp, #-12]
    291c:	cmp	r0, #0
    2920:	beq	2930 <MyGame_Example_Monster_verify_table+0x114>
    2924:	ldr	r0, [fp, #-12]
    2928:	str	r0, [fp, #-4]
    292c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2930:	ldr	r0, [fp, #-8]
    2934:	movw	r1, #5
    2938:	uxth	r1, r1
    293c:	movw	r2, #0
    2940:	movw	r3, #1
    2944:	movw	ip, #1
    2948:	uxth	ip, ip
    294c:	str	ip, [sp]
    2950:	mvn	ip, #0
    2954:	str	ip, [sp, #4]
    2958:	bl	0 <flatcc_verify_vector_field>
    295c:	str	r0, [fp, #-12]
    2960:	cmp	r0, #0
    2964:	beq	2974 <MyGame_Example_Monster_verify_table+0x158>
    2968:	ldr	r0, [fp, #-12]
    296c:	str	r0, [fp, #-4]
    2970:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2974:	ldr	r0, [fp, #-8]
    2978:	movw	r1, #11
    297c:	uxth	r1, r1
    2980:	movw	r2, #0
    2984:	movw	r3, #0
    2988:	movt	r3, #0
    298c:	bl	0 <flatcc_verify_table_vector_field>
    2990:	str	r0, [fp, #-12]
    2994:	cmp	r0, #0
    2998:	beq	29a8 <MyGame_Example_Monster_verify_table+0x18c>
    299c:	ldr	r0, [fp, #-12]
    29a0:	str	r0, [fp, #-4]
    29a4:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    29a8:	ldr	r0, [fp, #-8]
    29ac:	movw	r1, #10
    29b0:	uxth	r1, r1
    29b4:	movw	r2, #0
    29b8:	bl	0 <flatcc_verify_string_vector_field>
    29bc:	str	r0, [fp, #-12]
    29c0:	cmp	r0, #0
    29c4:	beq	29d4 <MyGame_Example_Monster_verify_table+0x1b8>
    29c8:	ldr	r0, [fp, #-12]
    29cc:	str	r0, [fp, #-4]
    29d0:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    29d4:	ldr	r0, [fp, #-8]
    29d8:	movw	r1, #28
    29dc:	uxth	r1, r1
    29e0:	movw	r2, #0
    29e4:	bl	0 <flatcc_verify_string_vector_field>
    29e8:	str	r0, [fp, #-12]
    29ec:	cmp	r0, #0
    29f0:	beq	2a00 <MyGame_Example_Monster_verify_table+0x1e4>
    29f4:	ldr	r0, [fp, #-12]
    29f8:	str	r0, [fp, #-4]
    29fc:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2a00:	ldr	r0, [fp, #-8]
    2a04:	movw	r1, #24
    2a08:	uxth	r1, r1
    2a0c:	movw	r2, #0
    2a10:	movw	r3, #1
    2a14:	movw	ip, #1
    2a18:	uxth	ip, ip
    2a1c:	str	ip, [sp]
    2a20:	mvn	ip, #0
    2a24:	str	ip, [sp, #4]
    2a28:	bl	0 <flatcc_verify_vector_field>
    2a2c:	str	r0, [fp, #-12]
    2a30:	cmp	r0, #0
    2a34:	beq	2a44 <MyGame_Example_Monster_verify_table+0x228>
    2a38:	ldr	r0, [fp, #-12]
    2a3c:	str	r0, [fp, #-4]
    2a40:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2a44:	ldr	r0, [pc, #1440]	; 2fec <MyGame_Example_Monster_verify_table+0x7d0>
    2a48:	ldr	r1, [fp, #-8]
    2a4c:	str	r0, [fp, #-20]	; 0xffffffec
    2a50:	mov	r0, r1
    2a54:	movw	r1, #29
    2a58:	uxth	r1, r1
    2a5c:	movw	r2, #0
    2a60:	movw	r3, #8
    2a64:	movw	ip, #4
    2a68:	uxth	ip, ip
    2a6c:	str	ip, [sp]
    2a70:	ldr	ip, [fp, #-20]	; 0xffffffec
    2a74:	str	ip, [sp, #4]
    2a78:	bl	0 <flatcc_verify_vector_field>
    2a7c:	str	r0, [fp, #-12]
    2a80:	cmp	r0, #0
    2a84:	beq	2a94 <MyGame_Example_Monster_verify_table+0x278>
    2a88:	ldr	r0, [fp, #-12]
    2a8c:	str	r0, [fp, #-4]
    2a90:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2a94:	ldr	r0, [fp, #-8]
    2a98:	movw	r1, #12
    2a9c:	uxth	r1, r1
    2aa0:	movw	r2, #0
    2aa4:	movw	r3, #0
    2aa8:	movt	r3, #0
    2aac:	bl	0 <flatcc_verify_table_field>
    2ab0:	str	r0, [fp, #-12]
    2ab4:	cmp	r0, #0
    2ab8:	beq	2ac8 <MyGame_Example_Monster_verify_table+0x2ac>
    2abc:	ldr	r0, [fp, #-12]
    2ac0:	str	r0, [fp, #-4]
    2ac4:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2ac8:	ldr	r0, [fp, #-8]
    2acc:	movw	r1, #8
    2ad0:	uxth	r1, r1
    2ad4:	movw	r2, #0
    2ad8:	movw	r3, #0
    2adc:	movt	r3, #0
    2ae0:	bl	0 <flatcc_verify_union_field>
    2ae4:	str	r0, [fp, #-12]
    2ae8:	cmp	r0, #0
    2aec:	beq	2afc <MyGame_Example_Monster_verify_table+0x2e0>
    2af0:	ldr	r0, [fp, #-12]
    2af4:	str	r0, [fp, #-4]
    2af8:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2afc:	ldr	r0, [pc, #1260]	; 2ff0 <MyGame_Example_Monster_verify_table+0x7d4>
    2b00:	ldr	r1, [fp, #-8]
    2b04:	str	r0, [sp, #24]
    2b08:	mov	r0, r1
    2b0c:	movw	r1, #9
    2b10:	uxth	r1, r1
    2b14:	movw	r2, #0
    2b18:	movw	r3, #4
    2b1c:	movw	ip, #2
    2b20:	uxth	ip, ip
    2b24:	str	ip, [sp]
    2b28:	ldr	ip, [sp, #24]
    2b2c:	str	ip, [sp, #4]
    2b30:	bl	0 <flatcc_verify_vector_field>
    2b34:	str	r0, [fp, #-12]
    2b38:	cmp	r0, #0
    2b3c:	beq	2b4c <MyGame_Example_Monster_verify_table+0x330>
    2b40:	ldr	r0, [fp, #-12]
    2b44:	str	r0, [fp, #-4]
    2b48:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2b4c:	ldr	r0, [pc, #1180]	; 2ff0 <MyGame_Example_Monster_verify_table+0x7d4>
    2b50:	ldr	r1, [fp, #-8]
    2b54:	str	r0, [sp, #20]
    2b58:	mov	r0, r1
    2b5c:	movw	r1, #31
    2b60:	uxth	r1, r1
    2b64:	movw	r2, #0
    2b68:	movw	r3, #4
    2b6c:	movw	ip, #2
    2b70:	uxth	ip, ip
    2b74:	str	ip, [sp]
    2b78:	ldr	ip, [sp, #20]
    2b7c:	str	ip, [sp, #4]
    2b80:	bl	0 <flatcc_verify_vector_field>
    2b84:	str	r0, [fp, #-12]
    2b88:	cmp	r0, #0
    2b8c:	beq	2b9c <MyGame_Example_Monster_verify_table+0x380>
    2b90:	ldr	r0, [fp, #-12]
    2b94:	str	r0, [fp, #-4]
    2b98:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2b9c:	ldr	r0, [fp, #-8]
    2ba0:	movw	r1, #13
    2ba4:	uxth	r1, r1
    2ba8:	movw	r2, #0
    2bac:	str	r2, [sp, #16]
    2bb0:	ldr	r3, [sp, #16]
    2bb4:	movw	ip, #1
    2bb8:	uxth	ip, ip
    2bbc:	str	ip, [sp]
    2bc0:	movw	ip, #0
    2bc4:	movt	ip, #0
    2bc8:	str	ip, [sp, #4]
    2bcc:	bl	0 <flatcc_verify_table_as_nested_root>
    2bd0:	str	r0, [fp, #-12]
    2bd4:	cmp	r0, #0
    2bd8:	beq	2be8 <MyGame_Example_Monster_verify_table+0x3cc>
    2bdc:	ldr	r0, [fp, #-12]
    2be0:	str	r0, [fp, #-4]
    2be4:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2be8:	ldr	r0, [fp, #-8]
    2bec:	movw	r1, #14
    2bf0:	uxth	r1, r1
    2bf4:	movw	r2, #0
    2bf8:	movw	r3, #0
    2bfc:	movt	r3, #0
    2c00:	bl	0 <flatcc_verify_table_field>
    2c04:	str	r0, [fp, #-12]
    2c08:	cmp	r0, #0
    2c0c:	beq	2c1c <MyGame_Example_Monster_verify_table+0x400>
    2c10:	ldr	r0, [fp, #-12]
    2c14:	str	r0, [fp, #-4]
    2c18:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2c1c:	ldr	r0, [fp, #-8]
    2c20:	movw	r1, #15
    2c24:	uxth	r1, r1
    2c28:	movw	r2, #1
    2c2c:	movw	r3, #1
    2c30:	uxth	r3, r3
    2c34:	bl	0 <flatcc_verify_field>
    2c38:	str	r0, [fp, #-12]
    2c3c:	cmp	r0, #0
    2c40:	beq	2c50 <MyGame_Example_Monster_verify_table+0x434>
    2c44:	ldr	r0, [fp, #-12]
    2c48:	str	r0, [fp, #-4]
    2c4c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2c50:	ldr	r0, [fp, #-8]
    2c54:	movw	r1, #16
    2c58:	uxth	r1, r1
    2c5c:	movw	r2, #4
    2c60:	movw	r3, #4
    2c64:	uxth	r3, r3
    2c68:	bl	0 <flatcc_verify_field>
    2c6c:	str	r0, [fp, #-12]
    2c70:	cmp	r0, #0
    2c74:	beq	2c84 <MyGame_Example_Monster_verify_table+0x468>
    2c78:	ldr	r0, [fp, #-12]
    2c7c:	str	r0, [fp, #-4]
    2c80:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2c84:	ldr	r0, [fp, #-8]
    2c88:	movw	r1, #17
    2c8c:	uxth	r1, r1
    2c90:	movw	r2, #4
    2c94:	movw	r3, #4
    2c98:	uxth	r3, r3
    2c9c:	bl	0 <flatcc_verify_field>
    2ca0:	str	r0, [fp, #-12]
    2ca4:	cmp	r0, #0
    2ca8:	beq	2cb8 <MyGame_Example_Monster_verify_table+0x49c>
    2cac:	ldr	r0, [fp, #-12]
    2cb0:	str	r0, [fp, #-4]
    2cb4:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2cb8:	ldr	r0, [fp, #-8]
    2cbc:	movw	r1, #18
    2cc0:	uxth	r1, r1
    2cc4:	movw	r2, #8
    2cc8:	movw	r3, #8
    2ccc:	uxth	r3, r3
    2cd0:	bl	0 <flatcc_verify_field>
    2cd4:	str	r0, [fp, #-12]
    2cd8:	cmp	r0, #0
    2cdc:	beq	2cec <MyGame_Example_Monster_verify_table+0x4d0>
    2ce0:	ldr	r0, [fp, #-12]
    2ce4:	str	r0, [fp, #-4]
    2ce8:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2cec:	ldr	r0, [fp, #-8]
    2cf0:	movw	r1, #19
    2cf4:	uxth	r1, r1
    2cf8:	movw	r2, #8
    2cfc:	movw	r3, #8
    2d00:	uxth	r3, r3
    2d04:	bl	0 <flatcc_verify_field>
    2d08:	str	r0, [fp, #-12]
    2d0c:	cmp	r0, #0
    2d10:	beq	2d20 <MyGame_Example_Monster_verify_table+0x504>
    2d14:	ldr	r0, [fp, #-12]
    2d18:	str	r0, [fp, #-4]
    2d1c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2d20:	ldr	r0, [fp, #-8]
    2d24:	movw	r1, #20
    2d28:	uxth	r1, r1
    2d2c:	movw	r2, #4
    2d30:	movw	r3, #4
    2d34:	uxth	r3, r3
    2d38:	bl	0 <flatcc_verify_field>
    2d3c:	str	r0, [fp, #-12]
    2d40:	cmp	r0, #0
    2d44:	beq	2d54 <MyGame_Example_Monster_verify_table+0x538>
    2d48:	ldr	r0, [fp, #-12]
    2d4c:	str	r0, [fp, #-4]
    2d50:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2d54:	ldr	r0, [fp, #-8]
    2d58:	movw	r1, #21
    2d5c:	uxth	r1, r1
    2d60:	movw	r2, #4
    2d64:	movw	r3, #4
    2d68:	uxth	r3, r3
    2d6c:	bl	0 <flatcc_verify_field>
    2d70:	str	r0, [fp, #-12]
    2d74:	cmp	r0, #0
    2d78:	beq	2d88 <MyGame_Example_Monster_verify_table+0x56c>
    2d7c:	ldr	r0, [fp, #-12]
    2d80:	str	r0, [fp, #-4]
    2d84:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2d88:	ldr	r0, [fp, #-8]
    2d8c:	movw	r1, #22
    2d90:	uxth	r1, r1
    2d94:	movw	r2, #8
    2d98:	movw	r3, #8
    2d9c:	uxth	r3, r3
    2da0:	bl	0 <flatcc_verify_field>
    2da4:	str	r0, [fp, #-12]
    2da8:	cmp	r0, #0
    2dac:	beq	2dbc <MyGame_Example_Monster_verify_table+0x5a0>
    2db0:	ldr	r0, [fp, #-12]
    2db4:	str	r0, [fp, #-4]
    2db8:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2dbc:	ldr	r0, [fp, #-8]
    2dc0:	movw	r1, #23
    2dc4:	uxth	r1, r1
    2dc8:	movw	r2, #8
    2dcc:	movw	r3, #8
    2dd0:	uxth	r3, r3
    2dd4:	bl	0 <flatcc_verify_field>
    2dd8:	str	r0, [fp, #-12]
    2ddc:	cmp	r0, #0
    2de0:	beq	2df0 <MyGame_Example_Monster_verify_table+0x5d4>
    2de4:	ldr	r0, [fp, #-12]
    2de8:	str	r0, [fp, #-4]
    2dec:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2df0:	ldr	r0, [fp, #-8]
    2df4:	movw	r1, #25
    2df8:	uxth	r1, r1
    2dfc:	movw	r2, #4
    2e00:	movw	r3, #4
    2e04:	uxth	r3, r3
    2e08:	bl	0 <flatcc_verify_field>
    2e0c:	str	r0, [fp, #-12]
    2e10:	cmp	r0, #0
    2e14:	beq	2e24 <MyGame_Example_Monster_verify_table+0x608>
    2e18:	ldr	r0, [fp, #-12]
    2e1c:	str	r0, [fp, #-4]
    2e20:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2e24:	ldr	r0, [fp, #-8]
    2e28:	movw	r1, #26
    2e2c:	uxth	r1, r1
    2e30:	movw	r2, #4
    2e34:	movw	r3, #4
    2e38:	uxth	r3, r3
    2e3c:	bl	0 <flatcc_verify_field>
    2e40:	str	r0, [fp, #-12]
    2e44:	cmp	r0, #0
    2e48:	beq	2e58 <MyGame_Example_Monster_verify_table+0x63c>
    2e4c:	ldr	r0, [fp, #-12]
    2e50:	str	r0, [fp, #-4]
    2e54:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2e58:	ldr	r0, [fp, #-8]
    2e5c:	movw	r1, #27
    2e60:	uxth	r1, r1
    2e64:	movw	r2, #4
    2e68:	movw	r3, #4
    2e6c:	uxth	r3, r3
    2e70:	bl	0 <flatcc_verify_field>
    2e74:	str	r0, [fp, #-12]
    2e78:	cmp	r0, #0
    2e7c:	beq	2e8c <MyGame_Example_Monster_verify_table+0x670>
    2e80:	ldr	r0, [fp, #-12]
    2e84:	str	r0, [fp, #-4]
    2e88:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2e8c:	ldr	r0, [fp, #-8]
    2e90:	movw	r1, #30
    2e94:	uxth	r1, r1
    2e98:	movw	r2, #0
    2e9c:	movw	r3, #1
    2ea0:	movw	ip, #1
    2ea4:	uxth	ip, ip
    2ea8:	str	ip, [sp]
    2eac:	mvn	ip, #0
    2eb0:	str	ip, [sp, #4]
    2eb4:	bl	0 <flatcc_verify_vector_field>
    2eb8:	str	r0, [fp, #-12]
    2ebc:	cmp	r0, #0
    2ec0:	beq	2ed0 <MyGame_Example_Monster_verify_table+0x6b4>
    2ec4:	ldr	r0, [fp, #-12]
    2ec8:	str	r0, [fp, #-4]
    2ecc:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2ed0:	ldr	r0, [pc, #276]	; 2fec <MyGame_Example_Monster_verify_table+0x7d0>
    2ed4:	ldr	r1, [fp, #-8]
    2ed8:	str	r0, [sp, #12]
    2edc:	mov	r0, r1
    2ee0:	movw	r1, #32
    2ee4:	uxth	r1, r1
    2ee8:	movw	r2, #0
    2eec:	movw	r3, #8
    2ef0:	movw	ip, #8
    2ef4:	uxth	ip, ip
    2ef8:	str	ip, [sp]
    2efc:	ldr	ip, [sp, #12]
    2f00:	str	ip, [sp, #4]
    2f04:	bl	0 <flatcc_verify_vector_field>
    2f08:	str	r0, [fp, #-12]
    2f0c:	cmp	r0, #0
    2f10:	beq	2f20 <MyGame_Example_Monster_verify_table+0x704>
    2f14:	ldr	r0, [fp, #-12]
    2f18:	str	r0, [fp, #-4]
    2f1c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2f20:	ldr	r0, [pc, #196]	; 2fec <MyGame_Example_Monster_verify_table+0x7d0>
    2f24:	ldr	r1, [fp, #-8]
    2f28:	str	r0, [sp, #8]
    2f2c:	mov	r0, r1
    2f30:	movw	r1, #33	; 0x21
    2f34:	uxth	r1, r1
    2f38:	movw	r2, #0
    2f3c:	movw	r3, #8
    2f40:	movw	ip, #8
    2f44:	uxth	ip, ip
    2f48:	str	ip, [sp]
    2f4c:	ldr	ip, [sp, #8]
    2f50:	str	ip, [sp, #4]
    2f54:	bl	0 <flatcc_verify_vector_field>
    2f58:	str	r0, [fp, #-12]
    2f5c:	cmp	r0, #0
    2f60:	beq	2f70 <MyGame_Example_Monster_verify_table+0x754>
    2f64:	ldr	r0, [fp, #-12]
    2f68:	str	r0, [fp, #-4]
    2f6c:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2f70:	ldr	r0, [fp, #-8]
    2f74:	movw	r1, #34	; 0x22
    2f78:	uxth	r1, r1
    2f7c:	movw	r2, #0
    2f80:	movw	r3, #0
    2f84:	movt	r3, #0
    2f88:	bl	0 <flatcc_verify_table_field>
    2f8c:	str	r0, [fp, #-12]
    2f90:	cmp	r0, #0
    2f94:	beq	2fa4 <MyGame_Example_Monster_verify_table+0x788>
    2f98:	ldr	r0, [fp, #-12]
    2f9c:	str	r0, [fp, #-4]
    2fa0:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2fa4:	ldr	r0, [fp, #-8]
    2fa8:	movw	r1, #35	; 0x23
    2fac:	uxth	r1, r1
    2fb0:	movw	r2, #0
    2fb4:	movw	r3, #0
    2fb8:	movt	r3, #0
    2fbc:	bl	0 <flatcc_verify_table_field>
    2fc0:	str	r0, [fp, #-12]
    2fc4:	cmp	r0, #0
    2fc8:	beq	2fd8 <MyGame_Example_Monster_verify_table+0x7bc>
    2fcc:	ldr	r0, [fp, #-12]
    2fd0:	str	r0, [fp, #-4]
    2fd4:	b	2fe0 <MyGame_Example_Monster_verify_table+0x7c4>
    2fd8:	movw	r0, #0
    2fdc:	str	r0, [fp, #-4]
    2fe0:	ldr	r0, [fp, #-4]
    2fe4:	mov	sp, fp
    2fe8:	pop	{fp, pc}
    2fec:	.word	0x1fffffff
    2ff0:	.word	0x3fffffff

00002ff4 <MyGame_Example_Any_union_verifier>:
    2ff4:	push	{fp, lr}
    2ff8:	mov	fp, sp
    2ffc:	sub	sp, sp, #16
    3000:	str	r0, [sp, #8]
    3004:	ldr	r0, [sp, #8]
    3008:	ldrb	r0, [r0, #12]
    300c:	sub	r0, r0, #1
    3010:	cmp	r0, #3
    3014:	str	r0, [sp, #4]
    3018:	bhi	309c <MyGame_Example_Any_union_verifier+0xa8>
    301c:	add	r0, pc, #8
    3020:	ldr	r1, [sp, #4]
    3024:	ldr	r0, [r0, r1, lsl #2]
    3028:	mov	pc, r0
    302c:	.word	0x0000303c
    3030:	.word	0x00003054
    3034:	.word	0x0000306c
    3038:	.word	0x00003084
    303c:	ldr	r0, [sp, #8]
    3040:	movw	r1, #0
    3044:	movt	r1, #0
    3048:	bl	0 <flatcc_verify_union_table>
    304c:	str	r0, [fp, #-4]
    3050:	b	30a4 <MyGame_Example_Any_union_verifier+0xb0>
    3054:	ldr	r0, [sp, #8]
    3058:	movw	r1, #0
    305c:	movt	r1, #0
    3060:	bl	0 <flatcc_verify_union_table>
    3064:	str	r0, [fp, #-4]
    3068:	b	30a4 <MyGame_Example_Any_union_verifier+0xb0>
    306c:	ldr	r0, [sp, #8]
    3070:	movw	r1, #0
    3074:	movt	r1, #0
    3078:	bl	0 <flatcc_verify_union_table>
    307c:	str	r0, [fp, #-4]
    3080:	b	30a4 <MyGame_Example_Any_union_verifier+0xb0>
    3084:	ldr	r0, [sp, #8]
    3088:	movw	r1, #0
    308c:	movt	r1, #0
    3090:	bl	0 <flatcc_verify_union_table>
    3094:	str	r0, [fp, #-4]
    3098:	b	30a4 <MyGame_Example_Any_union_verifier+0xb0>
    309c:	movw	r0, #0
    30a0:	str	r0, [fp, #-4]
    30a4:	ldr	r0, [fp, #-4]
    30a8:	mov	sp, fp
    30ac:	pop	{fp, pc}

000030b0 <MyGame_Example_Stat_verify_table>:
    30b0:	push	{fp, lr}
    30b4:	mov	fp, sp
    30b8:	sub	sp, sp, #16
    30bc:	str	r0, [sp, #8]
    30c0:	ldr	r0, [sp, #8]
    30c4:	movw	r1, #0
    30c8:	uxth	r1, r1
    30cc:	movw	r2, #0
    30d0:	bl	0 <flatcc_verify_string_field>
    30d4:	str	r0, [sp, #4]
    30d8:	cmp	r0, #0
    30dc:	beq	30ec <MyGame_Example_Stat_verify_table+0x3c>
    30e0:	ldr	r0, [sp, #4]
    30e4:	str	r0, [fp, #-4]
    30e8:	b	3164 <MyGame_Example_Stat_verify_table+0xb4>
    30ec:	ldr	r0, [sp, #8]
    30f0:	movw	r1, #1
    30f4:	uxth	r1, r1
    30f8:	movw	r2, #8
    30fc:	movw	r3, #8
    3100:	uxth	r3, r3
    3104:	bl	0 <flatcc_verify_field>
    3108:	str	r0, [sp, #4]
    310c:	cmp	r0, #0
    3110:	beq	3120 <MyGame_Example_Stat_verify_table+0x70>
    3114:	ldr	r0, [sp, #4]
    3118:	str	r0, [fp, #-4]
    311c:	b	3164 <MyGame_Example_Stat_verify_table+0xb4>
    3120:	ldr	r0, [sp, #8]
    3124:	movw	r1, #2
    3128:	uxth	r2, r1
    312c:	str	r1, [sp]
    3130:	mov	r1, r2
    3134:	movw	r2, #2
    3138:	ldr	r3, [sp]
    313c:	uxth	r3, r3
    3140:	bl	0 <flatcc_verify_field>
    3144:	str	r0, [sp, #4]
    3148:	cmp	r0, #0
    314c:	beq	315c <MyGame_Example_Stat_verify_table+0xac>
    3150:	ldr	r0, [sp, #4]
    3154:	str	r0, [fp, #-4]
    3158:	b	3164 <MyGame_Example_Stat_verify_table+0xb4>
    315c:	movw	r0, #0
    3160:	str	r0, [fp, #-4]
    3164:	ldr	r0, [fp, #-4]
    3168:	mov	sp, fp
    316c:	pop	{fp, pc}

00003170 <MyGame_InParentNamespace_verify_table>:
    3170:	sub	sp, sp, #4
    3174:	str	r0, [sp]
    3178:	movw	r0, #0
    317c:	add	sp, sp, #4
    3180:	bx	lr

00003184 <MyGame_Example_TestBase64_verify_table>:
    3184:	push	{fp, lr}
    3188:	mov	fp, sp
    318c:	sub	sp, sp, #32
    3190:	str	r0, [fp, #-8]
    3194:	ldr	r0, [fp, #-8]
    3198:	movw	r1, #0
    319c:	uxth	r1, r1
    31a0:	movw	r2, #0
    31a4:	movw	r3, #1
    31a8:	movw	ip, #1
    31ac:	uxth	ip, ip
    31b0:	str	ip, [sp]
    31b4:	mvn	ip, #0
    31b8:	str	ip, [sp, #4]
    31bc:	bl	0 <flatcc_verify_vector_field>
    31c0:	str	r0, [fp, #-12]
    31c4:	cmp	r0, #0
    31c8:	beq	31d8 <MyGame_Example_TestBase64_verify_table+0x54>
    31cc:	ldr	r0, [fp, #-12]
    31d0:	str	r0, [fp, #-4]
    31d4:	b	3278 <MyGame_Example_TestBase64_verify_table+0xf4>
    31d8:	ldr	r0, [fp, #-8]
    31dc:	movw	r1, #1
    31e0:	uxth	r2, r1
    31e4:	str	r1, [sp, #16]
    31e8:	mov	r1, r2
    31ec:	movw	r2, #0
    31f0:	movw	r3, #1
    31f4:	ldr	ip, [sp, #16]
    31f8:	uxth	lr, ip
    31fc:	str	lr, [sp]
    3200:	mvn	lr, #0
    3204:	str	lr, [sp, #4]
    3208:	bl	0 <flatcc_verify_vector_field>
    320c:	str	r0, [fp, #-12]
    3210:	cmp	r0, #0
    3214:	beq	3224 <MyGame_Example_TestBase64_verify_table+0xa0>
    3218:	ldr	r0, [fp, #-12]
    321c:	str	r0, [fp, #-4]
    3220:	b	3278 <MyGame_Example_TestBase64_verify_table+0xf4>
    3224:	ldr	r0, [fp, #-8]
    3228:	movw	r1, #2
    322c:	uxth	r1, r1
    3230:	movw	r2, #0
    3234:	str	r2, [sp, #12]
    3238:	ldr	r3, [sp, #12]
    323c:	movw	ip, #1
    3240:	uxth	ip, ip
    3244:	str	ip, [sp]
    3248:	movw	ip, #0
    324c:	movt	ip, #0
    3250:	str	ip, [sp, #4]
    3254:	bl	0 <flatcc_verify_table_as_nested_root>
    3258:	str	r0, [fp, #-12]
    325c:	cmp	r0, #0
    3260:	beq	3270 <MyGame_Example_TestBase64_verify_table+0xec>
    3264:	ldr	r0, [fp, #-12]
    3268:	str	r0, [fp, #-4]
    326c:	b	3278 <MyGame_Example_TestBase64_verify_table+0xf4>
    3270:	movw	r0, #0
    3274:	str	r0, [fp, #-4]
    3278:	ldr	r0, [fp, #-4]
    327c:	mov	sp, fp
    3280:	pop	{fp, pc}

00003284 <MyGame_Example_TestSimpleTableWithEnum_verify_table>:
    3284:	push	{fp, lr}
    3288:	mov	fp, sp
    328c:	sub	sp, sp, #16
    3290:	str	r0, [sp, #8]
    3294:	ldr	r0, [sp, #8]
    3298:	movw	r1, #0
    329c:	uxth	r1, r1
    32a0:	movw	r2, #1
    32a4:	movw	r3, #1
    32a8:	uxth	r3, r3
    32ac:	bl	0 <flatcc_verify_field>
    32b0:	str	r0, [sp, #4]
    32b4:	cmp	r0, #0
    32b8:	beq	32c8 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x44>
    32bc:	ldr	r0, [sp, #4]
    32c0:	str	r0, [fp, #-4]
    32c4:	b	3374 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    32c8:	ldr	r0, [sp, #8]
    32cc:	movw	r1, #1
    32d0:	uxth	r2, r1
    32d4:	str	r1, [sp]
    32d8:	mov	r1, r2
    32dc:	movw	r2, #1
    32e0:	ldr	r3, [sp]
    32e4:	uxth	r3, r3
    32e8:	bl	0 <flatcc_verify_field>
    32ec:	str	r0, [sp, #4]
    32f0:	cmp	r0, #0
    32f4:	beq	3304 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0x80>
    32f8:	ldr	r0, [sp, #4]
    32fc:	str	r0, [fp, #-4]
    3300:	b	3374 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    3304:	ldr	r0, [sp, #8]
    3308:	movw	r1, #2
    330c:	uxth	r1, r1
    3310:	movw	r2, #1
    3314:	movw	r3, #1
    3318:	uxth	r3, r3
    331c:	bl	0 <flatcc_verify_field>
    3320:	str	r0, [sp, #4]
    3324:	cmp	r0, #0
    3328:	beq	3338 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xb4>
    332c:	ldr	r0, [sp, #4]
    3330:	str	r0, [fp, #-4]
    3334:	b	3374 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    3338:	ldr	r0, [sp, #8]
    333c:	movw	r1, #3
    3340:	uxth	r1, r1
    3344:	movw	r2, #1
    3348:	movw	r3, #1
    334c:	uxth	r3, r3
    3350:	bl	0 <flatcc_verify_field>
    3354:	str	r0, [sp, #4]
    3358:	cmp	r0, #0
    335c:	beq	336c <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xe8>
    3360:	ldr	r0, [sp, #4]
    3364:	str	r0, [fp, #-4]
    3368:	b	3374 <MyGame_Example_TestSimpleTableWithEnum_verify_table+0xf0>
    336c:	movw	r0, #0
    3370:	str	r0, [fp, #-4]
    3374:	ldr	r0, [fp, #-4]
    3378:	mov	sp, fp
    337c:	pop	{fp, pc}

00003380 <MyGame_Example2_Monster_verify_table>:
    3380:	sub	sp, sp, #4
    3384:	str	r0, [sp]
    3388:	movw	r0, #0
    338c:	add	sp, sp, #4
    3390:	bx	lr

00003394 <MyGame_Example_Alt_verify_table>:
    3394:	push	{fp, lr}
    3398:	mov	fp, sp
    339c:	sub	sp, sp, #16
    33a0:	str	r0, [sp, #8]
    33a4:	ldr	r0, [sp, #8]
    33a8:	movw	r1, #0
    33ac:	uxth	r1, r1
    33b0:	movw	r2, #0
    33b4:	movw	r3, #0
    33b8:	movt	r3, #0
    33bc:	bl	0 <flatcc_verify_table_field>
    33c0:	str	r0, [sp, #4]
    33c4:	cmp	r0, #0
    33c8:	beq	33d8 <MyGame_Example_Alt_verify_table+0x44>
    33cc:	ldr	r0, [sp, #4]
    33d0:	str	r0, [fp, #-4]
    33d4:	b	3448 <MyGame_Example_Alt_verify_table+0xb4>
    33d8:	ldr	r0, [sp, #8]
    33dc:	movw	r1, #1
    33e0:	uxth	r1, r1
    33e4:	movw	r2, #0
    33e8:	movw	r3, #0
    33ec:	movt	r3, #0
    33f0:	bl	0 <flatcc_verify_table_field>
    33f4:	str	r0, [sp, #4]
    33f8:	cmp	r0, #0
    33fc:	beq	340c <MyGame_Example_Alt_verify_table+0x78>
    3400:	ldr	r0, [sp, #4]
    3404:	str	r0, [fp, #-4]
    3408:	b	3448 <MyGame_Example_Alt_verify_table+0xb4>
    340c:	ldr	r0, [sp, #8]
    3410:	movw	r1, #3
    3414:	uxth	r1, r1
    3418:	movw	r2, #0
    341c:	movw	r3, #0
    3420:	movt	r3, #0
    3424:	bl	0 <flatcc_verify_union_vector_field>
    3428:	str	r0, [sp, #4]
    342c:	cmp	r0, #0
    3430:	beq	3440 <MyGame_Example_Alt_verify_table+0xac>
    3434:	ldr	r0, [sp, #4]
    3438:	str	r0, [fp, #-4]
    343c:	b	3448 <MyGame_Example_Alt_verify_table+0xb4>
    3440:	movw	r0, #0
    3444:	str	r0, [fp, #-4]
    3448:	ldr	r0, [fp, #-4]
    344c:	mov	sp, fp
    3450:	pop	{fp, pc}

00003454 <MyGame_Example_TestJSONPrefix_verify_table>:
    3454:	push	{fp, lr}
    3458:	mov	fp, sp
    345c:	sub	sp, sp, #16
    3460:	str	r0, [sp, #8]
    3464:	ldr	r0, [sp, #8]
    3468:	movw	r1, #0
    346c:	uxth	r1, r1
    3470:	movw	r2, #0
    3474:	movw	r3, #0
    3478:	movt	r3, #0
    347c:	bl	0 <flatcc_verify_table_field>
    3480:	str	r0, [sp, #4]
    3484:	cmp	r0, #0
    3488:	beq	3498 <MyGame_Example_TestJSONPrefix_verify_table+0x44>
    348c:	ldr	r0, [sp, #4]
    3490:	str	r0, [fp, #-4]
    3494:	b	3508 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    3498:	ldr	r0, [sp, #8]
    349c:	movw	r1, #1
    34a0:	uxth	r1, r1
    34a4:	movw	r2, #0
    34a8:	movw	r3, #0
    34ac:	movt	r3, #0
    34b0:	bl	0 <flatcc_verify_table_field>
    34b4:	str	r0, [sp, #4]
    34b8:	cmp	r0, #0
    34bc:	beq	34cc <MyGame_Example_TestJSONPrefix_verify_table+0x78>
    34c0:	ldr	r0, [sp, #4]
    34c4:	str	r0, [fp, #-4]
    34c8:	b	3508 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    34cc:	ldr	r0, [sp, #8]
    34d0:	movw	r1, #2
    34d4:	uxth	r1, r1
    34d8:	movw	r2, #0
    34dc:	movw	r3, #0
    34e0:	movt	r3, #0
    34e4:	bl	0 <flatcc_verify_table_field>
    34e8:	str	r0, [sp, #4]
    34ec:	cmp	r0, #0
    34f0:	beq	3500 <MyGame_Example_TestJSONPrefix_verify_table+0xac>
    34f4:	ldr	r0, [sp, #4]
    34f8:	str	r0, [fp, #-4]
    34fc:	b	3508 <MyGame_Example_TestJSONPrefix_verify_table+0xb4>
    3500:	movw	r0, #0
    3504:	str	r0, [fp, #-4]
    3508:	ldr	r0, [fp, #-4]
    350c:	mov	sp, fp
    3510:	pop	{fp, pc}

00003514 <Fantasy_Movie_verify_table>:
    3514:	push	{fp, lr}
    3518:	mov	fp, sp
    351c:	sub	sp, sp, #16
    3520:	str	r0, [sp, #8]
    3524:	ldr	r0, [sp, #8]
    3528:	movw	r1, #1
    352c:	uxth	r1, r1
    3530:	movw	r2, #0
    3534:	movw	r3, #0
    3538:	movt	r3, #0
    353c:	bl	0 <flatcc_verify_union_field>
    3540:	str	r0, [sp, #4]
    3544:	cmp	r0, #0
    3548:	beq	3558 <Fantasy_Movie_verify_table+0x44>
    354c:	ldr	r0, [sp, #4]
    3550:	str	r0, [fp, #-4]
    3554:	b	3630 <Fantasy_Movie_verify_table+0x11c>
    3558:	ldr	r0, [sp, #8]
    355c:	movw	r1, #3
    3560:	uxth	r1, r1
    3564:	movw	r2, #0
    3568:	movw	r3, #0
    356c:	movt	r3, #0
    3570:	bl	0 <flatcc_verify_union_field>
    3574:	str	r0, [sp, #4]
    3578:	cmp	r0, #0
    357c:	beq	358c <Fantasy_Movie_verify_table+0x78>
    3580:	ldr	r0, [sp, #4]
    3584:	str	r0, [fp, #-4]
    3588:	b	3630 <Fantasy_Movie_verify_table+0x11c>
    358c:	ldr	r0, [sp, #8]
    3590:	movw	r1, #5
    3594:	uxth	r1, r1
    3598:	movw	r2, #0
    359c:	movw	r3, #0
    35a0:	movt	r3, #0
    35a4:	bl	0 <flatcc_verify_union_field>
    35a8:	str	r0, [sp, #4]
    35ac:	cmp	r0, #0
    35b0:	beq	35c0 <Fantasy_Movie_verify_table+0xac>
    35b4:	ldr	r0, [sp, #4]
    35b8:	str	r0, [fp, #-4]
    35bc:	b	3630 <Fantasy_Movie_verify_table+0x11c>
    35c0:	ldr	r0, [sp, #8]
    35c4:	movw	r1, #7
    35c8:	uxth	r1, r1
    35cc:	movw	r2, #0
    35d0:	movw	r3, #0
    35d4:	movt	r3, #0
    35d8:	bl	0 <flatcc_verify_union_field>
    35dc:	str	r0, [sp, #4]
    35e0:	cmp	r0, #0
    35e4:	beq	35f4 <Fantasy_Movie_verify_table+0xe0>
    35e8:	ldr	r0, [sp, #4]
    35ec:	str	r0, [fp, #-4]
    35f0:	b	3630 <Fantasy_Movie_verify_table+0x11c>
    35f4:	ldr	r0, [sp, #8]
    35f8:	movw	r1, #9
    35fc:	uxth	r1, r1
    3600:	movw	r2, #0
    3604:	movw	r3, #0
    3608:	movt	r3, #0
    360c:	bl	0 <flatcc_verify_union_vector_field>
    3610:	str	r0, [sp, #4]
    3614:	cmp	r0, #0
    3618:	beq	3628 <Fantasy_Movie_verify_table+0x114>
    361c:	ldr	r0, [sp, #4]
    3620:	str	r0, [fp, #-4]
    3624:	b	3630 <Fantasy_Movie_verify_table+0x11c>
    3628:	movw	r0, #0
    362c:	str	r0, [fp, #-4]
    3630:	ldr	r0, [fp, #-4]
    3634:	mov	sp, fp
    3638:	pop	{fp, pc}

0000363c <MyGame_Example_TestJSONPrefixParsing_verify_table>:
    363c:	push	{fp, lr}
    3640:	mov	fp, sp
    3644:	sub	sp, sp, #16
    3648:	str	r0, [sp, #8]
    364c:	ldr	r0, [sp, #8]
    3650:	movw	r1, #0
    3654:	uxth	r1, r1
    3658:	movw	r2, #0
    365c:	bl	0 <flatcc_verify_string_field>
    3660:	str	r0, [sp, #4]
    3664:	cmp	r0, #0
    3668:	beq	3678 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x3c>
    366c:	ldr	r0, [sp, #4]
    3670:	str	r0, [fp, #-4]
    3674:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3678:	ldr	r0, [sp, #8]
    367c:	movw	r1, #1
    3680:	uxth	r1, r1
    3684:	movw	r2, #4
    3688:	movw	r3, #4
    368c:	uxth	r3, r3
    3690:	bl	0 <flatcc_verify_field>
    3694:	str	r0, [sp, #4]
    3698:	cmp	r0, #0
    369c:	beq	36ac <MyGame_Example_TestJSONPrefixParsing_verify_table+0x70>
    36a0:	ldr	r0, [sp, #4]
    36a4:	str	r0, [fp, #-4]
    36a8:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    36ac:	ldr	r0, [sp, #8]
    36b0:	movw	r1, #2
    36b4:	uxth	r1, r1
    36b8:	movw	r2, #0
    36bc:	bl	0 <flatcc_verify_string_field>
    36c0:	str	r0, [sp, #4]
    36c4:	cmp	r0, #0
    36c8:	beq	36d8 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x9c>
    36cc:	ldr	r0, [sp, #4]
    36d0:	str	r0, [fp, #-4]
    36d4:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    36d8:	ldr	r0, [sp, #8]
    36dc:	movw	r1, #3
    36e0:	uxth	r1, r1
    36e4:	movw	r2, #8
    36e8:	movw	r3, #8
    36ec:	uxth	r3, r3
    36f0:	bl	0 <flatcc_verify_field>
    36f4:	str	r0, [sp, #4]
    36f8:	cmp	r0, #0
    36fc:	beq	370c <MyGame_Example_TestJSONPrefixParsing_verify_table+0xd0>
    3700:	ldr	r0, [sp, #4]
    3704:	str	r0, [fp, #-4]
    3708:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    370c:	ldr	r0, [sp, #8]
    3710:	movw	r1, #4
    3714:	uxth	r1, r1
    3718:	movw	r2, #0
    371c:	bl	0 <flatcc_verify_string_field>
    3720:	str	r0, [sp, #4]
    3724:	cmp	r0, #0
    3728:	beq	3738 <MyGame_Example_TestJSONPrefixParsing_verify_table+0xfc>
    372c:	ldr	r0, [sp, #4]
    3730:	str	r0, [fp, #-4]
    3734:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3738:	ldr	r0, [sp, #8]
    373c:	movw	r1, #5
    3740:	uxth	r1, r1
    3744:	movw	r2, #8
    3748:	movw	r3, #8
    374c:	uxth	r3, r3
    3750:	bl	0 <flatcc_verify_field>
    3754:	str	r0, [sp, #4]
    3758:	cmp	r0, #0
    375c:	beq	376c <MyGame_Example_TestJSONPrefixParsing_verify_table+0x130>
    3760:	ldr	r0, [sp, #4]
    3764:	str	r0, [fp, #-4]
    3768:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    376c:	ldr	r0, [sp, #8]
    3770:	movw	r1, #6
    3774:	uxth	r1, r1
    3778:	movw	r2, #4
    377c:	movw	r3, #4
    3780:	uxth	r3, r3
    3784:	bl	0 <flatcc_verify_field>
    3788:	str	r0, [sp, #4]
    378c:	cmp	r0, #0
    3790:	beq	37a0 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x164>
    3794:	ldr	r0, [sp, #4]
    3798:	str	r0, [fp, #-4]
    379c:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    37a0:	ldr	r0, [sp, #8]
    37a4:	movw	r1, #7
    37a8:	uxth	r1, r1
    37ac:	movw	r2, #8
    37b0:	movw	r3, #8
    37b4:	uxth	r3, r3
    37b8:	bl	0 <flatcc_verify_field>
    37bc:	str	r0, [sp, #4]
    37c0:	cmp	r0, #0
    37c4:	beq	37d4 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x198>
    37c8:	ldr	r0, [sp, #4]
    37cc:	str	r0, [fp, #-4]
    37d0:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    37d4:	ldr	r0, [sp, #8]
    37d8:	movw	r1, #8
    37dc:	uxth	r1, r1
    37e0:	movw	r2, #4
    37e4:	movw	r3, #4
    37e8:	uxth	r3, r3
    37ec:	bl	0 <flatcc_verify_field>
    37f0:	str	r0, [sp, #4]
    37f4:	cmp	r0, #0
    37f8:	beq	3808 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1cc>
    37fc:	ldr	r0, [sp, #4]
    3800:	str	r0, [fp, #-4]
    3804:	b	3810 <MyGame_Example_TestJSONPrefixParsing_verify_table+0x1d4>
    3808:	movw	r0, #0
    380c:	str	r0, [fp, #-4]
    3810:	ldr	r0, [fp, #-4]
    3814:	mov	sp, fp
    3818:	pop	{fp, pc}

0000381c <MyGame_Example_TestJSONPrefixParsing2_verify_table>:
    381c:	push	{fp, lr}
    3820:	mov	fp, sp
    3824:	sub	sp, sp, #16
    3828:	str	r0, [sp, #8]
    382c:	ldr	r0, [sp, #8]
    3830:	movw	r1, #0
    3834:	uxth	r1, r1
    3838:	movw	r2, #8
    383c:	movw	r3, #8
    3840:	uxth	r3, r3
    3844:	bl	0 <flatcc_verify_field>
    3848:	str	r0, [sp, #4]
    384c:	cmp	r0, #0
    3850:	beq	3860 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x44>
    3854:	ldr	r0, [sp, #4]
    3858:	str	r0, [fp, #-4]
    385c:	b	389c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
    3860:	ldr	r0, [sp, #8]
    3864:	movw	r1, #1
    3868:	uxth	r1, r1
    386c:	movw	r2, #4
    3870:	movw	r3, #4
    3874:	uxth	r3, r3
    3878:	bl	0 <flatcc_verify_field>
    387c:	str	r0, [sp, #4]
    3880:	cmp	r0, #0
    3884:	beq	3894 <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x78>
    3888:	ldr	r0, [sp, #4]
    388c:	str	r0, [fp, #-4]
    3890:	b	389c <MyGame_Example_TestJSONPrefixParsing2_verify_table+0x80>
    3894:	movw	r0, #0
    3898:	str	r0, [fp, #-4]
    389c:	ldr	r0, [fp, #-4]
    38a0:	mov	sp, fp
    38a4:	pop	{fp, pc}

000038a8 <MyGame_Example_TestJSONPrefixParsing3_verify_table>:
    38a8:	push	{fp, lr}
    38ac:	mov	fp, sp
    38b0:	sub	sp, sp, #16
    38b4:	str	r0, [sp, #8]
    38b8:	ldr	r0, [sp, #8]
    38bc:	movw	r1, #0
    38c0:	uxth	r1, r1
    38c4:	movw	r2, #8
    38c8:	movw	r3, #8
    38cc:	uxth	r3, r3
    38d0:	bl	0 <flatcc_verify_field>
    38d4:	str	r0, [sp, #4]
    38d8:	cmp	r0, #0
    38dc:	beq	38ec <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x44>
    38e0:	ldr	r0, [sp, #4]
    38e4:	str	r0, [fp, #-4]
    38e8:	b	3928 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
    38ec:	ldr	r0, [sp, #8]
    38f0:	movw	r1, #1
    38f4:	uxth	r1, r1
    38f8:	movw	r2, #4
    38fc:	movw	r3, #4
    3900:	uxth	r3, r3
    3904:	bl	0 <flatcc_verify_field>
    3908:	str	r0, [sp, #4]
    390c:	cmp	r0, #0
    3910:	beq	3920 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x78>
    3914:	ldr	r0, [sp, #4]
    3918:	str	r0, [fp, #-4]
    391c:	b	3928 <MyGame_Example_TestJSONPrefixParsing3_verify_table+0x80>
    3920:	movw	r0, #0
    3924:	str	r0, [fp, #-4]
    3928:	ldr	r0, [fp, #-4]
    392c:	mov	sp, fp
    3930:	pop	{fp, pc}

00003934 <Fantasy_Character_union_verifier>:
    3934:	push	{fp, lr}
    3938:	mov	fp, sp
    393c:	sub	sp, sp, #16
    3940:	str	r0, [sp, #8]
    3944:	ldr	r0, [sp, #8]
    3948:	ldrb	r0, [r0, #12]
    394c:	mov	r1, r0
    3950:	cmp	r0, #2
    3954:	str	r1, [sp, #4]
    3958:	beq	39b0 <Fantasy_Character_union_verifier+0x7c>
    395c:	b	3960 <Fantasy_Character_union_verifier+0x2c>
    3960:	ldr	r0, [sp, #4]
    3964:	cmp	r0, #8
    3968:	beq	39c8 <Fantasy_Character_union_verifier+0x94>
    396c:	b	3970 <Fantasy_Character_union_verifier+0x3c>
    3970:	ldr	r0, [sp, #4]
    3974:	cmp	r0, #9
    3978:	beq	39e4 <Fantasy_Character_union_verifier+0xb0>
    397c:	b	3980 <Fantasy_Character_union_verifier+0x4c>
    3980:	ldr	r0, [sp, #4]
    3984:	cmp	r0, #10
    3988:	beq	3a00 <Fantasy_Character_union_verifier+0xcc>
    398c:	b	3990 <Fantasy_Character_union_verifier+0x5c>
    3990:	ldr	r0, [sp, #4]
    3994:	cmp	r0, #11
    3998:	beq	3a1c <Fantasy_Character_union_verifier+0xe8>
    399c:	b	39a0 <Fantasy_Character_union_verifier+0x6c>
    39a0:	ldr	r0, [sp, #4]
    39a4:	cmp	r0, #255	; 0xff
    39a8:	beq	3a2c <Fantasy_Character_union_verifier+0xf8>
    39ac:	b	3a3c <Fantasy_Character_union_verifier+0x108>
    39b0:	ldr	r0, [sp, #8]
    39b4:	movw	r1, #0
    39b8:	movt	r1, #0
    39bc:	bl	0 <flatcc_verify_union_table>
    39c0:	str	r0, [fp, #-4]
    39c4:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    39c8:	ldr	r0, [sp, #8]
    39cc:	movw	r1, #2
    39d0:	movw	r2, #2
    39d4:	uxth	r2, r2
    39d8:	bl	0 <flatcc_verify_union_struct>
    39dc:	str	r0, [fp, #-4]
    39e0:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    39e4:	ldr	r0, [sp, #8]
    39e8:	movw	r1, #4
    39ec:	movw	r2, #4
    39f0:	uxth	r2, r2
    39f4:	bl	0 <flatcc_verify_union_struct>
    39f8:	str	r0, [fp, #-4]
    39fc:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    3a00:	ldr	r0, [sp, #8]
    3a04:	movw	r1, #4
    3a08:	movw	r2, #4
    3a0c:	uxth	r2, r2
    3a10:	bl	0 <flatcc_verify_union_struct>
    3a14:	str	r0, [fp, #-4]
    3a18:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    3a1c:	ldr	r0, [sp, #8]
    3a20:	bl	0 <flatcc_verify_union_string>
    3a24:	str	r0, [fp, #-4]
    3a28:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    3a2c:	ldr	r0, [sp, #8]
    3a30:	bl	0 <flatcc_verify_union_string>
    3a34:	str	r0, [fp, #-4]
    3a38:	b	3a44 <Fantasy_Character_union_verifier+0x110>
    3a3c:	movw	r0, #0
    3a40:	str	r0, [fp, #-4]
    3a44:	ldr	r0, [fp, #-4]
    3a48:	mov	sp, fp
    3a4c:	pop	{fp, pc}

00003a50 <Fantasy_Attacker_verify_table>:
    3a50:	push	{fp, lr}
    3a54:	mov	fp, sp
    3a58:	sub	sp, sp, #16
    3a5c:	str	r0, [sp, #8]
    3a60:	ldr	r0, [sp, #8]
    3a64:	movw	r1, #0
    3a68:	uxth	r1, r1
    3a6c:	movw	r2, #4
    3a70:	movw	r3, #4
    3a74:	uxth	r3, r3
    3a78:	bl	0 <flatcc_verify_field>
    3a7c:	str	r0, [sp, #4]
    3a80:	cmp	r0, #0
    3a84:	beq	3a94 <Fantasy_Attacker_verify_table+0x44>
    3a88:	ldr	r0, [sp, #4]
    3a8c:	str	r0, [fp, #-4]
    3a90:	b	3a9c <Fantasy_Attacker_verify_table+0x4c>
    3a94:	movw	r0, #0
    3a98:	str	r0, [fp, #-4]
    3a9c:	ldr	r0, [fp, #-4]
    3aa0:	mov	sp, fp
    3aa4:	pop	{fp, pc}
