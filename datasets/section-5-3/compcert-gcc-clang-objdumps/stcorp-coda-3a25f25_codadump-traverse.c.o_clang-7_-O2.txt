
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-traverse.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <print_full_field_name>:
   0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	add	fp, sp, #28
   8:	sub	sp, sp, #12
   c:	mov	sl, r2
  10:	mov	r4, r0
  14:	cmp	r1, #1
  18:	bne	12c <print_full_field_name+0x12c>
  1c:	movw	r5, #0
  20:	mov	r6, #0
  24:	str	sl, [sp]
  28:	movt	r5, #0
  2c:	ldr	r0, [r5, #136]	; 0x88
  30:	cmp	r0, #1
  34:	blt	f8 <print_full_field_name+0xf8>
  38:	movw	r9, #0
  3c:	add	sl, sp, #8
  40:	mov	r7, #0
  44:	mov	r8, #0
  48:	movt	r9, #0
  4c:	add	r0, r5, r8, lsl #2
  50:	mov	r1, sl
  54:	ldr	r0, [r0, #8]
  58:	bl	0 <coda_type_get_class>
  5c:	cmp	r0, #0
  60:	beq	68 <print_full_field_name+0x68>
  64:	bl	0 <handle_coda_error>
  68:	ldr	r0, [sp, #8]
  6c:	cmp	r0, #1
  70:	beq	98 <print_full_field_name+0x98>
  74:	cmp	r0, #0
  78:	bne	e8 <print_full_field_name+0xe8>
  7c:	add	r0, r5, r7, lsl #2
  80:	mov	r1, r9
  84:	ldr	r2, [r0, #3620]	; 0xe24
  88:	mov	r0, r4
  8c:	bl	0 <fprintf>
  90:	add	r7, r7, #1
  94:	b	e8 <print_full_field_name+0xe8>
  98:	cmp	r8, #0
  9c:	bne	ac <print_full_field_name+0xac>
  a0:	mov	r0, #47	; 0x2f
  a4:	mov	r1, r4
  a8:	bl	0 <fputc>
  ac:	add	r0, r6, r6, lsl #2
  b0:	add	r0, r5, r0, lsl #4
  b4:	ldr	r0, [r0, #804]	; 0x324
  b8:	cmp	r0, #1
  bc:	blt	e4 <print_full_field_name+0xe4>
  c0:	mov	r0, #91	; 0x5b
  c4:	mov	r1, r4
  c8:	bl	0 <fputc>
  cc:	mov	r0, r4
  d0:	mov	r1, r6
  d4:	bl	2ac <print_array_dim>
  d8:	mov	r0, #93	; 0x5d
  dc:	mov	r1, r4
  e0:	bl	0 <fputc>
  e4:	add	r6, r6, #1
  e8:	ldr	r0, [r5, #136]	; 0x88
  ec:	add	r8, r8, #1
  f0:	cmp	r8, r0
  f4:	blt	4c <print_full_field_name+0x4c>
  f8:	ldr	r0, [sp]
  fc:	cmp	r0, #0
 100:	beq	2a4 <print_full_field_name+0x2a4>
 104:	ldr	r0, [r5, #3360]	; 0xd20
 108:	cmp	r6, r0
 10c:	bge	2a4 <print_full_field_name+0x2a4>
 110:	mov	r0, #91	; 0x5b
 114:	mov	r1, r4
 118:	bl	0 <fputc>
 11c:	mov	r0, r4
 120:	mov	r1, r6
 124:	bl	2ac <print_array_dim>
 128:	b	298 <print_full_field_name+0x298>
 12c:	movw	r7, #0
 130:	mov	r5, r1
 134:	movt	r7, #0
 138:	ldr	r0, [r7, #3748]	; 0xea4
 13c:	cmp	r0, #1
 140:	blt	17c <print_full_field_name+0x17c>
 144:	mov	r6, #0
 148:	cmp	r6, #0
 14c:	beq	15c <print_full_field_name+0x15c>
 150:	mov	r0, #46	; 0x2e
 154:	mov	r1, r4
 158:	bl	0 <fputc>
 15c:	add	r0, r7, r6, lsl #2
 160:	mov	r1, r4
 164:	ldr	r0, [r0, #3620]	; 0xe24
 168:	bl	0 <fputs>
 16c:	ldr	r0, [r7, #3748]	; 0xea4
 170:	add	r6, r6, #1
 174:	cmp	r6, r0
 178:	blt	148 <print_full_field_name+0x148>
 17c:	cmp	r5, #2
 180:	bne	2a4 <print_full_field_name+0x2a4>
 184:	ldr	r0, [r7, #136]	; 0x88
 188:	mov	r6, #0
 18c:	cmp	r0, #1
 190:	blt	230 <print_full_field_name+0x230>
 194:	movw	r9, #0
 198:	add	r8, sp, #4
 19c:	mov	r5, #0
 1a0:	movt	r9, #0
 1a4:	add	r0, r7, r5, lsl #2
 1a8:	mov	r1, r8
 1ac:	ldr	r0, [r0, #8]
 1b0:	bl	0 <coda_type_get_class>
 1b4:	cmp	r0, #0
 1b8:	beq	1c0 <print_full_field_name+0x1c0>
 1bc:	bl	0 <handle_coda_error>
 1c0:	ldr	r0, [sp, #4]
 1c4:	cmp	r0, #1
 1c8:	bne	220 <print_full_field_name+0x220>
 1cc:	add	r0, r6, r6, lsl #2
 1d0:	add	r0, r7, r0, lsl #4
 1d4:	ldr	r1, [r0, #804]	; 0x324
 1d8:	cmp	r1, #1
 1dc:	blt	220 <print_full_field_name+0x220>
 1e0:	ldr	r0, [r0, #800]	; 0x320
 1e4:	cmp	r0, #0
 1e8:	beq	1fc <print_full_field_name+0x1fc>
 1ec:	mov	r0, #44	; 0x2c
 1f0:	mov	r1, r4
 1f4:	bl	0 <fputc>
 1f8:	b	210 <print_full_field_name+0x210>
 1fc:	mov	r0, r9
 200:	mov	r1, #2
 204:	mov	r2, #1
 208:	mov	r3, r4
 20c:	bl	0 <fwrite>
 210:	mov	r0, r4
 214:	mov	r1, r6
 218:	bl	2ac <print_array_dim>
 21c:	add	r6, r6, #1
 220:	ldr	r0, [r7, #136]	; 0x88
 224:	add	r5, r5, #1
 228:	cmp	r5, r0
 22c:	blt	1a4 <print_full_field_name+0x1a4>
 230:	cmp	sl, #0
 234:	beq	290 <print_full_field_name+0x290>
 238:	ldr	r0, [r7, #3360]	; 0xd20
 23c:	cmp	r6, r0
 240:	bge	290 <print_full_field_name+0x290>
 244:	add	r0, r6, r6, lsl #2
 248:	add	r0, r7, r0, lsl #4
 24c:	ldr	r0, [r0, #800]	; 0x320
 250:	cmp	r0, #0
 254:	beq	268 <print_full_field_name+0x268>
 258:	mov	r0, #44	; 0x2c
 25c:	mov	r1, r4
 260:	bl	0 <fputc>
 264:	b	280 <print_full_field_name+0x280>
 268:	movw	r0, #0
 26c:	mov	r1, #2
 270:	mov	r2, #1
 274:	mov	r3, r4
 278:	movt	r0, #0
 27c:	bl	0 <fwrite>
 280:	mov	r0, r4
 284:	mov	r1, r6
 288:	bl	2ac <print_array_dim>
 28c:	add	r6, r6, #1
 290:	cmp	r6, #1
 294:	blt	2a4 <print_full_field_name+0x2a4>
 298:	mov	r0, #93	; 0x5d
 29c:	mov	r1, r4
 2a0:	bl	0 <fputc>
 2a4:	sub	sp, fp, #28
 2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000002ac <print_array_dim>:
 2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 2b0:	add	fp, sp, #28
 2b4:	sub	sp, sp, #4
 2b8:	mov	r4, r0
 2bc:	add	r0, r1, r1, lsl #2
 2c0:	movw	r1, #0
 2c4:	movt	r1, #0
 2c8:	add	r0, r1, r0, lsl #4
 2cc:	mov	r7, r0
 2d0:	ldr	r1, [r7, #804]!	; 0x324
 2d4:	cmp	r1, #1
 2d8:	blt	38c <print_array_dim+0xe0>
 2dc:	movw	r8, #0
 2e0:	movw	r9, #0
 2e4:	add	sl, r0, #808	; 0x328
 2e8:	add	r5, r0, #800	; 0x320
 2ec:	mov	r6, #0
 2f0:	movt	r8, #0
 2f4:	movt	r9, #0
 2f8:	cmp	r6, #0
 2fc:	beq	30c <print_array_dim+0x60>
 300:	mov	r0, #44	; 0x2c
 304:	mov	r1, r4
 308:	bl	0 <fputc>
 30c:	ldr	r0, [r8]
 310:	cmp	r0, #0
 314:	beq	34c <print_array_dim+0xa0>
 318:	ldr	r0, [r5]
 31c:	add	r0, r6, r0
 320:	add	r0, r9, r0, lsl #2
 324:	ldr	r1, [r0, #72]	; 0x48
 328:	cmp	r1, #0
 32c:	beq	368 <print_array_dim+0xbc>
 330:	ldr	r3, [r0, #4]
 334:	ldr	r2, [r0, #36]	; 0x24
 338:	movw	r1, #0
 33c:	mov	r0, r4
 340:	movt	r1, #0
 344:	bl	0 <fprintf>
 348:	b	37c <print_array_dim+0xd0>
 34c:	ldr	r2, [sl, r6, lsl #2]
 350:	cmn	r2, #1
 354:	bne	36c <print_array_dim+0xc0>
 358:	mov	r0, #63	; 0x3f
 35c:	mov	r1, r4
 360:	bl	0 <fputc>
 364:	b	37c <print_array_dim+0xd0>
 368:	ldr	r2, [r0, #4]
 36c:	movw	r1, #0
 370:	mov	r0, r4
 374:	movt	r1, #0
 378:	bl	0 <fprintf>
 37c:	ldr	r0, [r7]
 380:	add	r6, r6, #1
 384:	cmp	r6, r0
 388:	blt	2f8 <print_array_dim+0x4c>
 38c:	sub	sp, fp, #28
 390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000394 <traverse_info_init>:
 394:	movw	r0, #0
 398:	mov	r1, #0
 39c:	movt	r0, #0
 3a0:	str	r1, [r0, #136]	; 0x88
 3a4:	str	r1, [r0, #4]
 3a8:	str	r1, [r0, #3360]	; 0xd20
 3ac:	str	r1, [r0, #3748]	; 0xea4
 3b0:	bx	lr

000003b4 <traverse_info_done>:
 3b4:	push	{r4, sl, fp, lr}
 3b8:	add	fp, sp, #8
 3bc:	movw	r4, #0
 3c0:	movt	r4, #0
 3c4:	ldr	r0, [r4, #4]
 3c8:	cmp	r0, #0
 3cc:	beq	3d4 <traverse_info_done+0x20>
 3d0:	bl	0 <coda_close>
 3d4:	ldr	r0, [r4, #664]	; 0x298
 3d8:	cmp	r0, #0
 3dc:	popeq	{r4, sl, fp, pc}
 3e0:	add	r0, r4, #664	; 0x298
 3e4:	pop	{r4, sl, fp, lr}
 3e8:	b	0 <codadump_filter_remove>

000003ec <traverse_product>:
 3ec:	push	{r4, r5, fp, lr}
 3f0:	add	fp, sp, #8
 3f4:	movw	r5, #0
 3f8:	movt	r5, #0
 3fc:	mov	r1, r5
 400:	ldr	r0, [r1], #4
 404:	bl	0 <coda_open>
 408:	cmp	r0, #0
 40c:	beq	44c <traverse_product+0x60>
 410:	bl	0 <coda_get_errno>
 414:	ldr	r0, [r0]
 418:	cmn	r0, #21
 41c:	bne	448 <traverse_product+0x5c>
 420:	mov	r0, #0
 424:	bl	0 <coda_set_option_use_mmap>
 428:	mov	r1, r5
 42c:	ldr	r0, [r1], #4
 430:	bl	0 <coda_open>
 434:	mov	r4, r0
 438:	mov	r0, #1
 43c:	bl	0 <coda_set_option_use_mmap>
 440:	cmp	r4, #0
 444:	beq	44c <traverse_product+0x60>
 448:	bl	0 <handle_coda_error>
 44c:	ldr	r1, [r5, #4]
 450:	add	r4, r5, #144	; 0x90
 454:	mov	r0, r4
 458:	bl	0 <coda_cursor_set_product>
 45c:	cmp	r0, #0
 460:	beq	468 <traverse_product+0x7c>
 464:	bl	0 <handle_coda_error>
 468:	ldr	r0, [r5, #136]	; 0x88
 46c:	add	r0, r5, r0, lsl #2
 470:	add	r1, r0, #8
 474:	mov	r0, r4
 478:	bl	0 <coda_cursor_get_type>
 47c:	cmp	r0, #0
 480:	beq	488 <traverse_product+0x9c>
 484:	bl	0 <handle_coda_error>
 488:	bl	4a0 <traverse_data>
 48c:	ldr	r0, [r5, #4]
 490:	bl	0 <coda_close>
 494:	mov	r0, #0
 498:	str	r0, [r5, #4]
 49c:	pop	{r4, r5, fp, pc}

000004a0 <traverse_data>:
 4a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 4a4:	add	fp, sp, #24
 4a8:	sub	sp, sp, #16
 4ac:	movw	r6, #0
 4b0:	add	r1, sp, #12
 4b4:	movt	r6, #0
 4b8:	ldr	r0, [r6, #136]	; 0x88
 4bc:	add	r0, r6, r0, lsl #2
 4c0:	ldr	r0, [r0, #8]
 4c4:	bl	0 <coda_type_get_class>
 4c8:	cmp	r0, #0
 4cc:	beq	4d4 <traverse_data+0x34>
 4d0:	bl	0 <handle_coda_error>
 4d4:	ldr	r0, [sp, #12]
 4d8:	cmp	r0, #6
 4dc:	bhi	728 <traverse_data+0x288>
 4e0:	add	r1, pc, #0
 4e4:	ldr	pc, [r1, r0, lsl #2]
 4e8:	.word	0x00000560
 4ec:	.word	0x0000065c
 4f0:	.word	0x00000504
 4f4:	.word	0x00000504
 4f8:	.word	0x00000504
 4fc:	.word	0x00000504
 500:	.word	0x000006b4
 504:	ldr	r0, [r6, #136]	; 0x88
 508:	add	r1, sp, #8
 50c:	add	r0, r6, r0, lsl #2
 510:	ldr	r0, [r0, #8]
 514:	bl	0 <coda_type_get_read_type>
 518:	cmp	r0, #0
 51c:	beq	524 <traverse_data+0x84>
 520:	bl	0 <handle_coda_error>
 524:	ldr	r0, [sp, #8]
 528:	sub	r0, r0, #11
 52c:	cmp	r0, #1
 530:	bhi	724 <traverse_data+0x284>
 534:	bl	0 <dim_enter_array>
 538:	ldr	r0, [r6, #3360]	; 0xd20
 53c:	add	r0, r0, #1
 540:	str	r0, [r6, #3360]	; 0xd20
 544:	bl	8e4 <handle_data_element>
 548:	ldr	r0, [r6, #3360]	; 0xd20
 54c:	sub	r0, r0, #1
 550:	str	r0, [r6, #3360]	; 0xd20
 554:	bl	0 <dim_leave_array>
 558:	sub	sp, fp, #24
 55c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 560:	ldr	r0, [r6, #136]	; 0x88
 564:	cmp	r0, #30
 568:	bgt	728 <traverse_data+0x288>
 56c:	ldr	r1, [r6, #3748]	; 0xea4
 570:	add	r0, r6, r0, lsl #2
 574:	add	r1, r1, #1
 578:	str	r1, [r6, #3748]	; 0xea4
 57c:	add	r1, sp, #8
 580:	ldr	r0, [r0, #8]
 584:	bl	0 <coda_type_get_num_record_fields>
 588:	cmp	r0, #0
 58c:	beq	594 <traverse_data+0xf4>
 590:	bl	0 <handle_coda_error>
 594:	ldr	r0, [r6, #136]	; 0x88
 598:	add	r0, r0, #1
 59c:	str	r0, [r6, #136]	; 0x88
 5a0:	ldr	r0, [r6, #796]	; 0x31c
 5a4:	add	r0, r6, r0, lsl #2
 5a8:	ldr	r8, [r0, #664]	; 0x298
 5ac:	cmp	r8, #0
 5b0:	beq	730 <traverse_data+0x290>
 5b4:	add	r4, sp, #4
 5b8:	add	r7, r6, #664	; 0x298
 5bc:	mov	r0, r8
 5c0:	bl	0 <codadump_filter_get_fieldname>
 5c4:	cmp	r0, #0
 5c8:	beq	784 <traverse_data+0x2e4>
 5cc:	mov	r5, r0
 5d0:	ldr	r0, [r6, #136]	; 0x88
 5d4:	mov	r2, r4
 5d8:	mov	r1, r5
 5dc:	add	r0, r6, r0, lsl #2
 5e0:	ldr	r0, [r0, #4]
 5e4:	bl	0 <coda_type_get_record_field_index_from_name>
 5e8:	cmp	r0, #0
 5ec:	beq	604 <traverse_data+0x164>
 5f0:	bl	0 <coda_get_errno>
 5f4:	ldr	r0, [r0]
 5f8:	cmn	r0, #102	; 0x66
 5fc:	beq	7a4 <traverse_data+0x304>
 600:	bl	0 <handle_coda_error>
 604:	ldr	r0, [r6, #796]	; 0x31c
 608:	ldr	r0, [r7, r0, lsl #2]
 60c:	bl	0 <codadump_filter_get_subfilter>
 610:	ldr	r1, [r6, #796]	; 0x31c
 614:	add	r1, r1, #1
 618:	str	r0, [r7, r1, lsl #2]
 61c:	ldr	r0, [sp, #4]
 620:	str	r1, [r6, #796]	; 0x31c
 624:	mov	r1, #1
 628:	bl	7c8 <traverse_record>
 62c:	ldr	r0, [r6, #796]	; 0x31c
 630:	sub	r0, r0, #1
 634:	str	r0, [r6, #796]	; 0x31c
 638:	ldr	r0, [r7, r0, lsl #2]
 63c:	bl	0 <codadump_filter_get_next_filter>
 640:	ldr	r1, [r6, #796]	; 0x31c
 644:	cmp	r0, #0
 648:	str	r0, [r7, r1, lsl #2]
 64c:	bne	5c0 <traverse_data+0x120>
 650:	add	r0, r7, r1, lsl #2
 654:	str	r8, [r0]
 658:	b	764 <traverse_data+0x2c4>
 65c:	ldr	r0, [r6, #136]	; 0x88
 660:	cmp	r0, #30
 664:	bgt	728 <traverse_data+0x288>
 668:	bl	0 <dim_enter_array>
 66c:	ldr	r0, [r6, #3360]	; 0xd20
 670:	add	r2, r6, #8
 674:	add	r0, r0, #1
 678:	str	r0, [r6, #3360]	; 0xd20
 67c:	ldr	r0, [r6, #136]	; 0x88
 680:	add	r1, r0, #1
 684:	str	r1, [r6, #136]	; 0x88
 688:	add	r1, r2, r1, lsl #2
 68c:	ldr	r0, [r2, r0, lsl #2]
 690:	bl	0 <coda_type_get_array_base_type>
 694:	cmp	r0, #0
 698:	beq	6a0 <traverse_data+0x200>
 69c:	bl	0 <handle_coda_error>
 6a0:	bl	4a0 <traverse_data>
 6a4:	ldr	r0, [r6, #136]	; 0x88
 6a8:	sub	r0, r0, #1
 6ac:	str	r0, [r6, #136]	; 0x88
 6b0:	b	548 <traverse_data+0xa8>
 6b4:	bl	0 <coda_get_option_bypass_special_types>
 6b8:	mov	r2, r0
 6bc:	ldr	r0, [r6, #136]	; 0x88
 6c0:	cmp	r2, #0
 6c4:	add	r1, r6, r0, lsl #2
 6c8:	ldr	r0, [r1, #8]!
 6cc:	beq	6ec <traverse_data+0x24c>
 6d0:	bl	0 <coda_type_get_special_base_type>
 6d4:	cmp	r0, #0
 6d8:	beq	6e0 <traverse_data+0x240>
 6dc:	bl	0 <handle_coda_error>
 6e0:	bl	4a0 <traverse_data>
 6e4:	sub	sp, fp, #24
 6e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 6ec:	add	r1, sp, #8
 6f0:	bl	0 <coda_type_get_special_type>
 6f4:	cmp	r0, #0
 6f8:	beq	700 <traverse_data+0x260>
 6fc:	bl	0 <handle_coda_error>
 700:	ldr	r0, [sp, #8]
 704:	sub	r1, r0, #1
 708:	cmp	r1, #2
 70c:	bcc	724 <traverse_data+0x284>
 710:	cmp	r0, #0
 714:	beq	728 <traverse_data+0x288>
 718:	cmp	r0, #3
 71c:	beq	534 <traverse_data+0x94>
 720:	b	728 <traverse_data+0x288>
 724:	bl	8e4 <handle_data_element>
 728:	sub	sp, fp, #24
 72c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 730:	ldr	r1, [sp, #8]
 734:	mov	r0, #0
 738:	str	r0, [sp, #4]
 73c:	cmp	r1, #1
 740:	blt	764 <traverse_data+0x2c4>
 744:	mov	r1, #0
 748:	bl	7c8 <traverse_record>
 74c:	ldr	r0, [sp, #4]
 750:	ldr	r1, [sp, #8]
 754:	add	r0, r0, #1
 758:	cmp	r0, r1
 75c:	str	r0, [sp, #4]
 760:	blt	744 <traverse_data+0x2a4>
 764:	ldr	r0, [r6, #136]	; 0x88
 768:	sub	r0, r0, #1
 76c:	str	r0, [r6, #136]	; 0x88
 770:	ldr	r0, [r6, #3748]	; 0xea4
 774:	sub	r0, r0, #1
 778:	str	r0, [r6, #3748]	; 0xea4
 77c:	sub	sp, fp, #24
 780:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 784:	movw	r0, #0
 788:	movw	r1, #0
 78c:	movw	r3, #0
 790:	movw	r2, #393	; 0x189
 794:	movt	r0, #0
 798:	movt	r1, #0
 79c:	movt	r3, #0
 7a0:	bl	0 <__assert_fail>
 7a4:	movw	r0, #0
 7a8:	movw	r1, #0
 7ac:	mov	r2, r5
 7b0:	movt	r0, #0
 7b4:	movt	r1, #0
 7b8:	ldr	r0, [r0]
 7bc:	bl	0 <fprintf>
 7c0:	mov	r0, #1
 7c4:	bl	0 <exit>

000007c8 <traverse_record>:
 7c8:	push	{r4, r5, r6, sl, fp, lr}
 7cc:	add	fp, sp, #16
 7d0:	sub	sp, sp, #8
 7d4:	movw	r6, #0
 7d8:	mov	r4, r0
 7dc:	mov	r5, r1
 7e0:	add	r2, sp, #4
 7e4:	movt	r6, #0
 7e8:	mov	r1, r4
 7ec:	ldr	r0, [r6, #3748]	; 0xea4
 7f0:	add	r0, r6, r0, lsl #2
 7f4:	str	r4, [r0, #3488]	; 0xda0
 7f8:	ldr	r0, [r6, #136]	; 0x88
 7fc:	add	r0, r6, r0, lsl #2
 800:	ldr	r0, [r0, #4]
 804:	bl	0 <coda_type_get_record_field_hidden_status>
 808:	cmp	r0, #0
 80c:	beq	814 <traverse_record+0x4c>
 810:	bl	0 <handle_coda_error>
 814:	cmp	r5, #0
 818:	bne	828 <traverse_record+0x60>
 81c:	ldr	r0, [sp, #4]
 820:	cmp	r0, #0
 824:	bne	8dc <traverse_record+0x114>
 828:	movw	r0, #0
 82c:	movt	r0, #0
 830:	ldr	r0, [r0]
 834:	cmp	r0, #0
 838:	beq	888 <traverse_record+0xc0>
 83c:	ldr	r0, [r6, #136]	; 0x88
 840:	mov	r2, sp
 844:	mov	r1, r4
 848:	add	r0, r6, r0, lsl #2
 84c:	ldr	r0, [r0, #4]
 850:	bl	0 <coda_type_get_record_field_available_status>
 854:	cmp	r0, #0
 858:	beq	860 <traverse_record+0x98>
 85c:	bl	0 <handle_coda_error>
 860:	ldr	r0, [sp]
 864:	cmn	r0, #1
 868:	bne	87c <traverse_record+0xb4>
 86c:	bl	0 <dim_record_field_available>
 870:	cmp	r0, #0
 874:	beq	8dc <traverse_record+0x114>
 878:	ldr	r0, [sp]
 87c:	ldr	r1, [r6, #136]	; 0x88
 880:	add	r1, r6, r1, lsl #2
 884:	str	r0, [r1, #3360]	; 0xd20
 888:	ldr	r0, [r6, #136]	; 0x88
 88c:	ldr	r1, [r6, #3748]	; 0xea4
 890:	add	r0, r6, r0, lsl #2
 894:	add	r1, r6, r1, lsl #2
 898:	ldr	r0, [r0, #4]
 89c:	add	r2, r1, #3616	; 0xe20
 8a0:	mov	r1, r4
 8a4:	bl	0 <coda_type_get_record_field_name>
 8a8:	cmp	r0, #0
 8ac:	beq	8b4 <traverse_record+0xec>
 8b0:	bl	0 <handle_coda_error>
 8b4:	ldr	r0, [r6, #136]	; 0x88
 8b8:	add	r1, r6, r0, lsl #2
 8bc:	ldr	r0, [r1, #4]
 8c0:	add	r2, r1, #8
 8c4:	mov	r1, r4
 8c8:	bl	0 <coda_type_get_record_field_type>
 8cc:	cmp	r0, #0
 8d0:	beq	8d8 <traverse_record+0x110>
 8d4:	bl	0 <handle_coda_error>
 8d8:	bl	4a0 <traverse_data>
 8dc:	sub	sp, fp, #16
 8e0:	pop	{r4, r5, r6, sl, fp, pc}

000008e4 <handle_data_element>:
 8e4:	push	{r4, r5, fp, lr}
 8e8:	add	fp, sp, #8
 8ec:	sub	sp, sp, #8
 8f0:	movw	r0, #0
 8f4:	movt	r0, #0
 8f8:	ldr	r0, [r0]
 8fc:	cmp	r0, #1
 900:	beq	9a8 <handle_data_element+0xc4>
 904:	cmp	r0, #0
 908:	bne	b28 <handle_data_element+0x244>
 90c:	movw	r4, #0
 910:	mov	r1, #1
 914:	mov	r2, #0
 918:	movt	r4, #0
 91c:	ldr	r0, [r4]
 920:	bl	0 <print_full_field_name>
 924:	movw	r0, #0
 928:	movt	r0, #0
 92c:	ldr	r0, [r0]
 930:	cmp	r0, #0
 934:	beq	a24 <handle_data_element+0x140>
 938:	movw	r5, #0
 93c:	add	r1, sp, #4
 940:	movt	r5, #0
 944:	ldr	r0, [r5, #136]	; 0x88
 948:	add	r0, r5, r0, lsl #2
 94c:	ldr	r0, [r0, #8]
 950:	bl	0 <coda_type_get_class>
 954:	cmp	r0, #0
 958:	beq	960 <handle_data_element+0x7c>
 95c:	bl	0 <handle_coda_error>
 960:	ldr	r0, [sp, #4]
 964:	cmp	r0, #6
 968:	bne	9b4 <handle_data_element+0xd0>
 96c:	ldr	r0, [r5, #136]	; 0x88
 970:	mov	r1, sp
 974:	add	r0, r5, r0, lsl #2
 978:	ldr	r0, [r0, #8]
 97c:	bl	0 <coda_type_get_special_type>
 980:	cmp	r0, #0
 984:	beq	98c <handle_data_element+0xa8>
 988:	bl	0 <handle_coda_error>
 98c:	ldr	r0, [sp]
 990:	bl	0 <coda_type_get_special_type_name>
 994:	mov	r1, r0
 998:	movw	r0, #0
 99c:	movt	r0, #0
 9a0:	bl	0 <printf>
 9a4:	b	a24 <handle_data_element+0x140>
 9a8:	sub	sp, fp, #8
 9ac:	pop	{r4, r5, fp, lr}
 9b0:	b	0 <export_data_element_to_ascii>
 9b4:	ldr	r0, [r5, #136]	; 0x88
 9b8:	mov	r1, sp
 9bc:	add	r0, r5, r0, lsl #2
 9c0:	ldr	r0, [r0, #8]
 9c4:	bl	0 <coda_type_get_read_type>
 9c8:	cmp	r0, #0
 9cc:	beq	9d4 <handle_data_element+0xf0>
 9d0:	bl	0 <handle_coda_error>
 9d4:	ldr	r0, [sp]
 9d8:	bl	0 <coda_type_get_native_type_name>
 9dc:	mov	r1, r0
 9e0:	movw	r0, #0
 9e4:	movt	r0, #0
 9e8:	bl	0 <printf>
 9ec:	ldr	r0, [sp]
 9f0:	sub	r0, r0, #11
 9f4:	cmp	r0, #1
 9f8:	bhi	a24 <handle_data_element+0x140>
 9fc:	mov	r0, #40	; 0x28
 a00:	bl	0 <putchar>
 a04:	ldr	r1, [r5, #3360]	; 0xd20
 a08:	cmp	r1, #0
 a0c:	ble	b30 <handle_data_element+0x24c>
 a10:	ldr	r0, [r4]
 a14:	sub	r1, r1, #1
 a18:	bl	2ac <print_array_dim>
 a1c:	mov	r0, #41	; 0x29
 a20:	bl	0 <putchar>
 a24:	movw	r0, #0
 a28:	movt	r0, #0
 a2c:	ldr	r0, [r0]
 a30:	cmp	r0, #0
 a34:	beq	a80 <handle_data_element+0x19c>
 a38:	movw	r0, #0
 a3c:	movt	r0, #0
 a40:	ldr	r1, [r0, #136]	; 0x88
 a44:	add	r0, r0, r1, lsl #2
 a48:	add	r1, sp, #4
 a4c:	ldr	r0, [r0, #8]
 a50:	bl	0 <coda_type_get_unit>
 a54:	cmp	r0, #0
 a58:	beq	a60 <handle_data_element+0x17c>
 a5c:	bl	0 <handle_coda_error>
 a60:	ldr	r1, [sp, #4]
 a64:	cmp	r1, #0
 a68:	ldrbne	r0, [r1]
 a6c:	cmpne	r0, #0
 a70:	beq	a80 <handle_data_element+0x19c>
 a74:	movw	r0, #0
 a78:	movt	r0, #0
 a7c:	bl	0 <printf>
 a80:	movw	r0, #0
 a84:	movt	r0, #0
 a88:	ldr	r0, [r0]
 a8c:	cmp	r0, #0
 a90:	beq	adc <handle_data_element+0x1f8>
 a94:	movw	r0, #0
 a98:	movt	r0, #0
 a9c:	ldr	r1, [r0, #136]	; 0x88
 aa0:	add	r0, r0, r1, lsl #2
 aa4:	add	r1, sp, #4
 aa8:	ldr	r0, [r0, #8]
 aac:	bl	0 <coda_type_get_description>
 ab0:	cmp	r0, #0
 ab4:	beq	abc <handle_data_element+0x1d8>
 ab8:	bl	0 <handle_coda_error>
 abc:	ldr	r1, [sp, #4]
 ac0:	cmp	r1, #0
 ac4:	ldrbne	r0, [r1]
 ac8:	cmpne	r0, #0
 acc:	beq	adc <handle_data_element+0x1f8>
 ad0:	movw	r0, #0
 ad4:	movt	r0, #0
 ad8:	bl	0 <printf>
 adc:	mov	r0, #10
 ae0:	bl	0 <putchar>
 ae4:	movw	r0, #0
 ae8:	movt	r0, #0
 aec:	ldr	r0, [r0]
 af0:	cmp	r0, #0
 af4:	beq	b28 <handle_data_element+0x244>
 af8:	movw	r5, #0
 afc:	movt	r5, #0
 b00:	ldr	r0, [r5]
 b04:	cmp	r0, #1
 b08:	blt	b28 <handle_data_element+0x244>
 b0c:	mov	r4, #0
 b10:	mov	r0, r4
 b14:	bl	0 <print_all_distinct_dims>
 b18:	ldr	r0, [r5]
 b1c:	add	r4, r4, #1
 b20:	cmp	r4, r0
 b24:	blt	b10 <handle_data_element+0x22c>
 b28:	sub	sp, fp, #8
 b2c:	pop	{r4, r5, fp, pc}
 b30:	movw	r0, #0
 b34:	movw	r1, #0
 b38:	movw	r3, #0
 b3c:	mov	r2, #238	; 0xee
 b40:	movt	r0, #0
 b44:	movt	r1, #0
 b48:	movt	r3, #0
 b4c:	bl	0 <__assert_fail>
