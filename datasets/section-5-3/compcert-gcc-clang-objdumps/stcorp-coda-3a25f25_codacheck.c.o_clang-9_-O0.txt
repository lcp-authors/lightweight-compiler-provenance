
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codacheck.dir/tools/codacheck/codacheck.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
   0:	push	{r4, r5, fp, lr}
   4:	add	fp, sp, #8
   8:	sub	sp, sp, #56	; 0x38
   c:	sub	sp, sp, #1024	; 0x400
  10:	movw	r2, #0
  14:	str	r2, [fp, #-12]
  18:	str	r0, [fp, #-16]
  1c:	str	r1, [fp, #-20]	; 0xffffffec
  20:	str	r2, [fp, #-24]	; 0xffffffe8
  24:	movw	r0, #0
  28:	movt	r0, #0
  2c:	str	r2, [r0]
  30:	movw	r0, #0
  34:	movt	r0, #0
  38:	str	r2, [r0]
  3c:	movw	r0, #1
  40:	str	r0, [fp, #-28]	; 0xffffffe4
  44:	movw	r0, #0
  48:	movt	r0, #0
  4c:	str	r2, [r0]
  50:	ldr	r0, [fp, #-16]
  54:	cmp	r0, #1
  58:	beq	94 <main+0x94>
  5c:	ldr	r0, [fp, #-20]	; 0xffffffec
  60:	ldr	r0, [r0, #4]
  64:	movw	r1, #0
  68:	movt	r1, #0
  6c:	bl	0 <strcmp>
  70:	cmp	r0, #0
  74:	beq	94 <main+0x94>
  78:	ldr	r0, [fp, #-20]	; 0xffffffec
  7c:	ldr	r0, [r0, #4]
  80:	movw	r1, #0
  84:	movt	r1, #0
  88:	bl	0 <strcmp>
  8c:	cmp	r0, #0
  90:	bne	a0 <main+0xa0>
  94:	bl	8a8 <print_help>
  98:	movw	r0, #0
  9c:	bl	0 <exit>
  a0:	ldr	r0, [fp, #-20]	; 0xffffffec
  a4:	ldr	r0, [r0, #4]
  a8:	movw	r1, #0
  ac:	movt	r1, #0
  b0:	bl	0 <strcmp>
  b4:	cmp	r0, #0
  b8:	beq	d8 <main+0xd8>
  bc:	ldr	r0, [fp, #-20]	; 0xffffffec
  c0:	ldr	r0, [r0, #4]
  c4:	movw	r1, #0
  c8:	movt	r1, #0
  cc:	bl	0 <strcmp>
  d0:	cmp	r0, #0
  d4:	bne	e4 <main+0xe4>
  d8:	bl	b48 <print_version>
  dc:	movw	r0, #0
  e0:	bl	0 <exit>
  e4:	movw	r0, #1
  e8:	str	r0, [fp, #-32]	; 0xffffffe0
  ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
  f0:	add	r0, r0, #1
  f4:	ldr	r1, [fp, #-16]
  f8:	cmp	r0, r1
  fc:	bge	14c <main+0x14c>
 100:	ldr	r0, [fp, #-20]	; 0xffffffec
 104:	ldr	r1, [fp, #-32]	; 0xffffffe0
 108:	add	r0, r0, r1, lsl #2
 10c:	ldr	r0, [r0]
 110:	movw	r1, #0
 114:	movt	r1, #0
 118:	bl	0 <strcmp>
 11c:	cmp	r0, #0
 120:	bne	14c <main+0x14c>
 124:	ldr	r0, [fp, #-20]	; 0xffffffec
 128:	ldr	r1, [fp, #-32]	; 0xffffffe0
 12c:	add	r1, r1, #1
 130:	add	r0, r0, r1, lsl #2
 134:	ldr	r0, [r0]
 138:	bl	0 <coda_set_definition_path>
 13c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 140:	add	r1, r1, #2
 144:	str	r1, [fp, #-32]	; 0xffffffe0
 148:	b	1c0 <main+0x1c0>
 14c:	movw	r0, #0
 150:	movt	r0, #0
 154:	str	r0, [fp, #-36]	; 0xffffffdc
 158:	ldr	r0, [fp, #-20]	; 0xffffffec
 15c:	ldr	r0, [r0]
 160:	ldr	r2, [fp, #-36]	; 0xffffffdc
 164:	movw	r1, #0
 168:	bl	0 <coda_set_definition_path_conditional>
 16c:	cmp	r0, #0
 170:	beq	1bc <main+0x1bc>
 174:	movw	r0, #0
 178:	movt	r0, #0
 17c:	ldr	r0, [r0]
 180:	str	r0, [sp, #36]	; 0x24
 184:	bl	0 <coda_get_errno>
 188:	ldr	r0, [r0]
 18c:	bl	0 <coda_errno_to_string>
 190:	ldr	r1, [sp, #36]	; 0x24
 194:	str	r0, [sp, #32]
 198:	mov	r0, r1
 19c:	movw	r1, #0
 1a0:	movt	r1, #0
 1a4:	ldr	r2, [sp, #32]
 1a8:	bl	0 <fprintf>
 1ac:	movw	r1, #1
 1b0:	str	r0, [sp, #28]
 1b4:	mov	r0, r1
 1b8:	bl	0 <exit>
 1bc:	b	1c0 <main+0x1c0>
 1c0:	b	1c4 <main+0x1c4>
 1c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
 1c8:	ldr	r1, [fp, #-16]
 1cc:	cmp	r0, r1
 1d0:	bge	3c0 <main+0x3c0>
 1d4:	ldr	r0, [fp, #-20]	; 0xffffffec
 1d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
 1dc:	add	r0, r0, r1, lsl #2
 1e0:	ldr	r0, [r0]
 1e4:	movw	r1, #0
 1e8:	movt	r1, #0
 1ec:	bl	0 <strcmp>
 1f0:	cmp	r0, #0
 1f4:	beq	21c <main+0x21c>
 1f8:	ldr	r0, [fp, #-20]	; 0xffffffec
 1fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
 200:	add	r0, r0, r1, lsl #2
 204:	ldr	r0, [r0]
 208:	movw	r1, #0
 20c:	movt	r1, #0
 210:	bl	0 <strcmp>
 214:	cmp	r0, #0
 218:	bne	230 <main+0x230>
 21c:	movw	r0, #0
 220:	movt	r0, #0
 224:	movw	r1, #1
 228:	str	r1, [r0]
 22c:	b	3b0 <main+0x3b0>
 230:	ldr	r0, [fp, #-20]	; 0xffffffec
 234:	ldr	r1, [fp, #-32]	; 0xffffffe0
 238:	add	r0, r0, r1, lsl #2
 23c:	ldr	r0, [r0]
 240:	movw	r1, #0
 244:	movt	r1, #0
 248:	bl	0 <strcmp>
 24c:	cmp	r0, #0
 250:	beq	278 <main+0x278>
 254:	ldr	r0, [fp, #-20]	; 0xffffffec
 258:	ldr	r1, [fp, #-32]	; 0xffffffe0
 25c:	add	r0, r0, r1, lsl #2
 260:	ldr	r0, [r0]
 264:	movw	r1, #0
 268:	movt	r1, #0
 26c:	bl	0 <strcmp>
 270:	cmp	r0, #0
 274:	bne	28c <main+0x28c>
 278:	movw	r0, #0
 27c:	movt	r0, #0
 280:	movw	r1, #1
 284:	str	r1, [r0]
 288:	b	3ac <main+0x3ac>
 28c:	ldr	r0, [fp, #-20]	; 0xffffffec
 290:	ldr	r1, [fp, #-32]	; 0xffffffe0
 294:	add	r0, r0, r1, lsl #2
 298:	ldr	r0, [r0]
 29c:	movw	r1, #0
 2a0:	movt	r1, #0
 2a4:	bl	0 <strcmp>
 2a8:	cmp	r0, #0
 2ac:	beq	2d4 <main+0x2d4>
 2b0:	ldr	r0, [fp, #-20]	; 0xffffffec
 2b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
 2b8:	add	r0, r0, r1, lsl #2
 2bc:	ldr	r0, [r0]
 2c0:	movw	r1, #0
 2c4:	movt	r1, #0
 2c8:	bl	0 <strcmp>
 2cc:	cmp	r0, #0
 2d0:	bne	2e8 <main+0x2e8>
 2d4:	movw	r0, #0
 2d8:	movt	r0, #0
 2dc:	movw	r1, #1
 2e0:	str	r1, [r0]
 2e4:	b	3a8 <main+0x3a8>
 2e8:	ldr	r0, [fp, #-20]	; 0xffffffec
 2ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
 2f0:	add	r0, r0, r1, lsl #2
 2f4:	ldr	r0, [r0]
 2f8:	movw	r1, #0
 2fc:	movt	r1, #0
 300:	bl	0 <strcmp>
 304:	cmp	r0, #0
 308:	bne	318 <main+0x318>
 30c:	movw	r0, #0
 310:	str	r0, [fp, #-28]	; 0xffffffe4
 314:	b	3a4 <main+0x3a4>
 318:	ldr	r0, [fp, #-20]	; 0xffffffec
 31c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 320:	add	r0, r0, r1, lsl #2
 324:	ldr	r0, [r0]
 328:	movw	r1, #0
 32c:	movt	r1, #0
 330:	bl	0 <strcmp>
 334:	cmp	r0, #0
 338:	bne	35c <main+0x35c>
 33c:	ldr	r0, [fp, #-32]	; 0xffffffe0
 340:	ldr	r1, [fp, #-16]
 344:	sub	r1, r1, #1
 348:	cmp	r0, r1
 34c:	bne	35c <main+0x35c>
 350:	movw	r0, #1
 354:	str	r0, [fp, #-24]	; 0xffffffe8
 358:	b	3c0 <main+0x3c0>
 35c:	ldr	r0, [fp, #-20]	; 0xffffffec
 360:	ldr	r1, [fp, #-32]	; 0xffffffe0
 364:	add	r0, r0, r1, lsl #2
 368:	ldr	r0, [r0]
 36c:	ldrb	r0, [r0]
 370:	cmp	r0, #45	; 0x2d
 374:	beq	37c <main+0x37c>
 378:	b	3c0 <main+0x3c0>
 37c:	movw	r0, #0
 380:	movt	r0, #0
 384:	ldr	r0, [r0]
 388:	movw	r1, #0
 38c:	movt	r1, #0
 390:	bl	0 <fprintf>
 394:	str	r0, [sp, #24]
 398:	bl	8a8 <print_help>
 39c:	movw	r0, #1
 3a0:	bl	0 <exit>
 3a4:	b	3a8 <main+0x3a8>
 3a8:	b	3ac <main+0x3ac>
 3ac:	b	3b0 <main+0x3b0>
 3b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
 3b4:	add	r0, r0, #1
 3b8:	str	r0, [fp, #-32]	; 0xffffffe0
 3bc:	b	1c4 <main+0x1c4>
 3c0:	bl	0 <coda_init>
 3c4:	cmp	r0, #0
 3c8:	beq	414 <main+0x414>
 3cc:	movw	r0, #0
 3d0:	movt	r0, #0
 3d4:	ldr	r0, [r0]
 3d8:	str	r0, [sp, #20]
 3dc:	bl	0 <coda_get_errno>
 3e0:	ldr	r0, [r0]
 3e4:	bl	0 <coda_errno_to_string>
 3e8:	ldr	r1, [sp, #20]
 3ec:	str	r0, [sp, #16]
 3f0:	mov	r0, r1
 3f4:	movw	r1, #0
 3f8:	movt	r1, #0
 3fc:	ldr	r2, [sp, #16]
 400:	bl	0 <fprintf>
 404:	movw	r1, #1
 408:	str	r0, [sp, #12]
 40c:	mov	r0, r1
 410:	bl	0 <exit>
 414:	movw	r0, #0
 418:	bl	0 <coda_set_option_perform_boundary_checks>
 41c:	movw	r1, #0
 420:	str	r0, [sp, #8]
 424:	mov	r0, r1
 428:	bl	0 <coda_set_option_perform_conversions>
 42c:	ldr	r1, [fp, #-28]	; 0xffffffe4
 430:	str	r0, [sp, #4]
 434:	mov	r0, r1
 438:	bl	0 <coda_set_option_use_mmap>
 43c:	ldr	r1, [fp, #-24]	; 0xffffffe8
 440:	cmp	r1, #0
 444:	beq	554 <main+0x554>
 448:	b	44c <main+0x44c>
 44c:	movw	r0, #0
 450:	str	r0, [sp, #44]	; 0x2c
 454:	bl	0 <getchar>
 458:	strb	r0, [sp, #51]	; 0x33
 45c:	ldrb	r0, [sp, #51]	; 0x33
 460:	cmp	r0, #13
 464:	bne	494 <main+0x494>
 468:	bl	0 <getchar>
 46c:	strb	r0, [sp, #43]	; 0x2b
 470:	ldrb	r0, [sp, #43]	; 0x2b
 474:	cmp	r0, #10
 478:	beq	490 <main+0x490>
 47c:	ldrb	r0, [sp, #43]	; 0x2b
 480:	movw	r1, #0
 484:	movt	r1, #0
 488:	ldr	r1, [r1]
 48c:	bl	0 <ungetc>
 490:	b	494 <main+0x494>
 494:	ldrb	r0, [sp, #51]	; 0x33
 498:	cmn	r0, #1
 49c:	beq	4b8 <main+0x4b8>
 4a0:	ldrb	r0, [sp, #51]	; 0x33
 4a4:	cmp	r0, #10
 4a8:	beq	4b8 <main+0x4b8>
 4ac:	ldrb	r0, [sp, #51]	; 0x33
 4b0:	cmp	r0, #13
 4b4:	bne	4d0 <main+0x4d0>
 4b8:	ldr	r0, [sp, #44]	; 0x2c
 4bc:	add	r1, sp, #52	; 0x34
 4c0:	add	r0, r1, r0
 4c4:	movw	r1, #0
 4c8:	strb	r1, [r0]
 4cc:	b	524 <main+0x524>
 4d0:	ldrb	r0, [sp, #51]	; 0x33
 4d4:	ldr	r1, [sp, #44]	; 0x2c
 4d8:	add	r2, sp, #52	; 0x34
 4dc:	add	r1, r2, r1
 4e0:	strb	r0, [r1]
 4e4:	ldr	r0, [sp, #44]	; 0x2c
 4e8:	add	r0, r0, #1
 4ec:	str	r0, [sp, #44]	; 0x2c
 4f0:	ldr	r0, [sp, #44]	; 0x2c
 4f4:	cmp	r0, #1000	; 0x3e8
 4f8:	bge	500 <main+0x500>
 4fc:	b	520 <main+0x520>
 500:	movw	r0, #0
 504:	movt	r0, #0
 508:	movw	r1, #0
 50c:	movt	r1, #0
 510:	movw	r2, #316	; 0x13c
 514:	movw	r3, #0
 518:	movt	r3, #0
 51c:	bl	0 <__assert_fail>
 520:	b	454 <main+0x454>
 524:	ldr	r0, [sp, #44]	; 0x2c
 528:	cmp	r0, #0
 52c:	ble	540 <main+0x540>
 530:	add	r0, sp, #52	; 0x34
 534:	bl	5c4 <check_file>
 538:	movw	r0, #0
 53c:	bl	0 <fflush>
 540:	b	544 <main+0x544>
 544:	ldrb	r0, [sp, #51]	; 0x33
 548:	cmn	r0, #1
 54c:	bne	44c <main+0x44c>
 550:	b	598 <main+0x598>
 554:	b	558 <main+0x558>
 558:	ldr	r0, [fp, #-32]	; 0xffffffe0
 55c:	ldr	r1, [fp, #-16]
 560:	cmp	r0, r1
 564:	bge	594 <main+0x594>
 568:	ldr	r0, [fp, #-20]	; 0xffffffec
 56c:	ldr	r1, [fp, #-32]	; 0xffffffe0
 570:	add	r0, r0, r1, lsl #2
 574:	ldr	r0, [r0]
 578:	bl	5c4 <check_file>
 57c:	movw	r0, #0
 580:	bl	0 <fflush>
 584:	ldr	r1, [fp, #-32]	; 0xffffffe0
 588:	add	r1, r1, #1
 58c:	str	r1, [fp, #-32]	; 0xffffffe0
 590:	b	558 <main+0x558>
 594:	b	598 <main+0x598>
 598:	bl	0 <coda_done>
 59c:	movw	r0, #0
 5a0:	movt	r0, #0
 5a4:	ldr	r0, [r0]
 5a8:	cmp	r0, #0
 5ac:	beq	5b8 <main+0x5b8>
 5b0:	movw	r0, #1
 5b4:	bl	0 <exit>
 5b8:	movw	r0, #0
 5bc:	sub	sp, fp, #8
 5c0:	pop	{r4, r5, fp, pc}

000005c4 <check_file>:
 5c4:	push	{fp, lr}
 5c8:	mov	fp, sp
 5cc:	sub	sp, sp, #88	; 0x58
 5d0:	str	r0, [fp, #-4]
 5d4:	ldr	r1, [fp, #-4]
 5d8:	movw	r0, #0
 5dc:	movt	r0, #0
 5e0:	bl	0 <printf>
 5e4:	ldr	r1, [fp, #-4]
 5e8:	str	r0, [sp, #44]	; 0x2c
 5ec:	mov	r0, r1
 5f0:	sub	r1, fp, #24
 5f4:	sub	r2, fp, #12
 5f8:	sub	r3, fp, #28
 5fc:	sub	ip, fp, #32
 600:	str	ip, [sp]
 604:	sub	ip, fp, #36	; 0x24
 608:	str	ip, [sp, #4]
 60c:	bl	0 <coda_recognize_file>
 610:	cmp	r0, #0
 614:	beq	660 <check_file+0x9c>
 618:	bl	0 <coda_get_errno>
 61c:	ldr	r0, [r0]
 620:	bl	0 <coda_errno_to_string>
 624:	movw	r1, #0
 628:	movt	r1, #0
 62c:	str	r0, [sp, #40]	; 0x28
 630:	mov	r0, r1
 634:	ldr	r1, [sp, #40]	; 0x28
 638:	bl	0 <printf>
 63c:	movw	r1, #0
 640:	str	r0, [sp, #36]	; 0x24
 644:	mov	r0, r1
 648:	bl	0 <coda_set_error>
 64c:	movw	r0, #0
 650:	movt	r0, #0
 654:	movw	r1, #1
 658:	str	r1, [r0]
 65c:	b	8a0 <check_file+0x2dc>
 660:	movw	r0, #0
 664:	movt	r0, #0
 668:	ldr	r0, [r0]
 66c:	cmp	r0, #0
 670:	beq	6b4 <check_file+0xf0>
 674:	ldr	r0, [fp, #-28]	; 0xffffffe4
 678:	movw	r1, #0
 67c:	cmp	r0, r1
 680:	beq	694 <check_file+0xd0>
 684:	ldr	r0, [fp, #-32]	; 0xffffffe0
 688:	movw	r1, #0
 68c:	cmp	r0, r1
 690:	bne	6b4 <check_file+0xf0>
 694:	movw	r0, #0
 698:	movt	r0, #0
 69c:	bl	0 <printf>
 6a0:	movw	r1, #0
 6a4:	movt	r1, #0
 6a8:	movw	r2, #1
 6ac:	str	r2, [r1]
 6b0:	b	8a0 <check_file+0x2dc>
 6b4:	movw	r0, #0
 6b8:	movt	r0, #0
 6bc:	ldr	r0, [r0]
 6c0:	cmp	r0, #0
 6c4:	beq	72c <check_file+0x168>
 6c8:	ldr	r0, [fp, #-12]
 6cc:	bl	0 <coda_type_get_format_name>
 6d0:	movw	r1, #0
 6d4:	movt	r1, #0
 6d8:	str	r0, [sp, #32]
 6dc:	mov	r0, r1
 6e0:	ldr	r1, [sp, #32]
 6e4:	bl	0 <printf>
 6e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
 6ec:	movw	r2, #0
 6f0:	cmp	r1, r2
 6f4:	beq	720 <check_file+0x15c>
 6f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
 6fc:	movw	r1, #0
 700:	cmp	r0, r1
 704:	beq	720 <check_file+0x15c>
 708:	ldr	r1, [fp, #-28]	; 0xffffffe4
 70c:	ldr	r2, [fp, #-32]	; 0xffffffe0
 710:	ldr	r3, [fp, #-36]	; 0xffffffdc
 714:	movw	r0, #0
 718:	movt	r0, #0
 71c:	bl	0 <printf>
 720:	movw	r0, #0
 724:	movt	r0, #0
 728:	bl	0 <printf>
 72c:	ldr	r0, [fp, #-4]
 730:	sub	r1, fp, #8
 734:	bl	0 <coda_open>
 738:	str	r0, [fp, #-40]	; 0xffffffd8
 73c:	ldr	r0, [fp, #-40]	; 0xffffffd8
 740:	cmp	r0, #0
 744:	beq	780 <check_file+0x1bc>
 748:	bl	0 <coda_get_errno>
 74c:	ldr	r0, [r0]
 750:	cmn	r0, #21
 754:	bne	780 <check_file+0x1bc>
 758:	movw	r0, #0
 75c:	bl	0 <coda_set_option_use_mmap>
 760:	ldr	r1, [fp, #-4]
 764:	str	r0, [sp, #28]
 768:	mov	r0, r1
 76c:	sub	r1, fp, #8
 770:	bl	0 <coda_open>
 774:	str	r0, [fp, #-40]	; 0xffffffd8
 778:	movw	r0, #1
 77c:	bl	0 <coda_set_option_use_mmap>
 780:	ldr	r0, [fp, #-40]	; 0xffffffd8
 784:	cmp	r0, #0
 788:	beq	7c4 <check_file+0x200>
 78c:	bl	0 <coda_get_errno>
 790:	ldr	r0, [r0]
 794:	bl	0 <coda_errno_to_string>
 798:	movw	r1, #0
 79c:	movt	r1, #0
 7a0:	str	r0, [sp, #24]
 7a4:	mov	r0, r1
 7a8:	ldr	r1, [sp, #24]
 7ac:	bl	0 <printf>
 7b0:	movw	r1, #0
 7b4:	movt	r1, #0
 7b8:	movw	r2, #1
 7bc:	str	r2, [r1]
 7c0:	b	8a0 <check_file+0x2dc>
 7c4:	ldr	r0, [fp, #-8]
 7c8:	movw	r1, #0
 7cc:	movt	r1, #0
 7d0:	ldr	r1, [r1]
 7d4:	cmp	r1, #0
 7d8:	movw	r1, #0
 7dc:	movne	r1, #1
 7e0:	mvn	r2, #0
 7e4:	eor	r1, r1, r2
 7e8:	and	r1, r1, #1
 7ec:	movw	r2, #0
 7f0:	movt	r2, #0
 7f4:	movw	r3, #0
 7f8:	bl	0 <coda_product_check>
 7fc:	cmp	r0, #0
 800:	beq	84c <check_file+0x288>
 804:	bl	0 <coda_get_errno>
 808:	ldr	r0, [r0]
 80c:	bl	0 <coda_errno_to_string>
 810:	movw	r1, #0
 814:	movt	r1, #0
 818:	str	r0, [sp, #20]
 81c:	mov	r0, r1
 820:	ldr	r1, [sp, #20]
 824:	bl	0 <printf>
 828:	movw	r1, #0
 82c:	movt	r1, #0
 830:	movw	r2, #1
 834:	str	r2, [r1]
 838:	ldr	r1, [fp, #-8]
 83c:	str	r0, [sp, #16]
 840:	mov	r0, r1
 844:	bl	0 <coda_close>
 848:	b	8a0 <check_file+0x2dc>
 84c:	ldr	r0, [fp, #-8]
 850:	bl	0 <coda_close>
 854:	cmp	r0, #0
 858:	beq	894 <check_file+0x2d0>
 85c:	bl	0 <coda_get_errno>
 860:	ldr	r0, [r0]
 864:	bl	0 <coda_errno_to_string>
 868:	movw	r1, #0
 86c:	movt	r1, #0
 870:	str	r0, [sp, #12]
 874:	mov	r0, r1
 878:	ldr	r1, [sp, #12]
 87c:	bl	0 <printf>
 880:	movw	r1, #0
 884:	movt	r1, #0
 888:	movw	r2, #1
 88c:	str	r2, [r1]
 890:	b	8a0 <check_file+0x2dc>
 894:	movw	r0, #0
 898:	movt	r0, #0
 89c:	bl	0 <printf>
 8a0:	mov	sp, fp
 8a4:	pop	{fp, pc}

000008a8 <print_help>:
 8a8:	push	{fp, lr}
 8ac:	mov	fp, sp
 8b0:	sub	sp, sp, #128	; 0x80
 8b4:	movw	r0, #0
 8b8:	movt	r0, #0
 8bc:	bl	0 <printf>
 8c0:	movw	r1, #0
 8c4:	movt	r1, #0
 8c8:	str	r0, [fp, #-4]
 8cc:	mov	r0, r1
 8d0:	bl	0 <printf>
 8d4:	movw	r1, #0
 8d8:	movt	r1, #0
 8dc:	str	r0, [fp, #-8]
 8e0:	mov	r0, r1
 8e4:	bl	0 <printf>
 8e8:	movw	r1, #0
 8ec:	movt	r1, #0
 8f0:	str	r0, [fp, #-12]
 8f4:	mov	r0, r1
 8f8:	bl	0 <printf>
 8fc:	movw	r1, #0
 900:	movt	r1, #0
 904:	str	r0, [fp, #-16]
 908:	mov	r0, r1
 90c:	bl	0 <printf>
 910:	movw	r1, #0
 914:	movt	r1, #0
 918:	str	r0, [fp, #-20]	; 0xffffffec
 91c:	mov	r0, r1
 920:	bl	0 <printf>
 924:	movw	r1, #0
 928:	movt	r1, #0
 92c:	str	r0, [fp, #-24]	; 0xffffffe8
 930:	mov	r0, r1
 934:	bl	0 <printf>
 938:	movw	r1, #0
 93c:	movt	r1, #0
 940:	str	r0, [fp, #-28]	; 0xffffffe4
 944:	mov	r0, r1
 948:	bl	0 <printf>
 94c:	movw	r1, #0
 950:	movt	r1, #0
 954:	str	r0, [fp, #-32]	; 0xffffffe0
 958:	mov	r0, r1
 95c:	bl	0 <printf>
 960:	movw	r1, #0
 964:	movt	r1, #0
 968:	str	r0, [fp, #-36]	; 0xffffffdc
 96c:	mov	r0, r1
 970:	bl	0 <printf>
 974:	movw	r1, #0
 978:	movt	r1, #0
 97c:	str	r0, [fp, #-40]	; 0xffffffd8
 980:	mov	r0, r1
 984:	bl	0 <printf>
 988:	movw	r1, #0
 98c:	movt	r1, #0
 990:	str	r0, [fp, #-44]	; 0xffffffd4
 994:	mov	r0, r1
 998:	bl	0 <printf>
 99c:	movw	r1, #0
 9a0:	movt	r1, #0
 9a4:	str	r0, [fp, #-48]	; 0xffffffd0
 9a8:	mov	r0, r1
 9ac:	bl	0 <printf>
 9b0:	movw	r1, #0
 9b4:	movt	r1, #0
 9b8:	str	r0, [fp, #-52]	; 0xffffffcc
 9bc:	mov	r0, r1
 9c0:	bl	0 <printf>
 9c4:	movw	r1, #0
 9c8:	movt	r1, #0
 9cc:	str	r0, [fp, #-56]	; 0xffffffc8
 9d0:	mov	r0, r1
 9d4:	bl	0 <printf>
 9d8:	movw	r1, #0
 9dc:	movt	r1, #0
 9e0:	str	r0, [fp, #-60]	; 0xffffffc4
 9e4:	mov	r0, r1
 9e8:	bl	0 <printf>
 9ec:	movw	r1, #0
 9f0:	movt	r1, #0
 9f4:	str	r0, [sp, #64]	; 0x40
 9f8:	mov	r0, r1
 9fc:	bl	0 <printf>
 a00:	movw	r1, #0
 a04:	movt	r1, #0
 a08:	str	r0, [sp, #60]	; 0x3c
 a0c:	mov	r0, r1
 a10:	bl	0 <printf>
 a14:	movw	r1, #0
 a18:	movt	r1, #0
 a1c:	str	r0, [sp, #56]	; 0x38
 a20:	mov	r0, r1
 a24:	bl	0 <printf>
 a28:	movw	r1, #0
 a2c:	movt	r1, #0
 a30:	str	r0, [sp, #52]	; 0x34
 a34:	mov	r0, r1
 a38:	bl	0 <printf>
 a3c:	movw	r1, #0
 a40:	movt	r1, #0
 a44:	str	r0, [sp, #48]	; 0x30
 a48:	mov	r0, r1
 a4c:	bl	0 <printf>
 a50:	movw	r1, #0
 a54:	movt	r1, #0
 a58:	str	r0, [sp, #44]	; 0x2c
 a5c:	mov	r0, r1
 a60:	bl	0 <printf>
 a64:	movw	r1, #0
 a68:	movt	r1, #0
 a6c:	str	r0, [sp, #40]	; 0x28
 a70:	mov	r0, r1
 a74:	bl	0 <printf>
 a78:	movw	r1, #0
 a7c:	movt	r1, #0
 a80:	str	r0, [sp, #36]	; 0x24
 a84:	mov	r0, r1
 a88:	bl	0 <printf>
 a8c:	movw	r1, #0
 a90:	movt	r1, #0
 a94:	str	r0, [sp, #32]
 a98:	mov	r0, r1
 a9c:	bl	0 <printf>
 aa0:	movw	r1, #0
 aa4:	movt	r1, #0
 aa8:	str	r0, [sp, #28]
 aac:	mov	r0, r1
 ab0:	bl	0 <printf>
 ab4:	movw	r1, #0
 ab8:	movt	r1, #0
 abc:	str	r0, [sp, #24]
 ac0:	mov	r0, r1
 ac4:	bl	0 <printf>
 ac8:	movw	r1, #0
 acc:	movt	r1, #0
 ad0:	str	r0, [sp, #20]
 ad4:	mov	r0, r1
 ad8:	bl	0 <printf>
 adc:	movw	r1, #0
 ae0:	movt	r1, #0
 ae4:	str	r0, [sp, #16]
 ae8:	mov	r0, r1
 aec:	bl	0 <printf>
 af0:	movw	r1, #0
 af4:	movt	r1, #0
 af8:	str	r0, [sp, #12]
 afc:	mov	r0, r1
 b00:	bl	0 <printf>
 b04:	movw	r1, #0
 b08:	movt	r1, #0
 b0c:	str	r0, [sp, #8]
 b10:	mov	r0, r1
 b14:	bl	0 <printf>
 b18:	movw	r1, #0
 b1c:	movt	r1, #0
 b20:	str	r0, [sp, #4]
 b24:	mov	r0, r1
 b28:	bl	0 <printf>
 b2c:	movw	r1, #0
 b30:	movt	r1, #0
 b34:	str	r0, [sp]
 b38:	mov	r0, r1
 b3c:	bl	0 <printf>
 b40:	mov	sp, fp
 b44:	pop	{fp, pc}

00000b48 <print_version>:
 b48:	push	{fp, lr}
 b4c:	mov	fp, sp
 b50:	sub	sp, sp, #16
 b54:	bl	0 <coda_get_libcoda_version>
 b58:	movw	r1, #0
 b5c:	movt	r1, #0
 b60:	str	r0, [fp, #-4]
 b64:	mov	r0, r1
 b68:	ldr	r1, [fp, #-4]
 b6c:	bl	0 <printf>
 b70:	movw	r1, #0
 b74:	movt	r1, #0
 b78:	str	r0, [sp, #8]
 b7c:	mov	r0, r1
 b80:	bl	0 <printf>
 b84:	movw	r1, #0
 b88:	movt	r1, #0
 b8c:	str	r0, [sp, #4]
 b90:	mov	r0, r1
 b94:	bl	0 <printf>
 b98:	mov	sp, fp
 b9c:	pop	{fp, pc}

00000ba0 <print_error>:
 ba0:	push	{fp, lr}
 ba4:	mov	fp, sp
 ba8:	sub	sp, sp, #16
 bac:	str	r0, [fp, #-4]
 bb0:	str	r1, [sp, #8]
 bb4:	str	r2, [sp, #4]
 bb8:	ldr	r1, [sp, #8]
 bbc:	movw	r0, #0
 bc0:	movt	r0, #0
 bc4:	bl	0 <printf>
 bc8:	ldr	r1, [fp, #-4]
 bcc:	movw	r2, #0
 bd0:	cmp	r1, r2
 bd4:	beq	bfc <print_error+0x5c>
 bd8:	movw	r0, #0
 bdc:	movt	r0, #0
 be0:	bl	0 <printf>
 be4:	ldr	r1, [fp, #-4]
 be8:	str	r0, [sp]
 bec:	mov	r0, r1
 bf0:	movw	r1, #0
 bf4:	movt	r1, #0
 bf8:	bl	0 <coda_cursor_print_path>
 bfc:	movw	r0, #0
 c00:	movt	r0, #0
 c04:	bl	0 <printf>
 c08:	movw	r1, #0
 c0c:	movt	r1, #0
 c10:	movw	r2, #1
 c14:	str	r2, [r1]
 c18:	mov	sp, fp
 c1c:	pop	{fp, pc}
