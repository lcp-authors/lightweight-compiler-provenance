
../compcert-repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/CMakeFiles/reflection_test.dir/reflection_test.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <readfile>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #40	; 0x28
      10:	str	r0, [fp, #-32]	; 0xffffffe0
      14:	str	r1, [fp, #-36]	; 0xffffffdc
      18:	str	r2, [fp, #-40]	; 0xffffffd8
      1c:	ldr	r3, [fp, #-40]	; 0xffffffd8
      20:	cmp	r3, #0
      24:	bne	30 <readfile+0x30>
      28:	sub	r3, fp, #28
      2c:	b	34 <readfile+0x34>
      30:	ldr	r3, [fp, #-40]	; 0xffffffd8
      34:	str	r3, [fp, #-40]	; 0xffffffd8
      38:	movw	r1, #0
      3c:	movt	r1, #0
      40:	ldr	r0, [fp, #-32]	; 0xffffffe0
      44:	bl	0 <fopen>
      48:	str	r0, [fp, #-20]	; 0xffffffec
      4c:	mov	r3, #0
      50:	str	r3, [fp, #-8]
      54:	mov	r3, #0
      58:	str	r3, [fp, #-16]
      5c:	ldr	r3, [fp, #-20]	; 0xffffffec
      60:	cmp	r3, #0
      64:	beq	168 <readfile+0x168>
      68:	mov	r2, #2
      6c:	mov	r1, #0
      70:	ldr	r0, [fp, #-20]	; 0xffffffec
      74:	bl	0 <fseek>
      78:	ldr	r0, [fp, #-20]	; 0xffffffec
      7c:	bl	0 <ftell>
      80:	mov	r3, r0
      84:	str	r3, [fp, #-8]
      88:	ldr	r3, [fp, #-40]	; 0xffffffd8
      8c:	ldr	r2, [fp, #-8]
      90:	str	r2, [r3]
      94:	ldr	r3, [fp, #-36]	; 0xffffffdc
      98:	cmp	r3, #0
      9c:	beq	b0 <readfile+0xb0>
      a0:	ldr	r2, [fp, #-8]
      a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
      a8:	cmp	r2, r3
      ac:	bhi	170 <readfile+0x170>
      b0:	ldr	r0, [fp, #-20]	; 0xffffffec
      b4:	bl	0 <rewind>
      b8:	ldr	r3, [fp, #-8]
      bc:	cmp	r3, #0
      c0:	beq	cc <readfile+0xcc>
      c4:	ldr	r3, [fp, #-8]
      c8:	b	d0 <readfile+0xd0>
      cc:	mov	r3, #1
      d0:	mov	r0, r3
      d4:	bl	0 <malloc>
      d8:	mov	r3, r0
      dc:	str	r3, [fp, #-16]
      e0:	ldr	r3, [fp, #-16]
      e4:	cmp	r3, #0
      e8:	beq	178 <readfile+0x178>
      ec:	mov	r3, #0
      f0:	str	r3, [fp, #-12]
      f4:	b	108 <readfile+0x108>
      f8:	ldr	r2, [fp, #-12]
      fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     100:	add	r3, r2, r3
     104:	str	r3, [fp, #-12]
     108:	ldr	r2, [fp, #-16]
     10c:	ldr	r3, [fp, #-12]
     110:	add	r0, r2, r3
     114:	ldr	r2, [fp, #-8]
     118:	ldr	r3, [fp, #-12]
     11c:	sub	r2, r2, r3
     120:	ldr	r3, [fp, #-20]	; 0xffffffec
     124:	mov	r1, #1
     128:	bl	0 <fread>
     12c:	str	r0, [fp, #-24]	; 0xffffffe8
     130:	ldr	r3, [fp, #-24]	; 0xffffffe8
     134:	cmp	r3, #0
     138:	bne	f8 <readfile+0xf8>
     13c:	ldr	r2, [fp, #-12]
     140:	ldr	r3, [fp, #-8]
     144:	cmp	r2, r3
     148:	bne	180 <readfile+0x180>
     14c:	ldr	r0, [fp, #-20]	; 0xffffffec
     150:	bl	0 <fclose>
     154:	ldr	r3, [fp, #-40]	; 0xffffffd8
     158:	ldr	r2, [fp, #-8]
     15c:	str	r2, [r3]
     160:	ldr	r3, [fp, #-16]
     164:	b	1bc <readfile+0x1bc>
     168:	nop	{0}
     16c:	b	184 <readfile+0x184>
     170:	nop	{0}
     174:	b	184 <readfile+0x184>
     178:	nop	{0}
     17c:	b	184 <readfile+0x184>
     180:	nop	{0}
     184:	ldr	r3, [fp, #-20]	; 0xffffffec
     188:	cmp	r3, #0
     18c:	beq	198 <readfile+0x198>
     190:	ldr	r0, [fp, #-20]	; 0xffffffec
     194:	bl	0 <fclose>
     198:	ldr	r3, [fp, #-16]
     19c:	cmp	r3, #0
     1a0:	beq	1ac <readfile+0x1ac>
     1a4:	ldr	r0, [fp, #-16]
     1a8:	bl	0 <free>
     1ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
     1b0:	ldr	r2, [fp, #-8]
     1b4:	str	r2, [r3]
     1b8:	mov	r3, #0
     1bc:	mov	r0, r3
     1c0:	sub	sp, fp, #4
     1c4:	ldr	fp, [sp]
     1c8:	add	sp, sp, #4
     1cc:	pop	{pc}		; (ldr pc, [sp], #4)

000001d0 <flatbuffers_int32_cast_from_pe>:
     1d0:	push	{fp}		; (str fp, [sp, #-4]!)
     1d4:	add	fp, sp, #0
     1d8:	sub	sp, sp, #12
     1dc:	str	r0, [fp, #-8]
     1e0:	ldr	r3, [fp, #-8]
     1e4:	mov	r0, r3
     1e8:	add	sp, fp, #0
     1ec:	pop	{fp}		; (ldr fp, [sp], #4)
     1f0:	bx	lr

000001f4 <flatbuffers_int32_read_from_pe>:
     1f4:	str	fp, [sp, #-8]!
     1f8:	str	lr, [sp, #4]
     1fc:	add	fp, sp, #4
     200:	sub	sp, sp, #8
     204:	str	r0, [fp, #-8]
     208:	ldr	r3, [fp, #-8]
     20c:	ldr	r3, [r3]
     210:	mov	r0, r3
     214:	bl	1d0 <flatbuffers_int32_cast_from_pe>
     218:	mov	r3, r0
     21c:	mov	r0, r3
     220:	sub	sp, fp, #4
     224:	ldr	fp, [sp]
     228:	add	sp, sp, #4
     22c:	pop	{pc}		; (ldr pc, [sp], #4)

00000230 <flatbuffers_int64_cast_from_pe>:
     230:	push	{fp}		; (str fp, [sp, #-4]!)
     234:	add	fp, sp, #0
     238:	sub	sp, sp, #12
     23c:	strd	r0, [fp, #-12]
     240:	ldrd	r2, [fp, #-12]
     244:	mov	r0, r2
     248:	mov	r1, r3
     24c:	add	sp, fp, #0
     250:	pop	{fp}		; (ldr fp, [sp], #4)
     254:	bx	lr

00000258 <flatbuffers_int64_read_from_pe>:
     258:	str	fp, [sp, #-8]!
     25c:	str	lr, [sp, #4]
     260:	add	fp, sp, #4
     264:	sub	sp, sp, #8
     268:	str	r0, [fp, #-8]
     26c:	ldr	r3, [fp, #-8]
     270:	ldrd	r2, [r3]
     274:	mov	r0, r2
     278:	mov	r1, r3
     27c:	bl	230 <flatbuffers_int64_cast_from_pe>
     280:	mov	r2, r0
     284:	mov	r3, r1
     288:	mov	r0, r2
     28c:	mov	r1, r3
     290:	sub	sp, fp, #4
     294:	ldr	fp, [sp]
     298:	add	sp, sp, #4
     29c:	pop	{pc}		; (ldr pc, [sp], #4)

000002a0 <__flatbuffers_uoffset_cast_from_pe>:
     2a0:	push	{fp}		; (str fp, [sp, #-4]!)
     2a4:	add	fp, sp, #0
     2a8:	sub	sp, sp, #12
     2ac:	str	r0, [fp, #-8]
     2b0:	ldr	r3, [fp, #-8]
     2b4:	mov	r0, r3
     2b8:	add	sp, fp, #0
     2bc:	pop	{fp}		; (ldr fp, [sp], #4)
     2c0:	bx	lr

000002c4 <__flatbuffers_uoffset_read_from_pe>:
     2c4:	str	fp, [sp, #-8]!
     2c8:	str	lr, [sp, #4]
     2cc:	add	fp, sp, #4
     2d0:	sub	sp, sp, #8
     2d4:	str	r0, [fp, #-8]
     2d8:	ldr	r3, [fp, #-8]
     2dc:	ldr	r3, [r3]
     2e0:	mov	r0, r3
     2e4:	bl	2a0 <__flatbuffers_uoffset_cast_from_pe>
     2e8:	mov	r3, r0
     2ec:	mov	r0, r3
     2f0:	sub	sp, fp, #4
     2f4:	ldr	fp, [sp]
     2f8:	add	sp, sp, #4
     2fc:	pop	{pc}		; (ldr pc, [sp], #4)

00000300 <__flatbuffers_soffset_cast_from_pe>:
     300:	push	{fp}		; (str fp, [sp, #-4]!)
     304:	add	fp, sp, #0
     308:	sub	sp, sp, #12
     30c:	str	r0, [fp, #-8]
     310:	ldr	r3, [fp, #-8]
     314:	mov	r0, r3
     318:	add	sp, fp, #0
     31c:	pop	{fp}		; (ldr fp, [sp], #4)
     320:	bx	lr

00000324 <__flatbuffers_soffset_read_from_pe>:
     324:	str	fp, [sp, #-8]!
     328:	str	lr, [sp, #4]
     32c:	add	fp, sp, #4
     330:	sub	sp, sp, #8
     334:	str	r0, [fp, #-8]
     338:	ldr	r3, [fp, #-8]
     33c:	ldr	r3, [r3]
     340:	mov	r0, r3
     344:	bl	300 <__flatbuffers_soffset_cast_from_pe>
     348:	mov	r3, r0
     34c:	mov	r0, r3
     350:	sub	sp, fp, #4
     354:	ldr	fp, [sp]
     358:	add	sp, sp, #4
     35c:	pop	{pc}		; (ldr pc, [sp], #4)

00000360 <__flatbuffers_voffset_cast_from_pe>:
     360:	push	{fp}		; (str fp, [sp, #-4]!)
     364:	add	fp, sp, #0
     368:	sub	sp, sp, #12
     36c:	mov	r3, r0
     370:	strh	r3, [fp, #-6]
     374:	ldrh	r3, [fp, #-6]
     378:	mov	r0, r3
     37c:	add	sp, fp, #0
     380:	pop	{fp}		; (ldr fp, [sp], #4)
     384:	bx	lr

00000388 <__flatbuffers_voffset_read_from_pe>:
     388:	str	fp, [sp, #-8]!
     38c:	str	lr, [sp, #4]
     390:	add	fp, sp, #4
     394:	sub	sp, sp, #8
     398:	str	r0, [fp, #-8]
     39c:	ldr	r3, [fp, #-8]
     3a0:	ldrh	r3, [r3]
     3a4:	mov	r0, r3
     3a8:	bl	360 <__flatbuffers_voffset_cast_from_pe>
     3ac:	mov	r3, r0
     3b0:	mov	r0, r3
     3b4:	sub	sp, fp, #4
     3b8:	ldr	fp, [sp]
     3bc:	add	sp, sp, #4
     3c0:	pop	{pc}		; (ldr pc, [sp], #4)

000003c4 <__flatbuffers_thash_cast_from_pe>:
     3c4:	push	{fp}		; (str fp, [sp, #-4]!)
     3c8:	add	fp, sp, #0
     3cc:	sub	sp, sp, #12
     3d0:	str	r0, [fp, #-8]
     3d4:	ldr	r3, [fp, #-8]
     3d8:	mov	r0, r3
     3dc:	add	sp, fp, #0
     3e0:	pop	{fp}		; (ldr fp, [sp], #4)
     3e4:	bx	lr

000003e8 <__flatbuffers_thash_cast_from_le>:
     3e8:	push	{fp}		; (str fp, [sp, #-4]!)
     3ec:	add	fp, sp, #0
     3f0:	sub	sp, sp, #12
     3f4:	str	r0, [fp, #-8]
     3f8:	ldr	r3, [fp, #-8]
     3fc:	mov	r0, r3
     400:	add	sp, fp, #0
     404:	pop	{fp}		; (ldr fp, [sp], #4)
     408:	bx	lr

0000040c <__flatbuffers_thash_read_from_pe>:
     40c:	str	fp, [sp, #-8]!
     410:	str	lr, [sp, #4]
     414:	add	fp, sp, #4
     418:	sub	sp, sp, #8
     41c:	str	r0, [fp, #-8]
     420:	ldr	r3, [fp, #-8]
     424:	ldr	r3, [r3]
     428:	mov	r0, r3
     42c:	bl	3c4 <__flatbuffers_thash_cast_from_pe>
     430:	mov	r3, r0
     434:	mov	r0, r3
     438:	sub	sp, fp, #4
     43c:	ldr	fp, [sp]
     440:	add	sp, sp, #4
     444:	pop	{pc}		; (ldr pc, [sp], #4)

00000448 <flatbuffers_vec_len>:
     448:	str	fp, [sp, #-8]!
     44c:	str	lr, [sp, #4]
     450:	add	fp, sp, #4
     454:	sub	sp, sp, #8
     458:	str	r0, [fp, #-8]
     45c:	ldr	r3, [fp, #-8]
     460:	cmp	r3, #0
     464:	beq	480 <flatbuffers_vec_len+0x38>
     468:	ldr	r3, [fp, #-8]
     46c:	sub	r3, r3, #4
     470:	mov	r0, r3
     474:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     478:	mov	r3, r0
     47c:	b	484 <flatbuffers_vec_len+0x3c>
     480:	mov	r3, #0
     484:	mov	r0, r3
     488:	sub	sp, fp, #4
     48c:	ldr	fp, [sp]
     490:	add	sp, sp, #4
     494:	pop	{pc}		; (ldr pc, [sp], #4)

00000498 <__flatbuffers_string_cmp>:
     498:	str	fp, [sp, #-8]!
     49c:	str	lr, [sp, #4]
     4a0:	add	fp, sp, #4
     4a4:	sub	sp, sp, #16
     4a8:	str	r0, [fp, #-8]
     4ac:	str	r1, [fp, #-12]
     4b0:	str	r2, [fp, #-16]
     4b4:	ldr	r1, [fp, #-12]
     4b8:	ldr	r0, [fp, #-8]
     4bc:	bl	0 <strcmp>
     4c0:	mov	r3, r0
     4c4:	mov	r0, r3
     4c8:	sub	sp, fp, #4
     4cc:	ldr	fp, [sp]
     4d0:	add	sp, sp, #4
     4d4:	pop	{pc}		; (ldr pc, [sp], #4)

000004d8 <flatbuffers_has_identifier>:
     4d8:	str	fp, [sp, #-8]!
     4dc:	str	lr, [sp, #4]
     4e0:	add	fp, sp, #4
     4e4:	sub	sp, sp, #16
     4e8:	str	r0, [fp, #-16]
     4ec:	str	r1, [fp, #-20]	; 0xffffffec
     4f0:	mov	r3, #0
     4f4:	str	r3, [fp, #-12]
     4f8:	ldr	r3, [fp, #-20]	; 0xffffffec
     4fc:	cmp	r3, #0
     500:	bne	50c <flatbuffers_has_identifier+0x34>
     504:	mov	r3, #1
     508:	b	570 <flatbuffers_has_identifier+0x98>
     50c:	sub	r3, fp, #12
     510:	mov	r2, #4
     514:	ldr	r1, [fp, #-20]	; 0xffffffec
     518:	mov	r0, r3
     51c:	bl	0 <strncpy>
     520:	ldr	r3, [fp, #-12]
     524:	mov	r0, r3
     528:	bl	3e8 <__flatbuffers_thash_cast_from_le>
     52c:	mov	r3, r0
     530:	str	r3, [fp, #-12]
     534:	ldr	r3, [fp, #-16]
     538:	add	r3, r3, #4
     53c:	mov	r0, r3
     540:	bl	40c <__flatbuffers_thash_read_from_pe>
     544:	str	r0, [fp, #-8]
     548:	ldr	r3, [fp, #-12]
     54c:	cmp	r3, #0
     550:	beq	564 <flatbuffers_has_identifier+0x8c>
     554:	ldr	r3, [fp, #-12]
     558:	ldr	r2, [fp, #-8]
     55c:	cmp	r2, r3
     560:	bne	56c <flatbuffers_has_identifier+0x94>
     564:	mov	r3, #1
     568:	b	570 <flatbuffers_has_identifier+0x98>
     56c:	mov	r3, #0
     570:	mov	r0, r3
     574:	sub	sp, fp, #4
     578:	ldr	fp, [sp]
     57c:	add	sp, sp, #4
     580:	pop	{pc}		; (ldr pc, [sp], #4)

00000584 <reflection_BaseType_cast_from_pe>:
     584:	push	{fp}		; (str fp, [sp, #-4]!)
     588:	add	fp, sp, #0
     58c:	sub	sp, sp, #12
     590:	mov	r3, r0
     594:	strb	r3, [fp, #-5]
     598:	ldrsb	r3, [fp, #-5]
     59c:	mov	r0, r3
     5a0:	add	sp, fp, #0
     5a4:	pop	{fp}		; (ldr fp, [sp], #4)
     5a8:	bx	lr

000005ac <reflection_BaseType_read_from_pe>:
     5ac:	str	fp, [sp, #-8]!
     5b0:	str	lr, [sp, #4]
     5b4:	add	fp, sp, #4
     5b8:	sub	sp, sp, #8
     5bc:	str	r0, [fp, #-8]
     5c0:	ldr	r3, [fp, #-8]
     5c4:	ldrsb	r3, [r3]
     5c8:	mov	r0, r3
     5cc:	bl	584 <reflection_BaseType_cast_from_pe>
     5d0:	mov	r3, r0
     5d4:	mov	r0, r3
     5d8:	sub	sp, fp, #4
     5dc:	ldr	fp, [sp]
     5e0:	add	sp, sp, #4
     5e4:	pop	{pc}		; (ldr pc, [sp], #4)

000005e8 <reflection_Type_base_type>:
     5e8:	str	fp, [sp, #-8]!
     5ec:	str	lr, [sp, #4]
     5f0:	add	fp, sp, #4
     5f4:	sub	sp, sp, #16
     5f8:	str	r0, [fp, #-16]
     5fc:	mov	r3, #0
     600:	strh	r3, [fp, #-6]
     604:	ldr	r3, [fp, #-16]
     608:	cmp	r3, #0
     60c:	bne	630 <reflection_Type_base_type+0x48>
     610:	movw	r3, #0
     614:	movt	r3, #0
     618:	mov	r2, #147	; 0x93
     61c:	movw	r1, #0
     620:	movt	r1, #0
     624:	movw	r0, #0
     628:	movt	r0, #0
     62c:	bl	0 <__assert_fail>
     630:	mov	r3, #0
     634:	strh	r3, [fp, #-8]
     638:	ldr	r0, [fp, #-16]
     63c:	bl	324 <__flatbuffers_soffset_read_from_pe>
     640:	mov	r3, r0
     644:	rsb	r3, r3, #0
     648:	ldr	r2, [fp, #-16]
     64c:	add	r3, r2, r3
     650:	str	r3, [fp, #-12]
     654:	ldr	r0, [fp, #-12]
     658:	bl	388 <__flatbuffers_voffset_read_from_pe>
     65c:	mov	r3, r0
     660:	mov	r2, r3
     664:	ldrh	r3, [fp, #-8]
     668:	add	r3, r3, #3
     66c:	lsl	r3, r3, #1
     670:	cmp	r2, r3
     674:	bcc	69c <reflection_Type_base_type+0xb4>
     678:	ldrh	r3, [fp, #-8]
     67c:	add	r3, r3, #2
     680:	lsl	r3, r3, #1
     684:	ldr	r2, [fp, #-12]
     688:	add	r3, r2, r3
     68c:	mov	r0, r3
     690:	bl	388 <__flatbuffers_voffset_read_from_pe>
     694:	mov	r3, r0
     698:	strh	r3, [fp, #-6]
     69c:	ldrh	r3, [fp, #-6]
     6a0:	cmp	r3, #0
     6a4:	beq	6c4 <reflection_Type_base_type+0xdc>
     6a8:	ldrh	r3, [fp, #-6]
     6ac:	ldr	r2, [fp, #-16]
     6b0:	add	r3, r2, r3
     6b4:	mov	r0, r3
     6b8:	bl	5ac <reflection_BaseType_read_from_pe>
     6bc:	mov	r3, r0
     6c0:	b	6c8 <reflection_Type_base_type+0xe0>
     6c4:	mov	r3, #0
     6c8:	mov	r0, r3
     6cc:	sub	sp, fp, #4
     6d0:	ldr	fp, [sp]
     6d4:	add	sp, sp, #4
     6d8:	pop	{pc}		; (ldr pc, [sp], #4)

000006dc <reflection_Type_element>:
     6dc:	str	fp, [sp, #-8]!
     6e0:	str	lr, [sp, #4]
     6e4:	add	fp, sp, #4
     6e8:	sub	sp, sp, #16
     6ec:	str	r0, [fp, #-16]
     6f0:	mov	r3, #0
     6f4:	strh	r3, [fp, #-6]
     6f8:	ldr	r3, [fp, #-16]
     6fc:	cmp	r3, #0
     700:	bne	724 <reflection_Type_element+0x48>
     704:	movw	r3, #0
     708:	movt	r3, #0
     70c:	mov	r2, #148	; 0x94
     710:	movw	r1, #0
     714:	movt	r1, #0
     718:	movw	r0, #0
     71c:	movt	r0, #0
     720:	bl	0 <__assert_fail>
     724:	mov	r3, #1
     728:	strh	r3, [fp, #-8]
     72c:	ldr	r0, [fp, #-16]
     730:	bl	324 <__flatbuffers_soffset_read_from_pe>
     734:	mov	r3, r0
     738:	rsb	r3, r3, #0
     73c:	ldr	r2, [fp, #-16]
     740:	add	r3, r2, r3
     744:	str	r3, [fp, #-12]
     748:	ldr	r0, [fp, #-12]
     74c:	bl	388 <__flatbuffers_voffset_read_from_pe>
     750:	mov	r3, r0
     754:	mov	r2, r3
     758:	ldrh	r3, [fp, #-8]
     75c:	add	r3, r3, #3
     760:	lsl	r3, r3, #1
     764:	cmp	r2, r3
     768:	bcc	790 <reflection_Type_element+0xb4>
     76c:	ldrh	r3, [fp, #-8]
     770:	add	r3, r3, #2
     774:	lsl	r3, r3, #1
     778:	ldr	r2, [fp, #-12]
     77c:	add	r3, r2, r3
     780:	mov	r0, r3
     784:	bl	388 <__flatbuffers_voffset_read_from_pe>
     788:	mov	r3, r0
     78c:	strh	r3, [fp, #-6]
     790:	ldrh	r3, [fp, #-6]
     794:	cmp	r3, #0
     798:	beq	7b8 <reflection_Type_element+0xdc>
     79c:	ldrh	r3, [fp, #-6]
     7a0:	ldr	r2, [fp, #-16]
     7a4:	add	r3, r2, r3
     7a8:	mov	r0, r3
     7ac:	bl	5ac <reflection_BaseType_read_from_pe>
     7b0:	mov	r3, r0
     7b4:	b	7bc <reflection_Type_element+0xe0>
     7b8:	mov	r3, #0
     7bc:	mov	r0, r3
     7c0:	sub	sp, fp, #4
     7c4:	ldr	fp, [sp]
     7c8:	add	sp, sp, #4
     7cc:	pop	{pc}		; (ldr pc, [sp], #4)

000007d0 <reflection_Type_index>:
     7d0:	str	fp, [sp, #-8]!
     7d4:	str	lr, [sp, #4]
     7d8:	add	fp, sp, #4
     7dc:	sub	sp, sp, #16
     7e0:	str	r0, [fp, #-16]
     7e4:	mov	r3, #0
     7e8:	strh	r3, [fp, #-6]
     7ec:	ldr	r3, [fp, #-16]
     7f0:	cmp	r3, #0
     7f4:	bne	818 <reflection_Type_index+0x48>
     7f8:	movw	r3, #0
     7fc:	movt	r3, #0
     800:	mov	r2, #149	; 0x95
     804:	movw	r1, #0
     808:	movt	r1, #0
     80c:	movw	r0, #0
     810:	movt	r0, #0
     814:	bl	0 <__assert_fail>
     818:	mov	r3, #2
     81c:	strh	r3, [fp, #-8]
     820:	ldr	r0, [fp, #-16]
     824:	bl	324 <__flatbuffers_soffset_read_from_pe>
     828:	mov	r3, r0
     82c:	rsb	r3, r3, #0
     830:	ldr	r2, [fp, #-16]
     834:	add	r3, r2, r3
     838:	str	r3, [fp, #-12]
     83c:	ldr	r0, [fp, #-12]
     840:	bl	388 <__flatbuffers_voffset_read_from_pe>
     844:	mov	r3, r0
     848:	mov	r2, r3
     84c:	ldrh	r3, [fp, #-8]
     850:	add	r3, r3, #3
     854:	lsl	r3, r3, #1
     858:	cmp	r2, r3
     85c:	bcc	884 <reflection_Type_index+0xb4>
     860:	ldrh	r3, [fp, #-8]
     864:	add	r3, r3, #2
     868:	lsl	r3, r3, #1
     86c:	ldr	r2, [fp, #-12]
     870:	add	r3, r2, r3
     874:	mov	r0, r3
     878:	bl	388 <__flatbuffers_voffset_read_from_pe>
     87c:	mov	r3, r0
     880:	strh	r3, [fp, #-6]
     884:	ldrh	r3, [fp, #-6]
     888:	cmp	r3, #0
     88c:	beq	8ac <reflection_Type_index+0xdc>
     890:	ldrh	r3, [fp, #-6]
     894:	ldr	r2, [fp, #-16]
     898:	add	r3, r2, r3
     89c:	mov	r0, r3
     8a0:	bl	1f4 <flatbuffers_int32_read_from_pe>
     8a4:	mov	r3, r0
     8a8:	b	8b0 <reflection_Type_index+0xe0>
     8ac:	mvn	r3, #0
     8b0:	mov	r0, r3
     8b4:	sub	sp, fp, #4
     8b8:	ldr	fp, [sp]
     8bc:	add	sp, sp, #4
     8c0:	pop	{pc}		; (ldr pc, [sp], #4)

000008c4 <reflection_Field_vec_len>:
     8c4:	str	fp, [sp, #-8]!
     8c8:	str	lr, [sp, #4]
     8cc:	add	fp, sp, #4
     8d0:	sub	sp, sp, #8
     8d4:	str	r0, [fp, #-8]
     8d8:	ldr	r3, [fp, #-8]
     8dc:	cmp	r3, #0
     8e0:	beq	8fc <reflection_Field_vec_len+0x38>
     8e4:	ldr	r3, [fp, #-8]
     8e8:	sub	r3, r3, #4
     8ec:	mov	r0, r3
     8f0:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     8f4:	mov	r3, r0
     8f8:	b	900 <reflection_Field_vec_len+0x3c>
     8fc:	mov	r3, #0
     900:	mov	r0, r3
     904:	sub	sp, fp, #4
     908:	ldr	fp, [sp]
     90c:	add	sp, sp, #4
     910:	pop	{pc}		; (ldr pc, [sp], #4)

00000914 <reflection_Field_vec_at>:
     914:	str	fp, [sp, #-8]!
     918:	str	lr, [sp, #4]
     91c:	add	fp, sp, #4
     920:	sub	sp, sp, #16
     924:	str	r0, [fp, #-16]
     928:	str	r1, [fp, #-20]	; 0xffffffec
     92c:	ldr	r3, [fp, #-20]	; 0xffffffec
     930:	lsl	r3, r3, #2
     934:	ldr	r2, [fp, #-16]
     938:	add	r3, r2, r3
     93c:	str	r3, [fp, #-8]
     940:	ldr	r0, [fp, #-16]
     944:	bl	448 <flatbuffers_vec_len>
     948:	mov	r2, r0
     94c:	ldr	r3, [fp, #-20]	; 0xffffffec
     950:	cmp	r3, r2
     954:	bcc	978 <reflection_Field_vec_at+0x64>
     958:	movw	r3, #0
     95c:	movt	r3, #0
     960:	mov	r2, #192	; 0xc0
     964:	movw	r1, #0
     968:	movt	r1, #0
     96c:	movw	r0, #0
     970:	movt	r0, #0
     974:	bl	0 <__assert_fail>
     978:	ldr	r0, [fp, #-8]
     97c:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     980:	mov	r2, r0
     984:	ldr	r3, [fp, #-8]
     988:	add	r3, r3, r2
     98c:	mov	r0, r3
     990:	sub	sp, fp, #4
     994:	ldr	fp, [sp]
     998:	add	sp, sp, #4
     99c:	pop	{pc}		; (ldr pc, [sp], #4)

000009a0 <reflection_Field_name>:
     9a0:	str	fp, [sp, #-8]!
     9a4:	str	lr, [sp, #4]
     9a8:	add	fp, sp, #4
     9ac:	sub	sp, sp, #24
     9b0:	str	r0, [fp, #-24]	; 0xffffffe8
     9b4:	mov	r3, #0
     9b8:	strh	r3, [fp, #-6]
     9bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     9c0:	cmp	r3, #0
     9c4:	bne	9e8 <reflection_Field_name+0x48>
     9c8:	movw	r3, #0
     9cc:	movt	r3, #0
     9d0:	mov	r2, #195	; 0xc3
     9d4:	movw	r1, #0
     9d8:	movt	r1, #0
     9dc:	movw	r0, #0
     9e0:	movt	r0, #0
     9e4:	bl	0 <__assert_fail>
     9e8:	mov	r3, #0
     9ec:	strh	r3, [fp, #-8]
     9f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9f4:	bl	324 <__flatbuffers_soffset_read_from_pe>
     9f8:	mov	r3, r0
     9fc:	rsb	r3, r3, #0
     a00:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a04:	add	r3, r2, r3
     a08:	str	r3, [fp, #-12]
     a0c:	ldr	r0, [fp, #-12]
     a10:	bl	388 <__flatbuffers_voffset_read_from_pe>
     a14:	mov	r3, r0
     a18:	mov	r2, r3
     a1c:	ldrh	r3, [fp, #-8]
     a20:	add	r3, r3, #3
     a24:	lsl	r3, r3, #1
     a28:	cmp	r2, r3
     a2c:	bcc	a54 <reflection_Field_name+0xb4>
     a30:	ldrh	r3, [fp, #-8]
     a34:	add	r3, r3, #2
     a38:	lsl	r3, r3, #1
     a3c:	ldr	r2, [fp, #-12]
     a40:	add	r3, r2, r3
     a44:	mov	r0, r3
     a48:	bl	388 <__flatbuffers_voffset_read_from_pe>
     a4c:	mov	r3, r0
     a50:	strh	r3, [fp, #-6]
     a54:	ldrh	r3, [fp, #-6]
     a58:	cmp	r3, #0
     a5c:	beq	a8c <reflection_Field_name+0xec>
     a60:	ldrh	r3, [fp, #-6]
     a64:	ldr	r2, [fp, #-24]	; 0xffffffe8
     a68:	add	r3, r2, r3
     a6c:	str	r3, [fp, #-16]
     a70:	ldr	r0, [fp, #-16]
     a74:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     a78:	mov	r3, r0
     a7c:	add	r3, r3, #4
     a80:	ldr	r2, [fp, #-16]
     a84:	add	r3, r2, r3
     a88:	b	aac <reflection_Field_name+0x10c>
     a8c:	movw	r3, #0
     a90:	movt	r3, #0
     a94:	mov	r2, #195	; 0xc3
     a98:	movw	r1, #0
     a9c:	movt	r1, #0
     aa0:	movw	r0, #0
     aa4:	movt	r0, #0
     aa8:	bl	0 <__assert_fail>
     aac:	mov	r0, r3
     ab0:	sub	sp, fp, #4
     ab4:	ldr	fp, [sp]
     ab8:	add	sp, sp, #4
     abc:	pop	{pc}		; (ldr pc, [sp], #4)

00000ac0 <reflection_Field_vec_find_by_name>:
     ac0:	str	fp, [sp, #-8]!
     ac4:	str	lr, [sp, #4]
     ac8:	add	fp, sp, #4
     acc:	sub	sp, sp, #24
     ad0:	str	r0, [fp, #-24]	; 0xffffffe8
     ad4:	str	r1, [fp, #-28]	; 0xffffffe4
     ad8:	mov	r3, #0
     adc:	str	r3, [fp, #-8]
     ae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
     ae4:	bl	8c4 <reflection_Field_vec_len>
     ae8:	str	r0, [fp, #-12]
     aec:	ldr	r3, [fp, #-12]
     af0:	cmp	r3, #0
     af4:	bne	b08 <reflection_Field_vec_find_by_name+0x48>
     af8:	movw	r3, #0
     afc:	movt	r3, #0
     b00:	ldr	r3, [r3]
     b04:	b	bf0 <reflection_Field_vec_find_by_name+0x130>
     b08:	ldr	r3, [fp, #-12]
     b0c:	sub	r3, r3, #1
     b10:	str	r3, [fp, #-12]
     b14:	b	b84 <reflection_Field_vec_find_by_name+0xc4>
     b18:	ldr	r2, [fp, #-12]
     b1c:	ldr	r3, [fp, #-8]
     b20:	sub	r3, r2, r3
     b24:	lsr	r3, r3, #1
     b28:	ldr	r2, [fp, #-8]
     b2c:	add	r3, r2, r3
     b30:	str	r3, [fp, #-16]
     b34:	ldr	r1, [fp, #-16]
     b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
     b3c:	bl	914 <reflection_Field_vec_at>
     b40:	mov	r3, r0
     b44:	mov	r0, r3
     b48:	bl	9a0 <reflection_Field_name>
     b4c:	str	r0, [fp, #-20]	; 0xffffffec
     b50:	mov	r2, #0
     b54:	ldr	r1, [fp, #-28]	; 0xffffffe4
     b58:	ldr	r0, [fp, #-20]	; 0xffffffec
     b5c:	bl	498 <__flatbuffers_string_cmp>
     b60:	mov	r3, r0
     b64:	cmp	r3, #0
     b68:	bge	b7c <reflection_Field_vec_find_by_name+0xbc>
     b6c:	ldr	r3, [fp, #-16]
     b70:	add	r3, r3, #1
     b74:	str	r3, [fp, #-8]
     b78:	b	b84 <reflection_Field_vec_find_by_name+0xc4>
     b7c:	ldr	r3, [fp, #-16]
     b80:	str	r3, [fp, #-12]
     b84:	ldr	r2, [fp, #-8]
     b88:	ldr	r3, [fp, #-12]
     b8c:	cmp	r2, r3
     b90:	bcc	b18 <reflection_Field_vec_find_by_name+0x58>
     b94:	ldr	r2, [fp, #-8]
     b98:	ldr	r3, [fp, #-12]
     b9c:	cmp	r2, r3
     ba0:	bne	be4 <reflection_Field_vec_find_by_name+0x124>
     ba4:	ldr	r1, [fp, #-8]
     ba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
     bac:	bl	914 <reflection_Field_vec_at>
     bb0:	mov	r3, r0
     bb4:	mov	r0, r3
     bb8:	bl	9a0 <reflection_Field_name>
     bbc:	str	r0, [fp, #-20]	; 0xffffffec
     bc0:	mov	r2, #0
     bc4:	ldr	r1, [fp, #-28]	; 0xffffffe4
     bc8:	ldr	r0, [fp, #-20]	; 0xffffffec
     bcc:	bl	498 <__flatbuffers_string_cmp>
     bd0:	mov	r3, r0
     bd4:	cmp	r3, #0
     bd8:	bne	be4 <reflection_Field_vec_find_by_name+0x124>
     bdc:	ldr	r3, [fp, #-8]
     be0:	b	bf0 <reflection_Field_vec_find_by_name+0x130>
     be4:	movw	r3, #0
     be8:	movt	r3, #0
     bec:	ldr	r3, [r3]
     bf0:	mov	r0, r3
     bf4:	sub	sp, fp, #4
     bf8:	ldr	fp, [sp]
     bfc:	add	sp, sp, #4
     c00:	pop	{pc}		; (ldr pc, [sp], #4)

00000c04 <reflection_Field_vec_find>:
     c04:	str	fp, [sp, #-8]!
     c08:	str	lr, [sp, #4]
     c0c:	add	fp, sp, #4
     c10:	sub	sp, sp, #8
     c14:	str	r0, [fp, #-8]
     c18:	str	r1, [fp, #-12]
     c1c:	ldr	r1, [fp, #-12]
     c20:	ldr	r0, [fp, #-8]
     c24:	bl	ac0 <reflection_Field_vec_find_by_name>
     c28:	mov	r3, r0
     c2c:	mov	r0, r3
     c30:	sub	sp, fp, #4
     c34:	ldr	fp, [sp]
     c38:	add	sp, sp, #4
     c3c:	pop	{pc}		; (ldr pc, [sp], #4)

00000c40 <reflection_Field_type>:
     c40:	str	fp, [sp, #-8]!
     c44:	str	lr, [sp, #4]
     c48:	add	fp, sp, #4
     c4c:	sub	sp, sp, #24
     c50:	str	r0, [fp, #-24]	; 0xffffffe8
     c54:	mov	r3, #0
     c58:	strh	r3, [fp, #-6]
     c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c60:	cmp	r3, #0
     c64:	bne	c88 <reflection_Field_type+0x48>
     c68:	movw	r3, #0
     c6c:	movt	r3, #0
     c70:	mov	r2, #201	; 0xc9
     c74:	movw	r1, #0
     c78:	movt	r1, #0
     c7c:	movw	r0, #0
     c80:	movt	r0, #0
     c84:	bl	0 <__assert_fail>
     c88:	mov	r3, #1
     c8c:	strh	r3, [fp, #-8]
     c90:	ldr	r0, [fp, #-24]	; 0xffffffe8
     c94:	bl	324 <__flatbuffers_soffset_read_from_pe>
     c98:	mov	r3, r0
     c9c:	rsb	r3, r3, #0
     ca0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     ca4:	add	r3, r2, r3
     ca8:	str	r3, [fp, #-12]
     cac:	ldr	r0, [fp, #-12]
     cb0:	bl	388 <__flatbuffers_voffset_read_from_pe>
     cb4:	mov	r3, r0
     cb8:	mov	r2, r3
     cbc:	ldrh	r3, [fp, #-8]
     cc0:	add	r3, r3, #3
     cc4:	lsl	r3, r3, #1
     cc8:	cmp	r2, r3
     ccc:	bcc	cf4 <reflection_Field_type+0xb4>
     cd0:	ldrh	r3, [fp, #-8]
     cd4:	add	r3, r3, #2
     cd8:	lsl	r3, r3, #1
     cdc:	ldr	r2, [fp, #-12]
     ce0:	add	r3, r2, r3
     ce4:	mov	r0, r3
     ce8:	bl	388 <__flatbuffers_voffset_read_from_pe>
     cec:	mov	r3, r0
     cf0:	strh	r3, [fp, #-6]
     cf4:	ldrh	r3, [fp, #-6]
     cf8:	cmp	r3, #0
     cfc:	beq	d28 <reflection_Field_type+0xe8>
     d00:	ldrh	r3, [fp, #-6]
     d04:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d08:	add	r3, r2, r3
     d0c:	str	r3, [fp, #-16]
     d10:	ldr	r0, [fp, #-16]
     d14:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     d18:	mov	r2, r0
     d1c:	ldr	r3, [fp, #-16]
     d20:	add	r3, r3, r2
     d24:	b	d48 <reflection_Field_type+0x108>
     d28:	movw	r3, #0
     d2c:	movt	r3, #0
     d30:	mov	r2, #201	; 0xc9
     d34:	movw	r1, #0
     d38:	movt	r1, #0
     d3c:	movw	r0, #0
     d40:	movt	r0, #0
     d44:	bl	0 <__assert_fail>
     d48:	mov	r0, r3
     d4c:	sub	sp, fp, #4
     d50:	ldr	fp, [sp]
     d54:	add	sp, sp, #4
     d58:	pop	{pc}		; (ldr pc, [sp], #4)

00000d5c <reflection_Field_default_integer>:
     d5c:	str	fp, [sp, #-8]!
     d60:	str	lr, [sp, #4]
     d64:	add	fp, sp, #4
     d68:	sub	sp, sp, #16
     d6c:	str	r0, [fp, #-16]
     d70:	mov	r3, #0
     d74:	strh	r3, [fp, #-6]
     d78:	ldr	r3, [fp, #-16]
     d7c:	cmp	r3, #0
     d80:	bne	da4 <reflection_Field_default_integer+0x48>
     d84:	movw	r3, #0
     d88:	movt	r3, #0
     d8c:	mov	r2, #204	; 0xcc
     d90:	movw	r1, #0
     d94:	movt	r1, #0
     d98:	movw	r0, #0
     d9c:	movt	r0, #0
     da0:	bl	0 <__assert_fail>
     da4:	mov	r3, #4
     da8:	strh	r3, [fp, #-8]
     dac:	ldr	r0, [fp, #-16]
     db0:	bl	324 <__flatbuffers_soffset_read_from_pe>
     db4:	mov	r3, r0
     db8:	rsb	r3, r3, #0
     dbc:	ldr	r2, [fp, #-16]
     dc0:	add	r3, r2, r3
     dc4:	str	r3, [fp, #-12]
     dc8:	ldr	r0, [fp, #-12]
     dcc:	bl	388 <__flatbuffers_voffset_read_from_pe>
     dd0:	mov	r3, r0
     dd4:	mov	r2, r3
     dd8:	ldrh	r3, [fp, #-8]
     ddc:	add	r3, r3, #3
     de0:	lsl	r3, r3, #1
     de4:	cmp	r2, r3
     de8:	bcc	e10 <reflection_Field_default_integer+0xb4>
     dec:	ldrh	r3, [fp, #-8]
     df0:	add	r3, r3, #2
     df4:	lsl	r3, r3, #1
     df8:	ldr	r2, [fp, #-12]
     dfc:	add	r3, r2, r3
     e00:	mov	r0, r3
     e04:	bl	388 <__flatbuffers_voffset_read_from_pe>
     e08:	mov	r3, r0
     e0c:	strh	r3, [fp, #-6]
     e10:	ldrh	r3, [fp, #-6]
     e14:	cmp	r3, #0
     e18:	beq	e3c <reflection_Field_default_integer+0xe0>
     e1c:	ldrh	r3, [fp, #-6]
     e20:	ldr	r2, [fp, #-16]
     e24:	add	r3, r2, r3
     e28:	mov	r0, r3
     e2c:	bl	258 <flatbuffers_int64_read_from_pe>
     e30:	mov	r2, r0
     e34:	mov	r3, r1
     e38:	b	e44 <reflection_Field_default_integer+0xe8>
     e3c:	mov	r2, #0
     e40:	mov	r3, #0
     e44:	mov	r0, r2
     e48:	mov	r1, r3
     e4c:	sub	sp, fp, #4
     e50:	ldr	fp, [sp]
     e54:	add	sp, sp, #4
     e58:	pop	{pc}		; (ldr pc, [sp], #4)

00000e5c <reflection_Object_vec_len>:
     e5c:	str	fp, [sp, #-8]!
     e60:	str	lr, [sp, #4]
     e64:	add	fp, sp, #4
     e68:	sub	sp, sp, #8
     e6c:	str	r0, [fp, #-8]
     e70:	ldr	r3, [fp, #-8]
     e74:	cmp	r3, #0
     e78:	beq	e94 <reflection_Object_vec_len+0x38>
     e7c:	ldr	r3, [fp, #-8]
     e80:	sub	r3, r3, #4
     e84:	mov	r0, r3
     e88:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     e8c:	mov	r3, r0
     e90:	b	e98 <reflection_Object_vec_len+0x3c>
     e94:	mov	r3, #0
     e98:	mov	r0, r3
     e9c:	sub	sp, fp, #4
     ea0:	ldr	fp, [sp]
     ea4:	add	sp, sp, #4
     ea8:	pop	{pc}		; (ldr pc, [sp], #4)

00000eac <reflection_Object_vec_at>:
     eac:	str	fp, [sp, #-8]!
     eb0:	str	lr, [sp, #4]
     eb4:	add	fp, sp, #4
     eb8:	sub	sp, sp, #16
     ebc:	str	r0, [fp, #-16]
     ec0:	str	r1, [fp, #-20]	; 0xffffffec
     ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ec8:	lsl	r3, r3, #2
     ecc:	ldr	r2, [fp, #-16]
     ed0:	add	r3, r2, r3
     ed4:	str	r3, [fp, #-8]
     ed8:	ldr	r0, [fp, #-16]
     edc:	bl	448 <flatbuffers_vec_len>
     ee0:	mov	r2, r0
     ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
     ee8:	cmp	r3, r2
     eec:	bcc	f10 <reflection_Object_vec_at+0x64>
     ef0:	movw	r3, #0
     ef4:	movt	r3, #0
     ef8:	mov	r2, #215	; 0xd7
     efc:	movw	r1, #0
     f00:	movt	r1, #0
     f04:	movw	r0, #0
     f08:	movt	r0, #0
     f0c:	bl	0 <__assert_fail>
     f10:	ldr	r0, [fp, #-8]
     f14:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
     f18:	mov	r2, r0
     f1c:	ldr	r3, [fp, #-8]
     f20:	add	r3, r3, r2
     f24:	mov	r0, r3
     f28:	sub	sp, fp, #4
     f2c:	ldr	fp, [sp]
     f30:	add	sp, sp, #4
     f34:	pop	{pc}		; (ldr pc, [sp], #4)

00000f38 <reflection_Object_name>:
     f38:	str	fp, [sp, #-8]!
     f3c:	str	lr, [sp, #4]
     f40:	add	fp, sp, #4
     f44:	sub	sp, sp, #24
     f48:	str	r0, [fp, #-24]	; 0xffffffe8
     f4c:	mov	r3, #0
     f50:	strh	r3, [fp, #-6]
     f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
     f58:	cmp	r3, #0
     f5c:	bne	f80 <reflection_Object_name+0x48>
     f60:	movw	r3, #0
     f64:	movt	r3, #0
     f68:	mov	r2, #218	; 0xda
     f6c:	movw	r1, #0
     f70:	movt	r1, #0
     f74:	movw	r0, #0
     f78:	movt	r0, #0
     f7c:	bl	0 <__assert_fail>
     f80:	mov	r3, #0
     f84:	strh	r3, [fp, #-8]
     f88:	ldr	r0, [fp, #-24]	; 0xffffffe8
     f8c:	bl	324 <__flatbuffers_soffset_read_from_pe>
     f90:	mov	r3, r0
     f94:	rsb	r3, r3, #0
     f98:	ldr	r2, [fp, #-24]	; 0xffffffe8
     f9c:	add	r3, r2, r3
     fa0:	str	r3, [fp, #-12]
     fa4:	ldr	r0, [fp, #-12]
     fa8:	bl	388 <__flatbuffers_voffset_read_from_pe>
     fac:	mov	r3, r0
     fb0:	mov	r2, r3
     fb4:	ldrh	r3, [fp, #-8]
     fb8:	add	r3, r3, #3
     fbc:	lsl	r3, r3, #1
     fc0:	cmp	r2, r3
     fc4:	bcc	fec <reflection_Object_name+0xb4>
     fc8:	ldrh	r3, [fp, #-8]
     fcc:	add	r3, r3, #2
     fd0:	lsl	r3, r3, #1
     fd4:	ldr	r2, [fp, #-12]
     fd8:	add	r3, r2, r3
     fdc:	mov	r0, r3
     fe0:	bl	388 <__flatbuffers_voffset_read_from_pe>
     fe4:	mov	r3, r0
     fe8:	strh	r3, [fp, #-6]
     fec:	ldrh	r3, [fp, #-6]
     ff0:	cmp	r3, #0
     ff4:	beq	1024 <reflection_Object_name+0xec>
     ff8:	ldrh	r3, [fp, #-6]
     ffc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1000:	add	r3, r2, r3
    1004:	str	r3, [fp, #-16]
    1008:	ldr	r0, [fp, #-16]
    100c:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
    1010:	mov	r3, r0
    1014:	add	r3, r3, #4
    1018:	ldr	r2, [fp, #-16]
    101c:	add	r3, r2, r3
    1020:	b	1044 <reflection_Object_name+0x10c>
    1024:	movw	r3, #0
    1028:	movt	r3, #0
    102c:	mov	r2, #218	; 0xda
    1030:	movw	r1, #0
    1034:	movt	r1, #0
    1038:	movw	r0, #0
    103c:	movt	r0, #0
    1040:	bl	0 <__assert_fail>
    1044:	mov	r0, r3
    1048:	sub	sp, fp, #4
    104c:	ldr	fp, [sp]
    1050:	add	sp, sp, #4
    1054:	pop	{pc}		; (ldr pc, [sp], #4)

00001058 <reflection_Object_vec_find_by_name>:
    1058:	str	fp, [sp, #-8]!
    105c:	str	lr, [sp, #4]
    1060:	add	fp, sp, #4
    1064:	sub	sp, sp, #24
    1068:	str	r0, [fp, #-24]	; 0xffffffe8
    106c:	str	r1, [fp, #-28]	; 0xffffffe4
    1070:	mov	r3, #0
    1074:	str	r3, [fp, #-8]
    1078:	ldr	r0, [fp, #-24]	; 0xffffffe8
    107c:	bl	e5c <reflection_Object_vec_len>
    1080:	str	r0, [fp, #-12]
    1084:	ldr	r3, [fp, #-12]
    1088:	cmp	r3, #0
    108c:	bne	10a0 <reflection_Object_vec_find_by_name+0x48>
    1090:	movw	r3, #0
    1094:	movt	r3, #0
    1098:	ldr	r3, [r3]
    109c:	b	1188 <reflection_Object_vec_find_by_name+0x130>
    10a0:	ldr	r3, [fp, #-12]
    10a4:	sub	r3, r3, #1
    10a8:	str	r3, [fp, #-12]
    10ac:	b	111c <reflection_Object_vec_find_by_name+0xc4>
    10b0:	ldr	r2, [fp, #-12]
    10b4:	ldr	r3, [fp, #-8]
    10b8:	sub	r3, r2, r3
    10bc:	lsr	r3, r3, #1
    10c0:	ldr	r2, [fp, #-8]
    10c4:	add	r3, r2, r3
    10c8:	str	r3, [fp, #-16]
    10cc:	ldr	r1, [fp, #-16]
    10d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10d4:	bl	eac <reflection_Object_vec_at>
    10d8:	mov	r3, r0
    10dc:	mov	r0, r3
    10e0:	bl	f38 <reflection_Object_name>
    10e4:	str	r0, [fp, #-20]	; 0xffffffec
    10e8:	mov	r2, #0
    10ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
    10f0:	ldr	r0, [fp, #-20]	; 0xffffffec
    10f4:	bl	498 <__flatbuffers_string_cmp>
    10f8:	mov	r3, r0
    10fc:	cmp	r3, #0
    1100:	bge	1114 <reflection_Object_vec_find_by_name+0xbc>
    1104:	ldr	r3, [fp, #-16]
    1108:	add	r3, r3, #1
    110c:	str	r3, [fp, #-8]
    1110:	b	111c <reflection_Object_vec_find_by_name+0xc4>
    1114:	ldr	r3, [fp, #-16]
    1118:	str	r3, [fp, #-12]
    111c:	ldr	r2, [fp, #-8]
    1120:	ldr	r3, [fp, #-12]
    1124:	cmp	r2, r3
    1128:	bcc	10b0 <reflection_Object_vec_find_by_name+0x58>
    112c:	ldr	r2, [fp, #-8]
    1130:	ldr	r3, [fp, #-12]
    1134:	cmp	r2, r3
    1138:	bne	117c <reflection_Object_vec_find_by_name+0x124>
    113c:	ldr	r1, [fp, #-8]
    1140:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1144:	bl	eac <reflection_Object_vec_at>
    1148:	mov	r3, r0
    114c:	mov	r0, r3
    1150:	bl	f38 <reflection_Object_name>
    1154:	str	r0, [fp, #-20]	; 0xffffffec
    1158:	mov	r2, #0
    115c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1160:	ldr	r0, [fp, #-20]	; 0xffffffec
    1164:	bl	498 <__flatbuffers_string_cmp>
    1168:	mov	r3, r0
    116c:	cmp	r3, #0
    1170:	bne	117c <reflection_Object_vec_find_by_name+0x124>
    1174:	ldr	r3, [fp, #-8]
    1178:	b	1188 <reflection_Object_vec_find_by_name+0x130>
    117c:	movw	r3, #0
    1180:	movt	r3, #0
    1184:	ldr	r3, [r3]
    1188:	mov	r0, r3
    118c:	sub	sp, fp, #4
    1190:	ldr	fp, [sp]
    1194:	add	sp, sp, #4
    1198:	pop	{pc}		; (ldr pc, [sp], #4)

0000119c <reflection_Object_vec_find>:
    119c:	str	fp, [sp, #-8]!
    11a0:	str	lr, [sp, #4]
    11a4:	add	fp, sp, #4
    11a8:	sub	sp, sp, #8
    11ac:	str	r0, [fp, #-8]
    11b0:	str	r1, [fp, #-12]
    11b4:	ldr	r1, [fp, #-12]
    11b8:	ldr	r0, [fp, #-8]
    11bc:	bl	1058 <reflection_Object_vec_find_by_name>
    11c0:	mov	r3, r0
    11c4:	mov	r0, r3
    11c8:	sub	sp, fp, #4
    11cc:	ldr	fp, [sp]
    11d0:	add	sp, sp, #4
    11d4:	pop	{pc}		; (ldr pc, [sp], #4)

000011d8 <reflection_Object_fields>:
    11d8:	str	fp, [sp, #-8]!
    11dc:	str	lr, [sp, #4]
    11e0:	add	fp, sp, #4
    11e4:	sub	sp, sp, #24
    11e8:	str	r0, [fp, #-24]	; 0xffffffe8
    11ec:	mov	r3, #0
    11f0:	strh	r3, [fp, #-6]
    11f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    11f8:	cmp	r3, #0
    11fc:	bne	1220 <reflection_Object_fields+0x48>
    1200:	movw	r3, #0
    1204:	movt	r3, #0
    1208:	mov	r2, #224	; 0xe0
    120c:	movw	r1, #0
    1210:	movt	r1, #0
    1214:	movw	r0, #0
    1218:	movt	r0, #0
    121c:	bl	0 <__assert_fail>
    1220:	mov	r3, #1
    1224:	strh	r3, [fp, #-8]
    1228:	ldr	r0, [fp, #-24]	; 0xffffffe8
    122c:	bl	324 <__flatbuffers_soffset_read_from_pe>
    1230:	mov	r3, r0
    1234:	rsb	r3, r3, #0
    1238:	ldr	r2, [fp, #-24]	; 0xffffffe8
    123c:	add	r3, r2, r3
    1240:	str	r3, [fp, #-12]
    1244:	ldr	r0, [fp, #-12]
    1248:	bl	388 <__flatbuffers_voffset_read_from_pe>
    124c:	mov	r3, r0
    1250:	mov	r2, r3
    1254:	ldrh	r3, [fp, #-8]
    1258:	add	r3, r3, #3
    125c:	lsl	r3, r3, #1
    1260:	cmp	r2, r3
    1264:	bcc	128c <reflection_Object_fields+0xb4>
    1268:	ldrh	r3, [fp, #-8]
    126c:	add	r3, r3, #2
    1270:	lsl	r3, r3, #1
    1274:	ldr	r2, [fp, #-12]
    1278:	add	r3, r2, r3
    127c:	mov	r0, r3
    1280:	bl	388 <__flatbuffers_voffset_read_from_pe>
    1284:	mov	r3, r0
    1288:	strh	r3, [fp, #-6]
    128c:	ldrh	r3, [fp, #-6]
    1290:	cmp	r3, #0
    1294:	beq	12c4 <reflection_Object_fields+0xec>
    1298:	ldrh	r3, [fp, #-6]
    129c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    12a0:	add	r3, r2, r3
    12a4:	str	r3, [fp, #-16]
    12a8:	ldr	r0, [fp, #-16]
    12ac:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
    12b0:	mov	r3, r0
    12b4:	add	r3, r3, #4
    12b8:	ldr	r2, [fp, #-16]
    12bc:	add	r3, r2, r3
    12c0:	b	12e4 <reflection_Object_fields+0x10c>
    12c4:	movw	r3, #0
    12c8:	movt	r3, #0
    12cc:	mov	r2, #224	; 0xe0
    12d0:	movw	r1, #0
    12d4:	movt	r1, #0
    12d8:	movw	r0, #0
    12dc:	movt	r0, #0
    12e0:	bl	0 <__assert_fail>
    12e4:	mov	r0, r3
    12e8:	sub	sp, fp, #4
    12ec:	ldr	fp, [sp]
    12f0:	add	sp, sp, #4
    12f4:	pop	{pc}		; (ldr pc, [sp], #4)

000012f8 <reflection_Schema_as_root>:
    12f8:	str	fp, [sp, #-8]!
    12fc:	str	lr, [sp, #4]
    1300:	add	fp, sp, #4
    1304:	sub	sp, sp, #16
    1308:	str	r0, [fp, #-16]
    130c:	movw	r3, #0
    1310:	movt	r3, #0
    1314:	str	r3, [fp, #-8]
    1318:	ldr	r3, [fp, #-16]
    131c:	cmp	r3, #0
    1320:	beq	1354 <reflection_Schema_as_root+0x5c>
    1324:	ldr	r1, [fp, #-8]
    1328:	ldr	r0, [fp, #-16]
    132c:	bl	4d8 <flatbuffers_has_identifier>
    1330:	mov	r3, r0
    1334:	cmp	r3, #0
    1338:	beq	1354 <reflection_Schema_as_root+0x5c>
    133c:	ldr	r0, [fp, #-16]
    1340:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
    1344:	mov	r2, r0
    1348:	ldr	r3, [fp, #-16]
    134c:	add	r3, r3, r2
    1350:	b	1358 <reflection_Schema_as_root+0x60>
    1354:	mov	r3, #0
    1358:	mov	r0, r3
    135c:	sub	sp, fp, #4
    1360:	ldr	fp, [sp]
    1364:	add	sp, sp, #4
    1368:	pop	{pc}		; (ldr pc, [sp], #4)

0000136c <reflection_Schema_objects>:
    136c:	str	fp, [sp, #-8]!
    1370:	str	lr, [sp, #4]
    1374:	add	fp, sp, #4
    1378:	sub	sp, sp, #24
    137c:	str	r0, [fp, #-24]	; 0xffffffe8
    1380:	mov	r3, #0
    1384:	strh	r3, [fp, #-6]
    1388:	ldr	r3, [fp, #-24]	; 0xffffffe8
    138c:	cmp	r3, #0
    1390:	bne	13b4 <reflection_Schema_objects+0x48>
    1394:	movw	r3, #0
    1398:	movt	r3, #0
    139c:	mov	r2, #237	; 0xed
    13a0:	movw	r1, #0
    13a4:	movt	r1, #0
    13a8:	movw	r0, #0
    13ac:	movt	r0, #0
    13b0:	bl	0 <__assert_fail>
    13b4:	mov	r3, #0
    13b8:	strh	r3, [fp, #-8]
    13bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
    13c0:	bl	324 <__flatbuffers_soffset_read_from_pe>
    13c4:	mov	r3, r0
    13c8:	rsb	r3, r3, #0
    13cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
    13d0:	add	r3, r2, r3
    13d4:	str	r3, [fp, #-12]
    13d8:	ldr	r0, [fp, #-12]
    13dc:	bl	388 <__flatbuffers_voffset_read_from_pe>
    13e0:	mov	r3, r0
    13e4:	mov	r2, r3
    13e8:	ldrh	r3, [fp, #-8]
    13ec:	add	r3, r3, #3
    13f0:	lsl	r3, r3, #1
    13f4:	cmp	r2, r3
    13f8:	bcc	1420 <reflection_Schema_objects+0xb4>
    13fc:	ldrh	r3, [fp, #-8]
    1400:	add	r3, r3, #2
    1404:	lsl	r3, r3, #1
    1408:	ldr	r2, [fp, #-12]
    140c:	add	r3, r2, r3
    1410:	mov	r0, r3
    1414:	bl	388 <__flatbuffers_voffset_read_from_pe>
    1418:	mov	r3, r0
    141c:	strh	r3, [fp, #-6]
    1420:	ldrh	r3, [fp, #-6]
    1424:	cmp	r3, #0
    1428:	beq	1458 <reflection_Schema_objects+0xec>
    142c:	ldrh	r3, [fp, #-6]
    1430:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1434:	add	r3, r2, r3
    1438:	str	r3, [fp, #-16]
    143c:	ldr	r0, [fp, #-16]
    1440:	bl	2c4 <__flatbuffers_uoffset_read_from_pe>
    1444:	mov	r3, r0
    1448:	add	r3, r3, #4
    144c:	ldr	r2, [fp, #-16]
    1450:	add	r3, r2, r3
    1454:	b	1478 <reflection_Schema_objects+0x10c>
    1458:	movw	r3, #0
    145c:	movt	r3, #0
    1460:	mov	r2, #237	; 0xed
    1464:	movw	r1, #0
    1468:	movt	r1, #0
    146c:	movw	r0, #0
    1470:	movt	r0, #0
    1474:	bl	0 <__assert_fail>
    1478:	mov	r0, r3
    147c:	sub	sp, fp, #4
    1480:	ldr	fp, [sp]
    1484:	add	sp, sp, #4
    1488:	pop	{pc}		; (ldr pc, [sp], #4)

0000148c <test_schema>:
    148c:	str	r4, [sp, #-12]!
    1490:	str	fp, [sp, #4]
    1494:	str	lr, [sp, #8]
    1498:	add	fp, sp, #8
    149c:	sub	sp, sp, #60	; 0x3c
    14a0:	str	r0, [fp, #-64]	; 0xffffffc0
    14a4:	mvn	r3, #0
    14a8:	str	r3, [fp, #-16]
    14ac:	sub	r3, fp, #56	; 0x38
    14b0:	mov	r2, r3
    14b4:	movw	r1, #10000	; 0x2710
    14b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
    14bc:	bl	0 <readfile>
    14c0:	str	r0, [fp, #-24]	; 0xffffffe8
    14c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14c8:	cmp	r3, #0
    14cc:	bne	14e0 <test_schema+0x54>
    14d0:	movw	r0, #0
    14d4:	movt	r0, #0
    14d8:	bl	0 <puts>
    14dc:	b	1848 <test_schema+0x3bc>
    14e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
    14e4:	bl	12f8 <reflection_Schema_as_root>
    14e8:	str	r0, [fp, #-28]	; 0xffffffe4
    14ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
    14f0:	bl	136c <reflection_Schema_objects>
    14f4:	str	r0, [fp, #-32]	; 0xffffffe0
    14f8:	mov	r3, #0
    14fc:	str	r3, [fp, #-20]	; 0xffffffec
    1500:	b	1544 <test_schema+0xb8>
    1504:	ldr	r4, [fp, #-20]	; 0xffffffec
    1508:	ldr	r1, [fp, #-20]	; 0xffffffec
    150c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1510:	bl	eac <reflection_Object_vec_at>
    1514:	mov	r3, r0
    1518:	mov	r0, r3
    151c:	bl	f38 <reflection_Object_name>
    1520:	mov	r3, r0
    1524:	mov	r2, r3
    1528:	mov	r1, r4
    152c:	movw	r0, #0
    1530:	movt	r0, #0
    1534:	bl	0 <printf>
    1538:	ldr	r3, [fp, #-20]	; 0xffffffec
    153c:	add	r3, r3, #1
    1540:	str	r3, [fp, #-20]	; 0xffffffec
    1544:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1548:	bl	e5c <reflection_Object_vec_len>
    154c:	mov	r2, r0
    1550:	ldr	r3, [fp, #-20]	; 0xffffffec
    1554:	cmp	r3, r2
    1558:	bcc	1504 <test_schema+0x78>
    155c:	movw	r1, #0
    1560:	movt	r1, #0
    1564:	ldr	r0, [fp, #-32]	; 0xffffffe0
    1568:	bl	119c <reflection_Object_vec_find>
    156c:	str	r0, [fp, #-20]	; 0xffffffec
    1570:	movw	r3, #0
    1574:	movt	r3, #0
    1578:	ldr	r3, [r3]
    157c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1580:	cmp	r2, r3
    1584:	bne	1598 <test_schema+0x10c>
    1588:	movw	r0, #0
    158c:	movt	r0, #0
    1590:	bl	0 <puts>
    1594:	b	1848 <test_schema+0x3bc>
    1598:	ldr	r3, [fp, #-20]	; 0xffffffec
    159c:	str	r3, [fp, #-36]	; 0xffffffdc
    15a0:	ldr	r1, [fp, #-20]	; 0xffffffec
    15a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    15a8:	bl	eac <reflection_Object_vec_at>
    15ac:	str	r0, [fp, #-40]	; 0xffffffd8
    15b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    15b4:	bl	f38 <reflection_Object_name>
    15b8:	mov	r3, r0
    15bc:	movw	r1, #0
    15c0:	movt	r1, #0
    15c4:	mov	r0, r3
    15c8:	bl	0 <strcmp>
    15cc:	mov	r3, r0
    15d0:	cmp	r3, #0
    15d4:	beq	15e8 <test_schema+0x15c>
    15d8:	movw	r0, #0
    15dc:	movt	r0, #0
    15e0:	bl	0 <puts>
    15e4:	b	1848 <test_schema+0x3bc>
    15e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
    15ec:	bl	11d8 <reflection_Object_fields>
    15f0:	str	r0, [fp, #-44]	; 0xffffffd4
    15f4:	movw	r1, #0
    15f8:	movt	r1, #0
    15fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1600:	bl	c04 <reflection_Field_vec_find>
    1604:	str	r0, [fp, #-20]	; 0xffffffec
    1608:	movw	r3, #0
    160c:	movt	r3, #0
    1610:	ldr	r3, [r3]
    1614:	ldr	r2, [fp, #-20]	; 0xffffffec
    1618:	cmp	r2, r3
    161c:	bne	1630 <test_schema+0x1a4>
    1620:	movw	r0, #0
    1624:	movt	r0, #0
    1628:	bl	0 <puts>
    162c:	b	1848 <test_schema+0x3bc>
    1630:	ldr	r1, [fp, #-20]	; 0xffffffec
    1634:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1638:	bl	914 <reflection_Field_vec_at>
    163c:	str	r0, [fp, #-48]	; 0xffffffd0
    1640:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1644:	bl	d5c <reflection_Field_default_integer>
    1648:	mov	r2, r0
    164c:	mov	r3, r1
    1650:	cmp	r3, #0
    1654:	cmpeq	r2, #150	; 0x96
    1658:	beq	16a4 <test_schema+0x218>
    165c:	movw	r0, #0
    1660:	movt	r0, #0
    1664:	bl	0 <puts>
    1668:	ldr	r0, [fp, #-48]	; 0xffffffd0
    166c:	bl	9a0 <reflection_Field_name>
    1670:	mov	r3, r0
    1674:	mov	r1, r3
    1678:	movw	r0, #0
    167c:	movt	r0, #0
    1680:	bl	0 <printf>
    1684:	ldr	r0, [fp, #-48]	; 0xffffffd0
    1688:	bl	d5c <reflection_Field_default_integer>
    168c:	mov	r2, r0
    1690:	mov	r3, r1
    1694:	movw	r0, #0
    1698:	movt	r0, #0
    169c:	bl	0 <printf>
    16a0:	b	1848 <test_schema+0x3bc>
    16a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
    16a8:	bl	c40 <reflection_Field_type>
    16ac:	str	r0, [fp, #-52]	; 0xffffffcc
    16b0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    16b4:	bl	5e8 <reflection_Type_base_type>
    16b8:	mov	r3, r0
    16bc:	cmp	r3, #5
    16c0:	beq	16d4 <test_schema+0x248>
    16c4:	movw	r0, #0
    16c8:	movt	r0, #0
    16cc:	bl	0 <puts>
    16d0:	b	1848 <test_schema+0x3bc>
    16d4:	movw	r1, #0
    16d8:	movt	r1, #0
    16dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
    16e0:	bl	c04 <reflection_Field_vec_find>
    16e4:	str	r0, [fp, #-20]	; 0xffffffec
    16e8:	movw	r3, #0
    16ec:	movt	r3, #0
    16f0:	ldr	r3, [r3]
    16f4:	ldr	r2, [fp, #-20]	; 0xffffffec
    16f8:	cmp	r2, r3
    16fc:	bne	1710 <test_schema+0x284>
    1700:	movw	r0, #0
    1704:	movt	r0, #0
    1708:	bl	0 <puts>
    170c:	b	1848 <test_schema+0x3bc>
    1710:	ldr	r1, [fp, #-20]	; 0xffffffec
    1714:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1718:	bl	914 <reflection_Field_vec_at>
    171c:	mov	r3, r0
    1720:	mov	r0, r3
    1724:	bl	c40 <reflection_Field_type>
    1728:	str	r0, [fp, #-52]	; 0xffffffcc
    172c:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1730:	bl	5e8 <reflection_Type_base_type>
    1734:	mov	r3, r0
    1738:	cmp	r3, #15
    173c:	beq	1750 <test_schema+0x2c4>
    1740:	movw	r0, #0
    1744:	movt	r0, #0
    1748:	bl	0 <puts>
    174c:	b	1848 <test_schema+0x3bc>
    1750:	ldr	r0, [fp, #-52]	; 0xffffffcc
    1754:	bl	7d0 <reflection_Type_index>
    1758:	mov	r2, r0
    175c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1760:	cmp	r2, r3
    1764:	beq	1778 <test_schema+0x2ec>
    1768:	movw	r0, #0
    176c:	movt	r0, #0
    1770:	bl	0 <puts>
    1774:	b	1848 <test_schema+0x3bc>
    1778:	movw	r1, #0
    177c:	movt	r1, #0
    1780:	ldr	r0, [fp, #-44]	; 0xffffffd4
    1784:	bl	c04 <reflection_Field_vec_find>
    1788:	str	r0, [fp, #-20]	; 0xffffffec
    178c:	movw	r3, #0
    1790:	movt	r3, #0
    1794:	ldr	r3, [r3]
    1798:	ldr	r2, [fp, #-20]	; 0xffffffec
    179c:	cmp	r2, r3
    17a0:	bne	17b4 <test_schema+0x328>
    17a4:	movw	r0, #0
    17a8:	movt	r0, #0
    17ac:	bl	0 <puts>
    17b0:	b	1848 <test_schema+0x3bc>
    17b4:	ldr	r1, [fp, #-20]	; 0xffffffec
    17b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    17bc:	bl	914 <reflection_Field_vec_at>
    17c0:	mov	r3, r0
    17c4:	mov	r0, r3
    17c8:	bl	c40 <reflection_Field_type>
    17cc:	str	r0, [fp, #-52]	; 0xffffffcc
    17d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    17d4:	bl	5e8 <reflection_Type_base_type>
    17d8:	mov	r3, r0
    17dc:	cmp	r3, #14
    17e0:	beq	17f4 <test_schema+0x368>
    17e4:	movw	r0, #0
    17e8:	movt	r0, #0
    17ec:	bl	0 <puts>
    17f0:	b	1848 <test_schema+0x3bc>
    17f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
    17f8:	bl	6dc <reflection_Type_element>
    17fc:	mov	r3, r0
    1800:	cmp	r3, #15
    1804:	beq	1818 <test_schema+0x38c>
    1808:	movw	r0, #0
    180c:	movt	r0, #0
    1810:	bl	0 <puts>
    1814:	b	1848 <test_schema+0x3bc>
    1818:	ldr	r0, [fp, #-52]	; 0xffffffcc
    181c:	bl	7d0 <reflection_Type_index>
    1820:	mov	r2, r0
    1824:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1828:	cmp	r2, r3
    182c:	beq	1840 <test_schema+0x3b4>
    1830:	movw	r0, #0
    1834:	movt	r0, #0
    1838:	bl	0 <puts>
    183c:	b	1848 <test_schema+0x3bc>
    1840:	mov	r3, #0
    1844:	str	r3, [fp, #-16]
    1848:	ldr	r3, [fp, #-24]	; 0xffffffe8
    184c:	cmp	r3, #0
    1850:	beq	185c <test_schema+0x3d0>
    1854:	ldr	r0, [fp, #-24]	; 0xffffffe8
    1858:	bl	0 <free>
    185c:	ldr	r3, [fp, #-16]
    1860:	mov	r0, r3
    1864:	sub	sp, fp, #8
    1868:	ldr	r4, [sp]
    186c:	ldr	fp, [sp, #4]
    1870:	add	sp, sp, #8
    1874:	pop	{pc}		; (ldr pc, [sp], #4)

00001878 <main>:
    1878:	str	fp, [sp, #-8]!
    187c:	str	lr, [sp, #4]
    1880:	add	fp, sp, #4
    1884:	sub	sp, sp, #8
    1888:	str	r0, [fp, #-8]
    188c:	str	r1, [fp, #-12]
    1890:	ldr	r3, [fp, #-8]
    1894:	cmp	r3, #1
    1898:	beq	18d0 <main+0x58>
    189c:	ldr	r3, [fp, #-8]
    18a0:	cmp	r3, #2
    18a4:	beq	18d0 <main+0x58>
    18a8:	movw	r3, #0
    18ac:	movt	r3, #0
    18b0:	ldr	r3, [r3]
    18b4:	mov	r2, #64	; 0x40
    18b8:	mov	r1, #1
    18bc:	movw	r0, #0
    18c0:	movt	r0, #0
    18c4:	bl	0 <fwrite>
    18c8:	mov	r0, #1
    18cc:	bl	0 <exit>
    18d0:	ldr	r3, [fp, #-8]
    18d4:	cmp	r3, #2
    18d8:	bne	18f0 <main+0x78>
    18dc:	ldr	r3, [fp, #-12]
    18e0:	ldr	r2, [r3, #4]
    18e4:	movw	r3, #0
    18e8:	movt	r3, #0
    18ec:	str	r2, [r3]
    18f0:	movw	r3, #0
    18f4:	movt	r3, #0
    18f8:	ldr	r3, [r3]
    18fc:	mov	r0, r3
    1900:	bl	148c <test_schema>
    1904:	mov	r3, r0
    1908:	mov	r0, r3
    190c:	sub	sp, fp, #4
    1910:	ldr	fp, [sp]
    1914:	add	sp, sp, #4
    1918:	pop	{pc}		; (ldr pc, [sp], #4)
