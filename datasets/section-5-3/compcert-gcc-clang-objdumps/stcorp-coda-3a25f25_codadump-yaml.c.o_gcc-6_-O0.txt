
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-yaml.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <indent>:
   0:	push	{fp, lr}
   4:	add	fp, sp, #4
   8:	sub	sp, sp, #8
   c:	ldr	r3, [pc, #104]	; 7c <indent+0x7c>
  10:	ldr	r3, [r3]
  14:	cmp	r3, #0
  18:	bge	30 <indent+0x30>
  1c:	ldr	r3, [pc, #92]	; 80 <indent+0x80>
  20:	mov	r2, #44	; 0x2c
  24:	ldr	r1, [pc, #88]	; 84 <indent+0x84>
  28:	ldr	r0, [pc, #88]	; 88 <indent+0x88>
  2c:	bl	0 <__assert_fail>
  30:	ldr	r3, [pc, #68]	; 7c <indent+0x7c>
  34:	ldr	r3, [r3]
  38:	str	r3, [fp, #-8]
  3c:	b	64 <indent+0x64>
  40:	ldr	r3, [pc, #68]	; 8c <indent+0x8c>
  44:	ldr	r3, [r3]
  48:	mov	r2, #2
  4c:	mov	r1, #1
  50:	ldr	r0, [pc, #56]	; 90 <indent+0x90>
  54:	bl	0 <fwrite>
  58:	ldr	r3, [fp, #-8]
  5c:	sub	r3, r3, #1
  60:	str	r3, [fp, #-8]
  64:	ldr	r3, [fp, #-8]
  68:	cmp	r3, #0
  6c:	bgt	40 <indent+0x40>
  70:	nop			; (mov r0, r0)
  74:	sub	sp, fp, #4
  78:	pop	{fp, pc}
  7c:	.word	0x00000000
  80:	.word	0x00000168
  84:	.word	0x00000000
  88:	.word	0x00000054
  8c:	.word	0x00000000
  90:	.word	0x00000060

00000094 <ff_printf>:
  94:	push	{r0, r1, r2, r3}
  98:	push	{fp, lr}
  9c:	add	fp, sp, #4
  a0:	sub	sp, sp, #8
  a4:	add	r3, fp, #8
  a8:	str	r3, [fp, #-12]
  ac:	ldr	r3, [pc, #44]	; e0 <ff_printf+0x4c>
  b0:	ldr	r3, [r3]
  b4:	ldr	r2, [fp, #-12]
  b8:	ldr	r1, [fp, #4]
  bc:	mov	r0, r3
  c0:	bl	0 <vfprintf>
  c4:	str	r0, [fp, #-8]
  c8:	ldr	r3, [fp, #-8]
  cc:	mov	r0, r3
  d0:	sub	sp, fp, #4
  d4:	pop	{fp, lr}
  d8:	add	sp, sp, #16
  dc:	bx	lr
  e0:	.word	0x00000000

000000e4 <fi_printf>:
  e4:	push	{r0, r1, r2, r3}
  e8:	push	{fp, lr}
  ec:	add	fp, sp, #4
  f0:	sub	sp, sp, #8
  f4:	bl	0 <indent>
  f8:	add	r3, fp, #8
  fc:	str	r3, [fp, #-12]
 100:	ldr	r3, [pc, #44]	; 134 <fi_printf+0x50>
 104:	ldr	r3, [r3]
 108:	ldr	r2, [fp, #-12]
 10c:	ldr	r1, [fp, #4]
 110:	mov	r0, r3
 114:	bl	0 <vfprintf>
 118:	str	r0, [fp, #-8]
 11c:	ldr	r3, [fp, #-8]
 120:	mov	r0, r3
 124:	sub	sp, fp, #4
 128:	pop	{fp, lr}
 12c:	add	sp, sp, #16
 130:	bx	lr
 134:	.word	0x00000000

00000138 <print_escaped>:
 138:	push	{fp, lr}
 13c:	add	fp, sp, #4
 140:	sub	sp, sp, #16
 144:	str	r0, [fp, #-16]
 148:	str	r1, [fp, #-20]	; 0xffffffec
 14c:	mov	r3, #0
 150:	str	r3, [fp, #-8]
 154:	b	254 <print_escaped+0x11c>
 158:	ldr	r3, [fp, #-8]
 15c:	ldr	r2, [fp, #-16]
 160:	add	r3, r2, r3
 164:	ldrb	r3, [r3]
 168:	strb	r3, [fp, #-9]
 16c:	ldrb	r3, [fp, #-9]
 170:	cmp	r3, #12
 174:	beq	1c4 <print_escaped+0x8c>
 178:	cmp	r3, #12
 17c:	bgt	19c <print_escaped+0x64>
 180:	cmp	r3, #9
 184:	beq	1e8 <print_escaped+0xb0>
 188:	cmp	r3, #10
 18c:	beq	1d0 <print_escaped+0x98>
 190:	cmp	r3, #8
 194:	beq	1b8 <print_escaped+0x80>
 198:	b	20c <print_escaped+0xd4>
 19c:	cmp	r3, #34	; 0x22
 1a0:	beq	1f4 <print_escaped+0xbc>
 1a4:	cmp	r3, #92	; 0x5c
 1a8:	beq	200 <print_escaped+0xc8>
 1ac:	cmp	r3, #13
 1b0:	beq	1dc <print_escaped+0xa4>
 1b4:	b	20c <print_escaped+0xd4>
 1b8:	ldr	r0, [pc, #176]	; 270 <print_escaped+0x138>
 1bc:	bl	94 <ff_printf>
 1c0:	b	248 <print_escaped+0x110>
 1c4:	ldr	r0, [pc, #168]	; 274 <print_escaped+0x13c>
 1c8:	bl	94 <ff_printf>
 1cc:	b	248 <print_escaped+0x110>
 1d0:	ldr	r0, [pc, #160]	; 278 <print_escaped+0x140>
 1d4:	bl	94 <ff_printf>
 1d8:	b	248 <print_escaped+0x110>
 1dc:	ldr	r0, [pc, #152]	; 27c <print_escaped+0x144>
 1e0:	bl	94 <ff_printf>
 1e4:	b	248 <print_escaped+0x110>
 1e8:	ldr	r0, [pc, #144]	; 280 <print_escaped+0x148>
 1ec:	bl	94 <ff_printf>
 1f0:	b	248 <print_escaped+0x110>
 1f4:	ldr	r0, [pc, #136]	; 284 <print_escaped+0x14c>
 1f8:	bl	94 <ff_printf>
 1fc:	b	248 <print_escaped+0x110>
 200:	ldr	r0, [pc, #128]	; 288 <print_escaped+0x150>
 204:	bl	94 <ff_printf>
 208:	b	248 <print_escaped+0x110>
 20c:	ldrb	r3, [fp, #-9]
 210:	cmp	r3, #31
 214:	bls	238 <print_escaped+0x100>
 218:	ldrb	r3, [fp, #-9]
 21c:	cmp	r3, #126	; 0x7e
 220:	bhi	238 <print_escaped+0x100>
 224:	ldrb	r3, [fp, #-9]
 228:	mov	r1, r3
 22c:	ldr	r0, [pc, #88]	; 28c <print_escaped+0x154>
 230:	bl	94 <ff_printf>
 234:	b	248 <print_escaped+0x110>
 238:	ldrb	r3, [fp, #-9]
 23c:	mov	r1, r3
 240:	ldr	r0, [pc, #72]	; 290 <print_escaped+0x158>
 244:	bl	94 <ff_printf>
 248:	ldr	r3, [fp, #-8]
 24c:	add	r3, r3, #1
 250:	str	r3, [fp, #-8]
 254:	ldr	r2, [fp, #-8]
 258:	ldr	r3, [fp, #-20]	; 0xffffffec
 25c:	cmp	r2, r3
 260:	blt	158 <print_escaped+0x20>
 264:	nop			; (mov r0, r0)
 268:	sub	sp, fp, #4
 26c:	pop	{fp, pc}
 270:	.word	0x00000064
 274:	.word	0x00000068
 278:	.word	0x0000006c
 27c:	.word	0x00000070
 280:	.word	0x00000074
 284:	.word	0x00000078
 288:	.word	0x0000007c
 28c:	.word	0x00000080
 290:	.word	0x00000084

00000294 <print_data>:
 294:	push	{r4, r5, fp, lr}
 298:	add	fp, sp, #12
 29c:	sub	sp, sp, #288	; 0x120
 2a0:	str	r0, [fp, #-288]	; 0xfffffee0
 2a4:	str	r1, [fp, #-292]	; 0xfffffedc
 2a8:	mov	r3, #0
 2ac:	str	r3, [fp, #-48]	; 0xffffffd0
 2b0:	ldr	r3, [pc, #2684]	; d34 <print_data+0xaa0>
 2b4:	ldr	r3, [r3]
 2b8:	cmp	r3, #0
 2bc:	beq	37c <print_data+0xe8>
 2c0:	sub	r3, fp, #48	; 0x30
 2c4:	mov	r1, r3
 2c8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 2cc:	bl	0 <coda_cursor_has_attributes>
 2d0:	mov	r3, r0
 2d4:	cmp	r3, #0
 2d8:	beq	2e0 <print_data+0x4c>
 2dc:	bl	0 <handle_coda_error>
 2e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
 2e4:	cmp	r3, #0
 2e8:	beq	37c <print_data+0xe8>
 2ec:	ldr	r3, [fp, #-292]	; 0xfffffedc
 2f0:	cmp	r3, #0
 2f4:	beq	304 <print_data+0x70>
 2f8:	ldr	r0, [pc, #2616]	; d38 <print_data+0xaa4>
 2fc:	bl	94 <ff_printf>
 300:	bl	0 <indent>
 304:	ldr	r0, [pc, #2608]	; d3c <print_data+0xaa8>
 308:	bl	94 <ff_printf>
 30c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 310:	bl	0 <coda_cursor_goto_attributes>
 314:	mov	r3, r0
 318:	cmp	r3, #0
 31c:	beq	324 <print_data+0x90>
 320:	bl	0 <handle_coda_error>
 324:	ldr	r3, [pc, #2580]	; d40 <print_data+0xaac>
 328:	ldr	r3, [r3]
 32c:	add	r3, r3, #1
 330:	ldr	r2, [pc, #2568]	; d40 <print_data+0xaac>
 334:	str	r3, [r2]
 338:	mov	r1, #1
 33c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 340:	bl	294 <print_data>
 344:	ldr	r3, [pc, #2548]	; d40 <print_data+0xaac>
 348:	ldr	r3, [r3]
 34c:	sub	r3, r3, #1
 350:	ldr	r2, [pc, #2536]	; d40 <print_data+0xaac>
 354:	str	r3, [r2]
 358:	ldr	r0, [fp, #-288]	; 0xfffffee0
 35c:	bl	0 <coda_cursor_goto_parent>
 360:	ldr	r0, [pc, #2524]	; d44 <print_data+0xab0>
 364:	bl	e4 <fi_printf>
 368:	ldr	r3, [pc, #2512]	; d40 <print_data+0xaac>
 36c:	ldr	r3, [r3]
 370:	add	r3, r3, #1
 374:	ldr	r2, [pc, #2500]	; d40 <print_data+0xaac>
 378:	str	r3, [r2]
 37c:	sub	r3, fp, #44	; 0x2c
 380:	mov	r1, r3
 384:	ldr	r0, [fp, #-288]	; 0xfffffee0
 388:	bl	0 <coda_cursor_get_type_class>
 38c:	mov	r3, r0
 390:	cmp	r3, #0
 394:	beq	39c <print_data+0x108>
 398:	bl	0 <handle_coda_error>
 39c:	ldr	r3, [fp, #-44]	; 0xffffffd4
 3a0:	cmp	r3, #6
 3a4:	ldrls	pc, [pc, r3, lsl #2]
 3a8:	b	d08 <print_data+0xa74>
 3ac:	.word	0x000003c8
 3b0:	.word	0x00000670
 3b4:	.word	0x000007d0
 3b8:	.word	0x000007d0
 3bc:	.word	0x000007d0
 3c0:	.word	0x000007d0
 3c4:	.word	0x00000b94
 3c8:	sub	r3, fp, #52	; 0x34
 3cc:	mov	r1, r3
 3d0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 3d4:	bl	0 <coda_cursor_get_num_elements>
 3d8:	mov	r3, r0
 3dc:	cmp	r3, #0
 3e0:	beq	3e8 <print_data+0x154>
 3e4:	bl	0 <handle_coda_error>
 3e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
 3ec:	cmp	r3, #0
 3f0:	ble	664 <print_data+0x3d0>
 3f4:	ldr	r3, [fp, #-292]	; 0xfffffedc
 3f8:	cmp	r3, #0
 3fc:	beq	408 <print_data+0x174>
 400:	ldr	r0, [pc, #2352]	; d38 <print_data+0xaa4>
 404:	bl	94 <ff_printf>
 408:	sub	r3, fp, #56	; 0x38
 40c:	mov	r1, r3
 410:	ldr	r0, [fp, #-288]	; 0xfffffee0
 414:	bl	0 <coda_cursor_get_type>
 418:	mov	r3, r0
 41c:	cmp	r3, #0
 420:	beq	428 <print_data+0x194>
 424:	bl	0 <handle_coda_error>
 428:	ldr	r3, [fp, #-56]	; 0xffffffc8
 42c:	sub	r2, fp, #60	; 0x3c
 430:	mov	r1, r2
 434:	mov	r0, r3
 438:	bl	0 <coda_type_get_record_union_status>
 43c:	mov	r3, r0
 440:	cmp	r3, #0
 444:	beq	44c <print_data+0x1b8>
 448:	bl	0 <handle_coda_error>
 44c:	ldr	r3, [fp, #-60]	; 0xffffffc4
 450:	cmp	r3, #0
 454:	beq	51c <print_data+0x288>
 458:	sub	r3, fp, #64	; 0x40
 45c:	mov	r1, r3
 460:	ldr	r0, [fp, #-288]	; 0xfffffee0
 464:	bl	0 <coda_cursor_get_available_union_field_index>
 468:	mov	r3, r0
 46c:	cmp	r3, #0
 470:	beq	478 <print_data+0x1e4>
 474:	bl	0 <handle_coda_error>
 478:	ldr	r3, [fp, #-56]	; 0xffffffc8
 47c:	ldr	r1, [fp, #-64]	; 0xffffffc0
 480:	sub	r2, fp, #68	; 0x44
 484:	mov	r0, r3
 488:	bl	0 <coda_type_get_record_field_name>
 48c:	mov	r3, r0
 490:	cmp	r3, #0
 494:	beq	49c <print_data+0x208>
 498:	bl	0 <handle_coda_error>
 49c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 4a0:	mov	r1, r3
 4a4:	ldr	r0, [fp, #-288]	; 0xfffffee0
 4a8:	bl	0 <coda_cursor_goto_record_field_by_index>
 4ac:	mov	r3, r0
 4b0:	cmp	r3, #0
 4b4:	beq	4bc <print_data+0x228>
 4b8:	bl	0 <handle_coda_error>
 4bc:	ldr	r3, [fp, #-292]	; 0xfffffedc
 4c0:	cmp	r3, #0
 4c4:	beq	4cc <print_data+0x238>
 4c8:	bl	0 <indent>
 4cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
 4d0:	mov	r1, r3
 4d4:	ldr	r0, [pc, #2156]	; d48 <print_data+0xab4>
 4d8:	bl	94 <ff_printf>
 4dc:	ldr	r3, [pc, #2140]	; d40 <print_data+0xaac>
 4e0:	ldr	r3, [r3]
 4e4:	add	r3, r3, #1
 4e8:	ldr	r2, [pc, #2128]	; d40 <print_data+0xaac>
 4ec:	str	r3, [r2]
 4f0:	mov	r1, #1
 4f4:	ldr	r0, [fp, #-288]	; 0xfffffee0
 4f8:	bl	294 <print_data>
 4fc:	ldr	r3, [pc, #2108]	; d40 <print_data+0xaac>
 500:	ldr	r3, [r3]
 504:	sub	r3, r3, #1
 508:	ldr	r2, [pc, #2096]	; d40 <print_data+0xaac>
 50c:	str	r3, [r2]
 510:	ldr	r0, [fp, #-288]	; 0xfffffee0
 514:	bl	0 <coda_cursor_goto_parent>
 518:	b	d08 <print_data+0xa74>
 51c:	mov	r3, #1
 520:	str	r3, [fp, #-16]
 524:	ldr	r0, [fp, #-288]	; 0xfffffee0
 528:	bl	0 <coda_cursor_goto_first_record_field>
 52c:	mov	r3, r0
 530:	cmp	r3, #0
 534:	beq	53c <print_data+0x2a8>
 538:	bl	0 <handle_coda_error>
 53c:	mov	r3, #0
 540:	str	r3, [fp, #-64]	; 0xffffffc0
 544:	b	648 <print_data+0x3b4>
 548:	ldr	r3, [fp, #-56]	; 0xffffffc8
 54c:	ldr	r1, [fp, #-64]	; 0xffffffc0
 550:	sub	r2, fp, #76	; 0x4c
 554:	mov	r0, r3
 558:	bl	0 <coda_type_get_record_field_hidden_status>
 55c:	mov	r3, r0
 560:	cmp	r3, #0
 564:	beq	56c <print_data+0x2d8>
 568:	bl	0 <handle_coda_error>
 56c:	ldr	r3, [fp, #-76]	; 0xffffffb4
 570:	cmp	r3, #0
 574:	bne	610 <print_data+0x37c>
 578:	ldr	r3, [fp, #-56]	; 0xffffffc8
 57c:	ldr	r1, [fp, #-64]	; 0xffffffc0
 580:	sub	r2, fp, #72	; 0x48
 584:	mov	r0, r3
 588:	bl	0 <coda_type_get_record_field_name>
 58c:	mov	r3, r0
 590:	cmp	r3, #0
 594:	beq	59c <print_data+0x308>
 598:	bl	0 <handle_coda_error>
 59c:	ldr	r3, [fp, #-292]	; 0xfffffedc
 5a0:	cmp	r3, #0
 5a4:	bne	5b4 <print_data+0x320>
 5a8:	ldr	r3, [fp, #-16]
 5ac:	cmp	r3, #0
 5b0:	bne	5b8 <print_data+0x324>
 5b4:	bl	0 <indent>
 5b8:	ldr	r3, [fp, #-16]
 5bc:	cmp	r3, #0
 5c0:	beq	5cc <print_data+0x338>
 5c4:	mov	r3, #0
 5c8:	str	r3, [fp, #-16]
 5cc:	ldr	r3, [fp, #-72]	; 0xffffffb8
 5d0:	mov	r1, r3
 5d4:	ldr	r0, [pc, #1900]	; d48 <print_data+0xab4>
 5d8:	bl	94 <ff_printf>
 5dc:	ldr	r3, [pc, #1884]	; d40 <print_data+0xaac>
 5e0:	ldr	r3, [r3]
 5e4:	add	r3, r3, #1
 5e8:	ldr	r2, [pc, #1872]	; d40 <print_data+0xaac>
 5ec:	str	r3, [r2]
 5f0:	mov	r1, #1
 5f4:	ldr	r0, [fp, #-288]	; 0xfffffee0
 5f8:	bl	294 <print_data>
 5fc:	ldr	r3, [pc, #1852]	; d40 <print_data+0xaac>
 600:	ldr	r3, [r3]
 604:	sub	r3, r3, #1
 608:	ldr	r2, [pc, #1840]	; d40 <print_data+0xaac>
 60c:	str	r3, [r2]
 610:	ldr	r3, [fp, #-52]	; 0xffffffcc
 614:	sub	r2, r3, #1
 618:	ldr	r3, [fp, #-64]	; 0xffffffc0
 61c:	cmp	r2, r3
 620:	ble	63c <print_data+0x3a8>
 624:	ldr	r0, [fp, #-288]	; 0xfffffee0
 628:	bl	0 <coda_cursor_goto_next_record_field>
 62c:	mov	r3, r0
 630:	cmp	r3, #0
 634:	beq	63c <print_data+0x3a8>
 638:	bl	0 <handle_coda_error>
 63c:	ldr	r3, [fp, #-64]	; 0xffffffc0
 640:	add	r3, r3, #1
 644:	str	r3, [fp, #-64]	; 0xffffffc0
 648:	ldr	r2, [fp, #-64]	; 0xffffffc0
 64c:	ldr	r3, [fp, #-52]	; 0xffffffcc
 650:	cmp	r2, r3
 654:	blt	548 <print_data+0x2b4>
 658:	ldr	r0, [fp, #-288]	; 0xfffffee0
 65c:	bl	0 <coda_cursor_goto_parent>
 660:	b	d08 <print_data+0xa74>
 664:	ldr	r0, [pc, #1760]	; d4c <print_data+0xab8>
 668:	bl	94 <ff_printf>
 66c:	b	d08 <print_data+0xa74>
 670:	sub	r2, fp, #284	; 0x11c
 674:	sub	r3, fp, #80	; 0x50
 678:	mov	r1, r3
 67c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 680:	bl	0 <coda_cursor_get_array_dim>
 684:	mov	r3, r0
 688:	cmp	r3, #0
 68c:	beq	694 <print_data+0x400>
 690:	bl	0 <handle_coda_error>
 694:	ldr	r3, [fp, #-80]	; 0xffffffb0
 698:	cmp	r3, #0
 69c:	blt	7c4 <print_data+0x530>
 6a0:	mov	r3, #1
 6a4:	str	r3, [fp, #-20]	; 0xffffffec
 6a8:	mov	r3, #0
 6ac:	str	r3, [fp, #-24]	; 0xffffffe8
 6b0:	b	6e0 <print_data+0x44c>
 6b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 6b8:	lsl	r3, r3, #2
 6bc:	sub	r2, fp, #12
 6c0:	add	r3, r2, r3
 6c4:	ldr	r2, [r3, #-272]	; 0xfffffef0
 6c8:	ldr	r3, [fp, #-20]	; 0xffffffec
 6cc:	mul	r3, r2, r3
 6d0:	str	r3, [fp, #-20]	; 0xffffffec
 6d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
 6d8:	add	r3, r3, #1
 6dc:	str	r3, [fp, #-24]	; 0xffffffe8
 6e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
 6e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
 6e8:	cmp	r2, r3
 6ec:	blt	6b4 <print_data+0x420>
 6f0:	ldr	r3, [fp, #-20]	; 0xffffffec
 6f4:	cmp	r3, #0
 6f8:	ble	7b8 <print_data+0x524>
 6fc:	ldr	r0, [pc, #1588]	; d38 <print_data+0xaa4>
 700:	bl	94 <ff_printf>
 704:	ldr	r0, [fp, #-288]	; 0xfffffee0
 708:	bl	0 <coda_cursor_goto_first_array_element>
 70c:	mov	r3, r0
 710:	cmp	r3, #0
 714:	beq	71c <print_data+0x488>
 718:	bl	0 <handle_coda_error>
 71c:	mov	r3, #0
 720:	str	r3, [fp, #-24]	; 0xffffffe8
 724:	b	79c <print_data+0x508>
 728:	ldr	r0, [pc, #1568]	; d50 <print_data+0xabc>
 72c:	bl	e4 <fi_printf>
 730:	ldr	r3, [pc, #1544]	; d40 <print_data+0xaac>
 734:	ldr	r3, [r3]
 738:	add	r3, r3, #1
 73c:	ldr	r2, [pc, #1532]	; d40 <print_data+0xaac>
 740:	str	r3, [r2]
 744:	mov	r1, #0
 748:	ldr	r0, [fp, #-288]	; 0xfffffee0
 74c:	bl	294 <print_data>
 750:	ldr	r3, [pc, #1512]	; d40 <print_data+0xaac>
 754:	ldr	r3, [r3]
 758:	sub	r3, r3, #1
 75c:	ldr	r2, [pc, #1500]	; d40 <print_data+0xaac>
 760:	str	r3, [r2]
 764:	ldr	r3, [fp, #-20]	; 0xffffffec
 768:	sub	r2, r3, #1
 76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
 770:	cmp	r2, r3
 774:	ble	790 <print_data+0x4fc>
 778:	ldr	r0, [fp, #-288]	; 0xfffffee0
 77c:	bl	0 <coda_cursor_goto_next_array_element>
 780:	mov	r3, r0
 784:	cmp	r3, #0
 788:	beq	790 <print_data+0x4fc>
 78c:	bl	0 <handle_coda_error>
 790:	ldr	r3, [fp, #-24]	; 0xffffffe8
 794:	add	r3, r3, #1
 798:	str	r3, [fp, #-24]	; 0xffffffe8
 79c:	ldr	r2, [fp, #-24]	; 0xffffffe8
 7a0:	ldr	r3, [fp, #-20]	; 0xffffffec
 7a4:	cmp	r2, r3
 7a8:	blt	728 <print_data+0x494>
 7ac:	ldr	r0, [fp, #-288]	; 0xfffffee0
 7b0:	bl	0 <coda_cursor_goto_parent>
 7b4:	b	d08 <print_data+0xa74>
 7b8:	ldr	r0, [pc, #1428]	; d54 <print_data+0xac0>
 7bc:	bl	94 <ff_printf>
 7c0:	b	d08 <print_data+0xa74>
 7c4:	ldr	r0, [pc, #1416]	; d54 <print_data+0xac0>
 7c8:	bl	94 <ff_printf>
 7cc:	b	d08 <print_data+0xa74>
 7d0:	sub	r3, fp, #84	; 0x54
 7d4:	mov	r1, r3
 7d8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 7dc:	bl	0 <coda_cursor_get_read_type>
 7e0:	mov	r3, r0
 7e4:	cmp	r3, #0
 7e8:	beq	7f0 <print_data+0x55c>
 7ec:	bl	0 <handle_coda_error>
 7f0:	ldr	r3, [fp, #-84]	; 0xffffffac
 7f4:	add	r3, r3, #1
 7f8:	cmp	r3, #13
 7fc:	ldrls	pc, [pc, r3, lsl #2]
 800:	b	cfc <print_data+0xa68>
 804:	.word	0x00000b84
 808:	.word	0x00000a48
 80c:	.word	0x00000a7c
 810:	.word	0x00000a48
 814:	.word	0x00000a7c
 818:	.word	0x00000a48
 81c:	.word	0x00000a7c
 820:	.word	0x00000ab0
 824:	.word	0x00000af4
 828:	.word	0x00000b38
 82c:	.word	0x00000b38
 830:	.word	0x0000083c
 834:	.word	0x00000880
 838:	.word	0x00000944
 83c:	sub	r3, fp, #85	; 0x55
 840:	mov	r1, r3
 844:	ldr	r0, [fp, #-288]	; 0xfffffee0
 848:	bl	0 <coda_cursor_read_char>
 84c:	mov	r3, r0
 850:	cmp	r3, #0
 854:	beq	85c <print_data+0x5c8>
 858:	bl	0 <handle_coda_error>
 85c:	ldr	r0, [pc, #1268]	; d58 <print_data+0xac4>
 860:	bl	94 <ff_printf>
 864:	sub	r3, fp, #85	; 0x55
 868:	mov	r1, #1
 86c:	mov	r0, r3
 870:	bl	138 <print_escaped>
 874:	ldr	r0, [pc, #1248]	; d5c <print_data+0xac8>
 878:	bl	94 <ff_printf>
 87c:	b	b90 <print_data+0x8fc>
 880:	sub	r3, fp, #92	; 0x5c
 884:	mov	r1, r3
 888:	ldr	r0, [fp, #-288]	; 0xfffffee0
 88c:	bl	0 <coda_cursor_get_string_length>
 890:	mov	r3, r0
 894:	cmp	r3, #0
 898:	beq	8a0 <print_data+0x60c>
 89c:	bl	0 <handle_coda_error>
 8a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
 8a4:	add	r3, r3, #1
 8a8:	mov	r0, r3
 8ac:	bl	0 <malloc>
 8b0:	mov	r3, r0
 8b4:	str	r3, [fp, #-28]	; 0xffffffe4
 8b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
 8bc:	cmp	r3, #0
 8c0:	bne	8e8 <print_data+0x654>
 8c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
 8c8:	add	r2, r3, #1
 8cc:	ldr	r3, [pc, #1164]	; d60 <print_data+0xacc>
 8d0:	str	r3, [sp]
 8d4:	ldr	r3, [pc, #1160]	; d64 <print_data+0xad0>
 8d8:	ldr	r1, [pc, #1160]	; d68 <print_data+0xad4>
 8dc:	mvn	r0, #0
 8e0:	bl	0 <coda_set_error>
 8e4:	bl	0 <handle_coda_error>
 8e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
 8ec:	add	r3, r3, #1
 8f0:	mov	r2, r3
 8f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
 8f8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 8fc:	bl	0 <coda_cursor_read_string>
 900:	mov	r3, r0
 904:	cmp	r3, #0
 908:	beq	910 <print_data+0x67c>
 90c:	bl	0 <handle_coda_error>
 910:	ldr	r0, [pc, #1088]	; d58 <print_data+0xac4>
 914:	bl	94 <ff_printf>
 918:	ldr	r3, [fp, #-92]	; 0xffffffa4
 91c:	mov	r1, r3
 920:	ldr	r0, [fp, #-28]	; 0xffffffe4
 924:	bl	138 <print_escaped>
 928:	ldr	r3, [fp, #-92]	; 0xffffffa4
 92c:	mov	r1, r3
 930:	ldr	r0, [pc, #1060]	; d5c <print_data+0xac8>
 934:	bl	94 <ff_printf>
 938:	ldr	r0, [fp, #-28]	; 0xffffffe4
 93c:	bl	0 <free>
 940:	b	b90 <print_data+0x8fc>
 944:	sub	r3, fp, #100	; 0x64
 948:	mov	r1, r3
 94c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 950:	bl	0 <coda_cursor_get_bit_size>
 954:	mov	r3, r0
 958:	cmp	r3, #0
 95c:	beq	964 <print_data+0x6d0>
 960:	bl	0 <handle_coda_error>
 964:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 968:	lsr	r4, r2, #3
 96c:	orr	r4, r4, r3, lsl #29
 970:	asr	r5, r3, #3
 974:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 978:	mov	r0, #7
 97c:	mov	r1, #0
 980:	and	r2, r2, r0
 984:	and	r3, r3, r1
 988:	orrs	r3, r2, r3
 98c:	beq	99c <print_data+0x708>
 990:	mov	r2, #1
 994:	mov	r3, #0
 998:	b	9a4 <print_data+0x710>
 99c:	mov	r2, #0
 9a0:	mov	r3, #0
 9a4:	adds	r2, r2, r4
 9a8:	adc	r3, r3, r5
 9ac:	strd	r2, [fp, #-36]	; 0xffffffdc
 9b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
 9b4:	mov	r0, r3
 9b8:	bl	0 <malloc>
 9bc:	mov	r3, r0
 9c0:	str	r3, [fp, #-40]	; 0xffffffd8
 9c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
 9c8:	cmp	r3, #0
 9cc:	bne	9f0 <print_data+0x75c>
 9d0:	ldr	r2, [fp, #-36]	; 0xffffffdc
 9d4:	mov	r3, #392	; 0x188
 9d8:	str	r3, [sp]
 9dc:	ldr	r3, [pc, #896]	; d64 <print_data+0xad0>
 9e0:	ldr	r1, [pc, #896]	; d68 <print_data+0xad4>
 9e4:	mvn	r0, #0
 9e8:	bl	0 <coda_set_error>
 9ec:	bl	0 <handle_coda_error>
 9f0:	ldrd	r2, [fp, #-100]	; 0xffffff9c
 9f4:	strd	r2, [sp]
 9f8:	mov	r2, #0
 9fc:	mov	r3, #0
 a00:	ldr	r1, [fp, #-40]	; 0xffffffd8
 a04:	ldr	r0, [fp, #-288]	; 0xfffffee0
 a08:	bl	0 <coda_cursor_read_bits>
 a0c:	mov	r3, r0
 a10:	cmp	r3, #0
 a14:	beq	a1c <print_data+0x788>
 a18:	bl	0 <handle_coda_error>
 a1c:	ldr	r0, [pc, #820]	; d58 <print_data+0xac4>
 a20:	bl	94 <ff_printf>
 a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
 a28:	mov	r1, r3
 a2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
 a30:	bl	138 <print_escaped>
 a34:	ldr	r0, [pc, #800]	; d5c <print_data+0xac8>
 a38:	bl	94 <ff_printf>
 a3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
 a40:	bl	0 <free>
 a44:	b	b90 <print_data+0x8fc>
 a48:	sub	r3, fp, #104	; 0x68
 a4c:	mov	r1, r3
 a50:	ldr	r0, [fp, #-288]	; 0xfffffee0
 a54:	bl	0 <coda_cursor_read_int32>
 a58:	mov	r3, r0
 a5c:	cmp	r3, #0
 a60:	beq	a68 <print_data+0x7d4>
 a64:	bl	0 <handle_coda_error>
 a68:	ldr	r3, [fp, #-104]	; 0xffffff98
 a6c:	mov	r1, r3
 a70:	ldr	r0, [pc, #756]	; d6c <print_data+0xad8>
 a74:	bl	94 <ff_printf>
 a78:	b	b90 <print_data+0x8fc>
 a7c:	sub	r3, fp, #108	; 0x6c
 a80:	mov	r1, r3
 a84:	ldr	r0, [fp, #-288]	; 0xfffffee0
 a88:	bl	0 <coda_cursor_read_uint32>
 a8c:	mov	r3, r0
 a90:	cmp	r3, #0
 a94:	beq	a9c <print_data+0x808>
 a98:	bl	0 <handle_coda_error>
 a9c:	ldr	r3, [fp, #-108]	; 0xffffff94
 aa0:	mov	r1, r3
 aa4:	ldr	r0, [pc, #708]	; d70 <print_data+0xadc>
 aa8:	bl	94 <ff_printf>
 aac:	b	b90 <print_data+0x8fc>
 ab0:	sub	r3, fp, #116	; 0x74
 ab4:	mov	r1, r3
 ab8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 abc:	bl	0 <coda_cursor_read_int64>
 ac0:	mov	r3, r0
 ac4:	cmp	r3, #0
 ac8:	beq	ad0 <print_data+0x83c>
 acc:	bl	0 <handle_coda_error>
 ad0:	ldrd	r0, [fp, #-116]	; 0xffffff8c
 ad4:	sub	r3, fp, #140	; 0x8c
 ad8:	mov	r2, r3
 adc:	bl	0 <coda_str64>
 ae0:	sub	r3, fp, #140	; 0x8c
 ae4:	mov	r1, r3
 ae8:	ldr	r0, [pc, #644]	; d74 <print_data+0xae0>
 aec:	bl	94 <ff_printf>
 af0:	b	b90 <print_data+0x8fc>
 af4:	sub	r3, fp, #148	; 0x94
 af8:	mov	r1, r3
 afc:	ldr	r0, [fp, #-288]	; 0xfffffee0
 b00:	bl	0 <coda_cursor_read_uint64>
 b04:	mov	r3, r0
 b08:	cmp	r3, #0
 b0c:	beq	b14 <print_data+0x880>
 b10:	bl	0 <handle_coda_error>
 b14:	ldrd	r0, [fp, #-148]	; 0xffffff6c
 b18:	sub	r3, fp, #172	; 0xac
 b1c:	mov	r2, r3
 b20:	bl	0 <coda_str64u>
 b24:	sub	r3, fp, #172	; 0xac
 b28:	mov	r1, r3
 b2c:	ldr	r0, [pc, #576]	; d74 <print_data+0xae0>
 b30:	bl	94 <ff_printf>
 b34:	b	b90 <print_data+0x8fc>
 b38:	sub	r3, fp, #180	; 0xb4
 b3c:	mov	r1, r3
 b40:	ldr	r0, [fp, #-288]	; 0xfffffee0
 b44:	bl	0 <coda_cursor_read_double>
 b48:	mov	r3, r0
 b4c:	cmp	r3, #0
 b50:	beq	b58 <print_data+0x8c4>
 b54:	bl	0 <handle_coda_error>
 b58:	ldr	r3, [fp, #-84]	; 0xffffffac
 b5c:	cmp	r3, #8
 b60:	bne	b74 <print_data+0x8e0>
 b64:	ldrd	r2, [fp, #-180]	; 0xffffff4c
 b68:	ldr	r0, [pc, #520]	; d78 <print_data+0xae4>
 b6c:	bl	94 <ff_printf>
 b70:	b	b90 <print_data+0x8fc>
 b74:	ldrd	r2, [fp, #-180]	; 0xffffff4c
 b78:	ldr	r0, [pc, #508]	; d7c <print_data+0xae8>
 b7c:	bl	94 <ff_printf>
 b80:	b	b90 <print_data+0x8fc>
 b84:	ldr	r0, [pc, #500]	; d80 <print_data+0xaec>
 b88:	bl	94 <ff_printf>
 b8c:	nop			; (mov r0, r0)
 b90:	b	cfc <print_data+0xa68>
 b94:	sub	r3, fp, #184	; 0xb8
 b98:	mov	r1, r3
 b9c:	ldr	r0, [fp, #-288]	; 0xfffffee0
 ba0:	bl	0 <coda_cursor_get_special_type>
 ba4:	mov	r3, r0
 ba8:	cmp	r3, #0
 bac:	beq	bb4 <print_data+0x920>
 bb0:	bl	0 <handle_coda_error>
 bb4:	ldr	r3, [fp, #-184]	; 0xffffff48
 bb8:	cmp	r3, #3
 bbc:	ldrls	pc, [pc, r3, lsl #2]
 bc0:	b	d04 <print_data+0xa70>
 bc4:	.word	0x00000bd4
 bc8:	.word	0x00000be0
 bcc:	.word	0x00000c10
 bd0:	.word	0x00000cb4
 bd4:	ldr	r0, [pc, #420]	; d80 <print_data+0xaec>
 bd8:	bl	94 <ff_printf>
 bdc:	b	cf8 <print_data+0xa64>
 be0:	sub	r3, fp, #196	; 0xc4
 be4:	mov	r1, r3
 be8:	ldr	r0, [fp, #-288]	; 0xfffffee0
 bec:	bl	0 <coda_cursor_read_double>
 bf0:	mov	r3, r0
 bf4:	cmp	r3, #0
 bf8:	beq	c00 <print_data+0x96c>
 bfc:	bl	0 <handle_coda_error>
 c00:	ldrd	r2, [fp, #-196]	; 0xffffff3c
 c04:	ldr	r0, [pc, #368]	; d7c <print_data+0xae8>
 c08:	bl	94 <ff_printf>
 c0c:	b	cf8 <print_data+0xa64>
 c10:	sub	r3, fp, #204	; 0xcc
 c14:	mov	r1, r3
 c18:	ldr	r0, [fp, #-288]	; 0xfffffee0
 c1c:	bl	0 <coda_cursor_read_double>
 c20:	mov	r3, r0
 c24:	cmp	r3, #0
 c28:	beq	c30 <print_data+0x99c>
 c2c:	bl	0 <handle_coda_error>
 c30:	vldr	d7, [fp, #-204]	; 0xffffff34
 c34:	vmov.f64	d0, d7
 c38:	bl	0 <coda_isNaN>
 c3c:	mov	r3, r0
 c40:	cmp	r3, #0
 c44:	bne	c60 <print_data+0x9cc>
 c48:	vldr	d7, [fp, #-204]	; 0xffffff34
 c4c:	vmov.f64	d0, d7
 c50:	bl	0 <coda_isInf>
 c54:	mov	r3, r0
 c58:	cmp	r3, #0
 c5c:	beq	c70 <print_data+0x9dc>
 c60:	ldrd	r2, [fp, #-204]	; 0xffffff34
 c64:	ldr	r0, [pc, #272]	; d7c <print_data+0xae8>
 c68:	bl	94 <ff_printf>
 c6c:	b	cf8 <print_data+0xa64>
 c70:	vldr	d7, [fp, #-204]	; 0xffffff34
 c74:	sub	r3, fp, #232	; 0xe8
 c78:	mov	r1, r3
 c7c:	ldr	r0, [pc, #256]	; d84 <print_data+0xaf0>
 c80:	vmov.f64	d0, d7
 c84:	bl	0 <coda_time_double_to_string>
 c88:	mov	r3, r0
 c8c:	cmp	r3, #0
 c90:	beq	ca0 <print_data+0xa0c>
 c94:	ldr	r0, [pc, #236]	; d88 <print_data+0xaf4>
 c98:	bl	94 <ff_printf>
 c9c:	b	cf8 <print_data+0xa64>
 ca0:	sub	r3, fp, #232	; 0xe8
 ca4:	mov	r1, r3
 ca8:	ldr	r0, [pc, #196]	; d74 <print_data+0xae0>
 cac:	bl	94 <ff_printf>
 cb0:	b	cf8 <print_data+0xa64>
 cb4:	sub	r2, fp, #252	; 0xfc
 cb8:	sub	r3, fp, #244	; 0xf4
 cbc:	mov	r1, r3
 cc0:	ldr	r0, [fp, #-288]	; 0xfffffee0
 cc4:	bl	0 <coda_cursor_read_complex_double_split>
 cc8:	mov	r3, r0
 ccc:	cmp	r3, #0
 cd0:	beq	cd8 <print_data+0xa44>
 cd4:	bl	0 <handle_coda_error>
 cd8:	ldrd	r0, [fp, #-244]	; 0xffffff0c
 cdc:	ldrd	r2, [fp, #-252]	; 0xffffff04
 ce0:	strd	r2, [sp]
 ce4:	mov	r2, r0
 ce8:	mov	r3, r1
 cec:	ldr	r0, [pc, #152]	; d8c <print_data+0xaf8>
 cf0:	bl	94 <ff_printf>
 cf4:	nop			; (mov r0, r0)
 cf8:	b	d04 <print_data+0xa70>
 cfc:	nop			; (mov r0, r0)
 d00:	b	d08 <print_data+0xa74>
 d04:	nop			; (mov r0, r0)
 d08:	ldr	r3, [fp, #-48]	; 0xffffffd0
 d0c:	cmp	r3, #0
 d10:	beq	d28 <print_data+0xa94>
 d14:	ldr	r3, [pc, #36]	; d40 <print_data+0xaac>
 d18:	ldr	r3, [r3]
 d1c:	sub	r3, r3, #1
 d20:	ldr	r2, [pc, #24]	; d40 <print_data+0xaac>
 d24:	str	r3, [r2]
 d28:	nop			; (mov r0, r0)
 d2c:	sub	sp, fp, #12
 d30:	pop	{r4, r5, fp, pc}
 d34:	.word	0x00000004
 d38:	.word	0x0000008c
 d3c:	.word	0x00000090
 d40:	.word	0x00000000
 d44:	.word	0x00000098
 d48:	.word	0x000000a0
 d4c:	.word	0x000000a8
 d50:	.word	0x000000ac
 d54:	.word	0x000000b0
 d58:	.word	0x000000b4
 d5c:	.word	0x000000b8
 d60:	.word	0x00000169
 d64:	.word	0x00000000
 d68:	.word	0x000000bc
 d6c:	.word	0x000000f4
 d70:	.word	0x000000fc
 d74:	.word	0x00000104
 d78:	.word	0x00000108
 d7c:	.word	0x00000110
 d80:	.word	0x00000118
 d84:	.word	0x00000120
 d88:	.word	0x00000140
 d8c:	.word	0x0000015c

00000d90 <print_yaml_data>:
 d90:	push	{fp, lr}
 d94:	add	fp, sp, #4
 d98:	sub	sp, sp, #536	; 0x218
 d9c:	str	r0, [fp, #-536]	; 0xfffffde8
 da0:	ldr	r2, [pc, #268]	; eb4 <print_yaml_data+0x124>
 da4:	ldr	r3, [fp, #-536]	; 0xfffffde8
 da8:	str	r3, [r2]
 dac:	ldr	r3, [pc, #260]	; eb8 <print_yaml_data+0x128>
 db0:	ldr	r3, [r3]
 db4:	sub	r2, fp, #12
 db8:	mov	r1, r2
 dbc:	mov	r0, r3
 dc0:	bl	0 <coda_open>
 dc4:	str	r0, [fp, #-8]
 dc8:	ldr	r3, [fp, #-8]
 dcc:	cmp	r3, #0
 dd0:	beq	e14 <print_yaml_data+0x84>
 dd4:	bl	0 <coda_get_errno>
 dd8:	mov	r3, r0
 ddc:	ldr	r3, [r3]
 de0:	cmn	r3, #21
 de4:	bne	e14 <print_yaml_data+0x84>
 de8:	mov	r0, #0
 dec:	bl	0 <coda_set_option_use_mmap>
 df0:	ldr	r3, [pc, #192]	; eb8 <print_yaml_data+0x128>
 df4:	ldr	r3, [r3]
 df8:	sub	r2, fp, #12
 dfc:	mov	r1, r2
 e00:	mov	r0, r3
 e04:	bl	0 <coda_open>
 e08:	str	r0, [fp, #-8]
 e0c:	mov	r0, #1
 e10:	bl	0 <coda_set_option_use_mmap>
 e14:	ldr	r3, [fp, #-8]
 e18:	cmp	r3, #0
 e1c:	beq	e24 <print_yaml_data+0x94>
 e20:	bl	0 <handle_coda_error>
 e24:	ldr	r2, [fp, #-12]
 e28:	sub	r3, fp, #532	; 0x214
 e2c:	mov	r1, r2
 e30:	mov	r0, r3
 e34:	bl	0 <coda_cursor_set_product>
 e38:	mov	r3, r0
 e3c:	cmp	r3, #0
 e40:	beq	e48 <print_yaml_data+0xb8>
 e44:	bl	0 <handle_coda_error>
 e48:	ldr	r3, [pc, #108]	; ebc <print_yaml_data+0x12c>
 e4c:	ldr	r3, [r3]
 e50:	cmp	r3, #0
 e54:	beq	e84 <print_yaml_data+0xf4>
 e58:	ldr	r3, [pc, #92]	; ebc <print_yaml_data+0x12c>
 e5c:	ldr	r2, [r3]
 e60:	sub	r3, fp, #532	; 0x214
 e64:	mov	r1, r2
 e68:	mov	r0, r3
 e6c:	bl	0 <coda_cursor_goto>
 e70:	str	r0, [fp, #-8]
 e74:	ldr	r3, [fp, #-8]
 e78:	cmp	r3, #0
 e7c:	beq	e84 <print_yaml_data+0xf4>
 e80:	bl	0 <handle_coda_error>
 e84:	mov	r0, #0
 e88:	bl	0 <coda_set_option_perform_boundary_checks>
 e8c:	sub	r3, fp, #532	; 0x214
 e90:	mov	r1, #0
 e94:	mov	r0, r3
 e98:	bl	294 <print_data>
 e9c:	ldr	r3, [fp, #-12]
 ea0:	mov	r0, r3
 ea4:	bl	0 <coda_close>
 ea8:	nop			; (mov r0, r0)
 eac:	sub	sp, fp, #4
 eb0:	pop	{fp, pc}
 eb4:	.word	0x00000004
	...
