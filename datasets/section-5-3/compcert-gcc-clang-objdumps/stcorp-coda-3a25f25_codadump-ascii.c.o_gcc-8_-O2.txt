
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/codadump.dir/tools/codadump/codadump-ascii.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <write_data>:
   0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4:	mov	r5, r1
   8:	strd	r6, [sp, #8]
   c:	add	r7, r1, #2
  10:	strd	r8, [sp, #16]
  14:	strd	sl, [sp, #24]
  18:	movw	fp, #0
  1c:	movt	fp, #0
  20:	str	lr, [sp, #32]
  24:	sub	sp, sp, #108	; 0x6c
  28:	mov	sl, r2
  2c:	add	r1, sp, #52	; 0x34
  30:	str	r0, [sp, #16]
  34:	ldr	r0, [fp, r7, lsl #2]
  38:	str	r3, [sp, #20]
  3c:	bl	0 <coda_type_get_class>
  40:	cmp	r0, #0
  44:	bne	2ac <write_data+0x2ac>
  48:	ldr	r3, [sp, #52]	; 0x34
  4c:	cmp	r3, #0
  50:	beq	134 <write_data+0x134>
  54:	cmp	r3, #1
  58:	bne	1a0 <write_data+0x1a0>
  5c:	lsl	r6, sl, #2
  60:	cmp	sl, #0
  64:	add	r3, r6, sl
  68:	add	r2, r6, sl
  6c:	streq	sl, [fp, #844]	; 0x34c
  70:	add	r3, fp, r3, lsl #4
  74:	add	r2, fp, r2, lsl #4
  78:	ldr	r1, [r3, #800]	; 0x320
  7c:	movw	r3, #0
  80:	movt	r3, #0
  84:	ldr	lr, [r2, #804]	; 0x324
  88:	ldr	r9, [r3, #104]	; 0x68
  8c:	add	r0, lr, r1
  90:	cmp	r9, r0
  94:	str	r0, [sp, #24]
  98:	bge	2b4 <write_data+0x2b4>
  9c:	cmp	lr, #0
  a0:	addle	r7, sl, #1
  a4:	ble	2e8 <write_data+0x2e8>
  a8:	add	ip, r6, sl
  ac:	add	r1, r1, #1
  b0:	str	r5, [sp, #28]
  b4:	lsl	ip, ip, #4
  b8:	mov	r2, #0
  bc:	add	r0, sp, #68	; 0x44
  c0:	add	r3, r3, r1, lsl #2
  c4:	mov	r7, r2
  c8:	mov	r4, #1
  cc:	add	r1, ip, #848	; 0x350
  d0:	add	ip, fp, ip
  d4:	add	r1, fp, r1
  d8:	ldr	r8, [r3, #68]	; 0x44
  dc:	add	r2, r2, #1
  e0:	add	r3, r3, #4
  e4:	cmp	r8, #0
  e8:	ldrne	r8, [r3, #100]	; 0x64
  ec:	ldrne	r5, [ip, #844]	; 0x34c
  f0:	ldreq	r8, [r3, #-4]
  f4:	ldrne	r8, [r8, r5, lsl #2]
  f8:	cmp	lr, r2
  fc:	str	r7, [r1], #4
 100:	mul	r4, r8, r4
 104:	str	r8, [r0, #4]!
 108:	bgt	d8 <write_data+0xd8>
 10c:	cmp	r4, #0
 110:	ldr	r5, [sp, #28]
 114:	bne	3dc <write_data+0x3dc>
 118:	add	sp, sp, #108	; 0x6c
 11c:	ldrd	r4, [sp]
 120:	ldrd	r6, [sp, #8]
 124:	ldrd	r8, [sp, #16]
 128:	ldrd	sl, [sp, #24]
 12c:	add	sp, sp, #32
 130:	pop	{pc}		; (ldr pc, [sp], #4)
 134:	ldr	r3, [sp, #20]
 138:	add	r2, sp, #72	; 0x48
 13c:	ldr	r0, [pc, #2616]	; b7c <write_data+0xb7c>
 140:	add	r4, r3, #872	; 0x368
 144:	add	r3, fp, r4, lsl #2
 148:	ldr	r1, [r3, #4]
 14c:	bl	0 <coda_cursor_get_record_field_available_status>
 150:	cmp	r0, #0
 154:	bne	53c <write_data+0x53c>
 158:	ldr	r3, [sp, #72]	; 0x48
 15c:	cmp	r3, #0
 160:	beq	118 <write_data+0x118>
 164:	add	r4, fp, r4, lsl #2
 168:	ldr	r0, [pc, #2572]	; b7c <write_data+0xb7c>
 16c:	ldr	r1, [r4, #4]
 170:	bl	0 <coda_cursor_goto_record_field_by_index>
 174:	cmp	r0, #0
 178:	bne	940 <write_data+0x940>
 17c:	mov	r2, sl
 180:	add	r1, r5, #1
 184:	ldr	r0, [sp, #16]
 188:	ldr	r3, [sp, #20]
 18c:	add	r3, r3, #1
 190:	bl	0 <write_data>
 194:	ldr	r0, [pc, #2528]	; b7c <write_data+0xb7c>
 198:	bl	0 <coda_cursor_goto_parent>
 19c:	b	118 <write_data+0x118>
 1a0:	movw	r3, #0
 1a4:	movt	r3, #0
 1a8:	ldr	r3, [r3]
 1ac:	cmp	r3, #0
 1b0:	bne	54c <write_data+0x54c>
 1b4:	add	r1, sp, #56	; 0x38
 1b8:	ldr	r0, [fp, r7, lsl #2]
 1bc:	bl	0 <coda_type_get_class>
 1c0:	cmp	r0, #0
 1c4:	bne	544 <write_data+0x544>
 1c8:	ldr	r3, [sp, #56]	; 0x38
 1cc:	cmp	r3, #6
 1d0:	ldrls	pc, [pc, r3, lsl #2]
 1d4:	b	29c <write_data+0x29c>
 1d8:	.word	0x00000908
 1dc:	.word	0x00000908
 1e0:	.word	0x0000037c
 1e4:	.word	0x0000037c
 1e8:	.word	0x0000037c
 1ec:	.word	0x0000037c
 1f0:	.word	0x00000308
 1f4:	add	r1, sp, #64	; 0x40
 1f8:	ldr	r0, [pc, #2428]	; b7c <write_data+0xb7c>
 1fc:	bl	0 <coda_cursor_read_double>
 200:	cmp	r0, #0
 204:	bne	954 <write_data+0x954>
 208:	ldr	r1, [sp, #60]	; 0x3c
 20c:	ldrd	r2, [sp, #64]	; 0x40
 210:	cmp	r1, #2
 214:	bne	834 <write_data+0x834>
 218:	movw	r1, #0
 21c:	movt	r1, #0
 220:	ldr	r1, [r1]
 224:	cmp	r1, #0
 228:	beq	834 <write_data+0x834>
 22c:	vmov	d0, r2, r3
 230:	bl	0 <coda_isNaN>
 234:	cmp	r0, #0
 238:	beq	b20 <write_data+0xb20>
 23c:	movw	r1, #0
 240:	movt	r1, #0
 244:	ldrh	r0, [r1, #24]
 248:	add	lr, sp, #72	; 0x48
 24c:	ldrd	r2, [r1]
 250:	str	lr, [sp, #20]
 254:	ldrb	ip, [r1, #26]
 258:	strd	r2, [sp, #72]	; 0x48
 25c:	strh	r0, [sp, #96]	; 0x60
 260:	ldrd	r2, [r1, #8]
 264:	ldrd	r0, [r1, #16]
 268:	strd	r2, [sp, #80]	; 0x50
 26c:	strb	ip, [sp, #98]	; 0x62
 270:	strd	r0, [sp, #88]	; 0x58
 274:	movw	r3, #0
 278:	movt	r3, #0
 27c:	ldr	r3, [r3]
 280:	cmp	r3, #0
 284:	beq	aac <write_data+0xaac>
 288:	movw	r1, #0
 28c:	movt	r1, #0
 290:	ldr	r0, [sp, #16]
 294:	ldr	r2, [sp, #20]
 298:	bl	0 <fprintf>
 29c:	mov	r0, #10
 2a0:	ldr	r1, [sp, #16]
 2a4:	bl	0 <fputc>
 2a8:	b	118 <write_data+0x118>
 2ac:	bl	0 <handle_coda_error>
 2b0:	b	48 <write_data+0x48>
 2b4:	ldr	r0, [fp, #3360]	; 0xd20
 2b8:	sub	r0, r0, #1
 2bc:	cmp	r0, sl
 2c0:	ble	9c <write_data+0x9c>
 2c4:	ldr	ip, [r2, #840]	; 0x348
 2c8:	add	r7, sl, #1
 2cc:	cmp	lr, #0
 2d0:	add	r0, r7, r7, lsl #2
 2d4:	ldr	r2, [r2, #844]	; 0x34c
 2d8:	add	r0, fp, r0, lsl #4
 2dc:	mul	ip, ip, r2
 2e0:	str	ip, [r0, #844]	; 0x34c
 2e4:	bgt	a8 <write_data+0xa8>
 2e8:	ldr	r0, [pc, #2188]	; b7c <write_data+0xb7c>
 2ec:	bl	0 <coda_cursor_goto_first_array_element>
 2f0:	subs	r8, r0, #0
 2f4:	moveq	r4, #1
 2f8:	beq	3fc <write_data+0x3fc>
 2fc:	bl	0 <handle_coda_error>
 300:	mov	r4, #1
 304:	b	3f8 <write_data+0x3f8>
 308:	add	r1, sp, #60	; 0x3c
 30c:	ldr	r0, [fp, r7, lsl #2]
 310:	bl	0 <coda_type_get_special_type>
 314:	cmp	r0, #0
 318:	bne	930 <write_data+0x930>
 31c:	ldr	r3, [sp, #60]	; 0x3c
 320:	cmp	r3, #0
 324:	beq	29c <write_data+0x29c>
 328:	cmp	r3, #2
 32c:	bls	1f4 <write_data+0x1f4>
 330:	cmp	r3, #3
 334:	bne	29c <write_data+0x29c>
 338:	add	r1, sp, #72	; 0x48
 33c:	ldr	r0, [pc, #2104]	; b7c <write_data+0xb7c>
 340:	bl	0 <coda_cursor_read_complex_double_pair>
 344:	cmp	r0, #0
 348:	bne	900 <write_data+0x900>
 34c:	movw	r3, #0
 350:	movt	r3, #0
 354:	ldr	r0, [sp, #16]
 358:	movw	r1, #0
 35c:	movt	r1, #0
 360:	ldr	ip, [r3]
 364:	ldrd	r4, [sp, #80]	; 0x50
 368:	ldrd	r2, [sp, #72]	; 0x48
 36c:	str	ip, [sp]
 370:	strd	r4, [sp, #8]
 374:	bl	0 <fprintf>
 378:	b	29c <write_data+0x29c>
 37c:	add	r1, sp, #60	; 0x3c
 380:	ldr	r0, [fp, r7, lsl #2]
 384:	bl	0 <coda_type_get_read_type>
 388:	cmp	r0, #0
 38c:	bne	938 <write_data+0x938>
 390:	ldr	r3, [sp, #60]	; 0x3c
 394:	add	r3, r3, #1
 398:	cmp	r3, #13
 39c:	ldrls	pc, [pc, r3, lsl #2]
 3a0:	b	29c <write_data+0x29c>
 3a4:	.word	0x00000b5c
 3a8:	.word	0x000008d4
 3ac:	.word	0x000008a8
 3b0:	.word	0x000008d4
 3b4:	.word	0x000008a8
 3b8:	.word	0x000008d4
 3bc:	.word	0x000008a8
 3c0:	.word	0x00000878
 3c4:	.word	0x00000848
 3c8:	.word	0x00000810
 3cc:	.word	0x00000810
 3d0:	.word	0x000007d0
 3d4:	.word	0x00000758
 3d8:	.word	0x0000063c
 3dc:	ldr	r0, [pc, #1944]	; b7c <write_data+0xb7c>
 3e0:	bl	0 <coda_cursor_goto_first_array_element>
 3e4:	cmp	r0, #0
 3e8:	bne	928 <write_data+0x928>
 3ec:	cmp	r4, #0
 3f0:	addgt	r7, sl, #1
 3f4:	ble	194 <write_data+0x194>
 3f8:	sub	r8, r4, #1
 3fc:	add	r3, r6, sl
 400:	str	r9, [sp, #28]
 404:	add	r6, r5, #1
 408:	mov	r2, r3
 40c:	lsl	r3, r3, #2
 410:	str	sl, [sp, #32]
 414:	ldr	sl, [sp, #16]
 418:	mov	r5, #0
 41c:	ldr	r9, [sp, #20]
 420:	strd	r2, [sp, #40]	; 0x28
 424:	add	r3, fp, r2, lsl #4
 428:	str	r3, [sp, #36]	; 0x24
 42c:	mov	r3, r9
 430:	mov	r2, r7
 434:	mov	r1, r6
 438:	mov	r0, sl
 43c:	bl	0 <write_data>
 440:	cmp	r5, r8
 444:	blt	458 <write_data+0x458>
 448:	add	r5, r5, #1
 44c:	cmp	r5, r4
 450:	blt	42c <write_data+0x42c>
 454:	b	194 <write_data+0x194>
 458:	ldr	r0, [pc, #1820]	; b7c <write_data+0xb7c>
 45c:	bl	0 <coda_cursor_goto_next_array_element>
 460:	cmp	r0, #0
 464:	bne	634 <write_data+0x634>
 468:	ldrd	r2, [sp, #24]
 46c:	cmp	r3, r2
 470:	blt	49c <write_data+0x49c>
 474:	ldr	r3, [fp, #3360]	; 0xd20
 478:	ldr	r2, [sp, #32]
 47c:	sub	r3, r3, #1
 480:	cmp	r3, r2
 484:	ble	49c <write_data+0x49c>
 488:	add	r3, r7, r7, lsl #2
 48c:	add	r3, fp, r3, lsl #4
 490:	ldr	r2, [r3, #844]	; 0x34c
 494:	add	r2, r2, #1
 498:	str	r2, [r3, #844]	; 0x34c
 49c:	movw	r3, #0
 4a0:	movt	r3, #0
 4a4:	ldr	r3, [r3]
 4a8:	cmp	r3, #0
 4ac:	beq	448 <write_data+0x448>
 4b0:	ldr	r3, [sp, #36]	; 0x24
 4b4:	ldr	r0, [r3, #804]	; 0x324
 4b8:	subs	r1, r0, #1
 4bc:	bmi	448 <write_data+0x448>
 4c0:	ldr	r3, [sp, #40]	; 0x28
 4c4:	add	ip, sp, #104	; 0x68
 4c8:	add	ip, ip, r1, lsl #2
 4cc:	ldr	ip, [ip, #-32]	; 0xffffffe0
 4d0:	add	r3, r1, r3, lsl #2
 4d4:	add	r3, r3, #212	; 0xd4
 4d8:	ldr	r2, [fp, r3, lsl #2]
 4dc:	add	r2, r2, #1
 4e0:	cmp	ip, r2
 4e4:	str	r2, [fp, r3, lsl #2]
 4e8:	bne	448 <write_data+0x448>
 4ec:	ldr	r3, [sp, #44]	; 0x2c
 4f0:	mov	lr, #0
 4f4:	add	r2, r0, r3
 4f8:	add	r3, sp, #104	; 0x68
 4fc:	add	r0, r3, r0, lsl #2
 500:	add	r2, r2, #211	; 0xd3
 504:	add	r2, fp, r2, lsl #2
 508:	sub	r0, r0, #40	; 0x28
 50c:	b	528 <write_data+0x528>
 510:	ldr	r3, [r2]
 514:	ldr	ip, [r0], #-4
 518:	add	r3, r3, #1
 51c:	cmp	r3, ip
 520:	str	r3, [r2]
 524:	bne	448 <write_data+0x448>
 528:	sub	r1, r1, #1
 52c:	str	lr, [r2], #-4
 530:	cmn	r1, #1
 534:	bne	510 <write_data+0x510>
 538:	b	448 <write_data+0x448>
 53c:	bl	0 <handle_coda_error>
 540:	b	158 <write_data+0x158>
 544:	bl	0 <handle_coda_error>
 548:	b	1c8 <write_data+0x1c8>
 54c:	ldr	r3, [fp, #136]	; 0x88
 550:	cmp	r3, #0
 554:	ble	1b4 <write_data+0x1b4>
 558:	mov	r6, #0
 55c:	add	r3, sp, #72	; 0x48
 560:	ldr	r8, [pc, #1560]	; b80 <write_data+0xb80>
 564:	movw	r9, #0
 568:	movt	r9, #0
 56c:	movw	sl, #0
 570:	movt	sl, #0
 574:	str	r3, [sp, #20]
 578:	str	r6, [sp, #24]
 57c:	str	r7, [sp, #32]
 580:	b	5a0 <write_data+0x5a0>
 584:	ldr	r3, [sp, #72]	; 0x48
 588:	cmp	r3, #1
 58c:	beq	5c4 <write_data+0x5c4>
 590:	ldr	r3, [fp, #136]	; 0x88
 594:	add	r6, r6, #1
 598:	cmp	r6, r3
 59c:	bge	62c <write_data+0x62c>
 5a0:	ldr	r0, [r8, #4]!
 5a4:	ldr	r1, [sp, #20]
 5a8:	bl	0 <coda_type_get_class>
 5ac:	cmp	r0, #0
 5b0:	beq	584 <write_data+0x584>
 5b4:	bl	0 <handle_coda_error>
 5b8:	ldr	r3, [sp, #72]	; 0x48
 5bc:	cmp	r3, #1
 5c0:	bne	590 <write_data+0x590>
 5c4:	ldr	r3, [sp, #24]
 5c8:	add	r5, r3, r3, lsl #2
 5cc:	lsl	r5, r5, #4
 5d0:	add	r7, fp, r5
 5d4:	ldr	r3, [r7, #804]	; 0x324
 5d8:	cmp	r3, #0
 5dc:	ble	61c <write_data+0x61c>
 5e0:	str	r6, [sp, #28]
 5e4:	add	r5, r5, #848	; 0x350
 5e8:	mov	r4, #0
 5ec:	ldr	r6, [sp, #16]
 5f0:	add	r5, fp, r5
 5f4:	mov	r1, sl
 5f8:	mov	r0, r6
 5fc:	ldr	r3, [r9]
 600:	add	r4, r4, #1
 604:	ldr	r2, [r5], #4
 608:	bl	0 <fprintf>
 60c:	ldr	r3, [r7, #804]	; 0x324
 610:	cmp	r4, r3
 614:	blt	5f4 <write_data+0x5f4>
 618:	ldr	r6, [sp, #28]
 61c:	ldr	r3, [sp, #24]
 620:	add	r3, r3, #1
 624:	str	r3, [sp, #24]
 628:	b	590 <write_data+0x590>
 62c:	ldr	r7, [sp, #32]
 630:	b	1b4 <write_data+0x1b4>
 634:	bl	0 <handle_coda_error>
 638:	b	468 <write_data+0x468>
 63c:	add	r1, sp, #72	; 0x48
 640:	ldr	r0, [pc, #1332]	; b7c <write_data+0xb7c>
 644:	bl	0 <coda_cursor_get_bit_size>
 648:	cmp	r0, #0
 64c:	bne	aa4 <write_data+0xaa4>
 650:	ldr	r6, [sp, #72]	; 0x48
 654:	ldr	r8, [sp, #76]	; 0x4c
 658:	lsr	r2, r6, #3
 65c:	ands	r1, r6, #7
 660:	movne	r1, #1
 664:	orr	r2, r2, r8, lsl #29
 668:	asr	r3, r8, #3
 66c:	adds	r4, r2, r1
 670:	mov	r0, r4
 674:	adc	r5, r3, #0
 678:	bl	0 <malloc>
 67c:	subs	r7, r0, #0
 680:	beq	abc <write_data+0xabc>
 684:	mov	r2, #0
 688:	mov	r3, #0
 68c:	ldr	r0, [pc, #1256]	; b7c <write_data+0xb7c>
 690:	mov	r1, r7
 694:	stm	sp, {r6, r8}
 698:	bl	0 <coda_cursor_read_bits>
 69c:	cmp	r0, #0
 6a0:	bne	a9c <write_data+0xa9c>
 6a4:	cmp	r4, #1
 6a8:	sbcs	r3, r5, #0
 6ac:	blt	948 <write_data+0x948>
 6b0:	sub	r2, r4, #1
 6b4:	movw	r8, #0
 6b8:	movt	r8, #0
 6bc:	movw	r9, #0
 6c0:	movt	r9, #0
 6c4:	movw	r6, #0
 6c8:	movt	r6, #0
 6cc:	add	r5, r7, r2
 6d0:	ldr	sl, [sp, #16]
 6d4:	sub	r4, r7, #1
 6d8:	b	718 <write_data+0x718>
 6dc:	cmp	r2, #12
 6e0:	beq	9b0 <write_data+0x9b0>
 6e4:	bcc	994 <write_data+0x994>
 6e8:	cmp	r2, #13
 6ec:	beq	978 <write_data+0x978>
 6f0:	cmp	r2, #92	; 0x5c
 6f4:	bne	95c <write_data+0x95c>
 6f8:	movw	r0, #0
 6fc:	movt	r0, #0
 700:	mov	r3, sl
 704:	mov	r2, #2
 708:	mov	r1, #1
 70c:	bl	0 <fwrite>
 710:	cmp	r4, r5
 714:	beq	948 <write_data+0x948>
 718:	ldrb	r2, [r4, #1]!
 71c:	cmp	r2, #10
 720:	beq	a00 <write_data+0xa00>
 724:	bhi	6dc <write_data+0x6dc>
 728:	cmp	r2, #8
 72c:	beq	9e4 <write_data+0x9e4>
 730:	bhi	9c8 <write_data+0x9c8>
 734:	cmp	r2, #7
 738:	bne	95c <write_data+0x95c>
 73c:	movw	r0, #0
 740:	movt	r0, #0
 744:	mov	r3, sl
 748:	mov	r2, #2
 74c:	mov	r1, #1
 750:	bl	0 <fwrite>
 754:	b	710 <write_data+0x710>
 758:	add	r1, sp, #72	; 0x48
 75c:	ldr	r0, [pc, #1048]	; b7c <write_data+0xb7c>
 760:	bl	0 <coda_cursor_get_string_length>
 764:	cmp	r0, #0
 768:	bne	a64 <write_data+0xa64>
 76c:	ldr	r0, [sp, #72]	; 0x48
 770:	add	r0, r0, #1
 774:	bl	0 <malloc>
 778:	subs	r4, r0, #0
 77c:	beq	af0 <write_data+0xaf0>
 780:	ldr	r2, [sp, #72]	; 0x48
 784:	mov	r1, r4
 788:	ldr	r0, [pc, #1004]	; b7c <write_data+0xb7c>
 78c:	add	r2, r2, #1
 790:	bl	0 <coda_cursor_read_string>
 794:	cmp	r0, #0
 798:	bne	a7c <write_data+0xa7c>
 79c:	movw	r3, #0
 7a0:	movt	r3, #0
 7a4:	ldr	r3, [r3]
 7a8:	cmp	r3, #0
 7ac:	beq	a28 <write_data+0xa28>
 7b0:	movw	r1, #0
 7b4:	movt	r1, #0
 7b8:	ldr	r0, [sp, #16]
 7bc:	mov	r2, r4
 7c0:	bl	0 <fprintf>
 7c4:	mov	r0, r4
 7c8:	bl	0 <free>
 7cc:	b	29c <write_data+0x29c>
 7d0:	add	r1, sp, #72	; 0x48
 7d4:	ldr	r0, [pc, #928]	; b7c <write_data+0xb7c>
 7d8:	bl	0 <coda_cursor_read_char>
 7dc:	cmp	r0, #0
 7e0:	bne	a8c <write_data+0xa8c>
 7e4:	movw	r3, #0
 7e8:	movt	r3, #0
 7ec:	ldrb	r2, [sp, #72]	; 0x48
 7f0:	ldr	r3, [r3]
 7f4:	cmp	r3, #0
 7f8:	beq	a18 <write_data+0xa18>
 7fc:	movw	r1, #0
 800:	movt	r1, #0
 804:	ldr	r0, [sp, #16]
 808:	bl	0 <fprintf>
 80c:	b	29c <write_data+0x29c>
 810:	add	r1, sp, #72	; 0x48
 814:	ldr	r0, [pc, #864]	; b7c <write_data+0xb7c>
 818:	bl	0 <coda_cursor_read_double>
 81c:	cmp	r0, #0
 820:	bne	a5c <write_data+0xa5c>
 824:	ldr	r1, [sp, #60]	; 0x3c
 828:	ldrd	r2, [sp, #72]	; 0x48
 82c:	cmp	r1, #8
 830:	beq	a48 <write_data+0xa48>
 834:	movw	r1, #0
 838:	movt	r1, #0
 83c:	ldr	r0, [sp, #16]
 840:	bl	0 <fprintf>
 844:	b	29c <write_data+0x29c>
 848:	add	r1, sp, #64	; 0x40
 84c:	ldr	r0, [pc, #808]	; b7c <write_data+0xb7c>
 850:	bl	0 <coda_cursor_read_uint64>
 854:	cmp	r0, #0
 858:	bne	a94 <write_data+0xa94>
 85c:	add	r2, sp, #72	; 0x48
 860:	ldrd	r0, [sp, #64]	; 0x40
 864:	bl	0 <coda_str64u>
 868:	add	r0, sp, #72	; 0x48
 86c:	ldr	r1, [sp, #16]
 870:	bl	0 <fputs>
 874:	b	29c <write_data+0x29c>
 878:	add	r1, sp, #64	; 0x40
 87c:	ldr	r0, [pc, #760]	; b7c <write_data+0xb7c>
 880:	bl	0 <coda_cursor_read_int64>
 884:	cmp	r0, #0
 888:	bne	a6c <write_data+0xa6c>
 88c:	add	r2, sp, #72	; 0x48
 890:	ldrd	r0, [sp, #64]	; 0x40
 894:	bl	0 <coda_str64>
 898:	add	r0, sp, #72	; 0x48
 89c:	ldr	r1, [sp, #16]
 8a0:	bl	0 <fputs>
 8a4:	b	29c <write_data+0x29c>
 8a8:	add	r1, sp, #72	; 0x48
 8ac:	ldr	r0, [pc, #712]	; b7c <write_data+0xb7c>
 8b0:	bl	0 <coda_cursor_read_uint32>
 8b4:	cmp	r0, #0
 8b8:	bne	a74 <write_data+0xa74>
 8bc:	movw	r1, #0
 8c0:	movt	r1, #0
 8c4:	ldr	r0, [sp, #16]
 8c8:	ldr	r2, [sp, #72]	; 0x48
 8cc:	bl	0 <fprintf>
 8d0:	b	29c <write_data+0x29c>
 8d4:	add	r1, sp, #72	; 0x48
 8d8:	ldr	r0, [pc, #668]	; b7c <write_data+0xb7c>
 8dc:	bl	0 <coda_cursor_read_int32>
 8e0:	cmp	r0, #0
 8e4:	bne	a84 <write_data+0xa84>
 8e8:	movw	r1, #0
 8ec:	movt	r1, #0
 8f0:	ldr	r0, [sp, #16]
 8f4:	ldr	r2, [sp, #72]	; 0x48
 8f8:	bl	0 <fprintf>
 8fc:	b	29c <write_data+0x29c>
 900:	bl	0 <handle_coda_error>
 904:	b	34c <write_data+0x34c>
 908:	movw	r3, #0
 90c:	movt	r3, #0
 910:	movw	r1, #0
 914:	movt	r1, #0
 918:	movw	r0, #0
 91c:	movt	r0, #0
 920:	mov	r2, #368	; 0x170
 924:	bl	0 <__assert_fail>
 928:	bl	0 <handle_coda_error>
 92c:	b	3ec <write_data+0x3ec>
 930:	bl	0 <handle_coda_error>
 934:	b	31c <write_data+0x31c>
 938:	bl	0 <handle_coda_error>
 93c:	b	390 <write_data+0x390>
 940:	bl	0 <handle_coda_error>
 944:	b	17c <write_data+0x17c>
 948:	mov	r0, r7
 94c:	bl	0 <free>
 950:	b	29c <write_data+0x29c>
 954:	bl	0 <handle_coda_error>
 958:	b	208 <write_data+0x208>
 95c:	sub	r3, r2, #32
 960:	cmp	r3, #94	; 0x5e
 964:	bhi	a38 <write_data+0xa38>
 968:	mov	r0, r2
 96c:	mov	r1, sl
 970:	bl	0 <fputc>
 974:	b	710 <write_data+0x710>
 978:	movw	r0, #0
 97c:	movt	r0, #0
 980:	mov	r3, sl
 984:	mov	r2, #2
 988:	mov	r1, #1
 98c:	bl	0 <fwrite>
 990:	b	710 <write_data+0x710>
 994:	movw	r0, #0
 998:	movt	r0, #0
 99c:	mov	r3, sl
 9a0:	mov	r2, #2
 9a4:	mov	r1, #1
 9a8:	bl	0 <fwrite>
 9ac:	b	710 <write_data+0x710>
 9b0:	mov	r3, sl
 9b4:	mov	r2, #2
 9b8:	mov	r1, #1
 9bc:	mov	r0, r6
 9c0:	bl	0 <fwrite>
 9c4:	b	710 <write_data+0x710>
 9c8:	movw	r0, #0
 9cc:	movt	r0, #0
 9d0:	mov	r3, sl
 9d4:	mov	r2, #2
 9d8:	mov	r1, #1
 9dc:	bl	0 <fwrite>
 9e0:	b	710 <write_data+0x710>
 9e4:	movw	r0, #0
 9e8:	movt	r0, #0
 9ec:	mov	r3, sl
 9f0:	mov	r2, #2
 9f4:	mov	r1, #1
 9f8:	bl	0 <fwrite>
 9fc:	b	710 <write_data+0x710>
 a00:	mov	r3, sl
 a04:	mov	r2, #2
 a08:	mov	r1, #1
 a0c:	mov	r0, r8
 a10:	bl	0 <fwrite>
 a14:	b	710 <write_data+0x710>
 a18:	mov	r0, r2
 a1c:	ldr	r1, [sp, #16]
 a20:	bl	0 <fputc>
 a24:	b	29c <write_data+0x29c>
 a28:	mov	r0, r4
 a2c:	ldr	r1, [sp, #16]
 a30:	bl	0 <fputs>
 a34:	b	7c4 <write_data+0x7c4>
 a38:	mov	r1, r9
 a3c:	mov	r0, sl
 a40:	bl	0 <fprintf>
 a44:	b	710 <write_data+0x710>
 a48:	movw	r1, #0
 a4c:	movt	r1, #0
 a50:	ldr	r0, [sp, #16]
 a54:	bl	0 <fprintf>
 a58:	b	29c <write_data+0x29c>
 a5c:	bl	0 <handle_coda_error>
 a60:	b	824 <write_data+0x824>
 a64:	bl	0 <handle_coda_error>
 a68:	b	76c <write_data+0x76c>
 a6c:	bl	0 <handle_coda_error>
 a70:	b	88c <write_data+0x88c>
 a74:	bl	0 <handle_coda_error>
 a78:	b	8bc <write_data+0x8bc>
 a7c:	bl	0 <handle_coda_error>
 a80:	b	79c <write_data+0x79c>
 a84:	bl	0 <handle_coda_error>
 a88:	b	8e8 <write_data+0x8e8>
 a8c:	bl	0 <handle_coda_error>
 a90:	b	7e4 <write_data+0x7e4>
 a94:	bl	0 <handle_coda_error>
 a98:	b	85c <write_data+0x85c>
 a9c:	bl	0 <handle_coda_error>
 aa0:	b	6a4 <write_data+0x6a4>
 aa4:	bl	0 <handle_coda_error>
 aa8:	b	650 <write_data+0x650>
 aac:	ldr	r1, [sp, #16]
 ab0:	ldr	r0, [sp, #20]
 ab4:	bl	0 <fputs>
 ab8:	b	29c <write_data+0x29c>
 abc:	mov	r0, #163	; 0xa3
 ac0:	mov	r2, r4
 ac4:	movw	r3, #0
 ac8:	movt	r3, #0
 acc:	movw	r1, #0
 ad0:	movt	r1, #0
 ad4:	str	r0, [sp]
 ad8:	mvn	r0, #0
 adc:	bl	0 <coda_set_error>
 ae0:	bl	0 <handle_coda_error>
 ae4:	ldr	r6, [sp, #72]	; 0x48
 ae8:	ldr	r8, [sp, #76]	; 0x4c
 aec:	b	684 <write_data+0x684>
 af0:	ldr	r2, [sp, #72]	; 0x48
 af4:	mov	r0, #126	; 0x7e
 af8:	movw	r3, #0
 afc:	movt	r3, #0
 b00:	movw	r1, #0
 b04:	movt	r1, #0
 b08:	str	r0, [sp]
 b0c:	mvn	r0, #0
 b10:	add	r2, r2, #1
 b14:	bl	0 <coda_set_error>
 b18:	bl	0 <handle_coda_error>
 b1c:	b	780 <write_data+0x780>
 b20:	vldr	d0, [sp, #64]	; 0x40
 b24:	bl	0 <coda_isInf>
 b28:	cmp	r0, #0
 b2c:	bne	23c <write_data+0x23c>
 b30:	add	r3, sp, #72	; 0x48
 b34:	movw	r0, #0
 b38:	movt	r0, #0
 b3c:	mov	r1, r3
 b40:	vldr	d0, [sp, #64]	; 0x40
 b44:	str	r3, [sp, #20]
 b48:	bl	0 <coda_time_double_to_string>
 b4c:	cmp	r0, #0
 b50:	beq	274 <write_data+0x274>
 b54:	bl	0 <handle_coda_error>
 b58:	b	274 <write_data+0x274>
 b5c:	movw	r3, #0
 b60:	movt	r3, #0
 b64:	movw	r1, #0
 b68:	movt	r1, #0
 b6c:	movw	r0, #0
 b70:	movt	r0, #0
 b74:	movw	r2, #294	; 0x126
 b78:	bl	0 <__assert_fail>
 b7c:	.word	0x00000090
 b80:	.word	0x00000004

00000b84 <export_data_element_to_ascii>:
 b84:	movw	r3, #0
 b88:	movt	r3, #0
 b8c:	str	r4, [sp, #-8]!
 b90:	ldr	r2, [r3]
 b94:	str	lr, [sp, #4]
 b98:	cmp	r2, #0
 b9c:	beq	c44 <export_data_element_to_ascii+0xc0>
 ba0:	mov	r2, #0
 ba4:	str	r2, [r3]
 ba8:	movw	r3, #0
 bac:	movt	r3, #0
 bb0:	ldr	r3, [r3]
 bb4:	cmp	r3, #0
 bb8:	bne	c1c <export_data_element_to_ascii+0x98>
 bbc:	movw	r2, #0
 bc0:	movt	r2, #0
 bc4:	ldr	r3, [r2]
 bc8:	cmp	r3, #0
 bcc:	ble	be8 <export_data_element_to_ascii+0x64>
 bd0:	add	r3, r3, #37	; 0x25
 bd4:	lsl	r3, r3, #3
 bd8:	add	r2, r2, r3
 bdc:	ldrd	r2, [r2]
 be0:	orrs	r3, r2, r3
 be4:	beq	c10 <export_data_element_to_ascii+0x8c>
 be8:	mov	r3, #0
 bec:	movw	r2, #0
 bf0:	movt	r2, #0
 bf4:	mov	r1, r3
 bf8:	ldr	r4, [sp]
 bfc:	ldr	r0, [r2]
 c00:	mov	r2, r3
 c04:	ldr	lr, [sp, #4]
 c08:	add	sp, sp, #8
 c0c:	b	0 <write_data>
 c10:	ldr	r4, [sp]
 c14:	add	sp, sp, #4
 c18:	pop	{pc}		; (ldr pc, [sp], #4)
 c1c:	movw	r4, #0
 c20:	movt	r4, #0
 c24:	mov	r2, #0
 c28:	mov	r1, #2
 c2c:	ldr	r0, [r4]
 c30:	bl	0 <print_full_field_name>
 c34:	mov	r0, #10
 c38:	ldr	r1, [r4]
 c3c:	bl	0 <fputc>
 c40:	b	bbc <export_data_element_to_ascii+0x38>
 c44:	movw	r3, #0
 c48:	movt	r3, #0
 c4c:	mov	r0, #10
 c50:	ldr	r1, [r3]
 c54:	bl	0 <fputc>
 c58:	b	ba8 <export_data_element_to_ascii+0x24>
