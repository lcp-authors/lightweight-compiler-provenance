
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-mem-type.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_mem_type_delete>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #16
      10:	str	r0, [fp, #-16]
      14:	ldr	r3, [fp, #-16]
      18:	cmp	r3, #0
      1c:	bne	40 <coda_mem_type_delete+0x40>
      20:	movw	r3, #0
      24:	movt	r3, #0
      28:	mov	r2, #42	; 0x2a
      2c:	movw	r1, #0
      30:	movt	r1, #0
      34:	movw	r0, #0
      38:	movt	r0, #0
      3c:	bl	0 <__assert_fail>
      40:	ldr	r3, [fp, #-16]
      44:	ldr	r3, [r3]
      48:	cmp	r3, #100	; 0x64
      4c:	beq	70 <coda_mem_type_delete+0x70>
      50:	movw	r3, #0
      54:	movt	r3, #0
      58:	mov	r2, #43	; 0x2b
      5c:	movw	r1, #0
      60:	movt	r1, #0
      64:	movw	r0, #0
      68:	movt	r0, #0
      6c:	bl	0 <__assert_fail>
      70:	ldr	r3, [fp, #-16]
      74:	ldr	r3, [r3, #8]
      78:	cmp	r3, #3
      7c:	ldrls	pc, [pc, r3, lsl #2]
      80:	b	1ec <coda_mem_type_delete+0x1ec>
      84:	.word	0x00000094
      88:	.word	0x00000124
      8c:	.word	0x000001ec
      90:	.word	0x000001b4
      94:	ldr	r3, [fp, #-16]
      98:	ldr	r3, [r3, #20]
      9c:	cmp	r3, #0
      a0:	beq	1d8 <coda_mem_type_delete+0x1d8>
      a4:	mov	r3, #0
      a8:	str	r3, [fp, #-8]
      ac:	b	fc <coda_mem_type_delete+0xfc>
      b0:	ldr	r3, [fp, #-16]
      b4:	ldr	r2, [r3, #20]
      b8:	ldr	r3, [fp, #-8]
      bc:	lsl	r3, r3, #2
      c0:	add	r3, r2, r3
      c4:	ldr	r3, [r3]
      c8:	cmp	r3, #0
      cc:	beq	f0 <coda_mem_type_delete+0xf0>
      d0:	ldr	r3, [fp, #-16]
      d4:	ldr	r2, [r3, #20]
      d8:	ldr	r3, [fp, #-8]
      dc:	lsl	r3, r3, #2
      e0:	add	r3, r2, r3
      e4:	ldr	r3, [r3]
      e8:	mov	r0, r3
      ec:	bl	0 <coda_dynamic_type_delete>
      f0:	ldr	r3, [fp, #-8]
      f4:	add	r3, r3, #1
      f8:	str	r3, [fp, #-8]
      fc:	ldr	r3, [fp, #-16]
     100:	ldr	r3, [r3, #16]
     104:	ldr	r2, [fp, #-8]
     108:	cmp	r2, r3
     10c:	blt	b0 <coda_mem_type_delete+0xb0>
     110:	ldr	r3, [fp, #-16]
     114:	ldr	r3, [r3, #20]
     118:	mov	r0, r3
     11c:	bl	0 <free>
     120:	b	1d8 <coda_mem_type_delete+0x1d8>
     124:	ldr	r3, [fp, #-16]
     128:	ldr	r3, [r3, #20]
     12c:	cmp	r3, #0
     130:	beq	1e0 <coda_mem_type_delete+0x1e0>
     134:	mov	r3, #0
     138:	str	r3, [fp, #-8]
     13c:	b	18c <coda_mem_type_delete+0x18c>
     140:	ldr	r3, [fp, #-16]
     144:	ldr	r2, [r3, #20]
     148:	ldr	r3, [fp, #-8]
     14c:	lsl	r3, r3, #2
     150:	add	r3, r2, r3
     154:	ldr	r3, [r3]
     158:	cmp	r3, #0
     15c:	beq	180 <coda_mem_type_delete+0x180>
     160:	ldr	r3, [fp, #-16]
     164:	ldr	r2, [r3, #20]
     168:	ldr	r3, [fp, #-8]
     16c:	lsl	r3, r3, #2
     170:	add	r3, r2, r3
     174:	ldr	r3, [r3]
     178:	mov	r0, r3
     17c:	bl	0 <coda_dynamic_type_delete>
     180:	ldr	r3, [fp, #-8]
     184:	add	r3, r3, #1
     188:	str	r3, [fp, #-8]
     18c:	ldr	r3, [fp, #-16]
     190:	ldr	r3, [r3, #16]
     194:	ldr	r2, [fp, #-8]
     198:	cmp	r2, r3
     19c:	blt	140 <coda_mem_type_delete+0x140>
     1a0:	ldr	r3, [fp, #-16]
     1a4:	ldr	r3, [r3, #20]
     1a8:	mov	r0, r3
     1ac:	bl	0 <free>
     1b0:	b	1e0 <coda_mem_type_delete+0x1e0>
     1b4:	ldr	r3, [fp, #-16]
     1b8:	ldr	r3, [r3, #16]
     1bc:	cmp	r3, #0
     1c0:	beq	1e8 <coda_mem_type_delete+0x1e8>
     1c4:	ldr	r3, [fp, #-16]
     1c8:	ldr	r3, [r3, #16]
     1cc:	mov	r0, r3
     1d0:	bl	0 <coda_dynamic_type_delete>
     1d4:	b	1e8 <coda_mem_type_delete+0x1e8>
     1d8:	nop	{0}
     1dc:	b	1ec <coda_mem_type_delete+0x1ec>
     1e0:	nop	{0}
     1e4:	b	1ec <coda_mem_type_delete+0x1ec>
     1e8:	nop	{0}
     1ec:	ldr	r3, [fp, #-16]
     1f0:	ldr	r3, [r3, #12]
     1f4:	cmp	r3, #0
     1f8:	beq	20c <coda_mem_type_delete+0x20c>
     1fc:	ldr	r3, [fp, #-16]
     200:	ldr	r3, [r3, #12]
     204:	mov	r0, r3
     208:	bl	0 <coda_dynamic_type_delete>
     20c:	ldr	r3, [fp, #-16]
     210:	ldr	r3, [r3, #4]
     214:	cmp	r3, #0
     218:	beq	22c <coda_mem_type_delete+0x22c>
     21c:	ldr	r3, [fp, #-16]
     220:	ldr	r3, [r3, #4]
     224:	mov	r0, r3
     228:	bl	0 <coda_type_release>
     22c:	ldr	r0, [fp, #-16]
     230:	bl	0 <free>
     234:	nop	{0}
     238:	sub	sp, fp, #4
     23c:	ldr	fp, [sp]
     240:	add	sp, sp, #4
     244:	pop	{pc}		; (ldr pc, [sp], #4)

00000248 <coda_mem_type_update>:
     248:	str	fp, [sp, #-8]!
     24c:	str	lr, [sp, #4]
     250:	add	fp, sp, #4
     254:	sub	sp, sp, #32
     258:	str	r0, [fp, #-24]	; 0xffffffe8
     25c:	str	r1, [fp, #-28]	; 0xffffffe4
     260:	ldr	r3, [fp, #-24]	; 0xffffffe8
     264:	ldr	r3, [r3]
     268:	ldr	r3, [r3]
     26c:	cmp	r3, #0
     270:	beq	288 <coda_mem_type_update+0x40>
     274:	ldr	r3, [fp, #-24]	; 0xffffffe8
     278:	ldr	r3, [r3]
     27c:	ldr	r3, [r3]
     280:	cmp	r3, #1
     284:	bne	2e8 <coda_mem_type_update+0xa0>
     288:	ldr	r3, [fp, #-24]	; 0xffffffe8
     28c:	ldr	r3, [r3]
     290:	ldr	r3, [r3]
     294:	cmp	r3, #99	; 0x63
     298:	bhi	2a8 <coda_mem_type_update+0x60>
     29c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2a0:	ldr	r3, [r3]
     2a4:	b	2b4 <coda_mem_type_update+0x6c>
     2a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2ac:	ldr	r3, [r3]
     2b0:	ldr	r3, [r3, #4]
     2b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
     2b8:	cmp	r3, r2
     2bc:	beq	2e0 <coda_mem_type_update+0x98>
     2c0:	movw	r3, #0
     2c4:	movt	r3, #0
     2c8:	mov	r2, #104	; 0x68
     2cc:	movw	r1, #0
     2d0:	movt	r1, #0
     2d4:	movw	r0, #0
     2d8:	movt	r0, #0
     2dc:	bl	0 <__assert_fail>
     2e0:	mov	r3, #0
     2e4:	b	8bc <coda_mem_type_update+0x674>
     2e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
     2ec:	ldr	r3, [r3]
     2f0:	ldr	r3, [r3]
     2f4:	cmp	r3, #100	; 0x64
     2f8:	beq	31c <coda_mem_type_update+0xd4>
     2fc:	movw	r3, #0
     300:	movt	r3, #0
     304:	mov	r2, #108	; 0x6c
     308:	movw	r1, #0
     30c:	movt	r1, #0
     310:	movw	r0, #0
     314:	movt	r0, #0
     318:	bl	0 <__assert_fail>
     31c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     320:	ldr	r3, [r3]
     324:	ldr	r3, [r3, #4]
     328:	ldr	r2, [fp, #-28]	; 0xffffffe4
     32c:	cmp	r2, r3
     330:	beq	544 <coda_mem_type_update+0x2fc>
     334:	ldr	r3, [fp, #-28]	; 0xffffffe4
     338:	ldr	r3, [r3, #8]
     33c:	cmp	r3, #1
     340:	bne	430 <coda_mem_type_update+0x1e8>
     344:	ldr	r3, [fp, #-24]	; 0xffffffe8
     348:	ldr	r3, [r3]
     34c:	ldr	r3, [r3, #4]
     350:	ldr	r3, [r3, #8]
     354:	cmp	r3, #1
     358:	beq	430 <coda_mem_type_update+0x1e8>
     35c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     360:	ldr	r3, [r3]
     364:	cmp	r3, #2
     368:	beq	38c <coda_mem_type_update+0x144>
     36c:	movw	r3, #0
     370:	movt	r3, #0
     374:	mov	r2, #114	; 0x72
     378:	movw	r1, #0
     37c:	movt	r1, #0
     380:	movw	r0, #0
     384:	movt	r0, #0
     388:	bl	0 <__assert_fail>
     38c:	mov	r1, #0
     390:	ldr	r0, [fp, #-28]	; 0xffffffe4
     394:	bl	1640 <coda_mem_array_new>
     398:	str	r0, [fp, #-12]
     39c:	ldr	r3, [fp, #-12]
     3a0:	cmp	r3, #0
     3a4:	bne	3b0 <coda_mem_type_update+0x168>
     3a8:	mvn	r3, #0
     3ac:	b	8bc <coda_mem_type_update+0x674>
     3b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     3b4:	ldr	r3, [r3, #40]	; 0x28
     3b8:	mov	r1, r3
     3bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
     3c0:	bl	248 <coda_mem_type_update>
     3c4:	mov	r3, r0
     3c8:	cmp	r3, #0
     3cc:	beq	3e0 <coda_mem_type_update+0x198>
     3d0:	ldr	r0, [fp, #-12]
     3d4:	bl	0 <coda_dynamic_type_delete>
     3d8:	mvn	r3, #0
     3dc:	b	8bc <coda_mem_type_update+0x674>
     3e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     3e4:	ldr	r3, [r3]
     3e8:	mov	r1, r3
     3ec:	ldr	r0, [fp, #-12]
     3f0:	bl	1a04 <coda_mem_array_add_element>
     3f4:	mov	r3, r0
     3f8:	cmp	r3, #0
     3fc:	beq	410 <coda_mem_type_update+0x1c8>
     400:	ldr	r0, [fp, #-12]
     404:	bl	0 <coda_dynamic_type_delete>
     408:	mvn	r3, #0
     40c:	b	8bc <coda_mem_type_update+0x674>
     410:	ldr	r3, [fp, #-24]	; 0xffffffe8
     414:	ldr	r2, [fp, #-12]
     418:	str	r2, [r3]
     41c:	ldr	r1, [fp, #-28]	; 0xffffffe4
     420:	ldr	r0, [fp, #-24]	; 0xffffffe8
     424:	bl	248 <coda_mem_type_update>
     428:	mov	r3, r0
     42c:	b	8bc <coda_mem_type_update+0x674>
     430:	ldr	r3, [fp, #-24]	; 0xffffffe8
     434:	ldr	r3, [r3]
     438:	ldr	r3, [r3, #4]
     43c:	ldr	r3, [r3, #8]
     440:	cmp	r3, #0
     444:	bne	524 <coda_mem_type_update+0x2dc>
     448:	ldr	r3, [fp, #-28]	; 0xffffffe4
     44c:	ldr	r3, [r3, #8]
     450:	cmp	r3, #4
     454:	bne	524 <coda_mem_type_update+0x2dc>
     458:	ldr	r3, [fp, #-24]	; 0xffffffe8
     45c:	ldr	r3, [r3]
     460:	ldr	r3, [r3, #4]
     464:	ldr	r3, [r3]
     468:	cmp	r3, #2
     46c:	beq	490 <coda_mem_type_update+0x248>
     470:	movw	r3, #0
     474:	movt	r3, #0
     478:	mov	r2, #141	; 0x8d
     47c:	movw	r1, #0
     480:	movt	r1, #0
     484:	movw	r0, #0
     488:	movt	r0, #0
     48c:	bl	0 <__assert_fail>
     490:	ldr	r3, [fp, #-24]	; 0xffffffe8
     494:	ldr	r3, [r3]
     498:	ldr	r3, [r3, #4]
     49c:	ldr	r3, [r3, #48]	; 0x30
     4a0:	cmp	r3, #0
     4a4:	beq	4c8 <coda_mem_type_update+0x280>
     4a8:	movw	r3, #0
     4ac:	movt	r3, #0
     4b0:	mov	r2, #142	; 0x8e
     4b4:	movw	r1, #0
     4b8:	movt	r1, #0
     4bc:	movw	r0, #0
     4c0:	movt	r0, #0
     4c4:	bl	0 <__assert_fail>
     4c8:	mov	r3, #0
     4cc:	mov	r2, #0
     4d0:	mov	r1, #0
     4d4:	ldr	r0, [fp, #-28]	; 0xffffffe4
     4d8:	bl	2a94 <coda_mem_string_new>
     4dc:	str	r0, [fp, #-12]
     4e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     4e4:	ldr	r3, [r3]
     4e8:	ldr	r2, [r3, #12]
     4ec:	ldr	r3, [fp, #-12]
     4f0:	str	r2, [r3, #12]
     4f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     4f8:	ldr	r3, [r3]
     4fc:	mov	r2, #0
     500:	str	r2, [r3, #12]
     504:	ldr	r3, [fp, #-24]	; 0xffffffe8
     508:	ldr	r3, [r3]
     50c:	mov	r0, r3
     510:	bl	0 <coda_dynamic_type_delete>
     514:	ldr	r3, [fp, #-24]	; 0xffffffe8
     518:	ldr	r2, [fp, #-12]
     51c:	str	r2, [r3]
     520:	b	544 <coda_mem_type_update+0x2fc>
     524:	movw	r3, #0
     528:	movt	r3, #0
     52c:	mov	r2, #153	; 0x99
     530:	movw	r1, #0
     534:	movt	r1, #0
     538:	movw	r0, #0
     53c:	movt	r0, #0
     540:	bl	0 <__assert_fail>
     544:	ldr	r3, [fp, #-24]	; 0xffffffe8
     548:	ldr	r3, [r3]
     54c:	str	r3, [fp, #-12]
     550:	ldr	r3, [fp, #-12]
     554:	ldr	r3, [r3, #8]
     558:	cmp	r3, #3
     55c:	ldrls	pc, [pc, r3, lsl #2]
     560:	b	814 <coda_mem_type_update+0x5cc>
     564:	.word	0x00000574
     568:	.word	0x0000076c
     56c:	.word	0x00000814
     570:	.word	0x000007dc
     574:	ldr	r3, [fp, #-12]
     578:	str	r3, [fp, #-16]
     57c:	ldr	r3, [fp, #-16]
     580:	ldr	r2, [r3, #16]
     584:	ldr	r3, [fp, #-16]
     588:	ldr	r3, [r3, #4]
     58c:	ldr	r3, [r3, #48]	; 0x30
     590:	cmp	r2, r3
     594:	bge	674 <coda_mem_type_update+0x42c>
     598:	ldr	r3, [fp, #-16]
     59c:	ldr	r2, [r3, #20]
     5a0:	ldr	r3, [fp, #-16]
     5a4:	ldr	r3, [r3, #4]
     5a8:	ldr	r3, [r3, #48]	; 0x30
     5ac:	lsl	r3, r3, #2
     5b0:	mov	r1, r3
     5b4:	mov	r0, r2
     5b8:	bl	0 <realloc>
     5bc:	str	r0, [fp, #-20]	; 0xffffffec
     5c0:	ldr	r3, [fp, #-20]	; 0xffffffec
     5c4:	cmp	r3, #0
     5c8:	bne	604 <coda_mem_type_update+0x3bc>
     5cc:	ldr	r3, [fp, #-16]
     5d0:	ldr	r3, [r3, #4]
     5d4:	ldr	r3, [r3, #48]	; 0x30
     5d8:	lsl	r2, r3, #2
     5dc:	mov	r3, #177	; 0xb1
     5e0:	str	r3, [sp]
     5e4:	movw	r3, #0
     5e8:	movt	r3, #0
     5ec:	movw	r1, #0
     5f0:	movt	r1, #0
     5f4:	mvn	r0, #0
     5f8:	bl	0 <coda_set_error>
     5fc:	mvn	r3, #0
     600:	b	8bc <coda_mem_type_update+0x674>
     604:	ldr	r3, [fp, #-16]
     608:	ldr	r2, [fp, #-20]	; 0xffffffec
     60c:	str	r2, [r3, #20]
     610:	ldr	r3, [fp, #-16]
     614:	ldr	r3, [r3, #16]
     618:	str	r3, [fp, #-8]
     61c:	b	648 <coda_mem_type_update+0x400>
     620:	ldr	r3, [fp, #-16]
     624:	ldr	r2, [r3, #20]
     628:	ldr	r3, [fp, #-8]
     62c:	lsl	r3, r3, #2
     630:	add	r3, r2, r3
     634:	mov	r2, #0
     638:	str	r2, [r3]
     63c:	ldr	r3, [fp, #-8]
     640:	add	r3, r3, #1
     644:	str	r3, [fp, #-8]
     648:	ldr	r3, [fp, #-16]
     64c:	ldr	r3, [r3, #4]
     650:	ldr	r3, [r3, #48]	; 0x30
     654:	ldr	r2, [fp, #-8]
     658:	cmp	r2, r3
     65c:	blt	620 <coda_mem_type_update+0x3d8>
     660:	ldr	r3, [fp, #-16]
     664:	ldr	r3, [r3, #4]
     668:	ldr	r2, [r3, #48]	; 0x30
     66c:	ldr	r3, [fp, #-16]
     670:	str	r2, [r3, #16]
     674:	mov	r3, #0
     678:	str	r3, [fp, #-8]
     67c:	b	74c <coda_mem_type_update+0x504>
     680:	ldr	r3, [fp, #-16]
     684:	ldr	r2, [r3, #20]
     688:	ldr	r3, [fp, #-8]
     68c:	lsl	r3, r3, #2
     690:	add	r3, r2, r3
     694:	ldr	r3, [r3]
     698:	cmp	r3, #0
     69c:	bne	6f0 <coda_mem_type_update+0x4a8>
     6a0:	ldr	r3, [fp, #-16]
     6a4:	ldr	r3, [r3, #4]
     6a8:	ldr	r2, [r3, #52]	; 0x34
     6ac:	ldr	r3, [fp, #-8]
     6b0:	lsl	r3, r3, #2
     6b4:	add	r3, r2, r3
     6b8:	ldr	r3, [r3]
     6bc:	ldrb	r3, [r3, #16]
     6c0:	cmp	r3, #0
     6c4:	bne	740 <coda_mem_type_update+0x4f8>
     6c8:	ldr	r3, [fp, #-16]
     6cc:	ldr	r3, [r3, #4]
     6d0:	ldr	r2, [r3, #52]	; 0x34
     6d4:	ldr	r3, [fp, #-8]
     6d8:	lsl	r3, r3, #2
     6dc:	add	r3, r2, r3
     6e0:	ldr	r3, [r3]
     6e4:	mov	r2, #1
     6e8:	strb	r2, [r3, #16]
     6ec:	b	740 <coda_mem_type_update+0x4f8>
     6f0:	ldr	r3, [fp, #-16]
     6f4:	ldr	r2, [r3, #20]
     6f8:	ldr	r3, [fp, #-8]
     6fc:	lsl	r3, r3, #2
     700:	add	r0, r2, r3
     704:	ldr	r3, [fp, #-16]
     708:	ldr	r3, [r3, #4]
     70c:	ldr	r2, [r3, #52]	; 0x34
     710:	ldr	r3, [fp, #-8]
     714:	lsl	r3, r3, #2
     718:	add	r3, r2, r3
     71c:	ldr	r3, [r3]
     720:	ldr	r3, [r3, #8]
     724:	mov	r1, r3
     728:	bl	248 <coda_mem_type_update>
     72c:	mov	r3, r0
     730:	cmp	r3, #0
     734:	beq	740 <coda_mem_type_update+0x4f8>
     738:	mvn	r3, #0
     73c:	b	8bc <coda_mem_type_update+0x674>
     740:	ldr	r3, [fp, #-8]
     744:	add	r3, r3, #1
     748:	str	r3, [fp, #-8]
     74c:	ldr	r3, [fp, #-16]
     750:	ldr	r3, [r3, #4]
     754:	ldr	r3, [r3, #48]	; 0x30
     758:	ldr	r2, [fp, #-8]
     75c:	cmp	r2, r3
     760:	blt	680 <coda_mem_type_update+0x438>
     764:	nop	{0}
     768:	b	814 <coda_mem_type_update+0x5cc>
     76c:	mov	r3, #0
     770:	str	r3, [fp, #-8]
     774:	b	7c4 <coda_mem_type_update+0x57c>
     778:	ldr	r3, [fp, #-12]
     77c:	ldr	r2, [r3, #20]
     780:	ldr	r3, [fp, #-8]
     784:	lsl	r3, r3, #2
     788:	add	r2, r2, r3
     78c:	ldr	r3, [fp, #-12]
     790:	ldr	r3, [r3, #4]
     794:	ldr	r3, [r3, #40]	; 0x28
     798:	mov	r1, r3
     79c:	mov	r0, r2
     7a0:	bl	248 <coda_mem_type_update>
     7a4:	mov	r3, r0
     7a8:	cmp	r3, #0
     7ac:	beq	7b8 <coda_mem_type_update+0x570>
     7b0:	mvn	r3, #0
     7b4:	b	8bc <coda_mem_type_update+0x674>
     7b8:	ldr	r3, [fp, #-8]
     7bc:	add	r3, r3, #1
     7c0:	str	r3, [fp, #-8]
     7c4:	ldr	r3, [fp, #-12]
     7c8:	ldr	r3, [r3, #16]
     7cc:	ldr	r2, [fp, #-8]
     7d0:	cmp	r2, r3
     7d4:	blt	778 <coda_mem_type_update+0x530>
     7d8:	b	814 <coda_mem_type_update+0x5cc>
     7dc:	ldr	r3, [fp, #-12]
     7e0:	add	r2, r3, #16
     7e4:	ldr	r3, [fp, #-12]
     7e8:	ldr	r3, [r3, #4]
     7ec:	ldr	r3, [r3, #44]	; 0x2c
     7f0:	mov	r1, r3
     7f4:	mov	r0, r2
     7f8:	bl	248 <coda_mem_type_update>
     7fc:	mov	r3, r0
     800:	cmp	r3, #0
     804:	beq	810 <coda_mem_type_update+0x5c8>
     808:	mvn	r3, #0
     80c:	b	8bc <coda_mem_type_update+0x674>
     810:	nop	{0}
     814:	ldr	r3, [fp, #-12]
     818:	ldr	r3, [r3, #12]
     81c:	cmp	r3, #0
     820:	bne	874 <coda_mem_type_update+0x62c>
     824:	ldr	r3, [fp, #-12]
     828:	ldr	r3, [r3, #4]
     82c:	ldr	r3, [r3, #36]	; 0x24
     830:	cmp	r3, #0
     834:	beq	874 <coda_mem_type_update+0x62c>
     838:	ldr	r3, [fp, #-12]
     83c:	ldr	r3, [r3, #4]
     840:	ldr	r3, [r3, #36]	; 0x24
     844:	mov	r1, #0
     848:	mov	r0, r3
     84c:	bl	fa8 <coda_mem_record_new>
     850:	mov	r2, r0
     854:	ldr	r3, [fp, #-12]
     858:	str	r2, [r3, #12]
     85c:	ldr	r3, [fp, #-12]
     860:	ldr	r3, [r3, #12]
     864:	cmp	r3, #0
     868:	bne	874 <coda_mem_type_update+0x62c>
     86c:	mvn	r3, #0
     870:	b	8bc <coda_mem_type_update+0x674>
     874:	ldr	r3, [fp, #-12]
     878:	ldr	r3, [r3, #12]
     87c:	cmp	r3, #0
     880:	beq	8b8 <coda_mem_type_update+0x670>
     884:	ldr	r3, [fp, #-12]
     888:	add	r2, r3, #12
     88c:	ldr	r3, [fp, #-12]
     890:	ldr	r3, [r3, #4]
     894:	ldr	r3, [r3, #36]	; 0x24
     898:	mov	r1, r3
     89c:	mov	r0, r2
     8a0:	bl	248 <coda_mem_type_update>
     8a4:	mov	r3, r0
     8a8:	cmp	r3, #0
     8ac:	beq	8b8 <coda_mem_type_update+0x670>
     8b0:	mvn	r3, #0
     8b4:	b	8bc <coda_mem_type_update+0x674>
     8b8:	mov	r3, #0
     8bc:	mov	r0, r3
     8c0:	sub	sp, fp, #4
     8c4:	ldr	fp, [sp]
     8c8:	add	sp, sp, #4
     8cc:	pop	{pc}		; (ldr pc, [sp], #4)

000008d0 <create_attributes_record>:
     8d0:	str	fp, [sp, #-8]!
     8d4:	str	lr, [sp, #4]
     8d8:	add	fp, sp, #4
     8dc:	sub	sp, sp, #8
     8e0:	str	r0, [fp, #-8]
     8e4:	ldr	r3, [fp, #-8]
     8e8:	ldr	r3, [r3, #4]
     8ec:	ldr	r3, [r3, #36]	; 0x24
     8f0:	cmp	r3, #0
     8f4:	beq	934 <create_attributes_record+0x64>
     8f8:	ldr	r3, [fp, #-8]
     8fc:	ldr	r3, [r3, #4]
     900:	ldr	r3, [r3, #36]	; 0x24
     904:	mov	r1, #0
     908:	mov	r0, r3
     90c:	bl	fa8 <coda_mem_record_new>
     910:	mov	r2, r0
     914:	ldr	r3, [fp, #-8]
     918:	str	r2, [r3, #12]
     91c:	ldr	r3, [fp, #-8]
     920:	ldr	r3, [r3, #12]
     924:	cmp	r3, #0
     928:	bne	934 <create_attributes_record+0x64>
     92c:	mvn	r3, #0
     930:	b	938 <create_attributes_record+0x68>
     934:	mov	r3, #0
     938:	mov	r0, r3
     93c:	sub	sp, fp, #4
     940:	ldr	fp, [sp]
     944:	add	sp, sp, #4
     948:	pop	{pc}		; (ldr pc, [sp], #4)

0000094c <coda_mem_type_add_attribute>:
     94c:	str	r4, [sp, #-12]!
     950:	str	fp, [sp, #4]
     954:	str	lr, [sp, #8]
     958:	add	fp, sp, #8
     95c:	sub	sp, sp, #44	; 0x2c
     960:	str	r0, [fp, #-32]	; 0xffffffe0
     964:	str	r1, [fp, #-36]	; 0xffffffdc
     968:	str	r2, [fp, #-40]	; 0xffffffd8
     96c:	str	r3, [fp, #-44]	; 0xffffffd4
     970:	mvn	r3, #0
     974:	str	r3, [fp, #-16]
     978:	ldr	r3, [fp, #-32]	; 0xffffffe0
     97c:	cmp	r3, #0
     980:	bne	9a8 <coda_mem_type_add_attribute+0x5c>
     984:	mov	r3, #272	; 0x110
     988:	movw	r2, #0
     98c:	movt	r2, #0
     990:	movw	r1, #0
     994:	movt	r1, #0
     998:	mvn	r0, #99	; 0x63
     99c:	bl	0 <coda_set_error>
     9a0:	mvn	r3, #0
     9a4:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     9a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9ac:	cmp	r3, #0
     9b0:	bne	9d8 <coda_mem_type_add_attribute+0x8c>
     9b4:	movw	r3, #277	; 0x115
     9b8:	movw	r2, #0
     9bc:	movt	r2, #0
     9c0:	movw	r1, #0
     9c4:	movt	r1, #0
     9c8:	mvn	r0, #99	; 0x63
     9cc:	bl	0 <coda_set_error>
     9d0:	mvn	r3, #0
     9d4:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     9d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
     9dc:	cmp	r3, #0
     9e0:	bne	a08 <coda_mem_type_add_attribute+0xbc>
     9e4:	movw	r3, #282	; 0x11a
     9e8:	movw	r2, #0
     9ec:	movt	r2, #0
     9f0:	movw	r1, #0
     9f4:	movt	r1, #0
     9f8:	mvn	r0, #99	; 0x63
     9fc:	bl	0 <coda_set_error>
     a00:	mvn	r3, #0
     a04:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a0c:	ldr	r3, [r3, #12]
     a10:	cmp	r3, #0
     a14:	bne	ae0 <coda_mem_type_add_attribute+0x194>
     a18:	ldr	r3, [fp, #-44]	; 0xffffffd4
     a1c:	cmp	r3, #0
     a20:	beq	ab4 <coda_mem_type_add_attribute+0x168>
     a24:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a28:	ldr	r3, [r3, #4]
     a2c:	ldr	r3, [r3, #36]	; 0x24
     a30:	cmp	r3, #0
     a34:	bne	a78 <coda_mem_type_add_attribute+0x12c>
     a38:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a3c:	ldr	r3, [r3, #4]
     a40:	ldr	r2, [r3]
     a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a48:	ldr	r4, [r3, #4]
     a4c:	mov	r0, r2
     a50:	bl	0 <coda_type_record_new>
     a54:	mov	r3, r0
     a58:	str	r3, [r4, #36]	; 0x24
     a5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a60:	ldr	r3, [r3, #4]
     a64:	ldr	r3, [r3, #36]	; 0x24
     a68:	cmp	r3, #0
     a6c:	bne	a78 <coda_mem_type_add_attribute+0x12c>
     a70:	mvn	r3, #0
     a74:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a7c:	ldr	r3, [r3, #4]
     a80:	ldr	r3, [r3, #36]	; 0x24
     a84:	mov	r1, #0
     a88:	mov	r0, r3
     a8c:	bl	fa8 <coda_mem_record_new>
     a90:	mov	r2, r0
     a94:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a98:	str	r2, [r3, #12]
     a9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     aa0:	ldr	r3, [r3, #12]
     aa4:	cmp	r3, #0
     aa8:	bne	b58 <coda_mem_type_add_attribute+0x20c>
     aac:	mvn	r3, #0
     ab0:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     ab4:	movw	r3, #307	; 0x133
     ab8:	str	r3, [sp]
     abc:	movw	r3, #0
     ac0:	movt	r3, #0
     ac4:	ldr	r2, [fp, #-36]	; 0xffffffdc
     ac8:	movw	r1, #0
     acc:	movt	r1, #0
     ad0:	mvn	r0, #101	; 0x65
     ad4:	bl	0 <coda_set_error>
     ad8:	mvn	r3, #0
     adc:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     ae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ae4:	ldr	r3, [r3, #12]
     ae8:	ldr	r3, [r3]
     aec:	cmp	r3, #100	; 0x64
     af0:	beq	b18 <coda_mem_type_add_attribute+0x1cc>
     af4:	movw	r3, #315	; 0x13b
     af8:	movw	r2, #0
     afc:	movt	r2, #0
     b00:	movw	r1, #0
     b04:	movt	r1, #0
     b08:	mvn	r0, #99	; 0x63
     b0c:	bl	0 <coda_set_error>
     b10:	mvn	r3, #0
     b14:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     b18:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b1c:	ldr	r3, [r3, #4]
     b20:	ldr	r2, [r3, #36]	; 0x24
     b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b28:	ldr	r3, [r3, #12]
     b2c:	ldr	r3, [r3, #4]
     b30:	cmp	r2, r3
     b34:	beq	b58 <coda_mem_type_add_attribute+0x20c>
     b38:	movw	r3, #0
     b3c:	movt	r3, #0
     b40:	movw	r2, #318	; 0x13e
     b44:	movw	r1, #0
     b48:	movt	r1, #0
     b4c:	movw	r0, #0
     b50:	movt	r0, #0
     b54:	bl	0 <__assert_fail>
     b58:	ldr	r3, [fp, #-32]	; 0xffffffe0
     b5c:	ldr	r3, [r3, #12]
     b60:	str	r3, [fp, #-24]	; 0xffffffe8
     b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b68:	ldr	r3, [r3, #4]
     b6c:	ldr	r3, [r3, #44]	; 0x2c
     b70:	ldr	r1, [fp, #-36]	; 0xffffffdc
     b74:	mov	r0, r3
     b78:	bl	0 <coda_hashtable_get_index_from_name>
     b7c:	str	r0, [fp, #-16]
     b80:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b84:	cmp	r3, #0
     b88:	beq	d0c <coda_mem_type_add_attribute+0x3c0>
     b8c:	ldr	r3, [fp, #-16]
     b90:	cmp	r3, #0
     b94:	blt	bcc <coda_mem_type_add_attribute+0x280>
     b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b9c:	ldr	r3, [r3, #16]
     ba0:	ldr	r2, [fp, #-16]
     ba4:	cmp	r2, r3
     ba8:	bge	c10 <coda_mem_type_add_attribute+0x2c4>
     bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bb0:	ldr	r2, [r3, #20]
     bb4:	ldr	r3, [fp, #-16]
     bb8:	lsl	r3, r3, #2
     bbc:	add	r3, r2, r3
     bc0:	ldr	r3, [r3]
     bc4:	cmp	r3, #0
     bc8:	beq	c10 <coda_mem_type_add_attribute+0x2c4>
     bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     bd0:	ldr	r0, [r3, #4]
     bd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
     bd8:	ldr	r3, [r3, #4]
     bdc:	mov	r2, r3
     be0:	ldr	r1, [fp, #-36]	; 0xffffffdc
     be4:	bl	0 <coda_type_record_create_field>
     be8:	mov	r3, r0
     bec:	cmp	r3, #0
     bf0:	beq	bfc <coda_mem_type_add_attribute+0x2b0>
     bf4:	mvn	r3, #0
     bf8:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c00:	ldr	r3, [r3, #4]
     c04:	ldr	r3, [r3, #48]	; 0x30
     c08:	sub	r3, r3, #1
     c0c:	str	r3, [fp, #-16]
     c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c14:	ldr	r2, [r3, #16]
     c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c1c:	ldr	r3, [r3, #4]
     c20:	ldr	r3, [r3, #48]	; 0x30
     c24:	cmp	r2, r3
     c28:	bge	dec <coda_mem_type_add_attribute+0x4a0>
     c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c30:	ldr	r2, [r3, #20]
     c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c38:	ldr	r3, [r3, #4]
     c3c:	ldr	r3, [r3, #48]	; 0x30
     c40:	lsl	r3, r3, #2
     c44:	mov	r1, r3
     c48:	mov	r0, r2
     c4c:	bl	0 <realloc>
     c50:	str	r0, [fp, #-28]	; 0xffffffe4
     c54:	ldr	r3, [fp, #-28]	; 0xffffffe4
     c58:	cmp	r3, #0
     c5c:	bne	c98 <coda_mem_type_add_attribute+0x34c>
     c60:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c64:	ldr	r3, [r3, #4]
     c68:	ldr	r3, [r3, #48]	; 0x30
     c6c:	lsl	r2, r3, #2
     c70:	mov	r3, #344	; 0x158
     c74:	str	r3, [sp]
     c78:	movw	r3, #0
     c7c:	movt	r3, #0
     c80:	movw	r1, #0
     c84:	movt	r1, #0
     c88:	mvn	r0, #0
     c8c:	bl	0 <coda_set_error>
     c90:	mvn	r3, #0
     c94:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
     ca0:	str	r2, [r3, #20]
     ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ca8:	ldr	r3, [r3, #16]
     cac:	str	r3, [fp, #-20]	; 0xffffffec
     cb0:	b	cdc <coda_mem_type_add_attribute+0x390>
     cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cb8:	ldr	r2, [r3, #20]
     cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
     cc0:	lsl	r3, r3, #2
     cc4:	add	r3, r2, r3
     cc8:	mov	r2, #0
     ccc:	str	r2, [r3]
     cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
     cd4:	add	r3, r3, #1
     cd8:	str	r3, [fp, #-20]	; 0xffffffec
     cdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ce0:	ldr	r3, [r3, #4]
     ce4:	ldr	r3, [r3, #48]	; 0x30
     ce8:	ldr	r2, [fp, #-20]	; 0xffffffec
     cec:	cmp	r2, r3
     cf0:	blt	cb4 <coda_mem_type_add_attribute+0x368>
     cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     cf8:	ldr	r3, [r3, #4]
     cfc:	ldr	r2, [r3, #48]	; 0x30
     d00:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d04:	str	r2, [r3, #16]
     d08:	b	dec <coda_mem_type_add_attribute+0x4a0>
     d0c:	ldr	r3, [fp, #-16]
     d10:	cmp	r3, #0
     d14:	bge	d44 <coda_mem_type_add_attribute+0x3f8>
     d18:	movw	r3, #361	; 0x169
     d1c:	str	r3, [sp]
     d20:	movw	r3, #0
     d24:	movt	r3, #0
     d28:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d2c:	movw	r1, #0
     d30:	movt	r1, #0
     d34:	mvn	r0, #101	; 0x65
     d38:	bl	0 <coda_set_error>
     d3c:	mvn	r3, #0
     d40:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d48:	ldr	r2, [r3, #20]
     d4c:	ldr	r3, [fp, #-16]
     d50:	lsl	r3, r3, #2
     d54:	add	r3, r2, r3
     d58:	ldr	r3, [r3]
     d5c:	cmp	r3, #0
     d60:	beq	d90 <coda_mem_type_add_attribute+0x444>
     d64:	movw	r3, #367	; 0x16f
     d68:	str	r3, [sp]
     d6c:	movw	r3, #0
     d70:	movt	r3, #0
     d74:	ldr	r2, [fp, #-36]	; 0xffffffdc
     d78:	movw	r1, #0
     d7c:	movt	r1, #0
     d80:	mvn	r0, #99	; 0x63
     d84:	bl	0 <coda_set_error>
     d88:	mvn	r3, #0
     d8c:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d94:	ldr	r3, [r3, #4]
     d98:	ldr	r2, [r3, #52]	; 0x34
     d9c:	ldr	r3, [fp, #-16]
     da0:	lsl	r3, r3, #2
     da4:	add	r3, r2, r3
     da8:	ldr	r3, [r3]
     dac:	ldr	r2, [r3, #8]
     db0:	ldr	r3, [fp, #-40]	; 0xffffffd8
     db4:	ldr	r3, [r3, #4]
     db8:	cmp	r2, r3
     dbc:	beq	dec <coda_mem_type_add_attribute+0x4a0>
     dc0:	movw	r3, #373	; 0x175
     dc4:	str	r3, [sp]
     dc8:	movw	r3, #0
     dcc:	movt	r3, #0
     dd0:	ldr	r2, [fp, #-36]	; 0xffffffdc
     dd4:	movw	r1, #0
     dd8:	movt	r1, #0
     ddc:	mvn	r0, #99	; 0x63
     de0:	bl	0 <coda_set_error>
     de4:	mvn	r3, #0
     de8:	b	e0c <coda_mem_type_add_attribute+0x4c0>
     dec:	ldr	r3, [fp, #-24]	; 0xffffffe8
     df0:	ldr	r2, [r3, #20]
     df4:	ldr	r3, [fp, #-16]
     df8:	lsl	r3, r3, #2
     dfc:	add	r3, r2, r3
     e00:	ldr	r2, [fp, #-40]	; 0xffffffd8
     e04:	str	r2, [r3]
     e08:	mov	r3, #0
     e0c:	mov	r0, r3
     e10:	sub	sp, fp, #8
     e14:	ldr	r4, [sp]
     e18:	ldr	fp, [sp, #4]
     e1c:	add	sp, sp, #8
     e20:	pop	{pc}		; (ldr pc, [sp], #4)

00000e24 <coda_mem_type_set_attributes>:
     e24:	str	fp, [sp, #-8]!
     e28:	str	lr, [sp, #4]
     e2c:	add	fp, sp, #4
     e30:	sub	sp, sp, #16
     e34:	str	r0, [fp, #-8]
     e38:	str	r1, [fp, #-12]
     e3c:	str	r2, [fp, #-16]
     e40:	ldr	r3, [fp, #-8]
     e44:	cmp	r3, #0
     e48:	bne	e70 <coda_mem_type_set_attributes+0x4c>
     e4c:	movw	r3, #386	; 0x182
     e50:	movw	r2, #0
     e54:	movt	r2, #0
     e58:	movw	r1, #0
     e5c:	movt	r1, #0
     e60:	mvn	r0, #99	; 0x63
     e64:	bl	0 <coda_set_error>
     e68:	mvn	r3, #0
     e6c:	b	f94 <coda_mem_type_set_attributes+0x170>
     e70:	ldr	r3, [fp, #-12]
     e74:	cmp	r3, #0
     e78:	bne	ea0 <coda_mem_type_set_attributes+0x7c>
     e7c:	movw	r3, #391	; 0x187
     e80:	movw	r2, #0
     e84:	movt	r2, #0
     e88:	movw	r1, #0
     e8c:	movt	r1, #0
     e90:	mvn	r0, #99	; 0x63
     e94:	bl	0 <coda_set_error>
     e98:	mvn	r3, #0
     e9c:	b	f94 <coda_mem_type_set_attributes+0x170>
     ea0:	ldr	r3, [fp, #-8]
     ea4:	ldr	r3, [r3, #12]
     ea8:	cmp	r3, #0
     eac:	beq	ed4 <coda_mem_type_set_attributes+0xb0>
     eb0:	mov	r3, #396	; 0x18c
     eb4:	movw	r2, #0
     eb8:	movt	r2, #0
     ebc:	movw	r1, #0
     ec0:	movt	r1, #0
     ec4:	mvn	r0, #99	; 0x63
     ec8:	bl	0 <coda_set_error>
     ecc:	mvn	r3, #0
     ed0:	b	f94 <coda_mem_type_set_attributes+0x170>
     ed4:	ldr	r3, [fp, #-16]
     ed8:	cmp	r3, #0
     edc:	beq	f44 <coda_mem_type_set_attributes+0x120>
     ee0:	ldr	r3, [fp, #-12]
     ee4:	ldr	r3, [r3, #4]
     ee8:	ldr	r3, [r3, #8]
     eec:	cmp	r3, #0
     ef0:	beq	f14 <coda_mem_type_set_attributes+0xf0>
     ef4:	movw	r3, #0
     ef8:	movt	r3, #0
     efc:	movw	r2, #401	; 0x191
     f00:	movw	r1, #0
     f04:	movt	r1, #0
     f08:	movw	r0, #0
     f0c:	movt	r0, #0
     f10:	bl	0 <__assert_fail>
     f14:	ldr	r3, [fp, #-8]
     f18:	ldr	r2, [r3, #4]
     f1c:	ldr	r3, [fp, #-12]
     f20:	ldr	r3, [r3, #4]
     f24:	mov	r1, r3
     f28:	mov	r0, r2
     f2c:	bl	0 <coda_type_set_attributes>
     f30:	mov	r3, r0
     f34:	cmp	r3, #0
     f38:	beq	f84 <coda_mem_type_set_attributes+0x160>
     f3c:	mvn	r3, #0
     f40:	b	f94 <coda_mem_type_set_attributes+0x170>
     f44:	ldr	r3, [fp, #-8]
     f48:	ldr	r3, [r3, #4]
     f4c:	ldr	r2, [r3, #36]	; 0x24
     f50:	ldr	r3, [fp, #-12]
     f54:	ldr	r3, [r3, #4]
     f58:	cmp	r2, r3
     f5c:	beq	f84 <coda_mem_type_set_attributes+0x160>
     f60:	mov	r3, #412	; 0x19c
     f64:	movw	r2, #0
     f68:	movt	r2, #0
     f6c:	movw	r1, #0
     f70:	movt	r1, #0
     f74:	mvn	r0, #99	; 0x63
     f78:	bl	0 <coda_set_error>
     f7c:	mvn	r3, #0
     f80:	b	f94 <coda_mem_type_set_attributes+0x170>
     f84:	ldr	r3, [fp, #-8]
     f88:	ldr	r2, [fp, #-12]
     f8c:	str	r2, [r3, #12]
     f90:	mov	r3, #0
     f94:	mov	r0, r3
     f98:	sub	sp, fp, #4
     f9c:	ldr	fp, [sp]
     fa0:	add	sp, sp, #4
     fa4:	pop	{pc}		; (ldr pc, [sp], #4)

00000fa8 <coda_mem_record_new>:
     fa8:	str	fp, [sp, #-8]!
     fac:	str	lr, [sp, #4]
     fb0:	add	fp, sp, #4
     fb4:	sub	sp, sp, #24
     fb8:	str	r0, [fp, #-16]
     fbc:	str	r1, [fp, #-20]	; 0xffffffec
     fc0:	ldr	r3, [fp, #-16]
     fc4:	cmp	r3, #0
     fc8:	bne	ff0 <coda_mem_record_new+0x48>
     fcc:	mov	r3, #428	; 0x1ac
     fd0:	movw	r2, #0
     fd4:	movt	r2, #0
     fd8:	movw	r1, #0
     fdc:	movt	r1, #0
     fe0:	mvn	r0, #99	; 0x63
     fe4:	bl	0 <coda_set_error>
     fe8:	mov	r3, #0
     fec:	b	11dc <coda_mem_record_new+0x234>
     ff0:	ldr	r3, [fp, #-16]
     ff4:	ldr	r3, [r3, #64]	; 0x40
     ff8:	cmp	r3, #0
     ffc:	beq	1028 <coda_mem_record_new+0x80>
    1000:	ldr	r3, [fp, #-16]
    1004:	ldr	r3, [r3, #68]	; 0x44
    1008:	cmp	r3, #0
    100c:	beq	1028 <coda_mem_record_new+0x80>
    1010:	movw	r1, #0
    1014:	movt	r1, #0
    1018:	mvn	r0, #99	; 0x63
    101c:	bl	0 <coda_set_error>
    1020:	mov	r3, #0
    1024:	b	11dc <coda_mem_record_new+0x234>
    1028:	mov	r0, #24
    102c:	bl	0 <malloc>
    1030:	mov	r3, r0
    1034:	str	r3, [fp, #-12]
    1038:	ldr	r3, [fp, #-12]
    103c:	cmp	r3, #0
    1040:	bne	1070 <coda_mem_record_new+0xc8>
    1044:	movw	r3, #442	; 0x1ba
    1048:	str	r3, [sp]
    104c:	movw	r3, #0
    1050:	movt	r3, #0
    1054:	mov	r2, #24
    1058:	movw	r1, #0
    105c:	movt	r1, #0
    1060:	mvn	r0, #0
    1064:	bl	0 <coda_set_error>
    1068:	mov	r3, #0
    106c:	b	11dc <coda_mem_record_new+0x234>
    1070:	ldr	r3, [fp, #-12]
    1074:	mov	r2, #100	; 0x64
    1078:	str	r2, [r3]
    107c:	ldr	r3, [fp, #-12]
    1080:	ldr	r2, [fp, #-16]
    1084:	str	r2, [r3, #4]
    1088:	ldr	r3, [fp, #-16]
    108c:	ldr	r3, [r3, #4]
    1090:	add	r2, r3, #1
    1094:	ldr	r3, [fp, #-16]
    1098:	str	r2, [r3, #4]
    109c:	ldr	r3, [fp, #-12]
    10a0:	mov	r2, #0
    10a4:	str	r2, [r3, #8]
    10a8:	ldr	r3, [fp, #-12]
    10ac:	ldr	r2, [fp, #-20]	; 0xffffffec
    10b0:	str	r2, [r3, #12]
    10b4:	ldr	r3, [fp, #-12]
    10b8:	mov	r2, #0
    10bc:	str	r2, [r3, #16]
    10c0:	ldr	r3, [fp, #-12]
    10c4:	mov	r2, #0
    10c8:	str	r2, [r3, #20]
    10cc:	ldr	r3, [fp, #-12]
    10d0:	ldr	r3, [r3, #12]
    10d4:	cmp	r3, #0
    10d8:	bne	1100 <coda_mem_record_new+0x158>
    10dc:	ldr	r0, [fp, #-12]
    10e0:	bl	8d0 <create_attributes_record>
    10e4:	mov	r3, r0
    10e8:	cmp	r3, #0
    10ec:	beq	1100 <coda_mem_record_new+0x158>
    10f0:	ldr	r0, [fp, #-12]
    10f4:	bl	0 <coda_mem_type_delete>
    10f8:	mov	r3, #0
    10fc:	b	11dc <coda_mem_record_new+0x234>
    1100:	ldr	r3, [fp, #-16]
    1104:	ldr	r3, [r3, #48]	; 0x30
    1108:	cmp	r3, #0
    110c:	ble	11d8 <coda_mem_record_new+0x230>
    1110:	ldr	r3, [fp, #-16]
    1114:	ldr	r3, [r3, #48]	; 0x30
    1118:	lsl	r3, r3, #2
    111c:	mov	r0, r3
    1120:	bl	0 <malloc>
    1124:	mov	r3, r0
    1128:	mov	r2, r3
    112c:	ldr	r3, [fp, #-12]
    1130:	str	r2, [r3, #20]
    1134:	ldr	r3, [fp, #-12]
    1138:	ldr	r3, [r3, #20]
    113c:	cmp	r3, #0
    1140:	bne	1180 <coda_mem_record_new+0x1d8>
    1144:	ldr	r3, [fp, #-16]
    1148:	ldr	r3, [r3, #48]	; 0x30
    114c:	lsl	r2, r3, #2
    1150:	movw	r3, #469	; 0x1d5
    1154:	str	r3, [sp]
    1158:	movw	r3, #0
    115c:	movt	r3, #0
    1160:	movw	r1, #0
    1164:	movt	r1, #0
    1168:	mvn	r0, #0
    116c:	bl	0 <coda_set_error>
    1170:	ldr	r0, [fp, #-12]
    1174:	bl	0 <coda_mem_type_delete>
    1178:	mov	r3, #0
    117c:	b	11dc <coda_mem_record_new+0x234>
    1180:	mov	r3, #0
    1184:	str	r3, [fp, #-8]
    1188:	b	11b4 <coda_mem_record_new+0x20c>
    118c:	ldr	r3, [fp, #-12]
    1190:	ldr	r2, [r3, #20]
    1194:	ldr	r3, [fp, #-8]
    1198:	lsl	r3, r3, #2
    119c:	add	r3, r2, r3
    11a0:	mov	r2, #0
    11a4:	str	r2, [r3]
    11a8:	ldr	r3, [fp, #-8]
    11ac:	add	r3, r3, #1
    11b0:	str	r3, [fp, #-8]
    11b4:	ldr	r3, [fp, #-16]
    11b8:	ldr	r3, [r3, #48]	; 0x30
    11bc:	ldr	r2, [fp, #-8]
    11c0:	cmp	r2, r3
    11c4:	blt	118c <coda_mem_record_new+0x1e4>
    11c8:	ldr	r3, [fp, #-16]
    11cc:	ldr	r2, [r3, #48]	; 0x30
    11d0:	ldr	r3, [fp, #-12]
    11d4:	str	r2, [r3, #16]
    11d8:	ldr	r3, [fp, #-12]
    11dc:	mov	r0, r3
    11e0:	sub	sp, fp, #4
    11e4:	ldr	fp, [sp]
    11e8:	add	sp, sp, #4
    11ec:	pop	{pc}		; (ldr pc, [sp], #4)

000011f0 <coda_mem_record_add_field>:
    11f0:	str	fp, [sp, #-8]!
    11f4:	str	lr, [sp, #4]
    11f8:	add	fp, sp, #4
    11fc:	sub	sp, sp, #40	; 0x28
    1200:	str	r0, [fp, #-24]	; 0xffffffe8
    1204:	str	r1, [fp, #-28]	; 0xffffffe4
    1208:	str	r2, [fp, #-32]	; 0xffffffe0
    120c:	str	r3, [fp, #-36]	; 0xffffffdc
    1210:	mvn	r3, #0
    1214:	str	r3, [fp, #-8]
    1218:	ldr	r3, [fp, #-24]	; 0xffffffe8
    121c:	cmp	r3, #0
    1220:	bne	1248 <coda_mem_record_add_field+0x58>
    1224:	movw	r3, #491	; 0x1eb
    1228:	movw	r2, #0
    122c:	movt	r2, #0
    1230:	movw	r1, #0
    1234:	movt	r1, #0
    1238:	mvn	r0, #99	; 0x63
    123c:	bl	0 <coda_set_error>
    1240:	mvn	r3, #0
    1244:	b	14e0 <coda_mem_record_add_field+0x2f0>
    1248:	ldr	r3, [fp, #-32]	; 0xffffffe0
    124c:	cmp	r3, #0
    1250:	bne	1278 <coda_mem_record_add_field+0x88>
    1254:	mov	r3, #496	; 0x1f0
    1258:	movw	r2, #0
    125c:	movt	r2, #0
    1260:	movw	r1, #0
    1264:	movt	r1, #0
    1268:	mvn	r0, #99	; 0x63
    126c:	bl	0 <coda_set_error>
    1270:	mvn	r3, #0
    1274:	b	14e0 <coda_mem_record_add_field+0x2f0>
    1278:	ldr	r3, [fp, #-36]	; 0xffffffdc
    127c:	cmp	r3, #0
    1280:	beq	13c4 <coda_mem_record_add_field+0x1d4>
    1284:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1288:	ldr	r0, [r3, #4]
    128c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1290:	ldr	r3, [r3, #4]
    1294:	mov	r2, r3
    1298:	ldr	r1, [fp, #-28]	; 0xffffffe4
    129c:	bl	0 <coda_type_record_create_field>
    12a0:	mov	r3, r0
    12a4:	cmp	r3, #0
    12a8:	beq	12b4 <coda_mem_record_add_field+0xc4>
    12ac:	mvn	r3, #0
    12b0:	b	14e0 <coda_mem_record_add_field+0x2f0>
    12b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12b8:	ldr	r3, [r3, #4]
    12bc:	ldr	r3, [r3, #48]	; 0x30
    12c0:	sub	r3, r3, #1
    12c4:	str	r3, [fp, #-8]
    12c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12cc:	ldr	r2, [r3, #16]
    12d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12d4:	ldr	r3, [r3, #4]
    12d8:	ldr	r3, [r3, #48]	; 0x30
    12dc:	cmp	r2, r3
    12e0:	bge	14c0 <coda_mem_record_add_field+0x2d0>
    12e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12e8:	ldr	r2, [r3, #20]
    12ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
    12f0:	ldr	r3, [r3, #4]
    12f4:	ldr	r3, [r3, #48]	; 0x30
    12f8:	lsl	r3, r3, #2
    12fc:	mov	r1, r3
    1300:	mov	r0, r2
    1304:	bl	0 <realloc>
    1308:	str	r0, [fp, #-16]
    130c:	ldr	r3, [fp, #-16]
    1310:	cmp	r3, #0
    1314:	bne	1350 <coda_mem_record_add_field+0x160>
    1318:	ldr	r3, [fp, #-24]	; 0xffffffe8
    131c:	ldr	r3, [r3, #4]
    1320:	ldr	r3, [r3, #48]	; 0x30
    1324:	lsl	r2, r3, #2
    1328:	mov	r3, #516	; 0x204
    132c:	str	r3, [sp]
    1330:	movw	r3, #0
    1334:	movt	r3, #0
    1338:	movw	r1, #0
    133c:	movt	r1, #0
    1340:	mvn	r0, #0
    1344:	bl	0 <coda_set_error>
    1348:	mvn	r3, #0
    134c:	b	14e0 <coda_mem_record_add_field+0x2f0>
    1350:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1354:	ldr	r2, [fp, #-16]
    1358:	str	r2, [r3, #20]
    135c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1360:	ldr	r3, [r3, #16]
    1364:	str	r3, [fp, #-12]
    1368:	b	1394 <coda_mem_record_add_field+0x1a4>
    136c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1370:	ldr	r2, [r3, #20]
    1374:	ldr	r3, [fp, #-12]
    1378:	lsl	r3, r3, #2
    137c:	add	r3, r2, r3
    1380:	mov	r2, #0
    1384:	str	r2, [r3]
    1388:	ldr	r3, [fp, #-12]
    138c:	add	r3, r3, #1
    1390:	str	r3, [fp, #-12]
    1394:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1398:	ldr	r3, [r3, #4]
    139c:	ldr	r3, [r3, #48]	; 0x30
    13a0:	ldr	r2, [fp, #-12]
    13a4:	cmp	r2, r3
    13a8:	blt	136c <coda_mem_record_add_field+0x17c>
    13ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13b0:	ldr	r3, [r3, #4]
    13b4:	ldr	r2, [r3, #48]	; 0x30
    13b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13bc:	str	r2, [r3, #16]
    13c0:	b	14c0 <coda_mem_record_add_field+0x2d0>
    13c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    13c8:	ldr	r3, [r3, #4]
    13cc:	ldr	r3, [r3, #44]	; 0x2c
    13d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
    13d4:	mov	r0, r3
    13d8:	bl	0 <coda_hashtable_get_index_from_name>
    13dc:	str	r0, [fp, #-8]
    13e0:	ldr	r3, [fp, #-8]
    13e4:	cmp	r3, #0
    13e8:	bge	1418 <coda_mem_record_add_field+0x228>
    13ec:	movw	r3, #534	; 0x216
    13f0:	str	r3, [sp]
    13f4:	movw	r3, #0
    13f8:	movt	r3, #0
    13fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
    1400:	movw	r1, #0
    1404:	movt	r1, #0
    1408:	mvn	r0, #101	; 0x65
    140c:	bl	0 <coda_set_error>
    1410:	mvn	r3, #0
    1414:	b	14e0 <coda_mem_record_add_field+0x2f0>
    1418:	ldr	r3, [fp, #-24]	; 0xffffffe8
    141c:	ldr	r2, [r3, #20]
    1420:	ldr	r3, [fp, #-8]
    1424:	lsl	r3, r3, #2
    1428:	add	r3, r2, r3
    142c:	ldr	r3, [r3]
    1430:	cmp	r3, #0
    1434:	beq	1464 <coda_mem_record_add_field+0x274>
    1438:	mov	r3, #540	; 0x21c
    143c:	str	r3, [sp]
    1440:	movw	r3, #0
    1444:	movt	r3, #0
    1448:	ldr	r2, [fp, #-28]	; 0xffffffe4
    144c:	movw	r1, #0
    1450:	movt	r1, #0
    1454:	mvn	r0, #99	; 0x63
    1458:	bl	0 <coda_set_error>
    145c:	mvn	r3, #0
    1460:	b	14e0 <coda_mem_record_add_field+0x2f0>
    1464:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1468:	ldr	r3, [r3, #4]
    146c:	ldr	r2, [r3, #52]	; 0x34
    1470:	ldr	r3, [fp, #-8]
    1474:	lsl	r3, r3, #2
    1478:	add	r3, r2, r3
    147c:	ldr	r3, [r3]
    1480:	ldr	r2, [r3, #8]
    1484:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1488:	ldr	r3, [r3, #4]
    148c:	cmp	r2, r3
    1490:	beq	14c0 <coda_mem_record_add_field+0x2d0>
    1494:	movw	r3, #546	; 0x222
    1498:	str	r3, [sp]
    149c:	movw	r3, #0
    14a0:	movt	r3, #0
    14a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    14a8:	movw	r1, #0
    14ac:	movt	r1, #0
    14b0:	mvn	r0, #99	; 0x63
    14b4:	bl	0 <coda_set_error>
    14b8:	mvn	r3, #0
    14bc:	b	14e0 <coda_mem_record_add_field+0x2f0>
    14c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
    14c4:	ldr	r2, [r3, #20]
    14c8:	ldr	r3, [fp, #-8]
    14cc:	lsl	r3, r3, #2
    14d0:	add	r3, r2, r3
    14d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    14d8:	str	r2, [r3]
    14dc:	mov	r3, #0
    14e0:	mov	r0, r3
    14e4:	sub	sp, fp, #4
    14e8:	ldr	fp, [sp]
    14ec:	add	sp, sp, #4
    14f0:	pop	{pc}		; (ldr pc, [sp], #4)

000014f4 <coda_mem_record_validate>:
    14f4:	str	fp, [sp, #-8]!
    14f8:	str	lr, [sp, #4]
    14fc:	add	fp, sp, #4
    1500:	sub	sp, sp, #16
    1504:	str	r0, [fp, #-16]
    1508:	ldr	r3, [fp, #-16]
    150c:	cmp	r3, #0
    1510:	bne	1538 <coda_mem_record_validate+0x44>
    1514:	movw	r3, #561	; 0x231
    1518:	movw	r2, #0
    151c:	movt	r2, #0
    1520:	movw	r1, #0
    1524:	movt	r1, #0
    1528:	mvn	r0, #99	; 0x63
    152c:	bl	0 <coda_set_error>
    1530:	mvn	r3, #0
    1534:	b	162c <coda_mem_record_validate+0x138>
    1538:	ldr	r3, [fp, #-16]
    153c:	ldr	r2, [r3, #16]
    1540:	ldr	r3, [fp, #-16]
    1544:	ldr	r3, [r3, #4]
    1548:	ldr	r3, [r3, #48]	; 0x30
    154c:	cmp	r2, r3
    1550:	beq	1574 <coda_mem_record_validate+0x80>
    1554:	movw	r3, #0
    1558:	movt	r3, #0
    155c:	mov	r2, #564	; 0x234
    1560:	movw	r1, #0
    1564:	movt	r1, #0
    1568:	movw	r0, #0
    156c:	movt	r0, #0
    1570:	bl	0 <__assert_fail>
    1574:	mov	r3, #0
    1578:	str	r3, [fp, #-8]
    157c:	b	1614 <coda_mem_record_validate+0x120>
    1580:	ldr	r3, [fp, #-16]
    1584:	ldr	r2, [r3, #20]
    1588:	ldr	r3, [fp, #-8]
    158c:	lsl	r3, r3, #2
    1590:	add	r3, r2, r3
    1594:	ldr	r3, [r3]
    1598:	cmp	r3, #0
    159c:	bne	1608 <coda_mem_record_validate+0x114>
    15a0:	ldr	r3, [fp, #-16]
    15a4:	ldr	r3, [r3, #4]
    15a8:	ldr	r2, [r3, #52]	; 0x34
    15ac:	ldr	r3, [fp, #-8]
    15b0:	lsl	r3, r3, #2
    15b4:	add	r3, r2, r3
    15b8:	ldr	r3, [r3]
    15bc:	ldrb	r3, [r3, #16]
    15c0:	cmp	r3, #0
    15c4:	bne	1608 <coda_mem_record_validate+0x114>
    15c8:	ldr	r3, [fp, #-16]
    15cc:	ldr	r3, [r3, #4]
    15d0:	ldr	r2, [r3, #52]	; 0x34
    15d4:	ldr	r3, [fp, #-8]
    15d8:	lsl	r3, r3, #2
    15dc:	add	r3, r2, r3
    15e0:	ldr	r3, [r3]
    15e4:	ldr	r3, [r3]
    15e8:	mov	r2, r3
    15ec:	movw	r1, #0
    15f0:	movt	r1, #0
    15f4:	movw	r0, #65136	; 0xfe70
    15f8:	movt	r0, #65535	; 0xffff
    15fc:	bl	0 <coda_set_error>
    1600:	mvn	r3, #0
    1604:	b	162c <coda_mem_record_validate+0x138>
    1608:	ldr	r3, [fp, #-8]
    160c:	add	r3, r3, #1
    1610:	str	r3, [fp, #-8]
    1614:	ldr	r3, [fp, #-16]
    1618:	ldr	r3, [r3, #16]
    161c:	ldr	r2, [fp, #-8]
    1620:	cmp	r2, r3
    1624:	blt	1580 <coda_mem_record_validate+0x8c>
    1628:	mov	r3, #0
    162c:	mov	r0, r3
    1630:	sub	sp, fp, #4
    1634:	ldr	fp, [sp]
    1638:	add	sp, sp, #4
    163c:	pop	{pc}		; (ldr pc, [sp], #4)

00001640 <coda_mem_array_new>:
    1640:	str	fp, [sp, #-8]!
    1644:	str	lr, [sp, #4]
    1648:	add	fp, sp, #4
    164c:	sub	sp, sp, #24
    1650:	str	r0, [fp, #-16]
    1654:	str	r1, [fp, #-20]	; 0xffffffec
    1658:	ldr	r3, [fp, #-16]
    165c:	cmp	r3, #0
    1660:	bne	1688 <coda_mem_array_new+0x48>
    1664:	movw	r3, #583	; 0x247
    1668:	movw	r2, #0
    166c:	movt	r2, #0
    1670:	movw	r1, #0
    1674:	movt	r1, #0
    1678:	mvn	r0, #99	; 0x63
    167c:	bl	0 <coda_set_error>
    1680:	mov	r3, #0
    1684:	b	1848 <coda_mem_array_new+0x208>
    1688:	mov	r0, #24
    168c:	bl	0 <malloc>
    1690:	mov	r3, r0
    1694:	str	r3, [fp, #-12]
    1698:	ldr	r3, [fp, #-12]
    169c:	cmp	r3, #0
    16a0:	bne	16d0 <coda_mem_array_new+0x90>
    16a4:	movw	r3, #590	; 0x24e
    16a8:	str	r3, [sp]
    16ac:	movw	r3, #0
    16b0:	movt	r3, #0
    16b4:	mov	r2, #24
    16b8:	movw	r1, #0
    16bc:	movt	r1, #0
    16c0:	mvn	r0, #0
    16c4:	bl	0 <coda_set_error>
    16c8:	mov	r3, #0
    16cc:	b	1848 <coda_mem_array_new+0x208>
    16d0:	ldr	r3, [fp, #-12]
    16d4:	mov	r2, #100	; 0x64
    16d8:	str	r2, [r3]
    16dc:	ldr	r3, [fp, #-12]
    16e0:	ldr	r2, [fp, #-16]
    16e4:	str	r2, [r3, #4]
    16e8:	ldr	r3, [fp, #-16]
    16ec:	ldr	r3, [r3, #4]
    16f0:	add	r2, r3, #1
    16f4:	ldr	r3, [fp, #-16]
    16f8:	str	r2, [r3, #4]
    16fc:	ldr	r3, [fp, #-12]
    1700:	mov	r2, #1
    1704:	str	r2, [r3, #8]
    1708:	ldr	r3, [fp, #-12]
    170c:	ldr	r2, [fp, #-20]	; 0xffffffec
    1710:	str	r2, [r3, #12]
    1714:	ldr	r3, [fp, #-12]
    1718:	mov	r2, #0
    171c:	str	r2, [r3, #16]
    1720:	ldr	r3, [fp, #-12]
    1724:	mov	r2, #0
    1728:	str	r2, [r3, #20]
    172c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1730:	cmp	r3, #0
    1734:	bne	175c <coda_mem_array_new+0x11c>
    1738:	ldr	r0, [fp, #-12]
    173c:	bl	8d0 <create_attributes_record>
    1740:	mov	r3, r0
    1744:	cmp	r3, #0
    1748:	beq	175c <coda_mem_array_new+0x11c>
    174c:	ldr	r0, [fp, #-12]
    1750:	bl	0 <coda_mem_type_delete>
    1754:	mov	r3, #0
    1758:	b	1848 <coda_mem_array_new+0x208>
    175c:	ldr	r3, [fp, #-12]
    1760:	ldr	r3, [r3, #4]
    1764:	ldr	r3, [r3, #44]	; 0x2c
    1768:	cmp	r3, #0
    176c:	ble	1844 <coda_mem_array_new+0x204>
    1770:	ldr	r3, [fp, #-12]
    1774:	ldr	r3, [r3, #4]
    1778:	ldr	r3, [r3, #44]	; 0x2c
    177c:	lsl	r3, r3, #2
    1780:	mov	r0, r3
    1784:	bl	0 <malloc>
    1788:	mov	r3, r0
    178c:	mov	r2, r3
    1790:	ldr	r3, [fp, #-12]
    1794:	str	r2, [r3, #20]
    1798:	ldr	r3, [fp, #-12]
    179c:	ldr	r3, [r3, #20]
    17a0:	cmp	r3, #0
    17a4:	bne	17e8 <coda_mem_array_new+0x1a8>
    17a8:	ldr	r3, [fp, #-12]
    17ac:	ldr	r3, [r3, #4]
    17b0:	ldr	r3, [r3, #44]	; 0x2c
    17b4:	lsl	r2, r3, #2
    17b8:	movw	r3, #617	; 0x269
    17bc:	str	r3, [sp]
    17c0:	movw	r3, #0
    17c4:	movt	r3, #0
    17c8:	movw	r1, #0
    17cc:	movt	r1, #0
    17d0:	mvn	r0, #0
    17d4:	bl	0 <coda_set_error>
    17d8:	ldr	r0, [fp, #-12]
    17dc:	bl	0 <coda_mem_type_delete>
    17e0:	mov	r3, #0
    17e4:	b	1848 <coda_mem_array_new+0x208>
    17e8:	ldr	r3, [fp, #-12]
    17ec:	ldr	r3, [r3, #4]
    17f0:	ldr	r2, [r3, #44]	; 0x2c
    17f4:	ldr	r3, [fp, #-12]
    17f8:	str	r2, [r3, #16]
    17fc:	mov	r3, #0
    1800:	str	r3, [fp, #-8]
    1804:	b	1830 <coda_mem_array_new+0x1f0>
    1808:	ldr	r3, [fp, #-12]
    180c:	ldr	r2, [r3, #20]
    1810:	ldr	r3, [fp, #-8]
    1814:	lsl	r3, r3, #2
    1818:	add	r3, r2, r3
    181c:	mov	r2, #0
    1820:	str	r2, [r3]
    1824:	ldr	r3, [fp, #-8]
    1828:	add	r3, r3, #1
    182c:	str	r3, [fp, #-8]
    1830:	ldr	r3, [fp, #-12]
    1834:	ldr	r3, [r3, #16]
    1838:	ldr	r2, [fp, #-8]
    183c:	cmp	r2, r3
    1840:	blt	1808 <coda_mem_array_new+0x1c8>
    1844:	ldr	r3, [fp, #-12]
    1848:	mov	r0, r3
    184c:	sub	sp, fp, #4
    1850:	ldr	fp, [sp]
    1854:	add	sp, sp, #4
    1858:	pop	{pc}		; (ldr pc, [sp], #4)

0000185c <coda_mem_array_set_element>:
    185c:	str	fp, [sp, #-8]!
    1860:	str	lr, [sp, #4]
    1864:	add	fp, sp, #4
    1868:	sub	sp, sp, #24
    186c:	str	r0, [fp, #-8]
    1870:	str	r1, [fp, #-12]
    1874:	str	r2, [fp, #-16]
    1878:	ldr	r3, [fp, #-8]
    187c:	cmp	r3, #0
    1880:	bne	18a8 <coda_mem_array_set_element+0x4c>
    1884:	movw	r3, #635	; 0x27b
    1888:	movw	r2, #0
    188c:	movt	r2, #0
    1890:	movw	r1, #0
    1894:	movt	r1, #0
    1898:	mvn	r0, #99	; 0x63
    189c:	bl	0 <coda_set_error>
    18a0:	mvn	r3, #0
    18a4:	b	19f0 <coda_mem_array_set_element+0x194>
    18a8:	ldr	r3, [fp, #-12]
    18ac:	cmp	r3, #0
    18b0:	blt	18c8 <coda_mem_array_set_element+0x6c>
    18b4:	ldr	r3, [fp, #-8]
    18b8:	ldr	r3, [r3, #16]
    18bc:	ldr	r2, [fp, #-12]
    18c0:	cmp	r2, r3
    18c4:	blt	1904 <coda_mem_array_set_element+0xa8>
    18c8:	ldr	r3, [fp, #-8]
    18cc:	ldr	r2, [r3, #16]
    18d0:	movw	r3, #641	; 0x281
    18d4:	str	r3, [sp, #4]
    18d8:	movw	r3, #0
    18dc:	movt	r3, #0
    18e0:	str	r3, [sp]
    18e4:	mov	r3, r2
    18e8:	ldr	r2, [fp, #-12]
    18ec:	movw	r1, #0
    18f0:	movt	r1, #0
    18f4:	mvn	r0, #100	; 0x64
    18f8:	bl	0 <coda_set_error>
    18fc:	mvn	r3, #0
    1900:	b	19f0 <coda_mem_array_set_element+0x194>
    1904:	ldr	r3, [fp, #-16]
    1908:	cmp	r3, #0
    190c:	bne	1934 <coda_mem_array_set_element+0xd8>
    1910:	movw	r3, #646	; 0x286
    1914:	movw	r2, #0
    1918:	movt	r2, #0
    191c:	movw	r1, #0
    1920:	movt	r1, #0
    1924:	mvn	r0, #99	; 0x63
    1928:	bl	0 <coda_set_error>
    192c:	mvn	r3, #0
    1930:	b	19f0 <coda_mem_array_set_element+0x194>
    1934:	ldr	r3, [fp, #-8]
    1938:	ldr	r2, [r3, #20]
    193c:	ldr	r3, [fp, #-12]
    1940:	lsl	r3, r3, #2
    1944:	add	r3, r2, r3
    1948:	ldr	r3, [r3]
    194c:	cmp	r3, #0
    1950:	beq	1980 <coda_mem_array_set_element+0x124>
    1954:	mov	r3, #652	; 0x28c
    1958:	str	r3, [sp]
    195c:	movw	r3, #0
    1960:	movt	r3, #0
    1964:	ldr	r2, [fp, #-12]
    1968:	movw	r1, #0
    196c:	movt	r1, #0
    1970:	mvn	r0, #99	; 0x63
    1974:	bl	0 <coda_set_error>
    1978:	mvn	r3, #0
    197c:	b	19f0 <coda_mem_array_set_element+0x194>
    1980:	ldr	r3, [fp, #-8]
    1984:	ldr	r3, [r3, #4]
    1988:	ldr	r2, [r3, #40]	; 0x28
    198c:	ldr	r3, [fp, #-16]
    1990:	ldr	r3, [r3, #4]
    1994:	cmp	r2, r3
    1998:	beq	19d0 <coda_mem_array_set_element+0x174>
    199c:	ldr	r3, [fp, #-8]
    19a0:	ldr	r2, [r3, #16]
    19a4:	movw	r3, #658	; 0x292
    19a8:	str	r3, [sp]
    19ac:	movw	r3, #0
    19b0:	movt	r3, #0
    19b4:	movw	r1, #0
    19b8:	movt	r1, #0
    19bc:	movw	r0, #65136	; 0xfe70
    19c0:	movt	r0, #65535	; 0xffff
    19c4:	bl	0 <coda_set_error>
    19c8:	mvn	r3, #0
    19cc:	b	19f0 <coda_mem_array_set_element+0x194>
    19d0:	ldr	r3, [fp, #-8]
    19d4:	ldr	r2, [r3, #20]
    19d8:	ldr	r3, [fp, #-12]
    19dc:	lsl	r3, r3, #2
    19e0:	add	r3, r2, r3
    19e4:	ldr	r2, [fp, #-16]
    19e8:	str	r2, [r3]
    19ec:	mov	r3, #0
    19f0:	mov	r0, r3
    19f4:	sub	sp, fp, #4
    19f8:	ldr	fp, [sp]
    19fc:	add	sp, sp, #4
    1a00:	pop	{pc}		; (ldr pc, [sp], #4)

00001a04 <coda_mem_array_add_element>:
    1a04:	str	fp, [sp, #-8]!
    1a08:	str	lr, [sp, #4]
    1a0c:	add	fp, sp, #4
    1a10:	sub	sp, sp, #24
    1a14:	str	r0, [fp, #-16]
    1a18:	str	r1, [fp, #-20]	; 0xffffffec
    1a1c:	ldr	r3, [fp, #-16]
    1a20:	cmp	r3, #0
    1a24:	bne	1a4c <coda_mem_array_add_element+0x48>
    1a28:	movw	r3, #670	; 0x29e
    1a2c:	movw	r2, #0
    1a30:	movt	r2, #0
    1a34:	movw	r1, #0
    1a38:	movt	r1, #0
    1a3c:	mvn	r0, #99	; 0x63
    1a40:	bl	0 <coda_set_error>
    1a44:	mvn	r3, #0
    1a48:	b	1c64 <coda_mem_array_add_element+0x260>
    1a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a50:	cmp	r3, #0
    1a54:	bne	1a7c <coda_mem_array_add_element+0x78>
    1a58:	movw	r3, #675	; 0x2a3
    1a5c:	movw	r2, #0
    1a60:	movt	r2, #0
    1a64:	movw	r1, #0
    1a68:	movt	r1, #0
    1a6c:	mvn	r0, #99	; 0x63
    1a70:	bl	0 <coda_set_error>
    1a74:	mvn	r3, #0
    1a78:	b	1c64 <coda_mem_array_add_element+0x260>
    1a7c:	ldr	r3, [fp, #-16]
    1a80:	ldr	r3, [r3, #4]
    1a84:	ldr	r2, [r3, #40]	; 0x28
    1a88:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a8c:	ldr	r3, [r3, #4]
    1a90:	cmp	r2, r3
    1a94:	beq	1acc <coda_mem_array_add_element+0xc8>
    1a98:	ldr	r3, [fp, #-16]
    1a9c:	ldr	r2, [r3, #16]
    1aa0:	movw	r3, #681	; 0x2a9
    1aa4:	str	r3, [sp]
    1aa8:	movw	r3, #0
    1aac:	movt	r3, #0
    1ab0:	movw	r1, #0
    1ab4:	movt	r1, #0
    1ab8:	movw	r0, #65136	; 0xfe70
    1abc:	movt	r0, #65535	; 0xffff
    1ac0:	bl	0 <coda_set_error>
    1ac4:	mvn	r3, #0
    1ac8:	b	1c64 <coda_mem_array_add_element+0x260>
    1acc:	ldr	r3, [fp, #-16]
    1ad0:	ldr	r3, [r3, #4]
    1ad4:	ldr	r3, [r3, #44]	; 0x2c
    1ad8:	cmp	r3, #0
    1adc:	ble	1b9c <coda_mem_array_add_element+0x198>
    1ae0:	mov	r3, #0
    1ae4:	str	r3, [fp, #-8]
    1ae8:	b	1af8 <coda_mem_array_add_element+0xf4>
    1aec:	ldr	r3, [fp, #-8]
    1af0:	add	r3, r3, #1
    1af4:	str	r3, [fp, #-8]
    1af8:	ldr	r3, [fp, #-16]
    1afc:	ldr	r3, [r3, #16]
    1b00:	ldr	r2, [fp, #-8]
    1b04:	cmp	r2, r3
    1b08:	bge	1b2c <coda_mem_array_add_element+0x128>
    1b0c:	ldr	r3, [fp, #-16]
    1b10:	ldr	r2, [r3, #20]
    1b14:	ldr	r3, [fp, #-8]
    1b18:	lsl	r3, r3, #2
    1b1c:	add	r3, r2, r3
    1b20:	ldr	r3, [r3]
    1b24:	cmp	r3, #0
    1b28:	bne	1aec <coda_mem_array_add_element+0xe8>
    1b2c:	ldr	r3, [fp, #-16]
    1b30:	ldr	r3, [r3, #16]
    1b34:	ldr	r2, [fp, #-8]
    1b38:	cmp	r2, r3
    1b3c:	blt	1b7c <coda_mem_array_add_element+0x178>
    1b40:	ldr	r3, [fp, #-16]
    1b44:	ldr	r2, [r3, #16]
    1b48:	mov	r3, #696	; 0x2b8
    1b4c:	str	r3, [sp, #4]
    1b50:	movw	r3, #0
    1b54:	movt	r3, #0
    1b58:	str	r3, [sp]
    1b5c:	mov	r3, r2
    1b60:	ldr	r2, [fp, #-8]
    1b64:	movw	r1, #0
    1b68:	movt	r1, #0
    1b6c:	mvn	r0, #100	; 0x64
    1b70:	bl	0 <coda_set_error>
    1b74:	mvn	r3, #0
    1b78:	b	1c64 <coda_mem_array_add_element+0x260>
    1b7c:	ldr	r3, [fp, #-16]
    1b80:	ldr	r2, [r3, #20]
    1b84:	ldr	r3, [fp, #-8]
    1b88:	lsl	r3, r3, #2
    1b8c:	add	r3, r2, r3
    1b90:	ldr	r2, [fp, #-20]	; 0xffffffec
    1b94:	str	r2, [r3]
    1b98:	b	1c60 <coda_mem_array_add_element+0x25c>
    1b9c:	ldr	r3, [fp, #-16]
    1ba0:	ldr	r3, [r3, #16]
    1ba4:	and	r3, r3, #15
    1ba8:	cmp	r3, #0
    1bac:	bne	1c28 <coda_mem_array_add_element+0x224>
    1bb0:	ldr	r3, [fp, #-16]
    1bb4:	ldr	r2, [r3, #20]
    1bb8:	ldr	r3, [fp, #-16]
    1bbc:	ldr	r3, [r3, #16]
    1bc0:	add	r3, r3, #16
    1bc4:	lsl	r3, r3, #2
    1bc8:	mov	r1, r3
    1bcc:	mov	r0, r2
    1bd0:	bl	0 <realloc>
    1bd4:	str	r0, [fp, #-12]
    1bd8:	ldr	r3, [fp, #-12]
    1bdc:	cmp	r3, #0
    1be0:	bne	1c1c <coda_mem_array_add_element+0x218>
    1be4:	ldr	r3, [fp, #-16]
    1be8:	ldr	r3, [r3, #16]
    1bec:	add	r3, r3, #16
    1bf0:	lsl	r2, r3, #2
    1bf4:	movw	r3, #711	; 0x2c7
    1bf8:	str	r3, [sp]
    1bfc:	movw	r3, #0
    1c00:	movt	r3, #0
    1c04:	movw	r1, #0
    1c08:	movt	r1, #0
    1c0c:	mvn	r0, #0
    1c10:	bl	0 <coda_set_error>
    1c14:	mvn	r3, #0
    1c18:	b	1c64 <coda_mem_array_add_element+0x260>
    1c1c:	ldr	r3, [fp, #-16]
    1c20:	ldr	r2, [fp, #-12]
    1c24:	str	r2, [r3, #20]
    1c28:	ldr	r3, [fp, #-16]
    1c2c:	ldr	r3, [r3, #16]
    1c30:	add	r2, r3, #1
    1c34:	ldr	r3, [fp, #-16]
    1c38:	str	r2, [r3, #16]
    1c3c:	ldr	r3, [fp, #-16]
    1c40:	ldr	r2, [r3, #20]
    1c44:	ldr	r3, [fp, #-16]
    1c48:	ldr	r3, [r3, #16]
    1c4c:	sub	r3, r3, #-1073741823	; 0xc0000001
    1c50:	lsl	r3, r3, #2
    1c54:	add	r3, r2, r3
    1c58:	ldr	r2, [fp, #-20]	; 0xffffffec
    1c5c:	str	r2, [r3]
    1c60:	mov	r3, #0
    1c64:	mov	r0, r3
    1c68:	sub	sp, fp, #4
    1c6c:	ldr	fp, [sp]
    1c70:	add	sp, sp, #4
    1c74:	pop	{pc}		; (ldr pc, [sp], #4)

00001c78 <coda_mem_array_validate>:
    1c78:	str	fp, [sp, #-8]!
    1c7c:	str	lr, [sp, #4]
    1c80:	add	fp, sp, #4
    1c84:	sub	sp, sp, #16
    1c88:	str	r0, [fp, #-16]
    1c8c:	ldr	r3, [fp, #-16]
    1c90:	cmp	r3, #0
    1c94:	bne	1cbc <coda_mem_array_validate+0x44>
    1c98:	movw	r3, #729	; 0x2d9
    1c9c:	movw	r2, #0
    1ca0:	movt	r2, #0
    1ca4:	movw	r1, #0
    1ca8:	movt	r1, #0
    1cac:	mvn	r0, #99	; 0x63
    1cb0:	bl	0 <coda_set_error>
    1cb4:	mvn	r3, #0
    1cb8:	b	1d84 <coda_mem_array_validate+0x10c>
    1cbc:	ldr	r3, [fp, #-16]
    1cc0:	ldr	r3, [r3, #4]
    1cc4:	ldr	r3, [r3, #44]	; 0x2c
    1cc8:	cmp	r3, #0
    1ccc:	blt	1d14 <coda_mem_array_validate+0x9c>
    1cd0:	ldr	r3, [fp, #-16]
    1cd4:	ldr	r2, [r3, #16]
    1cd8:	ldr	r3, [fp, #-16]
    1cdc:	ldr	r3, [r3, #4]
    1ce0:	ldr	r3, [r3, #44]	; 0x2c
    1ce4:	cmp	r2, r3
    1ce8:	beq	1d14 <coda_mem_array_validate+0x9c>
    1cec:	ldr	r3, [fp, #-16]
    1cf0:	ldr	r2, [r3, #16]
    1cf4:	ldr	r3, [fp, #-16]
    1cf8:	ldr	r3, [r3, #4]
    1cfc:	ldr	r3, [r3, #44]	; 0x2c
    1d00:	movw	r1, #0
    1d04:	movt	r1, #0
    1d08:	movw	r0, #65136	; 0xfe70
    1d0c:	movt	r0, #65535	; 0xffff
    1d10:	bl	0 <coda_set_error>
    1d14:	mov	r3, #0
    1d18:	str	r3, [fp, #-8]
    1d1c:	b	1d6c <coda_mem_array_validate+0xf4>
    1d20:	ldr	r3, [fp, #-16]
    1d24:	ldr	r2, [r3, #20]
    1d28:	ldr	r3, [fp, #-8]
    1d2c:	lsl	r3, r3, #2
    1d30:	add	r3, r2, r3
    1d34:	ldr	r3, [r3]
    1d38:	cmp	r3, #0
    1d3c:	bne	1d60 <coda_mem_array_validate+0xe8>
    1d40:	ldr	r2, [fp, #-8]
    1d44:	movw	r1, #0
    1d48:	movt	r1, #0
    1d4c:	movw	r0, #65136	; 0xfe70
    1d50:	movt	r0, #65535	; 0xffff
    1d54:	bl	0 <coda_set_error>
    1d58:	mvn	r3, #0
    1d5c:	b	1d84 <coda_mem_array_validate+0x10c>
    1d60:	ldr	r3, [fp, #-8]
    1d64:	add	r3, r3, #1
    1d68:	str	r3, [fp, #-8]
    1d6c:	ldr	r3, [fp, #-16]
    1d70:	ldr	r3, [r3, #16]
    1d74:	ldr	r2, [fp, #-8]
    1d78:	cmp	r2, r3
    1d7c:	blt	1d20 <coda_mem_array_validate+0xa8>
    1d80:	mov	r3, #0
    1d84:	mov	r0, r3
    1d88:	sub	sp, fp, #4
    1d8c:	ldr	fp, [sp]
    1d90:	add	sp, sp, #4
    1d94:	pop	{pc}		; (ldr pc, [sp], #4)

00001d98 <coda_mem_data_new>:
    1d98:	strd	r4, [sp, #-32]!	; 0xffffffe0
    1d9c:	strd	r6, [sp, #8]
    1da0:	strd	r8, [sp, #16]
    1da4:	str	fp, [sp, #24]
    1da8:	str	lr, [sp, #28]
    1dac:	add	fp, sp, #28
    1db0:	sub	sp, sp, #96	; 0x60
    1db4:	str	r0, [fp, #-56]	; 0xffffffc8
    1db8:	str	r1, [fp, #-60]	; 0xffffffc4
    1dbc:	str	r2, [fp, #-64]	; 0xffffffc0
    1dc0:	str	r3, [fp, #-68]	; 0xffffffbc
    1dc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1dc8:	cmp	r3, #0
    1dcc:	bne	1df4 <coda_mem_data_new+0x5c>
    1dd0:	movw	r3, #758	; 0x2f6
    1dd4:	movw	r2, #0
    1dd8:	movt	r2, #0
    1ddc:	movw	r1, #0
    1de0:	movt	r1, #0
    1de4:	mvn	r0, #99	; 0x63
    1de8:	bl	0 <coda_set_error>
    1dec:	mov	r3, #0
    1df0:	b	2294 <coda_mem_data_new+0x4fc>
    1df4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1df8:	cmp	r3, #0
    1dfc:	bge	1e20 <coda_mem_data_new+0x88>
    1e00:	movw	r3, #0
    1e04:	movt	r3, #0
    1e08:	movw	r2, #761	; 0x2f9
    1e0c:	movw	r1, #0
    1e10:	movt	r1, #0
    1e14:	movw	r0, #0
    1e18:	movt	r0, #0
    1e1c:	bl	0 <__assert_fail>
    1e20:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1e24:	cmp	r3, #0
    1e28:	ble	1e5c <coda_mem_data_new+0xc4>
    1e2c:	ldr	r3, [fp, #4]
    1e30:	cmp	r3, #0
    1e34:	bne	1e5c <coda_mem_data_new+0xc4>
    1e38:	mov	r3, #764	; 0x2fc
    1e3c:	movw	r2, #0
    1e40:	movt	r2, #0
    1e44:	movw	r1, #0
    1e48:	movt	r1, #0
    1e4c:	mvn	r0, #99	; 0x63
    1e50:	bl	0 <coda_set_error>
    1e54:	mov	r3, #0
    1e58:	b	2294 <coda_mem_data_new+0x4fc>
    1e5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1e60:	ldrd	r2, [r3, #24]
    1e64:	cmp	r2, #0
    1e68:	sbcs	r3, r3, #0
    1e6c:	blt	1ef8 <coda_mem_data_new+0x160>
    1e70:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1e74:	ldrd	r2, [r3, #24]
    1e78:	mov	r0, #0
    1e7c:	mov	r1, #0
    1e80:	lsr	r0, r2, #3
    1e84:	orr	r0, r0, r3, lsl #29
    1e88:	asr	r1, r3, #3
    1e8c:	mov	ip, r0
    1e90:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1e94:	ldrd	r0, [r3, #24]
    1e98:	mov	r2, #7
    1e9c:	mov	r3, #0
    1ea0:	and	r4, r0, r2
    1ea4:	and	r5, r1, r3
    1ea8:	orrs	r3, r4, r5
    1eac:	beq	1eb8 <coda_mem_data_new+0x120>
    1eb0:	mov	r3, #1
    1eb4:	b	1ebc <coda_mem_data_new+0x124>
    1eb8:	mov	r3, #0
    1ebc:	add	r3, r3, ip
    1ec0:	str	r3, [fp, #-32]	; 0xffffffe0
    1ec4:	ldr	r2, [fp, #-32]	; 0xffffffe0
    1ec8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1ecc:	cmp	r2, r3
    1ed0:	beq	1ef8 <coda_mem_data_new+0x160>
    1ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1ed8:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1edc:	movw	r1, #0
    1ee0:	movt	r1, #0
    1ee4:	movw	r0, #65236	; 0xfed4
    1ee8:	movt	r0, #65535	; 0xffff
    1eec:	bl	0 <coda_set_error>
    1ef0:	mov	r3, #0
    1ef4:	b	2294 <coda_mem_data_new+0x4fc>
    1ef8:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1efc:	ldr	r3, [r3, #12]
    1f00:	cmp	r3, #10
    1f04:	bne	1f40 <coda_mem_data_new+0x1a8>
    1f08:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1f0c:	cmp	r3, #1
    1f10:	beq	1f40 <coda_mem_data_new+0x1a8>
    1f14:	movw	r3, #782	; 0x30e
    1f18:	str	r3, [sp]
    1f1c:	movw	r3, #0
    1f20:	movt	r3, #0
    1f24:	ldr	r2, [fp, #-68]	; 0xffffffbc
    1f28:	movw	r1, #0
    1f2c:	movt	r1, #0
    1f30:	mvn	r0, #99	; 0x63
    1f34:	bl	0 <coda_set_error>
    1f38:	mov	r3, #0
    1f3c:	b	2294 <coda_mem_data_new+0x4fc>
    1f40:	mov	r0, #32
    1f44:	bl	0 <malloc>
    1f48:	mov	r3, r0
    1f4c:	str	r3, [fp, #-36]	; 0xffffffdc
    1f50:	ldr	r3, [fp, #-36]	; 0xffffffdc
    1f54:	cmp	r3, #0
    1f58:	bne	1f88 <coda_mem_data_new+0x1f0>
    1f5c:	movw	r3, #790	; 0x316
    1f60:	str	r3, [sp]
    1f64:	movw	r3, #0
    1f68:	movt	r3, #0
    1f6c:	mov	r2, #32
    1f70:	movw	r1, #0
    1f74:	movt	r1, #0
    1f78:	mvn	r0, #0
    1f7c:	bl	0 <coda_set_error>
    1f80:	mov	r3, #0
    1f84:	b	2294 <coda_mem_data_new+0x4fc>
    1f88:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f8c:	mov	r3, #100	; 0x64
    1f90:	str	r3, [r2]
    1f94:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1f98:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1f9c:	str	r3, [r2, #4]
    1fa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fa4:	ldr	r3, [r3, #4]
    1fa8:	add	r2, r3, #1
    1fac:	ldr	r3, [fp, #-56]	; 0xffffffc8
    1fb0:	str	r2, [r3, #4]
    1fb4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1fb8:	mov	r3, #2
    1fbc:	str	r3, [r2, #8]
    1fc0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1fc4:	ldr	r3, [fp, #-60]	; 0xffffffc4
    1fc8:	str	r3, [r2, #12]
    1fcc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1fd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1fd4:	str	r3, [r2, #16]
    1fd8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    1fdc:	mov	r2, #0
    1fe0:	mov	r3, #0
    1fe4:	strd	r2, [r1, #24]
    1fe8:	ldr	r3, [fp, #-68]	; 0xffffffbc
    1fec:	cmp	r3, #0
    1ff0:	ble	225c <coda_mem_data_new+0x4c4>
    1ff4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    1ff8:	cmp	r3, #0
    1ffc:	bne	202c <coda_mem_data_new+0x294>
    2000:	movw	r3, #805	; 0x325
    2004:	movw	r2, #0
    2008:	movt	r2, #0
    200c:	movw	r1, #0
    2010:	movt	r1, #0
    2014:	mvn	r0, #99	; 0x63
    2018:	bl	0 <coda_set_error>
    201c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2020:	bl	0 <coda_mem_type_delete>
    2024:	mov	r3, #0
    2028:	b	2294 <coda_mem_data_new+0x4fc>
    202c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2030:	ldrd	r2, [r3, #40]	; 0x28
    2034:	orrs	r3, r2, r3
    2038:	beq	20b8 <coda_mem_data_new+0x320>
    203c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2040:	ldrd	r2, [r3, #40]	; 0x28
    2044:	subs	r1, r2, #1
    2048:	str	r1, [fp, #-76]	; 0xffffffb4
    204c:	sbc	r3, r3, #0
    2050:	str	r3, [fp, #-72]	; 0xffffffb8
    2054:	ldrd	r4, [fp, #-76]	; 0xffffffb4
    2058:	mov	r3, r5
    205c:	asr	r3, r3, #31
    2060:	mov	r0, r3
    2064:	asr	r1, r0, #31
    2068:	movw	r2, #4095	; 0xfff
    206c:	mov	r3, #0
    2070:	and	ip, r0, r2
    2074:	str	ip, [fp, #-108]	; 0xffffff94
    2078:	and	r3, r1, r3
    207c:	str	r3, [fp, #-104]	; 0xffffff98
    2080:	ldrd	r2, [fp, #-108]	; 0xffffff94
    2084:	mov	r1, r2
    2088:	mov	r0, r4
    208c:	adds	r6, r1, r0
    2090:	mov	r2, r5
    2094:	adc	r7, r3, r2
    2098:	mov	r2, #0
    209c:	mov	r3, #0
    20a0:	lsr	r2, r6, #12
    20a4:	orr	r2, r2, r7, lsl #20
    20a8:	asr	r3, r7, #12
    20ac:	mov	r3, r2
    20b0:	add	r3, r3, #1
    20b4:	b	20bc <coda_mem_data_new+0x324>
    20b8:	mov	r3, #0
    20bc:	str	r3, [fp, #-40]	; 0xffffffd8
    20c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
    20c4:	cmp	r3, #0
    20c8:	beq	216c <coda_mem_data_new+0x3d4>
    20cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
    20d0:	ldrd	r0, [r3, #40]	; 0x28
    20d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
    20d8:	mov	r2, r3
    20dc:	asr	r3, r2, #31
    20e0:	adds	ip, r0, r2
    20e4:	str	ip, [fp, #-84]	; 0xffffffac
    20e8:	adc	r3, r1, r3
    20ec:	str	r3, [fp, #-80]	; 0xffffffb0
    20f0:	ldrd	r2, [fp, #-84]	; 0xffffffac
    20f4:	mov	r1, r2
    20f8:	subs	r1, r1, #1
    20fc:	str	r1, [fp, #-92]	; 0xffffffa4
    2100:	sbc	r3, r3, #0
    2104:	str	r3, [fp, #-88]	; 0xffffffa8
    2108:	ldrd	r4, [fp, #-92]	; 0xffffffa4
    210c:	mov	r3, r5
    2110:	asr	r3, r3, #31
    2114:	mov	r2, r3
    2118:	asr	r3, r2, #31
    211c:	movw	r0, #4095	; 0xfff
    2120:	mov	r1, #0
    2124:	and	ip, r2, r0
    2128:	str	ip, [fp, #-116]	; 0xffffff8c
    212c:	and	r3, r3, r1
    2130:	str	r3, [fp, #-112]	; 0xffffff90
    2134:	ldrd	r2, [fp, #-116]	; 0xffffff8c
    2138:	mov	r1, r2
    213c:	mov	r0, r4
    2140:	adds	r8, r1, r0
    2144:	mov	r2, r5
    2148:	adc	r9, r3, r2
    214c:	mov	r2, #0
    2150:	mov	r3, #0
    2154:	lsr	r2, r8, #12
    2158:	orr	r2, r2, r9, lsl #20
    215c:	asr	r3, r9, #12
    2160:	mov	r3, r2
    2164:	add	r3, r3, #1
    2168:	b	2170 <coda_mem_data_new+0x3d8>
    216c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    2170:	str	r3, [fp, #-44]	; 0xffffffd4
    2174:	ldr	r2, [fp, #-44]	; 0xffffffd4
    2178:	ldr	r3, [fp, #-40]	; 0xffffffd8
    217c:	cmp	r2, r3
    2180:	ble	21f4 <coda_mem_data_new+0x45c>
    2184:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2188:	ldr	r2, [r3, #48]	; 0x30
    218c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    2190:	lsl	r3, r3, #12
    2194:	mov	r1, r3
    2198:	mov	r0, r2
    219c:	bl	0 <realloc>
    21a0:	str	r0, [fp, #-48]	; 0xffffffd0
    21a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
    21a8:	cmp	r3, #0
    21ac:	bne	21e8 <coda_mem_data_new+0x450>
    21b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
    21b4:	lsl	r2, r3, #12
    21b8:	movw	r3, #821	; 0x335
    21bc:	str	r3, [sp]
    21c0:	movw	r3, #0
    21c4:	movt	r3, #0
    21c8:	movw	r1, #0
    21cc:	movt	r1, #0
    21d0:	mvn	r0, #0
    21d4:	bl	0 <coda_set_error>
    21d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
    21dc:	bl	0 <coda_mem_type_delete>
    21e0:	mov	r3, #0
    21e4:	b	2294 <coda_mem_data_new+0x4fc>
    21e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
    21ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
    21f0:	str	r2, [r3, #48]	; 0x30
    21f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
    21f8:	ldrd	r2, [r3, #40]	; 0x28
    21fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
    2200:	strd	r2, [r1, #24]
    2204:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2208:	ldr	r1, [r3, #48]	; 0x30
    220c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2210:	ldrd	r2, [r3, #40]	; 0x28
    2214:	mov	r3, r2
    2218:	add	r3, r1, r3
    221c:	ldr	r2, [fp, #-68]	; 0xffffffbc
    2220:	ldr	r1, [fp, #4]
    2224:	mov	r0, r3
    2228:	bl	0 <memcpy>
    222c:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2230:	ldrd	r0, [r3, #40]	; 0x28
    2234:	ldr	r3, [fp, #-68]	; 0xffffffbc
    2238:	mov	r2, r3
    223c:	asr	r3, r2, #31
    2240:	adds	ip, r0, r2
    2244:	str	ip, [fp, #-100]	; 0xffffff9c
    2248:	adc	r3, r1, r3
    224c:	str	r3, [fp, #-96]	; 0xffffffa0
    2250:	ldr	r3, [fp, #-64]	; 0xffffffc0
    2254:	ldrd	r0, [fp, #-100]	; 0xffffff9c
    2258:	strd	r0, [r3, #40]	; 0x28
    225c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2260:	ldr	r3, [r3, #12]
    2264:	cmp	r3, #0
    2268:	bne	2290 <coda_mem_data_new+0x4f8>
    226c:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2270:	bl	8d0 <create_attributes_record>
    2274:	mov	r3, r0
    2278:	cmp	r3, #0
    227c:	beq	2290 <coda_mem_data_new+0x4f8>
    2280:	ldr	r0, [fp, #-36]	; 0xffffffdc
    2284:	bl	0 <coda_mem_type_delete>
    2288:	mov	r3, #0
    228c:	b	2294 <coda_mem_data_new+0x4fc>
    2290:	ldr	r3, [fp, #-36]	; 0xffffffdc
    2294:	mov	r0, r3
    2298:	sub	sp, fp, #28
    229c:	ldrd	r4, [sp]
    22a0:	ldrd	r6, [sp, #8]
    22a4:	ldrd	r8, [sp, #16]
    22a8:	ldr	fp, [sp, #24]
    22ac:	add	sp, sp, #28
    22b0:	pop	{pc}		; (ldr pc, [sp], #4)

000022b4 <coda_mem_int8_new>:
    22b4:	str	fp, [sp, #-8]!
    22b8:	str	lr, [sp, #4]
    22bc:	add	fp, sp, #4
    22c0:	sub	sp, sp, #24
    22c4:	str	r0, [fp, #-8]
    22c8:	str	r1, [fp, #-12]
    22cc:	str	r2, [fp, #-16]
    22d0:	strb	r3, [fp, #-17]	; 0xffffffef
    22d4:	ldr	r3, [fp, #-8]
    22d8:	ldrd	r2, [r3, #24]
    22dc:	cmp	r3, #0
    22e0:	cmpeq	r2, #8
    22e4:	beq	2308 <coda_mem_int8_new+0x54>
    22e8:	movw	r3, #0
    22ec:	movt	r3, #0
    22f0:	movw	r2, #847	; 0x34f
    22f4:	movw	r1, #0
    22f8:	movt	r1, #0
    22fc:	movw	r0, #0
    2300:	movt	r0, #0
    2304:	bl	0 <__assert_fail>
    2308:	ldr	r3, [fp, #-8]
    230c:	ldr	r3, [r3, #12]
    2310:	cmp	r3, #0
    2314:	beq	2338 <coda_mem_int8_new+0x84>
    2318:	movw	r3, #0
    231c:	movt	r3, #0
    2320:	mov	r2, #848	; 0x350
    2324:	movw	r1, #0
    2328:	movt	r1, #0
    232c:	movw	r0, #0
    2330:	movt	r0, #0
    2334:	bl	0 <__assert_fail>
    2338:	sub	r3, fp, #17
    233c:	str	r3, [sp]
    2340:	mov	r3, #1
    2344:	ldr	r2, [fp, #-16]
    2348:	ldr	r1, [fp, #-12]
    234c:	ldr	r0, [fp, #-8]
    2350:	bl	1d98 <coda_mem_data_new>
    2354:	mov	r3, r0
    2358:	mov	r0, r3
    235c:	sub	sp, fp, #4
    2360:	ldr	fp, [sp]
    2364:	add	sp, sp, #4
    2368:	pop	{pc}		; (ldr pc, [sp], #4)

0000236c <coda_mem_uint8_new>:
    236c:	str	fp, [sp, #-8]!
    2370:	str	lr, [sp, #4]
    2374:	add	fp, sp, #4
    2378:	sub	sp, sp, #24
    237c:	str	r0, [fp, #-8]
    2380:	str	r1, [fp, #-12]
    2384:	str	r2, [fp, #-16]
    2388:	strb	r3, [fp, #-17]	; 0xffffffef
    238c:	ldr	r3, [fp, #-8]
    2390:	ldrd	r2, [r3, #24]
    2394:	cmp	r3, #0
    2398:	cmpeq	r2, #8
    239c:	beq	23c0 <coda_mem_uint8_new+0x54>
    23a0:	movw	r3, #0
    23a4:	movt	r3, #0
    23a8:	movw	r2, #855	; 0x357
    23ac:	movw	r1, #0
    23b0:	movt	r1, #0
    23b4:	movw	r0, #0
    23b8:	movt	r0, #0
    23bc:	bl	0 <__assert_fail>
    23c0:	ldr	r3, [fp, #-8]
    23c4:	ldr	r3, [r3, #12]
    23c8:	cmp	r3, #1
    23cc:	beq	23f0 <coda_mem_uint8_new+0x84>
    23d0:	movw	r3, #0
    23d4:	movt	r3, #0
    23d8:	mov	r2, #856	; 0x358
    23dc:	movw	r1, #0
    23e0:	movt	r1, #0
    23e4:	movw	r0, #0
    23e8:	movt	r0, #0
    23ec:	bl	0 <__assert_fail>
    23f0:	sub	r3, fp, #17
    23f4:	str	r3, [sp]
    23f8:	mov	r3, #1
    23fc:	ldr	r2, [fp, #-16]
    2400:	ldr	r1, [fp, #-12]
    2404:	ldr	r0, [fp, #-8]
    2408:	bl	1d98 <coda_mem_data_new>
    240c:	mov	r3, r0
    2410:	mov	r0, r3
    2414:	sub	sp, fp, #4
    2418:	ldr	fp, [sp]
    241c:	add	sp, sp, #4
    2420:	pop	{pc}		; (ldr pc, [sp], #4)

00002424 <coda_mem_int16_new>:
    2424:	str	fp, [sp, #-8]!
    2428:	str	lr, [sp, #4]
    242c:	add	fp, sp, #4
    2430:	sub	sp, sp, #24
    2434:	str	r0, [fp, #-8]
    2438:	str	r1, [fp, #-12]
    243c:	str	r2, [fp, #-16]
    2440:	strh	r3, [fp, #-18]	; 0xffffffee
    2444:	ldr	r3, [fp, #-8]
    2448:	ldrd	r2, [r3, #24]
    244c:	cmp	r3, #0
    2450:	cmpeq	r2, #16
    2454:	beq	2478 <coda_mem_int16_new+0x54>
    2458:	movw	r3, #0
    245c:	movt	r3, #0
    2460:	movw	r2, #863	; 0x35f
    2464:	movw	r1, #0
    2468:	movt	r1, #0
    246c:	movw	r0, #0
    2470:	movt	r0, #0
    2474:	bl	0 <__assert_fail>
    2478:	ldr	r3, [fp, #-8]
    247c:	ldr	r3, [r3, #12]
    2480:	cmp	r3, #2
    2484:	beq	24a8 <coda_mem_int16_new+0x84>
    2488:	movw	r3, #0
    248c:	movt	r3, #0
    2490:	mov	r2, #864	; 0x360
    2494:	movw	r1, #0
    2498:	movt	r1, #0
    249c:	movw	r0, #0
    24a0:	movt	r0, #0
    24a4:	bl	0 <__assert_fail>
    24a8:	sub	r3, fp, #18
    24ac:	str	r3, [sp]
    24b0:	mov	r3, #2
    24b4:	ldr	r2, [fp, #-16]
    24b8:	ldr	r1, [fp, #-12]
    24bc:	ldr	r0, [fp, #-8]
    24c0:	bl	1d98 <coda_mem_data_new>
    24c4:	mov	r3, r0
    24c8:	mov	r0, r3
    24cc:	sub	sp, fp, #4
    24d0:	ldr	fp, [sp]
    24d4:	add	sp, sp, #4
    24d8:	pop	{pc}		; (ldr pc, [sp], #4)

000024dc <coda_mem_uint16_new>:
    24dc:	str	fp, [sp, #-8]!
    24e0:	str	lr, [sp, #4]
    24e4:	add	fp, sp, #4
    24e8:	sub	sp, sp, #24
    24ec:	str	r0, [fp, #-8]
    24f0:	str	r1, [fp, #-12]
    24f4:	str	r2, [fp, #-16]
    24f8:	strh	r3, [fp, #-18]	; 0xffffffee
    24fc:	ldr	r3, [fp, #-8]
    2500:	ldrd	r2, [r3, #24]
    2504:	cmp	r3, #0
    2508:	cmpeq	r2, #16
    250c:	beq	2530 <coda_mem_uint16_new+0x54>
    2510:	movw	r3, #0
    2514:	movt	r3, #0
    2518:	movw	r2, #871	; 0x367
    251c:	movw	r1, #0
    2520:	movt	r1, #0
    2524:	movw	r0, #0
    2528:	movt	r0, #0
    252c:	bl	0 <__assert_fail>
    2530:	ldr	r3, [fp, #-8]
    2534:	ldr	r3, [r3, #12]
    2538:	cmp	r3, #3
    253c:	beq	2560 <coda_mem_uint16_new+0x84>
    2540:	movw	r3, #0
    2544:	movt	r3, #0
    2548:	mov	r2, #872	; 0x368
    254c:	movw	r1, #0
    2550:	movt	r1, #0
    2554:	movw	r0, #0
    2558:	movt	r0, #0
    255c:	bl	0 <__assert_fail>
    2560:	sub	r3, fp, #18
    2564:	str	r3, [sp]
    2568:	mov	r3, #2
    256c:	ldr	r2, [fp, #-16]
    2570:	ldr	r1, [fp, #-12]
    2574:	ldr	r0, [fp, #-8]
    2578:	bl	1d98 <coda_mem_data_new>
    257c:	mov	r3, r0
    2580:	mov	r0, r3
    2584:	sub	sp, fp, #4
    2588:	ldr	fp, [sp]
    258c:	add	sp, sp, #4
    2590:	pop	{pc}		; (ldr pc, [sp], #4)

00002594 <coda_mem_int32_new>:
    2594:	str	fp, [sp, #-8]!
    2598:	str	lr, [sp, #4]
    259c:	add	fp, sp, #4
    25a0:	sub	sp, sp, #24
    25a4:	str	r0, [fp, #-8]
    25a8:	str	r1, [fp, #-12]
    25ac:	str	r2, [fp, #-16]
    25b0:	str	r3, [fp, #-20]	; 0xffffffec
    25b4:	ldr	r3, [fp, #-8]
    25b8:	ldrd	r2, [r3, #24]
    25bc:	cmp	r3, #0
    25c0:	cmpeq	r2, #32
    25c4:	beq	25e8 <coda_mem_int32_new+0x54>
    25c8:	movw	r3, #0
    25cc:	movt	r3, #0
    25d0:	movw	r2, #879	; 0x36f
    25d4:	movw	r1, #0
    25d8:	movt	r1, #0
    25dc:	movw	r0, #0
    25e0:	movt	r0, #0
    25e4:	bl	0 <__assert_fail>
    25e8:	ldr	r3, [fp, #-8]
    25ec:	ldr	r3, [r3, #12]
    25f0:	cmp	r3, #4
    25f4:	beq	2618 <coda_mem_int32_new+0x84>
    25f8:	movw	r3, #0
    25fc:	movt	r3, #0
    2600:	mov	r2, #880	; 0x370
    2604:	movw	r1, #0
    2608:	movt	r1, #0
    260c:	movw	r0, #0
    2610:	movt	r0, #0
    2614:	bl	0 <__assert_fail>
    2618:	sub	r3, fp, #20
    261c:	str	r3, [sp]
    2620:	mov	r3, #4
    2624:	ldr	r2, [fp, #-16]
    2628:	ldr	r1, [fp, #-12]
    262c:	ldr	r0, [fp, #-8]
    2630:	bl	1d98 <coda_mem_data_new>
    2634:	mov	r3, r0
    2638:	mov	r0, r3
    263c:	sub	sp, fp, #4
    2640:	ldr	fp, [sp]
    2644:	add	sp, sp, #4
    2648:	pop	{pc}		; (ldr pc, [sp], #4)

0000264c <coda_mem_uint32_new>:
    264c:	str	fp, [sp, #-8]!
    2650:	str	lr, [sp, #4]
    2654:	add	fp, sp, #4
    2658:	sub	sp, sp, #24
    265c:	str	r0, [fp, #-8]
    2660:	str	r1, [fp, #-12]
    2664:	str	r2, [fp, #-16]
    2668:	str	r3, [fp, #-20]	; 0xffffffec
    266c:	ldr	r3, [fp, #-8]
    2670:	ldrd	r2, [r3, #24]
    2674:	cmp	r3, #0
    2678:	cmpeq	r2, #32
    267c:	beq	26a0 <coda_mem_uint32_new+0x54>
    2680:	movw	r3, #0
    2684:	movt	r3, #0
    2688:	movw	r2, #887	; 0x377
    268c:	movw	r1, #0
    2690:	movt	r1, #0
    2694:	movw	r0, #0
    2698:	movt	r0, #0
    269c:	bl	0 <__assert_fail>
    26a0:	ldr	r3, [fp, #-8]
    26a4:	ldr	r3, [r3, #12]
    26a8:	cmp	r3, #5
    26ac:	beq	26d0 <coda_mem_uint32_new+0x84>
    26b0:	movw	r3, #0
    26b4:	movt	r3, #0
    26b8:	mov	r2, #888	; 0x378
    26bc:	movw	r1, #0
    26c0:	movt	r1, #0
    26c4:	movw	r0, #0
    26c8:	movt	r0, #0
    26cc:	bl	0 <__assert_fail>
    26d0:	sub	r3, fp, #20
    26d4:	str	r3, [sp]
    26d8:	mov	r3, #4
    26dc:	ldr	r2, [fp, #-16]
    26e0:	ldr	r1, [fp, #-12]
    26e4:	ldr	r0, [fp, #-8]
    26e8:	bl	1d98 <coda_mem_data_new>
    26ec:	mov	r3, r0
    26f0:	mov	r0, r3
    26f4:	sub	sp, fp, #4
    26f8:	ldr	fp, [sp]
    26fc:	add	sp, sp, #4
    2700:	pop	{pc}		; (ldr pc, [sp], #4)

00002704 <coda_mem_int64_new>:
    2704:	str	fp, [sp, #-8]!
    2708:	str	lr, [sp, #4]
    270c:	add	fp, sp, #4
    2710:	sub	sp, sp, #24
    2714:	str	r0, [fp, #-8]
    2718:	str	r1, [fp, #-12]
    271c:	str	r2, [fp, #-16]
    2720:	ldr	r3, [fp, #-8]
    2724:	ldrd	r2, [r3, #24]
    2728:	cmp	r3, #0
    272c:	cmpeq	r2, #64	; 0x40
    2730:	beq	2754 <coda_mem_int64_new+0x50>
    2734:	movw	r3, #0
    2738:	movt	r3, #0
    273c:	movw	r2, #895	; 0x37f
    2740:	movw	r1, #0
    2744:	movt	r1, #0
    2748:	movw	r0, #0
    274c:	movt	r0, #0
    2750:	bl	0 <__assert_fail>
    2754:	ldr	r3, [fp, #-8]
    2758:	ldr	r3, [r3, #12]
    275c:	cmp	r3, #6
    2760:	beq	2784 <coda_mem_int64_new+0x80>
    2764:	movw	r3, #0
    2768:	movt	r3, #0
    276c:	mov	r2, #896	; 0x380
    2770:	movw	r1, #0
    2774:	movt	r1, #0
    2778:	movw	r0, #0
    277c:	movt	r0, #0
    2780:	bl	0 <__assert_fail>
    2784:	add	r3, fp, #4
    2788:	str	r3, [sp]
    278c:	mov	r3, #8
    2790:	ldr	r2, [fp, #-16]
    2794:	ldr	r1, [fp, #-12]
    2798:	ldr	r0, [fp, #-8]
    279c:	bl	1d98 <coda_mem_data_new>
    27a0:	mov	r3, r0
    27a4:	mov	r0, r3
    27a8:	sub	sp, fp, #4
    27ac:	ldr	fp, [sp]
    27b0:	add	sp, sp, #4
    27b4:	pop	{pc}		; (ldr pc, [sp], #4)

000027b8 <coda_mem_uint64_new>:
    27b8:	str	fp, [sp, #-8]!
    27bc:	str	lr, [sp, #4]
    27c0:	add	fp, sp, #4
    27c4:	sub	sp, sp, #24
    27c8:	str	r0, [fp, #-8]
    27cc:	str	r1, [fp, #-12]
    27d0:	str	r2, [fp, #-16]
    27d4:	ldr	r3, [fp, #-8]
    27d8:	ldrd	r2, [r3, #24]
    27dc:	cmp	r3, #0
    27e0:	cmpeq	r2, #64	; 0x40
    27e4:	beq	2808 <coda_mem_uint64_new+0x50>
    27e8:	movw	r3, #0
    27ec:	movt	r3, #0
    27f0:	movw	r2, #903	; 0x387
    27f4:	movw	r1, #0
    27f8:	movt	r1, #0
    27fc:	movw	r0, #0
    2800:	movt	r0, #0
    2804:	bl	0 <__assert_fail>
    2808:	ldr	r3, [fp, #-8]
    280c:	ldr	r3, [r3, #12]
    2810:	cmp	r3, #7
    2814:	beq	2838 <coda_mem_uint64_new+0x80>
    2818:	movw	r3, #0
    281c:	movt	r3, #0
    2820:	mov	r2, #904	; 0x388
    2824:	movw	r1, #0
    2828:	movt	r1, #0
    282c:	movw	r0, #0
    2830:	movt	r0, #0
    2834:	bl	0 <__assert_fail>
    2838:	add	r3, fp, #4
    283c:	str	r3, [sp]
    2840:	mov	r3, #8
    2844:	ldr	r2, [fp, #-16]
    2848:	ldr	r1, [fp, #-12]
    284c:	ldr	r0, [fp, #-8]
    2850:	bl	1d98 <coda_mem_data_new>
    2854:	mov	r3, r0
    2858:	mov	r0, r3
    285c:	sub	sp, fp, #4
    2860:	ldr	fp, [sp]
    2864:	add	sp, sp, #4
    2868:	pop	{pc}		; (ldr pc, [sp], #4)

0000286c <coda_mem_float_new>:
    286c:	str	fp, [sp, #-8]!
    2870:	str	lr, [sp, #4]
    2874:	add	fp, sp, #4
    2878:	sub	sp, sp, #24
    287c:	str	r0, [fp, #-8]
    2880:	str	r1, [fp, #-12]
    2884:	str	r2, [fp, #-16]
    2888:	vstr	s0, [fp, #-20]	; 0xffffffec
    288c:	ldr	r3, [fp, #-8]
    2890:	ldrd	r2, [r3, #24]
    2894:	cmp	r3, #0
    2898:	cmpeq	r2, #32
    289c:	beq	28c0 <coda_mem_float_new+0x54>
    28a0:	movw	r3, #0
    28a4:	movt	r3, #0
    28a8:	movw	r2, #911	; 0x38f
    28ac:	movw	r1, #0
    28b0:	movt	r1, #0
    28b4:	movw	r0, #0
    28b8:	movt	r0, #0
    28bc:	bl	0 <__assert_fail>
    28c0:	ldr	r3, [fp, #-8]
    28c4:	ldr	r3, [r3, #12]
    28c8:	cmp	r3, #8
    28cc:	beq	28f0 <coda_mem_float_new+0x84>
    28d0:	movw	r3, #0
    28d4:	movt	r3, #0
    28d8:	mov	r2, #912	; 0x390
    28dc:	movw	r1, #0
    28e0:	movt	r1, #0
    28e4:	movw	r0, #0
    28e8:	movt	r0, #0
    28ec:	bl	0 <__assert_fail>
    28f0:	sub	r3, fp, #20
    28f4:	str	r3, [sp]
    28f8:	mov	r3, #4
    28fc:	ldr	r2, [fp, #-16]
    2900:	ldr	r1, [fp, #-12]
    2904:	ldr	r0, [fp, #-8]
    2908:	bl	1d98 <coda_mem_data_new>
    290c:	mov	r3, r0
    2910:	mov	r0, r3
    2914:	sub	sp, fp, #4
    2918:	ldr	fp, [sp]
    291c:	add	sp, sp, #4
    2920:	pop	{pc}		; (ldr pc, [sp], #4)

00002924 <coda_mem_double_new>:
    2924:	str	fp, [sp, #-8]!
    2928:	str	lr, [sp, #4]
    292c:	add	fp, sp, #4
    2930:	sub	sp, sp, #32
    2934:	str	r0, [fp, #-8]
    2938:	str	r1, [fp, #-12]
    293c:	str	r2, [fp, #-16]
    2940:	vstr	d0, [fp, #-28]	; 0xffffffe4
    2944:	ldr	r3, [fp, #-8]
    2948:	ldrd	r2, [r3, #24]
    294c:	cmp	r3, #0
    2950:	cmpeq	r2, #64	; 0x40
    2954:	beq	2978 <coda_mem_double_new+0x54>
    2958:	movw	r3, #0
    295c:	movt	r3, #0
    2960:	movw	r2, #919	; 0x397
    2964:	movw	r1, #0
    2968:	movt	r1, #0
    296c:	movw	r0, #0
    2970:	movt	r0, #0
    2974:	bl	0 <__assert_fail>
    2978:	ldr	r3, [fp, #-8]
    297c:	ldr	r3, [r3, #12]
    2980:	cmp	r3, #9
    2984:	beq	29a8 <coda_mem_double_new+0x84>
    2988:	movw	r3, #0
    298c:	movt	r3, #0
    2990:	mov	r2, #920	; 0x398
    2994:	movw	r1, #0
    2998:	movt	r1, #0
    299c:	movw	r0, #0
    29a0:	movt	r0, #0
    29a4:	bl	0 <__assert_fail>
    29a8:	sub	r3, fp, #28
    29ac:	str	r3, [sp]
    29b0:	mov	r3, #8
    29b4:	ldr	r2, [fp, #-16]
    29b8:	ldr	r1, [fp, #-12]
    29bc:	ldr	r0, [fp, #-8]
    29c0:	bl	1d98 <coda_mem_data_new>
    29c4:	mov	r3, r0
    29c8:	mov	r0, r3
    29cc:	sub	sp, fp, #4
    29d0:	ldr	fp, [sp]
    29d4:	add	sp, sp, #4
    29d8:	pop	{pc}		; (ldr pc, [sp], #4)

000029dc <coda_mem_char_new>:
    29dc:	str	fp, [sp, #-8]!
    29e0:	str	lr, [sp, #4]
    29e4:	add	fp, sp, #4
    29e8:	sub	sp, sp, #24
    29ec:	str	r0, [fp, #-8]
    29f0:	str	r1, [fp, #-12]
    29f4:	str	r2, [fp, #-16]
    29f8:	strb	r3, [fp, #-17]	; 0xffffffef
    29fc:	ldr	r3, [fp, #-8]
    2a00:	ldrd	r2, [r3, #24]
    2a04:	cmp	r3, #0
    2a08:	cmpeq	r2, #8
    2a0c:	beq	2a30 <coda_mem_char_new+0x54>
    2a10:	movw	r3, #0
    2a14:	movt	r3, #0
    2a18:	movw	r2, #927	; 0x39f
    2a1c:	movw	r1, #0
    2a20:	movt	r1, #0
    2a24:	movw	r0, #0
    2a28:	movt	r0, #0
    2a2c:	bl	0 <__assert_fail>
    2a30:	ldr	r3, [fp, #-8]
    2a34:	ldr	r3, [r3, #12]
    2a38:	cmp	r3, #10
    2a3c:	beq	2a60 <coda_mem_char_new+0x84>
    2a40:	movw	r3, #0
    2a44:	movt	r3, #0
    2a48:	mov	r2, #928	; 0x3a0
    2a4c:	movw	r1, #0
    2a50:	movt	r1, #0
    2a54:	movw	r0, #0
    2a58:	movt	r0, #0
    2a5c:	bl	0 <__assert_fail>
    2a60:	sub	r3, fp, #17
    2a64:	str	r3, [sp]
    2a68:	mov	r3, #1
    2a6c:	ldr	r2, [fp, #-16]
    2a70:	ldr	r1, [fp, #-12]
    2a74:	ldr	r0, [fp, #-8]
    2a78:	bl	1d98 <coda_mem_data_new>
    2a7c:	mov	r3, r0
    2a80:	mov	r0, r3
    2a84:	sub	sp, fp, #4
    2a88:	ldr	fp, [sp]
    2a8c:	add	sp, sp, #4
    2a90:	pop	{pc}		; (ldr pc, [sp], #4)

00002a94 <coda_mem_string_new>:
    2a94:	str	fp, [sp, #-8]!
    2a98:	str	lr, [sp, #4]
    2a9c:	add	fp, sp, #4
    2aa0:	sub	sp, sp, #24
    2aa4:	str	r0, [fp, #-8]
    2aa8:	str	r1, [fp, #-12]
    2aac:	str	r2, [fp, #-16]
    2ab0:	str	r3, [fp, #-20]	; 0xffffffec
    2ab4:	ldr	r3, [fp, #-8]
    2ab8:	ldr	r3, [r3, #12]
    2abc:	cmp	r3, #11
    2ac0:	beq	2ae4 <coda_mem_string_new+0x50>
    2ac4:	movw	r3, #0
    2ac8:	movt	r3, #0
    2acc:	movw	r2, #935	; 0x3a7
    2ad0:	movw	r1, #0
    2ad4:	movt	r1, #0
    2ad8:	movw	r0, #0
    2adc:	movt	r0, #0
    2ae0:	bl	0 <__assert_fail>
    2ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
    2ae8:	cmp	r3, #0
    2aec:	beq	2b04 <coda_mem_string_new+0x70>
    2af0:	ldr	r0, [fp, #-20]	; 0xffffffec
    2af4:	bl	0 <strlen>
    2af8:	mov	r3, r0
    2afc:	mov	r2, r3
    2b00:	b	2b08 <coda_mem_string_new+0x74>
    2b04:	mov	r2, #0
    2b08:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b0c:	str	r3, [sp]
    2b10:	mov	r3, r2
    2b14:	ldr	r2, [fp, #-16]
    2b18:	ldr	r1, [fp, #-12]
    2b1c:	ldr	r0, [fp, #-8]
    2b20:	bl	1d98 <coda_mem_data_new>
    2b24:	mov	r3, r0
    2b28:	mov	r0, r3
    2b2c:	sub	sp, fp, #4
    2b30:	ldr	fp, [sp]
    2b34:	add	sp, sp, #4
    2b38:	pop	{pc}		; (ldr pc, [sp], #4)

00002b3c <coda_mem_raw_new>:
    2b3c:	str	fp, [sp, #-8]!
    2b40:	str	lr, [sp, #4]
    2b44:	add	fp, sp, #4
    2b48:	sub	sp, sp, #24
    2b4c:	str	r0, [fp, #-8]
    2b50:	str	r1, [fp, #-12]
    2b54:	str	r2, [fp, #-16]
    2b58:	str	r3, [fp, #-20]	; 0xffffffec
    2b5c:	ldr	r3, [fp, #-8]
    2b60:	ldr	r3, [r3, #8]
    2b64:	cmp	r3, #5
    2b68:	beq	2b8c <coda_mem_raw_new+0x50>
    2b6c:	movw	r3, #0
    2b70:	movt	r3, #0
    2b74:	movw	r2, #943	; 0x3af
    2b78:	movw	r1, #0
    2b7c:	movt	r1, #0
    2b80:	movw	r0, #0
    2b84:	movt	r0, #0
    2b88:	bl	0 <__assert_fail>
    2b8c:	ldr	r3, [fp, #4]
    2b90:	str	r3, [sp]
    2b94:	ldr	r3, [fp, #-20]	; 0xffffffec
    2b98:	ldr	r2, [fp, #-16]
    2b9c:	ldr	r1, [fp, #-12]
    2ba0:	ldr	r0, [fp, #-8]
    2ba4:	bl	1d98 <coda_mem_data_new>
    2ba8:	mov	r3, r0
    2bac:	mov	r0, r3
    2bb0:	sub	sp, fp, #4
    2bb4:	ldr	fp, [sp]
    2bb8:	add	sp, sp, #4
    2bbc:	pop	{pc}		; (ldr pc, [sp], #4)

00002bc0 <coda_mem_time_new>:
    2bc0:	str	fp, [sp, #-8]!
    2bc4:	str	lr, [sp, #4]
    2bc8:	add	fp, sp, #4
    2bcc:	sub	sp, sp, #32
    2bd0:	str	r0, [fp, #-16]
    2bd4:	str	r1, [fp, #-20]	; 0xffffffec
    2bd8:	str	r2, [fp, #-24]	; 0xffffffe8
    2bdc:	ldr	r3, [fp, #-16]
    2be0:	cmp	r3, #0
    2be4:	bne	2c0c <coda_mem_time_new+0x4c>
    2be8:	movw	r3, #954	; 0x3ba
    2bec:	movw	r2, #0
    2bf0:	movt	r2, #0
    2bf4:	movw	r1, #0
    2bf8:	movt	r1, #0
    2bfc:	mvn	r0, #99	; 0x63
    2c00:	bl	0 <coda_set_error>
    2c04:	mov	r3, #0
    2c08:	b	2d80 <coda_mem_time_new+0x1c0>
    2c0c:	ldr	r3, [fp, #-16]
    2c10:	ldr	r3, [r3, #8]
    2c14:	cmp	r3, #6
    2c18:	beq	2c40 <coda_mem_time_new+0x80>
    2c1c:	movw	r3, #959	; 0x3bf
    2c20:	movw	r2, #0
    2c24:	movt	r2, #0
    2c28:	movw	r1, #0
    2c2c:	movt	r1, #0
    2c30:	mvn	r0, #99	; 0x63
    2c34:	bl	0 <coda_set_error>
    2c38:	mov	r3, #0
    2c3c:	b	2d80 <coda_mem_time_new+0x1c0>
    2c40:	ldr	r3, [fp, #-16]
    2c44:	ldr	r3, [r3, #40]	; 0x28
    2c48:	cmp	r3, #2
    2c4c:	beq	2c74 <coda_mem_time_new+0xb4>
    2c50:	mov	r3, #964	; 0x3c4
    2c54:	movw	r2, #0
    2c58:	movt	r2, #0
    2c5c:	movw	r1, #0
    2c60:	movt	r1, #0
    2c64:	mvn	r0, #99	; 0x63
    2c68:	bl	0 <coda_set_error>
    2c6c:	mov	r3, #0
    2c70:	b	2d80 <coda_mem_time_new+0x1c0>
    2c74:	ldr	r3, [fp, #-16]
    2c78:	ldr	r2, [r3, #44]	; 0x2c
    2c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    2c80:	ldr	r3, [r3, #4]
    2c84:	cmp	r2, r3
    2c88:	beq	2cb0 <coda_mem_time_new+0xf0>
    2c8c:	movw	r3, #970	; 0x3ca
    2c90:	movw	r2, #0
    2c94:	movt	r2, #0
    2c98:	movw	r1, #0
    2c9c:	movt	r1, #0
    2ca0:	mvn	r0, #99	; 0x63
    2ca4:	bl	0 <coda_set_error>
    2ca8:	mov	r3, #0
    2cac:	b	2d80 <coda_mem_time_new+0x1c0>
    2cb0:	mov	r0, #20
    2cb4:	bl	0 <malloc>
    2cb8:	mov	r3, r0
    2cbc:	str	r3, [fp, #-8]
    2cc0:	ldr	r3, [fp, #-8]
    2cc4:	cmp	r3, #0
    2cc8:	bne	2cf8 <coda_mem_time_new+0x138>
    2ccc:	movw	r3, #978	; 0x3d2
    2cd0:	str	r3, [sp]
    2cd4:	movw	r3, #0
    2cd8:	movt	r3, #0
    2cdc:	mov	r2, #20
    2ce0:	movw	r1, #0
    2ce4:	movt	r1, #0
    2ce8:	mvn	r0, #0
    2cec:	bl	0 <coda_set_error>
    2cf0:	mov	r3, #0
    2cf4:	b	2d80 <coda_mem_time_new+0x1c0>
    2cf8:	ldr	r3, [fp, #-8]
    2cfc:	mov	r2, #100	; 0x64
    2d00:	str	r2, [r3]
    2d04:	ldr	r3, [fp, #-8]
    2d08:	ldr	r2, [fp, #-16]
    2d0c:	str	r2, [r3, #4]
    2d10:	ldr	r3, [fp, #-16]
    2d14:	ldr	r3, [r3, #4]
    2d18:	add	r2, r3, #1
    2d1c:	ldr	r3, [fp, #-16]
    2d20:	str	r2, [r3, #4]
    2d24:	ldr	r3, [fp, #-8]
    2d28:	mov	r2, #3
    2d2c:	str	r2, [r3, #8]
    2d30:	ldr	r3, [fp, #-8]
    2d34:	ldr	r2, [fp, #-20]	; 0xffffffec
    2d38:	str	r2, [r3, #12]
    2d3c:	ldr	r3, [fp, #-8]
    2d40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    2d44:	str	r2, [r3, #16]
    2d48:	ldr	r3, [fp, #-8]
    2d4c:	ldr	r3, [r3, #12]
    2d50:	cmp	r3, #0
    2d54:	bne	2d7c <coda_mem_time_new+0x1bc>
    2d58:	ldr	r0, [fp, #-8]
    2d5c:	bl	8d0 <create_attributes_record>
    2d60:	mov	r3, r0
    2d64:	cmp	r3, #0
    2d68:	beq	2d7c <coda_mem_time_new+0x1bc>
    2d6c:	ldr	r0, [fp, #-8]
    2d70:	bl	0 <coda_mem_type_delete>
    2d74:	mov	r3, #0
    2d78:	b	2d80 <coda_mem_time_new+0x1c0>
    2d7c:	ldr	r3, [fp, #-8]
    2d80:	mov	r0, r3
    2d84:	sub	sp, fp, #4
    2d88:	ldr	fp, [sp]
    2d8c:	add	sp, sp, #4
    2d90:	pop	{pc}		; (ldr pc, [sp], #4)

00002d94 <coda_mem_no_data_new>:
    2d94:	str	fp, [sp, #-8]!
    2d98:	str	lr, [sp, #4]
    2d9c:	add	fp, sp, #4
    2da0:	sub	sp, sp, #24
    2da4:	str	r0, [fp, #-16]
    2da8:	mov	r0, #20
    2dac:	bl	0 <malloc>
    2db0:	mov	r3, r0
    2db4:	str	r3, [fp, #-8]
    2db8:	ldr	r3, [fp, #-8]
    2dbc:	cmp	r3, #0
    2dc0:	bne	2df0 <coda_mem_no_data_new+0x5c>
    2dc4:	movw	r3, #1009	; 0x3f1
    2dc8:	str	r3, [sp]
    2dcc:	movw	r3, #0
    2dd0:	movt	r3, #0
    2dd4:	mov	r2, #20
    2dd8:	movw	r1, #0
    2ddc:	movt	r1, #0
    2de0:	mvn	r0, #0
    2de4:	bl	0 <coda_set_error>
    2de8:	mov	r3, #0
    2dec:	b	2ef4 <coda_mem_no_data_new+0x160>
    2df0:	ldr	r3, [fp, #-8]
    2df4:	mov	r2, #100	; 0x64
    2df8:	str	r2, [r3]
    2dfc:	ldr	r3, [fp, #-8]
    2e00:	mov	r2, #0
    2e04:	str	r2, [r3, #4]
    2e08:	ldr	r3, [fp, #-8]
    2e0c:	mov	r2, #3
    2e10:	str	r2, [r3, #8]
    2e14:	ldr	r3, [fp, #-8]
    2e18:	mov	r2, #0
    2e1c:	str	r2, [r3, #12]
    2e20:	ldr	r3, [fp, #-8]
    2e24:	mov	r2, #0
    2e28:	str	r2, [r3, #16]
    2e2c:	ldr	r0, [fp, #-16]
    2e30:	bl	0 <coda_type_no_data_singleton>
    2e34:	mov	r2, r0
    2e38:	ldr	r3, [fp, #-8]
    2e3c:	str	r2, [r3, #4]
    2e40:	ldr	r3, [fp, #-8]
    2e44:	ldr	r3, [r3, #4]
    2e48:	cmp	r3, #0
    2e4c:	bne	2e60 <coda_mem_no_data_new+0xcc>
    2e50:	ldr	r0, [fp, #-8]
    2e54:	bl	0 <coda_mem_type_delete>
    2e58:	mov	r3, #0
    2e5c:	b	2ef4 <coda_mem_no_data_new+0x160>
    2e60:	ldr	r3, [fp, #-8]
    2e64:	ldr	r3, [r3, #4]
    2e68:	ldr	r2, [r3, #4]
    2e6c:	add	r2, r2, #1
    2e70:	str	r2, [r3, #4]
    2e74:	ldr	r3, [fp, #-8]
    2e78:	ldr	r3, [r3, #4]
    2e7c:	ldr	r3, [r3, #44]	; 0x2c
    2e80:	str	r3, [fp, #-12]
    2e84:	mov	r3, #0
    2e88:	str	r3, [sp]
    2e8c:	mov	r3, #0
    2e90:	mov	r2, #0
    2e94:	mov	r1, #0
    2e98:	ldr	r0, [fp, #-12]
    2e9c:	bl	2b3c <coda_mem_raw_new>
    2ea0:	mov	r2, r0
    2ea4:	ldr	r3, [fp, #-8]
    2ea8:	str	r2, [r3, #16]
    2eac:	ldr	r3, [fp, #-8]
    2eb0:	ldr	r3, [r3, #16]
    2eb4:	cmp	r3, #0
    2eb8:	bne	2ecc <coda_mem_no_data_new+0x138>
    2ebc:	ldr	r0, [fp, #-8]
    2ec0:	bl	0 <coda_mem_type_delete>
    2ec4:	mov	r3, #0
    2ec8:	b	2ef4 <coda_mem_no_data_new+0x160>
    2ecc:	ldr	r0, [fp, #-8]
    2ed0:	bl	8d0 <create_attributes_record>
    2ed4:	mov	r3, r0
    2ed8:	cmp	r3, #0
    2edc:	beq	2ef0 <coda_mem_no_data_new+0x15c>
    2ee0:	ldr	r0, [fp, #-8]
    2ee4:	bl	0 <coda_mem_type_delete>
    2ee8:	mov	r3, #0
    2eec:	b	2ef4 <coda_mem_no_data_new+0x160>
    2ef0:	ldr	r3, [fp, #-8]
    2ef4:	mov	r0, r3
    2ef8:	sub	sp, fp, #4
    2efc:	ldr	fp, [sp]
    2f00:	add	sp, sp, #4
    2f04:	pop	{pc}		; (ldr pc, [sp], #4)
