
../compcert-repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

0001074c <.init>:
   1074c:	push	{r3, lr}
   10750:	bl	10820 <_start@@Base+0x3c>
   10754:	pop	{r3, pc}

Disassembly of section .plt:

00010758 <strcmp@plt-0x14>:
   10758:	push	{lr}		; (str lr, [sp, #-4]!)
   1075c:	ldr	lr, [pc, #4]	; 10768 <strcmp@plt-0x4>
   10760:	add	lr, pc, lr
   10764:	ldr	pc, [lr, #8]!
   10768:	muleq	r1, r8, r8

0001076c <strcmp@plt>:
   1076c:	add	ip, pc, #0, 12
   10770:	add	ip, ip, #16, 20	; 0x10000
   10774:	ldr	pc, [ip, #2200]!	; 0x898

00010778 <printf@plt>:
   10778:	add	ip, pc, #0, 12
   1077c:	add	ip, ip, #16, 20	; 0x10000
   10780:	ldr	pc, [ip, #2192]!	; 0x890

00010784 <strcat@plt>:
   10784:	add	ip, pc, #0, 12
   10788:	add	ip, ip, #16, 20	; 0x10000
   1078c:	ldr	pc, [ip, #2184]!	; 0x888

00010790 <strcpy@plt>:
   10790:	add	ip, pc, #0, 12
   10794:	add	ip, ip, #16, 20	; 0x10000
   10798:	ldr	pc, [ip, #2176]!	; 0x880

0001079c <__libc_start_main@plt>:
   1079c:	add	ip, pc, #0, 12
   107a0:	add	ip, ip, #16, 20	; 0x10000
   107a4:	ldr	pc, [ip, #2168]!	; 0x878

000107a8 <__gmon_start__@plt>:
   107a8:	add	ip, pc, #0, 12
   107ac:	add	ip, ip, #16, 20	; 0x10000
   107b0:	ldr	pc, [ip, #2160]!	; 0x870

000107b4 <strlen@plt>:
   107b4:	add	ip, pc, #0, 12
   107b8:	add	ip, ip, #16, 20	; 0x10000
   107bc:	ldr	pc, [ip, #2152]!	; 0x868

000107c0 <memset@plt>:
   107c0:	add	ip, pc, #0, 12
   107c4:	add	ip, ip, #16, 20	; 0x10000
   107c8:	ldr	pc, [ip, #2144]!	; 0x860

000107cc <__isoc99_scanf@plt>:
   107cc:	add	ip, pc, #0, 12
   107d0:	add	ip, ip, #16, 20	; 0x10000
   107d4:	ldr	pc, [ip, #2136]!	; 0x858

000107d8 <abort@plt>:
   107d8:	add	ip, pc, #0, 12
   107dc:	add	ip, ip, #16, 20	; 0x10000
   107e0:	ldr	pc, [ip, #2128]!	; 0x850

Disassembly of section .text:

000107e4 <_start@@Base>:
   107e4:	mov	fp, #0
   107e8:	mov	lr, #0
   107ec:	pop	{r1}		; (ldr r1, [sp], #4)
   107f0:	mov	r2, sp
   107f4:	push	{r2}		; (str r2, [sp, #-4]!)
   107f8:	push	{r0}		; (str r0, [sp, #-4]!)
   107fc:	ldr	ip, [pc, #16]	; 10814 <_start@@Base+0x30>
   10800:	push	{ip}		; (str ip, [sp, #-4]!)
   10804:	ldr	r0, [pc, #12]	; 10818 <_start@@Base+0x34>
   10808:	ldr	r3, [pc, #12]	; 1081c <_start@@Base+0x38>
   1080c:	bl	1079c <__libc_start_main@plt>
   10810:	bl	107d8 <abort@plt>
   10814:	andeq	r0, r1, r0, asr #24
   10818:	ldrdeq	r0, [r1], -r4
   1081c:	andeq	r0, r1, r0, ror #23
   10820:	ldr	r3, [pc, #20]	; 1083c <_start@@Base+0x58>
   10824:	ldr	r2, [pc, #20]	; 10840 <_start@@Base+0x5c>
   10828:	add	r3, pc, r3
   1082c:	ldr	r2, [r3, r2]
   10830:	cmp	r2, #0
   10834:	bxeq	lr
   10838:	b	107a8 <__gmon_start__@plt>
   1083c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10840:	andeq	r0, r0, r4, lsr r0
   10844:	ldr	r0, [pc, #24]	; 10864 <_start@@Base+0x80>
   10848:	ldr	r3, [pc, #24]	; 10868 <_start@@Base+0x84>
   1084c:	cmp	r3, r0
   10850:	bxeq	lr
   10854:	ldr	r3, [pc, #16]	; 1086c <_start@@Base+0x88>
   10858:	cmp	r3, #0
   1085c:	bxeq	lr
   10860:	bx	r3
   10864:	andeq	r1, r2, r0, asr #32
   10868:	andeq	r1, r2, r0, asr #32
   1086c:	andeq	r0, r0, r0
   10870:	ldr	r0, [pc, #36]	; 1089c <_start@@Base+0xb8>
   10874:	ldr	r1, [pc, #36]	; 108a0 <_start@@Base+0xbc>
   10878:	sub	r1, r1, r0
   1087c:	asr	r1, r1, #2
   10880:	add	r1, r1, r1, lsr #31
   10884:	asrs	r1, r1, #1
   10888:	bxeq	lr
   1088c:	ldr	r3, [pc, #16]	; 108a4 <_start@@Base+0xc0>
   10890:	cmp	r3, #0
   10894:	bxeq	lr
   10898:	bx	r3
   1089c:	andeq	r1, r2, r0, asr #32
   108a0:	andeq	r1, r2, r0, asr #32
   108a4:	andeq	r0, r0, r0
   108a8:	push	{r4, lr}
   108ac:	ldr	r4, [pc, #24]	; 108cc <_start@@Base+0xe8>
   108b0:	ldrb	r3, [r4]
   108b4:	cmp	r3, #0
   108b8:	popne	{r4, pc}
   108bc:	bl	10844 <_start@@Base+0x60>
   108c0:	mov	r3, #1
   108c4:	strb	r3, [r4]
   108c8:	pop	{r4, pc}
   108cc:	andeq	r1, r2, r0, asr #32
   108d0:	b	10870 <_start@@Base+0x8c>

000108d4 <main@@Base>:
   108d4:	push	{fp, lr}
   108d8:	mov	fp, sp
   108dc:	sub	sp, sp, #128	; 0x80
   108e0:	movw	r0, #0
   108e4:	str	r0, [fp, #-4]
   108e8:	sub	r1, fp, #40	; 0x28
   108ec:	str	r0, [sp, #24]
   108f0:	mov	r0, r1
   108f4:	movw	r1, #0
   108f8:	and	r1, r1, #255	; 0xff
   108fc:	movw	r2, #26
   10900:	bl	107c0 <memset@plt>
   10904:	ldr	r0, [sp, #24]
   10908:	str	r0, [sp, #28]
   1090c:	sub	r1, fp, #14
   10910:	movw	r0, #3152	; 0xc50
   10914:	movt	r0, #1
   10918:	bl	107cc <__isoc99_scanf@plt>
   1091c:	ldrb	r1, [fp, #-14]
   10920:	cmp	r1, #46	; 0x2e
   10924:	str	r0, [sp, #20]
   10928:	bne	10930 <main@@Base+0x5c>
   1092c:	b	109f0 <main@@Base+0x11c>
   10930:	movw	r0, #3155	; 0xc53
   10934:	movt	r0, #1
   10938:	add	r1, sp, #32
   1093c:	bl	107cc <__isoc99_scanf@plt>
   10940:	sub	r1, fp, #40	; 0x28
   10944:	sub	lr, fp, #14
   10948:	movw	r2, #0
   1094c:	str	r2, [sp, #28]
   10950:	ldr	r2, [sp, #32]
   10954:	str	r0, [sp, #16]
   10958:	mov	r0, lr
   1095c:	bl	109fc <StringSet@@Base>
   10960:	add	r1, sp, #62	; 0x3e
   10964:	sub	r0, fp, #40	; 0x28
   10968:	bl	10a68 <R_ShiftString@@Base>
   1096c:	ldr	r0, [sp, #28]
   10970:	cmp	r0, #0
   10974:	movw	r0, #0
   10978:	movne	r0, #1
   1097c:	mvn	r1, #0
   10980:	eor	r0, r0, r1
   10984:	tst	r0, #1
   10988:	beq	109ec <main@@Base+0x118>
   1098c:	add	r1, sp, #62	; 0x3e
   10990:	sub	r0, fp, #40	; 0x28
   10994:	bl	1076c <strcmp@plt>
   10998:	cmp	r0, #0
   1099c:	bne	109a8 <main@@Base+0xd4>
   109a0:	movw	r0, #1
   109a4:	str	r0, [sp, #28]
   109a8:	sub	r1, fp, #40	; 0x28
   109ac:	movw	r0, #3158	; 0xc56
   109b0:	movt	r0, #1
   109b4:	bl	10778 <printf@plt>
   109b8:	sub	r1, fp, #40	; 0x28
   109bc:	add	lr, sp, #36	; 0x24
   109c0:	str	r0, [sp, #12]
   109c4:	mov	r0, lr
   109c8:	str	r1, [sp, #8]
   109cc:	str	lr, [sp, #4]
   109d0:	bl	10790 <strcpy@plt>
   109d4:	ldr	r1, [sp, #4]
   109d8:	str	r0, [sp]
   109dc:	mov	r0, r1
   109e0:	ldr	r1, [sp, #8]
   109e4:	bl	10b20 <L_ShiftString@@Base>
   109e8:	b	1096c <main@@Base+0x98>
   109ec:	b	1090c <main@@Base+0x38>
   109f0:	ldr	r0, [fp, #-4]
   109f4:	mov	sp, fp
   109f8:	pop	{fp, pc}

000109fc <StringSet@@Base>:
   109fc:	push	{fp, lr}
   10a00:	mov	fp, sp
   10a04:	sub	sp, sp, #24
   10a08:	str	r0, [fp, #-4]
   10a0c:	str	r1, [fp, #-8]
   10a10:	str	r2, [sp, #12]
   10a14:	ldr	r0, [fp, #-8]
   10a18:	movw	r1, #3161	; 0xc59
   10a1c:	movt	r1, #1
   10a20:	bl	10790 <strcpy@plt>
   10a24:	movw	r1, #0
   10a28:	str	r1, [sp, #8]
   10a2c:	str	r0, [sp, #4]
   10a30:	ldr	r0, [sp, #8]
   10a34:	ldr	r1, [sp, #12]
   10a38:	cmp	r0, r1
   10a3c:	bge	10a60 <StringSet@@Base+0x64>
   10a40:	ldr	r0, [fp, #-8]
   10a44:	ldr	r1, [fp, #-4]
   10a48:	bl	10784 <strcat@plt>
   10a4c:	str	r0, [sp]
   10a50:	ldr	r0, [sp, #8]
   10a54:	add	r0, r0, #1
   10a58:	str	r0, [sp, #8]
   10a5c:	b	10a30 <StringSet@@Base+0x34>
   10a60:	mov	sp, fp
   10a64:	pop	{fp, pc}

00010a68 <R_ShiftString@@Base>:
   10a68:	push	{fp, lr}
   10a6c:	mov	fp, sp
   10a70:	sub	sp, sp, #24
   10a74:	str	r0, [fp, #-4]
   10a78:	str	r1, [fp, #-8]
   10a7c:	ldr	r0, [fp, #-4]
   10a80:	ldr	r1, [fp, #-4]
   10a84:	str	r0, [sp, #8]
   10a88:	mov	r0, r1
   10a8c:	bl	107b4 <strlen@plt>
   10a90:	sub	r0, r0, #1
   10a94:	ldr	r1, [sp, #8]
   10a98:	add	r0, r1, r0
   10a9c:	ldrb	r0, [r0]
   10aa0:	ldr	r1, [fp, #-8]
   10aa4:	strb	r0, [r1]
   10aa8:	movw	r0, #1
   10aac:	str	r0, [sp, #12]
   10ab0:	ldr	r0, [sp, #12]
   10ab4:	ldr	r1, [fp, #-4]
   10ab8:	str	r0, [sp, #4]
   10abc:	mov	r0, r1
   10ac0:	bl	107b4 <strlen@plt>
   10ac4:	ldr	r1, [sp, #4]
   10ac8:	cmp	r1, r0
   10acc:	bcs	10b04 <R_ShiftString@@Base+0x9c>
   10ad0:	ldr	r0, [fp, #-4]
   10ad4:	ldr	r1, [sp, #12]
   10ad8:	sub	r1, r1, #1
   10adc:	add	r0, r0, r1
   10ae0:	ldrb	r0, [r0]
   10ae4:	ldr	r1, [fp, #-8]
   10ae8:	ldr	r2, [sp, #12]
   10aec:	add	r1, r1, r2
   10af0:	strb	r0, [r1]
   10af4:	ldr	r0, [sp, #12]
   10af8:	add	r0, r0, #1
   10afc:	str	r0, [sp, #12]
   10b00:	b	10ab0 <R_ShiftString@@Base+0x48>
   10b04:	ldr	r0, [fp, #-8]
   10b08:	ldr	r1, [sp, #12]
   10b0c:	add	r0, r0, r1
   10b10:	movw	r1, #0
   10b14:	strb	r1, [r0]
   10b18:	mov	sp, fp
   10b1c:	pop	{fp, pc}

00010b20 <L_ShiftString@@Base>:
   10b20:	push	{fp, lr}
   10b24:	mov	fp, sp
   10b28:	sub	sp, sp, #24
   10b2c:	str	r0, [fp, #-4]
   10b30:	str	r1, [fp, #-8]
   10b34:	ldr	r0, [fp, #-4]
   10b38:	ldrb	r0, [r0]
   10b3c:	ldr	r1, [fp, #-8]
   10b40:	ldr	r2, [fp, #-4]
   10b44:	str	r0, [sp, #8]
   10b48:	mov	r0, r2
   10b4c:	str	r1, [sp, #4]
   10b50:	bl	107b4 <strlen@plt>
   10b54:	sub	r0, r0, #1
   10b58:	ldr	r1, [sp, #4]
   10b5c:	add	r0, r1, r0
   10b60:	ldr	r1, [sp, #8]
   10b64:	strb	r1, [r0]
   10b68:	movw	r0, #1
   10b6c:	str	r0, [sp, #12]
   10b70:	ldr	r0, [sp, #12]
   10b74:	ldr	r1, [fp, #-4]
   10b78:	str	r0, [sp]
   10b7c:	mov	r0, r1
   10b80:	bl	107b4 <strlen@plt>
   10b84:	ldr	r1, [sp]
   10b88:	cmp	r1, r0
   10b8c:	bcs	10bc4 <L_ShiftString@@Base+0xa4>
   10b90:	ldr	r0, [fp, #-4]
   10b94:	ldr	r1, [sp, #12]
   10b98:	add	r0, r0, r1
   10b9c:	ldrb	r0, [r0]
   10ba0:	ldr	r1, [fp, #-8]
   10ba4:	ldr	r2, [sp, #12]
   10ba8:	sub	r2, r2, #1
   10bac:	add	r1, r1, r2
   10bb0:	strb	r0, [r1]
   10bb4:	ldr	r0, [sp, #12]
   10bb8:	add	r0, r0, #1
   10bbc:	str	r0, [sp, #12]
   10bc0:	b	10b70 <L_ShiftString@@Base+0x50>
   10bc4:	ldr	r0, [fp, #-8]
   10bc8:	ldr	r1, [sp, #12]
   10bcc:	add	r0, r0, r1
   10bd0:	movw	r1, #0
   10bd4:	strb	r1, [r0]
   10bd8:	mov	sp, fp
   10bdc:	pop	{fp, pc}

00010be0 <__libc_csu_init@@Base>:
   10be0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10be4:	mov	r7, r0
   10be8:	ldr	r6, [pc, #72]	; 10c38 <__libc_csu_init@@Base+0x58>
   10bec:	ldr	r5, [pc, #72]	; 10c3c <__libc_csu_init@@Base+0x5c>
   10bf0:	add	r6, pc, r6
   10bf4:	add	r5, pc, r5
   10bf8:	sub	r6, r6, r5
   10bfc:	mov	r8, r1
   10c00:	mov	r9, r2
   10c04:	bl	1074c <strcmp@plt-0x20>
   10c08:	asrs	r6, r6, #2
   10c0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c10:	mov	r4, #0
   10c14:	add	r4, r4, #1
   10c18:	ldr	r3, [r5], #4
   10c1c:	mov	r2, r9
   10c20:	mov	r1, r8
   10c24:	mov	r0, r7
   10c28:	blx	r3
   10c2c:	cmp	r6, r4
   10c30:	bne	10c14 <__libc_csu_init@@Base+0x34>
   10c34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c38:	andeq	r0, r1, r4, lsl r3
   10c3c:	andeq	r0, r1, ip, lsl #6

00010c40 <__libc_csu_fini@@Base>:
   10c40:	bx	lr

Disassembly of section .fini:

00010c44 <.fini>:
   10c44:	push	{r3, lr}
   10c48:	pop	{r3, pc}
