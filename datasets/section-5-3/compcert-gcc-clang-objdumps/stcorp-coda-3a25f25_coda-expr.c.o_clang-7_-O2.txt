
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-expr.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_expression_new>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #20
       c:	mov	r7, r0
      10:	sub	r0, r0, #18
      14:	mov	sl, r3
      18:	mov	r6, r2
      1c:	mov	r5, r1
      20:	cmp	r0, #42	; 0x2a
      24:	bhi	4d4 <coda_expression_new+0x4d4>
      28:	add	r1, pc, #0
      2c:	ldr	pc, [r1, r0, lsl #2]
      30:	.word	0x000000dc
      34:	.word	0x00000124
      38:	.word	0x0000018c
      3c:	.word	0x000001f8
      40:	.word	0x00000234
      44:	.word	0x000004d4
      48:	.word	0x000004d4
      4c:	.word	0x000004d4
      50:	.word	0x000004d4
      54:	.word	0x000004d4
      58:	.word	0x000004d4
      5c:	.word	0x000004d4
      60:	.word	0x000004d4
      64:	.word	0x000004d4
      68:	.word	0x000004d4
      6c:	.word	0x000004d4
      70:	.word	0x000004d4
      74:	.word	0x000004d4
      78:	.word	0x000004d4
      7c:	.word	0x000004d4
      80:	.word	0x000004d4
      84:	.word	0x000004d4
      88:	.word	0x000004d4
      8c:	.word	0x000004d4
      90:	.word	0x000004d4
      94:	.word	0x000004d4
      98:	.word	0x000004d4
      9c:	.word	0x000004d4
      a0:	.word	0x000004d4
      a4:	.word	0x000004d4
      a8:	.word	0x000004d4
      ac:	.word	0x000004d4
      b0:	.word	0x000004d4
      b4:	.word	0x000004d4
      b8:	.word	0x000004d4
      bc:	.word	0x000004d4
      c0:	.word	0x000004d4
      c4:	.word	0x000004d4
      c8:	.word	0x000004d4
      cc:	.word	0x000004d4
      d0:	.word	0x000004d4
      d4:	.word	0x000004d4
      d8:	.word	0x000004ac
      dc:	mov	r0, #16
      e0:	bl	0 <malloc>
      e4:	cmp	r0, #0
      e8:	beq	6f8 <coda_expression_new+0x6f8>
      ec:	ldrb	r3, [r5]
      f0:	mov	r4, r0
      f4:	mov	r1, #18
      f8:	mov	r0, #0
      fc:	mov	r2, #1
     100:	str	r1, [r4]
     104:	orr	r3, r3, #32
     108:	sub	r3, r3, #116	; 0x74
     10c:	clz	r3, r3
     110:	lsr	r3, r3, #5
     114:	stmib	r4, {r0, r2, r3}
     118:	mov	r0, r5
     11c:	bl	0 <free>
     120:	b	878 <coda_expression_new+0x878>
     124:	mov	r0, r5
     128:	bl	0 <strlen>
     12c:	mov	r1, r0
     130:	add	r2, sp, #8
     134:	mov	r0, r5
     138:	mov	r3, #0
     13c:	mov	r4, #0
     140:	bl	0 <coda_ascii_parse_double>
     144:	mov	r6, r0
     148:	mov	r0, r5
     14c:	bl	0 <free>
     150:	cmp	r6, #0
     154:	blt	878 <coda_expression_new+0x878>
     158:	mov	r0, #24
     15c:	bl	0 <malloc>
     160:	cmp	r0, #0
     164:	beq	7ac <coda_expression_new+0x7ac>
     168:	mov	r2, #19
     16c:	mov	r1, #2
     170:	mov	r3, #1
     174:	mov	r4, r0
     178:	str	r2, [r0]
     17c:	stmib	r0, {r1, r3}
     180:	vldr	d16, [sp, #8]
     184:	vstr	d16, [r0, #16]
     188:	b	878 <coda_expression_new+0x878>
     18c:	mov	r0, r5
     190:	bl	0 <strlen>
     194:	mov	r1, r0
     198:	add	r2, sp, #8
     19c:	mov	r0, r5
     1a0:	mov	r3, #0
     1a4:	mov	r4, #0
     1a8:	bl	0 <coda_ascii_parse_int64>
     1ac:	mov	r6, r0
     1b0:	mov	r0, r5
     1b4:	bl	0 <free>
     1b8:	cmp	r6, #0
     1bc:	blt	878 <coda_expression_new+0x878>
     1c0:	mov	r0, #24
     1c4:	bl	0 <malloc>
     1c8:	cmp	r0, #0
     1cc:	beq	7b4 <coda_expression_new+0x7b4>
     1d0:	mov	r2, #20
     1d4:	ldr	r3, [sp, #12]
     1d8:	mov	r1, #1
     1dc:	mov	r4, r0
     1e0:	str	r2, [r0]
     1e4:	ldr	r2, [sp, #8]
     1e8:	str	r1, [r0, #4]
     1ec:	str	r1, [r0, #8]
     1f0:	strd	r2, [r0, #16]
     1f4:	b	878 <coda_expression_new+0x878>
     1f8:	mov	r0, #20
     1fc:	bl	0 <malloc>
     200:	cmp	r0, #0
     204:	beq	72c <coda_expression_new+0x72c>
     208:	mov	r4, r0
     20c:	mov	r1, #21
     210:	mov	r0, #3
     214:	mov	r2, #1
     218:	str	r1, [r4]
     21c:	stmib	r4, {r0, r2}
     220:	mov	r0, r5
     224:	bl	0 <strlen>
     228:	str	r0, [r4, #12]
     22c:	str	r5, [r4, #16]
     230:	b	878 <coda_expression_new+0x878>
     234:	cmp	r5, #0
     238:	beq	734 <coda_expression_new+0x734>
     23c:	mov	lr, #0
     240:	mov	sl, #12
     244:	mov	r2, #10
     248:	mov	r3, #13
     24c:	mov	r7, #9
     250:	mov	ip, #11
     254:	mov	r6, #0
     258:	b	264 <coda_expression_new+0x264>
     25c:	add	lr, r8, #1
     260:	add	r6, r6, #1
     264:	ldrb	r4, [r5, lr]
     268:	cmp	r4, #92	; 0x5c
     26c:	beq	284 <coda_expression_new+0x284>
     270:	cmp	r4, #0
     274:	beq	67c <coda_expression_new+0x67c>
     278:	strb	r4, [r5, r6]
     27c:	mov	r8, lr
     280:	b	25c <coda_expression_new+0x25c>
     284:	add	r8, lr, #1
     288:	ldrb	r9, [r5, r8]
     28c:	sub	r0, r9, #34	; 0x22
     290:	cmp	r0, #84	; 0x54
     294:	bhi	3fc <coda_expression_new+0x3fc>
     298:	add	r4, pc, #0
     29c:	ldr	pc, [r4, r0, lsl #2]
     2a0:	.word	0x000003f4
     2a4:	.word	0x000003fc
     2a8:	.word	0x000003fc
     2ac:	.word	0x000003fc
     2b0:	.word	0x000003fc
     2b4:	.word	0x00000458
     2b8:	.word	0x000003fc
     2bc:	.word	0x000003fc
     2c0:	.word	0x000003fc
     2c4:	.word	0x000003fc
     2c8:	.word	0x000003fc
     2cc:	.word	0x000003fc
     2d0:	.word	0x000003fc
     2d4:	.word	0x000003fc
     2d8:	.word	0x000003fc
     2dc:	.word	0x000003fc
     2e0:	.word	0x000003fc
     2e4:	.word	0x000003fc
     2e8:	.word	0x000003fc
     2ec:	.word	0x000003fc
     2f0:	.word	0x000003fc
     2f4:	.word	0x000003fc
     2f8:	.word	0x000003fc
     2fc:	.word	0x000003fc
     300:	.word	0x000003fc
     304:	.word	0x000003fc
     308:	.word	0x000003fc
     30c:	.word	0x000003fc
     310:	.word	0x000003fc
     314:	.word	0x000003fc
     318:	.word	0x000003fc
     31c:	.word	0x000003fc
     320:	.word	0x000003fc
     324:	.word	0x000003fc
     328:	.word	0x000003fc
     32c:	.word	0x000003fc
     330:	.word	0x000003fc
     334:	.word	0x000003fc
     338:	.word	0x000003fc
     33c:	.word	0x000003fc
     340:	.word	0x000003fc
     344:	.word	0x000003fc
     348:	.word	0x000003fc
     34c:	.word	0x000003fc
     350:	.word	0x000003fc
     354:	.word	0x000003fc
     358:	.word	0x000003fc
     35c:	.word	0x000003fc
     360:	.word	0x000003fc
     364:	.word	0x000003fc
     368:	.word	0x000003fc
     36c:	.word	0x000003fc
     370:	.word	0x000003fc
     374:	.word	0x000003fc
     378:	.word	0x000003fc
     37c:	.word	0x000003fc
     380:	.word	0x000003fc
     384:	.word	0x000003fc
     388:	.word	0x00000460
     38c:	.word	0x000003fc
     390:	.word	0x000003fc
     394:	.word	0x000003fc
     398:	.word	0x000003fc
     39c:	.word	0x00000468
     3a0:	.word	0x00000470
     3a4:	.word	0x000003fc
     3a8:	.word	0x000003fc
     3ac:	.word	0x00000478
     3b0:	.word	0x00000484
     3b4:	.word	0x000003fc
     3b8:	.word	0x000003fc
     3bc:	.word	0x000003fc
     3c0:	.word	0x000003fc
     3c4:	.word	0x000003fc
     3c8:	.word	0x000003fc
     3cc:	.word	0x000003fc
     3d0:	.word	0x0000048c
     3d4:	.word	0x000003fc
     3d8:	.word	0x000003fc
     3dc:	.word	0x000003fc
     3e0:	.word	0x00000494
     3e4:	.word	0x000003fc
     3e8:	.word	0x0000049c
     3ec:	.word	0x000003fc
     3f0:	.word	0x000004a4
     3f4:	mov	r0, #34	; 0x22
     3f8:	b	47c <coda_expression_new+0x47c>
     3fc:	sub	r0, r9, #48	; 0x30
     400:	uxtb	r0, r0
     404:	cmp	r0, #10
     408:	lslcc	r4, r9, #6
     40c:	addcc	r0, r5, lr
     410:	strbcc	r4, [r5, r6]
     414:	ldrbcc	r0, [r0, #2]
     418:	subcc	r1, r0, #48	; 0x30
     41c:	uxtbcc	r1, r1
     420:	cmpcc	r1, #10
     424:	bcs	810 <coda_expression_new+0x810>
     428:	mvn	r1, #127	; 0x7f
     42c:	add	r8, lr, #3
     430:	eor	r0, r1, r0, lsl #3
     434:	add	r4, r0, r4
     438:	strb	r4, [r5, r6]
     43c:	ldrb	r0, [r5, r8]
     440:	sub	r0, r0, #48	; 0x30
     444:	uxtb	r1, r0
     448:	cmp	r1, #10
     44c:	bcs	810 <coda_expression_new+0x810>
     450:	add	r0, r0, r4
     454:	b	47c <coda_expression_new+0x47c>
     458:	mov	r0, #39	; 0x27
     45c:	b	47c <coda_expression_new+0x47c>
     460:	mov	r0, #92	; 0x5c
     464:	b	47c <coda_expression_new+0x47c>
     468:	mov	r0, #7
     46c:	b	47c <coda_expression_new+0x47c>
     470:	mov	r0, #8
     474:	b	47c <coda_expression_new+0x47c>
     478:	mov	r0, #27
     47c:	strb	r0, [r5, r6]
     480:	b	25c <coda_expression_new+0x25c>
     484:	strb	sl, [r5, r6]
     488:	b	25c <coda_expression_new+0x25c>
     48c:	strb	r2, [r5, r6]
     490:	b	25c <coda_expression_new+0x25c>
     494:	strb	r3, [r5, r6]
     498:	b	25c <coda_expression_new+0x25c>
     49c:	strb	r7, [r5, r6]
     4a0:	b	25c <coda_expression_new+0x25c>
     4a4:	strb	ip, [r5, r6]
     4a8:	b	25c <coda_expression_new+0x25c>
     4ac:	ldr	r0, [r6]
     4b0:	cmp	r0, #20
     4b4:	beq	794 <coda_expression_new+0x794>
     4b8:	cmp	r0, #19
     4bc:	bne	4d4 <coda_expression_new+0x4d4>
     4c0:	vldr	d16, [r6, #16]
     4c4:	mov	r4, r6
     4c8:	vneg.f64	d16, d16
     4cc:	vstr	d16, [r6, #16]
     4d0:	b	878 <coda_expression_new+0x878>
     4d4:	ldr	r8, [fp, #12]
     4d8:	ldr	r9, [fp, #8]
     4dc:	mov	r0, #32
     4e0:	bl	0 <malloc>
     4e4:	cmp	r0, #0
     4e8:	beq	688 <coda_expression_new+0x688>
     4ec:	mov	r4, r0
     4f0:	cmp	r7, #86	; 0x56
     4f4:	add	r1, r0, #12
     4f8:	str	r7, [r0]
     4fc:	stm	r1, {r5, r6, sl}
     500:	str	r9, [r0, #24]
     504:	str	r8, [r0, #28]
     508:	bhi	8a0 <coda_expression_new+0x8a0>
     50c:	add	r1, pc, #4
     510:	mov	r0, #0
     514:	ldr	pc, [r1, r7, lsl #2]
     518:	.word	0x0000083c
     51c:	.word	0x000007ec
     520:	.word	0x00000674
     524:	.word	0x00000824
     528:	.word	0x00000840
     52c:	.word	0x00000674
     530:	.word	0x00000840
     534:	.word	0x00000674
     538:	.word	0x00000824
     53c:	.word	0x00000824
     540:	.word	0x000007e4
     544:	.word	0x00000824
     548:	.word	0x00000674
     54c:	.word	0x00000674
     550:	.word	0x00000674
     554:	.word	0x00000674
     558:	.word	0x000007dc
     55c:	.word	0x0000082c
     560:	.word	0x000008a0
     564:	.word	0x000008a0
     568:	.word	0x000008a0
     56c:	.word	0x000008a0
     570:	.word	0x000008a0
     574:	.word	0x00000674
     578:	.word	0x000007ec
     57c:	.word	0x00000840
     580:	.word	0x00000840
     584:	.word	0x00000674
     588:	.word	0x000007dc
     58c:	.word	0x0000082c
     590:	.word	0x0000082c
     594:	.word	0x00000834
     598:	.word	0x000007e4
     59c:	.word	0x000007e4
     5a0:	.word	0x000007e4
     5a4:	.word	0x000007e4
     5a8:	.word	0x000007e4
     5ac:	.word	0x000007e4
     5b0:	.word	0x000007e4
     5b4:	.word	0x00000834
     5b8:	.word	0x00000840
     5bc:	.word	0x00000840
     5c0:	.word	0x00000824
     5c4:	.word	0x00000674
     5c8:	.word	0x00000674
     5cc:	.word	0x00000674
     5d0:	.word	0x00000840
     5d4:	.word	0x00000840
     5d8:	.word	0x00000840
     5dc:	.word	0x00000840
     5e0:	.word	0x00000674
     5e4:	.word	0x00000840
     5e8:	.word	0x00000840
     5ec:	.word	0x00000840
     5f0:	.word	0x00000840
     5f4:	.word	0x000007dc
     5f8:	.word	0x000007ec
     5fc:	.word	0x000007ec
     600:	.word	0x000007ec
     604:	.word	0x000007ec
     608:	.word	0x0000083c
     60c:	.word	0x00000840
     610:	.word	0x00000840
     614:	.word	0x00000674
     618:	.word	0x00000674
     61c:	.word	0x00000674
     620:	.word	0x0000082c
     624:	.word	0x000007dc
     628:	.word	0x000007dc
     62c:	.word	0x000007dc
     630:	.word	0x00000674
     634:	.word	0x00000890
     638:	.word	0x0000082c
     63c:	.word	0x000007dc
     640:	.word	0x00000834
     644:	.word	0x000007dc
     648:	.word	0x000007dc
     64c:	.word	0x000007dc
     650:	.word	0x000007ec
     654:	.word	0x0000082c
     658:	.word	0x000007dc
     65c:	.word	0x00000674
     660:	.word	0x00000840
     664:	.word	0x00000674
     668:	.word	0x00000834
     66c:	.word	0x00000674
     670:	.word	0x00000824
     674:	mov	r0, #1
     678:	b	840 <coda_expression_new+0x840>
     67c:	mov	r0, #0
     680:	strb	r0, [r5, r6]
     684:	b	738 <coda_expression_new+0x738>
     688:	movw	r1, #0
     68c:	movw	r3, #0
     690:	movw	r0, #387	; 0x183
     694:	mov	r2, #32
     698:	str	r0, [sp]
     69c:	movt	r1, #0
     6a0:	movt	r3, #0
     6a4:	mvn	r0, #0
     6a8:	bl	0 <coda_set_error>
     6ac:	cmp	r5, #0
     6b0:	beq	6bc <coda_expression_new+0x6bc>
     6b4:	mov	r0, r5
     6b8:	bl	0 <free>
     6bc:	cmp	r6, #0
     6c0:	movne	r0, r6
     6c4:	blne	904 <coda_expression_delete>
     6c8:	cmp	sl, #0
     6cc:	movne	r0, sl
     6d0:	blne	904 <coda_expression_delete>
     6d4:	cmp	r9, #0
     6d8:	movne	r0, r9
     6dc:	blne	904 <coda_expression_delete>
     6e0:	mov	r4, #0
     6e4:	cmp	r8, #0
     6e8:	beq	878 <coda_expression_new+0x878>
     6ec:	mov	r0, r8
     6f0:	bl	904 <coda_expression_delete>
     6f4:	b	878 <coda_expression_new+0x878>
     6f8:	movw	r1, #0
     6fc:	movw	r3, #0
     700:	mov	r0, #232	; 0xe8
     704:	mov	r2, #16
     708:	str	r0, [sp]
     70c:	movt	r1, #0
     710:	movt	r3, #0
     714:	mvn	r0, #0
     718:	bl	0 <coda_set_error>
     71c:	mov	r0, r5
     720:	bl	0 <free>
     724:	mov	r4, #0
     728:	b	878 <coda_expression_new+0x878>
     72c:	movw	r0, #307	; 0x133
     730:	b	76c <coda_expression_new+0x76c>
     734:	mov	r6, #0
     738:	mov	r0, #20
     73c:	bl	0 <malloc>
     740:	cmp	r0, #0
     744:	beq	768 <coda_expression_new+0x768>
     748:	mov	r4, r0
     74c:	mov	r1, #22
     750:	mov	r0, #3
     754:	mov	r2, #1
     758:	str	r1, [r4]
     75c:	stmib	r4, {r0, r2, r6}
     760:	str	r5, [r4, #16]
     764:	b	878 <coda_expression_new+0x878>
     768:	movw	r0, #335	; 0x14f
     76c:	movw	r1, #0
     770:	movw	r3, #0
     774:	str	r0, [sp]
     778:	mvn	r0, #0
     77c:	mov	r2, #20
     780:	movt	r1, #0
     784:	movt	r3, #0
     788:	bl	0 <coda_set_error>
     78c:	mov	r4, #0
     790:	b	878 <coda_expression_new+0x878>
     794:	ldrd	r0, [r6, #16]
     798:	mov	r4, r6
     79c:	rsbs	r0, r0, #0
     7a0:	rsc	r1, r1, #0
     7a4:	strd	r0, [r6, #16]
     7a8:	b	878 <coda_expression_new+0x878>
     7ac:	movw	r0, #261	; 0x105
     7b0:	b	7b8 <coda_expression_new+0x7b8>
     7b4:	mov	r0, #288	; 0x120
     7b8:	movw	r1, #0
     7bc:	movw	r3, #0
     7c0:	str	r0, [sp]
     7c4:	mvn	r0, #0
     7c8:	mov	r2, #24
     7cc:	movt	r1, #0
     7d0:	movt	r3, #0
     7d4:	bl	0 <coda_set_error>
     7d8:	b	878 <coda_expression_new+0x878>
     7dc:	mov	r0, #3
     7e0:	b	840 <coda_expression_new+0x840>
     7e4:	mov	r0, #4
     7e8:	b	840 <coda_expression_new+0x840>
     7ec:	ldr	r1, [r6, #4]
     7f0:	mov	r0, #2
     7f4:	cmp	r1, #2
     7f8:	beq	840 <coda_expression_new+0x840>
     7fc:	ldr	r0, [sl, #4]
     800:	cmp	r0, #2
     804:	moveq	r1, r0
     808:	mov	r0, r1
     80c:	b	840 <coda_expression_new+0x840>
     810:	movw	r1, #0
     814:	mvn	r0, #102	; 0x66
     818:	movt	r1, #0
     81c:	bl	0 <coda_set_error>
     820:	b	71c <coda_expression_new+0x71c>
     824:	ldr	r0, [sl, #4]
     828:	b	840 <coda_expression_new+0x840>
     82c:	mov	r0, #2
     830:	b	840 <coda_expression_new+0x840>
     834:	mov	r0, #5
     838:	b	840 <coda_expression_new+0x840>
     83c:	ldr	r0, [r6, #4]
     840:	sub	r2, r7, #67	; 0x43
     844:	mov	r1, #0
     848:	str	r0, [r4, #4]
     84c:	cmp	r2, #18
     850:	bhi	868 <coda_expression_new+0x868>
     854:	movw	r5, #15
     858:	mov	r3, #1
     85c:	movt	r5, #7
     860:	tst	r5, r3, lsl r2
     864:	bne	874 <coda_expression_new+0x874>
     868:	sub	r2, r7, #27
     86c:	cmp	r2, #2
     870:	bcs	884 <coda_expression_new+0x884>
     874:	str	r1, [r4, #8]
     878:	mov	r0, r4
     87c:	sub	sp, fp, #28
     880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     884:	cmp	r0, #4
     888:	beq	874 <coda_expression_new+0x874>
     88c:	b	8a0 <coda_expression_new+0x8a0>
     890:	cmp	r9, #0
     894:	movne	r0, #3
     898:	moveq	r0, #0
     89c:	str	r0, [r4, #4]
     8a0:	cmp	r6, #0
     8a4:	beq	8b4 <coda_expression_new+0x8b4>
     8a8:	ldr	r0, [r6, #8]
     8ac:	cmp	r0, #0
     8b0:	beq	8f4 <coda_expression_new+0x8f4>
     8b4:	cmp	sl, #0
     8b8:	beq	8c8 <coda_expression_new+0x8c8>
     8bc:	ldr	r0, [sl, #8]
     8c0:	cmp	r0, #0
     8c4:	beq	8f4 <coda_expression_new+0x8f4>
     8c8:	cmp	r9, #0
     8cc:	beq	8dc <coda_expression_new+0x8dc>
     8d0:	ldr	r0, [r9, #8]
     8d4:	cmp	r0, #0
     8d8:	beq	8f4 <coda_expression_new+0x8f4>
     8dc:	cmp	r8, #0
     8e0:	beq	8fc <coda_expression_new+0x8fc>
     8e4:	ldr	r1, [r8, #8]
     8e8:	cmp	r1, #0
     8ec:	movwne	r1, #1
     8f0:	b	874 <coda_expression_new+0x874>
     8f4:	mov	r1, #0
     8f8:	b	874 <coda_expression_new+0x874>
     8fc:	mov	r1, #1
     900:	b	874 <coda_expression_new+0x874>

00000904 <coda_expression_delete>:
     904:	push	{r4, sl, fp, lr}
     908:	add	fp, sp, #8
     90c:	mov	r4, r0
     910:	ldr	r0, [r0]
     914:	sub	r1, r0, #18
     918:	cmp	r1, #3
     91c:	bcc	984 <coda_expression_delete+0x80>
     920:	sub	r0, r0, #21
     924:	cmp	r0, #1
     928:	bhi	940 <coda_expression_delete+0x3c>
     92c:	ldr	r0, [r4, #16]
     930:	cmp	r0, #0
     934:	beq	984 <coda_expression_delete+0x80>
     938:	bl	0 <free>
     93c:	b	984 <coda_expression_delete+0x80>
     940:	ldr	r0, [r4, #12]
     944:	cmp	r0, #0
     948:	beq	950 <coda_expression_delete+0x4c>
     94c:	bl	0 <free>
     950:	ldr	r0, [r4, #16]
     954:	cmp	r0, #0
     958:	blne	904 <coda_expression_delete>
     95c:	ldr	r0, [r4, #20]
     960:	cmp	r0, #0
     964:	blne	904 <coda_expression_delete>
     968:	ldr	r0, [r4, #24]
     96c:	cmp	r0, #0
     970:	blne	904 <coda_expression_delete>
     974:	ldr	r0, [r4, #28]
     978:	cmp	r0, #0
     97c:	beq	984 <coda_expression_delete+0x80>
     980:	bl	904 <coda_expression_delete>
     984:	mov	r0, r4
     988:	pop	{r4, sl, fp, lr}
     98c:	b	0 <free>

00000990 <coda_expression_eval_void>:
     990:	push	{r4, sl, fp, lr}
     994:	add	fp, sp, #8
     998:	sub	sp, sp, #568	; 0x238
     99c:	mov	r4, r0
     9a0:	ldr	r0, [r0, #4]
     9a4:	cmp	r0, #5
     9a8:	bne	9cc <coda_expression_eval_void+0x3c>
     9ac:	cmp	r1, #0
     9b0:	beq	9e8 <coda_expression_eval_void+0x58>
     9b4:	mov	r0, sp
     9b8:	mov	r2, #520	; 0x208
     9bc:	str	r1, [sp]
     9c0:	add	r0, r0, #8
     9c4:	bl	0 <memcpy>
     9c8:	b	9fc <coda_expression_eval_void+0x6c>
     9cc:	movw	r1, #0
     9d0:	movt	r1, #0
     9d4:	mvn	r0, #99	; 0x63
     9d8:	bl	0 <coda_set_error>
     9dc:	mvn	r0, #0
     9e0:	sub	sp, fp, #8
     9e4:	pop	{r4, sl, fp, pc}
     9e8:	ldr	r0, [r4, #8]
     9ec:	cmp	r0, #0
     9f0:	beq	a2c <coda_expression_eval_void+0x9c>
     9f4:	mov	r0, #0
     9f8:	str	r0, [sp]
     9fc:	mov	r0, sp
     a00:	vmov.i32	q8, #0	; 0x00000000
     a04:	add	r1, r0, #544	; 0x220
     a08:	vst1.64	{d16-d17}, [r1]
     a0c:	add	r1, r0, #528	; 0x210
     a10:	vst1.64	{d16-d17}, [r1]
     a14:	mov	r1, #0
     a18:	str	r1, [sp, #560]	; 0x230
     a1c:	mov	r1, r4
     a20:	bl	a38 <eval_void>
     a24:	sub	sp, fp, #8
     a28:	pop	{r4, sl, fp, pc}
     a2c:	movw	r1, #0
     a30:	movt	r1, #0
     a34:	b	9d4 <coda_expression_eval_void+0x44>

00000a38 <eval_void>:
     a38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     a3c:	add	fp, sp, #24
     a40:	sub	sp, sp, #24
     a44:	mov	r4, r0
     a48:	ldr	r0, [r1]
     a4c:	mov	r5, r1
     a50:	cmp	r0, #73	; 0x49
     a54:	bgt	b10 <eval_void+0xd8>
     a58:	cmp	r0, #31
     a5c:	bne	b40 <eval_void+0x108>
     a60:	mov	r0, #0
     a64:	add	r2, sp, #16
     a68:	str	r0, [sp, #4]
     a6c:	mov	r0, #1
     a70:	str	r0, [sp]
     a74:	ldr	r0, [r5, #12]
     a78:	ldr	r1, [r5, #16]
     a7c:	ldrb	r0, [r0]
     a80:	add	r6, r4, r0, lsl #3
     a84:	mov	r0, r4
     a88:	ldr	r8, [r6, #-312]!	; 0xfffffec8
     a8c:	ldr	r9, [r6, #4]
     a90:	bl	3c6c <eval_integer>
     a94:	cmp	r0, #0
     a98:	bne	bdc <eval_void+0x1a4>
     a9c:	ldr	r1, [r5, #20]
     aa0:	add	r2, sp, #8
     aa4:	mov	r0, r4
     aa8:	bl	3c6c <eval_integer>
     aac:	cmp	r0, #0
     ab0:	bne	bdc <eval_void+0x1a4>
     ab4:	ldr	r1, [r5, #24]
     ab8:	cmp	r1, #0
     abc:	beq	c40 <eval_void+0x208>
     ac0:	mov	r2, sp
     ac4:	mov	r0, r4
     ac8:	bl	3c6c <eval_integer>
     acc:	cmp	r0, #0
     ad0:	bne	bdc <eval_void+0x1a4>
     ad4:	ldm	sp, {ip, lr}
     ad8:	orrs	r0, ip, lr
     adc:	beq	cb0 <eval_void+0x278>
     ae0:	ldr	r0, [sp, #16]
     ae4:	ldr	r1, [sp, #20]
     ae8:	rsbs	r2, ip, #0
     aec:	rscs	r2, lr, #0
     af0:	strd	r0, [r6]
     af4:	ldr	r7, [sp, #8]
     af8:	ldr	r3, [sp, #12]
     afc:	blt	c54 <eval_void+0x21c>
     b00:	subs	r0, r0, r7
     b04:	sbcs	r0, r1, r3
     b08:	bge	c28 <eval_void+0x1f0>
     b0c:	b	ca4 <eval_void+0x26c>
     b10:	cmp	r0, #74	; 0x4a
     b14:	bne	b64 <eval_void+0x12c>
     b18:	ldr	r1, [r5, #16]
     b1c:	mov	r0, r4
     b20:	bl	a38 <eval_void>
     b24:	mvn	r6, #0
     b28:	cmp	r0, #0
     b2c:	bne	be0 <eval_void+0x1a8>
     b30:	ldr	r1, [r5, #20]
     b34:	mov	r0, r4
     b38:	bl	a38 <eval_void>
     b3c:	b	b58 <eval_void+0x120>
     b40:	cmp	r0, #39	; 0x27
     b44:	bne	cc4 <eval_void+0x28c>
     b48:	ldr	r1, [r5, #16]
     b4c:	mov	r0, r4
     b50:	bl	7c6c <eval_cursor>
     b54:	mvn	r6, #0
     b58:	cmp	r0, #0
     b5c:	moveq	r6, #0
     b60:	b	be0 <eval_void+0x1a8>
     b64:	cmp	r0, #84	; 0x54
     b68:	bne	cc4 <eval_void+0x28c>
     b6c:	mov	r0, #0
     b70:	str	r0, [sp, #20]
     b74:	str	r0, [sp, #16]
     b78:	ldr	r0, [r4]
     b7c:	cmp	r0, #0
     b80:	beq	ce4 <eval_void+0x2ac>
     b84:	ldr	r1, [r5, #16]
     b88:	cmp	r1, #0
     b8c:	beq	ba4 <eval_void+0x16c>
     b90:	add	r2, sp, #16
     b94:	mov	r0, r4
     b98:	bl	3c6c <eval_integer>
     b9c:	cmp	r0, #0
     ba0:	bne	bdc <eval_void+0x1a4>
     ba4:	ldr	r1, [r5, #20]
     ba8:	add	r2, sp, #8
     bac:	mov	r0, r4
     bb0:	bl	3c6c <eval_integer>
     bb4:	cmp	r0, #0
     bb8:	bne	bdc <eval_void+0x1a4>
     bbc:	ldr	r0, [r4]
     bc0:	ldr	r1, [r5, #12]
     bc4:	ldr	r2, [sp, #16]
     bc8:	mov	r3, sp
     bcc:	ldr	r0, [r0]
     bd0:	bl	0 <coda_product_variable_get_pointer>
     bd4:	cmp	r0, #0
     bd8:	beq	bec <eval_void+0x1b4>
     bdc:	mvn	r6, #0
     be0:	mov	r0, r6
     be4:	sub	sp, fp, #24
     be8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     bec:	ldr	r0, [sp]
     bf0:	ldr	r2, [sp, #8]
     bf4:	ldr	r3, [sp, #12]
     bf8:	strd	r2, [r0]
     bfc:	b	ca8 <eval_void+0x270>
     c00:	ldrd	r0, [r6]
     c04:	ldm	sp, {r2, r3}
     c08:	adds	r0, r0, r2
     c0c:	adc	r1, r1, r3
     c10:	strd	r0, [r6]
     c14:	ldr	r2, [sp, #8]
     c18:	ldr	r3, [sp, #12]
     c1c:	subs	r0, r0, r2
     c20:	sbcs	r0, r1, r3
     c24:	blt	ca4 <eval_void+0x26c>
     c28:	ldr	r1, [r5, #28]
     c2c:	mov	r0, r4
     c30:	bl	a38 <eval_void>
     c34:	cmp	r0, #0
     c38:	beq	c00 <eval_void+0x1c8>
     c3c:	b	bdc <eval_void+0x1a4>
     c40:	ldr	r0, [sp, #16]
     c44:	ldr	r1, [sp, #20]
     c48:	strd	r0, [r6]
     c4c:	ldr	r7, [sp, #8]
     c50:	ldr	r3, [sp, #12]
     c54:	subs	r0, r7, r0
     c58:	sbcs	r0, r3, r1
     c5c:	bge	c8c <eval_void+0x254>
     c60:	b	ca4 <eval_void+0x26c>
     c64:	ldrd	r0, [r6]
     c68:	ldm	sp, {r2, r3}
     c6c:	adds	r0, r0, r2
     c70:	adc	r1, r1, r3
     c74:	strd	r0, [r6]
     c78:	ldr	r2, [sp, #8]
     c7c:	ldr	r3, [sp, #12]
     c80:	subs	r0, r2, r0
     c84:	sbcs	r0, r3, r1
     c88:	blt	ca4 <eval_void+0x26c>
     c8c:	ldr	r1, [r5, #28]
     c90:	mov	r0, r4
     c94:	bl	a38 <eval_void>
     c98:	cmp	r0, #0
     c9c:	beq	c64 <eval_void+0x22c>
     ca0:	b	bdc <eval_void+0x1a4>
     ca4:	strd	r8, [r6]
     ca8:	mov	r6, #0
     cac:	b	be0 <eval_void+0x1a8>
     cb0:	movw	r1, #0
     cb4:	mvn	r0, #400	; 0x190
     cb8:	movt	r1, #0
     cbc:	bl	0 <coda_set_error>
     cc0:	b	bdc <eval_void+0x1a4>
     cc4:	movw	r0, #0
     cc8:	movw	r1, #0
     ccc:	movw	r3, #0
     cd0:	movw	r2, #3902	; 0xf3e
     cd4:	movt	r0, #0
     cd8:	movt	r1, #0
     cdc:	movt	r3, #0
     ce0:	bl	0 <__assert_fail>
     ce4:	movw	r0, #0
     ce8:	movw	r1, #0
     cec:	movw	r3, #0
     cf0:	movw	r2, #3881	; 0xf29
     cf4:	movt	r0, #0
     cf8:	movt	r1, #0
     cfc:	movt	r3, #0
     d00:	bl	0 <__assert_fail>

00000d04 <coda_expression_print_html>:
     d04:	push	{fp, lr}
     d08:	mov	fp, sp
     d0c:	sub	sp, sp, #8
     d10:	mov	r2, #15
     d14:	mov	r3, #1
     d18:	str	r2, [sp]
     d1c:	mov	r2, #1
     d20:	bl	d30 <print_expression>
     d24:	mov	r0, #0
     d28:	mov	sp, fp
     d2c:	pop	{fp, pc}

00000d30 <print_expression>:
     d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d34:	add	fp, sp, #28
     d38:	sub	sp, sp, #44	; 0x2c
     d3c:	cmp	r0, #0
     d40:	beq	23b0 <print_expression+0x1680>
     d44:	mov	r6, r0
     d48:	ldr	r0, [r0]
     d4c:	cmp	r0, #86	; 0x56
     d50:	bhi	20c4 <print_expression+0x1394>
     d54:	ldr	r7, [fp, #8]
     d58:	mov	r5, r2
     d5c:	mov	r2, r1
     d60:	add	r1, pc, #4
     d64:	mov	r4, r3
     d68:	ldr	pc, [r1, r0, lsl #2]
     d6c:	.word	0x0000195c
     d70:	.word	0x00001970
     d74:	.word	0x000019b0
     d78:	.word	0x00001a2c
     d7c:	.word	0x00001620
     d80:	.word	0x00001a40
     d84:	.word	0x00001a54
     d88:	.word	0x00001a68
     d8c:	.word	0x00000ec8
     d90:	.word	0x0000123c
     d94:	.word	0x00001634
     d98:	.word	0x00001a7c
     d9c:	.word	0x00001648
     da0:	.word	0x00001ad0
     da4:	.word	0x0000165c
     da8:	.word	0x00001ae4
     dac:	.word	0x00001af8
     db0:	.word	0x00001b98
     db4:	.word	0x00001bac
     db8:	.word	0x00001bcc
     dbc:	.word	0x00001be4
     dc0:	.word	0x00000edc
     dc4:	.word	0x00000edc
     dc8:	.word	0x00001670
     dcc:	.word	0x00001f3c
     dd0:	.word	0x000016b8
     dd4:	.word	0x00001c10
     dd8:	.word	0x00001c24
     ddc:	.word	0x00001c38
     de0:	.word	0x00001c4c
     de4:	.word	0x00001c60
     de8:	.word	0x000016f8
     dec:	.word	0x000017d0
     df0:	.word	0x00001338
     df4:	.word	0x00001374
     df8:	.word	0x00001380
     dfc:	.word	0x00001f7c
     e00:	.word	0x00001c74
     e04:	.word	0x00001814
     e08:	.word	0x00001cb8
     e0c:	.word	0x00001ccc
     e10:	.word	0x000013d0
     e14:	.word	0x00001820
     e18:	.word	0x00001d20
     e1c:	.word	0x00001f88
     e20:	.word	0x00001424
     e24:	.word	0x00001884
     e28:	.word	0x00001898
     e2c:	.word	0x000012e0
     e30:	.word	0x000020e0
     e34:	.word	0x00001fb0
     e38:	.word	0x00001438
     e3c:	.word	0x00001fc4
     e40:	.word	0x0000204c
     e44:	.word	0x0000148c
     e48:	.word	0x00001d34
     e4c:	.word	0x00000ec8
     e50:	.word	0x0000123c
     e54:	.word	0x000018ac
     e58:	.word	0x00001d48
     e5c:	.word	0x000018ec
     e60:	.word	0x00001d88
     e64:	.word	0x00001dc8
     e68:	.word	0x00001de8
     e6c:	.word	0x000018f8
     e70:	.word	0x00001dfc
     e74:	.word	0x00001508
     e78:	.word	0x0000190c
     e7c:	.word	0x000020f4
     e80:	.word	0x00001548
     e84:	.word	0x000012f4
     e88:	.word	0x0000155c
     e8c:	.word	0x000020cc
     e90:	.word	0x00002118
     e94:	.word	0x0000216c
     e98:	.word	0x000015f8
     e9c:	.word	0x00001e3c
     ea0:	.word	0x00001308
     ea4:	.word	0x000021a8
     ea8:	.word	0x00001324
     eac:	.word	0x0000160c
     eb0:	.word	0x00001920
     eb4:	.word	0x00001934
     eb8:	.word	0x00001250
     ebc:	.word	0x00001264
     ec0:	.word	0x00001ec0
     ec4:	.word	0x00001f14
     ec8:	movw	r1, #0
     ecc:	movw	r0, #0
     ed0:	movt	r1, #0
     ed4:	movt	r0, #0
     ed8:	b	1a8c <print_expression+0xd5c>
     edc:	movw	r0, #0
     ee0:	movw	r8, #0
     ee4:	cmp	r5, #0
     ee8:	mov	r9, r2
     eec:	movt	r0, #0
     ef0:	movt	r8, #0
     ef4:	moveq	r8, r0
     ef8:	mov	r0, r8
     efc:	blx	r2
     f00:	ldr	r7, [r6, #16]
     f04:	mov	r2, r9
     f08:	cmp	r7, #0
     f0c:	ldrne	r6, [r6, #12]
     f10:	cmpne	r6, #0
     f14:	beq	1234 <print_expression+0x504>
     f18:	cmn	r6, #1
     f1c:	bgt	f38 <print_expression+0x208>
     f20:	mov	r0, r7
     f24:	bl	0 <strlen>
     f28:	mov	r2, r9
     f2c:	mov	r6, r0
     f30:	cmp	r0, #1
     f34:	blt	1234 <print_expression+0x504>
     f38:	movw	r0, #0
     f3c:	movw	r1, #0
     f40:	cmp	r5, #0
     f44:	movw	r3, #0
     f48:	movt	r0, #0
     f4c:	movt	r1, #0
     f50:	movt	r3, #0
     f54:	moveq	r1, r0
     f58:	orrs	r0, r4, r5
     f5c:	movw	r4, #0
     f60:	movw	r5, #0
     f64:	str	r1, [sp, #16]
     f68:	movw	r1, #0
     f6c:	movt	r4, #0
     f70:	movt	r5, #0
     f74:	movt	r1, #0
     f78:	moveq	r3, r1
     f7c:	movw	r1, #0
     f80:	str	r3, [sp, #12]
     f84:	movw	r3, #0
     f88:	movt	r1, #0
     f8c:	movt	r3, #0
     f90:	moveq	r3, r1
     f94:	movw	r1, #0
     f98:	cmp	r0, #0
     f9c:	movw	r0, #0
     fa0:	movt	r1, #0
     fa4:	movt	r0, #0
     fa8:	str	r3, [sp, #8]
     fac:	moveq	r4, r1
     fb0:	moveq	r5, r0
     fb4:	ldrb	sl, [r7]
     fb8:	sub	r0, sl, #7
     fbc:	cmp	r0, #85	; 0x55
     fc0:	bhi	11f0 <print_expression+0x4c0>
     fc4:	add	r1, pc, #0
     fc8:	ldr	pc, [r1, r0, lsl #2]
     fcc:	.word	0x00001124
     fd0:	.word	0x00001188
     fd4:	.word	0x00001198
     fd8:	.word	0x000011a8
     fdc:	.word	0x00001134
     fe0:	.word	0x00001144
     fe4:	.word	0x000011b8
     fe8:	.word	0x000011f0
     fec:	.word	0x000011f0
     ff0:	.word	0x000011f0
     ff4:	.word	0x000011f0
     ff8:	.word	0x000011f0
     ffc:	.word	0x000011f0
    1000:	.word	0x000011f0
    1004:	.word	0x000011f0
    1008:	.word	0x000011f0
    100c:	.word	0x000011f0
    1010:	.word	0x000011f0
    1014:	.word	0x000011f0
    1018:	.word	0x000011f0
    101c:	.word	0x000011c8
    1020:	.word	0x000011f0
    1024:	.word	0x000011f0
    1028:	.word	0x000011f0
    102c:	.word	0x000011f0
    1030:	.word	0x000011d8
    1034:	.word	0x000011f0
    1038:	.word	0x000011e4
    103c:	.word	0x000011f0
    1040:	.word	0x000011f0
    1044:	.word	0x000011f0
    1048:	.word	0x00001154
    104c:	.word	0x000011f0
    1050:	.word	0x000011f0
    1054:	.word	0x000011f0
    1058:	.word	0x000011f0
    105c:	.word	0x000011f0
    1060:	.word	0x000011f0
    1064:	.word	0x000011f0
    1068:	.word	0x000011f0
    106c:	.word	0x000011f0
    1070:	.word	0x000011f0
    1074:	.word	0x000011f0
    1078:	.word	0x000011f0
    107c:	.word	0x000011f0
    1080:	.word	0x000011f0
    1084:	.word	0x000011f0
    1088:	.word	0x000011f0
    108c:	.word	0x000011f0
    1090:	.word	0x000011f0
    1094:	.word	0x000011f0
    1098:	.word	0x000011f0
    109c:	.word	0x000011f0
    10a0:	.word	0x00001160
    10a4:	.word	0x000011f0
    10a8:	.word	0x0000116c
    10ac:	.word	0x000011f0
    10b0:	.word	0x000011f0
    10b4:	.word	0x000011f0
    10b8:	.word	0x000011f0
    10bc:	.word	0x000011f0
    10c0:	.word	0x000011f0
    10c4:	.word	0x000011f0
    10c8:	.word	0x000011f0
    10cc:	.word	0x000011f0
    10d0:	.word	0x000011f0
    10d4:	.word	0x000011f0
    10d8:	.word	0x000011f0
    10dc:	.word	0x000011f0
    10e0:	.word	0x000011f0
    10e4:	.word	0x000011f0
    10e8:	.word	0x000011f0
    10ec:	.word	0x000011f0
    10f0:	.word	0x000011f0
    10f4:	.word	0x000011f0
    10f8:	.word	0x000011f0
    10fc:	.word	0x000011f0
    1100:	.word	0x000011f0
    1104:	.word	0x000011f0
    1108:	.word	0x000011f0
    110c:	.word	0x000011f0
    1110:	.word	0x000011f0
    1114:	.word	0x000011f0
    1118:	.word	0x000011f0
    111c:	.word	0x000011f0
    1120:	.word	0x00001178
    1124:	movw	r0, #0
    1128:	movt	r0, #0
    112c:	blx	r2
    1130:	b	1224 <print_expression+0x4f4>
    1134:	movw	r0, #0
    1138:	movt	r0, #0
    113c:	blx	r2
    1140:	b	1224 <print_expression+0x4f4>
    1144:	movw	r0, #0
    1148:	movt	r0, #0
    114c:	blx	r2
    1150:	b	1224 <print_expression+0x4f4>
    1154:	ldr	r0, [sp, #8]
    1158:	blx	r2
    115c:	b	1224 <print_expression+0x4f4>
    1160:	mov	r0, r5
    1164:	blx	r2
    1168:	b	1224 <print_expression+0x4f4>
    116c:	mov	r0, r4
    1170:	blx	r2
    1174:	b	1224 <print_expression+0x4f4>
    1178:	movw	r0, #0
    117c:	movt	r0, #0
    1180:	blx	r2
    1184:	b	1224 <print_expression+0x4f4>
    1188:	movw	r0, #0
    118c:	movt	r0, #0
    1190:	blx	r2
    1194:	b	1224 <print_expression+0x4f4>
    1198:	movw	r0, #0
    119c:	movt	r0, #0
    11a0:	blx	r2
    11a4:	b	1224 <print_expression+0x4f4>
    11a8:	movw	r0, #0
    11ac:	movt	r0, #0
    11b0:	blx	r2
    11b4:	b	1224 <print_expression+0x4f4>
    11b8:	movw	r0, #0
    11bc:	movt	r0, #0
    11c0:	blx	r2
    11c4:	b	1224 <print_expression+0x4f4>
    11c8:	movw	r0, #0
    11cc:	movt	r0, #0
    11d0:	blx	r2
    11d4:	b	1224 <print_expression+0x4f4>
    11d8:	ldr	r0, [sp, #12]
    11dc:	blx	r2
    11e0:	b	1224 <print_expression+0x4f4>
    11e4:	ldr	r0, [sp, #16]
    11e8:	blx	r2
    11ec:	b	1224 <print_expression+0x4f4>
    11f0:	bl	0 <__ctype_b_loc>
    11f4:	ldr	r0, [r0]
    11f8:	add	r0, r0, sl, lsl #1
    11fc:	ldrb	r0, [r0, #1]
    1200:	tst	r0, #64	; 0x40
    1204:	bne	1214 <print_expression+0x4e4>
    1208:	movw	r0, #0
    120c:	movt	r0, #0
    1210:	b	121c <print_expression+0x4ec>
    1214:	movw	r0, #0
    1218:	movt	r0, #0
    121c:	mov	r1, sl
    1220:	blx	r9
    1224:	add	r7, r7, #1
    1228:	subs	r6, r6, #1
    122c:	mov	r2, r9
    1230:	bne	fb4 <print_expression+0x284>
    1234:	mov	r0, r8
    1238:	b	210c <print_expression+0x13dc>
    123c:	movw	r1, #0
    1240:	movw	r0, #0
    1244:	movt	r1, #0
    1248:	movt	r0, #0
    124c:	b	1a8c <print_expression+0xd5c>
    1250:	movw	r1, #0
    1254:	movw	r0, #0
    1258:	movt	r1, #0
    125c:	movt	r0, #0
    1260:	b	1944 <print_expression+0xc14>
    1264:	movw	r1, #0
    1268:	movw	r0, #0
    126c:	cmp	r4, #0
    1270:	mov	r7, r2
    1274:	movt	r1, #0
    1278:	movt	r0, #0
    127c:	moveq	r0, r1
    1280:	ldr	r1, [r6, #12]
    1284:	blx	r2
    1288:	ldr	r0, [r6, #16]
    128c:	cmp	r0, #0
    1290:	beq	12c8 <print_expression+0x598>
    1294:	movw	r0, #0
    1298:	movt	r0, #0
    129c:	blx	r7
    12a0:	ldr	r0, [r6, #16]
    12a4:	mov	r1, #15
    12a8:	mov	r2, r5
    12ac:	mov	r3, r4
    12b0:	str	r1, [sp]
    12b4:	mov	r1, r7
    12b8:	bl	d30 <print_expression>
    12bc:	movw	r0, #0
    12c0:	movt	r0, #0
    12c4:	blx	r7
    12c8:	movw	r0, #0
    12cc:	movt	r0, #0
    12d0:	blx	r7
    12d4:	ldr	r0, [r6, #20]
    12d8:	mov	r1, #15
    12dc:	b	1de0 <print_expression+0x10b0>
    12e0:	movw	r1, #0
    12e4:	movw	r0, #0
    12e8:	movt	r1, #0
    12ec:	movt	r0, #0
    12f0:	b	2128 <print_expression+0x13f8>
    12f4:	movw	r1, #0
    12f8:	movw	r0, #0
    12fc:	movt	r1, #0
    1300:	movt	r0, #0
    1304:	b	2104 <print_expression+0x13d4>
    1308:	movw	r1, #0
    130c:	movw	r0, #0
    1310:	cmp	r4, #0
    1314:	movt	r1, #0
    1318:	movt	r0, #0
    131c:	moveq	r0, r1
    1320:	b	1828 <print_expression+0xaf8>
    1324:	movw	r1, #0
    1328:	movw	r0, #0
    132c:	movt	r1, #0
    1330:	movt	r0, #0
    1334:	b	1a8c <print_expression+0xd5c>
    1338:	ldr	r0, [r6, #16]
    133c:	cmp	r0, #0
    1340:	beq	1364 <print_expression+0x634>
    1344:	mov	r1, #15
    1348:	mov	r7, r2
    134c:	mov	r3, r4
    1350:	str	r1, [sp]
    1354:	mov	r1, r2
    1358:	mov	r2, r5
    135c:	bl	d30 <print_expression>
    1360:	mov	r2, r7
    1364:	ldr	r1, [r6, #12]
    1368:	movw	r0, #0
    136c:	movt	r0, #0
    1370:	b	1fa4 <print_expression+0x1274>
    1374:	movw	r0, #0
    1378:	movt	r0, #0
    137c:	b	210c <print_expression+0x13dc>
    1380:	ldr	r0, [r6, #16]
    1384:	mov	r1, #15
    1388:	mov	r7, r2
    138c:	mov	r3, r4
    1390:	str	r1, [sp]
    1394:	mov	r1, r2
    1398:	mov	r2, r5
    139c:	bl	d30 <print_expression>
    13a0:	ldr	r0, [r6, #16]
    13a4:	ldr	r0, [r0]
    13a8:	cmp	r0, #38	; 0x26
    13ac:	beq	13bc <print_expression+0x68c>
    13b0:	movw	r0, #0
    13b4:	movt	r0, #0
    13b8:	blx	r7
    13bc:	ldr	r1, [r6, #12]
    13c0:	movw	r0, #0
    13c4:	mov	r2, r7
    13c8:	movt	r0, #0
    13cc:	b	1fa4 <print_expression+0x1274>
    13d0:	cmp	r7, #4
    13d4:	bgt	13ec <print_expression+0x6bc>
    13d8:	movw	r0, #0
    13dc:	mov	r8, r2
    13e0:	movt	r0, #0
    13e4:	blx	r2
    13e8:	mov	r2, r8
    13ec:	ldr	r0, [r6, #16]
    13f0:	mov	r8, #5
    13f4:	mov	r1, r2
    13f8:	mov	r9, r2
    13fc:	mov	r2, r5
    1400:	mov	r3, r4
    1404:	str	r8, [sp]
    1408:	bl	d30 <print_expression>
    140c:	orrs	r0, r4, r5
    1410:	movw	r1, #0
    1414:	movw	r0, #0
    1418:	movt	r1, #0
    141c:	movt	r0, #0
    1420:	b	2014 <print_expression+0x12e4>
    1424:	movw	r1, #0
    1428:	movw	r0, #0
    142c:	movt	r1, #0
    1430:	movt	r0, #0
    1434:	b	2128 <print_expression+0x13f8>
    1438:	cmp	r7, #4
    143c:	bgt	1454 <print_expression+0x724>
    1440:	movw	r0, #0
    1444:	mov	r8, r2
    1448:	movt	r0, #0
    144c:	blx	r2
    1450:	mov	r2, r8
    1454:	ldr	r0, [r6, #16]
    1458:	mov	r8, #5
    145c:	mov	r1, r2
    1460:	mov	r9, r2
    1464:	mov	r2, r5
    1468:	mov	r3, r4
    146c:	str	r8, [sp]
    1470:	bl	d30 <print_expression>
    1474:	orrs	r0, r4, r5
    1478:	movw	r1, #0
    147c:	movw	r0, #0
    1480:	movt	r1, #0
    1484:	movt	r0, #0
    1488:	b	2014 <print_expression+0x12e4>
    148c:	cmp	r7, #9
    1490:	bgt	14a8 <print_expression+0x778>
    1494:	movw	r0, #0
    1498:	mov	r8, r2
    149c:	movt	r0, #0
    14a0:	blx	r2
    14a4:	mov	r2, r8
    14a8:	ldr	r0, [r6, #16]
    14ac:	mov	r8, #10
    14b0:	mov	r1, r2
    14b4:	mov	r9, r2
    14b8:	mov	r2, r5
    14bc:	mov	r3, r4
    14c0:	str	r8, [sp]
    14c4:	bl	d30 <print_expression>
    14c8:	movw	r1, #0
    14cc:	movw	r0, #0
    14d0:	cmp	r4, #0
    14d4:	movt	r1, #0
    14d8:	movt	r0, #0
    14dc:	moveq	r0, r1
    14e0:	blx	r9
    14e4:	ldr	r0, [r6, #20]
    14e8:	mov	r1, r9
    14ec:	mov	r2, r5
    14f0:	mov	r3, r4
    14f4:	str	r8, [sp]
    14f8:	bl	d30 <print_expression>
    14fc:	cmp	r7, #9
    1500:	ble	203c <print_expression+0x130c>
    1504:	b	20c4 <print_expression+0x1394>
    1508:	cmp	r7, #1
    150c:	bgt	21e8 <print_expression+0x14b8>
    1510:	movw	r0, #0
    1514:	mov	r7, r2
    1518:	movt	r0, #0
    151c:	blx	r2
    1520:	ldr	r0, [r6, #16]
    1524:	mov	r8, #2
    1528:	mov	r1, r7
    152c:	mov	r2, r5
    1530:	mov	r3, r4
    1534:	str	r8, [sp]
    1538:	bl	d30 <print_expression>
    153c:	movw	r0, #0
    1540:	movt	r0, #0
    1544:	b	1ac0 <print_expression+0xd90>
    1548:	movw	r1, #0
    154c:	movw	r0, #0
    1550:	movt	r1, #0
    1554:	movt	r0, #0
    1558:	b	2104 <print_expression+0x13d4>
    155c:	movw	r1, #0
    1560:	movw	r0, #0
    1564:	cmp	r4, #0
    1568:	mov	r7, r2
    156c:	movt	r1, #0
    1570:	movt	r0, #0
    1574:	moveq	r0, r1
    1578:	blx	r2
    157c:	ldr	r0, [r6, #16]
    1580:	mov	r8, #15
    1584:	mov	r1, r7
    1588:	mov	r2, r5
    158c:	mov	r3, r4
    1590:	str	r8, [sp]
    1594:	bl	d30 <print_expression>
    1598:	movw	r0, #0
    159c:	movt	r0, #0
    15a0:	blx	r7
    15a4:	ldr	r0, [r6, #20]
    15a8:	mov	r1, r7
    15ac:	mov	r2, r5
    15b0:	mov	r3, r4
    15b4:	str	r8, [sp]
    15b8:	mov	r9, r7
    15bc:	bl	d30 <print_expression>
    15c0:	ldr	r0, [r6, #24]
    15c4:	cmp	r0, #0
    15c8:	beq	203c <print_expression+0x130c>
    15cc:	movw	r0, #0
    15d0:	mov	r7, r9
    15d4:	movt	r0, #0
    15d8:	blx	r9
    15dc:	ldr	r0, [r6, #24]
    15e0:	mov	r1, r9
    15e4:	mov	r2, r5
    15e8:	mov	r3, r4
    15ec:	str	r8, [sp]
    15f0:	bl	d30 <print_expression>
    15f4:	b	203c <print_expression+0x130c>
    15f8:	movw	r1, #0
    15fc:	movw	r0, #0
    1600:	movt	r1, #0
    1604:	movt	r0, #0
    1608:	b	1e4c <print_expression+0x111c>
    160c:	movw	r1, #0
    1610:	movw	r0, #0
    1614:	movt	r1, #0
    1618:	movt	r0, #0
    161c:	b	2128 <print_expression+0x13f8>
    1620:	movw	r1, #0
    1624:	movw	r0, #0
    1628:	movt	r1, #0
    162c:	movt	r0, #0
    1630:	b	1a8c <print_expression+0xd5c>
    1634:	movw	r1, #0
    1638:	movw	r0, #0
    163c:	movt	r1, #0
    1640:	movt	r0, #0
    1644:	b	2104 <print_expression+0x13d4>
    1648:	movw	r1, #0
    164c:	movw	r0, #0
    1650:	movt	r1, #0
    1654:	movt	r0, #0
    1658:	b	2128 <print_expression+0x13f8>
    165c:	movw	r1, #0
    1660:	movw	r0, #0
    1664:	movt	r1, #0
    1668:	movt	r0, #0
    166c:	b	2128 <print_expression+0x13f8>
    1670:	movw	r1, #0
    1674:	movw	r0, #0
    1678:	cmp	r4, #0
    167c:	mov	r7, r2
    1680:	movt	r1, #0
    1684:	movt	r0, #0
    1688:	moveq	r0, r1
    168c:	blx	r2
    1690:	ldr	r0, [r6, #16]
    1694:	mov	r8, #15
    1698:	mov	r1, r7
    169c:	mov	r2, r5
    16a0:	mov	r3, r4
    16a4:	str	r8, [sp]
    16a8:	bl	d30 <print_expression>
    16ac:	movw	r0, #0
    16b0:	movt	r0, #0
    16b4:	b	1ac0 <print_expression+0xd90>
    16b8:	cmp	r7, #5
    16bc:	bgt	2214 <print_expression+0x14e4>
    16c0:	movw	r0, #0
    16c4:	mov	r7, r2
    16c8:	movt	r0, #0
    16cc:	blx	r2
    16d0:	ldr	r0, [r6, #16]
    16d4:	mov	r8, #6
    16d8:	mov	r1, r7
    16dc:	mov	r2, r5
    16e0:	mov	r3, r4
    16e4:	str	r8, [sp]
    16e8:	bl	d30 <print_expression>
    16ec:	movw	r0, #0
    16f0:	movt	r0, #0
    16f4:	b	1ac0 <print_expression+0xd90>
    16f8:	movw	r1, #0
    16fc:	movw	r0, #0
    1700:	cmp	r4, #0
    1704:	mov	r7, r2
    1708:	movt	r1, #0
    170c:	movt	r0, #0
    1710:	movne	r0, r1
    1714:	ldr	r1, [r6, #12]
    1718:	blx	r2
    171c:	ldr	r0, [r6, #16]
    1720:	mov	r8, #15
    1724:	mov	r1, r7
    1728:	mov	r2, r5
    172c:	mov	r3, r4
    1730:	str	r8, [sp]
    1734:	bl	d30 <print_expression>
    1738:	movw	r1, #0
    173c:	movw	r0, #0
    1740:	cmp	r4, #0
    1744:	movt	r1, #0
    1748:	movt	r0, #0
    174c:	movne	r0, r1
    1750:	blx	r7
    1754:	ldr	r0, [r6, #20]
    1758:	mov	r1, r7
    175c:	mov	r2, r5
    1760:	mov	r3, r4
    1764:	str	r8, [sp]
    1768:	bl	d30 <print_expression>
    176c:	ldr	r0, [r6, #24]
    1770:	cmp	r0, #0
    1774:	beq	17ac <print_expression+0xa7c>
    1778:	movw	r1, #0
    177c:	movw	r0, #0
    1780:	cmp	r4, #0
    1784:	movt	r1, #0
    1788:	movt	r0, #0
    178c:	movne	r0, r1
    1790:	blx	r7
    1794:	ldr	r0, [r6, #24]
    1798:	mov	r1, r7
    179c:	mov	r2, r5
    17a0:	mov	r3, r4
    17a4:	str	r8, [sp]
    17a8:	bl	d30 <print_expression>
    17ac:	movw	r1, #0
    17b0:	movw	r0, #0
    17b4:	cmp	r4, #0
    17b8:	movt	r1, #0
    17bc:	movt	r0, #0
    17c0:	movne	r0, r1
    17c4:	blx	r7
    17c8:	ldr	r0, [r6, #28]
    17cc:	b	2378 <print_expression+0x1648>
    17d0:	ldr	r0, [r6, #16]
    17d4:	cmp	r0, #0
    17d8:	beq	17fc <print_expression+0xacc>
    17dc:	mov	r1, #15
    17e0:	mov	r7, r2
    17e4:	mov	r3, r4
    17e8:	str	r1, [sp]
    17ec:	mov	r1, r2
    17f0:	mov	r2, r5
    17f4:	bl	d30 <print_expression>
    17f8:	mov	r2, r7
    17fc:	movw	r0, #0
    1800:	mov	r7, r2
    1804:	movt	r0, #0
    1808:	blx	r2
    180c:	ldr	r0, [r6, #20]
    1810:	b	1ef0 <print_expression+0x11c0>
    1814:	movw	r0, #0
    1818:	movt	r0, #0
    181c:	b	210c <print_expression+0x13dc>
    1820:	movw	r0, #0
    1824:	movt	r0, #0
    1828:	mov	r7, r2
    182c:	blx	r2
    1830:	ldr	r0, [r6, #16]
    1834:	mov	r8, #15
    1838:	mov	r1, r7
    183c:	mov	r2, r5
    1840:	mov	r3, r4
    1844:	str	r8, [sp]
    1848:	bl	d30 <print_expression>
    184c:	movw	r9, #0
    1850:	movt	r9, #0
    1854:	mov	r0, r9
    1858:	blx	r7
    185c:	ldr	r0, [r6, #20]
    1860:	mov	r1, r7
    1864:	mov	r2, r5
    1868:	mov	r3, r4
    186c:	str	r8, [sp]
    1870:	bl	d30 <print_expression>
    1874:	mov	r0, r9
    1878:	blx	r7
    187c:	ldr	r0, [r6, #24]
    1880:	b	1ac8 <print_expression+0xd98>
    1884:	movw	r1, #0
    1888:	movw	r0, #0
    188c:	movt	r1, #0
    1890:	movt	r0, #0
    1894:	b	2128 <print_expression+0x13f8>
    1898:	movw	r1, #0
    189c:	movw	r0, #0
    18a0:	movt	r1, #0
    18a4:	movt	r0, #0
    18a8:	b	2128 <print_expression+0x13f8>
    18ac:	cmp	r7, #2
    18b0:	bgt	2240 <print_expression+0x1510>
    18b4:	movw	r0, #0
    18b8:	mov	r7, r2
    18bc:	movt	r0, #0
    18c0:	blx	r2
    18c4:	ldr	r0, [r6, #16]
    18c8:	mov	r8, #3
    18cc:	mov	r1, r7
    18d0:	mov	r2, r5
    18d4:	mov	r3, r4
    18d8:	str	r8, [sp]
    18dc:	bl	d30 <print_expression>
    18e0:	movw	r0, #0
    18e4:	movt	r0, #0
    18e8:	b	1ac0 <print_expression+0xd90>
    18ec:	movw	r0, #0
    18f0:	movt	r0, #0
    18f4:	b	1dd0 <print_expression+0x10a0>
    18f8:	movw	r1, #0
    18fc:	movw	r0, #0
    1900:	movt	r1, #0
    1904:	movt	r0, #0
    1908:	b	2128 <print_expression+0x13f8>
    190c:	movw	r1, #0
    1910:	movw	r0, #0
    1914:	movt	r1, #0
    1918:	movt	r0, #0
    191c:	b	2104 <print_expression+0x13d4>
    1920:	movw	r1, #0
    1924:	movw	r0, #0
    1928:	movt	r1, #0
    192c:	movt	r0, #0
    1930:	b	1a8c <print_expression+0xd5c>
    1934:	movw	r1, #0
    1938:	movw	r0, #0
    193c:	movt	r1, #0
    1940:	movt	r0, #0
    1944:	cmp	r4, #0
    1948:	mov	r7, r2
    194c:	moveq	r0, r1
    1950:	ldr	r1, [r6, #12]
    1954:	blx	r2
    1958:	b	2138 <print_expression+0x1408>
    195c:	movw	r1, #0
    1960:	movw	r0, #0
    1964:	movt	r1, #0
    1968:	movt	r0, #0
    196c:	b	2128 <print_expression+0x13f8>
    1970:	cmp	r7, #3
    1974:	bgt	226c <print_expression+0x153c>
    1978:	movw	r0, #0
    197c:	mov	r7, r2
    1980:	movt	r0, #0
    1984:	blx	r2
    1988:	ldr	r0, [r6, #16]
    198c:	mov	r8, #4
    1990:	mov	r1, r7
    1994:	mov	r2, r5
    1998:	mov	r3, r4
    199c:	str	r8, [sp]
    19a0:	bl	d30 <print_expression>
    19a4:	movw	r0, #0
    19a8:	movt	r0, #0
    19ac:	b	1ac0 <print_expression+0xd90>
    19b0:	cmp	r7, #6
    19b4:	bgt	19cc <print_expression+0xc9c>
    19b8:	movw	r0, #0
    19bc:	mov	r8, r2
    19c0:	movt	r0, #0
    19c4:	blx	r2
    19c8:	mov	r2, r8
    19cc:	ldr	r0, [r6, #16]
    19d0:	mov	r8, #7
    19d4:	mov	r1, r2
    19d8:	mov	r9, r2
    19dc:	mov	r2, r5
    19e0:	mov	r3, r4
    19e4:	str	r8, [sp]
    19e8:	bl	d30 <print_expression>
    19ec:	orrs	r0, r4, r5
    19f0:	movw	r1, #0
    19f4:	movw	r0, #0
    19f8:	movt	r1, #0
    19fc:	movt	r0, #0
    1a00:	moveq	r0, r1
    1a04:	blx	r9
    1a08:	ldr	r0, [r6, #20]
    1a0c:	mov	r1, r9
    1a10:	mov	r2, r5
    1a14:	mov	r3, r4
    1a18:	str	r8, [sp]
    1a1c:	bl	d30 <print_expression>
    1a20:	cmp	r7, #6
    1a24:	ble	203c <print_expression+0x130c>
    1a28:	b	20c4 <print_expression+0x1394>
    1a2c:	movw	r1, #0
    1a30:	movw	r0, #0
    1a34:	movt	r1, #0
    1a38:	movt	r0, #0
    1a3c:	b	1a8c <print_expression+0xd5c>
    1a40:	movw	r1, #0
    1a44:	movw	r0, #0
    1a48:	movt	r1, #0
    1a4c:	movt	r0, #0
    1a50:	b	1a8c <print_expression+0xd5c>
    1a54:	movw	r1, #0
    1a58:	movw	r0, #0
    1a5c:	movt	r1, #0
    1a60:	movt	r0, #0
    1a64:	b	1a8c <print_expression+0xd5c>
    1a68:	movw	r1, #0
    1a6c:	movw	r0, #0
    1a70:	movt	r1, #0
    1a74:	movt	r0, #0
    1a78:	b	1a8c <print_expression+0xd5c>
    1a7c:	movw	r1, #0
    1a80:	movw	r0, #0
    1a84:	movt	r1, #0
    1a88:	movt	r0, #0
    1a8c:	cmp	r4, #0
    1a90:	mov	r7, r2
    1a94:	moveq	r0, r1
    1a98:	blx	r2
    1a9c:	ldr	r0, [r6, #16]
    1aa0:	mov	r8, #15
    1aa4:	mov	r1, r7
    1aa8:	mov	r2, r5
    1aac:	mov	r3, r4
    1ab0:	str	r8, [sp]
    1ab4:	bl	d30 <print_expression>
    1ab8:	movw	r0, #0
    1abc:	movt	r0, #0
    1ac0:	blx	r7
    1ac4:	ldr	r0, [r6, #20]
    1ac8:	str	r8, [sp]
    1acc:	b	2144 <print_expression+0x1414>
    1ad0:	movw	r1, #0
    1ad4:	movw	r0, #0
    1ad8:	movt	r1, #0
    1adc:	movt	r0, #0
    1ae0:	b	2128 <print_expression+0x13f8>
    1ae4:	movw	r1, #0
    1ae8:	movw	r0, #0
    1aec:	movt	r1, #0
    1af0:	movt	r0, #0
    1af4:	b	2128 <print_expression+0x13f8>
    1af8:	movw	r1, #0
    1afc:	movw	r0, #0
    1b00:	cmp	r4, #0
    1b04:	mov	r7, r2
    1b08:	movt	r1, #0
    1b0c:	movt	r0, #0
    1b10:	moveq	r0, r1
    1b14:	blx	r2
    1b18:	ldr	r0, [r6, #16]
    1b1c:	mov	r9, #15
    1b20:	mov	r1, r7
    1b24:	mov	r2, r5
    1b28:	mov	r3, r4
    1b2c:	mov	r8, r7
    1b30:	str	r9, [sp]
    1b34:	bl	d30 <print_expression>
    1b38:	ldr	r0, [r6, #20]
    1b3c:	cmp	r0, #0
    1b40:	beq	1b6c <print_expression+0xe3c>
    1b44:	movw	r0, #0
    1b48:	mov	r7, r8
    1b4c:	movt	r0, #0
    1b50:	blx	r8
    1b54:	ldr	r0, [r6, #20]
    1b58:	mov	r1, r8
    1b5c:	mov	r2, r5
    1b60:	mov	r3, r4
    1b64:	str	r9, [sp]
    1b68:	bl	d30 <print_expression>
    1b6c:	ldr	r0, [r6, #24]
    1b70:	cmp	r0, #0
    1b74:	beq	1eb0 <print_expression+0x1180>
    1b78:	movw	r0, #0
    1b7c:	mov	r7, r8
    1b80:	movt	r0, #0
    1b84:	blx	r8
    1b88:	ldr	r0, [r6, #24]
    1b8c:	mov	r1, #15
    1b90:	str	r1, [sp]
    1b94:	b	1ea0 <print_expression+0x1170>
    1b98:	movw	r1, #0
    1b9c:	movw	r0, #0
    1ba0:	movt	r1, #0
    1ba4:	movt	r0, #0
    1ba8:	b	2128 <print_expression+0x13f8>
    1bac:	ldr	r0, [r6, #12]
    1bb0:	cmp	r0, #0
    1bb4:	beq	2394 <print_expression+0x1664>
    1bb8:	movw	r1, #0
    1bbc:	movw	r0, #0
    1bc0:	movt	r1, #0
    1bc4:	movt	r0, #0
    1bc8:	b	23a4 <print_expression+0x1674>
    1bcc:	vldr	d0, [r6, #16]
    1bd0:	add	r4, sp, #20
    1bd4:	mov	r5, r2
    1bd8:	mov	r0, r4
    1bdc:	bl	0 <coda_strfl>
    1be0:	b	1bf8 <print_expression+0xec8>
    1be4:	ldrd	r0, [r6, #16]
    1be8:	add	r4, sp, #20
    1bec:	mov	r5, r2
    1bf0:	mov	r2, r4
    1bf4:	bl	0 <coda_str64>
    1bf8:	movw	r0, #0
    1bfc:	mov	r1, r4
    1c00:	movt	r0, #0
    1c04:	blx	r5
    1c08:	sub	sp, fp, #28
    1c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c10:	movw	r1, #0
    1c14:	movw	r0, #0
    1c18:	movt	r1, #0
    1c1c:	movt	r0, #0
    1c20:	b	2128 <print_expression+0x13f8>
    1c24:	movw	r1, #0
    1c28:	movw	r0, #0
    1c2c:	movt	r1, #0
    1c30:	movt	r0, #0
    1c34:	b	2104 <print_expression+0x13d4>
    1c38:	movw	r1, #0
    1c3c:	movw	r0, #0
    1c40:	movt	r1, #0
    1c44:	movt	r0, #0
    1c48:	b	2104 <print_expression+0x13d4>
    1c4c:	movw	r1, #0
    1c50:	movw	r0, #0
    1c54:	movt	r1, #0
    1c58:	movt	r0, #0
    1c5c:	b	2128 <print_expression+0x13f8>
    1c60:	movw	r1, #0
    1c64:	movw	r0, #0
    1c68:	movt	r1, #0
    1c6c:	movt	r0, #0
    1c70:	b	2128 <print_expression+0x13f8>
    1c74:	ldr	r0, [r6, #16]
    1c78:	cmp	r0, #0
    1c7c:	beq	1cac <print_expression+0xf7c>
    1c80:	mov	r1, #15
    1c84:	mov	r6, r2
    1c88:	mov	r3, r4
    1c8c:	str	r1, [sp]
    1c90:	mov	r1, r2
    1c94:	mov	r2, r5
    1c98:	bl	d30 <print_expression>
    1c9c:	movw	r0, #0
    1ca0:	movt	r0, #0
    1ca4:	blx	r6
    1ca8:	mov	r2, r6
    1cac:	movw	r0, #0
    1cb0:	movt	r0, #0
    1cb4:	b	210c <print_expression+0x13dc>
    1cb8:	movw	r1, #0
    1cbc:	movw	r0, #0
    1cc0:	movt	r1, #0
    1cc4:	movt	r0, #0
    1cc8:	b	2128 <print_expression+0x13f8>
    1ccc:	cmp	r7, #4
    1cd0:	bgt	1ce8 <print_expression+0xfb8>
    1cd4:	movw	r0, #0
    1cd8:	mov	r8, r2
    1cdc:	movt	r0, #0
    1ce0:	blx	r2
    1ce4:	mov	r2, r8
    1ce8:	ldr	r0, [r6, #16]
    1cec:	mov	r8, #5
    1cf0:	mov	r1, r2
    1cf4:	mov	r9, r2
    1cf8:	mov	r2, r5
    1cfc:	mov	r3, r4
    1d00:	str	r8, [sp]
    1d04:	bl	d30 <print_expression>
    1d08:	orrs	r0, r4, r5
    1d0c:	movw	r1, #0
    1d10:	movw	r0, #0
    1d14:	movt	r1, #0
    1d18:	movt	r0, #0
    1d1c:	b	2014 <print_expression+0x12e4>
    1d20:	movw	r1, #0
    1d24:	movw	r0, #0
    1d28:	movt	r1, #0
    1d2c:	movt	r0, #0
    1d30:	b	2128 <print_expression+0x13f8>
    1d34:	movw	r1, #0
    1d38:	movw	r0, #0
    1d3c:	movt	r1, #0
    1d40:	movt	r0, #0
    1d44:	b	2128 <print_expression+0x13f8>
    1d48:	cmp	r7, #2
    1d4c:	bgt	2298 <print_expression+0x1568>
    1d50:	movw	r0, #0
    1d54:	mov	r7, r2
    1d58:	movt	r0, #0
    1d5c:	blx	r2
    1d60:	ldr	r0, [r6, #16]
    1d64:	mov	r8, #3
    1d68:	mov	r1, r7
    1d6c:	mov	r2, r5
    1d70:	mov	r3, r4
    1d74:	str	r8, [sp]
    1d78:	bl	d30 <print_expression>
    1d7c:	movw	r0, #0
    1d80:	movt	r0, #0
    1d84:	b	1ac0 <print_expression+0xd90>
    1d88:	cmp	r7, #5
    1d8c:	bgt	22c4 <print_expression+0x1594>
    1d90:	movw	r0, #0
    1d94:	mov	r7, r2
    1d98:	movt	r0, #0
    1d9c:	blx	r2
    1da0:	ldr	r0, [r6, #16]
    1da4:	mov	r8, #6
    1da8:	mov	r1, r7
    1dac:	mov	r2, r5
    1db0:	mov	r3, r4
    1db4:	str	r8, [sp]
    1db8:	bl	d30 <print_expression>
    1dbc:	movw	r0, #0
    1dc0:	movt	r0, #0
    1dc4:	b	1ac0 <print_expression+0xd90>
    1dc8:	movw	r0, #0
    1dcc:	movt	r0, #0
    1dd0:	mov	r7, r2
    1dd4:	blx	r2
    1dd8:	ldr	r0, [r6, #16]
    1ddc:	mov	r1, #1
    1de0:	str	r1, [sp]
    1de4:	b	237c <print_expression+0x164c>
    1de8:	movw	r1, #0
    1dec:	movw	r0, #0
    1df0:	movt	r1, #0
    1df4:	movt	r0, #0
    1df8:	b	2128 <print_expression+0x13f8>
    1dfc:	cmp	r7, #6
    1e00:	bgt	22f0 <print_expression+0x15c0>
    1e04:	movw	r0, #0
    1e08:	mov	r7, r2
    1e0c:	movt	r0, #0
    1e10:	blx	r2
    1e14:	ldr	r0, [r6, #16]
    1e18:	mov	r8, #7
    1e1c:	mov	r1, r7
    1e20:	mov	r2, r5
    1e24:	mov	r3, r4
    1e28:	str	r8, [sp]
    1e2c:	bl	d30 <print_expression>
    1e30:	movw	r0, #0
    1e34:	movt	r0, #0
    1e38:	b	1ac0 <print_expression+0xd90>
    1e3c:	movw	r1, #0
    1e40:	movw	r0, #0
    1e44:	movt	r1, #0
    1e48:	movt	r0, #0
    1e4c:	cmp	r4, #0
    1e50:	mov	r7, r2
    1e54:	moveq	r0, r1
    1e58:	blx	r2
    1e5c:	ldr	r0, [r6, #16]
    1e60:	mov	r9, #15
    1e64:	mov	r1, r7
    1e68:	mov	r2, r5
    1e6c:	mov	r3, r4
    1e70:	mov	r8, r7
    1e74:	str	r9, [sp]
    1e78:	bl	d30 <print_expression>
    1e7c:	ldr	r0, [r6, #20]
    1e80:	cmp	r0, #0
    1e84:	beq	1eb0 <print_expression+0x1180>
    1e88:	movw	r0, #0
    1e8c:	mov	r7, r8
    1e90:	movt	r0, #0
    1e94:	blx	r8
    1e98:	ldr	r0, [r6, #20]
    1e9c:	str	r9, [sp]
    1ea0:	mov	r1, r8
    1ea4:	mov	r2, r5
    1ea8:	mov	r3, r4
    1eac:	bl	d30 <print_expression>
    1eb0:	movw	r0, #0
    1eb4:	mov	r1, r8
    1eb8:	movt	r0, #0
    1ebc:	b	2160 <print_expression+0x1430>
    1ec0:	ldr	r1, [r6, #12]
    1ec4:	movw	r0, #0
    1ec8:	mov	r7, r2
    1ecc:	movt	r0, #0
    1ed0:	blx	r2
    1ed4:	ldr	r0, [r6, #16]
    1ed8:	cmp	r0, #0
    1edc:	beq	20c4 <print_expression+0x1394>
    1ee0:	movw	r0, #0
    1ee4:	movt	r0, #0
    1ee8:	blx	r7
    1eec:	ldr	r0, [r6, #16]
    1ef0:	mov	r1, #15
    1ef4:	mov	r2, r5
    1ef8:	mov	r3, r4
    1efc:	str	r1, [sp]
    1f00:	mov	r1, r7
    1f04:	bl	d30 <print_expression>
    1f08:	movw	r0, #0
    1f0c:	movt	r0, #0
    1f10:	b	215c <print_expression+0x142c>
    1f14:	movw	r1, #0
    1f18:	movw	r0, #0
    1f1c:	cmp	r4, #0
    1f20:	mov	r7, r2
    1f24:	movt	r1, #0
    1f28:	movt	r0, #0
    1f2c:	moveq	r0, r1
    1f30:	ldr	r1, [r6, #12]
    1f34:	blx	r2
    1f38:	b	1a9c <print_expression+0xd6c>
    1f3c:	cmp	r7, #2
    1f40:	bgt	231c <print_expression+0x15ec>
    1f44:	movw	r0, #0
    1f48:	mov	r7, r2
    1f4c:	movt	r0, #0
    1f50:	blx	r2
    1f54:	ldr	r0, [r6, #16]
    1f58:	mov	r8, #3
    1f5c:	mov	r1, r7
    1f60:	mov	r2, r5
    1f64:	mov	r3, r4
    1f68:	str	r8, [sp]
    1f6c:	bl	d30 <print_expression>
    1f70:	movw	r0, #0
    1f74:	movt	r0, #0
    1f78:	b	1ac0 <print_expression+0xd90>
    1f7c:	movw	r0, #0
    1f80:	movt	r0, #0
    1f84:	b	210c <print_expression+0x13dc>
    1f88:	movw	r1, #0
    1f8c:	movw	r0, #0
    1f90:	cmp	r4, #0
    1f94:	movt	r1, #0
    1f98:	movt	r0, #0
    1f9c:	moveq	r0, r1
    1fa0:	ldr	r1, [r6, #12]
    1fa4:	sub	sp, fp, #28
    1fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fac:	bx	r2
    1fb0:	movw	r1, #0
    1fb4:	movw	r0, #0
    1fb8:	movt	r1, #0
    1fbc:	movt	r0, #0
    1fc0:	b	2128 <print_expression+0x13f8>
    1fc4:	cmp	r7, #4
    1fc8:	bgt	1fe0 <print_expression+0x12b0>
    1fcc:	movw	r0, #0
    1fd0:	mov	r8, r2
    1fd4:	movt	r0, #0
    1fd8:	blx	r2
    1fdc:	mov	r2, r8
    1fe0:	ldr	r0, [r6, #16]
    1fe4:	mov	r8, #5
    1fe8:	mov	r1, r2
    1fec:	mov	r9, r2
    1ff0:	mov	r2, r5
    1ff4:	mov	r3, r4
    1ff8:	str	r8, [sp]
    1ffc:	bl	d30 <print_expression>
    2000:	orrs	r0, r4, r5
    2004:	movw	r1, #0
    2008:	movw	r0, #0
    200c:	movt	r1, #0
    2010:	movt	r0, #0
    2014:	moveq	r0, r1
    2018:	blx	r9
    201c:	ldr	r0, [r6, #20]
    2020:	mov	r1, r9
    2024:	mov	r2, r5
    2028:	mov	r3, r4
    202c:	str	r8, [sp]
    2030:	bl	d30 <print_expression>
    2034:	cmp	r7, #4
    2038:	bgt	20c4 <print_expression+0x1394>
    203c:	movw	r0, #0
    2040:	mov	r1, r9
    2044:	movt	r0, #0
    2048:	b	2160 <print_expression+0x1430>
    204c:	cmp	r7, #8
    2050:	bgt	2068 <print_expression+0x1338>
    2054:	movw	r0, #0
    2058:	mov	r8, r2
    205c:	movt	r0, #0
    2060:	blx	r2
    2064:	mov	r2, r8
    2068:	ldr	r0, [r6, #16]
    206c:	mov	r8, #9
    2070:	mov	r1, r2
    2074:	mov	r9, r2
    2078:	mov	r2, r5
    207c:	mov	r3, r4
    2080:	str	r8, [sp]
    2084:	bl	d30 <print_expression>
    2088:	movw	r1, #0
    208c:	movw	r0, #0
    2090:	cmp	r4, #0
    2094:	movt	r1, #0
    2098:	movt	r0, #0
    209c:	moveq	r0, r1
    20a0:	blx	r9
    20a4:	ldr	r0, [r6, #20]
    20a8:	mov	r1, r9
    20ac:	mov	r2, r5
    20b0:	mov	r3, r4
    20b4:	str	r8, [sp]
    20b8:	bl	d30 <print_expression>
    20bc:	cmp	r7, #8
    20c0:	ble	203c <print_expression+0x130c>
    20c4:	sub	sp, fp, #28
    20c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20cc:	movw	r1, #0
    20d0:	movw	r0, #0
    20d4:	movt	r1, #0
    20d8:	movt	r0, #0
    20dc:	b	2128 <print_expression+0x13f8>
    20e0:	movw	r1, #0
    20e4:	movw	r0, #0
    20e8:	movt	r1, #0
    20ec:	movt	r0, #0
    20f0:	b	2128 <print_expression+0x13f8>
    20f4:	movw	r1, #0
    20f8:	movw	r0, #0
    20fc:	movt	r1, #0
    2100:	movt	r0, #0
    2104:	cmp	r4, #0
    2108:	moveq	r0, r1
    210c:	sub	sp, fp, #28
    2110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2114:	bx	r2
    2118:	movw	r1, #0
    211c:	movw	r0, #0
    2120:	movt	r1, #0
    2124:	movt	r0, #0
    2128:	cmp	r4, #0
    212c:	mov	r7, r2
    2130:	moveq	r0, r1
    2134:	blx	r2
    2138:	ldr	r0, [r6, #16]
    213c:	mov	r1, #15
    2140:	str	r1, [sp]
    2144:	mov	r1, r7
    2148:	mov	r2, r5
    214c:	mov	r3, r4
    2150:	bl	d30 <print_expression>
    2154:	movw	r0, #0
    2158:	movt	r0, #0
    215c:	mov	r1, r7
    2160:	sub	sp, fp, #28
    2164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2168:	bx	r1
    216c:	ldr	r0, [r6, #16]
    2170:	mov	r8, #15
    2174:	mov	r1, r2
    2178:	mov	r7, r2
    217c:	mov	r2, r5
    2180:	mov	r3, r4
    2184:	str	r8, [sp]
    2188:	bl	d30 <print_expression>
    218c:	movw	r1, #0
    2190:	movw	r0, #0
    2194:	cmp	r4, #0
    2198:	movt	r1, #0
    219c:	movt	r0, #0
    21a0:	moveq	r0, r1
    21a4:	b	2370 <print_expression+0x1640>
    21a8:	cmp	r7, #3
    21ac:	bgt	2348 <print_expression+0x1618>
    21b0:	movw	r0, #0
    21b4:	mov	r7, r2
    21b8:	movt	r0, #0
    21bc:	blx	r2
    21c0:	ldr	r0, [r6, #16]
    21c4:	mov	r8, #4
    21c8:	mov	r1, r7
    21cc:	mov	r2, r5
    21d0:	mov	r3, r4
    21d4:	str	r8, [sp]
    21d8:	bl	d30 <print_expression>
    21dc:	movw	r0, #0
    21e0:	movt	r0, #0
    21e4:	b	1ac0 <print_expression+0xd90>
    21e8:	ldr	r0, [r6, #16]
    21ec:	mov	r8, #2
    21f0:	mov	r1, r2
    21f4:	mov	r7, r2
    21f8:	mov	r2, r5
    21fc:	mov	r3, r4
    2200:	str	r8, [sp]
    2204:	bl	d30 <print_expression>
    2208:	movw	r0, #0
    220c:	movt	r0, #0
    2210:	b	2370 <print_expression+0x1640>
    2214:	ldr	r0, [r6, #16]
    2218:	mov	r8, #6
    221c:	mov	r1, r2
    2220:	mov	r7, r2
    2224:	mov	r2, r5
    2228:	mov	r3, r4
    222c:	str	r8, [sp]
    2230:	bl	d30 <print_expression>
    2234:	movw	r0, #0
    2238:	movt	r0, #0
    223c:	b	2370 <print_expression+0x1640>
    2240:	ldr	r0, [r6, #16]
    2244:	mov	r8, #3
    2248:	mov	r1, r2
    224c:	mov	r7, r2
    2250:	mov	r2, r5
    2254:	mov	r3, r4
    2258:	str	r8, [sp]
    225c:	bl	d30 <print_expression>
    2260:	movw	r0, #0
    2264:	movt	r0, #0
    2268:	b	2370 <print_expression+0x1640>
    226c:	ldr	r0, [r6, #16]
    2270:	mov	r8, #4
    2274:	mov	r1, r2
    2278:	mov	r7, r2
    227c:	mov	r2, r5
    2280:	mov	r3, r4
    2284:	str	r8, [sp]
    2288:	bl	d30 <print_expression>
    228c:	movw	r0, #0
    2290:	movt	r0, #0
    2294:	b	2370 <print_expression+0x1640>
    2298:	ldr	r0, [r6, #16]
    229c:	mov	r8, #3
    22a0:	mov	r1, r2
    22a4:	mov	r7, r2
    22a8:	mov	r2, r5
    22ac:	mov	r3, r4
    22b0:	str	r8, [sp]
    22b4:	bl	d30 <print_expression>
    22b8:	movw	r0, #0
    22bc:	movt	r0, #0
    22c0:	b	2370 <print_expression+0x1640>
    22c4:	ldr	r0, [r6, #16]
    22c8:	mov	r8, #6
    22cc:	mov	r1, r2
    22d0:	mov	r7, r2
    22d4:	mov	r2, r5
    22d8:	mov	r3, r4
    22dc:	str	r8, [sp]
    22e0:	bl	d30 <print_expression>
    22e4:	movw	r0, #0
    22e8:	movt	r0, #0
    22ec:	b	2370 <print_expression+0x1640>
    22f0:	ldr	r0, [r6, #16]
    22f4:	mov	r8, #7
    22f8:	mov	r1, r2
    22fc:	mov	r7, r2
    2300:	mov	r2, r5
    2304:	mov	r3, r4
    2308:	str	r8, [sp]
    230c:	bl	d30 <print_expression>
    2310:	movw	r0, #0
    2314:	movt	r0, #0
    2318:	b	2370 <print_expression+0x1640>
    231c:	ldr	r0, [r6, #16]
    2320:	mov	r8, #3
    2324:	mov	r1, r2
    2328:	mov	r7, r2
    232c:	mov	r2, r5
    2330:	mov	r3, r4
    2334:	str	r8, [sp]
    2338:	bl	d30 <print_expression>
    233c:	movw	r0, #0
    2340:	movt	r0, #0
    2344:	b	2370 <print_expression+0x1640>
    2348:	ldr	r0, [r6, #16]
    234c:	mov	r8, #4
    2350:	mov	r1, r2
    2354:	mov	r7, r2
    2358:	mov	r2, r5
    235c:	mov	r3, r4
    2360:	str	r8, [sp]
    2364:	bl	d30 <print_expression>
    2368:	movw	r0, #0
    236c:	movt	r0, #0
    2370:	blx	r7
    2374:	ldr	r0, [r6, #20]
    2378:	str	r8, [sp]
    237c:	mov	r1, r7
    2380:	mov	r2, r5
    2384:	mov	r3, r4
    2388:	bl	d30 <print_expression>
    238c:	sub	sp, fp, #28
    2390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2394:	movw	r1, #0
    2398:	movw	r0, #0
    239c:	movt	r1, #0
    23a0:	movt	r0, #0
    23a4:	cmp	r4, #0
    23a8:	movne	r0, r1
    23ac:	b	210c <print_expression+0x13dc>
    23b0:	movw	r0, #0
    23b4:	movw	r1, #0
    23b8:	movw	r3, #0
    23bc:	movw	r2, #4196	; 0x1064
    23c0:	movt	r0, #0
    23c4:	movt	r1, #0
    23c8:	movt	r3, #0
    23cc:	bl	0 <__assert_fail>

000023d0 <coda_expression_print_xml>:
    23d0:	push	{fp, lr}
    23d4:	mov	fp, sp
    23d8:	sub	sp, sp, #8
    23dc:	mov	r2, #15
    23e0:	mov	r3, #0
    23e4:	str	r2, [sp]
    23e8:	mov	r2, #1
    23ec:	bl	d30 <print_expression>
    23f0:	mov	r0, #0
    23f4:	mov	sp, fp
    23f8:	pop	{fp, pc}

000023fc <coda_expression_print>:
    23fc:	push	{fp, lr}
    2400:	mov	fp, sp
    2404:	sub	sp, sp, #8
    2408:	mov	r2, #15
    240c:	mov	r3, #0
    2410:	str	r2, [sp]
    2414:	mov	r2, #0
    2418:	bl	d30 <print_expression>
    241c:	mov	r0, #0
    2420:	mov	sp, fp
    2424:	pop	{fp, pc}

00002428 <coda_expression_get_type_name>:
    2428:	cmp	r0, #5
    242c:	movwhi	r0, #0
    2430:	movthi	r0, #0
    2434:	bxhi	lr
    2438:	movw	r1, #0
    243c:	movt	r1, #0
    2440:	ldr	r0, [r1, r0, lsl #2]
    2444:	bx	lr

00002448 <coda_expression_is_constant>:
    2448:	cmp	r0, #0
    244c:	ldrne	r0, [r0, #8]
    2450:	bxne	lr
    2454:	push	{fp, lr}
    2458:	mov	fp, sp
    245c:	movw	r1, #0
    2460:	movw	r2, #0
    2464:	mvn	r0, #99	; 0x63
    2468:	movw	r3, #4969	; 0x1369
    246c:	movt	r1, #0
    2470:	movt	r2, #0
    2474:	bl	0 <coda_set_error>
    2478:	mvn	r0, #0
    247c:	pop	{fp, pc}

00002480 <coda_expression_is_equal>:
    2480:	push	{r4, r5, r6, sl, fp, lr}
    2484:	add	fp, sp, #16
    2488:	mov	r5, r0
    248c:	orr	r0, r0, r1
    2490:	clz	r0, r0
    2494:	cmp	r5, #0
    2498:	movne	r6, r1
    249c:	lsr	r4, r0, #5
    24a0:	cmpne	r1, #0
    24a4:	bne	24b0 <coda_expression_is_equal+0x30>
    24a8:	mov	r0, r4
    24ac:	pop	{r4, r5, r6, sl, fp, pc}
    24b0:	ldr	r0, [r5]
    24b4:	ldr	r1, [r6]
    24b8:	mov	r4, #0
    24bc:	cmp	r0, r1
    24c0:	bne	24a8 <coda_expression_is_equal+0x28>
    24c4:	sub	r0, r0, #18
    24c8:	cmp	r0, #4
    24cc:	bhi	250c <coda_expression_is_equal+0x8c>
    24d0:	add	r1, pc, #0
    24d4:	ldr	pc, [r1, r0, lsl #2]
    24d8:	.word	0x00002534
    24dc:	.word	0x00002544
    24e0:	.word	0x00002564
    24e4:	.word	0x000024ec
    24e8:	.word	0x000024ec
    24ec:	ldr	r2, [r5, #12]
    24f0:	ldr	r0, [r6, #12]
    24f4:	cmp	r2, r0
    24f8:	bne	24a8 <coda_expression_is_equal+0x28>
    24fc:	ldr	r1, [r6, #16]
    2500:	ldr	r0, [r5, #16]
    2504:	bl	0 <memcmp>
    2508:	b	2578 <coda_expression_is_equal+0xf8>
    250c:	ldr	r0, [r5, #12]
    2510:	ldr	r1, [r6, #12]
    2514:	cmp	r0, #0
    2518:	beq	2588 <coda_expression_is_equal+0x108>
    251c:	cmp	r1, #0
    2520:	beq	24a8 <coda_expression_is_equal+0x28>
    2524:	bl	0 <strcmp>
    2528:	cmp	r0, #0
    252c:	bne	24a8 <coda_expression_is_equal+0x28>
    2530:	b	2590 <coda_expression_is_equal+0x110>
    2534:	ldr	r0, [r6, #12]
    2538:	ldr	r1, [r5, #12]
    253c:	sub	r0, r1, r0
    2540:	b	2578 <coda_expression_is_equal+0xf8>
    2544:	vldr	d16, [r6, #16]
    2548:	vldr	d17, [r5, #16]
    254c:	mov	r4, #0
    2550:	vcmp.f64	d17, d16
    2554:	vmrs	APSR_nzcv, fpscr
    2558:	movweq	r4, #1
    255c:	mov	r0, r4
    2560:	pop	{r4, r5, r6, sl, fp, pc}
    2564:	ldrd	r0, [r6, #16]
    2568:	ldrd	r2, [r5, #16]
    256c:	eor	r1, r3, r1
    2570:	eor	r0, r2, r0
    2574:	orr	r0, r0, r1
    2578:	clz	r0, r0
    257c:	lsr	r4, r0, #5
    2580:	mov	r0, r4
    2584:	pop	{r4, r5, r6, sl, fp, pc}
    2588:	cmp	r1, #0
    258c:	bne	24a8 <coda_expression_is_equal+0x28>
    2590:	ldr	r1, [r6, #16]
    2594:	ldr	r0, [r5, #16]
    2598:	bl	2480 <coda_expression_is_equal>
    259c:	cmp	r0, #0
    25a0:	beq	24a8 <coda_expression_is_equal+0x28>
    25a4:	ldr	r1, [r6, #20]
    25a8:	ldr	r0, [r5, #20]
    25ac:	bl	2480 <coda_expression_is_equal>
    25b0:	cmp	r0, #0
    25b4:	beq	24a8 <coda_expression_is_equal+0x28>
    25b8:	ldr	r1, [r6, #24]
    25bc:	ldr	r0, [r5, #24]
    25c0:	bl	2480 <coda_expression_is_equal>
    25c4:	cmp	r0, #0
    25c8:	beq	24a8 <coda_expression_is_equal+0x28>
    25cc:	ldr	r1, [r6, #28]
    25d0:	ldr	r0, [r5, #28]
    25d4:	bl	2480 <coda_expression_is_equal>
    25d8:	mov	r4, r0
    25dc:	cmp	r0, #0
    25e0:	movwne	r4, #1
    25e4:	mov	r0, r4
    25e8:	pop	{r4, r5, r6, sl, fp, pc}

000025ec <coda_expression_get_type>:
    25ec:	cmp	r0, #0
    25f0:	ldrne	r0, [r0, #4]
    25f4:	strne	r0, [r1]
    25f8:	movne	r0, #0
    25fc:	bxne	lr
    2600:	push	{fp, lr}
    2604:	mov	fp, sp
    2608:	movw	r1, #0
    260c:	movw	r2, #0
    2610:	mvn	r0, #99	; 0x63
    2614:	movw	r3, #5071	; 0x13cf
    2618:	movt	r1, #0
    261c:	movt	r2, #0
    2620:	bl	0 <coda_set_error>
    2624:	mvn	r0, #0
    2628:	pop	{fp, pc}

0000262c <coda_expression_eval_bool>:
    262c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2630:	add	fp, sp, #24
    2634:	sub	sp, sp, #568	; 0x238
    2638:	mov	r6, r0
    263c:	ldr	r0, [r0, #4]
    2640:	cmp	r0, #0
    2644:	beq	2660 <coda_expression_eval_bool+0x34>
    2648:	movw	r1, #0
    264c:	movt	r1, #0
    2650:	mvn	r0, #99	; 0x63
    2654:	bl	0 <coda_set_error>
    2658:	mvn	r5, #0
    265c:	b	26e8 <coda_expression_eval_bool+0xbc>
    2660:	mov	r5, r2
    2664:	mov	r4, r1
    2668:	cmp	r1, #0
    266c:	beq	268c <coda_expression_eval_bool+0x60>
    2670:	mov	r0, sp
    2674:	mov	r1, r4
    2678:	mov	r2, #520	; 0x208
    267c:	str	r4, [sp]
    2680:	add	r0, r0, #8
    2684:	bl	0 <memcpy>
    2688:	b	26a0 <coda_expression_eval_bool+0x74>
    268c:	ldr	r0, [r6, #8]
    2690:	cmp	r0, #0
    2694:	beq	271c <coda_expression_eval_bool+0xf0>
    2698:	mov	r0, #0
    269c:	str	r0, [sp]
    26a0:	mov	r7, sp
    26a4:	vmov.i32	q8, #0	; 0x00000000
    26a8:	mov	r1, r6
    26ac:	mov	r2, r5
    26b0:	add	r0, r7, #544	; 0x220
    26b4:	vst1.64	{d16-d17}, [r0]
    26b8:	add	r0, r7, #528	; 0x210
    26bc:	vst1.64	{d16-d17}, [r0]
    26c0:	mov	r0, #0
    26c4:	str	r0, [sp, #560]	; 0x230
    26c8:	mov	r0, r7
    26cc:	bl	2728 <eval_boolean>
    26d0:	cmp	r0, #0
    26d4:	mov	r5, r0
    26d8:	mvnne	r5, #0
    26dc:	cmp	r4, #0
    26e0:	cmpne	r0, #0
    26e4:	bne	26f4 <coda_expression_eval_bool+0xc8>
    26e8:	mov	r0, r5
    26ec:	sub	sp, fp, #24
    26f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    26f4:	add	r6, r7, #8
    26f8:	mov	r0, r4
    26fc:	mov	r1, r6
    2700:	bl	0 <coda_cursor_compare>
    2704:	mvn	r5, #0
    2708:	cmp	r0, #0
    270c:	beq	26e8 <coda_expression_eval_bool+0xbc>
    2710:	mov	r0, r6
    2714:	bl	0 <coda_cursor_add_to_error_message>
    2718:	b	26e8 <coda_expression_eval_bool+0xbc>
    271c:	movw	r1, #0
    2720:	movt	r1, #0
    2724:	b	2650 <coda_expression_eval_bool+0x24>

00002728 <eval_boolean>:
    2728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    272c:	add	fp, sp, #28
    2730:	sub	sp, sp, #580	; 0x244
    2734:	mov	r5, r0
    2738:	ldr	r0, [r1]
    273c:	sub	r0, r0, #4
    2740:	cmp	r0, #82	; 0x52
    2744:	bhi	39e8 <eval_boolean+0x12c0>
    2748:	mov	r6, r1
    274c:	add	r1, pc, #4
    2750:	mov	r8, r2
    2754:	ldr	pc, [r1, r0, lsl #2]
    2758:	.word	0x000028a4
    275c:	.word	0x000039e8
    2760:	.word	0x00002d1c
    2764:	.word	0x000039e8
    2768:	.word	0x000039e8
    276c:	.word	0x000039e8
    2770:	.word	0x000039e8
    2774:	.word	0x00002ea4
    2778:	.word	0x000039e8
    277c:	.word	0x000039e8
    2780:	.word	0x000039e8
    2784:	.word	0x000039e8
    2788:	.word	0x000039e8
    278c:	.word	0x000039e8
    2790:	.word	0x00002cac
    2794:	.word	0x000039e8
    2798:	.word	0x000039e8
    279c:	.word	0x000039e8
    27a0:	.word	0x000039e8
    27a4:	.word	0x000039e8
    27a8:	.word	0x000039e8
    27ac:	.word	0x00002c44
    27b0:	.word	0x00002a94
    27b4:	.word	0x000039e8
    27b8:	.word	0x000039e8
    27bc:	.word	0x000039e8
    27c0:	.word	0x000039e8
    27c4:	.word	0x000039e8
    27c8:	.word	0x000039e8
    27cc:	.word	0x000039e8
    27d0:	.word	0x000039e8
    27d4:	.word	0x000039e8
    27d8:	.word	0x000039e8
    27dc:	.word	0x000039e8
    27e0:	.word	0x000039e8
    27e4:	.word	0x000039e8
    27e8:	.word	0x00002b7c
    27ec:	.word	0x000029e8
    27f0:	.word	0x00002c04
    27f4:	.word	0x000039e8
    27f8:	.word	0x000039e8
    27fc:	.word	0x000039e8
    2800:	.word	0x000029c4
    2804:	.word	0x00002be0
    2808:	.word	0x0000297c
    280c:	.word	0x000029a0
    2810:	.word	0x000039e8
    2814:	.word	0x00002b14
    2818:	.word	0x00002ef4
    281c:	.word	0x00002a50
    2820:	.word	0x00002f88
    2824:	.word	0x000039e8
    2828:	.word	0x000039e8
    282c:	.word	0x000039e8
    2830:	.word	0x000039e8
    2834:	.word	0x000039e8
    2838:	.word	0x000039e8
    283c:	.word	0x00002cb4
    2840:	.word	0x00002e78
    2844:	.word	0x000039e8
    2848:	.word	0x000039e8
    284c:	.word	0x000039e8
    2850:	.word	0x000039e8
    2854:	.word	0x000039e8
    2858:	.word	0x000039e8
    285c:	.word	0x000039e8
    2860:	.word	0x000039e8
    2864:	.word	0x00002f5c
    2868:	.word	0x000039e8
    286c:	.word	0x000039e8
    2870:	.word	0x000039e8
    2874:	.word	0x000039e8
    2878:	.word	0x000039e8
    287c:	.word	0x000039e8
    2880:	.word	0x000039e8
    2884:	.word	0x000039e8
    2888:	.word	0x000039e8
    288c:	.word	0x000039e8
    2890:	.word	0x00002df8
    2894:	.word	0x000039e8
    2898:	.word	0x000039e8
    289c:	.word	0x000039e8
    28a0:	.word	0x00002e28
    28a4:	ldr	r0, [r5]
    28a8:	cmp	r0, #0
    28ac:	beq	3a08 <eval_boolean+0x12e0>
    28b0:	add	r4, r5, #8
    28b4:	add	r0, sp, #16
    28b8:	mov	r2, #520	; 0x208
    28bc:	mov	r1, r4
    28c0:	bl	0 <memcpy>
    28c4:	ldr	r1, [r6, #16]
    28c8:	mov	r0, r5
    28cc:	bl	7c6c <eval_cursor>
    28d0:	mvn	r7, #0
    28d4:	cmp	r0, #0
    28d8:	bne	31fc <eval_boolean+0xad4>
    28dc:	sub	r1, fp, #40	; 0x28
    28e0:	mov	r0, r4
    28e4:	bl	0 <coda_cursor_get_num_elements>
    28e8:	cmp	r0, #0
    28ec:	bne	31fc <eval_boolean+0xad4>
    28f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    28f4:	cmp	r0, #1
    28f8:	blt	301c <eval_boolean+0x8f4>
    28fc:	mov	r0, r4
    2900:	bl	0 <coda_cursor_goto_first_array_element>
    2904:	cmp	r0, #0
    2908:	bne	31fc <eval_boolean+0xad4>
    290c:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2910:	cmp	r0, #1
    2914:	blt	301c <eval_boolean+0x8f4>
    2918:	mov	sl, #0
    291c:	sub	r9, fp, #44	; 0x2c
    2920:	mvn	r7, #0
    2924:	ldr	r1, [r6, #20]
    2928:	mov	r0, r5
    292c:	mov	r2, r9
    2930:	bl	2728 <eval_boolean>
    2934:	cmp	r0, #0
    2938:	bne	31fc <eval_boolean+0xad4>
    293c:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2940:	cmp	r0, #0
    2944:	beq	389c <eval_boolean+0x1174>
    2948:	ldr	r0, [fp, #-40]	; 0xffffffd8
    294c:	sub	r1, r0, #1
    2950:	cmp	sl, r1
    2954:	bge	296c <eval_boolean+0x244>
    2958:	mov	r0, r4
    295c:	bl	0 <coda_cursor_goto_next_array_element>
    2960:	cmp	r0, #0
    2964:	bne	31fc <eval_boolean+0xad4>
    2968:	ldr	r0, [fp, #-40]	; 0xffffffd8
    296c:	add	sl, sl, #1
    2970:	cmp	sl, r0
    2974:	blt	2924 <eval_boolean+0x1fc>
    2978:	b	301c <eval_boolean+0x8f4>
    297c:	ldr	r1, [r6, #16]
    2980:	add	r2, sp, #16
    2984:	mov	r0, r5
    2988:	bl	53cc <eval_float>
    298c:	cmp	r0, #0
    2990:	bne	2f80 <eval_boolean+0x858>
    2994:	vldr	d0, [sp, #16]
    2998:	bl	0 <coda_isNaN>
    299c:	b	31f4 <eval_boolean+0xacc>
    29a0:	ldr	r1, [r6, #16]
    29a4:	add	r2, sp, #16
    29a8:	mov	r0, r5
    29ac:	bl	53cc <eval_float>
    29b0:	cmp	r0, #0
    29b4:	bne	2f80 <eval_boolean+0x858>
    29b8:	vldr	d0, [sp, #16]
    29bc:	bl	0 <coda_isPlusInf>
    29c0:	b	31f4 <eval_boolean+0xacc>
    29c4:	ldr	r1, [r6, #16]
    29c8:	add	r2, sp, #16
    29cc:	mov	r0, r5
    29d0:	bl	53cc <eval_float>
    29d4:	cmp	r0, #0
    29d8:	bne	2f80 <eval_boolean+0x858>
    29dc:	vldr	d0, [sp, #16]
    29e0:	bl	0 <coda_isInf>
    29e4:	b	31f4 <eval_boolean+0xacc>
    29e8:	ldr	r1, [r6, #16]
    29ec:	ldr	r0, [r1, #4]
    29f0:	cmp	r0, #2
    29f4:	beq	2a08 <eval_boolean+0x2e0>
    29f8:	ldr	r2, [r6, #20]
    29fc:	ldr	r2, [r2, #4]
    2a00:	cmp	r2, #2
    2a04:	bne	30f8 <eval_boolean+0x9d0>
    2a08:	add	r2, sp, #16
    2a0c:	mov	r0, r5
    2a10:	bl	53cc <eval_float>
    2a14:	cmp	r0, #0
    2a18:	bne	2f80 <eval_boolean+0x858>
    2a1c:	ldr	r1, [r6, #20]
    2a20:	sub	r2, fp, #40	; 0x28
    2a24:	mov	r0, r5
    2a28:	bl	53cc <eval_float>
    2a2c:	cmp	r0, #0
    2a30:	bne	2f80 <eval_boolean+0x858>
    2a34:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2a38:	vldr	d17, [sp, #16]
    2a3c:	mov	r0, #0
    2a40:	vcmpe.f64	d17, d16
    2a44:	vmrs	APSR_nzcv, fpscr
    2a48:	movwgt	r0, #1
    2a4c:	b	31f4 <eval_boolean+0xacc>
    2a50:	ldr	r1, [r6, #16]
    2a54:	mov	r0, r5
    2a58:	mov	r2, r8
    2a5c:	bl	2728 <eval_boolean>
    2a60:	mvn	r7, #0
    2a64:	cmp	r0, #0
    2a68:	bne	31fc <eval_boolean+0xad4>
    2a6c:	ldr	r0, [r8]
    2a70:	cmp	r0, #0
    2a74:	beq	31f8 <eval_boolean+0xad0>
    2a78:	ldr	r1, [r6, #20]
    2a7c:	mov	r0, r5
    2a80:	mov	r2, r8
    2a84:	bl	2728 <eval_boolean>
    2a88:	cmp	r0, #0
    2a8c:	bne	31fc <eval_boolean+0xad4>
    2a90:	b	31f8 <eval_boolean+0xad0>
    2a94:	ldr	r0, [r5]
    2a98:	cmp	r0, #0
    2a9c:	beq	3a28 <eval_boolean+0x1300>
    2aa0:	add	r4, r5, #8
    2aa4:	add	r0, sp, #16
    2aa8:	mov	r2, #520	; 0x208
    2aac:	mov	r1, r4
    2ab0:	bl	0 <memcpy>
    2ab4:	ldr	r1, [r6, #16]
    2ab8:	mov	r0, r5
    2abc:	bl	7c6c <eval_cursor>
    2ac0:	cmp	r0, #0
    2ac4:	beq	2fd4 <eval_boolean+0x8ac>
    2ac8:	ldr	r0, [pc, #4088]	; 3ac8 <eval_boolean+0x13a0>
    2acc:	ldr	r1, [pc, r0]
    2ad0:	bl	0 <__aeabi_read_tp>
    2ad4:	ldr	r0, [r0, r1]
    2ad8:	mvn	r1, #400	; 0x190
    2adc:	mvn	r7, #0
    2ae0:	cmp	r0, r1
    2ae4:	beq	31fc <eval_boolean+0xad4>
    2ae8:	ldr	r0, [pc, #4092]	; 3aec <eval_boolean+0x13c4>
    2aec:	mov	r7, #0
    2af0:	ldr	r1, [pc, r0]
    2af4:	bl	0 <__aeabi_read_tp>
    2af8:	str	r7, [r0, r1]
    2afc:	add	r1, sp, #16
    2b00:	mov	r0, r4
    2b04:	mov	r2, #520	; 0x208
    2b08:	str	r7, [r8]
    2b0c:	bl	0 <memcpy>
    2b10:	b	31fc <eval_boolean+0xad4>
    2b14:	ldr	r1, [r6, #16]
    2b18:	ldr	r0, [r1, #4]
    2b1c:	cmp	r0, #2
    2b20:	beq	2b34 <eval_boolean+0x40c>
    2b24:	ldr	r2, [r6, #20]
    2b28:	ldr	r2, [r2, #4]
    2b2c:	cmp	r2, #2
    2b30:	bne	3148 <eval_boolean+0xa20>
    2b34:	add	r2, sp, #16
    2b38:	mov	r0, r5
    2b3c:	bl	53cc <eval_float>
    2b40:	cmp	r0, #0
    2b44:	bne	2f80 <eval_boolean+0x858>
    2b48:	ldr	r1, [r6, #20]
    2b4c:	sub	r2, fp, #40	; 0x28
    2b50:	mov	r0, r5
    2b54:	bl	53cc <eval_float>
    2b58:	cmp	r0, #0
    2b5c:	bne	2f80 <eval_boolean+0x858>
    2b60:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2b64:	vldr	d17, [sp, #16]
    2b68:	mov	r0, #0
    2b6c:	vcmpe.f64	d17, d16
    2b70:	vmrs	APSR_nzcv, fpscr
    2b74:	movwls	r0, #1
    2b78:	b	31f4 <eval_boolean+0xacc>
    2b7c:	ldr	r1, [r6, #16]
    2b80:	ldr	r0, [r1, #4]
    2b84:	cmp	r0, #2
    2b88:	beq	2b9c <eval_boolean+0x474>
    2b8c:	ldr	r2, [r6, #20]
    2b90:	ldr	r2, [r2, #4]
    2b94:	cmp	r2, #2
    2b98:	bne	3198 <eval_boolean+0xa70>
    2b9c:	add	r2, sp, #16
    2ba0:	mov	r0, r5
    2ba4:	bl	53cc <eval_float>
    2ba8:	cmp	r0, #0
    2bac:	bne	2f80 <eval_boolean+0x858>
    2bb0:	ldr	r1, [r6, #20]
    2bb4:	sub	r2, fp, #40	; 0x28
    2bb8:	mov	r0, r5
    2bbc:	bl	53cc <eval_float>
    2bc0:	cmp	r0, #0
    2bc4:	bne	2f80 <eval_boolean+0x858>
    2bc8:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2bcc:	vldr	d17, [sp, #16]
    2bd0:	mov	r0, #0
    2bd4:	vcmpe.f64	d17, d16
    2bd8:	vmrs	APSR_nzcv, fpscr
    2bdc:	b	31f0 <eval_boolean+0xac8>
    2be0:	ldr	r1, [r6, #16]
    2be4:	add	r2, sp, #16
    2be8:	mov	r0, r5
    2bec:	bl	53cc <eval_float>
    2bf0:	cmp	r0, #0
    2bf4:	bne	2f80 <eval_boolean+0x858>
    2bf8:	vldr	d0, [sp, #16]
    2bfc:	bl	0 <coda_isMinInf>
    2c00:	b	31f4 <eval_boolean+0xacc>
    2c04:	ldr	r1, [r6, #16]
    2c08:	add	r2, sp, #16
    2c0c:	mov	r0, r5
    2c10:	bl	2728 <eval_boolean>
    2c14:	cmp	r0, #0
    2c18:	bne	2f80 <eval_boolean+0x858>
    2c1c:	ldr	r0, [sp, #16]
    2c20:	mov	r2, r8
    2c24:	cmp	r0, #0
    2c28:	mov	r0, r5
    2c2c:	ldreq	r1, [r6, #24]
    2c30:	ldrne	r1, [r6, #20]
    2c34:	bl	2728 <eval_boolean>
    2c38:	cmp	r0, #0
    2c3c:	bne	2f80 <eval_boolean+0x858>
    2c40:	b	31f8 <eval_boolean+0xad0>
    2c44:	ldr	r1, [r6, #16]
    2c48:	ldr	r0, [r1, #4]
    2c4c:	cmp	r0, #2
    2c50:	beq	2c64 <eval_boolean+0x53c>
    2c54:	ldr	r2, [r6, #20]
    2c58:	ldr	r2, [r2, #4]
    2c5c:	cmp	r2, #2
    2c60:	bne	3208 <eval_boolean+0xae0>
    2c64:	add	r2, sp, #16
    2c68:	mov	r0, r5
    2c6c:	bl	53cc <eval_float>
    2c70:	cmp	r0, #0
    2c74:	bne	2f80 <eval_boolean+0x858>
    2c78:	ldr	r1, [r6, #20]
    2c7c:	sub	r2, fp, #40	; 0x28
    2c80:	mov	r0, r5
    2c84:	bl	53cc <eval_float>
    2c88:	cmp	r0, #0
    2c8c:	bne	2f80 <eval_boolean+0x858>
    2c90:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2c94:	vldr	d17, [sp, #16]
    2c98:	mov	r0, #0
    2c9c:	vcmp.f64	d17, d16
    2ca0:	vmrs	APSR_nzcv, fpscr
    2ca4:	movweq	r0, #1
    2ca8:	b	31f4 <eval_boolean+0xacc>
    2cac:	ldr	r0, [r6, #12]
    2cb0:	b	31f4 <eval_boolean+0xacc>
    2cb4:	ldr	r1, [r6, #16]
    2cb8:	ldr	r0, [r1, #4]
    2cbc:	cmp	r0, #2
    2cc0:	beq	2cd4 <eval_boolean+0x5ac>
    2cc4:	ldr	r2, [r6, #20]
    2cc8:	ldr	r2, [r2, #4]
    2ccc:	cmp	r2, #2
    2cd0:	bne	3264 <eval_boolean+0xb3c>
    2cd4:	add	r2, sp, #16
    2cd8:	mov	r0, r5
    2cdc:	bl	53cc <eval_float>
    2ce0:	cmp	r0, #0
    2ce4:	bne	2f80 <eval_boolean+0x858>
    2ce8:	ldr	r1, [r6, #20]
    2cec:	sub	r2, fp, #40	; 0x28
    2cf0:	mov	r0, r5
    2cf4:	bl	53cc <eval_float>
    2cf8:	cmp	r0, #0
    2cfc:	bne	2f80 <eval_boolean+0x858>
    2d00:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2d04:	vldr	d17, [sp, #16]
    2d08:	mov	r0, #0
    2d0c:	vcmp.f64	d17, d16
    2d10:	vmrs	APSR_nzcv, fpscr
    2d14:	movwne	r0, #1
    2d18:	b	31f4 <eval_boolean+0xacc>
    2d1c:	ldr	r0, [r5]
    2d20:	cmp	r0, #0
    2d24:	beq	3a48 <eval_boolean+0x1320>
    2d28:	add	r4, r5, #8
    2d2c:	add	r0, sp, #16
    2d30:	mov	r2, #520	; 0x208
    2d34:	mov	r1, r4
    2d38:	bl	0 <memcpy>
    2d3c:	ldr	r1, [r6, #16]
    2d40:	mov	r0, r5
    2d44:	bl	7c6c <eval_cursor>
    2d48:	mvn	r7, #0
    2d4c:	cmp	r0, #0
    2d50:	bne	31fc <eval_boolean+0xad4>
    2d54:	sub	r1, fp, #40	; 0x28
    2d58:	mov	r0, r4
    2d5c:	bl	0 <coda_cursor_get_num_elements>
    2d60:	cmp	r0, #0
    2d64:	bne	31fc <eval_boolean+0xad4>
    2d68:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2d6c:	cmp	r0, #1
    2d70:	blt	2df0 <eval_boolean+0x6c8>
    2d74:	mov	r0, r4
    2d78:	bl	0 <coda_cursor_goto_first_array_element>
    2d7c:	cmp	r0, #0
    2d80:	bne	31fc <eval_boolean+0xad4>
    2d84:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2d88:	cmp	r0, #1
    2d8c:	blt	2df0 <eval_boolean+0x6c8>
    2d90:	mov	sl, #0
    2d94:	sub	r9, fp, #44	; 0x2c
    2d98:	mvn	r7, #0
    2d9c:	ldr	r1, [r6, #20]
    2da0:	mov	r0, r5
    2da4:	mov	r2, r9
    2da8:	bl	2728 <eval_boolean>
    2dac:	cmp	r0, #0
    2db0:	bne	31fc <eval_boolean+0xad4>
    2db4:	ldr	r0, [fp, #-44]	; 0xffffffd4
    2db8:	cmp	r0, #0
    2dbc:	bne	38a8 <eval_boolean+0x1180>
    2dc0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2dc4:	sub	r1, r0, #1
    2dc8:	cmp	sl, r1
    2dcc:	bge	2de4 <eval_boolean+0x6bc>
    2dd0:	mov	r0, r4
    2dd4:	bl	0 <coda_cursor_goto_next_array_element>
    2dd8:	cmp	r0, #0
    2ddc:	bne	31fc <eval_boolean+0xad4>
    2de0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2de4:	add	sl, sl, #1
    2de8:	cmp	sl, r0
    2dec:	blt	2d9c <eval_boolean+0x674>
    2df0:	mov	r0, #0
    2df4:	b	3020 <eval_boolean+0x8f8>
    2df8:	ldr	r0, [r5]
    2dfc:	cmp	r0, #0
    2e00:	beq	3a68 <eval_boolean+0x1340>
    2e04:	ldr	r1, [r5, #560]	; 0x230
    2e08:	cmp	r1, #0
    2e0c:	beq	3038 <eval_boolean+0x910>
    2e10:	movw	r1, #0
    2e14:	mvn	r0, #400	; 0x190
    2e18:	movt	r1, #0
    2e1c:	bl	0 <coda_set_error>
    2e20:	mvn	r7, #0
    2e24:	b	31fc <eval_boolean+0xad4>
    2e28:	ldr	r0, [r6, #12]
    2e2c:	ldr	r1, [r6, #16]
    2e30:	ldrb	r0, [r0]
    2e34:	add	r4, r5, r0, lsl #3
    2e38:	mov	r0, r5
    2e3c:	ldr	r9, [r4, #-312]!	; 0xfffffec8
    2e40:	ldr	sl, [r4, #4]
    2e44:	mov	r2, r4
    2e48:	bl	3c6c <eval_integer>
    2e4c:	mvn	r7, #0
    2e50:	cmp	r0, #0
    2e54:	bne	31fc <eval_boolean+0xad4>
    2e58:	ldr	r1, [r6, #20]
    2e5c:	mov	r0, r5
    2e60:	mov	r2, r8
    2e64:	bl	2728 <eval_boolean>
    2e68:	cmp	r0, #0
    2e6c:	bne	31fc <eval_boolean+0xad4>
    2e70:	stm	r4, {r9, sl}
    2e74:	b	31f8 <eval_boolean+0xad0>
    2e78:	ldr	r1, [r6, #16]
    2e7c:	mov	r0, r5
    2e80:	mov	r2, r8
    2e84:	bl	2728 <eval_boolean>
    2e88:	mvn	r7, #0
    2e8c:	cmp	r0, #0
    2e90:	bne	31fc <eval_boolean+0xad4>
    2e94:	ldr	r0, [r8]
    2e98:	clz	r0, r0
    2e9c:	lsr	r0, r0, #5
    2ea0:	b	31f4 <eval_boolean+0xacc>
    2ea4:	ldr	r0, [r5]
    2ea8:	cmp	r0, #0
    2eac:	beq	3a88 <eval_boolean+0x1360>
    2eb0:	add	r4, r5, #8
    2eb4:	add	r0, sp, #16
    2eb8:	mov	r2, #520	; 0x208
    2ebc:	mov	r1, r4
    2ec0:	bl	0 <memcpy>
    2ec4:	ldr	r1, [r6, #16]
    2ec8:	mov	r0, r5
    2ecc:	bl	7c6c <eval_cursor>
    2ed0:	cmp	r0, #0
    2ed4:	bne	2f80 <eval_boolean+0x858>
    2ed8:	ldr	r1, [r6, #20]
    2edc:	mov	r0, r5
    2ee0:	mov	r2, r8
    2ee4:	bl	2728 <eval_boolean>
    2ee8:	cmp	r0, #0
    2eec:	bne	2f80 <eval_boolean+0x858>
    2ef0:	b	3024 <eval_boolean+0x8fc>
    2ef4:	ldr	r1, [r6, #16]
    2ef8:	ldr	r0, [r1, #4]
    2efc:	cmp	r0, #2
    2f00:	beq	2f14 <eval_boolean+0x7ec>
    2f04:	ldr	r2, [r6, #20]
    2f08:	ldr	r2, [r2, #4]
    2f0c:	cmp	r2, #2
    2f10:	bne	32c0 <eval_boolean+0xb98>
    2f14:	add	r2, sp, #16
    2f18:	mov	r0, r5
    2f1c:	bl	53cc <eval_float>
    2f20:	cmp	r0, #0
    2f24:	bne	2f80 <eval_boolean+0x858>
    2f28:	ldr	r1, [r6, #20]
    2f2c:	sub	r2, fp, #40	; 0x28
    2f30:	mov	r0, r5
    2f34:	bl	53cc <eval_float>
    2f38:	cmp	r0, #0
    2f3c:	bne	2f80 <eval_boolean+0x858>
    2f40:	vldr	d16, [fp, #-40]	; 0xffffffd8
    2f44:	vldr	d17, [sp, #16]
    2f48:	mov	r0, #0
    2f4c:	vcmpe.f64	d17, d16
    2f50:	vmrs	APSR_nzcv, fpscr
    2f54:	movwmi	r0, #1
    2f58:	b	31f4 <eval_boolean+0xacc>
    2f5c:	ldr	r1, [r6, #16]
    2f60:	sub	r0, fp, #68	; 0x44
    2f64:	sub	r2, fp, #60	; 0x3c
    2f68:	sub	r3, fp, #64	; 0x40
    2f6c:	str	r0, [sp]
    2f70:	mov	r0, r5
    2f74:	bl	61e8 <eval_string>
    2f78:	cmp	r0, #0
    2f7c:	beq	30c4 <eval_boolean+0x99c>
    2f80:	mvn	r7, #0
    2f84:	b	31fc <eval_boolean+0xad4>
    2f88:	ldr	r1, [r6, #16]
    2f8c:	mov	r0, r5
    2f90:	mov	r2, r8
    2f94:	bl	2728 <eval_boolean>
    2f98:	mvn	r7, #0
    2f9c:	cmp	r0, #0
    2fa0:	bne	31fc <eval_boolean+0xad4>
    2fa4:	ldr	r0, [r8]
    2fa8:	mov	r7, #0
    2fac:	cmp	r0, #0
    2fb0:	bne	31fc <eval_boolean+0xad4>
    2fb4:	ldr	r1, [r6, #20]
    2fb8:	mov	r0, r5
    2fbc:	mov	r2, r8
    2fc0:	bl	2728 <eval_boolean>
    2fc4:	cmp	r0, #0
    2fc8:	mvn	r7, #0
    2fcc:	moveq	r7, #0
    2fd0:	b	31fc <eval_boolean+0xad4>
    2fd4:	sub	r1, fp, #40	; 0x28
    2fd8:	mov	r0, r4
    2fdc:	bl	0 <coda_cursor_get_type_class>
    2fe0:	mvn	r7, #0
    2fe4:	cmp	r0, #0
    2fe8:	bne	31fc <eval_boolean+0xad4>
    2fec:	ldr	r0, [fp, #-40]	; 0xffffffd8
    2ff0:	cmp	r0, #6
    2ff4:	bne	301c <eval_boolean+0x8f4>
    2ff8:	sub	r1, fp, #44	; 0x2c
    2ffc:	mov	r0, r4
    3000:	bl	0 <coda_cursor_get_special_type>
    3004:	mvn	r7, #0
    3008:	cmp	r0, #0
    300c:	bne	31fc <eval_boolean+0xad4>
    3010:	ldr	r0, [fp, #-44]	; 0xffffffd4
    3014:	cmp	r0, #0
    3018:	beq	3790 <eval_boolean+0x1068>
    301c:	mov	r0, #1
    3020:	str	r0, [r8]
    3024:	add	r1, sp, #16
    3028:	mov	r0, r4
    302c:	mov	r2, #520	; 0x208
    3030:	bl	0 <memcpy>
    3034:	b	31f8 <eval_boolean+0xad0>
    3038:	ldr	r1, [r6, #12]
    303c:	ldr	r0, [r0]
    3040:	add	r2, sp, #16
    3044:	bl	0 <coda_product_variable_get_size>
    3048:	mvn	r7, #0
    304c:	cmp	r0, #0
    3050:	bne	31fc <eval_boolean+0xad4>
    3054:	ldr	r0, [r6, #12]
    3058:	str	r0, [r5, #560]	; 0x230
    305c:	ldr	r0, [sp, #16]
    3060:	cmp	r0, #1
    3064:	blt	30b0 <eval_boolean+0x988>
    3068:	add	r7, r5, #552	; 0x228
    306c:	mov	r9, #0
    3070:	sub	sl, fp, #40	; 0x28
    3074:	mov	r4, #0
    3078:	stm	r7, {r4, r9}
    307c:	mov	r0, r5
    3080:	mov	r2, sl
    3084:	ldr	r1, [r6, #16]
    3088:	bl	2728 <eval_boolean>
    308c:	cmp	r0, #0
    3090:	bne	2f80 <eval_boolean+0x858>
    3094:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3098:	cmp	r0, #0
    309c:	bne	36fc <eval_boolean+0xfd4>
    30a0:	ldr	r0, [sp, #16]
    30a4:	add	r4, r4, #1
    30a8:	cmp	r4, r0
    30ac:	blt	3078 <eval_boolean+0x950>
    30b0:	mov	r0, #0
    30b4:	mov	r7, #0
    30b8:	str	r0, [r8]
    30bc:	str	r0, [r5, #560]	; 0x230
    30c0:	b	31fc <eval_boolean+0xad4>
    30c4:	ldr	r1, [r6, #20]
    30c8:	sub	r0, fp, #56	; 0x38
    30cc:	sub	r2, fp, #48	; 0x30
    30d0:	sub	r3, fp, #52	; 0x34
    30d4:	str	r0, [sp]
    30d8:	mov	r0, r5
    30dc:	bl	61e8 <eval_string>
    30e0:	cmp	r0, #0
    30e4:	beq	3320 <eval_boolean+0xbf8>
    30e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
    30ec:	cmp	r0, #0
    30f0:	bne	35e4 <eval_boolean+0xebc>
    30f4:	b	2f80 <eval_boolean+0x858>
    30f8:	cmp	r0, #3
    30fc:	beq	3350 <eval_boolean+0xc28>
    3100:	cmp	r0, #1
    3104:	bne	3aa8 <eval_boolean+0x1380>
    3108:	add	r2, sp, #16
    310c:	mov	r0, r5
    3110:	bl	3c6c <eval_integer>
    3114:	cmp	r0, #0
    3118:	bne	2f80 <eval_boolean+0x858>
    311c:	ldr	r1, [r6, #20]
    3120:	sub	r2, fp, #40	; 0x28
    3124:	mov	r0, r5
    3128:	bl	3c6c <eval_integer>
    312c:	cmp	r0, #0
    3130:	bne	2f80 <eval_boolean+0x858>
    3134:	ldr	r1, [sp, #16]
    3138:	ldr	r2, [sp, #20]
    313c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3140:	ldr	r7, [fp, #-36]	; 0xffffffdc
    3144:	b	330c <eval_boolean+0xbe4>
    3148:	cmp	r0, #3
    314c:	beq	33c8 <eval_boolean+0xca0>
    3150:	cmp	r0, #1
    3154:	bne	3acc <eval_boolean+0x13a4>
    3158:	add	r2, sp, #16
    315c:	mov	r0, r5
    3160:	bl	3c6c <eval_integer>
    3164:	cmp	r0, #0
    3168:	bne	2f80 <eval_boolean+0x858>
    316c:	ldr	r1, [r6, #20]
    3170:	sub	r2, fp, #40	; 0x28
    3174:	mov	r0, r5
    3178:	bl	3c6c <eval_integer>
    317c:	cmp	r0, #0
    3180:	bne	2f80 <eval_boolean+0x858>
    3184:	ldr	r1, [sp, #16]
    3188:	ldr	r2, [sp, #20]
    318c:	ldr	r3, [fp, #-40]	; 0xffffffd8
    3190:	ldr	r7, [fp, #-36]	; 0xffffffdc
    3194:	b	31e4 <eval_boolean+0xabc>
    3198:	cmp	r0, #3
    319c:	beq	3440 <eval_boolean+0xd18>
    31a0:	cmp	r0, #1
    31a4:	bne	3af0 <eval_boolean+0x13c8>
    31a8:	add	r2, sp, #16
    31ac:	mov	r0, r5
    31b0:	bl	3c6c <eval_integer>
    31b4:	cmp	r0, #0
    31b8:	bne	2f80 <eval_boolean+0x858>
    31bc:	ldr	r1, [r6, #20]
    31c0:	sub	r2, fp, #40	; 0x28
    31c4:	mov	r0, r5
    31c8:	bl	3c6c <eval_integer>
    31cc:	cmp	r0, #0
    31d0:	bne	2f80 <eval_boolean+0x858>
    31d4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    31d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
    31dc:	ldr	r3, [sp, #16]
    31e0:	ldr	r7, [sp, #20]
    31e4:	mov	r0, #0
    31e8:	subs	r1, r3, r1
    31ec:	sbcs	r1, r7, r2
    31f0:	movwge	r0, #1
    31f4:	str	r0, [r8]
    31f8:	mov	r7, #0
    31fc:	mov	r0, r7
    3200:	sub	sp, fp, #28
    3204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3208:	cmp	r0, #3
    320c:	beq	34b8 <eval_boolean+0xd90>
    3210:	cmp	r0, #1
    3214:	bne	3b10 <eval_boolean+0x13e8>
    3218:	add	r2, sp, #16
    321c:	mov	r0, r5
    3220:	bl	3c6c <eval_integer>
    3224:	cmp	r0, #0
    3228:	bne	2f80 <eval_boolean+0x858>
    322c:	ldr	r1, [r6, #20]
    3230:	sub	r2, fp, #40	; 0x28
    3234:	mov	r0, r5
    3238:	bl	3c6c <eval_integer>
    323c:	cmp	r0, #0
    3240:	bne	2f80 <eval_boolean+0x858>
    3244:	ldr	r0, [fp, #-40]	; 0xffffffd8
    3248:	ldr	r2, [sp, #16]
    324c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    3250:	ldr	r3, [sp, #20]
    3254:	eor	r1, r3, r1
    3258:	eor	r0, r2, r0
    325c:	orr	r0, r0, r1
    3260:	b	2e98 <eval_boolean+0x770>
    3264:	cmp	r0, #3
    3268:	beq	352c <eval_boolean+0xe04>
    326c:	cmp	r0, #1
    3270:	bne	3b30 <eval_boolean+0x1408>
    3274:	add	r2, sp, #16
    3278:	mov	r0, r5
    327c:	bl	3c6c <eval_integer>
    3280:	cmp	r0, #0
    3284:	bne	2f80 <eval_boolean+0x858>
    3288:	ldr	r1, [r6, #20]
    328c:	sub	r2, fp, #40	; 0x28
    3290:	mov	r0, r5
    3294:	bl	3c6c <eval_integer>
    3298:	cmp	r0, #0
    329c:	bne	2f80 <eval_boolean+0x858>
    32a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    32a4:	ldr	r2, [sp, #16]
    32a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    32ac:	ldr	r3, [sp, #20]
    32b0:	eor	r1, r3, r1
    32b4:	eor	r0, r2, r0
    32b8:	orrs	r0, r0, r1
    32bc:	b	2d14 <eval_boolean+0x5ec>
    32c0:	cmp	r0, #3
    32c4:	beq	359c <eval_boolean+0xe74>
    32c8:	cmp	r0, #1
    32cc:	bne	3b50 <eval_boolean+0x1428>
    32d0:	add	r2, sp, #16
    32d4:	mov	r0, r5
    32d8:	bl	3c6c <eval_integer>
    32dc:	cmp	r0, #0
    32e0:	bne	2f80 <eval_boolean+0x858>
    32e4:	ldr	r1, [r6, #20]
    32e8:	sub	r2, fp, #40	; 0x28
    32ec:	mov	r0, r5
    32f0:	bl	3c6c <eval_integer>
    32f4:	cmp	r0, #0
    32f8:	bne	2f80 <eval_boolean+0x858>
    32fc:	ldr	r1, [fp, #-40]	; 0xffffffd8
    3300:	ldr	r2, [fp, #-36]	; 0xffffffdc
    3304:	ldr	r3, [sp, #16]
    3308:	ldr	r7, [sp, #20]
    330c:	mov	r0, #0
    3310:	subs	r1, r3, r1
    3314:	sbcs	r1, r7, r2
    3318:	movwlt	r0, #1
    331c:	b	31f4 <eval_boolean+0xacc>
    3320:	ldr	r0, [fp, #-64]	; 0xffffffc0
    3324:	cmp	r0, #1
    3328:	blt	35f0 <eval_boolean+0xec8>
    332c:	ldr	r1, [fp, #-60]	; 0xffffffc4
    3330:	mov	r2, #0
    3334:	add	r0, r1, r0
    3338:	ldr	r1, [fp, #-68]	; 0xffffffbc
    333c:	strb	r2, [r1, r0]
    3340:	ldr	r0, [fp, #-60]	; 0xffffffc4
    3344:	ldr	r1, [fp, #-68]	; 0xffffffbc
    3348:	add	r0, r1, r0
    334c:	b	35f8 <eval_boolean+0xed0>
    3350:	sub	r0, fp, #52	; 0x34
    3354:	add	r2, sp, #16
    3358:	sub	r3, fp, #44	; 0x2c
    335c:	str	r0, [sp]
    3360:	mov	r0, r5
    3364:	bl	61e8 <eval_string>
    3368:	cmp	r0, #0
    336c:	bne	2f80 <eval_boolean+0x858>
    3370:	ldr	r1, [r6, #20]
    3374:	sub	r0, fp, #56	; 0x38
    3378:	sub	r2, fp, #40	; 0x28
    337c:	sub	r3, fp, #48	; 0x30
    3380:	str	r0, [sp]
    3384:	mov	r0, r5
    3388:	bl	61e8 <eval_string>
    338c:	cmp	r0, #0
    3390:	bne	35e0 <eval_boolean+0xeb8>
    3394:	sub	lr, fp, #52	; 0x34
    3398:	ldr	ip, [fp, #-56]	; 0xffffffc8
    339c:	mov	r7, #0
    33a0:	ldm	lr, {r0, r1, r2, lr}
    33a4:	ldr	r9, [sp, #16]
    33a8:	cmp	r2, #1
    33ac:	cmpge	r1, #1
    33b0:	bge	38b0 <eval_boolean+0x1188>
    33b4:	cmp	r7, r2
    33b8:	bne	3798 <eval_boolean+0x1070>
    33bc:	subs	r3, r7, r1
    33c0:	mvnne	r3, #0
    33c4:	b	37c0 <eval_boolean+0x1098>
    33c8:	sub	r0, fp, #52	; 0x34
    33cc:	add	r2, sp, #16
    33d0:	sub	r3, fp, #44	; 0x2c
    33d4:	str	r0, [sp]
    33d8:	mov	r0, r5
    33dc:	bl	61e8 <eval_string>
    33e0:	cmp	r0, #0
    33e4:	bne	2f80 <eval_boolean+0x858>
    33e8:	ldr	r1, [r6, #20]
    33ec:	sub	r0, fp, #56	; 0x38
    33f0:	sub	r2, fp, #40	; 0x28
    33f4:	sub	r3, fp, #48	; 0x30
    33f8:	str	r0, [sp]
    33fc:	mov	r0, r5
    3400:	bl	61e8 <eval_string>
    3404:	cmp	r0, #0
    3408:	bne	35e0 <eval_boolean+0xeb8>
    340c:	sub	lr, fp, #52	; 0x34
    3410:	ldr	ip, [fp, #-56]	; 0xffffffc8
    3414:	mov	r7, #0
    3418:	ldm	lr, {r0, r1, r2, lr}
    341c:	ldr	r9, [sp, #16]
    3420:	cmp	r2, #1
    3424:	cmpge	r1, #1
    3428:	bge	38e0 <eval_boolean+0x11b8>
    342c:	cmp	r7, r2
    3430:	bne	37d0 <eval_boolean+0x10a8>
    3434:	subs	r3, r7, r1
    3438:	mvnne	r3, #0
    343c:	b	37f8 <eval_boolean+0x10d0>
    3440:	sub	r0, fp, #52	; 0x34
    3444:	add	r2, sp, #16
    3448:	sub	r3, fp, #44	; 0x2c
    344c:	str	r0, [sp]
    3450:	mov	r0, r5
    3454:	bl	61e8 <eval_string>
    3458:	cmp	r0, #0
    345c:	bne	2f80 <eval_boolean+0x858>
    3460:	ldr	r1, [r6, #20]
    3464:	sub	r0, fp, #56	; 0x38
    3468:	sub	r2, fp, #40	; 0x28
    346c:	sub	r3, fp, #48	; 0x30
    3470:	str	r0, [sp]
    3474:	mov	r0, r5
    3478:	bl	61e8 <eval_string>
    347c:	cmp	r0, #0
    3480:	bne	35e0 <eval_boolean+0xeb8>
    3484:	sub	lr, fp, #52	; 0x34
    3488:	ldr	ip, [fp, #-56]	; 0xffffffc8
    348c:	mov	r7, #0
    3490:	ldm	lr, {r0, r1, r2, lr}
    3494:	ldr	r9, [sp, #16]
    3498:	cmp	r2, #1
    349c:	cmpge	r1, #1
    34a0:	bge	3910 <eval_boolean+0x11e8>
    34a4:	cmp	r7, r2
    34a8:	bne	3814 <eval_boolean+0x10ec>
    34ac:	subs	r3, r7, r1
    34b0:	mvnne	r3, #0
    34b4:	b	383c <eval_boolean+0x1114>
    34b8:	sub	r0, fp, #52	; 0x34
    34bc:	add	r2, sp, #16
    34c0:	sub	r3, fp, #44	; 0x2c
    34c4:	str	r0, [sp]
    34c8:	mov	r0, r5
    34cc:	bl	61e8 <eval_string>
    34d0:	cmp	r0, #0
    34d4:	bne	2f80 <eval_boolean+0x858>
    34d8:	ldr	r1, [r6, #20]
    34dc:	sub	r0, fp, #56	; 0x38
    34e0:	sub	r2, fp, #40	; 0x28
    34e4:	sub	r3, fp, #48	; 0x30
    34e8:	str	r0, [sp]
    34ec:	mov	r0, r5
    34f0:	bl	61e8 <eval_string>
    34f4:	cmp	r0, #0
    34f8:	bne	35e0 <eval_boolean+0xeb8>
    34fc:	sub	r2, fp, #52	; 0x34
    3500:	mov	r3, #0
    3504:	ldm	r2, {r0, r1, r2}
    3508:	cmp	r2, #1
    350c:	cmpge	r1, #1
    3510:	bge	3940 <eval_boolean+0x1218>
    3514:	eor	r7, r3, r1
    3518:	eor	r3, r3, r2
    351c:	orr	r3, r3, r7
    3520:	clz	r3, r3
    3524:	lsr	r3, r3, #5
    3528:	b	3874 <eval_boolean+0x114c>
    352c:	sub	r0, fp, #52	; 0x34
    3530:	add	r2, sp, #16
    3534:	sub	r3, fp, #44	; 0x2c
    3538:	str	r0, [sp]
    353c:	mov	r0, r5
    3540:	bl	61e8 <eval_string>
    3544:	cmp	r0, #0
    3548:	bne	2f80 <eval_boolean+0x858>
    354c:	ldr	r1, [r6, #20]
    3550:	sub	r0, fp, #56	; 0x38
    3554:	sub	r2, fp, #40	; 0x28
    3558:	sub	r3, fp, #48	; 0x30
    355c:	str	r0, [sp]
    3560:	mov	r0, r5
    3564:	bl	61e8 <eval_string>
    3568:	cmp	r0, #0
    356c:	bne	35e0 <eval_boolean+0xeb8>
    3570:	sub	r2, fp, #52	; 0x34
    3574:	mov	r3, #0
    3578:	ldm	r2, {r0, r1, r2}
    357c:	cmp	r2, #1
    3580:	cmpge	r1, #1
    3584:	bge	397c <eval_boolean+0x1254>
    3588:	eor	r7, r3, r2
    358c:	eor	r3, r3, r1
    3590:	orrs	r3, r3, r7
    3594:	movwne	r3, #1
    3598:	b	3874 <eval_boolean+0x114c>
    359c:	sub	r0, fp, #52	; 0x34
    35a0:	add	r2, sp, #16
    35a4:	sub	r3, fp, #44	; 0x2c
    35a8:	str	r0, [sp]
    35ac:	mov	r0, r5
    35b0:	bl	61e8 <eval_string>
    35b4:	cmp	r0, #0
    35b8:	bne	2f80 <eval_boolean+0x858>
    35bc:	ldr	r1, [r6, #20]
    35c0:	sub	r0, fp, #56	; 0x38
    35c4:	sub	r2, fp, #40	; 0x28
    35c8:	sub	r3, fp, #48	; 0x30
    35cc:	str	r0, [sp]
    35d0:	mov	r0, r5
    35d4:	bl	61e8 <eval_string>
    35d8:	cmp	r0, #0
    35dc:	beq	3710 <eval_boolean+0xfe8>
    35e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    35e4:	bl	0 <free>
    35e8:	mvn	r7, #0
    35ec:	b	31fc <eval_boolean+0xad4>
    35f0:	movw	r0, #0
    35f4:	movt	r0, #0
    35f8:	mov	r1, #0
    35fc:	sub	r2, fp, #40	; 0x28
    3600:	sub	r3, fp, #44	; 0x2c
    3604:	str	r1, [sp]
    3608:	mov	r1, #36	; 0x24
    360c:	bl	0 <coda_pcre_compile>
    3610:	mov	r4, r0
    3614:	ldr	r0, [fp, #-68]	; 0xffffffbc
    3618:	cmp	r0, #0
    361c:	beq	3624 <eval_boolean+0xefc>
    3620:	bl	0 <free>
    3624:	cmp	r4, #0
    3628:	beq	36c4 <eval_boolean+0xf9c>
    362c:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3630:	cmp	r0, #0
    3634:	bne	3650 <eval_boolean+0xf28>
    3638:	movw	r0, #0
    363c:	movt	r0, #0
    3640:	bl	0 <strdup>
    3644:	cmp	r0, #0
    3648:	str	r0, [fp, #-56]	; 0xffffffc8
    364c:	beq	3758 <eval_boolean+0x1030>
    3650:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3654:	ldr	r3, [fp, #-52]	; 0xffffffcc
    3658:	mov	r6, #0
    365c:	mov	r2, #48	; 0x30
    3660:	add	r7, sp, #16
    3664:	str	r6, [sp]
    3668:	stmib	sp, {r6, r7}
    366c:	str	r2, [sp, #12]
    3670:	add	r2, r0, r1
    3674:	mov	r0, r4
    3678:	mov	r1, #0
    367c:	bl	0 <coda_pcre_exec>
    3680:	mov	r5, r0
    3684:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3688:	bl	0 <free>
    368c:	movw	r0, #0
    3690:	movt	r0, #0
    3694:	ldr	r1, [r0]
    3698:	mov	r0, r4
    369c:	blx	r1
    36a0:	cmn	r5, #2
    36a4:	bgt	36ec <eval_boolean+0xfc4>
    36a8:	movw	r1, #0
    36ac:	mvn	r0, #400	; 0x190
    36b0:	mov	r2, r5
    36b4:	movt	r1, #0
    36b8:	bl	0 <coda_set_error>
    36bc:	mvn	r7, #0
    36c0:	b	31fc <eval_boolean+0xad4>
    36c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
    36c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
    36cc:	movw	r1, #0
    36d0:	mvn	r0, #400	; 0x190
    36d4:	movt	r1, #0
    36d8:	bl	0 <coda_set_error>
    36dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
    36e0:	cmp	r0, #0
    36e4:	bne	35e4 <eval_boolean+0xebc>
    36e8:	b	2f80 <eval_boolean+0x858>
    36ec:	cmp	r5, #0
    36f0:	beq	3744 <eval_boolean+0x101c>
    36f4:	mov	r0, #0
    36f8:	b	2a48 <eval_boolean+0x320>
    36fc:	mov	r0, #1
    3700:	mov	r7, #0
    3704:	str	r0, [r8]
    3708:	str	r7, [r5, #560]	; 0x230
    370c:	b	31fc <eval_boolean+0xad4>
    3710:	sub	lr, fp, #52	; 0x34
    3714:	ldr	ip, [fp, #-56]	; 0xffffffc8
    3718:	mov	r7, #0
    371c:	ldm	lr, {r0, r1, r2, lr}
    3720:	ldr	r9, [sp, #16]
    3724:	cmp	r2, #1
    3728:	cmpge	r1, #1
    372c:	bge	39b8 <eval_boolean+0x1290>
    3730:	cmp	r7, r2
    3734:	bne	3848 <eval_boolean+0x1120>
    3738:	subs	r3, r7, r1
    373c:	mvnne	r3, #0
    3740:	b	3870 <eval_boolean+0x1148>
    3744:	movw	r1, #0
    3748:	mvn	r0, #400	; 0x190
    374c:	movt	r1, #0
    3750:	bl	0 <coda_set_error>
    3754:	b	2f80 <eval_boolean+0x858>
    3758:	movw	r1, #0
    375c:	movw	r2, #0
    3760:	mvn	r0, #0
    3764:	mov	r3, #1120	; 0x460
    3768:	mvn	r7, #0
    376c:	movt	r1, #0
    3770:	movt	r2, #0
    3774:	bl	0 <coda_set_error>
    3778:	movw	r0, #0
    377c:	movt	r0, #0
    3780:	ldr	r1, [r0]
    3784:	mov	r0, r4
    3788:	blx	r1
    378c:	b	31fc <eval_boolean+0xad4>
    3790:	mov	r7, #0
    3794:	b	2afc <eval_boolean+0x3d4>
    3798:	mov	r3, #1
    379c:	cmp	r7, r1
    37a0:	beq	37c0 <eval_boolean+0x1098>
    37a4:	add	r3, r7, lr
    37a8:	ldrb	r6, [ip, r3]
    37ac:	add	r3, r7, r9
    37b0:	ldrb	r7, [r0, r3]
    37b4:	mvn	r3, #0
    37b8:	cmp	r7, r6
    37bc:	movwhi	r3, #1
    37c0:	mov	r7, #0
    37c4:	cmp	r3, #0
    37c8:	movwgt	r7, #1
    37cc:	b	3804 <eval_boolean+0x10dc>
    37d0:	mov	r3, #1
    37d4:	cmp	r7, r1
    37d8:	beq	37f8 <eval_boolean+0x10d0>
    37dc:	add	r3, r7, lr
    37e0:	ldrb	r6, [ip, r3]
    37e4:	add	r3, r7, r9
    37e8:	ldrb	r7, [r0, r3]
    37ec:	mvn	r3, #0
    37f0:	cmp	r7, r6
    37f4:	movwhi	r3, #1
    37f8:	mov	r7, #0
    37fc:	cmp	r3, #1
    3800:	movwlt	r7, #1
    3804:	str	r7, [r8]
    3808:	cmp	r2, #1
    380c:	bge	3880 <eval_boolean+0x1158>
    3810:	b	3888 <eval_boolean+0x1160>
    3814:	mov	r3, #1
    3818:	cmp	r7, r1
    381c:	beq	383c <eval_boolean+0x1114>
    3820:	add	r3, r7, lr
    3824:	ldrb	r6, [ip, r3]
    3828:	add	r3, r7, r9
    382c:	ldrb	r7, [r0, r3]
    3830:	mvn	r3, #0
    3834:	cmp	r7, r6
    3838:	movwhi	r3, #1
    383c:	mov	r7, #1
    3840:	eor	r3, r7, r3, lsr #31
    3844:	b	3874 <eval_boolean+0x114c>
    3848:	mov	r3, #1
    384c:	cmp	r7, r1
    3850:	beq	3870 <eval_boolean+0x1148>
    3854:	add	r3, r7, lr
    3858:	ldrb	r6, [ip, r3]
    385c:	add	r3, r7, r9
    3860:	ldrb	r7, [r0, r3]
    3864:	mvn	r3, #0
    3868:	cmp	r7, r6
    386c:	movwhi	r3, #1
    3870:	lsr	r3, r3, #31
    3874:	str	r3, [r8]
    3878:	cmp	r2, #1
    387c:	blt	3888 <eval_boolean+0x1160>
    3880:	bl	0 <free>
    3884:	ldr	r1, [fp, #-48]	; 0xffffffd0
    3888:	cmp	r1, #1
    388c:	blt	31f8 <eval_boolean+0xad0>
    3890:	ldr	r0, [fp, #-56]	; 0xffffffc8
    3894:	bl	0 <free>
    3898:	b	31f8 <eval_boolean+0xad0>
    389c:	mov	r7, #0
    38a0:	str	r7, [r8]
    38a4:	b	31fc <eval_boolean+0xad4>
    38a8:	mov	r0, #1
    38ac:	b	31f4 <eval_boolean+0xacc>
    38b0:	add	r4, r0, r9
    38b4:	add	r3, ip, lr
    38b8:	mov	r7, #0
    38bc:	ldrb	r6, [r3, r7]
    38c0:	ldrb	r5, [r4, r7]
    38c4:	cmp	r5, r6
    38c8:	bne	33b4 <eval_boolean+0xc8c>
    38cc:	add	r7, r7, #1
    38d0:	cmp	r7, r2
    38d4:	cmplt	r7, r1
    38d8:	blt	38bc <eval_boolean+0x1194>
    38dc:	b	33b4 <eval_boolean+0xc8c>
    38e0:	add	r4, r0, r9
    38e4:	add	r3, ip, lr
    38e8:	mov	r7, #0
    38ec:	ldrb	r6, [r3, r7]
    38f0:	ldrb	r5, [r4, r7]
    38f4:	cmp	r5, r6
    38f8:	bne	342c <eval_boolean+0xd04>
    38fc:	add	r7, r7, #1
    3900:	cmp	r7, r2
    3904:	cmplt	r7, r1
    3908:	blt	38ec <eval_boolean+0x11c4>
    390c:	b	342c <eval_boolean+0xd04>
    3910:	add	r4, r0, r9
    3914:	add	r3, ip, lr
    3918:	mov	r7, #0
    391c:	ldrb	r6, [r3, r7]
    3920:	ldrb	r5, [r4, r7]
    3924:	cmp	r5, r6
    3928:	bne	34a4 <eval_boolean+0xd7c>
    392c:	add	r7, r7, #1
    3930:	cmp	r7, r2
    3934:	cmplt	r7, r1
    3938:	blt	391c <eval_boolean+0x11f4>
    393c:	b	34a4 <eval_boolean+0xd7c>
    3940:	ldr	r7, [sp, #16]
    3944:	ldr	r3, [fp, #-56]	; 0xffffffc8
    3948:	ldr	r6, [fp, #-40]	; 0xffffffd8
    394c:	add	r6, r3, r6
    3950:	add	r7, r0, r7
    3954:	mov	r3, #0
    3958:	ldrb	r5, [r6, r3]
    395c:	ldrb	r4, [r7, r3]
    3960:	cmp	r4, r5
    3964:	bne	3514 <eval_boolean+0xdec>
    3968:	add	r3, r3, #1
    396c:	cmp	r3, r2
    3970:	cmplt	r3, r1
    3974:	blt	3958 <eval_boolean+0x1230>
    3978:	b	3514 <eval_boolean+0xdec>
    397c:	ldr	r7, [sp, #16]
    3980:	ldr	r3, [fp, #-56]	; 0xffffffc8
    3984:	ldr	r6, [fp, #-40]	; 0xffffffd8
    3988:	add	r6, r3, r6
    398c:	add	r7, r0, r7
    3990:	mov	r3, #0
    3994:	ldrb	r5, [r6, r3]
    3998:	ldrb	r4, [r7, r3]
    399c:	cmp	r4, r5
    39a0:	bne	3588 <eval_boolean+0xe60>
    39a4:	add	r3, r3, #1
    39a8:	cmp	r3, r2
    39ac:	cmplt	r3, r1
    39b0:	blt	3994 <eval_boolean+0x126c>
    39b4:	b	3588 <eval_boolean+0xe60>
    39b8:	add	r4, r0, r9
    39bc:	add	r3, ip, lr
    39c0:	mov	r7, #0
    39c4:	ldrb	r6, [r3, r7]
    39c8:	ldrb	r5, [r4, r7]
    39cc:	cmp	r5, r6
    39d0:	bne	3730 <eval_boolean+0x1008>
    39d4:	add	r7, r7, #1
    39d8:	cmp	r7, r2
    39dc:	cmplt	r7, r1
    39e0:	blt	39c4 <eval_boolean+0x129c>
    39e4:	b	3730 <eval_boolean+0x1008>
    39e8:	movw	r0, #0
    39ec:	movw	r1, #0
    39f0:	movw	r3, #0
    39f4:	movw	r2, #1379	; 0x563
    39f8:	movt	r0, #0
    39fc:	movt	r1, #0
    3a00:	movt	r3, #0
    3a04:	bl	0 <__assert_fail>
    3a08:	movw	r0, #0
    3a0c:	movw	r1, #0
    3a10:	movw	r3, #0
    3a14:	movw	r2, #1190	; 0x4a6
    3a18:	movt	r0, #0
    3a1c:	movt	r1, #0
    3a20:	movt	r3, #0
    3a24:	bl	0 <__assert_fail>
    3a28:	movw	r0, #0
    3a2c:	movw	r1, #0
    3a30:	movw	r3, #0
    3a34:	movw	r2, #1148	; 0x47c
    3a38:	movt	r0, #0
    3a3c:	movt	r1, #0
    3a40:	movt	r3, #0
    3a44:	bl	0 <__assert_fail>
    3a48:	movw	r0, #0
    3a4c:	movw	r1, #0
    3a50:	movw	r3, #0
    3a54:	movw	r2, #1239	; 0x4d7
    3a58:	movt	r0, #0
    3a5c:	movt	r1, #0
    3a60:	movt	r3, #0
    3a64:	bl	0 <__assert_fail>
    3a68:	movw	r0, #0
    3a6c:	movw	r1, #0
    3a70:	movw	r3, #0
    3a74:	movw	r2, #1288	; 0x508
    3a78:	movt	r0, #0
    3a7c:	movt	r1, #0
    3a80:	movt	r3, #0
    3a84:	bl	0 <__assert_fail>
    3a88:	movw	r0, #0
    3a8c:	movw	r1, #0
    3a90:	movw	r3, #0
    3a94:	movw	r2, #1348	; 0x544
    3a98:	movt	r0, #0
    3a9c:	movt	r1, #0
    3aa0:	movt	r3, #0
    3aa4:	bl	0 <__assert_fail>
    3aa8:	movw	r0, #0
    3aac:	movw	r1, #0
    3ab0:	movw	r3, #0
    3ab4:	mov	r2, #792	; 0x318
    3ab8:	movt	r0, #0
    3abc:	movt	r1, #0
    3ac0:	movt	r3, #0
    3ac4:	bl	0 <__assert_fail>
    3ac8:	.word	0x00000ff4
    3acc:	movw	r0, #0
    3ad0:	movw	r1, #0
    3ad4:	movw	r3, #0
    3ad8:	movw	r2, #978	; 0x3d2
    3adc:	movt	r0, #0
    3ae0:	movt	r1, #0
    3ae4:	movt	r3, #0
    3ae8:	bl	0 <__assert_fail>
    3aec:	.word	0x00000ff4
    3af0:	movw	r0, #0
    3af4:	movw	r1, #0
    3af8:	movw	r3, #0
    3afc:	movw	r2, #854	; 0x356
    3b00:	movt	r0, #0
    3b04:	movt	r1, #0
    3b08:	movt	r3, #0
    3b0c:	bl	0 <__assert_fail>
    3b10:	movw	r0, #0
    3b14:	movw	r1, #0
    3b18:	movw	r3, #0
    3b1c:	mov	r2, #668	; 0x29c
    3b20:	movt	r0, #0
    3b24:	movt	r1, #0
    3b28:	movt	r3, #0
    3b2c:	bl	0 <__assert_fail>
    3b30:	movw	r0, #0
    3b34:	movw	r1, #0
    3b38:	movw	r3, #0
    3b3c:	movw	r2, #730	; 0x2da
    3b40:	movt	r0, #0
    3b44:	movt	r1, #0
    3b48:	movt	r3, #0
    3b4c:	bl	0 <__assert_fail>
    3b50:	movw	r0, #0
    3b54:	movw	r1, #0
    3b58:	movw	r3, #0
    3b5c:	mov	r2, #916	; 0x394
    3b60:	movt	r0, #0
    3b64:	movt	r1, #0
    3b68:	movt	r3, #0
    3b6c:	bl	0 <__assert_fail>

00003b70 <coda_expression_eval_integer>:
    3b70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3b74:	add	fp, sp, #24
    3b78:	sub	sp, sp, #568	; 0x238
    3b7c:	mov	r6, r0
    3b80:	ldr	r0, [r0, #4]
    3b84:	cmp	r0, #1
    3b88:	bne	3bb8 <coda_expression_eval_integer+0x48>
    3b8c:	mov	r5, r2
    3b90:	mov	r4, r1
    3b94:	cmp	r1, #0
    3b98:	beq	3bd0 <coda_expression_eval_integer+0x60>
    3b9c:	mov	r0, sp
    3ba0:	mov	r1, r4
    3ba4:	mov	r2, #520	; 0x208
    3ba8:	str	r4, [sp]
    3bac:	add	r0, r0, #8
    3bb0:	bl	0 <memcpy>
    3bb4:	b	3be4 <coda_expression_eval_integer+0x74>
    3bb8:	movw	r1, #0
    3bbc:	movt	r1, #0
    3bc0:	mvn	r0, #99	; 0x63
    3bc4:	bl	0 <coda_set_error>
    3bc8:	mvn	r5, #0
    3bcc:	b	3c2c <coda_expression_eval_integer+0xbc>
    3bd0:	ldr	r0, [r6, #8]
    3bd4:	cmp	r0, #0
    3bd8:	beq	3c60 <coda_expression_eval_integer+0xf0>
    3bdc:	mov	r0, #0
    3be0:	str	r0, [sp]
    3be4:	mov	r7, sp
    3be8:	vmov.i32	q8, #0	; 0x00000000
    3bec:	mov	r1, r6
    3bf0:	mov	r2, r5
    3bf4:	add	r0, r7, #544	; 0x220
    3bf8:	vst1.64	{d16-d17}, [r0]
    3bfc:	add	r0, r7, #528	; 0x210
    3c00:	vst1.64	{d16-d17}, [r0]
    3c04:	mov	r0, #0
    3c08:	str	r0, [sp, #560]	; 0x230
    3c0c:	mov	r0, r7
    3c10:	bl	3c6c <eval_integer>
    3c14:	cmp	r0, #0
    3c18:	mov	r5, r0
    3c1c:	mvnne	r5, #0
    3c20:	cmp	r4, #0
    3c24:	cmpne	r0, #0
    3c28:	bne	3c38 <coda_expression_eval_integer+0xc8>
    3c2c:	mov	r0, r5
    3c30:	sub	sp, fp, #24
    3c34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3c38:	add	r6, r7, #8
    3c3c:	mov	r0, r4
    3c40:	mov	r1, r6
    3c44:	bl	0 <coda_cursor_compare>
    3c48:	mvn	r5, #0
    3c4c:	cmp	r0, #0
    3c50:	beq	3c2c <coda_expression_eval_integer+0xbc>
    3c54:	mov	r0, r6
    3c58:	bl	0 <coda_cursor_add_to_error_message>
    3c5c:	b	3c2c <coda_expression_eval_integer+0xbc>
    3c60:	movw	r1, #0
    3c64:	movt	r1, #0
    3c68:	b	3bc0 <coda_expression_eval_integer+0x50>

00003c6c <eval_integer>:
    3c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c70:	add	fp, sp, #28
    3c74:	sub	sp, sp, #580	; 0x244
    3c78:	mov	r5, r0
    3c7c:	ldr	r0, [r1]
    3c80:	cmp	r0, #86	; 0x56
    3c84:	bhi	4ff8 <eval_integer+0x138c>
    3c88:	mov	r6, r1
    3c8c:	add	r1, pc, #4
    3c90:	mov	sl, r2
    3c94:	ldr	pc, [r1, r0, lsl #2]
    3c98:	.word	0x00003df4
    3c9c:	.word	0x000043c0
    3ca0:	.word	0x00004304
    3ca4:	.word	0x0000421c
    3ca8:	.word	0x00004ff8
    3cac:	.word	0x0000440c
    3cb0:	.word	0x00004ff8
    3cb4:	.word	0x000046b4
    3cb8:	.word	0x00003fd8
    3cbc:	.word	0x00004848
    3cc0:	.word	0x00004ff8
    3cc4:	.word	0x000040d0
    3cc8:	.word	0x00004948
    3ccc:	.word	0x00004350
    3cd0:	.word	0x00004994
    3cd4:	.word	0x00003f84
    3cd8:	.word	0x00004ff8
    3cdc:	.word	0x00004ff8
    3ce0:	.word	0x00004ff8
    3ce4:	.word	0x00004ff8
    3ce8:	.word	0x000043b8
    3cec:	.word	0x00004ff8
    3cf0:	.word	0x00004ff8
    3cf4:	.word	0x00004a44
    3cf8:	.word	0x00004174
    3cfc:	.word	0x00004ff8
    3d00:	.word	0x00004ff8
    3d04:	.word	0x00004b00
    3d08:	.word	0x00004ff8
    3d0c:	.word	0x00004ff8
    3d10:	.word	0x00004ff8
    3d14:	.word	0x00004ff8
    3d18:	.word	0x00004ff8
    3d1c:	.word	0x00004ff8
    3d20:	.word	0x00004ff8
    3d24:	.word	0x00004ff8
    3d28:	.word	0x00004ff8
    3d2c:	.word	0x00004ff8
    3d30:	.word	0x00004ff8
    3d34:	.word	0x00004ff8
    3d38:	.word	0x00004ff8
    3d3c:	.word	0x00004ff8
    3d40:	.word	0x00004544
    3d44:	.word	0x00004668
    3d48:	.word	0x00004ae4
    3d4c:	.word	0x00004584
    3d50:	.word	0x00004ff8
    3d54:	.word	0x00004ff8
    3d58:	.word	0x00004ff8
    3d5c:	.word	0x00004ff8
    3d60:	.word	0x00004600
    3d64:	.word	0x00004ff8
    3d68:	.word	0x00004ff8
    3d6c:	.word	0x00004ff8
    3d70:	.word	0x00004ff8
    3d74:	.word	0x00004ff8
    3d78:	.word	0x000049e0
    3d7c:	.word	0x00004b28
    3d80:	.word	0x000041c4
    3d84:	.word	0x00004120
    3d88:	.word	0x00004c34
    3d8c:	.word	0x00004ff8
    3d90:	.word	0x00004ff8
    3d94:	.word	0x00003e7c
    3d98:	.word	0x00004b8c
    3d9c:	.word	0x00004be8
    3da0:	.word	0x00004ff8
    3da4:	.word	0x00004ff8
    3da8:	.word	0x00004ff8
    3dac:	.word	0x00004ff8
    3db0:	.word	0x000047ac
    3db4:	.word	0x00004ff8
    3db8:	.word	0x00004ff8
    3dbc:	.word	0x00004ff8
    3dc0:	.word	0x00004ff8
    3dc4:	.word	0x00004ff8
    3dc8:	.word	0x00004ff8
    3dcc:	.word	0x00004ff8
    3dd0:	.word	0x000044f8
    3dd4:	.word	0x00004ff8
    3dd8:	.word	0x00004ff8
    3ddc:	.word	0x000047d0
    3de0:	.word	0x00004ff8
    3de4:	.word	0x00003f58
    3de8:	.word	0x00004ff8
    3dec:	.word	0x00003ef0
    3df0:	.word	0x00003e28
    3df4:	ldr	r1, [r6, #16]
    3df8:	mov	r0, r5
    3dfc:	mov	r2, sl
    3e00:	bl	3c6c <eval_integer>
    3e04:	mvn	r9, #0
    3e08:	cmp	r0, #0
    3e0c:	bne	4fb8 <eval_integer+0x134c>
    3e10:	ldrd	r0, [sl]
    3e14:	adds	r0, r0, r1, asr #31
    3e18:	adc	r2, r1, r1, asr #31
    3e1c:	eor	r0, r0, r1, asr #31
    3e20:	eor	r1, r2, r1, asr #31
    3e24:	b	4dac <eval_integer+0x1140>
    3e28:	ldr	r0, [r6, #12]
    3e2c:	ldr	r1, [r6, #16]
    3e30:	ldrb	r0, [r0]
    3e34:	add	r7, r5, r0, lsl #3
    3e38:	mov	r0, r5
    3e3c:	ldr	r8, [r7, #-312]!	; 0xfffffec8
    3e40:	ldr	r4, [r7, #4]
    3e44:	mov	r2, r7
    3e48:	bl	3c6c <eval_integer>
    3e4c:	mvn	r9, #0
    3e50:	cmp	r0, #0
    3e54:	bne	4fb8 <eval_integer+0x134c>
    3e58:	ldr	r1, [r6, #20]
    3e5c:	mov	r0, r5
    3e60:	mov	r2, sl
    3e64:	bl	3c6c <eval_integer>
    3e68:	cmp	r0, #0
    3e6c:	bne	4fb8 <eval_integer+0x134c>
    3e70:	str	r8, [r7]
    3e74:	str	r4, [r7, #4]
    3e78:	b	4fb4 <eval_integer+0x1348>
    3e7c:	ldr	r0, [r5]
    3e80:	cmp	r0, #0
    3e84:	beq	5018 <eval_integer+0x13ac>
    3e88:	add	r7, r5, #8
    3e8c:	add	r0, sp, #56	; 0x38
    3e90:	mov	r2, #520	; 0x208
    3e94:	mov	r1, r7
    3e98:	bl	0 <memcpy>
    3e9c:	ldr	r1, [r6, #16]
    3ea0:	mov	r0, r5
    3ea4:	bl	7c6c <eval_cursor>
    3ea8:	cmp	r0, #0
    3eac:	bne	4e28 <eval_integer+0x11bc>
    3eb0:	add	r1, sp, #24
    3eb4:	mov	r0, r7
    3eb8:	bl	0 <coda_cursor_get_type>
    3ebc:	cmp	r0, #0
    3ec0:	bne	4e28 <eval_integer+0x11bc>
    3ec4:	ldr	r0, [sp, #24]
    3ec8:	add	r1, sp, #8
    3ecc:	bl	0 <coda_type_get_array_num_dims>
    3ed0:	cmp	r0, #0
    3ed4:	bne	4e28 <eval_integer+0x11bc>
    3ed8:	add	r1, sp, #56	; 0x38
    3edc:	mov	r0, r7
    3ee0:	mov	r2, #520	; 0x208
    3ee4:	bl	0 <memcpy>
    3ee8:	ldr	r0, [sp, #8]
    3eec:	b	4da8 <eval_integer+0x113c>
    3ef0:	mov	r0, #0
    3ef4:	str	r0, [sp, #60]	; 0x3c
    3ef8:	str	r0, [sp, #56]	; 0x38
    3efc:	ldr	r4, [r5]
    3f00:	cmp	r4, #0
    3f04:	beq	5038 <eval_integer+0x13cc>
    3f08:	ldr	r7, [r6, #16]
    3f0c:	ldr	r1, [r5, #560]	; 0x230
    3f10:	cmp	r7, #0
    3f14:	beq	4ca0 <eval_integer+0x1034>
    3f18:	cmp	r1, #0
    3f1c:	beq	3f34 <eval_integer+0x2c8>
    3f20:	ldr	r8, [r6, #12]
    3f24:	mov	r0, r8
    3f28:	bl	0 <strcmp>
    3f2c:	cmp	r0, #0
    3f30:	beq	4e14 <eval_integer+0x11a8>
    3f34:	add	r2, sp, #56	; 0x38
    3f38:	mov	r0, r5
    3f3c:	mov	r1, r7
    3f40:	bl	3c6c <eval_integer>
    3f44:	cmp	r0, #0
    3f48:	bne	4e28 <eval_integer+0x11bc>
    3f4c:	ldr	r4, [r5]
    3f50:	ldr	r7, [sp, #56]	; 0x38
    3f54:	b	4cd4 <eval_integer+0x1068>
    3f58:	ldr	r0, [r5]
    3f5c:	cmp	r0, #0
    3f60:	beq	5058 <eval_integer+0x13ec>
    3f64:	ldr	r1, [r5, #560]	; 0x230
    3f68:	cmp	r1, #0
    3f6c:	beq	4cfc <eval_integer+0x1090>
    3f70:	movw	r1, #0
    3f74:	movt	r1, #0
    3f78:	mvn	r0, #400	; 0x190
    3f7c:	bl	0 <coda_set_error>
    3f80:	b	4e28 <eval_integer+0x11bc>
    3f84:	ldr	r0, [r5]
    3f88:	cmp	r0, #0
    3f8c:	beq	5078 <eval_integer+0x140c>
    3f90:	add	r7, r5, #8
    3f94:	add	r0, sp, #56	; 0x38
    3f98:	mov	r2, #520	; 0x208
    3f9c:	mov	r1, r7
    3fa0:	bl	0 <memcpy>
    3fa4:	ldr	r1, [r6, #16]
    3fa8:	mov	r0, r5
    3fac:	bl	7c6c <eval_cursor>
    3fb0:	cmp	r0, #0
    3fb4:	bne	4e28 <eval_integer+0x11bc>
    3fb8:	bl	0 <coda_get_option_use_fast_size_expressions>
    3fbc:	mov	r5, r0
    3fc0:	mov	r0, #0
    3fc4:	bl	0 <coda_set_option_use_fast_size_expressions>
    3fc8:	mov	r0, r7
    3fcc:	mov	r1, sl
    3fd0:	bl	0 <coda_cursor_get_byte_size>
    3fd4:	b	43a0 <eval_integer+0x734>
    3fd8:	ldr	r0, [r5]
    3fdc:	cmp	r0, #0
    3fe0:	beq	5098 <eval_integer+0x142c>
    3fe4:	add	r9, r5, #8
    3fe8:	add	r0, sp, #56	; 0x38
    3fec:	mov	r2, #520	; 0x208
    3ff0:	mov	r1, r9
    3ff4:	bl	0 <memcpy>
    3ff8:	ldr	r1, [r6, #16]
    3ffc:	mov	r0, r5
    4000:	bl	7c6c <eval_cursor>
    4004:	cmp	r0, #0
    4008:	bne	4e28 <eval_integer+0x11bc>
    400c:	add	r1, sp, #8
    4010:	mov	r0, r9
    4014:	bl	0 <coda_cursor_get_num_elements>
    4018:	cmp	r0, #0
    401c:	bne	4e28 <eval_integer+0x11bc>
    4020:	mov	r0, #0
    4024:	str	r0, [sl]
    4028:	str	r0, [sl, #4]
    402c:	ldr	r0, [sp, #8]
    4030:	cmp	r0, #1
    4034:	blt	493c <eval_integer+0xcd0>
    4038:	mov	r0, r9
    403c:	bl	0 <coda_cursor_goto_first_array_element>
    4040:	cmp	r0, #0
    4044:	bne	4e28 <eval_integer+0x11bc>
    4048:	ldr	r0, [sp, #8]
    404c:	cmp	r0, #1
    4050:	blt	493c <eval_integer+0xcd0>
    4054:	mov	r7, #0
    4058:	add	r8, sp, #24
    405c:	ldr	r1, [r6, #20]
    4060:	mov	r0, r5
    4064:	mov	r2, r8
    4068:	bl	3c6c <eval_integer>
    406c:	cmp	r0, #0
    4070:	bne	4e28 <eval_integer+0x11bc>
    4074:	ldr	r0, [sp, #24]
    4078:	ldr	r1, [sp, #28]
    407c:	cmp	r7, #0
    4080:	beq	4098 <eval_integer+0x42c>
    4084:	ldrd	r2, [sl]
    4088:	subs	r2, r2, r0
    408c:	sbcs	r2, r3, r1
    4090:	strdlt	r0, [sl]
    4094:	b	409c <eval_integer+0x430>
    4098:	strd	r0, [sl]
    409c:	ldr	r0, [sp, #8]
    40a0:	sub	r1, r0, #1
    40a4:	cmp	r7, r1
    40a8:	bge	40c0 <eval_integer+0x454>
    40ac:	mov	r0, r9
    40b0:	bl	0 <coda_cursor_goto_next_array_element>
    40b4:	cmp	r0, #0
    40b8:	bne	4e28 <eval_integer+0x11bc>
    40bc:	ldr	r0, [sp, #8]
    40c0:	add	r7, r7, #1
    40c4:	cmp	r7, r0
    40c8:	blt	405c <eval_integer+0x3f0>
    40cc:	b	493c <eval_integer+0xcd0>
    40d0:	ldr	r0, [r5]
    40d4:	cmp	r0, #0
    40d8:	beq	50b8 <eval_integer+0x144c>
    40dc:	add	r7, r5, #8
    40e0:	add	r0, sp, #56	; 0x38
    40e4:	mov	r2, #520	; 0x208
    40e8:	mov	r1, r7
    40ec:	bl	0 <memcpy>
    40f0:	ldr	r1, [r6, #16]
    40f4:	mov	r0, r5
    40f8:	bl	7c6c <eval_cursor>
    40fc:	cmp	r0, #0
    4100:	bne	4e28 <eval_integer+0x11bc>
    4104:	ldr	r1, [r6, #20]
    4108:	mov	r0, r5
    410c:	mov	r2, sl
    4110:	bl	3c6c <eval_integer>
    4114:	cmp	r0, #0
    4118:	bne	4e28 <eval_integer+0x11bc>
    411c:	b	4fa4 <eval_integer+0x1338>
    4120:	ldr	r1, [r6, #16]
    4124:	add	r2, sp, #56	; 0x38
    4128:	mov	r0, r5
    412c:	bl	3c6c <eval_integer>
    4130:	cmp	r0, #0
    4134:	bne	4e28 <eval_integer+0x11bc>
    4138:	ldr	r1, [r6, #20]
    413c:	add	r2, sp, #24
    4140:	mov	r0, r5
    4144:	bl	3c6c <eval_integer>
    4148:	cmp	r0, #0
    414c:	bne	4e28 <eval_integer+0x11bc>
    4150:	ldr	r0, [sp, #56]	; 0x38
    4154:	ldr	r2, [sp, #24]
    4158:	ldr	r1, [sp, #60]	; 0x3c
    415c:	ldr	r3, [sp, #28]
    4160:	umull	r4, r7, r2, r0
    4164:	mla	r1, r2, r1, r7
    4168:	mla	r5, r3, r0, r1
    416c:	strd	r4, [sl]
    4170:	b	4fb4 <eval_integer+0x1348>
    4174:	ldr	r1, [r6, #16]
    4178:	add	r2, sp, #56	; 0x38
    417c:	mov	r0, r5
    4180:	bl	3c6c <eval_integer>
    4184:	cmp	r0, #0
    4188:	bne	4e28 <eval_integer+0x11bc>
    418c:	ldr	r1, [r6, #20]
    4190:	add	r2, sp, #24
    4194:	mov	r0, r5
    4198:	bl	3c6c <eval_integer>
    419c:	cmp	r0, #0
    41a0:	bne	4e28 <eval_integer+0x11bc>
    41a4:	ldr	r2, [sp, #24]
    41a8:	ldr	r3, [sp, #28]
    41ac:	orrs	r0, r2, r3
    41b0:	beq	4ec0 <eval_integer+0x1254>
    41b4:	ldr	r0, [sp, #56]	; 0x38
    41b8:	ldr	r1, [sp, #60]	; 0x3c
    41bc:	bl	0 <__aeabi_ldivmod>
    41c0:	b	4dac <eval_integer+0x1140>
    41c4:	ldr	r1, [r6, #16]
    41c8:	add	r2, sp, #56	; 0x38
    41cc:	mov	r0, r5
    41d0:	bl	3c6c <eval_integer>
    41d4:	cmp	r0, #0
    41d8:	bne	4e28 <eval_integer+0x11bc>
    41dc:	ldr	r1, [r6, #20]
    41e0:	add	r2, sp, #24
    41e4:	mov	r0, r5
    41e8:	bl	3c6c <eval_integer>
    41ec:	cmp	r0, #0
    41f0:	bne	4e28 <eval_integer+0x11bc>
    41f4:	ldr	r2, [sp, #24]
    41f8:	ldr	r3, [sp, #28]
    41fc:	orrs	r0, r2, r3
    4200:	beq	4ecc <eval_integer+0x1260>
    4204:	ldr	r0, [sp, #56]	; 0x38
    4208:	ldr	r1, [sp, #60]	; 0x3c
    420c:	bl	0 <__aeabi_ldivmod>
    4210:	mov	r0, r2
    4214:	mov	r1, r3
    4218:	b	4dac <eval_integer+0x1140>
    421c:	ldr	r0, [r5]
    4220:	cmp	r0, #0
    4224:	beq	50d8 <eval_integer+0x146c>
    4228:	add	r9, r5, #8
    422c:	add	r0, sp, #56	; 0x38
    4230:	mov	r2, #520	; 0x208
    4234:	mov	r1, r9
    4238:	bl	0 <memcpy>
    423c:	ldr	r1, [r6, #16]
    4240:	mov	r0, r5
    4244:	bl	7c6c <eval_cursor>
    4248:	cmp	r0, #0
    424c:	bne	4e28 <eval_integer+0x11bc>
    4250:	add	r1, sp, #8
    4254:	mov	r0, r9
    4258:	bl	0 <coda_cursor_get_num_elements>
    425c:	cmp	r0, #0
    4260:	bne	4e28 <eval_integer+0x11bc>
    4264:	mov	r0, #0
    4268:	str	r0, [sl]
    426c:	str	r0, [sl, #4]
    4270:	ldr	r0, [sp, #8]
    4274:	cmp	r0, #1
    4278:	blt	493c <eval_integer+0xcd0>
    427c:	mov	r0, r9
    4280:	bl	0 <coda_cursor_goto_first_array_element>
    4284:	cmp	r0, #0
    4288:	bne	4e28 <eval_integer+0x11bc>
    428c:	ldr	r0, [sp, #8]
    4290:	cmp	r0, #1
    4294:	blt	493c <eval_integer+0xcd0>
    4298:	mov	r7, #0
    429c:	add	r8, sp, #24
    42a0:	ldr	r1, [r6, #20]
    42a4:	mov	r0, r5
    42a8:	mov	r2, r8
    42ac:	bl	3c6c <eval_integer>
    42b0:	cmp	r0, #0
    42b4:	bne	4e28 <eval_integer+0x11bc>
    42b8:	ldrd	r0, [sl]
    42bc:	ldr	r2, [sp, #24]
    42c0:	ldr	r3, [sp, #28]
    42c4:	adds	r0, r0, r2
    42c8:	adc	r1, r1, r3
    42cc:	strd	r0, [sl]
    42d0:	ldr	r0, [sp, #8]
    42d4:	sub	r1, r0, #1
    42d8:	cmp	r7, r1
    42dc:	bge	42f4 <eval_integer+0x688>
    42e0:	mov	r0, r9
    42e4:	bl	0 <coda_cursor_goto_next_array_element>
    42e8:	cmp	r0, #0
    42ec:	bne	4e28 <eval_integer+0x11bc>
    42f0:	ldr	r0, [sp, #8]
    42f4:	add	r7, r7, #1
    42f8:	cmp	r7, r0
    42fc:	blt	42a0 <eval_integer+0x634>
    4300:	b	493c <eval_integer+0xcd0>
    4304:	ldr	r1, [r6, #16]
    4308:	add	r2, sp, #56	; 0x38
    430c:	mov	r0, r5
    4310:	bl	3c6c <eval_integer>
    4314:	cmp	r0, #0
    4318:	bne	4e28 <eval_integer+0x11bc>
    431c:	ldr	r1, [r6, #20]
    4320:	add	r2, sp, #24
    4324:	mov	r0, r5
    4328:	bl	3c6c <eval_integer>
    432c:	cmp	r0, #0
    4330:	bne	4e28 <eval_integer+0x11bc>
    4334:	ldr	r0, [sp, #56]	; 0x38
    4338:	ldr	r2, [sp, #24]
    433c:	ldr	r1, [sp, #60]	; 0x3c
    4340:	ldr	r3, [sp, #28]
    4344:	and	r1, r3, r1
    4348:	and	r0, r2, r0
    434c:	b	4dac <eval_integer+0x1140>
    4350:	ldr	r0, [r5]
    4354:	cmp	r0, #0
    4358:	beq	50f8 <eval_integer+0x148c>
    435c:	add	r7, r5, #8
    4360:	add	r0, sp, #56	; 0x38
    4364:	mov	r2, #520	; 0x208
    4368:	mov	r1, r7
    436c:	bl	0 <memcpy>
    4370:	ldr	r1, [r6, #16]
    4374:	mov	r0, r5
    4378:	bl	7c6c <eval_cursor>
    437c:	cmp	r0, #0
    4380:	bne	4e28 <eval_integer+0x11bc>
    4384:	bl	0 <coda_get_option_use_fast_size_expressions>
    4388:	mov	r5, r0
    438c:	mov	r0, #0
    4390:	bl	0 <coda_set_option_use_fast_size_expressions>
    4394:	mov	r0, r7
    4398:	mov	r1, sl
    439c:	bl	0 <coda_cursor_get_bit_size>
    43a0:	mov	r4, r0
    43a4:	mov	r0, r5
    43a8:	bl	0 <coda_set_option_use_fast_size_expressions>
    43ac:	cmp	r4, #0
    43b0:	bne	4e28 <eval_integer+0x11bc>
    43b4:	b	4fa4 <eval_integer+0x1338>
    43b8:	ldrd	r0, [r6, #16]
    43bc:	b	4dac <eval_integer+0x1140>
    43c0:	ldr	r1, [r6, #16]
    43c4:	add	r2, sp, #56	; 0x38
    43c8:	mov	r0, r5
    43cc:	bl	3c6c <eval_integer>
    43d0:	cmp	r0, #0
    43d4:	bne	4e28 <eval_integer+0x11bc>
    43d8:	ldr	r1, [r6, #20]
    43dc:	add	r2, sp, #24
    43e0:	mov	r0, r5
    43e4:	bl	3c6c <eval_integer>
    43e8:	cmp	r0, #0
    43ec:	bne	4e28 <eval_integer+0x11bc>
    43f0:	ldr	r0, [sp, #56]	; 0x38
    43f4:	ldr	r2, [sp, #24]
    43f8:	ldr	r1, [sp, #60]	; 0x3c
    43fc:	ldr	r3, [sp, #28]
    4400:	adds	r0, r2, r0
    4404:	adc	r1, r3, r1
    4408:	b	4dac <eval_integer+0x1140>
    440c:	ldr	r0, [r5]
    4410:	cmp	r0, #0
    4414:	beq	5118 <eval_integer+0x14ac>
    4418:	add	r9, r5, #8
    441c:	add	r0, sp, #56	; 0x38
    4420:	mov	r2, #520	; 0x208
    4424:	mov	r1, r9
    4428:	bl	0 <memcpy>
    442c:	ldr	r1, [r6, #16]
    4430:	mov	r0, r5
    4434:	bl	7c6c <eval_cursor>
    4438:	cmp	r0, #0
    443c:	bne	4e28 <eval_integer+0x11bc>
    4440:	add	r1, sp, #24
    4444:	mov	r0, r9
    4448:	bl	0 <coda_cursor_get_num_elements>
    444c:	cmp	r0, #0
    4450:	bne	4e28 <eval_integer+0x11bc>
    4454:	mov	r0, #0
    4458:	str	r0, [sl]
    445c:	str	r0, [sl, #4]
    4460:	ldr	r0, [sp, #24]
    4464:	cmp	r0, #1
    4468:	blt	493c <eval_integer+0xcd0>
    446c:	mov	r0, r9
    4470:	bl	0 <coda_cursor_goto_first_array_element>
    4474:	cmp	r0, #0
    4478:	bne	4e28 <eval_integer+0x11bc>
    447c:	ldr	r0, [sp, #24]
    4480:	cmp	r0, #1
    4484:	blt	493c <eval_integer+0xcd0>
    4488:	mov	r7, #0
    448c:	add	r8, sp, #8
    4490:	ldr	r1, [r6, #20]
    4494:	mov	r0, r5
    4498:	mov	r2, r8
    449c:	bl	2728 <eval_boolean>
    44a0:	cmp	r0, #0
    44a4:	bne	4e28 <eval_integer+0x11bc>
    44a8:	ldr	r0, [sp, #8]
    44ac:	cmp	r0, #0
    44b0:	beq	44c4 <eval_integer+0x858>
    44b4:	ldrd	r0, [sl]
    44b8:	adds	r0, r0, #1
    44bc:	adc	r1, r1, #0
    44c0:	strd	r0, [sl]
    44c4:	ldr	r0, [sp, #24]
    44c8:	sub	r1, r0, #1
    44cc:	cmp	r7, r1
    44d0:	bge	44e8 <eval_integer+0x87c>
    44d4:	mov	r0, r9
    44d8:	bl	0 <coda_cursor_goto_next_array_element>
    44dc:	cmp	r0, #0
    44e0:	bne	4e28 <eval_integer+0x11bc>
    44e4:	ldr	r0, [sp, #24]
    44e8:	add	r7, r7, #1
    44ec:	cmp	r7, r0
    44f0:	blt	4490 <eval_integer+0x824>
    44f4:	b	493c <eval_integer+0xcd0>
    44f8:	ldr	r1, [r6, #16]
    44fc:	add	r2, sp, #56	; 0x38
    4500:	mov	r0, r5
    4504:	bl	3c6c <eval_integer>
    4508:	cmp	r0, #0
    450c:	bne	4e28 <eval_integer+0x11bc>
    4510:	ldr	r1, [r6, #20]
    4514:	add	r2, sp, #24
    4518:	mov	r0, r5
    451c:	bl	3c6c <eval_integer>
    4520:	cmp	r0, #0
    4524:	bne	4e28 <eval_integer+0x11bc>
    4528:	ldr	r0, [sp, #24]
    452c:	ldr	r2, [sp, #56]	; 0x38
    4530:	ldr	r1, [sp, #28]
    4534:	ldr	r3, [sp, #60]	; 0x3c
    4538:	subs	r0, r2, r0
    453c:	sbc	r1, r3, r1
    4540:	b	4dac <eval_integer+0x1140>
    4544:	ldr	r1, [r6, #16]
    4548:	add	r2, sp, #56	; 0x38
    454c:	mov	r0, r5
    4550:	bl	2728 <eval_boolean>
    4554:	cmp	r0, #0
    4558:	bne	4e28 <eval_integer+0x11bc>
    455c:	ldr	r0, [sp, #56]	; 0x38
    4560:	mov	r2, sl
    4564:	cmp	r0, #0
    4568:	mov	r0, r5
    456c:	ldreq	r1, [r6, #24]
    4570:	ldrne	r1, [r6, #20]
    4574:	bl	3c6c <eval_integer>
    4578:	cmp	r0, #0
    457c:	bne	4e28 <eval_integer+0x11bc>
    4580:	b	4fb4 <eval_integer+0x1348>
    4584:	ldr	r7, [r6, #16]
    4588:	ldr	r0, [r7, #4]
    458c:	cmp	r0, #0
    4590:	beq	4d8c <eval_integer+0x1120>
    4594:	cmp	r0, #4
    4598:	bne	4db4 <eval_integer+0x1148>
    459c:	ldr	r0, [r5]
    45a0:	cmp	r0, #0
    45a4:	beq	5298 <eval_integer+0x162c>
    45a8:	add	r6, r5, #8
    45ac:	add	r0, sp, #56	; 0x38
    45b0:	mov	r2, #520	; 0x208
    45b4:	mov	r1, r6
    45b8:	bl	0 <memcpy>
    45bc:	mov	r0, r5
    45c0:	mov	r1, r7
    45c4:	bl	7c6c <eval_cursor>
    45c8:	cmp	r0, #0
    45cc:	bne	4e28 <eval_integer+0x11bc>
    45d0:	bl	0 <coda_get_option_perform_conversions>
    45d4:	mov	r5, r0
    45d8:	mov	r0, #0
    45dc:	bl	0 <coda_set_option_perform_conversions>
    45e0:	add	r1, sp, #8
    45e4:	mov	r0, r6
    45e8:	bl	0 <coda_cursor_get_read_type>
    45ec:	cmp	r0, #0
    45f0:	beq	4ed8 <eval_integer+0x126c>
    45f4:	mov	r0, r5
    45f8:	bl	0 <coda_set_option_perform_conversions>
    45fc:	b	4e28 <eval_integer+0x11bc>
    4600:	ldr	r7, [r6, #16]
    4604:	ldr	r0, [r7, #4]
    4608:	cmp	r0, #4
    460c:	bne	4c60 <eval_integer+0xff4>
    4610:	ldr	r0, [r5]
    4614:	cmp	r0, #0
    4618:	beq	5278 <eval_integer+0x160c>
    461c:	add	r6, r5, #8
    4620:	add	r0, sp, #56	; 0x38
    4624:	mov	r2, #520	; 0x208
    4628:	mov	r1, r6
    462c:	bl	0 <memcpy>
    4630:	mov	r0, r5
    4634:	mov	r1, r7
    4638:	bl	7c6c <eval_cursor>
    463c:	cmp	r0, #0
    4640:	bne	4e28 <eval_integer+0x11bc>
    4644:	add	r1, sp, #24
    4648:	mov	r0, r6
    464c:	bl	0 <coda_cursor_get_string_length>
    4650:	cmp	r0, #0
    4654:	bne	4e28 <eval_integer+0x11bc>
    4658:	ldr	r0, [sp, #24]
    465c:	asr	r1, r0, #31
    4660:	strd	r0, [sl]
    4664:	b	4f5c <eval_integer+0x12f0>
    4668:	ldr	r0, [r5]
    466c:	cmp	r0, #0
    4670:	beq	5138 <eval_integer+0x14cc>
    4674:	add	r7, r5, #8
    4678:	add	r0, sp, #56	; 0x38
    467c:	mov	r2, #520	; 0x208
    4680:	mov	r1, r7
    4684:	bl	0 <memcpy>
    4688:	ldr	r1, [r6, #16]
    468c:	mov	r0, r5
    4690:	bl	7c6c <eval_cursor>
    4694:	cmp	r0, #0
    4698:	bne	4e28 <eval_integer+0x11bc>
    469c:	add	r1, sp, #24
    46a0:	mov	r0, r7
    46a4:	bl	0 <coda_cursor_get_index>
    46a8:	cmp	r0, #0
    46ac:	bne	4e28 <eval_integer+0x11bc>
    46b0:	b	4bd4 <eval_integer+0xf68>
    46b4:	ldr	r0, [r5]
    46b8:	cmp	r0, #0
    46bc:	beq	5158 <eval_integer+0x14ec>
    46c0:	add	r4, r5, #8
    46c4:	add	r0, sp, #56	; 0x38
    46c8:	mov	r2, #520	; 0x208
    46cc:	mov	r1, r4
    46d0:	bl	0 <memcpy>
    46d4:	ldr	r1, [r6, #16]
    46d8:	mov	r0, r5
    46dc:	bl	7c6c <eval_cursor>
    46e0:	mvn	r9, #0
    46e4:	cmp	r0, #0
    46e8:	bne	4fb8 <eval_integer+0x134c>
    46ec:	add	r1, sp, #24
    46f0:	mov	r0, r4
    46f4:	bl	0 <coda_cursor_get_num_elements>
    46f8:	cmp	r0, #0
    46fc:	bne	4fb8 <eval_integer+0x134c>
    4700:	mov	r0, #0
    4704:	str	r0, [sl]
    4708:	str	r0, [sl, #4]
    470c:	ldr	r0, [sp, #24]
    4710:	cmp	r0, #1
    4714:	blt	4794 <eval_integer+0xb28>
    4718:	mov	r0, r4
    471c:	bl	0 <coda_cursor_goto_first_array_element>
    4720:	cmp	r0, #0
    4724:	bne	4fb8 <eval_integer+0x134c>
    4728:	ldr	r0, [sp, #24]
    472c:	cmp	r0, #1
    4730:	blt	4794 <eval_integer+0xb28>
    4734:	mov	r7, #0
    4738:	add	r8, sp, #8
    473c:	mvn	r9, #0
    4740:	ldr	r1, [r6, #20]
    4744:	mov	r0, r5
    4748:	mov	r2, r8
    474c:	bl	2728 <eval_boolean>
    4750:	cmp	r0, #0
    4754:	bne	4fb8 <eval_integer+0x134c>
    4758:	ldr	r0, [sp, #8]
    475c:	cmp	r0, #0
    4760:	bne	4fdc <eval_integer+0x1370>
    4764:	ldr	r0, [sp, #24]
    4768:	sub	r1, r0, #1
    476c:	cmp	r7, r1
    4770:	bge	4788 <eval_integer+0xb1c>
    4774:	mov	r0, r4
    4778:	bl	0 <coda_cursor_goto_next_array_element>
    477c:	cmp	r0, #0
    4780:	bne	4fb8 <eval_integer+0x134c>
    4784:	ldr	r0, [sp, #24]
    4788:	add	r7, r7, #1
    478c:	cmp	r7, r0
    4790:	blt	4740 <eval_integer+0xad4>
    4794:	mvn	r0, #0
    4798:	add	r1, sp, #56	; 0x38
    479c:	str	r0, [sl]
    47a0:	str	r0, [sl, #4]
    47a4:	mov	r0, r4
    47a8:	b	4fac <eval_integer+0x1340>
    47ac:	ldr	r0, [r5]
    47b0:	cmp	r0, #0
    47b4:	beq	5178 <eval_integer+0x150c>
    47b8:	ldr	r0, [r0]
    47bc:	add	r1, sp, #56	; 0x38
    47c0:	bl	0 <coda_get_product_version>
    47c4:	cmp	r0, #0
    47c8:	bne	4e28 <eval_integer+0x11bc>
    47cc:	b	4da4 <eval_integer+0x1138>
    47d0:	mov	r0, #0
    47d4:	str	r0, [sp, #24]
    47d8:	ldr	r0, [r5]
    47dc:	cmp	r0, #0
    47e0:	beq	5198 <eval_integer+0x152c>
    47e4:	add	r7, r5, #8
    47e8:	add	r0, sp, #56	; 0x38
    47ec:	mov	r2, #520	; 0x208
    47f0:	mov	r1, r7
    47f4:	bl	0 <memcpy>
    47f8:	ldr	r1, [r6, #16]
    47fc:	mov	r0, r5
    4800:	bl	7c6c <eval_cursor>
    4804:	cmp	r0, #0
    4808:	bne	4e28 <eval_integer+0x11bc>
    480c:	ldr	r0, [pc, #2724]	; 52b8 <eval_integer+0x164c>
    4810:	ldr	r1, [pc, r0]
    4814:	bl	0 <__aeabi_read_tp>
    4818:	ldr	r9, [r0, r1]
    481c:	mov	r4, #0
    4820:	str	r4, [r0, r1]
    4824:	mov	r0, r7
    4828:	bl	0 <coda_cursor_goto_first_array_element>
    482c:	cmp	r0, #0
    4830:	beq	4e30 <eval_integer+0x11c4>
    4834:	ldr	r0, [pc, #2688]	; 52bc <eval_integer+0x1650>
    4838:	ldr	r1, [pc, r0]
    483c:	bl	0 <__aeabi_read_tp>
    4840:	str	r9, [r0, r1]
    4844:	b	4e28 <eval_integer+0x11bc>
    4848:	ldr	r0, [r5]
    484c:	cmp	r0, #0
    4850:	beq	51b8 <eval_integer+0x154c>
    4854:	add	r9, r5, #8
    4858:	add	r0, sp, #56	; 0x38
    485c:	mov	r2, #520	; 0x208
    4860:	mov	r1, r9
    4864:	bl	0 <memcpy>
    4868:	ldr	r1, [r6, #16]
    486c:	mov	r0, r5
    4870:	bl	7c6c <eval_cursor>
    4874:	cmp	r0, #0
    4878:	bne	4e28 <eval_integer+0x11bc>
    487c:	add	r1, sp, #8
    4880:	mov	r0, r9
    4884:	bl	0 <coda_cursor_get_num_elements>
    4888:	cmp	r0, #0
    488c:	bne	4e28 <eval_integer+0x11bc>
    4890:	mov	r0, #0
    4894:	str	r0, [sl]
    4898:	str	r0, [sl, #4]
    489c:	ldr	r0, [sp, #8]
    48a0:	cmp	r0, #1
    48a4:	blt	493c <eval_integer+0xcd0>
    48a8:	mov	r0, r9
    48ac:	bl	0 <coda_cursor_goto_first_array_element>
    48b0:	cmp	r0, #0
    48b4:	bne	4e28 <eval_integer+0x11bc>
    48b8:	ldr	r0, [sp, #8]
    48bc:	cmp	r0, #1
    48c0:	blt	493c <eval_integer+0xcd0>
    48c4:	mov	r7, #0
    48c8:	add	r8, sp, #24
    48cc:	ldr	r1, [r6, #20]
    48d0:	mov	r0, r5
    48d4:	mov	r2, r8
    48d8:	bl	3c6c <eval_integer>
    48dc:	cmp	r0, #0
    48e0:	bne	4e28 <eval_integer+0x11bc>
    48e4:	ldr	r0, [sp, #24]
    48e8:	ldr	r1, [sp, #28]
    48ec:	cmp	r7, #0
    48f0:	beq	4908 <eval_integer+0xc9c>
    48f4:	ldrd	r2, [sl]
    48f8:	subs	r2, r0, r2
    48fc:	sbcs	r2, r1, r3
    4900:	strdlt	r0, [sl]
    4904:	b	490c <eval_integer+0xca0>
    4908:	strd	r0, [sl]
    490c:	ldr	r0, [sp, #8]
    4910:	sub	r1, r0, #1
    4914:	cmp	r7, r1
    4918:	bge	4930 <eval_integer+0xcc4>
    491c:	mov	r0, r9
    4920:	bl	0 <coda_cursor_goto_next_array_element>
    4924:	cmp	r0, #0
    4928:	bne	4e28 <eval_integer+0x11bc>
    492c:	ldr	r0, [sp, #8]
    4930:	add	r7, r7, #1
    4934:	cmp	r7, r0
    4938:	blt	48cc <eval_integer+0xc60>
    493c:	add	r1, sp, #56	; 0x38
    4940:	mov	r0, r9
    4944:	b	4fac <eval_integer+0x1340>
    4948:	ldr	r0, [r5]
    494c:	cmp	r0, #0
    4950:	beq	51d8 <eval_integer+0x156c>
    4954:	add	r7, r5, #8
    4958:	add	r0, sp, #56	; 0x38
    495c:	mov	r2, #520	; 0x208
    4960:	mov	r1, r7
    4964:	bl	0 <memcpy>
    4968:	ldr	r1, [r6, #16]
    496c:	mov	r0, r5
    4970:	bl	7c6c <eval_cursor>
    4974:	cmp	r0, #0
    4978:	bne	4e28 <eval_integer+0x11bc>
    497c:	mov	r0, r7
    4980:	mov	r1, sl
    4984:	bl	0 <coda_cursor_get_file_bit_offset>
    4988:	cmp	r0, #0
    498c:	bne	4e28 <eval_integer+0x11bc>
    4990:	b	4fa4 <eval_integer+0x1338>
    4994:	ldr	r0, [r5]
    4998:	cmp	r0, #0
    499c:	beq	51f8 <eval_integer+0x158c>
    49a0:	add	r7, r5, #8
    49a4:	add	r0, sp, #56	; 0x38
    49a8:	mov	r2, #520	; 0x208
    49ac:	mov	r1, r7
    49b0:	bl	0 <memcpy>
    49b4:	ldr	r1, [r6, #16]
    49b8:	mov	r0, r5
    49bc:	bl	7c6c <eval_cursor>
    49c0:	cmp	r0, #0
    49c4:	bne	4e28 <eval_integer+0x11bc>
    49c8:	mov	r0, r7
    49cc:	mov	r1, sl
    49d0:	bl	0 <coda_cursor_get_file_byte_offset>
    49d4:	cmp	r0, #0
    49d8:	bne	4e28 <eval_integer+0x11bc>
    49dc:	b	4fa4 <eval_integer+0x1338>
    49e0:	ldr	r1, [r6, #16]
    49e4:	add	r2, sp, #56	; 0x38
    49e8:	mov	r0, r5
    49ec:	bl	3c6c <eval_integer>
    49f0:	cmp	r0, #0
    49f4:	bne	4e28 <eval_integer+0x11bc>
    49f8:	ldr	r1, [r6, #20]
    49fc:	add	r2, sp, #24
    4a00:	mov	r0, r5
    4a04:	bl	3c6c <eval_integer>
    4a08:	cmp	r0, #0
    4a0c:	bne	4e28 <eval_integer+0x11bc>
    4a10:	ldr	r1, [sp, #56]	; 0x38
    4a14:	ldr	r4, [sp, #24]
    4a18:	ldr	r2, [sp, #60]	; 0x3c
    4a1c:	ldr	r5, [sp, #28]
    4a20:	mov	r0, #0
    4a24:	subs	r3, r4, r1
    4a28:	sbcs	r3, r5, r2
    4a2c:	movwlt	r0, #1
    4a30:	cmp	r0, #0
    4a34:	movne	r5, r2
    4a38:	movne	r4, r1
    4a3c:	strd	r4, [sl]
    4a40:	b	4fb4 <eval_integer+0x1348>
    4a44:	ldr	r0, [r5]
    4a48:	cmp	r0, #0
    4a4c:	beq	5218 <eval_integer+0x15ac>
    4a50:	add	r7, r5, #8
    4a54:	add	r0, sp, #56	; 0x38
    4a58:	mov	r2, #520	; 0x208
    4a5c:	mov	r1, r7
    4a60:	bl	0 <memcpy>
    4a64:	ldr	r1, [r6, #16]
    4a68:	mov	r0, r5
    4a6c:	bl	7c6c <eval_cursor>
    4a70:	cmp	r0, #0
    4a74:	bne	4e28 <eval_integer+0x11bc>
    4a78:	ldr	r1, [r6, #20]
    4a7c:	add	r2, sp, #8
    4a80:	mov	r0, r5
    4a84:	bl	3c6c <eval_integer>
    4a88:	cmp	r0, #0
    4a8c:	bne	4e28 <eval_integer+0x11bc>
    4a90:	add	r6, sp, #24
    4a94:	add	r1, sp, #20
    4a98:	mov	r0, r7
    4a9c:	mov	r2, r6
    4aa0:	bl	0 <coda_cursor_get_array_dim>
    4aa4:	cmp	r0, #0
    4aa8:	bne	4e28 <eval_integer+0x11bc>
    4aac:	ldr	r0, [sp, #12]
    4ab0:	ldr	r5, [sp, #8]
    4ab4:	cmn	r0, #1
    4ab8:	ble	4f68 <eval_integer+0x12fc>
    4abc:	ldr	r3, [sp, #20]
    4ac0:	subs	r1, r5, r3
    4ac4:	sbcs	r0, r0, r3, asr #31
    4ac8:	bge	4fc4 <eval_integer+0x1358>
    4acc:	add	r1, sp, #56	; 0x38
    4ad0:	mov	r0, r7
    4ad4:	mov	r2, #520	; 0x208
    4ad8:	bl	0 <memcpy>
    4adc:	ldr	r0, [r6, r5, lsl #2]
    4ae0:	b	4da8 <eval_integer+0x113c>
    4ae4:	ldr	r0, [r6, #12]
    4ae8:	ldrb	r0, [r0]
    4aec:	add	r0, r5, r0, lsl #3
    4af0:	ldr	r2, [r0, #-312]	; 0xfffffec8
    4af4:	ldr	r3, [r0, #-308]	; 0xfffffecc
    4af8:	strd	r2, [sl]
    4afc:	b	4fb4 <eval_integer+0x1348>
    4b00:	ldr	r0, [r5]
    4b04:	cmp	r0, #0
    4b08:	beq	5238 <eval_integer+0x15cc>
    4b0c:	ldr	r0, [r0]
    4b10:	mov	r1, sl
    4b14:	bl	0 <coda_get_product_file_size>
    4b18:	mvn	r9, #0
    4b1c:	cmp	r0, #0
    4b20:	moveq	r9, #0
    4b24:	b	4fb8 <eval_integer+0x134c>
    4b28:	ldr	r1, [r6, #16]
    4b2c:	add	r2, sp, #56	; 0x38
    4b30:	mov	r0, r5
    4b34:	bl	3c6c <eval_integer>
    4b38:	cmp	r0, #0
    4b3c:	bne	4e28 <eval_integer+0x11bc>
    4b40:	ldr	r1, [r6, #20]
    4b44:	add	r2, sp, #24
    4b48:	mov	r0, r5
    4b4c:	bl	3c6c <eval_integer>
    4b50:	cmp	r0, #0
    4b54:	bne	4e28 <eval_integer+0x11bc>
    4b58:	ldr	r2, [sp, #24]
    4b5c:	ldr	r1, [sp, #56]	; 0x38
    4b60:	ldr	r3, [sp, #28]
    4b64:	ldr	r7, [sp, #60]	; 0x3c
    4b68:	mov	r0, #0
    4b6c:	subs	r6, r1, r2
    4b70:	sbcs	r6, r7, r3
    4b74:	movwlt	r0, #1
    4b78:	cmp	r0, #0
    4b7c:	movne	r3, r7
    4b80:	movne	r2, r1
    4b84:	strd	r2, [sl]
    4b88:	b	4fb4 <eval_integer+0x1348>
    4b8c:	ldr	r0, [r5]
    4b90:	cmp	r0, #0
    4b94:	beq	5258 <eval_integer+0x15ec>
    4b98:	add	r7, r5, #8
    4b9c:	add	r0, sp, #56	; 0x38
    4ba0:	mov	r2, #520	; 0x208
    4ba4:	mov	r1, r7
    4ba8:	bl	0 <memcpy>
    4bac:	ldr	r1, [r6, #16]
    4bb0:	mov	r0, r5
    4bb4:	bl	7c6c <eval_cursor>
    4bb8:	cmp	r0, #0
    4bbc:	bne	4e28 <eval_integer+0x11bc>
    4bc0:	add	r1, sp, #24
    4bc4:	mov	r0, r7
    4bc8:	bl	0 <coda_cursor_get_num_elements>
    4bcc:	cmp	r0, #0
    4bd0:	bne	4e28 <eval_integer+0x11bc>
    4bd4:	add	r1, sp, #56	; 0x38
    4bd8:	mov	r0, r7
    4bdc:	mov	r2, #520	; 0x208
    4be0:	bl	0 <memcpy>
    4be4:	b	4c98 <eval_integer+0x102c>
    4be8:	ldr	r1, [r6, #16]
    4bec:	add	r2, sp, #56	; 0x38
    4bf0:	mov	r0, r5
    4bf4:	bl	3c6c <eval_integer>
    4bf8:	cmp	r0, #0
    4bfc:	bne	4e28 <eval_integer+0x11bc>
    4c00:	ldr	r1, [r6, #20]
    4c04:	add	r2, sp, #24
    4c08:	mov	r0, r5
    4c0c:	bl	3c6c <eval_integer>
    4c10:	cmp	r0, #0
    4c14:	bne	4e28 <eval_integer+0x11bc>
    4c18:	ldr	r0, [sp, #56]	; 0x38
    4c1c:	ldr	r2, [sp, #24]
    4c20:	ldr	r1, [sp, #60]	; 0x3c
    4c24:	ldr	r3, [sp, #28]
    4c28:	orr	r1, r3, r1
    4c2c:	orr	r0, r2, r0
    4c30:	b	4dac <eval_integer+0x1140>
    4c34:	ldr	r1, [r6, #16]
    4c38:	mov	r0, r5
    4c3c:	mov	r2, sl
    4c40:	bl	3c6c <eval_integer>
    4c44:	mvn	r9, #0
    4c48:	cmp	r0, #0
    4c4c:	bne	4fb8 <eval_integer+0x134c>
    4c50:	ldrd	r0, [sl]
    4c54:	rsbs	r0, r0, #0
    4c58:	rsc	r1, r1, #0
    4c5c:	b	4dac <eval_integer+0x1140>
    4c60:	add	r0, sp, #8
    4c64:	add	r2, sp, #56	; 0x38
    4c68:	add	r3, sp, #24
    4c6c:	mov	r1, r7
    4c70:	str	r0, [sp]
    4c74:	mov	r0, r5
    4c78:	bl	61e8 <eval_string>
    4c7c:	cmp	r0, #0
    4c80:	bne	4e28 <eval_integer+0x11bc>
    4c84:	ldr	r0, [sp, #24]
    4c88:	cmp	r0, #1
    4c8c:	blt	4da8 <eval_integer+0x113c>
    4c90:	ldr	r0, [sp, #8]
    4c94:	bl	0 <free>
    4c98:	ldr	r0, [sp, #24]
    4c9c:	b	4da8 <eval_integer+0x113c>
    4ca0:	mov	r7, #0
    4ca4:	cmp	r1, #0
    4ca8:	beq	4cd4 <eval_integer+0x1068>
    4cac:	ldr	r2, [r6, #12]
    4cb0:	mov	r0, r1
    4cb4:	mov	r1, r2
    4cb8:	bl	0 <strcmp>
    4cbc:	cmp	r0, #0
    4cc0:	bne	4cd4 <eval_integer+0x1068>
    4cc4:	ldr	r7, [r5, #552]	; 0x228
    4cc8:	ldr	r0, [r5, #556]	; 0x22c
    4ccc:	str	r0, [sp, #60]	; 0x3c
    4cd0:	str	r7, [sp, #56]	; 0x38
    4cd4:	ldr	r1, [r6, #12]
    4cd8:	ldr	r0, [r4]
    4cdc:	add	r3, sp, #24
    4ce0:	mov	r2, r7
    4ce4:	bl	0 <coda_product_variable_get_pointer>
    4ce8:	cmp	r0, #0
    4cec:	bne	4e28 <eval_integer+0x11bc>
    4cf0:	ldr	r0, [sp, #24]
    4cf4:	ldrd	r0, [r0]
    4cf8:	b	4dac <eval_integer+0x1140>
    4cfc:	ldr	r1, [r6, #12]
    4d00:	ldr	r0, [r0]
    4d04:	add	r2, sp, #56	; 0x38
    4d08:	bl	0 <coda_product_variable_get_size>
    4d0c:	mvn	r9, #0
    4d10:	cmp	r0, #0
    4d14:	bne	4fb8 <eval_integer+0x134c>
    4d18:	ldr	r0, [r6, #12]
    4d1c:	str	r0, [r5, #560]	; 0x230
    4d20:	ldr	r0, [sp, #56]	; 0x38
    4d24:	cmp	r0, #1
    4d28:	blt	4d74 <eval_integer+0x1108>
    4d2c:	add	r4, r5, #552	; 0x228
    4d30:	mov	r9, #0
    4d34:	add	r7, sp, #24
    4d38:	mov	r8, #0
    4d3c:	strd	r8, [r4]
    4d40:	mov	r0, r5
    4d44:	mov	r2, r7
    4d48:	ldr	r1, [r6, #16]
    4d4c:	bl	2728 <eval_boolean>
    4d50:	cmp	r0, #0
    4d54:	bne	4e28 <eval_integer+0x11bc>
    4d58:	ldr	r0, [sp, #24]
    4d5c:	cmp	r0, #0
    4d60:	bne	4f18 <eval_integer+0x12ac>
    4d64:	ldr	r0, [sp, #56]	; 0x38
    4d68:	add	r8, r8, #1
    4d6c:	cmp	r8, r0
    4d70:	blt	4d3c <eval_integer+0x10d0>
    4d74:	mvn	r0, #0
    4d78:	str	r0, [sl]
    4d7c:	str	r0, [sl, #4]
    4d80:	mov	r0, #0
    4d84:	str	r0, [r5, #560]	; 0x230
    4d88:	b	4fb4 <eval_integer+0x1348>
    4d8c:	add	r2, sp, #56	; 0x38
    4d90:	mov	r0, r5
    4d94:	mov	r1, r7
    4d98:	bl	2728 <eval_boolean>
    4d9c:	cmp	r0, #0
    4da0:	bne	4e28 <eval_integer+0x11bc>
    4da4:	ldr	r0, [sp, #56]	; 0x38
    4da8:	asr	r1, r0, #31
    4dac:	strd	r0, [sl]
    4db0:	b	4fb4 <eval_integer+0x1348>
    4db4:	add	r0, sp, #8
    4db8:	add	r2, sp, #56	; 0x38
    4dbc:	add	r3, sp, #24
    4dc0:	mov	r1, r7
    4dc4:	str	r0, [sp]
    4dc8:	mov	r0, r5
    4dcc:	bl	61e8 <eval_string>
    4dd0:	cmp	r0, #0
    4dd4:	bne	4e28 <eval_integer+0x11bc>
    4dd8:	ldr	r1, [sp, #24]
    4ddc:	cmp	r1, #0
    4de0:	beq	4f08 <eval_integer+0x129c>
    4de4:	ldr	r0, [sp, #56]	; 0x38
    4de8:	ldr	r2, [sp, #8]
    4dec:	mov	r3, #0
    4df0:	add	r0, r2, r0
    4df4:	mov	r2, sl
    4df8:	bl	0 <coda_ascii_parse_int64>
    4dfc:	mov	r4, r0
    4e00:	ldr	r0, [sp, #8]
    4e04:	bl	0 <free>
    4e08:	cmn	r4, #1
    4e0c:	bgt	4fb4 <eval_integer+0x1348>
    4e10:	b	4e28 <eval_integer+0x11bc>
    4e14:	movw	r1, #0
    4e18:	mvn	r0, #400	; 0x190
    4e1c:	mov	r2, r8
    4e20:	movt	r1, #0
    4e24:	bl	0 <coda_set_error>
    4e28:	mvn	r9, #0
    4e2c:	b	4fb8 <eval_integer+0x134c>
    4e30:	add	r8, sp, #24
    4e34:	str	r4, [sl]
    4e38:	str	r4, [sl, #4]
    4e3c:	ldr	r0, [r6, #24]
    4e40:	cmp	r0, #0
    4e44:	beq	4e6c <eval_integer+0x1200>
    4e48:	ldr	r1, [r6, #20]
    4e4c:	mov	r0, r5
    4e50:	mov	r2, r8
    4e54:	bl	2728 <eval_boolean>
    4e58:	cmp	r0, #0
    4e5c:	bne	4f7c <eval_integer+0x1310>
    4e60:	ldr	r0, [sp, #24]
    4e64:	cmp	r0, #0
    4e68:	bne	4f88 <eval_integer+0x131c>
    4e6c:	ldr	r1, [r6, #20]
    4e70:	mov	r0, r5
    4e74:	mov	r2, r8
    4e78:	bl	2728 <eval_boolean>
    4e7c:	cmp	r0, #0
    4e80:	bne	4f28 <eval_integer+0x12bc>
    4e84:	ldr	r0, [sp, #24]
    4e88:	cmp	r0, #0
    4e8c:	bne	4f94 <eval_integer+0x1328>
    4e90:	ldrd	r0, [sl]
    4e94:	adds	r0, r0, #1
    4e98:	adc	r1, r1, #0
    4e9c:	strd	r0, [sl]
    4ea0:	mov	r0, r7
    4ea4:	bl	0 <coda_cursor_goto_next_array_element>
    4ea8:	cmp	r0, #0
    4eac:	bne	4f34 <eval_integer+0x12c8>
    4eb0:	ldr	r0, [sp, #24]
    4eb4:	cmp	r0, #0
    4eb8:	beq	4e3c <eval_integer+0x11d0>
    4ebc:	b	4f94 <eval_integer+0x1328>
    4ec0:	movw	r1, #0
    4ec4:	movt	r1, #0
    4ec8:	b	3f78 <eval_integer+0x30c>
    4ecc:	movw	r1, #0
    4ed0:	movt	r1, #0
    4ed4:	b	3f78 <eval_integer+0x30c>
    4ed8:	ldr	r0, [sp, #8]
    4edc:	cmp	r0, #7
    4ee0:	bne	4f40 <eval_integer+0x12d4>
    4ee4:	add	r1, sp, #24
    4ee8:	mov	r0, r6
    4eec:	bl	0 <coda_cursor_read_uint64>
    4ef0:	cmp	r0, #0
    4ef4:	bne	45f4 <eval_integer+0x988>
    4ef8:	ldr	r0, [sp, #24]
    4efc:	ldr	r1, [sp, #28]
    4f00:	strd	r0, [sl]
    4f04:	b	4f54 <eval_integer+0x12e8>
    4f08:	movw	r1, #0
    4f0c:	mvn	r0, #102	; 0x66
    4f10:	movt	r1, #0
    4f14:	b	3f7c <eval_integer+0x310>
    4f18:	mov	r9, #0
    4f1c:	strd	r8, [sl]
    4f20:	str	r9, [r5, #560]	; 0x230
    4f24:	b	4fb8 <eval_integer+0x134c>
    4f28:	ldr	r0, [pc, #916]	; 52c4 <eval_integer+0x1658>
    4f2c:	ldr	r1, [pc, r0]
    4f30:	b	483c <eval_integer+0xbd0>
    4f34:	ldr	r0, [pc, #908]	; 52c8 <eval_integer+0x165c>
    4f38:	ldr	r1, [pc, r0]
    4f3c:	b	483c <eval_integer+0xbd0>
    4f40:	mov	r0, r6
    4f44:	mov	r1, sl
    4f48:	bl	0 <coda_cursor_read_int64>
    4f4c:	cmp	r0, #0
    4f50:	bne	45f4 <eval_integer+0x988>
    4f54:	mov	r0, r5
    4f58:	bl	0 <coda_set_option_perform_conversions>
    4f5c:	add	r1, sp, #56	; 0x38
    4f60:	mov	r0, r6
    4f64:	b	4fac <eval_integer+0x1340>
    4f68:	movw	r1, #0
    4f6c:	mvn	r0, #400	; 0x190
    4f70:	mov	r2, r5
    4f74:	movt	r1, #0
    4f78:	b	4e24 <eval_integer+0x11b8>
    4f7c:	ldr	r0, [pc, #828]	; 52c0 <eval_integer+0x1654>
    4f80:	ldr	r1, [pc, r0]
    4f84:	b	483c <eval_integer+0xbd0>
    4f88:	mvn	r0, #0
    4f8c:	str	r0, [sl]
    4f90:	str	r0, [sl, #4]
    4f94:	ldr	r0, [pc, #816]	; 52cc <eval_integer+0x1660>
    4f98:	ldr	r1, [pc, r0]
    4f9c:	bl	0 <__aeabi_read_tp>
    4fa0:	str	r9, [r0, r1]
    4fa4:	add	r1, sp, #56	; 0x38
    4fa8:	mov	r0, r7
    4fac:	mov	r2, #520	; 0x208
    4fb0:	bl	0 <memcpy>
    4fb4:	mov	r9, #0
    4fb8:	mov	r0, r9
    4fbc:	sub	sp, fp, #28
    4fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fc4:	movw	r1, #0
    4fc8:	mvn	r0, #400	; 0x190
    4fcc:	mov	r2, r5
    4fd0:	movt	r1, #0
    4fd4:	bl	0 <coda_set_error>
    4fd8:	b	4e28 <eval_integer+0x11bc>
    4fdc:	mov	r9, #0
    4fe0:	add	r1, sp, #56	; 0x38
    4fe4:	mov	r0, r4
    4fe8:	mov	r2, #520	; 0x208
    4fec:	stm	sl, {r7, r9}
    4ff0:	bl	0 <memcpy>
    4ff4:	b	4fb8 <eval_integer+0x134c>
    4ff8:	movw	r0, #0
    4ffc:	movw	r1, #0
    5000:	movw	r3, #0
    5004:	movw	r2, #2823	; 0xb07
    5008:	movt	r0, #0
    500c:	movt	r1, #0
    5010:	movt	r3, #0
    5014:	bl	0 <__assert_fail>
    5018:	movw	r0, #0
    501c:	movw	r1, #0
    5020:	movw	r3, #0
    5024:	movw	r2, #2563	; 0xa03
    5028:	movt	r0, #0
    502c:	movt	r1, #0
    5030:	movt	r3, #0
    5034:	bl	0 <__assert_fail>
    5038:	movw	r0, #0
    503c:	movw	r1, #0
    5040:	movw	r3, #0
    5044:	movw	r2, #2761	; 0xac9
    5048:	movt	r0, #0
    504c:	movt	r1, #0
    5050:	movt	r3, #0
    5054:	bl	0 <__assert_fail>
    5058:	movw	r0, #0
    505c:	movw	r1, #0
    5060:	movw	r3, #0
    5064:	movw	r2, #2724	; 0xaa4
    5068:	movt	r0, #0
    506c:	movt	r1, #0
    5070:	movt	r3, #0
    5074:	bl	0 <__assert_fail>
    5078:	movw	r0, #0
    507c:	movw	r1, #0
    5080:	movw	r3, #0
    5084:	movw	r2, #2627	; 0xa43
    5088:	movt	r0, #0
    508c:	movt	r1, #0
    5090:	movt	r3, #0
    5094:	bl	0 <__assert_fail>
    5098:	movw	r0, #0
    509c:	movw	r1, #0
    50a0:	movw	r3, #0
    50a4:	movw	r2, #2287	; 0x8ef
    50a8:	movt	r0, #0
    50ac:	movt	r1, #0
    50b0:	movt	r3, #0
    50b4:	bl	0 <__assert_fail>
    50b8:	movw	r0, #0
    50bc:	movw	r1, #0
    50c0:	movw	r3, #0
    50c4:	movw	r2, #2792	; 0xae8
    50c8:	movt	r0, #0
    50cc:	movt	r1, #0
    50d0:	movt	r3, #0
    50d4:	bl	0 <__assert_fail>
    50d8:	movw	r0, #0
    50dc:	movw	r1, #0
    50e0:	movw	r3, #0
    50e4:	movw	r2, #2242	; 0x8c2
    50e8:	movt	r0, #0
    50ec:	movt	r1, #0
    50f0:	movt	r3, #0
    50f4:	bl	0 <__assert_fail>
    50f8:	movw	r0, #0
    50fc:	movw	r1, #0
    5100:	movw	r3, #0
    5104:	movw	r2, #2605	; 0xa2d
    5108:	movt	r0, #0
    510c:	movt	r1, #0
    5110:	movt	r3, #0
    5114:	bl	0 <__assert_fail>
    5118:	movw	r0, #0
    511c:	movw	r1, #0
    5120:	movw	r3, #0
    5124:	movw	r2, #2194	; 0x892
    5128:	movt	r0, #0
    512c:	movt	r1, #0
    5130:	movt	r3, #0
    5134:	bl	0 <__assert_fail>
    5138:	movw	r0, #0
    513c:	movw	r1, #0
    5140:	movw	r3, #0
    5144:	movw	r2, #2702	; 0xa8e
    5148:	movt	r0, #0
    514c:	movt	r1, #0
    5150:	movt	r3, #0
    5154:	bl	0 <__assert_fail>
    5158:	movw	r0, #0
    515c:	movw	r1, #0
    5160:	movw	r3, #0
    5164:	movw	r2, #2383	; 0x94f
    5168:	movt	r0, #0
    516c:	movt	r1, #0
    5170:	movt	r3, #0
    5174:	bl	0 <__assert_fail>
    5178:	movw	r0, #0
    517c:	movw	r1, #0
    5180:	movw	r3, #0
    5184:	movw	r2, #2689	; 0xa81
    5188:	movt	r0, #0
    518c:	movt	r1, #0
    5190:	movt	r3, #0
    5194:	bl	0 <__assert_fail>
    5198:	movw	r0, #0
    519c:	movw	r1, #0
    51a0:	movw	r3, #0
    51a4:	movw	r2, #2435	; 0x983
    51a8:	movt	r0, #0
    51ac:	movt	r1, #0
    51b0:	movt	r3, #0
    51b4:	bl	0 <__assert_fail>
    51b8:	movw	r0, #0
    51bc:	movw	r1, #0
    51c0:	movw	r3, #0
    51c4:	movw	r2, #2335	; 0x91f
    51c8:	movt	r0, #0
    51cc:	movt	r1, #0
    51d0:	movt	r3, #0
    51d4:	bl	0 <__assert_fail>
    51d8:	movw	r0, #0
    51dc:	movw	r1, #0
    51e0:	movw	r3, #0
    51e4:	movw	r2, #2648	; 0xa58
    51e8:	movt	r0, #0
    51ec:	movt	r1, #0
    51f0:	movt	r3, #0
    51f4:	bl	0 <__assert_fail>
    51f8:	movw	r0, #0
    51fc:	movw	r1, #0
    5200:	movw	r3, #0
    5204:	movw	r2, #2665	; 0xa69
    5208:	movt	r0, #0
    520c:	movt	r1, #0
    5210:	movt	r3, #0
    5214:	bl	0 <__assert_fail>
    5218:	movw	r0, #0
    521c:	movw	r1, #0
    5220:	movw	r3, #0
    5224:	mov	r2, #2528	; 0x9e0
    5228:	movt	r0, #0
    522c:	movt	r1, #0
    5230:	movt	r3, #0
    5234:	bl	0 <__assert_fail>
    5238:	movw	r0, #0
    523c:	movw	r1, #0
    5240:	movw	r3, #0
    5244:	movw	r2, #2679	; 0xa77
    5248:	movt	r0, #0
    524c:	movt	r1, #0
    5250:	movt	r3, #0
    5254:	bl	0 <__assert_fail>
    5258:	movw	r0, #0
    525c:	movw	r1, #0
    5260:	movw	r3, #0
    5264:	movw	r2, #2586	; 0xa1a
    5268:	movt	r0, #0
    526c:	movt	r1, #0
    5270:	movt	r3, #0
    5274:	bl	0 <__assert_fail>
    5278:	movw	r0, #0
    527c:	movw	r1, #0
    5280:	movw	r3, #0
    5284:	movw	r2, #2491	; 0x9bb
    5288:	movt	r0, #0
    528c:	movt	r1, #0
    5290:	movt	r3, #0
    5294:	bl	0 <__assert_fail>
    5298:	movw	r0, #0
    529c:	movw	r1, #0
    52a0:	movw	r3, #0
    52a4:	mov	r2, #1936	; 0x790
    52a8:	movt	r0, #0
    52ac:	movt	r1, #0
    52b0:	movt	r3, #0
    52b4:	bl	0 <__assert_fail>
    52b8:	.word	0x00000aa0
    52bc:	.word	0x00000a7c
    52c0:	.word	0x00000338
    52c4:	.word	0x00000390
    52c8:	.word	0x00000388
    52cc:	.word	0x0000032c

000052d0 <coda_expression_eval_float>:
    52d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    52d4:	add	fp, sp, #24
    52d8:	sub	sp, sp, #568	; 0x238
    52dc:	mov	r6, r0
    52e0:	ldr	r0, [r0, #4]
    52e4:	cmp	r0, #2
    52e8:	bne	5318 <coda_expression_eval_float+0x48>
    52ec:	mov	r5, r2
    52f0:	mov	r4, r1
    52f4:	cmp	r1, #0
    52f8:	beq	5330 <coda_expression_eval_float+0x60>
    52fc:	mov	r0, sp
    5300:	mov	r1, r4
    5304:	mov	r2, #520	; 0x208
    5308:	str	r4, [sp]
    530c:	add	r0, r0, #8
    5310:	bl	0 <memcpy>
    5314:	b	5344 <coda_expression_eval_float+0x74>
    5318:	movw	r1, #0
    531c:	movt	r1, #0
    5320:	mvn	r0, #99	; 0x63
    5324:	bl	0 <coda_set_error>
    5328:	mvn	r5, #0
    532c:	b	538c <coda_expression_eval_float+0xbc>
    5330:	ldr	r0, [r6, #8]
    5334:	cmp	r0, #0
    5338:	beq	53c0 <coda_expression_eval_float+0xf0>
    533c:	mov	r0, #0
    5340:	str	r0, [sp]
    5344:	mov	r7, sp
    5348:	vmov.i32	q8, #0	; 0x00000000
    534c:	mov	r1, r6
    5350:	mov	r2, r5
    5354:	add	r0, r7, #544	; 0x220
    5358:	vst1.64	{d16-d17}, [r0]
    535c:	add	r0, r7, #528	; 0x210
    5360:	vst1.64	{d16-d17}, [r0]
    5364:	mov	r0, #0
    5368:	str	r0, [sp, #560]	; 0x230
    536c:	mov	r0, r7
    5370:	bl	53cc <eval_float>
    5374:	cmp	r0, #0
    5378:	mov	r5, r0
    537c:	mvnne	r5, #0
    5380:	cmp	r4, #0
    5384:	cmpne	r0, #0
    5388:	bne	5398 <coda_expression_eval_float+0xc8>
    538c:	mov	r0, r5
    5390:	sub	sp, fp, #24
    5394:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5398:	add	r6, r7, #8
    539c:	mov	r0, r4
    53a0:	mov	r1, r6
    53a4:	bl	0 <coda_cursor_compare>
    53a8:	mvn	r5, #0
    53ac:	cmp	r0, #0
    53b0:	beq	538c <coda_expression_eval_float+0xbc>
    53b4:	mov	r0, r6
    53b8:	bl	0 <coda_cursor_add_to_error_message>
    53bc:	b	538c <coda_expression_eval_float+0xbc>
    53c0:	movw	r1, #0
    53c4:	movt	r1, #0
    53c8:	b	5320 <coda_expression_eval_float+0x50>

000053cc <eval_float>:
    53cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53d0:	add	fp, sp, #28
    53d4:	sub	sp, sp, #4
    53d8:	vpush	{d8}
    53dc:	sub	sp, sp, #560	; 0x230
    53e0:	mov	r5, r0
    53e4:	ldr	r0, [r1, #4]
    53e8:	mov	r9, r2
    53ec:	mov	r6, r1
    53f0:	cmp	r0, #1
    53f4:	bne	5428 <eval_float+0x5c>
    53f8:	add	r2, sp, #32
    53fc:	mov	r0, r5
    5400:	mov	r1, r6
    5404:	bl	3c6c <eval_integer>
    5408:	mvn	r7, #0
    540c:	cmp	r0, #0
    5410:	bne	5efc <eval_float+0xb30>
    5414:	ldr	r0, [sp, #32]
    5418:	ldr	r1, [sp, #36]	; 0x24
    541c:	bl	0 <__aeabi_l2d>
    5420:	strd	r0, [r9]
    5424:	b	5ef8 <eval_float+0xb2c>
    5428:	ldr	r0, [r6]
    542c:	cmp	r0, #86	; 0x56
    5430:	bhi	5f84 <eval_float+0xbb8>
    5434:	add	r1, pc, #0
    5438:	ldr	pc, [r1, r0, lsl #2]
    543c:	.word	0x00005598
    5440:	.word	0x00005ab4
    5444:	.word	0x00005f84
    5448:	.word	0x00005bfc
    544c:	.word	0x00005f84
    5450:	.word	0x00005f84
    5454:	.word	0x00005f84
    5458:	.word	0x00005f84
    545c:	.word	0x00005940
    5460:	.word	0x00005850
    5464:	.word	0x00005f84
    5468:	.word	0x0000571c
    546c:	.word	0x00005f84
    5470:	.word	0x00005f84
    5474:	.word	0x00005f84
    5478:	.word	0x00005f84
    547c:	.word	0x00005f84
    5480:	.word	0x000057b4
    5484:	.word	0x00005f84
    5488:	.word	0x000056d4
    548c:	.word	0x00005f84
    5490:	.word	0x00005f84
    5494:	.word	0x00005f84
    5498:	.word	0x00005f84
    549c:	.word	0x000057dc
    54a0:	.word	0x00005f84
    54a4:	.word	0x00005f84
    54a8:	.word	0x00005f84
    54ac:	.word	0x00005f84
    54b0:	.word	0x0000564c
    54b4:	.word	0x00005828
    54b8:	.word	0x00005f84
    54bc:	.word	0x00005f84
    54c0:	.word	0x00005f84
    54c4:	.word	0x00005f84
    54c8:	.word	0x00005f84
    54cc:	.word	0x00005f84
    54d0:	.word	0x00005f84
    54d4:	.word	0x00005f84
    54d8:	.word	0x00005f84
    54dc:	.word	0x00005f84
    54e0:	.word	0x00005f84
    54e4:	.word	0x000055cc
    54e8:	.word	0x00005f84
    54ec:	.word	0x00005f84
    54f0:	.word	0x00005f84
    54f4:	.word	0x00005f84
    54f8:	.word	0x00005f84
    54fc:	.word	0x00005f84
    5500:	.word	0x00005f84
    5504:	.word	0x00005f84
    5508:	.word	0x00005f84
    550c:	.word	0x00005f84
    5510:	.word	0x00005f84
    5514:	.word	0x00005f84
    5518:	.word	0x00005f84
    551c:	.word	0x0000560c
    5520:	.word	0x0000576c
    5524:	.word	0x00005cec
    5528:	.word	0x000056dc
    552c:	.word	0x00005d78
    5530:	.word	0x00005f84
    5534:	.word	0x00005f84
    5538:	.word	0x00005f84
    553c:	.word	0x00005f84
    5540:	.word	0x00005f84
    5544:	.word	0x00005a30
    5548:	.word	0x00005f84
    554c:	.word	0x00005f84
    5550:	.word	0x00005f84
    5554:	.word	0x00005f84
    5558:	.word	0x00005f84
    555c:	.word	0x00005bc0
    5560:	.word	0x00005f84
    5564:	.word	0x00005f84
    5568:	.word	0x00005f84
    556c:	.word	0x00005f84
    5570:	.word	0x00005f84
    5574:	.word	0x00005d38
    5578:	.word	0x00005af4
    557c:	.word	0x00005f84
    5580:	.word	0x00005f84
    5584:	.word	0x00005f84
    5588:	.word	0x00005f84
    558c:	.word	0x00005f84
    5590:	.word	0x00005f84
    5594:	.word	0x00005b70
    5598:	ldr	r1, [r6, #16]
    559c:	mov	r0, r5
    55a0:	mov	r2, r9
    55a4:	bl	53cc <eval_float>
    55a8:	mvn	r7, #0
    55ac:	cmp	r0, #0
    55b0:	bne	5efc <eval_float+0xb30>
    55b4:	vldr	d16, [r9]
    55b8:	vcmpe.f64	d16, #0.0
    55bc:	vneg.f64	d17, d16
    55c0:	vmrs	APSR_nzcv, fpscr
    55c4:	vselge.f64	d16, d16, d17
    55c8:	b	5ef4 <eval_float+0xb28>
    55cc:	ldr	r1, [r6, #16]
    55d0:	add	r2, sp, #32
    55d4:	mov	r0, r5
    55d8:	bl	2728 <eval_boolean>
    55dc:	cmp	r0, #0
    55e0:	bne	5e30 <eval_float+0xa64>
    55e4:	ldr	r0, [sp, #32]
    55e8:	mov	r2, r9
    55ec:	cmp	r0, #0
    55f0:	mov	r0, r5
    55f4:	ldreq	r1, [r6, #24]
    55f8:	ldrne	r1, [r6, #20]
    55fc:	bl	53cc <eval_float>
    5600:	cmp	r0, #0
    5604:	bne	5e30 <eval_float+0xa64>
    5608:	b	5ef8 <eval_float+0xb2c>
    560c:	ldr	r1, [r6, #16]
    5610:	add	r2, sp, #32
    5614:	mov	r0, r5
    5618:	bl	53cc <eval_float>
    561c:	cmp	r0, #0
    5620:	bne	5e30 <eval_float+0xa64>
    5624:	ldr	r1, [r6, #20]
    5628:	add	r2, sp, #24
    562c:	mov	r0, r5
    5630:	bl	53cc <eval_float>
    5634:	cmp	r0, #0
    5638:	bne	5e30 <eval_float+0xa64>
    563c:	vldr	d16, [sp, #24]
    5640:	vldr	d17, [sp, #32]
    5644:	vcmpe.f64	d17, d16
    5648:	b	57a8 <eval_float+0x3dc>
    564c:	ldr	r7, [r6, #16]
    5650:	ldr	r0, [r7, #4]
    5654:	cmp	r0, #3
    5658:	beq	5da0 <eval_float+0x9d4>
    565c:	cmp	r0, #4
    5660:	bne	5e00 <eval_float+0xa34>
    5664:	ldr	r0, [r5]
    5668:	cmp	r0, #0
    566c:	beq	6024 <eval_float+0xc58>
    5670:	add	r6, r5, #8
    5674:	add	r0, sp, #32
    5678:	mov	r2, #520	; 0x208
    567c:	mov	r1, r6
    5680:	bl	0 <memcpy>
    5684:	mov	r0, r5
    5688:	mov	r1, r7
    568c:	bl	7c6c <eval_cursor>
    5690:	cmp	r0, #0
    5694:	bne	5e30 <eval_float+0xa64>
    5698:	bl	0 <coda_get_option_perform_conversions>
    569c:	mov	r4, r0
    56a0:	mov	r0, #0
    56a4:	bl	0 <coda_set_option_perform_conversions>
    56a8:	mov	r0, r6
    56ac:	mov	r1, r9
    56b0:	bl	0 <coda_cursor_read_double>
    56b4:	mov	r5, r0
    56b8:	mov	r0, r4
    56bc:	bl	0 <coda_set_option_perform_conversions>
    56c0:	cmp	r5, #0
    56c4:	bne	5e30 <eval_float+0xa64>
    56c8:	add	r1, sp, #32
    56cc:	mov	r0, r6
    56d0:	b	5ce0 <eval_float+0x914>
    56d4:	vldr	d16, [r6, #16]
    56d8:	b	5ef4 <eval_float+0xb28>
    56dc:	ldr	r1, [r6, #16]
    56e0:	add	r2, sp, #32
    56e4:	mov	r0, r5
    56e8:	bl	53cc <eval_float>
    56ec:	cmp	r0, #0
    56f0:	bne	5e30 <eval_float+0xa64>
    56f4:	ldr	r1, [r6, #20]
    56f8:	add	r2, sp, #24
    56fc:	mov	r0, r5
    5700:	bl	53cc <eval_float>
    5704:	cmp	r0, #0
    5708:	bne	5e30 <eval_float+0xa64>
    570c:	vldr	d16, [sp, #24]
    5710:	vldr	d17, [sp, #32]
    5714:	vmul.f64	d16, d17, d16
    5718:	b	5ef4 <eval_float+0xb28>
    571c:	ldr	r0, [r5]
    5720:	cmp	r0, #0
    5724:	beq	5fa4 <eval_float+0xbd8>
    5728:	add	r7, r5, #8
    572c:	add	r0, sp, #32
    5730:	mov	r2, #520	; 0x208
    5734:	mov	r1, r7
    5738:	bl	0 <memcpy>
    573c:	ldr	r1, [r6, #16]
    5740:	mov	r0, r5
    5744:	bl	7c6c <eval_cursor>
    5748:	cmp	r0, #0
    574c:	bne	5e30 <eval_float+0xa64>
    5750:	ldr	r1, [r6, #20]
    5754:	mov	r0, r5
    5758:	mov	r2, r9
    575c:	bl	53cc <eval_float>
    5760:	cmp	r0, #0
    5764:	bne	5e30 <eval_float+0xa64>
    5768:	b	5cd8 <eval_float+0x90c>
    576c:	ldr	r1, [r6, #16]
    5770:	add	r2, sp, #32
    5774:	mov	r0, r5
    5778:	bl	53cc <eval_float>
    577c:	cmp	r0, #0
    5780:	bne	5e30 <eval_float+0xa64>
    5784:	ldr	r1, [r6, #20]
    5788:	add	r2, sp, #24
    578c:	mov	r0, r5
    5790:	bl	53cc <eval_float>
    5794:	cmp	r0, #0
    5798:	bne	5e30 <eval_float+0xa64>
    579c:	vldr	d16, [sp, #24]
    57a0:	vldr	d17, [sp, #32]
    57a4:	vcmpe.f64	d16, d17
    57a8:	vmrs	APSR_nzcv, fpscr
    57ac:	vselgt.f64	d16, d17, d16
    57b0:	b	5ef4 <eval_float+0xb28>
    57b4:	ldr	r1, [r6, #16]
    57b8:	mov	r0, r5
    57bc:	mov	r2, r9
    57c0:	bl	53cc <eval_float>
    57c4:	mvn	r7, #0
    57c8:	cmp	r0, #0
    57cc:	bne	5efc <eval_float+0xb30>
    57d0:	vldr	d16, [r9]
    57d4:	vrintp.f64	d16, d16
    57d8:	b	5ef4 <eval_float+0xb28>
    57dc:	ldr	r1, [r6, #16]
    57e0:	add	r2, sp, #32
    57e4:	mov	r0, r5
    57e8:	bl	53cc <eval_float>
    57ec:	cmp	r0, #0
    57f0:	bne	5e30 <eval_float+0xa64>
    57f4:	ldr	r1, [r6, #20]
    57f8:	add	r2, sp, #24
    57fc:	mov	r0, r5
    5800:	bl	53cc <eval_float>
    5804:	cmp	r0, #0
    5808:	bne	5e30 <eval_float+0xa64>
    580c:	vldr	d16, [sp, #24]
    5810:	vcmp.f64	d16, #0.0
    5814:	vmrs	APSR_nzcv, fpscr
    5818:	bne	5eec <eval_float+0xb20>
    581c:	movw	r1, #0
    5820:	movt	r1, #0
    5824:	b	5e5c <eval_float+0xa90>
    5828:	ldr	r1, [r6, #16]
    582c:	mov	r0, r5
    5830:	mov	r2, r9
    5834:	bl	53cc <eval_float>
    5838:	mvn	r7, #0
    583c:	cmp	r0, #0
    5840:	bne	5efc <eval_float+0xb30>
    5844:	vldr	d16, [r9]
    5848:	vrintm.f64	d16, d16
    584c:	b	5ef4 <eval_float+0xb28>
    5850:	ldr	r0, [r5]
    5854:	cmp	r0, #0
    5858:	beq	5fc4 <eval_float+0xbf8>
    585c:	add	r7, r5, #8
    5860:	add	r0, sp, #32
    5864:	mov	r2, #520	; 0x208
    5868:	mov	r1, r7
    586c:	bl	0 <memcpy>
    5870:	ldr	r1, [r6, #16]
    5874:	mov	r0, r5
    5878:	bl	7c6c <eval_cursor>
    587c:	cmp	r0, #0
    5880:	bne	5e30 <eval_float+0xa64>
    5884:	add	r1, sp, #16
    5888:	mov	r0, r7
    588c:	bl	0 <coda_cursor_get_num_elements>
    5890:	cmp	r0, #0
    5894:	bne	5e30 <eval_float+0xa64>
    5898:	bl	0 <coda_NaN>
    589c:	vstr	d0, [r9]
    58a0:	ldr	r0, [sp, #16]
    58a4:	cmp	r0, #1
    58a8:	blt	5cd8 <eval_float+0x90c>
    58ac:	mov	r0, r7
    58b0:	bl	0 <coda_cursor_goto_first_array_element>
    58b4:	cmp	r0, #0
    58b8:	bne	5e30 <eval_float+0xa64>
    58bc:	ldr	r0, [sp, #16]
    58c0:	cmp	r0, #1
    58c4:	blt	5cd8 <eval_float+0x90c>
    58c8:	mov	r4, #0
    58cc:	add	r8, sp, #24
    58d0:	ldr	r1, [r6, #20]
    58d4:	mov	r0, r5
    58d8:	mov	r2, r8
    58dc:	bl	53cc <eval_float>
    58e0:	cmp	r0, #0
    58e4:	bne	5e30 <eval_float+0xa64>
    58e8:	vldr	d16, [sp, #24]
    58ec:	cmp	r4, #0
    58f0:	beq	5908 <eval_float+0x53c>
    58f4:	vldr	d17, [r9]
    58f8:	vcmpe.f64	d16, d17
    58fc:	vmrs	APSR_nzcv, fpscr
    5900:	vstrmi	d16, [r9]
    5904:	b	590c <eval_float+0x540>
    5908:	vstr	d16, [r9]
    590c:	ldr	r0, [sp, #16]
    5910:	sub	r1, r0, #1
    5914:	cmp	r4, r1
    5918:	bge	5930 <eval_float+0x564>
    591c:	mov	r0, r7
    5920:	bl	0 <coda_cursor_goto_next_array_element>
    5924:	cmp	r0, #0
    5928:	bne	5e30 <eval_float+0xa64>
    592c:	ldr	r0, [sp, #16]
    5930:	add	r4, r4, #1
    5934:	cmp	r4, r0
    5938:	blt	58d0 <eval_float+0x504>
    593c:	b	5cd8 <eval_float+0x90c>
    5940:	ldr	r0, [r5]
    5944:	cmp	r0, #0
    5948:	beq	5fe4 <eval_float+0xc18>
    594c:	add	r7, r5, #8
    5950:	add	r0, sp, #32
    5954:	mov	r2, #520	; 0x208
    5958:	mov	r1, r7
    595c:	bl	0 <memcpy>
    5960:	ldr	r1, [r6, #16]
    5964:	mov	r0, r5
    5968:	bl	7c6c <eval_cursor>
    596c:	cmp	r0, #0
    5970:	bne	5e30 <eval_float+0xa64>
    5974:	add	r1, sp, #16
    5978:	mov	r0, r7
    597c:	bl	0 <coda_cursor_get_num_elements>
    5980:	cmp	r0, #0
    5984:	bne	5e30 <eval_float+0xa64>
    5988:	bl	0 <coda_NaN>
    598c:	vstr	d0, [r9]
    5990:	ldr	r0, [sp, #16]
    5994:	cmp	r0, #1
    5998:	blt	5cd8 <eval_float+0x90c>
    599c:	mov	r0, r7
    59a0:	bl	0 <coda_cursor_goto_first_array_element>
    59a4:	cmp	r0, #0
    59a8:	bne	5e30 <eval_float+0xa64>
    59ac:	ldr	r0, [sp, #16]
    59b0:	cmp	r0, #1
    59b4:	blt	5cd8 <eval_float+0x90c>
    59b8:	mov	r4, #0
    59bc:	add	r8, sp, #24
    59c0:	ldr	r1, [r6, #20]
    59c4:	mov	r0, r5
    59c8:	mov	r2, r8
    59cc:	bl	53cc <eval_float>
    59d0:	cmp	r0, #0
    59d4:	bne	5e30 <eval_float+0xa64>
    59d8:	vldr	d16, [sp, #24]
    59dc:	cmp	r4, #0
    59e0:	beq	59f8 <eval_float+0x62c>
    59e4:	vldr	d17, [r9]
    59e8:	vcmpe.f64	d16, d17
    59ec:	vmrs	APSR_nzcv, fpscr
    59f0:	vstrgt	d16, [r9]
    59f4:	b	59fc <eval_float+0x630>
    59f8:	vstr	d16, [r9]
    59fc:	ldr	r0, [sp, #16]
    5a00:	sub	r1, r0, #1
    5a04:	cmp	r4, r1
    5a08:	bge	5a20 <eval_float+0x654>
    5a0c:	mov	r0, r7
    5a10:	bl	0 <coda_cursor_goto_next_array_element>
    5a14:	cmp	r0, #0
    5a18:	bne	5e30 <eval_float+0xa64>
    5a1c:	ldr	r0, [sp, #16]
    5a20:	add	r4, r4, #1
    5a24:	cmp	r4, r0
    5a28:	blt	59c0 <eval_float+0x5f4>
    5a2c:	b	5cd8 <eval_float+0x90c>
    5a30:	ldr	r1, [r6, #16]
    5a34:	add	r2, sp, #32
    5a38:	mov	r0, r5
    5a3c:	bl	53cc <eval_float>
    5a40:	cmp	r0, #0
    5a44:	bne	5e30 <eval_float+0xa64>
    5a48:	ldr	r1, [r6, #20]
    5a4c:	ldr	r0, [r1, #4]
    5a50:	cmp	r0, #1
    5a54:	bne	5e1c <eval_float+0xa50>
    5a58:	add	r2, sp, #16
    5a5c:	mov	r0, r5
    5a60:	bl	3c6c <eval_integer>
    5a64:	cmp	r0, #0
    5a68:	bne	5e30 <eval_float+0xa64>
    5a6c:	ldr	r0, [sp, #16]
    5a70:	ldr	r1, [sp, #20]
    5a74:	vldr	d8, [sp, #32]
    5a78:	adds	r2, r0, #64	; 0x40
    5a7c:	adc	r3, r1, #0
    5a80:	rsbs	r2, r2, #128	; 0x80
    5a84:	rscs	r2, r3, #0
    5a88:	bcc	5f30 <eval_float+0xb64>
    5a8c:	cmn	r0, #1
    5a90:	ble	5f54 <eval_float+0xb88>
    5a94:	vmov.f64	d0, #112	; 0x3f800000  1.0
    5a98:	cmp	r0, #0
    5a9c:	beq	5f40 <eval_float+0xb74>
    5aa0:	rsb	r0, r0, #0
    5aa4:	adds	r0, r0, #1
    5aa8:	vmul.f64	d0, d8, d0
    5aac:	bne	5aa4 <eval_float+0x6d8>
    5ab0:	b	5f40 <eval_float+0xb74>
    5ab4:	ldr	r1, [r6, #16]
    5ab8:	add	r2, sp, #32
    5abc:	mov	r0, r5
    5ac0:	bl	53cc <eval_float>
    5ac4:	cmp	r0, #0
    5ac8:	bne	5e30 <eval_float+0xa64>
    5acc:	ldr	r1, [r6, #20]
    5ad0:	add	r2, sp, #24
    5ad4:	mov	r0, r5
    5ad8:	bl	53cc <eval_float>
    5adc:	cmp	r0, #0
    5ae0:	bne	5e30 <eval_float+0xa64>
    5ae4:	vldr	d16, [sp, #24]
    5ae8:	vldr	d17, [sp, #32]
    5aec:	vadd.f64	d16, d17, d16
    5af0:	b	5ef4 <eval_float+0xb28>
    5af4:	ldr	r1, [r6, #16]
    5af8:	add	r0, sp, #8
    5afc:	add	r2, sp, #32
    5b00:	add	r3, sp, #16
    5b04:	str	r0, [sp]
    5b08:	mov	r0, r5
    5b0c:	bl	61e8 <eval_string>
    5b10:	cmp	r0, #0
    5b14:	bne	5e30 <eval_float+0xa64>
    5b18:	ldr	r0, [sp, #16]
    5b1c:	cmn	r0, #1
    5b20:	ble	5e48 <eval_float+0xa7c>
    5b24:	cmp	r0, #0
    5b28:	beq	5e54 <eval_float+0xa88>
    5b2c:	ldr	r1, [sp, #32]
    5b30:	mov	r2, #0
    5b34:	add	r3, sp, #12
    5b38:	add	r0, r1, r0
    5b3c:	ldr	r1, [sp, #8]
    5b40:	strb	r2, [r1, r0]
    5b44:	add	r0, sp, #4
    5b48:	add	r2, sp, #24
    5b4c:	ldr	r1, [r6, #20]
    5b50:	str	r0, [sp]
    5b54:	mov	r0, r5
    5b58:	bl	61e8 <eval_string>
    5b5c:	cmp	r0, #0
    5b60:	beq	5e80 <eval_float+0xab4>
    5b64:	ldr	r0, [sp, #8]
    5b68:	bl	0 <free>
    5b6c:	b	5e30 <eval_float+0xa64>
    5b70:	ldr	r0, [r6, #12]
    5b74:	ldr	r1, [r6, #16]
    5b78:	ldrb	r0, [r0]
    5b7c:	add	r4, r5, r0, lsl #3
    5b80:	mov	r0, r5
    5b84:	ldr	r8, [r4, #-312]!	; 0xfffffec8
    5b88:	ldr	sl, [r4, #4]
    5b8c:	mov	r2, r4
    5b90:	bl	3c6c <eval_integer>
    5b94:	mvn	r7, #0
    5b98:	cmp	r0, #0
    5b9c:	bne	5efc <eval_float+0xb30>
    5ba0:	ldr	r1, [r6, #20]
    5ba4:	mov	r0, r5
    5ba8:	mov	r2, r9
    5bac:	bl	53cc <eval_float>
    5bb0:	cmp	r0, #0
    5bb4:	bne	5efc <eval_float+0xb30>
    5bb8:	stm	r4, {r8, sl}
    5bbc:	b	5ef8 <eval_float+0xb2c>
    5bc0:	ldr	r1, [r6, #16]
    5bc4:	mov	r0, r5
    5bc8:	mov	r2, r9
    5bcc:	bl	53cc <eval_float>
    5bd0:	mvn	r7, #0
    5bd4:	cmp	r0, #0
    5bd8:	bne	5efc <eval_float+0xb30>
    5bdc:	vldr	d16, [r9]
    5be0:	vcmpe.f64	d16, #0.0
    5be4:	vmrs	APSR_nzcv, fpscr
    5be8:	bpl	5e38 <eval_float+0xa6c>
    5bec:	vmov.f64	d17, #224	; 0xbf000000 -0.5
    5bf0:	vadd.f64	d16, d16, d17
    5bf4:	vrintp.f64	d16, d16
    5bf8:	b	5ef4 <eval_float+0xb28>
    5bfc:	ldr	r0, [r5]
    5c00:	cmp	r0, #0
    5c04:	beq	6004 <eval_float+0xc38>
    5c08:	add	r7, r5, #8
    5c0c:	add	r0, sp, #32
    5c10:	mov	r2, #520	; 0x208
    5c14:	mov	r1, r7
    5c18:	bl	0 <memcpy>
    5c1c:	ldr	r1, [r6, #16]
    5c20:	mov	r0, r5
    5c24:	bl	7c6c <eval_cursor>
    5c28:	cmp	r0, #0
    5c2c:	bne	5e30 <eval_float+0xa64>
    5c30:	add	r1, sp, #16
    5c34:	mov	r0, r7
    5c38:	bl	0 <coda_cursor_get_num_elements>
    5c3c:	cmp	r0, #0
    5c40:	bne	5e30 <eval_float+0xa64>
    5c44:	mov	r0, #0
    5c48:	str	r0, [r9]
    5c4c:	str	r0, [r9, #4]
    5c50:	ldr	r0, [sp, #16]
    5c54:	cmp	r0, #1
    5c58:	blt	5cd8 <eval_float+0x90c>
    5c5c:	mov	r0, r7
    5c60:	bl	0 <coda_cursor_goto_first_array_element>
    5c64:	cmp	r0, #0
    5c68:	bne	5e30 <eval_float+0xa64>
    5c6c:	ldr	r0, [sp, #16]
    5c70:	cmp	r0, #1
    5c74:	blt	5cd8 <eval_float+0x90c>
    5c78:	mov	r4, #0
    5c7c:	add	r8, sp, #24
    5c80:	ldr	r1, [r6, #20]
    5c84:	mov	r0, r5
    5c88:	mov	r2, r8
    5c8c:	bl	53cc <eval_float>
    5c90:	cmp	r0, #0
    5c94:	bne	5e30 <eval_float+0xa64>
    5c98:	vldr	d16, [sp, #24]
    5c9c:	vldr	d17, [r9]
    5ca0:	vadd.f64	d16, d16, d17
    5ca4:	vstr	d16, [r9]
    5ca8:	ldr	r0, [sp, #16]
    5cac:	sub	r1, r0, #1
    5cb0:	cmp	r4, r1
    5cb4:	bge	5ccc <eval_float+0x900>
    5cb8:	mov	r0, r7
    5cbc:	bl	0 <coda_cursor_goto_next_array_element>
    5cc0:	cmp	r0, #0
    5cc4:	bne	5e30 <eval_float+0xa64>
    5cc8:	ldr	r0, [sp, #16]
    5ccc:	add	r4, r4, #1
    5cd0:	cmp	r4, r0
    5cd4:	blt	5c80 <eval_float+0x8b4>
    5cd8:	add	r1, sp, #32
    5cdc:	mov	r0, r7
    5ce0:	mov	r2, #520	; 0x208
    5ce4:	bl	0 <memcpy>
    5ce8:	b	5ef8 <eval_float+0xb2c>
    5cec:	ldr	r1, [r6, #16]
    5cf0:	add	r2, sp, #32
    5cf4:	mov	r0, r5
    5cf8:	bl	53cc <eval_float>
    5cfc:	cmp	r0, #0
    5d00:	bne	5e30 <eval_float+0xa64>
    5d04:	ldr	r1, [r6, #20]
    5d08:	add	r2, sp, #24
    5d0c:	mov	r0, r5
    5d10:	bl	53cc <eval_float>
    5d14:	cmp	r0, #0
    5d18:	bne	5e30 <eval_float+0xa64>
    5d1c:	vldr	d1, [sp, #24]
    5d20:	vcmp.f64	d1, #0.0
    5d24:	vmrs	APSR_nzcv, fpscr
    5d28:	bne	5f10 <eval_float+0xb44>
    5d2c:	movw	r1, #0
    5d30:	movt	r1, #0
    5d34:	b	5e5c <eval_float+0xa90>
    5d38:	ldr	r1, [r6, #16]
    5d3c:	add	r2, sp, #32
    5d40:	mov	r0, r5
    5d44:	bl	53cc <eval_float>
    5d48:	cmp	r0, #0
    5d4c:	bne	5e30 <eval_float+0xa64>
    5d50:	ldr	r1, [r6, #20]
    5d54:	add	r2, sp, #24
    5d58:	mov	r0, r5
    5d5c:	bl	53cc <eval_float>
    5d60:	cmp	r0, #0
    5d64:	bne	5e30 <eval_float+0xa64>
    5d68:	vldr	d16, [sp, #24]
    5d6c:	vldr	d17, [sp, #32]
    5d70:	vsub.f64	d16, d17, d16
    5d74:	b	5ef4 <eval_float+0xb28>
    5d78:	ldr	r1, [r6, #16]
    5d7c:	mov	r0, r5
    5d80:	mov	r2, r9
    5d84:	bl	53cc <eval_float>
    5d88:	mvn	r7, #0
    5d8c:	cmp	r0, #0
    5d90:	bne	5efc <eval_float+0xb30>
    5d94:	vldr	d16, [r9]
    5d98:	vneg.f64	d16, d16
    5d9c:	b	5ef4 <eval_float+0xb28>
    5da0:	add	r0, sp, #16
    5da4:	add	r2, sp, #32
    5da8:	add	r3, sp, #24
    5dac:	mov	r1, r7
    5db0:	str	r0, [sp]
    5db4:	mov	r0, r5
    5db8:	bl	61e8 <eval_string>
    5dbc:	cmp	r0, #0
    5dc0:	bne	5e30 <eval_float+0xa64>
    5dc4:	ldr	r1, [sp, #24]
    5dc8:	cmp	r1, #0
    5dcc:	beq	5f20 <eval_float+0xb54>
    5dd0:	ldr	r0, [sp, #32]
    5dd4:	ldr	r2, [sp, #16]
    5dd8:	mov	r3, #0
    5ddc:	add	r0, r2, r0
    5de0:	mov	r2, r9
    5de4:	bl	0 <coda_ascii_parse_double>
    5de8:	mov	r4, r0
    5dec:	ldr	r0, [sp, #16]
    5df0:	bl	0 <free>
    5df4:	cmn	r4, #1
    5df8:	bgt	5ef8 <eval_float+0xb2c>
    5dfc:	b	5e30 <eval_float+0xa64>
    5e00:	add	r2, sp, #32
    5e04:	mov	r0, r5
    5e08:	mov	r1, r7
    5e0c:	bl	3c6c <eval_integer>
    5e10:	cmp	r0, #0
    5e14:	bne	5e30 <eval_float+0xa64>
    5e18:	b	5414 <eval_float+0x48>
    5e1c:	add	r2, sp, #24
    5e20:	mov	r0, r5
    5e24:	bl	53cc <eval_float>
    5e28:	cmp	r0, #0
    5e2c:	beq	5e6c <eval_float+0xaa0>
    5e30:	mvn	r7, #0
    5e34:	b	5efc <eval_float+0xb30>
    5e38:	vmov.f64	d17, #96	; 0x3f000000  0.5
    5e3c:	vadd.f64	d16, d16, d17
    5e40:	vrintm.f64	d16, d16
    5e44:	b	5ef4 <eval_float+0xb28>
    5e48:	movw	r1, #0
    5e4c:	movt	r1, #0
    5e50:	b	5e5c <eval_float+0xa90>
    5e54:	movw	r1, #0
    5e58:	movt	r1, #0
    5e5c:	mvn	r0, #400	; 0x190
    5e60:	bl	0 <coda_set_error>
    5e64:	mvn	r7, #0
    5e68:	b	5efc <eval_float+0xb30>
    5e6c:	vldr	d1, [sp, #24]
    5e70:	vldr	d0, [sp, #32]
    5e74:	bl	0 <pow>
    5e78:	vstr	d0, [r9]
    5e7c:	b	5ef8 <eval_float+0xb2c>
    5e80:	ldr	r0, [sp, #12]
    5e84:	cmn	r0, #1
    5e88:	ble	5f48 <eval_float+0xb7c>
    5e8c:	cmp	r0, #0
    5e90:	beq	5f78 <eval_float+0xbac>
    5e94:	ldr	r1, [sp, #24]
    5e98:	mov	r2, #0
    5e9c:	add	r0, r1, r0
    5ea0:	ldr	r1, [sp, #4]
    5ea4:	strb	r2, [r1, r0]
    5ea8:	ldr	r0, [sp, #24]
    5eac:	ldr	r1, [sp, #4]
    5eb0:	ldr	r2, [sp, #8]
    5eb4:	add	r0, r1, r0
    5eb8:	ldr	r1, [sp, #32]
    5ebc:	add	r1, r2, r1
    5ec0:	mov	r2, r9
    5ec4:	bl	0 <coda_time_string_to_double>
    5ec8:	mov	r4, r0
    5ecc:	ldr	r0, [sp, #4]
    5ed0:	bl	0 <free>
    5ed4:	ldr	r0, [sp, #8]
    5ed8:	bl	0 <free>
    5edc:	mvn	r7, #0
    5ee0:	cmp	r4, #0
    5ee4:	moveq	r7, #0
    5ee8:	b	5efc <eval_float+0xb30>
    5eec:	vldr	d17, [sp, #32]
    5ef0:	vdiv.f64	d16, d17, d16
    5ef4:	vstr	d16, [r9]
    5ef8:	mov	r7, #0
    5efc:	mov	r0, r7
    5f00:	sub	sp, fp, #40	; 0x28
    5f04:	vpop	{d8}
    5f08:	add	sp, sp, #4
    5f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f10:	vldr	d0, [sp, #32]
    5f14:	bl	0 <fmod>
    5f18:	vstr	d0, [r9]
    5f1c:	b	5ef8 <eval_float+0xb2c>
    5f20:	movw	r1, #0
    5f24:	mvn	r0, #102	; 0x66
    5f28:	movt	r1, #0
    5f2c:	b	5e60 <eval_float+0xa94>
    5f30:	bl	0 <__aeabi_l2d>
    5f34:	vmov	d1, r0, r1
    5f38:	vorr	d0, d8, d8
    5f3c:	bl	0 <pow>
    5f40:	vstr	d0, [r9]
    5f44:	b	5ef8 <eval_float+0xb2c>
    5f48:	movw	r1, #0
    5f4c:	movt	r1, #0
    5f50:	b	5e5c <eval_float+0xa90>
    5f54:	vmov.f64	d16, #112	; 0x3f800000  1.0
    5f58:	rsb	r0, r0, #0
    5f5c:	subs	r0, r0, #1
    5f60:	vmul.f64	d16, d8, d16
    5f64:	bne	5f5c <eval_float+0xb90>
    5f68:	vmov.f64	d17, #112	; 0x3f800000  1.0
    5f6c:	vdiv.f64	d0, d17, d16
    5f70:	vstr	d0, [r9]
    5f74:	b	5ef8 <eval_float+0xb2c>
    5f78:	movw	r1, #0
    5f7c:	movt	r1, #0
    5f80:	b	5e5c <eval_float+0xa90>
    5f84:	movw	r0, #0
    5f88:	movw	r1, #0
    5f8c:	movw	r3, #0
    5f90:	movw	r2, #1909	; 0x775
    5f94:	movt	r0, #0
    5f98:	movt	r1, #0
    5f9c:	movt	r3, #0
    5fa0:	bl	0 <__assert_fail>
    5fa4:	movw	r0, #0
    5fa8:	movw	r1, #0
    5fac:	movw	r3, #0
    5fb0:	movw	r2, #1878	; 0x756
    5fb4:	movt	r0, #0
    5fb8:	movt	r1, #0
    5fbc:	movt	r3, #0
    5fc0:	bl	0 <__assert_fail>
    5fc4:	movw	r0, #0
    5fc8:	movw	r1, #0
    5fcc:	movw	r3, #0
    5fd0:	movw	r2, #1831	; 0x727
    5fd4:	movt	r0, #0
    5fd8:	movt	r1, #0
    5fdc:	movt	r3, #0
    5fe0:	bl	0 <__assert_fail>
    5fe4:	movw	r0, #0
    5fe8:	movw	r1, #0
    5fec:	movw	r3, #0
    5ff0:	movw	r2, #1783	; 0x6f7
    5ff4:	movt	r0, #0
    5ff8:	movt	r1, #0
    5ffc:	movt	r3, #0
    6000:	bl	0 <__assert_fail>
    6004:	movw	r0, #0
    6008:	movw	r1, #0
    600c:	movw	r3, #0
    6010:	movw	r2, #1738	; 0x6ca
    6014:	movt	r0, #0
    6018:	movt	r1, #0
    601c:	movt	r3, #0
    6020:	bl	0 <__assert_fail>
    6024:	movw	r0, #0
    6028:	movw	r1, #0
    602c:	movw	r3, #0
    6030:	movw	r2, #1418	; 0x58a
    6034:	movt	r0, #0
    6038:	movt	r1, #0
    603c:	movt	r3, #0
    6040:	bl	0 <__assert_fail>

00006044 <coda_expression_eval_string>:
    6044:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6048:	add	fp, sp, #24
    604c:	sub	sp, sp, #584	; 0x248
    6050:	mov	r7, r0
    6054:	ldr	r0, [r0, #4]
    6058:	cmp	r0, #3
    605c:	bne	6090 <coda_expression_eval_string+0x4c>
    6060:	mov	r5, r3
    6064:	mov	r8, r2
    6068:	mov	r6, r1
    606c:	cmp	r1, #0
    6070:	beq	60b0 <coda_expression_eval_string+0x6c>
    6074:	add	r0, sp, #8
    6078:	mov	r1, r6
    607c:	mov	r2, #520	; 0x208
    6080:	str	r6, [sp, #8]
    6084:	add	r0, r0, #8
    6088:	bl	0 <memcpy>
    608c:	b	60c4 <coda_expression_eval_string+0x80>
    6090:	movw	r1, #0
    6094:	movt	r1, #0
    6098:	mvn	r0, #99	; 0x63
    609c:	bl	0 <coda_set_error>
    60a0:	mvn	r5, #0
    60a4:	mov	r0, r5
    60a8:	sub	sp, fp, #24
    60ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    60b0:	ldr	r0, [r7, #8]
    60b4:	cmp	r0, #0
    60b8:	beq	6184 <coda_expression_eval_string+0x140>
    60bc:	mov	r0, #0
    60c0:	str	r0, [sp, #8]
    60c4:	add	r4, sp, #8
    60c8:	vmov.i32	q8, #0	; 0x00000000
    60cc:	add	r2, sp, #4
    60d0:	mov	r1, r7
    60d4:	mov	r3, r5
    60d8:	str	r8, [sp]
    60dc:	add	r0, r4, #544	; 0x220
    60e0:	vst1.64	{d16-d17}, [r0]
    60e4:	add	r0, r4, #528	; 0x210
    60e8:	vst1.64	{d16-d17}, [r0]
    60ec:	mov	r0, #0
    60f0:	str	r0, [sp, #568]	; 0x238
    60f4:	mov	r0, r4
    60f8:	bl	61e8 <eval_string>
    60fc:	cmp	r0, #0
    6100:	beq	6134 <coda_expression_eval_string+0xf0>
    6104:	mvn	r5, #0
    6108:	cmp	r6, #0
    610c:	beq	60a4 <coda_expression_eval_string+0x60>
    6110:	add	r4, r4, #8
    6114:	mov	r0, r6
    6118:	mov	r1, r4
    611c:	bl	0 <coda_cursor_compare>
    6120:	cmp	r0, #0
    6124:	beq	60a4 <coda_expression_eval_string+0x60>
    6128:	mov	r0, r4
    612c:	bl	0 <coda_cursor_add_to_error_message>
    6130:	b	60a4 <coda_expression_eval_string+0x60>
    6134:	ldr	r6, [r5]
    6138:	cmp	r6, #1
    613c:	blt	6190 <coda_expression_eval_string+0x14c>
    6140:	ldr	r4, [sp, #4]
    6144:	cmp	r4, #0
    6148:	beq	61ac <coda_expression_eval_string+0x168>
    614c:	add	r0, r6, #1
    6150:	bl	0 <malloc>
    6154:	cmp	r0, #0
    6158:	beq	61bc <coda_expression_eval_string+0x178>
    615c:	ldr	r9, [r8]
    6160:	mov	r2, r6
    6164:	mov	r7, r0
    6168:	add	r1, r9, r4
    616c:	bl	0 <memcpy>
    6170:	mov	r0, r9
    6174:	bl	0 <free>
    6178:	str	r7, [r8]
    617c:	ldr	r6, [r5]
    6180:	b	61b0 <coda_expression_eval_string+0x16c>
    6184:	movw	r1, #0
    6188:	movt	r1, #0
    618c:	b	6098 <coda_expression_eval_string+0x54>
    6190:	ldr	r0, [r8]
    6194:	cmp	r0, #0
    6198:	beq	61a0 <coda_expression_eval_string+0x15c>
    619c:	bl	0 <free>
    61a0:	mov	r5, #0
    61a4:	str	r5, [r8]
    61a8:	b	60a4 <coda_expression_eval_string+0x60>
    61ac:	ldr	r7, [r8]
    61b0:	mov	r5, #0
    61b4:	strb	r5, [r7, r6]
    61b8:	b	60a4 <coda_expression_eval_string+0x60>
    61bc:	movw	r1, #0
    61c0:	movw	r3, #0
    61c4:	movw	r0, #5251	; 0x1483
    61c8:	mov	r2, r6
    61cc:	mvn	r5, #0
    61d0:	str	r0, [sp]
    61d4:	movt	r1, #0
    61d8:	movt	r3, #0
    61dc:	mvn	r0, #0
    61e0:	bl	0 <coda_set_error>
    61e4:	b	60a4 <coda_expression_eval_string+0x60>

000061e8 <eval_string>:
    61e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61ec:	add	fp, sp, #28
    61f0:	sub	sp, sp, #620	; 0x26c
    61f4:	mov	r5, r0
    61f8:	ldr	r0, [r1]
    61fc:	ldr	r8, [fp, #8]
    6200:	mov	r4, r1
    6204:	mov	r9, r3
    6208:	mov	sl, r2
    620c:	sub	r1, r0, #21
    6210:	cmp	r1, #1
    6214:	bhi	6254 <eval_string+0x6c>
    6218:	mov	r7, #0
    621c:	str	r7, [sl]
    6220:	ldr	r5, [r4, #12]
    6224:	cmp	r5, #1
    6228:	str	r5, [r9]
    622c:	blt	6490 <eval_string+0x2a8>
    6230:	add	r0, r5, #1
    6234:	bl	0 <malloc>
    6238:	cmp	r0, #0
    623c:	str	r0, [r8]
    6240:	beq	6498 <eval_string+0x2b0>
    6244:	ldr	r1, [r4, #16]
    6248:	mov	r2, r5
    624c:	bl	0 <memcpy>
    6250:	b	789c <eval_string+0x16b4>
    6254:	sub	r0, r0, #1
    6258:	cmp	r0, #85	; 0x55
    625c:	bhi	7a34 <eval_string+0x184c>
    6260:	add	r1, pc, #0
    6264:	ldr	pc, [r1, r0, lsl #2]
    6268:	.word	0x000063c0
    626c:	.word	0x00007a34
    6270:	.word	0x00006c00
    6274:	.word	0x00007a34
    6278:	.word	0x00007a34
    627c:	.word	0x00007a34
    6280:	.word	0x00007a34
    6284:	.word	0x00006e84
    6288:	.word	0x00006980
    628c:	.word	0x00007a34
    6290:	.word	0x000068a4
    6294:	.word	0x00007a34
    6298:	.word	0x00007a34
    629c:	.word	0x00007a34
    62a0:	.word	0x00007a34
    62a4:	.word	0x000066e0
    62a8:	.word	0x00007a34
    62ac:	.word	0x00007a34
    62b0:	.word	0x00007a34
    62b4:	.word	0x00007a34
    62b8:	.word	0x00007a34
    62bc:	.word	0x00007a34
    62c0:	.word	0x00007a34
    62c4:	.word	0x00007a34
    62c8:	.word	0x00007a34
    62cc:	.word	0x00007a34
    62d0:	.word	0x00007a34
    62d4:	.word	0x000067c8
    62d8:	.word	0x00007a34
    62dc:	.word	0x00007a34
    62e0:	.word	0x00007a34
    62e4:	.word	0x00007a34
    62e8:	.word	0x00007a34
    62ec:	.word	0x00007a34
    62f0:	.word	0x00007a34
    62f4:	.word	0x00007a34
    62f8:	.word	0x00007a34
    62fc:	.word	0x00007a34
    6300:	.word	0x00007a34
    6304:	.word	0x00007a34
    6308:	.word	0x00007a34
    630c:	.word	0x00006614
    6310:	.word	0x00007a34
    6314:	.word	0x00007a34
    6318:	.word	0x00007a34
    631c:	.word	0x00007a34
    6320:	.word	0x00007a34
    6324:	.word	0x00007a34
    6328:	.word	0x00007a34
    632c:	.word	0x00007a34
    6330:	.word	0x00007a34
    6334:	.word	0x00007a34
    6338:	.word	0x00007a34
    633c:	.word	0x00007a34
    6340:	.word	0x000068fc
    6344:	.word	0x00006590
    6348:	.word	0x00006854
    634c:	.word	0x00007a34
    6350:	.word	0x00007a34
    6354:	.word	0x00007a34
    6358:	.word	0x00007a34
    635c:	.word	0x00007a34
    6360:	.word	0x00007a34
    6364:	.word	0x00007a34
    6368:	.word	0x00007a34
    636c:	.word	0x00007a34
    6370:	.word	0x000064bc
    6374:	.word	0x00006528
    6378:	.word	0x00006758
    637c:	.word	0x00007a34
    6380:	.word	0x00007084
    6384:	.word	0x00007a34
    6388:	.word	0x0000665c
    638c:	.word	0x00007a34
    6390:	.word	0x00007168
    6394:	.word	0x00006b88
    6398:	.word	0x00006dbc
    639c:	.word	0x00007a34
    63a0:	.word	0x00007a34
    63a4:	.word	0x000070e4
    63a8:	.word	0x00007a34
    63ac:	.word	0x00007a34
    63b0:	.word	0x00007a34
    63b4:	.word	0x00007a34
    63b8:	.word	0x00007a34
    63bc:	.word	0x00006d50
    63c0:	ldr	r1, [r4, #16]
    63c4:	add	r0, sp, #68	; 0x44
    63c8:	add	r2, sp, #96	; 0x60
    63cc:	add	r3, sp, #80	; 0x50
    63d0:	str	r0, [sp]
    63d4:	mov	r0, r5
    63d8:	bl	61e8 <eval_string>
    63dc:	cmp	r0, #0
    63e0:	bne	7898 <eval_string+0x16b0>
    63e4:	ldr	r1, [r4, #20]
    63e8:	add	r0, sp, #64	; 0x40
    63ec:	add	r2, sp, #88	; 0x58
    63f0:	add	r3, sp, #72	; 0x48
    63f4:	str	r0, [sp]
    63f8:	mov	r0, r5
    63fc:	bl	61e8 <eval_string>
    6400:	cmp	r0, #0
    6404:	bne	689c <eval_string+0x6b4>
    6408:	mov	r0, #0
    640c:	str	r0, [sl]
    6410:	ldr	r5, [sp, #80]	; 0x50
    6414:	ldr	r4, [sp, #72]	; 0x48
    6418:	add	r1, r4, r5
    641c:	cmp	r1, #1
    6420:	str	r1, [r9]
    6424:	blt	75cc <eval_string+0x13e4>
    6428:	add	r9, r1, #1
    642c:	mov	r0, r9
    6430:	bl	0 <malloc>
    6434:	cmp	r0, #0
    6438:	str	r0, [r8]
    643c:	beq	7808 <eval_string+0x1620>
    6440:	mov	r6, r0
    6444:	cmp	r5, #1
    6448:	blt	6464 <eval_string+0x27c>
    644c:	ldr	r0, [sp, #96]	; 0x60
    6450:	ldr	r1, [sp, #68]	; 0x44
    6454:	mov	r2, r5
    6458:	add	r1, r1, r0
    645c:	mov	r0, r6
    6460:	bl	0 <memcpy>
    6464:	cmp	r4, #1
    6468:	blt	75d0 <eval_string+0x13e8>
    646c:	ldr	r1, [sp, #88]	; 0x58
    6470:	ldr	r2, [sp, #64]	; 0x40
    6474:	add	r0, r6, r5
    6478:	add	r1, r2, r1
    647c:	mov	r2, r4
    6480:	bl	0 <memcpy>
    6484:	cmp	r5, #1
    6488:	bge	75d8 <eval_string+0x13f0>
    648c:	b	75e4 <eval_string+0x13fc>
    6490:	str	r7, [r8]
    6494:	b	789c <eval_string+0x16b4>
    6498:	movw	r1, #0
    649c:	movw	r2, #0
    64a0:	mvn	r0, #0
    64a4:	movw	r3, #2845	; 0xb1d
    64a8:	mvn	r7, #0
    64ac:	movt	r1, #0
    64b0:	movt	r2, #0
    64b4:	bl	0 <coda_set_error>
    64b8:	b	789c <eval_string+0x16b4>
    64bc:	ldr	r0, [r5]
    64c0:	cmp	r0, #0
    64c4:	beq	7a54 <eval_string+0x186c>
    64c8:	ldr	r0, [r0]
    64cc:	add	r1, sp, #96	; 0x60
    64d0:	bl	0 <coda_get_product_class>
    64d4:	cmp	r0, #0
    64d8:	bne	7898 <eval_string+0x16b0>
    64dc:	mov	r7, #0
    64e0:	str	r7, [sl]
    64e4:	str	r7, [r9]
    64e8:	ldr	r5, [sp, #96]	; 0x60
    64ec:	cmp	r5, #0
    64f0:	beq	789c <eval_string+0x16b4>
    64f4:	mov	r0, r5
    64f8:	bl	0 <strlen>
    64fc:	mov	r4, r0
    6500:	str	r0, [r9]
    6504:	add	r0, r0, #1
    6508:	bl	0 <malloc>
    650c:	cmp	r0, #0
    6510:	str	r0, [r8]
    6514:	beq	742c <eval_string+0x1244>
    6518:	mov	r1, r5
    651c:	mov	r2, r4
    6520:	bl	0 <memcpy>
    6524:	b	789c <eval_string+0x16b4>
    6528:	ldr	r0, [r5]
    652c:	cmp	r0, #0
    6530:	beq	7a74 <eval_string+0x188c>
    6534:	ldr	r0, [r0]
    6538:	add	r1, sp, #96	; 0x60
    653c:	bl	0 <coda_get_product_format>
    6540:	cmp	r0, #0
    6544:	bne	7898 <eval_string+0x16b0>
    6548:	ldr	r0, [sp, #96]	; 0x60
    654c:	bl	0 <coda_type_get_format_name>
    6550:	mov	r7, #0
    6554:	cmp	r0, #0
    6558:	str	r7, [sl]
    655c:	str	r7, [r9]
    6560:	beq	789c <eval_string+0x16b4>
    6564:	mov	r4, r0
    6568:	bl	0 <strlen>
    656c:	mov	r5, r0
    6570:	str	r0, [r9]
    6574:	add	r0, r0, #1
    6578:	bl	0 <malloc>
    657c:	cmp	r0, #0
    6580:	str	r0, [r8]
    6584:	bne	684c <eval_string+0x664>
    6588:	movw	r0, #3665	; 0xe51
    658c:	b	744c <eval_string+0x1264>
    6590:	ldr	r1, [r4, #16]
    6594:	add	r0, sp, #68	; 0x44
    6598:	add	r2, sp, #96	; 0x60
    659c:	add	r3, sp, #80	; 0x50
    65a0:	str	r0, [sp]
    65a4:	mov	r0, r5
    65a8:	bl	61e8 <eval_string>
    65ac:	cmp	r0, #0
    65b0:	bne	7898 <eval_string+0x16b0>
    65b4:	ldr	r1, [r4, #20]
    65b8:	add	r0, sp, #64	; 0x40
    65bc:	add	r2, sp, #88	; 0x58
    65c0:	add	r3, sp, #72	; 0x48
    65c4:	str	r0, [sp]
    65c8:	mov	r0, r5
    65cc:	bl	61e8 <eval_string>
    65d0:	cmp	r0, #0
    65d4:	bne	689c <eval_string+0x6b4>
    65d8:	ldr	r3, [sp, #80]	; 0x50
    65dc:	ldr	r2, [sp, #72]	; 0x48
    65e0:	ldr	r0, [sp, #64]	; 0x40
    65e4:	ldr	ip, [sp, #88]	; 0x58
    65e8:	ldr	lr, [sp, #68]	; 0x44
    65ec:	ldr	r8, [sp, #96]	; 0x60
    65f0:	mov	r5, #0
    65f4:	cmp	r3, #1
    65f8:	cmpge	r2, #1
    65fc:	bge	7688 <eval_string+0x14a0>
    6600:	cmp	r5, r3
    6604:	bne	7474 <eval_string+0x128c>
    6608:	cmp	r5, r2
    660c:	beq	7494 <eval_string+0x12ac>
    6610:	b	7504 <eval_string+0x131c>
    6614:	ldr	r1, [r4, #16]
    6618:	add	r2, sp, #96	; 0x60
    661c:	mov	r0, r5
    6620:	bl	2728 <eval_boolean>
    6624:	cmp	r0, #0
    6628:	bne	7898 <eval_string+0x16b0>
    662c:	ldr	r0, [sp, #96]	; 0x60
    6630:	mov	r2, sl
    6634:	mov	r3, r9
    6638:	cmp	r0, #0
    663c:	mov	r0, r5
    6640:	ldreq	r1, [r4, #24]
    6644:	ldrne	r1, [r4, #20]
    6648:	str	r8, [sp]
    664c:	bl	61e8 <eval_string>
    6650:	cmp	r0, #0
    6654:	bne	7898 <eval_string+0x16b0>
    6658:	b	7800 <eval_string+0x1618>
    665c:	ldr	r1, [r4, #16]
    6660:	mov	r0, r5
    6664:	mov	r2, sl
    6668:	mov	r3, r9
    666c:	str	r8, [sp]
    6670:	bl	61e8 <eval_string>
    6674:	mvn	r7, #0
    6678:	cmp	r0, #0
    667c:	bne	789c <eval_string+0x16b4>
    6680:	ldr	r0, [r9]
    6684:	mov	r7, #0
    6688:	cmp	r0, #1
    668c:	blt	789c <eval_string+0x16b4>
    6690:	sub	r1, r0, #1
    6694:	ldr	r0, [r8]
    6698:	movw	r3, #19
    669c:	mov	r2, #1
    66a0:	movt	r3, #128	; 0x80
    66a4:	ldr	r6, [sl]
    66a8:	add	r6, r0, r6
    66ac:	ldrb	r6, [r6, r1]
    66b0:	sub	r6, r6, #9
    66b4:	cmp	r6, #23
    66b8:	bhi	789c <eval_string+0x16b4>
    66bc:	tst	r3, r2, lsl r6
    66c0:	beq	789c <eval_string+0x16b4>
    66c4:	str	r1, [r9]
    66c8:	sub	r6, r1, #1
    66cc:	add	r1, r1, #1
    66d0:	cmp	r1, #1
    66d4:	mov	r1, r6
    66d8:	bgt	66a4 <eval_string+0x4bc>
    66dc:	b	789c <eval_string+0x16b4>
    66e0:	mov	r0, #0
    66e4:	str	r0, [sp, #92]	; 0x5c
    66e8:	str	r0, [sp, #88]	; 0x58
    66ec:	mvn	r0, #0
    66f0:	str	r0, [sp, #76]	; 0x4c
    66f4:	str	r0, [sp, #72]	; 0x48
    66f8:	ldr	r0, [r5]
    66fc:	cmp	r0, #0
    6700:	beq	7a94 <eval_string+0x18ac>
    6704:	add	r7, r5, #8
    6708:	add	r0, sp, #96	; 0x60
    670c:	mov	r2, #520	; 0x208
    6710:	mov	r1, r7
    6714:	bl	0 <memcpy>
    6718:	ldr	r1, [r4, #16]
    671c:	mov	r0, r5
    6720:	bl	7c6c <eval_cursor>
    6724:	cmp	r0, #0
    6728:	bne	7898 <eval_string+0x16b0>
    672c:	ldr	r0, [r4, #24]
    6730:	ldr	r1, [r4, #20]
    6734:	cmp	r0, #0
    6738:	beq	72dc <eval_string+0x10f4>
    673c:	add	r2, sp, #88	; 0x58
    6740:	mov	r0, r5
    6744:	bl	3c6c <eval_integer>
    6748:	cmp	r0, #0
    674c:	bne	7898 <eval_string+0x16b0>
    6750:	ldr	r1, [r4, #24]
    6754:	b	72e4 <eval_string+0x10fc>
    6758:	ldr	r0, [r5]
    675c:	cmp	r0, #0
    6760:	beq	7ab4 <eval_string+0x18cc>
    6764:	ldr	r0, [r0]
    6768:	add	r1, sp, #96	; 0x60
    676c:	bl	0 <coda_get_product_type>
    6770:	cmp	r0, #0
    6774:	bne	7898 <eval_string+0x16b0>
    6778:	mov	r7, #0
    677c:	str	r7, [sl]
    6780:	str	r7, [r9]
    6784:	ldr	r4, [sp, #96]	; 0x60
    6788:	cmp	r4, #0
    678c:	beq	789c <eval_string+0x16b4>
    6790:	mov	r0, r4
    6794:	bl	0 <strlen>
    6798:	add	r5, r0, #1
    679c:	mov	r6, r0
    67a0:	str	r0, [r9]
    67a4:	mov	r0, r5
    67a8:	bl	0 <malloc>
    67ac:	cmp	r0, #0
    67b0:	str	r0, [r8]
    67b4:	beq	7448 <eval_string+0x1260>
    67b8:	mov	r1, r4
    67bc:	mov	r2, r6
    67c0:	bl	0 <memcpy>
    67c4:	b	789c <eval_string+0x16b4>
    67c8:	ldr	r0, [r5]
    67cc:	cmp	r0, #0
    67d0:	beq	7ad4 <eval_string+0x18ec>
    67d4:	ldr	r0, [r0]
    67d8:	add	r1, sp, #96	; 0x60
    67dc:	bl	0 <coda_get_product_filename>
    67e0:	cmp	r0, #0
    67e4:	bne	7898 <eval_string+0x16b0>
    67e8:	ldr	r0, [sp, #96]	; 0x60
    67ec:	b	67f8 <eval_string+0x610>
    67f0:	add	r0, r0, #1
    67f4:	str	r0, [sp, #96]	; 0x60
    67f8:	mov	r4, r0
    67fc:	b	6808 <eval_string+0x620>
    6800:	add	r0, r0, #1
    6804:	str	r0, [sp, #96]	; 0x60
    6808:	ldrb	r1, [r0]
    680c:	cmp	r1, #47	; 0x2f
    6810:	cmpne	r1, #92	; 0x5c
    6814:	beq	67f0 <eval_string+0x608>
    6818:	cmp	r1, #0
    681c:	bne	6800 <eval_string+0x618>
    6820:	mov	r7, #0
    6824:	mov	r0, r4
    6828:	str	r7, [sl]
    682c:	bl	0 <strlen>
    6830:	mov	r5, r0
    6834:	str	r0, [r9]
    6838:	add	r0, r0, #1
    683c:	bl	0 <malloc>
    6840:	cmp	r0, #0
    6844:	str	r0, [r8]
    6848:	beq	7334 <eval_string+0x114c>
    684c:	mov	r1, r4
    6850:	b	6248 <eval_string+0x60>
    6854:	ldr	r1, [r4, #16]
    6858:	add	r0, sp, #68	; 0x44
    685c:	add	r2, sp, #96	; 0x60
    6860:	add	r3, sp, #80	; 0x50
    6864:	str	r0, [sp]
    6868:	mov	r0, r5
    686c:	bl	61e8 <eval_string>
    6870:	cmp	r0, #0
    6874:	bne	7898 <eval_string+0x16b0>
    6878:	ldr	r1, [r4, #20]
    687c:	add	r0, sp, #64	; 0x40
    6880:	add	r2, sp, #88	; 0x58
    6884:	add	r3, sp, #72	; 0x48
    6888:	str	r0, [sp]
    688c:	mov	r0, r5
    6890:	bl	61e8 <eval_string>
    6894:	cmp	r0, #0
    6898:	beq	726c <eval_string+0x1084>
    689c:	ldr	r0, [sp, #68]	; 0x44
    68a0:	b	7894 <eval_string+0x16ac>
    68a4:	ldr	r0, [r5]
    68a8:	cmp	r0, #0
    68ac:	beq	7af4 <eval_string+0x190c>
    68b0:	add	r7, r5, #8
    68b4:	add	r0, sp, #96	; 0x60
    68b8:	mov	r2, #520	; 0x208
    68bc:	mov	r1, r7
    68c0:	bl	0 <memcpy>
    68c4:	ldr	r1, [r4, #16]
    68c8:	mov	r0, r5
    68cc:	bl	7c6c <eval_cursor>
    68d0:	cmp	r0, #0
    68d4:	bne	7898 <eval_string+0x16b0>
    68d8:	ldr	r1, [r4, #20]
    68dc:	mov	r0, r5
    68e0:	mov	r2, sl
    68e4:	mov	r3, r9
    68e8:	str	r8, [sp]
    68ec:	bl	61e8 <eval_string>
    68f0:	cmp	r0, #0
    68f4:	bne	7898 <eval_string+0x16b0>
    68f8:	b	77f0 <eval_string+0x1608>
    68fc:	ldr	r1, [r4, #16]
    6900:	mov	r0, r5
    6904:	mov	r2, sl
    6908:	mov	r3, r9
    690c:	str	r8, [sp]
    6910:	bl	61e8 <eval_string>
    6914:	mvn	r7, #0
    6918:	cmp	r0, #0
    691c:	bne	789c <eval_string+0x16b4>
    6920:	ldr	r0, [r9]
    6924:	mov	r7, #0
    6928:	cmp	r0, #1
    692c:	blt	789c <eval_string+0x16b4>
    6930:	ldr	r6, [sl]
    6934:	ldr	r1, [r8]
    6938:	movw	r3, #19
    693c:	mov	r2, #1
    6940:	movt	r3, #128	; 0x80
    6944:	ldrb	r6, [r1, r6]
    6948:	sub	r6, r6, #9
    694c:	cmp	r6, #23
    6950:	bhi	789c <eval_string+0x16b4>
    6954:	tst	r3, r2, lsl r6
    6958:	beq	789c <eval_string+0x16b4>
    695c:	sub	r0, r0, #1
    6960:	str	r0, [r9]
    6964:	ldr	r0, [sl]
    6968:	add	r6, r0, #1
    696c:	str	r6, [sl]
    6970:	ldr	r0, [r9]
    6974:	cmp	r0, #0
    6978:	bgt	6944 <eval_string+0x75c>
    697c:	b	789c <eval_string+0x16b4>
    6980:	ldr	r0, [r5]
    6984:	cmp	r0, #0
    6988:	beq	7b14 <eval_string+0x192c>
    698c:	add	r6, r5, #8
    6990:	add	r0, sp, #96	; 0x60
    6994:	mov	r2, #520	; 0x208
    6998:	mov	r1, r6
    699c:	bl	0 <memcpy>
    69a0:	ldr	r1, [r4, #16]
    69a4:	mov	r0, r5
    69a8:	bl	7c6c <eval_cursor>
    69ac:	cmp	r0, #0
    69b0:	bne	7898 <eval_string+0x16b0>
    69b4:	add	r1, sp, #88	; 0x58
    69b8:	mov	r0, r6
    69bc:	bl	0 <coda_cursor_get_num_elements>
    69c0:	cmp	r0, #0
    69c4:	bne	7898 <eval_string+0x16b0>
    69c8:	mov	r7, #0
    69cc:	str	r7, [sl]
    69d0:	str	r7, [r9]
    69d4:	str	r7, [r8]
    69d8:	ldr	r0, [sp, #88]	; 0x58
    69dc:	cmp	r0, #1
    69e0:	blt	7070 <eval_string+0xe88>
    69e4:	mov	r0, r6
    69e8:	bl	0 <coda_cursor_goto_first_array_element>
    69ec:	cmp	r0, #0
    69f0:	bne	7898 <eval_string+0x16b0>
    69f4:	ldr	r0, [sp, #88]	; 0x58
    69f8:	cmp	r0, #1
    69fc:	blt	7070 <eval_string+0xe88>
    6a00:	mov	r1, #0
    6a04:	str	r6, [sp, #16]
    6a08:	str	r1, [sp, #36]	; 0x24
    6a0c:	ldr	r1, [r4, #20]
    6a10:	add	r0, sp, #68	; 0x44
    6a14:	add	r2, sp, #80	; 0x50
    6a18:	add	r3, sp, #72	; 0x48
    6a1c:	str	r0, [sp]
    6a20:	mov	r0, r5
    6a24:	bl	61e8 <eval_string>
    6a28:	cmp	r0, #0
    6a2c:	bne	7898 <eval_string+0x16b0>
    6a30:	ldr	r0, [r8]
    6a34:	ldr	r3, [r9]
    6a38:	ldr	r2, [sp, #80]	; 0x50
    6a3c:	mov	ip, #0
    6a40:	str	r0, [sp, #24]
    6a44:	ldr	r0, [sl]
    6a48:	str	r2, [sp, #28]
    6a4c:	str	r0, [sp, #20]
    6a50:	ldr	r0, [sp, #68]	; 0x44
    6a54:	str	r0, [sp, #32]
    6a58:	ldr	r0, [sp, #72]	; 0x48
    6a5c:	cmp	r0, #1
    6a60:	cmpge	r3, #1
    6a64:	bge	6af8 <eval_string+0x910>
    6a68:	cmp	ip, r0
    6a6c:	bne	6a88 <eval_string+0x8a0>
    6a70:	ldr	r8, [fp, #8]
    6a74:	ldr	r6, [sp, #16]
    6a78:	ldr	r1, [sp, #32]
    6a7c:	cmp	ip, r3
    6a80:	beq	6ac4 <eval_string+0x8dc>
    6a84:	b	6ad8 <eval_string+0x8f0>
    6a88:	ldr	r8, [fp, #8]
    6a8c:	ldr	r6, [sp, #16]
    6a90:	ldr	r1, [sp, #32]
    6a94:	cmp	ip, r3
    6a98:	beq	6ac4 <eval_string+0x8dc>
    6a9c:	ldr	r2, [sp, #20]
    6aa0:	ldr	r6, [sp, #24]
    6aa4:	add	r2, ip, r2
    6aa8:	ldrb	r2, [r6, r2]
    6aac:	ldr	r6, [sp, #28]
    6ab0:	add	r6, ip, r6
    6ab4:	ldrb	r6, [r1, r6]
    6ab8:	cmp	r6, r2
    6abc:	ldr	r6, [sp, #16]
    6ac0:	bls	6ad8 <eval_string+0x8f0>
    6ac4:	cmp	r0, #1
    6ac8:	blt	6b48 <eval_string+0x960>
    6acc:	mov	r0, r1
    6ad0:	bl	0 <free>
    6ad4:	b	6b48 <eval_string+0x960>
    6ad8:	cmp	r3, #1
    6adc:	blt	6b38 <eval_string+0x950>
    6ae0:	mov	r0, r8
    6ae4:	bl	0 <free>
    6ae8:	ldr	r1, [sp, #68]	; 0x44
    6aec:	ldr	r0, [sp, #72]	; 0x48
    6af0:	ldr	r2, [sp, #80]	; 0x50
    6af4:	b	6b3c <eval_string+0x954>
    6af8:	ldr	r2, [sp, #28]
    6afc:	ldr	r1, [sp, #32]
    6b00:	ldr	r6, [sp, #24]
    6b04:	mov	ip, #0
    6b08:	add	r2, r1, r2
    6b0c:	ldr	r1, [sp, #20]
    6b10:	add	lr, r6, r1
    6b14:	ldrb	r8, [lr, ip]
    6b18:	ldrb	r6, [r2, ip]
    6b1c:	cmp	r6, r8
    6b20:	bne	6a68 <eval_string+0x880>
    6b24:	add	ip, ip, #1
    6b28:	cmp	ip, r0
    6b2c:	cmplt	ip, r3
    6b30:	blt	6b14 <eval_string+0x92c>
    6b34:	b	6a68 <eval_string+0x880>
    6b38:	ldr	r2, [sp, #28]
    6b3c:	str	r2, [sl]
    6b40:	str	r0, [r9]
    6b44:	str	r1, [r8]
    6b48:	ldr	r0, [sp, #88]	; 0x58
    6b4c:	ldr	r2, [sp, #36]	; 0x24
    6b50:	sub	r1, r0, #1
    6b54:	cmp	r2, r1
    6b58:	mov	r1, r2
    6b5c:	bge	6b78 <eval_string+0x990>
    6b60:	mov	r0, r6
    6b64:	bl	0 <coda_cursor_goto_next_array_element>
    6b68:	cmp	r0, #0
    6b6c:	bne	7898 <eval_string+0x16b0>
    6b70:	ldr	r0, [sp, #88]	; 0x58
    6b74:	ldr	r1, [sp, #36]	; 0x24
    6b78:	add	r1, r1, #1
    6b7c:	cmp	r1, r0
    6b80:	blt	6a08 <eval_string+0x820>
    6b84:	b	7070 <eval_string+0xe88>
    6b88:	ldr	r1, [r4, #16]
    6b8c:	add	r2, sp, #96	; 0x60
    6b90:	mov	r0, r5
    6b94:	bl	53cc <eval_float>
    6b98:	cmp	r0, #0
    6b9c:	bne	7898 <eval_string+0x16b0>
    6ba0:	ldr	r1, [r4, #20]
    6ba4:	cmp	r1, #0
    6ba8:	beq	733c <eval_string+0x1154>
    6bac:	add	r0, sp, #72	; 0x48
    6bb0:	add	r2, sp, #88	; 0x58
    6bb4:	add	r3, sp, #80	; 0x50
    6bb8:	str	r0, [sp]
    6bbc:	mov	r0, r5
    6bc0:	bl	61e8 <eval_string>
    6bc4:	cmp	r0, #0
    6bc8:	bne	7898 <eval_string+0x16b0>
    6bcc:	ldr	r0, [sp, #80]	; 0x50
    6bd0:	cmn	r0, #1
    6bd4:	ble	7834 <eval_string+0x164c>
    6bd8:	cmp	r0, #0
    6bdc:	beq	78a8 <eval_string+0x16c0>
    6be0:	ldr	r1, [sp, #88]	; 0x58
    6be4:	mov	r2, #0
    6be8:	add	r0, r1, r0
    6bec:	ldr	r1, [sp, #72]	; 0x48
    6bf0:	strb	r2, [r1, r0]
    6bf4:	ldr	r0, [sp, #80]	; 0x50
    6bf8:	add	r0, r0, #1
    6bfc:	b	735c <eval_string+0x1174>
    6c00:	ldr	r0, [r5]
    6c04:	cmp	r0, #0
    6c08:	beq	7b34 <eval_string+0x194c>
    6c0c:	add	r6, r5, #8
    6c10:	add	r0, sp, #96	; 0x60
    6c14:	mov	r2, #520	; 0x208
    6c18:	mov	r1, r6
    6c1c:	bl	0 <memcpy>
    6c20:	ldr	r1, [r4, #16]
    6c24:	mov	r0, r5
    6c28:	bl	7c6c <eval_cursor>
    6c2c:	cmp	r0, #0
    6c30:	bne	7898 <eval_string+0x16b0>
    6c34:	add	r1, sp, #88	; 0x58
    6c38:	mov	r0, r6
    6c3c:	bl	0 <coda_cursor_get_num_elements>
    6c40:	cmp	r0, #0
    6c44:	bne	7898 <eval_string+0x16b0>
    6c48:	mov	r7, #0
    6c4c:	str	r6, [sp, #36]	; 0x24
    6c50:	str	r7, [sl]
    6c54:	str	r7, [r9]
    6c58:	str	r7, [r8]
    6c5c:	ldr	r0, [sp, #88]	; 0x58
    6c60:	cmp	r0, #1
    6c64:	blt	6d44 <eval_string+0xb5c>
    6c68:	ldr	r0, [sp, #36]	; 0x24
    6c6c:	bl	0 <coda_cursor_goto_first_array_element>
    6c70:	cmp	r0, #0
    6c74:	bne	7898 <eval_string+0x16b0>
    6c78:	ldr	r0, [sp, #88]	; 0x58
    6c7c:	cmp	r0, #1
    6c80:	blt	6d44 <eval_string+0xb5c>
    6c84:	mov	r6, #0
    6c88:	ldr	r1, [r4, #20]
    6c8c:	add	r0, sp, #68	; 0x44
    6c90:	add	r2, sp, #80	; 0x50
    6c94:	add	r3, sp, #72	; 0x48
    6c98:	str	r0, [sp]
    6c9c:	mov	r0, r5
    6ca0:	bl	61e8 <eval_string>
    6ca4:	cmp	r0, #0
    6ca8:	bne	7898 <eval_string+0x16b0>
    6cac:	ldr	r0, [sp, #72]	; 0x48
    6cb0:	cmp	r0, #1
    6cb4:	blt	6d14 <eval_string+0xb2c>
    6cb8:	ldr	r1, [r9]
    6cbc:	add	r0, r0, r1
    6cc0:	add	r1, r0, #1
    6cc4:	ldr	r0, [r8]
    6cc8:	bl	0 <realloc>
    6ccc:	mov	sl, r0
    6cd0:	ldr	r0, [r9]
    6cd4:	cmp	sl, #0
    6cd8:	beq	7950 <eval_string+0x1768>
    6cdc:	ldr	r2, [sp, #68]	; 0x44
    6ce0:	ldr	r1, [sp, #80]	; 0x50
    6ce4:	add	r0, sl, r0
    6ce8:	str	r2, [sp, #32]
    6cec:	add	r1, r2, r1
    6cf0:	ldr	r2, [sp, #72]	; 0x48
    6cf4:	bl	0 <memcpy>
    6cf8:	ldr	r0, [sp, #32]
    6cfc:	bl	0 <free>
    6d00:	ldr	r0, [r9]
    6d04:	ldr	r1, [sp, #72]	; 0x48
    6d08:	add	r0, r0, r1
    6d0c:	str	r0, [r9]
    6d10:	str	sl, [r8]
    6d14:	ldr	r0, [sp, #88]	; 0x58
    6d18:	sub	r1, r0, #1
    6d1c:	cmp	r6, r1
    6d20:	bge	6d38 <eval_string+0xb50>
    6d24:	ldr	r0, [sp, #36]	; 0x24
    6d28:	bl	0 <coda_cursor_goto_next_array_element>
    6d2c:	cmp	r0, #0
    6d30:	bne	7898 <eval_string+0x16b0>
    6d34:	ldr	r0, [sp, #88]	; 0x58
    6d38:	add	r6, r6, #1
    6d3c:	cmp	r6, r0
    6d40:	blt	6c88 <eval_string+0xaa0>
    6d44:	ldr	r0, [sp, #36]	; 0x24
    6d48:	add	r1, sp, #96	; 0x60
    6d4c:	b	7078 <eval_string+0xe90>
    6d50:	ldr	r0, [r4, #12]
    6d54:	ldr	r1, [r4, #16]
    6d58:	ldrb	r0, [r0]
    6d5c:	add	r6, r5, r0, lsl #3
    6d60:	ldr	r0, [r6, #-312]!	; 0xfffffec8
    6d64:	ldr	r8, [r6, #4]
    6d68:	str	r0, [sp, #36]	; 0x24
    6d6c:	mov	r0, r5
    6d70:	mov	r2, r6
    6d74:	bl	3c6c <eval_integer>
    6d78:	mvn	r7, #0
    6d7c:	cmp	r0, #0
    6d80:	bne	789c <eval_string+0x16b4>
    6d84:	ldr	r0, [fp, #8]
    6d88:	ldr	r1, [r4, #20]
    6d8c:	mov	r2, sl
    6d90:	mov	r3, r9
    6d94:	str	r8, [sp, #32]
    6d98:	str	r0, [sp]
    6d9c:	mov	r0, r5
    6da0:	bl	61e8 <eval_string>
    6da4:	cmp	r0, #0
    6da8:	bne	789c <eval_string+0x16b4>
    6dac:	ldr	r0, [sp, #36]	; 0x24
    6db0:	ldr	r1, [sp, #32]
    6db4:	strd	r0, [r6]
    6db8:	b	7800 <eval_string+0x1618>
    6dbc:	ldr	r1, [r4, #16]
    6dc0:	add	r2, sp, #96	; 0x60
    6dc4:	mov	r0, r5
    6dc8:	bl	3c6c <eval_integer>
    6dcc:	mvn	r7, #0
    6dd0:	cmp	r0, #0
    6dd4:	bne	789c <eval_string+0x16b4>
    6dd8:	ldr	r0, [sp, #100]	; 0x64
    6ddc:	cmn	r0, #1
    6de0:	ble	73a0 <eval_string+0x11b8>
    6de4:	ldr	r1, [r4, #20]
    6de8:	add	r2, sp, #88	; 0x58
    6dec:	mov	r0, r5
    6df0:	bl	3c6c <eval_integer>
    6df4:	cmp	r0, #0
    6df8:	bne	789c <eval_string+0x16b4>
    6dfc:	ldr	r1, [sp, #88]	; 0x58
    6e00:	ldr	r0, [sp, #92]	; 0x5c
    6e04:	orrs	r1, r1, r0
    6e08:	beq	7840 <eval_string+0x1658>
    6e0c:	cmn	r0, #1
    6e10:	ble	78bc <eval_string+0x16d4>
    6e14:	ldr	r1, [r4, #24]
    6e18:	mov	r0, r5
    6e1c:	mov	r2, sl
    6e20:	mov	r3, r9
    6e24:	str	r8, [sp]
    6e28:	bl	61e8 <eval_string>
    6e2c:	cmp	r0, #0
    6e30:	bne	789c <eval_string+0x16b4>
    6e34:	ldr	r1, [r9]
    6e38:	cmp	r1, #0
    6e3c:	beq	7800 <eval_string+0x1618>
    6e40:	ldr	r0, [sp, #96]	; 0x60
    6e44:	ldr	r2, [sp, #100]	; 0x64
    6e48:	subs	r3, r0, r1
    6e4c:	sbcs	r1, r2, r1, asr #31
    6e50:	bge	797c <eval_string+0x1794>
    6e54:	ldr	r1, [sl]
    6e58:	add	r1, r1, r0
    6e5c:	str	r1, [sl]
    6e60:	ldr	r1, [r9]
    6e64:	sub	r1, r1, r0
    6e68:	str	r1, [r9]
    6e6c:	ldr	r0, [sp, #88]	; 0x58
    6e70:	ldr	r2, [sp, #92]	; 0x5c
    6e74:	subs	r3, r0, r1
    6e78:	sbcs	r1, r2, r1, asr #31
    6e7c:	strlt	r0, [r9]
    6e80:	b	7800 <eval_string+0x1618>
    6e84:	ldr	r0, [r5]
    6e88:	cmp	r0, #0
    6e8c:	beq	7b54 <eval_string+0x196c>
    6e90:	add	r6, r5, #8
    6e94:	add	r0, sp, #96	; 0x60
    6e98:	mov	r2, #520	; 0x208
    6e9c:	mov	r1, r6
    6ea0:	bl	0 <memcpy>
    6ea4:	ldr	r1, [r4, #16]
    6ea8:	mov	r0, r5
    6eac:	bl	7c6c <eval_cursor>
    6eb0:	cmp	r0, #0
    6eb4:	bne	7898 <eval_string+0x16b0>
    6eb8:	add	r1, sp, #88	; 0x58
    6ebc:	mov	r0, r6
    6ec0:	bl	0 <coda_cursor_get_num_elements>
    6ec4:	cmp	r0, #0
    6ec8:	bne	7898 <eval_string+0x16b0>
    6ecc:	mov	r7, #0
    6ed0:	str	r7, [sl]
    6ed4:	str	r7, [r9]
    6ed8:	str	r7, [r8]
    6edc:	ldr	r0, [sp, #88]	; 0x58
    6ee0:	cmp	r0, #1
    6ee4:	blt	7070 <eval_string+0xe88>
    6ee8:	mov	r0, r6
    6eec:	bl	0 <coda_cursor_goto_first_array_element>
    6ef0:	cmp	r0, #0
    6ef4:	bne	7898 <eval_string+0x16b0>
    6ef8:	ldr	r0, [sp, #88]	; 0x58
    6efc:	cmp	r0, #1
    6f00:	blt	7070 <eval_string+0xe88>
    6f04:	mov	r1, #0
    6f08:	str	r6, [sp, #20]
    6f0c:	str	r1, [sp, #36]	; 0x24
    6f10:	ldr	r1, [r4, #20]
    6f14:	add	r0, sp, #68	; 0x44
    6f18:	add	r2, sp, #80	; 0x50
    6f1c:	add	r3, sp, #72	; 0x48
    6f20:	str	r0, [sp]
    6f24:	mov	r0, r5
    6f28:	bl	61e8 <eval_string>
    6f2c:	cmp	r0, #0
    6f30:	bne	7898 <eval_string+0x16b0>
    6f34:	ldr	r0, [r8]
    6f38:	ldr	r2, [sp, #72]	; 0x48
    6f3c:	ldr	r1, [r9]
    6f40:	ldr	r3, [sp, #80]	; 0x50
    6f44:	mov	ip, #0
    6f48:	str	r0, [sp, #32]
    6f4c:	ldr	r0, [sl]
    6f50:	cmp	r2, #1
    6f54:	str	r3, [sp, #28]
    6f58:	cmpge	r1, #1
    6f5c:	str	r0, [sp, #24]
    6f60:	ldr	r0, [sp, #68]	; 0x44
    6f64:	bge	6fdc <eval_string+0xdf4>
    6f68:	cmp	ip, r2
    6f6c:	bne	6f88 <eval_string+0xda0>
    6f70:	ldr	r8, [fp, #8]
    6f74:	ldr	r6, [sp, #20]
    6f78:	cmp	r2, #1
    6f7c:	blt	7034 <eval_string+0xe4c>
    6f80:	bl	0 <free>
    6f84:	b	7034 <eval_string+0xe4c>
    6f88:	cmp	ip, r1
    6f8c:	beq	6fb4 <eval_string+0xdcc>
    6f90:	ldr	r3, [sp, #24]
    6f94:	ldr	r6, [sp, #32]
    6f98:	add	r3, ip, r3
    6f9c:	ldrb	r3, [r6, r3]
    6fa0:	ldr	r6, [sp, #28]
    6fa4:	add	r6, ip, r6
    6fa8:	ldrb	r6, [r0, r6]
    6fac:	cmp	r6, r3
    6fb0:	bls	6f70 <eval_string+0xd88>
    6fb4:	ldr	r8, [fp, #8]
    6fb8:	cmp	r1, #1
    6fbc:	blt	7020 <eval_string+0xe38>
    6fc0:	ldr	r0, [sp, #32]
    6fc4:	bl	0 <free>
    6fc8:	ldr	r0, [sp, #68]	; 0x44
    6fcc:	ldr	r2, [sp, #72]	; 0x48
    6fd0:	ldr	r1, [sp, #80]	; 0x50
    6fd4:	ldr	r6, [sp, #20]
    6fd8:	b	7028 <eval_string+0xe40>
    6fdc:	ldr	r3, [sp, #28]
    6fe0:	mov	ip, r2
    6fe4:	ldr	r6, [sp, #32]
    6fe8:	ldr	r2, [sp, #24]
    6fec:	add	lr, r6, r2
    6ff0:	mov	r2, ip
    6ff4:	add	r3, r0, r3
    6ff8:	mov	ip, #0
    6ffc:	ldrb	r8, [lr, ip]
    7000:	ldrb	r6, [r3, ip]
    7004:	cmp	r6, r8
    7008:	bne	6f68 <eval_string+0xd80>
    700c:	add	ip, ip, #1
    7010:	cmp	ip, r2
    7014:	cmplt	ip, r1
    7018:	blt	6ffc <eval_string+0xe14>
    701c:	b	6f68 <eval_string+0xd80>
    7020:	ldr	r6, [sp, #20]
    7024:	ldr	r1, [sp, #28]
    7028:	str	r1, [sl]
    702c:	str	r2, [r9]
    7030:	str	r0, [r8]
    7034:	ldr	r0, [sp, #88]	; 0x58
    7038:	ldr	r2, [sp, #36]	; 0x24
    703c:	sub	r1, r0, #1
    7040:	cmp	r2, r1
    7044:	mov	r1, r2
    7048:	bge	7064 <eval_string+0xe7c>
    704c:	mov	r0, r6
    7050:	bl	0 <coda_cursor_goto_next_array_element>
    7054:	cmp	r0, #0
    7058:	bne	7898 <eval_string+0x16b0>
    705c:	ldr	r0, [sp, #88]	; 0x58
    7060:	ldr	r1, [sp, #36]	; 0x24
    7064:	add	r1, r1, #1
    7068:	cmp	r1, r0
    706c:	blt	6f0c <eval_string+0xd24>
    7070:	add	r1, sp, #96	; 0x60
    7074:	mov	r0, r6
    7078:	mov	r2, #520	; 0x208
    707c:	bl	0 <memcpy>
    7080:	b	789c <eval_string+0x16b4>
    7084:	mov	r0, #0
    7088:	add	r2, sp, #56	; 0x38
    708c:	add	r3, sp, #52	; 0x34
    7090:	str	r0, [sp, #48]	; 0x30
    7094:	add	r0, sp, #48	; 0x30
    7098:	ldr	r1, [r4, #16]
    709c:	str	r0, [sp]
    70a0:	mov	r0, r5
    70a4:	bl	61e8 <eval_string>
    70a8:	cmp	r0, #0
    70ac:	bne	7898 <eval_string+0x16b0>
    70b0:	ldr	r1, [r4, #20]
    70b4:	add	r0, sp, #60	; 0x3c
    70b8:	add	r2, sp, #68	; 0x44
    70bc:	add	r3, sp, #64	; 0x40
    70c0:	str	r0, [sp]
    70c4:	mov	r0, r5
    70c8:	bl	61e8 <eval_string>
    70cc:	cmp	r0, #0
    70d0:	beq	73b4 <eval_string+0x11cc>
    70d4:	ldr	r0, [sp, #48]	; 0x30
    70d8:	cmp	r0, #0
    70dc:	bne	7894 <eval_string+0x16ac>
    70e0:	b	7898 <eval_string+0x16b0>
    70e4:	ldr	r1, [r4, #16]
    70e8:	mov	r0, r5
    70ec:	mov	r2, sl
    70f0:	mov	r3, r9
    70f4:	str	r8, [sp]
    70f8:	bl	61e8 <eval_string>
    70fc:	mvn	r7, #0
    7100:	cmp	r0, #0
    7104:	bne	789c <eval_string+0x16b4>
    7108:	ldr	r1, [r9]
    710c:	mov	r7, #0
    7110:	cmp	r1, #1
    7114:	blt	789c <eval_string+0x16b4>
    7118:	ldr	r6, [sl]
    711c:	ldr	r2, [r8]
    7120:	movw	r0, #19
    7124:	mov	r3, #1
    7128:	movt	r0, #128	; 0x80
    712c:	ldrb	r6, [r2, r6]
    7130:	sub	r6, r6, #9
    7134:	cmp	r6, #23
    7138:	bhi	73e4 <eval_string+0x11fc>
    713c:	tst	r0, r3, lsl r6
    7140:	beq	73e4 <eval_string+0x11fc>
    7144:	sub	r1, r1, #1
    7148:	str	r1, [r9]
    714c:	ldr	r1, [sl]
    7150:	add	r6, r1, #1
    7154:	str	r6, [sl]
    7158:	ldr	r1, [r9]
    715c:	cmp	r1, #0
    7160:	bgt	712c <eval_string+0xf44>
    7164:	b	789c <eval_string+0x16b4>
    7168:	ldr	r6, [r4, #16]
    716c:	ldr	r0, [r6, #4]
    7170:	cmp	r0, #4
    7174:	bne	7214 <eval_string+0x102c>
    7178:	ldr	r0, [r5]
    717c:	cmp	r0, #0
    7180:	beq	7b74 <eval_string+0x198c>
    7184:	add	r7, r5, #8
    7188:	add	r0, sp, #96	; 0x60
    718c:	mov	r2, #520	; 0x208
    7190:	mov	r1, r7
    7194:	bl	0 <memcpy>
    7198:	mov	r0, r5
    719c:	mov	r1, r6
    71a0:	bl	7c6c <eval_cursor>
    71a4:	cmp	r0, #0
    71a8:	bne	7898 <eval_string+0x16b0>
    71ac:	mov	r0, #0
    71b0:	mov	r1, r9
    71b4:	str	r0, [sl]
    71b8:	mov	r0, r7
    71bc:	bl	0 <coda_cursor_get_string_length>
    71c0:	cmp	r0, #0
    71c4:	bne	7898 <eval_string+0x16b0>
    71c8:	ldr	r1, [r4, #20]
    71cc:	cmp	r1, #0
    71d0:	beq	7854 <eval_string+0x166c>
    71d4:	add	r2, sp, #88	; 0x58
    71d8:	mov	r0, r5
    71dc:	bl	3c6c <eval_integer>
    71e0:	cmp	r0, #0
    71e4:	bne	7898 <eval_string+0x16b0>
    71e8:	ldr	r4, [r9]
    71ec:	ldr	r0, [sp, #88]	; 0x58
    71f0:	ldr	r1, [sp, #92]	; 0x5c
    71f4:	subs	r2, r0, r4
    71f8:	sbcs	r1, r1, r4, asr #31
    71fc:	movlt	r4, r0
    7200:	strlt	r0, [r9]
    7204:	cmp	r4, #1
    7208:	bge	7860 <eval_string+0x1678>
    720c:	mov	r0, #0
    7210:	b	77ec <eval_string+0x1604>
    7214:	add	r2, sp, #88	; 0x58
    7218:	mov	r0, r5
    721c:	mov	r1, r6
    7220:	bl	3c6c <eval_integer>
    7224:	cmp	r0, #0
    7228:	bne	7898 <eval_string+0x16b0>
    722c:	ldr	r0, [sp, #88]	; 0x58
    7230:	ldr	r1, [sp, #92]	; 0x5c
    7234:	add	r4, sp, #96	; 0x60
    7238:	mov	r2, r4
    723c:	bl	0 <coda_str64>
    7240:	mov	r0, r4
    7244:	bl	0 <strdup>
    7248:	cmp	r0, #0
    724c:	str	r0, [r8]
    7250:	beq	74b4 <eval_string+0x12cc>
    7254:	mov	r7, #0
    7258:	add	r0, sp, #96	; 0x60
    725c:	str	r7, [sl]
    7260:	bl	0 <strlen>
    7264:	str	r0, [r9]
    7268:	b	789c <eval_string+0x16b4>
    726c:	ldr	r3, [sp, #80]	; 0x50
    7270:	ldr	r2, [sp, #72]	; 0x48
    7274:	ldr	r0, [sp, #64]	; 0x40
    7278:	ldr	ip, [sp, #88]	; 0x58
    727c:	ldr	lr, [sp, #68]	; 0x44
    7280:	ldr	r8, [sp, #96]	; 0x60
    7284:	mov	r5, #0
    7288:	cmp	r3, #1
    728c:	cmpge	r2, #1
    7290:	bge	76b8 <eval_string+0x14d0>
    7294:	cmp	r5, r3
    7298:	beq	7494 <eval_string+0x12ac>
    729c:	cmp	r5, r2
    72a0:	beq	72bc <eval_string+0x10d4>
    72a4:	add	r1, r5, ip
    72a8:	add	r4, r5, r8
    72ac:	ldrb	r1, [r0, r1]
    72b0:	ldrb	r4, [lr, r4]
    72b4:	cmp	r4, r1
    72b8:	bls	7494 <eval_string+0x12ac>
    72bc:	ldr	r1, [fp, #8]
    72c0:	cmp	r3, #1
    72c4:	str	ip, [sl]
    72c8:	str	r2, [r9]
    72cc:	str	r0, [r1]
    72d0:	blt	7800 <eval_string+0x1618>
    72d4:	mov	r0, lr
    72d8:	b	74ac <eval_string+0x12c4>
    72dc:	cmp	r1, #0
    72e0:	beq	7528 <eval_string+0x1340>
    72e4:	add	r2, sp, #80	; 0x50
    72e8:	mov	r0, r5
    72ec:	bl	3c6c <eval_integer>
    72f0:	cmp	r0, #0
    72f4:	bne	7898 <eval_string+0x16b0>
    72f8:	ldr	r0, [sp, #80]	; 0x50
    72fc:	ldr	r1, [sp, #84]	; 0x54
    7300:	subs	r2, r0, #1
    7304:	sbcs	r2, r1, #0
    7308:	blt	753c <eval_string+0x1354>
    730c:	lsl	r1, r1, #3
    7310:	lsl	r5, r0, #3
    7314:	orr	r6, r1, r0, lsr #29
    7318:	str	r5, [sp, #72]	; 0x48
    731c:	str	r6, [sp, #76]	; 0x4c
    7320:	cmn	r6, #1
    7324:	bgt	754c <eval_string+0x1364>
    7328:	movw	r1, #0
    732c:	movt	r1, #0
    7330:	b	78b0 <eval_string+0x16c8>
    7334:	movw	r0, #3469	; 0xd8d
    7338:	b	744c <eval_string+0x1264>
    733c:	mov	r0, #28
    7340:	str	r0, [sp, #80]	; 0x50
    7344:	movw	r0, #0
    7348:	movt	r0, #0
    734c:	str	r0, [sp, #72]	; 0x48
    7350:	mov	r0, #0
    7354:	str	r0, [sp, #88]	; 0x58
    7358:	mov	r0, #29
    735c:	bl	0 <malloc>
    7360:	cmp	r0, #0
    7364:	str	r0, [r8]
    7368:	beq	74c8 <eval_string+0x12e0>
    736c:	mov	r1, r0
    7370:	ldr	r0, [sp, #88]	; 0x58
    7374:	ldr	r2, [sp, #72]	; 0x48
    7378:	vldr	d0, [sp, #96]	; 0x60
    737c:	add	r0, r2, r0
    7380:	bl	0 <coda_time_double_to_string>
    7384:	cmp	r0, #0
    7388:	beq	77c0 <eval_string+0x15d8>
    738c:	ldr	r0, [r4, #20]
    7390:	cmp	r0, #0
    7394:	beq	7898 <eval_string+0x16b0>
    7398:	ldr	r0, [sp, #72]	; 0x48
    739c:	b	7894 <eval_string+0x16ac>
    73a0:	movw	r1, #0
    73a4:	movt	r1, #0
    73a8:	mvn	r0, #400	; 0x190
    73ac:	bl	0 <coda_set_error>
    73b0:	b	789c <eval_string+0x16b4>
    73b4:	ldr	r0, [sp, #52]	; 0x34
    73b8:	cmp	r0, #1
    73bc:	blt	75f8 <eval_string+0x1410>
    73c0:	ldr	r1, [sp, #56]	; 0x38
    73c4:	mov	r2, #0
    73c8:	add	r0, r1, r0
    73cc:	ldr	r1, [sp, #48]	; 0x30
    73d0:	strb	r2, [r1, r0]
    73d4:	ldr	r0, [sp, #56]	; 0x38
    73d8:	ldr	r1, [sp, #48]	; 0x30
    73dc:	add	r0, r1, r0
    73e0:	b	7600 <eval_string+0x1418>
    73e4:	sub	r2, r1, #1
    73e8:	ldr	r1, [r8]
    73ec:	mov	r3, #1
    73f0:	ldr	r6, [sl]
    73f4:	add	r6, r1, r6
    73f8:	ldrb	r6, [r6, r2]
    73fc:	sub	r6, r6, #9
    7400:	cmp	r6, #23
    7404:	bhi	789c <eval_string+0x16b4>
    7408:	tst	r0, r3, lsl r6
    740c:	beq	789c <eval_string+0x16b4>
    7410:	str	r2, [r9]
    7414:	sub	r6, r2, #1
    7418:	add	r2, r2, #1
    741c:	cmp	r2, #1
    7420:	mov	r2, r6
    7424:	bgt	73f0 <eval_string+0x1208>
    7428:	b	789c <eval_string+0x16b4>
    742c:	movw	r0, #3638	; 0xe36
    7430:	movw	r1, #0
    7434:	movw	r3, #0
    7438:	str	r0, [sp]
    743c:	mvn	r0, #0
    7440:	mov	r2, r4
    7444:	b	7460 <eval_string+0x1278>
    7448:	movw	r0, #3690	; 0xe6a
    744c:	movw	r1, #0
    7450:	movw	r3, #0
    7454:	str	r0, [sp]
    7458:	mvn	r0, #0
    745c:	mov	r2, r5
    7460:	mvn	r7, #0
    7464:	movt	r1, #0
    7468:	movt	r3, #0
    746c:	bl	0 <coda_set_error>
    7470:	b	789c <eval_string+0x16b4>
    7474:	cmp	r5, r2
    7478:	beq	7494 <eval_string+0x12ac>
    747c:	add	r1, r5, ip
    7480:	add	r4, r5, r8
    7484:	ldrb	r1, [r0, r1]
    7488:	ldrb	r4, [lr, r4]
    748c:	cmp	r4, r1
    7490:	bls	7504 <eval_string+0x131c>
    7494:	ldr	r1, [fp, #8]
    7498:	cmp	r2, #1
    749c:	str	r8, [sl]
    74a0:	str	r3, [r9]
    74a4:	str	lr, [r1]
    74a8:	blt	7800 <eval_string+0x1618>
    74ac:	bl	0 <free>
    74b0:	b	7800 <eval_string+0x1618>
    74b4:	movw	r1, #0
    74b8:	movw	r2, #0
    74bc:	mvn	r0, #0
    74c0:	movw	r3, #2924	; 0xb6c
    74c4:	b	64a8 <eval_string+0x2c0>
    74c8:	ldr	r0, [r4, #20]
    74cc:	cmp	r0, #0
    74d0:	beq	74dc <eval_string+0x12f4>
    74d4:	ldr	r0, [sp, #72]	; 0x48
    74d8:	bl	0 <free>
    74dc:	ldr	r0, [r9]
    74e0:	movw	r1, #3740	; 0xe9c
    74e4:	movw	r3, #0
    74e8:	mvn	r7, #0
    74ec:	str	r1, [sp]
    74f0:	movw	r1, #0
    74f4:	movt	r3, #0
    74f8:	movt	r1, #0
    74fc:	add	r2, r0, #1
    7500:	b	7828 <eval_string+0x1640>
    7504:	ldr	r1, [fp, #8]
    7508:	cmp	r3, #1
    750c:	str	ip, [sl]
    7510:	str	r2, [r9]
    7514:	str	r0, [r1]
    7518:	blt	7800 <eval_string+0x1618>
    751c:	mov	r0, lr
    7520:	bl	0 <free>
    7524:	b	7800 <eval_string+0x1618>
    7528:	add	r1, sp, #72	; 0x48
    752c:	mov	r0, r7
    7530:	bl	0 <coda_cursor_get_bit_size>
    7534:	cmp	r0, #0
    7538:	bne	7898 <eval_string+0x16b0>
    753c:	ldr	r5, [sp, #72]	; 0x48
    7540:	ldr	r6, [sp, #76]	; 0x4c
    7544:	cmn	r6, #1
    7548:	ble	7328 <eval_string+0x1140>
    754c:	lsr	r0, r5, #3
    7550:	lsr	r1, r6, #3
    7554:	orr	r0, r0, r6, lsl #29
    7558:	adds	r4, r0, #1
    755c:	adc	r2, r1, #0
    7560:	ands	r3, r5, #7
    7564:	moveq	r4, r0
    7568:	moveq	r2, r1
    756c:	mov	r0, #0
    7570:	orrs	r1, r4, r2
    7574:	str	r4, [sp, #80]	; 0x50
    7578:	str	r2, [sp, #84]	; 0x54
    757c:	str	r0, [sl]
    7580:	str	r4, [r9]
    7584:	beq	77ec <eval_string+0x1604>
    7588:	add	r0, r4, #1
    758c:	bl	0 <malloc>
    7590:	cmp	r0, #0
    7594:	str	r0, [r8]
    7598:	beq	78c8 <eval_string+0x16e0>
    759c:	ldr	r2, [sp, #92]	; 0x5c
    75a0:	mov	r1, r0
    75a4:	ldr	r0, [sp, #88]	; 0x58
    75a8:	stm	sp, {r5, r6}
    75ac:	lsl	r2, r2, #3
    75b0:	orr	r3, r2, r0, lsr #29
    75b4:	lsl	r2, r0, #3
    75b8:	mov	r0, r7
    75bc:	bl	0 <coda_cursor_read_bits>
    75c0:	cmp	r0, #0
    75c4:	bne	7890 <eval_string+0x16a8>
    75c8:	b	77f0 <eval_string+0x1608>
    75cc:	str	r0, [r8]
    75d0:	cmp	r5, #1
    75d4:	blt	75e4 <eval_string+0x13fc>
    75d8:	ldr	r0, [sp, #68]	; 0x44
    75dc:	bl	0 <free>
    75e0:	ldr	r4, [sp, #72]	; 0x48
    75e4:	cmp	r4, #1
    75e8:	blt	7800 <eval_string+0x1618>
    75ec:	ldr	r0, [sp, #64]	; 0x40
    75f0:	bl	0 <free>
    75f4:	b	7800 <eval_string+0x1618>
    75f8:	movw	r0, #0
    75fc:	movt	r0, #0
    7600:	mov	r1, #0
    7604:	add	r2, sp, #80	; 0x50
    7608:	add	r3, sp, #72	; 0x48
    760c:	str	r1, [sp]
    7610:	mov	r1, #36	; 0x24
    7614:	bl	0 <coda_pcre_compile>
    7618:	mov	r6, r0
    761c:	ldr	r0, [sp, #48]	; 0x30
    7620:	cmp	r0, #0
    7624:	beq	762c <eval_string+0x1444>
    7628:	bl	0 <free>
    762c:	cmp	r6, #0
    7630:	beq	7660 <eval_string+0x1478>
    7634:	ldr	r1, [r4, #24]
    7638:	ldr	r0, [r1, #4]
    763c:	cmp	r0, #1
    7640:	bne	76e8 <eval_string+0x1500>
    7644:	add	r2, sp, #88	; 0x58
    7648:	mov	r0, r5
    764c:	bl	3c6c <eval_integer>
    7650:	cmp	r0, #0
    7654:	bne	79b0 <eval_string+0x17c8>
    7658:	ldr	r4, [sp, #88]	; 0x58
    765c:	b	7730 <eval_string+0x1548>
    7660:	ldr	r3, [sp, #72]	; 0x48
    7664:	ldr	r2, [sp, #80]	; 0x50
    7668:	movw	r1, #0
    766c:	mvn	r0, #400	; 0x190
    7670:	movt	r1, #0
    7674:	bl	0 <coda_set_error>
    7678:	ldr	r0, [sp, #60]	; 0x3c
    767c:	cmp	r0, #0
    7680:	bne	7894 <eval_string+0x16ac>
    7684:	b	7898 <eval_string+0x16b0>
    7688:	add	r4, lr, r8
    768c:	add	r7, r0, ip
    7690:	mov	r5, #0
    7694:	ldrb	r1, [r7, r5]
    7698:	ldrb	r6, [r4, r5]
    769c:	cmp	r6, r1
    76a0:	bne	6600 <eval_string+0x418>
    76a4:	add	r5, r5, #1
    76a8:	cmp	r5, r3
    76ac:	cmplt	r5, r2
    76b0:	blt	7694 <eval_string+0x14ac>
    76b4:	b	6600 <eval_string+0x418>
    76b8:	add	r4, lr, r8
    76bc:	add	r7, r0, ip
    76c0:	mov	r5, #0
    76c4:	ldrb	r1, [r7, r5]
    76c8:	ldrb	r6, [r4, r5]
    76cc:	cmp	r6, r1
    76d0:	bne	7294 <eval_string+0x10ac>
    76d4:	add	r5, r5, #1
    76d8:	cmp	r5, r3
    76dc:	cmplt	r5, r2
    76e0:	blt	76c4 <eval_string+0x14dc>
    76e4:	b	7294 <eval_string+0x10ac>
    76e8:	add	r0, sp, #40	; 0x28
    76ec:	add	r2, sp, #88	; 0x58
    76f0:	add	r3, sp, #44	; 0x2c
    76f4:	str	r0, [sp]
    76f8:	mov	r0, r5
    76fc:	bl	61e8 <eval_string>
    7700:	cmp	r0, #0
    7704:	bne	79b0 <eval_string+0x17c8>
    7708:	cmp	r9, #0
    770c:	beq	7930 <eval_string+0x1748>
    7710:	ldr	r1, [sp, #40]	; 0x28
    7714:	mov	r0, r6
    7718:	bl	0 <coda_pcre_get_stringnumber>
    771c:	cmn	r0, #1
    7720:	ble	7998 <eval_string+0x17b0>
    7724:	mov	r4, r0
    7728:	ldr	r0, [sp, #40]	; 0x28
    772c:	bl	0 <free>
    7730:	ldr	r0, [sp, #60]	; 0x3c
    7734:	cmp	r0, #0
    7738:	bne	7754 <eval_string+0x156c>
    773c:	movw	r0, #0
    7740:	movt	r0, #0
    7744:	bl	0 <strdup>
    7748:	cmp	r0, #0
    774c:	str	r0, [sp, #60]	; 0x3c
    7750:	beq	79e0 <eval_string+0x17f8>
    7754:	ldr	r1, [sp, #68]	; 0x44
    7758:	ldr	r3, [sp, #64]	; 0x40
    775c:	mov	r5, #0
    7760:	mov	r2, #48	; 0x30
    7764:	add	r7, sp, #96	; 0x60
    7768:	str	r5, [sp]
    776c:	stmib	sp, {r5, r7}
    7770:	str	r2, [sp, #12]
    7774:	add	r2, r0, r1
    7778:	mov	r0, r6
    777c:	mov	r1, #0
    7780:	bl	0 <coda_pcre_exec>
    7784:	mov	r5, r0
    7788:	movw	r0, #0
    778c:	movt	r0, #0
    7790:	ldr	r1, [r0]
    7794:	mov	r0, r6
    7798:	blx	r1
    779c:	cmn	r5, #2
    77a0:	bgt	78f8 <eval_string+0x1710>
    77a4:	movw	r1, #0
    77a8:	mvn	r0, #400	; 0x190
    77ac:	mov	r2, r5
    77b0:	movt	r1, #0
    77b4:	bl	0 <coda_set_error>
    77b8:	ldr	r0, [sp, #60]	; 0x3c
    77bc:	b	7894 <eval_string+0x16ac>
    77c0:	mov	r7, #0
    77c4:	str	r7, [sl]
    77c8:	ldr	r0, [r8]
    77cc:	bl	0 <strlen>
    77d0:	str	r0, [r9]
    77d4:	ldr	r0, [r4, #20]
    77d8:	cmp	r0, #0
    77dc:	beq	789c <eval_string+0x16b4>
    77e0:	ldr	r0, [sp, #72]	; 0x48
    77e4:	bl	0 <free>
    77e8:	b	789c <eval_string+0x16b4>
    77ec:	str	r0, [r8]
    77f0:	add	r1, sp, #96	; 0x60
    77f4:	mov	r0, r7
    77f8:	mov	r2, #520	; 0x208
    77fc:	bl	0 <memcpy>
    7800:	mov	r7, #0
    7804:	b	789c <eval_string+0x16b4>
    7808:	movw	r1, #0
    780c:	movw	r3, #0
    7810:	movw	r0, #3031	; 0xbd7
    7814:	mov	r2, r9
    7818:	mvn	r7, #0
    781c:	str	r0, [sp]
    7820:	movt	r1, #0
    7824:	movt	r3, #0
    7828:	mvn	r0, #0
    782c:	bl	0 <coda_set_error>
    7830:	b	789c <eval_string+0x16b4>
    7834:	movw	r1, #0
    7838:	movt	r1, #0
    783c:	b	78b0 <eval_string+0x16c8>
    7840:	mov	r7, #0
    7844:	str	r7, [sl]
    7848:	str	r7, [r9]
    784c:	str	r7, [r8]
    7850:	b	789c <eval_string+0x16b4>
    7854:	ldr	r4, [r9]
    7858:	cmp	r4, #1
    785c:	blt	720c <eval_string+0x1024>
    7860:	add	r5, r4, #1
    7864:	mov	r0, r5
    7868:	bl	0 <malloc>
    786c:	cmp	r0, #0
    7870:	str	r0, [r8]
    7874:	beq	78d0 <eval_string+0x16e8>
    7878:	mov	r1, r0
    787c:	mov	r0, r7
    7880:	mov	r2, r5
    7884:	bl	0 <coda_cursor_read_string>
    7888:	cmp	r0, #0
    788c:	beq	77f0 <eval_string+0x1608>
    7890:	ldr	r0, [r8]
    7894:	bl	0 <free>
    7898:	mvn	r7, #0
    789c:	mov	r0, r7
    78a0:	sub	sp, fp, #28
    78a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78a8:	movw	r1, #0
    78ac:	movt	r1, #0
    78b0:	mvn	r0, #400	; 0x190
    78b4:	bl	0 <coda_set_error>
    78b8:	b	7898 <eval_string+0x16b0>
    78bc:	movw	r1, #0
    78c0:	movt	r1, #0
    78c4:	b	73a8 <eval_string+0x11c0>
    78c8:	movw	r0, #2991	; 0xbaf
    78cc:	b	7430 <eval_string+0x1248>
    78d0:	movw	r1, #0
    78d4:	movw	r3, #0
    78d8:	movw	r0, #2895	; 0xb4f
    78dc:	mov	r2, r4
    78e0:	str	r0, [sp]
    78e4:	movt	r1, #0
    78e8:	movt	r3, #0
    78ec:	mvn	r0, #0
    78f0:	bl	0 <coda_set_error>
    78f4:	b	7898 <eval_string+0x16b0>
    78f8:	cmp	r5, #0
    78fc:	beq	79c8 <eval_string+0x17e0>
    7900:	cmp	r4, r5
    7904:	bge	7a18 <eval_string+0x1830>
    7908:	ldr	r0, [r7, r4, lsl #3]
    790c:	mov	r1, #4
    7910:	orr	r1, r1, r4, lsl #3
    7914:	str	r0, [sl]
    7918:	ldr	r1, [r7, r1]
    791c:	sub	r0, r1, r0
    7920:	str	r0, [r9]
    7924:	ldr	r0, [sp, #60]	; 0x3c
    7928:	str	r0, [r8]
    792c:	b	7800 <eval_string+0x1618>
    7930:	movw	r1, #0
    7934:	mvn	r0, #400	; 0x190
    7938:	movt	r1, #0
    793c:	bl	0 <coda_set_error>
    7940:	ldr	r0, [sp, #40]	; 0x28
    7944:	cmp	r0, #0
    7948:	bne	79ac <eval_string+0x17c4>
    794c:	b	79b0 <eval_string+0x17c8>
    7950:	ldr	r1, [sp, #72]	; 0x48
    7954:	movw	r2, #3275	; 0xccb
    7958:	movw	r3, #0
    795c:	str	r2, [sp]
    7960:	movt	r3, #0
    7964:	add	r2, r1, r0
    7968:	movw	r1, #0
    796c:	mvn	r0, #0
    7970:	movt	r1, #0
    7974:	bl	0 <coda_set_error>
    7978:	b	689c <eval_string+0x6b4>
    797c:	mov	r7, #0
    7980:	str	r7, [sl]
    7984:	str	r7, [r9]
    7988:	ldr	r0, [r8]
    798c:	bl	0 <free>
    7990:	str	r7, [r8]
    7994:	b	789c <eval_string+0x16b4>
    7998:	movw	r1, #0
    799c:	mvn	r0, #400	; 0x190
    79a0:	movt	r1, #0
    79a4:	bl	0 <coda_set_error>
    79a8:	ldr	r0, [sp, #40]	; 0x28
    79ac:	bl	0 <free>
    79b0:	movw	r0, #0
    79b4:	movt	r0, #0
    79b8:	ldr	r1, [r0]
    79bc:	mov	r0, r6
    79c0:	blx	r1
    79c4:	b	7898 <eval_string+0x16b0>
    79c8:	movw	r1, #0
    79cc:	mvn	r0, #400	; 0x190
    79d0:	movt	r1, #0
    79d4:	bl	0 <coda_set_error>
    79d8:	ldr	r0, [sp, #60]	; 0x3c
    79dc:	b	7894 <eval_string+0x16ac>
    79e0:	movw	r1, #0
    79e4:	movw	r2, #0
    79e8:	mvn	r0, #0
    79ec:	movw	r3, #3583	; 0xdff
    79f0:	mvn	r7, #0
    79f4:	movt	r1, #0
    79f8:	movt	r2, #0
    79fc:	bl	0 <coda_set_error>
    7a00:	movw	r0, #0
    7a04:	movt	r0, #0
    7a08:	ldr	r1, [r0]
    7a0c:	mov	r0, r6
    7a10:	blx	r1
    7a14:	b	789c <eval_string+0x16b4>
    7a18:	mov	r7, #0
    7a1c:	str	r7, [sl]
    7a20:	str	r7, [r9]
    7a24:	str	r7, [r8]
    7a28:	ldr	r0, [sp, #60]	; 0x3c
    7a2c:	bl	0 <free>
    7a30:	b	789c <eval_string+0x16b4>
    7a34:	movw	r0, #0
    7a38:	movw	r1, #0
    7a3c:	movw	r3, #0
    7a40:	movw	r2, #3794	; 0xed2
    7a44:	movt	r0, #0
    7a48:	movt	r1, #0
    7a4c:	movt	r3, #0
    7a50:	bl	0 <__assert_fail>
    7a54:	movw	r0, #0
    7a58:	movw	r1, #0
    7a5c:	movw	r3, #0
    7a60:	movw	r2, #3624	; 0xe28
    7a64:	movt	r0, #0
    7a68:	movt	r1, #0
    7a6c:	movt	r3, #0
    7a70:	bl	0 <__assert_fail>
    7a74:	movw	r0, #0
    7a78:	movw	r1, #0
    7a7c:	movw	r3, #0
    7a80:	movw	r2, #3650	; 0xe42
    7a84:	movt	r0, #0
    7a88:	movt	r1, #0
    7a8c:	movt	r3, #0
    7a90:	bl	0 <__assert_fail>
    7a94:	movw	r0, #0
    7a98:	movw	r1, #0
    7a9c:	movw	r3, #0
    7aa0:	movw	r2, #2938	; 0xb7a
    7aa4:	movt	r0, #0
    7aa8:	movt	r1, #0
    7aac:	movt	r3, #0
    7ab0:	bl	0 <__assert_fail>
    7ab4:	movw	r0, #0
    7ab8:	movw	r1, #0
    7abc:	movw	r3, #0
    7ac0:	movw	r2, #3676	; 0xe5c
    7ac4:	movt	r0, #0
    7ac8:	movt	r1, #0
    7acc:	movt	r3, #0
    7ad0:	bl	0 <__assert_fail>
    7ad4:	movw	r0, #0
    7ad8:	movw	r1, #0
    7adc:	movw	r3, #0
    7ae0:	movw	r2, #3449	; 0xd79
    7ae4:	movt	r0, #0
    7ae8:	movt	r1, #0
    7aec:	movt	r3, #0
    7af0:	bl	0 <__assert_fail>
    7af4:	movw	r0, #0
    7af8:	movw	r1, #0
    7afc:	movw	r3, #0
    7b00:	movw	r2, #3763	; 0xeb3
    7b04:	movt	r0, #0
    7b08:	movt	r1, #0
    7b0c:	movt	r3, #0
    7b10:	bl	0 <__assert_fail>
    7b14:	movw	r0, #0
    7b18:	movw	r1, #0
    7b1c:	movw	r3, #0
    7b20:	movw	r2, #3301	; 0xce5
    7b24:	movt	r0, #0
    7b28:	movt	r1, #0
    7b2c:	movt	r3, #0
    7b30:	bl	0 <__assert_fail>
    7b34:	movw	r0, #0
    7b38:	movw	r1, #0
    7b3c:	movw	r3, #0
    7b40:	movw	r2, #3234	; 0xca2
    7b44:	movt	r0, #0
    7b48:	movt	r1, #0
    7b4c:	movt	r3, #0
    7b50:	bl	0 <__assert_fail>
    7b54:	movw	r0, #0
    7b58:	movw	r1, #0
    7b5c:	movw	r3, #0
    7b60:	movw	r2, #3363	; 0xd23
    7b64:	movt	r0, #0
    7b68:	movt	r1, #0
    7b6c:	movt	r3, #0
    7b70:	bl	0 <__assert_fail>
    7b74:	movw	r0, #0
    7b78:	movw	r1, #0
    7b7c:	movw	r3, #0
    7b80:	movw	r2, #2865	; 0xb31
    7b84:	movt	r0, #0
    7b88:	movt	r1, #0
    7b8c:	movt	r3, #0
    7b90:	bl	0 <__assert_fail>

00007b94 <coda_expression_eval_node>:
    7b94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7b98:	add	fp, sp, #24
    7b9c:	sub	sp, sp, #568	; 0x238
    7ba0:	mov	r7, r0
    7ba4:	ldr	r0, [r0, #4]
    7ba8:	cmp	r0, #4
    7bac:	bne	7c2c <coda_expression_eval_node+0x98>
    7bb0:	mov	r4, r1
    7bb4:	cmp	r1, #0
    7bb8:	beq	7c38 <coda_expression_eval_node+0xa4>
    7bbc:	mov	r6, sp
    7bc0:	mov	r1, r4
    7bc4:	mov	r2, #520	; 0x208
    7bc8:	str	r4, [sp]
    7bcc:	add	r8, r6, #8
    7bd0:	mov	r0, r8
    7bd4:	bl	0 <memcpy>
    7bd8:	vmov.i32	q8, #0	; 0x00000000
    7bdc:	add	r0, r6, #544	; 0x220
    7be0:	mov	r5, #0
    7be4:	mov	r1, r7
    7be8:	vst1.64	{d16-d17}, [r0]
    7bec:	add	r0, r6, #528	; 0x210
    7bf0:	str	r5, [sp, #560]	; 0x230
    7bf4:	vst1.64	{d16-d17}, [r0]
    7bf8:	mov	r0, r6
    7bfc:	bl	7c6c <eval_cursor>
    7c00:	cmp	r0, #0
    7c04:	beq	7c58 <coda_expression_eval_node+0xc4>
    7c08:	mov	r0, r4
    7c0c:	mov	r1, r8
    7c10:	bl	0 <coda_cursor_compare>
    7c14:	mvn	r5, #0
    7c18:	cmp	r0, #0
    7c1c:	beq	7c4c <coda_expression_eval_node+0xb8>
    7c20:	mov	r0, r8
    7c24:	bl	0 <coda_cursor_add_to_error_message>
    7c28:	b	7c4c <coda_expression_eval_node+0xb8>
    7c2c:	movw	r1, #0
    7c30:	movt	r1, #0
    7c34:	b	7c40 <coda_expression_eval_node+0xac>
    7c38:	movw	r1, #0
    7c3c:	movt	r1, #0
    7c40:	mvn	r0, #99	; 0x63
    7c44:	bl	0 <coda_set_error>
    7c48:	mvn	r5, #0
    7c4c:	mov	r0, r5
    7c50:	sub	sp, fp, #24
    7c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7c58:	mov	r0, r4
    7c5c:	mov	r1, r8
    7c60:	mov	r2, #520	; 0x208
    7c64:	bl	0 <memcpy>
    7c68:	b	7c4c <coda_expression_eval_node+0xb8>

00007c6c <eval_cursor>:
    7c6c:	push	{r4, r5, r6, sl, fp, lr}
    7c70:	add	fp, sp, #16
    7c74:	sub	sp, sp, #24
    7c78:	mov	r5, r1
    7c7c:	ldr	r1, [r0]
    7c80:	cmp	r1, #0
    7c84:	beq	7fd0 <eval_cursor+0x364>
    7c88:	mov	r4, r0
    7c8c:	ldr	r0, [r5]
    7c90:	sub	r0, r0, #10
    7c94:	cmp	r0, #28
    7c98:	bhi	7fb0 <eval_cursor+0x344>
    7c9c:	add	r2, pc, #0
    7ca0:	ldr	pc, [r2, r0, lsl #2]
    7ca4:	.word	0x00007d18
    7ca8:	.word	0x00007fb0
    7cac:	.word	0x00007fb0
    7cb0:	.word	0x00007fb0
    7cb4:	.word	0x00007fb0
    7cb8:	.word	0x00007fb0
    7cbc:	.word	0x00007fb0
    7cc0:	.word	0x00007fb0
    7cc4:	.word	0x00007fb0
    7cc8:	.word	0x00007fb0
    7ccc:	.word	0x00007fb0
    7cd0:	.word	0x00007fb0
    7cd4:	.word	0x00007fb0
    7cd8:	.word	0x00007fb0
    7cdc:	.word	0x00007fb0
    7ce0:	.word	0x00007fb0
    7ce4:	.word	0x00007fb0
    7ce8:	.word	0x00007fb0
    7cec:	.word	0x00007fb0
    7cf0:	.word	0x00007fb0
    7cf4:	.word	0x00007fb0
    7cf8:	.word	0x00007fb0
    7cfc:	.word	0x00007d8c
    7d00:	.word	0x00007d44
    7d04:	.word	0x00007e30
    7d08:	.word	0x00007dc0
    7d0c:	.word	0x00007e3c
    7d10:	.word	0x00007e44
    7d14:	.word	0x00007db0
    7d18:	ldr	r1, [r1]
    7d1c:	ldr	r0, [r1, #16]
    7d20:	cmp	r0, #0
    7d24:	beq	7e70 <eval_cursor+0x204>
    7d28:	bl	0 <coda_type_get_format_name>
    7d2c:	movw	r1, #0
    7d30:	mov	r2, r0
    7d34:	mvn	r0, #400	; 0x190
    7d38:	movt	r1, #0
    7d3c:	bl	0 <coda_set_error>
    7d40:	b	7eb4 <eval_cursor+0x248>
    7d44:	ldr	r1, [r5, #16]
    7d48:	cmp	r1, #0
    7d4c:	beq	7d64 <eval_cursor+0xf8>
    7d50:	mov	r0, r4
    7d54:	bl	7c6c <eval_cursor>
    7d58:	mvn	r6, #0
    7d5c:	cmp	r0, #0
    7d60:	bne	7eb8 <eval_cursor+0x24c>
    7d64:	add	r4, r4, #8
    7d68:	mov	r0, r4
    7d6c:	bl	0 <coda_cursor_goto_attributes>
    7d70:	mvn	r6, #0
    7d74:	cmp	r0, #0
    7d78:	bne	7eb8 <eval_cursor+0x24c>
    7d7c:	ldr	r1, [r5, #12]
    7d80:	mov	r0, r4
    7d84:	bl	0 <coda_cursor_goto_record_field_by_name>
    7d88:	b	7e7c <eval_cursor+0x210>
    7d8c:	ldr	r2, [r5, #16]
    7d90:	cmp	r2, #0
    7d94:	beq	7e88 <eval_cursor+0x21c>
    7d98:	mov	r0, r4
    7d9c:	mov	r1, r2
    7da0:	bl	7c6c <eval_cursor>
    7da4:	cmp	r0, #0
    7da8:	bne	7eb4 <eval_cursor+0x248>
    7dac:	b	7e9c <eval_cursor+0x230>
    7db0:	ldr	r1, [r1]
    7db4:	add	r0, r4, #8
    7db8:	bl	0 <coda_cursor_set_product>
    7dbc:	b	7e78 <eval_cursor+0x20c>
    7dc0:	ldr	r1, [r5, #16]
    7dc4:	cmp	r1, #0
    7dc8:	beq	7ddc <eval_cursor+0x170>
    7dcc:	mov	r0, r4
    7dd0:	bl	7c6c <eval_cursor>
    7dd4:	cmp	r0, #0
    7dd8:	bne	7eb4 <eval_cursor+0x248>
    7ddc:	add	r6, r4, #8
    7de0:	add	r1, sp, #20
    7de4:	mov	r0, r6
    7de8:	bl	0 <coda_cursor_get_type_class>
    7dec:	cmp	r0, #0
    7df0:	bne	7eb4 <eval_cursor+0x248>
    7df4:	ldr	r0, [sp, #20]
    7df8:	cmp	r0, #6
    7dfc:	bne	7e10 <eval_cursor+0x1a4>
    7e00:	mov	r0, r6
    7e04:	bl	0 <coda_cursor_use_base_type_of_special_type>
    7e08:	cmp	r0, #0
    7e0c:	bne	7eb4 <eval_cursor+0x248>
    7e10:	ldr	r1, [r5, #12]
    7e14:	cmp	r1, #0
    7e18:	beq	7efc <eval_cursor+0x290>
    7e1c:	mov	r0, r6
    7e20:	bl	0 <coda_cursor_goto_record_field_by_name>
    7e24:	cmp	r0, #0
    7e28:	bne	7eb4 <eval_cursor+0x248>
    7e2c:	b	7e3c <eval_cursor+0x1d0>
    7e30:	add	r0, r4, #8
    7e34:	mov	r2, #520	; 0x208
    7e38:	bl	0 <memcpy>
    7e3c:	mov	r6, #0
    7e40:	b	7eb8 <eval_cursor+0x24c>
    7e44:	ldr	r1, [r5, #16]
    7e48:	cmp	r1, #0
    7e4c:	beq	7e64 <eval_cursor+0x1f8>
    7e50:	mov	r0, r4
    7e54:	bl	7c6c <eval_cursor>
    7e58:	mvn	r6, #0
    7e5c:	cmp	r0, #0
    7e60:	bne	7eb8 <eval_cursor+0x24c>
    7e64:	add	r0, r4, #8
    7e68:	bl	0 <coda_cursor_goto_parent>
    7e6c:	b	7e78 <eval_cursor+0x20c>
    7e70:	add	r0, r4, #8
    7e74:	bl	0 <coda_ascii_cursor_set_asciilines>
    7e78:	mvn	r6, #0
    7e7c:	cmp	r0, #0
    7e80:	moveq	r6, #0
    7e84:	b	7eb8 <eval_cursor+0x24c>
    7e88:	ldr	r1, [r1]
    7e8c:	add	r0, r4, #8
    7e90:	bl	0 <coda_cursor_set_product>
    7e94:	cmp	r0, #0
    7e98:	bne	7eb4 <eval_cursor+0x248>
    7e9c:	ldr	r1, [r5, #20]
    7ea0:	add	r2, sp, #8
    7ea4:	mov	r0, r4
    7ea8:	bl	3c6c <eval_integer>
    7eac:	cmp	r0, #0
    7eb0:	beq	7ec4 <eval_cursor+0x258>
    7eb4:	mvn	r6, #0
    7eb8:	mov	r0, r6
    7ebc:	sub	sp, fp, #16
    7ec0:	pop	{r4, r5, r6, sl, fp, pc}
    7ec4:	ldr	r0, [pc, #292]	; 7ff0 <eval_cursor+0x384>
    7ec8:	ldr	r1, [pc, r0]
    7ecc:	bl	0 <__aeabi_read_tp>
    7ed0:	ldr	r0, [r0, r1]
    7ed4:	add	r4, r4, #8
    7ed8:	cmp	r0, #0
    7edc:	beq	7f2c <eval_cursor+0x2c0>
    7ee0:	ldr	r2, [sp, #8]
    7ee4:	mov	r0, r4
    7ee8:	mov	r1, r2
    7eec:	bl	0 <coda_cursor_goto_array_element_by_index>
    7ef0:	cmp	r0, #0
    7ef4:	bne	7eb4 <eval_cursor+0x248>
    7ef8:	b	7e3c <eval_cursor+0x1d0>
    7efc:	ldr	r1, [r5, #20]
    7f00:	add	r2, sp, #8
    7f04:	mov	r0, r4
    7f08:	bl	3c6c <eval_integer>
    7f0c:	cmp	r0, #0
    7f10:	bne	7eb4 <eval_cursor+0x248>
    7f14:	ldr	r1, [sp, #8]
    7f18:	mov	r0, r6
    7f1c:	bl	0 <coda_cursor_goto_record_field_by_index>
    7f20:	cmp	r0, #0
    7f24:	bne	7eb4 <eval_cursor+0x248>
    7f28:	b	7e3c <eval_cursor+0x1d0>
    7f2c:	add	r1, sp, #4
    7f30:	mov	r0, r4
    7f34:	bl	0 <coda_cursor_get_type_class>
    7f38:	cmp	r0, #0
    7f3c:	bne	7eb4 <eval_cursor+0x248>
    7f40:	ldr	r0, [sp, #4]
    7f44:	cmp	r0, #1
    7f48:	bne	7f98 <eval_cursor+0x32c>
    7f4c:	add	r1, sp, #20
    7f50:	mov	r0, r4
    7f54:	bl	0 <coda_cursor_get_num_elements>
    7f58:	cmp	r0, #0
    7f5c:	bne	7eb4 <eval_cursor+0x248>
    7f60:	ldr	r0, [sp, #12]
    7f64:	ldr	r3, [sp, #20]
    7f68:	ldr	r2, [sp, #8]
    7f6c:	cmp	r0, #0
    7f70:	blt	7f84 <eval_cursor+0x318>
    7f74:	asr	r1, r3, #31
    7f78:	subs	r6, r2, r3
    7f7c:	sbcs	r0, r0, r1
    7f80:	blt	7ee4 <eval_cursor+0x278>
    7f84:	movw	r1, #0
    7f88:	mvn	r0, #106	; 0x6a
    7f8c:	movt	r1, #0
    7f90:	bl	0 <coda_set_error>
    7f94:	b	7eb4 <eval_cursor+0x248>
    7f98:	bl	0 <coda_type_get_class_name>
    7f9c:	movw	r1, #0
    7fa0:	mov	r2, r0
    7fa4:	mvn	r0, #104	; 0x68
    7fa8:	movt	r1, #0
    7fac:	b	7d3c <eval_cursor+0xd0>
    7fb0:	movw	r0, #0
    7fb4:	movw	r1, #0
    7fb8:	movw	r3, #0
    7fbc:	movw	r2, #4079	; 0xfef
    7fc0:	movt	r0, #0
    7fc4:	movt	r1, #0
    7fc8:	movt	r3, #0
    7fcc:	bl	0 <__assert_fail>
    7fd0:	movw	r0, #0
    7fd4:	movw	r1, #0
    7fd8:	movw	r3, #0
    7fdc:	movw	r2, #3913	; 0xf49
    7fe0:	movt	r0, #0
    7fe4:	movt	r1, #0
    7fe8:	movt	r3, #0
    7fec:	bl	0 <__assert_fail>
    7ff0:	.word	0x00000120
