
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-xml-parser.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <coda_xml_parse>:
       0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
       4:	add	fp, sp, #28
       8:	sub	sp, sp, #588	; 0x24c
       c:	sub	sp, sp, #8192	; 0x2000
      10:	vmov.i32	q8, #0	; 0x00000000
      14:	mov	r5, r0
      18:	add	r0, sp, #32
      1c:	mvn	r4, #0
      20:	mov	r1, #32
      24:	add	r0, r0, #528	; 0x210
      28:	vst1.64	{d16-d17}, [r0]
      2c:	mov	r0, #0
      30:	str	r4, [sp, #44]	; 0x2c
      34:	str	r0, [sp, #40]	; 0x28
      38:	str	r0, [sp, #36]	; 0x24
      3c:	str	r0, [sp, #576]	; 0x240
      40:	mov	r0, #0
      44:	bl	0 <coda_XML_ParserCreateNS>
      48:	cmp	r0, #0
      4c:	str	r0, [sp, #32]
      50:	beq	a8 <coda_xml_parse+0xa8>
      54:	str	r5, [sp, #40]	; 0x28
      58:	mov	r6, r0
      5c:	ldr	r0, [r5, #24]
      60:	cmp	r0, #0
      64:	beq	bc <coda_xml_parse+0xbc>
      68:	ldr	r0, [r0, #28]
      6c:	clz	r1, r0
      70:	cmp	r0, #0
      74:	lsr	r1, r1, #5
      78:	str	r1, [sp, #564]	; 0x234
      7c:	beq	c4 <coda_xml_parse+0xc4>
      80:	ldr	r1, [r0, #8]
      84:	cmp	r1, #0
      88:	bne	5a0 <coda_xml_parse+0x5a0>
      8c:	mov	r1, #0
      90:	bl	0 <coda_mem_record_new>
      94:	mov	r4, r0
      98:	str	r0, [sp, #176]	; 0xb0
      9c:	cmp	r4, #0
      a0:	bne	f8 <coda_xml_parse+0xf8>
      a4:	b	278 <coda_xml_parse+0x278>
      a8:	movw	r1, #0
      ac:	mvn	r0, #13
      b0:	movt	r1, #0
      b4:	bl	0 <coda_set_error>
      b8:	b	594 <coda_xml_parse+0x594>
      bc:	mov	r0, #1
      c0:	str	r0, [sp, #564]	; 0x234
      c4:	mov	r0, #2
      c8:	bl	0 <coda_type_record_new>
      cc:	cmp	r0, #0
      d0:	beq	278 <coda_xml_parse+0x278>
      d4:	mov	r1, #0
      d8:	mov	r7, r0
      dc:	bl	0 <coda_mem_record_new>
      e0:	mov	r4, r0
      e4:	str	r0, [sp, #176]	; 0xb0
      e8:	mov	r0, r7
      ec:	bl	0 <coda_type_release>
      f0:	cmp	r4, #0
      f4:	beq	278 <coda_xml_parse+0x278>
      f8:	mov	r7, #0
      fc:	mvn	r0, #0
     100:	add	r1, sp, #32
     104:	str	r7, [sp, #432]	; 0x1b0
     108:	str	r0, [sp, #304]	; 0x130
     10c:	add	r0, r4, #4
     110:	str	r7, [sp, #44]	; 0x2c
     114:	str	r0, [sp, #48]	; 0x30
     118:	mov	r0, r6
     11c:	bl	0 <coda_XML_SetUserData>
     120:	ldr	r0, [sp, #32]
     124:	mov	r1, #2
     128:	bl	0 <coda_XML_SetParamEntityParsing>
     12c:	ldr	r0, [sp, #32]
     130:	movw	r1, #0
     134:	movw	r2, #0
     138:	movt	r1, #0
     13c:	movt	r2, #0
     140:	bl	0 <coda_XML_SetElementHandler>
     144:	ldr	r0, [sp, #32]
     148:	movw	r1, #0
     14c:	movt	r1, #0
     150:	bl	0 <coda_XML_SetCharacterDataHandler>
     154:	ldr	r0, [sp, #32]
     158:	movw	r1, #0
     15c:	movt	r1, #0
     160:	bl	0 <coda_XML_SetNotStandaloneHandler>
     164:	ldr	r0, [r5, #52]	; 0x34
     168:	ldrd	r2, [r0, #8]
     16c:	asr	r1, r3, #31
     170:	adds	r1, r2, r1, lsr #19
     174:	adc	r6, r3, #0
     178:	lsr	r1, r1, #13
     17c:	orr	r1, r1, r6, lsl #19
     180:	lsl	r6, r1, #13
     184:	rsbs	r2, r2, r1, lsl #13
     188:	rscs	r2, r3, r6, asr #31
     18c:	mov	r2, #0
     190:	movwlt	r2, #1
     194:	add	r1, r2, r1
     198:	cmp	r1, #1
     19c:	blt	288 <coda_xml_parse+0x288>
     1a0:	sub	r9, r1, #1
     1a4:	mov	r6, #0
     1a8:	mov	sl, #0
     1ac:	lsl	r1, r9, #13
     1b0:	str	r1, [sp, #4]
     1b4:	ldr	r1, [pc, #1028]	; 5c0 <coda_xml_parse+0x5c0>
     1b8:	ldr	r8, [pc, r1]
     1bc:	ldr	r1, [r0, #52]	; 0x34
     1c0:	cmp	r1, #0
     1c4:	beq	1ec <coda_xml_parse+0x1ec>
     1c8:	mov	r2, #8192	; 0x2000
     1cc:	cmp	sl, r9
     1d0:	blt	1e0 <coda_xml_parse+0x1e0>
     1d4:	ldr	r1, [r0, #8]
     1d8:	ldr	r2, [sp, #4]
     1dc:	sub	r2, r1, r2
     1e0:	ldr	r0, [r0, #48]	; 0x30
     1e4:	add	r1, r0, r6
     1e8:	b	22c <coda_xml_parse+0x22c>
     1ec:	ldr	r0, [r0, #56]	; 0x38
     1f0:	mov	r1, r6
     1f4:	mov	r2, #0
     1f8:	bl	0 <lseek>
     1fc:	cmn	r0, #1
     200:	ble	448 <coda_xml_parse+0x448>
     204:	ldr	r0, [r5, #52]	; 0x34
     208:	add	r4, sp, #584	; 0x248
     20c:	mov	r2, #8192	; 0x2000
     210:	mov	r1, r4
     214:	ldr	r0, [r0, #56]	; 0x38
     218:	bl	0 <read>
     21c:	mov	r2, r0
     220:	cmn	r0, #1
     224:	mov	r1, r4
     228:	ble	4fc <coda_xml_parse+0x4fc>
     22c:	bl	0 <__aeabi_read_tp>
     230:	mov	r4, r0
     234:	str	r7, [r0, r8]
     238:	sub	r0, r9, sl
     23c:	clz	r0, r0
     240:	lsr	r3, r0, #5
     244:	ldr	r0, [sp, #32]
     248:	bl	0 <coda_XML_Parse>
     24c:	ldr	r1, [r4, r8]
     250:	cmp	r0, #0
     254:	beq	314 <coda_xml_parse+0x314>
     258:	cmp	r1, #0
     25c:	bne	314 <coda_xml_parse+0x314>
     260:	cmp	r9, sl
     264:	beq	288 <coda_xml_parse+0x288>
     268:	ldr	r0, [r5, #52]	; 0x34
     26c:	add	sl, sl, #1
     270:	add	r6, r6, #8192	; 0x2000
     274:	b	1bc <coda_xml_parse+0x1bc>
     278:	mov	r0, r6
     27c:	bl	0 <coda_XML_ParserFree>
     280:	mvn	r4, #0
     284:	b	594 <coda_xml_parse+0x594>
     288:	ldr	r0, [sp, #32]
     28c:	bl	0 <coda_XML_ParserFree>
     290:	str	r7, [sp, #32]
     294:	ldr	r0, [sp, #564]	; 0x234
     298:	cmp	r0, #0
     29c:	beq	3c0 <coda_xml_parse+0x3c0>
     2a0:	ldr	r1, [sp, #176]	; 0xb0
     2a4:	add	r0, sp, #32
     2a8:	add	r0, r0, #144	; 0x90
     2ac:	ldr	r1, [r1, #4]
     2b0:	bl	0 <coda_mem_type_update>
     2b4:	mov	r1, r0
     2b8:	ldr	r0, [sp, #32]
     2bc:	cmp	r1, #0
     2c0:	beq	3e8 <coda_xml_parse+0x3e8>
     2c4:	cmp	r0, #0
     2c8:	beq	2d0 <coda_xml_parse+0x2d0>
     2cc:	bl	0 <coda_XML_ParserFree>
     2d0:	ldr	r1, [sp, #44]	; 0x2c
     2d4:	add	r5, sp, #32
     2d8:	cmp	r1, #0
     2dc:	bmi	570 <coda_xml_parse+0x570>
     2e0:	mov	r4, #36	; 0x24
     2e4:	b	2fc <coda_xml_parse+0x2fc>
     2e8:	sub	r2, r4, #36	; 0x24
     2ec:	add	r0, r4, #1
     2f0:	cmp	r2, r1
     2f4:	mov	r4, r0
     2f8:	bge	570 <coda_xml_parse+0x570>
     2fc:	ldr	r0, [r5, r4, lsl #2]
     300:	cmp	r0, #0
     304:	beq	2e8 <coda_xml_parse+0x2e8>
     308:	bl	0 <coda_dynamic_type_delete>
     30c:	ldr	r1, [sp, #44]	; 0x2c
     310:	b	2e8 <coda_xml_parse+0x2e8>
     314:	cmp	r1, #0
     318:	add	r5, sp, #32
     31c:	bne	340 <coda_xml_parse+0x340>
     320:	ldr	r0, [sp, #32]
     324:	bl	0 <coda_XML_GetErrorCode>
     328:	bl	0 <coda_XML_ErrorString>
     32c:	movw	r1, #0
     330:	mov	r2, r0
     334:	mvn	r0, #13
     338:	movt	r1, #0
     33c:	bl	0 <coda_set_error>
     340:	ldr	r0, [sp, #32]
     344:	bl	0 <coda_XML_GetCurrentByteIndex>
     348:	add	r4, sp, #11
     34c:	mov	r2, r4
     350:	bl	0 <coda_str64>
     354:	ldr	r0, [sp, #32]
     358:	bl	0 <coda_XML_GetCurrentLineNumber>
     35c:	mov	r1, r0
     360:	movw	r0, #0
     364:	mov	r2, r4
     368:	movt	r0, #0
     36c:	bl	0 <coda_add_error_message>
     370:	ldr	r0, [sp, #32]
     374:	cmp	r0, #0
     378:	beq	380 <coda_xml_parse+0x380>
     37c:	bl	0 <coda_XML_ParserFree>
     380:	ldr	r1, [sp, #44]	; 0x2c
     384:	cmp	r1, #0
     388:	bmi	4d4 <coda_xml_parse+0x4d4>
     38c:	mov	r4, #36	; 0x24
     390:	b	3a8 <coda_xml_parse+0x3a8>
     394:	sub	r2, r4, #36	; 0x24
     398:	add	r0, r4, #1
     39c:	cmp	r2, r1
     3a0:	mov	r4, r0
     3a4:	bge	4d4 <coda_xml_parse+0x4d4>
     3a8:	ldr	r0, [r5, r4, lsl #2]
     3ac:	cmp	r0, #0
     3b0:	beq	394 <coda_xml_parse+0x394>
     3b4:	bl	0 <coda_dynamic_type_delete>
     3b8:	ldr	r1, [sp, #44]	; 0x2c
     3bc:	b	394 <coda_xml_parse+0x394>
     3c0:	ldr	r0, [sp, #176]	; 0xb0
     3c4:	str	r0, [r5, #20]
     3c8:	mvn	r0, #0
     3cc:	str	r0, [sp, #44]	; 0x2c
     3d0:	ldr	r0, [sp, #560]	; 0x230
     3d4:	cmp	r0, #0
     3d8:	beq	3e0 <coda_xml_parse+0x3e0>
     3dc:	bl	0 <coda_dynamic_type_delete>
     3e0:	mov	r4, #0
     3e4:	b	584 <coda_xml_parse+0x584>
     3e8:	ldr	r1, [sp, #176]	; 0xb0
     3ec:	cmp	r0, #0
     3f0:	str	r1, [r5, #20]
     3f4:	mvn	r1, #0
     3f8:	add	r5, sp, #32
     3fc:	str	r1, [sp, #44]	; 0x2c
     400:	beq	3d0 <coda_xml_parse+0x3d0>
     404:	bl	0 <coda_XML_ParserFree>
     408:	ldr	r1, [sp, #44]	; 0x2c
     40c:	cmp	r1, #0
     410:	bmi	3d0 <coda_xml_parse+0x3d0>
     414:	mov	r4, #36	; 0x24
     418:	b	430 <coda_xml_parse+0x430>
     41c:	sub	r2, r4, #36	; 0x24
     420:	add	r0, r4, #1
     424:	cmp	r2, r1
     428:	mov	r4, r0
     42c:	bge	3d0 <coda_xml_parse+0x3d0>
     430:	ldr	r0, [r5, r4, lsl #2]
     434:	cmp	r0, #0
     438:	beq	41c <coda_xml_parse+0x41c>
     43c:	bl	0 <coda_dynamic_type_delete>
     440:	ldr	r1, [sp, #44]	; 0x2c
     444:	b	41c <coda_xml_parse+0x41c>
     448:	add	r5, sp, #11
     44c:	mov	r0, r6
     450:	mov	r1, #0
     454:	mov	r2, r5
     458:	bl	0 <coda_str64>
     45c:	bl	0 <__errno_location>
     460:	ldr	r0, [r0]
     464:	bl	0 <strerror>
     468:	movw	r1, #0
     46c:	mov	r3, r0
     470:	mvn	r0, #21
     474:	mov	r2, r5
     478:	movt	r1, #0
     47c:	bl	0 <coda_set_error>
     480:	ldr	r0, [sp, #32]
     484:	cmp	r0, #0
     488:	beq	490 <coda_xml_parse+0x490>
     48c:	bl	0 <coda_XML_ParserFree>
     490:	ldr	r1, [sp, #44]	; 0x2c
     494:	add	r5, sp, #32
     498:	cmp	r1, #0
     49c:	bmi	4d4 <coda_xml_parse+0x4d4>
     4a0:	mov	r4, #36	; 0x24
     4a4:	b	4bc <coda_xml_parse+0x4bc>
     4a8:	sub	r2, r4, #36	; 0x24
     4ac:	add	r0, r4, #1
     4b0:	cmp	r2, r1
     4b4:	mov	r4, r0
     4b8:	bge	4d4 <coda_xml_parse+0x4d4>
     4bc:	ldr	r0, [r5, r4, lsl #2]
     4c0:	cmp	r0, #0
     4c4:	beq	4a8 <coda_xml_parse+0x4a8>
     4c8:	bl	0 <coda_dynamic_type_delete>
     4cc:	ldr	r1, [sp, #44]	; 0x2c
     4d0:	b	4a8 <coda_xml_parse+0x4a8>
     4d4:	ldr	r0, [sp, #560]	; 0x230
     4d8:	cmp	r0, #0
     4dc:	beq	4e4 <coda_xml_parse+0x4e4>
     4e0:	bl	0 <coda_dynamic_type_delete>
     4e4:	ldr	r0, [sp, #576]	; 0x240
     4e8:	cmp	r0, #0
     4ec:	beq	4f4 <coda_xml_parse+0x4f4>
     4f0:	bl	0 <free>
     4f4:	mvn	r4, #0
     4f8:	b	594 <coda_xml_parse+0x594>
     4fc:	bl	0 <__errno_location>
     500:	ldr	r0, [r0]
     504:	bl	0 <strerror>
     508:	movw	r1, #0
     50c:	mov	r2, r0
     510:	mvn	r0, #21
     514:	movt	r1, #0
     518:	bl	0 <coda_set_error>
     51c:	ldr	r0, [sp, #32]
     520:	cmp	r0, #0
     524:	beq	52c <coda_xml_parse+0x52c>
     528:	bl	0 <coda_XML_ParserFree>
     52c:	ldr	r1, [sp, #44]	; 0x2c
     530:	add	r5, sp, #32
     534:	cmp	r1, #0
     538:	bmi	570 <coda_xml_parse+0x570>
     53c:	mov	r4, #36	; 0x24
     540:	b	558 <coda_xml_parse+0x558>
     544:	sub	r2, r4, #36	; 0x24
     548:	add	r0, r4, #1
     54c:	cmp	r2, r1
     550:	mov	r4, r0
     554:	bge	570 <coda_xml_parse+0x570>
     558:	ldr	r0, [r5, r4, lsl #2]
     55c:	cmp	r0, #0
     560:	beq	544 <coda_xml_parse+0x544>
     564:	bl	0 <coda_dynamic_type_delete>
     568:	ldr	r1, [sp, #44]	; 0x2c
     56c:	b	544 <coda_xml_parse+0x544>
     570:	ldr	r0, [sp, #560]	; 0x230
     574:	cmp	r0, #0
     578:	beq	580 <coda_xml_parse+0x580>
     57c:	bl	0 <coda_dynamic_type_delete>
     580:	mvn	r4, #0
     584:	ldr	r0, [sp, #576]	; 0x240
     588:	cmp	r0, #0
     58c:	beq	594 <coda_xml_parse+0x594>
     590:	bl	0 <free>
     594:	mov	r0, r4
     598:	sub	sp, fp, #28
     59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5a0:	movw	r0, #0
     5a4:	movw	r1, #0
     5a8:	movw	r3, #0
     5ac:	movw	r2, #774	; 0x306
     5b0:	movt	r0, #0
     5b4:	movt	r1, #0
     5b8:	movt	r3, #0
     5bc:	bl	0 <__assert_fail>
     5c0:	.word	0x00000400

000005c4 <start_element_handler>:
     5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5c8:	add	fp, sp, #28
     5cc:	sub	sp, sp, #20
     5d0:	mov	r6, r1
     5d4:	ldr	r1, [r0, #12]
     5d8:	add	r7, r0, #144	; 0x90
     5dc:	mov	r4, r0
     5e0:	ldr	r8, [r7, r1, lsl #2]
     5e4:	cmp	r8, #0
     5e8:	beq	634 <start_element_handler+0x70>
     5ec:	ldr	r0, [r8, #4]
     5f0:	ldr	r0, [r0]
     5f4:	cmp	r0, #2
     5f8:	bne	654 <start_element_handler+0x90>
     5fc:	mov	r5, r2
     600:	mov	r0, #0
     604:	add	r2, r1, #1
     608:	cmp	r1, #31
     60c:	str	r0, [r4, #536]	; 0x218
     610:	str	r2, [r4, #12]
     614:	blt	680 <start_element_handler+0xbc>
     618:	movw	r0, #65236	; 0xfed4
     61c:	movw	r1, #0
     620:	mov	r2, #32
     624:	movt	r0, #65535	; 0xffff
     628:	movt	r1, #0
     62c:	bl	0 <coda_set_error>
     630:	b	710 <start_element_handler+0x14c>
     634:	add	r0, r4, r1, lsl #2
     638:	movw	r1, #0
     63c:	movt	r1, #0
     640:	ldr	r2, [r0, #400]	; 0x190
     644:	movw	r0, #65236	; 0xfed4
     648:	movt	r0, #65535	; 0xffff
     64c:	bl	0 <coda_set_error>
     650:	b	710 <start_element_handler+0x14c>
     654:	add	r1, r4, r1, lsl #2
     658:	ldr	r5, [r1, #400]	; 0x190
     65c:	bl	0 <coda_type_get_format_name>
     660:	movw	r1, #0
     664:	mov	r3, r0
     668:	movw	r0, #65236	; 0xfed4
     66c:	mov	r2, r5
     670:	movt	r0, #65535	; 0xffff
     674:	movt	r1, #0
     678:	bl	0 <coda_set_error>
     67c:	b	710 <start_element_handler+0x14c>
     680:	str	r0, [r7, r2, lsl #2]
     684:	str	r8, [sp, #16]
     688:	mov	r1, r6
     68c:	ldr	r0, [r8, #4]
     690:	ldr	r0, [r0, #44]	; 0x2c
     694:	bl	0 <coda_hashtable_get_index_from_name>
     698:	cmn	r0, #1
     69c:	str	r7, [sp, #8]
     6a0:	bgt	6c8 <start_element_handler+0x104>
     6a4:	ldr	r0, [r8, #4]
     6a8:	ldr	r9, [r0, #44]	; 0x2c
     6ac:	mov	r0, r6
     6b0:	bl	0 <coda_element_name_from_xml_name>
     6b4:	mov	r1, r0
     6b8:	mov	r0, r9
     6bc:	bl	0 <coda_hashtable_get_index_from_name>
     6c0:	cmn	r0, #1
     6c4:	ble	7f8 <start_element_handler+0x234>
     6c8:	mov	r9, r0
     6cc:	str	r6, [sp, #12]
     6d0:	ldr	r0, [r4, #12]
     6d4:	add	sl, r4, #16
     6d8:	add	r6, r4, #400	; 0x190
     6dc:	add	r1, r4, r0, lsl #2
     6e0:	add	r2, r6, r0, lsl #2
     6e4:	str	r9, [r1, #272]	; 0x110
     6e8:	ldr	r1, [r8, #4]
     6ec:	ldr	r1, [r1, #52]	; 0x34
     6f0:	ldr	r1, [r1, r9, lsl #2]
     6f4:	add	r1, r1, #8
     6f8:	str	r1, [sl, r0, lsl #2]
     6fc:	mov	r1, r9
     700:	ldr	r0, [r8, #4]
     704:	bl	0 <coda_type_get_record_field_real_name>
     708:	cmp	r0, #0
     70c:	beq	72c <start_element_handler+0x168>
     710:	ldr	r0, [r4]
     714:	mov	r1, #0
     718:	bl	0 <coda_XML_StopParser>
     71c:	mov	r0, #1
     720:	str	r0, [r4, #4]
     724:	sub	sp, fp, #28
     728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     72c:	ldr	r0, [r4, #12]
     730:	ldr	r1, [sl, r0, lsl #2]
     734:	ldr	r8, [r1]
     738:	ldr	r1, [r8, #8]
     73c:	cmp	r1, #1
     740:	bne	7a8 <start_element_handler+0x1e4>
     744:	ldr	r1, [r8]
     748:	mov	r6, r5
     74c:	cmp	r1, #2
     750:	bne	970 <start_element_handler+0x3ac>
     754:	ldr	r1, [sp, #16]
     758:	ldr	r1, [r1, #20]
     75c:	ldr	r1, [r1, r9, lsl #2]
     760:	cmp	r1, #0
     764:	bne	798 <start_element_handler+0x1d4>
     768:	mov	r0, r8
     76c:	mov	r1, #0
     770:	bl	0 <coda_mem_array_new>
     774:	ldr	r1, [sp, #16]
     778:	ldr	r1, [r1, #20]
     77c:	str	r0, [r1, r9, lsl #2]
     780:	ldr	r0, [sp, #16]
     784:	ldr	r0, [r0, #20]
     788:	ldr	r0, [r0, r9, lsl #2]
     78c:	cmp	r0, #0
     790:	beq	710 <start_element_handler+0x14c>
     794:	ldr	r0, [r4, #12]
     798:	add	r1, r8, #40	; 0x28
     79c:	str	r1, [sl, r0, lsl #2]
     7a0:	ldr	r8, [r8, #40]	; 0x28
     7a4:	b	970 <start_element_handler+0x3ac>
     7a8:	ldr	r1, [sp, #16]
     7ac:	ldr	r1, [r1, #20]
     7b0:	ldr	r1, [r1, r9, lsl #2]
     7b4:	cmp	r1, #0
     7b8:	beq	96c <start_element_handler+0x3a8>
     7bc:	ldr	r1, [r4, #532]	; 0x214
     7c0:	cmp	r1, #0
     7c4:	beq	8bc <start_element_handler+0x2f8>
     7c8:	mov	r0, #2
     7cc:	bl	0 <coda_type_array_new>
     7d0:	cmp	r0, #0
     7d4:	beq	710 <start_element_handler+0x14c>
     7d8:	mov	r1, r8
     7dc:	mov	r7, r0
     7e0:	bl	0 <coda_type_array_set_base_type>
     7e4:	cmp	r0, #0
     7e8:	beq	8f4 <start_element_handler+0x330>
     7ec:	mov	r0, r7
     7f0:	bl	0 <coda_type_release>
     7f4:	b	710 <start_element_handler+0x14c>
     7f8:	ldr	r0, [r4, #532]	; 0x214
     7fc:	cmp	r0, #0
     800:	beq	894 <start_element_handler+0x2d0>
     804:	mov	r0, #2
     808:	bl	0 <coda_type_record_new>
     80c:	cmp	r0, #0
     810:	beq	710 <start_element_handler+0x14c>
     814:	mov	sl, r0
     818:	ldr	r0, [r8, #4]
     81c:	mov	r1, r6
     820:	mov	r2, sl
     824:	bl	0 <coda_type_record_create_field>
     828:	mov	r9, r0
     82c:	mov	r0, sl
     830:	bl	0 <coda_type_release>
     834:	cmp	r9, #0
     838:	bne	710 <start_element_handler+0x14c>
     83c:	ldr	r1, [r8, #4]
     840:	add	r0, sp, #16
     844:	str	r6, [sp, #12]
     848:	bl	0 <coda_mem_type_update>
     84c:	cmp	r0, #0
     850:	bne	710 <start_element_handler+0x14c>
     854:	ldr	r0, [r4, #12]
     858:	ldr	r1, [sp, #8]
     85c:	add	r0, r1, r0, lsl #2
     860:	ldr	r1, [r0, #-4]
     864:	ldr	r0, [sp, #16]
     868:	cmp	r0, r1
     86c:	bne	ad0 <start_element_handler+0x50c>
     870:	ldr	r0, [r0, #4]
     874:	ldr	r1, [sp, #12]
     878:	ldr	r0, [r0, #44]	; 0x2c
     87c:	bl	0 <coda_hashtable_get_index_from_name>
     880:	cmp	r0, #0
     884:	bmi	ae8 <start_element_handler+0x524>
     888:	ldr	r8, [sp, #16]
     88c:	mov	r9, r0
     890:	b	6d0 <start_element_handler+0x10c>
     894:	ldr	r1, [r4, #12]
     898:	movw	r0, #65236	; 0xfed4
     89c:	movt	r0, #65535	; 0xffff
     8a0:	cmp	r1, #1
     8a4:	bne	8dc <start_element_handler+0x318>
     8a8:	movw	r1, #0
     8ac:	mov	r2, r6
     8b0:	movt	r1, #0
     8b4:	bl	0 <coda_set_error>
     8b8:	b	710 <start_element_handler+0x14c>
     8bc:	add	r0, r6, r0, lsl #2
     8c0:	ldr	r2, [sp, #12]
     8c4:	movw	r1, #0
     8c8:	movt	r1, #0
     8cc:	ldr	r3, [r0, #-4]
     8d0:	movw	r0, #65236	; 0xfed4
     8d4:	movt	r0, #65535	; 0xffff
     8d8:	b	678 <start_element_handler+0xb4>
     8dc:	add	r1, r4, r1, lsl #2
     8e0:	mov	r2, r6
     8e4:	ldr	r3, [r1, #396]	; 0x18c
     8e8:	movw	r1, #0
     8ec:	movt	r1, #0
     8f0:	b	678 <start_element_handler+0xb4>
     8f4:	ldr	r0, [r4, #12]
     8f8:	ldr	r0, [sl, r0, lsl #2]
     8fc:	str	r7, [r0]
     900:	mov	r0, r8
     904:	bl	0 <coda_type_release>
     908:	mov	r0, r7
     90c:	mov	r1, #0
     910:	bl	0 <coda_type_array_add_variable_dimension>
     914:	cmp	r0, #0
     918:	bne	710 <start_element_handler+0x14c>
     91c:	mov	r0, r7
     920:	mov	r1, #0
     924:	bl	0 <coda_mem_array_new>
     928:	cmp	r0, #0
     92c:	beq	710 <start_element_handler+0x14c>
     930:	mov	r8, r0
     934:	ldr	r0, [sp, #16]
     938:	ldr	r0, [r0, #20]
     93c:	ldr	r1, [r0, r9, lsl #2]
     940:	mov	r0, r8
     944:	bl	0 <coda_mem_array_add_element>
     948:	cmp	r0, #0
     94c:	bne	710 <start_element_handler+0x14c>
     950:	ldr	r0, [sp, #16]
     954:	add	r1, r7, #40	; 0x28
     958:	ldr	r0, [r0, #20]
     95c:	str	r8, [r0, r9, lsl #2]
     960:	ldr	r0, [r4, #12]
     964:	str	r1, [sl, r0, lsl #2]
     968:	ldr	r8, [r7, #40]	; 0x28
     96c:	mov	r6, r5
     970:	ldr	r0, [r8, #36]	; 0x24
     974:	cmp	r0, #0
     978:	beq	a54 <start_element_handler+0x490>
     97c:	ldr	r2, [r4, #532]	; 0x214
     980:	ldr	r1, [r4, #8]
     984:	mov	r3, r6
     988:	str	r2, [sp]
     98c:	ldr	r2, [sp, #12]
     990:	bl	103c <attribute_record_new>
     994:	cmp	r0, #0
     998:	str	r0, [r4, #528]	; 0x210
     99c:	beq	710 <start_element_handler+0x14c>
     9a0:	ldr	r0, [r8]
     9a4:	cmp	r0, #2
     9a8:	bne	ac8 <start_element_handler+0x504>
     9ac:	ldr	r0, [r8, #8]
     9b0:	cmp	r0, #0
     9b4:	bne	ac8 <start_element_handler+0x504>
     9b8:	ldr	r1, [r4, #528]	; 0x210
     9bc:	mov	r0, r8
     9c0:	bl	0 <coda_mem_record_new>
     9c4:	ldr	r1, [r4, #12]
     9c8:	ldr	r6, [sp, #8]
     9cc:	cmp	r0, #0
     9d0:	str	r0, [r6, r1, lsl #2]
     9d4:	beq	710 <start_element_handler+0x14c>
     9d8:	ldr	r0, [r0, #16]
     9dc:	cmp	r0, #1
     9e0:	blt	ac0 <start_element_handler+0x4fc>
     9e4:	mov	r5, #0
     9e8:	b	a00 <start_element_handler+0x43c>
     9ec:	ldr	r0, [r6, r1, lsl #2]
     9f0:	add	r5, r5, #1
     9f4:	ldr	r0, [r0, #16]
     9f8:	cmp	r5, r0
     9fc:	bge	ac0 <start_element_handler+0x4fc>
     a00:	ldr	r0, [r8, #52]	; 0x34
     a04:	ldr	r0, [r0, r5, lsl #2]
     a08:	ldr	r0, [r0, #8]
     a0c:	ldr	r2, [r0, #8]
     a10:	cmp	r2, #1
     a14:	bne	9ec <start_element_handler+0x428>
     a18:	ldr	r2, [r0]
     a1c:	cmp	r2, #2
     a20:	bne	9ec <start_element_handler+0x428>
     a24:	mov	r1, #0
     a28:	bl	0 <coda_mem_array_new>
     a2c:	ldr	r1, [r4, #12]
     a30:	ldr	r2, [r6, r1, lsl #2]
     a34:	ldr	r2, [r2, #20]
     a38:	str	r0, [r2, r5, lsl #2]
     a3c:	ldr	r0, [r6, r1, lsl #2]
     a40:	ldr	r0, [r0, #20]
     a44:	ldr	r0, [r0, r5, lsl #2]
     a48:	cmp	r0, #0
     a4c:	bne	9ec <start_element_handler+0x428>
     a50:	b	710 <start_element_handler+0x14c>
     a54:	mov	r0, #0
     a58:	str	r0, [r4, #528]	; 0x210
     a5c:	ldr	r0, [r4, #532]	; 0x214
     a60:	ldr	r2, [r6]
     a64:	cmp	r0, #0
     a68:	beq	aa0 <start_element_handler+0x4dc>
     a6c:	cmp	r2, #0
     a70:	bne	a88 <start_element_handler+0x4c4>
     a74:	ldr	r5, [sp, #12]
     a78:	mov	r0, r5
     a7c:	bl	0 <coda_element_name_from_xml_name>
     a80:	cmp	r0, r5
     a84:	beq	9a0 <start_element_handler+0x3dc>
     a88:	mov	r0, #2
     a8c:	bl	0 <coda_type_record_new>
     a90:	cmp	r0, #0
     a94:	str	r0, [r8, #36]	; 0x24
     a98:	bne	97c <start_element_handler+0x3b8>
     a9c:	b	710 <start_element_handler+0x14c>
     aa0:	cmp	r2, #0
     aa4:	beq	9a0 <start_element_handler+0x3dc>
     aa8:	movw	r0, #65236	; 0xfed4
     aac:	movw	r1, #0
     ab0:	movt	r0, #65535	; 0xffff
     ab4:	movt	r1, #0
     ab8:	bl	0 <coda_set_error>
     abc:	b	710 <start_element_handler+0x14c>
     ac0:	mov	r0, #0
     ac4:	str	r0, [r4, #528]	; 0x210
     ac8:	sub	sp, fp, #28
     acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ad0:	movw	r0, #0
     ad4:	movw	r1, #0
     ad8:	movw	r3, #0
     adc:	movw	r2, #394	; 0x18a
     ae0:	movt	r0, #0
     ae4:	b	afc <start_element_handler+0x538>
     ae8:	movw	r0, #0
     aec:	movw	r1, #0
     af0:	movw	r3, #0
     af4:	mov	r2, #396	; 0x18c
     af8:	movt	r0, #0
     afc:	movt	r1, #0
     b00:	movt	r3, #0
     b04:	bl	0 <__assert_fail>

00000b08 <end_element_handler>:
     b08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
     b0c:	add	fp, sp, #24
     b10:	sub	sp, sp, #8
     b14:	mov	r4, r0
     b18:	ldr	r0, [r0, #4]
     b1c:	cmp	r0, #0
     b20:	beq	b2c <end_element_handler+0x24>
     b24:	sub	sp, fp, #24
     b28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     b2c:	ldr	r1, [r4, #12]
     b30:	add	r9, r4, #144	; 0x90
     b34:	ldr	r0, [r9, r1, lsl #2]
     b38:	cmp	r0, #0
     b3c:	beq	d28 <end_element_handler+0x220>
     b40:	ldr	r2, [r4, #536]	; 0x218
     b44:	cmp	r2, #1
     b48:	blt	b88 <end_element_handler+0x80>
     b4c:	ldr	r3, [r4, #544]	; 0x220
     b50:	cmp	r3, #0
     b54:	beq	e88 <end_element_handler+0x380>
     b58:	movw	r5, #19
     b5c:	mov	r6, #1
     b60:	movt	r5, #128	; 0x80
     b64:	ldrb	r7, [r3]
     b68:	sub	r7, r7, #9
     b6c:	cmp	r7, #23
     b70:	bhi	bc4 <end_element_handler+0xbc>
     b74:	tst	r5, r6, lsl r7
     b78:	beq	bc4 <end_element_handler+0xbc>
     b7c:	add	r3, r3, #1
     b80:	subs	r2, r2, #1
     b84:	bne	b64 <end_element_handler+0x5c>
     b88:	ldr	r2, [r4, #532]	; 0x214
     b8c:	cmp	r2, #0
     b90:	beq	c00 <end_element_handler+0xf8>
     b94:	mov	r0, #0
     b98:	ldr	r5, [r9, r1, lsl #2]
     b9c:	str	r0, [r9, r1, lsl #2]
     ba0:	ldr	r0, [r4, #528]	; 0x210
     ba4:	cmp	r0, #0
     ba8:	beq	dcc <end_element_handler+0x2c4>
     bac:	movw	r0, #0
     bb0:	movw	r1, #0
     bb4:	movw	r3, #0
     bb8:	movw	r2, #685	; 0x2ad
     bbc:	movt	r0, #0
     bc0:	b	e1c <end_element_handler+0x314>
     bc4:	ldr	r2, [r4, #532]	; 0x214
     bc8:	cmp	r2, #0
     bcc:	beq	ea8 <end_element_handler+0x3a0>
     bd0:	ldr	r2, [r0, #4]
     bd4:	ldr	r2, [r2, #48]	; 0x30
     bd8:	cmp	r2, #1
     bdc:	blt	c7c <end_element_handler+0x174>
     be0:	add	r0, r4, r1, lsl #2
     be4:	movw	r1, #0
     be8:	movt	r1, #0
     bec:	ldr	r2, [r0, #400]	; 0x190
     bf0:	movw	r0, #65236	; 0xfed4
     bf4:	movt	r0, #65535	; 0xffff
     bf8:	bl	0 <coda_set_error>
     bfc:	b	e6c <end_element_handler+0x364>
     c00:	bl	0 <coda_mem_record_validate>
     c04:	cmp	r0, #0
     c08:	bne	e6c <end_element_handler+0x364>
     c0c:	ldr	r1, [r4, #12]
     c10:	ldr	r0, [r9, r1, lsl #2]
     c14:	ldr	r2, [r0, #16]
     c18:	cmp	r2, #1
     c1c:	blt	b94 <end_element_handler+0x8c>
     c20:	mov	r5, #0
     c24:	b	c40 <end_element_handler+0x138>
     c28:	ldr	r1, [r4, #12]
     c2c:	ldr	r0, [r9, r1, lsl #2]
     c30:	add	r5, r5, #1
     c34:	ldr	r2, [r0, #16]
     c38:	cmp	r5, r2
     c3c:	bge	b94 <end_element_handler+0x8c>
     c40:	ldr	r0, [r0, #20]
     c44:	ldr	r0, [r0, r5, lsl #2]
     c48:	cmp	r0, #0
     c4c:	beq	c2c <end_element_handler+0x124>
     c50:	ldr	r2, [r0, #4]
     c54:	ldr	r3, [r2, #8]
     c58:	cmp	r3, #1
     c5c:	bne	c2c <end_element_handler+0x124>
     c60:	ldr	r2, [r2]
     c64:	cmp	r2, #2
     c68:	bne	c2c <end_element_handler+0x124>
     c6c:	bl	0 <coda_mem_array_validate>
     c70:	cmp	r0, #0
     c74:	beq	c28 <end_element_handler+0x120>
     c78:	b	e6c <end_element_handler+0x364>
     c7c:	ldr	r0, [r0, #12]
     c80:	mov	r2, #0
     c84:	str	r0, [r4, #528]	; 0x210
     c88:	ldr	r0, [r9, r1, lsl #2]
     c8c:	str	r2, [r0, #12]
     c90:	add	r0, r4, r1, lsl #2
     c94:	ldr	r6, [r0, #16]
     c98:	ldr	r0, [r6]
     c9c:	ldr	r1, [r0, #8]
     ca0:	cmp	r1, #0
     ca4:	ldreq	r0, [r0]
     ca8:	cmpeq	r0, #2
     cac:	beq	cd0 <end_element_handler+0x1c8>
     cb0:	movw	r0, #0
     cb4:	movw	r1, #0
     cb8:	movw	r3, #0
     cbc:	mov	r2, #70	; 0x46
     cc0:	movt	r0, #0
     cc4:	movt	r1, #0
     cc8:	movt	r3, #0
     ccc:	bl	0 <__assert_fail>
     cd0:	mov	r0, #2
     cd4:	bl	0 <coda_type_text_new>
     cd8:	cmp	r0, #0
     cdc:	beq	e6c <end_element_handler+0x364>
     ce0:	mov	r5, r0
     ce4:	ldr	r0, [r6]
     ce8:	ldr	r1, [r0, #36]	; 0x24
     cec:	cmp	r1, #0
     cf0:	beq	d08 <end_element_handler+0x200>
     cf4:	str	r1, [r5, #36]	; 0x24
     cf8:	ldr	r0, [r1, #4]
     cfc:	add	r0, r0, #1
     d00:	str	r0, [r1, #4]
     d04:	ldr	r0, [r6]
     d08:	bl	0 <coda_type_release>
     d0c:	str	r5, [r6]
     d10:	ldr	r0, [r4, #12]
     d14:	ldr	r0, [r9, r0, lsl #2]
     d18:	bl	0 <coda_dynamic_type_delete>
     d1c:	ldr	r1, [r4, #12]
     d20:	mov	r0, #0
     d24:	str	r0, [r9, r1, lsl #2]
     d28:	add	r0, r4, r1, lsl #2
     d2c:	ldr	r0, [r0, #16]
     d30:	ldr	r5, [r0]
     d34:	ldr	r0, [r5, #8]
     d38:	cmp	r0, #6
     d3c:	bne	d98 <end_element_handler+0x290>
     d40:	ldr	r0, [r4, #532]	; 0x214
     d44:	cmp	r0, #0
     d48:	bne	ec0 <end_element_handler+0x3b8>
     d4c:	ldr	r1, [r4, #544]	; 0x220
     d50:	ldr	r3, [r4, #536]	; 0x218
     d54:	ldr	r2, [r4, #8]
     d58:	ldr	r0, [r5, #44]	; 0x2c
     d5c:	str	r1, [sp]
     d60:	mov	r1, #0
     d64:	bl	0 <coda_mem_data_new>
     d68:	cmp	r0, #0
     d6c:	beq	e6c <end_element_handler+0x364>
     d70:	mov	r6, r4
     d74:	mov	r8, r0
     d78:	mov	r0, r5
     d7c:	ldr	r1, [r6, #528]!	; 0x210
     d80:	mov	r2, r8
     d84:	bl	0 <coda_mem_time_new>
     d88:	cmp	r0, #0
     d8c:	beq	e64 <end_element_handler+0x35c>
     d90:	mov	r5, r0
     d94:	b	dc4 <end_element_handler+0x2bc>
     d98:	mov	r6, r4
     d9c:	ldr	r1, [r6, #528]!	; 0x210
     da0:	ldr	r0, [r6, #16]
     da4:	ldr	r3, [r6, #8]
     da8:	ldr	r2, [r6, #-520]	; 0xfffffdf8
     dac:	str	r0, [sp]
     db0:	mov	r0, r5
     db4:	bl	0 <coda_mem_data_new>
     db8:	mov	r5, r0
     dbc:	cmp	r0, #0
     dc0:	beq	e6c <end_element_handler+0x364>
     dc4:	mov	r0, #0
     dc8:	str	r0, [r6]
     dcc:	ldr	r0, [r4, #12]
     dd0:	add	r1, r4, r0, lsl #2
     dd4:	ldr	r2, [r1, #272]	; 0x110
     dd8:	sub	r1, r0, #1
     ddc:	ldr	r0, [r9, r1, lsl #2]
     de0:	ldr	r3, [r0, #20]
     de4:	ldr	r0, [r3, r2, lsl #2]
     de8:	cmp	r0, #0
     dec:	beq	e28 <end_element_handler+0x320>
     df0:	ldr	r1, [r0, #4]
     df4:	ldr	r2, [r1, #8]
     df8:	cmp	r2, #1
     dfc:	ldreq	r1, [r1]
     e00:	cmpeq	r1, #2
     e04:	beq	e30 <end_element_handler+0x328>
     e08:	movw	r0, #0
     e0c:	movw	r1, #0
     e10:	movw	r3, #0
     e14:	movw	r2, #693	; 0x2b5
     e18:	movt	r0, #0
     e1c:	movt	r1, #0
     e20:	movt	r3, #0
     e24:	bl	0 <__assert_fail>
     e28:	str	r5, [r3, r2, lsl #2]
     e2c:	b	e50 <end_element_handler+0x348>
     e30:	mov	r1, r5
     e34:	bl	0 <coda_mem_array_add_element>
     e38:	cmp	r0, #0
     e3c:	beq	e48 <end_element_handler+0x340>
     e40:	mov	r0, r5
     e44:	b	e68 <end_element_handler+0x360>
     e48:	ldr	r0, [r4, #12]
     e4c:	sub	r1, r0, #1
     e50:	mov	r0, #0
     e54:	str	r0, [r4, #536]	; 0x218
     e58:	str	r1, [r4, #12]
     e5c:	sub	sp, fp, #24
     e60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     e64:	mov	r0, r8
     e68:	bl	0 <coda_dynamic_type_delete>
     e6c:	ldr	r0, [r4]
     e70:	mov	r1, #0
     e74:	bl	0 <coda_XML_StopParser>
     e78:	mov	r0, #1
     e7c:	str	r0, [r4, #4]
     e80:	sub	sp, fp, #24
     e84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
     e88:	movw	r0, #0
     e8c:	movw	r1, #0
     e90:	movw	r3, #0
     e94:	mov	r2, #53	; 0x35
     e98:	movt	r0, #0
     e9c:	movt	r1, #0
     ea0:	movt	r3, #0
     ea4:	bl	0 <__assert_fail>
     ea8:	movw	r0, #0
     eac:	movw	r1, #0
     eb0:	movw	r3, #0
     eb4:	movw	r2, #590	; 0x24e
     eb8:	movt	r0, #0
     ebc:	b	e1c <end_element_handler+0x314>
     ec0:	movw	r0, #0
     ec4:	movw	r1, #0
     ec8:	movw	r3, #0
     ecc:	movw	r2, #619	; 0x26b
     ed0:	movt	r0, #0
     ed4:	b	e1c <end_element_handler+0x314>

00000ed8 <character_data_handler>:
     ed8:	push	{r4, r5, r6, r7, fp, lr}
     edc:	add	fp, sp, #16
     ee0:	sub	sp, sp, #8
     ee4:	mov	r4, r0
     ee8:	ldr	r0, [r0, #532]	; 0x214
     eec:	mov	r7, r2
     ef0:	mov	r6, r1
     ef4:	cmp	r0, #0
     ef8:	beq	f54 <character_data_handler+0x7c>
     efc:	ldr	r2, [r4, #536]	; 0x218
     f00:	ldr	r3, [r4, #540]	; 0x21c
     f04:	ldr	r0, [r4, #544]	; 0x220
     f08:	add	r1, r2, r7
     f0c:	cmp	r1, r3
     f10:	ble	f30 <character_data_handler+0x58>
     f14:	bl	0 <realloc>
     f18:	cmp	r0, #0
     f1c:	beq	fb4 <character_data_handler+0xdc>
     f20:	ldr	r2, [r4, #536]	; 0x218
     f24:	add	r1, r2, r7
     f28:	str	r1, [r4, #540]	; 0x21c
     f2c:	str	r0, [r4, #544]	; 0x220
     f30:	add	r0, r0, r2
     f34:	mov	r1, r6
     f38:	mov	r2, r7
     f3c:	bl	0 <memcpy>
     f40:	ldr	r0, [r4, #536]	; 0x218
     f44:	add	r0, r0, r7
     f48:	str	r0, [r4, #536]	; 0x218
     f4c:	sub	sp, fp, #16
     f50:	pop	{r4, r5, r6, r7, fp, pc}
     f54:	ldr	r0, [r4, #12]
     f58:	add	ip, r4, r0, lsl #2
     f5c:	ldr	r0, [ip, #144]	; 0x90
     f60:	cmp	r0, #0
     f64:	beq	efc <character_data_handler+0x24>
     f68:	cmp	r6, #0
     f6c:	beq	1014 <character_data_handler+0x13c>
     f70:	cmp	r7, #1
     f74:	blt	efc <character_data_handler+0x24>
     f78:	movw	r2, #19
     f7c:	mov	r1, #1
     f80:	mov	r3, r6
     f84:	mov	r5, r7
     f88:	movt	r2, #128	; 0x80
     f8c:	ldrb	r0, [r3]
     f90:	sub	r0, r0, #9
     f94:	cmp	r0, #23
     f98:	bhi	fe0 <character_data_handler+0x108>
     f9c:	tst	r2, r1, lsl r0
     fa0:	beq	fe0 <character_data_handler+0x108>
     fa4:	add	r3, r3, #1
     fa8:	subs	r5, r5, #1
     fac:	bne	f8c <character_data_handler+0xb4>
     fb0:	b	efc <character_data_handler+0x24>
     fb4:	ldr	r0, [r4, #536]	; 0x218
     fb8:	movw	r1, #731	; 0x2db
     fbc:	movw	r3, #0
     fc0:	str	r1, [sp]
     fc4:	movw	r1, #0
     fc8:	movt	r3, #0
     fcc:	movt	r1, #0
     fd0:	add	r2, r0, r7
     fd4:	mvn	r0, #0
     fd8:	bl	0 <coda_set_error>
     fdc:	b	ff8 <character_data_handler+0x120>
     fe0:	ldr	r2, [ip, #400]	; 0x190
     fe4:	movw	r0, #65236	; 0xfed4
     fe8:	movw	r1, #0
     fec:	movt	r0, #65535	; 0xffff
     ff0:	movt	r1, #0
     ff4:	bl	0 <coda_set_error>
     ff8:	ldr	r0, [r4]
     ffc:	mov	r1, #0
    1000:	bl	0 <coda_XML_StopParser>
    1004:	mov	r0, #1
    1008:	str	r0, [r4, #4]
    100c:	sub	sp, fp, #16
    1010:	pop	{r4, r5, r6, r7, fp, pc}
    1014:	movw	r0, #0
    1018:	movw	r1, #0
    101c:	movw	r3, #0
    1020:	mov	r2, #53	; 0x35
    1024:	movt	r0, #0
    1028:	movt	r1, #0
    102c:	movt	r3, #0
    1030:	bl	0 <__assert_fail>

00001034 <not_standalone_handler>:
    1034:	mov	r0, #0
    1038:	bx	lr

0000103c <attribute_record_new>:
    103c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1040:	add	fp, sp, #28
    1044:	sub	sp, sp, #12
    1048:	cmp	r0, #0
    104c:	beq	13e0 <attribute_record_new+0x3a4>
    1050:	mov	r9, r1
    1054:	mov	r1, #0
    1058:	mov	r5, r3
    105c:	mov	r7, r2
    1060:	mov	r8, r0
    1064:	bl	0 <coda_mem_record_new>
    1068:	mov	sl, r0
    106c:	mov	r0, r7
    1070:	bl	0 <coda_element_name_from_xml_name>
    1074:	cmp	r0, r7
    1078:	beq	11f0 <attribute_record_new+0x1b4>
    107c:	ldr	r0, [r8, #44]	; 0x2c
    1080:	movw	r1, #0
    1084:	movt	r1, #0
    1088:	bl	0 <coda_hashtable_get_index_from_name>
    108c:	ldr	r1, [fp, #8]
    1090:	cmp	r1, #0
    1094:	beq	10f4 <attribute_record_new+0xb8>
    1098:	cmn	r0, #1
    109c:	ble	1174 <attribute_record_new+0x138>
    10a0:	ldr	r1, [sl, #20]
    10a4:	ldr	r1, [r1, r0, lsl #2]
    10a8:	cmp	r1, #0
    10ac:	bne	1400 <attribute_record_new+0x3c4>
    10b0:	ldr	r1, [r8, #52]	; 0x34
    10b4:	ldr	r0, [r1, r0, lsl #2]
    10b8:	ldr	r4, [r0, #8]
    10bc:	mov	r0, r7
    10c0:	bl	0 <coda_element_name_from_xml_name>
    10c4:	mvn	r1, r7
    10c8:	mov	r2, r9
    10cc:	str	r7, [sp]
    10d0:	mov	r6, #0
    10d4:	add	r3, r0, r1
    10d8:	mov	r0, r4
    10dc:	mov	r1, #0
    10e0:	bl	0 <coda_mem_data_new>
    10e4:	mov	r4, r0
    10e8:	cmp	r4, #0
    10ec:	bne	11c4 <attribute_record_new+0x188>
    10f0:	b	13c8 <attribute_record_new+0x38c>
    10f4:	cmp	r0, #0
    10f8:	bmi	11f0 <attribute_record_new+0x1b4>
    10fc:	ldr	r1, [r8, #52]	; 0x34
    1100:	ldr	r0, [r1, r0, lsl #2]
    1104:	ldr	r4, [r0, #8]
    1108:	mov	r0, r7
    110c:	bl	0 <coda_element_name_from_xml_name>
    1110:	mvn	r1, r7
    1114:	mov	r2, r9
    1118:	str	r7, [sp]
    111c:	mov	r7, #0
    1120:	add	r3, r0, r1
    1124:	mov	r0, r4
    1128:	mov	r1, #0
    112c:	bl	0 <coda_mem_data_new>
    1130:	cmp	r0, #0
    1134:	beq	1168 <attribute_record_new+0x12c>
    1138:	movw	r1, #0
    113c:	mov	r4, r0
    1140:	mov	r0, sl
    1144:	mov	r3, #0
    1148:	mov	r7, #0
    114c:	movt	r1, #0
    1150:	mov	r2, r4
    1154:	bl	0 <coda_mem_record_add_field>
    1158:	cmp	r0, #0
    115c:	beq	11f0 <attribute_record_new+0x1b4>
    1160:	mov	r0, r4
    1164:	bl	0 <coda_dynamic_type_delete>
    1168:	mov	r0, sl
    116c:	bl	0 <coda_dynamic_type_delete>
    1170:	b	13d4 <attribute_record_new+0x398>
    1174:	mov	r0, #2
    1178:	bl	0 <coda_type_text_new>
    117c:	cmp	r0, #0
    1180:	beq	13c8 <attribute_record_new+0x38c>
    1184:	mov	r6, r0
    1188:	mov	r0, r7
    118c:	bl	0 <coda_element_name_from_xml_name>
    1190:	mvn	r1, r7
    1194:	mov	r2, r9
    1198:	str	r7, [sp]
    119c:	add	r3, r0, r1
    11a0:	mov	r0, r6
    11a4:	mov	r1, #0
    11a8:	bl	0 <coda_mem_data_new>
    11ac:	mov	r4, r0
    11b0:	mov	r0, r6
    11b4:	bl	0 <coda_type_release>
    11b8:	ldr	r6, [fp, #8]
    11bc:	cmp	r4, #0
    11c0:	beq	13c8 <attribute_record_new+0x38c>
    11c4:	movw	r1, #0
    11c8:	mov	r0, sl
    11cc:	mov	r2, r4
    11d0:	mov	r3, r6
    11d4:	movt	r1, #0
    11d8:	bl	0 <coda_mem_record_add_field>
    11dc:	cmp	r0, #0
    11e0:	beq	11f0 <attribute_record_new+0x1b4>
    11e4:	mov	r0, r4
    11e8:	bl	0 <coda_dynamic_type_delete>
    11ec:	b	13c8 <attribute_record_new+0x38c>
    11f0:	ldr	r7, [r5]
    11f4:	cmp	r7, #0
    11f8:	beq	131c <attribute_record_new+0x2e0>
    11fc:	add	r5, r5, #4
    1200:	b	1268 <attribute_record_new+0x22c>
    1204:	cmn	r6, #1
    1208:	beq	138c <attribute_record_new+0x350>
    120c:	ldr	r0, [r8, #52]	; 0x34
    1210:	ldr	r3, [r5]
    1214:	mov	r1, #0
    1218:	mov	r2, r9
    121c:	mov	r4, #0
    1220:	ldr	r0, [r0, r6, lsl #2]
    1224:	ldr	r0, [r0, #8]
    1228:	bl	0 <coda_mem_string_new>
    122c:	mov	r6, r0
    1230:	cmp	r6, #0
    1234:	beq	13c8 <attribute_record_new+0x38c>
    1238:	mov	r0, sl
    123c:	mov	r1, r7
    1240:	mov	r2, r6
    1244:	mov	r3, r4
    1248:	bl	0 <coda_mem_record_add_field>
    124c:	cmp	r0, #0
    1250:	bne	1380 <attribute_record_new+0x344>
    1254:	ldr	r7, [r5, #4]
    1258:	add	r0, r5, #8
    125c:	mov	r5, r0
    1260:	cmp	r7, #0
    1264:	beq	131c <attribute_record_new+0x2e0>
    1268:	ldr	r0, [r8, #44]	; 0x2c
    126c:	mov	r1, r7
    1270:	bl	0 <coda_hashtable_get_index_from_name>
    1274:	cmn	r0, #1
    1278:	ble	1284 <attribute_record_new+0x248>
    127c:	mov	r6, r0
    1280:	b	12b4 <attribute_record_new+0x278>
    1284:	ldr	r4, [r8, #44]	; 0x2c
    1288:	mov	r0, r7
    128c:	bl	0 <coda_element_name_from_xml_name>
    1290:	mov	r1, r0
    1294:	mov	r0, r4
    1298:	bl	0 <coda_hashtable_get_index_from_name>
    129c:	mov	r6, r0
    12a0:	cmp	r0, #0
    12a4:	bmi	12b4 <attribute_record_new+0x278>
    12a8:	mov	r0, r7
    12ac:	bl	0 <coda_element_name_from_xml_name>
    12b0:	mov	r7, r0
    12b4:	ldr	r0, [fp, #8]
    12b8:	cmp	r0, #0
    12bc:	beq	1204 <attribute_record_new+0x1c8>
    12c0:	cmn	r6, #1
    12c4:	ble	12dc <attribute_record_new+0x2a0>
    12c8:	ldr	r0, [sl, #20]
    12cc:	ldr	r0, [r0, r6, lsl #2]
    12d0:	cmp	r0, #0
    12d4:	bne	1254 <attribute_record_new+0x218>
    12d8:	b	120c <attribute_record_new+0x1d0>
    12dc:	mov	r0, #2
    12e0:	bl	0 <coda_type_text_new>
    12e4:	cmp	r0, #0
    12e8:	beq	13c8 <attribute_record_new+0x38c>
    12ec:	ldr	r3, [r5]
    12f0:	mov	r1, #0
    12f4:	mov	r2, r9
    12f8:	mov	r4, r0
    12fc:	bl	0 <coda_mem_string_new>
    1300:	mov	r6, r0
    1304:	mov	r0, r4
    1308:	bl	0 <coda_type_release>
    130c:	ldr	r4, [fp, #8]
    1310:	cmp	r6, #0
    1314:	bne	1238 <attribute_record_new+0x1fc>
    1318:	b	13c8 <attribute_record_new+0x38c>
    131c:	ldr	r0, [r8, #48]	; 0x30
    1320:	cmp	r0, #1
    1324:	blt	1378 <attribute_record_new+0x33c>
    1328:	ldr	r2, [r8, #52]	; 0x34
    132c:	mov	r1, #0
    1330:	mov	r3, #1
    1334:	b	1344 <attribute_record_new+0x308>
    1338:	add	r1, r1, #1
    133c:	cmp	r1, r0
    1340:	bge	1378 <attribute_record_new+0x33c>
    1344:	ldr	r7, [r2, r1, lsl #2]
    1348:	ldrb	r6, [r7, #16]
    134c:	cmp	r6, #0
    1350:	bne	1338 <attribute_record_new+0x2fc>
    1354:	ldr	r6, [sl, #20]
    1358:	ldr	r6, [r6, r1, lsl #2]
    135c:	cmp	r6, #0
    1360:	bne	1338 <attribute_record_new+0x2fc>
    1364:	ldr	r6, [fp, #8]
    1368:	cmp	r6, #0
    136c:	beq	13a4 <attribute_record_new+0x368>
    1370:	strb	r3, [r7, #16]
    1374:	b	1338 <attribute_record_new+0x2fc>
    1378:	mov	r7, sl
    137c:	b	13d4 <attribute_record_new+0x398>
    1380:	mov	r0, r6
    1384:	bl	0 <coda_dynamic_type_delete>
    1388:	b	13c8 <attribute_record_new+0x38c>
    138c:	ldr	r2, [r5, #-4]
    1390:	movw	r0, #65236	; 0xfed4
    1394:	movw	r1, #0
    1398:	movt	r0, #65535	; 0xffff
    139c:	movt	r1, #0
    13a0:	b	13c4 <attribute_record_new+0x388>
    13a4:	add	r2, sp, #8
    13a8:	mov	r0, r8
    13ac:	bl	0 <coda_type_get_record_field_real_name>
    13b0:	ldr	r2, [sp, #8]
    13b4:	movw	r0, #65236	; 0xfed4
    13b8:	movw	r1, #0
    13bc:	movt	r0, #65535	; 0xffff
    13c0:	movt	r1, #0
    13c4:	bl	0 <coda_set_error>
    13c8:	mov	r0, sl
    13cc:	bl	0 <coda_dynamic_type_delete>
    13d0:	mov	r7, #0
    13d4:	mov	r0, r7
    13d8:	sub	sp, fp, #28
    13dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e0:	movw	r0, #0
    13e4:	movw	r1, #0
    13e8:	movw	r3, #0
    13ec:	mov	r2, #97	; 0x61
    13f0:	movt	r0, #0
    13f4:	movt	r1, #0
    13f8:	movt	r3, #0
    13fc:	bl	0 <__assert_fail>
    1400:	movw	r0, #0
    1404:	movw	r1, #0
    1408:	movw	r3, #0
    140c:	mov	r2, #123	; 0x7b
    1410:	movt	r0, #0
    1414:	b	13f4 <attribute_record_new+0x3b8>
