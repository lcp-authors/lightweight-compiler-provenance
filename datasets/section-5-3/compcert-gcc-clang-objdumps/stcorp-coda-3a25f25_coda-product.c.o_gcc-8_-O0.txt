
../compcert-repos/stcorp-coda-3a25f25/CMakeFiles/coda_static.dir/libcoda/coda-product.c.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <get_file_size>:
       0:	str	fp, [sp, #-8]!
       4:	str	lr, [sp, #4]
       8:	add	fp, sp, #4
       c:	sub	sp, sp, #96	; 0x60
      10:	str	r0, [fp, #-96]	; 0xffffffa0
      14:	str	r1, [fp, #-100]	; 0xffffff9c
      18:	ldr	r3, [fp, #-96]	; 0xffffffa0
      1c:	cmp	r3, #0
      20:	beq	30 <get_file_size+0x30>
      24:	ldr	r3, [fp, #-100]	; 0xffffff9c
      28:	cmp	r3, #0
      2c:	bne	50 <get_file_size+0x50>
      30:	movw	r3, #0
      34:	movt	r3, #0
      38:	mov	r2, #162	; 0xa2
      3c:	movw	r1, #0
      40:	movt	r1, #0
      44:	movw	r0, #0
      48:	movt	r0, #0
      4c:	bl	0 <__assert_fail>
      50:	sub	r3, fp, #92	; 0x5c
      54:	mov	r1, r3
      58:	ldr	r0, [fp, #-96]	; 0xffffffa0
      5c:	bl	0 <stat>
      60:	mov	r3, r0
      64:	cmp	r3, #0
      68:	beq	cc <get_file_size+0xcc>
      6c:	bl	0 <__errno_location>
      70:	mov	r3, r0
      74:	ldr	r3, [r3]
      78:	cmp	r3, #2
      7c:	bne	98 <get_file_size+0x98>
      80:	ldr	r2, [fp, #-96]	; 0xffffffa0
      84:	movw	r1, #0
      88:	movt	r1, #0
      8c:	mvn	r0, #19
      90:	bl	0 <coda_set_error>
      94:	b	c4 <get_file_size+0xc4>
      98:	bl	0 <__errno_location>
      9c:	mov	r3, r0
      a0:	ldr	r3, [r3]
      a4:	mov	r0, r3
      a8:	bl	0 <strerror>
      ac:	mov	r3, r0
      b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
      b4:	movw	r1, #0
      b8:	movt	r1, #0
      bc:	mvn	r0, #20
      c0:	bl	0 <coda_set_error>
      c4:	mvn	r3, #0
      c8:	b	110 <get_file_size+0x110>
      cc:	ldr	r3, [fp, #-76]	; 0xffffffb4
      d0:	and	r3, r3, #32768	; 0x8000
      d4:	cmp	r3, #0
      d8:	bne	f8 <get_file_size+0xf8>
      dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
      e0:	movw	r1, #0
      e4:	movt	r1, #0
      e8:	mvn	r0, #20
      ec:	bl	0 <coda_set_error>
      f0:	mvn	r3, #0
      f4:	b	110 <get_file_size+0x110>
      f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
      fc:	mov	r2, r3
     100:	asr	r3, r2, #31
     104:	ldr	r1, [fp, #-100]	; 0xffffff9c
     108:	strd	r2, [r1]
     10c:	mov	r3, #0
     110:	mov	r0, r3
     114:	sub	sp, fp, #4
     118:	ldr	fp, [sp]
     11c:	add	sp, sp, #4
     120:	pop	{pc}		; (ldr pc, [sp], #4)

00000124 <get_format>:
     124:	strd	r4, [sp, #-24]!	; 0xffffffe8
     128:	strd	r6, [sp, #8]
     12c:	str	fp, [sp, #16]
     130:	str	lr, [sp, #20]
     134:	add	fp, sp, #20
     138:	sub	sp, sp, #632	; 0x278
     13c:	str	r0, [fp, #-640]	; 0xfffffd80
     140:	str	r1, [fp, #-644]	; 0xfffffd7c
     144:	ldr	r3, [fp, #-640]	; 0xfffffd80
     148:	ldrd	r2, [r3, #8]
     14c:	strd	r2, [fp, #-36]	; 0xffffffdc
     150:	sub	r3, fp, #636	; 0x27c
     154:	ldr	r1, [fp, #-640]	; 0xfffffd80
     158:	mov	r0, r3
     15c:	bl	0 <coda_cursor_set_product>
     160:	mov	r3, r0
     164:	cmp	r3, #0
     168:	beq	174 <get_format+0x50>
     16c:	mvn	r3, #0
     170:	b	704 <get_format+0x5e0>
     174:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     178:	mov	r2, #1
     17c:	str	r2, [r3]
     180:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     184:	cmp	r2, #4
     188:	sbcs	r3, r3, #0
     18c:	bge	198 <get_format+0x74>
     190:	mov	r3, #0
     194:	b	704 <get_format+0x5e0>
     198:	sub	r1, fp, #116	; 0x74
     19c:	sub	r0, fp, #636	; 0x27c
     1a0:	mov	r2, #4
     1a4:	mov	r3, #0
     1a8:	strd	r2, [sp]
     1ac:	mov	r2, #0
     1b0:	mov	r3, #0
     1b4:	bl	0 <coda_cursor_read_bytes>
     1b8:	mov	r3, r0
     1bc:	cmp	r3, #0
     1c0:	beq	1cc <get_format+0xa8>
     1c4:	mvn	r3, #0
     1c8:	b	704 <get_format+0x5e0>
     1cc:	sub	r3, fp, #116	; 0x74
     1d0:	mov	r2, #3
     1d4:	movw	r1, #0
     1d8:	movt	r1, #0
     1dc:	mov	r0, r3
     1e0:	bl	0 <memcmp>
     1e4:	mov	r3, r0
     1e8:	cmp	r3, #0
     1ec:	bne	228 <get_format+0x104>
     1f0:	ldrb	r3, [fp, #-113]	; 0xffffff8f
     1f4:	cmp	r3, #1
     1f8:	beq	214 <get_format+0xf0>
     1fc:	ldrb	r3, [fp, #-113]	; 0xffffff8f
     200:	cmp	r3, #2
     204:	beq	214 <get_format+0xf0>
     208:	ldrb	r3, [fp, #-113]	; 0xffffff8f
     20c:	cmp	r3, #5
     210:	bne	228 <get_format+0x104>
     214:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     218:	mov	r2, #6
     21c:	str	r2, [r3]
     220:	mov	r3, #0
     224:	b	704 <get_format+0x5e0>
     228:	sub	r3, fp, #116	; 0x74
     22c:	mov	r2, #4
     230:	movw	r1, #0
     234:	movt	r1, #0
     238:	mov	r0, r3
     23c:	bl	0 <memcmp>
     240:	mov	r3, r0
     244:	cmp	r3, #0
     248:	bne	260 <get_format+0x13c>
     24c:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     250:	mov	r2, #3
     254:	str	r2, [r3]
     258:	mov	r3, #0
     25c:	b	704 <get_format+0x5e0>
     260:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     264:	cmp	r2, #8
     268:	sbcs	r3, r3, #0
     26c:	bge	284 <get_format+0x160>
     270:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     274:	mov	r2, #1
     278:	str	r2, [r3]
     27c:	mov	r3, #0
     280:	b	704 <get_format+0x5e0>
     284:	sub	r3, fp, #116	; 0x74
     288:	add	r1, r3, #4
     28c:	sub	r0, fp, #636	; 0x27c
     290:	mov	r2, #4
     294:	mov	r3, #0
     298:	strd	r2, [sp]
     29c:	mov	r2, #4
     2a0:	mov	r3, #0
     2a4:	bl	0 <coda_cursor_read_bytes>
     2a8:	mov	r3, r0
     2ac:	cmp	r3, #0
     2b0:	beq	2bc <get_format+0x198>
     2b4:	mvn	r3, #0
     2b8:	b	704 <get_format+0x5e0>
     2bc:	sub	r3, fp, #116	; 0x74
     2c0:	mov	r2, #8
     2c4:	movw	r1, #0
     2c8:	movt	r1, #0
     2cc:	mov	r0, r3
     2d0:	bl	0 <memcmp>
     2d4:	mov	r3, r0
     2d8:	cmp	r3, #0
     2dc:	bne	2f4 <get_format+0x1d0>
     2e0:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     2e4:	mov	r2, #4
     2e8:	str	r2, [r3]
     2ec:	mov	r3, #0
     2f0:	b	704 <get_format+0x5e0>
     2f4:	sub	r3, fp, #116	; 0x74
     2f8:	mov	r2, #8
     2fc:	movw	r1, #0
     300:	movt	r1, #0
     304:	mov	r0, r3
     308:	bl	0 <memcmp>
     30c:	mov	r3, r0
     310:	cmp	r3, #0
     314:	beq	3a8 <get_format+0x284>
     318:	sub	r3, fp, #116	; 0x74
     31c:	mov	r2, #8
     320:	movw	r1, #0
     324:	movt	r1, #0
     328:	mov	r0, r3
     32c:	bl	0 <memcmp>
     330:	mov	r3, r0
     334:	cmp	r3, #0
     338:	beq	3a8 <get_format+0x284>
     33c:	sub	r3, fp, #116	; 0x74
     340:	mov	r2, #8
     344:	movw	r1, #0
     348:	movt	r1, #0
     34c:	mov	r0, r3
     350:	bl	0 <memcmp>
     354:	mov	r3, r0
     358:	cmp	r3, #0
     35c:	beq	3a8 <get_format+0x284>
     360:	sub	r3, fp, #116	; 0x74
     364:	mov	r2, #8
     368:	movw	r1, #0
     36c:	movt	r1, #0
     370:	mov	r0, r3
     374:	bl	0 <memcmp>
     378:	mov	r3, r0
     37c:	cmp	r3, #0
     380:	beq	3a8 <get_format+0x284>
     384:	sub	r3, fp, #116	; 0x74
     388:	mov	r2, #8
     38c:	movw	r1, #0
     390:	movt	r1, #0
     394:	mov	r0, r3
     398:	bl	0 <memcmp>
     39c:	mov	r3, r0
     3a0:	cmp	r3, #0
     3a4:	bne	3bc <get_format+0x298>
     3a8:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     3ac:	mov	r2, #5
     3b0:	str	r2, [r3]
     3b4:	mov	r3, #0
     3b8:	b	704 <get_format+0x5e0>
     3bc:	sub	r3, fp, #116	; 0x74
     3c0:	mov	r2, #4
     3c4:	movw	r1, #0
     3c8:	movt	r1, #0
     3cc:	mov	r0, r3
     3d0:	bl	0 <memcmp>
     3d4:	mov	r3, r0
     3d8:	cmp	r3, #0
     3dc:	bne	40c <get_format+0x2e8>
     3e0:	ldrb	r3, [fp, #-109]	; 0xffffff93
     3e4:	cmp	r3, #1
     3e8:	beq	3f8 <get_format+0x2d4>
     3ec:	ldrb	r3, [fp, #-109]	; 0xffffff93
     3f0:	cmp	r3, #2
     3f4:	bne	40c <get_format+0x2e8>
     3f8:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     3fc:	mov	r2, #7
     400:	str	r2, [r3]
     404:	mov	r3, #0
     408:	b	704 <get_format+0x5e0>
     40c:	sub	r3, fp, #116	; 0x74
     410:	mov	r2, #5
     414:	movw	r1, #0
     418:	movt	r1, #0
     41c:	mov	r0, r3
     420:	bl	0 <memcmp>
     424:	mov	r3, r0
     428:	cmp	r3, #0
     42c:	beq	454 <get_format+0x330>
     430:	sub	r3, fp, #116	; 0x74
     434:	mov	r2, #8
     438:	movw	r1, #0
     43c:	movt	r1, #0
     440:	mov	r0, r3
     444:	bl	0 <memcmp>
     448:	mov	r3, r0
     44c:	cmp	r3, #0
     450:	bne	468 <get_format+0x344>
     454:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     458:	mov	r2, #2
     45c:	str	r2, [r3]
     460:	mov	r3, #0
     464:	b	704 <get_format+0x5e0>
     468:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     46c:	cmp	r2, #40	; 0x28
     470:	sbcs	r3, r3, #0
     474:	bge	480 <get_format+0x35c>
     478:	mov	r3, #0
     47c:	b	704 <get_format+0x5e0>
     480:	sub	r3, fp, #116	; 0x74
     484:	add	r1, r3, #8
     488:	sub	r0, fp, #636	; 0x27c
     48c:	mov	r2, #32
     490:	mov	r3, #0
     494:	strd	r2, [sp]
     498:	mov	r2, #8
     49c:	mov	r3, #0
     4a0:	bl	0 <coda_cursor_read_bytes>
     4a4:	mov	r3, r0
     4a8:	cmp	r3, #0
     4ac:	beq	4b8 <get_format+0x394>
     4b0:	mvn	r3, #0
     4b4:	b	704 <get_format+0x5e0>
     4b8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     4bc:	cmp	r2, #60	; 0x3c
     4c0:	sbcs	r3, r3, #0
     4c4:	blt	5d8 <get_format+0x4b4>
     4c8:	ldrb	r3, [fp, #-116]	; 0xffffff8c
     4cc:	cmp	r3, #35	; 0x23
     4d0:	bne	5d8 <get_format+0x4b4>
     4d4:	ldrb	r3, [fp, #-115]	; 0xffffff8d
     4d8:	cmp	r3, #97	; 0x61
     4dc:	beq	4f8 <get_format+0x3d4>
     4e0:	ldrb	r3, [fp, #-115]	; 0xffffff8d
     4e4:	cmp	r3, #98	; 0x62
     4e8:	beq	4f8 <get_format+0x3d4>
     4ec:	ldrb	r3, [fp, #-115]	; 0xffffff8d
     4f0:	cmp	r3, #99	; 0x63
     4f4:	bne	5d8 <get_format+0x4b4>
     4f8:	ldrb	r3, [fp, #-114]	; 0xffffff8e
     4fc:	cmp	r3, #80	; 0x50
     500:	beq	510 <get_format+0x3ec>
     504:	ldrb	r3, [fp, #-114]	; 0xffffff8e
     508:	cmp	r3, #86	; 0x56
     50c:	bne	5d8 <get_format+0x4b4>
     510:	ldrb	r3, [fp, #-113]	; 0xffffff8f
     514:	cmp	r3, #47	; 0x2f
     518:	bls	5d8 <get_format+0x4b4>
     51c:	ldrb	r3, [fp, #-113]	; 0xffffff8f
     520:	cmp	r3, #57	; 0x39
     524:	bhi	5d8 <get_format+0x4b4>
     528:	ldrb	r3, [fp, #-112]	; 0xffffff90
     52c:	cmp	r3, #47	; 0x2f
     530:	bls	5d8 <get_format+0x4b4>
     534:	ldrb	r3, [fp, #-112]	; 0xffffff90
     538:	cmp	r3, #57	; 0x39
     53c:	bhi	5d8 <get_format+0x4b4>
     540:	ldrb	r3, [fp, #-111]	; 0xffffff91
     544:	cmp	r3, #47	; 0x2f
     548:	bls	5d8 <get_format+0x4b4>
     54c:	ldrb	r3, [fp, #-111]	; 0xffffff91
     550:	cmp	r3, #57	; 0x39
     554:	bhi	5d8 <get_format+0x4b4>
     558:	ldrb	r3, [fp, #-110]	; 0xffffff92
     55c:	cmp	r3, #47	; 0x2f
     560:	bls	5d8 <get_format+0x4b4>
     564:	ldrb	r3, [fp, #-110]	; 0xffffff92
     568:	cmp	r3, #57	; 0x39
     56c:	bhi	5d8 <get_format+0x4b4>
     570:	ldrb	r3, [fp, #-109]	; 0xffffff93
     574:	cmp	r3, #32
     578:	bne	5d8 <get_format+0x4b4>
     57c:	ldrb	r3, [fp, #-106]	; 0xffffff96
     580:	cmp	r3, #32
     584:	bne	5d8 <get_format+0x4b4>
     588:	ldrb	r3, [fp, #-103]	; 0xffffff99
     58c:	cmp	r3, #32
     590:	bne	5d8 <get_format+0x4b4>
     594:	ldrb	r3, [fp, #-100]	; 0xffffff9c
     598:	cmp	r3, #32
     59c:	bne	5d8 <get_format+0x4b4>
     5a0:	ldrb	r3, [fp, #-97]	; 0xffffff9f
     5a4:	cmp	r3, #32
     5a8:	bne	5d8 <get_format+0x4b4>
     5ac:	ldrb	r3, [fp, #-85]	; 0xffffffab
     5b0:	cmp	r3, #32
     5b4:	bne	5d8 <get_format+0x4b4>
     5b8:	ldrb	r3, [fp, #-77]	; 0xffffffb3
     5bc:	cmp	r3, #32
     5c0:	bne	5d8 <get_format+0x4b4>
     5c4:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     5c8:	mov	r2, #9
     5cc:	str	r2, [r3]
     5d0:	mov	r3, #0
     5d4:	b	704 <get_format+0x5e0>
     5d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     5dc:	cmp	r2, #80	; 0x50
     5e0:	sbcs	r3, r3, #0
     5e4:	bge	5f0 <get_format+0x4cc>
     5e8:	mov	r3, #0
     5ec:	b	704 <get_format+0x5e0>
     5f0:	sub	r1, fp, #116	; 0x74
     5f4:	sub	r0, fp, #636	; 0x27c
     5f8:	mov	r2, #20
     5fc:	mov	r3, #0
     600:	strd	r2, [sp]
     604:	mov	r2, #60	; 0x3c
     608:	mov	r3, #0
     60c:	bl	0 <coda_cursor_read_bytes>
     610:	mov	r3, r0
     614:	cmp	r3, #0
     618:	beq	624 <get_format+0x500>
     61c:	mvn	r3, #0
     620:	b	704 <get_format+0x5e0>
     624:	sub	r3, fp, #116	; 0x74
     628:	mov	r2, #20
     62c:	movw	r1, #0
     630:	movt	r1, #0
     634:	mov	r0, r3
     638:	bl	0 <memcmp>
     63c:	mov	r3, r0
     640:	cmp	r3, #0
     644:	bne	65c <get_format+0x538>
     648:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     64c:	mov	r2, #8
     650:	str	r2, [r3]
     654:	mov	r3, #0
     658:	b	704 <get_format+0x5e0>
     65c:	mov	r2, #512	; 0x200
     660:	mov	r3, #0
     664:	strd	r2, [fp, #-28]	; 0xffffffe4
     668:	b	6e4 <get_format+0x5c0>
     66c:	sub	r1, fp, #116	; 0x74
     670:	sub	r0, fp, #636	; 0x27c
     674:	mov	r2, #8
     678:	mov	r3, #0
     67c:	strd	r2, [sp]
     680:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     684:	bl	0 <coda_cursor_read_bytes>
     688:	mov	r3, r0
     68c:	cmp	r3, #0
     690:	beq	69c <get_format+0x578>
     694:	mvn	r3, #0
     698:	b	704 <get_format+0x5e0>
     69c:	sub	r3, fp, #116	; 0x74
     6a0:	mov	r2, #8
     6a4:	movw	r1, #0
     6a8:	movt	r1, #0
     6ac:	mov	r0, r3
     6b0:	bl	0 <memcmp>
     6b4:	mov	r3, r0
     6b8:	cmp	r3, #0
     6bc:	bne	6d4 <get_format+0x5b0>
     6c0:	ldr	r3, [fp, #-644]	; 0xfffffd7c
     6c4:	mov	r2, #4
     6c8:	str	r2, [r3]
     6cc:	mov	r3, #0
     6d0:	b	704 <get_format+0x5e0>
     6d4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     6d8:	adds	r6, r2, r2
     6dc:	adc	r7, r3, r3
     6e0:	strd	r6, [fp, #-28]	; 0xffffffe4
     6e4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
     6e8:	adds	r4, r2, #8
     6ec:	adc	r5, r3, #0
     6f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
     6f4:	cmp	r4, r2
     6f8:	sbcs	r3, r5, r3
     6fc:	blt	66c <get_format+0x548>
     700:	mov	r3, #0
     704:	mov	r0, r3
     708:	sub	sp, fp, #20
     70c:	ldrd	r4, [sp]
     710:	ldrd	r6, [sp, #8]
     714:	ldr	fp, [sp, #16]
     718:	add	sp, sp, #20
     71c:	pop	{pc}		; (ldr pc, [sp], #4)

00000720 <reopen_with_backend>:
     720:	str	fp, [sp, #-8]!
     724:	str	lr, [sp, #4]
     728:	add	fp, sp, #4
     72c:	sub	sp, sp, #8
     730:	str	r0, [fp, #-8]
     734:	str	r1, [fp, #-12]
     738:	ldr	r3, [fp, #-12]
     73c:	cmp	r3, #9
     740:	ldrls	pc, [pc, r3, lsl #2]
     744:	b	88c <reopen_with_backend+0x16c>
     748:	.word	0x00000770
     74c:	.word	0x0000088c
     750:	.word	0x00000790
     754:	.word	0x000007ac
     758:	.word	0x000007c0
     75c:	.word	0x000007d4
     760:	.word	0x000007f0
     764:	.word	0x0000080c
     768:	.word	0x00000828
     76c:	.word	0x00000844
     770:	movw	r3, #0
     774:	movt	r3, #0
     778:	movw	r2, #362	; 0x16a
     77c:	movw	r1, #0
     780:	movt	r1, #0
     784:	movw	r0, #0
     788:	movt	r0, #0
     78c:	bl	0 <__assert_fail>
     790:	ldr	r0, [fp, #-8]
     794:	bl	0 <coda_xml_reopen>
     798:	mov	r3, r0
     79c:	cmp	r3, #0
     7a0:	beq	860 <reopen_with_backend+0x140>
     7a4:	mvn	r3, #0
     7a8:	b	890 <reopen_with_backend+0x170>
     7ac:	mov	r1, #0
     7b0:	mvn	r0, #10
     7b4:	bl	0 <coda_set_error>
     7b8:	mvn	r3, #0
     7bc:	b	890 <reopen_with_backend+0x170>
     7c0:	mov	r1, #0
     7c4:	mvn	r0, #12
     7c8:	bl	0 <coda_set_error>
     7cc:	mvn	r3, #0
     7d0:	b	890 <reopen_with_backend+0x170>
     7d4:	ldr	r0, [fp, #-8]
     7d8:	bl	0 <coda_cdf_reopen>
     7dc:	mov	r3, r0
     7e0:	cmp	r3, #0
     7e4:	beq	868 <reopen_with_backend+0x148>
     7e8:	mvn	r3, #0
     7ec:	b	890 <reopen_with_backend+0x170>
     7f0:	ldr	r0, [fp, #-8]
     7f4:	bl	0 <coda_netcdf_reopen>
     7f8:	mov	r3, r0
     7fc:	cmp	r3, #0
     800:	beq	870 <reopen_with_backend+0x150>
     804:	mvn	r3, #0
     808:	b	890 <reopen_with_backend+0x170>
     80c:	ldr	r0, [fp, #-8]
     810:	bl	0 <coda_grib_reopen>
     814:	mov	r3, r0
     818:	cmp	r3, #0
     81c:	beq	878 <reopen_with_backend+0x158>
     820:	mvn	r3, #0
     824:	b	890 <reopen_with_backend+0x170>
     828:	ldr	r0, [fp, #-8]
     82c:	bl	0 <coda_rinex_reopen>
     830:	mov	r3, r0
     834:	cmp	r3, #0
     838:	beq	880 <reopen_with_backend+0x160>
     83c:	mvn	r3, #0
     840:	b	890 <reopen_with_backend+0x170>
     844:	ldr	r0, [fp, #-8]
     848:	bl	0 <coda_sp3_reopen>
     84c:	mov	r3, r0
     850:	cmp	r3, #0
     854:	beq	888 <reopen_with_backend+0x168>
     858:	mvn	r3, #0
     85c:	b	890 <reopen_with_backend+0x170>
     860:	nop	{0}
     864:	b	88c <reopen_with_backend+0x16c>
     868:	nop	{0}
     86c:	b	88c <reopen_with_backend+0x16c>
     870:	nop	{0}
     874:	b	88c <reopen_with_backend+0x16c>
     878:	nop	{0}
     87c:	b	88c <reopen_with_backend+0x16c>
     880:	nop	{0}
     884:	b	88c <reopen_with_backend+0x16c>
     888:	nop	{0}
     88c:	mov	r3, #0
     890:	mov	r0, r3
     894:	sub	sp, fp, #4
     898:	ldr	fp, [sp]
     89c:	add	sp, sp, #4
     8a0:	pop	{pc}		; (ldr pc, [sp], #4)

000008a4 <set_definition>:
     8a4:	str	r4, [sp, #-12]!
     8a8:	str	fp, [sp, #4]
     8ac:	str	lr, [sp, #8]
     8b0:	add	fp, sp, #8
     8b4:	sub	sp, sp, #28
     8b8:	str	r0, [fp, #-24]	; 0xffffffe8
     8bc:	str	r1, [fp, #-28]	; 0xffffffe4
     8c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     8c4:	cmp	r3, #0
     8c8:	bne	910 <set_definition+0x6c>
     8cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8d0:	ldr	r3, [r3]
     8d4:	ldr	r3, [r3, #16]
     8d8:	cmp	r3, #1
     8dc:	beq	8f4 <set_definition+0x50>
     8e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8e4:	ldr	r3, [r3]
     8e8:	ldr	r3, [r3, #16]
     8ec:	cmp	r3, #0
     8f0:	bne	908 <set_definition+0x64>
     8f4:	mov	r1, #0
     8f8:	mvn	r0, #199	; 0xc7
     8fc:	bl	0 <coda_set_error>
     900:	mvn	r3, #0
     904:	b	bb0 <set_definition+0x30c>
     908:	mov	r3, #0
     90c:	b	bb0 <set_definition+0x30c>
     910:	ldr	r3, [fp, #-24]	; 0xffffffe8
     914:	ldr	r3, [r3]
     918:	ldr	r2, [r3, #16]
     91c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     920:	ldr	r3, [r3]
     924:	cmp	r2, r3
     928:	beq	998 <set_definition+0xf4>
     92c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     930:	ldr	r3, [r3]
     934:	ldr	r3, [r3, #16]
     938:	cmp	r3, #1
     93c:	bne	950 <set_definition+0xac>
     940:	ldr	r3, [fp, #-28]	; 0xffffffe4
     944:	ldr	r3, [r3]
     948:	cmp	r3, #0
     94c:	beq	998 <set_definition+0xf4>
     950:	ldr	r3, [fp, #-28]	; 0xffffffe4
     954:	ldr	r3, [r3]
     958:	mov	r0, r3
     95c:	bl	0 <coda_type_get_format_name>
     960:	mov	r4, r0
     964:	ldr	r3, [fp, #-24]	; 0xffffffe8
     968:	ldr	r3, [r3]
     96c:	ldr	r3, [r3, #16]
     970:	mov	r0, r3
     974:	bl	0 <coda_type_get_format_name>
     978:	mov	r3, r0
     97c:	mov	r2, r4
     980:	movw	r1, #0
     984:	movt	r1, #0
     988:	mvn	r0, #199	; 0xc7
     98c:	bl	0 <coda_set_error>
     990:	mvn	r3, #0
     994:	b	bb0 <set_definition+0x30c>
     998:	ldr	r3, [fp, #-28]	; 0xffffffe4
     99c:	ldr	r3, [r3, #24]
     9a0:	cmp	r3, #0
     9a4:	bne	9c4 <set_definition+0x120>
     9a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
     9ac:	bl	0 <coda_read_product_definition>
     9b0:	mov	r3, r0
     9b4:	cmp	r3, #0
     9b8:	beq	9c4 <set_definition+0x120>
     9bc:	mvn	r3, #0
     9c0:	b	bb0 <set_definition+0x30c>
     9c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9c8:	ldr	r3, [r3]
     9cc:	cmp	r3, #1
     9d0:	beq	a08 <set_definition+0x164>
     9d4:	cmp	r3, #0
     9d8:	beq	9e8 <set_definition+0x144>
     9dc:	cmp	r3, #2
     9e0:	beq	a28 <set_definition+0x184>
     9e4:	b	a48 <set_definition+0x1a4>
     9e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
     9ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
     9f0:	bl	0 <coda_ascii_reopen_with_definition>
     9f4:	mov	r3, r0
     9f8:	cmp	r3, #0
     9fc:	beq	a5c <set_definition+0x1b8>
     a00:	mvn	r3, #0
     a04:	b	bb0 <set_definition+0x30c>
     a08:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a10:	bl	0 <coda_bin_reopen_with_definition>
     a14:	mov	r3, r0
     a18:	cmp	r3, #0
     a1c:	beq	a64 <set_definition+0x1c0>
     a20:	mvn	r3, #0
     a24:	b	bb0 <set_definition+0x30c>
     a28:	ldr	r1, [fp, #-28]	; 0xffffffe4
     a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
     a30:	bl	0 <coda_xml_reopen_with_definition>
     a34:	mov	r3, r0
     a38:	cmp	r3, #0
     a3c:	beq	a6c <set_definition+0x1c8>
     a40:	mvn	r3, #0
     a44:	b	bb0 <set_definition+0x30c>
     a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a4c:	ldr	r3, [r3]
     a50:	ldr	r2, [fp, #-28]	; 0xffffffe4
     a54:	str	r2, [r3, #24]
     a58:	b	a70 <set_definition+0x1cc>
     a5c:	nop	{0}
     a60:	b	a70 <set_definition+0x1cc>
     a64:	nop	{0}
     a68:	b	a70 <set_definition+0x1cc>
     a6c:	nop	{0}
     a70:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a74:	ldr	r3, [r3]
     a78:	ldr	r3, [r3, #24]
     a7c:	ldr	r3, [r3, #32]
     a80:	cmp	r3, #0
     a84:	ble	bac <set_definition+0x308>
     a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
     a8c:	ldr	r3, [r3]
     a90:	ldr	r3, [r3, #24]
     a94:	ldr	r3, [r3, #32]
     a98:	str	r3, [fp, #-20]	; 0xffffffec
     a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
     aa0:	lsl	r2, r3, #2
     aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     aa8:	ldr	r4, [r3]
     aac:	mov	r0, r2
     ab0:	bl	0 <malloc>
     ab4:	mov	r3, r0
     ab8:	str	r3, [r4, #28]
     abc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ac0:	ldr	r3, [r3]
     ac4:	ldr	r3, [r3, #28]
     ac8:	cmp	r3, #0
     acc:	bne	b00 <set_definition+0x25c>
     ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ad4:	lsl	r2, r3, #2
     ad8:	mov	r3, #500	; 0x1f4
     adc:	str	r3, [sp]
     ae0:	movw	r3, #0
     ae4:	movt	r3, #0
     ae8:	movw	r1, #0
     aec:	movt	r1, #0
     af0:	mvn	r0, #0
     af4:	bl	0 <coda_set_error>
     af8:	mvn	r3, #0
     afc:	b	bb0 <set_definition+0x30c>
     b00:	ldr	r3, [fp, #-20]	; 0xffffffec
     b04:	lsl	r2, r3, #2
     b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b0c:	ldr	r4, [r3]
     b10:	mov	r0, r2
     b14:	bl	0 <malloc>
     b18:	mov	r3, r0
     b1c:	str	r3, [r4, #32]
     b20:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b24:	ldr	r3, [r3]
     b28:	ldr	r3, [r3, #32]
     b2c:	cmp	r3, #0
     b30:	bne	b64 <set_definition+0x2c0>
     b34:	ldr	r3, [fp, #-20]	; 0xffffffec
     b38:	lsl	r2, r3, #2
     b3c:	movw	r3, #507	; 0x1fb
     b40:	str	r3, [sp]
     b44:	movw	r3, #0
     b48:	movt	r3, #0
     b4c:	movw	r1, #0
     b50:	movt	r1, #0
     b54:	mvn	r0, #0
     b58:	bl	0 <coda_set_error>
     b5c:	mvn	r3, #0
     b60:	b	bb0 <set_definition+0x30c>
     b64:	mov	r3, #0
     b68:	str	r3, [fp, #-16]
     b6c:	b	b9c <set_definition+0x2f8>
     b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
     b74:	ldr	r3, [r3]
     b78:	ldr	r2, [r3, #32]
     b7c:	ldr	r3, [fp, #-16]
     b80:	lsl	r3, r3, #2
     b84:	add	r3, r2, r3
     b88:	mov	r2, #0
     b8c:	str	r2, [r3]
     b90:	ldr	r3, [fp, #-16]
     b94:	add	r3, r3, #1
     b98:	str	r3, [fp, #-16]
     b9c:	ldr	r2, [fp, #-16]
     ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ba4:	cmp	r2, r3
     ba8:	blt	b70 <set_definition+0x2cc>
     bac:	mov	r3, #0
     bb0:	mov	r0, r3
     bb4:	sub	sp, fp, #8
     bb8:	ldr	r4, [sp]
     bbc:	ldr	fp, [sp, #4]
     bc0:	add	sp, sp, #8
     bc4:	pop	{pc}		; (ldr pc, [sp], #4)

00000bc8 <open_file>:
     bc8:	str	fp, [sp, #-8]!
     bcc:	str	lr, [sp, #4]
     bd0:	add	fp, sp, #4
     bd4:	sub	sp, sp, #48	; 0x30
     bd8:	str	r0, [fp, #-32]	; 0xffffffe0
     bdc:	str	r1, [fp, #-36]	; 0xffffffdc
     be0:	str	r2, [fp, #-40]	; 0xffffffd8
     be4:	sub	r3, fp, #20
     be8:	mov	r1, r3
     bec:	ldr	r0, [fp, #-32]	; 0xffffffe0
     bf0:	bl	0 <get_file_size>
     bf4:	mov	r3, r0
     bf8:	cmp	r3, #0
     bfc:	beq	c08 <open_file+0x40>
     c00:	mvn	r3, #0
     c04:	b	cb4 <open_file+0xec>
     c08:	ldrd	r2, [fp, #-20]	; 0xffffffec
     c0c:	sub	r1, fp, #8
     c10:	str	r1, [sp]
     c14:	ldr	r0, [fp, #-32]	; 0xffffffe0
     c18:	bl	0 <coda_bin_open>
     c1c:	mov	r3, r0
     c20:	cmp	r3, #0
     c24:	beq	c30 <open_file+0x68>
     c28:	mvn	r3, #0
     c2c:	b	cb4 <open_file+0xec>
     c30:	ldr	r3, [fp, #-40]	; 0xffffffd8
     c34:	cmp	r3, #0
     c38:	beq	c48 <open_file+0x80>
     c3c:	mov	r3, #1
     c40:	str	r3, [fp, #-24]	; 0xffffffe8
     c44:	b	c7c <open_file+0xb4>
     c48:	ldr	r3, [fp, #-8]
     c4c:	sub	r2, fp, #24
     c50:	mov	r1, r2
     c54:	mov	r0, r3
     c58:	bl	124 <get_format>
     c5c:	mov	r3, r0
     c60:	cmp	r3, #0
     c64:	beq	c7c <open_file+0xb4>
     c68:	ldr	r3, [fp, #-8]
     c6c:	mov	r0, r3
     c70:	bl	116c <coda_close>
     c74:	mvn	r3, #0
     c78:	b	cb4 <open_file+0xec>
     c7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
     c80:	sub	r3, fp, #8
     c84:	mov	r1, r2
     c88:	mov	r0, r3
     c8c:	bl	720 <reopen_with_backend>
     c90:	mov	r3, r0
     c94:	cmp	r3, #0
     c98:	beq	ca4 <open_file+0xdc>
     c9c:	mvn	r3, #0
     ca0:	b	cb4 <open_file+0xec>
     ca4:	ldr	r2, [fp, #-8]
     ca8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     cac:	str	r2, [r3]
     cb0:	mov	r3, #0
     cb4:	mov	r0, r3
     cb8:	sub	sp, fp, #4
     cbc:	ldr	fp, [sp]
     cc0:	add	sp, sp, #4
     cc4:	pop	{pc}		; (ldr pc, [sp], #4)

00000cc8 <coda_recognize_file>:
     cc8:	str	fp, [sp, #-8]!
     ccc:	str	lr, [sp, #4]
     cd0:	add	fp, sp, #4
     cd4:	sub	sp, sp, #24
     cd8:	str	r0, [fp, #-16]
     cdc:	str	r1, [fp, #-20]	; 0xffffffec
     ce0:	str	r2, [fp, #-24]	; 0xffffffe8
     ce4:	str	r3, [fp, #-28]	; 0xffffffe4
     ce8:	mov	r3, #0
     cec:	str	r3, [fp, #-8]
     cf0:	sub	r3, fp, #12
     cf4:	mov	r2, #0
     cf8:	mov	r1, r3
     cfc:	ldr	r0, [fp, #-16]
     d00:	bl	bc8 <open_file>
     d04:	mov	r3, r0
     d08:	cmp	r3, #0
     d0c:	beq	d18 <coda_recognize_file+0x50>
     d10:	mvn	r3, #0
     d14:	b	e68 <coda_recognize_file+0x1a0>
     d18:	ldr	r3, [fp, #-12]
     d1c:	sub	r2, fp, #8
     d20:	mov	r1, r2
     d24:	mov	r0, r3
     d28:	bl	0 <coda_data_dictionary_find_definition_for_product>
     d2c:	mov	r3, r0
     d30:	cmp	r3, #0
     d34:	beq	d4c <coda_recognize_file+0x84>
     d38:	ldr	r3, [fp, #-12]
     d3c:	mov	r0, r3
     d40:	bl	116c <coda_close>
     d44:	mvn	r3, #0
     d48:	b	e68 <coda_recognize_file+0x1a0>
     d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
     d50:	cmp	r3, #0
     d54:	beq	d68 <coda_recognize_file+0xa0>
     d58:	ldr	r3, [fp, #-12]
     d5c:	ldrd	r2, [r3, #8]
     d60:	ldr	r1, [fp, #-20]	; 0xffffffec
     d64:	strd	r2, [r1]
     d68:	ldr	r3, [fp, #-8]
     d6c:	cmp	r3, #0
     d70:	bne	ddc <coda_recognize_file+0x114>
     d74:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d78:	cmp	r3, #0
     d7c:	beq	d90 <coda_recognize_file+0xc8>
     d80:	ldr	r3, [fp, #-12]
     d84:	ldr	r2, [r3, #16]
     d88:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d8c:	str	r2, [r3]
     d90:	ldr	r3, [fp, #-28]	; 0xffffffe4
     d94:	cmp	r3, #0
     d98:	beq	da8 <coda_recognize_file+0xe0>
     d9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
     da0:	mov	r2, #0
     da4:	str	r2, [r3]
     da8:	ldr	r3, [fp, #4]
     dac:	cmp	r3, #0
     db0:	beq	dc0 <coda_recognize_file+0xf8>
     db4:	ldr	r3, [fp, #4]
     db8:	mov	r2, #0
     dbc:	str	r2, [r3]
     dc0:	ldr	r3, [fp, #8]
     dc4:	cmp	r3, #0
     dc8:	beq	e58 <coda_recognize_file+0x190>
     dcc:	ldr	r3, [fp, #8]
     dd0:	mvn	r2, #0
     dd4:	str	r2, [r3]
     dd8:	b	e58 <coda_recognize_file+0x190>
     ddc:	ldr	r3, [fp, #-24]	; 0xffffffe8
     de0:	cmp	r3, #0
     de4:	beq	df8 <coda_recognize_file+0x130>
     de8:	ldr	r3, [fp, #-8]
     dec:	ldr	r2, [r3]
     df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     df4:	str	r2, [r3]
     df8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     dfc:	cmp	r3, #0
     e00:	beq	e1c <coda_recognize_file+0x154>
     e04:	ldr	r3, [fp, #-8]
     e08:	ldr	r3, [r3, #44]	; 0x2c
     e0c:	ldr	r3, [r3, #20]
     e10:	ldr	r2, [r3]
     e14:	ldr	r3, [fp, #-28]	; 0xffffffe4
     e18:	str	r2, [r3]
     e1c:	ldr	r3, [fp, #4]
     e20:	cmp	r3, #0
     e24:	beq	e3c <coda_recognize_file+0x174>
     e28:	ldr	r3, [fp, #-8]
     e2c:	ldr	r3, [r3, #44]	; 0x2c
     e30:	ldr	r2, [r3]
     e34:	ldr	r3, [fp, #4]
     e38:	str	r2, [r3]
     e3c:	ldr	r3, [fp, #8]
     e40:	cmp	r3, #0
     e44:	beq	e58 <coda_recognize_file+0x190>
     e48:	ldr	r3, [fp, #-8]
     e4c:	ldr	r2, [r3, #4]
     e50:	ldr	r3, [fp, #8]
     e54:	str	r2, [r3]
     e58:	ldr	r3, [fp, #-12]
     e5c:	mov	r0, r3
     e60:	bl	116c <coda_close>
     e64:	mov	r3, #0
     e68:	mov	r0, r3
     e6c:	sub	sp, fp, #4
     e70:	ldr	fp, [sp]
     e74:	add	sp, sp, #4
     e78:	pop	{pc}		; (ldr pc, [sp], #4)

00000e7c <coda_open>:
     e7c:	str	fp, [sp, #-8]!
     e80:	str	lr, [sp, #4]
     e84:	add	fp, sp, #4
     e88:	sub	sp, sp, #16
     e8c:	str	r0, [fp, #-16]
     e90:	str	r1, [fp, #-20]	; 0xffffffec
     e94:	mov	r3, #0
     e98:	str	r3, [fp, #-8]
     e9c:	ldr	r3, [fp, #-16]
     ea0:	cmp	r3, #0
     ea4:	bne	ecc <coda_open+0x50>
     ea8:	mov	r3, #668	; 0x29c
     eac:	movw	r2, #0
     eb0:	movt	r2, #0
     eb4:	movw	r1, #0
     eb8:	movt	r1, #0
     ebc:	mvn	r0, #99	; 0x63
     ec0:	bl	0 <coda_set_error>
     ec4:	mvn	r3, #0
     ec8:	b	f9c <coda_open+0x120>
     ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
     ed0:	cmp	r3, #0
     ed4:	bne	efc <coda_open+0x80>
     ed8:	movw	r3, #673	; 0x2a1
     edc:	movw	r2, #0
     ee0:	movt	r2, #0
     ee4:	movw	r1, #0
     ee8:	movt	r1, #0
     eec:	mvn	r0, #99	; 0x63
     ef0:	bl	0 <coda_set_error>
     ef4:	mvn	r3, #0
     ef8:	b	f9c <coda_open+0x120>
     efc:	sub	r3, fp, #12
     f00:	mov	r2, #0
     f04:	mov	r1, r3
     f08:	ldr	r0, [fp, #-16]
     f0c:	bl	bc8 <open_file>
     f10:	mov	r3, r0
     f14:	cmp	r3, #0
     f18:	beq	f24 <coda_open+0xa8>
     f1c:	mvn	r3, #0
     f20:	b	f9c <coda_open+0x120>
     f24:	ldr	r3, [fp, #-12]
     f28:	sub	r2, fp, #8
     f2c:	mov	r1, r2
     f30:	mov	r0, r3
     f34:	bl	0 <coda_data_dictionary_find_definition_for_product>
     f38:	mov	r3, r0
     f3c:	cmp	r3, #0
     f40:	beq	f58 <coda_open+0xdc>
     f44:	ldr	r3, [fp, #-12]
     f48:	mov	r0, r3
     f4c:	bl	116c <coda_close>
     f50:	mvn	r3, #0
     f54:	b	f9c <coda_open+0x120>
     f58:	ldr	r2, [fp, #-8]
     f5c:	sub	r3, fp, #12
     f60:	mov	r1, r2
     f64:	mov	r0, r3
     f68:	bl	8a4 <set_definition>
     f6c:	mov	r3, r0
     f70:	cmp	r3, #0
     f74:	beq	f8c <coda_open+0x110>
     f78:	ldr	r3, [fp, #-12]
     f7c:	mov	r0, r3
     f80:	bl	116c <coda_close>
     f84:	mvn	r3, #0
     f88:	b	f9c <coda_open+0x120>
     f8c:	ldr	r2, [fp, #-12]
     f90:	ldr	r3, [fp, #-20]	; 0xffffffec
     f94:	str	r2, [r3]
     f98:	mov	r3, #0
     f9c:	mov	r0, r3
     fa0:	sub	sp, fp, #4
     fa4:	ldr	fp, [sp]
     fa8:	add	sp, sp, #4
     fac:	pop	{pc}		; (ldr pc, [sp], #4)

00000fb0 <coda_open_as>:
     fb0:	str	fp, [sp, #-8]!
     fb4:	str	lr, [sp, #4]
     fb8:	add	fp, sp, #4
     fbc:	sub	sp, sp, #32
     fc0:	str	r0, [fp, #-24]	; 0xffffffe8
     fc4:	str	r1, [fp, #-28]	; 0xffffffe4
     fc8:	str	r2, [fp, #-32]	; 0xffffffe0
     fcc:	str	r3, [fp, #-36]	; 0xffffffdc
     fd0:	mov	r3, #0
     fd4:	str	r3, [fp, #-12]
     fd8:	mov	r3, #0
     fdc:	str	r3, [fp, #-8]
     fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     fe4:	cmp	r3, #0
     fe8:	bne	1010 <coda_open_as+0x60>
     fec:	movw	r3, #719	; 0x2cf
     ff0:	movw	r2, #0
     ff4:	movt	r2, #0
     ff8:	movw	r1, #0
     ffc:	movt	r1, #0
    1000:	mvn	r0, #99	; 0x63
    1004:	bl	0 <coda_set_error>
    1008:	mvn	r3, #0
    100c:	b	1158 <coda_open_as+0x1a8>
    1010:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1014:	cmp	r3, #0
    1018:	beq	107c <coda_open_as+0xcc>
    101c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    1020:	cmp	r3, #0
    1024:	bne	104c <coda_open_as+0x9c>
    1028:	movw	r3, #726	; 0x2d6
    102c:	movw	r2, #0
    1030:	movt	r2, #0
    1034:	movw	r1, #0
    1038:	movt	r1, #0
    103c:	mvn	r0, #99	; 0x63
    1040:	bl	0 <coda_set_error>
    1044:	mvn	r3, #0
    1048:	b	1158 <coda_open_as+0x1a8>
    104c:	ldr	r3, [fp, #4]
    1050:	cmp	r3, #0
    1054:	bne	107c <coda_open_as+0xcc>
    1058:	movw	r3, #731	; 0x2db
    105c:	movw	r2, #0
    1060:	movt	r2, #0
    1064:	movw	r1, #0
    1068:	movt	r1, #0
    106c:	mvn	r0, #99	; 0x63
    1070:	bl	0 <coda_set_error>
    1074:	mvn	r3, #0
    1078:	b	1158 <coda_open_as+0x1a8>
    107c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    1080:	cmp	r3, #0
    1084:	beq	10ec <coda_open_as+0x13c>
    1088:	sub	r3, fp, #12
    108c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    1090:	ldr	r1, [fp, #-32]	; 0xffffffe0
    1094:	ldr	r0, [fp, #-28]	; 0xffffffe4
    1098:	bl	0 <coda_data_dictionary_get_definition>
    109c:	mov	r3, r0
    10a0:	cmp	r3, #0
    10a4:	beq	10b0 <coda_open_as+0x100>
    10a8:	mvn	r3, #0
    10ac:	b	1158 <coda_open_as+0x1a8>
    10b0:	ldr	r3, [fp, #-12]
    10b4:	cmp	r3, #0
    10b8:	beq	10ec <coda_open_as+0x13c>
    10bc:	ldr	r3, [fp, #-12]
    10c0:	ldr	r3, [r3]
    10c4:	cmp	r3, #0
    10c8:	beq	10dc <coda_open_as+0x12c>
    10cc:	ldr	r3, [fp, #-12]
    10d0:	ldr	r3, [r3]
    10d4:	cmp	r3, #1
    10d8:	bne	10e4 <coda_open_as+0x134>
    10dc:	mov	r3, #1
    10e0:	b	10e8 <coda_open_as+0x138>
    10e4:	mov	r3, #0
    10e8:	str	r3, [fp, #-8]
    10ec:	sub	r3, fp, #16
    10f0:	ldr	r2, [fp, #-8]
    10f4:	mov	r1, r3
    10f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
    10fc:	bl	bc8 <open_file>
    1100:	mov	r3, r0
    1104:	cmp	r3, #0
    1108:	beq	1114 <coda_open_as+0x164>
    110c:	mvn	r3, #0
    1110:	b	1158 <coda_open_as+0x1a8>
    1114:	ldr	r2, [fp, #-12]
    1118:	sub	r3, fp, #16
    111c:	mov	r1, r2
    1120:	mov	r0, r3
    1124:	bl	8a4 <set_definition>
    1128:	mov	r3, r0
    112c:	cmp	r3, #0
    1130:	beq	1148 <coda_open_as+0x198>
    1134:	ldr	r3, [fp, #-16]
    1138:	mov	r0, r3
    113c:	bl	116c <coda_close>
    1140:	mvn	r3, #0
    1144:	b	1158 <coda_open_as+0x1a8>
    1148:	ldr	r2, [fp, #-16]
    114c:	ldr	r3, [fp, #4]
    1150:	str	r2, [r3]
    1154:	mov	r3, #0
    1158:	mov	r0, r3
    115c:	sub	sp, fp, #4
    1160:	ldr	fp, [sp]
    1164:	add	sp, sp, #4
    1168:	pop	{pc}		; (ldr pc, [sp], #4)

0000116c <coda_close>:
    116c:	str	fp, [sp, #-8]!
    1170:	str	lr, [sp, #4]
    1174:	add	fp, sp, #4
    1178:	sub	sp, sp, #16
    117c:	str	r0, [fp, #-16]
    1180:	ldr	r3, [fp, #-16]
    1184:	cmp	r3, #0
    1188:	bne	11b0 <coda_close+0x44>
    118c:	movw	r3, #777	; 0x309
    1190:	movw	r2, #0
    1194:	movt	r2, #0
    1198:	movw	r1, #0
    119c:	movt	r1, #0
    11a0:	mvn	r0, #99	; 0x63
    11a4:	bl	0 <coda_set_error>
    11a8:	mvn	r3, #0
    11ac:	b	137c <coda_close+0x210>
    11b0:	ldr	r3, [fp, #-16]
    11b4:	ldr	r3, [r3, #28]
    11b8:	cmp	r3, #0
    11bc:	beq	11dc <coda_close+0x70>
    11c0:	ldr	r3, [fp, #-16]
    11c4:	ldr	r3, [r3, #28]
    11c8:	mov	r0, r3
    11cc:	bl	0 <free>
    11d0:	ldr	r3, [fp, #-16]
    11d4:	mov	r2, #0
    11d8:	str	r2, [r3, #28]
    11dc:	ldr	r3, [fp, #-16]
    11e0:	ldr	r3, [r3, #32]
    11e4:	cmp	r3, #0
    11e8:	beq	1278 <coda_close+0x10c>
    11ec:	mov	r3, #0
    11f0:	str	r3, [fp, #-8]
    11f4:	b	1244 <coda_close+0xd8>
    11f8:	ldr	r3, [fp, #-16]
    11fc:	ldr	r2, [r3, #32]
    1200:	ldr	r3, [fp, #-8]
    1204:	lsl	r3, r3, #2
    1208:	add	r3, r2, r3
    120c:	ldr	r3, [r3]
    1210:	cmp	r3, #0
    1214:	beq	1238 <coda_close+0xcc>
    1218:	ldr	r3, [fp, #-16]
    121c:	ldr	r2, [r3, #32]
    1220:	ldr	r3, [fp, #-8]
    1224:	lsl	r3, r3, #2
    1228:	add	r3, r2, r3
    122c:	ldr	r3, [r3]
    1230:	mov	r0, r3
    1234:	bl	0 <free>
    1238:	ldr	r3, [fp, #-8]
    123c:	add	r3, r3, #1
    1240:	str	r3, [fp, #-8]
    1244:	ldr	r3, [fp, #-16]
    1248:	ldr	r3, [r3, #24]
    124c:	ldr	r3, [r3, #32]
    1250:	ldr	r2, [fp, #-8]
    1254:	cmp	r2, r3
    1258:	blt	11f8 <coda_close+0x8c>
    125c:	ldr	r3, [fp, #-16]
    1260:	ldr	r3, [r3, #32]
    1264:	mov	r0, r3
    1268:	bl	0 <free>
    126c:	ldr	r3, [fp, #-16]
    1270:	mov	r2, #0
    1274:	str	r2, [r3, #32]
    1278:	ldr	r3, [fp, #-16]
    127c:	ldr	r3, [r3, #16]
    1280:	cmp	r3, #9
    1284:	ldrls	pc, [pc, r3, lsl #2]
    1288:	b	135c <coda_close+0x1f0>
    128c:	.word	0x000012b4
    1290:	.word	0x000012c4
    1294:	.word	0x000012d4
    1298:	.word	0x00001314
    129c:	.word	0x00001328
    12a0:	.word	0x000012e4
    12a4:	.word	0x000012f4
    12a8:	.word	0x00001304
    12ac:	.word	0x0000133c
    12b0:	.word	0x0000134c
    12b4:	ldr	r0, [fp, #-16]
    12b8:	bl	0 <coda_ascii_close>
    12bc:	mov	r3, r0
    12c0:	b	137c <coda_close+0x210>
    12c4:	ldr	r0, [fp, #-16]
    12c8:	bl	0 <coda_bin_close>
    12cc:	mov	r3, r0
    12d0:	b	137c <coda_close+0x210>
    12d4:	ldr	r0, [fp, #-16]
    12d8:	bl	0 <coda_xml_close>
    12dc:	mov	r3, r0
    12e0:	b	137c <coda_close+0x210>
    12e4:	ldr	r0, [fp, #-16]
    12e8:	bl	0 <coda_cdf_close>
    12ec:	mov	r3, r0
    12f0:	b	137c <coda_close+0x210>
    12f4:	ldr	r0, [fp, #-16]
    12f8:	bl	0 <coda_netcdf_close>
    12fc:	mov	r3, r0
    1300:	b	137c <coda_close+0x210>
    1304:	ldr	r0, [fp, #-16]
    1308:	bl	0 <coda_grib_close>
    130c:	mov	r3, r0
    1310:	b	137c <coda_close+0x210>
    1314:	mov	r1, #0
    1318:	mvn	r0, #10
    131c:	bl	0 <coda_set_error>
    1320:	mvn	r3, #0
    1324:	b	137c <coda_close+0x210>
    1328:	mov	r1, #0
    132c:	mvn	r0, #12
    1330:	bl	0 <coda_set_error>
    1334:	mvn	r3, #0
    1338:	b	137c <coda_close+0x210>
    133c:	ldr	r0, [fp, #-16]
    1340:	bl	0 <coda_rinex_close>
    1344:	mov	r3, r0
    1348:	b	137c <coda_close+0x210>
    134c:	ldr	r0, [fp, #-16]
    1350:	bl	0 <coda_sp3_close>
    1354:	mov	r3, r0
    1358:	b	137c <coda_close+0x210>
    135c:	movw	r3, #0
    1360:	movt	r3, #0
    1364:	mov	r2, #836	; 0x344
    1368:	movw	r1, #0
    136c:	movt	r1, #0
    1370:	movw	r0, #0
    1374:	movt	r0, #0
    1378:	bl	0 <__assert_fail>
    137c:	mov	r0, r3
    1380:	sub	sp, fp, #4
    1384:	ldr	fp, [sp]
    1388:	add	sp, sp, #4
    138c:	pop	{pc}		; (ldr pc, [sp], #4)

00001390 <coda_get_product_filename>:
    1390:	str	fp, [sp, #-8]!
    1394:	str	lr, [sp, #4]
    1398:	add	fp, sp, #4
    139c:	sub	sp, sp, #8
    13a0:	str	r0, [fp, #-8]
    13a4:	str	r1, [fp, #-12]
    13a8:	ldr	r3, [fp, #-8]
    13ac:	cmp	r3, #0
    13b0:	bne	13d8 <coda_get_product_filename+0x48>
    13b4:	mov	r3, #856	; 0x358
    13b8:	movw	r2, #0
    13bc:	movt	r2, #0
    13c0:	movw	r1, #0
    13c4:	movt	r1, #0
    13c8:	mvn	r0, #99	; 0x63
    13cc:	bl	0 <coda_set_error>
    13d0:	mvn	r3, #0
    13d4:	b	13ec <coda_get_product_filename+0x5c>
    13d8:	ldr	r3, [fp, #-8]
    13dc:	ldr	r2, [r3]
    13e0:	ldr	r3, [fp, #-12]
    13e4:	str	r2, [r3]
    13e8:	mov	r3, #0
    13ec:	mov	r0, r3
    13f0:	sub	sp, fp, #4
    13f4:	ldr	fp, [sp]
    13f8:	add	sp, sp, #4
    13fc:	pop	{pc}		; (ldr pc, [sp], #4)

00001400 <coda_get_product_file_size>:
    1400:	str	fp, [sp, #-8]!
    1404:	str	lr, [sp, #4]
    1408:	add	fp, sp, #4
    140c:	sub	sp, sp, #8
    1410:	str	r0, [fp, #-8]
    1414:	str	r1, [fp, #-12]
    1418:	ldr	r3, [fp, #-8]
    141c:	cmp	r3, #0
    1420:	bne	1448 <coda_get_product_file_size+0x48>
    1424:	mov	r3, #876	; 0x36c
    1428:	movw	r2, #0
    142c:	movt	r2, #0
    1430:	movw	r1, #0
    1434:	movt	r1, #0
    1438:	mvn	r0, #99	; 0x63
    143c:	bl	0 <coda_set_error>
    1440:	mvn	r3, #0
    1444:	b	148c <coda_get_product_file_size+0x8c>
    1448:	ldr	r3, [fp, #-12]
    144c:	cmp	r3, #0
    1450:	bne	1478 <coda_get_product_file_size+0x78>
    1454:	movw	r3, #881	; 0x371
    1458:	movw	r2, #0
    145c:	movt	r2, #0
    1460:	movw	r1, #0
    1464:	movt	r1, #0
    1468:	mvn	r0, #99	; 0x63
    146c:	bl	0 <coda_set_error>
    1470:	mvn	r3, #0
    1474:	b	148c <coda_get_product_file_size+0x8c>
    1478:	ldr	r3, [fp, #-8]
    147c:	ldrd	r2, [r3, #8]
    1480:	ldr	r1, [fp, #-12]
    1484:	strd	r2, [r1]
    1488:	mov	r3, #0
    148c:	mov	r0, r3
    1490:	sub	sp, fp, #4
    1494:	ldr	fp, [sp]
    1498:	add	sp, sp, #4
    149c:	pop	{pc}		; (ldr pc, [sp], #4)

000014a0 <coda_get_product_format>:
    14a0:	str	fp, [sp, #-8]!
    14a4:	str	lr, [sp, #4]
    14a8:	add	fp, sp, #4
    14ac:	sub	sp, sp, #8
    14b0:	str	r0, [fp, #-8]
    14b4:	str	r1, [fp, #-12]
    14b8:	ldr	r3, [fp, #-8]
    14bc:	cmp	r3, #0
    14c0:	bne	14e8 <coda_get_product_format+0x48>
    14c4:	mov	r3, #904	; 0x388
    14c8:	movw	r2, #0
    14cc:	movt	r2, #0
    14d0:	movw	r1, #0
    14d4:	movt	r1, #0
    14d8:	mvn	r0, #99	; 0x63
    14dc:	bl	0 <coda_set_error>
    14e0:	mvn	r3, #0
    14e4:	b	152c <coda_get_product_format+0x8c>
    14e8:	ldr	r3, [fp, #-12]
    14ec:	cmp	r3, #0
    14f0:	bne	1518 <coda_get_product_format+0x78>
    14f4:	movw	r3, #909	; 0x38d
    14f8:	movw	r2, #0
    14fc:	movt	r2, #0
    1500:	movw	r1, #0
    1504:	movt	r1, #0
    1508:	mvn	r0, #99	; 0x63
    150c:	bl	0 <coda_set_error>
    1510:	mvn	r3, #0
    1514:	b	152c <coda_get_product_format+0x8c>
    1518:	ldr	r3, [fp, #-8]
    151c:	ldr	r2, [r3, #16]
    1520:	ldr	r3, [fp, #-12]
    1524:	str	r2, [r3]
    1528:	mov	r3, #0
    152c:	mov	r0, r3
    1530:	sub	sp, fp, #4
    1534:	ldr	fp, [sp]
    1538:	add	sp, sp, #4
    153c:	pop	{pc}		; (ldr pc, [sp], #4)

00001540 <coda_get_product_class>:
    1540:	str	fp, [sp, #-8]!
    1544:	str	lr, [sp, #4]
    1548:	add	fp, sp, #4
    154c:	sub	sp, sp, #8
    1550:	str	r0, [fp, #-8]
    1554:	str	r1, [fp, #-12]
    1558:	ldr	r3, [fp, #-8]
    155c:	cmp	r3, #0
    1560:	bne	1588 <coda_get_product_class+0x48>
    1564:	movw	r3, #933	; 0x3a5
    1568:	movw	r2, #0
    156c:	movt	r2, #0
    1570:	movw	r1, #0
    1574:	movt	r1, #0
    1578:	mvn	r0, #99	; 0x63
    157c:	bl	0 <coda_set_error>
    1580:	mvn	r3, #0
    1584:	b	15f8 <coda_get_product_class+0xb8>
    1588:	ldr	r3, [fp, #-12]
    158c:	cmp	r3, #0
    1590:	bne	15b8 <coda_get_product_class+0x78>
    1594:	movw	r3, #938	; 0x3aa
    1598:	movw	r2, #0
    159c:	movt	r2, #0
    15a0:	movw	r1, #0
    15a4:	movt	r1, #0
    15a8:	mvn	r0, #99	; 0x63
    15ac:	bl	0 <coda_set_error>
    15b0:	mvn	r3, #0
    15b4:	b	15f8 <coda_get_product_class+0xb8>
    15b8:	ldr	r3, [fp, #-8]
    15bc:	ldr	r3, [r3, #24]
    15c0:	cmp	r3, #0
    15c4:	beq	15e8 <coda_get_product_class+0xa8>
    15c8:	ldr	r3, [fp, #-8]
    15cc:	ldr	r3, [r3, #24]
    15d0:	ldr	r3, [r3, #44]	; 0x2c
    15d4:	ldr	r3, [r3, #20]
    15d8:	ldr	r2, [r3]
    15dc:	ldr	r3, [fp, #-12]
    15e0:	str	r2, [r3]
    15e4:	b	15f4 <coda_get_product_class+0xb4>
    15e8:	ldr	r3, [fp, #-12]
    15ec:	mov	r2, #0
    15f0:	str	r2, [r3]
    15f4:	mov	r3, #0
    15f8:	mov	r0, r3
    15fc:	sub	sp, fp, #4
    1600:	ldr	fp, [sp]
    1604:	add	sp, sp, #4
    1608:	pop	{pc}		; (ldr pc, [sp], #4)

0000160c <coda_get_product_type>:
    160c:	str	fp, [sp, #-8]!
    1610:	str	lr, [sp, #4]
    1614:	add	fp, sp, #4
    1618:	sub	sp, sp, #8
    161c:	str	r0, [fp, #-8]
    1620:	str	r1, [fp, #-12]
    1624:	ldr	r3, [fp, #-8]
    1628:	cmp	r3, #0
    162c:	bne	1654 <coda_get_product_type+0x48>
    1630:	movw	r3, #969	; 0x3c9
    1634:	movw	r2, #0
    1638:	movt	r2, #0
    163c:	movw	r1, #0
    1640:	movt	r1, #0
    1644:	mvn	r0, #99	; 0x63
    1648:	bl	0 <coda_set_error>
    164c:	mvn	r3, #0
    1650:	b	16c0 <coda_get_product_type+0xb4>
    1654:	ldr	r3, [fp, #-12]
    1658:	cmp	r3, #0
    165c:	bne	1684 <coda_get_product_type+0x78>
    1660:	movw	r3, #974	; 0x3ce
    1664:	movw	r2, #0
    1668:	movt	r2, #0
    166c:	movw	r1, #0
    1670:	movt	r1, #0
    1674:	mvn	r0, #99	; 0x63
    1678:	bl	0 <coda_set_error>
    167c:	mvn	r3, #0
    1680:	b	16c0 <coda_get_product_type+0xb4>
    1684:	ldr	r3, [fp, #-8]
    1688:	ldr	r3, [r3, #24]
    168c:	cmp	r3, #0
    1690:	beq	16b0 <coda_get_product_type+0xa4>
    1694:	ldr	r3, [fp, #-8]
    1698:	ldr	r3, [r3, #24]
    169c:	ldr	r3, [r3, #44]	; 0x2c
    16a0:	ldr	r2, [r3]
    16a4:	ldr	r3, [fp, #-12]
    16a8:	str	r2, [r3]
    16ac:	b	16bc <coda_get_product_type+0xb0>
    16b0:	ldr	r3, [fp, #-12]
    16b4:	mov	r2, #0
    16b8:	str	r2, [r3]
    16bc:	mov	r3, #0
    16c0:	mov	r0, r3
    16c4:	sub	sp, fp, #4
    16c8:	ldr	fp, [sp]
    16cc:	add	sp, sp, #4
    16d0:	pop	{pc}		; (ldr pc, [sp], #4)

000016d4 <coda_get_product_version>:
    16d4:	str	fp, [sp, #-8]!
    16d8:	str	lr, [sp, #4]
    16dc:	add	fp, sp, #4
    16e0:	sub	sp, sp, #8
    16e4:	str	r0, [fp, #-8]
    16e8:	str	r1, [fp, #-12]
    16ec:	ldr	r3, [fp, #-8]
    16f0:	cmp	r3, #0
    16f4:	bne	171c <coda_get_product_version+0x48>
    16f8:	movw	r3, #1003	; 0x3eb
    16fc:	movw	r2, #0
    1700:	movt	r2, #0
    1704:	movw	r1, #0
    1708:	movt	r1, #0
    170c:	mvn	r0, #99	; 0x63
    1710:	bl	0 <coda_set_error>
    1714:	mvn	r3, #0
    1718:	b	1784 <coda_get_product_version+0xb0>
    171c:	ldr	r3, [fp, #-12]
    1720:	cmp	r3, #0
    1724:	bne	174c <coda_get_product_version+0x78>
    1728:	mov	r3, #1008	; 0x3f0
    172c:	movw	r2, #0
    1730:	movt	r2, #0
    1734:	movw	r1, #0
    1738:	movt	r1, #0
    173c:	mvn	r0, #99	; 0x63
    1740:	bl	0 <coda_set_error>
    1744:	mvn	r3, #0
    1748:	b	1784 <coda_get_product_version+0xb0>
    174c:	ldr	r3, [fp, #-8]
    1750:	ldr	r3, [r3, #24]
    1754:	cmp	r3, #0
    1758:	beq	1774 <coda_get_product_version+0xa0>
    175c:	ldr	r3, [fp, #-8]
    1760:	ldr	r3, [r3, #24]
    1764:	ldr	r2, [r3, #4]
    1768:	ldr	r3, [fp, #-12]
    176c:	str	r2, [r3]
    1770:	b	1780 <coda_get_product_version+0xac>
    1774:	ldr	r3, [fp, #-12]
    1778:	mvn	r2, #0
    177c:	str	r2, [r3]
    1780:	mov	r3, #0
    1784:	mov	r0, r3
    1788:	sub	sp, fp, #4
    178c:	ldr	fp, [sp]
    1790:	add	sp, sp, #4
    1794:	pop	{pc}		; (ldr pc, [sp], #4)

00001798 <coda_get_product_root_type>:
    1798:	str	fp, [sp, #-8]!
    179c:	str	lr, [sp, #4]
    17a0:	add	fp, sp, #4
    17a4:	sub	sp, sp, #8
    17a8:	str	r0, [fp, #-8]
    17ac:	str	r1, [fp, #-12]
    17b0:	ldr	r3, [fp, #-8]
    17b4:	cmp	r3, #0
    17b8:	bne	17e0 <coda_get_product_root_type+0x48>
    17bc:	movw	r3, #1043	; 0x413
    17c0:	movw	r2, #0
    17c4:	movt	r2, #0
    17c8:	movw	r1, #0
    17cc:	movt	r1, #0
    17d0:	mvn	r0, #99	; 0x63
    17d4:	bl	0 <coda_set_error>
    17d8:	mvn	r3, #0
    17dc:	b	1884 <coda_get_product_root_type+0xec>
    17e0:	ldr	r3, [fp, #-12]
    17e4:	cmp	r3, #0
    17e8:	bne	1810 <coda_get_product_root_type+0x78>
    17ec:	movw	r3, #1048	; 0x418
    17f0:	movw	r2, #0
    17f4:	movt	r2, #0
    17f8:	movw	r1, #0
    17fc:	movt	r1, #0
    1800:	mvn	r0, #99	; 0x63
    1804:	bl	0 <coda_set_error>
    1808:	mvn	r3, #0
    180c:	b	1884 <coda_get_product_root_type+0xec>
    1810:	ldr	r3, [fp, #-8]
    1814:	ldr	r3, [r3, #24]
    1818:	cmp	r3, #0
    181c:	beq	184c <coda_get_product_root_type+0xb4>
    1820:	ldr	r3, [fp, #-8]
    1824:	ldr	r3, [r3, #24]
    1828:	ldr	r3, [r3, #28]
    182c:	cmp	r3, #0
    1830:	beq	184c <coda_get_product_root_type+0xb4>
    1834:	ldr	r3, [fp, #-8]
    1838:	ldr	r3, [r3, #24]
    183c:	ldr	r2, [r3, #28]
    1840:	ldr	r3, [fp, #-12]
    1844:	str	r2, [r3]
    1848:	b	1880 <coda_get_product_root_type+0xe8>
    184c:	ldr	r3, [fp, #-8]
    1850:	ldr	r3, [r3, #20]
    1854:	ldr	r3, [r3]
    1858:	cmp	r3, #99	; 0x63
    185c:	bhi	186c <coda_get_product_root_type+0xd4>
    1860:	ldr	r3, [fp, #-8]
    1864:	ldr	r3, [r3, #20]
    1868:	b	1878 <coda_get_product_root_type+0xe0>
    186c:	ldr	r3, [fp, #-8]
    1870:	ldr	r3, [r3, #20]
    1874:	ldr	r3, [r3, #4]
    1878:	ldr	r2, [fp, #-12]
    187c:	str	r3, [r2]
    1880:	mov	r3, #0
    1884:	mov	r0, r3
    1888:	sub	sp, fp, #4
    188c:	ldr	fp, [sp]
    1890:	add	sp, sp, #4
    1894:	pop	{pc}		; (ldr pc, [sp], #4)

00001898 <coda_get_product_definition_file>:
    1898:	str	fp, [sp, #-8]!
    189c:	str	lr, [sp, #4]
    18a0:	add	fp, sp, #4
    18a4:	sub	sp, sp, #8
    18a8:	str	r0, [fp, #-8]
    18ac:	str	r1, [fp, #-12]
    18b0:	ldr	r3, [fp, #-8]
    18b4:	cmp	r3, #0
    18b8:	bne	18e0 <coda_get_product_definition_file+0x48>
    18bc:	movw	r3, #1080	; 0x438
    18c0:	movw	r2, #0
    18c4:	movt	r2, #0
    18c8:	movw	r1, #0
    18cc:	movt	r1, #0
    18d0:	mvn	r0, #99	; 0x63
    18d4:	bl	0 <coda_set_error>
    18d8:	mvn	r3, #0
    18dc:	b	1950 <coda_get_product_definition_file+0xb8>
    18e0:	ldr	r3, [fp, #-12]
    18e4:	cmp	r3, #0
    18e8:	bne	1910 <coda_get_product_definition_file+0x78>
    18ec:	movw	r3, #1085	; 0x43d
    18f0:	movw	r2, #0
    18f4:	movt	r2, #0
    18f8:	movw	r1, #0
    18fc:	movt	r1, #0
    1900:	mvn	r0, #99	; 0x63
    1904:	bl	0 <coda_set_error>
    1908:	mvn	r3, #0
    190c:	b	1950 <coda_get_product_definition_file+0xb8>
    1910:	ldr	r3, [fp, #-8]
    1914:	ldr	r3, [r3, #24]
    1918:	cmp	r3, #0
    191c:	beq	1940 <coda_get_product_definition_file+0xa8>
    1920:	ldr	r3, [fp, #-8]
    1924:	ldr	r3, [r3, #24]
    1928:	ldr	r3, [r3, #44]	; 0x2c
    192c:	ldr	r3, [r3, #20]
    1930:	ldr	r2, [r3, #8]
    1934:	ldr	r3, [fp, #-12]
    1938:	str	r2, [r3]
    193c:	b	194c <coda_get_product_definition_file+0xb4>
    1940:	ldr	r3, [fp, #-12]
    1944:	mov	r2, #0
    1948:	str	r2, [r3]
    194c:	mov	r3, #0
    1950:	mov	r0, r3
    1954:	sub	sp, fp, #4
    1958:	ldr	fp, [sp]
    195c:	add	sp, sp, #4
    1960:	pop	{pc}		; (ldr pc, [sp], #4)

00001964 <coda_get_product_variable_value>:
    1964:	str	fp, [sp, #-8]!
    1968:	str	lr, [sp, #4]
    196c:	add	fp, sp, #4
    1970:	sub	sp, sp, #24
    1974:	str	r0, [fp, #-16]
    1978:	str	r1, [fp, #-20]	; 0xffffffec
    197c:	str	r2, [fp, #-24]	; 0xffffffe8
    1980:	str	r3, [fp, #-28]	; 0xffffffe4
    1984:	ldr	r3, [fp, #-16]
    1988:	cmp	r3, #0
    198c:	bne	19b4 <coda_get_product_variable_value+0x50>
    1990:	movw	r3, #1124	; 0x464
    1994:	movw	r2, #0
    1998:	movt	r2, #0
    199c:	movw	r1, #0
    19a0:	movt	r1, #0
    19a4:	mvn	r0, #99	; 0x63
    19a8:	bl	0 <coda_set_error>
    19ac:	mvn	r3, #0
    19b0:	b	1a98 <coda_get_product_variable_value+0x134>
    19b4:	ldr	r3, [fp, #-20]	; 0xffffffec
    19b8:	cmp	r3, #0
    19bc:	bne	19e4 <coda_get_product_variable_value+0x80>
    19c0:	movw	r3, #1129	; 0x469
    19c4:	movw	r2, #0
    19c8:	movt	r2, #0
    19cc:	movw	r1, #0
    19d0:	movt	r1, #0
    19d4:	mvn	r0, #99	; 0x63
    19d8:	bl	0 <coda_set_error>
    19dc:	mvn	r3, #0
    19e0:	b	1a98 <coda_get_product_variable_value+0x134>
    19e4:	sub	r3, fp, #12
    19e8:	mov	r2, r3
    19ec:	ldr	r1, [fp, #-20]	; 0xffffffec
    19f0:	ldr	r0, [fp, #-16]
    19f4:	bl	0 <coda_product_variable_get_size>
    19f8:	mov	r3, r0
    19fc:	cmp	r3, #0
    1a00:	beq	1a20 <coda_get_product_variable_value+0xbc>
    1a04:	ldr	r2, [fp, #-20]	; 0xffffffec
    1a08:	movw	r1, #0
    1a0c:	movt	r1, #0
    1a10:	mvn	r0, #101	; 0x65
    1a14:	bl	0 <coda_set_error>
    1a18:	mvn	r3, #0
    1a1c:	b	1a98 <coda_get_product_variable_value+0x134>
    1a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
    1a24:	cmp	r3, #0
    1a28:	blt	1a3c <coda_get_product_variable_value+0xd8>
    1a2c:	ldr	r3, [fp, #-12]
    1a30:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a34:	cmp	r2, r3
    1a38:	blt	1a5c <coda_get_product_variable_value+0xf8>
    1a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
    1a40:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a44:	movw	r1, #0
    1a48:	movt	r1, #0
    1a4c:	mvn	r0, #100	; 0x64
    1a50:	bl	0 <coda_set_error>
    1a54:	mvn	r3, #0
    1a58:	b	1a98 <coda_get_product_variable_value+0x134>
    1a5c:	sub	r3, fp, #8
    1a60:	ldr	r2, [fp, #-24]	; 0xffffffe8
    1a64:	ldr	r1, [fp, #-20]	; 0xffffffec
    1a68:	ldr	r0, [fp, #-16]
    1a6c:	bl	0 <coda_product_variable_get_pointer>
    1a70:	mov	r3, r0
    1a74:	cmp	r3, #0
    1a78:	beq	1a84 <coda_get_product_variable_value+0x120>
    1a7c:	mvn	r3, #0
    1a80:	b	1a98 <coda_get_product_variable_value+0x134>
    1a84:	ldr	r3, [fp, #-8]
    1a88:	ldrd	r2, [r3]
    1a8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
    1a90:	strd	r2, [r1]
    1a94:	mov	r3, #0
    1a98:	mov	r0, r3
    1a9c:	sub	sp, fp, #4
    1aa0:	ldr	fp, [sp]
    1aa4:	add	sp, sp, #4
    1aa8:	pop	{pc}		; (ldr pc, [sp], #4)
