
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c4 <.init>:
   123c4:	push	{r3, lr}
   123c8:	bl	124f8 <_start@@Base+0x3c>
   123cc:	pop	{r3, pc}

Disassembly of section .plt:

000123d0 <printf@plt-0x14>:
   123d0:	push	{lr}		; (str lr, [sp, #-4]!)
   123d4:	ldr	lr, [pc, #4]	; 123e0 <printf@plt-0x4>
   123d8:	add	lr, pc, lr
   123dc:	ldr	pc, [lr, #8]!
   123e0:	andeq	r7, r1, r0, lsr #24

000123e4 <printf@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #94208	; 0x17000
   123ec:	ldr	pc, [ip, #3104]!	; 0xc20

000123f0 <free@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #94208	; 0x17000
   123f8:	ldr	pc, [ip, #3096]!	; 0xc18

000123fc <memcpy@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #94208	; 0x17000
   12404:	ldr	pc, [ip, #3088]!	; 0xc10

00012408 <memcmp@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #94208	; 0x17000
   12410:	ldr	pc, [ip, #3080]!	; 0xc08

00012414 <realloc@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #94208	; 0x17000
   1241c:	ldr	pc, [ip, #3072]!	; 0xc00

00012420 <fwrite@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #94208	; 0x17000
   12428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001242c <puts@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #94208	; 0x17000
   12434:	ldr	pc, [ip, #3056]!	; 0xbf0

00012438 <malloc@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #94208	; 0x17000
   12440:	ldr	pc, [ip, #3048]!	; 0xbe8

00012444 <__libc_start_main@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #94208	; 0x17000
   1244c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012450 <__gmon_start__@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #94208	; 0x17000
   12458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #94208	; 0x17000
   12464:	ldr	pc, [ip, #3024]!	; 0xbd0

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #94208	; 0x17000
   12470:	ldr	pc, [ip, #3016]!	; 0xbc8

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #94208	; 0x17000
   1247c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #94208	; 0x17000
   12488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001248c <memchr@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #94208	; 0x17000
   12494:	ldr	pc, [ip, #2992]!	; 0xbb0

00012498 <fputc@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #94208	; 0x17000
   124a0:	ldr	pc, [ip, #2984]!	; 0xba8

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #94208	; 0x17000
   124ac:	ldr	pc, [ip, #2976]!	; 0xba0

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #94208	; 0x17000
   124b8:	ldr	pc, [ip, #2968]!	; 0xb98

Disassembly of section .text:

000124bc <_start@@Base>:
   124bc:	mov	fp, #0
   124c0:	mov	lr, #0
   124c4:	pop	{r1}		; (ldr r1, [sp], #4)
   124c8:	mov	r2, sp
   124cc:	push	{r2}		; (str r2, [sp, #-4]!)
   124d0:	push	{r0}		; (str r0, [sp, #-4]!)
   124d4:	ldr	ip, [pc, #16]	; 124ec <_start@@Base+0x30>
   124d8:	push	{ip}		; (str ip, [sp, #-4]!)
   124dc:	ldr	r0, [pc, #12]	; 124f0 <_start@@Base+0x34>
   124e0:	ldr	r3, [pc, #12]	; 124f4 <_start@@Base+0x38>
   124e4:	bl	12444 <__libc_start_main@plt>
   124e8:	bl	124a4 <abort@plt>
   124ec:	andeq	r8, r1, ip, rrx
   124f0:	andeq	r2, r1, ip, lsr #24
   124f4:	andeq	r8, r1, ip
   124f8:	ldr	r3, [pc, #20]	; 12514 <_start@@Base+0x58>
   124fc:	ldr	r2, [pc, #20]	; 12518 <_start@@Base+0x5c>
   12500:	add	r3, pc, r3
   12504:	ldr	r2, [r3, r2]
   12508:	cmp	r2, #0
   1250c:	bxeq	lr
   12510:	b	12450 <__gmon_start__@plt>
   12514:	strdeq	r7, [r1], -r8
   12518:	andeq	r0, r0, r0, rrx
   1251c:	ldr	r0, [pc, #24]	; 1253c <_start@@Base+0x80>
   12520:	ldr	r3, [pc, #24]	; 12540 <_start@@Base+0x84>
   12524:	cmp	r3, r0
   12528:	bxeq	lr
   1252c:	ldr	r3, [pc, #16]	; 12544 <_start@@Base+0x88>
   12530:	cmp	r3, #0
   12534:	bxeq	lr
   12538:	bx	r3
   1253c:	andeq	sl, r2, r4, ror r0
   12540:	andeq	sl, r2, r4, ror r0
   12544:	andeq	r0, r0, r0
   12548:	ldr	r0, [pc, #36]	; 12574 <_start@@Base+0xb8>
   1254c:	ldr	r1, [pc, #36]	; 12578 <_start@@Base+0xbc>
   12550:	sub	r1, r1, r0
   12554:	asr	r1, r1, #2
   12558:	add	r1, r1, r1, lsr #31
   1255c:	asrs	r1, r1, #1
   12560:	bxeq	lr
   12564:	ldr	r3, [pc, #16]	; 1257c <_start@@Base+0xc0>
   12568:	cmp	r3, #0
   1256c:	bxeq	lr
   12570:	bx	r3
   12574:	andeq	sl, r2, r4, ror r0
   12578:	andeq	sl, r2, r4, ror r0
   1257c:	andeq	r0, r0, r0
   12580:	push	{r4, lr}
   12584:	ldr	r4, [pc, #24]	; 125a4 <_start@@Base+0xe8>
   12588:	ldrb	r3, [r4]
   1258c:	cmp	r3, #0
   12590:	popne	{r4, pc}
   12594:	bl	1251c <_start@@Base+0x60>
   12598:	mov	r3, #1
   1259c:	strb	r3, [r4]
   125a0:	pop	{r4, pc}
   125a4:	andeq	sl, r2, r4, ror r0
   125a8:	b	12548 <_start@@Base+0x8c>

000125ac <dbg_emitter@@Base>:
   125ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b0:	add	fp, sp, #24
   125b4:	ldr	r0, [pc, #160]	; 1265c <dbg_emitter@@Base+0xb0>
   125b8:	mov	r4, r3
   125bc:	ldr	r3, [fp, #8]
   125c0:	mov	r6, r1
   125c4:	mov	r5, r2
   125c8:	mov	r1, r2
   125cc:	mov	r2, r4
   125d0:	add	r0, pc, r0
   125d4:	bl	123e4 <printf@plt>
   125d8:	cmp	r5, #1
   125dc:	blt	12654 <dbg_emitter@@Base+0xa8>
   125e0:	ldr	r7, [pc, #120]	; 12660 <dbg_emitter@@Base+0xb4>
   125e4:	add	r6, r6, #4
   125e8:	ldr	r7, [pc, r7]
   125ec:	ldr	r8, [pc, #112]	; 12664 <dbg_emitter@@Base+0xb8>
   125f0:	ldr	r9, [pc, #112]	; 12668 <dbg_emitter@@Base+0xbc>
   125f4:	add	r8, pc, r8
   125f8:	add	r9, pc, r9
   125fc:	b	12630 <dbg_emitter@@Base+0x84>
   12600:	ldr	r2, [r6]
   12604:	mov	r0, r8
   12608:	mov	r1, r4
   1260c:	bl	123e4 <printf@plt>
   12610:	ldr	r0, [r6, #-4]
   12614:	cmp	r0, #0
   12618:	bne	12644 <dbg_emitter@@Base+0x98>
   1261c:	ldr	r2, [r6]
   12620:	mov	r0, r9
   12624:	mov	r1, r4
   12628:	bl	123e4 <printf@plt>
   1262c:	b	12644 <dbg_emitter@@Base+0x98>
   12630:	ldr	r0, [r6, #-4]
   12634:	cmp	r0, r7
   12638:	beq	12600 <dbg_emitter@@Base+0x54>
   1263c:	cmp	r0, #0
   12640:	beq	1261c <dbg_emitter@@Base+0x70>
   12644:	ldr	r0, [r6], #8
   12648:	subs	r5, r5, #1
   1264c:	add	r4, r0, r4
   12650:	bne	12630 <dbg_emitter@@Base+0x84>
   12654:	mov	r0, #0
   12658:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1265c:	andeq	r5, r0, ip, lsr #21
   12660:	andeq	r7, r1, r4, ror #20
   12664:			; <UNDEFINED> instruction: 0x00005ab9
   12668:	ldrdeq	r5, [r0], -r6

0001266c <debug_test@@Base>:
   1266c:	push	{r4, r5, r6, r7, fp, lr}
   12670:	add	fp, sp, #16
   12674:	sub	sp, sp, #280	; 0x118
   12678:	add	r4, sp, #8
   1267c:	vmov.i32	q8, #0	; 0x00000000
   12680:	mov	r5, #0
   12684:	add	r0, r4, #16
   12688:	mov	r1, r4
   1268c:	str	r5, [sp, #40]	; 0x28
   12690:	vst1.64	{d16-d17}, [r0]
   12694:	mov	r0, #36	; 0x24
   12698:	vst1.64	{d16-d17}, [r1], r0
   1269c:	str	r5, [r1]
   126a0:	ldr	r0, [pc, #104]	; 12710 <debug_test@@Base+0xa4>
   126a4:	add	r0, pc, r0
   126a8:	bl	1242c <puts@plt>
   126ac:	str	r5, [sp]
   126b0:	add	r5, sp, #48	; 0x30
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	ldr	r1, [pc, #80]	; 12714 <debug_test@@Base+0xa8>
   126c0:	mov	r0, r5
   126c4:	ldr	r1, [pc, r1]
   126c8:	bl	12e28 <flatcc_builder_custom_init@@Base>
   126cc:	mvn	r0, #-1073741824	; 0xc0000000
   126d0:	mov	r1, #4
   126d4:	mov	r2, #10
   126d8:	mov	r3, #4
   126dc:	str	r1, [sp]
   126e0:	str	r0, [sp, #4]
   126e4:	mov	r0, r5
   126e8:	mov	r1, r4
   126ec:	bl	15e0c <flatcc_builder_create_vector@@Base>
   126f0:	mov	r1, r0
   126f4:	mov	r0, r5
   126f8:	bl	12718 <debug_test@@Base+0xac>
   126fc:	mov	r0, r5
   12700:	bl	13204 <flatcc_builder_clear@@Base>
   12704:	mov	r0, #0
   12708:	sub	sp, fp, #16
   1270c:	pop	{r4, r5, r6, r7, fp, pc}
   12710:	andeq	r5, r0, r4, ror #24
   12714:	andeq	r7, r1, ip, lsl #19
   12718:	push	{r4, r5, r6, r7, fp, lr}
   1271c:	add	fp, sp, #16
   12720:	mov	r5, r1
   12724:	mov	r1, #0
   12728:	mov	r2, #0
   1272c:	mov	r3, #0
   12730:	mov	r4, r0
   12734:	mov	r7, #0
   12738:	bl	13c40 <flatcc_builder_start_buffer@@Base>
   1273c:	cmp	r0, #0
   12740:	popne	{r4, r5, r6, r7, fp, pc}
   12744:	mov	r0, r4
   12748:	mov	r1, #3
   1274c:	bl	15218 <flatcc_builder_start_table@@Base>
   12750:	cmp	r0, #0
   12754:	beq	12768 <debug_test@@Base+0xfc>
   12758:	mov	r0, r4
   1275c:	mov	r1, r7
   12760:	pop	{r4, r5, r6, r7, fp, lr}
   12764:	b	13e40 <flatcc_builder_end_buffer@@Base>
   12768:	mov	r0, r4
   1276c:	mov	r1, #0
   12770:	mov	r2, #8
   12774:	mov	r3, #8
   12778:	mov	r7, #0
   1277c:	bl	166bc <flatcc_builder_table_add@@Base>
   12780:	cmp	r0, #0
   12784:	beq	12758 <debug_test@@Base+0xec>
   12788:	mov	r7, #0
   1278c:	mov	r6, #42	; 0x2a
   12790:	cmp	r5, #0
   12794:	strd	r6, [r0]
   12798:	beq	12758 <debug_test@@Base+0xec>
   1279c:	mov	r0, r4
   127a0:	mov	r1, #2
   127a4:	bl	16508 <flatcc_builder_table_add_offset@@Base>
   127a8:	cmp	r0, #0
   127ac:	beq	12758 <debug_test@@Base+0xec>
   127b0:	str	r5, [r0]
   127b4:	mov	r0, r4
   127b8:	mov	r1, #1
   127bc:	mov	r2, #1
   127c0:	mov	r3, #1
   127c4:	mov	r5, #1
   127c8:	bl	166bc <flatcc_builder_table_add@@Base>
   127cc:	cmp	r0, #0
   127d0:	beq	12758 <debug_test@@Base+0xec>
   127d4:	strb	r5, [r0]
   127d8:	mov	r0, r4
   127dc:	mov	r2, #0
   127e0:	ldr	r1, [pc, #60]	; 12824 <debug_test@@Base+0x1b8>
   127e4:	add	r1, pc, r1
   127e8:	bl	15bac <flatcc_builder_check_required@@Base>
   127ec:	cmp	r0, #0
   127f0:	beq	12804 <debug_test@@Base+0x198>
   127f4:	mov	r0, r4
   127f8:	bl	15c48 <flatcc_builder_end_table@@Base>
   127fc:	mov	r7, r0
   12800:	b	12758 <debug_test@@Base+0xec>
   12804:	ldr	r0, [pc, #28]	; 12828 <debug_test@@Base+0x1bc>
   12808:	ldr	r1, [pc, #28]	; 1282c <debug_test@@Base+0x1c0>
   1280c:	ldr	r3, [pc, #28]	; 12830 <debug_test@@Base+0x1c4>
   12810:	mov	r2, #21
   12814:	add	r0, pc, r0
   12818:	add	r1, pc, r1
   1281c:	add	r3, pc, r3
   12820:	bl	124b0 <__assert_fail@plt>
   12824:	andeq	r5, r0, ip, lsl #22
   12828:	andeq	r5, r0, r5, ror r9
   1282c:	ldrdeq	r5, [r0], -sp
   12830:	andeq	r5, r0, sp, asr #20

00012834 <emit_test@@Base>:
   12834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12838:	add	fp, sp, #28
   1283c:	sub	sp, sp, #284	; 0x11c
   12840:	ldr	r0, [pc, #868]	; 12bac <emit_test@@Base+0x378>
   12844:	add	r6, sp, #28
   12848:	add	r4, sp, #8
   1284c:	add	r0, pc, r0
   12850:	vld1.64	{d16-d17}, [r0]
   12854:	mov	r0, r6
   12858:	vst1.64	{d16-d17}, [r4]
   1285c:	bl	12e9c <flatcc_builder_init@@Base>
   12860:	mov	r0, r6
   12864:	bl	17a7c <flatcc_builder_get_emit_context@@Base>
   12868:	mov	r5, r0
   1286c:	mvn	r0, #-1073741824	; 0xc0000000
   12870:	mov	r1, #4
   12874:	mov	r2, #4
   12878:	mov	r3, #4
   1287c:	str	r1, [sp]
   12880:	str	r0, [sp, #4]
   12884:	mov	r0, r6
   12888:	mov	r1, r4
   1288c:	bl	15e0c <flatcc_builder_create_vector@@Base>
   12890:	mov	r1, r0
   12894:	mov	r0, r6
   12898:	bl	12718 <debug_test@@Base+0xac>
   1289c:	ldm	r5, {r1, r2}
   128a0:	mvn	r0, #0
   128a4:	cmp	r1, r2
   128a8:	bne	12ac0 <emit_test@@Base+0x28c>
   128ac:	ldr	r4, [r5, #8]
   128b0:	cmp	r4, #0
   128b4:	beq	12ac0 <emit_test@@Base+0x28c>
   128b8:	ldr	r5, [r5, #24]
   128bc:	add	r0, sp, #28
   128c0:	bl	17728 <flatcc_builder_get_buffer_size@@Base>
   128c4:	cmp	r5, r0
   128c8:	bne	12b28 <emit_test@@Base+0x2f4>
   128cc:	ldr	r6, [pc, #732]	; 12bb0 <emit_test@@Base+0x37c>
   128d0:	mov	r2, r5
   128d4:	ldr	r6, [pc, r6]
   128d8:	ldr	r0, [r6]
   128dc:	ldr	r1, [pc, #720]	; 12bb4 <emit_test@@Base+0x380>
   128e0:	add	r1, pc, r1
   128e4:	bl	12468 <fprintf@plt>
   128e8:	ldr	r6, [r6]
   128ec:	ldr	r1, [pc, #708]	; 12bb8 <emit_test@@Base+0x384>
   128f0:	ldr	r2, [pc, #708]	; 12bbc <emit_test@@Base+0x388>
   128f4:	add	r1, pc, r1
   128f8:	add	r2, pc, r2
   128fc:	mov	r0, r6
   12900:	bl	12468 <fprintf@plt>
   12904:	cmp	r5, #0
   12908:	beq	129e4 <emit_test@@Base+0x1b0>
   1290c:	ldr	sl, [pc, #684]	; 12bc0 <emit_test@@Base+0x38c>
   12910:	sub	r7, fp, #49	; 0x31
   12914:	mov	r8, #0
   12918:	add	sl, pc, sl
   1291c:	ands	r9, r8, #15
   12920:	bne	12958 <emit_test@@Base+0x124>
   12924:	cmp	r8, #0
   12928:	beq	12940 <emit_test@@Base+0x10c>
   1292c:	ldr	r1, [pc, #656]	; 12bc4 <emit_test@@Base+0x390>
   12930:	mov	r0, r6
   12934:	mov	r2, r7
   12938:	add	r1, pc, r1
   1293c:	bl	12468 <fprintf@plt>
   12940:	ldr	r1, [pc, #640]	; 12bc8 <emit_test@@Base+0x394>
   12944:	mov	r0, r6
   12948:	mov	r2, r8
   1294c:	add	r1, pc, r1
   12950:	bl	12468 <fprintf@plt>
   12954:	b	1296c <emit_test@@Base+0x138>
   12958:	tst	r8, #7
   1295c:	bne	1296c <emit_test@@Base+0x138>
   12960:	mov	r0, #32
   12964:	mov	r1, r6
   12968:	bl	12498 <fputc@plt>
   1296c:	ldrb	r2, [r4, r8]
   12970:	mov	r0, r6
   12974:	mov	r1, sl
   12978:	bl	12468 <fprintf@plt>
   1297c:	ldrb	r0, [r4, r8]
   12980:	add	r8, r8, #1
   12984:	sub	r1, r0, #32
   12988:	uxtb	r1, r1
   1298c:	cmp	r1, #94	; 0x5e
   12990:	mov	r1, #0
   12994:	movwhi	r0, #46	; 0x2e
   12998:	cmp	r5, r8
   1299c:	strb	r0, [r7, r9]
   129a0:	add	r0, r7, r9
   129a4:	strb	r1, [r0, #1]
   129a8:	bne	1291c <emit_test@@Base+0xe8>
   129ac:	tst	r5, #15
   129b0:	beq	129e4 <emit_test@@Base+0x1b0>
   129b4:	ldr	r8, [pc, #528]	; 12bcc <emit_test@@Base+0x398>
   129b8:	add	r7, r5, #1
   129bc:	add	r8, pc, r8
   129c0:	mov	r0, r8
   129c4:	mov	r1, #3
   129c8:	mov	r2, #1
   129cc:	mov	r3, r6
   129d0:	bl	12420 <fwrite@plt>
   129d4:	add	r0, r7, #1
   129d8:	tst	r7, #15
   129dc:	mov	r7, r0
   129e0:	bne	129c0 <emit_test@@Base+0x18c>
   129e4:	ldr	r1, [pc, #484]	; 12bd0 <emit_test@@Base+0x39c>
   129e8:	sub	r2, fp, #49	; 0x31
   129ec:	mov	r0, r6
   129f0:	add	r1, pc, r1
   129f4:	bl	12468 <fprintf@plt>
   129f8:	cmp	r5, #58	; 0x3a
   129fc:	bne	12b48 <emit_test@@Base+0x314>
   12a00:	ldr	r1, [pc, #460]	; 12bd4 <emit_test@@Base+0x3a0>
   12a04:	mov	r0, r4
   12a08:	mov	r2, #58	; 0x3a
   12a0c:	add	r1, pc, r1
   12a10:	bl	12408 <memcmp@plt>
   12a14:	cmp	r0, #0
   12a18:	bne	12b68 <emit_test@@Base+0x334>
   12a1c:	ldr	r0, [r4]
   12a20:	ldr	r1, [r4, r0]!
   12a24:	mov	r0, r4
   12a28:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   12a2c:	cmp	r1, #6
   12a30:	bcc	12ac8 <emit_test@@Base+0x294>
   12a34:	ldrh	r2, [r0, #4]
   12a38:	cmp	r2, #0
   12a3c:	beq	12ac8 <emit_test@@Base+0x294>
   12a40:	mov	r3, r4
   12a44:	ldr	r2, [r3, r2]!
   12a48:	ldr	r3, [r3, #4]
   12a4c:	eor	r2, r2, #42	; 0x2a
   12a50:	orrs	r2, r2, r3
   12a54:	bne	12ac8 <emit_test@@Base+0x294>
   12a58:	cmp	r1, #8
   12a5c:	bcc	12ae8 <emit_test@@Base+0x2b4>
   12a60:	ldrh	r2, [r0, #6]
   12a64:	cmp	r2, #0
   12a68:	beq	12ae8 <emit_test@@Base+0x2b4>
   12a6c:	ldrb	r2, [r4, r2]
   12a70:	cmp	r2, #1
   12a74:	bne	12ae8 <emit_test@@Base+0x2b4>
   12a78:	cmp	r1, #10
   12a7c:	bcc	12b08 <emit_test@@Base+0x2d4>
   12a80:	ldrh	r0, [r0, #8]
   12a84:	cmp	r0, #0
   12a88:	beq	12b08 <emit_test@@Base+0x2d4>
   12a8c:	ldr	r0, [r4, r0]!
   12a90:	ldr	r0, [r4, r0]!
   12a94:	cmp	r0, #4
   12a98:	bne	12b08 <emit_test@@Base+0x2d4>
   12a9c:	add	r0, r4, #4
   12aa0:	vldr	s0, [pc, #256]	; 12ba8 <emit_test@@Base+0x374>
   12aa4:	vldr	s2, [r0, #8]
   12aa8:	vcmp.f32	s2, s0
   12aac:	vmrs	APSR_nzcv, fpscr
   12ab0:	bne	12b88 <emit_test@@Base+0x354>
   12ab4:	add	r0, sp, #28
   12ab8:	bl	13204 <flatcc_builder_clear@@Base>
   12abc:	mov	r0, #0
   12ac0:	sub	sp, fp, #28
   12ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ac8:	ldr	r0, [pc, #300]	; 12bfc <emit_test@@Base+0x3c8>
   12acc:	ldr	r1, [pc, #300]	; 12c00 <emit_test@@Base+0x3cc>
   12ad0:	ldr	r3, [pc, #300]	; 12c04 <emit_test@@Base+0x3d0>
   12ad4:	mov	r2, #112	; 0x70
   12ad8:	add	r0, pc, r0
   12adc:	add	r1, pc, r1
   12ae0:	add	r3, pc, r3
   12ae4:	bl	124b0 <__assert_fail@plt>
   12ae8:	ldr	r0, [pc, #280]	; 12c08 <emit_test@@Base+0x3d4>
   12aec:	ldr	r1, [pc, #280]	; 12c0c <emit_test@@Base+0x3d8>
   12af0:	ldr	r3, [pc, #280]	; 12c10 <emit_test@@Base+0x3dc>
   12af4:	mov	r2, #113	; 0x71
   12af8:	add	r0, pc, r0
   12afc:	add	r1, pc, r1
   12b00:	add	r3, pc, r3
   12b04:	bl	124b0 <__assert_fail@plt>
   12b08:	ldr	r0, [pc, #260]	; 12c14 <emit_test@@Base+0x3e0>
   12b0c:	ldr	r1, [pc, #260]	; 12c18 <emit_test@@Base+0x3e4>
   12b10:	ldr	r3, [pc, #260]	; 12c1c <emit_test@@Base+0x3e8>
   12b14:	mov	r2, #114	; 0x72
   12b18:	add	r0, pc, r0
   12b1c:	add	r1, pc, r1
   12b20:	add	r3, pc, r3
   12b24:	bl	124b0 <__assert_fail@plt>
   12b28:	ldr	r0, [pc, #168]	; 12bd8 <emit_test@@Base+0x3a4>
   12b2c:	ldr	r1, [pc, #168]	; 12bdc <emit_test@@Base+0x3a8>
   12b30:	ldr	r3, [pc, #168]	; 12be0 <emit_test@@Base+0x3ac>
   12b34:	mov	r2, #101	; 0x65
   12b38:	add	r0, pc, r0
   12b3c:	add	r1, pc, r1
   12b40:	add	r3, pc, r3
   12b44:	bl	124b0 <__assert_fail@plt>
   12b48:	ldr	r0, [pc, #148]	; 12be4 <emit_test@@Base+0x3b0>
   12b4c:	ldr	r1, [pc, #148]	; 12be8 <emit_test@@Base+0x3b4>
   12b50:	ldr	r3, [pc, #148]	; 12bec <emit_test@@Base+0x3b8>
   12b54:	mov	r2, #106	; 0x6a
   12b58:	add	r0, pc, r0
   12b5c:	add	r1, pc, r1
   12b60:	add	r3, pc, r3
   12b64:	bl	124b0 <__assert_fail@plt>
   12b68:	ldr	r0, [pc, #128]	; 12bf0 <emit_test@@Base+0x3bc>
   12b6c:	ldr	r1, [pc, #128]	; 12bf4 <emit_test@@Base+0x3c0>
   12b70:	ldr	r3, [pc, #128]	; 12bf8 <emit_test@@Base+0x3c4>
   12b74:	mov	r2, #108	; 0x6c
   12b78:	add	r0, pc, r0
   12b7c:	add	r1, pc, r1
   12b80:	add	r3, pc, r3
   12b84:	bl	124b0 <__assert_fail@plt>
   12b88:	ldr	r0, [pc, #144]	; 12c20 <emit_test@@Base+0x3ec>
   12b8c:	ldr	r1, [pc, #144]	; 12c24 <emit_test@@Base+0x3f0>
   12b90:	ldr	r3, [pc, #144]	; 12c28 <emit_test@@Base+0x3f4>
   12b94:	mov	r2, #115	; 0x73
   12b98:	add	r0, pc, r0
   12b9c:	add	r1, pc, r1
   12ba0:	add	r3, pc, r3
   12ba4:	bl	124b0 <__assert_fail@plt>
   12ba8:	svccc	0x0099999a
   12bac:	andeq	r5, r0, ip, lsr #21
   12bb0:	andeq	r7, r1, r0, lsl #15
   12bb4:	andeq	r5, r0, lr, lsl #17
   12bb8:	andeq	r5, r0, r2, lsr #19
   12bbc:	andeq	r5, r0, r7, lsl #17
   12bc0:	muleq	r0, r1, r9
   12bc4:	andeq	r5, r0, r3, ror #18
   12bc8:	andeq	r5, r0, r5, asr r9
   12bcc:	strdeq	r5, [r0], -r3
   12bd0:	andeq	r5, r0, fp, lsr #17
   12bd4:	andeq	r5, r0, r8, lsr #17
   12bd8:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   12bdc:	andeq	r5, r0, r0, asr #11
   12be0:	andeq	r5, r0, lr, lsl r6
   12be4:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   12be8:	andeq	r5, r0, r0, lsr #11
   12bec:	strdeq	r5, [r0], -lr
   12bf0:			; <UNDEFINED> instruction: 0x00006bbf
   12bf4:	andeq	r5, r0, r0, lsl #11
   12bf8:	ldrdeq	r5, [r0], -lr
   12bfc:	andeq	r6, r0, pc, asr ip
   12c00:	andeq	r5, r0, r0, lsr #12
   12c04:	andeq	r5, r0, lr, ror r6
   12c08:	andeq	r6, r0, pc, lsr ip
   12c0c:	andeq	r5, r0, r0, lsl #12
   12c10:	andeq	r5, r0, lr, asr r6
   12c14:	andeq	r6, r0, pc, lsl ip
   12c18:	andeq	r5, r0, r0, ror #11
   12c1c:	andeq	r5, r0, lr, lsr r6
   12c20:	muleq	r0, pc, fp	; <UNPREDICTABLE>
   12c24:	andeq	r5, r0, r0, ror #10
   12c28:			; <UNDEFINED> instruction: 0x000055be

00012c2c <main@@Base>:
   12c2c:	push	{r4, r5, r6, r7, fp, lr}
   12c30:	add	fp, sp, #16
   12c34:	sub	sp, sp, #280	; 0x118
   12c38:	add	r4, sp, #8
   12c3c:	vmov.i32	q8, #0	; 0x00000000
   12c40:	mov	r5, #0
   12c44:	add	r0, r4, #16
   12c48:	mov	r1, r4
   12c4c:	str	r5, [sp, #40]	; 0x28
   12c50:	vst1.64	{d16-d17}, [r0]
   12c54:	mov	r0, #36	; 0x24
   12c58:	vst1.64	{d16-d17}, [r1], r0
   12c5c:	str	r5, [r1]
   12c60:	ldr	r0, [pc, #104]	; 12cd0 <main@@Base+0xa4>
   12c64:	add	r0, pc, r0
   12c68:	bl	1242c <puts@plt>
   12c6c:	str	r5, [sp]
   12c70:	add	r5, sp, #48	; 0x30
   12c74:	mov	r2, #0
   12c78:	mov	r3, #0
   12c7c:	ldr	r1, [pc, #80]	; 12cd4 <main@@Base+0xa8>
   12c80:	mov	r0, r5
   12c84:	ldr	r1, [pc, r1]
   12c88:	bl	12e28 <flatcc_builder_custom_init@@Base>
   12c8c:	mvn	r0, #-1073741824	; 0xc0000000
   12c90:	mov	r1, #4
   12c94:	mov	r2, #10
   12c98:	mov	r3, #4
   12c9c:	str	r1, [sp]
   12ca0:	str	r0, [sp, #4]
   12ca4:	mov	r0, r5
   12ca8:	mov	r1, r4
   12cac:	bl	15e0c <flatcc_builder_create_vector@@Base>
   12cb0:	mov	r1, r0
   12cb4:	mov	r0, r5
   12cb8:	bl	12718 <debug_test@@Base+0xac>
   12cbc:	mov	r0, r5
   12cc0:	bl	13204 <flatcc_builder_clear@@Base>
   12cc4:	bl	12834 <emit_test@@Base>
   12cc8:	sub	sp, fp, #16
   12ccc:	pop	{r4, r5, r6, r7, fp, pc}
   12cd0:	andeq	r5, r0, r4, lsr #13
   12cd4:	andeq	r7, r1, ip, asr #7

00012cd8 <flatcc_builder_default_alloc@@Base>:
   12cd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cdc:	add	fp, sp, #24
   12ce0:	mov	r4, r1
   12ce4:	cmp	r2, #0
   12ce8:	beq	12d34 <flatcc_builder_default_alloc@@Base+0x5c>
   12cec:	ldr	r0, [fp, #8]
   12cf0:	mov	r8, r3
   12cf4:	sub	r1, r0, #1
   12cf8:	cmp	r1, #6
   12cfc:	bhi	12d60 <flatcc_builder_default_alloc@@Base+0x88>
   12d00:	add	r3, pc, #8
   12d04:	mov	r0, #256	; 0x100
   12d08:	ldr	r1, [r3, r1, lsl #2]
   12d0c:	add	pc, r3, r1
   12d10:	andeq	r0, r0, r4, rrx
   12d14:	andeq	r0, r0, r0, asr r0
   12d18:	andeq	r0, r0, r0, asr r0
   12d1c:	andeq	r0, r0, ip, lsl r0
   12d20:	andeq	r0, r0, r8, asr r0
   12d24:	andeq	r0, r0, r0, asr r0
   12d28:	andeq	r0, r0, r0, rrx
   12d2c:	mov	r0, #288	; 0x120
   12d30:	b	12d74 <flatcc_builder_default_alloc@@Base+0x9c>
   12d34:	ldr	r0, [r4]
   12d38:	cmp	r0, #0
   12d3c:	moveq	r6, #0
   12d40:	moveq	r0, r6
   12d44:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d48:	bl	123f0 <free@plt>
   12d4c:	mov	r6, #0
   12d50:	mov	r0, r6
   12d54:	str	r6, [r4]
   12d58:	str	r6, [r4, #4]
   12d5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d60:	mov	r0, #32
   12d64:	b	12d74 <flatcc_builder_default_alloc@@Base+0x9c>
   12d68:	mov	r0, r2
   12d6c:	b	12d74 <flatcc_builder_default_alloc@@Base+0x9c>
   12d70:	mov	r0, #64	; 0x40
   12d74:	mov	r7, r0
   12d78:	lsl	r0, r0, #1
   12d7c:	cmp	r7, r2
   12d80:	bcc	12d74 <flatcc_builder_default_alloc@@Base+0x9c>
   12d84:	ldr	r0, [r4, #4]
   12d88:	mov	r6, #0
   12d8c:	cmp	r0, r2
   12d90:	lsrcs	r0, r0, #1
   12d94:	cmpcs	r0, r7
   12d98:	bcs	12dd0 <flatcc_builder_default_alloc@@Base+0xf8>
   12d9c:	ldr	r0, [r4]
   12da0:	mov	r1, r7
   12da4:	bl	12414 <realloc@plt>
   12da8:	cmp	r0, #0
   12dac:	mvneq	r6, #0
   12db0:	moveq	r0, r6
   12db4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12db8:	cmp	r8, #0
   12dbc:	mov	r5, r0
   12dc0:	ldrne	r1, [r4, #4]
   12dc4:	cmpne	r7, r1
   12dc8:	bhi	12dd8 <flatcc_builder_default_alloc@@Base+0x100>
   12dcc:	stm	r4, {r5, r7}
   12dd0:	mov	r0, r6
   12dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12dd8:	add	r0, r5, r1
   12ddc:	sub	r2, r7, r1
   12de0:	mov	r1, #0
   12de4:	bl	12480 <memset@plt>
   12de8:	b	12dcc <flatcc_builder_default_alloc@@Base+0xf4>

00012dec <flatcc_builder_flush_vtable_cache@@Base>:
   12dec:	push	{r4, r5, fp, lr}
   12df0:	add	fp, sp, #8
   12df4:	mov	r4, r0
   12df8:	ldr	r0, [r0, #116]	; 0x74
   12dfc:	cmp	r0, #0
   12e00:	popeq	{r4, r5, fp, pc}
   12e04:	ldr	r0, [r4, #92]	; 0x5c
   12e08:	ldr	r2, [r4, #96]	; 0x60
   12e0c:	mov	r1, #0
   12e10:	mov	r5, #0
   12e14:	bl	12480 <memset@plt>
   12e18:	mov	r0, #16
   12e1c:	str	r5, [r4, #120]	; 0x78
   12e20:	str	r0, [r4, #124]	; 0x7c
   12e24:	pop	{r4, r5, fp, pc}

00012e28 <flatcc_builder_custom_init@@Base>:
   12e28:	push	{r4, r5, r6, r7, fp, lr}
   12e2c:	add	fp, sp, #16
   12e30:	mov	r6, r2
   12e34:	mov	r7, r1
   12e38:	mov	r1, #0
   12e3c:	mov	r2, #232	; 0xe8
   12e40:	mov	r5, r3
   12e44:	mov	r4, r0
   12e48:	bl	12480 <memset@plt>
   12e4c:	ldr	r0, [fp, #8]
   12e50:	cmp	r7, #0
   12e54:	bne	12e6c <flatcc_builder_custom_init@@Base+0x44>
   12e58:	mov	r1, #1
   12e5c:	add	r6, r4, #188	; 0xbc
   12e60:	str	r1, [r4, #184]	; 0xb8
   12e64:	ldr	r7, [pc, #40]	; 12e94 <flatcc_builder_custom_init@@Base+0x6c>
   12e68:	ldr	r7, [pc, r7]
   12e6c:	ldr	r1, [pc, #36]	; 12e98 <flatcc_builder_custom_init@@Base+0x70>
   12e70:	cmp	r5, #0
   12e74:	ldr	r1, [pc, r1]
   12e78:	str	r6, [r4, #36]	; 0x24
   12e7c:	str	r0, [r4, #40]	; 0x28
   12e80:	mov	r0, #0
   12e84:	str	r7, [r4, #44]	; 0x2c
   12e88:	movne	r1, r5
   12e8c:	str	r1, [r4, #48]	; 0x30
   12e90:	pop	{r4, r5, r6, r7, fp, pc}
   12e94:	strdeq	r7, [r1], -r8
   12e98:	andeq	r7, r1, r8, ror #3

00012e9c <flatcc_builder_init@@Base>:
   12e9c:	push	{r4, r5, fp, lr}
   12ea0:	add	fp, sp, #8
   12ea4:	mov	r1, #0
   12ea8:	mov	r2, #232	; 0xe8
   12eac:	mov	r4, r0
   12eb0:	mov	r5, #0
   12eb4:	bl	12480 <memset@plt>
   12eb8:	mov	r0, #1
   12ebc:	str	r0, [r4, #184]	; 0xb8
   12ec0:	add	r0, r4, #188	; 0xbc
   12ec4:	ldr	r1, [pc, #32]	; 12eec <flatcc_builder_init@@Base+0x50>
   12ec8:	ldr	r1, [pc, r1]
   12ecc:	ldr	r2, [pc, #28]	; 12ef0 <flatcc_builder_init@@Base+0x54>
   12ed0:	ldr	r2, [pc, r2]
   12ed4:	str	r0, [r4, #36]	; 0x24
   12ed8:	mov	r0, #0
   12edc:	str	r5, [r4, #40]	; 0x28
   12ee0:	str	r2, [r4, #44]	; 0x2c
   12ee4:	str	r1, [r4, #48]	; 0x30
   12ee8:	pop	{r4, r5, fp, pc}
   12eec:	muleq	r1, r4, r1
   12ef0:	muleq	r1, r0, r1

00012ef4 <flatcc_builder_custom_reset@@Base>:
   12ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ef8:	add	fp, sp, #24
   12efc:	sub	sp, sp, #8
   12f00:	mov	r9, r2
   12f04:	mov	r8, r1
   12f08:	mov	r4, r0
   12f0c:	add	r7, r0, #52	; 0x34
   12f10:	mov	r5, #0
   12f14:	ldr	r0, [r7]
   12f18:	cmp	r0, #0
   12f1c:	beq	12f64 <flatcc_builder_custom_reset@@Base+0x70>
   12f20:	cmp	r9, #0
   12f24:	cmpne	r5, #5
   12f28:	beq	12f54 <flatcc_builder_custom_reset@@Base+0x60>
   12f2c:	ldr	r0, [r4, #40]	; 0x28
   12f30:	ldr	r6, [r4, #48]	; 0x30
   12f34:	mov	r1, r7
   12f38:	mov	r2, #1
   12f3c:	mov	r3, #1
   12f40:	str	r5, [sp]
   12f44:	blx	r6
   12f48:	cmp	r0, #0
   12f4c:	bne	13004 <flatcc_builder_custom_reset@@Base+0x110>
   12f50:	ldr	r0, [r7]
   12f54:	ldr	r2, [r7, #4]
   12f58:	mov	r1, #0
   12f5c:	bl	12480 <memset@plt>
   12f60:	b	12f70 <flatcc_builder_custom_reset@@Base+0x7c>
   12f64:	ldr	r0, [r7, #4]
   12f68:	cmp	r0, #0
   12f6c:	bne	13014 <flatcc_builder_custom_reset@@Base+0x120>
   12f70:	add	r5, r5, #1
   12f74:	add	r7, r7, #8
   12f78:	cmp	r5, #8
   12f7c:	bcc	12f14 <flatcc_builder_custom_reset@@Base+0x20>
   12f80:	mov	r0, #0
   12f84:	vmov.i32	q8, #0	; 0x00000000
   12f88:	mov	r5, #0
   12f8c:	str	r0, [r4, #120]	; 0x78
   12f90:	ldr	r1, [r4, #124]	; 0x7c
   12f94:	cmp	r1, #0
   12f98:	movne	r1, #16
   12f9c:	strne	r1, [r4, #124]	; 0x7c
   12fa0:	add	r1, r4, #148	; 0x94
   12fa4:	strh	r0, [r4, #128]	; 0x80
   12fa8:	str	r0, [r4, #136]	; 0x88
   12fac:	str	r0, [r4, #140]	; 0x8c
   12fb0:	str	r0, [r4, #32]
   12fb4:	cmp	r8, #0
   12fb8:	vst1.32	{d16-d17}, [r1]
   12fbc:	ldr	r2, [r4, #60]	; 0x3c
   12fc0:	ldr	r1, [r4, #52]	; 0x34
   12fc4:	ldr	r3, [r4, #76]	; 0x4c
   12fc8:	str	r2, [r4, #16]
   12fcc:	str	r0, [r4, #20]
   12fd0:	str	r0, [r4, #24]
   12fd4:	movne	r0, #0
   12fd8:	str	r3, [r4]
   12fdc:	str	r1, [r4, #4]
   12fe0:	strne	r0, [r4, #172]	; 0xac
   12fe4:	strne	r0, [r4, #176]	; 0xb0
   12fe8:	strne	r0, [r4, #180]	; 0xb4
   12fec:	ldr	r0, [r4, #184]	; 0xb8
   12ff0:	cmp	r0, #0
   12ff4:	beq	13008 <flatcc_builder_custom_reset@@Base+0x114>
   12ff8:	add	r0, r4, #188	; 0xbc
   12ffc:	bl	17ad8 <flatcc_emitter_reset@@Base>
   13000:	b	13008 <flatcc_builder_custom_reset@@Base+0x114>
   13004:	mvn	r5, #0
   13008:	mov	r0, r5
   1300c:	sub	sp, fp, #24
   13010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13014:	ldr	r0, [pc, #24]	; 13034 <flatcc_builder_custom_reset@@Base+0x140>
   13018:	ldr	r1, [pc, #24]	; 13038 <flatcc_builder_custom_reset@@Base+0x144>
   1301c:	ldr	r3, [pc, #24]	; 1303c <flatcc_builder_custom_reset@@Base+0x148>
   13020:	movw	r2, #434	; 0x1b2
   13024:	add	r0, pc, r0
   13028:	add	r1, pc, r1
   1302c:	add	r3, pc, r3
   13030:	bl	124b0 <__assert_fail@plt>
   13034:	andeq	r5, r0, r4, asr #10
   13038:	andeq	r5, r0, r2, asr r5
   1303c:	andeq	r5, r0, fp, lsr #11

00013040 <flatcc_builder_reset@@Base>:
   13040:	push	{r4, sl, fp, lr}
   13044:	add	fp, sp, #8
   13048:	mov	r4, r0
   1304c:	ldr	r0, [r0, #52]	; 0x34
   13050:	ldr	r2, [r4, #56]	; 0x38
   13054:	cmp	r0, #0
   13058:	beq	13068 <flatcc_builder_reset@@Base+0x28>
   1305c:	mov	r1, #0
   13060:	bl	12480 <memset@plt>
   13064:	b	13070 <flatcc_builder_reset@@Base+0x30>
   13068:	cmp	r2, #0
   1306c:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   13070:	ldr	r0, [r4, #60]	; 0x3c
   13074:	ldr	r2, [r4, #64]	; 0x40
   13078:	cmp	r0, #0
   1307c:	beq	1308c <flatcc_builder_reset@@Base+0x4c>
   13080:	mov	r1, #0
   13084:	bl	12480 <memset@plt>
   13088:	b	13094 <flatcc_builder_reset@@Base+0x54>
   1308c:	cmp	r2, #0
   13090:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   13094:	ldr	r0, [r4, #68]	; 0x44
   13098:	ldr	r2, [r4, #72]	; 0x48
   1309c:	cmp	r0, #0
   130a0:	beq	130b0 <flatcc_builder_reset@@Base+0x70>
   130a4:	mov	r1, #0
   130a8:	bl	12480 <memset@plt>
   130ac:	b	130b8 <flatcc_builder_reset@@Base+0x78>
   130b0:	cmp	r2, #0
   130b4:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   130b8:	ldr	r0, [r4, #76]	; 0x4c
   130bc:	ldr	r2, [r4, #80]	; 0x50
   130c0:	cmp	r0, #0
   130c4:	beq	130d4 <flatcc_builder_reset@@Base+0x94>
   130c8:	mov	r1, #0
   130cc:	bl	12480 <memset@plt>
   130d0:	b	130dc <flatcc_builder_reset@@Base+0x9c>
   130d4:	cmp	r2, #0
   130d8:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   130dc:	ldr	r0, [r4, #84]	; 0x54
   130e0:	ldr	r2, [r4, #88]	; 0x58
   130e4:	cmp	r0, #0
   130e8:	beq	130f8 <flatcc_builder_reset@@Base+0xb8>
   130ec:	mov	r1, #0
   130f0:	bl	12480 <memset@plt>
   130f4:	b	13100 <flatcc_builder_reset@@Base+0xc0>
   130f8:	cmp	r2, #0
   130fc:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   13100:	ldr	r0, [r4, #92]	; 0x5c
   13104:	ldr	r2, [r4, #96]	; 0x60
   13108:	cmp	r0, #0
   1310c:	beq	1311c <flatcc_builder_reset@@Base+0xdc>
   13110:	mov	r1, #0
   13114:	bl	12480 <memset@plt>
   13118:	b	13124 <flatcc_builder_reset@@Base+0xe4>
   1311c:	cmp	r2, #0
   13120:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   13124:	ldr	r0, [r4, #100]	; 0x64
   13128:	ldr	r2, [r4, #104]	; 0x68
   1312c:	cmp	r0, #0
   13130:	beq	13140 <flatcc_builder_reset@@Base+0x100>
   13134:	mov	r1, #0
   13138:	bl	12480 <memset@plt>
   1313c:	b	13148 <flatcc_builder_reset@@Base+0x108>
   13140:	cmp	r2, #0
   13144:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   13148:	ldr	r0, [r4, #108]	; 0x6c
   1314c:	ldr	r2, [r4, #112]	; 0x70
   13150:	cmp	r0, #0
   13154:	beq	13164 <flatcc_builder_reset@@Base+0x124>
   13158:	mov	r1, #0
   1315c:	bl	12480 <memset@plt>
   13160:	b	1316c <flatcc_builder_reset@@Base+0x12c>
   13164:	cmp	r2, #0
   13168:	bne	131d8 <flatcc_builder_reset@@Base+0x198>
   1316c:	mov	r0, #0
   13170:	str	r0, [r4, #120]	; 0x78
   13174:	ldr	r1, [r4, #124]	; 0x7c
   13178:	cmp	r1, #0
   1317c:	movne	r1, #16
   13180:	strne	r1, [r4, #124]	; 0x7c
   13184:	vmov.i32	q8, #0	; 0x00000000
   13188:	add	r1, r4, #148	; 0x94
   1318c:	strh	r0, [r4, #128]	; 0x80
   13190:	str	r0, [r4, #136]	; 0x88
   13194:	str	r0, [r4, #140]	; 0x8c
   13198:	str	r0, [r4, #32]
   1319c:	vst1.32	{d16-d17}, [r1]
   131a0:	ldr	r1, [r4, #184]	; 0xb8
   131a4:	ldr	ip, [r4, #52]	; 0x34
   131a8:	ldr	r2, [r4, #60]	; 0x3c
   131ac:	ldr	r3, [r4, #76]	; 0x4c
   131b0:	cmp	r1, #0
   131b4:	str	r2, [r4, #16]
   131b8:	str	r0, [r4, #20]
   131bc:	str	r0, [r4, #24]
   131c0:	stm	r4, {r3, ip}
   131c4:	beq	131d0 <flatcc_builder_reset@@Base+0x190>
   131c8:	add	r0, r4, #188	; 0xbc
   131cc:	bl	17ad8 <flatcc_emitter_reset@@Base>
   131d0:	mov	r0, #0
   131d4:	pop	{r4, sl, fp, pc}
   131d8:	ldr	r0, [pc, #24]	; 131f8 <flatcc_builder_reset@@Base+0x1b8>
   131dc:	ldr	r1, [pc, #24]	; 131fc <flatcc_builder_reset@@Base+0x1bc>
   131e0:	ldr	r3, [pc, #24]	; 13200 <flatcc_builder_reset@@Base+0x1c0>
   131e4:	movw	r2, #434	; 0x1b2
   131e8:	add	r0, pc, r0
   131ec:	add	r1, pc, r1
   131f0:	add	r3, pc, r3
   131f4:	bl	124b0 <__assert_fail@plt>
   131f8:	andeq	r5, r0, r0, lsl #7
   131fc:	andeq	r5, r0, lr, lsl #7
   13200:	andeq	r5, r0, r7, ror #7

00013204 <flatcc_builder_clear@@Base>:
   13204:	push	{r4, sl, fp, lr}
   13208:	add	fp, sp, #8
   1320c:	sub	sp, sp, #8
   13210:	mov	r4, r0
   13214:	ldr	r0, [r0, #40]	; 0x28
   13218:	mov	r1, #0
   1321c:	mov	r2, #0
   13220:	mov	r3, #0
   13224:	ldr	ip, [r4, #48]	; 0x30
   13228:	str	r1, [sp]
   1322c:	add	r1, r4, #52	; 0x34
   13230:	blx	ip
   13234:	ldr	r0, [r4, #40]	; 0x28
   13238:	ldr	ip, [r4, #48]	; 0x30
   1323c:	mov	r1, #1
   13240:	mov	r2, #0
   13244:	mov	r3, #0
   13248:	str	r1, [sp]
   1324c:	add	r1, r4, #60	; 0x3c
   13250:	blx	ip
   13254:	ldr	r0, [r4, #40]	; 0x28
   13258:	ldr	ip, [r4, #48]	; 0x30
   1325c:	mov	r1, #2
   13260:	mov	r2, #0
   13264:	mov	r3, #0
   13268:	str	r1, [sp]
   1326c:	add	r1, r4, #68	; 0x44
   13270:	blx	ip
   13274:	ldr	r0, [r4, #40]	; 0x28
   13278:	ldr	ip, [r4, #48]	; 0x30
   1327c:	mov	r1, #3
   13280:	mov	r2, #0
   13284:	mov	r3, #0
   13288:	str	r1, [sp]
   1328c:	add	r1, r4, #76	; 0x4c
   13290:	blx	ip
   13294:	ldr	r0, [r4, #40]	; 0x28
   13298:	ldr	ip, [r4, #48]	; 0x30
   1329c:	mov	r1, #4
   132a0:	mov	r2, #0
   132a4:	mov	r3, #0
   132a8:	str	r1, [sp]
   132ac:	add	r1, r4, #84	; 0x54
   132b0:	blx	ip
   132b4:	ldr	r0, [r4, #40]	; 0x28
   132b8:	ldr	ip, [r4, #48]	; 0x30
   132bc:	mov	r1, #5
   132c0:	mov	r2, #0
   132c4:	mov	r3, #0
   132c8:	str	r1, [sp]
   132cc:	add	r1, r4, #92	; 0x5c
   132d0:	blx	ip
   132d4:	ldr	r0, [r4, #40]	; 0x28
   132d8:	ldr	ip, [r4, #48]	; 0x30
   132dc:	mov	r1, #6
   132e0:	mov	r2, #0
   132e4:	mov	r3, #0
   132e8:	str	r1, [sp]
   132ec:	add	r1, r4, #100	; 0x64
   132f0:	blx	ip
   132f4:	ldr	r0, [r4, #40]	; 0x28
   132f8:	ldr	ip, [r4, #48]	; 0x30
   132fc:	mov	r1, #7
   13300:	mov	r2, #0
   13304:	mov	r3, #0
   13308:	str	r1, [sp]
   1330c:	add	r1, r4, #108	; 0x6c
   13310:	blx	ip
   13314:	ldr	r0, [r4, #184]	; 0xb8
   13318:	cmp	r0, #0
   1331c:	beq	13328 <flatcc_builder_clear@@Base+0x124>
   13320:	add	r0, r4, #188	; 0xbc
   13324:	bl	17ba4 <flatcc_emitter_clear@@Base>
   13328:	mov	r0, r4
   1332c:	mov	r1, #0
   13330:	mov	r2, #232	; 0xe8
   13334:	sub	sp, fp, #8
   13338:	pop	{r4, sl, fp, lr}
   1333c:	b	12480 <memset@plt>

00013340 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13340:	push	{r4, r5, r6, r7, fp, lr}
   13344:	add	fp, sp, #16
   13348:	sub	sp, sp, #8
   1334c:	mov	r4, r0
   13350:	ldr	r0, [r0, #112]	; 0x70
   13354:	add	r1, r1, #7
   13358:	ldr	r7, [r4, #228]	; 0xe4
   1335c:	bic	r5, r1, #3
   13360:	add	r6, r4, #108	; 0x6c
   13364:	add	r2, r7, r5
   13368:	cmp	r2, r0
   1336c:	bls	13394 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13370:	ldr	r0, [r4, #40]	; 0x28
   13374:	ldr	ip, [r4, #48]	; 0x30
   13378:	mov	r1, #7
   1337c:	mov	r3, #0
   13380:	str	r1, [sp]
   13384:	mov	r1, r6
   13388:	blx	ip
   1338c:	cmp	r0, #0
   13390:	bne	133e0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13394:	ldr	r0, [r6]
   13398:	adds	r6, r0, r7
   1339c:	beq	133d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   133a0:	mov	r0, r6
   133a4:	mov	r1, #0
   133a8:	mov	r2, r5
   133ac:	bl	12480 <memset@plt>
   133b0:	ldr	r0, [r4, #224]	; 0xe0
   133b4:	str	r0, [r6], #4
   133b8:	ldr	r0, [r4, #228]	; 0xe4
   133bc:	add	r1, r0, #4
   133c0:	add	r0, r0, r5
   133c4:	str	r1, [r4, #224]	; 0xe0
   133c8:	str	r0, [r4, #228]	; 0xe4
   133cc:	b	133d4 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   133d0:	mov	r6, #0
   133d4:	mov	r0, r6
   133d8:	sub	sp, fp, #16
   133dc:	pop	{r4, r5, r6, r7, fp, pc}
   133e0:	ldr	r0, [pc, #24]	; 13400 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   133e4:	ldr	r1, [pc, #24]	; 13404 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   133e8:	ldr	r3, [pc, #24]	; 13408 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   133ec:	mov	r2, #308	; 0x134
   133f0:	add	r0, pc, r0
   133f4:	add	r1, pc, r1
   133f8:	add	r3, pc, r3
   133fc:	bl	124b0 <__assert_fail@plt>
   13400:	andeq	r6, r0, r7, asr #6
   13404:	andeq	r5, r0, r6, lsl #3
   13408:	andeq	r6, r0, r9, ror r1

0001340c <flatcc_builder_enter_user_frame@@Base>:
   1340c:	push	{r4, r5, r6, r7, fp, lr}
   13410:	add	fp, sp, #16
   13414:	sub	sp, sp, #8
   13418:	mov	r4, r0
   1341c:	ldr	r0, [r0, #112]	; 0x70
   13420:	add	r1, r1, #7
   13424:	ldr	r7, [r4, #228]	; 0xe4
   13428:	bic	r5, r1, #3
   1342c:	add	r6, r4, #108	; 0x6c
   13430:	add	r2, r7, r5
   13434:	cmp	r2, r0
   13438:	bls	13460 <flatcc_builder_enter_user_frame@@Base+0x54>
   1343c:	ldr	r0, [r4, #40]	; 0x28
   13440:	ldr	ip, [r4, #48]	; 0x30
   13444:	mov	r1, #7
   13448:	mov	r3, #0
   1344c:	str	r1, [sp]
   13450:	mov	r1, r6
   13454:	blx	ip
   13458:	cmp	r0, #0
   1345c:	bne	134a8 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13460:	ldr	r0, [r6]
   13464:	adds	r6, r0, r7
   13468:	moveq	r0, #0
   1346c:	subeq	sp, fp, #16
   13470:	popeq	{r4, r5, r6, r7, fp, pc}
   13474:	mov	r0, r6
   13478:	mov	r1, #0
   1347c:	mov	r2, r5
   13480:	bl	12480 <memset@plt>
   13484:	ldr	r0, [r4, #224]	; 0xe0
   13488:	str	r0, [r6]
   1348c:	ldr	r1, [r4, #228]	; 0xe4
   13490:	add	r0, r1, #4
   13494:	add	r1, r1, r5
   13498:	str	r0, [r4, #224]	; 0xe0
   1349c:	str	r1, [r4, #228]	; 0xe4
   134a0:	sub	sp, fp, #16
   134a4:	pop	{r4, r5, r6, r7, fp, pc}
   134a8:	ldr	r0, [pc, #24]	; 134c8 <flatcc_builder_enter_user_frame@@Base+0xbc>
   134ac:	ldr	r1, [pc, #24]	; 134cc <flatcc_builder_enter_user_frame@@Base+0xc0>
   134b0:	ldr	r3, [pc, #24]	; 134d0 <flatcc_builder_enter_user_frame@@Base+0xc4>
   134b4:	mov	r2, #308	; 0x134
   134b8:	add	r0, pc, r0
   134bc:	add	r1, pc, r1
   134c0:	add	r3, pc, r3
   134c4:	bl	124b0 <__assert_fail@plt>
   134c8:	andeq	r6, r0, pc, ror r2
   134cc:	strheq	r5, [r0], -lr
   134d0:	strheq	r6, [r0], -r1

000134d4 <flatcc_builder_exit_user_frame@@Base>:
   134d4:	ldr	r1, [r0, #224]	; 0xe0
   134d8:	cmp	r1, #0
   134dc:	subne	r2, r1, #4
   134e0:	strne	r2, [r0, #228]	; 0xe4
   134e4:	ldrne	r2, [r0, #108]	; 0x6c
   134e8:	addne	r1, r2, r1
   134ec:	ldrne	r1, [r1, #-4]
   134f0:	strne	r1, [r0, #224]	; 0xe0
   134f4:	movne	r0, r1
   134f8:	bxne	lr
   134fc:	push	{fp, lr}
   13500:	mov	fp, sp
   13504:	ldr	r0, [pc, #24]	; 13524 <flatcc_builder_exit_user_frame@@Base+0x50>
   13508:	ldr	r1, [pc, #24]	; 13528 <flatcc_builder_exit_user_frame@@Base+0x54>
   1350c:	ldr	r3, [pc, #24]	; 1352c <flatcc_builder_exit_user_frame@@Base+0x58>
   13510:	movw	r2, #542	; 0x21e
   13514:	add	r0, pc, r0
   13518:	add	r1, pc, r1
   1351c:	add	r3, pc, r3
   13520:	bl	124b0 <__assert_fail@plt>
   13524:	andeq	r5, r0, r1, lsl #2
   13528:	andeq	r5, r0, r2, rrx
   1352c:	andeq	r5, r0, r2, lsl r1

00013530 <flatcc_builder_exit_user_frame_at@@Base>:
   13530:	push	{fp, lr}
   13534:	mov	fp, sp
   13538:	ldr	r2, [r0, #224]	; 0xe0
   1353c:	cmp	r2, r1
   13540:	bcc	1358c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13544:	cmp	r1, #0
   13548:	str	r1, [r0, #224]	; 0xe0
   1354c:	subne	r2, r1, #4
   13550:	strne	r2, [r0, #228]	; 0xe4
   13554:	ldrne	r2, [r0, #108]	; 0x6c
   13558:	addne	r1, r2, r1
   1355c:	ldrne	r1, [r1, #-4]
   13560:	strne	r1, [r0, #224]	; 0xe0
   13564:	movne	r0, r1
   13568:	popne	{fp, pc}
   1356c:	ldr	r0, [pc, #68]	; 135b8 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13570:	ldr	r1, [pc, #68]	; 135bc <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13574:	ldr	r3, [pc, #68]	; 135c0 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13578:	movw	r2, #542	; 0x21e
   1357c:	add	r0, pc, r0
   13580:	add	r1, pc, r1
   13584:	add	r3, pc, r3
   13588:	bl	124b0 <__assert_fail@plt>
   1358c:	ldr	r0, [pc, #24]	; 135ac <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   13590:	ldr	r1, [pc, #24]	; 135b0 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13594:	ldr	r3, [pc, #24]	; 135b4 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13598:	movw	r2, #551	; 0x227
   1359c:	add	r0, pc, r0
   135a0:	add	r1, pc, r1
   135a4:	add	r3, pc, r3
   135a8:	bl	124b0 <__assert_fail@plt>
   135ac:	andeq	r5, r0, ip, asr #1
   135b0:	ldrdeq	r4, [r0], -sl
   135b4:	andeq	r5, r0, r3, ror #1
   135b8:	muleq	r0, r9, r0
   135bc:	strdeq	r4, [r0], -sl
   135c0:	andeq	r5, r0, sl, lsr #1

000135c4 <flatcc_builder_get_current_user_frame@@Base>:
   135c4:	ldr	r0, [r0, #224]	; 0xe0
   135c8:	bx	lr

000135cc <flatcc_builder_get_user_frame_ptr@@Base>:
   135cc:	ldr	r0, [r0, #108]	; 0x6c
   135d0:	add	r0, r0, r1
   135d4:	bx	lr

000135d8 <flatcc_builder_embed_buffer@@Base>:
   135d8:	push	{r4, r5, r6, r7, fp, lr}
   135dc:	add	fp, sp, #16
   135e0:	sub	sp, sp, #88	; 0x58
   135e4:	mov	r4, r0
   135e8:	ldr	r0, [fp, #8]
   135ec:	mov	r5, r3
   135f0:	mov	r7, r2
   135f4:	mov	r2, r1
   135f8:	sub	r1, fp, #18
   135fc:	strh	r0, [fp, #-18]	; 0xffffffee
   13600:	mov	r0, r4
   13604:	ldr	r3, [r4, #152]	; 0x98
   13608:	cmp	r3, #0
   1360c:	movwne	r3, #1
   13610:	bl	13764 <flatcc_builder_embed_buffer@@Base+0x18c>
   13614:	ldr	r1, [fp, #12]
   13618:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1361c:	ldr	r0, [r4, #136]	; 0x88
   13620:	mov	r2, #0
   13624:	str	r2, [sp, #8]
   13628:	str	r2, [sp, #12]
   1362c:	and	r1, r1, #2
   13630:	sub	r3, r3, #1
   13634:	add	r1, r5, r1, lsl #1
   13638:	sub	r1, r0, r1
   1363c:	and	r3, r1, r3
   13640:	add	r1, r3, r5
   13644:	str	r1, [fp, #-24]	; 0xffffffe8
   13648:	ldr	r1, [r4, #152]	; 0x98
   1364c:	cmp	r1, #0
   13650:	mov	r1, #0
   13654:	beq	13674 <flatcc_builder_embed_buffer@@Base+0x9c>
   13658:	sub	r1, fp, #24
   1365c:	mov	r2, #1
   13660:	str	r1, [sp, #16]
   13664:	mov	r1, #4
   13668:	str	r1, [sp, #8]
   1366c:	str	r1, [sp, #20]
   13670:	str	r2, [sp, #12]
   13674:	cmp	r5, #0
   13678:	beq	1369c <flatcc_builder_embed_buffer@@Base+0xc4>
   1367c:	add	r6, sp, #8
   13680:	add	r1, r1, r5
   13684:	add	r6, r6, r2, lsl #3
   13688:	add	r2, r2, #1
   1368c:	str	r1, [sp, #8]
   13690:	str	r7, [r6, #8]
   13694:	str	r5, [r6, #12]
   13698:	str	r2, [sp, #12]
   1369c:	cmp	r3, #0
   136a0:	beq	136cc <flatcc_builder_embed_buffer@@Base+0xf4>
   136a4:	add	r1, r1, r3
   136a8:	add	r7, sp, #8
   136ac:	str	r1, [sp, #8]
   136b0:	add	r7, r7, r2, lsl #3
   136b4:	add	r2, r2, #1
   136b8:	ldr	r6, [pc, #136]	; 13748 <flatcc_builder_embed_buffer@@Base+0x170>
   136bc:	ldr	r6, [pc, r6]
   136c0:	str	r6, [r7, #8]
   136c4:	str	r3, [r7, #12]
   136c8:	str	r2, [sp, #12]
   136cc:	cmp	r1, #0
   136d0:	ble	13728 <flatcc_builder_embed_buffer@@Base+0x150>
   136d4:	sub	r5, r0, r1
   136d8:	ldr	r0, [r4, #36]	; 0x24
   136dc:	ldr	r7, [r4, #44]	; 0x2c
   136e0:	str	r1, [sp]
   136e4:	add	r1, sp, #8
   136e8:	add	r1, r1, #8
   136ec:	mov	r3, r5
   136f0:	blx	r7
   136f4:	cmp	r0, #0
   136f8:	streq	r5, [r4, #136]	; 0x88
   136fc:	moveq	r0, r5
   13700:	subeq	sp, fp, #16
   13704:	popeq	{r4, r5, r6, r7, fp, pc}
   13708:	ldr	r0, [pc, #72]	; 13758 <flatcc_builder_embed_buffer@@Base+0x180>
   1370c:	ldr	r1, [pc, #72]	; 1375c <flatcc_builder_embed_buffer@@Base+0x184>
   13710:	ldr	r3, [pc, #72]	; 13760 <flatcc_builder_embed_buffer@@Base+0x188>
   13714:	movw	r2, #651	; 0x28b
   13718:	add	r0, pc, r0
   1371c:	add	r1, pc, r1
   13720:	add	r3, pc, r3
   13724:	bl	124b0 <__assert_fail@plt>
   13728:	ldr	r0, [pc, #28]	; 1374c <flatcc_builder_embed_buffer@@Base+0x174>
   1372c:	ldr	r1, [pc, #28]	; 13750 <flatcc_builder_embed_buffer@@Base+0x178>
   13730:	ldr	r3, [pc, #28]	; 13754 <flatcc_builder_embed_buffer@@Base+0x17c>
   13734:	movw	r2, #647	; 0x287
   13738:	add	r0, pc, r0
   1373c:	add	r1, pc, r1
   13740:	add	r3, pc, r3
   13744:	bl	124b0 <__assert_fail@plt>
   13748:	muleq	r1, r0, r9
   1374c:	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   13750:	andeq	r4, r0, lr, lsr lr
   13754:			; <UNDEFINED> instruction: 0x00005eb6
   13758:	andeq	r6, r0, pc, lsl r0
   1375c:	andeq	r4, r0, lr, asr lr
   13760:	ldrdeq	r5, [r0], -r6
   13764:	push	{r4, sl, fp, lr}
   13768:	add	fp, sp, #8
   1376c:	sub	sp, sp, #80	; 0x50
   13770:	cmp	r2, #0
   13774:	bne	13784 <flatcc_builder_embed_buffer@@Base+0x1ac>
   13778:	ldrh	r2, [r0, #132]	; 0x84
   1377c:	cmp	r2, #0
   13780:	movweq	r2, #1
   13784:	ldrh	r4, [r1]
   13788:	cmp	r4, #4
   1378c:	movwcc	r4, #4
   13790:	cmpcs	r4, r2
   13794:	bcs	137a4 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13798:	cmp	r4, r2
   1379c:	movcc	r4, r2
   137a0:	strh	r4, [r1]
   137a4:	cmp	r3, #0
   137a8:	bne	1381c <flatcc_builder_embed_buffer@@Base+0x244>
   137ac:	ldr	r4, [r0, #140]	; 0x8c
   137b0:	sub	r1, r2, #1
   137b4:	ands	r1, r4, r1
   137b8:	beq	1381c <flatcc_builder_embed_buffer@@Base+0x244>
   137bc:	mov	r2, #1
   137c0:	str	r1, [sp, #8]
   137c4:	str	r1, [sp, #20]
   137c8:	cmn	r1, #1
   137cc:	str	r2, [sp, #12]
   137d0:	ldr	r2, [pc, #172]	; 13884 <flatcc_builder_embed_buffer@@Base+0x2ac>
   137d4:	ldr	r2, [pc, r2]
   137d8:	str	r2, [sp, #16]
   137dc:	add	r2, r1, r4
   137e0:	str	r2, [r0, #140]	; 0x8c
   137e4:	ble	13824 <flatcc_builder_embed_buffer@@Base+0x24c>
   137e8:	ldr	r2, [r0, #36]	; 0x24
   137ec:	ldr	ip, [r0, #44]	; 0x2c
   137f0:	add	r0, sp, #8
   137f4:	str	r1, [sp]
   137f8:	mov	r3, r4
   137fc:	add	r1, r0, #8
   13800:	mov	r0, r2
   13804:	mov	r2, #1
   13808:	blx	ip
   1380c:	cmp	r0, #0
   13810:	bne	13844 <flatcc_builder_embed_buffer@@Base+0x26c>
   13814:	cmn	r4, #1
   13818:	beq	13864 <flatcc_builder_embed_buffer@@Base+0x28c>
   1381c:	sub	sp, fp, #8
   13820:	pop	{r4, sl, fp, pc}
   13824:	ldr	r0, [pc, #92]	; 13888 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13828:	ldr	r1, [pc, #92]	; 1388c <flatcc_builder_embed_buffer@@Base+0x2b4>
   1382c:	ldr	r3, [pc, #92]	; 13890 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13830:	movw	r2, #673	; 0x2a1
   13834:	add	r0, pc, r0
   13838:	add	r1, pc, r1
   1383c:	add	r3, pc, r3
   13840:	bl	124b0 <__assert_fail@plt>
   13844:	ldr	r0, [pc, #72]	; 13894 <flatcc_builder_embed_buffer@@Base+0x2bc>
   13848:	ldr	r1, [pc, #72]	; 13898 <flatcc_builder_embed_buffer@@Base+0x2c0>
   1384c:	ldr	r3, [pc, #72]	; 1389c <flatcc_builder_embed_buffer@@Base+0x2c4>
   13850:	movw	r2, #677	; 0x2a5
   13854:	add	r0, pc, r0
   13858:	add	r1, pc, r1
   1385c:	add	r3, pc, r3
   13860:	bl	124b0 <__assert_fail@plt>
   13864:	ldr	r0, [pc, #52]	; 138a0 <flatcc_builder_embed_buffer@@Base+0x2c8>
   13868:	ldr	r1, [pc, #52]	; 138a4 <flatcc_builder_embed_buffer@@Base+0x2cc>
   1386c:	ldr	r3, [pc, #52]	; 138a8 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13870:	movw	r2, #702	; 0x2be
   13874:	add	r0, pc, r0
   13878:	add	r1, pc, r1
   1387c:	add	r3, pc, r3
   13880:	bl	124b0 <__assert_fail@plt>
   13884:	andeq	r6, r1, r8, ror r8
   13888:	andeq	r5, r0, r3, lsl #30
   1388c:	andeq	r4, r0, r2, asr #26
   13890:	andeq	r5, r0, r6, ror lr
   13894:	andeq	r5, r0, r3, ror #29
   13898:	andeq	r4, r0, r2, lsr #26
   1389c:	andeq	r5, r0, r6, asr lr
   138a0:	andeq	r5, r0, r3, asr #29
   138a4:	andeq	r4, r0, r2, lsl #26
   138a8:	andeq	r5, r0, r8, lsr sp

000138ac <flatcc_builder_create_buffer@@Base>:
   138ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b0:	add	fp, sp, #28
   138b4:	sub	sp, sp, #100	; 0x64
   138b8:	ldr	r8, [fp, #12]
   138bc:	mov	r4, r0
   138c0:	ldr	r0, [fp, #8]
   138c4:	mov	r7, r1
   138c8:	mov	r5, #0
   138cc:	mov	r9, r3
   138d0:	sub	r1, fp, #30
   138d4:	str	r5, [sp, #12]
   138d8:	and	r6, r8, #1
   138dc:	strh	r0, [fp, #-30]	; 0xffffffe2
   138e0:	mov	r0, r4
   138e4:	mov	r3, r6
   138e8:	bl	13764 <flatcc_builder_embed_buffer@@Base+0x18c>
   138ec:	ldrh	r0, [r4, #128]	; 0x80
   138f0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   138f4:	cmp	r0, r1
   138f8:	strhcc	r1, [r4, #128]	; 0x80
   138fc:	cmp	r7, #0
   13900:	stmib	sp, {r6, r9}
   13904:	beq	13920 <flatcc_builder_create_buffer@@Base+0x74>
   13908:	ldr	r5, [r7]
   1390c:	cmp	r5, #0
   13910:	str	r5, [sp, #12]
   13914:	movwne	r5, #1
   13918:	lsl	r7, r5, #2
   1391c:	b	13924 <flatcc_builder_create_buffer@@Base+0x78>
   13920:	mov	r7, #0
   13924:	ldr	r9, [r4, #136]	; 0x88
   13928:	mov	sl, #4
   1392c:	mvn	r6, #3
   13930:	mov	r3, #0
   13934:	ands	ip, r8, #3
   13938:	and	r2, sl, r8, lsl #1
   1393c:	str	r3, [sp, #20]
   13940:	str	r3, [sp, #16]
   13944:	sub	r2, r6, r2
   13948:	sub	r6, r1, #1
   1394c:	mov	r1, #4
   13950:	add	r2, r2, r9
   13954:	sub	r2, r2, r7
   13958:	beq	1397c <flatcc_builder_create_buffer@@Base+0xd0>
   1395c:	sub	r1, fp, #40	; 0x28
   13960:	mov	r3, #1
   13964:	str	r1, [sp, #24]
   13968:	mov	r1, #4
   1396c:	str	r1, [sp, #16]
   13970:	str	r1, [sp, #28]
   13974:	mov	r1, #8
   13978:	str	r3, [sp, #20]
   1397c:	add	lr, sp, #16
   13980:	and	r6, r2, r6
   13984:	sub	r0, fp, #36	; 0x24
   13988:	str	r1, [sp, #16]
   1398c:	cmp	r5, #0
   13990:	add	r2, lr, r3, lsl #3
   13994:	str	r0, [r2, #8]
   13998:	str	sl, [r2, #12]
   1399c:	add	r2, r3, #1
   139a0:	str	r2, [sp, #20]
   139a4:	beq	139c8 <flatcc_builder_create_buffer@@Base+0x11c>
   139a8:	add	r1, r1, r7
   139ac:	add	r0, lr, r2, lsl #3
   139b0:	add	r2, sp, #12
   139b4:	str	r1, [sp, #16]
   139b8:	str	r2, [r0, #8]
   139bc:	orr	r2, r3, #2
   139c0:	str	r7, [r0, #12]
   139c4:	str	r2, [sp, #20]
   139c8:	cmp	r6, #0
   139cc:	beq	139f4 <flatcc_builder_create_buffer@@Base+0x148>
   139d0:	add	r1, r1, r6
   139d4:	add	r0, lr, r2, lsl #3
   139d8:	add	r2, r2, #1
   139dc:	str	r1, [sp, #16]
   139e0:	ldr	r3, [pc, #224]	; 13ac8 <flatcc_builder_create_buffer@@Base+0x21c>
   139e4:	ldr	r3, [pc, r3]
   139e8:	str	r3, [r0, #8]
   139ec:	str	r6, [r0, #12]
   139f0:	str	r2, [sp, #20]
   139f4:	ldr	r5, [sp, #4]
   139f8:	sub	r7, r9, r1
   139fc:	cmp	ip, #0
   13a00:	mov	r6, #144	; 0x90
   13a04:	ldr	r3, [sp, #8]
   13a08:	mov	r0, r7
   13a0c:	addne	r0, r0, #4
   13a10:	cmp	r5, #0
   13a14:	sub	r3, r3, r0
   13a18:	movweq	r6, #140	; 0x8c
   13a1c:	cmp	r1, #0
   13a20:	ldr	r6, [r4, r6]
   13a24:	str	r3, [fp, #-36]	; 0xffffffdc
   13a28:	sub	r0, r6, r0
   13a2c:	str	r0, [fp, #-40]	; 0xffffffd8
   13a30:	ble	13a88 <flatcc_builder_create_buffer@@Base+0x1dc>
   13a34:	ldr	r0, [r4, #36]	; 0x24
   13a38:	ldr	r6, [r4, #44]	; 0x2c
   13a3c:	str	r1, [sp]
   13a40:	add	r1, lr, #8
   13a44:	mov	r3, r7
   13a48:	blx	r6
   13a4c:	cmp	r0, #0
   13a50:	bne	13aa8 <flatcc_builder_create_buffer@@Base+0x1fc>
   13a54:	cmp	r7, #0
   13a58:	str	r7, [r4, #136]	; 0x88
   13a5c:	movne	r0, r7
   13a60:	subne	sp, fp, #28
   13a64:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a68:	ldr	r0, [pc, #116]	; 13ae4 <flatcc_builder_create_buffer@@Base+0x238>
   13a6c:	ldr	r1, [pc, #116]	; 13ae8 <flatcc_builder_create_buffer@@Base+0x23c>
   13a70:	ldr	r3, [pc, #116]	; 13aec <flatcc_builder_create_buffer@@Base+0x240>
   13a74:	mov	r2, #772	; 0x304
   13a78:	add	r0, pc, r0
   13a7c:	add	r1, pc, r1
   13a80:	add	r3, pc, r3
   13a84:	bl	124b0 <__assert_fail@plt>
   13a88:	ldr	r0, [pc, #60]	; 13acc <flatcc_builder_create_buffer@@Base+0x220>
   13a8c:	ldr	r1, [pc, #60]	; 13ad0 <flatcc_builder_create_buffer@@Base+0x224>
   13a90:	ldr	r3, [pc, #60]	; 13ad4 <flatcc_builder_create_buffer@@Base+0x228>
   13a94:	movw	r2, #647	; 0x287
   13a98:	add	r0, pc, r0
   13a9c:	add	r1, pc, r1
   13aa0:	add	r3, pc, r3
   13aa4:	bl	124b0 <__assert_fail@plt>
   13aa8:	ldr	r0, [pc, #40]	; 13ad8 <flatcc_builder_create_buffer@@Base+0x22c>
   13aac:	ldr	r1, [pc, #40]	; 13adc <flatcc_builder_create_buffer@@Base+0x230>
   13ab0:	ldr	r3, [pc, #40]	; 13ae0 <flatcc_builder_create_buffer@@Base+0x234>
   13ab4:	movw	r2, #651	; 0x28b
   13ab8:	add	r0, pc, r0
   13abc:	add	r1, pc, r1
   13ac0:	add	r3, pc, r3
   13ac4:	bl	124b0 <__assert_fail@plt>
   13ac8:	andeq	r6, r1, r8, ror #12
   13acc:	muleq	r0, pc, ip	; <UNPREDICTABLE>
   13ad0:	ldrdeq	r4, [r0], -lr
   13ad4:	andeq	r5, r0, r6, asr fp
   13ad8:	andeq	r5, r0, pc, ror ip
   13adc:			; <UNDEFINED> instruction: 0x00004abe
   13ae0:	andeq	r5, r0, r6, lsr fp
   13ae4:			; <UNDEFINED> instruction: 0x00005cbf
   13ae8:	strdeq	r4, [r0], -lr
   13aec:	andeq	r4, r0, ip, asr #24

00013af0 <flatcc_builder_create_struct@@Base>:
   13af0:	push	{r4, r5, r6, sl, fp, lr}
   13af4:	add	fp, sp, #16
   13af8:	sub	sp, sp, #80	; 0x50
   13afc:	cmp	r3, #0
   13b00:	beq	13bd8 <flatcc_builder_create_struct@@Base+0xe8>
   13b04:	mov	r5, r0
   13b08:	ldrh	r0, [r0, #128]	; 0x80
   13b0c:	mov	r4, #0
   13b10:	cmp	r0, r3
   13b14:	strhcc	r3, [r5, #128]	; 0x80
   13b18:	sub	r3, r3, #1
   13b1c:	cmp	r2, #0
   13b20:	ldr	r0, [r5, #136]	; 0x88
   13b24:	str	r4, [sp, #12]
   13b28:	str	r4, [sp, #8]
   13b2c:	movne	r4, #1
   13b30:	strne	r1, [sp, #16]
   13b34:	strne	r2, [sp, #8]
   13b38:	strne	r2, [sp, #20]
   13b3c:	strne	r4, [sp, #12]
   13b40:	sub	r6, r0, r2
   13b44:	and	r3, r6, r3
   13b48:	cmp	r3, #0
   13b4c:	beq	13b78 <flatcc_builder_create_struct@@Base+0x88>
   13b50:	add	r2, r3, r2
   13b54:	add	r1, sp, #8
   13b58:	str	r2, [sp, #8]
   13b5c:	add	r1, r1, r4, lsl #3
   13b60:	add	r4, r4, #1
   13b64:	ldr	r6, [pc, #172]	; 13c18 <flatcc_builder_create_struct@@Base+0x128>
   13b68:	ldr	r6, [pc, r6]
   13b6c:	str	r6, [r1, #8]
   13b70:	str	r3, [r1, #12]
   13b74:	str	r4, [sp, #12]
   13b78:	cmp	r2, #0
   13b7c:	ble	13bf8 <flatcc_builder_create_struct@@Base+0x108>
   13b80:	sub	r6, r0, r2
   13b84:	ldr	r0, [r5, #36]	; 0x24
   13b88:	ldr	ip, [r5, #44]	; 0x2c
   13b8c:	add	r1, sp, #8
   13b90:	str	r2, [sp]
   13b94:	mov	r2, r4
   13b98:	add	r1, r1, #8
   13b9c:	mov	r3, r6
   13ba0:	blx	ip
   13ba4:	cmp	r0, #0
   13ba8:	streq	r6, [r5, #136]	; 0x88
   13bac:	moveq	r0, r6
   13bb0:	subeq	sp, fp, #16
   13bb4:	popeq	{r4, r5, r6, sl, fp, pc}
   13bb8:	ldr	r0, [pc, #116]	; 13c34 <flatcc_builder_create_struct@@Base+0x144>
   13bbc:	ldr	r1, [pc, #116]	; 13c38 <flatcc_builder_create_struct@@Base+0x148>
   13bc0:	ldr	r3, [pc, #116]	; 13c3c <flatcc_builder_create_struct@@Base+0x14c>
   13bc4:	movw	r2, #651	; 0x28b
   13bc8:	add	r0, pc, r0
   13bcc:	add	r1, pc, r1
   13bd0:	add	r3, pc, r3
   13bd4:	bl	124b0 <__assert_fail@plt>
   13bd8:	ldr	r0, [pc, #60]	; 13c1c <flatcc_builder_create_struct@@Base+0x12c>
   13bdc:	ldr	r1, [pc, #60]	; 13c20 <flatcc_builder_create_struct@@Base+0x130>
   13be0:	ldr	r3, [pc, #60]	; 13c24 <flatcc_builder_create_struct@@Base+0x134>
   13be4:	movw	r2, #783	; 0x30f
   13be8:	add	r0, pc, r0
   13bec:	add	r1, pc, r1
   13bf0:	add	r3, pc, r3
   13bf4:	bl	124b0 <__assert_fail@plt>
   13bf8:	ldr	r0, [pc, #40]	; 13c28 <flatcc_builder_create_struct@@Base+0x138>
   13bfc:	ldr	r1, [pc, #40]	; 13c2c <flatcc_builder_create_struct@@Base+0x13c>
   13c00:	ldr	r3, [pc, #40]	; 13c30 <flatcc_builder_create_struct@@Base+0x140>
   13c04:	movw	r2, #647	; 0x287
   13c08:	add	r0, pc, r0
   13c0c:	add	r1, pc, r1
   13c10:	add	r3, pc, r3
   13c14:	bl	124b0 <__assert_fail@plt>
   13c18:	andeq	r6, r1, r4, ror #9
   13c1c:	andeq	r4, r0, r7, ror #22
   13c20:	andeq	r4, r0, lr, lsl #19
   13c24:	andeq	r4, r0, sl, ror #22
   13c28:	andeq	r5, r0, pc, lsr #22
   13c2c:	andeq	r4, r0, lr, ror #18
   13c30:	andeq	r5, r0, r6, ror #19
   13c34:	andeq	r5, r0, pc, ror #22
   13c38:	andeq	r4, r0, lr, lsr #19
   13c3c:	andeq	r5, r0, r6, lsr #20

00013c40 <flatcc_builder_start_buffer@@Base>:
   13c40:	push	{r4, r5, r6, r7, fp, lr}
   13c44:	add	fp, sp, #16
   13c48:	mov	r5, r1
   13c4c:	ldrh	r1, [r0, #128]	; 0x80
   13c50:	mov	r6, r3
   13c54:	mov	r7, r2
   13c58:	mov	r4, r0
   13c5c:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   13c60:	mov	r1, r0
   13c64:	mvn	r0, #0
   13c68:	cmp	r1, #0
   13c6c:	popne	{r4, r5, r6, r7, fp, pc}
   13c70:	mov	r0, #1
   13c74:	cmp	r5, #0
   13c78:	strh	r0, [r4, #128]	; 0x80
   13c7c:	ldrh	r1, [r4, #132]	; 0x84
   13c80:	ldr	r2, [r4, #32]
   13c84:	strh	r1, [r2, #34]	; 0x22
   13c88:	strh	r7, [r4, #132]	; 0x84
   13c8c:	ldrh	r1, [r4, #164]	; 0xa4
   13c90:	ldr	r2, [r4, #32]
   13c94:	strh	r1, [r2, #32]
   13c98:	strh	r6, [r4, #164]	; 0xa4
   13c9c:	ldr	r1, [r4, #32]
   13ca0:	ldr	r2, [r4, #144]	; 0x90
   13ca4:	str	r2, [r1, #20]
   13ca8:	ldr	r1, [r4, #32]
   13cac:	ldr	r2, [r4, #152]	; 0x98
   13cb0:	str	r2, [r1, #28]
   13cb4:	ldr	r3, [r4, #148]	; 0x94
   13cb8:	ldr	r1, [r4, #32]
   13cbc:	ldr	r2, [r4, #136]	; 0x88
   13cc0:	ldr	r7, [r4, #168]	; 0xa8
   13cc4:	add	r6, r3, #1
   13cc8:	str	r2, [r4, #144]	; 0x90
   13ccc:	str	r6, [r4, #148]	; 0x94
   13cd0:	str	r3, [r4, #152]	; 0x98
   13cd4:	str	r7, [r1, #16]
   13cd8:	ldr	r1, [pc, #28]	; 13cfc <flatcc_builder_start_buffer@@Base+0xbc>
   13cdc:	ldr	r1, [pc, r1]
   13ce0:	movne	r1, r5
   13ce4:	ldr	r1, [r1]
   13ce8:	str	r1, [r4, #168]	; 0xa8
   13cec:	ldr	r1, [r4, #32]
   13cf0:	strh	r0, [r1, #14]
   13cf4:	mov	r0, #0
   13cf8:	pop	{r4, r5, r6, r7, fp, pc}
   13cfc:	andeq	r6, r1, r0, ror r3
   13d00:	push	{r4, r5, r6, r7, fp, lr}
   13d04:	add	fp, sp, #16
   13d08:	sub	sp, sp, #8
   13d0c:	mov	r5, r1
   13d10:	ldr	r1, [r0, #156]	; 0x9c
   13d14:	ldr	r2, [r0, #160]	; 0xa0
   13d18:	mov	r4, r0
   13d1c:	add	r0, r1, #1
   13d20:	cmp	r1, r2
   13d24:	str	r0, [r4, #156]	; 0x9c
   13d28:	bge	13d3c <flatcc_builder_start_buffer@@Base+0xfc>
   13d2c:	ldr	r0, [r4, #32]
   13d30:	add	r0, r0, #36	; 0x24
   13d34:	str	r0, [r4, #32]
   13d38:	b	13dd0 <flatcc_builder_start_buffer@@Base+0x190>
   13d3c:	ldr	r2, [r4, #176]	; 0xb0
   13d40:	mvn	r6, #0
   13d44:	cmp	r2, #1
   13d48:	cmpge	r1, r2
   13d4c:	bge	13e08 <flatcc_builder_start_buffer@@Base+0x1c8>
   13d50:	add	r7, r0, r0, lsl #3
   13d54:	ldr	r0, [r4, #88]	; 0x58
   13d58:	lsl	r2, r7, #2
   13d5c:	cmp	r2, r0
   13d60:	bls	13d88 <flatcc_builder_start_buffer@@Base+0x148>
   13d64:	ldr	r0, [r4, #40]	; 0x28
   13d68:	ldr	ip, [r4, #48]	; 0x30
   13d6c:	mov	r3, #4
   13d70:	add	r1, r4, #84	; 0x54
   13d74:	str	r3, [sp]
   13d78:	mov	r3, #0
   13d7c:	blx	ip
   13d80:	cmp	r0, #0
   13d84:	bne	13e14 <flatcc_builder_start_buffer@@Base+0x1d4>
   13d88:	ldr	r1, [r4, #84]	; 0x54
   13d8c:	mvn	r0, #35	; 0x23
   13d90:	add	r0, r0, r7, lsl #2
   13d94:	adds	r0, r0, r1
   13d98:	str	r0, [r4, #32]
   13d9c:	beq	13e08 <flatcc_builder_start_buffer@@Base+0x1c8>
   13da0:	ldr	r1, [r4, #88]	; 0x58
   13da4:	movw	r3, #36409	; 0x8e39
   13da8:	ldr	r2, [r4, #176]	; 0xb0
   13dac:	movt	r3, #14563	; 0x38e3
   13db0:	umull	r1, r3, r1, r3
   13db4:	lsr	r1, r3, #3
   13db8:	cmp	r2, r3, lsr #3
   13dbc:	mov	r3, r1
   13dc0:	movlt	r3, r2
   13dc4:	cmp	r2, #0
   13dc8:	movle	r3, r1
   13dcc:	str	r3, [r4, #160]	; 0xa0
   13dd0:	ldr	r1, [r4, #20]
   13dd4:	mvn	r3, #3
   13dd8:	mov	r6, #0
   13ddc:	str	r1, [r0, #8]
   13de0:	ldrh	r2, [r4, #130]	; 0x82
   13de4:	strh	r2, [r0, #12]
   13de8:	strh	r5, [r4, #130]	; 0x82
   13dec:	ldr	r2, [r4, #28]
   13df0:	stm	r0, {r2, r3}
   13df4:	add	r0, r1, r2
   13df8:	str	r6, [r4, #20]
   13dfc:	add	r0, r0, #7
   13e00:	bic	r0, r0, #7
   13e04:	str	r0, [r4, #28]
   13e08:	mov	r0, r6
   13e0c:	sub	sp, fp, #16
   13e10:	pop	{r4, r5, r6, r7, fp, pc}
   13e14:	ldr	r0, [pc, #24]	; 13e34 <flatcc_builder_start_buffer@@Base+0x1f4>
   13e18:	ldr	r1, [pc, #24]	; 13e38 <flatcc_builder_start_buffer@@Base+0x1f8>
   13e1c:	ldr	r3, [pc, #24]	; 13e3c <flatcc_builder_start_buffer@@Base+0x1fc>
   13e20:	mov	r2, #308	; 0x134
   13e24:	add	r0, pc, r0
   13e28:	add	r1, pc, r1
   13e2c:	add	r3, pc, r3
   13e30:	bl	124b0 <__assert_fail@plt>
   13e34:	andeq	r5, r0, r3, lsl r9
   13e38:	andeq	r4, r0, r2, asr r7
   13e3c:	andeq	r5, r0, r5, asr #14

00013e40 <flatcc_builder_end_buffer@@Base>:
   13e40:	push	{r4, r5, r6, sl, fp, lr}
   13e44:	add	fp, sp, #16
   13e48:	sub	sp, sp, #8
   13e4c:	mov	r4, r0
   13e50:	ldr	r0, [r0, #32]
   13e54:	ldrh	r0, [r0, #14]
   13e58:	cmp	r0, #1
   13e5c:	bne	13f50 <flatcc_builder_end_buffer@@Base+0x110>
   13e60:	mov	r3, r1
   13e64:	ldr	r1, [r4, #152]	; 0x98
   13e68:	ldrh	r0, [r4, #164]	; 0xa4
   13e6c:	ldrh	r2, [r4, #132]	; 0x84
   13e70:	cmp	r1, #0
   13e74:	ldrh	r1, [r4, #128]	; 0x80
   13e78:	and	r0, r0, #2
   13e7c:	orrne	r0, r0, #1
   13e80:	cmp	r1, r2
   13e84:	movcc	r1, r2
   13e88:	strhcc	r2, [r4, #128]	; 0x80
   13e8c:	str	r0, [sp, #4]
   13e90:	mov	r0, r4
   13e94:	str	r1, [sp]
   13e98:	add	r1, r4, #168	; 0xa8
   13e9c:	bl	138ac <flatcc_builder_create_buffer@@Base>
   13ea0:	mov	r6, r0
   13ea4:	cmp	r0, #0
   13ea8:	beq	13f44 <flatcc_builder_end_buffer@@Base+0x104>
   13eac:	ldr	r1, [r4, #32]
   13eb0:	ldr	r0, [r4, #16]
   13eb4:	ldr	r2, [r4, #20]
   13eb8:	ldr	r3, [r1, #20]
   13ebc:	str	r3, [r4, #144]	; 0x90
   13ec0:	ldr	r3, [r1, #28]
   13ec4:	str	r3, [r4, #152]	; 0x98
   13ec8:	ldr	r3, [r1, #16]
   13ecc:	str	r3, [r4, #168]	; 0xa8
   13ed0:	ldrh	r1, [r1, #32]
   13ed4:	strh	r1, [r4, #164]	; 0xa4
   13ed8:	mov	r1, #0
   13edc:	bl	12480 <memset@plt>
   13ee0:	ldr	r0, [r4, #32]
   13ee4:	ldr	r1, [r4, #60]	; 0x3c
   13ee8:	ldr	r2, [r4, #64]	; 0x40
   13eec:	ldr	r3, [r0, #8]
   13ef0:	str	r3, [r4, #20]
   13ef4:	ldr	r3, [r0]
   13ef8:	str	r3, [r4, #28]
   13efc:	add	r1, r1, r3
   13f00:	ldr	r5, [r0, #4]
   13f04:	str	r1, [r4, #16]
   13f08:	sub	r1, r2, r3
   13f0c:	cmp	r1, r5
   13f10:	movhi	r1, r5
   13f14:	str	r1, [r4, #24]
   13f18:	ldrh	r1, [r4, #130]	; 0x82
   13f1c:	ldrh	r2, [r4, #128]	; 0x80
   13f20:	cmp	r2, r1
   13f24:	strhcc	r1, [r4, #128]	; 0x80
   13f28:	ldrh	r1, [r0, #12]
   13f2c:	sub	r0, r0, #36	; 0x24
   13f30:	str	r0, [r4, #32]
   13f34:	strh	r1, [r4, #130]	; 0x82
   13f38:	ldr	r0, [r4, #156]	; 0x9c
   13f3c:	sub	r0, r0, #1
   13f40:	str	r0, [r4, #156]	; 0x9c
   13f44:	mov	r0, r6
   13f48:	sub	sp, fp, #16
   13f4c:	pop	{r4, r5, r6, sl, fp, pc}
   13f50:	ldr	r0, [pc, #24]	; 13f70 <flatcc_builder_end_buffer@@Base+0x130>
   13f54:	ldr	r1, [pc, #24]	; 13f74 <flatcc_builder_end_buffer@@Base+0x134>
   13f58:	ldr	r3, [pc, #24]	; 13f78 <flatcc_builder_end_buffer@@Base+0x138>
   13f5c:	movw	r2, #838	; 0x346
   13f60:	add	r0, pc, r0
   13f64:	add	r1, pc, r1
   13f68:	add	r3, pc, r3
   13f6c:	bl	124b0 <__assert_fail@plt>
   13f70:	andeq	r4, r0, r0, ror #16
   13f74:	andeq	r4, r0, r6, lsl r6
   13f78:	andeq	r4, r0, r4, lsl #17

00013f7c <flatcc_builder_start_struct@@Base>:
   13f7c:	push	{r4, r5, r6, r7, fp, lr}
   13f80:	add	fp, sp, #16
   13f84:	sub	sp, sp, #8
   13f88:	mov	r6, r1
   13f8c:	mov	r1, r2
   13f90:	mov	r4, r0
   13f94:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   13f98:	mov	r5, #0
   13f9c:	cmp	r0, #0
   13fa0:	bne	14050 <flatcc_builder_start_struct@@Base+0xd4>
   13fa4:	ldr	r2, [r4, #32]
   13fa8:	mov	r0, #2
   13fac:	mvn	r7, #3
   13fb0:	strh	r0, [r2, #14]
   13fb4:	ldr	r1, [r4, #28]
   13fb8:	ldr	r3, [r4, #64]	; 0x40
   13fbc:	ldr	r0, [r4, #60]	; 0x3c
   13fc0:	sub	r3, r3, r1
   13fc4:	add	r0, r0, r1
   13fc8:	cmn	r3, #4
   13fcc:	str	r0, [r4, #16]
   13fd0:	movcs	r3, r7
   13fd4:	str	r3, [r4, #24]
   13fd8:	str	r7, [r2, #4]
   13fdc:	ldr	r7, [r4, #20]
   13fe0:	add	r2, r7, r6
   13fe4:	cmp	r2, r3
   13fe8:	str	r2, [r4, #20]
   13fec:	bcc	1404c <flatcc_builder_start_struct@@Base+0xd0>
   13ff0:	ldr	r0, [r4, #40]	; 0x28
   13ff4:	ldr	r6, [r4, #48]	; 0x30
   13ff8:	add	r1, r1, r2
   13ffc:	mov	r3, #1
   14000:	str	r3, [sp]
   14004:	add	r2, r1, #1
   14008:	add	r1, r4, #60	; 0x3c
   1400c:	mov	r3, #1
   14010:	blx	r6
   14014:	cmp	r0, #0
   14018:	bne	14050 <flatcc_builder_start_struct@@Base+0xd4>
   1401c:	ldr	r1, [r4, #28]
   14020:	ldr	r0, [r4, #60]	; 0x3c
   14024:	ldr	r3, [r4, #64]	; 0x40
   14028:	ldr	r2, [r4, #32]
   1402c:	add	r0, r0, r1
   14030:	sub	r1, r3, r1
   14034:	mvn	r3, #3
   14038:	cmn	r1, #4
   1403c:	str	r0, [r4, #16]
   14040:	movcs	r1, r3
   14044:	str	r1, [r4, #24]
   14048:	str	r3, [r2, #4]
   1404c:	add	r5, r0, r7
   14050:	mov	r0, r5
   14054:	sub	sp, fp, #16
   14058:	pop	{r4, r5, r6, r7, fp, pc}

0001405c <flatcc_builder_struct_edit@@Base>:
   1405c:	ldr	r0, [r0, #16]
   14060:	bx	lr

00014064 <flatcc_builder_end_struct@@Base>:
   14064:	push	{r4, r5, fp, lr}
   14068:	add	fp, sp, #8
   1406c:	mov	r4, r0
   14070:	ldr	r0, [r0, #32]
   14074:	ldrh	r0, [r0, #14]
   14078:	cmp	r0, #2
   1407c:	bne	1411c <flatcc_builder_end_struct@@Base+0xb8>
   14080:	ldrh	r3, [r4, #130]	; 0x82
   14084:	ldr	r1, [r4, #16]
   14088:	ldr	r2, [r4, #20]
   1408c:	mov	r0, r4
   14090:	bl	13af0 <flatcc_builder_create_struct@@Base>
   14094:	mov	r5, r0
   14098:	cmp	r0, #0
   1409c:	beq	14114 <flatcc_builder_end_struct@@Base+0xb0>
   140a0:	ldr	r0, [r4, #16]
   140a4:	ldr	r2, [r4, #20]
   140a8:	mov	r1, #0
   140ac:	bl	12480 <memset@plt>
   140b0:	ldr	r0, [r4, #32]
   140b4:	ldr	r1, [r4, #60]	; 0x3c
   140b8:	ldr	ip, [r4, #64]	; 0x40
   140bc:	ldr	r3, [r0, #8]
   140c0:	str	r3, [r4, #20]
   140c4:	ldr	r3, [r0]
   140c8:	str	r3, [r4, #28]
   140cc:	add	r1, r1, r3
   140d0:	ldr	r2, [r0, #4]
   140d4:	str	r1, [r4, #16]
   140d8:	sub	r1, ip, r3
   140dc:	cmp	r1, r2
   140e0:	movhi	r1, r2
   140e4:	str	r1, [r4, #24]
   140e8:	ldrh	r1, [r4, #130]	; 0x82
   140ec:	ldrh	r2, [r4, #128]	; 0x80
   140f0:	cmp	r2, r1
   140f4:	strhcc	r1, [r4, #128]	; 0x80
   140f8:	ldrh	r1, [r0, #12]
   140fc:	sub	r0, r0, #36	; 0x24
   14100:	str	r0, [r4, #32]
   14104:	strh	r1, [r4, #130]	; 0x82
   14108:	ldr	r0, [r4, #156]	; 0x9c
   1410c:	sub	r0, r0, #1
   14110:	str	r0, [r4, #156]	; 0x9c
   14114:	mov	r0, r5
   14118:	pop	{r4, r5, fp, pc}
   1411c:	ldr	r0, [pc, #24]	; 1413c <flatcc_builder_end_struct@@Base+0xd8>
   14120:	ldr	r1, [pc, #24]	; 14140 <flatcc_builder_end_struct@@Base+0xdc>
   14124:	ldr	r3, [pc, #24]	; 14144 <flatcc_builder_end_struct@@Base+0xe0>
   14128:	mov	r2, #872	; 0x368
   1412c:	add	r0, pc, r0
   14130:	add	r1, pc, r1
   14134:	add	r3, pc, r3
   14138:	bl	124b0 <__assert_fail@plt>
   1413c:	andeq	r4, r0, r9, lsl r7
   14140:	andeq	r4, r0, sl, asr #8
   14144:	andeq	r4, r0, sp, lsr r7

00014148 <flatcc_builder_extend_vector@@Base>:
   14148:	push	{r4, r5, fp, lr}
   1414c:	add	fp, sp, #8
   14150:	sub	sp, sp, #8
   14154:	mov	r4, r0
   14158:	ldr	r0, [r0, #32]
   1415c:	ldr	r2, [r0, #20]
   14160:	adds	r2, r2, r1
   14164:	bcs	1421c <flatcc_builder_extend_vector@@Base+0xd4>
   14168:	ldr	r3, [r0, #24]
   1416c:	cmp	r2, r3
   14170:	bhi	1421c <flatcc_builder_extend_vector@@Base+0xd4>
   14174:	str	r2, [r0, #20]
   14178:	ldr	r2, [r4, #32]
   1417c:	ldr	r5, [r4, #20]
   14180:	ldr	r0, [r4, #24]
   14184:	ldr	r2, [r2, #16]
   14188:	mla	r1, r2, r1, r5
   1418c:	cmp	r1, r0
   14190:	str	r1, [r4, #20]
   14194:	bcs	141a0 <flatcc_builder_extend_vector@@Base+0x58>
   14198:	ldr	r0, [r4, #16]
   1419c:	b	14210 <flatcc_builder_extend_vector@@Base+0xc8>
   141a0:	ldr	r2, [r4, #28]
   141a4:	ldr	r0, [r4, #40]	; 0x28
   141a8:	ldr	ip, [r4, #48]	; 0x30
   141ac:	mov	r3, #1
   141b0:	str	r3, [sp]
   141b4:	mov	r3, #1
   141b8:	add	r1, r1, r2
   141bc:	add	r2, r1, #1
   141c0:	add	r1, r4, #60	; 0x3c
   141c4:	blx	ip
   141c8:	mov	r1, r0
   141cc:	mov	r0, #0
   141d0:	cmp	r1, #0
   141d4:	beq	141e0 <flatcc_builder_extend_vector@@Base+0x98>
   141d8:	sub	sp, fp, #8
   141dc:	pop	{r4, r5, fp, pc}
   141e0:	ldr	r1, [r4, #28]
   141e4:	ldr	r0, [r4, #60]	; 0x3c
   141e8:	ldr	r3, [r4, #64]	; 0x40
   141ec:	ldr	r2, [r4, #32]
   141f0:	add	r0, r0, r1
   141f4:	sub	r1, r3, r1
   141f8:	mvn	r3, #3
   141fc:	cmn	r1, #4
   14200:	str	r0, [r4, #16]
   14204:	movcs	r1, r3
   14208:	str	r1, [r4, #24]
   1420c:	str	r3, [r2, #4]
   14210:	add	r0, r0, r5
   14214:	sub	sp, fp, #8
   14218:	pop	{r4, r5, fp, pc}
   1421c:	ldr	r0, [pc, #24]	; 1423c <flatcc_builder_extend_vector@@Base+0xf4>
   14220:	ldr	r1, [pc, #24]	; 14240 <flatcc_builder_extend_vector@@Base+0xf8>
   14224:	ldr	r3, [pc, #24]	; 14244 <flatcc_builder_extend_vector@@Base+0xfc>
   14228:	mov	r2, #892	; 0x37c
   1422c:	add	r0, pc, r0
   14230:	add	r1, pc, r1
   14234:	add	r3, pc, r3
   14238:	bl	124b0 <__assert_fail@plt>
   1423c:	andeq	r5, r0, r4, lsl r4
   14240:	andeq	r4, r0, sl, asr #6
   14244:	andeq	r5, r0, r7, lsr #8

00014248 <flatcc_builder_vector_push@@Base>:
   14248:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1424c:	add	fp, sp, #24
   14250:	sub	sp, sp, #8
   14254:	mov	r5, r0
   14258:	ldr	r0, [r0, #32]
   1425c:	mov	r8, r1
   14260:	ldrh	r1, [r0, #14]
   14264:	cmp	r1, #4
   14268:	bne	14340 <flatcc_builder_vector_push@@Base+0xf8>
   1426c:	ldr	r1, [r0, #20]
   14270:	ldr	r2, [r0, #24]
   14274:	cmp	r1, r2
   14278:	bhi	14360 <flatcc_builder_vector_push@@Base+0x118>
   1427c:	add	r1, r1, #1
   14280:	str	r1, [r0, #20]
   14284:	ldr	r1, [r5, #32]
   14288:	ldr	r4, [r5, #20]
   1428c:	ldr	r0, [r5, #24]
   14290:	ldr	r6, [r1, #16]
   14294:	add	r1, r4, r6
   14298:	cmp	r1, r0
   1429c:	str	r1, [r5, #20]
   142a0:	bcs	142c4 <flatcc_builder_vector_push@@Base+0x7c>
   142a4:	ldr	r0, [r5, #16]
   142a8:	adds	r7, r0, r4
   142ac:	beq	14330 <flatcc_builder_vector_push@@Base+0xe8>
   142b0:	mov	r0, r7
   142b4:	mov	r1, r8
   142b8:	mov	r2, r6
   142bc:	bl	123fc <memcpy@plt>
   142c0:	b	14334 <flatcc_builder_vector_push@@Base+0xec>
   142c4:	ldr	r2, [r5, #28]
   142c8:	ldr	r0, [r5, #40]	; 0x28
   142cc:	ldr	r7, [r5, #48]	; 0x30
   142d0:	mov	r3, #1
   142d4:	str	r3, [sp]
   142d8:	mov	r3, #1
   142dc:	add	r1, r1, r2
   142e0:	add	r2, r1, #1
   142e4:	add	r1, r5, #60	; 0x3c
   142e8:	blx	r7
   142ec:	mov	r7, #0
   142f0:	cmp	r0, #0
   142f4:	bne	14334 <flatcc_builder_vector_push@@Base+0xec>
   142f8:	ldr	r1, [r5, #28]
   142fc:	ldr	r0, [r5, #60]	; 0x3c
   14300:	ldr	r3, [r5, #64]	; 0x40
   14304:	ldr	r2, [r5, #32]
   14308:	add	r0, r0, r1
   1430c:	sub	r1, r3, r1
   14310:	mvn	r3, #3
   14314:	cmn	r1, #4
   14318:	str	r0, [r5, #16]
   1431c:	movcs	r1, r3
   14320:	str	r1, [r5, #24]
   14324:	str	r3, [r2, #4]
   14328:	adds	r7, r0, r4
   1432c:	bne	142b0 <flatcc_builder_vector_push@@Base+0x68>
   14330:	mov	r7, #0
   14334:	mov	r0, r7
   14338:	sub	sp, fp, #24
   1433c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14340:	ldr	r0, [pc, #56]	; 14380 <flatcc_builder_vector_push@@Base+0x138>
   14344:	ldr	r1, [pc, #56]	; 14384 <flatcc_builder_vector_push@@Base+0x13c>
   14348:	ldr	r3, [pc, #56]	; 14388 <flatcc_builder_vector_push@@Base+0x140>
   1434c:	movw	r2, #907	; 0x38b
   14350:	add	r0, pc, r0
   14354:	add	r1, pc, r1
   14358:	add	r3, pc, r3
   1435c:	bl	124b0 <__assert_fail@plt>
   14360:	ldr	r0, [pc, #36]	; 1438c <flatcc_builder_vector_push@@Base+0x144>
   14364:	ldr	r1, [pc, #36]	; 14390 <flatcc_builder_vector_push@@Base+0x148>
   14368:	ldr	r3, [pc, #36]	; 14394 <flatcc_builder_vector_push@@Base+0x14c>
   1436c:	mov	r2, #908	; 0x38c
   14370:	add	r0, pc, r0
   14374:	add	r1, pc, r1
   14378:	add	r3, pc, r3
   1437c:	bl	124b0 <__assert_fail@plt>
   14380:	andeq	r4, r0, r4, ror #10
   14384:	andeq	r4, r0, r6, lsr #4
   14388:	andeq	r4, r0, r8, lsl #11
   1438c:			; <UNDEFINED> instruction: 0x000045b3
   14390:	andeq	r4, r0, r6, lsl #4
   14394:	andeq	r4, r0, r8, ror #10

00014398 <flatcc_builder_append_vector@@Base>:
   14398:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1439c:	add	fp, sp, #24
   143a0:	sub	sp, sp, #8
   143a4:	mov	r6, r0
   143a8:	ldr	r0, [r0, #32]
   143ac:	mov	r8, r1
   143b0:	ldrh	r1, [r0, #14]
   143b4:	cmp	r1, #4
   143b8:	bne	144b8 <flatcc_builder_append_vector@@Base+0x120>
   143bc:	ldr	r1, [r0, #20]
   143c0:	mov	r5, r2
   143c4:	adds	r1, r1, r2
   143c8:	bcs	14498 <flatcc_builder_append_vector@@Base+0x100>
   143cc:	ldr	r2, [r0, #24]
   143d0:	cmp	r1, r2
   143d4:	bhi	14498 <flatcc_builder_append_vector@@Base+0x100>
   143d8:	str	r1, [r0, #20]
   143dc:	ldr	r1, [r6, #32]
   143e0:	ldr	r4, [r6, #20]
   143e4:	ldr	r0, [r6, #24]
   143e8:	ldr	r9, [r1, #16]
   143ec:	mla	r1, r9, r5, r4
   143f0:	cmp	r1, r0
   143f4:	str	r1, [r6, #20]
   143f8:	bcs	1441c <flatcc_builder_append_vector@@Base+0x84>
   143fc:	ldr	r0, [r6, #16]
   14400:	adds	r7, r0, r4
   14404:	beq	14488 <flatcc_builder_append_vector@@Base+0xf0>
   14408:	mul	r2, r9, r5
   1440c:	mov	r0, r7
   14410:	mov	r1, r8
   14414:	bl	123fc <memcpy@plt>
   14418:	b	1448c <flatcc_builder_append_vector@@Base+0xf4>
   1441c:	ldr	r2, [r6, #28]
   14420:	ldr	r0, [r6, #40]	; 0x28
   14424:	ldr	r7, [r6, #48]	; 0x30
   14428:	mov	r3, #1
   1442c:	str	r3, [sp]
   14430:	mov	r3, #1
   14434:	add	r1, r1, r2
   14438:	add	r2, r1, #1
   1443c:	add	r1, r6, #60	; 0x3c
   14440:	blx	r7
   14444:	mov	r7, #0
   14448:	cmp	r0, #0
   1444c:	bne	1448c <flatcc_builder_append_vector@@Base+0xf4>
   14450:	ldr	r1, [r6, #28]
   14454:	ldr	r0, [r6, #60]	; 0x3c
   14458:	ldr	r3, [r6, #64]	; 0x40
   1445c:	ldr	r2, [r6, #32]
   14460:	add	r0, r0, r1
   14464:	sub	r1, r3, r1
   14468:	mvn	r3, #3
   1446c:	cmn	r1, #4
   14470:	str	r0, [r6, #16]
   14474:	movcs	r1, r3
   14478:	str	r1, [r6, #24]
   1447c:	str	r3, [r2, #4]
   14480:	adds	r7, r0, r4
   14484:	bne	14408 <flatcc_builder_append_vector@@Base+0x70>
   14488:	mov	r7, #0
   1448c:	mov	r0, r7
   14490:	sub	sp, fp, #24
   14494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14498:	ldr	r0, [pc, #68]	; 144e4 <flatcc_builder_append_vector@@Base+0x14c>
   1449c:	ldr	r1, [pc, #68]	; 144e8 <flatcc_builder_append_vector@@Base+0x150>
   144a0:	ldr	r3, [pc, #68]	; 144ec <flatcc_builder_append_vector@@Base+0x154>
   144a4:	mov	r2, #892	; 0x37c
   144a8:	add	r0, pc, r0
   144ac:	add	r1, pc, r1
   144b0:	add	r3, pc, r3
   144b4:	bl	124b0 <__assert_fail@plt>
   144b8:	ldr	r0, [pc, #24]	; 144d8 <flatcc_builder_append_vector@@Base+0x140>
   144bc:	ldr	r1, [pc, #24]	; 144dc <flatcc_builder_append_vector@@Base+0x144>
   144c0:	ldr	r3, [pc, #24]	; 144e0 <flatcc_builder_append_vector@@Base+0x148>
   144c4:	movw	r2, #915	; 0x393
   144c8:	add	r0, pc, r0
   144cc:	add	r1, pc, r1
   144d0:	add	r3, pc, r3
   144d4:	bl	124b0 <__assert_fail@plt>
   144d8:	andeq	r4, r0, ip, ror #7
   144dc:	andeq	r4, r0, lr, lsr #1
   144e0:	muleq	r0, r0, r4
   144e4:	muleq	r0, r8, r1
   144e8:	andeq	r4, r0, lr, asr #1
   144ec:	andeq	r5, r0, fp, lsr #3

000144f0 <flatcc_builder_extend_offset_vector@@Base>:
   144f0:	push	{r4, r5, fp, lr}
   144f4:	add	fp, sp, #8
   144f8:	sub	sp, sp, #8
   144fc:	mov	r4, r0
   14500:	ldr	r0, [r0, #32]
   14504:	ldr	r2, [r0, #20]
   14508:	adds	r2, r2, r1
   1450c:	cmpcc	r2, #1073741824	; 0x40000000
   14510:	bcc	14534 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14514:	ldr	r0, [pc, #184]	; 145d4 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14518:	ldr	r1, [pc, #184]	; 145d8 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   1451c:	ldr	r3, [pc, #184]	; 145dc <flatcc_builder_extend_offset_vector@@Base+0xec>
   14520:	mov	r2, #892	; 0x37c
   14524:	add	r0, pc, r0
   14528:	add	r1, pc, r1
   1452c:	add	r3, pc, r3
   14530:	bl	124b0 <__assert_fail@plt>
   14534:	str	r2, [r0, #20]
   14538:	ldr	r5, [r4, #20]
   1453c:	ldr	r0, [r4, #24]
   14540:	add	r1, r5, r1, lsl #2
   14544:	cmp	r1, r0
   14548:	str	r1, [r4, #20]
   1454c:	bcs	14558 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14550:	ldr	r0, [r4, #16]
   14554:	b	145c8 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14558:	ldr	r2, [r4, #28]
   1455c:	ldr	r0, [r4, #40]	; 0x28
   14560:	ldr	ip, [r4, #48]	; 0x30
   14564:	mov	r3, #1
   14568:	str	r3, [sp]
   1456c:	mov	r3, #1
   14570:	add	r1, r1, r2
   14574:	add	r2, r1, #1
   14578:	add	r1, r4, #60	; 0x3c
   1457c:	blx	ip
   14580:	mov	r1, r0
   14584:	mov	r0, #0
   14588:	cmp	r1, #0
   1458c:	beq	14598 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14590:	sub	sp, fp, #8
   14594:	pop	{r4, r5, fp, pc}
   14598:	ldr	r1, [r4, #28]
   1459c:	ldr	r0, [r4, #60]	; 0x3c
   145a0:	ldr	r3, [r4, #64]	; 0x40
   145a4:	ldr	r2, [r4, #32]
   145a8:	add	r0, r0, r1
   145ac:	sub	r1, r3, r1
   145b0:	mvn	r3, #3
   145b4:	cmn	r1, #4
   145b8:	str	r0, [r4, #16]
   145bc:	movcs	r1, r3
   145c0:	str	r1, [r4, #24]
   145c4:	str	r3, [r2, #4]
   145c8:	add	r0, r0, r5
   145cc:	sub	sp, fp, #8
   145d0:	pop	{r4, r5, fp, pc}
   145d4:	andeq	r5, r0, ip, lsl r1
   145d8:	andeq	r4, r0, r2, asr r0
   145dc:	andeq	r5, r0, pc, lsr #2

000145e0 <flatcc_builder_offset_vector_push@@Base>:
   145e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145e4:	add	fp, sp, #24
   145e8:	sub	sp, sp, #8
   145ec:	mov	r6, r0
   145f0:	ldr	r0, [r0, #32]
   145f4:	mov	r8, r1
   145f8:	ldrh	r1, [r0, #14]
   145fc:	cmp	r1, #5
   14600:	bne	146b4 <flatcc_builder_offset_vector_push@@Base+0xd4>
   14604:	ldr	r1, [r0, #20]
   14608:	mov	r5, #0
   1460c:	cmn	r1, #-1073741823	; 0xc0000001
   14610:	beq	146a8 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14614:	add	r1, r1, #1
   14618:	str	r1, [r0, #20]
   1461c:	ldr	r7, [r6, #20]
   14620:	ldr	r0, [r6, #24]
   14624:	add	r1, r7, #4
   14628:	cmp	r1, r0
   1462c:	str	r1, [r6, #20]
   14630:	bcs	1463c <flatcc_builder_offset_vector_push@@Base+0x5c>
   14634:	ldr	r0, [r6, #16]
   14638:	b	1469c <flatcc_builder_offset_vector_push@@Base+0xbc>
   1463c:	ldr	r1, [r6, #28]
   14640:	ldr	r0, [r6, #40]	; 0x28
   14644:	ldr	r4, [r6, #48]	; 0x30
   14648:	mov	r2, #1
   1464c:	mov	r3, #1
   14650:	str	r2, [sp]
   14654:	add	r1, r7, r1
   14658:	add	r2, r1, #5
   1465c:	add	r1, r6, #60	; 0x3c
   14660:	blx	r4
   14664:	cmp	r0, #0
   14668:	bne	146a8 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1466c:	ldr	r1, [r6, #28]
   14670:	ldr	r0, [r6, #60]	; 0x3c
   14674:	ldr	r3, [r6, #64]	; 0x40
   14678:	ldr	r2, [r6, #32]
   1467c:	add	r0, r0, r1
   14680:	sub	r1, r3, r1
   14684:	mvn	r3, #3
   14688:	cmn	r1, #4
   1468c:	str	r0, [r6, #16]
   14690:	movcs	r1, r3
   14694:	str	r1, [r6, #24]
   14698:	str	r3, [r2, #4]
   1469c:	adds	r0, r0, r7
   146a0:	movne	r5, r0
   146a4:	strne	r8, [r0]
   146a8:	mov	r0, r5
   146ac:	sub	sp, fp, #24
   146b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146b4:	ldr	r0, [pc, #24]	; 146d4 <flatcc_builder_offset_vector_push@@Base+0xf4>
   146b8:	ldr	r1, [pc, #24]	; 146d8 <flatcc_builder_offset_vector_push@@Base+0xf8>
   146bc:	ldr	r3, [pc, #24]	; 146dc <flatcc_builder_offset_vector_push@@Base+0xfc>
   146c0:	movw	r2, #934	; 0x3a6
   146c4:	add	r0, pc, r0
   146c8:	add	r1, pc, r1
   146cc:	add	r3, pc, r3
   146d0:	bl	124b0 <__assert_fail@plt>
   146d4:	andeq	r4, r0, r9, ror #5
   146d8:			; <UNDEFINED> instruction: 0x00003eb2
   146dc:	andeq	r4, r0, r4, lsl r3

000146e0 <flatcc_builder_append_offset_vector@@Base>:
   146e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146e4:	add	fp, sp, #24
   146e8:	sub	sp, sp, #8
   146ec:	mov	r6, r0
   146f0:	ldr	r0, [r0, #32]
   146f4:	mov	r8, r1
   146f8:	ldrh	r1, [r0, #14]
   146fc:	cmp	r1, #5
   14700:	bne	147f0 <flatcc_builder_append_offset_vector@@Base+0x110>
   14704:	ldr	r1, [r0, #20]
   14708:	mov	r5, r2
   1470c:	adds	r1, r1, r2
   14710:	cmpcc	r1, #1073741824	; 0x40000000
   14714:	bcc	14738 <flatcc_builder_append_offset_vector@@Base+0x58>
   14718:	ldr	r0, [pc, #252]	; 1481c <flatcc_builder_append_offset_vector@@Base+0x13c>
   1471c:	ldr	r1, [pc, #252]	; 14820 <flatcc_builder_append_offset_vector@@Base+0x140>
   14720:	ldr	r3, [pc, #252]	; 14824 <flatcc_builder_append_offset_vector@@Base+0x144>
   14724:	mov	r2, #892	; 0x37c
   14728:	add	r0, pc, r0
   1472c:	add	r1, pc, r1
   14730:	add	r3, pc, r3
   14734:	bl	124b0 <__assert_fail@plt>
   14738:	str	r1, [r0, #20]
   1473c:	ldr	r4, [r6, #20]
   14740:	ldr	r0, [r6, #24]
   14744:	add	r1, r4, r5, lsl #2
   14748:	cmp	r1, r0
   1474c:	str	r1, [r6, #20]
   14750:	bcs	14774 <flatcc_builder_append_offset_vector@@Base+0x94>
   14754:	ldr	r0, [r6, #16]
   14758:	adds	r7, r0, r4
   1475c:	beq	147e0 <flatcc_builder_append_offset_vector@@Base+0x100>
   14760:	lsl	r2, r5, #2
   14764:	mov	r0, r7
   14768:	mov	r1, r8
   1476c:	bl	123fc <memcpy@plt>
   14770:	b	147e4 <flatcc_builder_append_offset_vector@@Base+0x104>
   14774:	ldr	r2, [r6, #28]
   14778:	ldr	r0, [r6, #40]	; 0x28
   1477c:	ldr	r7, [r6, #48]	; 0x30
   14780:	mov	r3, #1
   14784:	str	r3, [sp]
   14788:	mov	r3, #1
   1478c:	add	r1, r1, r2
   14790:	add	r2, r1, #1
   14794:	add	r1, r6, #60	; 0x3c
   14798:	blx	r7
   1479c:	mov	r7, #0
   147a0:	cmp	r0, #0
   147a4:	bne	147e4 <flatcc_builder_append_offset_vector@@Base+0x104>
   147a8:	ldr	r1, [r6, #28]
   147ac:	ldr	r0, [r6, #60]	; 0x3c
   147b0:	ldr	r3, [r6, #64]	; 0x40
   147b4:	ldr	r2, [r6, #32]
   147b8:	add	r0, r0, r1
   147bc:	sub	r1, r3, r1
   147c0:	mvn	r3, #3
   147c4:	cmn	r1, #4
   147c8:	str	r0, [r6, #16]
   147cc:	movcs	r1, r3
   147d0:	str	r1, [r6, #24]
   147d4:	str	r3, [r2, #4]
   147d8:	adds	r7, r0, r4
   147dc:	bne	14760 <flatcc_builder_append_offset_vector@@Base+0x80>
   147e0:	mov	r7, #0
   147e4:	mov	r0, r7
   147e8:	sub	sp, fp, #24
   147ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147f0:	ldr	r0, [pc, #24]	; 14810 <flatcc_builder_append_offset_vector@@Base+0x130>
   147f4:	ldr	r1, [pc, #24]	; 14814 <flatcc_builder_append_offset_vector@@Base+0x134>
   147f8:	ldr	r3, [pc, #24]	; 14818 <flatcc_builder_append_offset_vector@@Base+0x138>
   147fc:	mov	r2, #948	; 0x3b4
   14800:	add	r0, pc, r0
   14804:	add	r1, pc, r1
   14808:	add	r3, pc, r3
   1480c:	bl	124b0 <__assert_fail@plt>
   14810:	andeq	r4, r0, sp, lsr #3
   14814:	andeq	r3, r0, r6, ror sp
   14818:	andeq	r4, r0, sl, lsr r2
   1481c:	andeq	r4, r0, r8, lsl pc
   14820:	andeq	r3, r0, lr, asr #28
   14824:	andeq	r4, r0, fp, lsr #30

00014828 <flatcc_builder_extend_string@@Base>:
   14828:	push	{r4, r5, fp, lr}
   1482c:	add	fp, sp, #8
   14830:	sub	sp, sp, #8
   14834:	mov	r4, r0
   14838:	ldr	r0, [r0, #32]
   1483c:	ldrh	r2, [r0, #14]
   14840:	cmp	r2, #6
   14844:	bne	148f4 <flatcc_builder_extend_string@@Base+0xcc>
   14848:	ldr	r2, [r0, #20]
   1484c:	adds	r2, r2, r1
   14850:	bcs	14914 <flatcc_builder_extend_string@@Base+0xec>
   14854:	str	r2, [r0, #20]
   14858:	ldr	r5, [r4, #20]
   1485c:	ldr	r0, [r4, #24]
   14860:	add	r1, r5, r1
   14864:	cmp	r1, r0
   14868:	str	r1, [r4, #20]
   1486c:	bcs	14878 <flatcc_builder_extend_string@@Base+0x50>
   14870:	ldr	r0, [r4, #16]
   14874:	b	148e8 <flatcc_builder_extend_string@@Base+0xc0>
   14878:	ldr	r2, [r4, #28]
   1487c:	ldr	r0, [r4, #40]	; 0x28
   14880:	ldr	ip, [r4, #48]	; 0x30
   14884:	mov	r3, #1
   14888:	str	r3, [sp]
   1488c:	mov	r3, #1
   14890:	add	r1, r1, r2
   14894:	add	r2, r1, #1
   14898:	add	r1, r4, #60	; 0x3c
   1489c:	blx	ip
   148a0:	mov	r1, r0
   148a4:	mov	r0, #0
   148a8:	cmp	r1, #0
   148ac:	beq	148b8 <flatcc_builder_extend_string@@Base+0x90>
   148b0:	sub	sp, fp, #8
   148b4:	pop	{r4, r5, fp, pc}
   148b8:	ldr	r1, [r4, #28]
   148bc:	ldr	r0, [r4, #60]	; 0x3c
   148c0:	ldr	r3, [r4, #64]	; 0x40
   148c4:	ldr	r2, [r4, #32]
   148c8:	add	r0, r0, r1
   148cc:	sub	r1, r3, r1
   148d0:	mvn	r3, #3
   148d4:	cmn	r1, #4
   148d8:	str	r0, [r4, #16]
   148dc:	movcs	r1, r3
   148e0:	str	r1, [r4, #24]
   148e4:	str	r3, [r2, #4]
   148e8:	add	r0, r0, r5
   148ec:	sub	sp, fp, #8
   148f0:	pop	{r4, r5, fp, pc}
   148f4:	ldr	r0, [pc, #56]	; 14934 <flatcc_builder_extend_string@@Base+0x10c>
   148f8:	ldr	r1, [pc, #56]	; 14938 <flatcc_builder_extend_string@@Base+0x110>
   148fc:	ldr	r3, [pc, #56]	; 1493c <flatcc_builder_extend_string@@Base+0x114>
   14900:	movw	r2, #957	; 0x3bd
   14904:	add	r0, pc, r0
   14908:	add	r1, pc, r1
   1490c:	add	r3, pc, r3
   14910:	bl	124b0 <__assert_fail@plt>
   14914:	ldr	r0, [pc, #36]	; 14940 <flatcc_builder_extend_string@@Base+0x118>
   14918:	ldr	r1, [pc, #36]	; 14944 <flatcc_builder_extend_string@@Base+0x11c>
   1491c:	ldr	r3, [pc, #36]	; 14948 <flatcc_builder_extend_string@@Base+0x120>
   14920:	mov	r2, #892	; 0x37c
   14924:	add	r0, pc, r0
   14928:	add	r1, pc, r1
   1492c:	add	r3, pc, r3
   14930:	bl	124b0 <__assert_fail@plt>
   14934:			; <UNDEFINED> instruction: 0x000041b2
   14938:	andeq	r3, r0, r2, ror ip
   1493c:	ldrdeq	r4, [r0], -r6
   14940:	andeq	r4, r0, ip, lsl sp
   14944:	andeq	r3, r0, r2, asr ip
   14948:	andeq	r4, r0, pc, lsr #26

0001494c <flatcc_builder_append_string@@Base>:
   1494c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14950:	add	fp, sp, #24
   14954:	sub	sp, sp, #8
   14958:	mov	r6, r0
   1495c:	ldr	r0, [r0, #32]
   14960:	mov	r8, r1
   14964:	ldrh	r1, [r0, #14]
   14968:	cmp	r1, #6
   1496c:	bne	14a38 <flatcc_builder_append_string@@Base+0xec>
   14970:	ldr	r1, [r0, #20]
   14974:	mov	r4, r2
   14978:	adds	r1, r1, r2
   1497c:	bcs	14a58 <flatcc_builder_append_string@@Base+0x10c>
   14980:	str	r1, [r0, #20]
   14984:	ldr	r5, [r6, #20]
   14988:	ldr	r0, [r6, #24]
   1498c:	add	r1, r5, r4
   14990:	cmp	r1, r0
   14994:	str	r1, [r6, #20]
   14998:	bcs	149bc <flatcc_builder_append_string@@Base+0x70>
   1499c:	ldr	r0, [r6, #16]
   149a0:	adds	r7, r0, r5
   149a4:	beq	14a28 <flatcc_builder_append_string@@Base+0xdc>
   149a8:	mov	r0, r7
   149ac:	mov	r1, r8
   149b0:	mov	r2, r4
   149b4:	bl	123fc <memcpy@plt>
   149b8:	b	14a2c <flatcc_builder_append_string@@Base+0xe0>
   149bc:	ldr	r2, [r6, #28]
   149c0:	ldr	r0, [r6, #40]	; 0x28
   149c4:	ldr	r7, [r6, #48]	; 0x30
   149c8:	mov	r3, #1
   149cc:	str	r3, [sp]
   149d0:	mov	r3, #1
   149d4:	add	r1, r1, r2
   149d8:	add	r2, r1, #1
   149dc:	add	r1, r6, #60	; 0x3c
   149e0:	blx	r7
   149e4:	mov	r7, #0
   149e8:	cmp	r0, #0
   149ec:	bne	14a2c <flatcc_builder_append_string@@Base+0xe0>
   149f0:	ldr	r1, [r6, #28]
   149f4:	ldr	r0, [r6, #60]	; 0x3c
   149f8:	ldr	r3, [r6, #64]	; 0x40
   149fc:	ldr	r2, [r6, #32]
   14a00:	add	r0, r0, r1
   14a04:	sub	r1, r3, r1
   14a08:	mvn	r3, #3
   14a0c:	cmn	r1, #4
   14a10:	str	r0, [r6, #16]
   14a14:	movcs	r1, r3
   14a18:	str	r1, [r6, #24]
   14a1c:	str	r3, [r2, #4]
   14a20:	adds	r7, r0, r5
   14a24:	bne	149a8 <flatcc_builder_append_string@@Base+0x5c>
   14a28:	mov	r7, #0
   14a2c:	mov	r0, r7
   14a30:	sub	sp, fp, #24
   14a34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a38:	ldr	r0, [pc, #56]	; 14a78 <flatcc_builder_append_string@@Base+0x12c>
   14a3c:	ldr	r1, [pc, #56]	; 14a7c <flatcc_builder_append_string@@Base+0x130>
   14a40:	ldr	r3, [pc, #56]	; 14a80 <flatcc_builder_append_string@@Base+0x134>
   14a44:	movw	r2, #966	; 0x3c6
   14a48:	add	r0, pc, r0
   14a4c:	add	r1, pc, r1
   14a50:	add	r3, pc, r3
   14a54:	bl	124b0 <__assert_fail@plt>
   14a58:	ldr	r0, [pc, #36]	; 14a84 <flatcc_builder_append_string@@Base+0x138>
   14a5c:	ldr	r1, [pc, #36]	; 14a88 <flatcc_builder_append_string@@Base+0x13c>
   14a60:	ldr	r3, [pc, #36]	; 14a8c <flatcc_builder_append_string@@Base+0x140>
   14a64:	mov	r2, #892	; 0x37c
   14a68:	add	r0, pc, r0
   14a6c:	add	r1, pc, r1
   14a70:	add	r3, pc, r3
   14a74:	bl	124b0 <__assert_fail@plt>
   14a78:	andeq	r4, r0, lr, rrx
   14a7c:	andeq	r3, r0, lr, lsr #22
   14a80:	ldrdeq	r4, [r0], -r1
   14a84:	ldrdeq	r4, [r0], -r8
   14a88:	andeq	r3, r0, lr, lsl #22
   14a8c:	andeq	r4, r0, fp, ror #23

00014a90 <flatcc_builder_append_string_str@@Base>:
   14a90:	push	{r4, r5, fp, lr}
   14a94:	add	fp, sp, #8
   14a98:	mov	r5, r0
   14a9c:	mov	r0, r1
   14aa0:	mov	r4, r1
   14aa4:	bl	1245c <strlen@plt>
   14aa8:	mov	r2, r0
   14aac:	mov	r0, r5
   14ab0:	mov	r1, r4
   14ab4:	pop	{r4, r5, fp, lr}
   14ab8:	b	1494c <flatcc_builder_append_string@@Base>

00014abc <flatcc_builder_append_string_strn@@Base>:
   14abc:	push	{r4, r5, r6, sl, fp, lr}
   14ac0:	add	fp, sp, #16
   14ac4:	mov	r6, r0
   14ac8:	mov	r5, r1
   14acc:	mov	r0, r1
   14ad0:	mov	r1, #0
   14ad4:	mov	r4, r2
   14ad8:	bl	1248c <memchr@plt>
   14adc:	cmp	r0, #0
   14ae0:	mov	r1, r5
   14ae4:	subne	r4, r0, r5
   14ae8:	mov	r0, r6
   14aec:	mov	r2, r4
   14af0:	pop	{r4, r5, r6, sl, fp, lr}
   14af4:	b	1494c <flatcc_builder_append_string@@Base>

00014af8 <flatcc_builder_truncate_vector@@Base>:
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	ldr	r2, [r0, #32]
   14b04:	ldrh	r3, [r2, #14]
   14b08:	cmp	r3, #4
   14b0c:	bne	14b54 <flatcc_builder_truncate_vector@@Base+0x5c>
   14b10:	ldr	r3, [r2, #20]
   14b14:	cmp	r3, r1
   14b18:	bcc	14b74 <flatcc_builder_truncate_vector@@Base+0x7c>
   14b1c:	sub	r3, r3, r1
   14b20:	str	r3, [r2, #20]
   14b24:	ldr	r2, [r0, #32]
   14b28:	ldr	r3, [r0, #20]
   14b2c:	ldr	ip, [r0, #16]
   14b30:	ldr	r2, [r2, #16]
   14b34:	mls	r3, r2, r1, r3
   14b38:	mul	r2, r2, r1
   14b3c:	mov	r1, #0
   14b40:	str	r3, [r0, #20]
   14b44:	add	r0, ip, r3
   14b48:	bl	12480 <memset@plt>
   14b4c:	mov	r0, #0
   14b50:	pop	{fp, pc}
   14b54:	ldr	r0, [pc, #56]	; 14b94 <flatcc_builder_truncate_vector@@Base+0x9c>
   14b58:	ldr	r1, [pc, #56]	; 14b98 <flatcc_builder_truncate_vector@@Base+0xa0>
   14b5c:	ldr	r3, [pc, #56]	; 14b9c <flatcc_builder_truncate_vector@@Base+0xa4>
   14b60:	movw	r2, #985	; 0x3d9
   14b64:	add	r0, pc, r0
   14b68:	add	r1, pc, r1
   14b6c:	add	r3, pc, r3
   14b70:	bl	124b0 <__assert_fail@plt>
   14b74:	ldr	r0, [pc, #36]	; 14ba0 <flatcc_builder_truncate_vector@@Base+0xa8>
   14b78:	ldr	r1, [pc, #36]	; 14ba4 <flatcc_builder_truncate_vector@@Base+0xac>
   14b7c:	ldr	r3, [pc, #36]	; 14ba8 <flatcc_builder_truncate_vector@@Base+0xb0>
   14b80:	movw	r2, #986	; 0x3da
   14b84:	add	r0, pc, r0
   14b88:	add	r1, pc, r1
   14b8c:	add	r3, pc, r3
   14b90:	bl	124b0 <__assert_fail@plt>
   14b94:	andeq	r3, r0, r0, asr sp
   14b98:	andeq	r3, r0, r2, lsl sl
   14b9c:	andeq	r4, r0, r2
   14ba0:	andeq	r4, r0, r9, lsr #32
   14ba4:	strdeq	r3, [r0], -r2
   14ba8:	andeq	r3, r0, r2, ror #31

00014bac <flatcc_builder_truncate_offset_vector@@Base>:
   14bac:	push	{fp, lr}
   14bb0:	mov	fp, sp
   14bb4:	ldr	r2, [r0, #32]
   14bb8:	ldrh	r3, [r2, #14]
   14bbc:	cmp	r3, #5
   14bc0:	bne	14c08 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14bc4:	ldr	r3, [r2, #20]
   14bc8:	cmp	r3, r1
   14bcc:	bcc	14c28 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14bd0:	sub	r3, r3, r1
   14bd4:	str	r3, [r2, #20]
   14bd8:	ldr	r2, [r0, #32]
   14bdc:	ldr	r3, [r0, #20]
   14be0:	ldr	ip, [r0, #16]
   14be4:	ldr	r2, [r2, #16]
   14be8:	mls	r3, r2, r1, r3
   14bec:	mul	r2, r2, r1
   14bf0:	mov	r1, #0
   14bf4:	str	r3, [r0, #20]
   14bf8:	add	r0, ip, r3
   14bfc:	bl	12480 <memset@plt>
   14c00:	mov	r0, #0
   14c04:	pop	{fp, pc}
   14c08:	ldr	r0, [pc, #56]	; 14c48 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14c0c:	ldr	r1, [pc, #56]	; 14c4c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14c10:	ldr	r3, [pc, #56]	; 14c50 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   14c14:	movw	r2, #994	; 0x3e2
   14c18:	add	r0, pc, r0
   14c1c:	add	r1, pc, r1
   14c20:	add	r3, pc, r3
   14c24:	bl	124b0 <__assert_fail@plt>
   14c28:	ldr	r0, [pc, #36]	; 14c54 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   14c2c:	ldr	r1, [pc, #36]	; 14c58 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   14c30:	ldr	r3, [pc, #36]	; 14c5c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14c34:	movw	r2, #995	; 0x3e3
   14c38:	add	r0, pc, r0
   14c3c:	add	r1, pc, r1
   14c40:	add	r3, pc, r3
   14c44:	bl	124b0 <__assert_fail@plt>
   14c48:	muleq	r0, r5, sp
   14c4c:	andeq	r3, r0, lr, asr r9
   14c50:			; <UNDEFINED> instruction: 0x00003fb1
   14c54:	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   14c58:	andeq	r3, r0, lr, lsr r9
   14c5c:	muleq	r0, r1, pc	; <UNPREDICTABLE>

00014c60 <flatcc_builder_truncate_string@@Base>:
   14c60:	push	{fp, lr}
   14c64:	mov	fp, sp
   14c68:	mov	r2, r1
   14c6c:	ldr	r1, [r0, #32]
   14c70:	ldrh	r3, [r1, #14]
   14c74:	cmp	r3, #6
   14c78:	bne	14cb4 <flatcc_builder_truncate_string@@Base+0x54>
   14c7c:	ldr	r3, [r1, #20]
   14c80:	cmp	r3, r2
   14c84:	bcc	14cd4 <flatcc_builder_truncate_string@@Base+0x74>
   14c88:	sub	r3, r3, r2
   14c8c:	str	r3, [r1, #20]
   14c90:	ldr	r3, [r0, #20]
   14c94:	ldr	r1, [r0, #16]
   14c98:	sub	r3, r3, r2
   14c9c:	str	r3, [r0, #20]
   14ca0:	add	r0, r1, r3
   14ca4:	mov	r1, #0
   14ca8:	bl	12480 <memset@plt>
   14cac:	mov	r0, #0
   14cb0:	pop	{fp, pc}
   14cb4:	ldr	r0, [pc, #56]	; 14cf4 <flatcc_builder_truncate_string@@Base+0x94>
   14cb8:	ldr	r1, [pc, #56]	; 14cf8 <flatcc_builder_truncate_string@@Base+0x98>
   14cbc:	ldr	r3, [pc, #56]	; 14cfc <flatcc_builder_truncate_string@@Base+0x9c>
   14cc0:	movw	r2, #1003	; 0x3eb
   14cc4:	add	r0, pc, r0
   14cc8:	add	r1, pc, r1
   14ccc:	add	r3, pc, r3
   14cd0:	bl	124b0 <__assert_fail@plt>
   14cd4:	ldr	r0, [pc, #36]	; 14d00 <flatcc_builder_truncate_string@@Base+0xa0>
   14cd8:	ldr	r1, [pc, #36]	; 14d04 <flatcc_builder_truncate_string@@Base+0xa4>
   14cdc:	ldr	r3, [pc, #36]	; 14d08 <flatcc_builder_truncate_string@@Base+0xa8>
   14ce0:	mov	r2, #1004	; 0x3ec
   14ce4:	add	r0, pc, r0
   14ce8:	add	r1, pc, r1
   14cec:	add	r3, pc, r3
   14cf0:	bl	124b0 <__assert_fail@plt>
   14cf4:	strdeq	r3, [r0], -r2
   14cf8:			; <UNDEFINED> instruction: 0x000038b2
   14cfc:	andeq	r3, r0, r6, lsl #31
   14d00:	andeq	r3, r0, sp, lsr #31
   14d04:	muleq	r0, r2, r8
   14d08:	andeq	r3, r0, r6, ror #30

00014d0c <flatcc_builder_start_vector@@Base>:
   14d0c:	push	{r4, r5, r6, r7, fp, lr}
   14d10:	add	fp, sp, #16
   14d14:	mov	r7, #4
   14d18:	cmp	r2, #4
   14d1c:	mov	r6, r1
   14d20:	mov	r5, r3
   14d24:	mov	r4, r0
   14d28:	movls	r2, r7
   14d2c:	mov	r1, r2
   14d30:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   14d34:	mov	r1, r0
   14d38:	mvn	r0, #0
   14d3c:	cmp	r1, #0
   14d40:	popne	{r4, r5, r6, r7, fp, pc}
   14d44:	ldr	r0, [r4, #32]
   14d48:	str	r6, [r0, #16]
   14d4c:	mov	r0, #0
   14d50:	ldr	r1, [r4, #32]
   14d54:	str	r0, [r1, #20]
   14d58:	ldr	r1, [r4, #32]
   14d5c:	str	r5, [r1, #24]
   14d60:	ldr	r1, [r4, #32]
   14d64:	strh	r7, [r1, #14]
   14d68:	ldr	r2, [r4, #28]
   14d6c:	ldr	r3, [r4, #60]	; 0x3c
   14d70:	ldr	r7, [r4, #64]	; 0x40
   14d74:	add	r3, r3, r2
   14d78:	sub	r2, r7, r2
   14d7c:	str	r3, [r4, #16]
   14d80:	mvn	r3, #3
   14d84:	cmn	r2, #4
   14d88:	movcs	r2, r3
   14d8c:	str	r2, [r4, #24]
   14d90:	str	r3, [r1, #4]
   14d94:	pop	{r4, r5, r6, r7, fp, pc}

00014d98 <flatcc_builder_start_offset_vector@@Base>:
   14d98:	push	{r4, r5, fp, lr}
   14d9c:	add	fp, sp, #8
   14da0:	mov	r1, #4
   14da4:	mov	r4, r0
   14da8:	mov	r5, #4
   14dac:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   14db0:	mov	r1, r0
   14db4:	mvn	r0, #0
   14db8:	cmp	r1, #0
   14dbc:	popne	{r4, r5, fp, pc}
   14dc0:	ldr	r0, [r4, #32]
   14dc4:	mov	r2, #5
   14dc8:	str	r5, [r0, #16]
   14dcc:	mov	r0, #0
   14dd0:	ldr	r1, [r4, #32]
   14dd4:	str	r0, [r1, #20]
   14dd8:	ldr	r1, [r4, #32]
   14ddc:	strh	r2, [r1, #14]
   14de0:	ldr	r2, [r4, #28]
   14de4:	ldr	r3, [r4, #60]	; 0x3c
   14de8:	ldr	r5, [r4, #64]	; 0x40
   14dec:	add	r3, r3, r2
   14df0:	sub	r2, r5, r2
   14df4:	str	r3, [r4, #16]
   14df8:	mvn	r3, #3
   14dfc:	cmn	r2, #4
   14e00:	movcs	r2, r3
   14e04:	str	r2, [r4, #24]
   14e08:	str	r3, [r1, #4]
   14e0c:	pop	{r4, r5, fp, pc}

00014e10 <flatcc_builder_create_offset_vector@@Base>:
   14e10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e14:	add	fp, sp, #24
   14e18:	sub	sp, sp, #8
   14e1c:	mov	r8, r1
   14e20:	mov	r1, #4
   14e24:	mov	r6, r2
   14e28:	mov	r4, r0
   14e2c:	mov	r7, #4
   14e30:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   14e34:	cmp	r0, #0
   14e38:	beq	14e48 <flatcc_builder_create_offset_vector@@Base+0x38>
   14e3c:	mov	r0, #0
   14e40:	sub	sp, fp, #24
   14e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e48:	ldr	r0, [r4, #32]
   14e4c:	mov	r1, #0
   14e50:	str	r7, [r0, #16]
   14e54:	ldr	r0, [r4, #32]
   14e58:	str	r1, [r0, #20]
   14e5c:	mov	r1, #5
   14e60:	ldr	r0, [r4, #32]
   14e64:	strh	r1, [r0, #14]
   14e68:	ldr	r1, [r4, #28]
   14e6c:	ldr	r2, [r4, #60]	; 0x3c
   14e70:	ldr	r3, [r4, #64]	; 0x40
   14e74:	add	r2, r2, r1
   14e78:	sub	r1, r3, r1
   14e7c:	str	r2, [r4, #16]
   14e80:	mvn	r2, #3
   14e84:	cmn	r1, #4
   14e88:	movcs	r1, r2
   14e8c:	str	r1, [r4, #24]
   14e90:	str	r2, [r0, #4]
   14e94:	ldr	r1, [r0, #20]
   14e98:	adds	r1, r1, r6
   14e9c:	cmpcc	r1, #1073741824	; 0x40000000
   14ea0:	bcc	14ec4 <flatcc_builder_create_offset_vector@@Base+0xb4>
   14ea4:	ldr	r0, [pc, #200]	; 14f74 <flatcc_builder_create_offset_vector@@Base+0x164>
   14ea8:	ldr	r1, [pc, #200]	; 14f78 <flatcc_builder_create_offset_vector@@Base+0x168>
   14eac:	ldr	r3, [pc, #200]	; 14f7c <flatcc_builder_create_offset_vector@@Base+0x16c>
   14eb0:	mov	r2, #892	; 0x37c
   14eb4:	add	r0, pc, r0
   14eb8:	add	r1, pc, r1
   14ebc:	add	r3, pc, r3
   14ec0:	bl	124b0 <__assert_fail@plt>
   14ec4:	str	r1, [r0, #20]
   14ec8:	ldr	r7, [r4, #20]
   14ecc:	ldr	r0, [r4, #24]
   14ed0:	add	r1, r7, r6, lsl #2
   14ed4:	cmp	r1, r0
   14ed8:	str	r1, [r4, #20]
   14edc:	bcs	14ef0 <flatcc_builder_create_offset_vector@@Base+0xe0>
   14ee0:	ldr	r0, [r4, #16]
   14ee4:	adds	r0, r0, r7
   14ee8:	bne	14f58 <flatcc_builder_create_offset_vector@@Base+0x148>
   14eec:	b	14e3c <flatcc_builder_create_offset_vector@@Base+0x2c>
   14ef0:	ldr	r2, [r4, #28]
   14ef4:	ldr	r0, [r4, #40]	; 0x28
   14ef8:	ldr	r5, [r4, #48]	; 0x30
   14efc:	mov	r3, #1
   14f00:	str	r3, [sp]
   14f04:	mov	r3, #1
   14f08:	add	r1, r1, r2
   14f0c:	add	r2, r1, #1
   14f10:	add	r1, r4, #60	; 0x3c
   14f14:	blx	r5
   14f18:	cmp	r0, #0
   14f1c:	bne	14e3c <flatcc_builder_create_offset_vector@@Base+0x2c>
   14f20:	ldr	r1, [r4, #28]
   14f24:	ldr	r0, [r4, #60]	; 0x3c
   14f28:	ldr	r3, [r4, #64]	; 0x40
   14f2c:	ldr	r2, [r4, #32]
   14f30:	add	r0, r0, r1
   14f34:	sub	r1, r3, r1
   14f38:	mvn	r3, #3
   14f3c:	cmn	r1, #4
   14f40:	str	r0, [r4, #16]
   14f44:	movcs	r1, r3
   14f48:	str	r1, [r4, #24]
   14f4c:	str	r3, [r2, #4]
   14f50:	adds	r0, r0, r7
   14f54:	beq	14e3c <flatcc_builder_create_offset_vector@@Base+0x2c>
   14f58:	lsl	r2, r6, #2
   14f5c:	mov	r1, r8
   14f60:	bl	123fc <memcpy@plt>
   14f64:	mov	r0, r4
   14f68:	sub	sp, fp, #24
   14f6c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f70:	b	14f80 <flatcc_builder_end_offset_vector@@Base>
   14f74:	andeq	r4, r0, ip, lsl #15
   14f78:	andeq	r3, r0, r2, asr #13
   14f7c:	muleq	r0, pc, r7	; <UNPREDICTABLE>

00014f80 <flatcc_builder_end_offset_vector@@Base>:
   14f80:	push	{r4, r5, fp, lr}
   14f84:	add	fp, sp, #8
   14f88:	mov	r4, r0
   14f8c:	ldr	r0, [r0, #32]
   14f90:	ldrh	r1, [r0, #14]
   14f94:	cmp	r1, #5
   14f98:	bne	15038 <flatcc_builder_end_offset_vector@@Base+0xb8>
   14f9c:	ldr	r2, [r0, #20]
   14fa0:	ldr	r1, [r4, #16]
   14fa4:	mov	r0, r4
   14fa8:	mov	r3, #0
   14fac:	bl	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14fb0:	mov	r5, r0
   14fb4:	cmp	r0, #0
   14fb8:	beq	15030 <flatcc_builder_end_offset_vector@@Base+0xb0>
   14fbc:	ldr	r0, [r4, #16]
   14fc0:	ldr	r2, [r4, #20]
   14fc4:	mov	r1, #0
   14fc8:	bl	12480 <memset@plt>
   14fcc:	ldr	r0, [r4, #32]
   14fd0:	ldr	r1, [r4, #60]	; 0x3c
   14fd4:	ldr	ip, [r4, #64]	; 0x40
   14fd8:	ldr	r3, [r0, #8]
   14fdc:	str	r3, [r4, #20]
   14fe0:	ldr	r3, [r0]
   14fe4:	str	r3, [r4, #28]
   14fe8:	add	r1, r1, r3
   14fec:	ldr	r2, [r0, #4]
   14ff0:	str	r1, [r4, #16]
   14ff4:	sub	r1, ip, r3
   14ff8:	cmp	r1, r2
   14ffc:	movhi	r1, r2
   15000:	str	r1, [r4, #24]
   15004:	ldrh	r1, [r4, #130]	; 0x82
   15008:	ldrh	r2, [r4, #128]	; 0x80
   1500c:	cmp	r2, r1
   15010:	strhcc	r1, [r4, #128]	; 0x80
   15014:	ldrh	r1, [r0, #12]
   15018:	sub	r0, r0, #36	; 0x24
   1501c:	str	r0, [r4, #32]
   15020:	strh	r1, [r4, #130]	; 0x82
   15024:	ldr	r0, [r4, #156]	; 0x9c
   15028:	sub	r0, r0, #1
   1502c:	str	r0, [r4, #156]	; 0x9c
   15030:	mov	r0, r5
   15034:	pop	{r4, r5, fp, pc}
   15038:	ldr	r0, [pc, #24]	; 15058 <flatcc_builder_end_offset_vector@@Base+0xd8>
   1503c:	ldr	r1, [pc, #24]	; 1505c <flatcc_builder_end_offset_vector@@Base+0xdc>
   15040:	ldr	r3, [pc, #24]	; 15060 <flatcc_builder_end_offset_vector@@Base+0xe0>
   15044:	movw	r2, #1480	; 0x5c8
   15048:	add	r0, pc, r0
   1504c:	add	r1, pc, r1
   15050:	add	r3, pc, r3
   15054:	bl	124b0 <__assert_fail@plt>
   15058:	andeq	r3, r0, r5, ror #18
   1505c:	andeq	r3, r0, lr, lsr #10
   15060:	andeq	r3, r0, ip, lsl #31

00015064 <flatcc_builder_start_string@@Base>:
   15064:	push	{r4, r5, fp, lr}
   15068:	add	fp, sp, #8
   1506c:	mov	r1, #1
   15070:	mov	r4, r0
   15074:	mov	r5, #1
   15078:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   1507c:	mov	r1, r0
   15080:	mvn	r0, #0
   15084:	cmp	r1, #0
   15088:	popne	{r4, r5, fp, pc}
   1508c:	ldr	r0, [r4, #32]
   15090:	mov	r2, #6
   15094:	str	r5, [r0, #16]
   15098:	mov	r0, #0
   1509c:	ldr	r1, [r4, #32]
   150a0:	str	r0, [r1, #20]
   150a4:	ldr	r1, [r4, #32]
   150a8:	strh	r2, [r1, #14]
   150ac:	ldr	r2, [r4, #28]
   150b0:	ldr	r3, [r4, #60]	; 0x3c
   150b4:	ldr	r5, [r4, #64]	; 0x40
   150b8:	add	r3, r3, r2
   150bc:	sub	r2, r5, r2
   150c0:	str	r3, [r4, #16]
   150c4:	mvn	r3, #3
   150c8:	cmn	r2, #4
   150cc:	movcs	r2, r3
   150d0:	str	r2, [r4, #24]
   150d4:	str	r3, [r1, #4]
   150d8:	pop	{r4, r5, fp, pc}

000150dc <flatcc_builder_reserve_table@@Base>:
   150dc:	push	{r4, r5, r6, sl, fp, lr}
   150e0:	add	fp, sp, #16
   150e4:	sub	sp, sp, #8
   150e8:	cmn	r1, #1
   150ec:	ble	151c0 <flatcc_builder_reserve_table@@Base+0xe4>
   150f0:	mov	r4, r0
   150f4:	ldr	r0, [r0, #32]
   150f8:	mov	r5, r1
   150fc:	ldr	r1, [r4, #56]	; 0x38
   15100:	ldrh	r2, [r0, #28]
   15104:	ldr	r0, [r0, #16]
   15108:	add	r6, r0, r2, lsl #1
   1510c:	add	r0, r6, r5, lsl #1
   15110:	add	r2, r0, #4
   15114:	cmp	r2, r1
   15118:	bls	15140 <flatcc_builder_reserve_table@@Base+0x64>
   1511c:	ldr	r0, [r4, #40]	; 0x28
   15120:	ldr	ip, [r4, #48]	; 0x30
   15124:	mov	r3, #0
   15128:	add	r1, r4, #52	; 0x34
   1512c:	str	r3, [sp]
   15130:	mov	r3, #1
   15134:	blx	ip
   15138:	cmp	r0, #0
   1513c:	bne	151e0 <flatcc_builder_reserve_table@@Base+0x104>
   15140:	ldr	r0, [r4, #52]	; 0x34
   15144:	adds	r0, r0, r6
   15148:	str	r0, [r4, #4]
   1514c:	mvneq	r0, #0
   15150:	subeq	sp, fp, #16
   15154:	popeq	{r4, r5, r6, sl, fp, pc}
   15158:	add	r0, r0, #4
   1515c:	lsl	r1, r5, #1
   15160:	str	r0, [r4, #4]
   15164:	ldr	r0, [r4, #32]
   15168:	ldr	r3, [r4, #80]	; 0x50
   1516c:	ldr	r5, [r0, #20]
   15170:	orr	r0, r1, #1
   15174:	add	r2, r5, r0
   15178:	cmp	r2, r3
   1517c:	bls	151a4 <flatcc_builder_reserve_table@@Base+0xc8>
   15180:	ldr	r0, [r4, #40]	; 0x28
   15184:	ldr	r6, [r4, #48]	; 0x30
   15188:	mov	r3, #3
   1518c:	add	r1, r4, #76	; 0x4c
   15190:	str	r3, [sp]
   15194:	mov	r3, #0
   15198:	blx	r6
   1519c:	cmp	r0, #0
   151a0:	bne	151e0 <flatcc_builder_reserve_table@@Base+0x104>
   151a4:	ldr	r0, [r4, #76]	; 0x4c
   151a8:	adds	r0, r0, r5
   151ac:	str	r0, [r4]
   151b0:	mov	r0, #0
   151b4:	mvneq	r0, #0
   151b8:	sub	sp, fp, #16
   151bc:	pop	{r4, r5, r6, sl, fp, pc}
   151c0:	ldr	r0, [pc, #56]	; 15200 <flatcc_builder_reserve_table@@Base+0x124>
   151c4:	ldr	r1, [pc, #56]	; 15204 <flatcc_builder_reserve_table@@Base+0x128>
   151c8:	ldr	r3, [pc, #56]	; 15208 <flatcc_builder_reserve_table@@Base+0x12c>
   151cc:	movw	r2, #1065	; 0x429
   151d0:	add	r0, pc, r0
   151d4:	add	r1, pc, r1
   151d8:	add	r3, pc, r3
   151dc:	bl	124b0 <__assert_fail@plt>
   151e0:	ldr	r0, [pc, #36]	; 1520c <flatcc_builder_reserve_table@@Base+0x130>
   151e4:	ldr	r1, [pc, #36]	; 15210 <flatcc_builder_reserve_table@@Base+0x134>
   151e8:	ldr	r3, [pc, #36]	; 15214 <flatcc_builder_reserve_table@@Base+0x138>
   151ec:	mov	r2, #308	; 0x134
   151f0:	add	r0, pc, r0
   151f4:	add	r1, pc, r1
   151f8:	add	r3, pc, r3
   151fc:	bl	124b0 <__assert_fail@plt>
   15200:	andeq	r3, r0, r4, lsr #22
   15204:	andeq	r3, r0, r6, lsr #7
   15208:	ldrdeq	r3, [r0], -fp
   1520c:	andeq	r4, r0, r7, asr #10
   15210:	andeq	r3, r0, r6, lsl #7
   15214:	andeq	r4, r0, r9, ror r3

00015218 <flatcc_builder_start_table@@Base>:
   15218:	push	{r4, r5, r6, r7, fp, lr}
   1521c:	add	fp, sp, #16
   15220:	sub	sp, sp, #8
   15224:	mov	r6, r1
   15228:	mov	r1, #4
   1522c:	mov	r4, r0
   15230:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   15234:	mvn	r5, #0
   15238:	cmp	r0, #0
   1523c:	beq	1524c <flatcc_builder_start_table@@Base+0x34>
   15240:	mov	r0, r5
   15244:	sub	sp, fp, #16
   15248:	pop	{r4, r5, r6, r7, fp, pc}
   1524c:	mov	r1, r4
   15250:	ldr	r2, [r4, #4]
   15254:	ldr	r3, [r4, #32]
   15258:	ldr	r0, [r1, #52]!	; 0x34
   1525c:	sub	r0, r2, r0
   15260:	str	r0, [r3, #16]
   15264:	ldr	r0, [r4]
   15268:	ldr	r3, [r4, #76]	; 0x4c
   1526c:	ldr	r2, [r4, #32]
   15270:	sub	r0, r0, r3
   15274:	mov	r3, #0
   15278:	str	r0, [r2, #20]
   1527c:	ldr	r0, [r4, #12]
   15280:	ldr	r2, [r4, #32]
   15284:	str	r0, [r2, #24]
   15288:	ldr	r0, [r4, #32]
   1528c:	ldrh	r2, [r4, #8]
   15290:	strh	r2, [r0, #28]
   15294:	movw	r0, #15186	; 0x3b52
   15298:	strh	r3, [r4, #8]
   1529c:	mov	r2, #3
   152a0:	movt	r0, #12137	; 0x2f69
   152a4:	str	r0, [r4, #12]
   152a8:	ldr	r0, [r4, #32]
   152ac:	strh	r2, [r0, #14]
   152b0:	ldrh	r2, [r0, #28]
   152b4:	ldr	r0, [r0, #16]
   152b8:	add	r7, r0, r2, lsl #1
   152bc:	add	r0, r7, r6, lsl #1
   152c0:	add	r2, r0, #4
   152c4:	ldr	r0, [r4, #56]	; 0x38
   152c8:	cmp	r2, r0
   152cc:	bls	152ec <flatcc_builder_start_table@@Base+0xd4>
   152d0:	ldr	r0, [r4, #40]	; 0x28
   152d4:	ldr	ip, [r4, #48]	; 0x30
   152d8:	str	r3, [sp]
   152dc:	mov	r3, #1
   152e0:	blx	ip
   152e4:	cmp	r0, #0
   152e8:	bne	15390 <flatcc_builder_start_table@@Base+0x178>
   152ec:	ldr	r0, [r4, #52]	; 0x34
   152f0:	adds	r0, r0, r7
   152f4:	str	r0, [r4, #4]
   152f8:	beq	15240 <flatcc_builder_start_table@@Base+0x28>
   152fc:	add	r0, r0, #4
   15300:	lsl	r1, r6, #1
   15304:	str	r0, [r4, #4]
   15308:	ldr	r0, [r4, #32]
   1530c:	ldr	r3, [r4, #80]	; 0x50
   15310:	ldr	r6, [r0, #20]
   15314:	orr	r0, r1, #1
   15318:	add	r2, r6, r0
   1531c:	cmp	r2, r3
   15320:	bls	15348 <flatcc_builder_start_table@@Base+0x130>
   15324:	ldr	r0, [r4, #40]	; 0x28
   15328:	ldr	r7, [r4, #48]	; 0x30
   1532c:	mov	r3, #3
   15330:	add	r1, r4, #76	; 0x4c
   15334:	str	r3, [sp]
   15338:	mov	r3, #0
   1533c:	blx	r7
   15340:	cmp	r0, #0
   15344:	bne	15390 <flatcc_builder_start_table@@Base+0x178>
   15348:	ldr	r0, [r4, #76]	; 0x4c
   1534c:	adds	r0, r0, r6
   15350:	str	r0, [r4]
   15354:	beq	15240 <flatcc_builder_start_table@@Base+0x28>
   15358:	ldr	r0, [r4, #28]
   1535c:	ldr	r2, [r4, #60]	; 0x3c
   15360:	ldr	r3, [r4, #64]	; 0x40
   15364:	ldr	r1, [r4, #32]
   15368:	mov	r5, #0
   1536c:	add	r2, r2, r0
   15370:	sub	r0, r3, r0
   15374:	str	r2, [r4, #16]
   15378:	movw	r2, #65532	; 0xfffc
   1537c:	cmp	r0, r2
   15380:	movcs	r0, r2
   15384:	str	r0, [r4, #24]
   15388:	str	r2, [r1, #4]
   1538c:	b	15240 <flatcc_builder_start_table@@Base+0x28>
   15390:	ldr	r0, [pc, #24]	; 153b0 <flatcc_builder_start_table@@Base+0x198>
   15394:	ldr	r1, [pc, #24]	; 153b4 <flatcc_builder_start_table@@Base+0x19c>
   15398:	ldr	r3, [pc, #24]	; 153b8 <flatcc_builder_start_table@@Base+0x1a0>
   1539c:	mov	r2, #308	; 0x134
   153a0:	add	r0, pc, r0
   153a4:	add	r1, pc, r1
   153a8:	add	r3, pc, r3
   153ac:	bl	124b0 <__assert_fail@plt>
   153b0:	muleq	r0, r7, r3
   153b4:	ldrdeq	r3, [r0], -r6
   153b8:	andeq	r4, r0, r9, asr #3

000153bc <flatcc_builder_create_vtable@@Base>:
   153bc:	push	{r4, r5, fp, lr}
   153c0:	add	fp, sp, #8
   153c4:	sub	sp, sp, #80	; 0x50
   153c8:	mov	r3, r2
   153cc:	mov	r2, #0
   153d0:	mov	r4, r0
   153d4:	cmp	r3, #0
   153d8:	str	r2, [sp, #12]
   153dc:	str	r2, [sp, #8]
   153e0:	movne	r2, #1
   153e4:	strne	r1, [sp, #16]
   153e8:	strne	r3, [sp, #8]
   153ec:	strne	r3, [sp, #20]
   153f0:	strne	r2, [sp, #12]
   153f4:	ldr	r0, [r4, #152]	; 0x98
   153f8:	cmp	r0, #0
   153fc:	bne	1540c <flatcc_builder_create_vtable@@Base+0x50>
   15400:	ldr	r0, [r4, #180]	; 0xb4
   15404:	cmp	r0, #0
   15408:	beq	15458 <flatcc_builder_create_vtable@@Base+0x9c>
   1540c:	cmp	r3, #0
   15410:	beq	1549c <flatcc_builder_create_vtable@@Base+0xe0>
   15414:	ldr	r0, [r4, #136]	; 0x88
   15418:	ldr	ip, [r4, #44]	; 0x2c
   1541c:	add	r1, sp, #8
   15420:	add	r1, r1, #8
   15424:	sub	r5, r0, r3
   15428:	ldr	r0, [r4, #36]	; 0x24
   1542c:	str	r3, [sp]
   15430:	mov	r3, r5
   15434:	blx	ip
   15438:	cmp	r0, #0
   1543c:	bne	154bc <flatcc_builder_create_vtable@@Base+0x100>
   15440:	cmp	r5, #0
   15444:	str	r5, [r4, #136]	; 0x88
   15448:	beq	15490 <flatcc_builder_create_vtable@@Base+0xd4>
   1544c:	add	r0, r5, #1
   15450:	sub	sp, fp, #8
   15454:	pop	{r4, r5, fp, pc}
   15458:	ldr	r5, [r4, #140]	; 0x8c
   1545c:	ldr	r0, [r4, #36]	; 0x24
   15460:	ldr	ip, [r4, #44]	; 0x2c
   15464:	add	r1, r5, r3
   15468:	str	r1, [r4, #140]	; 0x8c
   1546c:	add	r1, sp, #8
   15470:	str	r3, [sp]
   15474:	mov	r3, r5
   15478:	add	r1, r1, #8
   1547c:	blx	ip
   15480:	cmp	r0, #0
   15484:	bne	154dc <flatcc_builder_create_vtable@@Base+0x120>
   15488:	adds	r0, r5, #1
   1548c:	bne	15450 <flatcc_builder_create_vtable@@Base+0x94>
   15490:	mov	r0, #0
   15494:	sub	sp, fp, #8
   15498:	pop	{r4, r5, fp, pc}
   1549c:	ldr	r0, [pc, #100]	; 15508 <flatcc_builder_create_vtable@@Base+0x14c>
   154a0:	ldr	r1, [pc, #100]	; 1550c <flatcc_builder_create_vtable@@Base+0x150>
   154a4:	ldr	r3, [pc, #100]	; 15510 <flatcc_builder_create_vtable@@Base+0x154>
   154a8:	movw	r2, #647	; 0x287
   154ac:	add	r0, pc, r0
   154b0:	add	r1, pc, r1
   154b4:	add	r3, pc, r3
   154b8:	bl	124b0 <__assert_fail@plt>
   154bc:	ldr	r0, [pc, #80]	; 15514 <flatcc_builder_create_vtable@@Base+0x158>
   154c0:	ldr	r1, [pc, #80]	; 15518 <flatcc_builder_create_vtable@@Base+0x15c>
   154c4:	ldr	r3, [pc, #80]	; 1551c <flatcc_builder_create_vtable@@Base+0x160>
   154c8:	movw	r2, #651	; 0x28b
   154cc:	add	r0, pc, r0
   154d0:	add	r1, pc, r1
   154d4:	add	r3, pc, r3
   154d8:	bl	124b0 <__assert_fail@plt>
   154dc:	ldr	r0, [pc, #24]	; 154fc <flatcc_builder_create_vtable@@Base+0x140>
   154e0:	ldr	r1, [pc, #24]	; 15500 <flatcc_builder_create_vtable@@Base+0x144>
   154e4:	ldr	r3, [pc, #24]	; 15504 <flatcc_builder_create_vtable@@Base+0x148>
   154e8:	movw	r2, #677	; 0x2a5
   154ec:	add	r0, pc, r0
   154f0:	add	r1, pc, r1
   154f4:	add	r3, pc, r3
   154f8:	bl	124b0 <__assert_fail@plt>
   154fc:	andeq	r4, r0, fp, asr #4
   15500:	andeq	r3, r0, sl, lsl #1
   15504:			; <UNDEFINED> instruction: 0x000041be
   15508:	andeq	r4, r0, fp, lsl #5
   1550c:	andeq	r3, r0, sl, asr #1
   15510:	andeq	r4, r0, r2, asr #2
   15514:	andeq	r4, r0, fp, ror #4
   15518:	andeq	r3, r0, sl, lsr #1
   1551c:	andeq	r4, r0, r2, lsr #2

00015520 <flatcc_builder_create_cached_vtable@@Base>:
   15520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15524:	add	fp, sp, #28
   15528:	sub	sp, sp, #20
   1552c:	mov	sl, r0
   15530:	ldr	r0, [r0, #116]	; 0x74
   15534:	mov	r8, r3
   15538:	mov	r5, r2
   1553c:	str	r1, [sp, #16]
   15540:	cmp	r0, #0
   15544:	beq	155e8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15548:	ldr	r1, [sl, #92]	; 0x5c
   1554c:	rsb	r0, r0, #32
   15550:	lsr	r0, r8, r0
   15554:	add	r6, r1, r0, lsl #2
   15558:	cmp	r6, #0
   1555c:	beq	156ac <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15560:	ldr	r7, [r6]
   15564:	str	r6, [sp, #12]
   15568:	cmp	r7, #0
   1556c:	beq	156b4 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15570:	ldr	r4, [sl, #68]	; 0x44
   15574:	ldr	r8, [sl, #100]	; 0x64
   15578:	mov	r0, #0
   1557c:	str	r0, [sp, #8]
   15580:	add	r9, r8, r7
   15584:	mov	r1, r4
   15588:	ldr	r0, [r9, #8]
   1558c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15590:	cmp	r0, r5
   15594:	bne	155ac <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15598:	ldr	r0, [sp, #16]
   1559c:	mov	r2, r5
   155a0:	bl	12408 <memcmp@plt>
   155a4:	cmp	r0, #0
   155a8:	beq	155c0 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   155ac:	ldr	r7, [r9, #12]!
   155b0:	cmp	r7, #0
   155b4:	mov	r6, r9
   155b8:	bne	15580 <flatcc_builder_create_cached_vtable@@Base+0x60>
   155bc:	b	156a4 <flatcc_builder_create_cached_vtable@@Base+0x184>
   155c0:	ldr	r0, [sl, #152]	; 0x98
   155c4:	ldr	r1, [r9, #4]
   155c8:	cmp	r1, r0
   155cc:	beq	15818 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   155d0:	mov	r6, r9
   155d4:	mov	r0, r9
   155d8:	ldr	r7, [r6, #12]!
   155dc:	cmp	r7, #0
   155e0:	bne	1557c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   155e4:	b	156b8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   155e8:	ldr	r0, [sl, #124]	; 0x7c
   155ec:	cmp	r0, #0
   155f0:	bne	15864 <flatcc_builder_create_cached_vtable@@Base+0x344>
   155f4:	ldr	r0, [sl, #104]	; 0x68
   155f8:	add	r7, sl, #100	; 0x64
   155fc:	cmp	r0, #15
   15600:	bhi	1562c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15604:	ldr	r0, [sl, #40]	; 0x28
   15608:	ldr	r6, [sl, #48]	; 0x30
   1560c:	mov	r1, #6
   15610:	mov	r2, #16
   15614:	mov	r3, #0
   15618:	str	r1, [sp]
   1561c:	mov	r1, r7
   15620:	blx	r6
   15624:	cmp	r0, #0
   15628:	bne	15844 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1562c:	ldr	r0, [r7]
   15630:	mov	r7, #0
   15634:	cmp	r0, #0
   15638:	beq	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1563c:	mov	r0, #16
   15640:	mov	r2, #5
   15644:	add	r1, sl, #92	; 0x5c
   15648:	mov	r3, #1
   1564c:	mov	r4, #256	; 0x100
   15650:	str	r0, [sl, #124]	; 0x7c
   15654:	ldr	r0, [sl, #40]	; 0x28
   15658:	ldr	r6, [sl, #48]	; 0x30
   1565c:	str	r2, [sp]
   15660:	mov	r2, #256	; 0x100
   15664:	blx	r6
   15668:	cmp	r0, #0
   1566c:	bne	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15670:	ldr	r0, [sl, #96]	; 0x60
   15674:	mov	r1, r4
   15678:	lsl	r4, r4, #1
   1567c:	cmp	r0, r1, lsl #1
   15680:	bcs	15674 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15684:	lsr	r1, r1, #2
   15688:	mvn	r0, #0
   1568c:	mov	r2, #1
   15690:	add	r0, r0, #1
   15694:	cmp	r1, r2, lsl r0
   15698:	bhi	15690 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1569c:	str	r0, [sl, #116]	; 0x74
   156a0:	b	15548 <flatcc_builder_create_cached_vtable@@Base+0x28>
   156a4:	ldr	r9, [sp, #8]
   156a8:	b	156b8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   156ac:	mov	r7, #0
   156b0:	b	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   156b4:	mov	r9, #0
   156b8:	ldr	r4, [sl, #124]	; 0x7c
   156bc:	ldr	r0, [sl, #104]	; 0x68
   156c0:	add	r7, sl, #100	; 0x64
   156c4:	add	r2, r4, #16
   156c8:	cmp	r2, r0
   156cc:	bls	156f4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   156d0:	ldr	r0, [sl, #40]	; 0x28
   156d4:	ldr	r6, [sl, #48]	; 0x30
   156d8:	mov	r1, #6
   156dc:	mov	r3, #0
   156e0:	str	r1, [sp]
   156e4:	mov	r1, r7
   156e8:	blx	r6
   156ec:	cmp	r0, #0
   156f0:	bne	15844 <flatcc_builder_create_cached_vtable@@Base+0x324>
   156f4:	ldr	r0, [r7]
   156f8:	mov	r7, #0
   156fc:	adds	r4, r0, r4
   15700:	beq	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15704:	ldr	r0, [sl, #124]	; 0x7c
   15708:	ldr	r1, [sl, #152]	; 0x98
   1570c:	add	r2, r0, #16
   15710:	str	r2, [sl, #124]	; 0x7c
   15714:	ldr	r2, [sp, #12]
   15718:	str	r1, [r4, #4]
   1571c:	ldr	r1, [r2]
   15720:	str	r1, [r4, #12]
   15724:	ldr	r1, [sp, #16]
   15728:	str	r0, [r2]
   1572c:	mov	r0, sl
   15730:	mov	r2, r5
   15734:	bl	153bc <flatcc_builder_create_vtable@@Base>
   15738:	cmp	r0, #0
   1573c:	str	r0, [r4]
   15740:	beq	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15744:	cmp	r9, #0
   15748:	beq	15764 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1574c:	ldr	r0, [r9, #8]
   15750:	str	r0, [r4, #8]
   15754:	ldr	r7, [r4]
   15758:	mov	r0, r7
   1575c:	sub	sp, fp, #28
   15760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15764:	ldr	r6, [sl, #120]	; 0x78
   15768:	ldr	r0, [sl, #172]	; 0xac
   1576c:	add	r2, r6, r5
   15770:	cmp	r0, #0
   15774:	beq	157b0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15778:	cmp	r0, r2
   1577c:	bcs	157b0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15780:	ldr	r0, [sl, #116]	; 0x74
   15784:	cmp	r0, #0
   15788:	beq	15754 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1578c:	ldr	r0, [sl, #92]	; 0x5c
   15790:	ldr	r2, [sl, #96]	; 0x60
   15794:	mov	r1, #0
   15798:	mov	r5, #0
   1579c:	bl	12480 <memset@plt>
   157a0:	mov	r0, #16
   157a4:	str	r5, [sl, #120]	; 0x78
   157a8:	str	r0, [sl, #124]	; 0x7c
   157ac:	b	15754 <flatcc_builder_create_cached_vtable@@Base+0x234>
   157b0:	ldr	r0, [sl, #72]	; 0x48
   157b4:	add	r7, sl, #68	; 0x44
   157b8:	cmp	r2, r0
   157bc:	bls	157e4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   157c0:	ldr	r0, [sl, #40]	; 0x28
   157c4:	ldr	ip, [sl, #48]	; 0x30
   157c8:	mov	r1, #2
   157cc:	mov	r3, #0
   157d0:	str	r1, [sp]
   157d4:	mov	r1, r7
   157d8:	blx	ip
   157dc:	cmp	r0, #0
   157e0:	bne	15844 <flatcc_builder_create_cached_vtable@@Base+0x324>
   157e4:	ldr	r0, [r7]
   157e8:	adds	r0, r0, r6
   157ec:	beq	15810 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   157f0:	ldr	r1, [sl, #120]	; 0x78
   157f4:	mov	r2, r5
   157f8:	str	r1, [r4, #8]
   157fc:	add	r1, r1, r5
   15800:	str	r1, [sl, #120]	; 0x78
   15804:	ldr	r1, [sp, #16]
   15808:	bl	123fc <memcpy@plt>
   1580c:	b	15754 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15810:	mvn	r7, #0
   15814:	b	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15818:	ldr	r0, [sp, #12]
   1581c:	cmp	r6, r0
   15820:	beq	1583c <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15824:	mov	r1, r0
   15828:	ldr	r0, [r9, #12]
   1582c:	str	r0, [r6]
   15830:	ldr	r0, [r1]
   15834:	str	r0, [r9, #12]
   15838:	str	r7, [r1]
   1583c:	ldr	r7, [r9]
   15840:	b	15758 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15844:	ldr	r0, [pc, #68]	; 15890 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15848:	ldr	r1, [pc, #68]	; 15894 <flatcc_builder_create_cached_vtable@@Base+0x374>
   1584c:	ldr	r3, [pc, #68]	; 15898 <flatcc_builder_create_cached_vtable@@Base+0x378>
   15850:	mov	r2, #308	; 0x134
   15854:	add	r0, pc, r0
   15858:	add	r1, pc, r1
   1585c:	add	r3, pc, r3
   15860:	bl	124b0 <__assert_fail@plt>
   15864:	ldr	r0, [pc, #24]	; 15884 <flatcc_builder_create_cached_vtable@@Base+0x364>
   15868:	ldr	r1, [pc, #24]	; 15888 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1586c:	ldr	r3, [pc, #24]	; 1588c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15870:	movw	r2, #342	; 0x156
   15874:	add	r0, pc, r0
   15878:	add	r1, pc, r1
   1587c:	add	r3, pc, r3
   15880:	bl	124b0 <__assert_fail@plt>
   15884:	andeq	r3, r0, r7, lsl #29
   15888:	andeq	r2, r0, r2, lsl #26
   1588c:	andeq	r3, r0, lr, lsl #29
   15890:	andeq	r3, r0, r3, ror #29
   15894:	andeq	r2, r0, r2, lsr #26
   15898:	andeq	r3, r0, r5, lsl sp

0001589c <flatcc_builder_create_table@@Base>:
   1589c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158a0:	add	fp, sp, #24
   158a4:	sub	sp, sp, #80	; 0x50
   158a8:	ldr	r5, [fp, #12]
   158ac:	cmn	r5, #1
   158b0:	ble	15a04 <flatcc_builder_create_table@@Base+0x168>
   158b4:	ldr	ip, [fp, #16]
   158b8:	tst	ip, #1
   158bc:	beq	15a24 <flatcc_builder_create_table@@Base+0x188>
   158c0:	mov	r8, r0
   158c4:	ldrh	r0, [r0, #128]	; 0x80
   158c8:	cmp	r3, #4
   158cc:	movls	r3, #4
   158d0:	cmp	r0, r3
   158d4:	strhcc	r3, [r8, #128]	; 0x80
   158d8:	sub	r3, r3, #1
   158dc:	cmp	r5, #1
   158e0:	ldr	r4, [r8, #136]	; 0x88
   158e4:	sub	r0, r4, r2
   158e8:	and	r0, r0, r3
   158ec:	add	r3, ip, r0
   158f0:	mvn	ip, #3
   158f4:	sub	r6, ip, r2
   158f8:	add	r4, r6, r4
   158fc:	add	r6, r4, #1
   15900:	sub	r3, r6, r3
   15904:	str	r3, [fp, #-28]	; 0xffffffe4
   15908:	blt	15934 <flatcc_builder_create_table@@Base+0x98>
   1590c:	ldr	r3, [fp, #8]
   15910:	sub	r6, r4, r0
   15914:	sub	r4, ip, r6
   15918:	ldrh	r6, [r3], #2
   1591c:	subs	r5, r5, #1
   15920:	ldr	r7, [r6, r1]
   15924:	add	r7, r4, r7
   15928:	sub	r7, r7, r6
   1592c:	str	r7, [r6, r1]
   15930:	bne	15918 <flatcc_builder_create_table@@Base+0x7c>
   15934:	sub	r3, fp, #28
   15938:	mov	r4, #4
   1593c:	cmp	r2, #0
   15940:	str	r3, [sp, #12]
   15944:	mov	r3, #1
   15948:	str	r4, [sp, #4]
   1594c:	str	r4, [sp, #16]
   15950:	str	r3, [sp, #8]
   15954:	beq	15970 <flatcc_builder_create_table@@Base+0xd4>
   15958:	mov	r3, #2
   1595c:	add	r4, r2, #4
   15960:	str	r1, [sp, #20]
   15964:	str	r2, [sp, #24]
   15968:	str	r3, [sp, #8]
   1596c:	str	r4, [sp, #4]
   15970:	cmp	r0, #0
   15974:	beq	159a0 <flatcc_builder_create_table@@Base+0x104>
   15978:	add	r4, r4, r0
   1597c:	add	r1, sp, #4
   15980:	str	r4, [sp, #4]
   15984:	add	r1, r1, r3, lsl #3
   15988:	add	r3, r3, #1
   1598c:	ldr	r2, [pc, #208]	; 15a64 <flatcc_builder_create_table@@Base+0x1c8>
   15990:	ldr	r2, [pc, r2]
   15994:	str	r2, [r1, #8]
   15998:	str	r0, [r1, #12]
   1599c:	str	r3, [sp, #8]
   159a0:	cmp	r4, #0
   159a4:	ble	15a44 <flatcc_builder_create_table@@Base+0x1a8>
   159a8:	ldr	r0, [r8, #136]	; 0x88
   159ac:	ldr	r7, [r8, #44]	; 0x2c
   159b0:	add	r1, sp, #4
   159b4:	mov	r2, r3
   159b8:	add	r1, r1, #8
   159bc:	sub	r5, r0, r4
   159c0:	ldr	r0, [r8, #36]	; 0x24
   159c4:	str	r4, [sp]
   159c8:	mov	r3, r5
   159cc:	blx	r7
   159d0:	cmp	r0, #0
   159d4:	streq	r5, [r8, #136]	; 0x88
   159d8:	moveq	r0, r5
   159dc:	subeq	sp, fp, #24
   159e0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   159e4:	ldr	r0, [pc, #160]	; 15a8c <flatcc_builder_create_table@@Base+0x1f0>
   159e8:	ldr	r1, [pc, #160]	; 15a90 <flatcc_builder_create_table@@Base+0x1f4>
   159ec:	ldr	r3, [pc, #160]	; 15a94 <flatcc_builder_create_table@@Base+0x1f8>
   159f0:	movw	r2, #651	; 0x28b
   159f4:	add	r0, pc, r0
   159f8:	add	r1, pc, r1
   159fc:	add	r3, pc, r3
   15a00:	bl	124b0 <__assert_fail@plt>
   15a04:	ldr	r0, [pc, #92]	; 15a68 <flatcc_builder_create_table@@Base+0x1cc>
   15a08:	ldr	r1, [pc, #92]	; 15a6c <flatcc_builder_create_table@@Base+0x1d0>
   15a0c:	ldr	r3, [pc, #92]	; 15a70 <flatcc_builder_create_table@@Base+0x1d4>
   15a10:	movw	r2, #1237	; 0x4d5
   15a14:	add	r0, pc, r0
   15a18:	add	r1, pc, r1
   15a1c:	add	r3, pc, r3
   15a20:	bl	124b0 <__assert_fail@plt>
   15a24:	ldr	r0, [pc, #72]	; 15a74 <flatcc_builder_create_table@@Base+0x1d8>
   15a28:	ldr	r1, [pc, #72]	; 15a78 <flatcc_builder_create_table@@Base+0x1dc>
   15a2c:	ldr	r3, [pc, #72]	; 15a7c <flatcc_builder_create_table@@Base+0x1e0>
   15a30:	movw	r2, #1243	; 0x4db
   15a34:	add	r0, pc, r0
   15a38:	add	r1, pc, r1
   15a3c:	add	r3, pc, r3
   15a40:	bl	124b0 <__assert_fail@plt>
   15a44:	ldr	r0, [pc, #52]	; 15a80 <flatcc_builder_create_table@@Base+0x1e4>
   15a48:	ldr	r1, [pc, #52]	; 15a84 <flatcc_builder_create_table@@Base+0x1e8>
   15a4c:	ldr	r3, [pc, #52]	; 15a88 <flatcc_builder_create_table@@Base+0x1ec>
   15a50:	movw	r2, #647	; 0x287
   15a54:	add	r0, pc, r0
   15a58:	add	r1, pc, r1
   15a5c:	add	r3, pc, r3
   15a60:	bl	124b0 <__assert_fail@plt>
   15a64:			; <UNDEFINED> instruction: 0x000146bc
   15a68:	ldrdeq	r3, [r0], -r9
   15a6c:	andeq	r2, r0, r2, ror #22
   15a70:	andeq	r3, r0, r3, ror #5
   15a74:	andeq	r3, r0, r7, ror #6
   15a78:	andeq	r2, r0, r2, asr #22
   15a7c:	andeq	r3, r0, r3, asr #5
   15a80:	andeq	r3, r0, r3, ror #25
   15a84:	andeq	r2, r0, r2, lsr #22
   15a88:	muleq	r0, sl, fp
   15a8c:	andeq	r3, r0, r3, asr #26
   15a90:	andeq	r2, r0, r2, lsl #23
   15a94:	strdeq	r3, [r0], -sl

00015a98 <flatcc_builder_check_required_field@@Base>:
   15a98:	ldr	r2, [r0, #32]
   15a9c:	ldrh	r2, [r2, #14]
   15aa0:	cmp	r2, #3
   15aa4:	bne	15ad4 <flatcc_builder_check_required_field@@Base+0x3c>
   15aa8:	ldrh	r3, [r0, #8]
   15aac:	mov	r2, #0
   15ab0:	cmp	r3, r1
   15ab4:	bls	15acc <flatcc_builder_check_required_field@@Base+0x34>
   15ab8:	ldr	r0, [r0, #4]
   15abc:	add	r0, r0, r1, lsl #1
   15ac0:	ldrh	r2, [r0]
   15ac4:	cmp	r2, #0
   15ac8:	movwne	r2, #1
   15acc:	mov	r0, r2
   15ad0:	bx	lr
   15ad4:	push	{fp, lr}
   15ad8:	mov	fp, sp
   15adc:	ldr	r0, [pc, #24]	; 15afc <flatcc_builder_check_required_field@@Base+0x64>
   15ae0:	ldr	r1, [pc, #24]	; 15b00 <flatcc_builder_check_required_field@@Base+0x68>
   15ae4:	ldr	r3, [pc, #24]	; 15b04 <flatcc_builder_check_required_field@@Base+0x6c>
   15ae8:	movw	r2, #1272	; 0x4f8
   15aec:	add	r0, pc, r0
   15af0:	add	r1, pc, r1
   15af4:	add	r3, pc, r3
   15af8:	bl	124b0 <__assert_fail@plt>
   15afc:			; <UNDEFINED> instruction: 0x000032ba
   15b00:	andeq	r2, r0, sl, lsl #21
   15b04:	ldrdeq	r3, [r0], -sp

00015b08 <flatcc_builder_check_union_field@@Base>:
   15b08:	mov	r2, r0
   15b0c:	ldr	r0, [r0, #32]
   15b10:	ldrh	r0, [r0, #14]
   15b14:	cmp	r0, #3
   15b18:	bne	15b78 <flatcc_builder_check_union_field@@Base+0x70>
   15b1c:	cmp	r1, #0
   15b20:	mov	r0, #0
   15b24:	ldrhne	r3, [r2, #8]
   15b28:	cmpne	r3, r1
   15b2c:	bhi	15b34 <flatcc_builder_check_union_field@@Base+0x2c>
   15b30:	bx	lr
   15b34:	ldr	r0, [r2, #4]
   15b38:	add	r0, r0, r1, lsl #1
   15b3c:	ldrh	r1, [r0, #-2]
   15b40:	cmp	r1, #0
   15b44:	beq	15b68 <flatcc_builder_check_union_field@@Base+0x60>
   15b48:	ldr	r2, [r2, #16]
   15b4c:	ldrh	r0, [r0]
   15b50:	ldrb	r1, [r2, r1]
   15b54:	cmp	r1, #0
   15b58:	beq	15b6c <flatcc_builder_check_union_field@@Base+0x64>
   15b5c:	cmp	r0, #0
   15b60:	movwne	r0, #1
   15b64:	bx	lr
   15b68:	ldrh	r0, [r0]
   15b6c:	clz	r0, r0
   15b70:	lsr	r0, r0, #5
   15b74:	bx	lr
   15b78:	push	{fp, lr}
   15b7c:	mov	fp, sp
   15b80:	ldr	r0, [pc, #24]	; 15ba0 <flatcc_builder_check_union_field@@Base+0x98>
   15b84:	ldr	r1, [pc, #24]	; 15ba4 <flatcc_builder_check_union_field@@Base+0x9c>
   15b88:	ldr	r3, [pc, #24]	; 15ba8 <flatcc_builder_check_union_field@@Base+0xa0>
   15b8c:	movw	r2, #1279	; 0x4ff
   15b90:	add	r0, pc, r0
   15b94:	add	r1, pc, r1
   15b98:	add	r3, pc, r3
   15b9c:	bl	124b0 <__assert_fail@plt>
   15ba0:	andeq	r3, r0, r6, lsl r2
   15ba4:	andeq	r2, r0, r6, ror #19
   15ba8:	andeq	r3, r0, ip, lsl #5

00015bac <flatcc_builder_check_required@@Base>:
   15bac:	push	{fp, lr}
   15bb0:	mov	fp, sp
   15bb4:	mov	r3, r0
   15bb8:	ldr	r0, [r0, #32]
   15bbc:	ldrh	r0, [r0, #14]
   15bc0:	cmp	r0, #3
   15bc4:	bne	15c1c <flatcc_builder_check_required@@Base+0x70>
   15bc8:	ldrh	ip, [r3, #8]
   15bcc:	mov	r0, #0
   15bd0:	cmp	ip, r2
   15bd4:	movge	r0, #1
   15bd8:	cmpge	r2, #1
   15bdc:	bge	15be4 <flatcc_builder_check_required@@Base+0x38>
   15be0:	pop	{fp, pc}
   15be4:	ldr	ip, [r3, #4]
   15be8:	mov	lr, #0
   15bec:	b	15c00 <flatcc_builder_check_required@@Base+0x54>
   15bf0:	add	lr, lr, #1
   15bf4:	add	r1, r1, #2
   15bf8:	cmp	lr, r2
   15bfc:	popge	{fp, pc}
   15c00:	ldrh	r3, [r1]
   15c04:	add	r3, ip, r3, lsl #1
   15c08:	ldrh	r3, [r3]
   15c0c:	cmp	r3, #0
   15c10:	bne	15bf0 <flatcc_builder_check_required@@Base+0x44>
   15c14:	mov	r0, #0
   15c18:	pop	{fp, pc}
   15c1c:	ldr	r0, [pc, #24]	; 15c3c <flatcc_builder_check_required@@Base+0x90>
   15c20:	ldr	r1, [pc, #24]	; 15c40 <flatcc_builder_check_required@@Base+0x94>
   15c24:	ldr	r3, [pc, #24]	; 15c44 <flatcc_builder_check_required@@Base+0x98>
   15c28:	movw	r2, #1297	; 0x511
   15c2c:	add	r0, pc, r0
   15c30:	add	r1, pc, r1
   15c34:	add	r3, pc, r3
   15c38:	bl	124b0 <__assert_fail@plt>
   15c3c:	andeq	r3, r0, sl, ror r1
   15c40:	andeq	r2, r0, sl, asr #18
   15c44:	andeq	r3, r0, r0, asr #4

00015c48 <flatcc_builder_end_table@@Base>:
   15c48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c4c:	add	fp, sp, #24
   15c50:	sub	sp, sp, #16
   15c54:	mov	r4, r0
   15c58:	ldr	r0, [r0, #32]
   15c5c:	ldrh	r0, [r0, #14]
   15c60:	cmp	r0, #3
   15c64:	bne	15de0 <flatcc_builder_end_table@@Base+0x198>
   15c68:	ldrh	r0, [r4, #8]
   15c6c:	ldr	r5, [r4, #4]
   15c70:	mov	r1, #4
   15c74:	movw	r2, #31153	; 0x79b1
   15c78:	movt	r2, #40503	; 0x9e37
   15c7c:	add	r0, r1, r0, lsl #1
   15c80:	strh	r0, [r5, #-4]!
   15c84:	ldrh	r1, [r4, #20]
   15c88:	uxth	r6, r0
   15c8c:	add	r1, r1, #4
   15c90:	strh	r1, [r5, #2]
   15c94:	uxth	r1, r1
   15c98:	ldr	r0, [r4, #12]
   15c9c:	eor	r0, r0, r6
   15ca0:	mul	r0, r0, r2
   15ca4:	eor	r0, r0, r1
   15ca8:	mov	r1, r5
   15cac:	mul	r3, r0, r2
   15cb0:	mov	r0, r4
   15cb4:	mov	r2, r6
   15cb8:	str	r3, [r4, #12]
   15cbc:	bl	15520 <flatcc_builder_create_cached_vtable@@Base>
   15cc0:	cmp	r0, #0
   15cc4:	beq	15dd0 <flatcc_builder_end_table@@Base+0x188>
   15cc8:	mov	r7, r0
   15ccc:	mov	r0, r5
   15cd0:	mov	r1, #0
   15cd4:	mov	r2, r6
   15cd8:	mov	r8, #0
   15cdc:	bl	12480 <memset@plt>
   15ce0:	ldr	r5, [r4, #32]
   15ce4:	ldr	r0, [r4, #76]	; 0x4c
   15ce8:	ldr	r6, [r4]
   15cec:	ldrh	r3, [r4, #130]	; 0x82
   15cf0:	ldr	r1, [r4, #16]
   15cf4:	ldr	r2, [r4, #20]
   15cf8:	ldr	r5, [r5, #20]
   15cfc:	add	r0, r0, r5
   15d00:	sub	r6, r6, r0
   15d04:	asr	r6, r6, #1
   15d08:	stm	sp, {r0, r6, r7}
   15d0c:	mov	r0, r4
   15d10:	bl	1589c <flatcc_builder_create_table@@Base>
   15d14:	cmp	r0, #0
   15d18:	beq	15dd4 <flatcc_builder_end_table@@Base+0x18c>
   15d1c:	ldr	r1, [r4, #32]
   15d20:	mov	r5, r0
   15d24:	ldr	r0, [r4, #16]
   15d28:	ldr	r2, [r4, #20]
   15d2c:	ldr	r3, [r4, #52]	; 0x34
   15d30:	ldr	r7, [r1, #24]
   15d34:	str	r7, [r4, #12]
   15d38:	ldrh	r7, [r1, #28]
   15d3c:	strh	r7, [r4, #8]
   15d40:	ldr	r7, [r1, #16]
   15d44:	add	r3, r3, r7
   15d48:	str	r3, [r4, #4]
   15d4c:	ldr	r3, [r4, #76]	; 0x4c
   15d50:	ldr	r1, [r1, #20]
   15d54:	add	r1, r3, r1
   15d58:	str	r1, [r4]
   15d5c:	mov	r1, #0
   15d60:	bl	12480 <memset@plt>
   15d64:	ldr	r0, [r4, #32]
   15d68:	ldr	r1, [r4, #60]	; 0x3c
   15d6c:	ldr	r2, [r4, #64]	; 0x40
   15d70:	mov	r8, r5
   15d74:	ldr	r3, [r0, #8]
   15d78:	str	r3, [r4, #20]
   15d7c:	ldr	r3, [r0]
   15d80:	str	r3, [r4, #28]
   15d84:	add	r1, r1, r3
   15d88:	ldr	r7, [r0, #4]
   15d8c:	str	r1, [r4, #16]
   15d90:	sub	r1, r2, r3
   15d94:	cmp	r1, r7
   15d98:	movhi	r1, r7
   15d9c:	str	r1, [r4, #24]
   15da0:	ldrh	r1, [r4, #130]	; 0x82
   15da4:	ldrh	r2, [r4, #128]	; 0x80
   15da8:	cmp	r2, r1
   15dac:	strhcc	r1, [r4, #128]	; 0x80
   15db0:	ldrh	r1, [r0, #12]
   15db4:	sub	r0, r0, #36	; 0x24
   15db8:	str	r0, [r4, #32]
   15dbc:	strh	r1, [r4, #130]	; 0x82
   15dc0:	ldr	r0, [r4, #156]	; 0x9c
   15dc4:	sub	r0, r0, #1
   15dc8:	str	r0, [r4, #156]	; 0x9c
   15dcc:	b	15dd4 <flatcc_builder_end_table@@Base+0x18c>
   15dd0:	mov	r8, #0
   15dd4:	mov	r0, r8
   15dd8:	sub	sp, fp, #24
   15ddc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15de0:	ldr	r0, [pc, #24]	; 15e00 <flatcc_builder_end_table@@Base+0x1b8>
   15de4:	ldr	r1, [pc, #24]	; 15e04 <flatcc_builder_end_table@@Base+0x1bc>
   15de8:	ldr	r3, [pc, #24]	; 15e08 <flatcc_builder_end_table@@Base+0x1c0>
   15dec:	movw	r2, #1317	; 0x525
   15df0:	add	r0, pc, r0
   15df4:	add	r1, pc, r1
   15df8:	add	r3, pc, r3
   15dfc:	bl	124b0 <__assert_fail@plt>
   15e00:			; <UNDEFINED> instruction: 0x00002fb6
   15e04:	andeq	r2, r0, r6, lsl #15
   15e08:	ldrdeq	r3, [r0], -r6

00015e0c <flatcc_builder_create_vector@@Base>:
   15e0c:	push	{r4, r5, r6, r7, fp, lr}
   15e10:	add	fp, sp, #16
   15e14:	sub	sp, sp, #80	; 0x50
   15e18:	mov	r7, r0
   15e1c:	ldr	r0, [fp, #12]
   15e20:	cmp	r2, r0
   15e24:	bhi	15f24 <flatcc_builder_create_vector@@Base+0x118>
   15e28:	ldr	r0, [fp, #8]
   15e2c:	mov	r4, r2
   15e30:	ldrh	r2, [r7, #128]	; 0x80
   15e34:	mov	r5, #4
   15e38:	cmp	r0, #4
   15e3c:	movls	r0, r5
   15e40:	cmp	r2, r0
   15e44:	sub	r2, fp, #20
   15e48:	strhcc	r0, [r7, #128]	; 0x80
   15e4c:	str	r4, [fp, #-20]	; 0xffffffec
   15e50:	sub	r0, r0, #1
   15e54:	ldr	ip, [r7, #136]	; 0x88
   15e58:	str	r2, [sp, #12]
   15e5c:	mov	r2, #1
   15e60:	str	r5, [sp, #4]
   15e64:	str	r5, [sp, #16]
   15e68:	str	r2, [sp, #8]
   15e6c:	mls	r6, r3, r4, ip
   15e70:	mul	r3, r3, r4
   15e74:	and	r0, r6, r0
   15e78:	cmp	r3, #0
   15e7c:	beq	15e98 <flatcc_builder_create_vector@@Base+0x8c>
   15e80:	mov	r2, #2
   15e84:	add	r5, r3, #4
   15e88:	str	r1, [sp, #20]
   15e8c:	str	r3, [sp, #24]
   15e90:	str	r2, [sp, #8]
   15e94:	str	r5, [sp, #4]
   15e98:	cmp	r0, #0
   15e9c:	beq	15ec8 <flatcc_builder_create_vector@@Base+0xbc>
   15ea0:	add	r5, r5, r0
   15ea4:	add	r1, sp, #4
   15ea8:	str	r5, [sp, #4]
   15eac:	add	r1, r1, r2, lsl #3
   15eb0:	add	r2, r2, #1
   15eb4:	ldr	r3, [pc, #168]	; 15f64 <flatcc_builder_create_vector@@Base+0x158>
   15eb8:	ldr	r3, [pc, r3]
   15ebc:	str	r3, [r1, #8]
   15ec0:	str	r0, [r1, #12]
   15ec4:	str	r2, [sp, #8]
   15ec8:	cmp	r5, #0
   15ecc:	ble	15f44 <flatcc_builder_create_vector@@Base+0x138>
   15ed0:	ldr	r0, [r7, #36]	; 0x24
   15ed4:	ldr	r6, [r7, #44]	; 0x2c
   15ed8:	add	r1, sp, #4
   15edc:	sub	r4, ip, r5
   15ee0:	str	r5, [sp]
   15ee4:	add	r1, r1, #8
   15ee8:	mov	r3, r4
   15eec:	blx	r6
   15ef0:	cmp	r0, #0
   15ef4:	streq	r4, [r7, #136]	; 0x88
   15ef8:	moveq	r0, r4
   15efc:	subeq	sp, fp, #16
   15f00:	popeq	{r4, r5, r6, r7, fp, pc}
   15f04:	ldr	r0, [pc, #116]	; 15f80 <flatcc_builder_create_vector@@Base+0x174>
   15f08:	ldr	r1, [pc, #116]	; 15f84 <flatcc_builder_create_vector@@Base+0x178>
   15f0c:	ldr	r3, [pc, #116]	; 15f88 <flatcc_builder_create_vector@@Base+0x17c>
   15f10:	movw	r2, #651	; 0x28b
   15f14:	add	r0, pc, r0
   15f18:	add	r1, pc, r1
   15f1c:	add	r3, pc, r3
   15f20:	bl	124b0 <__assert_fail@plt>
   15f24:	ldr	r0, [pc, #60]	; 15f68 <flatcc_builder_create_vector@@Base+0x15c>
   15f28:	ldr	r1, [pc, #60]	; 15f6c <flatcc_builder_create_vector@@Base+0x160>
   15f2c:	ldr	r3, [pc, #60]	; 15f70 <flatcc_builder_create_vector@@Base+0x164>
   15f30:	movw	r2, #1365	; 0x555
   15f34:	add	r0, pc, r0
   15f38:	add	r1, pc, r1
   15f3c:	add	r3, pc, r3
   15f40:	bl	124b0 <__assert_fail@plt>
   15f44:	ldr	r0, [pc, #40]	; 15f74 <flatcc_builder_create_vector@@Base+0x168>
   15f48:	ldr	r1, [pc, #40]	; 15f78 <flatcc_builder_create_vector@@Base+0x16c>
   15f4c:	ldr	r3, [pc, #40]	; 15f7c <flatcc_builder_create_vector@@Base+0x170>
   15f50:	movw	r2, #647	; 0x287
   15f54:	add	r0, pc, r0
   15f58:	add	r1, pc, r1
   15f5c:	add	r3, pc, r3
   15f60:	bl	124b0 <__assert_fail@plt>
   15f64:	muleq	r1, r4, r1
   15f68:	ldrdeq	r2, [r0], -ip
   15f6c:	andeq	r2, r0, r2, asr #12
   15f70:	andeq	r2, r0, r7, ror #31
   15f74:	andeq	r3, r0, r3, ror #15
   15f78:	andeq	r2, r0, r2, lsr #12
   15f7c:	muleq	r0, sl, r6
   15f80:	andeq	r3, r0, r3, lsr #16
   15f84:	andeq	r2, r0, r2, ror #12
   15f88:	ldrdeq	r3, [r0], -sl

00015f8c <flatcc_builder_end_vector@@Base>:
   15f8c:	push	{r4, r5, fp, lr}
   15f90:	add	fp, sp, #8
   15f94:	sub	sp, sp, #8
   15f98:	mov	r4, r0
   15f9c:	ldr	r0, [r0, #32]
   15fa0:	ldrh	r1, [r0, #14]
   15fa4:	cmp	r1, #4
   15fa8:	bne	1605c <flatcc_builder_end_vector@@Base+0xd0>
   15fac:	ldr	r3, [r0, #16]
   15fb0:	ldr	r2, [r0, #20]
   15fb4:	ldr	r0, [r0, #24]
   15fb8:	ldr	r1, [r4, #16]
   15fbc:	ldrh	r5, [r4, #130]	; 0x82
   15fc0:	str	r0, [sp, #4]
   15fc4:	mov	r0, r4
   15fc8:	str	r5, [sp]
   15fcc:	bl	15e0c <flatcc_builder_create_vector@@Base>
   15fd0:	mov	r5, r0
   15fd4:	cmp	r0, #0
   15fd8:	beq	16050 <flatcc_builder_end_vector@@Base+0xc4>
   15fdc:	ldr	r0, [r4, #16]
   15fe0:	ldr	r2, [r4, #20]
   15fe4:	mov	r1, #0
   15fe8:	bl	12480 <memset@plt>
   15fec:	ldr	r0, [r4, #32]
   15ff0:	ldr	r1, [r4, #60]	; 0x3c
   15ff4:	ldr	ip, [r4, #64]	; 0x40
   15ff8:	ldr	r3, [r0, #8]
   15ffc:	str	r3, [r4, #20]
   16000:	ldr	r3, [r0]
   16004:	str	r3, [r4, #28]
   16008:	add	r1, r1, r3
   1600c:	ldr	r2, [r0, #4]
   16010:	str	r1, [r4, #16]
   16014:	sub	r1, ip, r3
   16018:	cmp	r1, r2
   1601c:	movhi	r1, r2
   16020:	str	r1, [r4, #24]
   16024:	ldrh	r1, [r4, #130]	; 0x82
   16028:	ldrh	r2, [r4, #128]	; 0x80
   1602c:	cmp	r2, r1
   16030:	strhcc	r1, [r4, #128]	; 0x80
   16034:	ldrh	r1, [r0, #12]
   16038:	sub	r0, r0, #36	; 0x24
   1603c:	str	r0, [r4, #32]
   16040:	strh	r1, [r4, #130]	; 0x82
   16044:	ldr	r0, [r4, #156]	; 0x9c
   16048:	sub	r0, r0, #1
   1604c:	str	r0, [r4, #156]	; 0x9c
   16050:	mov	r0, r5
   16054:	sub	sp, fp, #8
   16058:	pop	{r4, r5, fp, pc}
   1605c:	ldr	r0, [pc, #24]	; 1607c <flatcc_builder_end_vector@@Base+0xf0>
   16060:	ldr	r1, [pc, #24]	; 16080 <flatcc_builder_end_vector@@Base+0xf4>
   16064:	ldr	r3, [pc, #24]	; 16084 <flatcc_builder_end_vector@@Base+0xf8>
   16068:	movw	r2, #1400	; 0x578
   1606c:	add	r0, pc, r0
   16070:	add	r1, pc, r1
   16074:	add	r3, pc, r3
   16078:	bl	124b0 <__assert_fail@plt>
   1607c:	andeq	r2, r0, r8, asr #16
   16080:	andeq	r2, r0, sl, lsl #10
   16084:	andeq	r2, r0, r5, lsr #30

00016088 <flatcc_builder_vector_count@@Base>:
   16088:	ldr	r0, [r0, #32]
   1608c:	ldr	r0, [r0, #20]
   16090:	bx	lr

00016094 <flatcc_builder_vector_edit@@Base>:
   16094:	ldr	r0, [r0, #16]
   16098:	bx	lr

0001609c <flatcc_builder_create_offset_vector_direct@@Base>:
   1609c:	mov	r3, #0
   160a0:	b	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   160a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160a8:	add	fp, sp, #24
   160ac:	sub	sp, sp, #80	; 0x50
   160b0:	mov	r6, #0
   160b4:	cmn	r2, #-1073741823	; 0xc0000001
   160b8:	bhi	161f4 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   160bc:	mov	r8, r0
   160c0:	ldrh	r0, [r0, #128]	; 0x80
   160c4:	sub	r7, fp, #28
   160c8:	mov	r5, #4
   160cc:	mov	r4, #1
   160d0:	cmp	r0, #3
   160d4:	movls	r0, #4
   160d8:	strhls	r0, [r8, #128]	; 0x80
   160dc:	str	r2, [fp, #-28]	; 0xffffffe4
   160e0:	ldr	ip, [r8, #136]	; 0x88
   160e4:	str	r7, [sp, #12]
   160e8:	mov	r7, #0
   160ec:	str	r5, [sp, #4]
   160f0:	str	r5, [sp, #16]
   160f4:	str	r4, [sp, #8]
   160f8:	cmp	r7, r2, lsl #2
   160fc:	and	r6, ip, #3
   16100:	beq	16120 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16104:	lsl	r7, r2, #2
   16108:	mov	r4, #2
   1610c:	str	r1, [sp, #20]
   16110:	add	r5, r7, #4
   16114:	str	r7, [sp, #24]
   16118:	str	r4, [sp, #8]
   1611c:	str	r5, [sp, #4]
   16120:	cmp	r6, #0
   16124:	beq	16150 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16128:	add	r5, r5, r6
   1612c:	add	r7, sp, #4
   16130:	str	r5, [sp, #4]
   16134:	add	r7, r7, r4, lsl #3
   16138:	add	r4, r4, #1
   1613c:	ldr	r0, [pc, #348]	; 162a0 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   16140:	ldr	r0, [pc, r0]
   16144:	str	r0, [r7, #8]
   16148:	str	r6, [r7, #12]
   1614c:	str	r4, [sp, #8]
   16150:	cmp	r2, #0
   16154:	beq	161bc <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16158:	mvn	r0, #3
   1615c:	mov	r6, #0
   16160:	sub	r0, r0, ip
   16164:	add	r0, r0, r5
   16168:	ldr	r7, [r1, r6, lsl #2]
   1616c:	cmp	r7, #0
   16170:	beq	16194 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   16174:	add	r7, r0, r7
   16178:	cmp	r3, #0
   1617c:	str	r7, [r1, r6, lsl #2]
   16180:	beq	161a8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16184:	ldrb	r7, [r3, r6]
   16188:	cmp	r7, #0
   1618c:	bne	161a8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16190:	b	16200 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   16194:	cmp	r3, #0
   16198:	beq	16240 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   1619c:	ldrb	r7, [r3, r6]
   161a0:	cmp	r7, #0
   161a4:	bne	16220 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   161a8:	add	r6, r6, #1
   161ac:	sub	r0, r0, #4
   161b0:	cmp	r6, r2
   161b4:	bcc	16168 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   161b8:	ldr	ip, [r8, #136]	; 0x88
   161bc:	cmp	r5, #0
   161c0:	ble	16260 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   161c4:	ldr	r0, [r8, #36]	; 0x24
   161c8:	ldr	r7, [r8, #44]	; 0x2c
   161cc:	add	r1, sp, #4
   161d0:	sub	r6, ip, r5
   161d4:	mov	r2, r4
   161d8:	str	r5, [sp]
   161dc:	add	r1, r1, #8
   161e0:	mov	r3, r6
   161e4:	blx	r7
   161e8:	cmp	r0, #0
   161ec:	bne	16280 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   161f0:	str	r6, [r8, #136]	; 0x88
   161f4:	mov	r0, r6
   161f8:	sub	sp, fp, #24
   161fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16200:	ldr	r0, [pc, #156]	; 162a4 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   16204:	ldr	r1, [pc, #156]	; 162a8 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   16208:	ldr	r3, [pc, #156]	; 162ac <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   1620c:	movw	r2, #1457	; 0x5b1
   16210:	add	r0, pc, r0
   16214:	add	r1, pc, r1
   16218:	add	r3, pc, r3
   1621c:	bl	124b0 <__assert_fail@plt>
   16220:	ldr	r0, [pc, #136]	; 162b0 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   16224:	ldr	r1, [pc, #136]	; 162b4 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   16228:	ldr	r3, [pc, #136]	; 162b8 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   1622c:	movw	r2, #1461	; 0x5b5
   16230:	add	r0, pc, r0
   16234:	add	r1, pc, r1
   16238:	add	r3, pc, r3
   1623c:	bl	124b0 <__assert_fail@plt>
   16240:	ldr	r0, [pc, #116]	; 162bc <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   16244:	ldr	r1, [pc, #116]	; 162c0 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   16248:	ldr	r3, [pc, #116]	; 162c4 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   1624c:	movw	r2, #1463	; 0x5b7
   16250:	add	r0, pc, r0
   16254:	add	r1, pc, r1
   16258:	add	r3, pc, r3
   1625c:	bl	124b0 <__assert_fail@plt>
   16260:	ldr	r0, [pc, #96]	; 162c8 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   16264:	ldr	r1, [pc, #96]	; 162cc <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16268:	ldr	r3, [pc, #96]	; 162d0 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   1626c:	movw	r2, #647	; 0x287
   16270:	add	r0, pc, r0
   16274:	add	r1, pc, r1
   16278:	add	r3, pc, r3
   1627c:	bl	124b0 <__assert_fail@plt>
   16280:	ldr	r0, [pc, #76]	; 162d4 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   16284:	ldr	r1, [pc, #76]	; 162d8 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16288:	ldr	r3, [pc, #76]	; 162dc <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   1628c:	movw	r2, #651	; 0x28b
   16290:	add	r0, pc, r0
   16294:	add	r1, pc, r1
   16298:	add	r3, pc, r3
   1629c:	bl	124b0 <__assert_fail@plt>
   162a0:	andeq	r3, r1, ip, lsl #30
   162a4:	andeq	r3, r0, fp, lsl r5
   162a8:	andeq	r2, r0, r6, ror #6
   162ac:	andeq	r3, r0, r1, lsr #10
   162b0:	andeq	r3, r0, ip, lsl #11
   162b4:	andeq	r2, r0, r6, asr #6
   162b8:	andeq	r3, r0, r1, lsl #10
   162bc:	andeq	r3, r0, r7, ror #9
   162c0:	andeq	r2, r0, r6, lsr #6
   162c4:	andeq	r3, r0, r1, ror #9
   162c8:	andeq	r3, r0, r7, asr #9
   162cc:	andeq	r2, r0, r6, lsl #6
   162d0:	andeq	r3, r0, lr, ror r3
   162d4:	andeq	r3, r0, r7, lsr #9
   162d8:	andeq	r2, r0, r6, ror #5
   162dc:	andeq	r3, r0, lr, asr r3

000162e0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   162e0:	push	{r4, r5, fp, lr}
   162e4:	add	fp, sp, #8
   162e8:	mov	r4, r0
   162ec:	ldr	r0, [r0, #32]
   162f0:	mov	r3, r1
   162f4:	ldrh	r1, [r0, #14]
   162f8:	cmp	r1, #5
   162fc:	bne	16398 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16300:	ldr	r2, [r0, #20]
   16304:	ldr	r1, [r4, #16]
   16308:	mov	r0, r4
   1630c:	bl	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16310:	mov	r5, r0
   16314:	cmp	r0, #0
   16318:	beq	16390 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1631c:	ldr	r0, [r4, #16]
   16320:	ldr	r2, [r4, #20]
   16324:	mov	r1, #0
   16328:	bl	12480 <memset@plt>
   1632c:	ldr	r0, [r4, #32]
   16330:	ldr	r1, [r4, #60]	; 0x3c
   16334:	ldr	ip, [r4, #64]	; 0x40
   16338:	ldr	r3, [r0, #8]
   1633c:	str	r3, [r4, #20]
   16340:	ldr	r3, [r0]
   16344:	str	r3, [r4, #28]
   16348:	add	r1, r1, r3
   1634c:	ldr	r2, [r0, #4]
   16350:	str	r1, [r4, #16]
   16354:	sub	r1, ip, r3
   16358:	cmp	r1, r2
   1635c:	movhi	r1, r2
   16360:	str	r1, [r4, #24]
   16364:	ldrh	r1, [r4, #130]	; 0x82
   16368:	ldrh	r2, [r4, #128]	; 0x80
   1636c:	cmp	r2, r1
   16370:	strhcc	r1, [r4, #128]	; 0x80
   16374:	ldrh	r1, [r0, #12]
   16378:	sub	r0, r0, #36	; 0x24
   1637c:	str	r0, [r4, #32]
   16380:	strh	r1, [r4, #130]	; 0x82
   16384:	ldr	r0, [r4, #156]	; 0x9c
   16388:	sub	r0, r0, #1
   1638c:	str	r0, [r4, #156]	; 0x9c
   16390:	mov	r0, r5
   16394:	pop	{r4, r5, fp, pc}
   16398:	ldr	r0, [pc, #24]	; 163b8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   1639c:	ldr	r1, [pc, #24]	; 163bc <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   163a0:	ldr	r3, [pc, #24]	; 163c0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   163a4:	movw	r2, #1493	; 0x5d5
   163a8:	add	r0, pc, r0
   163ac:	add	r1, pc, r1
   163b0:	add	r3, pc, r3
   163b4:	bl	124b0 <__assert_fail@plt>
   163b8:	andeq	r2, r0, r5, lsl #12
   163bc:	andeq	r2, r0, lr, asr #3
   163c0:	andeq	r2, r0, r6, ror ip

000163c4 <flatcc_builder_offset_vector_edit@@Base>:
   163c4:	ldr	r0, [r0, #16]
   163c8:	bx	lr

000163cc <flatcc_builder_offset_vector_count@@Base>:
   163cc:	ldr	r0, [r0, #32]
   163d0:	ldr	r0, [r0, #20]
   163d4:	bx	lr

000163d8 <flatcc_builder_table_add_union@@Base>:
   163d8:	push	{r4, r5, r6, r7, fp, lr}
   163dc:	add	fp, sp, #16
   163e0:	mov	r5, r0
   163e4:	ldr	r0, [r0, #32]
   163e8:	ldrh	r0, [r0, #14]
   163ec:	cmp	r0, #3
   163f0:	bne	16478 <flatcc_builder_table_add_union@@Base+0xa0>
   163f4:	mov	r7, r3
   163f8:	mov	r4, r2
   163fc:	mov	r6, r1
   16400:	cmp	r3, #0
   16404:	beq	16414 <flatcc_builder_table_add_union@@Base+0x3c>
   16408:	uxtb	r0, r4
   1640c:	cmp	r0, #0
   16410:	beq	16498 <flatcc_builder_table_add_union@@Base+0xc0>
   16414:	cmp	r7, #0
   16418:	beq	16434 <flatcc_builder_table_add_union@@Base+0x5c>
   1641c:	mov	r0, r5
   16420:	mov	r1, r6
   16424:	bl	16508 <flatcc_builder_table_add_offset@@Base>
   16428:	cmp	r0, #0
   1642c:	beq	164b8 <flatcc_builder_table_add_union@@Base+0xe0>
   16430:	str	r7, [r0]
   16434:	sub	r1, r6, #1
   16438:	mov	r0, r5
   1643c:	mov	r2, #1
   16440:	mov	r3, #1
   16444:	bl	166bc <flatcc_builder_table_add@@Base>
   16448:	cmp	r0, #0
   1644c:	strbne	r4, [r0]
   16450:	movne	r0, #0
   16454:	popne	{r4, r5, r6, r7, fp, pc}
   16458:	ldr	r0, [pc, #156]	; 164fc <flatcc_builder_table_add_union@@Base+0x124>
   1645c:	ldr	r1, [pc, #156]	; 16500 <flatcc_builder_table_add_union@@Base+0x128>
   16460:	ldr	r3, [pc, #156]	; 16504 <flatcc_builder_table_add_union@@Base+0x12c>
   16464:	movw	r2, #1526	; 0x5f6
   16468:	add	r0, pc, r0
   1646c:	add	r1, pc, r1
   16470:	add	r3, pc, r3
   16474:	bl	124b0 <__assert_fail@plt>
   16478:	ldr	r0, [pc, #88]	; 164d8 <flatcc_builder_table_add_union@@Base+0x100>
   1647c:	ldr	r1, [pc, #88]	; 164dc <flatcc_builder_table_add_union@@Base+0x104>
   16480:	ldr	r3, [pc, #88]	; 164e0 <flatcc_builder_table_add_union@@Base+0x108>
   16484:	movw	r2, #1518	; 0x5ee
   16488:	add	r0, pc, r0
   1648c:	add	r1, pc, r1
   16490:	add	r3, pc, r3
   16494:	bl	124b0 <__assert_fail@plt>
   16498:	ldr	r0, [pc, #68]	; 164e4 <flatcc_builder_table_add_union@@Base+0x10c>
   1649c:	ldr	r1, [pc, #68]	; 164e8 <flatcc_builder_table_add_union@@Base+0x110>
   164a0:	ldr	r3, [pc, #68]	; 164ec <flatcc_builder_table_add_union@@Base+0x114>
   164a4:	movw	r2, #1519	; 0x5ef
   164a8:	add	r0, pc, r0
   164ac:	add	r1, pc, r1
   164b0:	add	r3, pc, r3
   164b4:	bl	124b0 <__assert_fail@plt>
   164b8:	ldr	r0, [pc, #48]	; 164f0 <flatcc_builder_table_add_union@@Base+0x118>
   164bc:	ldr	r1, [pc, #48]	; 164f4 <flatcc_builder_table_add_union@@Base+0x11c>
   164c0:	ldr	r3, [pc, #48]	; 164f8 <flatcc_builder_table_add_union@@Base+0x120>
   164c4:	movw	r2, #1522	; 0x5f2
   164c8:	add	r0, pc, r0
   164cc:	add	r1, pc, r1
   164d0:	add	r3, pc, r3
   164d4:	bl	124b0 <__assert_fail@plt>
   164d8:	andeq	r2, r0, lr, lsl r9
   164dc:	andeq	r2, r0, lr, ror #1
   164e0:	andeq	r2, r0, r8, lsl #24
   164e4:	andeq	r2, r0, r8, asr #24
   164e8:	andeq	r2, r0, lr, asr #1
   164ec:	andeq	r2, r0, r8, ror #23
   164f0:	andeq	r2, r0, sl, asr #24
   164f4:	andeq	r2, r0, lr, lsr #1
   164f8:	andeq	r2, r0, r8, asr #23
   164fc:			; <UNDEFINED> instruction: 0x00002cb4
   16500:	andeq	r2, r0, lr, lsl #2
   16504:	andeq	r2, r0, r8, lsr #24

00016508 <flatcc_builder_table_add_offset@@Base>:
   16508:	push	{r4, r5, r6, r7, fp, lr}
   1650c:	add	fp, sp, #16
   16510:	sub	sp, sp, #8
   16514:	mov	r4, r0
   16518:	ldr	r0, [r0, #32]
   1651c:	ldrh	r0, [r0, #14]
   16520:	cmp	r0, #3
   16524:	bne	16638 <flatcc_builder_table_add_offset@@Base+0x130>
   16528:	movw	r0, #32765	; 0x7ffd
   1652c:	mov	r5, r1
   16530:	cmp	r1, r0
   16534:	bcs	16658 <flatcc_builder_table_add_offset@@Base+0x150>
   16538:	ldr	r0, [r4, #4]
   1653c:	add	r1, r0, r5, lsl #1
   16540:	ldrh	r1, [r1]
   16544:	cmp	r1, #0
   16548:	bne	16678 <flatcc_builder_table_add_offset@@Base+0x170>
   1654c:	ldr	r2, [r4, #20]
   16550:	ldr	r1, [r4, #12]
   16554:	ldr	r3, [r4, #24]
   16558:	add	r2, r2, #3
   1655c:	eor	r1, r1, r5
   16560:	bic	r6, r2, #3
   16564:	movw	r2, #31153	; 0x79b1
   16568:	movt	r2, #40503	; 0x9e37
   1656c:	add	r7, r6, #4
   16570:	mul	r1, r1, r2
   16574:	cmp	r7, r3
   16578:	str	r7, [r4, #20]
   1657c:	eor	r1, r1, #4
   16580:	mul	r1, r1, r2
   16584:	str	r1, [r4, #12]
   16588:	bls	165fc <flatcc_builder_table_add_offset@@Base+0xf4>
   1658c:	ldr	r1, [r4, #28]
   16590:	ldr	r0, [r4, #40]	; 0x28
   16594:	ldr	ip, [r4, #48]	; 0x30
   16598:	mov	r2, #1
   1659c:	mov	r3, #1
   165a0:	str	r2, [sp]
   165a4:	add	r2, r1, r7
   165a8:	add	r1, r4, #60	; 0x3c
   165ac:	blx	ip
   165b0:	mov	r1, r0
   165b4:	mov	r0, #0
   165b8:	cmp	r1, #0
   165bc:	beq	165c8 <flatcc_builder_table_add_offset@@Base+0xc0>
   165c0:	sub	sp, fp, #16
   165c4:	pop	{r4, r5, r6, r7, fp, pc}
   165c8:	ldr	r0, [r4, #28]
   165cc:	ldr	r2, [r4, #60]	; 0x3c
   165d0:	ldr	r3, [r4, #64]	; 0x40
   165d4:	ldr	r1, [r4, #32]
   165d8:	add	r2, r2, r0
   165dc:	sub	r0, r3, r0
   165e0:	str	r2, [r4, #16]
   165e4:	movw	r2, #65532	; 0xfffc
   165e8:	cmp	r0, r2
   165ec:	movcs	r0, r2
   165f0:	str	r0, [r4, #24]
   165f4:	str	r2, [r1, #4]
   165f8:	ldr	r0, [r4, #4]
   165fc:	uxth	r1, r5
   16600:	add	r0, r0, r1, lsl #1
   16604:	strh	r7, [r0]
   16608:	ldrh	r0, [r4, #8]
   1660c:	cmp	r0, r1
   16610:	addls	r0, r5, #1
   16614:	strhls	r0, [r4, #8]
   16618:	ldr	r0, [r4]
   1661c:	add	r1, r0, #2
   16620:	str	r1, [r4]
   16624:	strh	r6, [r0]
   16628:	ldr	r0, [r4, #16]
   1662c:	add	r0, r0, r6
   16630:	sub	sp, fp, #16
   16634:	pop	{r4, r5, r6, r7, fp, pc}
   16638:	ldr	r0, [pc, #88]	; 16698 <flatcc_builder_table_add_offset@@Base+0x190>
   1663c:	ldr	r1, [pc, #88]	; 1669c <flatcc_builder_table_add_offset@@Base+0x194>
   16640:	ldr	r3, [pc, #88]	; 166a0 <flatcc_builder_table_add_offset@@Base+0x198>
   16644:	movw	r2, #1811	; 0x713
   16648:	add	r0, pc, r0
   1664c:	add	r1, pc, r1
   16650:	add	r3, pc, r3
   16654:	bl	124b0 <__assert_fail@plt>
   16658:	ldr	r0, [pc, #68]	; 166a4 <flatcc_builder_table_add_offset@@Base+0x19c>
   1665c:	ldr	r1, [pc, #68]	; 166a8 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16660:	ldr	r3, [pc, #68]	; 166ac <flatcc_builder_table_add_offset@@Base+0x1a4>
   16664:	movw	r2, #1812	; 0x714
   16668:	add	r0, pc, r0
   1666c:	add	r1, pc, r1
   16670:	add	r3, pc, r3
   16674:	bl	124b0 <__assert_fail@plt>
   16678:	ldr	r0, [pc, #48]	; 166b0 <flatcc_builder_table_add_offset@@Base+0x1a8>
   1667c:	ldr	r1, [pc, #48]	; 166b4 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16680:	ldr	r3, [pc, #48]	; 166b8 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16684:	movw	r2, #1819	; 0x71b
   16688:	add	r0, pc, r0
   1668c:	add	r1, pc, r1
   16690:	add	r3, pc, r3
   16694:	bl	124b0 <__assert_fail@plt>
   16698:	andeq	r2, r0, lr, asr r7
   1669c:	andeq	r1, r0, lr, lsr #30
   166a0:	andeq	r2, r0, sl, asr #28
   166a4:			; <UNDEFINED> instruction: 0x00002db2
   166a8:	andeq	r1, r0, lr, lsl #30
   166ac:	andeq	r2, r0, sl, lsr #28
   166b0:	andeq	r3, r0, pc, lsr #1
   166b4:	andeq	r1, r0, lr, ror #29
   166b8:	andeq	r2, r0, sl, lsl #28

000166bc <flatcc_builder_table_add@@Base>:
   166bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166c0:	add	fp, sp, #24
   166c4:	sub	sp, sp, #8
   166c8:	mov	r4, r0
   166cc:	ldr	r0, [r0, #32]
   166d0:	ldrh	r0, [r0, #14]
   166d4:	cmp	r0, #3
   166d8:	bne	167f8 <flatcc_builder_table_add@@Base+0x13c>
   166dc:	movw	r0, #32765	; 0x7ffd
   166e0:	mov	r8, r1
   166e4:	cmp	r1, r0
   166e8:	bcs	16818 <flatcc_builder_table_add@@Base+0x15c>
   166ec:	ldrh	r0, [r4, #130]	; 0x82
   166f0:	cmp	r0, r3
   166f4:	strhcc	r3, [r4, #130]	; 0x82
   166f8:	ldr	r0, [r4, #4]
   166fc:	add	r1, r0, r8, lsl #1
   16700:	ldrh	r1, [r1]
   16704:	cmp	r1, #0
   16708:	bne	16838 <flatcc_builder_table_add@@Base+0x17c>
   1670c:	ldr	r1, [r4, #12]
   16710:	movw	r7, #31153	; 0x79b1
   16714:	ldr	r6, [r4, #20]
   16718:	ldr	r5, [r4, #24]
   1671c:	movt	r7, #40503	; 0x9e37
   16720:	eor	r1, r1, r8
   16724:	mul	r1, r1, r7
   16728:	eor	r1, r1, r2
   1672c:	mul	r1, r1, r7
   16730:	str	r1, [r4, #12]
   16734:	add	r1, r3, r6
   16738:	rsb	r3, r3, #0
   1673c:	sub	r1, r1, #1
   16740:	and	r6, r1, r3
   16744:	add	r1, r6, r2
   16748:	cmp	r1, r5
   1674c:	str	r1, [r4, #20]
   16750:	bcc	167c8 <flatcc_builder_table_add@@Base+0x10c>
   16754:	ldr	r2, [r4, #28]
   16758:	ldr	r0, [r4, #40]	; 0x28
   1675c:	ldr	r7, [r4, #48]	; 0x30
   16760:	mov	r3, #1
   16764:	str	r3, [sp]
   16768:	mov	r3, #1
   1676c:	add	r1, r1, r2
   16770:	add	r2, r1, #1
   16774:	add	r1, r4, #60	; 0x3c
   16778:	blx	r7
   1677c:	mov	r1, r0
   16780:	mov	r0, #0
   16784:	cmp	r1, #0
   16788:	beq	16794 <flatcc_builder_table_add@@Base+0xd8>
   1678c:	sub	sp, fp, #24
   16790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16794:	ldr	r0, [r4, #28]
   16798:	ldr	r2, [r4, #60]	; 0x3c
   1679c:	ldr	r3, [r4, #64]	; 0x40
   167a0:	ldr	r1, [r4, #32]
   167a4:	add	r2, r2, r0
   167a8:	sub	r0, r3, r0
   167ac:	str	r2, [r4, #16]
   167b0:	movw	r2, #65532	; 0xfffc
   167b4:	cmp	r0, r2
   167b8:	movcs	r0, r2
   167bc:	str	r0, [r4, #24]
   167c0:	str	r2, [r1, #4]
   167c4:	ldr	r0, [r4, #4]
   167c8:	uxth	r1, r8
   167cc:	add	r2, r6, #4
   167d0:	add	r0, r0, r1, lsl #1
   167d4:	strh	r2, [r0]
   167d8:	ldrh	r0, [r4, #8]
   167dc:	cmp	r0, r1
   167e0:	addls	r0, r8, #1
   167e4:	strhls	r0, [r4, #8]
   167e8:	ldr	r0, [r4, #16]
   167ec:	add	r0, r0, r6
   167f0:	sub	sp, fp, #24
   167f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167f8:	ldr	r0, [pc, #88]	; 16858 <flatcc_builder_table_add@@Base+0x19c>
   167fc:	ldr	r1, [pc, #88]	; 1685c <flatcc_builder_table_add@@Base+0x1a0>
   16800:	ldr	r3, [pc, #88]	; 16860 <flatcc_builder_table_add@@Base+0x1a4>
   16804:	movw	r2, #1773	; 0x6ed
   16808:	add	r0, pc, r0
   1680c:	add	r1, pc, r1
   16810:	add	r3, pc, r3
   16814:	bl	124b0 <__assert_fail@plt>
   16818:	ldr	r0, [pc, #68]	; 16864 <flatcc_builder_table_add@@Base+0x1a8>
   1681c:	ldr	r1, [pc, #68]	; 16868 <flatcc_builder_table_add@@Base+0x1ac>
   16820:	ldr	r3, [pc, #68]	; 1686c <flatcc_builder_table_add@@Base+0x1b0>
   16824:	movw	r2, #1774	; 0x6ee
   16828:	add	r0, pc, r0
   1682c:	add	r1, pc, r1
   16830:	add	r3, pc, r3
   16834:	bl	124b0 <__assert_fail@plt>
   16838:	ldr	r0, [pc, #48]	; 16870 <flatcc_builder_table_add@@Base+0x1b4>
   1683c:	ldr	r1, [pc, #48]	; 16874 <flatcc_builder_table_add@@Base+0x1b8>
   16840:	ldr	r3, [pc, #48]	; 16878 <flatcc_builder_table_add@@Base+0x1bc>
   16844:	movw	r2, #1784	; 0x6f8
   16848:	add	r0, pc, r0
   1684c:	add	r1, pc, r1
   16850:	add	r3, pc, r3
   16854:	bl	124b0 <__assert_fail@plt>
   16858:	muleq	r0, lr, r5
   1685c:	andeq	r1, r0, lr, ror #26
   16860:	andeq	r2, r0, r0, asr #23
   16864:	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   16868:	andeq	r1, r0, lr, asr #26
   1686c:	andeq	r2, r0, r0, lsr #23
   16870:	andeq	r2, r0, pc, ror #29
   16874:	andeq	r1, r0, lr, lsr #26
   16878:	andeq	r2, r0, r0, lsl #23

0001687c <flatcc_builder_table_add_union_vector@@Base>:
   1687c:	push	{r4, r5, r6, r7, fp, lr}
   16880:	add	fp, sp, #16
   16884:	mov	r6, r0
   16888:	ldr	r0, [r0, #32]
   1688c:	ldrh	r0, [r0, #14]
   16890:	cmp	r0, #3
   16894:	bne	168fc <flatcc_builder_table_add_union_vector@@Base+0x80>
   16898:	clz	r0, r3
   1689c:	mov	r5, r1
   168a0:	clz	r1, r2
   168a4:	mov	r4, r3
   168a8:	mov	r7, r2
   168ac:	lsr	r0, r0, #5
   168b0:	lsr	r1, r1, #5
   168b4:	cmp	r1, r0
   168b8:	bne	1691c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   168bc:	cmp	r7, #0
   168c0:	beq	168f4 <flatcc_builder_table_add_union_vector@@Base+0x78>
   168c4:	sub	r1, r5, #1
   168c8:	mov	r0, r6
   168cc:	bl	16508 <flatcc_builder_table_add_offset@@Base>
   168d0:	cmp	r0, #0
   168d4:	beq	1693c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   168d8:	str	r7, [r0]
   168dc:	mov	r0, r6
   168e0:	mov	r1, r5
   168e4:	bl	16508 <flatcc_builder_table_add_offset@@Base>
   168e8:	cmp	r0, #0
   168ec:	beq	1695c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   168f0:	str	r4, [r0]
   168f4:	mov	r0, #0
   168f8:	pop	{r4, r5, r6, r7, fp, pc}
   168fc:	ldr	r0, [pc, #120]	; 1697c <flatcc_builder_table_add_union_vector@@Base+0x100>
   16900:	ldr	r1, [pc, #120]	; 16980 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16904:	ldr	r3, [pc, #120]	; 16984 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16908:	mov	r2, #1536	; 0x600
   1690c:	add	r0, pc, r0
   16910:	add	r1, pc, r1
   16914:	add	r3, pc, r3
   16918:	bl	124b0 <__assert_fail@plt>
   1691c:	ldr	r0, [pc, #100]	; 16988 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16920:	ldr	r1, [pc, #100]	; 1698c <flatcc_builder_table_add_union_vector@@Base+0x110>
   16924:	ldr	r3, [pc, #100]	; 16990 <flatcc_builder_table_add_union_vector@@Base+0x114>
   16928:	movw	r2, #1537	; 0x601
   1692c:	add	r0, pc, r0
   16930:	add	r1, pc, r1
   16934:	add	r3, pc, r3
   16938:	bl	124b0 <__assert_fail@plt>
   1693c:	ldr	r0, [pc, #80]	; 16994 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16940:	ldr	r1, [pc, #80]	; 16998 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16944:	ldr	r3, [pc, #80]	; 1699c <flatcc_builder_table_add_union_vector@@Base+0x120>
   16948:	movw	r2, #1540	; 0x604
   1694c:	add	r0, pc, r0
   16950:	add	r1, pc, r1
   16954:	add	r3, pc, r3
   16958:	bl	124b0 <__assert_fail@plt>
   1695c:	ldr	r0, [pc, #60]	; 169a0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16960:	ldr	r1, [pc, #60]	; 169a4 <flatcc_builder_table_add_union_vector@@Base+0x128>
   16964:	ldr	r3, [pc, #60]	; 169a8 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   16968:	movw	r2, #1544	; 0x608
   1696c:	add	r0, pc, r0
   16970:	add	r1, pc, r1
   16974:	add	r3, pc, r3
   16978:	bl	124b0 <__assert_fail@plt>
   1697c:	muleq	r0, sl, r4
   16980:	andeq	r1, r0, sl, ror #24
   16984:	andeq	r2, r0, r4, lsl r8
   16988:	andeq	r2, r0, pc, asr r8
   1698c:	andeq	r1, r0, sl, asr #24
   16990:	strdeq	r2, [r0], -r4
   16994:	andeq	r2, r0, r6, asr #15
   16998:	andeq	r1, r0, sl, lsr #24
   1699c:	ldrdeq	r2, [r0], -r4
   169a0:	andeq	r2, r0, r6, lsr #15
   169a4:	andeq	r1, r0, sl, lsl #24
   169a8:			; <UNDEFINED> instruction: 0x000027b4

000169ac <flatcc_builder_create_union_vector@@Base>:
   169ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b0:	add	fp, sp, #28
   169b4:	sub	sp, sp, #12
   169b8:	mov	r7, #0
   169bc:	mov	r4, r1
   169c0:	mov	r5, r0
   169c4:	mov	sl, r3
   169c8:	mov	r9, r2
   169cc:	mov	r6, #4
   169d0:	str	r7, [r0]
   169d4:	str	r7, [r0, #4]
   169d8:	mov	r0, r1
   169dc:	mov	r1, #4
   169e0:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   169e4:	cmp	r0, #0
   169e8:	beq	169f4 <flatcc_builder_create_union_vector@@Base+0x48>
   169ec:	sub	sp, fp, #28
   169f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f4:	ldr	r0, [r4, #32]
   169f8:	mov	r1, #5
   169fc:	str	r6, [r0, #16]
   16a00:	ldr	r0, [r4, #32]
   16a04:	str	r7, [r0, #20]
   16a08:	ldr	r0, [r4, #32]
   16a0c:	strh	r1, [r0, #14]
   16a10:	ldr	r1, [r4, #28]
   16a14:	ldr	r2, [r4, #60]	; 0x3c
   16a18:	ldr	r3, [r4, #64]	; 0x40
   16a1c:	add	r2, r2, r1
   16a20:	sub	r1, r3, r1
   16a24:	str	r2, [r4, #16]
   16a28:	mvn	r2, #3
   16a2c:	cmn	r1, #4
   16a30:	movcs	r1, r2
   16a34:	str	r1, [r4, #24]
   16a38:	str	r2, [r0, #4]
   16a3c:	ldr	r1, [r0, #20]
   16a40:	adds	r1, r1, sl
   16a44:	cmpcc	r1, #1073741824	; 0x40000000
   16a48:	bcc	16a6c <flatcc_builder_create_union_vector@@Base+0xc0>
   16a4c:	ldr	r0, [pc, #556]	; 16c80 <flatcc_builder_create_union_vector@@Base+0x2d4>
   16a50:	ldr	r1, [pc, #556]	; 16c84 <flatcc_builder_create_union_vector@@Base+0x2d8>
   16a54:	ldr	r3, [pc, #556]	; 16c88 <flatcc_builder_create_union_vector@@Base+0x2dc>
   16a58:	mov	r2, #892	; 0x37c
   16a5c:	add	r0, pc, r0
   16a60:	add	r1, pc, r1
   16a64:	add	r3, pc, r3
   16a68:	bl	124b0 <__assert_fail@plt>
   16a6c:	str	r1, [r0, #20]
   16a70:	ldr	r7, [r4, #20]
   16a74:	ldr	r0, [r4, #24]
   16a78:	add	r1, r7, sl, lsl #2
   16a7c:	cmp	r1, r0
   16a80:	str	r1, [r4, #20]
   16a84:	bcs	16a98 <flatcc_builder_create_union_vector@@Base+0xec>
   16a88:	ldr	r1, [r4, #16]
   16a8c:	adds	r2, r1, r7
   16a90:	bne	16b00 <flatcc_builder_create_union_vector@@Base+0x154>
   16a94:	b	169ec <flatcc_builder_create_union_vector@@Base+0x40>
   16a98:	ldr	r2, [r4, #28]
   16a9c:	ldr	r0, [r4, #40]	; 0x28
   16aa0:	ldr	r6, [r4, #48]	; 0x30
   16aa4:	mov	r3, #1
   16aa8:	str	r3, [sp]
   16aac:	mov	r3, #1
   16ab0:	add	r1, r1, r2
   16ab4:	add	r2, r1, #1
   16ab8:	add	r1, r4, #60	; 0x3c
   16abc:	blx	r6
   16ac0:	cmp	r0, #0
   16ac4:	bne	169ec <flatcc_builder_create_union_vector@@Base+0x40>
   16ac8:	ldr	r0, [r4, #28]
   16acc:	ldr	r1, [r4, #60]	; 0x3c
   16ad0:	ldr	r3, [r4, #64]	; 0x40
   16ad4:	ldr	r2, [r4, #32]
   16ad8:	add	r1, r1, r0
   16adc:	sub	r0, r3, r0
   16ae0:	mvn	r3, #3
   16ae4:	cmn	r0, #4
   16ae8:	str	r1, [r4, #16]
   16aec:	movcs	r0, r3
   16af0:	str	r0, [r4, #24]
   16af4:	str	r3, [r2, #4]
   16af8:	adds	r2, r1, r7
   16afc:	beq	169ec <flatcc_builder_create_union_vector@@Base+0x40>
   16b00:	ldr	r7, [r4, #20]
   16b04:	add	r2, r7, sl
   16b08:	cmp	r2, r0
   16b0c:	str	r2, [r4, #20]
   16b10:	bcc	16b74 <flatcc_builder_create_union_vector@@Base+0x1c8>
   16b14:	ldr	r1, [r4, #28]
   16b18:	ldr	r0, [r4, #40]	; 0x28
   16b1c:	ldr	r6, [r4, #48]	; 0x30
   16b20:	mov	r3, #1
   16b24:	str	r3, [sp]
   16b28:	mov	r3, #1
   16b2c:	add	r1, r2, r1
   16b30:	add	r2, r1, #1
   16b34:	add	r1, r4, #60	; 0x3c
   16b38:	blx	r6
   16b3c:	cmp	r0, #0
   16b40:	bne	169ec <flatcc_builder_create_union_vector@@Base+0x40>
   16b44:	ldr	r0, [r4, #28]
   16b48:	ldr	r1, [r4, #60]	; 0x3c
   16b4c:	ldr	r3, [r4, #64]	; 0x40
   16b50:	ldr	r2, [r4, #32]
   16b54:	add	r1, r1, r0
   16b58:	sub	r0, r3, r0
   16b5c:	mvn	r3, #3
   16b60:	cmn	r0, #4
   16b64:	str	r1, [r4, #16]
   16b68:	movcs	r0, r3
   16b6c:	str	r0, [r4, #24]
   16b70:	str	r3, [r2, #4]
   16b74:	adds	r8, r1, r7
   16b78:	beq	169ec <flatcc_builder_create_union_vector@@Base+0x40>
   16b7c:	cmp	sl, #0
   16b80:	beq	16bb0 <flatcc_builder_create_union_vector@@Base+0x204>
   16b84:	add	r0, r9, #4
   16b88:	mov	r2, sl
   16b8c:	mov	r3, r1
   16b90:	mov	r7, r8
   16b94:	ldrb	r6, [r0, #-4]
   16b98:	subs	r2, r2, #1
   16b9c:	strb	r6, [r7], #1
   16ba0:	ldr	r6, [r0]
   16ba4:	add	r0, r0, #8
   16ba8:	str	r6, [r3], #4
   16bac:	bne	16b94 <flatcc_builder_create_union_vector@@Base+0x1e8>
   16bb0:	mov	r0, r4
   16bb4:	mov	r2, sl
   16bb8:	mov	r3, r8
   16bbc:	bl	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16bc0:	mov	r7, r0
   16bc4:	mov	r9, #0
   16bc8:	cmp	r0, #0
   16bcc:	beq	16bf8 <flatcc_builder_create_union_vector@@Base+0x24c>
   16bd0:	mvn	r0, #0
   16bd4:	mov	r1, #1
   16bd8:	mov	r2, sl
   16bdc:	mov	r3, #1
   16be0:	str	r1, [sp]
   16be4:	str	r0, [sp, #4]
   16be8:	mov	r0, r4
   16bec:	mov	r1, r8
   16bf0:	bl	15e0c <flatcc_builder_create_vector@@Base>
   16bf4:	b	16bfc <flatcc_builder_create_union_vector@@Base+0x250>
   16bf8:	mov	r0, #0
   16bfc:	orr	r1, r9, r7
   16c00:	stm	r5, {r0, r1}
   16c04:	mov	r1, #0
   16c08:	ldr	r0, [r4, #16]
   16c0c:	ldr	r2, [r4, #20]
   16c10:	bl	12480 <memset@plt>
   16c14:	ldr	r0, [r4, #32]
   16c18:	ldr	r1, [r4, #60]	; 0x3c
   16c1c:	ldr	r2, [r4, #64]	; 0x40
   16c20:	ldr	r3, [r0, #8]
   16c24:	str	r3, [r4, #20]
   16c28:	ldr	r3, [r0]
   16c2c:	str	r3, [r4, #28]
   16c30:	add	r1, r1, r3
   16c34:	ldr	r7, [r0, #4]
   16c38:	str	r1, [r4, #16]
   16c3c:	sub	r1, r2, r3
   16c40:	cmp	r1, r7
   16c44:	movhi	r1, r7
   16c48:	str	r1, [r4, #24]
   16c4c:	ldrh	r1, [r4, #130]	; 0x82
   16c50:	ldrh	r2, [r4, #128]	; 0x80
   16c54:	cmp	r2, r1
   16c58:	strhcc	r1, [r4, #128]	; 0x80
   16c5c:	ldrh	r1, [r0, #12]
   16c60:	sub	r0, r0, #36	; 0x24
   16c64:	str	r0, [r4, #32]
   16c68:	strh	r1, [r4, #130]	; 0x82
   16c6c:	ldr	r0, [r4, #156]	; 0x9c
   16c70:	sub	r0, r0, #1
   16c74:	str	r0, [r4, #156]	; 0x9c
   16c78:	sub	sp, fp, #28
   16c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c80:	andeq	r2, r0, r4, ror #23
   16c84:	andeq	r1, r0, sl, lsl fp
   16c88:	strdeq	r2, [r0], -r7

00016c8c <flatcc_builder_create_union_vector_direct@@Base>:
   16c8c:	push	{r4, r5, r6, r7, fp, lr}
   16c90:	add	fp, sp, #16
   16c94:	sub	sp, sp, #8
   16c98:	ldr	r7, [fp, #8]
   16c9c:	mov	r5, r2
   16ca0:	mov	r4, r0
   16ca4:	mov	r0, #0
   16ca8:	mov	r6, r1
   16cac:	str	r0, [r4]
   16cb0:	str	r0, [r4, #4]
   16cb4:	mov	r0, r1
   16cb8:	mov	r1, r3
   16cbc:	mov	r3, r5
   16cc0:	mov	r2, r7
   16cc4:	bl	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16cc8:	cmp	r0, #0
   16ccc:	str	r0, [r4, #4]
   16cd0:	beq	16cfc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16cd4:	mvn	r0, #0
   16cd8:	mov	r1, #1
   16cdc:	mov	r2, r7
   16ce0:	mov	r3, #1
   16ce4:	str	r1, [sp]
   16ce8:	str	r0, [sp, #4]
   16cec:	mov	r0, r6
   16cf0:	mov	r1, r5
   16cf4:	bl	15e0c <flatcc_builder_create_vector@@Base>
   16cf8:	str	r0, [r4]
   16cfc:	sub	sp, fp, #16
   16d00:	pop	{r4, r5, r6, r7, fp, pc}

00016d04 <flatcc_builder_start_union_vector@@Base>:
   16d04:	push	{r4, sl, fp, lr}
   16d08:	add	fp, sp, #8
   16d0c:	mov	r1, #4
   16d10:	mov	r4, r0
   16d14:	bl	13d00 <flatcc_builder_start_buffer@@Base+0xc0>
   16d18:	mov	r1, r0
   16d1c:	mvn	r0, #0
   16d20:	cmp	r1, #0
   16d24:	popne	{r4, sl, fp, pc}
   16d28:	ldr	r0, [r4, #32]
   16d2c:	mov	r1, #8
   16d30:	mov	r2, #7
   16d34:	str	r1, [r0, #16]
   16d38:	mov	r0, #0
   16d3c:	ldr	r1, [r4, #32]
   16d40:	str	r0, [r1, #20]
   16d44:	ldr	r1, [r4, #32]
   16d48:	strh	r2, [r1, #14]
   16d4c:	ldr	r2, [r4, #28]
   16d50:	ldr	r3, [r4, #60]	; 0x3c
   16d54:	ldr	ip, [r4, #64]	; 0x40
   16d58:	add	r3, r3, r2
   16d5c:	sub	r2, ip, r2
   16d60:	str	r3, [r4, #16]
   16d64:	mvn	r3, #3
   16d68:	cmn	r2, #4
   16d6c:	movcs	r2, r3
   16d70:	str	r2, [r4, #24]
   16d74:	str	r3, [r1, #4]
   16d78:	pop	{r4, sl, fp, pc}

00016d7c <flatcc_builder_end_union_vector@@Base>:
   16d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d80:	add	fp, sp, #28
   16d84:	sub	sp, sp, #12
   16d88:	mov	sl, r0
   16d8c:	mov	r0, #0
   16d90:	mov	r4, r1
   16d94:	str	r0, [sl]
   16d98:	str	r0, [sl, #4]
   16d9c:	ldr	r0, [r1, #32]
   16da0:	ldrh	r1, [r0, #14]
   16da4:	cmp	r1, #7
   16da8:	bne	16f4c <flatcc_builder_end_union_vector@@Base+0x1d0>
   16dac:	ldr	r6, [r0, #20]
   16db0:	ldr	r7, [r4, #20]
   16db4:	ldr	r2, [r4, #24]
   16db8:	add	r0, r6, r6, lsl #2
   16dbc:	add	r1, r7, r0
   16dc0:	cmp	r1, r2
   16dc4:	str	r1, [r4, #20]
   16dc8:	bcs	16ddc <flatcc_builder_end_union_vector@@Base+0x60>
   16dcc:	ldr	r0, [r4, #16]
   16dd0:	adds	r1, r0, r7
   16dd4:	bne	16e44 <flatcc_builder_end_union_vector@@Base+0xc8>
   16dd8:	b	16f44 <flatcc_builder_end_union_vector@@Base+0x1c8>
   16ddc:	ldr	r2, [r4, #28]
   16de0:	ldr	r0, [r4, #40]	; 0x28
   16de4:	ldr	r5, [r4, #48]	; 0x30
   16de8:	mov	r3, #1
   16dec:	str	r3, [sp]
   16df0:	mov	r3, #1
   16df4:	add	r1, r1, r2
   16df8:	add	r2, r1, #1
   16dfc:	add	r1, r4, #60	; 0x3c
   16e00:	blx	r5
   16e04:	cmp	r0, #0
   16e08:	bne	16f44 <flatcc_builder_end_union_vector@@Base+0x1c8>
   16e0c:	ldr	r1, [r4, #28]
   16e10:	ldr	r0, [r4, #60]	; 0x3c
   16e14:	ldr	r3, [r4, #64]	; 0x40
   16e18:	ldr	r2, [r4, #32]
   16e1c:	add	r0, r0, r1
   16e20:	sub	r1, r3, r1
   16e24:	mvn	r3, #3
   16e28:	cmn	r1, #4
   16e2c:	str	r0, [r4, #16]
   16e30:	movcs	r1, r3
   16e34:	str	r1, [r4, #24]
   16e38:	str	r3, [r2, #4]
   16e3c:	adds	r1, r0, r7
   16e40:	beq	16f44 <flatcc_builder_end_union_vector@@Base+0x1c8>
   16e44:	add	r8, r1, r6, lsl #2
   16e48:	cmp	r6, #0
   16e4c:	beq	16e7c <flatcc_builder_end_union_vector@@Base+0x100>
   16e50:	add	r0, r0, #4
   16e54:	mov	r2, r6
   16e58:	mov	r3, r1
   16e5c:	mov	r7, r8
   16e60:	ldrb	r5, [r0, #-4]
   16e64:	subs	r2, r2, #1
   16e68:	strb	r5, [r7], #1
   16e6c:	ldr	r5, [r0]
   16e70:	add	r0, r0, #8
   16e74:	str	r5, [r3], #4
   16e78:	bne	16e60 <flatcc_builder_end_union_vector@@Base+0xe4>
   16e7c:	mov	r0, r4
   16e80:	mov	r2, r6
   16e84:	mov	r3, r8
   16e88:	bl	160a4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16e8c:	mov	r7, r0
   16e90:	mov	r9, #0
   16e94:	cmp	r0, #0
   16e98:	beq	16ec4 <flatcc_builder_end_union_vector@@Base+0x148>
   16e9c:	mvn	r0, #0
   16ea0:	mov	r1, #1
   16ea4:	mov	r2, r6
   16ea8:	mov	r3, #1
   16eac:	str	r1, [sp]
   16eb0:	str	r0, [sp, #4]
   16eb4:	mov	r0, r4
   16eb8:	mov	r1, r8
   16ebc:	bl	15e0c <flatcc_builder_create_vector@@Base>
   16ec0:	b	16ec8 <flatcc_builder_end_union_vector@@Base+0x14c>
   16ec4:	mov	r0, #0
   16ec8:	orr	r1, r9, r7
   16ecc:	stm	sl, {r0, r1}
   16ed0:	mov	r1, #0
   16ed4:	ldr	r0, [r4, #16]
   16ed8:	ldr	r2, [r4, #20]
   16edc:	bl	12480 <memset@plt>
   16ee0:	ldr	r0, [r4, #32]
   16ee4:	ldr	r1, [r4, #60]	; 0x3c
   16ee8:	ldr	r2, [r4, #64]	; 0x40
   16eec:	ldr	r3, [r0, #8]
   16ef0:	str	r3, [r4, #20]
   16ef4:	ldr	r3, [r0]
   16ef8:	str	r3, [r4, #28]
   16efc:	add	r1, r1, r3
   16f00:	ldr	r7, [r0, #4]
   16f04:	str	r1, [r4, #16]
   16f08:	sub	r1, r2, r3
   16f0c:	cmp	r1, r7
   16f10:	movhi	r1, r7
   16f14:	str	r1, [r4, #24]
   16f18:	ldrh	r1, [r4, #130]	; 0x82
   16f1c:	ldrh	r2, [r4, #128]	; 0x80
   16f20:	cmp	r2, r1
   16f24:	strhcc	r1, [r4, #128]	; 0x80
   16f28:	ldrh	r1, [r0, #12]
   16f2c:	sub	r0, r0, #36	; 0x24
   16f30:	str	r0, [r4, #32]
   16f34:	strh	r1, [r4, #130]	; 0x82
   16f38:	ldr	r0, [r4, #156]	; 0x9c
   16f3c:	sub	r0, r0, #1
   16f40:	str	r0, [r4, #156]	; 0x9c
   16f44:	sub	sp, fp, #28
   16f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f4c:	ldr	r0, [pc, #24]	; 16f6c <flatcc_builder_end_union_vector@@Base+0x1f0>
   16f50:	ldr	r1, [pc, #24]	; 16f70 <flatcc_builder_end_union_vector@@Base+0x1f4>
   16f54:	ldr	r3, [pc, #24]	; 16f74 <flatcc_builder_end_union_vector@@Base+0x1f8>
   16f58:	movw	r2, #1617	; 0x651
   16f5c:	add	r0, pc, r0
   16f60:	add	r1, pc, r1
   16f64:	add	r3, pc, r3
   16f68:	bl	124b0 <__assert_fail@plt>
   16f6c:	andeq	r2, r0, r7, asr r2
   16f70:	andeq	r1, r0, sl, lsl r6
   16f74:	andeq	r2, r0, r1, lsl #5

00016f78 <flatcc_builder_union_vector_count@@Base>:
   16f78:	ldr	r0, [r0, #32]
   16f7c:	ldr	r0, [r0, #20]
   16f80:	bx	lr

00016f84 <flatcc_builder_union_vector_edit@@Base>:
   16f84:	ldr	r0, [r0, #16]
   16f88:	bx	lr

00016f8c <flatcc_builder_extend_union_vector@@Base>:
   16f8c:	push	{r4, r5, fp, lr}
   16f90:	add	fp, sp, #8
   16f94:	sub	sp, sp, #8
   16f98:	mov	r4, r0
   16f9c:	ldr	r0, [r0, #32]
   16fa0:	ldr	r2, [r0, #20]
   16fa4:	adds	r2, r2, r1
   16fa8:	cmpcc	r2, #536870912	; 0x20000000
   16fac:	bcc	16fd0 <flatcc_builder_extend_union_vector@@Base+0x44>
   16fb0:	ldr	r0, [pc, #184]	; 17070 <flatcc_builder_extend_union_vector@@Base+0xe4>
   16fb4:	ldr	r1, [pc, #184]	; 17074 <flatcc_builder_extend_union_vector@@Base+0xe8>
   16fb8:	ldr	r3, [pc, #184]	; 17078 <flatcc_builder_extend_union_vector@@Base+0xec>
   16fbc:	mov	r2, #892	; 0x37c
   16fc0:	add	r0, pc, r0
   16fc4:	add	r1, pc, r1
   16fc8:	add	r3, pc, r3
   16fcc:	bl	124b0 <__assert_fail@plt>
   16fd0:	str	r2, [r0, #20]
   16fd4:	ldr	r5, [r4, #20]
   16fd8:	ldr	r0, [r4, #24]
   16fdc:	add	r1, r5, r1, lsl #3
   16fe0:	cmp	r1, r0
   16fe4:	str	r1, [r4, #20]
   16fe8:	bcs	16ff4 <flatcc_builder_extend_union_vector@@Base+0x68>
   16fec:	ldr	r0, [r4, #16]
   16ff0:	b	17064 <flatcc_builder_extend_union_vector@@Base+0xd8>
   16ff4:	ldr	r2, [r4, #28]
   16ff8:	ldr	r0, [r4, #40]	; 0x28
   16ffc:	ldr	ip, [r4, #48]	; 0x30
   17000:	mov	r3, #1
   17004:	str	r3, [sp]
   17008:	mov	r3, #1
   1700c:	add	r1, r1, r2
   17010:	add	r2, r1, #1
   17014:	add	r1, r4, #60	; 0x3c
   17018:	blx	ip
   1701c:	mov	r1, r0
   17020:	mov	r0, #0
   17024:	cmp	r1, #0
   17028:	beq	17034 <flatcc_builder_extend_union_vector@@Base+0xa8>
   1702c:	sub	sp, fp, #8
   17030:	pop	{r4, r5, fp, pc}
   17034:	ldr	r1, [r4, #28]
   17038:	ldr	r0, [r4, #60]	; 0x3c
   1703c:	ldr	r3, [r4, #64]	; 0x40
   17040:	ldr	r2, [r4, #32]
   17044:	add	r0, r0, r1
   17048:	sub	r1, r3, r1
   1704c:	mvn	r3, #3
   17050:	cmn	r1, #4
   17054:	str	r0, [r4, #16]
   17058:	movcs	r1, r3
   1705c:	str	r1, [r4, #24]
   17060:	str	r3, [r2, #4]
   17064:	add	r0, r0, r5
   17068:	sub	sp, fp, #8
   1706c:	pop	{r4, r5, fp, pc}
   17070:	andeq	r2, r0, r0, lsl #13
   17074:			; <UNDEFINED> instruction: 0x000015b6
   17078:	muleq	r0, r3, r6

0001707c <flatcc_builder_truncate_union_vector@@Base>:
   1707c:	push	{fp, lr}
   17080:	mov	fp, sp
   17084:	ldr	r2, [r0, #32]
   17088:	ldrh	r3, [r2, #14]
   1708c:	cmp	r3, #7
   17090:	bne	170d8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17094:	ldr	r3, [r2, #20]
   17098:	cmp	r3, r1
   1709c:	bcc	170f8 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   170a0:	sub	r3, r3, r1
   170a4:	str	r3, [r2, #20]
   170a8:	ldr	r2, [r0, #32]
   170ac:	ldr	r3, [r0, #20]
   170b0:	ldr	ip, [r0, #16]
   170b4:	ldr	r2, [r2, #16]
   170b8:	mls	r3, r2, r1, r3
   170bc:	mul	r2, r2, r1
   170c0:	mov	r1, #0
   170c4:	str	r3, [r0, #20]
   170c8:	add	r0, ip, r3
   170cc:	bl	12480 <memset@plt>
   170d0:	mov	r0, #0
   170d4:	pop	{fp, pc}
   170d8:	ldr	r0, [pc, #56]	; 17118 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   170dc:	ldr	r1, [pc, #56]	; 1711c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   170e0:	ldr	r3, [pc, #56]	; 17120 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   170e4:	movw	r2, #1665	; 0x681
   170e8:	add	r0, pc, r0
   170ec:	add	r1, pc, r1
   170f0:	add	r3, pc, r3
   170f4:	bl	124b0 <__assert_fail@plt>
   170f8:	ldr	r0, [pc, #36]	; 17124 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   170fc:	ldr	r1, [pc, #36]	; 17128 <flatcc_builder_truncate_union_vector@@Base+0xac>
   17100:	ldr	r3, [pc, #36]	; 1712c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   17104:	movw	r2, #1666	; 0x682
   17108:	add	r0, pc, r0
   1710c:	add	r1, pc, r1
   17110:	add	r3, pc, r3
   17114:	bl	124b0 <__assert_fail@plt>
   17118:	andeq	r2, r0, fp, asr #1
   1711c:	andeq	r1, r0, lr, lsl #9
   17120:	andeq	r2, r0, r8, asr #2
   17124:	andeq	r1, r0, pc, lsl #22
   17128:	andeq	r1, r0, lr, ror #8
   1712c:	andeq	r2, r0, r8, lsr #2

00017130 <flatcc_builder_union_vector_push@@Base>:
   17130:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17134:	add	fp, sp, #24
   17138:	sub	sp, sp, #8
   1713c:	mov	r7, r0
   17140:	ldr	r0, [r0, #32]
   17144:	mov	r9, r1
   17148:	ldrh	r1, [r0, #14]
   1714c:	cmp	r1, #7
   17150:	bne	1720c <flatcc_builder_union_vector_push@@Base+0xdc>
   17154:	ldr	r1, [r0, #20]
   17158:	mov	r6, #0
   1715c:	cmn	r1, #-536870911	; 0xe0000001
   17160:	beq	17200 <flatcc_builder_union_vector_push@@Base+0xd0>
   17164:	add	r1, r1, #1
   17168:	mov	r8, r2
   1716c:	str	r1, [r0, #20]
   17170:	ldr	r4, [r7, #20]
   17174:	ldr	r0, [r7, #24]
   17178:	add	r1, r4, #8
   1717c:	cmp	r1, r0
   17180:	str	r1, [r7, #20]
   17184:	bcs	17190 <flatcc_builder_union_vector_push@@Base+0x60>
   17188:	ldr	r0, [r7, #16]
   1718c:	b	171f0 <flatcc_builder_union_vector_push@@Base+0xc0>
   17190:	ldr	r1, [r7, #28]
   17194:	ldr	r0, [r7, #40]	; 0x28
   17198:	ldr	r5, [r7, #48]	; 0x30
   1719c:	mov	r2, #1
   171a0:	mov	r3, #1
   171a4:	str	r2, [sp]
   171a8:	add	r1, r4, r1
   171ac:	add	r2, r1, #9
   171b0:	add	r1, r7, #60	; 0x3c
   171b4:	blx	r5
   171b8:	cmp	r0, #0
   171bc:	bne	17200 <flatcc_builder_union_vector_push@@Base+0xd0>
   171c0:	ldr	r1, [r7, #28]
   171c4:	ldr	r0, [r7, #60]	; 0x3c
   171c8:	ldr	r3, [r7, #64]	; 0x40
   171cc:	ldr	r2, [r7, #32]
   171d0:	add	r0, r0, r1
   171d4:	sub	r1, r3, r1
   171d8:	mvn	r3, #3
   171dc:	cmn	r1, #4
   171e0:	str	r0, [r7, #16]
   171e4:	movcs	r1, r3
   171e8:	str	r1, [r7, #24]
   171ec:	str	r3, [r2, #4]
   171f0:	adds	r0, r0, r4
   171f4:	movne	r6, r0
   171f8:	strne	r9, [r0]
   171fc:	strne	r8, [r0, #4]
   17200:	mov	r0, r6
   17204:	sub	sp, fp, #24
   17208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1720c:	ldr	r0, [pc, #24]	; 1722c <flatcc_builder_union_vector_push@@Base+0xfc>
   17210:	ldr	r1, [pc, #24]	; 17230 <flatcc_builder_union_vector_push@@Base+0x100>
   17214:	ldr	r3, [pc, #24]	; 17234 <flatcc_builder_union_vector_push@@Base+0x104>
   17218:	movw	r2, #1677	; 0x68d
   1721c:	add	r0, pc, r0
   17220:	add	r1, pc, r1
   17224:	add	r3, pc, r3
   17228:	bl	124b0 <__assert_fail@plt>
   1722c:	muleq	r0, r7, pc	; <UNPREDICTABLE>
   17230:	andeq	r1, r0, sl, asr r3
   17234:	andeq	r2, r0, r9, asr r0

00017238 <flatcc_builder_append_union_vector@@Base>:
   17238:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1723c:	add	fp, sp, #24
   17240:	sub	sp, sp, #8
   17244:	mov	r6, r0
   17248:	ldr	r0, [r0, #32]
   1724c:	mov	r8, r1
   17250:	ldrh	r1, [r0, #14]
   17254:	cmp	r1, #7
   17258:	bne	17348 <flatcc_builder_append_union_vector@@Base+0x110>
   1725c:	ldr	r1, [r0, #20]
   17260:	mov	r5, r2
   17264:	adds	r1, r1, r2
   17268:	cmpcc	r1, #536870912	; 0x20000000
   1726c:	bcc	17290 <flatcc_builder_append_union_vector@@Base+0x58>
   17270:	ldr	r0, [pc, #252]	; 17374 <flatcc_builder_append_union_vector@@Base+0x13c>
   17274:	ldr	r1, [pc, #252]	; 17378 <flatcc_builder_append_union_vector@@Base+0x140>
   17278:	ldr	r3, [pc, #252]	; 1737c <flatcc_builder_append_union_vector@@Base+0x144>
   1727c:	mov	r2, #892	; 0x37c
   17280:	add	r0, pc, r0
   17284:	add	r1, pc, r1
   17288:	add	r3, pc, r3
   1728c:	bl	124b0 <__assert_fail@plt>
   17290:	str	r1, [r0, #20]
   17294:	ldr	r4, [r6, #20]
   17298:	ldr	r0, [r6, #24]
   1729c:	add	r1, r4, r5, lsl #3
   172a0:	cmp	r1, r0
   172a4:	str	r1, [r6, #20]
   172a8:	bcs	172cc <flatcc_builder_append_union_vector@@Base+0x94>
   172ac:	ldr	r0, [r6, #16]
   172b0:	adds	r7, r0, r4
   172b4:	beq	17338 <flatcc_builder_append_union_vector@@Base+0x100>
   172b8:	lsl	r2, r5, #3
   172bc:	mov	r0, r7
   172c0:	mov	r1, r8
   172c4:	bl	123fc <memcpy@plt>
   172c8:	b	1733c <flatcc_builder_append_union_vector@@Base+0x104>
   172cc:	ldr	r2, [r6, #28]
   172d0:	ldr	r0, [r6, #40]	; 0x28
   172d4:	ldr	r7, [r6, #48]	; 0x30
   172d8:	mov	r3, #1
   172dc:	str	r3, [sp]
   172e0:	mov	r3, #1
   172e4:	add	r1, r1, r2
   172e8:	add	r2, r1, #1
   172ec:	add	r1, r6, #60	; 0x3c
   172f0:	blx	r7
   172f4:	mov	r7, #0
   172f8:	cmp	r0, #0
   172fc:	bne	1733c <flatcc_builder_append_union_vector@@Base+0x104>
   17300:	ldr	r1, [r6, #28]
   17304:	ldr	r0, [r6, #60]	; 0x3c
   17308:	ldr	r3, [r6, #64]	; 0x40
   1730c:	ldr	r2, [r6, #32]
   17310:	add	r0, r0, r1
   17314:	sub	r1, r3, r1
   17318:	mvn	r3, #3
   1731c:	cmn	r1, #4
   17320:	str	r0, [r6, #16]
   17324:	movcs	r1, r3
   17328:	str	r1, [r6, #24]
   1732c:	str	r3, [r2, #4]
   17330:	adds	r7, r0, r4
   17334:	bne	172b8 <flatcc_builder_append_union_vector@@Base+0x80>
   17338:	mov	r7, #0
   1733c:	mov	r0, r7
   17340:	sub	sp, fp, #24
   17344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17348:	ldr	r0, [pc, #24]	; 17368 <flatcc_builder_append_union_vector@@Base+0x130>
   1734c:	ldr	r1, [pc, #24]	; 1736c <flatcc_builder_append_union_vector@@Base+0x134>
   17350:	ldr	r3, [pc, #24]	; 17370 <flatcc_builder_append_union_vector@@Base+0x138>
   17354:	movw	r2, #1692	; 0x69c
   17358:	add	r0, pc, r0
   1735c:	add	r1, pc, r1
   17360:	add	r3, pc, r3
   17364:	bl	124b0 <__assert_fail@plt>
   17368:	andeq	r1, r0, fp, asr lr
   1736c:	andeq	r1, r0, lr, lsl r2
   17370:	andeq	r1, r0, sl, lsl #31
   17374:	andeq	r2, r0, r0, asr #7
   17378:	strdeq	r1, [r0], -r6
   1737c:	ldrdeq	r2, [r0], -r3

00017380 <flatcc_builder_create_string@@Base>:
   17380:	push	{r4, r5, r6, sl, fp, lr}
   17384:	add	fp, sp, #16
   17388:	sub	sp, sp, #80	; 0x50
   1738c:	str	r2, [fp, #-20]	; 0xffffffec
   17390:	mvn	r5, r2
   17394:	mov	r6, r0
   17398:	mov	r3, #1
   1739c:	cmp	r2, #0
   173a0:	ldr	ip, [r0, #136]	; 0x88
   173a4:	sub	r0, fp, #20
   173a8:	str	r0, [sp, #12]
   173ac:	mov	r0, #4
   173b0:	str	r0, [sp, #4]
   173b4:	str	r0, [sp, #16]
   173b8:	str	r3, [sp, #8]
   173bc:	add	r5, ip, r5
   173c0:	and	r5, r5, #3
   173c4:	add	r5, r5, #1
   173c8:	beq	173e4 <flatcc_builder_create_string@@Base+0x64>
   173cc:	mov	r3, #2
   173d0:	add	r0, r2, #4
   173d4:	str	r1, [sp, #20]
   173d8:	str	r2, [sp, #24]
   173dc:	str	r3, [sp, #8]
   173e0:	str	r0, [sp, #4]
   173e4:	add	r1, r0, r5
   173e8:	add	lr, sp, #4
   173ec:	str	r1, [sp, #4]
   173f0:	add	r0, lr, r3, lsl #3
   173f4:	cmp	r1, #0
   173f8:	ldr	r2, [pc, #132]	; 17484 <flatcc_builder_create_string@@Base+0x104>
   173fc:	ldr	r2, [pc, r2]
   17400:	str	r2, [r0, #8]
   17404:	add	r2, r3, #1
   17408:	str	r5, [r0, #12]
   1740c:	str	r2, [sp, #8]
   17410:	ble	17464 <flatcc_builder_create_string@@Base+0xe4>
   17414:	ldr	r0, [r6, #36]	; 0x24
   17418:	ldr	r4, [r6, #44]	; 0x2c
   1741c:	sub	r5, ip, r1
   17420:	str	r1, [sp]
   17424:	add	r1, lr, #8
   17428:	mov	r3, r5
   1742c:	blx	r4
   17430:	cmp	r0, #0
   17434:	streq	r5, [r6, #136]	; 0x88
   17438:	moveq	r0, r5
   1743c:	subeq	sp, fp, #16
   17440:	popeq	{r4, r5, r6, sl, fp, pc}
   17444:	ldr	r0, [pc, #72]	; 17494 <flatcc_builder_create_string@@Base+0x114>
   17448:	ldr	r1, [pc, #72]	; 17498 <flatcc_builder_create_string@@Base+0x118>
   1744c:	ldr	r3, [pc, #72]	; 1749c <flatcc_builder_create_string@@Base+0x11c>
   17450:	movw	r2, #651	; 0x28b
   17454:	add	r0, pc, r0
   17458:	add	r1, pc, r1
   1745c:	add	r3, pc, r3
   17460:	bl	124b0 <__assert_fail@plt>
   17464:	ldr	r0, [pc, #28]	; 17488 <flatcc_builder_create_string@@Base+0x108>
   17468:	ldr	r1, [pc, #28]	; 1748c <flatcc_builder_create_string@@Base+0x10c>
   1746c:	ldr	r3, [pc, #28]	; 17490 <flatcc_builder_create_string@@Base+0x110>
   17470:	movw	r2, #647	; 0x287
   17474:	add	r0, pc, r0
   17478:	add	r1, pc, r1
   1747c:	add	r3, pc, r3
   17480:	bl	124b0 <__assert_fail@plt>
   17484:	andeq	r2, r1, r0, asr ip
   17488:	andeq	r2, r0, r3, asr #5
   1748c:	andeq	r1, r0, r2, lsl #2
   17490:	andeq	r2, r0, sl, ror r1
   17494:	andeq	r2, r0, r3, ror #5
   17498:	andeq	r1, r0, r2, lsr #2
   1749c:	muleq	r0, sl, r1

000174a0 <flatcc_builder_create_string_str@@Base>:
   174a0:	push	{r4, r5, fp, lr}
   174a4:	add	fp, sp, #8
   174a8:	mov	r5, r0
   174ac:	mov	r0, r1
   174b0:	mov	r4, r1
   174b4:	bl	1245c <strlen@plt>
   174b8:	mov	r2, r0
   174bc:	mov	r0, r5
   174c0:	mov	r1, r4
   174c4:	pop	{r4, r5, fp, lr}
   174c8:	b	17380 <flatcc_builder_create_string@@Base>

000174cc <flatcc_builder_create_string_strn@@Base>:
   174cc:	push	{r4, r5, r6, sl, fp, lr}
   174d0:	add	fp, sp, #16
   174d4:	mov	r6, r0
   174d8:	mov	r5, r1
   174dc:	mov	r0, r1
   174e0:	mov	r1, #0
   174e4:	mov	r4, r2
   174e8:	bl	1248c <memchr@plt>
   174ec:	cmp	r0, #0
   174f0:	mov	r1, r5
   174f4:	subne	r4, r0, r5
   174f8:	mov	r0, r6
   174fc:	mov	r2, r4
   17500:	pop	{r4, r5, r6, sl, fp, lr}
   17504:	b	17380 <flatcc_builder_create_string@@Base>

00017508 <flatcc_builder_end_string@@Base>:
   17508:	push	{r4, r5, fp, lr}
   1750c:	add	fp, sp, #8
   17510:	mov	r4, r0
   17514:	ldr	r0, [r0, #32]
   17518:	ldrh	r1, [r0, #14]
   1751c:	cmp	r1, #6
   17520:	bne	175c8 <flatcc_builder_end_string@@Base+0xc0>
   17524:	ldr	r2, [r0, #20]
   17528:	ldr	r0, [r4, #20]
   1752c:	cmp	r2, r0
   17530:	bne	175e8 <flatcc_builder_end_string@@Base+0xe0>
   17534:	ldr	r1, [r4, #16]
   17538:	mov	r0, r4
   1753c:	bl	17380 <flatcc_builder_create_string@@Base>
   17540:	mov	r5, r0
   17544:	cmp	r0, #0
   17548:	beq	175c0 <flatcc_builder_end_string@@Base+0xb8>
   1754c:	ldr	r0, [r4, #16]
   17550:	ldr	r2, [r4, #20]
   17554:	mov	r1, #0
   17558:	bl	12480 <memset@plt>
   1755c:	ldr	r0, [r4, #32]
   17560:	ldr	r1, [r4, #60]	; 0x3c
   17564:	ldr	ip, [r4, #64]	; 0x40
   17568:	ldr	r3, [r0, #8]
   1756c:	str	r3, [r4, #20]
   17570:	ldr	r3, [r0]
   17574:	str	r3, [r4, #28]
   17578:	add	r1, r1, r3
   1757c:	ldr	r2, [r0, #4]
   17580:	str	r1, [r4, #16]
   17584:	sub	r1, ip, r3
   17588:	cmp	r1, r2
   1758c:	movhi	r1, r2
   17590:	str	r1, [r4, #24]
   17594:	ldrh	r1, [r4, #130]	; 0x82
   17598:	ldrh	r2, [r4, #128]	; 0x80
   1759c:	cmp	r2, r1
   175a0:	strhcc	r1, [r4, #128]	; 0x80
   175a4:	ldrh	r1, [r0, #12]
   175a8:	sub	r0, r0, #36	; 0x24
   175ac:	str	r0, [r4, #32]
   175b0:	strh	r1, [r4, #130]	; 0x82
   175b4:	ldr	r0, [r4, #156]	; 0x9c
   175b8:	sub	r0, r0, #1
   175bc:	str	r0, [r4, #156]	; 0x9c
   175c0:	mov	r0, r5
   175c4:	pop	{r4, r5, fp, pc}
   175c8:	ldr	r0, [pc, #56]	; 17608 <flatcc_builder_end_string@@Base+0x100>
   175cc:	ldr	r1, [pc, #56]	; 1760c <flatcc_builder_end_string@@Base+0x104>
   175d0:	ldr	r3, [pc, #56]	; 17610 <flatcc_builder_end_string@@Base+0x108>
   175d4:	movw	r2, #1732	; 0x6c4
   175d8:	add	r0, pc, r0
   175dc:	add	r1, pc, r1
   175e0:	add	r3, pc, r3
   175e4:	bl	124b0 <__assert_fail@plt>
   175e8:	ldr	r0, [pc, #36]	; 17614 <flatcc_builder_end_string@@Base+0x10c>
   175ec:	ldr	r1, [pc, #36]	; 17618 <flatcc_builder_end_string@@Base+0x110>
   175f0:	ldr	r3, [pc, #36]	; 1761c <flatcc_builder_end_string@@Base+0x114>
   175f4:	movw	r2, #1733	; 0x6c5
   175f8:	add	r0, pc, r0
   175fc:	add	r1, pc, r1
   17600:	add	r3, pc, r3
   17604:	bl	124b0 <__assert_fail@plt>
   17608:	ldrdeq	r1, [r0], -lr
   1760c:	muleq	r0, lr, pc	; <UNPREDICTABLE>
   17610:	andeq	r1, r0, r9, lsl #27
   17614:			; <UNDEFINED> instruction: 0x00001db4
   17618:	andeq	r0, r0, lr, ror pc
   1761c:	andeq	r1, r0, r9, ror #26

00017620 <flatcc_builder_string_edit@@Base>:
   17620:	ldr	r0, [r0, #16]
   17624:	bx	lr

00017628 <flatcc_builder_string_len@@Base>:
   17628:	ldr	r0, [r0, #32]
   1762c:	ldr	r0, [r0, #20]
   17630:	bx	lr

00017634 <flatcc_builder_table_edit@@Base>:
   17634:	ldr	r2, [r0, #32]
   17638:	ldrh	r2, [r2, #14]
   1763c:	cmp	r2, #3
   17640:	ldreq	r2, [r0, #16]
   17644:	ldreq	r0, [r0, #20]
   17648:	addeq	r0, r2, r0
   1764c:	subeq	r0, r0, r1
   17650:	bxeq	lr
   17654:	push	{fp, lr}
   17658:	mov	fp, sp
   1765c:	ldr	r0, [pc, #24]	; 1767c <flatcc_builder_table_edit@@Base+0x48>
   17660:	ldr	r1, [pc, #24]	; 17680 <flatcc_builder_table_edit@@Base+0x4c>
   17664:	ldr	r3, [pc, #24]	; 17684 <flatcc_builder_table_edit@@Base+0x50>
   17668:	movw	r2, #1794	; 0x702
   1766c:	add	r0, pc, r0
   17670:	add	r1, pc, r1
   17674:	add	r3, pc, r3
   17678:	bl	124b0 <__assert_fail@plt>
   1767c:	andeq	r1, r0, sl, lsr r7
   17680:	andeq	r0, r0, sl, lsl #30
   17684:	andeq	r1, r0, sl, ror #27

00017688 <flatcc_builder_table_add_copy@@Base>:
   17688:	push	{r4, r5, r6, sl, fp, lr}
   1768c:	add	fp, sp, #16
   17690:	mov	r4, r3
   17694:	ldr	r3, [fp, #8]
   17698:	mov	r5, r2
   1769c:	mov	r2, r4
   176a0:	bl	166bc <flatcc_builder_table_add@@Base>
   176a4:	mov	r6, r0
   176a8:	cmp	r0, #0
   176ac:	beq	176c0 <flatcc_builder_table_add_copy@@Base+0x38>
   176b0:	mov	r0, r6
   176b4:	mov	r1, r5
   176b8:	mov	r2, r4
   176bc:	bl	123fc <memcpy@plt>
   176c0:	mov	r0, r6
   176c4:	pop	{r4, r5, r6, sl, fp, pc}

000176c8 <flatcc_builder_push_buffer_alignment@@Base>:
   176c8:	ldrh	r1, [r0, #128]	; 0x80
   176cc:	mov	r2, #4
   176d0:	strh	r2, [r0, #128]	; 0x80
   176d4:	mov	r0, r1
   176d8:	bx	lr

000176dc <flatcc_builder_pop_buffer_alignment@@Base>:
   176dc:	ldrh	r2, [r0, #128]	; 0x80
   176e0:	cmp	r2, r1
   176e4:	strhcc	r1, [r0, #128]	; 0x80
   176e8:	bx	lr

000176ec <flatcc_builder_get_buffer_alignment@@Base>:
   176ec:	ldrh	r0, [r0, #128]	; 0x80
   176f0:	bx	lr

000176f4 <flatcc_builder_set_vtable_clustering@@Base>:
   176f4:	clz	r1, r1
   176f8:	lsr	r1, r1, #5
   176fc:	str	r1, [r0, #180]	; 0xb4
   17700:	bx	lr

00017704 <flatcc_builder_set_block_align@@Base>:
   17704:	strh	r1, [r0, #132]	; 0x84
   17708:	bx	lr

0001770c <flatcc_builder_get_level@@Base>:
   1770c:	ldr	r0, [r0, #156]	; 0x9c
   17710:	bx	lr

00017714 <flatcc_builder_set_max_level@@Base>:
   17714:	str	r1, [r0, #176]	; 0xb0
   17718:	ldr	r2, [r0, #160]	; 0xa0
   1771c:	cmp	r2, r1
   17720:	strlt	r1, [r0, #160]	; 0xa0
   17724:	bx	lr

00017728 <flatcc_builder_get_buffer_size@@Base>:
   17728:	ldr	r1, [r0, #136]	; 0x88
   1772c:	ldr	r0, [r0, #140]	; 0x8c
   17730:	sub	r0, r0, r1
   17734:	bx	lr

00017738 <flatcc_builder_get_buffer_start@@Base>:
   17738:	ldr	r0, [r0, #136]	; 0x88
   1773c:	bx	lr

00017740 <flatcc_builder_get_buffer_end@@Base>:
   17740:	ldr	r0, [r0, #140]	; 0x8c
   17744:	bx	lr

00017748 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17748:	str	r1, [r0, #172]	; 0xac
   1774c:	bx	lr

00017750 <flatcc_builder_set_identifier@@Base>:
   17750:	ldr	r2, [pc, #20]	; 1776c <flatcc_builder_set_identifier@@Base+0x1c>
   17754:	cmp	r1, #0
   17758:	ldr	r2, [pc, r2]
   1775c:	movne	r2, r1
   17760:	ldr	r1, [r2]
   17764:	str	r1, [r0, #168]	; 0xa8
   17768:	bx	lr
   1776c:	strdeq	r2, [r1], -r4

00017770 <flatcc_builder_get_type@@Base>:
   17770:	ldr	r0, [r0, #32]
   17774:	cmp	r0, #0
   17778:	ldrhne	r0, [r0, #14]
   1777c:	moveq	r0, #0
   17780:	bx	lr

00017784 <flatcc_builder_get_type_at@@Base>:
   17784:	mov	r2, r0
   17788:	cmp	r1, #1
   1778c:	mov	r0, #0
   17790:	ldrge	r3, [r2, #156]	; 0x9c
   17794:	cmpge	r3, r1
   17798:	bge	177a0 <flatcc_builder_get_type_at@@Base+0x1c>
   1779c:	bx	lr
   177a0:	sub	r0, r1, r3
   177a4:	ldr	r1, [r2, #32]
   177a8:	add	r0, r0, r0, lsl #3
   177ac:	add	r0, r1, r0, lsl #2
   177b0:	ldrh	r0, [r0, #14]
   177b4:	bx	lr

000177b8 <flatcc_builder_get_direct_buffer@@Base>:
   177b8:	ldr	r2, [r0, #184]	; 0xb8
   177bc:	cmp	r2, #0
   177c0:	beq	177d4 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   177c4:	ldr	r2, [r0, #188]	; 0xbc
   177c8:	ldr	r3, [r0, #192]	; 0xc0
   177cc:	cmp	r2, r3
   177d0:	beq	177ec <flatcc_builder_get_direct_buffer@@Base+0x34>
   177d4:	cmp	r1, #0
   177d8:	moveq	r0, #0
   177dc:	bxeq	lr
   177e0:	mov	r0, #0
   177e4:	str	r0, [r1]
   177e8:	bx	lr
   177ec:	cmp	r1, #0
   177f0:	ldrne	r2, [r0, #212]	; 0xd4
   177f4:	strne	r2, [r1]
   177f8:	ldr	r0, [r0, #196]	; 0xc4
   177fc:	bx	lr

00017800 <flatcc_builder_copy_buffer@@Base>:
   17800:	push	{fp, lr}
   17804:	mov	fp, sp
   17808:	ldr	r3, [r0, #184]	; 0xb8
   1780c:	cmp	r3, #0
   17810:	beq	17844 <flatcc_builder_copy_buffer@@Base+0x44>
   17814:	add	r0, r0, #188	; 0xbc
   17818:	bl	17f50 <flatcc_emitter_copy_buffer@@Base>
   1781c:	cmp	r0, #0
   17820:	popne	{fp, pc}
   17824:	ldr	r0, [pc, #32]	; 1784c <flatcc_builder_copy_buffer@@Base+0x4c>
   17828:	ldr	r1, [pc, #32]	; 17850 <flatcc_builder_copy_buffer@@Base+0x50>
   1782c:	ldr	r3, [pc, #32]	; 17854 <flatcc_builder_copy_buffer@@Base+0x54>
   17830:	movw	r2, #1926	; 0x786
   17834:	add	r0, pc, r0
   17838:	add	r1, pc, r1
   1783c:	add	r3, pc, r3
   17840:	bl	124b0 <__assert_fail@plt>
   17844:	mov	r0, #0
   17848:	pop	{fp, pc}
   1784c:			; <UNDEFINED> instruction: 0x00000fb1
   17850:	andeq	r0, r0, r2, asr #26
   17854:	andeq	r1, r0, sp, lsr #25

00017858 <flatcc_builder_finalize_buffer@@Base>:
   17858:	push	{r4, r5, r6, sl, fp, lr}
   1785c:	add	fp, sp, #16
   17860:	mov	r5, r0
   17864:	ldr	r0, [r0, #136]	; 0x88
   17868:	cmp	r1, #0
   1786c:	ldr	r2, [r5, #140]	; 0x8c
   17870:	sub	r4, r2, r0
   17874:	mov	r0, r4
   17878:	strne	r4, [r1]
   1787c:	bl	12438 <malloc@plt>
   17880:	cmp	r0, #0
   17884:	beq	178d4 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17888:	mov	r6, r0
   1788c:	ldr	r0, [r5, #184]	; 0xb8
   17890:	cmp	r0, #0
   17894:	beq	178f4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17898:	add	r0, r5, #188	; 0xbc
   1789c:	mov	r1, r6
   178a0:	mov	r2, r4
   178a4:	bl	17f50 <flatcc_emitter_copy_buffer@@Base>
   178a8:	cmp	r0, #0
   178ac:	movne	r0, r6
   178b0:	popne	{r4, r5, r6, sl, fp, pc}
   178b4:	ldr	r0, [pc, #88]	; 17914 <flatcc_builder_finalize_buffer@@Base+0xbc>
   178b8:	ldr	r1, [pc, #88]	; 17918 <flatcc_builder_finalize_buffer@@Base+0xc0>
   178bc:	ldr	r3, [pc, #88]	; 1791c <flatcc_builder_finalize_buffer@@Base+0xc4>
   178c0:	movw	r2, #1926	; 0x786
   178c4:	add	r0, pc, r0
   178c8:	add	r1, pc, r1
   178cc:	add	r3, pc, r3
   178d0:	bl	124b0 <__assert_fail@plt>
   178d4:	ldr	r0, [pc, #80]	; 1792c <flatcc_builder_finalize_buffer@@Base+0xd4>
   178d8:	ldr	r1, [pc, #80]	; 17930 <flatcc_builder_finalize_buffer@@Base+0xd8>
   178dc:	ldr	r3, [pc, #80]	; 17934 <flatcc_builder_finalize_buffer@@Base+0xdc>
   178e0:	movw	r2, #1944	; 0x798
   178e4:	add	r0, pc, r0
   178e8:	add	r1, pc, r1
   178ec:	add	r3, pc, r3
   178f0:	bl	124b0 <__assert_fail@plt>
   178f4:	ldr	r0, [pc, #36]	; 17920 <flatcc_builder_finalize_buffer@@Base+0xc8>
   178f8:	ldr	r1, [pc, #36]	; 17924 <flatcc_builder_finalize_buffer@@Base+0xcc>
   178fc:	ldr	r3, [pc, #36]	; 17928 <flatcc_builder_finalize_buffer@@Base+0xd0>
   17900:	movw	r2, #1948	; 0x79c
   17904:	add	r0, pc, r0
   17908:	add	r1, pc, r1
   1790c:	add	r3, pc, r3
   17910:	bl	124b0 <__assert_fail@plt>
   17914:	andeq	r0, r0, r1, lsr #30
   17918:			; <UNDEFINED> instruction: 0x00000cb2
   1791c:	andeq	r1, r0, sp, lsl ip
   17920:	andeq	r1, r0, r3, lsr lr
   17924:	andeq	r0, r0, r2, ror ip
   17928:	andeq	r1, r0, r2, lsr #24
   1792c:	andeq	r1, r0, r3, asr lr
   17930:	muleq	r0, r2, ip
   17934:	andeq	r1, r0, r2, asr #24

00017938 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17938:	push	{r4, r5, r6, r7, fp, lr}
   1793c:	add	fp, sp, #16
   17940:	sub	sp, sp, #8
   17944:	mov	r5, r0
   17948:	mov	r4, r1
   1794c:	ldr	r0, [r0, #136]	; 0x88
   17950:	ldr	r1, [r5, #140]	; 0x8c
   17954:	cmp	r4, #0
   17958:	sub	r0, r1, r0
   1795c:	mov	r1, #0
   17960:	strne	r0, [r4]
   17964:	ldrh	r2, [r5, #128]	; 0x80
   17968:	str	r1, [sp, #4]
   1796c:	add	r0, r0, r2
   17970:	cmp	r2, #4
   17974:	mov	r1, r2
   17978:	rsb	r2, r2, #0
   1797c:	sub	r0, r0, #1
   17980:	movls	r1, #4
   17984:	and	r7, r0, r2
   17988:	add	r0, sp, #4
   1798c:	mov	r2, r7
   17990:	bl	12474 <posix_memalign@plt>
   17994:	ldr	r6, [sp, #4]
   17998:	cmp	r0, #0
   1799c:	cmpne	r6, #0
   179a0:	bne	179f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   179a4:	cmp	r6, #0
   179a8:	beq	179f8 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   179ac:	ldr	r0, [r5, #184]	; 0xb8
   179b0:	cmp	r0, #0
   179b4:	beq	179f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   179b8:	add	r0, r5, #188	; 0xbc
   179bc:	mov	r1, r6
   179c0:	mov	r2, r7
   179c4:	bl	17f50 <flatcc_emitter_copy_buffer@@Base>
   179c8:	cmp	r0, #0
   179cc:	bne	17a04 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   179d0:	ldr	r0, [pc, #56]	; 17a10 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   179d4:	ldr	r1, [pc, #56]	; 17a14 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   179d8:	ldr	r3, [pc, #56]	; 17a18 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   179dc:	movw	r2, #1926	; 0x786
   179e0:	add	r0, pc, r0
   179e4:	add	r1, pc, r1
   179e8:	add	r3, pc, r3
   179ec:	bl	124b0 <__assert_fail@plt>
   179f0:	mov	r0, r6
   179f4:	bl	123f0 <free@plt>
   179f8:	mov	r6, #0
   179fc:	cmp	r4, #0
   17a00:	strne	r6, [r4]
   17a04:	mov	r0, r6
   17a08:	sub	sp, fp, #16
   17a0c:	pop	{r4, r5, r6, r7, fp, pc}
   17a10:	andeq	r0, r0, r5, lsl #28
   17a14:	muleq	r0, r6, fp
   17a18:	andeq	r1, r0, r1, lsl #22

00017a1c <flatcc_builder_aligned_alloc@@Base>:
   17a1c:	push	{fp, lr}
   17a20:	mov	fp, sp
   17a24:	sub	sp, sp, #8
   17a28:	mov	r2, r1
   17a2c:	mov	r1, r0
   17a30:	mov	r0, #0
   17a34:	cmp	r1, #4
   17a38:	str	r0, [sp, #4]
   17a3c:	add	r0, sp, #4
   17a40:	movls	r1, #4
   17a44:	bl	12474 <posix_memalign@plt>
   17a48:	mov	r1, r0
   17a4c:	ldr	r0, [sp, #4]
   17a50:	cmp	r1, #0
   17a54:	cmpne	r0, #0
   17a58:	bne	17a64 <flatcc_builder_aligned_alloc@@Base+0x48>
   17a5c:	mov	sp, fp
   17a60:	pop	{fp, pc}
   17a64:	bl	123f0 <free@plt>
   17a68:	mov	r0, #0
   17a6c:	str	r0, [sp, #4]
   17a70:	mov	sp, fp
   17a74:	pop	{fp, pc}

00017a78 <flatcc_builder_aligned_free@@Base>:
   17a78:	b	123f0 <free@plt>

00017a7c <flatcc_builder_get_emit_context@@Base>:
   17a7c:	ldr	r0, [r0, #36]	; 0x24
   17a80:	bx	lr

00017a84 <flatcc_emitter_recycle_page@@Base>:
   17a84:	ldr	r3, [r0]
   17a88:	mov	r2, r0
   17a8c:	mvn	r0, #0
   17a90:	cmp	r3, r1
   17a94:	ldrne	r2, [r2, #4]
   17a98:	cmpne	r2, r1
   17a9c:	bne	17aa4 <flatcc_emitter_recycle_page@@Base+0x20>
   17aa0:	bx	lr
   17aa4:	ldr	r0, [r1, #2944]	; 0xb80
   17aa8:	ldr	r2, [r1, #2948]	; 0xb84
   17aac:	str	r2, [r0, #2948]	; 0xb84
   17ab0:	ldr	r2, [r1, #2948]	; 0xb84
   17ab4:	str	r0, [r2, #2944]	; 0xb80
   17ab8:	ldr	r0, [r3, #2948]	; 0xb84
   17abc:	str	r3, [r1, #2944]	; 0xb80
   17ac0:	str	r0, [r1, #2948]	; 0xb84
   17ac4:	str	r1, [r0, #2944]	; 0xb80
   17ac8:	ldr	r0, [r1, #2944]	; 0xb80
   17acc:	str	r1, [r0, #2948]	; 0xb84
   17ad0:	mov	r0, #0
   17ad4:	bx	lr

00017ad8 <flatcc_emitter_reset@@Base>:
   17ad8:	push	{r4, sl, fp, lr}
   17adc:	add	fp, sp, #8
   17ae0:	ldr	r1, [r0]
   17ae4:	cmp	r1, #0
   17ae8:	beq	17ba0 <flatcc_emitter_reset@@Base+0xc8>
   17aec:	mov	r4, r0
   17af0:	add	r2, r1, #1472	; 0x5c0
   17af4:	mov	r0, #1472	; 0x5c0
   17af8:	mov	r3, #0
   17afc:	stmib	r4, {r1, r2}
   17b00:	str	r0, [r4, #12]
   17b04:	str	r2, [r4, #16]
   17b08:	str	r0, [r4, #20]
   17b0c:	movw	r0, #64064	; 0xfa40
   17b10:	movt	r0, #65535	; 0xffff
   17b14:	str	r0, [r1, #2952]	; 0xb88
   17b18:	ldr	r2, [r4, #32]
   17b1c:	ldr	r0, [r4, #24]
   17b20:	cmp	r2, #0
   17b24:	moveq	r2, r0
   17b28:	streq	r0, [r4, #32]
   17b2c:	str	r3, [r4, #24]
   17b30:	add	r2, r2, r2, lsl #1
   17b34:	lsr	r2, r2, #2
   17b38:	add	r0, r2, r0, lsr #2
   17b3c:	str	r0, [r4, #32]
   17b40:	ldr	r2, [r4, #28]
   17b44:	cmp	r2, r0, lsl #1
   17b48:	bls	17ba0 <flatcc_emitter_reset@@Base+0xc8>
   17b4c:	mov	r2, r1
   17b50:	ldr	r0, [r2, #2944]!	; 0xb80
   17b54:	cmp	r0, r1
   17b58:	beq	17ba0 <flatcc_emitter_reset@@Base+0xc8>
   17b5c:	ldr	r3, [r0, #2944]	; 0xb80
   17b60:	str	r3, [r2]
   17b64:	ldr	r2, [r0, #2944]	; 0xb80
   17b68:	str	r1, [r2, #2948]	; 0xb84
   17b6c:	bl	123f0 <free@plt>
   17b70:	ldr	r0, [r4, #28]
   17b74:	ldr	r1, [r4, #32]
   17b78:	sub	r0, r0, #2944	; 0xb80
   17b7c:	cmp	r0, r1, lsl #1
   17b80:	str	r0, [r4, #28]
   17b84:	popls	{r4, sl, fp, pc}
   17b88:	ldr	r1, [r4, #4]
   17b8c:	ldr	r3, [r4]
   17b90:	mov	r2, r1
   17b94:	ldr	r0, [r2, #2944]!	; 0xb80
   17b98:	cmp	r0, r3
   17b9c:	bne	17b5c <flatcc_emitter_reset@@Base+0x84>
   17ba0:	pop	{r4, sl, fp, pc}

00017ba4 <flatcc_emitter_clear@@Base>:
   17ba4:	push	{r4, r5, r6, sl, fp, lr}
   17ba8:	add	fp, sp, #16
   17bac:	ldr	r5, [r0]
   17bb0:	cmp	r5, #0
   17bb4:	popeq	{r4, r5, r6, sl, fp, pc}
   17bb8:	mov	r4, r0
   17bbc:	ldr	r0, [r5, #2948]	; 0xb84
   17bc0:	mov	r6, #0
   17bc4:	str	r6, [r0, #2944]	; 0xb80
   17bc8:	b	17bd8 <flatcc_emitter_clear@@Base+0x34>
   17bcc:	mov	r5, r0
   17bd0:	ldr	r0, [r0, #2948]	; 0xb84
   17bd4:	bl	123f0 <free@plt>
   17bd8:	ldr	r0, [r5, #2944]	; 0xb80
   17bdc:	cmp	r0, #0
   17be0:	bne	17bcc <flatcc_emitter_clear@@Base+0x28>
   17be4:	mov	r0, r5
   17be8:	bl	123f0 <free@plt>
   17bec:	vmov.i32	q8, #0	; 0x00000000
   17bf0:	add	r0, r4, #16
   17bf4:	vst1.32	{d16-d17}, [r0]
   17bf8:	mov	r0, #32
   17bfc:	vst1.32	{d16-d17}, [r4], r0
   17c00:	str	r6, [r4]
   17c04:	pop	{r4, r5, r6, sl, fp, pc}

00017c08 <flatcc_emitter@@Base>:
   17c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c0c:	add	fp, sp, #28
   17c10:	sub	sp, sp, #4
   17c14:	mov	r6, r0
   17c18:	mov	r7, r1
   17c1c:	ldr	r0, [r0, #24]
   17c20:	ldr	r1, [fp, #8]
   17c24:	mov	r4, r2
   17c28:	cmn	r3, #1
   17c2c:	mov	r9, r6
   17c30:	add	r0, r0, r1
   17c34:	str	r0, [r6, #24]
   17c38:	ble	17d78 <flatcc_emitter@@Base+0x170>
   17c3c:	ldr	r0, [r9, #20]!
   17c40:	cmp	r0, r1
   17c44:	bcs	17eec <flatcc_emitter@@Base+0x2e4>
   17c48:	mov	r8, #0
   17c4c:	cmp	r4, #0
   17c50:	beq	17f44 <flatcc_emitter@@Base+0x33c>
   17c54:	movw	sl, #64064	; 0xfa40
   17c58:	movt	sl, #65535	; 0xffff
   17c5c:	ldr	r8, [r7, #4]
   17c60:	cmp	r8, #0
   17c64:	beq	17d68 <flatcc_emitter@@Base+0x160>
   17c68:	ldr	r9, [r7]
   17c6c:	cmp	r8, r0
   17c70:	mov	r5, r8
   17c74:	bls	17d34 <flatcc_emitter@@Base+0x12c>
   17c78:	mov	r5, r0
   17c7c:	cmp	r5, #0
   17c80:	bne	17d34 <flatcc_emitter@@Base+0x12c>
   17c84:	ldr	r5, [r6, #4]
   17c88:	cmp	r5, #0
   17c8c:	beq	17ca0 <flatcc_emitter@@Base+0x98>
   17c90:	ldr	r0, [r5, #2944]	; 0xb80
   17c94:	ldr	r1, [r6]
   17c98:	cmp	r0, r1
   17c9c:	bne	17cd8 <flatcc_emitter@@Base+0xd0>
   17ca0:	movw	r0, #2956	; 0xb8c
   17ca4:	bl	12438 <malloc@plt>
   17ca8:	cmp	r0, #0
   17cac:	beq	17efc <flatcc_emitter@@Base+0x2f4>
   17cb0:	ldr	r1, [r6, #28]
   17cb4:	cmp	r5, #0
   17cb8:	add	r1, r1, #2944	; 0xb80
   17cbc:	str	r1, [r6, #28]
   17cc0:	beq	17d04 <flatcc_emitter@@Base+0xfc>
   17cc4:	ldr	r1, [r6]
   17cc8:	str	r1, [r0, #2944]	; 0xb80
   17ccc:	str	r5, [r0, #2948]	; 0xb84
   17cd0:	str	r0, [r1, #2948]	; 0xb84
   17cd4:	str	r0, [r5, #2944]	; 0xb80
   17cd8:	mov	r5, #2944	; 0xb80
   17cdc:	str	r0, [r6, #4]
   17ce0:	str	r0, [r6, #16]
   17ce4:	str	r5, [r6, #20]
   17ce8:	ldr	r1, [r0, #2948]	; 0xb84
   17cec:	ldr	r1, [r1, #2952]	; 0xb88
   17cf0:	add	r1, r1, #2944	; 0xb80
   17cf4:	str	r1, [r0, #2952]	; 0xb88
   17cf8:	cmp	r8, r5
   17cfc:	bhi	17c7c <flatcc_emitter@@Base+0x74>
   17d00:	b	17d30 <flatcc_emitter@@Base+0x128>
   17d04:	add	r1, r0, #1472	; 0x5c0
   17d08:	mov	r5, #1472	; 0x5c0
   17d0c:	str	r0, [r6]
   17d10:	stmib	r6, {r0, r1, r5}
   17d14:	str	r1, [r6, #16]
   17d18:	str	r5, [r6, #20]
   17d1c:	str	r0, [r0, #2944]	; 0xb80
   17d20:	str	r0, [r0, #2948]	; 0xb84
   17d24:	str	sl, [r0, #2952]	; 0xb88
   17d28:	cmp	r8, r5
   17d2c:	bhi	17c7c <flatcc_emitter@@Base+0x74>
   17d30:	mov	r5, r8
   17d34:	ldr	r0, [r6, #16]
   17d38:	mov	r1, r9
   17d3c:	mov	r2, r5
   17d40:	bl	123fc <memcpy@plt>
   17d44:	ldr	r0, [r6, #16]
   17d48:	ldr	r1, [r6, #20]
   17d4c:	add	r9, r9, r5
   17d50:	subs	r8, r8, r5
   17d54:	add	r2, r0, r5
   17d58:	sub	r0, r1, r5
   17d5c:	str	r2, [r6, #16]
   17d60:	str	r0, [r6, #20]
   17d64:	bne	17c6c <flatcc_emitter@@Base+0x64>
   17d68:	subs	r4, r4, #1
   17d6c:	add	r7, r7, #8
   17d70:	bne	17c5c <flatcc_emitter@@Base+0x54>
   17d74:	b	17ee4 <flatcc_emitter@@Base+0x2dc>
   17d78:	ldr	r0, [r9, #12]!
   17d7c:	cmp	r0, r1
   17d80:	bcs	17f04 <flatcc_emitter@@Base+0x2fc>
   17d84:	mov	r8, #0
   17d88:	cmp	r4, #0
   17d8c:	beq	17f44 <flatcc_emitter@@Base+0x33c>
   17d90:	add	r0, r7, r4, lsl #3
   17d94:	movw	sl, #2952	; 0xb88
   17d98:	ldr	r8, [r0, #-4]
   17d9c:	sub	r1, r0, #8
   17da0:	str	r1, [sp]
   17da4:	cmp	r8, #0
   17da8:	beq	17ed8 <flatcc_emitter@@Base+0x2d0>
   17dac:	ldr	r0, [sp]
   17db0:	ldr	r0, [r0]
   17db4:	add	r7, r0, r8
   17db8:	ldr	r1, [r9]
   17dbc:	cmp	r8, r1
   17dc0:	bls	17ea8 <flatcc_emitter@@Base+0x2a0>
   17dc4:	cmp	r1, #0
   17dc8:	mov	r5, r1
   17dcc:	bne	17eac <flatcc_emitter@@Base+0x2a4>
   17dd0:	ldr	r5, [r6]
   17dd4:	cmp	r5, #0
   17dd8:	beq	17e04 <flatcc_emitter@@Base+0x1fc>
   17ddc:	ldr	r0, [r5, #2948]	; 0xb84
   17de0:	ldr	r1, [r6, #4]
   17de4:	cmp	r0, r1
   17de8:	beq	17e04 <flatcc_emitter@@Base+0x1fc>
   17dec:	ldr	r1, [r5, #2952]	; 0xb88
   17df0:	mov	r2, r0
   17df4:	sub	r1, r1, #2944	; 0xb80
   17df8:	str	r1, [r2, #2952]!	; 0xb88
   17dfc:	str	r0, [r6]
   17e00:	b	17e44 <flatcc_emitter@@Base+0x23c>
   17e04:	movw	r0, #2956	; 0xb8c
   17e08:	bl	12438 <malloc@plt>
   17e0c:	cmp	r0, #0
   17e10:	beq	17efc <flatcc_emitter@@Base+0x2f4>
   17e14:	ldr	r1, [r6, #28]
   17e18:	cmp	r5, #0
   17e1c:	add	r1, r1, #2944	; 0xb80
   17e20:	str	r1, [r6, #28]
   17e24:	beq	17e70 <flatcc_emitter@@Base+0x268>
   17e28:	ldr	r1, [r6, #4]
   17e2c:	add	r2, r0, sl
   17e30:	str	r5, [r0, #2944]	; 0xb80
   17e34:	str	r1, [r0, #2948]	; 0xb84
   17e38:	str	r0, [r5, #2948]	; 0xb84
   17e3c:	str	r0, [r1, #2944]	; 0xb80
   17e40:	str	r0, [r6]
   17e44:	add	r3, r0, #2944	; 0xb80
   17e48:	mov	r1, #2944	; 0xb80
   17e4c:	str	r3, [r6, #8]
   17e50:	str	r1, [r6, #12]
   17e54:	ldr	r0, [r0, #2944]	; 0xb80
   17e58:	ldr	r0, [r0, #2952]	; 0xb88
   17e5c:	sub	r0, r0, #2944	; 0xb80
   17e60:	str	r0, [r2]
   17e64:	cmp	r8, r1
   17e68:	bhi	17dc4 <flatcc_emitter@@Base+0x1bc>
   17e6c:	b	17ea8 <flatcc_emitter@@Base+0x2a0>
   17e70:	add	r2, r0, #1472	; 0x5c0
   17e74:	mov	r1, #1472	; 0x5c0
   17e78:	str	r0, [r6]
   17e7c:	stmib	r6, {r0, r2}
   17e80:	str	r1, [r6, #12]
   17e84:	str	r2, [r6, #16]
   17e88:	movw	r2, #64064	; 0xfa40
   17e8c:	str	r1, [r6, #20]
   17e90:	str	r0, [r0, #2944]	; 0xb80
   17e94:	str	r0, [r0, #2948]	; 0xb84
   17e98:	movt	r2, #65535	; 0xffff
   17e9c:	str	r2, [r0, #2952]	; 0xb88
   17ea0:	cmp	r8, r1
   17ea4:	bhi	17dc4 <flatcc_emitter@@Base+0x1bc>
   17ea8:	mov	r5, r8
   17eac:	sub	r0, r1, r5
   17eb0:	sub	r7, r7, r5
   17eb4:	mov	r2, r5
   17eb8:	str	r0, [r6, #12]
   17ebc:	mov	r1, r7
   17ec0:	ldr	r0, [r6, #8]
   17ec4:	sub	r0, r0, r5
   17ec8:	str	r0, [r6, #8]
   17ecc:	bl	123fc <memcpy@plt>
   17ed0:	subs	r8, r8, r5
   17ed4:	bne	17db8 <flatcc_emitter@@Base+0x1b0>
   17ed8:	ldr	r0, [sp]
   17edc:	subs	r4, r4, #1
   17ee0:	bne	17d98 <flatcc_emitter@@Base+0x190>
   17ee4:	mov	r8, #0
   17ee8:	b	17f44 <flatcc_emitter@@Base+0x33c>
   17eec:	ldr	r5, [r6, #16]
   17ef0:	add	r2, r5, r1
   17ef4:	str	r2, [r6, #16]
   17ef8:	b	17f10 <flatcc_emitter@@Base+0x308>
   17efc:	mvn	r8, #0
   17f00:	b	17f44 <flatcc_emitter@@Base+0x33c>
   17f04:	ldr	r2, [r6, #8]
   17f08:	sub	r5, r2, r1
   17f0c:	str	r5, [r6, #8]
   17f10:	sub	r0, r0, r1
   17f14:	mov	r8, #0
   17f18:	cmp	r4, #0
   17f1c:	str	r0, [r9]
   17f20:	beq	17f44 <flatcc_emitter@@Base+0x33c>
   17f24:	ldm	r7, {r1, r2}
   17f28:	mov	r0, r5
   17f2c:	bl	123fc <memcpy@plt>
   17f30:	ldr	r0, [r7, #4]
   17f34:	add	r7, r7, #8
   17f38:	subs	r4, r4, #1
   17f3c:	add	r5, r5, r0
   17f40:	bne	17f24 <flatcc_emitter@@Base+0x31c>
   17f44:	mov	r0, r8
   17f48:	sub	sp, fp, #28
   17f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f50 <flatcc_emitter_copy_buffer@@Base>:
   17f50:	push	{r4, r5, r6, sl, fp, lr}
   17f54:	add	fp, sp, #16
   17f58:	mov	r3, r2
   17f5c:	ldr	r2, [r0, #24]
   17f60:	mov	r5, #0
   17f64:	cmp	r2, r3
   17f68:	bhi	17ff0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17f6c:	mov	r4, r0
   17f70:	ldr	r0, [r0]
   17f74:	cmp	r0, #0
   17f78:	beq	17ff0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17f7c:	mov	r6, r1
   17f80:	ldr	r1, [r4, #4]
   17f84:	cmp	r0, r1
   17f88:	beq	17ff8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   17f8c:	ldr	r0, [r4, #12]
   17f90:	ldr	r1, [r4, #8]
   17f94:	rsb	r5, r0, #2944	; 0xb80
   17f98:	mov	r0, r6
   17f9c:	mov	r2, r5
   17fa0:	bl	123fc <memcpy@plt>
   17fa4:	ldm	r4, {r0, r1}
   17fa8:	add	r5, r6, r5
   17fac:	ldr	r6, [r0, #2944]	; 0xb80
   17fb0:	cmp	r6, r1
   17fb4:	beq	17fdc <flatcc_emitter_copy_buffer@@Base+0x8c>
   17fb8:	mov	r0, r5
   17fbc:	mov	r1, r6
   17fc0:	mov	r2, #2944	; 0xb80
   17fc4:	bl	123fc <memcpy@plt>
   17fc8:	ldr	r6, [r6, #2944]	; 0xb80
   17fcc:	ldr	r0, [r4, #4]
   17fd0:	add	r5, r5, #2944	; 0xb80
   17fd4:	cmp	r6, r0
   17fd8:	bne	17fb8 <flatcc_emitter_copy_buffer@@Base+0x68>
   17fdc:	ldr	r0, [r4, #20]
   17fe0:	mov	r1, r6
   17fe4:	rsb	r2, r0, #2944	; 0xb80
   17fe8:	mov	r0, r5
   17fec:	bl	123fc <memcpy@plt>
   17ff0:	mov	r0, r5
   17ff4:	pop	{r4, r5, r6, sl, fp, pc}
   17ff8:	ldr	r1, [r4, #8]
   17ffc:	mov	r0, r6
   18000:	bl	123fc <memcpy@plt>
   18004:	mov	r0, r6
   18008:	pop	{r4, r5, r6, sl, fp, pc}

0001800c <__libc_csu_init@@Base>:
   1800c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18010:	mov	r7, r0
   18014:	ldr	r6, [pc, #72]	; 18064 <__libc_csu_init@@Base+0x58>
   18018:	ldr	r5, [pc, #72]	; 18068 <__libc_csu_init@@Base+0x5c>
   1801c:	add	r6, pc, r6
   18020:	add	r5, pc, r5
   18024:	sub	r6, r6, r5
   18028:	mov	r8, r1
   1802c:	mov	r9, r2
   18030:	bl	123c4 <printf@plt-0x20>
   18034:	asrs	r6, r6, #2
   18038:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1803c:	mov	r4, #0
   18040:	add	r4, r4, #1
   18044:	ldr	r3, [r5], #4
   18048:	mov	r2, r9
   1804c:	mov	r1, r8
   18050:	mov	r0, r7
   18054:	blx	r3
   18058:	cmp	r6, r4
   1805c:	bne	18040 <__libc_csu_init@@Base+0x34>
   18060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18064:	andeq	r1, r1, r8, ror #29
   18068:	andeq	r1, r1, r0, ror #29

0001806c <__libc_csu_fini@@Base>:
   1806c:	bx	lr

Disassembly of section .fini:

00018070 <.fini>:
   18070:	push	{r3, lr}
   18074:	pop	{r3, pc}
