
../repos/Snaipe-Mimick-1dc4659/test/mmk_test:     file format elf32-littlearm


Disassembly of section .init:

0001117c <.init>:
   1117c:	push	{r3, lr}
   11180:	bl	112e0 <_start@@Base+0x3c>
   11184:	pop	{r3, pc}

Disassembly of section .plt:

00011188 <strstr@plt-0x14>:
   11188:	push	{lr}		; (str lr, [sp, #-4]!)
   1118c:	ldr	lr, [pc, #4]	; 11198 <strstr@plt-0x4>
   11190:	add	lr, pc, lr
   11194:	ldr	pc, [lr, #8]!
   11198:	andeq	r4, r1, r8, ror #28

0001119c <strstr@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3688]!	; 0xe68

000111a8 <strcmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3680]!	; 0xe60

000111b4 <mprotect@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3672]!	; 0xe58

000111c0 <free@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3664]!	; 0xe50

000111cc <memcpy@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3656]!	; 0xe48

000111d8 <fn_vv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3648]!	; 0xe40

000111e4 <realloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3640]!	; 0xe38

000111f0 <fn_ii@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3632]!	; 0xe30

000111fc <fn_ii_va@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #20, 20	; 0x14000
   11204:	ldr	pc, [ip, #3624]!	; 0xe28

00011208 <malloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #20, 20	; 0x14000
   11210:	ldr	pc, [ip, #3616]!	; 0xe20

00011214 <__libc_start_main@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #20, 20	; 0x14000
   1121c:	ldr	pc, [ip, #3608]!	; 0xe18

00011220 <__gmon_start__@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #20, 20	; 0x14000
   11228:	ldr	pc, [ip, #3600]!	; 0xe10

0001122c <strlen@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #20, 20	; 0x14000
   11234:	ldr	pc, [ip, #3592]!	; 0xe08

00011238 <mmap@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #20, 20	; 0x14000
   11240:	ldr	pc, [ip, #3584]!	; 0xe00

00011244 <strchr@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #20, 20	; 0x14000
   1124c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011250 <fprintf@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #20, 20	; 0x14000
   11258:	ldr	pc, [ip, #3568]!	; 0xdf0

0001125c <__errno_location@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #20, 20	; 0x14000
   11264:	ldr	pc, [ip, #3560]!	; 0xde8

00011268 <snprintf@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #20, 20	; 0x14000
   11270:	ldr	pc, [ip, #3552]!	; 0xde0

00011274 <munmap@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #20, 20	; 0x14000
   1127c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011280 <__tls_get_addr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #20, 20	; 0x14000
   11288:	ldr	pc, [ip, #3536]!	; 0xdd0

0001128c <strncmp@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #20, 20	; 0x14000
   11294:	ldr	pc, [ip, #3528]!	; 0xdc8

00011298 <abort@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #20, 20	; 0x14000
   112a0:	ldr	pc, [ip, #3520]!	; 0xdc0

Disassembly of section .text:

000112a4 <_start@@Base>:
   112a4:	mov	fp, #0
   112a8:	mov	lr, #0
   112ac:	pop	{r1}		; (ldr r1, [sp], #4)
   112b0:	mov	r2, sp
   112b4:	push	{r2}		; (str r2, [sp, #-4]!)
   112b8:	push	{r0}		; (str r0, [sp, #-4]!)
   112bc:	ldr	ip, [pc, #16]	; 112d4 <_start@@Base+0x30>
   112c0:	push	{ip}		; (str ip, [sp, #-4]!)
   112c4:	ldr	r0, [pc, #12]	; 112d8 <_start@@Base+0x34>
   112c8:	ldr	r3, [pc, #12]	; 112dc <_start@@Base+0x38>
   112cc:	bl	11214 <__libc_start_main@plt>
   112d0:	bl	11298 <abort@plt>
   112d4:	andeq	r4, r1, r8, lsr #31
   112d8:	andeq	r2, r1, r4, lsr #10
   112dc:	andeq	r4, r1, r8, asr #30
   112e0:	ldr	r3, [pc, #20]	; 112fc <_start@@Base+0x58>
   112e4:	ldr	r2, [pc, #20]	; 11300 <_start@@Base+0x5c>
   112e8:	add	r3, pc, r3
   112ec:	ldr	r2, [r3, r2]
   112f0:	cmp	r2, #0
   112f4:	bxeq	lr
   112f8:	b	11220 <__gmon_start__@plt>
   112fc:	andeq	r4, r1, r0, lsl sp
   11300:	muleq	r0, r0, r0
   11304:	ldr	r0, [pc, #24]	; 11324 <_start@@Base+0x80>
   11308:	ldr	r3, [pc, #24]	; 11328 <_start@@Base+0x84>
   1130c:	cmp	r3, r0
   11310:	bxeq	lr
   11314:	ldr	r3, [pc, #16]	; 1132c <_start@@Base+0x88>
   11318:	cmp	r3, #0
   1131c:	bxeq	lr
   11320:	bx	r3
   11324:	strheq	r6, [r2], -r4
   11328:	strheq	r6, [r2], -r4
   1132c:	andeq	r0, r0, r0
   11330:	ldr	r0, [pc, #36]	; 1135c <_start@@Base+0xb8>
   11334:	ldr	r1, [pc, #36]	; 11360 <_start@@Base+0xbc>
   11338:	sub	r1, r1, r0
   1133c:	asr	r1, r1, #2
   11340:	add	r1, r1, r1, lsr #31
   11344:	asrs	r1, r1, #1
   11348:	bxeq	lr
   1134c:	ldr	r3, [pc, #16]	; 11364 <_start@@Base+0xc0>
   11350:	cmp	r3, #0
   11354:	bxeq	lr
   11358:	bx	r3
   1135c:	strheq	r6, [r2], -r4
   11360:	strheq	r6, [r2], -r4
   11364:	andeq	r0, r0, r0
   11368:	push	{r4, lr}
   1136c:	ldr	r4, [pc, #24]	; 1138c <_start@@Base+0xe8>
   11370:	ldrb	r3, [r4]
   11374:	cmp	r3, #0
   11378:	popne	{r4, pc}
   1137c:	bl	11304 <_start@@Base+0x60>
   11380:	mov	r3, #1
   11384:	strb	r3, [r4]
   11388:	pop	{r4, pc}
   1138c:	strheq	r6, [r2], -r4
   11390:	b	11330 <_start@@Base+0x8c>
   11394:	str	fp, [sp, #-8]!
   11398:	str	lr, [sp, #4]
   1139c:	add	fp, sp, #4
   113a0:	sub	sp, sp, #96	; 0x60
   113a4:	str	r0, [fp, #-96]	; 0xffffffa0
   113a8:	bl	133e8 <mmk_matcher_ctx@@Base>
   113ac:	str	r0, [fp, #-24]	; 0xffffffe8
   113b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113b4:	cmp	r3, #0
   113b8:	beq	11614 <_start@@Base+0x370>
   113bc:	bl	14368 <mmk_ctx@@Base>
   113c0:	mov	r3, r0
   113c4:	mov	r0, r3
   113c8:	bl	13edc <mmk_stub_context@@Base>
   113cc:	str	r0, [fp, #-28]	; 0xffffffe4
   113d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113d4:	ldr	r3, [r3]
   113d8:	cmp	r3, #0
   113dc:	bne	11430 <_start@@Base+0x18c>
   113e0:	mov	r0, #44	; 0x2c
   113e4:	bl	14c0c <mmk_malloc@@Base>
   113e8:	str	r0, [fp, #-32]	; 0xffffffe0
   113ec:	bl	14e44 <mmk_when_get_result@@Base>
   113f0:	mov	r2, r0
   113f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113f8:	add	r3, r3, #8
   113fc:	ldrd	r0, [r2]
   11400:	strd	r0, [r3]
   11404:	ldrd	r0, [r2, #8]
   11408:	strd	r0, [r3, #8]
   1140c:	ldr	r2, [r2, #16]
   11410:	str	r2, [r3, #16]
   11414:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11418:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1141c:	str	r2, [r3, #40]	; 0x28
   11420:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11424:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11428:	bl	14e88 <mmk_when_impl@@Base>
   1142c:	b	11604 <_start@@Base+0x360>
   11430:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11434:	ldr	r3, [r3]
   11438:	cmp	r3, #1
   1143c:	bne	11604 <_start@@Base+0x360>
   11440:	mov	r3, #0
   11444:	str	r3, [fp, #-8]
   11448:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1144c:	bl	137a8 <mmk_mock_params_begin@@Base>
   11450:	str	r0, [fp, #-12]
   11454:	b	115bc <_start@@Base+0x318>
   11458:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1145c:	str	r3, [fp, #-36]	; 0xffffffdc
   11460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11464:	ldr	r3, [r3, #8]
   11468:	cmp	r3, #0
   1146c:	beq	1155c <_start@@Base+0x2b8>
   11470:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11474:	ldr	r3, [r3, #8]
   11478:	str	r3, [fp, #-36]	; 0xffffffdc
   1147c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11480:	ldr	r3, [r3]
   11484:	cmp	r3, #0
   11488:	beq	11580 <_start@@Base+0x2dc>
   1148c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11490:	ldr	r3, [r3]
   11494:	cmp	r3, #0
   11498:	bge	1151c <_start@@Base+0x278>
   1149c:	ldr	r3, [fp, #-12]
   114a0:	add	r3, r3, #12
   114a4:	sub	r1, fp, #96	; 0x60
   114a8:	mov	r2, #4
   114ac:	mov	r0, r3
   114b0:	bl	149e0 <mmk_memcmp@@Base>
   114b4:	str	r0, [fp, #-40]	; 0xffffffd8
   114b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114bc:	cmp	r3, #0
   114c0:	bne	114d8 <_start@@Base+0x234>
   114c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114c8:	ldr	r3, [r3]
   114cc:	and	r3, r3, #2
   114d0:	cmp	r3, #0
   114d4:	beq	11598 <_start@@Base+0x2f4>
   114d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114dc:	cmp	r3, #0
   114e0:	bge	114f8 <_start@@Base+0x254>
   114e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114e8:	ldr	r3, [r3]
   114ec:	and	r3, r3, #4
   114f0:	cmp	r3, #0
   114f4:	beq	115a0 <_start@@Base+0x2fc>
   114f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114fc:	cmp	r3, #0
   11500:	ble	11580 <_start@@Base+0x2dc>
   11504:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11508:	ldr	r3, [r3]
   1150c:	and	r3, r3, #8
   11510:	cmp	r3, #0
   11514:	bne	11580 <_start@@Base+0x2dc>
   11518:	b	115ac <_start@@Base+0x308>
   1151c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11520:	ldr	r3, [r3]
   11524:	cmp	r3, #1
   11528:	bne	11580 <_start@@Base+0x2dc>
   1152c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11530:	bl	134a8 <mmk_matcher_get_predicate@@Base>
   11534:	str	r0, [fp, #-44]	; 0xffffffd4
   11538:	ldr	r3, [fp, #-12]
   1153c:	ldr	r2, [r3, #12]
   11540:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11544:	mov	r0, r2
   11548:	blx	r3
   1154c:	mov	r3, r0
   11550:	cmp	r3, #0
   11554:	bne	11580 <_start@@Base+0x2dc>
   11558:	b	115ac <_start@@Base+0x308>
   1155c:	ldr	r3, [fp, #-12]
   11560:	add	r3, r3, #12
   11564:	sub	r1, fp, #96	; 0x60
   11568:	mov	r2, #4
   1156c:	mov	r0, r3
   11570:	bl	149e0 <mmk_memcmp@@Base>
   11574:	mov	r3, r0
   11578:	cmp	r3, #0
   1157c:	bne	115a8 <_start@@Base+0x304>
   11580:	ldr	r3, [fp, #-12]
   11584:	ldr	r3, [r3]
   11588:	ldr	r2, [fp, #-8]
   1158c:	add	r3, r2, r3
   11590:	str	r3, [fp, #-8]
   11594:	b	115ac <_start@@Base+0x308>
   11598:	nop	{0}
   1159c:	b	115ac <_start@@Base+0x308>
   115a0:	nop	{0}
   115a4:	b	115ac <_start@@Base+0x308>
   115a8:	nop	{0}
   115ac:	ldr	r1, [fp, #-12]
   115b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   115b4:	bl	137fc <mmk_mock_params_next@@Base>
   115b8:	str	r0, [fp, #-12]
   115bc:	ldr	r3, [fp, #-12]
   115c0:	cmp	r3, #0
   115c4:	bne	11458 <_start@@Base+0x1b4>
   115c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115cc:	str	r3, [fp, #-16]
   115d0:	b	115f0 <_start@@Base+0x34c>
   115d4:	ldr	r3, [fp, #-16]
   115d8:	ldr	r3, [r3, #8]
   115dc:	str	r3, [fp, #-48]	; 0xffffffd0
   115e0:	ldr	r0, [fp, #-16]
   115e4:	bl	14c4c <mmk_free@@Base>
   115e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   115ec:	str	r3, [fp, #-16]
   115f0:	ldr	r3, [fp, #-16]
   115f4:	cmp	r3, #0
   115f8:	bne	115d4 <_start@@Base+0x330>
   115fc:	ldr	r0, [fp, #-8]
   11600:	bl	1454c <mmk_verify_set_times@@Base>
   11604:	ldr	r3, [pc, #652]	; 11898 <_start@@Base+0x5f4>
   11608:	add	r3, pc, r3
   1160c:	ldr	r3, [r3]
   11610:	b	11884 <_start@@Base+0x5e0>
   11614:	sub	r1, fp, #88	; 0x58
   11618:	mov	r2, #0
   1161c:	mov	r3, #0
   11620:	strd	r2, [r1]
   11624:	strd	r2, [r1, #8]
   11628:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1162c:	str	r3, [fp, #-76]	; 0xffffffb4
   11630:	sub	r3, fp, #88	; 0x58
   11634:	str	r3, [fp, #-52]	; 0xffffffcc
   11638:	mov	r1, #16
   1163c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11640:	bl	14794 <mmk_verify_register_call@@Base>
   11644:	bl	13874 <mmk_mock_get_params@@Base>
   11648:	str	r0, [fp, #-20]	; 0xffffffec
   1164c:	b	1186c <_start@@Base+0x5c8>
   11650:	ldr	r3, [fp, #-20]	; 0xffffffec
   11654:	str	r3, [fp, #-56]	; 0xffffffc8
   11658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1165c:	ldr	r3, [r3]
   11660:	str	r3, [fp, #-60]	; 0xffffffc4
   11664:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11668:	ldr	r3, [r3, #8]
   1166c:	cmp	r3, #0
   11670:	beq	11758 <_start@@Base+0x4b4>
   11674:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11678:	ldr	r3, [r3, #8]
   1167c:	str	r3, [fp, #-60]	; 0xffffffc4
   11680:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11684:	ldr	r3, [r3]
   11688:	cmp	r3, #0
   1168c:	beq	1177c <_start@@Base+0x4d8>
   11690:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11694:	ldr	r3, [r3]
   11698:	cmp	r3, #0
   1169c:	bge	1171c <_start@@Base+0x478>
   116a0:	sub	r1, fp, #96	; 0x60
   116a4:	sub	r3, fp, #96	; 0x60
   116a8:	mov	r2, #4
   116ac:	mov	r0, r3
   116b0:	bl	149e0 <mmk_memcmp@@Base>
   116b4:	str	r0, [fp, #-64]	; 0xffffffc0
   116b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116bc:	cmp	r3, #0
   116c0:	bne	116d8 <_start@@Base+0x434>
   116c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116c8:	ldr	r3, [r3]
   116cc:	and	r3, r3, #2
   116d0:	cmp	r3, #0
   116d4:	beq	11854 <_start@@Base+0x5b0>
   116d8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116dc:	cmp	r3, #0
   116e0:	bge	116f8 <_start@@Base+0x454>
   116e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116e8:	ldr	r3, [r3]
   116ec:	and	r3, r3, #4
   116f0:	cmp	r3, #0
   116f4:	beq	11854 <_start@@Base+0x5b0>
   116f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116fc:	cmp	r3, #0
   11700:	ble	1177c <_start@@Base+0x4d8>
   11704:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11708:	ldr	r3, [r3]
   1170c:	and	r3, r3, #8
   11710:	cmp	r3, #0
   11714:	bne	1177c <_start@@Base+0x4d8>
   11718:	b	11854 <_start@@Base+0x5b0>
   1171c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11720:	ldr	r3, [r3]
   11724:	cmp	r3, #1
   11728:	bne	1177c <_start@@Base+0x4d8>
   1172c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11730:	bl	134a8 <mmk_matcher_get_predicate@@Base>
   11734:	str	r0, [fp, #-68]	; 0xffffffbc
   11738:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1173c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11740:	mov	r0, r2
   11744:	blx	r3
   11748:	mov	r3, r0
   1174c:	cmp	r3, #0
   11750:	bne	1177c <_start@@Base+0x4d8>
   11754:	b	11860 <_start@@Base+0x5bc>
   11758:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1175c:	add	r1, r3, #40	; 0x28
   11760:	sub	r3, fp, #96	; 0x60
   11764:	mov	r2, #4
   11768:	mov	r0, r3
   1176c:	bl	149e0 <mmk_memcmp@@Base>
   11770:	mov	r3, r0
   11774:	cmp	r3, #0
   11778:	bne	1185c <_start@@Base+0x5b8>
   1177c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11780:	ldr	r3, [r3, #12]
   11784:	cmp	r3, #0
   11788:	beq	117a0 <_start@@Base+0x4fc>
   1178c:	bl	1125c <__errno_location@plt>
   11790:	mov	r2, r0
   11794:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11798:	ldr	r3, [r3, #12]
   1179c:	str	r3, [r2]
   117a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117a4:	ldr	r3, [r3, #20]
   117a8:	cmp	r3, #0
   117ac:	beq	117e0 <_start@@Base+0x53c>
   117b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117b4:	ldr	r3, [r3, #16]
   117b8:	cmp	r3, #0
   117bc:	bne	117e0 <_start@@Base+0x53c>
   117c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117c4:	ldr	r3, [r3, #20]
   117c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   117cc:	mov	r0, r2
   117d0:	blx	r3
   117d4:	str	r0, [fp, #-72]	; 0xffffffb8
   117d8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   117dc:	b	11884 <_start@@Base+0x5e0>
   117e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117e4:	ldr	r3, [r3, #20]
   117e8:	cmp	r3, #0
   117ec:	beq	11824 <_start@@Base+0x580>
   117f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117f4:	ldr	r3, [r3, #16]
   117f8:	cmp	r3, #0
   117fc:	beq	11824 <_start@@Base+0x580>
   11800:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11804:	ldr	r3, [r3, #20]
   11808:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1180c:	mov	r0, r2
   11810:	blx	r3
   11814:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11818:	ldr	r3, [r3, #16]
   1181c:	ldr	r3, [r3]
   11820:	b	11884 <_start@@Base+0x5e0>
   11824:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11828:	ldr	r3, [r3, #16]
   1182c:	cmp	r3, #0
   11830:	beq	11844 <_start@@Base+0x5a0>
   11834:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11838:	ldr	r3, [r3, #16]
   1183c:	ldr	r3, [r3]
   11840:	b	11884 <_start@@Base+0x5e0>
   11844:	ldr	r3, [pc, #80]	; 1189c <_start@@Base+0x5f8>
   11848:	add	r3, pc, r3
   1184c:	ldr	r3, [r3]
   11850:	b	11884 <_start@@Base+0x5e0>
   11854:	nop	{0}
   11858:	b	11860 <_start@@Base+0x5bc>
   1185c:	nop	{0}
   11860:	ldr	r3, [fp, #-20]	; 0xffffffec
   11864:	ldr	r3, [r3, #4]
   11868:	str	r3, [fp, #-20]	; 0xffffffec
   1186c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11870:	cmp	r3, #0
   11874:	bne	11650 <_start@@Base+0x3ac>
   11878:	ldr	r3, [pc, #32]	; 118a0 <_start@@Base+0x5fc>
   1187c:	add	r3, pc, r3
   11880:	ldr	r3, [r3]
   11884:	mov	r0, r3
   11888:	sub	sp, fp, #4
   1188c:	ldr	fp, [sp]
   11890:	add	sp, sp, #4
   11894:	pop	{pc}		; (ldr pc, [sp], #4)
   11898:	andeq	r4, r1, ip, lsr #21
   1189c:	andeq	r4, r1, ip, ror #16
   118a0:	andeq	r4, r1, r8, lsr r8
   118a4:	str	fp, [sp, #-8]!
   118a8:	str	lr, [sp, #4]
   118ac:	add	fp, sp, #4
   118b0:	sub	sp, sp, #8
   118b4:	str	r0, [fp, #-8]
   118b8:	ldr	r3, [pc, #36]	; 118e4 <_start@@Base+0x640>
   118bc:	add	r3, pc, r3
   118c0:	mov	r1, r3
   118c4:	ldr	r0, [fp, #-8]
   118c8:	bl	134b0 <mmk_mock_create_internal@@Base>
   118cc:	mov	r3, r0
   118d0:	mov	r0, r3
   118d4:	sub	sp, fp, #4
   118d8:	ldr	fp, [sp]
   118dc:	add	sp, sp, #4
   118e0:	pop	{pc}		; (ldr pc, [sp], #4)
   118e4:			; <UNDEFINED> instruction: 0xfffffad0
   118e8:	str	fp, [sp, #-8]!
   118ec:	str	lr, [sp, #4]
   118f0:	add	fp, sp, #4
   118f4:	sub	sp, sp, #64	; 0x40
   118f8:	bl	133e8 <mmk_matcher_ctx@@Base>
   118fc:	str	r0, [fp, #-20]	; 0xffffffec
   11900:	ldr	r3, [fp, #-20]	; 0xffffffec
   11904:	cmp	r3, #0
   11908:	beq	11a18 <_start@@Base+0x774>
   1190c:	bl	14368 <mmk_ctx@@Base>
   11910:	mov	r3, r0
   11914:	mov	r0, r3
   11918:	bl	13edc <mmk_stub_context@@Base>
   1191c:	str	r0, [fp, #-24]	; 0xffffffe8
   11920:	ldr	r3, [fp, #-20]	; 0xffffffec
   11924:	ldr	r3, [r3]
   11928:	cmp	r3, #0
   1192c:	bne	11974 <_start@@Base+0x6d0>
   11930:	mov	r0, #40	; 0x28
   11934:	bl	14c0c <mmk_malloc@@Base>
   11938:	str	r0, [fp, #-28]	; 0xffffffe4
   1193c:	bl	14e44 <mmk_when_get_result@@Base>
   11940:	mov	r2, r0
   11944:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11948:	add	r3, r3, #8
   1194c:	ldrd	r0, [r2]
   11950:	strd	r0, [r3]
   11954:	ldrd	r0, [r2, #8]
   11958:	strd	r0, [r3, #8]
   1195c:	ldr	r2, [r2, #16]
   11960:	str	r2, [r3, #16]
   11964:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11968:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1196c:	bl	14e88 <mmk_when_impl@@Base>
   11970:	b	11b00 <_start@@Base+0x85c>
   11974:	ldr	r3, [fp, #-20]	; 0xffffffec
   11978:	ldr	r3, [r3]
   1197c:	cmp	r3, #1
   11980:	bne	11b00 <_start@@Base+0x85c>
   11984:	mov	r3, #0
   11988:	str	r3, [fp, #-8]
   1198c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11990:	bl	137a8 <mmk_mock_params_begin@@Base>
   11994:	str	r0, [fp, #-12]
   11998:	b	119cc <_start@@Base+0x728>
   1199c:	ldr	r3, [fp, #-20]	; 0xffffffec
   119a0:	str	r3, [fp, #-32]	; 0xffffffe0
   119a4:	ldr	r3, [fp, #-12]
   119a8:	ldr	r3, [r3]
   119ac:	ldr	r2, [fp, #-8]
   119b0:	add	r3, r2, r3
   119b4:	str	r3, [fp, #-8]
   119b8:	nop	{0}
   119bc:	ldr	r1, [fp, #-12]
   119c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119c4:	bl	137fc <mmk_mock_params_next@@Base>
   119c8:	str	r0, [fp, #-12]
   119cc:	ldr	r3, [fp, #-12]
   119d0:	cmp	r3, #0
   119d4:	bne	1199c <_start@@Base+0x6f8>
   119d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119dc:	str	r3, [fp, #-16]
   119e0:	b	11a00 <_start@@Base+0x75c>
   119e4:	ldr	r3, [fp, #-16]
   119e8:	ldr	r3, [r3, #8]
   119ec:	str	r3, [fp, #-36]	; 0xffffffdc
   119f0:	ldr	r0, [fp, #-16]
   119f4:	bl	14c4c <mmk_free@@Base>
   119f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   119fc:	str	r3, [fp, #-16]
   11a00:	ldr	r3, [fp, #-16]
   11a04:	cmp	r3, #0
   11a08:	bne	119e4 <_start@@Base+0x740>
   11a0c:	ldr	r0, [fp, #-8]
   11a10:	bl	1454c <mmk_verify_set_times@@Base>
   11a14:	b	11b00 <_start@@Base+0x85c>
   11a18:	sub	r1, fp, #64	; 0x40
   11a1c:	mov	r2, #0
   11a20:	mov	r3, #0
   11a24:	strd	r2, [r1]
   11a28:	mov	r3, r2
   11a2c:	str	r3, [r1, #8]
   11a30:	sub	r3, fp, #64	; 0x40
   11a34:	str	r3, [fp, #-40]	; 0xffffffd8
   11a38:	mov	r1, #12
   11a3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a40:	bl	14794 <mmk_verify_register_call@@Base>
   11a44:	bl	13874 <mmk_mock_get_params@@Base>
   11a48:	str	r0, [fp, #-44]	; 0xffffffd4
   11a4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a50:	cmp	r3, #0
   11a54:	beq	11b08 <_start@@Base+0x864>
   11a58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a5c:	str	r3, [fp, #-48]	; 0xffffffd0
   11a60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a64:	ldr	r3, [r3]
   11a68:	str	r3, [fp, #-52]	; 0xffffffcc
   11a6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a70:	ldr	r3, [r3, #12]
   11a74:	cmp	r3, #0
   11a78:	beq	11a90 <_start@@Base+0x7ec>
   11a7c:	bl	1125c <__errno_location@plt>
   11a80:	mov	r2, r0
   11a84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a88:	ldr	r3, [r3, #12]
   11a8c:	str	r3, [r2]
   11a90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a94:	ldr	r3, [r3, #20]
   11a98:	cmp	r3, #0
   11a9c:	beq	11ac0 <_start@@Base+0x81c>
   11aa0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11aa4:	ldr	r3, [r3, #16]
   11aa8:	cmp	r3, #0
   11aac:	bne	11ac0 <_start@@Base+0x81c>
   11ab0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ab4:	ldr	r3, [r3, #20]
   11ab8:	blx	r3
   11abc:	b	11b0c <_start@@Base+0x868>
   11ac0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ac4:	ldr	r3, [r3, #20]
   11ac8:	cmp	r3, #0
   11acc:	beq	11af0 <_start@@Base+0x84c>
   11ad0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ad4:	ldr	r3, [r3, #16]
   11ad8:	cmp	r3, #0
   11adc:	beq	11af0 <_start@@Base+0x84c>
   11ae0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ae4:	ldr	r3, [r3, #20]
   11ae8:	blx	r3
   11aec:	b	11b0c <_start@@Base+0x868>
   11af0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11af4:	ldr	r3, [r3, #16]
   11af8:	cmp	r3, #0
   11afc:	b	11b0c <_start@@Base+0x868>
   11b00:	nop	{0}
   11b04:	b	11b0c <_start@@Base+0x868>
   11b08:	nop	{0}
   11b0c:	sub	sp, fp, #4
   11b10:	ldr	fp, [sp]
   11b14:	add	sp, sp, #4
   11b18:	pop	{pc}		; (ldr pc, [sp], #4)
   11b1c:	str	fp, [sp, #-8]!
   11b20:	str	lr, [sp, #4]
   11b24:	add	fp, sp, #4
   11b28:	sub	sp, sp, #8
   11b2c:	str	r0, [fp, #-8]
   11b30:	ldr	r3, [pc, #36]	; 11b5c <_start@@Base+0x8b8>
   11b34:	add	r3, pc, r3
   11b38:	mov	r1, r3
   11b3c:	ldr	r0, [fp, #-8]
   11b40:	bl	134b0 <mmk_mock_create_internal@@Base>
   11b44:	mov	r3, r0
   11b48:	mov	r0, r3
   11b4c:	sub	sp, fp, #4
   11b50:	ldr	fp, [sp]
   11b54:	add	sp, sp, #4
   11b58:	pop	{pc}		; (ldr pc, [sp], #4)
   11b5c:			; <UNDEFINED> instruction: 0xfffffdac
   11b60:	str	r4, [sp, #-12]!
   11b64:	str	fp, [sp, #4]
   11b68:	str	lr, [sp, #8]
   11b6c:	add	fp, sp, #8
   11b70:	sub	sp, sp, #36	; 0x24
   11b74:	str	r0, [fp, #-32]	; 0xffffffe0
   11b78:	str	r1, [fp, #-36]	; 0xffffffdc
   11b7c:	str	r2, [fp, #-40]	; 0xffffffd8
   11b80:	str	r3, [fp, #-44]	; 0xffffffd4
   11b84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b88:	cmp	r3, #0
   11b8c:	bgt	11b98 <_start@@Base+0x8f4>
   11b90:	mov	r3, #0
   11b94:	b	11c68 <_start@@Base+0x9c4>
   11b98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b9c:	lsl	r3, r3, #2
   11ba0:	mov	r0, r3
   11ba4:	bl	14c0c <mmk_malloc@@Base>
   11ba8:	str	r0, [fp, #-20]	; 0xffffffec
   11bac:	mov	r3, #0
   11bb0:	str	r3, [fp, #-16]
   11bb4:	b	11c3c <_start@@Base+0x998>
   11bb8:	ldr	r3, [fp, #-16]
   11bbc:	lsl	r3, r3, #2
   11bc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bc4:	add	r4, r2, r3
   11bc8:	mov	r0, #8
   11bcc:	bl	14c0c <mmk_malloc@@Base>
   11bd0:	mov	r3, r0
   11bd4:	str	r3, [r4]
   11bd8:	ldr	r3, [fp, #-16]
   11bdc:	lsl	r3, r3, #2
   11be0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11be4:	add	r3, r2, r3
   11be8:	ldr	r3, [r3]
   11bec:	mov	r2, #4
   11bf0:	str	r2, [r3]
   11bf4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11bf8:	add	r2, r3, #4
   11bfc:	str	r2, [fp, #-36]	; 0xffffffdc
   11c00:	ldr	r3, [r3]
   11c04:	str	r3, [fp, #-24]	; 0xffffffe8
   11c08:	ldr	r3, [fp, #-16]
   11c0c:	lsl	r3, r3, #2
   11c10:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c14:	add	r3, r2, r3
   11c18:	ldr	r3, [r3]
   11c1c:	add	r3, r3, #4
   11c20:	sub	r1, fp, #24
   11c24:	mov	r2, #4
   11c28:	mov	r0, r3
   11c2c:	bl	14a34 <mmk_memcpy@@Base>
   11c30:	ldr	r3, [fp, #-16]
   11c34:	add	r3, r3, #1
   11c38:	str	r3, [fp, #-16]
   11c3c:	ldr	r2, [fp, #-16]
   11c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c44:	cmp	r2, r3
   11c48:	blt	11bb8 <_start@@Base+0x914>
   11c4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c54:	str	r2, [r3]
   11c58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c60:	str	r2, [r3]
   11c64:	mov	r3, #1
   11c68:	mov	r0, r3
   11c6c:	sub	sp, fp, #8
   11c70:	ldr	r4, [sp]
   11c74:	ldr	fp, [sp, #4]
   11c78:	add	sp, sp, #8
   11c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c80:	push	{r0, r1, r2, r3}
   11c84:	str	r4, [sp, #-12]!
   11c88:	str	fp, [sp, #4]
   11c8c:	str	lr, [sp, #8]
   11c90:	add	fp, sp, #8
   11c94:	sub	sp, sp, #156	; 0x9c
   11c98:	ldr	r3, [pc, #2052]	; 124a4 <_start@@Base+0x1200>
   11c9c:	add	r3, pc, r3
   11ca0:	str	r3, [fp, #-40]	; 0xffffffd8
   11ca4:	add	r3, fp, #8
   11ca8:	str	r3, [fp, #-136]	; 0xffffff78
   11cac:	bl	133e8 <mmk_matcher_ctx@@Base>
   11cb0:	str	r0, [fp, #-44]	; 0xffffffd4
   11cb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11cb8:	cmp	r3, #0
   11cbc:	beq	1219c <_start@@Base+0xef8>
   11cc0:	bl	14368 <mmk_ctx@@Base>
   11cc4:	mov	r3, r0
   11cc8:	mov	r0, r3
   11ccc:	bl	13edc <mmk_stub_context@@Base>
   11cd0:	str	r0, [fp, #-48]	; 0xffffffd0
   11cd4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11cd8:	ldr	r3, [r3]
   11cdc:	cmp	r3, #0
   11ce0:	bne	11d8c <_start@@Base+0xae8>
   11ce4:	mov	r0, #44	; 0x2c
   11ce8:	bl	14c0c <mmk_malloc@@Base>
   11cec:	str	r0, [fp, #-52]	; 0xffffffcc
   11cf0:	bl	14e44 <mmk_when_get_result@@Base>
   11cf4:	mov	r2, r0
   11cf8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11cfc:	add	r3, r3, #8
   11d00:	ldrd	r0, [r2]
   11d04:	strd	r0, [r3]
   11d08:	ldrd	r0, [r2, #8]
   11d0c:	strd	r0, [r3, #8]
   11d10:	ldr	r2, [r2, #16]
   11d14:	str	r2, [r3, #16]
   11d18:	ldr	r2, [fp, #4]
   11d1c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d20:	str	r2, [r3, #40]	; 0x28
   11d24:	mov	r3, #0
   11d28:	str	r3, [fp, #-144]	; 0xffffff70
   11d2c:	mov	r3, #0
   11d30:	str	r3, [fp, #-148]	; 0xffffff6c
   11d34:	ldr	r3, [fp, #-136]	; 0xffffff78
   11d38:	str	r3, [fp, #-140]	; 0xffffff74
   11d3c:	ldr	r0, [fp, #4]
   11d40:	sub	r3, fp, #148	; 0x94
   11d44:	sub	r2, fp, #144	; 0x90
   11d48:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11d4c:	ldr	r1, [fp, #-140]	; 0xffffff74
   11d50:	blx	r4
   11d54:	str	r0, [fp, #-56]	; 0xffffffc8
   11d58:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d5c:	cmp	r3, #0
   11d60:	beq	11d7c <_start@@Base+0xad8>
   11d64:	ldr	r2, [fp, #-144]	; 0xffffff70
   11d68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d6c:	str	r2, [r3, #32]
   11d70:	ldr	r2, [fp, #-148]	; 0xffffff6c
   11d74:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d78:	str	r2, [r3, #36]	; 0x24
   11d7c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d84:	bl	14e88 <mmk_when_impl@@Base>
   11d88:	b	1218c <_start@@Base+0xee8>
   11d8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d90:	ldr	r3, [r3]
   11d94:	cmp	r3, #1
   11d98:	bne	1218c <_start@@Base+0xee8>
   11d9c:	mov	r3, #0
   11da0:	str	r3, [fp, #-16]
   11da4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11da8:	bl	137a8 <mmk_mock_params_begin@@Base>
   11dac:	str	r0, [fp, #-20]	; 0xffffffec
   11db0:	b	12144 <_start@@Base+0xea0>
   11db4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11db8:	str	r3, [fp, #-24]	; 0xffffffe8
   11dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dc0:	ldr	r3, [r3, #8]
   11dc4:	cmp	r3, #0
   11dc8:	beq	11eb8 <_start@@Base+0xc14>
   11dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dd0:	ldr	r3, [r3, #8]
   11dd4:	str	r3, [fp, #-24]	; 0xffffffe8
   11dd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ddc:	ldr	r3, [r3]
   11de0:	cmp	r3, #0
   11de4:	beq	11edc <_start@@Base+0xc38>
   11de8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dec:	ldr	r3, [r3]
   11df0:	cmp	r3, #0
   11df4:	bge	11e78 <_start@@Base+0xbd4>
   11df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11dfc:	add	r3, r3, #12
   11e00:	mov	r2, #4
   11e04:	add	r1, fp, #4
   11e08:	mov	r0, r3
   11e0c:	bl	149e0 <mmk_memcmp@@Base>
   11e10:	str	r0, [fp, #-60]	; 0xffffffc4
   11e14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e18:	cmp	r3, #0
   11e1c:	bne	11e34 <_start@@Base+0xb90>
   11e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e24:	ldr	r3, [r3]
   11e28:	and	r3, r3, #2
   11e2c:	cmp	r3, #0
   11e30:	beq	120f8 <_start@@Base+0xe54>
   11e34:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e38:	cmp	r3, #0
   11e3c:	bge	11e54 <_start@@Base+0xbb0>
   11e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e44:	ldr	r3, [r3]
   11e48:	and	r3, r3, #4
   11e4c:	cmp	r3, #0
   11e50:	beq	12100 <_start@@Base+0xe5c>
   11e54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e58:	cmp	r3, #0
   11e5c:	ble	11edc <_start@@Base+0xc38>
   11e60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e64:	ldr	r3, [r3]
   11e68:	and	r3, r3, #8
   11e6c:	cmp	r3, #0
   11e70:	bne	11edc <_start@@Base+0xc38>
   11e74:	b	12134 <_start@@Base+0xe90>
   11e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e7c:	ldr	r3, [r3]
   11e80:	cmp	r3, #1
   11e84:	bne	11edc <_start@@Base+0xc38>
   11e88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e8c:	bl	134a8 <mmk_matcher_get_predicate@@Base>
   11e90:	str	r0, [fp, #-64]	; 0xffffffc0
   11e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e98:	ldr	r2, [r3, #12]
   11e9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ea0:	mov	r0, r2
   11ea4:	blx	r3
   11ea8:	mov	r3, r0
   11eac:	cmp	r3, #0
   11eb0:	bne	11edc <_start@@Base+0xc38>
   11eb4:	b	12134 <_start@@Base+0xe90>
   11eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ebc:	add	r3, r3, #12
   11ec0:	mov	r2, #4
   11ec4:	add	r1, fp, #4
   11ec8:	mov	r0, r3
   11ecc:	bl	149e0 <mmk_memcmp@@Base>
   11ed0:	mov	r3, r0
   11ed4:	cmp	r3, #0
   11ed8:	bne	12108 <_start@@Base+0xe64>
   11edc:	mov	r3, #0
   11ee0:	str	r3, [fp, #-152]	; 0xffffff68
   11ee4:	mov	r3, #0
   11ee8:	str	r3, [fp, #-156]	; 0xffffff64
   11eec:	ldr	r3, [fp, #-136]	; 0xffffff78
   11ef0:	str	r3, [fp, #-140]	; 0xffffff74
   11ef4:	ldr	r0, [fp, #4]
   11ef8:	sub	r3, fp, #156	; 0x9c
   11efc:	sub	r2, fp, #152	; 0x98
   11f00:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11f04:	ldr	r1, [fp, #-140]	; 0xffffff74
   11f08:	blx	r4
   11f0c:	str	r0, [fp, #-68]	; 0xffffffbc
   11f10:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11f14:	cmp	r3, #0
   11f18:	beq	12110 <_start@@Base+0xe6c>
   11f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f20:	ldr	r2, [r3, #4]
   11f24:	ldr	r3, [fp, #-152]	; 0xffffff68
   11f28:	cmp	r2, r3
   11f2c:	bne	12110 <_start@@Base+0xe6c>
   11f30:	mov	r3, #0
   11f34:	str	r3, [fp, #-28]	; 0xffffffe4
   11f38:	b	120c4 <_start@@Base+0xe20>
   11f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f40:	ldr	r2, [r3, #8]
   11f44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f48:	lsl	r3, r3, #2
   11f4c:	add	r3, r2, r3
   11f50:	ldr	r3, [r3]
   11f54:	str	r3, [fp, #-72]	; 0xffffffb8
   11f58:	ldr	r2, [fp, #-156]	; 0xffffff64
   11f5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f60:	lsl	r3, r3, #2
   11f64:	add	r3, r2, r3
   11f68:	ldr	r3, [r3]
   11f6c:	str	r3, [fp, #-76]	; 0xffffffb4
   11f70:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11f74:	ldr	r2, [r3]
   11f78:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11f7c:	ldr	r3, [r3]
   11f80:	cmp	r2, r3
   11f84:	bne	12118 <_start@@Base+0xe74>
   11f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f8c:	ldr	r3, [r3, #8]
   11f90:	cmp	r3, #0
   11f94:	beq	12084 <_start@@Base+0xde0>
   11f98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f9c:	ldr	r3, [r3, #8]
   11fa0:	str	r3, [fp, #-24]	; 0xffffffe8
   11fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fa8:	ldr	r3, [r3]
   11fac:	cmp	r3, #0
   11fb0:	beq	120b0 <_start@@Base+0xe0c>
   11fb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fb8:	ldr	r3, [r3]
   11fbc:	cmp	r3, #0
   11fc0:	bge	1204c <_start@@Base+0xda8>
   11fc4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11fc8:	add	r0, r3, #4
   11fcc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11fd0:	add	r1, r3, #4
   11fd4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11fd8:	ldr	r3, [r3]
   11fdc:	mov	r2, r3
   11fe0:	bl	149e0 <mmk_memcmp@@Base>
   11fe4:	str	r0, [fp, #-80]	; 0xffffffb0
   11fe8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11fec:	cmp	r3, #0
   11ff0:	bne	12008 <_start@@Base+0xd64>
   11ff4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ff8:	ldr	r3, [r3]
   11ffc:	and	r3, r3, #2
   12000:	cmp	r3, #0
   12004:	beq	12120 <_start@@Base+0xe7c>
   12008:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1200c:	cmp	r3, #0
   12010:	bge	12028 <_start@@Base+0xd84>
   12014:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12018:	ldr	r3, [r3]
   1201c:	and	r3, r3, #4
   12020:	cmp	r3, #0
   12024:	beq	12128 <_start@@Base+0xe84>
   12028:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1202c:	cmp	r3, #0
   12030:	ble	120b0 <_start@@Base+0xe0c>
   12034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12038:	ldr	r3, [r3]
   1203c:	and	r3, r3, #8
   12040:	cmp	r3, #0
   12044:	bne	120b0 <_start@@Base+0xe0c>
   12048:	b	12134 <_start@@Base+0xe90>
   1204c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12050:	ldr	r3, [r3]
   12054:	cmp	r3, #1
   12058:	bne	120b0 <_start@@Base+0xe0c>
   1205c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12060:	bl	134a8 <mmk_matcher_get_predicate@@Base>
   12064:	str	r0, [fp, #-84]	; 0xffffffac
   12068:	ldr	r3, [fp, #-84]	; 0xffffffac
   1206c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12070:	blx	r3
   12074:	mov	r3, r0
   12078:	cmp	r3, #0
   1207c:	bne	120b0 <_start@@Base+0xe0c>
   12080:	b	12134 <_start@@Base+0xe90>
   12084:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12088:	add	r0, r3, #4
   1208c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12090:	add	r1, r3, #4
   12094:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12098:	ldr	r3, [r3]
   1209c:	mov	r2, r3
   120a0:	bl	149e0 <mmk_memcmp@@Base>
   120a4:	mov	r3, r0
   120a8:	cmp	r3, #0
   120ac:	bne	12130 <_start@@Base+0xe8c>
   120b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   120b4:	bl	14c4c <mmk_free@@Base>
   120b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120bc:	add	r3, r3, #1
   120c0:	str	r3, [fp, #-28]	; 0xffffffe4
   120c4:	ldr	r3, [fp, #-152]	; 0xffffff68
   120c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   120cc:	cmp	r2, r3
   120d0:	bcc	11f3c <_start@@Base+0xc98>
   120d4:	ldr	r3, [fp, #-156]	; 0xffffff64
   120d8:	mov	r0, r3
   120dc:	bl	14c4c <mmk_free@@Base>
   120e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e4:	ldr	r3, [r3]
   120e8:	ldr	r2, [fp, #-16]
   120ec:	add	r3, r2, r3
   120f0:	str	r3, [fp, #-16]
   120f4:	b	12134 <_start@@Base+0xe90>
   120f8:	nop	{0}
   120fc:	b	12134 <_start@@Base+0xe90>
   12100:	nop	{0}
   12104:	b	12134 <_start@@Base+0xe90>
   12108:	nop	{0}
   1210c:	b	12134 <_start@@Base+0xe90>
   12110:	nop	{0}
   12114:	b	12134 <_start@@Base+0xe90>
   12118:	nop	{0}
   1211c:	b	12134 <_start@@Base+0xe90>
   12120:	nop	{0}
   12124:	b	12134 <_start@@Base+0xe90>
   12128:	nop	{0}
   1212c:	b	12134 <_start@@Base+0xe90>
   12130:	nop	{0}
   12134:	ldr	r1, [fp, #-20]	; 0xffffffec
   12138:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1213c:	bl	137fc <mmk_mock_params_next@@Base>
   12140:	str	r0, [fp, #-20]	; 0xffffffec
   12144:	ldr	r3, [fp, #-20]	; 0xffffffec
   12148:	cmp	r3, #0
   1214c:	bne	11db4 <_start@@Base+0xb10>
   12150:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12154:	str	r3, [fp, #-32]	; 0xffffffe0
   12158:	b	12178 <_start@@Base+0xed4>
   1215c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12160:	ldr	r3, [r3, #8]
   12164:	str	r3, [fp, #-88]	; 0xffffffa8
   12168:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1216c:	bl	14c4c <mmk_free@@Base>
   12170:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12174:	str	r3, [fp, #-32]	; 0xffffffe0
   12178:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1217c:	cmp	r3, #0
   12180:	bne	1215c <_start@@Base+0xeb8>
   12184:	ldr	r0, [fp, #-16]
   12188:	bl	1454c <mmk_verify_set_times@@Base>
   1218c:	ldr	r3, [pc, #788]	; 124a8 <_start@@Base+0x1204>
   12190:	add	r3, pc, r3
   12194:	ldr	r3, [r3]
   12198:	b	12484 <_start@@Base+0x11e0>
   1219c:	sub	r1, fp, #132	; 0x84
   121a0:	mov	r2, #0
   121a4:	mov	r3, #0
   121a8:	strd	r2, [r1]
   121ac:	strd	r2, [r1, #8]
   121b0:	ldr	r3, [fp, #4]
   121b4:	str	r3, [fp, #-120]	; 0xffffff88
   121b8:	sub	r3, fp, #132	; 0x84
   121bc:	str	r3, [fp, #-92]	; 0xffffffa4
   121c0:	mov	r3, #0
   121c4:	str	r3, [fp, #-160]	; 0xffffff60
   121c8:	mov	r3, #0
   121cc:	str	r3, [fp, #-164]	; 0xffffff5c
   121d0:	ldr	r3, [fp, #-136]	; 0xffffff78
   121d4:	str	r3, [fp, #-140]	; 0xffffff74
   121d8:	ldr	r0, [fp, #4]
   121dc:	sub	r3, fp, #164	; 0xa4
   121e0:	sub	r2, fp, #160	; 0xa0
   121e4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   121e8:	ldr	r1, [fp, #-140]	; 0xffffff74
   121ec:	blx	r4
   121f0:	str	r0, [fp, #-96]	; 0xffffffa0
   121f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   121f8:	cmp	r3, #0
   121fc:	beq	12218 <_start@@Base+0xf74>
   12200:	ldr	r2, [fp, #-160]	; 0xffffff60
   12204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12208:	str	r2, [r3, #4]
   1220c:	ldr	r2, [fp, #-164]	; 0xffffff5c
   12210:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12214:	str	r2, [r3, #8]
   12218:	mov	r1, #16
   1221c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12220:	bl	14794 <mmk_verify_register_call@@Base>
   12224:	bl	13874 <mmk_mock_get_params@@Base>
   12228:	str	r0, [fp, #-36]	; 0xffffffdc
   1222c:	b	1246c <_start@@Base+0x11c8>
   12230:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12234:	str	r3, [fp, #-100]	; 0xffffff9c
   12238:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1223c:	ldr	r3, [r3]
   12240:	str	r3, [fp, #-104]	; 0xffffff98
   12244:	ldr	r3, [fp, #-104]	; 0xffffff98
   12248:	ldr	r3, [r3, #8]
   1224c:	cmp	r3, #0
   12250:	beq	1233c <_start@@Base+0x1098>
   12254:	ldr	r3, [fp, #-104]	; 0xffffff98
   12258:	ldr	r3, [r3, #8]
   1225c:	str	r3, [fp, #-104]	; 0xffffff98
   12260:	ldr	r3, [fp, #-104]	; 0xffffff98
   12264:	ldr	r3, [r3]
   12268:	cmp	r3, #0
   1226c:	beq	12364 <_start@@Base+0x10c0>
   12270:	ldr	r3, [fp, #-104]	; 0xffffff98
   12274:	ldr	r3, [r3]
   12278:	cmp	r3, #0
   1227c:	bge	12300 <_start@@Base+0x105c>
   12280:	mov	r2, #4
   12284:	add	r3, fp, #4
   12288:	mov	r1, r3
   1228c:	add	r3, fp, #4
   12290:	mov	r0, r3
   12294:	bl	149e0 <mmk_memcmp@@Base>
   12298:	str	r0, [fp, #-108]	; 0xffffff94
   1229c:	ldr	r3, [fp, #-108]	; 0xffffff94
   122a0:	cmp	r3, #0
   122a4:	bne	122bc <_start@@Base+0x1018>
   122a8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122ac:	ldr	r3, [r3]
   122b0:	and	r3, r3, #2
   122b4:	cmp	r3, #0
   122b8:	beq	12454 <_start@@Base+0x11b0>
   122bc:	ldr	r3, [fp, #-108]	; 0xffffff94
   122c0:	cmp	r3, #0
   122c4:	bge	122dc <_start@@Base+0x1038>
   122c8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122cc:	ldr	r3, [r3]
   122d0:	and	r3, r3, #4
   122d4:	cmp	r3, #0
   122d8:	beq	12454 <_start@@Base+0x11b0>
   122dc:	ldr	r3, [fp, #-108]	; 0xffffff94
   122e0:	cmp	r3, #0
   122e4:	ble	12364 <_start@@Base+0x10c0>
   122e8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122ec:	ldr	r3, [r3]
   122f0:	and	r3, r3, #8
   122f4:	cmp	r3, #0
   122f8:	bne	12364 <_start@@Base+0x10c0>
   122fc:	b	12454 <_start@@Base+0x11b0>
   12300:	ldr	r3, [fp, #-104]	; 0xffffff98
   12304:	ldr	r3, [r3]
   12308:	cmp	r3, #1
   1230c:	bne	12364 <_start@@Base+0x10c0>
   12310:	ldr	r0, [fp, #-104]	; 0xffffff98
   12314:	bl	134a8 <mmk_matcher_get_predicate@@Base>
   12318:	str	r0, [fp, #-112]	; 0xffffff90
   1231c:	ldr	r2, [fp, #4]
   12320:	ldr	r3, [fp, #-112]	; 0xffffff90
   12324:	mov	r0, r2
   12328:	blx	r3
   1232c:	mov	r3, r0
   12330:	cmp	r3, #0
   12334:	bne	12364 <_start@@Base+0x10c0>
   12338:	b	12460 <_start@@Base+0x11bc>
   1233c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12340:	add	r3, r3, #40	; 0x28
   12344:	mov	r2, #4
   12348:	mov	r1, r3
   1234c:	add	r3, fp, #4
   12350:	mov	r0, r3
   12354:	bl	149e0 <mmk_memcmp@@Base>
   12358:	mov	r3, r0
   1235c:	cmp	r3, #0
   12360:	bne	1245c <_start@@Base+0x11b8>
   12364:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12368:	ldr	r3, [r3, #12]
   1236c:	cmp	r3, #0
   12370:	beq	12388 <_start@@Base+0x10e4>
   12374:	bl	1125c <__errno_location@plt>
   12378:	mov	r2, r0
   1237c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12380:	ldr	r3, [r3, #12]
   12384:	str	r3, [r2]
   12388:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1238c:	ldr	r3, [r3, #20]
   12390:	cmp	r3, #0
   12394:	beq	123d4 <_start@@Base+0x1130>
   12398:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1239c:	ldr	r3, [r3, #16]
   123a0:	cmp	r3, #0
   123a4:	bne	123d4 <_start@@Base+0x1130>
   123a8:	ldr	r3, [fp, #-136]	; 0xffffff78
   123ac:	str	r3, [fp, #-140]	; 0xffffff74
   123b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123b4:	ldr	r3, [r3, #20]
   123b8:	ldr	r2, [fp, #4]
   123bc:	ldr	r1, [fp, #-140]	; 0xffffff74
   123c0:	mov	r0, r2
   123c4:	blx	r3
   123c8:	str	r0, [fp, #-116]	; 0xffffff8c
   123cc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   123d0:	b	12484 <_start@@Base+0x11e0>
   123d4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123d8:	ldr	r3, [r3, #20]
   123dc:	cmp	r3, #0
   123e0:	beq	12424 <_start@@Base+0x1180>
   123e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123e8:	ldr	r3, [r3, #16]
   123ec:	cmp	r3, #0
   123f0:	beq	12424 <_start@@Base+0x1180>
   123f4:	ldr	r3, [fp, #-136]	; 0xffffff78
   123f8:	str	r3, [fp, #-140]	; 0xffffff74
   123fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12400:	ldr	r3, [r3, #20]
   12404:	ldr	r2, [fp, #4]
   12408:	ldr	r1, [fp, #-140]	; 0xffffff74
   1240c:	mov	r0, r2
   12410:	blx	r3
   12414:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12418:	ldr	r3, [r3, #16]
   1241c:	ldr	r3, [r3]
   12420:	b	12484 <_start@@Base+0x11e0>
   12424:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12428:	ldr	r3, [r3, #16]
   1242c:	cmp	r3, #0
   12430:	beq	12444 <_start@@Base+0x11a0>
   12434:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12438:	ldr	r3, [r3, #16]
   1243c:	ldr	r3, [r3]
   12440:	b	12484 <_start@@Base+0x11e0>
   12444:	ldr	r3, [pc, #96]	; 124ac <_start@@Base+0x1208>
   12448:	add	r3, pc, r3
   1244c:	ldr	r3, [r3]
   12450:	b	12484 <_start@@Base+0x11e0>
   12454:	nop	{0}
   12458:	b	12460 <_start@@Base+0x11bc>
   1245c:	nop	{0}
   12460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12464:	ldr	r3, [r3, #4]
   12468:	str	r3, [fp, #-36]	; 0xffffffdc
   1246c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12470:	cmp	r3, #0
   12474:	bne	12230 <_start@@Base+0xf8c>
   12478:	ldr	r3, [pc, #48]	; 124b0 <_start@@Base+0x120c>
   1247c:	add	r3, pc, r3
   12480:	ldr	r3, [r3]
   12484:	mov	r0, r3
   12488:	sub	sp, fp, #8
   1248c:	ldr	r4, [sp]
   12490:	ldr	fp, [sp, #4]
   12494:	ldr	lr, [sp, #8]
   12498:	add	sp, sp, #12
   1249c:	add	sp, sp, #16
   124a0:	bx	lr
   124a4:			; <UNDEFINED> instruction: 0xfffffebc
   124a8:	andeq	r3, r1, r8, lsr #30
   124ac:	andeq	r3, r1, r0, ror ip
   124b0:	andeq	r3, r1, ip, lsr ip
   124b4:	str	fp, [sp, #-8]!
   124b8:	str	lr, [sp, #4]
   124bc:	add	fp, sp, #4
   124c0:	sub	sp, sp, #8
   124c4:	str	r0, [fp, #-8]
   124c8:	ldr	r3, [pc, #36]	; 124f4 <_start@@Base+0x1250>
   124cc:	add	r3, pc, r3
   124d0:	mov	r1, r3
   124d4:	ldr	r0, [fp, #-8]
   124d8:	bl	134b0 <mmk_mock_create_internal@@Base>
   124dc:	mov	r3, r0
   124e0:	mov	r0, r3
   124e4:	sub	sp, fp, #4
   124e8:	ldr	fp, [sp]
   124ec:	add	sp, sp, #4
   124f0:	pop	{pc}		; (ldr pc, [sp], #4)
   124f4:			; <UNDEFINED> instruction: 0xfffff7ac

000124f8 <set_valid@@Base>:
   124f8:	push	{fp}		; (str fp, [sp, #-4]!)
   124fc:	add	fp, sp, #0
   12500:	ldr	r3, [pc, #24]	; 12520 <set_valid@@Base+0x28>
   12504:	add	r3, pc, r3
   12508:	mov	r2, #1
   1250c:	str	r2, [r3]
   12510:	nop	{0}
   12514:	add	sp, fp, #0
   12518:	pop	{fp}		; (ldr fp, [sp], #4)
   1251c:	bx	lr
   12520:	andeq	r3, r1, ip, lsr #23

00012524 <main@@Base>:
   12524:	str	r4, [sp, #-12]!
   12528:	str	fp, [sp, #4]
   1252c:	str	lr, [sp, #8]
   12530:	add	fp, sp, #8
   12534:	sub	sp, sp, #468	; 0x1d4
   12538:	ldr	r4, [pc, #2844]	; 1305c <main@@Base+0xb38>
   1253c:	add	r4, pc, r4
   12540:	ldr	r3, [pc, #2840]	; 13060 <main@@Base+0xb3c>
   12544:	add	r3, pc, r3
   12548:	mov	r0, r3
   1254c:	bl	11b1c <_start@@Base+0x878>
   12550:	mov	r0, #0
   12554:	bl	1335c <mmk_matcher_init@@Base>
   12558:	sub	r1, fp, #468	; 0x1d4
   1255c:	mov	r2, #0
   12560:	mov	r3, #0
   12564:	strd	r2, [r1]
   12568:	strd	r2, [r1, #8]
   1256c:	mov	r3, r2
   12570:	str	r3, [r1, #16]
   12574:	ldr	r3, [pc, #2792]	; 13064 <main@@Base+0xb40>
   12578:	ldr	r3, [r4, r3]
   1257c:	str	r3, [fp, #-456]	; 0xfffffe38
   12580:	sub	r3, fp, #468	; 0x1d4
   12584:	mov	r0, r3
   12588:	bl	14df4 <mmk_when_init@@Base>
   1258c:	bl	111d8 <fn_vv@plt>
   12590:	bl	133b4 <mmk_matcher_term@@Base>
   12594:	mov	r0, #1
   12598:	bl	1335c <mmk_matcher_init@@Base>
   1259c:	bl	111d8 <fn_vv@plt>
   125a0:	bl	133b4 <mmk_matcher_term@@Base>
   125a4:	sub	r1, fp, #448	; 0x1c0
   125a8:	mov	r2, #0
   125ac:	mov	r3, #0
   125b0:	strd	r2, [r1]
   125b4:	strd	r2, [r1, #8]
   125b8:	strd	r2, [r1, #16]
   125bc:	mov	r3, #1
   125c0:	str	r3, [fp, #-448]	; 0xfffffe40
   125c4:	mov	r3, #1
   125c8:	str	r3, [fp, #-444]	; 0xfffffe44
   125cc:	sub	r3, fp, #448	; 0x1c0
   125d0:	mov	r0, r3
   125d4:	bl	1459c <mmk_verify_times@@Base>
   125d8:	mov	r3, r0
   125dc:	cmp	r3, #0
   125e0:	bne	12618 <main@@Base+0xf4>
   125e4:	ldr	r3, [pc, #2684]	; 13068 <main@@Base+0xb44>
   125e8:	ldr	r3, [r4, r3]
   125ec:	ldr	r0, [r3]
   125f0:	ldr	r3, [pc, #2676]	; 1306c <main@@Base+0xb48>
   125f4:	add	r3, pc, r3
   125f8:	str	r3, [sp]
   125fc:	mov	r3, #42	; 0x2a
   12600:	ldr	r2, [pc, #2664]	; 13070 <main@@Base+0xb4c>
   12604:	add	r2, pc, r2
   12608:	ldr	r1, [pc, #2660]	; 13074 <main@@Base+0xb50>
   1260c:	add	r1, pc, r1
   12610:	bl	11250 <fprintf@plt>
   12614:	bl	11298 <abort@plt>
   12618:	mov	r0, #1
   1261c:	bl	1335c <mmk_matcher_init@@Base>
   12620:	bl	111d8 <fn_vv@plt>
   12624:	bl	133b4 <mmk_matcher_term@@Base>
   12628:	sub	r1, fp, #424	; 0x1a8
   1262c:	mov	r2, #0
   12630:	mov	r3, #0
   12634:	strd	r2, [r1]
   12638:	strd	r2, [r1, #8]
   1263c:	strd	r2, [r1, #16]
   12640:	mov	r3, #1
   12644:	str	r3, [fp, #-424]	; 0xfffffe58
   12648:	mov	r3, #1
   1264c:	str	r3, [fp, #-412]	; 0xfffffe64
   12650:	sub	r3, fp, #424	; 0x1a8
   12654:	mov	r0, r3
   12658:	bl	1459c <mmk_verify_times@@Base>
   1265c:	mov	r3, r0
   12660:	cmp	r3, #0
   12664:	bne	1269c <main@@Base+0x178>
   12668:	ldr	r3, [pc, #2552]	; 13068 <main@@Base+0xb44>
   1266c:	ldr	r3, [r4, r3]
   12670:	ldr	r0, [r3]
   12674:	ldr	r3, [pc, #2556]	; 13078 <main@@Base+0xb54>
   12678:	add	r3, pc, r3
   1267c:	str	r3, [sp]
   12680:	mov	r3, #43	; 0x2b
   12684:	ldr	r2, [pc, #2544]	; 1307c <main@@Base+0xb58>
   12688:	add	r2, pc, r2
   1268c:	ldr	r1, [pc, #2540]	; 13080 <main@@Base+0xb5c>
   12690:	add	r1, pc, r1
   12694:	bl	11250 <fprintf@plt>
   12698:	bl	11298 <abort@plt>
   1269c:	mov	r0, #1
   126a0:	bl	1335c <mmk_matcher_init@@Base>
   126a4:	bl	111d8 <fn_vv@plt>
   126a8:	bl	133b4 <mmk_matcher_term@@Base>
   126ac:	sub	r1, fp, #400	; 0x190
   126b0:	mov	r2, #0
   126b4:	mov	r3, #0
   126b8:	strd	r2, [r1]
   126bc:	strd	r2, [r1, #8]
   126c0:	strd	r2, [r1, #16]
   126c4:	mov	r3, #1
   126c8:	str	r3, [fp, #-400]	; 0xfffffe70
   126cc:	mov	r3, #1
   126d0:	str	r3, [fp, #-384]	; 0xfffffe80
   126d4:	sub	r3, fp, #400	; 0x190
   126d8:	mov	r0, r3
   126dc:	bl	1459c <mmk_verify_times@@Base>
   126e0:	mov	r3, r0
   126e4:	cmp	r3, #0
   126e8:	beq	12720 <main@@Base+0x1fc>
   126ec:	ldr	r3, [pc, #2420]	; 13068 <main@@Base+0xb44>
   126f0:	ldr	r3, [r4, r3]
   126f4:	ldr	r0, [r3]
   126f8:	ldr	r3, [pc, #2436]	; 13084 <main@@Base+0xb60>
   126fc:	add	r3, pc, r3
   12700:	str	r3, [sp]
   12704:	mov	r3, #45	; 0x2d
   12708:	ldr	r2, [pc, #2424]	; 13088 <main@@Base+0xb64>
   1270c:	add	r2, pc, r2
   12710:	ldr	r1, [pc, #2420]	; 1308c <main@@Base+0xb68>
   12714:	add	r1, pc, r1
   12718:	bl	11250 <fprintf@plt>
   1271c:	bl	11298 <abort@plt>
   12720:	mov	r0, #1
   12724:	bl	1335c <mmk_matcher_init@@Base>
   12728:	bl	111d8 <fn_vv@plt>
   1272c:	bl	133b4 <mmk_matcher_term@@Base>
   12730:	sub	r1, fp, #376	; 0x178
   12734:	mov	r2, #0
   12738:	mov	r3, #0
   1273c:	strd	r2, [r1]
   12740:	strd	r2, [r1, #8]
   12744:	strd	r2, [r1, #16]
   12748:	mov	r3, #1
   1274c:	str	r3, [fp, #-376]	; 0xfffffe88
   12750:	mov	r3, #1
   12754:	str	r3, [fp, #-368]	; 0xfffffe90
   12758:	sub	r3, fp, #376	; 0x178
   1275c:	mov	r0, r3
   12760:	bl	1459c <mmk_verify_times@@Base>
   12764:	mov	r3, r0
   12768:	cmp	r3, #0
   1276c:	beq	127a4 <main@@Base+0x280>
   12770:	ldr	r3, [pc, #2288]	; 13068 <main@@Base+0xb44>
   12774:	ldr	r3, [r4, r3]
   12778:	ldr	r0, [r3]
   1277c:	ldr	r3, [pc, #2316]	; 13090 <main@@Base+0xb6c>
   12780:	add	r3, pc, r3
   12784:	str	r3, [sp]
   12788:	mov	r3, #46	; 0x2e
   1278c:	ldr	r2, [pc, #2304]	; 13094 <main@@Base+0xb70>
   12790:	add	r2, pc, r2
   12794:	ldr	r1, [pc, #2300]	; 13098 <main@@Base+0xb74>
   12798:	add	r1, pc, r1
   1279c:	bl	11250 <fprintf@plt>
   127a0:	bl	11298 <abort@plt>
   127a4:	mov	r0, #1
   127a8:	bl	1335c <mmk_matcher_init@@Base>
   127ac:	bl	111d8 <fn_vv@plt>
   127b0:	bl	133b4 <mmk_matcher_term@@Base>
   127b4:	sub	r1, fp, #352	; 0x160
   127b8:	mov	r2, #0
   127bc:	mov	r3, #0
   127c0:	strd	r2, [r1]
   127c4:	strd	r2, [r1, #8]
   127c8:	strd	r2, [r1, #16]
   127cc:	mov	r3, #1
   127d0:	str	r3, [fp, #-352]	; 0xfffffea0
   127d4:	mov	r3, #1
   127d8:	str	r3, [fp, #-344]	; 0xfffffea8
   127dc:	mov	r3, #1
   127e0:	str	r3, [fp, #-340]	; 0xfffffeac
   127e4:	sub	r3, fp, #352	; 0x160
   127e8:	mov	r0, r3
   127ec:	bl	1459c <mmk_verify_times@@Base>
   127f0:	mov	r3, r0
   127f4:	cmp	r3, #0
   127f8:	beq	12830 <main@@Base+0x30c>
   127fc:	ldr	r3, [pc, #2148]	; 13068 <main@@Base+0xb44>
   12800:	ldr	r3, [r4, r3]
   12804:	ldr	r0, [r3]
   12808:	ldr	r3, [pc, #2188]	; 1309c <main@@Base+0xb78>
   1280c:	add	r3, pc, r3
   12810:	str	r3, [sp]
   12814:	mov	r3, #47	; 0x2f
   12818:	ldr	r2, [pc, #2176]	; 130a0 <main@@Base+0xb7c>
   1281c:	add	r2, pc, r2
   12820:	ldr	r1, [pc, #2172]	; 130a4 <main@@Base+0xb80>
   12824:	add	r1, pc, r1
   12828:	bl	11250 <fprintf@plt>
   1282c:	bl	11298 <abort@plt>
   12830:	bl	111d8 <fn_vv@plt>
   12834:	ldr	r3, [pc, #2156]	; 130a8 <main@@Base+0xb84>
   12838:	add	r3, pc, r3
   1283c:	ldr	r3, [r3]
   12840:	cmp	r3, #0
   12844:	bne	1287c <main@@Base+0x358>
   12848:	ldr	r3, [pc, #2072]	; 13068 <main@@Base+0xb44>
   1284c:	ldr	r3, [r4, r3]
   12850:	ldr	r0, [r3]
   12854:	ldr	r3, [pc, #2128]	; 130ac <main@@Base+0xb88>
   12858:	add	r3, pc, r3
   1285c:	str	r3, [sp]
   12860:	mov	r3, #50	; 0x32
   12864:	ldr	r2, [pc, #2116]	; 130b0 <main@@Base+0xb8c>
   12868:	add	r2, pc, r2
   1286c:	ldr	r1, [pc, #2112]	; 130b4 <main@@Base+0xb90>
   12870:	add	r1, pc, r1
   12874:	bl	11250 <fprintf@plt>
   12878:	bl	11298 <abort@plt>
   1287c:	mov	r0, #1
   12880:	bl	1335c <mmk_matcher_init@@Base>
   12884:	bl	111d8 <fn_vv@plt>
   12888:	bl	133b4 <mmk_matcher_term@@Base>
   1288c:	sub	r1, fp, #328	; 0x148
   12890:	mov	r2, #0
   12894:	mov	r3, #0
   12898:	strd	r2, [r1]
   1289c:	strd	r2, [r1, #8]
   128a0:	strd	r2, [r1, #16]
   128a4:	mov	r3, #1
   128a8:	str	r3, [fp, #-328]	; 0xfffffeb8
   128ac:	mov	r3, #1
   128b0:	str	r3, [fp, #-312]	; 0xfffffec8
   128b4:	sub	r3, fp, #328	; 0x148
   128b8:	mov	r0, r3
   128bc:	bl	1459c <mmk_verify_times@@Base>
   128c0:	mov	r3, r0
   128c4:	cmp	r3, #0
   128c8:	bne	12900 <main@@Base+0x3dc>
   128cc:	ldr	r3, [pc, #1940]	; 13068 <main@@Base+0xb44>
   128d0:	ldr	r3, [r4, r3]
   128d4:	ldr	r0, [r3]
   128d8:	ldr	r3, [pc, #2008]	; 130b8 <main@@Base+0xb94>
   128dc:	add	r3, pc, r3
   128e0:	str	r3, [sp]
   128e4:	mov	r3, #51	; 0x33
   128e8:	ldr	r2, [pc, #1996]	; 130bc <main@@Base+0xb98>
   128ec:	add	r2, pc, r2
   128f0:	ldr	r1, [pc, #1992]	; 130c0 <main@@Base+0xb9c>
   128f4:	add	r1, pc, r1
   128f8:	bl	11250 <fprintf@plt>
   128fc:	bl	11298 <abort@plt>
   12900:	mov	r0, #1
   12904:	bl	1335c <mmk_matcher_init@@Base>
   12908:	bl	111d8 <fn_vv@plt>
   1290c:	bl	133b4 <mmk_matcher_term@@Base>
   12910:	sub	r1, fp, #304	; 0x130
   12914:	mov	r2, #0
   12918:	mov	r3, #0
   1291c:	strd	r2, [r1]
   12920:	strd	r2, [r1, #8]
   12924:	strd	r2, [r1, #16]
   12928:	mov	r3, #1
   1292c:	str	r3, [fp, #-304]	; 0xfffffed0
   12930:	mov	r3, #1
   12934:	str	r3, [fp, #-296]	; 0xfffffed8
   12938:	sub	r3, fp, #304	; 0x130
   1293c:	mov	r0, r3
   12940:	bl	1459c <mmk_verify_times@@Base>
   12944:	mov	r3, r0
   12948:	cmp	r3, #0
   1294c:	bne	12984 <main@@Base+0x460>
   12950:	ldr	r3, [pc, #1808]	; 13068 <main@@Base+0xb44>
   12954:	ldr	r3, [r4, r3]
   12958:	ldr	r0, [r3]
   1295c:	ldr	r3, [pc, #1888]	; 130c4 <main@@Base+0xba0>
   12960:	add	r3, pc, r3
   12964:	str	r3, [sp]
   12968:	mov	r3, #52	; 0x34
   1296c:	ldr	r2, [pc, #1876]	; 130c8 <main@@Base+0xba4>
   12970:	add	r2, pc, r2
   12974:	ldr	r1, [pc, #1872]	; 130cc <main@@Base+0xba8>
   12978:	add	r1, pc, r1
   1297c:	bl	11250 <fprintf@plt>
   12980:	bl	11298 <abort@plt>
   12984:	mov	r0, #1
   12988:	bl	1335c <mmk_matcher_init@@Base>
   1298c:	bl	111d8 <fn_vv@plt>
   12990:	bl	133b4 <mmk_matcher_term@@Base>
   12994:	sub	r1, fp, #280	; 0x118
   12998:	mov	r2, #0
   1299c:	mov	r3, #0
   129a0:	strd	r2, [r1]
   129a4:	strd	r2, [r1, #8]
   129a8:	strd	r2, [r1, #16]
   129ac:	mov	r3, #1
   129b0:	str	r3, [fp, #-280]	; 0xfffffee8
   129b4:	mov	r3, #1
   129b8:	str	r3, [fp, #-268]	; 0xfffffef4
   129bc:	sub	r3, fp, #280	; 0x118
   129c0:	mov	r0, r3
   129c4:	bl	1459c <mmk_verify_times@@Base>
   129c8:	mov	r3, r0
   129cc:	cmp	r3, #0
   129d0:	bne	12a08 <main@@Base+0x4e4>
   129d4:	ldr	r3, [pc, #1676]	; 13068 <main@@Base+0xb44>
   129d8:	ldr	r3, [r4, r3]
   129dc:	ldr	r0, [r3]
   129e0:	ldr	r3, [pc, #1768]	; 130d0 <main@@Base+0xbac>
   129e4:	add	r3, pc, r3
   129e8:	str	r3, [sp]
   129ec:	mov	r3, #53	; 0x35
   129f0:	ldr	r2, [pc, #1756]	; 130d4 <main@@Base+0xbb0>
   129f4:	add	r2, pc, r2
   129f8:	ldr	r1, [pc, #1752]	; 130d8 <main@@Base+0xbb4>
   129fc:	add	r1, pc, r1
   12a00:	bl	11250 <fprintf@plt>
   12a04:	bl	11298 <abort@plt>
   12a08:	mov	r0, #1
   12a0c:	bl	1335c <mmk_matcher_init@@Base>
   12a10:	bl	111d8 <fn_vv@plt>
   12a14:	bl	133b4 <mmk_matcher_term@@Base>
   12a18:	sub	r1, fp, #256	; 0x100
   12a1c:	mov	r2, #0
   12a20:	mov	r3, #0
   12a24:	strd	r2, [r1]
   12a28:	strd	r2, [r1, #8]
   12a2c:	strd	r2, [r1, #16]
   12a30:	mov	r3, #1
   12a34:	str	r3, [fp, #-256]	; 0xffffff00
   12a38:	mov	r3, #1
   12a3c:	str	r3, [fp, #-248]	; 0xffffff08
   12a40:	mov	r3, #1
   12a44:	str	r3, [fp, #-244]	; 0xffffff0c
   12a48:	sub	r3, fp, #256	; 0x100
   12a4c:	mov	r0, r3
   12a50:	bl	1459c <mmk_verify_times@@Base>
   12a54:	mov	r3, r0
   12a58:	cmp	r3, #0
   12a5c:	bne	12a94 <main@@Base+0x570>
   12a60:	ldr	r3, [pc, #1536]	; 13068 <main@@Base+0xb44>
   12a64:	ldr	r3, [r4, r3]
   12a68:	ldr	r0, [r3]
   12a6c:	ldr	r3, [pc, #1640]	; 130dc <main@@Base+0xbb8>
   12a70:	add	r3, pc, r3
   12a74:	str	r3, [sp]
   12a78:	mov	r3, #54	; 0x36
   12a7c:	ldr	r2, [pc, #1628]	; 130e0 <main@@Base+0xbbc>
   12a80:	add	r2, pc, r2
   12a84:	ldr	r1, [pc, #1624]	; 130e4 <main@@Base+0xbc0>
   12a88:	add	r1, pc, r1
   12a8c:	bl	11250 <fprintf@plt>
   12a90:	bl	11298 <abort@plt>
   12a94:	mov	r0, #1
   12a98:	bl	1335c <mmk_matcher_init@@Base>
   12a9c:	bl	111d8 <fn_vv@plt>
   12aa0:	bl	133b4 <mmk_matcher_term@@Base>
   12aa4:	sub	r1, fp, #232	; 0xe8
   12aa8:	mov	r2, #0
   12aac:	mov	r3, #0
   12ab0:	strd	r2, [r1]
   12ab4:	strd	r2, [r1, #8]
   12ab8:	strd	r2, [r1, #16]
   12abc:	mov	r3, #1
   12ac0:	str	r3, [fp, #-232]	; 0xffffff18
   12ac4:	mov	r3, #1
   12ac8:	str	r3, [fp, #-228]	; 0xffffff1c
   12acc:	sub	r3, fp, #232	; 0xe8
   12ad0:	mov	r0, r3
   12ad4:	bl	1459c <mmk_verify_times@@Base>
   12ad8:	mov	r3, r0
   12adc:	cmp	r3, #0
   12ae0:	beq	12b18 <main@@Base+0x5f4>
   12ae4:	ldr	r3, [pc, #1404]	; 13068 <main@@Base+0xb44>
   12ae8:	ldr	r3, [r4, r3]
   12aec:	ldr	r0, [r3]
   12af0:	ldr	r3, [pc, #1520]	; 130e8 <main@@Base+0xbc4>
   12af4:	add	r3, pc, r3
   12af8:	str	r3, [sp]
   12afc:	mov	r3, #55	; 0x37
   12b00:	ldr	r2, [pc, #1508]	; 130ec <main@@Base+0xbc8>
   12b04:	add	r2, pc, r2
   12b08:	ldr	r1, [pc, #1504]	; 130f0 <main@@Base+0xbcc>
   12b0c:	add	r1, pc, r1
   12b10:	bl	11250 <fprintf@plt>
   12b14:	bl	11298 <abort@plt>
   12b18:	mov	r0, #1
   12b1c:	bl	1335c <mmk_matcher_init@@Base>
   12b20:	bl	111d8 <fn_vv@plt>
   12b24:	bl	133b4 <mmk_matcher_term@@Base>
   12b28:	sub	r1, fp, #208	; 0xd0
   12b2c:	mov	r2, #0
   12b30:	mov	r3, #0
   12b34:	strd	r2, [r1]
   12b38:	strd	r2, [r1, #8]
   12b3c:	strd	r2, [r1, #16]
   12b40:	mov	r3, #1
   12b44:	str	r3, [fp, #-208]	; 0xffffff30
   12b48:	mov	r3, #2
   12b4c:	str	r3, [fp, #-192]	; 0xffffff40
   12b50:	sub	r3, fp, #208	; 0xd0
   12b54:	mov	r0, r3
   12b58:	bl	1459c <mmk_verify_times@@Base>
   12b5c:	mov	r3, r0
   12b60:	cmp	r3, #0
   12b64:	beq	12b9c <main@@Base+0x678>
   12b68:	ldr	r3, [pc, #1272]	; 13068 <main@@Base+0xb44>
   12b6c:	ldr	r3, [r4, r3]
   12b70:	ldr	r0, [r3]
   12b74:	ldr	r3, [pc, #1400]	; 130f4 <main@@Base+0xbd0>
   12b78:	add	r3, pc, r3
   12b7c:	str	r3, [sp]
   12b80:	mov	r3, #56	; 0x38
   12b84:	ldr	r2, [pc, #1388]	; 130f8 <main@@Base+0xbd4>
   12b88:	add	r2, pc, r2
   12b8c:	ldr	r1, [pc, #1384]	; 130fc <main@@Base+0xbd8>
   12b90:	add	r1, pc, r1
   12b94:	bl	11250 <fprintf@plt>
   12b98:	bl	11298 <abort@plt>
   12b9c:	mov	r0, #1
   12ba0:	bl	1335c <mmk_matcher_init@@Base>
   12ba4:	bl	111d8 <fn_vv@plt>
   12ba8:	bl	133b4 <mmk_matcher_term@@Base>
   12bac:	sub	r1, fp, #184	; 0xb8
   12bb0:	mov	r2, #0
   12bb4:	mov	r3, #0
   12bb8:	strd	r2, [r1]
   12bbc:	strd	r2, [r1, #8]
   12bc0:	strd	r2, [r1, #16]
   12bc4:	mov	r3, #1
   12bc8:	str	r3, [fp, #-184]	; 0xffffff48
   12bcc:	mov	r3, #2
   12bd0:	str	r3, [fp, #-176]	; 0xffffff50
   12bd4:	sub	r3, fp, #184	; 0xb8
   12bd8:	mov	r0, r3
   12bdc:	bl	1459c <mmk_verify_times@@Base>
   12be0:	mov	r3, r0
   12be4:	cmp	r3, #0
   12be8:	beq	12c20 <main@@Base+0x6fc>
   12bec:	ldr	r3, [pc, #1140]	; 13068 <main@@Base+0xb44>
   12bf0:	ldr	r3, [r4, r3]
   12bf4:	ldr	r0, [r3]
   12bf8:	ldr	r3, [pc, #1280]	; 13100 <main@@Base+0xbdc>
   12bfc:	add	r3, pc, r3
   12c00:	str	r3, [sp]
   12c04:	mov	r3, #57	; 0x39
   12c08:	ldr	r2, [pc, #1268]	; 13104 <main@@Base+0xbe0>
   12c0c:	add	r2, pc, r2
   12c10:	ldr	r1, [pc, #1264]	; 13108 <main@@Base+0xbe4>
   12c14:	add	r1, pc, r1
   12c18:	bl	11250 <fprintf@plt>
   12c1c:	bl	11298 <abort@plt>
   12c20:	ldr	r3, [pc, #1252]	; 1310c <main@@Base+0xbe8>
   12c24:	ldr	r3, [r4, r3]
   12c28:	mov	r0, r3
   12c2c:	bl	13304 <mmk_reset@@Base>
   12c30:	movw	r3, #65278	; 0xfefe
   12c34:	movt	r3, #65278	; 0xfefe
   12c38:	str	r3, [fp, #-16]
   12c3c:	ldr	r3, [pc, #1228]	; 13110 <main@@Base+0xbec>
   12c40:	add	r3, pc, r3
   12c44:	mov	r0, r3
   12c48:	bl	118a4 <_start@@Base+0x600>
   12c4c:	mov	r0, #0
   12c50:	bl	1335c <mmk_matcher_init@@Base>
   12c54:	sub	r1, fp, #160	; 0xa0
   12c58:	mov	r2, #0
   12c5c:	mov	r3, #0
   12c60:	strd	r2, [r1]
   12c64:	strd	r2, [r1, #8]
   12c68:	mov	r3, r2
   12c6c:	str	r3, [r1, #16]
   12c70:	ldr	r3, [fp, #-16]
   12c74:	str	r3, [fp, #-156]	; 0xffffff64
   12c78:	mov	r3, #1
   12c7c:	str	r3, [fp, #-140]	; 0xffffff74
   12c80:	sub	r3, fp, #140	; 0x8c
   12c84:	str	r3, [fp, #-152]	; 0xffffff68
   12c88:	sub	r3, fp, #160	; 0xa0
   12c8c:	mov	r0, r3
   12c90:	bl	14df4 <mmk_when_init@@Base>
   12c94:	mov	r0, #1
   12c98:	bl	111f0 <fn_ii@plt>
   12c9c:	bl	133b4 <mmk_matcher_term@@Base>
   12ca0:	mov	r0, #1
   12ca4:	bl	111f0 <fn_ii@plt>
   12ca8:	mov	r3, r0
   12cac:	cmp	r3, #1
   12cb0:	bne	12ccc <main@@Base+0x7a8>
   12cb4:	bl	1125c <__errno_location@plt>
   12cb8:	mov	r3, r0
   12cbc:	ldr	r3, [r3]
   12cc0:	ldr	r2, [fp, #-16]
   12cc4:	cmp	r2, r3
   12cc8:	beq	12d00 <main@@Base+0x7dc>
   12ccc:	ldr	r3, [pc, #916]	; 13068 <main@@Base+0xb44>
   12cd0:	ldr	r3, [r4, r3]
   12cd4:	ldr	r0, [r3]
   12cd8:	ldr	r3, [pc, #1076]	; 13114 <main@@Base+0xbf0>
   12cdc:	add	r3, pc, r3
   12ce0:	str	r3, [sp]
   12ce4:	mov	r3, #64	; 0x40
   12ce8:	ldr	r2, [pc, #1064]	; 13118 <main@@Base+0xbf4>
   12cec:	add	r2, pc, r2
   12cf0:	ldr	r1, [pc, #1060]	; 1311c <main@@Base+0xbf8>
   12cf4:	add	r1, pc, r1
   12cf8:	bl	11250 <fprintf@plt>
   12cfc:	bl	11298 <abort@plt>
   12d00:	mov	r0, #42	; 0x2a
   12d04:	bl	111f0 <fn_ii@plt>
   12d08:	mov	r3, r0
   12d0c:	cmp	r3, #0
   12d10:	beq	12d48 <main@@Base+0x824>
   12d14:	ldr	r3, [pc, #844]	; 13068 <main@@Base+0xb44>
   12d18:	ldr	r3, [r4, r3]
   12d1c:	ldr	r0, [r3]
   12d20:	ldr	r3, [pc, #1016]	; 13120 <main@@Base+0xbfc>
   12d24:	add	r3, pc, r3
   12d28:	str	r3, [sp]
   12d2c:	mov	r3, #65	; 0x41
   12d30:	ldr	r2, [pc, #1004]	; 13124 <main@@Base+0xc00>
   12d34:	add	r2, pc, r2
   12d38:	ldr	r1, [pc, #1000]	; 13128 <main@@Base+0xc04>
   12d3c:	add	r1, pc, r1
   12d40:	bl	11250 <fprintf@plt>
   12d44:	bl	11298 <abort@plt>
   12d48:	mov	r0, #1
   12d4c:	bl	1335c <mmk_matcher_init@@Base>
   12d50:	mov	r1, #0
   12d54:	mov	r0, #0
   12d58:	bl	13418 <mmk_matcher_add@@Base>
   12d5c:	mov	r0, #0
   12d60:	bl	111f0 <fn_ii@plt>
   12d64:	bl	133b4 <mmk_matcher_term@@Base>
   12d68:	sub	r1, fp, #136	; 0x88
   12d6c:	mov	r2, #0
   12d70:	mov	r3, #0
   12d74:	strd	r2, [r1]
   12d78:	strd	r2, [r1, #8]
   12d7c:	strd	r2, [r1, #16]
   12d80:	mov	r3, #1
   12d84:	str	r3, [fp, #-136]	; 0xffffff78
   12d88:	mov	r3, #2
   12d8c:	str	r3, [fp, #-120]	; 0xffffff88
   12d90:	sub	r3, fp, #136	; 0x88
   12d94:	mov	r0, r3
   12d98:	bl	1459c <mmk_verify_times@@Base>
   12d9c:	mov	r3, r0
   12da0:	cmp	r3, #0
   12da4:	bne	12ddc <main@@Base+0x8b8>
   12da8:	ldr	r3, [pc, #696]	; 13068 <main@@Base+0xb44>
   12dac:	ldr	r3, [r4, r3]
   12db0:	ldr	r0, [r3]
   12db4:	ldr	r3, [pc, #880]	; 1312c <main@@Base+0xc08>
   12db8:	add	r3, pc, r3
   12dbc:	str	r3, [sp]
   12dc0:	mov	r3, #67	; 0x43
   12dc4:	ldr	r2, [pc, #868]	; 13130 <main@@Base+0xc0c>
   12dc8:	add	r2, pc, r2
   12dcc:	ldr	r1, [pc, #864]	; 13134 <main@@Base+0xc10>
   12dd0:	add	r1, pc, r1
   12dd4:	bl	11250 <fprintf@plt>
   12dd8:	bl	11298 <abort@plt>
   12ddc:	mov	r0, #1
   12de0:	bl	1335c <mmk_matcher_init@@Base>
   12de4:	mov	r0, #1
   12de8:	bl	111f0 <fn_ii@plt>
   12dec:	bl	133b4 <mmk_matcher_term@@Base>
   12df0:	sub	r1, fp, #112	; 0x70
   12df4:	mov	r2, #0
   12df8:	mov	r3, #0
   12dfc:	strd	r2, [r1]
   12e00:	strd	r2, [r1, #8]
   12e04:	strd	r2, [r1, #16]
   12e08:	mov	r3, #1
   12e0c:	str	r3, [fp, #-112]	; 0xffffff90
   12e10:	mov	r3, #1
   12e14:	str	r3, [fp, #-96]	; 0xffffffa0
   12e18:	sub	r3, fp, #112	; 0x70
   12e1c:	mov	r0, r3
   12e20:	bl	1459c <mmk_verify_times@@Base>
   12e24:	mov	r3, r0
   12e28:	cmp	r3, #0
   12e2c:	bne	12e64 <main@@Base+0x940>
   12e30:	ldr	r3, [pc, #560]	; 13068 <main@@Base+0xb44>
   12e34:	ldr	r3, [r4, r3]
   12e38:	ldr	r0, [r3]
   12e3c:	ldr	r3, [pc, #756]	; 13138 <main@@Base+0xc14>
   12e40:	add	r3, pc, r3
   12e44:	str	r3, [sp]
   12e48:	mov	r3, #68	; 0x44
   12e4c:	ldr	r2, [pc, #744]	; 1313c <main@@Base+0xc18>
   12e50:	add	r2, pc, r2
   12e54:	ldr	r1, [pc, #740]	; 13140 <main@@Base+0xc1c>
   12e58:	add	r1, pc, r1
   12e5c:	bl	11250 <fprintf@plt>
   12e60:	bl	11298 <abort@plt>
   12e64:	mov	r0, #1
   12e68:	bl	1335c <mmk_matcher_init@@Base>
   12e6c:	mov	r0, #42	; 0x2a
   12e70:	bl	111f0 <fn_ii@plt>
   12e74:	bl	133b4 <mmk_matcher_term@@Base>
   12e78:	sub	r1, fp, #88	; 0x58
   12e7c:	mov	r2, #0
   12e80:	mov	r3, #0
   12e84:	strd	r2, [r1]
   12e88:	strd	r2, [r1, #8]
   12e8c:	strd	r2, [r1, #16]
   12e90:	mov	r3, #1
   12e94:	str	r3, [fp, #-88]	; 0xffffffa8
   12e98:	mov	r3, #1
   12e9c:	str	r3, [fp, #-72]	; 0xffffffb8
   12ea0:	sub	r3, fp, #88	; 0x58
   12ea4:	mov	r0, r3
   12ea8:	bl	1459c <mmk_verify_times@@Base>
   12eac:	mov	r3, r0
   12eb0:	cmp	r3, #0
   12eb4:	bne	12eec <main@@Base+0x9c8>
   12eb8:	ldr	r3, [pc, #424]	; 13068 <main@@Base+0xb44>
   12ebc:	ldr	r3, [r4, r3]
   12ec0:	ldr	r0, [r3]
   12ec4:	ldr	r3, [pc, #632]	; 13144 <main@@Base+0xc20>
   12ec8:	add	r3, pc, r3
   12ecc:	str	r3, [sp]
   12ed0:	mov	r3, #69	; 0x45
   12ed4:	ldr	r2, [pc, #620]	; 13148 <main@@Base+0xc24>
   12ed8:	add	r2, pc, r2
   12edc:	ldr	r1, [pc, #616]	; 1314c <main@@Base+0xc28>
   12ee0:	add	r1, pc, r1
   12ee4:	bl	11250 <fprintf@plt>
   12ee8:	bl	11298 <abort@plt>
   12eec:	mov	r0, #1
   12ef0:	bl	1335c <mmk_matcher_init@@Base>
   12ef4:	mov	r0, #12
   12ef8:	bl	111f0 <fn_ii@plt>
   12efc:	bl	133b4 <mmk_matcher_term@@Base>
   12f00:	sub	r1, fp, #64	; 0x40
   12f04:	mov	r2, #0
   12f08:	mov	r3, #0
   12f0c:	strd	r2, [r1]
   12f10:	strd	r2, [r1, #8]
   12f14:	strd	r2, [r1, #16]
   12f18:	mov	r3, #1
   12f1c:	str	r3, [fp, #-64]	; 0xffffffc0
   12f20:	mov	r3, #1
   12f24:	str	r3, [fp, #-60]	; 0xffffffc4
   12f28:	sub	r3, fp, #64	; 0x40
   12f2c:	mov	r0, r3
   12f30:	bl	1459c <mmk_verify_times@@Base>
   12f34:	mov	r3, r0
   12f38:	cmp	r3, #0
   12f3c:	bne	12f74 <main@@Base+0xa50>
   12f40:	ldr	r3, [pc, #288]	; 13068 <main@@Base+0xb44>
   12f44:	ldr	r3, [r4, r3]
   12f48:	ldr	r0, [r3]
   12f4c:	ldr	r3, [pc, #508]	; 13150 <main@@Base+0xc2c>
   12f50:	add	r3, pc, r3
   12f54:	str	r3, [sp]
   12f58:	mov	r3, #70	; 0x46
   12f5c:	ldr	r2, [pc, #496]	; 13154 <main@@Base+0xc30>
   12f60:	add	r2, pc, r2
   12f64:	ldr	r1, [pc, #492]	; 13158 <main@@Base+0xc34>
   12f68:	add	r1, pc, r1
   12f6c:	bl	11250 <fprintf@plt>
   12f70:	bl	11298 <abort@plt>
   12f74:	ldr	r3, [pc, #480]	; 1315c <main@@Base+0xc38>
   12f78:	ldr	r3, [r4, r3]
   12f7c:	mov	r0, r3
   12f80:	bl	13304 <mmk_reset@@Base>
   12f84:	ldr	r3, [pc, #468]	; 13160 <main@@Base+0xc3c>
   12f88:	add	r3, pc, r3
   12f8c:	mov	r0, r3
   12f90:	bl	124b4 <_start@@Base+0x1210>
   12f94:	mov	r0, #0
   12f98:	bl	1335c <mmk_matcher_init@@Base>
   12f9c:	sub	r1, fp, #40	; 0x28
   12fa0:	mov	r2, #0
   12fa4:	mov	r3, #0
   12fa8:	strd	r2, [r1]
   12fac:	strd	r2, [r1, #8]
   12fb0:	mov	r3, r2
   12fb4:	str	r3, [r1, #16]
   12fb8:	mov	r3, #1
   12fbc:	str	r3, [fp, #-20]	; 0xffffffec
   12fc0:	sub	r3, fp, #20
   12fc4:	str	r3, [fp, #-32]	; 0xffffffe0
   12fc8:	sub	r3, fp, #40	; 0x28
   12fcc:	mov	r0, r3
   12fd0:	bl	14df4 <mmk_when_init@@Base>
   12fd4:	mov	r1, #42	; 0x2a
   12fd8:	mov	r0, #1
   12fdc:	bl	111fc <fn_ii_va@plt>
   12fe0:	bl	133b4 <mmk_matcher_term@@Base>
   12fe4:	mov	r1, #42	; 0x2a
   12fe8:	mov	r0, #1
   12fec:	bl	111fc <fn_ii_va@plt>
   12ff0:	mov	r3, r0
   12ff4:	cmp	r3, #1
   12ff8:	beq	13030 <main@@Base+0xb0c>
   12ffc:	ldr	r3, [pc, #100]	; 13068 <main@@Base+0xb44>
   13000:	ldr	r3, [r4, r3]
   13004:	ldr	r0, [r3]
   13008:	ldr	r3, [pc, #340]	; 13164 <main@@Base+0xc40>
   1300c:	add	r3, pc, r3
   13010:	str	r3, [sp]
   13014:	mov	r3, #77	; 0x4d
   13018:	ldr	r2, [pc, #328]	; 13168 <main@@Base+0xc44>
   1301c:	add	r2, pc, r2
   13020:	ldr	r1, [pc, #324]	; 1316c <main@@Base+0xc48>
   13024:	add	r1, pc, r1
   13028:	bl	11250 <fprintf@plt>
   1302c:	bl	11298 <abort@plt>
   13030:	ldr	r3, [pc, #312]	; 13170 <main@@Base+0xc4c>
   13034:	ldr	r3, [r4, r3]
   13038:	mov	r0, r3
   1303c:	bl	13304 <mmk_reset@@Base>
   13040:	mov	r3, #0
   13044:	mov	r0, r3
   13048:	sub	sp, fp, #8
   1304c:	ldr	r4, [sp]
   13050:	ldr	fp, [sp, #4]
   13054:	add	sp, sp, #8
   13058:	pop	{pc}		; (ldr pc, [sp], #4)
   1305c:			; <UNDEFINED> instruction: 0x00013abc
   13060:	andeq	r2, r0, ip, ror #20
   13064:	andeq	r0, r0, r4, ror r0
   13068:	andeq	r0, r0, ip, ror r0
   1306c:	andeq	r2, r0, r4, lsr sl
   13070:			; <UNDEFINED> instruction: 0x000029b4
   13074:	strdeq	r2, [r0], -ip
   13078:	ldrdeq	r2, [r0], -r0
   1307c:	andeq	r2, r0, r0, lsr r9
   13080:	andeq	r2, r0, r8, ror r9
   13084:	andeq	r2, r0, r0, ror r9
   13088:	andeq	r2, r0, ip, lsr #17
   1308c:	strdeq	r2, [r0], -r4
   13090:	andeq	r2, r0, r0, lsl r9
   13094:	andeq	r2, r0, r8, lsr #16
   13098:	andeq	r2, r0, r0, ror r8
   1309c:	andeq	r2, r0, r8, lsr #17
   130a0:	muleq	r0, ip, r7
   130a4:	andeq	r2, r0, r4, ror #15
   130a8:	andeq	r3, r1, r8, ror r8
   130ac:	muleq	r0, r0, r8
   130b0:	andeq	r2, r0, r0, asr r7
   130b4:	muleq	r0, r8, r7
   130b8:	andeq	r2, r0, r4, lsl r8
   130bc:	andeq	r2, r0, ip, asr #13
   130c0:	andeq	r2, r0, r4, lsl r7
   130c4:			; <UNDEFINED> instruction: 0x000027b0
   130c8:	andeq	r2, r0, r8, asr #12
   130cc:	muleq	r0, r0, r6
   130d0:	andeq	r2, r0, r4, ror #12
   130d4:	andeq	r2, r0, r4, asr #11
   130d8:	andeq	r2, r0, ip, lsl #12
   130dc:	andeq	r2, r0, r4, asr #13
   130e0:	andeq	r2, r0, r8, lsr r5
   130e4:	andeq	r2, r0, r0, lsl #11
   130e8:	andeq	r2, r0, r4, ror r6
   130ec:			; <UNDEFINED> instruction: 0x000024b4
   130f0:	strdeq	r2, [r0], -ip
   130f4:	andeq	r2, r0, r4, lsl r6
   130f8:	andeq	r2, r0, r0, lsr r4
   130fc:	andeq	r2, r0, r8, ror r4
   13100:			; <UNDEFINED> instruction: 0x000025b4
   13104:	andeq	r2, r0, ip, lsr #7
   13108:	strdeq	r2, [r0], -r4
   1310c:	andeq	r0, r0, ip, rrx
   13110:	muleq	r0, r4, r5
   13114:	andeq	r2, r0, r0, lsl #10
   13118:	andeq	r2, r0, ip, asr #5
   1311c:	andeq	r2, r0, r4, lsl r3
   13120:	ldrdeq	r2, [r0], -r8
   13124:	andeq	r2, r0, r4, lsl #5
   13128:	andeq	r2, r0, ip, asr #5
   1312c:	andeq	r2, r0, r4, asr r4
   13130:	strdeq	r2, [r0], -r0
   13134:	andeq	r2, r0, r8, lsr r2
   13138:	strdeq	r2, [r0], -r8
   1313c:	andeq	r2, r0, r8, ror #2
   13140:			; <UNDEFINED> instruction: 0x000021b0
   13144:	muleq	r0, r4, r3
   13148:	andeq	r2, r0, r0, ror #1
   1314c:	andeq	r2, r0, r8, lsr #2
   13150:	andeq	r2, r0, r0, lsr r3
   13154:	andeq	r2, r0, r8, asr r0
   13158:	andeq	r2, r0, r0, lsr #1
   1315c:	andeq	r0, r0, r8, ror r0
   13160:	andeq	r2, r0, ip, lsl r3
   13164:	andeq	r2, r0, r4, lsr #5
   13168:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1316c:	andeq	r1, r0, r4, ror #31
   13170:	andeq	r0, r0, r0, lsl #1

00013174 <mmk_init@@Base>:
   13174:	str	r4, [sp, #-12]!
   13178:	str	fp, [sp, #4]
   1317c:	str	lr, [sp, #8]
   13180:	add	fp, sp, #8
   13184:	sub	sp, sp, #12
   13188:	ldr	r4, [pc, #176]	; 13240 <mmk_init@@Base+0xcc>
   1318c:	add	r4, pc, r4
   13190:	ldr	r3, [pc, #172]	; 13244 <mmk_init@@Base+0xd0>
   13194:	add	r3, pc, r3
   13198:	ldr	r3, [r3]
   1319c:	cmp	r3, #0
   131a0:	bne	13228 <mmk_init@@Base+0xb4>
   131a4:	bl	13ad4 <plt_init_ctx@@Base>
   131a8:	mov	r2, r0
   131ac:	ldr	r3, [pc, #148]	; 13248 <mmk_init@@Base+0xd4>
   131b0:	add	r3, pc, r3
   131b4:	str	r2, [r3, #4]
   131b8:	ldr	r3, [pc, #140]	; 1324c <mmk_init@@Base+0xd8>
   131bc:	add	r3, pc, r3
   131c0:	ldr	r3, [r3, #4]
   131c4:	cmn	r3, #1
   131c8:	bne	13200 <mmk_init@@Base+0x8c>
   131cc:	ldr	r3, [pc, #124]	; 13250 <mmk_init@@Base+0xdc>
   131d0:	ldr	r3, [r4, r3]
   131d4:	ldr	r0, [r3]
   131d8:	ldr	r3, [pc, #116]	; 13254 <mmk_init@@Base+0xe0>
   131dc:	add	r3, pc, r3
   131e0:	str	r3, [sp]
   131e4:	mov	r3, #45	; 0x2d
   131e8:	ldr	r2, [pc, #104]	; 13258 <mmk_init@@Base+0xe4>
   131ec:	add	r2, pc, r2
   131f0:	ldr	r1, [pc, #100]	; 1325c <mmk_init@@Base+0xe8>
   131f4:	add	r1, pc, r1
   131f8:	bl	11250 <fprintf@plt>
   131fc:	bl	11298 <abort@plt>
   13200:	ldr	r3, [pc, #88]	; 13260 <mmk_init@@Base+0xec>
   13204:	add	r3, pc, r3
   13208:	ldr	r3, [r3, #4]
   1320c:	mov	r0, r3
   13210:	bl	14c6c <mmk_init_vital_functions@@Base>
   13214:	ldr	r3, [pc, #72]	; 13264 <mmk_init@@Base+0xf0>
   13218:	add	r3, pc, r3
   1321c:	mov	r2, #1
   13220:	str	r2, [r3]
   13224:	b	1322c <mmk_init@@Base+0xb8>
   13228:	nop	{0}
   1322c:	sub	sp, fp, #8
   13230:	ldr	r4, [sp]
   13234:	ldr	fp, [sp, #4]
   13238:	add	sp, sp, #8
   1323c:	pop	{pc}		; (ldr pc, [sp], #4)
   13240:	andeq	r2, r1, ip, ror #28
   13244:	andeq	r2, r1, r8, lsr #30
   13248:	andeq	r2, r1, ip, lsl #30
   1324c:	andeq	r2, r1, r0, lsl #30
   13250:	andeq	r0, r0, ip, ror r0
   13254:	andeq	r2, r0, ip, asr r1
   13258:	ldrdeq	r2, [r0], -ip
   1325c:	andeq	r2, r0, r4, lsr #2
   13260:			; <UNDEFINED> instruction: 0x00012eb8
   13264:	andeq	r2, r1, r4, lsr #29

00013268 <mmk_plt_ctx@@Base>:
   13268:	str	fp, [sp, #-8]!
   1326c:	str	lr, [sp, #4]
   13270:	add	fp, sp, #4
   13274:	sub	sp, sp, #8
   13278:	ldr	r2, [pc, #104]	; 132e8 <mmk_plt_ctx@@Base+0x80>
   1327c:	add	r2, pc, r2
   13280:	ldr	r3, [pc, #100]	; 132ec <mmk_plt_ctx@@Base+0x84>
   13284:	add	r3, pc, r3
   13288:	ldr	r3, [r3]
   1328c:	cmp	r3, #0
   13290:	bne	132c8 <mmk_plt_ctx@@Base+0x60>
   13294:	ldr	r3, [pc, #84]	; 132f0 <mmk_plt_ctx@@Base+0x88>
   13298:	ldr	r3, [r2, r3]
   1329c:	ldr	r0, [r3]
   132a0:	ldr	r3, [pc, #76]	; 132f4 <mmk_plt_ctx@@Base+0x8c>
   132a4:	add	r3, pc, r3
   132a8:	str	r3, [sp]
   132ac:	mov	r3, #54	; 0x36
   132b0:	ldr	r2, [pc, #64]	; 132f8 <mmk_plt_ctx@@Base+0x90>
   132b4:	add	r2, pc, r2
   132b8:	ldr	r1, [pc, #60]	; 132fc <mmk_plt_ctx@@Base+0x94>
   132bc:	add	r1, pc, r1
   132c0:	bl	11250 <fprintf@plt>
   132c4:	bl	11298 <abort@plt>
   132c8:	ldr	r3, [pc, #48]	; 13300 <mmk_plt_ctx@@Base+0x98>
   132cc:	add	r3, pc, r3
   132d0:	ldr	r3, [r3, #4]
   132d4:	mov	r0, r3
   132d8:	sub	sp, fp, #4
   132dc:	ldr	fp, [sp]
   132e0:	add	sp, sp, #4
   132e4:	pop	{pc}		; (ldr pc, [sp], #4)
   132e8:	andeq	r2, r1, ip, ror sp
   132ec:	andeq	r2, r1, r8, lsr lr
   132f0:	andeq	r0, r0, ip, ror r0
   132f4:	andeq	r2, r0, ip, lsr #1
   132f8:	andeq	r2, r0, r4, lsl r0
   132fc:	andeq	r2, r0, ip, asr r0
   13300:	strdeq	r2, [r1], -r0

00013304 <mmk_reset@@Base>:
   13304:	str	fp, [sp, #-8]!
   13308:	str	lr, [sp, #4]
   1330c:	add	fp, sp, #4
   13310:	sub	sp, sp, #16
   13314:	str	r0, [fp, #-16]
   13318:	ldr	r3, [fp, #-16]
   1331c:	cmp	r3, #0
   13320:	beq	13348 <mmk_reset@@Base+0x44>
   13324:	ldr	r0, [fp, #-16]
   13328:	bl	14298 <mmk_ask_ctx@@Base>
   1332c:	str	r0, [fp, #-8]
   13330:	ldr	r0, [fp, #-8]
   13334:	bl	13edc <mmk_stub_context@@Base>
   13338:	str	r0, [fp, #-12]
   1333c:	ldr	r0, [fp, #-12]
   13340:	bl	136c0 <mmk_mock_destroy_internal@@Base>
   13344:	b	1334c <mmk_reset@@Base+0x48>
   13348:	nop	{0}
   1334c:	sub	sp, fp, #4
   13350:	ldr	fp, [sp]
   13354:	add	sp, sp, #4
   13358:	pop	{pc}		; (ldr pc, [sp], #4)

0001335c <mmk_matcher_init@@Base>:
   1335c:	strd	r4, [sp, #-16]!
   13360:	mov	r5, r0
   13364:	mov	r0, #12
   13368:	str	r6, [sp, #8]
   1336c:	str	lr, [sp, #12]
   13370:	bl	14c0c <mmk_malloc@@Base>
   13374:	mov	r4, r0
   13378:	ldr	r0, [pc, #44]	; 133ac <mmk_matcher_init@@Base+0x50>
   1337c:	mov	r3, #0
   13380:	str	r5, [r4]
   13384:	str	r3, [r4, #4]
   13388:	str	r3, [r4, #8]
   1338c:	add	r0, pc, r0
   13390:	bl	11280 <__tls_get_addr@plt>
   13394:	ldr	r3, [pc, #20]	; 133b0 <mmk_matcher_init@@Base+0x54>
   13398:	ldr	r6, [sp, #8]
   1339c:	str	r4, [r3, r0]
   133a0:	ldrd	r4, [sp]
   133a4:	add	sp, sp, #12
   133a8:	pop	{pc}		; (ldr pc, [sp], #4)
   133ac:	ldrdeq	r2, [r1], -r0
   133b0:	andeq	r0, r0, r0

000133b4 <mmk_matcher_term@@Base>:
   133b4:	ldr	r0, [pc, #36]	; 133e0 <mmk_matcher_term@@Base+0x2c>
   133b8:	str	r4, [sp, #-8]!
   133bc:	str	lr, [sp, #4]
   133c0:	add	r0, pc, r0
   133c4:	bl	11280 <__tls_get_addr@plt>
   133c8:	ldr	r3, [pc, #20]	; 133e4 <mmk_matcher_term@@Base+0x30>
   133cc:	mov	r2, #0
   133d0:	ldr	r4, [sp]
   133d4:	add	sp, sp, #4
   133d8:	str	r2, [r0, r3]
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	muleq	r1, ip, ip
   133e4:	andeq	r0, r0, r0

000133e8 <mmk_matcher_ctx@@Base>:
   133e8:	ldr	r0, [pc, #32]	; 13410 <mmk_matcher_ctx@@Base+0x28>
   133ec:	str	r4, [sp, #-8]!
   133f0:	str	lr, [sp, #4]
   133f4:	add	r0, pc, r0
   133f8:	bl	11280 <__tls_get_addr@plt>
   133fc:	ldr	r3, [pc, #16]	; 13414 <mmk_matcher_ctx@@Base+0x2c>
   13400:	ldr	r4, [sp]
   13404:	add	sp, sp, #4
   13408:	ldr	r0, [r3, r0]
   1340c:	pop	{pc}		; (ldr pc, [sp], #4)
   13410:	andeq	r2, r1, r8, ror #24
   13414:	andeq	r0, r0, r0

00013418 <mmk_matcher_add@@Base>:
   13418:	strd	r4, [sp, #-16]!
   1341c:	mov	r5, r1
   13420:	str	r6, [sp, #8]
   13424:	mov	r6, r0
   13428:	mov	r0, #12
   1342c:	str	lr, [sp, #12]
   13430:	bl	14c0c <mmk_malloc@@Base>
   13434:	mov	r4, r0
   13438:	ldr	r0, [pc, #96]	; 134a0 <mmk_matcher_add@@Base+0x88>
   1343c:	add	r0, pc, r0
   13440:	bl	11280 <__tls_get_addr@plt>
   13444:	ldr	r3, [pc, #88]	; 134a4 <mmk_matcher_add@@Base+0x8c>
   13448:	mov	r2, #0
   1344c:	str	r6, [r4]
   13450:	str	r5, [r4, #4]
   13454:	str	r2, [r4, #8]
   13458:	ldr	r2, [r3, r0]
   1345c:	ldr	r3, [r2, #8]
   13460:	cmp	r3, #0
   13464:	beq	13474 <mmk_matcher_add@@Base+0x5c>
   13468:	ldr	r1, [r3, #4]
   1346c:	cmp	r5, r1
   13470:	bhi	1348c <mmk_matcher_add@@Base+0x74>
   13474:	ldr	r6, [sp, #8]
   13478:	str	r3, [r4, #8]
   1347c:	str	r4, [r2, #8]
   13480:	ldrd	r4, [sp]
   13484:	add	sp, sp, #12
   13488:	pop	{pc}		; (ldr pc, [sp], #4)
   1348c:	mov	r2, r3
   13490:	ldr	r3, [r3, #8]
   13494:	cmp	r3, #0
   13498:	bne	13468 <mmk_matcher_add@@Base+0x50>
   1349c:	b	13474 <mmk_matcher_add@@Base+0x5c>
   134a0:	andeq	r2, r1, r0, lsr #24
   134a4:	andeq	r0, r0, r0

000134a8 <mmk_matcher_get_predicate@@Base>:
   134a8:	add	r0, r0, #12
   134ac:	bx	lr

000134b0 <mmk_mock_create_internal@@Base>:
   134b0:	str	r4, [sp, #-12]!
   134b4:	str	fp, [sp, #4]
   134b8:	str	lr, [sp, #8]
   134bc:	add	fp, sp, #8
   134c0:	sub	sp, sp, #44	; 0x2c
   134c4:	str	r0, [fp, #-40]	; 0xffffffd8
   134c8:	str	r1, [fp, #-44]	; 0xffffffd4
   134cc:	ldr	r4, [pc, #464]	; 136a4 <mmk_mock_create_internal@@Base+0x1f4>
   134d0:	add	r4, pc, r4
   134d4:	bl	13174 <mmk_init@@Base>
   134d8:	mov	r0, #20
   134dc:	bl	14c0c <mmk_malloc@@Base>
   134e0:	str	r0, [fp, #-20]	; 0xffffffec
   134e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e8:	cmp	r3, #0
   134ec:	bne	13524 <mmk_mock_create_internal@@Base+0x74>
   134f0:	ldr	r3, [pc, #432]	; 136a8 <mmk_mock_create_internal@@Base+0x1f8>
   134f4:	ldr	r3, [r4, r3]
   134f8:	ldr	r0, [r3]
   134fc:	ldr	r3, [pc, #424]	; 136ac <mmk_mock_create_internal@@Base+0x1fc>
   13500:	add	r3, pc, r3
   13504:	str	r3, [sp]
   13508:	mov	r3, #36	; 0x24
   1350c:	ldr	r2, [pc, #412]	; 136b0 <mmk_mock_create_internal@@Base+0x200>
   13510:	add	r2, pc, r2
   13514:	ldr	r1, [pc, #408]	; 136b4 <mmk_mock_create_internal@@Base+0x204>
   13518:	add	r1, pc, r1
   1351c:	bl	11250 <fprintf@plt>
   13520:	bl	11298 <abort@plt>
   13524:	ldr	r3, [fp, #-20]	; 0xffffffec
   13528:	mov	r1, r3
   1352c:	mov	r2, #0
   13530:	mov	r3, #0
   13534:	strd	r2, [r1]
   13538:	strd	r2, [r1, #8]
   1353c:	mov	r3, r2
   13540:	str	r3, [r1, #16]
   13544:	mov	r1, #64	; 0x40
   13548:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1354c:	bl	14b10 <mmk_strchr@@Base>
   13550:	str	r0, [fp, #-24]	; 0xffffffe8
   13554:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13558:	cmp	r3, #0
   1355c:	bne	13570 <mmk_mock_create_internal@@Base+0xc0>
   13560:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13564:	bl	14bbc <mmk_strlen@@Base>
   13568:	str	r0, [fp, #-16]
   1356c:	b	13580 <mmk_mock_create_internal@@Base+0xd0>
   13570:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13574:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13578:	sub	r3, r2, r3
   1357c:	str	r3, [fp, #-16]
   13580:	ldr	r3, [fp, #-16]
   13584:	add	r3, r3, #1
   13588:	mov	r0, r3
   1358c:	bl	14c0c <mmk_malloc@@Base>
   13590:	str	r0, [fp, #-28]	; 0xffffffe4
   13594:	ldr	r2, [fp, #-16]
   13598:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1359c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   135a0:	bl	14b80 <mmk_strncpy@@Base>
   135a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   135a8:	ldr	r3, [fp, #-16]
   135ac:	add	r3, r2, r3
   135b0:	mov	r2, #0
   135b4:	strb	r2, [r3]
   135b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   135bc:	cmp	r3, #0
   135c0:	beq	135ec <mmk_mock_create_internal@@Base+0x13c>
   135c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   135c8:	add	r3, r3, #1
   135cc:	mov	r2, #4
   135d0:	ldr	r1, [pc, #224]	; 136b8 <mmk_mock_create_internal@@Base+0x208>
   135d4:	add	r1, pc, r1
   135d8:	mov	r0, r3
   135dc:	bl	14a5c <mmk_strneq@@Base>
   135e0:	mov	r3, r0
   135e4:	cmp	r3, #0
   135e8:	beq	135f4 <mmk_mock_create_internal@@Base+0x144>
   135ec:	mov	r3, #1
   135f0:	b	135f8 <mmk_mock_create_internal@@Base+0x148>
   135f4:	mov	r3, #0
   135f8:	str	r3, [fp, #-32]	; 0xffffffe0
   135fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13600:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13604:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13608:	bl	14164 <mmk_stub_create@@Base>
   1360c:	mov	r2, r0
   13610:	ldr	r3, [fp, #-20]	; 0xffffffec
   13614:	str	r2, [r3, #4]
   13618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1361c:	ldr	r3, [r3, #4]
   13620:	cmp	r3, #0
   13624:	bne	1364c <mmk_mock_create_internal@@Base+0x19c>
   13628:	ldr	r3, [pc, #120]	; 136a8 <mmk_mock_create_internal@@Base+0x1f8>
   1362c:	ldr	r3, [r4, r3]
   13630:	ldr	r3, [r3]
   13634:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13638:	ldr	r1, [pc, #124]	; 136bc <mmk_mock_create_internal@@Base+0x20c>
   1363c:	add	r1, pc, r1
   13640:	mov	r0, r3
   13644:	bl	11250 <fprintf@plt>
   13648:	bl	11298 <abort@plt>
   1364c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13650:	cmp	r3, #0
   13654:	bne	13678 <mmk_mock_create_internal@@Base+0x1c8>
   13658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1365c:	ldr	r4, [r3, #4]
   13660:	ldr	r2, [fp, #-20]	; 0xffffffec
   13664:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13668:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1366c:	bl	14164 <mmk_stub_create@@Base>
   13670:	mov	r3, r0
   13674:	str	r3, [r4, #36]	; 0x24
   13678:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1367c:	bl	14c4c <mmk_free@@Base>
   13680:	ldr	r3, [fp, #-20]	; 0xffffffec
   13684:	ldr	r3, [r3, #4]
   13688:	ldr	r3, [r3, #32]
   1368c:	mov	r0, r3
   13690:	sub	sp, fp, #8
   13694:	ldr	r4, [sp]
   13698:	ldr	fp, [sp, #4]
   1369c:	add	sp, sp, #8
   136a0:	pop	{pc}		; (ldr pc, [sp], #4)
   136a4:	andeq	r2, r1, r8, lsr #22
   136a8:	andeq	r0, r0, ip, ror r0
   136ac:	ldrdeq	r1, [r0], -r4
   136b0:	andeq	r1, r0, r4, asr lr
   136b4:	muleq	r0, ip, lr
   136b8:	andeq	r1, r0, r4, lsl #28
   136bc:	andeq	r1, r0, r4, lsr #27

000136c0 <mmk_mock_destroy_internal@@Base>:
   136c0:	str	fp, [sp, #-8]!
   136c4:	str	lr, [sp, #4]
   136c8:	add	fp, sp, #4
   136cc:	sub	sp, sp, #32
   136d0:	str	r0, [fp, #-32]	; 0xffffffe0
   136d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136d8:	ldr	r3, [r3, #4]
   136dc:	str	r3, [fp, #-8]
   136e0:	b	13700 <mmk_mock_destroy_internal@@Base+0x40>
   136e4:	ldr	r3, [fp, #-8]
   136e8:	ldr	r3, [r3, #36]	; 0x24
   136ec:	str	r3, [fp, #-20]	; 0xffffffec
   136f0:	ldr	r0, [fp, #-8]
   136f4:	bl	14260 <mmk_stub_destroy@@Base>
   136f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136fc:	str	r3, [fp, #-8]
   13700:	ldr	r3, [fp, #-8]
   13704:	cmp	r3, #0
   13708:	bne	136e4 <mmk_mock_destroy_internal@@Base+0x24>
   1370c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13710:	ldr	r3, [r3, #8]
   13714:	mov	r0, r3
   13718:	bl	14c4c <mmk_free@@Base>
   1371c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13720:	ldr	r3, [r3]
   13724:	str	r3, [fp, #-12]
   13728:	b	13780 <mmk_mock_destroy_internal@@Base+0xc0>
   1372c:	ldr	r3, [fp, #-12]
   13730:	ldr	r3, [r3, #4]
   13734:	str	r3, [fp, #-24]	; 0xffffffe8
   13738:	ldr	r3, [fp, #-12]
   1373c:	ldr	r3, [r3]
   13740:	str	r3, [fp, #-16]
   13744:	b	13764 <mmk_mock_destroy_internal@@Base+0xa4>
   13748:	ldr	r3, [fp, #-16]
   1374c:	ldr	r3, [r3, #8]
   13750:	str	r3, [fp, #-28]	; 0xffffffe4
   13754:	ldr	r0, [fp, #-16]
   13758:	bl	14c4c <mmk_free@@Base>
   1375c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13760:	str	r3, [fp, #-16]
   13764:	ldr	r3, [fp, #-16]
   13768:	cmp	r3, #0
   1376c:	bne	13748 <mmk_mock_destroy_internal@@Base+0x88>
   13770:	ldr	r0, [fp, #-12]
   13774:	bl	14c4c <mmk_free@@Base>
   13778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1377c:	str	r3, [fp, #-12]
   13780:	ldr	r3, [fp, #-12]
   13784:	cmp	r3, #0
   13788:	bne	1372c <mmk_mock_destroy_internal@@Base+0x6c>
   1378c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13790:	bl	14c4c <mmk_free@@Base>
   13794:	nop	{0}
   13798:	sub	sp, fp, #4
   1379c:	ldr	fp, [sp]
   137a0:	add	sp, sp, #4
   137a4:	pop	{pc}		; (ldr pc, [sp], #4)

000137a8 <mmk_mock_params_begin@@Base>:
   137a8:	push	{fp}		; (str fp, [sp, #-4]!)
   137ac:	add	fp, sp, #0
   137b0:	sub	sp, sp, #12
   137b4:	str	r0, [fp, #-8]
   137b8:	ldr	r3, [fp, #-8]
   137bc:	ldr	r3, [r3, #8]
   137c0:	cmp	r3, #0
   137c4:	beq	137d8 <mmk_mock_params_begin@@Base+0x30>
   137c8:	ldr	r3, [fp, #-8]
   137cc:	ldr	r3, [r3, #12]
   137d0:	cmp	r3, #0
   137d4:	bne	137e0 <mmk_mock_params_begin@@Base+0x38>
   137d8:	mov	r3, #0
   137dc:	b	137ec <mmk_mock_params_begin@@Base+0x44>
   137e0:	ldr	r3, [fp, #-8]
   137e4:	ldr	r3, [r3, #8]
   137e8:	add	r3, r3, #4
   137ec:	mov	r0, r3
   137f0:	add	sp, fp, #0
   137f4:	pop	{fp}		; (ldr fp, [sp], #4)
   137f8:	bx	lr

000137fc <mmk_mock_params_next@@Base>:
   137fc:	push	{fp}		; (str fp, [sp, #-4]!)
   13800:	add	fp, sp, #0
   13804:	sub	sp, sp, #20
   13808:	str	r0, [fp, #-16]
   1380c:	str	r1, [fp, #-20]	; 0xffffffec
   13810:	ldr	r3, [fp, #-20]	; 0xffffffec
   13814:	str	r3, [fp, #-8]
   13818:	ldr	r3, [fp, #-8]
   1381c:	ldr	r3, [r3, #-4]
   13820:	str	r3, [fp, #-12]
   13824:	ldr	r3, [fp, #-12]
   13828:	add	r3, r3, #4
   1382c:	ldr	r2, [fp, #-8]
   13830:	add	r3, r2, r3
   13834:	str	r3, [fp, #-8]
   13838:	ldr	r3, [fp, #-16]
   1383c:	ldr	r2, [r3, #8]
   13840:	ldr	r3, [fp, #-16]
   13844:	ldr	r3, [r3, #12]
   13848:	add	r3, r2, r3
   1384c:	ldr	r2, [fp, #-8]
   13850:	cmp	r2, r3
   13854:	bcc	13860 <mmk_mock_params_next@@Base+0x64>
   13858:	mov	r3, #0
   1385c:	b	13864 <mmk_mock_params_next@@Base+0x68>
   13860:	ldr	r3, [fp, #-8]
   13864:	mov	r0, r3
   13868:	add	sp, fp, #0
   1386c:	pop	{fp}		; (ldr fp, [sp], #4)
   13870:	bx	lr

00013874 <mmk_mock_get_params@@Base>:
   13874:	str	fp, [sp, #-8]!
   13878:	str	lr, [sp, #4]
   1387c:	add	fp, sp, #4
   13880:	sub	sp, sp, #8
   13884:	bl	14368 <mmk_ctx@@Base>
   13888:	mov	r3, r0
   1388c:	mov	r0, r3
   13890:	bl	13edc <mmk_stub_context@@Base>
   13894:	str	r0, [fp, #-8]
   13898:	ldr	r3, [fp, #-8]
   1389c:	ldr	r3, [r3]
   138a0:	mov	r0, r3
   138a4:	sub	sp, fp, #4
   138a8:	ldr	fp, [sp]
   138ac:	add	sp, sp, #4
   138b0:	pop	{pc}		; (ldr pc, [sp], #4)
   138b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138b8:	strd	r6, [sp, #8]
   138bc:	str	lr, [sp, #32]
   138c0:	strd	r8, [sp, #16]
   138c4:	ldr	lr, [r0, #8]
   138c8:	strd	sl, [sp, #24]
   138cc:	sub	sp, sp, #4
   138d0:	ldr	r7, [r0]
   138d4:	ldr	ip, [lr]
   138d8:	cmp	ip, #0
   138dc:	beq	13ac0 <mmk_mock_get_params@@Base+0x24c>
   138e0:	cmp	ip, #6
   138e4:	mov	r3, lr
   138e8:	bne	138f8 <mmk_mock_get_params@@Base+0x84>
   138ec:	b	13a90 <mmk_mock_get_params@@Base+0x21c>
   138f0:	cmp	r4, #6
   138f4:	beq	13a90 <mmk_mock_get_params@@Base+0x21c>
   138f8:	ldr	r4, [r3, #8]!
   138fc:	cmp	r4, #0
   13900:	bne	138f0 <mmk_mock_get_params@@Base+0x7c>
   13904:	mov	r0, #1
   13908:	cmp	ip, #5
   1390c:	mov	r3, lr
   13910:	bne	13920 <mmk_mock_get_params@@Base+0xac>
   13914:	b	13a78 <mmk_mock_get_params@@Base+0x204>
   13918:	cmp	r5, #5
   1391c:	beq	13a78 <mmk_mock_get_params@@Base+0x204>
   13920:	ldr	r5, [r3, #8]!
   13924:	cmp	r5, #0
   13928:	bne	13918 <mmk_mock_get_params@@Base+0xa4>
   1392c:	mov	r0, #1
   13930:	cmp	ip, #20
   13934:	mov	r3, lr
   13938:	bne	13948 <mmk_mock_get_params@@Base+0xd4>
   1393c:	b	13a6c <mmk_mock_get_params@@Base+0x1f8>
   13940:	cmp	r2, #20
   13944:	beq	13a6c <mmk_mock_get_params@@Base+0x1f8>
   13948:	ldr	r2, [r3, #8]!
   1394c:	cmp	r2, #0
   13950:	bne	13940 <mmk_mock_get_params@@Base+0xcc>
   13954:	mov	r6, #2
   13958:	cmp	ip, #23
   1395c:	mov	r8, lr
   13960:	bne	13970 <mmk_mock_get_params@@Base+0xfc>
   13964:	b	13a58 <mmk_mock_get_params@@Base+0x1e4>
   13968:	cmp	r3, #23
   1396c:	beq	13a58 <mmk_mock_get_params@@Base+0x1e4>
   13970:	ldr	r3, [r8, #8]!
   13974:	cmp	r3, #0
   13978:	bne	13968 <mmk_mock_get_params@@Base+0xf4>
   1397c:	mov	r8, r3
   13980:	cmp	ip, #2
   13984:	mov	r9, lr
   13988:	bne	13998 <mmk_mock_get_params@@Base+0x124>
   1398c:	b	13a50 <mmk_mock_get_params@@Base+0x1dc>
   13990:	cmp	r3, #2
   13994:	beq	13a50 <mmk_mock_get_params@@Base+0x1dc>
   13998:	ldr	r3, [r9, #8]!
   1399c:	cmp	r3, #0
   139a0:	bne	13990 <mmk_mock_get_params@@Base+0x11c>
   139a4:	b	139b4 <mmk_mock_get_params@@Base+0x140>
   139a8:	ldr	ip, [lr, #8]!
   139ac:	cmp	ip, #0
   139b0:	beq	13ab4 <mmk_mock_get_params@@Base+0x240>
   139b4:	cmp	ip, r6
   139b8:	bne	139a8 <mmk_mock_get_params@@Base+0x134>
   139bc:	cmp	r0, #0
   139c0:	ldr	r9, [lr, #4]
   139c4:	bne	13ac0 <mmk_mock_get_params@@Base+0x24c>
   139c8:	cmp	r8, #0
   139cc:	cmpne	r2, #0
   139d0:	beq	13a34 <mmk_mock_get_params@@Base+0x1c0>
   139d4:	cmp	r9, #0
   139d8:	cmpne	r3, #0
   139dc:	beq	13a34 <mmk_mock_get_params@@Base+0x1c0>
   139e0:	cmp	r9, r3
   139e4:	udiv	r6, r3, r9
   139e8:	bhi	13a34 <mmk_mock_get_params@@Base+0x1c0>
   139ec:	mov	sl, r1
   139f0:	mov	fp, r0
   139f4:	b	13a04 <mmk_mock_get_params@@Base+0x190>
   139f8:	cmp	r6, fp
   139fc:	add	r8, r8, r9
   13a00:	bls	13ac0 <mmk_mock_get_params@@Base+0x24c>
   13a04:	ldr	r3, [r8, #4]
   13a08:	mov	r1, sl
   13a0c:	add	fp, fp, #1
   13a10:	lsr	r3, r3, #8
   13a14:	ldr	r0, [r4, r3, lsl #4]
   13a18:	add	r0, r5, r0
   13a1c:	bl	111a8 <strcmp@plt>
   13a20:	cmp	r0, #0
   13a24:	bne	139f8 <mmk_mock_get_params@@Base+0x184>
   13a28:	ldr	r0, [r8]
   13a2c:	cmp	r0, #0
   13a30:	addne	r0, r7, r0
   13a34:	add	sp, sp, #4
   13a38:	ldrd	r4, [sp]
   13a3c:	ldrd	r6, [sp, #8]
   13a40:	ldrd	r8, [sp, #16]
   13a44:	ldrd	sl, [sp, #24]
   13a48:	add	sp, sp, #32
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	ldr	r3, [r9, #4]
   13a54:	b	139b4 <mmk_mock_get_params@@Base+0x140>
   13a58:	ldr	r3, [r8, #4]
   13a5c:	cmp	r7, r3
   13a60:	addhi	r8, r7, r3
   13a64:	bhi	13980 <mmk_mock_get_params@@Base+0x10c>
   13a68:	b	1397c <mmk_mock_get_params@@Base+0x108>
   13a6c:	ldr	r2, [r3, #4]
   13a70:	add	r6, r2, #2
   13a74:	b	13958 <mmk_mock_get_params@@Base+0xe4>
   13a78:	ldr	r5, [r3, #4]
   13a7c:	cmp	r7, r5
   13a80:	bhi	13ac8 <mmk_mock_get_params@@Base+0x254>
   13a84:	cmp	r5, #0
   13a88:	moveq	r0, #1
   13a8c:	b	13930 <mmk_mock_get_params@@Base+0xbc>
   13a90:	ldr	r4, [r3, #4]
   13a94:	cmp	r7, r4
   13a98:	clzls	r0, r4
   13a9c:	lsrls	r0, r0, #5
   13aa0:	bls	13908 <mmk_mock_get_params@@Base+0x94>
   13aa4:	adds	r4, r7, r4
   13aa8:	moveq	r0, #1
   13aac:	movne	r0, #0
   13ab0:	b	13908 <mmk_mock_get_params@@Base+0x94>
   13ab4:	cmp	r0, #0
   13ab8:	mov	r9, ip
   13abc:	beq	139c8 <mmk_mock_get_params@@Base+0x154>
   13ac0:	mov	r0, #0
   13ac4:	b	13a34 <mmk_mock_get_params@@Base+0x1c0>
   13ac8:	adds	r5, r7, r5
   13acc:	moveq	r0, #1
   13ad0:	b	13930 <mmk_mock_get_params@@Base+0xbc>

00013ad4 <plt_init_ctx@@Base>:
   13ad4:	ldr	r3, [pc, #44]	; 13b08 <plt_init_ctx@@Base+0x34>
   13ad8:	ldr	r2, [pc, #44]	; 13b0c <plt_init_ctx@@Base+0x38>
   13adc:	add	r3, pc, r3
   13ae0:	ldr	r0, [r3]
   13ae4:	add	r2, pc, r2
   13ae8:	cmn	r0, #1
   13aec:	beq	13af4 <plt_init_ctx@@Base+0x20>
   13af0:	bx	lr
   13af4:	ldr	r1, [pc, #20]	; 13b10 <plt_init_ctx@@Base+0x3c>
   13af8:	ldr	r2, [r2, r1]
   13afc:	mov	r0, r2
   13b00:	str	r2, [r3]
   13b04:	bx	lr
   13b08:	andeq	r2, r1, ip, asr #11
   13b0c:	andeq	r2, r1, r4, lsl r5
   13b10:	andeq	r0, r0, r0, lsr #1

00013b14 <plt_get_lib@@Base>:
   13b14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b18:	ldr	r4, [pc, #628]	; 13d94 <plt_get_lib@@Base+0x280>
   13b1c:	strd	r6, [sp, #8]
   13b20:	subs	r6, r1, #0
   13b24:	strd	r8, [sp, #16]
   13b28:	mov	r9, r0
   13b2c:	strd	sl, [sp, #24]
   13b30:	add	fp, sp, #32
   13b34:	str	lr, [sp, #32]
   13b38:	sub	sp, sp, #12
   13b3c:	add	r4, pc, r4
   13b40:	beq	13d40 <plt_get_lib@@Base+0x22c>
   13b44:	ldr	r1, [pc, #588]	; 13d98 <plt_get_lib@@Base+0x284>
   13b48:	mov	r2, #4
   13b4c:	mov	r0, r6
   13b50:	add	r1, pc, r1
   13b54:	bl	1128c <strncmp@plt>
   13b58:	cmp	r0, #0
   13b5c:	moveq	r5, #1
   13b60:	bne	13cac <plt_get_lib@@Base+0x198>
   13b64:	mov	r1, #58	; 0x3a
   13b68:	mov	r0, r6
   13b6c:	bl	11244 <strchr@plt>
   13b70:	ldr	r1, [pc, #548]	; 13d9c <plt_get_lib@@Base+0x288>
   13b74:	add	r8, r0, #1
   13b78:	mov	r0, r8
   13b7c:	add	r1, pc, r1
   13b80:	bl	111a8 <strcmp@plt>
   13b84:	mov	r7, r0
   13b88:	mov	r0, r8
   13b8c:	bl	1122c <strlen@plt>
   13b90:	mov	sl, r0
   13b94:	ldr	r4, [r9, #4]
   13b98:	cmp	r4, #0
   13b9c:	beq	13c64 <plt_get_lib@@Base+0x150>
   13ba0:	add	r3, sl, #15
   13ba4:	bic	r3, r3, #7
   13ba8:	str	r3, [fp, #-40]	; 0xffffffd8
   13bac:	b	13bd8 <plt_get_lib@@Base+0xc4>
   13bb0:	tst	r5, #1
   13bb4:	bne	13c3c <plt_get_lib@@Base+0x128>
   13bb8:	mov	r0, r6
   13bbc:	ldr	r1, [r4, #4]
   13bc0:	bl	111a8 <strcmp@plt>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13c1c <plt_get_lib@@Base+0x108>
   13bcc:	ldr	r4, [r4, #12]
   13bd0:	cmp	r4, #0
   13bd4:	beq	13c64 <plt_get_lib@@Base+0x150>
   13bd8:	cmp	r5, #1
   13bdc:	bne	13bb0 <plt_get_lib@@Base+0x9c>
   13be0:	cmp	r7, #0
   13be4:	bne	13c6c <plt_get_lib@@Base+0x158>
   13be8:	ldr	r1, [pc, #432]	; 13da0 <plt_get_lib@@Base+0x28c>
   13bec:	ldr	r9, [r4, #4]
   13bf0:	add	r1, pc, r1
   13bf4:	mov	r0, r9
   13bf8:	bl	1119c <strstr@plt>
   13bfc:	cmp	r0, #0
   13c00:	bne	13c1c <plt_get_lib@@Base+0x108>
   13c04:	ldr	r1, [pc, #408]	; 13da4 <plt_get_lib@@Base+0x290>
   13c08:	mov	r0, r9
   13c0c:	add	r1, pc, r1
   13c10:	bl	1119c <strstr@plt>
   13c14:	cmp	r0, #0
   13c18:	beq	13bcc <plt_get_lib@@Base+0xb8>
   13c1c:	mov	r0, r4
   13c20:	sub	sp, fp, #32
   13c24:	ldrd	r4, [sp]
   13c28:	ldrd	r6, [sp, #8]
   13c2c:	ldrd	r8, [sp, #16]
   13c30:	ldrd	sl, [sp, #24]
   13c34:	add	sp, sp, #32
   13c38:	pop	{pc}		; (ldr pc, [sp], #4)
   13c3c:	cmp	r5, #3
   13c40:	bne	13bcc <plt_get_lib@@Base+0xb8>
   13c44:	mov	r1, r8
   13c48:	mov	r0, r4
   13c4c:	bl	138b4 <mmk_mock_get_params@@Base+0x40>
   13c50:	cmp	r0, #0
   13c54:	bne	13c1c <plt_get_lib@@Base+0x108>
   13c58:	ldr	r4, [r4, #12]
   13c5c:	cmp	r4, #0
   13c60:	bne	13bd8 <plt_get_lib@@Base+0xc4>
   13c64:	mov	r4, #0
   13c68:	b	13c1c <plt_get_lib@@Base+0x108>
   13c6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c70:	mov	r9, sp
   13c74:	add	r1, sl, #8
   13c78:	ldr	r2, [pc, #296]	; 13da8 <plt_get_lib@@Base+0x294>
   13c7c:	sub	sp, sp, r3
   13c80:	mov	r3, r8
   13c84:	mov	r0, sp
   13c88:	add	r2, pc, r2
   13c8c:	bl	11268 <snprintf@plt>
   13c90:	mov	r1, sp
   13c94:	ldr	r0, [r4, #4]
   13c98:	bl	1119c <strstr@plt>
   13c9c:	cmp	r0, #0
   13ca0:	bne	13d5c <plt_get_lib@@Base+0x248>
   13ca4:	mov	sp, r9
   13ca8:	b	13bcc <plt_get_lib@@Base+0xb8>
   13cac:	ldr	r1, [pc, #248]	; 13dac <plt_get_lib@@Base+0x298>
   13cb0:	mov	r2, #5
   13cb4:	mov	r0, r6
   13cb8:	add	r1, pc, r1
   13cbc:	bl	1128c <strncmp@plt>
   13cc0:	cmp	r0, #0
   13cc4:	moveq	r5, #2
   13cc8:	beq	13b64 <plt_get_lib@@Base+0x50>
   13ccc:	ldr	r1, [pc, #220]	; 13db0 <plt_get_lib@@Base+0x29c>
   13cd0:	mov	r2, #4
   13cd4:	mov	r0, r6
   13cd8:	add	r1, pc, r1
   13cdc:	bl	1128c <strncmp@plt>
   13ce0:	cmp	r0, #0
   13ce4:	moveq	r5, #3
   13ce8:	beq	13b64 <plt_get_lib@@Base+0x50>
   13cec:	ldr	r1, [pc, #192]	; 13db4 <plt_get_lib@@Base+0x2a0>
   13cf0:	mov	r0, r6
   13cf4:	add	r1, pc, r1
   13cf8:	bl	111a8 <strcmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	beq	13d64 <plt_get_lib@@Base+0x250>
   13d04:	mov	r1, #58	; 0x3a
   13d08:	mov	r0, r6
   13d0c:	bl	11244 <strchr@plt>
   13d10:	ldr	r3, [pc, #160]	; 13db8 <plt_get_lib@@Base+0x2a4>
   13d14:	subs	r2, r0, #0
   13d18:	ldr	r3, [r4, r3]
   13d1c:	ldr	r0, [r3]
   13d20:	beq	13d80 <plt_get_lib@@Base+0x26c>
   13d24:	sub	r2, r2, r6
   13d28:	mov	r3, r6
   13d2c:	ldr	r1, [pc, #136]	; 13dbc <plt_get_lib@@Base+0x2a8>
   13d30:	add	r2, r2, #1
   13d34:	add	r1, pc, r1
   13d38:	bl	11250 <fprintf@plt>
   13d3c:	bl	11298 <abort@plt>
   13d40:	mov	sl, r6
   13d44:	ldr	r6, [pc, #116]	; 13dc0 <plt_get_lib@@Base+0x2ac>
   13d48:	mvn	r7, #0
   13d4c:	mov	r5, sl
   13d50:	add	r6, pc, r6
   13d54:	mov	r8, r6
   13d58:	b	13b94 <plt_get_lib@@Base+0x80>
   13d5c:	mov	sp, r9
   13d60:	b	13c1c <plt_get_lib@@Base+0x108>
   13d64:	ldr	r6, [pc, #88]	; 13dc4 <plt_get_lib@@Base+0x2b0>
   13d68:	mov	sl, r0
   13d6c:	mvn	r7, #0
   13d70:	mov	r5, r0
   13d74:	add	r6, pc, r6
   13d78:	mov	r8, r6
   13d7c:	b	13b94 <plt_get_lib@@Base+0x80>
   13d80:	ldr	r1, [pc, #64]	; 13dc8 <plt_get_lib@@Base+0x2b4>
   13d84:	mov	r2, r6
   13d88:	add	r1, pc, r1
   13d8c:	bl	11250 <fprintf@plt>
   13d90:	b	13d3c <plt_get_lib@@Base+0x228>
   13d94:			; <UNDEFINED> instruction: 0x000124bc
   13d98:	andeq	r1, r0, r4, asr #17
   13d9c:	andeq	r1, r0, r0, lsl #18
   13da0:	muleq	r0, r0, r8
   13da4:	andeq	r1, r0, r0, lsl #17
   13da8:	andeq	r1, r0, r0, lsl r8
   13dac:	andeq	r1, r0, r4, ror #14
   13db0:	andeq	r1, r0, ip, asr #14
   13db4:	andeq	r1, r0, r8, lsr r7
   13db8:	andeq	r0, r0, ip, ror r0
   13dbc:	andeq	r1, r0, r0, lsl #14
   13dc0:	andeq	r1, r0, r8, asr #15
   13dc4:	andeq	r1, r0, r4, lsr #15
   13dc8:	ldrdeq	r1, [r0], -r0

00013dcc <plt_get_offsets@@Base>:
   13dcc:	strd	r4, [sp, #-16]!
   13dd0:	mov	r5, r2
   13dd4:	str	r6, [sp, #8]
   13dd8:	str	lr, [sp, #12]
   13ddc:	bl	138b4 <mmk_mock_get_params@@Base+0x40>
   13de0:	subs	r4, r0, #0
   13de4:	beq	13e0c <plt_get_offsets@@Base+0x40>
   13de8:	mov	r0, #8
   13dec:	bl	14c0c <mmk_malloc@@Base>
   13df0:	mov	r1, #1
   13df4:	mov	r2, #0
   13df8:	mov	r3, #0
   13dfc:	str	r1, [r5]
   13e00:	strd	r2, [r0]
   13e04:	str	r4, [r0]
   13e08:	mov	r4, r0
   13e0c:	mov	r0, r4
   13e10:	ldrd	r4, [sp]
   13e14:	ldr	r6, [sp, #8]
   13e18:	add	sp, sp, #12
   13e1c:	pop	{pc}		; (ldr pc, [sp], #4)

00013e20 <plt_set_offsets@@Base>:
   13e20:	cmp	r1, #0
   13e24:	beq	13e4c <plt_set_offsets@@Base+0x2c>
   13e28:	add	r1, r0, r1, lsl #3
   13e2c:	ldm	r0, {r3, ip}
   13e30:	add	r0, r0, #8
   13e34:	cmp	ip, #0
   13e38:	ldreq	ip, [r3]
   13e3c:	streq	ip, [r0, #-4]
   13e40:	cmp	r1, r0
   13e44:	str	r2, [r3]
   13e48:	bne	13e2c <plt_set_offsets@@Base+0xc>
   13e4c:	bx	lr

00013e50 <plt_reset_offsets@@Base>:
   13e50:	cmp	r1, #0
   13e54:	beq	13e70 <plt_reset_offsets@@Base+0x20>
   13e58:	add	r1, r0, r1, lsl #3
   13e5c:	ldr	r2, [r0, #4]
   13e60:	ldr	r3, [r0], #8
   13e64:	cmp	r0, r1
   13e68:	str	r2, [r3]
   13e6c:	bne	13e5c <plt_reset_offsets@@Base+0xc>
   13e70:	bx	lr

00013e74 <plt_get_real_fn@@Base>:
   13e74:	strd	r4, [sp, #-16]!
   13e78:	ldr	r4, [r0, #4]
   13e7c:	str	r6, [sp, #8]
   13e80:	str	lr, [sp, #12]
   13e84:	cmp	r4, #0
   13e88:	beq	13ec8 <plt_get_real_fn@@Base+0x54>
   13e8c:	mov	r5, r1
   13e90:	b	13ea0 <plt_get_real_fn@@Base+0x2c>
   13e94:	ldr	r4, [r4, #12]
   13e98:	cmp	r4, #0
   13e9c:	beq	13ec8 <plt_get_real_fn@@Base+0x54>
   13ea0:	mov	r1, r5
   13ea4:	mov	r0, r4
   13ea8:	bl	138b4 <mmk_mock_get_params@@Base+0x40>
   13eac:	cmp	r0, #0
   13eb0:	beq	13e94 <plt_get_real_fn@@Base+0x20>
   13eb4:	ldrd	r4, [sp]
   13eb8:	ldr	r6, [sp, #8]
   13ebc:	add	sp, sp, #12
   13ec0:	ldr	r0, [r0]
   13ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec8:	mov	r0, r4
   13ecc:	ldrd	r4, [sp]
   13ed0:	ldr	r6, [sp, #8]
   13ed4:	add	sp, sp, #12
   13ed8:	pop	{pc}		; (ldr pc, [sp], #4)

00013edc <mmk_stub_context@@Base>:
   13edc:	push	{fp}		; (str fp, [sp, #-4]!)
   13ee0:	add	fp, sp, #0
   13ee4:	sub	sp, sp, #12
   13ee8:	str	r0, [fp, #-8]
   13eec:	ldr	r3, [fp, #-8]
   13ef0:	cmp	r3, #0
   13ef4:	bne	13f00 <mmk_stub_context@@Base+0x24>
   13ef8:	mov	r3, #0
   13efc:	b	13f08 <mmk_stub_context@@Base+0x2c>
   13f00:	ldr	r3, [fp, #-8]
   13f04:	ldr	r3, [r3, #12]
   13f08:	mov	r0, r3
   13f0c:	add	sp, fp, #0
   13f10:	pop	{fp}		; (ldr fp, [sp], #4)
   13f14:	bx	lr

00013f18 <mmk_stub_create_static@@Base>:
   13f18:	str	r4, [sp, #-12]!
   13f1c:	str	fp, [sp, #4]
   13f20:	str	lr, [sp, #8]
   13f24:	add	fp, sp, #8
   13f28:	sub	sp, sp, #44	; 0x2c
   13f2c:	str	r0, [fp, #-40]	; 0xffffffd8
   13f30:	str	r1, [fp, #-44]	; 0xffffffd4
   13f34:	str	r2, [fp, #-48]	; 0xffffffd0
   13f38:	str	r3, [fp, #-52]	; 0xffffffcc
   13f3c:	ldr	r4, [pc, #512]	; 14144 <mmk_stub_create_static@@Base+0x22c>
   13f40:	add	r4, pc, r4
   13f44:	ldr	r3, [pc, #508]	; 14148 <mmk_stub_create_static@@Base+0x230>
   13f48:	add	r3, pc, r3
   13f4c:	mov	r0, r3
   13f50:	bl	11280 <__tls_get_addr@plt>
   13f54:	mov	r1, r0
   13f58:	ldr	r3, [pc, #492]	; 1414c <mmk_stub_create_static@@Base+0x234>
   13f5c:	mov	r2, #0
   13f60:	str	r2, [r1, r3]
   13f64:	ldr	r3, [pc, #484]	; 14150 <mmk_stub_create_static@@Base+0x238>
   13f68:	add	r3, pc, r3
   13f6c:	mov	r0, r3
   13f70:	bl	11280 <__tls_get_addr@plt>
   13f74:	mov	r1, r0
   13f78:	ldr	r3, [pc, #468]	; 14154 <mmk_stub_create_static@@Base+0x23c>
   13f7c:	mov	r2, #0
   13f80:	str	r2, [r1, r3]
   13f84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f88:	bl	14bbc <mmk_strlen@@Base>
   13f8c:	mov	r3, r0
   13f90:	add	r3, r3, #1
   13f94:	mov	r0, r3
   13f98:	bl	14c0c <mmk_malloc@@Base>
   13f9c:	str	r0, [fp, #-20]	; 0xffffffec
   13fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fa4:	cmp	r3, #0
   13fa8:	bne	13fb4 <mmk_stub_create_static@@Base+0x9c>
   13fac:	mvn	r3, #11
   13fb0:	b	1412c <mmk_stub_create_static@@Base+0x214>
   13fb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fbc:	bl	14b50 <mmk_strcpy@@Base>
   13fc0:	mov	r3, #0
   13fc4:	str	r3, [fp, #-16]
   13fc8:	mov	r1, #64	; 0x40
   13fcc:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fd0:	bl	14b10 <mmk_strchr@@Base>
   13fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   13fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fdc:	cmp	r3, #0
   13fe0:	beq	13ffc <mmk_stub_create_static@@Base+0xe4>
   13fe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fe8:	mov	r2, #0
   13fec:	strb	r2, [r3]
   13ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ff4:	add	r3, r3, #1
   13ff8:	str	r3, [fp, #-16]
   13ffc:	bl	13268 <mmk_plt_ctx@@Base>
   14000:	mov	r3, r0
   14004:	ldr	r1, [fp, #-16]
   14008:	mov	r0, r3
   1400c:	bl	13b14 <plt_get_lib@@Base>
   14010:	str	r0, [fp, #-28]	; 0xffffffe4
   14014:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14018:	cmp	r3, #0
   1401c:	bne	14028 <mmk_stub_create_static@@Base+0x110>
   14020:	mvn	r3, #1
   14024:	b	1412c <mmk_stub_create_static@@Base+0x214>
   14028:	mov	r3, #0
   1402c:	str	r3, [fp, #-36]	; 0xffffffdc
   14030:	sub	r3, fp, #36	; 0x24
   14034:	mov	r2, r3
   14038:	ldr	r1, [fp, #-20]	; 0xffffffec
   1403c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14040:	bl	13dcc <plt_get_offsets@@Base>
   14044:	str	r0, [fp, #-32]	; 0xffffffe0
   14048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1404c:	cmp	r3, #0
   14050:	beq	14060 <mmk_stub_create_static@@Base+0x148>
   14054:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14058:	cmp	r3, #0
   1405c:	bne	14068 <mmk_stub_create_static@@Base+0x150>
   14060:	mvn	r3, #1
   14064:	b	1412c <mmk_stub_create_static@@Base+0x214>
   14068:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1406c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14070:	mov	r1, r3
   14074:	mov	r2, #0
   14078:	mov	r3, #0
   1407c:	strd	r2, [r1]
   14080:	strd	r2, [r1, #8]
   14084:	strd	r2, [r1, #16]
   14088:	strd	r2, [r1, #24]
   1408c:	strd	r2, [r1, #32]
   14090:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14094:	ldr	r2, [pc, #188]	; 14158 <mmk_stub_create_static@@Base+0x240>
   14098:	ldr	r2, [r4, r2]
   1409c:	str	r2, [r3]
   140a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140a4:	ldr	r2, [pc, #176]	; 1415c <mmk_stub_create_static@@Base+0x244>
   140a8:	ldr	r2, [r4, r2]
   140ac:	str	r2, [r3, #4]
   140b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140b4:	ldr	r2, [pc, #164]	; 14160 <mmk_stub_create_static@@Base+0x248>
   140b8:	ldr	r2, [r4, r2]
   140bc:	str	r2, [r3, #8]
   140c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140c4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   140c8:	str	r2, [r3, #12]
   140cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   140d4:	str	r2, [r3, #16]
   140d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140dc:	ldr	r2, [fp, #-16]
   140e0:	str	r2, [r3, #20]
   140e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140ec:	str	r2, [r3, #24]
   140f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140f4:	str	r0, [r3, #28]
   140f8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   140fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14100:	bl	143fc <create_trampoline@@Base>
   14104:	mov	r2, r0
   14108:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1410c:	str	r2, [r3, #32]
   14110:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14114:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14118:	ldr	r3, [r3, #32]
   1411c:	mov	r2, r3
   14120:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14124:	bl	13e20 <plt_set_offsets@@Base>
   14128:	mov	r3, #0
   1412c:	mov	r0, r3
   14130:	sub	sp, fp, #8
   14134:	ldr	r4, [sp]
   14138:	ldr	fp, [sp, #4]
   1413c:	add	sp, sp, #8
   14140:	pop	{pc}		; (ldr pc, [sp], #4)
   14144:	strheq	r2, [r1], -r8
   14148:	andeq	r2, r1, r4, lsl r1
   1414c:	andeq	r0, r0, r4
   14150:	strdeq	r2, [r1], -r4
   14154:	andeq	r0, r0, r8
   14158:	andeq	r0, r0, r4, lsr #1
   1415c:	andeq	r0, r0, r8, lsl #1
   14160:	muleq	r0, r4, r0

00014164 <mmk_stub_create@@Base>:
   14164:	str	fp, [sp, #-8]!
   14168:	str	lr, [sp, #4]
   1416c:	add	fp, sp, #4
   14170:	sub	sp, sp, #24
   14174:	str	r0, [fp, #-16]
   14178:	str	r1, [fp, #-20]	; 0xffffffec
   1417c:	str	r2, [fp, #-24]	; 0xffffffe8
   14180:	bl	13174 <mmk_init@@Base>
   14184:	mov	r0, #40	; 0x28
   14188:	bl	14c0c <mmk_malloc@@Base>
   1418c:	str	r0, [fp, #-8]
   14190:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14194:	ldr	r2, [fp, #-20]	; 0xffffffec
   14198:	ldr	r1, [fp, #-16]
   1419c:	ldr	r0, [fp, #-8]
   141a0:	bl	13f18 <mmk_stub_create_static@@Base>
   141a4:	str	r0, [fp, #-12]
   141a8:	ldr	r3, [fp, #-12]
   141ac:	cmp	r3, #0
   141b0:	bge	141d4 <mmk_stub_create@@Base+0x70>
   141b4:	ldr	r0, [fp, #-8]
   141b8:	bl	14c4c <mmk_free@@Base>
   141bc:	bl	1125c <__errno_location@plt>
   141c0:	mov	r2, r0
   141c4:	ldr	r3, [fp, #-12]
   141c8:	str	r3, [r2]
   141cc:	mov	r3, #0
   141d0:	str	r3, [fp, #-8]
   141d4:	ldr	r3, [fp, #-8]
   141d8:	mov	r0, r3
   141dc:	sub	sp, fp, #4
   141e0:	ldr	fp, [sp]
   141e4:	add	sp, sp, #4
   141e8:	pop	{pc}		; (ldr pc, [sp], #4)

000141ec <mmk_stub_destroy_static@@Base>:
   141ec:	str	fp, [sp, #-8]!
   141f0:	str	lr, [sp, #4]
   141f4:	add	fp, sp, #4
   141f8:	sub	sp, sp, #8
   141fc:	str	r0, [fp, #-8]
   14200:	ldr	r3, [fp, #-8]
   14204:	ldr	r2, [r3, #24]
   14208:	ldr	r3, [fp, #-8]
   1420c:	ldr	r3, [r3, #28]
   14210:	mov	r1, r3
   14214:	mov	r0, r2
   14218:	bl	13e50 <plt_reset_offsets@@Base>
   1421c:	ldr	r3, [fp, #-8]
   14220:	ldr	r3, [r3, #24]
   14224:	mov	r0, r3
   14228:	bl	14c4c <mmk_free@@Base>
   1422c:	ldr	r3, [fp, #-8]
   14230:	ldr	r3, [r3, #32]
   14234:	mov	r0, r3
   14238:	bl	14540 <destroy_trampoline@@Base>
   1423c:	ldr	r3, [fp, #-8]
   14240:	ldr	r3, [r3, #16]
   14244:	mov	r0, r3
   14248:	bl	14c4c <mmk_free@@Base>
   1424c:	nop	{0}
   14250:	sub	sp, fp, #4
   14254:	ldr	fp, [sp]
   14258:	add	sp, sp, #4
   1425c:	pop	{pc}		; (ldr pc, [sp], #4)

00014260 <mmk_stub_destroy@@Base>:
   14260:	str	fp, [sp, #-8]!
   14264:	str	lr, [sp, #4]
   14268:	add	fp, sp, #4
   1426c:	sub	sp, sp, #8
   14270:	str	r0, [fp, #-8]
   14274:	ldr	r0, [fp, #-8]
   14278:	bl	141ec <mmk_stub_destroy_static@@Base>
   1427c:	ldr	r0, [fp, #-8]
   14280:	bl	14c4c <mmk_free@@Base>
   14284:	nop	{0}
   14288:	sub	sp, fp, #4
   1428c:	ldr	fp, [sp]
   14290:	add	sp, sp, #4
   14294:	pop	{pc}		; (ldr pc, [sp], #4)

00014298 <mmk_ask_ctx@@Base>:
   14298:	str	fp, [sp, #-8]!
   1429c:	str	lr, [sp, #4]
   142a0:	add	fp, sp, #4
   142a4:	sub	sp, sp, #8
   142a8:	str	r0, [fp, #-8]
   142ac:	ldr	r3, [pc, #56]	; 142ec <mmk_ask_ctx@@Base+0x54>
   142b0:	add	r3, pc, r3
   142b4:	mov	r0, r3
   142b8:	bl	11280 <__tls_get_addr@plt>
   142bc:	mov	r1, r0
   142c0:	ldr	r3, [pc, #40]	; 142f0 <mmk_ask_ctx@@Base+0x58>
   142c4:	mov	r2, #1
   142c8:	str	r2, [r1, r3]
   142cc:	ldr	r3, [fp, #-8]
   142d0:	blx	r3
   142d4:	mov	r3, r0
   142d8:	mov	r0, r3
   142dc:	sub	sp, fp, #4
   142e0:	ldr	fp, [sp]
   142e4:	add	sp, sp, #4
   142e8:	pop	{pc}		; (ldr pc, [sp], #4)
   142ec:	andeq	r1, r1, ip, lsr #27
   142f0:	andeq	r0, r0, r4

000142f4 <mmk_ctx_asked@@Base>:
   142f4:	str	fp, [sp, #-8]!
   142f8:	str	lr, [sp, #4]
   142fc:	add	fp, sp, #4
   14300:	sub	sp, sp, #8
   14304:	ldr	r3, [pc, #80]	; 1435c <mmk_ctx_asked@@Base+0x68>
   14308:	add	r3, pc, r3
   1430c:	mov	r0, r3
   14310:	bl	11280 <__tls_get_addr@plt>
   14314:	mov	r2, r0
   14318:	ldr	r3, [pc, #64]	; 14360 <mmk_ctx_asked@@Base+0x6c>
   1431c:	ldr	r3, [r2, r3]
   14320:	str	r3, [fp, #-8]
   14324:	ldr	r3, [pc, #56]	; 14364 <mmk_ctx_asked@@Base+0x70>
   14328:	add	r3, pc, r3
   1432c:	mov	r0, r3
   14330:	bl	11280 <__tls_get_addr@plt>
   14334:	mov	r1, r0
   14338:	ldr	r3, [pc, #32]	; 14360 <mmk_ctx_asked@@Base+0x6c>
   1433c:	mov	r2, #0
   14340:	str	r2, [r1, r3]
   14344:	ldr	r3, [fp, #-8]
   14348:	mov	r0, r3
   1434c:	sub	sp, fp, #4
   14350:	ldr	fp, [sp]
   14354:	add	sp, sp, #4
   14358:	pop	{pc}		; (ldr pc, [sp], #4)
   1435c:	andeq	r1, r1, r4, asr sp
   14360:	andeq	r0, r0, r4
   14364:	andeq	r1, r1, r4, lsr sp

00014368 <mmk_ctx@@Base>:
   14368:	str	fp, [sp, #-8]!
   1436c:	str	lr, [sp, #4]
   14370:	add	fp, sp, #4
   14374:	ldr	r3, [pc, #40]	; 143a4 <mmk_ctx@@Base+0x3c>
   14378:	add	r3, pc, r3
   1437c:	mov	r0, r3
   14380:	bl	11280 <__tls_get_addr@plt>
   14384:	mov	r2, r0
   14388:	ldr	r3, [pc, #24]	; 143a8 <mmk_ctx@@Base+0x40>
   1438c:	ldr	r3, [r2, r3]
   14390:	mov	r0, r3
   14394:	sub	sp, fp, #4
   14398:	ldr	fp, [sp]
   1439c:	add	sp, sp, #4
   143a0:	pop	{pc}		; (ldr pc, [sp], #4)
   143a4:	andeq	r1, r1, r4, ror #25
   143a8:	andeq	r0, r0, r8

000143ac <mmk_set_ctx@@Base>:
   143ac:	str	fp, [sp, #-8]!
   143b0:	str	lr, [sp, #4]
   143b4:	add	fp, sp, #4
   143b8:	sub	sp, sp, #8
   143bc:	str	r0, [fp, #-8]
   143c0:	ldr	r3, [pc, #44]	; 143f4 <mmk_set_ctx@@Base+0x48>
   143c4:	add	r3, pc, r3
   143c8:	mov	r0, r3
   143cc:	bl	11280 <__tls_get_addr@plt>
   143d0:	mov	r1, r0
   143d4:	ldr	r2, [pc, #28]	; 143f8 <mmk_set_ctx@@Base+0x4c>
   143d8:	ldr	r3, [fp, #-8]
   143dc:	str	r3, [r1, r2]
   143e0:	nop	{0}
   143e4:	sub	sp, fp, #4
   143e8:	ldr	fp, [sp]
   143ec:	add	sp, sp, #4
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	muleq	r1, r8, ip
   143f8:	andeq	r0, r0, r8

000143fc <create_trampoline@@Base>:
   143fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14400:	strd	r6, [sp, #8]
   14404:	ldr	r6, [pc, #268]	; 14518 <create_trampoline@@Base+0x11c>
   14408:	strd	r8, [sp, #16]
   1440c:	ldr	r2, [pc, #264]	; 1451c <create_trampoline@@Base+0x120>
   14410:	str	lr, [sp, #24]
   14414:	sub	sp, sp, #12
   14418:	ldr	r3, [pc, #256]	; 14520 <create_trampoline@@Base+0x124>
   1441c:	add	r6, pc, r6
   14420:	ldr	r5, [r6, r2]
   14424:	ldr	r9, [r6, r3]
   14428:	sub	r5, r5, r9
   1442c:	cmp	r5, #4096	; 0x1000
   14430:	bcs	144b0 <create_trampoline@@Base+0xb4>
   14434:	mov	ip, #0
   14438:	mvn	r2, #0
   1443c:	mov	r8, r0
   14440:	mov	r7, r1
   14444:	mov	r0, ip
   14448:	mov	r3, #34	; 0x22
   1444c:	stm	sp, {r2, ip}
   14450:	mov	r1, #4096	; 0x1000
   14454:	mov	r2, #7
   14458:	bl	11238 <mmap@plt>
   1445c:	cmn	r0, #1
   14460:	mov	r4, r0
   14464:	beq	144e4 <create_trampoline@@Base+0xe8>
   14468:	add	r6, r0, #8
   1446c:	mov	r2, r5
   14470:	str	r8, [r4]
   14474:	mov	r1, r9
   14478:	mov	r0, r6
   1447c:	str	r7, [r4, #4]
   14480:	bl	111cc <memcpy@plt>
   14484:	mov	r0, r4
   14488:	mov	r2, #5
   1448c:	mov	r1, #4096	; 0x1000
   14490:	bl	111b4 <mprotect@plt>
   14494:	mov	r0, r6
   14498:	add	sp, sp, #12
   1449c:	ldrd	r4, [sp]
   144a0:	ldrd	r6, [sp, #8]
   144a4:	ldrd	r8, [sp, #16]
   144a8:	add	sp, sp, #24
   144ac:	pop	{pc}		; (ldr pc, [sp], #4)
   144b0:	ldr	r1, [pc, #108]	; 14524 <create_trampoline@@Base+0x128>
   144b4:	mov	r3, #45	; 0x2d
   144b8:	ldr	r0, [pc, #104]	; 14528 <create_trampoline@@Base+0x12c>
   144bc:	ldr	r2, [pc, #104]	; 1452c <create_trampoline@@Base+0x130>
   144c0:	add	r1, pc, r1
   144c4:	ldr	r0, [r6, r0]
   144c8:	str	r1, [sp]
   144cc:	ldr	r1, [pc, #92]	; 14530 <create_trampoline@@Base+0x134>
   144d0:	add	r2, pc, r2
   144d4:	ldr	r0, [r0]
   144d8:	add	r1, pc, r1
   144dc:	bl	11250 <fprintf@plt>
   144e0:	bl	11298 <abort@plt>
   144e4:	ldr	r1, [pc, #72]	; 14534 <create_trampoline@@Base+0x138>
   144e8:	mov	r3, #69	; 0x45
   144ec:	ldr	r0, [pc, #52]	; 14528 <create_trampoline@@Base+0x12c>
   144f0:	ldr	r2, [pc, #64]	; 14538 <create_trampoline@@Base+0x13c>
   144f4:	add	r1, pc, r1
   144f8:	ldr	r0, [r6, r0]
   144fc:	str	r1, [sp]
   14500:	ldr	r1, [pc, #52]	; 1453c <create_trampoline@@Base+0x140>
   14504:	add	r2, pc, r2
   14508:	ldr	r0, [r0]
   1450c:	add	r1, pc, r1
   14510:	bl	11250 <fprintf@plt>
   14514:	bl	11298 <abort@plt>
   14518:	ldrdeq	r1, [r1], -ip
   1451c:	andeq	r0, r0, r0, ror r0
   14520:	andeq	r0, r0, r4, lsl #1
   14524:	andeq	r1, r0, ip, asr r0
   14528:	andeq	r0, r0, ip, ror r0
   1452c:	ldrdeq	r0, [r0], -r4
   14530:	andeq	r1, r0, r4, lsr #32
   14534:	andeq	r1, r0, r4, asr #32
   14538:	andeq	r0, r0, r0, lsr #31
   1453c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>

00014540 <destroy_trampoline@@Base>:
   14540:	sub	r0, r0, #8
   14544:	mov	r1, #4096	; 0x1000
   14548:	b	11274 <munmap@plt>

0001454c <mmk_verify_set_times@@Base>:
   1454c:	str	fp, [sp, #-8]!
   14550:	str	lr, [sp, #4]
   14554:	add	fp, sp, #4
   14558:	sub	sp, sp, #8
   1455c:	str	r0, [fp, #-8]
   14560:	ldr	r3, [pc, #44]	; 14594 <mmk_verify_set_times@@Base+0x48>
   14564:	add	r3, pc, r3
   14568:	mov	r0, r3
   1456c:	bl	11280 <__tls_get_addr@plt>
   14570:	mov	r1, r0
   14574:	ldr	r2, [pc, #28]	; 14598 <mmk_verify_set_times@@Base+0x4c>
   14578:	ldr	r3, [fp, #-8]
   1457c:	str	r3, [r1, r2]
   14580:	nop	{0}
   14584:	sub	sp, fp, #4
   14588:	ldr	fp, [sp]
   1458c:	add	sp, sp, #4
   14590:	pop	{pc}		; (ldr pc, [sp], #4)
   14594:	strdeq	r1, [r1], -r8
   14598:	andeq	r0, r0, ip

0001459c <mmk_verify_times@@Base>:
   1459c:	str	fp, [sp, #-8]!
   145a0:	str	lr, [sp, #4]
   145a4:	add	fp, sp, #4
   145a8:	sub	sp, sp, #16
   145ac:	str	r0, [fp, #-16]
   145b0:	ldr	r3, [pc, #272]	; 146c8 <mmk_verify_times@@Base+0x12c>
   145b4:	add	r3, pc, r3
   145b8:	mov	r0, r3
   145bc:	bl	11280 <__tls_get_addr@plt>
   145c0:	mov	r2, r0
   145c4:	ldr	r3, [pc, #256]	; 146cc <mmk_verify_times@@Base+0x130>
   145c8:	ldr	r3, [r2, r3]
   145cc:	str	r3, [fp, #-8]
   145d0:	ldr	r3, [fp, #-16]
   145d4:	ldr	r3, [r3, #4]
   145d8:	cmp	r3, #0
   145dc:	beq	145f8 <mmk_verify_times@@Base+0x5c>
   145e0:	ldr	r3, [fp, #-8]
   145e4:	cmp	r3, #0
   145e8:	moveq	r3, #1
   145ec:	movne	r3, #0
   145f0:	uxtb	r3, r3
   145f4:	b	146b4 <mmk_verify_times@@Base+0x118>
   145f8:	ldr	r3, [fp, #-16]
   145fc:	ldr	r3, [r3, #8]
   14600:	cmp	r3, #0
   14604:	bne	14618 <mmk_verify_times@@Base+0x7c>
   14608:	ldr	r3, [fp, #-16]
   1460c:	ldr	r3, [r3, #12]
   14610:	cmp	r3, #0
   14614:	beq	14670 <mmk_verify_times@@Base+0xd4>
   14618:	ldr	r3, [fp, #-16]
   1461c:	ldr	r3, [r3, #12]
   14620:	cmp	r3, #0
   14624:	beq	14634 <mmk_verify_times@@Base+0x98>
   14628:	ldr	r3, [fp, #-16]
   1462c:	ldr	r3, [r3, #12]
   14630:	b	14638 <mmk_verify_times@@Base+0x9c>
   14634:	ldr	r3, [fp, #-8]
   14638:	str	r3, [fp, #-12]
   1463c:	ldr	r3, [fp, #-16]
   14640:	ldr	r3, [r3, #8]
   14644:	ldr	r2, [fp, #-8]
   14648:	cmp	r2, r3
   1464c:	bcc	14668 <mmk_verify_times@@Base+0xcc>
   14650:	ldr	r2, [fp, #-8]
   14654:	ldr	r3, [fp, #-12]
   14658:	cmp	r2, r3
   1465c:	bhi	14668 <mmk_verify_times@@Base+0xcc>
   14660:	mov	r3, #1
   14664:	b	146b4 <mmk_verify_times@@Base+0x118>
   14668:	mov	r3, #0
   1466c:	b	146b4 <mmk_verify_times@@Base+0x118>
   14670:	ldr	r3, [fp, #-16]
   14674:	ldr	r3, [r3, #20]
   14678:	cmp	r3, #0
   1467c:	beq	14698 <mmk_verify_times@@Base+0xfc>
   14680:	ldr	r3, [fp, #-16]
   14684:	ldr	r3, [r3, #20]
   14688:	ldr	r0, [fp, #-8]
   1468c:	blx	r3
   14690:	mov	r3, r0
   14694:	b	146b4 <mmk_verify_times@@Base+0x118>
   14698:	ldr	r3, [fp, #-16]
   1469c:	ldr	r3, [r3, #16]
   146a0:	ldr	r2, [fp, #-8]
   146a4:	cmp	r2, r3
   146a8:	moveq	r3, #1
   146ac:	movne	r3, #0
   146b0:	uxtb	r3, r3
   146b4:	mov	r0, r3
   146b8:	sub	sp, fp, #4
   146bc:	ldr	fp, [sp]
   146c0:	add	sp, sp, #4
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	andeq	r1, r1, r8, lsr #21
   146cc:	andeq	r0, r0, ip
   146d0:	str	fp, [sp, #-8]!
   146d4:	str	lr, [sp, #4]
   146d8:	add	fp, sp, #4
   146dc:	sub	sp, sp, #32
   146e0:	str	r0, [fp, #-24]	; 0xffffffe8
   146e4:	str	r1, [fp, #-28]	; 0xffffffe4
   146e8:	str	r2, [fp, #-32]	; 0xffffffe0
   146ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   146f0:	add	r3, r3, #4
   146f4:	str	r3, [fp, #-28]	; 0xffffffe4
   146f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146fc:	sub	r3, r3, #4
   14700:	str	r3, [fp, #-32]	; 0xffffffe0
   14704:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14708:	bl	137a8 <mmk_mock_params_begin@@Base>
   1470c:	str	r0, [fp, #-8]
   14710:	b	14770 <mmk_verify_times@@Base+0x1d4>
   14714:	ldr	r3, [fp, #-8]
   14718:	add	r3, r3, #4
   1471c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14720:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14724:	mov	r0, r3
   14728:	bl	149e0 <mmk_memcmp@@Base>
   1472c:	str	r0, [fp, #-12]
   14730:	ldr	r3, [fp, #-12]
   14734:	cmp	r3, #0
   14738:	bne	14760 <mmk_verify_times@@Base+0x1c4>
   1473c:	ldr	r3, [fp, #-8]
   14740:	str	r3, [fp, #-16]
   14744:	ldr	r3, [fp, #-16]
   14748:	ldr	r3, [r3]
   1474c:	add	r2, r3, #1
   14750:	ldr	r3, [fp, #-16]
   14754:	str	r2, [r3]
   14758:	mov	r3, #1
   1475c:	b	14780 <mmk_verify_times@@Base+0x1e4>
   14760:	ldr	r1, [fp, #-8]
   14764:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14768:	bl	137fc <mmk_mock_params_next@@Base>
   1476c:	str	r0, [fp, #-8]
   14770:	ldr	r3, [fp, #-8]
   14774:	cmp	r3, #0
   14778:	bne	14714 <mmk_verify_times@@Base+0x178>
   1477c:	mov	r3, #0
   14780:	mov	r0, r3
   14784:	sub	sp, fp, #4
   14788:	ldr	fp, [sp]
   1478c:	add	sp, sp, #4
   14790:	pop	{pc}		; (ldr pc, [sp], #4)

00014794 <mmk_verify_register_call@@Base>:
   14794:	str	r4, [sp, #-12]!
   14798:	str	fp, [sp, #4]
   1479c:	str	lr, [sp, #8]
   147a0:	add	fp, sp, #8
   147a4:	sub	sp, sp, #28
   147a8:	str	r0, [fp, #-24]	; 0xffffffe8
   147ac:	str	r1, [fp, #-28]	; 0xffffffe4
   147b0:	ldr	r4, [pc, #520]	; 149c0 <mmk_verify_register_call@@Base+0x22c>
   147b4:	add	r4, pc, r4
   147b8:	bl	14368 <mmk_ctx@@Base>
   147bc:	mov	r3, r0
   147c0:	mov	r0, r3
   147c4:	bl	13edc <mmk_stub_context@@Base>
   147c8:	str	r0, [fp, #-16]
   147cc:	ldr	r3, [fp, #-16]
   147d0:	ldr	r3, [r3, #8]
   147d4:	cmp	r3, #0
   147d8:	bne	14840 <mmk_verify_register_call@@Base+0xac>
   147dc:	mov	r0, #4096	; 0x1000
   147e0:	bl	14c0c <mmk_malloc@@Base>
   147e4:	mov	r2, r0
   147e8:	ldr	r3, [fp, #-16]
   147ec:	str	r2, [r3, #8]
   147f0:	ldr	r3, [fp, #-16]
   147f4:	ldr	r3, [r3, #8]
   147f8:	cmp	r3, #0
   147fc:	bne	14834 <mmk_verify_register_call@@Base+0xa0>
   14800:	ldr	r3, [pc, #444]	; 149c4 <mmk_verify_register_call@@Base+0x230>
   14804:	ldr	r3, [r4, r3]
   14808:	ldr	r0, [r3]
   1480c:	ldr	r3, [pc, #436]	; 149c8 <mmk_verify_register_call@@Base+0x234>
   14810:	add	r3, pc, r3
   14814:	str	r3, [sp]
   14818:	mov	r3, #79	; 0x4f
   1481c:	ldr	r2, [pc, #424]	; 149cc <mmk_verify_register_call@@Base+0x238>
   14820:	add	r2, pc, r2
   14824:	ldr	r1, [pc, #420]	; 149d0 <mmk_verify_register_call@@Base+0x23c>
   14828:	add	r1, pc, r1
   1482c:	bl	11250 <fprintf@plt>
   14830:	bl	11298 <abort@plt>
   14834:	ldr	r3, [fp, #-16]
   14838:	mov	r2, #4096	; 0x1000
   1483c:	str	r2, [r3, #16]
   14840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14844:	mov	r2, r3
   14848:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1484c:	ldr	r0, [fp, #-16]
   14850:	bl	146d0 <mmk_verify_times@@Base+0x134>
   14854:	mov	r3, r0
   14858:	cmp	r3, #0
   1485c:	bne	149a8 <mmk_verify_register_call@@Base+0x214>
   14860:	ldr	r3, [fp, #-16]
   14864:	ldr	r2, [r3, #12]
   14868:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1486c:	add	r3, r2, r3
   14870:	add	r2, r3, #4
   14874:	ldr	r3, [fp, #-16]
   14878:	ldr	r3, [r3, #16]
   1487c:	cmp	r2, r3
   14880:	bcc	1492c <mmk_verify_register_call@@Base+0x198>
   14884:	b	1489c <mmk_verify_register_call@@Base+0x108>
   14888:	ldr	r3, [fp, #-16]
   1488c:	ldr	r3, [r3, #16]
   14890:	add	r2, r3, #4096	; 0x1000
   14894:	ldr	r3, [fp, #-16]
   14898:	str	r2, [r3, #16]
   1489c:	ldr	r3, [fp, #-16]
   148a0:	ldr	r2, [r3, #12]
   148a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148a8:	add	r3, r2, r3
   148ac:	add	r2, r3, #4
   148b0:	ldr	r3, [fp, #-16]
   148b4:	ldr	r3, [r3, #16]
   148b8:	cmp	r2, r3
   148bc:	bcs	14888 <mmk_verify_register_call@@Base+0xf4>
   148c0:	ldr	r3, [fp, #-16]
   148c4:	ldr	r2, [r3, #8]
   148c8:	ldr	r3, [fp, #-16]
   148cc:	ldr	r3, [r3, #16]
   148d0:	mov	r1, r3
   148d4:	mov	r0, r2
   148d8:	bl	14c2c <mmk_realloc@@Base>
   148dc:	mov	r2, r0
   148e0:	ldr	r3, [fp, #-16]
   148e4:	str	r2, [r3, #8]
   148e8:	ldr	r3, [fp, #-16]
   148ec:	ldr	r3, [r3, #8]
   148f0:	cmp	r3, #0
   148f4:	bne	1492c <mmk_verify_register_call@@Base+0x198>
   148f8:	ldr	r3, [pc, #196]	; 149c4 <mmk_verify_register_call@@Base+0x230>
   148fc:	ldr	r3, [r4, r3]
   14900:	ldr	r0, [r3]
   14904:	ldr	r3, [pc, #200]	; 149d4 <mmk_verify_register_call@@Base+0x240>
   14908:	add	r3, pc, r3
   1490c:	str	r3, [sp]
   14910:	mov	r3, #91	; 0x5b
   14914:	ldr	r2, [pc, #188]	; 149d8 <mmk_verify_register_call@@Base+0x244>
   14918:	add	r2, pc, r2
   1491c:	ldr	r1, [pc, #184]	; 149dc <mmk_verify_register_call@@Base+0x248>
   14920:	add	r1, pc, r1
   14924:	bl	11250 <fprintf@plt>
   14928:	bl	11298 <abort@plt>
   1492c:	ldr	r3, [fp, #-16]
   14930:	ldr	r2, [r3, #8]
   14934:	ldr	r3, [fp, #-16]
   14938:	ldr	r3, [r3, #12]
   1493c:	add	r3, r2, r3
   14940:	sub	r1, fp, #28
   14944:	mov	r2, #4
   14948:	mov	r0, r3
   1494c:	bl	14a34 <mmk_memcpy@@Base>
   14950:	ldr	r3, [fp, #-16]
   14954:	ldr	r2, [r3, #8]
   14958:	ldr	r3, [fp, #-16]
   1495c:	ldr	r3, [r3, #12]
   14960:	add	r3, r3, #4
   14964:	add	r3, r2, r3
   14968:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1496c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14970:	mov	r0, r3
   14974:	bl	14a34 <mmk_memcpy@@Base>
   14978:	str	r0, [fp, #-20]	; 0xffffffec
   1497c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14980:	mov	r2, #1
   14984:	str	r2, [r3]
   14988:	ldr	r3, [fp, #-16]
   1498c:	ldr	r2, [r3, #12]
   14990:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14994:	add	r3, r2, r3
   14998:	add	r2, r3, #4
   1499c:	ldr	r3, [fp, #-16]
   149a0:	str	r2, [r3, #12]
   149a4:	b	149ac <mmk_verify_register_call@@Base+0x218>
   149a8:	nop	{0}
   149ac:	sub	sp, fp, #8
   149b0:	ldr	r4, [sp]
   149b4:	ldr	fp, [sp, #4]
   149b8:	add	sp, sp, #8
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	andeq	r1, r1, r4, asr #16
   149c4:	andeq	r0, r0, ip, ror r0
   149c8:			; <UNDEFINED> instruction: 0x00000db0
   149cc:	andeq	r0, r0, ip, lsr #26
   149d0:	andeq	r0, r0, r8, ror sp
   149d4:			; <UNDEFINED> instruction: 0x00000cb8
   149d8:	andeq	r0, r0, r4, lsr ip
   149dc:	andeq	r0, r0, r0, lsl #25

000149e0 <mmk_memcmp@@Base>:
   149e0:	cmp	r2, #0
   149e4:	beq	14a1c <mmk_memcmp@@Base+0x3c>
   149e8:	ldrb	r3, [r0]
   149ec:	ldrb	ip, [r1]
   149f0:	cmp	r3, ip
   149f4:	subeq	r2, r2, #1
   149f8:	addeq	r2, r1, r2
   149fc:	beq	14a14 <mmk_memcmp@@Base+0x34>
   14a00:	b	14a24 <mmk_memcmp@@Base+0x44>
   14a04:	ldrb	r3, [r0, #1]!
   14a08:	ldrb	ip, [r1, #1]!
   14a0c:	cmp	r3, ip
   14a10:	bne	14a24 <mmk_memcmp@@Base+0x44>
   14a14:	cmp	r1, r2
   14a18:	bne	14a04 <mmk_memcmp@@Base+0x24>
   14a1c:	mov	r0, #0
   14a20:	bx	lr
   14a24:	cmp	ip, r3
   14a28:	mvnhi	r0, #0
   14a2c:	movls	r0, #1
   14a30:	bx	lr

00014a34 <mmk_memcpy@@Base>:
   14a34:	cmp	r2, #0
   14a38:	beq	14a58 <mmk_memcpy@@Base+0x24>
   14a3c:	sub	r1, r1, #1
   14a40:	add	r2, r0, r2
   14a44:	mov	r3, r0
   14a48:	ldrb	ip, [r1, #1]!
   14a4c:	strb	ip, [r3], #1
   14a50:	cmp	r3, r2
   14a54:	bne	14a48 <mmk_memcpy@@Base+0x14>
   14a58:	bx	lr

00014a5c <mmk_strneq@@Base>:
   14a5c:	ldrb	r3, [r0]
   14a60:	cmp	r3, #0
   14a64:	beq	14af8 <mmk_strneq@@Base+0x9c>
   14a68:	ldrb	ip, [r1]
   14a6c:	cmp	ip, #0
   14a70:	beq	14af8 <mmk_strneq@@Base+0x9c>
   14a74:	cmp	r2, #0
   14a78:	beq	14ae8 <mmk_strneq@@Base+0x8c>
   14a7c:	cmp	r3, ip
   14a80:	bne	14af0 <mmk_strneq@@Base+0x94>
   14a84:	add	r3, r1, #1
   14a88:	push	{lr}		; (str lr, [sp, #-4]!)
   14a8c:	b	14aac <mmk_strneq@@Base+0x50>
   14a90:	ldrb	lr, [r3], #1
   14a94:	cmp	lr, #0
   14a98:	beq	14ac0 <mmk_strneq@@Base+0x64>
   14a9c:	cmp	r2, #0
   14aa0:	beq	14ad8 <mmk_strneq@@Base+0x7c>
   14aa4:	cmp	ip, lr
   14aa8:	bne	14ae0 <mmk_strneq@@Base+0x84>
   14aac:	ldrb	ip, [r0, #1]!
   14ab0:	sub	r2, r2, #1
   14ab4:	mov	r1, r3
   14ab8:	cmp	ip, #0
   14abc:	bne	14a90 <mmk_strneq@@Base+0x34>
   14ac0:	cmp	r2, #0
   14ac4:	beq	14ad8 <mmk_strneq@@Base+0x7c>
   14ac8:	ldrb	r0, [r1]
   14acc:	clz	r0, r0
   14ad0:	lsr	r0, r0, #5
   14ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad8:	mov	r0, #1
   14adc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae0:	mov	r0, #0
   14ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae8:	mov	r0, #1
   14aec:	bx	lr
   14af0:	mov	r0, #0
   14af4:	bx	lr
   14af8:	cmp	r2, #0
   14afc:	beq	14ae8 <mmk_strneq@@Base+0x8c>
   14b00:	ldrb	r0, [r1]
   14b04:	clz	r0, r0
   14b08:	lsr	r0, r0, #5
   14b0c:	bx	lr

00014b10 <mmk_strchr@@Base>:
   14b10:	ldrb	r2, [r0]
   14b14:	cmp	r2, #0
   14b18:	beq	14b44 <mmk_strchr@@Base+0x34>
   14b1c:	cmp	r1, r2
   14b20:	bne	14b30 <mmk_strchr@@Base+0x20>
   14b24:	b	14b4c <mmk_strchr@@Base+0x3c>
   14b28:	cmp	r3, r1
   14b2c:	beq	14b48 <mmk_strchr@@Base+0x38>
   14b30:	ldrb	r3, [r0, #1]!
   14b34:	cmp	r3, #0
   14b38:	bne	14b28 <mmk_strchr@@Base+0x18>
   14b3c:	mov	r0, r3
   14b40:	bx	lr
   14b44:	mov	r0, r2
   14b48:	bx	lr
   14b4c:	bx	lr

00014b50 <mmk_strcpy@@Base>:
   14b50:	ldrb	r3, [r1]
   14b54:	mov	r2, r0
   14b58:	cmp	r3, #0
   14b5c:	beq	14b70 <mmk_strcpy@@Base+0x20>
   14b60:	strb	r3, [r2], #1
   14b64:	ldrb	r3, [r1, #1]!
   14b68:	cmp	r3, #0
   14b6c:	bne	14b60 <mmk_strcpy@@Base+0x10>
   14b70:	mov	r3, #0
   14b74:	mov	r0, r2
   14b78:	strb	r3, [r2]
   14b7c:	bx	lr

00014b80 <mmk_strncpy@@Base>:
   14b80:	ldrb	ip, [r1]
   14b84:	mov	r3, r0
   14b88:	cmp	r2, #0
   14b8c:	cmpne	ip, #0
   14b90:	beq	14bac <mmk_strncpy@@Base+0x2c>
   14b94:	add	r2, r0, r2
   14b98:	strb	ip, [r3], #1
   14b9c:	ldrb	ip, [r1, #1]!
   14ba0:	cmp	r3, r2
   14ba4:	cmpne	ip, #0
   14ba8:	bne	14b98 <mmk_strncpy@@Base+0x18>
   14bac:	mov	r2, #0
   14bb0:	mov	r0, r3
   14bb4:	strb	r2, [r3]
   14bb8:	bx	lr

00014bbc <mmk_strlen@@Base>:
   14bbc:	ldrb	r3, [r0]
   14bc0:	cmp	r3, #0
   14bc4:	beq	14be4 <mmk_strlen@@Base+0x28>
   14bc8:	mov	r3, r0
   14bcc:	rsb	r1, r0, #1
   14bd0:	add	r0, r3, r1
   14bd4:	ldrb	r2, [r3, #1]!
   14bd8:	cmp	r2, #0
   14bdc:	bne	14bd0 <mmk_strlen@@Base+0x14>
   14be0:	bx	lr
   14be4:	mov	r0, r3
   14be8:	bx	lr

00014bec <mmk_isspace@@Base>:
   14bec:	sub	r3, r0, #9
   14bf0:	cmp	r0, #32
   14bf4:	cmpne	r3, #1
   14bf8:	subhi	r0, r0, #13
   14bfc:	clzhi	r0, r0
   14c00:	lsrhi	r0, r0, #5
   14c04:	movls	r0, #1
   14c08:	bx	lr

00014c0c <mmk_malloc@@Base>:
   14c0c:	ldr	r3, [pc, #16]	; 14c24 <mmk_malloc@@Base+0x18>
   14c10:	ldr	r2, [pc, #16]	; 14c28 <mmk_malloc@@Base+0x1c>
   14c14:	add	r3, pc, r3
   14c18:	ldr	r3, [r3, r2]
   14c1c:	ldr	r3, [r3]
   14c20:	bx	r3
   14c24:	andeq	r1, r1, r4, ror #7
   14c28:	muleq	r0, ip, r0

00014c2c <mmk_realloc@@Base>:
   14c2c:	ldr	r3, [pc, #16]	; 14c44 <mmk_realloc@@Base+0x18>
   14c30:	ldr	r2, [pc, #16]	; 14c48 <mmk_realloc@@Base+0x1c>
   14c34:	add	r3, pc, r3
   14c38:	ldr	r3, [r3, r2]
   14c3c:	ldr	r3, [r3]
   14c40:	bx	r3
   14c44:	andeq	r1, r1, r4, asr #7
   14c48:	andeq	r0, r0, ip, lsl #1

00014c4c <mmk_free@@Base>:
   14c4c:	ldr	r3, [pc, #16]	; 14c64 <mmk_free@@Base+0x18>
   14c50:	ldr	r2, [pc, #16]	; 14c68 <mmk_free@@Base+0x1c>
   14c54:	add	r3, pc, r3
   14c58:	ldr	r3, [r3, r2]
   14c5c:	ldr	r3, [r3]
   14c60:	bx	r3
   14c64:	andeq	r1, r1, r4, lsr #7
   14c68:	muleq	r0, r8, r0

00014c6c <mmk_init_vital_functions@@Base>:
   14c6c:	strd	r4, [sp, #-12]!
   14c70:	mov	r5, r0
   14c74:	mov	r0, #0
   14c78:	str	lr, [sp, #8]
   14c7c:	sub	sp, sp, #12
   14c80:	bl	11208 <malloc@plt>
   14c84:	mov	r1, #0
   14c88:	ldr	r4, [pc, #288]	; 14db0 <mmk_init_vital_functions@@Base+0x144>
   14c8c:	bl	111e4 <realloc@plt>
   14c90:	bl	111c0 <free@plt>
   14c94:	ldr	r1, [pc, #280]	; 14db4 <mmk_init_vital_functions@@Base+0x148>
   14c98:	mov	r0, r5
   14c9c:	add	r4, pc, r4
   14ca0:	add	r1, pc, r1
   14ca4:	bl	13e74 <plt_get_real_fn@@Base>
   14ca8:	ldr	r3, [pc, #264]	; 14db8 <mmk_init_vital_functions@@Base+0x14c>
   14cac:	cmp	r0, #0
   14cb0:	ldr	r3, [r4, r3]
   14cb4:	str	r0, [r3]
   14cb8:	beq	14d14 <mmk_init_vital_functions@@Base+0xa8>
   14cbc:	ldr	r1, [pc, #248]	; 14dbc <mmk_init_vital_functions@@Base+0x150>
   14cc0:	mov	r0, r5
   14cc4:	add	r1, pc, r1
   14cc8:	bl	13e74 <plt_get_real_fn@@Base>
   14ccc:	ldr	r3, [pc, #236]	; 14dc0 <mmk_init_vital_functions@@Base+0x154>
   14cd0:	cmp	r0, #0
   14cd4:	ldr	r3, [r4, r3]
   14cd8:	str	r0, [r3]
   14cdc:	beq	14d7c <mmk_init_vital_functions@@Base+0x110>
   14ce0:	ldr	r1, [pc, #220]	; 14dc4 <mmk_init_vital_functions@@Base+0x158>
   14ce4:	mov	r0, r5
   14ce8:	add	r1, pc, r1
   14cec:	bl	13e74 <plt_get_real_fn@@Base>
   14cf0:	ldr	r3, [pc, #208]	; 14dc8 <mmk_init_vital_functions@@Base+0x15c>
   14cf4:	cmp	r0, #0
   14cf8:	ldr	r3, [r4, r3]
   14cfc:	str	r0, [r3]
   14d00:	beq	14d48 <mmk_init_vital_functions@@Base+0xdc>
   14d04:	add	sp, sp, #12
   14d08:	ldrd	r4, [sp]
   14d0c:	add	sp, sp, #8
   14d10:	pop	{pc}		; (ldr pc, [sp], #4)
   14d14:	ldr	r1, [pc, #176]	; 14dcc <mmk_init_vital_functions@@Base+0x160>
   14d18:	mov	r3, #88	; 0x58
   14d1c:	ldr	r0, [pc, #172]	; 14dd0 <mmk_init_vital_functions@@Base+0x164>
   14d20:	ldr	r2, [pc, #172]	; 14dd4 <mmk_init_vital_functions@@Base+0x168>
   14d24:	add	r1, pc, r1
   14d28:	ldr	r0, [r4, r0]
   14d2c:	str	r1, [sp]
   14d30:	ldr	r1, [pc, #160]	; 14dd8 <mmk_init_vital_functions@@Base+0x16c>
   14d34:	add	r2, pc, r2
   14d38:	ldr	r0, [r0]
   14d3c:	add	r1, pc, r1
   14d40:	bl	11250 <fprintf@plt>
   14d44:	bl	11298 <abort@plt>
   14d48:	ldr	r1, [pc, #140]	; 14ddc <mmk_init_vital_functions@@Base+0x170>
   14d4c:	mov	r3, #90	; 0x5a
   14d50:	ldr	r0, [pc, #120]	; 14dd0 <mmk_init_vital_functions@@Base+0x164>
   14d54:	ldr	r2, [pc, #132]	; 14de0 <mmk_init_vital_functions@@Base+0x174>
   14d58:	add	r1, pc, r1
   14d5c:	ldr	r0, [r4, r0]
   14d60:	str	r1, [sp]
   14d64:	ldr	r1, [pc, #120]	; 14de4 <mmk_init_vital_functions@@Base+0x178>
   14d68:	add	r2, pc, r2
   14d6c:	ldr	r0, [r0]
   14d70:	add	r1, pc, r1
   14d74:	bl	11250 <fprintf@plt>
   14d78:	bl	11298 <abort@plt>
   14d7c:	ldr	r1, [pc, #100]	; 14de8 <mmk_init_vital_functions@@Base+0x17c>
   14d80:	mov	r3, #89	; 0x59
   14d84:	ldr	r0, [pc, #68]	; 14dd0 <mmk_init_vital_functions@@Base+0x164>
   14d88:	ldr	r2, [pc, #92]	; 14dec <mmk_init_vital_functions@@Base+0x180>
   14d8c:	add	r1, pc, r1
   14d90:	ldr	r0, [r4, r0]
   14d94:	str	r1, [sp]
   14d98:	ldr	r1, [pc, #80]	; 14df0 <mmk_init_vital_functions@@Base+0x184>
   14d9c:	add	r2, pc, r2
   14da0:	ldr	r0, [r0]
   14da4:	add	r1, pc, r1
   14da8:	bl	11250 <fprintf@plt>
   14dac:	bl	11298 <abort@plt>
   14db0:	andeq	r1, r1, ip, asr r3
   14db4:	andeq	r0, r0, r0, lsr r9
   14db8:	muleq	r0, ip, r0
   14dbc:	andeq	r0, r0, r0, lsr #19
   14dc0:	andeq	r0, r0, ip, lsl #1
   14dc4:			; <UNDEFINED> instruction: 0x000009bc
   14dc8:	muleq	r0, r8, r0
   14dcc:	andeq	r0, r0, r8, lsl #18
   14dd0:	andeq	r0, r0, ip, ror r0
   14dd4:	andeq	r0, r0, r4, lsr #17
   14dd8:	andeq	r0, r0, r0, asr #15
   14ddc:	andeq	r0, r0, r4, asr r9
   14de0:	andeq	r0, r0, r0, ror r8
   14de4:	andeq	r0, r0, ip, lsl #15
   14de8:	andeq	r0, r0, r0, ror #17
   14dec:	andeq	r0, r0, ip, lsr r8
   14df0:	andeq	r0, r0, r8, asr r7

00014df4 <mmk_when_init@@Base>:
   14df4:	str	fp, [sp, #-8]!
   14df8:	str	lr, [sp, #4]
   14dfc:	add	fp, sp, #4
   14e00:	sub	sp, sp, #8
   14e04:	str	r0, [fp, #-8]
   14e08:	ldr	r3, [pc, #44]	; 14e3c <mmk_when_init@@Base+0x48>
   14e0c:	add	r3, pc, r3
   14e10:	mov	r0, r3
   14e14:	bl	11280 <__tls_get_addr@plt>
   14e18:	mov	r1, r0
   14e1c:	ldr	r2, [pc, #28]	; 14e40 <mmk_when_init@@Base+0x4c>
   14e20:	ldr	r3, [fp, #-8]
   14e24:	str	r3, [r1, r2]
   14e28:	nop	{0}
   14e2c:	sub	sp, fp, #4
   14e30:	ldr	fp, [sp]
   14e34:	add	sp, sp, #4
   14e38:	pop	{pc}		; (ldr pc, [sp], #4)
   14e3c:	andeq	r1, r1, r0, asr r2
   14e40:	andeq	r0, r0, r0, lsl r0

00014e44 <mmk_when_get_result@@Base>:
   14e44:	str	fp, [sp, #-8]!
   14e48:	str	lr, [sp, #4]
   14e4c:	add	fp, sp, #4
   14e50:	ldr	r3, [pc, #40]	; 14e80 <mmk_when_get_result@@Base+0x3c>
   14e54:	add	r3, pc, r3
   14e58:	mov	r0, r3
   14e5c:	bl	11280 <__tls_get_addr@plt>
   14e60:	mov	r2, r0
   14e64:	ldr	r3, [pc, #24]	; 14e84 <mmk_when_get_result@@Base+0x40>
   14e68:	ldr	r3, [r2, r3]
   14e6c:	mov	r0, r3
   14e70:	sub	sp, fp, #4
   14e74:	ldr	fp, [sp]
   14e78:	add	sp, sp, #4
   14e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e80:	andeq	r1, r1, r8, lsl #4
   14e84:	andeq	r0, r0, r0, lsl r0

00014e88 <mmk_when_impl@@Base>:
   14e88:	str	fp, [sp, #-8]!
   14e8c:	str	lr, [sp, #4]
   14e90:	add	fp, sp, #4
   14e94:	sub	sp, sp, #16
   14e98:	str	r0, [fp, #-16]
   14e9c:	str	r1, [fp, #-20]	; 0xffffffec
   14ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea4:	str	r3, [fp, #-8]
   14ea8:	bl	133e8 <mmk_matcher_ctx@@Base>
   14eac:	mov	r2, r0
   14eb0:	ldr	r3, [fp, #-8]
   14eb4:	str	r2, [r3]
   14eb8:	ldr	r3, [fp, #-16]
   14ebc:	ldr	r2, [r3]
   14ec0:	ldr	r3, [fp, #-8]
   14ec4:	str	r2, [r3, #4]
   14ec8:	ldr	r3, [fp, #-16]
   14ecc:	ldr	r2, [fp, #-8]
   14ed0:	str	r2, [r3]
   14ed4:	nop	{0}
   14ed8:	sub	sp, fp, #4
   14edc:	ldr	fp, [sp]
   14ee0:	add	sp, sp, #4
   14ee4:	pop	{pc}		; (ldr pc, [sp], #4)

00014ee8 <mmk_trampoline@@Base>:
   14ee8:	sub	ip, pc, #8
   14eec:	push	{r0, r1, r2, r3}
   14ef0:	push	{ip, lr}
   14ef4:	ldr	r0, [ip, #-8]
   14ef8:	ldr	ip, [r0, #4]
   14efc:	blx	ip
   14f00:	pop	{ip, lr}
   14f04:	push	{ip, lr}
   14f08:	ldr	ip, [ip, #-8]
   14f0c:	ldr	ip, [ip]
   14f10:	blx	ip
   14f14:	cmp	r0, #0
   14f18:	bne	14f28 <mmk_trampoline@@Base+0x40>
   14f1c:	pop	{ip, lr}
   14f20:	pop	{r0, r1, r2, r3}
   14f24:	ldr	pc, [ip, #-4]
   14f28:	pop	{ip, lr}
   14f2c:	pop	{r0, r1, r2, r3}
   14f30:	push	{ip, lr}
   14f34:	ldr	ip, [ip, #-8]
   14f38:	ldr	ip, [ip, #8]
   14f3c:	blx	ip
   14f40:	pop	{ip, pc}

00014f44 <mmk_trampoline_end@@Base>:
   14f44:	nop			; (mov r0, r0)

00014f48 <__libc_csu_init@@Base>:
   14f48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f4c:	mov	r7, r0
   14f50:	ldr	r6, [pc, #72]	; 14fa0 <__libc_csu_init@@Base+0x58>
   14f54:	ldr	r5, [pc, #72]	; 14fa4 <__libc_csu_init@@Base+0x5c>
   14f58:	add	r6, pc, r6
   14f5c:	add	r5, pc, r5
   14f60:	sub	r6, r6, r5
   14f64:	mov	r8, r1
   14f68:	mov	r9, r2
   14f6c:	bl	1117c <strstr@plt-0x20>
   14f70:	asrs	r6, r6, #2
   14f74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f78:	mov	r4, #0
   14f7c:	add	r4, r4, #1
   14f80:	ldr	r3, [r5], #4
   14f84:	mov	r2, r9
   14f88:	mov	r1, r8
   14f8c:	mov	r0, r7
   14f90:	blx	r3
   14f94:	cmp	r6, r4
   14f98:	bne	14f7c <__libc_csu_init@@Base+0x34>
   14f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fa0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14fa4:	muleq	r1, r4, pc	; <UNPREDICTABLE>

00014fa8 <__libc_csu_fini@@Base>:
   14fa8:	bx	lr

Disassembly of section .fini:

00014fac <.fini>:
   14fac:	push	{r3, lr}
   14fb0:	pop	{r3, pc}
