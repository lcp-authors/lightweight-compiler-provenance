
../repos/prog2/0.4:     file format elf32-littlearm


Disassembly of section .init:

00010644 <.init>:
   10644:	push	{r3, lr}
   10648:	bl	106e8 <_start@@Base+0x3c>
   1064c:	pop	{r3, pc}

Disassembly of section .plt:

00010650 <printf@plt-0x14>:
   10650:	push	{lr}		; (str lr, [sp, #-4]!)
   10654:	ldr	lr, [pc, #4]	; 10660 <printf@plt-0x4>
   10658:	add	lr, pc, lr
   1065c:	ldr	pc, [lr, #8]!
   10660:	andeq	r0, r1, r0, lsr #19

00010664 <printf@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #16, 20	; 0x10000
   1066c:	ldr	pc, [ip, #2464]!	; 0x9a0

00010670 <malloc@plt>:
   10670:	add	ip, pc, #0, 12
   10674:	add	ip, ip, #16, 20	; 0x10000
   10678:	ldr	pc, [ip, #2456]!	; 0x998

0001067c <__libc_start_main@plt>:
   1067c:	add	ip, pc, #0, 12
   10680:	add	ip, ip, #16, 20	; 0x10000
   10684:	ldr	pc, [ip, #2448]!	; 0x990

00010688 <__gmon_start__@plt>:
   10688:	add	ip, pc, #0, 12
   1068c:	add	ip, ip, #16, 20	; 0x10000
   10690:	ldr	pc, [ip, #2440]!	; 0x988

00010694 <__isoc99_scanf@plt>:
   10694:	add	ip, pc, #0, 12
   10698:	add	ip, ip, #16, 20	; 0x10000
   1069c:	ldr	pc, [ip, #2432]!	; 0x980

000106a0 <abort@plt>:
   106a0:	add	ip, pc, #0, 12
   106a4:	add	ip, ip, #16, 20	; 0x10000
   106a8:	ldr	pc, [ip, #2424]!	; 0x978

Disassembly of section .text:

000106ac <_start@@Base>:
   106ac:	mov	fp, #0
   106b0:	mov	lr, #0
   106b4:	pop	{r1}		; (ldr r1, [sp], #4)
   106b8:	mov	r2, sp
   106bc:	push	{r2}		; (str r2, [sp, #-4]!)
   106c0:	push	{r0}		; (str r0, [sp, #-4]!)
   106c4:	ldr	ip, [pc, #16]	; 106dc <_start@@Base+0x30>
   106c8:	push	{ip}		; (str ip, [sp, #-4]!)
   106cc:	ldr	r0, [pc, #12]	; 106e0 <_start@@Base+0x34>
   106d0:	ldr	r3, [pc, #12]	; 106e4 <_start@@Base+0x38>
   106d4:	bl	1067c <__libc_start_main@plt>
   106d8:	bl	106a0 <abort@plt>
   106dc:	andeq	r0, r1, r0, lsr #20
   106e0:	andeq	r0, r1, ip, lsr #16
   106e4:	andeq	r0, r1, r0, asr #19
   106e8:	ldr	r3, [pc, #20]	; 10704 <_start@@Base+0x58>
   106ec:	ldr	r2, [pc, #20]	; 10708 <_start@@Base+0x5c>
   106f0:	add	r3, pc, r3
   106f4:	ldr	r2, [r3, r2]
   106f8:	cmp	r2, #0
   106fc:	bxeq	lr
   10700:	b	10688 <__gmon_start__@plt>
   10704:	andeq	r0, r1, r8, lsl #18
   10708:	andeq	r0, r0, r4, lsr #32
   1070c:	ldr	r0, [pc, #24]	; 1072c <_start@@Base+0x80>
   10710:	ldr	r3, [pc, #24]	; 10730 <_start@@Base+0x84>
   10714:	cmp	r3, r0
   10718:	bxeq	lr
   1071c:	ldr	r3, [pc, #16]	; 10734 <_start@@Base+0x88>
   10720:	cmp	r3, #0
   10724:	bxeq	lr
   10728:	bx	r3
   1072c:	andeq	r1, r2, r0, lsr r0
   10730:	andeq	r1, r2, r0, lsr r0
   10734:	andeq	r0, r0, r0
   10738:	ldr	r0, [pc, #36]	; 10764 <_start@@Base+0xb8>
   1073c:	ldr	r1, [pc, #36]	; 10768 <_start@@Base+0xbc>
   10740:	sub	r1, r1, r0
   10744:	asr	r1, r1, #2
   10748:	add	r1, r1, r1, lsr #31
   1074c:	asrs	r1, r1, #1
   10750:	bxeq	lr
   10754:	ldr	r3, [pc, #16]	; 1076c <_start@@Base+0xc0>
   10758:	cmp	r3, #0
   1075c:	bxeq	lr
   10760:	bx	r3
   10764:	andeq	r1, r2, r0, lsr r0
   10768:	andeq	r1, r2, r0, lsr r0
   1076c:	andeq	r0, r0, r0
   10770:	push	{r4, lr}
   10774:	ldr	r4, [pc, #24]	; 10794 <_start@@Base+0xe8>
   10778:	ldrb	r3, [r4]
   1077c:	cmp	r3, #0
   10780:	popne	{r4, pc}
   10784:	bl	1070c <_start@@Base+0x60>
   10788:	mov	r3, #1
   1078c:	strb	r3, [r4]
   10790:	pop	{r4, pc}
   10794:	andeq	r1, r2, r0, lsr r0
   10798:	b	10738 <_start@@Base+0x8c>

0001079c <ordenado@@Base>:
   1079c:	sub	sp, sp, #20
   107a0:	str	r0, [sp, #12]
   107a4:	str	r1, [sp, #8]
   107a8:	ldr	r0, [sp, #12]
   107ac:	ldr	r0, [r0]
   107b0:	str	r0, [sp]
   107b4:	movw	r0, #1
   107b8:	str	r0, [sp, #4]
   107bc:	ldr	r0, [sp, #4]
   107c0:	ldr	r1, [sp, #8]
   107c4:	cmp	r0, r1
   107c8:	bge	10818 <ordenado@@Base+0x7c>
   107cc:	ldr	r0, [sp, #12]
   107d0:	ldr	r1, [sp, #4]
   107d4:	add	r0, r0, r1, lsl #2
   107d8:	ldr	r0, [r0]
   107dc:	ldr	r1, [sp]
   107e0:	cmp	r0, r1
   107e4:	bge	107f4 <ordenado@@Base+0x58>
   107e8:	movw	r0, #0
   107ec:	str	r0, [sp, #16]
   107f0:	b	10820 <ordenado@@Base+0x84>
   107f4:	ldr	r0, [sp, #12]
   107f8:	ldr	r1, [sp, #4]
   107fc:	add	r0, r0, r1, lsl #2
   10800:	ldr	r0, [r0]
   10804:	str	r0, [sp]
   10808:	ldr	r0, [sp, #4]
   1080c:	add	r0, r0, #1
   10810:	str	r0, [sp, #4]
   10814:	b	107bc <ordenado@@Base+0x20>
   10818:	movw	r0, #1
   1081c:	str	r0, [sp, #16]
   10820:	ldr	r0, [sp, #16]
   10824:	add	sp, sp, #20
   10828:	bx	lr

0001082c <main@@Base>:
   1082c:	push	{fp, lr}
   10830:	mov	fp, sp
   10834:	sub	sp, sp, #32
   10838:	ldr	r0, [pc, #352]	; 109a0 <main@@Base+0x174>
   1083c:	add	r0, pc, r0
   10840:	movw	r1, #0
   10844:	str	r1, [fp, #-4]
   10848:	bl	10664 <printf@plt>
   1084c:	ldr	r1, [pc, #328]	; 1099c <main@@Base+0x170>
   10850:	add	r1, pc, r1
   10854:	str	r0, [sp, #12]
   10858:	mov	r0, r1
   1085c:	add	r1, sp, #16
   10860:	bl	10694 <__isoc99_scanf@plt>
   10864:	ldr	r1, [sp, #16]
   10868:	cmp	r1, #100	; 0x64
   1086c:	ble	10884 <main@@Base+0x58>
   10870:	ldr	r0, [pc, #300]	; 109a4 <main@@Base+0x178>
   10874:	add	r0, pc, r0
   10878:	bl	10664 <printf@plt>
   1087c:	movw	r1, #100	; 0x64
   10880:	str	r1, [sp, #16]
   10884:	ldr	r0, [sp, #16]
   10888:	lsl	r0, r0, #2
   1088c:	bl	10670 <malloc@plt>
   10890:	str	r0, [fp, #-12]
   10894:	movw	r0, #0
   10898:	str	r0, [fp, #-8]
   1089c:	ldr	r0, [fp, #-8]
   108a0:	ldr	r1, [sp, #16]
   108a4:	cmp	r0, r1
   108a8:	bge	108fc <main@@Base+0xd0>
   108ac:	ldr	r0, [pc, #260]	; 109b8 <main@@Base+0x18c>
   108b0:	add	r0, pc, r0
   108b4:	ldr	r1, [fp, #-8]
   108b8:	add	r1, r1, #1
   108bc:	ldr	r2, [pc, #248]	; 109bc <main@@Base+0x190>
   108c0:	add	r2, pc, r2
   108c4:	str	r0, [sp, #8]
   108c8:	mov	r0, r2
   108cc:	bl	10664 <printf@plt>
   108d0:	ldr	r1, [fp, #-12]
   108d4:	ldr	r2, [fp, #-8]
   108d8:	add	r1, r1, r2, lsl #2
   108dc:	ldr	r2, [sp, #8]
   108e0:	str	r0, [sp, #4]
   108e4:	mov	r0, r2
   108e8:	bl	10694 <__isoc99_scanf@plt>
   108ec:	ldr	r0, [fp, #-8]
   108f0:	add	r0, r0, #1
   108f4:	str	r0, [fp, #-8]
   108f8:	b	1089c <main@@Base+0x70>
   108fc:	ldr	r0, [fp, #-12]
   10900:	ldr	r1, [sp, #16]
   10904:	bl	1079c <ordenado@@Base>
   10908:	cmp	r0, #0
   1090c:	beq	10984 <main@@Base+0x158>
   10910:	ldr	r0, [pc, #148]	; 109ac <main@@Base+0x180>
   10914:	add	r0, pc, r0
   10918:	bl	10664 <printf@plt>
   1091c:	ldr	r1, [sp, #16]
   10920:	sub	r1, r1, #1
   10924:	str	r1, [fp, #-8]
   10928:	ldr	r0, [fp, #-8]
   1092c:	cmp	r0, #0
   10930:	ble	10964 <main@@Base+0x138>
   10934:	ldr	r0, [pc, #120]	; 109b4 <main@@Base+0x188>
   10938:	add	r0, pc, r0
   1093c:	ldr	r1, [fp, #-12]
   10940:	ldr	r2, [fp, #-8]
   10944:	add	r1, r1, r2, lsl #2
   10948:	ldr	r1, [r1]
   1094c:	bl	10664 <printf@plt>
   10950:	ldr	r0, [fp, #-8]
   10954:	mvn	r1, #0
   10958:	add	r0, r0, r1
   1095c:	str	r0, [fp, #-8]
   10960:	b	10928 <main@@Base+0xfc>
   10964:	ldr	r0, [pc, #68]	; 109b0 <main@@Base+0x184>
   10968:	add	r0, pc, r0
   1096c:	ldr	r1, [fp, #-12]
   10970:	ldr	r2, [fp, #-8]
   10974:	add	r1, r1, r2, lsl #2
   10978:	ldr	r1, [r1]
   1097c:	bl	10664 <printf@plt>
   10980:	b	10990 <main@@Base+0x164>
   10984:	ldr	r0, [pc, #28]	; 109a8 <main@@Base+0x17c>
   10988:	add	r0, pc, r0
   1098c:	bl	10664 <printf@plt>
   10990:	movw	r0, #0
   10994:	mov	sp, fp
   10998:	pop	{fp, pc}
   1099c:	strdeq	r0, [r0], -r9
   109a0:	andeq	r0, r0, ip, ror #3
   109a4:	ldrdeq	r0, [r0], -r8
   109a8:	andeq	r0, r0, r5, asr r1
   109ac:	andeq	r0, r0, sp, ror r1
   109b0:	andeq	r0, r0, r0, ror r1
   109b4:	muleq	r0, ip, r1
   109b8:	muleq	r0, r9, r1
   109bc:			; <UNDEFINED> instruction: 0x000001b9

000109c0 <__libc_csu_init@@Base>:
   109c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109c4:	mov	r7, r0
   109c8:	ldr	r6, [pc, #72]	; 10a18 <__libc_csu_init@@Base+0x58>
   109cc:	ldr	r5, [pc, #72]	; 10a1c <__libc_csu_init@@Base+0x5c>
   109d0:	add	r6, pc, r6
   109d4:	add	r5, pc, r5
   109d8:	sub	r6, r6, r5
   109dc:	mov	r8, r1
   109e0:	mov	r9, r2
   109e4:	bl	10644 <printf@plt-0x20>
   109e8:	asrs	r6, r6, #2
   109ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109f0:	mov	r4, #0
   109f4:	add	r4, r4, #1
   109f8:	ldr	r3, [r5], #4
   109fc:	mov	r2, r9
   10a00:	mov	r1, r8
   10a04:	mov	r0, r7
   10a08:	blx	r3
   10a0c:	cmp	r6, r4
   10a10:	bne	109f4 <__libc_csu_init@@Base+0x34>
   10a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a18:	andeq	r0, r1, r4, lsr r5
   10a1c:	andeq	r0, r1, ip, lsr #10

00010a20 <__libc_csu_fini@@Base>:
   10a20:	bx	lr

Disassembly of section .fini:

00010a24 <.fini>:
   10a24:	push	{r3, lr}
   10a28:	pop	{r3, pc}
