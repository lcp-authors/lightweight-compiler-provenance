
../repos/charybdis/tools/.libs/charybdis-mkpasswd:     file format elf32-littlearm


Disassembly of section .init:

00010650 <.init>:
   10650:	push	{r3, lr}
   10654:	bl	107b4 <sprintf@plt+0x48>
   10658:	pop	{r3, pc}

Disassembly of section .plt:

0001065c <open@plt-0x14>:
   1065c:	push	{lr}		; (str lr, [sp, #-4]!)
   10660:	ldr	lr, [pc, #4]	; 1066c <open@plt-0x4>
   10664:	add	lr, pc, lr
   10668:	ldr	pc, [lr, #8]!
   1066c:	muleq	r1, r4, r9

00010670 <open@plt>:
   10670:	add	ip, pc, #0, 12
   10674:	add	ip, ip, #69632	; 0x11000
   10678:	ldr	pc, [ip, #2452]!	; 0x994

0001067c <abort@plt>:
   1067c:	add	ip, pc, #0, 12
   10680:	add	ip, ip, #69632	; 0x11000
   10684:	ldr	pc, [ip, #2444]!	; 0x98c

00010688 <srand@plt>:
   10688:	add	ip, pc, #0, 12
   1068c:	add	ip, ip, #69632	; 0x11000
   10690:	ldr	pc, [ip, #2436]!	; 0x984

00010694 <__libc_start_main@plt>:
   10694:	add	ip, pc, #0, 12
   10698:	add	ip, ip, #69632	; 0x11000
   1069c:	ldr	pc, [ip, #2428]!	; 0x97c

000106a0 <__gmon_start__@plt>:
   106a0:	add	ip, pc, #0, 12
   106a4:	add	ip, ip, #69632	; 0x11000
   106a8:	ldr	pc, [ip, #2420]!	; 0x974

000106ac <getpass@plt>:
   106ac:	add	ip, pc, #0, 12
   106b0:	add	ip, ip, #69632	; 0x11000
   106b4:	ldr	pc, [ip, #2412]!	; 0x96c

000106b8 <calloc@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #69632	; 0x11000
   106c0:	ldr	pc, [ip, #2404]!	; 0x964

000106c4 <free@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #69632	; 0x11000
   106cc:	ldr	pc, [ip, #2396]!	; 0x95c

000106d0 <read@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #69632	; 0x11000
   106d8:	ldr	pc, [ip, #2388]!	; 0x954

000106dc <strlen@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #69632	; 0x11000
   106e4:	ldr	pc, [ip, #2380]!	; 0x94c

000106e8 <getopt@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #69632	; 0x11000
   106f0:	ldr	pc, [ip, #2372]!	; 0x944

000106f4 <printf@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #69632	; 0x11000
   106fc:	ldr	pc, [ip, #2364]!	; 0x93c

00010700 <atoi@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #69632	; 0x11000
   10708:	ldr	pc, [ip, #2356]!	; 0x934

0001070c <fwrite@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #69632	; 0x11000
   10714:	ldr	pc, [ip, #2348]!	; 0x92c

00010718 <time@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #69632	; 0x11000
   10720:	ldr	pc, [ip, #2340]!	; 0x924

00010724 <strdup@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #69632	; 0x11000
   1072c:	ldr	pc, [ip, #2332]!	; 0x91c

00010730 <rb_crypt@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #69632	; 0x11000
   10738:	ldr	pc, [ip, #2324]!	; 0x914

0001073c <puts@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #69632	; 0x11000
   10744:	ldr	pc, [ip, #2316]!	; 0x90c

00010748 <rand@plt>:
   10748:	add	ip, pc, #0, 12
   1074c:	add	ip, ip, #69632	; 0x11000
   10750:	ldr	pc, [ip, #2308]!	; 0x904

00010754 <strcmp@plt>:
   10754:	add	ip, pc, #0, 12
   10758:	add	ip, ip, #69632	; 0x11000
   1075c:	ldr	pc, [ip, #2300]!	; 0x8fc

00010760 <exit@plt>:
   10760:	add	ip, pc, #0, 12
   10764:	add	ip, ip, #69632	; 0x11000
   10768:	ldr	pc, [ip, #2292]!	; 0x8f4

0001076c <sprintf@plt>:
   1076c:	add	ip, pc, #0, 12
   10770:	add	ip, ip, #69632	; 0x11000
   10774:	ldr	pc, [ip, #2284]!	; 0x8ec

Disassembly of section .text:

00010778 <.text>:
   10778:	mov	fp, #0
   1077c:	mov	lr, #0
   10780:	pop	{r1}		; (ldr r1, [sp], #4)
   10784:	mov	r2, sp
   10788:	push	{r2}		; (str r2, [sp, #-4]!)
   1078c:	push	{r0}		; (str r0, [sp, #-4]!)
   10790:	ldr	ip, [pc, #16]	; 107a8 <sprintf@plt+0x3c>
   10794:	push	{ip}		; (str ip, [sp, #-4]!)
   10798:	ldr	r0, [pc, #12]	; 107ac <sprintf@plt+0x40>
   1079c:	ldr	r3, [pc, #12]	; 107b0 <sprintf@plt+0x44>
   107a0:	bl	10694 <__libc_start_main@plt>
   107a4:	bl	1067c <abort@plt>
   107a8:	ldrdeq	r1, [r1], -r0
   107ac:	andeq	r0, r1, r8, ror #16
   107b0:	andeq	r1, r1, r0, ror r7
   107b4:	ldr	r3, [pc, #20]	; 107d0 <sprintf@plt+0x64>
   107b8:	ldr	r2, [pc, #20]	; 107d4 <sprintf@plt+0x68>
   107bc:	add	r3, pc, r3
   107c0:	ldr	r2, [r3, r2]
   107c4:	cmp	r2, #0
   107c8:	bxeq	lr
   107cc:	b	106a0 <__gmon_start__@plt>
   107d0:	andeq	r1, r1, ip, lsr r8
   107d4:	andeq	r0, r0, r4, rrx
   107d8:	ldr	r0, [pc, #24]	; 107f8 <sprintf@plt+0x8c>
   107dc:	ldr	r3, [pc, #24]	; 107fc <sprintf@plt+0x90>
   107e0:	cmp	r3, r0
   107e4:	bxeq	lr
   107e8:	ldr	r3, [pc, #16]	; 10800 <sprintf@plt+0x94>
   107ec:	cmp	r3, #0
   107f0:	bxeq	lr
   107f4:	bx	r3
   107f8:	strheq	r2, [r2], -ip
   107fc:	strheq	r2, [r2], -ip
   10800:	andeq	r0, r0, r0
   10804:	ldr	r0, [pc, #36]	; 10830 <sprintf@plt+0xc4>
   10808:	ldr	r1, [pc, #36]	; 10834 <sprintf@plt+0xc8>
   1080c:	sub	r1, r1, r0
   10810:	asr	r1, r1, #2
   10814:	add	r1, r1, r1, lsr #31
   10818:	asrs	r1, r1, #1
   1081c:	bxeq	lr
   10820:	ldr	r3, [pc, #16]	; 10838 <sprintf@plt+0xcc>
   10824:	cmp	r3, #0
   10828:	bxeq	lr
   1082c:	bx	r3
   10830:	strheq	r2, [r2], -ip
   10834:	strheq	r2, [r2], -ip
   10838:	andeq	r0, r0, r0
   1083c:	push	{r4, lr}
   10840:	ldr	r4, [pc, #24]	; 10860 <sprintf@plt+0xf4>
   10844:	ldrb	r3, [r4]
   10848:	cmp	r3, #0
   1084c:	popne	{r4, pc}
   10850:	bl	107d8 <sprintf@plt+0x6c>
   10854:	mov	r3, #1
   10858:	strb	r3, [r4]
   1085c:	pop	{r4, pc}
   10860:	strheq	r2, [r2], -ip
   10864:	b	10804 <sprintf@plt+0x98>
   10868:	str	r4, [sp, #-12]!
   1086c:	str	fp, [sp, #4]
   10870:	str	lr, [sp, #8]
   10874:	add	fp, sp, #8
   10878:	sub	sp, sp, #52	; 0x34
   1087c:	str	r0, [fp, #-56]	; 0xffffffc8
   10880:	str	r1, [fp, #-60]	; 0xffffffc4
   10884:	ldr	r4, [pc, #1292]	; 10d98 <sprintf@plt+0x62c>
   10888:	add	r4, pc, r4
   1088c:	mov	r3, #0
   10890:	str	r3, [fp, #-16]
   10894:	mov	r3, #0
   10898:	str	r3, [fp, #-20]	; 0xffffffec
   1089c:	mov	r3, #0
   108a0:	str	r3, [fp, #-32]	; 0xffffffe0
   108a4:	mov	r3, #0
   108a8:	str	r3, [fp, #-36]	; 0xffffffdc
   108ac:	mov	r3, #0
   108b0:	str	r3, [fp, #-40]	; 0xffffffd8
   108b4:	b	10ab0 <sprintf@plt+0x344>
   108b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   108bc:	sub	r3, r3, #63	; 0x3f
   108c0:	cmp	r3, #58	; 0x3a
   108c4:	addls	pc, pc, r3, lsl #2
   108c8:	b	10a98 <sprintf@plt+0x32c>
   108cc:	b	10a94 <sprintf@plt+0x328>
   108d0:	b	10a98 <sprintf@plt+0x32c>
   108d4:	b	10a98 <sprintf@plt+0x32c>
   108d8:	b	10a98 <sprintf@plt+0x32c>
   108dc:	b	10a98 <sprintf@plt+0x32c>
   108e0:	b	10a98 <sprintf@plt+0x32c>
   108e4:	b	10a98 <sprintf@plt+0x32c>
   108e8:	b	10a98 <sprintf@plt+0x32c>
   108ec:	b	10a98 <sprintf@plt+0x32c>
   108f0:	b	10a98 <sprintf@plt+0x32c>
   108f4:	b	10a98 <sprintf@plt+0x32c>
   108f8:	b	10a98 <sprintf@plt+0x32c>
   108fc:	b	10a98 <sprintf@plt+0x32c>
   10900:	b	10a98 <sprintf@plt+0x32c>
   10904:	b	10a98 <sprintf@plt+0x32c>
   10908:	b	10a98 <sprintf@plt+0x32c>
   1090c:	b	10a98 <sprintf@plt+0x32c>
   10910:	b	10a98 <sprintf@plt+0x32c>
   10914:	b	10a98 <sprintf@plt+0x32c>
   10918:	b	10a98 <sprintf@plt+0x32c>
   1091c:	b	10a98 <sprintf@plt+0x32c>
   10920:	b	10a98 <sprintf@plt+0x32c>
   10924:	b	10a98 <sprintf@plt+0x32c>
   10928:	b	10a98 <sprintf@plt+0x32c>
   1092c:	b	10a98 <sprintf@plt+0x32c>
   10930:	b	10a98 <sprintf@plt+0x32c>
   10934:	b	10a98 <sprintf@plt+0x32c>
   10938:	b	10a98 <sprintf@plt+0x32c>
   1093c:	b	10a98 <sprintf@plt+0x32c>
   10940:	b	10a98 <sprintf@plt+0x32c>
   10944:	b	10a98 <sprintf@plt+0x32c>
   10948:	b	10a98 <sprintf@plt+0x32c>
   1094c:	b	10a98 <sprintf@plt+0x32c>
   10950:	b	10a98 <sprintf@plt+0x32c>
   10954:	b	10a98 <sprintf@plt+0x32c>
   10958:	b	109c8 <sprintf@plt+0x25c>
   1095c:	b	10a98 <sprintf@plt+0x32c>
   10960:	b	10a98 <sprintf@plt+0x32c>
   10964:	b	10a98 <sprintf@plt+0x32c>
   10968:	b	10a98 <sprintf@plt+0x32c>
   1096c:	b	10a98 <sprintf@plt+0x32c>
   10970:	b	10a90 <sprintf@plt+0x324>
   10974:	b	10a98 <sprintf@plt+0x32c>
   10978:	b	10a98 <sprintf@plt+0x32c>
   1097c:	b	10a98 <sprintf@plt+0x32c>
   10980:	b	109e0 <sprintf@plt+0x274>
   10984:	b	109b8 <sprintf@plt+0x24c>
   10988:	b	10a98 <sprintf@plt+0x32c>
   1098c:	b	10a98 <sprintf@plt+0x32c>
   10990:	b	10a50 <sprintf@plt+0x2e4>
   10994:	b	10a98 <sprintf@plt+0x32c>
   10998:	b	10a08 <sprintf@plt+0x29c>
   1099c:	b	10a30 <sprintf@plt+0x2c4>
   109a0:	b	10a98 <sprintf@plt+0x32c>
   109a4:	b	10a98 <sprintf@plt+0x32c>
   109a8:	b	10a98 <sprintf@plt+0x32c>
   109ac:	b	10a98 <sprintf@plt+0x32c>
   109b0:	b	10a70 <sprintf@plt+0x304>
   109b4:	b	10a80 <sprintf@plt+0x314>
   109b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   109bc:	orr	r3, r3, #1
   109c0:	str	r3, [fp, #-32]	; 0xffffffe0
   109c4:	b	10ab0 <sprintf@plt+0x344>
   109c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   109cc:	orr	r3, r3, #16
   109d0:	str	r3, [fp, #-32]	; 0xffffffe0
   109d4:	mov	r3, #4
   109d8:	str	r3, [fp, #-40]	; 0xffffffd8
   109dc:	b	10ab0 <sprintf@plt+0x344>
   109e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   109e4:	orr	r3, r3, #8
   109e8:	str	r3, [fp, #-32]	; 0xffffffe0
   109ec:	ldr	r3, [pc, #936]	; 10d9c <sprintf@plt+0x630>
   109f0:	ldr	r3, [r4, r3]
   109f4:	ldr	r3, [r3]
   109f8:	mov	r0, r3
   109fc:	bl	10700 <atoi@plt>
   10a00:	str	r0, [fp, #-36]	; 0xffffffdc
   10a04:	b	10ab0 <sprintf@plt+0x344>
   10a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a0c:	orr	r3, r3, #32
   10a10:	str	r3, [fp, #-32]	; 0xffffffe0
   10a14:	ldr	r3, [pc, #896]	; 10d9c <sprintf@plt+0x630>
   10a18:	ldr	r3, [r4, r3]
   10a1c:	ldr	r3, [r3]
   10a20:	mov	r0, r3
   10a24:	bl	10700 <atoi@plt>
   10a28:	str	r0, [fp, #-40]	; 0xffffffd8
   10a2c:	b	10ab0 <sprintf@plt+0x344>
   10a30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a34:	orr	r3, r3, #2
   10a38:	str	r3, [fp, #-32]	; 0xffffffe0
   10a3c:	ldr	r3, [pc, #856]	; 10d9c <sprintf@plt+0x630>
   10a40:	ldr	r3, [r4, r3]
   10a44:	ldr	r3, [r3]
   10a48:	str	r3, [fp, #-20]	; 0xffffffec
   10a4c:	b	10ab0 <sprintf@plt+0x344>
   10a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a54:	orr	r3, r3, #4
   10a58:	str	r3, [fp, #-32]	; 0xffffffe0
   10a5c:	ldr	r3, [pc, #824]	; 10d9c <sprintf@plt+0x630>
   10a60:	ldr	r3, [r4, r3]
   10a64:	ldr	r3, [r3]
   10a68:	str	r3, [fp, #-16]
   10a6c:	b	10ab0 <sprintf@plt+0x344>
   10a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a74:	orr	r3, r3, #64	; 0x40
   10a78:	str	r3, [fp, #-32]	; 0xffffffe0
   10a7c:	b	10ab0 <sprintf@plt+0x344>
   10a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10a84:	orr	r3, r3, #128	; 0x80
   10a88:	str	r3, [fp, #-32]	; 0xffffffe0
   10a8c:	b	10ab0 <sprintf@plt+0x344>
   10a90:	bl	115cc <sprintf@plt+0xe60>
   10a94:	bl	116d0 <sprintf@plt+0xf64>
   10a98:	ldr	r1, [fp, #-44]	; 0xffffffd4
   10a9c:	ldr	r3, [pc, #764]	; 10da0 <sprintf@plt+0x634>
   10aa0:	add	r3, pc, r3
   10aa4:	mov	r0, r3
   10aa8:	bl	106f4 <printf@plt>
   10aac:	nop	{0}
   10ab0:	ldr	r3, [pc, #748]	; 10da4 <sprintf@plt+0x638>
   10ab4:	add	r3, pc, r3
   10ab8:	mov	r2, r3
   10abc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   10ac0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   10ac4:	bl	106e8 <getopt@plt>
   10ac8:	str	r0, [fp, #-44]	; 0xffffffd4
   10acc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   10ad0:	cmn	r3, #1
   10ad4:	bne	108b8 <sprintf@plt+0x14c>
   10ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10adc:	and	r3, r3, #1
   10ae0:	cmp	r3, #0
   10ae4:	beq	10b2c <sprintf@plt+0x3c0>
   10ae8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10aec:	cmp	r3, #0
   10af0:	bne	10afc <sprintf@plt+0x390>
   10af4:	mov	r3, #8
   10af8:	str	r3, [fp, #-36]	; 0xffffffdc
   10afc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10b00:	and	r3, r3, #2
   10b04:	cmp	r3, #0
   10b08:	beq	10b1c <sprintf@plt+0x3b0>
   10b0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   10b10:	bl	10dc4 <sprintf@plt+0x658>
   10b14:	str	r0, [fp, #-24]	; 0xffffffe8
   10b18:	b	10c1c <sprintf@plt+0x4b0>
   10b1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   10b20:	bl	10e60 <sprintf@plt+0x6f4>
   10b24:	str	r0, [fp, #-24]	; 0xffffffe8
   10b28:	b	10c1c <sprintf@plt+0x4b0>
   10b2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10b30:	and	r3, r3, #16
   10b34:	cmp	r3, #0
   10b38:	beq	10b88 <sprintf@plt+0x41c>
   10b3c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10b40:	cmp	r3, #0
   10b44:	bne	10b50 <sprintf@plt+0x3e4>
   10b48:	mov	r3, #22
   10b4c:	str	r3, [fp, #-36]	; 0xffffffdc
   10b50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10b54:	and	r3, r3, #2
   10b58:	cmp	r3, #0
   10b5c:	beq	10b74 <sprintf@plt+0x408>
   10b60:	ldr	r1, [fp, #-20]	; 0xffffffec
   10b64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   10b68:	bl	11250 <sprintf@plt+0xae4>
   10b6c:	str	r0, [fp, #-24]	; 0xffffffe8
   10b70:	b	10c1c <sprintf@plt+0x4b0>
   10b74:	ldr	r1, [fp, #-36]	; 0xffffffdc
   10b78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   10b7c:	bl	11308 <sprintf@plt+0xb9c>
   10b80:	str	r0, [fp, #-24]	; 0xffffffe8
   10b84:	b	10c1c <sprintf@plt+0x4b0>
   10b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10b8c:	and	r3, r3, #64	; 0x40
   10b90:	cmp	r3, #0
   10b94:	beq	10bdc <sprintf@plt+0x470>
   10b98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10b9c:	cmp	r3, #0
   10ba0:	bne	10bac <sprintf@plt+0x440>
   10ba4:	mov	r3, #16
   10ba8:	str	r3, [fp, #-36]	; 0xffffffdc
   10bac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10bb0:	and	r3, r3, #2
   10bb4:	cmp	r3, #0
   10bb8:	beq	10bcc <sprintf@plt+0x460>
   10bbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   10bc0:	bl	10f48 <sprintf@plt+0x7dc>
   10bc4:	str	r0, [fp, #-24]	; 0xffffffe8
   10bc8:	b	10c1c <sprintf@plt+0x4b0>
   10bcc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   10bd0:	bl	11080 <sprintf@plt+0x914>
   10bd4:	str	r0, [fp, #-24]	; 0xffffffe8
   10bd8:	b	10c1c <sprintf@plt+0x4b0>
   10bdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10be0:	cmp	r3, #0
   10be4:	bne	10bf0 <sprintf@plt+0x484>
   10be8:	mov	r3, #16
   10bec:	str	r3, [fp, #-36]	; 0xffffffdc
   10bf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10bf4:	and	r3, r3, #2
   10bf8:	cmp	r3, #0
   10bfc:	beq	10c10 <sprintf@plt+0x4a4>
   10c00:	ldr	r0, [fp, #-20]	; 0xffffffec
   10c04:	bl	10fe4 <sprintf@plt+0x878>
   10c08:	str	r0, [fp, #-24]	; 0xffffffe8
   10c0c:	b	10c1c <sprintf@plt+0x4b0>
   10c10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   10c14:	bl	11168 <sprintf@plt+0x9fc>
   10c18:	str	r0, [fp, #-24]	; 0xffffffe8
   10c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   10c20:	and	r3, r3, #4
   10c24:	cmp	r3, #0
   10c28:	beq	10c74 <sprintf@plt+0x508>
   10c2c:	ldr	r3, [fp, #-16]
   10c30:	cmp	r3, #0
   10c34:	bne	10c60 <sprintf@plt+0x4f4>
   10c38:	ldr	r3, [pc, #360]	; 10da8 <sprintf@plt+0x63c>
   10c3c:	ldr	r3, [r4, r3]
   10c40:	ldr	r3, [r3]
   10c44:	mov	r2, #30
   10c48:	mov	r1, #1
   10c4c:	ldr	r0, [pc, #344]	; 10dac <sprintf@plt+0x640>
   10c50:	add	r0, pc, r0
   10c54:	bl	1070c <fwrite@plt>
   10c58:	mov	r3, #1
   10c5c:	b	10d80 <sprintf@plt+0x614>
   10c60:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10c64:	ldr	r0, [fp, #-16]
   10c68:	bl	10730 <rb_crypt@plt>
   10c6c:	str	r0, [fp, #-28]	; 0xffffffe4
   10c70:	b	10d74 <sprintf@plt+0x608>
   10c74:	ldr	r3, [pc, #308]	; 10db0 <sprintf@plt+0x644>
   10c78:	add	r3, pc, r3
   10c7c:	mov	r0, r3
   10c80:	bl	106ac <getpass@plt>
   10c84:	str	r0, [fp, #-16]
   10c88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10c8c:	ldr	r0, [fp, #-16]
   10c90:	bl	10730 <rb_crypt@plt>
   10c94:	str	r0, [fp, #-28]	; 0xffffffe4
   10c98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   10c9c:	cmp	r3, #0
   10ca0:	bne	10ccc <sprintf@plt+0x560>
   10ca4:	ldr	r3, [pc, #252]	; 10da8 <sprintf@plt+0x63c>
   10ca8:	ldr	r3, [r4, r3]
   10cac:	ldr	r3, [r3]
   10cb0:	mov	r2, #18
   10cb4:	mov	r1, #1
   10cb8:	ldr	r0, [pc, #244]	; 10db4 <sprintf@plt+0x648>
   10cbc:	add	r0, pc, r0
   10cc0:	bl	1070c <fwrite@plt>
   10cc4:	mov	r3, #1
   10cc8:	b	10d80 <sprintf@plt+0x614>
   10ccc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10cd0:	bl	10724 <strdup@plt>
   10cd4:	mov	r3, r0
   10cd8:	str	r3, [fp, #-28]	; 0xffffffe4
   10cdc:	ldr	r3, [pc, #212]	; 10db8 <sprintf@plt+0x64c>
   10ce0:	add	r3, pc, r3
   10ce4:	mov	r0, r3
   10ce8:	bl	106ac <getpass@plt>
   10cec:	str	r0, [fp, #-16]
   10cf0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   10cf4:	ldr	r0, [fp, #-16]
   10cf8:	bl	10730 <rb_crypt@plt>
   10cfc:	str	r0, [fp, #-48]	; 0xffffffd0
   10d00:	ldr	r3, [fp, #-48]	; 0xffffffd0
   10d04:	cmp	r3, #0
   10d08:	bne	10d34 <sprintf@plt+0x5c8>
   10d0c:	ldr	r3, [pc, #148]	; 10da8 <sprintf@plt+0x63c>
   10d10:	ldr	r3, [r4, r3]
   10d14:	ldr	r3, [r3]
   10d18:	mov	r2, #18
   10d1c:	mov	r1, #1
   10d20:	ldr	r0, [pc, #148]	; 10dbc <sprintf@plt+0x650>
   10d24:	add	r0, pc, r0
   10d28:	bl	1070c <fwrite@plt>
   10d2c:	mov	r3, #1
   10d30:	b	10d80 <sprintf@plt+0x614>
   10d34:	ldr	r1, [fp, #-48]	; 0xffffffd0
   10d38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d3c:	bl	10754 <strcmp@plt>
   10d40:	mov	r3, r0
   10d44:	cmp	r3, #0
   10d48:	beq	10d74 <sprintf@plt+0x608>
   10d4c:	ldr	r3, [pc, #84]	; 10da8 <sprintf@plt+0x63c>
   10d50:	ldr	r3, [r4, r3]
   10d54:	ldr	r3, [r3]
   10d58:	mov	r2, #23
   10d5c:	mov	r1, #1
   10d60:	ldr	r0, [pc, #88]	; 10dc0 <sprintf@plt+0x654>
   10d64:	add	r0, pc, r0
   10d68:	bl	1070c <fwrite@plt>
   10d6c:	mov	r3, #1
   10d70:	b	10d80 <sprintf@plt+0x614>
   10d74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10d78:	bl	1073c <puts@plt>
   10d7c:	mov	r3, #0
   10d80:	mov	r0, r3
   10d84:	sub	sp, fp, #8
   10d88:	ldr	r4, [sp]
   10d8c:	ldr	fp, [sp, #4]
   10d90:	add	sp, sp, #8
   10d94:	pop	{pc}		; (ldr pc, [sp], #4)
   10d98:	andeq	r1, r1, r0, ror r7
   10d9c:	andeq	r0, r0, ip, rrx
   10da0:	andeq	r0, r0, r8, lsr sp
   10da4:	andeq	r0, r0, ip, lsr sp
   10da8:	andeq	r0, r0, r8, rrx
   10dac:			; <UNDEFINED> instruction: 0x00000bb0
   10db0:	andeq	r0, r0, r8, lsr #23
   10db4:	andeq	r0, r0, r0, ror fp
   10db8:	andeq	r0, r0, r0, ror #22
   10dbc:	andeq	r0, r0, r8, lsl #22
   10dc0:	andeq	r0, r0, r4, ror #21
   10dc4:	str	fp, [sp, #-8]!
   10dc8:	str	lr, [sp, #4]
   10dcc:	add	fp, sp, #4
   10dd0:	sub	sp, sp, #8
   10dd4:	str	r0, [fp, #-8]
   10dd8:	ldr	r3, [fp, #-8]
   10ddc:	cmp	r3, #0
   10de0:	beq	10e24 <sprintf@plt+0x6b8>
   10de4:	ldr	r0, [fp, #-8]
   10de8:	bl	106dc <strlen@plt>
   10dec:	mov	r3, r0
   10df0:	cmp	r3, #16
   10df4:	bhi	10e24 <sprintf@plt+0x6b8>
   10df8:	ldr	r2, [fp, #-8]
   10dfc:	ldr	r3, [pc, #76]	; 10e50 <sprintf@plt+0x6e4>
   10e00:	add	r3, pc, r3
   10e04:	mov	r1, r3
   10e08:	ldr	r3, [pc, #68]	; 10e54 <sprintf@plt+0x6e8>
   10e0c:	add	r3, pc, r3
   10e10:	mov	r0, r3
   10e14:	bl	1076c <sprintf@plt>
   10e18:	ldr	r3, [pc, #56]	; 10e58 <sprintf@plt+0x6ec>
   10e1c:	add	r3, pc, r3
   10e20:	b	10e3c <sprintf@plt+0x6d0>
   10e24:	ldr	r3, [pc, #48]	; 10e5c <sprintf@plt+0x6f0>
   10e28:	add	r3, pc, r3
   10e2c:	mov	r0, r3
   10e30:	bl	1073c <puts@plt>
   10e34:	mov	r0, #1
   10e38:	bl	10760 <exit@plt>
   10e3c:	mov	r0, r3
   10e40:	sub	sp, fp, #4
   10e44:	ldr	fp, [sp]
   10e48:	add	sp, sp, #4
   10e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   10e50:	andeq	r0, r0, r0, ror #20
   10e54:	andeq	r1, r1, ip, lsr #5
   10e58:	muleq	r1, ip, r2
   10e5c:	andeq	r0, r0, r0, asr #20
   10e60:	str	fp, [sp, #-8]!
   10e64:	str	lr, [sp, #4]
   10e68:	add	fp, sp, #4
   10e6c:	sub	sp, sp, #8
   10e70:	str	r0, [fp, #-8]
   10e74:	ldr	r3, [fp, #-8]
   10e78:	cmp	r3, #16
   10e7c:	ble	10e98 <sprintf@plt+0x72c>
   10e80:	ldr	r3, [pc, #160]	; 10f28 <sprintf@plt+0x7bc>
   10e84:	add	r3, pc, r3
   10e88:	mov	r0, r3
   10e8c:	bl	1073c <puts@plt>
   10e90:	mov	r0, #0
   10e94:	bl	10760 <exit@plt>
   10e98:	ldr	r3, [pc, #140]	; 10f2c <sprintf@plt+0x7c0>
   10e9c:	add	r3, pc, r3
   10ea0:	mov	r2, #36	; 0x24
   10ea4:	strb	r2, [r3]
   10ea8:	ldr	r3, [pc, #128]	; 10f30 <sprintf@plt+0x7c4>
   10eac:	add	r3, pc, r3
   10eb0:	mov	r2, #49	; 0x31
   10eb4:	strb	r2, [r3, #1]
   10eb8:	ldr	r3, [pc, #116]	; 10f34 <sprintf@plt+0x7c8>
   10ebc:	add	r3, pc, r3
   10ec0:	mov	r2, #36	; 0x24
   10ec4:	strb	r2, [r3, #2]
   10ec8:	ldr	r1, [fp, #-8]
   10ecc:	ldr	r3, [pc, #100]	; 10f38 <sprintf@plt+0x7cc>
   10ed0:	add	r3, pc, r3
   10ed4:	add	r0, r3, #3
   10ed8:	bl	114a4 <sprintf@plt+0xd38>
   10edc:	ldr	r3, [fp, #-8]
   10ee0:	add	r3, r3, #3
   10ee4:	ldr	r2, [pc, #80]	; 10f3c <sprintf@plt+0x7d0>
   10ee8:	add	r2, pc, r2
   10eec:	mov	r1, #36	; 0x24
   10ef0:	strb	r1, [r2, r3]
   10ef4:	ldr	r3, [fp, #-8]
   10ef8:	add	r3, r3, #4
   10efc:	ldr	r2, [pc, #60]	; 10f40 <sprintf@plt+0x7d4>
   10f00:	add	r2, pc, r2
   10f04:	mov	r1, #0
   10f08:	strb	r1, [r2, r3]
   10f0c:	ldr	r3, [pc, #48]	; 10f44 <sprintf@plt+0x7d8>
   10f10:	add	r3, pc, r3
   10f14:	mov	r0, r3
   10f18:	sub	sp, fp, #4
   10f1c:	ldr	fp, [sp]
   10f20:	add	sp, sp, #4
   10f24:	pop	{pc}		; (ldr pc, [sp], #4)
   10f28:	andeq	r0, r0, r8, lsr #20
   10f2c:	andeq	r1, r1, r4, lsr r2
   10f30:	andeq	r1, r1, r4, lsr #4
   10f34:	andeq	r1, r1, r4, lsl r2
   10f38:	andeq	r1, r1, r0, lsl #4
   10f3c:	andeq	r1, r1, r8, ror #3
   10f40:	ldrdeq	r1, [r1], -r0
   10f44:	andeq	r1, r1, r0, asr #3
   10f48:	str	fp, [sp, #-8]!
   10f4c:	str	lr, [sp, #4]
   10f50:	add	fp, sp, #4
   10f54:	sub	sp, sp, #8
   10f58:	str	r0, [fp, #-8]
   10f5c:	ldr	r3, [fp, #-8]
   10f60:	cmp	r3, #0
   10f64:	beq	10fa8 <sprintf@plt+0x83c>
   10f68:	ldr	r0, [fp, #-8]
   10f6c:	bl	106dc <strlen@plt>
   10f70:	mov	r3, r0
   10f74:	cmp	r3, #16
   10f78:	bhi	10fa8 <sprintf@plt+0x83c>
   10f7c:	ldr	r2, [fp, #-8]
   10f80:	ldr	r3, [pc, #76]	; 10fd4 <sprintf@plt+0x868>
   10f84:	add	r3, pc, r3
   10f88:	mov	r1, r3
   10f8c:	ldr	r3, [pc, #68]	; 10fd8 <sprintf@plt+0x86c>
   10f90:	add	r3, pc, r3
   10f94:	mov	r0, r3
   10f98:	bl	1076c <sprintf@plt>
   10f9c:	ldr	r3, [pc, #56]	; 10fdc <sprintf@plt+0x870>
   10fa0:	add	r3, pc, r3
   10fa4:	b	10fc0 <sprintf@plt+0x854>
   10fa8:	ldr	r3, [pc, #48]	; 10fe0 <sprintf@plt+0x874>
   10fac:	add	r3, pc, r3
   10fb0:	mov	r0, r3
   10fb4:	bl	1073c <puts@plt>
   10fb8:	mov	r0, #1
   10fbc:	bl	10760 <exit@plt>
   10fc0:	mov	r0, r3
   10fc4:	sub	sp, fp, #4
   10fc8:	ldr	fp, [sp]
   10fcc:	add	sp, sp, #4
   10fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fd4:	andeq	r0, r0, r4, asr #18
   10fd8:	andeq	r1, r1, r8, asr r1
   10fdc:	andeq	r1, r1, r8, asr #2
   10fe0:			; <UNDEFINED> instruction: 0x000008bc
   10fe4:	str	fp, [sp, #-8]!
   10fe8:	str	lr, [sp, #4]
   10fec:	add	fp, sp, #4
   10ff0:	sub	sp, sp, #8
   10ff4:	str	r0, [fp, #-8]
   10ff8:	ldr	r3, [fp, #-8]
   10ffc:	cmp	r3, #0
   11000:	beq	11044 <sprintf@plt+0x8d8>
   11004:	ldr	r0, [fp, #-8]
   11008:	bl	106dc <strlen@plt>
   1100c:	mov	r3, r0
   11010:	cmp	r3, #16
   11014:	bhi	11044 <sprintf@plt+0x8d8>
   11018:	ldr	r2, [fp, #-8]
   1101c:	ldr	r3, [pc, #76]	; 11070 <sprintf@plt+0x904>
   11020:	add	r3, pc, r3
   11024:	mov	r1, r3
   11028:	ldr	r3, [pc, #68]	; 11074 <sprintf@plt+0x908>
   1102c:	add	r3, pc, r3
   11030:	mov	r0, r3
   11034:	bl	1076c <sprintf@plt>
   11038:	ldr	r3, [pc, #56]	; 11078 <sprintf@plt+0x90c>
   1103c:	add	r3, pc, r3
   11040:	b	1105c <sprintf@plt+0x8f0>
   11044:	ldr	r3, [pc, #48]	; 1107c <sprintf@plt+0x910>
   11048:	add	r3, pc, r3
   1104c:	mov	r0, r3
   11050:	bl	1073c <puts@plt>
   11054:	mov	r0, #1
   11058:	bl	10760 <exit@plt>
   1105c:	mov	r0, r3
   11060:	sub	sp, fp, #4
   11064:	ldr	fp, [sp]
   11068:	add	sp, sp, #4
   1106c:	pop	{pc}		; (ldr pc, [sp], #4)
   11070:			; <UNDEFINED> instruction: 0x000008b0
   11074:	ldrdeq	r1, [r1], -r4
   11078:	andeq	r1, r1, r4, asr #1
   1107c:	andeq	r0, r0, r0, lsr #16
   11080:	str	fp, [sp, #-8]!
   11084:	str	lr, [sp, #4]
   11088:	add	fp, sp, #4
   1108c:	sub	sp, sp, #8
   11090:	str	r0, [fp, #-8]
   11094:	ldr	r3, [fp, #-8]
   11098:	cmp	r3, #16
   1109c:	ble	110b8 <sprintf@plt+0x94c>
   110a0:	ldr	r3, [pc, #160]	; 11148 <sprintf@plt+0x9dc>
   110a4:	add	r3, pc, r3
   110a8:	mov	r0, r3
   110ac:	bl	1073c <puts@plt>
   110b0:	mov	r0, #0
   110b4:	bl	10760 <exit@plt>
   110b8:	ldr	r3, [pc, #140]	; 1114c <sprintf@plt+0x9e0>
   110bc:	add	r3, pc, r3
   110c0:	mov	r2, #36	; 0x24
   110c4:	strb	r2, [r3]
   110c8:	ldr	r3, [pc, #128]	; 11150 <sprintf@plt+0x9e4>
   110cc:	add	r3, pc, r3
   110d0:	mov	r2, #53	; 0x35
   110d4:	strb	r2, [r3, #1]
   110d8:	ldr	r3, [pc, #116]	; 11154 <sprintf@plt+0x9e8>
   110dc:	add	r3, pc, r3
   110e0:	mov	r2, #36	; 0x24
   110e4:	strb	r2, [r3, #2]
   110e8:	ldr	r1, [fp, #-8]
   110ec:	ldr	r3, [pc, #100]	; 11158 <sprintf@plt+0x9ec>
   110f0:	add	r3, pc, r3
   110f4:	add	r0, r3, #3
   110f8:	bl	114a4 <sprintf@plt+0xd38>
   110fc:	ldr	r3, [fp, #-8]
   11100:	add	r3, r3, #3
   11104:	ldr	r2, [pc, #80]	; 1115c <sprintf@plt+0x9f0>
   11108:	add	r2, pc, r2
   1110c:	mov	r1, #36	; 0x24
   11110:	strb	r1, [r2, r3]
   11114:	ldr	r3, [fp, #-8]
   11118:	add	r3, r3, #4
   1111c:	ldr	r2, [pc, #60]	; 11160 <sprintf@plt+0x9f4>
   11120:	add	r2, pc, r2
   11124:	mov	r1, #0
   11128:	strb	r1, [r2, r3]
   1112c:	ldr	r3, [pc, #48]	; 11164 <sprintf@plt+0x9f8>
   11130:	add	r3, pc, r3
   11134:	mov	r0, r3
   11138:	sub	sp, fp, #4
   1113c:	ldr	fp, [sp]
   11140:	add	sp, sp, #4
   11144:	pop	{pc}		; (ldr pc, [sp], #4)
   11148:	andeq	r0, r0, r4, lsr r8
   1114c:	andeq	r1, r1, ip, asr r0
   11150:	andeq	r1, r1, ip, asr #32
   11154:	andeq	r1, r1, ip, lsr r0
   11158:	andeq	r1, r1, r8, lsr #32
   1115c:	andeq	r1, r1, r0, lsl r0
   11160:	strdeq	r0, [r1], -r8
   11164:	andeq	r0, r1, r8, ror #31
   11168:	str	fp, [sp, #-8]!
   1116c:	str	lr, [sp, #4]
   11170:	add	fp, sp, #4
   11174:	sub	sp, sp, #8
   11178:	str	r0, [fp, #-8]
   1117c:	ldr	r3, [fp, #-8]
   11180:	cmp	r3, #16
   11184:	ble	111a0 <sprintf@plt+0xa34>
   11188:	ldr	r3, [pc, #160]	; 11230 <sprintf@plt+0xac4>
   1118c:	add	r3, pc, r3
   11190:	mov	r0, r3
   11194:	bl	1073c <puts@plt>
   11198:	mov	r0, #0
   1119c:	bl	10760 <exit@plt>
   111a0:	ldr	r3, [pc, #140]	; 11234 <sprintf@plt+0xac8>
   111a4:	add	r3, pc, r3
   111a8:	mov	r2, #36	; 0x24
   111ac:	strb	r2, [r3]
   111b0:	ldr	r3, [pc, #128]	; 11238 <sprintf@plt+0xacc>
   111b4:	add	r3, pc, r3
   111b8:	mov	r2, #54	; 0x36
   111bc:	strb	r2, [r3, #1]
   111c0:	ldr	r3, [pc, #116]	; 1123c <sprintf@plt+0xad0>
   111c4:	add	r3, pc, r3
   111c8:	mov	r2, #36	; 0x24
   111cc:	strb	r2, [r3, #2]
   111d0:	ldr	r1, [fp, #-8]
   111d4:	ldr	r3, [pc, #100]	; 11240 <sprintf@plt+0xad4>
   111d8:	add	r3, pc, r3
   111dc:	add	r0, r3, #3
   111e0:	bl	114a4 <sprintf@plt+0xd38>
   111e4:	ldr	r3, [fp, #-8]
   111e8:	add	r3, r3, #3
   111ec:	ldr	r2, [pc, #80]	; 11244 <sprintf@plt+0xad8>
   111f0:	add	r2, pc, r2
   111f4:	mov	r1, #36	; 0x24
   111f8:	strb	r1, [r2, r3]
   111fc:	ldr	r3, [fp, #-8]
   11200:	add	r3, r3, #4
   11204:	ldr	r2, [pc, #60]	; 11248 <sprintf@plt+0xadc>
   11208:	add	r2, pc, r2
   1120c:	mov	r1, #0
   11210:	strb	r1, [r2, r3]
   11214:	ldr	r3, [pc, #48]	; 1124c <sprintf@plt+0xae0>
   11218:	add	r3, pc, r3
   1121c:	mov	r0, r3
   11220:	sub	sp, fp, #4
   11224:	ldr	fp, [sp]
   11228:	add	sp, sp, #4
   1122c:	pop	{pc}		; (ldr pc, [sp], #4)
   11230:	andeq	r0, r0, r8, ror #14
   11234:	andeq	r0, r1, ip, lsl #31
   11238:	andeq	r0, r1, ip, ror pc
   1123c:	andeq	r0, r1, ip, ror #30
   11240:	andeq	r0, r1, r8, asr pc
   11244:	andeq	r0, r1, r0, asr #30
   11248:	andeq	r0, r1, r8, lsr #30
   1124c:	andeq	r0, r1, r8, lsl pc
   11250:	str	fp, [sp, #-8]!
   11254:	str	lr, [sp, #4]
   11258:	add	fp, sp, #4
   1125c:	sub	sp, sp, #16
   11260:	str	r0, [fp, #-16]
   11264:	str	r1, [fp, #-20]	; 0xffffffec
   11268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1126c:	cmp	r3, #0
   11270:	beq	112c8 <sprintf@plt+0xb5c>
   11274:	ldr	r0, [fp, #-20]	; 0xffffffec
   11278:	bl	106dc <strlen@plt>
   1127c:	mov	r3, r0
   11280:	cmp	r3, #22
   11284:	bhi	112c8 <sprintf@plt+0xb5c>
   11288:	sub	r3, fp, #8
   1128c:	ldr	r2, [fp, #-16]
   11290:	ldr	r1, [pc, #92]	; 112f4 <sprintf@plt+0xb88>
   11294:	add	r1, pc, r1
   11298:	mov	r0, r3
   1129c:	bl	1076c <sprintf@plt>
   112a0:	sub	r2, fp, #8
   112a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   112a8:	ldr	r1, [pc, #72]	; 112f8 <sprintf@plt+0xb8c>
   112ac:	add	r1, pc, r1
   112b0:	ldr	r0, [pc, #68]	; 112fc <sprintf@plt+0xb90>
   112b4:	add	r0, pc, r0
   112b8:	bl	1076c <sprintf@plt>
   112bc:	ldr	r3, [pc, #60]	; 11300 <sprintf@plt+0xb94>
   112c0:	add	r3, pc, r3
   112c4:	b	112e0 <sprintf@plt+0xb74>
   112c8:	ldr	r3, [pc, #52]	; 11304 <sprintf@plt+0xb98>
   112cc:	add	r3, pc, r3
   112d0:	mov	r0, r3
   112d4:	bl	1073c <puts@plt>
   112d8:	mov	r0, #1
   112dc:	bl	10760 <exit@plt>
   112e0:	mov	r0, r3
   112e4:	sub	sp, fp, #4
   112e8:	ldr	fp, [sp]
   112ec:	add	sp, sp, #4
   112f0:	pop	{pc}		; (ldr pc, [sp], #4)
   112f4:	andeq	r0, r0, ip, ror r6
   112f8:	andeq	r0, r0, ip, ror #12
   112fc:	muleq	r1, r4, lr
   11300:	andeq	r0, r1, r8, lsl #29
   11304:	andeq	r0, r0, r8, asr r6
   11308:	str	fp, [sp, #-8]!
   1130c:	str	lr, [sp, #4]
   11310:	add	fp, sp, #4
   11314:	sub	sp, sp, #16
   11318:	str	r0, [fp, #-16]
   1131c:	str	r1, [fp, #-20]	; 0xffffffec
   11320:	ldr	r3, [fp, #-20]	; 0xffffffec
   11324:	cmp	r3, #22
   11328:	ble	11344 <sprintf@plt+0xbd8>
   1132c:	ldr	r3, [pc, #172]	; 113e0 <sprintf@plt+0xc74>
   11330:	add	r3, pc, r3
   11334:	mov	r0, r3
   11338:	bl	1073c <puts@plt>
   1133c:	mov	r0, #0
   11340:	bl	10760 <exit@plt>
   11344:	sub	r3, fp, #8
   11348:	ldr	r2, [fp, #-16]
   1134c:	ldr	r1, [pc, #144]	; 113e4 <sprintf@plt+0xc78>
   11350:	add	r1, pc, r1
   11354:	mov	r0, r3
   11358:	bl	1076c <sprintf@plt>
   1135c:	sub	r3, fp, #8
   11360:	mov	r2, r3
   11364:	ldr	r3, [pc, #124]	; 113e8 <sprintf@plt+0xc7c>
   11368:	add	r3, pc, r3
   1136c:	mov	r1, r3
   11370:	ldr	r3, [pc, #116]	; 113ec <sprintf@plt+0xc80>
   11374:	add	r3, pc, r3
   11378:	mov	r0, r3
   1137c:	bl	1076c <sprintf@plt>
   11380:	ldr	r1, [fp, #-20]	; 0xffffffec
   11384:	ldr	r3, [pc, #100]	; 113f0 <sprintf@plt+0xc84>
   11388:	add	r3, pc, r3
   1138c:	add	r0, r3, #7
   11390:	bl	114a4 <sprintf@plt+0xd38>
   11394:	ldr	r3, [fp, #-20]	; 0xffffffec
   11398:	add	r3, r3, #7
   1139c:	ldr	r2, [pc, #80]	; 113f4 <sprintf@plt+0xc88>
   113a0:	add	r2, pc, r2
   113a4:	mov	r1, #36	; 0x24
   113a8:	strb	r1, [r2, r3]
   113ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   113b0:	add	r3, r3, #8
   113b4:	ldr	r2, [pc, #60]	; 113f8 <sprintf@plt+0xc8c>
   113b8:	add	r2, pc, r2
   113bc:	mov	r1, #0
   113c0:	strb	r1, [r2, r3]
   113c4:	ldr	r3, [pc, #48]	; 113fc <sprintf@plt+0xc90>
   113c8:	add	r3, pc, r3
   113cc:	mov	r0, r3
   113d0:	sub	sp, fp, #4
   113d4:	ldr	fp, [sp]
   113d8:	add	sp, sp, #4
   113dc:	pop	{pc}		; (ldr pc, [sp], #4)
   113e0:	andeq	r0, r0, r8, lsr r6
   113e4:	andeq	r0, r0, r0, asr #11
   113e8:	andeq	r0, r0, r0, lsr #12
   113ec:	strdeq	r0, [r1], -r4
   113f0:	andeq	r0, r1, r0, ror #27
   113f4:	andeq	r0, r1, r8, asr #27
   113f8:			; <UNDEFINED> instruction: 0x00010db0
   113fc:	andeq	r0, r1, r0, lsr #27
   11400:	str	fp, [sp, #-8]!
   11404:	str	lr, [sp, #4]
   11408:	add	fp, sp, #4
   1140c:	sub	sp, sp, #16
   11410:	str	r0, [fp, #-16]
   11414:	str	r1, [fp, #-20]	; 0xffffffec
   11418:	mov	r0, #0
   1141c:	bl	10718 <time@plt>
   11420:	mov	r3, r0
   11424:	mov	r0, r3
   11428:	bl	10688 <srand@plt>
   1142c:	mov	r3, #0
   11430:	str	r3, [fp, #-8]
   11434:	b	11478 <sprintf@plt+0xd0c>
   11438:	bl	10748 <rand@plt>
   1143c:	mov	r3, r0
   11440:	rsbs	r2, r3, #0
   11444:	and	r3, r3, #63	; 0x3f
   11448:	and	r2, r2, #63	; 0x3f
   1144c:	rsbpl	r3, r2, #0
   11450:	ldr	r2, [fp, #-8]
   11454:	ldr	r1, [fp, #-16]
   11458:	add	r2, r1, r2
   1145c:	ldr	r1, [pc, #60]	; 114a0 <sprintf@plt+0xd34>
   11460:	add	r1, pc, r1
   11464:	ldrb	r3, [r1, r3]
   11468:	strb	r3, [r2]
   1146c:	ldr	r3, [fp, #-8]
   11470:	add	r3, r3, #1
   11474:	str	r3, [fp, #-8]
   11478:	ldr	r2, [fp, #-8]
   1147c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11480:	cmp	r2, r3
   11484:	blt	11438 <sprintf@plt+0xccc>
   11488:	ldr	r3, [fp, #-16]
   1148c:	mov	r0, r3
   11490:	sub	sp, fp, #4
   11494:	ldr	fp, [sp]
   11498:	add	sp, sp, #4
   1149c:	pop	{pc}		; (ldr pc, [sp], #4)
   114a0:	andeq	r0, r1, r0, lsl ip
   114a4:	str	fp, [sp, #-8]!
   114a8:	str	lr, [sp, #4]
   114ac:	add	fp, sp, #4
   114b0:	sub	sp, sp, #24
   114b4:	str	r0, [fp, #-24]	; 0xffffffe8
   114b8:	str	r1, [fp, #-28]	; 0xffffffe4
   114bc:	mov	r1, #0
   114c0:	ldr	r3, [pc, #252]	; 115c4 <sprintf@plt+0xe58>
   114c4:	add	r3, pc, r3
   114c8:	mov	r0, r3
   114cc:	bl	10670 <open@plt>
   114d0:	str	r0, [fp, #-12]
   114d4:	ldr	r3, [fp, #-12]
   114d8:	cmp	r3, #0
   114dc:	bge	114f4 <sprintf@plt+0xd88>
   114e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   114e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   114e8:	bl	11400 <sprintf@plt+0xc94>
   114ec:	mov	r3, r0
   114f0:	b	115b0 <sprintf@plt+0xe44>
   114f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   114f8:	mov	r1, r3
   114fc:	mov	r0, #1
   11500:	bl	106b8 <calloc@plt>
   11504:	mov	r3, r0
   11508:	str	r3, [fp, #-16]
   1150c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11510:	mov	r2, r3
   11514:	ldr	r1, [fp, #-16]
   11518:	ldr	r0, [fp, #-12]
   1151c:	bl	106d0 <read@plt>
   11520:	mov	r2, r0
   11524:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11528:	cmp	r3, r2
   1152c:	beq	1154c <sprintf@plt+0xde0>
   11530:	ldr	r0, [fp, #-16]
   11534:	bl	106c4 <free@plt>
   11538:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1153c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11540:	bl	11400 <sprintf@plt+0xc94>
   11544:	mov	r3, r0
   11548:	b	115b0 <sprintf@plt+0xe44>
   1154c:	mov	r3, #0
   11550:	str	r3, [fp, #-8]
   11554:	b	11594 <sprintf@plt+0xe28>
   11558:	ldr	r3, [fp, #-8]
   1155c:	ldr	r2, [fp, #-16]
   11560:	add	r3, r2, r3
   11564:	ldrb	r3, [r3]
   11568:	and	r2, r3, #63	; 0x3f
   1156c:	ldr	r3, [fp, #-8]
   11570:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11574:	add	r3, r1, r3
   11578:	ldr	r1, [pc, #72]	; 115c8 <sprintf@plt+0xe5c>
   1157c:	add	r1, pc, r1
   11580:	ldrb	r2, [r1, r2]
   11584:	strb	r2, [r3]
   11588:	ldr	r3, [fp, #-8]
   1158c:	add	r3, r3, #1
   11590:	str	r3, [fp, #-8]
   11594:	ldr	r2, [fp, #-8]
   11598:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1159c:	cmp	r2, r3
   115a0:	blt	11558 <sprintf@plt+0xdec>
   115a4:	ldr	r0, [fp, #-16]
   115a8:	bl	106c4 <free@plt>
   115ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115b0:	mov	r0, r3
   115b4:	sub	sp, fp, #4
   115b8:	ldr	fp, [sp]
   115bc:	add	sp, sp, #4
   115c0:	pop	{pc}		; (ldr pc, [sp], #4)
   115c4:	andeq	r0, r0, ip, asr #9
   115c8:	strdeq	r0, [r1], -r4
   115cc:	str	fp, [sp, #-8]!
   115d0:	str	lr, [sp, #4]
   115d4:	add	fp, sp, #4
   115d8:	ldr	r3, [pc, #192]	; 116a0 <sprintf@plt+0xf34>
   115dc:	add	r3, pc, r3
   115e0:	mov	r0, r3
   115e4:	bl	1073c <puts@plt>
   115e8:	ldr	r3, [pc, #180]	; 116a4 <sprintf@plt+0xf38>
   115ec:	add	r3, pc, r3
   115f0:	mov	r0, r3
   115f4:	bl	1073c <puts@plt>
   115f8:	ldr	r3, [pc, #168]	; 116a8 <sprintf@plt+0xf3c>
   115fc:	add	r3, pc, r3
   11600:	mov	r0, r3
   11604:	bl	1073c <puts@plt>
   11608:	ldr	r3, [pc, #156]	; 116ac <sprintf@plt+0xf40>
   1160c:	add	r3, pc, r3
   11610:	mov	r0, r3
   11614:	bl	1073c <puts@plt>
   11618:	ldr	r3, [pc, #144]	; 116b0 <sprintf@plt+0xf44>
   1161c:	add	r3, pc, r3
   11620:	mov	r0, r3
   11624:	bl	1073c <puts@plt>
   11628:	ldr	r3, [pc, #132]	; 116b4 <sprintf@plt+0xf48>
   1162c:	add	r3, pc, r3
   11630:	mov	r0, r3
   11634:	bl	1073c <puts@plt>
   11638:	ldr	r3, [pc, #120]	; 116b8 <sprintf@plt+0xf4c>
   1163c:	add	r3, pc, r3
   11640:	mov	r0, r3
   11644:	bl	1073c <puts@plt>
   11648:	ldr	r3, [pc, #108]	; 116bc <sprintf@plt+0xf50>
   1164c:	add	r3, pc, r3
   11650:	mov	r0, r3
   11654:	bl	1073c <puts@plt>
   11658:	ldr	r3, [pc, #96]	; 116c0 <sprintf@plt+0xf54>
   1165c:	add	r3, pc, r3
   11660:	mov	r0, r3
   11664:	bl	1073c <puts@plt>
   11668:	ldr	r3, [pc, #84]	; 116c4 <sprintf@plt+0xf58>
   1166c:	add	r3, pc, r3
   11670:	mov	r0, r3
   11674:	bl	1073c <puts@plt>
   11678:	ldr	r3, [pc, #72]	; 116c8 <sprintf@plt+0xf5c>
   1167c:	add	r3, pc, r3
   11680:	mov	r0, r3
   11684:	bl	1073c <puts@plt>
   11688:	ldr	r3, [pc, #60]	; 116cc <sprintf@plt+0xf60>
   1168c:	add	r3, pc, r3
   11690:	mov	r0, r3
   11694:	bl	1073c <puts@plt>
   11698:	mov	r0, #0
   1169c:	bl	10760 <exit@plt>
   116a0:	andeq	r0, r0, r0, asr #7
   116a4:	strdeq	r0, [r0], -ip
   116a8:	andeq	r0, r0, ip, lsl #8
   116ac:	andeq	r0, r0, ip, lsl r4
   116b0:	andeq	r0, r0, r8, lsr #8
   116b4:	andeq	r0, r0, r8, lsr r4
   116b8:	andeq	r0, r0, r0, ror #8
   116bc:	andeq	r0, r0, r8, lsl #9
   116c0:	andeq	r0, r0, r4, lsr #9
   116c4:	andeq	r0, r0, ip, asr #9
   116c8:	ldrdeq	r0, [r0], -r8
   116cc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   116d0:	str	fp, [sp, #-8]!
   116d4:	str	lr, [sp, #4]
   116d8:	add	fp, sp, #4
   116dc:	ldr	r3, [pc, #112]	; 11754 <sprintf@plt+0xfe8>
   116e0:	add	r3, pc, r3
   116e4:	mov	r0, r3
   116e8:	bl	1073c <puts@plt>
   116ec:	ldr	r3, [pc, #100]	; 11758 <sprintf@plt+0xfec>
   116f0:	add	r3, pc, r3
   116f4:	mov	r0, r3
   116f8:	bl	1073c <puts@plt>
   116fc:	ldr	r3, [pc, #88]	; 1175c <sprintf@plt+0xff0>
   11700:	add	r3, pc, r3
   11704:	mov	r0, r3
   11708:	bl	1073c <puts@plt>
   1170c:	ldr	r3, [pc, #76]	; 11760 <sprintf@plt+0xff4>
   11710:	add	r3, pc, r3
   11714:	mov	r0, r3
   11718:	bl	1073c <puts@plt>
   1171c:	ldr	r3, [pc, #64]	; 11764 <sprintf@plt+0xff8>
   11720:	add	r3, pc, r3
   11724:	mov	r0, r3
   11728:	bl	1073c <puts@plt>
   1172c:	ldr	r3, [pc, #52]	; 11768 <sprintf@plt+0xffc>
   11730:	add	r3, pc, r3
   11734:	mov	r0, r3
   11738:	bl	1073c <puts@plt>
   1173c:	ldr	r3, [pc, #40]	; 1176c <sprintf@plt+0x1000>
   11740:	add	r3, pc, r3
   11744:	mov	r0, r3
   11748:	bl	1073c <puts@plt>
   1174c:	mov	r0, #0
   11750:	bl	10760 <exit@plt>
   11754:	andeq	r0, r0, r0, asr #9
   11758:	ldrdeq	r0, [r0], -r4
   1175c:	andeq	r0, r0, r8, lsl #10
   11760:	andeq	r0, r0, r8, lsr r5
   11764:	andeq	r0, r0, r8, ror #10
   11768:	muleq	r0, r8, r5
   1176c:			; <UNDEFINED> instruction: 0x000005b0
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11774:	mov	r7, r0
   11778:	ldr	r6, [pc, #72]	; 117c8 <sprintf@plt+0x105c>
   1177c:	ldr	r5, [pc, #72]	; 117cc <sprintf@plt+0x1060>
   11780:	add	r6, pc, r6
   11784:	add	r5, pc, r5
   11788:	sub	r6, r6, r5
   1178c:	mov	r8, r1
   11790:	mov	r9, r2
   11794:	bl	10650 <open@plt-0x20>
   11798:	asrs	r6, r6, #2
   1179c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117a0:	mov	r4, #0
   117a4:	add	r4, r4, #1
   117a8:	ldr	r3, [r5], #4
   117ac:	mov	r2, r9
   117b0:	mov	r1, r8
   117b4:	mov	r0, r7
   117b8:	blx	r3
   117bc:	cmp	r6, r4
   117c0:	bne	117a4 <sprintf@plt+0x1038>
   117c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117c8:	andeq	r0, r1, r4, ror r7
   117cc:	andeq	r0, r1, ip, ror #14
   117d0:	bx	lr

Disassembly of section .fini:

000117d4 <.fini>:
   117d4:	push	{r3, lr}
   117d8:	pop	{r3, pc}
