
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010a70 <.init>:
   10a70:	push	{r3, lr}
   10a74:	bl	10c5c <__assert_fail@plt+0x4c>
   10a78:	pop	{r3, pc}

Disassembly of section .plt:

00010a7c <calloc@plt-0x14>:
   10a7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10a80:	ldr	lr, [pc, #4]	; 10a8c <calloc@plt-0x4>
   10a84:	add	lr, pc, lr
   10a88:	ldr	pc, [lr, #8]!
   10a8c:	andeq	r9, r1, r4, ror r5

00010a90 <calloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #102400	; 0x19000
   10a98:	ldr	pc, [ip, #1396]!	; 0x574

00010a9c <strcmp@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #102400	; 0x19000
   10aa4:	ldr	pc, [ip, #1388]!	; 0x56c

00010aa8 <fopen@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #102400	; 0x19000
   10ab0:	ldr	pc, [ip, #1380]!	; 0x564

00010ab4 <free@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #102400	; 0x19000
   10abc:	ldr	pc, [ip, #1372]!	; 0x55c

00010ac0 <utf8proc_get_property@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #102400	; 0x19000
   10ac8:	ldr	pc, [ip, #1364]!	; 0x554

00010acc <fgets@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #102400	; 0x19000
   10ad4:	ldr	pc, [ip, #1356]!	; 0x54c

00010ad8 <utf8proc_encode_char@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #102400	; 0x19000
   10ae0:	ldr	pc, [ip, #1348]!	; 0x544

00010ae4 <strdup@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #102400	; 0x19000
   10aec:	ldr	pc, [ip, #1340]!	; 0x53c

00010af0 <rewind@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #102400	; 0x19000
   10af8:	ldr	pc, [ip, #1332]!	; 0x534

00010afc <utf8proc_tolower@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #102400	; 0x19000
   10b04:	ldr	pc, [ip, #1324]!	; 0x52c

00010b08 <__xstat@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #102400	; 0x19000
   10b10:	ldr	pc, [ip, #1316]!	; 0x524

00010b14 <fread@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #102400	; 0x19000
   10b1c:	ldr	pc, [ip, #1308]!	; 0x51c

00010b20 <utf8proc_iterate@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #102400	; 0x19000
   10b28:	ldr	pc, [ip, #1300]!	; 0x514

00010b2c <malloc@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #102400	; 0x19000
   10b34:	ldr	pc, [ip, #1292]!	; 0x50c

00010b38 <__libc_start_main@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #102400	; 0x19000
   10b40:	ldr	pc, [ip, #1284]!	; 0x504

00010b44 <__sysv_signal@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #102400	; 0x19000
   10b4c:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b50 <__gmon_start__@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #102400	; 0x19000
   10b58:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b5c <exit@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #102400	; 0x19000
   10b64:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b68 <utf8proc_category@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #102400	; 0x19000
   10b70:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b74 <strlen@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #102400	; 0x19000
   10b7c:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b80 <fprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #102400	; 0x19000
   10b88:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b8c <__isoc99_sscanf@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #102400	; 0x19000
   10b94:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b98 <fclose@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #102400	; 0x19000
   10ba0:	ldr	pc, [ip, #1220]!	; 0x4c4

00010ba4 <utf8proc_NFC@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #102400	; 0x19000
   10bac:	ldr	pc, [ip, #1212]!	; 0x4bc

00010bb0 <fputc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #102400	; 0x19000
   10bb8:	ldr	pc, [ip, #1204]!	; 0x4b4

00010bbc <sprintf@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #102400	; 0x19000
   10bc4:	ldr	pc, [ip, #1196]!	; 0x4ac

00010bc8 <atoi@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #102400	; 0x19000
   10bd0:	ldr	pc, [ip, #1188]!	; 0x4a4

00010bd4 <utf8proc_errmsg@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #102400	; 0x19000
   10bdc:	ldr	pc, [ip, #1180]!	; 0x49c

00010be0 <fputs@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #102400	; 0x19000
   10be8:	ldr	pc, [ip, #1172]!	; 0x494

00010bec <strncmp@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #102400	; 0x19000
   10bf4:	ldr	pc, [ip, #1164]!	; 0x48c

00010bf8 <abort@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #102400	; 0x19000
   10c00:	ldr	pc, [ip, #1156]!	; 0x484

00010c04 <getc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #102400	; 0x19000
   10c0c:	ldr	pc, [ip, #1148]!	; 0x47c

00010c10 <__assert_fail@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #102400	; 0x19000
   10c18:	ldr	pc, [ip, #1140]!	; 0x474

Disassembly of section .text:

00010c20 <error@@Base-0x22d8>:
   10c20:	mov	fp, #0
   10c24:	mov	lr, #0
   10c28:	pop	{r1}		; (ldr r1, [sp], #4)
   10c2c:	mov	r2, sp
   10c30:	push	{r2}		; (str r2, [sp, #-4]!)
   10c34:	push	{r0}		; (str r0, [sp, #-4]!)
   10c38:	ldr	ip, [pc, #16]	; 10c50 <__assert_fail@plt+0x40>
   10c3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c40:	ldr	r0, [pc, #12]	; 10c54 <__assert_fail@plt+0x44>
   10c44:	ldr	r3, [pc, #12]	; 10c58 <__assert_fail@plt+0x48>
   10c48:	bl	10b38 <__libc_start_main@plt>
   10c4c:	bl	10bf8 <abort@plt>
   10c50:	muleq	r1, r0, fp
   10c54:	andeq	r1, r1, ip, lsl fp
   10c58:	andeq	r5, r1, r0, lsr fp
   10c5c:	ldr	r3, [pc, #20]	; 10c78 <__assert_fail@plt+0x68>
   10c60:	ldr	r2, [pc, #20]	; 10c7c <__assert_fail@plt+0x6c>
   10c64:	add	r3, pc, r3
   10c68:	ldr	r2, [r3, r2]
   10c6c:	cmp	r2, #0
   10c70:	bxeq	lr
   10c74:	b	10b50 <__gmon_start__@plt>
   10c78:	muleq	r1, r4, r3
   10c7c:	strdeq	r0, [r0], -r8
   10c80:	ldr	r0, [pc, #24]	; 10ca0 <__assert_fail@plt+0x90>
   10c84:	ldr	r3, [pc, #24]	; 10ca4 <__assert_fail@plt+0x94>
   10c88:	cmp	r3, r0
   10c8c:	bxeq	lr
   10c90:	ldr	r3, [pc, #16]	; 10ca8 <__assert_fail@plt+0x98>
   10c94:	cmp	r3, #0
   10c98:	bxeq	lr
   10c9c:	bx	r3
   10ca0:	andeq	sl, r2, r8, asr r3
   10ca4:	andeq	sl, r2, r8, asr r3
   10ca8:	andeq	r0, r0, r0
   10cac:	ldr	r0, [pc, #36]	; 10cd8 <__assert_fail@plt+0xc8>
   10cb0:	ldr	r1, [pc, #36]	; 10cdc <__assert_fail@plt+0xcc>
   10cb4:	sub	r1, r1, r0
   10cb8:	asr	r1, r1, #2
   10cbc:	add	r1, r1, r1, lsr #31
   10cc0:	asrs	r1, r1, #1
   10cc4:	bxeq	lr
   10cc8:	ldr	r3, [pc, #16]	; 10ce0 <__assert_fail@plt+0xd0>
   10ccc:	cmp	r3, #0
   10cd0:	bxeq	lr
   10cd4:	bx	r3
   10cd8:	andeq	sl, r2, r8, asr r3
   10cdc:	andeq	sl, r2, r8, asr r3
   10ce0:	andeq	r0, r0, r0
   10ce4:	push	{r4, lr}
   10ce8:	ldr	r4, [pc, #24]	; 10d08 <__assert_fail@plt+0xf8>
   10cec:	ldrb	r3, [r4]
   10cf0:	cmp	r3, #0
   10cf4:	popne	{r4, pc}
   10cf8:	bl	10c80 <__assert_fail@plt+0x70>
   10cfc:	mov	r3, #1
   10d00:	strb	r3, [r4]
   10d04:	pop	{r4, pc}
   10d08:	andeq	sl, r2, r8, asr r3
   10d0c:	b	10cac <__assert_fail@plt+0x9c>
   10d10:	push	{fp, lr}
   10d14:	mov	fp, sp
   10d18:	sub	sp, sp, #32
   10d1c:	ldr	r2, [pc, #268]	; 10e30 <__assert_fail@plt+0x220>
   10d20:	ldr	r2, [pc, r2]
   10d24:	ldr	r3, [pc, #264]	; 10e34 <__assert_fail@plt+0x224>
   10d28:	ldr	r3, [pc, r3]
   10d2c:	str	r0, [fp, #-4]
   10d30:	str	r1, [fp, #-8]
   10d34:	mov	r0, #0
   10d38:	str	r0, [sp, #12]
   10d3c:	ldr	r0, [fp, #-4]
   10d40:	ldr	r1, [pc, #244]	; 10e3c <__assert_fail@plt+0x22c>
   10d44:	ldr	r1, [pc, r1]
   10d48:	add	r0, r1, r0, lsl #4
   10d4c:	ldr	r0, [r0, #12]
   10d50:	add	r0, r0, #1
   10d54:	movw	r1, #4
   10d58:	str	r3, [sp, #8]
   10d5c:	blx	r2
   10d60:	str	r0, [fp, #-12]
   10d64:	movw	r0, #0
   10d68:	str	r0, [sp, #16]
   10d6c:	ldr	r0, [pc, #196]	; 10e38 <__assert_fail@plt+0x228>
   10d70:	ldr	r0, [pc, r0]
   10d74:	ldr	r1, [sp, #16]
   10d78:	ldr	r2, [fp, #-4]
   10d7c:	ldr	r3, [pc, #188]	; 10e40 <__assert_fail@plt+0x230>
   10d80:	ldr	r3, [pc, r3]
   10d84:	add	r2, r3, r2, lsl #4
   10d88:	ldr	r2, [r2, #12]
   10d8c:	cmp	r1, r2
   10d90:	str	r0, [sp, #4]
   10d94:	bge	10e18 <__assert_fail@plt+0x208>
   10d98:	ldr	r0, [fp, #-4]
   10d9c:	ldr	r1, [pc, #160]	; 10e44 <__assert_fail@plt+0x234>
   10da0:	ldr	r1, [pc, r1]
   10da4:	ldr	r0, [r1, r0, lsl #2]
   10da8:	ldr	r1, [sp, #16]
   10dac:	add	r0, r0, r1, lsl #3
   10db0:	ldr	r0, [r0]
   10db4:	add	r0, r0, #12
   10db8:	ldr	r1, [fp, #-4]
   10dbc:	movw	r2, #1
   10dc0:	sub	r1, r2, r1
   10dc4:	add	r0, r0, r1
   10dc8:	ldrsb	r0, [r0]
   10dcc:	cmp	r0, #0
   10dd0:	beq	10e04 <__assert_fail@plt+0x1f4>
   10dd4:	ldr	r0, [fp, #-4]
   10dd8:	ldr	r1, [pc, #104]	; 10e48 <__assert_fail@plt+0x238>
   10ddc:	ldr	r1, [pc, r1]
   10de0:	ldr	r0, [r1, r0, lsl #2]
   10de4:	ldr	r1, [sp, #16]
   10de8:	add	r0, r0, r1, lsl #3
   10dec:	ldr	r1, [fp, #-12]
   10df0:	ldr	r2, [sp, #12]
   10df4:	add	r3, r2, #1
   10df8:	str	r3, [sp, #12]
   10dfc:	add	r1, r1, r2, lsl #2
   10e00:	str	r0, [r1]
   10e04:	b	10e08 <__assert_fail@plt+0x1f8>
   10e08:	ldr	r0, [sp, #16]
   10e0c:	add	r0, r0, #1
   10e10:	str	r0, [sp, #16]
   10e14:	b	10d6c <__assert_fail@plt+0x15c>
   10e18:	ldr	r0, [sp, #12]
   10e1c:	ldr	r1, [fp, #-8]
   10e20:	str	r0, [r1]
   10e24:	ldr	r0, [fp, #-12]
   10e28:	mov	sp, fp
   10e2c:	pop	{fp, pc}
   10e30:	andeq	r9, r1, r8, lsl r4
   10e34:	andeq	r9, r1, r4, lsr #7
   10e38:	andeq	r9, r1, ip, asr r3
   10e3c:	andeq	r9, r1, r8, lsl #7
   10e40:	andeq	r9, r1, ip, asr #6
   10e44:	andeq	r9, r1, ip, lsr #7
   10e48:	andeq	r9, r1, r0, ror r3
   10e4c:	push	{fp, lr}
   10e50:	mov	fp, sp
   10e54:	sub	sp, sp, #48	; 0x30
   10e58:	str	r0, [fp, #-4]
   10e5c:	movw	r0, #0
   10e60:	str	r0, [fp, #-8]
   10e64:	ldr	r0, [fp, #-8]
   10e68:	cmp	r0, #2
   10e6c:	bge	11060 <__assert_fail@plt+0x450>
   10e70:	ldr	r0, [pc, #624]	; 110e8 <__assert_fail@plt+0x4d8>
   10e74:	ldr	r2, [pc, r0]
   10e78:	ldr	r0, [pc, #620]	; 110ec <__assert_fail@plt+0x4dc>
   10e7c:	ldr	r0, [pc, r0]
   10e80:	ldr	r1, [fp, #-8]
   10e84:	ldr	r3, [pc, #648]	; 11114 <__assert_fail@plt+0x504>
   10e88:	ldr	r3, [pc, r3]
   10e8c:	add	r3, r3, r1, lsl #4
   10e90:	ldr	ip, [fp, #-4]
   10e94:	add	r1, ip, r1, lsl #2
   10e98:	ldr	r1, [r1]
   10e9c:	str	r0, [sp, #24]
   10ea0:	mov	r0, r3
   10ea4:	ldr	r3, [sp, #24]
   10ea8:	blx	r3
   10eac:	ldr	r0, [fp, #-8]
   10eb0:	cmp	r0, #0
   10eb4:	bne	10ee0 <__assert_fail@plt+0x2d0>
   10eb8:	ldr	r0, [pc, #560]	; 110f0 <__assert_fail@plt+0x4e0>
   10ebc:	ldr	r0, [pc, r0]
   10ec0:	ldrb	r0, [r0, #11]
   10ec4:	cmp	r0, #0
   10ec8:	beq	10ee0 <__assert_fail@plt+0x2d0>
   10ecc:	ldr	r0, [pc, #568]	; 1110c <__assert_fail@plt+0x4fc>
   10ed0:	add	r0, pc, r0
   10ed4:	ldr	r1, [pc, #564]	; 11110 <__assert_fail@plt+0x500>
   10ed8:	ldr	r1, [pc, r1]
   10edc:	blx	r1
   10ee0:	ldr	r0, [pc, #524]	; 110f4 <__assert_fail@plt+0x4e4>
   10ee4:	ldr	r0, [pc, r0]
   10ee8:	ldr	r1, [fp, #-8]
   10eec:	ldr	r2, [pc, #548]	; 11118 <__assert_fail@plt+0x508>
   10ef0:	ldr	r2, [pc, r2]
   10ef4:	add	r3, r2, r1, lsl #4
   10ef8:	ldr	ip, [pc, #540]	; 1111c <__assert_fail@plt+0x50c>
   10efc:	ldr	ip, [pc, ip]
   10f00:	add	r1, ip, r1, lsl #4
   10f04:	str	r0, [sp, #20]
   10f08:	mov	r0, r3
   10f0c:	str	r2, [sp, #16]
   10f10:	bl	14164 <error@@Base+0x126c>
   10f14:	ldr	r0, [fp, #-8]
   10f18:	ldr	r1, [sp, #16]
   10f1c:	add	r0, r1, r0, lsl #4
   10f20:	ldr	r0, [r0, #12]
   10f24:	add	r0, r0, #1
   10f28:	mov	r1, #8
   10f2c:	bl	12818 <__assert_fail@plt+0x1c08>
   10f30:	ldr	r1, [fp, #-8]
   10f34:	ldr	r2, [pc, #484]	; 11120 <__assert_fail@plt+0x510>
   10f38:	ldr	r2, [pc, r2]
   10f3c:	str	r0, [r2, r1, lsl #2]
   10f40:	mov	r0, #0
   10f44:	str	r0, [fp, #-12]
   10f48:	ldr	r0, [fp, #-8]
   10f4c:	ldr	r1, [sp, #16]
   10f50:	add	r0, r1, r0, lsl #4
   10f54:	ldr	r0, [r0]
   10f58:	str	r0, [fp, #-16]
   10f5c:	ldr	r0, [fp, #-16]
   10f60:	movw	r1, #0
   10f64:	cmp	r0, r1
   10f68:	beq	1104c <__assert_fail@plt+0x43c>
   10f6c:	ldr	r0, [pc, #388]	; 110f8 <__assert_fail@plt+0x4e8>
   10f70:	ldr	r0, [pc, r0]
   10f74:	ldr	r1, [pc, #384]	; 110fc <__assert_fail@plt+0x4ec>
   10f78:	ldr	r1, [pc, r1]
   10f7c:	ldr	r2, [fp, #-16]
   10f80:	ldr	r2, [r2, #8]
   10f84:	str	r1, [sp, #12]
   10f88:	mov	r1, r2
   10f8c:	ldr	r2, [sp, #12]
   10f90:	blx	r2
   10f94:	str	r0, [fp, #-20]	; 0xffffffec
   10f98:	ldr	r0, [fp, #-20]	; 0xffffffec
   10f9c:	movw	r1, #0
   10fa0:	cmp	r0, r1
   10fa4:	bne	11000 <__assert_fail@plt+0x3f0>
   10fa8:	ldr	r0, [pc, #344]	; 11108 <__assert_fail@plt+0x4f8>
   10fac:	ldr	r0, [pc, r0]
   10fb0:	movw	r1, #1
   10fb4:	str	r0, [sp, #8]
   10fb8:	mov	r0, r1
   10fbc:	movw	r1, #16
   10fc0:	ldr	r2, [sp, #8]
   10fc4:	blx	r2
   10fc8:	ldr	r1, [pc, #304]	; 11100 <__assert_fail@plt+0x4f0>
   10fcc:	ldr	r1, [pc, r1]
   10fd0:	ldr	r2, [pc, #300]	; 11104 <__assert_fail@plt+0x4f4>
   10fd4:	ldr	r2, [pc, r2]
   10fd8:	str	r0, [fp, #-20]	; 0xffffffec
   10fdc:	ldr	r0, [fp, #-16]
   10fe0:	ldr	r0, [r0, #8]
   10fe4:	ldr	lr, [fp, #-20]	; 0xffffffec
   10fe8:	str	r0, [lr, #8]
   10fec:	ldr	r0, [fp, #-20]	; 0xffffffec
   10ff0:	str	r0, [sp, #4]
   10ff4:	mov	r0, r1
   10ff8:	ldr	r1, [sp, #4]
   10ffc:	blx	r2
   11000:	ldr	r0, [fp, #-20]	; 0xffffffec
   11004:	ldr	r1, [fp, #-8]
   11008:	add	r0, r0, r1
   1100c:	mov	r1, #1
   11010:	strb	r1, [r0, #12]
   11014:	ldr	r0, [fp, #-20]	; 0xffffffec
   11018:	ldr	r1, [fp, #-8]
   1101c:	ldr	r2, [pc, #256]	; 11124 <__assert_fail@plt+0x514>
   11020:	ldr	r2, [pc, r2]
   11024:	ldr	r1, [r2, r1, lsl #2]
   11028:	ldr	r2, [fp, #-12]
   1102c:	add	r3, r2, #1
   11030:	str	r3, [fp, #-12]
   11034:	add	r1, r1, r2, lsl #3
   11038:	str	r0, [r1]
   1103c:	ldr	r0, [fp, #-16]
   11040:	ldr	r0, [r0, #4]
   11044:	str	r0, [fp, #-16]
   11048:	b	10f5c <__assert_fail@plt+0x34c>
   1104c:	b	11050 <__assert_fail@plt+0x440>
   11050:	ldr	r0, [fp, #-8]
   11054:	add	r0, r0, #1
   11058:	str	r0, [fp, #-8]
   1105c:	b	10e64 <__assert_fail@plt+0x254>
   11060:	ldr	r0, [pc, #108]	; 110d4 <__assert_fail@plt+0x4c4>
   11064:	ldr	r1, [pc, r0]
   11068:	movw	r0, #0
   1106c:	bl	10d10 <__assert_fail@plt+0x100>
   11070:	ldr	r1, [pc, #84]	; 110cc <__assert_fail@plt+0x4bc>
   11074:	ldr	r1, [pc, r1]
   11078:	ldr	lr, [pc, #80]	; 110d0 <__assert_fail@plt+0x4c0>
   1107c:	ldr	lr, [pc, lr]
   11080:	str	r0, [lr]
   11084:	ldr	r0, [r1]
   11088:	movw	r1, #65535	; 0xffff
   1108c:	cmp	r0, r1
   11090:	ble	110a8 <__assert_fail@plt+0x498>
   11094:	ldr	r0, [pc, #68]	; 110e0 <__assert_fail@plt+0x4d0>
   11098:	add	r0, pc, r0
   1109c:	ldr	r1, [pc, #64]	; 110e4 <__assert_fail@plt+0x4d4>
   110a0:	ldr	r1, [pc, r1]
   110a4:	blx	r1
   110a8:	ldr	r0, [pc, #44]	; 110dc <__assert_fail@plt+0x4cc>
   110ac:	ldr	r1, [pc, r0]
   110b0:	movw	r0, #1
   110b4:	bl	10d10 <__assert_fail@plt+0x100>
   110b8:	ldr	r1, [pc, #24]	; 110d8 <__assert_fail@plt+0x4c8>
   110bc:	ldr	r1, [pc, r1]
   110c0:	str	r0, [r1]
   110c4:	mov	sp, fp
   110c8:	pop	{fp, pc}
   110cc:	andeq	r9, r1, r8, lsr #1
   110d0:	muleq	r1, ip, r0
   110d4:	strheq	r9, [r1], -r8
   110d8:	andeq	r8, r1, r4, ror #31
   110dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   110e0:	andeq	r4, r0, sl, lsr #22
   110e4:	andeq	r9, r1, ip
   110e8:	andeq	r9, r1, r0, asr r2
   110ec:	muleq	r1, r0, r2
   110f0:	andeq	r9, r1, r8, lsl #4
   110f4:	andeq	r9, r1, r8, ror #3
   110f8:	andeq	r9, r1, r4, ror r1
   110fc:	andeq	r9, r1, r0, ror r1
   11100:	andeq	r9, r1, r8, lsl r1
   11104:	ldrdeq	r9, [r1], -ip
   11108:	andeq	r9, r1, ip, lsl #3
   1110c:	ldrdeq	r4, [r0], -r8
   11110:	ldrdeq	r9, [r1], -r4
   11114:	andeq	r9, r1, r4, lsl #4
   11118:	ldrdeq	r9, [r1], -ip
   1111c:	muleq	r1, r0, r1
   11120:	andeq	r9, r1, r4, lsl r2
   11124:	andeq	r9, r1, ip, lsr #2
   11128:	sub	sp, sp, #28
   1112c:	str	r0, [sp, #24]
   11130:	str	r1, [sp, #20]
   11134:	str	r2, [sp, #16]
   11138:	movw	r0, #0
   1113c:	str	r0, [sp, #8]
   11140:	ldr	r1, [sp, #20]
   11144:	cmp	r1, r0
   11148:	beq	11220 <__assert_fail@plt+0x610>
   1114c:	ldr	r0, [sp, #24]
   11150:	ldr	r1, [sp, #20]
   11154:	ldr	r1, [r1, #8]
   11158:	movw	r2, #0
   1115c:	sub	r1, r2, r1
   11160:	cmp	r0, r1
   11164:	ble	111a8 <__assert_fail@plt+0x598>
   11168:	ldr	r0, [sp, #20]
   1116c:	ldr	r1, [r0, #8]
   11170:	ldr	r0, [r0, #12]
   11174:	ldr	r2, [sp, #24]
   11178:	add	r1, r2, r1
   1117c:	sub	r1, r1, #1
   11180:	asr	r2, r1, #1
   11184:	bic	r1, r1, #1
   11188:	add	r0, r0, r1
   1118c:	ldrh	r0, [r0]
   11190:	str	r0, [sp, #8]
   11194:	ldr	r0, [sp, #24]
   11198:	sub	r0, r0, #1
   1119c:	ldr	r1, [sp, #16]
   111a0:	str	r0, [r1]
   111a4:	str	r2, [sp, #4]
   111a8:	ldr	r0, [sp, #24]
   111ac:	ldr	r1, [sp, #20]
   111b0:	ldr	r1, [r1, #8]
   111b4:	cmp	r0, r1
   111b8:	bge	1121c <__assert_fail@plt+0x60c>
   111bc:	ldr	r0, [sp, #20]
   111c0:	ldr	r1, [r0, #8]
   111c4:	ldr	r0, [r0, #12]
   111c8:	ldr	r2, [sp, #24]
   111cc:	add	r1, r2, r1
   111d0:	add	r1, r1, #1
   111d4:	asr	r2, r1, #1
   111d8:	bic	r1, r1, #1
   111dc:	add	r0, r0, r1
   111e0:	ldrh	r0, [r0]
   111e4:	add	r0, r0, #1
   111e8:	str	r0, [sp, #12]
   111ec:	ldr	r0, [sp, #12]
   111f0:	ldr	r1, [sp, #8]
   111f4:	cmp	r0, r1
   111f8:	str	r2, [sp]
   111fc:	blt	11218 <__assert_fail@plt+0x608>
   11200:	ldr	r0, [sp, #12]
   11204:	str	r0, [sp, #8]
   11208:	ldr	r0, [sp, #24]
   1120c:	add	r0, r0, #1
   11210:	ldr	r1, [sp, #16]
   11214:	str	r0, [r1]
   11218:	b	1121c <__assert_fail@plt+0x60c>
   1121c:	b	11220 <__assert_fail@plt+0x610>
   11220:	ldr	r0, [sp, #8]
   11224:	add	sp, sp, #28
   11228:	bx	lr
   1122c:	push	{fp, lr}
   11230:	mov	fp, sp
   11234:	sub	sp, sp, #32
   11238:	str	r0, [fp, #-4]
   1123c:	str	r1, [fp, #-8]
   11240:	ldr	r0, [fp, #-4]
   11244:	ldr	r1, [fp, #-8]
   11248:	ldr	r1, [r1]
   1124c:	add	r2, sp, #12
   11250:	bl	11128 <__assert_fail@plt+0x518>
   11254:	str	r0, [fp, #-12]
   11258:	ldr	r0, [fp, #-12]
   1125c:	ldr	r1, [fp, #-4]
   11260:	add	r0, r0, r1
   11264:	str	r0, [sp, #16]
   11268:	ldr	r0, [pc, #304]	; 113a0 <__assert_fail@plt+0x790>
   1126c:	ldr	r0, [pc, r0]
   11270:	ldr	r1, [fp, #-12]
   11274:	ldr	r0, [r0]
   11278:	cmp	r1, r0
   1127c:	movw	r0, #0
   11280:	str	r0, [sp, #8]
   11284:	bge	112ec <__assert_fail@plt+0x6dc>
   11288:	ldr	r0, [pc, #276]	; 113a4 <__assert_fail@plt+0x794>
   1128c:	ldr	r0, [pc, r0]
   11290:	ldr	r1, [sp, #16]
   11294:	ldr	r0, [r0]
   11298:	cmp	r1, r0
   1129c:	movw	r0, #0
   112a0:	str	r0, [sp, #8]
   112a4:	bge	112ec <__assert_fail@plt+0x6dc>
   112a8:	ldr	r0, [pc, #264]	; 113b8 <__assert_fail@plt+0x7a8>
   112ac:	ldr	r0, [pc, r0]
   112b0:	ldr	r0, [r0]
   112b4:	ldr	r1, [fp, #-12]
   112b8:	ldr	r0, [r0, r1, lsl #2]
   112bc:	ldr	r0, [r0]
   112c0:	ldr	r1, [pc, #244]	; 113bc <__assert_fail@plt+0x7ac>
   112c4:	ldr	r1, [pc, r1]
   112c8:	ldr	r1, [r1]
   112cc:	ldr	r2, [sp, #16]
   112d0:	add	r1, r1, r2, lsl #2
   112d4:	ldr	r1, [r1]
   112d8:	ldr	r1, [r1]
   112dc:	cmp	r0, r1
   112e0:	movw	r0, #0
   112e4:	moveq	r0, #1
   112e8:	str	r0, [sp, #8]
   112ec:	ldr	r0, [sp, #8]
   112f0:	tst	r0, #1
   112f4:	beq	11314 <__assert_fail@plt+0x704>
   112f8:	ldr	r0, [fp, #-12]
   112fc:	add	r0, r0, #1
   11300:	str	r0, [fp, #-12]
   11304:	ldr	r0, [sp, #16]
   11308:	add	r0, r0, #1
   1130c:	str	r0, [sp, #16]
   11310:	b	11268 <__assert_fail@plt+0x658>
   11314:	ldr	r0, [pc, #140]	; 113a8 <__assert_fail@plt+0x798>
   11318:	ldr	r0, [pc, r0]
   1131c:	ldr	r1, [fp, #-12]
   11320:	ldr	r0, [r0]
   11324:	cmp	r1, r0
   11328:	bne	11340 <__assert_fail@plt+0x730>
   1132c:	ldr	r0, [pc, #120]	; 113ac <__assert_fail@plt+0x79c>
   11330:	ldr	r0, [pc, r0]
   11334:	ldr	r1, [fp, #-4]
   11338:	add	r1, r1, #1
   1133c:	str	r1, [r0]
   11340:	ldr	r0, [pc, #104]	; 113b0 <__assert_fail@plt+0x7a0>
   11344:	ldr	r0, [pc, r0]
   11348:	ldr	r1, [sp, #16]
   1134c:	ldr	r0, [r0]
   11350:	cmp	r1, r0
   11354:	bne	1136c <__assert_fail@plt+0x75c>
   11358:	ldr	r0, [pc, #84]	; 113b4 <__assert_fail@plt+0x7a4>
   1135c:	ldr	r0, [pc, r0]
   11360:	ldr	r1, [fp, #-4]
   11364:	sub	r1, r1, #1
   11368:	str	r1, [r0]
   1136c:	ldr	r0, [fp, #-12]
   11370:	ldr	r1, [fp, #-8]
   11374:	ldr	r2, [r1, #8]
   11378:	ldr	r1, [r1, #12]
   1137c:	ldr	r3, [fp, #-4]
   11380:	add	r2, r3, r2
   11384:	asr	r3, r2, #1
   11388:	bic	r2, r2, #1
   1138c:	add	r1, r1, r2
   11390:	strh	r0, [r1]
   11394:	str	r3, [sp, #4]
   11398:	mov	sp, fp
   1139c:	pop	{fp, pc}
   113a0:			; <UNDEFINED> instruction: 0x00018eb0
   113a4:	andeq	r8, r1, r8, lsl lr
   113a8:	andeq	r8, r1, r4, lsl #28
   113ac:	strdeq	r8, [r1], -r4
   113b0:	andeq	r8, r1, r0, ror #26
   113b4:			; <UNDEFINED> instruction: 0x00018db8
   113b8:	andeq	r8, r1, ip, ror #28
   113bc:	ldrdeq	r8, [r1], -ip
   113c0:	push	{fp, lr}
   113c4:	mov	fp, sp
   113c8:	sub	sp, sp, #24
   113cc:	ldr	r0, [pc, #360]	; 1153c <__assert_fail@plt+0x92c>
   113d0:	ldr	r0, [pc, r0]
   113d4:	ldr	r1, [pc, #356]	; 11540 <__assert_fail@plt+0x930>
   113d8:	ldr	r1, [pc, r1]
   113dc:	ldr	r2, [pc, #352]	; 11544 <__assert_fail@plt+0x934>
   113e0:	ldr	r2, [pc, r2]
   113e4:	ldr	r3, [pc, #348]	; 11548 <__assert_fail@plt+0x938>
   113e8:	ldr	r3, [pc, r3]
   113ec:	mvn	ip, #0
   113f0:	str	ip, [fp, #-4]
   113f4:	ldr	r3, [r3]
   113f8:	movw	ip, #0
   113fc:	sub	r3, ip, r3
   11400:	str	r3, [r2]
   11404:	ldr	r1, [r1]
   11408:	str	r1, [r0]
   1140c:	ldr	r0, [pc, #312]	; 1154c <__assert_fail@plt+0x93c>
   11410:	ldr	r0, [pc, r0]
   11414:	ldr	r1, [pc, #308]	; 11550 <__assert_fail@plt+0x940>
   11418:	ldr	r1, [pc, r1]
   1141c:	ldr	r2, [pc, #304]	; 11554 <__assert_fail@plt+0x944>
   11420:	ldr	r2, [pc, r2]
   11424:	ldr	r2, [r2]
   11428:	ldr	r1, [r1]
   1142c:	ldr	r0, [r0]
   11430:	sub	r0, r1, r0
   11434:	cmp	r2, r0
   11438:	bgt	11534 <__assert_fail@plt+0x924>
   1143c:	ldr	r0, [pc, #288]	; 11564 <__assert_fail@plt+0x954>
   11440:	ldr	r0, [pc, r0]
   11444:	movw	r1, #1
   11448:	str	r0, [sp, #8]
   1144c:	mov	r0, r1
   11450:	movw	r1, #16
   11454:	ldr	r2, [sp, #8]
   11458:	blx	r2
   1145c:	ldr	r1, [pc, #252]	; 11560 <__assert_fail@plt+0x950>
   11460:	ldr	r1, [pc, r1]
   11464:	str	r0, [sp, #12]
   11468:	ldr	r0, [fp, #-4]
   1146c:	add	r0, r0, #1
   11470:	str	r0, [fp, #-4]
   11474:	ldr	r2, [sp, #12]
   11478:	str	r0, [r2, #8]
   1147c:	ldr	r0, [fp, #-4]
   11480:	add	r0, r0, #1
   11484:	movw	r2, #2
   11488:	str	r1, [sp, #4]
   1148c:	mov	r1, r2
   11490:	ldr	r2, [sp, #4]
   11494:	blx	r2
   11498:	ldr	r1, [pc, #184]	; 11558 <__assert_fail@plt+0x948>
   1149c:	ldr	r1, [pc, r1]
   114a0:	ldr	r2, [pc, #180]	; 1155c <__assert_fail@plt+0x94c>
   114a4:	ldr	r2, [pc, r2]
   114a8:	ldr	lr, [sp, #12]
   114ac:	str	r0, [lr, #12]
   114b0:	ldr	r0, [sp, #12]
   114b4:	str	r0, [sp]
   114b8:	mov	r0, r1
   114bc:	ldr	r1, [sp]
   114c0:	blx	r2
   114c4:	ldr	r0, [fp, #-4]
   114c8:	movw	r1, #0
   114cc:	sub	r0, r1, r0
   114d0:	str	r0, [fp, #-8]
   114d4:	ldr	r0, [fp, #-8]
   114d8:	ldr	r1, [fp, #-4]
   114dc:	cmp	r0, r1
   114e0:	bgt	11530 <__assert_fail@plt+0x920>
   114e4:	ldr	r0, [pc, #124]	; 11568 <__assert_fail@plt+0x958>
   114e8:	ldr	r0, [pc, r0]
   114ec:	ldr	r1, [fp, #-8]
   114f0:	ldr	r0, [r0]
   114f4:	cmp	r1, r0
   114f8:	blt	11520 <__assert_fail@plt+0x910>
   114fc:	ldr	r0, [pc, #104]	; 1156c <__assert_fail@plt+0x95c>
   11500:	ldr	r0, [pc, r0]
   11504:	ldr	r1, [fp, #-8]
   11508:	ldr	r0, [r0]
   1150c:	cmp	r1, r0
   11510:	bgt	11520 <__assert_fail@plt+0x910>
   11514:	ldr	r0, [fp, #-8]
   11518:	ldr	r1, [sp, #12]
   1151c:	bl	1122c <__assert_fail@plt+0x61c>
   11520:	ldr	r0, [fp, #-8]
   11524:	add	r0, r0, #2
   11528:	str	r0, [fp, #-8]
   1152c:	b	114d4 <__assert_fail@plt+0x8c4>
   11530:	b	1140c <__assert_fail@plt+0x7fc>
   11534:	mov	sp, fp
   11538:	pop	{fp, pc}
   1153c:	andeq	r8, r1, r4, asr #26
   11540:	andeq	r8, r1, ip, asr #25
   11544:	andeq	r8, r1, r4, asr #26
   11548:	andeq	r8, r1, r4, lsr sp
   1154c:	andeq	r8, r1, ip, lsl #26
   11550:	andeq	r8, r1, ip, lsl #25
   11554:	andeq	r8, r1, r4, lsl #26
   11558:	andeq	r8, r1, r8, lsr ip
   1155c:	andeq	r8, r1, ip, lsr ip
   11560:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11564:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11568:	andeq	r8, r1, ip, lsr ip
   1156c:	andeq	r8, r1, r4, lsl ip
   11570:	push	{fp, lr}
   11574:	mov	fp, sp
   11578:	sub	sp, sp, #24
   1157c:	ldr	r0, [pc, #220]	; 11660 <__assert_fail@plt+0xa50>
   11580:	ldr	r0, [pc, r0]
   11584:	ldr	r1, [pc, #216]	; 11664 <__assert_fail@plt+0xa54>
   11588:	ldr	r1, [pc, r1]
   1158c:	ldr	r2, [pc, #212]	; 11668 <__assert_fail@plt+0xa58>
   11590:	ldr	r2, [pc, r2]
   11594:	ldr	r2, [r2]
   11598:	ldr	r1, [r1]
   1159c:	sub	r1, r2, r1
   115a0:	str	r1, [fp, #-4]
   115a4:	ldr	r0, [r0, #4]
   115a8:	str	r0, [sp, #4]
   115ac:	ldr	r0, [sp, #4]
   115b0:	movw	r1, #0
   115b4:	cmp	r0, r1
   115b8:	beq	11658 <__assert_fail@plt+0xa48>
   115bc:	ldr	r0, [sp, #4]
   115c0:	ldr	r1, [r0, #8]
   115c4:	ldr	r0, [r0, #12]
   115c8:	ldr	r2, [fp, #-4]
   115cc:	add	r1, r2, r1
   115d0:	asr	r2, r1, #1
   115d4:	bic	r1, r1, #1
   115d8:	add	r0, r0, r1
   115dc:	ldrh	r0, [r0]
   115e0:	str	r0, [fp, #-8]
   115e4:	ldr	r0, [fp, #-4]
   115e8:	ldr	r1, [sp, #4]
   115ec:	ldr	r1, [r1]
   115f0:	add	r3, sp, #8
   115f4:	str	r2, [sp]
   115f8:	mov	r2, r3
   115fc:	bl	11128 <__assert_fail@plt+0x518>
   11600:	str	r0, [sp, #12]
   11604:	ldr	r0, [fp, #-8]
   11608:	ldr	r1, [sp, #12]
   1160c:	cmp	r0, r1
   11610:	ble	11640 <__assert_fail@plt+0xa30>
   11614:	ldr	r0, [pc, #80]	; 1166c <__assert_fail@plt+0xa5c>
   11618:	ldr	r0, [pc, r0]
   1161c:	ldr	r0, [r0]
   11620:	ldr	r1, [fp, #-8]
   11624:	sub	r1, r1, #1
   11628:	str	r1, [fp, #-8]
   1162c:	add	r0, r0, r1, lsl #2
   11630:	ldr	r0, [r0]
   11634:	movw	r1, #1
   11638:	strb	r1, [r0, #4]
   1163c:	b	11604 <__assert_fail@plt+0x9f4>
   11640:	ldr	r0, [sp, #8]
   11644:	str	r0, [fp, #-4]
   11648:	ldr	r0, [sp, #4]
   1164c:	ldr	r0, [r0]
   11650:	str	r0, [sp, #4]
   11654:	b	115ac <__assert_fail@plt+0x99c>
   11658:	mov	sp, fp
   1165c:	pop	{fp, pc}
   11660:	andeq	r8, r1, r4, asr fp
   11664:	muleq	r1, r4, fp
   11668:	andeq	r8, r1, r4, lsl fp
   1166c:	andeq	r8, r1, r0, lsl #22
   11670:	push	{fp, lr}
   11674:	mov	fp, sp
   11678:	sub	sp, sp, #56	; 0x38
   1167c:	ldr	r3, [pc, #480]	; 11864 <__assert_fail@plt+0xc54>
   11680:	ldr	r3, [pc, r3]
   11684:	str	r0, [fp, #-4]
   11688:	str	r1, [fp, #-8]
   1168c:	str	r2, [fp, #-12]
   11690:	ldr	r0, [fp, #-4]
   11694:	blx	r3
   11698:	movw	r0, #0
   1169c:	str	r0, [fp, #-16]
   116a0:	ldr	r0, [fp, #-16]
   116a4:	ldr	r1, [fp, #-4]
   116a8:	movw	r2, #8052	; 0x1f74
   116ac:	add	r1, r1, r2
   116b0:	ldr	r1, [r1]
   116b4:	cmp	r0, r1
   116b8:	bge	1185c <__assert_fail@plt+0xc4c>
   116bc:	ldr	r0, [pc, #420]	; 11868 <__assert_fail@plt+0xc58>
   116c0:	ldr	r0, [pc, r0]
   116c4:	ldr	r1, [fp, #-4]
   116c8:	movw	r2, #8048	; 0x1f70
   116cc:	ldr	r1, [r1, r2]
   116d0:	ldr	r3, [fp, #-16]
   116d4:	ldr	r1, [r1, r3, lsl #2]
   116d8:	ldr	r1, [r1, #12]
   116dc:	str	r1, [fp, #-20]	; 0xffffffec
   116e0:	ldr	r1, [fp, #-4]
   116e4:	ldr	r1, [r1, r2]
   116e8:	ldr	r3, [fp, #-16]
   116ec:	ldr	r1, [r1, r3, lsl #2]
   116f0:	ldr	r1, [r1, #16]
   116f4:	str	r1, [fp, #-24]	; 0xffffffe8
   116f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   116fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11700:	ldr	ip, [pc, #364]	; 11874 <__assert_fail@plt+0xc64>
   11704:	ldr	ip, [pc, ip]
   11708:	str	r0, [sp, #28]
   1170c:	mov	r0, ip
   11710:	str	r2, [sp, #24]
   11714:	mov	r2, r3
   11718:	bl	13450 <error@@Base+0x558>
   1171c:	ldr	r0, [fp, #-8]
   11720:	ldr	r1, [fp, #-20]	; 0xffffffec
   11724:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11728:	bl	13450 <error@@Base+0x558>
   1172c:	ldr	r0, [fp, #-8]
   11730:	ldr	r1, [fp, #-4]
   11734:	ldr	r2, [sp, #24]
   11738:	ldr	r1, [r1, r2]
   1173c:	ldr	r3, [fp, #-16]
   11740:	ldr	r1, [r1, r3, lsl #2]
   11744:	ldr	r1, [r1, #8]
   11748:	str	r0, [sp, #20]
   1174c:	mov	r0, r1
   11750:	bl	10b74 <strlen@plt>
   11754:	mov	r1, r0
   11758:	ldr	r2, [sp, #20]
   1175c:	add	r0, r2, r0, lsl #3
   11760:	ldr	r3, [fp, #-20]	; 0xffffffec
   11764:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11768:	str	r1, [sp, #16]
   1176c:	mov	r1, r3
   11770:	ldr	r3, [sp, #28]
   11774:	blx	r3
   11778:	ldr	r0, [fp, #-12]
   1177c:	movw	r1, #0
   11780:	cmp	r0, r1
   11784:	beq	11848 <__assert_fail@plt+0xc38>
   11788:	ldr	r0, [pc, #220]	; 1186c <__assert_fail@plt+0xc5c>
   1178c:	ldr	r0, [pc, r0]
   11790:	ldr	r1, [fp, #-12]
   11794:	ldr	r2, [fp, #-20]	; 0xffffffec
   11798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1179c:	cmp	r2, r3
   117a0:	movw	r2, #0
   117a4:	moveq	r2, #1
   117a8:	tst	r2, #1
   117ac:	movw	r2, #1
   117b0:	mov	r3, r2
   117b4:	moveq	r3, #0
   117b8:	str	r0, [sp, #12]
   117bc:	mov	r0, r1
   117c0:	mov	r1, r2
   117c4:	mov	r2, r3
   117c8:	ldr	r3, [sp, #12]
   117cc:	blx	r3
   117d0:	ldr	r0, [fp, #-12]
   117d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   117d8:	cmp	r1, #11
   117dc:	str	r0, [sp, #8]
   117e0:	bge	117f0 <__assert_fail@plt+0xbe0>
   117e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   117e8:	str	r0, [sp, #4]
   117ec:	b	117fc <__assert_fail@plt+0xbec>
   117f0:	movw	r0, #11
   117f4:	str	r0, [sp, #4]
   117f8:	b	117fc <__assert_fail@plt+0xbec>
   117fc:	ldr	r0, [sp, #4]
   11800:	ldr	r1, [pc, #104]	; 11870 <__assert_fail@plt+0xc60>
   11804:	ldr	r1, [pc, r1]
   11808:	ldr	r2, [sp, #8]
   1180c:	add	r0, r2, r0, lsl #3
   11810:	ldr	r3, [fp, #-20]	; 0xffffffec
   11814:	ldr	ip, [fp, #-24]	; 0xffffffe8
   11818:	cmp	r3, ip
   1181c:	movw	r3, #0
   11820:	moveq	r3, #1
   11824:	tst	r3, #1
   11828:	movw	r3, #1
   1182c:	mov	ip, r3
   11830:	moveq	ip, #0
   11834:	str	r1, [sp]
   11838:	mov	r1, r3
   1183c:	mov	r2, ip
   11840:	ldr	r3, [sp]
   11844:	blx	r3
   11848:	b	1184c <__assert_fail@plt+0xc3c>
   1184c:	ldr	r0, [fp, #-16]
   11850:	add	r0, r0, #1
   11854:	str	r0, [fp, #-16]
   11858:	b	116a0 <__assert_fail@plt+0xa90>
   1185c:	mov	sp, fp
   11860:	pop	{fp, pc}
   11864:	andeq	r8, r1, r8, asr sl
   11868:	andeq	r8, r1, r0, ror sl
   1186c:	andeq	r8, r1, r4, lsr #19
   11870:	andeq	r8, r1, ip, lsr #18
   11874:	strdeq	r8, [r1], -r4
   11878:	push	{fp, lr}
   1187c:	mov	fp, sp
   11880:	sub	sp, sp, #24
   11884:	movw	r0, #0
   11888:	str	r0, [fp, #-4]
   1188c:	ldr	r0, [pc, #296]	; 119bc <__assert_fail@plt+0xdac>
   11890:	ldr	r0, [pc, r0]
   11894:	ldr	r1, [fp, #-4]
   11898:	ldr	r0, [r0, #12]
   1189c:	cmp	r1, r0
   118a0:	bge	119b4 <__assert_fail@plt+0xda4>
   118a4:	movw	r0, #1
   118a8:	strb	r0, [fp, #-9]
   118ac:	movw	r0, #0
   118b0:	str	r0, [fp, #-8]
   118b4:	ldr	r0, [fp, #-8]
   118b8:	cmp	r0, #8
   118bc:	movw	r0, #0
   118c0:	str	r0, [sp, #8]
   118c4:	bge	118f0 <__assert_fail@plt+0xce0>
   118c8:	ldr	r0, [pc, #240]	; 119c0 <__assert_fail@plt+0xdb0>
   118cc:	ldr	r0, [pc, r0]
   118d0:	ldr	r1, [fp, #-4]
   118d4:	ldr	r2, [fp, #-8]
   118d8:	add	r1, r1, r2
   118dc:	ldr	r0, [r0, #12]
   118e0:	cmp	r1, r0
   118e4:	movw	r0, #0
   118e8:	movlt	r0, #1
   118ec:	str	r0, [sp, #8]
   118f0:	ldr	r0, [sp, #8]
   118f4:	tst	r0, #1
   118f8:	beq	119a0 <__assert_fail@plt+0xd90>
   118fc:	ldr	r0, [pc, #192]	; 119c4 <__assert_fail@plt+0xdb4>
   11900:	ldr	r0, [pc, r0]
   11904:	ldr	r1, [pc, #188]	; 119c8 <__assert_fail@plt+0xdb8>
   11908:	ldr	r1, [pc, r1]
   1190c:	add	r1, r1, #920	; 0x398
   11910:	ldr	r2, [pc, #180]	; 119cc <__assert_fail@plt+0xdbc>
   11914:	ldr	r2, [pc, r2]
   11918:	ldr	r2, [r2]
   1191c:	ldr	r3, [fp, #-4]
   11920:	ldr	ip, [fp, #-8]
   11924:	add	r3, r3, ip
   11928:	add	r2, r2, r3, lsl #3
   1192c:	ldrb	r2, [r2, #4]
   11930:	ldrb	r3, [fp, #-9]
   11934:	and	r2, r3, r2
   11938:	strb	r2, [fp, #-9]
   1193c:	ldr	r2, [fp, #-8]
   11940:	add	r2, r2, #1
   11944:	ldr	r3, [pc, #132]	; 119d0 <__assert_fail@plt+0xdc0>
   11948:	ldr	r3, [pc, r3]
   1194c:	add	r2, r3, r2, lsl #3
   11950:	add	r2, r2, #920	; 0x398
   11954:	ldrb	r3, [fp, #-9]
   11958:	cmp	r3, #0
   1195c:	movw	r3, #0
   11960:	movne	r3, #1
   11964:	tst	r3, #1
   11968:	movw	r3, #0
   1196c:	moveq	r3, #1
   11970:	str	r0, [sp, #4]
   11974:	mov	r0, r2
   11978:	movw	r2, #1
   1197c:	str	r1, [sp]
   11980:	mov	r1, r2
   11984:	mov	r2, r3
   11988:	ldr	r3, [sp, #4]
   1198c:	blx	r3
   11990:	ldr	r0, [fp, #-8]
   11994:	add	r0, r0, #1
   11998:	str	r0, [fp, #-8]
   1199c:	b	118b4 <__assert_fail@plt+0xca4>
   119a0:	b	119a4 <__assert_fail@plt+0xd94>
   119a4:	ldr	r0, [fp, #-4]
   119a8:	add	r0, r0, #1
   119ac:	str	r0, [fp, #-4]
   119b0:	b	1188c <__assert_fail@plt+0xc7c>
   119b4:	mov	sp, fp
   119b8:	pop	{fp, pc}
   119bc:	andeq	r8, r1, ip, lsr r8
   119c0:	andeq	r8, r1, r0, lsl #16
   119c4:	andeq	r8, r1, r0, lsr r8
   119c8:	strdeq	r8, [r1], -r0
   119cc:	andeq	r8, r1, r8, lsr r8
   119d0:			; <UNDEFINED> instruction: 0x000187b0
   119d4:	push	{fp, lr}
   119d8:	mov	fp, sp
   119dc:	sub	sp, sp, #24
   119e0:	movw	r0, #0
   119e4:	str	r0, [fp, #-4]
   119e8:	ldr	r0, [pc, #276]	; 11b04 <__assert_fail@plt+0xef4>
   119ec:	ldr	r0, [pc, r0]
   119f0:	ldr	r1, [fp, #-4]
   119f4:	ldr	r0, [r0, #12]
   119f8:	cmp	r1, r0
   119fc:	bge	11aa8 <__assert_fail@plt+0xe98>
   11a00:	ldr	r0, [pc, #264]	; 11b10 <__assert_fail@plt+0xf00>
   11a04:	ldr	r0, [pc, r0]
   11a08:	ldr	r1, [pc, #260]	; 11b14 <__assert_fail@plt+0xf04>
   11a0c:	ldr	r1, [pc, r1]
   11a10:	ldr	r2, [r1]
   11a14:	ldr	r3, [fp, #-4]
   11a18:	ldr	r2, [r2, r3, lsl #3]
   11a1c:	ldr	r2, [r2, #8]
   11a20:	str	r0, [fp, #-8]
   11a24:	mov	r0, r2
   11a28:	str	r1, [sp, #12]
   11a2c:	bl	122a4 <__assert_fail@plt+0x1694>
   11a30:	ldr	r1, [pc, #224]	; 11b18 <__assert_fail@plt+0xf08>
   11a34:	ldr	r1, [pc, r1]
   11a38:	movw	r2, #9048	; 0x2358
   11a3c:	add	r2, r1, r2
   11a40:	add	r1, r1, #992	; 0x3e0
   11a44:	cmp	r0, #0
   11a48:	movne	r2, r1
   11a4c:	ldr	r0, [sp, #12]
   11a50:	ldr	r1, [r0]
   11a54:	ldr	r3, [fp, #-4]
   11a58:	ldr	r3, [r1, r3, lsl #3]!
   11a5c:	ldr	r3, [r3, #8]
   11a60:	ldrb	r1, [r1, #4]
   11a64:	cmp	r1, #0
   11a68:	movw	r1, #0
   11a6c:	movne	r1, #1
   11a70:	tst	r1, #1
   11a74:	movw	r1, #0
   11a78:	moveq	r1, #1
   11a7c:	mov	r0, r2
   11a80:	str	r1, [sp, #8]
   11a84:	mov	r1, r3
   11a88:	movw	r2, #1
   11a8c:	ldr	r3, [sp, #8]
   11a90:	ldr	lr, [fp, #-8]
   11a94:	blx	lr
   11a98:	ldr	r0, [fp, #-4]
   11a9c:	add	r0, r0, #1
   11aa0:	str	r0, [fp, #-4]
   11aa4:	b	119e8 <__assert_fail@plt+0xdd8>
   11aa8:	ldr	r0, [pc, #92]	; 11b0c <__assert_fail@plt+0xefc>
   11aac:	ldr	r0, [pc, r0]
   11ab0:	add	r1, r0, #992	; 0x3e0
   11ab4:	add	r0, r0, #8
   11ab8:	str	r0, [sp, #4]
   11abc:	mov	r0, r1
   11ac0:	ldr	r1, [sp, #4]
   11ac4:	movw	r2, #0
   11ac8:	bl	11670 <__assert_fail@plt+0xa60>
   11acc:	ldr	r0, [pc, #52]	; 11b08 <__assert_fail@plt+0xef8>
   11ad0:	ldr	r0, [pc, r0]
   11ad4:	movw	r1, #9048	; 0x2358
   11ad8:	add	r1, r0, r1
   11adc:	add	r2, r0, #416	; 0x1a0
   11ae0:	add	r0, r0, #824	; 0x338
   11ae4:	str	r0, [sp]
   11ae8:	mov	r0, r1
   11aec:	mov	r1, r2
   11af0:	ldr	r2, [sp]
   11af4:	bl	11670 <__assert_fail@plt+0xa60>
   11af8:	bl	11878 <__assert_fail@plt+0xc68>
   11afc:	mov	sp, fp
   11b00:	pop	{fp, pc}
   11b04:	andeq	r8, r1, r0, ror #13
   11b08:	andeq	r8, r1, r8, lsr #12
   11b0c:	andeq	r8, r1, ip, asr #12
   11b10:	andeq	r8, r1, ip, lsr r7
   11b14:	andeq	r8, r1, r0, asr #14
   11b18:	andeq	r8, r1, r4, asr #13
   11b1c:	push	{fp, lr}
   11b20:	mov	fp, sp
   11b24:	sub	sp, sp, #24
   11b28:	ldr	r2, [pc, #232]	; 11c18 <__assert_fail@plt+0x1008>
   11b2c:	add	r2, pc, r2
   11b30:	ldr	r3, [pc, #228]	; 11c1c <__assert_fail@plt+0x100c>
   11b34:	ldr	r3, [pc, r3]
   11b38:	ldr	ip, [pc, #224]	; 11c20 <__assert_fail@plt+0x1010>
   11b3c:	ldr	ip, [pc, ip]
   11b40:	movw	lr, #0
   11b44:	str	lr, [fp, #-4]
   11b48:	str	r0, [fp, #-8]
   11b4c:	str	r1, [sp, #12]
   11b50:	ldr	r1, [sp, #12]
   11b54:	sub	r0, fp, #8
   11b58:	blx	ip
   11b5c:	ldr	r0, [fp, #-8]
   11b60:	cmp	r0, #2
   11b64:	blt	11b74 <__assert_fail@plt+0xf64>
   11b68:	ldr	r0, [fp, #-8]
   11b6c:	cmp	r0, #3
   11b70:	ble	11b88 <__assert_fail@plt+0xf78>
   11b74:	ldr	r0, [pc, #188]	; 11c38 <__assert_fail@plt+0x1028>
   11b78:	add	r0, pc, r0
   11b7c:	ldr	r1, [pc, #184]	; 11c3c <__assert_fail@plt+0x102c>
   11b80:	ldr	r1, [pc, r1]
   11b84:	blx	r1
   11b88:	ldr	r0, [pc, #148]	; 11c24 <__assert_fail@plt+0x1014>
   11b8c:	ldr	r0, [pc, r0]
   11b90:	ldr	r1, [pc, #144]	; 11c28 <__assert_fail@plt+0x1018>
   11b94:	ldr	r1, [pc, r1]
   11b98:	ldr	r1, [r1]
   11b9c:	str	r0, [sp, #8]
   11ba0:	mov	r0, r1
   11ba4:	ldr	r1, [sp, #8]
   11ba8:	blx	r1
   11bac:	ldr	r0, [sp, #12]
   11bb0:	bl	10e4c <__assert_fail@plt+0x23c>
   11bb4:	bl	113c0 <__assert_fail@plt+0x7b0>
   11bb8:	bl	11570 <__assert_fail@plt+0x960>
   11bbc:	bl	119d4 <__assert_fail@plt+0xdc4>
   11bc0:	ldr	r0, [fp, #-8]
   11bc4:	cmp	r0, #3
   11bc8:	bne	11bdc <__assert_fail@plt+0xfcc>
   11bcc:	ldr	r0, [sp, #12]
   11bd0:	ldr	r0, [r0, #8]
   11bd4:	str	r0, [sp, #4]
   11bd8:	b	11be8 <__assert_fail@plt+0xfd8>
   11bdc:	movw	r0, #0
   11be0:	str	r0, [sp, #4]
   11be4:	b	11be8 <__assert_fail@plt+0xfd8>
   11be8:	ldr	r0, [sp, #4]
   11bec:	ldr	r1, [pc, #60]	; 11c30 <__assert_fail@plt+0x1020>
   11bf0:	ldr	r1, [pc, r1]
   11bf4:	ldr	r2, [pc, #56]	; 11c34 <__assert_fail@plt+0x1024>
   11bf8:	ldr	r2, [pc, r2]
   11bfc:	str	r0, [sp]
   11c00:	mov	r0, r1
   11c04:	ldr	r1, [sp]
   11c08:	blx	r2
   11c0c:	ldr	r0, [pc, #24]	; 11c2c <__assert_fail@plt+0x101c>
   11c10:	ldr	r0, [pc, r0]
   11c14:	blx	r0
   11c18:	andeq	r4, r0, lr, lsr #1
   11c1c:			; <UNDEFINED> instruction: 0x000185b8
   11c20:	andeq	r8, r1, r0, lsr #11
   11c24:	andeq	r8, r1, r0, lsr r5
   11c28:	andeq	r8, r1, r4, lsl r5
   11c2c:	andeq	r8, r1, r0, lsl #10
   11c30:	andeq	r8, r1, r8, lsl #10
   11c34:	muleq	r1, ip, r4
   11c38:	muleq	r0, pc, r0	; <UNPREDICTABLE>
   11c3c:	andeq	r8, r1, ip, lsr #10
   11c40:	sub	sp, sp, #4
   11c44:	str	r0, [sp]
   11c48:	ldr	r0, [sp]
   11c4c:	movw	r1, #0
   11c50:	str	r1, [r0, #4]
   11c54:	ldr	r0, [sp]
   11c58:	str	r1, [r0]
   11c5c:	ldr	r0, [sp]
   11c60:	str	r1, [r0, #8]
   11c64:	ldr	r0, [sp]
   11c68:	str	r1, [r0, #12]
   11c6c:	add	sp, sp, #4
   11c70:	bx	lr
   11c74:	push	{fp, lr}
   11c78:	mov	fp, sp
   11c7c:	sub	sp, sp, #8
   11c80:	str	r0, [sp, #4]
   11c84:	str	r1, [sp]
   11c88:	ldr	r0, [sp, #4]
   11c8c:	ldr	r2, [sp]
   11c90:	ldr	r1, [sp, #4]
   11c94:	ldr	r3, [r1]
   11c98:	movw	r1, #0
   11c9c:	bl	11ca8 <__assert_fail@plt+0x1098>
   11ca0:	mov	sp, fp
   11ca4:	pop	{fp, pc}
   11ca8:	push	{fp, lr}
   11cac:	mov	fp, sp
   11cb0:	sub	sp, sp, #16
   11cb4:	str	r0, [fp, #-4]
   11cb8:	str	r1, [sp, #8]
   11cbc:	str	r2, [sp, #4]
   11cc0:	str	r3, [sp]
   11cc4:	ldr	r0, [sp, #8]
   11cc8:	ldr	r1, [sp, #4]
   11ccc:	str	r0, [r1]
   11cd0:	ldr	r0, [sp]
   11cd4:	ldr	r1, [sp, #4]
   11cd8:	str	r0, [r1, #4]
   11cdc:	ldr	r0, [sp, #8]
   11ce0:	movw	r1, #0
   11ce4:	cmp	r0, r1
   11ce8:	beq	11cfc <__assert_fail@plt+0x10ec>
   11cec:	ldr	r0, [sp, #4]
   11cf0:	ldr	r1, [sp, #8]
   11cf4:	str	r0, [r1, #4]
   11cf8:	b	11d08 <__assert_fail@plt+0x10f8>
   11cfc:	ldr	r0, [sp, #4]
   11d00:	ldr	r1, [fp, #-4]
   11d04:	str	r0, [r1]
   11d08:	ldr	r0, [sp]
   11d0c:	movw	r1, #0
   11d10:	cmp	r0, r1
   11d14:	beq	11d28 <__assert_fail@plt+0x1118>
   11d18:	ldr	r0, [sp, #4]
   11d1c:	ldr	r1, [sp]
   11d20:	str	r0, [r1]
   11d24:	b	11d34 <__assert_fail@plt+0x1124>
   11d28:	ldr	r0, [sp, #4]
   11d2c:	ldr	r1, [fp, #-4]
   11d30:	str	r0, [r1, #4]
   11d34:	ldr	r0, [fp, #-4]
   11d38:	bl	11ebc <__assert_fail@plt+0x12ac>
   11d3c:	ldr	r0, [fp, #-4]
   11d40:	ldr	lr, [r0, #12]
   11d44:	add	lr, lr, #1
   11d48:	str	lr, [r0, #12]
   11d4c:	mov	sp, fp
   11d50:	pop	{fp, pc}
   11d54:	push	{fp, lr}
   11d58:	mov	fp, sp
   11d5c:	sub	sp, sp, #8
   11d60:	str	r0, [sp, #4]
   11d64:	str	r1, [sp]
   11d68:	ldr	r0, [sp, #4]
   11d6c:	ldr	r1, [sp, #4]
   11d70:	ldr	r1, [r1, #4]
   11d74:	ldr	r2, [sp]
   11d78:	movw	r3, #0
   11d7c:	bl	11ca8 <__assert_fail@plt+0x1098>
   11d80:	mov	sp, fp
   11d84:	pop	{fp, pc}
   11d88:	push	{fp, lr}
   11d8c:	mov	fp, sp
   11d90:	sub	sp, sp, #16
   11d94:	str	r0, [fp, #-4]
   11d98:	str	r1, [sp, #8]
   11d9c:	str	r2, [sp, #4]
   11da0:	ldr	r0, [fp, #-4]
   11da4:	ldr	r1, [sp, #4]
   11da8:	ldr	r1, [r1]
   11dac:	ldr	r2, [sp, #8]
   11db0:	ldr	r3, [sp, #4]
   11db4:	bl	11ca8 <__assert_fail@plt+0x1098>
   11db8:	mov	sp, fp
   11dbc:	pop	{fp, pc}
   11dc0:	push	{fp, lr}
   11dc4:	mov	fp, sp
   11dc8:	sub	sp, sp, #16
   11dcc:	str	r0, [fp, #-4]
   11dd0:	str	r1, [sp, #8]
   11dd4:	str	r2, [sp, #4]
   11dd8:	ldr	r0, [fp, #-4]
   11ddc:	ldr	r1, [sp, #8]
   11de0:	ldr	r2, [sp, #4]
   11de4:	ldr	r3, [sp, #8]
   11de8:	ldr	r3, [r3, #4]
   11dec:	bl	11ca8 <__assert_fail@plt+0x1098>
   11df0:	mov	sp, fp
   11df4:	pop	{fp, pc}
   11df8:	push	{fp, lr}
   11dfc:	mov	fp, sp
   11e00:	sub	sp, sp, #8
   11e04:	str	r0, [sp, #4]
   11e08:	str	r1, [sp]
   11e0c:	ldr	r0, [sp]
   11e10:	ldr	r0, [r0]
   11e14:	movw	r1, #0
   11e18:	cmp	r0, r1
   11e1c:	beq	11e38 <__assert_fail@plt+0x1228>
   11e20:	ldr	r0, [sp]
   11e24:	ldr	r0, [r0, #4]
   11e28:	ldr	r1, [sp]
   11e2c:	ldr	r1, [r1]
   11e30:	str	r0, [r1, #4]
   11e34:	b	11e48 <__assert_fail@plt+0x1238>
   11e38:	ldr	r0, [sp]
   11e3c:	ldr	r0, [r0, #4]
   11e40:	ldr	r1, [sp, #4]
   11e44:	str	r0, [r1]
   11e48:	ldr	r0, [sp]
   11e4c:	ldr	r0, [r0, #4]
   11e50:	movw	r1, #0
   11e54:	cmp	r0, r1
   11e58:	beq	11e74 <__assert_fail@plt+0x1264>
   11e5c:	ldr	r0, [sp]
   11e60:	ldr	r0, [r0]
   11e64:	ldr	r1, [sp]
   11e68:	ldr	r1, [r1, #4]
   11e6c:	str	r0, [r1]
   11e70:	b	11e84 <__assert_fail@plt+0x1274>
   11e74:	ldr	r0, [sp]
   11e78:	ldr	r0, [r0]
   11e7c:	ldr	r1, [sp, #4]
   11e80:	str	r0, [r1, #4]
   11e84:	ldr	r0, [sp]
   11e88:	movw	r1, #0
   11e8c:	str	r1, [r0, #4]
   11e90:	ldr	r0, [sp]
   11e94:	str	r1, [r0]
   11e98:	ldr	r0, [sp, #4]
   11e9c:	bl	11ebc <__assert_fail@plt+0x12ac>
   11ea0:	ldr	r0, [sp, #4]
   11ea4:	ldr	r1, [r0, #12]
   11ea8:	mvn	lr, #0
   11eac:	add	r1, r1, lr
   11eb0:	str	r1, [r0, #12]
   11eb4:	mov	sp, fp
   11eb8:	pop	{fp, pc}
   11ebc:	push	{fp, lr}
   11ec0:	mov	fp, sp
   11ec4:	sub	sp, sp, #8
   11ec8:	str	r0, [sp, #4]
   11ecc:	ldr	r0, [sp, #4]
   11ed0:	ldr	r0, [r0, #8]
   11ed4:	movw	r1, #0
   11ed8:	cmp	r0, r1
   11edc:	beq	11ef8 <__assert_fail@plt+0x12e8>
   11ee0:	ldr	r0, [sp, #4]
   11ee4:	ldr	r0, [r0, #8]
   11ee8:	bl	10ab4 <free@plt>
   11eec:	ldr	r0, [sp, #4]
   11ef0:	movw	lr, #0
   11ef4:	str	lr, [r0, #8]
   11ef8:	mov	sp, fp
   11efc:	pop	{fp, pc}
   11f00:	push	{fp, lr}
   11f04:	mov	fp, sp
   11f08:	sub	sp, sp, #16
   11f0c:	str	r0, [fp, #-4]
   11f10:	movw	r0, #0
   11f14:	str	r0, [sp, #4]
   11f18:	ldr	r1, [fp, #-4]
   11f1c:	ldr	r1, [r1, #8]
   11f20:	cmp	r1, r0
   11f24:	bne	11f38 <__assert_fail@plt+0x1328>
   11f28:	ldr	r0, [fp, #-4]
   11f2c:	ldr	r0, [r0, #12]
   11f30:	cmp	r0, #0
   11f34:	bne	11f3c <__assert_fail@plt+0x132c>
   11f38:	b	11fb4 <__assert_fail@plt+0x13a4>
   11f3c:	ldr	r0, [pc, #120]	; 11fbc <__assert_fail@plt+0x13ac>
   11f40:	ldr	r0, [pc, r0]
   11f44:	ldr	r1, [fp, #-4]
   11f48:	ldr	r1, [r1, #12]
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, r1
   11f54:	movw	r1, #4
   11f58:	ldr	r2, [sp]
   11f5c:	blx	r2
   11f60:	ldr	r1, [fp, #-4]
   11f64:	str	r0, [r1, #8]
   11f68:	ldr	r0, [fp, #-4]
   11f6c:	ldr	r0, [r0]
   11f70:	str	r0, [sp, #8]
   11f74:	ldr	r0, [sp, #8]
   11f78:	movw	r1, #0
   11f7c:	cmp	r0, r1
   11f80:	beq	11fb4 <__assert_fail@plt+0x13a4>
   11f84:	ldr	r0, [sp, #8]
   11f88:	ldr	r1, [fp, #-4]
   11f8c:	ldr	r1, [r1, #8]
   11f90:	ldr	r2, [sp, #4]
   11f94:	add	r3, r2, #1
   11f98:	str	r3, [sp, #4]
   11f9c:	add	r1, r1, r2, lsl #2
   11fa0:	str	r0, [r1]
   11fa4:	ldr	r0, [sp, #8]
   11fa8:	ldr	r0, [r0, #4]
   11fac:	str	r0, [sp, #8]
   11fb0:	b	11f74 <__assert_fail@plt+0x1364>
   11fb4:	mov	sp, fp
   11fb8:	pop	{fp, pc}
   11fbc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11fc0:	push	{fp, lr}
   11fc4:	mov	fp, sp
   11fc8:	sub	sp, sp, #16
   11fcc:	str	r0, [fp, #-4]
   11fd0:	str	r1, [sp, #8]
   11fd4:	ldr	r0, [fp, #-4]
   11fd8:	ldr	r0, [r0]
   11fdc:	movw	r1, #0
   11fe0:	cmp	r0, r1
   11fe4:	beq	1201c <__assert_fail@plt+0x140c>
   11fe8:	ldr	r0, [fp, #-4]
   11fec:	ldr	r0, [r0]
   11ff0:	str	r0, [sp, #4]
   11ff4:	ldr	r0, [fp, #-4]
   11ff8:	ldr	r1, [sp, #4]
   11ffc:	bl	11df8 <__assert_fail@plt+0x11e8>
   12000:	ldr	r0, [sp, #8]
   12004:	ldr	r1, [sp, #4]
   12008:	str	r0, [sp]
   1200c:	mov	r0, r1
   12010:	ldr	r1, [sp]
   12014:	blx	r1
   12018:	b	11fd4 <__assert_fail@plt+0x13c4>
   1201c:	mov	sp, fp
   12020:	pop	{fp, pc}
   12024:	push	{fp, lr}
   12028:	mov	fp, sp
   1202c:	sub	sp, sp, #24
   12030:	ldr	r1, [pc, #324]	; 1217c <__assert_fail@plt+0x156c>
   12034:	add	r1, pc, r1
   12038:	str	r0, [fp, #-4]
   1203c:	ldrsb	r0, [r1]
   12040:	cmp	r0, #0
   12044:	beq	1205c <__assert_fail@plt+0x144c>
   12048:	ldr	r0, [pc, #352]	; 121b0 <__assert_fail@plt+0x15a0>
   1204c:	add	r0, pc, r0
   12050:	ldr	r1, [pc, #348]	; 121b4 <__assert_fail@plt+0x15a4>
   12054:	ldr	r1, [pc, r1]
   12058:	blx	r1
   1205c:	ldr	r0, [fp, #-4]
   12060:	movw	r1, #0
   12064:	cmp	r0, r1
   12068:	beq	12110 <__assert_fail@plt+0x1500>
   1206c:	ldr	r0, [pc, #300]	; 121a0 <__assert_fail@plt+0x1590>
   12070:	add	r0, pc, r0
   12074:	ldr	r1, [pc, #296]	; 121a4 <__assert_fail@plt+0x1594>
   12078:	add	r2, pc, r1
   1207c:	ldr	r1, [pc, #292]	; 121a8 <__assert_fail@plt+0x1598>
   12080:	ldr	r1, [pc, r1]
   12084:	ldr	r3, [fp, #-4]
   12088:	str	r1, [sp, #8]
   1208c:	mov	r1, r3
   12090:	ldr	r3, [sp, #8]
   12094:	blx	r3
   12098:	ldr	r0, [pc, #244]	; 12194 <__assert_fail@plt+0x1584>
   1209c:	add	r0, pc, r0
   120a0:	ldr	r1, [pc, #240]	; 12198 <__assert_fail@plt+0x1588>
   120a4:	add	r1, pc, r1
   120a8:	ldr	r2, [pc, #236]	; 1219c <__assert_fail@plt+0x158c>
   120ac:	ldr	r2, [pc, r2]
   120b0:	blx	r2
   120b4:	ldr	r0, [pc, #204]	; 12188 <__assert_fail@plt+0x1578>
   120b8:	add	r0, pc, r0
   120bc:	ldr	r1, [pc, #200]	; 1218c <__assert_fail@plt+0x157c>
   120c0:	ldr	r1, [pc, r1]
   120c4:	ldr	r2, [pc, #196]	; 12190 <__assert_fail@plt+0x1580>
   120c8:	ldr	r2, [pc, r2]
   120cc:	blx	r2
   120d0:	ldr	r0, [pc, #172]	; 12184 <__assert_fail@plt+0x1574>
   120d4:	add	r0, pc, r0
   120d8:	ldr	r0, [r0]
   120dc:	str	r0, [fp, #-8]
   120e0:	ldr	r0, [fp, #-8]
   120e4:	movw	r1, #0
   120e8:	cmp	r0, r1
   120ec:	beq	1210c <__assert_fail@plt+0x14fc>
   120f0:	ldr	r0, [fp, #-8]
   120f4:	ldr	r0, [r0, #8]
   120f8:	bl	121bc <__assert_fail@plt+0x15ac>
   120fc:	ldr	r0, [fp, #-8]
   12100:	ldr	r0, [r0, #4]
   12104:	str	r0, [fp, #-8]
   12108:	b	120e0 <__assert_fail@plt+0x14d0>
   1210c:	b	12164 <__assert_fail@plt+0x1554>
   12110:	movw	r0, #0
   12114:	strh	r0, [fp, #-10]
   12118:	ldrsh	r0, [fp, #-10]
   1211c:	cmp	r0, #110	; 0x6e
   12120:	bcs	12160 <__assert_fail@plt+0x1550>
   12124:	ldr	r0, [pc, #84]	; 12180 <__assert_fail@plt+0x1570>
   12128:	add	r0, pc, r0
   1212c:	ldrsh	r1, [fp, #-10]
   12130:	ldr	r2, [pc, #128]	; 121b8 <__assert_fail@plt+0x15a8>
   12134:	add	r2, pc, r2
   12138:	add	r1, r2, r1, lsl #2
   1213c:	ldr	r1, [r1]
   12140:	str	r0, [sp, #4]
   12144:	mov	r0, r1
   12148:	bl	121bc <__assert_fail@plt+0x15ac>
   1214c:	ldrh	r0, [fp, #-10]
   12150:	movw	r1, #1
   12154:	add	r0, r0, r1
   12158:	strh	r0, [fp, #-10]
   1215c:	b	12118 <__assert_fail@plt+0x1508>
   12160:	b	12164 <__assert_fail@plt+0x1554>
   12164:	ldr	r0, [pc, #64]	; 121ac <__assert_fail@plt+0x159c>
   12168:	add	r0, pc, r0
   1216c:	movw	r1, #1
   12170:	strb	r1, [r0]
   12174:	mov	sp, fp
   12178:	pop	{fp, pc}
   1217c:	andeq	r8, r1, r0, lsr #6
   12180:	andeq	r8, r1, r8, rrx
   12184:	muleq	r1, r4, r2
   12188:	andeq	r8, r1, r0, lsr #5
   1218c:	ldrdeq	r7, [r1], -r8
   12190:	andeq	r8, r1, r8, lsl #1
   12194:	andeq	r8, r1, ip, asr #5
   12198:			; <UNDEFINED> instruction: 0x000182b4
   1219c:	muleq	r1, r0, r0
   121a0:	andeq	r8, r1, r8, ror #5
   121a4:	andeq	r8, r1, ip, lsl #2
   121a8:	andeq	r8, r1, ip, lsl #1
   121ac:	andeq	r8, r1, ip, ror #3
   121b0:	andeq	r3, r0, r3, ror #23
   121b4:	andeq	r8, r1, r8, asr r0
   121b8:	andeq	r8, r1, ip, asr r0
   121bc:	push	{fp, lr}
   121c0:	mov	fp, sp
   121c4:	sub	sp, sp, #24
   121c8:	ldr	r1, [pc, #184]	; 12288 <__assert_fail@plt+0x1678>
   121cc:	add	r1, pc, r1
   121d0:	ldr	r2, [pc, #180]	; 1228c <__assert_fail@plt+0x167c>
   121d4:	ldr	r2, [pc, r2]
   121d8:	str	r0, [fp, #-4]
   121dc:	ldr	r0, [fp, #-4]
   121e0:	str	r0, [sp, #12]
   121e4:	mov	r0, r1
   121e8:	ldr	r1, [sp, #12]
   121ec:	blx	r2
   121f0:	str	r0, [fp, #-8]
   121f4:	ldr	r0, [fp, #-8]
   121f8:	movw	r1, #0
   121fc:	cmp	r0, r1
   12200:	beq	1222c <__assert_fail@plt+0x161c>
   12204:	ldr	r0, [pc, #144]	; 1229c <__assert_fail@plt+0x168c>
   12208:	add	r0, pc, r0
   1220c:	ldr	r1, [pc, #140]	; 122a0 <__assert_fail@plt+0x1690>
   12210:	ldr	r1, [pc, r1]
   12214:	ldr	r2, [fp, #-4]
   12218:	str	r1, [sp, #8]
   1221c:	mov	r1, r2
   12220:	ldr	r2, [sp, #8]
   12224:	blx	r2
   12228:	b	12280 <__assert_fail@plt+0x1670>
   1222c:	ldr	r0, [pc, #100]	; 12298 <__assert_fail@plt+0x1688>
   12230:	ldr	r0, [pc, r0]
   12234:	movw	r1, #1
   12238:	str	r0, [sp, #4]
   1223c:	mov	r0, r1
   12240:	movw	r1, #12
   12244:	ldr	r2, [sp, #4]
   12248:	blx	r2
   1224c:	ldr	r1, [pc, #60]	; 12290 <__assert_fail@plt+0x1680>
   12250:	add	r1, pc, r1
   12254:	ldr	r2, [pc, #56]	; 12294 <__assert_fail@plt+0x1684>
   12258:	ldr	r2, [pc, r2]
   1225c:	str	r0, [fp, #-8]
   12260:	ldr	r0, [fp, #-4]
   12264:	ldr	lr, [fp, #-8]
   12268:	str	r0, [lr, #8]
   1226c:	ldr	r0, [fp, #-8]
   12270:	str	r0, [sp]
   12274:	mov	r0, r1
   12278:	ldr	r1, [sp]
   1227c:	blx	r2
   12280:	mov	sp, fp
   12284:	pop	{fp, pc}
   12288:	andeq	r8, r1, ip, lsr #3
   1228c:	andeq	r7, r1, r4, lsl pc
   12290:	andeq	r8, r1, r8, lsr #2
   12294:	andeq	r7, r1, r8, asr lr
   12298:	andeq	r7, r1, r8, lsl #30
   1229c:	andeq	r3, r0, pc, asr sl
   122a0:	andeq	r7, r1, r8, lsr pc
   122a4:	push	{fp, lr}
   122a8:	mov	fp, sp
   122ac:	sub	sp, sp, #8
   122b0:	ldr	r1, [pc, #112]	; 12328 <__assert_fail@plt+0x1718>
   122b4:	add	r1, pc, r1
   122b8:	str	r0, [sp, #4]
   122bc:	ldrsb	r0, [r1]
   122c0:	cmp	r0, #0
   122c4:	bne	122dc <__assert_fail@plt+0x16cc>
   122c8:	ldr	r0, [pc, #92]	; 1232c <__assert_fail@plt+0x171c>
   122cc:	add	r0, pc, r0
   122d0:	ldr	r1, [pc, #88]	; 12330 <__assert_fail@plt+0x1720>
   122d4:	ldr	r1, [pc, r1]
   122d8:	blx	r1
   122dc:	ldr	r0, [pc, #80]	; 12334 <__assert_fail@plt+0x1724>
   122e0:	add	r0, pc, r0
   122e4:	ldr	r1, [pc, #76]	; 12338 <__assert_fail@plt+0x1728>
   122e8:	ldr	r1, [pc, r1]
   122ec:	ldr	r2, [sp, #4]
   122f0:	str	r1, [sp]
   122f4:	mov	r1, r2
   122f8:	ldr	r2, [sp]
   122fc:	blx	r2
   12300:	movw	r1, #0
   12304:	cmp	r0, r1
   12308:	movw	r0, #0
   1230c:	movne	r0, #1
   12310:	tst	r0, #1
   12314:	movw	r0, #1
   12318:	moveq	r0, #0
   1231c:	and	r0, r0, #255	; 0xff
   12320:	mov	sp, fp
   12324:	pop	{fp, pc}
   12328:	andeq	r8, r1, r0, lsr #1
   1232c:	andeq	r3, r0, r1, lsl #19
   12330:	ldrdeq	r7, [r1], -r8
   12334:	muleq	r1, r8, r0
   12338:	andeq	r7, r1, r0, lsl #28
   1233c:	push	{fp, lr}
   12340:	mov	fp, sp
   12344:	sub	sp, sp, #16
   12348:	str	r0, [fp, #-4]
   1234c:	movw	r0, #0
   12350:	strh	r0, [fp, #-6]
   12354:	ldrsh	r0, [fp, #-6]
   12358:	movw	r1, #503	; 0x1f7
   1235c:	cmp	r0, r1
   12360:	bge	1239c <__assert_fail@plt+0x178c>
   12364:	ldr	r0, [pc, #92]	; 123c8 <__assert_fail@plt+0x17b8>
   12368:	ldr	r0, [pc, r0]
   1236c:	ldr	r1, [fp, #-4]
   12370:	ldrsh	r2, [fp, #-6]
   12374:	add	r1, r1, r2, lsl #4
   12378:	str	r0, [sp, #4]
   1237c:	mov	r0, r1
   12380:	ldr	r1, [sp, #4]
   12384:	blx	r1
   12388:	ldrh	r0, [fp, #-6]
   1238c:	movw	r1, #1
   12390:	add	r0, r0, r1
   12394:	strh	r0, [fp, #-6]
   12398:	b	12354 <__assert_fail@plt+0x1744>
   1239c:	ldr	r0, [fp, #-4]
   123a0:	movw	r1, #8048	; 0x1f70
   123a4:	add	r0, r0, r1
   123a8:	movw	r1, #0
   123ac:	str	r1, [r0]
   123b0:	ldr	r0, [fp, #-4]
   123b4:	movw	r2, #8052	; 0x1f74
   123b8:	add	r0, r0, r2
   123bc:	str	r1, [r0]
   123c0:	mov	sp, fp
   123c4:	pop	{fp, pc}
   123c8:	andeq	r7, r1, r0, asr #27
   123cc:	push	{fp, lr}
   123d0:	mov	fp, sp
   123d4:	sub	sp, sp, #24
   123d8:	str	r0, [fp, #-4]
   123dc:	str	r1, [fp, #-8]
   123e0:	ldr	r0, [fp, #-4]
   123e4:	ldr	r1, [fp, #-8]
   123e8:	str	r0, [sp, #8]
   123ec:	mov	r0, r1
   123f0:	bl	12470 <__assert_fail@plt+0x1860>
   123f4:	mov	r1, r0
   123f8:	ldr	lr, [sp, #8]
   123fc:	add	r0, lr, r0, lsl #4
   12400:	ldr	r0, [r0]
   12404:	str	r0, [sp, #12]
   12408:	str	r1, [sp, #4]
   1240c:	ldr	r0, [sp, #12]
   12410:	movw	r1, #0
   12414:	cmp	r0, r1
   12418:	movw	r0, #0
   1241c:	str	r0, [sp]
   12420:	beq	12444 <__assert_fail@plt+0x1834>
   12424:	ldr	r0, [fp, #-8]
   12428:	ldr	r1, [sp, #12]
   1242c:	ldr	r1, [r1, #8]
   12430:	bl	10a9c <strcmp@plt>
   12434:	cmp	r0, #0
   12438:	movw	r0, #0
   1243c:	movne	r0, #1
   12440:	str	r0, [sp]
   12444:	ldr	r0, [sp]
   12448:	tst	r0, #1
   1244c:	beq	12464 <__assert_fail@plt+0x1854>
   12450:	b	12454 <__assert_fail@plt+0x1844>
   12454:	ldr	r0, [sp, #12]
   12458:	ldr	r0, [r0, #4]
   1245c:	str	r0, [sp, #12]
   12460:	b	1240c <__assert_fail@plt+0x17fc>
   12464:	ldr	r0, [sp, #12]
   12468:	mov	sp, fp
   1246c:	pop	{fp, pc}
   12470:	sub	sp, sp, #16
   12474:	str	r0, [sp, #12]
   12478:	ldr	r0, [sp, #12]
   1247c:	str	r0, [sp, #8]
   12480:	movw	r0, #0
   12484:	str	r0, [sp]
   12488:	str	r0, [sp, #4]
   1248c:	ldr	r0, [sp, #8]
   12490:	ldr	r1, [sp, #4]
   12494:	add	r0, r0, r1
   12498:	ldrsb	r0, [r0]
   1249c:	cmp	r0, #0
   124a0:	beq	124d0 <__assert_fail@plt+0x18c0>
   124a4:	ldr	r0, [sp, #8]
   124a8:	ldr	r1, [sp, #4]
   124ac:	add	r0, r0, r1
   124b0:	ldrb	r0, [r0]
   124b4:	ldr	r1, [sp]
   124b8:	add	r0, r1, r0
   124bc:	str	r0, [sp]
   124c0:	ldr	r0, [sp, #4]
   124c4:	add	r0, r0, #1
   124c8:	str	r0, [sp, #4]
   124cc:	b	1248c <__assert_fail@plt+0x187c>
   124d0:	ldr	r0, [sp]
   124d4:	movw	r1, #20065	; 0x4e61
   124d8:	movt	r1, #33354	; 0x824a
   124dc:	smmla	r1, r0, r1, r0
   124e0:	asr	r2, r1, #8
   124e4:	add	r1, r2, r1, lsr #31
   124e8:	movw	r2, #503	; 0x1f7
   124ec:	mls	r0, r1, r2, r0
   124f0:	sxth	r0, r0
   124f4:	add	sp, sp, #16
   124f8:	bx	lr
   124fc:	push	{fp, lr}
   12500:	mov	fp, sp
   12504:	sub	sp, sp, #24
   12508:	ldr	r2, [pc, #112]	; 12580 <__assert_fail@plt+0x1970>
   1250c:	ldr	r2, [pc, r2]
   12510:	str	r0, [fp, #-4]
   12514:	str	r1, [fp, #-8]
   12518:	ldr	r0, [fp, #-4]
   1251c:	ldr	r1, [fp, #-8]
   12520:	ldr	r1, [r1, #8]
   12524:	str	r0, [sp, #12]
   12528:	mov	r0, r1
   1252c:	str	r2, [sp, #8]
   12530:	bl	12470 <__assert_fail@plt+0x1860>
   12534:	mov	r1, r0
   12538:	ldr	r2, [sp, #12]
   1253c:	add	r0, r2, r0, lsl #4
   12540:	ldr	lr, [fp, #-8]
   12544:	str	r1, [sp, #4]
   12548:	mov	r1, lr
   1254c:	ldr	lr, [sp, #8]
   12550:	blx	lr
   12554:	ldr	r0, [fp, #-4]
   12558:	bl	12584 <__assert_fail@plt+0x1974>
   1255c:	ldr	r0, [fp, #-4]
   12560:	movw	r1, #8052	; 0x1f74
   12564:	add	r2, r0, r1
   12568:	ldr	r2, [r2]
   1256c:	add	r2, r2, #1
   12570:	add	r0, r0, r1
   12574:	str	r2, [r0]
   12578:	mov	sp, fp
   1257c:	pop	{fp, pc}
   12580:	muleq	r1, r0, fp
   12584:	push	{fp, lr}
   12588:	mov	fp, sp
   1258c:	sub	sp, sp, #8
   12590:	str	r0, [sp, #4]
   12594:	ldr	r0, [sp, #4]
   12598:	movw	r1, #8048	; 0x1f70
   1259c:	add	r0, r0, r1
   125a0:	ldr	r0, [r0]
   125a4:	movw	r1, #0
   125a8:	cmp	r0, r1
   125ac:	beq	125d8 <__assert_fail@plt+0x19c8>
   125b0:	ldr	r0, [sp, #4]
   125b4:	movw	r1, #8048	; 0x1f70
   125b8:	add	r0, r0, r1
   125bc:	ldr	r0, [r0]
   125c0:	bl	10ab4 <free@plt>
   125c4:	ldr	r0, [sp, #4]
   125c8:	movw	r1, #8048	; 0x1f70
   125cc:	add	r0, r0, r1
   125d0:	movw	r1, #0
   125d4:	str	r1, [r0]
   125d8:	mov	sp, fp
   125dc:	pop	{fp, pc}
   125e0:	push	{fp, lr}
   125e4:	mov	fp, sp
   125e8:	sub	sp, sp, #24
   125ec:	ldr	r2, [pc, #116]	; 12668 <__assert_fail@plt+0x1a58>
   125f0:	ldr	r2, [pc, r2]
   125f4:	str	r0, [fp, #-4]
   125f8:	str	r1, [fp, #-8]
   125fc:	ldr	r0, [fp, #-4]
   12600:	ldr	r1, [fp, #-8]
   12604:	ldr	r1, [r1, #8]
   12608:	str	r0, [sp, #12]
   1260c:	mov	r0, r1
   12610:	str	r2, [sp, #8]
   12614:	bl	12470 <__assert_fail@plt+0x1860>
   12618:	mov	r1, r0
   1261c:	ldr	r2, [sp, #12]
   12620:	add	r0, r2, r0, lsl #4
   12624:	ldr	lr, [fp, #-8]
   12628:	str	r1, [sp, #4]
   1262c:	mov	r1, lr
   12630:	ldr	lr, [sp, #8]
   12634:	blx	lr
   12638:	ldr	r0, [fp, #-4]
   1263c:	bl	12584 <__assert_fail@plt+0x1974>
   12640:	ldr	r0, [fp, #-4]
   12644:	movw	r1, #8052	; 0x1f74
   12648:	add	r2, r0, r1
   1264c:	ldr	r2, [r2]
   12650:	mvn	lr, #0
   12654:	add	r2, r2, lr
   12658:	add	r0, r0, r1
   1265c:	str	r2, [r0]
   12660:	mov	sp, fp
   12664:	pop	{fp, pc}
   12668:	andeq	r7, r1, r4, ror #22
   1266c:	push	{fp, lr}
   12670:	mov	fp, sp
   12674:	sub	sp, sp, #24
   12678:	str	r0, [fp, #-4]
   1267c:	movw	r0, #0
   12680:	str	r0, [sp, #8]
   12684:	ldr	r1, [fp, #-4]
   12688:	movw	r2, #8048	; 0x1f70
   1268c:	add	r1, r1, r2
   12690:	ldr	r1, [r1]
   12694:	cmp	r1, r0
   12698:	bne	126b4 <__assert_fail@plt+0x1aa4>
   1269c:	ldr	r0, [fp, #-4]
   126a0:	movw	r1, #8052	; 0x1f74
   126a4:	add	r0, r0, r1
   126a8:	ldr	r0, [r0]
   126ac:	cmp	r0, #0
   126b0:	bne	126b8 <__assert_fail@plt+0x1aa8>
   126b4:	b	12778 <__assert_fail@plt+0x1b68>
   126b8:	ldr	r0, [pc, #192]	; 12780 <__assert_fail@plt+0x1b70>
   126bc:	ldr	r0, [pc, r0]
   126c0:	ldr	r1, [fp, #-4]
   126c4:	movw	r2, #8052	; 0x1f74
   126c8:	add	r1, r1, r2
   126cc:	ldr	r1, [r1]
   126d0:	str	r0, [sp, #4]
   126d4:	mov	r0, r1
   126d8:	movw	r1, #4
   126dc:	ldr	r2, [sp, #4]
   126e0:	blx	r2
   126e4:	ldr	r1, [fp, #-4]
   126e8:	movw	r2, #8048	; 0x1f70
   126ec:	add	r1, r1, r2
   126f0:	str	r0, [r1]
   126f4:	movw	r0, #0
   126f8:	str	r0, [sp, #12]
   126fc:	ldr	r0, [sp, #12]
   12700:	movw	r1, #503	; 0x1f7
   12704:	cmp	r0, r1
   12708:	bge	12778 <__assert_fail@plt+0x1b68>
   1270c:	ldr	r0, [fp, #-4]
   12710:	ldr	r1, [sp, #12]
   12714:	add	r0, r0, r1, lsl #4
   12718:	ldr	r0, [r0]
   1271c:	str	r0, [fp, #-8]
   12720:	ldr	r0, [fp, #-8]
   12724:	movw	r1, #0
   12728:	cmp	r0, r1
   1272c:	beq	12764 <__assert_fail@plt+0x1b54>
   12730:	ldr	r0, [fp, #-8]
   12734:	ldr	r1, [fp, #-4]
   12738:	movw	r2, #8048	; 0x1f70
   1273c:	ldr	r1, [r1, r2]
   12740:	ldr	r2, [sp, #8]
   12744:	add	r3, r2, #1
   12748:	str	r3, [sp, #8]
   1274c:	add	r1, r1, r2, lsl #2
   12750:	str	r0, [r1]
   12754:	ldr	r0, [fp, #-8]
   12758:	ldr	r0, [r0, #4]
   1275c:	str	r0, [fp, #-8]
   12760:	b	12720 <__assert_fail@plt+0x1b10>
   12764:	b	12768 <__assert_fail@plt+0x1b58>
   12768:	ldr	r0, [sp, #12]
   1276c:	add	r0, r0, #1
   12770:	str	r0, [sp, #12]
   12774:	b	126fc <__assert_fail@plt+0x1aec>
   12778:	mov	sp, fp
   1277c:	pop	{fp, pc}
   12780:	andeq	r7, r1, ip, ror sl
   12784:	push	{fp, lr}
   12788:	mov	fp, sp
   1278c:	sub	sp, sp, #16
   12790:	str	r0, [fp, #-4]
   12794:	str	r1, [sp, #8]
   12798:	movw	r0, #0
   1279c:	strh	r0, [sp, #6]
   127a0:	ldrsh	r0, [sp, #6]
   127a4:	movw	r1, #503	; 0x1f7
   127a8:	cmp	r0, r1
   127ac:	bge	127f0 <__assert_fail@plt+0x1be0>
   127b0:	ldr	r0, [pc, #92]	; 12814 <__assert_fail@plt+0x1c04>
   127b4:	ldr	r0, [pc, r0]
   127b8:	ldr	r1, [fp, #-4]
   127bc:	ldrsh	r2, [sp, #6]
   127c0:	add	r1, r1, r2, lsl #4
   127c4:	ldr	r2, [sp, #8]
   127c8:	str	r0, [sp]
   127cc:	mov	r0, r1
   127d0:	mov	r1, r2
   127d4:	ldr	r2, [sp]
   127d8:	blx	r2
   127dc:	ldrh	r0, [sp, #6]
   127e0:	movw	r1, #1
   127e4:	add	r0, r0, r1
   127e8:	strh	r0, [sp, #6]
   127ec:	b	127a0 <__assert_fail@plt+0x1b90>
   127f0:	ldr	r0, [fp, #-4]
   127f4:	bl	12584 <__assert_fail@plt+0x1974>
   127f8:	ldr	r0, [fp, #-4]
   127fc:	movw	lr, #8052	; 0x1f74
   12800:	add	r0, r0, lr
   12804:	movw	lr, #0
   12808:	str	lr, [r0]
   1280c:	mov	sp, fp
   12810:	pop	{fp, pc}
   12814:	muleq	r1, ip, r9
   12818:	push	{fp, lr}
   1281c:	mov	fp, sp
   12820:	sub	sp, sp, #16
   12824:	str	r0, [fp, #-4]
   12828:	str	r1, [sp, #8]
   1282c:	ldr	r0, [fp, #-4]
   12830:	ldr	r1, [sp, #8]
   12834:	bl	10a90 <calloc@plt>
   12838:	str	r0, [sp, #4]
   1283c:	ldr	r0, [sp, #4]
   12840:	movw	r1, #0
   12844:	cmp	r0, r1
   12848:	bne	12858 <__assert_fail@plt+0x1c48>
   1284c:	ldr	r0, [pc, #16]	; 12864 <__assert_fail@plt+0x1c54>
   12850:	add	r0, pc, r0
   12854:	bl	12ef8 <error@@Base>
   12858:	ldr	r0, [sp, #4]
   1285c:	mov	sp, fp
   12860:	pop	{fp, pc}
   12864:	andeq	r3, r0, fp, asr #11
   12868:	sub	sp, sp, #20
   1286c:	str	r0, [sp, #12]
   12870:	str	r1, [sp, #8]
   12874:	movw	r0, #0
   12878:	str	r0, [sp, #4]
   1287c:	ldr	r0, [sp, #12]
   12880:	ldr	r1, [sp, #4]
   12884:	add	r0, r0, r1
   12888:	ldrb	r0, [r0]
   1288c:	cmp	r0, #0
   12890:	movw	r0, #0
   12894:	str	r0, [sp]
   12898:	beq	128cc <__assert_fail@plt+0x1cbc>
   1289c:	ldr	r0, [sp, #12]
   128a0:	ldr	r1, [sp, #4]
   128a4:	add	r0, r0, r1
   128a8:	ldrb	r0, [r0]
   128ac:	ldr	r1, [sp, #8]
   128b0:	ldr	r2, [sp, #4]
   128b4:	add	r1, r1, r2
   128b8:	ldrb	r1, [r1]
   128bc:	cmp	r0, r1
   128c0:	movw	r0, #0
   128c4:	moveq	r0, #1
   128c8:	str	r0, [sp]
   128cc:	ldr	r0, [sp]
   128d0:	tst	r0, #1
   128d4:	beq	128ec <__assert_fail@plt+0x1cdc>
   128d8:	b	128dc <__assert_fail@plt+0x1ccc>
   128dc:	ldr	r0, [sp, #4]
   128e0:	add	r0, r0, #1
   128e4:	str	r0, [sp, #4]
   128e8:	b	1287c <__assert_fail@plt+0x1c6c>
   128ec:	ldr	r0, [sp, #12]
   128f0:	ldr	r1, [sp, #4]
   128f4:	add	r0, r0, r1
   128f8:	ldrb	r0, [r0]
   128fc:	cmp	r0, #0
   12900:	bne	1291c <__assert_fail@plt+0x1d0c>
   12904:	ldr	r0, [sp, #8]
   12908:	ldr	r1, [sp, #4]
   1290c:	add	r0, r0, r1
   12910:	ldrb	r0, [r0]
   12914:	cmp	r0, #0
   12918:	beq	1295c <__assert_fail@plt+0x1d4c>
   1291c:	ldr	r0, [sp, #12]
   12920:	ldr	r1, [sp, #4]
   12924:	add	r0, r0, r1
   12928:	ldrb	r0, [r0]
   1292c:	ldr	r1, [sp, #8]
   12930:	ldr	r2, [sp, #4]
   12934:	add	r1, r1, r2
   12938:	ldrb	r1, [r1]
   1293c:	cmp	r0, r1
   12940:	movw	r0, #0
   12944:	movlt	r0, #1
   12948:	tst	r0, #1
   1294c:	mvn	r0, #0
   12950:	moveq	r0, #1
   12954:	str	r0, [sp, #16]
   12958:	b	12964 <__assert_fail@plt+0x1d54>
   1295c:	movw	r0, #0
   12960:	str	r0, [sp, #16]
   12964:	ldr	r0, [sp, #16]
   12968:	add	sp, sp, #20
   1296c:	bx	lr
   12970:	push	{fp, lr}
   12974:	mov	fp, sp
   12978:	sub	sp, sp, #24
   1297c:	str	r0, [fp, #-8]
   12980:	str	r1, [sp, #12]
   12984:	ldr	r0, [fp, #-8]
   12988:	movw	r1, #0
   1298c:	cmp	r0, r1
   12990:	bne	129d4 <__assert_fail@plt+0x1dc4>
   12994:	ldr	r0, [sp, #12]
   12998:	ldrb	r0, [r0]
   1299c:	cmp	r0, #114	; 0x72
   129a0:	bne	129b8 <__assert_fail@plt+0x1da8>
   129a4:	ldr	r0, [pc, #148]	; 12a40 <__assert_fail@plt+0x1e30>
   129a8:	ldr	r0, [pc, r0]
   129ac:	ldr	r0, [r0]
   129b0:	str	r0, [sp, #4]
   129b4:	b	129c8 <__assert_fail@plt+0x1db8>
   129b8:	ldr	r0, [pc, #124]	; 12a3c <__assert_fail@plt+0x1e2c>
   129bc:	ldr	r0, [pc, r0]
   129c0:	ldr	r0, [r0]
   129c4:	str	r0, [sp, #4]
   129c8:	ldr	r0, [sp, #4]
   129cc:	str	r0, [fp, #-4]
   129d0:	b	12a30 <__assert_fail@plt+0x1e20>
   129d4:	ldr	r0, [fp, #-8]
   129d8:	ldr	r1, [sp, #12]
   129dc:	bl	10aa8 <fopen@plt>
   129e0:	str	r0, [sp, #8]
   129e4:	ldr	r0, [sp, #8]
   129e8:	movw	r1, #0
   129ec:	cmp	r0, r1
   129f0:	beq	12a00 <__assert_fail@plt+0x1df0>
   129f4:	ldr	r0, [sp, #8]
   129f8:	str	r0, [fp, #-4]
   129fc:	b	12a30 <__assert_fail@plt+0x1e20>
   12a00:	ldr	r0, [sp, #12]
   12a04:	ldrb	r0, [r0]
   12a08:	cmp	r0, #119	; 0x77
   12a0c:	bne	12a20 <__assert_fail@plt+0x1e10>
   12a10:	ldr	r0, [pc, #48]	; 12a48 <__assert_fail@plt+0x1e38>
   12a14:	add	r0, pc, r0
   12a18:	ldr	r1, [fp, #-8]
   12a1c:	bl	12f58 <error@@Base+0x60>
   12a20:	ldr	r0, [pc, #28]	; 12a44 <__assert_fail@plt+0x1e34>
   12a24:	add	r0, pc, r0
   12a28:	ldr	r1, [fp, #-8]
   12a2c:	bl	12f58 <error@@Base+0x60>
   12a30:	ldr	r0, [fp, #-4]
   12a34:	mov	sp, fp
   12a38:	pop	{fp, pc}
   12a3c:	andeq	r7, r1, r4, ror #14
   12a40:	andeq	r7, r1, r0, ror #14
   12a44:	andeq	r3, r0, r7, lsr #8
   12a48:	andeq	r3, r0, r1, lsr #8
   12a4c:	push	{fp, lr}
   12a50:	mov	fp, sp
   12a54:	sub	sp, sp, #8
   12a58:	ldr	r1, [pc, #64]	; 12aa0 <__assert_fail@plt+0x1e90>
   12a5c:	ldr	r1, [pc, r1]
   12a60:	str	r0, [sp, #4]
   12a64:	ldr	r0, [sp, #4]
   12a68:	ldr	r1, [r1]
   12a6c:	cmp	r0, r1
   12a70:	beq	12a98 <__assert_fail@plt+0x1e88>
   12a74:	ldr	r0, [pc, #40]	; 12aa4 <__assert_fail@plt+0x1e94>
   12a78:	ldr	r0, [pc, r0]
   12a7c:	ldr	r1, [sp, #4]
   12a80:	ldr	r0, [r0]
   12a84:	cmp	r1, r0
   12a88:	beq	12a98 <__assert_fail@plt+0x1e88>
   12a8c:	ldr	r0, [sp, #4]
   12a90:	bl	10b98 <fclose@plt>
   12a94:	str	r0, [sp]
   12a98:	mov	sp, fp
   12a9c:	pop	{fp, pc}
   12aa0:	andeq	r7, r1, ip, lsr #13
   12aa4:	andeq	r7, r1, r8, lsr #13
   12aa8:	push	{fp, lr}
   12aac:	mov	fp, sp
   12ab0:	sub	sp, sp, #96	; 0x60
   12ab4:	str	r0, [fp, #-4]
   12ab8:	ldr	r0, [fp, #-4]
   12abc:	mov	r1, sp
   12ac0:	bl	15b94 <error@@Base+0x2c9c>
   12ac4:	cmp	r0, #0
   12ac8:	movw	r0, #0
   12acc:	moveq	r0, #1
   12ad0:	tst	r0, #1
   12ad4:	movw	r0, #1
   12ad8:	moveq	r0, #0
   12adc:	and	r0, r0, #255	; 0xff
   12ae0:	mov	sp, fp
   12ae4:	pop	{fp, pc}
   12ae8:	push	{fp, lr}
   12aec:	mov	fp, sp
   12af0:	sub	sp, sp, #8
   12af4:	ldr	r0, [pc, #68]	; 12b40 <__assert_fail@plt+0x1f30>
   12af8:	add	r0, pc, r0
   12afc:	ldrh	r1, [r0]
   12b00:	movw	r2, #1
   12b04:	add	r1, r1, r2
   12b08:	strh	r1, [r0]
   12b0c:	sxth	r0, r1
   12b10:	bl	12b44 <__assert_fail@plt+0x1f34>
   12b14:	ldr	r1, [pc, #32]	; 12b3c <__assert_fail@plt+0x1f2c>
   12b18:	ldr	r1, [pc, r1]
   12b1c:	str	r0, [sp, #4]
   12b20:	ldr	r0, [sp, #4]
   12b24:	blx	r1
   12b28:	ldr	r1, [sp, #4]
   12b2c:	str	r0, [sp]
   12b30:	mov	r0, r1
   12b34:	mov	sp, fp
   12b38:	pop	{fp, pc}
   12b3c:	andeq	r7, r1, r8, lsr #11
   12b40:	strdeq	r9, [r1], -r8
   12b44:	push	{fp, lr}
   12b48:	mov	fp, sp
   12b4c:	sub	sp, sp, #128	; 0x80
   12b50:	ldr	r1, [pc, #112]	; 12bc8 <__assert_fail@plt+0x1fb8>
   12b54:	ldr	r1, [pc, r1]
   12b58:	ldr	r2, [pc, #108]	; 12bcc <__assert_fail@plt+0x1fbc>
   12b5c:	ldr	r2, [pc, r2]
   12b60:	add	r3, sp, #26
   12b64:	strh	r0, [fp, #-2]
   12b68:	ldr	r2, [r2]
   12b6c:	str	r3, [sp, #20]
   12b70:	str	r2, [sp, #16]
   12b74:	blx	r1
   12b78:	ldr	r1, [pc, #68]	; 12bc4 <__assert_fail@plt+0x1fb4>
   12b7c:	add	r1, pc, r1
   12b80:	ldrsh	r2, [fp, #-2]
   12b84:	ldr	r3, [sp, #20]
   12b88:	str	r0, [sp, #12]
   12b8c:	mov	r0, r3
   12b90:	ldr	lr, [sp, #16]
   12b94:	str	r2, [sp, #8]
   12b98:	mov	r2, lr
   12b9c:	ldr	r3, [sp, #12]
   12ba0:	ldr	ip, [sp, #8]
   12ba4:	str	ip, [sp]
   12ba8:	bl	10bbc <sprintf@plt>
   12bac:	add	r1, sp, #26
   12bb0:	str	r0, [sp, #4]
   12bb4:	mov	r0, r1
   12bb8:	bl	10ae4 <strdup@plt>
   12bbc:	mov	sp, fp
   12bc0:	pop	{fp, pc}
   12bc4:	strdeq	r3, [r0], -r8
   12bc8:	andeq	r7, r1, r8, lsr #11
   12bcc:	muleq	r1, r8, r5
   12bd0:	push	{fp, lr}
   12bd4:	mov	fp, sp
   12bd8:	sub	sp, sp, #16
   12bdc:	str	r0, [fp, #-4]
   12be0:	movw	r0, #47	; 0x2f
   12be4:	strb	r0, [fp, #-5]
   12be8:	ldr	r0, [fp, #-4]
   12bec:	bl	10b74 <strlen@plt>
   12bf0:	sub	r0, r0, #1
   12bf4:	strh	r0, [sp, #8]
   12bf8:	ldrsh	r0, [sp, #8]
   12bfc:	cmp	r0, #0
   12c00:	movw	r0, #0
   12c04:	str	r0, [sp, #4]
   12c08:	blt	12c30 <__assert_fail@plt+0x2020>
   12c0c:	ldr	r0, [fp, #-4]
   12c10:	ldrsh	r1, [sp, #8]
   12c14:	add	r0, r0, r1
   12c18:	ldrb	r0, [r0]
   12c1c:	ldrb	r1, [fp, #-5]
   12c20:	cmp	r0, r1
   12c24:	movw	r0, #0
   12c28:	movne	r0, #1
   12c2c:	str	r0, [sp, #4]
   12c30:	ldr	r0, [sp, #4]
   12c34:	tst	r0, #1
   12c38:	beq	12c54 <__assert_fail@plt+0x2044>
   12c3c:	b	12c40 <__assert_fail@plt+0x2030>
   12c40:	ldrh	r0, [sp, #8]
   12c44:	movw	r1, #65535	; 0xffff
   12c48:	add	r0, r0, r1
   12c4c:	strh	r0, [sp, #8]
   12c50:	b	12bf8 <__assert_fail@plt+0x1fe8>
   12c54:	ldr	r0, [fp, #-4]
   12c58:	ldrsh	r1, [sp, #8]
   12c5c:	add	r1, r1, #1
   12c60:	add	r0, r0, r1
   12c64:	mov	sp, fp
   12c68:	pop	{fp, pc}
   12c6c:	push	{fp, lr}
   12c70:	mov	fp, sp
   12c74:	sub	sp, sp, #16
   12c78:	str	r0, [fp, #-4]
   12c7c:	str	r1, [sp, #8]
   12c80:	str	r2, [sp, #4]
   12c84:	str	r3, [sp]
   12c88:	ldr	r0, [sp, #8]
   12c8c:	ldr	r0, [r0]
   12c90:	bl	12bd0 <__assert_fail@plt+0x1fc0>
   12c94:	ldr	r1, [pc, #36]	; 12cc0 <__assert_fail@plt+0x20b0>
   12c98:	ldr	r1, [pc, r1]
   12c9c:	str	r0, [r1]
   12ca0:	bl	13038 <error@@Base+0x140>
   12ca4:	ldr	r0, [fp, #-4]
   12ca8:	ldr	r1, [sp, #8]
   12cac:	ldr	r2, [sp, #4]
   12cb0:	ldr	r3, [sp]
   12cb4:	bl	12cc4 <__assert_fail@plt+0x20b4>
   12cb8:	mov	sp, fp
   12cbc:	pop	{fp, pc}
   12cc0:	andeq	r7, r1, ip, asr r4
   12cc4:	push	{fp, lr}
   12cc8:	mov	fp, sp
   12ccc:	sub	sp, sp, #48	; 0x30
   12cd0:	str	r0, [fp, #-4]
   12cd4:	str	r1, [fp, #-8]
   12cd8:	str	r2, [fp, #-12]
   12cdc:	str	r3, [fp, #-16]
   12ce0:	movw	r0, #0
   12ce4:	strh	r0, [fp, #-20]	; 0xffffffec
   12ce8:	ldr	r0, [fp, #-4]
   12cec:	ldr	r0, [r0]
   12cf0:	cmp	r0, #1
   12cf4:	bne	12d14 <__assert_fail@plt+0x2104>
   12cf8:	ldr	r0, [pc, #404]	; 12e94 <__assert_fail@plt+0x2284>
   12cfc:	ldr	r0, [pc, r0]
   12d00:	ldrb	r0, [r0]
   12d04:	cmp	r0, #0
   12d08:	beq	12d14 <__assert_fail@plt+0x2104>
   12d0c:	ldr	r0, [fp, #-12]
   12d10:	bl	130d4 <error@@Base+0x1dc>
   12d14:	movw	r0, #1
   12d18:	strh	r0, [fp, #-18]	; 0xffffffee
   12d1c:	ldrsh	r0, [fp, #-18]	; 0xffffffee
   12d20:	ldr	r1, [fp, #-4]
   12d24:	ldr	r1, [r1]
   12d28:	cmp	r0, r1
   12d2c:	bge	12e80 <__assert_fail@plt+0x2270>
   12d30:	ldr	r0, [fp, #-8]
   12d34:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12d38:	add	r0, r0, r1, lsl #2
   12d3c:	ldr	r0, [r0]
   12d40:	ldrb	r0, [r0]
   12d44:	cmp	r0, #45	; 0x2d
   12d48:	bne	12e48 <__assert_fail@plt+0x2238>
   12d4c:	ldr	r0, [fp, #-8]
   12d50:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12d54:	add	r0, r0, r1, lsl #2
   12d58:	ldr	r0, [r0]
   12d5c:	ldrb	r0, [r0, #1]
   12d60:	cmp	r0, #0
   12d64:	beq	12e48 <__assert_fail@plt+0x2238>
   12d68:	ldr	r0, [pc, #296]	; 12e98 <__assert_fail@plt+0x2288>
   12d6c:	add	r0, pc, r0
   12d70:	ldr	r1, [fp, #-8]
   12d74:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   12d78:	ldr	r2, [r1, r2, lsl #2]!
   12d7c:	ldr	r1, [r1]
   12d80:	str	r0, [sp, #24]
   12d84:	mov	r0, r1
   12d88:	str	r2, [sp, #20]
   12d8c:	bl	10b74 <strlen@plt>
   12d90:	ldr	r1, [sp, #24]
   12d94:	str	r0, [sp, #16]
   12d98:	mov	r0, r1
   12d9c:	ldr	r1, [sp, #20]
   12da0:	ldr	r2, [sp, #16]
   12da4:	bl	10bec <strncmp@plt>
   12da8:	cmp	r0, #0
   12dac:	bne	12db8 <__assert_fail@plt+0x21a8>
   12db0:	ldr	r0, [fp, #-12]
   12db4:	bl	130d4 <error@@Base+0x1dc>
   12db8:	ldr	r0, [fp, #-8]
   12dbc:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12dc0:	add	r0, r0, r1, lsl #2
   12dc4:	ldr	r0, [r0]
   12dc8:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12dcc:	add	r1, r1, #1
   12dd0:	ldr	r2, [fp, #-4]
   12dd4:	ldr	r2, [r2]
   12dd8:	cmp	r1, r2
   12ddc:	str	r0, [sp, #12]
   12de0:	bge	12e00 <__assert_fail@plt+0x21f0>
   12de4:	ldr	r0, [fp, #-8]
   12de8:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12dec:	add	r1, r1, #1
   12df0:	add	r0, r0, r1, lsl #2
   12df4:	ldr	r0, [r0]
   12df8:	str	r0, [sp, #8]
   12dfc:	b	12e0c <__assert_fail@plt+0x21fc>
   12e00:	movw	r0, #0
   12e04:	str	r0, [sp, #8]
   12e08:	b	12e0c <__assert_fail@plt+0x21fc>
   12e0c:	ldr	r0, [sp, #8]
   12e10:	ldr	r2, [fp, #-16]
   12e14:	ldr	r1, [sp, #12]
   12e18:	str	r0, [sp, #4]
   12e1c:	mov	r0, r1
   12e20:	ldr	r1, [sp, #4]
   12e24:	bl	13160 <error@@Base+0x268>
   12e28:	sxtb	r0, r0
   12e2c:	cmp	r0, #0
   12e30:	beq	12e44 <__assert_fail@plt+0x2234>
   12e34:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12e38:	movw	r1, #1
   12e3c:	add	r0, r0, r1
   12e40:	strh	r0, [fp, #-18]	; 0xffffffee
   12e44:	b	12e68 <__assert_fail@plt+0x2258>
   12e48:	ldr	r0, [fp, #-8]
   12e4c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12e50:	ldr	r1, [r0, r1, lsl #2]
   12e54:	ldrsh	r2, [fp, #-20]	; 0xffffffec
   12e58:	add	r3, r2, #1
   12e5c:	strh	r3, [fp, #-20]	; 0xffffffec
   12e60:	add	r0, r0, r2, lsl #2
   12e64:	str	r1, [r0]
   12e68:	b	12e6c <__assert_fail@plt+0x225c>
   12e6c:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12e70:	movw	r1, #1
   12e74:	add	r0, r0, r1
   12e78:	strh	r0, [fp, #-18]	; 0xffffffee
   12e7c:	b	12d1c <__assert_fail@plt+0x210c>
   12e80:	ldrsh	r0, [fp, #-20]	; 0xffffffec
   12e84:	ldr	r1, [fp, #-4]
   12e88:	str	r0, [r1]
   12e8c:	mov	sp, fp
   12e90:	pop	{fp, pc}
   12e94:	muleq	r1, r4, r3
   12e98:	andeq	r3, r0, r5, lsr #2
   12e9c:	push	{fp, lr}
   12ea0:	mov	fp, sp
   12ea4:	movw	r0, #0
   12ea8:	bl	12eac <__assert_fail@plt+0x229c>
   12eac:	push	{fp, lr}
   12eb0:	mov	fp, sp
   12eb4:	sub	sp, sp, #8
   12eb8:	ldr	r1, [pc, #48]	; 12ef0 <__assert_fail@plt+0x22e0>
   12ebc:	ldr	r1, [pc, r1]
   12ec0:	str	r0, [sp, #4]
   12ec4:	ldr	r0, [r1]
   12ec8:	movw	r1, #0
   12ecc:	cmp	r0, r1
   12ed0:	beq	12ee4 <__assert_fail@plt+0x22d4>
   12ed4:	ldr	r0, [pc, #24]	; 12ef4 <__assert_fail@plt+0x22e4>
   12ed8:	ldr	r0, [pc, r0]
   12edc:	ldr	r0, [r0]
   12ee0:	blx	r0
   12ee4:	bl	133d4 <error@@Base+0x4dc>
   12ee8:	ldr	r0, [sp, #4]
   12eec:	bl	10b5c <exit@plt>
   12ef0:	andeq	r7, r1, r4, asr #4
   12ef4:	andeq	r7, r1, r8, lsr #4

00012ef8 <error@@Base>:
   12ef8:	push	{fp, lr}
   12efc:	mov	fp, sp
   12f00:	sub	sp, sp, #8
   12f04:	ldr	r1, [pc, #64]	; 12f4c <error@@Base+0x54>
   12f08:	add	r1, pc, r1
   12f0c:	ldr	r2, [pc, #60]	; 12f50 <error@@Base+0x58>
   12f10:	ldr	r2, [pc, r2]
   12f14:	ldr	r3, [pc, #56]	; 12f54 <error@@Base+0x5c>
   12f18:	ldr	r3, [pc, r3]
   12f1c:	str	r0, [sp, #4]
   12f20:	ldr	r0, [r3]
   12f24:	ldr	r2, [r2]
   12f28:	ldr	r3, [sp, #4]
   12f2c:	bl	10b80 <fprintf@plt>
   12f30:	ldr	r1, [pc, #16]	; 12f48 <error@@Base+0x50>
   12f34:	ldr	r1, [pc, r1]
   12f38:	ldr	r1, [r1]
   12f3c:	str	r0, [sp]
   12f40:	mov	r0, r1
   12f44:	bl	12eac <__assert_fail@plt+0x229c>
   12f48:	andeq	r7, r1, r0, lsl #4
   12f4c:	andeq	r2, r0, r7, asr pc
   12f50:	andeq	r7, r1, r4, ror #3
   12f54:			; <UNDEFINED> instruction: 0x000171b8
   12f58:	push	{fp, lr}
   12f5c:	mov	fp, sp
   12f60:	sub	sp, sp, #24
   12f64:	ldr	r2, [pc, #88]	; 12fc4 <error@@Base+0xcc>
   12f68:	add	r2, pc, r2
   12f6c:	ldr	r3, [pc, #84]	; 12fc8 <error@@Base+0xd0>
   12f70:	ldr	r3, [pc, r3]
   12f74:	ldr	ip, [pc, #80]	; 12fcc <error@@Base+0xd4>
   12f78:	ldr	ip, [pc, ip]
   12f7c:	str	r0, [fp, #-4]
   12f80:	str	r1, [fp, #-8]
   12f84:	ldr	r0, [ip]
   12f88:	ldr	r1, [r3]
   12f8c:	ldr	r3, [fp, #-4]
   12f90:	ldr	ip, [fp, #-8]
   12f94:	str	r1, [sp, #12]
   12f98:	mov	r1, r2
   12f9c:	ldr	r2, [sp, #12]
   12fa0:	str	ip, [sp]
   12fa4:	bl	10b80 <fprintf@plt>
   12fa8:	ldr	r1, [pc, #16]	; 12fc0 <error@@Base+0xc8>
   12fac:	ldr	r1, [pc, r1]
   12fb0:	ldr	r1, [r1]
   12fb4:	str	r0, [sp, #8]
   12fb8:	mov	r0, r1
   12fbc:	bl	12eac <__assert_fail@plt+0x229c>
   12fc0:	andeq	r7, r1, r8, lsl #3
   12fc4:	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   12fc8:	andeq	r7, r1, r4, lsl #3
   12fcc:	andeq	r7, r1, r8, asr r1
   12fd0:	push	{fp, lr}
   12fd4:	mov	fp, sp
   12fd8:	sub	sp, sp, #24
   12fdc:	ldr	r2, [pc, #72]	; 1302c <error@@Base+0x134>
   12fe0:	add	r2, pc, r2
   12fe4:	ldr	r3, [pc, #68]	; 13030 <error@@Base+0x138>
   12fe8:	ldr	r3, [pc, r3]
   12fec:	ldr	ip, [pc, #64]	; 13034 <error@@Base+0x13c>
   12ff0:	ldr	ip, [pc, ip]
   12ff4:	str	r0, [fp, #-4]
   12ff8:	str	r1, [fp, #-8]
   12ffc:	ldr	r0, [ip]
   13000:	ldr	r1, [r3]
   13004:	ldr	r3, [fp, #-4]
   13008:	ldr	ip, [fp, #-8]
   1300c:	str	r1, [sp, #12]
   13010:	mov	r1, r2
   13014:	ldr	r2, [sp, #12]
   13018:	str	ip, [sp]
   1301c:	bl	10b80 <fprintf@plt>
   13020:	str	r0, [sp, #8]
   13024:	mov	sp, fp
   13028:	pop	{fp, pc}
   1302c:	andeq	r2, r0, r7, lsl #29
   13030:	andeq	r7, r1, ip, lsl #2
   13034:	andeq	r7, r1, r0, ror #1
   13038:	push	{fp, lr}
   1303c:	mov	fp, sp
   13040:	sub	sp, sp, #8
   13044:	ldr	r0, [pc, #48]	; 1307c <error@@Base+0x184>
   13048:	add	r1, pc, r0
   1304c:	movw	r0, #2
   13050:	bl	10b44 <__sysv_signal@plt>
   13054:	ldr	r1, [pc, #28]	; 13078 <error@@Base+0x180>
   13058:	add	r1, pc, r1
   1305c:	movw	lr, #15
   13060:	str	r0, [sp, #4]
   13064:	mov	r0, lr
   13068:	bl	10b44 <__sysv_signal@plt>
   1306c:	str	r0, [sp]
   13070:	mov	sp, fp
   13074:	pop	{fp, pc}
   13078:	andeq	r0, r0, r0, lsr #32
   1307c:	andeq	r0, r0, r0, lsr r0
   13080:	push	{fp, lr}
   13084:	mov	fp, sp
   13088:	sub	sp, sp, #8
   1308c:	ldr	r1, [pc, #52]	; 130c8 <error@@Base+0x1d0>
   13090:	add	r1, pc, r1
   13094:	str	r0, [sp, #4]
   13098:	ldrsb	r0, [r1]
   1309c:	cmp	r0, #0
   130a0:	beq	130ac <error@@Base+0x1b4>
   130a4:	mov	sp, fp
   130a8:	pop	{fp, pc}
   130ac:	ldr	r0, [pc, #24]	; 130cc <error@@Base+0x1d4>
   130b0:	add	r0, pc, r0
   130b4:	ldr	r1, [pc, #20]	; 130d0 <error@@Base+0x1d8>
   130b8:	add	r1, pc, r1
   130bc:	movw	r2, #1
   130c0:	strb	r2, [r1]
   130c4:	bl	12ef8 <error@@Base>
   130c8:	andeq	r9, r1, r2, ror #4
   130cc:	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   130d0:	andeq	r9, r1, sl, lsr r2
   130d4:	push	{fp, lr}
   130d8:	mov	fp, sp
   130dc:	sub	sp, sp, #16
   130e0:	ldr	r1, [pc, #100]	; 1314c <error@@Base+0x254>
   130e4:	ldr	r1, [pc, r1]
   130e8:	str	r0, [fp, #-4]
   130ec:	ldr	r0, [r1]
   130f0:	movw	r1, #0
   130f4:	cmp	r0, r1
   130f8:	beq	13110 <error@@Base+0x218>
   130fc:	ldr	r0, [pc, #88]	; 1315c <error@@Base+0x264>
   13100:	ldr	r0, [pc, r0]
   13104:	ldr	r0, [r0]
   13108:	blx	r0
   1310c:	b	13148 <error@@Base+0x250>
   13110:	ldr	r0, [pc, #56]	; 13150 <error@@Base+0x258>
   13114:	add	r1, pc, r0
   13118:	ldr	r0, [pc, #52]	; 13154 <error@@Base+0x25c>
   1311c:	ldr	r0, [pc, r0]
   13120:	ldr	r2, [pc, #48]	; 13158 <error@@Base+0x260>
   13124:	ldr	r2, [pc, r2]
   13128:	ldr	r2, [r2]
   1312c:	ldr	r0, [r0]
   13130:	ldr	r3, [fp, #-4]
   13134:	str	r0, [sp, #8]
   13138:	mov	r0, r2
   1313c:	ldr	r2, [sp, #8]
   13140:	bl	10b80 <fprintf@plt>
   13144:	str	r0, [sp, #4]
   13148:	bl	12e9c <__assert_fail@plt+0x228c>
   1314c:	ldrdeq	r6, [r1], -r0
   13150:	andeq	r2, r0, r3, lsl #27
   13154:	ldrdeq	r6, [r1], -r8
   13158:	andeq	r6, r1, ip, lsr #31
   1315c:			; <UNDEFINED> instruction: 0x00016fb4
   13160:	push	{fp, lr}
   13164:	mov	fp, sp
   13168:	sub	sp, sp, #32
   1316c:	str	r0, [fp, #-8]
   13170:	str	r1, [fp, #-12]
   13174:	str	r2, [sp, #16]
   13178:	ldr	r0, [sp, #16]
   1317c:	movw	r1, #0
   13180:	cmp	r0, r1
   13184:	bne	1318c <error@@Base+0x294>
   13188:	b	133a0 <error@@Base+0x4a8>
   1318c:	movw	r0, #0
   13190:	strh	r0, [sp, #14]
   13194:	ldr	r0, [sp, #16]
   13198:	ldrsh	r1, [sp, #14]
   1319c:	movw	r2, #12
   131a0:	mul	r1, r1, r2
   131a4:	add	r0, r0, r1
   131a8:	ldrb	r0, [r0]
   131ac:	cmp	r0, #0
   131b0:	movw	r0, #0
   131b4:	str	r0, [sp, #8]
   131b8:	beq	131ec <error@@Base+0x2f4>
   131bc:	ldr	r0, [fp, #-8]
   131c0:	ldrb	r0, [r0, #1]
   131c4:	ldr	r1, [sp, #16]
   131c8:	ldrsh	r2, [sp, #14]
   131cc:	movw	r3, #12
   131d0:	mul	r2, r2, r3
   131d4:	add	r1, r1, r2
   131d8:	ldrb	r1, [r1]
   131dc:	cmp	r0, r1
   131e0:	movw	r0, #0
   131e4:	movne	r0, #1
   131e8:	str	r0, [sp, #8]
   131ec:	ldr	r0, [sp, #8]
   131f0:	tst	r0, #1
   131f4:	beq	13210 <error@@Base+0x318>
   131f8:	b	131fc <error@@Base+0x304>
   131fc:	ldrh	r0, [sp, #14]
   13200:	movw	r1, #1
   13204:	add	r0, r0, r1
   13208:	strh	r0, [sp, #14]
   1320c:	b	13194 <error@@Base+0x29c>
   13210:	ldr	r0, [sp, #16]
   13214:	ldrsh	r1, [sp, #14]
   13218:	movw	r2, #12
   1321c:	mul	r1, r1, r2
   13220:	add	r0, r0, r1
   13224:	ldrsb	r0, [r0]
   13228:	cmp	r0, #0
   1322c:	bne	13234 <error@@Base+0x33c>
   13230:	b	133a0 <error@@Base+0x4a8>
   13234:	ldr	r0, [sp, #16]
   13238:	ldrsh	r1, [sp, #14]
   1323c:	movw	r2, #12
   13240:	mul	r1, r1, r2
   13244:	add	r0, r0, r1
   13248:	ldr	r0, [r0, #4]
   1324c:	movw	r1, #0
   13250:	cmp	r0, r1
   13254:	beq	13314 <error@@Base+0x41c>
   13258:	ldr	r0, [fp, #-8]
   1325c:	ldrb	r0, [r0, #2]
   13260:	cmp	r0, #0
   13264:	bne	13278 <error@@Base+0x380>
   13268:	ldr	r0, [fp, #-12]
   1326c:	movw	r1, #0
   13270:	cmp	r0, r1
   13274:	beq	13314 <error@@Base+0x41c>
   13278:	ldr	r0, [sp, #16]
   1327c:	ldrsh	r1, [sp, #14]
   13280:	movw	r2, #12
   13284:	mul	r1, r1, r2
   13288:	add	r0, r0, r1
   1328c:	ldr	r0, [r0, #4]
   13290:	ldr	r0, [r0]
   13294:	movw	r1, #0
   13298:	cmp	r0, r1
   1329c:	beq	132a4 <error@@Base+0x3ac>
   132a0:	b	133b0 <error@@Base+0x4b8>
   132a4:	ldr	r0, [fp, #-8]
   132a8:	ldrb	r0, [r0, #2]
   132ac:	cmp	r0, #0
   132b0:	beq	132c4 <error@@Base+0x3cc>
   132b4:	ldr	r0, [fp, #-8]
   132b8:	add	r0, r0, #2
   132bc:	str	r0, [sp, #4]
   132c0:	b	132cc <error@@Base+0x3d4>
   132c4:	ldr	r0, [fp, #-12]
   132c8:	str	r0, [sp, #4]
   132cc:	ldr	r0, [sp, #4]
   132d0:	ldr	r1, [sp, #16]
   132d4:	ldrsh	r2, [sp, #14]
   132d8:	movw	r3, #12
   132dc:	mul	r2, r2, r3
   132e0:	add	r1, r1, r2
   132e4:	ldr	r1, [r1, #4]
   132e8:	str	r0, [r1]
   132ec:	ldr	r0, [fp, #-8]
   132f0:	ldrb	r0, [r0, #2]
   132f4:	cmp	r0, #0
   132f8:	movw	r0, #0
   132fc:	movne	r0, #1
   13300:	tst	r0, #1
   13304:	movw	r0, #0
   13308:	moveq	r0, #1
   1330c:	strb	r0, [fp, #-1]
   13310:	b	133c0 <error@@Base+0x4c8>
   13314:	ldr	r0, [sp, #16]
   13318:	ldrsh	r1, [sp, #14]
   1331c:	movw	r2, #12
   13320:	mul	r1, r1, r2
   13324:	add	r0, r0, r1
   13328:	ldr	r0, [r0, #8]
   1332c:	movw	r1, #0
   13330:	cmp	r0, r1
   13334:	beq	1339c <error@@Base+0x4a4>
   13338:	ldr	r0, [fp, #-8]
   1333c:	ldrsb	r0, [r0, #2]
   13340:	cmp	r0, #0
   13344:	bne	1339c <error@@Base+0x4a4>
   13348:	ldr	r0, [sp, #16]
   1334c:	ldrsh	r1, [sp, #14]
   13350:	movw	r2, #12
   13354:	mul	r1, r1, r2
   13358:	add	r0, r0, r1
   1335c:	ldr	r0, [r0, #8]
   13360:	ldrsb	r0, [r0]
   13364:	cmp	r0, #0
   13368:	beq	13370 <error@@Base+0x478>
   1336c:	b	133b0 <error@@Base+0x4b8>
   13370:	ldr	r0, [sp, #16]
   13374:	ldrsh	r1, [sp, #14]
   13378:	movw	r2, #12
   1337c:	mul	r1, r1, r2
   13380:	add	r0, r0, r1
   13384:	ldr	r0, [r0, #8]
   13388:	movw	r1, #1
   1338c:	strb	r1, [r0]
   13390:	movw	r0, #0
   13394:	strb	r0, [fp, #-1]
   13398:	b	133c0 <error@@Base+0x4c8>
   1339c:	b	133a0 <error@@Base+0x4a8>
   133a0:	ldr	r0, [pc, #36]	; 133cc <error@@Base+0x4d4>
   133a4:	add	r0, pc, r0
   133a8:	ldr	r1, [fp, #-8]
   133ac:	bl	12f58 <error@@Base+0x60>
   133b0:	ldr	r0, [pc, #24]	; 133d0 <error@@Base+0x4d8>
   133b4:	add	r0, pc, r0
   133b8:	ldr	r1, [fp, #-8]
   133bc:	bl	12f58 <error@@Base+0x60>
   133c0:	ldrb	r0, [fp, #-1]
   133c4:	mov	sp, fp
   133c8:	pop	{fp, pc}
   133cc:	andeq	r2, r0, r2, lsl #22
   133d0:	andeq	r2, r0, r1, lsl #22
   133d4:	push	{fp, lr}
   133d8:	mov	fp, sp
   133dc:	sub	sp, sp, #16
   133e0:	movw	r0, #1
   133e4:	strh	r0, [fp, #-2]
   133e8:	ldr	r0, [pc, #88]	; 13448 <error@@Base+0x550>
   133ec:	add	r0, pc, r0
   133f0:	ldrsh	r1, [fp, #-2]
   133f4:	ldrsh	r0, [r0]
   133f8:	cmp	r1, r0
   133fc:	bgt	13440 <error@@Base+0x548>
   13400:	ldrsh	r0, [fp, #-2]
   13404:	bl	12b44 <__assert_fail@plt+0x1f34>
   13408:	ldr	lr, [pc, #60]	; 1344c <error@@Base+0x554>
   1340c:	ldr	lr, [pc, lr]
   13410:	str	r0, [sp, #8]
   13414:	ldr	r0, [sp, #8]
   13418:	blx	lr
   1341c:	ldr	lr, [sp, #8]
   13420:	str	r0, [sp, #4]
   13424:	mov	r0, lr
   13428:	bl	10ab4 <free@plt>
   1342c:	ldrh	r0, [fp, #-2]
   13430:	movw	r1, #1
   13434:	add	r0, r0, r1
   13438:	strh	r0, [fp, #-2]
   1343c:	b	133e8 <error@@Base+0x4f0>
   13440:	mov	sp, fp
   13444:	pop	{fp, pc}
   13448:	andeq	r8, r1, r4, lsl #30
   1344c:			; <UNDEFINED> instruction: 0x00016cb4
   13450:	sub	sp, sp, #12
   13454:	str	r0, [sp, #8]
   13458:	str	r1, [sp, #4]
   1345c:	str	r2, [sp]
   13460:	ldr	r0, [sp, #4]
   13464:	ldr	r1, [sp, #8]
   13468:	ldr	r2, [r1]
   1346c:	add	r0, r2, r0
   13470:	str	r0, [r1]
   13474:	ldr	r0, [sp]
   13478:	ldr	r1, [sp, #8]
   1347c:	ldr	r2, [r1, #4]
   13480:	add	r0, r2, r0
   13484:	str	r0, [r1, #4]
   13488:	add	sp, sp, #12
   1348c:	bx	lr
   13490:	push	{fp, lr}
   13494:	mov	fp, sp
   13498:	sub	sp, sp, #32
   1349c:	ldr	ip, [pc, #160]	; 13544 <error@@Base+0x64c>
   134a0:	ldr	ip, [pc, ip]
   134a4:	str	r0, [fp, #-4]
   134a8:	str	r1, [fp, #-8]
   134ac:	str	r2, [fp, #-12]
   134b0:	str	r3, [sp, #16]
   134b4:	ldr	r0, [fp, #-4]
   134b8:	ldr	r1, [fp, #-8]
   134bc:	blx	ip
   134c0:	str	r0, [sp, #12]
   134c4:	ldr	r0, [sp, #12]
   134c8:	movw	r1, #0
   134cc:	cmp	r0, r1
   134d0:	bne	13528 <error@@Base+0x630>
   134d4:	ldr	r0, [pc, #112]	; 1354c <error@@Base+0x654>
   134d8:	ldr	r0, [pc, r0]
   134dc:	movw	r1, #1
   134e0:	str	r0, [sp, #8]
   134e4:	mov	r0, r1
   134e8:	movw	r1, #20
   134ec:	ldr	r2, [sp, #8]
   134f0:	blx	r2
   134f4:	str	r0, [sp, #12]
   134f8:	ldr	r0, [fp, #-8]
   134fc:	bl	10ae4 <strdup@plt>
   13500:	ldr	r1, [pc, #64]	; 13548 <error@@Base+0x650>
   13504:	ldr	r1, [pc, r1]
   13508:	ldr	r2, [sp, #12]
   1350c:	str	r0, [r2, #8]
   13510:	ldr	r0, [fp, #-4]
   13514:	ldr	r2, [sp, #12]
   13518:	str	r1, [sp, #4]
   1351c:	mov	r1, r2
   13520:	ldr	r2, [sp, #4]
   13524:	blx	r2
   13528:	ldr	r0, [sp, #12]
   1352c:	add	r0, r0, #12
   13530:	ldr	r1, [fp, #-12]
   13534:	ldr	r2, [sp, #16]
   13538:	bl	13450 <error@@Base+0x558>
   1353c:	mov	sp, fp
   13540:	pop	{fp, pc}
   13544:	andeq	r6, r1, r8, asr #24
   13548:	andeq	r6, r1, ip, lsr #23
   1354c:	andeq	r6, r1, r0, ror #24
   13550:	push	{fp, lr}
   13554:	mov	fp, sp
   13558:	sub	sp, sp, #48	; 0x30
   1355c:	ldr	r2, [pc, #512]	; 13764 <error@@Base+0x86c>
   13560:	add	r2, pc, r2
   13564:	ldr	r3, [pc, #508]	; 13768 <error@@Base+0x870>
   13568:	ldr	r3, [pc, r3]
   1356c:	str	r0, [fp, #-4]
   13570:	str	r1, [fp, #-8]
   13574:	ldr	r0, [fp, #-8]
   13578:	mov	r1, r2
   1357c:	blx	r3
   13580:	str	r0, [fp, #-12]
   13584:	ldr	r0, [fp, #-12]
   13588:	bl	1378c <error@@Base+0x894>
   1358c:	and	r0, r0, #255	; 0xff
   13590:	cmp	r0, #0
   13594:	beq	136f0 <error@@Base+0x7f8>
   13598:	ldr	r0, [pc, #460]	; 1376c <error@@Base+0x874>
   1359c:	add	r0, pc, r0
   135a0:	ldr	r1, [pc, #456]	; 13770 <error@@Base+0x878>
   135a4:	add	r1, pc, r1
   135a8:	movw	r2, #45	; 0x2d
   135ac:	bl	10bec <strncmp@plt>
   135b0:	cmp	r0, #0
   135b4:	bne	136f0 <error@@Base+0x7f8>
   135b8:	ldr	r0, [fp, #-12]
   135bc:	bl	1378c <error@@Base+0x894>
   135c0:	and	r0, r0, #255	; 0xff
   135c4:	cmp	r0, #0
   135c8:	beq	136f0 <error@@Base+0x7f8>
   135cc:	ldr	r0, [pc, #432]	; 13784 <error@@Base+0x88c>
   135d0:	add	r0, pc, r0
   135d4:	ldr	r1, [pc, #428]	; 13788 <error@@Base+0x890>
   135d8:	add	r1, pc, r1
   135dc:	bl	10a9c <strcmp@plt>
   135e0:	cmp	r0, #0
   135e4:	bne	136f0 <error@@Base+0x7f8>
   135e8:	ldr	r0, [fp, #-12]
   135ec:	sub	r1, fp, #16
   135f0:	bl	137e0 <error@@Base+0x8e8>
   135f4:	and	r0, r0, #255	; 0xff
   135f8:	cmp	r0, #0
   135fc:	beq	136f0 <error@@Base+0x7f8>
   13600:	ldr	r0, [fp, #-12]
   13604:	sub	r1, fp, #20
   13608:	bl	137e0 <error@@Base+0x8e8>
   1360c:	and	r0, r0, #255	; 0xff
   13610:	cmp	r0, #0
   13614:	beq	136f0 <error@@Base+0x7f8>
   13618:	ldr	r0, [fp, #-12]
   1361c:	bl	1378c <error@@Base+0x894>
   13620:	and	r0, r0, #255	; 0xff
   13624:	cmp	r0, #0
   13628:	beq	136f0 <error@@Base+0x7f8>
   1362c:	ldr	r0, [fp, #-12]
   13630:	bl	1378c <error@@Base+0x894>
   13634:	and	r0, r0, #255	; 0xff
   13638:	cmp	r0, #0
   1363c:	beq	136f0 <error@@Base+0x7f8>
   13640:	ldr	r0, [fp, #-4]
   13644:	ldr	r1, [fp, #-16]
   13648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1364c:	bl	13450 <error@@Base+0x558>
   13650:	ldr	r0, [fp, #-12]
   13654:	ldr	r1, [fp, #-4]
   13658:	add	r1, r1, #8
   1365c:	bl	1385c <error@@Base+0x964>
   13660:	str	r0, [sp, #24]
   13664:	ldr	r0, [fp, #-12]
   13668:	ldr	r1, [fp, #-4]
   1366c:	add	r1, r1, #416	; 0x1a0
   13670:	bl	1385c <error@@Base+0x964>
   13674:	str	r0, [sp, #20]
   13678:	ldr	r0, [fp, #-12]
   1367c:	ldr	r1, [fp, #-4]
   13680:	add	r1, r1, #824	; 0x338
   13684:	bl	1385c <error@@Base+0x964>
   13688:	ldr	r1, [fp, #-16]
   1368c:	cmp	r1, #0
   13690:	str	r0, [sp, #16]
   13694:	ble	136ec <error@@Base+0x7f4>
   13698:	ldr	r0, [fp, #-12]
   1369c:	ldr	r1, [fp, #-4]
   136a0:	add	r1, r1, #920	; 0x398
   136a4:	bl	1385c <error@@Base+0x964>
   136a8:	ldr	r1, [sp, #24]
   136ac:	cmp	r1, #0
   136b0:	str	r0, [sp, #12]
   136b4:	ble	136c8 <error@@Base+0x7d0>
   136b8:	ldr	r0, [fp, #-12]
   136bc:	ldr	r1, [fp, #-4]
   136c0:	add	r1, r1, #992	; 0x3e0
   136c4:	bl	13950 <error@@Base+0xa58>
   136c8:	ldr	r0, [sp, #20]
   136cc:	cmp	r0, #0
   136d0:	ble	136e8 <error@@Base+0x7f0>
   136d4:	ldr	r0, [fp, #-12]
   136d8:	ldr	r1, [fp, #-4]
   136dc:	movw	r2, #9048	; 0x2358
   136e0:	add	r1, r1, r2
   136e4:	bl	13950 <error@@Base+0xa58>
   136e8:	b	136ec <error@@Base+0x7f4>
   136ec:	b	13740 <error@@Base+0x848>
   136f0:	ldr	r0, [fp, #-8]
   136f4:	movw	r1, #0
   136f8:	cmp	r0, r1
   136fc:	beq	1370c <error@@Base+0x814>
   13700:	ldr	r0, [fp, #-8]
   13704:	str	r0, [sp, #8]
   13708:	b	1371c <error@@Base+0x824>
   1370c:	ldr	r0, [pc, #96]	; 13774 <error@@Base+0x87c>
   13710:	add	r0, pc, r0
   13714:	str	r0, [sp, #8]
   13718:	b	1371c <error@@Base+0x824>
   1371c:	ldr	r0, [sp, #8]
   13720:	ldr	r1, [pc, #80]	; 13778 <error@@Base+0x880>
   13724:	add	r1, pc, r1
   13728:	ldr	r2, [pc, #76]	; 1377c <error@@Base+0x884>
   1372c:	ldr	r2, [pc, r2]
   13730:	str	r0, [sp, #4]
   13734:	mov	r0, r1
   13738:	ldr	r1, [sp, #4]
   1373c:	blx	r2
   13740:	ldr	r0, [pc, #56]	; 13780 <error@@Base+0x888>
   13744:	ldr	r0, [pc, r0]
   13748:	ldr	r1, [fp, #-12]
   1374c:	str	r0, [sp]
   13750:	mov	r0, r1
   13754:	ldr	r1, [sp]
   13758:	blx	r1
   1375c:	mov	sp, fp
   13760:	pop	{fp, pc}
   13764:	andeq	r2, r0, r4, lsl #16
   13768:	andeq	r6, r1, r0, asr fp
   1376c:	andeq	r8, r1, r7, asr sp
   13770:	andeq	r2, r0, r2, lsr #18
   13774:	strdeq	r2, [r0], -r8
   13778:	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   1377c:	andeq	r6, r1, r8, lsl sl
   13780:	andeq	r6, r1, r4, asr #18
   13784:	andeq	r8, r1, r3, lsr #26
   13788:	andeq	r5, r0, fp, ror lr
   1378c:	push	{fp, lr}
   13790:	mov	fp, sp
   13794:	sub	sp, sp, #8
   13798:	ldr	r1, [pc, #60]	; 137dc <error@@Base+0x8e4>
   1379c:	add	r1, pc, r1
   137a0:	str	r0, [sp, #4]
   137a4:	ldr	r2, [sp, #4]
   137a8:	mov	r0, r1
   137ac:	movw	r1, #99	; 0x63
   137b0:	bl	10acc <fgets@plt>
   137b4:	movw	r1, #0
   137b8:	cmp	r0, r1
   137bc:	movw	r0, #0
   137c0:	movne	r0, #1
   137c4:	tst	r0, #1
   137c8:	movw	r0, #1
   137cc:	moveq	r0, #0
   137d0:	and	r0, r0, #255	; 0xff
   137d4:	mov	sp, fp
   137d8:	pop	{fp, pc}
   137dc:	andeq	r8, r1, r7, asr fp
   137e0:	push	{fp, lr}
   137e4:	mov	fp, sp
   137e8:	sub	sp, sp, #16
   137ec:	str	r0, [fp, #-4]
   137f0:	str	r1, [sp, #8]
   137f4:	ldr	r0, [fp, #-4]
   137f8:	bl	1378c <error@@Base+0x894>
   137fc:	and	r0, r0, #255	; 0xff
   13800:	cmp	r0, #0
   13804:	movw	r0, #0
   13808:	str	r0, [sp, #4]
   1380c:	beq	13838 <error@@Base+0x940>
   13810:	ldr	r0, [pc, #60]	; 13854 <error@@Base+0x95c>
   13814:	add	r0, pc, r0
   13818:	ldr	r1, [pc, #56]	; 13858 <error@@Base+0x960>
   1381c:	add	r1, pc, r1
   13820:	ldr	r2, [sp, #8]
   13824:	bl	10b8c <__isoc99_sscanf@plt>
   13828:	cmp	r0, #1
   1382c:	movw	r0, #0
   13830:	moveq	r0, #1
   13834:	str	r0, [sp, #4]
   13838:	ldr	r0, [sp, #4]
   1383c:	tst	r0, #1
   13840:	movw	r0, #1
   13844:	moveq	r0, #0
   13848:	and	r0, r0, #255	; 0xff
   1384c:	mov	sp, fp
   13850:	pop	{fp, pc}
   13854:	ldrdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   13858:	andeq	r2, r0, sp, asr r7
   1385c:	push	{fp, lr}
   13860:	mov	fp, sp
   13864:	sub	sp, sp, #24
   13868:	str	r0, [fp, #-4]
   1386c:	str	r1, [fp, #-8]
   13870:	movw	r0, #0
   13874:	str	r0, [sp]
   13878:	ldr	r0, [fp, #-4]
   1387c:	bl	1378c <error@@Base+0x894>
   13880:	and	r0, r0, #255	; 0xff
   13884:	cmp	r0, #0
   13888:	beq	13938 <error@@Base+0xa40>
   1388c:	ldr	r0, [fp, #-4]
   13890:	bl	1378c <error@@Base+0x894>
   13894:	and	r0, r0, #255	; 0xff
   13898:	cmp	r0, #0
   1389c:	beq	13938 <error@@Base+0xa40>
   138a0:	b	138a4 <error@@Base+0x9ac>
   138a4:	ldr	r0, [fp, #-4]
   138a8:	add	r1, sp, #12
   138ac:	add	r2, sp, #8
   138b0:	bl	14008 <error@@Base+0x1110>
   138b4:	sxtb	r0, r0
   138b8:	cmp	r0, #0
   138bc:	beq	13934 <error@@Base+0xa3c>
   138c0:	ldr	r0, [pc, #124]	; 13944 <error@@Base+0xa4c>
   138c4:	add	r0, pc, r0
   138c8:	add	r0, r0, #29
   138cc:	bl	10bc8 <atoi@plt>
   138d0:	str	r0, [sp, #4]
   138d4:	ldr	r0, [sp, #4]
   138d8:	cmp	r0, #0
   138dc:	bne	13918 <error@@Base+0xa20>
   138e0:	ldr	r0, [pc, #96]	; 13948 <error@@Base+0xa50>
   138e4:	add	r0, pc, r0
   138e8:	add	r0, r0, #29
   138ec:	ldr	r1, [pc, #88]	; 1394c <error@@Base+0xa54>
   138f0:	add	r1, pc, r1
   138f4:	bl	10a9c <strcmp@plt>
   138f8:	cmp	r0, #0
   138fc:	bne	1390c <error@@Base+0xa14>
   13900:	ldr	r0, [sp, #12]
   13904:	str	r0, [sp]
   13908:	b	13914 <error@@Base+0xa1c>
   1390c:	movw	r0, #11
   13910:	str	r0, [sp, #4]
   13914:	b	13918 <error@@Base+0xa20>
   13918:	ldr	r0, [fp, #-8]
   1391c:	ldr	r1, [sp, #4]
   13920:	add	r0, r0, r1, lsl #3
   13924:	ldr	r1, [sp, #12]
   13928:	ldr	r2, [sp, #8]
   1392c:	bl	13450 <error@@Base+0x558>
   13930:	b	138a4 <error@@Base+0x9ac>
   13934:	b	13938 <error@@Base+0xa40>
   13938:	ldr	r0, [sp]
   1393c:	mov	sp, fp
   13940:	pop	{fp, pc}
   13944:	andeq	r8, r1, pc, lsr #20
   13948:	andeq	r8, r1, pc, lsl #20
   1394c:	andeq	r2, r0, sp, ror r6
   13950:	push	{fp, lr}
   13954:	mov	fp, sp
   13958:	sub	sp, sp, #24
   1395c:	str	r0, [fp, #-4]
   13960:	str	r1, [fp, #-8]
   13964:	ldr	r0, [fp, #-4]
   13968:	bl	1378c <error@@Base+0x894>
   1396c:	and	r0, r0, #255	; 0xff
   13970:	cmp	r0, #0
   13974:	beq	13a00 <error@@Base+0xb08>
   13978:	ldr	r0, [fp, #-4]
   1397c:	bl	1378c <error@@Base+0x894>
   13980:	and	r0, r0, #255	; 0xff
   13984:	cmp	r0, #0
   13988:	beq	13a00 <error@@Base+0xb08>
   1398c:	b	13990 <error@@Base+0xa98>
   13990:	ldr	r0, [fp, #-4]
   13994:	add	r1, sp, #12
   13998:	add	r2, sp, #8
   1399c:	bl	14008 <error@@Base+0x1110>
   139a0:	sxtb	r0, r0
   139a4:	cmp	r0, #0
   139a8:	beq	139fc <error@@Base+0xb04>
   139ac:	ldr	r0, [pc, #84]	; 13a08 <error@@Base+0xb10>
   139b0:	add	r0, pc, r0
   139b4:	add	r1, r0, #29
   139b8:	ldr	r2, [pc, #76]	; 13a0c <error@@Base+0xb14>
   139bc:	add	r2, pc, r2
   139c0:	str	r0, [sp, #4]
   139c4:	mov	r0, r2
   139c8:	str	r1, [sp]
   139cc:	bl	10b74 <strlen@plt>
   139d0:	sub	r0, r0, #1
   139d4:	ldr	r1, [sp, #4]
   139d8:	add	r0, r1, r0
   139dc:	movw	r2, #0
   139e0:	strb	r2, [r0]
   139e4:	ldr	r0, [fp, #-8]
   139e8:	ldr	r2, [sp, #12]
   139ec:	ldr	r3, [sp, #8]
   139f0:	ldr	r1, [sp]
   139f4:	bl	13490 <error@@Base+0x598>
   139f8:	b	13990 <error@@Base+0xa98>
   139fc:	b	13a00 <error@@Base+0xb08>
   13a00:	mov	sp, fp
   13a04:	pop	{fp, pc}
   13a08:	andeq	r8, r1, r3, asr #18
   13a0c:	andeq	r8, r1, r7, lsr r9
   13a10:	push	{fp, lr}
   13a14:	mov	fp, sp
   13a18:	sub	sp, sp, #40	; 0x28
   13a1c:	ldr	r2, [pc, #532]	; 13c38 <error@@Base+0xd40>
   13a20:	add	r2, pc, r2
   13a24:	ldr	r3, [pc, #528]	; 13c3c <error@@Base+0xd44>
   13a28:	ldr	r3, [pc, r3]
   13a2c:	str	r0, [fp, #-4]
   13a30:	str	r1, [fp, #-8]
   13a34:	ldr	r0, [fp, #-8]
   13a38:	mov	r1, r2
   13a3c:	blx	r3
   13a40:	ldr	r1, [pc, #484]	; 13c2c <error@@Base+0xd34>
   13a44:	add	r1, pc, r1
   13a48:	ldr	r2, [pc, #480]	; 13c30 <error@@Base+0xd38>
   13a4c:	add	r2, pc, r2
   13a50:	ldr	r3, [pc, #476]	; 13c34 <error@@Base+0xd3c>
   13a54:	add	r3, pc, r3
   13a58:	str	r0, [fp, #-12]
   13a5c:	ldr	r0, [fp, #-12]
   13a60:	bl	10b80 <fprintf@plt>
   13a64:	ldr	r1, [pc, #444]	; 13c28 <error@@Base+0xd30>
   13a68:	add	r1, pc, r1
   13a6c:	ldr	r2, [fp, #-12]
   13a70:	ldr	r3, [fp, #-4]
   13a74:	ldr	r3, [r3]
   13a78:	str	r0, [fp, #-16]
   13a7c:	mov	r0, r2
   13a80:	mov	r2, r3
   13a84:	bl	10b80 <fprintf@plt>
   13a88:	ldr	r1, [pc, #404]	; 13c24 <error@@Base+0xd2c>
   13a8c:	add	r1, pc, r1
   13a90:	ldr	r2, [fp, #-12]
   13a94:	ldr	r3, [fp, #-4]
   13a98:	ldr	r3, [r3, #4]
   13a9c:	str	r0, [sp, #20]
   13aa0:	mov	r0, r2
   13aa4:	mov	r2, r3
   13aa8:	bl	10b80 <fprintf@plt>
   13aac:	ldr	r1, [fp, #-12]
   13ab0:	ldr	r2, [fp, #-4]
   13ab4:	str	r0, [sp, #16]
   13ab8:	mov	r0, r1
   13abc:	mov	r1, r2
   13ac0:	bl	13c50 <error@@Base+0xd58>
   13ac4:	ldr	r0, [pc, #340]	; 13c20 <error@@Base+0xd28>
   13ac8:	add	r0, pc, r0
   13acc:	ldr	r1, [fp, #-12]
   13ad0:	bl	10be0 <fputs@plt>
   13ad4:	ldr	r1, [pc, #320]	; 13c1c <error@@Base+0xd24>
   13ad8:	add	r3, pc, r1
   13adc:	ldr	r1, [fp, #-12]
   13ae0:	ldr	r2, [fp, #-4]
   13ae4:	add	r2, r2, #8
   13ae8:	str	r0, [sp, #12]
   13aec:	mov	r0, r1
   13af0:	mov	r1, r2
   13af4:	movw	r2, #50	; 0x32
   13af8:	movw	lr, #0
   13afc:	str	lr, [sp]
   13b00:	movw	lr, #1
   13b04:	str	lr, [sp, #4]
   13b08:	bl	13cf8 <error@@Base+0xe00>
   13b0c:	ldr	r0, [pc, #260]	; 13c18 <error@@Base+0xd20>
   13b10:	add	r3, pc, r0
   13b14:	ldr	r0, [fp, #-12]
   13b18:	ldr	r1, [fp, #-4]
   13b1c:	add	r1, r1, #416	; 0x1a0
   13b20:	movw	r2, #50	; 0x32
   13b24:	movw	lr, #0
   13b28:	str	lr, [sp]
   13b2c:	movw	lr, #1
   13b30:	str	lr, [sp, #4]
   13b34:	bl	13cf8 <error@@Base+0xe00>
   13b38:	ldr	r0, [pc, #212]	; 13c14 <error@@Base+0xd1c>
   13b3c:	add	r3, pc, r0
   13b40:	ldr	r0, [fp, #-12]
   13b44:	ldr	r1, [fp, #-4]
   13b48:	add	r1, r1, #824	; 0x338
   13b4c:	movw	r2, #10
   13b50:	movw	lr, #1
   13b54:	str	lr, [sp]
   13b58:	str	lr, [sp, #4]
   13b5c:	bl	13cf8 <error@@Base+0xe00>
   13b60:	ldr	r0, [fp, #-4]
   13b64:	ldr	r0, [r0]
   13b68:	cmp	r0, #0
   13b6c:	ble	13bf0 <error@@Base+0xcf8>
   13b70:	ldr	r0, [pc, #200]	; 13c40 <error@@Base+0xd48>
   13b74:	add	r3, pc, r0
   13b78:	ldr	r0, [fp, #-12]
   13b7c:	ldr	r1, [fp, #-4]
   13b80:	add	r1, r1, #920	; 0x398
   13b84:	movw	r2, #8
   13b88:	movw	ip, #0
   13b8c:	str	ip, [sp]
   13b90:	str	ip, [sp, #4]
   13b94:	bl	13cf8 <error@@Base+0xe00>
   13b98:	ldr	r0, [fp, #-4]
   13b9c:	ldr	r0, [r0, #8]
   13ba0:	cmp	r0, #0
   13ba4:	ble	13bc0 <error@@Base+0xcc8>
   13ba8:	ldr	r0, [pc, #148]	; 13c44 <error@@Base+0xd4c>
   13bac:	add	r2, pc, r0
   13bb0:	ldr	r0, [fp, #-12]
   13bb4:	ldr	r1, [fp, #-4]
   13bb8:	add	r1, r1, #992	; 0x3e0
   13bbc:	bl	13eac <error@@Base+0xfb4>
   13bc0:	ldr	r0, [fp, #-4]
   13bc4:	ldr	r0, [r0, #416]	; 0x1a0
   13bc8:	cmp	r0, #0
   13bcc:	ble	13bec <error@@Base+0xcf4>
   13bd0:	ldr	r0, [pc, #112]	; 13c48 <error@@Base+0xd50>
   13bd4:	add	r2, pc, r0
   13bd8:	ldr	r0, [fp, #-12]
   13bdc:	ldr	r1, [fp, #-4]
   13be0:	movw	r3, #9048	; 0x2358
   13be4:	add	r1, r1, r3
   13be8:	bl	13eac <error@@Base+0xfb4>
   13bec:	b	13bf0 <error@@Base+0xcf8>
   13bf0:	ldr	r0, [pc, #84]	; 13c4c <error@@Base+0xd54>
   13bf4:	ldr	r0, [pc, r0]
   13bf8:	ldr	r1, [fp, #-12]
   13bfc:	str	r0, [sp, #8]
   13c00:	mov	r0, r1
   13c04:	ldr	r1, [sp, #8]
   13c08:	blx	r1
   13c0c:	mov	sp, fp
   13c10:	pop	{fp, pc}
   13c14:	andeq	r2, r0, r2, lsl r4
   13c18:	andeq	r2, r0, r7, asr #8
   13c1c:	andeq	r2, r0, ip, ror #8
   13c20:	andeq	r2, r0, pc, ror #8
   13c24:	muleq	r0, r5, r4
   13c28:	andeq	r2, r0, fp, lsr #9
   13c2c:	andeq	r2, r0, sl, asr #9
   13c30:	andeq	r2, r0, sl, ror r4
   13c34:	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   13c38:	andeq	r2, r0, fp, lsr #6
   13c3c:	muleq	r1, r0, r6
   13c40:	strdeq	r2, [r0], -r1
   13c44:	muleq	r0, r8, r3
   13c48:	andeq	r2, r0, r3, lsl #7
   13c4c:	muleq	r1, r4, r4
   13c50:	push	{fp, lr}
   13c54:	mov	fp, sp
   13c58:	sub	sp, sp, #16
   13c5c:	str	r0, [fp, #-4]
   13c60:	str	r1, [sp, #8]
   13c64:	ldr	r0, [sp, #8]
   13c68:	ldr	r0, [r0]
   13c6c:	cmp	r0, #0
   13c70:	bne	13c8c <error@@Base+0xd94>
   13c74:	ldr	r0, [pc, #120]	; 13cf4 <error@@Base+0xdfc>
   13c78:	add	r0, pc, r0
   13c7c:	ldr	r1, [fp, #-4]
   13c80:	bl	10be0 <fputs@plt>
   13c84:	str	r0, [sp, #4]
   13c88:	b	13cdc <error@@Base+0xde4>
   13c8c:	ldr	r0, [pc, #92]	; 13cf0 <error@@Base+0xdf8>
   13c90:	add	r1, pc, r0
   13c94:	vldr	d16, [pc, #76]	; 13ce8 <error@@Base+0xdf0>
   13c98:	ldr	r0, [fp, #-4]
   13c9c:	ldr	r2, [sp, #8]
   13ca0:	ldr	r2, [r2]
   13ca4:	ldr	r3, [sp, #8]
   13ca8:	ldr	r3, [r3, #4]
   13cac:	sub	r2, r2, r3
   13cb0:	vmov	s0, r2
   13cb4:	vcvt.f64.s32	d17, s0
   13cb8:	vmul.f64	d16, d16, d17
   13cbc:	ldr	r2, [sp, #8]
   13cc0:	ldr	r2, [r2]
   13cc4:	vmov	s0, r2
   13cc8:	vcvt.f64.s32	d17, s0
   13ccc:	vdiv.f64	d16, d16, d17
   13cd0:	vmov	r2, r3, d16
   13cd4:	bl	10b80 <fprintf@plt>
   13cd8:	str	r0, [sp]
   13cdc:	mov	sp, fp
   13ce0:	pop	{fp, pc}
   13ce4:	nop	{0}
   13ce8:	andeq	r0, r0, r0
   13cec:	subsmi	r0, r9, r0
   13cf0:	strdeq	r2, [r0], -r6
   13cf4:	andeq	r2, r0, r5, lsl #6
   13cf8:	push	{r4, sl, fp, lr}
   13cfc:	add	fp, sp, #8
   13d00:	sub	sp, sp, #40	; 0x28
   13d04:	ldr	ip, [fp, #12]
   13d08:	ldr	lr, [fp, #8]
   13d0c:	ldr	r4, [pc, #392]	; 13e9c <error@@Base+0xfa4>
   13d10:	add	r4, pc, r4
   13d14:	str	r0, [fp, #-12]
   13d18:	str	r1, [fp, #-16]
   13d1c:	strh	r2, [fp, #-18]	; 0xffffffee
   13d20:	str	r3, [sp, #24]
   13d24:	strb	lr, [sp, #23]
   13d28:	strb	ip, [sp, #22]
   13d2c:	ldr	r0, [fp, #-12]
   13d30:	ldr	r2, [sp, #24]
   13d34:	mov	r1, r4
   13d38:	bl	10b80 <fprintf@plt>
   13d3c:	ldr	r1, [fp, #-12]
   13d40:	str	r0, [sp, #16]
   13d44:	mov	r0, r1
   13d48:	movw	r1, #0
   13d4c:	bl	1408c <error@@Base+0x1194>
   13d50:	ldr	r0, [pc, #312]	; 13e90 <error@@Base+0xf98>
   13d54:	add	r1, pc, r0
   13d58:	ldr	r0, [pc, #308]	; 13e94 <error@@Base+0xf9c>
   13d5c:	add	r0, pc, r0
   13d60:	ldr	r2, [pc, #304]	; 13e98 <error@@Base+0xfa0>
   13d64:	add	r2, pc, r2
   13d68:	ldr	r3, [fp, #-12]
   13d6c:	ldrb	ip, [sp, #23]
   13d70:	cmp	ip, #0
   13d74:	movw	ip, #0
   13d78:	movne	ip, #1
   13d7c:	tst	ip, #1
   13d80:	movne	r2, r0
   13d84:	mov	r0, r3
   13d88:	bl	10b80 <fprintf@plt>
   13d8c:	movw	r1, #1
   13d90:	strh	r1, [sp, #20]
   13d94:	str	r0, [sp, #12]
   13d98:	ldrsh	r0, [sp, #20]
   13d9c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   13da0:	cmp	r0, r1
   13da4:	bgt	13e04 <error@@Base+0xf0c>
   13da8:	ldr	r0, [fp, #-16]
   13dac:	ldrsh	r1, [sp, #20]
   13db0:	add	r0, r0, r1, lsl #3
   13db4:	ldr	r0, [r0]
   13db8:	cmp	r0, #0
   13dbc:	ble	13dec <error@@Base+0xef4>
   13dc0:	ldr	r0, [fp, #-12]
   13dc4:	ldr	r1, [fp, #-16]
   13dc8:	ldrsh	r2, [sp, #20]
   13dcc:	add	r1, r1, r2, lsl #3
   13dd0:	bl	1408c <error@@Base+0x1194>
   13dd4:	ldr	r0, [pc, #204]	; 13ea8 <error@@Base+0xfb0>
   13dd8:	add	r1, pc, r0
   13ddc:	ldr	r0, [fp, #-12]
   13de0:	ldrsh	r2, [sp, #20]
   13de4:	bl	10b80 <fprintf@plt>
   13de8:	str	r0, [sp, #8]
   13dec:	b	13df0 <error@@Base+0xef8>
   13df0:	ldrh	r0, [sp, #20]
   13df4:	movw	r1, #1
   13df8:	add	r0, r0, r1
   13dfc:	strh	r0, [sp, #20]
   13e00:	b	13d98 <error@@Base+0xea0>
   13e04:	ldrb	r0, [sp, #23]
   13e08:	cmp	r0, #0
   13e0c:	beq	13e5c <error@@Base+0xf64>
   13e10:	ldr	r0, [fp, #-16]
   13e14:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   13e18:	add	r1, r1, #1
   13e1c:	add	r0, r0, r1, lsl #3
   13e20:	ldr	r0, [r0]
   13e24:	cmp	r0, #0
   13e28:	ble	13e5c <error@@Base+0xf64>
   13e2c:	ldr	r0, [fp, #-12]
   13e30:	ldr	r1, [fp, #-16]
   13e34:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   13e38:	add	r2, r2, #1
   13e3c:	add	r1, r1, r2, lsl #3
   13e40:	bl	1408c <error@@Base+0x1194>
   13e44:	ldr	r0, [pc, #84]	; 13ea0 <error@@Base+0xfa8>
   13e48:	add	r1, pc, r0
   13e4c:	ldr	r0, [fp, #-12]
   13e50:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   13e54:	bl	10b80 <fprintf@plt>
   13e58:	str	r0, [sp, #4]
   13e5c:	ldrsb	r0, [sp, #22]
   13e60:	cmp	r0, #0
   13e64:	beq	13e88 <error@@Base+0xf90>
   13e68:	ldr	r0, [fp, #-12]
   13e6c:	ldr	r1, [fp, #-16]
   13e70:	bl	1408c <error@@Base+0x1194>
   13e74:	ldr	r0, [pc, #40]	; 13ea4 <error@@Base+0xfac>
   13e78:	add	r0, pc, r0
   13e7c:	ldr	r1, [fp, #-12]
   13e80:	bl	10be0 <fputs@plt>
   13e84:	str	r0, [sp]
   13e88:	sub	sp, fp, #8
   13e8c:	pop	{r4, sl, fp, pc}
   13e90:	andeq	r2, r0, r9, lsr r2
   13e94:	andeq	r2, r0, r5, lsr r2
   13e98:	andeq	r2, r0, r4, lsr r2
   13e9c:	andeq	r2, r0, ip, ror r2
   13ea0:	andeq	r2, r0, r0, ror #2
   13ea4:	strdeq	r2, [r0], -r5
   13ea8:	andeq	r2, r0, r7, asr #3
   13eac:	push	{fp, lr}
   13eb0:	mov	fp, sp
   13eb4:	sub	sp, sp, #48	; 0x30
   13eb8:	ldr	r3, [pc, #320]	; 14000 <error@@Base+0x1108>
   13ebc:	ldr	r3, [pc, r3]
   13ec0:	str	r0, [fp, #-4]
   13ec4:	str	r1, [fp, #-8]
   13ec8:	str	r2, [fp, #-12]
   13ecc:	ldr	r0, [fp, #-8]
   13ed0:	blx	r3
   13ed4:	ldr	r0, [pc, #284]	; 13ff8 <error@@Base+0x1100>
   13ed8:	add	r0, pc, r0
   13edc:	ldr	r1, [pc, #280]	; 13ffc <error@@Base+0x1104>
   13ee0:	ldr	r1, [pc, r1]
   13ee4:	ldr	r2, [fp, #-8]
   13ee8:	movw	r3, #8052	; 0x1f74
   13eec:	add	r2, r2, r3
   13ef0:	ldr	r2, [r2]
   13ef4:	ldr	r3, [fp, #-8]
   13ef8:	movw	lr, #8048	; 0x1f70
   13efc:	add	r3, r3, lr
   13f00:	ldr	r3, [r3]
   13f04:	str	r0, [fp, #-20]	; 0xffffffec
   13f08:	mov	r0, r2
   13f0c:	str	r1, [sp, #24]
   13f10:	mov	r1, r3
   13f14:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f18:	ldr	r3, [sp, #24]
   13f1c:	blx	r3
   13f20:	ldr	r0, [pc, #204]	; 13ff4 <error@@Base+0x10fc>
   13f24:	add	r1, pc, r0
   13f28:	ldr	r0, [fp, #-4]
   13f2c:	ldr	r2, [fp, #-12]
   13f30:	bl	10b80 <fprintf@plt>
   13f34:	ldr	r1, [fp, #-4]
   13f38:	str	r0, [sp, #20]
   13f3c:	mov	r0, r1
   13f40:	movw	r1, #0
   13f44:	bl	1408c <error@@Base+0x1194>
   13f48:	ldr	r1, [fp, #-4]
   13f4c:	movw	r0, #10
   13f50:	bl	10bb0 <fputc@plt>
   13f54:	movw	r1, #0
   13f58:	str	r1, [fp, #-16]
   13f5c:	str	r0, [sp, #16]
   13f60:	ldr	r0, [fp, #-16]
   13f64:	ldr	r1, [fp, #-8]
   13f68:	movw	r2, #8052	; 0x1f74
   13f6c:	add	r1, r1, r2
   13f70:	ldr	r1, [r1]
   13f74:	cmp	r0, r1
   13f78:	bge	13fec <error@@Base+0x10f4>
   13f7c:	ldr	r0, [pc, #128]	; 14004 <error@@Base+0x110c>
   13f80:	add	r1, pc, r0
   13f84:	ldr	r0, [fp, #-4]
   13f88:	ldr	r2, [fp, #-8]
   13f8c:	movw	r3, #8048	; 0x1f70
   13f90:	ldr	r2, [r2, r3]
   13f94:	ldr	ip, [fp, #-16]
   13f98:	ldr	r2, [r2, ip, lsl #2]
   13f9c:	add	r2, r2, #12
   13fa0:	str	r1, [sp, #12]
   13fa4:	mov	r1, r2
   13fa8:	str	r3, [sp, #8]
   13fac:	bl	1408c <error@@Base+0x1194>
   13fb0:	ldr	r0, [fp, #-4]
   13fb4:	ldr	r1, [fp, #-8]
   13fb8:	ldr	r2, [sp, #8]
   13fbc:	ldr	r1, [r1, r2]
   13fc0:	ldr	r3, [fp, #-16]
   13fc4:	add	r1, r1, r3, lsl #2
   13fc8:	ldr	r1, [r1]
   13fcc:	ldr	r2, [r1, #8]
   13fd0:	ldr	r1, [sp, #12]
   13fd4:	bl	10b80 <fprintf@plt>
   13fd8:	str	r0, [sp, #4]
   13fdc:	ldr	r0, [fp, #-16]
   13fe0:	add	r0, r0, #1
   13fe4:	str	r0, [fp, #-16]
   13fe8:	b	13f60 <error@@Base+0x1068>
   13fec:	mov	sp, fp
   13ff0:	pop	{fp, pc}
   13ff4:	andeq	r2, r0, r8, rrx
   13ff8:	andeq	r0, r0, r8, asr #4
   13ffc:	andeq	r6, r1, r8, ror #3
   14000:	andeq	r6, r1, ip, lsl r2
   14004:	andeq	r2, r0, sp
   14008:	push	{fp, lr}
   1400c:	mov	fp, sp
   14010:	sub	sp, sp, #16
   14014:	str	r0, [fp, #-4]
   14018:	str	r1, [sp, #8]
   1401c:	str	r2, [sp, #4]
   14020:	ldr	r0, [fp, #-4]
   14024:	bl	1378c <error@@Base+0x894>
   14028:	and	r0, r0, #255	; 0xff
   1402c:	cmp	r0, #0
   14030:	movw	r0, #0
   14034:	str	r0, [sp]
   14038:	beq	14068 <error@@Base+0x1170>
   1403c:	ldr	r0, [pc, #64]	; 14084 <error@@Base+0x118c>
   14040:	add	r0, pc, r0
   14044:	ldr	r1, [pc, #60]	; 14088 <error@@Base+0x1190>
   14048:	add	r1, pc, r1
   1404c:	ldr	r2, [sp, #8]
   14050:	ldr	r3, [sp, #4]
   14054:	bl	10b8c <__isoc99_sscanf@plt>
   14058:	cmp	r0, #2
   1405c:	movw	r0, #0
   14060:	moveq	r0, #1
   14064:	str	r0, [sp]
   14068:	ldr	r0, [sp]
   1406c:	tst	r0, #1
   14070:	movw	r0, #1
   14074:	moveq	r0, #0
   14078:	and	r0, r0, #255	; 0xff
   1407c:	mov	sp, fp
   14080:	pop	{fp, pc}
   14084:			; <UNDEFINED> instruction: 0x000182b3
   14088:	andeq	r1, r0, sp, lsr #30
   1408c:	push	{fp, lr}
   14090:	mov	fp, sp
   14094:	sub	sp, sp, #24
   14098:	str	r0, [fp, #-4]
   1409c:	str	r1, [fp, #-8]
   140a0:	ldr	r0, [fp, #-8]
   140a4:	movw	r1, #0
   140a8:	cmp	r0, r1
   140ac:	beq	140ec <error@@Base+0x11f4>
   140b0:	ldr	r0, [pc, #104]	; 14120 <error@@Base+0x1228>
   140b4:	add	r1, pc, r0
   140b8:	ldr	r0, [fp, #-4]
   140bc:	ldr	r2, [fp, #-8]
   140c0:	ldr	r2, [r2]
   140c4:	ldr	r3, [fp, #-8]
   140c8:	ldr	r3, [r3, #4]
   140cc:	bl	10b80 <fprintf@plt>
   140d0:	ldr	r1, [fp, #-4]
   140d4:	ldr	r2, [fp, #-8]
   140d8:	str	r0, [sp, #12]
   140dc:	mov	r0, r1
   140e0:	mov	r1, r2
   140e4:	bl	13c50 <error@@Base+0xd58>
   140e8:	b	14100 <error@@Base+0x1208>
   140ec:	ldr	r0, [pc, #40]	; 1411c <error@@Base+0x1224>
   140f0:	add	r0, pc, r0
   140f4:	ldr	r1, [fp, #-4]
   140f8:	bl	10be0 <fputs@plt>
   140fc:	str	r0, [sp, #8]
   14100:	ldr	r0, [pc, #28]	; 14124 <error@@Base+0x122c>
   14104:	add	r0, pc, r0
   14108:	ldr	r1, [fp, #-4]
   1410c:	bl	10be0 <fputs@plt>
   14110:	str	r0, [sp, #4]
   14114:	mov	sp, fp
   14118:	pop	{fp, pc}
   1411c:	andeq	r1, r0, ip, asr #29
   14120:	strdeq	r1, [r0], -sp
   14124:	ldrdeq	r1, [r0], -r3
   14128:	push	{fp, lr}
   1412c:	mov	fp, sp
   14130:	sub	sp, sp, #8
   14134:	ldr	r2, [pc, #36]	; 14160 <error@@Base+0x1268>
   14138:	ldr	r2, [pc, r2]
   1413c:	str	r0, [sp, #4]
   14140:	str	r1, [sp]
   14144:	ldr	r0, [sp, #4]
   14148:	ldr	r0, [r0, #8]
   1414c:	ldr	r1, [sp]
   14150:	ldr	r1, [r1, #8]
   14154:	blx	r2
   14158:	mov	sp, fp
   1415c:	pop	{fp, pc}
   14160:	strdeq	r5, [r1], -r4
   14164:	push	{fp, lr}
   14168:	mov	fp, sp
   1416c:	sub	sp, sp, #16
   14170:	str	r0, [fp, #-4]
   14174:	str	r1, [sp, #8]
   14178:	ldr	r0, [sp, #8]
   1417c:	ldr	r0, [r0]
   14180:	str	r0, [sp, #4]
   14184:	ldr	r0, [sp, #4]
   14188:	bl	141dc <error@@Base+0x12e4>
   1418c:	str	r0, [sp]
   14190:	movw	lr, #0
   14194:	cmp	r0, lr
   14198:	beq	141d4 <error@@Base+0x12dc>
   1419c:	ldr	r0, [sp, #4]
   141a0:	ldr	r0, [r0, #12]
   141a4:	bl	1460c <error@@Base+0x1714>
   141a8:	sxtb	r0, r0
   141ac:	cmp	r0, #0
   141b0:	beq	141c4 <error@@Base+0x12cc>
   141b4:	ldr	r0, [fp, #-4]
   141b8:	ldr	r1, [sp, #4]
   141bc:	ldr	r2, [sp]
   141c0:	bl	14674 <error@@Base+0x177c>
   141c4:	ldr	r0, [sp]
   141c8:	ldr	r0, [r0, #4]
   141cc:	str	r0, [sp, #4]
   141d0:	b	14184 <error@@Base+0x128c>
   141d4:	mov	sp, fp
   141d8:	pop	{fp, pc}
   141dc:	push	{fp, lr}
   141e0:	mov	fp, sp
   141e4:	sub	sp, sp, #48	; 0x30
   141e8:	str	r0, [fp, #-8]
   141ec:	ldr	r0, [fp, #-8]
   141f0:	str	r0, [sp, #28]
   141f4:	add	r0, sp, #24
   141f8:	str	r0, [sp, #20]
   141fc:	movw	r0, #17
   14200:	str	r0, [sp, #16]
   14204:	ldr	r0, [fp, #-8]
   14208:	movw	r1, #0
   1420c:	cmp	r0, r1
   14210:	bne	14220 <error@@Base+0x1328>
   14214:	movw	r0, #0
   14218:	str	r0, [fp, #-4]
   1421c:	b	14600 <error@@Base+0x1708>
   14220:	b	14224 <error@@Base+0x132c>
   14224:	ldr	r0, [sp, #20]
   14228:	ldr	r0, [r0, #4]
   1422c:	movw	r1, #0
   14230:	cmp	r0, r1
   14234:	beq	145f4 <error@@Base+0x16fc>
   14238:	ldr	r0, [sp, #20]
   1423c:	bl	14760 <error@@Base+0x1868>
   14240:	str	r0, [sp, #20]
   14244:	ldr	r0, [sp, #16]
   14248:	str	r0, [sp, #4]
   1424c:	ldr	r0, [sp, #20]
   14250:	bl	1480c <error@@Base+0x1914>
   14254:	str	r0, [sp, #16]
   14258:	ldr	r0, [sp, #20]
   1425c:	bl	14760 <error@@Base+0x1868>
   14260:	bl	1480c <error@@Base+0x1914>
   14264:	str	r0, [sp, #12]
   14268:	ldr	r0, [sp, #20]
   1426c:	bl	14854 <error@@Base+0x195c>
   14270:	bl	1480c <error@@Base+0x1914>
   14274:	str	r0, [sp, #8]
   14278:	ldr	r0, [sp, #16]
   1427c:	cmp	r0, #1
   14280:	bne	14294 <error@@Base+0x139c>
   14284:	ldr	r0, [sp, #12]
   14288:	cmp	r0, #2
   1428c:	bne	14294 <error@@Base+0x139c>
   14290:	b	14224 <error@@Base+0x132c>
   14294:	ldr	r0, [sp, #16]
   14298:	cmp	r0, #3
   1429c:	beq	142b8 <error@@Base+0x13c0>
   142a0:	ldr	r0, [sp, #16]
   142a4:	cmp	r0, #1
   142a8:	beq	142b8 <error@@Base+0x13c0>
   142ac:	ldr	r0, [sp, #16]
   142b0:	cmp	r0, #2
   142b4:	bne	142bc <error@@Base+0x13c4>
   142b8:	b	145f4 <error@@Base+0x16fc>
   142bc:	ldr	r0, [sp, #12]
   142c0:	cmp	r0, #3
   142c4:	beq	142e0 <error@@Base+0x13e8>
   142c8:	ldr	r0, [sp, #12]
   142cc:	cmp	r0, #1
   142d0:	beq	142e0 <error@@Base+0x13e8>
   142d4:	ldr	r0, [sp, #12]
   142d8:	cmp	r0, #2
   142dc:	bne	142e4 <error@@Base+0x13ec>
   142e0:	b	145f4 <error@@Base+0x16fc>
   142e4:	ldr	r0, [sp, #16]
   142e8:	cmp	r0, #9
   142ec:	beq	142fc <error@@Base+0x1404>
   142f0:	ldr	r0, [sp, #16]
   142f4:	cmp	r0, #8
   142f8:	bne	14318 <error@@Base+0x1420>
   142fc:	ldr	r0, [sp, #12]
   14300:	cmp	r0, #9
   14304:	beq	14314 <error@@Base+0x141c>
   14308:	ldr	r0, [sp, #12]
   1430c:	cmp	r0, #8
   14310:	bne	14318 <error@@Base+0x1420>
   14314:	b	14224 <error@@Base+0x132c>
   14318:	ldr	r0, [sp, #16]
   1431c:	cmp	r0, #9
   14320:	beq	14330 <error@@Base+0x1438>
   14324:	ldr	r0, [sp, #16]
   14328:	cmp	r0, #8
   1432c:	bne	14370 <error@@Base+0x1478>
   14330:	ldr	r0, [sp, #12]
   14334:	cmp	r0, #13
   14338:	beq	14354 <error@@Base+0x145c>
   1433c:	ldr	r0, [sp, #12]
   14340:	cmp	r0, #12
   14344:	beq	14354 <error@@Base+0x145c>
   14348:	ldr	r0, [sp, #12]
   1434c:	cmp	r0, #10
   14350:	bne	14370 <error@@Base+0x1478>
   14354:	ldr	r0, [sp, #8]
   14358:	cmp	r0, #9
   1435c:	beq	1436c <error@@Base+0x1474>
   14360:	ldr	r0, [sp, #8]
   14364:	cmp	r0, #8
   14368:	bne	14370 <error@@Base+0x1478>
   1436c:	b	14224 <error@@Base+0x132c>
   14370:	ldr	r0, [sp, #4]
   14374:	cmp	r0, #9
   14378:	beq	14388 <error@@Base+0x1490>
   1437c:	ldr	r0, [sp, #4]
   14380:	cmp	r0, #8
   14384:	bne	143c8 <error@@Base+0x14d0>
   14388:	ldr	r0, [sp, #16]
   1438c:	cmp	r0, #13
   14390:	beq	143ac <error@@Base+0x14b4>
   14394:	ldr	r0, [sp, #16]
   14398:	cmp	r0, #12
   1439c:	beq	143ac <error@@Base+0x14b4>
   143a0:	ldr	r0, [sp, #16]
   143a4:	cmp	r0, #10
   143a8:	bne	143c8 <error@@Base+0x14d0>
   143ac:	ldr	r0, [sp, #12]
   143b0:	cmp	r0, #9
   143b4:	beq	143c4 <error@@Base+0x14cc>
   143b8:	ldr	r0, [sp, #12]
   143bc:	cmp	r0, #8
   143c0:	bne	143c8 <error@@Base+0x14d0>
   143c4:	b	14224 <error@@Base+0x132c>
   143c8:	ldr	r0, [sp, #16]
   143cc:	cmp	r0, #8
   143d0:	bne	143e4 <error@@Base+0x14ec>
   143d4:	ldr	r0, [sp, #12]
   143d8:	cmp	r0, #10
   143dc:	bne	143e4 <error@@Base+0x14ec>
   143e0:	b	14224 <error@@Base+0x132c>
   143e4:	ldr	r0, [sp, #16]
   143e8:	cmp	r0, #8
   143ec:	bne	1440c <error@@Base+0x1514>
   143f0:	ldr	r0, [sp, #12]
   143f4:	cmp	r0, #11
   143f8:	bne	1440c <error@@Base+0x1514>
   143fc:	ldr	r0, [sp, #8]
   14400:	cmp	r0, #8
   14404:	bne	1440c <error@@Base+0x1514>
   14408:	b	14224 <error@@Base+0x132c>
   1440c:	ldr	r0, [sp, #4]
   14410:	cmp	r0, #8
   14414:	bne	14434 <error@@Base+0x153c>
   14418:	ldr	r0, [sp, #16]
   1441c:	cmp	r0, #11
   14420:	bne	14434 <error@@Base+0x153c>
   14424:	ldr	r0, [sp, #12]
   14428:	cmp	r0, #8
   1442c:	bne	14434 <error@@Base+0x153c>
   14430:	b	14224 <error@@Base+0x132c>
   14434:	ldr	r0, [sp, #16]
   14438:	cmp	r0, #15
   1443c:	bne	14450 <error@@Base+0x1558>
   14440:	ldr	r0, [sp, #12]
   14444:	cmp	r0, #15
   14448:	bne	14450 <error@@Base+0x1558>
   1444c:	b	14224 <error@@Base+0x132c>
   14450:	ldr	r0, [sp, #16]
   14454:	cmp	r0, #9
   14458:	beq	14468 <error@@Base+0x1570>
   1445c:	ldr	r0, [sp, #16]
   14460:	cmp	r0, #8
   14464:	bne	14478 <error@@Base+0x1580>
   14468:	ldr	r0, [sp, #12]
   1446c:	cmp	r0, #15
   14470:	bne	14478 <error@@Base+0x1580>
   14474:	b	14224 <error@@Base+0x132c>
   14478:	ldr	r0, [sp, #16]
   1447c:	cmp	r0, #15
   14480:	bne	144a0 <error@@Base+0x15a8>
   14484:	ldr	r0, [sp, #12]
   14488:	cmp	r0, #9
   1448c:	beq	1449c <error@@Base+0x15a4>
   14490:	ldr	r0, [sp, #12]
   14494:	cmp	r0, #8
   14498:	bne	144a0 <error@@Base+0x15a8>
   1449c:	b	14224 <error@@Base+0x132c>
   144a0:	ldr	r0, [sp, #4]
   144a4:	cmp	r0, #15
   144a8:	bne	144e0 <error@@Base+0x15e8>
   144ac:	ldr	r0, [sp, #16]
   144b0:	cmp	r0, #14
   144b4:	beq	144d0 <error@@Base+0x15d8>
   144b8:	ldr	r0, [sp, #16]
   144bc:	cmp	r0, #12
   144c0:	beq	144d0 <error@@Base+0x15d8>
   144c4:	ldr	r0, [sp, #16]
   144c8:	cmp	r0, #10
   144cc:	bne	144e0 <error@@Base+0x15e8>
   144d0:	ldr	r0, [sp, #12]
   144d4:	cmp	r0, #15
   144d8:	bne	144e0 <error@@Base+0x15e8>
   144dc:	b	14224 <error@@Base+0x132c>
   144e0:	ldr	r0, [sp, #16]
   144e4:	cmp	r0, #15
   144e8:	bne	14520 <error@@Base+0x1628>
   144ec:	ldr	r0, [sp, #12]
   144f0:	cmp	r0, #14
   144f4:	beq	14510 <error@@Base+0x1618>
   144f8:	ldr	r0, [sp, #12]
   144fc:	cmp	r0, #12
   14500:	beq	14510 <error@@Base+0x1618>
   14504:	ldr	r0, [sp, #12]
   14508:	cmp	r0, #10
   1450c:	bne	14520 <error@@Base+0x1628>
   14510:	ldr	r0, [sp, #8]
   14514:	cmp	r0, #15
   14518:	bne	14520 <error@@Base+0x1628>
   1451c:	b	14224 <error@@Base+0x132c>
   14520:	ldr	r0, [sp, #16]
   14524:	cmp	r0, #7
   14528:	bne	1453c <error@@Base+0x1644>
   1452c:	ldr	r0, [sp, #12]
   14530:	cmp	r0, #7
   14534:	bne	1453c <error@@Base+0x1644>
   14538:	b	14224 <error@@Base+0x132c>
   1453c:	ldr	r0, [sp, #16]
   14540:	cmp	r0, #9
   14544:	beq	14578 <error@@Base+0x1680>
   14548:	ldr	r0, [sp, #16]
   1454c:	cmp	r0, #8
   14550:	beq	14578 <error@@Base+0x1680>
   14554:	ldr	r0, [sp, #16]
   14558:	cmp	r0, #15
   1455c:	beq	14578 <error@@Base+0x1680>
   14560:	ldr	r0, [sp, #16]
   14564:	cmp	r0, #7
   14568:	beq	14578 <error@@Base+0x1680>
   1456c:	ldr	r0, [sp, #16]
   14570:	cmp	r0, #16
   14574:	bne	14588 <error@@Base+0x1690>
   14578:	ldr	r0, [sp, #12]
   1457c:	cmp	r0, #16
   14580:	bne	14588 <error@@Base+0x1690>
   14584:	b	14224 <error@@Base+0x132c>
   14588:	ldr	r0, [sp, #16]
   1458c:	cmp	r0, #16
   14590:	bne	145d4 <error@@Base+0x16dc>
   14594:	ldr	r0, [sp, #12]
   14598:	cmp	r0, #9
   1459c:	beq	145d0 <error@@Base+0x16d8>
   145a0:	ldr	r0, [sp, #12]
   145a4:	cmp	r0, #8
   145a8:	beq	145d0 <error@@Base+0x16d8>
   145ac:	ldr	r0, [sp, #12]
   145b0:	cmp	r0, #15
   145b4:	beq	145d0 <error@@Base+0x16d8>
   145b8:	ldr	r0, [sp, #12]
   145bc:	cmp	r0, #7
   145c0:	beq	145d0 <error@@Base+0x16d8>
   145c4:	ldr	r0, [sp, #12]
   145c8:	cmp	r0, #16
   145cc:	bne	145d4 <error@@Base+0x16dc>
   145d0:	b	14224 <error@@Base+0x132c>
   145d4:	ldr	r0, [sp, #16]
   145d8:	cmp	r0, #5
   145dc:	bne	145f0 <error@@Base+0x16f8>
   145e0:	ldr	r0, [sp, #12]
   145e4:	cmp	r0, #5
   145e8:	bne	145f0 <error@@Base+0x16f8>
   145ec:	b	14224 <error@@Base+0x132c>
   145f0:	b	145f4 <error@@Base+0x16fc>
   145f4:	ldr	r0, [sp, #20]
   145f8:	bl	14878 <error@@Base+0x1980>
   145fc:	str	r0, [fp, #-4]
   14600:	ldr	r0, [fp, #-4]
   14604:	mov	sp, fp
   14608:	pop	{fp, pc}
   1460c:	push	{fp, lr}
   14610:	mov	fp, sp
   14614:	sub	sp, sp, #16
   14618:	str	r0, [sp, #8]
   1461c:	ldr	r0, [sp, #8]
   14620:	bl	10ac0 <utf8proc_get_property@plt>
   14624:	str	r0, [sp, #4]
   14628:	ldr	r0, [sp, #4]
   1462c:	ldrsh	r0, [r0]
   14630:	sub	lr, r0, #1
   14634:	cmp	lr, #12
   14638:	str	r0, [sp]
   1463c:	bcc	14654 <error@@Base+0x175c>
   14640:	b	14644 <error@@Base+0x174c>
   14644:	ldr	r0, [sp]
   14648:	cmp	r0, #29
   1464c:	bne	14660 <error@@Base+0x1768>
   14650:	b	14654 <error@@Base+0x175c>
   14654:	movw	r0, #1
   14658:	strb	r0, [fp, #-1]
   1465c:	b	14668 <error@@Base+0x1770>
   14660:	movw	r0, #0
   14664:	strb	r0, [fp, #-1]
   14668:	ldrb	r0, [fp, #-1]
   1466c:	mov	sp, fp
   14670:	pop	{fp, pc}
   14674:	push	{fp, lr}
   14678:	mov	fp, sp
   1467c:	sub	sp, sp, #40	; 0x28
   14680:	str	r0, [fp, #-4]
   14684:	str	r1, [fp, #-8]
   14688:	str	r2, [fp, #-12]
   1468c:	ldr	r0, [fp, #-12]
   14690:	ldr	r0, [r0, #4]
   14694:	str	r0, [sp, #20]
   14698:	ldr	r0, [fp, #-8]
   1469c:	ldr	r1, [sp, #20]
   146a0:	bl	14aa0 <error@@Base+0x1ba8>
   146a4:	str	r0, [sp, #16]
   146a8:	ldr	r0, [sp, #16]
   146ac:	add	r0, r0, #1
   146b0:	bl	10b2c <malloc@plt>
   146b4:	str	r0, [sp, #8]
   146b8:	ldr	r0, [sp, #8]
   146bc:	ldr	r1, [fp, #-8]
   146c0:	ldr	r2, [sp, #20]
   146c4:	bl	14b94 <error@@Base+0x1c9c>
   146c8:	ldr	r0, [pc, #96]	; 14730 <error@@Base+0x1838>
   146cc:	ldr	r0, [pc, r0]
   146d0:	movw	r1, #1
   146d4:	str	r0, [sp, #4]
   146d8:	mov	r0, r1
   146dc:	movw	r1, #12
   146e0:	ldr	r2, [sp, #4]
   146e4:	blx	r2
   146e8:	str	r0, [fp, #-16]
   146ec:	ldr	r0, [sp, #8]
   146f0:	bl	10ba4 <utf8proc_NFC@plt>
   146f4:	ldr	r1, [pc, #48]	; 1472c <error@@Base+0x1834>
   146f8:	ldr	r1, [pc, r1]
   146fc:	ldr	r2, [fp, #-16]
   14700:	str	r0, [r2, #8]
   14704:	ldr	r0, [fp, #-4]
   14708:	ldr	r2, [fp, #-16]
   1470c:	str	r1, [sp]
   14710:	mov	r1, r2
   14714:	ldr	r2, [sp]
   14718:	blx	r2
   1471c:	ldr	r0, [sp, #8]
   14720:	bl	10ab4 <free@plt>
   14724:	mov	sp, fp
   14728:	pop	{fp, pc}
   1472c:	andeq	r5, r1, r8, ror #19
   14730:	andeq	r5, r1, ip, ror #20
   14734:	push	{fp, lr}
   14738:	mov	fp, sp
   1473c:	sub	sp, sp, #8
   14740:	str	r0, [sp, #4]
   14744:	ldr	r0, [sp, #4]
   14748:	ldr	r0, [r0, #8]
   1474c:	bl	10ab4 <free@plt>
   14750:	ldr	r0, [sp, #4]
   14754:	bl	10ab4 <free@plt>
   14758:	mov	sp, fp
   1475c:	pop	{fp, pc}
   14760:	push	{fp, lr}
   14764:	mov	fp, sp
   14768:	sub	sp, sp, #16
   1476c:	str	r0, [sp, #8]
   14770:	ldr	r0, [sp, #8]
   14774:	movw	r1, #0
   14778:	cmp	r0, r1
   1477c:	bne	1478c <error@@Base+0x1894>
   14780:	movw	r0, #0
   14784:	str	r0, [fp, #-4]
   14788:	b	14800 <error@@Base+0x1908>
   1478c:	b	14790 <error@@Base+0x1898>
   14790:	ldr	r0, [sp, #8]
   14794:	ldr	r0, [r0, #4]
   14798:	str	r0, [sp, #8]
   1479c:	ldr	r0, [sp, #8]
   147a0:	movw	r1, #0
   147a4:	cmp	r0, r1
   147a8:	movw	r0, #0
   147ac:	str	r0, [sp, #4]
   147b0:	beq	147ec <error@@Base+0x18f4>
   147b4:	ldr	r0, [sp, #8]
   147b8:	bl	1480c <error@@Base+0x1914>
   147bc:	cmp	r0, #4
   147c0:	movw	r0, #1
   147c4:	str	r0, [sp]
   147c8:	beq	147e4 <error@@Base+0x18ec>
   147cc:	ldr	r0, [sp, #8]
   147d0:	bl	1480c <error@@Base+0x1914>
   147d4:	cmp	r0, #6
   147d8:	movw	r0, #0
   147dc:	moveq	r0, #1
   147e0:	str	r0, [sp]
   147e4:	ldr	r0, [sp]
   147e8:	str	r0, [sp, #4]
   147ec:	ldr	r0, [sp, #4]
   147f0:	tst	r0, #1
   147f4:	bne	14790 <error@@Base+0x1898>
   147f8:	ldr	r0, [sp, #8]
   147fc:	str	r0, [fp, #-4]
   14800:	ldr	r0, [fp, #-4]
   14804:	mov	sp, fp
   14808:	pop	{fp, pc}
   1480c:	push	{fp, lr}
   14810:	mov	fp, sp
   14814:	sub	sp, sp, #8
   14818:	str	r0, [sp]
   1481c:	ldr	r0, [sp]
   14820:	movw	r1, #0
   14824:	cmp	r0, r1
   14828:	bne	14838 <error@@Base+0x1940>
   1482c:	movw	r0, #18
   14830:	str	r0, [sp, #4]
   14834:	b	14848 <error@@Base+0x1950>
   14838:	ldr	r0, [sp]
   1483c:	ldr	r0, [r0, #12]
   14840:	bl	14934 <error@@Base+0x1a3c>
   14844:	str	r0, [sp, #4]
   14848:	ldr	r0, [sp, #4]
   1484c:	mov	sp, fp
   14850:	pop	{fp, pc}
   14854:	push	{fp, lr}
   14858:	mov	fp, sp
   1485c:	sub	sp, sp, #8
   14860:	str	r0, [sp, #4]
   14864:	ldr	r0, [sp, #4]
   14868:	bl	14760 <error@@Base+0x1868>
   1486c:	bl	14760 <error@@Base+0x1868>
   14870:	mov	sp, fp
   14874:	pop	{fp, pc}
   14878:	push	{fp, lr}
   1487c:	mov	fp, sp
   14880:	sub	sp, sp, #16
   14884:	str	r0, [sp, #8]
   14888:	ldr	r0, [sp, #8]
   1488c:	movw	r1, #0
   14890:	cmp	r0, r1
   14894:	bne	148a4 <error@@Base+0x19ac>
   14898:	movw	r0, #0
   1489c:	str	r0, [fp, #-4]
   148a0:	b	14928 <error@@Base+0x1a30>
   148a4:	b	148a8 <error@@Base+0x19b0>
   148a8:	ldr	r0, [sp, #8]
   148ac:	ldr	r0, [r0, #4]
   148b0:	movw	r1, #0
   148b4:	cmp	r0, r1
   148b8:	movw	r0, #0
   148bc:	str	r0, [sp, #4]
   148c0:	beq	14904 <error@@Base+0x1a0c>
   148c4:	ldr	r0, [sp, #8]
   148c8:	ldr	r0, [r0, #4]
   148cc:	bl	1480c <error@@Base+0x1914>
   148d0:	cmp	r0, #4
   148d4:	movw	r0, #1
   148d8:	str	r0, [sp]
   148dc:	beq	148fc <error@@Base+0x1a04>
   148e0:	ldr	r0, [sp, #8]
   148e4:	ldr	r0, [r0, #4]
   148e8:	bl	1480c <error@@Base+0x1914>
   148ec:	cmp	r0, #6
   148f0:	movw	r0, #0
   148f4:	moveq	r0, #1
   148f8:	str	r0, [sp]
   148fc:	ldr	r0, [sp]
   14900:	str	r0, [sp, #4]
   14904:	ldr	r0, [sp, #4]
   14908:	tst	r0, #1
   1490c:	beq	14920 <error@@Base+0x1a28>
   14910:	ldr	r0, [sp, #8]
   14914:	ldr	r0, [r0, #4]
   14918:	str	r0, [sp, #8]
   1491c:	b	148a8 <error@@Base+0x19b0>
   14920:	ldr	r0, [sp, #8]
   14924:	str	r0, [fp, #-4]
   14928:	ldr	r0, [fp, #-4]
   1492c:	mov	sp, fp
   14930:	pop	{fp, pc}
   14934:	push	{fp, lr}
   14938:	mov	fp, sp
   1493c:	sub	sp, sp, #8
   14940:	str	r0, [sp, #4]
   14944:	movw	r0, #1093	; 0x445
   14948:	str	r0, [sp]
   1494c:	ldr	r0, [sp, #4]
   14950:	movw	r1, #0
   14954:	movw	r2, #1092	; 0x444
   14958:	bl	14964 <error@@Base+0x1a6c>
   1495c:	mov	sp, fp
   14960:	pop	{fp, pc}
   14964:	push	{fp, lr}
   14968:	mov	fp, sp
   1496c:	sub	sp, sp, #24
   14970:	str	r0, [fp, #-8]
   14974:	str	r1, [sp, #12]
   14978:	str	r2, [sp, #8]
   1497c:	ldr	r0, [sp, #8]
   14980:	ldr	r1, [sp, #12]
   14984:	cmp	r0, r1
   14988:	bcs	14998 <error@@Base+0x1aa0>
   1498c:	movw	r0, #0
   14990:	str	r0, [fp, #-4]
   14994:	b	14a84 <error@@Base+0x1b8c>
   14998:	ldr	r0, [pc, #240]	; 14a90 <error@@Base+0x1b98>
   1499c:	add	r0, pc, r0
   149a0:	ldr	r1, [sp, #12]
   149a4:	ldr	r2, [sp, #8]
   149a8:	sub	r2, r2, r1
   149ac:	lsr	r2, r2, #1
   149b0:	add	r1, r1, r2
   149b4:	str	r1, [sp, #4]
   149b8:	ldr	r1, [sp, #4]
   149bc:	movw	r2, #12
   149c0:	mul	r1, r1, r2
   149c4:	add	r0, r0, r1
   149c8:	str	r0, [sp]
   149cc:	ldr	r0, [fp, #-8]
   149d0:	ldr	r1, [sp]
   149d4:	ldr	r1, [r1]
   149d8:	cmp	r0, r1
   149dc:	bcs	149fc <error@@Base+0x1b04>
   149e0:	ldr	r0, [fp, #-8]
   149e4:	ldr	r1, [sp, #12]
   149e8:	ldr	r2, [sp, #4]
   149ec:	sub	r2, r2, #1
   149f0:	bl	14964 <error@@Base+0x1a6c>
   149f4:	str	r0, [fp, #-4]
   149f8:	b	14a84 <error@@Base+0x1b8c>
   149fc:	ldr	r0, [fp, #-8]
   14a00:	ldr	r1, [sp]
   14a04:	ldr	r1, [r1, #4]
   14a08:	cmp	r0, r1
   14a0c:	bls	14a2c <error@@Base+0x1b34>
   14a10:	ldr	r0, [fp, #-8]
   14a14:	ldr	r1, [sp, #4]
   14a18:	add	r1, r1, #1
   14a1c:	ldr	r2, [sp, #8]
   14a20:	bl	14964 <error@@Base+0x1a6c>
   14a24:	str	r0, [fp, #-4]
   14a28:	b	14a84 <error@@Base+0x1b8c>
   14a2c:	ldr	r0, [fp, #-8]
   14a30:	ldr	r1, [sp]
   14a34:	ldr	r1, [r1]
   14a38:	cmp	r0, r1
   14a3c:	bcc	14a58 <error@@Base+0x1b60>
   14a40:	ldr	r0, [fp, #-8]
   14a44:	ldr	r1, [sp]
   14a48:	ldr	r1, [r1, #4]
   14a4c:	cmp	r0, r1
   14a50:	bhi	14a58 <error@@Base+0x1b60>
   14a54:	b	14a78 <error@@Base+0x1b80>
   14a58:	ldr	r0, [pc, #52]	; 14a94 <error@@Base+0x1b9c>
   14a5c:	add	r0, pc, r0
   14a60:	ldr	r1, [pc, #48]	; 14a98 <error@@Base+0x1ba0>
   14a64:	add	r1, pc, r1
   14a68:	ldr	r2, [pc, #44]	; 14a9c <error@@Base+0x1ba4>
   14a6c:	add	r3, pc, r2
   14a70:	movw	r2, #63	; 0x3f
   14a74:	bl	10c10 <__assert_fail@plt>
   14a78:	ldr	r0, [sp]
   14a7c:	ldr	r0, [r0, #8]
   14a80:	str	r0, [fp, #-4]
   14a84:	ldr	r0, [fp, #-4]
   14a88:	mov	sp, fp
   14a8c:	pop	{fp, pc}
   14a90:	andeq	r1, r0, r0, asr #12
   14a94:			; <UNDEFINED> instruction: 0x000048bc
   14a98:	andeq	r4, r0, sp, ror #17
   14a9c:	andeq	r4, r0, ip, ror #17
   14aa0:	push	{fp, lr}
   14aa4:	mov	fp, sp
   14aa8:	sub	sp, sp, #24
   14aac:	str	r0, [fp, #-4]
   14ab0:	str	r1, [fp, #-8]
   14ab4:	movw	r0, #0
   14ab8:	str	r0, [sp, #8]
   14abc:	str	r0, [sp, #4]
   14ac0:	ldr	r0, [fp, #-4]
   14ac4:	str	r0, [sp, #12]
   14ac8:	ldr	r0, [sp, #12]
   14acc:	ldr	r1, [fp, #-8]
   14ad0:	cmp	r0, r1
   14ad4:	beq	14b70 <error@@Base+0x1c78>
   14ad8:	ldr	r0, [sp, #12]
   14adc:	movw	r1, #0
   14ae0:	cmp	r0, r1
   14ae4:	beq	14aec <error@@Base+0x1bf4>
   14ae8:	b	14b0c <error@@Base+0x1c14>
   14aec:	ldr	r0, [pc, #136]	; 14b7c <error@@Base+0x1c84>
   14af0:	add	r0, pc, r0
   14af4:	ldr	r1, [pc, #132]	; 14b80 <error@@Base+0x1c88>
   14af8:	add	r1, pc, r1
   14afc:	ldr	r2, [pc, #128]	; 14b84 <error@@Base+0x1c8c>
   14b00:	add	r3, pc, r2
   14b04:	movw	r2, #249	; 0xf9
   14b08:	bl	10c10 <__assert_fail@plt>
   14b0c:	mov	r1, sp
   14b10:	ldr	r0, [sp, #12]
   14b14:	ldr	r0, [r0, #12]
   14b18:	bl	10ad8 <utf8proc_encode_char@plt>
   14b1c:	str	r0, [sp, #4]
   14b20:	ldr	r0, [sp, #4]
   14b24:	cmp	r0, #0
   14b28:	bls	14b30 <error@@Base+0x1c38>
   14b2c:	b	14b50 <error@@Base+0x1c58>
   14b30:	ldr	r0, [pc, #80]	; 14b88 <error@@Base+0x1c90>
   14b34:	add	r0, pc, r0
   14b38:	ldr	r1, [pc, #76]	; 14b8c <error@@Base+0x1c94>
   14b3c:	add	r1, pc, r1
   14b40:	ldr	r2, [pc, #72]	; 14b90 <error@@Base+0x1c98>
   14b44:	add	r3, pc, r2
   14b48:	movw	r2, #253	; 0xfd
   14b4c:	bl	10c10 <__assert_fail@plt>
   14b50:	ldr	r0, [sp, #4]
   14b54:	ldr	r1, [sp, #8]
   14b58:	add	r0, r1, r0
   14b5c:	str	r0, [sp, #8]
   14b60:	ldr	r0, [sp, #12]
   14b64:	ldr	r0, [r0, #4]
   14b68:	str	r0, [sp, #12]
   14b6c:	b	14ac8 <error@@Base+0x1bd0>
   14b70:	ldr	r0, [sp, #8]
   14b74:	mov	sp, fp
   14b78:	pop	{fp, pc}
   14b7c:	andeq	r4, r0, sl, lsl #17
   14b80:	andeq	r4, r0, r9, asr r8
   14b84:	andeq	r4, r0, sl, lsl #17
   14b88:	andeq	r4, r0, r0, ror r8
   14b8c:	andeq	r4, r0, r5, lsl r8
   14b90:	andeq	r4, r0, r6, asr #16
   14b94:	push	{fp, lr}
   14b98:	mov	fp, sp
   14b9c:	sub	sp, sp, #24
   14ba0:	str	r0, [fp, #-4]
   14ba4:	str	r1, [fp, #-8]
   14ba8:	str	r2, [sp, #12]
   14bac:	movw	r0, #0
   14bb0:	str	r0, [sp, #4]
   14bb4:	ldr	r0, [fp, #-8]
   14bb8:	str	r0, [sp, #8]
   14bbc:	ldr	r0, [sp, #8]
   14bc0:	ldr	r1, [sp, #12]
   14bc4:	cmp	r0, r1
   14bc8:	beq	14c34 <error@@Base+0x1d3c>
   14bcc:	ldr	r0, [sp, #8]
   14bd0:	movw	r1, #0
   14bd4:	cmp	r0, r1
   14bd8:	beq	14be0 <error@@Base+0x1ce8>
   14bdc:	b	14c00 <error@@Base+0x1d08>
   14be0:	ldr	r0, [pc, #104]	; 14c50 <error@@Base+0x1d58>
   14be4:	add	r0, pc, r0
   14be8:	ldr	r1, [pc, #100]	; 14c54 <error@@Base+0x1d5c>
   14bec:	add	r1, pc, r1
   14bf0:	ldr	r2, [pc, #96]	; 14c58 <error@@Base+0x1d60>
   14bf4:	add	r3, pc, r2
   14bf8:	movw	r2, #269	; 0x10d
   14bfc:	bl	10c10 <__assert_fail@plt>
   14c00:	ldr	r0, [sp, #8]
   14c04:	ldr	r0, [r0, #12]
   14c08:	ldr	r1, [fp, #-4]
   14c0c:	ldr	r2, [sp, #4]
   14c10:	add	r1, r1, r2
   14c14:	bl	10ad8 <utf8proc_encode_char@plt>
   14c18:	ldr	r1, [sp, #4]
   14c1c:	add	r0, r1, r0
   14c20:	str	r0, [sp, #4]
   14c24:	ldr	r0, [sp, #8]
   14c28:	ldr	r0, [r0, #4]
   14c2c:	str	r0, [sp, #8]
   14c30:	b	14bbc <error@@Base+0x1cc4>
   14c34:	ldr	r0, [fp, #-4]
   14c38:	ldr	r1, [sp, #4]
   14c3c:	add	r0, r0, r1
   14c40:	movw	r1, #0
   14c44:	strb	r1, [r0]
   14c48:	mov	sp, fp
   14c4c:	pop	{fp, pc}
   14c50:	muleq	r0, r6, r7
   14c54:	andeq	r4, r0, r5, ror #14
   14c58:	andeq	r4, r0, r3, asr #15
   14c5c:	push	{fp, lr}
   14c60:	mov	fp, sp
   14c64:	sub	sp, sp, #24
   14c68:	ldr	r3, [pc, #96]	; 14cd0 <error@@Base+0x1dd8>
   14c6c:	ldr	r3, [pc, r3]
   14c70:	str	r0, [fp, #-4]
   14c74:	strb	r1, [fp, #-5]
   14c78:	str	r2, [sp, #12]
   14c7c:	movw	r0, #1
   14c80:	movw	r1, #16
   14c84:	blx	r3
   14c88:	ldr	r1, [pc, #60]	; 14ccc <error@@Base+0x1dd4>
   14c8c:	ldr	r1, [pc, r1]
   14c90:	str	r0, [sp, #8]
   14c94:	ldrb	r0, [fp, #-5]
   14c98:	ldr	r2, [sp, #8]
   14c9c:	strb	r0, [r2, #8]
   14ca0:	ldr	r0, [sp, #12]
   14ca4:	ldr	r2, [sp, #8]
   14ca8:	str	r0, [r2, #12]
   14cac:	ldr	r0, [fp, #-4]
   14cb0:	ldr	r2, [sp, #8]
   14cb4:	str	r1, [sp, #4]
   14cb8:	mov	r1, r2
   14cbc:	ldr	r2, [sp, #4]
   14cc0:	blx	r2
   14cc4:	mov	sp, fp
   14cc8:	pop	{fp, pc}
   14ccc:	andeq	r5, r1, r4, asr r4
   14cd0:	andeq	r5, r1, ip, asr #9
   14cd4:	push	{fp, lr}
   14cd8:	mov	fp, sp
   14cdc:	sub	sp, sp, #64	; 0x40
   14ce0:	str	r0, [fp, #-4]
   14ce4:	str	r1, [fp, #-8]
   14ce8:	str	r2, [fp, #-12]
   14cec:	ldr	r0, [fp, #-12]
   14cf0:	ldrb	r0, [r0]
   14cf4:	cmp	r0, #0
   14cf8:	beq	14d28 <error@@Base+0x1e30>
   14cfc:	ldr	r0, [fp, #-8]
   14d00:	movw	r1, #0
   14d04:	cmp	r0, r1
   14d08:	bne	14d28 <error@@Base+0x1e30>
   14d0c:	ldr	r0, [pc, #404]	; 14ea8 <error@@Base+0x1fb0>
   14d10:	add	r0, pc, r0
   14d14:	ldr	r1, [pc, #400]	; 14eac <error@@Base+0x1fb4>
   14d18:	add	r1, pc, r1
   14d1c:	ldr	r2, [pc, #396]	; 14eb0 <error@@Base+0x1fb8>
   14d20:	ldr	r2, [pc, r2]
   14d24:	blx	r2
   14d28:	ldr	r0, [pc, #388]	; 14eb4 <error@@Base+0x1fbc>
   14d2c:	add	r1, pc, r0
   14d30:	ldr	r0, [pc, #384]	; 14eb8 <error@@Base+0x1fc0>
   14d34:	ldr	r0, [pc, r0]
   14d38:	ldr	r2, [fp, #-4]
   14d3c:	ldr	r2, [r2, #4]
   14d40:	str	r2, [fp, #-16]
   14d44:	ldr	r2, [fp, #-8]
   14d48:	str	r0, [fp, #-24]	; 0xffffffe8
   14d4c:	mov	r0, r2
   14d50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14d54:	blx	r2
   14d58:	str	r0, [fp, #-20]	; 0xffffffec
   14d5c:	ldr	r0, [fp, #-12]
   14d60:	ldrsb	r0, [r0]
   14d64:	cmp	r0, #0
   14d68:	beq	14d7c <error@@Base+0x1e84>
   14d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d70:	bl	14ec0 <error@@Base+0x1fc8>
   14d74:	ldr	lr, [fp, #-12]
   14d78:	strb	r0, [lr, #11]
   14d7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d80:	ldr	r1, [fp, #-4]
   14d84:	ldr	r2, [fp, #-12]
   14d88:	ldrb	r2, [r2, #1]
   14d8c:	ldr	r3, [fp, #-12]
   14d90:	ldr	r3, [r3, #4]
   14d94:	cmp	r3, #0
   14d98:	str	r0, [fp, #-28]	; 0xffffffe4
   14d9c:	str	r1, [sp, #32]
   14da0:	str	r2, [sp, #28]
   14da4:	beq	14db8 <error@@Base+0x1ec0>
   14da8:	ldr	r0, [fp, #-12]
   14dac:	ldr	r0, [r0, #4]
   14db0:	str	r0, [sp, #24]
   14db4:	b	14dc4 <error@@Base+0x1ecc>
   14db8:	movw	r0, #94	; 0x5e
   14dbc:	str	r0, [sp, #24]
   14dc0:	b	14dc4 <error@@Base+0x1ecc>
   14dc4:	ldr	r0, [sp, #24]
   14dc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14dcc:	str	r0, [sp, #20]
   14dd0:	mov	r0, r1
   14dd4:	ldr	r1, [sp, #32]
   14dd8:	ldr	r2, [sp, #28]
   14ddc:	ldr	r3, [sp, #20]
   14de0:	bl	14fb8 <error@@Base+0x20c0>
   14de4:	ldr	r0, [pc, #208]	; 14ebc <error@@Base+0x1fc4>
   14de8:	ldr	r0, [pc, r0]
   14dec:	ldr	r1, [fp, #-20]	; 0xffffffec
   14df0:	str	r0, [sp, #16]
   14df4:	mov	r0, r1
   14df8:	ldr	r1, [sp, #16]
   14dfc:	blx	r1
   14e00:	ldr	r0, [fp, #-12]
   14e04:	ldrsb	r0, [r0, #9]
   14e08:	cmp	r0, #0
   14e0c:	beq	14e5c <error@@Base+0x1f64>
   14e10:	ldr	r0, [fp, #-4]
   14e14:	ldr	r1, [fp, #-16]
   14e18:	movw	r2, #0
   14e1c:	cmp	r1, r2
   14e20:	str	r0, [sp, #12]
   14e24:	beq	14e38 <error@@Base+0x1f40>
   14e28:	ldr	r0, [fp, #-16]
   14e2c:	ldr	r0, [r0, #4]
   14e30:	str	r0, [sp, #8]
   14e34:	b	14e44 <error@@Base+0x1f4c>
   14e38:	ldr	r0, [fp, #-4]
   14e3c:	ldr	r0, [r0]
   14e40:	str	r0, [sp, #8]
   14e44:	ldr	r0, [sp, #8]
   14e48:	ldr	r1, [sp, #12]
   14e4c:	str	r0, [sp, #4]
   14e50:	mov	r0, r1
   14e54:	ldr	r1, [sp, #4]
   14e58:	bl	15134 <error@@Base+0x223c>
   14e5c:	ldr	r0, [fp, #-12]
   14e60:	ldrsb	r0, [r0, #10]
   14e64:	cmp	r0, #0
   14e68:	beq	14ea0 <error@@Base+0x1fa8>
   14e6c:	ldr	r0, [fp, #-16]
   14e70:	movw	r1, #0
   14e74:	cmp	r0, r1
   14e78:	beq	14e8c <error@@Base+0x1f94>
   14e7c:	ldr	r0, [fp, #-16]
   14e80:	ldr	r0, [r0, #4]
   14e84:	str	r0, [sp]
   14e88:	b	14e98 <error@@Base+0x1fa0>
   14e8c:	ldr	r0, [fp, #-4]
   14e90:	ldr	r0, [r0]
   14e94:	str	r0, [sp]
   14e98:	ldr	r0, [sp]
   14e9c:	bl	152dc <error@@Base+0x23e4>
   14ea0:	mov	sp, fp
   14ea4:	pop	{fp, pc}
   14ea8:			; <UNDEFINED> instruction: 0x000046bf
   14eac:	andeq	r4, r0, r7, asr #13
   14eb0:	andeq	r5, r1, r4, lsr #8
   14eb4:	andeq	r1, r0, r8, lsr r0
   14eb8:	andeq	r5, r1, r4, lsl #7
   14ebc:	andeq	r5, r1, r0, lsr #5
   14ec0:	push	{fp, lr}
   14ec4:	mov	fp, sp
   14ec8:	sub	sp, sp, #120	; 0x78
   14ecc:	add	r1, sp, #12
   14ed0:	str	r0, [fp, #-8]
   14ed4:	movw	r0, #0
   14ed8:	strh	r0, [sp, #10]
   14edc:	ldr	r2, [fp, #-8]
   14ee0:	mov	r0, r1
   14ee4:	movw	r1, #99	; 0x63
   14ee8:	bl	10acc <fgets@plt>
   14eec:	movw	r1, #0
   14ef0:	cmp	r0, r1
   14ef4:	beq	14f94 <error@@Base+0x209c>
   14ef8:	ldr	r0, [pc, #176]	; 14fb0 <error@@Base+0x20b8>
   14efc:	add	r1, pc, r0
   14f00:	add	r0, sp, #12
   14f04:	movw	r2, #51	; 0x33
   14f08:	bl	10bec <strncmp@plt>
   14f0c:	cmp	r0, #0
   14f10:	bne	14f94 <error@@Base+0x209c>
   14f14:	b	14f18 <error@@Base+0x2020>
   14f18:	ldrsh	r0, [sp, #10]
   14f1c:	cmp	r0, #2
   14f20:	movw	r0, #0
   14f24:	str	r0, [sp, #4]
   14f28:	bge	14f50 <error@@Base+0x2058>
   14f2c:	add	r0, sp, #12
   14f30:	ldr	r2, [fp, #-8]
   14f34:	movw	r1, #99	; 0x63
   14f38:	bl	10acc <fgets@plt>
   14f3c:	movw	r1, #0
   14f40:	cmp	r0, r1
   14f44:	movw	r0, #0
   14f48:	movne	r0, #1
   14f4c:	str	r0, [sp, #4]
   14f50:	ldr	r0, [sp, #4]
   14f54:	tst	r0, #1
   14f58:	beq	14f88 <error@@Base+0x2090>
   14f5c:	add	r0, sp, #12
   14f60:	ldr	r1, [pc, #76]	; 14fb4 <error@@Base+0x20bc>
   14f64:	add	r1, pc, r1
   14f68:	bl	10a9c <strcmp@plt>
   14f6c:	cmp	r0, #0
   14f70:	bne	14f84 <error@@Base+0x208c>
   14f74:	ldrh	r0, [sp, #10]
   14f78:	movw	r1, #1
   14f7c:	add	r0, r0, r1
   14f80:	strh	r0, [sp, #10]
   14f84:	b	14f18 <error@@Base+0x2020>
   14f88:	movw	r0, #1
   14f8c:	strb	r0, [fp, #-1]
   14f90:	b	14fa4 <error@@Base+0x20ac>
   14f94:	ldr	r0, [fp, #-8]
   14f98:	bl	10af0 <rewind@plt>
   14f9c:	movw	r0, #0
   14fa0:	strb	r0, [fp, #-1]
   14fa4:	ldrb	r0, [fp, #-1]
   14fa8:	mov	sp, fp
   14fac:	pop	{fp, pc}
   14fb0:	andeq	r4, r0, r7, lsl r5
   14fb4:	andeq	r4, r0, r7, ror #9
   14fb8:	push	{fp, lr}
   14fbc:	mov	fp, sp
   14fc0:	sub	sp, sp, #48	; 0x30
   14fc4:	str	r0, [fp, #-4]
   14fc8:	str	r1, [fp, #-8]
   14fcc:	strb	r2, [fp, #-9]
   14fd0:	str	r3, [fp, #-16]
   14fd4:	movw	r0, #0
   14fd8:	strb	r0, [fp, #-17]	; 0xffffffef
   14fdc:	ldr	r0, [fp, #-4]
   14fe0:	bl	10c04 <getc@plt>
   14fe4:	str	r0, [sp, #20]
   14fe8:	ldr	r0, [sp, #20]
   14fec:	cmn	r0, #1
   14ff0:	beq	15114 <error@@Base+0x221c>
   14ff4:	ldr	r0, [pc, #288]	; 1511c <error@@Base+0x2224>
   14ff8:	ldr	r0, [pc, r0]
   14ffc:	ldr	r1, [sp, #20]
   15000:	add	r0, r0, r1
   15004:	ldrsb	r0, [r0]
   15008:	str	r0, [sp, #8]
   1500c:	ldr	r0, [sp, #8]
   15010:	cmp	r0, #1
   15014:	bge	1502c <error@@Base+0x2134>
   15018:	ldr	r0, [pc, #268]	; 1512c <error@@Base+0x2234>
   1501c:	add	r0, pc, r0
   15020:	ldr	r1, [pc, #264]	; 15130 <error@@Base+0x2238>
   15024:	ldr	r1, [pc, r1]
   15028:	blx	r1
   1502c:	ldr	r0, [sp, #20]
   15030:	strb	r0, [fp, #-21]	; 0xffffffeb
   15034:	ldr	r0, [sp, #8]
   15038:	cmp	r0, #1
   1503c:	ble	1508c <error@@Base+0x2194>
   15040:	sub	r0, fp, #21
   15044:	add	r0, r0, #1
   15048:	ldr	r1, [sp, #8]
   1504c:	sub	r2, r1, #1
   15050:	ldr	r3, [fp, #-4]
   15054:	movw	r1, #1
   15058:	bl	10b14 <fread@plt>
   1505c:	str	r0, [sp, #16]
   15060:	ldr	r0, [sp, #16]
   15064:	ldr	r1, [sp, #8]
   15068:	sub	r1, r1, #1
   1506c:	cmp	r0, r1
   15070:	beq	15088 <error@@Base+0x2190>
   15074:	ldr	r0, [pc, #168]	; 15124 <error@@Base+0x222c>
   15078:	add	r0, pc, r0
   1507c:	ldr	r1, [pc, #164]	; 15128 <error@@Base+0x2230>
   15080:	ldr	r1, [pc, r1]
   15084:	blx	r1
   15088:	b	1508c <error@@Base+0x2194>
   1508c:	sub	r0, fp, #21
   15090:	movw	r1, #4
   15094:	add	r2, sp, #4
   15098:	bl	10b20 <utf8proc_iterate@plt>
   1509c:	str	r0, [sp, #12]
   150a0:	ldr	r0, [sp, #12]
   150a4:	ldr	r1, [sp, #8]
   150a8:	cmp	r0, r1
   150ac:	beq	150c4 <error@@Base+0x21cc>
   150b0:	ldr	r0, [sp, #12]
   150b4:	bl	10bd4 <utf8proc_errmsg@plt>
   150b8:	ldr	lr, [pc, #96]	; 15120 <error@@Base+0x2228>
   150bc:	ldr	lr, [pc, lr]
   150c0:	blx	lr
   150c4:	ldrb	r0, [fp, #-9]
   150c8:	cmp	r0, #0
   150cc:	beq	150ec <error@@Base+0x21f4>
   150d0:	ldr	r0, [sp, #4]
   150d4:	ldr	r1, [fp, #-16]
   150d8:	cmp	r0, r1
   150dc:	bne	150ec <error@@Base+0x21f4>
   150e0:	movw	r0, #1
   150e4:	strb	r0, [fp, #-17]	; 0xffffffef
   150e8:	b	15104 <error@@Base+0x220c>
   150ec:	ldr	r0, [fp, #-8]
   150f0:	ldrb	r1, [fp, #-17]	; 0xffffffef
   150f4:	ldr	r2, [sp, #4]
   150f8:	bl	14c5c <error@@Base+0x1d64>
   150fc:	movw	r0, #0
   15100:	strb	r0, [fp, #-17]	; 0xffffffef
   15104:	ldr	r0, [fp, #-4]
   15108:	bl	10c04 <getc@plt>
   1510c:	str	r0, [sp, #20]
   15110:	b	14fe8 <error@@Base+0x20f0>
   15114:	mov	sp, fp
   15118:	pop	{fp, pc}
   1511c:	andeq	r5, r1, ip, lsl #2
   15120:	strdeq	r4, [r1], -r0
   15124:	andeq	r4, r0, r3, lsr #8
   15128:	andeq	r5, r1, ip, lsr #32
   1512c:	andeq	r4, r0, r7, ror #8
   15130:	andeq	r5, r1, r8, lsl #1
   15134:	push	{fp, lr}
   15138:	mov	fp, sp
   1513c:	sub	sp, sp, #24
   15140:	str	r0, [fp, #-4]
   15144:	str	r1, [fp, #-8]
   15148:	movw	r0, #0
   1514c:	strb	r0, [fp, #-9]
   15150:	ldr	r0, [fp, #-8]
   15154:	str	r0, [sp, #8]
   15158:	ldr	r0, [sp, #8]
   1515c:	movw	r1, #0
   15160:	cmp	r0, r1
   15164:	beq	151a0 <error@@Base+0x22a8>
   15168:	ldr	r0, [sp, #8]
   1516c:	ldr	r0, [r0, #12]
   15170:	bl	157d4 <error@@Base+0x28dc>
   15174:	sxtb	r0, r0
   15178:	cmp	r0, #0
   1517c:	beq	1518c <error@@Base+0x2294>
   15180:	ldr	r0, [sp, #8]
   15184:	movw	r1, #32
   15188:	str	r1, [r0, #12]
   1518c:	b	15190 <error@@Base+0x2298>
   15190:	ldr	r0, [sp, #8]
   15194:	ldr	r0, [r0, #4]
   15198:	str	r0, [sp, #8]
   1519c:	b	15158 <error@@Base+0x2260>
   151a0:	ldr	r0, [fp, #-8]
   151a4:	str	r0, [sp, #8]
   151a8:	ldr	r0, [sp, #8]
   151ac:	movw	r1, #0
   151b0:	cmp	r0, r1
   151b4:	beq	152d0 <error@@Base+0x23d8>
   151b8:	ldr	r0, [sp, #8]
   151bc:	ldr	r0, [r0, #4]
   151c0:	str	r0, [sp, #4]
   151c4:	ldr	r0, [sp, #8]
   151c8:	ldr	r0, [r0, #12]
   151cc:	cmp	r0, #32
   151d0:	bne	15210 <error@@Base+0x2318>
   151d4:	ldrsb	r0, [fp, #-9]
   151d8:	cmp	r0, #0
   151dc:	beq	1522c <error@@Base+0x2334>
   151e0:	ldr	r0, [sp, #4]
   151e4:	movw	r1, #0
   151e8:	cmp	r0, r1
   151ec:	beq	1522c <error@@Base+0x2334>
   151f0:	ldr	r0, [sp, #4]
   151f4:	ldr	r0, [r0, #12]
   151f8:	cmp	r0, #32
   151fc:	beq	1522c <error@@Base+0x2334>
   15200:	ldr	r0, [sp, #4]
   15204:	ldr	r0, [r0, #12]
   15208:	cmp	r0, #10
   1520c:	beq	1522c <error@@Base+0x2334>
   15210:	ldr	r0, [sp, #8]
   15214:	ldr	r0, [r0, #12]
   15218:	cmp	r0, #10
   1521c:	bne	152a0 <error@@Base+0x23a8>
   15220:	ldrsb	r0, [fp, #-9]
   15224:	cmp	r0, #0
   15228:	bne	152a0 <error@@Base+0x23a8>
   1522c:	ldrb	r0, [fp, #-9]
   15230:	cmp	r0, #0
   15234:	beq	15270 <error@@Base+0x2378>
   15238:	ldr	r0, [sp, #4]
   1523c:	movw	r1, #0
   15240:	cmp	r0, r1
   15244:	beq	15270 <error@@Base+0x2378>
   15248:	ldr	r0, [sp, #4]
   1524c:	ldr	r0, [r0, #12]
   15250:	cmp	r0, #32
   15254:	bne	15270 <error@@Base+0x2378>
   15258:	ldr	r0, [sp, #8]
   1525c:	ldrb	r0, [r0, #8]
   15260:	ldr	r1, [sp, #4]
   15264:	ldrb	r2, [r1, #8]
   15268:	orr	r0, r2, r0
   1526c:	strb	r0, [r1, #8]
   15270:	ldr	r0, [pc, #96]	; 152d8 <error@@Base+0x23e0>
   15274:	ldr	r0, [pc, r0]
   15278:	ldr	r1, [fp, #-4]
   1527c:	ldr	r2, [sp, #8]
   15280:	str	r0, [sp]
   15284:	mov	r0, r1
   15288:	mov	r1, r2
   1528c:	ldr	r2, [sp]
   15290:	blx	r2
   15294:	ldr	r0, [sp, #8]
   15298:	bl	10ab4 <free@plt>
   1529c:	b	152c4 <error@@Base+0x23cc>
   152a0:	ldr	r0, [sp, #8]
   152a4:	ldr	r0, [r0, #12]
   152a8:	cmp	r0, #10
   152ac:	movw	r0, #0
   152b0:	moveq	r0, #1
   152b4:	tst	r0, #1
   152b8:	movw	r0, #0
   152bc:	moveq	r0, #1
   152c0:	strb	r0, [fp, #-9]
   152c4:	ldr	r0, [sp, #4]
   152c8:	str	r0, [sp, #8]
   152cc:	b	151a8 <error@@Base+0x22b0>
   152d0:	mov	sp, fp
   152d4:	pop	{fp, pc}
   152d8:	andeq	r4, r1, r0, ror #29
   152dc:	push	{fp, lr}
   152e0:	mov	fp, sp
   152e4:	sub	sp, sp, #8
   152e8:	str	r0, [sp, #4]
   152ec:	ldr	r0, [sp, #4]
   152f0:	str	r0, [sp]
   152f4:	ldr	r0, [sp]
   152f8:	movw	r1, #0
   152fc:	cmp	r0, r1
   15300:	beq	15328 <error@@Base+0x2430>
   15304:	ldr	r0, [sp]
   15308:	ldr	r0, [r0, #12]
   1530c:	bl	10afc <utf8proc_tolower@plt>
   15310:	ldr	lr, [sp]
   15314:	str	r0, [lr, #12]
   15318:	ldr	r0, [sp]
   1531c:	ldr	r0, [r0, #4]
   15320:	str	r0, [sp]
   15324:	b	152f4 <error@@Base+0x23fc>
   15328:	mov	sp, fp
   1532c:	pop	{fp, pc}
   15330:	push	{fp, lr}
   15334:	mov	fp, sp
   15338:	sub	sp, sp, #16
   1533c:	str	r0, [fp, #-4]
   15340:	str	r1, [sp, #8]
   15344:	ldr	r0, [fp, #-4]
   15348:	ldr	r1, [sp, #8]
   1534c:	bl	10ad8 <utf8proc_encode_char@plt>
   15350:	str	r0, [sp, #4]
   15354:	ldr	r0, [sp, #4]
   15358:	cmp	r0, #1
   1535c:	bge	15374 <error@@Base+0x247c>
   15360:	ldr	r0, [pc, #28]	; 15384 <error@@Base+0x248c>
   15364:	add	r0, pc, r0
   15368:	ldr	r1, [pc, #24]	; 15388 <error@@Base+0x2490>
   1536c:	ldr	r1, [pc, r1]
   15370:	blx	r1
   15374:	ldr	r0, [sp, #4]
   15378:	sxtb	r0, r0
   1537c:	mov	sp, fp
   15380:	pop	{fp, pc}
   15384:	andeq	r4, r0, r5, lsl #1
   15388:	andeq	r4, r1, r0, asr #26
   1538c:	push	{fp, lr}
   15390:	mov	fp, sp
   15394:	sub	sp, sp, #32
   15398:	strb	r0, [fp, #-1]
   1539c:	str	r1, [fp, #-8]
   153a0:	str	r2, [fp, #-12]
   153a4:	strb	r3, [fp, #-13]
   153a8:	movw	r0, #0
   153ac:	strh	r0, [sp, #16]
   153b0:	ldr	r0, [fp, #-12]
   153b4:	str	r0, [sp, #12]
   153b8:	ldrsb	r0, [fp, #-1]
   153bc:	cmp	r0, #0
   153c0:	beq	153e0 <error@@Base+0x24e8>
   153c4:	ldr	r1, [sp, #12]
   153c8:	movw	r0, #94	; 0x5e
   153cc:	bl	15330 <error@@Base+0x2438>
   153d0:	sxtb	r0, r0
   153d4:	ldrsh	r1, [sp, #16]
   153d8:	add	r0, r1, r0
   153dc:	strh	r0, [sp, #16]
   153e0:	ldr	r0, [fp, #-8]
   153e4:	cmp	r0, #10
   153e8:	bne	15430 <error@@Base+0x2538>
   153ec:	ldr	r0, [pc, #316]	; 15530 <error@@Base+0x2638>
   153f0:	add	r0, pc, r0
   153f4:	ldr	r1, [pc, #312]	; 15534 <error@@Base+0x263c>
   153f8:	add	r1, pc, r1
   153fc:	ldr	r2, [fp, #-12]
   15400:	ldrsh	r3, [sp, #16]
   15404:	add	r2, r2, r3
   15408:	ldrb	r3, [fp, #-13]
   1540c:	cmp	r3, #0
   15410:	movw	r3, #0
   15414:	movne	r3, #1
   15418:	tst	r3, #1
   1541c:	movne	r1, r0
   15420:	mov	r0, r2
   15424:	bl	10bbc <sprintf@plt>
   15428:	str	r0, [sp, #8]
   1542c:	b	15520 <error@@Base+0x2628>
   15430:	ldr	r0, [fp, #-8]
   15434:	bl	15538 <error@@Base+0x2640>
   15438:	sxtb	r0, r0
   1543c:	cmp	r0, #0
   15440:	beq	154c8 <error@@Base+0x25d0>
   15444:	ldr	r0, [fp, #-8]
   15448:	bl	155b8 <error@@Base+0x26c0>
   1544c:	sxtb	r0, r0
   15450:	cmp	r0, #0
   15454:	beq	1547c <error@@Base+0x2584>
   15458:	ldr	r0, [sp, #12]
   1545c:	ldrsh	r1, [sp, #16]
   15460:	add	r1, r0, r1
   15464:	movw	r0, #9676	; 0x25cc
   15468:	bl	15330 <error@@Base+0x2438>
   1546c:	sxtb	r0, r0
   15470:	ldrsh	r1, [sp, #16]
   15474:	add	r0, r1, r0
   15478:	strh	r0, [sp, #16]
   1547c:	ldr	r0, [fp, #-8]
   15480:	ldr	r1, [sp, #12]
   15484:	ldrsh	r2, [sp, #16]
   15488:	add	r1, r1, r2
   1548c:	bl	15330 <error@@Base+0x2438>
   15490:	sxtb	r0, r0
   15494:	ldrsh	r1, [sp, #16]
   15498:	add	r0, r1, r0
   1549c:	strh	r0, [sp, #16]
   154a0:	ldr	r0, [fp, #-12]
   154a4:	ldrh	r1, [sp, #16]
   154a8:	movw	r2, #1
   154ac:	add	r2, r1, r2
   154b0:	strh	r2, [sp, #16]
   154b4:	sxth	r1, r1
   154b8:	add	r0, r0, r1
   154bc:	movw	r1, #0
   154c0:	strb	r1, [r0]
   154c4:	b	1551c <error@@Base+0x2624>
   154c8:	ldr	r0, [fp, #-8]
   154cc:	cmp	r0, #256	; 0x100
   154d0:	bcs	154f8 <error@@Base+0x2600>
   154d4:	ldr	r0, [pc, #80]	; 1552c <error@@Base+0x2634>
   154d8:	add	r1, pc, r0
   154dc:	ldr	r0, [fp, #-12]
   154e0:	ldrsh	r2, [sp, #16]
   154e4:	add	r0, r0, r2
   154e8:	ldr	r2, [fp, #-8]
   154ec:	bl	10bbc <sprintf@plt>
   154f0:	str	r0, [sp, #4]
   154f4:	b	15518 <error@@Base+0x2620>
   154f8:	ldr	r0, [pc, #40]	; 15528 <error@@Base+0x2630>
   154fc:	add	r1, pc, r0
   15500:	ldr	r0, [fp, #-12]
   15504:	ldrsh	r2, [sp, #16]
   15508:	add	r0, r0, r2
   1550c:	ldr	r2, [fp, #-8]
   15510:	bl	10bbc <sprintf@plt>
   15514:	str	r0, [sp]
   15518:	b	1551c <error@@Base+0x2624>
   1551c:	b	15520 <error@@Base+0x2628>
   15520:	mov	sp, fp
   15524:	pop	{fp, pc}
   15528:	andeq	r3, r0, r0, lsl pc
   1552c:	andeq	r3, r0, sp, lsr #30
   15530:	andeq	r4, r0, r0, lsl r0
   15534:	andeq	r0, r0, sl, ror sl
   15538:	push	{fp, lr}
   1553c:	mov	fp, sp
   15540:	sub	sp, sp, #16
   15544:	str	r0, [sp, #8]
   15548:	ldr	r0, [sp, #8]
   1554c:	bl	10ac0 <utf8proc_get_property@plt>
   15550:	str	r0, [sp, #4]
   15554:	ldr	r0, [sp, #8]
   15558:	cmp	r0, #32
   1555c:	bne	1556c <error@@Base+0x2674>
   15560:	movw	r0, #1
   15564:	strb	r0, [fp, #-1]
   15568:	b	155ac <error@@Base+0x26b4>
   1556c:	ldr	r0, [sp, #4]
   15570:	ldrsh	r0, [r0]
   15574:	sub	r1, r0, #1
   15578:	cmp	r1, #22
   1557c:	str	r0, [sp]
   15580:	bcc	15598 <error@@Base+0x26a0>
   15584:	b	15588 <error@@Base+0x2690>
   15588:	ldr	r0, [sp]
   1558c:	cmp	r0, #29
   15590:	bne	155a4 <error@@Base+0x26ac>
   15594:	b	15598 <error@@Base+0x26a0>
   15598:	movw	r0, #1
   1559c:	strb	r0, [fp, #-1]
   155a0:	b	155ac <error@@Base+0x26b4>
   155a4:	movw	r0, #0
   155a8:	strb	r0, [fp, #-1]
   155ac:	ldrb	r0, [fp, #-1]
   155b0:	mov	sp, fp
   155b4:	pop	{fp, pc}
   155b8:	push	{fp, lr}
   155bc:	mov	fp, sp
   155c0:	sub	sp, sp, #8
   155c4:	str	r0, [sp]
   155c8:	ldr	r0, [sp]
   155cc:	bl	10b68 <utf8proc_category@plt>
   155d0:	sub	r0, r0, #6
   155d4:	cmp	r0, #2
   155d8:	bhi	155ec <error@@Base+0x26f4>
   155dc:	b	155e0 <error@@Base+0x26e8>
   155e0:	movw	r0, #1
   155e4:	strb	r0, [fp, #-1]
   155e8:	b	155f4 <error@@Base+0x26fc>
   155ec:	movw	r0, #0
   155f0:	strb	r0, [fp, #-1]
   155f4:	ldrb	r0, [fp, #-1]
   155f8:	mov	sp, fp
   155fc:	pop	{fp, pc}
   15600:	push	{fp, lr}
   15604:	mov	fp, sp
   15608:	sub	sp, sp, #56	; 0x38
   1560c:	ldr	r3, [pc, #260]	; 15718 <error@@Base+0x2820>
   15610:	add	r3, pc, r3
   15614:	ldr	ip, [pc, #256]	; 1571c <error@@Base+0x2824>
   15618:	ldr	ip, [pc, ip]
   1561c:	str	r0, [fp, #-4]
   15620:	str	r1, [fp, #-8]
   15624:	str	r2, [fp, #-12]
   15628:	ldr	r0, [fp, #-8]
   1562c:	mov	r1, r3
   15630:	blx	ip
   15634:	str	r0, [fp, #-16]
   15638:	ldr	r0, [fp, #-12]
   1563c:	movw	r1, #0
   15640:	cmp	r0, r1
   15644:	beq	1569c <error@@Base+0x27a4>
   15648:	ldr	r0, [pc, #216]	; 15728 <error@@Base+0x2830>
   1564c:	add	r0, pc, r0
   15650:	ldr	r1, [fp, #-16]
   15654:	bl	10be0 <fputs@plt>
   15658:	ldr	r1, [pc, #196]	; 15724 <error@@Base+0x282c>
   1565c:	add	r1, pc, r1
   15660:	ldr	lr, [fp, #-16]
   15664:	str	r0, [sp, #20]
   15668:	mov	r0, r1
   1566c:	mov	r1, lr
   15670:	bl	10be0 <fputs@plt>
   15674:	ldr	r1, [fp, #-12]
   15678:	ldr	lr, [fp, #-16]
   1567c:	str	r0, [sp, #16]
   15680:	mov	r0, lr
   15684:	blx	r1
   15688:	ldr	r0, [pc, #144]	; 15720 <error@@Base+0x2828>
   1568c:	add	r0, pc, r0
   15690:	ldr	r1, [fp, #-16]
   15694:	bl	10be0 <fputs@plt>
   15698:	str	r0, [sp, #12]
   1569c:	ldr	r0, [fp, #-4]
   156a0:	ldr	r0, [r0]
   156a4:	str	r0, [fp, #-20]	; 0xffffffec
   156a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   156ac:	movw	r1, #0
   156b0:	cmp	r0, r1
   156b4:	beq	156f4 <error@@Base+0x27fc>
   156b8:	add	r2, sp, #27
   156bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   156c0:	ldrb	r0, [r0, #8]
   156c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   156c8:	ldr	r1, [r1, #12]
   156cc:	movw	r3, #0
   156d0:	bl	1538c <error@@Base+0x2494>
   156d4:	add	r0, sp, #27
   156d8:	ldr	r1, [fp, #-16]
   156dc:	bl	10be0 <fputs@plt>
   156e0:	str	r0, [sp, #8]
   156e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   156e8:	ldr	r0, [r0, #4]
   156ec:	str	r0, [fp, #-20]	; 0xffffffec
   156f0:	b	156a8 <error@@Base+0x27b0>
   156f4:	ldr	r0, [pc, #48]	; 1572c <error@@Base+0x2834>
   156f8:	ldr	r0, [pc, r0]
   156fc:	ldr	r1, [fp, #-16]
   15700:	str	r0, [sp, #4]
   15704:	mov	r0, r1
   15708:	ldr	r1, [sp, #4]
   1570c:	blx	r1
   15710:	mov	sp, fp
   15714:	pop	{fp, pc}
   15718:	andeq	r0, r0, fp, lsr r7
   1571c:	andeq	r4, r1, r0, lsr #21
   15720:			; <UNDEFINED> instruction: 0x00003dbf
   15724:	andeq	r3, r0, pc, ror #27
   15728:	andeq	r3, r0, r7, asr #27
   1572c:	muleq	r1, r0, r9
   15730:	push	{fp, lr}
   15734:	mov	fp, sp
   15738:	sub	sp, sp, #24
   1573c:	str	r0, [fp, #-8]
   15740:	str	r1, [sp, #12]
   15744:	ldr	r0, [sp, #12]
   15748:	str	r0, [sp, #8]
   1574c:	movw	r0, #0
   15750:	str	r0, [sp, #4]
   15754:	str	r0, [sp]
   15758:	ldr	r0, [sp, #12]
   1575c:	str	r0, [sp, #8]
   15760:	ldr	r0, [sp, #8]
   15764:	ldrb	r0, [r0]
   15768:	cmp	r0, #0
   1576c:	beq	157c0 <error@@Base+0x28c8>
   15770:	ldr	r0, [sp, #8]
   15774:	mvn	r1, #0
   15778:	mov	r2, sp
   1577c:	bl	10b20 <utf8proc_iterate@plt>
   15780:	str	r0, [sp, #4]
   15784:	ldr	r0, [sp, #4]
   15788:	cmp	r0, #1
   1578c:	bge	1579c <error@@Base+0x28a4>
   15790:	movw	r0, #0
   15794:	strb	r0, [fp, #-1]
   15798:	b	157c8 <error@@Base+0x28d0>
   1579c:	ldr	r0, [fp, #-8]
   157a0:	ldr	r2, [sp]
   157a4:	movw	r1, #0
   157a8:	bl	14c5c <error@@Base+0x1d64>
   157ac:	ldr	r0, [sp, #4]
   157b0:	ldr	r1, [sp, #8]
   157b4:	add	r0, r1, r0
   157b8:	str	r0, [sp, #8]
   157bc:	b	15760 <error@@Base+0x2868>
   157c0:	movw	r0, #1
   157c4:	strb	r0, [fp, #-1]
   157c8:	ldrb	r0, [fp, #-1]
   157cc:	mov	sp, fp
   157d0:	pop	{fp, pc}
   157d4:	push	{fp, lr}
   157d8:	mov	fp, sp
   157dc:	sub	sp, sp, #16
   157e0:	str	r0, [sp, #8]
   157e4:	ldr	r0, [sp, #8]
   157e8:	bl	10ac0 <utf8proc_get_property@plt>
   157ec:	str	r0, [sp, #4]
   157f0:	ldr	r0, [sp, #8]
   157f4:	cmp	r0, #9
   157f8:	str	r0, [sp]
   157fc:	beq	15844 <error@@Base+0x294c>
   15800:	b	15804 <error@@Base+0x290c>
   15804:	ldr	r0, [sp]
   15808:	cmp	r0, #10
   1580c:	beq	15838 <error@@Base+0x2940>
   15810:	b	15814 <error@@Base+0x291c>
   15814:	ldr	r0, [sp]
   15818:	sub	r1, r0, #11
   1581c:	cmp	r1, #3
   15820:	bcc	15844 <error@@Base+0x294c>
   15824:	b	15828 <error@@Base+0x2930>
   15828:	ldr	r0, [sp]
   1582c:	cmp	r0, #160	; 0xa0
   15830:	beq	15844 <error@@Base+0x294c>
   15834:	b	15850 <error@@Base+0x2958>
   15838:	movw	r0, #0
   1583c:	strb	r0, [fp, #-1]
   15840:	b	1587c <error@@Base+0x2984>
   15844:	movw	r0, #1
   15848:	strb	r0, [fp, #-1]
   1584c:	b	1587c <error@@Base+0x2984>
   15850:	ldr	r0, [sp, #4]
   15854:	ldrsh	r0, [r0]
   15858:	sub	r0, r0, #23
   1585c:	cmp	r0, #2
   15860:	bhi	15874 <error@@Base+0x297c>
   15864:	b	15868 <error@@Base+0x2970>
   15868:	movw	r0, #1
   1586c:	strb	r0, [fp, #-1]
   15870:	b	1587c <error@@Base+0x2984>
   15874:	movw	r0, #0
   15878:	strb	r0, [fp, #-1]
   1587c:	ldrb	r0, [fp, #-1]
   15880:	mov	sp, fp
   15884:	pop	{fp, pc}
   15888:	push	{fp, lr}
   1588c:	mov	fp, sp
   15890:	sub	sp, sp, #16
   15894:	str	r0, [fp, #-4]
   15898:	str	r1, [sp, #8]
   1589c:	str	r2, [sp, #4]
   158a0:	ldr	r0, [fp, #-4]
   158a4:	cmp	r0, #2
   158a8:	bge	158b0 <error@@Base+0x29b8>
   158ac:	b	158e0 <error@@Base+0x29e8>
   158b0:	ldr	r0, [pc, #48]	; 158e8 <error@@Base+0x29f0>
   158b4:	add	r0, pc, r0
   158b8:	ldr	r1, [pc, #44]	; 158ec <error@@Base+0x29f4>
   158bc:	add	r1, pc, r1
   158c0:	ldr	r2, [sp, #8]
   158c4:	str	r2, [r1]
   158c8:	ldr	r1, [sp, #4]
   158cc:	str	r1, [r0]
   158d0:	ldr	r0, [fp, #-4]
   158d4:	sub	r1, r0, #1
   158d8:	movw	r0, #0
   158dc:	bl	158f0 <error@@Base+0x29f8>
   158e0:	mov	sp, fp
   158e4:	pop	{fp, pc}
   158e8:	andeq	r6, r1, r8, lsr #21
   158ec:	muleq	r1, ip, sl
   158f0:	push	{fp, lr}
   158f4:	mov	fp, sp
   158f8:	sub	sp, sp, #40	; 0x28
   158fc:	str	r0, [fp, #-4]
   15900:	str	r1, [fp, #-8]
   15904:	ldr	r0, [fp, #-4]
   15908:	str	r0, [fp, #-12]
   1590c:	ldr	r0, [fp, #-8]
   15910:	str	r0, [fp, #-16]
   15914:	ldr	r0, [pc, #500]	; 15b10 <error@@Base+0x2c18>
   15918:	ldr	r0, [pc, r0]
   1591c:	ldr	r1, [fp, #-12]
   15920:	add	r0, r0, r1, lsl #2
   15924:	ldr	r0, [r0]
   15928:	str	r0, [sp, #20]
   1592c:	ldr	r0, [fp, #-12]
   15930:	ldr	r1, [fp, #-16]
   15934:	cmp	r0, r1
   15938:	bge	15aa4 <error@@Base+0x2bac>
   1593c:	b	15940 <error@@Base+0x2a48>
   15940:	ldr	r0, [fp, #-12]
   15944:	ldr	r1, [fp, #-16]
   15948:	cmp	r0, r1
   1594c:	movw	r0, #0
   15950:	str	r0, [sp, #16]
   15954:	bge	1599c <error@@Base+0x2aa4>
   15958:	ldr	r0, [pc, #436]	; 15b14 <error@@Base+0x2c1c>
   1595c:	ldr	r0, [pc, r0]
   15960:	ldr	r1, [sp, #20]
   15964:	ldr	r2, [pc, #428]	; 15b18 <error@@Base+0x2c20>
   15968:	ldr	r2, [pc, r2]
   1596c:	ldr	r3, [fp, #-16]
   15970:	add	r2, r2, r3, lsl #2
   15974:	ldr	r2, [r2]
   15978:	str	r0, [sp, #12]
   1597c:	mov	r0, r1
   15980:	mov	r1, r2
   15984:	ldr	r2, [sp, #12]
   15988:	blx	r2
   1598c:	cmp	r0, #0
   15990:	movw	r0, #0
   15994:	movlt	r0, #1
   15998:	str	r0, [sp, #16]
   1599c:	ldr	r0, [sp, #16]
   159a0:	tst	r0, #1
   159a4:	beq	159bc <error@@Base+0x2ac4>
   159a8:	ldr	r0, [fp, #-16]
   159ac:	mvn	r1, #0
   159b0:	add	r0, r0, r1
   159b4:	str	r0, [fp, #-16]
   159b8:	b	15940 <error@@Base+0x2a48>
   159bc:	ldr	r0, [fp, #-12]
   159c0:	ldr	r1, [fp, #-16]
   159c4:	cmp	r0, r1
   159c8:	beq	159f0 <error@@Base+0x2af8>
   159cc:	ldr	r0, [pc, #328]	; 15b1c <error@@Base+0x2c24>
   159d0:	ldr	r0, [pc, r0]
   159d4:	ldr	r1, [fp, #-16]
   159d8:	ldr	r1, [r0, r1, lsl #2]
   159dc:	ldr	r2, [fp, #-12]
   159e0:	add	r3, r2, #1
   159e4:	str	r3, [fp, #-12]
   159e8:	add	r0, r0, r2, lsl #2
   159ec:	str	r1, [r0]
   159f0:	b	159f4 <error@@Base+0x2afc>
   159f4:	ldr	r0, [fp, #-12]
   159f8:	ldr	r1, [fp, #-16]
   159fc:	cmp	r0, r1
   15a00:	movw	r0, #0
   15a04:	str	r0, [sp, #8]
   15a08:	bge	15a50 <error@@Base+0x2b58>
   15a0c:	ldr	r0, [pc, #268]	; 15b20 <error@@Base+0x2c28>
   15a10:	ldr	r0, [pc, r0]
   15a14:	ldr	r1, [sp, #20]
   15a18:	ldr	r2, [pc, #260]	; 15b24 <error@@Base+0x2c2c>
   15a1c:	ldr	r2, [pc, r2]
   15a20:	ldr	r3, [fp, #-12]
   15a24:	add	r2, r2, r3, lsl #2
   15a28:	ldr	r2, [r2]
   15a2c:	str	r0, [sp, #4]
   15a30:	mov	r0, r1
   15a34:	mov	r1, r2
   15a38:	ldr	r2, [sp, #4]
   15a3c:	blx	r2
   15a40:	cmp	r0, #0
   15a44:	movw	r0, #0
   15a48:	movgt	r0, #1
   15a4c:	str	r0, [sp, #8]
   15a50:	ldr	r0, [sp, #8]
   15a54:	tst	r0, #1
   15a58:	beq	15a6c <error@@Base+0x2b74>
   15a5c:	ldr	r0, [fp, #-12]
   15a60:	add	r0, r0, #1
   15a64:	str	r0, [fp, #-12]
   15a68:	b	159f4 <error@@Base+0x2afc>
   15a6c:	ldr	r0, [fp, #-12]
   15a70:	ldr	r1, [fp, #-16]
   15a74:	cmp	r0, r1
   15a78:	beq	15aa0 <error@@Base+0x2ba8>
   15a7c:	ldr	r0, [pc, #164]	; 15b28 <error@@Base+0x2c30>
   15a80:	ldr	r0, [pc, r0]
   15a84:	ldr	r1, [fp, #-12]
   15a88:	ldr	r1, [r0, r1, lsl #2]
   15a8c:	ldr	r2, [fp, #-16]
   15a90:	sub	r3, r2, #1
   15a94:	str	r3, [fp, #-16]
   15a98:	add	r0, r0, r2, lsl #2
   15a9c:	str	r1, [r0]
   15aa0:	b	1592c <error@@Base+0x2a34>
   15aa4:	ldr	r0, [sp, #20]
   15aa8:	ldr	r1, [pc, #124]	; 15b2c <error@@Base+0x2c34>
   15aac:	ldr	r1, [pc, r1]
   15ab0:	ldr	r2, [fp, #-16]
   15ab4:	add	r1, r1, r2, lsl #2
   15ab8:	str	r0, [r1]
   15abc:	ldr	r0, [fp, #-4]
   15ac0:	ldr	r1, [fp, #-16]
   15ac4:	mvn	r2, #0
   15ac8:	add	r1, r1, r2
   15acc:	str	r1, [fp, #-16]
   15ad0:	cmp	r0, r1
   15ad4:	bge	15ae4 <error@@Base+0x2bec>
   15ad8:	ldr	r0, [fp, #-4]
   15adc:	ldr	r1, [fp, #-16]
   15ae0:	bl	158f0 <error@@Base+0x29f8>
   15ae4:	ldr	r0, [fp, #-12]
   15ae8:	add	r0, r0, #1
   15aec:	str	r0, [fp, #-12]
   15af0:	ldr	r1, [fp, #-8]
   15af4:	cmp	r0, r1
   15af8:	bge	15b08 <error@@Base+0x2c10>
   15afc:	ldr	r0, [fp, #-12]
   15b00:	ldr	r1, [fp, #-8]
   15b04:	bl	158f0 <error@@Base+0x29f8>
   15b08:	mov	sp, fp
   15b0c:	pop	{fp, pc}
   15b10:	andeq	r6, r1, r0, asr #20
   15b14:	andeq	r6, r1, r0, lsl #20
   15b18:	strdeq	r6, [r1], -r0
   15b1c:	andeq	r6, r1, r8, lsl #19
   15b20:	andeq	r6, r1, ip, asr #18
   15b24:	andeq	r6, r1, ip, lsr r9
   15b28:	ldrdeq	r6, [r1], -r8
   15b2c:	andeq	r6, r1, ip, lsr #17
   15b30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b34:	mov	r7, r0
   15b38:	ldr	r6, [pc, #72]	; 15b88 <error@@Base+0x2c90>
   15b3c:	ldr	r5, [pc, #72]	; 15b8c <error@@Base+0x2c94>
   15b40:	add	r6, pc, r6
   15b44:	add	r5, pc, r5
   15b48:	sub	r6, r6, r5
   15b4c:	mov	r8, r1
   15b50:	mov	r9, r2
   15b54:	bl	10a70 <calloc@plt-0x20>
   15b58:	asrs	r6, r6, #2
   15b5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b60:	mov	r4, #0
   15b64:	add	r4, r4, #1
   15b68:	ldr	r3, [r5], #4
   15b6c:	mov	r2, r9
   15b70:	mov	r1, r8
   15b74:	mov	r0, r7
   15b78:	blx	r3
   15b7c:	cmp	r6, r4
   15b80:	bne	15b64 <error@@Base+0x2c6c>
   15b84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b88:			; <UNDEFINED> instruction: 0x000143b4
   15b8c:	andeq	r4, r1, ip, lsr #7
   15b90:	bx	lr
   15b94:	mov	r2, r1
   15b98:	mov	r1, r0
   15b9c:	mov	r0, #3
   15ba0:	b	10b08 <__xstat@plt>

Disassembly of section .fini:

00015ba4 <.fini>:
   15ba4:	push	{r3, lr}
   15ba8:	pop	{r3, pc}
