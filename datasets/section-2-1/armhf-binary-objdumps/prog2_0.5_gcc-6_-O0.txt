
../repos/prog2/0.5:     file format elf32-littlearm


Disassembly of section .init:

00010608 <.init>:
   10608:	push	{r3, lr}
   1060c:	bl	106c4 <_start@@Base+0x3c>
   10610:	pop	{r3, pc}

Disassembly of section .plt:

00010614 <strcmp@plt-0x14>:
   10614:	push	{lr}		; (str lr, [sp, #-4]!)
   10618:	ldr	lr, [pc, #4]	; 10624 <strcmp@plt-0x4>
   1061c:	add	lr, pc, lr
   10620:	ldr	pc, [lr, #8]!
   10624:	ldrdeq	r0, [r1], -ip

00010628 <strcmp@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2524]!	; 0x9dc

00010634 <printf@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010640 <__libc_start_main@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2508]!	; 0x9cc

0001064c <__gmon_start__@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2500]!	; 0x9c4

00010658 <strlen@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #16, 20	; 0x10000
   10660:	ldr	pc, [ip, #2492]!	; 0x9bc

00010664 <memset@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #16, 20	; 0x10000
   1066c:	ldr	pc, [ip, #2484]!	; 0x9b4

00010670 <__isoc99_scanf@plt>:
   10670:	add	ip, pc, #0, 12
   10674:	add	ip, ip, #16, 20	; 0x10000
   10678:	ldr	pc, [ip, #2476]!	; 0x9ac

0001067c <abort@plt>:
   1067c:	add	ip, pc, #0, 12
   10680:	add	ip, ip, #16, 20	; 0x10000
   10684:	ldr	pc, [ip, #2468]!	; 0x9a4

Disassembly of section .text:

00010688 <_start@@Base>:
   10688:	mov	fp, #0
   1068c:	mov	lr, #0
   10690:	pop	{r1}		; (ldr r1, [sp], #4)
   10694:	mov	r2, sp
   10698:	push	{r2}		; (str r2, [sp, #-4]!)
   1069c:	push	{r0}		; (str r0, [sp, #-4]!)
   106a0:	ldr	ip, [pc, #16]	; 106b8 <_start@@Base+0x30>
   106a4:	push	{ip}		; (str ip, [sp, #-4]!)
   106a8:	ldr	r0, [pc, #12]	; 106bc <_start@@Base+0x34>
   106ac:	ldr	r3, [pc, #12]	; 106c0 <_start@@Base+0x38>
   106b0:	bl	10640 <__libc_start_main@plt>
   106b4:	bl	1067c <abort@plt>
   106b8:	andeq	r0, r1, r8, lsr #19
   106bc:	andeq	r0, r1, r4, lsr r8
   106c0:	andeq	r0, r1, r8, asr #18
   106c4:	ldr	r3, [pc, #20]	; 106e0 <_start@@Base+0x58>
   106c8:	ldr	r2, [pc, #20]	; 106e4 <_start@@Base+0x5c>
   106cc:	add	r3, pc, r3
   106d0:	ldr	r2, [r3, r2]
   106d4:	cmp	r2, #0
   106d8:	bxeq	lr
   106dc:	b	1064c <__gmon_start__@plt>
   106e0:	andeq	r0, r1, ip, lsr #18
   106e4:	andeq	r0, r0, ip, lsr #32
   106e8:	ldr	r3, [pc, #28]	; 1070c <_start@@Base+0x84>
   106ec:	ldr	r0, [pc, #28]	; 10710 <_start@@Base+0x88>
   106f0:	sub	r3, r3, r0
   106f4:	cmp	r3, #6
   106f8:	bxls	lr
   106fc:	ldr	r3, [pc, #16]	; 10714 <_start@@Base+0x8c>
   10700:	cmp	r3, #0
   10704:	bxeq	lr
   10708:	bx	r3
   1070c:	andeq	r1, r2, fp, lsr r0
   10710:	andeq	r1, r2, r8, lsr r0
   10714:	andeq	r0, r0, r0
   10718:	ldr	r1, [pc, #36]	; 10744 <_start@@Base+0xbc>
   1071c:	ldr	r0, [pc, #36]	; 10748 <_start@@Base+0xc0>
   10720:	sub	r1, r1, r0
   10724:	asr	r1, r1, #2
   10728:	add	r1, r1, r1, lsr #31
   1072c:	asrs	r1, r1, #1
   10730:	bxeq	lr
   10734:	ldr	r3, [pc, #16]	; 1074c <_start@@Base+0xc4>
   10738:	cmp	r3, #0
   1073c:	bxeq	lr
   10740:	bx	r3
   10744:	andeq	r1, r2, r8, lsr r0
   10748:	andeq	r1, r2, r8, lsr r0
   1074c:	andeq	r0, r0, r0
   10750:	push	{r4, lr}
   10754:	ldr	r4, [pc, #24]	; 10774 <_start@@Base+0xec>
   10758:	ldrb	r3, [r4]
   1075c:	cmp	r3, #0
   10760:	popne	{r4, pc}
   10764:	bl	106e8 <_start@@Base+0x60>
   10768:	mov	r3, #1
   1076c:	strb	r3, [r4]
   10770:	pop	{r4, pc}
   10774:	andeq	r1, r2, r8, lsr r0
   10778:	ldr	r0, [pc, #40]	; 107a8 <_start@@Base+0x120>
   1077c:	ldr	r3, [r0]
   10780:	cmp	r3, #0
   10784:	bne	1078c <_start@@Base+0x104>
   10788:	b	10718 <_start@@Base+0x90>
   1078c:	ldr	r3, [pc, #24]	; 107ac <_start@@Base+0x124>
   10790:	cmp	r3, #0
   10794:	beq	10788 <_start@@Base+0x100>
   10798:	push	{r4, lr}
   1079c:	blx	r3
   107a0:	pop	{r4, lr}
   107a4:	b	10718 <_start@@Base+0x90>
   107a8:	andeq	r0, r2, r4, lsl pc
   107ac:	andeq	r0, r0, r0

000107b0 <inverte@@Base>:
   107b0:	push	{r4, fp, lr}
   107b4:	add	fp, sp, #8
   107b8:	sub	sp, sp, #20
   107bc:	str	r0, [fp, #-24]	; 0xffffffe8
   107c0:	str	r1, [fp, #-28]	; 0xffffffe4
   107c4:	mov	r3, #0
   107c8:	str	r3, [fp, #-16]
   107cc:	b	10810 <inverte@@Base+0x60>
   107d0:	ldr	r3, [fp, #-16]
   107d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   107d8:	add	r4, r2, r3
   107dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   107e0:	bl	10658 <strlen@plt>
   107e4:	mov	r2, r0
   107e8:	ldr	r3, [fp, #-16]
   107ec:	sub	r3, r2, r3
   107f0:	sub	r3, r3, #1
   107f4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   107f8:	add	r3, r2, r3
   107fc:	ldrb	r3, [r3]
   10800:	strb	r3, [r4]
   10804:	ldr	r3, [fp, #-16]
   10808:	add	r3, r3, #1
   1080c:	str	r3, [fp, #-16]
   10810:	ldr	r0, [fp, #-24]	; 0xffffffe8
   10814:	bl	10658 <strlen@plt>
   10818:	mov	r2, r0
   1081c:	ldr	r3, [fp, #-16]
   10820:	cmp	r2, r3
   10824:	bhi	107d0 <inverte@@Base+0x20>
   10828:	nop			; (mov r0, r0)
   1082c:	sub	sp, fp, #8
   10830:	pop	{r4, fp, pc}

00010834 <main@@Base>:
   10834:	push	{fp, lr}
   10838:	add	fp, sp, #4
   1083c:	sub	sp, sp, #200	; 0xc8
   10840:	sub	r3, fp, #104	; 0x68
   10844:	mov	r2, #100	; 0x64
   10848:	mov	r1, #0
   1084c:	mov	r0, r3
   10850:	bl	10664 <memset@plt>
   10854:	sub	r3, fp, #204	; 0xcc
   10858:	mov	r2, #100	; 0x64
   1085c:	mov	r1, #0
   10860:	mov	r0, r3
   10864:	bl	10664 <memset@plt>
   10868:	ldr	r3, [pc, #196]	; 10934 <main@@Base+0x100>
   1086c:	add	r3, pc, r3
   10870:	mov	r0, r3
   10874:	bl	10634 <printf@plt>
   10878:	sub	r3, fp, #104	; 0x68
   1087c:	mov	r1, r3
   10880:	ldr	r3, [pc, #176]	; 10938 <main@@Base+0x104>
   10884:	add	r3, pc, r3
   10888:	mov	r0, r3
   1088c:	bl	10670 <__isoc99_scanf@plt>
   10890:	sub	r3, fp, #104	; 0x68
   10894:	ldr	r2, [pc, #160]	; 1093c <main@@Base+0x108>
   10898:	add	r2, pc, r2
   1089c:	mov	r1, r2
   108a0:	mov	r0, r3
   108a4:	bl	10628 <strcmp@plt>
   108a8:	mov	r3, r0
   108ac:	cmp	r3, #0
   108b0:	bne	108bc <main@@Base+0x88>
   108b4:	mov	r3, #0
   108b8:	b	10928 <main@@Base+0xf4>
   108bc:	sub	r2, fp, #204	; 0xcc
   108c0:	sub	r3, fp, #104	; 0x68
   108c4:	mov	r1, r2
   108c8:	mov	r0, r3
   108cc:	bl	107b0 <inverte@@Base>
   108d0:	sub	r2, fp, #204	; 0xcc
   108d4:	sub	r3, fp, #104	; 0x68
   108d8:	mov	r1, r2
   108dc:	mov	r0, r3
   108e0:	bl	10628 <strcmp@plt>
   108e4:	mov	r3, r0
   108e8:	cmp	r3, #0
   108ec:	bne	1090c <main@@Base+0xd8>
   108f0:	sub	r3, fp, #104	; 0x68
   108f4:	mov	r1, r3
   108f8:	ldr	r3, [pc, #64]	; 10940 <main@@Base+0x10c>
   108fc:	add	r3, pc, r3
   10900:	mov	r0, r3
   10904:	bl	10634 <printf@plt>
   10908:	b	10868 <main@@Base+0x34>
   1090c:	sub	r3, fp, #104	; 0x68
   10910:	mov	r1, r3
   10914:	ldr	r3, [pc, #40]	; 10944 <main@@Base+0x110>
   10918:	add	r3, pc, r3
   1091c:	mov	r0, r3
   10920:	bl	10634 <printf@plt>
   10924:	b	10868 <main@@Base+0x34>
   10928:	mov	r0, r3
   1092c:	sub	sp, fp, #4
   10930:	pop	{fp, pc}
   10934:	andeq	r0, r0, r4, asr #2
   10938:	andeq	r0, r0, r8, lsr r1
   1093c:	andeq	r0, r0, r8, lsr #2
   10940:	andeq	r0, r0, r8, asr #1
   10944:	andeq	r0, r0, r8, asr #1

00010948 <__libc_csu_init@@Base>:
   10948:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1094c:	mov	r7, r0
   10950:	ldr	r6, [pc, #72]	; 109a0 <__libc_csu_init@@Base+0x58>
   10954:	ldr	r5, [pc, #72]	; 109a4 <__libc_csu_init@@Base+0x5c>
   10958:	add	r6, pc, r6
   1095c:	add	r5, pc, r5
   10960:	sub	r6, r6, r5
   10964:	mov	r8, r1
   10968:	mov	r9, r2
   1096c:	bl	10608 <strcmp@plt-0x20>
   10970:	asrs	r6, r6, #2
   10974:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10978:	mov	r4, #0
   1097c:	add	r4, r4, #1
   10980:	ldr	r3, [r5], #4
   10984:	mov	r2, r9
   10988:	mov	r1, r8
   1098c:	mov	r0, r7
   10990:	blx	r3
   10994:	cmp	r6, r4
   10998:	bne	1097c <__libc_csu_init@@Base+0x34>
   1099c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a0:			; <UNDEFINED> instruction: 0x000105b0
   109a4:	andeq	r0, r1, r8, lsr #11

000109a8 <__libc_csu_fini@@Base>:
   109a8:	bx	lr

Disassembly of section .fini:

000109ac <.fini>:
   109ac:	push	{r3, lr}
   109b0:	pop	{r3, pc}
