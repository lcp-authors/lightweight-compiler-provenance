
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010a94 <.init>:
   10a94:	push	{r3, lr}
   10a98:	bl	10c8c <__assert_fail@plt+0x4c>
   10a9c:	pop	{r3, pc}

Disassembly of section .plt:

00010aa0 <calloc@plt-0x14>:
   10aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10aa4:	ldr	lr, [pc, #4]	; 10ab0 <calloc@plt-0x4>
   10aa8:	add	lr, pc, lr
   10aac:	ldr	pc, [lr, #8]!
   10ab0:	andeq	r8, r1, r0, asr r5

00010ab4 <calloc@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1360]!	; 0x550

00010ac0 <strcmp@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1352]!	; 0x548

00010acc <printf@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1344]!	; 0x540

00010ad8 <fopen@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1336]!	; 0x538

00010ae4 <free@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1328]!	; 0x530

00010af0 <utf8proc_get_property@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1320]!	; 0x528

00010afc <fgets@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1312]!	; 0x520

00010b08 <utf8proc_encode_char@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1304]!	; 0x518

00010b14 <strdup@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1296]!	; 0x510

00010b20 <rewind@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1288]!	; 0x508

00010b2c <utf8proc_tolower@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1280]!	; 0x500

00010b38 <__xstat@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b44 <fread@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b50 <utf8proc_iterate@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b5c <malloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b68 <__libc_start_main@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b74 <__sysv_signal@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b80 <__gmon_start__@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b8c <exit@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b98 <utf8proc_category@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1208]!	; 0x4b8

00010ba4 <strlen@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1200]!	; 0x4b0

00010bb0 <fprintf@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1192]!	; 0x4a8

00010bbc <__isoc99_sscanf@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1184]!	; 0x4a0

00010bc8 <fclose@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #24, 20	; 0x18000
   10bd0:	ldr	pc, [ip, #1176]!	; 0x498

00010bd4 <utf8proc_NFC@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #24, 20	; 0x18000
   10bdc:	ldr	pc, [ip, #1168]!	; 0x490

00010be0 <fputc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #24, 20	; 0x18000
   10be8:	ldr	pc, [ip, #1160]!	; 0x488

00010bec <sprintf@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #24, 20	; 0x18000
   10bf4:	ldr	pc, [ip, #1152]!	; 0x480

00010bf8 <atoi@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #24, 20	; 0x18000
   10c00:	ldr	pc, [ip, #1144]!	; 0x478

00010c04 <utf8proc_errmsg@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #24, 20	; 0x18000
   10c0c:	ldr	pc, [ip, #1136]!	; 0x470

00010c10 <fputs@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #24, 20	; 0x18000
   10c18:	ldr	pc, [ip, #1128]!	; 0x468

00010c1c <strncmp@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #24, 20	; 0x18000
   10c24:	ldr	pc, [ip, #1120]!	; 0x460

00010c28 <abort@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #24, 20	; 0x18000
   10c30:	ldr	pc, [ip, #1112]!	; 0x458

00010c34 <getc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #24, 20	; 0x18000
   10c3c:	ldr	pc, [ip, #1104]!	; 0x450

00010c40 <__assert_fail@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #1096]!	; 0x448

Disassembly of section .text:

00010c50 <error@@Base-0x17b8>:
   10c50:	mov	fp, #0
   10c54:	mov	lr, #0
   10c58:	pop	{r1}		; (ldr r1, [sp], #4)
   10c5c:	mov	r2, sp
   10c60:	push	{r2}		; (str r2, [sp, #-4]!)
   10c64:	push	{r0}		; (str r0, [sp, #-4]!)
   10c68:	ldr	ip, [pc, #16]	; 10c80 <__assert_fail@plt+0x40>
   10c6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c70:	ldr	r0, [pc, #12]	; 10c84 <__assert_fail@plt+0x44>
   10c74:	ldr	r3, [pc, #12]	; 10c88 <__assert_fail@plt+0x48>
   10c78:	bl	10b68 <__libc_start_main@plt>
   10c7c:	bl	10c28 <abort@plt>
   10c80:	strdeq	r4, [r1], -r8
   10c84:	strdeq	r1, [r1], -ip
   10c88:	muleq	r1, r8, sp
   10c8c:	ldr	r3, [pc, #20]	; 10ca8 <__assert_fail@plt+0x68>
   10c90:	ldr	r2, [pc, #20]	; 10cac <__assert_fail@plt+0x6c>
   10c94:	add	r3, pc, r3
   10c98:	ldr	r2, [r3, r2]
   10c9c:	cmp	r2, #0
   10ca0:	bxeq	lr
   10ca4:	b	10b80 <__gmon_start__@plt>
   10ca8:	andeq	r8, r1, r4, ror #6
   10cac:	andeq	r0, r0, r0, ror #1
   10cb0:	ldr	r0, [pc, #24]	; 10cd0 <__assert_fail@plt+0x90>
   10cb4:	ldr	r3, [pc, #24]	; 10cd4 <__assert_fail@plt+0x94>
   10cb8:	cmp	r3, r0
   10cbc:	bxeq	lr
   10cc0:	ldr	r3, [pc, #16]	; 10cd8 <__assert_fail@plt+0x98>
   10cc4:	cmp	r3, #0
   10cc8:	bxeq	lr
   10ccc:	bx	r3
   10cd0:	andeq	r9, r2, r0, asr r1
   10cd4:	andeq	r9, r2, r0, asr r1
   10cd8:	andeq	r0, r0, r0
   10cdc:	ldr	r0, [pc, #36]	; 10d08 <__assert_fail@plt+0xc8>
   10ce0:	ldr	r1, [pc, #36]	; 10d0c <__assert_fail@plt+0xcc>
   10ce4:	sub	r1, r1, r0
   10ce8:	asr	r1, r1, #2
   10cec:	add	r1, r1, r1, lsr #31
   10cf0:	asrs	r1, r1, #1
   10cf4:	bxeq	lr
   10cf8:	ldr	r3, [pc, #16]	; 10d10 <__assert_fail@plt+0xd0>
   10cfc:	cmp	r3, #0
   10d00:	bxeq	lr
   10d04:	bx	r3
   10d08:	andeq	r9, r2, r0, asr r1
   10d0c:	andeq	r9, r2, r0, asr r1
   10d10:	andeq	r0, r0, r0
   10d14:	push	{r4, lr}
   10d18:	ldr	r4, [pc, #24]	; 10d38 <__assert_fail@plt+0xf8>
   10d1c:	ldrb	r3, [r4]
   10d20:	cmp	r3, #0
   10d24:	popne	{r4, pc}
   10d28:	bl	10cb0 <__assert_fail@plt+0x70>
   10d2c:	mov	r3, #1
   10d30:	strb	r3, [r4]
   10d34:	pop	{r4, pc}
   10d38:	andeq	r9, r2, r0, asr r1
   10d3c:	b	10cdc <__assert_fail@plt+0x9c>
   10d40:	push	{fp, lr}
   10d44:	mov	fp, sp
   10d48:	sub	sp, sp, #16
   10d4c:	ldr	r1, [pc, #244]	; 10e48 <__assert_fail@plt+0x208>
   10d50:	ldr	r1, [pc, r1]
   10d54:	ldr	r2, [pc, #240]	; 10e4c <__assert_fail@plt+0x20c>
   10d58:	ldr	r2, [pc, r2]
   10d5c:	ldr	r3, [pc, #236]	; 10e50 <__assert_fail@plt+0x210>
   10d60:	ldr	r3, [pc, r3]
   10d64:	str	r0, [fp, #-4]
   10d68:	ldr	r0, [fp, #-4]
   10d6c:	str	r0, [sp, #4]
   10d70:	mov	r0, r1
   10d74:	ldr	r1, [sp, #4]
   10d78:	blx	r3
   10d7c:	ldr	r0, [pc, #184]	; 10e3c <__assert_fail@plt+0x1fc>
   10d80:	ldr	r0, [pc, r0]
   10d84:	ldr	r1, [pc, #180]	; 10e40 <__assert_fail@plt+0x200>
   10d88:	ldr	r1, [pc, r1]
   10d8c:	ldr	r2, [pc, #176]	; 10e44 <__assert_fail@plt+0x204>
   10d90:	ldr	r2, [pc, r2]
   10d94:	blx	r2
   10d98:	ldr	r0, [pc, #152]	; 10e38 <__assert_fail@plt+0x1f8>
   10d9c:	ldr	r0, [pc, r0]
   10da0:	ldr	r0, [r0]
   10da4:	str	r0, [sp, #8]
   10da8:	ldr	r0, [sp, #8]
   10dac:	movw	r1, #0
   10db0:	cmp	r0, r1
   10db4:	beq	10df8 <__assert_fail@plt+0x1b8>
   10db8:	ldr	r0, [pc, #172]	; 10e6c <__assert_fail@plt+0x22c>
   10dbc:	ldr	r0, [pc, r0]
   10dc0:	ldr	r1, [pc, #168]	; 10e70 <__assert_fail@plt+0x230>
   10dc4:	ldr	r1, [pc, r1]
   10dc8:	ldr	r2, [sp, #8]
   10dcc:	ldr	r2, [r2, #8]
   10dd0:	str	r1, [sp]
   10dd4:	mov	r1, r2
   10dd8:	movw	r2, #1
   10ddc:	movw	r3, #0
   10de0:	ldr	ip, [sp]
   10de4:	blx	ip
   10de8:	ldr	r0, [sp, #8]
   10dec:	ldr	r0, [r0, #4]
   10df0:	str	r0, [sp, #8]
   10df4:	b	10da8 <__assert_fail@plt+0x168>
   10df8:	ldr	r0, [pc, #96]	; 10e60 <__assert_fail@plt+0x220>
   10dfc:	ldr	r0, [pc, r0]
   10e00:	ldr	r1, [pc, #92]	; 10e64 <__assert_fail@plt+0x224>
   10e04:	ldr	r1, [pc, r1]
   10e08:	ldr	r2, [pc, #88]	; 10e68 <__assert_fail@plt+0x228>
   10e0c:	ldr	r2, [pc, r2]
   10e10:	blx	r2
   10e14:	ldr	r0, [pc, #56]	; 10e54 <__assert_fail@plt+0x214>
   10e18:	ldr	r0, [pc, r0]
   10e1c:	ldr	r1, [pc, #52]	; 10e58 <__assert_fail@plt+0x218>
   10e20:	ldr	r1, [pc, r1]
   10e24:	ldr	r2, [pc, #48]	; 10e5c <__assert_fail@plt+0x21c>
   10e28:	ldr	r2, [pc, r2]
   10e2c:	blx	r2
   10e30:	mov	sp, fp
   10e34:	pop	{fp, pc}
   10e38:	andeq	r8, r1, r4, lsr #6
   10e3c:	andeq	r8, r1, r0, asr #6
   10e40:	andeq	r8, r1, r8, lsl #6
   10e44:	andeq	r8, r1, r0, lsl #7
   10e48:	andeq	r8, r1, r0, asr #6
   10e4c:	andeq	r8, r1, r0, ror #6
   10e50:	muleq	r1, r0, r3
   10e54:	andeq	r8, r1, r8, lsr #5
   10e58:	andeq	r8, r1, r4, ror r2
   10e5c:	strdeq	r8, [r1], -ip
   10e60:	muleq	r1, r4, r2
   10e64:	muleq	r1, r8, r2
   10e68:	andeq	r8, r1, r8, lsl r3
   10e6c:	andeq	r8, r1, r8, asr #6
   10e70:	andeq	r8, r1, r0, asr r3
   10e74:	push	{fp, lr}
   10e78:	mov	fp, sp
   10e7c:	sub	sp, sp, #8
   10e80:	ldr	r2, [pc, #36]	; 10eac <__assert_fail@plt+0x26c>
   10e84:	ldr	r2, [pc, r2]
   10e88:	str	r0, [sp, #4]
   10e8c:	str	r1, [sp]
   10e90:	ldr	r0, [sp, #4]
   10e94:	ldr	r0, [r0, #8]
   10e98:	ldr	r1, [sp]
   10e9c:	ldr	r1, [r1, #8]
   10ea0:	blx	r2
   10ea4:	mov	sp, fp
   10ea8:	pop	{fp, pc}
   10eac:	andeq	r8, r1, ip, ror r2
   10eb0:	push	{fp, lr}
   10eb4:	mov	fp, sp
   10eb8:	sub	sp, sp, #16
   10ebc:	str	r0, [sp, #8]
   10ec0:	str	r1, [sp, #4]
   10ec4:	ldr	r0, [sp, #8]
   10ec8:	ldr	r0, [r0, #12]
   10ecc:	ldr	r1, [sp, #4]
   10ed0:	ldr	r1, [r1, #12]
   10ed4:	cmp	r0, r1
   10ed8:	beq	10ef8 <__assert_fail@plt+0x2b8>
   10edc:	ldr	r0, [sp, #4]
   10ee0:	ldr	r0, [r0, #12]
   10ee4:	ldr	r1, [sp, #8]
   10ee8:	ldr	r1, [r1, #12]
   10eec:	sub	r0, r0, r1
   10ef0:	str	r0, [fp, #-4]
   10ef4:	b	10f08 <__assert_fail@plt+0x2c8>
   10ef8:	ldr	r0, [sp, #8]
   10efc:	ldr	r1, [sp, #4]
   10f00:	bl	10e74 <__assert_fail@plt+0x234>
   10f04:	str	r0, [fp, #-4]
   10f08:	ldr	r0, [fp, #-4]
   10f0c:	mov	sp, fp
   10f10:	pop	{fp, pc}
   10f14:	push	{fp, lr}
   10f18:	mov	fp, sp
   10f1c:	sub	sp, sp, #24
   10f20:	ldr	r0, [pc, #192]	; 10fe8 <__assert_fail@plt+0x3a8>
   10f24:	add	r0, pc, r0
   10f28:	movw	r1, #0
   10f2c:	str	r1, [fp, #-8]
   10f30:	bl	10acc <printf@plt>
   10f34:	movw	r1, #0
   10f38:	str	r1, [fp, #-4]
   10f3c:	str	r0, [sp, #12]
   10f40:	ldr	r0, [pc, #164]	; 10fec <__assert_fail@plt+0x3ac>
   10f44:	ldr	r0, [pc, r0]
   10f48:	ldr	r1, [fp, #-4]
   10f4c:	movw	r2, #8052	; 0x1f74
   10f50:	add	r0, r0, r2
   10f54:	ldr	r0, [r0]
   10f58:	cmp	r1, r0
   10f5c:	bge	10fcc <__assert_fail@plt+0x38c>
   10f60:	ldr	r0, [pc, #140]	; 10ff4 <__assert_fail@plt+0x3b4>
   10f64:	ldr	r0, [pc, r0]
   10f68:	movw	r1, #8048	; 0x1f70
   10f6c:	ldr	r1, [r0, r1]!
   10f70:	ldr	r2, [fp, #-4]
   10f74:	ldr	r1, [r1, r2, lsl #2]
   10f78:	ldr	r2, [r1, #8]
   10f7c:	ldr	r1, [r1, #12]
   10f80:	ldr	r3, [pc, #112]	; 10ff8 <__assert_fail@plt+0x3b8>
   10f84:	add	r3, pc, r3
   10f88:	str	r0, [sp, #8]
   10f8c:	mov	r0, r3
   10f90:	bl	10acc <printf@plt>
   10f94:	ldr	r1, [sp, #8]
   10f98:	ldr	r1, [r1]
   10f9c:	ldr	r2, [fp, #-4]
   10fa0:	add	r1, r1, r2, lsl #2
   10fa4:	ldr	r1, [r1]
   10fa8:	ldr	r1, [r1, #12]
   10fac:	ldr	r2, [fp, #-8]
   10fb0:	add	r1, r2, r1
   10fb4:	str	r1, [fp, #-8]
   10fb8:	str	r0, [sp, #4]
   10fbc:	ldr	r0, [fp, #-4]
   10fc0:	add	r0, r0, #1
   10fc4:	str	r0, [fp, #-4]
   10fc8:	b	10f40 <__assert_fail@plt+0x300>
   10fcc:	ldr	r0, [pc, #28]	; 10ff0 <__assert_fail@plt+0x3b0>
   10fd0:	add	r0, pc, r0
   10fd4:	ldr	r1, [fp, #-8]
   10fd8:	bl	10acc <printf@plt>
   10fdc:	str	r0, [sp]
   10fe0:	mov	sp, fp
   10fe4:	pop	{fp, pc}
   10fe8:	andeq	r3, r0, ip, ror #29
   10fec:	andeq	r8, r1, r0, asr #3
   10ff0:	andeq	r3, r0, r5, asr lr
   10ff4:	andeq	r8, r1, r0, lsr #3
   10ff8:	muleq	r0, r6, lr
   10ffc:	push	{fp, lr}
   11000:	mov	fp, sp
   11004:	sub	sp, sp, #24
   11008:	ldr	r0, [pc, #228]	; 110f4 <__assert_fail@plt+0x4b4>
   1100c:	ldr	r0, [pc, r0]
   11010:	ldr	r1, [pc, #224]	; 110f8 <__assert_fail@plt+0x4b8>
   11014:	ldr	r1, [pc, r1]
   11018:	blx	r1
   1101c:	ldr	r0, [pc, #196]	; 110e8 <__assert_fail@plt+0x4a8>
   11020:	ldr	r0, [pc, r0]
   11024:	ldr	r1, [pc, #192]	; 110ec <__assert_fail@plt+0x4ac>
   11028:	ldr	r1, [pc, r1]
   1102c:	ldr	lr, [pc, #188]	; 110f0 <__assert_fail@plt+0x4b0>
   11030:	ldr	lr, [pc, lr]
   11034:	movw	r2, #8052	; 0x1f74
   11038:	add	r2, lr, r2
   1103c:	ldr	r2, [r2]
   11040:	movw	r3, #8048	; 0x1f70
   11044:	add	r3, lr, r3
   11048:	ldr	r3, [r3]
   1104c:	str	r0, [fp, #-4]
   11050:	mov	r0, r2
   11054:	str	r1, [fp, #-8]
   11058:	mov	r1, r3
   1105c:	ldr	r2, [fp, #-4]
   11060:	ldr	r3, [fp, #-8]
   11064:	blx	r3
   11068:	bl	10f14 <__assert_fail@plt+0x2d4>
   1106c:	ldr	r0, [pc, #112]	; 110e4 <__assert_fail@plt+0x4a4>
   11070:	add	r0, pc, r0
   11074:	bl	10acc <printf@plt>
   11078:	ldr	r1, [pc, #88]	; 110d8 <__assert_fail@plt+0x498>
   1107c:	ldr	r1, [pc, r1]
   11080:	ldr	r2, [pc, #84]	; 110dc <__assert_fail@plt+0x49c>
   11084:	ldr	r2, [pc, r2]
   11088:	ldr	r3, [pc, #80]	; 110e0 <__assert_fail@plt+0x4a0>
   1108c:	ldr	r3, [pc, r3]
   11090:	movw	lr, #8052	; 0x1f74
   11094:	add	lr, r3, lr
   11098:	ldr	lr, [lr]
   1109c:	movw	ip, #8048	; 0x1f70
   110a0:	add	r3, r3, ip
   110a4:	ldr	r3, [r3]
   110a8:	str	r0, [sp, #12]
   110ac:	mov	r0, lr
   110b0:	str	r1, [sp, #8]
   110b4:	mov	r1, r3
   110b8:	ldr	r3, [sp, #8]
   110bc:	str	r2, [sp, #4]
   110c0:	mov	r2, r3
   110c4:	ldr	ip, [sp, #4]
   110c8:	blx	ip
   110cc:	bl	10f14 <__assert_fail@plt+0x2d4>
   110d0:	mov	sp, fp
   110d4:	pop	{fp, pc}
   110d8:	andeq	r8, r1, r4, lsr #1
   110dc:	andeq	r8, r1, r8, lsr r0
   110e0:	andeq	r8, r1, r8, ror r0
   110e4:	andeq	r3, r0, r3, asr #27
   110e8:	strdeq	r8, [r1], -ip
   110ec:	muleq	r1, r4, r0
   110f0:	ldrdeq	r8, [r1], -r4
   110f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   110f8:	strheq	r8, [r1], -r4
   110fc:	push	{fp, lr}
   11100:	mov	fp, sp
   11104:	sub	sp, sp, #24
   11108:	ldr	r2, [pc, #156]	; 111ac <__assert_fail@plt+0x56c>
   1110c:	add	r2, pc, r2
   11110:	ldr	r3, [pc, #152]	; 111b0 <__assert_fail@plt+0x570>
   11114:	ldr	r3, [pc, r3]
   11118:	movw	ip, #0
   1111c:	str	ip, [fp, #-4]
   11120:	str	r0, [fp, #-8]
   11124:	str	r1, [sp, #12]
   11128:	ldr	r1, [sp, #12]
   1112c:	sub	r0, fp, #8
   11130:	str	r3, [sp, #4]
   11134:	mov	r3, ip
   11138:	ldr	ip, [sp, #4]
   1113c:	blx	ip
   11140:	ldr	r0, [fp, #-8]
   11144:	cmp	r0, #0
   11148:	bne	11160 <__assert_fail@plt+0x520>
   1114c:	ldr	r0, [pc, #100]	; 111b8 <__assert_fail@plt+0x578>
   11150:	add	r0, pc, r0
   11154:	ldr	r1, [pc, #96]	; 111bc <__assert_fail@plt+0x57c>
   11158:	ldr	r1, [pc, r1]
   1115c:	blx	r1
   11160:	movw	r0, #0
   11164:	str	r0, [sp, #8]
   11168:	ldr	r0, [sp, #8]
   1116c:	ldr	r1, [fp, #-8]
   11170:	cmp	r0, r1
   11174:	bge	1119c <__assert_fail@plt+0x55c>
   11178:	ldr	r0, [sp, #12]
   1117c:	ldr	r1, [sp, #8]
   11180:	add	r0, r0, r1, lsl #2
   11184:	ldr	r0, [r0]
   11188:	bl	10d40 <__assert_fail@plt+0x100>
   1118c:	ldr	r0, [sp, #8]
   11190:	add	r0, r0, #1
   11194:	str	r0, [sp, #8]
   11198:	b	11168 <__assert_fail@plt+0x528>
   1119c:	bl	10ffc <__assert_fail@plt+0x3bc>
   111a0:	ldr	lr, [pc, #12]	; 111b4 <__assert_fail@plt+0x574>
   111a4:	ldr	lr, [pc, lr]
   111a8:	blx	lr
   111ac:	andeq	r3, r0, sl, lsr #26
   111b0:			; <UNDEFINED> instruction: 0x00017fb8
   111b4:	andeq	r7, r1, r0, asr pc
   111b8:	andeq	r3, r0, sl, lsl #26
   111bc:	andeq	r7, r1, ip, asr #30
   111c0:	sub	sp, sp, #4
   111c4:	str	r0, [sp]
   111c8:	ldr	r0, [sp]
   111cc:	movw	r1, #0
   111d0:	str	r1, [r0, #4]
   111d4:	ldr	r0, [sp]
   111d8:	str	r1, [r0]
   111dc:	ldr	r0, [sp]
   111e0:	str	r1, [r0, #8]
   111e4:	ldr	r0, [sp]
   111e8:	str	r1, [r0, #12]
   111ec:	add	sp, sp, #4
   111f0:	bx	lr
   111f4:	push	{fp, lr}
   111f8:	mov	fp, sp
   111fc:	sub	sp, sp, #8
   11200:	str	r0, [sp, #4]
   11204:	str	r1, [sp]
   11208:	ldr	r0, [sp, #4]
   1120c:	ldr	r2, [sp]
   11210:	ldr	r1, [sp, #4]
   11214:	ldr	r3, [r1]
   11218:	movw	r1, #0
   1121c:	bl	11228 <__assert_fail@plt+0x5e8>
   11220:	mov	sp, fp
   11224:	pop	{fp, pc}
   11228:	push	{fp, lr}
   1122c:	mov	fp, sp
   11230:	sub	sp, sp, #16
   11234:	str	r0, [fp, #-4]
   11238:	str	r1, [sp, #8]
   1123c:	str	r2, [sp, #4]
   11240:	str	r3, [sp]
   11244:	ldr	r0, [sp, #8]
   11248:	ldr	r1, [sp, #4]
   1124c:	str	r0, [r1]
   11250:	ldr	r0, [sp]
   11254:	ldr	r1, [sp, #4]
   11258:	str	r0, [r1, #4]
   1125c:	ldr	r0, [sp, #8]
   11260:	movw	r1, #0
   11264:	cmp	r0, r1
   11268:	beq	1127c <__assert_fail@plt+0x63c>
   1126c:	ldr	r0, [sp, #4]
   11270:	ldr	r1, [sp, #8]
   11274:	str	r0, [r1, #4]
   11278:	b	11288 <__assert_fail@plt+0x648>
   1127c:	ldr	r0, [sp, #4]
   11280:	ldr	r1, [fp, #-4]
   11284:	str	r0, [r1]
   11288:	ldr	r0, [sp]
   1128c:	movw	r1, #0
   11290:	cmp	r0, r1
   11294:	beq	112a8 <__assert_fail@plt+0x668>
   11298:	ldr	r0, [sp, #4]
   1129c:	ldr	r1, [sp]
   112a0:	str	r0, [r1]
   112a4:	b	112b4 <__assert_fail@plt+0x674>
   112a8:	ldr	r0, [sp, #4]
   112ac:	ldr	r1, [fp, #-4]
   112b0:	str	r0, [r1, #4]
   112b4:	ldr	r0, [fp, #-4]
   112b8:	bl	1143c <__assert_fail@plt+0x7fc>
   112bc:	ldr	r0, [fp, #-4]
   112c0:	ldr	lr, [r0, #12]
   112c4:	add	lr, lr, #1
   112c8:	str	lr, [r0, #12]
   112cc:	mov	sp, fp
   112d0:	pop	{fp, pc}
   112d4:	push	{fp, lr}
   112d8:	mov	fp, sp
   112dc:	sub	sp, sp, #8
   112e0:	str	r0, [sp, #4]
   112e4:	str	r1, [sp]
   112e8:	ldr	r0, [sp, #4]
   112ec:	ldr	r1, [sp, #4]
   112f0:	ldr	r1, [r1, #4]
   112f4:	ldr	r2, [sp]
   112f8:	movw	r3, #0
   112fc:	bl	11228 <__assert_fail@plt+0x5e8>
   11300:	mov	sp, fp
   11304:	pop	{fp, pc}
   11308:	push	{fp, lr}
   1130c:	mov	fp, sp
   11310:	sub	sp, sp, #16
   11314:	str	r0, [fp, #-4]
   11318:	str	r1, [sp, #8]
   1131c:	str	r2, [sp, #4]
   11320:	ldr	r0, [fp, #-4]
   11324:	ldr	r1, [sp, #4]
   11328:	ldr	r1, [r1]
   1132c:	ldr	r2, [sp, #8]
   11330:	ldr	r3, [sp, #4]
   11334:	bl	11228 <__assert_fail@plt+0x5e8>
   11338:	mov	sp, fp
   1133c:	pop	{fp, pc}
   11340:	push	{fp, lr}
   11344:	mov	fp, sp
   11348:	sub	sp, sp, #16
   1134c:	str	r0, [fp, #-4]
   11350:	str	r1, [sp, #8]
   11354:	str	r2, [sp, #4]
   11358:	ldr	r0, [fp, #-4]
   1135c:	ldr	r1, [sp, #8]
   11360:	ldr	r2, [sp, #4]
   11364:	ldr	r3, [sp, #8]
   11368:	ldr	r3, [r3, #4]
   1136c:	bl	11228 <__assert_fail@plt+0x5e8>
   11370:	mov	sp, fp
   11374:	pop	{fp, pc}
   11378:	push	{fp, lr}
   1137c:	mov	fp, sp
   11380:	sub	sp, sp, #8
   11384:	str	r0, [sp, #4]
   11388:	str	r1, [sp]
   1138c:	ldr	r0, [sp]
   11390:	ldr	r0, [r0]
   11394:	movw	r1, #0
   11398:	cmp	r0, r1
   1139c:	beq	113b8 <__assert_fail@plt+0x778>
   113a0:	ldr	r0, [sp]
   113a4:	ldr	r0, [r0, #4]
   113a8:	ldr	r1, [sp]
   113ac:	ldr	r1, [r1]
   113b0:	str	r0, [r1, #4]
   113b4:	b	113c8 <__assert_fail@plt+0x788>
   113b8:	ldr	r0, [sp]
   113bc:	ldr	r0, [r0, #4]
   113c0:	ldr	r1, [sp, #4]
   113c4:	str	r0, [r1]
   113c8:	ldr	r0, [sp]
   113cc:	ldr	r0, [r0, #4]
   113d0:	movw	r1, #0
   113d4:	cmp	r0, r1
   113d8:	beq	113f4 <__assert_fail@plt+0x7b4>
   113dc:	ldr	r0, [sp]
   113e0:	ldr	r0, [r0]
   113e4:	ldr	r1, [sp]
   113e8:	ldr	r1, [r1, #4]
   113ec:	str	r0, [r1]
   113f0:	b	11404 <__assert_fail@plt+0x7c4>
   113f4:	ldr	r0, [sp]
   113f8:	ldr	r0, [r0]
   113fc:	ldr	r1, [sp, #4]
   11400:	str	r0, [r1, #4]
   11404:	ldr	r0, [sp]
   11408:	movw	r1, #0
   1140c:	str	r1, [r0, #4]
   11410:	ldr	r0, [sp]
   11414:	str	r1, [r0]
   11418:	ldr	r0, [sp, #4]
   1141c:	bl	1143c <__assert_fail@plt+0x7fc>
   11420:	ldr	r0, [sp, #4]
   11424:	ldr	r1, [r0, #12]
   11428:	mvn	lr, #0
   1142c:	add	r1, r1, lr
   11430:	str	r1, [r0, #12]
   11434:	mov	sp, fp
   11438:	pop	{fp, pc}
   1143c:	push	{fp, lr}
   11440:	mov	fp, sp
   11444:	sub	sp, sp, #8
   11448:	str	r0, [sp, #4]
   1144c:	ldr	r0, [sp, #4]
   11450:	ldr	r0, [r0, #8]
   11454:	movw	r1, #0
   11458:	cmp	r0, r1
   1145c:	beq	11478 <__assert_fail@plt+0x838>
   11460:	ldr	r0, [sp, #4]
   11464:	ldr	r0, [r0, #8]
   11468:	bl	10ae4 <free@plt>
   1146c:	ldr	r0, [sp, #4]
   11470:	movw	lr, #0
   11474:	str	lr, [r0, #8]
   11478:	mov	sp, fp
   1147c:	pop	{fp, pc}
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	sub	sp, sp, #16
   1148c:	str	r0, [fp, #-4]
   11490:	movw	r0, #0
   11494:	str	r0, [sp, #4]
   11498:	ldr	r1, [fp, #-4]
   1149c:	ldr	r1, [r1, #8]
   114a0:	cmp	r1, r0
   114a4:	bne	114b8 <__assert_fail@plt+0x878>
   114a8:	ldr	r0, [fp, #-4]
   114ac:	ldr	r0, [r0, #12]
   114b0:	cmp	r0, #0
   114b4:	bne	114bc <__assert_fail@plt+0x87c>
   114b8:	b	11534 <__assert_fail@plt+0x8f4>
   114bc:	ldr	r0, [pc, #120]	; 1153c <__assert_fail@plt+0x8fc>
   114c0:	ldr	r0, [pc, r0]
   114c4:	ldr	r1, [fp, #-4]
   114c8:	ldr	r1, [r1, #12]
   114cc:	str	r0, [sp]
   114d0:	mov	r0, r1
   114d4:	movw	r1, #4
   114d8:	ldr	r2, [sp]
   114dc:	blx	r2
   114e0:	ldr	r1, [fp, #-4]
   114e4:	str	r0, [r1, #8]
   114e8:	ldr	r0, [fp, #-4]
   114ec:	ldr	r0, [r0]
   114f0:	str	r0, [sp, #8]
   114f4:	ldr	r0, [sp, #8]
   114f8:	movw	r1, #0
   114fc:	cmp	r0, r1
   11500:	beq	11534 <__assert_fail@plt+0x8f4>
   11504:	ldr	r0, [sp, #8]
   11508:	ldr	r1, [fp, #-4]
   1150c:	ldr	r1, [r1, #8]
   11510:	ldr	r2, [sp, #4]
   11514:	add	r3, r2, #1
   11518:	str	r3, [sp, #4]
   1151c:	add	r1, r1, r2, lsl #2
   11520:	str	r0, [r1]
   11524:	ldr	r0, [sp, #8]
   11528:	ldr	r0, [r0, #4]
   1152c:	str	r0, [sp, #8]
   11530:	b	114f4 <__assert_fail@plt+0x8b4>
   11534:	mov	sp, fp
   11538:	pop	{fp, pc}
   1153c:	andeq	r7, r1, ip, asr #24
   11540:	push	{fp, lr}
   11544:	mov	fp, sp
   11548:	sub	sp, sp, #16
   1154c:	str	r0, [fp, #-4]
   11550:	str	r1, [sp, #8]
   11554:	ldr	r0, [fp, #-4]
   11558:	ldr	r0, [r0]
   1155c:	movw	r1, #0
   11560:	cmp	r0, r1
   11564:	beq	1159c <__assert_fail@plt+0x95c>
   11568:	ldr	r0, [fp, #-4]
   1156c:	ldr	r0, [r0]
   11570:	str	r0, [sp, #4]
   11574:	ldr	r0, [fp, #-4]
   11578:	ldr	r1, [sp, #4]
   1157c:	bl	11378 <__assert_fail@plt+0x738>
   11580:	ldr	r0, [sp, #8]
   11584:	ldr	r1, [sp, #4]
   11588:	str	r0, [sp]
   1158c:	mov	r0, r1
   11590:	ldr	r1, [sp]
   11594:	blx	r1
   11598:	b	11554 <__assert_fail@plt+0x914>
   1159c:	mov	sp, fp
   115a0:	pop	{fp, pc}
   115a4:	push	{fp, lr}
   115a8:	mov	fp, sp
   115ac:	sub	sp, sp, #16
   115b0:	str	r0, [fp, #-4]
   115b4:	str	r1, [sp, #8]
   115b8:	str	r2, [sp, #4]
   115bc:	ldr	r0, [fp, #-4]
   115c0:	cmp	r0, #2
   115c4:	bge	115cc <__assert_fail@plt+0x98c>
   115c8:	b	115fc <__assert_fail@plt+0x9bc>
   115cc:	ldr	r0, [pc, #48]	; 11604 <__assert_fail@plt+0x9c4>
   115d0:	add	r0, pc, r0
   115d4:	ldr	r1, [pc, #44]	; 11608 <__assert_fail@plt+0x9c8>
   115d8:	add	r1, pc, r1
   115dc:	ldr	r2, [sp, #8]
   115e0:	str	r2, [r1]
   115e4:	ldr	r1, [sp, #4]
   115e8:	str	r1, [r0]
   115ec:	ldr	r0, [fp, #-4]
   115f0:	sub	r1, r0, #1
   115f4:	movw	r0, #0
   115f8:	bl	1160c <__assert_fail@plt+0x9cc>
   115fc:	mov	sp, fp
   11600:	pop	{fp, pc}
   11604:	andeq	r7, r1, r0, lsl #23
   11608:	andeq	r7, r1, r4, ror fp
   1160c:	push	{fp, lr}
   11610:	mov	fp, sp
   11614:	sub	sp, sp, #40	; 0x28
   11618:	str	r0, [fp, #-4]
   1161c:	str	r1, [fp, #-8]
   11620:	ldr	r0, [fp, #-4]
   11624:	str	r0, [fp, #-12]
   11628:	ldr	r0, [fp, #-8]
   1162c:	str	r0, [fp, #-16]
   11630:	ldr	r0, [pc, #500]	; 1182c <__assert_fail@plt+0xbec>
   11634:	ldr	r0, [pc, r0]
   11638:	ldr	r1, [fp, #-12]
   1163c:	add	r0, r0, r1, lsl #2
   11640:	ldr	r0, [r0]
   11644:	str	r0, [sp, #20]
   11648:	ldr	r0, [fp, #-12]
   1164c:	ldr	r1, [fp, #-16]
   11650:	cmp	r0, r1
   11654:	bge	117c0 <__assert_fail@plt+0xb80>
   11658:	b	1165c <__assert_fail@plt+0xa1c>
   1165c:	ldr	r0, [fp, #-12]
   11660:	ldr	r1, [fp, #-16]
   11664:	cmp	r0, r1
   11668:	movw	r0, #0
   1166c:	str	r0, [sp, #16]
   11670:	bge	116b8 <__assert_fail@plt+0xa78>
   11674:	ldr	r0, [pc, #436]	; 11830 <__assert_fail@plt+0xbf0>
   11678:	ldr	r0, [pc, r0]
   1167c:	ldr	r1, [sp, #20]
   11680:	ldr	r2, [pc, #428]	; 11834 <__assert_fail@plt+0xbf4>
   11684:	ldr	r2, [pc, r2]
   11688:	ldr	r3, [fp, #-16]
   1168c:	add	r2, r2, r3, lsl #2
   11690:	ldr	r2, [r2]
   11694:	str	r0, [sp, #12]
   11698:	mov	r0, r1
   1169c:	mov	r1, r2
   116a0:	ldr	r2, [sp, #12]
   116a4:	blx	r2
   116a8:	cmp	r0, #0
   116ac:	movw	r0, #0
   116b0:	movlt	r0, #1
   116b4:	str	r0, [sp, #16]
   116b8:	ldr	r0, [sp, #16]
   116bc:	tst	r0, #1
   116c0:	beq	116d8 <__assert_fail@plt+0xa98>
   116c4:	ldr	r0, [fp, #-16]
   116c8:	mvn	r1, #0
   116cc:	add	r0, r0, r1
   116d0:	str	r0, [fp, #-16]
   116d4:	b	1165c <__assert_fail@plt+0xa1c>
   116d8:	ldr	r0, [fp, #-12]
   116dc:	ldr	r1, [fp, #-16]
   116e0:	cmp	r0, r1
   116e4:	beq	1170c <__assert_fail@plt+0xacc>
   116e8:	ldr	r0, [pc, #328]	; 11838 <__assert_fail@plt+0xbf8>
   116ec:	ldr	r0, [pc, r0]
   116f0:	ldr	r1, [fp, #-16]
   116f4:	ldr	r1, [r0, r1, lsl #2]
   116f8:	ldr	r2, [fp, #-12]
   116fc:	add	r3, r2, #1
   11700:	str	r3, [fp, #-12]
   11704:	add	r0, r0, r2, lsl #2
   11708:	str	r1, [r0]
   1170c:	b	11710 <__assert_fail@plt+0xad0>
   11710:	ldr	r0, [fp, #-12]
   11714:	ldr	r1, [fp, #-16]
   11718:	cmp	r0, r1
   1171c:	movw	r0, #0
   11720:	str	r0, [sp, #8]
   11724:	bge	1176c <__assert_fail@plt+0xb2c>
   11728:	ldr	r0, [pc, #268]	; 1183c <__assert_fail@plt+0xbfc>
   1172c:	ldr	r0, [pc, r0]
   11730:	ldr	r1, [sp, #20]
   11734:	ldr	r2, [pc, #260]	; 11840 <__assert_fail@plt+0xc00>
   11738:	ldr	r2, [pc, r2]
   1173c:	ldr	r3, [fp, #-12]
   11740:	add	r2, r2, r3, lsl #2
   11744:	ldr	r2, [r2]
   11748:	str	r0, [sp, #4]
   1174c:	mov	r0, r1
   11750:	mov	r1, r2
   11754:	ldr	r2, [sp, #4]
   11758:	blx	r2
   1175c:	cmp	r0, #0
   11760:	movw	r0, #0
   11764:	movgt	r0, #1
   11768:	str	r0, [sp, #8]
   1176c:	ldr	r0, [sp, #8]
   11770:	tst	r0, #1
   11774:	beq	11788 <__assert_fail@plt+0xb48>
   11778:	ldr	r0, [fp, #-12]
   1177c:	add	r0, r0, #1
   11780:	str	r0, [fp, #-12]
   11784:	b	11710 <__assert_fail@plt+0xad0>
   11788:	ldr	r0, [fp, #-12]
   1178c:	ldr	r1, [fp, #-16]
   11790:	cmp	r0, r1
   11794:	beq	117bc <__assert_fail@plt+0xb7c>
   11798:	ldr	r0, [pc, #164]	; 11844 <__assert_fail@plt+0xc04>
   1179c:	ldr	r0, [pc, r0]
   117a0:	ldr	r1, [fp, #-12]
   117a4:	ldr	r1, [r0, r1, lsl #2]
   117a8:	ldr	r2, [fp, #-16]
   117ac:	sub	r3, r2, #1
   117b0:	str	r3, [fp, #-16]
   117b4:	add	r0, r0, r2, lsl #2
   117b8:	str	r1, [r0]
   117bc:	b	11648 <__assert_fail@plt+0xa08>
   117c0:	ldr	r0, [sp, #20]
   117c4:	ldr	r1, [pc, #124]	; 11848 <__assert_fail@plt+0xc08>
   117c8:	ldr	r1, [pc, r1]
   117cc:	ldr	r2, [fp, #-16]
   117d0:	add	r1, r1, r2, lsl #2
   117d4:	str	r0, [r1]
   117d8:	ldr	r0, [fp, #-4]
   117dc:	ldr	r1, [fp, #-16]
   117e0:	mvn	r2, #0
   117e4:	add	r1, r1, r2
   117e8:	str	r1, [fp, #-16]
   117ec:	cmp	r0, r1
   117f0:	bge	11800 <__assert_fail@plt+0xbc0>
   117f4:	ldr	r0, [fp, #-4]
   117f8:	ldr	r1, [fp, #-16]
   117fc:	bl	1160c <__assert_fail@plt+0x9cc>
   11800:	ldr	r0, [fp, #-12]
   11804:	add	r0, r0, #1
   11808:	str	r0, [fp, #-12]
   1180c:	ldr	r1, [fp, #-8]
   11810:	cmp	r0, r1
   11814:	bge	11824 <__assert_fail@plt+0xbe4>
   11818:	ldr	r0, [fp, #-12]
   1181c:	ldr	r1, [fp, #-8]
   11820:	bl	1160c <__assert_fail@plt+0x9cc>
   11824:	mov	sp, fp
   11828:	pop	{fp, pc}
   1182c:	andeq	r7, r1, r8, lsl fp
   11830:	ldrdeq	r7, [r1], -r8
   11834:	andeq	r7, r1, r8, asr #21
   11838:	andeq	r7, r1, r0, ror #20
   1183c:	andeq	r7, r1, r4, lsr #20
   11840:	andeq	r7, r1, r4, lsl sl
   11844:			; <UNDEFINED> instruction: 0x000179b0
   11848:	andeq	r7, r1, r4, lsl #19
   1184c:	push	{fp, lr}
   11850:	mov	fp, sp
   11854:	sub	sp, sp, #16
   11858:	str	r0, [fp, #-4]
   1185c:	movw	r0, #0
   11860:	strh	r0, [fp, #-6]
   11864:	ldrsh	r0, [fp, #-6]
   11868:	movw	r1, #503	; 0x1f7
   1186c:	cmp	r0, r1
   11870:	bge	118ac <__assert_fail@plt+0xc6c>
   11874:	ldr	r0, [pc, #92]	; 118d8 <__assert_fail@plt+0xc98>
   11878:	ldr	r0, [pc, r0]
   1187c:	ldr	r1, [fp, #-4]
   11880:	ldrsh	r2, [fp, #-6]
   11884:	add	r1, r1, r2, lsl #4
   11888:	str	r0, [sp, #4]
   1188c:	mov	r0, r1
   11890:	ldr	r1, [sp, #4]
   11894:	blx	r1
   11898:	ldrh	r0, [fp, #-6]
   1189c:	movw	r1, #1
   118a0:	add	r0, r0, r1
   118a4:	strh	r0, [fp, #-6]
   118a8:	b	11864 <__assert_fail@plt+0xc24>
   118ac:	ldr	r0, [fp, #-4]
   118b0:	movw	r1, #8048	; 0x1f70
   118b4:	add	r0, r0, r1
   118b8:	movw	r1, #0
   118bc:	str	r1, [r0]
   118c0:	ldr	r0, [fp, #-4]
   118c4:	movw	r2, #8052	; 0x1f74
   118c8:	add	r0, r0, r2
   118cc:	str	r1, [r0]
   118d0:	mov	sp, fp
   118d4:	pop	{fp, pc}
   118d8:	andeq	r7, r1, r4, lsl #17
   118dc:	push	{fp, lr}
   118e0:	mov	fp, sp
   118e4:	sub	sp, sp, #24
   118e8:	str	r0, [fp, #-4]
   118ec:	str	r1, [fp, #-8]
   118f0:	ldr	r0, [fp, #-4]
   118f4:	ldr	r1, [fp, #-8]
   118f8:	str	r0, [sp, #8]
   118fc:	mov	r0, r1
   11900:	bl	11980 <__assert_fail@plt+0xd40>
   11904:	mov	r1, r0
   11908:	ldr	lr, [sp, #8]
   1190c:	add	r0, lr, r0, lsl #4
   11910:	ldr	r0, [r0]
   11914:	str	r0, [sp, #12]
   11918:	str	r1, [sp, #4]
   1191c:	ldr	r0, [sp, #12]
   11920:	movw	r1, #0
   11924:	cmp	r0, r1
   11928:	movw	r0, #0
   1192c:	str	r0, [sp]
   11930:	beq	11954 <__assert_fail@plt+0xd14>
   11934:	ldr	r0, [fp, #-8]
   11938:	ldr	r1, [sp, #12]
   1193c:	ldr	r1, [r1, #8]
   11940:	bl	10ac0 <strcmp@plt>
   11944:	cmp	r0, #0
   11948:	movw	r0, #0
   1194c:	movne	r0, #1
   11950:	str	r0, [sp]
   11954:	ldr	r0, [sp]
   11958:	tst	r0, #1
   1195c:	beq	11974 <__assert_fail@plt+0xd34>
   11960:	b	11964 <__assert_fail@plt+0xd24>
   11964:	ldr	r0, [sp, #12]
   11968:	ldr	r0, [r0, #4]
   1196c:	str	r0, [sp, #12]
   11970:	b	1191c <__assert_fail@plt+0xcdc>
   11974:	ldr	r0, [sp, #12]
   11978:	mov	sp, fp
   1197c:	pop	{fp, pc}
   11980:	sub	sp, sp, #16
   11984:	str	r0, [sp, #12]
   11988:	ldr	r0, [sp, #12]
   1198c:	str	r0, [sp, #8]
   11990:	movw	r0, #0
   11994:	str	r0, [sp]
   11998:	str	r0, [sp, #4]
   1199c:	ldr	r0, [sp, #8]
   119a0:	ldr	r1, [sp, #4]
   119a4:	add	r0, r0, r1
   119a8:	ldrsb	r0, [r0]
   119ac:	cmp	r0, #0
   119b0:	beq	119e0 <__assert_fail@plt+0xda0>
   119b4:	ldr	r0, [sp, #8]
   119b8:	ldr	r1, [sp, #4]
   119bc:	add	r0, r0, r1
   119c0:	ldrb	r0, [r0]
   119c4:	ldr	r1, [sp]
   119c8:	add	r0, r1, r0
   119cc:	str	r0, [sp]
   119d0:	ldr	r0, [sp, #4]
   119d4:	add	r0, r0, #1
   119d8:	str	r0, [sp, #4]
   119dc:	b	1199c <__assert_fail@plt+0xd5c>
   119e0:	ldr	r0, [sp]
   119e4:	movw	r1, #20065	; 0x4e61
   119e8:	movt	r1, #33354	; 0x824a
   119ec:	smmla	r1, r0, r1, r0
   119f0:	asr	r2, r1, #8
   119f4:	add	r1, r2, r1, lsr #31
   119f8:	movw	r2, #503	; 0x1f7
   119fc:	mls	r0, r1, r2, r0
   11a00:	sxth	r0, r0
   11a04:	add	sp, sp, #16
   11a08:	bx	lr
   11a0c:	push	{fp, lr}
   11a10:	mov	fp, sp
   11a14:	sub	sp, sp, #24
   11a18:	ldr	r2, [pc, #112]	; 11a90 <__assert_fail@plt+0xe50>
   11a1c:	ldr	r2, [pc, r2]
   11a20:	str	r0, [fp, #-4]
   11a24:	str	r1, [fp, #-8]
   11a28:	ldr	r0, [fp, #-4]
   11a2c:	ldr	r1, [fp, #-8]
   11a30:	ldr	r1, [r1, #8]
   11a34:	str	r0, [sp, #12]
   11a38:	mov	r0, r1
   11a3c:	str	r2, [sp, #8]
   11a40:	bl	11980 <__assert_fail@plt+0xd40>
   11a44:	mov	r1, r0
   11a48:	ldr	r2, [sp, #12]
   11a4c:	add	r0, r2, r0, lsl #4
   11a50:	ldr	lr, [fp, #-8]
   11a54:	str	r1, [sp, #4]
   11a58:	mov	r1, lr
   11a5c:	ldr	lr, [sp, #8]
   11a60:	blx	lr
   11a64:	ldr	r0, [fp, #-4]
   11a68:	bl	11a94 <__assert_fail@plt+0xe54>
   11a6c:	ldr	r0, [fp, #-4]
   11a70:	movw	r1, #8052	; 0x1f74
   11a74:	add	r2, r0, r1
   11a78:	ldr	r2, [r2]
   11a7c:	add	r2, r2, #1
   11a80:	add	r0, r0, r1
   11a84:	str	r2, [r0]
   11a88:	mov	sp, fp
   11a8c:	pop	{fp, pc}
   11a90:	andeq	r7, r1, r4, lsl #13
   11a94:	push	{fp, lr}
   11a98:	mov	fp, sp
   11a9c:	sub	sp, sp, #8
   11aa0:	str	r0, [sp, #4]
   11aa4:	ldr	r0, [sp, #4]
   11aa8:	movw	r1, #8048	; 0x1f70
   11aac:	add	r0, r0, r1
   11ab0:	ldr	r0, [r0]
   11ab4:	movw	r1, #0
   11ab8:	cmp	r0, r1
   11abc:	beq	11ae8 <__assert_fail@plt+0xea8>
   11ac0:	ldr	r0, [sp, #4]
   11ac4:	movw	r1, #8048	; 0x1f70
   11ac8:	add	r0, r0, r1
   11acc:	ldr	r0, [r0]
   11ad0:	bl	10ae4 <free@plt>
   11ad4:	ldr	r0, [sp, #4]
   11ad8:	movw	r1, #8048	; 0x1f70
   11adc:	add	r0, r0, r1
   11ae0:	movw	r1, #0
   11ae4:	str	r1, [r0]
   11ae8:	mov	sp, fp
   11aec:	pop	{fp, pc}
   11af0:	push	{fp, lr}
   11af4:	mov	fp, sp
   11af8:	sub	sp, sp, #24
   11afc:	ldr	r2, [pc, #116]	; 11b78 <__assert_fail@plt+0xf38>
   11b00:	ldr	r2, [pc, r2]
   11b04:	str	r0, [fp, #-4]
   11b08:	str	r1, [fp, #-8]
   11b0c:	ldr	r0, [fp, #-4]
   11b10:	ldr	r1, [fp, #-8]
   11b14:	ldr	r1, [r1, #8]
   11b18:	str	r0, [sp, #12]
   11b1c:	mov	r0, r1
   11b20:	str	r2, [sp, #8]
   11b24:	bl	11980 <__assert_fail@plt+0xd40>
   11b28:	mov	r1, r0
   11b2c:	ldr	r2, [sp, #12]
   11b30:	add	r0, r2, r0, lsl #4
   11b34:	ldr	lr, [fp, #-8]
   11b38:	str	r1, [sp, #4]
   11b3c:	mov	r1, lr
   11b40:	ldr	lr, [sp, #8]
   11b44:	blx	lr
   11b48:	ldr	r0, [fp, #-4]
   11b4c:	bl	11a94 <__assert_fail@plt+0xe54>
   11b50:	ldr	r0, [fp, #-4]
   11b54:	movw	r1, #8052	; 0x1f74
   11b58:	add	r2, r0, r1
   11b5c:	ldr	r2, [r2]
   11b60:	mvn	lr, #0
   11b64:	add	r2, r2, lr
   11b68:	add	r0, r0, r1
   11b6c:	str	r2, [r0]
   11b70:	mov	sp, fp
   11b74:	pop	{fp, pc}
   11b78:	andeq	r7, r1, r8, lsr #12
   11b7c:	push	{fp, lr}
   11b80:	mov	fp, sp
   11b84:	sub	sp, sp, #24
   11b88:	str	r0, [fp, #-4]
   11b8c:	movw	r0, #0
   11b90:	str	r0, [sp, #8]
   11b94:	ldr	r1, [fp, #-4]
   11b98:	movw	r2, #8048	; 0x1f70
   11b9c:	add	r1, r1, r2
   11ba0:	ldr	r1, [r1]
   11ba4:	cmp	r1, r0
   11ba8:	bne	11bc4 <__assert_fail@plt+0xf84>
   11bac:	ldr	r0, [fp, #-4]
   11bb0:	movw	r1, #8052	; 0x1f74
   11bb4:	add	r0, r0, r1
   11bb8:	ldr	r0, [r0]
   11bbc:	cmp	r0, #0
   11bc0:	bne	11bc8 <__assert_fail@plt+0xf88>
   11bc4:	b	11c88 <__assert_fail@plt+0x1048>
   11bc8:	ldr	r0, [pc, #192]	; 11c90 <__assert_fail@plt+0x1050>
   11bcc:	ldr	r0, [pc, r0]
   11bd0:	ldr	r1, [fp, #-4]
   11bd4:	movw	r2, #8052	; 0x1f74
   11bd8:	add	r1, r1, r2
   11bdc:	ldr	r1, [r1]
   11be0:	str	r0, [sp, #4]
   11be4:	mov	r0, r1
   11be8:	movw	r1, #4
   11bec:	ldr	r2, [sp, #4]
   11bf0:	blx	r2
   11bf4:	ldr	r1, [fp, #-4]
   11bf8:	movw	r2, #8048	; 0x1f70
   11bfc:	add	r1, r1, r2
   11c00:	str	r0, [r1]
   11c04:	movw	r0, #0
   11c08:	str	r0, [sp, #12]
   11c0c:	ldr	r0, [sp, #12]
   11c10:	movw	r1, #503	; 0x1f7
   11c14:	cmp	r0, r1
   11c18:	bge	11c88 <__assert_fail@plt+0x1048>
   11c1c:	ldr	r0, [fp, #-4]
   11c20:	ldr	r1, [sp, #12]
   11c24:	add	r0, r0, r1, lsl #4
   11c28:	ldr	r0, [r0]
   11c2c:	str	r0, [fp, #-8]
   11c30:	ldr	r0, [fp, #-8]
   11c34:	movw	r1, #0
   11c38:	cmp	r0, r1
   11c3c:	beq	11c74 <__assert_fail@plt+0x1034>
   11c40:	ldr	r0, [fp, #-8]
   11c44:	ldr	r1, [fp, #-4]
   11c48:	movw	r2, #8048	; 0x1f70
   11c4c:	ldr	r1, [r1, r2]
   11c50:	ldr	r2, [sp, #8]
   11c54:	add	r3, r2, #1
   11c58:	str	r3, [sp, #8]
   11c5c:	add	r1, r1, r2, lsl #2
   11c60:	str	r0, [r1]
   11c64:	ldr	r0, [fp, #-8]
   11c68:	ldr	r0, [r0, #4]
   11c6c:	str	r0, [fp, #-8]
   11c70:	b	11c30 <__assert_fail@plt+0xff0>
   11c74:	b	11c78 <__assert_fail@plt+0x1038>
   11c78:	ldr	r0, [sp, #12]
   11c7c:	add	r0, r0, #1
   11c80:	str	r0, [sp, #12]
   11c84:	b	11c0c <__assert_fail@plt+0xfcc>
   11c88:	mov	sp, fp
   11c8c:	pop	{fp, pc}
   11c90:	andeq	r7, r1, r0, asr #10
   11c94:	push	{fp, lr}
   11c98:	mov	fp, sp
   11c9c:	sub	sp, sp, #16
   11ca0:	str	r0, [fp, #-4]
   11ca4:	str	r1, [sp, #8]
   11ca8:	movw	r0, #0
   11cac:	strh	r0, [sp, #6]
   11cb0:	ldrsh	r0, [sp, #6]
   11cb4:	movw	r1, #503	; 0x1f7
   11cb8:	cmp	r0, r1
   11cbc:	bge	11d00 <__assert_fail@plt+0x10c0>
   11cc0:	ldr	r0, [pc, #92]	; 11d24 <__assert_fail@plt+0x10e4>
   11cc4:	ldr	r0, [pc, r0]
   11cc8:	ldr	r1, [fp, #-4]
   11ccc:	ldrsh	r2, [sp, #6]
   11cd0:	add	r1, r1, r2, lsl #4
   11cd4:	ldr	r2, [sp, #8]
   11cd8:	str	r0, [sp]
   11cdc:	mov	r0, r1
   11ce0:	mov	r1, r2
   11ce4:	ldr	r2, [sp]
   11ce8:	blx	r2
   11cec:	ldrh	r0, [sp, #6]
   11cf0:	movw	r1, #1
   11cf4:	add	r0, r0, r1
   11cf8:	strh	r0, [sp, #6]
   11cfc:	b	11cb0 <__assert_fail@plt+0x1070>
   11d00:	ldr	r0, [fp, #-4]
   11d04:	bl	11a94 <__assert_fail@plt+0xe54>
   11d08:	ldr	r0, [fp, #-4]
   11d0c:	movw	lr, #8052	; 0x1f74
   11d10:	add	r0, r0, lr
   11d14:	movw	lr, #0
   11d18:	str	lr, [r0]
   11d1c:	mov	sp, fp
   11d20:	pop	{fp, pc}
   11d24:	andeq	r7, r1, r0, ror #8
   11d28:	push	{fp, lr}
   11d2c:	mov	fp, sp
   11d30:	sub	sp, sp, #16
   11d34:	str	r0, [fp, #-4]
   11d38:	str	r1, [sp, #8]
   11d3c:	ldr	r0, [fp, #-4]
   11d40:	ldr	r1, [sp, #8]
   11d44:	bl	10ab4 <calloc@plt>
   11d48:	str	r0, [sp, #4]
   11d4c:	ldr	r0, [sp, #4]
   11d50:	movw	r1, #0
   11d54:	cmp	r0, r1
   11d58:	bne	11d68 <__assert_fail@plt+0x1128>
   11d5c:	ldr	r0, [pc, #16]	; 11d74 <__assert_fail@plt+0x1134>
   11d60:	add	r0, pc, r0
   11d64:	bl	12408 <error@@Base>
   11d68:	ldr	r0, [sp, #4]
   11d6c:	mov	sp, fp
   11d70:	pop	{fp, pc}
   11d74:	andeq	r3, r0, r2, lsl r1
   11d78:	sub	sp, sp, #20
   11d7c:	str	r0, [sp, #12]
   11d80:	str	r1, [sp, #8]
   11d84:	movw	r0, #0
   11d88:	str	r0, [sp, #4]
   11d8c:	ldr	r0, [sp, #12]
   11d90:	ldr	r1, [sp, #4]
   11d94:	add	r0, r0, r1
   11d98:	ldrb	r0, [r0]
   11d9c:	cmp	r0, #0
   11da0:	movw	r0, #0
   11da4:	str	r0, [sp]
   11da8:	beq	11ddc <__assert_fail@plt+0x119c>
   11dac:	ldr	r0, [sp, #12]
   11db0:	ldr	r1, [sp, #4]
   11db4:	add	r0, r0, r1
   11db8:	ldrb	r0, [r0]
   11dbc:	ldr	r1, [sp, #8]
   11dc0:	ldr	r2, [sp, #4]
   11dc4:	add	r1, r1, r2
   11dc8:	ldrb	r1, [r1]
   11dcc:	cmp	r0, r1
   11dd0:	movw	r0, #0
   11dd4:	moveq	r0, #1
   11dd8:	str	r0, [sp]
   11ddc:	ldr	r0, [sp]
   11de0:	tst	r0, #1
   11de4:	beq	11dfc <__assert_fail@plt+0x11bc>
   11de8:	b	11dec <__assert_fail@plt+0x11ac>
   11dec:	ldr	r0, [sp, #4]
   11df0:	add	r0, r0, #1
   11df4:	str	r0, [sp, #4]
   11df8:	b	11d8c <__assert_fail@plt+0x114c>
   11dfc:	ldr	r0, [sp, #12]
   11e00:	ldr	r1, [sp, #4]
   11e04:	add	r0, r0, r1
   11e08:	ldrb	r0, [r0]
   11e0c:	cmp	r0, #0
   11e10:	bne	11e2c <__assert_fail@plt+0x11ec>
   11e14:	ldr	r0, [sp, #8]
   11e18:	ldr	r1, [sp, #4]
   11e1c:	add	r0, r0, r1
   11e20:	ldrb	r0, [r0]
   11e24:	cmp	r0, #0
   11e28:	beq	11e6c <__assert_fail@plt+0x122c>
   11e2c:	ldr	r0, [sp, #12]
   11e30:	ldr	r1, [sp, #4]
   11e34:	add	r0, r0, r1
   11e38:	ldrb	r0, [r0]
   11e3c:	ldr	r1, [sp, #8]
   11e40:	ldr	r2, [sp, #4]
   11e44:	add	r1, r1, r2
   11e48:	ldrb	r1, [r1]
   11e4c:	cmp	r0, r1
   11e50:	movw	r0, #0
   11e54:	movlt	r0, #1
   11e58:	tst	r0, #1
   11e5c:	mvn	r0, #0
   11e60:	moveq	r0, #1
   11e64:	str	r0, [sp, #16]
   11e68:	b	11e74 <__assert_fail@plt+0x1234>
   11e6c:	movw	r0, #0
   11e70:	str	r0, [sp, #16]
   11e74:	ldr	r0, [sp, #16]
   11e78:	add	sp, sp, #20
   11e7c:	bx	lr
   11e80:	push	{fp, lr}
   11e84:	mov	fp, sp
   11e88:	sub	sp, sp, #24
   11e8c:	str	r0, [fp, #-8]
   11e90:	str	r1, [sp, #12]
   11e94:	ldr	r0, [fp, #-8]
   11e98:	movw	r1, #0
   11e9c:	cmp	r0, r1
   11ea0:	bne	11ee4 <__assert_fail@plt+0x12a4>
   11ea4:	ldr	r0, [sp, #12]
   11ea8:	ldrb	r0, [r0]
   11eac:	cmp	r0, #114	; 0x72
   11eb0:	bne	11ec8 <__assert_fail@plt+0x1288>
   11eb4:	ldr	r0, [pc, #148]	; 11f50 <__assert_fail@plt+0x1310>
   11eb8:	ldr	r0, [pc, r0]
   11ebc:	ldr	r0, [r0]
   11ec0:	str	r0, [sp, #4]
   11ec4:	b	11ed8 <__assert_fail@plt+0x1298>
   11ec8:	ldr	r0, [pc, #124]	; 11f4c <__assert_fail@plt+0x130c>
   11ecc:	ldr	r0, [pc, r0]
   11ed0:	ldr	r0, [r0]
   11ed4:	str	r0, [sp, #4]
   11ed8:	ldr	r0, [sp, #4]
   11edc:	str	r0, [fp, #-4]
   11ee0:	b	11f40 <__assert_fail@plt+0x1300>
   11ee4:	ldr	r0, [fp, #-8]
   11ee8:	ldr	r1, [sp, #12]
   11eec:	bl	10ad8 <fopen@plt>
   11ef0:	str	r0, [sp, #8]
   11ef4:	ldr	r0, [sp, #8]
   11ef8:	movw	r1, #0
   11efc:	cmp	r0, r1
   11f00:	beq	11f10 <__assert_fail@plt+0x12d0>
   11f04:	ldr	r0, [sp, #8]
   11f08:	str	r0, [fp, #-4]
   11f0c:	b	11f40 <__assert_fail@plt+0x1300>
   11f10:	ldr	r0, [sp, #12]
   11f14:	ldrb	r0, [r0]
   11f18:	cmp	r0, #119	; 0x77
   11f1c:	bne	11f30 <__assert_fail@plt+0x12f0>
   11f20:	ldr	r0, [pc, #48]	; 11f58 <__assert_fail@plt+0x1318>
   11f24:	add	r0, pc, r0
   11f28:	ldr	r1, [fp, #-8]
   11f2c:	bl	12468 <error@@Base+0x60>
   11f30:	ldr	r0, [pc, #28]	; 11f54 <__assert_fail@plt+0x1314>
   11f34:	add	r0, pc, r0
   11f38:	ldr	r1, [fp, #-8]
   11f3c:	bl	12468 <error@@Base+0x60>
   11f40:	ldr	r0, [fp, #-4]
   11f44:	mov	sp, fp
   11f48:	pop	{fp, pc}
   11f4c:	andeq	r7, r1, ip, lsr #4
   11f50:	andeq	r7, r1, r4, lsr r2
   11f54:	andeq	r2, r0, lr, ror #30
   11f58:	andeq	r2, r0, r8, ror #30
   11f5c:	push	{fp, lr}
   11f60:	mov	fp, sp
   11f64:	sub	sp, sp, #8
   11f68:	ldr	r1, [pc, #64]	; 11fb0 <__assert_fail@plt+0x1370>
   11f6c:	ldr	r1, [pc, r1]
   11f70:	str	r0, [sp, #4]
   11f74:	ldr	r0, [sp, #4]
   11f78:	ldr	r1, [r1]
   11f7c:	cmp	r0, r1
   11f80:	beq	11fa8 <__assert_fail@plt+0x1368>
   11f84:	ldr	r0, [pc, #40]	; 11fb4 <__assert_fail@plt+0x1374>
   11f88:	ldr	r0, [pc, r0]
   11f8c:	ldr	r1, [sp, #4]
   11f90:	ldr	r0, [r0]
   11f94:	cmp	r1, r0
   11f98:	beq	11fa8 <__assert_fail@plt+0x1368>
   11f9c:	ldr	r0, [sp, #4]
   11fa0:	bl	10bc8 <fclose@plt>
   11fa4:	str	r0, [sp]
   11fa8:	mov	sp, fp
   11fac:	pop	{fp, pc}
   11fb0:	andeq	r7, r1, r0, lsl #3
   11fb4:	andeq	r7, r1, r0, ror r1
   11fb8:	push	{fp, lr}
   11fbc:	mov	fp, sp
   11fc0:	sub	sp, sp, #96	; 0x60
   11fc4:	str	r0, [fp, #-4]
   11fc8:	ldr	r0, [fp, #-4]
   11fcc:	mov	r1, sp
   11fd0:	bl	14dfc <error@@Base+0x29f4>
   11fd4:	cmp	r0, #0
   11fd8:	movw	r0, #0
   11fdc:	moveq	r0, #1
   11fe0:	tst	r0, #1
   11fe4:	movw	r0, #1
   11fe8:	moveq	r0, #0
   11fec:	and	r0, r0, #255	; 0xff
   11ff0:	mov	sp, fp
   11ff4:	pop	{fp, pc}
   11ff8:	push	{fp, lr}
   11ffc:	mov	fp, sp
   12000:	sub	sp, sp, #8
   12004:	ldr	r0, [pc, #68]	; 12050 <__assert_fail@plt+0x1410>
   12008:	add	r0, pc, r0
   1200c:	ldrh	r1, [r0]
   12010:	movw	r2, #1
   12014:	add	r1, r1, r2
   12018:	strh	r1, [r0]
   1201c:	sxth	r0, r1
   12020:	bl	12054 <__assert_fail@plt+0x1414>
   12024:	ldr	r1, [pc, #32]	; 1204c <__assert_fail@plt+0x140c>
   12028:	ldr	r1, [pc, r1]
   1202c:	str	r0, [sp, #4]
   12030:	ldr	r0, [sp, #4]
   12034:	blx	r1
   12038:	ldr	r1, [sp, #4]
   1203c:	str	r0, [sp]
   12040:	mov	r0, r1
   12044:	mov	sp, fp
   12048:	pop	{fp, pc}
   1204c:	andeq	r7, r1, ip, lsl #1
   12050:	andeq	r7, r1, ip, asr #2
   12054:	push	{fp, lr}
   12058:	mov	fp, sp
   1205c:	sub	sp, sp, #128	; 0x80
   12060:	ldr	r1, [pc, #112]	; 120d8 <__assert_fail@plt+0x1498>
   12064:	ldr	r1, [pc, r1]
   12068:	ldr	r2, [pc, #108]	; 120dc <__assert_fail@plt+0x149c>
   1206c:	ldr	r2, [pc, r2]
   12070:	add	r3, sp, #26
   12074:	strh	r0, [fp, #-2]
   12078:	ldr	r2, [r2]
   1207c:	str	r3, [sp, #20]
   12080:	str	r2, [sp, #16]
   12084:	blx	r1
   12088:	ldr	r1, [pc, #68]	; 120d4 <__assert_fail@plt+0x1494>
   1208c:	add	r1, pc, r1
   12090:	ldrsh	r2, [fp, #-2]
   12094:	ldr	r3, [sp, #20]
   12098:	str	r0, [sp, #12]
   1209c:	mov	r0, r3
   120a0:	ldr	lr, [sp, #16]
   120a4:	str	r2, [sp, #8]
   120a8:	mov	r2, lr
   120ac:	ldr	r3, [sp, #12]
   120b0:	ldr	ip, [sp, #8]
   120b4:	str	ip, [sp]
   120b8:	bl	10bec <sprintf@plt>
   120bc:	add	r1, sp, #26
   120c0:	str	r0, [sp, #4]
   120c4:	mov	r0, r1
   120c8:	bl	10b14 <strdup@plt>
   120cc:	mov	sp, fp
   120d0:	pop	{fp, pc}
   120d4:	andeq	r2, r0, pc, lsr lr
   120d8:	andeq	r7, r1, ip, ror r0
   120dc:	andeq	r7, r1, r0, ror r0
   120e0:	push	{fp, lr}
   120e4:	mov	fp, sp
   120e8:	sub	sp, sp, #16
   120ec:	str	r0, [fp, #-4]
   120f0:	movw	r0, #47	; 0x2f
   120f4:	strb	r0, [fp, #-5]
   120f8:	ldr	r0, [fp, #-4]
   120fc:	bl	10ba4 <strlen@plt>
   12100:	sub	r0, r0, #1
   12104:	strh	r0, [sp, #8]
   12108:	ldrsh	r0, [sp, #8]
   1210c:	cmp	r0, #0
   12110:	movw	r0, #0
   12114:	str	r0, [sp, #4]
   12118:	blt	12140 <__assert_fail@plt+0x1500>
   1211c:	ldr	r0, [fp, #-4]
   12120:	ldrsh	r1, [sp, #8]
   12124:	add	r0, r0, r1
   12128:	ldrb	r0, [r0]
   1212c:	ldrb	r1, [fp, #-5]
   12130:	cmp	r0, r1
   12134:	movw	r0, #0
   12138:	movne	r0, #1
   1213c:	str	r0, [sp, #4]
   12140:	ldr	r0, [sp, #4]
   12144:	tst	r0, #1
   12148:	beq	12164 <__assert_fail@plt+0x1524>
   1214c:	b	12150 <__assert_fail@plt+0x1510>
   12150:	ldrh	r0, [sp, #8]
   12154:	movw	r1, #65535	; 0xffff
   12158:	add	r0, r0, r1
   1215c:	strh	r0, [sp, #8]
   12160:	b	12108 <__assert_fail@plt+0x14c8>
   12164:	ldr	r0, [fp, #-4]
   12168:	ldrsh	r1, [sp, #8]
   1216c:	add	r1, r1, #1
   12170:	add	r0, r0, r1
   12174:	mov	sp, fp
   12178:	pop	{fp, pc}
   1217c:	push	{fp, lr}
   12180:	mov	fp, sp
   12184:	sub	sp, sp, #16
   12188:	str	r0, [fp, #-4]
   1218c:	str	r1, [sp, #8]
   12190:	str	r2, [sp, #4]
   12194:	str	r3, [sp]
   12198:	ldr	r0, [sp, #8]
   1219c:	ldr	r0, [r0]
   121a0:	bl	120e0 <__assert_fail@plt+0x14a0>
   121a4:	ldr	r1, [pc, #36]	; 121d0 <__assert_fail@plt+0x1590>
   121a8:	ldr	r1, [pc, r1]
   121ac:	str	r0, [r1]
   121b0:	bl	12548 <error@@Base+0x140>
   121b4:	ldr	r0, [fp, #-4]
   121b8:	ldr	r1, [sp, #8]
   121bc:	ldr	r2, [sp, #4]
   121c0:	ldr	r3, [sp]
   121c4:	bl	121d4 <__assert_fail@plt+0x1594>
   121c8:	mov	sp, fp
   121cc:	pop	{fp, pc}
   121d0:	andeq	r6, r1, r4, lsr pc
   121d4:	push	{fp, lr}
   121d8:	mov	fp, sp
   121dc:	sub	sp, sp, #48	; 0x30
   121e0:	str	r0, [fp, #-4]
   121e4:	str	r1, [fp, #-8]
   121e8:	str	r2, [fp, #-12]
   121ec:	str	r3, [fp, #-16]
   121f0:	movw	r0, #0
   121f4:	strh	r0, [fp, #-20]	; 0xffffffec
   121f8:	ldr	r0, [fp, #-4]
   121fc:	ldr	r0, [r0]
   12200:	cmp	r0, #1
   12204:	bne	12224 <__assert_fail@plt+0x15e4>
   12208:	ldr	r0, [pc, #404]	; 123a4 <__assert_fail@plt+0x1764>
   1220c:	ldr	r0, [pc, r0]
   12210:	ldrb	r0, [r0]
   12214:	cmp	r0, #0
   12218:	beq	12224 <__assert_fail@plt+0x15e4>
   1221c:	ldr	r0, [fp, #-12]
   12220:	bl	125e4 <error@@Base+0x1dc>
   12224:	movw	r0, #1
   12228:	strh	r0, [fp, #-18]	; 0xffffffee
   1222c:	ldrsh	r0, [fp, #-18]	; 0xffffffee
   12230:	ldr	r1, [fp, #-4]
   12234:	ldr	r1, [r1]
   12238:	cmp	r0, r1
   1223c:	bge	12390 <__assert_fail@plt+0x1750>
   12240:	ldr	r0, [fp, #-8]
   12244:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12248:	add	r0, r0, r1, lsl #2
   1224c:	ldr	r0, [r0]
   12250:	ldrb	r0, [r0]
   12254:	cmp	r0, #45	; 0x2d
   12258:	bne	12358 <__assert_fail@plt+0x1718>
   1225c:	ldr	r0, [fp, #-8]
   12260:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12264:	add	r0, r0, r1, lsl #2
   12268:	ldr	r0, [r0]
   1226c:	ldrb	r0, [r0, #1]
   12270:	cmp	r0, #0
   12274:	beq	12358 <__assert_fail@plt+0x1718>
   12278:	ldr	r0, [pc, #296]	; 123a8 <__assert_fail@plt+0x1768>
   1227c:	add	r0, pc, r0
   12280:	ldr	r1, [fp, #-8]
   12284:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   12288:	ldr	r2, [r1, r2, lsl #2]!
   1228c:	ldr	r1, [r1]
   12290:	str	r0, [sp, #24]
   12294:	mov	r0, r1
   12298:	str	r2, [sp, #20]
   1229c:	bl	10ba4 <strlen@plt>
   122a0:	ldr	r1, [sp, #24]
   122a4:	str	r0, [sp, #16]
   122a8:	mov	r0, r1
   122ac:	ldr	r1, [sp, #20]
   122b0:	ldr	r2, [sp, #16]
   122b4:	bl	10c1c <strncmp@plt>
   122b8:	cmp	r0, #0
   122bc:	bne	122c8 <__assert_fail@plt+0x1688>
   122c0:	ldr	r0, [fp, #-12]
   122c4:	bl	125e4 <error@@Base+0x1dc>
   122c8:	ldr	r0, [fp, #-8]
   122cc:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122d0:	add	r0, r0, r1, lsl #2
   122d4:	ldr	r0, [r0]
   122d8:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122dc:	add	r1, r1, #1
   122e0:	ldr	r2, [fp, #-4]
   122e4:	ldr	r2, [r2]
   122e8:	cmp	r1, r2
   122ec:	str	r0, [sp, #12]
   122f0:	bge	12310 <__assert_fail@plt+0x16d0>
   122f4:	ldr	r0, [fp, #-8]
   122f8:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122fc:	add	r1, r1, #1
   12300:	add	r0, r0, r1, lsl #2
   12304:	ldr	r0, [r0]
   12308:	str	r0, [sp, #8]
   1230c:	b	1231c <__assert_fail@plt+0x16dc>
   12310:	movw	r0, #0
   12314:	str	r0, [sp, #8]
   12318:	b	1231c <__assert_fail@plt+0x16dc>
   1231c:	ldr	r0, [sp, #8]
   12320:	ldr	r2, [fp, #-16]
   12324:	ldr	r1, [sp, #12]
   12328:	str	r0, [sp, #4]
   1232c:	mov	r0, r1
   12330:	ldr	r1, [sp, #4]
   12334:	bl	12670 <error@@Base+0x268>
   12338:	sxtb	r0, r0
   1233c:	cmp	r0, #0
   12340:	beq	12354 <__assert_fail@plt+0x1714>
   12344:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12348:	movw	r1, #1
   1234c:	add	r0, r0, r1
   12350:	strh	r0, [fp, #-18]	; 0xffffffee
   12354:	b	12378 <__assert_fail@plt+0x1738>
   12358:	ldr	r0, [fp, #-8]
   1235c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12360:	ldr	r1, [r0, r1, lsl #2]
   12364:	ldrsh	r2, [fp, #-20]	; 0xffffffec
   12368:	add	r3, r2, #1
   1236c:	strh	r3, [fp, #-20]	; 0xffffffec
   12370:	add	r0, r0, r2, lsl #2
   12374:	str	r1, [r0]
   12378:	b	1237c <__assert_fail@plt+0x173c>
   1237c:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12380:	movw	r1, #1
   12384:	add	r0, r0, r1
   12388:	strh	r0, [fp, #-18]	; 0xffffffee
   1238c:	b	1222c <__assert_fail@plt+0x15ec>
   12390:	ldrsh	r0, [fp, #-20]	; 0xffffffec
   12394:	ldr	r1, [fp, #-4]
   12398:	str	r0, [r1]
   1239c:	mov	sp, fp
   123a0:	pop	{fp, pc}
   123a4:	andeq	r6, r1, ip, lsl #29
   123a8:	andeq	r2, r0, ip, ror #24
   123ac:	push	{fp, lr}
   123b0:	mov	fp, sp
   123b4:	movw	r0, #0
   123b8:	bl	123bc <__assert_fail@plt+0x177c>
   123bc:	push	{fp, lr}
   123c0:	mov	fp, sp
   123c4:	sub	sp, sp, #8
   123c8:	ldr	r1, [pc, #48]	; 12400 <__assert_fail@plt+0x17c0>
   123cc:	ldr	r1, [pc, r1]
   123d0:	str	r0, [sp, #4]
   123d4:	ldr	r0, [r1]
   123d8:	movw	r1, #0
   123dc:	cmp	r0, r1
   123e0:	beq	123f4 <__assert_fail@plt+0x17b4>
   123e4:	ldr	r0, [pc, #24]	; 12404 <__assert_fail@plt+0x17c4>
   123e8:	ldr	r0, [pc, r0]
   123ec:	ldr	r0, [r0]
   123f0:	blx	r0
   123f4:	bl	128e4 <error@@Base+0x4dc>
   123f8:	ldr	r0, [sp, #4]
   123fc:	bl	10b8c <exit@plt>
   12400:	andeq	r6, r1, r8, lsl sp
   12404:	strdeq	r6, [r1], -ip

00012408 <error@@Base>:
   12408:	push	{fp, lr}
   1240c:	mov	fp, sp
   12410:	sub	sp, sp, #8
   12414:	ldr	r1, [pc, #64]	; 1245c <error@@Base+0x54>
   12418:	add	r1, pc, r1
   1241c:	ldr	r2, [pc, #60]	; 12460 <error@@Base+0x58>
   12420:	ldr	r2, [pc, r2]
   12424:	ldr	r3, [pc, #56]	; 12464 <error@@Base+0x5c>
   12428:	ldr	r3, [pc, r3]
   1242c:	str	r0, [sp, #4]
   12430:	ldr	r0, [r3]
   12434:	ldr	r2, [r2]
   12438:	ldr	r3, [sp, #4]
   1243c:	bl	10bb0 <fprintf@plt>
   12440:	ldr	r1, [pc, #16]	; 12458 <error@@Base+0x50>
   12444:	ldr	r1, [pc, r1]
   12448:	ldr	r1, [r1]
   1244c:	str	r0, [sp]
   12450:	mov	r0, r1
   12454:	bl	123bc <__assert_fail@plt+0x177c>
   12458:	andeq	r6, r1, r4, asr #25
   1245c:	muleq	r0, lr, sl
   12460:			; <UNDEFINED> instruction: 0x00016cbc
   12464:	muleq	r1, ip, ip
   12468:	push	{fp, lr}
   1246c:	mov	fp, sp
   12470:	sub	sp, sp, #24
   12474:	ldr	r2, [pc, #88]	; 124d4 <error@@Base+0xcc>
   12478:	add	r2, pc, r2
   1247c:	ldr	r3, [pc, #84]	; 124d8 <error@@Base+0xd0>
   12480:	ldr	r3, [pc, r3]
   12484:	ldr	ip, [pc, #80]	; 124dc <error@@Base+0xd4>
   12488:	ldr	ip, [pc, ip]
   1248c:	str	r0, [fp, #-4]
   12490:	str	r1, [fp, #-8]
   12494:	ldr	r0, [ip]
   12498:	ldr	r1, [r3]
   1249c:	ldr	r3, [fp, #-4]
   124a0:	ldr	ip, [fp, #-8]
   124a4:	str	r1, [sp, #12]
   124a8:	mov	r1, r2
   124ac:	ldr	r2, [sp, #12]
   124b0:	str	ip, [sp]
   124b4:	bl	10bb0 <fprintf@plt>
   124b8:	ldr	r1, [pc, #16]	; 124d0 <error@@Base+0xc8>
   124bc:	ldr	r1, [pc, r1]
   124c0:	ldr	r1, [r1]
   124c4:	str	r0, [sp, #8]
   124c8:	mov	r0, r1
   124cc:	bl	123bc <__assert_fail@plt+0x177c>
   124d0:	andeq	r6, r1, ip, asr #24
   124d4:	andeq	r2, r0, r6, asr #20
   124d8:	andeq	r6, r1, ip, asr ip
   124dc:	andeq	r6, r1, ip, lsr ip
   124e0:	push	{fp, lr}
   124e4:	mov	fp, sp
   124e8:	sub	sp, sp, #24
   124ec:	ldr	r2, [pc, #72]	; 1253c <error@@Base+0x134>
   124f0:	add	r2, pc, r2
   124f4:	ldr	r3, [pc, #68]	; 12540 <error@@Base+0x138>
   124f8:	ldr	r3, [pc, r3]
   124fc:	ldr	ip, [pc, #64]	; 12544 <error@@Base+0x13c>
   12500:	ldr	ip, [pc, ip]
   12504:	str	r0, [fp, #-4]
   12508:	str	r1, [fp, #-8]
   1250c:	ldr	r0, [ip]
   12510:	ldr	r1, [r3]
   12514:	ldr	r3, [fp, #-4]
   12518:	ldr	ip, [fp, #-8]
   1251c:	str	r1, [sp, #12]
   12520:	mov	r1, r2
   12524:	ldr	r2, [sp, #12]
   12528:	str	ip, [sp]
   1252c:	bl	10bb0 <fprintf@plt>
   12530:	str	r0, [sp, #8]
   12534:	mov	sp, fp
   12538:	pop	{fp, pc}
   1253c:	andeq	r2, r0, lr, asr #19
   12540:	andeq	r6, r1, r4, ror #23
   12544:	andeq	r6, r1, r4, asr #23
   12548:	push	{fp, lr}
   1254c:	mov	fp, sp
   12550:	sub	sp, sp, #8
   12554:	ldr	r0, [pc, #48]	; 1258c <error@@Base+0x184>
   12558:	add	r1, pc, r0
   1255c:	movw	r0, #2
   12560:	bl	10b74 <__sysv_signal@plt>
   12564:	ldr	r1, [pc, #28]	; 12588 <error@@Base+0x180>
   12568:	add	r1, pc, r1
   1256c:	movw	lr, #15
   12570:	str	r0, [sp, #4]
   12574:	mov	r0, lr
   12578:	bl	10b74 <__sysv_signal@plt>
   1257c:	str	r0, [sp]
   12580:	mov	sp, fp
   12584:	pop	{fp, pc}
   12588:	andeq	r0, r0, r0, lsr #32
   1258c:	andeq	r0, r0, r0, lsr r0
   12590:	push	{fp, lr}
   12594:	mov	fp, sp
   12598:	sub	sp, sp, #8
   1259c:	ldr	r1, [pc, #52]	; 125d8 <error@@Base+0x1d0>
   125a0:	add	r1, pc, r1
   125a4:	str	r0, [sp, #4]
   125a8:	ldrsb	r0, [r1]
   125ac:	cmp	r0, #0
   125b0:	beq	125bc <error@@Base+0x1b4>
   125b4:	mov	sp, fp
   125b8:	pop	{fp, pc}
   125bc:	ldr	r0, [pc, #24]	; 125dc <error@@Base+0x1d4>
   125c0:	add	r0, pc, r0
   125c4:	ldr	r1, [pc, #20]	; 125e0 <error@@Base+0x1d8>
   125c8:	add	r1, pc, r1
   125cc:	movw	r2, #1
   125d0:	strb	r2, [r1]
   125d4:	bl	12408 <error@@Base>
   125d8:			; <UNDEFINED> instruction: 0x00016bb6
   125dc:	andeq	r2, r0, r9, lsl r9
   125e0:	andeq	r6, r1, lr, lsl #23
   125e4:	push	{fp, lr}
   125e8:	mov	fp, sp
   125ec:	sub	sp, sp, #16
   125f0:	ldr	r1, [pc, #100]	; 1265c <error@@Base+0x254>
   125f4:	ldr	r1, [pc, r1]
   125f8:	str	r0, [fp, #-4]
   125fc:	ldr	r0, [r1]
   12600:	movw	r1, #0
   12604:	cmp	r0, r1
   12608:	beq	12620 <error@@Base+0x218>
   1260c:	ldr	r0, [pc, #88]	; 1266c <error@@Base+0x264>
   12610:	ldr	r0, [pc, r0]
   12614:	ldr	r0, [r0]
   12618:	blx	r0
   1261c:	b	12658 <error@@Base+0x250>
   12620:	ldr	r0, [pc, #56]	; 12660 <error@@Base+0x258>
   12624:	add	r1, pc, r0
   12628:	ldr	r0, [pc, #52]	; 12664 <error@@Base+0x25c>
   1262c:	ldr	r0, [pc, r0]
   12630:	ldr	r2, [pc, #48]	; 12668 <error@@Base+0x260>
   12634:	ldr	r2, [pc, r2]
   12638:	ldr	r2, [r2]
   1263c:	ldr	r0, [r0]
   12640:	ldr	r3, [fp, #-4]
   12644:	str	r0, [sp, #8]
   12648:	mov	r0, r2
   1264c:	ldr	r2, [sp, #8]
   12650:	bl	10bb0 <fprintf@plt>
   12654:	str	r0, [sp, #4]
   12658:	bl	123ac <__assert_fail@plt+0x176c>
   1265c:			; <UNDEFINED> instruction: 0x00016ab8
   12660:	andeq	r2, r0, sl, asr #17
   12664:			; <UNDEFINED> instruction: 0x00016ab0
   12668:	muleq	r1, r0, sl
   1266c:	muleq	r1, ip, sl
   12670:	push	{fp, lr}
   12674:	mov	fp, sp
   12678:	sub	sp, sp, #32
   1267c:	str	r0, [fp, #-8]
   12680:	str	r1, [fp, #-12]
   12684:	str	r2, [sp, #16]
   12688:	ldr	r0, [sp, #16]
   1268c:	movw	r1, #0
   12690:	cmp	r0, r1
   12694:	bne	1269c <error@@Base+0x294>
   12698:	b	128b0 <error@@Base+0x4a8>
   1269c:	movw	r0, #0
   126a0:	strh	r0, [sp, #14]
   126a4:	ldr	r0, [sp, #16]
   126a8:	ldrsh	r1, [sp, #14]
   126ac:	movw	r2, #12
   126b0:	mul	r1, r1, r2
   126b4:	add	r0, r0, r1
   126b8:	ldrb	r0, [r0]
   126bc:	cmp	r0, #0
   126c0:	movw	r0, #0
   126c4:	str	r0, [sp, #8]
   126c8:	beq	126fc <error@@Base+0x2f4>
   126cc:	ldr	r0, [fp, #-8]
   126d0:	ldrb	r0, [r0, #1]
   126d4:	ldr	r1, [sp, #16]
   126d8:	ldrsh	r2, [sp, #14]
   126dc:	movw	r3, #12
   126e0:	mul	r2, r2, r3
   126e4:	add	r1, r1, r2
   126e8:	ldrb	r1, [r1]
   126ec:	cmp	r0, r1
   126f0:	movw	r0, #0
   126f4:	movne	r0, #1
   126f8:	str	r0, [sp, #8]
   126fc:	ldr	r0, [sp, #8]
   12700:	tst	r0, #1
   12704:	beq	12720 <error@@Base+0x318>
   12708:	b	1270c <error@@Base+0x304>
   1270c:	ldrh	r0, [sp, #14]
   12710:	movw	r1, #1
   12714:	add	r0, r0, r1
   12718:	strh	r0, [sp, #14]
   1271c:	b	126a4 <error@@Base+0x29c>
   12720:	ldr	r0, [sp, #16]
   12724:	ldrsh	r1, [sp, #14]
   12728:	movw	r2, #12
   1272c:	mul	r1, r1, r2
   12730:	add	r0, r0, r1
   12734:	ldrsb	r0, [r0]
   12738:	cmp	r0, #0
   1273c:	bne	12744 <error@@Base+0x33c>
   12740:	b	128b0 <error@@Base+0x4a8>
   12744:	ldr	r0, [sp, #16]
   12748:	ldrsh	r1, [sp, #14]
   1274c:	movw	r2, #12
   12750:	mul	r1, r1, r2
   12754:	add	r0, r0, r1
   12758:	ldr	r0, [r0, #4]
   1275c:	movw	r1, #0
   12760:	cmp	r0, r1
   12764:	beq	12824 <error@@Base+0x41c>
   12768:	ldr	r0, [fp, #-8]
   1276c:	ldrb	r0, [r0, #2]
   12770:	cmp	r0, #0
   12774:	bne	12788 <error@@Base+0x380>
   12778:	ldr	r0, [fp, #-12]
   1277c:	movw	r1, #0
   12780:	cmp	r0, r1
   12784:	beq	12824 <error@@Base+0x41c>
   12788:	ldr	r0, [sp, #16]
   1278c:	ldrsh	r1, [sp, #14]
   12790:	movw	r2, #12
   12794:	mul	r1, r1, r2
   12798:	add	r0, r0, r1
   1279c:	ldr	r0, [r0, #4]
   127a0:	ldr	r0, [r0]
   127a4:	movw	r1, #0
   127a8:	cmp	r0, r1
   127ac:	beq	127b4 <error@@Base+0x3ac>
   127b0:	b	128c0 <error@@Base+0x4b8>
   127b4:	ldr	r0, [fp, #-8]
   127b8:	ldrb	r0, [r0, #2]
   127bc:	cmp	r0, #0
   127c0:	beq	127d4 <error@@Base+0x3cc>
   127c4:	ldr	r0, [fp, #-8]
   127c8:	add	r0, r0, #2
   127cc:	str	r0, [sp, #4]
   127d0:	b	127dc <error@@Base+0x3d4>
   127d4:	ldr	r0, [fp, #-12]
   127d8:	str	r0, [sp, #4]
   127dc:	ldr	r0, [sp, #4]
   127e0:	ldr	r1, [sp, #16]
   127e4:	ldrsh	r2, [sp, #14]
   127e8:	movw	r3, #12
   127ec:	mul	r2, r2, r3
   127f0:	add	r1, r1, r2
   127f4:	ldr	r1, [r1, #4]
   127f8:	str	r0, [r1]
   127fc:	ldr	r0, [fp, #-8]
   12800:	ldrb	r0, [r0, #2]
   12804:	cmp	r0, #0
   12808:	movw	r0, #0
   1280c:	movne	r0, #1
   12810:	tst	r0, #1
   12814:	movw	r0, #0
   12818:	moveq	r0, #1
   1281c:	strb	r0, [fp, #-1]
   12820:	b	128d0 <error@@Base+0x4c8>
   12824:	ldr	r0, [sp, #16]
   12828:	ldrsh	r1, [sp, #14]
   1282c:	movw	r2, #12
   12830:	mul	r1, r1, r2
   12834:	add	r0, r0, r1
   12838:	ldr	r0, [r0, #8]
   1283c:	movw	r1, #0
   12840:	cmp	r0, r1
   12844:	beq	128ac <error@@Base+0x4a4>
   12848:	ldr	r0, [fp, #-8]
   1284c:	ldrsb	r0, [r0, #2]
   12850:	cmp	r0, #0
   12854:	bne	128ac <error@@Base+0x4a4>
   12858:	ldr	r0, [sp, #16]
   1285c:	ldrsh	r1, [sp, #14]
   12860:	movw	r2, #12
   12864:	mul	r1, r1, r2
   12868:	add	r0, r0, r1
   1286c:	ldr	r0, [r0, #8]
   12870:	ldrsb	r0, [r0]
   12874:	cmp	r0, #0
   12878:	beq	12880 <error@@Base+0x478>
   1287c:	b	128c0 <error@@Base+0x4b8>
   12880:	ldr	r0, [sp, #16]
   12884:	ldrsh	r1, [sp, #14]
   12888:	movw	r2, #12
   1288c:	mul	r1, r1, r2
   12890:	add	r0, r0, r1
   12894:	ldr	r0, [r0, #8]
   12898:	movw	r1, #1
   1289c:	strb	r1, [r0]
   128a0:	movw	r0, #0
   128a4:	strb	r0, [fp, #-1]
   128a8:	b	128d0 <error@@Base+0x4c8>
   128ac:	b	128b0 <error@@Base+0x4a8>
   128b0:	ldr	r0, [pc, #36]	; 128dc <error@@Base+0x4d4>
   128b4:	add	r0, pc, r0
   128b8:	ldr	r1, [fp, #-8]
   128bc:	bl	12468 <error@@Base+0x60>
   128c0:	ldr	r0, [pc, #24]	; 128e0 <error@@Base+0x4d8>
   128c4:	add	r0, pc, r0
   128c8:	ldr	r1, [fp, #-8]
   128cc:	bl	12468 <error@@Base+0x60>
   128d0:	ldrb	r0, [fp, #-1]
   128d4:	mov	sp, fp
   128d8:	pop	{fp, pc}
   128dc:	andeq	r2, r0, r9, asr #12
   128e0:	andeq	r2, r0, r8, asr #12
   128e4:	push	{fp, lr}
   128e8:	mov	fp, sp
   128ec:	sub	sp, sp, #16
   128f0:	movw	r0, #1
   128f4:	strh	r0, [fp, #-2]
   128f8:	ldr	r0, [pc, #88]	; 12958 <error@@Base+0x550>
   128fc:	add	r0, pc, r0
   12900:	ldrsh	r1, [fp, #-2]
   12904:	ldrsh	r0, [r0]
   12908:	cmp	r1, r0
   1290c:	bgt	12950 <error@@Base+0x548>
   12910:	ldrsh	r0, [fp, #-2]
   12914:	bl	12054 <__assert_fail@plt+0x1414>
   12918:	ldr	lr, [pc, #60]	; 1295c <error@@Base+0x554>
   1291c:	ldr	lr, [pc, lr]
   12920:	str	r0, [sp, #8]
   12924:	ldr	r0, [sp, #8]
   12928:	blx	lr
   1292c:	ldr	lr, [sp, #8]
   12930:	str	r0, [sp, #4]
   12934:	mov	r0, lr
   12938:	bl	10ae4 <free@plt>
   1293c:	ldrh	r0, [fp, #-2]
   12940:	movw	r1, #1
   12944:	add	r0, r0, r1
   12948:	strh	r0, [fp, #-2]
   1294c:	b	128f8 <error@@Base+0x4f0>
   12950:	mov	sp, fp
   12954:	pop	{fp, pc}
   12958:	andeq	r6, r1, r8, asr r8
   1295c:	muleq	r1, r8, r7
   12960:	sub	sp, sp, #12
   12964:	str	r0, [sp, #8]
   12968:	str	r1, [sp, #4]
   1296c:	str	r2, [sp]
   12970:	ldr	r0, [sp, #4]
   12974:	ldr	r1, [sp, #8]
   12978:	ldr	r2, [r1]
   1297c:	add	r0, r2, r0
   12980:	str	r0, [r1]
   12984:	ldr	r0, [sp]
   12988:	ldr	r1, [sp, #8]
   1298c:	ldr	r2, [r1, #4]
   12990:	add	r0, r2, r0
   12994:	str	r0, [r1, #4]
   12998:	add	sp, sp, #12
   1299c:	bx	lr
   129a0:	push	{fp, lr}
   129a4:	mov	fp, sp
   129a8:	sub	sp, sp, #32
   129ac:	ldr	ip, [pc, #160]	; 12a54 <error@@Base+0x64c>
   129b0:	ldr	ip, [pc, ip]
   129b4:	str	r0, [fp, #-4]
   129b8:	str	r1, [fp, #-8]
   129bc:	str	r2, [fp, #-12]
   129c0:	str	r3, [sp, #16]
   129c4:	ldr	r0, [fp, #-4]
   129c8:	ldr	r1, [fp, #-8]
   129cc:	blx	ip
   129d0:	str	r0, [sp, #12]
   129d4:	ldr	r0, [sp, #12]
   129d8:	movw	r1, #0
   129dc:	cmp	r0, r1
   129e0:	bne	12a38 <error@@Base+0x630>
   129e4:	ldr	r0, [pc, #112]	; 12a5c <error@@Base+0x654>
   129e8:	ldr	r0, [pc, r0]
   129ec:	movw	r1, #1
   129f0:	str	r0, [sp, #8]
   129f4:	mov	r0, r1
   129f8:	movw	r1, #20
   129fc:	ldr	r2, [sp, #8]
   12a00:	blx	r2
   12a04:	str	r0, [sp, #12]
   12a08:	ldr	r0, [fp, #-8]
   12a0c:	bl	10b14 <strdup@plt>
   12a10:	ldr	r1, [pc, #64]	; 12a58 <error@@Base+0x650>
   12a14:	ldr	r1, [pc, r1]
   12a18:	ldr	r2, [sp, #12]
   12a1c:	str	r0, [r2, #8]
   12a20:	ldr	r0, [fp, #-4]
   12a24:	ldr	r2, [sp, #12]
   12a28:	str	r1, [sp, #4]
   12a2c:	mov	r1, r2
   12a30:	ldr	r2, [sp, #4]
   12a34:	blx	r2
   12a38:	ldr	r0, [sp, #12]
   12a3c:	add	r0, r0, #12
   12a40:	ldr	r1, [fp, #-12]
   12a44:	ldr	r2, [sp, #16]
   12a48:	bl	12960 <error@@Base+0x558>
   12a4c:	mov	sp, fp
   12a50:	pop	{fp, pc}
   12a54:	andeq	r6, r1, r4, lsr #14
   12a58:	muleq	r1, r4, r6
   12a5c:	andeq	r6, r1, r4, lsr #14
   12a60:	push	{fp, lr}
   12a64:	mov	fp, sp
   12a68:	sub	sp, sp, #48	; 0x30
   12a6c:	ldr	r2, [pc, #512]	; 12c74 <error@@Base+0x86c>
   12a70:	add	r2, pc, r2
   12a74:	ldr	r3, [pc, #508]	; 12c78 <error@@Base+0x870>
   12a78:	ldr	r3, [pc, r3]
   12a7c:	str	r0, [fp, #-4]
   12a80:	str	r1, [fp, #-8]
   12a84:	ldr	r0, [fp, #-8]
   12a88:	mov	r1, r2
   12a8c:	blx	r3
   12a90:	str	r0, [fp, #-12]
   12a94:	ldr	r0, [fp, #-12]
   12a98:	bl	12c9c <error@@Base+0x894>
   12a9c:	and	r0, r0, #255	; 0xff
   12aa0:	cmp	r0, #0
   12aa4:	beq	12c00 <error@@Base+0x7f8>
   12aa8:	ldr	r0, [pc, #460]	; 12c7c <error@@Base+0x874>
   12aac:	add	r0, pc, r0
   12ab0:	ldr	r1, [pc, #456]	; 12c80 <error@@Base+0x878>
   12ab4:	add	r1, pc, r1
   12ab8:	movw	r2, #45	; 0x2d
   12abc:	bl	10c1c <strncmp@plt>
   12ac0:	cmp	r0, #0
   12ac4:	bne	12c00 <error@@Base+0x7f8>
   12ac8:	ldr	r0, [fp, #-12]
   12acc:	bl	12c9c <error@@Base+0x894>
   12ad0:	and	r0, r0, #255	; 0xff
   12ad4:	cmp	r0, #0
   12ad8:	beq	12c00 <error@@Base+0x7f8>
   12adc:	ldr	r0, [pc, #432]	; 12c94 <error@@Base+0x88c>
   12ae0:	add	r0, pc, r0
   12ae4:	ldr	r1, [pc, #428]	; 12c98 <error@@Base+0x890>
   12ae8:	add	r1, pc, r1
   12aec:	bl	10ac0 <strcmp@plt>
   12af0:	cmp	r0, #0
   12af4:	bne	12c00 <error@@Base+0x7f8>
   12af8:	ldr	r0, [fp, #-12]
   12afc:	sub	r1, fp, #16
   12b00:	bl	12cf0 <error@@Base+0x8e8>
   12b04:	and	r0, r0, #255	; 0xff
   12b08:	cmp	r0, #0
   12b0c:	beq	12c00 <error@@Base+0x7f8>
   12b10:	ldr	r0, [fp, #-12]
   12b14:	sub	r1, fp, #20
   12b18:	bl	12cf0 <error@@Base+0x8e8>
   12b1c:	and	r0, r0, #255	; 0xff
   12b20:	cmp	r0, #0
   12b24:	beq	12c00 <error@@Base+0x7f8>
   12b28:	ldr	r0, [fp, #-12]
   12b2c:	bl	12c9c <error@@Base+0x894>
   12b30:	and	r0, r0, #255	; 0xff
   12b34:	cmp	r0, #0
   12b38:	beq	12c00 <error@@Base+0x7f8>
   12b3c:	ldr	r0, [fp, #-12]
   12b40:	bl	12c9c <error@@Base+0x894>
   12b44:	and	r0, r0, #255	; 0xff
   12b48:	cmp	r0, #0
   12b4c:	beq	12c00 <error@@Base+0x7f8>
   12b50:	ldr	r0, [fp, #-4]
   12b54:	ldr	r1, [fp, #-16]
   12b58:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b5c:	bl	12960 <error@@Base+0x558>
   12b60:	ldr	r0, [fp, #-12]
   12b64:	ldr	r1, [fp, #-4]
   12b68:	add	r1, r1, #8
   12b6c:	bl	12d6c <error@@Base+0x964>
   12b70:	str	r0, [sp, #24]
   12b74:	ldr	r0, [fp, #-12]
   12b78:	ldr	r1, [fp, #-4]
   12b7c:	add	r1, r1, #416	; 0x1a0
   12b80:	bl	12d6c <error@@Base+0x964>
   12b84:	str	r0, [sp, #20]
   12b88:	ldr	r0, [fp, #-12]
   12b8c:	ldr	r1, [fp, #-4]
   12b90:	add	r1, r1, #824	; 0x338
   12b94:	bl	12d6c <error@@Base+0x964>
   12b98:	ldr	r1, [fp, #-16]
   12b9c:	cmp	r1, #0
   12ba0:	str	r0, [sp, #16]
   12ba4:	ble	12bfc <error@@Base+0x7f4>
   12ba8:	ldr	r0, [fp, #-12]
   12bac:	ldr	r1, [fp, #-4]
   12bb0:	add	r1, r1, #920	; 0x398
   12bb4:	bl	12d6c <error@@Base+0x964>
   12bb8:	ldr	r1, [sp, #24]
   12bbc:	cmp	r1, #0
   12bc0:	str	r0, [sp, #12]
   12bc4:	ble	12bd8 <error@@Base+0x7d0>
   12bc8:	ldr	r0, [fp, #-12]
   12bcc:	ldr	r1, [fp, #-4]
   12bd0:	add	r1, r1, #992	; 0x3e0
   12bd4:	bl	12e60 <error@@Base+0xa58>
   12bd8:	ldr	r0, [sp, #20]
   12bdc:	cmp	r0, #0
   12be0:	ble	12bf8 <error@@Base+0x7f0>
   12be4:	ldr	r0, [fp, #-12]
   12be8:	ldr	r1, [fp, #-4]
   12bec:	movw	r2, #9048	; 0x2358
   12bf0:	add	r1, r1, r2
   12bf4:	bl	12e60 <error@@Base+0xa58>
   12bf8:	b	12bfc <error@@Base+0x7f4>
   12bfc:	b	12c50 <error@@Base+0x848>
   12c00:	ldr	r0, [fp, #-8]
   12c04:	movw	r1, #0
   12c08:	cmp	r0, r1
   12c0c:	beq	12c1c <error@@Base+0x814>
   12c10:	ldr	r0, [fp, #-8]
   12c14:	str	r0, [sp, #8]
   12c18:	b	12c2c <error@@Base+0x824>
   12c1c:	ldr	r0, [pc, #96]	; 12c84 <error@@Base+0x87c>
   12c20:	add	r0, pc, r0
   12c24:	str	r0, [sp, #8]
   12c28:	b	12c2c <error@@Base+0x824>
   12c2c:	ldr	r0, [sp, #8]
   12c30:	ldr	r1, [pc, #80]	; 12c88 <error@@Base+0x880>
   12c34:	add	r1, pc, r1
   12c38:	ldr	r2, [pc, #76]	; 12c8c <error@@Base+0x884>
   12c3c:	ldr	r2, [pc, r2]
   12c40:	str	r0, [sp, #4]
   12c44:	mov	r0, r1
   12c48:	ldr	r1, [sp, #4]
   12c4c:	blx	r2
   12c50:	ldr	r0, [pc, #56]	; 12c90 <error@@Base+0x888>
   12c54:	ldr	r0, [pc, r0]
   12c58:	ldr	r1, [fp, #-12]
   12c5c:	str	r0, [sp]
   12c60:	mov	r0, r1
   12c64:	ldr	r1, [sp]
   12c68:	blx	r1
   12c6c:	mov	sp, fp
   12c70:	pop	{fp, pc}
   12c74:	andeq	r5, r0, r9, ror sl
   12c78:	andeq	r6, r1, r8, lsr r6
   12c7c:	andeq	r6, r1, fp, lsr #13
   12c80:	andeq	r2, r0, r9, ror #8
   12c84:	andeq	r2, r0, pc, lsr r3
   12c88:	andeq	r2, r0, r9, lsl r3
   12c8c:	ldrdeq	r6, [r1], -ip
   12c90:	andeq	r6, r1, r8, lsr r4
   12c94:	andeq	r6, r1, r7, ror r6
   12c98:			; <UNDEFINED> instruction: 0x000059bb
   12c9c:	push	{fp, lr}
   12ca0:	mov	fp, sp
   12ca4:	sub	sp, sp, #8
   12ca8:	ldr	r1, [pc, #60]	; 12cec <error@@Base+0x8e4>
   12cac:	add	r1, pc, r1
   12cb0:	str	r0, [sp, #4]
   12cb4:	ldr	r2, [sp, #4]
   12cb8:	mov	r0, r1
   12cbc:	movw	r1, #99	; 0x63
   12cc0:	bl	10afc <fgets@plt>
   12cc4:	movw	r1, #0
   12cc8:	cmp	r0, r1
   12ccc:	movw	r0, #0
   12cd0:	movne	r0, #1
   12cd4:	tst	r0, #1
   12cd8:	movw	r0, #1
   12cdc:	moveq	r0, #0
   12ce0:	and	r0, r0, #255	; 0xff
   12ce4:	mov	sp, fp
   12ce8:	pop	{fp, pc}
   12cec:	andeq	r6, r1, fp, lsr #9
   12cf0:	push	{fp, lr}
   12cf4:	mov	fp, sp
   12cf8:	sub	sp, sp, #16
   12cfc:	str	r0, [fp, #-4]
   12d00:	str	r1, [sp, #8]
   12d04:	ldr	r0, [fp, #-4]
   12d08:	bl	12c9c <error@@Base+0x894>
   12d0c:	and	r0, r0, #255	; 0xff
   12d10:	cmp	r0, #0
   12d14:	movw	r0, #0
   12d18:	str	r0, [sp, #4]
   12d1c:	beq	12d48 <error@@Base+0x940>
   12d20:	ldr	r0, [pc, #60]	; 12d64 <error@@Base+0x95c>
   12d24:	add	r0, pc, r0
   12d28:	ldr	r1, [pc, #56]	; 12d68 <error@@Base+0x960>
   12d2c:	add	r1, pc, r1
   12d30:	ldr	r2, [sp, #8]
   12d34:	bl	10bbc <__isoc99_sscanf@plt>
   12d38:	cmp	r0, #1
   12d3c:	movw	r0, #0
   12d40:	moveq	r0, #1
   12d44:	str	r0, [sp, #4]
   12d48:	ldr	r0, [sp, #4]
   12d4c:	tst	r0, #1
   12d50:	movw	r0, #1
   12d54:	moveq	r0, #0
   12d58:	and	r0, r0, #255	; 0xff
   12d5c:	mov	sp, fp
   12d60:	pop	{fp, pc}
   12d64:	andeq	r6, r1, r3, lsr r4
   12d68:	muleq	r0, lr, r2
   12d6c:	push	{fp, lr}
   12d70:	mov	fp, sp
   12d74:	sub	sp, sp, #24
   12d78:	str	r0, [fp, #-4]
   12d7c:	str	r1, [fp, #-8]
   12d80:	movw	r0, #0
   12d84:	str	r0, [sp]
   12d88:	ldr	r0, [fp, #-4]
   12d8c:	bl	12c9c <error@@Base+0x894>
   12d90:	and	r0, r0, #255	; 0xff
   12d94:	cmp	r0, #0
   12d98:	beq	12e48 <error@@Base+0xa40>
   12d9c:	ldr	r0, [fp, #-4]
   12da0:	bl	12c9c <error@@Base+0x894>
   12da4:	and	r0, r0, #255	; 0xff
   12da8:	cmp	r0, #0
   12dac:	beq	12e48 <error@@Base+0xa40>
   12db0:	b	12db4 <error@@Base+0x9ac>
   12db4:	ldr	r0, [fp, #-4]
   12db8:	add	r1, sp, #12
   12dbc:	add	r2, sp, #8
   12dc0:	bl	13518 <error@@Base+0x1110>
   12dc4:	sxtb	r0, r0
   12dc8:	cmp	r0, #0
   12dcc:	beq	12e44 <error@@Base+0xa3c>
   12dd0:	ldr	r0, [pc, #124]	; 12e54 <error@@Base+0xa4c>
   12dd4:	add	r0, pc, r0
   12dd8:	add	r0, r0, #29
   12ddc:	bl	10bf8 <atoi@plt>
   12de0:	str	r0, [sp, #4]
   12de4:	ldr	r0, [sp, #4]
   12de8:	cmp	r0, #0
   12dec:	bne	12e28 <error@@Base+0xa20>
   12df0:	ldr	r0, [pc, #96]	; 12e58 <error@@Base+0xa50>
   12df4:	add	r0, pc, r0
   12df8:	add	r0, r0, #29
   12dfc:	ldr	r1, [pc, #88]	; 12e5c <error@@Base+0xa54>
   12e00:	add	r1, pc, r1
   12e04:	bl	10ac0 <strcmp@plt>
   12e08:	cmp	r0, #0
   12e0c:	bne	12e1c <error@@Base+0xa14>
   12e10:	ldr	r0, [sp, #12]
   12e14:	str	r0, [sp]
   12e18:	b	12e24 <error@@Base+0xa1c>
   12e1c:	movw	r0, #11
   12e20:	str	r0, [sp, #4]
   12e24:	b	12e28 <error@@Base+0xa20>
   12e28:	ldr	r0, [fp, #-8]
   12e2c:	ldr	r1, [sp, #4]
   12e30:	add	r0, r0, r1, lsl #3
   12e34:	ldr	r1, [sp, #12]
   12e38:	ldr	r2, [sp, #8]
   12e3c:	bl	12960 <error@@Base+0x558>
   12e40:	b	12db4 <error@@Base+0x9ac>
   12e44:	b	12e48 <error@@Base+0xa40>
   12e48:	ldr	r0, [sp]
   12e4c:	mov	sp, fp
   12e50:	pop	{fp, pc}
   12e54:	andeq	r6, r1, r3, lsl #7
   12e58:	andeq	r6, r1, r3, ror #6
   12e5c:	andeq	r2, r0, fp, lsr #32
   12e60:	push	{fp, lr}
   12e64:	mov	fp, sp
   12e68:	sub	sp, sp, #24
   12e6c:	str	r0, [fp, #-4]
   12e70:	str	r1, [fp, #-8]
   12e74:	ldr	r0, [fp, #-4]
   12e78:	bl	12c9c <error@@Base+0x894>
   12e7c:	and	r0, r0, #255	; 0xff
   12e80:	cmp	r0, #0
   12e84:	beq	12f10 <error@@Base+0xb08>
   12e88:	ldr	r0, [fp, #-4]
   12e8c:	bl	12c9c <error@@Base+0x894>
   12e90:	and	r0, r0, #255	; 0xff
   12e94:	cmp	r0, #0
   12e98:	beq	12f10 <error@@Base+0xb08>
   12e9c:	b	12ea0 <error@@Base+0xa98>
   12ea0:	ldr	r0, [fp, #-4]
   12ea4:	add	r1, sp, #12
   12ea8:	add	r2, sp, #8
   12eac:	bl	13518 <error@@Base+0x1110>
   12eb0:	sxtb	r0, r0
   12eb4:	cmp	r0, #0
   12eb8:	beq	12f0c <error@@Base+0xb04>
   12ebc:	ldr	r0, [pc, #84]	; 12f18 <error@@Base+0xb10>
   12ec0:	add	r0, pc, r0
   12ec4:	add	r1, r0, #29
   12ec8:	ldr	r2, [pc, #76]	; 12f1c <error@@Base+0xb14>
   12ecc:	add	r2, pc, r2
   12ed0:	str	r0, [sp, #4]
   12ed4:	mov	r0, r2
   12ed8:	str	r1, [sp]
   12edc:	bl	10ba4 <strlen@plt>
   12ee0:	sub	r0, r0, #1
   12ee4:	ldr	r1, [sp, #4]
   12ee8:	add	r0, r1, r0
   12eec:	movw	r2, #0
   12ef0:	strb	r2, [r0]
   12ef4:	ldr	r0, [fp, #-8]
   12ef8:	ldr	r2, [sp, #12]
   12efc:	ldr	r3, [sp, #8]
   12f00:	ldr	r1, [sp]
   12f04:	bl	129a0 <error@@Base+0x598>
   12f08:	b	12ea0 <error@@Base+0xa98>
   12f0c:	b	12f10 <error@@Base+0xb08>
   12f10:	mov	sp, fp
   12f14:	pop	{fp, pc}
   12f18:	muleq	r1, r7, r2
   12f1c:	andeq	r6, r1, fp, lsl #5
   12f20:	push	{fp, lr}
   12f24:	mov	fp, sp
   12f28:	sub	sp, sp, #40	; 0x28
   12f2c:	ldr	r2, [pc, #532]	; 13148 <error@@Base+0xd40>
   12f30:	add	r2, pc, r2
   12f34:	ldr	r3, [pc, #528]	; 1314c <error@@Base+0xd44>
   12f38:	ldr	r3, [pc, r3]
   12f3c:	str	r0, [fp, #-4]
   12f40:	str	r1, [fp, #-8]
   12f44:	ldr	r0, [fp, #-8]
   12f48:	mov	r1, r2
   12f4c:	blx	r3
   12f50:	ldr	r1, [pc, #484]	; 1313c <error@@Base+0xd34>
   12f54:	add	r1, pc, r1
   12f58:	ldr	r2, [pc, #480]	; 13140 <error@@Base+0xd38>
   12f5c:	add	r2, pc, r2
   12f60:	ldr	r3, [pc, #476]	; 13144 <error@@Base+0xd3c>
   12f64:	add	r3, pc, r3
   12f68:	str	r0, [fp, #-12]
   12f6c:	ldr	r0, [fp, #-12]
   12f70:	bl	10bb0 <fprintf@plt>
   12f74:	ldr	r1, [pc, #444]	; 13138 <error@@Base+0xd30>
   12f78:	add	r1, pc, r1
   12f7c:	ldr	r2, [fp, #-12]
   12f80:	ldr	r3, [fp, #-4]
   12f84:	ldr	r3, [r3]
   12f88:	str	r0, [fp, #-16]
   12f8c:	mov	r0, r2
   12f90:	mov	r2, r3
   12f94:	bl	10bb0 <fprintf@plt>
   12f98:	ldr	r1, [pc, #404]	; 13134 <error@@Base+0xd2c>
   12f9c:	add	r1, pc, r1
   12fa0:	ldr	r2, [fp, #-12]
   12fa4:	ldr	r3, [fp, #-4]
   12fa8:	ldr	r3, [r3, #4]
   12fac:	str	r0, [sp, #20]
   12fb0:	mov	r0, r2
   12fb4:	mov	r2, r3
   12fb8:	bl	10bb0 <fprintf@plt>
   12fbc:	ldr	r1, [fp, #-12]
   12fc0:	ldr	r2, [fp, #-4]
   12fc4:	str	r0, [sp, #16]
   12fc8:	mov	r0, r1
   12fcc:	mov	r1, r2
   12fd0:	bl	13160 <error@@Base+0xd58>
   12fd4:	ldr	r0, [pc, #340]	; 13130 <error@@Base+0xd28>
   12fd8:	add	r0, pc, r0
   12fdc:	ldr	r1, [fp, #-12]
   12fe0:	bl	10c10 <fputs@plt>
   12fe4:	ldr	r1, [pc, #320]	; 1312c <error@@Base+0xd24>
   12fe8:	add	r3, pc, r1
   12fec:	ldr	r1, [fp, #-12]
   12ff0:	ldr	r2, [fp, #-4]
   12ff4:	add	r2, r2, #8
   12ff8:	str	r0, [sp, #12]
   12ffc:	mov	r0, r1
   13000:	mov	r1, r2
   13004:	movw	r2, #50	; 0x32
   13008:	movw	lr, #0
   1300c:	str	lr, [sp]
   13010:	movw	lr, #1
   13014:	str	lr, [sp, #4]
   13018:	bl	13208 <error@@Base+0xe00>
   1301c:	ldr	r0, [pc, #260]	; 13128 <error@@Base+0xd20>
   13020:	add	r3, pc, r0
   13024:	ldr	r0, [fp, #-12]
   13028:	ldr	r1, [fp, #-4]
   1302c:	add	r1, r1, #416	; 0x1a0
   13030:	movw	r2, #50	; 0x32
   13034:	movw	lr, #0
   13038:	str	lr, [sp]
   1303c:	movw	lr, #1
   13040:	str	lr, [sp, #4]
   13044:	bl	13208 <error@@Base+0xe00>
   13048:	ldr	r0, [pc, #212]	; 13124 <error@@Base+0xd1c>
   1304c:	add	r3, pc, r0
   13050:	ldr	r0, [fp, #-12]
   13054:	ldr	r1, [fp, #-4]
   13058:	add	r1, r1, #824	; 0x338
   1305c:	movw	r2, #10
   13060:	movw	lr, #1
   13064:	str	lr, [sp]
   13068:	str	lr, [sp, #4]
   1306c:	bl	13208 <error@@Base+0xe00>
   13070:	ldr	r0, [fp, #-4]
   13074:	ldr	r0, [r0]
   13078:	cmp	r0, #0
   1307c:	ble	13100 <error@@Base+0xcf8>
   13080:	ldr	r0, [pc, #200]	; 13150 <error@@Base+0xd48>
   13084:	add	r3, pc, r0
   13088:	ldr	r0, [fp, #-12]
   1308c:	ldr	r1, [fp, #-4]
   13090:	add	r1, r1, #920	; 0x398
   13094:	movw	r2, #8
   13098:	movw	ip, #0
   1309c:	str	ip, [sp]
   130a0:	str	ip, [sp, #4]
   130a4:	bl	13208 <error@@Base+0xe00>
   130a8:	ldr	r0, [fp, #-4]
   130ac:	ldr	r0, [r0, #8]
   130b0:	cmp	r0, #0
   130b4:	ble	130d0 <error@@Base+0xcc8>
   130b8:	ldr	r0, [pc, #148]	; 13154 <error@@Base+0xd4c>
   130bc:	add	r2, pc, r0
   130c0:	ldr	r0, [fp, #-12]
   130c4:	ldr	r1, [fp, #-4]
   130c8:	add	r1, r1, #992	; 0x3e0
   130cc:	bl	133bc <error@@Base+0xfb4>
   130d0:	ldr	r0, [fp, #-4]
   130d4:	ldr	r0, [r0, #416]	; 0x1a0
   130d8:	cmp	r0, #0
   130dc:	ble	130fc <error@@Base+0xcf4>
   130e0:	ldr	r0, [pc, #112]	; 13158 <error@@Base+0xd50>
   130e4:	add	r2, pc, r0
   130e8:	ldr	r0, [fp, #-12]
   130ec:	ldr	r1, [fp, #-4]
   130f0:	movw	r3, #9048	; 0x2358
   130f4:	add	r1, r1, r3
   130f8:	bl	133bc <error@@Base+0xfb4>
   130fc:	b	13100 <error@@Base+0xcf8>
   13100:	ldr	r0, [pc, #84]	; 1315c <error@@Base+0xd54>
   13104:	ldr	r0, [pc, r0]
   13108:	ldr	r1, [fp, #-12]
   1310c:	str	r0, [sp, #8]
   13110:	mov	r0, r1
   13114:	ldr	r1, [sp, #8]
   13118:	blx	r1
   1311c:	mov	sp, fp
   13120:	pop	{fp, pc}
   13124:	andeq	r1, r0, fp, asr pc
   13128:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   1312c:			; <UNDEFINED> instruction: 0x00001fb5
   13130:			; <UNDEFINED> instruction: 0x00001fb8
   13134:	ldrdeq	r1, [r0], -lr
   13138:	strdeq	r1, [r0], -r4
   1313c:	andeq	r2, r0, r3, lsl r0
   13140:	andeq	r1, r0, r1, asr #31
   13144:	andeq	r5, r0, pc, lsr r5
   13148:	andeq	r2, r0, r5, lsr r0
   1314c:	andeq	r6, r1, r8, ror r1
   13150:	andeq	r1, r0, sl, lsr pc
   13154:	andeq	r1, r0, r1, ror #29
   13158:	andeq	r1, r0, ip, asr #29
   1315c:	andeq	r5, r1, r8, lsl #31
   13160:	push	{fp, lr}
   13164:	mov	fp, sp
   13168:	sub	sp, sp, #16
   1316c:	str	r0, [fp, #-4]
   13170:	str	r1, [sp, #8]
   13174:	ldr	r0, [sp, #8]
   13178:	ldr	r0, [r0]
   1317c:	cmp	r0, #0
   13180:	bne	1319c <error@@Base+0xd94>
   13184:	ldr	r0, [pc, #120]	; 13204 <error@@Base+0xdfc>
   13188:	add	r0, pc, r0
   1318c:	ldr	r1, [fp, #-4]
   13190:	bl	10c10 <fputs@plt>
   13194:	str	r0, [sp, #4]
   13198:	b	131ec <error@@Base+0xde4>
   1319c:	ldr	r0, [pc, #92]	; 13200 <error@@Base+0xdf8>
   131a0:	add	r1, pc, r0
   131a4:	vldr	d16, [pc, #76]	; 131f8 <error@@Base+0xdf0>
   131a8:	ldr	r0, [fp, #-4]
   131ac:	ldr	r2, [sp, #8]
   131b0:	ldr	r2, [r2]
   131b4:	ldr	r3, [sp, #8]
   131b8:	ldr	r3, [r3, #4]
   131bc:	sub	r2, r2, r3
   131c0:	vmov	s0, r2
   131c4:	vcvt.f64.s32	d17, s0
   131c8:	vmul.f64	d16, d16, d17
   131cc:	ldr	r2, [sp, #8]
   131d0:	ldr	r2, [r2]
   131d4:	vmov	s0, r2
   131d8:	vcvt.f64.s32	d17, s0
   131dc:	vdiv.f64	d16, d16, d17
   131e0:	vmov	r2, r3, d16
   131e4:	bl	10bb0 <fprintf@plt>
   131e8:	str	r0, [sp]
   131ec:	mov	sp, fp
   131f0:	pop	{fp, pc}
   131f4:	nop	{0}
   131f8:	andeq	r0, r0, r0
   131fc:	subsmi	r0, r9, r0
   13200:	andeq	r1, r0, r7, lsr lr
   13204:	andeq	r1, r0, r6, asr #28
   13208:	push	{r4, sl, fp, lr}
   1320c:	add	fp, sp, #8
   13210:	sub	sp, sp, #40	; 0x28
   13214:	ldr	ip, [fp, #12]
   13218:	ldr	lr, [fp, #8]
   1321c:	ldr	r4, [pc, #392]	; 133ac <error@@Base+0xfa4>
   13220:	add	r4, pc, r4
   13224:	str	r0, [fp, #-12]
   13228:	str	r1, [fp, #-16]
   1322c:	strh	r2, [fp, #-18]	; 0xffffffee
   13230:	str	r3, [sp, #24]
   13234:	strb	lr, [sp, #23]
   13238:	strb	ip, [sp, #22]
   1323c:	ldr	r0, [fp, #-12]
   13240:	ldr	r2, [sp, #24]
   13244:	mov	r1, r4
   13248:	bl	10bb0 <fprintf@plt>
   1324c:	ldr	r1, [fp, #-12]
   13250:	str	r0, [sp, #16]
   13254:	mov	r0, r1
   13258:	movw	r1, #0
   1325c:	bl	1359c <error@@Base+0x1194>
   13260:	ldr	r0, [pc, #312]	; 133a0 <error@@Base+0xf98>
   13264:	add	r1, pc, r0
   13268:	ldr	r0, [pc, #308]	; 133a4 <error@@Base+0xf9c>
   1326c:	add	r0, pc, r0
   13270:	ldr	r2, [pc, #304]	; 133a8 <error@@Base+0xfa0>
   13274:	add	r2, pc, r2
   13278:	ldr	r3, [fp, #-12]
   1327c:	ldrb	ip, [sp, #23]
   13280:	cmp	ip, #0
   13284:	movw	ip, #0
   13288:	movne	ip, #1
   1328c:	tst	ip, #1
   13290:	movne	r2, r0
   13294:	mov	r0, r3
   13298:	bl	10bb0 <fprintf@plt>
   1329c:	movw	r1, #1
   132a0:	strh	r1, [sp, #20]
   132a4:	str	r0, [sp, #12]
   132a8:	ldrsh	r0, [sp, #20]
   132ac:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   132b0:	cmp	r0, r1
   132b4:	bgt	13314 <error@@Base+0xf0c>
   132b8:	ldr	r0, [fp, #-16]
   132bc:	ldrsh	r1, [sp, #20]
   132c0:	add	r0, r0, r1, lsl #3
   132c4:	ldr	r0, [r0]
   132c8:	cmp	r0, #0
   132cc:	ble	132fc <error@@Base+0xef4>
   132d0:	ldr	r0, [fp, #-12]
   132d4:	ldr	r1, [fp, #-16]
   132d8:	ldrsh	r2, [sp, #20]
   132dc:	add	r1, r1, r2, lsl #3
   132e0:	bl	1359c <error@@Base+0x1194>
   132e4:	ldr	r0, [pc, #204]	; 133b8 <error@@Base+0xfb0>
   132e8:	add	r1, pc, r0
   132ec:	ldr	r0, [fp, #-12]
   132f0:	ldrsh	r2, [sp, #20]
   132f4:	bl	10bb0 <fprintf@plt>
   132f8:	str	r0, [sp, #8]
   132fc:	b	13300 <error@@Base+0xef8>
   13300:	ldrh	r0, [sp, #20]
   13304:	movw	r1, #1
   13308:	add	r0, r0, r1
   1330c:	strh	r0, [sp, #20]
   13310:	b	132a8 <error@@Base+0xea0>
   13314:	ldrb	r0, [sp, #23]
   13318:	cmp	r0, #0
   1331c:	beq	1336c <error@@Base+0xf64>
   13320:	ldr	r0, [fp, #-16]
   13324:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   13328:	add	r1, r1, #1
   1332c:	add	r0, r0, r1, lsl #3
   13330:	ldr	r0, [r0]
   13334:	cmp	r0, #0
   13338:	ble	1336c <error@@Base+0xf64>
   1333c:	ldr	r0, [fp, #-12]
   13340:	ldr	r1, [fp, #-16]
   13344:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   13348:	add	r2, r2, #1
   1334c:	add	r1, r1, r2, lsl #3
   13350:	bl	1359c <error@@Base+0x1194>
   13354:	ldr	r0, [pc, #84]	; 133b0 <error@@Base+0xfa8>
   13358:	add	r1, pc, r0
   1335c:	ldr	r0, [fp, #-12]
   13360:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   13364:	bl	10bb0 <fprintf@plt>
   13368:	str	r0, [sp, #4]
   1336c:	ldrsb	r0, [sp, #22]
   13370:	cmp	r0, #0
   13374:	beq	13398 <error@@Base+0xf90>
   13378:	ldr	r0, [fp, #-12]
   1337c:	ldr	r1, [fp, #-16]
   13380:	bl	1359c <error@@Base+0x1194>
   13384:	ldr	r0, [pc, #40]	; 133b4 <error@@Base+0xfac>
   13388:	add	r0, pc, r0
   1338c:	ldr	r1, [fp, #-12]
   13390:	bl	10c10 <fputs@plt>
   13394:	str	r0, [sp]
   13398:	sub	sp, fp, #8
   1339c:	pop	{r4, sl, fp, pc}
   133a0:	andeq	r1, r0, sl, ror sp
   133a4:	andeq	r1, r0, r6, ror sp
   133a8:	andeq	r1, r0, r5, ror sp
   133ac:			; <UNDEFINED> instruction: 0x00001dbd
   133b0:	andeq	r1, r0, r1, lsr #25
   133b4:	andeq	r1, r0, r3, lsr #21
   133b8:	andeq	r1, r0, r8, lsl #26
   133bc:	push	{fp, lr}
   133c0:	mov	fp, sp
   133c4:	sub	sp, sp, #48	; 0x30
   133c8:	ldr	r3, [pc, #320]	; 13510 <error@@Base+0x1108>
   133cc:	ldr	r3, [pc, r3]
   133d0:	str	r0, [fp, #-4]
   133d4:	str	r1, [fp, #-8]
   133d8:	str	r2, [fp, #-12]
   133dc:	ldr	r0, [fp, #-8]
   133e0:	blx	r3
   133e4:	ldr	r0, [pc, #284]	; 13508 <error@@Base+0x1100>
   133e8:	add	r0, pc, r0
   133ec:	ldr	r1, [pc, #280]	; 1350c <error@@Base+0x1104>
   133f0:	ldr	r1, [pc, r1]
   133f4:	ldr	r2, [fp, #-8]
   133f8:	movw	r3, #8052	; 0x1f74
   133fc:	add	r2, r2, r3
   13400:	ldr	r2, [r2]
   13404:	ldr	r3, [fp, #-8]
   13408:	movw	lr, #8048	; 0x1f70
   1340c:	add	r3, r3, lr
   13410:	ldr	r3, [r3]
   13414:	str	r0, [fp, #-20]	; 0xffffffec
   13418:	mov	r0, r2
   1341c:	str	r1, [sp, #24]
   13420:	mov	r1, r3
   13424:	ldr	r2, [fp, #-20]	; 0xffffffec
   13428:	ldr	r3, [sp, #24]
   1342c:	blx	r3
   13430:	ldr	r0, [pc, #204]	; 13504 <error@@Base+0x10fc>
   13434:	add	r1, pc, r0
   13438:	ldr	r0, [fp, #-4]
   1343c:	ldr	r2, [fp, #-12]
   13440:	bl	10bb0 <fprintf@plt>
   13444:	ldr	r1, [fp, #-4]
   13448:	str	r0, [sp, #20]
   1344c:	mov	r0, r1
   13450:	movw	r1, #0
   13454:	bl	1359c <error@@Base+0x1194>
   13458:	ldr	r1, [fp, #-4]
   1345c:	movw	r0, #10
   13460:	bl	10be0 <fputc@plt>
   13464:	movw	r1, #0
   13468:	str	r1, [fp, #-16]
   1346c:	str	r0, [sp, #16]
   13470:	ldr	r0, [fp, #-16]
   13474:	ldr	r1, [fp, #-8]
   13478:	movw	r2, #8052	; 0x1f74
   1347c:	add	r1, r1, r2
   13480:	ldr	r1, [r1]
   13484:	cmp	r0, r1
   13488:	bge	134fc <error@@Base+0x10f4>
   1348c:	ldr	r0, [pc, #128]	; 13514 <error@@Base+0x110c>
   13490:	add	r1, pc, r0
   13494:	ldr	r0, [fp, #-4]
   13498:	ldr	r2, [fp, #-8]
   1349c:	movw	r3, #8048	; 0x1f70
   134a0:	ldr	r2, [r2, r3]
   134a4:	ldr	ip, [fp, #-16]
   134a8:	ldr	r2, [r2, ip, lsl #2]
   134ac:	add	r2, r2, #12
   134b0:	str	r1, [sp, #12]
   134b4:	mov	r1, r2
   134b8:	str	r3, [sp, #8]
   134bc:	bl	1359c <error@@Base+0x1194>
   134c0:	ldr	r0, [fp, #-4]
   134c4:	ldr	r1, [fp, #-8]
   134c8:	ldr	r2, [sp, #8]
   134cc:	ldr	r1, [r1, r2]
   134d0:	ldr	r3, [fp, #-16]
   134d4:	add	r1, r1, r3, lsl #2
   134d8:	ldr	r1, [r1]
   134dc:	ldr	r2, [r1, #8]
   134e0:	ldr	r1, [sp, #12]
   134e4:	bl	10bb0 <fprintf@plt>
   134e8:	str	r0, [sp, #4]
   134ec:	ldr	r0, [fp, #-16]
   134f0:	add	r0, r0, #1
   134f4:	str	r0, [fp, #-16]
   134f8:	b	13470 <error@@Base+0x1068>
   134fc:	mov	sp, fp
   13500:	pop	{fp, pc}
   13504:	andeq	r1, r0, r9, lsr #23
   13508:	andeq	r0, r0, r8, asr #4
   1350c:	andeq	r5, r1, ip, asr #25
   13510:	strdeq	r5, [r1], -ip
   13514:	andeq	r1, r0, lr, asr #22
   13518:	push	{fp, lr}
   1351c:	mov	fp, sp
   13520:	sub	sp, sp, #16
   13524:	str	r0, [fp, #-4]
   13528:	str	r1, [sp, #8]
   1352c:	str	r2, [sp, #4]
   13530:	ldr	r0, [fp, #-4]
   13534:	bl	12c9c <error@@Base+0x894>
   13538:	and	r0, r0, #255	; 0xff
   1353c:	cmp	r0, #0
   13540:	movw	r0, #0
   13544:	str	r0, [sp]
   13548:	beq	13578 <error@@Base+0x1170>
   1354c:	ldr	r0, [pc, #64]	; 13594 <error@@Base+0x118c>
   13550:	add	r0, pc, r0
   13554:	ldr	r1, [pc, #60]	; 13598 <error@@Base+0x1190>
   13558:	add	r1, pc, r1
   1355c:	ldr	r2, [sp, #8]
   13560:	ldr	r3, [sp, #4]
   13564:	bl	10bbc <__isoc99_sscanf@plt>
   13568:	cmp	r0, #2
   1356c:	movw	r0, #0
   13570:	moveq	r0, #1
   13574:	str	r0, [sp]
   13578:	ldr	r0, [sp]
   1357c:	tst	r0, #1
   13580:	movw	r0, #1
   13584:	moveq	r0, #0
   13588:	and	r0, r0, #255	; 0xff
   1358c:	mov	sp, fp
   13590:	pop	{fp, pc}
   13594:	andeq	r5, r1, r7, lsl #24
   13598:	andeq	r1, r0, lr, ror #20
   1359c:	push	{fp, lr}
   135a0:	mov	fp, sp
   135a4:	sub	sp, sp, #24
   135a8:	str	r0, [fp, #-4]
   135ac:	str	r1, [fp, #-8]
   135b0:	ldr	r0, [fp, #-8]
   135b4:	movw	r1, #0
   135b8:	cmp	r0, r1
   135bc:	beq	135fc <error@@Base+0x11f4>
   135c0:	ldr	r0, [pc, #104]	; 13630 <error@@Base+0x1228>
   135c4:	add	r1, pc, r0
   135c8:	ldr	r0, [fp, #-4]
   135cc:	ldr	r2, [fp, #-8]
   135d0:	ldr	r2, [r2]
   135d4:	ldr	r3, [fp, #-8]
   135d8:	ldr	r3, [r3, #4]
   135dc:	bl	10bb0 <fprintf@plt>
   135e0:	ldr	r1, [fp, #-4]
   135e4:	ldr	r2, [fp, #-8]
   135e8:	str	r0, [sp, #12]
   135ec:	mov	r0, r1
   135f0:	mov	r1, r2
   135f4:	bl	13160 <error@@Base+0xd58>
   135f8:	b	13610 <error@@Base+0x1208>
   135fc:	ldr	r0, [pc, #40]	; 1362c <error@@Base+0x1224>
   13600:	add	r0, pc, r0
   13604:	ldr	r1, [fp, #-4]
   13608:	bl	10c10 <fputs@plt>
   1360c:	str	r0, [sp, #8]
   13610:	ldr	r0, [pc, #28]	; 13634 <error@@Base+0x122c>
   13614:	add	r0, pc, r0
   13618:	ldr	r1, [fp, #-4]
   1361c:	bl	10c10 <fputs@plt>
   13620:	str	r0, [sp, #4]
   13624:	mov	sp, fp
   13628:	pop	{fp, pc}
   1362c:	andeq	r1, r0, sp, lsl #20
   13630:	andeq	r1, r0, lr, lsr sl
   13634:	andeq	r1, r0, r4, lsl sl
   13638:	push	{fp, lr}
   1363c:	mov	fp, sp
   13640:	sub	sp, sp, #8
   13644:	ldr	r2, [pc, #36]	; 13670 <error@@Base+0x1268>
   13648:	ldr	r2, [pc, r2]
   1364c:	str	r0, [sp, #4]
   13650:	str	r1, [sp]
   13654:	ldr	r0, [sp, #4]
   13658:	ldr	r0, [r0, #8]
   1365c:	ldr	r1, [sp]
   13660:	ldr	r1, [r1, #8]
   13664:	blx	r2
   13668:	mov	sp, fp
   1366c:	pop	{fp, pc}
   13670:			; <UNDEFINED> instruction: 0x00015ab8
   13674:	push	{fp, lr}
   13678:	mov	fp, sp
   1367c:	sub	sp, sp, #16
   13680:	str	r0, [fp, #-4]
   13684:	str	r1, [sp, #8]
   13688:	ldr	r0, [sp, #8]
   1368c:	ldr	r0, [r0]
   13690:	str	r0, [sp, #4]
   13694:	ldr	r0, [sp, #4]
   13698:	bl	136ec <error@@Base+0x12e4>
   1369c:	str	r0, [sp]
   136a0:	movw	lr, #0
   136a4:	cmp	r0, lr
   136a8:	beq	136e4 <error@@Base+0x12dc>
   136ac:	ldr	r0, [sp, #4]
   136b0:	ldr	r0, [r0, #12]
   136b4:	bl	13b1c <error@@Base+0x1714>
   136b8:	sxtb	r0, r0
   136bc:	cmp	r0, #0
   136c0:	beq	136d4 <error@@Base+0x12cc>
   136c4:	ldr	r0, [fp, #-4]
   136c8:	ldr	r1, [sp, #4]
   136cc:	ldr	r2, [sp]
   136d0:	bl	13b84 <error@@Base+0x177c>
   136d4:	ldr	r0, [sp]
   136d8:	ldr	r0, [r0, #4]
   136dc:	str	r0, [sp, #4]
   136e0:	b	13694 <error@@Base+0x128c>
   136e4:	mov	sp, fp
   136e8:	pop	{fp, pc}
   136ec:	push	{fp, lr}
   136f0:	mov	fp, sp
   136f4:	sub	sp, sp, #48	; 0x30
   136f8:	str	r0, [fp, #-8]
   136fc:	ldr	r0, [fp, #-8]
   13700:	str	r0, [sp, #28]
   13704:	add	r0, sp, #24
   13708:	str	r0, [sp, #20]
   1370c:	movw	r0, #17
   13710:	str	r0, [sp, #16]
   13714:	ldr	r0, [fp, #-8]
   13718:	movw	r1, #0
   1371c:	cmp	r0, r1
   13720:	bne	13730 <error@@Base+0x1328>
   13724:	movw	r0, #0
   13728:	str	r0, [fp, #-4]
   1372c:	b	13b10 <error@@Base+0x1708>
   13730:	b	13734 <error@@Base+0x132c>
   13734:	ldr	r0, [sp, #20]
   13738:	ldr	r0, [r0, #4]
   1373c:	movw	r1, #0
   13740:	cmp	r0, r1
   13744:	beq	13b04 <error@@Base+0x16fc>
   13748:	ldr	r0, [sp, #20]
   1374c:	bl	13c70 <error@@Base+0x1868>
   13750:	str	r0, [sp, #20]
   13754:	ldr	r0, [sp, #16]
   13758:	str	r0, [sp, #4]
   1375c:	ldr	r0, [sp, #20]
   13760:	bl	13d1c <error@@Base+0x1914>
   13764:	str	r0, [sp, #16]
   13768:	ldr	r0, [sp, #20]
   1376c:	bl	13c70 <error@@Base+0x1868>
   13770:	bl	13d1c <error@@Base+0x1914>
   13774:	str	r0, [sp, #12]
   13778:	ldr	r0, [sp, #20]
   1377c:	bl	13d64 <error@@Base+0x195c>
   13780:	bl	13d1c <error@@Base+0x1914>
   13784:	str	r0, [sp, #8]
   13788:	ldr	r0, [sp, #16]
   1378c:	cmp	r0, #1
   13790:	bne	137a4 <error@@Base+0x139c>
   13794:	ldr	r0, [sp, #12]
   13798:	cmp	r0, #2
   1379c:	bne	137a4 <error@@Base+0x139c>
   137a0:	b	13734 <error@@Base+0x132c>
   137a4:	ldr	r0, [sp, #16]
   137a8:	cmp	r0, #3
   137ac:	beq	137c8 <error@@Base+0x13c0>
   137b0:	ldr	r0, [sp, #16]
   137b4:	cmp	r0, #1
   137b8:	beq	137c8 <error@@Base+0x13c0>
   137bc:	ldr	r0, [sp, #16]
   137c0:	cmp	r0, #2
   137c4:	bne	137cc <error@@Base+0x13c4>
   137c8:	b	13b04 <error@@Base+0x16fc>
   137cc:	ldr	r0, [sp, #12]
   137d0:	cmp	r0, #3
   137d4:	beq	137f0 <error@@Base+0x13e8>
   137d8:	ldr	r0, [sp, #12]
   137dc:	cmp	r0, #1
   137e0:	beq	137f0 <error@@Base+0x13e8>
   137e4:	ldr	r0, [sp, #12]
   137e8:	cmp	r0, #2
   137ec:	bne	137f4 <error@@Base+0x13ec>
   137f0:	b	13b04 <error@@Base+0x16fc>
   137f4:	ldr	r0, [sp, #16]
   137f8:	cmp	r0, #9
   137fc:	beq	1380c <error@@Base+0x1404>
   13800:	ldr	r0, [sp, #16]
   13804:	cmp	r0, #8
   13808:	bne	13828 <error@@Base+0x1420>
   1380c:	ldr	r0, [sp, #12]
   13810:	cmp	r0, #9
   13814:	beq	13824 <error@@Base+0x141c>
   13818:	ldr	r0, [sp, #12]
   1381c:	cmp	r0, #8
   13820:	bne	13828 <error@@Base+0x1420>
   13824:	b	13734 <error@@Base+0x132c>
   13828:	ldr	r0, [sp, #16]
   1382c:	cmp	r0, #9
   13830:	beq	13840 <error@@Base+0x1438>
   13834:	ldr	r0, [sp, #16]
   13838:	cmp	r0, #8
   1383c:	bne	13880 <error@@Base+0x1478>
   13840:	ldr	r0, [sp, #12]
   13844:	cmp	r0, #13
   13848:	beq	13864 <error@@Base+0x145c>
   1384c:	ldr	r0, [sp, #12]
   13850:	cmp	r0, #12
   13854:	beq	13864 <error@@Base+0x145c>
   13858:	ldr	r0, [sp, #12]
   1385c:	cmp	r0, #10
   13860:	bne	13880 <error@@Base+0x1478>
   13864:	ldr	r0, [sp, #8]
   13868:	cmp	r0, #9
   1386c:	beq	1387c <error@@Base+0x1474>
   13870:	ldr	r0, [sp, #8]
   13874:	cmp	r0, #8
   13878:	bne	13880 <error@@Base+0x1478>
   1387c:	b	13734 <error@@Base+0x132c>
   13880:	ldr	r0, [sp, #4]
   13884:	cmp	r0, #9
   13888:	beq	13898 <error@@Base+0x1490>
   1388c:	ldr	r0, [sp, #4]
   13890:	cmp	r0, #8
   13894:	bne	138d8 <error@@Base+0x14d0>
   13898:	ldr	r0, [sp, #16]
   1389c:	cmp	r0, #13
   138a0:	beq	138bc <error@@Base+0x14b4>
   138a4:	ldr	r0, [sp, #16]
   138a8:	cmp	r0, #12
   138ac:	beq	138bc <error@@Base+0x14b4>
   138b0:	ldr	r0, [sp, #16]
   138b4:	cmp	r0, #10
   138b8:	bne	138d8 <error@@Base+0x14d0>
   138bc:	ldr	r0, [sp, #12]
   138c0:	cmp	r0, #9
   138c4:	beq	138d4 <error@@Base+0x14cc>
   138c8:	ldr	r0, [sp, #12]
   138cc:	cmp	r0, #8
   138d0:	bne	138d8 <error@@Base+0x14d0>
   138d4:	b	13734 <error@@Base+0x132c>
   138d8:	ldr	r0, [sp, #16]
   138dc:	cmp	r0, #8
   138e0:	bne	138f4 <error@@Base+0x14ec>
   138e4:	ldr	r0, [sp, #12]
   138e8:	cmp	r0, #10
   138ec:	bne	138f4 <error@@Base+0x14ec>
   138f0:	b	13734 <error@@Base+0x132c>
   138f4:	ldr	r0, [sp, #16]
   138f8:	cmp	r0, #8
   138fc:	bne	1391c <error@@Base+0x1514>
   13900:	ldr	r0, [sp, #12]
   13904:	cmp	r0, #11
   13908:	bne	1391c <error@@Base+0x1514>
   1390c:	ldr	r0, [sp, #8]
   13910:	cmp	r0, #8
   13914:	bne	1391c <error@@Base+0x1514>
   13918:	b	13734 <error@@Base+0x132c>
   1391c:	ldr	r0, [sp, #4]
   13920:	cmp	r0, #8
   13924:	bne	13944 <error@@Base+0x153c>
   13928:	ldr	r0, [sp, #16]
   1392c:	cmp	r0, #11
   13930:	bne	13944 <error@@Base+0x153c>
   13934:	ldr	r0, [sp, #12]
   13938:	cmp	r0, #8
   1393c:	bne	13944 <error@@Base+0x153c>
   13940:	b	13734 <error@@Base+0x132c>
   13944:	ldr	r0, [sp, #16]
   13948:	cmp	r0, #15
   1394c:	bne	13960 <error@@Base+0x1558>
   13950:	ldr	r0, [sp, #12]
   13954:	cmp	r0, #15
   13958:	bne	13960 <error@@Base+0x1558>
   1395c:	b	13734 <error@@Base+0x132c>
   13960:	ldr	r0, [sp, #16]
   13964:	cmp	r0, #9
   13968:	beq	13978 <error@@Base+0x1570>
   1396c:	ldr	r0, [sp, #16]
   13970:	cmp	r0, #8
   13974:	bne	13988 <error@@Base+0x1580>
   13978:	ldr	r0, [sp, #12]
   1397c:	cmp	r0, #15
   13980:	bne	13988 <error@@Base+0x1580>
   13984:	b	13734 <error@@Base+0x132c>
   13988:	ldr	r0, [sp, #16]
   1398c:	cmp	r0, #15
   13990:	bne	139b0 <error@@Base+0x15a8>
   13994:	ldr	r0, [sp, #12]
   13998:	cmp	r0, #9
   1399c:	beq	139ac <error@@Base+0x15a4>
   139a0:	ldr	r0, [sp, #12]
   139a4:	cmp	r0, #8
   139a8:	bne	139b0 <error@@Base+0x15a8>
   139ac:	b	13734 <error@@Base+0x132c>
   139b0:	ldr	r0, [sp, #4]
   139b4:	cmp	r0, #15
   139b8:	bne	139f0 <error@@Base+0x15e8>
   139bc:	ldr	r0, [sp, #16]
   139c0:	cmp	r0, #14
   139c4:	beq	139e0 <error@@Base+0x15d8>
   139c8:	ldr	r0, [sp, #16]
   139cc:	cmp	r0, #12
   139d0:	beq	139e0 <error@@Base+0x15d8>
   139d4:	ldr	r0, [sp, #16]
   139d8:	cmp	r0, #10
   139dc:	bne	139f0 <error@@Base+0x15e8>
   139e0:	ldr	r0, [sp, #12]
   139e4:	cmp	r0, #15
   139e8:	bne	139f0 <error@@Base+0x15e8>
   139ec:	b	13734 <error@@Base+0x132c>
   139f0:	ldr	r0, [sp, #16]
   139f4:	cmp	r0, #15
   139f8:	bne	13a30 <error@@Base+0x1628>
   139fc:	ldr	r0, [sp, #12]
   13a00:	cmp	r0, #14
   13a04:	beq	13a20 <error@@Base+0x1618>
   13a08:	ldr	r0, [sp, #12]
   13a0c:	cmp	r0, #12
   13a10:	beq	13a20 <error@@Base+0x1618>
   13a14:	ldr	r0, [sp, #12]
   13a18:	cmp	r0, #10
   13a1c:	bne	13a30 <error@@Base+0x1628>
   13a20:	ldr	r0, [sp, #8]
   13a24:	cmp	r0, #15
   13a28:	bne	13a30 <error@@Base+0x1628>
   13a2c:	b	13734 <error@@Base+0x132c>
   13a30:	ldr	r0, [sp, #16]
   13a34:	cmp	r0, #7
   13a38:	bne	13a4c <error@@Base+0x1644>
   13a3c:	ldr	r0, [sp, #12]
   13a40:	cmp	r0, #7
   13a44:	bne	13a4c <error@@Base+0x1644>
   13a48:	b	13734 <error@@Base+0x132c>
   13a4c:	ldr	r0, [sp, #16]
   13a50:	cmp	r0, #9
   13a54:	beq	13a88 <error@@Base+0x1680>
   13a58:	ldr	r0, [sp, #16]
   13a5c:	cmp	r0, #8
   13a60:	beq	13a88 <error@@Base+0x1680>
   13a64:	ldr	r0, [sp, #16]
   13a68:	cmp	r0, #15
   13a6c:	beq	13a88 <error@@Base+0x1680>
   13a70:	ldr	r0, [sp, #16]
   13a74:	cmp	r0, #7
   13a78:	beq	13a88 <error@@Base+0x1680>
   13a7c:	ldr	r0, [sp, #16]
   13a80:	cmp	r0, #16
   13a84:	bne	13a98 <error@@Base+0x1690>
   13a88:	ldr	r0, [sp, #12]
   13a8c:	cmp	r0, #16
   13a90:	bne	13a98 <error@@Base+0x1690>
   13a94:	b	13734 <error@@Base+0x132c>
   13a98:	ldr	r0, [sp, #16]
   13a9c:	cmp	r0, #16
   13aa0:	bne	13ae4 <error@@Base+0x16dc>
   13aa4:	ldr	r0, [sp, #12]
   13aa8:	cmp	r0, #9
   13aac:	beq	13ae0 <error@@Base+0x16d8>
   13ab0:	ldr	r0, [sp, #12]
   13ab4:	cmp	r0, #8
   13ab8:	beq	13ae0 <error@@Base+0x16d8>
   13abc:	ldr	r0, [sp, #12]
   13ac0:	cmp	r0, #15
   13ac4:	beq	13ae0 <error@@Base+0x16d8>
   13ac8:	ldr	r0, [sp, #12]
   13acc:	cmp	r0, #7
   13ad0:	beq	13ae0 <error@@Base+0x16d8>
   13ad4:	ldr	r0, [sp, #12]
   13ad8:	cmp	r0, #16
   13adc:	bne	13ae4 <error@@Base+0x16dc>
   13ae0:	b	13734 <error@@Base+0x132c>
   13ae4:	ldr	r0, [sp, #16]
   13ae8:	cmp	r0, #5
   13aec:	bne	13b00 <error@@Base+0x16f8>
   13af0:	ldr	r0, [sp, #12]
   13af4:	cmp	r0, #5
   13af8:	bne	13b00 <error@@Base+0x16f8>
   13afc:	b	13734 <error@@Base+0x132c>
   13b00:	b	13b04 <error@@Base+0x16fc>
   13b04:	ldr	r0, [sp, #20]
   13b08:	bl	13d88 <error@@Base+0x1980>
   13b0c:	str	r0, [fp, #-4]
   13b10:	ldr	r0, [fp, #-4]
   13b14:	mov	sp, fp
   13b18:	pop	{fp, pc}
   13b1c:	push	{fp, lr}
   13b20:	mov	fp, sp
   13b24:	sub	sp, sp, #16
   13b28:	str	r0, [sp, #8]
   13b2c:	ldr	r0, [sp, #8]
   13b30:	bl	10af0 <utf8proc_get_property@plt>
   13b34:	str	r0, [sp, #4]
   13b38:	ldr	r0, [sp, #4]
   13b3c:	ldrsh	r0, [r0]
   13b40:	sub	lr, r0, #1
   13b44:	cmp	lr, #12
   13b48:	str	r0, [sp]
   13b4c:	bcc	13b64 <error@@Base+0x175c>
   13b50:	b	13b54 <error@@Base+0x174c>
   13b54:	ldr	r0, [sp]
   13b58:	cmp	r0, #29
   13b5c:	bne	13b70 <error@@Base+0x1768>
   13b60:	b	13b64 <error@@Base+0x175c>
   13b64:	movw	r0, #1
   13b68:	strb	r0, [fp, #-1]
   13b6c:	b	13b78 <error@@Base+0x1770>
   13b70:	movw	r0, #0
   13b74:	strb	r0, [fp, #-1]
   13b78:	ldrb	r0, [fp, #-1]
   13b7c:	mov	sp, fp
   13b80:	pop	{fp, pc}
   13b84:	push	{fp, lr}
   13b88:	mov	fp, sp
   13b8c:	sub	sp, sp, #40	; 0x28
   13b90:	str	r0, [fp, #-4]
   13b94:	str	r1, [fp, #-8]
   13b98:	str	r2, [fp, #-12]
   13b9c:	ldr	r0, [fp, #-12]
   13ba0:	ldr	r0, [r0, #4]
   13ba4:	str	r0, [sp, #20]
   13ba8:	ldr	r0, [fp, #-8]
   13bac:	ldr	r1, [sp, #20]
   13bb0:	bl	13fb0 <error@@Base+0x1ba8>
   13bb4:	str	r0, [sp, #16]
   13bb8:	ldr	r0, [sp, #16]
   13bbc:	add	r0, r0, #1
   13bc0:	bl	10b5c <malloc@plt>
   13bc4:	str	r0, [sp, #8]
   13bc8:	ldr	r0, [sp, #8]
   13bcc:	ldr	r1, [fp, #-8]
   13bd0:	ldr	r2, [sp, #20]
   13bd4:	bl	140a4 <error@@Base+0x1c9c>
   13bd8:	ldr	r0, [pc, #96]	; 13c40 <error@@Base+0x1838>
   13bdc:	ldr	r0, [pc, r0]
   13be0:	movw	r1, #1
   13be4:	str	r0, [sp, #4]
   13be8:	mov	r0, r1
   13bec:	movw	r1, #12
   13bf0:	ldr	r2, [sp, #4]
   13bf4:	blx	r2
   13bf8:	str	r0, [fp, #-16]
   13bfc:	ldr	r0, [sp, #8]
   13c00:	bl	10bd4 <utf8proc_NFC@plt>
   13c04:	ldr	r1, [pc, #48]	; 13c3c <error@@Base+0x1834>
   13c08:	ldr	r1, [pc, r1]
   13c0c:	ldr	r2, [fp, #-16]
   13c10:	str	r0, [r2, #8]
   13c14:	ldr	r0, [fp, #-4]
   13c18:	ldr	r2, [fp, #-16]
   13c1c:	str	r1, [sp]
   13c20:	mov	r1, r2
   13c24:	ldr	r2, [sp]
   13c28:	blx	r2
   13c2c:	ldr	r0, [sp, #8]
   13c30:	bl	10ae4 <free@plt>
   13c34:	mov	sp, fp
   13c38:	pop	{fp, pc}
   13c3c:	andeq	r5, r1, r8, asr #9
   13c40:	andeq	r5, r1, r0, lsr r5
   13c44:	push	{fp, lr}
   13c48:	mov	fp, sp
   13c4c:	sub	sp, sp, #8
   13c50:	str	r0, [sp, #4]
   13c54:	ldr	r0, [sp, #4]
   13c58:	ldr	r0, [r0, #8]
   13c5c:	bl	10ae4 <free@plt>
   13c60:	ldr	r0, [sp, #4]
   13c64:	bl	10ae4 <free@plt>
   13c68:	mov	sp, fp
   13c6c:	pop	{fp, pc}
   13c70:	push	{fp, lr}
   13c74:	mov	fp, sp
   13c78:	sub	sp, sp, #16
   13c7c:	str	r0, [sp, #8]
   13c80:	ldr	r0, [sp, #8]
   13c84:	movw	r1, #0
   13c88:	cmp	r0, r1
   13c8c:	bne	13c9c <error@@Base+0x1894>
   13c90:	movw	r0, #0
   13c94:	str	r0, [fp, #-4]
   13c98:	b	13d10 <error@@Base+0x1908>
   13c9c:	b	13ca0 <error@@Base+0x1898>
   13ca0:	ldr	r0, [sp, #8]
   13ca4:	ldr	r0, [r0, #4]
   13ca8:	str	r0, [sp, #8]
   13cac:	ldr	r0, [sp, #8]
   13cb0:	movw	r1, #0
   13cb4:	cmp	r0, r1
   13cb8:	movw	r0, #0
   13cbc:	str	r0, [sp, #4]
   13cc0:	beq	13cfc <error@@Base+0x18f4>
   13cc4:	ldr	r0, [sp, #8]
   13cc8:	bl	13d1c <error@@Base+0x1914>
   13ccc:	cmp	r0, #4
   13cd0:	movw	r0, #1
   13cd4:	str	r0, [sp]
   13cd8:	beq	13cf4 <error@@Base+0x18ec>
   13cdc:	ldr	r0, [sp, #8]
   13ce0:	bl	13d1c <error@@Base+0x1914>
   13ce4:	cmp	r0, #6
   13ce8:	movw	r0, #0
   13cec:	moveq	r0, #1
   13cf0:	str	r0, [sp]
   13cf4:	ldr	r0, [sp]
   13cf8:	str	r0, [sp, #4]
   13cfc:	ldr	r0, [sp, #4]
   13d00:	tst	r0, #1
   13d04:	bne	13ca0 <error@@Base+0x1898>
   13d08:	ldr	r0, [sp, #8]
   13d0c:	str	r0, [fp, #-4]
   13d10:	ldr	r0, [fp, #-4]
   13d14:	mov	sp, fp
   13d18:	pop	{fp, pc}
   13d1c:	push	{fp, lr}
   13d20:	mov	fp, sp
   13d24:	sub	sp, sp, #8
   13d28:	str	r0, [sp]
   13d2c:	ldr	r0, [sp]
   13d30:	movw	r1, #0
   13d34:	cmp	r0, r1
   13d38:	bne	13d48 <error@@Base+0x1940>
   13d3c:	movw	r0, #18
   13d40:	str	r0, [sp, #4]
   13d44:	b	13d58 <error@@Base+0x1950>
   13d48:	ldr	r0, [sp]
   13d4c:	ldr	r0, [r0, #12]
   13d50:	bl	13e44 <error@@Base+0x1a3c>
   13d54:	str	r0, [sp, #4]
   13d58:	ldr	r0, [sp, #4]
   13d5c:	mov	sp, fp
   13d60:	pop	{fp, pc}
   13d64:	push	{fp, lr}
   13d68:	mov	fp, sp
   13d6c:	sub	sp, sp, #8
   13d70:	str	r0, [sp, #4]
   13d74:	ldr	r0, [sp, #4]
   13d78:	bl	13c70 <error@@Base+0x1868>
   13d7c:	bl	13c70 <error@@Base+0x1868>
   13d80:	mov	sp, fp
   13d84:	pop	{fp, pc}
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	sub	sp, sp, #16
   13d94:	str	r0, [sp, #8]
   13d98:	ldr	r0, [sp, #8]
   13d9c:	movw	r1, #0
   13da0:	cmp	r0, r1
   13da4:	bne	13db4 <error@@Base+0x19ac>
   13da8:	movw	r0, #0
   13dac:	str	r0, [fp, #-4]
   13db0:	b	13e38 <error@@Base+0x1a30>
   13db4:	b	13db8 <error@@Base+0x19b0>
   13db8:	ldr	r0, [sp, #8]
   13dbc:	ldr	r0, [r0, #4]
   13dc0:	movw	r1, #0
   13dc4:	cmp	r0, r1
   13dc8:	movw	r0, #0
   13dcc:	str	r0, [sp, #4]
   13dd0:	beq	13e14 <error@@Base+0x1a0c>
   13dd4:	ldr	r0, [sp, #8]
   13dd8:	ldr	r0, [r0, #4]
   13ddc:	bl	13d1c <error@@Base+0x1914>
   13de0:	cmp	r0, #4
   13de4:	movw	r0, #1
   13de8:	str	r0, [sp]
   13dec:	beq	13e0c <error@@Base+0x1a04>
   13df0:	ldr	r0, [sp, #8]
   13df4:	ldr	r0, [r0, #4]
   13df8:	bl	13d1c <error@@Base+0x1914>
   13dfc:	cmp	r0, #6
   13e00:	movw	r0, #0
   13e04:	moveq	r0, #1
   13e08:	str	r0, [sp]
   13e0c:	ldr	r0, [sp]
   13e10:	str	r0, [sp, #4]
   13e14:	ldr	r0, [sp, #4]
   13e18:	tst	r0, #1
   13e1c:	beq	13e30 <error@@Base+0x1a28>
   13e20:	ldr	r0, [sp, #8]
   13e24:	ldr	r0, [r0, #4]
   13e28:	str	r0, [sp, #8]
   13e2c:	b	13db8 <error@@Base+0x19b0>
   13e30:	ldr	r0, [sp, #8]
   13e34:	str	r0, [fp, #-4]
   13e38:	ldr	r0, [fp, #-4]
   13e3c:	mov	sp, fp
   13e40:	pop	{fp, pc}
   13e44:	push	{fp, lr}
   13e48:	mov	fp, sp
   13e4c:	sub	sp, sp, #8
   13e50:	str	r0, [sp, #4]
   13e54:	movw	r0, #1093	; 0x445
   13e58:	str	r0, [sp]
   13e5c:	ldr	r0, [sp, #4]
   13e60:	movw	r1, #0
   13e64:	movw	r2, #1092	; 0x444
   13e68:	bl	13e74 <error@@Base+0x1a6c>
   13e6c:	mov	sp, fp
   13e70:	pop	{fp, pc}
   13e74:	push	{fp, lr}
   13e78:	mov	fp, sp
   13e7c:	sub	sp, sp, #24
   13e80:	str	r0, [fp, #-8]
   13e84:	str	r1, [sp, #12]
   13e88:	str	r2, [sp, #8]
   13e8c:	ldr	r0, [sp, #8]
   13e90:	ldr	r1, [sp, #12]
   13e94:	cmp	r0, r1
   13e98:	bcs	13ea8 <error@@Base+0x1aa0>
   13e9c:	movw	r0, #0
   13ea0:	str	r0, [fp, #-4]
   13ea4:	b	13f94 <error@@Base+0x1b8c>
   13ea8:	ldr	r0, [pc, #240]	; 13fa0 <error@@Base+0x1b98>
   13eac:	add	r0, pc, r0
   13eb0:	ldr	r1, [sp, #12]
   13eb4:	ldr	r2, [sp, #8]
   13eb8:	sub	r2, r2, r1
   13ebc:	lsr	r2, r2, #1
   13ec0:	add	r1, r1, r2
   13ec4:	str	r1, [sp, #4]
   13ec8:	ldr	r1, [sp, #4]
   13ecc:	movw	r2, #12
   13ed0:	mul	r1, r1, r2
   13ed4:	add	r0, r0, r1
   13ed8:	str	r0, [sp]
   13edc:	ldr	r0, [fp, #-8]
   13ee0:	ldr	r1, [sp]
   13ee4:	ldr	r1, [r1]
   13ee8:	cmp	r0, r1
   13eec:	bcs	13f0c <error@@Base+0x1b04>
   13ef0:	ldr	r0, [fp, #-8]
   13ef4:	ldr	r1, [sp, #12]
   13ef8:	ldr	r2, [sp, #4]
   13efc:	sub	r2, r2, #1
   13f00:	bl	13e74 <error@@Base+0x1a6c>
   13f04:	str	r0, [fp, #-4]
   13f08:	b	13f94 <error@@Base+0x1b8c>
   13f0c:	ldr	r0, [fp, #-8]
   13f10:	ldr	r1, [sp]
   13f14:	ldr	r1, [r1, #4]
   13f18:	cmp	r0, r1
   13f1c:	bls	13f3c <error@@Base+0x1b34>
   13f20:	ldr	r0, [fp, #-8]
   13f24:	ldr	r1, [sp, #4]
   13f28:	add	r1, r1, #1
   13f2c:	ldr	r2, [sp, #8]
   13f30:	bl	13e74 <error@@Base+0x1a6c>
   13f34:	str	r0, [fp, #-4]
   13f38:	b	13f94 <error@@Base+0x1b8c>
   13f3c:	ldr	r0, [fp, #-8]
   13f40:	ldr	r1, [sp]
   13f44:	ldr	r1, [r1]
   13f48:	cmp	r0, r1
   13f4c:	bcc	13f68 <error@@Base+0x1b60>
   13f50:	ldr	r0, [fp, #-8]
   13f54:	ldr	r1, [sp]
   13f58:	ldr	r1, [r1, #4]
   13f5c:	cmp	r0, r1
   13f60:	bhi	13f68 <error@@Base+0x1b60>
   13f64:	b	13f88 <error@@Base+0x1b80>
   13f68:	ldr	r0, [pc, #52]	; 13fa4 <error@@Base+0x1b9c>
   13f6c:	add	r0, pc, r0
   13f70:	ldr	r1, [pc, #48]	; 13fa8 <error@@Base+0x1ba0>
   13f74:	add	r1, pc, r1
   13f78:	ldr	r2, [pc, #44]	; 13fac <error@@Base+0x1ba4>
   13f7c:	add	r3, pc, r2
   13f80:	movw	r2, #63	; 0x3f
   13f84:	bl	10c40 <__assert_fail@plt>
   13f88:	ldr	r0, [sp]
   13f8c:	ldr	r0, [r0, #8]
   13f90:	str	r0, [fp, #-4]
   13f94:	ldr	r0, [fp, #-4]
   13f98:	mov	sp, fp
   13f9c:	pop	{fp, pc}
   13fa0:	andeq	r1, r0, r0, lsl #3
   13fa4:	strdeq	r4, [r0], -ip
   13fa8:	andeq	r4, r0, sp, lsr #8
   13fac:	andeq	r4, r0, ip, lsr #8
   13fb0:	push	{fp, lr}
   13fb4:	mov	fp, sp
   13fb8:	sub	sp, sp, #24
   13fbc:	str	r0, [fp, #-4]
   13fc0:	str	r1, [fp, #-8]
   13fc4:	movw	r0, #0
   13fc8:	str	r0, [sp, #8]
   13fcc:	str	r0, [sp, #4]
   13fd0:	ldr	r0, [fp, #-4]
   13fd4:	str	r0, [sp, #12]
   13fd8:	ldr	r0, [sp, #12]
   13fdc:	ldr	r1, [fp, #-8]
   13fe0:	cmp	r0, r1
   13fe4:	beq	14080 <error@@Base+0x1c78>
   13fe8:	ldr	r0, [sp, #12]
   13fec:	movw	r1, #0
   13ff0:	cmp	r0, r1
   13ff4:	beq	13ffc <error@@Base+0x1bf4>
   13ff8:	b	1401c <error@@Base+0x1c14>
   13ffc:	ldr	r0, [pc, #136]	; 1408c <error@@Base+0x1c84>
   14000:	add	r0, pc, r0
   14004:	ldr	r1, [pc, #132]	; 14090 <error@@Base+0x1c88>
   14008:	add	r1, pc, r1
   1400c:	ldr	r2, [pc, #128]	; 14094 <error@@Base+0x1c8c>
   14010:	add	r3, pc, r2
   14014:	movw	r2, #249	; 0xf9
   14018:	bl	10c40 <__assert_fail@plt>
   1401c:	mov	r1, sp
   14020:	ldr	r0, [sp, #12]
   14024:	ldr	r0, [r0, #12]
   14028:	bl	10b08 <utf8proc_encode_char@plt>
   1402c:	str	r0, [sp, #4]
   14030:	ldr	r0, [sp, #4]
   14034:	cmp	r0, #0
   14038:	bls	14040 <error@@Base+0x1c38>
   1403c:	b	14060 <error@@Base+0x1c58>
   14040:	ldr	r0, [pc, #80]	; 14098 <error@@Base+0x1c90>
   14044:	add	r0, pc, r0
   14048:	ldr	r1, [pc, #76]	; 1409c <error@@Base+0x1c94>
   1404c:	add	r1, pc, r1
   14050:	ldr	r2, [pc, #72]	; 140a0 <error@@Base+0x1c98>
   14054:	add	r3, pc, r2
   14058:	movw	r2, #253	; 0xfd
   1405c:	bl	10c40 <__assert_fail@plt>
   14060:	ldr	r0, [sp, #4]
   14064:	ldr	r1, [sp, #8]
   14068:	add	r0, r1, r0
   1406c:	str	r0, [sp, #8]
   14070:	ldr	r0, [sp, #12]
   14074:	ldr	r0, [r0, #4]
   14078:	str	r0, [sp, #12]
   1407c:	b	13fd8 <error@@Base+0x1bd0>
   14080:	ldr	r0, [sp, #8]
   14084:	mov	sp, fp
   14088:	pop	{fp, pc}
   1408c:	andeq	r4, r0, sl, asr #7
   14090:	muleq	r0, r9, r3
   14094:	andeq	r4, r0, sl, asr #7
   14098:			; <UNDEFINED> instruction: 0x000043b0
   1409c:	andeq	r4, r0, r5, asr r3
   140a0:	andeq	r4, r0, r6, lsl #7
   140a4:	push	{fp, lr}
   140a8:	mov	fp, sp
   140ac:	sub	sp, sp, #24
   140b0:	str	r0, [fp, #-4]
   140b4:	str	r1, [fp, #-8]
   140b8:	str	r2, [sp, #12]
   140bc:	movw	r0, #0
   140c0:	str	r0, [sp, #4]
   140c4:	ldr	r0, [fp, #-8]
   140c8:	str	r0, [sp, #8]
   140cc:	ldr	r0, [sp, #8]
   140d0:	ldr	r1, [sp, #12]
   140d4:	cmp	r0, r1
   140d8:	beq	14144 <error@@Base+0x1d3c>
   140dc:	ldr	r0, [sp, #8]
   140e0:	movw	r1, #0
   140e4:	cmp	r0, r1
   140e8:	beq	140f0 <error@@Base+0x1ce8>
   140ec:	b	14110 <error@@Base+0x1d08>
   140f0:	ldr	r0, [pc, #104]	; 14160 <error@@Base+0x1d58>
   140f4:	add	r0, pc, r0
   140f8:	ldr	r1, [pc, #100]	; 14164 <error@@Base+0x1d5c>
   140fc:	add	r1, pc, r1
   14100:	ldr	r2, [pc, #96]	; 14168 <error@@Base+0x1d60>
   14104:	add	r3, pc, r2
   14108:	movw	r2, #269	; 0x10d
   1410c:	bl	10c40 <__assert_fail@plt>
   14110:	ldr	r0, [sp, #8]
   14114:	ldr	r0, [r0, #12]
   14118:	ldr	r1, [fp, #-4]
   1411c:	ldr	r2, [sp, #4]
   14120:	add	r1, r1, r2
   14124:	bl	10b08 <utf8proc_encode_char@plt>
   14128:	ldr	r1, [sp, #4]
   1412c:	add	r0, r1, r0
   14130:	str	r0, [sp, #4]
   14134:	ldr	r0, [sp, #8]
   14138:	ldr	r0, [r0, #4]
   1413c:	str	r0, [sp, #8]
   14140:	b	140cc <error@@Base+0x1cc4>
   14144:	ldr	r0, [fp, #-4]
   14148:	ldr	r1, [sp, #4]
   1414c:	add	r0, r0, r1
   14150:	movw	r1, #0
   14154:	strb	r1, [r0]
   14158:	mov	sp, fp
   1415c:	pop	{fp, pc}
   14160:	ldrdeq	r4, [r0], -r6
   14164:	andeq	r4, r0, r5, lsr #5
   14168:	andeq	r4, r0, r3, lsl #6
   1416c:	push	{fp, lr}
   14170:	mov	fp, sp
   14174:	sub	sp, sp, #24
   14178:	ldr	r3, [pc, #96]	; 141e0 <error@@Base+0x1dd8>
   1417c:	ldr	r3, [pc, r3]
   14180:	str	r0, [fp, #-4]
   14184:	strb	r1, [fp, #-5]
   14188:	str	r2, [sp, #12]
   1418c:	movw	r0, #1
   14190:	movw	r1, #16
   14194:	blx	r3
   14198:	ldr	r1, [pc, #60]	; 141dc <error@@Base+0x1dd4>
   1419c:	ldr	r1, [pc, r1]
   141a0:	str	r0, [sp, #8]
   141a4:	ldrb	r0, [fp, #-5]
   141a8:	ldr	r2, [sp, #8]
   141ac:	strb	r0, [r2, #8]
   141b0:	ldr	r0, [sp, #12]
   141b4:	ldr	r2, [sp, #8]
   141b8:	str	r0, [r2, #12]
   141bc:	ldr	r0, [fp, #-4]
   141c0:	ldr	r2, [sp, #8]
   141c4:	str	r1, [sp, #4]
   141c8:	mov	r1, r2
   141cc:	ldr	r2, [sp, #4]
   141d0:	blx	r2
   141d4:	mov	sp, fp
   141d8:	pop	{fp, pc}
   141dc:	andeq	r4, r1, r4, lsr pc
   141e0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   141e4:	push	{fp, lr}
   141e8:	mov	fp, sp
   141ec:	sub	sp, sp, #64	; 0x40
   141f0:	str	r0, [fp, #-4]
   141f4:	str	r1, [fp, #-8]
   141f8:	str	r2, [fp, #-12]
   141fc:	ldr	r0, [fp, #-12]
   14200:	ldrb	r0, [r0]
   14204:	cmp	r0, #0
   14208:	beq	14238 <error@@Base+0x1e30>
   1420c:	ldr	r0, [fp, #-8]
   14210:	movw	r1, #0
   14214:	cmp	r0, r1
   14218:	bne	14238 <error@@Base+0x1e30>
   1421c:	ldr	r0, [pc, #404]	; 143b8 <error@@Base+0x1fb0>
   14220:	add	r0, pc, r0
   14224:	ldr	r1, [pc, #400]	; 143bc <error@@Base+0x1fb4>
   14228:	add	r1, pc, r1
   1422c:	ldr	r2, [pc, #396]	; 143c0 <error@@Base+0x1fb8>
   14230:	ldr	r2, [pc, r2]
   14234:	blx	r2
   14238:	ldr	r0, [pc, #388]	; 143c4 <error@@Base+0x1fbc>
   1423c:	add	r1, pc, r0
   14240:	ldr	r0, [pc, #384]	; 143c8 <error@@Base+0x1fc0>
   14244:	ldr	r0, [pc, r0]
   14248:	ldr	r2, [fp, #-4]
   1424c:	ldr	r2, [r2, #4]
   14250:	str	r2, [fp, #-16]
   14254:	ldr	r2, [fp, #-8]
   14258:	str	r0, [fp, #-24]	; 0xffffffe8
   1425c:	mov	r0, r2
   14260:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14264:	blx	r2
   14268:	str	r0, [fp, #-20]	; 0xffffffec
   1426c:	ldr	r0, [fp, #-12]
   14270:	ldrsb	r0, [r0]
   14274:	cmp	r0, #0
   14278:	beq	1428c <error@@Base+0x1e84>
   1427c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14280:	bl	143d0 <error@@Base+0x1fc8>
   14284:	ldr	lr, [fp, #-12]
   14288:	strb	r0, [lr, #11]
   1428c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14290:	ldr	r1, [fp, #-4]
   14294:	ldr	r2, [fp, #-12]
   14298:	ldrb	r2, [r2, #1]
   1429c:	ldr	r3, [fp, #-12]
   142a0:	ldr	r3, [r3, #4]
   142a4:	cmp	r3, #0
   142a8:	str	r0, [fp, #-28]	; 0xffffffe4
   142ac:	str	r1, [sp, #32]
   142b0:	str	r2, [sp, #28]
   142b4:	beq	142c8 <error@@Base+0x1ec0>
   142b8:	ldr	r0, [fp, #-12]
   142bc:	ldr	r0, [r0, #4]
   142c0:	str	r0, [sp, #24]
   142c4:	b	142d4 <error@@Base+0x1ecc>
   142c8:	movw	r0, #94	; 0x5e
   142cc:	str	r0, [sp, #24]
   142d0:	b	142d4 <error@@Base+0x1ecc>
   142d4:	ldr	r0, [sp, #24]
   142d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   142dc:	str	r0, [sp, #20]
   142e0:	mov	r0, r1
   142e4:	ldr	r1, [sp, #32]
   142e8:	ldr	r2, [sp, #28]
   142ec:	ldr	r3, [sp, #20]
   142f0:	bl	144c8 <error@@Base+0x20c0>
   142f4:	ldr	r0, [pc, #208]	; 143cc <error@@Base+0x1fc4>
   142f8:	ldr	r0, [pc, r0]
   142fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   14300:	str	r0, [sp, #16]
   14304:	mov	r0, r1
   14308:	ldr	r1, [sp, #16]
   1430c:	blx	r1
   14310:	ldr	r0, [fp, #-12]
   14314:	ldrsb	r0, [r0, #9]
   14318:	cmp	r0, #0
   1431c:	beq	1436c <error@@Base+0x1f64>
   14320:	ldr	r0, [fp, #-4]
   14324:	ldr	r1, [fp, #-16]
   14328:	movw	r2, #0
   1432c:	cmp	r1, r2
   14330:	str	r0, [sp, #12]
   14334:	beq	14348 <error@@Base+0x1f40>
   14338:	ldr	r0, [fp, #-16]
   1433c:	ldr	r0, [r0, #4]
   14340:	str	r0, [sp, #8]
   14344:	b	14354 <error@@Base+0x1f4c>
   14348:	ldr	r0, [fp, #-4]
   1434c:	ldr	r0, [r0]
   14350:	str	r0, [sp, #8]
   14354:	ldr	r0, [sp, #8]
   14358:	ldr	r1, [sp, #12]
   1435c:	str	r0, [sp, #4]
   14360:	mov	r0, r1
   14364:	ldr	r1, [sp, #4]
   14368:	bl	14644 <error@@Base+0x223c>
   1436c:	ldr	r0, [fp, #-12]
   14370:	ldrsb	r0, [r0, #10]
   14374:	cmp	r0, #0
   14378:	beq	143b0 <error@@Base+0x1fa8>
   1437c:	ldr	r0, [fp, #-16]
   14380:	movw	r1, #0
   14384:	cmp	r0, r1
   14388:	beq	1439c <error@@Base+0x1f94>
   1438c:	ldr	r0, [fp, #-16]
   14390:	ldr	r0, [r0, #4]
   14394:	str	r0, [sp]
   14398:	b	143a8 <error@@Base+0x1fa0>
   1439c:	ldr	r0, [fp, #-4]
   143a0:	ldr	r0, [r0]
   143a4:	str	r0, [sp]
   143a8:	ldr	r0, [sp]
   143ac:	bl	147ec <error@@Base+0x23e4>
   143b0:	mov	sp, fp
   143b4:	pop	{fp, pc}
   143b8:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   143bc:	andeq	r4, r0, r7, lsl #4
   143c0:	andeq	r4, r1, r8, ror #29
   143c4:	andeq	r4, r0, sp, lsr #5
   143c8:	andeq	r4, r1, ip, ror #28
   143cc:	muleq	r1, r4, sp
   143d0:	push	{fp, lr}
   143d4:	mov	fp, sp
   143d8:	sub	sp, sp, #120	; 0x78
   143dc:	add	r1, sp, #12
   143e0:	str	r0, [fp, #-8]
   143e4:	movw	r0, #0
   143e8:	strh	r0, [sp, #10]
   143ec:	ldr	r2, [fp, #-8]
   143f0:	mov	r0, r1
   143f4:	movw	r1, #99	; 0x63
   143f8:	bl	10afc <fgets@plt>
   143fc:	movw	r1, #0
   14400:	cmp	r0, r1
   14404:	beq	144a4 <error@@Base+0x209c>
   14408:	ldr	r0, [pc, #176]	; 144c0 <error@@Base+0x20b8>
   1440c:	add	r1, pc, r0
   14410:	add	r0, sp, #12
   14414:	movw	r2, #51	; 0x33
   14418:	bl	10c1c <strncmp@plt>
   1441c:	cmp	r0, #0
   14420:	bne	144a4 <error@@Base+0x209c>
   14424:	b	14428 <error@@Base+0x2020>
   14428:	ldrsh	r0, [sp, #10]
   1442c:	cmp	r0, #2
   14430:	movw	r0, #0
   14434:	str	r0, [sp, #4]
   14438:	bge	14460 <error@@Base+0x2058>
   1443c:	add	r0, sp, #12
   14440:	ldr	r2, [fp, #-8]
   14444:	movw	r1, #99	; 0x63
   14448:	bl	10afc <fgets@plt>
   1444c:	movw	r1, #0
   14450:	cmp	r0, r1
   14454:	movw	r0, #0
   14458:	movne	r0, #1
   1445c:	str	r0, [sp, #4]
   14460:	ldr	r0, [sp, #4]
   14464:	tst	r0, #1
   14468:	beq	14498 <error@@Base+0x2090>
   1446c:	add	r0, sp, #12
   14470:	ldr	r1, [pc, #76]	; 144c4 <error@@Base+0x20bc>
   14474:	add	r1, pc, r1
   14478:	bl	10ac0 <strcmp@plt>
   1447c:	cmp	r0, #0
   14480:	bne	14494 <error@@Base+0x208c>
   14484:	ldrh	r0, [sp, #10]
   14488:	movw	r1, #1
   1448c:	add	r0, r0, r1
   14490:	strh	r0, [sp, #10]
   14494:	b	14428 <error@@Base+0x2020>
   14498:	movw	r0, #1
   1449c:	strb	r0, [fp, #-1]
   144a0:	b	144b4 <error@@Base+0x20ac>
   144a4:	ldr	r0, [fp, #-8]
   144a8:	bl	10b20 <rewind@plt>
   144ac:	movw	r0, #0
   144b0:	strb	r0, [fp, #-1]
   144b4:	ldrb	r0, [fp, #-1]
   144b8:	mov	sp, fp
   144bc:	pop	{fp, pc}
   144c0:	andeq	r4, r0, r7, asr r0
   144c4:	andeq	r4, r0, r7, lsr #32
   144c8:	push	{fp, lr}
   144cc:	mov	fp, sp
   144d0:	sub	sp, sp, #48	; 0x30
   144d4:	str	r0, [fp, #-4]
   144d8:	str	r1, [fp, #-8]
   144dc:	strb	r2, [fp, #-9]
   144e0:	str	r3, [fp, #-16]
   144e4:	movw	r0, #0
   144e8:	strb	r0, [fp, #-17]	; 0xffffffef
   144ec:	ldr	r0, [fp, #-4]
   144f0:	bl	10c34 <getc@plt>
   144f4:	str	r0, [sp, #20]
   144f8:	ldr	r0, [sp, #20]
   144fc:	cmn	r0, #1
   14500:	beq	14624 <error@@Base+0x221c>
   14504:	ldr	r0, [pc, #288]	; 1462c <error@@Base+0x2224>
   14508:	ldr	r0, [pc, r0]
   1450c:	ldr	r1, [sp, #20]
   14510:	add	r0, r0, r1
   14514:	ldrsb	r0, [r0]
   14518:	str	r0, [sp, #8]
   1451c:	ldr	r0, [sp, #8]
   14520:	cmp	r0, #1
   14524:	bge	1453c <error@@Base+0x2134>
   14528:	ldr	r0, [pc, #268]	; 1463c <error@@Base+0x2234>
   1452c:	add	r0, pc, r0
   14530:	ldr	r1, [pc, #264]	; 14640 <error@@Base+0x2238>
   14534:	ldr	r1, [pc, r1]
   14538:	blx	r1
   1453c:	ldr	r0, [sp, #20]
   14540:	strb	r0, [fp, #-21]	; 0xffffffeb
   14544:	ldr	r0, [sp, #8]
   14548:	cmp	r0, #1
   1454c:	ble	1459c <error@@Base+0x2194>
   14550:	sub	r0, fp, #21
   14554:	add	r0, r0, #1
   14558:	ldr	r1, [sp, #8]
   1455c:	sub	r2, r1, #1
   14560:	ldr	r3, [fp, #-4]
   14564:	movw	r1, #1
   14568:	bl	10b44 <fread@plt>
   1456c:	str	r0, [sp, #16]
   14570:	ldr	r0, [sp, #16]
   14574:	ldr	r1, [sp, #8]
   14578:	sub	r1, r1, #1
   1457c:	cmp	r0, r1
   14580:	beq	14598 <error@@Base+0x2190>
   14584:	ldr	r0, [pc, #168]	; 14634 <error@@Base+0x222c>
   14588:	add	r0, pc, r0
   1458c:	ldr	r1, [pc, #164]	; 14638 <error@@Base+0x2230>
   14590:	ldr	r1, [pc, r1]
   14594:	blx	r1
   14598:	b	1459c <error@@Base+0x2194>
   1459c:	sub	r0, fp, #21
   145a0:	movw	r1, #4
   145a4:	add	r2, sp, #4
   145a8:	bl	10b50 <utf8proc_iterate@plt>
   145ac:	str	r0, [sp, #12]
   145b0:	ldr	r0, [sp, #12]
   145b4:	ldr	r1, [sp, #8]
   145b8:	cmp	r0, r1
   145bc:	beq	145d4 <error@@Base+0x21cc>
   145c0:	ldr	r0, [sp, #12]
   145c4:	bl	10c04 <utf8proc_errmsg@plt>
   145c8:	ldr	lr, [pc, #96]	; 14630 <error@@Base+0x2228>
   145cc:	ldr	lr, [pc, lr]
   145d0:	blx	lr
   145d4:	ldrb	r0, [fp, #-9]
   145d8:	cmp	r0, #0
   145dc:	beq	145fc <error@@Base+0x21f4>
   145e0:	ldr	r0, [sp, #4]
   145e4:	ldr	r1, [fp, #-16]
   145e8:	cmp	r0, r1
   145ec:	bne	145fc <error@@Base+0x21f4>
   145f0:	movw	r0, #1
   145f4:	strb	r0, [fp, #-17]	; 0xffffffef
   145f8:	b	14614 <error@@Base+0x220c>
   145fc:	ldr	r0, [fp, #-8]
   14600:	ldrb	r1, [fp, #-17]	; 0xffffffef
   14604:	ldr	r2, [sp, #4]
   14608:	bl	1416c <error@@Base+0x1d64>
   1460c:	movw	r0, #0
   14610:	strb	r0, [fp, #-17]	; 0xffffffef
   14614:	ldr	r0, [fp, #-4]
   14618:	bl	10c34 <getc@plt>
   1461c:	str	r0, [sp, #20]
   14620:	b	144f8 <error@@Base+0x20f0>
   14624:	mov	sp, fp
   14628:	pop	{fp, pc}
   1462c:	andeq	r4, r1, r0, ror #23
   14630:	ldrdeq	r4, [r1], -r8
   14634:	andeq	r3, r0, r3, ror #30
   14638:	andeq	r4, r1, r4, lsl fp
   1463c:	andeq	r3, r0, r7, lsr #31
   14640:	andeq	r4, r1, r0, ror fp
   14644:	push	{fp, lr}
   14648:	mov	fp, sp
   1464c:	sub	sp, sp, #24
   14650:	str	r0, [fp, #-4]
   14654:	str	r1, [fp, #-8]
   14658:	movw	r0, #0
   1465c:	strb	r0, [fp, #-9]
   14660:	ldr	r0, [fp, #-8]
   14664:	str	r0, [sp, #8]
   14668:	ldr	r0, [sp, #8]
   1466c:	movw	r1, #0
   14670:	cmp	r0, r1
   14674:	beq	146b0 <error@@Base+0x22a8>
   14678:	ldr	r0, [sp, #8]
   1467c:	ldr	r0, [r0, #12]
   14680:	bl	14ce4 <error@@Base+0x28dc>
   14684:	sxtb	r0, r0
   14688:	cmp	r0, #0
   1468c:	beq	1469c <error@@Base+0x2294>
   14690:	ldr	r0, [sp, #8]
   14694:	movw	r1, #32
   14698:	str	r1, [r0, #12]
   1469c:	b	146a0 <error@@Base+0x2298>
   146a0:	ldr	r0, [sp, #8]
   146a4:	ldr	r0, [r0, #4]
   146a8:	str	r0, [sp, #8]
   146ac:	b	14668 <error@@Base+0x2260>
   146b0:	ldr	r0, [fp, #-8]
   146b4:	str	r0, [sp, #8]
   146b8:	ldr	r0, [sp, #8]
   146bc:	movw	r1, #0
   146c0:	cmp	r0, r1
   146c4:	beq	147e0 <error@@Base+0x23d8>
   146c8:	ldr	r0, [sp, #8]
   146cc:	ldr	r0, [r0, #4]
   146d0:	str	r0, [sp, #4]
   146d4:	ldr	r0, [sp, #8]
   146d8:	ldr	r0, [r0, #12]
   146dc:	cmp	r0, #32
   146e0:	bne	14720 <error@@Base+0x2318>
   146e4:	ldrsb	r0, [fp, #-9]
   146e8:	cmp	r0, #0
   146ec:	beq	1473c <error@@Base+0x2334>
   146f0:	ldr	r0, [sp, #4]
   146f4:	movw	r1, #0
   146f8:	cmp	r0, r1
   146fc:	beq	1473c <error@@Base+0x2334>
   14700:	ldr	r0, [sp, #4]
   14704:	ldr	r0, [r0, #12]
   14708:	cmp	r0, #32
   1470c:	beq	1473c <error@@Base+0x2334>
   14710:	ldr	r0, [sp, #4]
   14714:	ldr	r0, [r0, #12]
   14718:	cmp	r0, #10
   1471c:	beq	1473c <error@@Base+0x2334>
   14720:	ldr	r0, [sp, #8]
   14724:	ldr	r0, [r0, #12]
   14728:	cmp	r0, #10
   1472c:	bne	147b0 <error@@Base+0x23a8>
   14730:	ldrsb	r0, [fp, #-9]
   14734:	cmp	r0, #0
   14738:	bne	147b0 <error@@Base+0x23a8>
   1473c:	ldrb	r0, [fp, #-9]
   14740:	cmp	r0, #0
   14744:	beq	14780 <error@@Base+0x2378>
   14748:	ldr	r0, [sp, #4]
   1474c:	movw	r1, #0
   14750:	cmp	r0, r1
   14754:	beq	14780 <error@@Base+0x2378>
   14758:	ldr	r0, [sp, #4]
   1475c:	ldr	r0, [r0, #12]
   14760:	cmp	r0, #32
   14764:	bne	14780 <error@@Base+0x2378>
   14768:	ldr	r0, [sp, #8]
   1476c:	ldrb	r0, [r0, #8]
   14770:	ldr	r1, [sp, #4]
   14774:	ldrb	r2, [r1, #8]
   14778:	orr	r0, r2, r0
   1477c:	strb	r0, [r1, #8]
   14780:	ldr	r0, [pc, #96]	; 147e8 <error@@Base+0x23e0>
   14784:	ldr	r0, [pc, r0]
   14788:	ldr	r1, [fp, #-4]
   1478c:	ldr	r2, [sp, #8]
   14790:	str	r0, [sp]
   14794:	mov	r0, r1
   14798:	mov	r1, r2
   1479c:	ldr	r2, [sp]
   147a0:	blx	r2
   147a4:	ldr	r0, [sp, #8]
   147a8:	bl	10ae4 <free@plt>
   147ac:	b	147d4 <error@@Base+0x23cc>
   147b0:	ldr	r0, [sp, #8]
   147b4:	ldr	r0, [r0, #12]
   147b8:	cmp	r0, #10
   147bc:	movw	r0, #0
   147c0:	moveq	r0, #1
   147c4:	tst	r0, #1
   147c8:	movw	r0, #0
   147cc:	moveq	r0, #1
   147d0:	strb	r0, [fp, #-9]
   147d4:	ldr	r0, [sp, #4]
   147d8:	str	r0, [sp, #8]
   147dc:	b	146b8 <error@@Base+0x22b0>
   147e0:	mov	sp, fp
   147e4:	pop	{fp, pc}
   147e8:	andeq	r4, r1, r4, lsr #19
   147ec:	push	{fp, lr}
   147f0:	mov	fp, sp
   147f4:	sub	sp, sp, #8
   147f8:	str	r0, [sp, #4]
   147fc:	ldr	r0, [sp, #4]
   14800:	str	r0, [sp]
   14804:	ldr	r0, [sp]
   14808:	movw	r1, #0
   1480c:	cmp	r0, r1
   14810:	beq	14838 <error@@Base+0x2430>
   14814:	ldr	r0, [sp]
   14818:	ldr	r0, [r0, #12]
   1481c:	bl	10b2c <utf8proc_tolower@plt>
   14820:	ldr	lr, [sp]
   14824:	str	r0, [lr, #12]
   14828:	ldr	r0, [sp]
   1482c:	ldr	r0, [r0, #4]
   14830:	str	r0, [sp]
   14834:	b	14804 <error@@Base+0x23fc>
   14838:	mov	sp, fp
   1483c:	pop	{fp, pc}
   14840:	push	{fp, lr}
   14844:	mov	fp, sp
   14848:	sub	sp, sp, #16
   1484c:	str	r0, [fp, #-4]
   14850:	str	r1, [sp, #8]
   14854:	ldr	r0, [fp, #-4]
   14858:	ldr	r1, [sp, #8]
   1485c:	bl	10b08 <utf8proc_encode_char@plt>
   14860:	str	r0, [sp, #4]
   14864:	ldr	r0, [sp, #4]
   14868:	cmp	r0, #1
   1486c:	bge	14884 <error@@Base+0x247c>
   14870:	ldr	r0, [pc, #28]	; 14894 <error@@Base+0x248c>
   14874:	add	r0, pc, r0
   14878:	ldr	r1, [pc, #24]	; 14898 <error@@Base+0x2490>
   1487c:	ldr	r1, [pc, r1]
   14880:	blx	r1
   14884:	ldr	r0, [sp, #4]
   14888:	sxtb	r0, r0
   1488c:	mov	sp, fp
   14890:	pop	{fp, pc}
   14894:	andeq	r3, r0, r5, asr #23
   14898:	andeq	r4, r1, r8, lsr #16
   1489c:	push	{fp, lr}
   148a0:	mov	fp, sp
   148a4:	sub	sp, sp, #32
   148a8:	strb	r0, [fp, #-1]
   148ac:	str	r1, [fp, #-8]
   148b0:	str	r2, [fp, #-12]
   148b4:	strb	r3, [fp, #-13]
   148b8:	movw	r0, #0
   148bc:	strh	r0, [sp, #16]
   148c0:	ldr	r0, [fp, #-12]
   148c4:	str	r0, [sp, #12]
   148c8:	ldrsb	r0, [fp, #-1]
   148cc:	cmp	r0, #0
   148d0:	beq	148f0 <error@@Base+0x24e8>
   148d4:	ldr	r1, [sp, #12]
   148d8:	movw	r0, #94	; 0x5e
   148dc:	bl	14840 <error@@Base+0x2438>
   148e0:	sxtb	r0, r0
   148e4:	ldrsh	r1, [sp, #16]
   148e8:	add	r0, r1, r0
   148ec:	strh	r0, [sp, #16]
   148f0:	ldr	r0, [fp, #-8]
   148f4:	cmp	r0, #10
   148f8:	bne	14940 <error@@Base+0x2538>
   148fc:	ldr	r0, [pc, #316]	; 14a40 <error@@Base+0x2638>
   14900:	add	r0, pc, r0
   14904:	ldr	r1, [pc, #312]	; 14a44 <error@@Base+0x263c>
   14908:	add	r1, pc, r1
   1490c:	ldr	r2, [fp, #-12]
   14910:	ldrsh	r3, [sp, #16]
   14914:	add	r2, r2, r3
   14918:	ldrb	r3, [fp, #-13]
   1491c:	cmp	r3, #0
   14920:	movw	r3, #0
   14924:	movne	r3, #1
   14928:	tst	r3, #1
   1492c:	movne	r1, r0
   14930:	mov	r0, r2
   14934:	bl	10bec <sprintf@plt>
   14938:	str	r0, [sp, #8]
   1493c:	b	14a30 <error@@Base+0x2628>
   14940:	ldr	r0, [fp, #-8]
   14944:	bl	14a48 <error@@Base+0x2640>
   14948:	sxtb	r0, r0
   1494c:	cmp	r0, #0
   14950:	beq	149d8 <error@@Base+0x25d0>
   14954:	ldr	r0, [fp, #-8]
   14958:	bl	14ac8 <error@@Base+0x26c0>
   1495c:	sxtb	r0, r0
   14960:	cmp	r0, #0
   14964:	beq	1498c <error@@Base+0x2584>
   14968:	ldr	r0, [sp, #12]
   1496c:	ldrsh	r1, [sp, #16]
   14970:	add	r1, r0, r1
   14974:	movw	r0, #9676	; 0x25cc
   14978:	bl	14840 <error@@Base+0x2438>
   1497c:	sxtb	r0, r0
   14980:	ldrsh	r1, [sp, #16]
   14984:	add	r0, r1, r0
   14988:	strh	r0, [sp, #16]
   1498c:	ldr	r0, [fp, #-8]
   14990:	ldr	r1, [sp, #12]
   14994:	ldrsh	r2, [sp, #16]
   14998:	add	r1, r1, r2
   1499c:	bl	14840 <error@@Base+0x2438>
   149a0:	sxtb	r0, r0
   149a4:	ldrsh	r1, [sp, #16]
   149a8:	add	r0, r1, r0
   149ac:	strh	r0, [sp, #16]
   149b0:	ldr	r0, [fp, #-12]
   149b4:	ldrh	r1, [sp, #16]
   149b8:	movw	r2, #1
   149bc:	add	r2, r1, r2
   149c0:	strh	r2, [sp, #16]
   149c4:	sxth	r1, r1
   149c8:	add	r0, r0, r1
   149cc:	movw	r1, #0
   149d0:	strb	r1, [r0]
   149d4:	b	14a2c <error@@Base+0x2624>
   149d8:	ldr	r0, [fp, #-8]
   149dc:	cmp	r0, #256	; 0x100
   149e0:	bcs	14a08 <error@@Base+0x2600>
   149e4:	ldr	r0, [pc, #80]	; 14a3c <error@@Base+0x2634>
   149e8:	add	r1, pc, r0
   149ec:	ldr	r0, [fp, #-12]
   149f0:	ldrsh	r2, [sp, #16]
   149f4:	add	r0, r0, r2
   149f8:	ldr	r2, [fp, #-8]
   149fc:	bl	10bec <sprintf@plt>
   14a00:	str	r0, [sp, #4]
   14a04:	b	14a28 <error@@Base+0x2620>
   14a08:	ldr	r0, [pc, #40]	; 14a38 <error@@Base+0x2630>
   14a0c:	add	r1, pc, r0
   14a10:	ldr	r0, [fp, #-12]
   14a14:	ldrsh	r2, [sp, #16]
   14a18:	add	r0, r0, r2
   14a1c:	ldr	r2, [fp, #-8]
   14a20:	bl	10bec <sprintf@plt>
   14a24:	str	r0, [sp]
   14a28:	b	14a2c <error@@Base+0x2624>
   14a2c:	b	14a30 <error@@Base+0x2628>
   14a30:	mov	sp, fp
   14a34:	pop	{fp, pc}
   14a38:	andeq	r3, r0, r0, asr sl
   14a3c:	andeq	r3, r0, sp, ror #20
   14a40:	andeq	r3, r0, r0, asr fp
   14a44:	andeq	r0, r0, ip, lsr #10
   14a48:	push	{fp, lr}
   14a4c:	mov	fp, sp
   14a50:	sub	sp, sp, #16
   14a54:	str	r0, [sp, #8]
   14a58:	ldr	r0, [sp, #8]
   14a5c:	bl	10af0 <utf8proc_get_property@plt>
   14a60:	str	r0, [sp, #4]
   14a64:	ldr	r0, [sp, #8]
   14a68:	cmp	r0, #32
   14a6c:	bne	14a7c <error@@Base+0x2674>
   14a70:	movw	r0, #1
   14a74:	strb	r0, [fp, #-1]
   14a78:	b	14abc <error@@Base+0x26b4>
   14a7c:	ldr	r0, [sp, #4]
   14a80:	ldrsh	r0, [r0]
   14a84:	sub	r1, r0, #1
   14a88:	cmp	r1, #22
   14a8c:	str	r0, [sp]
   14a90:	bcc	14aa8 <error@@Base+0x26a0>
   14a94:	b	14a98 <error@@Base+0x2690>
   14a98:	ldr	r0, [sp]
   14a9c:	cmp	r0, #29
   14aa0:	bne	14ab4 <error@@Base+0x26ac>
   14aa4:	b	14aa8 <error@@Base+0x26a0>
   14aa8:	movw	r0, #1
   14aac:	strb	r0, [fp, #-1]
   14ab0:	b	14abc <error@@Base+0x26b4>
   14ab4:	movw	r0, #0
   14ab8:	strb	r0, [fp, #-1]
   14abc:	ldrb	r0, [fp, #-1]
   14ac0:	mov	sp, fp
   14ac4:	pop	{fp, pc}
   14ac8:	push	{fp, lr}
   14acc:	mov	fp, sp
   14ad0:	sub	sp, sp, #8
   14ad4:	str	r0, [sp]
   14ad8:	ldr	r0, [sp]
   14adc:	bl	10b98 <utf8proc_category@plt>
   14ae0:	sub	r0, r0, #6
   14ae4:	cmp	r0, #2
   14ae8:	bhi	14afc <error@@Base+0x26f4>
   14aec:	b	14af0 <error@@Base+0x26e8>
   14af0:	movw	r0, #1
   14af4:	strb	r0, [fp, #-1]
   14af8:	b	14b04 <error@@Base+0x26fc>
   14afc:	movw	r0, #0
   14b00:	strb	r0, [fp, #-1]
   14b04:	ldrb	r0, [fp, #-1]
   14b08:	mov	sp, fp
   14b0c:	pop	{fp, pc}
   14b10:	push	{fp, lr}
   14b14:	mov	fp, sp
   14b18:	sub	sp, sp, #56	; 0x38
   14b1c:	ldr	r3, [pc, #260]	; 14c28 <error@@Base+0x2820>
   14b20:	add	r3, pc, r3
   14b24:	ldr	ip, [pc, #256]	; 14c2c <error@@Base+0x2824>
   14b28:	ldr	ip, [pc, ip]
   14b2c:	str	r0, [fp, #-4]
   14b30:	str	r1, [fp, #-8]
   14b34:	str	r2, [fp, #-12]
   14b38:	ldr	r0, [fp, #-8]
   14b3c:	mov	r1, r3
   14b40:	blx	ip
   14b44:	str	r0, [fp, #-16]
   14b48:	ldr	r0, [fp, #-12]
   14b4c:	movw	r1, #0
   14b50:	cmp	r0, r1
   14b54:	beq	14bac <error@@Base+0x27a4>
   14b58:	ldr	r0, [pc, #216]	; 14c38 <error@@Base+0x2830>
   14b5c:	add	r0, pc, r0
   14b60:	ldr	r1, [fp, #-16]
   14b64:	bl	10c10 <fputs@plt>
   14b68:	ldr	r1, [pc, #196]	; 14c34 <error@@Base+0x282c>
   14b6c:	add	r1, pc, r1
   14b70:	ldr	lr, [fp, #-16]
   14b74:	str	r0, [sp, #20]
   14b78:	mov	r0, r1
   14b7c:	mov	r1, lr
   14b80:	bl	10c10 <fputs@plt>
   14b84:	ldr	r1, [fp, #-12]
   14b88:	ldr	lr, [fp, #-16]
   14b8c:	str	r0, [sp, #16]
   14b90:	mov	r0, lr
   14b94:	blx	r1
   14b98:	ldr	r0, [pc, #144]	; 14c30 <error@@Base+0x2828>
   14b9c:	add	r0, pc, r0
   14ba0:	ldr	r1, [fp, #-16]
   14ba4:	bl	10c10 <fputs@plt>
   14ba8:	str	r0, [sp, #12]
   14bac:	ldr	r0, [fp, #-4]
   14bb0:	ldr	r0, [r0]
   14bb4:	str	r0, [fp, #-20]	; 0xffffffec
   14bb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bbc:	movw	r1, #0
   14bc0:	cmp	r0, r1
   14bc4:	beq	14c04 <error@@Base+0x27fc>
   14bc8:	add	r2, sp, #27
   14bcc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bd0:	ldrb	r0, [r0, #8]
   14bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bd8:	ldr	r1, [r1, #12]
   14bdc:	movw	r3, #0
   14be0:	bl	1489c <error@@Base+0x2494>
   14be4:	add	r0, sp, #27
   14be8:	ldr	r1, [fp, #-16]
   14bec:	bl	10c10 <fputs@plt>
   14bf0:	str	r0, [sp, #8]
   14bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bf8:	ldr	r0, [r0, #4]
   14bfc:	str	r0, [fp, #-20]	; 0xffffffec
   14c00:	b	14bb8 <error@@Base+0x27b0>
   14c04:	ldr	r0, [pc, #48]	; 14c3c <error@@Base+0x2834>
   14c08:	ldr	r0, [pc, r0]
   14c0c:	ldr	r1, [fp, #-16]
   14c10:	str	r0, [sp, #4]
   14c14:	mov	r0, r1
   14c18:	ldr	r1, [sp, #4]
   14c1c:	blx	r1
   14c20:	mov	sp, fp
   14c24:	pop	{fp, pc}
   14c28:	andeq	r0, r0, r5, asr #8
   14c2c:	andeq	r4, r1, r8, lsl #11
   14c30:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   14c34:	andeq	r3, r0, pc, lsr #18
   14c38:	andeq	r3, r0, r7, lsl #18
   14c3c:	andeq	r4, r1, r4, lsl #9
   14c40:	push	{fp, lr}
   14c44:	mov	fp, sp
   14c48:	sub	sp, sp, #24
   14c4c:	str	r0, [fp, #-8]
   14c50:	str	r1, [sp, #12]
   14c54:	ldr	r0, [sp, #12]
   14c58:	str	r0, [sp, #8]
   14c5c:	movw	r0, #0
   14c60:	str	r0, [sp, #4]
   14c64:	str	r0, [sp]
   14c68:	ldr	r0, [sp, #12]
   14c6c:	str	r0, [sp, #8]
   14c70:	ldr	r0, [sp, #8]
   14c74:	ldrb	r0, [r0]
   14c78:	cmp	r0, #0
   14c7c:	beq	14cd0 <error@@Base+0x28c8>
   14c80:	ldr	r0, [sp, #8]
   14c84:	mvn	r1, #0
   14c88:	mov	r2, sp
   14c8c:	bl	10b50 <utf8proc_iterate@plt>
   14c90:	str	r0, [sp, #4]
   14c94:	ldr	r0, [sp, #4]
   14c98:	cmp	r0, #1
   14c9c:	bge	14cac <error@@Base+0x28a4>
   14ca0:	movw	r0, #0
   14ca4:	strb	r0, [fp, #-1]
   14ca8:	b	14cd8 <error@@Base+0x28d0>
   14cac:	ldr	r0, [fp, #-8]
   14cb0:	ldr	r2, [sp]
   14cb4:	movw	r1, #0
   14cb8:	bl	1416c <error@@Base+0x1d64>
   14cbc:	ldr	r0, [sp, #4]
   14cc0:	ldr	r1, [sp, #8]
   14cc4:	add	r0, r1, r0
   14cc8:	str	r0, [sp, #8]
   14ccc:	b	14c70 <error@@Base+0x2868>
   14cd0:	movw	r0, #1
   14cd4:	strb	r0, [fp, #-1]
   14cd8:	ldrb	r0, [fp, #-1]
   14cdc:	mov	sp, fp
   14ce0:	pop	{fp, pc}
   14ce4:	push	{fp, lr}
   14ce8:	mov	fp, sp
   14cec:	sub	sp, sp, #16
   14cf0:	str	r0, [sp, #8]
   14cf4:	ldr	r0, [sp, #8]
   14cf8:	bl	10af0 <utf8proc_get_property@plt>
   14cfc:	str	r0, [sp, #4]
   14d00:	ldr	r0, [sp, #8]
   14d04:	cmp	r0, #9
   14d08:	str	r0, [sp]
   14d0c:	beq	14d54 <error@@Base+0x294c>
   14d10:	b	14d14 <error@@Base+0x290c>
   14d14:	ldr	r0, [sp]
   14d18:	cmp	r0, #10
   14d1c:	beq	14d48 <error@@Base+0x2940>
   14d20:	b	14d24 <error@@Base+0x291c>
   14d24:	ldr	r0, [sp]
   14d28:	sub	r1, r0, #11
   14d2c:	cmp	r1, #3
   14d30:	bcc	14d54 <error@@Base+0x294c>
   14d34:	b	14d38 <error@@Base+0x2930>
   14d38:	ldr	r0, [sp]
   14d3c:	cmp	r0, #160	; 0xa0
   14d40:	beq	14d54 <error@@Base+0x294c>
   14d44:	b	14d60 <error@@Base+0x2958>
   14d48:	movw	r0, #0
   14d4c:	strb	r0, [fp, #-1]
   14d50:	b	14d8c <error@@Base+0x2984>
   14d54:	movw	r0, #1
   14d58:	strb	r0, [fp, #-1]
   14d5c:	b	14d8c <error@@Base+0x2984>
   14d60:	ldr	r0, [sp, #4]
   14d64:	ldrsh	r0, [r0]
   14d68:	sub	r0, r0, #23
   14d6c:	cmp	r0, #2
   14d70:	bhi	14d84 <error@@Base+0x297c>
   14d74:	b	14d78 <error@@Base+0x2970>
   14d78:	movw	r0, #1
   14d7c:	strb	r0, [fp, #-1]
   14d80:	b	14d8c <error@@Base+0x2984>
   14d84:	movw	r0, #0
   14d88:	strb	r0, [fp, #-1]
   14d8c:	ldrb	r0, [fp, #-1]
   14d90:	mov	sp, fp
   14d94:	pop	{fp, pc}
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d9c:	mov	r7, r0
   14da0:	ldr	r6, [pc, #72]	; 14df0 <error@@Base+0x29e8>
   14da4:	ldr	r5, [pc, #72]	; 14df4 <error@@Base+0x29ec>
   14da8:	add	r6, pc, r6
   14dac:	add	r5, pc, r5
   14db0:	sub	r6, r6, r5
   14db4:	mov	r8, r1
   14db8:	mov	r9, r2
   14dbc:	bl	10a94 <calloc@plt-0x20>
   14dc0:	asrs	r6, r6, #2
   14dc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dc8:	mov	r4, #0
   14dcc:	add	r4, r4, #1
   14dd0:	ldr	r3, [r5], #4
   14dd4:	mov	r2, r9
   14dd8:	mov	r1, r8
   14ddc:	mov	r0, r7
   14de0:	blx	r3
   14de4:	cmp	r6, r4
   14de8:	bne	14dcc <error@@Base+0x29c4>
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14df0:	andeq	r4, r1, ip, asr #2
   14df4:	andeq	r4, r1, r4, asr #2
   14df8:	bx	lr
   14dfc:	mov	r2, r1
   14e00:	mov	r1, r0
   14e04:	mov	r0, #3
   14e08:	b	10b38 <__xstat@plt>

Disassembly of section .fini:

00014e0c <.fini>:
   14e0c:	push	{r3, lr}
   14e10:	pop	{r3, pc}
