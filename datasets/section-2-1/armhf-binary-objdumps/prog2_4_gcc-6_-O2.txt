
../repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

0001097c <.init>:
   1097c:	push	{r3, lr}
   10980:	bl	10b30 <_start@@Base+0x3c>
   10984:	pop	{r3, pc}

Disassembly of section .plt:

00010988 <strcmp@plt-0x14>:
   10988:	push	{lr}		; (str lr, [sp, #-4]!)
   1098c:	ldr	lr, [pc, #4]	; 10998 <strcmp@plt-0x4>
   10990:	add	lr, pc, lr
   10994:	ldr	pc, [lr, #8]!
   10998:	andeq	r2, r1, r8, ror #12

0001099c <strcmp@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #73728	; 0x12000
   109a4:	ldr	pc, [ip, #1640]!	; 0x668

000109a8 <printf@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #73728	; 0x12000
   109b0:	ldr	pc, [ip, #1632]!	; 0x660

000109b4 <free@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #73728	; 0x12000
   109bc:	ldr	pc, [ip, #1624]!	; 0x658

000109c0 <memcpy@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #73728	; 0x12000
   109c8:	ldr	pc, [ip, #1616]!	; 0x650

000109cc <strdup@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #73728	; 0x12000
   109d4:	ldr	pc, [ip, #1608]!	; 0x648

000109d8 <strcpy@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #73728	; 0x12000
   109e0:	ldr	pc, [ip, #1600]!	; 0x640

000109e4 <puts@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #73728	; 0x12000
   109ec:	ldr	pc, [ip, #1592]!	; 0x638

000109f0 <malloc@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #73728	; 0x12000
   109f8:	ldr	pc, [ip, #1584]!	; 0x630

000109fc <__libc_start_main@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #73728	; 0x12000
   10a04:	ldr	pc, [ip, #1576]!	; 0x628

00010a08 <__gmon_start__@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #73728	; 0x12000
   10a10:	ldr	pc, [ip, #1568]!	; 0x620

00010a14 <strlen@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #73728	; 0x12000
   10a1c:	ldr	pc, [ip, #1560]!	; 0x618

00010a20 <setvbuf@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #73728	; 0x12000
   10a28:	ldr	pc, [ip, #1552]!	; 0x610

00010a2c <putchar@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #73728	; 0x12000
   10a34:	ldr	pc, [ip, #1544]!	; 0x608

00010a38 <abort@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #73728	; 0x12000
   10a40:	ldr	pc, [ip, #1536]!	; 0x600

Disassembly of section .text:

00010a44 <main@@Base>:
   10a44:	push	{r4, lr}
   10a48:	mov	r3, #0
   10a4c:	ldr	r4, [pc, #140]	; 10ae0 <main@@Base+0x9c>
   10a50:	ldr	r2, [pc, #140]	; 10ae4 <main@@Base+0xa0>
   10a54:	add	r4, pc, r4
   10a58:	mov	r1, r3
   10a5c:	ldr	r0, [r4, r2]
   10a60:	mov	r2, #2
   10a64:	ldr	r0, [r0]
   10a68:	bl	10a20 <setvbuf@plt>
   10a6c:	ldr	r2, [pc, #116]	; 10ae8 <main@@Base+0xa4>
   10a70:	mov	r3, #0
   10a74:	mov	r1, r3
   10a78:	ldr	r0, [r4, r2]
   10a7c:	mov	r2, #2
   10a80:	ldr	r0, [r0]
   10a84:	bl	10a20 <setvbuf@plt>
   10a88:	bl	10d3c <teste_lista_nova@@Base>
   10a8c:	mov	r4, r0
   10a90:	bl	10dd0 <teste_lista_insere@@Base>
   10a94:	add	r4, r4, r0
   10a98:	bl	11160 <teste_lista_remove@@Base>
   10a9c:	add	r4, r4, r0
   10aa0:	bl	11344 <teste_lista_pesquisa@@Base>
   10aa4:	add	r4, r4, r0
   10aa8:	bl	11508 <teste_lista_ordena@@Base>
   10aac:	add	r4, r4, r0
   10ab0:	bl	11754 <teste_lista_inverte@@Base>
   10ab4:	adds	r1, r4, r0
   10ab8:	beq	10ad0 <main@@Base+0x8c>
   10abc:	ldr	r0, [pc, #40]	; 10aec <main@@Base+0xa8>
   10ac0:	add	r0, pc, r0
   10ac4:	bl	109a8 <printf@plt>
   10ac8:	mov	r0, #0
   10acc:	pop	{r4, pc}
   10ad0:	ldr	r0, [pc, #24]	; 10af0 <main@@Base+0xac>
   10ad4:	add	r0, pc, r0
   10ad8:	bl	109e4 <puts@plt>
   10adc:	b	10ac8 <main@@Base+0x84>
   10ae0:	andeq	r2, r1, r4, lsr #11
   10ae4:	andeq	r0, r0, ip, asr #32
   10ae8:	andeq	r0, r0, r4, asr #32
   10aec:	andeq	r1, r0, ip, lsl #16
   10af0:	andeq	r1, r0, r0, ror #15

00010af4 <_start@@Base>:
   10af4:	mov	fp, #0
   10af8:	mov	lr, #0
   10afc:	pop	{r1}		; (ldr r1, [sp], #4)
   10b00:	mov	r2, sp
   10b04:	push	{r2}		; (str r2, [sp, #-4]!)
   10b08:	push	{r0}		; (str r0, [sp, #-4]!)
   10b0c:	ldr	ip, [pc, #16]	; 10b24 <_start@@Base+0x30>
   10b10:	push	{ip}		; (str ip, [sp, #-4]!)
   10b14:	ldr	r0, [pc, #12]	; 10b28 <_start@@Base+0x34>
   10b18:	ldr	r3, [pc, #12]	; 10b2c <_start@@Base+0x38>
   10b1c:	bl	109fc <__libc_start_main@plt>
   10b20:	bl	10a38 <abort@plt>
   10b24:	andeq	r1, r1, ip, lsr #27
   10b28:	andeq	r0, r1, r4, asr #20
   10b2c:	andeq	r1, r1, ip, asr #26
   10b30:	ldr	r3, [pc, #20]	; 10b4c <_start@@Base+0x58>
   10b34:	ldr	r2, [pc, #20]	; 10b50 <_start@@Base+0x5c>
   10b38:	add	r3, pc, r3
   10b3c:	ldr	r2, [r3, r2]
   10b40:	cmp	r2, #0
   10b44:	bxeq	lr
   10b48:	b	10a08 <__gmon_start__@plt>
   10b4c:	andeq	r2, r1, r0, asr #9
   10b50:	andeq	r0, r0, r8, asr #32
   10b54:	ldr	r3, [pc, #28]	; 10b78 <_start@@Base+0x84>
   10b58:	ldr	r0, [pc, #28]	; 10b7c <_start@@Base+0x88>
   10b5c:	sub	r3, r3, r0
   10b60:	cmp	r3, #6
   10b64:	bxls	lr
   10b68:	ldr	r3, [pc, #16]	; 10b80 <_start@@Base+0x8c>
   10b6c:	cmp	r3, #0
   10b70:	bxeq	lr
   10b74:	bx	r3
   10b78:	andeq	r3, r2, fp, asr r0
   10b7c:	andeq	r3, r2, r8, asr r0
   10b80:	andeq	r0, r0, r0
   10b84:	ldr	r1, [pc, #36]	; 10bb0 <_start@@Base+0xbc>
   10b88:	ldr	r0, [pc, #36]	; 10bb4 <_start@@Base+0xc0>
   10b8c:	sub	r1, r1, r0
   10b90:	asr	r1, r1, #2
   10b94:	add	r1, r1, r1, lsr #31
   10b98:	asrs	r1, r1, #1
   10b9c:	bxeq	lr
   10ba0:	ldr	r3, [pc, #16]	; 10bb8 <_start@@Base+0xc4>
   10ba4:	cmp	r3, #0
   10ba8:	bxeq	lr
   10bac:	bx	r3
   10bb0:	andeq	r3, r2, r8, asr r0
   10bb4:	andeq	r3, r2, r8, asr r0
   10bb8:	andeq	r0, r0, r0
   10bbc:	push	{r4, lr}
   10bc0:	ldr	r4, [pc, #24]	; 10be0 <_start@@Base+0xec>
   10bc4:	ldrb	r3, [r4]
   10bc8:	cmp	r3, #0
   10bcc:	popne	{r4, pc}
   10bd0:	bl	10b54 <_start@@Base+0x60>
   10bd4:	mov	r3, #1
   10bd8:	strb	r3, [r4]
   10bdc:	pop	{r4, pc}
   10be0:	andeq	r3, r2, r8, asr r0
   10be4:	ldr	r0, [pc, #40]	; 10c14 <_start@@Base+0x120>
   10be8:	ldr	r3, [r0]
   10bec:	cmp	r3, #0
   10bf0:	bne	10bf8 <_start@@Base+0x104>
   10bf4:	b	10b84 <_start@@Base+0x90>
   10bf8:	ldr	r3, [pc, #24]	; 10c18 <_start@@Base+0x124>
   10bfc:	cmp	r3, #0
   10c00:	beq	10bf4 <_start@@Base+0x100>
   10c04:	push	{r4, lr}
   10c08:	blx	r3
   10c0c:	pop	{r4, lr}
   10c10:	b	10b84 <_start@@Base+0x90>
   10c14:	andeq	r2, r2, r4, lsl pc
   10c18:	andeq	r0, r0, r0

00010c1c <_l@@Base>:
   10c1c:	push	{r0, r1, r2, r3}
   10c20:	mov	r0, #12
   10c24:	push	{r4, r5, r6, r7, r8, r9, lr}
   10c28:	sub	sp, sp, #12
   10c2c:	mov	r4, #0
   10c30:	ldr	r7, [sp, #40]	; 0x28
   10c34:	bl	109f0 <malloc@plt>
   10c38:	add	r3, sp, #44	; 0x2c
   10c3c:	cmp	r7, #0
   10c40:	str	r3, [sp, #4]
   10c44:	mov	r9, r0
   10c48:	str	r7, [r0, #8]
   10c4c:	str	r4, [r0]
   10c50:	str	r4, [r0, #4]
   10c54:	ble	10cb0 <_l@@Base+0x94>
   10c58:	mov	r8, #12
   10c5c:	ldr	r3, [sp, #4]
   10c60:	cmp	r4, #0
   10c64:	add	r2, r3, #4
   10c68:	mov	r0, r8
   10c6c:	str	r2, [sp, #4]
   10c70:	ldr	r6, [r3]
   10c74:	beq	10cd0 <_l@@Base+0xb4>
   10c78:	bl	109f0 <malloc@plt>
   10c7c:	str	r0, [r5, #4]
   10c80:	str	r5, [r0, #8]
   10c84:	mov	r5, r0
   10c88:	mov	r0, r6
   10c8c:	bl	10a14 <strlen@plt>
   10c90:	add	r4, r4, #1
   10c94:	add	r0, r0, #1
   10c98:	bl	109f0 <malloc@plt>
   10c9c:	mov	r1, r6
   10ca0:	str	r0, [r5]
   10ca4:	bl	109d8 <strcpy@plt>
   10ca8:	cmp	r7, r4
   10cac:	bne	10c5c <_l@@Base+0x40>
   10cb0:	mov	r3, #0
   10cb4:	mov	r0, r9
   10cb8:	str	r5, [r9, #4]
   10cbc:	str	r3, [r5, #4]
   10cc0:	add	sp, sp, #12
   10cc4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   10cc8:	add	sp, sp, #16
   10ccc:	bx	lr
   10cd0:	bl	109f0 <malloc@plt>
   10cd4:	str	r0, [r9]
   10cd8:	str	r4, [r0, #8]
   10cdc:	mov	r5, r0
   10ce0:	b	10c88 <_l@@Base+0x6c>

00010ce4 <_f@@Base>:
   10ce4:	cmp	r0, #0
   10ce8:	bxeq	lr
   10cec:	ldr	r3, [r0]
   10cf0:	cmp	r3, #0
   10cf4:	cmpne	r1, #0
   10cf8:	movgt	r2, #1
   10cfc:	movle	r2, #0
   10d00:	ble	10d1c <_f@@Base+0x38>
   10d04:	mov	r2, #0
   10d08:	ldr	r3, [r3, #4]
   10d0c:	add	r2, r2, #1
   10d10:	cmp	r3, #0
   10d14:	cmpne	r1, r2
   10d18:	bgt	10d08 <_f@@Base+0x24>
   10d1c:	cmp	r1, r2
   10d20:	beq	10d30 <_f@@Base+0x4c>
   10d24:	ldr	r0, [pc, #12]	; 10d38 <_f@@Base+0x54>
   10d28:	add	r0, pc, r0
   10d2c:	bx	lr
   10d30:	ldr	r0, [r3]
   10d34:	bx	lr
   10d38:	andeq	r1, r0, r8, asr r4

00010d3c <teste_lista_nova@@Base>:
   10d3c:	ldr	r0, [pc, #124]	; 10dc0 <teste_lista_nova@@Base+0x84>
   10d40:	push	{r4, r5, r6, lr}
   10d44:	add	r0, pc, r0
   10d48:	bl	109a8 <printf@plt>
   10d4c:	bl	119c0 <lista_nova@@Base>
   10d50:	subs	r5, r0, #0
   10d54:	beq	10da4 <teste_lista_nova@@Base+0x68>
   10d58:	ldr	r4, [r5, #8]
   10d5c:	cmp	r4, #0
   10d60:	bne	10d7c <teste_lista_nova@@Base+0x40>
   10d64:	bl	119ec <lista_apaga@@Base>
   10d68:	ldr	r0, [pc, #84]	; 10dc4 <teste_lista_nova@@Base+0x88>
   10d6c:	add	r0, pc, r0
   10d70:	bl	109e4 <puts@plt>
   10d74:	mov	r0, r4
   10d78:	pop	{r4, r5, r6, pc}
   10d7c:	ldr	r0, [pc, #68]	; 10dc8 <teste_lista_nova@@Base+0x8c>
   10d80:	mov	r4, #1
   10d84:	add	r0, pc, r0
   10d88:	bl	109a8 <printf@plt>
   10d8c:	mov	r0, r5
   10d90:	bl	119ec <lista_apaga@@Base>
   10d94:	mov	r0, #10
   10d98:	bl	10a2c <putchar@plt>
   10d9c:	mov	r0, r4
   10da0:	pop	{r4, r5, r6, pc}
   10da4:	ldr	r0, [pc, #32]	; 10dcc <teste_lista_nova@@Base+0x90>
   10da8:	mov	r4, #1
   10dac:	add	r0, pc, r0
   10db0:	bl	109a8 <printf@plt>
   10db4:	mov	r0, #10
   10db8:	bl	10a2c <putchar@plt>
   10dbc:	b	10d74 <teste_lista_nova@@Base+0x38>
   10dc0:	andeq	r1, r0, r0, ror r0
   10dc4:	muleq	r0, r4, r0
   10dc8:	andeq	r1, r0, r8, asr r0
   10dcc:	andeq	r1, r0, r8, lsl r0

00010dd0 <teste_lista_insere@@Base>:
   10dd0:	ldr	r2, [pc, #816]	; 11108 <teste_lista_insere@@Base+0x338>
   10dd4:	push	{r4, r5, r6, r7, r8, lr}
   10dd8:	add	r2, pc, r2
   10ddc:	mov	r1, r2
   10de0:	mov	r0, #2
   10de4:	bl	10c1c <_l@@Base>
   10de8:	mov	r4, r0
   10dec:	ldr	r0, [pc, #792]	; 1110c <teste_lista_insere@@Base+0x33c>
   10df0:	add	r0, pc, r0
   10df4:	bl	109a8 <printf@plt>
   10df8:	ldr	r3, [r4]
   10dfc:	ldr	r1, [pc, #780]	; 11110 <teste_lista_insere@@Base+0x340>
   10e00:	mov	r0, r4
   10e04:	add	r1, pc, r1
   10e08:	ldr	r2, [r3, #4]
   10e0c:	bl	11a6c <lista_insere@@Base>
   10e10:	cmp	r0, #0
   10e14:	movne	r5, #0
   10e18:	beq	11040 <teste_lista_insere@@Base+0x270>
   10e1c:	ldr	r3, [r4, #8]
   10e20:	cmp	r3, #3
   10e24:	beq	10e54 <teste_lista_insere@@Base+0x84>
   10e28:	ldr	r0, [pc, #740]	; 11114 <teste_lista_insere@@Base+0x344>
   10e2c:	add	r5, r5, #1
   10e30:	add	r0, pc, r0
   10e34:	bl	109a8 <printf@plt>
   10e38:	ldr	r3, [r4, #8]
   10e3c:	cmp	r3, #3
   10e40:	beq	10e54 <teste_lista_insere@@Base+0x84>
   10e44:	mov	r0, #10
   10e48:	bl	10a2c <putchar@plt>
   10e4c:	mov	r0, r5
   10e50:	pop	{r4, r5, r6, r7, r8, pc}
   10e54:	ldr	r6, [r4]
   10e58:	ldr	r7, [pc, #696]	; 11118 <teste_lista_insere@@Base+0x348>
   10e5c:	add	r7, pc, r7
   10e60:	ldr	r0, [r6]
   10e64:	mov	r1, r7
   10e68:	bl	1099c <strcmp@plt>
   10e6c:	cmp	r0, #0
   10e70:	bne	10ea8 <teste_lista_insere@@Base+0xd8>
   10e74:	ldr	r8, [r6, #4]
   10e78:	ldr	r1, [pc, #668]	; 1111c <teste_lista_insere@@Base+0x34c>
   10e7c:	ldr	r0, [r8]
   10e80:	add	r1, pc, r1
   10e84:	bl	1099c <strcmp@plt>
   10e88:	cmp	r0, #0
   10e8c:	bne	10ea8 <teste_lista_insere@@Base+0xd8>
   10e90:	ldr	r3, [r8, #4]
   10e94:	mov	r1, r7
   10e98:	ldr	r0, [r3]
   10e9c:	bl	1099c <strcmp@plt>
   10ea0:	cmp	r0, #0
   10ea4:	beq	10ebc <teste_lista_insere@@Base+0xec>
   10ea8:	ldr	r0, [pc, #624]	; 11120 <teste_lista_insere@@Base+0x350>
   10eac:	add	r5, r5, #1
   10eb0:	add	r0, pc, r0
   10eb4:	bl	109a8 <printf@plt>
   10eb8:	ldr	r6, [r4]
   10ebc:	ldr	r1, [pc, #608]	; 11124 <teste_lista_insere@@Base+0x354>
   10ec0:	mov	r2, r6
   10ec4:	add	r1, pc, r1
   10ec8:	mov	r0, r4
   10ecc:	bl	11a6c <lista_insere@@Base>
   10ed0:	ldr	r3, [r4]
   10ed4:	cmp	r3, r0
   10ed8:	beq	10eec <teste_lista_insere@@Base+0x11c>
   10edc:	ldr	r0, [pc, #580]	; 11128 <teste_lista_insere@@Base+0x358>
   10ee0:	add	r5, r5, #1
   10ee4:	add	r0, pc, r0
   10ee8:	bl	109a8 <printf@plt>
   10eec:	ldr	r3, [r4, #8]
   10ef0:	cmp	r3, #4
   10ef4:	beq	10f14 <teste_lista_insere@@Base+0x144>
   10ef8:	ldr	r0, [pc, #556]	; 1112c <teste_lista_insere@@Base+0x35c>
   10efc:	add	r5, r5, #1
   10f00:	add	r0, pc, r0
   10f04:	bl	109a8 <printf@plt>
   10f08:	ldr	r3, [r4, #8]
   10f0c:	cmp	r3, #4
   10f10:	bne	10e44 <teste_lista_insere@@Base+0x74>
   10f14:	ldr	r6, [r4]
   10f18:	ldr	r7, [pc, #528]	; 11130 <teste_lista_insere@@Base+0x360>
   10f1c:	add	r7, pc, r7
   10f20:	ldr	r0, [r6]
   10f24:	mov	r1, r7
   10f28:	bl	1099c <strcmp@plt>
   10f2c:	cmp	r0, #0
   10f30:	bne	10f54 <teste_lista_insere@@Base+0x184>
   10f34:	ldr	r6, [r6, #4]
   10f38:	ldr	r8, [pc, #500]	; 11134 <teste_lista_insere@@Base+0x364>
   10f3c:	add	r8, pc, r8
   10f40:	ldr	r0, [r6]
   10f44:	mov	r1, r8
   10f48:	bl	1099c <strcmp@plt>
   10f4c:	cmp	r0, #0
   10f50:	beq	11054 <teste_lista_insere@@Base+0x284>
   10f54:	ldr	r0, [pc, #476]	; 11138 <teste_lista_insere@@Base+0x368>
   10f58:	add	r5, r5, #1
   10f5c:	add	r0, pc, r0
   10f60:	bl	109a8 <printf@plt>
   10f64:	ldr	r1, [pc, #464]	; 1113c <teste_lista_insere@@Base+0x36c>
   10f68:	mov	r2, #0
   10f6c:	add	r1, pc, r1
   10f70:	mov	r0, r4
   10f74:	bl	11a6c <lista_insere@@Base>
   10f78:	ldr	r3, [r4, #8]
   10f7c:	cmp	r3, #5
   10f80:	beq	10fa0 <teste_lista_insere@@Base+0x1d0>
   10f84:	ldr	r0, [pc, #436]	; 11140 <teste_lista_insere@@Base+0x370>
   10f88:	add	r5, r5, #1
   10f8c:	add	r0, pc, r0
   10f90:	bl	109a8 <printf@plt>
   10f94:	ldr	r3, [r4, #8]
   10f98:	cmp	r3, #5
   10f9c:	bne	10e44 <teste_lista_insere@@Base+0x74>
   10fa0:	ldr	r3, [r4]
   10fa4:	ldr	r1, [pc, #408]	; 11144 <teste_lista_insere@@Base+0x374>
   10fa8:	ldr	r3, [r3, #4]
   10fac:	add	r1, pc, r1
   10fb0:	ldr	r3, [r3, #4]
   10fb4:	ldr	r3, [r3, #4]
   10fb8:	ldr	r3, [r3, #4]
   10fbc:	ldr	r0, [r3]
   10fc0:	bl	1099c <strcmp@plt>
   10fc4:	cmp	r0, #0
   10fc8:	bne	110b4 <teste_lista_insere@@Base+0x2e4>
   10fcc:	mov	r0, r4
   10fd0:	bl	119ec <lista_apaga@@Base>
   10fd4:	bl	119c0 <lista_nova@@Base>
   10fd8:	ldr	r6, [pc, #360]	; 11148 <teste_lista_insere@@Base+0x378>
   10fdc:	mov	r2, #0
   10fe0:	add	r6, pc, r6
   10fe4:	mov	r1, r6
   10fe8:	mov	r4, r0
   10fec:	bl	11a6c <lista_insere@@Base>
   10ff0:	ldr	r3, [r4, #8]
   10ff4:	cmp	r3, #1
   10ff8:	beq	11088 <teste_lista_insere@@Base+0x2b8>
   10ffc:	ldr	r0, [pc, #328]	; 1114c <teste_lista_insere@@Base+0x37c>
   11000:	add	r5, r5, #1
   11004:	add	r0, pc, r0
   11008:	bl	109a8 <printf@plt>
   1100c:	mov	r0, r4
   11010:	bl	119dc <lista_tamanho@@Base>
   11014:	cmp	r0, #1
   11018:	bne	10e44 <teste_lista_insere@@Base+0x74>
   1101c:	ldr	r3, [r4]
   11020:	mov	r1, r6
   11024:	ldr	r0, [r3]
   11028:	bl	1099c <strcmp@plt>
   1102c:	cmp	r0, #0
   11030:	bne	110ec <teste_lista_insere@@Base+0x31c>
   11034:	mov	r0, r4
   11038:	bl	119ec <lista_apaga@@Base>
   1103c:	b	10e44 <teste_lista_insere@@Base+0x74>
   11040:	ldr	r0, [pc, #264]	; 11150 <teste_lista_insere@@Base+0x380>
   11044:	mov	r5, #1
   11048:	add	r0, pc, r0
   1104c:	bl	109a8 <printf@plt>
   11050:	b	10e1c <teste_lista_insere@@Base+0x4c>
   11054:	ldr	r6, [r6, #4]
   11058:	mov	r1, r7
   1105c:	ldr	r0, [r6]
   11060:	bl	1099c <strcmp@plt>
   11064:	cmp	r0, #0
   11068:	bne	10f54 <teste_lista_insere@@Base+0x184>
   1106c:	ldr	r3, [r6, #4]
   11070:	mov	r1, r8
   11074:	ldr	r0, [r3]
   11078:	bl	1099c <strcmp@plt>
   1107c:	cmp	r0, #0
   11080:	beq	10f64 <teste_lista_insere@@Base+0x194>
   11084:	b	10f54 <teste_lista_insere@@Base+0x184>
   11088:	mov	r0, r4
   1108c:	bl	119dc <lista_tamanho@@Base>
   11090:	cmp	r0, #1
   11094:	beq	110c8 <teste_lista_insere@@Base+0x2f8>
   11098:	cmp	r5, #0
   1109c:	bne	10e44 <teste_lista_insere@@Base+0x74>
   110a0:	ldr	r0, [pc, #172]	; 11154 <teste_lista_insere@@Base+0x384>
   110a4:	mov	r5, #0
   110a8:	add	r0, pc, r0
   110ac:	bl	109e4 <puts@plt>
   110b0:	b	10e4c <teste_lista_insere@@Base+0x7c>
   110b4:	ldr	r0, [pc, #156]	; 11158 <teste_lista_insere@@Base+0x388>
   110b8:	add	r5, r5, #1
   110bc:	add	r0, pc, r0
   110c0:	bl	109a8 <printf@plt>
   110c4:	b	10fcc <teste_lista_insere@@Base+0x1fc>
   110c8:	ldr	r3, [r4]
   110cc:	mov	r1, r6
   110d0:	ldr	r0, [r3]
   110d4:	bl	1099c <strcmp@plt>
   110d8:	cmp	r0, #0
   110dc:	bne	110ec <teste_lista_insere@@Base+0x31c>
   110e0:	mov	r0, r4
   110e4:	bl	119ec <lista_apaga@@Base>
   110e8:	b	11098 <teste_lista_insere@@Base+0x2c8>
   110ec:	ldr	r0, [pc, #104]	; 1115c <teste_lista_insere@@Base+0x38c>
   110f0:	add	r5, r5, #1
   110f4:	add	r0, pc, r0
   110f8:	bl	109a8 <printf@plt>
   110fc:	mov	r0, r4
   11100:	bl	119ec <lista_apaga@@Base>
   11104:	b	10e44 <teste_lista_insere@@Base+0x74>
   11108:	andeq	r1, r0, ip, lsr #32
   1110c:	andeq	r1, r0, r8, lsl r0
   11110:	andeq	r1, r0, r8, lsl r0
   11114:	andeq	r1, r0, r0, lsr #32
   11118:	andeq	r0, r0, r8, lsr #31
   1111c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   11120:	ldrdeq	r0, [r0], -ip
   11124:	andeq	r0, r0, r8, asr pc
   11128:	andeq	r0, r0, r0, ror #31
   1112c:	strdeq	r0, [r0], -r4
   11130:	andeq	r0, r0, r0, lsl #30
   11134:	andeq	r0, r0, r8, asr #29
   11138:	andeq	r0, r0, r0, lsr pc
   1113c:			; <UNDEFINED> instruction: 0x00000eb0
   11140:	andeq	r0, r0, r4, lsr #31
   11144:	andeq	r0, r0, r0, ror lr
   11148:	andeq	r0, r0, ip, lsr lr
   1114c:	andeq	r0, r0, r8, ror #30
   11150:	ldrdeq	r0, [r0], -ip
   11154:	andeq	r0, r0, r8, asr sp
   11158:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1115c:	muleq	r0, r8, sp

00011160 <teste_lista_remove@@Base>:
   11160:	ldr	r2, [pc, #416]	; 11308 <teste_lista_remove@@Base+0x1a8>
   11164:	ldr	r3, [pc, #416]	; 1130c <teste_lista_remove@@Base+0x1ac>
   11168:	push	{r4, r5, r6, lr}
   1116c:	sub	sp, sp, #8
   11170:	add	r2, pc, r2
   11174:	add	r3, pc, r3
   11178:	str	r2, [sp, #4]
   1117c:	str	r3, [sp]
   11180:	ldr	r2, [pc, #392]	; 11310 <teste_lista_remove@@Base+0x1b0>
   11184:	ldr	r3, [pc, #392]	; 11314 <teste_lista_remove@@Base+0x1b4>
   11188:	ldr	r1, [pc, #392]	; 11318 <teste_lista_remove@@Base+0x1b8>
   1118c:	add	r3, pc, r3
   11190:	add	r2, pc, r2
   11194:	add	r1, pc, r1
   11198:	mov	r0, #5
   1119c:	bl	10c1c <_l@@Base>
   111a0:	mov	r4, r0
   111a4:	ldr	r0, [pc, #368]	; 1131c <teste_lista_remove@@Base+0x1bc>
   111a8:	add	r0, pc, r0
   111ac:	bl	109a8 <printf@plt>
   111b0:	ldr	r3, [r4]
   111b4:	mov	r0, r4
   111b8:	ldr	r3, [r3, #4]
   111bc:	ldr	r3, [r3, #4]
   111c0:	ldr	r1, [r3, #4]
   111c4:	bl	11b30 <lista_remove@@Base>
   111c8:	ldr	r3, [r4, #4]
   111cc:	cmp	r3, r0
   111d0:	moveq	r5, #0
   111d4:	beq	111e8 <teste_lista_remove@@Base+0x88>
   111d8:	ldr	r0, [pc, #320]	; 11320 <teste_lista_remove@@Base+0x1c0>
   111dc:	mov	r5, #1
   111e0:	add	r0, pc, r0
   111e4:	bl	109a8 <printf@plt>
   111e8:	ldr	r3, [r4, #8]
   111ec:	cmp	r3, #4
   111f0:	beq	11204 <teste_lista_remove@@Base+0xa4>
   111f4:	ldr	r0, [pc, #296]	; 11324 <teste_lista_remove@@Base+0x1c4>
   111f8:	add	r5, r5, #1
   111fc:	add	r0, pc, r0
   11200:	bl	109a8 <printf@plt>
   11204:	ldr	r6, [r4]
   11208:	ldr	r1, [pc, #280]	; 11328 <teste_lista_remove@@Base+0x1c8>
   1120c:	ldr	r0, [r6]
   11210:	add	r1, pc, r1
   11214:	bl	1099c <strcmp@plt>
   11218:	cmp	r0, #0
   1121c:	bne	1123c <teste_lista_remove@@Base+0xdc>
   11220:	ldr	r6, [r6, #4]
   11224:	ldr	r1, [pc, #256]	; 1132c <teste_lista_remove@@Base+0x1cc>
   11228:	ldr	r0, [r6]
   1122c:	add	r1, pc, r1
   11230:	bl	1099c <strcmp@plt>
   11234:	cmp	r0, #0
   11238:	beq	1128c <teste_lista_remove@@Base+0x12c>
   1123c:	ldr	r0, [pc, #236]	; 11330 <teste_lista_remove@@Base+0x1d0>
   11240:	add	r5, r5, #1
   11244:	add	r0, pc, r0
   11248:	bl	109a8 <printf@plt>
   1124c:	mov	r1, #0
   11250:	mov	r0, r4
   11254:	bl	11b30 <lista_remove@@Base>
   11258:	cmp	r0, #0
   1125c:	beq	112fc <teste_lista_remove@@Base+0x19c>
   11260:	ldr	r0, [pc, #204]	; 11334 <teste_lista_remove@@Base+0x1d4>
   11264:	add	r5, r5, #1
   11268:	add	r0, pc, r0
   1126c:	bl	109a8 <printf@plt>
   11270:	mov	r0, r4
   11274:	bl	119ec <lista_apaga@@Base>
   11278:	mov	r0, #10
   1127c:	bl	10a2c <putchar@plt>
   11280:	mov	r0, r5
   11284:	add	sp, sp, #8
   11288:	pop	{r4, r5, r6, pc}
   1128c:	ldr	r6, [r6, #4]
   11290:	ldr	r1, [pc, #160]	; 11338 <teste_lista_remove@@Base+0x1d8>
   11294:	ldr	r0, [r6]
   11298:	add	r1, pc, r1
   1129c:	bl	1099c <strcmp@plt>
   112a0:	cmp	r0, #0
   112a4:	bne	1123c <teste_lista_remove@@Base+0xdc>
   112a8:	ldr	r3, [r6, #4]
   112ac:	ldr	r1, [pc, #136]	; 1133c <teste_lista_remove@@Base+0x1dc>
   112b0:	ldr	r0, [r3]
   112b4:	add	r1, pc, r1
   112b8:	bl	1099c <strcmp@plt>
   112bc:	subs	r1, r0, #0
   112c0:	bne	1123c <teste_lista_remove@@Base+0xdc>
   112c4:	mov	r0, r4
   112c8:	bl	11b30 <lista_remove@@Base>
   112cc:	cmp	r0, #0
   112d0:	bne	11260 <teste_lista_remove@@Base+0x100>
   112d4:	mov	r0, r4
   112d8:	bl	119ec <lista_apaga@@Base>
   112dc:	cmp	r5, #0
   112e0:	bne	11278 <teste_lista_remove@@Base+0x118>
   112e4:	ldr	r0, [pc, #84]	; 11340 <teste_lista_remove@@Base+0x1e0>
   112e8:	add	r0, pc, r0
   112ec:	bl	109e4 <puts@plt>
   112f0:	mov	r0, r5
   112f4:	add	sp, sp, #8
   112f8:	pop	{r4, r5, r6, pc}
   112fc:	mov	r0, r4
   11300:	bl	119ec <lista_apaga@@Base>
   11304:	b	11278 <teste_lista_remove@@Base+0x118>
   11308:	andeq	r0, r0, r4, asr #28
   1130c:	andeq	r0, r0, r4, asr #28
   11310:	andeq	r0, r0, ip, lsl lr
   11314:	andeq	r0, r0, ip, lsl lr
   11318:	andeq	r0, r0, ip, lsl lr
   1131c:	andeq	r0, r0, r4, lsl lr
   11320:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11324:	andeq	r0, r0, r0, lsl lr
   11328:	andeq	r0, r0, r0, lsr #27
   1132c:	andeq	r0, r0, r0, lsl #27
   11330:	andeq	r0, r0, r4, lsl #28
   11334:	andeq	r0, r0, r8, lsl lr
   11338:	andeq	r0, r0, r0, lsl sp
   1133c:	andeq	r0, r0, r0, lsl #26
   11340:	andeq	r0, r0, r8, lsl fp

00011344 <teste_lista_pesquisa@@Base>:
   11344:	push	{r4, r5, lr}
   11348:	sub	sp, sp, #20
   1134c:	ldr	r3, [pc, #388]	; 114d8 <teste_lista_pesquisa@@Base+0x194>
   11350:	ldr	r5, [pc, #388]	; 114dc <teste_lista_pesquisa@@Base+0x198>
   11354:	add	r3, pc, r3
   11358:	add	r5, pc, r5
   1135c:	mov	r2, r3
   11360:	mov	r1, r3
   11364:	str	r3, [sp, #12]
   11368:	str	r3, [sp, #8]
   1136c:	str	r3, [sp]
   11370:	str	r5, [sp, #4]
   11374:	mov	r0, #7
   11378:	bl	10c1c <_l@@Base>
   1137c:	mov	r4, r0
   11380:	ldr	r0, [pc, #344]	; 114e0 <teste_lista_pesquisa@@Base+0x19c>
   11384:	add	r0, pc, r0
   11388:	bl	109a8 <printf@plt>
   1138c:	mov	r1, r5
   11390:	mov	r0, r4
   11394:	mov	r2, #0
   11398:	bl	11bac <lista_pesquisa@@Base>
   1139c:	ldr	r3, [r4]
   113a0:	ldr	r3, [r3, #4]
   113a4:	ldr	r3, [r3, #4]
   113a8:	ldr	r3, [r3, #4]
   113ac:	ldr	r3, [r3, #4]
   113b0:	cmp	r3, r0
   113b4:	moveq	r5, #0
   113b8:	beq	113cc <teste_lista_pesquisa@@Base+0x88>
   113bc:	ldr	r0, [pc, #288]	; 114e4 <teste_lista_pesquisa@@Base+0x1a0>
   113c0:	mov	r5, #1
   113c4:	add	r0, pc, r0
   113c8:	bl	109a8 <printf@plt>
   113cc:	ldr	r1, [pc, #276]	; 114e8 <teste_lista_pesquisa@@Base+0x1a4>
   113d0:	mov	r2, #0
   113d4:	add	r1, pc, r1
   113d8:	mov	r0, r4
   113dc:	bl	11bac <lista_pesquisa@@Base>
   113e0:	cmp	r0, #0
   113e4:	beq	113f8 <teste_lista_pesquisa@@Base+0xb4>
   113e8:	ldr	r0, [pc, #252]	; 114ec <teste_lista_pesquisa@@Base+0x1a8>
   113ec:	add	r5, r5, #1
   113f0:	add	r0, pc, r0
   113f4:	bl	109a8 <printf@plt>
   113f8:	ldr	r1, [pc, #240]	; 114f0 <teste_lista_pesquisa@@Base+0x1ac>
   113fc:	mov	r2, #1
   11400:	add	r1, pc, r1
   11404:	mov	r0, r4
   11408:	bl	11bac <lista_pesquisa@@Base>
   1140c:	ldr	r3, [r4]
   11410:	ldr	r3, [r3, #4]
   11414:	ldr	r3, [r3, #4]
   11418:	ldr	r3, [r3, #4]
   1141c:	ldr	r3, [r3, #4]
   11420:	ldr	r3, [r3, #4]
   11424:	ldr	r3, [r3, #4]
   11428:	cmp	r3, r0
   1142c:	beq	11494 <teste_lista_pesquisa@@Base+0x150>
   11430:	ldr	r0, [pc, #188]	; 114f4 <teste_lista_pesquisa@@Base+0x1b0>
   11434:	add	r5, r5, #1
   11438:	add	r0, pc, r0
   1143c:	bl	109a8 <printf@plt>
   11440:	ldr	r1, [pc, #176]	; 114f8 <teste_lista_pesquisa@@Base+0x1b4>
   11444:	mov	r2, #1
   11448:	add	r1, pc, r1
   1144c:	mov	r0, r4
   11450:	bl	11bac <lista_pesquisa@@Base>
   11454:	cmp	r0, #0
   11458:	beq	11488 <teste_lista_pesquisa@@Base+0x144>
   1145c:	ldr	r0, [pc, #152]	; 114fc <teste_lista_pesquisa@@Base+0x1b8>
   11460:	add	r5, r5, #1
   11464:	add	r0, pc, r0
   11468:	bl	109a8 <printf@plt>
   1146c:	mov	r0, r4
   11470:	bl	119ec <lista_apaga@@Base>
   11474:	mov	r0, #10
   11478:	bl	10a2c <putchar@plt>
   1147c:	mov	r0, r5
   11480:	add	sp, sp, #20
   11484:	pop	{r4, r5, pc}
   11488:	mov	r0, r4
   1148c:	bl	119ec <lista_apaga@@Base>
   11490:	b	11474 <teste_lista_pesquisa@@Base+0x130>
   11494:	ldr	r1, [pc, #100]	; 11500 <teste_lista_pesquisa@@Base+0x1bc>
   11498:	mov	r2, #1
   1149c:	add	r1, pc, r1
   114a0:	mov	r0, r4
   114a4:	bl	11bac <lista_pesquisa@@Base>
   114a8:	cmp	r0, #0
   114ac:	bne	1145c <teste_lista_pesquisa@@Base+0x118>
   114b0:	mov	r0, r4
   114b4:	bl	119ec <lista_apaga@@Base>
   114b8:	cmp	r5, #0
   114bc:	bne	11474 <teste_lista_pesquisa@@Base+0x130>
   114c0:	ldr	r0, [pc, #60]	; 11504 <teste_lista_pesquisa@@Base+0x1c0>
   114c4:	add	r0, pc, r0
   114c8:	bl	109e4 <puts@plt>
   114cc:	mov	r0, r5
   114d0:	add	sp, sp, #20
   114d4:	pop	{r4, r5, pc}
   114d8:			; <UNDEFINED> instruction: 0x00000ab0
   114dc:	andeq	r0, r0, ip, asr sp
   114e0:	andeq	r0, r0, r4, lsr sp
   114e4:	andeq	r0, r0, r8, lsl #26
   114e8:	andeq	r0, r0, r0, asr #26
   114ec:	andeq	r0, r0, ip, lsr #26
   114f0:	andeq	r0, r0, r4, lsl #20
   114f4:	muleq	r0, r4, ip
   114f8:	andeq	r0, r0, ip, asr #25
   114fc:			; <UNDEFINED> instruction: 0x00000cb8
   11500:	andeq	r0, r0, r8, ror ip
   11504:	andeq	r0, r0, ip, lsr r9

00011508 <teste_lista_ordena@@Base>:
   11508:	ldr	r2, [pc, #500]	; 11704 <teste_lista_ordena@@Base+0x1fc>
   1150c:	ldr	r3, [pc, #500]	; 11708 <teste_lista_ordena@@Base+0x200>
   11510:	push	{r4, r5, r6, lr}
   11514:	sub	sp, sp, #8
   11518:	add	r2, pc, r2
   1151c:	add	r3, pc, r3
   11520:	str	r2, [sp, #4]
   11524:	str	r3, [sp]
   11528:	ldr	r2, [pc, #476]	; 1170c <teste_lista_ordena@@Base+0x204>
   1152c:	ldr	r3, [pc, #476]	; 11710 <teste_lista_ordena@@Base+0x208>
   11530:	ldr	r1, [pc, #476]	; 11714 <teste_lista_ordena@@Base+0x20c>
   11534:	add	r3, pc, r3
   11538:	add	r2, pc, r2
   1153c:	add	r1, pc, r1
   11540:	mov	r0, #5
   11544:	bl	10c1c <_l@@Base>
   11548:	mov	r5, r0
   1154c:	ldr	r0, [pc, #452]	; 11718 <teste_lista_ordena@@Base+0x210>
   11550:	add	r0, pc, r0
   11554:	bl	109a8 <printf@plt>
   11558:	mov	r0, #0
   1155c:	bl	11c48 <lista_ordena@@Base>
   11560:	cmn	r0, #1
   11564:	moveq	r4, #0
   11568:	beq	1157c <teste_lista_ordena@@Base+0x74>
   1156c:	ldr	r0, [pc, #424]	; 1171c <teste_lista_ordena@@Base+0x214>
   11570:	mov	r4, #1
   11574:	add	r0, pc, r0
   11578:	bl	109a8 <printf@plt>
   1157c:	mov	r0, r5
   11580:	bl	11c48 <lista_ordena@@Base>
   11584:	ldr	r6, [r5]
   11588:	ldr	r1, [pc, #400]	; 11720 <teste_lista_ordena@@Base+0x218>
   1158c:	ldr	r0, [r6]
   11590:	add	r1, pc, r1
   11594:	bl	1099c <strcmp@plt>
   11598:	cmp	r0, #0
   1159c:	bne	115bc <teste_lista_ordena@@Base+0xb4>
   115a0:	ldr	r6, [r6, #4]
   115a4:	ldr	r1, [pc, #376]	; 11724 <teste_lista_ordena@@Base+0x21c>
   115a8:	ldr	r0, [r6]
   115ac:	add	r1, pc, r1
   115b0:	bl	1099c <strcmp@plt>
   115b4:	cmp	r0, #0
   115b8:	beq	116ac <teste_lista_ordena@@Base+0x1a4>
   115bc:	ldr	r0, [pc, #356]	; 11728 <teste_lista_ordena@@Base+0x220>
   115c0:	add	r4, r4, #1
   115c4:	add	r0, pc, r0
   115c8:	bl	109a8 <printf@plt>
   115cc:	ldr	r6, [r5, #4]
   115d0:	ldr	r1, [pc, #340]	; 1172c <teste_lista_ordena@@Base+0x224>
   115d4:	ldr	r0, [r6]
   115d8:	add	r1, pc, r1
   115dc:	bl	1099c <strcmp@plt>
   115e0:	cmp	r0, #0
   115e4:	bne	11604 <teste_lista_ordena@@Base+0xfc>
   115e8:	ldr	r6, [r6, #8]
   115ec:	ldr	r1, [pc, #316]	; 11730 <teste_lista_ordena@@Base+0x228>
   115f0:	ldr	r0, [r6]
   115f4:	add	r1, pc, r1
   115f8:	bl	1099c <strcmp@plt>
   115fc:	cmp	r0, #0
   11600:	beq	11630 <teste_lista_ordena@@Base+0x128>
   11604:	ldr	r0, [pc, #296]	; 11734 <teste_lista_ordena@@Base+0x22c>
   11608:	add	r4, r4, #1
   1160c:	add	r0, pc, r0
   11610:	bl	109a8 <printf@plt>
   11614:	mov	r0, r5
   11618:	bl	119ec <lista_apaga@@Base>
   1161c:	mov	r0, #10
   11620:	bl	10a2c <putchar@plt>
   11624:	mov	r0, r4
   11628:	add	sp, sp, #8
   1162c:	pop	{r4, r5, r6, pc}
   11630:	ldr	r6, [r6, #8]
   11634:	ldr	r1, [pc, #252]	; 11738 <teste_lista_ordena@@Base+0x230>
   11638:	ldr	r0, [r6]
   1163c:	add	r1, pc, r1
   11640:	bl	1099c <strcmp@plt>
   11644:	cmp	r0, #0
   11648:	bne	11604 <teste_lista_ordena@@Base+0xfc>
   1164c:	ldr	r6, [r6, #8]
   11650:	ldr	r1, [pc, #228]	; 1173c <teste_lista_ordena@@Base+0x234>
   11654:	ldr	r0, [r6]
   11658:	add	r1, pc, r1
   1165c:	bl	1099c <strcmp@plt>
   11660:	cmp	r0, #0
   11664:	bne	11604 <teste_lista_ordena@@Base+0xfc>
   11668:	ldr	r3, [r6, #8]
   1166c:	ldr	r1, [pc, #204]	; 11740 <teste_lista_ordena@@Base+0x238>
   11670:	ldr	r0, [r3]
   11674:	add	r1, pc, r1
   11678:	bl	1099c <strcmp@plt>
   1167c:	cmp	r0, #0
   11680:	bne	11604 <teste_lista_ordena@@Base+0xfc>
   11684:	mov	r0, r5
   11688:	bl	119ec <lista_apaga@@Base>
   1168c:	cmp	r4, #0
   11690:	bne	1161c <teste_lista_ordena@@Base+0x114>
   11694:	ldr	r0, [pc, #168]	; 11744 <teste_lista_ordena@@Base+0x23c>
   11698:	add	r0, pc, r0
   1169c:	bl	109e4 <puts@plt>
   116a0:	mov	r0, r4
   116a4:	add	sp, sp, #8
   116a8:	pop	{r4, r5, r6, pc}
   116ac:	ldr	r6, [r6, #4]
   116b0:	ldr	r1, [pc, #144]	; 11748 <teste_lista_ordena@@Base+0x240>
   116b4:	ldr	r0, [r6]
   116b8:	add	r1, pc, r1
   116bc:	bl	1099c <strcmp@plt>
   116c0:	cmp	r0, #0
   116c4:	bne	115bc <teste_lista_ordena@@Base+0xb4>
   116c8:	ldr	r6, [r6, #4]
   116cc:	ldr	r1, [pc, #120]	; 1174c <teste_lista_ordena@@Base+0x244>
   116d0:	ldr	r0, [r6]
   116d4:	add	r1, pc, r1
   116d8:	bl	1099c <strcmp@plt>
   116dc:	cmp	r0, #0
   116e0:	bne	115bc <teste_lista_ordena@@Base+0xb4>
   116e4:	ldr	r3, [r6, #4]
   116e8:	ldr	r1, [pc, #96]	; 11750 <teste_lista_ordena@@Base+0x248>
   116ec:	ldr	r0, [r3]
   116f0:	add	r1, pc, r1
   116f4:	bl	1099c <strcmp@plt>
   116f8:	cmp	r0, #0
   116fc:	beq	115cc <teste_lista_ordena@@Base+0xc4>
   11700:	b	115bc <teste_lista_ordena@@Base+0xb4>
   11704:	andeq	r0, r0, r0, asr ip
   11708:	andeq	r0, r0, r0, asr ip
   1170c:	andeq	r0, r0, r8, lsr #24
   11710:	andeq	r0, r0, r8, lsr #24
   11714:	andeq	r0, r0, r8, lsr #24
   11718:	andeq	r0, r0, r0, lsr #24
   1171c:	andeq	r0, r0, r0, lsl ip
   11720:	ldrdeq	r0, [r0], -r4
   11724:			; <UNDEFINED> instruction: 0x00000bb4
   11728:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1172c:	andeq	r0, r0, r4, lsl #23
   11730:	andeq	r0, r0, r4, ror fp
   11734:	andeq	r0, r0, r8, ror #23
   11738:	andeq	r0, r0, r0, lsr fp
   1173c:	andeq	r0, r0, r8, lsl #22
   11740:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11744:	andeq	r0, r0, r8, ror #14
   11748:			; <UNDEFINED> instruction: 0x00000ab4
   1174c:	muleq	r0, r4, sl
   11750:	andeq	r0, r0, ip, ror #20

00011754 <teste_lista_inverte@@Base>:
   11754:	ldr	r2, [pc, #528]	; 1196c <teste_lista_inverte@@Base+0x218>
   11758:	ldr	r3, [pc, #528]	; 11970 <teste_lista_inverte@@Base+0x21c>
   1175c:	push	{r4, r5, r6, lr}
   11760:	sub	sp, sp, #8
   11764:	add	r2, pc, r2
   11768:	add	r3, pc, r3
   1176c:	str	r2, [sp, #4]
   11770:	str	r3, [sp]
   11774:	ldr	r2, [pc, #504]	; 11974 <teste_lista_inverte@@Base+0x220>
   11778:	ldr	r3, [pc, #504]	; 11978 <teste_lista_inverte@@Base+0x224>
   1177c:	ldr	r1, [pc, #504]	; 1197c <teste_lista_inverte@@Base+0x228>
   11780:	add	r3, pc, r3
   11784:	add	r2, pc, r2
   11788:	add	r1, pc, r1
   1178c:	mov	r0, #5
   11790:	bl	10c1c <_l@@Base>
   11794:	mov	r5, r0
   11798:	ldr	r0, [pc, #480]	; 11980 <teste_lista_inverte@@Base+0x22c>
   1179c:	add	r0, pc, r0
   117a0:	bl	109a8 <printf@plt>
   117a4:	mov	r0, #0
   117a8:	bl	11cd0 <lista_inverte@@Base>
   117ac:	cmn	r0, #1
   117b0:	moveq	r4, #0
   117b4:	beq	117c8 <teste_lista_inverte@@Base+0x74>
   117b8:	ldr	r0, [pc, #452]	; 11984 <teste_lista_inverte@@Base+0x230>
   117bc:	mov	r4, #1
   117c0:	add	r0, pc, r0
   117c4:	bl	109a8 <printf@plt>
   117c8:	mov	r0, r5
   117cc:	bl	11cd0 <lista_inverte@@Base>
   117d0:	ldr	r3, [r5, #8]
   117d4:	cmp	r3, #5
   117d8:	beq	117ec <teste_lista_inverte@@Base+0x98>
   117dc:	ldr	r0, [pc, #420]	; 11988 <teste_lista_inverte@@Base+0x234>
   117e0:	add	r4, r4, #1
   117e4:	add	r0, pc, r0
   117e8:	bl	109a8 <printf@plt>
   117ec:	ldr	r6, [r5]
   117f0:	ldr	r1, [pc, #404]	; 1198c <teste_lista_inverte@@Base+0x238>
   117f4:	ldr	r0, [r6]
   117f8:	add	r1, pc, r1
   117fc:	bl	1099c <strcmp@plt>
   11800:	cmp	r0, #0
   11804:	bne	11824 <teste_lista_inverte@@Base+0xd0>
   11808:	ldr	r6, [r6, #4]
   1180c:	ldr	r1, [pc, #380]	; 11990 <teste_lista_inverte@@Base+0x23c>
   11810:	ldr	r0, [r6]
   11814:	add	r1, pc, r1
   11818:	bl	1099c <strcmp@plt>
   1181c:	cmp	r0, #0
   11820:	beq	11914 <teste_lista_inverte@@Base+0x1c0>
   11824:	ldr	r0, [pc, #360]	; 11994 <teste_lista_inverte@@Base+0x240>
   11828:	add	r4, r4, #1
   1182c:	add	r0, pc, r0
   11830:	bl	109a8 <printf@plt>
   11834:	ldr	r6, [r5, #4]
   11838:	ldr	r1, [pc, #344]	; 11998 <teste_lista_inverte@@Base+0x244>
   1183c:	ldr	r0, [r6]
   11840:	add	r1, pc, r1
   11844:	bl	1099c <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	bne	1186c <teste_lista_inverte@@Base+0x118>
   11850:	ldr	r6, [r6, #8]
   11854:	ldr	r1, [pc, #320]	; 1199c <teste_lista_inverte@@Base+0x248>
   11858:	ldr	r0, [r6]
   1185c:	add	r1, pc, r1
   11860:	bl	1099c <strcmp@plt>
   11864:	cmp	r0, #0
   11868:	beq	11898 <teste_lista_inverte@@Base+0x144>
   1186c:	ldr	r0, [pc, #300]	; 119a0 <teste_lista_inverte@@Base+0x24c>
   11870:	add	r4, r4, #1
   11874:	add	r0, pc, r0
   11878:	bl	109a8 <printf@plt>
   1187c:	mov	r0, r5
   11880:	bl	119ec <lista_apaga@@Base>
   11884:	mov	r0, #10
   11888:	bl	10a2c <putchar@plt>
   1188c:	mov	r0, r4
   11890:	add	sp, sp, #8
   11894:	pop	{r4, r5, r6, pc}
   11898:	ldr	r6, [r6, #8]
   1189c:	ldr	r1, [pc, #256]	; 119a4 <teste_lista_inverte@@Base+0x250>
   118a0:	ldr	r0, [r6]
   118a4:	add	r1, pc, r1
   118a8:	bl	1099c <strcmp@plt>
   118ac:	cmp	r0, #0
   118b0:	bne	1186c <teste_lista_inverte@@Base+0x118>
   118b4:	ldr	r6, [r6, #8]
   118b8:	ldr	r1, [pc, #232]	; 119a8 <teste_lista_inverte@@Base+0x254>
   118bc:	ldr	r0, [r6]
   118c0:	add	r1, pc, r1
   118c4:	bl	1099c <strcmp@plt>
   118c8:	cmp	r0, #0
   118cc:	bne	1186c <teste_lista_inverte@@Base+0x118>
   118d0:	ldr	r3, [r6, #8]
   118d4:	ldr	r1, [pc, #208]	; 119ac <teste_lista_inverte@@Base+0x258>
   118d8:	ldr	r0, [r3]
   118dc:	add	r1, pc, r1
   118e0:	bl	1099c <strcmp@plt>
   118e4:	cmp	r0, #0
   118e8:	bne	1186c <teste_lista_inverte@@Base+0x118>
   118ec:	mov	r0, r5
   118f0:	bl	119ec <lista_apaga@@Base>
   118f4:	cmp	r4, #0
   118f8:	bne	11884 <teste_lista_inverte@@Base+0x130>
   118fc:	ldr	r0, [pc, #172]	; 119b0 <teste_lista_inverte@@Base+0x25c>
   11900:	add	r0, pc, r0
   11904:	bl	109e4 <puts@plt>
   11908:	mov	r0, r4
   1190c:	add	sp, sp, #8
   11910:	pop	{r4, r5, r6, pc}
   11914:	ldr	r6, [r6, #4]
   11918:	ldr	r1, [pc, #148]	; 119b4 <teste_lista_inverte@@Base+0x260>
   1191c:	ldr	r0, [r6]
   11920:	add	r1, pc, r1
   11924:	bl	1099c <strcmp@plt>
   11928:	cmp	r0, #0
   1192c:	bne	11824 <teste_lista_inverte@@Base+0xd0>
   11930:	ldr	r6, [r6, #4]
   11934:	ldr	r1, [pc, #124]	; 119b8 <teste_lista_inverte@@Base+0x264>
   11938:	ldr	r0, [r6]
   1193c:	add	r1, pc, r1
   11940:	bl	1099c <strcmp@plt>
   11944:	cmp	r0, #0
   11948:	bne	11824 <teste_lista_inverte@@Base+0xd0>
   1194c:	ldr	r3, [r6, #4]
   11950:	ldr	r1, [pc, #100]	; 119bc <teste_lista_inverte@@Base+0x268>
   11954:	ldr	r0, [r3]
   11958:	add	r1, pc, r1
   1195c:	bl	1099c <strcmp@plt>
   11960:	cmp	r0, #0
   11964:	beq	11834 <teste_lista_inverte@@Base+0xe0>
   11968:	b	11824 <teste_lista_inverte@@Base+0xd0>
   1196c:	andeq	r0, r0, r4, lsl #20
   11970:	andeq	r0, r0, r4, lsl #20
   11974:	ldrdeq	r0, [r0], -ip
   11978:	ldrdeq	r0, [r0], -ip
   1197c:	ldrdeq	r0, [r0], -ip
   11980:	muleq	r0, r8, sl
   11984:	andeq	r0, r0, r4, asr #19
   11988:	andeq	r0, r0, r4, ror #20
   1198c:	andeq	r0, r0, r0, ror r9
   11990:	andeq	r0, r0, r8, asr r9
   11994:	andeq	r0, r0, r8, asr #20
   11998:	andeq	r0, r0, r4, lsr #18
   1199c:	andeq	r0, r0, r4, lsl #18
   119a0:	andeq	r0, r0, r0, lsl #19
   119a4:			; <UNDEFINED> instruction: 0x000008b8
   119a8:	andeq	r0, r0, ip, lsr #17
   119ac:	andeq	r0, r0, ip, lsl #17
   119b0:	andeq	r0, r0, r0, lsl #10
   119b4:	andeq	r0, r0, ip, lsr r8
   119b8:	andeq	r0, r0, r4, lsr #16
   119bc:	andeq	r0, r0, ip, lsl #16

000119c0 <lista_nova@@Base>:
   119c0:	push	{r4, lr}
   119c4:	mov	r0, #12
   119c8:	bl	109f0 <malloc@plt>
   119cc:	cmp	r0, #0
   119d0:	movne	r3, #0
   119d4:	strne	r3, [r0, #8]
   119d8:	pop	{r4, pc}

000119dc <lista_tamanho@@Base>:
   119dc:	cmp	r0, #0
   119e0:	ldrne	r0, [r0, #8]
   119e4:	mvneq	r0, #0
   119e8:	bx	lr

000119ec <lista_apaga@@Base>:
   119ec:	push	{r4, r5, r6, lr}
   119f0:	subs	r6, r0, #0
   119f4:	popeq	{r4, r5, r6, pc}
   119f8:	bl	119dc <lista_tamanho@@Base>
   119fc:	cmp	r0, #0
   11a00:	beq	11a1c <lista_apaga@@Base+0x30>
   11a04:	ldr	r5, [r6]
   11a08:	cmp	r5, #0
   11a0c:	beq	11a1c <lista_apaga@@Base+0x30>
   11a10:	ldr	r4, [r5, #4]
   11a14:	cmp	r4, #0
   11a18:	bne	11a30 <lista_apaga@@Base+0x44>
   11a1c:	mov	r0, r6
   11a20:	pop	{r4, r5, r6, lr}
   11a24:	b	109b4 <free@plt>
   11a28:	mov	r5, r4
   11a2c:	ldr	r4, [r4, #4]
   11a30:	ldr	r0, [r5]
   11a34:	bl	109b4 <free@plt>
   11a38:	mov	r0, r5
   11a3c:	bl	109b4 <free@plt>
   11a40:	cmp	r4, #0
   11a44:	bne	11a28 <lista_apaga@@Base+0x3c>
   11a48:	mov	r0, r6
   11a4c:	pop	{r4, r5, r6, lr}
   11a50:	b	109b4 <free@plt>

00011a54 <lista_inicio@@Base>:
   11a54:	cmp	r0, #0
   11a58:	ldrne	r0, [r0]
   11a5c:	bx	lr

00011a60 <lista_fim@@Base>:
   11a60:	cmp	r0, #0
   11a64:	ldrne	r0, [r0, #4]
   11a68:	bx	lr

00011a6c <lista_insere@@Base>:
   11a6c:	push	{r4, r5, r6, r7, r8, lr}
   11a70:	subs	r5, r0, #0
   11a74:	beq	11b28 <lista_insere@@Base+0xbc>
   11a78:	mov	r0, #12
   11a7c:	mov	r7, r1
   11a80:	mov	r6, r2
   11a84:	bl	109f0 <malloc@plt>
   11a88:	mov	r4, r0
   11a8c:	mov	r0, r7
   11a90:	bl	10a14 <strlen@plt>
   11a94:	add	r8, r0, #1
   11a98:	mov	r0, r8
   11a9c:	bl	109f0 <malloc@plt>
   11aa0:	mov	r2, r8
   11aa4:	mov	r1, r7
   11aa8:	str	r0, [r4]
   11aac:	bl	109c0 <memcpy@plt>
   11ab0:	ldr	r3, [r5, #8]
   11ab4:	cmp	r3, #0
   11ab8:	beq	11afc <lista_insere@@Base+0x90>
   11abc:	cmp	r6, #0
   11ac0:	beq	11b10 <lista_insere@@Base+0xa4>
   11ac4:	ldr	r2, [r5]
   11ac8:	cmp	r6, r2
   11acc:	streq	r6, [r4, #4]
   11ad0:	ldrne	r2, [r6, #8]
   11ad4:	streq	r4, [r5]
   11ad8:	streq	r4, [r4, #8]
   11adc:	strne	r4, [r2, #4]
   11ae0:	strne	r2, [r4, #8]
   11ae4:	strne	r6, [r4, #4]
   11ae8:	strne	r4, [r6, #8]
   11aec:	add	r3, r3, #1
   11af0:	str	r3, [r5, #8]
   11af4:	mov	r0, r4
   11af8:	pop	{r4, r5, r6, r7, r8, pc}
   11afc:	str	r3, [r4, #8]
   11b00:	str	r3, [r4, #4]
   11b04:	str	r4, [r5]
   11b08:	str	r4, [r5, #4]
   11b0c:	b	11aec <lista_insere@@Base+0x80>
   11b10:	ldr	r2, [r5, #4]
   11b14:	str	r6, [r4, #4]
   11b18:	str	r2, [r4, #8]
   11b1c:	str	r4, [r2, #4]
   11b20:	str	r4, [r5, #4]
   11b24:	b	11aec <lista_insere@@Base+0x80>
   11b28:	mov	r4, r5
   11b2c:	b	11af4 <lista_insere@@Base+0x88>

00011b30 <lista_remove@@Base>:
   11b30:	push	{r4, r5, r6, lr}
   11b34:	subs	r4, r1, #0
   11b38:	beq	11ba4 <lista_remove@@Base+0x74>
   11b3c:	ldr	r3, [r0]
   11b40:	ldr	r6, [r4, #4]
   11b44:	cmp	r4, r3
   11b48:	moveq	r3, #0
   11b4c:	streq	r3, [r6, #8]
   11b50:	streq	r6, [r0]
   11b54:	beq	11b7c <lista_remove@@Base+0x4c>
   11b58:	ldr	r3, [r0, #4]
   11b5c:	cmp	r4, r3
   11b60:	ldr	r3, [r4, #8]
   11b64:	moveq	r2, #0
   11b68:	strne	r6, [r3, #4]
   11b6c:	ldrne	r2, [r4, #4]
   11b70:	streq	r2, [r3, #4]
   11b74:	streq	r3, [r0, #4]
   11b78:	strne	r3, [r2, #8]
   11b7c:	mov	r5, r0
   11b80:	ldr	r0, [r4]
   11b84:	bl	109b4 <free@plt>
   11b88:	mov	r0, r4
   11b8c:	bl	109b4 <free@plt>
   11b90:	ldr	r3, [r5, #8]
   11b94:	sub	r3, r3, #1
   11b98:	str	r3, [r5, #8]
   11b9c:	mov	r0, r6
   11ba0:	pop	{r4, r5, r6, pc}
   11ba4:	mov	r6, r4
   11ba8:	b	11b9c <lista_remove@@Base+0x6c>

00011bac <lista_pesquisa@@Base>:
   11bac:	cmp	r0, #0
   11bb0:	push	{r4, r5, r6, r7, r8, lr}
   11bb4:	beq	11c04 <lista_pesquisa@@Base+0x58>
   11bb8:	cmp	r2, #0
   11bbc:	mov	r6, r1
   11bc0:	mov	r5, r2
   11bc4:	beq	11c10 <lista_pesquisa@@Base+0x64>
   11bc8:	cmp	r2, #1
   11bcc:	bne	11c04 <lista_pesquisa@@Base+0x58>
   11bd0:	ldmib	r0, {r4, r7}
   11bd4:	cmp	r7, #0
   11bd8:	ble	11c04 <lista_pesquisa@@Base+0x58>
   11bdc:	mov	r5, #0
   11be0:	mov	r1, r6
   11be4:	ldr	r0, [r4]
   11be8:	bl	1099c <strcmp@plt>
   11bec:	add	r5, r5, #1
   11bf0:	cmp	r0, #0
   11bf4:	beq	11c08 <lista_pesquisa@@Base+0x5c>
   11bf8:	cmp	r5, r7
   11bfc:	ldr	r4, [r4, #8]
   11c00:	bne	11be0 <lista_pesquisa@@Base+0x34>
   11c04:	mov	r4, #0
   11c08:	mov	r0, r4
   11c0c:	pop	{r4, r5, r6, r7, r8, pc}
   11c10:	ldr	r7, [r0, #8]
   11c14:	ldr	r4, [r0]
   11c18:	cmp	r7, #0
   11c1c:	ble	11c04 <lista_pesquisa@@Base+0x58>
   11c20:	mov	r1, r6
   11c24:	ldr	r0, [r4]
   11c28:	bl	1099c <strcmp@plt>
   11c2c:	add	r5, r5, #1
   11c30:	cmp	r0, #0
   11c34:	beq	11c08 <lista_pesquisa@@Base+0x5c>
   11c38:	cmp	r5, r7
   11c3c:	ldr	r4, [r4, #4]
   11c40:	bne	11c20 <lista_pesquisa@@Base+0x74>
   11c44:	b	11c04 <lista_pesquisa@@Base+0x58>

00011c48 <lista_ordena@@Base>:
   11c48:	cmp	r0, #0
   11c4c:	beq	11cc8 <lista_ordena@@Base+0x80>
   11c50:	ldr	r3, [r0, #8]
   11c54:	cmp	r3, #0
   11c58:	beq	11cc0 <lista_ordena@@Base+0x78>
   11c5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c60:	ldm	r0, {r8, sl}
   11c64:	cmp	r8, sl
   11c68:	movne	r9, r8
   11c6c:	beq	11cb8 <lista_ordena@@Base+0x70>
   11c70:	mov	r4, r9
   11c74:	ldr	r7, [r9, #4]
   11c78:	b	11c90 <lista_ordena@@Base+0x48>
   11c7c:	cmp	r4, r8
   11c80:	str	r5, [r4]
   11c84:	ldrne	r4, [r4, #8]
   11c88:	str	r6, [r7]
   11c8c:	ldrne	r7, [r4, #4]
   11c90:	ldr	r6, [r4]
   11c94:	ldr	r5, [r7]
   11c98:	mov	r0, r6
   11c9c:	mov	r1, r5
   11ca0:	bl	1099c <strcmp@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bgt	11c7c <lista_ordena@@Base+0x34>
   11cac:	ldr	r9, [r9, #4]
   11cb0:	cmp	r9, sl
   11cb4:	bne	11c70 <lista_ordena@@Base+0x28>
   11cb8:	mov	r0, #0
   11cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cc0:	mov	r0, #0
   11cc4:	bx	lr
   11cc8:	mvn	r0, #0
   11ccc:	bx	lr

00011cd0 <lista_inverte@@Base>:
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d44 <lista_inverte@@Base+0x74>
   11cd8:	push	{r4, r5, r6, r7, r8, lr}
   11cdc:	ldr	r8, [r0, #8]
   11ce0:	cmp	r8, #0
   11ce4:	beq	11d3c <lista_inverte@@Base+0x6c>
   11ce8:	add	r8, r8, r8, lsr #31
   11cec:	ldr	r5, [r0]
   11cf0:	asr	r8, r8, #1
   11cf4:	cmp	r8, #0
   11cf8:	ldr	r4, [r0, #4]
   11cfc:	ble	11d3c <lista_inverte@@Base+0x6c>
   11d00:	mov	r6, #0
   11d04:	ldr	r0, [r5]
   11d08:	bl	109cc <strdup@plt>
   11d0c:	add	r6, r6, #1
   11d10:	mov	r7, r0
   11d14:	ldr	r0, [r4]
   11d18:	bl	109cc <strdup@plt>
   11d1c:	str	r0, [r5]
   11d20:	mov	r0, r7
   11d24:	bl	109cc <strdup@plt>
   11d28:	cmp	r6, r8
   11d2c:	ldr	r5, [r5, #4]
   11d30:	str	r0, [r4]
   11d34:	ldr	r4, [r4, #8]
   11d38:	bne	11d04 <lista_inverte@@Base+0x34>
   11d3c:	mov	r0, #0
   11d40:	pop	{r4, r5, r6, r7, r8, pc}
   11d44:	mvn	r0, #0
   11d48:	bx	lr

00011d4c <__libc_csu_init@@Base>:
   11d4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d50:	mov	r7, r0
   11d54:	ldr	r6, [pc, #72]	; 11da4 <__libc_csu_init@@Base+0x58>
   11d58:	ldr	r5, [pc, #72]	; 11da8 <__libc_csu_init@@Base+0x5c>
   11d5c:	add	r6, pc, r6
   11d60:	add	r5, pc, r5
   11d64:	sub	r6, r6, r5
   11d68:	mov	r8, r1
   11d6c:	mov	r9, r2
   11d70:	bl	1097c <strcmp@plt-0x20>
   11d74:	asrs	r6, r6, #2
   11d78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d7c:	mov	r4, #0
   11d80:	add	r4, r4, #1
   11d84:	ldr	r3, [r5], #4
   11d88:	mov	r2, r9
   11d8c:	mov	r1, r8
   11d90:	mov	r0, r7
   11d94:	blx	r3
   11d98:	cmp	r6, r4
   11d9c:	bne	11d80 <__libc_csu_init@@Base+0x34>
   11da0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11da4:	andeq	r1, r1, ip, lsr #3
   11da8:	andeq	r1, r1, r4, lsr #3

00011dac <__libc_csu_fini@@Base>:
   11dac:	bx	lr

Disassembly of section .fini:

00011db0 <.fini>:
   11db0:	push	{r3, lr}
   11db4:	pop	{r3, pc}
