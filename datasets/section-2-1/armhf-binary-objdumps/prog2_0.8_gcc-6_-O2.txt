
../repos/prog2/0.8:     file format elf32-littlearm


Disassembly of section .init:

00010610 <.init>:
   10610:	push	{r3, lr}
   10614:	bl	10794 <_start@@Base+0x3c>
   10618:	pop	{r3, pc}

Disassembly of section .plt:

0001061c <printf@plt-0x14>:
   1061c:	push	{lr}		; (str lr, [sp, #-4]!)
   10620:	ldr	lr, [pc, #4]	; 1062c <printf@plt-0x4>
   10624:	add	lr, pc, lr
   10628:	ldr	pc, [lr, #8]!
   1062c:	ldrdeq	r0, [r1], -r4

00010630 <printf@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2516]!	; 0x9d4

0001063c <strcpy@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2508]!	; 0x9cc

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2500]!	; 0x9c4

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2492]!	; 0x9bc

00010660 <memset@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2484]!	; 0x9b4

0001066c <__isoc99_scanf@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2476]!	; 0x9ac

00010678 <abort@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2468]!	; 0x9a4

Disassembly of section .text:

00010684 <main@@Base>:
   10684:	push	{r4, r5, r6, r7, r8, lr}
   10688:	sub	sp, sp, #1184	; 0x4a0
   1068c:	sub	sp, sp, #8
   10690:	add	r7, sp, #112	; 0x70
   10694:	add	r6, sp, #192	; 0xc0
   10698:	mov	r0, r7
   1069c:	mov	r2, #80	; 0x50
   106a0:	mov	r1, #0
   106a4:	bl	10660 <memset@plt>
   106a8:	add	r5, sp, #8
   106ac:	mov	r8, #50	; 0x32
   106b0:	mov	r0, r6
   106b4:	mov	r2, #1000	; 0x3e8
   106b8:	mov	r1, #0
   106bc:	bl	10660 <memset@plt>
   106c0:	add	r4, sp, #60	; 0x3c
   106c4:	mov	r2, r8
   106c8:	mov	r0, r5
   106cc:	mov	r1, #0
   106d0:	bl	10660 <memset@plt>
   106d4:	mov	r2, r8
   106d8:	mov	r0, r4
   106dc:	mov	r1, #0
   106e0:	bl	10660 <memset@plt>
   106e4:	mov	r1, r7
   106e8:	mov	r0, r6
   106ec:	bl	10880 <lerpontuacoes@@Base>
   106f0:	mov	r3, r5
   106f4:	mov	r1, r7
   106f8:	str	r4, [sp]
   106fc:	mov	r8, r0
   10700:	mov	r2, r8
   10704:	mov	r0, r6
   10708:	bl	108f0 <primeiroUltimo@@Base>
   1070c:	ldr	r0, [pc, #56]	; 1074c <main@@Base+0xc8>
   10710:	mov	r1, r8
   10714:	add	r0, pc, r0
   10718:	bl	10630 <printf@plt>
   1071c:	ldr	r0, [pc, #44]	; 10750 <main@@Base+0xcc>
   10720:	mov	r1, r5
   10724:	add	r0, pc, r0
   10728:	bl	10630 <printf@plt>
   1072c:	ldr	r0, [pc, #32]	; 10754 <main@@Base+0xd0>
   10730:	mov	r1, r4
   10734:	add	r0, pc, r0
   10738:	bl	10630 <printf@plt>
   1073c:	mov	r0, #0
   10740:	add	sp, sp, #1184	; 0x4a0
   10744:	add	sp, sp, #8
   10748:	pop	{r4, r5, r6, r7, r8, pc}
   1074c:	andeq	r0, r0, r0, ror #5
   10750:	andeq	r0, r0, ip, ror #5
   10754:	andeq	r0, r0, ip, ror #5

00010758 <_start@@Base>:
   10758:	mov	fp, #0
   1075c:	mov	lr, #0
   10760:	pop	{r1}		; (ldr r1, [sp], #4)
   10764:	mov	r2, sp
   10768:	push	{r2}		; (str r2, [sp, #-4]!)
   1076c:	push	{r0}		; (str r0, [sp, #-4]!)
   10770:	ldr	ip, [pc, #16]	; 10788 <_start@@Base+0x30>
   10774:	push	{ip}		; (str ip, [sp, #-4]!)
   10778:	ldr	r0, [pc, #12]	; 1078c <_start@@Base+0x34>
   1077c:	ldr	r3, [pc, #12]	; 10790 <_start@@Base+0x38>
   10780:	bl	10648 <__libc_start_main@plt>
   10784:	bl	10678 <abort@plt>
   10788:	andeq	r0, r1, r0, ror #19
   1078c:	andeq	r0, r1, r4, lsl #13
   10790:	andeq	r0, r1, r0, lsl #19
   10794:	ldr	r3, [pc, #20]	; 107b0 <_start@@Base+0x58>
   10798:	ldr	r2, [pc, #20]	; 107b4 <_start@@Base+0x5c>
   1079c:	add	r3, pc, r3
   107a0:	ldr	r2, [r3, r2]
   107a4:	cmp	r2, #0
   107a8:	bxeq	lr
   107ac:	b	10654 <__gmon_start__@plt>
   107b0:	andeq	r0, r1, ip, asr r8
   107b4:	andeq	r0, r0, r8, lsr #32
   107b8:	ldr	r3, [pc, #28]	; 107dc <_start@@Base+0x84>
   107bc:	ldr	r0, [pc, #28]	; 107e0 <_start@@Base+0x88>
   107c0:	sub	r3, r3, r0
   107c4:	cmp	r3, #6
   107c8:	bxls	lr
   107cc:	ldr	r3, [pc, #16]	; 107e4 <_start@@Base+0x8c>
   107d0:	cmp	r3, #0
   107d4:	bxeq	lr
   107d8:	bx	r3
   107dc:	andeq	r1, r2, r7, lsr r0
   107e0:	andeq	r1, r2, r4, lsr r0
   107e4:	andeq	r0, r0, r0
   107e8:	ldr	r1, [pc, #36]	; 10814 <_start@@Base+0xbc>
   107ec:	ldr	r0, [pc, #36]	; 10818 <_start@@Base+0xc0>
   107f0:	sub	r1, r1, r0
   107f4:	asr	r1, r1, #2
   107f8:	add	r1, r1, r1, lsr #31
   107fc:	asrs	r1, r1, #1
   10800:	bxeq	lr
   10804:	ldr	r3, [pc, #16]	; 1081c <_start@@Base+0xc4>
   10808:	cmp	r3, #0
   1080c:	bxeq	lr
   10810:	bx	r3
   10814:	andeq	r1, r2, r4, lsr r0
   10818:	andeq	r1, r2, r4, lsr r0
   1081c:	andeq	r0, r0, r0
   10820:	push	{r4, lr}
   10824:	ldr	r4, [pc, #24]	; 10844 <_start@@Base+0xec>
   10828:	ldrb	r3, [r4]
   1082c:	cmp	r3, #0
   10830:	popne	{r4, pc}
   10834:	bl	107b8 <_start@@Base+0x60>
   10838:	mov	r3, #1
   1083c:	strb	r3, [r4]
   10840:	pop	{r4, pc}
   10844:	andeq	r1, r2, r4, lsr r0
   10848:	ldr	r0, [pc, #40]	; 10878 <_start@@Base+0x120>
   1084c:	ldr	r3, [r0]
   10850:	cmp	r3, #0
   10854:	bne	1085c <_start@@Base+0x104>
   10858:	b	107e8 <_start@@Base+0x90>
   1085c:	ldr	r3, [pc, #24]	; 1087c <_start@@Base+0x124>
   10860:	cmp	r3, #0
   10864:	beq	10858 <_start@@Base+0x100>
   10868:	push	{r4, lr}
   1086c:	blx	r3
   10870:	pop	{r4, lr}
   10874:	b	107e8 <_start@@Base+0x90>
   10878:	andeq	r0, r2, r4, lsl pc
   1087c:	andeq	r0, r0, r0

00010880 <lerpontuacoes@@Base>:
   10880:	push	{r4, r5, r6, r7, lr}
   10884:	mov	r5, r0
   10888:	ldr	r0, [pc, #88]	; 108e8 <lerpontuacoes@@Base+0x68>
   1088c:	sub	sp, sp, #12
   10890:	mov	r4, r1
   10894:	add	r0, pc, r0
   10898:	add	r1, sp, #4
   1089c:	bl	1066c <__isoc99_scanf@plt>
   108a0:	ldr	r0, [sp, #4]
   108a4:	cmp	r0, #0
   108a8:	ble	108e0 <lerpontuacoes@@Base+0x60>
   108ac:	ldr	r7, [pc, #56]	; 108ec <lerpontuacoes@@Base+0x6c>
   108b0:	mov	r6, #0
   108b4:	add	r7, pc, r7
   108b8:	mov	r2, r4
   108bc:	mov	r1, r5
   108c0:	mov	r0, r7
   108c4:	bl	1066c <__isoc99_scanf@plt>
   108c8:	ldr	r0, [sp, #4]
   108cc:	add	r6, r6, #1
   108d0:	cmp	r0, r6
   108d4:	add	r4, r4, #4
   108d8:	add	r5, r5, #50	; 0x32
   108dc:	bgt	108b8 <lerpontuacoes@@Base+0x38>
   108e0:	add	sp, sp, #12
   108e4:	pop	{r4, r5, r6, r7, pc}
   108e8:	andeq	r0, r0, r4, asr r1
   108ec:	andeq	r0, r0, r8, lsr r1

000108f0 <primeiroUltimo@@Base>:
   108f0:	cmp	r2, #1
   108f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108f8:	ldr	r9, [r1]
   108fc:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   10900:	mov	r8, #50	; 0x32
   10904:	mov	r7, r3
   10908:	add	r6, r1, #4
   1090c:	mla	r8, r8, r2, r0
   10910:	add	r4, r0, #50	; 0x32
   10914:	mov	sl, r9
   10918:	b	10934 <primeiroUltimo@@Base+0x44>
   1091c:	cmp	r5, sl
   10920:	add	r6, r6, #4
   10924:	blt	10960 <primeiroUltimo@@Base+0x70>
   10928:	add	r4, r4, #50	; 0x32
   1092c:	cmp	r4, r8
   10930:	beq	1097c <primeiroUltimo@@Base+0x8c>
   10934:	ldr	r5, [r6]
   10938:	cmp	r5, r9
   1093c:	ble	1091c <primeiroUltimo@@Base+0x2c>
   10940:	mov	r1, r4
   10944:	mov	r0, r7
   10948:	bl	1063c <strcpy@plt>
   1094c:	mov	r9, r5
   10950:	ldr	r5, [r6]
   10954:	add	r6, r6, #4
   10958:	cmp	r5, sl
   1095c:	bge	10928 <primeiroUltimo@@Base+0x38>
   10960:	mov	r1, r4
   10964:	ldr	r0, [sp, #32]
   10968:	add	r4, r4, #50	; 0x32
   1096c:	bl	1063c <strcpy@plt>
   10970:	cmp	r4, r8
   10974:	mov	sl, r5
   10978:	bne	10934 <primeiroUltimo@@Base+0x44>
   1097c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010980 <__libc_csu_init@@Base>:
   10980:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10984:	mov	r7, r0
   10988:	ldr	r6, [pc, #72]	; 109d8 <__libc_csu_init@@Base+0x58>
   1098c:	ldr	r5, [pc, #72]	; 109dc <__libc_csu_init@@Base+0x5c>
   10990:	add	r6, pc, r6
   10994:	add	r5, pc, r5
   10998:	sub	r6, r6, r5
   1099c:	mov	r8, r1
   109a0:	mov	r9, r2
   109a4:	bl	10610 <printf@plt-0x20>
   109a8:	asrs	r6, r6, #2
   109ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b0:	mov	r4, #0
   109b4:	add	r4, r4, #1
   109b8:	ldr	r3, [r5], #4
   109bc:	mov	r2, r9
   109c0:	mov	r1, r8
   109c4:	mov	r0, r7
   109c8:	blx	r3
   109cc:	cmp	r6, r4
   109d0:	bne	109b4 <__libc_csu_init@@Base+0x34>
   109d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109d8:	andeq	r0, r1, r8, ror r5
   109dc:	andeq	r0, r1, r0, ror r5

000109e0 <__libc_csu_fini@@Base>:
   109e0:	bx	lr

Disassembly of section .fini:

000109e4 <.fini>:
   109e4:	push	{r3, lr}
   109e8:	pop	{r3, pc}
