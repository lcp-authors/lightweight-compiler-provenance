
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f70 <.init>:
   11f70:	push	{r3, lr}
   11f74:	bl	120c8 <_start@@Base+0x3c>
   11f78:	pop	{r3, pc}

Disassembly of section .plt:

00011f7c <printf@plt-0x14>:
   11f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f80:	ldr	lr, [pc, #4]	; 11f8c <printf@plt-0x4>
   11f84:	add	lr, pc, lr
   11f88:	ldr	pc, [lr, #8]!
   11f8c:	andeq	r7, r1, r4, ror r0

00011f90 <printf@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #94208	; 0x17000
   11f98:	ldr	pc, [ip, #116]!	; 0x74

00011f9c <free@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #94208	; 0x17000
   11fa4:	ldr	pc, [ip, #108]!	; 0x6c

00011fa8 <memcpy@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #94208	; 0x17000
   11fb0:	ldr	pc, [ip, #100]!	; 0x64

00011fb4 <memcmp@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #92]!	; 0x5c

00011fc0 <realloc@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #84]!	; 0x54

00011fcc <fwrite@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #76]!	; 0x4c

00011fd8 <puts@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #68]!	; 0x44

00011fe4 <malloc@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #60]!	; 0x3c

00011ff0 <__libc_start_main@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #52]!	; 0x34

00011ffc <__gmon_start__@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #44]!	; 0x2c

00012008 <strlen@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #94208	; 0x17000
   12010:	ldr	pc, [ip, #36]!	; 0x24

00012014 <fprintf@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #94208	; 0x17000
   1201c:	ldr	pc, [ip, #28]!

00012020 <posix_memalign@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #94208	; 0x17000
   12028:	ldr	pc, [ip, #20]!

0001202c <memset@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #94208	; 0x17000
   12034:	ldr	pc, [ip, #12]!

00012038 <memchr@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #94208	; 0x17000
   12040:	ldr	pc, [ip, #4]!

00012044 <fputc@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #90112	; 0x16000
   1204c:	ldr	pc, [ip, #4092]!	; 0xffc

00012050 <abort@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #90112	; 0x16000
   12058:	ldr	pc, [ip, #4084]!	; 0xff4

0001205c <__assert_fail@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #90112	; 0x16000
   12064:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00012068 <main@@Base>:
   12068:	str	r4, [sp, #-8]!
   1206c:	str	lr, [sp, #4]
   12070:	bl	12278 <debug_test@@Base>
   12074:	mov	r4, r0
   12078:	bl	12430 <emit_test@@Base>
   1207c:	orr	r0, r4, r0
   12080:	ldr	r4, [sp]
   12084:	add	sp, sp, #4
   12088:	pop	{pc}		; (ldr pc, [sp], #4)

0001208c <_start@@Base>:
   1208c:	mov	fp, #0
   12090:	mov	lr, #0
   12094:	pop	{r1}		; (ldr r1, [sp], #4)
   12098:	mov	r2, sp
   1209c:	push	{r2}		; (str r2, [sp, #-4]!)
   120a0:	push	{r0}		; (str r0, [sp, #-4]!)
   120a4:	ldr	ip, [pc, #16]	; 120bc <_start@@Base+0x30>
   120a8:	push	{ip}		; (str ip, [sp, #-4]!)
   120ac:	ldr	r0, [pc, #12]	; 120c0 <_start@@Base+0x34>
   120b0:	ldr	r3, [pc, #12]	; 120c4 <_start@@Base+0x38>
   120b4:	bl	11ff0 <__libc_start_main@plt>
   120b8:	bl	12050 <abort@plt>
   120bc:	andeq	r7, r1, ip, lsl #15
   120c0:	andeq	r2, r1, r8, rrx
   120c4:	andeq	r7, r1, ip, lsr #14
   120c8:	ldr	r3, [pc, #20]	; 120e4 <_start@@Base+0x58>
   120cc:	ldr	r2, [pc, #20]	; 120e8 <_start@@Base+0x5c>
   120d0:	add	r3, pc, r3
   120d4:	ldr	r2, [r3, r2]
   120d8:	cmp	r2, #0
   120dc:	bxeq	lr
   120e0:	b	11ffc <__gmon_start__@plt>
   120e4:	andeq	r6, r1, r8, lsr #30
   120e8:	andeq	r0, r0, r0, rrx
   120ec:	ldr	r0, [pc, #24]	; 1210c <_start@@Base+0x80>
   120f0:	ldr	r3, [pc, #24]	; 12110 <_start@@Base+0x84>
   120f4:	cmp	r3, r0
   120f8:	bxeq	lr
   120fc:	ldr	r3, [pc, #16]	; 12114 <_start@@Base+0x88>
   12100:	cmp	r3, #0
   12104:	bxeq	lr
   12108:	bx	r3
   1210c:	andeq	r9, r2, r4, ror r0
   12110:	andeq	r9, r2, r4, ror r0
   12114:	andeq	r0, r0, r0
   12118:	ldr	r0, [pc, #36]	; 12144 <_start@@Base+0xb8>
   1211c:	ldr	r1, [pc, #36]	; 12148 <_start@@Base+0xbc>
   12120:	sub	r1, r1, r0
   12124:	asr	r1, r1, #2
   12128:	add	r1, r1, r1, lsr #31
   1212c:	asrs	r1, r1, #1
   12130:	bxeq	lr
   12134:	ldr	r3, [pc, #16]	; 1214c <_start@@Base+0xc0>
   12138:	cmp	r3, #0
   1213c:	bxeq	lr
   12140:	bx	r3
   12144:	andeq	r9, r2, r4, ror r0
   12148:	andeq	r9, r2, r4, ror r0
   1214c:	andeq	r0, r0, r0
   12150:	push	{r4, lr}
   12154:	ldr	r4, [pc, #24]	; 12174 <_start@@Base+0xe8>
   12158:	ldrb	r3, [r4]
   1215c:	cmp	r3, #0
   12160:	popne	{r4, pc}
   12164:	bl	120ec <_start@@Base+0x60>
   12168:	mov	r3, #1
   1216c:	strb	r3, [r4]
   12170:	pop	{r4, pc}
   12174:	andeq	r9, r2, r4, ror r0
   12178:	b	12118 <_start@@Base+0x8c>

0001217c <dbg_emitter@@Base>:
   1217c:	ldr	r0, [pc, #224]	; 12264 <dbg_emitter@@Base+0xe8>
   12180:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12184:	mov	r5, r3
   12188:	mov	r4, r1
   1218c:	strd	r6, [sp, #8]
   12190:	mov	r6, r2
   12194:	mov	r2, r3
   12198:	mov	r1, r6
   1219c:	ldr	r3, [sp, #32]
   121a0:	strd	r8, [sp, #16]
   121a4:	add	r0, pc, r0
   121a8:	str	sl, [sp, #24]
   121ac:	str	lr, [sp, #28]
   121b0:	bl	11f90 <printf@plt>
   121b4:	ldr	r2, [pc, #172]	; 12268 <dbg_emitter@@Base+0xec>
   121b8:	cmp	r6, #0
   121bc:	add	r2, pc, r2
   121c0:	ble	12248 <dbg_emitter@@Base+0xcc>
   121c4:	ldr	r3, [pc, #160]	; 1226c <dbg_emitter@@Base+0xf0>
   121c8:	add	r6, r4, r6, lsl #3
   121cc:	ldr	r9, [pc, #156]	; 12270 <dbg_emitter@@Base+0xf4>
   121d0:	ldr	r8, [pc, #156]	; 12274 <dbg_emitter@@Base+0xf8>
   121d4:	ldr	r7, [r2, r3]
   121d8:	add	r9, pc, r9
   121dc:	add	r8, pc, r8
   121e0:	b	121fc <dbg_emitter@@Base+0x80>
   121e4:	cmp	r3, #0
   121e8:	beq	12228 <dbg_emitter@@Base+0xac>
   121ec:	add	r4, r4, #8
   121f0:	add	r5, r5, r2
   121f4:	cmp	r6, r4
   121f8:	beq	12248 <dbg_emitter@@Base+0xcc>
   121fc:	ldr	r3, [r4]
   12200:	ldr	r2, [r4, #4]
   12204:	cmp	r3, r7
   12208:	bne	121e4 <dbg_emitter@@Base+0x68>
   1220c:	mov	r1, r5
   12210:	mov	r0, r9
   12214:	bl	11f90 <printf@plt>
   12218:	ldr	r3, [r4]
   1221c:	ldr	r2, [r4, #4]
   12220:	cmp	r3, #0
   12224:	bne	121ec <dbg_emitter@@Base+0x70>
   12228:	mov	r1, r5
   1222c:	mov	r0, r8
   12230:	bl	11f90 <printf@plt>
   12234:	ldr	r2, [r4, #4]
   12238:	add	r4, r4, #8
   1223c:	cmp	r6, r4
   12240:	add	r5, r5, r2
   12244:	bne	121fc <dbg_emitter@@Base+0x80>
   12248:	ldrd	r4, [sp]
   1224c:	mov	r0, #0
   12250:	ldrd	r6, [sp, #8]
   12254:	ldrd	r8, [sp, #16]
   12258:	ldr	sl, [sp, #24]
   1225c:	add	sp, sp, #28
   12260:	pop	{pc}		; (ldr pc, [sp], #4)
   12264:	andeq	r5, r0, r4, ror #12
   12268:	andeq	r6, r1, ip, lsr lr
   1226c:	andeq	r0, r0, r4, asr r0
   12270:	andeq	r5, r0, r4, ror #12
   12274:	andeq	r5, r0, r4, lsl #13

00012278 <debug_test@@Base>:
   12278:	ldr	r0, [pc, #408]	; 12418 <debug_test@@Base+0x1a0>
   1227c:	mov	r2, #0
   12280:	mov	r3, #0
   12284:	strd	r4, [sp, #-20]!	; 0xffffffec
   12288:	strd	r6, [sp, #8]
   1228c:	mov	r6, #0
   12290:	str	lr, [sp, #16]
   12294:	sub	sp, sp, #284	; 0x11c
   12298:	ldr	r7, [pc, #380]	; 1241c <debug_test@@Base+0x1a4>
   1229c:	add	r5, sp, #48	; 0x30
   122a0:	add	r4, sp, #8
   122a4:	add	r0, pc, r0
   122a8:	strd	r2, [sp, #8]
   122ac:	strd	r2, [sp, #16]
   122b0:	strd	r2, [sp, #24]
   122b4:	strd	r2, [sp, #32]
   122b8:	strd	r2, [sp, #40]	; 0x28
   122bc:	add	r7, pc, r7
   122c0:	bl	11fd8 <puts@plt>
   122c4:	ldr	r1, [pc, #340]	; 12420 <debug_test@@Base+0x1a8>
   122c8:	mov	r3, r6
   122cc:	mov	r2, r6
   122d0:	mov	r0, r5
   122d4:	ldr	r1, [r7, r1]
   122d8:	str	r6, [sp]
   122dc:	bl	13188 <flatcc_builder_custom_init@@Base>
   122e0:	mvn	ip, #-1073741824	; 0xc0000000
   122e4:	mov	r2, #4
   122e8:	mov	r1, r4
   122ec:	mov	r3, r2
   122f0:	mov	r0, r5
   122f4:	stm	sp, {r2, ip}
   122f8:	mov	r2, #10
   122fc:	bl	15758 <flatcc_builder_create_vector@@Base>
   12300:	mov	r7, r0
   12304:	mov	r3, r6
   12308:	mov	r2, r6
   1230c:	mov	r1, r6
   12310:	mov	r0, r5
   12314:	bl	13bcc <flatcc_builder_start_buffer@@Base>
   12318:	subs	r4, r0, #0
   1231c:	beq	12340 <debug_test@@Base+0xc8>
   12320:	mov	r0, r5
   12324:	bl	133e0 <flatcc_builder_clear@@Base>
   12328:	mov	r0, #0
   1232c:	add	sp, sp, #284	; 0x11c
   12330:	ldrd	r4, [sp]
   12334:	ldrd	r6, [sp, #8]
   12338:	add	sp, sp, #16
   1233c:	pop	{pc}		; (ldr pc, [sp], #4)
   12340:	mov	r1, #3
   12344:	mov	r0, r5
   12348:	bl	14ba4 <flatcc_builder_start_table@@Base>
   1234c:	subs	r6, r0, #0
   12350:	bne	123ec <debug_test@@Base+0x174>
   12354:	mov	r3, #8
   12358:	mov	r1, r6
   1235c:	mov	r2, r3
   12360:	mov	r0, r5
   12364:	bl	166d8 <flatcc_builder_table_add@@Base>
   12368:	cmp	r0, #0
   1236c:	beq	123ec <debug_test@@Base+0x174>
   12370:	mov	r2, #42	; 0x2a
   12374:	mov	r3, #0
   12378:	cmp	r7, #0
   1237c:	strd	r2, [r0]
   12380:	beq	123ec <debug_test@@Base+0x174>
   12384:	mov	r1, #2
   12388:	mov	r0, r5
   1238c:	bl	1691c <flatcc_builder_table_add_offset@@Base>
   12390:	subs	r2, r0, #0
   12394:	beq	123ec <debug_test@@Base+0x174>
   12398:	mov	r3, #1
   1239c:	mov	r0, r5
   123a0:	str	r7, [r2]
   123a4:	mov	r1, r3
   123a8:	mov	r2, r3
   123ac:	bl	166d8 <flatcc_builder_table_add@@Base>
   123b0:	subs	r3, r0, #0
   123b4:	beq	123ec <debug_test@@Base+0x174>
   123b8:	ldr	r4, [pc, #100]	; 12424 <debug_test@@Base+0x1ac>
   123bc:	mov	r1, #1
   123c0:	mov	r2, r6
   123c4:	mov	r0, r5
   123c8:	strb	r1, [r3]
   123cc:	add	r4, pc, r4
   123d0:	mov	r1, r4
   123d4:	bl	154dc <flatcc_builder_check_required@@Base>
   123d8:	cmp	r0, #0
   123dc:	beq	123fc <debug_test@@Base+0x184>
   123e0:	mov	r0, r5
   123e4:	bl	15588 <flatcc_builder_end_table@@Base>
   123e8:	mov	r4, r0
   123ec:	mov	r1, r4
   123f0:	mov	r0, r5
   123f4:	bl	13ca8 <flatcc_builder_end_buffer@@Base>
   123f8:	b	12320 <debug_test@@Base+0xa8>
   123fc:	ldr	r1, [pc, #36]	; 12428 <debug_test@@Base+0x1b0>
   12400:	add	r3, r4, #4
   12404:	mov	r2, #21
   12408:	ldr	r0, [pc, #28]	; 1242c <debug_test@@Base+0x1b4>
   1240c:	add	r1, pc, r1
   12410:	add	r0, pc, r0
   12414:	bl	1205c <__assert_fail@plt>
   12418:	andeq	r5, r0, ip, ror #11
   1241c:	andeq	r6, r1, ip, lsr sp
   12420:	andeq	r0, r0, r8, asr r0
   12424:	andeq	r5, r0, r8, asr #7
   12428:	ldrdeq	r5, [r0], -r8
   1242c:	andeq	r5, r0, r8, asr #10

00012430 <emit_test@@Base>:
   12430:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12434:	strd	r6, [sp, #8]
   12438:	ldr	r7, [pc, #1380]	; 129a4 <emit_test@@Base+0x574>
   1243c:	strd	r8, [sp, #16]
   12440:	strd	sl, [sp, #24]
   12444:	str	lr, [sp, #32]
   12448:	sub	sp, sp, #356	; 0x164
   1244c:	add	r4, sp, #60	; 0x3c
   12450:	add	r5, sp, #120	; 0x78
   12454:	ldr	r6, [pc, #1356]	; 129a8 <emit_test@@Base+0x578>
   12458:	add	r7, pc, r7
   1245c:	mov	r0, r5
   12460:	ldrd	r2, [r7, #16]
   12464:	ldrd	r8, [r7, #24]
   12468:	add	r6, pc, r6
   1246c:	ldrd	sl, [r7, #48]	; 0x30
   12470:	strd	r2, [r4]
   12474:	ldrd	r2, [r7, #32]
   12478:	strd	r8, [r4, #8]
   1247c:	ldrd	r8, [r7, #40]	; 0x28
   12480:	ldrh	lr, [r7, #72]	; 0x48
   12484:	strd	r2, [r4, #16]
   12488:	ldrd	r2, [r7, #56]	; 0x38
   1248c:	strd	r8, [r4, #24]
   12490:	ldrb	ip, [r7, #74]	; 0x4a
   12494:	strd	sl, [r4, #32]
   12498:	ldrd	r8, [r7, #64]	; 0x40
   1249c:	strd	r2, [r4, #40]	; 0x28
   124a0:	ldrd	sl, [r7, #76]	; 0x4c
   124a4:	ldrd	r2, [r7, #84]	; 0x54
   124a8:	strd	r8, [r4, #48]	; 0x30
   124ac:	add	r8, sp, #24
   124b0:	strh	lr, [r4, #56]	; 0x38
   124b4:	strd	sl, [sp, #24]
   124b8:	strb	ip, [r4, #58]	; 0x3a
   124bc:	strd	r2, [sp, #32]
   124c0:	bl	13230 <flatcc_builder_init@@Base>
   124c4:	mov	r0, r5
   124c8:	bl	17134 <flatcc_builder_get_emit_context@@Base>
   124cc:	mov	ip, #4
   124d0:	mvn	r2, #-1073741824	; 0xc0000000
   124d4:	mov	r1, r8
   124d8:	mov	r3, ip
   124dc:	mov	r9, r0
   124e0:	mov	r0, r5
   124e4:	str	ip, [sp]
   124e8:	str	r2, [sp, #4]
   124ec:	mov	r2, ip
   124f0:	bl	15758 <flatcc_builder_create_vector@@Base>
   124f4:	mov	r3, #0
   124f8:	mov	sl, r0
   124fc:	mov	r2, r3
   12500:	mov	r0, r5
   12504:	mov	r1, r3
   12508:	bl	13bcc <flatcc_builder_start_buffer@@Base>
   1250c:	subs	r8, r0, #0
   12510:	beq	12548 <emit_test@@Base+0x118>
   12514:	ldr	r3, [r9]
   12518:	ldr	r2, [r9, #4]
   1251c:	cmp	r2, r3
   12520:	beq	12608 <emit_test@@Base+0x1d8>
   12524:	mvn	r4, #0
   12528:	mov	r0, r4
   1252c:	add	sp, sp, #356	; 0x164
   12530:	ldrd	r4, [sp]
   12534:	ldrd	r6, [sp, #8]
   12538:	ldrd	r8, [sp, #16]
   1253c:	ldrd	sl, [sp, #24]
   12540:	add	sp, sp, #32
   12544:	pop	{pc}		; (ldr pc, [sp], #4)
   12548:	mov	r1, #3
   1254c:	mov	r0, r5
   12550:	bl	14ba4 <flatcc_builder_start_table@@Base>
   12554:	subs	fp, r0, #0
   12558:	bne	125ec <emit_test@@Base+0x1bc>
   1255c:	mov	r3, #8
   12560:	mov	r1, fp
   12564:	mov	r2, r3
   12568:	mov	r0, r5
   1256c:	bl	166d8 <flatcc_builder_table_add@@Base>
   12570:	cmp	r0, #0
   12574:	beq	125ec <emit_test@@Base+0x1bc>
   12578:	mov	r2, #42	; 0x2a
   1257c:	mov	r3, #0
   12580:	cmp	sl, #0
   12584:	strd	r2, [r0]
   12588:	beq	125ec <emit_test@@Base+0x1bc>
   1258c:	mov	r1, #2
   12590:	mov	r0, r5
   12594:	bl	1691c <flatcc_builder_table_add_offset@@Base>
   12598:	subs	r2, r0, #0
   1259c:	beq	125ec <emit_test@@Base+0x1bc>
   125a0:	mov	r3, #1
   125a4:	mov	r0, r5
   125a8:	str	sl, [r2]
   125ac:	mov	r1, r3
   125b0:	mov	r2, r3
   125b4:	bl	166d8 <flatcc_builder_table_add@@Base>
   125b8:	cmp	r0, #0
   125bc:	beq	125ec <emit_test@@Base+0x1bc>
   125c0:	mov	r3, #1
   125c4:	mov	r2, fp
   125c8:	mov	r1, r7
   125cc:	strb	r3, [r0]
   125d0:	mov	r0, r5
   125d4:	bl	154dc <flatcc_builder_check_required@@Base>
   125d8:	cmp	r0, #0
   125dc:	beq	12960 <emit_test@@Base+0x530>
   125e0:	mov	r0, r5
   125e4:	bl	15588 <flatcc_builder_end_table@@Base>
   125e8:	mov	r8, r0
   125ec:	mov	r1, r8
   125f0:	mov	r0, r5
   125f4:	bl	13ca8 <flatcc_builder_end_buffer@@Base>
   125f8:	ldr	r3, [r9]
   125fc:	ldr	r2, [r9, #4]
   12600:	cmp	r2, r3
   12604:	bne	12524 <emit_test@@Base+0xf4>
   12608:	ldr	sl, [r9, #8]
   1260c:	ldr	r9, [r9, #24]
   12610:	cmp	sl, #0
   12614:	beq	12524 <emit_test@@Base+0xf4>
   12618:	mov	r0, r5
   1261c:	bl	16df4 <flatcc_builder_get_buffer_size@@Base>
   12620:	cmp	r0, r9
   12624:	mov	r8, r0
   12628:	bne	1293c <emit_test@@Base+0x50c>
   1262c:	ldr	r3, [pc, #888]	; 129ac <emit_test@@Base+0x57c>
   12630:	mov	r2, r0
   12634:	ldr	r1, [pc, #884]	; 129b0 <emit_test@@Base+0x580>
   12638:	ldr	r6, [r6, r3]
   1263c:	add	r1, pc, r1
   12640:	ldr	r0, [r6]
   12644:	bl	12014 <fprintf@plt>
   12648:	ldr	r2, [pc, #868]	; 129b4 <emit_test@@Base+0x584>
   1264c:	ldr	r1, [pc, #868]	; 129b8 <emit_test@@Base+0x588>
   12650:	ldr	r7, [r6]
   12654:	add	r2, pc, r2
   12658:	add	r1, pc, r1
   1265c:	mov	r0, r7
   12660:	bl	12014 <fprintf@plt>
   12664:	cmp	r8, #0
   12668:	beq	12904 <emit_test@@Base+0x4d4>
   1266c:	add	r2, sp, #40	; 0x28
   12670:	ldr	r3, [pc, #836]	; 129bc <emit_test@@Base+0x58c>
   12674:	mov	fp, #0
   12678:	sub	r8, sl, #1
   1267c:	str	r2, [sp, #8]
   12680:	ldr	r2, [pc, #824]	; 129c0 <emit_test@@Base+0x590>
   12684:	strd	r4, [sp, #16]
   12688:	mov	r4, fp
   1268c:	add	r3, pc, r3
   12690:	mov	r5, r3
   12694:	add	r2, pc, r2
   12698:	str	r2, [sp, #12]
   1269c:	ldr	r2, [pc, #800]	; 129c4 <emit_test@@Base+0x594>
   126a0:	add	r2, pc, r2
   126a4:	mov	fp, r2
   126a8:	b	12714 <emit_test@@Base+0x2e4>
   126ac:	cmp	r4, #0
   126b0:	beq	126c4 <emit_test@@Base+0x294>
   126b4:	mov	r0, r7
   126b8:	ldr	r2, [sp, #8]
   126bc:	ldr	r1, [sp, #12]
   126c0:	bl	12014 <fprintf@plt>
   126c4:	mov	r2, r4
   126c8:	mov	r1, r5
   126cc:	mov	r0, r7
   126d0:	bl	12014 <fprintf@plt>
   126d4:	ldrb	r2, [r8, #1]!
   126d8:	mov	r1, fp
   126dc:	mov	r0, r7
   126e0:	bl	12014 <fprintf@plt>
   126e4:	add	r3, sp, #352	; 0x160
   126e8:	mov	r1, #0
   126ec:	add	r6, r3, r6
   126f0:	add	r4, r4, #1
   126f4:	ldrb	r2, [r8]
   126f8:	strb	r1, [r6, #-311]	; 0xfffffec9
   126fc:	sub	r1, r2, #32
   12700:	cmp	r1, #94	; 0x5e
   12704:	movhi	r2, #46	; 0x2e
   12708:	cmp	r9, r4
   1270c:	strb	r2, [r6, #-312]	; 0xfffffec8
   12710:	beq	12734 <emit_test@@Base+0x304>
   12714:	ands	r6, r4, #15
   12718:	beq	126ac <emit_test@@Base+0x27c>
   1271c:	tst	r4, #7
   12720:	bne	126d4 <emit_test@@Base+0x2a4>
   12724:	mov	r1, r7
   12728:	mov	r0, #32
   1272c:	bl	12044 <fputc@plt>
   12730:	b	126d4 <emit_test@@Base+0x2a4>
   12734:	tst	r9, #15
   12738:	ldrd	r4, [sp, #16]
   1273c:	beq	1276c <emit_test@@Base+0x33c>
   12740:	ldr	r8, [pc, #640]	; 129c8 <emit_test@@Base+0x598>
   12744:	mov	r6, r9
   12748:	add	r8, pc, r8
   1274c:	add	r6, r6, #1
   12750:	mov	r3, r7
   12754:	mov	r2, #3
   12758:	mov	r1, #1
   1275c:	mov	r0, r8
   12760:	bl	11fcc <fwrite@plt>
   12764:	tst	r6, #15
   12768:	bne	1274c <emit_test@@Base+0x31c>
   1276c:	ldr	r1, [pc, #600]	; 129cc <emit_test@@Base+0x59c>
   12770:	mov	r0, r7
   12774:	ldr	r2, [sp, #8]
   12778:	add	r1, pc, r1
   1277c:	bl	12014 <fprintf@plt>
   12780:	cmp	r9, #58	; 0x3a
   12784:	bne	12918 <emit_test@@Base+0x4e8>
   12788:	mov	r1, r4
   1278c:	mov	r2, r9
   12790:	mov	r0, sl
   12794:	bl	11fb4 <memcmp@plt>
   12798:	subs	r4, r0, #0
   1279c:	bne	128e0 <emit_test@@Base+0x4b0>
   127a0:	ldr	r2, [sl]
   127a4:	adds	r3, sl, r2
   127a8:	beq	128bc <emit_test@@Base+0x48c>
   127ac:	ldr	r2, [sl, r2]
   127b0:	sub	r2, r3, r2
   127b4:	ldrh	r1, [r2]
   127b8:	cmp	r1, #5
   127bc:	bhi	127e4 <emit_test@@Base+0x3b4>
   127c0:	ldr	r3, [pc, #520]	; 129d0 <emit_test@@Base+0x5a0>
   127c4:	mov	r2, #112	; 0x70
   127c8:	ldr	r1, [pc, #516]	; 129d4 <emit_test@@Base+0x5a4>
   127cc:	ldr	r0, [pc, #516]	; 129d8 <emit_test@@Base+0x5a8>
   127d0:	add	r3, pc, r3
   127d4:	add	r3, r3, #92	; 0x5c
   127d8:	add	r1, pc, r1
   127dc:	add	r0, pc, r0
   127e0:	bl	1205c <__assert_fail@plt>
   127e4:	ldrh	r0, [r2, #4]
   127e8:	cmp	r0, #0
   127ec:	beq	127c0 <emit_test@@Base+0x390>
   127f0:	ldrd	r6, [r3, r0]
   127f4:	cmp	r7, #0
   127f8:	cmpeq	r6, #42	; 0x2a
   127fc:	bne	127c0 <emit_test@@Base+0x390>
   12800:	cmp	r1, #7
   12804:	bhi	1282c <emit_test@@Base+0x3fc>
   12808:	ldr	r3, [pc, #460]	; 129dc <emit_test@@Base+0x5ac>
   1280c:	mov	r2, #113	; 0x71
   12810:	ldr	r1, [pc, #456]	; 129e0 <emit_test@@Base+0x5b0>
   12814:	ldr	r0, [pc, #456]	; 129e4 <emit_test@@Base+0x5b4>
   12818:	add	r3, pc, r3
   1281c:	add	r3, r3, #92	; 0x5c
   12820:	add	r1, pc, r1
   12824:	add	r0, pc, r0
   12828:	bl	1205c <__assert_fail@plt>
   1282c:	ldrh	r0, [r2, #6]
   12830:	cmp	r0, #0
   12834:	beq	12808 <emit_test@@Base+0x3d8>
   12838:	ldrb	r0, [r3, r0]
   1283c:	cmp	r0, #1
   12840:	bne	12808 <emit_test@@Base+0x3d8>
   12844:	cmp	r1, #9
   12848:	bls	12898 <emit_test@@Base+0x468>
   1284c:	ldrh	r2, [r2, #8]
   12850:	cmp	r2, #0
   12854:	beq	12898 <emit_test@@Base+0x468>
   12858:	ldr	r1, [r3, r2]
   1285c:	add	r3, r3, r2
   12860:	add	r2, r1, #4
   12864:	adds	r3, r3, r2
   12868:	beq	12898 <emit_test@@Base+0x468>
   1286c:	ldr	r2, [r3, #-4]
   12870:	cmp	r2, #4
   12874:	bne	12898 <emit_test@@Base+0x468>
   12878:	vldr	s15, [pc, #288]	; 129a0 <emit_test@@Base+0x570>
   1287c:	vldr	s14, [r3, #8]
   12880:	vcmp.f32	s14, s15
   12884:	vmrs	APSR_nzcv, fpscr
   12888:	bne	1297c <emit_test@@Base+0x54c>
   1288c:	mov	r0, r5
   12890:	bl	133e0 <flatcc_builder_clear@@Base>
   12894:	b	12528 <emit_test@@Base+0xf8>
   12898:	ldr	r3, [pc, #328]	; 129e8 <emit_test@@Base+0x5b8>
   1289c:	mov	r2, #114	; 0x72
   128a0:	ldr	r1, [pc, #324]	; 129ec <emit_test@@Base+0x5bc>
   128a4:	ldr	r0, [pc, #324]	; 129f0 <emit_test@@Base+0x5c0>
   128a8:	add	r3, pc, r3
   128ac:	add	r3, r3, #92	; 0x5c
   128b0:	add	r1, pc, r1
   128b4:	add	r0, pc, r0
   128b8:	bl	1205c <__assert_fail@plt>
   128bc:	ldr	r3, [pc, #304]	; 129f4 <emit_test@@Base+0x5c4>
   128c0:	mov	r2, #41	; 0x29
   128c4:	ldr	r1, [pc, #300]	; 129f8 <emit_test@@Base+0x5c8>
   128c8:	ldr	r0, [pc, #300]	; 129fc <emit_test@@Base+0x5cc>
   128cc:	add	r3, pc, r3
   128d0:	add	r3, r3, #104	; 0x68
   128d4:	add	r1, pc, r1
   128d8:	add	r0, pc, r0
   128dc:	bl	1205c <__assert_fail@plt>
   128e0:	ldr	r3, [pc, #280]	; 12a00 <emit_test@@Base+0x5d0>
   128e4:	mov	r2, #108	; 0x6c
   128e8:	ldr	r1, [pc, #276]	; 12a04 <emit_test@@Base+0x5d4>
   128ec:	ldr	r0, [pc, #276]	; 12a08 <emit_test@@Base+0x5d8>
   128f0:	add	r3, pc, r3
   128f4:	add	r3, r3, #92	; 0x5c
   128f8:	add	r1, pc, r1
   128fc:	add	r0, pc, r0
   12900:	bl	1205c <__assert_fail@plt>
   12904:	ldr	r1, [pc, #256]	; 12a0c <emit_test@@Base+0x5dc>
   12908:	mov	r0, r7
   1290c:	add	r2, sp, #40	; 0x28
   12910:	add	r1, pc, r1
   12914:	bl	12014 <fprintf@plt>
   12918:	ldr	r3, [pc, #240]	; 12a10 <emit_test@@Base+0x5e0>
   1291c:	mov	r2, #106	; 0x6a
   12920:	ldr	r1, [pc, #236]	; 12a14 <emit_test@@Base+0x5e4>
   12924:	ldr	r0, [pc, #236]	; 12a18 <emit_test@@Base+0x5e8>
   12928:	add	r3, pc, r3
   1292c:	add	r3, r3, #92	; 0x5c
   12930:	add	r1, pc, r1
   12934:	add	r0, pc, r0
   12938:	bl	1205c <__assert_fail@plt>
   1293c:	ldr	r3, [pc, #216]	; 12a1c <emit_test@@Base+0x5ec>
   12940:	mov	r2, #101	; 0x65
   12944:	ldr	r1, [pc, #212]	; 12a20 <emit_test@@Base+0x5f0>
   12948:	ldr	r0, [pc, #212]	; 12a24 <emit_test@@Base+0x5f4>
   1294c:	add	r3, pc, r3
   12950:	add	r3, r3, #92	; 0x5c
   12954:	add	r1, pc, r1
   12958:	add	r0, pc, r0
   1295c:	bl	1205c <__assert_fail@plt>
   12960:	ldr	r1, [pc, #192]	; 12a28 <emit_test@@Base+0x5f8>
   12964:	add	r3, r7, #4
   12968:	mov	r2, #21
   1296c:	ldr	r0, [pc, #184]	; 12a2c <emit_test@@Base+0x5fc>
   12970:	add	r1, pc, r1
   12974:	add	r0, pc, r0
   12978:	bl	1205c <__assert_fail@plt>
   1297c:	ldr	r3, [pc, #172]	; 12a30 <emit_test@@Base+0x600>
   12980:	mov	r2, #115	; 0x73
   12984:	ldr	r1, [pc, #168]	; 12a34 <emit_test@@Base+0x604>
   12988:	ldr	r0, [pc, #168]	; 12a38 <emit_test@@Base+0x608>
   1298c:	add	r3, pc, r3
   12990:	add	r3, r3, #92	; 0x5c
   12994:	add	r1, pc, r1
   12998:	add	r0, pc, r0
   1299c:	bl	1205c <__assert_fail@plt>
   129a0:	svccc	0x0099999a
   129a4:	andeq	r5, r0, ip, lsr r3
   129a8:	muleq	r1, r0, fp
   129ac:	andeq	r0, r0, ip, asr r0
   129b0:	andeq	r5, r0, ip, ror #7
   129b4:	andeq	r5, r0, r8, ror #7
   129b8:	strdeq	r5, [r0], -r0
   129bc:	andeq	r5, r0, ip, asr #7
   129c0:			; <UNDEFINED> instruction: 0x000053bc
   129c4:	andeq	r5, r0, r0, asr #7
   129c8:	andeq	r5, r0, r0, lsr #6
   129cc:	ldrdeq	r5, [r0], -r8
   129d0:	andeq	r4, r0, r4, asr #31
   129d4:	andeq	r5, r0, ip, ror #3
   129d8:	andeq	r5, r0, r4, lsl #22
   129dc:	andeq	r4, r0, ip, ror pc
   129e0:	andeq	r5, r0, r4, lsr #3
   129e4:			; <UNDEFINED> instruction: 0x00005abc
   129e8:	andeq	r4, r0, ip, ror #29
   129ec:	andeq	r5, r0, r4, lsl r1
   129f0:	andeq	r5, r0, ip, lsr #20
   129f4:	andeq	r4, r0, r8, asr #29
   129f8:	muleq	r0, r8, r1
   129fc:	andeq	r5, r0, r8, lsl #4
   12a00:	andeq	r4, r0, r4, lsr #29
   12a04:	andeq	r5, r0, ip, asr #1
   12a08:	andeq	r5, r0, r4, ror #19
   12a0c:	andeq	r5, r0, r0, asr #2
   12a10:	andeq	r4, r0, ip, ror #28
   12a14:	muleq	r0, r4, r0
   12a18:	andeq	r5, r0, ip, lsr #19
   12a1c:	andeq	r4, r0, r8, asr #28
   12a20:	andeq	r5, r0, r0, ror r0
   12a24:	andeq	r5, r0, r8, lsl #19
   12a28:	andeq	r4, r0, r4, ror pc
   12a2c:	andeq	r4, r0, r4, ror #31
   12a30:	andeq	r4, r0, r8, lsl #28
   12a34:	andeq	r5, r0, r0, lsr r0
   12a38:	andeq	r5, r0, r8, asr #18
   12a3c:	strd	r4, [sp, #-16]!
   12a40:	mov	r4, r0
   12a44:	mov	r0, #1
   12a48:	ldr	ip, [r4, #28]
   12a4c:	mov	r3, r0
   12a50:	mov	r5, r2
   12a54:	str	r6, [sp, #8]
   12a58:	str	lr, [sp, #12]
   12a5c:	sub	sp, sp, #8
   12a60:	str	r0, [sp]
   12a64:	add	r2, r1, ip
   12a68:	add	r1, r4, #60	; 0x3c
   12a6c:	ldr	r0, [r4, #40]	; 0x28
   12a70:	ldr	r6, [r4, #48]	; 0x30
   12a74:	blx	r6
   12a78:	cmp	r0, #0
   12a7c:	bne	12abc <emit_test@@Base+0x68c>
   12a80:	ldr	r1, [r4, #28]
   12a84:	ldr	ip, [r4, #32]
   12a88:	ldrd	r2, [r4, #60]	; 0x3c
   12a8c:	sub	r3, r3, r1
   12a90:	add	r2, r2, r1
   12a94:	cmp	r3, r5
   12a98:	movcs	r3, r5
   12a9c:	str	r2, [r4, #16]
   12aa0:	str	r3, [r4, #24]
   12aa4:	str	r5, [ip, #4]
   12aa8:	add	sp, sp, #8
   12aac:	ldrd	r4, [sp]
   12ab0:	ldr	r6, [sp, #8]
   12ab4:	add	sp, sp, #12
   12ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   12abc:	mvn	r0, #0
   12ac0:	b	12aa8 <emit_test@@Base+0x678>

00012ac4 <flatcc_builder_default_alloc@@Base>:
   12ac4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ac8:	subs	r5, r2, #0
   12acc:	strd	r6, [sp, #8]
   12ad0:	mov	r6, r1
   12ad4:	str	r8, [sp, #16]
   12ad8:	str	lr, [sp, #20]
   12adc:	beq	12b14 <flatcc_builder_default_alloc@@Base+0x50>
   12ae0:	mov	r7, r3
   12ae4:	ldr	r3, [sp, #24]
   12ae8:	sub	r2, r3, #1
   12aec:	cmp	r2, #6
   12af0:	addls	pc, pc, r2, lsl #2
   12af4:	b	12bc4 <flatcc_builder_default_alloc@@Base+0x100>
   12af8:	b	12b44 <flatcc_builder_default_alloc@@Base+0x80>
   12afc:	b	12bc4 <flatcc_builder_default_alloc@@Base+0x100>
   12b00:	b	12bc4 <flatcc_builder_default_alloc@@Base+0x100>
   12b04:	b	12bbc <flatcc_builder_default_alloc@@Base+0xf8>
   12b08:	b	12bac <flatcc_builder_default_alloc@@Base+0xe8>
   12b0c:	b	12bc4 <flatcc_builder_default_alloc@@Base+0x100>
   12b10:	b	12bb4 <flatcc_builder_default_alloc@@Base+0xf0>
   12b14:	ldr	r0, [r1]
   12b18:	cmp	r0, #0
   12b1c:	beq	12b30 <flatcc_builder_default_alloc@@Base+0x6c>
   12b20:	bl	11f9c <free@plt>
   12b24:	mov	r0, r5
   12b28:	str	r5, [r6]
   12b2c:	str	r5, [r6, #4]
   12b30:	ldrd	r4, [sp]
   12b34:	ldrd	r6, [sp, #8]
   12b38:	ldr	r8, [sp, #16]
   12b3c:	add	sp, sp, #20
   12b40:	pop	{pc}		; (ldr pc, [sp], #4)
   12b44:	mov	r4, #256	; 0x100
   12b48:	cmp	r4, r5
   12b4c:	bcs	12b5c <flatcc_builder_default_alloc@@Base+0x98>
   12b50:	lsl	r4, r4, #1
   12b54:	cmp	r5, r4
   12b58:	bhi	12b50 <flatcc_builder_default_alloc@@Base+0x8c>
   12b5c:	ldr	r2, [r6, #4]
   12b60:	cmp	r5, r2
   12b64:	bhi	12b74 <flatcc_builder_default_alloc@@Base+0xb0>
   12b68:	cmp	r4, r2, lsr #1
   12b6c:	movls	r0, #0
   12b70:	bls	12b30 <flatcc_builder_default_alloc@@Base+0x6c>
   12b74:	mov	r1, r4
   12b78:	ldr	r0, [r6]
   12b7c:	bl	11fc0 <realloc@plt>
   12b80:	subs	r5, r0, #0
   12b84:	beq	12be0 <flatcc_builder_default_alloc@@Base+0x11c>
   12b88:	cmp	r7, #0
   12b8c:	beq	12b9c <flatcc_builder_default_alloc@@Base+0xd8>
   12b90:	ldr	r0, [r6, #4]
   12b94:	cmp	r0, r4
   12b98:	bcc	12bcc <flatcc_builder_default_alloc@@Base+0x108>
   12b9c:	mov	r0, #0
   12ba0:	str	r5, [r6]
   12ba4:	str	r4, [r6, #4]
   12ba8:	b	12b30 <flatcc_builder_default_alloc@@Base+0x6c>
   12bac:	mov	r4, r5
   12bb0:	b	12b5c <flatcc_builder_default_alloc@@Base+0x98>
   12bb4:	mov	r4, #64	; 0x40
   12bb8:	b	12b48 <flatcc_builder_default_alloc@@Base+0x84>
   12bbc:	mov	r4, #288	; 0x120
   12bc0:	b	12b48 <flatcc_builder_default_alloc@@Base+0x84>
   12bc4:	mov	r4, #32
   12bc8:	b	12b48 <flatcc_builder_default_alloc@@Base+0x84>
   12bcc:	sub	r2, r4, r0
   12bd0:	mov	r1, #0
   12bd4:	add	r0, r5, r0
   12bd8:	bl	1202c <memset@plt>
   12bdc:	b	12b9c <flatcc_builder_default_alloc@@Base+0xd8>
   12be0:	mvn	r0, #0
   12be4:	b	12b30 <flatcc_builder_default_alloc@@Base+0x6c>
   12be8:	ldr	r3, [pc, #32]	; 12c10 <flatcc_builder_default_alloc@@Base+0x14c>
   12bec:	mov	r2, #308	; 0x134
   12bf0:	str	r4, [sp, #-8]!
   12bf4:	ldr	r1, [pc, #24]	; 12c14 <flatcc_builder_default_alloc@@Base+0x150>
   12bf8:	str	lr, [sp, #4]
   12bfc:	ldr	r0, [pc, #20]	; 12c18 <flatcc_builder_default_alloc@@Base+0x154>
   12c00:	add	r3, pc, r3
   12c04:	add	r1, pc, r1
   12c08:	add	r0, pc, r0
   12c0c:	bl	1205c <__assert_fail@plt>
   12c10:	andeq	r4, r0, r8, lsl #30
   12c14:	andeq	r5, r0, r4, asr r6
   12c18:	ldrdeq	r5, [r0], -r8
   12c1c:	ldr	r3, [pc, #36]	; 12c48 <flatcc_builder_default_alloc@@Base+0x184>
   12c20:	movw	r2, #677	; 0x2a5
   12c24:	str	r4, [sp, #-8]!
   12c28:	ldr	r1, [pc, #28]	; 12c4c <flatcc_builder_default_alloc@@Base+0x188>
   12c2c:	str	lr, [sp, #4]
   12c30:	ldr	r0, [pc, #24]	; 12c50 <flatcc_builder_default_alloc@@Base+0x18c>
   12c34:	add	r3, pc, r3
   12c38:	add	r3, r3, #16
   12c3c:	add	r1, pc, r1
   12c40:	add	r0, pc, r0
   12c44:	bl	1205c <__assert_fail@plt>
   12c48:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   12c4c:	andeq	r5, r0, ip, lsl r6
   12c50:	andeq	r5, r0, r0, lsr #13
   12c54:	strd	r4, [sp, #-12]!
   12c58:	cmp	r2, #0
   12c5c:	mov	ip, r0
   12c60:	str	lr, [sp, #8]
   12c64:	sub	sp, sp, #84	; 0x54
   12c68:	ldr	lr, [pc, #248]	; 12d68 <flatcc_builder_default_alloc@@Base+0x2a4>
   12c6c:	add	lr, pc, lr
   12c70:	bne	12c80 <flatcc_builder_default_alloc@@Base+0x1bc>
   12c74:	ldrh	r2, [r0, #132]	; 0x84
   12c78:	cmp	r2, #0
   12c7c:	moveq	r2, #1
   12c80:	ldrh	r0, [r1]
   12c84:	cmp	r0, #3
   12c88:	bhi	12c98 <flatcc_builder_default_alloc@@Base+0x1d4>
   12c8c:	mov	r4, #4
   12c90:	mov	r0, r4
   12c94:	strh	r4, [r1]
   12c98:	cmp	r2, r0
   12c9c:	strhhi	r2, [r1]
   12ca0:	cmp	r3, #0
   12ca4:	bne	12cb8 <flatcc_builder_default_alloc@@Base+0x1f4>
   12ca8:	ldr	r4, [ip, #140]	; 0x8c
   12cac:	sub	r2, r2, #1
   12cb0:	ands	r1, r2, r4
   12cb4:	bne	12ccc <flatcc_builder_default_alloc@@Base+0x208>
   12cb8:	mov	r0, #0
   12cbc:	add	sp, sp, #84	; 0x54
   12cc0:	ldrd	r4, [sp]
   12cc4:	add	sp, sp, #8
   12cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ccc:	ldr	r3, [pc, #152]	; 12d6c <flatcc_builder_default_alloc@@Base+0x2a8>
   12cd0:	add	r0, r4, r1
   12cd4:	mov	r2, #1
   12cd8:	str	r1, [sp, #8]
   12cdc:	cmp	r4, r0
   12ce0:	ldr	r3, [lr, r3]
   12ce4:	str	r0, [ip, #140]	; 0x8c
   12ce8:	strd	r2, [sp, #12]
   12cec:	str	r1, [sp, #20]
   12cf0:	bgt	12d44 <flatcc_builder_default_alloc@@Base+0x280>
   12cf4:	mov	r3, r4
   12cf8:	str	r1, [sp]
   12cfc:	add	r1, sp, #16
   12d00:	ldr	r0, [ip, #36]	; 0x24
   12d04:	ldr	r5, [ip, #44]	; 0x2c
   12d08:	blx	r5
   12d0c:	cmp	r0, #0
   12d10:	bne	12d40 <flatcc_builder_default_alloc@@Base+0x27c>
   12d14:	cmn	r4, #1
   12d18:	bne	12cb8 <flatcc_builder_default_alloc@@Base+0x1f4>
   12d1c:	ldr	r3, [pc, #76]	; 12d70 <flatcc_builder_default_alloc@@Base+0x2ac>
   12d20:	movw	r2, #702	; 0x2be
   12d24:	ldr	r1, [pc, #72]	; 12d74 <flatcc_builder_default_alloc@@Base+0x2b0>
   12d28:	ldr	r0, [pc, #72]	; 12d78 <flatcc_builder_default_alloc@@Base+0x2b4>
   12d2c:	add	r3, pc, r3
   12d30:	add	r3, r3, #28
   12d34:	add	r1, pc, r1
   12d38:	add	r0, pc, r0
   12d3c:	bl	1205c <__assert_fail@plt>
   12d40:	bl	12c1c <flatcc_builder_default_alloc@@Base+0x158>
   12d44:	ldr	r3, [pc, #48]	; 12d7c <flatcc_builder_default_alloc@@Base+0x2b8>
   12d48:	movw	r2, #673	; 0x2a1
   12d4c:	ldr	r1, [pc, #44]	; 12d80 <flatcc_builder_default_alloc@@Base+0x2bc>
   12d50:	ldr	r0, [pc, #44]	; 12d84 <flatcc_builder_default_alloc@@Base+0x2c0>
   12d54:	add	r3, pc, r3
   12d58:	add	r3, r3, #16
   12d5c:	add	r1, pc, r1
   12d60:	add	r0, pc, r0
   12d64:	bl	1205c <__assert_fail@plt>
   12d68:	andeq	r6, r1, ip, lsl #7
   12d6c:	andeq	r0, r0, r4, asr r0
   12d70:	ldrdeq	r4, [r0], -ip
   12d74:	andeq	r5, r0, r4, lsr #10
   12d78:	andeq	r5, r0, r8, lsr #11
   12d7c:			; <UNDEFINED> instruction: 0x00004db4
   12d80:	strdeq	r5, [r0], -ip
   12d84:	andeq	r5, r0, r0, lsl #11
   12d88:	ldr	r3, [pc, #36]	; 12db4 <flatcc_builder_default_alloc@@Base+0x2f0>
   12d8c:	movw	r2, #651	; 0x28b
   12d90:	str	r4, [sp, #-8]!
   12d94:	ldr	r1, [pc, #28]	; 12db8 <flatcc_builder_default_alloc@@Base+0x2f4>
   12d98:	str	lr, [sp, #4]
   12d9c:	ldr	r0, [pc, #24]	; 12dbc <flatcc_builder_default_alloc@@Base+0x2f8>
   12da0:	add	r3, pc, r3
   12da4:	add	r3, r3, #44	; 0x2c
   12da8:	add	r1, pc, r1
   12dac:	add	r0, pc, r0
   12db0:	bl	1205c <__assert_fail@plt>
   12db4:	andeq	r4, r0, r8, ror #26
   12db8:			; <UNDEFINED> instruction: 0x000054b0
   12dbc:	andeq	r5, r0, r4, lsr r5
   12dc0:	ldr	r3, [pc, #36]	; 12dec <flatcc_builder_default_alloc@@Base+0x328>
   12dc4:	mov	r2, #892	; 0x37c
   12dc8:	str	r4, [sp, #-8]!
   12dcc:	ldr	r1, [pc, #28]	; 12df0 <flatcc_builder_default_alloc@@Base+0x32c>
   12dd0:	str	lr, [sp, #4]
   12dd4:	ldr	r0, [pc, #24]	; 12df4 <flatcc_builder_default_alloc@@Base+0x330>
   12dd8:	add	r3, pc, r3
   12ddc:	add	r3, r3, #56	; 0x38
   12de0:	add	r1, pc, r1
   12de4:	add	r0, pc, r0
   12de8:	bl	1205c <__assert_fail@plt>
   12dec:	andeq	r4, r0, r0, lsr sp
   12df0:	andeq	r5, r0, r8, ror r4
   12df4:	ldrdeq	r5, [r0], -r4
   12df8:	ldrd	r2, [r0, #156]	; 0x9c
   12dfc:	strd	r4, [sp, #-20]!	; 0xffffffec
   12e00:	mov	r5, r1
   12e04:	mov	r4, r0
   12e08:	strd	r6, [sp, #8]
   12e0c:	str	lr, [sp, #16]
   12e10:	sub	sp, sp, #12
   12e14:	add	r1, r2, #1
   12e18:	cmp	r1, r3
   12e1c:	str	r1, [r0, #156]	; 0x9c
   12e20:	ble	12f00 <flatcc_builder_default_alloc@@Base+0x43c>
   12e24:	ldr	r3, [r0, #176]	; 0xb0
   12e28:	cmp	r1, r3
   12e2c:	cmpgt	r3, #0
   12e30:	movgt	r3, #1
   12e34:	movle	r3, #0
   12e38:	bgt	12f10 <flatcc_builder_default_alloc@@Base+0x44c>
   12e3c:	add	r2, r2, r2, lsl #3
   12e40:	ldr	r1, [r0, #88]	; 0x58
   12e44:	lsl	r6, r2, #2
   12e48:	add	r2, r6, #36	; 0x24
   12e4c:	cmp	r2, r1
   12e50:	bls	12e74 <flatcc_builder_default_alloc@@Base+0x3b0>
   12e54:	mov	ip, #4
   12e58:	add	r1, r0, #84	; 0x54
   12e5c:	ldr	r0, [r0, #40]	; 0x28
   12e60:	str	ip, [sp]
   12e64:	ldr	r7, [r4, #48]	; 0x30
   12e68:	blx	r7
   12e6c:	cmp	r0, #0
   12e70:	bne	12f18 <flatcc_builder_default_alloc@@Base+0x454>
   12e74:	ldr	r2, [r4, #84]	; 0x54
   12e78:	add	r2, r2, r6
   12e7c:	cmp	r2, #0
   12e80:	str	r2, [r4, #32]
   12e84:	beq	12f10 <flatcc_builder_default_alloc@@Base+0x44c>
   12e88:	ldr	r3, [r4, #88]	; 0x58
   12e8c:	movw	r0, #36409	; 0x8e39
   12e90:	movt	r0, #14563	; 0x38e3
   12e94:	ldr	r1, [r4, #176]	; 0xb0
   12e98:	umull	r0, r3, r0, r3
   12e9c:	lsr	r3, r3, #3
   12ea0:	cmp	r3, r1
   12ea4:	cmpgt	r1, #0
   12ea8:	movgt	r3, r1
   12eac:	str	r3, [r4, #160]	; 0xa0
   12eb0:	ldr	r3, [r4, #20]
   12eb4:	mov	r1, #0
   12eb8:	mvn	lr, #3
   12ebc:	mov	r0, r1
   12ec0:	ldr	ip, [r4, #28]
   12ec4:	ldrh	r6, [r4, #130]	; 0x82
   12ec8:	str	r3, [r2, #8]
   12ecc:	add	r3, r3, ip
   12ed0:	add	r3, r3, #7
   12ed4:	bic	r3, r3, #7
   12ed8:	strh	r6, [r2, #12]
   12edc:	strh	r5, [r4, #130]	; 0x82
   12ee0:	stm	r2, {ip, lr}
   12ee4:	str	r1, [r4, #20]
   12ee8:	str	r3, [r4, #28]
   12eec:	add	sp, sp, #12
   12ef0:	ldrd	r4, [sp]
   12ef4:	ldrd	r6, [sp, #8]
   12ef8:	add	sp, sp, #16
   12efc:	pop	{pc}		; (ldr pc, [sp], #4)
   12f00:	ldr	r2, [r0, #32]
   12f04:	add	r2, r2, #36	; 0x24
   12f08:	str	r2, [r0, #32]
   12f0c:	b	12eb0 <flatcc_builder_default_alloc@@Base+0x3ec>
   12f10:	mvn	r0, #0
   12f14:	b	12eec <flatcc_builder_default_alloc@@Base+0x428>
   12f18:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>
   12f1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12f20:	mov	r4, r0
   12f24:	mov	r5, #4
   12f28:	ldrh	r0, [r0, #128]	; 0x80
   12f2c:	strd	r6, [sp, #8]
   12f30:	str	lr, [sp, #16]
   12f34:	sub	sp, sp, #92	; 0x5c
   12f38:	ldr	lr, [pc, #464]	; 13110 <flatcc_builder_default_alloc@@Base+0x64c>
   12f3c:	str	r2, [sp, #12]
   12f40:	cmp	r0, #3
   12f44:	ldr	r6, [r4, #136]	; 0x88
   12f48:	movls	r0, #4
   12f4c:	str	r5, [sp, #16]
   12f50:	str	r5, [sp, #28]
   12f54:	strhls	r0, [r4, #128]	; 0x80
   12f58:	mov	r0, #1
   12f5c:	lsls	ip, r2, #2
   12f60:	add	lr, pc, lr
   12f64:	str	r0, [sp, #20]
   12f68:	add	r0, sp, #12
   12f6c:	str	r0, [sp, #24]
   12f70:	and	r0, r6, #3
   12f74:	beq	12f90 <flatcc_builder_default_alloc@@Base+0x4cc>
   12f78:	add	r5, ip, r5
   12f7c:	mov	r7, #2
   12f80:	str	r5, [sp, #16]
   12f84:	str	r7, [sp, #20]
   12f88:	str	r1, [sp, #32]
   12f8c:	str	ip, [sp, #36]	; 0x24
   12f90:	cmp	r0, #0
   12f94:	beq	12fc4 <flatcc_builder_default_alloc@@Base+0x500>
   12f98:	ldr	r7, [pc, #372]	; 13114 <flatcc_builder_default_alloc@@Base+0x650>
   12f9c:	add	r5, r5, r0
   12fa0:	ldr	ip, [sp, #20]
   12fa4:	str	r5, [sp, #16]
   12fa8:	ldr	r7, [lr, r7]
   12fac:	add	lr, sp, #88	; 0x58
   12fb0:	add	ip, ip, #1
   12fb4:	add	lr, lr, ip, lsl #3
   12fb8:	str	ip, [sp, #20]
   12fbc:	str	r7, [lr, #-72]	; 0xffffffb8
   12fc0:	str	r0, [lr, #-68]	; 0xffffffbc
   12fc4:	cmp	r2, #0
   12fc8:	beq	13054 <flatcc_builder_default_alloc@@Base+0x590>
   12fcc:	sub	r6, r1, r6
   12fd0:	add	lr, r2, r3
   12fd4:	add	r6, r6, r5
   12fd8:	mov	r2, r3
   12fdc:	b	1300c <flatcc_builder_default_alloc@@Base+0x548>
   12fe0:	sub	r0, r6, r1
   12fe4:	cmp	r3, #0
   12fe8:	add	r0, r0, ip
   12fec:	str	r0, [r1, #-4]
   12ff0:	beq	13000 <flatcc_builder_default_alloc@@Base+0x53c>
   12ff4:	ldrb	r0, [r2]
   12ff8:	cmp	r0, #0
   12ffc:	beq	130c4 <flatcc_builder_default_alloc@@Base+0x600>
   13000:	add	r2, r2, #1
   13004:	cmp	lr, r2
   13008:	beq	13050 <flatcc_builder_default_alloc@@Base+0x58c>
   1300c:	ldr	ip, [r1], #4
   13010:	cmp	ip, #0
   13014:	bne	12fe0 <flatcc_builder_default_alloc@@Base+0x51c>
   13018:	cmp	r3, #0
   1301c:	beq	130a0 <flatcc_builder_default_alloc@@Base+0x5dc>
   13020:	ldrb	r0, [r2]
   13024:	cmp	r0, #0
   13028:	beq	13000 <flatcc_builder_default_alloc@@Base+0x53c>
   1302c:	ldr	r3, [pc, #228]	; 13118 <flatcc_builder_default_alloc@@Base+0x654>
   13030:	movw	r2, #1461	; 0x5b5
   13034:	ldr	r1, [pc, #224]	; 1311c <flatcc_builder_default_alloc@@Base+0x658>
   13038:	ldr	r0, [pc, #224]	; 13120 <flatcc_builder_default_alloc@@Base+0x65c>
   1303c:	add	r3, pc, r3
   13040:	add	r3, r3, #76	; 0x4c
   13044:	add	r1, pc, r1
   13048:	add	r0, pc, r0
   1304c:	bl	1205c <__assert_fail@plt>
   13050:	ldr	r6, [r4, #136]	; 0x88
   13054:	sub	r7, r6, r5
   13058:	cmp	r7, r6
   1305c:	bge	130ec <flatcc_builder_default_alloc@@Base+0x628>
   13060:	mov	r3, r7
   13064:	add	r1, sp, #24
   13068:	str	r5, [sp]
   1306c:	ldr	r2, [sp, #20]
   13070:	ldr	r0, [r4, #36]	; 0x24
   13074:	ldr	r5, [r4, #44]	; 0x2c
   13078:	blx	r5
   1307c:	cmp	r0, #0
   13080:	bne	130e8 <flatcc_builder_default_alloc@@Base+0x624>
   13084:	mov	r0, r7
   13088:	str	r7, [r4, #136]	; 0x88
   1308c:	add	sp, sp, #92	; 0x5c
   13090:	ldrd	r4, [sp]
   13094:	ldrd	r6, [sp, #8]
   13098:	add	sp, sp, #16
   1309c:	pop	{pc}		; (ldr pc, [sp], #4)
   130a0:	ldr	r3, [pc, #124]	; 13124 <flatcc_builder_default_alloc@@Base+0x660>
   130a4:	movw	r2, #1463	; 0x5b7
   130a8:	ldr	r1, [pc, #120]	; 13128 <flatcc_builder_default_alloc@@Base+0x664>
   130ac:	ldr	r0, [pc, #120]	; 1312c <flatcc_builder_default_alloc@@Base+0x668>
   130b0:	add	r3, pc, r3
   130b4:	add	r3, r3, #76	; 0x4c
   130b8:	add	r1, pc, r1
   130bc:	add	r0, pc, r0
   130c0:	bl	1205c <__assert_fail@plt>
   130c4:	ldr	r3, [pc, #100]	; 13130 <flatcc_builder_default_alloc@@Base+0x66c>
   130c8:	movw	r2, #1457	; 0x5b1
   130cc:	ldr	r1, [pc, #96]	; 13134 <flatcc_builder_default_alloc@@Base+0x670>
   130d0:	ldr	r0, [pc, #96]	; 13138 <flatcc_builder_default_alloc@@Base+0x674>
   130d4:	add	r3, pc, r3
   130d8:	add	r3, r3, #76	; 0x4c
   130dc:	add	r1, pc, r1
   130e0:	add	r0, pc, r0
   130e4:	bl	1205c <__assert_fail@plt>
   130e8:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   130ec:	ldr	r3, [pc, #72]	; 1313c <flatcc_builder_default_alloc@@Base+0x678>
   130f0:	movw	r2, #647	; 0x287
   130f4:	ldr	r1, [pc, #68]	; 13140 <flatcc_builder_default_alloc@@Base+0x67c>
   130f8:	ldr	r0, [pc, #68]	; 13144 <flatcc_builder_default_alloc@@Base+0x680>
   130fc:	add	r3, pc, r3
   13100:	add	r3, r3, #44	; 0x2c
   13104:	add	r1, pc, r1
   13108:	add	r0, pc, r0
   1310c:	bl	1205c <__assert_fail@plt>
   13110:	muleq	r1, r8, r0
   13114:	andeq	r0, r0, r4, asr r0
   13118:	andeq	r4, r0, ip, asr #21
   1311c:	andeq	r5, r0, r4, lsl r2
   13120:	muleq	r0, ip, r2
   13124:	andeq	r4, r0, r8, asr sl
   13128:	andeq	r5, r0, r0, lsr #3
   1312c:	andeq	r5, r0, r4, lsr #4
   13130:	andeq	r4, r0, r4, lsr sl
   13134:	andeq	r5, r0, ip, ror r1
   13138:	strdeq	r5, [r0], -r4
   1313c:	andeq	r4, r0, ip, lsl #20
   13140:	andeq	r5, r0, r4, asr r1
   13144:	ldrdeq	r5, [r0], -r8

00013148 <flatcc_builder_flush_vtable_cache@@Base>:
   13148:	ldr	r3, [r0, #116]	; 0x74
   1314c:	cmp	r3, #0
   13150:	bxeq	lr
   13154:	str	r4, [sp, #-8]!
   13158:	mov	r4, r0
   1315c:	mov	r1, #0
   13160:	ldr	r0, [r0, #92]	; 0x5c
   13164:	ldr	r2, [r4, #96]	; 0x60
   13168:	str	lr, [sp, #4]
   1316c:	bl	1202c <memset@plt>
   13170:	mov	r3, #16
   13174:	mov	r2, #0
   13178:	strd	r2, [r4, #120]	; 0x78
   1317c:	ldr	r4, [sp]
   13180:	add	sp, sp, #4
   13184:	pop	{pc}		; (ldr pc, [sp], #4)

00013188 <flatcc_builder_custom_init@@Base>:
   13188:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1318c:	mov	r5, r3
   13190:	mov	r4, r0
   13194:	strd	r6, [sp, #8]
   13198:	mov	r6, r1
   1319c:	mov	r1, #0
   131a0:	ldr	r7, [pc, #124]	; 13224 <flatcc_builder_custom_init@@Base+0x9c>
   131a4:	strd	r8, [sp, #16]
   131a8:	mov	r8, r2
   131ac:	mov	r2, #232	; 0xe8
   131b0:	str	sl, [sp, #24]
   131b4:	str	lr, [sp, #28]
   131b8:	ldr	r9, [sp, #32]
   131bc:	bl	1202c <memset@plt>
   131c0:	cmp	r6, #0
   131c4:	add	r7, pc, r7
   131c8:	beq	131fc <flatcc_builder_custom_init@@Base+0x74>
   131cc:	cmp	r5, #0
   131d0:	beq	13218 <flatcc_builder_custom_init@@Base+0x90>
   131d4:	ldr	sl, [sp, #24]
   131d8:	mov	r0, #0
   131dc:	strd	r8, [r4, #36]	; 0x24
   131e0:	str	r6, [r4, #44]	; 0x2c
   131e4:	str	r5, [r4, #48]	; 0x30
   131e8:	ldrd	r4, [sp]
   131ec:	ldrd	r6, [sp, #8]
   131f0:	ldrd	r8, [sp, #16]
   131f4:	add	sp, sp, #28
   131f8:	pop	{pc}		; (ldr pc, [sp], #4)
   131fc:	ldr	r3, [pc, #36]	; 13228 <flatcc_builder_custom_init@@Base+0xa0>
   13200:	mov	r2, #1
   13204:	cmp	r5, #0
   13208:	add	r8, r4, #188	; 0xbc
   1320c:	str	r2, [r4, #184]	; 0xb8
   13210:	ldr	r6, [r7, r3]
   13214:	bne	131d4 <flatcc_builder_custom_init@@Base+0x4c>
   13218:	ldr	r3, [pc, #12]	; 1322c <flatcc_builder_custom_init@@Base+0xa4>
   1321c:	ldr	r5, [r7, r3]
   13220:	b	131d4 <flatcc_builder_custom_init@@Base+0x4c>
   13224:	andeq	r5, r1, r4, lsr lr
   13228:	andeq	r0, r0, r8, rrx
   1322c:	andeq	r0, r0, r4, rrx

00013230 <flatcc_builder_init@@Base>:
   13230:	mov	ip, #0
   13234:	push	{lr}		; (str lr, [sp, #-4]!)
   13238:	sub	sp, sp, #12
   1323c:	mov	r3, ip
   13240:	mov	r2, ip
   13244:	mov	r1, ip
   13248:	str	ip, [sp]
   1324c:	bl	13188 <flatcc_builder_custom_init@@Base>
   13250:	add	sp, sp, #12
   13254:	pop	{pc}		; (ldr pc, [sp], #4)

00013258 <flatcc_builder_custom_reset@@Base>:
   13258:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1325c:	mov	r5, #0
   13260:	mov	r4, r0
   13264:	strd	r6, [sp, #8]
   13268:	mov	r6, r0
   1326c:	strd	r8, [sp, #16]
   13270:	mov	r8, r1
   13274:	mov	r9, r2
   13278:	str	lr, [sp, #24]
   1327c:	sub	sp, sp, #12
   13280:	b	132d0 <flatcc_builder_custom_reset@@Base+0x78>
   13284:	cmp	r5, #5
   13288:	cmpne	r9, #0
   1328c:	beq	132b4 <flatcc_builder_custom_reset@@Base+0x5c>
   13290:	mov	r3, #1
   13294:	str	r5, [sp]
   13298:	mov	r2, r3
   1329c:	ldr	r0, [r6, #40]	; 0x28
   132a0:	ldr	r7, [r6, #48]	; 0x30
   132a4:	blx	r7
   132a8:	cmp	r0, #0
   132ac:	bne	133c0 <flatcc_builder_custom_reset@@Base+0x168>
   132b0:	ldr	r0, [r4, #52]	; 0x34
   132b4:	mov	r1, #0
   132b8:	ldr	r2, [r4, #56]	; 0x38
   132bc:	bl	1202c <memset@plt>
   132c0:	add	r5, r5, #1
   132c4:	add	r4, r4, #8
   132c8:	cmp	r5, #8
   132cc:	beq	13310 <flatcc_builder_custom_reset@@Base+0xb8>
   132d0:	ldr	r0, [r4, #52]	; 0x34
   132d4:	add	r1, r4, #52	; 0x34
   132d8:	cmp	r0, #0
   132dc:	bne	13284 <flatcc_builder_custom_reset@@Base+0x2c>
   132e0:	ldr	r3, [r4, #56]	; 0x38
   132e4:	cmp	r3, #0
   132e8:	beq	132c0 <flatcc_builder_custom_reset@@Base+0x68>
   132ec:	ldr	r3, [pc, #212]	; 133c8 <flatcc_builder_custom_reset@@Base+0x170>
   132f0:	movw	r2, #434	; 0x1b2
   132f4:	ldr	r1, [pc, #208]	; 133cc <flatcc_builder_custom_reset@@Base+0x174>
   132f8:	ldr	r0, [pc, #208]	; 133d0 <flatcc_builder_custom_reset@@Base+0x178>
   132fc:	add	r3, pc, r3
   13300:	add	r3, r3, #108	; 0x6c
   13304:	add	r1, pc, r1
   13308:	add	r0, pc, r0
   1330c:	bl	1205c <__assert_fail@plt>
   13310:	mov	r2, #0
   13314:	ldr	r0, [r6, #52]	; 0x34
   13318:	ldr	r3, [r6, #124]	; 0x7c
   1331c:	ldr	r1, [r6, #60]	; 0x3c
   13320:	str	r0, [r6, #4]
   13324:	str	r2, [r6, #120]	; 0x78
   13328:	cmp	r3, r2
   1332c:	ldr	r2, [r6, #76]	; 0x4c
   13330:	movne	r3, #16
   13334:	strne	r3, [r6, #124]	; 0x7c
   13338:	mov	r3, #0
   1333c:	cmp	r8, r3
   13340:	str	r2, [r6]
   13344:	str	r1, [r6, #16]
   13348:	str	r3, [r6, #20]
   1334c:	str	r3, [r6, #24]
   13350:	str	r3, [r6, #32]
   13354:	strh	r3, [r6, #128]	; 0x80
   13358:	str	r3, [r6, #136]	; 0x88
   1335c:	str	r3, [r6, #140]	; 0x8c
   13360:	str	r3, [r6, #148]	; 0x94
   13364:	str	r3, [r6, #152]	; 0x98
   13368:	str	r3, [r6, #156]	; 0x9c
   1336c:	str	r3, [r6, #160]	; 0xa0
   13370:	bne	13398 <flatcc_builder_custom_reset@@Base+0x140>
   13374:	ldr	r0, [r6, #184]	; 0xb8
   13378:	cmp	r0, #0
   1337c:	bne	133b0 <flatcc_builder_custom_reset@@Base+0x158>
   13380:	add	sp, sp, #12
   13384:	ldrd	r4, [sp]
   13388:	ldrd	r6, [sp, #8]
   1338c:	ldrd	r8, [sp, #16]
   13390:	add	sp, sp, #24
   13394:	pop	{pc}		; (ldr pc, [sp], #4)
   13398:	ldr	r0, [r6, #184]	; 0xb8
   1339c:	str	r3, [r6, #172]	; 0xac
   133a0:	str	r3, [r6, #176]	; 0xb0
   133a4:	str	r3, [r6, #180]	; 0xb4
   133a8:	cmp	r0, #0
   133ac:	beq	13380 <flatcc_builder_custom_reset@@Base+0x128>
   133b0:	add	r0, r6, #188	; 0xbc
   133b4:	bl	17190 <flatcc_emitter_reset@@Base>
   133b8:	mov	r0, #0
   133bc:	b	13380 <flatcc_builder_custom_reset@@Base+0x128>
   133c0:	mvn	r0, #0
   133c4:	b	13380 <flatcc_builder_custom_reset@@Base+0x128>
   133c8:	andeq	r4, r0, ip, lsl #16
   133cc:	andeq	r4, r0, r4, asr pc
   133d0:	andeq	r4, r0, ip, ror #31

000133d4 <flatcc_builder_reset@@Base>:
   133d4:	mov	r2, #0
   133d8:	mov	r1, r2
   133dc:	b	13258 <flatcc_builder_custom_reset@@Base>

000133e0 <flatcc_builder_clear@@Base>:
   133e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   133e4:	mov	r4, #0
   133e8:	add	r5, r0, #52	; 0x34
   133ec:	strd	r6, [sp, #8]
   133f0:	mov	r6, r0
   133f4:	str	lr, [sp, #16]
   133f8:	sub	sp, sp, #12
   133fc:	mov	r3, #0
   13400:	mov	r1, r5
   13404:	str	r4, [sp]
   13408:	mov	r2, r3
   1340c:	add	r4, r4, #1
   13410:	ldr	r0, [r6, #40]	; 0x28
   13414:	add	r5, r5, #8
   13418:	ldr	r7, [r6, #48]	; 0x30
   1341c:	blx	r7
   13420:	cmp	r4, #8
   13424:	bne	133fc <flatcc_builder_clear@@Base+0x1c>
   13428:	ldr	r3, [r6, #184]	; 0xb8
   1342c:	cmp	r3, #0
   13430:	bne	13458 <flatcc_builder_clear@@Base+0x78>
   13434:	mov	r0, r6
   13438:	mov	r2, #232	; 0xe8
   1343c:	mov	r1, #0
   13440:	add	sp, sp, #12
   13444:	ldrd	r4, [sp]
   13448:	ldrd	r6, [sp, #8]
   1344c:	ldr	lr, [sp, #16]
   13450:	add	sp, sp, #20
   13454:	b	1202c <memset@plt>
   13458:	add	r0, r6, #188	; 0xbc
   1345c:	bl	17264 <flatcc_emitter_clear@@Base>
   13460:	b	13434 <flatcc_builder_clear@@Base+0x54>

00013464 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13464:	strd	r4, [sp, #-20]!	; 0xffffffec
   13468:	add	r4, r1, #3
   1346c:	mov	r5, r0
   13470:	ldr	r3, [r0, #112]	; 0x70
   13474:	bic	r4, r4, #3
   13478:	strd	r6, [sp, #8]
   1347c:	add	r4, r4, #4
   13480:	ldr	r6, [r0, #228]	; 0xe4
   13484:	str	lr, [sp, #16]
   13488:	sub	sp, sp, #12
   1348c:	add	r2, r6, r4
   13490:	cmp	r2, r3
   13494:	bls	134bc <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   13498:	mov	ip, #7
   1349c:	add	r1, r0, #108	; 0x6c
   134a0:	ldr	r0, [r0, #40]	; 0x28
   134a4:	mov	r3, #0
   134a8:	str	ip, [sp]
   134ac:	ldr	r7, [r5, #48]	; 0x30
   134b0:	blx	r7
   134b4:	cmp	r0, #0
   134b8:	bne	13510 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   134bc:	ldr	r7, [r5, #108]	; 0x6c
   134c0:	adds	r3, r7, r6
   134c4:	moveq	r0, r3
   134c8:	beq	134fc <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   134cc:	mov	r2, r4
   134d0:	mov	r0, r3
   134d4:	mov	r1, #0
   134d8:	bl	1202c <memset@plt>
   134dc:	ldr	r2, [r5, #224]	; 0xe0
   134e0:	add	r0, r0, #4
   134e4:	str	r2, [r7, r6]
   134e8:	ldr	r3, [r5, #228]	; 0xe4
   134ec:	add	r4, r3, r4
   134f0:	add	r3, r3, #4
   134f4:	str	r3, [r5, #224]	; 0xe0
   134f8:	str	r4, [r5, #228]	; 0xe4
   134fc:	add	sp, sp, #12
   13500:	ldrd	r4, [sp]
   13504:	ldrd	r6, [sp, #8]
   13508:	add	sp, sp, #16
   1350c:	pop	{pc}		; (ldr pc, [sp], #4)
   13510:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>

00013514 <flatcc_builder_enter_user_frame@@Base>:
   13514:	strd	r4, [sp, #-20]!	; 0xffffffec
   13518:	add	r4, r1, #3
   1351c:	mov	r5, r0
   13520:	ldr	r3, [r0, #112]	; 0x70
   13524:	bic	r4, r4, #3
   13528:	strd	r6, [sp, #8]
   1352c:	add	r4, r4, #4
   13530:	ldr	r6, [r0, #228]	; 0xe4
   13534:	str	lr, [sp, #16]
   13538:	sub	sp, sp, #12
   1353c:	add	r2, r6, r4
   13540:	cmp	r2, r3
   13544:	bls	1356c <flatcc_builder_enter_user_frame@@Base+0x58>
   13548:	mov	ip, #7
   1354c:	add	r1, r0, #108	; 0x6c
   13550:	ldr	r0, [r0, #40]	; 0x28
   13554:	mov	r3, #0
   13558:	str	ip, [sp]
   1355c:	ldr	r7, [r5, #48]	; 0x30
   13560:	blx	r7
   13564:	cmp	r0, #0
   13568:	bne	135b4 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1356c:	ldr	r7, [r5, #108]	; 0x6c
   13570:	adds	r0, r7, r6
   13574:	beq	135a0 <flatcc_builder_enter_user_frame@@Base+0x8c>
   13578:	mov	r2, r4
   1357c:	mov	r1, #0
   13580:	bl	1202c <memset@plt>
   13584:	ldr	r3, [r5, #224]	; 0xe0
   13588:	str	r3, [r7, r6]
   1358c:	ldr	r0, [r5, #228]	; 0xe4
   13590:	add	r4, r0, r4
   13594:	add	r0, r0, #4
   13598:	str	r0, [r5, #224]	; 0xe0
   1359c:	str	r4, [r5, #228]	; 0xe4
   135a0:	add	sp, sp, #12
   135a4:	ldrd	r4, [sp]
   135a8:	ldrd	r6, [sp, #8]
   135ac:	add	sp, sp, #16
   135b0:	pop	{pc}		; (ldr pc, [sp], #4)
   135b4:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>

000135b8 <flatcc_builder_exit_user_frame@@Base>:
   135b8:	ldr	r2, [r0, #224]	; 0xe0
   135bc:	cmp	r2, #0
   135c0:	beq	135e8 <flatcc_builder_exit_user_frame@@Base+0x30>
   135c4:	mov	r3, r0
   135c8:	sub	r0, r2, #4
   135cc:	ldr	r1, [r3, #108]	; 0x6c
   135d0:	str	r0, [r3, #228]	; 0xe4
   135d4:	add	r2, r1, r2
   135d8:	ldr	r2, [r2, #-4]
   135dc:	mov	r0, r2
   135e0:	str	r2, [r3, #224]	; 0xe0
   135e4:	bx	lr
   135e8:	ldr	r3, [pc, #36]	; 13614 <flatcc_builder_exit_user_frame@@Base+0x5c>
   135ec:	movw	r2, #542	; 0x21e
   135f0:	str	r4, [sp, #-8]!
   135f4:	ldr	r1, [pc, #28]	; 13618 <flatcc_builder_exit_user_frame@@Base+0x60>
   135f8:	str	lr, [sp, #4]
   135fc:	ldr	r0, [pc, #24]	; 1361c <flatcc_builder_exit_user_frame@@Base+0x64>
   13600:	add	r3, pc, r3
   13604:	add	r3, r3, #136	; 0x88
   13608:	add	r1, pc, r1
   1360c:	add	r0, pc, r0
   13610:	bl	1205c <__assert_fail@plt>
   13614:	andeq	r4, r0, r8, lsl #10
   13618:	andeq	r4, r0, r0, asr ip
   1361c:	strdeq	r4, [r0], -ip

00013620 <flatcc_builder_exit_user_frame_at@@Base>:
   13620:	ldr	r2, [r0, #224]	; 0xe0
   13624:	cmp	r2, r1
   13628:	bcc	13634 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1362c:	str	r1, [r0, #224]	; 0xe0
   13630:	b	135b8 <flatcc_builder_exit_user_frame@@Base>
   13634:	ldr	r3, [pc, #36]	; 13660 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13638:	movw	r2, #551	; 0x227
   1363c:	str	r4, [sp, #-8]!
   13640:	ldr	r1, [pc, #28]	; 13664 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13644:	str	lr, [sp, #4]
   13648:	ldr	r0, [pc, #24]	; 13668 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   1364c:	add	r3, pc, r3
   13650:	add	r3, r3, #168	; 0xa8
   13654:	add	r1, pc, r1
   13658:	add	r0, pc, r0
   1365c:	bl	1205c <__assert_fail@plt>
   13660:			; <UNDEFINED> instruction: 0x000044bc
   13664:	andeq	r4, r0, r4, lsl #24
   13668:	andeq	r4, r0, ip, asr #25

0001366c <flatcc_builder_get_current_user_frame@@Base>:
   1366c:	ldr	r0, [r0, #224]	; 0xe0
   13670:	bx	lr

00013674 <flatcc_builder_get_user_frame_ptr@@Base>:
   13674:	ldr	r0, [r0, #108]	; 0x6c
   13678:	add	r0, r0, r1
   1367c:	bx	lr

00013680 <flatcc_builder_embed_buffer@@Base>:
   13680:	strd	r4, [sp, #-20]!	; 0xffffffec
   13684:	mov	r5, r3
   13688:	mov	r4, r0
   1368c:	ldr	r3, [r0, #152]	; 0x98
   13690:	strd	r6, [sp, #8]
   13694:	mov	r7, r2
   13698:	mov	r2, r1
   1369c:	ldr	r6, [pc, #356]	; 13808 <flatcc_builder_embed_buffer@@Base+0x188>
   136a0:	str	lr, [sp, #16]
   136a4:	sub	sp, sp, #92	; 0x5c
   136a8:	add	r1, sp, #112	; 0x70
   136ac:	adds	r3, r3, #0
   136b0:	movne	r3, #1
   136b4:	bl	12c54 <flatcc_builder_default_alloc@@Base+0x190>
   136b8:	cmp	r0, #0
   136bc:	add	r6, pc, r6
   136c0:	bne	137d8 <flatcc_builder_embed_buffer@@Base+0x158>
   136c4:	ldr	r3, [sp, #116]	; 0x74
   136c8:	str	r0, [sp, #16]
   136cc:	ldr	r1, [r4, #136]	; 0x88
   136d0:	str	r0, [sp, #20]
   136d4:	ldrh	r2, [sp, #112]	; 0x70
   136d8:	tst	r3, #2
   136dc:	ldr	r0, [r4, #152]	; 0x98
   136e0:	movne	ip, #4
   136e4:	moveq	ip, #0
   136e8:	sub	r3, r1, r5
   136ec:	sub	r3, r3, ip
   136f0:	sub	r2, r2, #1
   136f4:	and	r3, r3, r2
   136f8:	add	r2, r5, r3
   136fc:	cmp	r0, #0
   13700:	str	r2, [sp, #12]
   13704:	beq	13728 <flatcc_builder_embed_buffer@@Base+0xa8>
   13708:	mov	ip, #1
   1370c:	mov	r2, #4
   13710:	mov	r0, r2
   13714:	str	r2, [sp, #16]
   13718:	str	ip, [sp, #20]
   1371c:	add	ip, sp, #12
   13720:	str	ip, [sp, #24]
   13724:	str	r2, [sp, #28]
   13728:	cmp	r5, #0
   1372c:	beq	13754 <flatcc_builder_embed_buffer@@Base+0xd4>
   13730:	ldr	r2, [sp, #20]
   13734:	add	ip, sp, #88	; 0x58
   13738:	add	r0, r0, r5
   1373c:	str	r0, [sp, #16]
   13740:	add	r2, r2, #1
   13744:	add	ip, ip, r2, lsl #3
   13748:	str	r2, [sp, #20]
   1374c:	str	r7, [ip, #-72]	; 0xffffffb8
   13750:	str	r5, [ip, #-68]	; 0xffffffbc
   13754:	cmp	r3, #0
   13758:	bne	137a8 <flatcc_builder_embed_buffer@@Base+0x128>
   1375c:	sub	r5, r1, r0
   13760:	cmp	r1, r5
   13764:	ble	137e4 <flatcc_builder_embed_buffer@@Base+0x164>
   13768:	mov	r3, r5
   1376c:	add	r1, sp, #24
   13770:	str	r0, [sp]
   13774:	ldr	r2, [sp, #20]
   13778:	ldr	r0, [r4, #36]	; 0x24
   1377c:	ldr	r6, [r4, #44]	; 0x2c
   13780:	blx	r6
   13784:	cmp	r0, #0
   13788:	streq	r5, [r4, #136]	; 0x88
   1378c:	bne	137e0 <flatcc_builder_embed_buffer@@Base+0x160>
   13790:	mov	r0, r5
   13794:	add	sp, sp, #92	; 0x5c
   13798:	ldrd	r4, [sp]
   1379c:	ldrd	r6, [sp, #8]
   137a0:	add	sp, sp, #16
   137a4:	pop	{pc}		; (ldr pc, [sp], #4)
   137a8:	ldr	ip, [pc, #92]	; 1380c <flatcc_builder_embed_buffer@@Base+0x18c>
   137ac:	add	r0, r0, r3
   137b0:	ldr	r2, [sp, #20]
   137b4:	str	r0, [sp, #16]
   137b8:	ldr	lr, [r6, ip]
   137bc:	add	ip, sp, #88	; 0x58
   137c0:	add	r2, r2, #1
   137c4:	add	ip, ip, r2, lsl #3
   137c8:	str	r2, [sp, #20]
   137cc:	str	lr, [ip, #-72]	; 0xffffffb8
   137d0:	str	r3, [ip, #-68]	; 0xffffffbc
   137d4:	b	1375c <flatcc_builder_embed_buffer@@Base+0xdc>
   137d8:	mov	r5, #0
   137dc:	b	13790 <flatcc_builder_embed_buffer@@Base+0x110>
   137e0:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   137e4:	ldr	r3, [pc, #36]	; 13810 <flatcc_builder_embed_buffer@@Base+0x190>
   137e8:	movw	r2, #647	; 0x287
   137ec:	ldr	r1, [pc, #32]	; 13814 <flatcc_builder_embed_buffer@@Base+0x194>
   137f0:	ldr	r0, [pc, #32]	; 13818 <flatcc_builder_embed_buffer@@Base+0x198>
   137f4:	add	r3, pc, r3
   137f8:	add	r3, r3, #44	; 0x2c
   137fc:	add	r1, pc, r1
   13800:	add	r0, pc, r0
   13804:	bl	1205c <__assert_fail@plt>
   13808:	andeq	r5, r1, ip, lsr r9
   1380c:	andeq	r0, r0, r4, asr r0
   13810:	andeq	r4, r0, r4, lsl r3
   13814:	andeq	r4, r0, ip, asr sl
   13818:	andeq	r4, r0, r0, ror #21

0001381c <flatcc_builder_create_buffer@@Base>:
   1381c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13820:	mov	r4, r0
   13824:	strd	r6, [sp, #8]
   13828:	mov	r6, r3
   1382c:	strd	r8, [sp, #16]
   13830:	mov	r8, #0
   13834:	strd	sl, [sp, #24]
   13838:	mov	sl, r1
   1383c:	str	lr, [sp, #32]
   13840:	sub	sp, sp, #100	; 0x64
   13844:	ldr	r9, [sp, #140]	; 0x8c
   13848:	add	r1, sp, #136	; 0x88
   1384c:	str	r8, [sp, #20]
   13850:	ldr	r5, [pc, #496]	; 13a48 <flatcc_builder_create_buffer@@Base+0x22c>
   13854:	and	r7, r9, #1
   13858:	mov	r3, r7
   1385c:	bl	12c54 <flatcc_builder_default_alloc@@Base+0x190>
   13860:	cmp	r0, r8
   13864:	add	r5, pc, r5
   13868:	bne	139bc <flatcc_builder_create_buffer@@Base+0x1a0>
   1386c:	ldrh	r2, [r4, #128]	; 0x80
   13870:	ldrh	r3, [sp, #136]	; 0x88
   13874:	ldr	ip, [r4, #136]	; 0x88
   13878:	cmp	r2, r3
   1387c:	strhcc	r3, [r4, #128]	; 0x80
   13880:	cmp	sl, #0
   13884:	ldrne	r2, [sl]
   13888:	ldreq	lr, [sp, #20]
   1388c:	movne	lr, r2
   13890:	strne	r2, [sp, #20]
   13894:	sub	r2, r3, #1
   13898:	sub	r3, ip, #4
   1389c:	cmp	lr, #0
   138a0:	movne	lr, #4
   138a4:	tst	r9, #2
   138a8:	movne	r0, #4
   138ac:	moveq	r0, #0
   138b0:	sub	r3, r3, lr
   138b4:	ands	r1, r9, #3
   138b8:	sub	r3, r3, r0
   138bc:	and	r3, r3, r2
   138c0:	bne	139dc <flatcc_builder_create_buffer@@Base+0x1c0>
   138c4:	mov	r9, r1
   138c8:	mov	r8, #1
   138cc:	mov	r0, #4
   138d0:	add	sl, sp, #96	; 0x60
   138d4:	add	r2, r9, #1
   138d8:	str	r0, [sp, #24]
   138dc:	add	r2, sl, r2, lsl #3
   138e0:	mov	fp, #4
   138e4:	add	sl, sp, #12
   138e8:	cmp	lr, #0
   138ec:	str	r8, [sp, #28]
   138f0:	strd	sl, [r2, #-72]	; 0xffffffb8
   138f4:	beq	13920 <flatcc_builder_create_buffer@@Base+0x104>
   138f8:	add	r2, sp, #96	; 0x60
   138fc:	add	r8, r8, #1
   13900:	add	r8, r2, r8, lsl #3
   13904:	add	r0, r0, lr
   13908:	add	r9, r9, #2
   1390c:	add	r2, sp, #20
   13910:	str	r0, [sp, #24]
   13914:	str	r2, [r8, #-72]	; 0xffffffb8
   13918:	str	lr, [r8, #-68]	; 0xffffffbc
   1391c:	str	r9, [sp, #28]
   13920:	cmp	r3, #0
   13924:	beq	13954 <flatcc_builder_create_buffer@@Base+0x138>
   13928:	ldr	lr, [pc, #284]	; 13a4c <flatcc_builder_create_buffer@@Base+0x230>
   1392c:	add	r0, r0, r3
   13930:	ldr	r2, [sp, #28]
   13934:	str	r0, [sp, #24]
   13938:	ldr	r5, [r5, lr]
   1393c:	add	lr, sp, #96	; 0x60
   13940:	add	r2, r2, #1
   13944:	add	lr, lr, r2, lsl #3
   13948:	str	r2, [sp, #28]
   1394c:	str	r5, [lr, #-72]	; 0xffffffb8
   13950:	str	r3, [lr, #-68]	; 0xffffffbc
   13954:	sub	r5, ip, r0
   13958:	cmp	r1, #0
   1395c:	mov	r2, r5
   13960:	addne	r2, r5, #4
   13964:	cmp	r7, #0
   13968:	sub	r6, r6, r2
   1396c:	ldrne	r3, [r4, #144]	; 0x90
   13970:	mov	r8, r5
   13974:	str	r6, [sp, #12]
   13978:	ldreq	r3, [r4, #140]	; 0x8c
   1397c:	cmp	ip, r5
   13980:	sub	r3, r3, r2
   13984:	str	r3, [sp, #16]
   13988:	ble	13a20 <flatcc_builder_create_buffer@@Base+0x204>
   1398c:	mov	r3, r5
   13990:	add	r1, sp, #32
   13994:	str	r0, [sp]
   13998:	ldr	r2, [sp, #28]
   1399c:	ldr	r0, [r4, #36]	; 0x24
   139a0:	ldr	r6, [r4, #44]	; 0x2c
   139a4:	blx	r6
   139a8:	cmp	r0, #0
   139ac:	bne	13a44 <flatcc_builder_create_buffer@@Base+0x228>
   139b0:	cmp	r5, #0
   139b4:	str	r5, [r4, #136]	; 0x88
   139b8:	beq	139fc <flatcc_builder_create_buffer@@Base+0x1e0>
   139bc:	mov	r0, r8
   139c0:	add	sp, sp, #100	; 0x64
   139c4:	ldrd	r4, [sp]
   139c8:	ldrd	r6, [sp, #8]
   139cc:	ldrd	r8, [sp, #16]
   139d0:	ldrd	sl, [sp, #24]
   139d4:	add	sp, sp, #32
   139d8:	pop	{pc}		; (ldr pc, [sp], #4)
   139dc:	mov	sl, #4
   139e0:	add	r2, sp, #16
   139e4:	mov	r8, #2
   139e8:	mov	r9, #1
   139ec:	mov	r0, #8
   139f0:	str	r2, [sp, #32]
   139f4:	str	sl, [sp, #36]	; 0x24
   139f8:	b	138d0 <flatcc_builder_create_buffer@@Base+0xb4>
   139fc:	ldr	r3, [pc, #76]	; 13a50 <flatcc_builder_create_buffer@@Base+0x234>
   13a00:	mov	r2, #772	; 0x304
   13a04:	ldr	r1, [pc, #72]	; 13a54 <flatcc_builder_create_buffer@@Base+0x238>
   13a08:	ldr	r0, [pc, #72]	; 13a58 <flatcc_builder_create_buffer@@Base+0x23c>
   13a0c:	add	r3, pc, r3
   13a10:	add	r3, r3, #204	; 0xcc
   13a14:	add	r1, pc, r1
   13a18:	add	r0, pc, r0
   13a1c:	bl	1205c <__assert_fail@plt>
   13a20:	ldr	r3, [pc, #52]	; 13a5c <flatcc_builder_create_buffer@@Base+0x240>
   13a24:	movw	r2, #647	; 0x287
   13a28:	ldr	r1, [pc, #48]	; 13a60 <flatcc_builder_create_buffer@@Base+0x244>
   13a2c:	ldr	r0, [pc, #48]	; 13a64 <flatcc_builder_create_buffer@@Base+0x248>
   13a30:	add	r3, pc, r3
   13a34:	add	r3, r3, #44	; 0x2c
   13a38:	add	r1, pc, r1
   13a3c:	add	r0, pc, r0
   13a40:	bl	1205c <__assert_fail@plt>
   13a44:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   13a48:	muleq	r1, r4, r7
   13a4c:	andeq	r0, r0, r4, asr r0
   13a50:	strdeq	r4, [r0], -ip
   13a54:	andeq	r4, r0, r4, asr #16
   13a58:	andeq	r4, r0, r8, asr #17
   13a5c:	ldrdeq	r4, [r0], -r8
   13a60:	andeq	r4, r0, r0, lsr #16
   13a64:	andeq	r4, r0, r4, lsr #17

00013a68 <flatcc_builder_create_struct@@Base>:
   13a68:	ldr	ip, [pc, #316]	; 13bac <flatcc_builder_create_struct@@Base+0x144>
   13a6c:	cmp	r3, #0
   13a70:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a74:	strd	r6, [sp, #8]
   13a78:	str	lr, [sp, #16]
   13a7c:	sub	sp, sp, #84	; 0x54
   13a80:	add	ip, pc, ip
   13a84:	beq	13b88 <flatcc_builder_create_struct@@Base+0x120>
   13a88:	mov	r4, r0
   13a8c:	ldrh	r0, [r0, #128]	; 0x80
   13a90:	ldr	lr, [r4, #136]	; 0x88
   13a94:	cmp	r0, r3
   13a98:	mov	r0, #0
   13a9c:	strhcc	r3, [r4, #128]	; 0x80
   13aa0:	sub	r5, lr, r2
   13aa4:	sub	r3, r3, #1
   13aa8:	cmp	r2, r0
   13aac:	and	r3, r3, r5
   13ab0:	str	r0, [sp, #8]
   13ab4:	str	r0, [sp, #12]
   13ab8:	bne	13b3c <flatcc_builder_create_struct@@Base+0xd4>
   13abc:	cmp	r3, #0
   13ac0:	movne	r2, r3
   13ac4:	movne	r6, #1
   13ac8:	beq	13b60 <flatcc_builder_create_struct@@Base+0xf8>
   13acc:	ldr	r1, [pc, #220]	; 13bb0 <flatcc_builder_create_struct@@Base+0x148>
   13ad0:	add	r0, r0, #1
   13ad4:	add	r7, sp, #80	; 0x50
   13ad8:	str	r2, [sp, #8]
   13adc:	add	r0, r7, r0, lsl #3
   13ae0:	sub	r5, lr, r2
   13ae4:	ldr	r1, [ip, r1]
   13ae8:	str	r6, [sp, #12]
   13aec:	str	r1, [r0, #-72]	; 0xffffffb8
   13af0:	str	r3, [r0, #-68]	; 0xffffffbc
   13af4:	cmp	lr, r5
   13af8:	ble	13b60 <flatcc_builder_create_struct@@Base+0xf8>
   13afc:	mov	r3, r5
   13b00:	add	r1, sp, #16
   13b04:	str	r2, [sp]
   13b08:	ldr	r2, [sp, #12]
   13b0c:	ldr	r0, [r4, #36]	; 0x24
   13b10:	ldr	r6, [r4, #44]	; 0x2c
   13b14:	blx	r6
   13b18:	cmp	r0, #0
   13b1c:	bne	13b84 <flatcc_builder_create_struct@@Base+0x11c>
   13b20:	mov	r0, r5
   13b24:	str	r5, [r4, #136]	; 0x88
   13b28:	add	sp, sp, #84	; 0x54
   13b2c:	ldrd	r4, [sp]
   13b30:	ldrd	r6, [sp, #8]
   13b34:	add	sp, sp, #16
   13b38:	pop	{pc}		; (ldr pc, [sp], #4)
   13b3c:	mov	r0, #1
   13b40:	cmp	r3, #0
   13b44:	str	r2, [sp, #8]
   13b48:	movne	r6, #2
   13b4c:	strd	r0, [sp, #12]
   13b50:	str	r2, [sp, #20]
   13b54:	addne	r2, r2, r3
   13b58:	beq	13af4 <flatcc_builder_create_struct@@Base+0x8c>
   13b5c:	b	13acc <flatcc_builder_create_struct@@Base+0x64>
   13b60:	ldr	r3, [pc, #76]	; 13bb4 <flatcc_builder_create_struct@@Base+0x14c>
   13b64:	movw	r2, #647	; 0x287
   13b68:	ldr	r1, [pc, #72]	; 13bb8 <flatcc_builder_create_struct@@Base+0x150>
   13b6c:	ldr	r0, [pc, #72]	; 13bbc <flatcc_builder_create_struct@@Base+0x154>
   13b70:	add	r3, pc, r3
   13b74:	add	r3, r3, #44	; 0x2c
   13b78:	add	r1, pc, r1
   13b7c:	add	r0, pc, r0
   13b80:	bl	1205c <__assert_fail@plt>
   13b84:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   13b88:	ldr	r3, [pc, #48]	; 13bc0 <flatcc_builder_create_struct@@Base+0x158>
   13b8c:	movw	r2, #783	; 0x30f
   13b90:	ldr	r1, [pc, #44]	; 13bc4 <flatcc_builder_create_struct@@Base+0x15c>
   13b94:	ldr	r0, [pc, #44]	; 13bc8 <flatcc_builder_create_struct@@Base+0x160>
   13b98:	add	r3, pc, r3
   13b9c:	add	r3, r3, #236	; 0xec
   13ba0:	add	r1, pc, r1
   13ba4:	add	r0, pc, r0
   13ba8:	bl	1205c <__assert_fail@plt>
   13bac:	andeq	r5, r1, r8, ror r5
   13bb0:	andeq	r0, r0, r4, asr r0
   13bb4:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   13bb8:	andeq	r4, r0, r0, ror #13
   13bbc:	andeq	r4, r0, r4, ror #14
   13bc0:	andeq	r3, r0, r0, ror pc
   13bc4:			; <UNDEFINED> instruction: 0x000046b8
   13bc8:	andeq	r4, r0, r0, lsr #15

00013bcc <flatcc_builder_start_buffer@@Base>:
   13bcc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13bd0:	mov	r5, r1
   13bd4:	mov	r4, r0
   13bd8:	ldrh	r1, [r0, #128]	; 0x80
   13bdc:	strd	r6, [sp, #8]
   13be0:	mov	r7, r3
   13be4:	ldr	r6, [pc, #180]	; 13ca0 <flatcc_builder_start_buffer@@Base+0xd4>
   13be8:	strd	r8, [sp, #16]
   13bec:	mov	r8, r2
   13bf0:	str	sl, [sp, #24]
   13bf4:	str	lr, [sp, #28]
   13bf8:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   13bfc:	cmp	r0, #0
   13c00:	add	r6, pc, r6
   13c04:	bne	13c98 <flatcc_builder_start_buffer@@Base+0xcc>
   13c08:	mov	r3, #1
   13c0c:	ldrh	r9, [r4, #132]	; 0x84
   13c10:	cmp	r5, #0
   13c14:	ldr	ip, [r4, #148]	; 0x94
   13c18:	strh	r3, [r4, #128]	; 0x80
   13c1c:	ldr	r1, [r4, #32]
   13c20:	ldr	lr, [r4, #136]	; 0x88
   13c24:	add	r2, ip, r3
   13c28:	ldrh	r3, [r4, #164]	; 0xa4
   13c2c:	strh	r9, [r1, #34]	; 0x22
   13c30:	strh	r8, [r4, #132]	; 0x84
   13c34:	ldr	r9, [r4, #144]	; 0x90
   13c38:	ldr	r8, [r4, #152]	; 0x98
   13c3c:	strh	r3, [r1, #32]
   13c40:	ldr	r3, [r4, #168]	; 0xa8
   13c44:	strh	r7, [r4, #164]	; 0xa4
   13c48:	str	r9, [r1, #20]
   13c4c:	str	r8, [r1, #28]
   13c50:	str	lr, [r4, #144]	; 0x90
   13c54:	str	r2, [r4, #148]	; 0x94
   13c58:	str	ip, [r4, #152]	; 0x98
   13c5c:	str	r3, [r1, #16]
   13c60:	beq	13c8c <flatcc_builder_start_buffer@@Base+0xc0>
   13c64:	ldr	r2, [r5]
   13c68:	mov	r3, #1
   13c6c:	str	r2, [r4, #168]	; 0xa8
   13c70:	strh	r3, [r1, #14]
   13c74:	ldrd	r4, [sp]
   13c78:	ldrd	r6, [sp, #8]
   13c7c:	ldrd	r8, [sp, #16]
   13c80:	ldr	sl, [sp, #24]
   13c84:	add	sp, sp, #28
   13c88:	pop	{pc}		; (ldr pc, [sp], #4)
   13c8c:	ldr	r3, [pc, #16]	; 13ca4 <flatcc_builder_start_buffer@@Base+0xd8>
   13c90:	ldr	r5, [r6, r3]
   13c94:	b	13c64 <flatcc_builder_start_buffer@@Base+0x98>
   13c98:	mvn	r0, #0
   13c9c:	b	13c74 <flatcc_builder_start_buffer@@Base+0xa8>
   13ca0:	strdeq	r5, [r1], -r8
   13ca4:	andeq	r0, r0, r4, asr r0

00013ca8 <flatcc_builder_end_buffer@@Base>:
   13ca8:	ldr	ip, [r0, #32]
   13cac:	strd	r4, [sp, #-16]!
   13cb0:	mov	r4, r0
   13cb4:	ldrh	r2, [r0, #164]	; 0xa4
   13cb8:	ldr	r0, [r0, #152]	; 0x98
   13cbc:	ldrh	ip, [ip, #14]
   13cc0:	and	r2, r2, #2
   13cc4:	str	r6, [sp, #8]
   13cc8:	str	lr, [sp, #12]
   13ccc:	sub	sp, sp, #8
   13cd0:	cmp	r0, #0
   13cd4:	moveq	r0, r2
   13cd8:	orrne	r0, r2, #1
   13cdc:	cmp	ip, #1
   13ce0:	bne	13dc8 <flatcc_builder_end_buffer@@Base+0x120>
   13ce4:	ldrh	r2, [r4, #132]	; 0x84
   13ce8:	mov	r3, r1
   13cec:	add	r1, r4, #168	; 0xa8
   13cf0:	ldrh	ip, [r4, #128]	; 0x80
   13cf4:	cmp	r2, ip
   13cf8:	movhi	ip, r2
   13cfc:	strhhi	r2, [r4, #128]	; 0x80
   13d00:	str	ip, [sp]
   13d04:	str	r0, [sp, #4]
   13d08:	mov	r0, r4
   13d0c:	bl	1381c <flatcc_builder_create_buffer@@Base>
   13d10:	subs	r5, r0, #0
   13d14:	beq	13db0 <flatcc_builder_end_buffer@@Base+0x108>
   13d18:	mov	r1, #0
   13d1c:	ldr	r0, [r4, #16]
   13d20:	ldr	r3, [r4, #32]
   13d24:	ldr	r2, [r4, #20]
   13d28:	ldrh	lr, [r3, #32]
   13d2c:	ldr	ip, [r3, #16]
   13d30:	ldr	r6, [r3, #20]
   13d34:	ldr	r3, [r3, #28]
   13d38:	str	r6, [r4, #144]	; 0x90
   13d3c:	strh	lr, [r4, #164]	; 0xa4
   13d40:	str	r3, [r4, #152]	; 0x98
   13d44:	str	ip, [r4, #168]	; 0xa8
   13d48:	bl	1202c <memset@plt>
   13d4c:	ldr	r3, [r4, #32]
   13d50:	ldr	r0, [r4, #60]	; 0x3c
   13d54:	ldr	r2, [r4, #64]	; 0x40
   13d58:	ldr	ip, [r3]
   13d5c:	ldmib	r3, {r1, lr}
   13d60:	add	r0, r0, ip
   13d64:	sub	r2, r2, ip
   13d68:	str	r0, [r4, #16]
   13d6c:	cmp	r2, r1
   13d70:	ldrh	r0, [r4, #128]	; 0x80
   13d74:	movcs	r2, r1
   13d78:	str	lr, [r4, #20]
   13d7c:	str	ip, [r4, #28]
   13d80:	ldrh	ip, [r4, #130]	; 0x82
   13d84:	str	r2, [r4, #24]
   13d88:	ldr	r2, [r4, #156]	; 0x9c
   13d8c:	str	r1, [r3, #4]
   13d90:	cmp	r0, ip
   13d94:	sub	r0, r3, #36	; 0x24
   13d98:	strhcc	ip, [r4, #128]	; 0x80
   13d9c:	ldrh	r1, [r3, #12]
   13da0:	sub	r3, r2, #1
   13da4:	str	r0, [r4, #32]
   13da8:	strh	r1, [r4, #130]	; 0x82
   13dac:	str	r3, [r4, #156]	; 0x9c
   13db0:	mov	r0, r5
   13db4:	add	sp, sp, #8
   13db8:	ldrd	r4, [sp]
   13dbc:	ldr	r6, [sp, #8]
   13dc0:	add	sp, sp, #12
   13dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc8:	ldr	r3, [pc, #28]	; 13dec <flatcc_builder_end_buffer@@Base+0x144>
   13dcc:	movw	r2, #838	; 0x346
   13dd0:	ldr	r1, [pc, #24]	; 13df0 <flatcc_builder_end_buffer@@Base+0x148>
   13dd4:	ldr	r0, [pc, #24]	; 13df4 <flatcc_builder_end_buffer@@Base+0x14c>
   13dd8:	add	r3, pc, r3
   13ddc:	add	r3, r3, #268	; 0x10c
   13de0:	add	r1, pc, r1
   13de4:	add	r0, pc, r0
   13de8:	bl	1205c <__assert_fail@plt>
   13dec:	andeq	r3, r0, r0, lsr sp
   13df0:	andeq	r4, r0, r8, ror r4
   13df4:	andeq	r4, r0, ip, ror #10

00013df8 <flatcc_builder_start_struct@@Base>:
   13df8:	strd	r4, [sp, #-16]!
   13dfc:	mov	r5, r1
   13e00:	mov	r1, r2
   13e04:	mov	r4, r0
   13e08:	str	r6, [sp, #8]
   13e0c:	str	lr, [sp, #12]
   13e10:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   13e14:	cmp	r0, #0
   13e18:	bne	13ea0 <flatcc_builder_start_struct@@Base+0xa8>
   13e1c:	ldr	r6, [r4, #20]
   13e20:	mov	ip, #2
   13e24:	ldr	r2, [r4, #28]
   13e28:	ldr	r3, [r4, #64]	; 0x40
   13e2c:	add	r5, r5, r6
   13e30:	ldr	r0, [r4, #60]	; 0x3c
   13e34:	ldr	r1, [r4, #32]
   13e38:	sub	r3, r3, r2
   13e3c:	cmn	r3, #4
   13e40:	add	r0, r0, r2
   13e44:	mvnhi	r2, #3
   13e48:	movhi	r3, r2
   13e4c:	strh	ip, [r1, #14]
   13e50:	strhi	r2, [r4, #24]
   13e54:	mvn	r2, #3
   13e58:	strls	r3, [r4, #24]
   13e5c:	cmp	r5, r3
   13e60:	str	r0, [r4, #16]
   13e64:	str	r2, [r1, #4]
   13e68:	str	r5, [r4, #20]
   13e6c:	bcs	13e84 <flatcc_builder_start_struct@@Base+0x8c>
   13e70:	add	r0, r0, r6
   13e74:	ldrd	r4, [sp]
   13e78:	ldr	r6, [sp, #8]
   13e7c:	add	sp, sp, #12
   13e80:	pop	{pc}		; (ldr pc, [sp], #4)
   13e84:	add	r1, r5, #1
   13e88:	mov	r0, r4
   13e8c:	bl	12a3c <emit_test@@Base+0x60c>
   13e90:	cmp	r0, #0
   13e94:	bne	13ea0 <flatcc_builder_start_struct@@Base+0xa8>
   13e98:	ldr	r0, [r4, #16]
   13e9c:	b	13e70 <flatcc_builder_start_struct@@Base+0x78>
   13ea0:	ldrd	r4, [sp]
   13ea4:	mov	r0, #0
   13ea8:	ldr	r6, [sp, #8]
   13eac:	add	sp, sp, #12
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)

00013eb4 <flatcc_builder_struct_edit@@Base>:
   13eb4:	ldr	r0, [r0, #16]
   13eb8:	bx	lr

00013ebc <flatcc_builder_end_struct@@Base>:
   13ebc:	ldr	r3, [r0, #32]
   13ec0:	strd	r4, [sp, #-16]!
   13ec4:	ldrh	r3, [r3, #14]
   13ec8:	str	r6, [sp, #8]
   13ecc:	str	lr, [sp, #12]
   13ed0:	cmp	r3, #2
   13ed4:	bne	13f7c <flatcc_builder_end_struct@@Base+0xc0>
   13ed8:	ldrh	r3, [r0, #130]	; 0x82
   13edc:	mov	r4, r0
   13ee0:	ldr	r1, [r0, #16]
   13ee4:	ldr	r2, [r0, #20]
   13ee8:	bl	13a68 <flatcc_builder_create_struct@@Base>
   13eec:	subs	r5, r0, #0
   13ef0:	beq	13f68 <flatcc_builder_end_struct@@Base+0xac>
   13ef4:	mov	r1, #0
   13ef8:	ldr	r0, [r4, #16]
   13efc:	ldr	r2, [r4, #20]
   13f00:	bl	1202c <memset@plt>
   13f04:	ldr	r3, [r4, #32]
   13f08:	ldr	r0, [r4, #60]	; 0x3c
   13f0c:	ldr	r2, [r4, #64]	; 0x40
   13f10:	ldr	ip, [r3]
   13f14:	ldmib	r3, {r1, lr}
   13f18:	add	r0, r0, ip
   13f1c:	sub	r2, r2, ip
   13f20:	str	r0, [r4, #16]
   13f24:	cmp	r2, r1
   13f28:	ldrh	r0, [r4, #128]	; 0x80
   13f2c:	movcs	r2, r1
   13f30:	str	lr, [r4, #20]
   13f34:	str	ip, [r4, #28]
   13f38:	ldrh	ip, [r4, #130]	; 0x82
   13f3c:	str	r2, [r4, #24]
   13f40:	ldr	r2, [r4, #156]	; 0x9c
   13f44:	str	r1, [r3, #4]
   13f48:	cmp	r0, ip
   13f4c:	sub	r0, r3, #36	; 0x24
   13f50:	strhcc	ip, [r4, #128]	; 0x80
   13f54:	ldrh	r1, [r3, #12]
   13f58:	sub	r3, r2, #1
   13f5c:	str	r0, [r4, #32]
   13f60:	strh	r1, [r4, #130]	; 0x82
   13f64:	str	r3, [r4, #156]	; 0x9c
   13f68:	mov	r0, r5
   13f6c:	ldrd	r4, [sp]
   13f70:	ldr	r6, [sp, #8]
   13f74:	add	sp, sp, #12
   13f78:	pop	{pc}		; (ldr pc, [sp], #4)
   13f7c:	ldr	r3, [pc, #28]	; 13fa0 <flatcc_builder_end_struct@@Base+0xe4>
   13f80:	mov	r2, #872	; 0x368
   13f84:	ldr	r1, [pc, #24]	; 13fa4 <flatcc_builder_end_struct@@Base+0xe8>
   13f88:	ldr	r0, [pc, #24]	; 13fa8 <flatcc_builder_end_struct@@Base+0xec>
   13f8c:	add	r3, pc, r3
   13f90:	add	r3, r3, #296	; 0x128
   13f94:	add	r1, pc, r1
   13f98:	add	r0, pc, r0
   13f9c:	bl	1205c <__assert_fail@plt>
   13fa0:	andeq	r3, r0, ip, ror fp
   13fa4:	andeq	r4, r0, r4, asr #5
   13fa8:	andeq	r4, r0, r4, ror #7

00013fac <flatcc_builder_extend_vector@@Base>:
   13fac:	ldr	r2, [r0, #32]
   13fb0:	strd	r4, [sp, #-16]!
   13fb4:	ldr	r3, [r2, #20]
   13fb8:	ldr	ip, [r2, #24]
   13fbc:	str	r6, [sp, #8]
   13fc0:	str	lr, [sp, #12]
   13fc4:	adds	r3, r1, r3
   13fc8:	movcs	r4, #1
   13fcc:	movcc	r4, #0
   13fd0:	cmp	ip, r3
   13fd4:	orrcc	r4, r4, #1
   13fd8:	cmp	r4, #0
   13fdc:	bne	14038 <flatcc_builder_extend_vector@@Base+0x8c>
   13fe0:	ldr	ip, [r2, #16]
   13fe4:	mov	r5, r0
   13fe8:	ldr	r6, [r0, #20]
   13fec:	str	r3, [r2, #20]
   13ff0:	ldr	r3, [r0, #24]
   13ff4:	mla	r1, ip, r1, r6
   13ff8:	cmp	r1, r3
   13ffc:	str	r1, [r0, #20]
   14000:	bcs	1401c <flatcc_builder_extend_vector@@Base+0x70>
   14004:	ldr	r0, [r5, #16]
   14008:	add	r0, r0, r6
   1400c:	ldrd	r4, [sp]
   14010:	ldr	r6, [sp, #8]
   14014:	add	sp, sp, #12
   14018:	pop	{pc}		; (ldr pc, [sp], #4)
   1401c:	add	r1, r1, #1
   14020:	mvn	r2, #3
   14024:	bl	12a3c <emit_test@@Base+0x60c>
   14028:	cmp	r0, #0
   1402c:	beq	14004 <flatcc_builder_extend_vector@@Base+0x58>
   14030:	mov	r0, r4
   14034:	b	1400c <flatcc_builder_extend_vector@@Base+0x60>
   14038:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>

0001403c <flatcc_builder_vector_push@@Base>:
   1403c:	ldr	r3, [r0, #32]
   14040:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14044:	ldrh	r2, [r3, #14]
   14048:	strd	r6, [sp, #8]
   1404c:	str	r8, [sp, #16]
   14050:	str	lr, [sp, #20]
   14054:	cmp	r2, #4
   14058:	bne	140ec <flatcc_builder_vector_push@@Base+0xb0>
   1405c:	mov	r7, r1
   14060:	ldr	r2, [r3, #20]
   14064:	ldr	r1, [r3, #24]
   14068:	cmp	r2, r1
   1406c:	bhi	14110 <flatcc_builder_vector_push@@Base+0xd4>
   14070:	add	r2, r2, #1
   14074:	ldr	r6, [r3, #16]
   14078:	mov	r4, r0
   1407c:	ldr	r5, [r0, #20]
   14080:	str	r2, [r3, #20]
   14084:	ldr	r3, [r0, #24]
   14088:	add	r1, r6, r5
   1408c:	cmp	r1, r3
   14090:	str	r1, [r0, #20]
   14094:	bcs	140d0 <flatcc_builder_vector_push@@Base+0x94>
   14098:	ldr	r3, [r4, #16]
   1409c:	adds	r3, r3, r5
   140a0:	beq	140b8 <flatcc_builder_vector_push@@Base+0x7c>
   140a4:	mov	r0, r3
   140a8:	mov	r2, r6
   140ac:	mov	r1, r7
   140b0:	bl	11fa8 <memcpy@plt>
   140b4:	mov	r3, r0
   140b8:	ldrd	r4, [sp]
   140bc:	mov	r0, r3
   140c0:	ldrd	r6, [sp, #8]
   140c4:	ldr	r8, [sp, #16]
   140c8:	add	sp, sp, #20
   140cc:	pop	{pc}		; (ldr pc, [sp], #4)
   140d0:	add	r1, r1, #1
   140d4:	mvn	r2, #3
   140d8:	bl	12a3c <emit_test@@Base+0x60c>
   140dc:	cmp	r0, #0
   140e0:	beq	14098 <flatcc_builder_vector_push@@Base+0x5c>
   140e4:	mov	r3, #0
   140e8:	b	140b8 <flatcc_builder_vector_push@@Base+0x7c>
   140ec:	ldr	r3, [pc, #64]	; 14134 <flatcc_builder_vector_push@@Base+0xf8>
   140f0:	movw	r2, #907	; 0x38b
   140f4:	ldr	r1, [pc, #60]	; 14138 <flatcc_builder_vector_push@@Base+0xfc>
   140f8:	ldr	r0, [pc, #60]	; 1413c <flatcc_builder_vector_push@@Base+0x100>
   140fc:	add	r3, pc, r3
   14100:	add	r3, r3, #324	; 0x144
   14104:	add	r1, pc, r1
   14108:	add	r0, pc, r0
   1410c:	bl	1205c <__assert_fail@plt>
   14110:	ldr	r3, [pc, #40]	; 14140 <flatcc_builder_vector_push@@Base+0x104>
   14114:	mov	r2, #908	; 0x38c
   14118:	ldr	r1, [pc, #36]	; 14144 <flatcc_builder_vector_push@@Base+0x108>
   1411c:	ldr	r0, [pc, #36]	; 14148 <flatcc_builder_vector_push@@Base+0x10c>
   14120:	add	r3, pc, r3
   14124:	add	r3, r3, #324	; 0x144
   14128:	add	r1, pc, r1
   1412c:	add	r0, pc, r0
   14130:	bl	1205c <__assert_fail@plt>
   14134:	andeq	r3, r0, ip, lsl #20
   14138:	andeq	r4, r0, r4, asr r1
   1413c:	andeq	r4, r0, r0, lsr #5
   14140:	andeq	r3, r0, r8, ror #19
   14144:	andeq	r4, r0, r0, lsr r1
   14148:	andeq	r4, r0, r8, lsr #5

0001414c <flatcc_builder_append_vector@@Base>:
   1414c:	ldr	ip, [r0, #32]
   14150:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14154:	ldrh	r3, [ip, #14]
   14158:	strd	r6, [sp, #8]
   1415c:	str	r8, [sp, #16]
   14160:	str	lr, [sp, #20]
   14164:	cmp	r3, #4
   14168:	bne	14214 <flatcc_builder_append_vector@@Base+0xc8>
   1416c:	mov	r6, r1
   14170:	ldr	r1, [ip, #20]
   14174:	ldr	r4, [ip, #24]
   14178:	adds	r1, r2, r1
   1417c:	movcs	r3, #1
   14180:	movcc	r3, #0
   14184:	cmp	r4, r1
   14188:	movcs	r4, r3
   1418c:	orrcc	r4, r3, #1
   14190:	cmp	r4, #0
   14194:	bne	14238 <flatcc_builder_append_vector@@Base+0xec>
   14198:	ldr	r7, [ip, #16]
   1419c:	mov	r5, r0
   141a0:	ldr	r8, [r0, #20]
   141a4:	ldr	r3, [r0, #24]
   141a8:	mul	r7, r7, r2
   141ac:	str	r1, [ip, #20]
   141b0:	add	r1, r7, r8
   141b4:	cmp	r1, r3
   141b8:	str	r1, [r0, #20]
   141bc:	bcs	141f8 <flatcc_builder_append_vector@@Base+0xac>
   141c0:	ldr	r3, [r5, #16]
   141c4:	adds	r3, r3, r8
   141c8:	beq	141e0 <flatcc_builder_append_vector@@Base+0x94>
   141cc:	mov	r0, r3
   141d0:	mov	r2, r7
   141d4:	mov	r1, r6
   141d8:	bl	11fa8 <memcpy@plt>
   141dc:	mov	r3, r0
   141e0:	ldrd	r4, [sp]
   141e4:	mov	r0, r3
   141e8:	ldrd	r6, [sp, #8]
   141ec:	ldr	r8, [sp, #16]
   141f0:	add	sp, sp, #20
   141f4:	pop	{pc}		; (ldr pc, [sp], #4)
   141f8:	add	r1, r1, #1
   141fc:	mvn	r2, #3
   14200:	bl	12a3c <emit_test@@Base+0x60c>
   14204:	cmp	r0, #0
   14208:	beq	141c0 <flatcc_builder_append_vector@@Base+0x74>
   1420c:	mov	r3, r4
   14210:	b	141e0 <flatcc_builder_append_vector@@Base+0x94>
   14214:	ldr	r3, [pc, #32]	; 1423c <flatcc_builder_append_vector@@Base+0xf0>
   14218:	movw	r2, #915	; 0x393
   1421c:	ldr	r1, [pc, #28]	; 14240 <flatcc_builder_append_vector@@Base+0xf4>
   14220:	ldr	r0, [pc, #28]	; 14244 <flatcc_builder_append_vector@@Base+0xf8>
   14224:	add	r3, pc, r3
   14228:	add	r3, r3, #352	; 0x160
   1422c:	add	r1, pc, r1
   14230:	add	r0, pc, r0
   14234:	bl	1205c <__assert_fail@plt>
   14238:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>
   1423c:	andeq	r3, r0, r4, ror #17
   14240:	andeq	r4, r0, ip, lsr #32
   14244:	andeq	r4, r0, r8, ror r1

00014248 <flatcc_builder_extend_offset_vector@@Base>:
   14248:	ldr	ip, [r0, #32]
   1424c:	strd	r4, [sp, #-16]!
   14250:	ldr	r3, [ip, #20]
   14254:	str	r6, [sp, #8]
   14258:	str	lr, [sp, #12]
   1425c:	adds	r2, r1, r3
   14260:	movcs	r3, #1
   14264:	movcc	r3, #0
   14268:	cmn	r2, #-1073741823	; 0xc0000001
   1426c:	movls	r4, #0
   14270:	movhi	r4, #1
   14274:	orrs	r4, r3, r4
   14278:	bne	142d0 <flatcc_builder_extend_offset_vector@@Base+0x88>
   1427c:	ldr	r6, [r0, #20]
   14280:	mov	r5, r0
   14284:	ldr	r3, [r0, #24]
   14288:	str	r2, [ip, #20]
   1428c:	add	r1, r6, r1, lsl #2
   14290:	cmp	r1, r3
   14294:	str	r1, [r0, #20]
   14298:	bcs	142b4 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   1429c:	ldr	r0, [r5, #16]
   142a0:	add	r0, r0, r6
   142a4:	ldrd	r4, [sp]
   142a8:	ldr	r6, [sp, #8]
   142ac:	add	sp, sp, #12
   142b0:	pop	{pc}		; (ldr pc, [sp], #4)
   142b4:	add	r1, r1, #1
   142b8:	mvn	r2, #3
   142bc:	bl	12a3c <emit_test@@Base+0x60c>
   142c0:	cmp	r0, #0
   142c4:	beq	1429c <flatcc_builder_extend_offset_vector@@Base+0x54>
   142c8:	mov	r0, r4
   142cc:	b	142a4 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   142d0:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>

000142d4 <flatcc_builder_offset_vector_push@@Base>:
   142d4:	ldr	r2, [r0, #32]
   142d8:	strd	r4, [sp, #-16]!
   142dc:	ldrh	r3, [r2, #14]
   142e0:	str	r6, [sp, #8]
   142e4:	str	lr, [sp, #12]
   142e8:	cmp	r3, #5
   142ec:	bne	14368 <flatcc_builder_offset_vector_push@@Base+0x94>
   142f0:	ldr	r3, [r2, #20]
   142f4:	cmn	r3, #-1073741823	; 0xc0000001
   142f8:	beq	14354 <flatcc_builder_offset_vector_push@@Base+0x80>
   142fc:	ldr	r5, [r0, #20]
   14300:	mov	r6, r1
   14304:	add	r3, r3, #1
   14308:	mov	r4, r0
   1430c:	ldr	r1, [r0, #24]
   14310:	str	r3, [r2, #20]
   14314:	add	r3, r5, #4
   14318:	cmp	r3, r1
   1431c:	str	r3, [r0, #20]
   14320:	bcs	14340 <flatcc_builder_offset_vector_push@@Base+0x6c>
   14324:	ldr	r3, [r4, #16]
   14328:	adds	r0, r3, r5
   1432c:	strne	r6, [r3, r5]
   14330:	ldrd	r4, [sp]
   14334:	ldr	r6, [sp, #8]
   14338:	add	sp, sp, #12
   1433c:	pop	{pc}		; (ldr pc, [sp], #4)
   14340:	mvn	r2, #3
   14344:	add	r1, r5, #5
   14348:	bl	12a3c <emit_test@@Base+0x60c>
   1434c:	cmp	r0, #0
   14350:	beq	14324 <flatcc_builder_offset_vector_push@@Base+0x50>
   14354:	ldrd	r4, [sp]
   14358:	mov	r0, #0
   1435c:	ldr	r6, [sp, #8]
   14360:	add	sp, sp, #12
   14364:	pop	{pc}		; (ldr pc, [sp], #4)
   14368:	ldr	r3, [pc, #28]	; 1438c <flatcc_builder_offset_vector_push@@Base+0xb8>
   1436c:	movw	r2, #934	; 0x3a6
   14370:	ldr	r1, [pc, #24]	; 14390 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14374:	ldr	r0, [pc, #24]	; 14394 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14378:	add	r3, pc, r3
   1437c:	add	r3, r3, #384	; 0x180
   14380:	add	r1, pc, r1
   14384:	add	r0, pc, r0
   14388:	bl	1205c <__assert_fail@plt>
   1438c:	muleq	r0, r0, r7
   14390:	ldrdeq	r3, [r0], -r8
   14394:	muleq	r0, r0, r0

00014398 <flatcc_builder_append_offset_vector@@Base>:
   14398:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1439c:	mov	r4, r1
   143a0:	ldr	r1, [r0, #32]
   143a4:	ldrh	r3, [r1, #14]
   143a8:	strd	r6, [sp, #8]
   143ac:	str	r8, [sp, #16]
   143b0:	str	lr, [sp, #20]
   143b4:	cmp	r3, #5
   143b8:	bne	14458 <flatcc_builder_append_offset_vector@@Base+0xc0>
   143bc:	ldr	r3, [r1, #20]
   143c0:	adds	r3, r2, r3
   143c4:	movcs	lr, #1
   143c8:	movcc	lr, #0
   143cc:	cmn	r3, #-1073741823	; 0xc0000001
   143d0:	movls	ip, #0
   143d4:	movhi	ip, #1
   143d8:	orrs	r8, lr, ip
   143dc:	bne	1447c <flatcc_builder_append_offset_vector@@Base+0xe4>
   143e0:	ldr	r7, [r0, #20]
   143e4:	lsl	r6, r2, #2
   143e8:	mov	r5, r0
   143ec:	str	r3, [r1, #20]
   143f0:	ldr	r3, [r0, #24]
   143f4:	add	r1, r6, r7
   143f8:	cmp	r1, r3
   143fc:	str	r1, [r0, #20]
   14400:	bcs	1443c <flatcc_builder_append_offset_vector@@Base+0xa4>
   14404:	ldr	r3, [r5, #16]
   14408:	adds	r3, r3, r7
   1440c:	beq	14424 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14410:	mov	r0, r3
   14414:	mov	r2, r6
   14418:	mov	r1, r4
   1441c:	bl	11fa8 <memcpy@plt>
   14420:	mov	r3, r0
   14424:	ldrd	r4, [sp]
   14428:	mov	r0, r3
   1442c:	ldrd	r6, [sp, #8]
   14430:	ldr	r8, [sp, #16]
   14434:	add	sp, sp, #20
   14438:	pop	{pc}		; (ldr pc, [sp], #4)
   1443c:	add	r1, r1, #1
   14440:	mvn	r2, #3
   14444:	bl	12a3c <emit_test@@Base+0x60c>
   14448:	cmp	r0, #0
   1444c:	beq	14404 <flatcc_builder_append_offset_vector@@Base+0x6c>
   14450:	mov	r3, r8
   14454:	b	14424 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14458:	ldr	r3, [pc, #32]	; 14480 <flatcc_builder_append_offset_vector@@Base+0xe8>
   1445c:	mov	r2, #948	; 0x3b4
   14460:	ldr	r1, [pc, #28]	; 14484 <flatcc_builder_append_offset_vector@@Base+0xec>
   14464:	ldr	r0, [pc, #28]	; 14488 <flatcc_builder_append_offset_vector@@Base+0xf0>
   14468:	add	r3, pc, r3
   1446c:	add	r3, r3, #420	; 0x1a4
   14470:	add	r1, pc, r1
   14474:	add	r0, pc, r0
   14478:	bl	1205c <__assert_fail@plt>
   1447c:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>
   14480:	andeq	r3, r0, r0, lsr #13
   14484:	andeq	r3, r0, r8, ror #27
   14488:	andeq	r3, r0, r0, lsr #31

0001448c <flatcc_builder_extend_string@@Base>:
   1448c:	ldr	r2, [r0, #32]
   14490:	strd	r4, [sp, #-16]!
   14494:	ldrh	r3, [r2, #14]
   14498:	str	r6, [sp, #8]
   1449c:	str	lr, [sp, #12]
   144a0:	cmp	r3, #6
   144a4:	bne	1450c <flatcc_builder_extend_string@@Base+0x80>
   144a8:	ldr	r3, [r2, #20]
   144ac:	adds	r3, r1, r3
   144b0:	bcs	14508 <flatcc_builder_extend_string@@Base+0x7c>
   144b4:	ldr	r5, [r0, #20]
   144b8:	mov	r4, r0
   144bc:	str	r3, [r2, #20]
   144c0:	ldr	r3, [r0, #24]
   144c4:	add	r1, r1, r5
   144c8:	cmp	r1, r3
   144cc:	str	r1, [r0, #20]
   144d0:	bcs	144ec <flatcc_builder_extend_string@@Base+0x60>
   144d4:	ldr	r0, [r4, #16]
   144d8:	add	r0, r0, r5
   144dc:	ldrd	r4, [sp]
   144e0:	ldr	r6, [sp, #8]
   144e4:	add	sp, sp, #12
   144e8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ec:	add	r1, r1, #1
   144f0:	mvn	r2, #3
   144f4:	bl	12a3c <emit_test@@Base+0x60c>
   144f8:	cmp	r0, #0
   144fc:	beq	144d4 <flatcc_builder_extend_string@@Base+0x48>
   14500:	mov	r0, #0
   14504:	b	144dc <flatcc_builder_extend_string@@Base+0x50>
   14508:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>
   1450c:	ldr	r3, [pc, #28]	; 14530 <flatcc_builder_extend_string@@Base+0xa4>
   14510:	movw	r2, #957	; 0x3bd
   14514:	ldr	r1, [pc, #24]	; 14534 <flatcc_builder_extend_string@@Base+0xa8>
   14518:	ldr	r0, [pc, #24]	; 14538 <flatcc_builder_extend_string@@Base+0xac>
   1451c:	add	r3, pc, r3
   14520:	add	r3, r3, #456	; 0x1c8
   14524:	add	r1, pc, r1
   14528:	add	r0, pc, r0
   1452c:	bl	1205c <__assert_fail@plt>
   14530:	andeq	r3, r0, ip, ror #11
   14534:	andeq	r3, r0, r4, lsr sp
   14538:	andeq	r3, r0, r0, lsr #30

0001453c <flatcc_builder_append_string@@Base>:
   1453c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14540:	strd	r6, [sp, #8]
   14544:	mov	r7, r1
   14548:	ldr	r1, [r0, #32]
   1454c:	str	r8, [sp, #16]
   14550:	str	lr, [sp, #20]
   14554:	ldrh	r3, [r1, #14]
   14558:	cmp	r3, #6
   1455c:	bne	145e8 <flatcc_builder_append_string@@Base+0xac>
   14560:	ldr	r3, [r1, #20]
   14564:	mov	r5, r2
   14568:	adds	r3, r2, r3
   1456c:	bcs	145e4 <flatcc_builder_append_string@@Base+0xa8>
   14570:	ldr	r6, [r0, #20]
   14574:	mov	r4, r0
   14578:	str	r3, [r1, #20]
   1457c:	ldr	r3, [r0, #24]
   14580:	add	r1, r2, r6
   14584:	cmp	r1, r3
   14588:	str	r1, [r0, #20]
   1458c:	bcs	145c8 <flatcc_builder_append_string@@Base+0x8c>
   14590:	ldr	r3, [r4, #16]
   14594:	adds	r3, r3, r6
   14598:	beq	145b0 <flatcc_builder_append_string@@Base+0x74>
   1459c:	mov	r0, r3
   145a0:	mov	r2, r5
   145a4:	mov	r1, r7
   145a8:	bl	11fa8 <memcpy@plt>
   145ac:	mov	r3, r0
   145b0:	ldrd	r4, [sp]
   145b4:	mov	r0, r3
   145b8:	ldrd	r6, [sp, #8]
   145bc:	ldr	r8, [sp, #16]
   145c0:	add	sp, sp, #20
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	add	r1, r1, #1
   145cc:	mvn	r2, #3
   145d0:	bl	12a3c <emit_test@@Base+0x60c>
   145d4:	cmp	r0, #0
   145d8:	beq	14590 <flatcc_builder_append_string@@Base+0x54>
   145dc:	mov	r3, #0
   145e0:	b	145b0 <flatcc_builder_append_string@@Base+0x74>
   145e4:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>
   145e8:	ldr	r3, [pc, #28]	; 1460c <flatcc_builder_append_string@@Base+0xd0>
   145ec:	movw	r2, #966	; 0x3c6
   145f0:	ldr	r1, [pc, #24]	; 14610 <flatcc_builder_append_string@@Base+0xd4>
   145f4:	ldr	r0, [pc, #24]	; 14614 <flatcc_builder_append_string@@Base+0xd8>
   145f8:	add	r3, pc, r3
   145fc:	add	r3, r3, #488	; 0x1e8
   14600:	add	r1, pc, r1
   14604:	add	r0, pc, r0
   14608:	bl	1205c <__assert_fail@plt>
   1460c:	andeq	r3, r0, r0, lsl r5
   14610:	andeq	r3, r0, r8, asr ip
   14614:	andeq	r3, r0, r4, asr #28

00014618 <flatcc_builder_append_string_str@@Base>:
   14618:	strd	r4, [sp, #-16]!
   1461c:	mov	r5, r0
   14620:	mov	r0, r1
   14624:	mov	r4, r1
   14628:	str	r6, [sp, #8]
   1462c:	str	lr, [sp, #12]
   14630:	bl	12008 <strlen@plt>
   14634:	mov	r2, r0
   14638:	mov	r1, r4
   1463c:	ldr	r6, [sp, #8]
   14640:	mov	r0, r5
   14644:	ldrd	r4, [sp]
   14648:	ldr	lr, [sp, #12]
   1464c:	add	sp, sp, #16
   14650:	b	1453c <flatcc_builder_append_string@@Base>

00014654 <flatcc_builder_append_string_strn@@Base>:
   14654:	strd	r4, [sp, #-16]!
   14658:	mov	r4, r1
   1465c:	mov	r1, #0
   14660:	str	r6, [sp, #8]
   14664:	mov	r6, r0
   14668:	mov	r0, r4
   1466c:	mov	r5, r2
   14670:	str	lr, [sp, #12]
   14674:	bl	12038 <memchr@plt>
   14678:	cmp	r0, #0
   1467c:	mov	r1, r4
   14680:	ldr	lr, [sp, #12]
   14684:	subne	r5, r0, r4
   14688:	mov	r0, r6
   1468c:	mov	r2, r5
   14690:	ldrd	r4, [sp]
   14694:	ldr	r6, [sp, #8]
   14698:	add	sp, sp, #16
   1469c:	b	1453c <flatcc_builder_append_string@@Base>

000146a0 <flatcc_builder_truncate_vector@@Base>:
   146a0:	mov	r3, r0
   146a4:	ldr	r0, [r0, #32]
   146a8:	str	r4, [sp, #-8]!
   146ac:	ldrh	r2, [r0, #14]
   146b0:	str	lr, [sp, #4]
   146b4:	cmp	r2, #4
   146b8:	bne	14708 <flatcc_builder_truncate_vector@@Base+0x68>
   146bc:	mov	lr, r1
   146c0:	ldr	r1, [r0, #20]
   146c4:	cmp	r1, lr
   146c8:	bcc	1472c <flatcc_builder_truncate_vector@@Base+0x8c>
   146cc:	ldr	r2, [r0, #16]
   146d0:	sub	ip, r1, lr
   146d4:	mov	r1, #0
   146d8:	str	ip, [r0, #20]
   146dc:	ldr	r0, [r3, #16]
   146e0:	ldr	ip, [r3, #20]
   146e4:	mul	r2, r2, lr
   146e8:	sub	ip, ip, r2
   146ec:	add	r0, r0, ip
   146f0:	str	ip, [r3, #20]
   146f4:	bl	1202c <memset@plt>
   146f8:	ldr	r4, [sp]
   146fc:	add	sp, sp, #4
   14700:	mov	r0, #0
   14704:	pop	{pc}		; (ldr pc, [sp], #4)
   14708:	ldr	r3, [pc, #64]	; 14750 <flatcc_builder_truncate_vector@@Base+0xb0>
   1470c:	movw	r2, #985	; 0x3d9
   14710:	ldr	r1, [pc, #60]	; 14754 <flatcc_builder_truncate_vector@@Base+0xb4>
   14714:	ldr	r0, [pc, #60]	; 14758 <flatcc_builder_truncate_vector@@Base+0xb8>
   14718:	add	r3, pc, r3
   1471c:	add	r3, r3, #520	; 0x208
   14720:	add	r1, pc, r1
   14724:	add	r0, pc, r0
   14728:	bl	1205c <__assert_fail@plt>
   1472c:	ldr	r3, [pc, #40]	; 1475c <flatcc_builder_truncate_vector@@Base+0xbc>
   14730:	movw	r2, #986	; 0x3da
   14734:	ldr	r1, [pc, #36]	; 14760 <flatcc_builder_truncate_vector@@Base+0xc0>
   14738:	ldr	r0, [pc, #36]	; 14764 <flatcc_builder_truncate_vector@@Base+0xc4>
   1473c:	add	r3, pc, r3
   14740:	add	r3, r3, #520	; 0x208
   14744:	add	r1, pc, r1
   14748:	add	r0, pc, r0
   1474c:	bl	1205c <__assert_fail@plt>
   14750:	strdeq	r3, [r0], -r0
   14754:	andeq	r3, r0, r8, lsr fp
   14758:	andeq	r3, r0, r4, lsl #25
   1475c:	andeq	r3, r0, ip, asr #7
   14760:	andeq	r3, r0, r4, lsl fp
   14764:	andeq	r3, r0, ip, lsr #26

00014768 <flatcc_builder_truncate_offset_vector@@Base>:
   14768:	mov	r3, r0
   1476c:	ldr	r0, [r0, #32]
   14770:	str	r4, [sp, #-8]!
   14774:	ldrh	r2, [r0, #14]
   14778:	str	lr, [sp, #4]
   1477c:	cmp	r2, #5
   14780:	bne	147d0 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14784:	mov	lr, r1
   14788:	ldr	r1, [r0, #20]
   1478c:	cmp	r1, lr
   14790:	bcc	147f4 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14794:	ldr	r2, [r0, #16]
   14798:	sub	ip, r1, lr
   1479c:	mov	r1, #0
   147a0:	str	ip, [r0, #20]
   147a4:	ldr	r0, [r3, #16]
   147a8:	ldr	ip, [r3, #20]
   147ac:	mul	r2, r2, lr
   147b0:	sub	ip, ip, r2
   147b4:	add	r0, r0, ip
   147b8:	str	ip, [r3, #20]
   147bc:	bl	1202c <memset@plt>
   147c0:	ldr	r4, [sp]
   147c4:	add	sp, sp, #4
   147c8:	mov	r0, #0
   147cc:	pop	{pc}		; (ldr pc, [sp], #4)
   147d0:	ldr	r3, [pc, #64]	; 14818 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   147d4:	movw	r2, #994	; 0x3e2
   147d8:	ldr	r1, [pc, #60]	; 1481c <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   147dc:	ldr	r0, [pc, #60]	; 14820 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   147e0:	add	r3, pc, r3
   147e4:	add	r3, r3, #552	; 0x228
   147e8:	add	r1, pc, r1
   147ec:	add	r0, pc, r0
   147f0:	bl	1205c <__assert_fail@plt>
   147f4:	ldr	r3, [pc, #40]	; 14824 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   147f8:	movw	r2, #995	; 0x3e3
   147fc:	ldr	r1, [pc, #36]	; 14828 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   14800:	ldr	r0, [pc, #36]	; 1482c <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   14804:	add	r3, pc, r3
   14808:	add	r3, r3, #552	; 0x228
   1480c:	add	r1, pc, r1
   14810:	add	r0, pc, r0
   14814:	bl	1205c <__assert_fail@plt>
   14818:	andeq	r3, r0, r8, lsr #6
   1481c:	andeq	r3, r0, r0, ror sl
   14820:	andeq	r3, r0, r8, lsr #24
   14824:	andeq	r3, r0, r4, lsl #6
   14828:	andeq	r3, r0, ip, asr #20
   1482c:	andeq	r3, r0, r8, lsl #25

00014830 <flatcc_builder_truncate_string@@Base>:
   14830:	str	r4, [sp, #-8]!
   14834:	str	lr, [sp, #4]
   14838:	ldr	lr, [r0, #32]
   1483c:	ldrh	r2, [lr, #14]
   14840:	cmp	r2, #6
   14844:	bne	14894 <flatcc_builder_truncate_string@@Base+0x64>
   14848:	ldr	r2, [lr, #20]
   1484c:	mov	ip, r1
   14850:	cmp	r2, r1
   14854:	bcc	148b8 <flatcc_builder_truncate_string@@Base+0x88>
   14858:	sub	r1, r2, r1
   1485c:	mov	r3, r0
   14860:	ldr	r0, [r0, #16]
   14864:	mov	r2, ip
   14868:	str	r1, [lr, #20]
   1486c:	mov	r1, #0
   14870:	ldr	lr, [r3, #20]
   14874:	sub	ip, lr, ip
   14878:	add	r0, r0, ip
   1487c:	str	ip, [r3, #20]
   14880:	bl	1202c <memset@plt>
   14884:	ldr	r4, [sp]
   14888:	add	sp, sp, #4
   1488c:	mov	r0, #0
   14890:	pop	{pc}		; (ldr pc, [sp], #4)
   14894:	ldr	r3, [pc, #64]	; 148dc <flatcc_builder_truncate_string@@Base+0xac>
   14898:	movw	r2, #1003	; 0x3eb
   1489c:	ldr	r1, [pc, #60]	; 148e0 <flatcc_builder_truncate_string@@Base+0xb0>
   148a0:	ldr	r0, [pc, #60]	; 148e4 <flatcc_builder_truncate_string@@Base+0xb4>
   148a4:	add	r3, pc, r3
   148a8:	add	r3, r3, #592	; 0x250
   148ac:	add	r1, pc, r1
   148b0:	add	r0, pc, r0
   148b4:	bl	1205c <__assert_fail@plt>
   148b8:	ldr	r3, [pc, #40]	; 148e8 <flatcc_builder_truncate_string@@Base+0xb8>
   148bc:	mov	r2, #1004	; 0x3ec
   148c0:	ldr	r1, [pc, #36]	; 148ec <flatcc_builder_truncate_string@@Base+0xbc>
   148c4:	ldr	r0, [pc, #36]	; 148f0 <flatcc_builder_truncate_string@@Base+0xc0>
   148c8:	add	r3, pc, r3
   148cc:	add	r3, r3, #592	; 0x250
   148d0:	add	r1, pc, r1
   148d4:	add	r0, pc, r0
   148d8:	bl	1205c <__assert_fail@plt>
   148dc:	andeq	r3, r0, r4, ror #4
   148e0:	andeq	r3, r0, ip, lsr #19
   148e4:	muleq	r0, r8, fp
   148e8:	andeq	r3, r0, r0, asr #4
   148ec:	andeq	r3, r0, r8, lsl #19
   148f0:	andeq	r3, r0, r0, lsl #24

000148f4 <flatcc_builder_start_vector@@Base>:
   148f4:	cmp	r2, #4
   148f8:	strd	r4, [sp, #-16]!
   148fc:	mov	r5, r1
   14900:	movcs	r1, r2
   14904:	movcc	r1, #4
   14908:	str	r6, [sp, #8]
   1490c:	mov	r4, r0
   14910:	mov	r6, r3
   14914:	str	lr, [sp, #12]
   14918:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   1491c:	cmp	r0, #0
   14920:	bne	1497c <flatcc_builder_start_vector@@Base+0x88>
   14924:	ldr	r3, [r4, #28]
   14928:	mov	lr, #4
   1492c:	ldr	r2, [r4, #32]
   14930:	ldr	r1, [r4, #64]	; 0x40
   14934:	ldr	ip, [r4, #60]	; 0x3c
   14938:	strh	lr, [r2, #14]
   1493c:	str	r5, [r2, #16]
   14940:	sub	r1, r1, r3
   14944:	str	r0, [r2, #20]
   14948:	cmn	r1, #4
   1494c:	str	r6, [r2, #24]
   14950:	add	ip, ip, r3
   14954:	mvnhi	r3, #3
   14958:	strls	r1, [r4, #24]
   1495c:	strhi	r3, [r4, #24]
   14960:	mvn	r3, #3
   14964:	str	ip, [r4, #16]
   14968:	str	r3, [r2, #4]
   1496c:	ldrd	r4, [sp]
   14970:	ldr	r6, [sp, #8]
   14974:	add	sp, sp, #12
   14978:	pop	{pc}		; (ldr pc, [sp], #4)
   1497c:	mvn	r0, #0
   14980:	b	1496c <flatcc_builder_start_vector@@Base+0x78>

00014984 <flatcc_builder_start_offset_vector@@Base>:
   14984:	mov	r1, #4
   14988:	strd	r4, [sp, #-16]!
   1498c:	mov	r4, r0
   14990:	str	r6, [sp, #8]
   14994:	str	lr, [sp, #12]
   14998:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   1499c:	cmp	r0, #0
   149a0:	bne	149f8 <flatcc_builder_start_offset_vector@@Base+0x74>
   149a4:	ldr	ip, [r4, #28]
   149a8:	mov	lr, #4
   149ac:	mov	r5, #5
   149b0:	ldr	r3, [r4, #32]
   149b4:	ldr	r2, [r4, #64]	; 0x40
   149b8:	ldr	r1, [r4, #60]	; 0x3c
   149bc:	strh	r5, [r3, #14]
   149c0:	str	lr, [r3, #16]
   149c4:	sub	r2, r2, ip
   149c8:	str	r0, [r3, #20]
   149cc:	cmn	r2, #4
   149d0:	mvnhi	r2, #3
   149d4:	add	r1, r1, ip
   149d8:	str	r1, [r4, #16]
   149dc:	str	r2, [r4, #24]
   149e0:	mvn	r2, #3
   149e4:	str	r2, [r3, #4]
   149e8:	ldrd	r4, [sp]
   149ec:	ldr	r6, [sp, #8]
   149f0:	add	sp, sp, #12
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	mvn	r0, #0
   149fc:	b	149e8 <flatcc_builder_start_offset_vector@@Base+0x64>

00014a00 <flatcc_builder_start_string@@Base>:
   14a00:	mov	r1, #1
   14a04:	strd	r4, [sp, #-16]!
   14a08:	mov	r4, r0
   14a0c:	str	r6, [sp, #8]
   14a10:	str	lr, [sp, #12]
   14a14:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   14a18:	cmp	r0, #0
   14a1c:	bne	14a74 <flatcc_builder_start_string@@Base+0x74>
   14a20:	ldr	ip, [r4, #28]
   14a24:	mov	lr, #1
   14a28:	mov	r5, #6
   14a2c:	ldr	r3, [r4, #32]
   14a30:	ldr	r2, [r4, #64]	; 0x40
   14a34:	ldr	r1, [r4, #60]	; 0x3c
   14a38:	strh	r5, [r3, #14]
   14a3c:	str	lr, [r3, #16]
   14a40:	sub	r2, r2, ip
   14a44:	str	r0, [r3, #20]
   14a48:	cmn	r2, #4
   14a4c:	mvnhi	r2, #3
   14a50:	add	r1, r1, ip
   14a54:	str	r1, [r4, #16]
   14a58:	str	r2, [r4, #24]
   14a5c:	mvn	r2, #3
   14a60:	str	r2, [r3, #4]
   14a64:	ldrd	r4, [sp]
   14a68:	ldr	r6, [sp, #8]
   14a6c:	add	sp, sp, #12
   14a70:	pop	{pc}		; (ldr pc, [sp], #4)
   14a74:	mvn	r0, #0
   14a78:	b	14a64 <flatcc_builder_start_string@@Base+0x64>

00014a7c <flatcc_builder_reserve_table@@Base>:
   14a7c:	cmp	r1, #0
   14a80:	strd	r4, [sp, #-20]!	; 0xffffffec
   14a84:	strd	r6, [sp, #8]
   14a88:	str	lr, [sp, #16]
   14a8c:	sub	sp, sp, #12
   14a90:	blt	14b74 <flatcc_builder_reserve_table@@Base+0xf8>
   14a94:	ldr	r2, [r0, #32]
   14a98:	add	r1, r1, #2
   14a9c:	mov	r4, r0
   14aa0:	lsl	r5, r1, #1
   14aa4:	ldr	r1, [r0, #56]	; 0x38
   14aa8:	ldrh	r6, [r2, #28]
   14aac:	ldr	r3, [r2, #16]
   14ab0:	add	r6, r3, r6, lsl #1
   14ab4:	add	r2, r6, r5
   14ab8:	cmp	r2, r1
   14abc:	bhi	14b24 <flatcc_builder_reserve_table@@Base+0xa8>
   14ac0:	ldr	r3, [r4, #52]	; 0x34
   14ac4:	adds	r3, r3, r6
   14ac8:	mvneq	r0, #0
   14acc:	streq	r3, [r4, #4]
   14ad0:	beq	14b10 <flatcc_builder_reserve_table@@Base+0x94>
   14ad4:	ldr	r2, [r4, #32]
   14ad8:	add	r3, r3, #4
   14adc:	ldr	r1, [r4, #80]	; 0x50
   14ae0:	ldr	r6, [r2, #20]
   14ae4:	str	r3, [r4, #4]
   14ae8:	add	r2, r5, r6
   14aec:	sub	r2, r2, #3
   14af0:	cmp	r2, r1
   14af4:	bhi	14b4c <flatcc_builder_reserve_table@@Base+0xd0>
   14af8:	ldr	r3, [r4, #76]	; 0x4c
   14afc:	add	r3, r3, r6
   14b00:	clz	r0, r3
   14b04:	lsr	r0, r0, #5
   14b08:	str	r3, [r4]
   14b0c:	rsb	r0, r0, #0
   14b10:	add	sp, sp, #12
   14b14:	ldrd	r4, [sp]
   14b18:	ldrd	r6, [sp, #8]
   14b1c:	add	sp, sp, #16
   14b20:	pop	{pc}		; (ldr pc, [sp], #4)
   14b24:	mov	ip, #0
   14b28:	add	r1, r0, #52	; 0x34
   14b2c:	ldr	r0, [r0, #40]	; 0x28
   14b30:	mov	r3, #1
   14b34:	str	ip, [sp]
   14b38:	ldr	r7, [r4, #48]	; 0x30
   14b3c:	blx	r7
   14b40:	cmp	r0, #0
   14b44:	beq	14ac0 <flatcc_builder_reserve_table@@Base+0x44>
   14b48:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>
   14b4c:	mov	ip, #3
   14b50:	mov	r3, #0
   14b54:	ldr	r0, [r4, #40]	; 0x28
   14b58:	add	r1, r4, #76	; 0x4c
   14b5c:	str	ip, [sp]
   14b60:	ldr	r5, [r4, #48]	; 0x30
   14b64:	blx	r5
   14b68:	cmp	r0, #0
   14b6c:	beq	14af8 <flatcc_builder_reserve_table@@Base+0x7c>
   14b70:	b	14b48 <flatcc_builder_reserve_table@@Base+0xcc>
   14b74:	ldr	r3, [pc, #28]	; 14b98 <flatcc_builder_reserve_table@@Base+0x11c>
   14b78:	movw	r2, #1065	; 0x429
   14b7c:	ldr	r1, [pc, #24]	; 14b9c <flatcc_builder_reserve_table@@Base+0x120>
   14b80:	ldr	r0, [pc, #24]	; 14ba0 <flatcc_builder_reserve_table@@Base+0x124>
   14b84:	add	r3, pc, r3
   14b88:	add	r3, r3, #624	; 0x270
   14b8c:	add	r1, pc, r1
   14b90:	add	r0, pc, r0
   14b94:	bl	1205c <__assert_fail@plt>
   14b98:	andeq	r2, r0, r4, lsl #31
   14b9c:	andeq	r3, r0, ip, asr #13
   14ba0:	andeq	r3, r0, r8, ror #18

00014ba4 <flatcc_builder_start_table@@Base>:
   14ba4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14ba8:	mov	r5, r1
   14bac:	mov	r1, #4
   14bb0:	strd	r6, [sp, #8]
   14bb4:	mov	r4, r0
   14bb8:	strd	r8, [sp, #16]
   14bbc:	str	sl, [sp, #24]
   14bc0:	str	lr, [sp, #28]
   14bc4:	sub	sp, sp, #8
   14bc8:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   14bcc:	subs	r7, r0, #0
   14bd0:	bne	14d18 <flatcc_builder_start_table@@Base+0x174>
   14bd4:	ldm	r4, {r0, r2}
   14bd8:	add	r5, r5, #2
   14bdc:	movw	ip, #15186	; 0x3b52
   14be0:	movt	ip, #12137	; 0x2f69
   14be4:	lsl	r5, r5, #1
   14be8:	mov	r8, #3
   14bec:	ldrh	lr, [r4, #8]
   14bf0:	ldr	r1, [r4, #52]	; 0x34
   14bf4:	ldr	sl, [r4, #76]	; 0x4c
   14bf8:	ldr	r3, [r4, #32]
   14bfc:	sub	r2, r2, r1
   14c00:	ldr	r9, [r4, #56]	; 0x38
   14c04:	add	r6, r2, lr, lsl #1
   14c08:	sub	r0, r0, sl
   14c0c:	ldr	sl, [r4, #12]
   14c10:	str	r2, [r3, #16]
   14c14:	add	r2, r6, r5
   14c18:	str	r0, [r3, #20]
   14c1c:	cmp	r2, r9
   14c20:	str	sl, [r3, #24]
   14c24:	strh	lr, [r3, #28]
   14c28:	strh	r7, [r4, #8]
   14c2c:	str	ip, [r4, #12]
   14c30:	strh	r8, [r3, #14]
   14c34:	bls	14c5c <flatcc_builder_start_table@@Base+0xb8>
   14c38:	mov	r3, #1
   14c3c:	add	r1, r4, #52	; 0x34
   14c40:	str	r7, [sp]
   14c44:	ldr	r0, [r4, #40]	; 0x28
   14c48:	ldr	r8, [r4, #48]	; 0x30
   14c4c:	blx	r8
   14c50:	cmp	r0, #0
   14c54:	bne	14d14 <flatcc_builder_start_table@@Base+0x170>
   14c58:	ldr	r1, [r4, #52]	; 0x34
   14c5c:	adds	r6, r6, r1
   14c60:	streq	r6, [r4, #4]
   14c64:	beq	14d18 <flatcc_builder_start_table@@Base+0x174>
   14c68:	ldr	r1, [r4, #32]
   14c6c:	sub	r2, r5, #3
   14c70:	add	r6, r6, #4
   14c74:	ldr	r3, [r4, #80]	; 0x50
   14c78:	ldr	r5, [r1, #20]
   14c7c:	str	r6, [r4, #4]
   14c80:	add	r2, r2, r5
   14c84:	cmp	r2, r3
   14c88:	bhi	14cf0 <flatcc_builder_start_table@@Base+0x14c>
   14c8c:	ldr	r3, [r4, #76]	; 0x4c
   14c90:	add	r3, r3, r5
   14c94:	cmp	r3, #0
   14c98:	str	r3, [r4]
   14c9c:	beq	14d18 <flatcc_builder_start_table@@Base+0x174>
   14ca0:	ldr	r0, [r4, #28]
   14ca4:	movw	r2, #65532	; 0xfffc
   14ca8:	ldr	ip, [r4, #32]
   14cac:	ldr	r3, [r4, #64]	; 0x40
   14cb0:	ldr	r1, [r4, #60]	; 0x3c
   14cb4:	sub	r3, r3, r0
   14cb8:	cmp	r3, r2
   14cbc:	add	r1, r1, r0
   14cc0:	movcs	r3, r2
   14cc4:	str	r1, [r4, #16]
   14cc8:	str	r3, [r4, #24]
   14ccc:	str	r2, [ip, #4]
   14cd0:	mov	r0, r7
   14cd4:	add	sp, sp, #8
   14cd8:	ldrd	r4, [sp]
   14cdc:	ldrd	r6, [sp, #8]
   14ce0:	ldrd	r8, [sp, #16]
   14ce4:	ldr	sl, [sp, #24]
   14ce8:	add	sp, sp, #28
   14cec:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf0:	mov	ip, #3
   14cf4:	mov	r3, #0
   14cf8:	ldr	r0, [r4, #40]	; 0x28
   14cfc:	add	r1, r4, #76	; 0x4c
   14d00:	str	ip, [sp]
   14d04:	ldr	r6, [r4, #48]	; 0x30
   14d08:	blx	r6
   14d0c:	cmp	r0, #0
   14d10:	beq	14c8c <flatcc_builder_start_table@@Base+0xe8>
   14d14:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>
   14d18:	mvn	r7, #0
   14d1c:	b	14cd0 <flatcc_builder_start_table@@Base+0x12c>

00014d20 <flatcc_builder_create_vtable@@Base>:
   14d20:	mov	r3, #0
   14d24:	strd	r4, [sp, #-16]!
   14d28:	mov	r5, r0
   14d2c:	ldr	r0, [r0, #152]	; 0x98
   14d30:	cmp	r2, #0
   14d34:	str	r6, [sp, #8]
   14d38:	str	lr, [sp, #12]
   14d3c:	sub	sp, sp, #80	; 0x50
   14d40:	str	r3, [sp, #8]
   14d44:	str	r3, [sp, #12]
   14d48:	beq	14dc0 <flatcc_builder_create_vtable@@Base+0xa0>
   14d4c:	mov	r3, #1
   14d50:	cmp	r0, #0
   14d54:	strd	r2, [sp, #8]
   14d58:	str	r1, [sp, #16]
   14d5c:	str	r2, [sp, #20]
   14d60:	beq	14df8 <flatcc_builder_create_vtable@@Base+0xd8>
   14d64:	ldr	r3, [r5, #136]	; 0x88
   14d68:	sub	r4, r3, r2
   14d6c:	cmp	r3, r4
   14d70:	ble	14dd4 <flatcc_builder_create_vtable@@Base+0xb4>
   14d74:	mov	r3, r4
   14d78:	add	r1, sp, #16
   14d7c:	str	r2, [sp]
   14d80:	ldr	r2, [sp, #12]
   14d84:	ldr	r0, [r5, #36]	; 0x24
   14d88:	ldr	r6, [r5, #44]	; 0x2c
   14d8c:	blx	r6
   14d90:	cmp	r0, #0
   14d94:	bne	14e44 <flatcc_builder_create_vtable@@Base+0x124>
   14d98:	cmp	r4, #0
   14d9c:	str	r4, [r5, #136]	; 0x88
   14da0:	beq	14da8 <flatcc_builder_create_vtable@@Base+0x88>
   14da4:	add	r4, r4, #1
   14da8:	mov	r0, r4
   14dac:	add	sp, sp, #80	; 0x50
   14db0:	ldrd	r4, [sp]
   14db4:	ldr	r6, [sp, #8]
   14db8:	add	sp, sp, #12
   14dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc0:	cmp	r0, #0
   14dc4:	bne	14dd4 <flatcc_builder_create_vtable@@Base+0xb4>
   14dc8:	ldr	r3, [r5, #180]	; 0xb4
   14dcc:	cmp	r3, #0
   14dd0:	beq	14e3c <flatcc_builder_create_vtable@@Base+0x11c>
   14dd4:	ldr	r3, [pc, #108]	; 14e48 <flatcc_builder_create_vtable@@Base+0x128>
   14dd8:	movw	r2, #647	; 0x287
   14ddc:	ldr	r1, [pc, #104]	; 14e4c <flatcc_builder_create_vtable@@Base+0x12c>
   14de0:	ldr	r0, [pc, #104]	; 14e50 <flatcc_builder_create_vtable@@Base+0x130>
   14de4:	add	r3, pc, r3
   14de8:	add	r3, r3, #44	; 0x2c
   14dec:	add	r1, pc, r1
   14df0:	add	r0, pc, r0
   14df4:	bl	1205c <__assert_fail@plt>
   14df8:	ldr	r3, [r5, #180]	; 0xb4
   14dfc:	cmp	r3, #0
   14e00:	bne	14d64 <flatcc_builder_create_vtable@@Base+0x44>
   14e04:	ldr	r4, [r5, #140]	; 0x8c
   14e08:	mov	r0, r2
   14e0c:	add	r2, r4, r2
   14e10:	str	r2, [r5, #140]	; 0x8c
   14e14:	mov	r3, r4
   14e18:	add	r1, sp, #16
   14e1c:	str	r0, [sp]
   14e20:	ldr	r2, [sp, #12]
   14e24:	ldr	r0, [r5, #36]	; 0x24
   14e28:	ldr	r5, [r5, #44]	; 0x2c
   14e2c:	blx	r5
   14e30:	cmp	r0, #0
   14e34:	beq	14da4 <flatcc_builder_create_vtable@@Base+0x84>
   14e38:	bl	12c1c <flatcc_builder_default_alloc@@Base+0x158>
   14e3c:	ldr	r4, [r5, #140]	; 0x8c
   14e40:	b	14e14 <flatcc_builder_create_vtable@@Base+0xf4>
   14e44:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   14e48:	andeq	r2, r0, r4, lsr #26
   14e4c:	andeq	r3, r0, ip, ror #8
   14e50:	strdeq	r3, [r0], -r0

00014e54 <flatcc_builder_create_cached_vtable@@Base>:
   14e54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e58:	strd	r6, [sp, #8]
   14e5c:	mov	r6, r0
   14e60:	strd	r8, [sp, #16]
   14e64:	mov	r9, r2
   14e68:	mov	r8, r3
   14e6c:	strd	sl, [sp, #24]
   14e70:	str	lr, [sp, #32]
   14e74:	sub	sp, sp, #28
   14e78:	str	r1, [sp, #8]
   14e7c:	ldr	r1, [r0, #116]	; 0x74
   14e80:	cmp	r1, #0
   14e84:	rsbne	r1, r1, #32
   14e88:	beq	15010 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14e8c:	ldr	sl, [r6, #92]	; 0x5c
   14e90:	lsr	r8, r8, r1
   14e94:	adds	fp, sl, r8, lsl #2
   14e98:	str	fp, [sp, #12]
   14e9c:	beq	150ac <flatcc_builder_create_cached_vtable@@Base+0x258>
   14ea0:	ldr	r5, [sl, r8, lsl #2]
   14ea4:	cmp	r5, #0
   14ea8:	beq	150e0 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   14eac:	mov	r3, #0
   14eb0:	str	r8, [sp, #16]
   14eb4:	mov	r8, fp
   14eb8:	mov	fp, r6
   14ebc:	ldr	r7, [r6, #68]	; 0x44
   14ec0:	str	r3, [sp, #20]
   14ec4:	ldr	r3, [r6, #100]	; 0x64
   14ec8:	mov	r6, r3
   14ecc:	add	r4, r6, r5
   14ed0:	ldr	r1, [r4, #8]
   14ed4:	ldrh	r2, [r7, r1]
   14ed8:	add	r1, r7, r1
   14edc:	cmp	r2, r9
   14ee0:	bne	14fbc <flatcc_builder_create_cached_vtable@@Base+0x168>
   14ee4:	mov	r2, r9
   14ee8:	ldr	r0, [sp, #8]
   14eec:	bl	11fb4 <memcmp@plt>
   14ef0:	cmp	r0, #0
   14ef4:	bne	14fbc <flatcc_builder_create_cached_vtable@@Base+0x168>
   14ef8:	ldr	r1, [r4, #4]
   14efc:	ldr	r2, [fp, #152]	; 0x98
   14f00:	cmp	r1, r2
   14f04:	beq	14fc8 <flatcc_builder_create_cached_vtable@@Base+0x174>
   14f08:	ldr	r5, [r4, #12]
   14f0c:	add	r8, r4, #12
   14f10:	str	r4, [sp, #20]
   14f14:	cmp	r5, #0
   14f18:	bne	14ecc <flatcc_builder_create_cached_vtable@@Base+0x78>
   14f1c:	ldr	r8, [sp, #16]
   14f20:	mov	r6, fp
   14f24:	ldr	r3, [r6, #104]	; 0x68
   14f28:	ldr	r4, [r6, #124]	; 0x7c
   14f2c:	add	r2, r4, #16
   14f30:	cmp	r2, r3
   14f34:	bls	14f5c <flatcc_builder_create_cached_vtable@@Base+0x108>
   14f38:	mov	ip, #6
   14f3c:	mov	r3, #0
   14f40:	ldr	r0, [r6, #40]	; 0x28
   14f44:	add	r1, r6, #100	; 0x64
   14f48:	str	ip, [sp]
   14f4c:	ldr	r5, [r6, #48]	; 0x30
   14f50:	blx	r5
   14f54:	cmp	r0, #0
   14f58:	bne	150dc <flatcc_builder_create_cached_vtable@@Base+0x288>
   14f5c:	ldr	r5, [r6, #100]	; 0x64
   14f60:	adds	r7, r5, r4
   14f64:	beq	150ac <flatcc_builder_create_cached_vtable@@Base+0x258>
   14f68:	ldr	r3, [r6, #124]	; 0x7c
   14f6c:	mov	r2, r9
   14f70:	ldr	r0, [r6, #152]	; 0x98
   14f74:	ldr	r1, [sp, #8]
   14f78:	add	ip, r3, #16
   14f7c:	str	ip, [r6, #124]	; 0x7c
   14f80:	str	r0, [r7, #4]
   14f84:	mov	r0, r6
   14f88:	ldr	ip, [sl, r8, lsl #2]
   14f8c:	str	ip, [r7, #12]
   14f90:	str	r3, [sl, r8, lsl #2]
   14f94:	bl	14d20 <flatcc_builder_create_vtable@@Base>
   14f98:	cmp	r0, #0
   14f9c:	str	r0, [r5, r4]
   14fa0:	beq	150ac <flatcc_builder_create_cached_vtable@@Base+0x258>
   14fa4:	ldr	r3, [sp, #20]
   14fa8:	cmp	r3, #0
   14fac:	beq	150f0 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   14fb0:	ldr	r3, [r3, #8]
   14fb4:	str	r3, [r7, #8]
   14fb8:	b	14ff4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   14fbc:	add	r8, r4, #12
   14fc0:	ldr	r5, [r4, #12]
   14fc4:	b	14f14 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   14fc8:	ldr	r3, [sp, #12]
   14fcc:	mov	fp, r8
   14fd0:	ldr	r8, [sp, #16]
   14fd4:	cmp	r3, fp
   14fd8:	beq	14ff0 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   14fdc:	ldr	r3, [r4, #12]
   14fe0:	str	r3, [fp]
   14fe4:	ldr	r3, [sl, r8, lsl #2]
   14fe8:	str	r3, [r4, #12]
   14fec:	str	r5, [sl, r8, lsl #2]
   14ff0:	ldr	r0, [r4]
   14ff4:	add	sp, sp, #28
   14ff8:	ldrd	r4, [sp]
   14ffc:	ldrd	r6, [sp, #8]
   15000:	ldrd	r8, [sp, #16]
   15004:	ldrd	sl, [sp, #24]
   15008:	add	sp, sp, #32
   1500c:	pop	{pc}		; (ldr pc, [sp], #4)
   15010:	ldr	r4, [r0, #124]	; 0x7c
   15014:	add	r5, r0, #92	; 0x5c
   15018:	cmp	r4, #0
   1501c:	bne	15184 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15020:	ldr	r3, [r0, #104]	; 0x68
   15024:	cmp	r3, #15
   15028:	bls	150b4 <flatcc_builder_create_cached_vtable@@Base+0x260>
   1502c:	ldr	r3, [r6, #100]	; 0x64
   15030:	cmp	r3, #0
   15034:	beq	150ac <flatcc_builder_create_cached_vtable@@Base+0x258>
   15038:	mov	ip, #16
   1503c:	mov	r2, #5
   15040:	ldr	r0, [r6, #40]	; 0x28
   15044:	mov	r1, r5
   15048:	mov	r3, #1
   1504c:	str	r2, [sp]
   15050:	mov	r2, #256	; 0x100
   15054:	str	ip, [r6, #124]	; 0x7c
   15058:	ldr	r5, [r6, #48]	; 0x30
   1505c:	blx	r5
   15060:	cmp	r0, #0
   15064:	bne	150ac <flatcc_builder_create_cached_vtable@@Base+0x258>
   15068:	mov	r3, #256	; 0x100
   1506c:	ldr	r1, [r6, #96]	; 0x60
   15070:	b	15078 <flatcc_builder_create_cached_vtable@@Base+0x224>
   15074:	mov	r3, r2
   15078:	lsl	r2, r3, #1
   1507c:	cmp	r2, r1
   15080:	bls	15074 <flatcc_builder_create_cached_vtable@@Base+0x220>
   15084:	lsr	r3, r3, #2
   15088:	cmp	r3, #1
   1508c:	bls	150e8 <flatcc_builder_create_cached_vtable@@Base+0x294>
   15090:	mov	r2, #1
   15094:	add	r4, r4, #1
   15098:	cmp	r3, r2, lsl r4
   1509c:	bhi	15094 <flatcc_builder_create_cached_vtable@@Base+0x240>
   150a0:	rsb	r1, r4, #32
   150a4:	str	r4, [r6, #116]	; 0x74
   150a8:	b	14e8c <flatcc_builder_create_cached_vtable@@Base+0x38>
   150ac:	mov	r0, #0
   150b0:	b	14ff4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   150b4:	mov	ip, #6
   150b8:	add	r1, r0, #100	; 0x64
   150bc:	ldr	r0, [r0, #40]	; 0x28
   150c0:	mov	r3, r4
   150c4:	mov	r2, #16
   150c8:	str	ip, [sp]
   150cc:	ldr	r7, [r6, #48]	; 0x30
   150d0:	blx	r7
   150d4:	cmp	r0, #0
   150d8:	beq	1502c <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   150dc:	bl	12be8 <flatcc_builder_default_alloc@@Base+0x124>
   150e0:	str	r5, [sp, #20]
   150e4:	b	14f24 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   150e8:	mov	r1, #32
   150ec:	b	150a4 <flatcc_builder_create_cached_vtable@@Base+0x250>
   150f0:	ldr	r8, [r6, #120]	; 0x78
   150f4:	ldr	r3, [r6, #172]	; 0xac
   150f8:	add	r2, r9, r8
   150fc:	cmp	r3, #0
   15100:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   15104:	cmp	r3, r2
   15108:	bcc	1516c <flatcc_builder_create_cached_vtable@@Base+0x318>
   1510c:	ldr	r3, [r6, #72]	; 0x48
   15110:	cmp	r3, r2
   15114:	bcs	1513c <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   15118:	mov	ip, #2
   1511c:	mov	r3, #0
   15120:	ldr	r0, [r6, #40]	; 0x28
   15124:	add	r1, r6, #68	; 0x44
   15128:	str	ip, [sp]
   1512c:	ldr	sl, [r6, #48]	; 0x30
   15130:	blx	sl
   15134:	cmp	r0, #0
   15138:	bne	150dc <flatcc_builder_create_cached_vtable@@Base+0x288>
   1513c:	ldr	r3, [r6, #68]	; 0x44
   15140:	adds	r0, r3, r8
   15144:	beq	1517c <flatcc_builder_create_cached_vtable@@Base+0x328>
   15148:	ldr	r3, [r6, #120]	; 0x78
   1514c:	mov	r2, r9
   15150:	ldr	r1, [sp, #8]
   15154:	add	r9, r3, r9
   15158:	str	r3, [r7, #8]
   1515c:	str	r9, [r6, #120]	; 0x78
   15160:	bl	11fa8 <memcpy@plt>
   15164:	ldr	r0, [r5, r4]
   15168:	b	14ff4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1516c:	mov	r0, r6
   15170:	bl	13148 <flatcc_builder_flush_vtable_cache@@Base>
   15174:	ldr	r0, [r5, r4]
   15178:	b	14ff4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1517c:	mvn	r0, #0
   15180:	b	14ff4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15184:	ldr	r3, [pc, #28]	; 151a8 <flatcc_builder_create_cached_vtable@@Base+0x354>
   15188:	movw	r2, #342	; 0x156
   1518c:	ldr	r1, [pc, #24]	; 151ac <flatcc_builder_create_cached_vtable@@Base+0x358>
   15190:	ldr	r0, [pc, #24]	; 151b0 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15194:	add	r3, pc, r3
   15198:	add	r3, r3, #656	; 0x290
   1519c:	add	r1, pc, r1
   151a0:	add	r0, pc, r0
   151a4:	bl	1205c <__assert_fail@plt>
   151a8:	andeq	r2, r0, r4, ror r9
   151ac:	strheq	r3, [r0], -ip
   151b0:	andeq	r3, r0, r4, ror #6

000151b4 <flatcc_builder_create_table@@Base>:
   151b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151b8:	mov	r5, r0
   151bc:	strd	r6, [sp, #8]
   151c0:	str	r8, [sp, #16]
   151c4:	str	lr, [sp, #20]
   151c8:	sub	sp, sp, #88	; 0x58
   151cc:	ldr	r6, [sp, #116]	; 0x74
   151d0:	ldr	r7, [pc, #444]	; 15394 <flatcc_builder_create_table@@Base+0x1e0>
   151d4:	ldr	r0, [sp, #120]	; 0x78
   151d8:	cmp	r6, #0
   151dc:	add	r7, pc, r7
   151e0:	blt	15348 <flatcc_builder_create_table@@Base+0x194>
   151e4:	tst	r0, #1
   151e8:	beq	15324 <flatcc_builder_create_table@@Base+0x170>
   151ec:	ldrh	ip, [r5, #128]	; 0x80
   151f0:	cmp	r3, #4
   151f4:	sub	r0, r0, #1
   151f8:	movcc	r3, #4
   151fc:	cmp	ip, r3
   15200:	ldr	ip, [r5, #136]	; 0x88
   15204:	strhcc	r3, [r5, #128]	; 0x80
   15208:	sub	r3, r3, #1
   1520c:	cmp	r6, #0
   15210:	sub	r4, ip, r2
   15214:	mov	r8, r4
   15218:	sub	r4, r4, #4
   1521c:	and	r8, r8, r3
   15220:	sub	r0, r4, r0
   15224:	sub	r0, r0, r8
   15228:	str	r0, [sp, #12]
   1522c:	beq	15260 <flatcc_builder_create_table@@Base+0xac>
   15230:	ldr	ip, [sp, #112]	; 0x70
   15234:	sub	r4, r8, r4
   15238:	sub	r4, r4, #4
   1523c:	add	r6, ip, r6, lsl #1
   15240:	ldrh	r3, [ip], #2
   15244:	ldr	r0, [r1, r3]
   15248:	sub	lr, r4, r3
   1524c:	cmp	r6, ip
   15250:	add	r0, r0, lr
   15254:	str	r0, [r1, r3]
   15258:	bne	15240 <flatcc_builder_create_table@@Base+0x8c>
   1525c:	ldr	ip, [r5, #136]	; 0x88
   15260:	mov	r3, #1
   15264:	mov	r0, #4
   15268:	cmp	r2, #0
   1526c:	str	r0, [sp, #16]
   15270:	str	r3, [sp, #20]
   15274:	add	r3, sp, #12
   15278:	str	r3, [sp, #24]
   1527c:	str	r0, [sp, #28]
   15280:	beq	1529c <flatcc_builder_create_table@@Base+0xe8>
   15284:	add	r0, r2, r0
   15288:	mov	r3, #2
   1528c:	str	r0, [sp, #16]
   15290:	str	r3, [sp, #20]
   15294:	str	r1, [sp, #32]
   15298:	str	r2, [sp, #36]	; 0x24
   1529c:	cmp	r8, #0
   152a0:	bne	152f4 <flatcc_builder_create_table@@Base+0x140>
   152a4:	sub	r4, ip, r0
   152a8:	cmp	r4, ip
   152ac:	bge	15370 <flatcc_builder_create_table@@Base+0x1bc>
   152b0:	mov	r3, r4
   152b4:	add	r1, sp, #24
   152b8:	str	r0, [sp]
   152bc:	ldr	r2, [sp, #20]
   152c0:	ldr	r0, [r5, #36]	; 0x24
   152c4:	ldr	r6, [r5, #44]	; 0x2c
   152c8:	blx	r6
   152cc:	cmp	r0, #0
   152d0:	bne	1536c <flatcc_builder_create_table@@Base+0x1b8>
   152d4:	mov	r0, r4
   152d8:	str	r4, [r5, #136]	; 0x88
   152dc:	add	sp, sp, #88	; 0x58
   152e0:	ldrd	r4, [sp]
   152e4:	ldrd	r6, [sp, #8]
   152e8:	ldr	r8, [sp, #16]
   152ec:	add	sp, sp, #20
   152f0:	pop	{pc}		; (ldr pc, [sp], #4)
   152f4:	ldr	r2, [pc, #156]	; 15398 <flatcc_builder_create_table@@Base+0x1e4>
   152f8:	add	r0, r0, r8
   152fc:	ldr	r3, [sp, #20]
   15300:	str	r0, [sp, #16]
   15304:	ldr	r1, [r7, r2]
   15308:	add	r2, sp, #88	; 0x58
   1530c:	add	r3, r3, #1
   15310:	add	r2, r2, r3, lsl #3
   15314:	str	r3, [sp, #20]
   15318:	str	r1, [r2, #-72]	; 0xffffffb8
   1531c:	str	r8, [r2, #-68]	; 0xffffffbc
   15320:	b	152a4 <flatcc_builder_create_table@@Base+0xf0>
   15324:	ldr	r3, [pc, #112]	; 1539c <flatcc_builder_create_table@@Base+0x1e8>
   15328:	movw	r2, #1243	; 0x4db
   1532c:	ldr	r1, [pc, #108]	; 153a0 <flatcc_builder_create_table@@Base+0x1ec>
   15330:	ldr	r0, [pc, #108]	; 153a4 <flatcc_builder_create_table@@Base+0x1f0>
   15334:	add	r3, pc, r3
   15338:	add	r3, r3, #668	; 0x29c
   1533c:	add	r1, pc, r1
   15340:	add	r0, pc, r0
   15344:	bl	1205c <__assert_fail@plt>
   15348:	ldr	r3, [pc, #88]	; 153a8 <flatcc_builder_create_table@@Base+0x1f4>
   1534c:	movw	r2, #1237	; 0x4d5
   15350:	ldr	r1, [pc, #84]	; 153ac <flatcc_builder_create_table@@Base+0x1f8>
   15354:	ldr	r0, [pc, #84]	; 153b0 <flatcc_builder_create_table@@Base+0x1fc>
   15358:	add	r3, pc, r3
   1535c:	add	r3, r3, #668	; 0x29c
   15360:	add	r1, pc, r1
   15364:	add	r0, pc, r0
   15368:	bl	1205c <__assert_fail@plt>
   1536c:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   15370:	ldr	r3, [pc, #60]	; 153b4 <flatcc_builder_create_table@@Base+0x200>
   15374:	movw	r2, #647	; 0x287
   15378:	ldr	r1, [pc, #56]	; 153b8 <flatcc_builder_create_table@@Base+0x204>
   1537c:	ldr	r0, [pc, #56]	; 153bc <flatcc_builder_create_table@@Base+0x208>
   15380:	add	r3, pc, r3
   15384:	add	r3, r3, #44	; 0x2c
   15388:	add	r1, pc, r1
   1538c:	add	r0, pc, r0
   15390:	bl	1205c <__assert_fail@plt>
   15394:	andeq	r3, r1, ip, lsl lr
   15398:	andeq	r0, r0, r4, asr r0
   1539c:	ldrdeq	r2, [r0], -r4
   153a0:	andeq	r2, r0, ip, lsl pc
   153a4:	andeq	r3, r0, r8, ror #3
   153a8:			; <UNDEFINED> instruction: 0x000027b0
   153ac:	strdeq	r2, [r0], -r8
   153b0:			; <UNDEFINED> instruction: 0x000031b0
   153b4:	andeq	r2, r0, r8, lsl #15
   153b8:	ldrdeq	r2, [r0], -r0
   153bc:	andeq	r2, r0, r4, asr pc

000153c0 <flatcc_builder_check_required_field@@Base>:
   153c0:	ldr	r3, [r0, #32]
   153c4:	ldrh	r3, [r3, #14]
   153c8:	cmp	r3, #3
   153cc:	bne	153fc <flatcc_builder_check_required_field@@Base+0x3c>
   153d0:	ldrh	r3, [r0, #8]
   153d4:	cmp	r3, r1
   153d8:	bls	153f4 <flatcc_builder_check_required_field@@Base+0x34>
   153dc:	ldr	r3, [r0, #4]
   153e0:	lsl	r1, r1, #1
   153e4:	ldrh	r0, [r3, r1]
   153e8:	adds	r0, r0, #0
   153ec:	movne	r0, #1
   153f0:	bx	lr
   153f4:	mov	r0, #0
   153f8:	bx	lr
   153fc:	ldr	r3, [pc, #36]	; 15428 <flatcc_builder_check_required_field@@Base+0x68>
   15400:	movw	r2, #1272	; 0x4f8
   15404:	str	r4, [sp, #-8]!
   15408:	ldr	r1, [pc, #28]	; 1542c <flatcc_builder_check_required_field@@Base+0x6c>
   1540c:	str	lr, [sp, #4]
   15410:	ldr	r0, [pc, #24]	; 15430 <flatcc_builder_check_required_field@@Base+0x70>
   15414:	add	r3, pc, r3
   15418:	add	r3, r3, #696	; 0x2b8
   1541c:	add	r1, pc, r1
   15420:	add	r0, pc, r0
   15424:	bl	1205c <__assert_fail@plt>
   15428:	strdeq	r2, [r0], -r4
   1542c:	andeq	r2, r0, ip, lsr lr
   15430:	andeq	r3, r0, r4, lsl r1

00015434 <flatcc_builder_check_union_field@@Base>:
   15434:	ldr	r3, [r0, #32]
   15438:	ldrh	r3, [r3, #14]
   1543c:	cmp	r3, #3
   15440:	bne	154a4 <flatcc_builder_check_union_field@@Base+0x70>
   15444:	cmp	r1, #0
   15448:	beq	15490 <flatcc_builder_check_union_field@@Base+0x5c>
   1544c:	ldrh	r3, [r0, #8]
   15450:	cmp	r3, r1
   15454:	bls	15490 <flatcc_builder_check_union_field@@Base+0x5c>
   15458:	ldr	r3, [r0, #4]
   1545c:	sub	r1, r1, #-2147483647	; 0x80000001
   15460:	lsl	r1, r1, #1
   15464:	ldrh	r2, [r3, r1]!
   15468:	cmp	r2, #0
   1546c:	ldrh	r1, [r3, #2]
   15470:	beq	15484 <flatcc_builder_check_union_field@@Base+0x50>
   15474:	ldr	r3, [r0, #16]
   15478:	ldrb	r3, [r3, r2]
   1547c:	cmp	r3, #0
   15480:	bne	15498 <flatcc_builder_check_union_field@@Base+0x64>
   15484:	clz	r0, r1
   15488:	lsr	r0, r0, #5
   1548c:	bx	lr
   15490:	mov	r0, #0
   15494:	bx	lr
   15498:	adds	r0, r1, #0
   1549c:	movne	r0, #1
   154a0:	bx	lr
   154a4:	ldr	r3, [pc, #36]	; 154d0 <flatcc_builder_check_union_field@@Base+0x9c>
   154a8:	movw	r2, #1279	; 0x4ff
   154ac:	str	r4, [sp, #-8]!
   154b0:	ldr	r1, [pc, #28]	; 154d4 <flatcc_builder_check_union_field@@Base+0xa0>
   154b4:	str	lr, [sp, #4]
   154b8:	ldr	r0, [pc, #24]	; 154d8 <flatcc_builder_check_union_field@@Base+0xa4>
   154bc:	add	r3, pc, r3
   154c0:	add	r3, r3, #732	; 0x2dc
   154c4:	add	r1, pc, r1
   154c8:	add	r0, pc, r0
   154cc:	bl	1205c <__assert_fail@plt>
   154d0:	andeq	r2, r0, ip, asr #12
   154d4:	muleq	r0, r4, sp
   154d8:	andeq	r3, r0, ip, rrx

000154dc <flatcc_builder_check_required@@Base>:
   154dc:	ldr	r3, [r0, #32]
   154e0:	ldrh	r3, [r3, #14]
   154e4:	cmp	r3, #3
   154e8:	bne	15550 <flatcc_builder_check_required@@Base+0x74>
   154ec:	ldrh	r3, [r0, #8]
   154f0:	cmp	r3, r2
   154f4:	blt	15548 <flatcc_builder_check_required@@Base+0x6c>
   154f8:	cmp	r2, #0
   154fc:	ble	15540 <flatcc_builder_check_required@@Base+0x64>
   15500:	ldrh	r3, [r1]
   15504:	ldr	ip, [r0, #4]
   15508:	lsl	r3, r3, #1
   1550c:	ldrh	r0, [ip, r3]
   15510:	cmp	r0, #0
   15514:	bxeq	lr
   15518:	add	r2, r1, r2, lsl #1
   1551c:	add	r1, r1, #2
   15520:	b	15538 <flatcc_builder_check_required@@Base+0x5c>
   15524:	ldrh	r3, [r1], #2
   15528:	lsl	r3, r3, #1
   1552c:	ldrh	r0, [ip, r3]
   15530:	cmp	r0, #0
   15534:	bxeq	lr
   15538:	cmp	r1, r2
   1553c:	bne	15524 <flatcc_builder_check_required@@Base+0x48>
   15540:	mov	r0, #1
   15544:	bx	lr
   15548:	mov	r0, #0
   1554c:	bx	lr
   15550:	ldr	r3, [pc, #36]	; 1557c <flatcc_builder_check_required@@Base+0xa0>
   15554:	movw	r2, #1297	; 0x511
   15558:	str	r4, [sp, #-8]!
   1555c:	ldr	r1, [pc, #28]	; 15580 <flatcc_builder_check_required@@Base+0xa4>
   15560:	str	lr, [sp, #4]
   15564:	ldr	r0, [pc, #24]	; 15584 <flatcc_builder_check_required@@Base+0xa8>
   15568:	add	r3, pc, r3
   1556c:	add	r3, r3, #768	; 0x300
   15570:	add	r1, pc, r1
   15574:	add	r0, pc, r0
   15578:	bl	1205c <__assert_fail@plt>
   1557c:	andeq	r2, r0, r0, lsr #11
   15580:	andeq	r2, r0, r8, ror #25
   15584:	andeq	r2, r0, r0, asr #31

00015588 <flatcc_builder_end_table@@Base>:
   15588:	ldr	r3, [r0, #32]
   1558c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15590:	ldrh	r3, [r3, #14]
   15594:	strd	r6, [sp, #8]
   15598:	str	lr, [sp, #16]
   1559c:	sub	sp, sp, #20
   155a0:	cmp	r3, #3
   155a4:	bne	15728 <flatcc_builder_end_table@@Base+0x1a0>
   155a8:	ldrh	r5, [r0, #8]
   155ac:	movw	ip, #31153	; 0x79b1
   155b0:	movt	ip, #40503	; 0x9e37
   155b4:	mov	r4, r0
   155b8:	ldr	r1, [r0, #4]
   155bc:	ldr	r3, [r0, #12]
   155c0:	add	r5, r5, #2
   155c4:	lsl	r5, r5, #1
   155c8:	ldr	lr, [r0, #20]
   155cc:	sub	r6, r1, #4
   155d0:	uxth	r5, r5
   155d4:	eor	r3, r3, r5
   155d8:	mov	r2, r5
   155dc:	strh	r5, [r1, #-4]
   155e0:	mul	r3, ip, r3
   155e4:	add	lr, lr, #4
   155e8:	uxth	lr, lr
   155ec:	eor	r3, r3, lr
   155f0:	strh	lr, [r1, #-2]
   155f4:	mov	r1, r6
   155f8:	mul	r3, ip, r3
   155fc:	str	r3, [r0, #12]
   15600:	bl	14e54 <flatcc_builder_create_cached_vtable@@Base>
   15604:	subs	r7, r0, #0
   15608:	bne	15628 <flatcc_builder_end_table@@Base+0xa0>
   1560c:	mov	r5, #0
   15610:	mov	r0, r5
   15614:	add	sp, sp, #20
   15618:	ldrd	r4, [sp]
   1561c:	ldrd	r6, [sp, #8]
   15620:	add	sp, sp, #16
   15624:	pop	{pc}		; (ldr pc, [sp], #4)
   15628:	mov	r2, r5
   1562c:	mov	r1, #0
   15630:	mov	r0, r6
   15634:	bl	1202c <memset@plt>
   15638:	ldr	ip, [r4]
   1563c:	mov	r0, r4
   15640:	ldr	r3, [r4, #32]
   15644:	ldr	r2, [r4, #76]	; 0x4c
   15648:	ldr	r1, [r3, #20]
   1564c:	str	r7, [sp, #8]
   15650:	ldrh	r3, [r4, #130]	; 0x82
   15654:	add	r2, r2, r1
   15658:	ldr	r1, [r4, #16]
   1565c:	sub	ip, ip, r2
   15660:	asr	ip, ip, #1
   15664:	str	r2, [sp]
   15668:	ldr	r2, [r4, #20]
   1566c:	str	ip, [sp, #4]
   15670:	bl	151b4 <flatcc_builder_create_table@@Base>
   15674:	subs	r5, r0, #0
   15678:	beq	1560c <flatcc_builder_end_table@@Base+0x84>
   1567c:	ldr	r3, [r4, #32]
   15680:	mov	r1, #0
   15684:	ldr	r0, [r4, #52]	; 0x34
   15688:	ldr	r2, [r4, #76]	; 0x4c
   1568c:	ldr	ip, [r3, #16]
   15690:	ldr	r6, [r3, #20]
   15694:	ldrh	lr, [r3, #28]
   15698:	add	r0, r0, ip
   1569c:	ldr	ip, [r3, #24]
   156a0:	add	r3, r2, r6
   156a4:	ldr	r2, [r4, #20]
   156a8:	str	r3, [r4]
   156ac:	str	r0, [r4, #4]
   156b0:	strh	lr, [r4, #8]
   156b4:	str	ip, [r4, #12]
   156b8:	ldr	r0, [r4, #16]
   156bc:	bl	1202c <memset@plt>
   156c0:	ldr	r3, [r4, #32]
   156c4:	ldr	r0, [r4, #60]	; 0x3c
   156c8:	ldr	r2, [r4, #64]	; 0x40
   156cc:	ldr	ip, [r3]
   156d0:	ldmib	r3, {r1, lr}
   156d4:	add	r0, r0, ip
   156d8:	sub	r2, r2, ip
   156dc:	str	r0, [r4, #16]
   156e0:	cmp	r2, r1
   156e4:	ldrh	r0, [r4, #128]	; 0x80
   156e8:	movcs	r2, r1
   156ec:	str	lr, [r4, #20]
   156f0:	str	ip, [r4, #28]
   156f4:	ldrh	ip, [r4, #130]	; 0x82
   156f8:	str	r2, [r4, #24]
   156fc:	ldr	r2, [r4, #156]	; 0x9c
   15700:	str	r1, [r3, #4]
   15704:	cmp	r0, ip
   15708:	sub	r0, r3, #36	; 0x24
   1570c:	strhcc	ip, [r4, #128]	; 0x80
   15710:	ldrh	r1, [r3, #12]
   15714:	sub	r3, r2, #1
   15718:	str	r0, [r4, #32]
   1571c:	strh	r1, [r4, #130]	; 0x82
   15720:	str	r3, [r4, #156]	; 0x9c
   15724:	b	15610 <flatcc_builder_end_table@@Base+0x88>
   15728:	ldr	r3, [pc, #28]	; 1574c <flatcc_builder_end_table@@Base+0x1c4>
   1572c:	movw	r2, #1317	; 0x525
   15730:	ldr	r1, [pc, #24]	; 15750 <flatcc_builder_end_table@@Base+0x1c8>
   15734:	ldr	r0, [pc, #24]	; 15754 <flatcc_builder_end_table@@Base+0x1cc>
   15738:	add	r3, pc, r3
   1573c:	add	r3, r3, #800	; 0x320
   15740:	add	r1, pc, r1
   15744:	add	r0, pc, r0
   15748:	bl	1205c <__assert_fail@plt>
   1574c:	ldrdeq	r2, [r0], -r0
   15750:	andeq	r2, r0, r8, lsl fp
   15754:	strdeq	r2, [r0], -r0

00015758 <flatcc_builder_create_vector@@Base>:
   15758:	strd	r4, [sp, #-16]!
   1575c:	mov	r4, r0
   15760:	str	r6, [sp, #8]
   15764:	str	lr, [sp, #12]
   15768:	sub	sp, sp, #88	; 0x58
   1576c:	ldr	ip, [sp, #108]	; 0x6c
   15770:	ldr	r5, [pc, #328]	; 158c0 <flatcc_builder_create_vector@@Base+0x168>
   15774:	ldrh	r0, [sp, #104]	; 0x68
   15778:	cmp	r2, ip
   1577c:	add	r5, pc, r5
   15780:	bhi	15874 <flatcc_builder_create_vector@@Base+0x11c>
   15784:	ldrh	ip, [r4, #128]	; 0x80
   15788:	cmp	r0, #4
   1578c:	mul	r3, r3, r2
   15790:	movcc	r0, #4
   15794:	str	r2, [sp, #12]
   15798:	mov	r2, #1
   1579c:	ldr	r6, [r4, #136]	; 0x88
   157a0:	mov	lr, #4
   157a4:	str	r2, [sp, #20]
   157a8:	cmp	ip, r0
   157ac:	add	ip, sp, #12
   157b0:	str	lr, [sp, #16]
   157b4:	strhcc	r0, [r4, #128]	; 0x80
   157b8:	sub	r2, r6, r3
   157bc:	sub	r0, r0, #1
   157c0:	cmp	r3, #0
   157c4:	and	r0, r0, r2
   157c8:	str	ip, [sp, #24]
   157cc:	moveq	r2, lr
   157d0:	str	lr, [sp, #28]
   157d4:	beq	157f0 <flatcc_builder_create_vector@@Base+0x98>
   157d8:	add	r2, r3, lr
   157dc:	str	r1, [sp, #32]
   157e0:	mov	r1, #2
   157e4:	str	r2, [sp, #16]
   157e8:	str	r1, [sp, #20]
   157ec:	str	r3, [sp, #36]	; 0x24
   157f0:	cmp	r0, #0
   157f4:	bne	15844 <flatcc_builder_create_vector@@Base+0xec>
   157f8:	sub	r5, r6, r2
   157fc:	cmp	r6, r5
   15800:	ble	1589c <flatcc_builder_create_vector@@Base+0x144>
   15804:	mov	r3, r5
   15808:	add	r1, sp, #24
   1580c:	str	r2, [sp]
   15810:	ldr	r2, [sp, #20]
   15814:	ldr	r0, [r4, #36]	; 0x24
   15818:	ldr	r6, [r4, #44]	; 0x2c
   1581c:	blx	r6
   15820:	cmp	r0, #0
   15824:	bne	15898 <flatcc_builder_create_vector@@Base+0x140>
   15828:	mov	r0, r5
   1582c:	str	r5, [r4, #136]	; 0x88
   15830:	add	sp, sp, #88	; 0x58
   15834:	ldrd	r4, [sp]
   15838:	ldr	r6, [sp, #8]
   1583c:	add	sp, sp, #12
   15840:	pop	{pc}		; (ldr pc, [sp], #4)
   15844:	ldr	r1, [pc, #120]	; 158c4 <flatcc_builder_create_vector@@Base+0x16c>
   15848:	add	r2, r2, r0
   1584c:	ldr	r3, [sp, #20]
   15850:	str	r2, [sp, #16]
   15854:	ldr	ip, [r5, r1]
   15858:	add	r1, sp, #88	; 0x58
   1585c:	add	r3, r3, #1
   15860:	add	r1, r1, r3, lsl #3
   15864:	str	r3, [sp, #20]
   15868:	str	ip, [r1, #-72]	; 0xffffffb8
   1586c:	str	r0, [r1, #-68]	; 0xffffffbc
   15870:	b	157f8 <flatcc_builder_create_vector@@Base+0xa0>
   15874:	ldr	r3, [pc, #76]	; 158c8 <flatcc_builder_create_vector@@Base+0x170>
   15878:	movw	r2, #1365	; 0x555
   1587c:	ldr	r1, [pc, #72]	; 158cc <flatcc_builder_create_vector@@Base+0x174>
   15880:	ldr	r0, [pc, #72]	; 158d0 <flatcc_builder_create_vector@@Base+0x178>
   15884:	add	r3, pc, r3
   15888:	add	r3, r3, #828	; 0x33c
   1588c:	add	r1, pc, r1
   15890:	add	r0, pc, r0
   15894:	bl	1205c <__assert_fail@plt>
   15898:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   1589c:	ldr	r3, [pc, #48]	; 158d4 <flatcc_builder_create_vector@@Base+0x17c>
   158a0:	movw	r2, #647	; 0x287
   158a4:	ldr	r1, [pc, #44]	; 158d8 <flatcc_builder_create_vector@@Base+0x180>
   158a8:	ldr	r0, [pc, #44]	; 158dc <flatcc_builder_create_vector@@Base+0x184>
   158ac:	add	r3, pc, r3
   158b0:	add	r3, r3, #44	; 0x2c
   158b4:	add	r1, pc, r1
   158b8:	add	r0, pc, r0
   158bc:	bl	1205c <__assert_fail@plt>
   158c0:	andeq	r3, r1, ip, ror r8
   158c4:	andeq	r0, r0, r4, asr r0
   158c8:	andeq	r2, r0, r4, lsl #5
   158cc:	andeq	r2, r0, ip, asr #19
   158d0:	ldrdeq	r2, [r0], -r0
   158d4:	andeq	r2, r0, ip, asr r2
   158d8:	andeq	r2, r0, r4, lsr #19
   158dc:	andeq	r2, r0, r8, lsr #20

000158e0 <flatcc_builder_end_vector@@Base>:
   158e0:	ldr	r1, [r0, #32]
   158e4:	strd	r4, [sp, #-12]!
   158e8:	ldrh	r3, [r1, #14]
   158ec:	str	lr, [sp, #8]
   158f0:	sub	sp, sp, #12
   158f4:	cmp	r3, #4
   158f8:	bne	159b0 <flatcc_builder_end_vector@@Base+0xd0>
   158fc:	ldrh	ip, [r0, #130]	; 0x82
   15900:	mov	r4, r0
   15904:	ldr	r3, [r1, #16]
   15908:	ldr	r2, [r1, #20]
   1590c:	ldr	r1, [r1, #24]
   15910:	str	r1, [sp, #4]
   15914:	ldr	r1, [r0, #16]
   15918:	str	ip, [sp]
   1591c:	bl	15758 <flatcc_builder_create_vector@@Base>
   15920:	subs	r5, r0, #0
   15924:	beq	1599c <flatcc_builder_end_vector@@Base+0xbc>
   15928:	mov	r1, #0
   1592c:	ldr	r0, [r4, #16]
   15930:	ldr	r2, [r4, #20]
   15934:	bl	1202c <memset@plt>
   15938:	ldr	r3, [r4, #32]
   1593c:	ldr	r0, [r4, #60]	; 0x3c
   15940:	ldr	r2, [r4, #64]	; 0x40
   15944:	ldr	ip, [r3]
   15948:	ldmib	r3, {r1, lr}
   1594c:	add	r0, r0, ip
   15950:	sub	r2, r2, ip
   15954:	str	r0, [r4, #16]
   15958:	cmp	r2, r1
   1595c:	ldrh	r0, [r4, #128]	; 0x80
   15960:	movcs	r2, r1
   15964:	str	lr, [r4, #20]
   15968:	str	ip, [r4, #28]
   1596c:	ldrh	ip, [r4, #130]	; 0x82
   15970:	str	r2, [r4, #24]
   15974:	ldr	r2, [r4, #156]	; 0x9c
   15978:	str	r1, [r3, #4]
   1597c:	cmp	r0, ip
   15980:	sub	r0, r3, #36	; 0x24
   15984:	strhcc	ip, [r4, #128]	; 0x80
   15988:	ldrh	r1, [r3, #12]
   1598c:	sub	r3, r2, #1
   15990:	str	r0, [r4, #32]
   15994:	strh	r1, [r4, #130]	; 0x82
   15998:	str	r3, [r4, #156]	; 0x9c
   1599c:	mov	r0, r5
   159a0:	add	sp, sp, #12
   159a4:	ldrd	r4, [sp]
   159a8:	add	sp, sp, #8
   159ac:	pop	{pc}		; (ldr pc, [sp], #4)
   159b0:	ldr	r3, [pc, #28]	; 159d4 <flatcc_builder_end_vector@@Base+0xf4>
   159b4:	movw	r2, #1400	; 0x578
   159b8:	ldr	r1, [pc, #24]	; 159d8 <flatcc_builder_end_vector@@Base+0xf8>
   159bc:	ldr	r0, [pc, #24]	; 159dc <flatcc_builder_end_vector@@Base+0xfc>
   159c0:	add	r3, pc, r3
   159c4:	add	r3, r3, #860	; 0x35c
   159c8:	add	r1, pc, r1
   159cc:	add	r0, pc, r0
   159d0:	bl	1205c <__assert_fail@plt>
   159d4:	andeq	r2, r0, r8, asr #2
   159d8:	muleq	r0, r0, r8
   159dc:	ldrdeq	r2, [r0], -ip

000159e0 <flatcc_builder_vector_count@@Base>:
   159e0:	ldr	r3, [r0, #32]
   159e4:	ldr	r0, [r3, #20]
   159e8:	bx	lr

000159ec <flatcc_builder_vector_edit@@Base>:
   159ec:	ldr	r0, [r0, #16]
   159f0:	bx	lr

000159f4 <flatcc_builder_create_offset_vector_direct@@Base>:
   159f4:	cmn	r2, #-1073741823	; 0xc0000001
   159f8:	bhi	15a04 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   159fc:	mov	r3, #0
   15a00:	b	12f1c <flatcc_builder_default_alloc@@Base+0x458>
   15a04:	mov	r0, #0
   15a08:	bx	lr

00015a0c <flatcc_builder_end_offset_vector@@Base>:
   15a0c:	ldr	r3, [r0, #32]
   15a10:	strd	r4, [sp, #-16]!
   15a14:	ldrh	r2, [r3, #14]
   15a18:	str	r6, [sp, #8]
   15a1c:	str	lr, [sp, #12]
   15a20:	cmp	r2, #5
   15a24:	bne	15ac8 <flatcc_builder_end_offset_vector@@Base+0xbc>
   15a28:	ldr	r1, [r0, #16]
   15a2c:	mov	r4, r0
   15a30:	ldr	r2, [r3, #20]
   15a34:	bl	159f4 <flatcc_builder_create_offset_vector_direct@@Base>
   15a38:	subs	r5, r0, #0
   15a3c:	beq	15ab4 <flatcc_builder_end_offset_vector@@Base+0xa8>
   15a40:	mov	r1, #0
   15a44:	ldr	r0, [r4, #16]
   15a48:	ldr	r2, [r4, #20]
   15a4c:	bl	1202c <memset@plt>
   15a50:	ldr	r3, [r4, #32]
   15a54:	ldr	r0, [r4, #60]	; 0x3c
   15a58:	ldr	r2, [r4, #64]	; 0x40
   15a5c:	ldr	ip, [r3]
   15a60:	ldmib	r3, {r1, lr}
   15a64:	add	r0, r0, ip
   15a68:	sub	r2, r2, ip
   15a6c:	str	r0, [r4, #16]
   15a70:	cmp	r2, r1
   15a74:	ldrh	r0, [r4, #128]	; 0x80
   15a78:	movcs	r2, r1
   15a7c:	str	lr, [r4, #20]
   15a80:	str	ip, [r4, #28]
   15a84:	ldrh	ip, [r4, #130]	; 0x82
   15a88:	str	r2, [r4, #24]
   15a8c:	ldr	r2, [r4, #156]	; 0x9c
   15a90:	str	r1, [r3, #4]
   15a94:	cmp	r0, ip
   15a98:	sub	r0, r3, #36	; 0x24
   15a9c:	strhcc	ip, [r4, #128]	; 0x80
   15aa0:	ldrh	r1, [r3, #12]
   15aa4:	sub	r3, r2, #1
   15aa8:	str	r0, [r4, #32]
   15aac:	strh	r1, [r4, #130]	; 0x82
   15ab0:	str	r3, [r4, #156]	; 0x9c
   15ab4:	mov	r0, r5
   15ab8:	ldrd	r4, [sp]
   15abc:	ldr	r6, [sp, #8]
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac8:	ldr	r3, [pc, #28]	; 15aec <flatcc_builder_end_offset_vector@@Base+0xe0>
   15acc:	movw	r2, #1480	; 0x5c8
   15ad0:	ldr	r1, [pc, #24]	; 15af0 <flatcc_builder_end_offset_vector@@Base+0xe4>
   15ad4:	ldr	r0, [pc, #24]	; 15af4 <flatcc_builder_end_offset_vector@@Base+0xe8>
   15ad8:	add	r3, pc, r3
   15adc:	add	r3, r3, #888	; 0x378
   15ae0:	add	r1, pc, r1
   15ae4:	add	r0, pc, r0
   15ae8:	bl	1205c <__assert_fail@plt>
   15aec:	andeq	r2, r0, r0, lsr r0
   15af0:	andeq	r2, r0, r8, ror r7
   15af4:	andeq	r2, r0, r0, lsr r9

00015af8 <flatcc_builder_create_offset_vector@@Base>:
   15af8:	strd	r4, [sp, #-16]!
   15afc:	mov	r5, r2
   15b00:	mov	r4, r0
   15b04:	str	r6, [sp, #8]
   15b08:	mov	r6, r1
   15b0c:	str	lr, [sp, #12]
   15b10:	bl	14984 <flatcc_builder_start_offset_vector@@Base>
   15b14:	cmp	r0, #0
   15b18:	beq	15b30 <flatcc_builder_create_offset_vector@@Base+0x38>
   15b1c:	ldrd	r4, [sp]
   15b20:	mov	r0, #0
   15b24:	ldr	r6, [sp, #8]
   15b28:	add	sp, sp, #12
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	mov	r1, r5
   15b34:	mov	r0, r4
   15b38:	bl	14248 <flatcc_builder_extend_offset_vector@@Base>
   15b3c:	cmp	r0, #0
   15b40:	beq	15b1c <flatcc_builder_create_offset_vector@@Base+0x24>
   15b44:	lsl	r2, r5, #2
   15b48:	mov	r1, r6
   15b4c:	bl	11fa8 <memcpy@plt>
   15b50:	mov	r0, r4
   15b54:	ldrd	r4, [sp]
   15b58:	ldr	r6, [sp, #8]
   15b5c:	ldr	lr, [sp, #12]
   15b60:	add	sp, sp, #16
   15b64:	b	15a0c <flatcc_builder_end_offset_vector@@Base>

00015b68 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15b68:	ldr	r2, [r0, #32]
   15b6c:	strd	r4, [sp, #-16]!
   15b70:	ldrh	ip, [r2, #14]
   15b74:	str	r6, [sp, #8]
   15b78:	str	lr, [sp, #12]
   15b7c:	cmp	ip, #5
   15b80:	bne	15c38 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   15b84:	ldr	r2, [r2, #20]
   15b88:	cmn	r2, #-1073741823	; 0xc0000001
   15b8c:	bhi	15ba8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   15b90:	mov	r3, r1
   15b94:	ldr	r1, [r0, #16]
   15b98:	mov	r4, r0
   15b9c:	bl	12f1c <flatcc_builder_default_alloc@@Base+0x458>
   15ba0:	subs	r5, r0, #0
   15ba4:	bne	15bc0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15ba8:	mov	r5, #0
   15bac:	mov	r0, r5
   15bb0:	ldrd	r4, [sp]
   15bb4:	ldr	r6, [sp, #8]
   15bb8:	add	sp, sp, #12
   15bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc0:	mov	r1, #0
   15bc4:	ldr	r0, [r4, #16]
   15bc8:	ldr	r2, [r4, #20]
   15bcc:	bl	1202c <memset@plt>
   15bd0:	ldr	r3, [r4, #32]
   15bd4:	ldr	r0, [r4, #60]	; 0x3c
   15bd8:	ldr	r2, [r4, #64]	; 0x40
   15bdc:	ldr	ip, [r3]
   15be0:	ldmib	r3, {r1, lr}
   15be4:	add	r0, r0, ip
   15be8:	sub	r2, r2, ip
   15bec:	str	r0, [r4, #16]
   15bf0:	cmp	r2, r1
   15bf4:	ldrh	r0, [r4, #128]	; 0x80
   15bf8:	movcs	r2, r1
   15bfc:	str	lr, [r4, #20]
   15c00:	str	ip, [r4, #28]
   15c04:	ldrh	ip, [r4, #130]	; 0x82
   15c08:	str	r2, [r4, #24]
   15c0c:	ldr	r2, [r4, #156]	; 0x9c
   15c10:	str	r1, [r3, #4]
   15c14:	cmp	r0, ip
   15c18:	sub	r0, r3, #36	; 0x24
   15c1c:	strhcc	ip, [r4, #128]	; 0x80
   15c20:	ldrh	r1, [r3, #12]
   15c24:	sub	r3, r2, #1
   15c28:	str	r0, [r4, #32]
   15c2c:	strh	r1, [r4, #130]	; 0x82
   15c30:	str	r3, [r4, #156]	; 0x9c
   15c34:	b	15bac <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   15c38:	ldr	r3, [pc, #28]	; 15c5c <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   15c3c:	movw	r2, #1493	; 0x5d5
   15c40:	ldr	r1, [pc, #24]	; 15c60 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   15c44:	ldr	r0, [pc, #24]	; 15c64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   15c48:	add	r3, pc, r3
   15c4c:	add	r3, r3, #924	; 0x39c
   15c50:	add	r1, pc, r1
   15c54:	add	r0, pc, r0
   15c58:	bl	1205c <__assert_fail@plt>
   15c5c:	andeq	r1, r0, r0, asr #29
   15c60:	andeq	r2, r0, r8, lsl #12
   15c64:	andeq	r2, r0, r0, asr #15

00015c68 <flatcc_builder_offset_vector_edit@@Base>:
   15c68:	ldr	r0, [r0, #16]
   15c6c:	bx	lr

00015c70 <flatcc_builder_offset_vector_count@@Base>:
   15c70:	ldr	r3, [r0, #32]
   15c74:	ldr	r0, [r3, #20]
   15c78:	bx	lr

00015c7c <flatcc_builder_create_union_vector_direct@@Base>:
   15c7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c80:	mov	r4, r0
   15c84:	strd	r6, [sp, #8]
   15c88:	str	r8, [sp, #16]
   15c8c:	str	lr, [sp, #20]
   15c90:	sub	sp, sp, #8
   15c94:	ldr	r5, [sp, #32]
   15c98:	cmn	r5, #-1073741823	; 0xc0000001
   15c9c:	bhi	15d00 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   15ca0:	mov	r6, r1
   15ca4:	mov	r7, r2
   15ca8:	mov	r1, r3
   15cac:	mov	r0, r6
   15cb0:	mov	r3, r2
   15cb4:	mov	r2, r5
   15cb8:	bl	12f1c <flatcc_builder_default_alloc@@Base+0x458>
   15cbc:	subs	r8, r0, #0
   15cc0:	beq	15d00 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   15cc4:	mvn	ip, #0
   15cc8:	mov	r3, #1
   15ccc:	mov	r2, r5
   15cd0:	mov	r1, r7
   15cd4:	mov	r0, r6
   15cd8:	stm	sp, {r3, ip}
   15cdc:	bl	15758 <flatcc_builder_create_vector@@Base>
   15ce0:	stm	r4, {r0, r8}
   15ce4:	mov	r0, r4
   15ce8:	add	sp, sp, #8
   15cec:	ldrd	r4, [sp]
   15cf0:	ldrd	r6, [sp, #8]
   15cf4:	ldr	r8, [sp, #16]
   15cf8:	add	sp, sp, #20
   15cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15d00:	mov	r3, #0
   15d04:	str	r3, [r4]
   15d08:	str	r3, [r4, #4]
   15d0c:	b	15ce4 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00015d10 <flatcc_builder_create_union_vector@@Base>:
   15d10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d14:	mov	r5, r1
   15d18:	mov	r4, r2
   15d1c:	strd	r6, [sp, #8]
   15d20:	mov	r6, r0
   15d24:	mov	r0, r1
   15d28:	str	r8, [sp, #16]
   15d2c:	mov	r7, r3
   15d30:	str	lr, [sp, #20]
   15d34:	sub	sp, sp, #16
   15d38:	bl	14984 <flatcc_builder_start_offset_vector@@Base>
   15d3c:	cmp	r0, #0
   15d40:	beq	15d6c <flatcc_builder_create_union_vector@@Base+0x5c>
   15d44:	mov	r3, #0
   15d48:	str	r3, [r6]
   15d4c:	str	r3, [r6, #4]
   15d50:	mov	r0, r6
   15d54:	add	sp, sp, #16
   15d58:	ldrd	r4, [sp]
   15d5c:	ldrd	r6, [sp, #8]
   15d60:	ldr	r8, [sp, #16]
   15d64:	add	sp, sp, #20
   15d68:	pop	{pc}		; (ldr pc, [sp], #4)
   15d6c:	mov	r1, r7
   15d70:	mov	r0, r5
   15d74:	bl	14248 <flatcc_builder_extend_offset_vector@@Base>
   15d78:	cmp	r0, #0
   15d7c:	beq	15d44 <flatcc_builder_create_union_vector@@Base+0x34>
   15d80:	ldr	r8, [r5, #20]
   15d84:	ldr	r3, [r5, #24]
   15d88:	add	r1, r7, r8
   15d8c:	cmp	r1, r3
   15d90:	str	r1, [r5, #20]
   15d94:	bcs	15e80 <flatcc_builder_create_union_vector@@Base+0x170>
   15d98:	ldr	r2, [r5, #16]
   15d9c:	adds	r8, r2, r8
   15da0:	beq	15d44 <flatcc_builder_create_union_vector@@Base+0x34>
   15da4:	mov	r0, r5
   15da8:	bl	15c68 <flatcc_builder_offset_vector_edit@@Base>
   15dac:	cmp	r7, #0
   15db0:	mov	r3, r0
   15db4:	beq	15de4 <flatcc_builder_create_union_vector@@Base+0xd4>
   15db8:	add	r2, r4, r7, lsl #3
   15dbc:	mov	r1, r4
   15dc0:	sub	lr, r8, #1
   15dc4:	sub	ip, r0, #4
   15dc8:	ldrb	r4, [r1]
   15dcc:	add	r1, r1, #8
   15dd0:	strb	r4, [lr, #1]!
   15dd4:	ldr	r4, [r1, #-4]
   15dd8:	cmp	r1, r2
   15ddc:	str	r4, [ip, #4]!
   15de0:	bne	15dc8 <flatcc_builder_create_union_vector@@Base+0xb8>
   15de4:	mov	r2, r8
   15de8:	mov	r1, r5
   15dec:	str	r7, [sp]
   15df0:	add	r0, sp, #8
   15df4:	bl	15c7c <flatcc_builder_create_union_vector_direct@@Base>
   15df8:	mov	r1, #0
   15dfc:	ldr	r0, [r5, #16]
   15e00:	ldr	r2, [r5, #20]
   15e04:	ldr	r7, [sp, #8]
   15e08:	ldr	r4, [sp, #12]
   15e0c:	bl	1202c <memset@plt>
   15e10:	ldr	r3, [r5, #32]
   15e14:	str	r7, [r6]
   15e18:	ldr	r0, [r5, #60]	; 0x3c
   15e1c:	str	r4, [r6, #4]
   15e20:	ldr	r2, [r5, #64]	; 0x40
   15e24:	ldr	ip, [r3]
   15e28:	ldmib	r3, {r1, lr}
   15e2c:	add	r0, r0, ip
   15e30:	sub	r2, r2, ip
   15e34:	str	r0, [r5, #16]
   15e38:	cmp	r2, r1
   15e3c:	ldrh	r0, [r5, #128]	; 0x80
   15e40:	movcs	r2, r1
   15e44:	str	lr, [r5, #20]
   15e48:	str	ip, [r5, #28]
   15e4c:	ldrh	ip, [r5, #130]	; 0x82
   15e50:	str	r2, [r5, #24]
   15e54:	ldr	r2, [r5, #156]	; 0x9c
   15e58:	str	r1, [r3, #4]
   15e5c:	cmp	r0, ip
   15e60:	sub	r0, r3, #36	; 0x24
   15e64:	strhcc	ip, [r5, #128]	; 0x80
   15e68:	ldrh	r1, [r3, #12]
   15e6c:	sub	r3, r2, #1
   15e70:	str	r0, [r5, #32]
   15e74:	strh	r1, [r5, #130]	; 0x82
   15e78:	str	r3, [r5, #156]	; 0x9c
   15e7c:	b	15d50 <flatcc_builder_create_union_vector@@Base+0x40>
   15e80:	add	r1, r1, #1
   15e84:	mvn	r2, #3
   15e88:	mov	r0, r5
   15e8c:	bl	12a3c <emit_test@@Base+0x60c>
   15e90:	cmp	r0, #0
   15e94:	beq	15d98 <flatcc_builder_create_union_vector@@Base+0x88>
   15e98:	b	15d44 <flatcc_builder_create_union_vector@@Base+0x34>

00015e9c <flatcc_builder_start_union_vector@@Base>:
   15e9c:	mov	r1, #4
   15ea0:	strd	r4, [sp, #-16]!
   15ea4:	mov	r4, r0
   15ea8:	str	r6, [sp, #8]
   15eac:	str	lr, [sp, #12]
   15eb0:	bl	12df8 <flatcc_builder_default_alloc@@Base+0x334>
   15eb4:	cmp	r0, #0
   15eb8:	bne	15f10 <flatcc_builder_start_union_vector@@Base+0x74>
   15ebc:	ldr	ip, [r4, #28]
   15ec0:	mov	lr, #8
   15ec4:	mov	r5, #7
   15ec8:	ldr	r3, [r4, #32]
   15ecc:	ldr	r2, [r4, #64]	; 0x40
   15ed0:	ldr	r1, [r4, #60]	; 0x3c
   15ed4:	strh	r5, [r3, #14]
   15ed8:	str	lr, [r3, #16]
   15edc:	sub	r2, r2, ip
   15ee0:	str	r0, [r3, #20]
   15ee4:	cmn	r2, #4
   15ee8:	mvnhi	r2, #3
   15eec:	add	r1, r1, ip
   15ef0:	str	r1, [r4, #16]
   15ef4:	str	r2, [r4, #24]
   15ef8:	mvn	r2, #3
   15efc:	str	r2, [r3, #4]
   15f00:	ldrd	r4, [sp]
   15f04:	ldr	r6, [sp, #8]
   15f08:	add	sp, sp, #12
   15f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f10:	mvn	r0, #0
   15f14:	b	15f00 <flatcc_builder_start_union_vector@@Base+0x64>

00015f18 <flatcc_builder_union_vector_edit@@Base>:
   15f18:	ldr	r0, [r0, #16]
   15f1c:	bx	lr

00015f20 <flatcc_builder_union_vector_count@@Base>:
   15f20:	ldr	r3, [r0, #32]
   15f24:	ldr	r0, [r3, #20]
   15f28:	bx	lr

00015f2c <flatcc_builder_end_union_vector@@Base>:
   15f2c:	ldr	r3, [r1, #32]
   15f30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f34:	ldrh	r3, [r3, #14]
   15f38:	strd	r6, [sp, #8]
   15f3c:	str	r8, [sp, #16]
   15f40:	str	lr, [sp, #20]
   15f44:	sub	sp, sp, #16
   15f48:	cmp	r3, #7
   15f4c:	bne	160ac <flatcc_builder_end_union_vector@@Base+0x180>
   15f50:	mov	r4, r1
   15f54:	mov	r6, r0
   15f58:	mov	r0, r1
   15f5c:	bl	15f20 <flatcc_builder_union_vector_count@@Base>
   15f60:	ldr	r8, [r4, #20]
   15f64:	lsl	r7, r0, #2
   15f68:	mov	r5, r0
   15f6c:	ldr	r3, [r4, #24]
   15f70:	add	r1, r7, r0
   15f74:	add	r1, r1, r8
   15f78:	cmp	r1, r3
   15f7c:	str	r1, [r4, #20]
   15f80:	bcs	16084 <flatcc_builder_end_union_vector@@Base+0x158>
   15f84:	ldr	r3, [r4, #16]
   15f88:	adds	r8, r3, r8
   15f8c:	beq	1609c <flatcc_builder_end_union_vector@@Base+0x170>
   15f90:	mov	r0, r4
   15f94:	add	r7, r8, r7
   15f98:	bl	15f18 <flatcc_builder_union_vector_edit@@Base>
   15f9c:	cmp	r5, #0
   15fa0:	beq	15fcc <flatcc_builder_end_union_vector@@Base+0xa0>
   15fa4:	add	r3, r0, r5, lsl #3
   15fa8:	sub	ip, r7, #1
   15fac:	sub	r1, r8, #4
   15fb0:	ldrb	lr, [r0]
   15fb4:	add	r0, r0, #8
   15fb8:	strb	lr, [ip, #1]!
   15fbc:	ldr	lr, [r0, #-4]
   15fc0:	cmp	r0, r3
   15fc4:	str	lr, [r1, #4]!
   15fc8:	bne	15fb0 <flatcc_builder_end_union_vector@@Base+0x84>
   15fcc:	mov	r3, r8
   15fd0:	mov	r2, r7
   15fd4:	str	r5, [sp]
   15fd8:	mov	r1, r4
   15fdc:	add	r0, sp, #8
   15fe0:	bl	15c7c <flatcc_builder_create_union_vector_direct@@Base>
   15fe4:	mov	r1, #0
   15fe8:	ldr	r0, [r4, #16]
   15fec:	ldr	r2, [r4, #20]
   15ff0:	ldr	r7, [sp, #8]
   15ff4:	ldr	r5, [sp, #12]
   15ff8:	bl	1202c <memset@plt>
   15ffc:	ldr	r3, [r4, #32]
   16000:	str	r7, [r6]
   16004:	ldr	r0, [r4, #60]	; 0x3c
   16008:	str	r5, [r6, #4]
   1600c:	ldr	r2, [r4, #64]	; 0x40
   16010:	ldr	ip, [r3]
   16014:	ldmib	r3, {r1, lr}
   16018:	add	r0, r0, ip
   1601c:	sub	r2, r2, ip
   16020:	str	r0, [r4, #16]
   16024:	cmp	r2, r1
   16028:	ldrh	r0, [r4, #128]	; 0x80
   1602c:	movcs	r2, r1
   16030:	str	lr, [r4, #20]
   16034:	str	ip, [r4, #28]
   16038:	ldrh	ip, [r4, #130]	; 0x82
   1603c:	str	r2, [r4, #24]
   16040:	ldr	r2, [r4, #156]	; 0x9c
   16044:	str	r1, [r3, #4]
   16048:	cmp	r0, ip
   1604c:	sub	r0, r3, #36	; 0x24
   16050:	strhcc	ip, [r4, #128]	; 0x80
   16054:	ldrh	r1, [r3, #12]
   16058:	sub	r3, r2, #1
   1605c:	str	r0, [r4, #32]
   16060:	strh	r1, [r4, #130]	; 0x82
   16064:	str	r3, [r4, #156]	; 0x9c
   16068:	mov	r0, r6
   1606c:	add	sp, sp, #16
   16070:	ldrd	r4, [sp]
   16074:	ldrd	r6, [sp, #8]
   16078:	ldr	r8, [sp, #16]
   1607c:	add	sp, sp, #20
   16080:	pop	{pc}		; (ldr pc, [sp], #4)
   16084:	add	r1, r1, #1
   16088:	mvn	r2, #3
   1608c:	mov	r0, r4
   16090:	bl	12a3c <emit_test@@Base+0x60c>
   16094:	cmp	r0, #0
   16098:	beq	15f84 <flatcc_builder_end_union_vector@@Base+0x58>
   1609c:	mov	r3, #0
   160a0:	str	r3, [r6]
   160a4:	str	r3, [r6, #4]
   160a8:	b	16068 <flatcc_builder_end_union_vector@@Base+0x13c>
   160ac:	ldr	r3, [pc, #28]	; 160d0 <flatcc_builder_end_union_vector@@Base+0x1a4>
   160b0:	movw	r2, #1617	; 0x651
   160b4:	ldr	r1, [pc, #24]	; 160d4 <flatcc_builder_end_union_vector@@Base+0x1a8>
   160b8:	ldr	r0, [pc, #24]	; 160d8 <flatcc_builder_end_union_vector@@Base+0x1ac>
   160bc:	add	r3, pc, r3
   160c0:	add	r3, r3, #968	; 0x3c8
   160c4:	add	r1, pc, r1
   160c8:	add	r0, pc, r0
   160cc:	bl	1205c <__assert_fail@plt>
   160d0:	andeq	r1, r0, ip, asr #20
   160d4:	muleq	r0, r4, r1
   160d8:	andeq	r2, r0, ip, lsr #9

000160dc <flatcc_builder_extend_union_vector@@Base>:
   160dc:	ldr	ip, [r0, #32]
   160e0:	strd	r4, [sp, #-16]!
   160e4:	ldr	r3, [ip, #20]
   160e8:	str	r6, [sp, #8]
   160ec:	str	lr, [sp, #12]
   160f0:	adds	r2, r1, r3
   160f4:	movcs	r3, #1
   160f8:	movcc	r3, #0
   160fc:	cmn	r2, #-536870911	; 0xe0000001
   16100:	movls	r4, #0
   16104:	movhi	r4, #1
   16108:	orrs	r4, r3, r4
   1610c:	bne	16164 <flatcc_builder_extend_union_vector@@Base+0x88>
   16110:	ldr	r6, [r0, #20]
   16114:	mov	r5, r0
   16118:	ldr	r3, [r0, #24]
   1611c:	str	r2, [ip, #20]
   16120:	add	r1, r6, r1, lsl #3
   16124:	cmp	r1, r3
   16128:	str	r1, [r0, #20]
   1612c:	bcs	16148 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16130:	ldr	r0, [r5, #16]
   16134:	add	r0, r0, r6
   16138:	ldrd	r4, [sp]
   1613c:	ldr	r6, [sp, #8]
   16140:	add	sp, sp, #12
   16144:	pop	{pc}		; (ldr pc, [sp], #4)
   16148:	add	r1, r1, #1
   1614c:	mvn	r2, #3
   16150:	bl	12a3c <emit_test@@Base+0x60c>
   16154:	cmp	r0, #0
   16158:	beq	16130 <flatcc_builder_extend_union_vector@@Base+0x54>
   1615c:	mov	r0, r4
   16160:	b	16138 <flatcc_builder_extend_union_vector@@Base+0x5c>
   16164:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>

00016168 <flatcc_builder_truncate_union_vector@@Base>:
   16168:	mov	r3, r0
   1616c:	ldr	r0, [r0, #32]
   16170:	str	r4, [sp, #-8]!
   16174:	ldrh	r2, [r0, #14]
   16178:	str	lr, [sp, #4]
   1617c:	cmp	r2, #7
   16180:	bne	161d0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   16184:	mov	lr, r1
   16188:	ldr	r1, [r0, #20]
   1618c:	cmp	r1, lr
   16190:	bcc	161f4 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   16194:	ldr	r2, [r0, #16]
   16198:	sub	ip, r1, lr
   1619c:	mov	r1, #0
   161a0:	str	ip, [r0, #20]
   161a4:	ldr	r0, [r3, #16]
   161a8:	ldr	ip, [r3, #20]
   161ac:	mul	r2, r2, lr
   161b0:	sub	ip, ip, r2
   161b4:	add	r0, r0, ip
   161b8:	str	ip, [r3, #20]
   161bc:	bl	1202c <memset@plt>
   161c0:	ldr	r4, [sp]
   161c4:	add	sp, sp, #4
   161c8:	mov	r0, #0
   161cc:	pop	{pc}		; (ldr pc, [sp], #4)
   161d0:	ldr	r3, [pc, #64]	; 16218 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   161d4:	movw	r2, #1665	; 0x681
   161d8:	ldr	r1, [pc, #60]	; 1621c <flatcc_builder_truncate_union_vector@@Base+0xb4>
   161dc:	ldr	r0, [pc, #60]	; 16220 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   161e0:	add	r3, pc, r3
   161e4:	add	r3, r3, #1000	; 0x3e8
   161e8:	add	r1, pc, r1
   161ec:	add	r0, pc, r0
   161f0:	bl	1205c <__assert_fail@plt>
   161f4:	ldr	r3, [pc, #40]	; 16224 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   161f8:	movw	r2, #1666	; 0x682
   161fc:	ldr	r1, [pc, #36]	; 16228 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   16200:	ldr	r0, [pc, #36]	; 1622c <flatcc_builder_truncate_union_vector@@Base+0xc4>
   16204:	add	r3, pc, r3
   16208:	add	r3, r3, #1000	; 0x3e8
   1620c:	add	r1, pc, r1
   16210:	add	r0, pc, r0
   16214:	bl	1205c <__assert_fail@plt>
   16218:	andeq	r1, r0, r8, lsr #18
   1621c:	andeq	r2, r0, r0, ror r0
   16220:	andeq	r2, r0, r8, lsl #7
   16224:	andeq	r1, r0, r4, lsl #18
   16228:	andeq	r2, r0, ip, asr #32
   1622c:	andeq	r2, r0, r8, lsl #5

00016230 <flatcc_builder_union_vector_push@@Base>:
   16230:	strd	r4, [sp, #-20]!	; 0xffffffec
   16234:	strd	r6, [sp, #8]
   16238:	str	lr, [sp, #16]
   1623c:	sub	sp, sp, #12
   16240:	add	r3, sp, #8
   16244:	stmdb	r3, {r1, r2}
   16248:	ldr	r2, [r0, #32]
   1624c:	ldrh	r3, [r2, #14]
   16250:	cmp	r3, #7
   16254:	bne	162cc <flatcc_builder_union_vector_push@@Base+0x9c>
   16258:	ldr	r3, [r2, #20]
   1625c:	cmn	r3, #-536870911	; 0xe0000001
   16260:	beq	162c4 <flatcc_builder_union_vector_push@@Base+0x94>
   16264:	ldr	r5, [r0, #20]
   16268:	add	r3, r3, #1
   1626c:	mov	r4, r0
   16270:	ldr	r1, [r0, #24]
   16274:	str	r3, [r2, #20]
   16278:	add	r3, r5, #8
   1627c:	cmp	r3, r1
   16280:	str	r3, [r0, #20]
   16284:	bcs	162b0 <flatcc_builder_union_vector_push@@Base+0x80>
   16288:	ldr	r3, [r4, #16]
   1628c:	adds	r0, r3, r5
   16290:	beq	1629c <flatcc_builder_union_vector_push@@Base+0x6c>
   16294:	ldrd	r6, [sp]
   16298:	strd	r6, [r3, r5]
   1629c:	add	sp, sp, #12
   162a0:	ldrd	r4, [sp]
   162a4:	ldrd	r6, [sp, #8]
   162a8:	add	sp, sp, #16
   162ac:	pop	{pc}		; (ldr pc, [sp], #4)
   162b0:	mvn	r2, #3
   162b4:	add	r1, r5, #9
   162b8:	bl	12a3c <emit_test@@Base+0x60c>
   162bc:	cmp	r0, #0
   162c0:	beq	16288 <flatcc_builder_union_vector_push@@Base+0x58>
   162c4:	mov	r0, #0
   162c8:	b	1629c <flatcc_builder_union_vector_push@@Base+0x6c>
   162cc:	ldr	r3, [pc, #28]	; 162f0 <flatcc_builder_union_vector_push@@Base+0xc0>
   162d0:	movw	r2, #1677	; 0x68d
   162d4:	ldr	r1, [pc, #24]	; 162f4 <flatcc_builder_union_vector_push@@Base+0xc4>
   162d8:	ldr	r0, [pc, #24]	; 162f8 <flatcc_builder_union_vector_push@@Base+0xc8>
   162dc:	add	r3, pc, r3
   162e0:	add	r3, r3, #1040	; 0x410
   162e4:	add	r1, pc, r1
   162e8:	add	r0, pc, r0
   162ec:	bl	1205c <__assert_fail@plt>
   162f0:	andeq	r1, r0, ip, lsr #16
   162f4:	andeq	r1, r0, r4, ror pc
   162f8:	andeq	r2, r0, ip, lsl #5

000162fc <flatcc_builder_append_union_vector@@Base>:
   162fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16300:	mov	r4, r1
   16304:	ldr	r1, [r0, #32]
   16308:	ldrh	r3, [r1, #14]
   1630c:	strd	r6, [sp, #8]
   16310:	str	r8, [sp, #16]
   16314:	str	lr, [sp, #20]
   16318:	cmp	r3, #7
   1631c:	bne	163bc <flatcc_builder_append_union_vector@@Base+0xc0>
   16320:	ldr	r3, [r1, #20]
   16324:	adds	r3, r2, r3
   16328:	movcs	lr, #1
   1632c:	movcc	lr, #0
   16330:	cmn	r3, #-536870911	; 0xe0000001
   16334:	movls	ip, #0
   16338:	movhi	ip, #1
   1633c:	orrs	r8, lr, ip
   16340:	bne	163e4 <flatcc_builder_append_union_vector@@Base+0xe8>
   16344:	ldr	r7, [r0, #20]
   16348:	lsl	r6, r2, #3
   1634c:	mov	r5, r0
   16350:	str	r3, [r1, #20]
   16354:	ldr	r3, [r0, #24]
   16358:	add	r1, r6, r7
   1635c:	cmp	r1, r3
   16360:	str	r1, [r0, #20]
   16364:	bcs	163a0 <flatcc_builder_append_union_vector@@Base+0xa4>
   16368:	ldr	r3, [r5, #16]
   1636c:	adds	r3, r3, r7
   16370:	beq	16388 <flatcc_builder_append_union_vector@@Base+0x8c>
   16374:	mov	r0, r3
   16378:	mov	r2, r6
   1637c:	mov	r1, r4
   16380:	bl	11fa8 <memcpy@plt>
   16384:	mov	r3, r0
   16388:	ldrd	r4, [sp]
   1638c:	mov	r0, r3
   16390:	ldrd	r6, [sp, #8]
   16394:	ldr	r8, [sp, #16]
   16398:	add	sp, sp, #20
   1639c:	pop	{pc}		; (ldr pc, [sp], #4)
   163a0:	add	r1, r1, #1
   163a4:	mvn	r2, #3
   163a8:	bl	12a3c <emit_test@@Base+0x60c>
   163ac:	cmp	r0, #0
   163b0:	beq	16368 <flatcc_builder_append_union_vector@@Base+0x6c>
   163b4:	mov	r3, r8
   163b8:	b	16388 <flatcc_builder_append_union_vector@@Base+0x8c>
   163bc:	ldr	r3, [pc, #36]	; 163e8 <flatcc_builder_append_union_vector@@Base+0xec>
   163c0:	movw	r2, #1692	; 0x69c
   163c4:	ldr	r1, [pc, #32]	; 163ec <flatcc_builder_append_union_vector@@Base+0xf0>
   163c8:	ldr	r0, [pc, #32]	; 163f0 <flatcc_builder_append_union_vector@@Base+0xf4>
   163cc:	add	r3, pc, r3
   163d0:	add	r3, r3, #1072	; 0x430
   163d4:	add	r1, pc, r1
   163d8:	add	r3, r3, #4
   163dc:	add	r0, pc, r0
   163e0:	bl	1205c <__assert_fail@plt>
   163e4:	bl	12dc0 <flatcc_builder_default_alloc@@Base+0x2fc>
   163e8:	andeq	r1, r0, ip, lsr r7
   163ec:	andeq	r1, r0, r4, lsl #29
   163f0:	muleq	r0, r8, r1

000163f4 <flatcc_builder_create_string@@Base>:
   163f4:	ldr	ip, [r0, #136]	; 0x88
   163f8:	cmp	r2, #0
   163fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   16400:	mov	r5, #4
   16404:	mov	r4, r0
   16408:	strd	r6, [sp, #8]
   1640c:	mov	r0, #1
   16410:	moveq	r7, #2
   16414:	str	lr, [sp, #16]
   16418:	sub	sp, sp, #92	; 0x5c
   1641c:	moveq	r1, r0
   16420:	add	r3, sp, #12
   16424:	ldr	lr, [pc, #204]	; 164f8 <flatcc_builder_create_string@@Base+0x104>
   16428:	str	r2, [sp, #12]
   1642c:	str	r3, [sp, #24]
   16430:	sub	r3, ip, r2
   16434:	sub	r3, r3, #1
   16438:	str	r5, [sp, #28]
   1643c:	and	r3, r3, #3
   16440:	add	lr, pc, lr
   16444:	add	r3, r3, r0
   16448:	beq	16460 <flatcc_builder_create_string@@Base+0x6c>
   1644c:	add	r5, r2, r5
   16450:	mov	r7, #3
   16454:	str	r1, [sp, #32]
   16458:	mov	r1, #2
   1645c:	str	r2, [sp, #36]	; 0x24
   16460:	ldr	r6, [pc, #148]	; 164fc <flatcc_builder_create_string@@Base+0x108>
   16464:	add	r0, r3, r5
   16468:	add	r2, sp, #88	; 0x58
   1646c:	add	r1, r1, #1
   16470:	sub	r5, ip, r0
   16474:	add	r1, r2, r1, lsl #3
   16478:	str	r0, [sp, #16]
   1647c:	cmp	ip, r5
   16480:	ldr	r2, [lr, r6]
   16484:	str	r7, [sp, #20]
   16488:	strd	r2, [r1, #-72]	; 0xffffffb8
   1648c:	ble	164d0 <flatcc_builder_create_string@@Base+0xdc>
   16490:	mov	r2, r7
   16494:	mov	r3, r5
   16498:	str	r0, [sp]
   1649c:	add	r1, sp, #24
   164a0:	ldr	r0, [r4, #36]	; 0x24
   164a4:	ldr	r6, [r4, #44]	; 0x2c
   164a8:	blx	r6
   164ac:	cmp	r0, #0
   164b0:	bne	164f4 <flatcc_builder_create_string@@Base+0x100>
   164b4:	mov	r0, r5
   164b8:	str	r5, [r4, #136]	; 0x88
   164bc:	add	sp, sp, #92	; 0x5c
   164c0:	ldrd	r4, [sp]
   164c4:	ldrd	r6, [sp, #8]
   164c8:	add	sp, sp, #16
   164cc:	pop	{pc}		; (ldr pc, [sp], #4)
   164d0:	ldr	r3, [pc, #40]	; 16500 <flatcc_builder_create_string@@Base+0x10c>
   164d4:	movw	r2, #647	; 0x287
   164d8:	ldr	r1, [pc, #36]	; 16504 <flatcc_builder_create_string@@Base+0x110>
   164dc:	ldr	r0, [pc, #36]	; 16508 <flatcc_builder_create_string@@Base+0x114>
   164e0:	add	r3, pc, r3
   164e4:	add	r3, r3, #44	; 0x2c
   164e8:	add	r1, pc, r1
   164ec:	add	r0, pc, r0
   164f0:	bl	1205c <__assert_fail@plt>
   164f4:	bl	12d88 <flatcc_builder_default_alloc@@Base+0x2c4>
   164f8:			; <UNDEFINED> instruction: 0x00012bb8
   164fc:	andeq	r0, r0, r4, asr r0
   16500:	andeq	r1, r0, r8, lsr #12
   16504:	andeq	r1, r0, r0, ror sp
   16508:	strdeq	r1, [r0], -r4

0001650c <flatcc_builder_create_string_str@@Base>:
   1650c:	strd	r4, [sp, #-16]!
   16510:	mov	r5, r0
   16514:	mov	r0, r1
   16518:	mov	r4, r1
   1651c:	str	r6, [sp, #8]
   16520:	str	lr, [sp, #12]
   16524:	bl	12008 <strlen@plt>
   16528:	mov	r2, r0
   1652c:	mov	r1, r4
   16530:	ldr	r6, [sp, #8]
   16534:	mov	r0, r5
   16538:	ldrd	r4, [sp]
   1653c:	ldr	lr, [sp, #12]
   16540:	add	sp, sp, #16
   16544:	b	163f4 <flatcc_builder_create_string@@Base>

00016548 <flatcc_builder_create_string_strn@@Base>:
   16548:	strd	r4, [sp, #-16]!
   1654c:	mov	r4, r1
   16550:	mov	r1, #0
   16554:	str	r6, [sp, #8]
   16558:	mov	r6, r0
   1655c:	mov	r0, r4
   16560:	mov	r5, r2
   16564:	str	lr, [sp, #12]
   16568:	bl	12038 <memchr@plt>
   1656c:	cmp	r0, #0
   16570:	mov	r1, r4
   16574:	ldr	lr, [sp, #12]
   16578:	subne	r5, r0, r4
   1657c:	mov	r0, r6
   16580:	mov	r2, r5
   16584:	ldrd	r4, [sp]
   16588:	ldr	r6, [sp, #8]
   1658c:	add	sp, sp, #16
   16590:	b	163f4 <flatcc_builder_create_string@@Base>

00016594 <flatcc_builder_end_string@@Base>:
   16594:	ldr	r3, [r0, #32]
   16598:	strd	r4, [sp, #-16]!
   1659c:	ldrh	r2, [r3, #14]
   165a0:	str	r6, [sp, #8]
   165a4:	str	lr, [sp, #12]
   165a8:	cmp	r2, #6
   165ac:	bne	16684 <flatcc_builder_end_string@@Base+0xf0>
   165b0:	ldr	r2, [r3, #20]
   165b4:	mov	r4, r0
   165b8:	ldr	r3, [r0, #20]
   165bc:	cmp	r2, r3
   165c0:	bne	1665c <flatcc_builder_end_string@@Base+0xc8>
   165c4:	ldr	r1, [r0, #16]
   165c8:	bl	163f4 <flatcc_builder_create_string@@Base>
   165cc:	subs	r5, r0, #0
   165d0:	beq	16648 <flatcc_builder_end_string@@Base+0xb4>
   165d4:	mov	r1, #0
   165d8:	ldr	r0, [r4, #16]
   165dc:	ldr	r2, [r4, #20]
   165e0:	bl	1202c <memset@plt>
   165e4:	ldr	r3, [r4, #32]
   165e8:	ldr	r0, [r4, #60]	; 0x3c
   165ec:	ldr	r2, [r4, #64]	; 0x40
   165f0:	ldr	ip, [r3]
   165f4:	ldmib	r3, {r1, lr}
   165f8:	add	r0, r0, ip
   165fc:	sub	r2, r2, ip
   16600:	str	r0, [r4, #16]
   16604:	cmp	r2, r1
   16608:	ldrh	r0, [r4, #128]	; 0x80
   1660c:	movcs	r2, r1
   16610:	str	lr, [r4, #20]
   16614:	str	ip, [r4, #28]
   16618:	ldrh	ip, [r4, #130]	; 0x82
   1661c:	str	r2, [r4, #24]
   16620:	ldr	r2, [r4, #156]	; 0x9c
   16624:	str	r1, [r3, #4]
   16628:	cmp	r0, ip
   1662c:	sub	r0, r3, #36	; 0x24
   16630:	strhcc	ip, [r4, #128]	; 0x80
   16634:	ldrh	r1, [r3, #12]
   16638:	sub	r3, r2, #1
   1663c:	str	r0, [r4, #32]
   16640:	strh	r1, [r4, #130]	; 0x82
   16644:	str	r3, [r4, #156]	; 0x9c
   16648:	mov	r0, r5
   1664c:	ldrd	r4, [sp]
   16650:	ldr	r6, [sp, #8]
   16654:	add	sp, sp, #12
   16658:	pop	{pc}		; (ldr pc, [sp], #4)
   1665c:	ldr	r3, [pc, #72]	; 166ac <flatcc_builder_end_string@@Base+0x118>
   16660:	movw	r2, #1733	; 0x6c5
   16664:	ldr	r1, [pc, #68]	; 166b0 <flatcc_builder_end_string@@Base+0x11c>
   16668:	ldr	r0, [pc, #68]	; 166b4 <flatcc_builder_end_string@@Base+0x120>
   1666c:	add	r3, pc, r3
   16670:	add	r3, r3, #1104	; 0x450
   16674:	add	r1, pc, r1
   16678:	add	r3, r3, #8
   1667c:	add	r0, pc, r0
   16680:	bl	1205c <__assert_fail@plt>
   16684:	ldr	r3, [pc, #44]	; 166b8 <flatcc_builder_end_string@@Base+0x124>
   16688:	movw	r2, #1732	; 0x6c4
   1668c:	ldr	r1, [pc, #40]	; 166bc <flatcc_builder_end_string@@Base+0x128>
   16690:	ldr	r0, [pc, #40]	; 166c0 <flatcc_builder_end_string@@Base+0x12c>
   16694:	add	r3, pc, r3
   16698:	add	r3, r3, #1104	; 0x450
   1669c:	add	r1, pc, r1
   166a0:	add	r3, r3, #8
   166a4:	add	r0, pc, r0
   166a8:	bl	1205c <__assert_fail@plt>
   166ac:	muleq	r0, ip, r4
   166b0:	andeq	r1, r0, r4, ror #23
   166b4:	andeq	r1, r0, ip, lsr #30
   166b8:	andeq	r1, r0, r4, ror r4
   166bc:			; <UNDEFINED> instruction: 0x00001bbc
   166c0:	andeq	r1, r0, r4, lsr #27

000166c4 <flatcc_builder_string_edit@@Base>:
   166c4:	ldr	r0, [r0, #16]
   166c8:	bx	lr

000166cc <flatcc_builder_string_len@@Base>:
   166cc:	ldr	r3, [r0, #32]
   166d0:	ldr	r0, [r3, #20]
   166d4:	bx	lr

000166d8 <flatcc_builder_table_add@@Base>:
   166d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   166dc:	mov	r4, r0
   166e0:	ldr	r0, [r0, #32]
   166e4:	ldrh	r0, [r0, #14]
   166e8:	strd	r6, [sp, #8]
   166ec:	strd	r8, [sp, #16]
   166f0:	str	sl, [sp, #24]
   166f4:	str	lr, [sp, #28]
   166f8:	cmp	r0, #3
   166fc:	bne	1682c <flatcc_builder_table_add@@Base+0x154>
   16700:	movw	r0, #32764	; 0x7ffc
   16704:	cmp	r1, r0
   16708:	bhi	16804 <flatcc_builder_table_add@@Base+0x12c>
   1670c:	ldrh	r0, [r4, #130]	; 0x82
   16710:	lsl	r8, r1, #1
   16714:	ldr	lr, [r4, #4]
   16718:	cmp	r0, r3
   1671c:	strhcc	r3, [r4, #130]	; 0x82
   16720:	ldrh	r6, [lr, r8]
   16724:	add	lr, lr, r8
   16728:	cmp	r6, #0
   1672c:	bne	167dc <flatcc_builder_table_add@@Base+0x104>
   16730:	ldr	ip, [r4, #12]
   16734:	movw	r9, #31153	; 0x79b1
   16738:	movt	r9, #40503	; 0x9e37
   1673c:	uxth	r7, r1
   16740:	sub	r5, r3, #1
   16744:	ldr	r0, [r4, #20]
   16748:	rsb	r3, r3, #0
   1674c:	eor	ip, ip, r1
   16750:	ldr	r1, [r4, #24]
   16754:	mul	ip, r9, ip
   16758:	add	r5, r5, r0
   1675c:	and	r5, r5, r3
   16760:	eor	ip, ip, r2
   16764:	add	r2, r2, r5
   16768:	cmp	r2, r1
   1676c:	mul	ip, r9, ip
   16770:	str	ip, [r4, #12]
   16774:	str	r2, [r4, #20]
   16778:	bcs	167b4 <flatcc_builder_table_add@@Base+0xdc>
   1677c:	add	r3, r5, #4
   16780:	ldr	r0, [r4, #16]
   16784:	strh	r3, [lr]
   16788:	ldrh	r3, [r4, #8]
   1678c:	add	r0, r0, r5
   16790:	cmp	r3, r7
   16794:	addls	r7, r7, #1
   16798:	strhls	r7, [r4, #8]
   1679c:	ldrd	r4, [sp]
   167a0:	ldrd	r6, [sp, #8]
   167a4:	ldrd	r8, [sp, #16]
   167a8:	ldr	sl, [sp, #24]
   167ac:	add	sp, sp, #28
   167b0:	pop	{pc}		; (ldr pc, [sp], #4)
   167b4:	add	r1, r2, #1
   167b8:	mov	r0, r4
   167bc:	movw	r2, #65532	; 0xfffc
   167c0:	bl	12a3c <emit_test@@Base+0x60c>
   167c4:	cmp	r0, #0
   167c8:	movne	r0, r6
   167cc:	bne	1679c <flatcc_builder_table_add@@Base+0xc4>
   167d0:	ldr	lr, [r4, #4]
   167d4:	add	lr, lr, r8
   167d8:	b	1677c <flatcc_builder_table_add@@Base+0xa4>
   167dc:	ldr	r3, [pc, #112]	; 16854 <flatcc_builder_table_add@@Base+0x17c>
   167e0:	movw	r2, #1784	; 0x6f8
   167e4:	ldr	r1, [pc, #108]	; 16858 <flatcc_builder_table_add@@Base+0x180>
   167e8:	ldr	r0, [pc, #108]	; 1685c <flatcc_builder_table_add@@Base+0x184>
   167ec:	add	r3, pc, r3
   167f0:	add	r3, r3, #1136	; 0x470
   167f4:	add	r1, pc, r1
   167f8:	add	r3, r3, #4
   167fc:	add	r0, pc, r0
   16800:	bl	1205c <__assert_fail@plt>
   16804:	ldr	r3, [pc, #84]	; 16860 <flatcc_builder_table_add@@Base+0x188>
   16808:	movw	r2, #1774	; 0x6ee
   1680c:	ldr	r1, [pc, #80]	; 16864 <flatcc_builder_table_add@@Base+0x18c>
   16810:	ldr	r0, [pc, #80]	; 16868 <flatcc_builder_table_add@@Base+0x190>
   16814:	add	r3, pc, r3
   16818:	add	r3, r3, #1136	; 0x470
   1681c:	add	r1, pc, r1
   16820:	add	r3, r3, #4
   16824:	add	r0, pc, r0
   16828:	bl	1205c <__assert_fail@plt>
   1682c:	ldr	r3, [pc, #56]	; 1686c <flatcc_builder_table_add@@Base+0x194>
   16830:	movw	r2, #1773	; 0x6ed
   16834:	ldr	r1, [pc, #52]	; 16870 <flatcc_builder_table_add@@Base+0x198>
   16838:	ldr	r0, [pc, #52]	; 16874 <flatcc_builder_table_add@@Base+0x19c>
   1683c:	add	r3, pc, r3
   16840:	add	r3, r3, #1136	; 0x470
   16844:	add	r1, pc, r1
   16848:	add	r3, r3, #4
   1684c:	add	r0, pc, r0
   16850:	bl	1205c <__assert_fail@plt>
   16854:	andeq	r1, r0, ip, lsl r3
   16858:	andeq	r1, r0, r4, ror #20
   1685c:	andeq	r1, r0, r4, ror #21
   16860:	strdeq	r1, [r0], -r4
   16864:	andeq	r1, r0, ip, lsr sl
   16868:	andeq	r1, r0, r8, lsr #27
   1686c:	andeq	r1, r0, ip, asr #5
   16870:	andeq	r1, r0, r4, lsl sl
   16874:	andeq	r1, r0, r8, ror #25

00016878 <flatcc_builder_table_edit@@Base>:
   16878:	ldr	r2, [r0, #32]
   1687c:	ldrh	r2, [r2, #14]
   16880:	cmp	r2, #3
   16884:	bne	1689c <flatcc_builder_table_edit@@Base+0x24>
   16888:	ldr	r3, [r0, #20]
   1688c:	ldr	r0, [r0, #16]
   16890:	sub	r3, r3, r1
   16894:	add	r0, r0, r3
   16898:	bx	lr
   1689c:	ldr	r3, [pc, #36]	; 168c8 <flatcc_builder_table_edit@@Base+0x50>
   168a0:	movw	r2, #1794	; 0x702
   168a4:	str	r4, [sp, #-8]!
   168a8:	ldr	r1, [pc, #28]	; 168cc <flatcc_builder_table_edit@@Base+0x54>
   168ac:	str	lr, [sp, #4]
   168b0:	ldr	r0, [pc, #24]	; 168d0 <flatcc_builder_table_edit@@Base+0x58>
   168b4:	add	r3, pc, r3
   168b8:	add	r3, r3, #1168	; 0x490
   168bc:	add	r1, pc, r1
   168c0:	add	r0, pc, r0
   168c4:	bl	1205c <__assert_fail@plt>
   168c8:	andeq	r1, r0, r4, asr r2
   168cc:	muleq	r0, ip, r9
   168d0:	andeq	r1, r0, r4, ror ip

000168d4 <flatcc_builder_table_add_copy@@Base>:
   168d4:	strd	r4, [sp, #-16]!
   168d8:	mov	r4, r3
   168dc:	ldrh	r3, [sp, #16]
   168e0:	str	r6, [sp, #8]
   168e4:	mov	r6, r2
   168e8:	mov	r2, r4
   168ec:	str	lr, [sp, #12]
   168f0:	bl	166d8 <flatcc_builder_table_add@@Base>
   168f4:	subs	r5, r0, #0
   168f8:	beq	16908 <flatcc_builder_table_add_copy@@Base+0x34>
   168fc:	mov	r2, r4
   16900:	mov	r1, r6
   16904:	bl	11fa8 <memcpy@plt>
   16908:	mov	r0, r5
   1690c:	ldrd	r4, [sp]
   16910:	ldr	r6, [sp, #8]
   16914:	add	sp, sp, #12
   16918:	pop	{pc}		; (ldr pc, [sp], #4)

0001691c <flatcc_builder_table_add_offset@@Base>:
   1691c:	ldr	r3, [r0, #32]
   16920:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16924:	ldrh	r3, [r3, #14]
   16928:	strd	r6, [sp, #8]
   1692c:	str	r8, [sp, #16]
   16930:	str	lr, [sp, #20]
   16934:	cmp	r3, #3
   16938:	bne	16a60 <flatcc_builder_table_add_offset@@Base+0x144>
   1693c:	movw	r3, #32764	; 0x7ffc
   16940:	cmp	r1, r3
   16944:	bhi	16a38 <flatcc_builder_table_add_offset@@Base+0x11c>
   16948:	ldr	ip, [r0, #4]
   1694c:	lsl	r8, r1, #1
   16950:	mov	r4, r0
   16954:	ldrh	r6, [ip, r8]
   16958:	add	ip, ip, r8
   1695c:	cmp	r6, #0
   16960:	bne	16a10 <flatcc_builder_table_add_offset@@Base+0xf4>
   16964:	ldr	r3, [r0, #12]
   16968:	movw	r2, #31153	; 0x79b1
   1696c:	movt	r2, #40503	; 0x9e37
   16970:	uxth	r7, r1
   16974:	ldr	r5, [r0, #20]
   16978:	ldr	lr, [r0, #24]
   1697c:	eor	r3, r3, r1
   16980:	mul	r3, r2, r3
   16984:	add	r5, r5, #3
   16988:	bic	r5, r5, #3
   1698c:	add	r1, r5, #4
   16990:	eor	r3, r3, #4
   16994:	cmp	r1, lr
   16998:	str	r1, [r0, #20]
   1699c:	mul	r3, r2, r3
   169a0:	str	r3, [r0, #12]
   169a4:	bhi	169f0 <flatcc_builder_table_add_offset@@Base+0xd4>
   169a8:	uxth	r2, r5
   169ac:	ldr	r0, [r4, #16]
   169b0:	add	r3, r2, #4
   169b4:	strh	r3, [ip]
   169b8:	ldrh	r3, [r4, #8]
   169bc:	add	r0, r0, r5
   169c0:	cmp	r3, r7
   169c4:	ldr	r3, [r4]
   169c8:	addls	r7, r7, #1
   169cc:	strhls	r7, [r4, #8]
   169d0:	add	r1, r3, #2
   169d4:	str	r1, [r4]
   169d8:	strh	r2, [r3]
   169dc:	ldrd	r4, [sp]
   169e0:	ldrd	r6, [sp, #8]
   169e4:	ldr	r8, [sp, #16]
   169e8:	add	sp, sp, #20
   169ec:	pop	{pc}		; (ldr pc, [sp], #4)
   169f0:	movw	r2, #65532	; 0xfffc
   169f4:	bl	12a3c <emit_test@@Base+0x60c>
   169f8:	cmp	r0, #0
   169fc:	movne	r0, r6
   16a00:	bne	169dc <flatcc_builder_table_add_offset@@Base+0xc0>
   16a04:	ldr	ip, [r4, #4]
   16a08:	add	ip, ip, r8
   16a0c:	b	169a8 <flatcc_builder_table_add_offset@@Base+0x8c>
   16a10:	ldr	r3, [pc, #112]	; 16a88 <flatcc_builder_table_add_offset@@Base+0x16c>
   16a14:	movw	r2, #1819	; 0x71b
   16a18:	ldr	r1, [pc, #108]	; 16a8c <flatcc_builder_table_add_offset@@Base+0x170>
   16a1c:	ldr	r0, [pc, #108]	; 16a90 <flatcc_builder_table_add_offset@@Base+0x174>
   16a20:	add	r3, pc, r3
   16a24:	add	r3, r3, #1184	; 0x4a0
   16a28:	add	r1, pc, r1
   16a2c:	add	r3, r3, #12
   16a30:	add	r0, pc, r0
   16a34:	bl	1205c <__assert_fail@plt>
   16a38:	ldr	r3, [pc, #84]	; 16a94 <flatcc_builder_table_add_offset@@Base+0x178>
   16a3c:	movw	r2, #1812	; 0x714
   16a40:	ldr	r1, [pc, #80]	; 16a98 <flatcc_builder_table_add_offset@@Base+0x17c>
   16a44:	ldr	r0, [pc, #80]	; 16a9c <flatcc_builder_table_add_offset@@Base+0x180>
   16a48:	add	r3, pc, r3
   16a4c:	add	r3, r3, #1184	; 0x4a0
   16a50:	add	r1, pc, r1
   16a54:	add	r3, r3, #12
   16a58:	add	r0, pc, r0
   16a5c:	bl	1205c <__assert_fail@plt>
   16a60:	ldr	r3, [pc, #56]	; 16aa0 <flatcc_builder_table_add_offset@@Base+0x184>
   16a64:	movw	r2, #1811	; 0x713
   16a68:	ldr	r1, [pc, #52]	; 16aa4 <flatcc_builder_table_add_offset@@Base+0x188>
   16a6c:	ldr	r0, [pc, #52]	; 16aa8 <flatcc_builder_table_add_offset@@Base+0x18c>
   16a70:	add	r3, pc, r3
   16a74:	add	r3, r3, #1184	; 0x4a0
   16a78:	add	r1, pc, r1
   16a7c:	add	r3, r3, #12
   16a80:	add	r0, pc, r0
   16a84:	bl	1205c <__assert_fail@plt>
   16a88:	andeq	r1, r0, r8, ror #1
   16a8c:	andeq	r1, r0, r0, lsr r8
   16a90:			; <UNDEFINED> instruction: 0x000018b0
   16a94:	andeq	r1, r0, r0, asr #1
   16a98:	andeq	r1, r0, r8, lsl #16
   16a9c:	andeq	r1, r0, r4, ror fp
   16aa0:	muleq	r0, r8, r0
   16aa4:	andeq	r1, r0, r0, ror #15
   16aa8:			; <UNDEFINED> instruction: 0x00001ab4

00016aac <flatcc_builder_table_add_union@@Base>:
   16aac:	strd	r4, [sp, #-20]!	; 0xffffffec
   16ab0:	strd	r6, [sp, #8]
   16ab4:	str	lr, [sp, #16]
   16ab8:	sub	sp, sp, #12
   16abc:	add	ip, sp, #8
   16ac0:	stmdb	ip, {r2, r3}
   16ac4:	ldr	r3, [r0, #32]
   16ac8:	ldrb	r5, [sp]
   16acc:	ldr	r6, [sp, #4]
   16ad0:	ldrh	r3, [r3, #14]
   16ad4:	cmp	r3, #3
   16ad8:	bne	16b6c <flatcc_builder_table_add_union@@Base+0xc0>
   16adc:	cmp	r5, #0
   16ae0:	mov	r4, r0
   16ae4:	mov	r7, r1
   16ae8:	beq	16b3c <flatcc_builder_table_add_union@@Base+0x90>
   16aec:	cmp	r6, #0
   16af0:	beq	16b04 <flatcc_builder_table_add_union@@Base+0x58>
   16af4:	bl	1691c <flatcc_builder_table_add_offset@@Base>
   16af8:	cmp	r0, #0
   16afc:	strne	r6, [r0]
   16b00:	beq	16bbc <flatcc_builder_table_add_union@@Base+0x110>
   16b04:	mov	r3, #1
   16b08:	sub	r1, r7, #1
   16b0c:	mov	r2, r3
   16b10:	mov	r0, r4
   16b14:	bl	166d8 <flatcc_builder_table_add@@Base>
   16b18:	subs	r3, r0, #0
   16b1c:	beq	16b94 <flatcc_builder_table_add_union@@Base+0xe8>
   16b20:	mov	r0, #0
   16b24:	strb	r5, [r3]
   16b28:	add	sp, sp, #12
   16b2c:	ldrd	r4, [sp]
   16b30:	ldrd	r6, [sp, #8]
   16b34:	add	sp, sp, #16
   16b38:	pop	{pc}		; (ldr pc, [sp], #4)
   16b3c:	cmp	r6, #0
   16b40:	beq	16b04 <flatcc_builder_table_add_union@@Base+0x58>
   16b44:	ldr	r3, [pc, #152]	; 16be4 <flatcc_builder_table_add_union@@Base+0x138>
   16b48:	movw	r2, #1519	; 0x5ef
   16b4c:	ldr	r1, [pc, #148]	; 16be8 <flatcc_builder_table_add_union@@Base+0x13c>
   16b50:	ldr	r0, [pc, #148]	; 16bec <flatcc_builder_table_add_union@@Base+0x140>
   16b54:	add	r3, pc, r3
   16b58:	add	r3, r3, #1216	; 0x4c0
   16b5c:	add	r1, pc, r1
   16b60:	add	r3, r3, #12
   16b64:	add	r0, pc, r0
   16b68:	bl	1205c <__assert_fail@plt>
   16b6c:	ldr	r3, [pc, #124]	; 16bf0 <flatcc_builder_table_add_union@@Base+0x144>
   16b70:	movw	r2, #1518	; 0x5ee
   16b74:	ldr	r1, [pc, #120]	; 16bf4 <flatcc_builder_table_add_union@@Base+0x148>
   16b78:	ldr	r0, [pc, #120]	; 16bf8 <flatcc_builder_table_add_union@@Base+0x14c>
   16b7c:	add	r3, pc, r3
   16b80:	add	r3, r3, #1216	; 0x4c0
   16b84:	add	r1, pc, r1
   16b88:	add	r3, r3, #12
   16b8c:	add	r0, pc, r0
   16b90:	bl	1205c <__assert_fail@plt>
   16b94:	ldr	r3, [pc, #96]	; 16bfc <flatcc_builder_table_add_union@@Base+0x150>
   16b98:	movw	r2, #1526	; 0x5f6
   16b9c:	ldr	r1, [pc, #92]	; 16c00 <flatcc_builder_table_add_union@@Base+0x154>
   16ba0:	ldr	r0, [pc, #92]	; 16c04 <flatcc_builder_table_add_union@@Base+0x158>
   16ba4:	add	r3, pc, r3
   16ba8:	add	r3, r3, #1216	; 0x4c0
   16bac:	add	r1, pc, r1
   16bb0:	add	r3, r3, #12
   16bb4:	add	r0, pc, r0
   16bb8:	bl	1205c <__assert_fail@plt>
   16bbc:	ldr	r3, [pc, #68]	; 16c08 <flatcc_builder_table_add_union@@Base+0x15c>
   16bc0:	movw	r2, #1522	; 0x5f2
   16bc4:	ldr	r1, [pc, #64]	; 16c0c <flatcc_builder_table_add_union@@Base+0x160>
   16bc8:	ldr	r0, [pc, #64]	; 16c10 <flatcc_builder_table_add_union@@Base+0x164>
   16bcc:	add	r3, pc, r3
   16bd0:	add	r3, r3, #1216	; 0x4c0
   16bd4:	add	r1, pc, r1
   16bd8:	add	r3, r3, #12
   16bdc:	add	r0, pc, r0
   16be0:	bl	1205c <__assert_fail@plt>
   16be4:			; <UNDEFINED> instruction: 0x00000fb4
   16be8:	strdeq	r1, [r0], -ip
   16bec:	andeq	r1, r0, ip, lsr #21
   16bf0:	andeq	r0, r0, ip, lsl #31
   16bf4:	ldrdeq	r1, [r0], -r4
   16bf8:	andeq	r1, r0, r8, lsr #19
   16bfc:	andeq	r0, r0, r4, ror #30
   16c00:	andeq	r1, r0, ip, lsr #13
   16c04:	andeq	r1, r0, ip, lsl #21
   16c08:	andeq	r0, r0, ip, lsr pc
   16c0c:	andeq	r1, r0, r4, lsl #13
   16c10:	andeq	r1, r0, r8, asr sl

00016c14 <flatcc_builder_table_add_union_vector@@Base>:
   16c14:	strd	r4, [sp, #-20]!	; 0xffffffec
   16c18:	strd	r6, [sp, #8]
   16c1c:	mov	r7, r1
   16c20:	str	lr, [sp, #16]
   16c24:	sub	sp, sp, #12
   16c28:	add	r1, sp, #8
   16c2c:	stmdb	r1, {r2, r3}
   16c30:	ldr	r3, [r0, #32]
   16c34:	ldm	sp, {r4, r6}
   16c38:	ldrh	r3, [r3, #14]
   16c3c:	cmp	r3, #3
   16c40:	bne	16cec <flatcc_builder_table_add_union_vector@@Base+0xd8>
   16c44:	clz	r3, r6
   16c48:	clz	r2, r4
   16c4c:	lsr	r3, r3, #5
   16c50:	lsr	r2, r2, #5
   16c54:	cmp	r2, r3
   16c58:	beq	16c88 <flatcc_builder_table_add_union_vector@@Base+0x74>
   16c5c:	adds	r4, r4, #0
   16c60:	movne	r4, #1
   16c64:	cmp	r4, r3
   16c68:	mvnne	r4, #0
   16c6c:	beq	16d14 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16c70:	mov	r0, r4
   16c74:	add	sp, sp, #12
   16c78:	ldrd	r4, [sp]
   16c7c:	ldrd	r6, [sp, #8]
   16c80:	add	sp, sp, #16
   16c84:	pop	{pc}		; (ldr pc, [sp], #4)
   16c88:	cmp	r4, #0
   16c8c:	beq	16c70 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16c90:	sub	r1, r7, #1
   16c94:	mov	r5, r0
   16c98:	bl	1691c <flatcc_builder_table_add_offset@@Base>
   16c9c:	subs	r3, r0, #0
   16ca0:	beq	16d3c <flatcc_builder_table_add_union_vector@@Base+0x128>
   16ca4:	mov	r1, r7
   16ca8:	mov	r0, r5
   16cac:	str	r4, [r3]
   16cb0:	bl	1691c <flatcc_builder_table_add_offset@@Base>
   16cb4:	cmp	r0, #0
   16cb8:	movne	r4, #0
   16cbc:	strne	r6, [r0]
   16cc0:	bne	16c70 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16cc4:	ldr	r3, [pc, #152]	; 16d64 <flatcc_builder_table_add_union_vector@@Base+0x150>
   16cc8:	movw	r2, #1544	; 0x608
   16ccc:	ldr	r1, [pc, #148]	; 16d68 <flatcc_builder_table_add_union_vector@@Base+0x154>
   16cd0:	ldr	r0, [pc, #148]	; 16d6c <flatcc_builder_table_add_union_vector@@Base+0x158>
   16cd4:	add	r3, pc, r3
   16cd8:	add	r3, r3, #1248	; 0x4e0
   16cdc:	add	r1, pc, r1
   16ce0:	add	r3, r3, #12
   16ce4:	add	r0, pc, r0
   16ce8:	bl	1205c <__assert_fail@plt>
   16cec:	ldr	r3, [pc, #124]	; 16d70 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   16cf0:	mov	r2, #1536	; 0x600
   16cf4:	ldr	r1, [pc, #120]	; 16d74 <flatcc_builder_table_add_union_vector@@Base+0x160>
   16cf8:	ldr	r0, [pc, #120]	; 16d78 <flatcc_builder_table_add_union_vector@@Base+0x164>
   16cfc:	add	r3, pc, r3
   16d00:	add	r3, r3, #1248	; 0x4e0
   16d04:	add	r1, pc, r1
   16d08:	add	r3, r3, #12
   16d0c:	add	r0, pc, r0
   16d10:	bl	1205c <__assert_fail@plt>
   16d14:	ldr	r3, [pc, #96]	; 16d7c <flatcc_builder_table_add_union_vector@@Base+0x168>
   16d18:	movw	r2, #1537	; 0x601
   16d1c:	ldr	r1, [pc, #92]	; 16d80 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   16d20:	ldr	r0, [pc, #92]	; 16d84 <flatcc_builder_table_add_union_vector@@Base+0x170>
   16d24:	add	r3, pc, r3
   16d28:	add	r3, r3, #1248	; 0x4e0
   16d2c:	add	r1, pc, r1
   16d30:	add	r3, r3, #12
   16d34:	add	r0, pc, r0
   16d38:	bl	1205c <__assert_fail@plt>
   16d3c:	ldr	r3, [pc, #68]	; 16d88 <flatcc_builder_table_add_union_vector@@Base+0x174>
   16d40:	movw	r2, #1540	; 0x604
   16d44:	ldr	r1, [pc, #64]	; 16d8c <flatcc_builder_table_add_union_vector@@Base+0x178>
   16d48:	ldr	r0, [pc, #64]	; 16d90 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   16d4c:	add	r3, pc, r3
   16d50:	add	r3, r3, #1248	; 0x4e0
   16d54:	add	r1, pc, r1
   16d58:	add	r3, r3, #12
   16d5c:	add	r0, pc, r0
   16d60:	bl	1205c <__assert_fail@plt>
   16d64:	andeq	r0, r0, r4, lsr lr
   16d68:	andeq	r1, r0, ip, ror r5
   16d6c:	andeq	r1, r0, r0, asr r9
   16d70:	andeq	r0, r0, ip, lsl #28
   16d74:	andeq	r1, r0, r4, asr r5
   16d78:	andeq	r1, r0, r8, lsr #16
   16d7c:	andeq	r0, r0, r4, ror #27
   16d80:	andeq	r1, r0, ip, lsr #10
   16d84:	andeq	r1, r0, r8, lsl r9
   16d88:			; <UNDEFINED> instruction: 0x00000dbc
   16d8c:	andeq	r1, r0, r4, lsl #10
   16d90:	ldrdeq	r1, [r0], -r8

00016d94 <flatcc_builder_push_buffer_alignment@@Base>:
   16d94:	mov	r3, r0
   16d98:	mov	r2, #4
   16d9c:	ldrh	r0, [r0, #128]	; 0x80
   16da0:	strh	r2, [r3, #128]	; 0x80
   16da4:	bx	lr

00016da8 <flatcc_builder_pop_buffer_alignment@@Base>:
   16da8:	ldrh	r3, [r0, #128]	; 0x80
   16dac:	cmp	r3, r1
   16db0:	strhcc	r1, [r0, #128]	; 0x80
   16db4:	bx	lr

00016db8 <flatcc_builder_get_buffer_alignment@@Base>:
   16db8:	ldrh	r0, [r0, #128]	; 0x80
   16dbc:	bx	lr

00016dc0 <flatcc_builder_set_vtable_clustering@@Base>:
   16dc0:	clz	r1, r1
   16dc4:	lsr	r1, r1, #5
   16dc8:	str	r1, [r0, #180]	; 0xb4
   16dcc:	bx	lr

00016dd0 <flatcc_builder_set_block_align@@Base>:
   16dd0:	strh	r1, [r0, #132]	; 0x84
   16dd4:	bx	lr

00016dd8 <flatcc_builder_get_level@@Base>:
   16dd8:	ldr	r0, [r0, #156]	; 0x9c
   16ddc:	bx	lr

00016de0 <flatcc_builder_set_max_level@@Base>:
   16de0:	ldr	r3, [r0, #160]	; 0xa0
   16de4:	str	r1, [r0, #176]	; 0xb0
   16de8:	cmp	r3, r1
   16dec:	strlt	r1, [r0, #160]	; 0xa0
   16df0:	bx	lr

00016df4 <flatcc_builder_get_buffer_size@@Base>:
   16df4:	ldr	r3, [r0, #136]	; 0x88
   16df8:	ldr	r0, [r0, #140]	; 0x8c
   16dfc:	sub	r0, r0, r3
   16e00:	bx	lr

00016e04 <flatcc_builder_get_buffer_start@@Base>:
   16e04:	ldr	r0, [r0, #136]	; 0x88
   16e08:	bx	lr

00016e0c <flatcc_builder_get_buffer_end@@Base>:
   16e0c:	ldr	r0, [r0, #140]	; 0x8c
   16e10:	bx	lr

00016e14 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16e14:	str	r1, [r0, #172]	; 0xac
   16e18:	bx	lr

00016e1c <flatcc_builder_set_identifier@@Base>:
   16e1c:	ldr	r3, [pc, #40]	; 16e4c <flatcc_builder_set_identifier@@Base+0x30>
   16e20:	cmp	r1, #0
   16e24:	add	r3, pc, r3
   16e28:	beq	16e38 <flatcc_builder_set_identifier@@Base+0x1c>
   16e2c:	ldr	r3, [r1]
   16e30:	str	r3, [r0, #168]	; 0xa8
   16e34:	bx	lr
   16e38:	ldr	r2, [pc, #16]	; 16e50 <flatcc_builder_set_identifier@@Base+0x34>
   16e3c:	ldr	r1, [r3, r2]
   16e40:	ldr	r3, [r1]
   16e44:	str	r3, [r0, #168]	; 0xa8
   16e48:	bx	lr
   16e4c:	ldrdeq	r2, [r1], -r4
   16e50:	andeq	r0, r0, r4, asr r0

00016e54 <flatcc_builder_get_type@@Base>:
   16e54:	ldr	r0, [r0, #32]
   16e58:	cmp	r0, #0
   16e5c:	ldrhne	r0, [r0, #14]
   16e60:	bx	lr

00016e64 <flatcc_builder_get_type_at@@Base>:
   16e64:	cmp	r1, #0
   16e68:	ble	16e90 <flatcc_builder_get_type_at@@Base+0x2c>
   16e6c:	ldr	r3, [r0, #156]	; 0x9c
   16e70:	cmp	r3, r1
   16e74:	blt	16e90 <flatcc_builder_get_type_at@@Base+0x2c>
   16e78:	ldr	r2, [r0, #32]
   16e7c:	sub	r1, r1, r3
   16e80:	add	r1, r1, r1, lsl #3
   16e84:	add	r1, r2, r1, lsl #2
   16e88:	ldrh	r0, [r1, #14]
   16e8c:	bx	lr
   16e90:	mov	r0, #0
   16e94:	bx	lr

00016e98 <flatcc_builder_get_direct_buffer@@Base>:
   16e98:	ldr	r3, [r0, #184]	; 0xb8
   16e9c:	cmp	r3, #0
   16ea0:	bne	16ebc <flatcc_builder_get_direct_buffer@@Base+0x24>
   16ea4:	cmp	r1, #0
   16ea8:	movne	r3, #0
   16eac:	movne	r0, r3
   16eb0:	moveq	r0, r1
   16eb4:	strne	r3, [r1]
   16eb8:	bx	lr
   16ebc:	ldrd	r2, [r0, #188]	; 0xbc
   16ec0:	cmp	r2, r3
   16ec4:	bne	16ea4 <flatcc_builder_get_direct_buffer@@Base+0xc>
   16ec8:	cmp	r1, #0
   16ecc:	ldrne	r3, [r0, #212]	; 0xd4
   16ed0:	ldr	r0, [r0, #196]	; 0xc4
   16ed4:	strne	r3, [r1]
   16ed8:	bx	lr

00016edc <flatcc_builder_copy_buffer@@Base>:
   16edc:	ldr	r3, [r0, #184]	; 0xb8
   16ee0:	cmp	r3, #0
   16ee4:	beq	16f0c <flatcc_builder_copy_buffer@@Base+0x30>
   16ee8:	add	r0, r0, #188	; 0xbc
   16eec:	str	r4, [sp, #-8]!
   16ef0:	str	lr, [sp, #4]
   16ef4:	bl	17670 <flatcc_emitter_copy_buffer@@Base>
   16ef8:	cmp	r0, #0
   16efc:	beq	16f14 <flatcc_builder_copy_buffer@@Base+0x38>
   16f00:	ldr	r4, [sp]
   16f04:	add	sp, sp, #4
   16f08:	pop	{pc}		; (ldr pc, [sp], #4)
   16f0c:	mov	r0, r3
   16f10:	bx	lr
   16f14:	ldr	r3, [pc, #32]	; 16f3c <flatcc_builder_copy_buffer@@Base+0x60>
   16f18:	movw	r2, #1926	; 0x786
   16f1c:	ldr	r1, [pc, #28]	; 16f40 <flatcc_builder_copy_buffer@@Base+0x64>
   16f20:	ldr	r0, [pc, #28]	; 16f44 <flatcc_builder_copy_buffer@@Base+0x68>
   16f24:	add	r3, pc, r3
   16f28:	add	r3, r3, #1296	; 0x510
   16f2c:	add	r1, pc, r1
   16f30:	add	r3, r3, #4
   16f34:	add	r0, pc, r0
   16f38:	bl	1205c <__assert_fail@plt>
   16f3c:	andeq	r0, r0, r4, ror #23
   16f40:	andeq	r1, r0, ip, lsr #6
   16f44:	andeq	r1, r0, r0, asr #14

00016f48 <flatcc_builder_finalize_buffer@@Base>:
   16f48:	strd	r4, [sp, #-16]!
   16f4c:	mov	r5, r1
   16f50:	str	r6, [sp, #8]
   16f54:	mov	r6, r0
   16f58:	str	lr, [sp, #12]
   16f5c:	bl	16df4 <flatcc_builder_get_buffer_size@@Base>
   16f60:	cmp	r5, #0
   16f64:	mov	r4, r0
   16f68:	strne	r0, [r5]
   16f6c:	bl	11fe4 <malloc@plt>
   16f70:	subs	r5, r0, #0
   16f74:	beq	16fa4 <flatcc_builder_finalize_buffer@@Base+0x5c>
   16f78:	mov	r2, r4
   16f7c:	mov	r0, r6
   16f80:	mov	r1, r5
   16f84:	bl	16edc <flatcc_builder_copy_buffer@@Base>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fc8 <flatcc_builder_finalize_buffer@@Base+0x80>
   16f90:	mov	r0, r5
   16f94:	ldrd	r4, [sp]
   16f98:	ldr	r6, [sp, #8]
   16f9c:	add	sp, sp, #12
   16fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fa4:	ldr	r3, [pc, #64]	; 16fec <flatcc_builder_finalize_buffer@@Base+0xa4>
   16fa8:	movw	r2, #1944	; 0x798
   16fac:	ldr	r1, [pc, #60]	; 16ff0 <flatcc_builder_finalize_buffer@@Base+0xa8>
   16fb0:	ldr	r0, [pc, #60]	; 16ff4 <flatcc_builder_finalize_buffer@@Base+0xac>
   16fb4:	add	r3, pc, r3
   16fb8:	add	r3, r3, #1328	; 0x530
   16fbc:	add	r1, pc, r1
   16fc0:	add	r0, pc, r0
   16fc4:	bl	1205c <__assert_fail@plt>
   16fc8:	ldr	r3, [pc, #40]	; 16ff8 <flatcc_builder_finalize_buffer@@Base+0xb0>
   16fcc:	movw	r2, #1948	; 0x79c
   16fd0:	ldr	r1, [pc, #36]	; 16ffc <flatcc_builder_finalize_buffer@@Base+0xb4>
   16fd4:	ldr	r0, [pc, #36]	; 17000 <flatcc_builder_finalize_buffer@@Base+0xb8>
   16fd8:	add	r3, pc, r3
   16fdc:	add	r3, r3, #1328	; 0x530
   16fe0:	add	r1, pc, r1
   16fe4:	add	r0, pc, r0
   16fe8:	bl	1205c <__assert_fail@plt>
   16fec:	andeq	r0, r0, r4, asr fp
   16ff0:	muleq	r0, ip, r2
   16ff4:	andeq	r1, r0, r0, lsr #6
   16ff8:	andeq	r0, r0, r0, lsr fp
   16ffc:	andeq	r1, r0, r8, ror r2
   17000:	strdeq	r1, [r0], -ip

00017004 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17004:	strd	r4, [sp, #-20]!	; 0xffffffec
   17008:	mov	r5, r1
   1700c:	strd	r6, [sp, #8]
   17010:	mov	r6, r0
   17014:	str	lr, [sp, #16]
   17018:	sub	sp, sp, #12
   1701c:	bl	16df4 <flatcc_builder_get_buffer_size@@Base>
   17020:	cmp	r5, #0
   17024:	mov	r4, r0
   17028:	sub	r4, r4, #1
   1702c:	strne	r0, [r5]
   17030:	mov	r0, r6
   17034:	bl	16db8 <flatcc_builder_get_buffer_alignment@@Base>
   17038:	rsb	r3, r0, #0
   1703c:	add	r4, r4, r0
   17040:	cmp	r0, #4
   17044:	and	r4, r4, r3
   17048:	mov	r3, #0
   1704c:	movcs	r1, r0
   17050:	movcc	r1, #4
   17054:	mov	r2, r4
   17058:	add	r0, sp, #4
   1705c:	str	r3, [sp, #4]
   17060:	bl	12020 <posix_memalign@plt>
   17064:	cmp	r0, #0
   17068:	beq	17094 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   1706c:	ldr	r0, [sp, #4]
   17070:	cmp	r0, #0
   17074:	beq	1707c <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17078:	bl	11f9c <free@plt>
   1707c:	cmp	r5, #0
   17080:	movne	r3, #0
   17084:	moveq	r7, r5
   17088:	movne	r7, r3
   1708c:	strne	r3, [r5]
   17090:	b	170b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   17094:	ldr	r7, [sp, #4]
   17098:	cmp	r7, #0
   1709c:	beq	1707c <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   170a0:	mov	r2, r4
   170a4:	mov	r0, r6
   170a8:	mov	r1, r7
   170ac:	bl	16edc <flatcc_builder_copy_buffer@@Base>
   170b0:	cmp	r0, #0
   170b4:	beq	170d0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   170b8:	mov	r0, r7
   170bc:	add	sp, sp, #12
   170c0:	ldrd	r4, [sp]
   170c4:	ldrd	r6, [sp, #8]
   170c8:	add	sp, sp, #16
   170cc:	pop	{pc}		; (ldr pc, [sp], #4)
   170d0:	mov	r0, r7
   170d4:	b	17078 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

000170d8 <flatcc_builder_aligned_alloc@@Base>:
   170d8:	cmp	r0, #4
   170dc:	str	r4, [sp, #-8]!
   170e0:	mov	r4, #0
   170e4:	str	lr, [sp, #4]
   170e8:	sub	sp, sp, #8
   170ec:	mov	r2, r1
   170f0:	movcs	r1, r0
   170f4:	movcc	r1, #4
   170f8:	add	r0, sp, #4
   170fc:	str	r4, [sp, #4]
   17100:	bl	12020 <posix_memalign@plt>
   17104:	cmp	r0, r4
   17108:	ldr	r0, [sp, #4]
   1710c:	beq	17120 <flatcc_builder_aligned_alloc@@Base+0x48>
   17110:	cmp	r0, #0
   17114:	beq	17120 <flatcc_builder_aligned_alloc@@Base+0x48>
   17118:	bl	11f9c <free@plt>
   1711c:	mov	r0, r4
   17120:	add	sp, sp, #8
   17124:	ldr	r4, [sp]
   17128:	add	sp, sp, #4
   1712c:	pop	{pc}		; (ldr pc, [sp], #4)

00017130 <flatcc_builder_aligned_free@@Base>:
   17130:	b	11f9c <free@plt>

00017134 <flatcc_builder_get_emit_context@@Base>:
   17134:	ldr	r0, [r0, #36]	; 0x24
   17138:	bx	lr

0001713c <flatcc_emitter_recycle_page@@Base>:
   1713c:	ldr	r3, [r0]
   17140:	cmp	r3, r1
   17144:	beq	17188 <flatcc_emitter_recycle_page@@Base+0x4c>
   17148:	ldr	r2, [r0, #4]
   1714c:	cmp	r2, r1
   17150:	beq	17188 <flatcc_emitter_recycle_page@@Base+0x4c>
   17154:	push	{lr}		; (str lr, [sp, #-4]!)
   17158:	mov	r0, #0
   1715c:	ldr	lr, [r1, #2944]	; 0xb80
   17160:	ldr	ip, [r1, #2948]	; 0xb84
   17164:	str	ip, [lr, #2948]	; 0xb84
   17168:	ldr	r2, [r3, #2948]	; 0xb84
   1716c:	str	lr, [ip, #2944]	; 0xb80
   17170:	str	r3, [r1, #2944]	; 0xb80
   17174:	str	r2, [r1, #2948]	; 0xb84
   17178:	str	r1, [r2, #2944]	; 0xb80
   1717c:	ldr	r3, [r1, #2944]	; 0xb80
   17180:	str	r1, [r3, #2948]	; 0xb84
   17184:	pop	{pc}		; (ldr pc, [sp], #4)
   17188:	mvn	r0, #0
   1718c:	bx	lr

00017190 <flatcc_emitter_reset@@Base>:
   17190:	ldr	r2, [r0]
   17194:	cmp	r2, #0
   17198:	bxeq	lr
   1719c:	strd	r4, [sp, #-16]!
   171a0:	movw	ip, #64064	; 0xfa40
   171a4:	movt	ip, #65535	; 0xffff
   171a8:	ldr	r1, [r0, #24]
   171ac:	add	r4, r2, #1472	; 0x5c0
   171b0:	ldr	r3, [r0, #32]
   171b4:	ldr	r5, [r0, #28]
   171b8:	str	r6, [sp, #8]
   171bc:	str	lr, [sp, #12]
   171c0:	mov	lr, #1472	; 0x5c0
   171c4:	cmp	r3, #0
   171c8:	stmib	r0, {r2, r4}
   171cc:	moveq	r3, r1
   171d0:	lsr	r1, r1, #2
   171d4:	str	lr, [r0, #12]
   171d8:	add	r3, r3, r3, lsl #1
   171dc:	str	r4, [r0, #16]
   171e0:	str	lr, [r0, #20]
   171e4:	add	r3, r1, r3, lsr #2
   171e8:	str	ip, [r2, #2952]	; 0xb88
   171ec:	mov	ip, #0
   171f0:	cmp	r5, r3, lsl #1
   171f4:	str	ip, [r0, #24]
   171f8:	str	r3, [r0, #32]
   171fc:	bls	17254 <flatcc_emitter_reset@@Base+0xc4>
   17200:	ldr	r3, [r2, #2944]	; 0xb80
   17204:	mov	r4, r0
   17208:	cmp	r2, r3
   1720c:	bne	17224 <flatcc_emitter_reset@@Base+0x94>
   17210:	b	17254 <flatcc_emitter_reset@@Base+0xc4>
   17214:	ldm	r4, {r1, r2}
   17218:	ldr	r3, [r2, #2944]	; 0xb80
   1721c:	cmp	r3, r1
   17220:	beq	17254 <flatcc_emitter_reset@@Base+0xc4>
   17224:	ldr	r1, [r3, #2944]	; 0xb80
   17228:	mov	r0, r3
   1722c:	str	r1, [r2, #2944]	; 0xb80
   17230:	ldr	r3, [r3, #2944]	; 0xb80
   17234:	str	r2, [r3, #2948]	; 0xb84
   17238:	bl	11f9c <free@plt>
   1723c:	ldr	r3, [r4, #28]
   17240:	ldr	r2, [r4, #32]
   17244:	sub	r3, r3, #2944	; 0xb80
   17248:	cmp	r3, r2, lsl #1
   1724c:	str	r3, [r4, #28]
   17250:	bhi	17214 <flatcc_emitter_reset@@Base+0x84>
   17254:	ldrd	r4, [sp]
   17258:	ldr	r6, [sp, #8]
   1725c:	add	sp, sp, #12
   17260:	pop	{pc}		; (ldr pc, [sp], #4)

00017264 <flatcc_emitter_clear@@Base>:
   17264:	ldr	r3, [r0]
   17268:	cmp	r3, #0
   1726c:	bxeq	lr
   17270:	mov	r1, #0
   17274:	strd	r4, [sp, #-16]!
   17278:	mov	r5, r0
   1727c:	ldr	r2, [r3, #2948]	; 0xb84
   17280:	str	r6, [sp, #8]
   17284:	str	lr, [sp, #12]
   17288:	str	r1, [r2, #2944]	; 0xb80
   1728c:	ldr	r4, [r3, #2944]	; 0xb80
   17290:	cmp	r4, r1
   17294:	bne	172a0 <flatcc_emitter_clear@@Base+0x3c>
   17298:	b	172dc <flatcc_emitter_clear@@Base+0x78>
   1729c:	mov	r4, r3
   172a0:	ldr	r0, [r4, #2948]	; 0xb84
   172a4:	bl	11f9c <free@plt>
   172a8:	ldr	r3, [r4, #2944]	; 0xb80
   172ac:	cmp	r3, #0
   172b0:	bne	1729c <flatcc_emitter_clear@@Base+0x38>
   172b4:	mov	r0, r4
   172b8:	bl	11f9c <free@plt>
   172bc:	mov	r0, r5
   172c0:	mov	r2, #36	; 0x24
   172c4:	ldrd	r4, [sp]
   172c8:	mov	r1, #0
   172cc:	ldr	r6, [sp, #8]
   172d0:	ldr	lr, [sp, #12]
   172d4:	add	sp, sp, #16
   172d8:	b	1202c <memset@plt>
   172dc:	mov	r4, r3
   172e0:	b	172b4 <flatcc_emitter_clear@@Base+0x50>

000172e4 <flatcc_emitter@@Base>:
   172e4:	cmp	r3, #0
   172e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172ec:	mov	r4, r0
   172f0:	ldr	r3, [r0, #24]
   172f4:	strd	r6, [sp, #8]
   172f8:	strd	r8, [sp, #16]
   172fc:	sub	r8, r2, #1
   17300:	strd	sl, [sp, #24]
   17304:	str	lr, [sp, #32]
   17308:	sub	sp, sp, #12
   1730c:	ldr	r0, [sp, #48]	; 0x30
   17310:	add	r3, r3, r0
   17314:	str	r3, [r4, #24]
   17318:	blt	174e8 <flatcc_emitter@@Base+0x204>
   1731c:	ldr	r3, [r4, #20]
   17320:	cmp	r3, r0
   17324:	bcs	173c4 <flatcc_emitter@@Base+0xe0>
   17328:	cmp	r2, #0
   1732c:	beq	173a4 <flatcc_emitter@@Base+0xc0>
   17330:	mov	r8, r2
   17334:	add	r5, r1, #8
   17338:	movw	r2, #64064	; 0xfa40
   1733c:	movt	r2, #65535	; 0xffff
   17340:	str	r2, [sp, #4]
   17344:	ldmdb	r5, {r7, fp}
   17348:	cmp	fp, #0
   1734c:	beq	17398 <flatcc_emitter@@Base+0xb4>
   17350:	mov	r9, #1472	; 0x5c0
   17354:	cmp	fp, r3
   17358:	mov	r6, r3
   1735c:	bls	17454 <flatcc_emitter@@Base+0x170>
   17360:	cmp	r3, #0
   17364:	subne	fp, fp, r3
   17368:	beq	1740c <flatcc_emitter@@Base+0x128>
   1736c:	mov	r2, r6
   17370:	mov	r1, r7
   17374:	ldr	r0, [r4, #16]
   17378:	bl	11fa8 <memcpy@plt>
   1737c:	ldrd	r2, [r4, #16]
   17380:	cmp	fp, #0
   17384:	add	r7, r7, r6
   17388:	add	r2, r2, r6
   1738c:	sub	r3, r3, r6
   17390:	strd	r2, [r4, #16]
   17394:	bne	17354 <flatcc_emitter@@Base+0x70>
   17398:	subs	r8, r8, #1
   1739c:	add	r5, r5, #8
   173a0:	bne	17344 <flatcc_emitter@@Base+0x60>
   173a4:	mov	r0, #0
   173a8:	add	sp, sp, #12
   173ac:	ldrd	r4, [sp]
   173b0:	ldrd	r6, [sp, #8]
   173b4:	ldrd	r8, [sp, #16]
   173b8:	ldrd	sl, [sp, #24]
   173bc:	add	sp, sp, #32
   173c0:	pop	{pc}		; (ldr pc, [sp], #4)
   173c4:	ldr	r7, [r4, #16]
   173c8:	sub	r3, r3, r0
   173cc:	str	r3, [r4, #20]
   173d0:	add	r0, r7, r0
   173d4:	str	r0, [r4, #16]
   173d8:	cmp	r2, #0
   173dc:	addne	r4, r1, #8
   173e0:	beq	173a4 <flatcc_emitter@@Base+0xc0>
   173e4:	mov	r0, r7
   173e8:	ldmdb	r4, {r1, r2}
   173ec:	sub	r8, r8, #1
   173f0:	bl	11fa8 <memcpy@plt>
   173f4:	ldr	r3, [r4, #-4]
   173f8:	cmn	r8, #1
   173fc:	add	r4, r4, #8
   17400:	add	r7, r7, r3
   17404:	bne	173e4 <flatcc_emitter@@Base+0x100>
   17408:	b	173a4 <flatcc_emitter@@Base+0xc0>
   1740c:	ldr	r6, [r4, #4]
   17410:	cmp	r6, #0
   17414:	beq	17494 <flatcc_emitter@@Base+0x1b0>
   17418:	ldr	sl, [r4]
   1741c:	ldr	r0, [r6, #2944]	; 0xb80
   17420:	cmp	r0, sl
   17424:	beq	17460 <flatcc_emitter@@Base+0x17c>
   17428:	str	r0, [r4, #4]
   1742c:	ldr	r2, [r0, #2948]	; 0xb84
   17430:	mov	r3, #2944	; 0xb80
   17434:	cmp	fp, r3
   17438:	mov	r6, r3
   1743c:	ldr	r2, [r2, #2952]	; 0xb88
   17440:	str	r0, [r4, #16]
   17444:	str	r3, [r4, #20]
   17448:	add	r2, r2, r3
   1744c:	str	r2, [r0, #2952]	; 0xb88
   17450:	bhi	17360 <flatcc_emitter@@Base+0x7c>
   17454:	mov	r6, fp
   17458:	mov	fp, #0
   1745c:	b	1736c <flatcc_emitter@@Base+0x88>
   17460:	movw	r0, #2956	; 0xb8c
   17464:	bl	11fe4 <malloc@plt>
   17468:	cmp	r0, #0
   1746c:	beq	174e0 <flatcc_emitter@@Base+0x1fc>
   17470:	ldr	r2, [r4, #28]
   17474:	str	sl, [r0, #2944]	; 0xb80
   17478:	str	r6, [r0, #2948]	; 0xb84
   1747c:	add	r2, r2, #2944	; 0xb80
   17480:	str	r2, [r4, #28]
   17484:	str	r0, [sl, #2948]	; 0xb84
   17488:	str	r0, [r6, #2944]	; 0xb80
   1748c:	str	r0, [r4, #4]
   17490:	b	1742c <flatcc_emitter@@Base+0x148>
   17494:	movw	r0, #2956	; 0xb8c
   17498:	bl	11fe4 <malloc@plt>
   1749c:	cmp	r0, #0
   174a0:	beq	174e0 <flatcc_emitter@@Base+0x1fc>
   174a4:	ldr	r2, [r4, #28]
   174a8:	add	r1, r0, #1472	; 0x5c0
   174ac:	mov	r3, #1472	; 0x5c0
   174b0:	str	r0, [r4]
   174b4:	strd	r0, [r4, #4]
   174b8:	str	r9, [r4, #12]
   174bc:	str	r1, [r4, #16]
   174c0:	add	r2, r2, #2944	; 0xb80
   174c4:	str	r9, [r4, #20]
   174c8:	str	r0, [r0, #2944]	; 0xb80
   174cc:	str	r2, [r4, #28]
   174d0:	ldr	r2, [sp, #4]
   174d4:	str	r0, [r0, #2948]	; 0xb84
   174d8:	str	r2, [r0, #2952]	; 0xb88
   174dc:	b	17354 <flatcc_emitter@@Base+0x70>
   174e0:	mvn	r0, #0
   174e4:	b	173a8 <flatcc_emitter@@Base+0xc4>
   174e8:	ldr	r3, [r4, #12]
   174ec:	cmp	r3, r0
   174f0:	bcs	17658 <flatcc_emitter@@Base+0x374>
   174f4:	add	r5, r1, r2, lsl #3
   174f8:	movw	r3, #64064	; 0xfa40
   174fc:	movt	r3, #65535	; 0xffff
   17500:	str	r3, [sp, #4]
   17504:	cmn	r8, #1
   17508:	beq	173a4 <flatcc_emitter@@Base+0xc0>
   1750c:	ldr	r7, [r5, #-8]
   17510:	ldr	r6, [r5, #-4]
   17514:	cmp	r6, #0
   17518:	add	r7, r7, r6
   1751c:	beq	1756c <flatcc_emitter@@Base+0x288>
   17520:	mov	r9, #1472	; 0x5c0
   17524:	ldr	r2, [r4, #12]
   17528:	cmp	r2, r6
   1752c:	bcs	175d0 <flatcc_emitter@@Base+0x2ec>
   17530:	cmp	r2, #0
   17534:	beq	17578 <flatcc_emitter@@Base+0x294>
   17538:	sub	r6, r6, r2
   1753c:	mov	r1, #0
   17540:	ldr	r3, [r4, #8]
   17544:	rsb	r0, r2, #0
   17548:	add	r7, r7, r0
   1754c:	str	r1, [r4, #12]
   17550:	mov	r1, r7
   17554:	add	r3, r3, r0
   17558:	mov	r0, r3
   1755c:	str	r3, [r4, #8]
   17560:	bl	11fa8 <memcpy@plt>
   17564:	cmp	r6, #0
   17568:	bne	17524 <flatcc_emitter@@Base+0x240>
   1756c:	sub	r5, r5, #8
   17570:	sub	r8, r8, #1
   17574:	b	17504 <flatcc_emitter@@Base+0x220>
   17578:	ldr	fp, [r4]
   1757c:	cmp	fp, #0
   17580:	beq	17614 <flatcc_emitter@@Base+0x330>
   17584:	ldr	sl, [r4, #4]
   17588:	ldr	r0, [fp, #2948]	; 0xb84
   1758c:	cmp	r0, sl
   17590:	beq	175e0 <flatcc_emitter@@Base+0x2fc>
   17594:	ldr	r3, [fp, #2952]	; 0xb88
   17598:	sub	r3, r3, #2944	; 0xb80
   1759c:	str	r3, [r0, #2952]	; 0xb88
   175a0:	str	r0, [r4]
   175a4:	ldr	r3, [r0, #2944]	; 0xb80
   175a8:	mov	r2, #2944	; 0xb80
   175ac:	add	r1, r0, #2944	; 0xb80
   175b0:	ldr	r3, [r3, #2952]	; 0xb88
   175b4:	str	r1, [r4, #8]
   175b8:	str	r2, [r4, #12]
   175bc:	sub	r3, r3, #2944	; 0xb80
   175c0:	str	r3, [r0, #2952]	; 0xb88
   175c4:	ldr	r2, [r4, #12]
   175c8:	cmp	r2, r6
   175cc:	bcc	17530 <flatcc_emitter@@Base+0x24c>
   175d0:	sub	r1, r2, r6
   175d4:	mov	r2, r6
   175d8:	mov	r6, #0
   175dc:	b	17540 <flatcc_emitter@@Base+0x25c>
   175e0:	movw	r0, #2956	; 0xb8c
   175e4:	bl	11fe4 <malloc@plt>
   175e8:	cmp	r0, #0
   175ec:	beq	174e0 <flatcc_emitter@@Base+0x1fc>
   175f0:	ldr	r2, [r4, #28]
   175f4:	str	fp, [r0, #2944]	; 0xb80
   175f8:	str	sl, [r0, #2948]	; 0xb84
   175fc:	add	r2, r2, #2944	; 0xb80
   17600:	str	r2, [r4, #28]
   17604:	str	r0, [fp, #2948]	; 0xb84
   17608:	str	r0, [sl, #2944]	; 0xb80
   1760c:	str	r0, [r4]
   17610:	b	175a4 <flatcc_emitter@@Base+0x2c0>
   17614:	movw	r0, #2956	; 0xb8c
   17618:	bl	11fe4 <malloc@plt>
   1761c:	cmp	r0, #0
   17620:	beq	174e0 <flatcc_emitter@@Base+0x1fc>
   17624:	ldr	r3, [r4, #28]
   17628:	add	r2, r0, #1472	; 0x5c0
   1762c:	str	r0, [r4]
   17630:	stmib	r4, {r0, r2, r9}
   17634:	add	r3, r3, #2944	; 0xb80
   17638:	str	r2, [r4, #16]
   1763c:	str	r9, [r4, #20]
   17640:	str	r3, [r4, #28]
   17644:	ldr	r3, [sp, #4]
   17648:	str	r0, [r0, #2944]	; 0xb80
   1764c:	str	r0, [r0, #2948]	; 0xb84
   17650:	str	r3, [r0, #2952]	; 0xb88
   17654:	b	17524 <flatcc_emitter@@Base+0x240>
   17658:	ldr	r7, [r4, #8]
   1765c:	sub	r3, r3, r0
   17660:	str	r3, [r4, #12]
   17664:	sub	r7, r7, r0
   17668:	str	r7, [r4, #8]
   1766c:	b	173d8 <flatcc_emitter@@Base+0xf4>

00017670 <flatcc_emitter_copy_buffer@@Base>:
   17670:	ldr	r3, [r0, #24]
   17674:	strd	r4, [sp, #-16]!
   17678:	str	r6, [sp, #8]
   1767c:	str	lr, [sp, #12]
   17680:	cmp	r3, r2
   17684:	movhi	r5, #0
   17688:	bhi	17708 <flatcc_emitter_copy_buffer@@Base+0x98>
   1768c:	ldr	r5, [r0]
   17690:	mov	r6, r0
   17694:	cmp	r5, #0
   17698:	beq	17708 <flatcc_emitter_copy_buffer@@Base+0x98>
   1769c:	ldr	r2, [r6, #4]
   176a0:	mov	r0, r1
   176a4:	ldr	r1, [r6, #8]
   176a8:	cmp	r5, r2
   176ac:	beq	1771c <flatcc_emitter_copy_buffer@@Base+0xac>
   176b0:	ldr	r2, [r6, #12]
   176b4:	rsb	r2, r2, #2944	; 0xb80
   176b8:	add	r5, r0, r2
   176bc:	bl	11fa8 <memcpy@plt>
   176c0:	ldrd	r2, [r6]
   176c4:	ldr	r4, [r2, #2944]	; 0xb80
   176c8:	cmp	r4, r3
   176cc:	beq	176f4 <flatcc_emitter_copy_buffer@@Base+0x84>
   176d0:	mov	r2, #2944	; 0xb80
   176d4:	mov	r1, r4
   176d8:	mov	r0, r5
   176dc:	add	r5, r5, r2
   176e0:	bl	11fa8 <memcpy@plt>
   176e4:	ldr	r3, [r6, #4]
   176e8:	ldr	r4, [r4, #2944]	; 0xb80
   176ec:	cmp	r3, r4
   176f0:	bne	176d0 <flatcc_emitter_copy_buffer@@Base+0x60>
   176f4:	ldr	r2, [r6, #20]
   176f8:	mov	r1, r4
   176fc:	mov	r0, r5
   17700:	rsb	r2, r2, #2944	; 0xb80
   17704:	bl	11fa8 <memcpy@plt>
   17708:	mov	r0, r5
   1770c:	ldrd	r4, [sp]
   17710:	ldr	r6, [sp, #8]
   17714:	add	sp, sp, #12
   17718:	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	mov	r2, r3
   17720:	mov	r5, r0
   17724:	bl	11fa8 <memcpy@plt>
   17728:	b	17708 <flatcc_emitter_copy_buffer@@Base+0x98>

0001772c <__libc_csu_init@@Base>:
   1772c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17730:	mov	r7, r0
   17734:	ldr	r6, [pc, #72]	; 17784 <__libc_csu_init@@Base+0x58>
   17738:	ldr	r5, [pc, #72]	; 17788 <__libc_csu_init@@Base+0x5c>
   1773c:	add	r6, pc, r6
   17740:	add	r5, pc, r5
   17744:	sub	r6, r6, r5
   17748:	mov	r8, r1
   1774c:	mov	r9, r2
   17750:	bl	11f70 <printf@plt-0x20>
   17754:	asrs	r6, r6, #2
   17758:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1775c:	mov	r4, #0
   17760:	add	r4, r4, #1
   17764:	ldr	r3, [r5], #4
   17768:	mov	r2, r9
   1776c:	mov	r1, r8
   17770:	mov	r0, r7
   17774:	blx	r3
   17778:	cmp	r6, r4
   1777c:	bne	17760 <__libc_csu_init@@Base+0x34>
   17780:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17784:	ldrdeq	r1, [r1], -r0
   17788:	andeq	r1, r1, r8, asr #15

0001778c <__libc_csu_fini@@Base>:
   1778c:	bx	lr

Disassembly of section .fini:

00017790 <.fini>:
   17790:	push	{r3, lr}
   17794:	pop	{r3, pc}
