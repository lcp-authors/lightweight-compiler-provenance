
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00012374 <.init>:
   12374:	push	{r3, lr}
   12378:	bl	12490 <_start@@Base+0x3c>
   1237c:	pop	{r3, pc}

Disassembly of section .plt:

00012380 <printf@plt-0x14>:
   12380:	push	{lr}		; (str lr, [sp, #-4]!)
   12384:	ldr	lr, [pc, #4]	; 12390 <printf@plt-0x4>
   12388:	add	lr, pc, lr
   1238c:	ldr	pc, [lr, #8]!
   12390:	andeq	r9, r1, r0, ror ip

00012394 <printf@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #102400	; 0x19000
   1239c:	ldr	pc, [ip, #3184]!	; 0xc70

000123a0 <free@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #102400	; 0x19000
   123a8:	ldr	pc, [ip, #3176]!	; 0xc68

000123ac <memcpy@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #102400	; 0x19000
   123b4:	ldr	pc, [ip, #3168]!	; 0xc60

000123b8 <memcmp@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #102400	; 0x19000
   123c0:	ldr	pc, [ip, #3160]!	; 0xc58

000123c4 <realloc@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #102400	; 0x19000
   123cc:	ldr	pc, [ip, #3152]!	; 0xc50

000123d0 <malloc@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #102400	; 0x19000
   123d8:	ldr	pc, [ip, #3144]!	; 0xc48

000123dc <__libc_start_main@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #102400	; 0x19000
   123e4:	ldr	pc, [ip, #3136]!	; 0xc40

000123e8 <__gmon_start__@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #102400	; 0x19000
   123f0:	ldr	pc, [ip, #3128]!	; 0xc38

000123f4 <strlen@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #102400	; 0x19000
   123fc:	ldr	pc, [ip, #3120]!	; 0xc30

00012400 <fprintf@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #102400	; 0x19000
   12408:	ldr	pc, [ip, #3112]!	; 0xc28

0001240c <posix_memalign@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #102400	; 0x19000
   12414:	ldr	pc, [ip, #3104]!	; 0xc20

00012418 <memset@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #102400	; 0x19000
   12420:	ldr	pc, [ip, #3096]!	; 0xc18

00012424 <strncpy@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #102400	; 0x19000
   1242c:	ldr	pc, [ip, #3088]!	; 0xc10

00012430 <memchr@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #102400	; 0x19000
   12438:	ldr	pc, [ip, #3080]!	; 0xc08

0001243c <abort@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #102400	; 0x19000
   12444:	ldr	pc, [ip, #3072]!	; 0xc00

00012448 <__assert_fail@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #102400	; 0x19000
   12450:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00012454 <_start@@Base>:
   12454:	mov	fp, #0
   12458:	mov	lr, #0
   1245c:	pop	{r1}		; (ldr r1, [sp], #4)
   12460:	mov	r2, sp
   12464:	push	{r2}		; (str r2, [sp, #-4]!)
   12468:	push	{r0}		; (str r0, [sp, #-4]!)
   1246c:	ldr	ip, [pc, #16]	; 12484 <_start@@Base+0x30>
   12470:	push	{ip}		; (str ip, [sp, #-4]!)
   12474:	ldr	r0, [pc, #12]	; 12488 <_start@@Base+0x34>
   12478:	ldr	r3, [pc, #12]	; 1248c <_start@@Base+0x38>
   1247c:	bl	123dc <__libc_start_main@plt>
   12480:	bl	1243c <abort@plt>
   12484:	strdeq	sl, [r1], -r8
   12488:	andeq	r3, r1, r0, lsr #6
   1248c:	muleq	r1, r8, r4
   12490:	ldr	r3, [pc, #20]	; 124ac <_start@@Base+0x58>
   12494:	ldr	r2, [pc, #20]	; 124b0 <_start@@Base+0x5c>
   12498:	add	r3, pc, r3
   1249c:	ldr	r2, [r3, r2]
   124a0:	cmp	r2, #0
   124a4:	bxeq	lr
   124a8:	b	123e8 <__gmon_start__@plt>
   124ac:	andeq	r9, r1, r0, ror #22
   124b0:	andeq	r0, r0, r8, asr r0
   124b4:	ldr	r0, [pc, #24]	; 124d4 <_start@@Base+0x80>
   124b8:	ldr	r3, [pc, #24]	; 124d8 <_start@@Base+0x84>
   124bc:	cmp	r3, r0
   124c0:	bxeq	lr
   124c4:	ldr	r3, [pc, #16]	; 124dc <_start@@Base+0x88>
   124c8:	cmp	r3, #0
   124cc:	bxeq	lr
   124d0:	bx	r3
   124d4:	andeq	ip, r2, ip, rrx
   124d8:	andeq	ip, r2, ip, rrx
   124dc:	andeq	r0, r0, r0
   124e0:	ldr	r0, [pc, #36]	; 1250c <_start@@Base+0xb8>
   124e4:	ldr	r1, [pc, #36]	; 12510 <_start@@Base+0xbc>
   124e8:	sub	r1, r1, r0
   124ec:	asr	r1, r1, #2
   124f0:	add	r1, r1, r1, lsr #31
   124f4:	asrs	r1, r1, #1
   124f8:	bxeq	lr
   124fc:	ldr	r3, [pc, #16]	; 12514 <_start@@Base+0xc0>
   12500:	cmp	r3, #0
   12504:	bxeq	lr
   12508:	bx	r3
   1250c:	andeq	ip, r2, ip, rrx
   12510:	andeq	ip, r2, ip, rrx
   12514:	andeq	r0, r0, r0
   12518:	push	{r4, lr}
   1251c:	ldr	r4, [pc, #24]	; 1253c <_start@@Base+0xe8>
   12520:	ldrb	r3, [r4]
   12524:	cmp	r3, #0
   12528:	popne	{r4, pc}
   1252c:	bl	124b4 <_start@@Base+0x60>
   12530:	mov	r3, #1
   12534:	strb	r3, [r4]
   12538:	pop	{r4, pc}
   1253c:	andeq	ip, r2, ip, rrx
   12540:	b	124e0 <_start@@Base+0x8c>

00012544 <dbg_emitter@@Base>:
   12544:	push	{fp, lr}
   12548:	mov	fp, sp
   1254c:	sub	sp, sp, #40	; 0x28
   12550:	ldr	ip, [fp, #8]
   12554:	ldr	lr, [pc, #256]	; 1265c <dbg_emitter@@Base+0x118>
   12558:	add	lr, pc, lr
   1255c:	str	r0, [fp, #-4]
   12560:	str	r1, [fp, #-8]
   12564:	str	r2, [fp, #-12]
   12568:	str	r3, [fp, #-16]
   1256c:	ldr	r1, [fp, #-12]
   12570:	ldr	r2, [fp, #-16]
   12574:	ldr	r3, [fp, #8]
   12578:	mov	r0, lr
   1257c:	str	ip, [sp, #16]
   12580:	bl	12394 <printf@plt>
   12584:	movw	r1, #0
   12588:	str	r1, [sp, #20]
   1258c:	str	r0, [sp, #12]
   12590:	ldr	r0, [sp, #20]
   12594:	ldr	r1, [fp, #-12]
   12598:	cmp	r0, r1
   1259c:	bge	12650 <dbg_emitter@@Base+0x10c>
   125a0:	ldr	r0, [pc, #184]	; 12660 <dbg_emitter@@Base+0x11c>
   125a4:	ldr	r0, [pc, r0]
   125a8:	ldr	r1, [fp, #-8]
   125ac:	ldr	r2, [sp, #20]
   125b0:	add	r1, r1, r2, lsl #3
   125b4:	ldr	r1, [r1]
   125b8:	cmp	r1, r0
   125bc:	bne	125e4 <dbg_emitter@@Base+0xa0>
   125c0:	ldr	r0, [pc, #156]	; 12664 <dbg_emitter@@Base+0x120>
   125c4:	add	r0, pc, r0
   125c8:	ldr	r1, [fp, #-16]
   125cc:	ldr	r2, [fp, #-8]
   125d0:	ldr	r3, [sp, #20]
   125d4:	add	r2, r2, r3, lsl #3
   125d8:	ldr	r2, [r2, #4]
   125dc:	bl	12394 <printf@plt>
   125e0:	str	r0, [sp, #8]
   125e4:	ldr	r0, [fp, #-8]
   125e8:	ldr	r1, [sp, #20]
   125ec:	add	r0, r0, r1, lsl #3
   125f0:	ldr	r0, [r0]
   125f4:	movw	r1, #0
   125f8:	cmp	r0, r1
   125fc:	bne	12624 <dbg_emitter@@Base+0xe0>
   12600:	ldr	r0, [pc, #96]	; 12668 <dbg_emitter@@Base+0x124>
   12604:	add	r0, pc, r0
   12608:	ldr	r1, [fp, #-16]
   1260c:	ldr	r2, [fp, #-8]
   12610:	ldr	r3, [sp, #20]
   12614:	add	r2, r2, r3, lsl #3
   12618:	ldr	r2, [r2, #4]
   1261c:	bl	12394 <printf@plt>
   12620:	str	r0, [sp, #4]
   12624:	ldr	r0, [fp, #-8]
   12628:	ldr	r1, [sp, #20]
   1262c:	add	r0, r0, r1, lsl #3
   12630:	ldr	r0, [r0, #4]
   12634:	ldr	r1, [fp, #-16]
   12638:	add	r0, r1, r0
   1263c:	str	r0, [fp, #-16]
   12640:	ldr	r0, [sp, #20]
   12644:	add	r0, r0, #1
   12648:	str	r0, [sp, #20]
   1264c:	b	12590 <dbg_emitter@@Base+0x4c>
   12650:	movw	r0, #0
   12654:	mov	sp, fp
   12658:	pop	{fp, pc}
   1265c:	andeq	r7, r0, r8, lsr #31
   12660:	andeq	r9, r1, r0, lsr #21
   12664:	andeq	r7, r0, sp, ror #30
   12668:	andeq	r7, r0, lr, asr #30

0001266c <debug_test@@Base>:
   1266c:	push	{r4, r5, fp, lr}
   12670:	add	fp, sp, #8
   12674:	sub	sp, sp, #312	; 0x138
   12678:	ldr	r0, [pc, #188]	; 1273c <debug_test@@Base+0xd0>
   1267c:	add	r0, pc, r0
   12680:	add	r1, sp, #36	; 0x24
   12684:	str	r0, [sp, #32]
   12688:	mov	r0, r1
   1268c:	movw	r1, #0
   12690:	and	r1, r1, #255	; 0xff
   12694:	movw	r2, #40	; 0x28
   12698:	bl	12418 <memset@plt>
   1269c:	add	r0, sp, #80	; 0x50
   126a0:	str	r0, [sp, #76]	; 0x4c
   126a4:	ldr	r0, [sp, #32]
   126a8:	bl	12394 <printf@plt>
   126ac:	ldr	r1, [pc, #132]	; 12738 <debug_test@@Base+0xcc>
   126b0:	ldr	r1, [pc, r1]
   126b4:	ldr	r2, [sp, #76]	; 0x4c
   126b8:	str	r0, [sp, #28]
   126bc:	mov	r0, r2
   126c0:	movw	r2, #0
   126c4:	str	r2, [sp, #24]
   126c8:	ldr	r3, [sp, #24]
   126cc:	ldr	lr, [sp, #24]
   126d0:	str	lr, [sp]
   126d4:	bl	13c40 <flatcc_builder_custom_init@@Base>
   126d8:	add	r1, sp, #36	; 0x24
   126dc:	ldr	r2, [sp, #76]	; 0x4c
   126e0:	ldr	r3, [sp, #76]	; 0x4c
   126e4:	str	r0, [sp, #20]
   126e8:	mov	r0, r3
   126ec:	movw	r3, #10
   126f0:	str	r2, [sp, #16]
   126f4:	mov	r2, r3
   126f8:	bl	127e0 <debug_test@@Base+0x174>
   126fc:	mov	r1, sp
   12700:	str	r0, [r1, #4]
   12704:	mov	r0, #1
   12708:	str	r0, [r1]
   1270c:	mov	r2, #42	; 0x2a
   12710:	mov	r3, #0
   12714:	ldr	r0, [sp, #16]
   12718:	bl	12740 <debug_test@@Base+0xd4>
   1271c:	ldr	r1, [sp, #76]	; 0x4c
   12720:	str	r0, [sp, #12]
   12724:	mov	r0, r1
   12728:	bl	13fb8 <flatcc_builder_clear@@Base>
   1272c:	movw	r0, #0
   12730:	sub	sp, fp, #8
   12734:	pop	{r4, r5, fp, pc}
   12738:	muleq	r1, r8, r9
   1273c:	andeq	r7, r0, r4, lsl #30
   12740:	push	{r4, sl, fp, lr}
   12744:	add	fp, sp, #8
   12748:	sub	sp, sp, #40	; 0x28
   1274c:	ldr	r1, [fp, #12]
   12750:	ldr	ip, [fp, #8]
   12754:	str	r0, [fp, #-16]
   12758:	str	r3, [sp, #28]
   1275c:	str	r2, [sp, #24]
   12760:	strb	ip, [sp, #23]
   12764:	ldr	r0, [fp, #-16]
   12768:	movw	r2, #0
   1276c:	str	r1, [sp, #16]
   12770:	mov	r1, r2
   12774:	bl	1336c <main@@Base+0x4c>
   12778:	cmp	r0, #0
   1277c:	beq	1278c <debug_test@@Base+0x120>
   12780:	movw	r0, #0
   12784:	str	r0, [fp, #-12]
   12788:	b	127d4 <debug_test@@Base+0x168>
   1278c:	ldr	r0, [fp, #-16]
   12790:	mov	r1, r0
   12794:	ldr	r2, [sp, #24]
   12798:	ldr	r3, [sp, #28]
   1279c:	ldrb	ip, [sp, #23]
   127a0:	ldr	lr, [fp, #12]
   127a4:	mov	r4, sp
   127a8:	str	lr, [r4, #4]
   127ac:	uxtb	ip, ip
   127b0:	str	ip, [r4]
   127b4:	str	r1, [sp, #12]
   127b8:	bl	133c8 <main@@Base+0xa8>
   127bc:	ldr	r1, [sp, #12]
   127c0:	str	r0, [sp, #8]
   127c4:	mov	r0, r1
   127c8:	ldr	r1, [sp, #8]
   127cc:	bl	133a0 <main@@Base+0x80>
   127d0:	str	r0, [fp, #-12]
   127d4:	ldr	r0, [fp, #-12]
   127d8:	sub	sp, fp, #8
   127dc:	pop	{r4, sl, fp, pc}
   127e0:	push	{fp, lr}
   127e4:	mov	fp, sp
   127e8:	sub	sp, sp, #24
   127ec:	ldr	r3, [pc, #64]	; 12834 <debug_test@@Base+0x1c8>
   127f0:	str	r0, [fp, #-4]
   127f4:	str	r1, [fp, #-8]
   127f8:	str	r2, [sp, #12]
   127fc:	ldr	r0, [fp, #-4]
   12800:	ldr	r1, [fp, #-8]
   12804:	ldr	r2, [sp, #12]
   12808:	movw	ip, #4
   1280c:	str	r3, [sp, #8]
   12810:	mov	r3, ip
   12814:	movw	ip, #4
   12818:	uxth	ip, ip
   1281c:	str	ip, [sp]
   12820:	ldr	ip, [sp, #8]
   12824:	str	ip, [sp, #4]
   12828:	bl	17430 <flatcc_builder_create_vector@@Base>
   1282c:	mov	sp, fp
   12830:	pop	{fp, pc}
   12834:	svccc	0x00ffffff

00012838 <emit_test@@Base>:
   12838:	push	{r4, r5, fp, lr}
   1283c:	add	fp, sp, #8
   12840:	sub	sp, sp, #384	; 0x180
   12844:	ldr	r0, [pc, #920]	; 12be4 <emit_test@@Base+0x3ac>
   12848:	add	r0, pc, r0
   1284c:	ldr	r1, [pc, #916]	; 12be8 <emit_test@@Base+0x3b0>
   12850:	add	r1, pc, r1
   12854:	sub	r2, fp, #71	; 0x47
   12858:	str	r0, [sp, #36]	; 0x24
   1285c:	mov	r0, r2
   12860:	movw	r2, #59	; 0x3b
   12864:	bl	123ac <memcpy@plt>
   12868:	ldr	r0, [sp, #36]	; 0x24
   1286c:	ldr	r1, [r0]
   12870:	str	r1, [sp, #52]	; 0x34
   12874:	ldr	r1, [r0, #4]
   12878:	str	r1, [sp, #56]	; 0x38
   1287c:	ldr	r1, [r0, #8]
   12880:	str	r1, [sp, #60]	; 0x3c
   12884:	ldr	r1, [r0, #12]
   12888:	str	r1, [sp, #64]	; 0x40
   1288c:	add	r1, sp, #76	; 0x4c
   12890:	str	r1, [sp, #72]	; 0x48
   12894:	ldr	r0, [sp, #72]	; 0x48
   12898:	bl	13d0c <flatcc_builder_init@@Base>
   1289c:	ldr	r1, [sp, #72]	; 0x48
   128a0:	str	r0, [sp, #32]
   128a4:	mov	r0, r1
   128a8:	bl	195ec <flatcc_builder_get_emit_context@@Base>
   128ac:	add	r1, sp, #52	; 0x34
   128b0:	str	r0, [fp, #-84]	; 0xffffffac
   128b4:	ldr	r0, [sp, #72]	; 0x48
   128b8:	movw	r2, #4
   128bc:	bl	127e0 <debug_test@@Base+0x174>
   128c0:	str	r0, [sp, #68]	; 0x44
   128c4:	ldr	r0, [sp, #72]	; 0x48
   128c8:	ldr	r1, [sp, #68]	; 0x44
   128cc:	mov	r2, sp
   128d0:	str	r1, [r2, #4]
   128d4:	mov	r1, #1
   128d8:	str	r1, [r2]
   128dc:	mov	r2, #42	; 0x2a
   128e0:	mov	r3, #0
   128e4:	bl	12740 <debug_test@@Base+0xd4>
   128e8:	ldr	r1, [fp, #-84]	; 0xffffffac
   128ec:	str	r0, [sp, #28]
   128f0:	mov	r0, r1
   128f4:	sub	r1, fp, #76	; 0x4c
   128f8:	bl	12c6c <emit_test@@Base+0x434>
   128fc:	str	r0, [fp, #-80]	; 0xffffffb0
   12900:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12904:	movw	r1, #0
   12908:	cmp	r0, r1
   1290c:	bne	1291c <emit_test@@Base+0xe4>
   12910:	mvn	r0, #0
   12914:	str	r0, [fp, #-12]
   12918:	b	12bd8 <emit_test@@Base+0x3a0>
   1291c:	b	12920 <emit_test@@Base+0xe8>
   12920:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12924:	ldr	r1, [fp, #-84]	; 0xffffffac
   12928:	str	r0, [sp, #24]
   1292c:	mov	r0, r1
   12930:	bl	12cf0 <emit_test@@Base+0x4b8>
   12934:	ldr	r1, [sp, #24]
   12938:	cmp	r1, r0
   1293c:	beq	12960 <emit_test@@Base+0x128>
   12940:	ldr	r0, [pc, #676]	; 12bec <emit_test@@Base+0x3b4>
   12944:	add	r0, pc, r0
   12948:	ldr	r1, [pc, #672]	; 12bf0 <emit_test@@Base+0x3b8>
   1294c:	add	r1, pc, r1
   12950:	ldr	r2, [pc, #668]	; 12bf4 <emit_test@@Base+0x3bc>
   12954:	add	r3, pc, r2
   12958:	movw	r2, #100	; 0x64
   1295c:	bl	12448 <__assert_fail@plt>
   12960:	b	12964 <emit_test@@Base+0x12c>
   12964:	b	12968 <emit_test@@Base+0x130>
   12968:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1296c:	ldr	r1, [sp, #72]	; 0x48
   12970:	str	r0, [sp, #20]
   12974:	mov	r0, r1
   12978:	bl	18fe4 <flatcc_builder_get_buffer_size@@Base>
   1297c:	ldr	r1, [sp, #20]
   12980:	cmp	r1, r0
   12984:	beq	129a8 <emit_test@@Base+0x170>
   12988:	ldr	r0, [pc, #616]	; 12bf8 <emit_test@@Base+0x3c0>
   1298c:	add	r0, pc, r0
   12990:	ldr	r1, [pc, #612]	; 12bfc <emit_test@@Base+0x3c4>
   12994:	add	r1, pc, r1
   12998:	ldr	r2, [pc, #608]	; 12c00 <emit_test@@Base+0x3c8>
   1299c:	add	r3, pc, r2
   129a0:	movw	r2, #101	; 0x65
   129a4:	bl	12448 <__assert_fail@plt>
   129a8:	b	129ac <emit_test@@Base+0x174>
   129ac:	ldr	r0, [pc, #600]	; 12c0c <emit_test@@Base+0x3d4>
   129b0:	add	r1, pc, r0
   129b4:	ldr	r0, [pc, #596]	; 12c10 <emit_test@@Base+0x3d8>
   129b8:	ldr	r0, [pc, r0]
   129bc:	ldr	r0, [r0]
   129c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   129c4:	bl	12400 <fprintf@plt>
   129c8:	ldr	r1, [pc, #564]	; 12c04 <emit_test@@Base+0x3cc>
   129cc:	add	r1, pc, r1
   129d0:	ldr	r2, [pc, #560]	; 12c08 <emit_test@@Base+0x3d0>
   129d4:	ldr	r2, [pc, r2]
   129d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   129e0:	ldr	r2, [r2]
   129e4:	str	r0, [sp, #16]
   129e8:	mov	r0, r1
   129ec:	mov	r1, lr
   129f0:	str	r2, [sp, #12]
   129f4:	mov	r2, r3
   129f8:	ldr	r3, [sp, #12]
   129fc:	bl	12d08 <emit_test@@Base+0x4d0>
   12a00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a04:	cmp	r0, #58	; 0x3a
   12a08:	beq	12a2c <emit_test@@Base+0x1f4>
   12a0c:	ldr	r0, [pc, #512]	; 12c14 <emit_test@@Base+0x3dc>
   12a10:	add	r0, pc, r0
   12a14:	ldr	r1, [pc, #508]	; 12c18 <emit_test@@Base+0x3e0>
   12a18:	add	r1, pc, r1
   12a1c:	ldr	r2, [pc, #504]	; 12c1c <emit_test@@Base+0x3e4>
   12a20:	add	r3, pc, r2
   12a24:	movw	r2, #106	; 0x6a
   12a28:	bl	12448 <__assert_fail@plt>
   12a2c:	b	12a30 <emit_test@@Base+0x1f8>
   12a30:	b	12a34 <emit_test@@Base+0x1fc>
   12a34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a38:	movw	r1, #58	; 0x3a
   12a3c:	cmp	r1, r0
   12a40:	beq	12a64 <emit_test@@Base+0x22c>
   12a44:	ldr	r0, [pc, #468]	; 12c20 <emit_test@@Base+0x3e8>
   12a48:	add	r0, pc, r0
   12a4c:	ldr	r1, [pc, #464]	; 12c24 <emit_test@@Base+0x3ec>
   12a50:	add	r1, pc, r1
   12a54:	ldr	r2, [pc, #460]	; 12c28 <emit_test@@Base+0x3f0>
   12a58:	add	r3, pc, r2
   12a5c:	movw	r2, #107	; 0x6b
   12a60:	bl	12448 <__assert_fail@plt>
   12a64:	b	12a68 <emit_test@@Base+0x230>
   12a68:	b	12a6c <emit_test@@Base+0x234>
   12a6c:	sub	r1, fp, #71	; 0x47
   12a70:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12a74:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12a78:	bl	123b8 <memcmp@plt>
   12a7c:	movw	r1, #0
   12a80:	cmp	r1, r0
   12a84:	beq	12aa8 <emit_test@@Base+0x270>
   12a88:	ldr	r0, [pc, #412]	; 12c2c <emit_test@@Base+0x3f4>
   12a8c:	add	r0, pc, r0
   12a90:	ldr	r1, [pc, #408]	; 12c30 <emit_test@@Base+0x3f8>
   12a94:	add	r1, pc, r1
   12a98:	ldr	r2, [pc, #404]	; 12c34 <emit_test@@Base+0x3fc>
   12a9c:	add	r3, pc, r2
   12aa0:	movw	r2, #108	; 0x6c
   12aa4:	bl	12448 <__assert_fail@plt>
   12aa8:	b	12aac <emit_test@@Base+0x274>
   12aac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12ab0:	bl	12f18 <emit_test@@Base+0x6e0>
   12ab4:	str	r0, [sp, #48]	; 0x30
   12ab8:	ldr	r0, [sp, #48]	; 0x30
   12abc:	bl	12f88 <emit_test@@Base+0x750>
   12ac0:	str	r1, [sp, #44]	; 0x2c
   12ac4:	str	r0, [sp, #40]	; 0x28
   12ac8:	ldr	r0, [sp, #40]	; 0x28
   12acc:	ldr	r1, [sp, #44]	; 0x2c
   12ad0:	eor	r0, r0, #42	; 0x2a
   12ad4:	orr	r0, r0, r1
   12ad8:	cmp	r0, #0
   12adc:	beq	12b04 <emit_test@@Base+0x2cc>
   12ae0:	b	12ae4 <emit_test@@Base+0x2ac>
   12ae4:	ldr	r0, [pc, #332]	; 12c38 <emit_test@@Base+0x400>
   12ae8:	add	r0, pc, r0
   12aec:	ldr	r1, [pc, #328]	; 12c3c <emit_test@@Base+0x404>
   12af0:	add	r1, pc, r1
   12af4:	ldr	r2, [pc, #324]	; 12c40 <emit_test@@Base+0x408>
   12af8:	add	r3, pc, r2
   12afc:	movw	r2, #112	; 0x70
   12b00:	bl	12448 <__assert_fail@plt>
   12b04:	b	12b08 <emit_test@@Base+0x2d0>
   12b08:	b	12b0c <emit_test@@Base+0x2d4>
   12b0c:	ldr	r0, [sp, #48]	; 0x30
   12b10:	bl	13090 <emit_test@@Base+0x858>
   12b14:	and	r0, r0, #255	; 0xff
   12b18:	cmp	r0, #1
   12b1c:	beq	12b40 <emit_test@@Base+0x308>
   12b20:	ldr	r0, [pc, #284]	; 12c44 <emit_test@@Base+0x40c>
   12b24:	add	r0, pc, r0
   12b28:	ldr	r1, [pc, #280]	; 12c48 <emit_test@@Base+0x410>
   12b2c:	add	r1, pc, r1
   12b30:	ldr	r2, [pc, #276]	; 12c4c <emit_test@@Base+0x414>
   12b34:	add	r3, pc, r2
   12b38:	movw	r2, #113	; 0x71
   12b3c:	bl	12448 <__assert_fail@plt>
   12b40:	b	12b44 <emit_test@@Base+0x30c>
   12b44:	b	12b48 <emit_test@@Base+0x310>
   12b48:	ldr	r0, [sp, #48]	; 0x30
   12b4c:	bl	131a4 <emit_test@@Base+0x96c>
   12b50:	bl	13184 <emit_test@@Base+0x94c>
   12b54:	cmp	r0, #4
   12b58:	beq	12b7c <emit_test@@Base+0x344>
   12b5c:	ldr	r0, [pc, #236]	; 12c50 <emit_test@@Base+0x418>
   12b60:	add	r0, pc, r0
   12b64:	ldr	r1, [pc, #232]	; 12c54 <emit_test@@Base+0x41c>
   12b68:	add	r1, pc, r1
   12b6c:	ldr	r2, [pc, #228]	; 12c58 <emit_test@@Base+0x420>
   12b70:	add	r3, pc, r2
   12b74:	movw	r2, #114	; 0x72
   12b78:	bl	12448 <__assert_fail@plt>
   12b7c:	b	12b80 <emit_test@@Base+0x348>
   12b80:	b	12b84 <emit_test@@Base+0x34c>
   12b84:	ldr	r0, [sp, #48]	; 0x30
   12b88:	bl	131a4 <emit_test@@Base+0x96c>
   12b8c:	movw	r1, #2
   12b90:	bl	132ac <emit_test@@Base+0xa74>
   12b94:	vldr	s2, [pc, #192]	; 12c5c <emit_test@@Base+0x424>
   12b98:	vcmp.f32	s0, s2
   12b9c:	vmrs	APSR_nzcv, fpscr
   12ba0:	beq	12bc4 <emit_test@@Base+0x38c>
   12ba4:	ldr	r0, [pc, #180]	; 12c60 <emit_test@@Base+0x428>
   12ba8:	add	r0, pc, r0
   12bac:	ldr	r1, [pc, #176]	; 12c64 <emit_test@@Base+0x42c>
   12bb0:	add	r1, pc, r1
   12bb4:	ldr	r2, [pc, #172]	; 12c68 <emit_test@@Base+0x430>
   12bb8:	add	r3, pc, r2
   12bbc:	movw	r2, #115	; 0x73
   12bc0:	bl	12448 <__assert_fail@plt>
   12bc4:	b	12bc8 <emit_test@@Base+0x390>
   12bc8:	ldr	r0, [sp, #72]	; 0x48
   12bcc:	bl	13fb8 <flatcc_builder_clear@@Base>
   12bd0:	movw	r0, #0
   12bd4:	str	r0, [fp, #-12]
   12bd8:	ldr	r0, [fp, #-12]
   12bdc:	sub	sp, fp, #8
   12be0:	pop	{r4, r5, fp, pc}
   12be4:			; <UNDEFINED> instruction: 0x000081b0
   12be8:	andeq	r8, r0, r8, ror #2
   12bec:	muleq	r0, r3, r4
   12bf0:	andeq	r7, r0, r7, lsl #25
   12bf4:	andeq	r7, r0, r1, ror #25
   12bf8:	andeq	r9, r0, fp, asr #8
   12bfc:	andeq	r7, r0, pc, lsr ip
   12c00:	muleq	r0, r9, ip
   12c04:	andeq	r7, r0, sl, lsl #25
   12c08:	andeq	r9, r1, r8, ror r6
   12c0c:	muleq	r0, r5, ip
   12c10:	muleq	r1, r4, r6
   12c14:	andeq	r9, r0, r7, asr #7
   12c18:			; <UNDEFINED> instruction: 0x00007bbb
   12c1c:	andeq	r7, r0, r5, lsl ip
   12c20:	andeq	r9, r0, pc, lsl #7
   12c24:	andeq	r7, r0, r3, lsl #23
   12c28:	ldrdeq	r7, [r0], -sp
   12c2c:	andeq	r9, r0, fp, asr #6
   12c30:	andeq	r7, r0, pc, lsr fp
   12c34:	muleq	r0, r9, fp
   12c38:	andeq	r9, r0, pc, ror #5
   12c3c:	andeq	r7, r0, r3, ror #21
   12c40:	andeq	r7, r0, sp, lsr fp
   12c44:			; <UNDEFINED> instruction: 0x000092b3
   12c48:	andeq	r7, r0, r7, lsr #21
   12c4c:	andeq	r7, r0, r1, lsl #22
   12c50:	andeq	r9, r0, r7, ror r2
   12c54:	andeq	r7, r0, fp, ror #20
   12c58:	andeq	r7, r0, r5, asr #21
   12c5c:	svccc	0x0099999a
   12c60:	andeq	r9, r0, pc, lsr #4
   12c64:	andeq	r7, r0, r3, lsr #20
   12c68:	andeq	r7, r0, sp, ror sl
   12c6c:	sub	sp, sp, #12
   12c70:	str	r0, [sp, #4]
   12c74:	str	r1, [sp]
   12c78:	ldr	r0, [sp, #4]
   12c7c:	ldr	r0, [r0]
   12c80:	ldr	r1, [sp, #4]
   12c84:	ldr	r1, [r1, #4]
   12c88:	cmp	r0, r1
   12c8c:	bne	12cc0 <emit_test@@Base+0x488>
   12c90:	ldr	r0, [sp]
   12c94:	movw	r1, #0
   12c98:	cmp	r0, r1
   12c9c:	beq	12cb0 <emit_test@@Base+0x478>
   12ca0:	ldr	r0, [sp, #4]
   12ca4:	ldr	r0, [r0, #24]
   12ca8:	ldr	r1, [sp]
   12cac:	str	r0, [r1]
   12cb0:	ldr	r0, [sp, #4]
   12cb4:	ldr	r0, [r0, #8]
   12cb8:	str	r0, [sp, #8]
   12cbc:	b	12ce4 <emit_test@@Base+0x4ac>
   12cc0:	ldr	r0, [sp]
   12cc4:	movw	r1, #0
   12cc8:	cmp	r0, r1
   12ccc:	beq	12cdc <emit_test@@Base+0x4a4>
   12cd0:	ldr	r0, [sp]
   12cd4:	movw	r1, #0
   12cd8:	str	r1, [r0]
   12cdc:	movw	r0, #0
   12ce0:	str	r0, [sp, #8]
   12ce4:	ldr	r0, [sp, #8]
   12ce8:	add	sp, sp, #12
   12cec:	bx	lr
   12cf0:	sub	sp, sp, #4
   12cf4:	str	r0, [sp]
   12cf8:	ldr	r0, [sp]
   12cfc:	ldr	r0, [r0, #24]
   12d00:	add	sp, sp, #4
   12d04:	bx	lr
   12d08:	push	{fp, lr}
   12d0c:	mov	fp, sp
   12d10:	sub	sp, sp, #72	; 0x48
   12d14:	str	r0, [fp, #-4]
   12d18:	str	r1, [fp, #-8]
   12d1c:	str	r2, [fp, #-12]
   12d20:	str	r3, [fp, #-16]
   12d24:	ldr	r0, [fp, #-8]
   12d28:	str	r0, [sp, #28]
   12d2c:	ldr	r0, [fp, #-4]
   12d30:	movw	r1, #0
   12d34:	cmp	r0, r1
   12d38:	beq	12d54 <emit_test@@Base+0x51c>
   12d3c:	ldr	r0, [pc, #440]	; 12efc <emit_test@@Base+0x6c4>
   12d40:	add	r1, pc, r0
   12d44:	ldr	r0, [fp, #-16]
   12d48:	ldr	r2, [fp, #-4]
   12d4c:	bl	12400 <fprintf@plt>
   12d50:	str	r0, [sp, #24]
   12d54:	movw	r0, #0
   12d58:	str	r0, [fp, #-20]	; 0xffffffec
   12d5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d60:	ldr	r1, [fp, #-12]
   12d64:	cmp	r0, r1
   12d68:	bcs	12ea4 <emit_test@@Base+0x66c>
   12d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d70:	and	r0, r0, #15
   12d74:	cmp	r0, #0
   12d78:	bne	12dbc <emit_test@@Base+0x584>
   12d7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d80:	cmp	r0, #0
   12d84:	beq	12da0 <emit_test@@Base+0x568>
   12d88:	ldr	r0, [pc, #380]	; 12f0c <emit_test@@Base+0x6d4>
   12d8c:	add	r1, pc, r0
   12d90:	add	r2, sp, #35	; 0x23
   12d94:	ldr	r0, [fp, #-16]
   12d98:	bl	12400 <fprintf@plt>
   12d9c:	str	r0, [sp, #20]
   12da0:	ldr	r0, [pc, #360]	; 12f10 <emit_test@@Base+0x6d8>
   12da4:	add	r1, pc, r0
   12da8:	ldr	r0, [fp, #-16]
   12dac:	ldr	r2, [fp, #-20]	; 0xffffffec
   12db0:	bl	12400 <fprintf@plt>
   12db4:	str	r0, [sp, #16]
   12db8:	b	12de4 <emit_test@@Base+0x5ac>
   12dbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   12dc0:	and	r0, r0, #7
   12dc4:	cmp	r0, #0
   12dc8:	bne	12de0 <emit_test@@Base+0x5a8>
   12dcc:	ldr	r0, [pc, #308]	; 12f08 <emit_test@@Base+0x6d0>
   12dd0:	add	r1, pc, r0
   12dd4:	ldr	r0, [fp, #-16]
   12dd8:	bl	12400 <fprintf@plt>
   12ddc:	str	r0, [sp, #12]
   12de0:	b	12de4 <emit_test@@Base+0x5ac>
   12de4:	ldr	r0, [pc, #296]	; 12f14 <emit_test@@Base+0x6dc>
   12de8:	add	r1, pc, r0
   12dec:	ldr	r0, [fp, #-16]
   12df0:	ldr	r2, [sp, #28]
   12df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12df8:	add	r2, r2, r3
   12dfc:	ldrb	r2, [r2]
   12e00:	bl	12400 <fprintf@plt>
   12e04:	ldr	r1, [sp, #28]
   12e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e0c:	add	r1, r1, r2
   12e10:	ldrb	r1, [r1]
   12e14:	cmp	r1, #32
   12e18:	str	r0, [sp, #8]
   12e1c:	blt	12e38 <emit_test@@Base+0x600>
   12e20:	ldr	r0, [sp, #28]
   12e24:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e28:	add	r0, r0, r1
   12e2c:	ldrb	r0, [r0]
   12e30:	cmp	r0, #126	; 0x7e
   12e34:	ble	12e54 <emit_test@@Base+0x61c>
   12e38:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e3c:	and	r0, r0, #15
   12e40:	add	r1, sp, #35	; 0x23
   12e44:	add	r0, r1, r0
   12e48:	movw	r1, #46	; 0x2e
   12e4c:	strb	r1, [r0]
   12e50:	b	12e78 <emit_test@@Base+0x640>
   12e54:	ldr	r0, [sp, #28]
   12e58:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e5c:	add	r0, r0, r1
   12e60:	ldrb	r0, [r0]
   12e64:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e68:	and	r1, r1, #15
   12e6c:	add	r2, sp, #35	; 0x23
   12e70:	add	r1, r2, r1
   12e74:	strb	r0, [r1]
   12e78:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e7c:	and	r0, r0, #15
   12e80:	add	r0, r0, #1
   12e84:	add	r1, sp, #35	; 0x23
   12e88:	add	r0, r1, r0
   12e8c:	movw	r1, #0
   12e90:	strb	r1, [r0]
   12e94:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e98:	add	r0, r0, #1
   12e9c:	str	r0, [fp, #-20]	; 0xffffffec
   12ea0:	b	12d5c <emit_test@@Base+0x524>
   12ea4:	b	12ea8 <emit_test@@Base+0x670>
   12ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
   12eac:	and	r0, r0, #15
   12eb0:	cmp	r0, #0
   12eb4:	beq	12edc <emit_test@@Base+0x6a4>
   12eb8:	ldr	r0, [pc, #68]	; 12f04 <emit_test@@Base+0x6cc>
   12ebc:	add	r1, pc, r0
   12ec0:	ldr	r0, [fp, #-16]
   12ec4:	bl	12400 <fprintf@plt>
   12ec8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12ecc:	add	r1, r1, #1
   12ed0:	str	r1, [fp, #-20]	; 0xffffffec
   12ed4:	str	r0, [sp, #4]
   12ed8:	b	12ea8 <emit_test@@Base+0x670>
   12edc:	ldr	r0, [pc, #28]	; 12f00 <emit_test@@Base+0x6c8>
   12ee0:	add	r1, pc, r0
   12ee4:	add	r2, sp, #35	; 0x23
   12ee8:	ldr	r0, [fp, #-16]
   12eec:	bl	12400 <fprintf@plt>
   12ef0:	str	r0, [sp]
   12ef4:	mov	sp, fp
   12ef8:	pop	{fp, pc}
   12efc:	andeq	r7, r0, sp, lsr #20
   12f00:	muleq	r0, r2, r8
   12f04:	andeq	r7, r0, sl, asr #17
   12f08:			; <UNDEFINED> instruction: 0x000079b8
   12f0c:	andeq	r7, r0, r6, ror #19
   12f10:	ldrdeq	r7, [r0], -r4
   12f14:	muleq	r0, r8, r9
   12f18:	push	{fp, lr}
   12f1c:	mov	fp, sp
   12f20:	sub	sp, sp, #16
   12f24:	str	r0, [fp, #-4]
   12f28:	movw	r0, #0
   12f2c:	str	r0, [sp, #8]
   12f30:	ldr	r1, [fp, #-4]
   12f34:	cmp	r1, r0
   12f38:	beq	12f50 <emit_test@@Base+0x718>
   12f3c:	ldr	r0, [fp, #-4]
   12f40:	ldr	r1, [sp, #8]
   12f44:	bl	13720 <main@@Base+0x400>
   12f48:	cmp	r0, #0
   12f4c:	bne	12f5c <emit_test@@Base+0x724>
   12f50:	movw	r0, #0
   12f54:	str	r0, [sp, #4]
   12f58:	b	12f7c <emit_test@@Base+0x744>
   12f5c:	ldr	r0, [fp, #-4]
   12f60:	ldr	r1, [fp, #-4]
   12f64:	str	r0, [sp]
   12f68:	mov	r0, r1
   12f6c:	bl	137cc <main@@Base+0x4ac>
   12f70:	ldr	r1, [sp]
   12f74:	add	r0, r1, r0
   12f78:	str	r0, [sp, #4]
   12f7c:	ldr	r0, [sp, #4]
   12f80:	mov	sp, fp
   12f84:	pop	{fp, pc}
   12f88:	push	{fp, lr}
   12f8c:	mov	fp, sp
   12f90:	sub	sp, sp, #32
   12f94:	str	r0, [fp, #-4]
   12f98:	movw	r0, #0
   12f9c:	strh	r0, [fp, #-6]
   12fa0:	ldr	r0, [fp, #-4]
   12fa4:	movw	r1, #0
   12fa8:	cmp	r0, r1
   12fac:	beq	12fb8 <emit_test@@Base+0x780>
   12fb0:	b	12fb4 <emit_test@@Base+0x77c>
   12fb4:	b	12fd8 <emit_test@@Base+0x7a0>
   12fb8:	ldr	r0, [pc, #196]	; 13084 <emit_test@@Base+0x84c>
   12fbc:	add	r0, pc, r0
   12fc0:	ldr	r1, [pc, #192]	; 13088 <emit_test@@Base+0x850>
   12fc4:	add	r1, pc, r1
   12fc8:	ldr	r2, [pc, #188]	; 1308c <emit_test@@Base+0x854>
   12fcc:	add	r3, pc, r2
   12fd0:	movw	r2, #41	; 0x29
   12fd4:	bl	12448 <__assert_fail@plt>
   12fd8:	mov	r0, #0
   12fdc:	strh	r0, [fp, #-8]
   12fe0:	ldr	r0, [fp, #-4]
   12fe4:	str	r0, [sp, #16]
   12fe8:	bl	13850 <main@@Base+0x530>
   12fec:	ldr	lr, [sp, #16]
   12ff0:	sub	r0, lr, r0
   12ff4:	str	r0, [fp, #-12]
   12ff8:	ldr	r0, [fp, #-12]
   12ffc:	bl	13874 <main@@Base+0x554>
   13000:	ldrh	lr, [fp, #-8]
   13004:	add	lr, lr, #3
   13008:	lsl	lr, lr, #1
   1300c:	cmp	r0, lr
   13010:	bcc	1302c <emit_test@@Base+0x7f4>
   13014:	ldr	r0, [fp, #-12]
   13018:	ldrh	r1, [fp, #-8]
   1301c:	add	r0, r0, r1, lsl #1
   13020:	add	r0, r0, #4
   13024:	bl	13874 <main@@Base+0x554>
   13028:	strh	r0, [fp, #-6]
   1302c:	ldrh	r0, [fp, #-6]
   13030:	cmp	r0, #0
   13034:	beq	13054 <emit_test@@Base+0x81c>
   13038:	ldr	r0, [fp, #-4]
   1303c:	ldrh	r1, [fp, #-6]
   13040:	add	r0, r0, r1
   13044:	bl	1389c <main@@Base+0x57c>
   13048:	str	r0, [sp, #12]
   1304c:	str	r1, [sp, #8]
   13050:	b	13068 <emit_test@@Base+0x830>
   13054:	mov	r0, #0
   13058:	mov	r1, r0
   1305c:	str	r1, [sp, #12]
   13060:	str	r0, [sp, #8]
   13064:	b	13068 <emit_test@@Base+0x830>
   13068:	ldr	r0, [sp, #8]
   1306c:	ldr	r1, [sp, #12]
   13070:	str	r0, [sp, #4]
   13074:	mov	r0, r1
   13078:	ldr	r1, [sp, #4]
   1307c:	mov	sp, fp
   13080:	pop	{fp, pc}
   13084:	andeq	r7, r0, r8, ror #15
   13088:	andeq	r7, r0, r6, lsl #16
   1308c:	andeq	r7, r0, r1, ror r8
   13090:	push	{fp, lr}
   13094:	mov	fp, sp
   13098:	sub	sp, sp, #24
   1309c:	str	r0, [fp, #-4]
   130a0:	movw	r0, #0
   130a4:	strh	r0, [fp, #-6]
   130a8:	ldr	r0, [fp, #-4]
   130ac:	movw	r1, #0
   130b0:	cmp	r0, r1
   130b4:	beq	130c0 <emit_test@@Base+0x888>
   130b8:	b	130bc <emit_test@@Base+0x884>
   130bc:	b	130e0 <emit_test@@Base+0x8a8>
   130c0:	ldr	r0, [pc, #176]	; 13178 <emit_test@@Base+0x940>
   130c4:	add	r0, pc, r0
   130c8:	ldr	r1, [pc, #172]	; 1317c <emit_test@@Base+0x944>
   130cc:	add	r1, pc, r1
   130d0:	ldr	r2, [pc, #168]	; 13180 <emit_test@@Base+0x948>
   130d4:	add	r3, pc, r2
   130d8:	movw	r2, #42	; 0x2a
   130dc:	bl	12448 <__assert_fail@plt>
   130e0:	mov	r0, #1
   130e4:	strh	r0, [fp, #-8]
   130e8:	ldr	r0, [fp, #-4]
   130ec:	str	r0, [sp, #8]
   130f0:	bl	13850 <main@@Base+0x530>
   130f4:	ldr	lr, [sp, #8]
   130f8:	sub	r0, lr, r0
   130fc:	str	r0, [sp, #12]
   13100:	ldr	r0, [sp, #12]
   13104:	bl	13874 <main@@Base+0x554>
   13108:	ldrh	lr, [fp, #-8]
   1310c:	add	lr, lr, #3
   13110:	lsl	lr, lr, #1
   13114:	cmp	r0, lr
   13118:	bcc	13134 <emit_test@@Base+0x8fc>
   1311c:	ldr	r0, [sp, #12]
   13120:	ldrh	r1, [fp, #-8]
   13124:	add	r0, r0, r1, lsl #1
   13128:	add	r0, r0, #4
   1312c:	bl	13874 <main@@Base+0x554>
   13130:	strh	r0, [fp, #-6]
   13134:	ldrh	r0, [fp, #-6]
   13138:	cmp	r0, #0
   1313c:	beq	1315c <emit_test@@Base+0x924>
   13140:	ldr	r0, [fp, #-4]
   13144:	ldrh	r1, [fp, #-6]
   13148:	add	r0, r0, r1
   1314c:	bl	13914 <main@@Base+0x5f4>
   13150:	and	r0, r0, #255	; 0xff
   13154:	str	r0, [sp, #4]
   13158:	b	13168 <emit_test@@Base+0x930>
   1315c:	movw	r0, #0
   13160:	str	r0, [sp, #4]
   13164:	b	13168 <emit_test@@Base+0x930>
   13168:	ldr	r0, [sp, #4]
   1316c:	and	r0, r0, #255	; 0xff
   13170:	mov	sp, fp
   13174:	pop	{fp, pc}
   13178:	andeq	r7, r0, r0, ror #13
   1317c:	strdeq	r7, [r0], -lr
   13180:	andeq	r7, r0, r9, lsl #15
   13184:	push	{fp, lr}
   13188:	mov	fp, sp
   1318c:	sub	sp, sp, #8
   13190:	str	r0, [sp, #4]
   13194:	ldr	r0, [sp, #4]
   13198:	bl	13950 <main@@Base+0x630>
   1319c:	mov	sp, fp
   131a0:	pop	{fp, pc}
   131a4:	push	{fp, lr}
   131a8:	mov	fp, sp
   131ac:	sub	sp, sp, #32
   131b0:	str	r0, [fp, #-8]
   131b4:	movw	r0, #0
   131b8:	strh	r0, [fp, #-14]
   131bc:	ldr	r0, [fp, #-8]
   131c0:	movw	r1, #0
   131c4:	cmp	r0, r1
   131c8:	beq	131d4 <emit_test@@Base+0x99c>
   131cc:	b	131d0 <emit_test@@Base+0x998>
   131d0:	b	131f4 <emit_test@@Base+0x9bc>
   131d4:	ldr	r0, [pc, #196]	; 132a0 <emit_test@@Base+0xa68>
   131d8:	add	r0, pc, r0
   131dc:	ldr	r1, [pc, #192]	; 132a4 <emit_test@@Base+0xa6c>
   131e0:	add	r1, pc, r1
   131e4:	ldr	r2, [pc, #188]	; 132a8 <emit_test@@Base+0xa70>
   131e8:	add	r3, pc, r2
   131ec:	movw	r2, #43	; 0x2b
   131f0:	bl	12448 <__assert_fail@plt>
   131f4:	mov	r0, #2
   131f8:	strh	r0, [sp, #16]
   131fc:	ldr	r0, [fp, #-8]
   13200:	str	r0, [sp, #8]
   13204:	bl	13850 <main@@Base+0x530>
   13208:	ldr	lr, [sp, #8]
   1320c:	sub	r0, lr, r0
   13210:	str	r0, [sp, #12]
   13214:	ldr	r0, [sp, #12]
   13218:	bl	13874 <main@@Base+0x554>
   1321c:	ldrh	lr, [sp, #16]
   13220:	add	lr, lr, #3
   13224:	lsl	lr, lr, #1
   13228:	cmp	r0, lr
   1322c:	bcc	13248 <emit_test@@Base+0xa10>
   13230:	ldr	r0, [sp, #12]
   13234:	ldrh	r1, [sp, #16]
   13238:	add	r0, r0, r1, lsl #1
   1323c:	add	r0, r0, #4
   13240:	bl	13874 <main@@Base+0x554>
   13244:	strh	r0, [fp, #-14]
   13248:	ldrsh	r0, [fp, #-14]
   1324c:	cmp	r0, #0
   13250:	beq	1328c <emit_test@@Base+0xa54>
   13254:	ldr	r0, [fp, #-8]
   13258:	ldrh	r1, [fp, #-14]
   1325c:	add	r0, r0, r1
   13260:	str	r0, [fp, #-12]
   13264:	ldr	r0, [fp, #-12]
   13268:	add	r0, r0, #4
   1326c:	ldr	r1, [fp, #-12]
   13270:	str	r0, [sp, #4]
   13274:	mov	r0, r1
   13278:	bl	137cc <main@@Base+0x4ac>
   1327c:	ldr	r1, [sp, #4]
   13280:	add	r0, r1, r0
   13284:	str	r0, [fp, #-4]
   13288:	b	13294 <emit_test@@Base+0xa5c>
   1328c:	movw	r0, #0
   13290:	str	r0, [fp, #-4]
   13294:	ldr	r0, [fp, #-4]
   13298:	mov	sp, fp
   1329c:	pop	{fp, pc}
   132a0:	andeq	r7, r0, ip, asr #11
   132a4:	andeq	r7, r0, sl, ror #11
   132a8:	muleq	r0, r7, r6
   132ac:	push	{fp, lr}
   132b0:	mov	fp, sp
   132b4:	sub	sp, sp, #8
   132b8:	str	r0, [sp, #4]
   132bc:	str	r1, [sp]
   132c0:	ldr	r0, [sp, #4]
   132c4:	bl	13950 <main@@Base+0x630>
   132c8:	ldr	r1, [sp]
   132cc:	cmp	r0, r1
   132d0:	bls	132dc <emit_test@@Base+0xaa4>
   132d4:	b	132d8 <emit_test@@Base+0xaa0>
   132d8:	b	132fc <emit_test@@Base+0xac4>
   132dc:	ldr	r0, [pc, #48]	; 13314 <emit_test@@Base+0xadc>
   132e0:	add	r0, pc, r0
   132e4:	ldr	r1, [pc, #44]	; 13318 <emit_test@@Base+0xae0>
   132e8:	add	r1, pc, r1
   132ec:	ldr	r2, [pc, #40]	; 1331c <emit_test@@Base+0xae4>
   132f0:	add	r3, pc, r2
   132f4:	movw	r2, #403	; 0x193
   132f8:	bl	12448 <__assert_fail@plt>
   132fc:	ldr	r0, [sp, #4]
   13300:	ldr	r1, [sp]
   13304:	add	r0, r0, r1, lsl #2
   13308:	bl	139a0 <main@@Base+0x680>
   1330c:	mov	sp, fp
   13310:	pop	{fp, pc}
   13314:	andeq	r7, r0, r5, ror #11
   13318:	andeq	r7, r0, r4, lsl r6
   1331c:	andeq	r7, r0, r8, lsl #13

00013320 <main@@Base>:
   13320:	push	{fp, lr}
   13324:	mov	fp, sp
   13328:	sub	sp, sp, #16
   1332c:	movw	r2, #0
   13330:	str	r2, [fp, #-4]
   13334:	str	r0, [sp, #8]
   13338:	str	r1, [sp, #4]
   1333c:	str	r2, [sp]
   13340:	bl	1266c <debug_test@@Base>
   13344:	ldr	r1, [sp]
   13348:	orr	r0, r1, r0
   1334c:	str	r0, [sp]
   13350:	bl	12838 <emit_test@@Base>
   13354:	ldr	r1, [sp]
   13358:	orr	r0, r1, r0
   1335c:	str	r0, [sp]
   13360:	ldr	r0, [sp]
   13364:	mov	sp, fp
   13368:	pop	{fp, pc}
   1336c:	push	{fp, lr}
   13370:	mov	fp, sp
   13374:	sub	sp, sp, #8
   13378:	str	r0, [sp, #4]
   1337c:	str	r1, [sp]
   13380:	ldr	r0, [sp, #4]
   13384:	ldr	r1, [sp]
   13388:	movw	r2, #0
   1338c:	uxth	r2, r2
   13390:	movw	r3, #0
   13394:	bl	14e50 <flatcc_builder_start_buffer@@Base>
   13398:	mov	sp, fp
   1339c:	pop	{fp, pc}
   133a0:	push	{fp, lr}
   133a4:	mov	fp, sp
   133a8:	sub	sp, sp, #8
   133ac:	str	r0, [sp, #4]
   133b0:	str	r1, [sp]
   133b4:	ldr	r0, [sp, #4]
   133b8:	ldr	r1, [sp]
   133bc:	bl	15194 <flatcc_builder_end_buffer@@Base>
   133c0:	mov	sp, fp
   133c4:	pop	{fp, pc}
   133c8:	push	{fp, lr}
   133cc:	mov	fp, sp
   133d0:	sub	sp, sp, #24
   133d4:	ldr	r1, [fp, #12]
   133d8:	ldr	ip, [fp, #8]
   133dc:	str	r0, [fp, #-8]
   133e0:	str	r3, [sp, #12]
   133e4:	str	r2, [sp, #8]
   133e8:	strb	ip, [sp, #7]
   133ec:	ldr	r0, [fp, #-8]
   133f0:	str	r1, [sp]
   133f4:	bl	13464 <main@@Base+0x144>
   133f8:	cmp	r0, #0
   133fc:	bne	13440 <main@@Base+0x120>
   13400:	ldr	r0, [fp, #-8]
   13404:	ldr	r2, [sp, #8]
   13408:	ldr	r3, [sp, #12]
   1340c:	bl	13488 <main@@Base+0x168>
   13410:	cmp	r0, #0
   13414:	bne	13440 <main@@Base+0x120>
   13418:	ldr	r0, [fp, #-8]
   1341c:	ldr	r1, [fp, #12]
   13420:	bl	13520 <main@@Base+0x200>
   13424:	cmp	r0, #0
   13428:	bne	13440 <main@@Base+0x120>
   1342c:	ldr	r0, [fp, #-8]
   13430:	ldrb	r1, [sp, #7]
   13434:	bl	1358c <main@@Base+0x26c>
   13438:	cmp	r0, #0
   1343c:	beq	1344c <main@@Base+0x12c>
   13440:	movw	r0, #0
   13444:	str	r0, [fp, #-4]
   13448:	b	13458 <main@@Base+0x138>
   1344c:	ldr	r0, [fp, #-8]
   13450:	bl	13614 <main@@Base+0x2f4>
   13454:	str	r0, [fp, #-4]
   13458:	ldr	r0, [fp, #-4]
   1345c:	mov	sp, fp
   13460:	pop	{fp, pc}
   13464:	push	{fp, lr}
   13468:	mov	fp, sp
   1346c:	sub	sp, sp, #8
   13470:	str	r0, [sp, #4]
   13474:	ldr	r0, [sp, #4]
   13478:	movw	r1, #3
   1347c:	bl	16584 <flatcc_builder_start_table@@Base>
   13480:	mov	sp, fp
   13484:	pop	{fp, pc}
   13488:	push	{fp, lr}
   1348c:	mov	fp, sp
   13490:	sub	sp, sp, #24
   13494:	str	r0, [fp, #-8]
   13498:	str	r3, [sp, #12]
   1349c:	str	r2, [sp, #8]
   134a0:	ldr	r0, [sp, #8]
   134a4:	ldr	r2, [sp, #12]
   134a8:	orr	r0, r0, r2
   134ac:	cmp	r0, #0
   134b0:	bne	134c4 <main@@Base+0x1a4>
   134b4:	b	134b8 <main@@Base+0x198>
   134b8:	movw	r0, #0
   134bc:	str	r0, [fp, #-4]
   134c0:	b	13514 <main@@Base+0x1f4>
   134c4:	ldr	r0, [fp, #-8]
   134c8:	movw	r1, #0
   134cc:	movw	r2, #8
   134d0:	movw	r3, #8
   134d4:	uxth	r3, r3
   134d8:	bl	17e3c <flatcc_builder_table_add@@Base>
   134dc:	str	r0, [sp, #4]
   134e0:	movw	r1, #0
   134e4:	cmp	r0, r1
   134e8:	bne	134f8 <main@@Base+0x1d8>
   134ec:	mvn	r0, #0
   134f0:	str	r0, [fp, #-4]
   134f4:	b	13514 <main@@Base+0x1f4>
   134f8:	ldr	r0, [sp, #4]
   134fc:	ldr	r2, [sp, #8]
   13500:	ldr	r3, [sp, #12]
   13504:	bl	13684 <main@@Base+0x364>
   13508:	movw	r2, #0
   1350c:	str	r2, [fp, #-4]
   13510:	str	r0, [sp]
   13514:	ldr	r0, [fp, #-4]
   13518:	mov	sp, fp
   1351c:	pop	{fp, pc}
   13520:	push	{fp, lr}
   13524:	mov	fp, sp
   13528:	sub	sp, sp, #16
   1352c:	str	r0, [fp, #-4]
   13530:	str	r1, [sp, #8]
   13534:	ldr	r0, [sp, #8]
   13538:	cmp	r0, #0
   1353c:	beq	13574 <main@@Base+0x254>
   13540:	ldr	r0, [fp, #-4]
   13544:	movw	r1, #2
   13548:	bl	17d0c <flatcc_builder_table_add_offset@@Base>
   1354c:	str	r0, [sp, #4]
   13550:	movw	r1, #0
   13554:	cmp	r0, r1
   13558:	beq	13574 <main@@Base+0x254>
   1355c:	ldr	r0, [sp, #8]
   13560:	ldr	r1, [sp, #4]
   13564:	str	r0, [r1]
   13568:	movw	r0, #0
   1356c:	str	r0, [sp]
   13570:	b	13580 <main@@Base+0x260>
   13574:	mvn	r0, #0
   13578:	str	r0, [sp]
   1357c:	b	13580 <main@@Base+0x260>
   13580:	ldr	r0, [sp]
   13584:	mov	sp, fp
   13588:	pop	{fp, pc}
   1358c:	push	{fp, lr}
   13590:	mov	fp, sp
   13594:	sub	sp, sp, #24
   13598:	str	r0, [fp, #-8]
   1359c:	strb	r1, [fp, #-9]
   135a0:	ldrb	r0, [fp, #-9]
   135a4:	cmp	r0, #0
   135a8:	bne	135b8 <main@@Base+0x298>
   135ac:	movw	r0, #0
   135b0:	str	r0, [fp, #-4]
   135b4:	b	13608 <main@@Base+0x2e8>
   135b8:	ldr	r0, [fp, #-8]
   135bc:	movw	r1, #1
   135c0:	str	r1, [sp, #4]
   135c4:	ldr	r2, [sp, #4]
   135c8:	movw	r3, #1
   135cc:	uxth	r3, r3
   135d0:	bl	17e3c <flatcc_builder_table_add@@Base>
   135d4:	str	r0, [sp, #8]
   135d8:	movw	r1, #0
   135dc:	cmp	r0, r1
   135e0:	bne	135f0 <main@@Base+0x2d0>
   135e4:	mvn	r0, #0
   135e8:	str	r0, [fp, #-4]
   135ec:	b	13608 <main@@Base+0x2e8>
   135f0:	ldr	r0, [sp, #8]
   135f4:	ldrb	r1, [fp, #-9]
   135f8:	bl	136dc <main@@Base+0x3bc>
   135fc:	movw	r1, #0
   13600:	str	r1, [fp, #-4]
   13604:	str	r0, [sp]
   13608:	ldr	r0, [fp, #-4]
   1360c:	mov	sp, fp
   13610:	pop	{fp, pc}
   13614:	push	{fp, lr}
   13618:	mov	fp, sp
   1361c:	sub	sp, sp, #8
   13620:	ldr	r1, [pc, #76]	; 13674 <main@@Base+0x354>
   13624:	add	r1, pc, r1
   13628:	str	r0, [sp, #4]
   1362c:	ldr	r0, [sp, #4]
   13630:	movw	r2, #0
   13634:	bl	1710c <flatcc_builder_check_required@@Base>
   13638:	cmp	r0, #0
   1363c:	beq	13644 <main@@Base+0x324>
   13640:	b	13664 <main@@Base+0x344>
   13644:	ldr	r0, [pc, #44]	; 13678 <main@@Base+0x358>
   13648:	add	r0, pc, r0
   1364c:	ldr	r1, [pc, #40]	; 1367c <main@@Base+0x35c>
   13650:	add	r1, pc, r1
   13654:	ldr	r2, [pc, #36]	; 13680 <main@@Base+0x360>
   13658:	add	r3, pc, r2
   1365c:	movw	r2, #21
   13660:	bl	12448 <__assert_fail@plt>
   13664:	ldr	r0, [sp, #4]
   13668:	bl	171fc <flatcc_builder_end_table@@Base>
   1366c:	mov	sp, fp
   13670:	pop	{fp, pc}
   13674:	ldrdeq	r7, [r0], -r0
   13678:	andeq	r7, r0, r8, lsl r0
   1367c:	andeq	r7, r0, ip, ror r0
   13680:	andeq	r7, r0, r8, ror #1
   13684:	push	{fp, lr}
   13688:	mov	fp, sp
   1368c:	sub	sp, sp, #16
   13690:	str	r0, [fp, #-4]
   13694:	str	r3, [sp, #4]
   13698:	str	r2, [sp]
   1369c:	ldr	r0, [sp]
   136a0:	ldr	r1, [sp, #4]
   136a4:	bl	136c0 <main@@Base+0x3a0>
   136a8:	ldr	r2, [fp, #-4]
   136ac:	str	r1, [r2, #4]
   136b0:	str	r0, [r2]
   136b4:	ldr	r0, [fp, #-4]
   136b8:	mov	sp, fp
   136bc:	pop	{fp, pc}
   136c0:	sub	sp, sp, #8
   136c4:	str	r0, [sp]
   136c8:	str	r1, [sp, #4]
   136cc:	ldr	r0, [sp]
   136d0:	ldr	r1, [sp, #4]
   136d4:	add	sp, sp, #8
   136d8:	bx	lr
   136dc:	push	{fp, lr}
   136e0:	mov	fp, sp
   136e4:	sub	sp, sp, #8
   136e8:	str	r0, [sp, #4]
   136ec:	strb	r1, [sp, #3]
   136f0:	ldrb	r0, [sp, #3]
   136f4:	bl	1370c <main@@Base+0x3ec>
   136f8:	ldr	r1, [sp, #4]
   136fc:	strb	r0, [r1]
   13700:	ldr	r0, [sp, #4]
   13704:	mov	sp, fp
   13708:	pop	{fp, pc}
   1370c:	sub	sp, sp, #4
   13710:	strb	r0, [sp, #3]
   13714:	ldrb	r0, [sp, #3]
   13718:	add	sp, sp, #4
   1371c:	bx	lr
   13720:	push	{fp, lr}
   13724:	mov	fp, sp
   13728:	sub	sp, sp, #32
   1372c:	str	r0, [fp, #-8]
   13730:	str	r1, [fp, #-12]
   13734:	movw	r0, #0
   13738:	str	r0, [sp, #12]
   1373c:	ldr	r1, [fp, #-12]
   13740:	cmp	r1, r0
   13744:	bne	13754 <main@@Base+0x434>
   13748:	movw	r0, #1
   1374c:	str	r0, [fp, #-4]
   13750:	b	137c0 <main@@Base+0x4a0>
   13754:	add	r0, sp, #12
   13758:	ldr	r1, [fp, #-12]
   1375c:	movw	r2, #4
   13760:	bl	12424 <strncpy@plt>
   13764:	ldr	r1, [sp, #12]
   13768:	str	r0, [sp, #8]
   1376c:	mov	r0, r1
   13770:	bl	137f0 <main@@Base+0x4d0>
   13774:	str	r0, [sp, #12]
   13778:	ldr	r0, [fp, #-8]
   1377c:	add	r0, r0, #4
   13780:	bl	13804 <main@@Base+0x4e4>
   13784:	str	r0, [sp, #16]
   13788:	ldr	r0, [sp, #12]
   1378c:	cmp	r0, #0
   13790:	movw	r0, #1
   13794:	str	r0, [sp, #4]
   13798:	beq	137b4 <main@@Base+0x494>
   1379c:	ldr	r0, [sp, #16]
   137a0:	ldr	r1, [sp, #12]
   137a4:	cmp	r0, r1
   137a8:	movw	r0, #0
   137ac:	moveq	r0, #1
   137b0:	str	r0, [sp, #4]
   137b4:	ldr	r0, [sp, #4]
   137b8:	and	r0, r0, #1
   137bc:	str	r0, [fp, #-4]
   137c0:	ldr	r0, [fp, #-4]
   137c4:	mov	sp, fp
   137c8:	pop	{fp, pc}
   137cc:	push	{fp, lr}
   137d0:	mov	fp, sp
   137d4:	sub	sp, sp, #8
   137d8:	str	r0, [sp, #4]
   137dc:	ldr	r0, [sp, #4]
   137e0:	ldr	r0, [r0]
   137e4:	bl	1383c <main@@Base+0x51c>
   137e8:	mov	sp, fp
   137ec:	pop	{fp, pc}
   137f0:	sub	sp, sp, #4
   137f4:	str	r0, [sp]
   137f8:	ldr	r0, [sp]
   137fc:	add	sp, sp, #4
   13800:	bx	lr
   13804:	push	{fp, lr}
   13808:	mov	fp, sp
   1380c:	sub	sp, sp, #8
   13810:	str	r0, [sp, #4]
   13814:	ldr	r0, [sp, #4]
   13818:	ldr	r0, [r0]
   1381c:	bl	13828 <main@@Base+0x508>
   13820:	mov	sp, fp
   13824:	pop	{fp, pc}
   13828:	sub	sp, sp, #4
   1382c:	str	r0, [sp]
   13830:	ldr	r0, [sp]
   13834:	add	sp, sp, #4
   13838:	bx	lr
   1383c:	sub	sp, sp, #4
   13840:	str	r0, [sp]
   13844:	ldr	r0, [sp]
   13848:	add	sp, sp, #4
   1384c:	bx	lr
   13850:	push	{fp, lr}
   13854:	mov	fp, sp
   13858:	sub	sp, sp, #8
   1385c:	str	r0, [sp, #4]
   13860:	ldr	r0, [sp, #4]
   13864:	ldr	r0, [r0]
   13868:	bl	138d0 <main@@Base+0x5b0>
   1386c:	mov	sp, fp
   13870:	pop	{fp, pc}
   13874:	push	{fp, lr}
   13878:	mov	fp, sp
   1387c:	sub	sp, sp, #8
   13880:	str	r0, [sp, #4]
   13884:	ldr	r0, [sp, #4]
   13888:	ldrh	r0, [r0]
   1388c:	bl	138e4 <main@@Base+0x5c4>
   13890:	uxth	r0, r0
   13894:	mov	sp, fp
   13898:	pop	{fp, pc}
   1389c:	push	{fp, lr}
   138a0:	mov	fp, sp
   138a4:	sub	sp, sp, #8
   138a8:	str	r0, [sp, #4]
   138ac:	ldr	r0, [sp, #4]
   138b0:	ldr	r1, [r0]
   138b4:	ldr	r0, [r0, #4]
   138b8:	str	r0, [sp]
   138bc:	mov	r0, r1
   138c0:	ldr	r1, [sp]
   138c4:	bl	138f8 <main@@Base+0x5d8>
   138c8:	mov	sp, fp
   138cc:	pop	{fp, pc}
   138d0:	sub	sp, sp, #4
   138d4:	str	r0, [sp]
   138d8:	ldr	r0, [sp]
   138dc:	add	sp, sp, #4
   138e0:	bx	lr
   138e4:	sub	sp, sp, #4
   138e8:	strh	r0, [sp, #2]
   138ec:	ldrh	r0, [sp, #2]
   138f0:	add	sp, sp, #4
   138f4:	bx	lr
   138f8:	sub	sp, sp, #8
   138fc:	str	r0, [sp]
   13900:	str	r1, [sp, #4]
   13904:	ldr	r0, [sp]
   13908:	ldr	r1, [sp, #4]
   1390c:	add	sp, sp, #8
   13910:	bx	lr
   13914:	push	{fp, lr}
   13918:	mov	fp, sp
   1391c:	sub	sp, sp, #8
   13920:	str	r0, [sp, #4]
   13924:	ldr	r0, [sp, #4]
   13928:	ldrb	r0, [r0]
   1392c:	bl	1393c <main@@Base+0x61c>
   13930:	and	r0, r0, #255	; 0xff
   13934:	mov	sp, fp
   13938:	pop	{fp, pc}
   1393c:	sub	sp, sp, #4
   13940:	strb	r0, [sp, #3]
   13944:	ldrb	r0, [sp, #3]
   13948:	add	sp, sp, #4
   1394c:	bx	lr
   13950:	push	{fp, lr}
   13954:	mov	fp, sp
   13958:	sub	sp, sp, #8
   1395c:	str	r0, [sp, #4]
   13960:	ldr	r0, [sp, #4]
   13964:	movw	r1, #0
   13968:	cmp	r0, r1
   1396c:	beq	13988 <main@@Base+0x668>
   13970:	ldr	r0, [sp, #4]
   13974:	mvn	r1, #3
   13978:	add	r0, r0, r1
   1397c:	bl	137cc <main@@Base+0x4ac>
   13980:	str	r0, [sp]
   13984:	b	13994 <main@@Base+0x674>
   13988:	movw	r0, #0
   1398c:	str	r0, [sp]
   13990:	b	13994 <main@@Base+0x674>
   13994:	ldr	r0, [sp]
   13998:	mov	sp, fp
   1399c:	pop	{fp, pc}
   139a0:	push	{fp, lr}
   139a4:	mov	fp, sp
   139a8:	sub	sp, sp, #8
   139ac:	str	r0, [sp, #4]
   139b0:	ldr	r0, [sp, #4]
   139b4:	vldr	s0, [r0]
   139b8:	bl	139c4 <main@@Base+0x6a4>
   139bc:	mov	sp, fp
   139c0:	pop	{fp, pc}
   139c4:	sub	sp, sp, #8
   139c8:	vstr	s0, [sp, #4]
   139cc:	vldr	s0, [sp, #4]
   139d0:	vstr	s0, [sp]
   139d4:	ldr	r0, [sp]
   139d8:	str	r0, [sp]
   139dc:	vldr	s0, [sp]
   139e0:	add	sp, sp, #8
   139e4:	bx	lr

000139e8 <flatcc_builder_default_alloc@@Base>:
   139e8:	push	{fp, lr}
   139ec:	mov	fp, sp
   139f0:	sub	sp, sp, #40	; 0x28
   139f4:	ldr	ip, [fp, #8]
   139f8:	str	r0, [fp, #-8]
   139fc:	str	r1, [fp, #-12]
   13a00:	str	r2, [fp, #-16]
   13a04:	str	r3, [sp, #20]
   13a08:	ldr	r0, [fp, #-16]
   13a0c:	cmp	r0, #0
   13a10:	str	ip, [sp, #8]
   13a14:	bne	13a58 <flatcc_builder_default_alloc@@Base+0x70>
   13a18:	ldr	r0, [fp, #-12]
   13a1c:	ldr	r0, [r0]
   13a20:	movw	r1, #0
   13a24:	cmp	r0, r1
   13a28:	beq	13a4c <flatcc_builder_default_alloc@@Base+0x64>
   13a2c:	ldr	r0, [fp, #-12]
   13a30:	ldr	r0, [r0]
   13a34:	bl	123a0 <free@plt>
   13a38:	ldr	r0, [fp, #-12]
   13a3c:	movw	lr, #0
   13a40:	str	lr, [r0]
   13a44:	ldr	r0, [fp, #-12]
   13a48:	str	lr, [r0, #4]
   13a4c:	movw	r0, #0
   13a50:	str	r0, [fp, #-4]
   13a54:	b	13bc4 <flatcc_builder_default_alloc@@Base+0x1dc>
   13a58:	ldr	r0, [fp, #8]
   13a5c:	sub	r0, r0, #1
   13a60:	cmp	r0, #6
   13a64:	str	r0, [sp, #4]
   13a68:	bhi	13ac8 <flatcc_builder_default_alloc@@Base+0xe0>
   13a6c:	add	r0, pc, #8
   13a70:	ldr	r1, [sp, #4]
   13a74:	ldr	r2, [r0, r1, lsl #2]
   13a78:	add	pc, r0, r2
   13a7c:	andeq	r0, r0, ip, lsl r0
   13a80:	andeq	r0, r0, ip, asr #32
   13a84:	andeq	r0, r0, ip, asr #32
   13a88:	andeq	r0, r0, r4, lsr r0
   13a8c:	andeq	r0, r0, r8, lsr #32
   13a90:	andeq	r0, r0, ip, asr #32
   13a94:	andeq	r0, r0, r0, asr #32
   13a98:	movw	r0, #256	; 0x100
   13a9c:	str	r0, [sp, #12]
   13aa0:	b	13ad0 <flatcc_builder_default_alloc@@Base+0xe8>
   13aa4:	ldr	r0, [fp, #-16]
   13aa8:	str	r0, [sp, #12]
   13aac:	b	13ad0 <flatcc_builder_default_alloc@@Base+0xe8>
   13ab0:	movw	r0, #288	; 0x120
   13ab4:	str	r0, [sp, #12]
   13ab8:	b	13ad0 <flatcc_builder_default_alloc@@Base+0xe8>
   13abc:	movw	r0, #64	; 0x40
   13ac0:	str	r0, [sp, #12]
   13ac4:	b	13ad0 <flatcc_builder_default_alloc@@Base+0xe8>
   13ac8:	movw	r0, #32
   13acc:	str	r0, [sp, #12]
   13ad0:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xec>
   13ad4:	ldr	r0, [sp, #12]
   13ad8:	ldr	r1, [fp, #-16]
   13adc:	cmp	r0, r1
   13ae0:	bcs	13af4 <flatcc_builder_default_alloc@@Base+0x10c>
   13ae4:	ldr	r0, [sp, #12]
   13ae8:	lsl	r0, r0, #1
   13aec:	str	r0, [sp, #12]
   13af0:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xec>
   13af4:	ldr	r0, [fp, #-16]
   13af8:	ldr	r1, [fp, #-12]
   13afc:	ldr	r1, [r1, #4]
   13b00:	cmp	r0, r1
   13b04:	bhi	13b2c <flatcc_builder_default_alloc@@Base+0x144>
   13b08:	ldr	r0, [fp, #-12]
   13b0c:	ldr	r0, [r0, #4]
   13b10:	lsr	r0, r0, #1
   13b14:	ldr	r1, [sp, #12]
   13b18:	cmp	r0, r1
   13b1c:	bcc	13b2c <flatcc_builder_default_alloc@@Base+0x144>
   13b20:	movw	r0, #0
   13b24:	str	r0, [fp, #-4]
   13b28:	b	13bc4 <flatcc_builder_default_alloc@@Base+0x1dc>
   13b2c:	ldr	r0, [fp, #-12]
   13b30:	ldr	r0, [r0]
   13b34:	ldr	r1, [sp, #12]
   13b38:	bl	123c4 <realloc@plt>
   13b3c:	str	r0, [sp, #16]
   13b40:	movw	r1, #0
   13b44:	cmp	r0, r1
   13b48:	bne	13b58 <flatcc_builder_default_alloc@@Base+0x170>
   13b4c:	mvn	r0, #0
   13b50:	str	r0, [fp, #-4]
   13b54:	b	13bc4 <flatcc_builder_default_alloc@@Base+0x1dc>
   13b58:	ldr	r0, [sp, #20]
   13b5c:	cmp	r0, #0
   13b60:	beq	13ba4 <flatcc_builder_default_alloc@@Base+0x1bc>
   13b64:	ldr	r0, [fp, #-12]
   13b68:	ldr	r0, [r0, #4]
   13b6c:	ldr	r1, [sp, #12]
   13b70:	cmp	r0, r1
   13b74:	bcs	13ba4 <flatcc_builder_default_alloc@@Base+0x1bc>
   13b78:	ldr	r0, [sp, #16]
   13b7c:	ldr	r1, [fp, #-12]
   13b80:	ldr	r1, [r1, #4]
   13b84:	add	r0, r0, r1
   13b88:	ldr	r1, [sp, #12]
   13b8c:	ldr	r2, [fp, #-12]
   13b90:	ldr	r2, [r2, #4]
   13b94:	sub	r2, r1, r2
   13b98:	movw	r1, #0
   13b9c:	and	r1, r1, #255	; 0xff
   13ba0:	bl	12418 <memset@plt>
   13ba4:	ldr	r0, [sp, #16]
   13ba8:	ldr	r1, [fp, #-12]
   13bac:	str	r0, [r1]
   13bb0:	ldr	r0, [sp, #12]
   13bb4:	ldr	r1, [fp, #-12]
   13bb8:	str	r0, [r1, #4]
   13bbc:	movw	r0, #0
   13bc0:	str	r0, [fp, #-4]
   13bc4:	ldr	r0, [fp, #-4]
   13bc8:	mov	sp, fp
   13bcc:	pop	{fp, pc}

00013bd0 <flatcc_builder_flush_vtable_cache@@Base>:
   13bd0:	push	{fp, lr}
   13bd4:	mov	fp, sp
   13bd8:	sub	sp, sp, #8
   13bdc:	str	r0, [sp, #4]
   13be0:	ldr	r0, [sp, #4]
   13be4:	add	r0, r0, #52	; 0x34
   13be8:	add	r0, r0, #40	; 0x28
   13bec:	str	r0, [sp]
   13bf0:	ldr	r0, [sp, #4]
   13bf4:	ldr	r0, [r0, #116]	; 0x74
   13bf8:	cmp	r0, #0
   13bfc:	bne	13c04 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   13c00:	b	13c38 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   13c04:	ldr	r0, [sp]
   13c08:	ldr	r0, [r0]
   13c0c:	ldr	r1, [sp]
   13c10:	ldr	r2, [r1, #4]
   13c14:	movw	r1, #0
   13c18:	and	r1, r1, #255	; 0xff
   13c1c:	bl	12418 <memset@plt>
   13c20:	ldr	r0, [sp, #4]
   13c24:	movw	r1, #16
   13c28:	str	r1, [r0, #124]	; 0x7c
   13c2c:	ldr	r0, [sp, #4]
   13c30:	movw	r1, #0
   13c34:	str	r1, [r0, #120]	; 0x78
   13c38:	mov	sp, fp
   13c3c:	pop	{fp, pc}

00013c40 <flatcc_builder_custom_init@@Base>:
   13c40:	push	{fp, lr}
   13c44:	mov	fp, sp
   13c48:	sub	sp, sp, #24
   13c4c:	ldr	ip, [fp, #8]
   13c50:	str	r0, [fp, #-4]
   13c54:	str	r1, [fp, #-8]
   13c58:	str	r2, [sp, #12]
   13c5c:	str	r3, [sp, #8]
   13c60:	ldr	r0, [fp, #-4]
   13c64:	movw	r1, #0
   13c68:	and	r1, r1, #255	; 0xff
   13c6c:	movw	r2, #232	; 0xe8
   13c70:	str	ip, [sp, #4]
   13c74:	bl	12418 <memset@plt>
   13c78:	ldr	r0, [fp, #-8]
   13c7c:	movw	r1, #0
   13c80:	cmp	r0, r1
   13c84:	bne	13cac <flatcc_builder_custom_init@@Base+0x6c>
   13c88:	ldr	r0, [pc, #116]	; 13d04 <flatcc_builder_custom_init@@Base+0xc4>
   13c8c:	ldr	r0, [pc, r0]
   13c90:	ldr	r1, [fp, #-4]
   13c94:	movw	r2, #1
   13c98:	str	r2, [r1, #184]	; 0xb8
   13c9c:	str	r0, [fp, #-8]
   13ca0:	ldr	r0, [fp, #-4]
   13ca4:	add	r0, r0, #188	; 0xbc
   13ca8:	str	r0, [sp, #12]
   13cac:	ldr	r0, [sp, #8]
   13cb0:	movw	r1, #0
   13cb4:	cmp	r0, r1
   13cb8:	bne	13cc8 <flatcc_builder_custom_init@@Base+0x88>
   13cbc:	ldr	r0, [pc, #68]	; 13d08 <flatcc_builder_custom_init@@Base+0xc8>
   13cc0:	ldr	r0, [pc, r0]
   13cc4:	str	r0, [sp, #8]
   13cc8:	ldr	r0, [fp, #8]
   13ccc:	ldr	r1, [fp, #-4]
   13cd0:	str	r0, [r1, #40]	; 0x28
   13cd4:	ldr	r0, [sp, #8]
   13cd8:	ldr	r1, [fp, #-4]
   13cdc:	str	r0, [r1, #48]	; 0x30
   13ce0:	ldr	r0, [sp, #12]
   13ce4:	ldr	r1, [fp, #-4]
   13ce8:	str	r0, [r1, #36]	; 0x24
   13cec:	ldr	r0, [fp, #-8]
   13cf0:	ldr	r1, [fp, #-4]
   13cf4:	str	r0, [r1, #44]	; 0x2c
   13cf8:	movw	r0, #0
   13cfc:	mov	sp, fp
   13d00:	pop	{fp, pc}
   13d04:	andeq	r8, r1, ip, asr #7
   13d08:	muleq	r1, r4, r3

00013d0c <flatcc_builder_init@@Base>:
   13d0c:	push	{fp, lr}
   13d10:	mov	fp, sp
   13d14:	sub	sp, sp, #16
   13d18:	str	r0, [fp, #-4]
   13d1c:	ldr	r0, [fp, #-4]
   13d20:	movw	r1, #0
   13d24:	str	r1, [sp, #8]
   13d28:	ldr	r2, [sp, #8]
   13d2c:	ldr	r3, [sp, #8]
   13d30:	ldr	ip, [sp, #8]
   13d34:	str	ip, [sp]
   13d38:	bl	13c40 <flatcc_builder_custom_init@@Base>
   13d3c:	mov	sp, fp
   13d40:	pop	{fp, pc}

00013d44 <flatcc_builder_custom_reset@@Base>:
   13d44:	push	{r4, sl, fp, lr}
   13d48:	add	fp, sp, #8
   13d4c:	sub	sp, sp, #40	; 0x28
   13d50:	str	r0, [fp, #-16]
   13d54:	str	r1, [fp, #-20]	; 0xffffffec
   13d58:	str	r2, [sp, #24]
   13d5c:	movw	r0, #0
   13d60:	str	r0, [sp, #16]
   13d64:	ldr	r0, [sp, #16]
   13d68:	cmp	r0, #8
   13d6c:	bge	13e78 <flatcc_builder_custom_reset@@Base+0x134>
   13d70:	ldr	r0, [fp, #-16]
   13d74:	add	r0, r0, #52	; 0x34
   13d78:	ldr	r1, [sp, #16]
   13d7c:	add	r0, r0, r1, lsl #3
   13d80:	str	r0, [sp, #20]
   13d84:	ldr	r0, [sp, #20]
   13d88:	ldr	r0, [r0]
   13d8c:	movw	r1, #0
   13d90:	cmp	r0, r1
   13d94:	beq	13e2c <flatcc_builder_custom_reset@@Base+0xe8>
   13d98:	ldr	r0, [sp, #16]
   13d9c:	cmp	r0, #5
   13da0:	beq	13e0c <flatcc_builder_custom_reset@@Base+0xc8>
   13da4:	ldr	r0, [sp, #24]
   13da8:	cmp	r0, #0
   13dac:	beq	13e0c <flatcc_builder_custom_reset@@Base+0xc8>
   13db0:	ldr	r0, [fp, #-16]
   13db4:	ldr	r0, [r0, #48]	; 0x30
   13db8:	ldr	r1, [fp, #-16]
   13dbc:	ldr	r1, [r1, #40]	; 0x28
   13dc0:	ldr	r2, [sp, #20]
   13dc4:	ldr	r3, [sp, #16]
   13dc8:	str	r0, [sp, #12]
   13dcc:	mov	r0, r1
   13dd0:	mov	r1, r2
   13dd4:	movw	r2, #1
   13dd8:	str	r2, [sp, #8]
   13ddc:	ldr	ip, [sp, #8]
   13de0:	str	r3, [sp, #4]
   13de4:	mov	r3, ip
   13de8:	ldr	lr, [sp, #4]
   13dec:	str	lr, [sp]
   13df0:	ldr	r4, [sp, #12]
   13df4:	blx	r4
   13df8:	cmp	r0, #0
   13dfc:	beq	13e0c <flatcc_builder_custom_reset@@Base+0xc8>
   13e00:	mvn	r0, #0
   13e04:	str	r0, [fp, #-12]
   13e08:	b	13f74 <flatcc_builder_custom_reset@@Base+0x230>
   13e0c:	ldr	r0, [sp, #20]
   13e10:	ldr	r0, [r0]
   13e14:	ldr	r1, [sp, #20]
   13e18:	ldr	r2, [r1, #4]
   13e1c:	movw	r1, #0
   13e20:	and	r1, r1, #255	; 0xff
   13e24:	bl	12418 <memset@plt>
   13e28:	b	13e64 <flatcc_builder_custom_reset@@Base+0x120>
   13e2c:	ldr	r0, [sp, #20]
   13e30:	ldr	r0, [r0, #4]
   13e34:	cmp	r0, #0
   13e38:	bne	13e40 <flatcc_builder_custom_reset@@Base+0xfc>
   13e3c:	b	13e60 <flatcc_builder_custom_reset@@Base+0x11c>
   13e40:	ldr	r0, [pc, #312]	; 13f80 <flatcc_builder_custom_reset@@Base+0x23c>
   13e44:	add	r0, pc, r0
   13e48:	ldr	r1, [pc, #308]	; 13f84 <flatcc_builder_custom_reset@@Base+0x240>
   13e4c:	add	r1, pc, r1
   13e50:	ldr	r2, [pc, #304]	; 13f88 <flatcc_builder_custom_reset@@Base+0x244>
   13e54:	add	r3, pc, r2
   13e58:	movw	r2, #434	; 0x1b2
   13e5c:	bl	12448 <__assert_fail@plt>
   13e60:	b	13e64 <flatcc_builder_custom_reset@@Base+0x120>
   13e64:	b	13e68 <flatcc_builder_custom_reset@@Base+0x124>
   13e68:	ldr	r0, [sp, #16]
   13e6c:	add	r0, r0, #1
   13e70:	str	r0, [sp, #16]
   13e74:	b	13d64 <flatcc_builder_custom_reset@@Base+0x20>
   13e78:	ldr	r0, [fp, #-16]
   13e7c:	movw	r1, #0
   13e80:	str	r1, [r0, #120]	; 0x78
   13e84:	ldr	r0, [fp, #-16]
   13e88:	ldr	r0, [r0, #124]	; 0x7c
   13e8c:	cmp	r0, #0
   13e90:	bls	13ea0 <flatcc_builder_custom_reset@@Base+0x15c>
   13e94:	ldr	r0, [fp, #-16]
   13e98:	movw	r1, #16
   13e9c:	str	r1, [r0, #124]	; 0x7c
   13ea0:	ldr	r0, [fp, #-16]
   13ea4:	movw	r1, #0
   13ea8:	strh	r1, [r0, #128]	; 0x80
   13eac:	ldr	r0, [fp, #-16]
   13eb0:	movw	r1, #0
   13eb4:	str	r1, [r0, #136]	; 0x88
   13eb8:	ldr	r0, [fp, #-16]
   13ebc:	str	r1, [r0, #140]	; 0x8c
   13ec0:	ldr	r0, [fp, #-16]
   13ec4:	str	r1, [r0, #156]	; 0x9c
   13ec8:	ldr	r0, [fp, #-16]
   13ecc:	str	r1, [r0, #160]	; 0xa0
   13ed0:	ldr	r0, [fp, #-16]
   13ed4:	str	r1, [r0, #20]
   13ed8:	ldr	r0, [fp, #-16]
   13edc:	str	r1, [r0, #24]
   13ee0:	ldr	r0, [fp, #-16]
   13ee4:	str	r1, [r0, #148]	; 0x94
   13ee8:	ldr	r0, [fp, #-16]
   13eec:	str	r1, [r0, #152]	; 0x98
   13ef0:	ldr	r0, [fp, #-16]
   13ef4:	ldr	r0, [r0, #60]	; 0x3c
   13ef8:	ldr	r2, [fp, #-16]
   13efc:	str	r0, [r2, #16]
   13f00:	ldr	r0, [fp, #-16]
   13f04:	ldr	r0, [r0, #76]	; 0x4c
   13f08:	ldr	r2, [fp, #-16]
   13f0c:	str	r0, [r2]
   13f10:	ldr	r0, [fp, #-16]
   13f14:	ldr	r0, [r0, #52]	; 0x34
   13f18:	ldr	r2, [fp, #-16]
   13f1c:	str	r0, [r2, #4]
   13f20:	ldr	r0, [fp, #-16]
   13f24:	str	r1, [r0, #32]
   13f28:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f2c:	cmp	r0, #0
   13f30:	beq	13f50 <flatcc_builder_custom_reset@@Base+0x20c>
   13f34:	ldr	r0, [fp, #-16]
   13f38:	movw	r1, #0
   13f3c:	str	r1, [r0, #172]	; 0xac
   13f40:	ldr	r0, [fp, #-16]
   13f44:	str	r1, [r0, #176]	; 0xb0
   13f48:	ldr	r0, [fp, #-16]
   13f4c:	str	r1, [r0, #180]	; 0xb4
   13f50:	ldr	r0, [fp, #-16]
   13f54:	ldr	r0, [r0, #184]	; 0xb8
   13f58:	cmp	r0, #0
   13f5c:	beq	13f6c <flatcc_builder_custom_reset@@Base+0x228>
   13f60:	ldr	r0, [fp, #-16]
   13f64:	add	r0, r0, #188	; 0xbc
   13f68:	bl	1991c <flatcc_emitter_reset@@Base>
   13f6c:	movw	r0, #0
   13f70:	str	r0, [fp, #-12]
   13f74:	ldr	r0, [fp, #-12]
   13f78:	sub	sp, fp, #8
   13f7c:	pop	{r4, sl, fp, pc}
   13f80:	andeq	r6, r0, r4, asr #27
   13f84:	andeq	r6, r0, lr, asr #27
   13f88:	andeq	r6, r0, r3, lsr #28

00013f8c <flatcc_builder_reset@@Base>:
   13f8c:	push	{fp, lr}
   13f90:	mov	fp, sp
   13f94:	sub	sp, sp, #8
   13f98:	str	r0, [sp, #4]
   13f9c:	ldr	r0, [sp, #4]
   13fa0:	movw	r1, #0
   13fa4:	str	r1, [sp]
   13fa8:	ldr	r2, [sp]
   13fac:	bl	13d44 <flatcc_builder_custom_reset@@Base>
   13fb0:	mov	sp, fp
   13fb4:	pop	{fp, pc}

00013fb8 <flatcc_builder_clear@@Base>:
   13fb8:	push	{r4, sl, fp, lr}
   13fbc:	add	fp, sp, #8
   13fc0:	sub	sp, sp, #32
   13fc4:	str	r0, [fp, #-12]
   13fc8:	movw	r0, #0
   13fcc:	str	r0, [sp, #20]
   13fd0:	ldr	r0, [sp, #20]
   13fd4:	cmp	r0, #8
   13fd8:	bge	1404c <flatcc_builder_clear@@Base+0x94>
   13fdc:	ldr	r0, [fp, #-12]
   13fe0:	add	r0, r0, #52	; 0x34
   13fe4:	ldr	r1, [sp, #20]
   13fe8:	add	r0, r0, r1, lsl #3
   13fec:	str	r0, [fp, #-16]
   13ff0:	ldr	r0, [fp, #-12]
   13ff4:	ldr	r0, [r0, #48]	; 0x30
   13ff8:	ldr	r1, [fp, #-12]
   13ffc:	ldr	r1, [r1, #40]	; 0x28
   14000:	ldr	r2, [fp, #-16]
   14004:	ldr	r3, [sp, #20]
   14008:	str	r0, [sp, #16]
   1400c:	mov	r0, r1
   14010:	mov	r1, r2
   14014:	movw	r2, #0
   14018:	str	r2, [sp, #12]
   1401c:	ldr	ip, [sp, #12]
   14020:	str	r3, [sp, #8]
   14024:	mov	r3, ip
   14028:	ldr	lr, [sp, #8]
   1402c:	str	lr, [sp]
   14030:	ldr	r4, [sp, #16]
   14034:	blx	r4
   14038:	str	r0, [sp, #4]
   1403c:	ldr	r0, [sp, #20]
   14040:	add	r0, r0, #1
   14044:	str	r0, [sp, #20]
   14048:	b	13fd0 <flatcc_builder_clear@@Base+0x18>
   1404c:	ldr	r0, [fp, #-12]
   14050:	ldr	r0, [r0, #184]	; 0xb8
   14054:	cmp	r0, #0
   14058:	beq	14068 <flatcc_builder_clear@@Base+0xb0>
   1405c:	ldr	r0, [fp, #-12]
   14060:	add	r0, r0, #188	; 0xbc
   14064:	bl	19ab4 <flatcc_emitter_clear@@Base>
   14068:	ldr	r0, [fp, #-12]
   1406c:	movw	r1, #0
   14070:	and	r1, r1, #255	; 0xff
   14074:	movw	r2, #232	; 0xe8
   14078:	bl	12418 <memset@plt>
   1407c:	sub	sp, fp, #8
   14080:	pop	{r4, sl, fp, pc}

00014084 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14084:	push	{fp, lr}
   14088:	mov	fp, sp
   1408c:	sub	sp, sp, #24
   14090:	str	r0, [fp, #-8]
   14094:	str	r1, [sp, #12]
   14098:	ldr	r0, [sp, #12]
   1409c:	add	r0, r0, #4
   140a0:	sub	r0, r0, #1
   140a4:	mvn	r1, #3
   140a8:	and	r0, r0, r1
   140ac:	add	r0, r0, #4
   140b0:	str	r0, [sp, #12]
   140b4:	ldr	r0, [fp, #-8]
   140b8:	ldr	r1, [fp, #-8]
   140bc:	ldr	r2, [r1, #228]	; 0xe4
   140c0:	ldr	r3, [sp, #12]
   140c4:	movw	r1, #7
   140c8:	movw	ip, #0
   140cc:	str	ip, [sp]
   140d0:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   140d4:	str	r0, [sp, #8]
   140d8:	movw	r1, #0
   140dc:	cmp	r0, r1
   140e0:	bne	140f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   140e4:	movw	r0, #0
   140e8:	str	r0, [fp, #-4]
   140ec:	b	1414c <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   140f0:	ldr	r0, [sp, #8]
   140f4:	ldr	r2, [sp, #12]
   140f8:	movw	r1, #0
   140fc:	and	r1, r1, #255	; 0xff
   14100:	bl	12418 <memset@plt>
   14104:	ldr	r0, [fp, #-8]
   14108:	ldr	r0, [r0, #224]	; 0xe0
   1410c:	ldr	r1, [sp, #8]
   14110:	add	r2, r1, #4
   14114:	str	r2, [sp, #8]
   14118:	str	r0, [r1]
   1411c:	ldr	r0, [fp, #-8]
   14120:	ldr	r0, [r0, #228]	; 0xe4
   14124:	add	r0, r0, #4
   14128:	ldr	r1, [fp, #-8]
   1412c:	str	r0, [r1, #224]	; 0xe0
   14130:	ldr	r0, [sp, #12]
   14134:	ldr	r1, [fp, #-8]
   14138:	ldr	r2, [r1, #228]	; 0xe4
   1413c:	add	r0, r2, r0
   14140:	str	r0, [r1, #228]	; 0xe4
   14144:	ldr	r0, [sp, #8]
   14148:	str	r0, [fp, #-4]
   1414c:	ldr	r0, [fp, #-4]
   14150:	mov	sp, fp
   14154:	pop	{fp, pc}
   14158:	push	{fp, lr}
   1415c:	mov	fp, sp
   14160:	sub	sp, sp, #32
   14164:	ldr	ip, [fp, #8]
   14168:	str	r0, [fp, #-4]
   1416c:	str	r1, [fp, #-8]
   14170:	str	r2, [fp, #-12]
   14174:	str	r3, [sp, #16]
   14178:	ldr	r0, [fp, #-4]
   1417c:	add	r0, r0, #52	; 0x34
   14180:	ldr	r1, [fp, #-8]
   14184:	add	r0, r0, r1, lsl #3
   14188:	str	r0, [sp, #12]
   1418c:	ldr	r0, [fp, #-12]
   14190:	ldr	r1, [sp, #16]
   14194:	add	r0, r0, r1
   14198:	ldr	r1, [sp, #12]
   1419c:	ldr	r1, [r1, #4]
   141a0:	cmp	r0, r1
   141a4:	str	ip, [sp, #8]
   141a8:	bls	14220 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   141ac:	ldr	r0, [fp, #-4]
   141b0:	ldr	r0, [r0, #48]	; 0x30
   141b4:	ldr	r1, [fp, #-4]
   141b8:	ldr	r1, [r1, #40]	; 0x28
   141bc:	ldr	r2, [sp, #12]
   141c0:	ldr	r3, [fp, #-12]
   141c4:	ldr	ip, [sp, #16]
   141c8:	add	r3, r3, ip
   141cc:	ldr	ip, [fp, #8]
   141d0:	ldr	lr, [fp, #-8]
   141d4:	str	r0, [sp, #4]
   141d8:	mov	r0, r1
   141dc:	mov	r1, r2
   141e0:	mov	r2, r3
   141e4:	mov	r3, ip
   141e8:	str	lr, [sp]
   141ec:	ldr	ip, [sp, #4]
   141f0:	blx	ip
   141f4:	cmp	r0, #0
   141f8:	beq	1421c <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   141fc:	ldr	r0, [pc, #52]	; 14238 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   14200:	add	r0, pc, r0
   14204:	ldr	r1, [pc, #48]	; 1423c <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   14208:	add	r1, pc, r1
   1420c:	ldr	r2, [pc, #44]	; 14240 <flatcc_builder_enter_user_frame_ptr@@Base+0x1bc>
   14210:	add	r3, pc, r2
   14214:	movw	r2, #308	; 0x134
   14218:	bl	12448 <__assert_fail@plt>
   1421c:	b	14220 <flatcc_builder_enter_user_frame_ptr@@Base+0x19c>
   14220:	ldr	r0, [sp, #12]
   14224:	ldr	r0, [r0]
   14228:	ldr	r1, [fp, #-12]
   1422c:	add	r0, r0, r1
   14230:	mov	sp, fp
   14234:	pop	{fp, pc}
   14238:	ldrdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   1423c:	andeq	r6, r0, r2, lsl sl
   14240:	andeq	r7, r0, r1, lsl #20

00014244 <flatcc_builder_enter_user_frame@@Base>:
   14244:	push	{fp, lr}
   14248:	mov	fp, sp
   1424c:	sub	sp, sp, #24
   14250:	str	r0, [fp, #-8]
   14254:	str	r1, [sp, #12]
   14258:	ldr	r0, [sp, #12]
   1425c:	add	r0, r0, #4
   14260:	sub	r0, r0, #1
   14264:	mvn	r1, #3
   14268:	and	r0, r0, r1
   1426c:	add	r0, r0, #4
   14270:	str	r0, [sp, #12]
   14274:	ldr	r0, [fp, #-8]
   14278:	ldr	r1, [fp, #-8]
   1427c:	ldr	r2, [r1, #228]	; 0xe4
   14280:	ldr	r3, [sp, #12]
   14284:	movw	r1, #7
   14288:	movw	ip, #0
   1428c:	str	ip, [sp]
   14290:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   14294:	str	r0, [sp, #8]
   14298:	movw	r1, #0
   1429c:	cmp	r0, r1
   142a0:	bne	142b0 <flatcc_builder_enter_user_frame@@Base+0x6c>
   142a4:	movw	r0, #0
   142a8:	str	r0, [fp, #-4]
   142ac:	b	14310 <flatcc_builder_enter_user_frame@@Base+0xcc>
   142b0:	ldr	r0, [sp, #8]
   142b4:	ldr	r2, [sp, #12]
   142b8:	movw	r1, #0
   142bc:	and	r1, r1, #255	; 0xff
   142c0:	bl	12418 <memset@plt>
   142c4:	ldr	r0, [fp, #-8]
   142c8:	ldr	r0, [r0, #224]	; 0xe0
   142cc:	ldr	r1, [sp, #8]
   142d0:	add	r2, r1, #4
   142d4:	str	r2, [sp, #8]
   142d8:	str	r0, [r1]
   142dc:	ldr	r0, [fp, #-8]
   142e0:	ldr	r0, [r0, #228]	; 0xe4
   142e4:	add	r0, r0, #4
   142e8:	ldr	r1, [fp, #-8]
   142ec:	str	r0, [r1, #224]	; 0xe0
   142f0:	ldr	r0, [sp, #12]
   142f4:	ldr	r1, [fp, #-8]
   142f8:	ldr	r2, [r1, #228]	; 0xe4
   142fc:	add	r0, r2, r0
   14300:	str	r0, [r1, #228]	; 0xe4
   14304:	ldr	r0, [fp, #-8]
   14308:	ldr	r0, [r0, #224]	; 0xe0
   1430c:	str	r0, [fp, #-4]
   14310:	ldr	r0, [fp, #-4]
   14314:	mov	sp, fp
   14318:	pop	{fp, pc}

0001431c <flatcc_builder_exit_user_frame@@Base>:
   1431c:	push	{fp, lr}
   14320:	mov	fp, sp
   14324:	sub	sp, sp, #8
   14328:	str	r0, [sp, #4]
   1432c:	ldr	r0, [sp, #4]
   14330:	ldr	r0, [r0, #224]	; 0xe0
   14334:	cmp	r0, #0
   14338:	bls	14340 <flatcc_builder_exit_user_frame@@Base+0x24>
   1433c:	b	14360 <flatcc_builder_exit_user_frame@@Base+0x44>
   14340:	ldr	r0, [pc, #100]	; 143ac <flatcc_builder_exit_user_frame@@Base+0x90>
   14344:	add	r0, pc, r0
   14348:	ldr	r1, [pc, #96]	; 143b0 <flatcc_builder_exit_user_frame@@Base+0x94>
   1434c:	add	r1, pc, r1
   14350:	ldr	r2, [pc, #92]	; 143b4 <flatcc_builder_exit_user_frame@@Base+0x98>
   14354:	add	r3, pc, r2
   14358:	movw	r2, #542	; 0x21e
   1435c:	bl	12448 <__assert_fail@plt>
   14360:	ldr	r0, [sp, #4]
   14364:	ldr	r0, [r0, #108]	; 0x6c
   14368:	ldr	r1, [sp, #4]
   1436c:	ldr	r1, [r1, #224]	; 0xe0
   14370:	add	r0, r0, r1
   14374:	str	r0, [sp]
   14378:	ldr	r0, [sp, #4]
   1437c:	ldr	r0, [r0, #224]	; 0xe0
   14380:	sub	r0, r0, #4
   14384:	ldr	r1, [sp, #4]
   14388:	str	r0, [r1, #228]	; 0xe4
   1438c:	ldr	r0, [sp]
   14390:	mvn	r1, #3
   14394:	add	r0, r0, r1
   14398:	ldr	r0, [r0]
   1439c:	ldr	r1, [sp, #4]
   143a0:	str	r0, [r1, #224]	; 0xe0
   143a4:	mov	sp, fp
   143a8:	pop	{fp, pc}
   143ac:	andeq	r6, r0, r1, ror r9
   143b0:	andeq	r6, r0, lr, asr #17
   143b4:	andeq	r6, r0, sl, ror r9

000143b8 <flatcc_builder_exit_user_frame_at@@Base>:
   143b8:	push	{fp, lr}
   143bc:	mov	fp, sp
   143c0:	sub	sp, sp, #8
   143c4:	str	r0, [sp, #4]
   143c8:	str	r1, [sp]
   143cc:	ldr	r0, [sp, #4]
   143d0:	ldr	r0, [r0, #224]	; 0xe0
   143d4:	ldr	r1, [sp]
   143d8:	cmp	r0, r1
   143dc:	bcc	143e4 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   143e0:	b	14404 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   143e4:	ldr	r0, [pc, #52]	; 14420 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   143e8:	add	r0, pc, r0
   143ec:	ldr	r1, [pc, #48]	; 14424 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   143f0:	add	r1, pc, r1
   143f4:	ldr	r2, [pc, #44]	; 14428 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   143f8:	add	r3, pc, r2
   143fc:	movw	r2, #551	; 0x227
   14400:	bl	12448 <__assert_fail@plt>
   14404:	ldr	r0, [sp]
   14408:	ldr	r1, [sp, #4]
   1440c:	str	r0, [r1, #224]	; 0xe0
   14410:	ldr	r0, [sp, #4]
   14414:	bl	1431c <flatcc_builder_exit_user_frame@@Base>
   14418:	mov	sp, fp
   1441c:	pop	{fp, pc}
   14420:	andeq	r6, r0, r0, lsr #18
   14424:	andeq	r6, r0, sl, lsr #16
   14428:	andeq	r6, r0, pc, lsr #18

0001442c <flatcc_builder_get_current_user_frame@@Base>:
   1442c:	sub	sp, sp, #4
   14430:	str	r0, [sp]
   14434:	ldr	r0, [sp]
   14438:	ldr	r0, [r0, #224]	; 0xe0
   1443c:	add	sp, sp, #4
   14440:	bx	lr

00014444 <flatcc_builder_get_user_frame_ptr@@Base>:
   14444:	sub	sp, sp, #8
   14448:	str	r0, [sp, #4]
   1444c:	str	r1, [sp]
   14450:	ldr	r0, [sp, #4]
   14454:	ldr	r0, [r0, #108]	; 0x6c
   14458:	ldr	r1, [sp]
   1445c:	add	r0, r0, r1
   14460:	add	sp, sp, #8
   14464:	bx	lr

00014468 <flatcc_builder_embed_buffer@@Base>:
   14468:	push	{fp, lr}
   1446c:	mov	fp, sp
   14470:	sub	sp, sp, #120	; 0x78
   14474:	ldr	ip, [fp, #12]
   14478:	ldr	lr, [fp, #8]
   1447c:	str	r0, [fp, #-8]
   14480:	strh	r1, [fp, #-10]
   14484:	str	r2, [fp, #-16]
   14488:	str	r3, [fp, #-20]	; 0xffffffec
   1448c:	strh	lr, [fp, #-22]	; 0xffffffea
   14490:	ldr	r0, [fp, #12]
   14494:	and	r0, r0, #2
   14498:	str	r0, [sp, #12]
   1449c:	ldr	r0, [fp, #-8]
   144a0:	ldrh	r1, [fp, #-10]
   144a4:	ldr	r2, [fp, #-8]
   144a8:	ldr	r2, [r2, #152]	; 0x98
   144ac:	cmp	r2, #0
   144b0:	movw	r2, #0
   144b4:	moveq	r2, #1
   144b8:	mvn	r3, #0
   144bc:	eor	r2, r2, r3
   144c0:	and	r3, r2, #1
   144c4:	sub	r2, fp, #22
   144c8:	str	r1, [sp, #8]
   144cc:	mov	r1, r2
   144d0:	ldr	r2, [sp, #8]
   144d4:	uxth	r2, r2
   144d8:	str	ip, [sp, #4]
   144dc:	bl	14650 <flatcc_builder_embed_buffer@@Base+0x1e8>
   144e0:	cmp	r0, #0
   144e4:	beq	144f4 <flatcc_builder_embed_buffer@@Base+0x8c>
   144e8:	movw	r0, #0
   144ec:	str	r0, [fp, #-4]
   144f0:	b	14640 <flatcc_builder_embed_buffer@@Base+0x1d8>
   144f4:	ldr	r0, [fp, #-8]
   144f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   144fc:	ldr	r2, [sp, #12]
   14500:	cmp	r2, #0
   14504:	movw	r2, #0
   14508:	movne	r2, #1
   1450c:	tst	r2, #1
   14510:	movw	r2, #4
   14514:	moveq	r2, #0
   14518:	add	r1, r1, r2
   1451c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14520:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   14524:	str	r0, [fp, #-32]	; 0xffffffe0
   14528:	ldr	r0, [fp, #-20]	; 0xffffffec
   1452c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14530:	add	r0, r0, r1
   14534:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   14538:	str	r0, [fp, #-28]	; 0xffffffe4
   1453c:	movw	r0, #0
   14540:	str	r0, [sp, #16]
   14544:	str	r0, [sp, #20]
   14548:	ldr	r0, [fp, #-8]
   1454c:	ldr	r0, [r0, #152]	; 0x98
   14550:	cmp	r0, #0
   14554:	beq	14594 <flatcc_builder_embed_buffer@@Base+0x12c>
   14558:	ldr	r0, [sp, #16]
   1455c:	add	r0, r0, #4
   14560:	str	r0, [sp, #16]
   14564:	add	r0, sp, #16
   14568:	add	r0, r0, #8
   1456c:	ldr	r1, [sp, #20]
   14570:	sub	r2, fp, #28
   14574:	str	r2, [r0, r1, lsl #3]
   14578:	ldr	r1, [sp, #20]
   1457c:	add	r0, r0, r1, lsl #3
   14580:	movw	r1, #4
   14584:	str	r1, [r0, #4]
   14588:	ldr	r0, [sp, #20]
   1458c:	add	r0, r0, #1
   14590:	str	r0, [sp, #20]
   14594:	ldr	r0, [fp, #-20]	; 0xffffffec
   14598:	cmp	r0, #0
   1459c:	bls	145e0 <flatcc_builder_embed_buffer@@Base+0x178>
   145a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   145a4:	ldr	r1, [sp, #16]
   145a8:	add	r0, r1, r0
   145ac:	str	r0, [sp, #16]
   145b0:	ldr	r0, [fp, #-16]
   145b4:	add	r1, sp, #16
   145b8:	add	r1, r1, #8
   145bc:	ldr	r2, [sp, #20]
   145c0:	str	r0, [r1, r2, lsl #3]
   145c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   145c8:	ldr	r2, [sp, #20]
   145cc:	add	r1, r1, r2, lsl #3
   145d0:	str	r0, [r1, #4]
   145d4:	ldr	r0, [sp, #20]
   145d8:	add	r0, r0, #1
   145dc:	str	r0, [sp, #20]
   145e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145e4:	cmp	r0, #0
   145e8:	bls	14630 <flatcc_builder_embed_buffer@@Base+0x1c8>
   145ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145f0:	ldr	r1, [sp, #16]
   145f4:	add	r0, r1, r0
   145f8:	str	r0, [sp, #16]
   145fc:	add	r0, sp, #16
   14600:	add	r0, r0, #8
   14604:	ldr	r1, [sp, #20]
   14608:	ldr	r2, [pc, #60]	; 1464c <flatcc_builder_embed_buffer@@Base+0x1e4>
   1460c:	ldr	r2, [pc, r2]
   14610:	str	r2, [r0, r1, lsl #3]
   14614:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14618:	ldr	r2, [sp, #20]
   1461c:	add	r0, r0, r2, lsl #3
   14620:	str	r1, [r0, #4]
   14624:	ldr	r0, [sp, #20]
   14628:	add	r0, r0, #1
   1462c:	str	r0, [sp, #20]
   14630:	ldr	r0, [fp, #-8]
   14634:	add	r1, sp, #16
   14638:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   1463c:	str	r0, [fp, #-4]
   14640:	ldr	r0, [fp, #-4]
   14644:	mov	sp, fp
   14648:	pop	{fp, pc}
   1464c:	andeq	r7, r1, r8, lsr sl
   14650:	push	{fp, lr}
   14654:	mov	fp, sp
   14658:	sub	sp, sp, #104	; 0x68
   1465c:	str	r0, [fp, #-4]
   14660:	str	r1, [fp, #-8]
   14664:	strh	r2, [fp, #-10]
   14668:	str	r3, [fp, #-16]
   1466c:	ldrh	r0, [fp, #-10]
   14670:	cmp	r0, #0
   14674:	beq	14684 <flatcc_builder_embed_buffer@@Base+0x21c>
   14678:	ldrh	r0, [fp, #-10]
   1467c:	str	r0, [sp, #8]
   14680:	b	146b8 <flatcc_builder_embed_buffer@@Base+0x250>
   14684:	ldr	r0, [fp, #-4]
   14688:	ldrh	r0, [r0, #132]	; 0x84
   1468c:	cmp	r0, #0
   14690:	beq	146a4 <flatcc_builder_embed_buffer@@Base+0x23c>
   14694:	ldr	r0, [fp, #-4]
   14698:	ldrh	r0, [r0, #132]	; 0x84
   1469c:	str	r0, [sp, #4]
   146a0:	b	146b0 <flatcc_builder_embed_buffer@@Base+0x248>
   146a4:	movw	r0, #1
   146a8:	str	r0, [sp, #4]
   146ac:	b	146b0 <flatcc_builder_embed_buffer@@Base+0x248>
   146b0:	ldr	r0, [sp, #4]
   146b4:	str	r0, [sp, #8]
   146b8:	ldr	r0, [sp, #8]
   146bc:	strh	r0, [fp, #-10]
   146c0:	ldr	r0, [fp, #-8]
   146c4:	movw	r1, #4
   146c8:	uxth	r1, r1
   146cc:	bl	161bc <flatcc_builder_start_vector@@Base+0xac>
   146d0:	ldr	r0, [fp, #-8]
   146d4:	ldrh	r1, [fp, #-10]
   146d8:	bl	161bc <flatcc_builder_start_vector@@Base+0xac>
   146dc:	ldr	r0, [fp, #-16]
   146e0:	cmp	r0, #0
   146e4:	bne	147a0 <flatcc_builder_embed_buffer@@Base+0x338>
   146e8:	ldr	r0, [fp, #-4]
   146ec:	ldrh	r1, [fp, #-10]
   146f0:	bl	19604 <flatcc_builder_get_emit_context@@Base+0x18>
   146f4:	str	r0, [fp, #-20]	; 0xffffffec
   146f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   146fc:	cmp	r0, #0
   14700:	beq	1479c <flatcc_builder_embed_buffer@@Base+0x334>
   14704:	movw	r0, #0
   14708:	str	r0, [sp, #12]
   1470c:	str	r0, [sp, #16]
   14710:	ldr	r0, [fp, #-20]	; 0xffffffec
   14714:	cmp	r0, #0
   14718:	bls	14760 <flatcc_builder_embed_buffer@@Base+0x2f8>
   1471c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14720:	ldr	r1, [sp, #12]
   14724:	add	r0, r1, r0
   14728:	str	r0, [sp, #12]
   1472c:	add	r0, sp, #12
   14730:	add	r0, r0, #8
   14734:	ldr	r1, [sp, #16]
   14738:	ldr	r2, [pc, #120]	; 147b8 <flatcc_builder_embed_buffer@@Base+0x350>
   1473c:	ldr	r2, [pc, r2]
   14740:	str	r2, [r0, r1, lsl #3]
   14744:	ldr	r1, [fp, #-20]	; 0xffffffec
   14748:	ldr	r2, [sp, #16]
   1474c:	add	r0, r0, r2, lsl #3
   14750:	str	r1, [r0, #4]
   14754:	ldr	r0, [sp, #16]
   14758:	add	r0, r0, #1
   1475c:	str	r0, [sp, #16]
   14760:	ldr	r0, [fp, #-4]
   14764:	add	r1, sp, #12
   14768:	bl	167a0 <flatcc_builder_create_vtable@@Base+0x104>
   1476c:	movw	r1, #0
   14770:	cmp	r1, r0
   14774:	bne	14798 <flatcc_builder_embed_buffer@@Base+0x330>
   14778:	ldr	r0, [pc, #44]	; 147ac <flatcc_builder_embed_buffer@@Base+0x344>
   1477c:	add	r0, pc, r0
   14780:	ldr	r1, [pc, #40]	; 147b0 <flatcc_builder_embed_buffer@@Base+0x348>
   14784:	add	r1, pc, r1
   14788:	ldr	r2, [pc, #36]	; 147b4 <flatcc_builder_embed_buffer@@Base+0x34c>
   1478c:	add	r3, pc, r2
   14790:	movw	r2, #702	; 0x2be
   14794:	bl	12448 <__assert_fail@plt>
   14798:	b	1479c <flatcc_builder_embed_buffer@@Base+0x334>
   1479c:	b	147a0 <flatcc_builder_embed_buffer@@Base+0x338>
   147a0:	movw	r0, #0
   147a4:	mov	sp, fp
   147a8:	pop	{fp, pc}
   147ac:	andeq	r7, r0, fp, asr r6
   147b0:	muleq	r0, r6, r4
   147b4:	andeq	r7, r0, r8, asr #9
   147b8:	andeq	r7, r1, r8, lsl #18
   147bc:	sub	sp, sp, #12
   147c0:	str	r0, [sp, #8]
   147c4:	str	r1, [sp, #4]
   147c8:	strh	r2, [sp, #2]
   147cc:	ldr	r0, [sp, #8]
   147d0:	ldr	r0, [r0, #136]	; 0x88
   147d4:	ldr	r1, [sp, #4]
   147d8:	sub	r0, r0, r1
   147dc:	ldrh	r1, [sp, #2]
   147e0:	sub	r1, r1, #1
   147e4:	and	r0, r0, r1
   147e8:	add	sp, sp, #12
   147ec:	bx	lr
   147f0:	sub	sp, sp, #4
   147f4:	str	r0, [sp]
   147f8:	ldr	r0, [sp]
   147fc:	add	sp, sp, #4
   14800:	bx	lr
   14804:	push	{fp, lr}
   14808:	mov	fp, sp
   1480c:	sub	sp, sp, #24
   14810:	str	r0, [fp, #-4]
   14814:	str	r1, [fp, #-8]
   14818:	ldr	r0, [fp, #-4]
   1481c:	ldr	r0, [r0, #136]	; 0x88
   14820:	ldr	r1, [fp, #-8]
   14824:	ldr	r1, [r1]
   14828:	sub	r0, r0, r1
   1482c:	str	r0, [sp, #12]
   14830:	ldr	r0, [fp, #-8]
   14834:	ldr	r0, [r0]
   14838:	cmp	r0, #16
   1483c:	bls	14854 <flatcc_builder_embed_buffer@@Base+0x3ec>
   14840:	ldr	r0, [fp, #-8]
   14844:	ldr	r0, [r0]
   14848:	sub	r0, r0, #16
   1484c:	cmn	r0, #1
   14850:	bhi	14868 <flatcc_builder_embed_buffer@@Base+0x400>
   14854:	ldr	r0, [sp, #12]
   14858:	ldr	r1, [fp, #-4]
   1485c:	ldr	r1, [r1, #136]	; 0x88
   14860:	cmp	r0, r1
   14864:	blt	14888 <flatcc_builder_embed_buffer@@Base+0x420>
   14868:	ldr	r0, [pc, #172]	; 1491c <flatcc_builder_embed_buffer@@Base+0x4b4>
   1486c:	add	r0, pc, r0
   14870:	ldr	r1, [pc, #168]	; 14920 <flatcc_builder_embed_buffer@@Base+0x4b8>
   14874:	add	r1, pc, r1
   14878:	ldr	r2, [pc, #164]	; 14924 <flatcc_builder_embed_buffer@@Base+0x4bc>
   1487c:	add	r3, pc, r2
   14880:	movw	r2, #647	; 0x287
   14884:	bl	12448 <__assert_fail@plt>
   14888:	ldr	r0, [fp, #-4]
   1488c:	ldr	r0, [r0, #44]	; 0x2c
   14890:	ldr	r1, [fp, #-4]
   14894:	ldr	r1, [r1, #36]	; 0x24
   14898:	ldr	r2, [fp, #-8]
   1489c:	add	r2, r2, #8
   148a0:	ldr	r3, [fp, #-8]
   148a4:	ldr	r3, [r3, #4]
   148a8:	ldr	ip, [sp, #12]
   148ac:	ldr	lr, [fp, #-8]
   148b0:	ldr	lr, [lr]
   148b4:	str	r0, [sp, #8]
   148b8:	mov	r0, r1
   148bc:	mov	r1, r2
   148c0:	mov	r2, r3
   148c4:	mov	r3, ip
   148c8:	str	lr, [sp]
   148cc:	ldr	ip, [sp, #8]
   148d0:	blx	ip
   148d4:	cmp	r0, #0
   148d8:	beq	148fc <flatcc_builder_embed_buffer@@Base+0x494>
   148dc:	ldr	r0, [pc, #44]	; 14910 <flatcc_builder_embed_buffer@@Base+0x4a8>
   148e0:	add	r0, pc, r0
   148e4:	ldr	r1, [pc, #40]	; 14914 <flatcc_builder_embed_buffer@@Base+0x4ac>
   148e8:	add	r1, pc, r1
   148ec:	ldr	r2, [pc, #36]	; 14918 <flatcc_builder_embed_buffer@@Base+0x4b0>
   148f0:	add	r3, pc, r2
   148f4:	movw	r2, #651	; 0x28b
   148f8:	bl	12448 <__assert_fail@plt>
   148fc:	ldr	r0, [sp, #12]
   14900:	ldr	r1, [fp, #-4]
   14904:	str	r0, [r1, #136]	; 0x88
   14908:	mov	sp, fp
   1490c:	pop	{fp, pc}
   14910:	strdeq	r7, [r0], -r7	; <UNPREDICTABLE>
   14914:	andeq	r6, r0, r2, lsr r3
   14918:	andeq	r7, r0, r6, lsr #7
   1491c:	andeq	r7, r0, fp, ror #10
   14920:	andeq	r6, r0, r6, lsr #7
   14924:	andeq	r7, r0, sl, lsl r4

00014928 <flatcc_builder_create_buffer@@Base>:
   14928:	push	{fp, lr}
   1492c:	mov	fp, sp
   14930:	sub	sp, sp, #152	; 0x98
   14934:	ldr	ip, [fp, #12]
   14938:	ldr	lr, [fp, #8]
   1493c:	str	r0, [fp, #-8]
   14940:	str	r1, [fp, #-12]
   14944:	strh	r2, [fp, #-14]
   14948:	str	r3, [fp, #-20]	; 0xffffffec
   1494c:	strh	lr, [fp, #-22]	; 0xffffffea
   14950:	movw	r0, #0
   14954:	str	r0, [fp, #-36]	; 0xffffffdc
   14958:	str	r0, [sp, #28]
   1495c:	ldr	r0, [fp, #12]
   14960:	and	r0, r0, #1
   14964:	cmp	r0, #0
   14968:	movw	r0, #0
   1496c:	movne	r0, #1
   14970:	and	r0, r0, #1
   14974:	str	r0, [sp, #24]
   14978:	ldr	r0, [fp, #12]
   1497c:	and	r0, r0, #2
   14980:	cmp	r0, #0
   14984:	movw	r0, #0
   14988:	movne	r0, #1
   1498c:	and	r0, r0, #1
   14990:	str	r0, [sp, #20]
   14994:	ldr	r0, [fp, #-8]
   14998:	ldrh	r1, [fp, #-14]
   1499c:	ldr	r3, [sp, #24]
   149a0:	sub	r2, fp, #22
   149a4:	str	r1, [sp, #16]
   149a8:	mov	r1, r2
   149ac:	ldr	r2, [sp, #16]
   149b0:	uxth	r2, r2
   149b4:	str	ip, [sp, #12]
   149b8:	bl	14650 <flatcc_builder_embed_buffer@@Base+0x1e8>
   149bc:	cmp	r0, #0
   149c0:	beq	149d0 <flatcc_builder_create_buffer@@Base+0xa8>
   149c4:	movw	r0, #0
   149c8:	str	r0, [fp, #-4]
   149cc:	b	14cb4 <flatcc_builder_create_buffer@@Base+0x38c>
   149d0:	ldr	r0, [fp, #-8]
   149d4:	ldrh	r1, [fp, #-22]	; 0xffffffea
   149d8:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   149dc:	ldr	r0, [fp, #-12]
   149e0:	movw	r1, #0
   149e4:	cmp	r0, r1
   149e8:	beq	14a28 <flatcc_builder_create_buffer@@Base+0x100>
   149ec:	ldr	r0, [fp, #-12]
   149f0:	ldrb	r1, [r0]
   149f4:	strb	r1, [sp, #28]
   149f8:	ldrb	r1, [r0, #1]
   149fc:	strb	r1, [sp, #29]
   14a00:	ldrb	r1, [r0, #2]
   14a04:	strb	r1, [sp, #30]
   14a08:	ldrb	r0, [r0, #3]
   14a0c:	strb	r0, [sp, #31]
   14a10:	ldr	r0, [sp, #28]
   14a14:	bl	14d04 <flatcc_builder_create_buffer@@Base+0x3dc>
   14a18:	str	r0, [sp, #28]
   14a1c:	ldr	r0, [sp, #28]
   14a20:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   14a24:	str	r0, [sp, #28]
   14a28:	ldr	r0, [sp, #28]
   14a2c:	cmp	r0, #0
   14a30:	movw	r0, #0
   14a34:	movne	r0, #1
   14a38:	tst	r0, #1
   14a3c:	movw	r0, #4
   14a40:	mov	r1, r0
   14a44:	moveq	r1, #0
   14a48:	str	r1, [fp, #-36]	; 0xffffffdc
   14a4c:	ldr	r1, [fp, #-8]
   14a50:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14a54:	add	r2, r2, #4
   14a58:	ldr	r3, [sp, #20]
   14a5c:	cmp	r3, #0
   14a60:	movw	r3, #0
   14a64:	movne	r3, #1
   14a68:	tst	r3, #1
   14a6c:	moveq	r0, #0
   14a70:	add	r0, r2, r0
   14a74:	str	r0, [sp, #8]
   14a78:	mov	r0, r1
   14a7c:	ldr	r1, [sp, #8]
   14a80:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14a84:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   14a88:	str	r0, [fp, #-32]	; 0xffffffe0
   14a8c:	movw	r0, #0
   14a90:	str	r0, [sp, #32]
   14a94:	str	r0, [sp, #36]	; 0x24
   14a98:	ldr	r0, [sp, #24]
   14a9c:	cmp	r0, #0
   14aa0:	bne	14ab0 <flatcc_builder_create_buffer@@Base+0x188>
   14aa4:	ldr	r0, [sp, #20]
   14aa8:	cmp	r0, #0
   14aac:	beq	14aec <flatcc_builder_create_buffer@@Base+0x1c4>
   14ab0:	ldr	r0, [sp, #32]
   14ab4:	add	r0, r0, #4
   14ab8:	str	r0, [sp, #32]
   14abc:	add	r0, sp, #32
   14ac0:	add	r0, r0, #8
   14ac4:	ldr	r1, [sp, #36]	; 0x24
   14ac8:	sub	r2, fp, #44	; 0x2c
   14acc:	str	r2, [r0, r1, lsl #3]
   14ad0:	ldr	r1, [sp, #36]	; 0x24
   14ad4:	add	r0, r0, r1, lsl #3
   14ad8:	movw	r1, #4
   14adc:	str	r1, [r0, #4]
   14ae0:	ldr	r0, [sp, #36]	; 0x24
   14ae4:	add	r0, r0, #1
   14ae8:	str	r0, [sp, #36]	; 0x24
   14aec:	ldr	r0, [sp, #32]
   14af0:	add	r0, r0, #4
   14af4:	str	r0, [sp, #32]
   14af8:	add	r0, sp, #32
   14afc:	add	r0, r0, #8
   14b00:	ldr	r1, [sp, #36]	; 0x24
   14b04:	sub	r2, fp, #40	; 0x28
   14b08:	str	r2, [r0, r1, lsl #3]
   14b0c:	ldr	r1, [sp, #36]	; 0x24
   14b10:	add	r0, r0, r1, lsl #3
   14b14:	movw	r1, #4
   14b18:	str	r1, [r0, #4]
   14b1c:	ldr	r0, [sp, #36]	; 0x24
   14b20:	add	r0, r0, #1
   14b24:	str	r0, [sp, #36]	; 0x24
   14b28:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14b2c:	cmp	r0, #0
   14b30:	bls	14b74 <flatcc_builder_create_buffer@@Base+0x24c>
   14b34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14b38:	ldr	r1, [sp, #32]
   14b3c:	add	r0, r1, r0
   14b40:	str	r0, [sp, #32]
   14b44:	add	r0, sp, #32
   14b48:	add	r0, r0, #8
   14b4c:	ldr	r1, [sp, #36]	; 0x24
   14b50:	add	r2, sp, #28
   14b54:	str	r2, [r0, r1, lsl #3]
   14b58:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14b5c:	ldr	r2, [sp, #36]	; 0x24
   14b60:	add	r0, r0, r2, lsl #3
   14b64:	str	r1, [r0, #4]
   14b68:	ldr	r0, [sp, #36]	; 0x24
   14b6c:	add	r0, r0, #1
   14b70:	str	r0, [sp, #36]	; 0x24
   14b74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b78:	cmp	r0, #0
   14b7c:	bls	14bc4 <flatcc_builder_create_buffer@@Base+0x29c>
   14b80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b84:	ldr	r1, [sp, #32]
   14b88:	add	r0, r1, r0
   14b8c:	str	r0, [sp, #32]
   14b90:	add	r0, sp, #32
   14b94:	add	r0, r0, #8
   14b98:	ldr	r1, [sp, #36]	; 0x24
   14b9c:	ldr	r2, [pc, #296]	; 14ccc <flatcc_builder_create_buffer@@Base+0x3a4>
   14ba0:	ldr	r2, [pc, r2]
   14ba4:	str	r2, [r0, r1, lsl #3]
   14ba8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14bac:	ldr	r2, [sp, #36]	; 0x24
   14bb0:	add	r0, r0, r2, lsl #3
   14bb4:	str	r1, [r0, #4]
   14bb8:	ldr	r0, [sp, #36]	; 0x24
   14bbc:	add	r0, r0, #1
   14bc0:	str	r0, [sp, #36]	; 0x24
   14bc4:	ldr	r0, [fp, #-8]
   14bc8:	ldr	r0, [r0, #136]	; 0x88
   14bcc:	ldr	r1, [sp, #32]
   14bd0:	sub	r0, r0, r1
   14bd4:	ldr	r1, [sp, #24]
   14bd8:	cmp	r1, #0
   14bdc:	movw	r1, #1
   14be0:	str	r0, [sp, #4]
   14be4:	str	r1, [sp]
   14be8:	bne	14c00 <flatcc_builder_create_buffer@@Base+0x2d8>
   14bec:	ldr	r0, [sp, #20]
   14bf0:	cmp	r0, #0
   14bf4:	movw	r0, #0
   14bf8:	movne	r0, #1
   14bfc:	str	r0, [sp]
   14c00:	ldr	r0, [sp]
   14c04:	tst	r0, #1
   14c08:	movw	r0, #4
   14c0c:	moveq	r0, #0
   14c10:	ldr	r1, [sp, #4]
   14c14:	add	r0, r1, r0
   14c18:	str	r0, [fp, #-48]	; 0xffffffd0
   14c1c:	ldr	r0, [sp, #24]
   14c20:	cmp	r0, #0
   14c24:	beq	14c44 <flatcc_builder_create_buffer@@Base+0x31c>
   14c28:	ldr	r0, [fp, #-8]
   14c2c:	ldr	r0, [r0, #144]	; 0x90
   14c30:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14c34:	sub	r0, r0, r1
   14c38:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   14c3c:	str	r0, [fp, #-44]	; 0xffffffd4
   14c40:	b	14c5c <flatcc_builder_create_buffer@@Base+0x334>
   14c44:	ldr	r0, [fp, #-8]
   14c48:	ldr	r0, [r0, #140]	; 0x8c
   14c4c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14c50:	sub	r0, r0, r1
   14c54:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   14c58:	str	r0, [fp, #-44]	; 0xffffffd4
   14c5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c60:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14c64:	sub	r0, r0, r1
   14c68:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   14c6c:	str	r0, [fp, #-40]	; 0xffffffd8
   14c70:	ldr	r0, [fp, #-8]
   14c74:	add	r1, sp, #32
   14c78:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   14c7c:	str	r0, [fp, #-28]	; 0xffffffe4
   14c80:	movw	r1, #0
   14c84:	cmp	r1, r0
   14c88:	bne	14cac <flatcc_builder_create_buffer@@Base+0x384>
   14c8c:	ldr	r0, [pc, #44]	; 14cc0 <flatcc_builder_create_buffer@@Base+0x398>
   14c90:	add	r0, pc, r0
   14c94:	ldr	r1, [pc, #40]	; 14cc4 <flatcc_builder_create_buffer@@Base+0x39c>
   14c98:	add	r1, pc, r1
   14c9c:	ldr	r2, [pc, #36]	; 14cc8 <flatcc_builder_create_buffer@@Base+0x3a0>
   14ca0:	add	r3, pc, r2
   14ca4:	movw	r2, #772	; 0x304
   14ca8:	bl	12448 <__assert_fail@plt>
   14cac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14cb0:	str	r0, [fp, #-4]
   14cb4:	ldr	r0, [fp, #-4]
   14cb8:	mov	sp, fp
   14cbc:	pop	{fp, pc}
   14cc0:	andeq	r7, r0, r7, asr #2
   14cc4:	andeq	r5, r0, r2, lsl #31
   14cc8:	andeq	r6, r0, ip, asr #1
   14ccc:	andeq	r7, r1, r4, lsr #9
   14cd0:	sub	sp, sp, #8
   14cd4:	str	r0, [sp, #4]
   14cd8:	strh	r1, [sp, #2]
   14cdc:	ldr	r0, [sp, #4]
   14ce0:	ldrh	r0, [r0, #128]	; 0x80
   14ce4:	ldrh	r1, [sp, #2]
   14ce8:	cmp	r0, r1
   14cec:	bge	14cfc <flatcc_builder_create_buffer@@Base+0x3d4>
   14cf0:	ldrh	r0, [sp, #2]
   14cf4:	ldr	r1, [sp, #4]
   14cf8:	strh	r0, [r1, #128]	; 0x80
   14cfc:	add	sp, sp, #8
   14d00:	bx	lr
   14d04:	sub	sp, sp, #4
   14d08:	str	r0, [sp]
   14d0c:	ldr	r0, [sp]
   14d10:	add	sp, sp, #4
   14d14:	bx	lr

00014d18 <flatcc_builder_create_struct@@Base>:
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	sub	sp, sp, #96	; 0x60
   14d24:	str	r0, [fp, #-4]
   14d28:	str	r1, [fp, #-8]
   14d2c:	str	r2, [fp, #-12]
   14d30:	strh	r3, [fp, #-14]
   14d34:	ldrh	r0, [fp, #-14]
   14d38:	cmp	r0, #1
   14d3c:	blt	14d44 <flatcc_builder_create_struct@@Base+0x2c>
   14d40:	b	14d64 <flatcc_builder_create_struct@@Base+0x4c>
   14d44:	ldr	r0, [pc, #244]	; 14e40 <flatcc_builder_create_struct@@Base+0x128>
   14d48:	add	r0, pc, r0
   14d4c:	ldr	r1, [pc, #240]	; 14e44 <flatcc_builder_create_struct@@Base+0x12c>
   14d50:	add	r1, pc, r1
   14d54:	ldr	r2, [pc, #236]	; 14e48 <flatcc_builder_create_struct@@Base+0x130>
   14d58:	add	r3, pc, r2
   14d5c:	movw	r2, #783	; 0x30f
   14d60:	bl	12448 <__assert_fail@plt>
   14d64:	ldr	r0, [fp, #-4]
   14d68:	ldrh	r1, [fp, #-14]
   14d6c:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   14d70:	ldr	r0, [fp, #-4]
   14d74:	ldr	r1, [fp, #-12]
   14d78:	ldrh	r2, [fp, #-14]
   14d7c:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   14d80:	str	r0, [fp, #-20]	; 0xffffffec
   14d84:	movw	r0, #0
   14d88:	str	r0, [sp, #4]
   14d8c:	str	r0, [sp, #8]
   14d90:	ldr	r0, [fp, #-12]
   14d94:	cmp	r0, #0
   14d98:	bls	14ddc <flatcc_builder_create_struct@@Base+0xc4>
   14d9c:	ldr	r0, [fp, #-12]
   14da0:	ldr	r1, [sp, #4]
   14da4:	add	r0, r1, r0
   14da8:	str	r0, [sp, #4]
   14dac:	ldr	r0, [fp, #-8]
   14db0:	add	r1, sp, #4
   14db4:	add	r1, r1, #8
   14db8:	ldr	r2, [sp, #8]
   14dbc:	str	r0, [r1, r2, lsl #3]
   14dc0:	ldr	r0, [fp, #-12]
   14dc4:	ldr	r2, [sp, #8]
   14dc8:	add	r1, r1, r2, lsl #3
   14dcc:	str	r0, [r1, #4]
   14dd0:	ldr	r0, [sp, #8]
   14dd4:	add	r0, r0, #1
   14dd8:	str	r0, [sp, #8]
   14ddc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14de0:	cmp	r0, #0
   14de4:	bls	14e2c <flatcc_builder_create_struct@@Base+0x114>
   14de8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14dec:	ldr	r1, [sp, #4]
   14df0:	add	r0, r1, r0
   14df4:	str	r0, [sp, #4]
   14df8:	add	r0, sp, #4
   14dfc:	add	r0, r0, #8
   14e00:	ldr	r1, [sp, #8]
   14e04:	ldr	r2, [pc, #64]	; 14e4c <flatcc_builder_create_struct@@Base+0x134>
   14e08:	ldr	r2, [pc, r2]
   14e0c:	str	r2, [r0, r1, lsl #3]
   14e10:	ldr	r1, [fp, #-20]	; 0xffffffec
   14e14:	ldr	r2, [sp, #8]
   14e18:	add	r0, r0, r2, lsl #3
   14e1c:	str	r1, [r0, #4]
   14e20:	ldr	r0, [sp, #8]
   14e24:	add	r0, r0, #1
   14e28:	str	r0, [sp, #8]
   14e2c:	ldr	r0, [fp, #-4]
   14e30:	add	r1, sp, #4
   14e34:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   14e38:	mov	sp, fp
   14e3c:	pop	{fp, pc}
   14e40:	andeq	r6, r0, r7, lsr #1
   14e44:	andeq	r5, r0, sl, asr #29
   14e48:	andeq	r6, r0, r2, lsr #1
   14e4c:	andeq	r7, r1, ip, lsr r2

00014e50 <flatcc_builder_start_buffer@@Base>:
   14e50:	push	{fp, lr}
   14e54:	mov	fp, sp
   14e58:	sub	sp, sp, #32
   14e5c:	str	r0, [fp, #-8]
   14e60:	str	r1, [fp, #-12]
   14e64:	strh	r2, [fp, #-14]
   14e68:	str	r3, [sp, #12]
   14e6c:	ldr	r0, [fp, #-8]
   14e70:	ldr	r1, [fp, #-8]
   14e74:	ldrh	r1, [r1, #128]	; 0x80
   14e78:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   14e7c:	cmp	r0, #0
   14e80:	beq	14e90 <flatcc_builder_start_buffer@@Base+0x40>
   14e84:	mvn	r0, #0
   14e88:	str	r0, [fp, #-4]
   14e8c:	b	14fb8 <flatcc_builder_start_buffer@@Base+0x168>
   14e90:	ldr	r0, [fp, #-8]
   14e94:	movw	r1, #1
   14e98:	strh	r1, [r0, #128]	; 0x80
   14e9c:	ldr	r0, [fp, #-8]
   14ea0:	ldrh	r0, [r0, #132]	; 0x84
   14ea4:	ldr	r1, [fp, #-8]
   14ea8:	ldr	r1, [r1, #32]
   14eac:	strh	r0, [r1, #34]	; 0x22
   14eb0:	ldrh	r0, [fp, #-14]
   14eb4:	ldr	r1, [fp, #-8]
   14eb8:	strh	r0, [r1, #132]	; 0x84
   14ebc:	ldr	r0, [fp, #-8]
   14ec0:	ldrh	r0, [r0, #164]	; 0xa4
   14ec4:	ldr	r1, [fp, #-8]
   14ec8:	ldr	r1, [r1, #32]
   14ecc:	strh	r0, [r1, #32]
   14ed0:	ldr	r0, [sp, #12]
   14ed4:	ldr	r1, [fp, #-8]
   14ed8:	strh	r0, [r1, #164]	; 0xa4
   14edc:	ldr	r0, [fp, #-8]
   14ee0:	ldr	r0, [r0, #144]	; 0x90
   14ee4:	ldr	r1, [fp, #-8]
   14ee8:	ldr	r1, [r1, #32]
   14eec:	str	r0, [r1, #20]
   14ef0:	ldr	r0, [fp, #-8]
   14ef4:	ldr	r0, [r0, #152]	; 0x98
   14ef8:	ldr	r1, [fp, #-8]
   14efc:	ldr	r1, [r1, #32]
   14f00:	str	r0, [r1, #28]
   14f04:	ldr	r0, [fp, #-8]
   14f08:	ldr	r0, [r0, #136]	; 0x88
   14f0c:	ldr	r1, [fp, #-8]
   14f10:	str	r0, [r1, #144]	; 0x90
   14f14:	ldr	r0, [fp, #-8]
   14f18:	ldr	r1, [r0, #148]	; 0x94
   14f1c:	add	r2, r1, #1
   14f20:	str	r2, [r0, #148]	; 0x94
   14f24:	ldr	r0, [fp, #-8]
   14f28:	str	r1, [r0, #152]	; 0x98
   14f2c:	ldr	r0, [fp, #-8]
   14f30:	ldr	r0, [r0, #168]	; 0xa8
   14f34:	ldr	r1, [fp, #-8]
   14f38:	ldr	r1, [r1, #32]
   14f3c:	str	r0, [r1, #16]
   14f40:	ldr	r0, [fp, #-8]
   14f44:	add	r0, r0, #168	; 0xa8
   14f48:	ldr	r1, [fp, #-12]
   14f4c:	movw	r2, #0
   14f50:	cmp	r1, r2
   14f54:	str	r0, [sp, #8]
   14f58:	beq	14f68 <flatcc_builder_start_buffer@@Base+0x118>
   14f5c:	ldr	r0, [fp, #-12]
   14f60:	str	r0, [sp, #4]
   14f64:	b	14f78 <flatcc_builder_start_buffer@@Base+0x128>
   14f68:	ldr	r0, [pc, #84]	; 14fc4 <flatcc_builder_start_buffer@@Base+0x174>
   14f6c:	ldr	r0, [pc, r0]
   14f70:	str	r0, [sp, #4]
   14f74:	b	14f78 <flatcc_builder_start_buffer@@Base+0x128>
   14f78:	ldr	r0, [sp, #4]
   14f7c:	ldrb	r1, [r0]
   14f80:	ldr	r2, [sp, #8]
   14f84:	strb	r1, [r2]
   14f88:	ldrb	r1, [r0, #1]
   14f8c:	strb	r1, [r2, #1]
   14f90:	ldrb	r1, [r0, #2]
   14f94:	strb	r1, [r2, #2]
   14f98:	ldrb	r0, [r0, #3]
   14f9c:	strb	r0, [r2, #3]
   14fa0:	ldr	r0, [fp, #-8]
   14fa4:	ldr	r0, [r0, #32]
   14fa8:	movw	r1, #1
   14fac:	strh	r1, [r0, #14]
   14fb0:	movw	r0, #0
   14fb4:	str	r0, [fp, #-4]
   14fb8:	ldr	r0, [fp, #-4]
   14fbc:	mov	sp, fp
   14fc0:	pop	{fp, pc}
   14fc4:	ldrdeq	r7, [r1], -r8
   14fc8:	push	{fp, lr}
   14fcc:	mov	fp, sp
   14fd0:	sub	sp, sp, #24
   14fd4:	str	r0, [fp, #-8]
   14fd8:	strh	r1, [fp, #-10]
   14fdc:	ldr	r0, [fp, #-8]
   14fe0:	ldr	r1, [r0, #156]	; 0x9c
   14fe4:	add	r1, r1, #1
   14fe8:	str	r1, [r0, #156]	; 0x9c
   14fec:	ldr	r0, [fp, #-8]
   14ff0:	ldr	r0, [r0, #160]	; 0xa0
   14ff4:	cmp	r1, r0
   14ff8:	ble	150e4 <flatcc_builder_start_buffer@@Base+0x294>
   14ffc:	ldr	r0, [fp, #-8]
   15000:	ldr	r0, [r0, #176]	; 0xb0
   15004:	cmp	r0, #0
   15008:	ble	15030 <flatcc_builder_start_buffer@@Base+0x1e0>
   1500c:	ldr	r0, [fp, #-8]
   15010:	ldr	r0, [r0, #156]	; 0x9c
   15014:	ldr	r1, [fp, #-8]
   15018:	ldr	r1, [r1, #176]	; 0xb0
   1501c:	cmp	r0, r1
   15020:	ble	15030 <flatcc_builder_start_buffer@@Base+0x1e0>
   15024:	mvn	r0, #0
   15028:	str	r0, [fp, #-4]
   1502c:	b	15188 <flatcc_builder_start_buffer@@Base+0x338>
   15030:	ldr	r0, [fp, #-8]
   15034:	ldr	r1, [fp, #-8]
   15038:	ldr	r1, [r1, #156]	; 0x9c
   1503c:	sub	r1, r1, #1
   15040:	movw	r2, #36	; 0x24
   15044:	mul	r1, r1, r2
   15048:	movw	r3, #4
   1504c:	str	r1, [sp, #8]
   15050:	mov	r1, r3
   15054:	ldr	r3, [sp, #8]
   15058:	str	r2, [sp, #4]
   1505c:	mov	r2, r3
   15060:	ldr	r3, [sp, #4]
   15064:	movw	ip, #0
   15068:	str	ip, [sp]
   1506c:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15070:	ldr	r1, [fp, #-8]
   15074:	str	r0, [r1, #32]
   15078:	movw	r1, #0
   1507c:	cmp	r0, r1
   15080:	bne	15090 <flatcc_builder_start_buffer@@Base+0x240>
   15084:	mvn	r0, #0
   15088:	str	r0, [fp, #-4]
   1508c:	b	15188 <flatcc_builder_start_buffer@@Base+0x338>
   15090:	ldr	r0, [fp, #-8]
   15094:	ldr	r0, [r0, #88]	; 0x58
   15098:	movw	r1, #36	; 0x24
   1509c:	udiv	r0, r0, r1
   150a0:	ldr	r1, [fp, #-8]
   150a4:	str	r0, [r1, #160]	; 0xa0
   150a8:	ldr	r0, [fp, #-8]
   150ac:	ldr	r0, [r0, #176]	; 0xb0
   150b0:	cmp	r0, #0
   150b4:	ble	150e0 <flatcc_builder_start_buffer@@Base+0x290>
   150b8:	ldr	r0, [fp, #-8]
   150bc:	ldr	r0, [r0, #176]	; 0xb0
   150c0:	ldr	r1, [fp, #-8]
   150c4:	ldr	r1, [r1, #160]	; 0xa0
   150c8:	cmp	r0, r1
   150cc:	bge	150e0 <flatcc_builder_start_buffer@@Base+0x290>
   150d0:	ldr	r0, [fp, #-8]
   150d4:	ldr	r0, [r0, #176]	; 0xb0
   150d8:	ldr	r1, [fp, #-8]
   150dc:	str	r0, [r1, #160]	; 0xa0
   150e0:	b	150f4 <flatcc_builder_start_buffer@@Base+0x2a4>
   150e4:	ldr	r0, [fp, #-8]
   150e8:	ldr	r1, [r0, #32]
   150ec:	add	r1, r1, #36	; 0x24
   150f0:	str	r1, [r0, #32]
   150f4:	ldr	r0, [fp, #-8]
   150f8:	ldr	r0, [r0, #20]
   150fc:	ldr	r1, [fp, #-8]
   15100:	ldr	r1, [r1, #32]
   15104:	str	r0, [r1, #8]
   15108:	ldr	r0, [fp, #-8]
   1510c:	ldrh	r0, [r0, #130]	; 0x82
   15110:	ldr	r1, [fp, #-8]
   15114:	ldr	r1, [r1, #32]
   15118:	strh	r0, [r1, #12]
   1511c:	ldrh	r0, [fp, #-10]
   15120:	ldr	r1, [fp, #-8]
   15124:	strh	r0, [r1, #130]	; 0x82
   15128:	ldr	r0, [fp, #-8]
   1512c:	ldr	r0, [r0, #28]
   15130:	ldr	r1, [fp, #-8]
   15134:	ldr	r1, [r1, #32]
   15138:	str	r0, [r1]
   1513c:	ldr	r0, [fp, #-8]
   15140:	ldr	r0, [r0, #32]
   15144:	mvn	r1, #3
   15148:	str	r1, [r0, #4]
   1514c:	ldr	r0, [fp, #-8]
   15150:	ldr	r0, [r0, #28]
   15154:	ldr	r1, [fp, #-8]
   15158:	ldr	r1, [r1, #20]
   1515c:	add	r0, r0, r1
   15160:	add	r0, r0, #8
   15164:	sub	r0, r0, #1
   15168:	mvn	r1, #7
   1516c:	and	r0, r0, r1
   15170:	ldr	r1, [fp, #-8]
   15174:	str	r0, [r1, #28]
   15178:	ldr	r0, [fp, #-8]
   1517c:	movw	r1, #0
   15180:	str	r1, [r0, #20]
   15184:	str	r1, [fp, #-4]
   15188:	ldr	r0, [fp, #-4]
   1518c:	mov	sp, fp
   15190:	pop	{fp, pc}

00015194 <flatcc_builder_end_buffer@@Base>:
   15194:	push	{r4, sl, fp, lr}
   15198:	add	fp, sp, #8
   1519c:	sub	sp, sp, #32
   151a0:	str	r0, [fp, #-16]
   151a4:	str	r1, [sp, #20]
   151a8:	ldr	r0, [fp, #-16]
   151ac:	ldrh	r0, [r0, #164]	; 0xa4
   151b0:	and	r0, r0, #2
   151b4:	str	r0, [sp, #12]
   151b8:	ldr	r0, [fp, #-16]
   151bc:	ldr	r0, [r0, #152]	; 0x98
   151c0:	cmp	r0, #0
   151c4:	movw	r0, #0
   151c8:	moveq	r0, #1
   151cc:	tst	r0, #1
   151d0:	movw	r0, #0
   151d4:	moveq	r0, #1
   151d8:	ldr	r1, [sp, #12]
   151dc:	orr	r0, r1, r0
   151e0:	str	r0, [sp, #12]
   151e4:	ldr	r0, [fp, #-16]
   151e8:	ldr	r0, [r0, #32]
   151ec:	ldrh	r0, [r0, #14]
   151f0:	cmp	r0, #1
   151f4:	bne	151fc <flatcc_builder_end_buffer@@Base+0x68>
   151f8:	b	1521c <flatcc_builder_end_buffer@@Base+0x88>
   151fc:	ldr	r0, [pc, #244]	; 152f8 <flatcc_builder_end_buffer@@Base+0x164>
   15200:	add	r0, pc, r0
   15204:	ldr	r1, [pc, #240]	; 152fc <flatcc_builder_end_buffer@@Base+0x168>
   15208:	add	r1, pc, r1
   1520c:	ldr	r2, [pc, #236]	; 15300 <flatcc_builder_end_buffer@@Base+0x16c>
   15210:	add	r3, pc, r2
   15214:	movw	r2, #838	; 0x346
   15218:	bl	12448 <__assert_fail@plt>
   1521c:	ldr	r0, [fp, #-16]
   15220:	ldr	r1, [fp, #-16]
   15224:	ldrh	r1, [r1, #132]	; 0x84
   15228:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   1522c:	ldr	r0, [fp, #-16]
   15230:	ldr	r1, [fp, #-16]
   15234:	add	r1, r1, #168	; 0xa8
   15238:	ldr	lr, [fp, #-16]
   1523c:	ldrh	lr, [lr, #132]	; 0x84
   15240:	ldr	r3, [sp, #20]
   15244:	ldr	r2, [fp, #-16]
   15248:	ldrh	r2, [r2, #128]	; 0x80
   1524c:	ldr	ip, [sp, #12]
   15250:	uxth	lr, lr
   15254:	str	r2, [sp, #8]
   15258:	mov	r2, lr
   1525c:	ldr	lr, [sp, #8]
   15260:	uxth	r4, lr
   15264:	str	r4, [sp]
   15268:	str	ip, [sp, #4]
   1526c:	bl	14928 <flatcc_builder_create_buffer@@Base>
   15270:	str	r0, [sp, #16]
   15274:	movw	r1, #0
   15278:	cmp	r1, r0
   1527c:	bne	1528c <flatcc_builder_end_buffer@@Base+0xf8>
   15280:	movw	r0, #0
   15284:	str	r0, [fp, #-12]
   15288:	b	152ec <flatcc_builder_end_buffer@@Base+0x158>
   1528c:	ldr	r0, [fp, #-16]
   15290:	ldr	r0, [r0, #32]
   15294:	ldr	r0, [r0, #20]
   15298:	ldr	r1, [fp, #-16]
   1529c:	str	r0, [r1, #144]	; 0x90
   152a0:	ldr	r0, [fp, #-16]
   152a4:	ldr	r0, [r0, #32]
   152a8:	ldr	r0, [r0, #28]
   152ac:	ldr	r1, [fp, #-16]
   152b0:	str	r0, [r1, #152]	; 0x98
   152b4:	ldr	r0, [fp, #-16]
   152b8:	ldr	r0, [r0, #32]
   152bc:	ldr	r0, [r0, #16]
   152c0:	ldr	r1, [fp, #-16]
   152c4:	str	r0, [r1, #168]	; 0xa8
   152c8:	ldr	r0, [fp, #-16]
   152cc:	ldr	r0, [r0, #32]
   152d0:	ldrh	r0, [r0, #32]
   152d4:	ldr	r1, [fp, #-16]
   152d8:	strh	r0, [r1, #164]	; 0xa4
   152dc:	ldr	r0, [fp, #-16]
   152e0:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   152e4:	ldr	r0, [sp, #16]
   152e8:	str	r0, [fp, #-12]
   152ec:	ldr	r0, [fp, #-12]
   152f0:	sub	sp, fp, #8
   152f4:	pop	{r4, sl, fp, pc}
   152f8:	andeq	r5, r0, r0, ror #24
   152fc:	andeq	r5, r0, r2, lsl sl
   15300:	andeq	r5, r0, ip, ror ip
   15304:	push	{fp, lr}
   15308:	mov	fp, sp
   1530c:	sub	sp, sp, #8
   15310:	str	r0, [sp, #4]
   15314:	ldr	r0, [sp, #4]
   15318:	ldr	r0, [r0, #16]
   1531c:	ldr	r1, [sp, #4]
   15320:	ldr	r2, [r1, #20]
   15324:	movw	r1, #0
   15328:	and	r1, r1, #255	; 0xff
   1532c:	bl	12418 <memset@plt>
   15330:	ldr	r0, [sp, #4]
   15334:	ldr	r0, [r0, #32]
   15338:	ldr	r0, [r0, #8]
   1533c:	ldr	r1, [sp, #4]
   15340:	str	r0, [r1, #20]
   15344:	ldr	r0, [sp, #4]
   15348:	ldr	r0, [r0, #32]
   1534c:	ldr	r0, [r0]
   15350:	ldr	r1, [sp, #4]
   15354:	str	r0, [r1, #28]
   15358:	ldr	r0, [sp, #4]
   1535c:	ldr	r1, [sp, #4]
   15360:	ldr	r1, [r1, #32]
   15364:	ldr	r1, [r1, #4]
   15368:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   1536c:	ldr	r0, [sp, #4]
   15370:	ldr	r1, [sp, #4]
   15374:	ldrh	r1, [r1, #130]	; 0x82
   15378:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   1537c:	ldr	r0, [sp, #4]
   15380:	ldr	r0, [r0, #32]
   15384:	ldrh	r0, [r0, #12]
   15388:	ldr	r1, [sp, #4]
   1538c:	strh	r0, [r1, #130]	; 0x82
   15390:	ldr	r0, [sp, #4]
   15394:	ldr	r1, [r0, #32]
   15398:	mvn	r2, #35	; 0x23
   1539c:	add	r1, r1, r2
   153a0:	str	r1, [r0, #32]
   153a4:	ldr	r0, [sp, #4]
   153a8:	ldr	r1, [r0, #156]	; 0x9c
   153ac:	mvn	r2, #0
   153b0:	add	r1, r1, r2
   153b4:	str	r1, [r0, #156]	; 0x9c
   153b8:	mov	sp, fp
   153bc:	pop	{fp, pc}

000153c0 <flatcc_builder_start_struct@@Base>:
   153c0:	push	{fp, lr}
   153c4:	mov	fp, sp
   153c8:	sub	sp, sp, #16
   153cc:	str	r0, [sp, #8]
   153d0:	str	r1, [sp, #4]
   153d4:	strh	r2, [sp, #2]
   153d8:	ldr	r0, [sp, #8]
   153dc:	ldrh	r1, [sp, #2]
   153e0:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   153e4:	cmp	r0, #0
   153e8:	beq	153f8 <flatcc_builder_start_struct@@Base+0x38>
   153ec:	movw	r0, #0
   153f0:	str	r0, [fp, #-4]
   153f4:	b	15424 <flatcc_builder_start_struct@@Base+0x64>
   153f8:	ldr	r0, [sp, #8]
   153fc:	ldr	r0, [r0, #32]
   15400:	movw	r1, #2
   15404:	strh	r1, [r0, #14]
   15408:	ldr	r0, [sp, #8]
   1540c:	mvn	r1, #3
   15410:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   15414:	ldr	r0, [sp, #8]
   15418:	ldr	r1, [sp, #4]
   1541c:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   15420:	str	r0, [fp, #-4]
   15424:	ldr	r0, [fp, #-4]
   15428:	mov	sp, fp
   1542c:	pop	{fp, pc}
   15430:	sub	sp, sp, #12
   15434:	str	r0, [sp, #8]
   15438:	str	r1, [sp, #4]
   1543c:	ldr	r0, [sp, #8]
   15440:	add	r0, r0, #52	; 0x34
   15444:	add	r0, r0, #8
   15448:	str	r0, [sp]
   1544c:	ldr	r0, [sp, #8]
   15450:	ldr	r0, [r0, #60]	; 0x3c
   15454:	ldr	r1, [sp, #8]
   15458:	ldr	r1, [r1, #28]
   1545c:	add	r0, r0, r1
   15460:	ldr	r1, [sp, #8]
   15464:	str	r0, [r1, #16]
   15468:	ldr	r0, [sp]
   1546c:	ldr	r0, [r0, #4]
   15470:	ldr	r1, [sp, #8]
   15474:	ldr	r1, [r1, #28]
   15478:	sub	r0, r0, r1
   1547c:	ldr	r1, [sp, #8]
   15480:	str	r0, [r1, #24]
   15484:	ldr	r0, [sp, #8]
   15488:	ldr	r0, [r0, #24]
   1548c:	ldr	r1, [sp, #4]
   15490:	cmp	r0, r1
   15494:	bls	154a4 <flatcc_builder_start_struct@@Base+0xe4>
   15498:	ldr	r0, [sp, #4]
   1549c:	ldr	r1, [sp, #8]
   154a0:	str	r0, [r1, #24]
   154a4:	ldr	r0, [sp, #4]
   154a8:	ldr	r1, [sp, #8]
   154ac:	ldr	r1, [r1, #32]
   154b0:	str	r0, [r1, #4]
   154b4:	add	sp, sp, #12
   154b8:	bx	lr
   154bc:	push	{fp, lr}
   154c0:	mov	fp, sp
   154c4:	sub	sp, sp, #16
   154c8:	str	r0, [sp, #8]
   154cc:	str	r1, [sp, #4]
   154d0:	ldr	r0, [sp, #8]
   154d4:	ldr	r0, [r0, #20]
   154d8:	str	r0, [sp]
   154dc:	ldr	r0, [sp, #4]
   154e0:	ldr	r1, [sp, #8]
   154e4:	ldr	r2, [r1, #20]
   154e8:	add	r0, r2, r0
   154ec:	str	r0, [r1, #20]
   154f0:	ldr	r1, [sp, #8]
   154f4:	ldr	r1, [r1, #24]
   154f8:	cmp	r0, r1
   154fc:	bcc	15530 <flatcc_builder_start_struct@@Base+0x170>
   15500:	ldr	r0, [sp, #8]
   15504:	ldr	r1, [sp, #8]
   15508:	ldr	r1, [r1, #20]
   1550c:	add	r1, r1, #1
   15510:	mvn	r2, #3
   15514:	bl	1962c <flatcc_builder_get_emit_context@@Base+0x40>
   15518:	cmp	r0, #0
   1551c:	beq	1552c <flatcc_builder_start_struct@@Base+0x16c>
   15520:	movw	r0, #0
   15524:	str	r0, [fp, #-4]
   15528:	b	15544 <flatcc_builder_start_struct@@Base+0x184>
   1552c:	b	15530 <flatcc_builder_start_struct@@Base+0x170>
   15530:	ldr	r0, [sp, #8]
   15534:	ldr	r0, [r0, #16]
   15538:	ldr	r1, [sp]
   1553c:	add	r0, r0, r1
   15540:	str	r0, [fp, #-4]
   15544:	ldr	r0, [fp, #-4]
   15548:	mov	sp, fp
   1554c:	pop	{fp, pc}

00015550 <flatcc_builder_struct_edit@@Base>:
   15550:	sub	sp, sp, #4
   15554:	str	r0, [sp]
   15558:	ldr	r0, [sp]
   1555c:	ldr	r0, [r0, #16]
   15560:	add	sp, sp, #4
   15564:	bx	lr

00015568 <flatcc_builder_end_struct@@Base>:
   15568:	push	{fp, lr}
   1556c:	mov	fp, sp
   15570:	sub	sp, sp, #16
   15574:	str	r0, [sp, #8]
   15578:	ldr	r0, [sp, #8]
   1557c:	ldr	r0, [r0, #32]
   15580:	ldrh	r0, [r0, #14]
   15584:	cmp	r0, #2
   15588:	bne	15590 <flatcc_builder_end_struct@@Base+0x28>
   1558c:	b	155b0 <flatcc_builder_end_struct@@Base+0x48>
   15590:	ldr	r0, [pc, #112]	; 15608 <flatcc_builder_end_struct@@Base+0xa0>
   15594:	add	r0, pc, r0
   15598:	ldr	r1, [pc, #108]	; 1560c <flatcc_builder_end_struct@@Base+0xa4>
   1559c:	add	r1, pc, r1
   155a0:	ldr	r2, [pc, #104]	; 15610 <flatcc_builder_end_struct@@Base+0xa8>
   155a4:	add	r3, pc, r2
   155a8:	movw	r2, #872	; 0x368
   155ac:	bl	12448 <__assert_fail@plt>
   155b0:	ldr	r0, [sp, #8]
   155b4:	ldr	r1, [sp, #8]
   155b8:	ldr	r1, [r1, #16]
   155bc:	ldr	r2, [sp, #8]
   155c0:	ldr	r2, [r2, #20]
   155c4:	ldr	r3, [sp, #8]
   155c8:	ldrh	r3, [r3, #130]	; 0x82
   155cc:	bl	14d18 <flatcc_builder_create_struct@@Base>
   155d0:	str	r0, [sp, #4]
   155d4:	movw	r1, #0
   155d8:	cmp	r1, r0
   155dc:	bne	155ec <flatcc_builder_end_struct@@Base+0x84>
   155e0:	movw	r0, #0
   155e4:	str	r0, [fp, #-4]
   155e8:	b	155fc <flatcc_builder_end_struct@@Base+0x94>
   155ec:	ldr	r0, [sp, #8]
   155f0:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   155f4:	ldr	r0, [sp, #4]
   155f8:	str	r0, [fp, #-4]
   155fc:	ldr	r0, [fp, #-4]
   15600:	mov	sp, fp
   15604:	pop	{fp, pc}
   15608:	andeq	r5, r0, r1, asr r9
   1560c:	andeq	r5, r0, lr, ror r6
   15610:	andeq	r5, r0, sp, ror #18

00015614 <flatcc_builder_extend_vector@@Base>:
   15614:	push	{fp, lr}
   15618:	mov	fp, sp
   1561c:	sub	sp, sp, #16
   15620:	str	r0, [sp, #8]
   15624:	str	r1, [sp, #4]
   15628:	ldr	r0, [sp, #8]
   1562c:	ldr	r1, [sp, #4]
   15630:	ldr	r2, [sp, #8]
   15634:	ldr	r2, [r2, #32]
   15638:	ldr	r2, [r2, #24]
   1563c:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   15640:	cmp	r0, #0
   15644:	beq	15654 <flatcc_builder_extend_vector@@Base+0x40>
   15648:	movw	r0, #0
   1564c:	str	r0, [fp, #-4]
   15650:	b	15674 <flatcc_builder_extend_vector@@Base+0x60>
   15654:	ldr	r0, [sp, #8]
   15658:	ldr	r1, [sp, #8]
   1565c:	ldr	r1, [r1, #32]
   15660:	ldr	r1, [r1, #16]
   15664:	ldr	r2, [sp, #4]
   15668:	mul	r1, r1, r2
   1566c:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   15670:	str	r0, [fp, #-4]
   15674:	ldr	r0, [fp, #-4]
   15678:	mov	sp, fp
   1567c:	pop	{fp, pc}
   15680:	push	{fp, lr}
   15684:	mov	fp, sp
   15688:	sub	sp, sp, #24
   1568c:	str	r0, [fp, #-8]
   15690:	str	r1, [sp, #12]
   15694:	str	r2, [sp, #8]
   15698:	ldr	r0, [fp, #-8]
   1569c:	ldr	r0, [r0, #32]
   156a0:	ldr	r0, [r0, #20]
   156a4:	str	r0, [sp, #4]
   156a8:	ldr	r0, [sp, #4]
   156ac:	ldr	r1, [sp, #12]
   156b0:	add	r0, r0, r1
   156b4:	str	r0, [sp]
   156b8:	ldr	r0, [sp, #4]
   156bc:	ldr	r1, [sp]
   156c0:	cmp	r0, r1
   156c4:	bhi	156d8 <flatcc_builder_extend_vector@@Base+0xc4>
   156c8:	ldr	r0, [sp]
   156cc:	ldr	r1, [sp, #8]
   156d0:	cmp	r0, r1
   156d4:	bls	15728 <flatcc_builder_extend_vector@@Base+0x114>
   156d8:	ldr	r0, [sp, #4]
   156dc:	ldr	r1, [sp]
   156e0:	cmp	r0, r1
   156e4:	bhi	156fc <flatcc_builder_extend_vector@@Base+0xe8>
   156e8:	ldr	r0, [sp]
   156ec:	ldr	r1, [sp, #8]
   156f0:	cmp	r0, r1
   156f4:	bhi	156fc <flatcc_builder_extend_vector@@Base+0xe8>
   156f8:	b	1571c <flatcc_builder_extend_vector@@Base+0x108>
   156fc:	ldr	r0, [pc, #72]	; 1574c <flatcc_builder_extend_vector@@Base+0x138>
   15700:	add	r0, pc, r0
   15704:	ldr	r1, [pc, #68]	; 15750 <flatcc_builder_extend_vector@@Base+0x13c>
   15708:	add	r1, pc, r1
   1570c:	ldr	r2, [pc, #64]	; 15754 <flatcc_builder_extend_vector@@Base+0x140>
   15710:	add	r3, pc, r2
   15714:	movw	r2, #892	; 0x37c
   15718:	bl	12448 <__assert_fail@plt>
   1571c:	mvn	r0, #0
   15720:	str	r0, [fp, #-4]
   15724:	b	15740 <flatcc_builder_extend_vector@@Base+0x12c>
   15728:	ldr	r0, [sp]
   1572c:	ldr	r1, [fp, #-8]
   15730:	ldr	r1, [r1, #32]
   15734:	str	r0, [r1, #20]
   15738:	movw	r0, #0
   1573c:	str	r0, [fp, #-4]
   15740:	ldr	r0, [fp, #-4]
   15744:	mov	sp, fp
   15748:	pop	{fp, pc}
   1574c:	andeq	r6, r0, r0, ror #11
   15750:	andeq	r5, r0, r2, lsl r5
   15754:	andeq	r6, r0, fp, ror #11

00015758 <flatcc_builder_vector_push@@Base>:
   15758:	push	{fp, lr}
   1575c:	mov	fp, sp
   15760:	sub	sp, sp, #16
   15764:	str	r0, [sp, #8]
   15768:	str	r1, [sp, #4]
   1576c:	ldr	r0, [sp, #8]
   15770:	ldr	r0, [r0, #32]
   15774:	ldrh	r0, [r0, #14]
   15778:	cmp	r0, #4
   1577c:	bne	15784 <flatcc_builder_vector_push@@Base+0x2c>
   15780:	b	157a4 <flatcc_builder_vector_push@@Base+0x4c>
   15784:	ldr	r0, [pc, #196]	; 15850 <flatcc_builder_vector_push@@Base+0xf8>
   15788:	add	r0, pc, r0
   1578c:	ldr	r1, [pc, #192]	; 15854 <flatcc_builder_vector_push@@Base+0xfc>
   15790:	add	r1, pc, r1
   15794:	ldr	r2, [pc, #188]	; 15858 <flatcc_builder_vector_push@@Base+0x100>
   15798:	add	r3, pc, r2
   1579c:	movw	r2, #907	; 0x38b
   157a0:	bl	12448 <__assert_fail@plt>
   157a4:	ldr	r0, [sp, #8]
   157a8:	ldr	r0, [r0, #32]
   157ac:	ldr	r0, [r0, #20]
   157b0:	ldr	r1, [sp, #8]
   157b4:	ldr	r1, [r1, #32]
   157b8:	ldr	r1, [r1, #24]
   157bc:	cmp	r0, r1
   157c0:	bls	15814 <flatcc_builder_vector_push@@Base+0xbc>
   157c4:	ldr	r0, [sp, #8]
   157c8:	ldr	r0, [r0, #32]
   157cc:	ldr	r0, [r0, #20]
   157d0:	ldr	r1, [sp, #8]
   157d4:	ldr	r1, [r1, #32]
   157d8:	ldr	r1, [r1, #24]
   157dc:	cmp	r0, r1
   157e0:	bhi	157e8 <flatcc_builder_vector_push@@Base+0x90>
   157e4:	b	15808 <flatcc_builder_vector_push@@Base+0xb0>
   157e8:	ldr	r0, [pc, #108]	; 1585c <flatcc_builder_vector_push@@Base+0x104>
   157ec:	add	r0, pc, r0
   157f0:	ldr	r1, [pc, #104]	; 15860 <flatcc_builder_vector_push@@Base+0x108>
   157f4:	add	r1, pc, r1
   157f8:	ldr	r2, [pc, #100]	; 15864 <flatcc_builder_vector_push@@Base+0x10c>
   157fc:	add	r3, pc, r2
   15800:	movw	r2, #908	; 0x38c
   15804:	bl	12448 <__assert_fail@plt>
   15808:	movw	r0, #0
   1580c:	str	r0, [fp, #-4]
   15810:	b	15844 <flatcc_builder_vector_push@@Base+0xec>
   15814:	ldr	r0, [sp, #8]
   15818:	ldr	r0, [r0, #32]
   1581c:	ldr	r1, [r0, #20]
   15820:	add	r1, r1, #1
   15824:	str	r1, [r0, #20]
   15828:	ldr	r0, [sp, #8]
   1582c:	ldr	r1, [sp, #4]
   15830:	ldr	r2, [sp, #8]
   15834:	ldr	r2, [r2, #32]
   15838:	ldr	r2, [r2, #16]
   1583c:	bl	15868 <flatcc_builder_vector_push@@Base+0x110>
   15840:	str	r0, [fp, #-4]
   15844:	ldr	r0, [fp, #-4]
   15848:	mov	sp, fp
   1584c:	pop	{fp, pc}
   15850:	andeq	r5, r0, ip, asr #15
   15854:	andeq	r5, r0, sl, lsl #9
   15858:	andeq	r5, r0, r8, ror #15
   1585c:	ldrdeq	r5, [r0], -r7
   15860:	andeq	r5, r0, r6, lsr #8
   15864:	andeq	r5, r0, r4, lsl #15
   15868:	push	{fp, lr}
   1586c:	mov	fp, sp
   15870:	sub	sp, sp, #24
   15874:	str	r0, [fp, #-8]
   15878:	str	r1, [sp, #12]
   1587c:	str	r2, [sp, #8]
   15880:	ldr	r0, [fp, #-8]
   15884:	ldr	r1, [sp, #8]
   15888:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   1588c:	str	r0, [sp, #4]
   15890:	movw	r1, #0
   15894:	cmp	r0, r1
   15898:	bne	158a8 <flatcc_builder_vector_push@@Base+0x150>
   1589c:	movw	r0, #0
   158a0:	str	r0, [fp, #-4]
   158a4:	b	158c0 <flatcc_builder_vector_push@@Base+0x168>
   158a8:	ldr	r0, [sp, #4]
   158ac:	ldr	r1, [sp, #12]
   158b0:	ldr	r2, [sp, #8]
   158b4:	bl	123ac <memcpy@plt>
   158b8:	ldr	r0, [sp, #4]
   158bc:	str	r0, [fp, #-4]
   158c0:	ldr	r0, [fp, #-4]
   158c4:	mov	sp, fp
   158c8:	pop	{fp, pc}

000158cc <flatcc_builder_append_vector@@Base>:
   158cc:	push	{fp, lr}
   158d0:	mov	fp, sp
   158d4:	sub	sp, sp, #16
   158d8:	str	r0, [sp, #8]
   158dc:	str	r1, [sp, #4]
   158e0:	str	r2, [sp]
   158e4:	ldr	r0, [sp, #8]
   158e8:	ldr	r0, [r0, #32]
   158ec:	ldrh	r0, [r0, #14]
   158f0:	cmp	r0, #4
   158f4:	bne	158fc <flatcc_builder_append_vector@@Base+0x30>
   158f8:	b	1591c <flatcc_builder_append_vector@@Base+0x50>
   158fc:	ldr	r0, [pc, #116]	; 15978 <flatcc_builder_append_vector@@Base+0xac>
   15900:	add	r0, pc, r0
   15904:	ldr	r1, [pc, #112]	; 1597c <flatcc_builder_append_vector@@Base+0xb0>
   15908:	add	r1, pc, r1
   1590c:	ldr	r2, [pc, #108]	; 15980 <flatcc_builder_append_vector@@Base+0xb4>
   15910:	add	r3, pc, r2
   15914:	movw	r2, #915	; 0x393
   15918:	bl	12448 <__assert_fail@plt>
   1591c:	ldr	r0, [sp, #8]
   15920:	ldr	r1, [sp]
   15924:	ldr	r2, [sp, #8]
   15928:	ldr	r2, [r2, #32]
   1592c:	ldr	r2, [r2, #24]
   15930:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   15934:	cmp	r0, #0
   15938:	beq	15948 <flatcc_builder_append_vector@@Base+0x7c>
   1593c:	movw	r0, #0
   15940:	str	r0, [fp, #-4]
   15944:	b	1596c <flatcc_builder_append_vector@@Base+0xa0>
   15948:	ldr	r0, [sp, #8]
   1594c:	ldr	r1, [sp, #4]
   15950:	ldr	r2, [sp, #8]
   15954:	ldr	r2, [r2, #32]
   15958:	ldr	r2, [r2, #16]
   1595c:	ldr	r3, [sp]
   15960:	mul	r2, r2, r3
   15964:	bl	15868 <flatcc_builder_vector_push@@Base+0x110>
   15968:	str	r0, [fp, #-4]
   1596c:	ldr	r0, [fp, #-4]
   15970:	mov	sp, fp
   15974:	pop	{fp, pc}
   15978:	andeq	r5, r0, r4, asr r6
   1597c:	andeq	r5, r0, r2, lsl r3
   15980:	strdeq	r5, [r0], -r0

00015984 <flatcc_builder_extend_offset_vector@@Base>:
   15984:	push	{fp, lr}
   15988:	mov	fp, sp
   1598c:	sub	sp, sp, #16
   15990:	ldr	r2, [pc, #68]	; 159dc <flatcc_builder_extend_offset_vector@@Base+0x58>
   15994:	str	r0, [sp, #8]
   15998:	str	r1, [sp, #4]
   1599c:	ldr	r0, [sp, #8]
   159a0:	ldr	r1, [sp, #4]
   159a4:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   159a8:	cmp	r0, #0
   159ac:	beq	159bc <flatcc_builder_extend_offset_vector@@Base+0x38>
   159b0:	movw	r0, #0
   159b4:	str	r0, [fp, #-4]
   159b8:	b	159d0 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   159bc:	ldr	r0, [sp, #8]
   159c0:	ldr	r1, [sp, #4]
   159c4:	lsl	r1, r1, #2
   159c8:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   159cc:	str	r0, [fp, #-4]
   159d0:	ldr	r0, [fp, #-4]
   159d4:	mov	sp, fp
   159d8:	pop	{fp, pc}
   159dc:	svccc	0x00ffffff

000159e0 <flatcc_builder_offset_vector_push@@Base>:
   159e0:	push	{fp, lr}
   159e4:	mov	fp, sp
   159e8:	sub	sp, sp, #16
   159ec:	str	r0, [sp, #8]
   159f0:	str	r1, [sp, #4]
   159f4:	ldr	r0, [sp, #8]
   159f8:	ldr	r0, [r0, #32]
   159fc:	ldrh	r0, [r0, #14]
   15a00:	cmp	r0, #5
   15a04:	bne	15a0c <flatcc_builder_offset_vector_push@@Base+0x2c>
   15a08:	b	15a2c <flatcc_builder_offset_vector_push@@Base+0x4c>
   15a0c:	ldr	r0, [pc, #152]	; 15aac <flatcc_builder_offset_vector_push@@Base+0xcc>
   15a10:	add	r0, pc, r0
   15a14:	ldr	r1, [pc, #148]	; 15ab0 <flatcc_builder_offset_vector_push@@Base+0xd0>
   15a18:	add	r1, pc, r1
   15a1c:	ldr	r2, [pc, #144]	; 15ab4 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15a20:	add	r3, pc, r2
   15a24:	movw	r2, #934	; 0x3a6
   15a28:	bl	12448 <__assert_fail@plt>
   15a2c:	ldr	r0, [pc, #132]	; 15ab8 <flatcc_builder_offset_vector_push@@Base+0xd8>
   15a30:	ldr	r1, [sp, #8]
   15a34:	ldr	r1, [r1, #32]
   15a38:	ldr	r1, [r1, #20]
   15a3c:	cmp	r1, r0
   15a40:	bne	15a50 <flatcc_builder_offset_vector_push@@Base+0x70>
   15a44:	movw	r0, #0
   15a48:	str	r0, [fp, #-4]
   15a4c:	b	15aa0 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15a50:	ldr	r0, [sp, #8]
   15a54:	ldr	r0, [r0, #32]
   15a58:	ldr	r1, [r0, #20]
   15a5c:	add	r1, r1, #1
   15a60:	str	r1, [r0, #20]
   15a64:	ldr	r0, [sp, #8]
   15a68:	movw	r1, #4
   15a6c:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   15a70:	str	r0, [sp]
   15a74:	movw	r1, #0
   15a78:	cmp	r1, r0
   15a7c:	bne	15a8c <flatcc_builder_offset_vector_push@@Base+0xac>
   15a80:	movw	r0, #0
   15a84:	str	r0, [fp, #-4]
   15a88:	b	15aa0 <flatcc_builder_offset_vector_push@@Base+0xc0>
   15a8c:	ldr	r0, [sp, #4]
   15a90:	ldr	r1, [sp]
   15a94:	str	r0, [r1]
   15a98:	ldr	r0, [sp]
   15a9c:	str	r0, [fp, #-4]
   15aa0:	ldr	r0, [fp, #-4]
   15aa4:	mov	sp, fp
   15aa8:	pop	{fp, pc}
   15aac:	andeq	r5, r0, sp, lsr r6
   15ab0:	andeq	r5, r0, r2, lsl #4
   15ab4:	andeq	r5, r0, r0, ror #12
   15ab8:	svccc	0x00ffffff

00015abc <flatcc_builder_append_offset_vector@@Base>:
   15abc:	push	{fp, lr}
   15ac0:	mov	fp, sp
   15ac4:	sub	sp, sp, #16
   15ac8:	str	r0, [sp, #8]
   15acc:	str	r1, [sp, #4]
   15ad0:	str	r2, [sp]
   15ad4:	ldr	r0, [sp, #8]
   15ad8:	ldr	r0, [r0, #32]
   15adc:	ldrh	r0, [r0, #14]
   15ae0:	cmp	r0, #5
   15ae4:	bne	15aec <flatcc_builder_append_offset_vector@@Base+0x30>
   15ae8:	b	15b0c <flatcc_builder_append_offset_vector@@Base+0x50>
   15aec:	ldr	r0, [pc, #96]	; 15b54 <flatcc_builder_append_offset_vector@@Base+0x98>
   15af0:	add	r0, pc, r0
   15af4:	ldr	r1, [pc, #92]	; 15b58 <flatcc_builder_append_offset_vector@@Base+0x9c>
   15af8:	add	r1, pc, r1
   15afc:	ldr	r2, [pc, #88]	; 15b5c <flatcc_builder_append_offset_vector@@Base+0xa0>
   15b00:	add	r3, pc, r2
   15b04:	movw	r2, #948	; 0x3b4
   15b08:	bl	12448 <__assert_fail@plt>
   15b0c:	ldr	r2, [pc, #76]	; 15b60 <flatcc_builder_append_offset_vector@@Base+0xa4>
   15b10:	ldr	r0, [sp, #8]
   15b14:	ldr	r1, [sp]
   15b18:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   15b1c:	cmp	r0, #0
   15b20:	beq	15b30 <flatcc_builder_append_offset_vector@@Base+0x74>
   15b24:	movw	r0, #0
   15b28:	str	r0, [fp, #-4]
   15b2c:	b	15b48 <flatcc_builder_append_offset_vector@@Base+0x8c>
   15b30:	ldr	r0, [sp, #8]
   15b34:	ldr	r1, [sp, #4]
   15b38:	ldr	r2, [sp]
   15b3c:	lsl	r2, r2, #2
   15b40:	bl	15868 <flatcc_builder_vector_push@@Base+0x110>
   15b44:	str	r0, [fp, #-4]
   15b48:	ldr	r0, [fp, #-4]
   15b4c:	mov	sp, fp
   15b50:	pop	{fp, pc}
   15b54:	andeq	r5, r0, sp, asr r5
   15b58:	andeq	r5, r0, r2, lsr #2
   15b5c:	andeq	r5, r0, r2, ror #11
   15b60:	svccc	0x00ffffff

00015b64 <flatcc_builder_extend_string@@Base>:
   15b64:	push	{fp, lr}
   15b68:	mov	fp, sp
   15b6c:	sub	sp, sp, #16
   15b70:	str	r0, [sp, #8]
   15b74:	str	r1, [sp, #4]
   15b78:	ldr	r0, [sp, #8]
   15b7c:	ldr	r0, [r0, #32]
   15b80:	ldrh	r0, [r0, #14]
   15b84:	cmp	r0, #6
   15b88:	bne	15b90 <flatcc_builder_extend_string@@Base+0x2c>
   15b8c:	b	15bb0 <flatcc_builder_extend_string@@Base+0x4c>
   15b90:	ldr	r0, [pc, #88]	; 15bf0 <flatcc_builder_extend_string@@Base+0x8c>
   15b94:	add	r0, pc, r0
   15b98:	ldr	r1, [pc, #84]	; 15bf4 <flatcc_builder_extend_string@@Base+0x90>
   15b9c:	add	r1, pc, r1
   15ba0:	ldr	r2, [pc, #80]	; 15bf8 <flatcc_builder_extend_string@@Base+0x94>
   15ba4:	add	r3, pc, r2
   15ba8:	movw	r2, #957	; 0x3bd
   15bac:	bl	12448 <__assert_fail@plt>
   15bb0:	ldr	r0, [sp, #8]
   15bb4:	ldr	r1, [sp, #4]
   15bb8:	mvn	r2, #0
   15bbc:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   15bc0:	cmp	r0, #0
   15bc4:	beq	15bd4 <flatcc_builder_extend_string@@Base+0x70>
   15bc8:	movw	r0, #0
   15bcc:	str	r0, [fp, #-4]
   15bd0:	b	15be4 <flatcc_builder_extend_string@@Base+0x80>
   15bd4:	ldr	r0, [sp, #8]
   15bd8:	ldr	r1, [sp, #4]
   15bdc:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   15be0:	str	r0, [fp, #-4]
   15be4:	ldr	r0, [fp, #-4]
   15be8:	mov	sp, fp
   15bec:	pop	{fp, pc}
   15bf0:	andeq	r5, r0, r2, asr #11
   15bf4:	andeq	r5, r0, lr, ror r0
   15bf8:	ldrdeq	r5, [r0], -lr

00015bfc <flatcc_builder_append_string@@Base>:
   15bfc:	push	{fp, lr}
   15c00:	mov	fp, sp
   15c04:	sub	sp, sp, #16
   15c08:	str	r0, [sp, #8]
   15c0c:	str	r1, [sp, #4]
   15c10:	str	r2, [sp]
   15c14:	ldr	r0, [sp, #8]
   15c18:	ldr	r0, [r0, #32]
   15c1c:	ldrh	r0, [r0, #14]
   15c20:	cmp	r0, #6
   15c24:	bne	15c2c <flatcc_builder_append_string@@Base+0x30>
   15c28:	b	15c4c <flatcc_builder_append_string@@Base+0x50>
   15c2c:	ldr	r0, [pc, #92]	; 15c90 <flatcc_builder_append_string@@Base+0x94>
   15c30:	add	r0, pc, r0
   15c34:	ldr	r1, [pc, #88]	; 15c94 <flatcc_builder_append_string@@Base+0x98>
   15c38:	add	r1, pc, r1
   15c3c:	ldr	r2, [pc, #84]	; 15c98 <flatcc_builder_append_string@@Base+0x9c>
   15c40:	add	r3, pc, r2
   15c44:	movw	r2, #966	; 0x3c6
   15c48:	bl	12448 <__assert_fail@plt>
   15c4c:	ldr	r0, [sp, #8]
   15c50:	ldr	r1, [sp]
   15c54:	mvn	r2, #0
   15c58:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   15c5c:	cmp	r0, #0
   15c60:	beq	15c70 <flatcc_builder_append_string@@Base+0x74>
   15c64:	movw	r0, #0
   15c68:	str	r0, [fp, #-4]
   15c6c:	b	15c84 <flatcc_builder_append_string@@Base+0x88>
   15c70:	ldr	r0, [sp, #8]
   15c74:	ldr	r1, [sp, #4]
   15c78:	ldr	r2, [sp]
   15c7c:	bl	15868 <flatcc_builder_vector_push@@Base+0x110>
   15c80:	str	r0, [fp, #-4]
   15c84:	ldr	r0, [fp, #-4]
   15c88:	mov	sp, fp
   15c8c:	pop	{fp, pc}
   15c90:	andeq	r5, r0, r6, lsr #10
   15c94:	andeq	r4, r0, r2, ror #31
   15c98:	andeq	r5, r0, r1, lsl #11

00015c9c <flatcc_builder_append_string_str@@Base>:
   15c9c:	push	{fp, lr}
   15ca0:	mov	fp, sp
   15ca4:	sub	sp, sp, #24
   15ca8:	str	r0, [fp, #-4]
   15cac:	str	r1, [fp, #-8]
   15cb0:	ldr	r0, [fp, #-4]
   15cb4:	ldr	r1, [fp, #-8]
   15cb8:	ldr	r2, [fp, #-8]
   15cbc:	str	r0, [sp, #12]
   15cc0:	mov	r0, r2
   15cc4:	str	r1, [sp, #8]
   15cc8:	bl	123f4 <strlen@plt>
   15ccc:	ldr	r1, [sp, #12]
   15cd0:	str	r0, [sp, #4]
   15cd4:	mov	r0, r1
   15cd8:	ldr	r1, [sp, #8]
   15cdc:	ldr	r2, [sp, #4]
   15ce0:	bl	15bfc <flatcc_builder_append_string@@Base>
   15ce4:	mov	sp, fp
   15ce8:	pop	{fp, pc}

00015cec <flatcc_builder_append_string_strn@@Base>:
   15cec:	push	{fp, lr}
   15cf0:	mov	fp, sp
   15cf4:	sub	sp, sp, #24
   15cf8:	str	r0, [fp, #-4]
   15cfc:	str	r1, [fp, #-8]
   15d00:	str	r2, [sp, #12]
   15d04:	ldr	r0, [fp, #-4]
   15d08:	ldr	r1, [fp, #-8]
   15d0c:	ldr	r2, [fp, #-8]
   15d10:	ldr	r3, [sp, #12]
   15d14:	str	r0, [sp, #8]
   15d18:	mov	r0, r2
   15d1c:	str	r1, [sp, #4]
   15d20:	mov	r1, r3
   15d24:	bl	15d48 <flatcc_builder_append_string_strn@@Base+0x5c>
   15d28:	ldr	r1, [sp, #8]
   15d2c:	str	r0, [sp]
   15d30:	mov	r0, r1
   15d34:	ldr	r1, [sp, #4]
   15d38:	ldr	r2, [sp]
   15d3c:	bl	15bfc <flatcc_builder_append_string@@Base>
   15d40:	mov	sp, fp
   15d44:	pop	{fp, pc}
   15d48:	push	{fp, lr}
   15d4c:	mov	fp, sp
   15d50:	sub	sp, sp, #16
   15d54:	str	r0, [fp, #-4]
   15d58:	str	r1, [sp, #8]
   15d5c:	ldr	r0, [fp, #-4]
   15d60:	ldr	r2, [sp, #8]
   15d64:	mov	r1, #0
   15d68:	bl	12430 <memchr@plt>
   15d6c:	str	r0, [sp, #4]
   15d70:	ldr	r0, [sp, #4]
   15d74:	movw	r1, #0
   15d78:	cmp	r0, r1
   15d7c:	beq	15d94 <flatcc_builder_append_string_strn@@Base+0xa8>
   15d80:	ldr	r0, [sp, #4]
   15d84:	ldr	r1, [fp, #-4]
   15d88:	sub	r0, r0, r1
   15d8c:	str	r0, [sp]
   15d90:	b	15d9c <flatcc_builder_append_string_strn@@Base+0xb0>
   15d94:	ldr	r0, [sp, #8]
   15d98:	str	r0, [sp]
   15d9c:	ldr	r0, [sp]
   15da0:	mov	sp, fp
   15da4:	pop	{fp, pc}

00015da8 <flatcc_builder_truncate_vector@@Base>:
   15da8:	push	{fp, lr}
   15dac:	mov	fp, sp
   15db0:	sub	sp, sp, #16
   15db4:	str	r0, [sp, #8]
   15db8:	str	r1, [sp, #4]
   15dbc:	ldr	r0, [sp, #8]
   15dc0:	ldr	r0, [r0, #32]
   15dc4:	ldrh	r0, [r0, #14]
   15dc8:	cmp	r0, #4
   15dcc:	bne	15dd4 <flatcc_builder_truncate_vector@@Base+0x2c>
   15dd0:	b	15df4 <flatcc_builder_truncate_vector@@Base+0x4c>
   15dd4:	ldr	r0, [pc, #192]	; 15e9c <flatcc_builder_truncate_vector@@Base+0xf4>
   15dd8:	add	r0, pc, r0
   15ddc:	ldr	r1, [pc, #188]	; 15ea0 <flatcc_builder_truncate_vector@@Base+0xf8>
   15de0:	add	r1, pc, r1
   15de4:	ldr	r2, [pc, #184]	; 15ea4 <flatcc_builder_truncate_vector@@Base+0xfc>
   15de8:	add	r3, pc, r2
   15dec:	movw	r2, #985	; 0x3d9
   15df0:	bl	12448 <__assert_fail@plt>
   15df4:	ldr	r0, [sp, #8]
   15df8:	ldr	r0, [r0, #32]
   15dfc:	ldr	r0, [r0, #20]
   15e00:	ldr	r1, [sp, #4]
   15e04:	cmp	r0, r1
   15e08:	bcs	15e54 <flatcc_builder_truncate_vector@@Base+0xac>
   15e0c:	ldr	r0, [sp, #8]
   15e10:	ldr	r0, [r0, #32]
   15e14:	ldr	r0, [r0, #20]
   15e18:	ldr	r1, [sp, #4]
   15e1c:	cmp	r0, r1
   15e20:	bcc	15e28 <flatcc_builder_truncate_vector@@Base+0x80>
   15e24:	b	15e48 <flatcc_builder_truncate_vector@@Base+0xa0>
   15e28:	ldr	r0, [pc, #120]	; 15ea8 <flatcc_builder_truncate_vector@@Base+0x100>
   15e2c:	add	r0, pc, r0
   15e30:	ldr	r1, [pc, #116]	; 15eac <flatcc_builder_truncate_vector@@Base+0x104>
   15e34:	add	r1, pc, r1
   15e38:	ldr	r2, [pc, #112]	; 15eb0 <flatcc_builder_truncate_vector@@Base+0x108>
   15e3c:	add	r3, pc, r2
   15e40:	movw	r2, #986	; 0x3da
   15e44:	bl	12448 <__assert_fail@plt>
   15e48:	mvn	r0, #0
   15e4c:	str	r0, [fp, #-4]
   15e50:	b	15e90 <flatcc_builder_truncate_vector@@Base+0xe8>
   15e54:	ldr	r0, [sp, #4]
   15e58:	ldr	r1, [sp, #8]
   15e5c:	ldr	r1, [r1, #32]
   15e60:	ldr	r2, [r1, #20]
   15e64:	sub	r0, r2, r0
   15e68:	str	r0, [r1, #20]
   15e6c:	ldr	r0, [sp, #8]
   15e70:	ldr	r1, [sp, #8]
   15e74:	ldr	r1, [r1, #32]
   15e78:	ldr	r1, [r1, #16]
   15e7c:	ldr	r2, [sp, #4]
   15e80:	mul	r1, r1, r2
   15e84:	bl	15eb4 <flatcc_builder_truncate_vector@@Base+0x10c>
   15e88:	movw	r0, #0
   15e8c:	str	r0, [fp, #-4]
   15e90:	ldr	r0, [fp, #-4]
   15e94:	mov	sp, fp
   15e98:	pop	{fp, pc}
   15e9c:	andeq	r5, r0, ip, ror r1
   15ea0:	andeq	r4, r0, sl, lsr lr
   15ea4:	andeq	r5, r0, r6, lsr #8
   15ea8:	andeq	r5, r0, r1, lsr #8
   15eac:	andeq	r4, r0, r6, ror #27
   15eb0:	ldrdeq	r5, [r0], -r2
   15eb4:	push	{fp, lr}
   15eb8:	mov	fp, sp
   15ebc:	sub	sp, sp, #8
   15ec0:	str	r0, [sp, #4]
   15ec4:	str	r1, [sp]
   15ec8:	ldr	r0, [sp]
   15ecc:	ldr	r1, [sp, #4]
   15ed0:	ldr	r2, [r1, #20]
   15ed4:	sub	r0, r2, r0
   15ed8:	str	r0, [r1, #20]
   15edc:	ldr	r0, [sp, #4]
   15ee0:	ldr	r0, [r0, #16]
   15ee4:	ldr	r1, [sp, #4]
   15ee8:	ldr	r1, [r1, #20]
   15eec:	add	r0, r0, r1
   15ef0:	ldr	r2, [sp]
   15ef4:	movw	r1, #0
   15ef8:	and	r1, r1, #255	; 0xff
   15efc:	bl	12418 <memset@plt>
   15f00:	mov	sp, fp
   15f04:	pop	{fp, pc}

00015f08 <flatcc_builder_truncate_offset_vector@@Base>:
   15f08:	push	{fp, lr}
   15f0c:	mov	fp, sp
   15f10:	sub	sp, sp, #16
   15f14:	str	r0, [sp, #8]
   15f18:	str	r1, [sp, #4]
   15f1c:	ldr	r0, [sp, #8]
   15f20:	ldr	r0, [r0, #32]
   15f24:	ldrh	r0, [r0, #14]
   15f28:	cmp	r0, #5
   15f2c:	bne	15f34 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   15f30:	b	15f54 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   15f34:	ldr	r0, [pc, #192]	; 15ffc <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   15f38:	add	r0, pc, r0
   15f3c:	ldr	r1, [pc, #188]	; 16000 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   15f40:	add	r1, pc, r1
   15f44:	ldr	r2, [pc, #184]	; 16004 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   15f48:	add	r3, pc, r2
   15f4c:	movw	r2, #994	; 0x3e2
   15f50:	bl	12448 <__assert_fail@plt>
   15f54:	ldr	r0, [sp, #8]
   15f58:	ldr	r0, [r0, #32]
   15f5c:	ldr	r0, [r0, #20]
   15f60:	ldr	r1, [sp, #4]
   15f64:	cmp	r0, r1
   15f68:	bcs	15fb4 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   15f6c:	ldr	r0, [sp, #8]
   15f70:	ldr	r0, [r0, #32]
   15f74:	ldr	r0, [r0, #20]
   15f78:	ldr	r1, [sp, #4]
   15f7c:	cmp	r0, r1
   15f80:	bcc	15f88 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   15f84:	b	15fa8 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15f88:	ldr	r0, [pc, #120]	; 16008 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   15f8c:	add	r0, pc, r0
   15f90:	ldr	r1, [pc, #116]	; 1600c <flatcc_builder_truncate_offset_vector@@Base+0x104>
   15f94:	add	r1, pc, r1
   15f98:	ldr	r2, [pc, #112]	; 16010 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   15f9c:	add	r3, pc, r2
   15fa0:	movw	r2, #995	; 0x3e3
   15fa4:	bl	12448 <__assert_fail@plt>
   15fa8:	mvn	r0, #0
   15fac:	str	r0, [fp, #-4]
   15fb0:	b	15ff0 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   15fb4:	ldr	r0, [sp, #4]
   15fb8:	ldr	r1, [sp, #8]
   15fbc:	ldr	r1, [r1, #32]
   15fc0:	ldr	r2, [r1, #20]
   15fc4:	sub	r0, r2, r0
   15fc8:	str	r0, [r1, #20]
   15fcc:	ldr	r0, [sp, #8]
   15fd0:	ldr	r1, [sp, #8]
   15fd4:	ldr	r1, [r1, #32]
   15fd8:	ldr	r1, [r1, #16]
   15fdc:	ldr	r2, [sp, #4]
   15fe0:	mul	r1, r1, r2
   15fe4:	bl	15eb4 <flatcc_builder_truncate_vector@@Base+0x10c>
   15fe8:	movw	r0, #0
   15fec:	str	r0, [fp, #-4]
   15ff0:	ldr	r0, [fp, #-4]
   15ff4:	mov	sp, fp
   15ff8:	pop	{fp, pc}
   15ffc:	andeq	r5, r0, r5, lsl r1
   16000:	ldrdeq	r4, [r0], -sl
   16004:	andeq	r5, r0, r9, lsr #6
   16008:	andeq	r5, r0, fp, lsr #6
   1600c:	andeq	r4, r0, r6, lsl #25
   16010:	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>

00016014 <flatcc_builder_truncate_string@@Base>:
   16014:	push	{fp, lr}
   16018:	mov	fp, sp
   1601c:	sub	sp, sp, #16
   16020:	str	r0, [sp, #8]
   16024:	str	r1, [sp, #4]
   16028:	ldr	r0, [sp, #8]
   1602c:	ldr	r0, [r0, #32]
   16030:	ldrh	r0, [r0, #14]
   16034:	cmp	r0, #6
   16038:	bne	16040 <flatcc_builder_truncate_string@@Base+0x2c>
   1603c:	b	16060 <flatcc_builder_truncate_string@@Base+0x4c>
   16040:	ldr	r0, [pc, #176]	; 160f8 <flatcc_builder_truncate_string@@Base+0xe4>
   16044:	add	r0, pc, r0
   16048:	ldr	r1, [pc, #172]	; 160fc <flatcc_builder_truncate_string@@Base+0xe8>
   1604c:	add	r1, pc, r1
   16050:	ldr	r2, [pc, #168]	; 16100 <flatcc_builder_truncate_string@@Base+0xec>
   16054:	add	r3, pc, r2
   16058:	movw	r2, #1003	; 0x3eb
   1605c:	bl	12448 <__assert_fail@plt>
   16060:	ldr	r0, [sp, #8]
   16064:	ldr	r0, [r0, #32]
   16068:	ldr	r0, [r0, #20]
   1606c:	ldr	r1, [sp, #4]
   16070:	cmp	r0, r1
   16074:	bcs	160c0 <flatcc_builder_truncate_string@@Base+0xac>
   16078:	ldr	r0, [sp, #8]
   1607c:	ldr	r0, [r0, #32]
   16080:	ldr	r0, [r0, #20]
   16084:	ldr	r1, [sp, #4]
   16088:	cmp	r0, r1
   1608c:	bcc	16094 <flatcc_builder_truncate_string@@Base+0x80>
   16090:	b	160b4 <flatcc_builder_truncate_string@@Base+0xa0>
   16094:	ldr	r0, [pc, #104]	; 16104 <flatcc_builder_truncate_string@@Base+0xf0>
   16098:	add	r0, pc, r0
   1609c:	ldr	r1, [pc, #100]	; 16108 <flatcc_builder_truncate_string@@Base+0xf4>
   160a0:	add	r1, pc, r1
   160a4:	ldr	r2, [pc, #96]	; 1610c <flatcc_builder_truncate_string@@Base+0xf8>
   160a8:	add	r3, pc, r2
   160ac:	movw	r2, #1004	; 0x3ec
   160b0:	bl	12448 <__assert_fail@plt>
   160b4:	mvn	r0, #0
   160b8:	str	r0, [fp, #-4]
   160bc:	b	160ec <flatcc_builder_truncate_string@@Base+0xd8>
   160c0:	ldr	r0, [sp, #4]
   160c4:	ldr	r1, [sp, #8]
   160c8:	ldr	r1, [r1, #32]
   160cc:	ldr	r2, [r1, #20]
   160d0:	sub	r0, r2, r0
   160d4:	str	r0, [r1, #20]
   160d8:	ldr	r0, [sp, #8]
   160dc:	ldr	r1, [sp, #4]
   160e0:	bl	15eb4 <flatcc_builder_truncate_vector@@Base+0x10c>
   160e4:	movw	r0, #0
   160e8:	str	r0, [fp, #-4]
   160ec:	ldr	r0, [fp, #-4]
   160f0:	mov	sp, fp
   160f4:	pop	{fp, pc}
   160f8:	andeq	r5, r0, r2, lsl r1
   160fc:	andeq	r4, r0, lr, asr #23
   16100:	muleq	r0, lr, r2
   16104:	muleq	r0, r9, r2
   16108:	andeq	r4, r0, sl, ror fp
   1610c:	andeq	r5, r0, sl, asr #4

00016110 <flatcc_builder_start_vector@@Base>:
   16110:	push	{fp, lr}
   16114:	mov	fp, sp
   16118:	sub	sp, sp, #24
   1611c:	str	r0, [fp, #-8]
   16120:	str	r1, [sp, #12]
   16124:	strh	r2, [sp, #10]
   16128:	str	r3, [sp, #4]
   1612c:	add	r0, sp, #10
   16130:	movw	r1, #4
   16134:	uxth	r1, r1
   16138:	bl	161bc <flatcc_builder_start_vector@@Base+0xac>
   1613c:	ldr	r0, [fp, #-8]
   16140:	ldrh	r1, [sp, #10]
   16144:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   16148:	cmp	r0, #0
   1614c:	beq	1615c <flatcc_builder_start_vector@@Base+0x4c>
   16150:	mvn	r0, #0
   16154:	str	r0, [fp, #-4]
   16158:	b	161b0 <flatcc_builder_start_vector@@Base+0xa0>
   1615c:	ldr	r0, [sp, #12]
   16160:	ldr	r1, [fp, #-8]
   16164:	ldr	r1, [r1, #32]
   16168:	str	r0, [r1, #16]
   1616c:	ldr	r0, [fp, #-8]
   16170:	ldr	r0, [r0, #32]
   16174:	movw	r1, #0
   16178:	str	r1, [r0, #20]
   1617c:	ldr	r0, [sp, #4]
   16180:	ldr	r1, [fp, #-8]
   16184:	ldr	r1, [r1, #32]
   16188:	str	r0, [r1, #24]
   1618c:	ldr	r0, [fp, #-8]
   16190:	ldr	r0, [r0, #32]
   16194:	movw	r1, #4
   16198:	strh	r1, [r0, #14]
   1619c:	ldr	r0, [fp, #-8]
   161a0:	mvn	r1, #3
   161a4:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   161a8:	movw	r0, #0
   161ac:	str	r0, [fp, #-4]
   161b0:	ldr	r0, [fp, #-4]
   161b4:	mov	sp, fp
   161b8:	pop	{fp, pc}
   161bc:	sub	sp, sp, #8
   161c0:	str	r0, [sp, #4]
   161c4:	strh	r1, [sp, #2]
   161c8:	ldr	r0, [sp, #4]
   161cc:	ldrh	r0, [r0]
   161d0:	ldrh	r1, [sp, #2]
   161d4:	cmp	r0, r1
   161d8:	bge	161e8 <flatcc_builder_start_vector@@Base+0xd8>
   161dc:	ldrh	r0, [sp, #2]
   161e0:	ldr	r1, [sp, #4]
   161e4:	strh	r0, [r1]
   161e8:	add	sp, sp, #8
   161ec:	bx	lr

000161f0 <flatcc_builder_start_offset_vector@@Base>:
   161f0:	push	{fp, lr}
   161f4:	mov	fp, sp
   161f8:	sub	sp, sp, #8
   161fc:	str	r0, [sp]
   16200:	ldr	r0, [sp]
   16204:	movw	r1, #4
   16208:	uxth	r1, r1
   1620c:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   16210:	cmp	r0, #0
   16214:	beq	16224 <flatcc_builder_start_offset_vector@@Base+0x34>
   16218:	mvn	r0, #0
   1621c:	str	r0, [sp, #4]
   16220:	b	16268 <flatcc_builder_start_offset_vector@@Base+0x78>
   16224:	ldr	r0, [sp]
   16228:	ldr	r0, [r0, #32]
   1622c:	movw	r1, #4
   16230:	str	r1, [r0, #16]
   16234:	ldr	r0, [sp]
   16238:	ldr	r0, [r0, #32]
   1623c:	movw	r1, #0
   16240:	str	r1, [r0, #20]
   16244:	ldr	r0, [sp]
   16248:	ldr	r0, [r0, #32]
   1624c:	movw	r1, #5
   16250:	strh	r1, [r0, #14]
   16254:	ldr	r0, [sp]
   16258:	mvn	r1, #3
   1625c:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   16260:	movw	r0, #0
   16264:	str	r0, [sp, #4]
   16268:	ldr	r0, [sp, #4]
   1626c:	mov	sp, fp
   16270:	pop	{fp, pc}

00016274 <flatcc_builder_create_offset_vector@@Base>:
   16274:	push	{fp, lr}
   16278:	mov	fp, sp
   1627c:	sub	sp, sp, #24
   16280:	str	r0, [fp, #-8]
   16284:	str	r1, [sp, #12]
   16288:	str	r2, [sp, #8]
   1628c:	ldr	r0, [fp, #-8]
   16290:	bl	161f0 <flatcc_builder_start_offset_vector@@Base>
   16294:	cmp	r0, #0
   16298:	beq	162a8 <flatcc_builder_create_offset_vector@@Base+0x34>
   1629c:	movw	r0, #0
   162a0:	str	r0, [fp, #-4]
   162a4:	b	162f0 <flatcc_builder_create_offset_vector@@Base+0x7c>
   162a8:	ldr	r0, [fp, #-8]
   162ac:	ldr	r1, [sp, #8]
   162b0:	bl	15984 <flatcc_builder_extend_offset_vector@@Base>
   162b4:	str	r0, [sp, #4]
   162b8:	movw	r1, #0
   162bc:	cmp	r0, r1
   162c0:	bne	162d0 <flatcc_builder_create_offset_vector@@Base+0x5c>
   162c4:	movw	r0, #0
   162c8:	str	r0, [fp, #-4]
   162cc:	b	162f0 <flatcc_builder_create_offset_vector@@Base+0x7c>
   162d0:	ldr	r0, [sp, #4]
   162d4:	ldr	r1, [sp, #12]
   162d8:	ldr	r2, [sp, #8]
   162dc:	lsl	r2, r2, #2
   162e0:	bl	123ac <memcpy@plt>
   162e4:	ldr	r0, [fp, #-8]
   162e8:	bl	162fc <flatcc_builder_end_offset_vector@@Base>
   162ec:	str	r0, [fp, #-4]
   162f0:	ldr	r0, [fp, #-4]
   162f4:	mov	sp, fp
   162f8:	pop	{fp, pc}

000162fc <flatcc_builder_end_offset_vector@@Base>:
   162fc:	push	{fp, lr}
   16300:	mov	fp, sp
   16304:	sub	sp, sp, #16
   16308:	str	r0, [sp, #8]
   1630c:	ldr	r0, [sp, #8]
   16310:	ldr	r0, [r0, #32]
   16314:	ldrh	r0, [r0, #14]
   16318:	cmp	r0, #5
   1631c:	bne	16324 <flatcc_builder_end_offset_vector@@Base+0x28>
   16320:	b	16344 <flatcc_builder_end_offset_vector@@Base+0x48>
   16324:	ldr	r0, [pc, #108]	; 16398 <flatcc_builder_end_offset_vector@@Base+0x9c>
   16328:	add	r0, pc, r0
   1632c:	ldr	r1, [pc, #104]	; 1639c <flatcc_builder_end_offset_vector@@Base+0xa0>
   16330:	add	r1, pc, r1
   16334:	ldr	r2, [pc, #100]	; 163a0 <flatcc_builder_end_offset_vector@@Base+0xa4>
   16338:	add	r3, pc, r2
   1633c:	movw	r2, #1480	; 0x5c8
   16340:	bl	12448 <__assert_fail@plt>
   16344:	ldr	r0, [sp, #8]
   16348:	ldr	r1, [sp, #8]
   1634c:	ldr	r1, [r1, #16]
   16350:	ldr	r2, [sp, #8]
   16354:	ldr	r2, [r2, #32]
   16358:	ldr	r2, [r2, #20]
   1635c:	bl	1770c <flatcc_builder_create_offset_vector_direct@@Base>
   16360:	str	r0, [sp, #4]
   16364:	movw	r1, #0
   16368:	cmp	r1, r0
   1636c:	bne	1637c <flatcc_builder_end_offset_vector@@Base+0x80>
   16370:	movw	r0, #0
   16374:	str	r0, [fp, #-4]
   16378:	b	1638c <flatcc_builder_end_offset_vector@@Base+0x90>
   1637c:	ldr	r0, [sp, #8]
   16380:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   16384:	ldr	r0, [sp, #4]
   16388:	str	r0, [fp, #-4]
   1638c:	ldr	r0, [fp, #-4]
   16390:	mov	sp, fp
   16394:	pop	{fp, pc}
   16398:	andeq	r4, r0, r5, lsr #26
   1639c:	andeq	r4, r0, sl, ror #17
   163a0:	andeq	r5, r0, r4, asr #6

000163a4 <flatcc_builder_start_string@@Base>:
   163a4:	push	{fp, lr}
   163a8:	mov	fp, sp
   163ac:	sub	sp, sp, #8
   163b0:	str	r0, [sp]
   163b4:	ldr	r0, [sp]
   163b8:	movw	r1, #1
   163bc:	uxth	r1, r1
   163c0:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   163c4:	cmp	r0, #0
   163c8:	beq	163d8 <flatcc_builder_start_string@@Base+0x34>
   163cc:	mvn	r0, #0
   163d0:	str	r0, [sp, #4]
   163d4:	b	1641c <flatcc_builder_start_string@@Base+0x78>
   163d8:	ldr	r0, [sp]
   163dc:	ldr	r0, [r0, #32]
   163e0:	movw	r1, #1
   163e4:	str	r1, [r0, #16]
   163e8:	ldr	r0, [sp]
   163ec:	ldr	r0, [r0, #32]
   163f0:	movw	r1, #0
   163f4:	str	r1, [r0, #20]
   163f8:	ldr	r0, [sp]
   163fc:	ldr	r0, [r0, #32]
   16400:	movw	r1, #6
   16404:	strh	r1, [r0, #14]
   16408:	ldr	r0, [sp]
   1640c:	mvn	r1, #3
   16410:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   16414:	movw	r0, #0
   16418:	str	r0, [sp, #4]
   1641c:	ldr	r0, [sp, #4]
   16420:	mov	sp, fp
   16424:	pop	{fp, pc}

00016428 <flatcc_builder_reserve_table@@Base>:
   16428:	push	{fp, lr}
   1642c:	mov	fp, sp
   16430:	sub	sp, sp, #8
   16434:	str	r0, [sp, #4]
   16438:	str	r1, [sp]
   1643c:	ldr	r0, [sp]
   16440:	cmp	r0, #0
   16444:	blt	1644c <flatcc_builder_reserve_table@@Base+0x24>
   16448:	b	1646c <flatcc_builder_reserve_table@@Base+0x44>
   1644c:	ldr	r0, [pc, #44]	; 16480 <flatcc_builder_reserve_table@@Base+0x58>
   16450:	add	r0, pc, r0
   16454:	ldr	r1, [pc, #40]	; 16484 <flatcc_builder_reserve_table@@Base+0x5c>
   16458:	add	r1, pc, r1
   1645c:	ldr	r2, [pc, #36]	; 16488 <flatcc_builder_reserve_table@@Base+0x60>
   16460:	add	r3, pc, r2
   16464:	movw	r2, #1065	; 0x429
   16468:	bl	12448 <__assert_fail@plt>
   1646c:	ldr	r0, [sp, #4]
   16470:	ldr	r1, [sp]
   16474:	bl	1648c <flatcc_builder_reserve_table@@Base+0x64>
   16478:	mov	sp, fp
   1647c:	pop	{fp, pc}
   16480:	andeq	r4, r0, r4, asr #30
   16484:	andeq	r4, r0, r2, asr #15
   16488:	strdeq	r4, [r0], -r3
   1648c:	push	{fp, lr}
   16490:	mov	fp, sp
   16494:	sub	sp, sp, #24
   16498:	str	r0, [fp, #-8]
   1649c:	str	r1, [sp, #12]
   164a0:	ldr	r0, [fp, #-8]
   164a4:	ldr	r0, [r0, #32]
   164a8:	ldr	r1, [r0, #16]
   164ac:	ldrh	r0, [r0, #28]
   164b0:	add	r0, r1, r0, lsl #1
   164b4:	str	r0, [sp, #8]
   164b8:	ldr	r0, [sp, #12]
   164bc:	add	r0, r0, #2
   164c0:	lsl	r0, r0, #1
   164c4:	str	r0, [sp, #4]
   164c8:	ldr	r0, [fp, #-8]
   164cc:	ldr	r2, [sp, #8]
   164d0:	ldr	r3, [sp, #4]
   164d4:	movw	r1, #0
   164d8:	movw	ip, #1
   164dc:	str	ip, [sp]
   164e0:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   164e4:	ldr	r1, [fp, #-8]
   164e8:	str	r0, [r1, #4]
   164ec:	movw	r1, #0
   164f0:	cmp	r0, r1
   164f4:	bne	16504 <flatcc_builder_reserve_table@@Base+0xdc>
   164f8:	mvn	r0, #0
   164fc:	str	r0, [fp, #-4]
   16500:	b	16578 <flatcc_builder_reserve_table@@Base+0x150>
   16504:	ldr	r0, [fp, #-8]
   16508:	ldr	r1, [r0, #4]
   1650c:	add	r1, r1, #4
   16510:	str	r1, [r0, #4]
   16514:	ldr	r0, [fp, #-8]
   16518:	ldr	r0, [r0, #32]
   1651c:	ldr	r0, [r0, #20]
   16520:	str	r0, [sp, #8]
   16524:	ldr	r0, [sp, #12]
   16528:	lsl	r0, r0, #1
   1652c:	add	r0, r0, #1
   16530:	str	r0, [sp, #4]
   16534:	ldr	r0, [fp, #-8]
   16538:	ldr	r2, [sp, #8]
   1653c:	ldr	r3, [sp, #4]
   16540:	movw	r1, #3
   16544:	movw	ip, #0
   16548:	str	ip, [sp]
   1654c:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16550:	ldr	r1, [fp, #-8]
   16554:	str	r0, [r1]
   16558:	movw	r1, #0
   1655c:	cmp	r0, r1
   16560:	bne	16570 <flatcc_builder_reserve_table@@Base+0x148>
   16564:	mvn	r0, #0
   16568:	str	r0, [fp, #-4]
   1656c:	b	16578 <flatcc_builder_reserve_table@@Base+0x150>
   16570:	movw	r0, #0
   16574:	str	r0, [fp, #-4]
   16578:	ldr	r0, [fp, #-4]
   1657c:	mov	sp, fp
   16580:	pop	{fp, pc}

00016584 <flatcc_builder_start_table@@Base>:
   16584:	push	{fp, lr}
   16588:	mov	fp, sp
   1658c:	sub	sp, sp, #16
   16590:	str	r0, [sp, #8]
   16594:	str	r1, [sp, #4]
   16598:	ldr	r0, [sp, #8]
   1659c:	movw	r1, #4
   165a0:	uxth	r1, r1
   165a4:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   165a8:	cmp	r0, #0
   165ac:	beq	165bc <flatcc_builder_start_table@@Base+0x38>
   165b0:	mvn	r0, #0
   165b4:	str	r0, [fp, #-4]
   165b8:	b	1668c <flatcc_builder_start_table@@Base+0x108>
   165bc:	ldr	r0, [pc, #212]	; 16698 <flatcc_builder_start_table@@Base+0x114>
   165c0:	ldr	r1, [sp, #8]
   165c4:	ldr	r1, [r1, #4]
   165c8:	ldr	r2, [sp, #8]
   165cc:	ldr	r2, [r2, #52]	; 0x34
   165d0:	sub	r1, r1, r2
   165d4:	ldr	r2, [sp, #8]
   165d8:	ldr	r2, [r2, #32]
   165dc:	str	r1, [r2, #16]
   165e0:	ldr	r1, [sp, #8]
   165e4:	ldr	r1, [r1]
   165e8:	ldr	r2, [sp, #8]
   165ec:	ldr	r2, [r2, #76]	; 0x4c
   165f0:	sub	r1, r1, r2
   165f4:	ldr	r2, [sp, #8]
   165f8:	ldr	r2, [r2, #32]
   165fc:	str	r1, [r2, #20]
   16600:	ldr	r1, [sp, #8]
   16604:	ldr	r1, [r1, #12]
   16608:	ldr	r2, [sp, #8]
   1660c:	ldr	r2, [r2, #32]
   16610:	str	r1, [r2, #24]
   16614:	ldr	r1, [sp, #8]
   16618:	ldrh	r1, [r1, #8]
   1661c:	ldr	r2, [sp, #8]
   16620:	ldr	r2, [r2, #32]
   16624:	strh	r1, [r2, #28]
   16628:	ldr	r1, [sp, #8]
   1662c:	movw	r2, #0
   16630:	str	r2, [r1, #12]
   16634:	ldr	r1, [sp, #8]
   16638:	str	r0, [r1, #12]
   1663c:	ldr	r0, [sp, #8]
   16640:	movw	r1, #0
   16644:	strh	r1, [r0, #8]
   16648:	ldr	r0, [sp, #8]
   1664c:	ldr	r0, [r0, #32]
   16650:	movw	r1, #3
   16654:	strh	r1, [r0, #14]
   16658:	ldr	r0, [sp, #8]
   1665c:	ldr	r1, [sp, #4]
   16660:	bl	1648c <flatcc_builder_reserve_table@@Base+0x64>
   16664:	cmp	r0, #0
   16668:	beq	16678 <flatcc_builder_start_table@@Base+0xf4>
   1666c:	mvn	r0, #0
   16670:	str	r0, [fp, #-4]
   16674:	b	1668c <flatcc_builder_start_table@@Base+0x108>
   16678:	ldr	r0, [sp, #8]
   1667c:	movw	r1, #65532	; 0xfffc
   16680:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   16684:	movw	r0, #0
   16688:	str	r0, [fp, #-4]
   1668c:	ldr	r0, [fp, #-4]
   16690:	mov	sp, fp
   16694:	pop	{fp, pc}
   16698:	svccs	0x00693b52

0001669c <flatcc_builder_create_vtable@@Base>:
   1669c:	push	{fp, lr}
   166a0:	mov	fp, sp
   166a4:	sub	sp, sp, #104	; 0x68
   166a8:	str	r0, [fp, #-8]
   166ac:	str	r1, [fp, #-12]
   166b0:	strh	r2, [fp, #-14]
   166b4:	movw	r0, #0
   166b8:	str	r0, [sp, #12]
   166bc:	str	r0, [sp, #16]
   166c0:	ldrh	r0, [fp, #-14]
   166c4:	cmp	r0, #0
   166c8:	ble	1670c <flatcc_builder_create_vtable@@Base+0x70>
   166cc:	ldrh	r0, [fp, #-14]
   166d0:	ldr	r1, [sp, #12]
   166d4:	add	r0, r1, r0
   166d8:	str	r0, [sp, #12]
   166dc:	ldr	r0, [fp, #-12]
   166e0:	add	r1, sp, #12
   166e4:	add	r1, r1, #8
   166e8:	ldr	r2, [sp, #16]
   166ec:	str	r0, [r1, r2, lsl #3]
   166f0:	ldrh	r0, [fp, #-14]
   166f4:	ldr	r2, [sp, #16]
   166f8:	add	r1, r1, r2, lsl #3
   166fc:	str	r0, [r1, #4]
   16700:	ldr	r0, [sp, #16]
   16704:	add	r0, r0, #1
   16708:	str	r0, [sp, #16]
   1670c:	ldr	r0, [fp, #-8]
   16710:	ldr	r0, [r0, #152]	; 0x98
   16714:	cmp	r0, #0
   16718:	bne	16758 <flatcc_builder_create_vtable@@Base+0xbc>
   1671c:	ldr	r0, [fp, #-8]
   16720:	ldr	r0, [r0, #180]	; 0xb4
   16724:	cmp	r0, #0
   16728:	bne	16758 <flatcc_builder_create_vtable@@Base+0xbc>
   1672c:	ldr	r0, [fp, #-8]
   16730:	add	r1, sp, #12
   16734:	bl	167a0 <flatcc_builder_create_vtable@@Base+0x104>
   16738:	str	r0, [fp, #-20]	; 0xffffffec
   1673c:	movw	r1, #0
   16740:	cmp	r1, r0
   16744:	bne	16754 <flatcc_builder_create_vtable@@Base+0xb8>
   16748:	movw	r0, #0
   1674c:	str	r0, [fp, #-4]
   16750:	b	16794 <flatcc_builder_create_vtable@@Base+0xf8>
   16754:	b	1678c <flatcc_builder_create_vtable@@Base+0xf0>
   16758:	ldr	r0, [fp, #-8]
   1675c:	add	r1, sp, #12
   16760:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   16764:	str	r0, [fp, #-20]	; 0xffffffec
   16768:	movw	r1, #0
   1676c:	cmp	r1, r0
   16770:	bne	16780 <flatcc_builder_create_vtable@@Base+0xe4>
   16774:	movw	r0, #0
   16778:	str	r0, [fp, #-4]
   1677c:	b	16794 <flatcc_builder_create_vtable@@Base+0xf8>
   16780:	ldr	r0, [fp, #-20]	; 0xffffffec
   16784:	add	r0, r0, #1
   16788:	str	r0, [fp, #-20]	; 0xffffffec
   1678c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16790:	str	r0, [fp, #-4]
   16794:	ldr	r0, [fp, #-4]
   16798:	mov	sp, fp
   1679c:	pop	{fp, pc}
   167a0:	push	{fp, lr}
   167a4:	mov	fp, sp
   167a8:	sub	sp, sp, #24
   167ac:	str	r0, [fp, #-4]
   167b0:	str	r1, [fp, #-8]
   167b4:	ldr	r0, [fp, #-4]
   167b8:	ldr	r0, [r0, #140]	; 0x8c
   167bc:	str	r0, [sp, #12]
   167c0:	ldr	r0, [sp, #12]
   167c4:	ldr	r1, [fp, #-8]
   167c8:	ldr	r1, [r1]
   167cc:	add	r0, r0, r1
   167d0:	ldr	r1, [fp, #-4]
   167d4:	str	r0, [r1, #140]	; 0x8c
   167d8:	ldr	r0, [fp, #-4]
   167dc:	ldr	r0, [r0, #140]	; 0x8c
   167e0:	ldr	r1, [sp, #12]
   167e4:	cmp	r0, r1
   167e8:	bge	1680c <flatcc_builder_create_vtable@@Base+0x170>
   167ec:	ldr	r0, [pc, #168]	; 1689c <flatcc_builder_create_vtable@@Base+0x200>
   167f0:	add	r0, pc, r0
   167f4:	ldr	r1, [pc, #164]	; 168a0 <flatcc_builder_create_vtable@@Base+0x204>
   167f8:	add	r1, pc, r1
   167fc:	ldr	r2, [pc, #160]	; 168a4 <flatcc_builder_create_vtable@@Base+0x208>
   16800:	add	r3, pc, r2
   16804:	movw	r2, #673	; 0x2a1
   16808:	bl	12448 <__assert_fail@plt>
   1680c:	ldr	r0, [fp, #-4]
   16810:	ldr	r0, [r0, #44]	; 0x2c
   16814:	ldr	r1, [fp, #-4]
   16818:	ldr	r1, [r1, #36]	; 0x24
   1681c:	ldr	r2, [fp, #-8]
   16820:	add	r2, r2, #8
   16824:	ldr	r3, [fp, #-8]
   16828:	ldr	r3, [r3, #4]
   1682c:	ldr	ip, [sp, #12]
   16830:	ldr	lr, [fp, #-8]
   16834:	ldr	lr, [lr]
   16838:	str	r0, [sp, #8]
   1683c:	mov	r0, r1
   16840:	mov	r1, r2
   16844:	mov	r2, r3
   16848:	mov	r3, ip
   1684c:	str	lr, [sp]
   16850:	ldr	ip, [sp, #8]
   16854:	blx	ip
   16858:	cmp	r0, #0
   1685c:	beq	16880 <flatcc_builder_create_vtable@@Base+0x1e4>
   16860:	ldr	r0, [pc, #40]	; 16890 <flatcc_builder_create_vtable@@Base+0x1f4>
   16864:	add	r0, pc, r0
   16868:	ldr	r1, [pc, #36]	; 16894 <flatcc_builder_create_vtable@@Base+0x1f8>
   1686c:	add	r1, pc, r1
   16870:	ldr	r2, [pc, #32]	; 16898 <flatcc_builder_create_vtable@@Base+0x1fc>
   16874:	add	r3, pc, r2
   16878:	movw	r2, #677	; 0x2a5
   1687c:	bl	12448 <__assert_fail@plt>
   16880:	ldr	r0, [sp, #12]
   16884:	add	r0, r0, #1
   16888:	mov	sp, fp
   1688c:	pop	{fp, pc}
   16890:	andeq	r5, r0, r3, ror r5
   16894:	andeq	r4, r0, lr, lsr #7
   16898:	ldrdeq	r5, [r0], -lr
   1689c:	andeq	r5, r0, r7, ror #11
   168a0:	andeq	r4, r0, r2, lsr #8
   168a4:	andeq	r5, r0, r2, asr r5

000168a8 <flatcc_builder_create_cached_vtable@@Base>:
   168a8:	push	{fp, lr}
   168ac:	mov	fp, sp
   168b0:	sub	sp, sp, #48	; 0x30
   168b4:	str	r0, [fp, #-8]
   168b8:	str	r1, [fp, #-12]
   168bc:	strh	r2, [fp, #-14]
   168c0:	str	r3, [fp, #-20]	; 0xffffffec
   168c4:	ldr	r0, [fp, #-8]
   168c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   168cc:	bl	16bb4 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   168d0:	str	r0, [sp, #12]
   168d4:	movw	r1, #0
   168d8:	cmp	r0, r1
   168dc:	bne	168ec <flatcc_builder_create_cached_vtable@@Base+0x44>
   168e0:	movw	r0, #0
   168e4:	str	r0, [fp, #-4]
   168e8:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x300>
   168ec:	ldr	r0, [sp, #12]
   168f0:	str	r0, [sp, #16]
   168f4:	ldr	r0, [sp, #16]
   168f8:	ldr	r0, [r0]
   168fc:	str	r0, [sp, #8]
   16900:	movw	r0, #0
   16904:	str	r0, [sp, #20]
   16908:	ldr	r0, [sp, #8]
   1690c:	cmp	r0, #0
   16910:	beq	16a14 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   16914:	ldr	r0, [fp, #-8]
   16918:	ldr	r0, [r0, #100]	; 0x64
   1691c:	ldr	r1, [sp, #8]
   16920:	add	r0, r0, r1
   16924:	str	r0, [sp, #24]
   16928:	ldr	r0, [fp, #-8]
   1692c:	ldr	r0, [r0, #68]	; 0x44
   16930:	ldr	r1, [sp, #24]
   16934:	ldr	r1, [r1, #8]
   16938:	add	r0, r0, r1
   1693c:	str	r0, [sp, #4]
   16940:	ldr	r0, [sp, #4]
   16944:	ldrh	r0, [r0]
   16948:	ldrh	r1, [fp, #-14]
   1694c:	cmp	r0, r1
   16950:	bne	16970 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16954:	ldr	r0, [fp, #-12]
   16958:	ldr	r1, [sp, #4]
   1695c:	ldrh	r2, [fp, #-14]
   16960:	bl	123b8 <memcmp@plt>
   16964:	movw	r1, #0
   16968:	cmp	r1, r0
   1696c:	beq	1698c <flatcc_builder_create_cached_vtable@@Base+0xe4>
   16970:	ldr	r0, [sp, #24]
   16974:	add	r0, r0, #12
   16978:	str	r0, [sp, #16]
   1697c:	ldr	r0, [sp, #24]
   16980:	ldr	r0, [r0, #12]
   16984:	str	r0, [sp, #8]
   16988:	b	16908 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1698c:	ldr	r0, [sp, #24]
   16990:	ldr	r0, [r0, #4]
   16994:	ldr	r1, [fp, #-8]
   16998:	ldr	r1, [r1, #152]	; 0x98
   1699c:	cmp	r0, r1
   169a0:	beq	169c8 <flatcc_builder_create_cached_vtable@@Base+0x120>
   169a4:	ldr	r0, [sp, #24]
   169a8:	str	r0, [sp, #20]
   169ac:	ldr	r0, [sp, #24]
   169b0:	add	r0, r0, #12
   169b4:	str	r0, [sp, #16]
   169b8:	ldr	r0, [sp, #24]
   169bc:	ldr	r0, [r0, #12]
   169c0:	str	r0, [sp, #8]
   169c4:	b	16908 <flatcc_builder_create_cached_vtable@@Base+0x60>
   169c8:	ldr	r0, [sp, #16]
   169cc:	ldr	r1, [sp, #12]
   169d0:	cmp	r0, r1
   169d4:	beq	16a04 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   169d8:	ldr	r0, [sp, #24]
   169dc:	ldr	r0, [r0, #12]
   169e0:	ldr	r1, [sp, #16]
   169e4:	str	r0, [r1]
   169e8:	ldr	r0, [sp, #12]
   169ec:	ldr	r0, [r0]
   169f0:	ldr	r1, [sp, #24]
   169f4:	str	r0, [r1, #12]
   169f8:	ldr	r0, [sp, #8]
   169fc:	ldr	r1, [sp, #12]
   16a00:	str	r0, [r1]
   16a04:	ldr	r0, [sp, #24]
   16a08:	ldr	r0, [r0]
   16a0c:	str	r0, [fp, #-4]
   16a10:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16a14:	ldr	r0, [fp, #-8]
   16a18:	ldr	r1, [fp, #-8]
   16a1c:	ldr	r2, [r1, #124]	; 0x7c
   16a20:	movw	r1, #6
   16a24:	movw	r3, #16
   16a28:	movw	ip, #0
   16a2c:	str	ip, [sp]
   16a30:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16a34:	str	r0, [sp, #24]
   16a38:	movw	r1, #0
   16a3c:	cmp	r0, r1
   16a40:	bne	16a50 <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   16a44:	movw	r0, #0
   16a48:	str	r0, [fp, #-4]
   16a4c:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16a50:	ldr	r0, [fp, #-8]
   16a54:	ldr	r0, [r0, #124]	; 0x7c
   16a58:	str	r0, [sp, #8]
   16a5c:	ldr	r0, [fp, #-8]
   16a60:	ldr	r1, [r0, #124]	; 0x7c
   16a64:	add	r1, r1, #16
   16a68:	str	r1, [r0, #124]	; 0x7c
   16a6c:	ldr	r0, [fp, #-8]
   16a70:	ldr	r0, [r0, #152]	; 0x98
   16a74:	ldr	r1, [sp, #24]
   16a78:	str	r0, [r1, #4]
   16a7c:	ldr	r0, [sp, #12]
   16a80:	ldr	r0, [r0]
   16a84:	ldr	r1, [sp, #24]
   16a88:	str	r0, [r1, #12]
   16a8c:	ldr	r0, [sp, #8]
   16a90:	ldr	r1, [sp, #12]
   16a94:	str	r0, [r1]
   16a98:	ldr	r0, [fp, #-8]
   16a9c:	ldr	r1, [fp, #-12]
   16aa0:	ldrh	r2, [fp, #-14]
   16aa4:	bl	1669c <flatcc_builder_create_vtable@@Base>
   16aa8:	ldr	r1, [sp, #24]
   16aac:	str	r0, [r1]
   16ab0:	movw	r1, #0
   16ab4:	cmp	r1, r0
   16ab8:	bne	16ac8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   16abc:	movw	r0, #0
   16ac0:	str	r0, [fp, #-4]
   16ac4:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16ac8:	ldr	r0, [sp, #20]
   16acc:	movw	r1, #0
   16ad0:	cmp	r0, r1
   16ad4:	beq	16aec <flatcc_builder_create_cached_vtable@@Base+0x244>
   16ad8:	ldr	r0, [sp, #20]
   16adc:	ldr	r0, [r0, #8]
   16ae0:	ldr	r1, [sp, #24]
   16ae4:	str	r0, [r1, #8]
   16ae8:	b	16b9c <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16aec:	ldr	r0, [fp, #-8]
   16af0:	ldr	r0, [r0, #172]	; 0xac
   16af4:	cmp	r0, #0
   16af8:	beq	16b28 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16afc:	ldr	r0, [fp, #-8]
   16b00:	ldr	r0, [r0, #172]	; 0xac
   16b04:	ldr	r1, [fp, #-8]
   16b08:	ldr	r1, [r1, #120]	; 0x78
   16b0c:	ldrh	r2, [fp, #-14]
   16b10:	add	r1, r1, r2
   16b14:	cmp	r0, r1
   16b18:	bcs	16b28 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16b1c:	ldr	r0, [fp, #-8]
   16b20:	bl	13bd0 <flatcc_builder_flush_vtable_cache@@Base>
   16b24:	b	16b98 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   16b28:	ldr	r0, [fp, #-8]
   16b2c:	ldr	r1, [fp, #-8]
   16b30:	ldr	r2, [r1, #120]	; 0x78
   16b34:	ldrh	r3, [fp, #-14]
   16b38:	movw	r1, #2
   16b3c:	movw	ip, #0
   16b40:	str	ip, [sp]
   16b44:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16b48:	str	r0, [sp, #4]
   16b4c:	movw	r1, #0
   16b50:	cmp	r0, r1
   16b54:	bne	16b64 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   16b58:	mvn	r0, #0
   16b5c:	str	r0, [fp, #-4]
   16b60:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16b64:	ldr	r0, [fp, #-8]
   16b68:	ldr	r0, [r0, #120]	; 0x78
   16b6c:	ldr	r1, [sp, #24]
   16b70:	str	r0, [r1, #8]
   16b74:	ldrh	r0, [fp, #-14]
   16b78:	ldr	r1, [fp, #-8]
   16b7c:	ldr	r2, [r1, #120]	; 0x78
   16b80:	add	r0, r2, r0
   16b84:	str	r0, [r1, #120]	; 0x78
   16b88:	ldr	r0, [sp, #4]
   16b8c:	ldr	r1, [fp, #-12]
   16b90:	ldrh	r2, [fp, #-14]
   16b94:	bl	123ac <memcpy@plt>
   16b98:	b	16b9c <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16b9c:	ldr	r0, [sp, #24]
   16ba0:	ldr	r0, [r0]
   16ba4:	str	r0, [fp, #-4]
   16ba8:	ldr	r0, [fp, #-4]
   16bac:	mov	sp, fp
   16bb0:	pop	{fp, pc}
   16bb4:	push	{fp, lr}
   16bb8:	mov	fp, sp
   16bbc:	sub	sp, sp, #24
   16bc0:	str	r0, [fp, #-8]
   16bc4:	str	r1, [sp, #12]
   16bc8:	ldr	r0, [fp, #-8]
   16bcc:	ldr	r0, [r0, #116]	; 0x74
   16bd0:	cmp	r0, #0
   16bd4:	bne	16bf8 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16bd8:	ldr	r0, [fp, #-8]
   16bdc:	bl	196d4 <flatcc_builder_get_emit_context@@Base+0xe8>
   16be0:	cmp	r0, #0
   16be4:	beq	16bf4 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16be8:	movw	r0, #0
   16bec:	str	r0, [fp, #-4]
   16bf0:	b	16c2c <flatcc_builder_create_cached_vtable@@Base+0x384>
   16bf4:	b	16bf8 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16bf8:	ldr	r0, [fp, #-8]
   16bfc:	ldr	r0, [r0, #92]	; 0x5c
   16c00:	str	r0, [sp, #8]
   16c04:	ldr	r0, [sp, #8]
   16c08:	ldr	r1, [sp, #12]
   16c0c:	ldr	r2, [fp, #-8]
   16c10:	ldr	r2, [r2, #116]	; 0x74
   16c14:	rsb	r2, r2, #32
   16c18:	lsr	r1, r1, r2
   16c1c:	mov	r2, r1
   16c20:	add	r0, r0, r1, lsl #2
   16c24:	str	r0, [fp, #-4]
   16c28:	str	r2, [sp, #4]
   16c2c:	ldr	r0, [fp, #-4]
   16c30:	mov	sp, fp
   16c34:	pop	{fp, pc}

00016c38 <flatcc_builder_create_table@@Base>:
   16c38:	push	{r4, sl, fp, lr}
   16c3c:	add	fp, sp, #8
   16c40:	sub	sp, sp, #136	; 0x88
   16c44:	ldr	ip, [fp, #16]
   16c48:	ldr	lr, [fp, #12]
   16c4c:	ldr	r4, [fp, #8]
   16c50:	str	r0, [fp, #-16]
   16c54:	str	r1, [fp, #-20]	; 0xffffffec
   16c58:	str	r2, [fp, #-24]	; 0xffffffe8
   16c5c:	strh	r3, [fp, #-26]	; 0xffffffe6
   16c60:	ldr	r0, [fp, #12]
   16c64:	cmp	r0, #0
   16c68:	str	r4, [sp, #8]
   16c6c:	str	lr, [sp, #4]
   16c70:	str	ip, [sp]
   16c74:	blt	16c7c <flatcc_builder_create_table@@Base+0x44>
   16c78:	b	16c9c <flatcc_builder_create_table@@Base+0x64>
   16c7c:	ldr	r0, [pc, #616]	; 16eec <flatcc_builder_create_table@@Base+0x2b4>
   16c80:	add	r0, pc, r0
   16c84:	ldr	r1, [pc, #612]	; 16ef0 <flatcc_builder_create_table@@Base+0x2b8>
   16c88:	add	r1, pc, r1
   16c8c:	ldr	r2, [pc, #608]	; 16ef4 <flatcc_builder_create_table@@Base+0x2bc>
   16c90:	add	r3, pc, r2
   16c94:	movw	r2, #1237	; 0x4d5
   16c98:	bl	12448 <__assert_fail@plt>
   16c9c:	ldr	r0, [fp, #16]
   16ca0:	and	r0, r0, #1
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cb0 <flatcc_builder_create_table@@Base+0x78>
   16cac:	b	16cd0 <flatcc_builder_create_table@@Base+0x98>
   16cb0:	ldr	r0, [pc, #576]	; 16ef8 <flatcc_builder_create_table@@Base+0x2c0>
   16cb4:	add	r0, pc, r0
   16cb8:	ldr	r1, [pc, #572]	; 16efc <flatcc_builder_create_table@@Base+0x2c4>
   16cbc:	add	r1, pc, r1
   16cc0:	ldr	r2, [pc, #568]	; 16f00 <flatcc_builder_create_table@@Base+0x2c8>
   16cc4:	add	r3, pc, r2
   16cc8:	movw	r2, #1243	; 0x4db
   16ccc:	bl	12448 <__assert_fail@plt>
   16cd0:	sub	r0, fp, #26
   16cd4:	movw	r1, #4
   16cd8:	uxth	r1, r1
   16cdc:	bl	161bc <flatcc_builder_start_vector@@Base+0xac>
   16ce0:	ldr	r0, [fp, #-16]
   16ce4:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   16ce8:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   16cec:	ldr	r0, [fp, #-16]
   16cf0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16cf4:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   16cf8:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   16cfc:	str	r0, [fp, #-36]	; 0xffffffdc
   16d00:	ldr	r0, [fp, #-16]
   16d04:	ldr	r0, [r0, #136]	; 0x88
   16d08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16d0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16d10:	add	r1, r1, r2
   16d14:	add	r1, r1, #4
   16d18:	sub	r0, r0, r1
   16d1c:	str	r0, [fp, #-52]	; 0xffffffcc
   16d20:	ldr	r0, [fp, #16]
   16d24:	sub	r0, r0, #1
   16d28:	str	r0, [fp, #-48]	; 0xffffffd0
   16d2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16d30:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16d34:	sub	r0, r0, r1
   16d38:	str	r0, [fp, #-40]	; 0xffffffd8
   16d3c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16d40:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16d44:	sub	r0, r0, r1
   16d48:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16d4c:	cmp	r0, r1
   16d50:	beq	16d60 <flatcc_builder_create_table@@Base+0x128>
   16d54:	mvn	r0, #0
   16d58:	str	r0, [fp, #-12]
   16d5c:	b	16ee0 <flatcc_builder_create_table@@Base+0x2a8>
   16d60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16d64:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   16d68:	str	r0, [fp, #-44]	; 0xffffffd4
   16d6c:	movw	r0, #0
   16d70:	str	r0, [fp, #-32]	; 0xffffffe0
   16d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16d78:	ldr	r1, [fp, #12]
   16d7c:	cmp	r0, r1
   16d80:	bge	16dec <flatcc_builder_create_table@@Base+0x1b4>
   16d84:	ldr	r0, [fp, #-20]	; 0xffffffec
   16d88:	ldr	r1, [fp, #8]
   16d8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16d90:	add	r1, r1, r2, lsl #1
   16d94:	ldrh	r1, [r1]
   16d98:	add	r0, r0, r1
   16d9c:	str	r0, [fp, #-60]	; 0xffffffc4
   16da0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16da4:	ldr	r0, [r0]
   16da8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16dac:	sub	r0, r0, r1
   16db0:	ldr	r1, [fp, #8]
   16db4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16db8:	add	r1, r1, r2, lsl #1
   16dbc:	ldrh	r1, [r1]
   16dc0:	sub	r0, r0, r1
   16dc4:	sub	r0, r0, #4
   16dc8:	str	r0, [fp, #-56]	; 0xffffffc8
   16dcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16dd0:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   16dd4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16dd8:	str	r0, [r1]
   16ddc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16de0:	add	r0, r0, #1
   16de4:	str	r0, [fp, #-32]	; 0xffffffe0
   16de8:	b	16d74 <flatcc_builder_create_table@@Base+0x13c>
   16dec:	mov	r0, #0
   16df0:	str	r0, [sp, #12]
   16df4:	str	r0, [sp, #16]
   16df8:	ldr	r0, [sp, #12]
   16dfc:	add	r0, r0, #4
   16e00:	str	r0, [sp, #12]
   16e04:	add	r0, sp, #12
   16e08:	add	r0, r0, #8
   16e0c:	ldr	r1, [sp, #16]
   16e10:	sub	r2, fp, #44	; 0x2c
   16e14:	str	r2, [r0, r1, lsl #3]
   16e18:	ldr	r1, [sp, #16]
   16e1c:	add	r0, r0, r1, lsl #3
   16e20:	movw	r1, #4
   16e24:	str	r1, [r0, #4]
   16e28:	ldr	r0, [sp, #16]
   16e2c:	add	r0, r0, #1
   16e30:	str	r0, [sp, #16]
   16e34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e38:	cmp	r0, #0
   16e3c:	bls	16e80 <flatcc_builder_create_table@@Base+0x248>
   16e40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e44:	ldr	r1, [sp, #12]
   16e48:	add	r0, r1, r0
   16e4c:	str	r0, [sp, #12]
   16e50:	ldr	r0, [fp, #-20]	; 0xffffffec
   16e54:	add	r1, sp, #12
   16e58:	add	r1, r1, #8
   16e5c:	ldr	r2, [sp, #16]
   16e60:	str	r0, [r1, r2, lsl #3]
   16e64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e68:	ldr	r2, [sp, #16]
   16e6c:	add	r1, r1, r2, lsl #3
   16e70:	str	r0, [r1, #4]
   16e74:	ldr	r0, [sp, #16]
   16e78:	add	r0, r0, #1
   16e7c:	str	r0, [sp, #16]
   16e80:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16e84:	cmp	r0, #0
   16e88:	bls	16ed0 <flatcc_builder_create_table@@Base+0x298>
   16e8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16e90:	ldr	r1, [sp, #12]
   16e94:	add	r0, r1, r0
   16e98:	str	r0, [sp, #12]
   16e9c:	add	r0, sp, #12
   16ea0:	add	r0, r0, #8
   16ea4:	ldr	r1, [sp, #16]
   16ea8:	ldr	r2, [pc, #84]	; 16f04 <flatcc_builder_create_table@@Base+0x2cc>
   16eac:	ldr	r2, [pc, r2]
   16eb0:	str	r2, [r0, r1, lsl #3]
   16eb4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16eb8:	ldr	r2, [sp, #16]
   16ebc:	add	r0, r0, r2, lsl #3
   16ec0:	str	r1, [r0, #4]
   16ec4:	ldr	r0, [sp, #16]
   16ec8:	add	r0, r0, #1
   16ecc:	str	r0, [sp, #16]
   16ed0:	ldr	r0, [fp, #-16]
   16ed4:	add	r1, sp, #12
   16ed8:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   16edc:	str	r0, [fp, #-12]
   16ee0:	ldr	r0, [fp, #-12]
   16ee4:	sub	sp, fp, #8
   16ee8:	pop	{r4, sl, fp, pc}
   16eec:	andeq	r4, r0, sp, lsl #14
   16ef0:	muleq	r0, r2, pc	; <UNPREDICTABLE>
   16ef4:	andeq	r4, r0, pc, lsl #14
   16ef8:	andeq	r4, r0, r7, lsl #15
   16efc:	andeq	r3, r0, lr, asr pc
   16f00:	ldrdeq	r4, [r0], -fp
   16f04:	muleq	r1, r8, r1

00016f08 <flatcc_builder_check_required_field@@Base>:
   16f08:	push	{fp, lr}
   16f0c:	mov	fp, sp
   16f10:	sub	sp, sp, #16
   16f14:	str	r0, [fp, #-4]
   16f18:	strh	r1, [fp, #-6]
   16f1c:	ldr	r0, [fp, #-4]
   16f20:	ldr	r0, [r0, #32]
   16f24:	ldrh	r0, [r0, #14]
   16f28:	cmp	r0, #3
   16f2c:	bne	16f34 <flatcc_builder_check_required_field@@Base+0x2c>
   16f30:	b	16f54 <flatcc_builder_check_required_field@@Base+0x4c>
   16f34:	ldr	r0, [pc, #104]	; 16fa4 <flatcc_builder_check_required_field@@Base+0x9c>
   16f38:	add	r0, pc, r0
   16f3c:	ldr	r1, [pc, #100]	; 16fa8 <flatcc_builder_check_required_field@@Base+0xa0>
   16f40:	add	r1, pc, r1
   16f44:	ldr	r2, [pc, #96]	; 16fac <flatcc_builder_check_required_field@@Base+0xa4>
   16f48:	add	r3, pc, r2
   16f4c:	movw	r2, #1272	; 0x4f8
   16f50:	bl	12448 <__assert_fail@plt>
   16f54:	ldrh	r0, [fp, #-6]
   16f58:	ldr	r1, [fp, #-4]
   16f5c:	ldrh	r1, [r1, #8]
   16f60:	cmp	r0, r1
   16f64:	movw	r0, #0
   16f68:	str	r0, [sp, #4]
   16f6c:	bge	16f94 <flatcc_builder_check_required_field@@Base+0x8c>
   16f70:	ldr	r0, [fp, #-4]
   16f74:	ldr	r0, [r0, #4]
   16f78:	ldrh	r1, [fp, #-6]
   16f7c:	add	r0, r0, r1, lsl #1
   16f80:	ldrh	r0, [r0]
   16f84:	cmp	r0, #0
   16f88:	movw	r0, #0
   16f8c:	movne	r0, #1
   16f90:	str	r0, [sp, #4]
   16f94:	ldr	r0, [sp, #4]
   16f98:	and	r0, r0, #1
   16f9c:	mov	sp, fp
   16fa0:	pop	{fp, pc}
   16fa4:	andeq	r4, r0, lr, lsl #10
   16fa8:	ldrdeq	r3, [r0], -sl
   16fac:	andeq	r4, r0, r9, lsr #10

00016fb0 <flatcc_builder_check_union_field@@Base>:
   16fb0:	push	{fp, lr}
   16fb4:	mov	fp, sp
   16fb8:	sub	sp, sp, #16
   16fbc:	str	r0, [sp, #8]
   16fc0:	strh	r1, [sp, #6]
   16fc4:	ldr	r0, [sp, #8]
   16fc8:	ldr	r0, [r0, #32]
   16fcc:	ldrh	r0, [r0, #14]
   16fd0:	cmp	r0, #3
   16fd4:	bne	16fdc <flatcc_builder_check_union_field@@Base+0x2c>
   16fd8:	b	16ffc <flatcc_builder_check_union_field@@Base+0x4c>
   16fdc:	ldr	r0, [pc, #284]	; 17100 <flatcc_builder_check_union_field@@Base+0x150>
   16fe0:	add	r0, pc, r0
   16fe4:	ldr	r1, [pc, #280]	; 17104 <flatcc_builder_check_union_field@@Base+0x154>
   16fe8:	add	r1, pc, r1
   16fec:	ldr	r2, [pc, #276]	; 17108 <flatcc_builder_check_union_field@@Base+0x158>
   16ff0:	add	r3, pc, r2
   16ff4:	movw	r2, #1279	; 0x4ff
   16ff8:	bl	12448 <__assert_fail@plt>
   16ffc:	ldrh	r0, [sp, #6]
   17000:	cmp	r0, #0
   17004:	beq	1701c <flatcc_builder_check_union_field@@Base+0x6c>
   17008:	ldrh	r0, [sp, #6]
   1700c:	ldr	r1, [sp, #8]
   17010:	ldrh	r1, [r1, #8]
   17014:	cmp	r0, r1
   17018:	blt	17028 <flatcc_builder_check_union_field@@Base+0x78>
   1701c:	movw	r0, #0
   17020:	str	r0, [fp, #-4]
   17024:	b	170f4 <flatcc_builder_check_union_field@@Base+0x144>
   17028:	ldr	r0, [sp, #8]
   1702c:	ldr	r0, [r0, #4]
   17030:	ldrh	r1, [sp, #6]
   17034:	sub	r1, r1, #1
   17038:	add	r0, r0, r1, lsl #1
   1703c:	ldrh	r0, [r0]
   17040:	cmp	r0, #0
   17044:	bne	17074 <flatcc_builder_check_union_field@@Base+0xc4>
   17048:	ldr	r0, [sp, #8]
   1704c:	ldr	r0, [r0, #4]
   17050:	ldrh	r1, [sp, #6]
   17054:	add	r0, r0, r1, lsl #1
   17058:	ldrh	r0, [r0]
   1705c:	cmp	r0, #0
   17060:	movw	r0, #0
   17064:	moveq	r0, #1
   17068:	and	r0, r0, #1
   1706c:	str	r0, [fp, #-4]
   17070:	b	170f4 <flatcc_builder_check_union_field@@Base+0x144>
   17074:	ldr	r0, [sp, #8]
   17078:	ldr	r1, [r0, #4]
   1707c:	ldr	r0, [r0, #16]
   17080:	ldrh	r2, [sp, #6]
   17084:	sub	r2, r2, #1
   17088:	add	r1, r1, r2, lsl #1
   1708c:	ldrh	r1, [r1]
   17090:	add	r0, r0, r1
   17094:	ldrsb	r0, [r0]
   17098:	cmp	r0, #0
   1709c:	beq	170cc <flatcc_builder_check_union_field@@Base+0x11c>
   170a0:	ldr	r0, [sp, #8]
   170a4:	ldr	r0, [r0, #4]
   170a8:	ldrh	r1, [sp, #6]
   170ac:	add	r0, r0, r1, lsl #1
   170b0:	ldrh	r0, [r0]
   170b4:	cmp	r0, #0
   170b8:	movw	r0, #0
   170bc:	movne	r0, #1
   170c0:	and	r0, r0, #1
   170c4:	str	r0, [fp, #-4]
   170c8:	b	170f4 <flatcc_builder_check_union_field@@Base+0x144>
   170cc:	ldr	r0, [sp, #8]
   170d0:	ldr	r0, [r0, #4]
   170d4:	ldrh	r1, [sp, #6]
   170d8:	add	r0, r0, r1, lsl #1
   170dc:	ldrh	r0, [r0]
   170e0:	cmp	r0, #0
   170e4:	movw	r0, #0
   170e8:	moveq	r0, #1
   170ec:	and	r0, r0, #1
   170f0:	str	r0, [fp, #-4]
   170f4:	ldr	r0, [fp, #-4]
   170f8:	mov	sp, fp
   170fc:	pop	{fp, pc}
   17100:	andeq	r4, r0, r6, ror #8
   17104:	andeq	r3, r0, r2, lsr ip
   17108:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>

0001710c <flatcc_builder_check_required@@Base>:
   1710c:	push	{fp, lr}
   17110:	mov	fp, sp
   17114:	sub	sp, sp, #24
   17118:	str	r0, [fp, #-8]
   1711c:	str	r1, [sp, #12]
   17120:	str	r2, [sp, #8]
   17124:	ldr	r0, [fp, #-8]
   17128:	ldr	r0, [r0, #32]
   1712c:	ldrh	r0, [r0, #14]
   17130:	cmp	r0, #3
   17134:	bne	1713c <flatcc_builder_check_required@@Base+0x30>
   17138:	b	1715c <flatcc_builder_check_required@@Base+0x50>
   1713c:	ldr	r0, [pc, #172]	; 171f0 <flatcc_builder_check_required@@Base+0xe4>
   17140:	add	r0, pc, r0
   17144:	ldr	r1, [pc, #168]	; 171f4 <flatcc_builder_check_required@@Base+0xe8>
   17148:	add	r1, pc, r1
   1714c:	ldr	r2, [pc, #164]	; 171f8 <flatcc_builder_check_required@@Base+0xec>
   17150:	add	r3, pc, r2
   17154:	movw	r2, #1297	; 0x511
   17158:	bl	12448 <__assert_fail@plt>
   1715c:	ldr	r0, [fp, #-8]
   17160:	ldrh	r0, [r0, #8]
   17164:	ldr	r1, [sp, #8]
   17168:	cmp	r0, r1
   1716c:	bge	1717c <flatcc_builder_check_required@@Base+0x70>
   17170:	movw	r0, #0
   17174:	str	r0, [fp, #-4]
   17178:	b	171e4 <flatcc_builder_check_required@@Base+0xd8>
   1717c:	movw	r0, #0
   17180:	str	r0, [sp, #4]
   17184:	ldr	r0, [sp, #4]
   17188:	ldr	r1, [sp, #8]
   1718c:	cmp	r0, r1
   17190:	bge	171dc <flatcc_builder_check_required@@Base+0xd0>
   17194:	ldr	r0, [fp, #-8]
   17198:	ldr	r0, [r0, #4]
   1719c:	ldr	r1, [sp, #12]
   171a0:	ldr	r2, [sp, #4]
   171a4:	add	r1, r1, r2, lsl #1
   171a8:	ldrh	r1, [r1]
   171ac:	add	r0, r0, r1, lsl #1
   171b0:	ldrh	r0, [r0]
   171b4:	cmp	r0, #0
   171b8:	bne	171c8 <flatcc_builder_check_required@@Base+0xbc>
   171bc:	movw	r0, #0
   171c0:	str	r0, [fp, #-4]
   171c4:	b	171e4 <flatcc_builder_check_required@@Base+0xd8>
   171c8:	b	171cc <flatcc_builder_check_required@@Base+0xc0>
   171cc:	ldr	r0, [sp, #4]
   171d0:	add	r0, r0, #1
   171d4:	str	r0, [sp, #4]
   171d8:	b	17184 <flatcc_builder_check_required@@Base+0x78>
   171dc:	movw	r0, #1
   171e0:	str	r0, [fp, #-4]
   171e4:	ldr	r0, [fp, #-4]
   171e8:	mov	sp, fp
   171ec:	pop	{fp, pc}
   171f0:	andeq	r4, r0, r6, lsl #6
   171f4:	ldrdeq	r3, [r0], -r2
   171f8:	andeq	r4, r0, r4, asr #7

000171fc <flatcc_builder_end_table@@Base>:
   171fc:	push	{r4, r5, fp, lr}
   17200:	add	fp, sp, #8
   17204:	sub	sp, sp, #48	; 0x30
   17208:	str	r0, [fp, #-16]
   1720c:	ldr	r0, [fp, #-16]
   17210:	ldr	r0, [r0, #32]
   17214:	ldrh	r0, [r0, #14]
   17218:	cmp	r0, #3
   1721c:	bne	17224 <flatcc_builder_end_table@@Base+0x28>
   17220:	b	17244 <flatcc_builder_end_table@@Base+0x48>
   17224:	ldr	r0, [pc, #500]	; 17420 <flatcc_builder_end_table@@Base+0x224>
   17228:	add	r0, pc, r0
   1722c:	ldr	r1, [pc, #496]	; 17424 <flatcc_builder_end_table@@Base+0x228>
   17230:	add	r1, pc, r1
   17234:	ldr	r2, [pc, #492]	; 17428 <flatcc_builder_end_table@@Base+0x22c>
   17238:	add	r3, pc, r2
   1723c:	movw	r2, #1317	; 0x525
   17240:	bl	12448 <__assert_fail@plt>
   17244:	ldr	r0, [pc, #480]	; 1742c <flatcc_builder_end_table@@Base+0x230>
   17248:	ldr	r1, [fp, #-16]
   1724c:	ldr	r1, [r1, #4]
   17250:	sub	r1, r1, #4
   17254:	str	r1, [fp, #-20]	; 0xffffffec
   17258:	ldr	r1, [fp, #-16]
   1725c:	ldrh	r1, [r1, #8]
   17260:	add	r1, r1, #2
   17264:	lsl	r1, r1, #1
   17268:	strh	r1, [fp, #-22]	; 0xffffffea
   1726c:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17270:	ldr	r2, [fp, #-20]	; 0xffffffec
   17274:	strh	r1, [r2]
   17278:	ldr	r1, [fp, #-16]
   1727c:	ldr	r1, [r1, #20]
   17280:	uxth	r1, r1
   17284:	add	r1, r1, #4
   17288:	ldr	r2, [fp, #-20]	; 0xffffffec
   1728c:	strh	r1, [r2, #2]
   17290:	ldr	r1, [fp, #-20]	; 0xffffffec
   17294:	ldrh	r1, [r1]
   17298:	ldr	r2, [fp, #-16]
   1729c:	ldr	r2, [r2, #12]
   172a0:	eor	r1, r1, r2
   172a4:	mul	r1, r1, r0
   172a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   172ac:	ldrh	r2, [r2, #2]
   172b0:	eor	r1, r1, r2
   172b4:	mul	r0, r1, r0
   172b8:	ldr	r1, [fp, #-16]
   172bc:	str	r0, [r1, #12]
   172c0:	ldr	r0, [fp, #-16]
   172c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   172c8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   172cc:	ldr	r3, [fp, #-16]
   172d0:	ldr	r3, [r3, #12]
   172d4:	uxth	r2, r2
   172d8:	bl	168a8 <flatcc_builder_create_cached_vtable@@Base>
   172dc:	str	r0, [sp, #24]
   172e0:	cmp	r0, #0
   172e4:	bne	172f4 <flatcc_builder_end_table@@Base+0xf8>
   172e8:	movw	r0, #0
   172ec:	str	r0, [fp, #-12]
   172f0:	b	17414 <flatcc_builder_end_table@@Base+0x218>
   172f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   172f8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   172fc:	mov	r1, #0
   17300:	bl	12418 <memset@plt>
   17304:	ldr	r1, [fp, #-16]
   17308:	ldr	r2, [r1, #32]
   1730c:	ldr	r1, [r1, #76]	; 0x4c
   17310:	ldr	r2, [r2, #20]
   17314:	add	r1, r1, r2
   17318:	str	r1, [sp, #16]
   1731c:	ldr	r1, [fp, #-16]
   17320:	ldr	r1, [r1]
   17324:	ldr	r2, [sp, #16]
   17328:	sub	r1, r1, r2
   1732c:	asr	r1, r1, #1
   17330:	str	r1, [sp, #20]
   17334:	ldr	r1, [fp, #-16]
   17338:	ldr	r2, [fp, #-16]
   1733c:	ldr	r2, [r2, #16]
   17340:	ldr	lr, [fp, #-16]
   17344:	ldr	lr, [lr, #20]
   17348:	ldr	r3, [fp, #-16]
   1734c:	ldrh	r3, [r3, #130]	; 0x82
   17350:	ldr	ip, [sp, #16]
   17354:	ldr	r4, [sp, #20]
   17358:	ldr	r5, [sp, #24]
   1735c:	str	r0, [sp, #12]
   17360:	mov	r0, r1
   17364:	mov	r1, r2
   17368:	mov	r2, lr
   1736c:	uxth	r3, r3
   17370:	str	ip, [sp]
   17374:	str	r4, [sp, #4]
   17378:	str	r5, [sp, #8]
   1737c:	bl	16c38 <flatcc_builder_create_table@@Base>
   17380:	str	r0, [sp, #28]
   17384:	movw	r1, #0
   17388:	cmp	r1, r0
   1738c:	bne	1739c <flatcc_builder_end_table@@Base+0x1a0>
   17390:	movw	r0, #0
   17394:	str	r0, [fp, #-12]
   17398:	b	17414 <flatcc_builder_end_table@@Base+0x218>
   1739c:	ldr	r0, [fp, #-16]
   173a0:	ldr	r0, [r0, #32]
   173a4:	ldr	r0, [r0, #24]
   173a8:	ldr	r1, [fp, #-16]
   173ac:	str	r0, [r1, #12]
   173b0:	ldr	r0, [fp, #-16]
   173b4:	ldr	r0, [r0, #32]
   173b8:	ldrh	r0, [r0, #28]
   173bc:	ldr	r1, [fp, #-16]
   173c0:	strh	r0, [r1, #8]
   173c4:	ldr	r0, [fp, #-16]
   173c8:	ldr	r0, [r0, #52]	; 0x34
   173cc:	ldr	r1, [fp, #-16]
   173d0:	ldr	r1, [r1, #32]
   173d4:	ldr	r1, [r1, #16]
   173d8:	add	r0, r0, r1
   173dc:	ldr	r1, [fp, #-16]
   173e0:	str	r0, [r1, #4]
   173e4:	ldr	r0, [fp, #-16]
   173e8:	ldr	r0, [r0, #76]	; 0x4c
   173ec:	ldr	r1, [fp, #-16]
   173f0:	ldr	r1, [r1, #32]
   173f4:	ldr	r1, [r1, #20]
   173f8:	add	r0, r0, r1
   173fc:	ldr	r1, [fp, #-16]
   17400:	str	r0, [r1]
   17404:	ldr	r0, [fp, #-16]
   17408:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   1740c:	ldr	r0, [sp, #28]
   17410:	str	r0, [fp, #-12]
   17414:	ldr	r0, [fp, #-12]
   17418:	sub	sp, fp, #8
   1741c:	pop	{r4, r5, fp, pc}
   17420:	andeq	r4, r0, lr, lsl r2
   17424:	andeq	r3, r0, sl, ror #19
   17428:	andeq	r4, r0, r6, lsr r3
   1742c:			; <UNDEFINED> instruction: 0x9e3779b1

00017430 <flatcc_builder_create_vector@@Base>:
   17430:	push	{fp, lr}
   17434:	mov	fp, sp
   17438:	sub	sp, sp, #112	; 0x70
   1743c:	ldr	ip, [fp, #12]
   17440:	ldr	lr, [fp, #8]
   17444:	str	r0, [fp, #-8]
   17448:	str	r1, [fp, #-12]
   1744c:	str	r2, [fp, #-16]
   17450:	str	r3, [fp, #-20]	; 0xffffffec
   17454:	strh	lr, [fp, #-22]	; 0xffffffea
   17458:	ldr	r0, [fp, #-16]
   1745c:	ldr	r1, [fp, #12]
   17460:	cmp	r0, r1
   17464:	str	ip, [sp]
   17468:	bls	174ac <flatcc_builder_create_vector@@Base+0x7c>
   1746c:	ldr	r0, [fp, #-16]
   17470:	ldr	r1, [fp, #12]
   17474:	cmp	r0, r1
   17478:	bhi	17480 <flatcc_builder_create_vector@@Base+0x50>
   1747c:	b	174a0 <flatcc_builder_create_vector@@Base+0x70>
   17480:	ldr	r0, [pc, #364]	; 175f4 <flatcc_builder_create_vector@@Base+0x1c4>
   17484:	add	r0, pc, r0
   17488:	ldr	r1, [pc, #360]	; 175f8 <flatcc_builder_create_vector@@Base+0x1c8>
   1748c:	add	r1, pc, r1
   17490:	ldr	r2, [pc, #356]	; 175fc <flatcc_builder_create_vector@@Base+0x1cc>
   17494:	add	r3, pc, r2
   17498:	movw	r2, #1365	; 0x555
   1749c:	bl	12448 <__assert_fail@plt>
   174a0:	movw	r0, #0
   174a4:	str	r0, [fp, #-4]
   174a8:	b	175e8 <flatcc_builder_create_vector@@Base+0x1b8>
   174ac:	sub	r0, fp, #22
   174b0:	mov	r1, #4
   174b4:	bl	161bc <flatcc_builder_start_vector@@Base+0xac>
   174b8:	ldr	r0, [fp, #-8]
   174bc:	ldrh	r1, [fp, #-22]	; 0xffffffea
   174c0:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   174c4:	ldr	r0, [fp, #-16]
   174c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   174cc:	mul	r0, r0, r1
   174d0:	str	r0, [fp, #-28]	; 0xffffffe4
   174d4:	ldr	r0, [fp, #-16]
   174d8:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   174dc:	str	r0, [fp, #-36]	; 0xffffffdc
   174e0:	ldr	r0, [fp, #-8]
   174e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   174e8:	ldrh	r2, [fp, #-22]	; 0xffffffea
   174ec:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   174f0:	str	r0, [fp, #-32]	; 0xffffffe0
   174f4:	mov	r0, #0
   174f8:	str	r0, [sp, #4]
   174fc:	str	r0, [sp, #8]
   17500:	ldr	r0, [sp, #4]
   17504:	add	r0, r0, #4
   17508:	str	r0, [sp, #4]
   1750c:	add	r0, sp, #4
   17510:	add	r0, r0, #8
   17514:	ldr	r1, [sp, #8]
   17518:	sub	r2, fp, #36	; 0x24
   1751c:	str	r2, [r0, r1, lsl #3]
   17520:	ldr	r1, [sp, #8]
   17524:	add	r0, r0, r1, lsl #3
   17528:	movw	r1, #4
   1752c:	str	r1, [r0, #4]
   17530:	ldr	r0, [sp, #8]
   17534:	add	r0, r0, #1
   17538:	str	r0, [sp, #8]
   1753c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17540:	cmp	r0, #0
   17544:	bls	17588 <flatcc_builder_create_vector@@Base+0x158>
   17548:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1754c:	ldr	r1, [sp, #4]
   17550:	add	r0, r1, r0
   17554:	str	r0, [sp, #4]
   17558:	ldr	r0, [fp, #-12]
   1755c:	add	r1, sp, #4
   17560:	add	r1, r1, #8
   17564:	ldr	r2, [sp, #8]
   17568:	str	r0, [r1, r2, lsl #3]
   1756c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17570:	ldr	r2, [sp, #8]
   17574:	add	r1, r1, r2, lsl #3
   17578:	str	r0, [r1, #4]
   1757c:	ldr	r0, [sp, #8]
   17580:	add	r0, r0, #1
   17584:	str	r0, [sp, #8]
   17588:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1758c:	cmp	r0, #0
   17590:	bls	175d8 <flatcc_builder_create_vector@@Base+0x1a8>
   17594:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17598:	ldr	r1, [sp, #4]
   1759c:	add	r0, r1, r0
   175a0:	str	r0, [sp, #4]
   175a4:	add	r0, sp, #4
   175a8:	add	r0, r0, #8
   175ac:	ldr	r1, [sp, #8]
   175b0:	ldr	r2, [pc, #72]	; 17600 <flatcc_builder_create_vector@@Base+0x1d0>
   175b4:	ldr	r2, [pc, r2]
   175b8:	str	r2, [r0, r1, lsl #3]
   175bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   175c0:	ldr	r2, [sp, #8]
   175c4:	add	r0, r0, r2, lsl #3
   175c8:	str	r1, [r0, #4]
   175cc:	ldr	r0, [sp, #8]
   175d0:	add	r0, r0, #1
   175d4:	str	r0, [sp, #8]
   175d8:	ldr	r0, [fp, #-8]
   175dc:	add	r1, sp, #4
   175e0:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   175e4:	str	r0, [fp, #-4]
   175e8:	ldr	r0, [fp, #-4]
   175ec:	mov	sp, fp
   175f0:	pop	{fp, pc}
   175f4:	andeq	r4, r0, ip, lsr #2
   175f8:	andeq	r3, r0, lr, lsl #15
   175fc:	andeq	r4, r0, pc, lsr #2
   17600:	muleq	r1, r0, sl

00017604 <flatcc_builder_end_vector@@Base>:
   17604:	push	{fp, lr}
   17608:	mov	fp, sp
   1760c:	sub	sp, sp, #24
   17610:	str	r0, [fp, #-8]
   17614:	ldr	r0, [fp, #-8]
   17618:	ldr	r0, [r0, #32]
   1761c:	ldrh	r0, [r0, #14]
   17620:	cmp	r0, #4
   17624:	bne	1762c <flatcc_builder_end_vector@@Base+0x28>
   17628:	b	1764c <flatcc_builder_end_vector@@Base+0x48>
   1762c:	ldr	r0, [pc, #152]	; 176cc <flatcc_builder_end_vector@@Base+0xc8>
   17630:	add	r0, pc, r0
   17634:	ldr	r1, [pc, #148]	; 176d0 <flatcc_builder_end_vector@@Base+0xcc>
   17638:	add	r1, pc, r1
   1763c:	ldr	r2, [pc, #144]	; 176d4 <flatcc_builder_end_vector@@Base+0xd0>
   17640:	add	r3, pc, r2
   17644:	movw	r2, #1400	; 0x578
   17648:	bl	12448 <__assert_fail@plt>
   1764c:	ldr	r0, [fp, #-8]
   17650:	ldr	r1, [fp, #-8]
   17654:	ldr	r1, [r1, #16]
   17658:	ldr	r2, [fp, #-8]
   1765c:	ldr	r2, [r2, #32]
   17660:	ldr	r2, [r2, #20]
   17664:	ldr	r3, [fp, #-8]
   17668:	ldr	r3, [r3, #32]
   1766c:	ldr	r3, [r3, #16]
   17670:	ldr	ip, [fp, #-8]
   17674:	ldrh	ip, [ip, #130]	; 0x82
   17678:	ldr	lr, [fp, #-8]
   1767c:	ldr	lr, [lr, #32]
   17680:	ldr	lr, [lr, #24]
   17684:	uxth	ip, ip
   17688:	str	ip, [sp]
   1768c:	str	lr, [sp, #4]
   17690:	bl	17430 <flatcc_builder_create_vector@@Base>
   17694:	str	r0, [sp, #12]
   17698:	movw	r1, #0
   1769c:	cmp	r1, r0
   176a0:	bne	176b0 <flatcc_builder_end_vector@@Base+0xac>
   176a4:	movw	r0, #0
   176a8:	str	r0, [fp, #-4]
   176ac:	b	176c0 <flatcc_builder_end_vector@@Base+0xbc>
   176b0:	ldr	r0, [fp, #-8]
   176b4:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   176b8:	ldr	r0, [sp, #12]
   176bc:	str	r0, [fp, #-4]
   176c0:	ldr	r0, [fp, #-4]
   176c4:	mov	sp, fp
   176c8:	pop	{fp, pc}
   176cc:	andeq	r3, r0, r4, lsr #18
   176d0:	andeq	r3, r0, r2, ror #11
   176d4:	strdeq	r3, [r0], -r9

000176d8 <flatcc_builder_vector_count@@Base>:
   176d8:	sub	sp, sp, #4
   176dc:	str	r0, [sp]
   176e0:	ldr	r0, [sp]
   176e4:	ldr	r0, [r0, #32]
   176e8:	ldr	r0, [r0, #20]
   176ec:	add	sp, sp, #4
   176f0:	bx	lr

000176f4 <flatcc_builder_vector_edit@@Base>:
   176f4:	sub	sp, sp, #4
   176f8:	str	r0, [sp]
   176fc:	ldr	r0, [sp]
   17700:	ldr	r0, [r0, #16]
   17704:	add	sp, sp, #4
   17708:	bx	lr

0001770c <flatcc_builder_create_offset_vector_direct@@Base>:
   1770c:	push	{fp, lr}
   17710:	mov	fp, sp
   17714:	sub	sp, sp, #16
   17718:	str	r0, [fp, #-4]
   1771c:	str	r1, [sp, #8]
   17720:	str	r2, [sp, #4]
   17724:	ldr	r0, [fp, #-4]
   17728:	ldr	r1, [sp, #8]
   1772c:	ldr	r2, [sp, #4]
   17730:	movw	r3, #0
   17734:	bl	17740 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17738:	mov	sp, fp
   1773c:	pop	{fp, pc}
   17740:	push	{fp, lr}
   17744:	mov	fp, sp
   17748:	sub	sp, sp, #120	; 0x78
   1774c:	ldr	ip, [pc, #696]	; 17a0c <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   17750:	str	r0, [fp, #-8]
   17754:	str	r1, [fp, #-12]
   17758:	str	r2, [fp, #-16]
   1775c:	str	r3, [fp, #-20]	; 0xffffffec
   17760:	ldr	r0, [fp, #-16]
   17764:	cmp	r0, ip
   17768:	bls	17778 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   1776c:	movw	r0, #0
   17770:	str	r0, [fp, #-4]
   17774:	b	17a00 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   17778:	ldr	r0, [fp, #-8]
   1777c:	mov	r1, #4
   17780:	str	r1, [sp]
   17784:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   17788:	ldr	r0, [fp, #-16]
   1778c:	lsl	r0, r0, #2
   17790:	str	r0, [fp, #-24]	; 0xffffffe8
   17794:	ldr	r0, [fp, #-16]
   17798:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   1779c:	str	r0, [fp, #-32]	; 0xffffffe0
   177a0:	ldr	r0, [fp, #-8]
   177a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   177a8:	ldr	r2, [sp]
   177ac:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   177b0:	str	r0, [fp, #-28]	; 0xffffffe4
   177b4:	mov	r0, #0
   177b8:	str	r0, [sp, #4]
   177bc:	str	r0, [sp, #8]
   177c0:	ldr	r0, [sp, #4]
   177c4:	add	r0, r0, #4
   177c8:	str	r0, [sp, #4]
   177cc:	add	r0, sp, #4
   177d0:	add	r0, r0, #8
   177d4:	ldr	r1, [sp, #8]
   177d8:	sub	r2, fp, #32
   177dc:	str	r2, [r0, r1, lsl #3]
   177e0:	ldr	r1, [sp, #8]
   177e4:	add	r0, r0, r1, lsl #3
   177e8:	movw	r1, #4
   177ec:	str	r1, [r0, #4]
   177f0:	ldr	r0, [sp, #8]
   177f4:	add	r0, r0, #1
   177f8:	str	r0, [sp, #8]
   177fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17800:	cmp	r0, #0
   17804:	bls	17848 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17808:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1780c:	ldr	r1, [sp, #4]
   17810:	add	r0, r1, r0
   17814:	str	r0, [sp, #4]
   17818:	ldr	r0, [fp, #-12]
   1781c:	add	r1, sp, #4
   17820:	add	r1, r1, #8
   17824:	ldr	r2, [sp, #8]
   17828:	str	r0, [r1, r2, lsl #3]
   1782c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17830:	ldr	r2, [sp, #8]
   17834:	add	r1, r1, r2, lsl #3
   17838:	str	r0, [r1, #4]
   1783c:	ldr	r0, [sp, #8]
   17840:	add	r0, r0, #1
   17844:	str	r0, [sp, #8]
   17848:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1784c:	cmp	r0, #0
   17850:	bls	17898 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17854:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17858:	ldr	r1, [sp, #4]
   1785c:	add	r0, r1, r0
   17860:	str	r0, [sp, #4]
   17864:	add	r0, sp, #4
   17868:	add	r0, r0, #8
   1786c:	ldr	r1, [sp, #8]
   17870:	ldr	r2, [pc, #444]	; 17a34 <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   17874:	ldr	r2, [pc, r2]
   17878:	str	r2, [r0, r1, lsl #3]
   1787c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17880:	ldr	r2, [sp, #8]
   17884:	add	r0, r0, r2, lsl #3
   17888:	str	r1, [r0, #4]
   1788c:	ldr	r0, [sp, #8]
   17890:	add	r0, r0, #1
   17894:	str	r0, [sp, #8]
   17898:	ldr	r0, [fp, #-8]
   1789c:	ldr	r0, [r0, #136]	; 0x88
   178a0:	ldr	r1, [sp, #4]
   178a4:	sub	r0, r0, r1
   178a8:	str	r0, [fp, #-36]	; 0xffffffdc
   178ac:	movw	r0, #0
   178b0:	str	r0, [fp, #-44]	; 0xffffffd4
   178b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   178b8:	ldr	r1, [fp, #-16]
   178bc:	cmp	r0, r1
   178c0:	bcs	179f0 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   178c4:	ldr	r0, [fp, #-12]
   178c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   178cc:	add	r0, r0, r1, lsl #2
   178d0:	ldr	r0, [r0]
   178d4:	cmp	r0, #0
   178d8:	beq	17968 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   178dc:	ldr	r0, [fp, #-12]
   178e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   178e4:	ldr	r0, [r0, r1, lsl #2]
   178e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   178ec:	sub	r0, r0, r2
   178f0:	sub	r0, r0, r1, lsl #2
   178f4:	sub	r0, r0, #4
   178f8:	str	r0, [fp, #-40]	; 0xffffffd8
   178fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17900:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   17904:	ldr	r1, [fp, #-12]
   17908:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1790c:	add	r1, r1, r2, lsl #2
   17910:	str	r0, [r1]
   17914:	ldr	r0, [fp, #-20]	; 0xffffffec
   17918:	movw	r1, #0
   1791c:	cmp	r0, r1
   17920:	beq	17964 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17924:	ldr	r0, [fp, #-20]	; 0xffffffec
   17928:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1792c:	add	r0, r0, r1
   17930:	ldrb	r0, [r0]
   17934:	cmp	r0, #0
   17938:	beq	17940 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   1793c:	b	17960 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   17940:	ldr	r0, [pc, #224]	; 17a28 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   17944:	add	r0, pc, r0
   17948:	ldr	r1, [pc, #220]	; 17a2c <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   1794c:	add	r1, pc, r1
   17950:	ldr	r2, [pc, #216]	; 17a30 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   17954:	add	r3, pc, r2
   17958:	movw	r2, #1457	; 0x5b1
   1795c:	bl	12448 <__assert_fail@plt>
   17960:	b	17964 <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17964:	b	179dc <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17968:	ldr	r0, [fp, #-20]	; 0xffffffec
   1796c:	movw	r1, #0
   17970:	cmp	r0, r1
   17974:	beq	179b8 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   17978:	ldr	r0, [fp, #-20]	; 0xffffffec
   1797c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17980:	add	r0, r0, r1
   17984:	ldrb	r0, [r0]
   17988:	cmp	r0, #0
   1798c:	bne	17994 <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   17990:	b	179b4 <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   17994:	ldr	r0, [pc, #128]	; 17a1c <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   17998:	add	r0, pc, r0
   1799c:	ldr	r1, [pc, #124]	; 17a20 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   179a0:	add	r1, pc, r1
   179a4:	ldr	r2, [pc, #120]	; 17a24 <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   179a8:	add	r3, pc, r2
   179ac:	movw	r2, #1461	; 0x5b5
   179b0:	bl	12448 <__assert_fail@plt>
   179b4:	b	179d8 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   179b8:	ldr	r0, [pc, #80]	; 17a10 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   179bc:	add	r0, pc, r0
   179c0:	ldr	r1, [pc, #76]	; 17a14 <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   179c4:	add	r1, pc, r1
   179c8:	ldr	r2, [pc, #72]	; 17a18 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   179cc:	add	r3, pc, r2
   179d0:	movw	r2, #1463	; 0x5b7
   179d4:	bl	12448 <__assert_fail@plt>
   179d8:	b	179dc <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   179dc:	b	179e0 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   179e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   179e4:	add	r0, r0, #1
   179e8:	str	r0, [fp, #-44]	; 0xffffffd4
   179ec:	b	178b4 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   179f0:	ldr	r0, [fp, #-8]
   179f4:	add	r1, sp, #4
   179f8:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   179fc:	str	r0, [fp, #-4]
   17a00:	ldr	r0, [fp, #-4]
   17a04:	mov	sp, fp
   17a08:	pop	{fp, pc}
   17a0c:	svccc	0x00ffffff
   17a10:	andeq	r4, r0, fp, lsl r4
   17a14:	andeq	r3, r0, r6, asr r2
   17a18:	andeq	r4, r0, sp, lsl #8
   17a1c:	andeq	r4, r0, r4, asr #9
   17a20:	andeq	r3, r0, sl, ror r2
   17a24:	andeq	r4, r0, r1, lsr r4
   17a28:	andeq	r4, r0, r7, lsl #9
   17a2c:	andeq	r3, r0, lr, asr #5
   17a30:	andeq	r4, r0, r5, lsl #9
   17a34:	ldrdeq	r4, [r1], -r0

00017a38 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17a38:	push	{fp, lr}
   17a3c:	mov	fp, sp
   17a40:	sub	sp, sp, #16
   17a44:	str	r0, [sp, #8]
   17a48:	str	r1, [sp, #4]
   17a4c:	ldr	r0, [sp, #8]
   17a50:	ldr	r0, [r0, #32]
   17a54:	ldrh	r0, [r0, #14]
   17a58:	cmp	r0, #5
   17a5c:	bne	17a64 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   17a60:	b	17a84 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   17a64:	ldr	r0, [pc, #112]	; 17adc <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17a68:	add	r0, pc, r0
   17a6c:	ldr	r1, [pc, #108]	; 17ae0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   17a70:	add	r1, pc, r1
   17a74:	ldr	r2, [pc, #104]	; 17ae4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   17a78:	add	r3, pc, r2
   17a7c:	movw	r2, #1493	; 0x5d5
   17a80:	bl	12448 <__assert_fail@plt>
   17a84:	ldr	r0, [sp, #8]
   17a88:	ldr	r1, [sp, #8]
   17a8c:	ldr	r1, [r1, #16]
   17a90:	ldr	r2, [sp, #8]
   17a94:	ldr	r2, [r2, #32]
   17a98:	ldr	r2, [r2, #20]
   17a9c:	ldr	r3, [sp, #4]
   17aa0:	bl	17740 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17aa4:	str	r0, [sp]
   17aa8:	movw	r1, #0
   17aac:	cmp	r1, r0
   17ab0:	bne	17ac0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   17ab4:	movw	r0, #0
   17ab8:	str	r0, [fp, #-4]
   17abc:	b	17ad0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17ac0:	ldr	r0, [sp, #8]
   17ac4:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   17ac8:	ldr	r0, [sp]
   17acc:	str	r0, [fp, #-4]
   17ad0:	ldr	r0, [fp, #-4]
   17ad4:	mov	sp, fp
   17ad8:	pop	{fp, pc}
   17adc:	andeq	r3, r0, r5, ror #11
   17ae0:	andeq	r3, r0, sl, lsr #3
   17ae4:	andeq	r3, r0, lr, asr #24

00017ae8 <flatcc_builder_offset_vector_edit@@Base>:
   17ae8:	sub	sp, sp, #4
   17aec:	str	r0, [sp]
   17af0:	ldr	r0, [sp]
   17af4:	ldr	r0, [r0, #16]
   17af8:	add	sp, sp, #4
   17afc:	bx	lr

00017b00 <flatcc_builder_offset_vector_count@@Base>:
   17b00:	sub	sp, sp, #4
   17b04:	str	r0, [sp]
   17b08:	ldr	r0, [sp]
   17b0c:	ldr	r0, [r0, #32]
   17b10:	ldr	r0, [r0, #20]
   17b14:	add	sp, sp, #4
   17b18:	bx	lr

00017b1c <flatcc_builder_table_add_union@@Base>:
   17b1c:	push	{fp, lr}
   17b20:	mov	fp, sp
   17b24:	sub	sp, sp, #32
   17b28:	str	r2, [fp, #-12]
   17b2c:	str	r3, [fp, #-8]
   17b30:	str	r0, [sp, #16]
   17b34:	str	r1, [sp, #12]
   17b38:	ldr	r0, [sp, #16]
   17b3c:	ldr	r0, [r0, #32]
   17b40:	ldrh	r0, [r0, #14]
   17b44:	cmp	r0, #3
   17b48:	bne	17b50 <flatcc_builder_table_add_union@@Base+0x34>
   17b4c:	b	17b70 <flatcc_builder_table_add_union@@Base+0x54>
   17b50:	ldr	r0, [pc, #388]	; 17cdc <flatcc_builder_table_add_union@@Base+0x1c0>
   17b54:	add	r0, pc, r0
   17b58:	ldr	r1, [pc, #384]	; 17ce0 <flatcc_builder_table_add_union@@Base+0x1c4>
   17b5c:	add	r1, pc, r1
   17b60:	ldr	r2, [pc, #380]	; 17ce4 <flatcc_builder_table_add_union@@Base+0x1c8>
   17b64:	add	r3, pc, r2
   17b68:	movw	r2, #1518	; 0x5ee
   17b6c:	bl	12448 <__assert_fail@plt>
   17b70:	ldrb	r0, [fp, #-12]
   17b74:	cmp	r0, #0
   17b78:	bne	17bd0 <flatcc_builder_table_add_union@@Base+0xb4>
   17b7c:	ldr	r0, [fp, #-8]
   17b80:	cmp	r0, #0
   17b84:	beq	17bd0 <flatcc_builder_table_add_union@@Base+0xb4>
   17b88:	ldrb	r0, [fp, #-12]
   17b8c:	cmp	r0, #0
   17b90:	bne	17ba0 <flatcc_builder_table_add_union@@Base+0x84>
   17b94:	ldr	r0, [fp, #-8]
   17b98:	cmp	r0, #0
   17b9c:	bne	17ba4 <flatcc_builder_table_add_union@@Base+0x88>
   17ba0:	b	17bc4 <flatcc_builder_table_add_union@@Base+0xa8>
   17ba4:	ldr	r0, [pc, #316]	; 17ce8 <flatcc_builder_table_add_union@@Base+0x1cc>
   17ba8:	add	r0, pc, r0
   17bac:	ldr	r1, [pc, #312]	; 17cec <flatcc_builder_table_add_union@@Base+0x1d0>
   17bb0:	add	r1, pc, r1
   17bb4:	ldr	r2, [pc, #308]	; 17cf0 <flatcc_builder_table_add_union@@Base+0x1d4>
   17bb8:	add	r3, pc, r2
   17bbc:	movw	r2, #1519	; 0x5ef
   17bc0:	bl	12448 <__assert_fail@plt>
   17bc4:	mvn	r0, #0
   17bc8:	str	r0, [fp, #-4]
   17bcc:	b	17cd0 <flatcc_builder_table_add_union@@Base+0x1b4>
   17bd0:	ldr	r0, [fp, #-8]
   17bd4:	cmp	r0, #0
   17bd8:	beq	17c48 <flatcc_builder_table_add_union@@Base+0x12c>
   17bdc:	ldr	r0, [sp, #16]
   17be0:	ldr	r1, [sp, #12]
   17be4:	bl	17d0c <flatcc_builder_table_add_offset@@Base>
   17be8:	str	r0, [sp, #8]
   17bec:	ldr	r0, [sp, #8]
   17bf0:	movw	r1, #0
   17bf4:	cmp	r0, r1
   17bf8:	bne	17c3c <flatcc_builder_table_add_union@@Base+0x120>
   17bfc:	ldr	r0, [sp, #8]
   17c00:	movw	r1, #0
   17c04:	cmp	r0, r1
   17c08:	beq	17c10 <flatcc_builder_table_add_union@@Base+0xf4>
   17c0c:	b	17c30 <flatcc_builder_table_add_union@@Base+0x114>
   17c10:	ldr	r0, [pc, #220]	; 17cf4 <flatcc_builder_table_add_union@@Base+0x1d8>
   17c14:	add	r0, pc, r0
   17c18:	ldr	r1, [pc, #216]	; 17cf8 <flatcc_builder_table_add_union@@Base+0x1dc>
   17c1c:	add	r1, pc, r1
   17c20:	ldr	r2, [pc, #212]	; 17cfc <flatcc_builder_table_add_union@@Base+0x1e0>
   17c24:	add	r3, pc, r2
   17c28:	movw	r2, #1522	; 0x5f2
   17c2c:	bl	12448 <__assert_fail@plt>
   17c30:	mvn	r0, #0
   17c34:	str	r0, [fp, #-4]
   17c38:	b	17cd0 <flatcc_builder_table_add_union@@Base+0x1b4>
   17c3c:	ldr	r0, [fp, #-8]
   17c40:	ldr	r1, [sp, #8]
   17c44:	str	r0, [r1]
   17c48:	ldr	r0, [sp, #16]
   17c4c:	ldr	r1, [sp, #12]
   17c50:	sub	r1, r1, #1
   17c54:	movw	r2, #1
   17c58:	movw	r3, #1
   17c5c:	uxth	r3, r3
   17c60:	bl	17e3c <flatcc_builder_table_add@@Base>
   17c64:	str	r0, [sp, #4]
   17c68:	ldr	r0, [sp, #4]
   17c6c:	movw	r1, #0
   17c70:	cmp	r0, r1
   17c74:	bne	17cb8 <flatcc_builder_table_add_union@@Base+0x19c>
   17c78:	ldr	r0, [sp, #4]
   17c7c:	movw	r1, #0
   17c80:	cmp	r0, r1
   17c84:	beq	17c8c <flatcc_builder_table_add_union@@Base+0x170>
   17c88:	b	17cac <flatcc_builder_table_add_union@@Base+0x190>
   17c8c:	ldr	r0, [pc, #108]	; 17d00 <flatcc_builder_table_add_union@@Base+0x1e4>
   17c90:	add	r0, pc, r0
   17c94:	ldr	r1, [pc, #104]	; 17d04 <flatcc_builder_table_add_union@@Base+0x1e8>
   17c98:	add	r1, pc, r1
   17c9c:	ldr	r2, [pc, #100]	; 17d08 <flatcc_builder_table_add_union@@Base+0x1ec>
   17ca0:	add	r3, pc, r2
   17ca4:	movw	r2, #1526	; 0x5f6
   17ca8:	bl	12448 <__assert_fail@plt>
   17cac:	mvn	r0, #0
   17cb0:	str	r0, [fp, #-4]
   17cb4:	b	17cd0 <flatcc_builder_table_add_union@@Base+0x1b4>
   17cb8:	ldrb	r0, [fp, #-12]
   17cbc:	bl	17fa4 <flatcc_builder_table_add@@Base+0x168>
   17cc0:	ldr	lr, [sp, #4]
   17cc4:	strb	r0, [lr]
   17cc8:	movw	r0, #0
   17ccc:	str	r0, [fp, #-4]
   17cd0:	ldr	r0, [fp, #-4]
   17cd4:	mov	sp, fp
   17cd8:	pop	{fp, pc}
   17cdc:	strdeq	r3, [r0], -r2
   17ce0:	strheq	r3, [r0], -lr
   17ce4:	ldrdeq	r3, [r0], -r4
   17ce8:	andeq	r3, r0, r8, ror #23
   17cec:	andeq	r3, r0, sl, rrx
   17cf0:	andeq	r3, r0, r0, lsl #23
   17cf4:	muleq	r0, lr, fp
   17cf8:	strdeq	r2, [r0], -lr
   17cfc:	andeq	r3, r0, r4, lsl fp
   17d00:	andeq	r3, r0, ip, lsr #22
   17d04:	andeq	r2, r0, r2, lsl #31
   17d08:	muleq	r0, r8, sl

00017d0c <flatcc_builder_table_add_offset@@Base>:
   17d0c:	push	{fp, lr}
   17d10:	mov	fp, sp
   17d14:	sub	sp, sp, #8
   17d18:	str	r0, [sp, #4]
   17d1c:	str	r1, [sp]
   17d20:	ldr	r0, [sp, #4]
   17d24:	ldr	r0, [r0, #32]
   17d28:	ldrh	r0, [r0, #14]
   17d2c:	cmp	r0, #3
   17d30:	bne	17d38 <flatcc_builder_table_add_offset@@Base+0x2c>
   17d34:	b	17d58 <flatcc_builder_table_add_offset@@Base+0x4c>
   17d38:	ldr	r0, [pc, #212]	; 17e14 <flatcc_builder_table_add_offset@@Base+0x108>
   17d3c:	add	r0, pc, r0
   17d40:	ldr	r1, [pc, #208]	; 17e18 <flatcc_builder_table_add_offset@@Base+0x10c>
   17d44:	add	r1, pc, r1
   17d48:	ldr	r2, [pc, #204]	; 17e1c <flatcc_builder_table_add_offset@@Base+0x110>
   17d4c:	add	r3, pc, r2
   17d50:	movw	r2, #1811	; 0x713
   17d54:	bl	12448 <__assert_fail@plt>
   17d58:	ldr	r0, [sp]
   17d5c:	cmp	r0, #0
   17d60:	blt	17d78 <flatcc_builder_table_add_offset@@Base+0x6c>
   17d64:	ldr	r0, [sp]
   17d68:	movw	r1, #32764	; 0x7ffc
   17d6c:	cmp	r0, r1
   17d70:	bgt	17d78 <flatcc_builder_table_add_offset@@Base+0x6c>
   17d74:	b	17d98 <flatcc_builder_table_add_offset@@Base+0x8c>
   17d78:	ldr	r0, [pc, #160]	; 17e20 <flatcc_builder_table_add_offset@@Base+0x114>
   17d7c:	add	r0, pc, r0
   17d80:	ldr	r1, [pc, #156]	; 17e24 <flatcc_builder_table_add_offset@@Base+0x118>
   17d84:	add	r1, pc, r1
   17d88:	ldr	r2, [pc, #152]	; 17e28 <flatcc_builder_table_add_offset@@Base+0x11c>
   17d8c:	add	r3, pc, r2
   17d90:	movw	r2, #1812	; 0x714
   17d94:	bl	12448 <__assert_fail@plt>
   17d98:	ldr	r0, [sp, #4]
   17d9c:	ldr	r0, [r0, #4]
   17da0:	ldr	r1, [sp]
   17da4:	add	r0, r0, r1, lsl #1
   17da8:	ldrh	r0, [r0]
   17dac:	cmp	r0, #0
   17db0:	beq	17dd4 <flatcc_builder_table_add_offset@@Base+0xc8>
   17db4:	ldr	r0, [pc, #116]	; 17e30 <flatcc_builder_table_add_offset@@Base+0x124>
   17db8:	add	r0, pc, r0
   17dbc:	ldr	r1, [pc, #112]	; 17e34 <flatcc_builder_table_add_offset@@Base+0x128>
   17dc0:	add	r1, pc, r1
   17dc4:	ldr	r2, [pc, #108]	; 17e38 <flatcc_builder_table_add_offset@@Base+0x12c>
   17dc8:	add	r3, pc, r2
   17dcc:	movw	r2, #1819	; 0x71b
   17dd0:	bl	12448 <__assert_fail@plt>
   17dd4:	ldr	r0, [pc, #80]	; 17e2c <flatcc_builder_table_add_offset@@Base+0x120>
   17dd8:	ldr	r1, [sp]
   17ddc:	ldr	r2, [sp, #4]
   17de0:	ldr	r2, [r2, #12]
   17de4:	eor	r1, r1, r2
   17de8:	mul	r1, r1, r0
   17dec:	eor	r1, r1, #4
   17df0:	mul	r0, r1, r0
   17df4:	ldr	r1, [sp, #4]
   17df8:	str	r0, [r1, #12]
   17dfc:	ldr	r0, [sp, #4]
   17e00:	ldr	r1, [sp]
   17e04:	uxth	r1, r1
   17e08:	bl	18dcc <flatcc_builder_table_add_copy@@Base+0x64>
   17e0c:	mov	sp, fp
   17e10:	pop	{fp, pc}
   17e14:	andeq	r3, r0, sl, lsl #14
   17e18:	ldrdeq	r2, [r0], -r6
   17e1c:	andeq	r3, r0, lr, ror #27
   17e20:	andeq	r3, r0, lr, lsr sp
   17e24:	muleq	r0, r6, lr
   17e28:	andeq	r3, r0, lr, lsr #27
   17e2c:			; <UNDEFINED> instruction: 0x9e3779b1
   17e30:	andeq	r4, r0, pc, lsl r0
   17e34:	andeq	r2, r0, sl, asr lr
   17e38:	andeq	r3, r0, r2, ror sp

00017e3c <flatcc_builder_table_add@@Base>:
   17e3c:	push	{fp, lr}
   17e40:	mov	fp, sp
   17e44:	sub	sp, sp, #16
   17e48:	str	r0, [fp, #-4]
   17e4c:	str	r1, [sp, #8]
   17e50:	str	r2, [sp, #4]
   17e54:	strh	r3, [sp, #2]
   17e58:	ldr	r0, [fp, #-4]
   17e5c:	ldr	r0, [r0, #32]
   17e60:	ldrh	r0, [r0, #14]
   17e64:	cmp	r0, #3
   17e68:	bne	17e70 <flatcc_builder_table_add@@Base+0x34>
   17e6c:	b	17e90 <flatcc_builder_table_add@@Base+0x54>
   17e70:	ldr	r0, [pc, #260]	; 17f7c <flatcc_builder_table_add@@Base+0x140>
   17e74:	add	r0, pc, r0
   17e78:	ldr	r1, [pc, #256]	; 17f80 <flatcc_builder_table_add@@Base+0x144>
   17e7c:	add	r1, pc, r1
   17e80:	ldr	r2, [pc, #252]	; 17f84 <flatcc_builder_table_add@@Base+0x148>
   17e84:	add	r3, pc, r2
   17e88:	movw	r2, #1773	; 0x6ed
   17e8c:	bl	12448 <__assert_fail@plt>
   17e90:	ldr	r0, [sp, #8]
   17e94:	cmp	r0, #0
   17e98:	blt	17eb0 <flatcc_builder_table_add@@Base+0x74>
   17e9c:	ldr	r0, [sp, #8]
   17ea0:	movw	r1, #32764	; 0x7ffc
   17ea4:	cmp	r0, r1
   17ea8:	bgt	17eb0 <flatcc_builder_table_add@@Base+0x74>
   17eac:	b	17ed0 <flatcc_builder_table_add@@Base+0x94>
   17eb0:	ldr	r0, [pc, #208]	; 17f88 <flatcc_builder_table_add@@Base+0x14c>
   17eb4:	add	r0, pc, r0
   17eb8:	ldr	r1, [pc, #204]	; 17f8c <flatcc_builder_table_add@@Base+0x150>
   17ebc:	add	r1, pc, r1
   17ec0:	ldr	r2, [pc, #200]	; 17f90 <flatcc_builder_table_add@@Base+0x154>
   17ec4:	add	r3, pc, r2
   17ec8:	movw	r2, #1774	; 0x6ee
   17ecc:	bl	12448 <__assert_fail@plt>
   17ed0:	ldrh	r0, [sp, #2]
   17ed4:	ldr	r1, [fp, #-4]
   17ed8:	ldrh	r1, [r1, #130]	; 0x82
   17edc:	cmp	r0, r1
   17ee0:	ble	17ef0 <flatcc_builder_table_add@@Base+0xb4>
   17ee4:	ldrh	r0, [sp, #2]
   17ee8:	ldr	r1, [fp, #-4]
   17eec:	strh	r0, [r1, #130]	; 0x82
   17ef0:	ldr	r0, [fp, #-4]
   17ef4:	ldr	r0, [r0, #4]
   17ef8:	ldr	r1, [sp, #8]
   17efc:	add	r0, r0, r1, lsl #1
   17f00:	ldrh	r0, [r0]
   17f04:	cmp	r0, #0
   17f08:	beq	17f2c <flatcc_builder_table_add@@Base+0xf0>
   17f0c:	ldr	r0, [pc, #132]	; 17f98 <flatcc_builder_table_add@@Base+0x15c>
   17f10:	add	r0, pc, r0
   17f14:	ldr	r1, [pc, #128]	; 17f9c <flatcc_builder_table_add@@Base+0x160>
   17f18:	add	r1, pc, r1
   17f1c:	ldr	r2, [pc, #124]	; 17fa0 <flatcc_builder_table_add@@Base+0x164>
   17f20:	add	r3, pc, r2
   17f24:	movw	r2, #1784	; 0x6f8
   17f28:	bl	12448 <__assert_fail@plt>
   17f2c:	ldr	r0, [pc, #96]	; 17f94 <flatcc_builder_table_add@@Base+0x158>
   17f30:	ldr	r1, [sp, #8]
   17f34:	ldr	r2, [fp, #-4]
   17f38:	ldr	r2, [r2, #12]
   17f3c:	eor	r1, r1, r2
   17f40:	mul	r1, r1, r0
   17f44:	ldr	r2, [sp, #4]
   17f48:	eor	r1, r1, r2
   17f4c:	mul	r0, r1, r0
   17f50:	ldr	r1, [fp, #-4]
   17f54:	str	r0, [r1, #12]
   17f58:	ldr	r0, [fp, #-4]
   17f5c:	ldr	r1, [sp, #4]
   17f60:	ldrh	r2, [sp, #2]
   17f64:	ldr	r3, [sp, #8]
   17f68:	uxth	r2, r2
   17f6c:	uxth	r3, r3
   17f70:	bl	18be8 <flatcc_builder_string_len@@Base+0x1c>
   17f74:	mov	sp, fp
   17f78:	pop	{fp, pc}
   17f7c:	ldrdeq	r3, [r0], -r2
   17f80:	muleq	r0, lr, sp
   17f84:	andeq	r3, r0, ip, ror #23
   17f88:	andeq	r3, r0, r6, lsl #24
   17f8c:	andeq	r2, r0, lr, asr sp
   17f90:	andeq	r3, r0, ip, lsr #23
   17f94:			; <UNDEFINED> instruction: 0x9e3779b1
   17f98:	andeq	r3, r0, r7, asr #29
   17f9c:	andeq	r2, r0, r2, lsl #26
   17fa0:	andeq	r3, r0, r0, asr fp
   17fa4:	sub	sp, sp, #4
   17fa8:	strb	r0, [sp, #3]
   17fac:	ldrb	r0, [sp, #3]
   17fb0:	add	sp, sp, #4
   17fb4:	bx	lr

00017fb8 <flatcc_builder_table_add_union_vector@@Base>:
   17fb8:	push	{fp, lr}
   17fbc:	mov	fp, sp
   17fc0:	sub	sp, sp, #24
   17fc4:	str	r2, [sp, #12]
   17fc8:	str	r3, [sp, #16]
   17fcc:	str	r0, [sp, #8]
   17fd0:	str	r1, [sp, #4]
   17fd4:	ldr	r0, [sp, #8]
   17fd8:	ldr	r0, [r0, #32]
   17fdc:	ldrh	r0, [r0, #14]
   17fe0:	cmp	r0, #3
   17fe4:	bne	17fec <flatcc_builder_table_add_union_vector@@Base+0x34>
   17fe8:	b	1800c <flatcc_builder_table_add_union_vector@@Base+0x54>
   17fec:	ldr	r0, [pc, #420]	; 18198 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   17ff0:	add	r0, pc, r0
   17ff4:	ldr	r1, [pc, #416]	; 1819c <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   17ff8:	add	r1, pc, r1
   17ffc:	ldr	r2, [pc, #412]	; 181a0 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18000:	add	r3, pc, r2
   18004:	movw	r2, #1536	; 0x600
   18008:	bl	12448 <__assert_fail@plt>
   1800c:	ldr	r0, [sp, #12]
   18010:	cmp	r0, #0
   18014:	movw	r0, #0
   18018:	moveq	r0, #1
   1801c:	and	r0, r0, #1
   18020:	ldr	r1, [sp, #16]
   18024:	cmp	r1, #0
   18028:	movw	r1, #0
   1802c:	moveq	r1, #1
   18030:	and	r1, r1, #1
   18034:	cmp	r0, r1
   18038:	beq	1809c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1803c:	ldr	r0, [sp, #12]
   18040:	cmp	r0, #0
   18044:	movw	r0, #0
   18048:	moveq	r0, #1
   1804c:	and	r0, r0, #1
   18050:	ldr	r1, [sp, #16]
   18054:	cmp	r1, #0
   18058:	movw	r1, #0
   1805c:	moveq	r1, #1
   18060:	and	r1, r1, #1
   18064:	cmp	r0, r1
   18068:	bne	18070 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   1806c:	b	18090 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18070:	ldr	r0, [pc, #300]	; 181a4 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18074:	add	r0, pc, r0
   18078:	ldr	r1, [pc, #296]	; 181a8 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1807c:	add	r1, pc, r1
   18080:	ldr	r2, [pc, #292]	; 181ac <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   18084:	add	r3, pc, r2
   18088:	movw	r2, #1537	; 0x601
   1808c:	bl	12448 <__assert_fail@plt>
   18090:	mvn	r0, #0
   18094:	str	r0, [fp, #-4]
   18098:	b	1818c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1809c:	ldr	r0, [sp, #12]
   180a0:	cmp	r0, #0
   180a4:	beq	18184 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   180a8:	ldr	r0, [sp, #8]
   180ac:	ldr	r1, [sp, #4]
   180b0:	sub	r1, r1, #1
   180b4:	bl	17d0c <flatcc_builder_table_add_offset@@Base>
   180b8:	str	r0, [sp]
   180bc:	ldr	r0, [sp]
   180c0:	movw	r1, #0
   180c4:	cmp	r0, r1
   180c8:	bne	1810c <flatcc_builder_table_add_union_vector@@Base+0x154>
   180cc:	ldr	r0, [sp]
   180d0:	movw	r1, #0
   180d4:	cmp	r0, r1
   180d8:	beq	180e0 <flatcc_builder_table_add_union_vector@@Base+0x128>
   180dc:	b	18100 <flatcc_builder_table_add_union_vector@@Base+0x148>
   180e0:	ldr	r0, [pc, #200]	; 181b0 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   180e4:	add	r0, pc, r0
   180e8:	ldr	r1, [pc, #196]	; 181b4 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   180ec:	add	r1, pc, r1
   180f0:	ldr	r2, [pc, #192]	; 181b8 <flatcc_builder_table_add_union_vector@@Base+0x200>
   180f4:	add	r3, pc, r2
   180f8:	movw	r2, #1540	; 0x604
   180fc:	bl	12448 <__assert_fail@plt>
   18100:	mvn	r0, #0
   18104:	str	r0, [fp, #-4]
   18108:	b	1818c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1810c:	ldr	r0, [sp, #12]
   18110:	ldr	r1, [sp]
   18114:	str	r0, [r1]
   18118:	ldr	r0, [sp, #8]
   1811c:	ldr	r1, [sp, #4]
   18120:	bl	17d0c <flatcc_builder_table_add_offset@@Base>
   18124:	str	r0, [sp]
   18128:	ldr	r0, [sp]
   1812c:	movw	r1, #0
   18130:	cmp	r0, r1
   18134:	bne	18178 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   18138:	ldr	r0, [sp]
   1813c:	movw	r1, #0
   18140:	cmp	r0, r1
   18144:	beq	1814c <flatcc_builder_table_add_union_vector@@Base+0x194>
   18148:	b	1816c <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   1814c:	ldr	r0, [pc, #104]	; 181bc <flatcc_builder_table_add_union_vector@@Base+0x204>
   18150:	add	r0, pc, r0
   18154:	ldr	r1, [pc, #100]	; 181c0 <flatcc_builder_table_add_union_vector@@Base+0x208>
   18158:	add	r1, pc, r1
   1815c:	ldr	r2, [pc, #96]	; 181c4 <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18160:	add	r3, pc, r2
   18164:	movw	r2, #1544	; 0x608
   18168:	bl	12448 <__assert_fail@plt>
   1816c:	mvn	r0, #0
   18170:	str	r0, [fp, #-4]
   18174:	b	1818c <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18178:	ldr	r0, [sp, #16]
   1817c:	ldr	r1, [sp]
   18180:	str	r0, [r1]
   18184:	movw	r0, #0
   18188:	str	r0, [fp, #-4]
   1818c:	ldr	r0, [fp, #-4]
   18190:	mov	sp, fp
   18194:	pop	{fp, pc}
   18198:	andeq	r3, r0, r6, asr r4
   1819c:	andeq	r2, r0, r2, lsr #24
   181a0:	andeq	r3, r0, r8, asr #15
   181a4:			; <UNDEFINED> instruction: 0x000037b7
   181a8:	muleq	r0, lr, fp
   181ac:	andeq	r3, r0, r4, asr #14
   181b0:	andeq	r3, r0, lr, asr #13
   181b4:	andeq	r2, r0, lr, lsr #22
   181b8:	ldrdeq	r3, [r0], -r4
   181bc:	andeq	r3, r0, r2, ror #12
   181c0:	andeq	r2, r0, r2, asr #21
   181c4:	andeq	r3, r0, r8, ror #12

000181c8 <flatcc_builder_create_union_vector@@Base>:
   181c8:	push	{fp, lr}
   181cc:	mov	fp, sp
   181d0:	sub	sp, sp, #48	; 0x30
   181d4:	str	r1, [fp, #-4]
   181d8:	str	r2, [fp, #-8]
   181dc:	str	r3, [fp, #-12]
   181e0:	mov	r1, r0
   181e4:	str	r0, [sp, #12]
   181e8:	mov	r0, r1
   181ec:	movw	r1, #0
   181f0:	and	r1, r1, #255	; 0xff
   181f4:	movw	r2, #8
   181f8:	bl	12418 <memset@plt>
   181fc:	ldr	r0, [fp, #-4]
   18200:	bl	161f0 <flatcc_builder_start_offset_vector@@Base>
   18204:	cmp	r0, #0
   18208:	beq	18210 <flatcc_builder_create_union_vector@@Base+0x48>
   1820c:	b	182f4 <flatcc_builder_create_union_vector@@Base+0x12c>
   18210:	ldr	r0, [fp, #-4]
   18214:	ldr	r1, [fp, #-12]
   18218:	bl	15984 <flatcc_builder_extend_offset_vector@@Base>
   1821c:	movw	r1, #0
   18220:	cmp	r1, r0
   18224:	bne	1822c <flatcc_builder_create_union_vector@@Base+0x64>
   18228:	b	182f4 <flatcc_builder_create_union_vector@@Base+0x12c>
   1822c:	ldr	r0, [fp, #-4]
   18230:	ldr	r1, [fp, #-12]
   18234:	mov	r2, r1
   18238:	str	r2, [sp, #8]
   1823c:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   18240:	str	r0, [fp, #-16]
   18244:	movw	r1, #0
   18248:	cmp	r1, r0
   1824c:	bne	18254 <flatcc_builder_create_union_vector@@Base+0x8c>
   18250:	b	182f4 <flatcc_builder_create_union_vector@@Base+0x12c>
   18254:	ldr	r0, [fp, #-4]
   18258:	bl	17ae8 <flatcc_builder_offset_vector_edit@@Base>
   1825c:	str	r0, [fp, #-20]	; 0xffffffec
   18260:	movw	r0, #0
   18264:	str	r0, [sp, #24]
   18268:	ldr	r0, [sp, #24]
   1826c:	ldr	r1, [fp, #-12]
   18270:	cmp	r0, r1
   18274:	bcs	182b8 <flatcc_builder_create_union_vector@@Base+0xf0>
   18278:	ldr	r0, [fp, #-8]
   1827c:	ldr	r1, [sp, #24]
   18280:	ldrb	r0, [r0, r1, lsl #3]
   18284:	ldr	r2, [fp, #-16]
   18288:	strb	r0, [r2, r1]
   1828c:	ldr	r0, [fp, #-8]
   18290:	ldr	r1, [sp, #24]
   18294:	add	r0, r0, r1, lsl #3
   18298:	ldr	r0, [r0, #4]
   1829c:	ldr	r2, [fp, #-20]	; 0xffffffec
   182a0:	add	r1, r2, r1, lsl #2
   182a4:	str	r0, [r1]
   182a8:	ldr	r0, [sp, #24]
   182ac:	add	r0, r0, #1
   182b0:	str	r0, [sp, #24]
   182b4:	b	18268 <flatcc_builder_create_union_vector@@Base+0xa0>
   182b8:	ldr	r1, [fp, #-4]
   182bc:	ldr	r2, [fp, #-16]
   182c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   182c4:	ldr	r0, [fp, #-12]
   182c8:	mov	ip, sp
   182cc:	str	r0, [ip]
   182d0:	add	r0, sp, #16
   182d4:	bl	182fc <flatcc_builder_create_union_vector_direct@@Base>
   182d8:	ldr	r0, [sp, #16]
   182dc:	ldr	r1, [sp, #12]
   182e0:	str	r0, [r1]
   182e4:	ldr	r0, [sp, #20]
   182e8:	str	r0, [r1, #4]
   182ec:	ldr	r0, [fp, #-4]
   182f0:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   182f4:	mov	sp, fp
   182f8:	pop	{fp, pc}

000182fc <flatcc_builder_create_union_vector_direct@@Base>:
   182fc:	push	{fp, lr}
   18300:	mov	fp, sp
   18304:	sub	sp, sp, #32
   18308:	ldr	ip, [fp, #8]
   1830c:	str	r1, [fp, #-4]
   18310:	str	r2, [fp, #-8]
   18314:	str	r3, [fp, #-12]
   18318:	mov	r1, r0
   1831c:	str	r0, [sp, #16]
   18320:	mov	r0, r1
   18324:	movw	r1, #0
   18328:	and	r1, r1, #255	; 0xff
   1832c:	movw	r2, #8
   18330:	str	ip, [sp, #12]
   18334:	bl	12418 <memset@plt>
   18338:	ldr	r0, [fp, #-4]
   1833c:	ldr	r1, [fp, #-12]
   18340:	ldr	r2, [fp, #8]
   18344:	ldr	r3, [fp, #-8]
   18348:	bl	17740 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   1834c:	ldr	r1, [sp, #16]
   18350:	str	r0, [r1, #4]
   18354:	movw	r2, #0
   18358:	cmp	r2, r0
   1835c:	bne	18364 <flatcc_builder_create_union_vector_direct@@Base+0x68>
   18360:	b	183a8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18364:	ldr	r0, [fp, #-4]
   18368:	ldr	r1, [fp, #-8]
   1836c:	ldr	r2, [fp, #8]
   18370:	movw	r3, #1
   18374:	movw	ip, #1
   18378:	uxth	ip, ip
   1837c:	str	ip, [sp]
   18380:	mvn	ip, #0
   18384:	str	ip, [sp, #4]
   18388:	bl	17430 <flatcc_builder_create_vector@@Base>
   1838c:	ldr	r1, [sp, #16]
   18390:	str	r0, [r1]
   18394:	movw	r2, #0
   18398:	cmp	r2, r0
   1839c:	bne	183a4 <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   183a0:	b	183a8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   183a4:	b	183a8 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   183a8:	mov	sp, fp
   183ac:	pop	{fp, pc}

000183b0 <flatcc_builder_start_union_vector@@Base>:
   183b0:	push	{fp, lr}
   183b4:	mov	fp, sp
   183b8:	sub	sp, sp, #8
   183bc:	str	r0, [sp]
   183c0:	ldr	r0, [sp]
   183c4:	movw	r1, #4
   183c8:	uxth	r1, r1
   183cc:	bl	14fc8 <flatcc_builder_start_buffer@@Base+0x178>
   183d0:	cmp	r0, #0
   183d4:	beq	183e4 <flatcc_builder_start_union_vector@@Base+0x34>
   183d8:	mvn	r0, #0
   183dc:	str	r0, [sp, #4]
   183e0:	b	18428 <flatcc_builder_start_union_vector@@Base+0x78>
   183e4:	ldr	r0, [sp]
   183e8:	ldr	r0, [r0, #32]
   183ec:	movw	r1, #8
   183f0:	str	r1, [r0, #16]
   183f4:	ldr	r0, [sp]
   183f8:	ldr	r0, [r0, #32]
   183fc:	movw	r1, #0
   18400:	str	r1, [r0, #20]
   18404:	ldr	r0, [sp]
   18408:	ldr	r0, [r0, #32]
   1840c:	movw	r1, #7
   18410:	strh	r1, [r0, #14]
   18414:	ldr	r0, [sp]
   18418:	mvn	r1, #3
   1841c:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   18420:	movw	r0, #0
   18424:	str	r0, [sp, #4]
   18428:	ldr	r0, [sp, #4]
   1842c:	mov	sp, fp
   18430:	pop	{fp, pc}

00018434 <flatcc_builder_end_union_vector@@Base>:
   18434:	push	{fp, lr}
   18438:	mov	fp, sp
   1843c:	sub	sp, sp, #40	; 0x28
   18440:	str	r1, [fp, #-4]
   18444:	mov	r1, r0
   18448:	str	r0, [sp, #4]
   1844c:	mov	r0, r1
   18450:	movw	r1, #0
   18454:	and	r1, r1, #255	; 0xff
   18458:	movw	r2, #8
   1845c:	bl	12418 <memset@plt>
   18460:	ldr	r0, [fp, #-4]
   18464:	ldr	r0, [r0, #32]
   18468:	ldrh	r0, [r0, #14]
   1846c:	cmp	r0, #7
   18470:	bne	18478 <flatcc_builder_end_union_vector@@Base+0x44>
   18474:	b	18498 <flatcc_builder_end_union_vector@@Base+0x64>
   18478:	ldr	r0, [pc, #260]	; 18584 <flatcc_builder_end_union_vector@@Base+0x150>
   1847c:	add	r0, pc, r0
   18480:	ldr	r1, [pc, #256]	; 18588 <flatcc_builder_end_union_vector@@Base+0x154>
   18484:	add	r1, pc, r1
   18488:	ldr	r2, [pc, #252]	; 1858c <flatcc_builder_end_union_vector@@Base+0x158>
   1848c:	add	r3, pc, r2
   18490:	movw	r2, #1617	; 0x651
   18494:	bl	12448 <__assert_fail@plt>
   18498:	ldr	r0, [fp, #-4]
   1849c:	bl	18590 <flatcc_builder_union_vector_count@@Base>
   184a0:	str	r0, [sp, #16]
   184a4:	ldr	r0, [fp, #-4]
   184a8:	ldr	lr, [sp, #16]
   184ac:	movw	r1, #5
   184b0:	mul	r1, lr, r1
   184b4:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   184b8:	str	r0, [fp, #-16]
   184bc:	movw	r1, #0
   184c0:	cmp	r1, r0
   184c4:	bne	184cc <flatcc_builder_end_union_vector@@Base+0x98>
   184c8:	b	1857c <flatcc_builder_end_union_vector@@Base+0x148>
   184cc:	ldr	r0, [fp, #-16]
   184d0:	ldr	r1, [sp, #16]
   184d4:	add	r0, r0, r1, lsl #2
   184d8:	str	r0, [fp, #-8]
   184dc:	ldr	r0, [fp, #-4]
   184e0:	bl	185ac <flatcc_builder_union_vector_edit@@Base>
   184e4:	str	r0, [fp, #-12]
   184e8:	movw	r0, #0
   184ec:	str	r0, [sp, #20]
   184f0:	ldr	r0, [sp, #20]
   184f4:	ldr	r1, [sp, #16]
   184f8:	cmp	r0, r1
   184fc:	bcs	18540 <flatcc_builder_end_union_vector@@Base+0x10c>
   18500:	ldr	r0, [fp, #-12]
   18504:	ldr	r1, [sp, #20]
   18508:	ldrb	r0, [r0, r1, lsl #3]
   1850c:	ldr	r2, [fp, #-8]
   18510:	strb	r0, [r2, r1]
   18514:	ldr	r0, [fp, #-12]
   18518:	ldr	r1, [sp, #20]
   1851c:	add	r0, r0, r1, lsl #3
   18520:	ldr	r0, [r0, #4]
   18524:	ldr	r2, [fp, #-16]
   18528:	add	r1, r2, r1, lsl #2
   1852c:	str	r0, [r1]
   18530:	ldr	r0, [sp, #20]
   18534:	add	r0, r0, #1
   18538:	str	r0, [sp, #20]
   1853c:	b	184f0 <flatcc_builder_end_union_vector@@Base+0xbc>
   18540:	ldr	r1, [fp, #-4]
   18544:	ldr	r2, [fp, #-8]
   18548:	ldr	r3, [fp, #-16]
   1854c:	ldr	r0, [sp, #16]
   18550:	mov	ip, sp
   18554:	str	r0, [ip]
   18558:	add	r0, sp, #8
   1855c:	bl	182fc <flatcc_builder_create_union_vector_direct@@Base>
   18560:	ldr	r0, [sp, #8]
   18564:	ldr	r1, [sp, #4]
   18568:	str	r0, [r1]
   1856c:	ldr	r0, [sp, #12]
   18570:	str	r0, [r1, #4]
   18574:	ldr	r0, [fp, #-4]
   18578:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   1857c:	mov	sp, fp
   18580:	pop	{fp, pc}
   18584:	ldrdeq	r3, [r0], -r7
   18588:	muleq	r0, r6, r7
   1858c:	strdeq	r3, [r0], -r9

00018590 <flatcc_builder_union_vector_count@@Base>:
   18590:	sub	sp, sp, #4
   18594:	str	r0, [sp]
   18598:	ldr	r0, [sp]
   1859c:	ldr	r0, [r0, #32]
   185a0:	ldr	r0, [r0, #20]
   185a4:	add	sp, sp, #4
   185a8:	bx	lr

000185ac <flatcc_builder_union_vector_edit@@Base>:
   185ac:	sub	sp, sp, #4
   185b0:	str	r0, [sp]
   185b4:	ldr	r0, [sp]
   185b8:	ldr	r0, [r0, #16]
   185bc:	add	sp, sp, #4
   185c0:	bx	lr

000185c4 <flatcc_builder_extend_union_vector@@Base>:
   185c4:	push	{fp, lr}
   185c8:	mov	fp, sp
   185cc:	sub	sp, sp, #16
   185d0:	ldr	r2, [pc, #68]	; 1861c <flatcc_builder_extend_union_vector@@Base+0x58>
   185d4:	str	r0, [sp, #8]
   185d8:	str	r1, [sp, #4]
   185dc:	ldr	r0, [sp, #8]
   185e0:	ldr	r1, [sp, #4]
   185e4:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   185e8:	cmp	r0, #0
   185ec:	beq	185fc <flatcc_builder_extend_union_vector@@Base+0x38>
   185f0:	movw	r0, #0
   185f4:	str	r0, [fp, #-4]
   185f8:	b	18610 <flatcc_builder_extend_union_vector@@Base+0x4c>
   185fc:	ldr	r0, [sp, #8]
   18600:	ldr	r1, [sp, #4]
   18604:	lsl	r1, r1, #3
   18608:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   1860c:	str	r0, [fp, #-4]
   18610:	ldr	r0, [fp, #-4]
   18614:	mov	sp, fp
   18618:	pop	{fp, pc}
   1861c:	svcne	0x00ffffff

00018620 <flatcc_builder_truncate_union_vector@@Base>:
   18620:	push	{fp, lr}
   18624:	mov	fp, sp
   18628:	sub	sp, sp, #16
   1862c:	str	r0, [sp, #8]
   18630:	str	r1, [sp, #4]
   18634:	ldr	r0, [sp, #8]
   18638:	ldr	r0, [r0, #32]
   1863c:	ldrh	r0, [r0, #14]
   18640:	cmp	r0, #7
   18644:	bne	1864c <flatcc_builder_truncate_union_vector@@Base+0x2c>
   18648:	b	1866c <flatcc_builder_truncate_union_vector@@Base+0x4c>
   1864c:	ldr	r0, [pc, #192]	; 18714 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18650:	add	r0, pc, r0
   18654:	ldr	r1, [pc, #188]	; 18718 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18658:	add	r1, pc, r1
   1865c:	ldr	r2, [pc, #184]	; 1871c <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18660:	add	r3, pc, r2
   18664:	movw	r2, #1665	; 0x681
   18668:	bl	12448 <__assert_fail@plt>
   1866c:	ldr	r0, [sp, #8]
   18670:	ldr	r0, [r0, #32]
   18674:	ldr	r0, [r0, #20]
   18678:	ldr	r1, [sp, #4]
   1867c:	cmp	r0, r1
   18680:	bcs	186cc <flatcc_builder_truncate_union_vector@@Base+0xac>
   18684:	ldr	r0, [sp, #8]
   18688:	ldr	r0, [r0, #32]
   1868c:	ldr	r0, [r0, #20]
   18690:	ldr	r1, [sp, #4]
   18694:	cmp	r0, r1
   18698:	bcc	186a0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   1869c:	b	186c0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   186a0:	ldr	r0, [pc, #120]	; 18720 <flatcc_builder_truncate_union_vector@@Base+0x100>
   186a4:	add	r0, pc, r0
   186a8:	ldr	r1, [pc, #116]	; 18724 <flatcc_builder_truncate_union_vector@@Base+0x104>
   186ac:	add	r1, pc, r1
   186b0:	ldr	r2, [pc, #112]	; 18728 <flatcc_builder_truncate_union_vector@@Base+0x108>
   186b4:	add	r3, pc, r2
   186b8:	movw	r2, #1666	; 0x682
   186bc:	bl	12448 <__assert_fail@plt>
   186c0:	mvn	r0, #0
   186c4:	str	r0, [fp, #-4]
   186c8:	b	18708 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   186cc:	ldr	r0, [sp, #4]
   186d0:	ldr	r1, [sp, #8]
   186d4:	ldr	r1, [r1, #32]
   186d8:	ldr	r2, [r1, #20]
   186dc:	sub	r0, r2, r0
   186e0:	str	r0, [r1, #20]
   186e4:	ldr	r0, [sp, #8]
   186e8:	ldr	r1, [sp, #8]
   186ec:	ldr	r1, [r1, #32]
   186f0:	ldr	r1, [r1, #16]
   186f4:	ldr	r2, [sp, #4]
   186f8:	mul	r1, r1, r2
   186fc:	bl	15eb4 <flatcc_builder_truncate_vector@@Base+0x10c>
   18700:	movw	r0, #0
   18704:	str	r0, [fp, #-4]
   18708:	ldr	r0, [fp, #-4]
   1870c:	mov	sp, fp
   18710:	pop	{fp, pc}
   18714:	andeq	r3, r0, r3, lsl #4
   18718:	andeq	r2, r0, r2, asr #11
   1871c:	andeq	r3, r0, r8, ror r2
   18720:	andeq	r2, r0, r3, lsl ip
   18724:	andeq	r2, r0, lr, ror #10
   18728:	andeq	r3, r0, r4, lsr #4

0001872c <flatcc_builder_union_vector_push@@Base>:
   1872c:	push	{fp, lr}
   18730:	mov	fp, sp
   18734:	sub	sp, sp, #24
   18738:	str	r1, [sp, #12]
   1873c:	str	r2, [sp, #16]
   18740:	str	r0, [sp, #8]
   18744:	ldr	r0, [sp, #8]
   18748:	ldr	r0, [r0, #32]
   1874c:	ldrh	r0, [r0, #14]
   18750:	cmp	r0, #7
   18754:	bne	1875c <flatcc_builder_union_vector_push@@Base+0x30>
   18758:	b	1877c <flatcc_builder_union_vector_push@@Base+0x50>
   1875c:	ldr	r0, [pc, #160]	; 18804 <flatcc_builder_union_vector_push@@Base+0xd8>
   18760:	add	r0, pc, r0
   18764:	ldr	r1, [pc, #156]	; 18808 <flatcc_builder_union_vector_push@@Base+0xdc>
   18768:	add	r1, pc, r1
   1876c:	ldr	r2, [pc, #152]	; 1880c <flatcc_builder_union_vector_push@@Base+0xe0>
   18770:	add	r3, pc, r2
   18774:	movw	r2, #1677	; 0x68d
   18778:	bl	12448 <__assert_fail@plt>
   1877c:	ldr	r0, [pc, #140]	; 18810 <flatcc_builder_union_vector_push@@Base+0xe4>
   18780:	ldr	r1, [sp, #8]
   18784:	ldr	r1, [r1, #32]
   18788:	ldr	r1, [r1, #20]
   1878c:	cmp	r1, r0
   18790:	bne	187a0 <flatcc_builder_union_vector_push@@Base+0x74>
   18794:	movw	r0, #0
   18798:	str	r0, [fp, #-4]
   1879c:	b	187f8 <flatcc_builder_union_vector_push@@Base+0xcc>
   187a0:	ldr	r0, [sp, #8]
   187a4:	ldr	r0, [r0, #32]
   187a8:	ldr	r1, [r0, #20]
   187ac:	add	r1, r1, #1
   187b0:	str	r1, [r0, #20]
   187b4:	ldr	r0, [sp, #8]
   187b8:	movw	r1, #8
   187bc:	bl	154bc <flatcc_builder_start_struct@@Base+0xfc>
   187c0:	str	r0, [sp, #4]
   187c4:	movw	r1, #0
   187c8:	cmp	r1, r0
   187cc:	bne	187dc <flatcc_builder_union_vector_push@@Base+0xb0>
   187d0:	movw	r0, #0
   187d4:	str	r0, [fp, #-4]
   187d8:	b	187f8 <flatcc_builder_union_vector_push@@Base+0xcc>
   187dc:	ldr	r0, [sp, #4]
   187e0:	ldr	r1, [sp, #12]
   187e4:	str	r1, [r0]
   187e8:	ldr	r1, [sp, #16]
   187ec:	str	r1, [r0, #4]
   187f0:	ldr	r0, [sp, #4]
   187f4:	str	r0, [fp, #-4]
   187f8:	ldr	r0, [fp, #-4]
   187fc:	mov	sp, fp
   18800:	pop	{fp, pc}
   18804:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   18808:			; <UNDEFINED> instruction: 0x000024b2
   1880c:	andeq	r3, r0, sp, lsr #3
   18810:	svcne	0x00ffffff

00018814 <flatcc_builder_append_union_vector@@Base>:
   18814:	push	{fp, lr}
   18818:	mov	fp, sp
   1881c:	sub	sp, sp, #16
   18820:	str	r0, [sp, #8]
   18824:	str	r1, [sp, #4]
   18828:	str	r2, [sp]
   1882c:	ldr	r0, [sp, #8]
   18830:	ldr	r0, [r0, #32]
   18834:	ldrh	r0, [r0, #14]
   18838:	cmp	r0, #7
   1883c:	bne	18844 <flatcc_builder_append_union_vector@@Base+0x30>
   18840:	b	18864 <flatcc_builder_append_union_vector@@Base+0x50>
   18844:	ldr	r0, [pc, #96]	; 188ac <flatcc_builder_append_union_vector@@Base+0x98>
   18848:	add	r0, pc, r0
   1884c:	ldr	r1, [pc, #92]	; 188b0 <flatcc_builder_append_union_vector@@Base+0x9c>
   18850:	add	r1, pc, r1
   18854:	ldr	r2, [pc, #88]	; 188b4 <flatcc_builder_append_union_vector@@Base+0xa0>
   18858:	add	r3, pc, r2
   1885c:	movw	r2, #1692	; 0x69c
   18860:	bl	12448 <__assert_fail@plt>
   18864:	ldr	r2, [pc, #76]	; 188b8 <flatcc_builder_append_union_vector@@Base+0xa4>
   18868:	ldr	r0, [sp, #8]
   1886c:	ldr	r1, [sp]
   18870:	bl	15680 <flatcc_builder_extend_vector@@Base+0x6c>
   18874:	cmp	r0, #0
   18878:	beq	18888 <flatcc_builder_append_union_vector@@Base+0x74>
   1887c:	movw	r0, #0
   18880:	str	r0, [fp, #-4]
   18884:	b	188a0 <flatcc_builder_append_union_vector@@Base+0x8c>
   18888:	ldr	r0, [sp, #8]
   1888c:	ldr	r1, [sp, #4]
   18890:	ldr	r2, [sp]
   18894:	lsl	r2, r2, #3
   18898:	bl	15868 <flatcc_builder_vector_push@@Base+0x110>
   1889c:	str	r0, [fp, #-4]
   188a0:	ldr	r0, [fp, #-4]
   188a4:	mov	sp, fp
   188a8:	pop	{fp, pc}
   188ac:	andeq	r3, r0, fp
   188b0:	andeq	r2, r0, sl, asr #7
   188b4:	andeq	r3, r0, r2, lsr r1
   188b8:	svcne	0x00ffffff

000188bc <flatcc_builder_create_string@@Base>:
   188bc:	push	{fp, lr}
   188c0:	mov	fp, sp
   188c4:	sub	sp, sp, #96	; 0x60
   188c8:	str	r0, [fp, #-8]
   188cc:	str	r1, [fp, #-12]
   188d0:	str	r2, [fp, #-16]
   188d4:	ldr	r0, [fp, #-16]
   188d8:	cmn	r0, #1
   188dc:	bls	188ec <flatcc_builder_create_string@@Base+0x30>
   188e0:	movw	r0, #0
   188e4:	str	r0, [fp, #-4]
   188e8:	b	18a08 <flatcc_builder_create_string@@Base+0x14c>
   188ec:	ldr	r0, [fp, #-16]
   188f0:	bl	147f0 <flatcc_builder_embed_buffer@@Base+0x388>
   188f4:	str	r0, [fp, #-24]	; 0xffffffe8
   188f8:	ldr	r0, [fp, #-8]
   188fc:	ldr	lr, [fp, #-16]
   18900:	add	r1, lr, #1
   18904:	mov	r2, #4
   18908:	bl	147bc <flatcc_builder_embed_buffer@@Base+0x354>
   1890c:	add	r0, r0, #1
   18910:	str	r0, [fp, #-20]	; 0xffffffec
   18914:	mov	r0, #0
   18918:	str	r0, [sp]
   1891c:	str	r0, [sp, #4]
   18920:	ldr	r0, [sp]
   18924:	add	r0, r0, #4
   18928:	str	r0, [sp]
   1892c:	mov	r0, sp
   18930:	add	r0, r0, #8
   18934:	ldr	r1, [sp, #4]
   18938:	sub	r2, fp, #24
   1893c:	str	r2, [r0, r1, lsl #3]
   18940:	ldr	r1, [sp, #4]
   18944:	add	r0, r0, r1, lsl #3
   18948:	movw	r1, #4
   1894c:	str	r1, [r0, #4]
   18950:	ldr	r0, [sp, #4]
   18954:	add	r0, r0, #1
   18958:	str	r0, [sp, #4]
   1895c:	ldr	r0, [fp, #-16]
   18960:	cmp	r0, #0
   18964:	bls	189a8 <flatcc_builder_create_string@@Base+0xec>
   18968:	ldr	r0, [fp, #-16]
   1896c:	ldr	r1, [sp]
   18970:	add	r0, r1, r0
   18974:	str	r0, [sp]
   18978:	ldr	r0, [fp, #-12]
   1897c:	mov	r1, sp
   18980:	add	r1, r1, #8
   18984:	ldr	r2, [sp, #4]
   18988:	str	r0, [r1, r2, lsl #3]
   1898c:	ldr	r0, [fp, #-16]
   18990:	ldr	r2, [sp, #4]
   18994:	add	r1, r1, r2, lsl #3
   18998:	str	r0, [r1, #4]
   1899c:	ldr	r0, [sp, #4]
   189a0:	add	r0, r0, #1
   189a4:	str	r0, [sp, #4]
   189a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   189ac:	cmp	r0, #0
   189b0:	bls	189f8 <flatcc_builder_create_string@@Base+0x13c>
   189b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   189b8:	ldr	r1, [sp]
   189bc:	add	r0, r1, r0
   189c0:	str	r0, [sp]
   189c4:	mov	r0, sp
   189c8:	add	r0, r0, #8
   189cc:	ldr	r1, [sp, #4]
   189d0:	ldr	r2, [pc, #60]	; 18a14 <flatcc_builder_create_string@@Base+0x158>
   189d4:	ldr	r2, [pc, r2]
   189d8:	str	r2, [r0, r1, lsl #3]
   189dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   189e0:	ldr	r2, [sp, #4]
   189e4:	add	r0, r0, r2, lsl #3
   189e8:	str	r1, [r0, #4]
   189ec:	ldr	r0, [sp, #4]
   189f0:	add	r0, r0, #1
   189f4:	str	r0, [sp, #4]
   189f8:	ldr	r0, [fp, #-8]
   189fc:	mov	r1, sp
   18a00:	bl	14804 <flatcc_builder_embed_buffer@@Base+0x39c>
   18a04:	str	r0, [fp, #-4]
   18a08:	ldr	r0, [fp, #-4]
   18a0c:	mov	sp, fp
   18a10:	pop	{fp, pc}
   18a14:	andeq	r3, r1, r0, ror r6

00018a18 <flatcc_builder_create_string_str@@Base>:
   18a18:	push	{fp, lr}
   18a1c:	mov	fp, sp
   18a20:	sub	sp, sp, #24
   18a24:	str	r0, [fp, #-4]
   18a28:	str	r1, [fp, #-8]
   18a2c:	ldr	r0, [fp, #-4]
   18a30:	ldr	r1, [fp, #-8]
   18a34:	ldr	r2, [fp, #-8]
   18a38:	str	r0, [sp, #12]
   18a3c:	mov	r0, r2
   18a40:	str	r1, [sp, #8]
   18a44:	bl	123f4 <strlen@plt>
   18a48:	ldr	r1, [sp, #12]
   18a4c:	str	r0, [sp, #4]
   18a50:	mov	r0, r1
   18a54:	ldr	r1, [sp, #8]
   18a58:	ldr	r2, [sp, #4]
   18a5c:	bl	188bc <flatcc_builder_create_string@@Base>
   18a60:	mov	sp, fp
   18a64:	pop	{fp, pc}

00018a68 <flatcc_builder_create_string_strn@@Base>:
   18a68:	push	{fp, lr}
   18a6c:	mov	fp, sp
   18a70:	sub	sp, sp, #24
   18a74:	str	r0, [fp, #-4]
   18a78:	str	r1, [fp, #-8]
   18a7c:	str	r2, [sp, #12]
   18a80:	ldr	r0, [fp, #-4]
   18a84:	ldr	r1, [fp, #-8]
   18a88:	ldr	r2, [fp, #-8]
   18a8c:	ldr	r3, [sp, #12]
   18a90:	str	r0, [sp, #8]
   18a94:	mov	r0, r2
   18a98:	str	r1, [sp, #4]
   18a9c:	mov	r1, r3
   18aa0:	bl	15d48 <flatcc_builder_append_string_strn@@Base+0x5c>
   18aa4:	ldr	r1, [sp, #8]
   18aa8:	str	r0, [sp]
   18aac:	mov	r0, r1
   18ab0:	ldr	r1, [sp, #4]
   18ab4:	ldr	r2, [sp]
   18ab8:	bl	188bc <flatcc_builder_create_string@@Base>
   18abc:	mov	sp, fp
   18ac0:	pop	{fp, pc}

00018ac4 <flatcc_builder_end_string@@Base>:
   18ac4:	push	{fp, lr}
   18ac8:	mov	fp, sp
   18acc:	sub	sp, sp, #16
   18ad0:	str	r0, [sp, #8]
   18ad4:	ldr	r0, [sp, #8]
   18ad8:	ldr	r0, [r0, #32]
   18adc:	ldrh	r0, [r0, #14]
   18ae0:	cmp	r0, #6
   18ae4:	bne	18aec <flatcc_builder_end_string@@Base+0x28>
   18ae8:	b	18b0c <flatcc_builder_end_string@@Base+0x48>
   18aec:	ldr	r0, [pc, #168]	; 18b9c <flatcc_builder_end_string@@Base+0xd8>
   18af0:	add	r0, pc, r0
   18af4:	ldr	r1, [pc, #164]	; 18ba0 <flatcc_builder_end_string@@Base+0xdc>
   18af8:	add	r1, pc, r1
   18afc:	ldr	r2, [pc, #160]	; 18ba4 <flatcc_builder_end_string@@Base+0xe0>
   18b00:	add	r3, pc, r2
   18b04:	movw	r2, #1732	; 0x6c4
   18b08:	bl	12448 <__assert_fail@plt>
   18b0c:	ldr	r0, [sp, #8]
   18b10:	ldr	r0, [r0, #32]
   18b14:	ldr	r0, [r0, #20]
   18b18:	ldr	r1, [sp, #8]
   18b1c:	ldr	r1, [r1, #20]
   18b20:	cmp	r0, r1
   18b24:	bne	18b2c <flatcc_builder_end_string@@Base+0x68>
   18b28:	b	18b4c <flatcc_builder_end_string@@Base+0x88>
   18b2c:	ldr	r0, [pc, #116]	; 18ba8 <flatcc_builder_end_string@@Base+0xe4>
   18b30:	add	r0, pc, r0
   18b34:	ldr	r1, [pc, #112]	; 18bac <flatcc_builder_end_string@@Base+0xe8>
   18b38:	add	r1, pc, r1
   18b3c:	ldr	r2, [pc, #108]	; 18bb0 <flatcc_builder_end_string@@Base+0xec>
   18b40:	add	r3, pc, r2
   18b44:	movw	r2, #1733	; 0x6c5
   18b48:	bl	12448 <__assert_fail@plt>
   18b4c:	ldr	r0, [sp, #8]
   18b50:	ldr	r1, [sp, #8]
   18b54:	ldr	r1, [r1, #16]
   18b58:	ldr	r2, [sp, #8]
   18b5c:	ldr	r2, [r2, #20]
   18b60:	bl	188bc <flatcc_builder_create_string@@Base>
   18b64:	str	r0, [sp, #4]
   18b68:	movw	r1, #0
   18b6c:	cmp	r1, r0
   18b70:	bne	18b80 <flatcc_builder_end_string@@Base+0xbc>
   18b74:	movw	r0, #0
   18b78:	str	r0, [fp, #-4]
   18b7c:	b	18b90 <flatcc_builder_end_string@@Base+0xcc>
   18b80:	ldr	r0, [sp, #8]
   18b84:	bl	15304 <flatcc_builder_end_buffer@@Base+0x170>
   18b88:	ldr	r0, [sp, #4]
   18b8c:	str	r0, [fp, #-4]
   18b90:	ldr	r0, [fp, #-4]
   18b94:	mov	sp, fp
   18b98:	pop	{fp, pc}
   18b9c:	andeq	r2, r0, r6, ror #12
   18ba0:	andeq	r2, r0, r2, lsr #2
   18ba4:	andeq	r2, r0, r9, lsl #30
   18ba8:	andeq	r2, r0, ip, lsl pc
   18bac:	andeq	r2, r0, r2, ror #1
   18bb0:	andeq	r2, r0, r9, asr #29

00018bb4 <flatcc_builder_string_edit@@Base>:
   18bb4:	sub	sp, sp, #4
   18bb8:	str	r0, [sp]
   18bbc:	ldr	r0, [sp]
   18bc0:	ldr	r0, [r0, #16]
   18bc4:	add	sp, sp, #4
   18bc8:	bx	lr

00018bcc <flatcc_builder_string_len@@Base>:
   18bcc:	sub	sp, sp, #4
   18bd0:	str	r0, [sp]
   18bd4:	ldr	r0, [sp]
   18bd8:	ldr	r0, [r0, #32]
   18bdc:	ldr	r0, [r0, #20]
   18be0:	add	sp, sp, #4
   18be4:	bx	lr
   18be8:	push	{fp, lr}
   18bec:	mov	fp, sp
   18bf0:	sub	sp, sp, #24
   18bf4:	str	r0, [fp, #-8]
   18bf8:	str	r1, [sp, #12]
   18bfc:	strh	r2, [sp, #10]
   18c00:	strh	r3, [sp, #8]
   18c04:	ldr	r0, [fp, #-8]
   18c08:	ldr	r0, [r0, #20]
   18c0c:	ldrh	r1, [sp, #10]
   18c10:	add	r0, r0, r1
   18c14:	sub	r0, r0, #1
   18c18:	ldrh	r1, [sp, #10]
   18c1c:	sub	r1, r1, #1
   18c20:	mvn	r2, #0
   18c24:	eor	r1, r1, r2
   18c28:	and	r0, r0, r1
   18c2c:	str	r0, [sp, #4]
   18c30:	ldr	r0, [sp, #4]
   18c34:	ldr	r1, [sp, #12]
   18c38:	add	r0, r0, r1
   18c3c:	ldr	r1, [fp, #-8]
   18c40:	str	r0, [r1, #20]
   18c44:	ldr	r1, [fp, #-8]
   18c48:	ldr	r1, [r1, #24]
   18c4c:	cmp	r0, r1
   18c50:	bcc	18c84 <flatcc_builder_string_len@@Base+0xb8>
   18c54:	ldr	r0, [fp, #-8]
   18c58:	ldr	r1, [fp, #-8]
   18c5c:	ldr	r1, [r1, #20]
   18c60:	add	r1, r1, #1
   18c64:	movw	r2, #65532	; 0xfffc
   18c68:	bl	1962c <flatcc_builder_get_emit_context@@Base+0x40>
   18c6c:	cmp	r0, #0
   18c70:	beq	18c80 <flatcc_builder_string_len@@Base+0xb4>
   18c74:	movw	r0, #0
   18c78:	str	r0, [fp, #-4]
   18c7c:	b	18cd8 <flatcc_builder_string_len@@Base+0x10c>
   18c80:	b	18c84 <flatcc_builder_string_len@@Base+0xb8>
   18c84:	ldr	r0, [sp, #4]
   18c88:	add	r0, r0, #4
   18c8c:	ldr	r1, [fp, #-8]
   18c90:	ldr	r1, [r1, #4]
   18c94:	ldrh	r2, [sp, #8]
   18c98:	add	r1, r1, r2, lsl #1
   18c9c:	strh	r0, [r1]
   18ca0:	ldrh	r0, [sp, #8]
   18ca4:	ldr	r1, [fp, #-8]
   18ca8:	ldrh	r1, [r1, #8]
   18cac:	cmp	r0, r1
   18cb0:	blt	18cc4 <flatcc_builder_string_len@@Base+0xf8>
   18cb4:	ldrh	r0, [sp, #8]
   18cb8:	add	r0, r0, #1
   18cbc:	ldr	r1, [fp, #-8]
   18cc0:	strh	r0, [r1, #8]
   18cc4:	ldr	r0, [fp, #-8]
   18cc8:	ldr	r0, [r0, #16]
   18ccc:	ldr	r1, [sp, #4]
   18cd0:	add	r0, r0, r1
   18cd4:	str	r0, [fp, #-4]
   18cd8:	ldr	r0, [fp, #-4]
   18cdc:	mov	sp, fp
   18ce0:	pop	{fp, pc}

00018ce4 <flatcc_builder_table_edit@@Base>:
   18ce4:	push	{fp, lr}
   18ce8:	mov	fp, sp
   18cec:	sub	sp, sp, #8
   18cf0:	str	r0, [sp, #4]
   18cf4:	str	r1, [sp]
   18cf8:	ldr	r0, [sp, #4]
   18cfc:	ldr	r0, [r0, #32]
   18d00:	ldrh	r0, [r0, #14]
   18d04:	cmp	r0, #3
   18d08:	bne	18d10 <flatcc_builder_table_edit@@Base+0x2c>
   18d0c:	b	18d30 <flatcc_builder_table_edit@@Base+0x4c>
   18d10:	ldr	r0, [pc, #68]	; 18d5c <flatcc_builder_table_edit@@Base+0x78>
   18d14:	add	r0, pc, r0
   18d18:	ldr	r1, [pc, #64]	; 18d60 <flatcc_builder_table_edit@@Base+0x7c>
   18d1c:	add	r1, pc, r1
   18d20:	ldr	r2, [pc, #60]	; 18d64 <flatcc_builder_table_edit@@Base+0x80>
   18d24:	add	r3, pc, r2
   18d28:	movw	r2, #1794	; 0x702
   18d2c:	bl	12448 <__assert_fail@plt>
   18d30:	ldr	r0, [sp, #4]
   18d34:	ldr	r0, [r0, #16]
   18d38:	ldr	r1, [sp, #4]
   18d3c:	ldr	r1, [r1, #20]
   18d40:	add	r0, r0, r1
   18d44:	ldr	r1, [sp]
   18d48:	movw	r2, #0
   18d4c:	sub	r1, r2, r1
   18d50:	add	r0, r0, r1
   18d54:	mov	sp, fp
   18d58:	pop	{fp, pc}
   18d5c:	andeq	r2, r0, r2, lsr r7
   18d60:	strdeq	r1, [r0], -lr
   18d64:	ldrdeq	r2, [r0], -sl

00018d68 <flatcc_builder_table_add_copy@@Base>:
   18d68:	push	{fp, lr}
   18d6c:	mov	fp, sp
   18d70:	sub	sp, sp, #24
   18d74:	ldr	ip, [fp, #8]
   18d78:	str	r0, [fp, #-4]
   18d7c:	str	r1, [fp, #-8]
   18d80:	str	r2, [sp, #12]
   18d84:	str	r3, [sp, #8]
   18d88:	strh	ip, [sp, #6]
   18d8c:	ldr	r0, [fp, #-4]
   18d90:	ldr	r1, [fp, #-8]
   18d94:	ldr	r2, [sp, #8]
   18d98:	ldrh	r3, [sp, #6]
   18d9c:	bl	17e3c <flatcc_builder_table_add@@Base>
   18da0:	str	r0, [sp]
   18da4:	movw	r1, #0
   18da8:	cmp	r0, r1
   18dac:	beq	18dc0 <flatcc_builder_table_add_copy@@Base+0x58>
   18db0:	ldr	r0, [sp]
   18db4:	ldr	r1, [sp, #12]
   18db8:	ldr	r2, [sp, #8]
   18dbc:	bl	123ac <memcpy@plt>
   18dc0:	ldr	r0, [sp]
   18dc4:	mov	sp, fp
   18dc8:	pop	{fp, pc}
   18dcc:	push	{fp, lr}
   18dd0:	mov	fp, sp
   18dd4:	sub	sp, sp, #16
   18dd8:	str	r0, [sp, #8]
   18ddc:	strh	r1, [sp, #6]
   18de0:	ldr	r0, [sp, #8]
   18de4:	ldr	r0, [r0, #20]
   18de8:	add	r0, r0, #4
   18dec:	sub	r0, r0, #1
   18df0:	mvn	r1, #3
   18df4:	and	r0, r0, r1
   18df8:	str	r0, [sp]
   18dfc:	ldr	r0, [sp]
   18e00:	add	r0, r0, #4
   18e04:	ldr	r1, [sp, #8]
   18e08:	str	r0, [r1, #20]
   18e0c:	ldr	r1, [sp, #8]
   18e10:	ldr	r1, [r1, #24]
   18e14:	cmp	r0, r1
   18e18:	bls	18e48 <flatcc_builder_table_add_copy@@Base+0xe0>
   18e1c:	ldr	r0, [sp, #8]
   18e20:	ldr	r1, [sp, #8]
   18e24:	ldr	r1, [r1, #20]
   18e28:	movw	r2, #65532	; 0xfffc
   18e2c:	bl	1962c <flatcc_builder_get_emit_context@@Base+0x40>
   18e30:	cmp	r0, #0
   18e34:	beq	18e44 <flatcc_builder_table_add_copy@@Base+0xdc>
   18e38:	movw	r0, #0
   18e3c:	str	r0, [fp, #-4]
   18e40:	b	18eb4 <flatcc_builder_table_add_copy@@Base+0x14c>
   18e44:	b	18e48 <flatcc_builder_table_add_copy@@Base+0xe0>
   18e48:	ldr	r0, [sp]
   18e4c:	add	r0, r0, #4
   18e50:	ldr	r1, [sp, #8]
   18e54:	ldr	r1, [r1, #4]
   18e58:	ldrh	r2, [sp, #6]
   18e5c:	add	r1, r1, r2, lsl #1
   18e60:	strh	r0, [r1]
   18e64:	ldrh	r0, [sp, #6]
   18e68:	ldr	r1, [sp, #8]
   18e6c:	ldrh	r1, [r1, #8]
   18e70:	cmp	r0, r1
   18e74:	blt	18e88 <flatcc_builder_table_add_copy@@Base+0x120>
   18e78:	ldrh	r0, [sp, #6]
   18e7c:	add	r0, r0, #1
   18e80:	ldr	r1, [sp, #8]
   18e84:	strh	r0, [r1, #8]
   18e88:	ldr	r0, [sp]
   18e8c:	ldr	r1, [sp, #8]
   18e90:	ldr	r2, [r1]
   18e94:	add	r3, r2, #2
   18e98:	str	r3, [r1]
   18e9c:	strh	r0, [r2]
   18ea0:	ldr	r0, [sp, #8]
   18ea4:	ldr	r0, [r0, #16]
   18ea8:	ldr	r1, [sp]
   18eac:	add	r0, r0, r1
   18eb0:	str	r0, [fp, #-4]
   18eb4:	ldr	r0, [fp, #-4]
   18eb8:	mov	sp, fp
   18ebc:	pop	{fp, pc}

00018ec0 <flatcc_builder_push_buffer_alignment@@Base>:
   18ec0:	sub	sp, sp, #8
   18ec4:	str	r0, [sp, #4]
   18ec8:	ldr	r0, [sp, #4]
   18ecc:	ldrh	r0, [r0, #128]	; 0x80
   18ed0:	strh	r0, [sp, #2]
   18ed4:	ldr	r0, [sp, #4]
   18ed8:	movw	r1, #4
   18edc:	strh	r1, [r0, #128]	; 0x80
   18ee0:	ldrh	r0, [sp, #2]
   18ee4:	add	sp, sp, #8
   18ee8:	bx	lr

00018eec <flatcc_builder_pop_buffer_alignment@@Base>:
   18eec:	push	{fp, lr}
   18ef0:	mov	fp, sp
   18ef4:	sub	sp, sp, #8
   18ef8:	str	r0, [sp, #4]
   18efc:	strh	r1, [sp, #2]
   18f00:	ldr	r0, [sp, #4]
   18f04:	ldrh	r1, [sp, #2]
   18f08:	bl	14cd0 <flatcc_builder_create_buffer@@Base+0x3a8>
   18f0c:	mov	sp, fp
   18f10:	pop	{fp, pc}

00018f14 <flatcc_builder_get_buffer_alignment@@Base>:
   18f14:	sub	sp, sp, #4
   18f18:	str	r0, [sp]
   18f1c:	ldr	r0, [sp]
   18f20:	ldrh	r0, [r0, #128]	; 0x80
   18f24:	add	sp, sp, #4
   18f28:	bx	lr

00018f2c <flatcc_builder_set_vtable_clustering@@Base>:
   18f2c:	sub	sp, sp, #8
   18f30:	str	r0, [sp, #4]
   18f34:	str	r1, [sp]
   18f38:	ldr	r0, [sp]
   18f3c:	cmp	r0, #0
   18f40:	movw	r0, #0
   18f44:	movne	r0, #1
   18f48:	mvn	r1, #0
   18f4c:	eor	r0, r0, r1
   18f50:	and	r0, r0, #1
   18f54:	ldr	r1, [sp, #4]
   18f58:	str	r0, [r1, #180]	; 0xb4
   18f5c:	add	sp, sp, #8
   18f60:	bx	lr

00018f64 <flatcc_builder_set_block_align@@Base>:
   18f64:	sub	sp, sp, #8
   18f68:	str	r0, [sp, #4]
   18f6c:	strh	r1, [sp, #2]
   18f70:	ldrh	r0, [sp, #2]
   18f74:	ldr	r1, [sp, #4]
   18f78:	strh	r0, [r1, #132]	; 0x84
   18f7c:	add	sp, sp, #8
   18f80:	bx	lr

00018f84 <flatcc_builder_get_level@@Base>:
   18f84:	sub	sp, sp, #4
   18f88:	str	r0, [sp]
   18f8c:	ldr	r0, [sp]
   18f90:	ldr	r0, [r0, #156]	; 0x9c
   18f94:	add	sp, sp, #4
   18f98:	bx	lr

00018f9c <flatcc_builder_set_max_level@@Base>:
   18f9c:	sub	sp, sp, #8
   18fa0:	str	r0, [sp, #4]
   18fa4:	str	r1, [sp]
   18fa8:	ldr	r0, [sp]
   18fac:	ldr	r1, [sp, #4]
   18fb0:	str	r0, [r1, #176]	; 0xb0
   18fb4:	ldr	r0, [sp, #4]
   18fb8:	ldr	r0, [r0, #160]	; 0xa0
   18fbc:	ldr	r1, [sp, #4]
   18fc0:	ldr	r1, [r1, #176]	; 0xb0
   18fc4:	cmp	r0, r1
   18fc8:	bge	18fdc <flatcc_builder_set_max_level@@Base+0x40>
   18fcc:	ldr	r0, [sp, #4]
   18fd0:	ldr	r0, [r0, #176]	; 0xb0
   18fd4:	ldr	r1, [sp, #4]
   18fd8:	str	r0, [r1, #160]	; 0xa0
   18fdc:	add	sp, sp, #8
   18fe0:	bx	lr

00018fe4 <flatcc_builder_get_buffer_size@@Base>:
   18fe4:	sub	sp, sp, #4
   18fe8:	str	r0, [sp]
   18fec:	ldr	r0, [sp]
   18ff0:	ldr	r0, [r0, #140]	; 0x8c
   18ff4:	ldr	r1, [sp]
   18ff8:	ldr	r1, [r1, #136]	; 0x88
   18ffc:	sub	r0, r0, r1
   19000:	add	sp, sp, #4
   19004:	bx	lr

00019008 <flatcc_builder_get_buffer_start@@Base>:
   19008:	sub	sp, sp, #4
   1900c:	str	r0, [sp]
   19010:	ldr	r0, [sp]
   19014:	ldr	r0, [r0, #136]	; 0x88
   19018:	add	sp, sp, #4
   1901c:	bx	lr

00019020 <flatcc_builder_get_buffer_end@@Base>:
   19020:	sub	sp, sp, #4
   19024:	str	r0, [sp]
   19028:	ldr	r0, [sp]
   1902c:	ldr	r0, [r0, #140]	; 0x8c
   19030:	add	sp, sp, #4
   19034:	bx	lr

00019038 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19038:	sub	sp, sp, #8
   1903c:	str	r0, [sp, #4]
   19040:	str	r1, [sp]
   19044:	ldr	r0, [sp]
   19048:	ldr	r1, [sp, #4]
   1904c:	str	r0, [r1, #172]	; 0xac
   19050:	add	sp, sp, #8
   19054:	bx	lr

00019058 <flatcc_builder_set_identifier@@Base>:
   19058:	sub	sp, sp, #16
   1905c:	str	r0, [sp, #12]
   19060:	str	r1, [sp, #8]
   19064:	ldr	r0, [sp, #12]
   19068:	add	r0, r0, #168	; 0xa8
   1906c:	ldr	r1, [sp, #8]
   19070:	movw	r2, #0
   19074:	cmp	r1, r2
   19078:	str	r0, [sp, #4]
   1907c:	beq	1908c <flatcc_builder_set_identifier@@Base+0x34>
   19080:	ldr	r0, [sp, #8]
   19084:	str	r0, [sp]
   19088:	b	1909c <flatcc_builder_set_identifier@@Base+0x44>
   1908c:	ldr	r0, [pc, #56]	; 190cc <flatcc_builder_set_identifier@@Base+0x74>
   19090:	ldr	r0, [pc, r0]
   19094:	str	r0, [sp]
   19098:	b	1909c <flatcc_builder_set_identifier@@Base+0x44>
   1909c:	ldr	r0, [sp]
   190a0:	ldrb	r1, [r0]
   190a4:	ldr	r2, [sp, #4]
   190a8:	strb	r1, [r2]
   190ac:	ldrb	r1, [r0, #1]
   190b0:	strb	r1, [r2, #1]
   190b4:	ldrb	r1, [r0, #2]
   190b8:	strb	r1, [r2, #2]
   190bc:	ldrb	r0, [r0, #3]
   190c0:	strb	r0, [r2, #3]
   190c4:	add	sp, sp, #16
   190c8:	bx	lr
   190cc:			; <UNDEFINED> instruction: 0x00012fb4

000190d0 <flatcc_builder_get_type@@Base>:
   190d0:	sub	sp, sp, #8
   190d4:	str	r0, [sp, #4]
   190d8:	ldr	r0, [sp, #4]
   190dc:	ldr	r0, [r0, #32]
   190e0:	movw	r1, #0
   190e4:	cmp	r0, r1
   190e8:	beq	19100 <flatcc_builder_get_type@@Base+0x30>
   190ec:	ldr	r0, [sp, #4]
   190f0:	ldr	r0, [r0, #32]
   190f4:	ldrh	r0, [r0, #14]
   190f8:	str	r0, [sp]
   190fc:	b	1910c <flatcc_builder_get_type@@Base+0x3c>
   19100:	movw	r0, #0
   19104:	str	r0, [sp]
   19108:	b	1910c <flatcc_builder_get_type@@Base+0x3c>
   1910c:	ldr	r0, [sp]
   19110:	add	sp, sp, #8
   19114:	bx	lr

00019118 <flatcc_builder_get_type_at@@Base>:
   19118:	sub	sp, sp, #12
   1911c:	str	r0, [sp, #4]
   19120:	str	r1, [sp]
   19124:	ldr	r0, [sp]
   19128:	cmp	r0, #1
   1912c:	blt	19144 <flatcc_builder_get_type_at@@Base+0x2c>
   19130:	ldr	r0, [sp]
   19134:	ldr	r1, [sp, #4]
   19138:	ldr	r1, [r1, #156]	; 0x9c
   1913c:	cmp	r0, r1
   19140:	ble	19150 <flatcc_builder_get_type_at@@Base+0x38>
   19144:	movw	r0, #0
   19148:	str	r0, [sp, #8]
   1914c:	b	1917c <flatcc_builder_get_type_at@@Base+0x64>
   19150:	ldr	r0, [sp, #4]
   19154:	ldr	r0, [r0, #32]
   19158:	ldr	r1, [sp]
   1915c:	ldr	r2, [sp, #4]
   19160:	ldr	r2, [r2, #156]	; 0x9c
   19164:	sub	r1, r1, r2
   19168:	movw	r2, #36	; 0x24
   1916c:	mul	r1, r1, r2
   19170:	add	r0, r0, r1
   19174:	ldrh	r0, [r0, #14]
   19178:	str	r0, [sp, #8]
   1917c:	ldr	r0, [sp, #8]
   19180:	add	sp, sp, #12
   19184:	bx	lr

00019188 <flatcc_builder_get_direct_buffer@@Base>:
   19188:	push	{fp, lr}
   1918c:	mov	fp, sp
   19190:	sub	sp, sp, #16
   19194:	str	r0, [sp, #8]
   19198:	str	r1, [sp, #4]
   1919c:	ldr	r0, [sp, #8]
   191a0:	ldr	r0, [r0, #184]	; 0xb8
   191a4:	cmp	r0, #0
   191a8:	beq	191c4 <flatcc_builder_get_direct_buffer@@Base+0x3c>
   191ac:	ldr	r0, [sp, #8]
   191b0:	add	r0, r0, #188	; 0xbc
   191b4:	ldr	r1, [sp, #4]
   191b8:	bl	191f8 <flatcc_builder_get_direct_buffer@@Base+0x70>
   191bc:	str	r0, [fp, #-4]
   191c0:	b	191ec <flatcc_builder_get_direct_buffer@@Base+0x64>
   191c4:	ldr	r0, [sp, #4]
   191c8:	movw	r1, #0
   191cc:	cmp	r0, r1
   191d0:	beq	191e0 <flatcc_builder_get_direct_buffer@@Base+0x58>
   191d4:	ldr	r0, [sp, #4]
   191d8:	movw	r1, #0
   191dc:	str	r1, [r0]
   191e0:	b	191e4 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   191e4:	movw	r0, #0
   191e8:	str	r0, [fp, #-4]
   191ec:	ldr	r0, [fp, #-4]
   191f0:	mov	sp, fp
   191f4:	pop	{fp, pc}
   191f8:	sub	sp, sp, #12
   191fc:	str	r0, [sp, #4]
   19200:	str	r1, [sp]
   19204:	ldr	r0, [sp, #4]
   19208:	ldr	r0, [r0]
   1920c:	ldr	r1, [sp, #4]
   19210:	ldr	r1, [r1, #4]
   19214:	cmp	r0, r1
   19218:	bne	1924c <flatcc_builder_get_direct_buffer@@Base+0xc4>
   1921c:	ldr	r0, [sp]
   19220:	movw	r1, #0
   19224:	cmp	r0, r1
   19228:	beq	1923c <flatcc_builder_get_direct_buffer@@Base+0xb4>
   1922c:	ldr	r0, [sp, #4]
   19230:	ldr	r0, [r0, #24]
   19234:	ldr	r1, [sp]
   19238:	str	r0, [r1]
   1923c:	ldr	r0, [sp, #4]
   19240:	ldr	r0, [r0, #8]
   19244:	str	r0, [sp, #8]
   19248:	b	19270 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   1924c:	ldr	r0, [sp]
   19250:	movw	r1, #0
   19254:	cmp	r0, r1
   19258:	beq	19268 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   1925c:	ldr	r0, [sp]
   19260:	movw	r1, #0
   19264:	str	r1, [r0]
   19268:	movw	r0, #0
   1926c:	str	r0, [sp, #8]
   19270:	ldr	r0, [sp, #8]
   19274:	add	sp, sp, #12
   19278:	bx	lr

0001927c <flatcc_builder_copy_buffer@@Base>:
   1927c:	push	{fp, lr}
   19280:	mov	fp, sp
   19284:	sub	sp, sp, #16
   19288:	str	r0, [sp, #8]
   1928c:	str	r1, [sp, #4]
   19290:	str	r2, [sp]
   19294:	ldr	r0, [sp, #8]
   19298:	ldr	r0, [r0, #184]	; 0xb8
   1929c:	cmp	r0, #0
   192a0:	bne	192b0 <flatcc_builder_copy_buffer@@Base+0x34>
   192a4:	movw	r0, #0
   192a8:	str	r0, [fp, #-4]
   192ac:	b	19304 <flatcc_builder_copy_buffer@@Base+0x88>
   192b0:	ldr	r0, [sp, #8]
   192b4:	add	r0, r0, #188	; 0xbc
   192b8:	ldr	r1, [sp, #4]
   192bc:	ldr	r2, [sp]
   192c0:	bl	19f70 <flatcc_emitter_copy_buffer@@Base>
   192c4:	str	r0, [sp, #4]
   192c8:	ldr	r0, [sp, #4]
   192cc:	movw	r1, #0
   192d0:	cmp	r0, r1
   192d4:	beq	192dc <flatcc_builder_copy_buffer@@Base+0x60>
   192d8:	b	192fc <flatcc_builder_copy_buffer@@Base+0x80>
   192dc:	ldr	r0, [pc, #44]	; 19310 <flatcc_builder_copy_buffer@@Base+0x94>
   192e0:	add	r0, pc, r0
   192e4:	ldr	r1, [pc, #40]	; 19314 <flatcc_builder_copy_buffer@@Base+0x98>
   192e8:	add	r1, pc, r1
   192ec:	ldr	r2, [pc, #36]	; 19318 <flatcc_builder_copy_buffer@@Base+0x9c>
   192f0:	add	r3, pc, r2
   192f4:	movw	r2, #1926	; 0x786
   192f8:	bl	12448 <__assert_fail@plt>
   192fc:	ldr	r0, [sp, #4]
   19300:	str	r0, [fp, #-4]
   19304:	ldr	r0, [fp, #-4]
   19308:	mov	sp, fp
   1930c:	pop	{fp, pc}
   19310:	andeq	r1, r0, r5, lsr #23
   19314:	andeq	r1, r0, r2, lsr r9
   19318:	muleq	r0, r9, r8

0001931c <flatcc_builder_finalize_buffer@@Base>:
   1931c:	push	{fp, lr}
   19320:	mov	fp, sp
   19324:	sub	sp, sp, #16
   19328:	str	r0, [fp, #-4]
   1932c:	str	r1, [sp, #8]
   19330:	ldr	r0, [fp, #-4]
   19334:	bl	18fe4 <flatcc_builder_get_buffer_size@@Base>
   19338:	str	r0, [sp]
   1933c:	ldr	r0, [sp, #8]
   19340:	movw	r1, #0
   19344:	cmp	r0, r1
   19348:	beq	19358 <flatcc_builder_finalize_buffer@@Base+0x3c>
   1934c:	ldr	r0, [sp]
   19350:	ldr	r1, [sp, #8]
   19354:	str	r0, [r1]
   19358:	ldr	r0, [sp]
   1935c:	bl	123d0 <malloc@plt>
   19360:	str	r0, [sp, #4]
   19364:	ldr	r0, [sp, #4]
   19368:	movw	lr, #0
   1936c:	cmp	r0, lr
   19370:	bne	19394 <flatcc_builder_finalize_buffer@@Base+0x78>
   19374:	ldr	r0, [pc, #144]	; 1940c <flatcc_builder_finalize_buffer@@Base+0xf0>
   19378:	add	r0, pc, r0
   1937c:	ldr	r1, [pc, #140]	; 19410 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19380:	add	r1, pc, r1
   19384:	ldr	r2, [pc, #136]	; 19414 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19388:	add	r3, pc, r2
   1938c:	movw	r2, #1944	; 0x798
   19390:	bl	12448 <__assert_fail@plt>
   19394:	ldr	r0, [fp, #-4]
   19398:	ldr	r1, [sp, #4]
   1939c:	ldr	r2, [sp]
   193a0:	bl	1927c <flatcc_builder_copy_buffer@@Base>
   193a4:	movw	r1, #0
   193a8:	cmp	r0, r1
   193ac:	bne	193d0 <flatcc_builder_finalize_buffer@@Base+0xb4>
   193b0:	ldr	r0, [pc, #96]	; 19418 <flatcc_builder_finalize_buffer@@Base+0xfc>
   193b4:	add	r0, pc, r0
   193b8:	ldr	r1, [pc, #92]	; 1941c <flatcc_builder_finalize_buffer@@Base+0x100>
   193bc:	add	r1, pc, r1
   193c0:	ldr	r2, [pc, #88]	; 19420 <flatcc_builder_finalize_buffer@@Base+0x104>
   193c4:	add	r3, pc, r2
   193c8:	movw	r2, #1948	; 0x79c
   193cc:	bl	12448 <__assert_fail@plt>
   193d0:	b	193d4 <flatcc_builder_finalize_buffer@@Base+0xb8>
   193d4:	ldr	r0, [sp, #4]
   193d8:	movw	r1, #0
   193dc:	cmp	r0, r1
   193e0:	bne	19400 <flatcc_builder_finalize_buffer@@Base+0xe4>
   193e4:	ldr	r0, [sp, #8]
   193e8:	movw	r1, #0
   193ec:	cmp	r0, r1
   193f0:	beq	19400 <flatcc_builder_finalize_buffer@@Base+0xe4>
   193f4:	ldr	r0, [sp, #8]
   193f8:	movw	r1, #0
   193fc:	str	r1, [r0]
   19400:	ldr	r0, [sp, #4]
   19404:	mov	sp, fp
   19408:	pop	{fp, pc}
   1940c:	andeq	r2, r0, pc, asr sl
   19410:	muleq	r0, sl, r8
   19414:	andeq	r2, r0, r6, asr #16
   19418:	andeq	r2, r0, r3, lsr #20
   1941c:	andeq	r1, r0, lr, asr r8
   19420:	andeq	r2, r0, sl, lsl #16

00019424 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19424:	push	{fp, lr}
   19428:	mov	fp, sp
   1942c:	sub	sp, sp, #24
   19430:	str	r0, [fp, #-4]
   19434:	str	r1, [fp, #-8]
   19438:	ldr	r0, [fp, #-4]
   1943c:	bl	18fe4 <flatcc_builder_get_buffer_size@@Base>
   19440:	str	r0, [sp, #4]
   19444:	ldr	r0, [fp, #-8]
   19448:	movw	r1, #0
   1944c:	cmp	r0, r1
   19450:	beq	19460 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   19454:	ldr	r0, [sp, #4]
   19458:	ldr	r1, [fp, #-8]
   1945c:	str	r0, [r1]
   19460:	ldr	r0, [fp, #-4]
   19464:	bl	18f14 <flatcc_builder_get_buffer_alignment@@Base>
   19468:	uxth	r0, r0
   1946c:	str	r0, [sp, #8]
   19470:	ldr	r0, [sp, #4]
   19474:	ldr	lr, [sp, #8]
   19478:	add	r0, r0, lr
   1947c:	sub	r0, r0, #1
   19480:	ldr	lr, [sp, #8]
   19484:	sub	lr, lr, #1
   19488:	mvn	r1, #0
   1948c:	eor	r1, lr, r1
   19490:	and	r0, r0, r1
   19494:	str	r0, [sp, #4]
   19498:	ldr	r0, [sp, #8]
   1949c:	ldr	r1, [sp, #4]
   194a0:	bl	19528 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   194a4:	str	r0, [sp, #12]
   194a8:	ldr	r0, [sp, #12]
   194ac:	movw	r1, #0
   194b0:	cmp	r0, r1
   194b4:	bne	194bc <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   194b8:	b	194f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   194bc:	ldr	r0, [fp, #-4]
   194c0:	ldr	r1, [sp, #12]
   194c4:	ldr	r2, [sp, #4]
   194c8:	bl	1927c <flatcc_builder_copy_buffer@@Base>
   194cc:	movw	r1, #0
   194d0:	cmp	r0, r1
   194d4:	bne	194ec <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   194d8:	ldr	r0, [sp, #12]
   194dc:	bl	123a0 <free@plt>
   194e0:	movw	r0, #0
   194e4:	str	r0, [sp, #12]
   194e8:	b	194f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   194ec:	b	194f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   194f0:	ldr	r0, [sp, #12]
   194f4:	movw	r1, #0
   194f8:	cmp	r0, r1
   194fc:	bne	1951c <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   19500:	ldr	r0, [fp, #-8]
   19504:	movw	r1, #0
   19508:	cmp	r0, r1
   1950c:	beq	1951c <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   19510:	ldr	r0, [fp, #-8]
   19514:	movw	r1, #0
   19518:	str	r1, [r0]
   1951c:	ldr	r0, [sp, #12]
   19520:	mov	sp, fp
   19524:	pop	{fp, pc}
   19528:	push	{fp, lr}
   1952c:	mov	fp, sp
   19530:	sub	sp, sp, #16
   19534:	str	r0, [fp, #-4]
   19538:	str	r1, [sp, #8]
   1953c:	movw	r0, #0
   19540:	str	r0, [sp]
   19544:	ldr	r0, [fp, #-4]
   19548:	cmp	r0, #4
   1954c:	bcs	19558 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   19550:	movw	r0, #4
   19554:	str	r0, [fp, #-4]
   19558:	ldr	r1, [fp, #-4]
   1955c:	ldr	r2, [sp, #8]
   19560:	mov	r0, sp
   19564:	bl	1240c <posix_memalign@plt>
   19568:	str	r0, [sp, #4]
   1956c:	ldr	r0, [sp, #4]
   19570:	cmp	r0, #0
   19574:	beq	19598 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19578:	ldr	r0, [sp]
   1957c:	movw	r1, #0
   19580:	cmp	r0, r1
   19584:	beq	19598 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19588:	ldr	r0, [sp]
   1958c:	bl	123a0 <free@plt>
   19590:	movw	r0, #0
   19594:	str	r0, [sp]
   19598:	ldr	r0, [sp]
   1959c:	mov	sp, fp
   195a0:	pop	{fp, pc}

000195a4 <flatcc_builder_aligned_alloc@@Base>:
   195a4:	push	{fp, lr}
   195a8:	mov	fp, sp
   195ac:	sub	sp, sp, #8
   195b0:	str	r0, [sp, #4]
   195b4:	str	r1, [sp]
   195b8:	ldr	r0, [sp, #4]
   195bc:	ldr	r1, [sp]
   195c0:	bl	19528 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   195c4:	mov	sp, fp
   195c8:	pop	{fp, pc}

000195cc <flatcc_builder_aligned_free@@Base>:
   195cc:	push	{fp, lr}
   195d0:	mov	fp, sp
   195d4:	sub	sp, sp, #8
   195d8:	str	r0, [sp, #4]
   195dc:	ldr	r0, [sp, #4]
   195e0:	bl	123a0 <free@plt>
   195e4:	mov	sp, fp
   195e8:	pop	{fp, pc}

000195ec <flatcc_builder_get_emit_context@@Base>:
   195ec:	sub	sp, sp, #4
   195f0:	str	r0, [sp]
   195f4:	ldr	r0, [sp]
   195f8:	ldr	r0, [r0, #36]	; 0x24
   195fc:	add	sp, sp, #4
   19600:	bx	lr
   19604:	sub	sp, sp, #8
   19608:	str	r0, [sp, #4]
   1960c:	strh	r1, [sp, #2]
   19610:	ldr	r0, [sp, #4]
   19614:	ldr	r0, [r0, #140]	; 0x8c
   19618:	ldrh	r1, [sp, #2]
   1961c:	sub	r1, r1, #1
   19620:	and	r0, r0, r1
   19624:	add	sp, sp, #8
   19628:	bx	lr
   1962c:	push	{fp, lr}
   19630:	mov	fp, sp
   19634:	sub	sp, sp, #32
   19638:	str	r0, [fp, #-8]
   1963c:	str	r1, [fp, #-12]
   19640:	str	r2, [sp, #16]
   19644:	ldr	r0, [fp, #-8]
   19648:	add	r0, r0, #52	; 0x34
   1964c:	add	r0, r0, #8
   19650:	str	r0, [sp, #12]
   19654:	ldr	r0, [fp, #-8]
   19658:	ldr	r0, [r0, #48]	; 0x30
   1965c:	ldr	r1, [fp, #-8]
   19660:	ldr	r1, [r1, #40]	; 0x28
   19664:	ldr	r2, [sp, #12]
   19668:	ldr	r3, [fp, #-8]
   1966c:	ldr	r3, [r3, #28]
   19670:	ldr	ip, [fp, #-12]
   19674:	add	r3, r3, ip
   19678:	str	r0, [sp, #8]
   1967c:	mov	r0, r1
   19680:	mov	r1, r2
   19684:	mov	r2, r3
   19688:	movw	r3, #1
   1968c:	str	r3, [sp, #4]
   19690:	ldr	ip, [sp, #4]
   19694:	str	ip, [sp]
   19698:	ldr	lr, [sp, #8]
   1969c:	blx	lr
   196a0:	cmp	r0, #0
   196a4:	beq	196b4 <flatcc_builder_get_emit_context@@Base+0xc8>
   196a8:	mvn	r0, #0
   196ac:	str	r0, [fp, #-4]
   196b0:	b	196c8 <flatcc_builder_get_emit_context@@Base+0xdc>
   196b4:	ldr	r0, [fp, #-8]
   196b8:	ldr	r1, [sp, #16]
   196bc:	bl	15430 <flatcc_builder_start_struct@@Base+0x70>
   196c0:	movw	r0, #0
   196c4:	str	r0, [fp, #-4]
   196c8:	ldr	r0, [fp, #-4]
   196cc:	mov	sp, fp
   196d0:	pop	{fp, pc}
   196d4:	push	{fp, lr}
   196d8:	mov	fp, sp
   196dc:	sub	sp, sp, #32
   196e0:	str	r0, [fp, #-8]
   196e4:	ldr	r0, [fp, #-8]
   196e8:	add	r0, r0, #52	; 0x34
   196ec:	add	r0, r0, #40	; 0x28
   196f0:	str	r0, [fp, #-12]
   196f4:	ldr	r0, [fp, #-8]
   196f8:	ldr	r0, [r0, #124]	; 0x7c
   196fc:	cmp	r0, #0
   19700:	bne	19708 <flatcc_builder_get_emit_context@@Base+0x11c>
   19704:	b	19728 <flatcc_builder_get_emit_context@@Base+0x13c>
   19708:	ldr	r0, [pc, #320]	; 19850 <flatcc_builder_get_emit_context@@Base+0x264>
   1970c:	add	r0, pc, r0
   19710:	ldr	r1, [pc, #316]	; 19854 <flatcc_builder_get_emit_context@@Base+0x268>
   19714:	add	r1, pc, r1
   19718:	ldr	r2, [pc, #312]	; 19858 <flatcc_builder_get_emit_context@@Base+0x26c>
   1971c:	add	r3, pc, r2
   19720:	movw	r2, #342	; 0x156
   19724:	bl	12448 <__assert_fail@plt>
   19728:	ldr	r0, [fp, #-8]
   1972c:	ldr	r1, [fp, #-8]
   19730:	ldr	r2, [r1, #124]	; 0x7c
   19734:	movw	r1, #6
   19738:	movw	r3, #16
   1973c:	movw	ip, #0
   19740:	str	ip, [sp]
   19744:	bl	14158 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   19748:	movw	r1, #0
   1974c:	cmp	r0, r1
   19750:	bne	19760 <flatcc_builder_get_emit_context@@Base+0x174>
   19754:	mvn	r0, #0
   19758:	str	r0, [fp, #-4]
   1975c:	b	19844 <flatcc_builder_get_emit_context@@Base+0x258>
   19760:	ldr	r0, [fp, #-8]
   19764:	movw	r1, #16
   19768:	str	r1, [r0, #124]	; 0x7c
   1976c:	movw	r0, #256	; 0x100
   19770:	str	r0, [sp, #16]
   19774:	ldr	r0, [fp, #-8]
   19778:	ldr	r0, [r0, #48]	; 0x30
   1977c:	ldr	r1, [fp, #-8]
   19780:	ldr	r1, [r1, #40]	; 0x28
   19784:	ldr	r2, [fp, #-12]
   19788:	ldr	r3, [sp, #16]
   1978c:	str	r0, [sp, #8]
   19790:	mov	r0, r1
   19794:	mov	r1, r2
   19798:	mov	r2, r3
   1979c:	movw	r3, #1
   197a0:	movw	ip, #5
   197a4:	str	ip, [sp]
   197a8:	ldr	ip, [sp, #8]
   197ac:	blx	ip
   197b0:	cmp	r0, #0
   197b4:	beq	197c4 <flatcc_builder_get_emit_context@@Base+0x1d8>
   197b8:	mvn	r0, #0
   197bc:	str	r0, [fp, #-4]
   197c0:	b	19844 <flatcc_builder_get_emit_context@@Base+0x258>
   197c4:	b	197c8 <flatcc_builder_get_emit_context@@Base+0x1dc>
   197c8:	ldr	r0, [sp, #16]
   197cc:	lsl	r0, r0, #1
   197d0:	ldr	r1, [fp, #-12]
   197d4:	ldr	r1, [r1, #4]
   197d8:	cmp	r0, r1
   197dc:	bhi	197f0 <flatcc_builder_get_emit_context@@Base+0x204>
   197e0:	ldr	r0, [sp, #16]
   197e4:	lsl	r0, r0, #1
   197e8:	str	r0, [sp, #16]
   197ec:	b	197c8 <flatcc_builder_get_emit_context@@Base+0x1dc>
   197f0:	ldr	r0, [sp, #16]
   197f4:	lsr	r0, r0, #2
   197f8:	str	r0, [sp, #16]
   197fc:	movw	r0, #0
   19800:	str	r0, [sp, #12]
   19804:	ldr	r0, [sp, #12]
   19808:	movw	r1, #1
   1980c:	lsl	r0, r1, r0
   19810:	ldr	r1, [sp, #16]
   19814:	cmp	r0, r1
   19818:	bcs	19830 <flatcc_builder_get_emit_context@@Base+0x244>
   1981c:	b	19820 <flatcc_builder_get_emit_context@@Base+0x234>
   19820:	ldr	r0, [sp, #12]
   19824:	add	r0, r0, #1
   19828:	str	r0, [sp, #12]
   1982c:	b	19804 <flatcc_builder_get_emit_context@@Base+0x218>
   19830:	ldr	r0, [sp, #12]
   19834:	ldr	r1, [fp, #-8]
   19838:	str	r0, [r1, #116]	; 0x74
   1983c:	movw	r0, #0
   19840:	str	r0, [fp, #-4]
   19844:	ldr	r0, [fp, #-4]
   19848:	mov	sp, fp
   1984c:	pop	{fp, pc}
   19850:	andeq	r2, r0, pc, lsl #13
   19854:	andeq	r1, r0, r6, lsl #10
   19858:	andeq	r2, r0, lr, lsl #13

0001985c <flatcc_emitter_recycle_page@@Base>:
   1985c:	sub	sp, sp, #12
   19860:	str	r0, [sp, #4]
   19864:	str	r1, [sp]
   19868:	ldr	r0, [sp]
   1986c:	ldr	r1, [sp, #4]
   19870:	ldr	r1, [r1]
   19874:	cmp	r0, r1
   19878:	beq	19890 <flatcc_emitter_recycle_page@@Base+0x34>
   1987c:	ldr	r0, [sp]
   19880:	ldr	r1, [sp, #4]
   19884:	ldr	r1, [r1, #4]
   19888:	cmp	r0, r1
   1988c:	bne	1989c <flatcc_emitter_recycle_page@@Base+0x40>
   19890:	mvn	r0, #0
   19894:	str	r0, [sp, #8]
   19898:	b	19910 <flatcc_emitter_recycle_page@@Base+0xb4>
   1989c:	ldr	r0, [sp]
   198a0:	ldr	r0, [r0, #2948]	; 0xb84
   198a4:	ldr	r1, [sp]
   198a8:	ldr	r1, [r1, #2944]	; 0xb80
   198ac:	str	r0, [r1, #2948]	; 0xb84
   198b0:	ldr	r0, [sp]
   198b4:	ldr	r0, [r0, #2944]	; 0xb80
   198b8:	ldr	r1, [sp]
   198bc:	ldr	r1, [r1, #2948]	; 0xb84
   198c0:	str	r0, [r1, #2944]	; 0xb80
   198c4:	ldr	r0, [sp, #4]
   198c8:	ldr	r0, [r0]
   198cc:	ldr	r0, [r0, #2948]	; 0xb84
   198d0:	ldr	r1, [sp]
   198d4:	str	r0, [r1, #2948]	; 0xb84
   198d8:	ldr	r0, [sp, #4]
   198dc:	ldr	r0, [r0]
   198e0:	ldr	r1, [sp]
   198e4:	str	r0, [r1, #2944]	; 0xb80
   198e8:	ldr	r0, [sp]
   198ec:	ldr	r1, [sp]
   198f0:	ldr	r1, [r1, #2948]	; 0xb84
   198f4:	str	r0, [r1, #2944]	; 0xb80
   198f8:	ldr	r0, [sp]
   198fc:	ldr	r1, [sp]
   19900:	ldr	r1, [r1, #2944]	; 0xb80
   19904:	str	r0, [r1, #2948]	; 0xb84
   19908:	movw	r0, #0
   1990c:	str	r0, [sp, #8]
   19910:	ldr	r0, [sp, #8]
   19914:	add	sp, sp, #12
   19918:	bx	lr

0001991c <flatcc_emitter_reset@@Base>:
   1991c:	push	{fp, lr}
   19920:	mov	fp, sp
   19924:	sub	sp, sp, #16
   19928:	str	r0, [fp, #-4]
   1992c:	ldr	r0, [fp, #-4]
   19930:	ldr	r0, [r0]
   19934:	str	r0, [sp, #8]
   19938:	ldr	r0, [fp, #-4]
   1993c:	ldr	r0, [r0]
   19940:	movw	r1, #0
   19944:	cmp	r0, r1
   19948:	bne	19950 <flatcc_emitter_reset@@Base+0x34>
   1994c:	b	19aac <flatcc_emitter_reset@@Base+0x190>
   19950:	ldr	r0, [fp, #-4]
   19954:	ldr	r0, [r0]
   19958:	ldr	r1, [fp, #-4]
   1995c:	str	r0, [r1, #4]
   19960:	ldr	r0, [fp, #-4]
   19964:	ldr	r0, [r0]
   19968:	add	r0, r0, #1472	; 0x5c0
   1996c:	ldr	r1, [fp, #-4]
   19970:	str	r0, [r1, #8]
   19974:	ldr	r0, [fp, #-4]
   19978:	ldr	r0, [r0, #8]
   1997c:	ldr	r1, [fp, #-4]
   19980:	str	r0, [r1, #16]
   19984:	ldr	r0, [fp, #-4]
   19988:	movw	r1, #1472	; 0x5c0
   1998c:	str	r1, [r0, #12]
   19990:	ldr	r0, [fp, #-4]
   19994:	str	r1, [r0, #20]
   19998:	ldr	r0, [fp, #-4]
   1999c:	ldr	r0, [r0, #12]
   199a0:	movw	r1, #0
   199a4:	sub	r0, r1, r0
   199a8:	ldr	r1, [fp, #-4]
   199ac:	ldr	r1, [r1]
   199b0:	str	r0, [r1, #2952]	; 0xb88
   199b4:	ldr	r0, [fp, #-4]
   199b8:	ldr	r0, [r0, #32]
   199bc:	cmp	r0, #0
   199c0:	bne	199d4 <flatcc_emitter_reset@@Base+0xb8>
   199c4:	ldr	r0, [fp, #-4]
   199c8:	ldr	r0, [r0, #24]
   199cc:	ldr	r1, [fp, #-4]
   199d0:	str	r0, [r1, #32]
   199d4:	ldr	r0, [fp, #-4]
   199d8:	ldr	r1, [r0, #24]
   199dc:	ldr	r0, [r0, #32]
   199e0:	add	r0, r0, r0, lsl #1
   199e4:	lsr	r0, r0, #2
   199e8:	lsr	r1, r1, #2
   199ec:	add	r0, r0, r1
   199f0:	ldr	r1, [fp, #-4]
   199f4:	str	r0, [r1, #32]
   199f8:	ldr	r0, [fp, #-4]
   199fc:	movw	r1, #0
   19a00:	str	r1, [r0, #24]
   19a04:	ldr	r0, [fp, #-4]
   19a08:	ldr	r0, [r0, #32]
   19a0c:	lsl	r0, r0, #1
   19a10:	ldr	r1, [fp, #-4]
   19a14:	ldr	r1, [r1, #28]
   19a18:	cmp	r0, r1
   19a1c:	movw	r0, #0
   19a20:	str	r0, [sp, #4]
   19a24:	bcs	19a4c <flatcc_emitter_reset@@Base+0x130>
   19a28:	ldr	r0, [fp, #-4]
   19a2c:	ldr	r0, [r0, #4]
   19a30:	ldr	r0, [r0, #2944]	; 0xb80
   19a34:	ldr	r1, [fp, #-4]
   19a38:	ldr	r1, [r1]
   19a3c:	cmp	r0, r1
   19a40:	movw	r0, #0
   19a44:	movne	r0, #1
   19a48:	str	r0, [sp, #4]
   19a4c:	ldr	r0, [sp, #4]
   19a50:	tst	r0, #1
   19a54:	beq	19aac <flatcc_emitter_reset@@Base+0x190>
   19a58:	ldr	r0, [fp, #-4]
   19a5c:	ldr	r0, [r0, #4]
   19a60:	ldr	r0, [r0, #2944]	; 0xb80
   19a64:	str	r0, [sp, #8]
   19a68:	ldr	r0, [sp, #8]
   19a6c:	ldr	r0, [r0, #2944]	; 0xb80
   19a70:	ldr	r1, [fp, #-4]
   19a74:	ldr	r1, [r1, #4]
   19a78:	str	r0, [r1, #2944]	; 0xb80
   19a7c:	ldr	r0, [fp, #-4]
   19a80:	ldr	r0, [r0, #4]
   19a84:	ldr	r1, [sp, #8]
   19a88:	ldr	r1, [r1, #2944]	; 0xb80
   19a8c:	str	r0, [r1, #2948]	; 0xb84
   19a90:	ldr	r0, [sp, #8]
   19a94:	bl	123a0 <free@plt>
   19a98:	ldr	r0, [fp, #-4]
   19a9c:	ldr	r1, [r0, #28]
   19aa0:	sub	r1, r1, #2944	; 0xb80
   19aa4:	str	r1, [r0, #28]
   19aa8:	b	19a04 <flatcc_emitter_reset@@Base+0xe8>
   19aac:	mov	sp, fp
   19ab0:	pop	{fp, pc}

00019ab4 <flatcc_emitter_clear@@Base>:
   19ab4:	push	{fp, lr}
   19ab8:	mov	fp, sp
   19abc:	sub	sp, sp, #8
   19ac0:	str	r0, [sp, #4]
   19ac4:	ldr	r0, [sp, #4]
   19ac8:	ldr	r0, [r0]
   19acc:	str	r0, [sp]
   19ad0:	ldr	r0, [sp]
   19ad4:	movw	r1, #0
   19ad8:	cmp	r0, r1
   19adc:	bne	19ae4 <flatcc_emitter_clear@@Base+0x30>
   19ae0:	b	19b40 <flatcc_emitter_clear@@Base+0x8c>
   19ae4:	ldr	r0, [sp]
   19ae8:	ldr	r0, [r0, #2948]	; 0xb84
   19aec:	movw	r1, #0
   19af0:	str	r1, [r0, #2944]	; 0xb80
   19af4:	ldr	r0, [sp]
   19af8:	ldr	r0, [r0, #2944]	; 0xb80
   19afc:	movw	r1, #0
   19b00:	cmp	r0, r1
   19b04:	beq	19b24 <flatcc_emitter_clear@@Base+0x70>
   19b08:	ldr	r0, [sp]
   19b0c:	ldr	r0, [r0, #2944]	; 0xb80
   19b10:	str	r0, [sp]
   19b14:	ldr	r0, [sp]
   19b18:	ldr	r0, [r0, #2948]	; 0xb84
   19b1c:	bl	123a0 <free@plt>
   19b20:	b	19af4 <flatcc_emitter_clear@@Base+0x40>
   19b24:	ldr	r0, [sp]
   19b28:	bl	123a0 <free@plt>
   19b2c:	ldr	r0, [sp, #4]
   19b30:	movw	lr, #0
   19b34:	and	r1, lr, #255	; 0xff
   19b38:	movw	r2, #36	; 0x24
   19b3c:	bl	12418 <memset@plt>
   19b40:	mov	sp, fp
   19b44:	pop	{fp, pc}

00019b48 <flatcc_emitter@@Base>:
   19b48:	push	{fp, lr}
   19b4c:	mov	fp, sp
   19b50:	sub	sp, sp, #32
   19b54:	ldr	ip, [fp, #8]
   19b58:	str	r0, [fp, #-8]
   19b5c:	str	r1, [fp, #-12]
   19b60:	str	r2, [sp, #16]
   19b64:	str	r3, [sp, #12]
   19b68:	ldr	r0, [fp, #-8]
   19b6c:	str	r0, [sp, #8]
   19b70:	ldr	r0, [fp, #8]
   19b74:	ldr	r1, [sp, #8]
   19b78:	ldr	r2, [r1, #24]
   19b7c:	add	r0, r2, r0
   19b80:	str	r0, [r1, #24]
   19b84:	ldr	r0, [sp, #12]
   19b88:	cmp	r0, #0
   19b8c:	str	ip, [sp]
   19b90:	bge	19c54 <flatcc_emitter@@Base+0x10c>
   19b94:	ldr	r0, [fp, #8]
   19b98:	ldr	r1, [sp, #8]
   19b9c:	ldr	r1, [r1, #12]
   19ba0:	cmp	r0, r1
   19ba4:	bhi	19be8 <flatcc_emitter@@Base+0xa0>
   19ba8:	ldr	r0, [fp, #8]
   19bac:	ldr	r1, [sp, #8]
   19bb0:	ldr	r2, [r1, #8]
   19bb4:	movw	r3, #0
   19bb8:	sub	r0, r3, r0
   19bbc:	add	r0, r2, r0
   19bc0:	str	r0, [r1, #8]
   19bc4:	ldr	r0, [fp, #8]
   19bc8:	ldr	r1, [sp, #8]
   19bcc:	ldr	r2, [r1, #12]
   19bd0:	sub	r0, r2, r0
   19bd4:	str	r0, [r1, #12]
   19bd8:	ldr	r0, [sp, #8]
   19bdc:	ldr	r0, [r0, #8]
   19be0:	str	r0, [sp, #4]
   19be4:	b	19d08 <flatcc_emitter@@Base+0x1c0>
   19be8:	ldr	r0, [sp, #16]
   19bec:	ldr	r1, [fp, #-12]
   19bf0:	add	r0, r1, r0, lsl #3
   19bf4:	str	r0, [fp, #-12]
   19bf8:	ldr	r0, [sp, #16]
   19bfc:	mvn	r1, #0
   19c00:	add	r1, r0, r1
   19c04:	str	r1, [sp, #16]
   19c08:	cmp	r0, #0
   19c0c:	beq	19c50 <flatcc_emitter@@Base+0x108>
   19c10:	ldr	r0, [fp, #-12]
   19c14:	mvn	r1, #7
   19c18:	add	r0, r0, r1
   19c1c:	str	r0, [fp, #-12]
   19c20:	ldr	r0, [sp, #8]
   19c24:	ldr	r1, [fp, #-12]
   19c28:	ldr	r1, [r1]
   19c2c:	ldr	r2, [fp, #-12]
   19c30:	ldr	r2, [r2, #4]
   19c34:	bl	19d74 <flatcc_emitter@@Base+0x22c>
   19c38:	cmp	r0, #0
   19c3c:	beq	19c4c <flatcc_emitter@@Base+0x104>
   19c40:	mvn	r0, #0
   19c44:	str	r0, [fp, #-4]
   19c48:	b	19d68 <flatcc_emitter@@Base+0x220>
   19c4c:	b	19bf8 <flatcc_emitter@@Base+0xb0>
   19c50:	b	19cfc <flatcc_emitter@@Base+0x1b4>
   19c54:	ldr	r0, [fp, #8]
   19c58:	ldr	r1, [sp, #8]
   19c5c:	ldr	r1, [r1, #20]
   19c60:	cmp	r0, r1
   19c64:	bhi	19ca0 <flatcc_emitter@@Base+0x158>
   19c68:	ldr	r0, [sp, #8]
   19c6c:	ldr	r0, [r0, #16]
   19c70:	str	r0, [sp, #4]
   19c74:	ldr	r0, [fp, #8]
   19c78:	ldr	r1, [sp, #8]
   19c7c:	ldr	r2, [r1, #16]
   19c80:	add	r0, r2, r0
   19c84:	str	r0, [r1, #16]
   19c88:	ldr	r0, [fp, #8]
   19c8c:	ldr	r1, [sp, #8]
   19c90:	ldr	r2, [r1, #20]
   19c94:	sub	r0, r2, r0
   19c98:	str	r0, [r1, #20]
   19c9c:	b	19d08 <flatcc_emitter@@Base+0x1c0>
   19ca0:	b	19ca4 <flatcc_emitter@@Base+0x15c>
   19ca4:	ldr	r0, [sp, #16]
   19ca8:	mvn	r1, #0
   19cac:	add	r1, r0, r1
   19cb0:	str	r1, [sp, #16]
   19cb4:	cmp	r0, #0
   19cb8:	beq	19cf8 <flatcc_emitter@@Base+0x1b0>
   19cbc:	ldr	r0, [sp, #8]
   19cc0:	ldr	r1, [fp, #-12]
   19cc4:	ldr	r1, [r1]
   19cc8:	ldr	r2, [fp, #-12]
   19ccc:	ldr	r2, [r2, #4]
   19cd0:	bl	19e80 <flatcc_emitter@@Base+0x338>
   19cd4:	cmp	r0, #0
   19cd8:	beq	19ce8 <flatcc_emitter@@Base+0x1a0>
   19cdc:	mvn	r0, #0
   19ce0:	str	r0, [fp, #-4]
   19ce4:	b	19d68 <flatcc_emitter@@Base+0x220>
   19ce8:	ldr	r0, [fp, #-12]
   19cec:	add	r0, r0, #8
   19cf0:	str	r0, [fp, #-12]
   19cf4:	b	19ca4 <flatcc_emitter@@Base+0x15c>
   19cf8:	b	19cfc <flatcc_emitter@@Base+0x1b4>
   19cfc:	movw	r0, #0
   19d00:	str	r0, [fp, #-4]
   19d04:	b	19d68 <flatcc_emitter@@Base+0x220>
   19d08:	b	19d0c <flatcc_emitter@@Base+0x1c4>
   19d0c:	ldr	r0, [sp, #16]
   19d10:	mvn	r1, #0
   19d14:	add	r1, r0, r1
   19d18:	str	r1, [sp, #16]
   19d1c:	cmp	r0, #0
   19d20:	beq	19d60 <flatcc_emitter@@Base+0x218>
   19d24:	ldr	r0, [sp, #4]
   19d28:	ldr	r1, [fp, #-12]
   19d2c:	ldr	r1, [r1]
   19d30:	ldr	r2, [fp, #-12]
   19d34:	ldr	r2, [r2, #4]
   19d38:	bl	123ac <memcpy@plt>
   19d3c:	ldr	r0, [fp, #-12]
   19d40:	ldr	r0, [r0, #4]
   19d44:	ldr	r1, [sp, #4]
   19d48:	add	r0, r1, r0
   19d4c:	str	r0, [sp, #4]
   19d50:	ldr	r0, [fp, #-12]
   19d54:	add	r0, r0, #8
   19d58:	str	r0, [fp, #-12]
   19d5c:	b	19d0c <flatcc_emitter@@Base+0x1c4>
   19d60:	movw	r0, #0
   19d64:	str	r0, [fp, #-4]
   19d68:	ldr	r0, [fp, #-4]
   19d6c:	mov	sp, fp
   19d70:	pop	{fp, pc}
   19d74:	push	{fp, lr}
   19d78:	mov	fp, sp
   19d7c:	sub	sp, sp, #24
   19d80:	str	r0, [fp, #-8]
   19d84:	str	r1, [sp, #12]
   19d88:	str	r2, [sp, #8]
   19d8c:	ldr	r0, [sp, #8]
   19d90:	ldr	r1, [sp, #12]
   19d94:	add	r0, r1, r0
   19d98:	str	r0, [sp, #12]
   19d9c:	ldr	r0, [sp, #8]
   19da0:	cmp	r0, #0
   19da4:	beq	19e6c <flatcc_emitter@@Base+0x324>
   19da8:	ldr	r0, [sp, #8]
   19dac:	str	r0, [sp, #4]
   19db0:	ldr	r0, [sp, #4]
   19db4:	ldr	r1, [fp, #-8]
   19db8:	ldr	r1, [r1, #12]
   19dbc:	cmp	r0, r1
   19dc0:	bls	19e00 <flatcc_emitter@@Base+0x2b8>
   19dc4:	ldr	r0, [fp, #-8]
   19dc8:	ldr	r0, [r0, #12]
   19dcc:	str	r0, [sp, #4]
   19dd0:	ldr	r0, [sp, #4]
   19dd4:	cmp	r0, #0
   19dd8:	bne	19dfc <flatcc_emitter@@Base+0x2b4>
   19ddc:	ldr	r0, [fp, #-8]
   19de0:	bl	1a0bc <flatcc_emitter_copy_buffer@@Base+0x14c>
   19de4:	cmp	r0, #0
   19de8:	beq	19df8 <flatcc_emitter@@Base+0x2b0>
   19dec:	mvn	r0, #0
   19df0:	str	r0, [fp, #-4]
   19df4:	b	19e74 <flatcc_emitter@@Base+0x32c>
   19df8:	b	19d9c <flatcc_emitter@@Base+0x254>
   19dfc:	b	19e00 <flatcc_emitter@@Base+0x2b8>
   19e00:	ldr	r0, [sp, #4]
   19e04:	ldr	r1, [fp, #-8]
   19e08:	ldr	r2, [r1, #8]
   19e0c:	movw	r3, #0
   19e10:	sub	r0, r3, r0
   19e14:	add	r0, r2, r0
   19e18:	str	r0, [r1, #8]
   19e1c:	ldr	r0, [sp, #4]
   19e20:	ldr	r1, [fp, #-8]
   19e24:	ldr	r2, [r1, #12]
   19e28:	sub	r0, r2, r0
   19e2c:	str	r0, [r1, #12]
   19e30:	ldr	r0, [sp, #4]
   19e34:	ldr	r1, [sp, #12]
   19e38:	sub	r0, r3, r0
   19e3c:	add	r0, r1, r0
   19e40:	str	r0, [sp, #12]
   19e44:	ldr	r0, [sp, #4]
   19e48:	ldr	r1, [sp, #8]
   19e4c:	sub	r0, r1, r0
   19e50:	str	r0, [sp, #8]
   19e54:	ldr	r0, [fp, #-8]
   19e58:	ldr	r0, [r0, #8]
   19e5c:	ldr	r1, [sp, #12]
   19e60:	ldr	r2, [sp, #4]
   19e64:	bl	123ac <memcpy@plt>
   19e68:	b	19d9c <flatcc_emitter@@Base+0x254>
   19e6c:	movw	r0, #0
   19e70:	str	r0, [fp, #-4]
   19e74:	ldr	r0, [fp, #-4]
   19e78:	mov	sp, fp
   19e7c:	pop	{fp, pc}
   19e80:	push	{fp, lr}
   19e84:	mov	fp, sp
   19e88:	sub	sp, sp, #24
   19e8c:	str	r0, [fp, #-8]
   19e90:	str	r1, [sp, #12]
   19e94:	str	r2, [sp, #8]
   19e98:	ldr	r0, [sp, #8]
   19e9c:	cmp	r0, #0
   19ea0:	beq	19f5c <flatcc_emitter@@Base+0x414>
   19ea4:	ldr	r0, [sp, #8]
   19ea8:	str	r0, [sp, #4]
   19eac:	ldr	r0, [sp, #4]
   19eb0:	ldr	r1, [fp, #-8]
   19eb4:	ldr	r1, [r1, #20]
   19eb8:	cmp	r0, r1
   19ebc:	bls	19efc <flatcc_emitter@@Base+0x3b4>
   19ec0:	ldr	r0, [fp, #-8]
   19ec4:	ldr	r0, [r0, #20]
   19ec8:	str	r0, [sp, #4]
   19ecc:	ldr	r0, [sp, #4]
   19ed0:	cmp	r0, #0
   19ed4:	bne	19ef8 <flatcc_emitter@@Base+0x3b0>
   19ed8:	ldr	r0, [fp, #-8]
   19edc:	bl	1a2bc <flatcc_emitter_copy_buffer@@Base+0x34c>
   19ee0:	cmp	r0, #0
   19ee4:	beq	19ef4 <flatcc_emitter@@Base+0x3ac>
   19ee8:	mvn	r0, #0
   19eec:	str	r0, [fp, #-4]
   19ef0:	b	19f64 <flatcc_emitter@@Base+0x41c>
   19ef4:	b	19e98 <flatcc_emitter@@Base+0x350>
   19ef8:	b	19efc <flatcc_emitter@@Base+0x3b4>
   19efc:	ldr	r0, [fp, #-8]
   19f00:	ldr	r0, [r0, #16]
   19f04:	ldr	r1, [sp, #12]
   19f08:	ldr	r2, [sp, #4]
   19f0c:	bl	123ac <memcpy@plt>
   19f10:	ldr	r0, [sp, #4]
   19f14:	ldr	r1, [sp, #8]
   19f18:	sub	r0, r1, r0
   19f1c:	str	r0, [sp, #8]
   19f20:	ldr	r0, [sp, #4]
   19f24:	ldr	r1, [sp, #12]
   19f28:	add	r0, r1, r0
   19f2c:	str	r0, [sp, #12]
   19f30:	ldr	r0, [sp, #4]
   19f34:	ldr	r1, [fp, #-8]
   19f38:	ldr	r2, [r1, #16]
   19f3c:	add	r0, r2, r0
   19f40:	str	r0, [r1, #16]
   19f44:	ldr	r0, [sp, #4]
   19f48:	ldr	r1, [fp, #-8]
   19f4c:	ldr	r2, [r1, #20]
   19f50:	sub	r0, r2, r0
   19f54:	str	r0, [r1, #20]
   19f58:	b	19e98 <flatcc_emitter@@Base+0x350>
   19f5c:	movw	r0, #0
   19f60:	str	r0, [fp, #-4]
   19f64:	ldr	r0, [fp, #-4]
   19f68:	mov	sp, fp
   19f6c:	pop	{fp, pc}

00019f70 <flatcc_emitter_copy_buffer@@Base>:
   19f70:	push	{fp, lr}
   19f74:	mov	fp, sp
   19f78:	sub	sp, sp, #24
   19f7c:	str	r0, [fp, #-8]
   19f80:	str	r1, [sp, #12]
   19f84:	str	r2, [sp, #8]
   19f88:	ldr	r0, [sp, #8]
   19f8c:	ldr	r1, [fp, #-8]
   19f90:	ldr	r1, [r1, #24]
   19f94:	cmp	r0, r1
   19f98:	bcs	19fa8 <flatcc_emitter_copy_buffer@@Base+0x38>
   19f9c:	movw	r0, #0
   19fa0:	str	r0, [fp, #-4]
   19fa4:	b	1a0b0 <flatcc_emitter_copy_buffer@@Base+0x140>
   19fa8:	ldr	r0, [fp, #-8]
   19fac:	ldr	r0, [r0]
   19fb0:	movw	r1, #0
   19fb4:	cmp	r0, r1
   19fb8:	bne	19fc8 <flatcc_emitter_copy_buffer@@Base+0x58>
   19fbc:	movw	r0, #0
   19fc0:	str	r0, [fp, #-4]
   19fc4:	b	1a0b0 <flatcc_emitter_copy_buffer@@Base+0x140>
   19fc8:	ldr	r0, [fp, #-8]
   19fcc:	ldr	r0, [r0]
   19fd0:	ldr	r1, [fp, #-8]
   19fd4:	ldr	r1, [r1, #4]
   19fd8:	cmp	r0, r1
   19fdc:	bne	1a004 <flatcc_emitter_copy_buffer@@Base+0x94>
   19fe0:	ldr	r0, [sp, #12]
   19fe4:	ldr	r1, [fp, #-8]
   19fe8:	ldr	r1, [r1, #8]
   19fec:	ldr	r2, [fp, #-8]
   19ff0:	ldr	r2, [r2, #24]
   19ff4:	bl	123ac <memcpy@plt>
   19ff8:	ldr	r0, [sp, #12]
   19ffc:	str	r0, [fp, #-4]
   1a000:	b	1a0b0 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a004:	ldr	r0, [fp, #-8]
   1a008:	ldr	r0, [r0, #12]
   1a00c:	movw	r1, #2944	; 0xb80
   1a010:	sub	r0, r1, r0
   1a014:	str	r0, [sp]
   1a018:	ldr	r0, [sp, #12]
   1a01c:	ldr	r1, [fp, #-8]
   1a020:	ldr	r1, [r1, #8]
   1a024:	ldr	r2, [sp]
   1a028:	bl	123ac <memcpy@plt>
   1a02c:	ldr	r0, [sp, #12]
   1a030:	ldr	r1, [sp]
   1a034:	add	r0, r0, r1
   1a038:	str	r0, [sp, #12]
   1a03c:	ldr	r0, [fp, #-8]
   1a040:	ldr	r0, [r0]
   1a044:	ldr	r0, [r0, #2944]	; 0xb80
   1a048:	str	r0, [sp, #4]
   1a04c:	ldr	r0, [sp, #4]
   1a050:	ldr	r1, [fp, #-8]
   1a054:	ldr	r1, [r1, #4]
   1a058:	cmp	r0, r1
   1a05c:	beq	1a08c <flatcc_emitter_copy_buffer@@Base+0x11c>
   1a060:	ldr	r0, [sp, #12]
   1a064:	ldr	r1, [sp, #4]
   1a068:	movw	r2, #2944	; 0xb80
   1a06c:	bl	123ac <memcpy@plt>
   1a070:	ldr	r0, [sp, #12]
   1a074:	add	r0, r0, #2944	; 0xb80
   1a078:	str	r0, [sp, #12]
   1a07c:	ldr	r0, [sp, #4]
   1a080:	ldr	r0, [r0, #2944]	; 0xb80
   1a084:	str	r0, [sp, #4]
   1a088:	b	1a04c <flatcc_emitter_copy_buffer@@Base+0xdc>
   1a08c:	ldr	r0, [sp, #12]
   1a090:	ldr	r1, [sp, #4]
   1a094:	ldr	r2, [fp, #-8]
   1a098:	ldr	r2, [r2, #20]
   1a09c:	movw	r3, #2944	; 0xb80
   1a0a0:	sub	r2, r3, r2
   1a0a4:	bl	123ac <memcpy@plt>
   1a0a8:	ldr	r0, [sp, #12]
   1a0ac:	str	r0, [fp, #-4]
   1a0b0:	ldr	r0, [fp, #-4]
   1a0b4:	mov	sp, fp
   1a0b8:	pop	{fp, pc}
   1a0bc:	push	{fp, lr}
   1a0c0:	mov	fp, sp
   1a0c4:	sub	sp, sp, #16
   1a0c8:	str	r0, [sp, #8]
   1a0cc:	movw	r0, #0
   1a0d0:	str	r0, [sp, #4]
   1a0d4:	ldr	r1, [sp, #8]
   1a0d8:	ldr	r1, [r1]
   1a0dc:	cmp	r1, r0
   1a0e0:	beq	1a138 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a0e4:	ldr	r0, [sp, #8]
   1a0e8:	ldr	r0, [r0]
   1a0ec:	ldr	r0, [r0, #2948]	; 0xb84
   1a0f0:	ldr	r1, [sp, #8]
   1a0f4:	ldr	r1, [r1, #4]
   1a0f8:	cmp	r0, r1
   1a0fc:	beq	1a138 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a100:	ldr	r0, [sp, #8]
   1a104:	ldr	r0, [r0]
   1a108:	ldr	r0, [r0, #2952]	; 0xb88
   1a10c:	sub	r0, r0, #2944	; 0xb80
   1a110:	ldr	r1, [sp, #8]
   1a114:	ldr	r1, [r1]
   1a118:	ldr	r1, [r1, #2948]	; 0xb84
   1a11c:	str	r0, [r1, #2952]	; 0xb88
   1a120:	ldr	r0, [sp, #8]
   1a124:	ldr	r0, [r0]
   1a128:	ldr	r0, [r0, #2948]	; 0xb84
   1a12c:	ldr	r1, [sp, #8]
   1a130:	str	r0, [r1]
   1a134:	b	1a268 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a138:	movw	r0, #2956	; 0xb8c
   1a13c:	bl	123d0 <malloc@plt>
   1a140:	str	r0, [sp, #4]
   1a144:	movw	lr, #0
   1a148:	cmp	r0, lr
   1a14c:	bne	1a15c <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1a150:	mvn	r0, #0
   1a154:	str	r0, [fp, #-4]
   1a158:	b	1a2b0 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a15c:	ldr	r0, [sp, #8]
   1a160:	ldr	r1, [r0, #28]
   1a164:	add	r1, r1, #2944	; 0xb80
   1a168:	str	r1, [r0, #28]
   1a16c:	ldr	r0, [sp, #8]
   1a170:	ldr	r0, [r0]
   1a174:	movw	r1, #0
   1a178:	cmp	r0, r1
   1a17c:	beq	1a1d0 <flatcc_emitter_copy_buffer@@Base+0x260>
   1a180:	ldr	r0, [sp, #8]
   1a184:	ldr	r0, [r0, #4]
   1a188:	ldr	r1, [sp, #4]
   1a18c:	str	r0, [r1, #2948]	; 0xb84
   1a190:	ldr	r0, [sp, #8]
   1a194:	ldr	r0, [r0]
   1a198:	ldr	r1, [sp, #4]
   1a19c:	str	r0, [r1, #2944]	; 0xb80
   1a1a0:	ldr	r0, [sp, #4]
   1a1a4:	ldr	r1, [sp, #8]
   1a1a8:	ldr	r1, [r1]
   1a1ac:	str	r0, [r1, #2948]	; 0xb84
   1a1b0:	ldr	r0, [sp, #4]
   1a1b4:	ldr	r1, [sp, #8]
   1a1b8:	ldr	r1, [r1, #4]
   1a1bc:	str	r0, [r1, #2944]	; 0xb80
   1a1c0:	ldr	r0, [sp, #4]
   1a1c4:	ldr	r1, [sp, #8]
   1a1c8:	str	r0, [r1]
   1a1cc:	b	1a268 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a1d0:	ldr	r0, [sp, #4]
   1a1d4:	ldr	r1, [sp, #8]
   1a1d8:	str	r0, [r1]
   1a1dc:	ldr	r0, [sp, #4]
   1a1e0:	ldr	r1, [sp, #8]
   1a1e4:	str	r0, [r1, #4]
   1a1e8:	ldr	r0, [sp, #4]
   1a1ec:	ldr	r1, [sp, #4]
   1a1f0:	str	r0, [r1, #2944]	; 0xb80
   1a1f4:	ldr	r0, [sp, #4]
   1a1f8:	ldr	r1, [sp, #4]
   1a1fc:	str	r0, [r1, #2948]	; 0xb84
   1a200:	ldr	r0, [sp, #8]
   1a204:	ldr	r0, [r0]
   1a208:	add	r0, r0, #1472	; 0x5c0
   1a20c:	ldr	r1, [sp, #8]
   1a210:	str	r0, [r1, #8]
   1a214:	ldr	r0, [sp, #8]
   1a218:	ldr	r0, [r0, #8]
   1a21c:	ldr	r1, [sp, #8]
   1a220:	str	r0, [r1, #16]
   1a224:	ldr	r0, [sp, #8]
   1a228:	movw	r1, #1472	; 0x5c0
   1a22c:	str	r1, [r0, #12]
   1a230:	ldr	r0, [sp, #8]
   1a234:	ldr	r0, [r0, #12]
   1a238:	movw	r1, #2944	; 0xb80
   1a23c:	sub	r0, r1, r0
   1a240:	ldr	r1, [sp, #8]
   1a244:	str	r0, [r1, #20]
   1a248:	ldr	r0, [sp, #8]
   1a24c:	ldr	r0, [r0, #12]
   1a250:	movw	r1, #0
   1a254:	sub	r0, r1, r0
   1a258:	ldr	r2, [sp, #4]
   1a25c:	str	r0, [r2, #2952]	; 0xb88
   1a260:	str	r1, [fp, #-4]
   1a264:	b	1a2b0 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a268:	ldr	r0, [sp, #8]
   1a26c:	ldr	r0, [r0]
   1a270:	add	r0, r0, #2944	; 0xb80
   1a274:	ldr	r1, [sp, #8]
   1a278:	str	r0, [r1, #8]
   1a27c:	ldr	r0, [sp, #8]
   1a280:	movw	r1, #2944	; 0xb80
   1a284:	str	r1, [r0, #12]
   1a288:	ldr	r0, [sp, #8]
   1a28c:	ldr	r0, [r0]
   1a290:	ldr	r0, [r0, #2944]	; 0xb80
   1a294:	ldr	r0, [r0, #2952]	; 0xb88
   1a298:	sub	r0, r0, #2944	; 0xb80
   1a29c:	ldr	r1, [sp, #8]
   1a2a0:	ldr	r1, [r1]
   1a2a4:	str	r0, [r1, #2952]	; 0xb88
   1a2a8:	movw	r0, #0
   1a2ac:	str	r0, [fp, #-4]
   1a2b0:	ldr	r0, [fp, #-4]
   1a2b4:	mov	sp, fp
   1a2b8:	pop	{fp, pc}
   1a2bc:	push	{fp, lr}
   1a2c0:	mov	fp, sp
   1a2c4:	sub	sp, sp, #16
   1a2c8:	str	r0, [sp, #8]
   1a2cc:	movw	r0, #0
   1a2d0:	str	r0, [sp, #4]
   1a2d4:	ldr	r1, [sp, #8]
   1a2d8:	ldr	r1, [r1, #4]
   1a2dc:	cmp	r1, r0
   1a2e0:	beq	1a318 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a2e4:	ldr	r0, [sp, #8]
   1a2e8:	ldr	r0, [r0, #4]
   1a2ec:	ldr	r0, [r0, #2944]	; 0xb80
   1a2f0:	ldr	r1, [sp, #8]
   1a2f4:	ldr	r1, [r1]
   1a2f8:	cmp	r0, r1
   1a2fc:	beq	1a318 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a300:	ldr	r0, [sp, #8]
   1a304:	ldr	r0, [r0, #4]
   1a308:	ldr	r0, [r0, #2944]	; 0xb80
   1a30c:	ldr	r1, [sp, #8]
   1a310:	str	r0, [r1, #4]
   1a314:	b	1a448 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a318:	movw	r0, #2956	; 0xb8c
   1a31c:	bl	123d0 <malloc@plt>
   1a320:	str	r0, [sp, #4]
   1a324:	movw	lr, #0
   1a328:	cmp	r0, lr
   1a32c:	bne	1a33c <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1a330:	mvn	r0, #0
   1a334:	str	r0, [fp, #-4]
   1a338:	b	1a48c <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a33c:	ldr	r0, [sp, #8]
   1a340:	ldr	r1, [r0, #28]
   1a344:	add	r1, r1, #2944	; 0xb80
   1a348:	str	r1, [r0, #28]
   1a34c:	ldr	r0, [sp, #8]
   1a350:	ldr	r0, [r0, #4]
   1a354:	movw	r1, #0
   1a358:	cmp	r0, r1
   1a35c:	beq	1a3b0 <flatcc_emitter_copy_buffer@@Base+0x440>
   1a360:	ldr	r0, [sp, #8]
   1a364:	ldr	r0, [r0, #4]
   1a368:	ldr	r1, [sp, #4]
   1a36c:	str	r0, [r1, #2948]	; 0xb84
   1a370:	ldr	r0, [sp, #8]
   1a374:	ldr	r0, [r0]
   1a378:	ldr	r1, [sp, #4]
   1a37c:	str	r0, [r1, #2944]	; 0xb80
   1a380:	ldr	r0, [sp, #4]
   1a384:	ldr	r1, [sp, #8]
   1a388:	ldr	r1, [r1]
   1a38c:	str	r0, [r1, #2948]	; 0xb84
   1a390:	ldr	r0, [sp, #4]
   1a394:	ldr	r1, [sp, #8]
   1a398:	ldr	r1, [r1, #4]
   1a39c:	str	r0, [r1, #2944]	; 0xb80
   1a3a0:	ldr	r0, [sp, #4]
   1a3a4:	ldr	r1, [sp, #8]
   1a3a8:	str	r0, [r1, #4]
   1a3ac:	b	1a448 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a3b0:	ldr	r0, [sp, #4]
   1a3b4:	ldr	r1, [sp, #8]
   1a3b8:	str	r0, [r1]
   1a3bc:	ldr	r0, [sp, #4]
   1a3c0:	ldr	r1, [sp, #8]
   1a3c4:	str	r0, [r1, #4]
   1a3c8:	ldr	r0, [sp, #4]
   1a3cc:	ldr	r1, [sp, #4]
   1a3d0:	str	r0, [r1, #2944]	; 0xb80
   1a3d4:	ldr	r0, [sp, #4]
   1a3d8:	ldr	r1, [sp, #4]
   1a3dc:	str	r0, [r1, #2948]	; 0xb84
   1a3e0:	ldr	r0, [sp, #8]
   1a3e4:	ldr	r0, [r0]
   1a3e8:	add	r0, r0, #1472	; 0x5c0
   1a3ec:	ldr	r1, [sp, #8]
   1a3f0:	str	r0, [r1, #8]
   1a3f4:	ldr	r0, [sp, #8]
   1a3f8:	ldr	r0, [r0, #8]
   1a3fc:	ldr	r1, [sp, #8]
   1a400:	str	r0, [r1, #16]
   1a404:	ldr	r0, [sp, #8]
   1a408:	movw	r1, #1472	; 0x5c0
   1a40c:	str	r1, [r0, #12]
   1a410:	ldr	r0, [sp, #8]
   1a414:	ldr	r0, [r0, #12]
   1a418:	movw	r1, #2944	; 0xb80
   1a41c:	sub	r0, r1, r0
   1a420:	ldr	r1, [sp, #8]
   1a424:	str	r0, [r1, #20]
   1a428:	ldr	r0, [sp, #8]
   1a42c:	ldr	r0, [r0, #12]
   1a430:	movw	r1, #0
   1a434:	sub	r0, r1, r0
   1a438:	ldr	r2, [sp, #4]
   1a43c:	str	r0, [r2, #2952]	; 0xb88
   1a440:	str	r1, [fp, #-4]
   1a444:	b	1a48c <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a448:	ldr	r0, [sp, #8]
   1a44c:	ldr	r0, [r0, #4]
   1a450:	ldr	r1, [sp, #8]
   1a454:	str	r0, [r1, #16]
   1a458:	ldr	r0, [sp, #8]
   1a45c:	movw	r1, #2944	; 0xb80
   1a460:	str	r1, [r0, #20]
   1a464:	ldr	r0, [sp, #8]
   1a468:	ldr	r0, [r0, #4]
   1a46c:	ldr	r0, [r0, #2948]	; 0xb84
   1a470:	ldr	r0, [r0, #2952]	; 0xb88
   1a474:	add	r0, r0, #2944	; 0xb80
   1a478:	ldr	r1, [sp, #8]
   1a47c:	ldr	r1, [r1, #4]
   1a480:	str	r0, [r1, #2952]	; 0xb88
   1a484:	movw	r0, #0
   1a488:	str	r0, [fp, #-4]
   1a48c:	ldr	r0, [fp, #-4]
   1a490:	mov	sp, fp
   1a494:	pop	{fp, pc}

0001a498 <__libc_csu_init@@Base>:
   1a498:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a49c:	mov	r7, r0
   1a4a0:	ldr	r6, [pc, #72]	; 1a4f0 <__libc_csu_init@@Base+0x58>
   1a4a4:	ldr	r5, [pc, #72]	; 1a4f4 <__libc_csu_init@@Base+0x5c>
   1a4a8:	add	r6, pc, r6
   1a4ac:	add	r5, pc, r5
   1a4b0:	sub	r6, r6, r5
   1a4b4:	mov	r8, r1
   1a4b8:	mov	r9, r2
   1a4bc:	bl	12374 <printf@plt-0x20>
   1a4c0:	asrs	r6, r6, #2
   1a4c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4c8:	mov	r4, #0
   1a4cc:	add	r4, r4, #1
   1a4d0:	ldr	r3, [r5], #4
   1a4d4:	mov	r2, r9
   1a4d8:	mov	r1, r8
   1a4dc:	mov	r0, r7
   1a4e0:	blx	r3
   1a4e4:	cmp	r6, r4
   1a4e8:	bne	1a4cc <__libc_csu_init@@Base+0x34>
   1a4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4f0:	andeq	r1, r1, ip, asr sl
   1a4f4:	andeq	r1, r1, r4, asr sl

0001a4f8 <__libc_csu_fini@@Base>:
   1a4f8:	bx	lr

Disassembly of section .fini:

0001a4fc <.fini>:
   1a4fc:	push	{r3, lr}
   1a500:	pop	{r3, pc}
