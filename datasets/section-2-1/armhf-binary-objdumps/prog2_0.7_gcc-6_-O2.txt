
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

000105dc <.init>:
   105dc:	push	{r3, lr}
   105e0:	bl	106d4 <_start@@Base+0x3c>
   105e4:	pop	{r3, pc}

Disassembly of section .plt:

000105e8 <printf@plt-0x14>:
   105e8:	push	{lr}		; (str lr, [sp, #-4]!)
   105ec:	ldr	lr, [pc, #4]	; 105f8 <printf@plt-0x4>
   105f0:	add	lr, pc, lr
   105f4:	ldr	pc, [lr, #8]!
   105f8:	andeq	r0, r1, r8, lsl #20

000105fc <printf@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2568]!	; 0xa08

00010608 <__libc_start_main@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2560]!	; 0xa00

00010614 <__gmon_start__@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2552]!	; 0x9f8

00010620 <memset@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2544]!	; 0x9f0

0001062c <__isoc99_scanf@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2536]!	; 0x9e8

00010638 <abort@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2528]!	; 0x9e0

Disassembly of section .text:

00010648 <main@@Base>:
   10648:	push	{r4, lr}
   1064c:	sub	sp, sp, #400	; 0x190
   10650:	mov	r2, #400	; 0x190
   10654:	mov	r1, #0
   10658:	mov	r0, sp
   1065c:	bl	10620 <memset@plt>
   10660:	mov	r0, sp
   10664:	bl	10828 <lernotas@@Base>
   10668:	mov	r1, r0
   1066c:	mov	r0, sp
   10670:	bl	107c0 <media@@Base>
   10674:	ldr	r0, [pc, #24]	; 10694 <main@@Base+0x4c>
   10678:	add	r0, pc, r0
   1067c:	vcvt.f64.f32	d7, s0
   10680:	vmov	r2, r3, d7
   10684:	bl	105fc <printf@plt>
   10688:	mov	r0, #0
   1068c:	add	sp, sp, #400	; 0x190
   10690:	pop	{r4, pc}
   10694:			; <UNDEFINED> instruction: 0x000002b4

00010698 <_start@@Base>:
   10698:	mov	fp, #0
   1069c:	mov	lr, #0
   106a0:	pop	{r1}		; (ldr r1, [sp], #4)
   106a4:	mov	r2, sp
   106a8:	push	{r2}		; (str r2, [sp, #-4]!)
   106ac:	push	{r0}		; (str r0, [sp, #-4]!)
   106b0:	ldr	ip, [pc, #16]	; 106c8 <_start@@Base+0x30>
   106b4:	push	{ip}		; (str ip, [sp, #-4]!)
   106b8:	ldr	r0, [pc, #12]	; 106cc <_start@@Base+0x34>
   106bc:	ldr	r3, [pc, #12]	; 106d0 <_start@@Base+0x38>
   106c0:	bl	10608 <__libc_start_main@plt>
   106c4:	bl	10638 <abort@plt>
   106c8:	andeq	r0, r1, ip, lsl r9
   106cc:	andeq	r0, r1, r8, asr #12
   106d0:			; <UNDEFINED> instruction: 0x000108bc
   106d4:	ldr	r3, [pc, #20]	; 106f0 <_start@@Base+0x58>
   106d8:	ldr	r2, [pc, #20]	; 106f4 <_start@@Base+0x5c>
   106dc:	add	r3, pc, r3
   106e0:	ldr	r2, [r3, r2]
   106e4:	cmp	r2, #0
   106e8:	bxeq	lr
   106ec:	b	10614 <__gmon_start__@plt>
   106f0:	andeq	r0, r1, ip, lsl r9
   106f4:	andeq	r0, r0, r4, lsr #32
   106f8:	ldr	r3, [pc, #28]	; 1071c <_start@@Base+0x84>
   106fc:	ldr	r0, [pc, #28]	; 10720 <_start@@Base+0x88>
   10700:	sub	r3, r3, r0
   10704:	cmp	r3, #6
   10708:	bxls	lr
   1070c:	ldr	r3, [pc, #16]	; 10724 <_start@@Base+0x8c>
   10710:	cmp	r3, #0
   10714:	bxeq	lr
   10718:	bx	r3
   1071c:	andeq	r1, r2, r3, lsr r0
   10720:	andeq	r1, r2, r0, lsr r0
   10724:	andeq	r0, r0, r0
   10728:	ldr	r1, [pc, #36]	; 10754 <_start@@Base+0xbc>
   1072c:	ldr	r0, [pc, #36]	; 10758 <_start@@Base+0xc0>
   10730:	sub	r1, r1, r0
   10734:	asr	r1, r1, #2
   10738:	add	r1, r1, r1, lsr #31
   1073c:	asrs	r1, r1, #1
   10740:	bxeq	lr
   10744:	ldr	r3, [pc, #16]	; 1075c <_start@@Base+0xc4>
   10748:	cmp	r3, #0
   1074c:	bxeq	lr
   10750:	bx	r3
   10754:	andeq	r1, r2, r0, lsr r0
   10758:	andeq	r1, r2, r0, lsr r0
   1075c:	andeq	r0, r0, r0
   10760:	push	{r4, lr}
   10764:	ldr	r4, [pc, #24]	; 10784 <_start@@Base+0xec>
   10768:	ldrb	r3, [r4]
   1076c:	cmp	r3, #0
   10770:	popne	{r4, pc}
   10774:	bl	106f8 <_start@@Base+0x60>
   10778:	mov	r3, #1
   1077c:	strb	r3, [r4]
   10780:	pop	{r4, pc}
   10784:	andeq	r1, r2, r0, lsr r0
   10788:	ldr	r0, [pc, #40]	; 107b8 <_start@@Base+0x120>
   1078c:	ldr	r3, [r0]
   10790:	cmp	r3, #0
   10794:	bne	1079c <_start@@Base+0x104>
   10798:	b	10728 <_start@@Base+0x90>
   1079c:	ldr	r3, [pc, #24]	; 107bc <_start@@Base+0x124>
   107a0:	cmp	r3, #0
   107a4:	beq	10798 <_start@@Base+0x100>
   107a8:	push	{r4, lr}
   107ac:	blx	r3
   107b0:	pop	{r4, lr}
   107b4:	b	10728 <_start@@Base+0x90>
   107b8:	andeq	r0, r2, r4, lsl pc
   107bc:	andeq	r0, r0, r0

000107c0 <media@@Base>:
   107c0:	cmp	r1, #0
   107c4:	vldr	s14, [pc, #84]	; 10820 <media@@Base+0x60>
   107c8:	ble	10808 <media@@Base+0x48>
   107cc:	vldr	d5, [pc, #68]	; 10818 <media@@Base+0x58>
   107d0:	vldr	s9, [pc, #76]	; 10824 <media@@Base+0x64>
   107d4:	add	r3, r0, r1, lsl #2
   107d8:	vldmia	r0!, {s15}
   107dc:	vcvt.f64.f32	d6, s15
   107e0:	vcmpe.f64	d6, d5
   107e4:	vmrs	APSR_nzcv, fpscr
   107e8:	blt	107fc <media@@Base+0x3c>
   107ec:	vcmpe.f32	s15, s9
   107f0:	vmrs	APSR_nzcv, fpscr
   107f4:	vaddmi.f32	s14, s14, s9
   107f8:	bmi	10800 <media@@Base+0x40>
   107fc:	vadd.f32	s14, s14, s15
   10800:	cmp	r0, r3
   10804:	bne	107d8 <media@@Base+0x18>
   10808:	vmov	s15, r1
   1080c:	vcvt.f32.s32	s0, s15
   10810:	vdiv.f32	s0, s14, s0
   10814:	bx	lr
   10818:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1081c:	mlami	r2, r9, r9, r9
   10820:	andeq	r0, r0, r0
   10824:	tstmi	r8, r0

00010828 <lernotas@@Base>:
   10828:	push	{r4, r5, r6, r7, r8, lr}
   1082c:	vpush	{d8-d9}
   10830:	ldr	r6, [pc, #128]	; 108b8 <lernotas@@Base+0x90>
   10834:	mov	r5, r0
   10838:	mov	r4, #0
   1083c:	sub	sp, sp, #8
   10840:	add	r8, sp, #4
   10844:	mov	r7, sp
   10848:	add	r6, pc, r6
   1084c:	vldr	d9, [pc, #84]	; 108a8 <lernotas@@Base+0x80>
   10850:	vldr	d8, [pc, #88]	; 108b0 <lernotas@@Base+0x88>
   10854:	b	1087c <lernotas@@Base+0x54>
   10858:	vldr	s14, [sp, #4]
   1085c:	vldr	s12, [sp]
   10860:	add	r4, r4, #1
   10864:	vcvt.f64.f32	d7, s14
   10868:	vcvt.f64.f32	d6, s12
   1086c:	vmul.f64	d7, d7, d8
   10870:	vmla.f64	d7, d6, d9
   10874:	vcvt.f32.f64	s14, d7
   10878:	vstmia	r5!, {s14}
   1087c:	mov	r2, r8
   10880:	mov	r1, r7
   10884:	mov	r0, r6
   10888:	bl	1062c <__isoc99_scanf@plt>
   1088c:	cmp	r0, #2
   10890:	beq	10858 <lernotas@@Base+0x30>
   10894:	mov	r0, r4
   10898:	add	sp, sp, #8
   1089c:	vpop	{d8-d9}
   108a0:	pop	{r4, r5, r6, r7, r8, pc}
   108a4:	nop			; (mov r0, r0)
   108a8:	teqcc	r3, #-872415232	; 0xcc000000
   108ac:	svccc	0x00e33333
   108b0:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   108b4:	svccc	0x00d99999
   108b8:	ldrdeq	r0, [r0], -ip

000108bc <__libc_csu_init@@Base>:
   108bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108c0:	mov	r7, r0
   108c4:	ldr	r6, [pc, #72]	; 10914 <__libc_csu_init@@Base+0x58>
   108c8:	ldr	r5, [pc, #72]	; 10918 <__libc_csu_init@@Base+0x5c>
   108cc:	add	r6, pc, r6
   108d0:	add	r5, pc, r5
   108d4:	sub	r6, r6, r5
   108d8:	mov	r8, r1
   108dc:	mov	r9, r2
   108e0:	bl	105dc <printf@plt-0x20>
   108e4:	asrs	r6, r6, #2
   108e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108ec:	mov	r4, #0
   108f0:	add	r4, r4, #1
   108f4:	ldr	r3, [r5], #4
   108f8:	mov	r2, r9
   108fc:	mov	r1, r8
   10900:	mov	r0, r7
   10904:	blx	r3
   10908:	cmp	r6, r4
   1090c:	bne	108f0 <__libc_csu_init@@Base+0x34>
   10910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10914:	andeq	r0, r1, ip, lsr r6
   10918:	andeq	r0, r1, r4, lsr r6

0001091c <__libc_csu_fini@@Base>:
   1091c:	bx	lr

Disassembly of section .fini:

00010920 <.fini>:
   10920:	push	{r3, lr}
   10924:	pop	{r3, pc}
