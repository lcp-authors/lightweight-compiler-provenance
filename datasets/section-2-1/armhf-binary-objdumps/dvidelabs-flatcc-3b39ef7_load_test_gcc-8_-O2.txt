
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <.init>:
   11f40:	push	{r3, lr}
   11f44:	bl	126f0 <_start@@Base+0x3c>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <strcmp@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <strcmp@plt-0x4>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	r7, r1, r4, lsr #1

00011f60 <strcmp@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #94208	; 0x17000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <printf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #94208	; 0x17000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <fopen@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #94208	; 0x17000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <free@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #94208	; 0x17000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <memcpy@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #94208	; 0x17000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <memcmp@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #94208	; 0x17000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <realloc@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #94208	; 0x17000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <fwrite@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <gettimeofday@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <puts@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <malloc@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <__libc_start_main@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <strlen@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <posix_memalign@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #94208	; 0x17000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <memset@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #94208	; 0x17000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <memchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #94208	; 0x17000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <fclose@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #94208	; 0x17000
   12034:	ldr	pc, [ip, #28]!

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #94208	; 0x17000
   12040:	ldr	pc, [ip, #20]!

00012044 <__assert_fail@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #94208	; 0x17000
   1204c:	ldr	pc, [ip, #12]!

Disassembly of section .text:

00012050 <main@@Base>:
   12050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12054:	strd	r6, [sp, #8]
   12058:	strd	r8, [sp, #16]
   1205c:	strd	sl, [sp, #24]
   12060:	str	lr, [sp, #32]
   12064:	vpush	{d8-d10}
   12068:	sub	sp, sp, #268	; 0x10c
   1206c:	add	r8, sp, #32
   12070:	mov	r0, r8
   12074:	bl	13290 <flatcc_builder_init@@Base>
   12078:	mov	r0, r8
   1207c:	bl	12828 <_start@@Base+0x174>
   12080:	add	r1, sp, #28
   12084:	mov	r0, r8
   12088:	bl	16fa8 <flatcc_builder_finalize_buffer@@Base>
   1208c:	mov	r9, r0
   12090:	ldr	r1, [pc, #1384]	; 12600 <main@@Base+0x5b0>
   12094:	ldr	r0, [pc, #1384]	; 12604 <main@@Base+0x5b4>
   12098:	add	r1, pc, r1
   1209c:	add	r0, pc, r0
   120a0:	bl	11f78 <fopen@plt>
   120a4:	subs	r4, r0, #0
   120a8:	beq	121a0 <main@@Base+0x150>
   120ac:	mov	r3, r4
   120b0:	mov	r1, #1
   120b4:	ldr	r2, [sp, #28]
   120b8:	mov	r0, r9
   120bc:	bl	11fb4 <fwrite@plt>
   120c0:	ldr	r5, [sp, #28]
   120c4:	mov	r6, r0
   120c8:	mov	r0, r4
   120cc:	bl	1202c <fclose@plt>
   120d0:	cmp	r6, r5
   120d4:	beq	120f0 <main@@Base+0xa0>
   120d8:	mov	r0, r8
   120dc:	mov	r5, #1
   120e0:	bl	13440 <flatcc_builder_clear@@Base>
   120e4:	mov	r0, r9
   120e8:	bl	11f84 <free@plt>
   120ec:	b	121b4 <main@@Base+0x164>
   120f0:	ldr	r0, [pc, #1296]	; 12608 <main@@Base+0x5b8>
   120f4:	movw	r3, #20301	; 0x4f4d
   120f8:	movt	r3, #21326	; 0x534e
   120fc:	str	r3, [sp, #12]
   12100:	movw	r3, #34464	; 0x86a0
   12104:	movt	r3, #1
   12108:	ldr	r1, [sp, #28]
   1210c:	str	r3, [sp, #20]
   12110:	mov	r3, #10
   12114:	add	r0, pc, r0
   12118:	ldr	r7, [pc, #1260]	; 1260c <main@@Base+0x5bc>
   1211c:	str	r3, [sp]
   12120:	bl	11f6c <printf@plt>
   12124:	ldr	r0, [pc, #1252]	; 12610 <main@@Base+0x5c0>
   12128:	add	r7, pc, r7
   1212c:	add	r7, r7, #8
   12130:	add	r0, pc, r0
   12134:	bl	11fcc <puts@plt>
   12138:	bl	127a8 <_start@@Base+0xf4>
   1213c:	ldr	r3, [pc, #1232]	; 12614 <main@@Base+0x5c4>
   12140:	vmov.f64	d8, d0
   12144:	str	r8, [sp, #4]
   12148:	add	r3, pc, r3
   1214c:	str	r3, [sp, #16]
   12150:	ldr	r4, [sp, #4]
   12154:	mov	r0, r4
   12158:	bl	12828 <_start@@Base+0x174>
   1215c:	mov	r1, r9
   12160:	mov	r0, r4
   12164:	ldr	r2, [sp, #28]
   12168:	bl	16f3c <flatcc_builder_copy_buffer@@Base>
   1216c:	ldr	r3, [r9, #4]
   12170:	ldr	r2, [sp, #12]
   12174:	cmp	r3, r2
   12178:	beq	121e4 <main@@Base+0x194>
   1217c:	ldr	r3, [pc, #1172]	; 12618 <main@@Base+0x5c8>
   12180:	movw	r2, #699	; 0x2bb
   12184:	ldr	r1, [pc, #1168]	; 1261c <main@@Base+0x5cc>
   12188:	ldr	r0, [pc, #1168]	; 12620 <main@@Base+0x5d0>
   1218c:	add	r3, pc, r3
   12190:	add	r3, r3, #68	; 0x44
   12194:	add	r1, pc, r1
   12198:	add	r0, pc, r0
   1219c:	bl	12044 <__assert_fail@plt>
   121a0:	mov	r0, r8
   121a4:	mvn	r5, #0
   121a8:	bl	13440 <flatcc_builder_clear@@Base>
   121ac:	mov	r0, r9
   121b0:	bl	11f84 <free@plt>
   121b4:	ldr	r0, [pc, #1128]	; 12624 <main@@Base+0x5d4>
   121b8:	add	r0, pc, r0
   121bc:	bl	11fcc <puts@plt>
   121c0:	mov	r0, r5
   121c4:	add	sp, sp, #268	; 0x10c
   121c8:	vpop	{d8-d10}
   121cc:	ldrd	r4, [sp]
   121d0:	ldrd	r6, [sp, #8]
   121d4:	ldrd	r8, [sp, #16]
   121d8:	ldrd	sl, [sp, #24]
   121dc:	add	sp, sp, #32
   121e0:	pop	{pc}		; (ldr pc, [sp], #4)
   121e4:	ldr	r3, [r9]
   121e8:	adds	r4, r9, r3
   121ec:	beq	1217c <main@@Base+0x12c>
   121f0:	ldr	r5, [r9, r3]
   121f4:	sub	r5, r4, r5
   121f8:	ldrh	r6, [r5]
   121fc:	cmp	r6, #11
   12200:	bls	125b8 <main@@Base+0x568>
   12204:	ldrh	r3, [r5, #10]
   12208:	cmp	r3, #0
   1220c:	beq	125b8 <main@@Base+0x568>
   12210:	ldr	r0, [r4, r3]
   12214:	add	r3, r4, r3
   12218:	ldr	r1, [sp, #16]
   1221c:	add	r0, r0, #4
   12220:	add	r0, r3, r0
   12224:	bl	11f60 <strcmp@plt>
   12228:	cmp	r0, #0
   1222c:	bne	12594 <main@@Base+0x544>
   12230:	cmp	r6, #27
   12234:	bls	124c0 <main@@Base+0x470>
   12238:	ldrh	sl, [r5, #26]
   1223c:	cmp	sl, #0
   12240:	beq	124c0 <main@@Base+0x470>
   12244:	ldr	r3, [r4, sl]
   12248:	add	sl, r4, sl
   1224c:	add	r3, r3, #4
   12250:	adds	sl, sl, r3
   12254:	beq	124c0 <main@@Base+0x470>
   12258:	ldr	r3, [sl, #-4]
   1225c:	cmp	r3, #1000	; 0x3e8
   12260:	bne	124c0 <main@@Base+0x470>
   12264:	ldr	r6, [pc, #956]	; 12628 <main@@Base+0x5d8>
   12268:	add	r3, sl, #4000	; 0xfa0
   1226c:	str	r3, [sp, #8]
   12270:	add	r6, pc, r6
   12274:	mov	r2, sl
   12278:	add	sl, sl, #4
   1227c:	ldr	r1, [r2]
   12280:	adds	r3, r2, r1
   12284:	beq	1217c <main@@Base+0x12c>
   12288:	ldr	r1, [r2, r1]
   1228c:	sub	r1, r3, r1
   12290:	ldrh	r0, [r1]
   12294:	cmp	r0, #11
   12298:	bls	125b8 <main@@Base+0x568>
   1229c:	ldrh	r2, [r1, #10]
   122a0:	cmp	r2, #0
   122a4:	beq	125b8 <main@@Base+0x568>
   122a8:	ldr	r8, [r3, r2]
   122ac:	cmp	r0, #15
   122b0:	add	r2, r3, r2
   122b4:	movls	r4, #0
   122b8:	add	r8, r8, #4
   122bc:	add	r8, r2, r8
   122c0:	bls	122e0 <main@@Base+0x290>
   122c4:	ldrh	r4, [r1, #14]
   122c8:	cmp	r4, #0
   122cc:	beq	122e0 <main@@Base+0x290>
   122d0:	ldr	r2, [r3, r4]
   122d4:	add	r4, r3, r4
   122d8:	add	r3, r2, #4
   122dc:	add	r4, r4, r3
   122e0:	cmp	r8, #0
   122e4:	beq	12478 <main@@Base+0x428>
   122e8:	ldr	r3, [r8, #-4]
   122ec:	cmp	r3, #700	; 0x2bc
   122f0:	bne	12478 <main@@Base+0x428>
   122f4:	cmp	r4, #0
   122f8:	beq	1249c <main@@Base+0x44c>
   122fc:	ldr	r3, [r4, #-4]
   12300:	ldr	r2, [sp, #20]
   12304:	cmp	r3, r2
   12308:	bne	1249c <main@@Base+0x44c>
   1230c:	mov	r5, r8
   12310:	mov	fp, #0
   12314:	mov	r2, #7
   12318:	mov	r1, r6
   1231c:	mov	r0, r5
   12320:	bl	11f9c <memcmp@plt>
   12324:	cmp	r0, #0
   12328:	bne	1254c <main@@Base+0x4fc>
   1232c:	add	fp, fp, #1
   12330:	add	r5, r5, #7
   12334:	cmp	fp, #100	; 0x64
   12338:	bne	12314 <main@@Base+0x2c4>
   1233c:	add	r5, r4, #99328	; 0x18400
   12340:	add	r5, r5, #672	; 0x2a0
   12344:	mov	r2, #1000	; 0x3e8
   12348:	mov	r1, r7
   1234c:	mov	r0, r4
   12350:	bl	11f9c <memcmp@plt>
   12354:	cmp	r0, #0
   12358:	bne	12528 <main@@Base+0x4d8>
   1235c:	add	r4, r4, #1000	; 0x3e8
   12360:	cmp	r4, r5
   12364:	bne	12344 <main@@Base+0x2f4>
   12368:	ldr	r3, [sp, #8]
   1236c:	cmp	sl, r3
   12370:	bne	12274 <main@@Base+0x224>
   12374:	ldr	r3, [sp]
   12378:	subs	r3, r3, #1
   1237c:	str	r3, [sp]
   12380:	bne	12150 <main@@Base+0x100>
   12384:	mov	r5, r0
   12388:	ldr	r8, [sp, #4]
   1238c:	bl	127a8 <_start@@Base+0xf4>
   12390:	ldr	r1, [pc, #660]	; 1262c <main@@Base+0x5dc>
   12394:	vsub.f64	d8, d0, d8
   12398:	ldr	r0, [pc, #656]	; 12630 <main@@Base+0x5e0>
   1239c:	ldr	r4, [sp, #28]
   123a0:	add	r1, pc, r1
   123a4:	vldr	d9, [pc, #564]	; 125e0 <main@@Base+0x590>
   123a8:	add	r0, pc, r0
   123ac:	bl	11f6c <printf@plt>
   123b0:	ldr	r0, [pc, #636]	; 12634 <main@@Base+0x5e4>
   123b4:	vmov	r2, r3, d8
   123b8:	vldr	d10, [pc, #552]	; 125e8 <main@@Base+0x598>
   123bc:	add	r0, pc, r0
   123c0:	bl	11f6c <printf@plt>
   123c4:	ldr	r0, [pc, #620]	; 12638 <main@@Base+0x5e8>
   123c8:	mov	r1, #10
   123cc:	add	r0, pc, r0
   123d0:	bl	11f6c <printf@plt>
   123d4:	ldr	r0, [pc, #608]	; 1263c <main@@Base+0x5ec>
   123d8:	mov	r1, r4
   123dc:	add	r0, pc, r0
   123e0:	bl	11f6c <printf@plt>
   123e4:	vmov	s15, r4
   123e8:	ldr	r0, [pc, #592]	; 12640 <main@@Base+0x5f0>
   123ec:	add	r0, pc, r0
   123f0:	vcvt.f64.u32	d7, s15
   123f4:	vmul.f64	d7, d7, d9
   123f8:	vdiv.f64	d6, d7, d10
   123fc:	vdiv.f64	d7, d6, d8
   12400:	vmov	r2, r3, d7
   12404:	bl	11f6c <printf@plt>
   12408:	vdiv.f64	d7, d9, d8
   1240c:	ldr	r0, [pc, #560]	; 12644 <main@@Base+0x5f4>
   12410:	add	r0, pc, r0
   12414:	vmov	r2, r3, d7
   12418:	bl	11f6c <printf@plt>
   1241c:	vldr	d6, [pc, #460]	; 125f0 <main@@Base+0x5a0>
   12420:	vldr	d5, [pc, #464]	; 125f8 <main@@Base+0x5a8>
   12424:	vmul.f64	d8, d8, d6
   12428:	vdiv.f64	d7, d8, d9
   1242c:	vcmpe.f64	d7, d5
   12430:	vmrs	APSR_nzcv, fpscr
   12434:	bmi	12514 <main@@Base+0x4c4>
   12438:	vcmpe.f64	d7, d10
   1243c:	vmrs	APSR_nzcv, fpscr
   12440:	bmi	124fc <main@@Base+0x4ac>
   12444:	vcmpe.f64	d7, d6
   12448:	vmrs	APSR_nzcv, fpscr
   1244c:	bpl	124e4 <main@@Base+0x494>
   12450:	vdiv.f64	d7, d7, d10
   12454:	ldr	r0, [pc, #492]	; 12648 <main@@Base+0x5f8>
   12458:	add	r0, pc, r0
   1245c:	vmov	r2, r3, d7
   12460:	bl	11f6c <printf@plt>
   12464:	mov	r0, r8
   12468:	bl	13440 <flatcc_builder_clear@@Base>
   1246c:	mov	r0, r9
   12470:	bl	11f84 <free@plt>
   12474:	b	121c0 <main@@Base+0x170>
   12478:	ldr	r3, [pc, #460]	; 1264c <main@@Base+0x5fc>
   1247c:	mov	r2, #74	; 0x4a
   12480:	ldr	r1, [pc, #456]	; 12650 <main@@Base+0x600>
   12484:	ldr	r0, [pc, #456]	; 12654 <main@@Base+0x604>
   12488:	add	r3, pc, r3
   1248c:	add	r3, r3, #104	; 0x68
   12490:	add	r1, pc, r1
   12494:	add	r0, pc, r0
   12498:	bl	12044 <__assert_fail@plt>
   1249c:	ldr	r3, [pc, #436]	; 12658 <main@@Base+0x608>
   124a0:	mov	r2, #78	; 0x4e
   124a4:	ldr	r1, [pc, #432]	; 1265c <main@@Base+0x60c>
   124a8:	ldr	r0, [pc, #432]	; 12660 <main@@Base+0x610>
   124ac:	add	r3, pc, r3
   124b0:	add	r3, r3, #104	; 0x68
   124b4:	add	r1, pc, r1
   124b8:	add	r0, pc, r0
   124bc:	bl	12044 <__assert_fail@plt>
   124c0:	ldr	r3, [pc, #412]	; 12664 <main@@Base+0x614>
   124c4:	mov	r2, #143	; 0x8f
   124c8:	ldr	r1, [pc, #408]	; 12668 <main@@Base+0x618>
   124cc:	ldr	r0, [pc, #408]	; 1266c <main@@Base+0x61c>
   124d0:	add	r3, pc, r3
   124d4:	add	r3, r3, #96	; 0x60
   124d8:	add	r1, pc, r1
   124dc:	add	r0, pc, r0
   124e0:	bl	12044 <__assert_fail@plt>
   124e4:	vdiv.f64	d7, d7, d6
   124e8:	ldr	r0, [pc, #384]	; 12670 <main@@Base+0x620>
   124ec:	add	r0, pc, r0
   124f0:	vmov	r2, r3, d7
   124f4:	bl	11f6c <printf@plt>
   124f8:	b	12464 <main@@Base+0x414>
   124fc:	vdiv.f64	d7, d7, d5
   12500:	ldr	r0, [pc, #364]	; 12674 <main@@Base+0x624>
   12504:	add	r0, pc, r0
   12508:	vmov	r2, r3, d7
   1250c:	bl	11f6c <printf@plt>
   12510:	b	12464 <main@@Base+0x414>
   12514:	ldr	r0, [pc, #348]	; 12678 <main@@Base+0x628>
   12518:	vmov	r2, r3, d7
   1251c:	add	r0, pc, r0
   12520:	bl	11f6c <printf@plt>
   12524:	b	12464 <main@@Base+0x414>
   12528:	ldr	r3, [pc, #332]	; 1267c <main@@Base+0x62c>
   1252c:	mov	r2, #91	; 0x5b
   12530:	ldr	r1, [pc, #328]	; 12680 <main@@Base+0x630>
   12534:	ldr	r0, [pc, #328]	; 12684 <main@@Base+0x634>
   12538:	add	r3, pc, r3
   1253c:	add	r3, r3, #104	; 0x68
   12540:	add	r1, pc, r1
   12544:	add	r0, pc, r0
   12548:	bl	12044 <__assert_fail@plt>
   1254c:	ldr	r0, [pc, #308]	; 12688 <main@@Base+0x638>
   12550:	mov	r2, r8
   12554:	mov	r1, fp
   12558:	add	r0, pc, r0
   1255c:	bl	11f6c <printf@plt>
   12560:	ldr	r0, [pc, #292]	; 1268c <main@@Base+0x63c>
   12564:	sub	r1, r5, r9
   12568:	add	r0, pc, r0
   1256c:	bl	11f6c <printf@plt>
   12570:	ldr	r3, [pc, #280]	; 12690 <main@@Base+0x640>
   12574:	mov	r2, #85	; 0x55
   12578:	ldr	r1, [pc, #276]	; 12694 <main@@Base+0x644>
   1257c:	ldr	r0, [pc, #276]	; 12698 <main@@Base+0x648>
   12580:	add	r3, pc, r3
   12584:	add	r3, r3, #104	; 0x68
   12588:	add	r1, pc, r1
   1258c:	add	r0, pc, r0
   12590:	bl	12044 <__assert_fail@plt>
   12594:	ldr	r3, [pc, #256]	; 1269c <main@@Base+0x64c>
   12598:	mov	r2, #139	; 0x8b
   1259c:	ldr	r1, [pc, #252]	; 126a0 <main@@Base+0x650>
   125a0:	ldr	r0, [pc, #252]	; 126a4 <main@@Base+0x654>
   125a4:	add	r3, pc, r3
   125a8:	add	r3, r3, #96	; 0x60
   125ac:	add	r1, pc, r1
   125b0:	add	r0, pc, r0
   125b4:	bl	12044 <__assert_fail@plt>
   125b8:	ldr	r3, [pc, #232]	; 126a8 <main@@Base+0x658>
   125bc:	movw	r2, #699	; 0x2bb
   125c0:	ldr	r1, [pc, #228]	; 126ac <main@@Base+0x65c>
   125c4:	ldr	r0, [pc, #228]	; 126b0 <main@@Base+0x660>
   125c8:	add	r3, pc, r3
   125cc:	add	r3, r3, #68	; 0x44
   125d0:	add	r1, pc, r1
   125d4:	add	r0, pc, r0
   125d8:	bl	12044 <__assert_fail@plt>
   125dc:	nop	{0}
   125e0:	andeq	r0, r0, r0
   125e4:	eormi	r0, r4, r0
   125e8:	andeq	r0, r0, r0
   125ec:	smlawbmi	lr, r0, r4, r8
   125f0:	andeq	r0, r0, r0
   125f4:	bicmi	ip, sp, r5, ror #26
   125f8:	andeq	r0, r0, r0
   125fc:	addmi	r4, pc, r0
   12600:	andeq	r5, r0, ip, ror r9
   12604:	andeq	r5, r0, ip, ror r9
   12608:	andeq	r5, r0, ip, lsl r9
   1260c:	andeq	r6, r1, r8, asr #30
   12610:	andeq	r5, r0, r4, lsl r9
   12614:	andeq	r5, r0, ip, lsr #14
   12618:	andeq	r5, r0, r8, ror #12
   1261c:	andeq	r5, r0, r4, asr #17
   12620:	andeq	r5, r0, r8, lsr r9
   12624:			; <UNDEFINED> instruction: 0x00005ab4
   12628:	andeq	r5, r0, r4, lsl r6
   1262c:			; <UNDEFINED> instruction: 0x000057b8
   12630:	ldrdeq	r5, [r0], -ip
   12634:	ldrdeq	r5, [r0], -r8
   12638:	andeq	r5, r0, r0, ror #15
   1263c:	andeq	r5, r0, r0, ror #15
   12640:	andeq	r5, r0, r4, ror #15
   12644:	ldrdeq	r5, [r0], -r8
   12648:	andeq	r5, r0, r4, ror #15
   1264c:	andeq	r5, r0, ip, ror #6
   12650:	andeq	r5, r0, r8, lsl r5
   12654:	andeq	r5, r0, r4, asr #31
   12658:	andeq	r5, r0, r8, asr #6
   1265c:	strdeq	r5, [r0], -r4
   12660:	andeq	r5, r0, r0, lsr #31
   12664:	andeq	r5, r0, r4, lsr #6
   12668:	ldrdeq	r5, [r0], -r0
   1266c:	andeq	r5, r0, r0, asr #12
   12670:	andeq	r5, r0, r8, ror #14
   12674:	andeq	r5, r0, r0, lsr #14
   12678:	strdeq	r5, [r0], -r0
   1267c:			; <UNDEFINED> instruction: 0x000052bc
   12680:	andeq	r5, r0, r8, ror #8
   12684:	andeq	r5, r0, r4, lsl pc
   12688:	ldrdeq	r5, [r0], -r0
   1268c:	andeq	r5, r0, r0, ror #11
   12690:	andeq	r5, r0, r4, ror r2
   12694:	andeq	r5, r0, r0, lsr #8
   12698:	andeq	r5, r0, ip, asr #29
   1269c:	andeq	r5, r0, r0, asr r2
   126a0:	strdeq	r5, [r0], -ip
   126a4:	andeq	r5, r0, ip, ror #10
   126a8:	andeq	r5, r0, ip, lsr #4
   126ac:	andeq	r5, r0, r8, lsl #9
   126b0:	andeq	r5, r0, r4, lsr #10

000126b4 <_start@@Base>:
   126b4:	mov	fp, #0
   126b8:	mov	lr, #0
   126bc:	pop	{r1}		; (ldr r1, [sp], #4)
   126c0:	mov	r2, sp
   126c4:	push	{r2}		; (str r2, [sp, #-4]!)
   126c8:	push	{r0}		; (str r0, [sp, #-4]!)
   126cc:	ldr	ip, [pc, #16]	; 126e4 <_start@@Base+0x30>
   126d0:	push	{ip}		; (str ip, [sp, #-4]!)
   126d4:	ldr	r0, [pc, #12]	; 126e8 <_start@@Base+0x34>
   126d8:	ldr	r3, [pc, #12]	; 126ec <_start@@Base+0x38>
   126dc:	bl	11fe4 <__libc_start_main@plt>
   126e0:	bl	12038 <abort@plt>
   126e4:	andeq	r7, r1, ip, ror #15
   126e8:	andeq	r2, r1, r0, asr r0
   126ec:	andeq	r7, r1, ip, lsl #15
   126f0:	ldr	r3, [pc, #20]	; 1270c <_start@@Base+0x58>
   126f4:	ldr	r2, [pc, #20]	; 12710 <_start@@Base+0x5c>
   126f8:	add	r3, pc, r3
   126fc:	ldr	r2, [r3, r2]
   12700:	cmp	r2, #0
   12704:	bxeq	lr
   12708:	b	11ff0 <__gmon_start__@plt>
   1270c:	andeq	r6, r1, r0, lsl #18
   12710:	andeq	r0, r0, r0, rrx
   12714:	ldr	r0, [pc, #24]	; 12734 <_start@@Base+0x80>
   12718:	ldr	r3, [pc, #24]	; 12738 <_start@@Base+0x84>
   1271c:	cmp	r3, r0
   12720:	bxeq	lr
   12724:	ldr	r3, [pc, #16]	; 1273c <_start@@Base+0x88>
   12728:	cmp	r3, #0
   1272c:	bxeq	lr
   12730:	bx	r3
   12734:	andeq	r9, r2, r4, ror r0
   12738:	andeq	r9, r2, r4, ror r0
   1273c:	andeq	r0, r0, r0
   12740:	ldr	r0, [pc, #36]	; 1276c <_start@@Base+0xb8>
   12744:	ldr	r1, [pc, #36]	; 12770 <_start@@Base+0xbc>
   12748:	sub	r1, r1, r0
   1274c:	asr	r1, r1, #2
   12750:	add	r1, r1, r1, lsr #31
   12754:	asrs	r1, r1, #1
   12758:	bxeq	lr
   1275c:	ldr	r3, [pc, #16]	; 12774 <_start@@Base+0xc0>
   12760:	cmp	r3, #0
   12764:	bxeq	lr
   12768:	bx	r3
   1276c:	andeq	r9, r2, r4, ror r0
   12770:	andeq	r9, r2, r4, ror r0
   12774:	andeq	r0, r0, r0
   12778:	push	{r4, lr}
   1277c:	ldr	r4, [pc, #24]	; 1279c <_start@@Base+0xe8>
   12780:	ldrb	r3, [r4]
   12784:	cmp	r3, #0
   12788:	popne	{r4, pc}
   1278c:	bl	12714 <_start@@Base+0x60>
   12790:	mov	r3, #1
   12794:	strb	r3, [r4]
   12798:	pop	{r4, pc}
   1279c:	andeq	r9, r2, r4, ror r0
   127a0:	b	12740 <_start@@Base+0x8c>
   127a4:	andeq	r0, r0, r0
   127a8:	push	{lr}		; (str lr, [sp, #-4]!)
   127ac:	sub	sp, sp, #12
   127b0:	mov	r1, #0
   127b4:	mov	r0, sp
   127b8:	bl	11fc0 <gettimeofday@plt>
   127bc:	ldr	r3, [pc, #92]	; 12820 <_start@@Base+0x16c>
   127c0:	vldr	d5, [pc, #80]	; 12818 <_start@@Base+0x164>
   127c4:	add	r3, pc, r3
   127c8:	ldr	r2, [r3]
   127cc:	cmp	r2, #0
   127d0:	ldr	r2, [sp, #4]
   127d4:	ldrdeq	r0, [sp]
   127d8:	strdeq	r0, [r3]
   127dc:	ldr	r1, [pc, #64]	; 12824 <_start@@Base+0x170>
   127e0:	ldr	r3, [sp]
   127e4:	add	r1, pc, r1
   127e8:	ldr	r0, [r1, #4]
   127ec:	ldr	r1, [r1]
   127f0:	sub	r2, r2, r0
   127f4:	vmov	s15, r2
   127f8:	sub	r3, r3, r1
   127fc:	vmov	s0, r3
   12800:	vcvt.f64.s32	d7, s15
   12804:	vcvt.f64.s32	d0, s0
   12808:	vdiv.f64	d6, d7, d5
   1280c:	vadd.f64	d0, d6, d0
   12810:	add	sp, sp, #12
   12814:	pop	{pc}		; (ldr pc, [sp], #4)
   12818:	andeq	r0, r0, r0
   1281c:	smlawbmi	lr, r0, r4, r8
   12820:	andeq	r6, r1, ip, lsr #17
   12824:	andeq	r6, r1, ip, lsl #17
   12828:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1282c:	mov	r4, r0
   12830:	strd	r6, [sp, #8]
   12834:	str	r8, [sp, #16]
   12838:	str	lr, [sp, #20]
   1283c:	bl	13434 <flatcc_builder_reset@@Base>
   12840:	ldr	r1, [pc, #544]	; 12a68 <_start@@Base+0x3b4>
   12844:	mov	r3, #0
   12848:	mov	r0, r4
   1284c:	mov	r2, r3
   12850:	add	r1, pc, r1
   12854:	bl	13c2c <flatcc_builder_start_buffer@@Base>
   12858:	cmp	r0, #0
   1285c:	bne	1286c <_start@@Base+0x1b8>
   12860:	mov	r1, #36	; 0x24
   12864:	mov	r0, r4
   12868:	bl	14c04 <flatcc_builder_start_table@@Base>
   1286c:	ldr	r1, [pc, #504]	; 12a6c <_start@@Base+0x3b8>
   12870:	mov	r0, r4
   12874:	add	r1, pc, r1
   12878:	bl	1656c <flatcc_builder_create_string_str@@Base>
   1287c:	subs	r5, r0, #0
   12880:	beq	12898 <_start@@Base+0x1e4>
   12884:	mov	r1, #3
   12888:	mov	r0, r4
   1288c:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   12890:	cmp	r0, #0
   12894:	strne	r5, [r0]
   12898:	ldr	r5, [pc, #464]	; 12a70 <_start@@Base+0x3bc>
   1289c:	mov	r0, r4
   128a0:	mov	r7, #1000	; 0x3e8
   128a4:	bl	149e4 <flatcc_builder_start_offset_vector@@Base>
   128a8:	ldr	r8, [pc, #452]	; 12a74 <_start@@Base+0x3c0>
   128ac:	add	r5, pc, r5
   128b0:	add	r5, r5, #8
   128b4:	add	r8, pc, r8
   128b8:	mov	r1, #36	; 0x24
   128bc:	mov	r0, r4
   128c0:	bl	14c04 <flatcc_builder_start_table@@Base>
   128c4:	mov	r0, r4
   128c8:	mov	r6, #100	; 0x64
   128cc:	bl	14a60 <flatcc_builder_start_string@@Base>
   128d0:	mov	r2, #7
   128d4:	mov	r1, r8
   128d8:	mov	r0, r4
   128dc:	bl	1459c <flatcc_builder_append_string@@Base>
   128e0:	subs	r6, r6, #1
   128e4:	bne	128d0 <_start@@Base+0x21c>
   128e8:	mov	r0, r4
   128ec:	bl	165f4 <flatcc_builder_end_string@@Base>
   128f0:	subs	r6, r0, #0
   128f4:	beq	1290c <_start@@Base+0x258>
   128f8:	mov	r1, #3
   128fc:	mov	r0, r4
   12900:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   12904:	cmp	r0, #0
   12908:	strne	r6, [r0]
   1290c:	mov	r2, #1
   12910:	mvn	r3, #0
   12914:	mov	r1, r2
   12918:	mov	r0, r4
   1291c:	mov	r6, #100	; 0x64
   12920:	bl	14954 <flatcc_builder_start_vector@@Base>
   12924:	mov	r2, #1000	; 0x3e8
   12928:	mov	r1, r5
   1292c:	mov	r0, r4
   12930:	bl	141ac <flatcc_builder_append_vector@@Base>
   12934:	subs	r6, r6, #1
   12938:	bne	12924 <_start@@Base+0x270>
   1293c:	mov	r0, r4
   12940:	bl	15940 <flatcc_builder_end_vector@@Base>
   12944:	subs	r6, r0, #0
   12948:	beq	12960 <_start@@Base+0x2ac>
   1294c:	mov	r1, #5
   12950:	mov	r0, r4
   12954:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   12958:	cmp	r0, #0
   1295c:	strne	r6, [r0]
   12960:	ldr	r6, [pc, #272]	; 12a78 <_start@@Base+0x3c4>
   12964:	mov	r2, #1
   12968:	mov	r0, r4
   1296c:	add	r6, pc, r6
   12970:	mov	r1, r6
   12974:	bl	1553c <flatcc_builder_check_required@@Base>
   12978:	cmp	r0, #0
   1297c:	beq	12a0c <_start@@Base+0x358>
   12980:	mov	r0, r4
   12984:	bl	155e8 <flatcc_builder_end_table@@Base>
   12988:	subs	r1, r0, #0
   1298c:	beq	12a30 <_start@@Base+0x37c>
   12990:	mov	r0, r4
   12994:	bl	14334 <flatcc_builder_offset_vector_push@@Base>
   12998:	subs	r7, r7, #1
   1299c:	bne	128b8 <_start@@Base+0x204>
   129a0:	mov	r0, r4
   129a4:	bl	15a6c <flatcc_builder_end_offset_vector@@Base>
   129a8:	subs	r5, r0, #0
   129ac:	beq	12a4c <_start@@Base+0x398>
   129b0:	mov	r1, #11
   129b4:	mov	r0, r4
   129b8:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   129bc:	ldr	r1, [pc, #184]	; 12a7c <_start@@Base+0x3c8>
   129c0:	cmp	r0, #0
   129c4:	mov	r2, #1
   129c8:	strne	r5, [r0]
   129cc:	mov	r0, r4
   129d0:	add	r1, pc, r1
   129d4:	bl	1553c <flatcc_builder_check_required@@Base>
   129d8:	cmp	r0, #0
   129dc:	beq	12a0c <_start@@Base+0x358>
   129e0:	mov	r0, r4
   129e4:	bl	155e8 <flatcc_builder_end_table@@Base>
   129e8:	mov	r1, r0
   129ec:	mov	r0, r4
   129f0:	bl	13d08 <flatcc_builder_end_buffer@@Base>
   129f4:	ldrd	r4, [sp]
   129f8:	mov	r0, #0
   129fc:	ldrd	r6, [sp, #8]
   12a00:	ldr	r8, [sp, #16]
   12a04:	add	sp, sp, #20
   12a08:	pop	{pc}		; (ldr pc, [sp], #4)
   12a0c:	ldr	r3, [pc, #108]	; 12a80 <_start@@Base+0x3cc>
   12a10:	mov	r2, #235	; 0xeb
   12a14:	ldr	r1, [pc, #104]	; 12a84 <_start@@Base+0x3d0>
   12a18:	ldr	r0, [pc, #104]	; 12a88 <_start@@Base+0x3d4>
   12a1c:	add	r3, pc, r3
   12a20:	add	r3, r3, #4
   12a24:	add	r1, pc, r1
   12a28:	add	r0, pc, r0
   12a2c:	bl	12044 <__assert_fail@plt>
   12a30:	ldr	r1, [pc, #84]	; 12a8c <_start@@Base+0x3d8>
   12a34:	add	r3, r6, #32
   12a38:	mov	r2, #42	; 0x2a
   12a3c:	ldr	r0, [pc, #76]	; 12a90 <_start@@Base+0x3dc>
   12a40:	add	r1, pc, r1
   12a44:	add	r0, pc, r0
   12a48:	bl	12044 <__assert_fail@plt>
   12a4c:	ldr	r1, [pc, #64]	; 12a94 <_start@@Base+0x3e0>
   12a50:	add	r3, r6, #48	; 0x30
   12a54:	mov	r2, #56	; 0x38
   12a58:	ldr	r0, [pc, #56]	; 12a98 <_start@@Base+0x3e4>
   12a5c:	add	r1, pc, r1
   12a60:	add	r0, pc, r0
   12a64:	bl	12044 <__assert_fail@plt>
   12a68:	andeq	r5, r0, ip, lsl r0
   12a6c:	andeq	r5, r0, r0
   12a70:	andeq	r6, r1, r4, asr #15
   12a74:	ldrdeq	r4, [r0], -r0
   12a78:	andeq	r4, r0, r8, lsl #29
   12a7c:	andeq	r4, r0, r4, lsr #28
   12a80:	ldrdeq	r4, [r0], -r8
   12a84:	andeq	r4, r0, r8, ror #28
   12a88:	ldrdeq	r4, [r0], -ip
   12a8c:	andeq	r4, r0, r8, ror #30
   12a90:	andeq	r4, r0, r8, asr #31
   12a94:	andeq	r4, r0, ip, asr #30
   12a98:			; <UNDEFINED> instruction: 0x00004fb0
   12a9c:	strd	r4, [sp, #-16]!
   12aa0:	mov	r4, r0
   12aa4:	mov	r0, #1
   12aa8:	ldr	ip, [r4, #28]
   12aac:	mov	r3, r0
   12ab0:	mov	r5, r2
   12ab4:	str	r6, [sp, #8]
   12ab8:	str	lr, [sp, #12]
   12abc:	sub	sp, sp, #8
   12ac0:	str	r0, [sp]
   12ac4:	add	r2, r1, ip
   12ac8:	add	r1, r4, #60	; 0x3c
   12acc:	ldr	r0, [r4, #40]	; 0x28
   12ad0:	ldr	r6, [r4, #48]	; 0x30
   12ad4:	blx	r6
   12ad8:	cmp	r0, #0
   12adc:	bne	12b1c <_start@@Base+0x468>
   12ae0:	ldr	r1, [r4, #28]
   12ae4:	ldr	ip, [r4, #32]
   12ae8:	ldrd	r2, [r4, #60]	; 0x3c
   12aec:	sub	r3, r3, r1
   12af0:	add	r2, r2, r1
   12af4:	cmp	r3, r5
   12af8:	movcs	r3, r5
   12afc:	str	r2, [r4, #16]
   12b00:	str	r3, [r4, #24]
   12b04:	str	r5, [ip, #4]
   12b08:	add	sp, sp, #8
   12b0c:	ldrd	r4, [sp]
   12b10:	ldr	r6, [sp, #8]
   12b14:	add	sp, sp, #12
   12b18:	pop	{pc}		; (ldr pc, [sp], #4)
   12b1c:	mvn	r0, #0
   12b20:	b	12b08 <_start@@Base+0x454>

00012b24 <flatcc_builder_default_alloc@@Base>:
   12b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b28:	subs	r5, r2, #0
   12b2c:	strd	r6, [sp, #8]
   12b30:	mov	r6, r1
   12b34:	str	r8, [sp, #16]
   12b38:	str	lr, [sp, #20]
   12b3c:	beq	12b74 <flatcc_builder_default_alloc@@Base+0x50>
   12b40:	mov	r7, r3
   12b44:	ldr	r3, [sp, #24]
   12b48:	sub	r2, r3, #1
   12b4c:	cmp	r2, #6
   12b50:	addls	pc, pc, r2, lsl #2
   12b54:	b	12c24 <flatcc_builder_default_alloc@@Base+0x100>
   12b58:	b	12ba4 <flatcc_builder_default_alloc@@Base+0x80>
   12b5c:	b	12c24 <flatcc_builder_default_alloc@@Base+0x100>
   12b60:	b	12c24 <flatcc_builder_default_alloc@@Base+0x100>
   12b64:	b	12c1c <flatcc_builder_default_alloc@@Base+0xf8>
   12b68:	b	12c0c <flatcc_builder_default_alloc@@Base+0xe8>
   12b6c:	b	12c24 <flatcc_builder_default_alloc@@Base+0x100>
   12b70:	b	12c14 <flatcc_builder_default_alloc@@Base+0xf0>
   12b74:	ldr	r0, [r1]
   12b78:	cmp	r0, #0
   12b7c:	beq	12b90 <flatcc_builder_default_alloc@@Base+0x6c>
   12b80:	bl	11f84 <free@plt>
   12b84:	mov	r0, r5
   12b88:	str	r5, [r6]
   12b8c:	str	r5, [r6, #4]
   12b90:	ldrd	r4, [sp]
   12b94:	ldrd	r6, [sp, #8]
   12b98:	ldr	r8, [sp, #16]
   12b9c:	add	sp, sp, #20
   12ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba4:	mov	r4, #256	; 0x100
   12ba8:	cmp	r4, r5
   12bac:	bcs	12bbc <flatcc_builder_default_alloc@@Base+0x98>
   12bb0:	lsl	r4, r4, #1
   12bb4:	cmp	r5, r4
   12bb8:	bhi	12bb0 <flatcc_builder_default_alloc@@Base+0x8c>
   12bbc:	ldr	r2, [r6, #4]
   12bc0:	cmp	r5, r2
   12bc4:	bhi	12bd4 <flatcc_builder_default_alloc@@Base+0xb0>
   12bc8:	cmp	r4, r2, lsr #1
   12bcc:	movls	r0, #0
   12bd0:	bls	12b90 <flatcc_builder_default_alloc@@Base+0x6c>
   12bd4:	mov	r1, r4
   12bd8:	ldr	r0, [r6]
   12bdc:	bl	11fa8 <realloc@plt>
   12be0:	subs	r5, r0, #0
   12be4:	beq	12c40 <flatcc_builder_default_alloc@@Base+0x11c>
   12be8:	cmp	r7, #0
   12bec:	beq	12bfc <flatcc_builder_default_alloc@@Base+0xd8>
   12bf0:	ldr	r0, [r6, #4]
   12bf4:	cmp	r0, r4
   12bf8:	bcc	12c2c <flatcc_builder_default_alloc@@Base+0x108>
   12bfc:	mov	r0, #0
   12c00:	str	r5, [r6]
   12c04:	str	r4, [r6, #4]
   12c08:	b	12b90 <flatcc_builder_default_alloc@@Base+0x6c>
   12c0c:	mov	r4, r5
   12c10:	b	12bbc <flatcc_builder_default_alloc@@Base+0x98>
   12c14:	mov	r4, #64	; 0x40
   12c18:	b	12ba8 <flatcc_builder_default_alloc@@Base+0x84>
   12c1c:	mov	r4, #288	; 0x120
   12c20:	b	12ba8 <flatcc_builder_default_alloc@@Base+0x84>
   12c24:	mov	r4, #32
   12c28:	b	12ba8 <flatcc_builder_default_alloc@@Base+0x84>
   12c2c:	sub	r2, r4, r0
   12c30:	mov	r1, #0
   12c34:	add	r0, r5, r0
   12c38:	bl	12014 <memset@plt>
   12c3c:	b	12bfc <flatcc_builder_default_alloc@@Base+0xd8>
   12c40:	mvn	r0, #0
   12c44:	b	12b90 <flatcc_builder_default_alloc@@Base+0x6c>
   12c48:	ldr	r3, [pc, #32]	; 12c70 <flatcc_builder_default_alloc@@Base+0x14c>
   12c4c:	mov	r2, #308	; 0x134
   12c50:	str	r4, [sp, #-8]!
   12c54:	ldr	r1, [pc, #24]	; 12c74 <flatcc_builder_default_alloc@@Base+0x150>
   12c58:	str	lr, [sp, #4]
   12c5c:	ldr	r0, [pc, #20]	; 12c78 <flatcc_builder_default_alloc@@Base+0x154>
   12c60:	add	r3, pc, r3
   12c64:	add	r1, pc, r1
   12c68:	add	r0, pc, r0
   12c6c:	bl	12044 <__assert_fail@plt>
   12c70:	andeq	r5, r0, r0, lsr #32
   12c74:	andeq	r5, r0, ip, ror #14
   12c78:	strdeq	r5, [r0], -r0
   12c7c:	ldr	r3, [pc, #36]	; 12ca8 <flatcc_builder_default_alloc@@Base+0x184>
   12c80:	movw	r2, #677	; 0x2a5
   12c84:	str	r4, [sp, #-8]!
   12c88:	ldr	r1, [pc, #28]	; 12cac <flatcc_builder_default_alloc@@Base+0x188>
   12c8c:	str	lr, [sp, #4]
   12c90:	ldr	r0, [pc, #24]	; 12cb0 <flatcc_builder_default_alloc@@Base+0x18c>
   12c94:	add	r3, pc, r3
   12c98:	add	r3, r3, #16
   12c9c:	add	r1, pc, r1
   12ca0:	add	r0, pc, r0
   12ca4:	bl	12044 <__assert_fail@plt>
   12ca8:	andeq	r4, r0, ip, ror #31
   12cac:	andeq	r5, r0, r4, lsr r7
   12cb0:			; <UNDEFINED> instruction: 0x000057b8
   12cb4:	strd	r4, [sp, #-12]!
   12cb8:	cmp	r2, #0
   12cbc:	mov	ip, r0
   12cc0:	str	lr, [sp, #8]
   12cc4:	sub	sp, sp, #84	; 0x54
   12cc8:	ldr	lr, [pc, #248]	; 12dc8 <flatcc_builder_default_alloc@@Base+0x2a4>
   12ccc:	add	lr, pc, lr
   12cd0:	bne	12ce0 <flatcc_builder_default_alloc@@Base+0x1bc>
   12cd4:	ldrh	r2, [r0, #132]	; 0x84
   12cd8:	cmp	r2, #0
   12cdc:	moveq	r2, #1
   12ce0:	ldrh	r0, [r1]
   12ce4:	cmp	r0, #3
   12ce8:	bhi	12cf8 <flatcc_builder_default_alloc@@Base+0x1d4>
   12cec:	mov	r4, #4
   12cf0:	mov	r0, r4
   12cf4:	strh	r4, [r1]
   12cf8:	cmp	r2, r0
   12cfc:	strhhi	r2, [r1]
   12d00:	cmp	r3, #0
   12d04:	bne	12d18 <flatcc_builder_default_alloc@@Base+0x1f4>
   12d08:	ldr	r4, [ip, #140]	; 0x8c
   12d0c:	sub	r2, r2, #1
   12d10:	ands	r1, r2, r4
   12d14:	bne	12d2c <flatcc_builder_default_alloc@@Base+0x208>
   12d18:	mov	r0, #0
   12d1c:	add	sp, sp, #84	; 0x54
   12d20:	ldrd	r4, [sp]
   12d24:	add	sp, sp, #8
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	ldr	r3, [pc, #152]	; 12dcc <flatcc_builder_default_alloc@@Base+0x2a8>
   12d30:	add	r0, r4, r1
   12d34:	mov	r2, #1
   12d38:	str	r1, [sp, #8]
   12d3c:	cmp	r4, r0
   12d40:	ldr	r3, [lr, r3]
   12d44:	str	r0, [ip, #140]	; 0x8c
   12d48:	strd	r2, [sp, #12]
   12d4c:	str	r1, [sp, #20]
   12d50:	bgt	12da4 <flatcc_builder_default_alloc@@Base+0x280>
   12d54:	mov	r3, r4
   12d58:	str	r1, [sp]
   12d5c:	add	r1, sp, #16
   12d60:	ldr	r0, [ip, #36]	; 0x24
   12d64:	ldr	r5, [ip, #44]	; 0x2c
   12d68:	blx	r5
   12d6c:	cmp	r0, #0
   12d70:	bne	12da0 <flatcc_builder_default_alloc@@Base+0x27c>
   12d74:	cmn	r4, #1
   12d78:	bne	12d18 <flatcc_builder_default_alloc@@Base+0x1f4>
   12d7c:	ldr	r3, [pc, #76]	; 12dd0 <flatcc_builder_default_alloc@@Base+0x2ac>
   12d80:	movw	r2, #702	; 0x2be
   12d84:	ldr	r1, [pc, #72]	; 12dd4 <flatcc_builder_default_alloc@@Base+0x2b0>
   12d88:	ldr	r0, [pc, #72]	; 12dd8 <flatcc_builder_default_alloc@@Base+0x2b4>
   12d8c:	add	r3, pc, r3
   12d90:	add	r3, r3, #28
   12d94:	add	r1, pc, r1
   12d98:	add	r0, pc, r0
   12d9c:	bl	12044 <__assert_fail@plt>
   12da0:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x158>
   12da4:	ldr	r3, [pc, #48]	; 12ddc <flatcc_builder_default_alloc@@Base+0x2b8>
   12da8:	movw	r2, #673	; 0x2a1
   12dac:	ldr	r1, [pc, #44]	; 12de0 <flatcc_builder_default_alloc@@Base+0x2bc>
   12db0:	ldr	r0, [pc, #44]	; 12de4 <flatcc_builder_default_alloc@@Base+0x2c0>
   12db4:	add	r3, pc, r3
   12db8:	add	r3, r3, #16
   12dbc:	add	r1, pc, r1
   12dc0:	add	r0, pc, r0
   12dc4:	bl	12044 <__assert_fail@plt>
   12dc8:	andeq	r6, r1, ip, lsr #6
   12dcc:	andeq	r0, r0, ip, asr r0
   12dd0:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   12dd4:	andeq	r5, r0, ip, lsr r6
   12dd8:	andeq	r5, r0, r0, asr #13
   12ddc:	andeq	r4, r0, ip, asr #29
   12de0:	andeq	r5, r0, r4, lsl r6
   12de4:	muleq	r0, r8, r6
   12de8:	ldr	r3, [pc, #36]	; 12e14 <flatcc_builder_default_alloc@@Base+0x2f0>
   12dec:	movw	r2, #651	; 0x28b
   12df0:	str	r4, [sp, #-8]!
   12df4:	ldr	r1, [pc, #28]	; 12e18 <flatcc_builder_default_alloc@@Base+0x2f4>
   12df8:	str	lr, [sp, #4]
   12dfc:	ldr	r0, [pc, #24]	; 12e1c <flatcc_builder_default_alloc@@Base+0x2f8>
   12e00:	add	r3, pc, r3
   12e04:	add	r3, r3, #44	; 0x2c
   12e08:	add	r1, pc, r1
   12e0c:	add	r0, pc, r0
   12e10:	bl	12044 <__assert_fail@plt>
   12e14:	andeq	r4, r0, r0, lsl #29
   12e18:	andeq	r5, r0, r8, asr #11
   12e1c:	andeq	r5, r0, ip, asr #12
   12e20:	ldr	r3, [pc, #36]	; 12e4c <flatcc_builder_default_alloc@@Base+0x328>
   12e24:	mov	r2, #892	; 0x37c
   12e28:	str	r4, [sp, #-8]!
   12e2c:	ldr	r1, [pc, #28]	; 12e50 <flatcc_builder_default_alloc@@Base+0x32c>
   12e30:	str	lr, [sp, #4]
   12e34:	ldr	r0, [pc, #24]	; 12e54 <flatcc_builder_default_alloc@@Base+0x330>
   12e38:	add	r3, pc, r3
   12e3c:	add	r3, r3, #56	; 0x38
   12e40:	add	r1, pc, r1
   12e44:	add	r0, pc, r0
   12e48:	bl	12044 <__assert_fail@plt>
   12e4c:	andeq	r4, r0, r8, asr #28
   12e50:	muleq	r0, r0, r5
   12e54:	andeq	r5, r0, ip, ror #11
   12e58:	ldrd	r2, [r0, #156]	; 0x9c
   12e5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12e60:	mov	r5, r1
   12e64:	mov	r4, r0
   12e68:	strd	r6, [sp, #8]
   12e6c:	str	lr, [sp, #16]
   12e70:	sub	sp, sp, #12
   12e74:	add	r1, r2, #1
   12e78:	cmp	r1, r3
   12e7c:	str	r1, [r0, #156]	; 0x9c
   12e80:	ble	12f60 <flatcc_builder_default_alloc@@Base+0x43c>
   12e84:	ldr	r3, [r0, #176]	; 0xb0
   12e88:	cmp	r1, r3
   12e8c:	cmpgt	r3, #0
   12e90:	movgt	r3, #1
   12e94:	movle	r3, #0
   12e98:	bgt	12f70 <flatcc_builder_default_alloc@@Base+0x44c>
   12e9c:	add	r2, r2, r2, lsl #3
   12ea0:	ldr	r1, [r0, #88]	; 0x58
   12ea4:	lsl	r6, r2, #2
   12ea8:	add	r2, r6, #36	; 0x24
   12eac:	cmp	r2, r1
   12eb0:	bls	12ed4 <flatcc_builder_default_alloc@@Base+0x3b0>
   12eb4:	mov	ip, #4
   12eb8:	add	r1, r0, #84	; 0x54
   12ebc:	ldr	r0, [r0, #40]	; 0x28
   12ec0:	str	ip, [sp]
   12ec4:	ldr	r7, [r4, #48]	; 0x30
   12ec8:	blx	r7
   12ecc:	cmp	r0, #0
   12ed0:	bne	12f78 <flatcc_builder_default_alloc@@Base+0x454>
   12ed4:	ldr	r2, [r4, #84]	; 0x54
   12ed8:	add	r2, r2, r6
   12edc:	cmp	r2, #0
   12ee0:	str	r2, [r4, #32]
   12ee4:	beq	12f70 <flatcc_builder_default_alloc@@Base+0x44c>
   12ee8:	ldr	r3, [r4, #88]	; 0x58
   12eec:	movw	r0, #36409	; 0x8e39
   12ef0:	movt	r0, #14563	; 0x38e3
   12ef4:	ldr	r1, [r4, #176]	; 0xb0
   12ef8:	umull	r0, r3, r0, r3
   12efc:	lsr	r3, r3, #3
   12f00:	cmp	r3, r1
   12f04:	cmpgt	r1, #0
   12f08:	movgt	r3, r1
   12f0c:	str	r3, [r4, #160]	; 0xa0
   12f10:	ldr	r3, [r4, #20]
   12f14:	mov	r1, #0
   12f18:	mvn	lr, #3
   12f1c:	mov	r0, r1
   12f20:	ldr	ip, [r4, #28]
   12f24:	ldrh	r6, [r4, #130]	; 0x82
   12f28:	str	r3, [r2, #8]
   12f2c:	add	r3, r3, ip
   12f30:	add	r3, r3, #7
   12f34:	bic	r3, r3, #7
   12f38:	strh	r6, [r2, #12]
   12f3c:	strh	r5, [r4, #130]	; 0x82
   12f40:	stm	r2, {ip, lr}
   12f44:	str	r1, [r4, #20]
   12f48:	str	r3, [r4, #28]
   12f4c:	add	sp, sp, #12
   12f50:	ldrd	r4, [sp]
   12f54:	ldrd	r6, [sp, #8]
   12f58:	add	sp, sp, #16
   12f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f60:	ldr	r2, [r0, #32]
   12f64:	add	r2, r2, #36	; 0x24
   12f68:	str	r2, [r0, #32]
   12f6c:	b	12f10 <flatcc_builder_default_alloc@@Base+0x3ec>
   12f70:	mvn	r0, #0
   12f74:	b	12f4c <flatcc_builder_default_alloc@@Base+0x428>
   12f78:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>
   12f7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12f80:	mov	r4, r0
   12f84:	mov	r5, #4
   12f88:	ldrh	r0, [r0, #128]	; 0x80
   12f8c:	strd	r6, [sp, #8]
   12f90:	str	lr, [sp, #16]
   12f94:	sub	sp, sp, #92	; 0x5c
   12f98:	ldr	lr, [pc, #464]	; 13170 <flatcc_builder_default_alloc@@Base+0x64c>
   12f9c:	str	r2, [sp, #12]
   12fa0:	cmp	r0, #3
   12fa4:	ldr	r6, [r4, #136]	; 0x88
   12fa8:	movls	r0, #4
   12fac:	str	r5, [sp, #16]
   12fb0:	str	r5, [sp, #28]
   12fb4:	strhls	r0, [r4, #128]	; 0x80
   12fb8:	mov	r0, #1
   12fbc:	lsls	ip, r2, #2
   12fc0:	add	lr, pc, lr
   12fc4:	str	r0, [sp, #20]
   12fc8:	add	r0, sp, #12
   12fcc:	str	r0, [sp, #24]
   12fd0:	and	r0, r6, #3
   12fd4:	beq	12ff0 <flatcc_builder_default_alloc@@Base+0x4cc>
   12fd8:	add	r5, ip, r5
   12fdc:	mov	r7, #2
   12fe0:	str	r5, [sp, #16]
   12fe4:	str	r7, [sp, #20]
   12fe8:	str	r1, [sp, #32]
   12fec:	str	ip, [sp, #36]	; 0x24
   12ff0:	cmp	r0, #0
   12ff4:	beq	13024 <flatcc_builder_default_alloc@@Base+0x500>
   12ff8:	ldr	r7, [pc, #372]	; 13174 <flatcc_builder_default_alloc@@Base+0x650>
   12ffc:	add	r5, r5, r0
   13000:	ldr	ip, [sp, #20]
   13004:	str	r5, [sp, #16]
   13008:	ldr	r7, [lr, r7]
   1300c:	add	lr, sp, #88	; 0x58
   13010:	add	ip, ip, #1
   13014:	add	lr, lr, ip, lsl #3
   13018:	str	ip, [sp, #20]
   1301c:	str	r7, [lr, #-72]	; 0xffffffb8
   13020:	str	r0, [lr, #-68]	; 0xffffffbc
   13024:	cmp	r2, #0
   13028:	beq	130b4 <flatcc_builder_default_alloc@@Base+0x590>
   1302c:	sub	r6, r1, r6
   13030:	add	lr, r2, r3
   13034:	add	r6, r6, r5
   13038:	mov	r2, r3
   1303c:	b	1306c <flatcc_builder_default_alloc@@Base+0x548>
   13040:	sub	r0, r6, r1
   13044:	cmp	r3, #0
   13048:	add	r0, r0, ip
   1304c:	str	r0, [r1, #-4]
   13050:	beq	13060 <flatcc_builder_default_alloc@@Base+0x53c>
   13054:	ldrb	r0, [r2]
   13058:	cmp	r0, #0
   1305c:	beq	13124 <flatcc_builder_default_alloc@@Base+0x600>
   13060:	add	r2, r2, #1
   13064:	cmp	lr, r2
   13068:	beq	130b0 <flatcc_builder_default_alloc@@Base+0x58c>
   1306c:	ldr	ip, [r1], #4
   13070:	cmp	ip, #0
   13074:	bne	13040 <flatcc_builder_default_alloc@@Base+0x51c>
   13078:	cmp	r3, #0
   1307c:	beq	13100 <flatcc_builder_default_alloc@@Base+0x5dc>
   13080:	ldrb	r0, [r2]
   13084:	cmp	r0, #0
   13088:	beq	13060 <flatcc_builder_default_alloc@@Base+0x53c>
   1308c:	ldr	r3, [pc, #228]	; 13178 <flatcc_builder_default_alloc@@Base+0x654>
   13090:	movw	r2, #1461	; 0x5b5
   13094:	ldr	r1, [pc, #224]	; 1317c <flatcc_builder_default_alloc@@Base+0x658>
   13098:	ldr	r0, [pc, #224]	; 13180 <flatcc_builder_default_alloc@@Base+0x65c>
   1309c:	add	r3, pc, r3
   130a0:	add	r3, r3, #76	; 0x4c
   130a4:	add	r1, pc, r1
   130a8:	add	r0, pc, r0
   130ac:	bl	12044 <__assert_fail@plt>
   130b0:	ldr	r6, [r4, #136]	; 0x88
   130b4:	sub	r7, r6, r5
   130b8:	cmp	r7, r6
   130bc:	bge	1314c <flatcc_builder_default_alloc@@Base+0x628>
   130c0:	mov	r3, r7
   130c4:	add	r1, sp, #24
   130c8:	str	r5, [sp]
   130cc:	ldr	r2, [sp, #20]
   130d0:	ldr	r0, [r4, #36]	; 0x24
   130d4:	ldr	r5, [r4, #44]	; 0x2c
   130d8:	blx	r5
   130dc:	cmp	r0, #0
   130e0:	bne	13148 <flatcc_builder_default_alloc@@Base+0x624>
   130e4:	mov	r0, r7
   130e8:	str	r7, [r4, #136]	; 0x88
   130ec:	add	sp, sp, #92	; 0x5c
   130f0:	ldrd	r4, [sp]
   130f4:	ldrd	r6, [sp, #8]
   130f8:	add	sp, sp, #16
   130fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13100:	ldr	r3, [pc, #124]	; 13184 <flatcc_builder_default_alloc@@Base+0x660>
   13104:	movw	r2, #1463	; 0x5b7
   13108:	ldr	r1, [pc, #120]	; 13188 <flatcc_builder_default_alloc@@Base+0x664>
   1310c:	ldr	r0, [pc, #120]	; 1318c <flatcc_builder_default_alloc@@Base+0x668>
   13110:	add	r3, pc, r3
   13114:	add	r3, r3, #76	; 0x4c
   13118:	add	r1, pc, r1
   1311c:	add	r0, pc, r0
   13120:	bl	12044 <__assert_fail@plt>
   13124:	ldr	r3, [pc, #100]	; 13190 <flatcc_builder_default_alloc@@Base+0x66c>
   13128:	movw	r2, #1457	; 0x5b1
   1312c:	ldr	r1, [pc, #96]	; 13194 <flatcc_builder_default_alloc@@Base+0x670>
   13130:	ldr	r0, [pc, #96]	; 13198 <flatcc_builder_default_alloc@@Base+0x674>
   13134:	add	r3, pc, r3
   13138:	add	r3, r3, #76	; 0x4c
   1313c:	add	r1, pc, r1
   13140:	add	r0, pc, r0
   13144:	bl	12044 <__assert_fail@plt>
   13148:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   1314c:	ldr	r3, [pc, #72]	; 1319c <flatcc_builder_default_alloc@@Base+0x678>
   13150:	movw	r2, #647	; 0x287
   13154:	ldr	r1, [pc, #68]	; 131a0 <flatcc_builder_default_alloc@@Base+0x67c>
   13158:	ldr	r0, [pc, #68]	; 131a4 <flatcc_builder_default_alloc@@Base+0x680>
   1315c:	add	r3, pc, r3
   13160:	add	r3, r3, #44	; 0x2c
   13164:	add	r1, pc, r1
   13168:	add	r0, pc, r0
   1316c:	bl	12044 <__assert_fail@plt>
   13170:	andeq	r6, r1, r8, lsr r0
   13174:	andeq	r0, r0, ip, asr r0
   13178:	andeq	r4, r0, r4, ror #23
   1317c:	andeq	r5, r0, ip, lsr #6
   13180:			; <UNDEFINED> instruction: 0x000053b4
   13184:	andeq	r4, r0, r0, ror fp
   13188:			; <UNDEFINED> instruction: 0x000052b8
   1318c:	andeq	r5, r0, ip, lsr r3
   13190:	andeq	r4, r0, ip, asr #22
   13194:	muleq	r0, r4, r2
   13198:	andeq	r5, r0, ip, lsl #6
   1319c:	andeq	r4, r0, r4, lsr #22
   131a0:	andeq	r5, r0, ip, ror #4
   131a4:	strdeq	r5, [r0], -r0

000131a8 <flatcc_builder_flush_vtable_cache@@Base>:
   131a8:	ldr	r3, [r0, #116]	; 0x74
   131ac:	cmp	r3, #0
   131b0:	bxeq	lr
   131b4:	str	r4, [sp, #-8]!
   131b8:	mov	r4, r0
   131bc:	mov	r1, #0
   131c0:	ldr	r0, [r0, #92]	; 0x5c
   131c4:	ldr	r2, [r4, #96]	; 0x60
   131c8:	str	lr, [sp, #4]
   131cc:	bl	12014 <memset@plt>
   131d0:	mov	r3, #16
   131d4:	mov	r2, #0
   131d8:	strd	r2, [r4, #120]	; 0x78
   131dc:	ldr	r4, [sp]
   131e0:	add	sp, sp, #4
   131e4:	pop	{pc}		; (ldr pc, [sp], #4)

000131e8 <flatcc_builder_custom_init@@Base>:
   131e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   131ec:	mov	r5, r3
   131f0:	mov	r4, r0
   131f4:	strd	r6, [sp, #8]
   131f8:	mov	r6, r1
   131fc:	mov	r1, #0
   13200:	ldr	r7, [pc, #124]	; 13284 <flatcc_builder_custom_init@@Base+0x9c>
   13204:	strd	r8, [sp, #16]
   13208:	mov	r8, r2
   1320c:	mov	r2, #232	; 0xe8
   13210:	str	sl, [sp, #24]
   13214:	str	lr, [sp, #28]
   13218:	ldr	r9, [sp, #32]
   1321c:	bl	12014 <memset@plt>
   13220:	cmp	r6, #0
   13224:	add	r7, pc, r7
   13228:	beq	1325c <flatcc_builder_custom_init@@Base+0x74>
   1322c:	cmp	r5, #0
   13230:	beq	13278 <flatcc_builder_custom_init@@Base+0x90>
   13234:	ldr	sl, [sp, #24]
   13238:	mov	r0, #0
   1323c:	strd	r8, [r4, #36]	; 0x24
   13240:	str	r6, [r4, #44]	; 0x2c
   13244:	str	r5, [r4, #48]	; 0x30
   13248:	ldrd	r4, [sp]
   1324c:	ldrd	r6, [sp, #8]
   13250:	ldrd	r8, [sp, #16]
   13254:	add	sp, sp, #28
   13258:	pop	{pc}		; (ldr pc, [sp], #4)
   1325c:	ldr	r3, [pc, #36]	; 13288 <flatcc_builder_custom_init@@Base+0xa0>
   13260:	mov	r2, #1
   13264:	cmp	r5, #0
   13268:	add	r8, r4, #188	; 0xbc
   1326c:	str	r2, [r4, #184]	; 0xb8
   13270:	ldr	r6, [r7, r3]
   13274:	bne	13234 <flatcc_builder_custom_init@@Base+0x4c>
   13278:	ldr	r3, [pc, #12]	; 1328c <flatcc_builder_custom_init@@Base+0xa4>
   1327c:	ldr	r5, [r7, r3]
   13280:	b	13234 <flatcc_builder_custom_init@@Base+0x4c>
   13284:	ldrdeq	r5, [r1], -r4
   13288:	andeq	r0, r0, r8, rrx
   1328c:	andeq	r0, r0, r4, rrx

00013290 <flatcc_builder_init@@Base>:
   13290:	mov	ip, #0
   13294:	push	{lr}		; (str lr, [sp, #-4]!)
   13298:	sub	sp, sp, #12
   1329c:	mov	r3, ip
   132a0:	mov	r2, ip
   132a4:	mov	r1, ip
   132a8:	str	ip, [sp]
   132ac:	bl	131e8 <flatcc_builder_custom_init@@Base>
   132b0:	add	sp, sp, #12
   132b4:	pop	{pc}		; (ldr pc, [sp], #4)

000132b8 <flatcc_builder_custom_reset@@Base>:
   132b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   132bc:	mov	r5, #0
   132c0:	mov	r4, r0
   132c4:	strd	r6, [sp, #8]
   132c8:	mov	r6, r0
   132cc:	strd	r8, [sp, #16]
   132d0:	mov	r8, r1
   132d4:	mov	r9, r2
   132d8:	str	lr, [sp, #24]
   132dc:	sub	sp, sp, #12
   132e0:	b	13330 <flatcc_builder_custom_reset@@Base+0x78>
   132e4:	cmp	r5, #5
   132e8:	cmpne	r9, #0
   132ec:	beq	13314 <flatcc_builder_custom_reset@@Base+0x5c>
   132f0:	mov	r3, #1
   132f4:	str	r5, [sp]
   132f8:	mov	r2, r3
   132fc:	ldr	r0, [r6, #40]	; 0x28
   13300:	ldr	r7, [r6, #48]	; 0x30
   13304:	blx	r7
   13308:	cmp	r0, #0
   1330c:	bne	13420 <flatcc_builder_custom_reset@@Base+0x168>
   13310:	ldr	r0, [r4, #52]	; 0x34
   13314:	mov	r1, #0
   13318:	ldr	r2, [r4, #56]	; 0x38
   1331c:	bl	12014 <memset@plt>
   13320:	add	r5, r5, #1
   13324:	add	r4, r4, #8
   13328:	cmp	r5, #8
   1332c:	beq	13370 <flatcc_builder_custom_reset@@Base+0xb8>
   13330:	ldr	r0, [r4, #52]	; 0x34
   13334:	add	r1, r4, #52	; 0x34
   13338:	cmp	r0, #0
   1333c:	bne	132e4 <flatcc_builder_custom_reset@@Base+0x2c>
   13340:	ldr	r3, [r4, #56]	; 0x38
   13344:	cmp	r3, #0
   13348:	beq	13320 <flatcc_builder_custom_reset@@Base+0x68>
   1334c:	ldr	r3, [pc, #212]	; 13428 <flatcc_builder_custom_reset@@Base+0x170>
   13350:	movw	r2, #434	; 0x1b2
   13354:	ldr	r1, [pc, #208]	; 1342c <flatcc_builder_custom_reset@@Base+0x174>
   13358:	ldr	r0, [pc, #208]	; 13430 <flatcc_builder_custom_reset@@Base+0x178>
   1335c:	add	r3, pc, r3
   13360:	add	r3, r3, #108	; 0x6c
   13364:	add	r1, pc, r1
   13368:	add	r0, pc, r0
   1336c:	bl	12044 <__assert_fail@plt>
   13370:	mov	r2, #0
   13374:	ldr	r0, [r6, #52]	; 0x34
   13378:	ldr	r3, [r6, #124]	; 0x7c
   1337c:	ldr	r1, [r6, #60]	; 0x3c
   13380:	str	r0, [r6, #4]
   13384:	str	r2, [r6, #120]	; 0x78
   13388:	cmp	r3, r2
   1338c:	ldr	r2, [r6, #76]	; 0x4c
   13390:	movne	r3, #16
   13394:	strne	r3, [r6, #124]	; 0x7c
   13398:	mov	r3, #0
   1339c:	cmp	r8, r3
   133a0:	str	r2, [r6]
   133a4:	str	r1, [r6, #16]
   133a8:	str	r3, [r6, #20]
   133ac:	str	r3, [r6, #24]
   133b0:	str	r3, [r6, #32]
   133b4:	strh	r3, [r6, #128]	; 0x80
   133b8:	str	r3, [r6, #136]	; 0x88
   133bc:	str	r3, [r6, #140]	; 0x8c
   133c0:	str	r3, [r6, #148]	; 0x94
   133c4:	str	r3, [r6, #152]	; 0x98
   133c8:	str	r3, [r6, #156]	; 0x9c
   133cc:	str	r3, [r6, #160]	; 0xa0
   133d0:	bne	133f8 <flatcc_builder_custom_reset@@Base+0x140>
   133d4:	ldr	r0, [r6, #184]	; 0xb8
   133d8:	cmp	r0, #0
   133dc:	bne	13410 <flatcc_builder_custom_reset@@Base+0x158>
   133e0:	add	sp, sp, #12
   133e4:	ldrd	r4, [sp]
   133e8:	ldrd	r6, [sp, #8]
   133ec:	ldrd	r8, [sp, #16]
   133f0:	add	sp, sp, #24
   133f4:	pop	{pc}		; (ldr pc, [sp], #4)
   133f8:	ldr	r0, [r6, #184]	; 0xb8
   133fc:	str	r3, [r6, #172]	; 0xac
   13400:	str	r3, [r6, #176]	; 0xb0
   13404:	str	r3, [r6, #180]	; 0xb4
   13408:	cmp	r0, #0
   1340c:	beq	133e0 <flatcc_builder_custom_reset@@Base+0x128>
   13410:	add	r0, r6, #188	; 0xbc
   13414:	bl	171f0 <flatcc_emitter_reset@@Base>
   13418:	mov	r0, #0
   1341c:	b	133e0 <flatcc_builder_custom_reset@@Base+0x128>
   13420:	mvn	r0, #0
   13424:	b	133e0 <flatcc_builder_custom_reset@@Base+0x128>
   13428:	andeq	r4, r0, r4, lsr #18
   1342c:	andeq	r5, r0, ip, rrx
   13430:	andeq	r5, r0, r4, lsl #2

00013434 <flatcc_builder_reset@@Base>:
   13434:	mov	r2, #0
   13438:	mov	r1, r2
   1343c:	b	132b8 <flatcc_builder_custom_reset@@Base>

00013440 <flatcc_builder_clear@@Base>:
   13440:	strd	r4, [sp, #-20]!	; 0xffffffec
   13444:	mov	r4, #0
   13448:	add	r5, r0, #52	; 0x34
   1344c:	strd	r6, [sp, #8]
   13450:	mov	r6, r0
   13454:	str	lr, [sp, #16]
   13458:	sub	sp, sp, #12
   1345c:	mov	r3, #0
   13460:	mov	r1, r5
   13464:	str	r4, [sp]
   13468:	mov	r2, r3
   1346c:	add	r4, r4, #1
   13470:	ldr	r0, [r6, #40]	; 0x28
   13474:	add	r5, r5, #8
   13478:	ldr	r7, [r6, #48]	; 0x30
   1347c:	blx	r7
   13480:	cmp	r4, #8
   13484:	bne	1345c <flatcc_builder_clear@@Base+0x1c>
   13488:	ldr	r3, [r6, #184]	; 0xb8
   1348c:	cmp	r3, #0
   13490:	bne	134b8 <flatcc_builder_clear@@Base+0x78>
   13494:	mov	r0, r6
   13498:	mov	r2, #232	; 0xe8
   1349c:	mov	r1, #0
   134a0:	add	sp, sp, #12
   134a4:	ldrd	r4, [sp]
   134a8:	ldrd	r6, [sp, #8]
   134ac:	ldr	lr, [sp, #16]
   134b0:	add	sp, sp, #20
   134b4:	b	12014 <memset@plt>
   134b8:	add	r0, r6, #188	; 0xbc
   134bc:	bl	172c4 <flatcc_emitter_clear@@Base>
   134c0:	b	13494 <flatcc_builder_clear@@Base+0x54>

000134c4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   134c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   134c8:	add	r4, r1, #3
   134cc:	mov	r5, r0
   134d0:	ldr	r3, [r0, #112]	; 0x70
   134d4:	bic	r4, r4, #3
   134d8:	strd	r6, [sp, #8]
   134dc:	add	r4, r4, #4
   134e0:	ldr	r6, [r0, #228]	; 0xe4
   134e4:	str	lr, [sp, #16]
   134e8:	sub	sp, sp, #12
   134ec:	add	r2, r6, r4
   134f0:	cmp	r2, r3
   134f4:	bls	1351c <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   134f8:	mov	ip, #7
   134fc:	add	r1, r0, #108	; 0x6c
   13500:	ldr	r0, [r0, #40]	; 0x28
   13504:	mov	r3, #0
   13508:	str	ip, [sp]
   1350c:	ldr	r7, [r5, #48]	; 0x30
   13510:	blx	r7
   13514:	cmp	r0, #0
   13518:	bne	13570 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   1351c:	ldr	r7, [r5, #108]	; 0x6c
   13520:	adds	r3, r7, r6
   13524:	moveq	r0, r3
   13528:	beq	1355c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1352c:	mov	r2, r4
   13530:	mov	r0, r3
   13534:	mov	r1, #0
   13538:	bl	12014 <memset@plt>
   1353c:	ldr	r2, [r5, #224]	; 0xe0
   13540:	add	r0, r0, #4
   13544:	str	r2, [r7, r6]
   13548:	ldr	r3, [r5, #228]	; 0xe4
   1354c:	add	r4, r3, r4
   13550:	add	r3, r3, #4
   13554:	str	r3, [r5, #224]	; 0xe0
   13558:	str	r4, [r5, #228]	; 0xe4
   1355c:	add	sp, sp, #12
   13560:	ldrd	r4, [sp]
   13564:	ldrd	r6, [sp, #8]
   13568:	add	sp, sp, #16
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>

00013574 <flatcc_builder_enter_user_frame@@Base>:
   13574:	strd	r4, [sp, #-20]!	; 0xffffffec
   13578:	add	r4, r1, #3
   1357c:	mov	r5, r0
   13580:	ldr	r3, [r0, #112]	; 0x70
   13584:	bic	r4, r4, #3
   13588:	strd	r6, [sp, #8]
   1358c:	add	r4, r4, #4
   13590:	ldr	r6, [r0, #228]	; 0xe4
   13594:	str	lr, [sp, #16]
   13598:	sub	sp, sp, #12
   1359c:	add	r2, r6, r4
   135a0:	cmp	r2, r3
   135a4:	bls	135cc <flatcc_builder_enter_user_frame@@Base+0x58>
   135a8:	mov	ip, #7
   135ac:	add	r1, r0, #108	; 0x6c
   135b0:	ldr	r0, [r0, #40]	; 0x28
   135b4:	mov	r3, #0
   135b8:	str	ip, [sp]
   135bc:	ldr	r7, [r5, #48]	; 0x30
   135c0:	blx	r7
   135c4:	cmp	r0, #0
   135c8:	bne	13614 <flatcc_builder_enter_user_frame@@Base+0xa0>
   135cc:	ldr	r7, [r5, #108]	; 0x6c
   135d0:	adds	r0, r7, r6
   135d4:	beq	13600 <flatcc_builder_enter_user_frame@@Base+0x8c>
   135d8:	mov	r2, r4
   135dc:	mov	r1, #0
   135e0:	bl	12014 <memset@plt>
   135e4:	ldr	r3, [r5, #224]	; 0xe0
   135e8:	str	r3, [r7, r6]
   135ec:	ldr	r0, [r5, #228]	; 0xe4
   135f0:	add	r4, r0, r4
   135f4:	add	r0, r0, #4
   135f8:	str	r0, [r5, #224]	; 0xe0
   135fc:	str	r4, [r5, #228]	; 0xe4
   13600:	add	sp, sp, #12
   13604:	ldrd	r4, [sp]
   13608:	ldrd	r6, [sp, #8]
   1360c:	add	sp, sp, #16
   13610:	pop	{pc}		; (ldr pc, [sp], #4)
   13614:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>

00013618 <flatcc_builder_exit_user_frame@@Base>:
   13618:	ldr	r2, [r0, #224]	; 0xe0
   1361c:	cmp	r2, #0
   13620:	beq	13648 <flatcc_builder_exit_user_frame@@Base+0x30>
   13624:	mov	r3, r0
   13628:	sub	r0, r2, #4
   1362c:	ldr	r1, [r3, #108]	; 0x6c
   13630:	str	r0, [r3, #228]	; 0xe4
   13634:	add	r2, r1, r2
   13638:	ldr	r2, [r2, #-4]
   1363c:	mov	r0, r2
   13640:	str	r2, [r3, #224]	; 0xe0
   13644:	bx	lr
   13648:	ldr	r3, [pc, #36]	; 13674 <flatcc_builder_exit_user_frame@@Base+0x5c>
   1364c:	movw	r2, #542	; 0x21e
   13650:	str	r4, [sp, #-8]!
   13654:	ldr	r1, [pc, #28]	; 13678 <flatcc_builder_exit_user_frame@@Base+0x60>
   13658:	str	lr, [sp, #4]
   1365c:	ldr	r0, [pc, #24]	; 1367c <flatcc_builder_exit_user_frame@@Base+0x64>
   13660:	add	r3, pc, r3
   13664:	add	r3, r3, #136	; 0x88
   13668:	add	r1, pc, r1
   1366c:	add	r0, pc, r0
   13670:	bl	12044 <__assert_fail@plt>
   13674:	andeq	r4, r0, r0, lsr #12
   13678:	andeq	r4, r0, r8, ror #26
   1367c:	andeq	r4, r0, r4, lsl lr

00013680 <flatcc_builder_exit_user_frame_at@@Base>:
   13680:	ldr	r2, [r0, #224]	; 0xe0
   13684:	cmp	r2, r1
   13688:	bcc	13694 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1368c:	str	r1, [r0, #224]	; 0xe0
   13690:	b	13618 <flatcc_builder_exit_user_frame@@Base>
   13694:	ldr	r3, [pc, #36]	; 136c0 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13698:	movw	r2, #551	; 0x227
   1369c:	str	r4, [sp, #-8]!
   136a0:	ldr	r1, [pc, #28]	; 136c4 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   136a4:	str	lr, [sp, #4]
   136a8:	ldr	r0, [pc, #24]	; 136c8 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   136ac:	add	r3, pc, r3
   136b0:	add	r3, r3, #168	; 0xa8
   136b4:	add	r1, pc, r1
   136b8:	add	r0, pc, r0
   136bc:	bl	12044 <__assert_fail@plt>
   136c0:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   136c4:	andeq	r4, r0, ip, lsl sp
   136c8:	andeq	r4, r0, r4, ror #27

000136cc <flatcc_builder_get_current_user_frame@@Base>:
   136cc:	ldr	r0, [r0, #224]	; 0xe0
   136d0:	bx	lr

000136d4 <flatcc_builder_get_user_frame_ptr@@Base>:
   136d4:	ldr	r0, [r0, #108]	; 0x6c
   136d8:	add	r0, r0, r1
   136dc:	bx	lr

000136e0 <flatcc_builder_embed_buffer@@Base>:
   136e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   136e4:	mov	r5, r3
   136e8:	mov	r4, r0
   136ec:	ldr	r3, [r0, #152]	; 0x98
   136f0:	strd	r6, [sp, #8]
   136f4:	mov	r7, r2
   136f8:	mov	r2, r1
   136fc:	ldr	r6, [pc, #356]	; 13868 <flatcc_builder_embed_buffer@@Base+0x188>
   13700:	str	lr, [sp, #16]
   13704:	sub	sp, sp, #92	; 0x5c
   13708:	add	r1, sp, #112	; 0x70
   1370c:	adds	r3, r3, #0
   13710:	movne	r3, #1
   13714:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x190>
   13718:	cmp	r0, #0
   1371c:	add	r6, pc, r6
   13720:	bne	13838 <flatcc_builder_embed_buffer@@Base+0x158>
   13724:	ldr	r3, [sp, #116]	; 0x74
   13728:	str	r0, [sp, #16]
   1372c:	ldr	r1, [r4, #136]	; 0x88
   13730:	str	r0, [sp, #20]
   13734:	ldrh	r2, [sp, #112]	; 0x70
   13738:	tst	r3, #2
   1373c:	ldr	r0, [r4, #152]	; 0x98
   13740:	movne	ip, #4
   13744:	moveq	ip, #0
   13748:	sub	r3, r1, r5
   1374c:	sub	r3, r3, ip
   13750:	sub	r2, r2, #1
   13754:	and	r3, r3, r2
   13758:	add	r2, r5, r3
   1375c:	cmp	r0, #0
   13760:	str	r2, [sp, #12]
   13764:	beq	13788 <flatcc_builder_embed_buffer@@Base+0xa8>
   13768:	mov	ip, #1
   1376c:	mov	r2, #4
   13770:	mov	r0, r2
   13774:	str	r2, [sp, #16]
   13778:	str	ip, [sp, #20]
   1377c:	add	ip, sp, #12
   13780:	str	ip, [sp, #24]
   13784:	str	r2, [sp, #28]
   13788:	cmp	r5, #0
   1378c:	beq	137b4 <flatcc_builder_embed_buffer@@Base+0xd4>
   13790:	ldr	r2, [sp, #20]
   13794:	add	ip, sp, #88	; 0x58
   13798:	add	r0, r0, r5
   1379c:	str	r0, [sp, #16]
   137a0:	add	r2, r2, #1
   137a4:	add	ip, ip, r2, lsl #3
   137a8:	str	r2, [sp, #20]
   137ac:	str	r7, [ip, #-72]	; 0xffffffb8
   137b0:	str	r5, [ip, #-68]	; 0xffffffbc
   137b4:	cmp	r3, #0
   137b8:	bne	13808 <flatcc_builder_embed_buffer@@Base+0x128>
   137bc:	sub	r5, r1, r0
   137c0:	cmp	r1, r5
   137c4:	ble	13844 <flatcc_builder_embed_buffer@@Base+0x164>
   137c8:	mov	r3, r5
   137cc:	add	r1, sp, #24
   137d0:	str	r0, [sp]
   137d4:	ldr	r2, [sp, #20]
   137d8:	ldr	r0, [r4, #36]	; 0x24
   137dc:	ldr	r6, [r4, #44]	; 0x2c
   137e0:	blx	r6
   137e4:	cmp	r0, #0
   137e8:	streq	r5, [r4, #136]	; 0x88
   137ec:	bne	13840 <flatcc_builder_embed_buffer@@Base+0x160>
   137f0:	mov	r0, r5
   137f4:	add	sp, sp, #92	; 0x5c
   137f8:	ldrd	r4, [sp]
   137fc:	ldrd	r6, [sp, #8]
   13800:	add	sp, sp, #16
   13804:	pop	{pc}		; (ldr pc, [sp], #4)
   13808:	ldr	ip, [pc, #92]	; 1386c <flatcc_builder_embed_buffer@@Base+0x18c>
   1380c:	add	r0, r0, r3
   13810:	ldr	r2, [sp, #20]
   13814:	str	r0, [sp, #16]
   13818:	ldr	lr, [r6, ip]
   1381c:	add	ip, sp, #88	; 0x58
   13820:	add	r2, r2, #1
   13824:	add	ip, ip, r2, lsl #3
   13828:	str	r2, [sp, #20]
   1382c:	str	lr, [ip, #-72]	; 0xffffffb8
   13830:	str	r3, [ip, #-68]	; 0xffffffbc
   13834:	b	137bc <flatcc_builder_embed_buffer@@Base+0xdc>
   13838:	mov	r5, #0
   1383c:	b	137f0 <flatcc_builder_embed_buffer@@Base+0x110>
   13840:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   13844:	ldr	r3, [pc, #36]	; 13870 <flatcc_builder_embed_buffer@@Base+0x190>
   13848:	movw	r2, #647	; 0x287
   1384c:	ldr	r1, [pc, #32]	; 13874 <flatcc_builder_embed_buffer@@Base+0x194>
   13850:	ldr	r0, [pc, #32]	; 13878 <flatcc_builder_embed_buffer@@Base+0x198>
   13854:	add	r3, pc, r3
   13858:	add	r3, r3, #44	; 0x2c
   1385c:	add	r1, pc, r1
   13860:	add	r0, pc, r0
   13864:	bl	12044 <__assert_fail@plt>
   13868:	ldrdeq	r5, [r1], -ip
   1386c:	andeq	r0, r0, ip, asr r0
   13870:	andeq	r4, r0, ip, lsr #8
   13874:	andeq	r4, r0, r4, ror fp
   13878:	strdeq	r4, [r0], -r8

0001387c <flatcc_builder_create_buffer@@Base>:
   1387c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13880:	mov	r4, r0
   13884:	strd	r6, [sp, #8]
   13888:	mov	r6, r3
   1388c:	strd	r8, [sp, #16]
   13890:	mov	r8, #0
   13894:	strd	sl, [sp, #24]
   13898:	mov	sl, r1
   1389c:	str	lr, [sp, #32]
   138a0:	sub	sp, sp, #100	; 0x64
   138a4:	ldr	r9, [sp, #140]	; 0x8c
   138a8:	add	r1, sp, #136	; 0x88
   138ac:	str	r8, [sp, #20]
   138b0:	ldr	r5, [pc, #496]	; 13aa8 <flatcc_builder_create_buffer@@Base+0x22c>
   138b4:	and	r7, r9, #1
   138b8:	mov	r3, r7
   138bc:	bl	12cb4 <flatcc_builder_default_alloc@@Base+0x190>
   138c0:	cmp	r0, r8
   138c4:	add	r5, pc, r5
   138c8:	bne	13a1c <flatcc_builder_create_buffer@@Base+0x1a0>
   138cc:	ldrh	r2, [r4, #128]	; 0x80
   138d0:	ldrh	r3, [sp, #136]	; 0x88
   138d4:	ldr	ip, [r4, #136]	; 0x88
   138d8:	cmp	r2, r3
   138dc:	strhcc	r3, [r4, #128]	; 0x80
   138e0:	cmp	sl, #0
   138e4:	ldrne	r2, [sl]
   138e8:	ldreq	lr, [sp, #20]
   138ec:	movne	lr, r2
   138f0:	strne	r2, [sp, #20]
   138f4:	sub	r2, r3, #1
   138f8:	sub	r3, ip, #4
   138fc:	cmp	lr, #0
   13900:	movne	lr, #4
   13904:	tst	r9, #2
   13908:	movne	r0, #4
   1390c:	moveq	r0, #0
   13910:	sub	r3, r3, lr
   13914:	ands	r1, r9, #3
   13918:	sub	r3, r3, r0
   1391c:	and	r3, r3, r2
   13920:	bne	13a3c <flatcc_builder_create_buffer@@Base+0x1c0>
   13924:	mov	r9, r1
   13928:	mov	r8, #1
   1392c:	mov	r0, #4
   13930:	add	sl, sp, #96	; 0x60
   13934:	add	r2, r9, #1
   13938:	str	r0, [sp, #24]
   1393c:	add	r2, sl, r2, lsl #3
   13940:	mov	fp, #4
   13944:	add	sl, sp, #12
   13948:	cmp	lr, #0
   1394c:	str	r8, [sp, #28]
   13950:	strd	sl, [r2, #-72]	; 0xffffffb8
   13954:	beq	13980 <flatcc_builder_create_buffer@@Base+0x104>
   13958:	add	r2, sp, #96	; 0x60
   1395c:	add	r8, r8, #1
   13960:	add	r8, r2, r8, lsl #3
   13964:	add	r0, r0, lr
   13968:	add	r9, r9, #2
   1396c:	add	r2, sp, #20
   13970:	str	r0, [sp, #24]
   13974:	str	r2, [r8, #-72]	; 0xffffffb8
   13978:	str	lr, [r8, #-68]	; 0xffffffbc
   1397c:	str	r9, [sp, #28]
   13980:	cmp	r3, #0
   13984:	beq	139b4 <flatcc_builder_create_buffer@@Base+0x138>
   13988:	ldr	lr, [pc, #284]	; 13aac <flatcc_builder_create_buffer@@Base+0x230>
   1398c:	add	r0, r0, r3
   13990:	ldr	r2, [sp, #28]
   13994:	str	r0, [sp, #24]
   13998:	ldr	r5, [r5, lr]
   1399c:	add	lr, sp, #96	; 0x60
   139a0:	add	r2, r2, #1
   139a4:	add	lr, lr, r2, lsl #3
   139a8:	str	r2, [sp, #28]
   139ac:	str	r5, [lr, #-72]	; 0xffffffb8
   139b0:	str	r3, [lr, #-68]	; 0xffffffbc
   139b4:	sub	r5, ip, r0
   139b8:	cmp	r1, #0
   139bc:	mov	r2, r5
   139c0:	addne	r2, r5, #4
   139c4:	cmp	r7, #0
   139c8:	sub	r6, r6, r2
   139cc:	ldrne	r3, [r4, #144]	; 0x90
   139d0:	mov	r8, r5
   139d4:	str	r6, [sp, #12]
   139d8:	ldreq	r3, [r4, #140]	; 0x8c
   139dc:	cmp	ip, r5
   139e0:	sub	r3, r3, r2
   139e4:	str	r3, [sp, #16]
   139e8:	ble	13a80 <flatcc_builder_create_buffer@@Base+0x204>
   139ec:	mov	r3, r5
   139f0:	add	r1, sp, #32
   139f4:	str	r0, [sp]
   139f8:	ldr	r2, [sp, #28]
   139fc:	ldr	r0, [r4, #36]	; 0x24
   13a00:	ldr	r6, [r4, #44]	; 0x2c
   13a04:	blx	r6
   13a08:	cmp	r0, #0
   13a0c:	bne	13aa4 <flatcc_builder_create_buffer@@Base+0x228>
   13a10:	cmp	r5, #0
   13a14:	str	r5, [r4, #136]	; 0x88
   13a18:	beq	13a5c <flatcc_builder_create_buffer@@Base+0x1e0>
   13a1c:	mov	r0, r8
   13a20:	add	sp, sp, #100	; 0x64
   13a24:	ldrd	r4, [sp]
   13a28:	ldrd	r6, [sp, #8]
   13a2c:	ldrd	r8, [sp, #16]
   13a30:	ldrd	sl, [sp, #24]
   13a34:	add	sp, sp, #32
   13a38:	pop	{pc}		; (ldr pc, [sp], #4)
   13a3c:	mov	sl, #4
   13a40:	add	r2, sp, #16
   13a44:	mov	r8, #2
   13a48:	mov	r9, #1
   13a4c:	mov	r0, #8
   13a50:	str	r2, [sp, #32]
   13a54:	str	sl, [sp, #36]	; 0x24
   13a58:	b	13930 <flatcc_builder_create_buffer@@Base+0xb4>
   13a5c:	ldr	r3, [pc, #76]	; 13ab0 <flatcc_builder_create_buffer@@Base+0x234>
   13a60:	mov	r2, #772	; 0x304
   13a64:	ldr	r1, [pc, #72]	; 13ab4 <flatcc_builder_create_buffer@@Base+0x238>
   13a68:	ldr	r0, [pc, #72]	; 13ab8 <flatcc_builder_create_buffer@@Base+0x23c>
   13a6c:	add	r3, pc, r3
   13a70:	add	r3, r3, #204	; 0xcc
   13a74:	add	r1, pc, r1
   13a78:	add	r0, pc, r0
   13a7c:	bl	12044 <__assert_fail@plt>
   13a80:	ldr	r3, [pc, #52]	; 13abc <flatcc_builder_create_buffer@@Base+0x240>
   13a84:	movw	r2, #647	; 0x287
   13a88:	ldr	r1, [pc, #48]	; 13ac0 <flatcc_builder_create_buffer@@Base+0x244>
   13a8c:	ldr	r0, [pc, #48]	; 13ac4 <flatcc_builder_create_buffer@@Base+0x248>
   13a90:	add	r3, pc, r3
   13a94:	add	r3, r3, #44	; 0x2c
   13a98:	add	r1, pc, r1
   13a9c:	add	r0, pc, r0
   13aa0:	bl	12044 <__assert_fail@plt>
   13aa4:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   13aa8:	andeq	r5, r1, r4, lsr r7
   13aac:	andeq	r0, r0, ip, asr r0
   13ab0:	andeq	r4, r0, r4, lsl r2
   13ab4:	andeq	r4, r0, ip, asr r9
   13ab8:	andeq	r4, r0, r0, ror #19
   13abc:	strdeq	r4, [r0], -r0
   13ac0:	andeq	r4, r0, r8, lsr r9
   13ac4:			; <UNDEFINED> instruction: 0x000049bc

00013ac8 <flatcc_builder_create_struct@@Base>:
   13ac8:	ldr	ip, [pc, #316]	; 13c0c <flatcc_builder_create_struct@@Base+0x144>
   13acc:	cmp	r3, #0
   13ad0:	strd	r4, [sp, #-20]!	; 0xffffffec
   13ad4:	strd	r6, [sp, #8]
   13ad8:	str	lr, [sp, #16]
   13adc:	sub	sp, sp, #84	; 0x54
   13ae0:	add	ip, pc, ip
   13ae4:	beq	13be8 <flatcc_builder_create_struct@@Base+0x120>
   13ae8:	mov	r4, r0
   13aec:	ldrh	r0, [r0, #128]	; 0x80
   13af0:	ldr	lr, [r4, #136]	; 0x88
   13af4:	cmp	r0, r3
   13af8:	mov	r0, #0
   13afc:	strhcc	r3, [r4, #128]	; 0x80
   13b00:	sub	r5, lr, r2
   13b04:	sub	r3, r3, #1
   13b08:	cmp	r2, r0
   13b0c:	and	r3, r3, r5
   13b10:	str	r0, [sp, #8]
   13b14:	str	r0, [sp, #12]
   13b18:	bne	13b9c <flatcc_builder_create_struct@@Base+0xd4>
   13b1c:	cmp	r3, #0
   13b20:	movne	r2, r3
   13b24:	movne	r6, #1
   13b28:	beq	13bc0 <flatcc_builder_create_struct@@Base+0xf8>
   13b2c:	ldr	r1, [pc, #220]	; 13c10 <flatcc_builder_create_struct@@Base+0x148>
   13b30:	add	r0, r0, #1
   13b34:	add	r7, sp, #80	; 0x50
   13b38:	str	r2, [sp, #8]
   13b3c:	add	r0, r7, r0, lsl #3
   13b40:	sub	r5, lr, r2
   13b44:	ldr	r1, [ip, r1]
   13b48:	str	r6, [sp, #12]
   13b4c:	str	r1, [r0, #-72]	; 0xffffffb8
   13b50:	str	r3, [r0, #-68]	; 0xffffffbc
   13b54:	cmp	lr, r5
   13b58:	ble	13bc0 <flatcc_builder_create_struct@@Base+0xf8>
   13b5c:	mov	r3, r5
   13b60:	add	r1, sp, #16
   13b64:	str	r2, [sp]
   13b68:	ldr	r2, [sp, #12]
   13b6c:	ldr	r0, [r4, #36]	; 0x24
   13b70:	ldr	r6, [r4, #44]	; 0x2c
   13b74:	blx	r6
   13b78:	cmp	r0, #0
   13b7c:	bne	13be4 <flatcc_builder_create_struct@@Base+0x11c>
   13b80:	mov	r0, r5
   13b84:	str	r5, [r4, #136]	; 0x88
   13b88:	add	sp, sp, #84	; 0x54
   13b8c:	ldrd	r4, [sp]
   13b90:	ldrd	r6, [sp, #8]
   13b94:	add	sp, sp, #16
   13b98:	pop	{pc}		; (ldr pc, [sp], #4)
   13b9c:	mov	r0, #1
   13ba0:	cmp	r3, #0
   13ba4:	str	r2, [sp, #8]
   13ba8:	movne	r6, #2
   13bac:	strd	r0, [sp, #12]
   13bb0:	str	r2, [sp, #20]
   13bb4:	addne	r2, r2, r3
   13bb8:	beq	13b54 <flatcc_builder_create_struct@@Base+0x8c>
   13bbc:	b	13b2c <flatcc_builder_create_struct@@Base+0x64>
   13bc0:	ldr	r3, [pc, #76]	; 13c14 <flatcc_builder_create_struct@@Base+0x14c>
   13bc4:	movw	r2, #647	; 0x287
   13bc8:	ldr	r1, [pc, #72]	; 13c18 <flatcc_builder_create_struct@@Base+0x150>
   13bcc:	ldr	r0, [pc, #72]	; 13c1c <flatcc_builder_create_struct@@Base+0x154>
   13bd0:	add	r3, pc, r3
   13bd4:	add	r3, r3, #44	; 0x2c
   13bd8:	add	r1, pc, r1
   13bdc:	add	r0, pc, r0
   13be0:	bl	12044 <__assert_fail@plt>
   13be4:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   13be8:	ldr	r3, [pc, #48]	; 13c20 <flatcc_builder_create_struct@@Base+0x158>
   13bec:	movw	r2, #783	; 0x30f
   13bf0:	ldr	r1, [pc, #44]	; 13c24 <flatcc_builder_create_struct@@Base+0x15c>
   13bf4:	ldr	r0, [pc, #44]	; 13c28 <flatcc_builder_create_struct@@Base+0x160>
   13bf8:	add	r3, pc, r3
   13bfc:	add	r3, r3, #236	; 0xec
   13c00:	add	r1, pc, r1
   13c04:	add	r0, pc, r0
   13c08:	bl	12044 <__assert_fail@plt>
   13c0c:	andeq	r5, r1, r8, lsl r5
   13c10:	andeq	r0, r0, ip, asr r0
   13c14:	strheq	r4, [r0], -r0
   13c18:	strdeq	r4, [r0], -r8
   13c1c:	andeq	r4, r0, ip, ror r8
   13c20:	andeq	r4, r0, r8, lsl #1
   13c24:	ldrdeq	r4, [r0], -r0
   13c28:			; <UNDEFINED> instruction: 0x000048b8

00013c2c <flatcc_builder_start_buffer@@Base>:
   13c2c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13c30:	mov	r5, r1
   13c34:	mov	r4, r0
   13c38:	ldrh	r1, [r0, #128]	; 0x80
   13c3c:	strd	r6, [sp, #8]
   13c40:	mov	r7, r3
   13c44:	ldr	r6, [pc, #180]	; 13d00 <flatcc_builder_start_buffer@@Base+0xd4>
   13c48:	strd	r8, [sp, #16]
   13c4c:	mov	r8, r2
   13c50:	str	sl, [sp, #24]
   13c54:	str	lr, [sp, #28]
   13c58:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   13c5c:	cmp	r0, #0
   13c60:	add	r6, pc, r6
   13c64:	bne	13cf8 <flatcc_builder_start_buffer@@Base+0xcc>
   13c68:	mov	r3, #1
   13c6c:	ldrh	r9, [r4, #132]	; 0x84
   13c70:	cmp	r5, #0
   13c74:	ldr	ip, [r4, #148]	; 0x94
   13c78:	strh	r3, [r4, #128]	; 0x80
   13c7c:	ldr	r1, [r4, #32]
   13c80:	ldr	lr, [r4, #136]	; 0x88
   13c84:	add	r2, ip, r3
   13c88:	ldrh	r3, [r4, #164]	; 0xa4
   13c8c:	strh	r9, [r1, #34]	; 0x22
   13c90:	strh	r8, [r4, #132]	; 0x84
   13c94:	ldr	r9, [r4, #144]	; 0x90
   13c98:	ldr	r8, [r4, #152]	; 0x98
   13c9c:	strh	r3, [r1, #32]
   13ca0:	ldr	r3, [r4, #168]	; 0xa8
   13ca4:	strh	r7, [r4, #164]	; 0xa4
   13ca8:	str	r9, [r1, #20]
   13cac:	str	r8, [r1, #28]
   13cb0:	str	lr, [r4, #144]	; 0x90
   13cb4:	str	r2, [r4, #148]	; 0x94
   13cb8:	str	ip, [r4, #152]	; 0x98
   13cbc:	str	r3, [r1, #16]
   13cc0:	beq	13cec <flatcc_builder_start_buffer@@Base+0xc0>
   13cc4:	ldr	r2, [r5]
   13cc8:	mov	r3, #1
   13ccc:	str	r2, [r4, #168]	; 0xa8
   13cd0:	strh	r3, [r1, #14]
   13cd4:	ldrd	r4, [sp]
   13cd8:	ldrd	r6, [sp, #8]
   13cdc:	ldrd	r8, [sp, #16]
   13ce0:	ldr	sl, [sp, #24]
   13ce4:	add	sp, sp, #28
   13ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   13cec:	ldr	r3, [pc, #16]	; 13d04 <flatcc_builder_start_buffer@@Base+0xd8>
   13cf0:	ldr	r5, [r6, r3]
   13cf4:	b	13cc4 <flatcc_builder_start_buffer@@Base+0x98>
   13cf8:	mvn	r0, #0
   13cfc:	b	13cd4 <flatcc_builder_start_buffer@@Base+0xa8>
   13d00:	muleq	r1, r8, r3
   13d04:	andeq	r0, r0, ip, asr r0

00013d08 <flatcc_builder_end_buffer@@Base>:
   13d08:	ldr	ip, [r0, #32]
   13d0c:	strd	r4, [sp, #-16]!
   13d10:	mov	r4, r0
   13d14:	ldrh	r2, [r0, #164]	; 0xa4
   13d18:	ldr	r0, [r0, #152]	; 0x98
   13d1c:	ldrh	ip, [ip, #14]
   13d20:	and	r2, r2, #2
   13d24:	str	r6, [sp, #8]
   13d28:	str	lr, [sp, #12]
   13d2c:	sub	sp, sp, #8
   13d30:	cmp	r0, #0
   13d34:	moveq	r0, r2
   13d38:	orrne	r0, r2, #1
   13d3c:	cmp	ip, #1
   13d40:	bne	13e28 <flatcc_builder_end_buffer@@Base+0x120>
   13d44:	ldrh	r2, [r4, #132]	; 0x84
   13d48:	mov	r3, r1
   13d4c:	add	r1, r4, #168	; 0xa8
   13d50:	ldrh	ip, [r4, #128]	; 0x80
   13d54:	cmp	r2, ip
   13d58:	movhi	ip, r2
   13d5c:	strhhi	r2, [r4, #128]	; 0x80
   13d60:	str	ip, [sp]
   13d64:	str	r0, [sp, #4]
   13d68:	mov	r0, r4
   13d6c:	bl	1387c <flatcc_builder_create_buffer@@Base>
   13d70:	subs	r5, r0, #0
   13d74:	beq	13e10 <flatcc_builder_end_buffer@@Base+0x108>
   13d78:	mov	r1, #0
   13d7c:	ldr	r0, [r4, #16]
   13d80:	ldr	r3, [r4, #32]
   13d84:	ldr	r2, [r4, #20]
   13d88:	ldrh	lr, [r3, #32]
   13d8c:	ldr	ip, [r3, #16]
   13d90:	ldr	r6, [r3, #20]
   13d94:	ldr	r3, [r3, #28]
   13d98:	str	r6, [r4, #144]	; 0x90
   13d9c:	strh	lr, [r4, #164]	; 0xa4
   13da0:	str	r3, [r4, #152]	; 0x98
   13da4:	str	ip, [r4, #168]	; 0xa8
   13da8:	bl	12014 <memset@plt>
   13dac:	ldr	r3, [r4, #32]
   13db0:	ldr	r0, [r4, #60]	; 0x3c
   13db4:	ldr	r2, [r4, #64]	; 0x40
   13db8:	ldr	ip, [r3]
   13dbc:	ldmib	r3, {r1, lr}
   13dc0:	add	r0, r0, ip
   13dc4:	sub	r2, r2, ip
   13dc8:	str	r0, [r4, #16]
   13dcc:	cmp	r2, r1
   13dd0:	ldrh	r0, [r4, #128]	; 0x80
   13dd4:	movcs	r2, r1
   13dd8:	str	lr, [r4, #20]
   13ddc:	str	ip, [r4, #28]
   13de0:	ldrh	ip, [r4, #130]	; 0x82
   13de4:	str	r2, [r4, #24]
   13de8:	ldr	r2, [r4, #156]	; 0x9c
   13dec:	str	r1, [r3, #4]
   13df0:	cmp	r0, ip
   13df4:	sub	r0, r3, #36	; 0x24
   13df8:	strhcc	ip, [r4, #128]	; 0x80
   13dfc:	ldrh	r1, [r3, #12]
   13e00:	sub	r3, r2, #1
   13e04:	str	r0, [r4, #32]
   13e08:	strh	r1, [r4, #130]	; 0x82
   13e0c:	str	r3, [r4, #156]	; 0x9c
   13e10:	mov	r0, r5
   13e14:	add	sp, sp, #8
   13e18:	ldrd	r4, [sp]
   13e1c:	ldr	r6, [sp, #8]
   13e20:	add	sp, sp, #12
   13e24:	pop	{pc}		; (ldr pc, [sp], #4)
   13e28:	ldr	r3, [pc, #28]	; 13e4c <flatcc_builder_end_buffer@@Base+0x144>
   13e2c:	movw	r2, #838	; 0x346
   13e30:	ldr	r1, [pc, #24]	; 13e50 <flatcc_builder_end_buffer@@Base+0x148>
   13e34:	ldr	r0, [pc, #24]	; 13e54 <flatcc_builder_end_buffer@@Base+0x14c>
   13e38:	add	r3, pc, r3
   13e3c:	add	r3, r3, #268	; 0x10c
   13e40:	add	r1, pc, r1
   13e44:	add	r0, pc, r0
   13e48:	bl	12044 <__assert_fail@plt>
   13e4c:	andeq	r3, r0, r8, asr #28
   13e50:	muleq	r0, r0, r5
   13e54:	andeq	r4, r0, r4, lsl #13

00013e58 <flatcc_builder_start_struct@@Base>:
   13e58:	strd	r4, [sp, #-16]!
   13e5c:	mov	r5, r1
   13e60:	mov	r1, r2
   13e64:	mov	r4, r0
   13e68:	str	r6, [sp, #8]
   13e6c:	str	lr, [sp, #12]
   13e70:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   13e74:	cmp	r0, #0
   13e78:	bne	13f00 <flatcc_builder_start_struct@@Base+0xa8>
   13e7c:	ldr	r6, [r4, #20]
   13e80:	mov	ip, #2
   13e84:	ldr	r2, [r4, #28]
   13e88:	ldr	r3, [r4, #64]	; 0x40
   13e8c:	add	r5, r5, r6
   13e90:	ldr	r0, [r4, #60]	; 0x3c
   13e94:	ldr	r1, [r4, #32]
   13e98:	sub	r3, r3, r2
   13e9c:	cmn	r3, #4
   13ea0:	add	r0, r0, r2
   13ea4:	mvnhi	r2, #3
   13ea8:	movhi	r3, r2
   13eac:	strh	ip, [r1, #14]
   13eb0:	strhi	r2, [r4, #24]
   13eb4:	mvn	r2, #3
   13eb8:	strls	r3, [r4, #24]
   13ebc:	cmp	r5, r3
   13ec0:	str	r0, [r4, #16]
   13ec4:	str	r2, [r1, #4]
   13ec8:	str	r5, [r4, #20]
   13ecc:	bcs	13ee4 <flatcc_builder_start_struct@@Base+0x8c>
   13ed0:	add	r0, r0, r6
   13ed4:	ldrd	r4, [sp]
   13ed8:	ldr	r6, [sp, #8]
   13edc:	add	sp, sp, #12
   13ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee4:	add	r1, r5, #1
   13ee8:	mov	r0, r4
   13eec:	bl	12a9c <_start@@Base+0x3e8>
   13ef0:	cmp	r0, #0
   13ef4:	bne	13f00 <flatcc_builder_start_struct@@Base+0xa8>
   13ef8:	ldr	r0, [r4, #16]
   13efc:	b	13ed0 <flatcc_builder_start_struct@@Base+0x78>
   13f00:	ldrd	r4, [sp]
   13f04:	mov	r0, #0
   13f08:	ldr	r6, [sp, #8]
   13f0c:	add	sp, sp, #12
   13f10:	pop	{pc}		; (ldr pc, [sp], #4)

00013f14 <flatcc_builder_struct_edit@@Base>:
   13f14:	ldr	r0, [r0, #16]
   13f18:	bx	lr

00013f1c <flatcc_builder_end_struct@@Base>:
   13f1c:	ldr	r3, [r0, #32]
   13f20:	strd	r4, [sp, #-16]!
   13f24:	ldrh	r3, [r3, #14]
   13f28:	str	r6, [sp, #8]
   13f2c:	str	lr, [sp, #12]
   13f30:	cmp	r3, #2
   13f34:	bne	13fdc <flatcc_builder_end_struct@@Base+0xc0>
   13f38:	ldrh	r3, [r0, #130]	; 0x82
   13f3c:	mov	r4, r0
   13f40:	ldr	r1, [r0, #16]
   13f44:	ldr	r2, [r0, #20]
   13f48:	bl	13ac8 <flatcc_builder_create_struct@@Base>
   13f4c:	subs	r5, r0, #0
   13f50:	beq	13fc8 <flatcc_builder_end_struct@@Base+0xac>
   13f54:	mov	r1, #0
   13f58:	ldr	r0, [r4, #16]
   13f5c:	ldr	r2, [r4, #20]
   13f60:	bl	12014 <memset@plt>
   13f64:	ldr	r3, [r4, #32]
   13f68:	ldr	r0, [r4, #60]	; 0x3c
   13f6c:	ldr	r2, [r4, #64]	; 0x40
   13f70:	ldr	ip, [r3]
   13f74:	ldmib	r3, {r1, lr}
   13f78:	add	r0, r0, ip
   13f7c:	sub	r2, r2, ip
   13f80:	str	r0, [r4, #16]
   13f84:	cmp	r2, r1
   13f88:	ldrh	r0, [r4, #128]	; 0x80
   13f8c:	movcs	r2, r1
   13f90:	str	lr, [r4, #20]
   13f94:	str	ip, [r4, #28]
   13f98:	ldrh	ip, [r4, #130]	; 0x82
   13f9c:	str	r2, [r4, #24]
   13fa0:	ldr	r2, [r4, #156]	; 0x9c
   13fa4:	str	r1, [r3, #4]
   13fa8:	cmp	r0, ip
   13fac:	sub	r0, r3, #36	; 0x24
   13fb0:	strhcc	ip, [r4, #128]	; 0x80
   13fb4:	ldrh	r1, [r3, #12]
   13fb8:	sub	r3, r2, #1
   13fbc:	str	r0, [r4, #32]
   13fc0:	strh	r1, [r4, #130]	; 0x82
   13fc4:	str	r3, [r4, #156]	; 0x9c
   13fc8:	mov	r0, r5
   13fcc:	ldrd	r4, [sp]
   13fd0:	ldr	r6, [sp, #8]
   13fd4:	add	sp, sp, #12
   13fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fdc:	ldr	r3, [pc, #28]	; 14000 <flatcc_builder_end_struct@@Base+0xe4>
   13fe0:	mov	r2, #872	; 0x368
   13fe4:	ldr	r1, [pc, #24]	; 14004 <flatcc_builder_end_struct@@Base+0xe8>
   13fe8:	ldr	r0, [pc, #24]	; 14008 <flatcc_builder_end_struct@@Base+0xec>
   13fec:	add	r3, pc, r3
   13ff0:	add	r3, r3, #296	; 0x128
   13ff4:	add	r1, pc, r1
   13ff8:	add	r0, pc, r0
   13ffc:	bl	12044 <__assert_fail@plt>
   14000:	muleq	r0, r4, ip
   14004:	ldrdeq	r4, [r0], -ip
   14008:	strdeq	r4, [r0], -ip

0001400c <flatcc_builder_extend_vector@@Base>:
   1400c:	ldr	r2, [r0, #32]
   14010:	strd	r4, [sp, #-16]!
   14014:	ldr	r3, [r2, #20]
   14018:	ldr	ip, [r2, #24]
   1401c:	str	r6, [sp, #8]
   14020:	str	lr, [sp, #12]
   14024:	adds	r3, r1, r3
   14028:	movcs	r4, #1
   1402c:	movcc	r4, #0
   14030:	cmp	ip, r3
   14034:	orrcc	r4, r4, #1
   14038:	cmp	r4, #0
   1403c:	bne	14098 <flatcc_builder_extend_vector@@Base+0x8c>
   14040:	ldr	ip, [r2, #16]
   14044:	mov	r5, r0
   14048:	ldr	r6, [r0, #20]
   1404c:	str	r3, [r2, #20]
   14050:	ldr	r3, [r0, #24]
   14054:	mla	r1, ip, r1, r6
   14058:	cmp	r1, r3
   1405c:	str	r1, [r0, #20]
   14060:	bcs	1407c <flatcc_builder_extend_vector@@Base+0x70>
   14064:	ldr	r0, [r5, #16]
   14068:	add	r0, r0, r6
   1406c:	ldrd	r4, [sp]
   14070:	ldr	r6, [sp, #8]
   14074:	add	sp, sp, #12
   14078:	pop	{pc}		; (ldr pc, [sp], #4)
   1407c:	add	r1, r1, #1
   14080:	mvn	r2, #3
   14084:	bl	12a9c <_start@@Base+0x3e8>
   14088:	cmp	r0, #0
   1408c:	beq	14064 <flatcc_builder_extend_vector@@Base+0x58>
   14090:	mov	r0, r4
   14094:	b	1406c <flatcc_builder_extend_vector@@Base+0x60>
   14098:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>

0001409c <flatcc_builder_vector_push@@Base>:
   1409c:	ldr	r3, [r0, #32]
   140a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   140a4:	ldrh	r2, [r3, #14]
   140a8:	strd	r6, [sp, #8]
   140ac:	str	r8, [sp, #16]
   140b0:	str	lr, [sp, #20]
   140b4:	cmp	r2, #4
   140b8:	bne	1414c <flatcc_builder_vector_push@@Base+0xb0>
   140bc:	mov	r7, r1
   140c0:	ldr	r2, [r3, #20]
   140c4:	ldr	r1, [r3, #24]
   140c8:	cmp	r2, r1
   140cc:	bhi	14170 <flatcc_builder_vector_push@@Base+0xd4>
   140d0:	add	r2, r2, #1
   140d4:	ldr	r6, [r3, #16]
   140d8:	mov	r4, r0
   140dc:	ldr	r5, [r0, #20]
   140e0:	str	r2, [r3, #20]
   140e4:	ldr	r3, [r0, #24]
   140e8:	add	r1, r6, r5
   140ec:	cmp	r1, r3
   140f0:	str	r1, [r0, #20]
   140f4:	bcs	14130 <flatcc_builder_vector_push@@Base+0x94>
   140f8:	ldr	r3, [r4, #16]
   140fc:	adds	r3, r3, r5
   14100:	beq	14118 <flatcc_builder_vector_push@@Base+0x7c>
   14104:	mov	r0, r3
   14108:	mov	r2, r6
   1410c:	mov	r1, r7
   14110:	bl	11f90 <memcpy@plt>
   14114:	mov	r3, r0
   14118:	ldrd	r4, [sp]
   1411c:	mov	r0, r3
   14120:	ldrd	r6, [sp, #8]
   14124:	ldr	r8, [sp, #16]
   14128:	add	sp, sp, #20
   1412c:	pop	{pc}		; (ldr pc, [sp], #4)
   14130:	add	r1, r1, #1
   14134:	mvn	r2, #3
   14138:	bl	12a9c <_start@@Base+0x3e8>
   1413c:	cmp	r0, #0
   14140:	beq	140f8 <flatcc_builder_vector_push@@Base+0x5c>
   14144:	mov	r3, #0
   14148:	b	14118 <flatcc_builder_vector_push@@Base+0x7c>
   1414c:	ldr	r3, [pc, #64]	; 14194 <flatcc_builder_vector_push@@Base+0xf8>
   14150:	movw	r2, #907	; 0x38b
   14154:	ldr	r1, [pc, #60]	; 14198 <flatcc_builder_vector_push@@Base+0xfc>
   14158:	ldr	r0, [pc, #60]	; 1419c <flatcc_builder_vector_push@@Base+0x100>
   1415c:	add	r3, pc, r3
   14160:	add	r3, r3, #324	; 0x144
   14164:	add	r1, pc, r1
   14168:	add	r0, pc, r0
   1416c:	bl	12044 <__assert_fail@plt>
   14170:	ldr	r3, [pc, #40]	; 141a0 <flatcc_builder_vector_push@@Base+0x104>
   14174:	mov	r2, #908	; 0x38c
   14178:	ldr	r1, [pc, #36]	; 141a4 <flatcc_builder_vector_push@@Base+0x108>
   1417c:	ldr	r0, [pc, #36]	; 141a8 <flatcc_builder_vector_push@@Base+0x10c>
   14180:	add	r3, pc, r3
   14184:	add	r3, r3, #324	; 0x144
   14188:	add	r1, pc, r1
   1418c:	add	r0, pc, r0
   14190:	bl	12044 <__assert_fail@plt>
   14194:	andeq	r3, r0, r4, lsr #22
   14198:	andeq	r4, r0, ip, ror #4
   1419c:			; <UNDEFINED> instruction: 0x000043b8
   141a0:	andeq	r3, r0, r0, lsl #22
   141a4:	andeq	r4, r0, r8, asr #4
   141a8:	andeq	r4, r0, r0, asr #7

000141ac <flatcc_builder_append_vector@@Base>:
   141ac:	ldr	ip, [r0, #32]
   141b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141b4:	ldrh	r3, [ip, #14]
   141b8:	strd	r6, [sp, #8]
   141bc:	str	r8, [sp, #16]
   141c0:	str	lr, [sp, #20]
   141c4:	cmp	r3, #4
   141c8:	bne	14274 <flatcc_builder_append_vector@@Base+0xc8>
   141cc:	mov	r6, r1
   141d0:	ldr	r1, [ip, #20]
   141d4:	ldr	r4, [ip, #24]
   141d8:	adds	r1, r2, r1
   141dc:	movcs	r3, #1
   141e0:	movcc	r3, #0
   141e4:	cmp	r4, r1
   141e8:	movcs	r4, r3
   141ec:	orrcc	r4, r3, #1
   141f0:	cmp	r4, #0
   141f4:	bne	14298 <flatcc_builder_append_vector@@Base+0xec>
   141f8:	ldr	r7, [ip, #16]
   141fc:	mov	r5, r0
   14200:	ldr	r8, [r0, #20]
   14204:	ldr	r3, [r0, #24]
   14208:	mul	r7, r7, r2
   1420c:	str	r1, [ip, #20]
   14210:	add	r1, r7, r8
   14214:	cmp	r1, r3
   14218:	str	r1, [r0, #20]
   1421c:	bcs	14258 <flatcc_builder_append_vector@@Base+0xac>
   14220:	ldr	r3, [r5, #16]
   14224:	adds	r3, r3, r8
   14228:	beq	14240 <flatcc_builder_append_vector@@Base+0x94>
   1422c:	mov	r0, r3
   14230:	mov	r2, r7
   14234:	mov	r1, r6
   14238:	bl	11f90 <memcpy@plt>
   1423c:	mov	r3, r0
   14240:	ldrd	r4, [sp]
   14244:	mov	r0, r3
   14248:	ldrd	r6, [sp, #8]
   1424c:	ldr	r8, [sp, #16]
   14250:	add	sp, sp, #20
   14254:	pop	{pc}		; (ldr pc, [sp], #4)
   14258:	add	r1, r1, #1
   1425c:	mvn	r2, #3
   14260:	bl	12a9c <_start@@Base+0x3e8>
   14264:	cmp	r0, #0
   14268:	beq	14220 <flatcc_builder_append_vector@@Base+0x74>
   1426c:	mov	r3, r4
   14270:	b	14240 <flatcc_builder_append_vector@@Base+0x94>
   14274:	ldr	r3, [pc, #32]	; 1429c <flatcc_builder_append_vector@@Base+0xf0>
   14278:	movw	r2, #915	; 0x393
   1427c:	ldr	r1, [pc, #28]	; 142a0 <flatcc_builder_append_vector@@Base+0xf4>
   14280:	ldr	r0, [pc, #28]	; 142a4 <flatcc_builder_append_vector@@Base+0xf8>
   14284:	add	r3, pc, r3
   14288:	add	r3, r3, #352	; 0x160
   1428c:	add	r1, pc, r1
   14290:	add	r0, pc, r0
   14294:	bl	12044 <__assert_fail@plt>
   14298:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>
   1429c:	strdeq	r3, [r0], -ip
   142a0:	andeq	r4, r0, r4, asr #2
   142a4:	muleq	r0, r0, r2

000142a8 <flatcc_builder_extend_offset_vector@@Base>:
   142a8:	ldr	ip, [r0, #32]
   142ac:	strd	r4, [sp, #-16]!
   142b0:	ldr	r3, [ip, #20]
   142b4:	str	r6, [sp, #8]
   142b8:	str	lr, [sp, #12]
   142bc:	adds	r2, r1, r3
   142c0:	movcs	r3, #1
   142c4:	movcc	r3, #0
   142c8:	cmn	r2, #-1073741823	; 0xc0000001
   142cc:	movls	r4, #0
   142d0:	movhi	r4, #1
   142d4:	orrs	r4, r3, r4
   142d8:	bne	14330 <flatcc_builder_extend_offset_vector@@Base+0x88>
   142dc:	ldr	r6, [r0, #20]
   142e0:	mov	r5, r0
   142e4:	ldr	r3, [r0, #24]
   142e8:	str	r2, [ip, #20]
   142ec:	add	r1, r6, r1, lsl #2
   142f0:	cmp	r1, r3
   142f4:	str	r1, [r0, #20]
   142f8:	bcs	14314 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   142fc:	ldr	r0, [r5, #16]
   14300:	add	r0, r0, r6
   14304:	ldrd	r4, [sp]
   14308:	ldr	r6, [sp, #8]
   1430c:	add	sp, sp, #12
   14310:	pop	{pc}		; (ldr pc, [sp], #4)
   14314:	add	r1, r1, #1
   14318:	mvn	r2, #3
   1431c:	bl	12a9c <_start@@Base+0x3e8>
   14320:	cmp	r0, #0
   14324:	beq	142fc <flatcc_builder_extend_offset_vector@@Base+0x54>
   14328:	mov	r0, r4
   1432c:	b	14304 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14330:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>

00014334 <flatcc_builder_offset_vector_push@@Base>:
   14334:	ldr	r2, [r0, #32]
   14338:	strd	r4, [sp, #-16]!
   1433c:	ldrh	r3, [r2, #14]
   14340:	str	r6, [sp, #8]
   14344:	str	lr, [sp, #12]
   14348:	cmp	r3, #5
   1434c:	bne	143c8 <flatcc_builder_offset_vector_push@@Base+0x94>
   14350:	ldr	r3, [r2, #20]
   14354:	cmn	r3, #-1073741823	; 0xc0000001
   14358:	beq	143b4 <flatcc_builder_offset_vector_push@@Base+0x80>
   1435c:	ldr	r5, [r0, #20]
   14360:	mov	r6, r1
   14364:	add	r3, r3, #1
   14368:	mov	r4, r0
   1436c:	ldr	r1, [r0, #24]
   14370:	str	r3, [r2, #20]
   14374:	add	r3, r5, #4
   14378:	cmp	r3, r1
   1437c:	str	r3, [r0, #20]
   14380:	bcs	143a0 <flatcc_builder_offset_vector_push@@Base+0x6c>
   14384:	ldr	r3, [r4, #16]
   14388:	adds	r0, r3, r5
   1438c:	strne	r6, [r3, r5]
   14390:	ldrd	r4, [sp]
   14394:	ldr	r6, [sp, #8]
   14398:	add	sp, sp, #12
   1439c:	pop	{pc}		; (ldr pc, [sp], #4)
   143a0:	mvn	r2, #3
   143a4:	add	r1, r5, #5
   143a8:	bl	12a9c <_start@@Base+0x3e8>
   143ac:	cmp	r0, #0
   143b0:	beq	14384 <flatcc_builder_offset_vector_push@@Base+0x50>
   143b4:	ldrd	r4, [sp]
   143b8:	mov	r0, #0
   143bc:	ldr	r6, [sp, #8]
   143c0:	add	sp, sp, #12
   143c4:	pop	{pc}		; (ldr pc, [sp], #4)
   143c8:	ldr	r3, [pc, #28]	; 143ec <flatcc_builder_offset_vector_push@@Base+0xb8>
   143cc:	movw	r2, #934	; 0x3a6
   143d0:	ldr	r1, [pc, #24]	; 143f0 <flatcc_builder_offset_vector_push@@Base+0xbc>
   143d4:	ldr	r0, [pc, #24]	; 143f4 <flatcc_builder_offset_vector_push@@Base+0xc0>
   143d8:	add	r3, pc, r3
   143dc:	add	r3, r3, #384	; 0x180
   143e0:	add	r1, pc, r1
   143e4:	add	r0, pc, r0
   143e8:	bl	12044 <__assert_fail@plt>
   143ec:	andeq	r3, r0, r8, lsr #17
   143f0:	strdeq	r3, [r0], -r0
   143f4:	andeq	r4, r0, r8, lsr #3

000143f8 <flatcc_builder_append_offset_vector@@Base>:
   143f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143fc:	mov	r4, r1
   14400:	ldr	r1, [r0, #32]
   14404:	ldrh	r3, [r1, #14]
   14408:	strd	r6, [sp, #8]
   1440c:	str	r8, [sp, #16]
   14410:	str	lr, [sp, #20]
   14414:	cmp	r3, #5
   14418:	bne	144b8 <flatcc_builder_append_offset_vector@@Base+0xc0>
   1441c:	ldr	r3, [r1, #20]
   14420:	adds	r3, r2, r3
   14424:	movcs	lr, #1
   14428:	movcc	lr, #0
   1442c:	cmn	r3, #-1073741823	; 0xc0000001
   14430:	movls	ip, #0
   14434:	movhi	ip, #1
   14438:	orrs	r8, lr, ip
   1443c:	bne	144dc <flatcc_builder_append_offset_vector@@Base+0xe4>
   14440:	ldr	r7, [r0, #20]
   14444:	lsl	r6, r2, #2
   14448:	mov	r5, r0
   1444c:	str	r3, [r1, #20]
   14450:	ldr	r3, [r0, #24]
   14454:	add	r1, r6, r7
   14458:	cmp	r1, r3
   1445c:	str	r1, [r0, #20]
   14460:	bcs	1449c <flatcc_builder_append_offset_vector@@Base+0xa4>
   14464:	ldr	r3, [r5, #16]
   14468:	adds	r3, r3, r7
   1446c:	beq	14484 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14470:	mov	r0, r3
   14474:	mov	r2, r6
   14478:	mov	r1, r4
   1447c:	bl	11f90 <memcpy@plt>
   14480:	mov	r3, r0
   14484:	ldrd	r4, [sp]
   14488:	mov	r0, r3
   1448c:	ldrd	r6, [sp, #8]
   14490:	ldr	r8, [sp, #16]
   14494:	add	sp, sp, #20
   14498:	pop	{pc}		; (ldr pc, [sp], #4)
   1449c:	add	r1, r1, #1
   144a0:	mvn	r2, #3
   144a4:	bl	12a9c <_start@@Base+0x3e8>
   144a8:	cmp	r0, #0
   144ac:	beq	14464 <flatcc_builder_append_offset_vector@@Base+0x6c>
   144b0:	mov	r3, r8
   144b4:	b	14484 <flatcc_builder_append_offset_vector@@Base+0x8c>
   144b8:	ldr	r3, [pc, #32]	; 144e0 <flatcc_builder_append_offset_vector@@Base+0xe8>
   144bc:	mov	r2, #948	; 0x3b4
   144c0:	ldr	r1, [pc, #28]	; 144e4 <flatcc_builder_append_offset_vector@@Base+0xec>
   144c4:	ldr	r0, [pc, #28]	; 144e8 <flatcc_builder_append_offset_vector@@Base+0xf0>
   144c8:	add	r3, pc, r3
   144cc:	add	r3, r3, #420	; 0x1a4
   144d0:	add	r1, pc, r1
   144d4:	add	r0, pc, r0
   144d8:	bl	12044 <__assert_fail@plt>
   144dc:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>
   144e0:			; <UNDEFINED> instruction: 0x000037b8
   144e4:	andeq	r3, r0, r0, lsl #30
   144e8:	strheq	r4, [r0], -r8

000144ec <flatcc_builder_extend_string@@Base>:
   144ec:	ldr	r2, [r0, #32]
   144f0:	strd	r4, [sp, #-16]!
   144f4:	ldrh	r3, [r2, #14]
   144f8:	str	r6, [sp, #8]
   144fc:	str	lr, [sp, #12]
   14500:	cmp	r3, #6
   14504:	bne	1456c <flatcc_builder_extend_string@@Base+0x80>
   14508:	ldr	r3, [r2, #20]
   1450c:	adds	r3, r1, r3
   14510:	bcs	14568 <flatcc_builder_extend_string@@Base+0x7c>
   14514:	ldr	r5, [r0, #20]
   14518:	mov	r4, r0
   1451c:	str	r3, [r2, #20]
   14520:	ldr	r3, [r0, #24]
   14524:	add	r1, r1, r5
   14528:	cmp	r1, r3
   1452c:	str	r1, [r0, #20]
   14530:	bcs	1454c <flatcc_builder_extend_string@@Base+0x60>
   14534:	ldr	r0, [r4, #16]
   14538:	add	r0, r0, r5
   1453c:	ldrd	r4, [sp]
   14540:	ldr	r6, [sp, #8]
   14544:	add	sp, sp, #12
   14548:	pop	{pc}		; (ldr pc, [sp], #4)
   1454c:	add	r1, r1, #1
   14550:	mvn	r2, #3
   14554:	bl	12a9c <_start@@Base+0x3e8>
   14558:	cmp	r0, #0
   1455c:	beq	14534 <flatcc_builder_extend_string@@Base+0x48>
   14560:	mov	r0, #0
   14564:	b	1453c <flatcc_builder_extend_string@@Base+0x50>
   14568:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>
   1456c:	ldr	r3, [pc, #28]	; 14590 <flatcc_builder_extend_string@@Base+0xa4>
   14570:	movw	r2, #957	; 0x3bd
   14574:	ldr	r1, [pc, #24]	; 14594 <flatcc_builder_extend_string@@Base+0xa8>
   14578:	ldr	r0, [pc, #24]	; 14598 <flatcc_builder_extend_string@@Base+0xac>
   1457c:	add	r3, pc, r3
   14580:	add	r3, r3, #456	; 0x1c8
   14584:	add	r1, pc, r1
   14588:	add	r0, pc, r0
   1458c:	bl	12044 <__assert_fail@plt>
   14590:	andeq	r3, r0, r4, lsl #14
   14594:	andeq	r3, r0, ip, asr #28
   14598:	andeq	r4, r0, r8, lsr r0

0001459c <flatcc_builder_append_string@@Base>:
   1459c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145a0:	strd	r6, [sp, #8]
   145a4:	mov	r7, r1
   145a8:	ldr	r1, [r0, #32]
   145ac:	str	r8, [sp, #16]
   145b0:	str	lr, [sp, #20]
   145b4:	ldrh	r3, [r1, #14]
   145b8:	cmp	r3, #6
   145bc:	bne	14648 <flatcc_builder_append_string@@Base+0xac>
   145c0:	ldr	r3, [r1, #20]
   145c4:	mov	r5, r2
   145c8:	adds	r3, r2, r3
   145cc:	bcs	14644 <flatcc_builder_append_string@@Base+0xa8>
   145d0:	ldr	r6, [r0, #20]
   145d4:	mov	r4, r0
   145d8:	str	r3, [r1, #20]
   145dc:	ldr	r3, [r0, #24]
   145e0:	add	r1, r2, r6
   145e4:	cmp	r1, r3
   145e8:	str	r1, [r0, #20]
   145ec:	bcs	14628 <flatcc_builder_append_string@@Base+0x8c>
   145f0:	ldr	r3, [r4, #16]
   145f4:	adds	r3, r3, r6
   145f8:	beq	14610 <flatcc_builder_append_string@@Base+0x74>
   145fc:	mov	r0, r3
   14600:	mov	r2, r5
   14604:	mov	r1, r7
   14608:	bl	11f90 <memcpy@plt>
   1460c:	mov	r3, r0
   14610:	ldrd	r4, [sp]
   14614:	mov	r0, r3
   14618:	ldrd	r6, [sp, #8]
   1461c:	ldr	r8, [sp, #16]
   14620:	add	sp, sp, #20
   14624:	pop	{pc}		; (ldr pc, [sp], #4)
   14628:	add	r1, r1, #1
   1462c:	mvn	r2, #3
   14630:	bl	12a9c <_start@@Base+0x3e8>
   14634:	cmp	r0, #0
   14638:	beq	145f0 <flatcc_builder_append_string@@Base+0x54>
   1463c:	mov	r3, #0
   14640:	b	14610 <flatcc_builder_append_string@@Base+0x74>
   14644:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>
   14648:	ldr	r3, [pc, #28]	; 1466c <flatcc_builder_append_string@@Base+0xd0>
   1464c:	movw	r2, #966	; 0x3c6
   14650:	ldr	r1, [pc, #24]	; 14670 <flatcc_builder_append_string@@Base+0xd4>
   14654:	ldr	r0, [pc, #24]	; 14674 <flatcc_builder_append_string@@Base+0xd8>
   14658:	add	r3, pc, r3
   1465c:	add	r3, r3, #488	; 0x1e8
   14660:	add	r1, pc, r1
   14664:	add	r0, pc, r0
   14668:	bl	12044 <__assert_fail@plt>
   1466c:	andeq	r3, r0, r8, lsr #12
   14670:	andeq	r3, r0, r0, ror sp
   14674:	andeq	r3, r0, ip, asr pc

00014678 <flatcc_builder_append_string_str@@Base>:
   14678:	strd	r4, [sp, #-16]!
   1467c:	mov	r5, r0
   14680:	mov	r0, r1
   14684:	mov	r4, r1
   14688:	str	r6, [sp, #8]
   1468c:	str	lr, [sp, #12]
   14690:	bl	11ffc <strlen@plt>
   14694:	mov	r2, r0
   14698:	mov	r1, r4
   1469c:	ldr	r6, [sp, #8]
   146a0:	mov	r0, r5
   146a4:	ldrd	r4, [sp]
   146a8:	ldr	lr, [sp, #12]
   146ac:	add	sp, sp, #16
   146b0:	b	1459c <flatcc_builder_append_string@@Base>

000146b4 <flatcc_builder_append_string_strn@@Base>:
   146b4:	strd	r4, [sp, #-16]!
   146b8:	mov	r4, r1
   146bc:	mov	r1, #0
   146c0:	str	r6, [sp, #8]
   146c4:	mov	r6, r0
   146c8:	mov	r0, r4
   146cc:	mov	r5, r2
   146d0:	str	lr, [sp, #12]
   146d4:	bl	12020 <memchr@plt>
   146d8:	cmp	r0, #0
   146dc:	mov	r1, r4
   146e0:	ldr	lr, [sp, #12]
   146e4:	subne	r5, r0, r4
   146e8:	mov	r0, r6
   146ec:	mov	r2, r5
   146f0:	ldrd	r4, [sp]
   146f4:	ldr	r6, [sp, #8]
   146f8:	add	sp, sp, #16
   146fc:	b	1459c <flatcc_builder_append_string@@Base>

00014700 <flatcc_builder_truncate_vector@@Base>:
   14700:	mov	r3, r0
   14704:	ldr	r0, [r0, #32]
   14708:	str	r4, [sp, #-8]!
   1470c:	ldrh	r2, [r0, #14]
   14710:	str	lr, [sp, #4]
   14714:	cmp	r2, #4
   14718:	bne	14768 <flatcc_builder_truncate_vector@@Base+0x68>
   1471c:	mov	lr, r1
   14720:	ldr	r1, [r0, #20]
   14724:	cmp	r1, lr
   14728:	bcc	1478c <flatcc_builder_truncate_vector@@Base+0x8c>
   1472c:	ldr	r2, [r0, #16]
   14730:	sub	ip, r1, lr
   14734:	mov	r1, #0
   14738:	str	ip, [r0, #20]
   1473c:	ldr	r0, [r3, #16]
   14740:	ldr	ip, [r3, #20]
   14744:	mul	r2, r2, lr
   14748:	sub	ip, ip, r2
   1474c:	add	r0, r0, ip
   14750:	str	ip, [r3, #20]
   14754:	bl	12014 <memset@plt>
   14758:	ldr	r4, [sp]
   1475c:	add	sp, sp, #4
   14760:	mov	r0, #0
   14764:	pop	{pc}		; (ldr pc, [sp], #4)
   14768:	ldr	r3, [pc, #64]	; 147b0 <flatcc_builder_truncate_vector@@Base+0xb0>
   1476c:	movw	r2, #985	; 0x3d9
   14770:	ldr	r1, [pc, #60]	; 147b4 <flatcc_builder_truncate_vector@@Base+0xb4>
   14774:	ldr	r0, [pc, #60]	; 147b8 <flatcc_builder_truncate_vector@@Base+0xb8>
   14778:	add	r3, pc, r3
   1477c:	add	r3, r3, #520	; 0x208
   14780:	add	r1, pc, r1
   14784:	add	r0, pc, r0
   14788:	bl	12044 <__assert_fail@plt>
   1478c:	ldr	r3, [pc, #40]	; 147bc <flatcc_builder_truncate_vector@@Base+0xbc>
   14790:	movw	r2, #986	; 0x3da
   14794:	ldr	r1, [pc, #36]	; 147c0 <flatcc_builder_truncate_vector@@Base+0xc0>
   14798:	ldr	r0, [pc, #36]	; 147c4 <flatcc_builder_truncate_vector@@Base+0xc4>
   1479c:	add	r3, pc, r3
   147a0:	add	r3, r3, #520	; 0x208
   147a4:	add	r1, pc, r1
   147a8:	add	r0, pc, r0
   147ac:	bl	12044 <__assert_fail@plt>
   147b0:	andeq	r3, r0, r8, lsl #10
   147b4:	andeq	r3, r0, r0, asr ip
   147b8:	muleq	r0, ip, sp
   147bc:	andeq	r3, r0, r4, ror #9
   147c0:	andeq	r3, r0, ip, lsr #24
   147c4:	andeq	r3, r0, r4, asr #28

000147c8 <flatcc_builder_truncate_offset_vector@@Base>:
   147c8:	mov	r3, r0
   147cc:	ldr	r0, [r0, #32]
   147d0:	str	r4, [sp, #-8]!
   147d4:	ldrh	r2, [r0, #14]
   147d8:	str	lr, [sp, #4]
   147dc:	cmp	r2, #5
   147e0:	bne	14830 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   147e4:	mov	lr, r1
   147e8:	ldr	r1, [r0, #20]
   147ec:	cmp	r1, lr
   147f0:	bcc	14854 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   147f4:	ldr	r2, [r0, #16]
   147f8:	sub	ip, r1, lr
   147fc:	mov	r1, #0
   14800:	str	ip, [r0, #20]
   14804:	ldr	r0, [r3, #16]
   14808:	ldr	ip, [r3, #20]
   1480c:	mul	r2, r2, lr
   14810:	sub	ip, ip, r2
   14814:	add	r0, r0, ip
   14818:	str	ip, [r3, #20]
   1481c:	bl	12014 <memset@plt>
   14820:	ldr	r4, [sp]
   14824:	add	sp, sp, #4
   14828:	mov	r0, #0
   1482c:	pop	{pc}		; (ldr pc, [sp], #4)
   14830:	ldr	r3, [pc, #64]	; 14878 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14834:	movw	r2, #994	; 0x3e2
   14838:	ldr	r1, [pc, #60]	; 1487c <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   1483c:	ldr	r0, [pc, #60]	; 14880 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   14840:	add	r3, pc, r3
   14844:	add	r3, r3, #552	; 0x228
   14848:	add	r1, pc, r1
   1484c:	add	r0, pc, r0
   14850:	bl	12044 <__assert_fail@plt>
   14854:	ldr	r3, [pc, #40]	; 14884 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   14858:	movw	r2, #995	; 0x3e3
   1485c:	ldr	r1, [pc, #36]	; 14888 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   14860:	ldr	r0, [pc, #36]	; 1488c <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   14864:	add	r3, pc, r3
   14868:	add	r3, r3, #552	; 0x228
   1486c:	add	r1, pc, r1
   14870:	add	r0, pc, r0
   14874:	bl	12044 <__assert_fail@plt>
   14878:	andeq	r3, r0, r0, asr #8
   1487c:	andeq	r3, r0, r8, lsl #23
   14880:	andeq	r3, r0, r0, asr #26
   14884:	andeq	r3, r0, ip, lsl r4
   14888:	andeq	r3, r0, r4, ror #22
   1488c:	andeq	r3, r0, r0, lsr #27

00014890 <flatcc_builder_truncate_string@@Base>:
   14890:	str	r4, [sp, #-8]!
   14894:	str	lr, [sp, #4]
   14898:	ldr	lr, [r0, #32]
   1489c:	ldrh	r2, [lr, #14]
   148a0:	cmp	r2, #6
   148a4:	bne	148f4 <flatcc_builder_truncate_string@@Base+0x64>
   148a8:	ldr	r2, [lr, #20]
   148ac:	mov	ip, r1
   148b0:	cmp	r2, r1
   148b4:	bcc	14918 <flatcc_builder_truncate_string@@Base+0x88>
   148b8:	sub	r1, r2, r1
   148bc:	mov	r3, r0
   148c0:	ldr	r0, [r0, #16]
   148c4:	mov	r2, ip
   148c8:	str	r1, [lr, #20]
   148cc:	mov	r1, #0
   148d0:	ldr	lr, [r3, #20]
   148d4:	sub	ip, lr, ip
   148d8:	add	r0, r0, ip
   148dc:	str	ip, [r3, #20]
   148e0:	bl	12014 <memset@plt>
   148e4:	ldr	r4, [sp]
   148e8:	add	sp, sp, #4
   148ec:	mov	r0, #0
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	ldr	r3, [pc, #64]	; 1493c <flatcc_builder_truncate_string@@Base+0xac>
   148f8:	movw	r2, #1003	; 0x3eb
   148fc:	ldr	r1, [pc, #60]	; 14940 <flatcc_builder_truncate_string@@Base+0xb0>
   14900:	ldr	r0, [pc, #60]	; 14944 <flatcc_builder_truncate_string@@Base+0xb4>
   14904:	add	r3, pc, r3
   14908:	add	r3, r3, #592	; 0x250
   1490c:	add	r1, pc, r1
   14910:	add	r0, pc, r0
   14914:	bl	12044 <__assert_fail@plt>
   14918:	ldr	r3, [pc, #40]	; 14948 <flatcc_builder_truncate_string@@Base+0xb8>
   1491c:	mov	r2, #1004	; 0x3ec
   14920:	ldr	r1, [pc, #36]	; 1494c <flatcc_builder_truncate_string@@Base+0xbc>
   14924:	ldr	r0, [pc, #36]	; 14950 <flatcc_builder_truncate_string@@Base+0xc0>
   14928:	add	r3, pc, r3
   1492c:	add	r3, r3, #592	; 0x250
   14930:	add	r1, pc, r1
   14934:	add	r0, pc, r0
   14938:	bl	12044 <__assert_fail@plt>
   1493c:	andeq	r3, r0, ip, ror r3
   14940:	andeq	r3, r0, r4, asr #21
   14944:			; <UNDEFINED> instruction: 0x00003cb0
   14948:	andeq	r3, r0, r8, asr r3
   1494c:	andeq	r3, r0, r0, lsr #21
   14950:	andeq	r3, r0, r8, lsl sp

00014954 <flatcc_builder_start_vector@@Base>:
   14954:	cmp	r2, #4
   14958:	strd	r4, [sp, #-16]!
   1495c:	mov	r5, r1
   14960:	movcs	r1, r2
   14964:	movcc	r1, #4
   14968:	str	r6, [sp, #8]
   1496c:	mov	r4, r0
   14970:	mov	r6, r3
   14974:	str	lr, [sp, #12]
   14978:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   1497c:	cmp	r0, #0
   14980:	bne	149dc <flatcc_builder_start_vector@@Base+0x88>
   14984:	ldr	r3, [r4, #28]
   14988:	mov	lr, #4
   1498c:	ldr	r2, [r4, #32]
   14990:	ldr	r1, [r4, #64]	; 0x40
   14994:	ldr	ip, [r4, #60]	; 0x3c
   14998:	strh	lr, [r2, #14]
   1499c:	str	r5, [r2, #16]
   149a0:	sub	r1, r1, r3
   149a4:	str	r0, [r2, #20]
   149a8:	cmn	r1, #4
   149ac:	str	r6, [r2, #24]
   149b0:	add	ip, ip, r3
   149b4:	mvnhi	r3, #3
   149b8:	strls	r1, [r4, #24]
   149bc:	strhi	r3, [r4, #24]
   149c0:	mvn	r3, #3
   149c4:	str	ip, [r4, #16]
   149c8:	str	r3, [r2, #4]
   149cc:	ldrd	r4, [sp]
   149d0:	ldr	r6, [sp, #8]
   149d4:	add	sp, sp, #12
   149d8:	pop	{pc}		; (ldr pc, [sp], #4)
   149dc:	mvn	r0, #0
   149e0:	b	149cc <flatcc_builder_start_vector@@Base+0x78>

000149e4 <flatcc_builder_start_offset_vector@@Base>:
   149e4:	mov	r1, #4
   149e8:	strd	r4, [sp, #-16]!
   149ec:	mov	r4, r0
   149f0:	str	r6, [sp, #8]
   149f4:	str	lr, [sp, #12]
   149f8:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   149fc:	cmp	r0, #0
   14a00:	bne	14a58 <flatcc_builder_start_offset_vector@@Base+0x74>
   14a04:	ldr	ip, [r4, #28]
   14a08:	mov	lr, #4
   14a0c:	mov	r5, #5
   14a10:	ldr	r3, [r4, #32]
   14a14:	ldr	r2, [r4, #64]	; 0x40
   14a18:	ldr	r1, [r4, #60]	; 0x3c
   14a1c:	strh	r5, [r3, #14]
   14a20:	str	lr, [r3, #16]
   14a24:	sub	r2, r2, ip
   14a28:	str	r0, [r3, #20]
   14a2c:	cmn	r2, #4
   14a30:	mvnhi	r2, #3
   14a34:	add	r1, r1, ip
   14a38:	str	r1, [r4, #16]
   14a3c:	str	r2, [r4, #24]
   14a40:	mvn	r2, #3
   14a44:	str	r2, [r3, #4]
   14a48:	ldrd	r4, [sp]
   14a4c:	ldr	r6, [sp, #8]
   14a50:	add	sp, sp, #12
   14a54:	pop	{pc}		; (ldr pc, [sp], #4)
   14a58:	mvn	r0, #0
   14a5c:	b	14a48 <flatcc_builder_start_offset_vector@@Base+0x64>

00014a60 <flatcc_builder_start_string@@Base>:
   14a60:	mov	r1, #1
   14a64:	strd	r4, [sp, #-16]!
   14a68:	mov	r4, r0
   14a6c:	str	r6, [sp, #8]
   14a70:	str	lr, [sp, #12]
   14a74:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   14a78:	cmp	r0, #0
   14a7c:	bne	14ad4 <flatcc_builder_start_string@@Base+0x74>
   14a80:	ldr	ip, [r4, #28]
   14a84:	mov	lr, #1
   14a88:	mov	r5, #6
   14a8c:	ldr	r3, [r4, #32]
   14a90:	ldr	r2, [r4, #64]	; 0x40
   14a94:	ldr	r1, [r4, #60]	; 0x3c
   14a98:	strh	r5, [r3, #14]
   14a9c:	str	lr, [r3, #16]
   14aa0:	sub	r2, r2, ip
   14aa4:	str	r0, [r3, #20]
   14aa8:	cmn	r2, #4
   14aac:	mvnhi	r2, #3
   14ab0:	add	r1, r1, ip
   14ab4:	str	r1, [r4, #16]
   14ab8:	str	r2, [r4, #24]
   14abc:	mvn	r2, #3
   14ac0:	str	r2, [r3, #4]
   14ac4:	ldrd	r4, [sp]
   14ac8:	ldr	r6, [sp, #8]
   14acc:	add	sp, sp, #12
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	mvn	r0, #0
   14ad8:	b	14ac4 <flatcc_builder_start_string@@Base+0x64>

00014adc <flatcc_builder_reserve_table@@Base>:
   14adc:	cmp	r1, #0
   14ae0:	strd	r4, [sp, #-20]!	; 0xffffffec
   14ae4:	strd	r6, [sp, #8]
   14ae8:	str	lr, [sp, #16]
   14aec:	sub	sp, sp, #12
   14af0:	blt	14bd4 <flatcc_builder_reserve_table@@Base+0xf8>
   14af4:	ldr	r2, [r0, #32]
   14af8:	add	r1, r1, #2
   14afc:	mov	r4, r0
   14b00:	lsl	r5, r1, #1
   14b04:	ldr	r1, [r0, #56]	; 0x38
   14b08:	ldrh	r6, [r2, #28]
   14b0c:	ldr	r3, [r2, #16]
   14b10:	add	r6, r3, r6, lsl #1
   14b14:	add	r2, r6, r5
   14b18:	cmp	r2, r1
   14b1c:	bhi	14b84 <flatcc_builder_reserve_table@@Base+0xa8>
   14b20:	ldr	r3, [r4, #52]	; 0x34
   14b24:	adds	r3, r3, r6
   14b28:	mvneq	r0, #0
   14b2c:	streq	r3, [r4, #4]
   14b30:	beq	14b70 <flatcc_builder_reserve_table@@Base+0x94>
   14b34:	ldr	r2, [r4, #32]
   14b38:	add	r3, r3, #4
   14b3c:	ldr	r1, [r4, #80]	; 0x50
   14b40:	ldr	r6, [r2, #20]
   14b44:	str	r3, [r4, #4]
   14b48:	add	r2, r5, r6
   14b4c:	sub	r2, r2, #3
   14b50:	cmp	r2, r1
   14b54:	bhi	14bac <flatcc_builder_reserve_table@@Base+0xd0>
   14b58:	ldr	r3, [r4, #76]	; 0x4c
   14b5c:	add	r3, r3, r6
   14b60:	clz	r0, r3
   14b64:	lsr	r0, r0, #5
   14b68:	str	r3, [r4]
   14b6c:	rsb	r0, r0, #0
   14b70:	add	sp, sp, #12
   14b74:	ldrd	r4, [sp]
   14b78:	ldrd	r6, [sp, #8]
   14b7c:	add	sp, sp, #16
   14b80:	pop	{pc}		; (ldr pc, [sp], #4)
   14b84:	mov	ip, #0
   14b88:	add	r1, r0, #52	; 0x34
   14b8c:	ldr	r0, [r0, #40]	; 0x28
   14b90:	mov	r3, #1
   14b94:	str	ip, [sp]
   14b98:	ldr	r7, [r4, #48]	; 0x30
   14b9c:	blx	r7
   14ba0:	cmp	r0, #0
   14ba4:	beq	14b20 <flatcc_builder_reserve_table@@Base+0x44>
   14ba8:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>
   14bac:	mov	ip, #3
   14bb0:	mov	r3, #0
   14bb4:	ldr	r0, [r4, #40]	; 0x28
   14bb8:	add	r1, r4, #76	; 0x4c
   14bbc:	str	ip, [sp]
   14bc0:	ldr	r5, [r4, #48]	; 0x30
   14bc4:	blx	r5
   14bc8:	cmp	r0, #0
   14bcc:	beq	14b58 <flatcc_builder_reserve_table@@Base+0x7c>
   14bd0:	b	14ba8 <flatcc_builder_reserve_table@@Base+0xcc>
   14bd4:	ldr	r3, [pc, #28]	; 14bf8 <flatcc_builder_reserve_table@@Base+0x11c>
   14bd8:	movw	r2, #1065	; 0x429
   14bdc:	ldr	r1, [pc, #24]	; 14bfc <flatcc_builder_reserve_table@@Base+0x120>
   14be0:	ldr	r0, [pc, #24]	; 14c00 <flatcc_builder_reserve_table@@Base+0x124>
   14be4:	add	r3, pc, r3
   14be8:	add	r3, r3, #624	; 0x270
   14bec:	add	r1, pc, r1
   14bf0:	add	r0, pc, r0
   14bf4:	bl	12044 <__assert_fail@plt>
   14bf8:	muleq	r0, ip, r0
   14bfc:	andeq	r3, r0, r4, ror #15
   14c00:	andeq	r3, r0, r0, lsl #21

00014c04 <flatcc_builder_start_table@@Base>:
   14c04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14c08:	mov	r5, r1
   14c0c:	mov	r1, #4
   14c10:	strd	r6, [sp, #8]
   14c14:	mov	r4, r0
   14c18:	strd	r8, [sp, #16]
   14c1c:	str	sl, [sp, #24]
   14c20:	str	lr, [sp, #28]
   14c24:	sub	sp, sp, #8
   14c28:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   14c2c:	subs	r7, r0, #0
   14c30:	bne	14d78 <flatcc_builder_start_table@@Base+0x174>
   14c34:	ldm	r4, {r0, r2}
   14c38:	add	r5, r5, #2
   14c3c:	movw	ip, #15186	; 0x3b52
   14c40:	movt	ip, #12137	; 0x2f69
   14c44:	lsl	r5, r5, #1
   14c48:	mov	r8, #3
   14c4c:	ldrh	lr, [r4, #8]
   14c50:	ldr	r1, [r4, #52]	; 0x34
   14c54:	ldr	sl, [r4, #76]	; 0x4c
   14c58:	ldr	r3, [r4, #32]
   14c5c:	sub	r2, r2, r1
   14c60:	ldr	r9, [r4, #56]	; 0x38
   14c64:	add	r6, r2, lr, lsl #1
   14c68:	sub	r0, r0, sl
   14c6c:	ldr	sl, [r4, #12]
   14c70:	str	r2, [r3, #16]
   14c74:	add	r2, r6, r5
   14c78:	str	r0, [r3, #20]
   14c7c:	cmp	r2, r9
   14c80:	str	sl, [r3, #24]
   14c84:	strh	lr, [r3, #28]
   14c88:	strh	r7, [r4, #8]
   14c8c:	str	ip, [r4, #12]
   14c90:	strh	r8, [r3, #14]
   14c94:	bls	14cbc <flatcc_builder_start_table@@Base+0xb8>
   14c98:	mov	r3, #1
   14c9c:	add	r1, r4, #52	; 0x34
   14ca0:	str	r7, [sp]
   14ca4:	ldr	r0, [r4, #40]	; 0x28
   14ca8:	ldr	r8, [r4, #48]	; 0x30
   14cac:	blx	r8
   14cb0:	cmp	r0, #0
   14cb4:	bne	14d74 <flatcc_builder_start_table@@Base+0x170>
   14cb8:	ldr	r1, [r4, #52]	; 0x34
   14cbc:	adds	r6, r6, r1
   14cc0:	streq	r6, [r4, #4]
   14cc4:	beq	14d78 <flatcc_builder_start_table@@Base+0x174>
   14cc8:	ldr	r1, [r4, #32]
   14ccc:	sub	r2, r5, #3
   14cd0:	add	r6, r6, #4
   14cd4:	ldr	r3, [r4, #80]	; 0x50
   14cd8:	ldr	r5, [r1, #20]
   14cdc:	str	r6, [r4, #4]
   14ce0:	add	r2, r2, r5
   14ce4:	cmp	r2, r3
   14ce8:	bhi	14d50 <flatcc_builder_start_table@@Base+0x14c>
   14cec:	ldr	r3, [r4, #76]	; 0x4c
   14cf0:	add	r3, r3, r5
   14cf4:	cmp	r3, #0
   14cf8:	str	r3, [r4]
   14cfc:	beq	14d78 <flatcc_builder_start_table@@Base+0x174>
   14d00:	ldr	r0, [r4, #28]
   14d04:	movw	r2, #65532	; 0xfffc
   14d08:	ldr	ip, [r4, #32]
   14d0c:	ldr	r3, [r4, #64]	; 0x40
   14d10:	ldr	r1, [r4, #60]	; 0x3c
   14d14:	sub	r3, r3, r0
   14d18:	cmp	r3, r2
   14d1c:	add	r1, r1, r0
   14d20:	movcs	r3, r2
   14d24:	str	r1, [r4, #16]
   14d28:	str	r3, [r4, #24]
   14d2c:	str	r2, [ip, #4]
   14d30:	mov	r0, r7
   14d34:	add	sp, sp, #8
   14d38:	ldrd	r4, [sp]
   14d3c:	ldrd	r6, [sp, #8]
   14d40:	ldrd	r8, [sp, #16]
   14d44:	ldr	sl, [sp, #24]
   14d48:	add	sp, sp, #28
   14d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d50:	mov	ip, #3
   14d54:	mov	r3, #0
   14d58:	ldr	r0, [r4, #40]	; 0x28
   14d5c:	add	r1, r4, #76	; 0x4c
   14d60:	str	ip, [sp]
   14d64:	ldr	r6, [r4, #48]	; 0x30
   14d68:	blx	r6
   14d6c:	cmp	r0, #0
   14d70:	beq	14cec <flatcc_builder_start_table@@Base+0xe8>
   14d74:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>
   14d78:	mvn	r7, #0
   14d7c:	b	14d30 <flatcc_builder_start_table@@Base+0x12c>

00014d80 <flatcc_builder_create_vtable@@Base>:
   14d80:	mov	r3, #0
   14d84:	strd	r4, [sp, #-16]!
   14d88:	mov	r5, r0
   14d8c:	ldr	r0, [r0, #152]	; 0x98
   14d90:	cmp	r2, #0
   14d94:	str	r6, [sp, #8]
   14d98:	str	lr, [sp, #12]
   14d9c:	sub	sp, sp, #80	; 0x50
   14da0:	str	r3, [sp, #8]
   14da4:	str	r3, [sp, #12]
   14da8:	beq	14e20 <flatcc_builder_create_vtable@@Base+0xa0>
   14dac:	mov	r3, #1
   14db0:	cmp	r0, #0
   14db4:	strd	r2, [sp, #8]
   14db8:	str	r1, [sp, #16]
   14dbc:	str	r2, [sp, #20]
   14dc0:	beq	14e58 <flatcc_builder_create_vtable@@Base+0xd8>
   14dc4:	ldr	r3, [r5, #136]	; 0x88
   14dc8:	sub	r4, r3, r2
   14dcc:	cmp	r3, r4
   14dd0:	ble	14e34 <flatcc_builder_create_vtable@@Base+0xb4>
   14dd4:	mov	r3, r4
   14dd8:	add	r1, sp, #16
   14ddc:	str	r2, [sp]
   14de0:	ldr	r2, [sp, #12]
   14de4:	ldr	r0, [r5, #36]	; 0x24
   14de8:	ldr	r6, [r5, #44]	; 0x2c
   14dec:	blx	r6
   14df0:	cmp	r0, #0
   14df4:	bne	14ea4 <flatcc_builder_create_vtable@@Base+0x124>
   14df8:	cmp	r4, #0
   14dfc:	str	r4, [r5, #136]	; 0x88
   14e00:	beq	14e08 <flatcc_builder_create_vtable@@Base+0x88>
   14e04:	add	r4, r4, #1
   14e08:	mov	r0, r4
   14e0c:	add	sp, sp, #80	; 0x50
   14e10:	ldrd	r4, [sp]
   14e14:	ldr	r6, [sp, #8]
   14e18:	add	sp, sp, #12
   14e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e20:	cmp	r0, #0
   14e24:	bne	14e34 <flatcc_builder_create_vtable@@Base+0xb4>
   14e28:	ldr	r3, [r5, #180]	; 0xb4
   14e2c:	cmp	r3, #0
   14e30:	beq	14e9c <flatcc_builder_create_vtable@@Base+0x11c>
   14e34:	ldr	r3, [pc, #108]	; 14ea8 <flatcc_builder_create_vtable@@Base+0x128>
   14e38:	movw	r2, #647	; 0x287
   14e3c:	ldr	r1, [pc, #104]	; 14eac <flatcc_builder_create_vtable@@Base+0x12c>
   14e40:	ldr	r0, [pc, #104]	; 14eb0 <flatcc_builder_create_vtable@@Base+0x130>
   14e44:	add	r3, pc, r3
   14e48:	add	r3, r3, #44	; 0x2c
   14e4c:	add	r1, pc, r1
   14e50:	add	r0, pc, r0
   14e54:	bl	12044 <__assert_fail@plt>
   14e58:	ldr	r3, [r5, #180]	; 0xb4
   14e5c:	cmp	r3, #0
   14e60:	bne	14dc4 <flatcc_builder_create_vtable@@Base+0x44>
   14e64:	ldr	r4, [r5, #140]	; 0x8c
   14e68:	mov	r0, r2
   14e6c:	add	r2, r4, r2
   14e70:	str	r2, [r5, #140]	; 0x8c
   14e74:	mov	r3, r4
   14e78:	add	r1, sp, #16
   14e7c:	str	r0, [sp]
   14e80:	ldr	r2, [sp, #12]
   14e84:	ldr	r0, [r5, #36]	; 0x24
   14e88:	ldr	r5, [r5, #44]	; 0x2c
   14e8c:	blx	r5
   14e90:	cmp	r0, #0
   14e94:	beq	14e04 <flatcc_builder_create_vtable@@Base+0x84>
   14e98:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x158>
   14e9c:	ldr	r4, [r5, #140]	; 0x8c
   14ea0:	b	14e74 <flatcc_builder_create_vtable@@Base+0xf4>
   14ea4:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   14ea8:	andeq	r2, r0, ip, lsr lr
   14eac:	andeq	r3, r0, r4, lsl #11
   14eb0:	andeq	r3, r0, r8, lsl #12

00014eb4 <flatcc_builder_create_cached_vtable@@Base>:
   14eb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14eb8:	strd	r6, [sp, #8]
   14ebc:	mov	r6, r0
   14ec0:	strd	r8, [sp, #16]
   14ec4:	mov	r9, r2
   14ec8:	mov	r8, r3
   14ecc:	strd	sl, [sp, #24]
   14ed0:	str	lr, [sp, #32]
   14ed4:	sub	sp, sp, #28
   14ed8:	str	r1, [sp, #8]
   14edc:	ldr	r1, [r0, #116]	; 0x74
   14ee0:	cmp	r1, #0
   14ee4:	rsbne	r1, r1, #32
   14ee8:	beq	15070 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14eec:	ldr	sl, [r6, #92]	; 0x5c
   14ef0:	lsr	r8, r8, r1
   14ef4:	adds	fp, sl, r8, lsl #2
   14ef8:	str	fp, [sp, #12]
   14efc:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x258>
   14f00:	ldr	r5, [sl, r8, lsl #2]
   14f04:	cmp	r5, #0
   14f08:	beq	15140 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   14f0c:	mov	r3, #0
   14f10:	str	r8, [sp, #16]
   14f14:	mov	r8, fp
   14f18:	mov	fp, r6
   14f1c:	ldr	r7, [r6, #68]	; 0x44
   14f20:	str	r3, [sp, #20]
   14f24:	ldr	r3, [r6, #100]	; 0x64
   14f28:	mov	r6, r3
   14f2c:	add	r4, r6, r5
   14f30:	ldr	r1, [r4, #8]
   14f34:	ldrh	r2, [r7, r1]
   14f38:	add	r1, r7, r1
   14f3c:	cmp	r2, r9
   14f40:	bne	1501c <flatcc_builder_create_cached_vtable@@Base+0x168>
   14f44:	mov	r2, r9
   14f48:	ldr	r0, [sp, #8]
   14f4c:	bl	11f9c <memcmp@plt>
   14f50:	cmp	r0, #0
   14f54:	bne	1501c <flatcc_builder_create_cached_vtable@@Base+0x168>
   14f58:	ldr	r1, [r4, #4]
   14f5c:	ldr	r2, [fp, #152]	; 0x98
   14f60:	cmp	r1, r2
   14f64:	beq	15028 <flatcc_builder_create_cached_vtable@@Base+0x174>
   14f68:	ldr	r5, [r4, #12]
   14f6c:	add	r8, r4, #12
   14f70:	str	r4, [sp, #20]
   14f74:	cmp	r5, #0
   14f78:	bne	14f2c <flatcc_builder_create_cached_vtable@@Base+0x78>
   14f7c:	ldr	r8, [sp, #16]
   14f80:	mov	r6, fp
   14f84:	ldr	r3, [r6, #104]	; 0x68
   14f88:	ldr	r4, [r6, #124]	; 0x7c
   14f8c:	add	r2, r4, #16
   14f90:	cmp	r2, r3
   14f94:	bls	14fbc <flatcc_builder_create_cached_vtable@@Base+0x108>
   14f98:	mov	ip, #6
   14f9c:	mov	r3, #0
   14fa0:	ldr	r0, [r6, #40]	; 0x28
   14fa4:	add	r1, r6, #100	; 0x64
   14fa8:	str	ip, [sp]
   14fac:	ldr	r5, [r6, #48]	; 0x30
   14fb0:	blx	r5
   14fb4:	cmp	r0, #0
   14fb8:	bne	1513c <flatcc_builder_create_cached_vtable@@Base+0x288>
   14fbc:	ldr	r5, [r6, #100]	; 0x64
   14fc0:	adds	r7, r5, r4
   14fc4:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x258>
   14fc8:	ldr	r3, [r6, #124]	; 0x7c
   14fcc:	mov	r2, r9
   14fd0:	ldr	r0, [r6, #152]	; 0x98
   14fd4:	ldr	r1, [sp, #8]
   14fd8:	add	ip, r3, #16
   14fdc:	str	ip, [r6, #124]	; 0x7c
   14fe0:	str	r0, [r7, #4]
   14fe4:	mov	r0, r6
   14fe8:	ldr	ip, [sl, r8, lsl #2]
   14fec:	str	ip, [r7, #12]
   14ff0:	str	r3, [sl, r8, lsl #2]
   14ff4:	bl	14d80 <flatcc_builder_create_vtable@@Base>
   14ff8:	cmp	r0, #0
   14ffc:	str	r0, [r5, r4]
   15000:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x258>
   15004:	ldr	r3, [sp, #20]
   15008:	cmp	r3, #0
   1500c:	beq	15150 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   15010:	ldr	r3, [r3, #8]
   15014:	str	r3, [r7, #8]
   15018:	b	15054 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1501c:	add	r8, r4, #12
   15020:	ldr	r5, [r4, #12]
   15024:	b	14f74 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   15028:	ldr	r3, [sp, #12]
   1502c:	mov	fp, r8
   15030:	ldr	r8, [sp, #16]
   15034:	cmp	r3, fp
   15038:	beq	15050 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   1503c:	ldr	r3, [r4, #12]
   15040:	str	r3, [fp]
   15044:	ldr	r3, [sl, r8, lsl #2]
   15048:	str	r3, [r4, #12]
   1504c:	str	r5, [sl, r8, lsl #2]
   15050:	ldr	r0, [r4]
   15054:	add	sp, sp, #28
   15058:	ldrd	r4, [sp]
   1505c:	ldrd	r6, [sp, #8]
   15060:	ldrd	r8, [sp, #16]
   15064:	ldrd	sl, [sp, #24]
   15068:	add	sp, sp, #32
   1506c:	pop	{pc}		; (ldr pc, [sp], #4)
   15070:	ldr	r4, [r0, #124]	; 0x7c
   15074:	add	r5, r0, #92	; 0x5c
   15078:	cmp	r4, #0
   1507c:	bne	151e4 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15080:	ldr	r3, [r0, #104]	; 0x68
   15084:	cmp	r3, #15
   15088:	bls	15114 <flatcc_builder_create_cached_vtable@@Base+0x260>
   1508c:	ldr	r3, [r6, #100]	; 0x64
   15090:	cmp	r3, #0
   15094:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x258>
   15098:	mov	ip, #16
   1509c:	mov	r2, #5
   150a0:	ldr	r0, [r6, #40]	; 0x28
   150a4:	mov	r1, r5
   150a8:	mov	r3, #1
   150ac:	str	r2, [sp]
   150b0:	mov	r2, #256	; 0x100
   150b4:	str	ip, [r6, #124]	; 0x7c
   150b8:	ldr	r5, [r6, #48]	; 0x30
   150bc:	blx	r5
   150c0:	cmp	r0, #0
   150c4:	bne	1510c <flatcc_builder_create_cached_vtable@@Base+0x258>
   150c8:	mov	r3, #256	; 0x100
   150cc:	ldr	r1, [r6, #96]	; 0x60
   150d0:	b	150d8 <flatcc_builder_create_cached_vtable@@Base+0x224>
   150d4:	mov	r3, r2
   150d8:	lsl	r2, r3, #1
   150dc:	cmp	r2, r1
   150e0:	bls	150d4 <flatcc_builder_create_cached_vtable@@Base+0x220>
   150e4:	lsr	r3, r3, #2
   150e8:	cmp	r3, #1
   150ec:	bls	15148 <flatcc_builder_create_cached_vtable@@Base+0x294>
   150f0:	mov	r2, #1
   150f4:	add	r4, r4, #1
   150f8:	cmp	r3, r2, lsl r4
   150fc:	bhi	150f4 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15100:	rsb	r1, r4, #32
   15104:	str	r4, [r6, #116]	; 0x74
   15108:	b	14eec <flatcc_builder_create_cached_vtable@@Base+0x38>
   1510c:	mov	r0, #0
   15110:	b	15054 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15114:	mov	ip, #6
   15118:	add	r1, r0, #100	; 0x64
   1511c:	ldr	r0, [r0, #40]	; 0x28
   15120:	mov	r3, r4
   15124:	mov	r2, #16
   15128:	str	ip, [sp]
   1512c:	ldr	r7, [r6, #48]	; 0x30
   15130:	blx	r7
   15134:	cmp	r0, #0
   15138:	beq	1508c <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   1513c:	bl	12c48 <flatcc_builder_default_alloc@@Base+0x124>
   15140:	str	r5, [sp, #20]
   15144:	b	14f84 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   15148:	mov	r1, #32
   1514c:	b	15104 <flatcc_builder_create_cached_vtable@@Base+0x250>
   15150:	ldr	r8, [r6, #120]	; 0x78
   15154:	ldr	r3, [r6, #172]	; 0xac
   15158:	add	r2, r9, r8
   1515c:	cmp	r3, #0
   15160:	beq	1516c <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   15164:	cmp	r3, r2
   15168:	bcc	151cc <flatcc_builder_create_cached_vtable@@Base+0x318>
   1516c:	ldr	r3, [r6, #72]	; 0x48
   15170:	cmp	r3, r2
   15174:	bcs	1519c <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   15178:	mov	ip, #2
   1517c:	mov	r3, #0
   15180:	ldr	r0, [r6, #40]	; 0x28
   15184:	add	r1, r6, #68	; 0x44
   15188:	str	ip, [sp]
   1518c:	ldr	sl, [r6, #48]	; 0x30
   15190:	blx	sl
   15194:	cmp	r0, #0
   15198:	bne	1513c <flatcc_builder_create_cached_vtable@@Base+0x288>
   1519c:	ldr	r3, [r6, #68]	; 0x44
   151a0:	adds	r0, r3, r8
   151a4:	beq	151dc <flatcc_builder_create_cached_vtable@@Base+0x328>
   151a8:	ldr	r3, [r6, #120]	; 0x78
   151ac:	mov	r2, r9
   151b0:	ldr	r1, [sp, #8]
   151b4:	add	r9, r3, r9
   151b8:	str	r3, [r7, #8]
   151bc:	str	r9, [r6, #120]	; 0x78
   151c0:	bl	11f90 <memcpy@plt>
   151c4:	ldr	r0, [r5, r4]
   151c8:	b	15054 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   151cc:	mov	r0, r6
   151d0:	bl	131a8 <flatcc_builder_flush_vtable_cache@@Base>
   151d4:	ldr	r0, [r5, r4]
   151d8:	b	15054 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   151dc:	mvn	r0, #0
   151e0:	b	15054 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   151e4:	ldr	r3, [pc, #28]	; 15208 <flatcc_builder_create_cached_vtable@@Base+0x354>
   151e8:	movw	r2, #342	; 0x156
   151ec:	ldr	r1, [pc, #24]	; 1520c <flatcc_builder_create_cached_vtable@@Base+0x358>
   151f0:	ldr	r0, [pc, #24]	; 15210 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   151f4:	add	r3, pc, r3
   151f8:	add	r3, r3, #656	; 0x290
   151fc:	add	r1, pc, r1
   15200:	add	r0, pc, r0
   15204:	bl	12044 <__assert_fail@plt>
   15208:	andeq	r2, r0, ip, lsl #21
   1520c:	ldrdeq	r3, [r0], -r4
   15210:	andeq	r3, r0, ip, ror r4

00015214 <flatcc_builder_create_table@@Base>:
   15214:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15218:	mov	r5, r0
   1521c:	strd	r6, [sp, #8]
   15220:	str	r8, [sp, #16]
   15224:	str	lr, [sp, #20]
   15228:	sub	sp, sp, #88	; 0x58
   1522c:	ldr	r6, [sp, #116]	; 0x74
   15230:	ldr	r7, [pc, #444]	; 153f4 <flatcc_builder_create_table@@Base+0x1e0>
   15234:	ldr	r0, [sp, #120]	; 0x78
   15238:	cmp	r6, #0
   1523c:	add	r7, pc, r7
   15240:	blt	153a8 <flatcc_builder_create_table@@Base+0x194>
   15244:	tst	r0, #1
   15248:	beq	15384 <flatcc_builder_create_table@@Base+0x170>
   1524c:	ldrh	ip, [r5, #128]	; 0x80
   15250:	cmp	r3, #4
   15254:	sub	r0, r0, #1
   15258:	movcc	r3, #4
   1525c:	cmp	ip, r3
   15260:	ldr	ip, [r5, #136]	; 0x88
   15264:	strhcc	r3, [r5, #128]	; 0x80
   15268:	sub	r3, r3, #1
   1526c:	cmp	r6, #0
   15270:	sub	r4, ip, r2
   15274:	mov	r8, r4
   15278:	sub	r4, r4, #4
   1527c:	and	r8, r8, r3
   15280:	sub	r0, r4, r0
   15284:	sub	r0, r0, r8
   15288:	str	r0, [sp, #12]
   1528c:	beq	152c0 <flatcc_builder_create_table@@Base+0xac>
   15290:	ldr	ip, [sp, #112]	; 0x70
   15294:	sub	r4, r8, r4
   15298:	sub	r4, r4, #4
   1529c:	add	r6, ip, r6, lsl #1
   152a0:	ldrh	r3, [ip], #2
   152a4:	ldr	r0, [r1, r3]
   152a8:	sub	lr, r4, r3
   152ac:	cmp	r6, ip
   152b0:	add	r0, r0, lr
   152b4:	str	r0, [r1, r3]
   152b8:	bne	152a0 <flatcc_builder_create_table@@Base+0x8c>
   152bc:	ldr	ip, [r5, #136]	; 0x88
   152c0:	mov	r3, #1
   152c4:	mov	r0, #4
   152c8:	cmp	r2, #0
   152cc:	str	r0, [sp, #16]
   152d0:	str	r3, [sp, #20]
   152d4:	add	r3, sp, #12
   152d8:	str	r3, [sp, #24]
   152dc:	str	r0, [sp, #28]
   152e0:	beq	152fc <flatcc_builder_create_table@@Base+0xe8>
   152e4:	add	r0, r2, r0
   152e8:	mov	r3, #2
   152ec:	str	r0, [sp, #16]
   152f0:	str	r3, [sp, #20]
   152f4:	str	r1, [sp, #32]
   152f8:	str	r2, [sp, #36]	; 0x24
   152fc:	cmp	r8, #0
   15300:	bne	15354 <flatcc_builder_create_table@@Base+0x140>
   15304:	sub	r4, ip, r0
   15308:	cmp	r4, ip
   1530c:	bge	153d0 <flatcc_builder_create_table@@Base+0x1bc>
   15310:	mov	r3, r4
   15314:	add	r1, sp, #24
   15318:	str	r0, [sp]
   1531c:	ldr	r2, [sp, #20]
   15320:	ldr	r0, [r5, #36]	; 0x24
   15324:	ldr	r6, [r5, #44]	; 0x2c
   15328:	blx	r6
   1532c:	cmp	r0, #0
   15330:	bne	153cc <flatcc_builder_create_table@@Base+0x1b8>
   15334:	mov	r0, r4
   15338:	str	r4, [r5, #136]	; 0x88
   1533c:	add	sp, sp, #88	; 0x58
   15340:	ldrd	r4, [sp]
   15344:	ldrd	r6, [sp, #8]
   15348:	ldr	r8, [sp, #16]
   1534c:	add	sp, sp, #20
   15350:	pop	{pc}		; (ldr pc, [sp], #4)
   15354:	ldr	r2, [pc, #156]	; 153f8 <flatcc_builder_create_table@@Base+0x1e4>
   15358:	add	r0, r0, r8
   1535c:	ldr	r3, [sp, #20]
   15360:	str	r0, [sp, #16]
   15364:	ldr	r1, [r7, r2]
   15368:	add	r2, sp, #88	; 0x58
   1536c:	add	r3, r3, #1
   15370:	add	r2, r2, r3, lsl #3
   15374:	str	r3, [sp, #20]
   15378:	str	r1, [r2, #-72]	; 0xffffffb8
   1537c:	str	r8, [r2, #-68]	; 0xffffffbc
   15380:	b	15304 <flatcc_builder_create_table@@Base+0xf0>
   15384:	ldr	r3, [pc, #112]	; 153fc <flatcc_builder_create_table@@Base+0x1e8>
   15388:	movw	r2, #1243	; 0x4db
   1538c:	ldr	r1, [pc, #108]	; 15400 <flatcc_builder_create_table@@Base+0x1ec>
   15390:	ldr	r0, [pc, #108]	; 15404 <flatcc_builder_create_table@@Base+0x1f0>
   15394:	add	r3, pc, r3
   15398:	add	r3, r3, #668	; 0x29c
   1539c:	add	r1, pc, r1
   153a0:	add	r0, pc, r0
   153a4:	bl	12044 <__assert_fail@plt>
   153a8:	ldr	r3, [pc, #88]	; 15408 <flatcc_builder_create_table@@Base+0x1f4>
   153ac:	movw	r2, #1237	; 0x4d5
   153b0:	ldr	r1, [pc, #84]	; 1540c <flatcc_builder_create_table@@Base+0x1f8>
   153b4:	ldr	r0, [pc, #84]	; 15410 <flatcc_builder_create_table@@Base+0x1fc>
   153b8:	add	r3, pc, r3
   153bc:	add	r3, r3, #668	; 0x29c
   153c0:	add	r1, pc, r1
   153c4:	add	r0, pc, r0
   153c8:	bl	12044 <__assert_fail@plt>
   153cc:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   153d0:	ldr	r3, [pc, #60]	; 15414 <flatcc_builder_create_table@@Base+0x200>
   153d4:	movw	r2, #647	; 0x287
   153d8:	ldr	r1, [pc, #56]	; 15418 <flatcc_builder_create_table@@Base+0x204>
   153dc:	ldr	r0, [pc, #56]	; 1541c <flatcc_builder_create_table@@Base+0x208>
   153e0:	add	r3, pc, r3
   153e4:	add	r3, r3, #44	; 0x2c
   153e8:	add	r1, pc, r1
   153ec:	add	r0, pc, r0
   153f0:	bl	12044 <__assert_fail@plt>
   153f4:			; <UNDEFINED> instruction: 0x00013dbc
   153f8:	andeq	r0, r0, ip, asr r0
   153fc:	andeq	r2, r0, ip, ror #17
   15400:	andeq	r3, r0, r4, lsr r0
   15404:	andeq	r3, r0, r0, lsl #6
   15408:	andeq	r2, r0, r8, asr #17
   1540c:	andeq	r3, r0, r0, lsl r0
   15410:	andeq	r3, r0, r8, asr #5
   15414:	andeq	r2, r0, r0, lsr #17
   15418:	andeq	r2, r0, r8, ror #31
   1541c:	andeq	r3, r0, ip, rrx

00015420 <flatcc_builder_check_required_field@@Base>:
   15420:	ldr	r3, [r0, #32]
   15424:	ldrh	r3, [r3, #14]
   15428:	cmp	r3, #3
   1542c:	bne	1545c <flatcc_builder_check_required_field@@Base+0x3c>
   15430:	ldrh	r3, [r0, #8]
   15434:	cmp	r3, r1
   15438:	bls	15454 <flatcc_builder_check_required_field@@Base+0x34>
   1543c:	ldr	r3, [r0, #4]
   15440:	lsl	r1, r1, #1
   15444:	ldrh	r0, [r3, r1]
   15448:	adds	r0, r0, #0
   1544c:	movne	r0, #1
   15450:	bx	lr
   15454:	mov	r0, #0
   15458:	bx	lr
   1545c:	ldr	r3, [pc, #36]	; 15488 <flatcc_builder_check_required_field@@Base+0x68>
   15460:	movw	r2, #1272	; 0x4f8
   15464:	str	r4, [sp, #-8]!
   15468:	ldr	r1, [pc, #28]	; 1548c <flatcc_builder_check_required_field@@Base+0x6c>
   1546c:	str	lr, [sp, #4]
   15470:	ldr	r0, [pc, #24]	; 15490 <flatcc_builder_check_required_field@@Base+0x70>
   15474:	add	r3, pc, r3
   15478:	add	r3, r3, #696	; 0x2b8
   1547c:	add	r1, pc, r1
   15480:	add	r0, pc, r0
   15484:	bl	12044 <__assert_fail@plt>
   15488:	andeq	r2, r0, ip, lsl #16
   1548c:	andeq	r2, r0, r4, asr pc
   15490:	andeq	r3, r0, ip, lsr #4

00015494 <flatcc_builder_check_union_field@@Base>:
   15494:	ldr	r3, [r0, #32]
   15498:	ldrh	r3, [r3, #14]
   1549c:	cmp	r3, #3
   154a0:	bne	15504 <flatcc_builder_check_union_field@@Base+0x70>
   154a4:	cmp	r1, #0
   154a8:	beq	154f0 <flatcc_builder_check_union_field@@Base+0x5c>
   154ac:	ldrh	r3, [r0, #8]
   154b0:	cmp	r3, r1
   154b4:	bls	154f0 <flatcc_builder_check_union_field@@Base+0x5c>
   154b8:	ldr	r3, [r0, #4]
   154bc:	sub	r1, r1, #-2147483647	; 0x80000001
   154c0:	lsl	r1, r1, #1
   154c4:	ldrh	r2, [r3, r1]!
   154c8:	cmp	r2, #0
   154cc:	ldrh	r1, [r3, #2]
   154d0:	beq	154e4 <flatcc_builder_check_union_field@@Base+0x50>
   154d4:	ldr	r3, [r0, #16]
   154d8:	ldrb	r3, [r3, r2]
   154dc:	cmp	r3, #0
   154e0:	bne	154f8 <flatcc_builder_check_union_field@@Base+0x64>
   154e4:	clz	r0, r1
   154e8:	lsr	r0, r0, #5
   154ec:	bx	lr
   154f0:	mov	r0, #0
   154f4:	bx	lr
   154f8:	adds	r0, r1, #0
   154fc:	movne	r0, #1
   15500:	bx	lr
   15504:	ldr	r3, [pc, #36]	; 15530 <flatcc_builder_check_union_field@@Base+0x9c>
   15508:	movw	r2, #1279	; 0x4ff
   1550c:	str	r4, [sp, #-8]!
   15510:	ldr	r1, [pc, #28]	; 15534 <flatcc_builder_check_union_field@@Base+0xa0>
   15514:	str	lr, [sp, #4]
   15518:	ldr	r0, [pc, #24]	; 15538 <flatcc_builder_check_union_field@@Base+0xa4>
   1551c:	add	r3, pc, r3
   15520:	add	r3, r3, #732	; 0x2dc
   15524:	add	r1, pc, r1
   15528:	add	r0, pc, r0
   1552c:	bl	12044 <__assert_fail@plt>
   15530:	andeq	r2, r0, r4, ror #14
   15534:	andeq	r2, r0, ip, lsr #29
   15538:	andeq	r3, r0, r4, lsl #3

0001553c <flatcc_builder_check_required@@Base>:
   1553c:	ldr	r3, [r0, #32]
   15540:	ldrh	r3, [r3, #14]
   15544:	cmp	r3, #3
   15548:	bne	155b0 <flatcc_builder_check_required@@Base+0x74>
   1554c:	ldrh	r3, [r0, #8]
   15550:	cmp	r3, r2
   15554:	blt	155a8 <flatcc_builder_check_required@@Base+0x6c>
   15558:	cmp	r2, #0
   1555c:	ble	155a0 <flatcc_builder_check_required@@Base+0x64>
   15560:	ldrh	r3, [r1]
   15564:	ldr	ip, [r0, #4]
   15568:	lsl	r3, r3, #1
   1556c:	ldrh	r0, [ip, r3]
   15570:	cmp	r0, #0
   15574:	bxeq	lr
   15578:	add	r2, r1, r2, lsl #1
   1557c:	add	r1, r1, #2
   15580:	b	15598 <flatcc_builder_check_required@@Base+0x5c>
   15584:	ldrh	r3, [r1], #2
   15588:	lsl	r3, r3, #1
   1558c:	ldrh	r0, [ip, r3]
   15590:	cmp	r0, #0
   15594:	bxeq	lr
   15598:	cmp	r1, r2
   1559c:	bne	15584 <flatcc_builder_check_required@@Base+0x48>
   155a0:	mov	r0, #1
   155a4:	bx	lr
   155a8:	mov	r0, #0
   155ac:	bx	lr
   155b0:	ldr	r3, [pc, #36]	; 155dc <flatcc_builder_check_required@@Base+0xa0>
   155b4:	movw	r2, #1297	; 0x511
   155b8:	str	r4, [sp, #-8]!
   155bc:	ldr	r1, [pc, #28]	; 155e0 <flatcc_builder_check_required@@Base+0xa4>
   155c0:	str	lr, [sp, #4]
   155c4:	ldr	r0, [pc, #24]	; 155e4 <flatcc_builder_check_required@@Base+0xa8>
   155c8:	add	r3, pc, r3
   155cc:	add	r3, r3, #768	; 0x300
   155d0:	add	r1, pc, r1
   155d4:	add	r0, pc, r0
   155d8:	bl	12044 <__assert_fail@plt>
   155dc:			; <UNDEFINED> instruction: 0x000026b8
   155e0:	andeq	r2, r0, r0, lsl #28
   155e4:	ldrdeq	r3, [r0], -r8

000155e8 <flatcc_builder_end_table@@Base>:
   155e8:	ldr	r3, [r0, #32]
   155ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   155f0:	ldrh	r3, [r3, #14]
   155f4:	strd	r6, [sp, #8]
   155f8:	str	lr, [sp, #16]
   155fc:	sub	sp, sp, #20
   15600:	cmp	r3, #3
   15604:	bne	15788 <flatcc_builder_end_table@@Base+0x1a0>
   15608:	ldrh	r5, [r0, #8]
   1560c:	movw	ip, #31153	; 0x79b1
   15610:	movt	ip, #40503	; 0x9e37
   15614:	mov	r4, r0
   15618:	ldr	r1, [r0, #4]
   1561c:	ldr	r3, [r0, #12]
   15620:	add	r5, r5, #2
   15624:	lsl	r5, r5, #1
   15628:	ldr	lr, [r0, #20]
   1562c:	sub	r6, r1, #4
   15630:	uxth	r5, r5
   15634:	eor	r3, r3, r5
   15638:	mov	r2, r5
   1563c:	strh	r5, [r1, #-4]
   15640:	mul	r3, ip, r3
   15644:	add	lr, lr, #4
   15648:	uxth	lr, lr
   1564c:	eor	r3, r3, lr
   15650:	strh	lr, [r1, #-2]
   15654:	mov	r1, r6
   15658:	mul	r3, ip, r3
   1565c:	str	r3, [r0, #12]
   15660:	bl	14eb4 <flatcc_builder_create_cached_vtable@@Base>
   15664:	subs	r7, r0, #0
   15668:	bne	15688 <flatcc_builder_end_table@@Base+0xa0>
   1566c:	mov	r5, #0
   15670:	mov	r0, r5
   15674:	add	sp, sp, #20
   15678:	ldrd	r4, [sp]
   1567c:	ldrd	r6, [sp, #8]
   15680:	add	sp, sp, #16
   15684:	pop	{pc}		; (ldr pc, [sp], #4)
   15688:	mov	r2, r5
   1568c:	mov	r1, #0
   15690:	mov	r0, r6
   15694:	bl	12014 <memset@plt>
   15698:	ldr	ip, [r4]
   1569c:	mov	r0, r4
   156a0:	ldr	r3, [r4, #32]
   156a4:	ldr	r2, [r4, #76]	; 0x4c
   156a8:	ldr	r1, [r3, #20]
   156ac:	str	r7, [sp, #8]
   156b0:	ldrh	r3, [r4, #130]	; 0x82
   156b4:	add	r2, r2, r1
   156b8:	ldr	r1, [r4, #16]
   156bc:	sub	ip, ip, r2
   156c0:	asr	ip, ip, #1
   156c4:	str	r2, [sp]
   156c8:	ldr	r2, [r4, #20]
   156cc:	str	ip, [sp, #4]
   156d0:	bl	15214 <flatcc_builder_create_table@@Base>
   156d4:	subs	r5, r0, #0
   156d8:	beq	1566c <flatcc_builder_end_table@@Base+0x84>
   156dc:	ldr	r3, [r4, #32]
   156e0:	mov	r1, #0
   156e4:	ldr	r0, [r4, #52]	; 0x34
   156e8:	ldr	r2, [r4, #76]	; 0x4c
   156ec:	ldr	ip, [r3, #16]
   156f0:	ldr	r6, [r3, #20]
   156f4:	ldrh	lr, [r3, #28]
   156f8:	add	r0, r0, ip
   156fc:	ldr	ip, [r3, #24]
   15700:	add	r3, r2, r6
   15704:	ldr	r2, [r4, #20]
   15708:	str	r3, [r4]
   1570c:	str	r0, [r4, #4]
   15710:	strh	lr, [r4, #8]
   15714:	str	ip, [r4, #12]
   15718:	ldr	r0, [r4, #16]
   1571c:	bl	12014 <memset@plt>
   15720:	ldr	r3, [r4, #32]
   15724:	ldr	r0, [r4, #60]	; 0x3c
   15728:	ldr	r2, [r4, #64]	; 0x40
   1572c:	ldr	ip, [r3]
   15730:	ldmib	r3, {r1, lr}
   15734:	add	r0, r0, ip
   15738:	sub	r2, r2, ip
   1573c:	str	r0, [r4, #16]
   15740:	cmp	r2, r1
   15744:	ldrh	r0, [r4, #128]	; 0x80
   15748:	movcs	r2, r1
   1574c:	str	lr, [r4, #20]
   15750:	str	ip, [r4, #28]
   15754:	ldrh	ip, [r4, #130]	; 0x82
   15758:	str	r2, [r4, #24]
   1575c:	ldr	r2, [r4, #156]	; 0x9c
   15760:	str	r1, [r3, #4]
   15764:	cmp	r0, ip
   15768:	sub	r0, r3, #36	; 0x24
   1576c:	strhcc	ip, [r4, #128]	; 0x80
   15770:	ldrh	r1, [r3, #12]
   15774:	sub	r3, r2, #1
   15778:	str	r0, [r4, #32]
   1577c:	strh	r1, [r4, #130]	; 0x82
   15780:	str	r3, [r4, #156]	; 0x9c
   15784:	b	15670 <flatcc_builder_end_table@@Base+0x88>
   15788:	ldr	r3, [pc, #28]	; 157ac <flatcc_builder_end_table@@Base+0x1c4>
   1578c:	movw	r2, #1317	; 0x525
   15790:	ldr	r1, [pc, #24]	; 157b0 <flatcc_builder_end_table@@Base+0x1c8>
   15794:	ldr	r0, [pc, #24]	; 157b4 <flatcc_builder_end_table@@Base+0x1cc>
   15798:	add	r3, pc, r3
   1579c:	add	r3, r3, #800	; 0x320
   157a0:	add	r1, pc, r1
   157a4:	add	r0, pc, r0
   157a8:	bl	12044 <__assert_fail@plt>
   157ac:	andeq	r2, r0, r8, ror #9
   157b0:	andeq	r2, r0, r0, lsr ip
   157b4:	andeq	r2, r0, r8, lsl #30

000157b8 <flatcc_builder_create_vector@@Base>:
   157b8:	strd	r4, [sp, #-16]!
   157bc:	mov	r4, r0
   157c0:	str	r6, [sp, #8]
   157c4:	str	lr, [sp, #12]
   157c8:	sub	sp, sp, #88	; 0x58
   157cc:	ldr	ip, [sp, #108]	; 0x6c
   157d0:	ldr	r5, [pc, #328]	; 15920 <flatcc_builder_create_vector@@Base+0x168>
   157d4:	ldrh	r0, [sp, #104]	; 0x68
   157d8:	cmp	r2, ip
   157dc:	add	r5, pc, r5
   157e0:	bhi	158d4 <flatcc_builder_create_vector@@Base+0x11c>
   157e4:	ldrh	ip, [r4, #128]	; 0x80
   157e8:	cmp	r0, #4
   157ec:	mul	r3, r3, r2
   157f0:	movcc	r0, #4
   157f4:	str	r2, [sp, #12]
   157f8:	mov	r2, #1
   157fc:	ldr	r6, [r4, #136]	; 0x88
   15800:	mov	lr, #4
   15804:	str	r2, [sp, #20]
   15808:	cmp	ip, r0
   1580c:	add	ip, sp, #12
   15810:	str	lr, [sp, #16]
   15814:	strhcc	r0, [r4, #128]	; 0x80
   15818:	sub	r2, r6, r3
   1581c:	sub	r0, r0, #1
   15820:	cmp	r3, #0
   15824:	and	r0, r0, r2
   15828:	str	ip, [sp, #24]
   1582c:	moveq	r2, lr
   15830:	str	lr, [sp, #28]
   15834:	beq	15850 <flatcc_builder_create_vector@@Base+0x98>
   15838:	add	r2, r3, lr
   1583c:	str	r1, [sp, #32]
   15840:	mov	r1, #2
   15844:	str	r2, [sp, #16]
   15848:	str	r1, [sp, #20]
   1584c:	str	r3, [sp, #36]	; 0x24
   15850:	cmp	r0, #0
   15854:	bne	158a4 <flatcc_builder_create_vector@@Base+0xec>
   15858:	sub	r5, r6, r2
   1585c:	cmp	r6, r5
   15860:	ble	158fc <flatcc_builder_create_vector@@Base+0x144>
   15864:	mov	r3, r5
   15868:	add	r1, sp, #24
   1586c:	str	r2, [sp]
   15870:	ldr	r2, [sp, #20]
   15874:	ldr	r0, [r4, #36]	; 0x24
   15878:	ldr	r6, [r4, #44]	; 0x2c
   1587c:	blx	r6
   15880:	cmp	r0, #0
   15884:	bne	158f8 <flatcc_builder_create_vector@@Base+0x140>
   15888:	mov	r0, r5
   1588c:	str	r5, [r4, #136]	; 0x88
   15890:	add	sp, sp, #88	; 0x58
   15894:	ldrd	r4, [sp]
   15898:	ldr	r6, [sp, #8]
   1589c:	add	sp, sp, #12
   158a0:	pop	{pc}		; (ldr pc, [sp], #4)
   158a4:	ldr	r1, [pc, #120]	; 15924 <flatcc_builder_create_vector@@Base+0x16c>
   158a8:	add	r2, r2, r0
   158ac:	ldr	r3, [sp, #20]
   158b0:	str	r2, [sp, #16]
   158b4:	ldr	ip, [r5, r1]
   158b8:	add	r1, sp, #88	; 0x58
   158bc:	add	r3, r3, #1
   158c0:	add	r1, r1, r3, lsl #3
   158c4:	str	r3, [sp, #20]
   158c8:	str	ip, [r1, #-72]	; 0xffffffb8
   158cc:	str	r0, [r1, #-68]	; 0xffffffbc
   158d0:	b	15858 <flatcc_builder_create_vector@@Base+0xa0>
   158d4:	ldr	r3, [pc, #76]	; 15928 <flatcc_builder_create_vector@@Base+0x170>
   158d8:	movw	r2, #1365	; 0x555
   158dc:	ldr	r1, [pc, #72]	; 1592c <flatcc_builder_create_vector@@Base+0x174>
   158e0:	ldr	r0, [pc, #72]	; 15930 <flatcc_builder_create_vector@@Base+0x178>
   158e4:	add	r3, pc, r3
   158e8:	add	r3, r3, #828	; 0x33c
   158ec:	add	r1, pc, r1
   158f0:	add	r0, pc, r0
   158f4:	bl	12044 <__assert_fail@plt>
   158f8:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   158fc:	ldr	r3, [pc, #48]	; 15934 <flatcc_builder_create_vector@@Base+0x17c>
   15900:	movw	r2, #647	; 0x287
   15904:	ldr	r1, [pc, #44]	; 15938 <flatcc_builder_create_vector@@Base+0x180>
   15908:	ldr	r0, [pc, #44]	; 1593c <flatcc_builder_create_vector@@Base+0x184>
   1590c:	add	r3, pc, r3
   15910:	add	r3, r3, #44	; 0x2c
   15914:	add	r1, pc, r1
   15918:	add	r0, pc, r0
   1591c:	bl	12044 <__assert_fail@plt>
   15920:	andeq	r3, r1, ip, lsl r8
   15924:	andeq	r0, r0, ip, asr r0
   15928:	muleq	r0, ip, r3
   1592c:	andeq	r2, r0, r4, ror #21
   15930:	andeq	r2, r0, r8, ror #27
   15934:	andeq	r2, r0, r4, ror r3
   15938:			; <UNDEFINED> instruction: 0x00002abc
   1593c:	andeq	r2, r0, r0, asr #22

00015940 <flatcc_builder_end_vector@@Base>:
   15940:	ldr	r1, [r0, #32]
   15944:	strd	r4, [sp, #-12]!
   15948:	ldrh	r3, [r1, #14]
   1594c:	str	lr, [sp, #8]
   15950:	sub	sp, sp, #12
   15954:	cmp	r3, #4
   15958:	bne	15a10 <flatcc_builder_end_vector@@Base+0xd0>
   1595c:	ldrh	ip, [r0, #130]	; 0x82
   15960:	mov	r4, r0
   15964:	ldr	r3, [r1, #16]
   15968:	ldr	r2, [r1, #20]
   1596c:	ldr	r1, [r1, #24]
   15970:	str	r1, [sp, #4]
   15974:	ldr	r1, [r0, #16]
   15978:	str	ip, [sp]
   1597c:	bl	157b8 <flatcc_builder_create_vector@@Base>
   15980:	subs	r5, r0, #0
   15984:	beq	159fc <flatcc_builder_end_vector@@Base+0xbc>
   15988:	mov	r1, #0
   1598c:	ldr	r0, [r4, #16]
   15990:	ldr	r2, [r4, #20]
   15994:	bl	12014 <memset@plt>
   15998:	ldr	r3, [r4, #32]
   1599c:	ldr	r0, [r4, #60]	; 0x3c
   159a0:	ldr	r2, [r4, #64]	; 0x40
   159a4:	ldr	ip, [r3]
   159a8:	ldmib	r3, {r1, lr}
   159ac:	add	r0, r0, ip
   159b0:	sub	r2, r2, ip
   159b4:	str	r0, [r4, #16]
   159b8:	cmp	r2, r1
   159bc:	ldrh	r0, [r4, #128]	; 0x80
   159c0:	movcs	r2, r1
   159c4:	str	lr, [r4, #20]
   159c8:	str	ip, [r4, #28]
   159cc:	ldrh	ip, [r4, #130]	; 0x82
   159d0:	str	r2, [r4, #24]
   159d4:	ldr	r2, [r4, #156]	; 0x9c
   159d8:	str	r1, [r3, #4]
   159dc:	cmp	r0, ip
   159e0:	sub	r0, r3, #36	; 0x24
   159e4:	strhcc	ip, [r4, #128]	; 0x80
   159e8:	ldrh	r1, [r3, #12]
   159ec:	sub	r3, r2, #1
   159f0:	str	r0, [r4, #32]
   159f4:	strh	r1, [r4, #130]	; 0x82
   159f8:	str	r3, [r4, #156]	; 0x9c
   159fc:	mov	r0, r5
   15a00:	add	sp, sp, #12
   15a04:	ldrd	r4, [sp]
   15a08:	add	sp, sp, #8
   15a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a10:	ldr	r3, [pc, #28]	; 15a34 <flatcc_builder_end_vector@@Base+0xf4>
   15a14:	movw	r2, #1400	; 0x578
   15a18:	ldr	r1, [pc, #24]	; 15a38 <flatcc_builder_end_vector@@Base+0xf8>
   15a1c:	ldr	r0, [pc, #24]	; 15a3c <flatcc_builder_end_vector@@Base+0xfc>
   15a20:	add	r3, pc, r3
   15a24:	add	r3, r3, #860	; 0x35c
   15a28:	add	r1, pc, r1
   15a2c:	add	r0, pc, r0
   15a30:	bl	12044 <__assert_fail@plt>
   15a34:	andeq	r2, r0, r0, ror #4
   15a38:	andeq	r2, r0, r8, lsr #19
   15a3c:	strdeq	r2, [r0], -r4

00015a40 <flatcc_builder_vector_count@@Base>:
   15a40:	ldr	r3, [r0, #32]
   15a44:	ldr	r0, [r3, #20]
   15a48:	bx	lr

00015a4c <flatcc_builder_vector_edit@@Base>:
   15a4c:	ldr	r0, [r0, #16]
   15a50:	bx	lr

00015a54 <flatcc_builder_create_offset_vector_direct@@Base>:
   15a54:	cmn	r2, #-1073741823	; 0xc0000001
   15a58:	bhi	15a64 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   15a5c:	mov	r3, #0
   15a60:	b	12f7c <flatcc_builder_default_alloc@@Base+0x458>
   15a64:	mov	r0, #0
   15a68:	bx	lr

00015a6c <flatcc_builder_end_offset_vector@@Base>:
   15a6c:	ldr	r3, [r0, #32]
   15a70:	strd	r4, [sp, #-16]!
   15a74:	ldrh	r2, [r3, #14]
   15a78:	str	r6, [sp, #8]
   15a7c:	str	lr, [sp, #12]
   15a80:	cmp	r2, #5
   15a84:	bne	15b28 <flatcc_builder_end_offset_vector@@Base+0xbc>
   15a88:	ldr	r1, [r0, #16]
   15a8c:	mov	r4, r0
   15a90:	ldr	r2, [r3, #20]
   15a94:	bl	15a54 <flatcc_builder_create_offset_vector_direct@@Base>
   15a98:	subs	r5, r0, #0
   15a9c:	beq	15b14 <flatcc_builder_end_offset_vector@@Base+0xa8>
   15aa0:	mov	r1, #0
   15aa4:	ldr	r0, [r4, #16]
   15aa8:	ldr	r2, [r4, #20]
   15aac:	bl	12014 <memset@plt>
   15ab0:	ldr	r3, [r4, #32]
   15ab4:	ldr	r0, [r4, #60]	; 0x3c
   15ab8:	ldr	r2, [r4, #64]	; 0x40
   15abc:	ldr	ip, [r3]
   15ac0:	ldmib	r3, {r1, lr}
   15ac4:	add	r0, r0, ip
   15ac8:	sub	r2, r2, ip
   15acc:	str	r0, [r4, #16]
   15ad0:	cmp	r2, r1
   15ad4:	ldrh	r0, [r4, #128]	; 0x80
   15ad8:	movcs	r2, r1
   15adc:	str	lr, [r4, #20]
   15ae0:	str	ip, [r4, #28]
   15ae4:	ldrh	ip, [r4, #130]	; 0x82
   15ae8:	str	r2, [r4, #24]
   15aec:	ldr	r2, [r4, #156]	; 0x9c
   15af0:	str	r1, [r3, #4]
   15af4:	cmp	r0, ip
   15af8:	sub	r0, r3, #36	; 0x24
   15afc:	strhcc	ip, [r4, #128]	; 0x80
   15b00:	ldrh	r1, [r3, #12]
   15b04:	sub	r3, r2, #1
   15b08:	str	r0, [r4, #32]
   15b0c:	strh	r1, [r4, #130]	; 0x82
   15b10:	str	r3, [r4, #156]	; 0x9c
   15b14:	mov	r0, r5
   15b18:	ldrd	r4, [sp]
   15b1c:	ldr	r6, [sp, #8]
   15b20:	add	sp, sp, #12
   15b24:	pop	{pc}		; (ldr pc, [sp], #4)
   15b28:	ldr	r3, [pc, #28]	; 15b4c <flatcc_builder_end_offset_vector@@Base+0xe0>
   15b2c:	movw	r2, #1480	; 0x5c8
   15b30:	ldr	r1, [pc, #24]	; 15b50 <flatcc_builder_end_offset_vector@@Base+0xe4>
   15b34:	ldr	r0, [pc, #24]	; 15b54 <flatcc_builder_end_offset_vector@@Base+0xe8>
   15b38:	add	r3, pc, r3
   15b3c:	add	r3, r3, #888	; 0x378
   15b40:	add	r1, pc, r1
   15b44:	add	r0, pc, r0
   15b48:	bl	12044 <__assert_fail@plt>
   15b4c:	andeq	r2, r0, r8, asr #2
   15b50:	muleq	r0, r0, r8
   15b54:	andeq	r2, r0, r8, asr #20

00015b58 <flatcc_builder_create_offset_vector@@Base>:
   15b58:	strd	r4, [sp, #-16]!
   15b5c:	mov	r5, r2
   15b60:	mov	r4, r0
   15b64:	str	r6, [sp, #8]
   15b68:	mov	r6, r1
   15b6c:	str	lr, [sp, #12]
   15b70:	bl	149e4 <flatcc_builder_start_offset_vector@@Base>
   15b74:	cmp	r0, #0
   15b78:	beq	15b90 <flatcc_builder_create_offset_vector@@Base+0x38>
   15b7c:	ldrd	r4, [sp]
   15b80:	mov	r0, #0
   15b84:	ldr	r6, [sp, #8]
   15b88:	add	sp, sp, #12
   15b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b90:	mov	r1, r5
   15b94:	mov	r0, r4
   15b98:	bl	142a8 <flatcc_builder_extend_offset_vector@@Base>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15b7c <flatcc_builder_create_offset_vector@@Base+0x24>
   15ba4:	lsl	r2, r5, #2
   15ba8:	mov	r1, r6
   15bac:	bl	11f90 <memcpy@plt>
   15bb0:	mov	r0, r4
   15bb4:	ldrd	r4, [sp]
   15bb8:	ldr	r6, [sp, #8]
   15bbc:	ldr	lr, [sp, #12]
   15bc0:	add	sp, sp, #16
   15bc4:	b	15a6c <flatcc_builder_end_offset_vector@@Base>

00015bc8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15bc8:	ldr	r2, [r0, #32]
   15bcc:	strd	r4, [sp, #-16]!
   15bd0:	ldrh	ip, [r2, #14]
   15bd4:	str	r6, [sp, #8]
   15bd8:	str	lr, [sp, #12]
   15bdc:	cmp	ip, #5
   15be0:	bne	15c98 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   15be4:	ldr	r2, [r2, #20]
   15be8:	cmn	r2, #-1073741823	; 0xc0000001
   15bec:	bhi	15c08 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   15bf0:	mov	r3, r1
   15bf4:	ldr	r1, [r0, #16]
   15bf8:	mov	r4, r0
   15bfc:	bl	12f7c <flatcc_builder_default_alloc@@Base+0x458>
   15c00:	subs	r5, r0, #0
   15c04:	bne	15c20 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15c08:	mov	r5, #0
   15c0c:	mov	r0, r5
   15c10:	ldrd	r4, [sp]
   15c14:	ldr	r6, [sp, #8]
   15c18:	add	sp, sp, #12
   15c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c20:	mov	r1, #0
   15c24:	ldr	r0, [r4, #16]
   15c28:	ldr	r2, [r4, #20]
   15c2c:	bl	12014 <memset@plt>
   15c30:	ldr	r3, [r4, #32]
   15c34:	ldr	r0, [r4, #60]	; 0x3c
   15c38:	ldr	r2, [r4, #64]	; 0x40
   15c3c:	ldr	ip, [r3]
   15c40:	ldmib	r3, {r1, lr}
   15c44:	add	r0, r0, ip
   15c48:	sub	r2, r2, ip
   15c4c:	str	r0, [r4, #16]
   15c50:	cmp	r2, r1
   15c54:	ldrh	r0, [r4, #128]	; 0x80
   15c58:	movcs	r2, r1
   15c5c:	str	lr, [r4, #20]
   15c60:	str	ip, [r4, #28]
   15c64:	ldrh	ip, [r4, #130]	; 0x82
   15c68:	str	r2, [r4, #24]
   15c6c:	ldr	r2, [r4, #156]	; 0x9c
   15c70:	str	r1, [r3, #4]
   15c74:	cmp	r0, ip
   15c78:	sub	r0, r3, #36	; 0x24
   15c7c:	strhcc	ip, [r4, #128]	; 0x80
   15c80:	ldrh	r1, [r3, #12]
   15c84:	sub	r3, r2, #1
   15c88:	str	r0, [r4, #32]
   15c8c:	strh	r1, [r4, #130]	; 0x82
   15c90:	str	r3, [r4, #156]	; 0x9c
   15c94:	b	15c0c <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   15c98:	ldr	r3, [pc, #28]	; 15cbc <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   15c9c:	movw	r2, #1493	; 0x5d5
   15ca0:	ldr	r1, [pc, #24]	; 15cc0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   15ca4:	ldr	r0, [pc, #24]	; 15cc4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   15ca8:	add	r3, pc, r3
   15cac:	add	r3, r3, #924	; 0x39c
   15cb0:	add	r1, pc, r1
   15cb4:	add	r0, pc, r0
   15cb8:	bl	12044 <__assert_fail@plt>
   15cbc:	ldrdeq	r1, [r0], -r8
   15cc0:	andeq	r2, r0, r0, lsr #14
   15cc4:	ldrdeq	r2, [r0], -r8

00015cc8 <flatcc_builder_offset_vector_edit@@Base>:
   15cc8:	ldr	r0, [r0, #16]
   15ccc:	bx	lr

00015cd0 <flatcc_builder_offset_vector_count@@Base>:
   15cd0:	ldr	r3, [r0, #32]
   15cd4:	ldr	r0, [r3, #20]
   15cd8:	bx	lr

00015cdc <flatcc_builder_create_union_vector_direct@@Base>:
   15cdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ce0:	mov	r4, r0
   15ce4:	strd	r6, [sp, #8]
   15ce8:	str	r8, [sp, #16]
   15cec:	str	lr, [sp, #20]
   15cf0:	sub	sp, sp, #8
   15cf4:	ldr	r5, [sp, #32]
   15cf8:	cmn	r5, #-1073741823	; 0xc0000001
   15cfc:	bhi	15d60 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   15d00:	mov	r6, r1
   15d04:	mov	r7, r2
   15d08:	mov	r1, r3
   15d0c:	mov	r0, r6
   15d10:	mov	r3, r2
   15d14:	mov	r2, r5
   15d18:	bl	12f7c <flatcc_builder_default_alloc@@Base+0x458>
   15d1c:	subs	r8, r0, #0
   15d20:	beq	15d60 <flatcc_builder_create_union_vector_direct@@Base+0x84>
   15d24:	mvn	ip, #0
   15d28:	mov	r3, #1
   15d2c:	mov	r2, r5
   15d30:	mov	r1, r7
   15d34:	mov	r0, r6
   15d38:	stm	sp, {r3, ip}
   15d3c:	bl	157b8 <flatcc_builder_create_vector@@Base>
   15d40:	stm	r4, {r0, r8}
   15d44:	mov	r0, r4
   15d48:	add	sp, sp, #8
   15d4c:	ldrd	r4, [sp]
   15d50:	ldrd	r6, [sp, #8]
   15d54:	ldr	r8, [sp, #16]
   15d58:	add	sp, sp, #20
   15d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d60:	mov	r3, #0
   15d64:	str	r3, [r4]
   15d68:	str	r3, [r4, #4]
   15d6c:	b	15d44 <flatcc_builder_create_union_vector_direct@@Base+0x68>

00015d70 <flatcc_builder_create_union_vector@@Base>:
   15d70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d74:	mov	r5, r1
   15d78:	mov	r4, r2
   15d7c:	strd	r6, [sp, #8]
   15d80:	mov	r6, r0
   15d84:	mov	r0, r1
   15d88:	str	r8, [sp, #16]
   15d8c:	mov	r7, r3
   15d90:	str	lr, [sp, #20]
   15d94:	sub	sp, sp, #16
   15d98:	bl	149e4 <flatcc_builder_start_offset_vector@@Base>
   15d9c:	cmp	r0, #0
   15da0:	beq	15dcc <flatcc_builder_create_union_vector@@Base+0x5c>
   15da4:	mov	r3, #0
   15da8:	str	r3, [r6]
   15dac:	str	r3, [r6, #4]
   15db0:	mov	r0, r6
   15db4:	add	sp, sp, #16
   15db8:	ldrd	r4, [sp]
   15dbc:	ldrd	r6, [sp, #8]
   15dc0:	ldr	r8, [sp, #16]
   15dc4:	add	sp, sp, #20
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	mov	r1, r7
   15dd0:	mov	r0, r5
   15dd4:	bl	142a8 <flatcc_builder_extend_offset_vector@@Base>
   15dd8:	cmp	r0, #0
   15ddc:	beq	15da4 <flatcc_builder_create_union_vector@@Base+0x34>
   15de0:	ldr	r8, [r5, #20]
   15de4:	ldr	r3, [r5, #24]
   15de8:	add	r1, r7, r8
   15dec:	cmp	r1, r3
   15df0:	str	r1, [r5, #20]
   15df4:	bcs	15ee0 <flatcc_builder_create_union_vector@@Base+0x170>
   15df8:	ldr	r2, [r5, #16]
   15dfc:	adds	r8, r2, r8
   15e00:	beq	15da4 <flatcc_builder_create_union_vector@@Base+0x34>
   15e04:	mov	r0, r5
   15e08:	bl	15cc8 <flatcc_builder_offset_vector_edit@@Base>
   15e0c:	cmp	r7, #0
   15e10:	mov	r3, r0
   15e14:	beq	15e44 <flatcc_builder_create_union_vector@@Base+0xd4>
   15e18:	add	r2, r4, r7, lsl #3
   15e1c:	mov	r1, r4
   15e20:	sub	lr, r8, #1
   15e24:	sub	ip, r0, #4
   15e28:	ldrb	r4, [r1]
   15e2c:	add	r1, r1, #8
   15e30:	strb	r4, [lr, #1]!
   15e34:	ldr	r4, [r1, #-4]
   15e38:	cmp	r1, r2
   15e3c:	str	r4, [ip, #4]!
   15e40:	bne	15e28 <flatcc_builder_create_union_vector@@Base+0xb8>
   15e44:	mov	r2, r8
   15e48:	mov	r1, r5
   15e4c:	str	r7, [sp]
   15e50:	add	r0, sp, #8
   15e54:	bl	15cdc <flatcc_builder_create_union_vector_direct@@Base>
   15e58:	mov	r1, #0
   15e5c:	ldr	r0, [r5, #16]
   15e60:	ldr	r2, [r5, #20]
   15e64:	ldr	r7, [sp, #8]
   15e68:	ldr	r4, [sp, #12]
   15e6c:	bl	12014 <memset@plt>
   15e70:	ldr	r3, [r5, #32]
   15e74:	str	r7, [r6]
   15e78:	ldr	r0, [r5, #60]	; 0x3c
   15e7c:	str	r4, [r6, #4]
   15e80:	ldr	r2, [r5, #64]	; 0x40
   15e84:	ldr	ip, [r3]
   15e88:	ldmib	r3, {r1, lr}
   15e8c:	add	r0, r0, ip
   15e90:	sub	r2, r2, ip
   15e94:	str	r0, [r5, #16]
   15e98:	cmp	r2, r1
   15e9c:	ldrh	r0, [r5, #128]	; 0x80
   15ea0:	movcs	r2, r1
   15ea4:	str	lr, [r5, #20]
   15ea8:	str	ip, [r5, #28]
   15eac:	ldrh	ip, [r5, #130]	; 0x82
   15eb0:	str	r2, [r5, #24]
   15eb4:	ldr	r2, [r5, #156]	; 0x9c
   15eb8:	str	r1, [r3, #4]
   15ebc:	cmp	r0, ip
   15ec0:	sub	r0, r3, #36	; 0x24
   15ec4:	strhcc	ip, [r5, #128]	; 0x80
   15ec8:	ldrh	r1, [r3, #12]
   15ecc:	sub	r3, r2, #1
   15ed0:	str	r0, [r5, #32]
   15ed4:	strh	r1, [r5, #130]	; 0x82
   15ed8:	str	r3, [r5, #156]	; 0x9c
   15edc:	b	15db0 <flatcc_builder_create_union_vector@@Base+0x40>
   15ee0:	add	r1, r1, #1
   15ee4:	mvn	r2, #3
   15ee8:	mov	r0, r5
   15eec:	bl	12a9c <_start@@Base+0x3e8>
   15ef0:	cmp	r0, #0
   15ef4:	beq	15df8 <flatcc_builder_create_union_vector@@Base+0x88>
   15ef8:	b	15da4 <flatcc_builder_create_union_vector@@Base+0x34>

00015efc <flatcc_builder_start_union_vector@@Base>:
   15efc:	mov	r1, #4
   15f00:	strd	r4, [sp, #-16]!
   15f04:	mov	r4, r0
   15f08:	str	r6, [sp, #8]
   15f0c:	str	lr, [sp, #12]
   15f10:	bl	12e58 <flatcc_builder_default_alloc@@Base+0x334>
   15f14:	cmp	r0, #0
   15f18:	bne	15f70 <flatcc_builder_start_union_vector@@Base+0x74>
   15f1c:	ldr	ip, [r4, #28]
   15f20:	mov	lr, #8
   15f24:	mov	r5, #7
   15f28:	ldr	r3, [r4, #32]
   15f2c:	ldr	r2, [r4, #64]	; 0x40
   15f30:	ldr	r1, [r4, #60]	; 0x3c
   15f34:	strh	r5, [r3, #14]
   15f38:	str	lr, [r3, #16]
   15f3c:	sub	r2, r2, ip
   15f40:	str	r0, [r3, #20]
   15f44:	cmn	r2, #4
   15f48:	mvnhi	r2, #3
   15f4c:	add	r1, r1, ip
   15f50:	str	r1, [r4, #16]
   15f54:	str	r2, [r4, #24]
   15f58:	mvn	r2, #3
   15f5c:	str	r2, [r3, #4]
   15f60:	ldrd	r4, [sp]
   15f64:	ldr	r6, [sp, #8]
   15f68:	add	sp, sp, #12
   15f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f70:	mvn	r0, #0
   15f74:	b	15f60 <flatcc_builder_start_union_vector@@Base+0x64>

00015f78 <flatcc_builder_union_vector_edit@@Base>:
   15f78:	ldr	r0, [r0, #16]
   15f7c:	bx	lr

00015f80 <flatcc_builder_union_vector_count@@Base>:
   15f80:	ldr	r3, [r0, #32]
   15f84:	ldr	r0, [r3, #20]
   15f88:	bx	lr

00015f8c <flatcc_builder_end_union_vector@@Base>:
   15f8c:	ldr	r3, [r1, #32]
   15f90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f94:	ldrh	r3, [r3, #14]
   15f98:	strd	r6, [sp, #8]
   15f9c:	str	r8, [sp, #16]
   15fa0:	str	lr, [sp, #20]
   15fa4:	sub	sp, sp, #16
   15fa8:	cmp	r3, #7
   15fac:	bne	1610c <flatcc_builder_end_union_vector@@Base+0x180>
   15fb0:	mov	r4, r1
   15fb4:	mov	r6, r0
   15fb8:	mov	r0, r1
   15fbc:	bl	15f80 <flatcc_builder_union_vector_count@@Base>
   15fc0:	ldr	r8, [r4, #20]
   15fc4:	lsl	r7, r0, #2
   15fc8:	mov	r5, r0
   15fcc:	ldr	r3, [r4, #24]
   15fd0:	add	r1, r7, r0
   15fd4:	add	r1, r1, r8
   15fd8:	cmp	r1, r3
   15fdc:	str	r1, [r4, #20]
   15fe0:	bcs	160e4 <flatcc_builder_end_union_vector@@Base+0x158>
   15fe4:	ldr	r3, [r4, #16]
   15fe8:	adds	r8, r3, r8
   15fec:	beq	160fc <flatcc_builder_end_union_vector@@Base+0x170>
   15ff0:	mov	r0, r4
   15ff4:	add	r7, r8, r7
   15ff8:	bl	15f78 <flatcc_builder_union_vector_edit@@Base>
   15ffc:	cmp	r5, #0
   16000:	beq	1602c <flatcc_builder_end_union_vector@@Base+0xa0>
   16004:	add	r3, r0, r5, lsl #3
   16008:	sub	ip, r7, #1
   1600c:	sub	r1, r8, #4
   16010:	ldrb	lr, [r0]
   16014:	add	r0, r0, #8
   16018:	strb	lr, [ip, #1]!
   1601c:	ldr	lr, [r0, #-4]
   16020:	cmp	r0, r3
   16024:	str	lr, [r1, #4]!
   16028:	bne	16010 <flatcc_builder_end_union_vector@@Base+0x84>
   1602c:	mov	r3, r8
   16030:	mov	r2, r7
   16034:	str	r5, [sp]
   16038:	mov	r1, r4
   1603c:	add	r0, sp, #8
   16040:	bl	15cdc <flatcc_builder_create_union_vector_direct@@Base>
   16044:	mov	r1, #0
   16048:	ldr	r0, [r4, #16]
   1604c:	ldr	r2, [r4, #20]
   16050:	ldr	r7, [sp, #8]
   16054:	ldr	r5, [sp, #12]
   16058:	bl	12014 <memset@plt>
   1605c:	ldr	r3, [r4, #32]
   16060:	str	r7, [r6]
   16064:	ldr	r0, [r4, #60]	; 0x3c
   16068:	str	r5, [r6, #4]
   1606c:	ldr	r2, [r4, #64]	; 0x40
   16070:	ldr	ip, [r3]
   16074:	ldmib	r3, {r1, lr}
   16078:	add	r0, r0, ip
   1607c:	sub	r2, r2, ip
   16080:	str	r0, [r4, #16]
   16084:	cmp	r2, r1
   16088:	ldrh	r0, [r4, #128]	; 0x80
   1608c:	movcs	r2, r1
   16090:	str	lr, [r4, #20]
   16094:	str	ip, [r4, #28]
   16098:	ldrh	ip, [r4, #130]	; 0x82
   1609c:	str	r2, [r4, #24]
   160a0:	ldr	r2, [r4, #156]	; 0x9c
   160a4:	str	r1, [r3, #4]
   160a8:	cmp	r0, ip
   160ac:	sub	r0, r3, #36	; 0x24
   160b0:	strhcc	ip, [r4, #128]	; 0x80
   160b4:	ldrh	r1, [r3, #12]
   160b8:	sub	r3, r2, #1
   160bc:	str	r0, [r4, #32]
   160c0:	strh	r1, [r4, #130]	; 0x82
   160c4:	str	r3, [r4, #156]	; 0x9c
   160c8:	mov	r0, r6
   160cc:	add	sp, sp, #16
   160d0:	ldrd	r4, [sp]
   160d4:	ldrd	r6, [sp, #8]
   160d8:	ldr	r8, [sp, #16]
   160dc:	add	sp, sp, #20
   160e0:	pop	{pc}		; (ldr pc, [sp], #4)
   160e4:	add	r1, r1, #1
   160e8:	mvn	r2, #3
   160ec:	mov	r0, r4
   160f0:	bl	12a9c <_start@@Base+0x3e8>
   160f4:	cmp	r0, #0
   160f8:	beq	15fe4 <flatcc_builder_end_union_vector@@Base+0x58>
   160fc:	mov	r3, #0
   16100:	str	r3, [r6]
   16104:	str	r3, [r6, #4]
   16108:	b	160c8 <flatcc_builder_end_union_vector@@Base+0x13c>
   1610c:	ldr	r3, [pc, #28]	; 16130 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16110:	movw	r2, #1617	; 0x651
   16114:	ldr	r1, [pc, #24]	; 16134 <flatcc_builder_end_union_vector@@Base+0x1a8>
   16118:	ldr	r0, [pc, #24]	; 16138 <flatcc_builder_end_union_vector@@Base+0x1ac>
   1611c:	add	r3, pc, r3
   16120:	add	r3, r3, #968	; 0x3c8
   16124:	add	r1, pc, r1
   16128:	add	r0, pc, r0
   1612c:	bl	12044 <__assert_fail@plt>
   16130:	andeq	r1, r0, r4, ror #22
   16134:	andeq	r2, r0, ip, lsr #5
   16138:	andeq	r2, r0, r4, asr #11

0001613c <flatcc_builder_extend_union_vector@@Base>:
   1613c:	ldr	ip, [r0, #32]
   16140:	strd	r4, [sp, #-16]!
   16144:	ldr	r3, [ip, #20]
   16148:	str	r6, [sp, #8]
   1614c:	str	lr, [sp, #12]
   16150:	adds	r2, r1, r3
   16154:	movcs	r3, #1
   16158:	movcc	r3, #0
   1615c:	cmn	r2, #-536870911	; 0xe0000001
   16160:	movls	r4, #0
   16164:	movhi	r4, #1
   16168:	orrs	r4, r3, r4
   1616c:	bne	161c4 <flatcc_builder_extend_union_vector@@Base+0x88>
   16170:	ldr	r6, [r0, #20]
   16174:	mov	r5, r0
   16178:	ldr	r3, [r0, #24]
   1617c:	str	r2, [ip, #20]
   16180:	add	r1, r6, r1, lsl #3
   16184:	cmp	r1, r3
   16188:	str	r1, [r0, #20]
   1618c:	bcs	161a8 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16190:	ldr	r0, [r5, #16]
   16194:	add	r0, r0, r6
   16198:	ldrd	r4, [sp]
   1619c:	ldr	r6, [sp, #8]
   161a0:	add	sp, sp, #12
   161a4:	pop	{pc}		; (ldr pc, [sp], #4)
   161a8:	add	r1, r1, #1
   161ac:	mvn	r2, #3
   161b0:	bl	12a9c <_start@@Base+0x3e8>
   161b4:	cmp	r0, #0
   161b8:	beq	16190 <flatcc_builder_extend_union_vector@@Base+0x54>
   161bc:	mov	r0, r4
   161c0:	b	16198 <flatcc_builder_extend_union_vector@@Base+0x5c>
   161c4:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>

000161c8 <flatcc_builder_truncate_union_vector@@Base>:
   161c8:	mov	r3, r0
   161cc:	ldr	r0, [r0, #32]
   161d0:	str	r4, [sp, #-8]!
   161d4:	ldrh	r2, [r0, #14]
   161d8:	str	lr, [sp, #4]
   161dc:	cmp	r2, #7
   161e0:	bne	16230 <flatcc_builder_truncate_union_vector@@Base+0x68>
   161e4:	mov	lr, r1
   161e8:	ldr	r1, [r0, #20]
   161ec:	cmp	r1, lr
   161f0:	bcc	16254 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   161f4:	ldr	r2, [r0, #16]
   161f8:	sub	ip, r1, lr
   161fc:	mov	r1, #0
   16200:	str	ip, [r0, #20]
   16204:	ldr	r0, [r3, #16]
   16208:	ldr	ip, [r3, #20]
   1620c:	mul	r2, r2, lr
   16210:	sub	ip, ip, r2
   16214:	add	r0, r0, ip
   16218:	str	ip, [r3, #20]
   1621c:	bl	12014 <memset@plt>
   16220:	ldr	r4, [sp]
   16224:	add	sp, sp, #4
   16228:	mov	r0, #0
   1622c:	pop	{pc}		; (ldr pc, [sp], #4)
   16230:	ldr	r3, [pc, #64]	; 16278 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   16234:	movw	r2, #1665	; 0x681
   16238:	ldr	r1, [pc, #60]	; 1627c <flatcc_builder_truncate_union_vector@@Base+0xb4>
   1623c:	ldr	r0, [pc, #60]	; 16280 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   16240:	add	r3, pc, r3
   16244:	add	r3, r3, #1000	; 0x3e8
   16248:	add	r1, pc, r1
   1624c:	add	r0, pc, r0
   16250:	bl	12044 <__assert_fail@plt>
   16254:	ldr	r3, [pc, #40]	; 16284 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   16258:	movw	r2, #1666	; 0x682
   1625c:	ldr	r1, [pc, #36]	; 16288 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   16260:	ldr	r0, [pc, #36]	; 1628c <flatcc_builder_truncate_union_vector@@Base+0xc4>
   16264:	add	r3, pc, r3
   16268:	add	r3, r3, #1000	; 0x3e8
   1626c:	add	r1, pc, r1
   16270:	add	r0, pc, r0
   16274:	bl	12044 <__assert_fail@plt>
   16278:	andeq	r1, r0, r0, asr #20
   1627c:	andeq	r2, r0, r8, lsl #3
   16280:	andeq	r2, r0, r0, lsr #9
   16284:	andeq	r1, r0, ip, lsl sl
   16288:	andeq	r2, r0, r4, ror #2
   1628c:	andeq	r2, r0, r0, lsr #7

00016290 <flatcc_builder_union_vector_push@@Base>:
   16290:	strd	r4, [sp, #-20]!	; 0xffffffec
   16294:	strd	r6, [sp, #8]
   16298:	str	lr, [sp, #16]
   1629c:	sub	sp, sp, #12
   162a0:	add	r3, sp, #8
   162a4:	stmdb	r3, {r1, r2}
   162a8:	ldr	r2, [r0, #32]
   162ac:	ldrh	r3, [r2, #14]
   162b0:	cmp	r3, #7
   162b4:	bne	1632c <flatcc_builder_union_vector_push@@Base+0x9c>
   162b8:	ldr	r3, [r2, #20]
   162bc:	cmn	r3, #-536870911	; 0xe0000001
   162c0:	beq	16324 <flatcc_builder_union_vector_push@@Base+0x94>
   162c4:	ldr	r5, [r0, #20]
   162c8:	add	r3, r3, #1
   162cc:	mov	r4, r0
   162d0:	ldr	r1, [r0, #24]
   162d4:	str	r3, [r2, #20]
   162d8:	add	r3, r5, #8
   162dc:	cmp	r3, r1
   162e0:	str	r3, [r0, #20]
   162e4:	bcs	16310 <flatcc_builder_union_vector_push@@Base+0x80>
   162e8:	ldr	r3, [r4, #16]
   162ec:	adds	r0, r3, r5
   162f0:	beq	162fc <flatcc_builder_union_vector_push@@Base+0x6c>
   162f4:	ldrd	r6, [sp]
   162f8:	strd	r6, [r3, r5]
   162fc:	add	sp, sp, #12
   16300:	ldrd	r4, [sp]
   16304:	ldrd	r6, [sp, #8]
   16308:	add	sp, sp, #16
   1630c:	pop	{pc}		; (ldr pc, [sp], #4)
   16310:	mvn	r2, #3
   16314:	add	r1, r5, #9
   16318:	bl	12a9c <_start@@Base+0x3e8>
   1631c:	cmp	r0, #0
   16320:	beq	162e8 <flatcc_builder_union_vector_push@@Base+0x58>
   16324:	mov	r0, #0
   16328:	b	162fc <flatcc_builder_union_vector_push@@Base+0x6c>
   1632c:	ldr	r3, [pc, #28]	; 16350 <flatcc_builder_union_vector_push@@Base+0xc0>
   16330:	movw	r2, #1677	; 0x68d
   16334:	ldr	r1, [pc, #24]	; 16354 <flatcc_builder_union_vector_push@@Base+0xc4>
   16338:	ldr	r0, [pc, #24]	; 16358 <flatcc_builder_union_vector_push@@Base+0xc8>
   1633c:	add	r3, pc, r3
   16340:	add	r3, r3, #1040	; 0x410
   16344:	add	r1, pc, r1
   16348:	add	r0, pc, r0
   1634c:	bl	12044 <__assert_fail@plt>
   16350:	andeq	r1, r0, r4, asr #18
   16354:	andeq	r2, r0, ip, lsl #1
   16358:	andeq	r2, r0, r4, lsr #7

0001635c <flatcc_builder_append_union_vector@@Base>:
   1635c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16360:	mov	r4, r1
   16364:	ldr	r1, [r0, #32]
   16368:	ldrh	r3, [r1, #14]
   1636c:	strd	r6, [sp, #8]
   16370:	str	r8, [sp, #16]
   16374:	str	lr, [sp, #20]
   16378:	cmp	r3, #7
   1637c:	bne	1641c <flatcc_builder_append_union_vector@@Base+0xc0>
   16380:	ldr	r3, [r1, #20]
   16384:	adds	r3, r2, r3
   16388:	movcs	lr, #1
   1638c:	movcc	lr, #0
   16390:	cmn	r3, #-536870911	; 0xe0000001
   16394:	movls	ip, #0
   16398:	movhi	ip, #1
   1639c:	orrs	r8, lr, ip
   163a0:	bne	16444 <flatcc_builder_append_union_vector@@Base+0xe8>
   163a4:	ldr	r7, [r0, #20]
   163a8:	lsl	r6, r2, #3
   163ac:	mov	r5, r0
   163b0:	str	r3, [r1, #20]
   163b4:	ldr	r3, [r0, #24]
   163b8:	add	r1, r6, r7
   163bc:	cmp	r1, r3
   163c0:	str	r1, [r0, #20]
   163c4:	bcs	16400 <flatcc_builder_append_union_vector@@Base+0xa4>
   163c8:	ldr	r3, [r5, #16]
   163cc:	adds	r3, r3, r7
   163d0:	beq	163e8 <flatcc_builder_append_union_vector@@Base+0x8c>
   163d4:	mov	r0, r3
   163d8:	mov	r2, r6
   163dc:	mov	r1, r4
   163e0:	bl	11f90 <memcpy@plt>
   163e4:	mov	r3, r0
   163e8:	ldrd	r4, [sp]
   163ec:	mov	r0, r3
   163f0:	ldrd	r6, [sp, #8]
   163f4:	ldr	r8, [sp, #16]
   163f8:	add	sp, sp, #20
   163fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16400:	add	r1, r1, #1
   16404:	mvn	r2, #3
   16408:	bl	12a9c <_start@@Base+0x3e8>
   1640c:	cmp	r0, #0
   16410:	beq	163c8 <flatcc_builder_append_union_vector@@Base+0x6c>
   16414:	mov	r3, r8
   16418:	b	163e8 <flatcc_builder_append_union_vector@@Base+0x8c>
   1641c:	ldr	r3, [pc, #36]	; 16448 <flatcc_builder_append_union_vector@@Base+0xec>
   16420:	movw	r2, #1692	; 0x69c
   16424:	ldr	r1, [pc, #32]	; 1644c <flatcc_builder_append_union_vector@@Base+0xf0>
   16428:	ldr	r0, [pc, #32]	; 16450 <flatcc_builder_append_union_vector@@Base+0xf4>
   1642c:	add	r3, pc, r3
   16430:	add	r3, r3, #1072	; 0x430
   16434:	add	r1, pc, r1
   16438:	add	r3, r3, #4
   1643c:	add	r0, pc, r0
   16440:	bl	12044 <__assert_fail@plt>
   16444:	bl	12e20 <flatcc_builder_default_alloc@@Base+0x2fc>
   16448:	andeq	r1, r0, r4, asr r8
   1644c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   16450:			; <UNDEFINED> instruction: 0x000022b0

00016454 <flatcc_builder_create_string@@Base>:
   16454:	ldr	ip, [r0, #136]	; 0x88
   16458:	cmp	r2, #0
   1645c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16460:	mov	r5, #4
   16464:	mov	r4, r0
   16468:	strd	r6, [sp, #8]
   1646c:	mov	r0, #1
   16470:	moveq	r7, #2
   16474:	str	lr, [sp, #16]
   16478:	sub	sp, sp, #92	; 0x5c
   1647c:	moveq	r1, r0
   16480:	add	r3, sp, #12
   16484:	ldr	lr, [pc, #204]	; 16558 <flatcc_builder_create_string@@Base+0x104>
   16488:	str	r2, [sp, #12]
   1648c:	str	r3, [sp, #24]
   16490:	sub	r3, ip, r2
   16494:	sub	r3, r3, #1
   16498:	str	r5, [sp, #28]
   1649c:	and	r3, r3, #3
   164a0:	add	lr, pc, lr
   164a4:	add	r3, r3, r0
   164a8:	beq	164c0 <flatcc_builder_create_string@@Base+0x6c>
   164ac:	add	r5, r2, r5
   164b0:	mov	r7, #3
   164b4:	str	r1, [sp, #32]
   164b8:	mov	r1, #2
   164bc:	str	r2, [sp, #36]	; 0x24
   164c0:	ldr	r6, [pc, #148]	; 1655c <flatcc_builder_create_string@@Base+0x108>
   164c4:	add	r0, r3, r5
   164c8:	add	r2, sp, #88	; 0x58
   164cc:	add	r1, r1, #1
   164d0:	sub	r5, ip, r0
   164d4:	add	r1, r2, r1, lsl #3
   164d8:	str	r0, [sp, #16]
   164dc:	cmp	ip, r5
   164e0:	ldr	r2, [lr, r6]
   164e4:	str	r7, [sp, #20]
   164e8:	strd	r2, [r1, #-72]	; 0xffffffb8
   164ec:	ble	16530 <flatcc_builder_create_string@@Base+0xdc>
   164f0:	mov	r2, r7
   164f4:	mov	r3, r5
   164f8:	str	r0, [sp]
   164fc:	add	r1, sp, #24
   16500:	ldr	r0, [r4, #36]	; 0x24
   16504:	ldr	r6, [r4, #44]	; 0x2c
   16508:	blx	r6
   1650c:	cmp	r0, #0
   16510:	bne	16554 <flatcc_builder_create_string@@Base+0x100>
   16514:	mov	r0, r5
   16518:	str	r5, [r4, #136]	; 0x88
   1651c:	add	sp, sp, #92	; 0x5c
   16520:	ldrd	r4, [sp]
   16524:	ldrd	r6, [sp, #8]
   16528:	add	sp, sp, #16
   1652c:	pop	{pc}		; (ldr pc, [sp], #4)
   16530:	ldr	r3, [pc, #40]	; 16560 <flatcc_builder_create_string@@Base+0x10c>
   16534:	movw	r2, #647	; 0x287
   16538:	ldr	r1, [pc, #36]	; 16564 <flatcc_builder_create_string@@Base+0x110>
   1653c:	ldr	r0, [pc, #36]	; 16568 <flatcc_builder_create_string@@Base+0x114>
   16540:	add	r3, pc, r3
   16544:	add	r3, r3, #44	; 0x2c
   16548:	add	r1, pc, r1
   1654c:	add	r0, pc, r0
   16550:	bl	12044 <__assert_fail@plt>
   16554:	bl	12de8 <flatcc_builder_default_alloc@@Base+0x2c4>
   16558:	andeq	r2, r1, r8, asr fp
   1655c:	andeq	r0, r0, ip, asr r0
   16560:	andeq	r1, r0, r0, asr #14
   16564:	andeq	r1, r0, r8, lsl #29
   16568:	andeq	r1, r0, ip, lsl #30

0001656c <flatcc_builder_create_string_str@@Base>:
   1656c:	strd	r4, [sp, #-16]!
   16570:	mov	r5, r0
   16574:	mov	r0, r1
   16578:	mov	r4, r1
   1657c:	str	r6, [sp, #8]
   16580:	str	lr, [sp, #12]
   16584:	bl	11ffc <strlen@plt>
   16588:	mov	r2, r0
   1658c:	mov	r1, r4
   16590:	ldr	r6, [sp, #8]
   16594:	mov	r0, r5
   16598:	ldrd	r4, [sp]
   1659c:	ldr	lr, [sp, #12]
   165a0:	add	sp, sp, #16
   165a4:	b	16454 <flatcc_builder_create_string@@Base>

000165a8 <flatcc_builder_create_string_strn@@Base>:
   165a8:	strd	r4, [sp, #-16]!
   165ac:	mov	r4, r1
   165b0:	mov	r1, #0
   165b4:	str	r6, [sp, #8]
   165b8:	mov	r6, r0
   165bc:	mov	r0, r4
   165c0:	mov	r5, r2
   165c4:	str	lr, [sp, #12]
   165c8:	bl	12020 <memchr@plt>
   165cc:	cmp	r0, #0
   165d0:	mov	r1, r4
   165d4:	ldr	lr, [sp, #12]
   165d8:	subne	r5, r0, r4
   165dc:	mov	r0, r6
   165e0:	mov	r2, r5
   165e4:	ldrd	r4, [sp]
   165e8:	ldr	r6, [sp, #8]
   165ec:	add	sp, sp, #16
   165f0:	b	16454 <flatcc_builder_create_string@@Base>

000165f4 <flatcc_builder_end_string@@Base>:
   165f4:	ldr	r3, [r0, #32]
   165f8:	strd	r4, [sp, #-16]!
   165fc:	ldrh	r2, [r3, #14]
   16600:	str	r6, [sp, #8]
   16604:	str	lr, [sp, #12]
   16608:	cmp	r2, #6
   1660c:	bne	166e4 <flatcc_builder_end_string@@Base+0xf0>
   16610:	ldr	r2, [r3, #20]
   16614:	mov	r4, r0
   16618:	ldr	r3, [r0, #20]
   1661c:	cmp	r2, r3
   16620:	bne	166bc <flatcc_builder_end_string@@Base+0xc8>
   16624:	ldr	r1, [r0, #16]
   16628:	bl	16454 <flatcc_builder_create_string@@Base>
   1662c:	subs	r5, r0, #0
   16630:	beq	166a8 <flatcc_builder_end_string@@Base+0xb4>
   16634:	mov	r1, #0
   16638:	ldr	r0, [r4, #16]
   1663c:	ldr	r2, [r4, #20]
   16640:	bl	12014 <memset@plt>
   16644:	ldr	r3, [r4, #32]
   16648:	ldr	r0, [r4, #60]	; 0x3c
   1664c:	ldr	r2, [r4, #64]	; 0x40
   16650:	ldr	ip, [r3]
   16654:	ldmib	r3, {r1, lr}
   16658:	add	r0, r0, ip
   1665c:	sub	r2, r2, ip
   16660:	str	r0, [r4, #16]
   16664:	cmp	r2, r1
   16668:	ldrh	r0, [r4, #128]	; 0x80
   1666c:	movcs	r2, r1
   16670:	str	lr, [r4, #20]
   16674:	str	ip, [r4, #28]
   16678:	ldrh	ip, [r4, #130]	; 0x82
   1667c:	str	r2, [r4, #24]
   16680:	ldr	r2, [r4, #156]	; 0x9c
   16684:	str	r1, [r3, #4]
   16688:	cmp	r0, ip
   1668c:	sub	r0, r3, #36	; 0x24
   16690:	strhcc	ip, [r4, #128]	; 0x80
   16694:	ldrh	r1, [r3, #12]
   16698:	sub	r3, r2, #1
   1669c:	str	r0, [r4, #32]
   166a0:	strh	r1, [r4, #130]	; 0x82
   166a4:	str	r3, [r4, #156]	; 0x9c
   166a8:	mov	r0, r5
   166ac:	ldrd	r4, [sp]
   166b0:	ldr	r6, [sp, #8]
   166b4:	add	sp, sp, #12
   166b8:	pop	{pc}		; (ldr pc, [sp], #4)
   166bc:	ldr	r3, [pc, #72]	; 1670c <flatcc_builder_end_string@@Base+0x118>
   166c0:	movw	r2, #1733	; 0x6c5
   166c4:	ldr	r1, [pc, #68]	; 16710 <flatcc_builder_end_string@@Base+0x11c>
   166c8:	ldr	r0, [pc, #68]	; 16714 <flatcc_builder_end_string@@Base+0x120>
   166cc:	add	r3, pc, r3
   166d0:	add	r3, r3, #1104	; 0x450
   166d4:	add	r1, pc, r1
   166d8:	add	r3, r3, #8
   166dc:	add	r0, pc, r0
   166e0:	bl	12044 <__assert_fail@plt>
   166e4:	ldr	r3, [pc, #44]	; 16718 <flatcc_builder_end_string@@Base+0x124>
   166e8:	movw	r2, #1732	; 0x6c4
   166ec:	ldr	r1, [pc, #40]	; 1671c <flatcc_builder_end_string@@Base+0x128>
   166f0:	ldr	r0, [pc, #40]	; 16720 <flatcc_builder_end_string@@Base+0x12c>
   166f4:	add	r3, pc, r3
   166f8:	add	r3, r3, #1104	; 0x450
   166fc:	add	r1, pc, r1
   16700:	add	r3, r3, #8
   16704:	add	r0, pc, r0
   16708:	bl	12044 <__assert_fail@plt>
   1670c:			; <UNDEFINED> instruction: 0x000015b4
   16710:	strdeq	r1, [r0], -ip
   16714:	andeq	r2, r0, r4, asr #32
   16718:	andeq	r1, r0, ip, lsl #11
   1671c:	ldrdeq	r1, [r0], -r4
   16720:			; <UNDEFINED> instruction: 0x00001ebc

00016724 <flatcc_builder_string_edit@@Base>:
   16724:	ldr	r0, [r0, #16]
   16728:	bx	lr

0001672c <flatcc_builder_string_len@@Base>:
   1672c:	ldr	r3, [r0, #32]
   16730:	ldr	r0, [r3, #20]
   16734:	bx	lr

00016738 <flatcc_builder_table_add@@Base>:
   16738:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1673c:	mov	r4, r0
   16740:	ldr	r0, [r0, #32]
   16744:	ldrh	r0, [r0, #14]
   16748:	strd	r6, [sp, #8]
   1674c:	strd	r8, [sp, #16]
   16750:	str	sl, [sp, #24]
   16754:	str	lr, [sp, #28]
   16758:	cmp	r0, #3
   1675c:	bne	1688c <flatcc_builder_table_add@@Base+0x154>
   16760:	movw	r0, #32764	; 0x7ffc
   16764:	cmp	r1, r0
   16768:	bhi	16864 <flatcc_builder_table_add@@Base+0x12c>
   1676c:	ldrh	r0, [r4, #130]	; 0x82
   16770:	lsl	r8, r1, #1
   16774:	ldr	lr, [r4, #4]
   16778:	cmp	r0, r3
   1677c:	strhcc	r3, [r4, #130]	; 0x82
   16780:	ldrh	r6, [lr, r8]
   16784:	add	lr, lr, r8
   16788:	cmp	r6, #0
   1678c:	bne	1683c <flatcc_builder_table_add@@Base+0x104>
   16790:	ldr	ip, [r4, #12]
   16794:	movw	r9, #31153	; 0x79b1
   16798:	movt	r9, #40503	; 0x9e37
   1679c:	uxth	r7, r1
   167a0:	sub	r5, r3, #1
   167a4:	ldr	r0, [r4, #20]
   167a8:	rsb	r3, r3, #0
   167ac:	eor	ip, ip, r1
   167b0:	ldr	r1, [r4, #24]
   167b4:	mul	ip, r9, ip
   167b8:	add	r5, r5, r0
   167bc:	and	r5, r5, r3
   167c0:	eor	ip, ip, r2
   167c4:	add	r2, r2, r5
   167c8:	cmp	r2, r1
   167cc:	mul	ip, r9, ip
   167d0:	str	ip, [r4, #12]
   167d4:	str	r2, [r4, #20]
   167d8:	bcs	16814 <flatcc_builder_table_add@@Base+0xdc>
   167dc:	add	r3, r5, #4
   167e0:	ldr	r0, [r4, #16]
   167e4:	strh	r3, [lr]
   167e8:	ldrh	r3, [r4, #8]
   167ec:	add	r0, r0, r5
   167f0:	cmp	r3, r7
   167f4:	addls	r7, r7, #1
   167f8:	strhls	r7, [r4, #8]
   167fc:	ldrd	r4, [sp]
   16800:	ldrd	r6, [sp, #8]
   16804:	ldrd	r8, [sp, #16]
   16808:	ldr	sl, [sp, #24]
   1680c:	add	sp, sp, #28
   16810:	pop	{pc}		; (ldr pc, [sp], #4)
   16814:	add	r1, r2, #1
   16818:	mov	r0, r4
   1681c:	movw	r2, #65532	; 0xfffc
   16820:	bl	12a9c <_start@@Base+0x3e8>
   16824:	cmp	r0, #0
   16828:	movne	r0, r6
   1682c:	bne	167fc <flatcc_builder_table_add@@Base+0xc4>
   16830:	ldr	lr, [r4, #4]
   16834:	add	lr, lr, r8
   16838:	b	167dc <flatcc_builder_table_add@@Base+0xa4>
   1683c:	ldr	r3, [pc, #112]	; 168b4 <flatcc_builder_table_add@@Base+0x17c>
   16840:	movw	r2, #1784	; 0x6f8
   16844:	ldr	r1, [pc, #108]	; 168b8 <flatcc_builder_table_add@@Base+0x180>
   16848:	ldr	r0, [pc, #108]	; 168bc <flatcc_builder_table_add@@Base+0x184>
   1684c:	add	r3, pc, r3
   16850:	add	r3, r3, #1136	; 0x470
   16854:	add	r1, pc, r1
   16858:	add	r3, r3, #4
   1685c:	add	r0, pc, r0
   16860:	bl	12044 <__assert_fail@plt>
   16864:	ldr	r3, [pc, #84]	; 168c0 <flatcc_builder_table_add@@Base+0x188>
   16868:	movw	r2, #1774	; 0x6ee
   1686c:	ldr	r1, [pc, #80]	; 168c4 <flatcc_builder_table_add@@Base+0x18c>
   16870:	ldr	r0, [pc, #80]	; 168c8 <flatcc_builder_table_add@@Base+0x190>
   16874:	add	r3, pc, r3
   16878:	add	r3, r3, #1136	; 0x470
   1687c:	add	r1, pc, r1
   16880:	add	r3, r3, #4
   16884:	add	r0, pc, r0
   16888:	bl	12044 <__assert_fail@plt>
   1688c:	ldr	r3, [pc, #56]	; 168cc <flatcc_builder_table_add@@Base+0x194>
   16890:	movw	r2, #1773	; 0x6ed
   16894:	ldr	r1, [pc, #52]	; 168d0 <flatcc_builder_table_add@@Base+0x198>
   16898:	ldr	r0, [pc, #52]	; 168d4 <flatcc_builder_table_add@@Base+0x19c>
   1689c:	add	r3, pc, r3
   168a0:	add	r3, r3, #1136	; 0x470
   168a4:	add	r1, pc, r1
   168a8:	add	r3, r3, #4
   168ac:	add	r0, pc, r0
   168b0:	bl	12044 <__assert_fail@plt>
   168b4:	andeq	r1, r0, r4, lsr r4
   168b8:	andeq	r1, r0, ip, ror fp
   168bc:	strdeq	r1, [r0], -ip
   168c0:	andeq	r1, r0, ip, lsl #8
   168c4:	andeq	r1, r0, r4, asr fp
   168c8:	andeq	r1, r0, r0, asr #29
   168cc:	andeq	r1, r0, r4, ror #7
   168d0:	andeq	r1, r0, ip, lsr #22
   168d4:	andeq	r1, r0, r0, lsl #28

000168d8 <flatcc_builder_table_edit@@Base>:
   168d8:	ldr	r2, [r0, #32]
   168dc:	ldrh	r2, [r2, #14]
   168e0:	cmp	r2, #3
   168e4:	bne	168fc <flatcc_builder_table_edit@@Base+0x24>
   168e8:	ldr	r3, [r0, #20]
   168ec:	ldr	r0, [r0, #16]
   168f0:	sub	r3, r3, r1
   168f4:	add	r0, r0, r3
   168f8:	bx	lr
   168fc:	ldr	r3, [pc, #36]	; 16928 <flatcc_builder_table_edit@@Base+0x50>
   16900:	movw	r2, #1794	; 0x702
   16904:	str	r4, [sp, #-8]!
   16908:	ldr	r1, [pc, #28]	; 1692c <flatcc_builder_table_edit@@Base+0x54>
   1690c:	str	lr, [sp, #4]
   16910:	ldr	r0, [pc, #24]	; 16930 <flatcc_builder_table_edit@@Base+0x58>
   16914:	add	r3, pc, r3
   16918:	add	r3, r3, #1168	; 0x490
   1691c:	add	r1, pc, r1
   16920:	add	r0, pc, r0
   16924:	bl	12044 <__assert_fail@plt>
   16928:	andeq	r1, r0, ip, ror #6
   1692c:			; <UNDEFINED> instruction: 0x00001ab4
   16930:	andeq	r1, r0, ip, lsl #27

00016934 <flatcc_builder_table_add_copy@@Base>:
   16934:	strd	r4, [sp, #-16]!
   16938:	mov	r4, r3
   1693c:	ldrh	r3, [sp, #16]
   16940:	str	r6, [sp, #8]
   16944:	mov	r6, r2
   16948:	mov	r2, r4
   1694c:	str	lr, [sp, #12]
   16950:	bl	16738 <flatcc_builder_table_add@@Base>
   16954:	subs	r5, r0, #0
   16958:	beq	16968 <flatcc_builder_table_add_copy@@Base+0x34>
   1695c:	mov	r2, r4
   16960:	mov	r1, r6
   16964:	bl	11f90 <memcpy@plt>
   16968:	mov	r0, r5
   1696c:	ldrd	r4, [sp]
   16970:	ldr	r6, [sp, #8]
   16974:	add	sp, sp, #12
   16978:	pop	{pc}		; (ldr pc, [sp], #4)

0001697c <flatcc_builder_table_add_offset@@Base>:
   1697c:	ldr	r3, [r0, #32]
   16980:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16984:	ldrh	r3, [r3, #14]
   16988:	strd	r6, [sp, #8]
   1698c:	str	r8, [sp, #16]
   16990:	str	lr, [sp, #20]
   16994:	cmp	r3, #3
   16998:	bne	16ac0 <flatcc_builder_table_add_offset@@Base+0x144>
   1699c:	movw	r3, #32764	; 0x7ffc
   169a0:	cmp	r1, r3
   169a4:	bhi	16a98 <flatcc_builder_table_add_offset@@Base+0x11c>
   169a8:	ldr	ip, [r0, #4]
   169ac:	lsl	r8, r1, #1
   169b0:	mov	r4, r0
   169b4:	ldrh	r6, [ip, r8]
   169b8:	add	ip, ip, r8
   169bc:	cmp	r6, #0
   169c0:	bne	16a70 <flatcc_builder_table_add_offset@@Base+0xf4>
   169c4:	ldr	r3, [r0, #12]
   169c8:	movw	r2, #31153	; 0x79b1
   169cc:	movt	r2, #40503	; 0x9e37
   169d0:	uxth	r7, r1
   169d4:	ldr	r5, [r0, #20]
   169d8:	ldr	lr, [r0, #24]
   169dc:	eor	r3, r3, r1
   169e0:	mul	r3, r2, r3
   169e4:	add	r5, r5, #3
   169e8:	bic	r5, r5, #3
   169ec:	add	r1, r5, #4
   169f0:	eor	r3, r3, #4
   169f4:	cmp	r1, lr
   169f8:	str	r1, [r0, #20]
   169fc:	mul	r3, r2, r3
   16a00:	str	r3, [r0, #12]
   16a04:	bhi	16a50 <flatcc_builder_table_add_offset@@Base+0xd4>
   16a08:	uxth	r2, r5
   16a0c:	ldr	r0, [r4, #16]
   16a10:	add	r3, r2, #4
   16a14:	strh	r3, [ip]
   16a18:	ldrh	r3, [r4, #8]
   16a1c:	add	r0, r0, r5
   16a20:	cmp	r3, r7
   16a24:	ldr	r3, [r4]
   16a28:	addls	r7, r7, #1
   16a2c:	strhls	r7, [r4, #8]
   16a30:	add	r1, r3, #2
   16a34:	str	r1, [r4]
   16a38:	strh	r2, [r3]
   16a3c:	ldrd	r4, [sp]
   16a40:	ldrd	r6, [sp, #8]
   16a44:	ldr	r8, [sp, #16]
   16a48:	add	sp, sp, #20
   16a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a50:	movw	r2, #65532	; 0xfffc
   16a54:	bl	12a9c <_start@@Base+0x3e8>
   16a58:	cmp	r0, #0
   16a5c:	movne	r0, r6
   16a60:	bne	16a3c <flatcc_builder_table_add_offset@@Base+0xc0>
   16a64:	ldr	ip, [r4, #4]
   16a68:	add	ip, ip, r8
   16a6c:	b	16a08 <flatcc_builder_table_add_offset@@Base+0x8c>
   16a70:	ldr	r3, [pc, #112]	; 16ae8 <flatcc_builder_table_add_offset@@Base+0x16c>
   16a74:	movw	r2, #1819	; 0x71b
   16a78:	ldr	r1, [pc, #108]	; 16aec <flatcc_builder_table_add_offset@@Base+0x170>
   16a7c:	ldr	r0, [pc, #108]	; 16af0 <flatcc_builder_table_add_offset@@Base+0x174>
   16a80:	add	r3, pc, r3
   16a84:	add	r3, r3, #1184	; 0x4a0
   16a88:	add	r1, pc, r1
   16a8c:	add	r3, r3, #12
   16a90:	add	r0, pc, r0
   16a94:	bl	12044 <__assert_fail@plt>
   16a98:	ldr	r3, [pc, #84]	; 16af4 <flatcc_builder_table_add_offset@@Base+0x178>
   16a9c:	movw	r2, #1812	; 0x714
   16aa0:	ldr	r1, [pc, #80]	; 16af8 <flatcc_builder_table_add_offset@@Base+0x17c>
   16aa4:	ldr	r0, [pc, #80]	; 16afc <flatcc_builder_table_add_offset@@Base+0x180>
   16aa8:	add	r3, pc, r3
   16aac:	add	r3, r3, #1184	; 0x4a0
   16ab0:	add	r1, pc, r1
   16ab4:	add	r3, r3, #12
   16ab8:	add	r0, pc, r0
   16abc:	bl	12044 <__assert_fail@plt>
   16ac0:	ldr	r3, [pc, #56]	; 16b00 <flatcc_builder_table_add_offset@@Base+0x184>
   16ac4:	movw	r2, #1811	; 0x713
   16ac8:	ldr	r1, [pc, #52]	; 16b04 <flatcc_builder_table_add_offset@@Base+0x188>
   16acc:	ldr	r0, [pc, #52]	; 16b08 <flatcc_builder_table_add_offset@@Base+0x18c>
   16ad0:	add	r3, pc, r3
   16ad4:	add	r3, r3, #1184	; 0x4a0
   16ad8:	add	r1, pc, r1
   16adc:	add	r3, r3, #12
   16ae0:	add	r0, pc, r0
   16ae4:	bl	12044 <__assert_fail@plt>
   16ae8:	andeq	r1, r0, r0, lsl #4
   16aec:	andeq	r1, r0, r8, asr #18
   16af0:	andeq	r1, r0, r8, asr #19
   16af4:	ldrdeq	r1, [r0], -r8
   16af8:	andeq	r1, r0, r0, lsr #18
   16afc:	andeq	r1, r0, ip, lsl #25
   16b00:			; <UNDEFINED> instruction: 0x000011b0
   16b04:	strdeq	r1, [r0], -r8
   16b08:	andeq	r1, r0, ip, asr #23

00016b0c <flatcc_builder_table_add_union@@Base>:
   16b0c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16b10:	strd	r6, [sp, #8]
   16b14:	str	lr, [sp, #16]
   16b18:	sub	sp, sp, #12
   16b1c:	add	ip, sp, #8
   16b20:	stmdb	ip, {r2, r3}
   16b24:	ldr	r3, [r0, #32]
   16b28:	ldrb	r5, [sp]
   16b2c:	ldr	r6, [sp, #4]
   16b30:	ldrh	r3, [r3, #14]
   16b34:	cmp	r3, #3
   16b38:	bne	16bcc <flatcc_builder_table_add_union@@Base+0xc0>
   16b3c:	cmp	r5, #0
   16b40:	mov	r4, r0
   16b44:	mov	r7, r1
   16b48:	beq	16b9c <flatcc_builder_table_add_union@@Base+0x90>
   16b4c:	cmp	r6, #0
   16b50:	beq	16b64 <flatcc_builder_table_add_union@@Base+0x58>
   16b54:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   16b58:	cmp	r0, #0
   16b5c:	strne	r6, [r0]
   16b60:	beq	16c1c <flatcc_builder_table_add_union@@Base+0x110>
   16b64:	mov	r3, #1
   16b68:	sub	r1, r7, #1
   16b6c:	mov	r2, r3
   16b70:	mov	r0, r4
   16b74:	bl	16738 <flatcc_builder_table_add@@Base>
   16b78:	subs	r3, r0, #0
   16b7c:	beq	16bf4 <flatcc_builder_table_add_union@@Base+0xe8>
   16b80:	mov	r0, #0
   16b84:	strb	r5, [r3]
   16b88:	add	sp, sp, #12
   16b8c:	ldrd	r4, [sp]
   16b90:	ldrd	r6, [sp, #8]
   16b94:	add	sp, sp, #16
   16b98:	pop	{pc}		; (ldr pc, [sp], #4)
   16b9c:	cmp	r6, #0
   16ba0:	beq	16b64 <flatcc_builder_table_add_union@@Base+0x58>
   16ba4:	ldr	r3, [pc, #152]	; 16c44 <flatcc_builder_table_add_union@@Base+0x138>
   16ba8:	movw	r2, #1519	; 0x5ef
   16bac:	ldr	r1, [pc, #148]	; 16c48 <flatcc_builder_table_add_union@@Base+0x13c>
   16bb0:	ldr	r0, [pc, #148]	; 16c4c <flatcc_builder_table_add_union@@Base+0x140>
   16bb4:	add	r3, pc, r3
   16bb8:	add	r3, r3, #1216	; 0x4c0
   16bbc:	add	r1, pc, r1
   16bc0:	add	r3, r3, #12
   16bc4:	add	r0, pc, r0
   16bc8:	bl	12044 <__assert_fail@plt>
   16bcc:	ldr	r3, [pc, #124]	; 16c50 <flatcc_builder_table_add_union@@Base+0x144>
   16bd0:	movw	r2, #1518	; 0x5ee
   16bd4:	ldr	r1, [pc, #120]	; 16c54 <flatcc_builder_table_add_union@@Base+0x148>
   16bd8:	ldr	r0, [pc, #120]	; 16c58 <flatcc_builder_table_add_union@@Base+0x14c>
   16bdc:	add	r3, pc, r3
   16be0:	add	r3, r3, #1216	; 0x4c0
   16be4:	add	r1, pc, r1
   16be8:	add	r3, r3, #12
   16bec:	add	r0, pc, r0
   16bf0:	bl	12044 <__assert_fail@plt>
   16bf4:	ldr	r3, [pc, #96]	; 16c5c <flatcc_builder_table_add_union@@Base+0x150>
   16bf8:	movw	r2, #1526	; 0x5f6
   16bfc:	ldr	r1, [pc, #92]	; 16c60 <flatcc_builder_table_add_union@@Base+0x154>
   16c00:	ldr	r0, [pc, #92]	; 16c64 <flatcc_builder_table_add_union@@Base+0x158>
   16c04:	add	r3, pc, r3
   16c08:	add	r3, r3, #1216	; 0x4c0
   16c0c:	add	r1, pc, r1
   16c10:	add	r3, r3, #12
   16c14:	add	r0, pc, r0
   16c18:	bl	12044 <__assert_fail@plt>
   16c1c:	ldr	r3, [pc, #68]	; 16c68 <flatcc_builder_table_add_union@@Base+0x15c>
   16c20:	movw	r2, #1522	; 0x5f2
   16c24:	ldr	r1, [pc, #64]	; 16c6c <flatcc_builder_table_add_union@@Base+0x160>
   16c28:	ldr	r0, [pc, #64]	; 16c70 <flatcc_builder_table_add_union@@Base+0x164>
   16c2c:	add	r3, pc, r3
   16c30:	add	r3, r3, #1216	; 0x4c0
   16c34:	add	r1, pc, r1
   16c38:	add	r3, r3, #12
   16c3c:	add	r0, pc, r0
   16c40:	bl	12044 <__assert_fail@plt>
   16c44:	andeq	r1, r0, ip, asr #1
   16c48:	andeq	r1, r0, r4, lsl r8
   16c4c:	andeq	r1, r0, r4, asr #23
   16c50:	andeq	r1, r0, r4, lsr #1
   16c54:	andeq	r1, r0, ip, ror #15
   16c58:	andeq	r1, r0, r0, asr #21
   16c5c:	andeq	r1, r0, ip, ror r0
   16c60:	andeq	r1, r0, r4, asr #15
   16c64:	andeq	r1, r0, r4, lsr #23
   16c68:	andeq	r1, r0, r4, asr r0
   16c6c:	muleq	r0, ip, r7
   16c70:	andeq	r1, r0, r0, ror fp

00016c74 <flatcc_builder_table_add_union_vector@@Base>:
   16c74:	strd	r4, [sp, #-20]!	; 0xffffffec
   16c78:	strd	r6, [sp, #8]
   16c7c:	mov	r7, r1
   16c80:	str	lr, [sp, #16]
   16c84:	sub	sp, sp, #12
   16c88:	add	r1, sp, #8
   16c8c:	stmdb	r1, {r2, r3}
   16c90:	ldr	r3, [r0, #32]
   16c94:	ldm	sp, {r4, r6}
   16c98:	ldrh	r3, [r3, #14]
   16c9c:	cmp	r3, #3
   16ca0:	bne	16d4c <flatcc_builder_table_add_union_vector@@Base+0xd8>
   16ca4:	clz	r3, r6
   16ca8:	clz	r2, r4
   16cac:	lsr	r3, r3, #5
   16cb0:	lsr	r2, r2, #5
   16cb4:	cmp	r2, r3
   16cb8:	beq	16ce8 <flatcc_builder_table_add_union_vector@@Base+0x74>
   16cbc:	adds	r4, r4, #0
   16cc0:	movne	r4, #1
   16cc4:	cmp	r4, r3
   16cc8:	mvnne	r4, #0
   16ccc:	beq	16d74 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16cd0:	mov	r0, r4
   16cd4:	add	sp, sp, #12
   16cd8:	ldrd	r4, [sp]
   16cdc:	ldrd	r6, [sp, #8]
   16ce0:	add	sp, sp, #16
   16ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce8:	cmp	r4, #0
   16cec:	beq	16cd0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16cf0:	sub	r1, r7, #1
   16cf4:	mov	r5, r0
   16cf8:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   16cfc:	subs	r3, r0, #0
   16d00:	beq	16d9c <flatcc_builder_table_add_union_vector@@Base+0x128>
   16d04:	mov	r1, r7
   16d08:	mov	r0, r5
   16d0c:	str	r4, [r3]
   16d10:	bl	1697c <flatcc_builder_table_add_offset@@Base>
   16d14:	cmp	r0, #0
   16d18:	movne	r4, #0
   16d1c:	strne	r6, [r0]
   16d20:	bne	16cd0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16d24:	ldr	r3, [pc, #152]	; 16dc4 <flatcc_builder_table_add_union_vector@@Base+0x150>
   16d28:	movw	r2, #1544	; 0x608
   16d2c:	ldr	r1, [pc, #148]	; 16dc8 <flatcc_builder_table_add_union_vector@@Base+0x154>
   16d30:	ldr	r0, [pc, #148]	; 16dcc <flatcc_builder_table_add_union_vector@@Base+0x158>
   16d34:	add	r3, pc, r3
   16d38:	add	r3, r3, #1248	; 0x4e0
   16d3c:	add	r1, pc, r1
   16d40:	add	r3, r3, #12
   16d44:	add	r0, pc, r0
   16d48:	bl	12044 <__assert_fail@plt>
   16d4c:	ldr	r3, [pc, #124]	; 16dd0 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   16d50:	mov	r2, #1536	; 0x600
   16d54:	ldr	r1, [pc, #120]	; 16dd4 <flatcc_builder_table_add_union_vector@@Base+0x160>
   16d58:	ldr	r0, [pc, #120]	; 16dd8 <flatcc_builder_table_add_union_vector@@Base+0x164>
   16d5c:	add	r3, pc, r3
   16d60:	add	r3, r3, #1248	; 0x4e0
   16d64:	add	r1, pc, r1
   16d68:	add	r3, r3, #12
   16d6c:	add	r0, pc, r0
   16d70:	bl	12044 <__assert_fail@plt>
   16d74:	ldr	r3, [pc, #96]	; 16ddc <flatcc_builder_table_add_union_vector@@Base+0x168>
   16d78:	movw	r2, #1537	; 0x601
   16d7c:	ldr	r1, [pc, #92]	; 16de0 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   16d80:	ldr	r0, [pc, #92]	; 16de4 <flatcc_builder_table_add_union_vector@@Base+0x170>
   16d84:	add	r3, pc, r3
   16d88:	add	r3, r3, #1248	; 0x4e0
   16d8c:	add	r1, pc, r1
   16d90:	add	r3, r3, #12
   16d94:	add	r0, pc, r0
   16d98:	bl	12044 <__assert_fail@plt>
   16d9c:	ldr	r3, [pc, #68]	; 16de8 <flatcc_builder_table_add_union_vector@@Base+0x174>
   16da0:	movw	r2, #1540	; 0x604
   16da4:	ldr	r1, [pc, #64]	; 16dec <flatcc_builder_table_add_union_vector@@Base+0x178>
   16da8:	ldr	r0, [pc, #64]	; 16df0 <flatcc_builder_table_add_union_vector@@Base+0x17c>
   16dac:	add	r3, pc, r3
   16db0:	add	r3, r3, #1248	; 0x4e0
   16db4:	add	r1, pc, r1
   16db8:	add	r3, r3, #12
   16dbc:	add	r0, pc, r0
   16dc0:	bl	12044 <__assert_fail@plt>
   16dc4:	andeq	r0, r0, ip, asr #30
   16dc8:	muleq	r0, r4, r6
   16dcc:	andeq	r1, r0, r8, ror #20
   16dd0:	andeq	r0, r0, r4, lsr #30
   16dd4:	andeq	r1, r0, ip, ror #12
   16dd8:	andeq	r1, r0, r0, asr #18
   16ddc:	strdeq	r0, [r0], -ip
   16de0:	andeq	r1, r0, r4, asr #12
   16de4:	andeq	r1, r0, r0, lsr sl
   16de8:	ldrdeq	r0, [r0], -r4
   16dec:	andeq	r1, r0, ip, lsl r6
   16df0:	strdeq	r1, [r0], -r0

00016df4 <flatcc_builder_push_buffer_alignment@@Base>:
   16df4:	mov	r3, r0
   16df8:	mov	r2, #4
   16dfc:	ldrh	r0, [r0, #128]	; 0x80
   16e00:	strh	r2, [r3, #128]	; 0x80
   16e04:	bx	lr

00016e08 <flatcc_builder_pop_buffer_alignment@@Base>:
   16e08:	ldrh	r3, [r0, #128]	; 0x80
   16e0c:	cmp	r3, r1
   16e10:	strhcc	r1, [r0, #128]	; 0x80
   16e14:	bx	lr

00016e18 <flatcc_builder_get_buffer_alignment@@Base>:
   16e18:	ldrh	r0, [r0, #128]	; 0x80
   16e1c:	bx	lr

00016e20 <flatcc_builder_set_vtable_clustering@@Base>:
   16e20:	clz	r1, r1
   16e24:	lsr	r1, r1, #5
   16e28:	str	r1, [r0, #180]	; 0xb4
   16e2c:	bx	lr

00016e30 <flatcc_builder_set_block_align@@Base>:
   16e30:	strh	r1, [r0, #132]	; 0x84
   16e34:	bx	lr

00016e38 <flatcc_builder_get_level@@Base>:
   16e38:	ldr	r0, [r0, #156]	; 0x9c
   16e3c:	bx	lr

00016e40 <flatcc_builder_set_max_level@@Base>:
   16e40:	ldr	r3, [r0, #160]	; 0xa0
   16e44:	str	r1, [r0, #176]	; 0xb0
   16e48:	cmp	r3, r1
   16e4c:	strlt	r1, [r0, #160]	; 0xa0
   16e50:	bx	lr

00016e54 <flatcc_builder_get_buffer_size@@Base>:
   16e54:	ldr	r3, [r0, #136]	; 0x88
   16e58:	ldr	r0, [r0, #140]	; 0x8c
   16e5c:	sub	r0, r0, r3
   16e60:	bx	lr

00016e64 <flatcc_builder_get_buffer_start@@Base>:
   16e64:	ldr	r0, [r0, #136]	; 0x88
   16e68:	bx	lr

00016e6c <flatcc_builder_get_buffer_end@@Base>:
   16e6c:	ldr	r0, [r0, #140]	; 0x8c
   16e70:	bx	lr

00016e74 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16e74:	str	r1, [r0, #172]	; 0xac
   16e78:	bx	lr

00016e7c <flatcc_builder_set_identifier@@Base>:
   16e7c:	ldr	r3, [pc, #40]	; 16eac <flatcc_builder_set_identifier@@Base+0x30>
   16e80:	cmp	r1, #0
   16e84:	add	r3, pc, r3
   16e88:	beq	16e98 <flatcc_builder_set_identifier@@Base+0x1c>
   16e8c:	ldr	r3, [r1]
   16e90:	str	r3, [r0, #168]	; 0xa8
   16e94:	bx	lr
   16e98:	ldr	r2, [pc, #16]	; 16eb0 <flatcc_builder_set_identifier@@Base+0x34>
   16e9c:	ldr	r1, [r3, r2]
   16ea0:	ldr	r3, [r1]
   16ea4:	str	r3, [r0, #168]	; 0xa8
   16ea8:	bx	lr
   16eac:	andeq	r2, r1, r4, ror r1
   16eb0:	andeq	r0, r0, ip, asr r0

00016eb4 <flatcc_builder_get_type@@Base>:
   16eb4:	ldr	r0, [r0, #32]
   16eb8:	cmp	r0, #0
   16ebc:	ldrhne	r0, [r0, #14]
   16ec0:	bx	lr

00016ec4 <flatcc_builder_get_type_at@@Base>:
   16ec4:	cmp	r1, #0
   16ec8:	ble	16ef0 <flatcc_builder_get_type_at@@Base+0x2c>
   16ecc:	ldr	r3, [r0, #156]	; 0x9c
   16ed0:	cmp	r3, r1
   16ed4:	blt	16ef0 <flatcc_builder_get_type_at@@Base+0x2c>
   16ed8:	ldr	r2, [r0, #32]
   16edc:	sub	r1, r1, r3
   16ee0:	add	r1, r1, r1, lsl #3
   16ee4:	add	r1, r2, r1, lsl #2
   16ee8:	ldrh	r0, [r1, #14]
   16eec:	bx	lr
   16ef0:	mov	r0, #0
   16ef4:	bx	lr

00016ef8 <flatcc_builder_get_direct_buffer@@Base>:
   16ef8:	ldr	r3, [r0, #184]	; 0xb8
   16efc:	cmp	r3, #0
   16f00:	bne	16f1c <flatcc_builder_get_direct_buffer@@Base+0x24>
   16f04:	cmp	r1, #0
   16f08:	movne	r3, #0
   16f0c:	movne	r0, r3
   16f10:	moveq	r0, r1
   16f14:	strne	r3, [r1]
   16f18:	bx	lr
   16f1c:	ldrd	r2, [r0, #188]	; 0xbc
   16f20:	cmp	r2, r3
   16f24:	bne	16f04 <flatcc_builder_get_direct_buffer@@Base+0xc>
   16f28:	cmp	r1, #0
   16f2c:	ldrne	r3, [r0, #212]	; 0xd4
   16f30:	ldr	r0, [r0, #196]	; 0xc4
   16f34:	strne	r3, [r1]
   16f38:	bx	lr

00016f3c <flatcc_builder_copy_buffer@@Base>:
   16f3c:	ldr	r3, [r0, #184]	; 0xb8
   16f40:	cmp	r3, #0
   16f44:	beq	16f6c <flatcc_builder_copy_buffer@@Base+0x30>
   16f48:	add	r0, r0, #188	; 0xbc
   16f4c:	str	r4, [sp, #-8]!
   16f50:	str	lr, [sp, #4]
   16f54:	bl	176d0 <flatcc_emitter_copy_buffer@@Base>
   16f58:	cmp	r0, #0
   16f5c:	beq	16f74 <flatcc_builder_copy_buffer@@Base+0x38>
   16f60:	ldr	r4, [sp]
   16f64:	add	sp, sp, #4
   16f68:	pop	{pc}		; (ldr pc, [sp], #4)
   16f6c:	mov	r0, r3
   16f70:	bx	lr
   16f74:	ldr	r3, [pc, #32]	; 16f9c <flatcc_builder_copy_buffer@@Base+0x60>
   16f78:	movw	r2, #1926	; 0x786
   16f7c:	ldr	r1, [pc, #28]	; 16fa0 <flatcc_builder_copy_buffer@@Base+0x64>
   16f80:	ldr	r0, [pc, #28]	; 16fa4 <flatcc_builder_copy_buffer@@Base+0x68>
   16f84:	add	r3, pc, r3
   16f88:	add	r3, r3, #1296	; 0x510
   16f8c:	add	r1, pc, r1
   16f90:	add	r3, r3, #4
   16f94:	add	r0, pc, r0
   16f98:	bl	12044 <__assert_fail@plt>
   16f9c:	strdeq	r0, [r0], -ip
   16fa0:	andeq	r1, r0, r4, asr #8
   16fa4:	andeq	r1, r0, r8, asr r8

00016fa8 <flatcc_builder_finalize_buffer@@Base>:
   16fa8:	strd	r4, [sp, #-16]!
   16fac:	mov	r5, r1
   16fb0:	str	r6, [sp, #8]
   16fb4:	mov	r6, r0
   16fb8:	str	lr, [sp, #12]
   16fbc:	bl	16e54 <flatcc_builder_get_buffer_size@@Base>
   16fc0:	cmp	r5, #0
   16fc4:	mov	r4, r0
   16fc8:	strne	r0, [r5]
   16fcc:	bl	11fd8 <malloc@plt>
   16fd0:	subs	r5, r0, #0
   16fd4:	beq	17004 <flatcc_builder_finalize_buffer@@Base+0x5c>
   16fd8:	mov	r2, r4
   16fdc:	mov	r0, r6
   16fe0:	mov	r1, r5
   16fe4:	bl	16f3c <flatcc_builder_copy_buffer@@Base>
   16fe8:	cmp	r0, #0
   16fec:	beq	17028 <flatcc_builder_finalize_buffer@@Base+0x80>
   16ff0:	mov	r0, r5
   16ff4:	ldrd	r4, [sp]
   16ff8:	ldr	r6, [sp, #8]
   16ffc:	add	sp, sp, #12
   17000:	pop	{pc}		; (ldr pc, [sp], #4)
   17004:	ldr	r3, [pc, #64]	; 1704c <flatcc_builder_finalize_buffer@@Base+0xa4>
   17008:	movw	r2, #1944	; 0x798
   1700c:	ldr	r1, [pc, #60]	; 17050 <flatcc_builder_finalize_buffer@@Base+0xa8>
   17010:	ldr	r0, [pc, #60]	; 17054 <flatcc_builder_finalize_buffer@@Base+0xac>
   17014:	add	r3, pc, r3
   17018:	add	r3, r3, #1328	; 0x530
   1701c:	add	r1, pc, r1
   17020:	add	r0, pc, r0
   17024:	bl	12044 <__assert_fail@plt>
   17028:	ldr	r3, [pc, #40]	; 17058 <flatcc_builder_finalize_buffer@@Base+0xb0>
   1702c:	movw	r2, #1948	; 0x79c
   17030:	ldr	r1, [pc, #36]	; 1705c <flatcc_builder_finalize_buffer@@Base+0xb4>
   17034:	ldr	r0, [pc, #36]	; 17060 <flatcc_builder_finalize_buffer@@Base+0xb8>
   17038:	add	r3, pc, r3
   1703c:	add	r3, r3, #1328	; 0x530
   17040:	add	r1, pc, r1
   17044:	add	r0, pc, r0
   17048:	bl	12044 <__assert_fail@plt>
   1704c:	andeq	r0, r0, ip, ror #24
   17050:			; <UNDEFINED> instruction: 0x000013b4
   17054:	andeq	r1, r0, r8, lsr r4
   17058:	andeq	r0, r0, r8, asr #24
   1705c:	muleq	r0, r0, r3
   17060:	andeq	r1, r0, r4, lsl r4

00017064 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17064:	strd	r4, [sp, #-20]!	; 0xffffffec
   17068:	mov	r5, r1
   1706c:	strd	r6, [sp, #8]
   17070:	mov	r6, r0
   17074:	str	lr, [sp, #16]
   17078:	sub	sp, sp, #12
   1707c:	bl	16e54 <flatcc_builder_get_buffer_size@@Base>
   17080:	cmp	r5, #0
   17084:	mov	r4, r0
   17088:	sub	r4, r4, #1
   1708c:	strne	r0, [r5]
   17090:	mov	r0, r6
   17094:	bl	16e18 <flatcc_builder_get_buffer_alignment@@Base>
   17098:	rsb	r3, r0, #0
   1709c:	add	r4, r4, r0
   170a0:	cmp	r0, #4
   170a4:	and	r4, r4, r3
   170a8:	mov	r3, #0
   170ac:	movcs	r1, r0
   170b0:	movcc	r1, #4
   170b4:	mov	r2, r4
   170b8:	add	r0, sp, #4
   170bc:	str	r3, [sp, #4]
   170c0:	bl	12008 <posix_memalign@plt>
   170c4:	cmp	r0, #0
   170c8:	beq	170f4 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   170cc:	ldr	r0, [sp, #4]
   170d0:	cmp	r0, #0
   170d4:	beq	170dc <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   170d8:	bl	11f84 <free@plt>
   170dc:	cmp	r5, #0
   170e0:	movne	r3, #0
   170e4:	moveq	r7, r5
   170e8:	movne	r7, r3
   170ec:	strne	r3, [r5]
   170f0:	b	17118 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   170f4:	ldr	r7, [sp, #4]
   170f8:	cmp	r7, #0
   170fc:	beq	170dc <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17100:	mov	r2, r4
   17104:	mov	r0, r6
   17108:	mov	r1, r7
   1710c:	bl	16f3c <flatcc_builder_copy_buffer@@Base>
   17110:	cmp	r0, #0
   17114:	beq	17130 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   17118:	mov	r0, r7
   1711c:	add	sp, sp, #12
   17120:	ldrd	r4, [sp]
   17124:	ldrd	r6, [sp, #8]
   17128:	add	sp, sp, #16
   1712c:	pop	{pc}		; (ldr pc, [sp], #4)
   17130:	mov	r0, r7
   17134:	b	170d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00017138 <flatcc_builder_aligned_alloc@@Base>:
   17138:	cmp	r0, #4
   1713c:	str	r4, [sp, #-8]!
   17140:	mov	r4, #0
   17144:	str	lr, [sp, #4]
   17148:	sub	sp, sp, #8
   1714c:	mov	r2, r1
   17150:	movcs	r1, r0
   17154:	movcc	r1, #4
   17158:	add	r0, sp, #4
   1715c:	str	r4, [sp, #4]
   17160:	bl	12008 <posix_memalign@plt>
   17164:	cmp	r0, r4
   17168:	ldr	r0, [sp, #4]
   1716c:	beq	17180 <flatcc_builder_aligned_alloc@@Base+0x48>
   17170:	cmp	r0, #0
   17174:	beq	17180 <flatcc_builder_aligned_alloc@@Base+0x48>
   17178:	bl	11f84 <free@plt>
   1717c:	mov	r0, r4
   17180:	add	sp, sp, #8
   17184:	ldr	r4, [sp]
   17188:	add	sp, sp, #4
   1718c:	pop	{pc}		; (ldr pc, [sp], #4)

00017190 <flatcc_builder_aligned_free@@Base>:
   17190:	b	11f84 <free@plt>

00017194 <flatcc_builder_get_emit_context@@Base>:
   17194:	ldr	r0, [r0, #36]	; 0x24
   17198:	bx	lr

0001719c <flatcc_emitter_recycle_page@@Base>:
   1719c:	ldr	r3, [r0]
   171a0:	cmp	r3, r1
   171a4:	beq	171e8 <flatcc_emitter_recycle_page@@Base+0x4c>
   171a8:	ldr	r2, [r0, #4]
   171ac:	cmp	r2, r1
   171b0:	beq	171e8 <flatcc_emitter_recycle_page@@Base+0x4c>
   171b4:	push	{lr}		; (str lr, [sp, #-4]!)
   171b8:	mov	r0, #0
   171bc:	ldr	lr, [r1, #2944]	; 0xb80
   171c0:	ldr	ip, [r1, #2948]	; 0xb84
   171c4:	str	ip, [lr, #2948]	; 0xb84
   171c8:	ldr	r2, [r3, #2948]	; 0xb84
   171cc:	str	lr, [ip, #2944]	; 0xb80
   171d0:	str	r3, [r1, #2944]	; 0xb80
   171d4:	str	r2, [r1, #2948]	; 0xb84
   171d8:	str	r1, [r2, #2944]	; 0xb80
   171dc:	ldr	r3, [r1, #2944]	; 0xb80
   171e0:	str	r1, [r3, #2948]	; 0xb84
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)
   171e8:	mvn	r0, #0
   171ec:	bx	lr

000171f0 <flatcc_emitter_reset@@Base>:
   171f0:	ldr	r2, [r0]
   171f4:	cmp	r2, #0
   171f8:	bxeq	lr
   171fc:	strd	r4, [sp, #-16]!
   17200:	movw	ip, #64064	; 0xfa40
   17204:	movt	ip, #65535	; 0xffff
   17208:	ldr	r1, [r0, #24]
   1720c:	add	r4, r2, #1472	; 0x5c0
   17210:	ldr	r3, [r0, #32]
   17214:	ldr	r5, [r0, #28]
   17218:	str	r6, [sp, #8]
   1721c:	str	lr, [sp, #12]
   17220:	mov	lr, #1472	; 0x5c0
   17224:	cmp	r3, #0
   17228:	stmib	r0, {r2, r4}
   1722c:	moveq	r3, r1
   17230:	lsr	r1, r1, #2
   17234:	str	lr, [r0, #12]
   17238:	add	r3, r3, r3, lsl #1
   1723c:	str	r4, [r0, #16]
   17240:	str	lr, [r0, #20]
   17244:	add	r3, r1, r3, lsr #2
   17248:	str	ip, [r2, #2952]	; 0xb88
   1724c:	mov	ip, #0
   17250:	cmp	r5, r3, lsl #1
   17254:	str	ip, [r0, #24]
   17258:	str	r3, [r0, #32]
   1725c:	bls	172b4 <flatcc_emitter_reset@@Base+0xc4>
   17260:	ldr	r3, [r2, #2944]	; 0xb80
   17264:	mov	r4, r0
   17268:	cmp	r2, r3
   1726c:	bne	17284 <flatcc_emitter_reset@@Base+0x94>
   17270:	b	172b4 <flatcc_emitter_reset@@Base+0xc4>
   17274:	ldm	r4, {r1, r2}
   17278:	ldr	r3, [r2, #2944]	; 0xb80
   1727c:	cmp	r3, r1
   17280:	beq	172b4 <flatcc_emitter_reset@@Base+0xc4>
   17284:	ldr	r1, [r3, #2944]	; 0xb80
   17288:	mov	r0, r3
   1728c:	str	r1, [r2, #2944]	; 0xb80
   17290:	ldr	r3, [r3, #2944]	; 0xb80
   17294:	str	r2, [r3, #2948]	; 0xb84
   17298:	bl	11f84 <free@plt>
   1729c:	ldr	r3, [r4, #28]
   172a0:	ldr	r2, [r4, #32]
   172a4:	sub	r3, r3, #2944	; 0xb80
   172a8:	cmp	r3, r2, lsl #1
   172ac:	str	r3, [r4, #28]
   172b0:	bhi	17274 <flatcc_emitter_reset@@Base+0x84>
   172b4:	ldrd	r4, [sp]
   172b8:	ldr	r6, [sp, #8]
   172bc:	add	sp, sp, #12
   172c0:	pop	{pc}		; (ldr pc, [sp], #4)

000172c4 <flatcc_emitter_clear@@Base>:
   172c4:	ldr	r3, [r0]
   172c8:	cmp	r3, #0
   172cc:	bxeq	lr
   172d0:	mov	r1, #0
   172d4:	strd	r4, [sp, #-16]!
   172d8:	mov	r5, r0
   172dc:	ldr	r2, [r3, #2948]	; 0xb84
   172e0:	str	r6, [sp, #8]
   172e4:	str	lr, [sp, #12]
   172e8:	str	r1, [r2, #2944]	; 0xb80
   172ec:	ldr	r4, [r3, #2944]	; 0xb80
   172f0:	cmp	r4, r1
   172f4:	bne	17300 <flatcc_emitter_clear@@Base+0x3c>
   172f8:	b	1733c <flatcc_emitter_clear@@Base+0x78>
   172fc:	mov	r4, r3
   17300:	ldr	r0, [r4, #2948]	; 0xb84
   17304:	bl	11f84 <free@plt>
   17308:	ldr	r3, [r4, #2944]	; 0xb80
   1730c:	cmp	r3, #0
   17310:	bne	172fc <flatcc_emitter_clear@@Base+0x38>
   17314:	mov	r0, r4
   17318:	bl	11f84 <free@plt>
   1731c:	mov	r0, r5
   17320:	mov	r2, #36	; 0x24
   17324:	ldrd	r4, [sp]
   17328:	mov	r1, #0
   1732c:	ldr	r6, [sp, #8]
   17330:	ldr	lr, [sp, #12]
   17334:	add	sp, sp, #16
   17338:	b	12014 <memset@plt>
   1733c:	mov	r4, r3
   17340:	b	17314 <flatcc_emitter_clear@@Base+0x50>

00017344 <flatcc_emitter@@Base>:
   17344:	cmp	r3, #0
   17348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1734c:	mov	r4, r0
   17350:	ldr	r3, [r0, #24]
   17354:	strd	r6, [sp, #8]
   17358:	strd	r8, [sp, #16]
   1735c:	sub	r8, r2, #1
   17360:	strd	sl, [sp, #24]
   17364:	str	lr, [sp, #32]
   17368:	sub	sp, sp, #12
   1736c:	ldr	r0, [sp, #48]	; 0x30
   17370:	add	r3, r3, r0
   17374:	str	r3, [r4, #24]
   17378:	blt	17548 <flatcc_emitter@@Base+0x204>
   1737c:	ldr	r3, [r4, #20]
   17380:	cmp	r3, r0
   17384:	bcs	17424 <flatcc_emitter@@Base+0xe0>
   17388:	cmp	r2, #0
   1738c:	beq	17404 <flatcc_emitter@@Base+0xc0>
   17390:	mov	r8, r2
   17394:	add	r5, r1, #8
   17398:	movw	r2, #64064	; 0xfa40
   1739c:	movt	r2, #65535	; 0xffff
   173a0:	str	r2, [sp, #4]
   173a4:	ldmdb	r5, {r7, fp}
   173a8:	cmp	fp, #0
   173ac:	beq	173f8 <flatcc_emitter@@Base+0xb4>
   173b0:	mov	r9, #1472	; 0x5c0
   173b4:	cmp	fp, r3
   173b8:	mov	r6, r3
   173bc:	bls	174b4 <flatcc_emitter@@Base+0x170>
   173c0:	cmp	r3, #0
   173c4:	subne	fp, fp, r3
   173c8:	beq	1746c <flatcc_emitter@@Base+0x128>
   173cc:	mov	r2, r6
   173d0:	mov	r1, r7
   173d4:	ldr	r0, [r4, #16]
   173d8:	bl	11f90 <memcpy@plt>
   173dc:	ldrd	r2, [r4, #16]
   173e0:	cmp	fp, #0
   173e4:	add	r7, r7, r6
   173e8:	add	r2, r2, r6
   173ec:	sub	r3, r3, r6
   173f0:	strd	r2, [r4, #16]
   173f4:	bne	173b4 <flatcc_emitter@@Base+0x70>
   173f8:	subs	r8, r8, #1
   173fc:	add	r5, r5, #8
   17400:	bne	173a4 <flatcc_emitter@@Base+0x60>
   17404:	mov	r0, #0
   17408:	add	sp, sp, #12
   1740c:	ldrd	r4, [sp]
   17410:	ldrd	r6, [sp, #8]
   17414:	ldrd	r8, [sp, #16]
   17418:	ldrd	sl, [sp, #24]
   1741c:	add	sp, sp, #32
   17420:	pop	{pc}		; (ldr pc, [sp], #4)
   17424:	ldr	r7, [r4, #16]
   17428:	sub	r3, r3, r0
   1742c:	str	r3, [r4, #20]
   17430:	add	r0, r7, r0
   17434:	str	r0, [r4, #16]
   17438:	cmp	r2, #0
   1743c:	addne	r4, r1, #8
   17440:	beq	17404 <flatcc_emitter@@Base+0xc0>
   17444:	mov	r0, r7
   17448:	ldmdb	r4, {r1, r2}
   1744c:	sub	r8, r8, #1
   17450:	bl	11f90 <memcpy@plt>
   17454:	ldr	r3, [r4, #-4]
   17458:	cmn	r8, #1
   1745c:	add	r4, r4, #8
   17460:	add	r7, r7, r3
   17464:	bne	17444 <flatcc_emitter@@Base+0x100>
   17468:	b	17404 <flatcc_emitter@@Base+0xc0>
   1746c:	ldr	r6, [r4, #4]
   17470:	cmp	r6, #0
   17474:	beq	174f4 <flatcc_emitter@@Base+0x1b0>
   17478:	ldr	sl, [r4]
   1747c:	ldr	r0, [r6, #2944]	; 0xb80
   17480:	cmp	r0, sl
   17484:	beq	174c0 <flatcc_emitter@@Base+0x17c>
   17488:	str	r0, [r4, #4]
   1748c:	ldr	r2, [r0, #2948]	; 0xb84
   17490:	mov	r3, #2944	; 0xb80
   17494:	cmp	fp, r3
   17498:	mov	r6, r3
   1749c:	ldr	r2, [r2, #2952]	; 0xb88
   174a0:	str	r0, [r4, #16]
   174a4:	str	r3, [r4, #20]
   174a8:	add	r2, r2, r3
   174ac:	str	r2, [r0, #2952]	; 0xb88
   174b0:	bhi	173c0 <flatcc_emitter@@Base+0x7c>
   174b4:	mov	r6, fp
   174b8:	mov	fp, #0
   174bc:	b	173cc <flatcc_emitter@@Base+0x88>
   174c0:	movw	r0, #2956	; 0xb8c
   174c4:	bl	11fd8 <malloc@plt>
   174c8:	cmp	r0, #0
   174cc:	beq	17540 <flatcc_emitter@@Base+0x1fc>
   174d0:	ldr	r2, [r4, #28]
   174d4:	str	sl, [r0, #2944]	; 0xb80
   174d8:	str	r6, [r0, #2948]	; 0xb84
   174dc:	add	r2, r2, #2944	; 0xb80
   174e0:	str	r2, [r4, #28]
   174e4:	str	r0, [sl, #2948]	; 0xb84
   174e8:	str	r0, [r6, #2944]	; 0xb80
   174ec:	str	r0, [r4, #4]
   174f0:	b	1748c <flatcc_emitter@@Base+0x148>
   174f4:	movw	r0, #2956	; 0xb8c
   174f8:	bl	11fd8 <malloc@plt>
   174fc:	cmp	r0, #0
   17500:	beq	17540 <flatcc_emitter@@Base+0x1fc>
   17504:	ldr	r2, [r4, #28]
   17508:	add	r1, r0, #1472	; 0x5c0
   1750c:	mov	r3, #1472	; 0x5c0
   17510:	str	r0, [r4]
   17514:	strd	r0, [r4, #4]
   17518:	str	r9, [r4, #12]
   1751c:	str	r1, [r4, #16]
   17520:	add	r2, r2, #2944	; 0xb80
   17524:	str	r9, [r4, #20]
   17528:	str	r0, [r0, #2944]	; 0xb80
   1752c:	str	r2, [r4, #28]
   17530:	ldr	r2, [sp, #4]
   17534:	str	r0, [r0, #2948]	; 0xb84
   17538:	str	r2, [r0, #2952]	; 0xb88
   1753c:	b	173b4 <flatcc_emitter@@Base+0x70>
   17540:	mvn	r0, #0
   17544:	b	17408 <flatcc_emitter@@Base+0xc4>
   17548:	ldr	r3, [r4, #12]
   1754c:	cmp	r3, r0
   17550:	bcs	176b8 <flatcc_emitter@@Base+0x374>
   17554:	add	r5, r1, r2, lsl #3
   17558:	movw	r3, #64064	; 0xfa40
   1755c:	movt	r3, #65535	; 0xffff
   17560:	str	r3, [sp, #4]
   17564:	cmn	r8, #1
   17568:	beq	17404 <flatcc_emitter@@Base+0xc0>
   1756c:	ldr	r7, [r5, #-8]
   17570:	ldr	r6, [r5, #-4]
   17574:	cmp	r6, #0
   17578:	add	r7, r7, r6
   1757c:	beq	175cc <flatcc_emitter@@Base+0x288>
   17580:	mov	r9, #1472	; 0x5c0
   17584:	ldr	r2, [r4, #12]
   17588:	cmp	r2, r6
   1758c:	bcs	17630 <flatcc_emitter@@Base+0x2ec>
   17590:	cmp	r2, #0
   17594:	beq	175d8 <flatcc_emitter@@Base+0x294>
   17598:	sub	r6, r6, r2
   1759c:	mov	r1, #0
   175a0:	ldr	r3, [r4, #8]
   175a4:	rsb	r0, r2, #0
   175a8:	add	r7, r7, r0
   175ac:	str	r1, [r4, #12]
   175b0:	mov	r1, r7
   175b4:	add	r3, r3, r0
   175b8:	mov	r0, r3
   175bc:	str	r3, [r4, #8]
   175c0:	bl	11f90 <memcpy@plt>
   175c4:	cmp	r6, #0
   175c8:	bne	17584 <flatcc_emitter@@Base+0x240>
   175cc:	sub	r5, r5, #8
   175d0:	sub	r8, r8, #1
   175d4:	b	17564 <flatcc_emitter@@Base+0x220>
   175d8:	ldr	fp, [r4]
   175dc:	cmp	fp, #0
   175e0:	beq	17674 <flatcc_emitter@@Base+0x330>
   175e4:	ldr	sl, [r4, #4]
   175e8:	ldr	r0, [fp, #2948]	; 0xb84
   175ec:	cmp	r0, sl
   175f0:	beq	17640 <flatcc_emitter@@Base+0x2fc>
   175f4:	ldr	r3, [fp, #2952]	; 0xb88
   175f8:	sub	r3, r3, #2944	; 0xb80
   175fc:	str	r3, [r0, #2952]	; 0xb88
   17600:	str	r0, [r4]
   17604:	ldr	r3, [r0, #2944]	; 0xb80
   17608:	mov	r2, #2944	; 0xb80
   1760c:	add	r1, r0, #2944	; 0xb80
   17610:	ldr	r3, [r3, #2952]	; 0xb88
   17614:	str	r1, [r4, #8]
   17618:	str	r2, [r4, #12]
   1761c:	sub	r3, r3, #2944	; 0xb80
   17620:	str	r3, [r0, #2952]	; 0xb88
   17624:	ldr	r2, [r4, #12]
   17628:	cmp	r2, r6
   1762c:	bcc	17590 <flatcc_emitter@@Base+0x24c>
   17630:	sub	r1, r2, r6
   17634:	mov	r2, r6
   17638:	mov	r6, #0
   1763c:	b	175a0 <flatcc_emitter@@Base+0x25c>
   17640:	movw	r0, #2956	; 0xb8c
   17644:	bl	11fd8 <malloc@plt>
   17648:	cmp	r0, #0
   1764c:	beq	17540 <flatcc_emitter@@Base+0x1fc>
   17650:	ldr	r2, [r4, #28]
   17654:	str	fp, [r0, #2944]	; 0xb80
   17658:	str	sl, [r0, #2948]	; 0xb84
   1765c:	add	r2, r2, #2944	; 0xb80
   17660:	str	r2, [r4, #28]
   17664:	str	r0, [fp, #2948]	; 0xb84
   17668:	str	r0, [sl, #2944]	; 0xb80
   1766c:	str	r0, [r4]
   17670:	b	17604 <flatcc_emitter@@Base+0x2c0>
   17674:	movw	r0, #2956	; 0xb8c
   17678:	bl	11fd8 <malloc@plt>
   1767c:	cmp	r0, #0
   17680:	beq	17540 <flatcc_emitter@@Base+0x1fc>
   17684:	ldr	r3, [r4, #28]
   17688:	add	r2, r0, #1472	; 0x5c0
   1768c:	str	r0, [r4]
   17690:	stmib	r4, {r0, r2, r9}
   17694:	add	r3, r3, #2944	; 0xb80
   17698:	str	r2, [r4, #16]
   1769c:	str	r9, [r4, #20]
   176a0:	str	r3, [r4, #28]
   176a4:	ldr	r3, [sp, #4]
   176a8:	str	r0, [r0, #2944]	; 0xb80
   176ac:	str	r0, [r0, #2948]	; 0xb84
   176b0:	str	r3, [r0, #2952]	; 0xb88
   176b4:	b	17584 <flatcc_emitter@@Base+0x240>
   176b8:	ldr	r7, [r4, #8]
   176bc:	sub	r3, r3, r0
   176c0:	str	r3, [r4, #12]
   176c4:	sub	r7, r7, r0
   176c8:	str	r7, [r4, #8]
   176cc:	b	17438 <flatcc_emitter@@Base+0xf4>

000176d0 <flatcc_emitter_copy_buffer@@Base>:
   176d0:	ldr	r3, [r0, #24]
   176d4:	strd	r4, [sp, #-16]!
   176d8:	str	r6, [sp, #8]
   176dc:	str	lr, [sp, #12]
   176e0:	cmp	r3, r2
   176e4:	movhi	r5, #0
   176e8:	bhi	17768 <flatcc_emitter_copy_buffer@@Base+0x98>
   176ec:	ldr	r5, [r0]
   176f0:	mov	r6, r0
   176f4:	cmp	r5, #0
   176f8:	beq	17768 <flatcc_emitter_copy_buffer@@Base+0x98>
   176fc:	ldr	r2, [r6, #4]
   17700:	mov	r0, r1
   17704:	ldr	r1, [r6, #8]
   17708:	cmp	r5, r2
   1770c:	beq	1777c <flatcc_emitter_copy_buffer@@Base+0xac>
   17710:	ldr	r2, [r6, #12]
   17714:	rsb	r2, r2, #2944	; 0xb80
   17718:	add	r5, r0, r2
   1771c:	bl	11f90 <memcpy@plt>
   17720:	ldrd	r2, [r6]
   17724:	ldr	r4, [r2, #2944]	; 0xb80
   17728:	cmp	r4, r3
   1772c:	beq	17754 <flatcc_emitter_copy_buffer@@Base+0x84>
   17730:	mov	r2, #2944	; 0xb80
   17734:	mov	r1, r4
   17738:	mov	r0, r5
   1773c:	add	r5, r5, r2
   17740:	bl	11f90 <memcpy@plt>
   17744:	ldr	r3, [r6, #4]
   17748:	ldr	r4, [r4, #2944]	; 0xb80
   1774c:	cmp	r3, r4
   17750:	bne	17730 <flatcc_emitter_copy_buffer@@Base+0x60>
   17754:	ldr	r2, [r6, #20]
   17758:	mov	r1, r4
   1775c:	mov	r0, r5
   17760:	rsb	r2, r2, #2944	; 0xb80
   17764:	bl	11f90 <memcpy@plt>
   17768:	mov	r0, r5
   1776c:	ldrd	r4, [sp]
   17770:	ldr	r6, [sp, #8]
   17774:	add	sp, sp, #12
   17778:	pop	{pc}		; (ldr pc, [sp], #4)
   1777c:	mov	r2, r3
   17780:	mov	r5, r0
   17784:	bl	11f90 <memcpy@plt>
   17788:	b	17768 <flatcc_emitter_copy_buffer@@Base+0x98>

0001778c <__libc_csu_init@@Base>:
   1778c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17790:	mov	r7, r0
   17794:	ldr	r6, [pc, #72]	; 177e4 <__libc_csu_init@@Base+0x58>
   17798:	ldr	r5, [pc, #72]	; 177e8 <__libc_csu_init@@Base+0x5c>
   1779c:	add	r6, pc, r6
   177a0:	add	r5, pc, r5
   177a4:	sub	r6, r6, r5
   177a8:	mov	r8, r1
   177ac:	mov	r9, r2
   177b0:	bl	11f40 <strcmp@plt-0x20>
   177b4:	asrs	r6, r6, #2
   177b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   177bc:	mov	r4, #0
   177c0:	add	r4, r4, #1
   177c4:	ldr	r3, [r5], #4
   177c8:	mov	r2, r9
   177cc:	mov	r1, r8
   177d0:	mov	r0, r7
   177d4:	blx	r3
   177d8:	cmp	r6, r4
   177dc:	bne	177c0 <__libc_csu_init@@Base+0x34>
   177e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177e4:	andeq	r1, r1, r0, ror r7
   177e8:	andeq	r1, r1, r8, ror #14

000177ec <__libc_csu_fini@@Base>:
   177ec:	bx	lr

Disassembly of section .fini:

000177f0 <.fini>:
   177f0:	push	{r3, lr}
   177f4:	pop	{r3, pc}
