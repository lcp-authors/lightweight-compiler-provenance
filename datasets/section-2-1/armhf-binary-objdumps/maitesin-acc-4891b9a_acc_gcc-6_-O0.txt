
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001188c <.init>:
   1188c:	push	{r3, lr}
   11890:	bl	11aa4 <_start@@Base+0x3c>
   11894:	pop	{r3, pc}

Disassembly of section .plt:

00011898 <fdopen@plt-0x14>:
   11898:	push	{lr}		; (str lr, [sp, #-4]!)
   1189c:	ldr	lr, [pc, #4]	; 118a8 <fdopen@plt-0x4>
   118a0:	add	lr, pc, lr
   118a4:	ldr	pc, [lr, #8]!
   118a8:	andeq	sl, r1, r8, asr r7

000118ac <fdopen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #106496	; 0x1a000
   118b4:	ldr	pc, [ip, #1880]!	; 0x758

000118b8 <raise@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #106496	; 0x1a000
   118c0:	ldr	pc, [ip, #1872]!	; 0x750

000118c4 <setbuf@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #106496	; 0x1a000
   118cc:	ldr	pc, [ip, #1864]!	; 0x748

000118d0 <fopen@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #106496	; 0x1a000
   118d8:	ldr	pc, [ip, #1856]!	; 0x740

000118dc <free@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #106496	; 0x1a000
   118e4:	ldr	pc, [ip, #1848]!	; 0x738

000118e8 <memcpy@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #106496	; 0x1a000
   118f0:	ldr	pc, [ip, #1840]!	; 0x730

000118f4 <ftell@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #106496	; 0x1a000
   118fc:	ldr	pc, [ip, #1832]!	; 0x728

00011900 <fwrite@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #106496	; 0x1a000
   11908:	ldr	pc, [ip, #1824]!	; 0x720

0001190c <strcpy@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #106496	; 0x1a000
   11914:	ldr	pc, [ip, #1816]!	; 0x718

00011918 <fread@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #106496	; 0x1a000
   11920:	ldr	pc, [ip, #1808]!	; 0x710

00011924 <getenv@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #106496	; 0x1a000
   1192c:	ldr	pc, [ip, #1800]!	; 0x708

00011930 <malloc@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #106496	; 0x1a000
   11938:	ldr	pc, [ip, #1792]!	; 0x700

0001193c <__libc_start_main@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #106496	; 0x1a000
   11944:	ldr	pc, [ip, #1784]!	; 0x6f8

00011948 <__fxstat@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #106496	; 0x1a000
   11950:	ldr	pc, [ip, #1776]!	; 0x6f0

00011954 <__gmon_start__@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #106496	; 0x1a000
   1195c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011960 <open@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #106496	; 0x1a000
   11968:	ldr	pc, [ip, #1760]!	; 0x6e0

0001196c <getpid@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #106496	; 0x1a000
   11974:	ldr	pc, [ip, #1752]!	; 0x6d8

00011978 <exit@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #106496	; 0x1a000
   11980:	ldr	pc, [ip, #1744]!	; 0x6d0

00011984 <strlen@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #106496	; 0x1a000
   1198c:	ldr	pc, [ip, #1736]!	; 0x6c8

00011990 <getopt@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #106496	; 0x1a000
   11998:	ldr	pc, [ip, #1728]!	; 0x6c0

0001199c <fprintf@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #106496	; 0x1a000
   119a4:	ldr	pc, [ip, #1720]!	; 0x6b8

000119a8 <__errno_location@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #106496	; 0x1a000
   119b0:	ldr	pc, [ip, #1712]!	; 0x6b0

000119b4 <__cxa_atexit@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #106496	; 0x1a000
   119bc:	ldr	pc, [ip, #1704]!	; 0x6a8

000119c0 <mkdir@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #106496	; 0x1a000
   119c8:	ldr	pc, [ip, #1696]!	; 0x6a0

000119cc <fcntl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #106496	; 0x1a000
   119d4:	ldr	pc, [ip, #1688]!	; 0x698

000119d8 <memset@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #106496	; 0x1a000
   119e0:	ldr	pc, [ip, #1680]!	; 0x690

000119e4 <strncpy@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #106496	; 0x1a000
   119ec:	ldr	pc, [ip, #1672]!	; 0x688

000119f0 <access@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #106496	; 0x1a000
   119f8:	ldr	pc, [ip, #1664]!	; 0x680

000119fc <fclose@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #106496	; 0x1a000
   11a04:	ldr	pc, [ip, #1656]!	; 0x678

00011a08 <strnlen@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #106496	; 0x1a000
   11a10:	ldr	pc, [ip, #1648]!	; 0x670

00011a14 <vfprintf@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #106496	; 0x1a000
   11a1c:	ldr	pc, [ip, #1640]!	; 0x668

00011a20 <fputc@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #106496	; 0x1a000
   11a28:	ldr	pc, [ip, #1632]!	; 0x660

00011a2c <atoi@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #106496	; 0x1a000
   11a34:	ldr	pc, [ip, #1624]!	; 0x658

00011a38 <fseek@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #106496	; 0x1a000
   11a40:	ldr	pc, [ip, #1616]!	; 0x650

00011a44 <strncmp@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #106496	; 0x1a000
   11a4c:	ldr	pc, [ip, #1608]!	; 0x648

00011a50 <abort@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #106496	; 0x1a000
   11a58:	ldr	pc, [ip, #1600]!	; 0x640

00011a5c <close@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #106496	; 0x1a000
   11a64:	ldr	pc, [ip, #1592]!	; 0x638

Disassembly of section .text:

00011a68 <_start@@Base>:
   11a68:	mov	fp, #0
   11a6c:	mov	lr, #0
   11a70:	pop	{r1}		; (ldr r1, [sp], #4)
   11a74:	mov	r2, sp
   11a78:	push	{r2}		; (str r2, [sp, #-4]!)
   11a7c:	push	{r0}		; (str r0, [sp, #-4]!)
   11a80:	ldr	ip, [pc, #16]	; 11a98 <_start@@Base+0x30>
   11a84:	push	{ip}		; (str ip, [sp, #-4]!)
   11a88:	ldr	r0, [pc, #12]	; 11a9c <_start@@Base+0x34>
   11a8c:	ldr	r3, [pc, #12]	; 11aa0 <_start@@Base+0x38>
   11a90:	bl	1193c <__libc_start_main@plt>
   11a94:	bl	11a50 <abort@plt>
   11a98:	andeq	fp, r1, r8, lsl #3
   11a9c:	andeq	r2, r1, r0, lsl #3
   11aa0:	andeq	fp, r1, r8, lsr #2
   11aa4:	ldr	r3, [pc, #20]	; 11ac0 <_start@@Base+0x58>
   11aa8:	ldr	r2, [pc, #20]	; 11ac4 <_start@@Base+0x5c>
   11aac:	add	r3, pc, r3
   11ab0:	ldr	r2, [r3, r2]
   11ab4:	cmp	r2, #0
   11ab8:	bxeq	lr
   11abc:	b	11954 <__gmon_start__@plt>
   11ac0:	andeq	sl, r1, ip, asr #10
   11ac4:	andeq	r0, r0, r8, lsr #1
   11ac8:	ldr	r3, [pc, #28]	; 11aec <_start@@Base+0x84>
   11acc:	ldr	r0, [pc, #28]	; 11af0 <_start@@Base+0x88>
   11ad0:	sub	r3, r3, r0
   11ad4:	cmp	r3, #6
   11ad8:	bxls	lr
   11adc:	ldr	r3, [pc, #16]	; 11af4 <_start@@Base+0x8c>
   11ae0:	cmp	r3, #0
   11ae4:	bxeq	lr
   11ae8:	bx	r3
   11aec:			; <UNDEFINED> instruction: 0x0002cab7
   11af0:			; <UNDEFINED> instruction: 0x0002cab4
   11af4:	andeq	r0, r0, r0
   11af8:	ldr	r1, [pc, #36]	; 11b24 <_start@@Base+0xbc>
   11afc:	ldr	r0, [pc, #36]	; 11b28 <_start@@Base+0xc0>
   11b00:	sub	r1, r1, r0
   11b04:	asr	r1, r1, #2
   11b08:	add	r1, r1, r1, lsr #31
   11b0c:	asrs	r1, r1, #1
   11b10:	bxeq	lr
   11b14:	ldr	r3, [pc, #16]	; 11b2c <_start@@Base+0xc4>
   11b18:	cmp	r3, #0
   11b1c:	bxeq	lr
   11b20:	bx	r3
   11b24:			; <UNDEFINED> instruction: 0x0002cab4
   11b28:			; <UNDEFINED> instruction: 0x0002cab4
   11b2c:	andeq	r0, r0, r0
   11b30:	push	{r4, lr}
   11b34:	ldr	r4, [pc, #24]	; 11b54 <_start@@Base+0xec>
   11b38:	ldrb	r3, [r4]
   11b3c:	cmp	r3, #0
   11b40:	popne	{r4, pc}
   11b44:	bl	11ac8 <_start@@Base+0x60>
   11b48:	mov	r3, #1
   11b4c:	strb	r3, [r4]
   11b50:	pop	{r4, pc}
   11b54:			; <UNDEFINED> instruction: 0x0002cab8
   11b58:	ldr	r0, [pc, #40]	; 11b88 <_start@@Base+0x120>
   11b5c:	ldr	r3, [r0]
   11b60:	cmp	r3, #0
   11b64:	bne	11b6c <_start@@Base+0x104>
   11b68:	b	11af8 <_start@@Base+0x90>
   11b6c:	ldr	r3, [pc, #24]	; 11b8c <_start@@Base+0x124>
   11b70:	cmp	r3, #0
   11b74:	beq	11b68 <_start@@Base+0x100>
   11b78:	push	{r4, lr}
   11b7c:	blx	r3
   11b80:	pop	{r4, lr}
   11b84:	b	11af8 <_start@@Base+0x90>
   11b88:	andeq	fp, r2, r4, lsl pc
   11b8c:	andeq	r0, r0, r0

00011b90 <load_file@@Base>:
   11b90:	push	{r4, fp, lr}
   11b94:	add	fp, sp, #8
   11b98:	sub	sp, sp, #28
   11b9c:	str	r0, [fp, #-32]	; 0xffffffe0
   11ba0:	ldr	r4, [pc, #828]	; 11ee4 <load_file@@Base+0x354>
   11ba4:	add	r4, pc, r4
   11ba8:	ldr	r3, [pc, #824]	; 11ee8 <load_file@@Base+0x358>
   11bac:	add	r3, pc, r3
   11bb0:	ldrd	r2, [r3]
   11bb4:	adds	r2, r2, #1
   11bb8:	adc	r3, r3, #0
   11bbc:	ldr	r1, [pc, #808]	; 11eec <load_file@@Base+0x35c>
   11bc0:	add	r1, pc, r1
   11bc4:	strd	r2, [r1]
   11bc8:	mov	r3, #0
   11bcc:	str	r3, [fp, #-16]
   11bd0:	ldr	r3, [pc, #792]	; 11ef0 <load_file@@Base+0x360>
   11bd4:	add	r3, pc, r3
   11bd8:	mov	r1, r3
   11bdc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11be0:	bl	118d0 <fopen@plt>
   11be4:	str	r0, [fp, #-20]	; 0xffffffec
   11be8:	ldr	r3, [pc, #772]	; 11ef4 <load_file@@Base+0x364>
   11bec:	add	r3, pc, r3
   11bf0:	ldrd	r2, [r3, #8]
   11bf4:	adds	r2, r2, #1
   11bf8:	adc	r3, r3, #0
   11bfc:	ldr	r1, [pc, #756]	; 11ef8 <load_file@@Base+0x368>
   11c00:	add	r1, pc, r1
   11c04:	strd	r2, [r1, #8]
   11c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c0c:	cmp	r3, #0
   11c10:	beq	11eb0 <load_file@@Base+0x320>
   11c14:	ldr	r3, [pc, #736]	; 11efc <load_file@@Base+0x36c>
   11c18:	add	r3, pc, r3
   11c1c:	ldrd	r2, [r3, #16]
   11c20:	adds	r2, r2, #1
   11c24:	adc	r3, r3, #0
   11c28:	ldr	r1, [pc, #720]	; 11f00 <load_file@@Base+0x370>
   11c2c:	add	r1, pc, r1
   11c30:	strd	r2, [r1, #16]
   11c34:	mov	r2, #2
   11c38:	mov	r1, #0
   11c3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c40:	bl	11a38 <fseek@plt>
   11c44:	ldr	r3, [pc, #696]	; 11f04 <load_file@@Base+0x374>
   11c48:	add	r3, pc, r3
   11c4c:	ldrd	r2, [r3, #24]
   11c50:	adds	r2, r2, #1
   11c54:	adc	r3, r3, #0
   11c58:	ldr	r1, [pc, #680]	; 11f08 <load_file@@Base+0x378>
   11c5c:	add	r1, pc, r1
   11c60:	strd	r2, [r1, #24]
   11c64:	cmp	r0, #0
   11c68:	bne	11ea8 <load_file@@Base+0x318>
   11c6c:	ldr	r3, [pc, #664]	; 11f0c <load_file@@Base+0x37c>
   11c70:	add	r3, pc, r3
   11c74:	ldrd	r2, [r3, #32]
   11c78:	adds	r2, r2, #1
   11c7c:	adc	r3, r3, #0
   11c80:	ldr	r1, [pc, #648]	; 11f10 <load_file@@Base+0x380>
   11c84:	add	r1, pc, r1
   11c88:	strd	r2, [r1, #32]
   11c8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11c90:	bl	118f4 <ftell@plt>
   11c94:	str	r0, [fp, #-24]	; 0xffffffe8
   11c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c9c:	cmn	r3, #1
   11ca0:	bne	11d0c <load_file@@Base+0x17c>
   11ca4:	ldr	r3, [pc, #616]	; 11f14 <load_file@@Base+0x384>
   11ca8:	add	r3, pc, r3
   11cac:	ldrd	r2, [r3, #40]	; 0x28
   11cb0:	adds	r2, r2, #1
   11cb4:	adc	r3, r3, #0
   11cb8:	ldr	r1, [pc, #600]	; 11f18 <load_file@@Base+0x388>
   11cbc:	add	r1, pc, r1
   11cc0:	strd	r2, [r1, #40]	; 0x28
   11cc4:	ldr	r3, [pc, #592]	; 11f1c <load_file@@Base+0x38c>
   11cc8:	ldr	r3, [r4, r3]
   11ccc:	ldr	r3, [r3]
   11cd0:	mov	r2, #51	; 0x33
   11cd4:	mov	r1, #1
   11cd8:	ldr	r0, [pc, #576]	; 11f20 <load_file@@Base+0x390>
   11cdc:	add	r0, pc, r0
   11ce0:	bl	11900 <fwrite@plt>
   11ce4:	ldr	r3, [pc, #568]	; 11f24 <load_file@@Base+0x394>
   11ce8:	add	r3, pc, r3
   11cec:	ldrd	r2, [r3, #56]	; 0x38
   11cf0:	adds	r2, r2, #1
   11cf4:	adc	r3, r3, #0
   11cf8:	ldr	r1, [pc, #552]	; 11f28 <load_file@@Base+0x398>
   11cfc:	add	r1, pc, r1
   11d00:	strd	r2, [r1, #56]	; 0x38
   11d04:	mov	r0, #1
   11d08:	bl	11978 <exit@plt>
   11d0c:	ldr	r3, [pc, #536]	; 11f2c <load_file@@Base+0x39c>
   11d10:	add	r3, pc, r3
   11d14:	ldrd	r2, [r3, #48]	; 0x30
   11d18:	adds	r2, r2, #1
   11d1c:	adc	r3, r3, #0
   11d20:	ldr	r1, [pc, #520]	; 11f30 <load_file@@Base+0x3a0>
   11d24:	add	r1, pc, r1
   11d28:	strd	r2, [r1, #48]	; 0x30
   11d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11d30:	add	r3, r3, #1
   11d34:	mov	r0, r3
   11d38:	bl	11930 <malloc@plt>
   11d3c:	mov	r3, r0
   11d40:	str	r3, [fp, #-16]
   11d44:	mov	r2, #0
   11d48:	mov	r1, #0
   11d4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11d50:	bl	11a38 <fseek@plt>
   11d54:	mov	r3, r0
   11d58:	cmp	r3, #0
   11d5c:	beq	11dc8 <load_file@@Base+0x238>
   11d60:	ldr	r3, [pc, #460]	; 11f34 <load_file@@Base+0x3a4>
   11d64:	add	r3, pc, r3
   11d68:	ldrd	r2, [r3, #64]	; 0x40
   11d6c:	adds	r2, r2, #1
   11d70:	adc	r3, r3, #0
   11d74:	ldr	r1, [pc, #444]	; 11f38 <load_file@@Base+0x3a8>
   11d78:	add	r1, pc, r1
   11d7c:	strd	r2, [r1, #64]	; 0x40
   11d80:	ldr	r3, [pc, #404]	; 11f1c <load_file@@Base+0x38c>
   11d84:	ldr	r3, [r4, r3]
   11d88:	ldr	r3, [r3]
   11d8c:	mov	r2, #49	; 0x31
   11d90:	mov	r1, #1
   11d94:	ldr	r0, [pc, #416]	; 11f3c <load_file@@Base+0x3ac>
   11d98:	add	r0, pc, r0
   11d9c:	bl	11900 <fwrite@plt>
   11da0:	ldr	r3, [pc, #408]	; 11f40 <load_file@@Base+0x3b0>
   11da4:	add	r3, pc, r3
   11da8:	ldrd	r2, [r3, #80]	; 0x50
   11dac:	adds	r2, r2, #1
   11db0:	adc	r3, r3, #0
   11db4:	ldr	r1, [pc, #392]	; 11f44 <load_file@@Base+0x3b4>
   11db8:	add	r1, pc, r1
   11dbc:	strd	r2, [r1, #80]	; 0x50
   11dc0:	mov	r0, #1
   11dc4:	bl	11978 <exit@plt>
   11dc8:	ldr	r3, [pc, #376]	; 11f48 <load_file@@Base+0x3b8>
   11dcc:	add	r3, pc, r3
   11dd0:	ldrd	r2, [r3, #72]	; 0x48
   11dd4:	adds	r2, r2, #1
   11dd8:	adc	r3, r3, #0
   11ddc:	ldr	r1, [pc, #360]	; 11f4c <load_file@@Base+0x3bc>
   11de0:	add	r1, pc, r1
   11de4:	strd	r2, [r1, #72]	; 0x48
   11de8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   11df0:	mov	r1, #1
   11df4:	ldr	r0, [fp, #-16]
   11df8:	bl	11918 <fread@plt>
   11dfc:	str	r0, [fp, #-28]	; 0xffffffe4
   11e00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11e04:	cmp	r3, #0
   11e08:	bne	11e74 <load_file@@Base+0x2e4>
   11e0c:	ldr	r3, [pc, #316]	; 11f50 <load_file@@Base+0x3c0>
   11e10:	add	r3, pc, r3
   11e14:	ldrd	r2, [r3, #88]	; 0x58
   11e18:	adds	r2, r2, #1
   11e1c:	adc	r3, r3, #0
   11e20:	ldr	r1, [pc, #300]	; 11f54 <load_file@@Base+0x3c4>
   11e24:	add	r1, pc, r1
   11e28:	strd	r2, [r1, #88]	; 0x58
   11e2c:	ldr	r3, [pc, #232]	; 11f1c <load_file@@Base+0x38c>
   11e30:	ldr	r3, [r4, r3]
   11e34:	ldr	r3, [r3]
   11e38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11e3c:	ldr	r1, [pc, #276]	; 11f58 <load_file@@Base+0x3c8>
   11e40:	add	r1, pc, r1
   11e44:	mov	r0, r3
   11e48:	bl	1199c <fprintf@plt>
   11e4c:	ldr	r3, [pc, #264]	; 11f5c <load_file@@Base+0x3cc>
   11e50:	add	r3, pc, r3
   11e54:	ldrd	r2, [r3, #96]	; 0x60
   11e58:	adds	r2, r2, #1
   11e5c:	adc	r3, r3, #0
   11e60:	ldr	r1, [pc, #248]	; 11f60 <load_file@@Base+0x3d0>
   11e64:	add	r1, pc, r1
   11e68:	strd	r2, [r1, #96]	; 0x60
   11e6c:	mov	r0, #1
   11e70:	bl	11978 <exit@plt>
   11e74:	ldr	r2, [fp, #-16]
   11e78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11e7c:	add	r3, r2, r3
   11e80:	mov	r2, #0
   11e84:	strb	r2, [r3]
   11e88:	ldr	r3, [pc, #212]	; 11f64 <load_file@@Base+0x3d4>
   11e8c:	add	r3, pc, r3
   11e90:	ldrd	r2, [r3, #104]	; 0x68
   11e94:	adds	r2, r2, #1
   11e98:	adc	r3, r3, #0
   11e9c:	ldr	r1, [pc, #196]	; 11f68 <load_file@@Base+0x3d8>
   11ea0:	add	r1, pc, r1
   11ea4:	strd	r2, [r1, #104]	; 0x68
   11ea8:	ldr	r0, [fp, #-20]	; 0xffffffec
   11eac:	bl	119fc <fclose@plt>
   11eb0:	ldr	r0, [fp, #-16]
   11eb4:	ldr	r3, [pc, #176]	; 11f6c <load_file@@Base+0x3dc>
   11eb8:	add	r3, pc, r3
   11ebc:	ldrd	r2, [r3, #112]	; 0x70
   11ec0:	adds	r2, r2, #1
   11ec4:	adc	r3, r3, #0
   11ec8:	ldr	r1, [pc, #160]	; 11f70 <load_file@@Base+0x3e0>
   11ecc:	add	r1, pc, r1
   11ed0:	strd	r2, [r1, #112]	; 0x70
   11ed4:	mov	r3, r0
   11ed8:	mov	r0, r3
   11edc:	sub	sp, fp, #8
   11ee0:	pop	{r4, fp, pc}
   11ee4:	andeq	sl, r1, r4, asr r4
   11ee8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11eec:	andeq	sl, r1, r0, lsl #31
   11ef0:	andeq	r9, r0, r4, ror #11
   11ef4:	andeq	sl, r1, r4, asr pc
   11ef8:	andeq	sl, r1, r0, asr #30
   11efc:	andeq	sl, r1, r8, lsr #30
   11f00:	andeq	sl, r1, r4, lsl pc
   11f04:	strdeq	sl, [r1], -r8
   11f08:	andeq	sl, r1, r4, ror #29
   11f0c:	ldrdeq	sl, [r1], -r0
   11f10:			; <UNDEFINED> instruction: 0x0001aebc
   11f14:	muleq	r1, r8, lr
   11f18:	andeq	sl, r1, r4, lsl #29
   11f1c:	andeq	r0, r0, r4, lsr #1
   11f20:	andeq	r9, r0, r0, ror #9
   11f24:	andeq	sl, r1, r8, asr lr
   11f28:	andeq	sl, r1, r4, asr #28
   11f2c:	andeq	sl, r1, r0, lsr lr
   11f30:	andeq	sl, r1, ip, lsl lr
   11f34:	ldrdeq	sl, [r1], -ip
   11f38:	andeq	sl, r1, r8, asr #27
   11f3c:	andeq	r9, r0, r8, asr r4
   11f40:	muleq	r1, ip, sp
   11f44:	andeq	sl, r1, r8, lsl #27
   11f48:	andeq	sl, r1, r4, ror sp
   11f4c:	andeq	sl, r1, r0, ror #26
   11f50:	andeq	sl, r1, r0, lsr sp
   11f54:	andeq	sl, r1, ip, lsl sp
   11f58:	andeq	r9, r0, r4, ror #7
   11f5c:	strdeq	sl, [r1], -r0
   11f60:	ldrdeq	sl, [r1], -ip
   11f64:			; <UNDEFINED> instruction: 0x0001acb4
   11f68:	andeq	sl, r1, r0, lsr #25
   11f6c:	andeq	sl, r1, r8, lsl #25
   11f70:	andeq	sl, r1, r4, ror ip

00011f74 <my_main@@Base>:
   11f74:	push	{fp, lr}
   11f78:	add	fp, sp, #4
   11f7c:	sub	sp, sp, #48	; 0x30
   11f80:	str	r0, [fp, #-48]	; 0xffffffd0
   11f84:	str	r1, [fp, #-52]	; 0xffffffcc
   11f88:	ldr	r3, [pc, #424]	; 12138 <my_main@@Base+0x1c4>
   11f8c:	add	r3, pc, r3
   11f90:	ldrd	r2, [r3]
   11f94:	adds	r2, r2, #1
   11f98:	adc	r3, r3, #0
   11f9c:	ldr	r1, [pc, #408]	; 1213c <my_main@@Base+0x1c8>
   11fa0:	add	r1, pc, r1
   11fa4:	strd	r2, [r1]
   11fa8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11fac:	bl	11b90 <load_file@@Base>
   11fb0:	str	r0, [fp, #-8]
   11fb4:	ldr	r3, [pc, #388]	; 12140 <my_main@@Base+0x1cc>
   11fb8:	add	r3, pc, r3
   11fbc:	ldrd	r2, [r3, #8]
   11fc0:	adds	r2, r2, #1
   11fc4:	adc	r3, r3, #0
   11fc8:	ldr	r1, [pc, #372]	; 12144 <my_main@@Base+0x1d0>
   11fcc:	add	r1, pc, r1
   11fd0:	strd	r2, [r1, #8]
   11fd4:	sub	r3, fp, #20
   11fd8:	ldr	r1, [fp, #-8]
   11fdc:	mov	r0, r3
   11fe0:	bl	12ccc <init_lexer@@Base>
   11fe4:	ldr	r3, [pc, #348]	; 12148 <my_main@@Base+0x1d4>
   11fe8:	add	r3, pc, r3
   11fec:	ldrd	r2, [r3, #16]
   11ff0:	adds	r2, r2, #1
   11ff4:	adc	r3, r3, #0
   11ff8:	ldr	r1, [pc, #332]	; 1214c <my_main@@Base+0x1d8>
   11ffc:	add	r1, pc, r1
   12000:	strd	r2, [r1, #16]
   12004:	sub	r2, fp, #20
   12008:	sub	r3, fp, #24
   1200c:	mov	r1, r2
   12010:	mov	r0, r3
   12014:	bl	15fe4 <init_grammar@@Base>
   12018:	ldr	r3, [pc, #304]	; 12150 <my_main@@Base+0x1dc>
   1201c:	add	r3, pc, r3
   12020:	ldrd	r2, [r3, #24]
   12024:	adds	r2, r2, #1
   12028:	adc	r3, r3, #0
   1202c:	ldr	r1, [pc, #288]	; 12154 <my_main@@Base+0x1e0>
   12030:	add	r1, pc, r1
   12034:	strd	r2, [r1, #24]
   12038:	sub	r1, fp, #24
   1203c:	sub	r3, fp, #44	; 0x2c
   12040:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12044:	mov	r0, r3
   12048:	bl	17b44 <init_generator@@Base>
   1204c:	ldr	r3, [pc, #260]	; 12158 <my_main@@Base+0x1e4>
   12050:	add	r3, pc, r3
   12054:	ldrd	r2, [r3, #32]
   12058:	adds	r2, r2, #1
   1205c:	adc	r3, r3, #0
   12060:	ldr	r1, [pc, #244]	; 1215c <my_main@@Base+0x1e8>
   12064:	add	r1, pc, r1
   12068:	strd	r2, [r1, #32]
   1206c:	sub	r3, fp, #44	; 0x2c
   12070:	mov	r0, r3
   12074:	bl	17c70 <generate_code@@Base>
   12078:	ldr	r3, [pc, #224]	; 12160 <my_main@@Base+0x1ec>
   1207c:	add	r3, pc, r3
   12080:	ldrd	r2, [r3, #40]	; 0x28
   12084:	adds	r2, r2, #1
   12088:	adc	r3, r3, #0
   1208c:	ldr	r1, [pc, #208]	; 12164 <my_main@@Base+0x1f0>
   12090:	add	r1, pc, r1
   12094:	strd	r2, [r1, #40]	; 0x28
   12098:	sub	r3, fp, #44	; 0x2c
   1209c:	mov	r0, r3
   120a0:	bl	17bf4 <destroy_generator@@Base>
   120a4:	ldr	r3, [pc, #188]	; 12168 <my_main@@Base+0x1f4>
   120a8:	add	r3, pc, r3
   120ac:	ldrd	r2, [r3, #48]	; 0x30
   120b0:	adds	r2, r2, #1
   120b4:	adc	r3, r3, #0
   120b8:	ldr	r1, [pc, #172]	; 1216c <my_main@@Base+0x1f8>
   120bc:	add	r1, pc, r1
   120c0:	strd	r2, [r1, #48]	; 0x30
   120c4:	sub	r3, fp, #24
   120c8:	mov	r0, r3
   120cc:	bl	1603c <destroy_grammar@@Base>
   120d0:	ldr	r3, [pc, #152]	; 12170 <my_main@@Base+0x1fc>
   120d4:	add	r3, pc, r3
   120d8:	ldrd	r2, [r3, #56]	; 0x38
   120dc:	adds	r2, r2, #1
   120e0:	adc	r3, r3, #0
   120e4:	ldr	r1, [pc, #136]	; 12174 <my_main@@Base+0x200>
   120e8:	add	r1, pc, r1
   120ec:	strd	r2, [r1, #56]	; 0x38
   120f0:	sub	r3, fp, #20
   120f4:	mov	r0, r3
   120f8:	bl	12d3c <destroy_lexer@@Base>
   120fc:	ldr	r0, [fp, #-8]
   12100:	bl	118dc <free@plt>
   12104:	mov	r0, #0
   12108:	ldr	r3, [pc, #104]	; 12178 <my_main@@Base+0x204>
   1210c:	add	r3, pc, r3
   12110:	ldrd	r2, [r3, #64]	; 0x40
   12114:	adds	r2, r2, #1
   12118:	adc	r3, r3, #0
   1211c:	ldr	r1, [pc, #88]	; 1217c <my_main@@Base+0x208>
   12120:	add	r1, pc, r1
   12124:	strd	r2, [r1, #64]	; 0x40
   12128:	mov	r3, r0
   1212c:	mov	r0, r3
   12130:	sub	sp, fp, #4
   12134:	pop	{fp, pc}
   12138:	andeq	sl, r1, ip, ror #22
   1213c:	andeq	sl, r1, r8, asr fp
   12140:	andeq	sl, r1, r0, asr #22
   12144:	andeq	sl, r1, ip, lsr #22
   12148:	andeq	sl, r1, r0, lsl fp
   1214c:	strdeq	sl, [r1], -ip
   12150:	ldrdeq	sl, [r1], -ip
   12154:	andeq	sl, r1, r8, asr #21
   12158:	andeq	sl, r1, r8, lsr #21
   1215c:	muleq	r1, r4, sl
   12160:	andeq	sl, r1, ip, ror sl
   12164:	andeq	sl, r1, r8, ror #20
   12168:	andeq	sl, r1, r0, asr sl
   1216c:	andeq	sl, r1, ip, lsr sl
   12170:	andeq	sl, r1, r4, lsr #20
   12174:	andeq	sl, r1, r0, lsl sl
   12178:	andeq	sl, r1, ip, ror #19
   1217c:	ldrdeq	sl, [r1], -r8

00012180 <main@@Base>:
   12180:	push	{r4, fp, lr}
   12184:	add	fp, sp, #8
   12188:	sub	sp, sp, #20
   1218c:	str	r0, [fp, #-24]	; 0xffffffe8
   12190:	str	r1, [fp, #-28]	; 0xffffffe4
   12194:	ldr	r4, [pc, #508]	; 12398 <main@@Base+0x218>
   12198:	add	r4, pc, r4
   1219c:	mov	r3, #0
   121a0:	str	r3, [fp, #-16]
   121a4:	mov	r3, #0
   121a8:	str	r3, [fp, #-20]	; 0xffffffec
   121ac:	ldr	r3, [pc, #488]	; 1239c <main@@Base+0x21c>
   121b0:	add	r3, pc, r3
   121b4:	ldrd	r2, [r3]
   121b8:	adds	r2, r2, #1
   121bc:	adc	r3, r3, #0
   121c0:	ldr	r1, [pc, #472]	; 123a0 <main@@Base+0x220>
   121c4:	add	r1, pc, r1
   121c8:	strd	r2, [r1]
   121cc:	b	12234 <main@@Base+0xb4>
   121d0:	ldr	r3, [pc, #460]	; 123a4 <main@@Base+0x224>
   121d4:	add	r3, pc, r3
   121d8:	ldrd	r2, [r3, #16]
   121dc:	adds	r2, r2, #1
   121e0:	adc	r3, r3, #0
   121e4:	ldr	r1, [pc, #444]	; 123a8 <main@@Base+0x228>
   121e8:	add	r1, pc, r1
   121ec:	strd	r2, [r1, #16]
   121f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   121f4:	cmp	r3, #111	; 0x6f
   121f8:	beq	12200 <main@@Base+0x80>
   121fc:	b	12234 <main@@Base+0xb4>
   12200:	ldr	r3, [pc, #420]	; 123ac <main@@Base+0x22c>
   12204:	ldr	r3, [r4, r3]
   12208:	ldr	r3, [r3]
   1220c:	str	r3, [fp, #-16]
   12210:	ldr	r3, [pc, #408]	; 123b0 <main@@Base+0x230>
   12214:	add	r3, pc, r3
   12218:	ldrd	r2, [r3, #8]
   1221c:	adds	r2, r2, #1
   12220:	adc	r3, r3, #0
   12224:	ldr	r1, [pc, #392]	; 123b4 <main@@Base+0x234>
   12228:	add	r1, pc, r1
   1222c:	strd	r2, [r1, #8]
   12230:	nop			; (mov r0, r0)
   12234:	ldr	r3, [pc, #380]	; 123b8 <main@@Base+0x238>
   12238:	add	r3, pc, r3
   1223c:	mov	r2, r3
   12240:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12248:	bl	11990 <getopt@plt>
   1224c:	str	r0, [fp, #-20]	; 0xffffffec
   12250:	ldr	r3, [fp, #-20]	; 0xffffffec
   12254:	cmn	r3, #1
   12258:	bne	121d0 <main@@Base+0x50>
   1225c:	ldr	r3, [pc, #344]	; 123bc <main@@Base+0x23c>
   12260:	ldr	r3, [r4, r3]
   12264:	ldr	r2, [r3]
   12268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1226c:	cmp	r2, r3
   12270:	bge	12300 <main@@Base+0x180>
   12274:	ldr	r3, [pc, #320]	; 123bc <main@@Base+0x23c>
   12278:	ldr	r3, [r4, r3]
   1227c:	ldr	r3, [r3]
   12280:	lsl	r3, r3, #2
   12284:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12288:	add	r3, r2, r3
   1228c:	ldr	ip, [r3]
   12290:	ldr	r3, [fp, #-16]
   12294:	cmp	r3, #0
   12298:	beq	122c4 <main@@Base+0x144>
   1229c:	ldr	r0, [fp, #-16]
   122a0:	ldr	r3, [pc, #280]	; 123c0 <main@@Base+0x240>
   122a4:	add	r3, pc, r3
   122a8:	ldrd	r2, [r3, #32]
   122ac:	adds	r2, r2, #1
   122b0:	adc	r3, r3, #0
   122b4:	ldr	r1, [pc, #264]	; 123c4 <main@@Base+0x244>
   122b8:	add	r1, pc, r1
   122bc:	strd	r2, [r1, #32]
   122c0:	b	122f0 <main@@Base+0x170>
   122c4:	ldr	r3, [pc, #252]	; 123c8 <main@@Base+0x248>
   122c8:	add	r3, pc, r3
   122cc:	mov	r0, r3
   122d0:	ldr	r3, [pc, #244]	; 123cc <main@@Base+0x24c>
   122d4:	add	r3, pc, r3
   122d8:	ldrd	r2, [r3, #40]	; 0x28
   122dc:	adds	r2, r2, #1
   122e0:	adc	r3, r3, #0
   122e4:	ldr	r1, [pc, #228]	; 123d0 <main@@Base+0x250>
   122e8:	add	r1, pc, r1
   122ec:	strd	r2, [r1, #40]	; 0x28
   122f0:	mov	r1, r0
   122f4:	mov	r0, ip
   122f8:	bl	11f74 <my_main@@Base>
   122fc:	b	12368 <main@@Base+0x1e8>
   12300:	ldr	r3, [pc, #204]	; 123d4 <main@@Base+0x254>
   12304:	add	r3, pc, r3
   12308:	ldrd	r2, [r3, #24]
   1230c:	adds	r2, r2, #1
   12310:	adc	r3, r3, #0
   12314:	ldr	r1, [pc, #188]	; 123d8 <main@@Base+0x258>
   12318:	add	r1, pc, r1
   1231c:	strd	r2, [r1, #24]
   12320:	ldr	r3, [pc, #180]	; 123dc <main@@Base+0x25c>
   12324:	ldr	r3, [r4, r3]
   12328:	ldr	r3, [r3]
   1232c:	mov	r2, #45	; 0x2d
   12330:	mov	r1, #1
   12334:	ldr	r0, [pc, #164]	; 123e0 <main@@Base+0x260>
   12338:	add	r0, pc, r0
   1233c:	bl	11900 <fwrite@plt>
   12340:	ldr	r3, [pc, #156]	; 123e4 <main@@Base+0x264>
   12344:	add	r3, pc, r3
   12348:	ldrd	r2, [r3, #56]	; 0x38
   1234c:	adds	r2, r2, #1
   12350:	adc	r3, r3, #0
   12354:	ldr	r1, [pc, #140]	; 123e8 <main@@Base+0x268>
   12358:	add	r1, pc, r1
   1235c:	strd	r2, [r1, #56]	; 0x38
   12360:	mov	r0, #1
   12364:	bl	11978 <exit@plt>
   12368:	ldr	r3, [pc, #124]	; 123ec <main@@Base+0x26c>
   1236c:	add	r3, pc, r3
   12370:	ldrd	r2, [r3, #48]	; 0x30
   12374:	adds	r2, r2, #1
   12378:	adc	r3, r3, #0
   1237c:	ldr	r1, [pc, #108]	; 123f0 <main@@Base+0x270>
   12380:	add	r1, pc, r1
   12384:	strd	r2, [r1, #48]	; 0x30
   12388:	mov	r3, r0
   1238c:	mov	r0, r3
   12390:	sub	sp, fp, #8
   12394:	pop	{r4, fp, pc}
   12398:	andeq	r9, r1, r0, ror #28
   1239c:	andeq	sl, r1, r8, lsl #18
   123a0:	strdeq	sl, [r1], -r4
   123a4:	andeq	sl, r1, r4, ror #17
   123a8:	ldrdeq	sl, [r1], -r0
   123ac:	strheq	r0, [r0], -r4
   123b0:	andeq	sl, r1, r4, lsr #17
   123b4:	muleq	r1, r0, r8
   123b8:	andeq	r9, r0, r4
   123bc:	andeq	r0, r0, r0, lsr #1
   123c0:	andeq	sl, r1, r4, lsl r8
   123c4:	andeq	sl, r1, r0, lsl #16
   123c8:	andeq	r8, r0, r8, ror pc
   123cc:	andeq	sl, r1, r4, ror #15
   123d0:	ldrdeq	sl, [r1], -r0
   123d4:			; <UNDEFINED> instruction: 0x0001a7b4
   123d8:	andeq	sl, r1, r0, lsr #15
   123dc:	andeq	r0, r0, r4, lsr #1
   123e0:	andeq	r8, r0, ip, lsl #30
   123e4:	andeq	sl, r1, r4, ror r7
   123e8:	andeq	sl, r1, r0, ror #14
   123ec:	andeq	sl, r1, ip, asr #14
   123f0:	andeq	sl, r1, r8, lsr r7
   123f4:	push	{fp, lr}
   123f8:	add	fp, sp, #4
   123fc:	ldr	r3, [pc, #12]	; 12410 <main@@Base+0x290>
   12400:	add	r3, pc, r3
   12404:	mov	r0, r3
   12408:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   1240c:	pop	{fp, pc}
   12410:	andeq	r9, r1, ip, lsl #26

00012414 <init_token_int_type@@Base>:
   12414:	push	{fp}		; (str fp, [sp, #-4]!)
   12418:	add	fp, sp, #0
   1241c:	sub	sp, sp, #12
   12420:	str	r0, [fp, #-8]
   12424:	ldr	r3, [pc, #52]	; 12460 <init_token_int_type@@Base+0x4c>
   12428:	add	r3, pc, r3
   1242c:	ldrd	r2, [r3]
   12430:	adds	r2, r2, #1
   12434:	adc	r3, r3, #0
   12438:	ldr	r1, [pc, #36]	; 12464 <init_token_int_type@@Base+0x50>
   1243c:	add	r1, pc, r1
   12440:	strd	r2, [r1]
   12444:	ldr	r3, [fp, #-8]
   12448:	mov	r2, #0
   1244c:	str	r2, [r3]
   12450:	nop			; (mov r0, r0)
   12454:	add	sp, fp, #0
   12458:	pop	{fp}		; (ldr fp, [sp], #4)
   1245c:	bx	lr
   12460:	andeq	sl, r1, r0, ror #16
   12464:	andeq	sl, r1, ip, asr #16

00012468 <init_token_int_value@@Base>:
   12468:	push	{fp}		; (str fp, [sp, #-4]!)
   1246c:	add	fp, sp, #0
   12470:	sub	sp, sp, #12
   12474:	str	r0, [fp, #-8]
   12478:	str	r1, [fp, #-12]
   1247c:	ldr	r3, [pc, #64]	; 124c4 <init_token_int_value@@Base+0x5c>
   12480:	add	r3, pc, r3
   12484:	ldrd	r2, [r3]
   12488:	adds	r2, r2, #1
   1248c:	adc	r3, r3, #0
   12490:	ldr	r1, [pc, #48]	; 124c8 <init_token_int_value@@Base+0x60>
   12494:	add	r1, pc, r1
   12498:	strd	r2, [r1]
   1249c:	ldr	r3, [fp, #-8]
   124a0:	mov	r2, #1
   124a4:	str	r2, [r3]
   124a8:	ldr	r3, [fp, #-8]
   124ac:	ldr	r2, [fp, #-12]
   124b0:	str	r2, [r3, #4]
   124b4:	nop			; (mov r0, r0)
   124b8:	add	sp, fp, #0
   124bc:	pop	{fp}		; (ldr fp, [sp], #4)
   124c0:	bx	lr
   124c4:	andeq	sl, r1, r0, lsl #16
   124c8:	andeq	sl, r1, ip, ror #15

000124cc <init_token_function@@Base>:
   124cc:	push	{fp}		; (str fp, [sp, #-4]!)
   124d0:	add	fp, sp, #0
   124d4:	sub	sp, sp, #12
   124d8:	str	r0, [fp, #-8]
   124dc:	str	r1, [fp, #-12]
   124e0:	ldr	r3, [pc, #64]	; 12528 <init_token_function@@Base+0x5c>
   124e4:	add	r3, pc, r3
   124e8:	ldrd	r2, [r3]
   124ec:	adds	r2, r2, #1
   124f0:	adc	r3, r3, #0
   124f4:	ldr	r1, [pc, #48]	; 1252c <init_token_function@@Base+0x60>
   124f8:	add	r1, pc, r1
   124fc:	strd	r2, [r1]
   12500:	ldr	r3, [fp, #-8]
   12504:	mov	r2, #2
   12508:	str	r2, [r3]
   1250c:	ldr	r3, [fp, #-8]
   12510:	ldr	r2, [fp, #-12]
   12514:	str	r2, [r3, #4]
   12518:	nop			; (mov r0, r0)
   1251c:	add	sp, fp, #0
   12520:	pop	{fp}		; (ldr fp, [sp], #4)
   12524:	bx	lr
   12528:	muleq	r1, r4, r7
   1252c:	andeq	sl, r1, r0, lsl #15

00012530 <init_token_opar@@Base>:
   12530:	push	{fp}		; (str fp, [sp, #-4]!)
   12534:	add	fp, sp, #0
   12538:	sub	sp, sp, #12
   1253c:	str	r0, [fp, #-8]
   12540:	ldr	r3, [pc, #52]	; 1257c <init_token_opar@@Base+0x4c>
   12544:	add	r3, pc, r3
   12548:	ldrd	r2, [r3]
   1254c:	adds	r2, r2, #1
   12550:	adc	r3, r3, #0
   12554:	ldr	r1, [pc, #36]	; 12580 <init_token_opar@@Base+0x50>
   12558:	add	r1, pc, r1
   1255c:	strd	r2, [r1]
   12560:	ldr	r3, [fp, #-8]
   12564:	mov	r2, #3
   12568:	str	r2, [r3]
   1256c:	nop			; (mov r0, r0)
   12570:	add	sp, fp, #0
   12574:	pop	{fp}		; (ldr fp, [sp], #4)
   12578:	bx	lr
   1257c:	andeq	sl, r1, ip, lsr #14
   12580:	andeq	sl, r1, r8, lsl r7

00012584 <init_token_cpar@@Base>:
   12584:	push	{fp}		; (str fp, [sp, #-4]!)
   12588:	add	fp, sp, #0
   1258c:	sub	sp, sp, #12
   12590:	str	r0, [fp, #-8]
   12594:	ldr	r3, [pc, #52]	; 125d0 <init_token_cpar@@Base+0x4c>
   12598:	add	r3, pc, r3
   1259c:	ldrd	r2, [r3]
   125a0:	adds	r2, r2, #1
   125a4:	adc	r3, r3, #0
   125a8:	ldr	r1, [pc, #36]	; 125d4 <init_token_cpar@@Base+0x50>
   125ac:	add	r1, pc, r1
   125b0:	strd	r2, [r1]
   125b4:	ldr	r3, [fp, #-8]
   125b8:	mov	r2, #4
   125bc:	str	r2, [r3]
   125c0:	nop			; (mov r0, r0)
   125c4:	add	sp, fp, #0
   125c8:	pop	{fp}		; (ldr fp, [sp], #4)
   125cc:	bx	lr
   125d0:	ldrdeq	sl, [r1], -r0
   125d4:			; <UNDEFINED> instruction: 0x0001a6bc

000125d8 <init_token_obra@@Base>:
   125d8:	push	{fp}		; (str fp, [sp, #-4]!)
   125dc:	add	fp, sp, #0
   125e0:	sub	sp, sp, #12
   125e4:	str	r0, [fp, #-8]
   125e8:	ldr	r3, [pc, #52]	; 12624 <init_token_obra@@Base+0x4c>
   125ec:	add	r3, pc, r3
   125f0:	ldrd	r2, [r3]
   125f4:	adds	r2, r2, #1
   125f8:	adc	r3, r3, #0
   125fc:	ldr	r1, [pc, #36]	; 12628 <init_token_obra@@Base+0x50>
   12600:	add	r1, pc, r1
   12604:	strd	r2, [r1]
   12608:	ldr	r3, [fp, #-8]
   1260c:	mov	r2, #5
   12610:	str	r2, [r3]
   12614:	nop			; (mov r0, r0)
   12618:	add	sp, fp, #0
   1261c:	pop	{fp}		; (ldr fp, [sp], #4)
   12620:	bx	lr
   12624:	andeq	sl, r1, r4, ror r6
   12628:	andeq	sl, r1, r0, ror #12

0001262c <init_token_cbra@@Base>:
   1262c:	push	{fp}		; (str fp, [sp, #-4]!)
   12630:	add	fp, sp, #0
   12634:	sub	sp, sp, #12
   12638:	str	r0, [fp, #-8]
   1263c:	ldr	r3, [pc, #52]	; 12678 <init_token_cbra@@Base+0x4c>
   12640:	add	r3, pc, r3
   12644:	ldrd	r2, [r3]
   12648:	adds	r2, r2, #1
   1264c:	adc	r3, r3, #0
   12650:	ldr	r1, [pc, #36]	; 1267c <init_token_cbra@@Base+0x50>
   12654:	add	r1, pc, r1
   12658:	strd	r2, [r1]
   1265c:	ldr	r3, [fp, #-8]
   12660:	mov	r2, #6
   12664:	str	r2, [r3]
   12668:	nop			; (mov r0, r0)
   1266c:	add	sp, fp, #0
   12670:	pop	{fp}		; (ldr fp, [sp], #4)
   12674:	bx	lr
   12678:	andeq	sl, r1, r8, lsl r6
   1267c:	andeq	sl, r1, r4, lsl #12

00012680 <init_token_return@@Base>:
   12680:	push	{fp}		; (str fp, [sp, #-4]!)
   12684:	add	fp, sp, #0
   12688:	sub	sp, sp, #12
   1268c:	str	r0, [fp, #-8]
   12690:	ldr	r3, [pc, #52]	; 126cc <init_token_return@@Base+0x4c>
   12694:	add	r3, pc, r3
   12698:	ldrd	r2, [r3]
   1269c:	adds	r2, r2, #1
   126a0:	adc	r3, r3, #0
   126a4:	ldr	r1, [pc, #36]	; 126d0 <init_token_return@@Base+0x50>
   126a8:	add	r1, pc, r1
   126ac:	strd	r2, [r1]
   126b0:	ldr	r3, [fp, #-8]
   126b4:	mov	r2, #7
   126b8:	str	r2, [r3]
   126bc:	nop			; (mov r0, r0)
   126c0:	add	sp, fp, #0
   126c4:	pop	{fp}		; (ldr fp, [sp], #4)
   126c8:	bx	lr
   126cc:			; <UNDEFINED> instruction: 0x0001a5bc
   126d0:	andeq	sl, r1, r8, lsr #11

000126d4 <init_token_semicolon@@Base>:
   126d4:	push	{fp}		; (str fp, [sp, #-4]!)
   126d8:	add	fp, sp, #0
   126dc:	sub	sp, sp, #12
   126e0:	str	r0, [fp, #-8]
   126e4:	ldr	r3, [pc, #52]	; 12720 <init_token_semicolon@@Base+0x4c>
   126e8:	add	r3, pc, r3
   126ec:	ldrd	r2, [r3]
   126f0:	adds	r2, r2, #1
   126f4:	adc	r3, r3, #0
   126f8:	ldr	r1, [pc, #36]	; 12724 <init_token_semicolon@@Base+0x50>
   126fc:	add	r1, pc, r1
   12700:	strd	r2, [r1]
   12704:	ldr	r3, [fp, #-8]
   12708:	mov	r2, #8
   1270c:	str	r2, [r3]
   12710:	nop			; (mov r0, r0)
   12714:	add	sp, fp, #0
   12718:	pop	{fp}		; (ldr fp, [sp], #4)
   1271c:	bx	lr
   12720:	andeq	sl, r1, r0, ror #10
   12724:	andeq	sl, r1, ip, asr #10

00012728 <init_token_eof@@Base>:
   12728:	push	{fp}		; (str fp, [sp, #-4]!)
   1272c:	add	fp, sp, #0
   12730:	sub	sp, sp, #12
   12734:	str	r0, [fp, #-8]
   12738:	ldr	r3, [pc, #52]	; 12774 <init_token_eof@@Base+0x4c>
   1273c:	add	r3, pc, r3
   12740:	ldrd	r2, [r3]
   12744:	adds	r2, r2, #1
   12748:	adc	r3, r3, #0
   1274c:	ldr	r1, [pc, #36]	; 12778 <init_token_eof@@Base+0x50>
   12750:	add	r1, pc, r1
   12754:	strd	r2, [r1]
   12758:	ldr	r3, [fp, #-8]
   1275c:	mov	r2, #9
   12760:	str	r2, [r3]
   12764:	nop			; (mov r0, r0)
   12768:	add	sp, fp, #0
   1276c:	pop	{fp}		; (ldr fp, [sp], #4)
   12770:	bx	lr
   12774:	andeq	sl, r1, r4, lsl #10
   12778:	strdeq	sl, [r1], -r0

0001277c <init_token_if@@Base>:
   1277c:	push	{fp}		; (str fp, [sp, #-4]!)
   12780:	add	fp, sp, #0
   12784:	sub	sp, sp, #12
   12788:	str	r0, [fp, #-8]
   1278c:	ldr	r3, [pc, #52]	; 127c8 <init_token_if@@Base+0x4c>
   12790:	add	r3, pc, r3
   12794:	ldrd	r2, [r3]
   12798:	adds	r2, r2, #1
   1279c:	adc	r3, r3, #0
   127a0:	ldr	r1, [pc, #36]	; 127cc <init_token_if@@Base+0x50>
   127a4:	add	r1, pc, r1
   127a8:	strd	r2, [r1]
   127ac:	ldr	r3, [fp, #-8]
   127b0:	mov	r2, #10
   127b4:	str	r2, [r3]
   127b8:	nop			; (mov r0, r0)
   127bc:	add	sp, fp, #0
   127c0:	pop	{fp}		; (ldr fp, [sp], #4)
   127c4:	bx	lr
   127c8:	andeq	sl, r1, r8, lsr #9
   127cc:	muleq	r1, r4, r4

000127d0 <init_token_else@@Base>:
   127d0:	push	{fp}		; (str fp, [sp, #-4]!)
   127d4:	add	fp, sp, #0
   127d8:	sub	sp, sp, #12
   127dc:	str	r0, [fp, #-8]
   127e0:	ldr	r3, [pc, #52]	; 1281c <init_token_else@@Base+0x4c>
   127e4:	add	r3, pc, r3
   127e8:	ldrd	r2, [r3]
   127ec:	adds	r2, r2, #1
   127f0:	adc	r3, r3, #0
   127f4:	ldr	r1, [pc, #36]	; 12820 <init_token_else@@Base+0x50>
   127f8:	add	r1, pc, r1
   127fc:	strd	r2, [r1]
   12800:	ldr	r3, [fp, #-8]
   12804:	mov	r2, #11
   12808:	str	r2, [r3]
   1280c:	nop			; (mov r0, r0)
   12810:	add	sp, fp, #0
   12814:	pop	{fp}		; (ldr fp, [sp], #4)
   12818:	bx	lr
   1281c:	andeq	sl, r1, ip, asr #8
   12820:	andeq	sl, r1, r8, lsr r4

00012824 <init_token_boolean_op@@Base>:
   12824:	push	{fp}		; (str fp, [sp, #-4]!)
   12828:	add	fp, sp, #0
   1282c:	sub	sp, sp, #12
   12830:	str	r0, [fp, #-8]
   12834:	str	r1, [fp, #-12]
   12838:	ldr	r3, [pc, #64]	; 12880 <init_token_boolean_op@@Base+0x5c>
   1283c:	add	r3, pc, r3
   12840:	ldrd	r2, [r3]
   12844:	adds	r2, r2, #1
   12848:	adc	r3, r3, #0
   1284c:	ldr	r1, [pc, #48]	; 12884 <init_token_boolean_op@@Base+0x60>
   12850:	add	r1, pc, r1
   12854:	strd	r2, [r1]
   12858:	ldr	r3, [fp, #-8]
   1285c:	mov	r2, #12
   12860:	str	r2, [r3]
   12864:	ldr	r3, [fp, #-8]
   12868:	ldr	r2, [fp, #-12]
   1286c:	str	r2, [r3, #4]
   12870:	nop			; (mov r0, r0)
   12874:	add	sp, fp, #0
   12878:	pop	{fp}		; (ldr fp, [sp], #4)
   1287c:	bx	lr
   12880:	andeq	sl, r1, ip, ror #7
   12884:	ldrdeq	sl, [r1], -r8

00012888 <free_token_int_type@@Base>:
   12888:	push	{fp, lr}
   1288c:	add	fp, sp, #4
   12890:	sub	sp, sp, #8
   12894:	str	r0, [fp, #-8]
   12898:	ldr	r3, [pc, #44]	; 128cc <free_token_int_type@@Base+0x44>
   1289c:	add	r3, pc, r3
   128a0:	ldrd	r2, [r3]
   128a4:	adds	r2, r2, #1
   128a8:	adc	r3, r3, #0
   128ac:	ldr	r1, [pc, #28]	; 128d0 <free_token_int_type@@Base+0x48>
   128b0:	add	r1, pc, r1
   128b4:	strd	r2, [r1]
   128b8:	ldr	r0, [fp, #-8]
   128bc:	bl	118dc <free@plt>
   128c0:	nop			; (mov r0, r0)
   128c4:	sub	sp, fp, #4
   128c8:	pop	{fp, pc}
   128cc:	andeq	sl, r1, r4, lsl #7
   128d0:	andeq	sl, r1, r0, ror r3

000128d4 <free_token_int_value@@Base>:
   128d4:	push	{fp, lr}
   128d8:	add	fp, sp, #4
   128dc:	sub	sp, sp, #8
   128e0:	str	r0, [fp, #-8]
   128e4:	ldr	r3, [pc, #44]	; 12918 <free_token_int_value@@Base+0x44>
   128e8:	add	r3, pc, r3
   128ec:	ldrd	r2, [r3]
   128f0:	adds	r2, r2, #1
   128f4:	adc	r3, r3, #0
   128f8:	ldr	r1, [pc, #28]	; 1291c <free_token_int_value@@Base+0x48>
   128fc:	add	r1, pc, r1
   12900:	strd	r2, [r1]
   12904:	ldr	r0, [fp, #-8]
   12908:	bl	118dc <free@plt>
   1290c:	nop			; (mov r0, r0)
   12910:	sub	sp, fp, #4
   12914:	pop	{fp, pc}
   12918:	andeq	sl, r1, r0, lsr r3
   1291c:	andeq	sl, r1, ip, lsl r3

00012920 <free_token_function@@Base>:
   12920:	push	{fp, lr}
   12924:	add	fp, sp, #4
   12928:	sub	sp, sp, #8
   1292c:	str	r0, [fp, #-8]
   12930:	ldr	r3, [pc, #44]	; 12964 <free_token_function@@Base+0x44>
   12934:	add	r3, pc, r3
   12938:	ldrd	r2, [r3]
   1293c:	adds	r2, r2, #1
   12940:	adc	r3, r3, #0
   12944:	ldr	r1, [pc, #28]	; 12968 <free_token_function@@Base+0x48>
   12948:	add	r1, pc, r1
   1294c:	strd	r2, [r1]
   12950:	ldr	r0, [fp, #-8]
   12954:	bl	118dc <free@plt>
   12958:	nop			; (mov r0, r0)
   1295c:	sub	sp, fp, #4
   12960:	pop	{fp, pc}
   12964:	ldrdeq	sl, [r1], -ip
   12968:	andeq	sl, r1, r8, asr #5

0001296c <free_token_opar@@Base>:
   1296c:	push	{fp, lr}
   12970:	add	fp, sp, #4
   12974:	sub	sp, sp, #8
   12978:	str	r0, [fp, #-8]
   1297c:	ldr	r3, [pc, #44]	; 129b0 <free_token_opar@@Base+0x44>
   12980:	add	r3, pc, r3
   12984:	ldrd	r2, [r3]
   12988:	adds	r2, r2, #1
   1298c:	adc	r3, r3, #0
   12990:	ldr	r1, [pc, #28]	; 129b4 <free_token_opar@@Base+0x48>
   12994:	add	r1, pc, r1
   12998:	strd	r2, [r1]
   1299c:	ldr	r0, [fp, #-8]
   129a0:	bl	118dc <free@plt>
   129a4:	nop			; (mov r0, r0)
   129a8:	sub	sp, fp, #4
   129ac:	pop	{fp, pc}
   129b0:	andeq	sl, r1, r8, lsl #5
   129b4:	andeq	sl, r1, r4, ror r2

000129b8 <free_token_cpar@@Base>:
   129b8:	push	{fp, lr}
   129bc:	add	fp, sp, #4
   129c0:	sub	sp, sp, #8
   129c4:	str	r0, [fp, #-8]
   129c8:	ldr	r3, [pc, #44]	; 129fc <free_token_cpar@@Base+0x44>
   129cc:	add	r3, pc, r3
   129d0:	ldrd	r2, [r3]
   129d4:	adds	r2, r2, #1
   129d8:	adc	r3, r3, #0
   129dc:	ldr	r1, [pc, #28]	; 12a00 <free_token_cpar@@Base+0x48>
   129e0:	add	r1, pc, r1
   129e4:	strd	r2, [r1]
   129e8:	ldr	r0, [fp, #-8]
   129ec:	bl	118dc <free@plt>
   129f0:	nop			; (mov r0, r0)
   129f4:	sub	sp, fp, #4
   129f8:	pop	{fp, pc}
   129fc:	andeq	sl, r1, r4, lsr r2
   12a00:	andeq	sl, r1, r0, lsr #4

00012a04 <free_token_obra@@Base>:
   12a04:	push	{fp, lr}
   12a08:	add	fp, sp, #4
   12a0c:	sub	sp, sp, #8
   12a10:	str	r0, [fp, #-8]
   12a14:	ldr	r3, [pc, #44]	; 12a48 <free_token_obra@@Base+0x44>
   12a18:	add	r3, pc, r3
   12a1c:	ldrd	r2, [r3]
   12a20:	adds	r2, r2, #1
   12a24:	adc	r3, r3, #0
   12a28:	ldr	r1, [pc, #28]	; 12a4c <free_token_obra@@Base+0x48>
   12a2c:	add	r1, pc, r1
   12a30:	strd	r2, [r1]
   12a34:	ldr	r0, [fp, #-8]
   12a38:	bl	118dc <free@plt>
   12a3c:	nop			; (mov r0, r0)
   12a40:	sub	sp, fp, #4
   12a44:	pop	{fp, pc}
   12a48:	andeq	sl, r1, r0, ror #3
   12a4c:	andeq	sl, r1, ip, asr #3

00012a50 <free_token_cbra@@Base>:
   12a50:	push	{fp, lr}
   12a54:	add	fp, sp, #4
   12a58:	sub	sp, sp, #8
   12a5c:	str	r0, [fp, #-8]
   12a60:	ldr	r3, [pc, #44]	; 12a94 <free_token_cbra@@Base+0x44>
   12a64:	add	r3, pc, r3
   12a68:	ldrd	r2, [r3]
   12a6c:	adds	r2, r2, #1
   12a70:	adc	r3, r3, #0
   12a74:	ldr	r1, [pc, #28]	; 12a98 <free_token_cbra@@Base+0x48>
   12a78:	add	r1, pc, r1
   12a7c:	strd	r2, [r1]
   12a80:	ldr	r0, [fp, #-8]
   12a84:	bl	118dc <free@plt>
   12a88:	nop			; (mov r0, r0)
   12a8c:	sub	sp, fp, #4
   12a90:	pop	{fp, pc}
   12a94:	andeq	sl, r1, ip, lsl #3
   12a98:	andeq	sl, r1, r8, ror r1

00012a9c <free_token_return@@Base>:
   12a9c:	push	{fp, lr}
   12aa0:	add	fp, sp, #4
   12aa4:	sub	sp, sp, #8
   12aa8:	str	r0, [fp, #-8]
   12aac:	ldr	r3, [pc, #44]	; 12ae0 <free_token_return@@Base+0x44>
   12ab0:	add	r3, pc, r3
   12ab4:	ldrd	r2, [r3]
   12ab8:	adds	r2, r2, #1
   12abc:	adc	r3, r3, #0
   12ac0:	ldr	r1, [pc, #28]	; 12ae4 <free_token_return@@Base+0x48>
   12ac4:	add	r1, pc, r1
   12ac8:	strd	r2, [r1]
   12acc:	ldr	r0, [fp, #-8]
   12ad0:	bl	118dc <free@plt>
   12ad4:	nop			; (mov r0, r0)
   12ad8:	sub	sp, fp, #4
   12adc:	pop	{fp, pc}
   12ae0:	andeq	sl, r1, r8, lsr r1
   12ae4:	andeq	sl, r1, r4, lsr #2

00012ae8 <free_token_semicolon@@Base>:
   12ae8:	push	{fp, lr}
   12aec:	add	fp, sp, #4
   12af0:	sub	sp, sp, #8
   12af4:	str	r0, [fp, #-8]
   12af8:	ldr	r3, [pc, #44]	; 12b2c <free_token_semicolon@@Base+0x44>
   12afc:	add	r3, pc, r3
   12b00:	ldrd	r2, [r3]
   12b04:	adds	r2, r2, #1
   12b08:	adc	r3, r3, #0
   12b0c:	ldr	r1, [pc, #28]	; 12b30 <free_token_semicolon@@Base+0x48>
   12b10:	add	r1, pc, r1
   12b14:	strd	r2, [r1]
   12b18:	ldr	r0, [fp, #-8]
   12b1c:	bl	118dc <free@plt>
   12b20:	nop			; (mov r0, r0)
   12b24:	sub	sp, fp, #4
   12b28:	pop	{fp, pc}
   12b2c:	andeq	sl, r1, r4, ror #1
   12b30:	ldrdeq	sl, [r1], -r0

00012b34 <free_token_eof@@Base>:
   12b34:	push	{fp, lr}
   12b38:	add	fp, sp, #4
   12b3c:	sub	sp, sp, #8
   12b40:	str	r0, [fp, #-8]
   12b44:	ldr	r3, [pc, #44]	; 12b78 <free_token_eof@@Base+0x44>
   12b48:	add	r3, pc, r3
   12b4c:	ldrd	r2, [r3]
   12b50:	adds	r2, r2, #1
   12b54:	adc	r3, r3, #0
   12b58:	ldr	r1, [pc, #28]	; 12b7c <free_token_eof@@Base+0x48>
   12b5c:	add	r1, pc, r1
   12b60:	strd	r2, [r1]
   12b64:	ldr	r0, [fp, #-8]
   12b68:	bl	118dc <free@plt>
   12b6c:	nop			; (mov r0, r0)
   12b70:	sub	sp, fp, #4
   12b74:	pop	{fp, pc}
   12b78:	muleq	r1, r0, r0
   12b7c:	andeq	sl, r1, ip, ror r0

00012b80 <free_token_if@@Base>:
   12b80:	push	{fp, lr}
   12b84:	add	fp, sp, #4
   12b88:	sub	sp, sp, #8
   12b8c:	str	r0, [fp, #-8]
   12b90:	ldr	r3, [pc, #44]	; 12bc4 <free_token_if@@Base+0x44>
   12b94:	add	r3, pc, r3
   12b98:	ldrd	r2, [r3]
   12b9c:	adds	r2, r2, #1
   12ba0:	adc	r3, r3, #0
   12ba4:	ldr	r1, [pc, #28]	; 12bc8 <free_token_if@@Base+0x48>
   12ba8:	add	r1, pc, r1
   12bac:	strd	r2, [r1]
   12bb0:	ldr	r0, [fp, #-8]
   12bb4:	bl	118dc <free@plt>
   12bb8:	nop			; (mov r0, r0)
   12bbc:	sub	sp, fp, #4
   12bc0:	pop	{fp, pc}
   12bc4:	andeq	sl, r1, ip, lsr r0
   12bc8:	andeq	sl, r1, r8, lsr #32

00012bcc <free_token_else@@Base>:
   12bcc:	push	{fp, lr}
   12bd0:	add	fp, sp, #4
   12bd4:	sub	sp, sp, #8
   12bd8:	str	r0, [fp, #-8]
   12bdc:	ldr	r3, [pc, #44]	; 12c10 <free_token_else@@Base+0x44>
   12be0:	add	r3, pc, r3
   12be4:	ldrd	r2, [r3]
   12be8:	adds	r2, r2, #1
   12bec:	adc	r3, r3, #0
   12bf0:	ldr	r1, [pc, #28]	; 12c14 <free_token_else@@Base+0x48>
   12bf4:	add	r1, pc, r1
   12bf8:	strd	r2, [r1]
   12bfc:	ldr	r0, [fp, #-8]
   12c00:	bl	118dc <free@plt>
   12c04:	nop			; (mov r0, r0)
   12c08:	sub	sp, fp, #4
   12c0c:	pop	{fp, pc}
   12c10:	andeq	r9, r1, r8, ror #31
   12c14:	ldrdeq	r9, [r1], -r4

00012c18 <free_token_boolean_op@@Base>:
   12c18:	push	{fp, lr}
   12c1c:	add	fp, sp, #4
   12c20:	sub	sp, sp, #8
   12c24:	str	r0, [fp, #-8]
   12c28:	ldr	r3, [pc, #108]	; 12c9c <free_token_boolean_op@@Base+0x84>
   12c2c:	add	r3, pc, r3
   12c30:	ldrd	r2, [r3]
   12c34:	adds	r2, r2, #1
   12c38:	adc	r3, r3, #0
   12c3c:	ldr	r1, [pc, #92]	; 12ca0 <free_token_boolean_op@@Base+0x88>
   12c40:	add	r1, pc, r1
   12c44:	strd	r2, [r1]
   12c48:	ldr	r3, [fp, #-8]
   12c4c:	ldr	r3, [r3, #4]
   12c50:	cmp	r3, #0
   12c54:	beq	12c88 <free_token_boolean_op@@Base+0x70>
   12c58:	ldr	r3, [fp, #-8]
   12c5c:	ldr	r3, [r3, #4]
   12c60:	mov	r0, r3
   12c64:	bl	118dc <free@plt>
   12c68:	ldr	r3, [pc, #52]	; 12ca4 <free_token_boolean_op@@Base+0x8c>
   12c6c:	add	r3, pc, r3
   12c70:	ldrd	r2, [r3, #8]
   12c74:	adds	r2, r2, #1
   12c78:	adc	r3, r3, #0
   12c7c:	ldr	r1, [pc, #36]	; 12ca8 <free_token_boolean_op@@Base+0x90>
   12c80:	add	r1, pc, r1
   12c84:	strd	r2, [r1, #8]
   12c88:	ldr	r0, [fp, #-8]
   12c8c:	bl	118dc <free@plt>
   12c90:	nop			; (mov r0, r0)
   12c94:	sub	sp, fp, #4
   12c98:	pop	{fp, pc}
   12c9c:	andeq	r9, r1, ip, lsl #31
   12ca0:	andeq	r9, r1, r8, ror pc
   12ca4:	andeq	r9, r1, ip, asr #30
   12ca8:	andeq	r9, r1, r8, lsr pc
   12cac:	push	{fp, lr}
   12cb0:	add	fp, sp, #4
   12cb4:	ldr	r3, [pc, #12]	; 12cc8 <free_token_boolean_op@@Base+0xb0>
   12cb8:	add	r3, pc, r3
   12cbc:	mov	r0, r3
   12cc0:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   12cc4:	pop	{fp, pc}
   12cc8:	andeq	r9, r1, ip, ror #14

00012ccc <init_lexer@@Base>:
   12ccc:	push	{fp}		; (str fp, [sp, #-4]!)
   12cd0:	add	fp, sp, #0
   12cd4:	sub	sp, sp, #12
   12cd8:	str	r0, [fp, #-8]
   12cdc:	str	r1, [fp, #-12]
   12ce0:	ldr	r3, [pc, #76]	; 12d34 <init_lexer@@Base+0x68>
   12ce4:	add	r3, pc, r3
   12ce8:	ldrd	r2, [r3]
   12cec:	adds	r2, r2, #1
   12cf0:	adc	r3, r3, #0
   12cf4:	ldr	r1, [pc, #60]	; 12d38 <init_lexer@@Base+0x6c>
   12cf8:	add	r1, pc, r1
   12cfc:	strd	r2, [r1]
   12d00:	ldr	r3, [fp, #-8]
   12d04:	ldr	r2, [fp, #-12]
   12d08:	str	r2, [r3]
   12d0c:	ldr	r3, [fp, #-8]
   12d10:	mov	r2, #0
   12d14:	str	r2, [r3, #4]
   12d18:	ldr	r3, [fp, #-8]
   12d1c:	mov	r2, #0
   12d20:	str	r2, [r3, #8]
   12d24:	nop			; (mov r0, r0)
   12d28:	add	sp, fp, #0
   12d2c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d30:	bx	lr
   12d34:	andeq	sl, r1, ip, lsl #6
   12d38:	strdeq	sl, [r1], -r8

00012d3c <destroy_lexer@@Base>:
   12d3c:	push	{fp, lr}
   12d40:	add	fp, sp, #4
   12d44:	sub	sp, sp, #16
   12d48:	str	r0, [fp, #-16]
   12d4c:	ldr	r3, [pc, #160]	; 12df4 <destroy_lexer@@Base+0xb8>
   12d50:	add	r3, pc, r3
   12d54:	ldrd	r2, [r3]
   12d58:	adds	r2, r2, #1
   12d5c:	adc	r3, r3, #0
   12d60:	ldr	r1, [pc, #144]	; 12df8 <destroy_lexer@@Base+0xbc>
   12d64:	add	r1, pc, r1
   12d68:	strd	r2, [r1]
   12d6c:	mov	r3, #0
   12d70:	str	r3, [fp, #-8]
   12d74:	ldr	r3, [fp, #-16]
   12d78:	ldr	r3, [r3, #4]
   12d7c:	str	r3, [fp, #-12]
   12d80:	ldr	r3, [fp, #-12]
   12d84:	cmp	r3, #0
   12d88:	beq	12de8 <destroy_lexer@@Base+0xac>
   12d8c:	ldr	r3, [pc, #104]	; 12dfc <destroy_lexer@@Base+0xc0>
   12d90:	add	r3, pc, r3
   12d94:	ldrd	r2, [r3, #8]
   12d98:	adds	r2, r2, #1
   12d9c:	adc	r3, r3, #0
   12da0:	ldr	r1, [pc, #88]	; 12e00 <destroy_lexer@@Base+0xc4>
   12da4:	add	r1, pc, r1
   12da8:	strd	r2, [r1, #8]
   12dac:	ldr	r3, [fp, #-12]
   12db0:	str	r3, [fp, #-8]
   12db4:	ldr	r3, [fp, #-12]
   12db8:	ldr	r3, [r3]
   12dbc:	str	r3, [fp, #-12]
   12dc0:	ldr	r0, [fp, #-8]
   12dc4:	bl	12e0c <free_stack_base@@Base>
   12dc8:	ldr	r3, [pc, #52]	; 12e04 <destroy_lexer@@Base+0xc8>
   12dcc:	add	r3, pc, r3
   12dd0:	ldrd	r2, [r3, #16]
   12dd4:	adds	r2, r2, #1
   12dd8:	adc	r3, r3, #0
   12ddc:	ldr	r1, [pc, #36]	; 12e08 <destroy_lexer@@Base+0xcc>
   12de0:	add	r1, pc, r1
   12de4:	strd	r2, [r1, #16]
   12de8:	nop			; (mov r0, r0)
   12dec:	sub	sp, fp, #4
   12df0:	pop	{fp, pc}
   12df4:	andeq	sl, r1, r8, lsl #5
   12df8:	andeq	sl, r1, r4, ror r2
   12dfc:	andeq	sl, r1, r8, asr #4
   12e00:	andeq	sl, r1, r4, lsr r2
   12e04:	andeq	sl, r1, ip, lsl #4
   12e08:	strdeq	sl, [r1], -r8

00012e0c <free_stack_base@@Base>:
   12e0c:	push	{fp, lr}
   12e10:	add	fp, sp, #4
   12e14:	sub	sp, sp, #8
   12e18:	str	r0, [fp, #-8]
   12e1c:	ldr	r3, [pc, #44]	; 12e50 <free_stack_base@@Base+0x44>
   12e20:	add	r3, pc, r3
   12e24:	ldrd	r2, [r3]
   12e28:	adds	r2, r2, #1
   12e2c:	adc	r3, r3, #0
   12e30:	ldr	r1, [pc, #28]	; 12e54 <free_stack_base@@Base+0x48>
   12e34:	add	r1, pc, r1
   12e38:	strd	r2, [r1]
   12e3c:	ldr	r0, [fp, #-8]
   12e40:	bl	118dc <free@plt>
   12e44:	nop			; (mov r0, r0)
   12e48:	sub	sp, fp, #4
   12e4c:	pop	{fp, pc}
   12e50:			; <UNDEFINED> instruction: 0x0001a1b0
   12e54:	muleq	r1, ip, r1

00012e58 <push_back@@Base>:
   12e58:	push	{fp, lr}
   12e5c:	add	fp, sp, #4
   12e60:	sub	sp, sp, #16
   12e64:	str	r0, [fp, #-16]
   12e68:	str	r1, [fp, #-20]	; 0xffffffec
   12e6c:	ldr	r3, [pc, #92]	; 12ed0 <push_back@@Base+0x78>
   12e70:	add	r3, pc, r3
   12e74:	ldrd	r2, [r3]
   12e78:	adds	r2, r2, #1
   12e7c:	adc	r3, r3, #0
   12e80:	ldr	r1, [pc, #76]	; 12ed4 <push_back@@Base+0x7c>
   12e84:	add	r1, pc, r1
   12e88:	strd	r2, [r1]
   12e8c:	mov	r0, #8
   12e90:	bl	11930 <malloc@plt>
   12e94:	mov	r3, r0
   12e98:	str	r3, [fp, #-8]
   12e9c:	ldr	r3, [fp, #-8]
   12ea0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ea4:	str	r2, [r3, #4]
   12ea8:	ldr	r3, [fp, #-16]
   12eac:	ldr	r2, [r3, #4]
   12eb0:	ldr	r3, [fp, #-8]
   12eb4:	str	r2, [r3]
   12eb8:	ldr	r3, [fp, #-16]
   12ebc:	ldr	r2, [fp, #-8]
   12ec0:	str	r2, [r3, #4]
   12ec4:	nop			; (mov r0, r0)
   12ec8:	sub	sp, fp, #4
   12ecc:	pop	{fp, pc}
   12ed0:	andeq	sl, r1, r8, asr r1
   12ed4:	andeq	sl, r1, r4, asr #2

00012ed8 <get_char@@Base>:
   12ed8:	push	{fp}		; (str fp, [sp, #-4]!)
   12edc:	add	fp, sp, #0
   12ee0:	sub	sp, sp, #12
   12ee4:	str	r0, [fp, #-8]
   12ee8:	ldr	r3, [fp, #-8]
   12eec:	ldr	r2, [r3]
   12ef0:	ldr	r3, [fp, #-8]
   12ef4:	ldr	r3, [r3, #8]
   12ef8:	add	r0, r3, #1
   12efc:	ldr	r1, [fp, #-8]
   12f00:	str	r0, [r1, #8]
   12f04:	add	r3, r2, r3
   12f08:	ldrb	r0, [r3]
   12f0c:	ldr	r3, [pc, #44]	; 12f40 <get_char@@Base+0x68>
   12f10:	add	r3, pc, r3
   12f14:	ldrd	r2, [r3]
   12f18:	adds	r2, r2, #1
   12f1c:	adc	r3, r3, #0
   12f20:	ldr	r1, [pc, #28]	; 12f44 <get_char@@Base+0x6c>
   12f24:	add	r1, pc, r1
   12f28:	strd	r2, [r1]
   12f2c:	mov	r3, r0
   12f30:	mov	r0, r3
   12f34:	add	sp, fp, #0
   12f38:	pop	{fp}		; (ldr fp, [sp], #4)
   12f3c:	bx	lr
   12f40:	strheq	sl, [r1], -r0
   12f44:	muleq	r1, ip, r0

00012f48 <push_back_chars@@Base>:
   12f48:	push	{fp, lr}
   12f4c:	add	fp, sp, #4
   12f50:	sub	sp, sp, #8
   12f54:	str	r0, [fp, #-8]
   12f58:	str	r1, [fp, #-12]
   12f5c:	ldr	r1, [pc, #196]	; 13028 <push_back_chars@@Base+0xe0>
   12f60:	add	r1, pc, r1
   12f64:	ldr	r3, [fp, #-8]
   12f68:	ldr	r2, [r3, #8]
   12f6c:	ldr	r3, [fp, #-12]
   12f70:	cmp	r2, r3
   12f74:	bcc	12f94 <push_back_chars@@Base+0x4c>
   12f78:	ldr	r3, [fp, #-8]
   12f7c:	ldr	r2, [r3, #8]
   12f80:	ldr	r3, [fp, #-12]
   12f84:	sub	r2, r2, r3
   12f88:	ldr	r3, [fp, #-8]
   12f8c:	str	r2, [r3, #8]
   12f90:	b	12ffc <push_back_chars@@Base+0xb4>
   12f94:	ldr	r3, [pc, #144]	; 1302c <push_back_chars@@Base+0xe4>
   12f98:	add	r3, pc, r3
   12f9c:	ldrd	r2, [r3]
   12fa0:	adds	r2, r2, #1
   12fa4:	adc	r3, r3, #0
   12fa8:	ldr	r0, [pc, #128]	; 13030 <push_back_chars@@Base+0xe8>
   12fac:	add	r0, pc, r0
   12fb0:	strd	r2, [r0]
   12fb4:	ldr	r3, [pc, #120]	; 13034 <push_back_chars@@Base+0xec>
   12fb8:	ldr	r3, [r1, r3]
   12fbc:	ldr	r3, [r3]
   12fc0:	mov	r2, #32
   12fc4:	mov	r1, #1
   12fc8:	ldr	r0, [pc, #104]	; 13038 <push_back_chars@@Base+0xf0>
   12fcc:	add	r0, pc, r0
   12fd0:	bl	11900 <fwrite@plt>
   12fd4:	ldr	r3, [pc, #96]	; 1303c <push_back_chars@@Base+0xf4>
   12fd8:	add	r3, pc, r3
   12fdc:	ldrd	r2, [r3, #16]
   12fe0:	adds	r2, r2, #1
   12fe4:	adc	r3, r3, #0
   12fe8:	ldr	r1, [pc, #80]	; 13040 <push_back_chars@@Base+0xf8>
   12fec:	add	r1, pc, r1
   12ff0:	strd	r2, [r1, #16]
   12ff4:	mov	r0, #1
   12ff8:	bl	11978 <exit@plt>
   12ffc:	ldr	r3, [pc, #64]	; 13044 <push_back_chars@@Base+0xfc>
   13000:	add	r3, pc, r3
   13004:	ldrd	r2, [r3, #8]
   13008:	adds	r2, r2, #1
   1300c:	adc	r3, r3, #0
   13010:	ldr	r1, [pc, #48]	; 13048 <push_back_chars@@Base+0x100>
   13014:	add	r1, pc, r1
   13018:	strd	r2, [r1, #8]
   1301c:	nop			; (mov r0, r0)
   13020:	sub	sp, fp, #4
   13024:	pop	{fp, pc}
   13028:	muleq	r1, r8, r0
   1302c:	andeq	sl, r1, r0, lsl r0
   13030:	strdeq	r9, [r1], -ip
   13034:	andeq	r0, r0, r4, lsr #1
   13038:	andeq	r8, r0, r8, ror r3
   1303c:	ldrdeq	r9, [r1], -r0
   13040:			; <UNDEFINED> instruction: 0x00019fbc
   13044:	andeq	r9, r1, r8, lsr #31
   13048:	muleq	r1, r4, pc	; <UNPREDICTABLE>

0001304c <push_back_one_char@@Base>:
   1304c:	push	{fp, lr}
   13050:	add	fp, sp, #4
   13054:	sub	sp, sp, #8
   13058:	str	r0, [fp, #-8]
   1305c:	ldr	r3, [pc, #80]	; 130b4 <push_back_one_char@@Base+0x68>
   13060:	add	r3, pc, r3
   13064:	ldrd	r2, [r3]
   13068:	adds	r2, r2, #1
   1306c:	adc	r3, r3, #0
   13070:	ldr	r1, [pc, #64]	; 130b8 <push_back_one_char@@Base+0x6c>
   13074:	add	r1, pc, r1
   13078:	strd	r2, [r1]
   1307c:	mov	r1, #1
   13080:	ldr	r0, [fp, #-8]
   13084:	bl	12f48 <push_back_chars@@Base>
   13088:	ldr	r3, [pc, #44]	; 130bc <push_back_one_char@@Base+0x70>
   1308c:	add	r3, pc, r3
   13090:	ldrd	r2, [r3, #8]
   13094:	adds	r2, r2, #1
   13098:	adc	r3, r3, #0
   1309c:	ldr	r1, [pc, #28]	; 130c0 <push_back_one_char@@Base+0x74>
   130a0:	add	r1, pc, r1
   130a4:	strd	r2, [r1, #8]
   130a8:	nop			; (mov r0, r0)
   130ac:	sub	sp, fp, #4
   130b0:	pop	{fp, pc}
   130b4:	andeq	r9, r1, r8, lsr pc
   130b8:	andeq	r9, r1, r4, lsr #30
   130bc:	andeq	r9, r1, ip, lsl #30
   130c0:	strdeq	r9, [r1], -r8

000130c4 <next@@Base>:
   130c4:	push	{r4, fp, lr}
   130c8:	add	fp, sp, #8
   130cc:	sub	sp, sp, #556	; 0x22c
   130d0:	str	r0, [fp, #-560]	; 0xfffffdd0
   130d4:	ldr	r4, [pc, #3660]	; 13f28 <next@@Base+0xe64>
   130d8:	add	r4, pc, r4
   130dc:	mov	r3, #0
   130e0:	str	r3, [fp, #-16]
   130e4:	mov	r3, #0
   130e8:	str	r3, [fp, #-20]	; 0xffffffec
   130ec:	mov	r3, #0
   130f0:	str	r3, [fp, #-24]	; 0xffffffe8
   130f4:	mov	r3, #0
   130f8:	str	r3, [fp, #-32]	; 0xffffffe0
   130fc:	mov	r3, #0
   13100:	str	r3, [fp, #-36]	; 0xffffffdc
   13104:	ldr	r3, [fp, #-560]	; 0xfffffdd0
   13108:	ldr	r3, [r3, #4]
   1310c:	cmp	r3, #0
   13110:	beq	1317c <next@@Base+0xb8>
   13114:	ldr	r3, [pc, #3600]	; 13f2c <next@@Base+0xe68>
   13118:	add	r3, pc, r3
   1311c:	ldrd	r2, [r3]
   13120:	adds	r2, r2, #1
   13124:	adc	r3, r3, #0
   13128:	ldr	r1, [pc, #3584]	; 13f30 <next@@Base+0xe6c>
   1312c:	add	r1, pc, r1
   13130:	strd	r2, [r1]
   13134:	ldr	r3, [fp, #-560]	; 0xfffffdd0
   13138:	ldr	r3, [r3, #4]
   1313c:	str	r3, [fp, #-40]	; 0xffffffd8
   13140:	ldr	r3, [fp, #-560]	; 0xfffffdd0
   13144:	ldr	r3, [r3, #4]
   13148:	ldr	r2, [r3]
   1314c:	ldr	r3, [fp, #-560]	; 0xfffffdd0
   13150:	str	r2, [r3, #4]
   13154:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13158:	ldr	r3, [r3, #4]
   1315c:	str	r3, [fp, #-32]	; 0xffffffe0
   13160:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13164:	mov	r2, #0
   13168:	str	r2, [r3, #4]
   1316c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13170:	bl	12e0c <free_stack_base@@Base>
   13174:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13178:	b	14de4 <next@@Base+0x1d20>
   1317c:	ldr	r3, [pc, #3504]	; 13f34 <next@@Base+0xe70>
   13180:	add	r3, pc, r3
   13184:	ldrd	r2, [r3, #8]
   13188:	adds	r2, r2, #1
   1318c:	adc	r3, r3, #0
   13190:	ldr	r1, [pc, #3488]	; 13f38 <next@@Base+0xe74>
   13194:	add	r1, pc, r1
   13198:	strd	r2, [r1, #8]
   1319c:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   131a0:	bl	12ed8 <get_char@@Base>
   131a4:	mov	r3, r0
   131a8:	strb	r3, [fp, #-25]	; 0xffffffe7
   131ac:	nop			; (mov r0, r0)
   131b0:	ldr	r3, [pc, #3460]	; 13f3c <next@@Base+0xe78>
   131b4:	add	r3, pc, r3
   131b8:	add	r3, r3, #736	; 0x2e0
   131bc:	ldrd	r2, [r3]
   131c0:	adds	r2, r2, #1
   131c4:	adc	r3, r3, #0
   131c8:	ldr	r1, [pc, #3440]	; 13f40 <next@@Base+0xe7c>
   131cc:	add	r1, pc, r1
   131d0:	add	r1, r1, #736	; 0x2e0
   131d4:	strd	r2, [r1]
   131d8:	b	14d6c <next@@Base+0x1ca8>
   131dc:	ldr	r3, [pc, #3424]	; 13f44 <next@@Base+0xe80>
   131e0:	add	r3, pc, r3
   131e4:	add	r3, r3, #752	; 0x2f0
   131e8:	ldrd	r2, [r3, #-8]
   131ec:	adds	r2, r2, #1
   131f0:	adc	r3, r3, #0
   131f4:	ldr	r1, [pc, #3404]	; 13f48 <next@@Base+0xe84>
   131f8:	add	r1, pc, r1
   131fc:	add	r1, r1, #752	; 0x2f0
   13200:	strd	r2, [r1, #-8]
   13204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13208:	cmp	r3, #5
   1320c:	addls	pc, pc, r3, lsl #2
   13210:	b	14d6c <next@@Base+0x1ca8>
   13214:	b	1322c <next@@Base+0x168>
   13218:	b	142e0 <next@@Base+0x121c>
   1321c:	b	14490 <next@@Base+0x13cc>
   13220:	b	14674 <next@@Base+0x15b0>
   13224:	b	148b4 <next@@Base+0x17f0>
   13228:	b	14ba0 <next@@Base+0x1adc>
   1322c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13230:	cmp	r3, #9
   13234:	beq	13290 <next@@Base+0x1cc>
   13238:	ldr	r3, [pc, #3340]	; 13f4c <next@@Base+0xe88>
   1323c:	add	r3, pc, r3
   13240:	ldrd	r2, [r3, #16]
   13244:	adds	r2, r2, #1
   13248:	adc	r3, r3, #0
   1324c:	ldr	r1, [pc, #3324]	; 13f50 <next@@Base+0xe8c>
   13250:	add	r1, pc, r1
   13254:	strd	r2, [r1, #16]
   13258:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1325c:	cmp	r3, #32
   13260:	beq	13290 <next@@Base+0x1cc>
   13264:	ldr	r3, [pc, #3304]	; 13f54 <next@@Base+0xe90>
   13268:	add	r3, pc, r3
   1326c:	ldrd	r2, [r3, #24]
   13270:	adds	r2, r2, #1
   13274:	adc	r3, r3, #0
   13278:	ldr	r1, [pc, #3288]	; 13f58 <next@@Base+0xe94>
   1327c:	add	r1, pc, r1
   13280:	strd	r2, [r1, #24]
   13284:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13288:	cmp	r3, #10
   1328c:	bne	132a4 <next@@Base+0x1e0>
   13290:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13294:	bl	12ed8 <get_char@@Base>
   13298:	mov	r3, r0
   1329c:	strb	r3, [fp, #-25]	; 0xffffffe7
   132a0:	b	142b4 <next@@Base+0x11f0>
   132a4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   132a8:	cmp	r3, #48	; 0x30
   132ac:	bne	13314 <next@@Base+0x250>
   132b0:	ldr	r3, [pc, #3236]	; 13f5c <next@@Base+0xe98>
   132b4:	add	r3, pc, r3
   132b8:	ldrd	r2, [r3, #32]
   132bc:	adds	r2, r2, #1
   132c0:	adc	r3, r3, #0
   132c4:	ldr	r1, [pc, #3220]	; 13f60 <next@@Base+0xe9c>
   132c8:	add	r1, pc, r1
   132cc:	strd	r2, [r1, #32]
   132d0:	mov	r0, #8
   132d4:	bl	11930 <malloc@plt>
   132d8:	mov	r3, r0
   132dc:	str	r3, [fp, #-32]	; 0xffffffe0
   132e0:	mov	r1, #0
   132e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   132e8:	bl	12468 <init_token_int_value@@Base>
   132ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   132f0:	ldr	r2, [pc, #3180]	; 13f64 <next@@Base+0xea0>
   132f4:	add	r2, pc, r2
   132f8:	ldrd	r0, [r2, #40]	; 0x28
   132fc:	adds	r0, r0, #1
   13300:	adc	r1, r1, #0
   13304:	ldr	r2, [pc, #3164]	; 13f68 <next@@Base+0xea4>
   13308:	add	r2, pc, r2
   1330c:	strd	r0, [r2, #40]	; 0x28
   13310:	b	14de4 <next@@Base+0x1d20>
   13314:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13318:	cmp	r3, #48	; 0x30
   1331c:	bls	133c4 <next@@Base+0x300>
   13320:	ldr	r3, [pc, #3140]	; 13f6c <next@@Base+0xea8>
   13324:	add	r3, pc, r3
   13328:	ldrd	r2, [r3, #48]	; 0x30
   1332c:	adds	r2, r2, #1
   13330:	adc	r3, r3, #0
   13334:	ldr	r1, [pc, #3124]	; 13f70 <next@@Base+0xeac>
   13338:	add	r1, pc, r1
   1333c:	strd	r2, [r1, #48]	; 0x30
   13340:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13344:	cmp	r3, #57	; 0x39
   13348:	bhi	133c4 <next@@Base+0x300>
   1334c:	ldr	r3, [pc, #3104]	; 13f74 <next@@Base+0xeb0>
   13350:	add	r3, pc, r3
   13354:	ldrd	r2, [r3, #56]	; 0x38
   13358:	adds	r2, r2, #1
   1335c:	adc	r3, r3, #0
   13360:	ldr	r1, [pc, #3088]	; 13f78 <next@@Base+0xeb4>
   13364:	add	r1, pc, r1
   13368:	strd	r2, [r1, #56]	; 0x38
   1336c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13370:	add	r2, r3, #1
   13374:	str	r2, [fp, #-20]	; 0xffffffec
   13378:	sub	r2, fp, #12
   1337c:	add	r3, r2, r3
   13380:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13384:	strb	r2, [r3, #-540]	; 0xfffffde4
   13388:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   1338c:	bl	12ed8 <get_char@@Base>
   13390:	mov	r3, r0
   13394:	strb	r3, [fp, #-25]	; 0xffffffe7
   13398:	mov	r3, #1
   1339c:	str	r3, [fp, #-24]	; 0xffffffe8
   133a0:	ldr	r3, [pc, #3028]	; 13f7c <next@@Base+0xeb8>
   133a4:	add	r3, pc, r3
   133a8:	ldrd	r2, [r3, #64]	; 0x40
   133ac:	adds	r2, r2, #1
   133b0:	adc	r3, r3, #0
   133b4:	ldr	r1, [pc, #3012]	; 13f80 <next@@Base+0xebc>
   133b8:	add	r1, pc, r1
   133bc:	strd	r2, [r1, #64]	; 0x40
   133c0:	b	142b4 <next@@Base+0x11f0>
   133c4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   133c8:	cmp	r3, #40	; 0x28
   133cc:	bne	13430 <next@@Base+0x36c>
   133d0:	ldr	r3, [pc, #2988]	; 13f84 <next@@Base+0xec0>
   133d4:	add	r3, pc, r3
   133d8:	ldrd	r2, [r3, #72]	; 0x48
   133dc:	adds	r2, r2, #1
   133e0:	adc	r3, r3, #0
   133e4:	ldr	r1, [pc, #2972]	; 13f88 <next@@Base+0xec4>
   133e8:	add	r1, pc, r1
   133ec:	strd	r2, [r1, #72]	; 0x48
   133f0:	mov	r0, #4
   133f4:	bl	11930 <malloc@plt>
   133f8:	mov	r3, r0
   133fc:	str	r3, [fp, #-32]	; 0xffffffe0
   13400:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13404:	bl	12530 <init_token_opar@@Base>
   13408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1340c:	ldr	r2, [pc, #2936]	; 13f8c <next@@Base+0xec8>
   13410:	add	r2, pc, r2
   13414:	ldrd	r0, [r2, #80]	; 0x50
   13418:	adds	r0, r0, #1
   1341c:	adc	r1, r1, #0
   13420:	ldr	r2, [pc, #2920]	; 13f90 <next@@Base+0xecc>
   13424:	add	r2, pc, r2
   13428:	strd	r0, [r2, #80]	; 0x50
   1342c:	b	14de4 <next@@Base+0x1d20>
   13430:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13434:	cmp	r3, #41	; 0x29
   13438:	bne	1349c <next@@Base+0x3d8>
   1343c:	ldr	r3, [pc, #2896]	; 13f94 <next@@Base+0xed0>
   13440:	add	r3, pc, r3
   13444:	ldrd	r2, [r3, #88]	; 0x58
   13448:	adds	r2, r2, #1
   1344c:	adc	r3, r3, #0
   13450:	ldr	r1, [pc, #2880]	; 13f98 <next@@Base+0xed4>
   13454:	add	r1, pc, r1
   13458:	strd	r2, [r1, #88]	; 0x58
   1345c:	mov	r0, #4
   13460:	bl	11930 <malloc@plt>
   13464:	mov	r3, r0
   13468:	str	r3, [fp, #-32]	; 0xffffffe0
   1346c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13470:	bl	12584 <init_token_cpar@@Base>
   13474:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13478:	ldr	r2, [pc, #2844]	; 13f9c <next@@Base+0xed8>
   1347c:	add	r2, pc, r2
   13480:	ldrd	r0, [r2, #96]	; 0x60
   13484:	adds	r0, r0, #1
   13488:	adc	r1, r1, #0
   1348c:	ldr	r2, [pc, #2828]	; 13fa0 <next@@Base+0xedc>
   13490:	add	r2, pc, r2
   13494:	strd	r0, [r2, #96]	; 0x60
   13498:	b	14de4 <next@@Base+0x1d20>
   1349c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   134a0:	cmp	r3, #123	; 0x7b
   134a4:	bne	13508 <next@@Base+0x444>
   134a8:	ldr	r3, [pc, #2804]	; 13fa4 <next@@Base+0xee0>
   134ac:	add	r3, pc, r3
   134b0:	ldrd	r2, [r3, #104]	; 0x68
   134b4:	adds	r2, r2, #1
   134b8:	adc	r3, r3, #0
   134bc:	ldr	r1, [pc, #2788]	; 13fa8 <next@@Base+0xee4>
   134c0:	add	r1, pc, r1
   134c4:	strd	r2, [r1, #104]	; 0x68
   134c8:	mov	r0, #4
   134cc:	bl	11930 <malloc@plt>
   134d0:	mov	r3, r0
   134d4:	str	r3, [fp, #-32]	; 0xffffffe0
   134d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   134dc:	bl	125d8 <init_token_obra@@Base>
   134e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   134e4:	ldr	r2, [pc, #2752]	; 13fac <next@@Base+0xee8>
   134e8:	add	r2, pc, r2
   134ec:	ldrd	r0, [r2, #112]	; 0x70
   134f0:	adds	r0, r0, #1
   134f4:	adc	r1, r1, #0
   134f8:	ldr	r2, [pc, #2736]	; 13fb0 <next@@Base+0xeec>
   134fc:	add	r2, pc, r2
   13500:	strd	r0, [r2, #112]	; 0x70
   13504:	b	14de4 <next@@Base+0x1d20>
   13508:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1350c:	cmp	r3, #125	; 0x7d
   13510:	bne	13574 <next@@Base+0x4b0>
   13514:	ldr	r3, [pc, #2712]	; 13fb4 <next@@Base+0xef0>
   13518:	add	r3, pc, r3
   1351c:	ldrd	r2, [r3, #120]	; 0x78
   13520:	adds	r2, r2, #1
   13524:	adc	r3, r3, #0
   13528:	ldr	r1, [pc, #2696]	; 13fb8 <next@@Base+0xef4>
   1352c:	add	r1, pc, r1
   13530:	strd	r2, [r1, #120]	; 0x78
   13534:	mov	r0, #4
   13538:	bl	11930 <malloc@plt>
   1353c:	mov	r3, r0
   13540:	str	r3, [fp, #-32]	; 0xffffffe0
   13544:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13548:	bl	1262c <init_token_cbra@@Base>
   1354c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13550:	ldr	r2, [pc, #2660]	; 13fbc <next@@Base+0xef8>
   13554:	add	r2, pc, r2
   13558:	ldrd	r0, [r2, #128]	; 0x80
   1355c:	adds	r0, r0, #1
   13560:	adc	r1, r1, #0
   13564:	ldr	r2, [pc, #2644]	; 13fc0 <next@@Base+0xefc>
   13568:	add	r2, pc, r2
   1356c:	strd	r0, [r2, #128]	; 0x80
   13570:	b	14de4 <next@@Base+0x1d20>
   13574:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13578:	cmp	r3, #59	; 0x3b
   1357c:	bne	135e0 <next@@Base+0x51c>
   13580:	ldr	r3, [pc, #2620]	; 13fc4 <next@@Base+0xf00>
   13584:	add	r3, pc, r3
   13588:	ldrd	r2, [r3, #136]	; 0x88
   1358c:	adds	r2, r2, #1
   13590:	adc	r3, r3, #0
   13594:	ldr	r1, [pc, #2604]	; 13fc8 <next@@Base+0xf04>
   13598:	add	r1, pc, r1
   1359c:	strd	r2, [r1, #136]	; 0x88
   135a0:	mov	r0, #4
   135a4:	bl	11930 <malloc@plt>
   135a8:	mov	r3, r0
   135ac:	str	r3, [fp, #-32]	; 0xffffffe0
   135b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135b4:	bl	126d4 <init_token_semicolon@@Base>
   135b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135bc:	ldr	r2, [pc, #2568]	; 13fcc <next@@Base+0xf08>
   135c0:	add	r2, pc, r2
   135c4:	ldrd	r0, [r2, #144]	; 0x90
   135c8:	adds	r0, r0, #1
   135cc:	adc	r1, r1, #0
   135d0:	ldr	r2, [pc, #2552]	; 13fd0 <next@@Base+0xf0c>
   135d4:	add	r2, pc, r2
   135d8:	strd	r0, [r2, #144]	; 0x90
   135dc:	b	14de4 <next@@Base+0x1d20>
   135e0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   135e4:	cmp	r3, #101	; 0x65
   135e8:	bne	13664 <next@@Base+0x5a0>
   135ec:	ldr	r3, [pc, #2528]	; 13fd4 <next@@Base+0xf10>
   135f0:	add	r3, pc, r3
   135f4:	ldrd	r2, [r3, #152]	; 0x98
   135f8:	adds	r2, r2, #1
   135fc:	adc	r3, r3, #0
   13600:	ldr	r1, [pc, #2512]	; 13fd8 <next@@Base+0xf14>
   13604:	add	r1, pc, r1
   13608:	strd	r2, [r1, #152]	; 0x98
   1360c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13610:	add	r2, r3, #1
   13614:	str	r2, [fp, #-20]	; 0xffffffec
   13618:	sub	r2, fp, #12
   1361c:	add	r3, r2, r3
   13620:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13624:	strb	r2, [r3, #-540]	; 0xfffffde4
   13628:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   1362c:	bl	12ed8 <get_char@@Base>
   13630:	mov	r3, r0
   13634:	strb	r3, [fp, #-25]	; 0xffffffe7
   13638:	mov	r3, #5
   1363c:	str	r3, [fp, #-24]	; 0xffffffe8
   13640:	ldr	r3, [pc, #2452]	; 13fdc <next@@Base+0xf18>
   13644:	add	r3, pc, r3
   13648:	ldrd	r2, [r3, #160]	; 0xa0
   1364c:	adds	r2, r2, #1
   13650:	adc	r3, r3, #0
   13654:	ldr	r1, [pc, #2436]	; 13fe0 <next@@Base+0xf1c>
   13658:	add	r1, pc, r1
   1365c:	strd	r2, [r1, #160]	; 0xa0
   13660:	b	142b4 <next@@Base+0x11f0>
   13664:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13668:	cmp	r3, #105	; 0x69
   1366c:	bne	136e8 <next@@Base+0x624>
   13670:	ldr	r3, [pc, #2412]	; 13fe4 <next@@Base+0xf20>
   13674:	add	r3, pc, r3
   13678:	ldrd	r2, [r3, #168]	; 0xa8
   1367c:	adds	r2, r2, #1
   13680:	adc	r3, r3, #0
   13684:	ldr	r1, [pc, #2396]	; 13fe8 <next@@Base+0xf24>
   13688:	add	r1, pc, r1
   1368c:	strd	r2, [r1, #168]	; 0xa8
   13690:	ldr	r3, [fp, #-20]	; 0xffffffec
   13694:	add	r2, r3, #1
   13698:	str	r2, [fp, #-20]	; 0xffffffec
   1369c:	sub	r2, fp, #12
   136a0:	add	r3, r2, r3
   136a4:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   136a8:	strb	r2, [r3, #-540]	; 0xfffffde4
   136ac:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   136b0:	bl	12ed8 <get_char@@Base>
   136b4:	mov	r3, r0
   136b8:	strb	r3, [fp, #-25]	; 0xffffffe7
   136bc:	mov	r3, #2
   136c0:	str	r3, [fp, #-24]	; 0xffffffe8
   136c4:	ldr	r3, [pc, #2336]	; 13fec <next@@Base+0xf28>
   136c8:	add	r3, pc, r3
   136cc:	ldrd	r2, [r3, #176]	; 0xb0
   136d0:	adds	r2, r2, #1
   136d4:	adc	r3, r3, #0
   136d8:	ldr	r1, [pc, #2320]	; 13ff0 <next@@Base+0xf2c>
   136dc:	add	r1, pc, r1
   136e0:	strd	r2, [r1, #176]	; 0xb0
   136e4:	b	142b4 <next@@Base+0x11f0>
   136e8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   136ec:	cmp	r3, #109	; 0x6d
   136f0:	bne	1376c <next@@Base+0x6a8>
   136f4:	ldr	r3, [pc, #2296]	; 13ff4 <next@@Base+0xf30>
   136f8:	add	r3, pc, r3
   136fc:	ldrd	r2, [r3, #184]	; 0xb8
   13700:	adds	r2, r2, #1
   13704:	adc	r3, r3, #0
   13708:	ldr	r1, [pc, #2280]	; 13ff8 <next@@Base+0xf34>
   1370c:	add	r1, pc, r1
   13710:	strd	r2, [r1, #184]	; 0xb8
   13714:	ldr	r3, [fp, #-20]	; 0xffffffec
   13718:	add	r2, r3, #1
   1371c:	str	r2, [fp, #-20]	; 0xffffffec
   13720:	sub	r2, fp, #12
   13724:	add	r3, r2, r3
   13728:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   1372c:	strb	r2, [r3, #-540]	; 0xfffffde4
   13730:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13734:	bl	12ed8 <get_char@@Base>
   13738:	mov	r3, r0
   1373c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13740:	mov	r3, #3
   13744:	str	r3, [fp, #-24]	; 0xffffffe8
   13748:	ldr	r3, [pc, #2220]	; 13ffc <next@@Base+0xf38>
   1374c:	add	r3, pc, r3
   13750:	ldrd	r2, [r3, #192]	; 0xc0
   13754:	adds	r2, r2, #1
   13758:	adc	r3, r3, #0
   1375c:	ldr	r1, [pc, #2204]	; 14000 <next@@Base+0xf3c>
   13760:	add	r1, pc, r1
   13764:	strd	r2, [r1, #192]	; 0xc0
   13768:	b	142b4 <next@@Base+0x11f0>
   1376c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13770:	cmp	r3, #114	; 0x72
   13774:	bne	137f0 <next@@Base+0x72c>
   13778:	ldr	r3, [pc, #2180]	; 14004 <next@@Base+0xf40>
   1377c:	add	r3, pc, r3
   13780:	ldrd	r2, [r3, #200]	; 0xc8
   13784:	adds	r2, r2, #1
   13788:	adc	r3, r3, #0
   1378c:	ldr	r1, [pc, #2164]	; 14008 <next@@Base+0xf44>
   13790:	add	r1, pc, r1
   13794:	strd	r2, [r1, #200]	; 0xc8
   13798:	ldr	r3, [fp, #-20]	; 0xffffffec
   1379c:	add	r2, r3, #1
   137a0:	str	r2, [fp, #-20]	; 0xffffffec
   137a4:	sub	r2, fp, #12
   137a8:	add	r3, r2, r3
   137ac:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   137b0:	strb	r2, [r3, #-540]	; 0xfffffde4
   137b4:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   137b8:	bl	12ed8 <get_char@@Base>
   137bc:	mov	r3, r0
   137c0:	strb	r3, [fp, #-25]	; 0xffffffe7
   137c4:	mov	r3, #4
   137c8:	str	r3, [fp, #-24]	; 0xffffffe8
   137cc:	ldr	r3, [pc, #2104]	; 1400c <next@@Base+0xf48>
   137d0:	add	r3, pc, r3
   137d4:	ldrd	r2, [r3, #208]	; 0xd0
   137d8:	adds	r2, r2, #1
   137dc:	adc	r3, r3, #0
   137e0:	ldr	r1, [pc, #2088]	; 14010 <next@@Base+0xf4c>
   137e4:	add	r1, pc, r1
   137e8:	strd	r2, [r1, #208]	; 0xd0
   137ec:	b	142b4 <next@@Base+0x11f0>
   137f0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   137f4:	cmp	r3, #33	; 0x21
   137f8:	bne	13974 <next@@Base+0x8b0>
   137fc:	ldr	r3, [pc, #2064]	; 14014 <next@@Base+0xf50>
   13800:	add	r3, pc, r3
   13804:	ldrd	r2, [r3, #216]	; 0xd8
   13808:	adds	r2, r2, #1
   1380c:	adc	r3, r3, #0
   13810:	ldr	r1, [pc, #2048]	; 14018 <next@@Base+0xf54>
   13814:	add	r1, pc, r1
   13818:	strd	r2, [r1, #216]	; 0xd8
   1381c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13820:	add	r2, r3, #1
   13824:	str	r2, [fp, #-20]	; 0xffffffec
   13828:	sub	r2, fp, #12
   1382c:	add	r3, r2, r3
   13830:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13834:	strb	r2, [r3, #-540]	; 0xfffffde4
   13838:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   1383c:	bl	12ed8 <get_char@@Base>
   13840:	mov	r3, r0
   13844:	strb	r3, [fp, #-25]	; 0xffffffe7
   13848:	mov	r0, #8
   1384c:	bl	11930 <malloc@plt>
   13850:	mov	r3, r0
   13854:	str	r3, [fp, #-32]	; 0xffffffe0
   13858:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1385c:	cmp	r3, #61	; 0x3d
   13860:	beq	138dc <next@@Base+0x818>
   13864:	ldr	r3, [pc, #1968]	; 1401c <next@@Base+0xf58>
   13868:	add	r3, pc, r3
   1386c:	ldrd	r2, [r3, #232]	; 0xe8
   13870:	adds	r2, r2, #1
   13874:	adc	r3, r3, #0
   13878:	ldr	r1, [pc, #1952]	; 14020 <next@@Base+0xf5c>
   1387c:	add	r1, pc, r1
   13880:	strd	r2, [r1, #232]	; 0xe8
   13884:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13888:	bl	1304c <push_back_one_char@@Base>
   1388c:	mov	r0, #2
   13890:	bl	11930 <malloc@plt>
   13894:	mov	r3, r0
   13898:	str	r3, [fp, #-16]
   1389c:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   138a0:	ldr	r3, [fp, #-16]
   138a4:	strb	r2, [r3]
   138a8:	ldr	r3, [fp, #-16]
   138ac:	add	r3, r3, #1
   138b0:	mov	r2, #0
   138b4:	strb	r2, [r3]
   138b8:	ldr	r3, [pc, #1892]	; 14024 <next@@Base+0xf60>
   138bc:	add	r3, pc, r3
   138c0:	ldrd	r2, [r3, #240]	; 0xf0
   138c4:	adds	r2, r2, #1
   138c8:	adc	r3, r3, #0
   138cc:	ldr	r1, [pc, #1876]	; 14028 <next@@Base+0xf64>
   138d0:	add	r1, pc, r1
   138d4:	strd	r2, [r1, #240]	; 0xf0
   138d8:	b	13938 <next@@Base+0x874>
   138dc:	mov	r0, #3
   138e0:	bl	11930 <malloc@plt>
   138e4:	mov	r3, r0
   138e8:	str	r3, [fp, #-16]
   138ec:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   138f0:	ldr	r3, [fp, #-16]
   138f4:	strb	r2, [r3]
   138f8:	ldr	r3, [fp, #-16]
   138fc:	add	r3, r3, #1
   13900:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13904:	strb	r2, [r3]
   13908:	ldr	r3, [fp, #-16]
   1390c:	add	r3, r3, #2
   13910:	mov	r2, #0
   13914:	strb	r2, [r3]
   13918:	ldr	r3, [pc, #1804]	; 1402c <next@@Base+0xf68>
   1391c:	add	r3, pc, r3
   13920:	ldrd	r2, [r3, #248]	; 0xf8
   13924:	adds	r2, r2, #1
   13928:	adc	r3, r3, #0
   1392c:	ldr	r1, [pc, #1788]	; 14030 <next@@Base+0xf6c>
   13930:	add	r1, pc, r1
   13934:	strd	r2, [r1, #248]	; 0xf8
   13938:	ldr	r1, [fp, #-16]
   1393c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13940:	bl	12824 <init_token_boolean_op@@Base>
   13944:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13948:	ldr	r2, [pc, #1764]	; 14034 <next@@Base+0xf70>
   1394c:	add	r2, pc, r2
   13950:	add	r2, r2, #256	; 0x100
   13954:	ldrd	r0, [r2]
   13958:	adds	r0, r0, #1
   1395c:	adc	r1, r1, #0
   13960:	ldr	r2, [pc, #1744]	; 14038 <next@@Base+0xf74>
   13964:	add	r2, pc, r2
   13968:	add	r2, r2, #256	; 0x100
   1396c:	strd	r0, [r2]
   13970:	b	14de4 <next@@Base+0x1d20>
   13974:	ldr	r3, [pc, #1728]	; 1403c <next@@Base+0xf78>
   13978:	add	r3, pc, r3
   1397c:	ldrd	r2, [r3, #224]	; 0xe0
   13980:	adds	r2, r2, #1
   13984:	adc	r3, r3, #0
   13988:	ldr	r1, [pc, #1712]	; 14040 <next@@Base+0xf7c>
   1398c:	add	r1, pc, r1
   13990:	strd	r2, [r1, #224]	; 0xe0
   13994:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13998:	cmp	r3, #60	; 0x3c
   1399c:	beq	139d4 <next@@Base+0x910>
   139a0:	ldr	r3, [pc, #1692]	; 14044 <next@@Base+0xf80>
   139a4:	add	r3, pc, r3
   139a8:	add	r3, r3, #272	; 0x110
   139ac:	ldrd	r2, [r3, #-8]
   139b0:	adds	r2, r2, #1
   139b4:	adc	r3, r3, #0
   139b8:	ldr	r1, [pc, #1672]	; 14048 <next@@Base+0xf84>
   139bc:	add	r1, pc, r1
   139c0:	add	r1, r1, #272	; 0x110
   139c4:	strd	r2, [r1, #-8]
   139c8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   139cc:	cmp	r3, #62	; 0x3e
   139d0:	bne	13b44 <next@@Base+0xa80>
   139d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139d8:	add	r2, r3, #1
   139dc:	str	r2, [fp, #-20]	; 0xffffffec
   139e0:	sub	r2, fp, #12
   139e4:	add	r3, r2, r3
   139e8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   139ec:	strb	r2, [r3, #-540]	; 0xfffffde4
   139f0:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   139f4:	bl	12ed8 <get_char@@Base>
   139f8:	mov	r3, r0
   139fc:	strb	r3, [fp, #-25]	; 0xffffffe7
   13a00:	mov	r0, #8
   13a04:	bl	11930 <malloc@plt>
   13a08:	mov	r3, r0
   13a0c:	str	r3, [fp, #-32]	; 0xffffffe0
   13a10:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13a14:	cmp	r3, #61	; 0x3d
   13a18:	beq	13aa4 <next@@Base+0x9e0>
   13a1c:	ldr	r3, [pc, #1576]	; 1404c <next@@Base+0xf88>
   13a20:	add	r3, pc, r3
   13a24:	add	r3, r3, #272	; 0x110
   13a28:	ldrd	r2, [r3]
   13a2c:	adds	r2, r2, #1
   13a30:	adc	r3, r3, #0
   13a34:	ldr	r1, [pc, #1556]	; 14050 <next@@Base+0xf8c>
   13a38:	add	r1, pc, r1
   13a3c:	add	r1, r1, #272	; 0x110
   13a40:	strd	r2, [r1]
   13a44:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13a48:	bl	1304c <push_back_one_char@@Base>
   13a4c:	mov	r0, #2
   13a50:	bl	11930 <malloc@plt>
   13a54:	mov	r3, r0
   13a58:	str	r3, [fp, #-16]
   13a5c:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   13a60:	ldr	r3, [fp, #-16]
   13a64:	strb	r2, [r3]
   13a68:	ldr	r3, [fp, #-16]
   13a6c:	add	r3, r3, #1
   13a70:	mov	r2, #0
   13a74:	strb	r2, [r3]
   13a78:	ldr	r3, [pc, #1492]	; 14054 <next@@Base+0xf90>
   13a7c:	add	r3, pc, r3
   13a80:	add	r3, r3, #288	; 0x120
   13a84:	ldrd	r2, [r3, #-8]
   13a88:	adds	r2, r2, #1
   13a8c:	adc	r3, r3, #0
   13a90:	ldr	r1, [pc, #1472]	; 14058 <next@@Base+0xf94>
   13a94:	add	r1, pc, r1
   13a98:	add	r1, r1, #288	; 0x120
   13a9c:	strd	r2, [r1, #-8]
   13aa0:	b	13b08 <next@@Base+0xa44>
   13aa4:	mov	r0, #3
   13aa8:	bl	11930 <malloc@plt>
   13aac:	mov	r3, r0
   13ab0:	str	r3, [fp, #-16]
   13ab4:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   13ab8:	ldr	r3, [fp, #-16]
   13abc:	strb	r2, [r3]
   13ac0:	ldr	r3, [fp, #-16]
   13ac4:	add	r3, r3, #1
   13ac8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13acc:	strb	r2, [r3]
   13ad0:	ldr	r3, [fp, #-16]
   13ad4:	add	r3, r3, #2
   13ad8:	mov	r2, #0
   13adc:	strb	r2, [r3]
   13ae0:	ldr	r3, [pc, #1396]	; 1405c <next@@Base+0xf98>
   13ae4:	add	r3, pc, r3
   13ae8:	add	r3, r3, #288	; 0x120
   13aec:	ldrd	r2, [r3]
   13af0:	adds	r2, r2, #1
   13af4:	adc	r3, r3, #0
   13af8:	ldr	r1, [pc, #1376]	; 14060 <next@@Base+0xf9c>
   13afc:	add	r1, pc, r1
   13b00:	add	r1, r1, #288	; 0x120
   13b04:	strd	r2, [r1]
   13b08:	ldr	r1, [fp, #-16]
   13b0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b10:	bl	12824 <init_token_boolean_op@@Base>
   13b14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13b18:	ldr	r2, [pc, #1348]	; 14064 <next@@Base+0xfa0>
   13b1c:	add	r2, pc, r2
   13b20:	add	r2, r2, #304	; 0x130
   13b24:	ldrd	r0, [r2, #-8]
   13b28:	adds	r0, r0, #1
   13b2c:	adc	r1, r1, #0
   13b30:	ldr	r2, [pc, #1328]	; 14068 <next@@Base+0xfa4>
   13b34:	add	r2, pc, r2
   13b38:	add	r2, r2, #304	; 0x130
   13b3c:	strd	r0, [r2, #-8]
   13b40:	b	14de4 <next@@Base+0x1d20>
   13b44:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13b48:	cmp	r3, #61	; 0x3d
   13b4c:	bne	13c90 <next@@Base+0xbcc>
   13b50:	ldr	r3, [pc, #1300]	; 1406c <next@@Base+0xfa8>
   13b54:	add	r3, pc, r3
   13b58:	add	r3, r3, #304	; 0x130
   13b5c:	ldrd	r2, [r3]
   13b60:	adds	r2, r2, #1
   13b64:	adc	r3, r3, #0
   13b68:	ldr	r1, [pc, #1280]	; 14070 <next@@Base+0xfac>
   13b6c:	add	r1, pc, r1
   13b70:	add	r1, r1, #304	; 0x130
   13b74:	strd	r2, [r1]
   13b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b7c:	add	r2, r3, #1
   13b80:	str	r2, [fp, #-20]	; 0xffffffec
   13b84:	sub	r2, fp, #12
   13b88:	add	r3, r2, r3
   13b8c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13b90:	strb	r2, [r3, #-540]	; 0xfffffde4
   13b94:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13b98:	bl	12ed8 <get_char@@Base>
   13b9c:	mov	r3, r0
   13ba0:	strb	r3, [fp, #-25]	; 0xffffffe7
   13ba4:	mov	r0, #8
   13ba8:	bl	11930 <malloc@plt>
   13bac:	mov	r3, r0
   13bb0:	str	r3, [fp, #-32]	; 0xffffffe0
   13bb4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13bb8:	cmp	r3, #61	; 0x3d
   13bbc:	beq	13bf0 <next@@Base+0xb2c>
   13bc0:	ldr	r3, [pc, #1196]	; 14074 <next@@Base+0xfb0>
   13bc4:	add	r3, pc, r3
   13bc8:	add	r3, r3, #320	; 0x140
   13bcc:	ldrd	r2, [r3, #-8]
   13bd0:	adds	r2, r2, #1
   13bd4:	adc	r3, r3, #0
   13bd8:	ldr	r1, [pc, #1176]	; 14078 <next@@Base+0xfb4>
   13bdc:	add	r1, pc, r1
   13be0:	add	r1, r1, #320	; 0x140
   13be4:	strd	r2, [r1, #-8]
   13be8:	mov	r0, #1
   13bec:	bl	11978 <exit@plt>
   13bf0:	ldr	r3, [pc, #1156]	; 1407c <next@@Base+0xfb8>
   13bf4:	add	r3, pc, r3
   13bf8:	add	r3, r3, #320	; 0x140
   13bfc:	ldrd	r2, [r3]
   13c00:	adds	r2, r2, #1
   13c04:	adc	r3, r3, #0
   13c08:	ldr	r1, [pc, #1136]	; 14080 <next@@Base+0xfbc>
   13c0c:	add	r1, pc, r1
   13c10:	add	r1, r1, #320	; 0x140
   13c14:	strd	r2, [r1]
   13c18:	mov	r0, #3
   13c1c:	bl	11930 <malloc@plt>
   13c20:	mov	r3, r0
   13c24:	str	r3, [fp, #-16]
   13c28:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   13c2c:	ldr	r3, [fp, #-16]
   13c30:	strb	r2, [r3]
   13c34:	ldr	r3, [fp, #-16]
   13c38:	add	r3, r3, #1
   13c3c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13c40:	strb	r2, [r3]
   13c44:	ldr	r3, [fp, #-16]
   13c48:	add	r3, r3, #2
   13c4c:	mov	r2, #0
   13c50:	strb	r2, [r3]
   13c54:	ldr	r1, [fp, #-16]
   13c58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c5c:	bl	12824 <init_token_boolean_op@@Base>
   13c60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13c64:	ldr	r2, [pc, #1048]	; 14084 <next@@Base+0xfc0>
   13c68:	add	r2, pc, r2
   13c6c:	add	r2, r2, #336	; 0x150
   13c70:	ldrd	r0, [r2, #-8]
   13c74:	adds	r0, r0, #1
   13c78:	adc	r1, r1, #0
   13c7c:	ldr	r2, [pc, #1028]	; 14088 <next@@Base+0xfc4>
   13c80:	add	r2, pc, r2
   13c84:	add	r2, r2, #336	; 0x150
   13c88:	strd	r0, [r2, #-8]
   13c8c:	b	14de4 <next@@Base+0x1d20>
   13c90:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c94:	cmp	r3, #124	; 0x7c
   13c98:	bne	13ddc <next@@Base+0xd18>
   13c9c:	ldr	r3, [pc, #1000]	; 1408c <next@@Base+0xfc8>
   13ca0:	add	r3, pc, r3
   13ca4:	add	r3, r3, #336	; 0x150
   13ca8:	ldrd	r2, [r3]
   13cac:	adds	r2, r2, #1
   13cb0:	adc	r3, r3, #0
   13cb4:	ldr	r1, [pc, #980]	; 14090 <next@@Base+0xfcc>
   13cb8:	add	r1, pc, r1
   13cbc:	add	r1, r1, #336	; 0x150
   13cc0:	strd	r2, [r1]
   13cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cc8:	add	r2, r3, #1
   13ccc:	str	r2, [fp, #-20]	; 0xffffffec
   13cd0:	sub	r2, fp, #12
   13cd4:	add	r3, r2, r3
   13cd8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13cdc:	strb	r2, [r3, #-540]	; 0xfffffde4
   13ce0:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13ce4:	bl	12ed8 <get_char@@Base>
   13ce8:	mov	r3, r0
   13cec:	strb	r3, [fp, #-25]	; 0xffffffe7
   13cf0:	mov	r0, #8
   13cf4:	bl	11930 <malloc@plt>
   13cf8:	mov	r3, r0
   13cfc:	str	r3, [fp, #-32]	; 0xffffffe0
   13d00:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13d04:	cmp	r3, #124	; 0x7c
   13d08:	beq	13d3c <next@@Base+0xc78>
   13d0c:	ldr	r3, [pc, #896]	; 14094 <next@@Base+0xfd0>
   13d10:	add	r3, pc, r3
   13d14:	add	r3, r3, #352	; 0x160
   13d18:	ldrd	r2, [r3, #-8]
   13d1c:	adds	r2, r2, #1
   13d20:	adc	r3, r3, #0
   13d24:	ldr	r1, [pc, #876]	; 14098 <next@@Base+0xfd4>
   13d28:	add	r1, pc, r1
   13d2c:	add	r1, r1, #352	; 0x160
   13d30:	strd	r2, [r1, #-8]
   13d34:	mov	r0, #1
   13d38:	bl	11978 <exit@plt>
   13d3c:	ldr	r3, [pc, #856]	; 1409c <next@@Base+0xfd8>
   13d40:	add	r3, pc, r3
   13d44:	add	r3, r3, #352	; 0x160
   13d48:	ldrd	r2, [r3]
   13d4c:	adds	r2, r2, #1
   13d50:	adc	r3, r3, #0
   13d54:	ldr	r1, [pc, #836]	; 140a0 <next@@Base+0xfdc>
   13d58:	add	r1, pc, r1
   13d5c:	add	r1, r1, #352	; 0x160
   13d60:	strd	r2, [r1]
   13d64:	mov	r0, #3
   13d68:	bl	11930 <malloc@plt>
   13d6c:	mov	r3, r0
   13d70:	str	r3, [fp, #-16]
   13d74:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   13d78:	ldr	r3, [fp, #-16]
   13d7c:	strb	r2, [r3]
   13d80:	ldr	r3, [fp, #-16]
   13d84:	add	r3, r3, #1
   13d88:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13d8c:	strb	r2, [r3]
   13d90:	ldr	r3, [fp, #-16]
   13d94:	add	r3, r3, #2
   13d98:	mov	r2, #0
   13d9c:	strb	r2, [r3]
   13da0:	ldr	r1, [fp, #-16]
   13da4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13da8:	bl	12824 <init_token_boolean_op@@Base>
   13dac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13db0:	ldr	r2, [pc, #748]	; 140a4 <next@@Base+0xfe0>
   13db4:	add	r2, pc, r2
   13db8:	add	r2, r2, #368	; 0x170
   13dbc:	ldrd	r0, [r2, #-8]
   13dc0:	adds	r0, r0, #1
   13dc4:	adc	r1, r1, #0
   13dc8:	ldr	r2, [pc, #728]	; 140a8 <next@@Base+0xfe4>
   13dcc:	add	r2, pc, r2
   13dd0:	add	r2, r2, #368	; 0x170
   13dd4:	strd	r0, [r2, #-8]
   13dd8:	b	14de4 <next@@Base+0x1d20>
   13ddc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13de0:	cmp	r3, #38	; 0x26
   13de4:	bne	1423c <next@@Base+0x1178>
   13de8:	ldr	r3, [pc, #700]	; 140ac <next@@Base+0xfe8>
   13dec:	add	r3, pc, r3
   13df0:	add	r3, r3, #368	; 0x170
   13df4:	ldrd	r2, [r3]
   13df8:	adds	r2, r2, #1
   13dfc:	adc	r3, r3, #0
   13e00:	ldr	r1, [pc, #680]	; 140b0 <next@@Base+0xfec>
   13e04:	add	r1, pc, r1
   13e08:	add	r1, r1, #368	; 0x170
   13e0c:	strd	r2, [r1]
   13e10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e14:	add	r2, r3, #1
   13e18:	str	r2, [fp, #-20]	; 0xffffffec
   13e1c:	sub	r2, fp, #12
   13e20:	add	r3, r2, r3
   13e24:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13e28:	strb	r2, [r3, #-540]	; 0xfffffde4
   13e2c:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   13e30:	bl	12ed8 <get_char@@Base>
   13e34:	mov	r3, r0
   13e38:	strb	r3, [fp, #-25]	; 0xffffffe7
   13e3c:	mov	r0, #8
   13e40:	bl	11930 <malloc@plt>
   13e44:	mov	r3, r0
   13e48:	str	r3, [fp, #-32]	; 0xffffffe0
   13e4c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13e50:	cmp	r3, #38	; 0x26
   13e54:	beq	13e88 <next@@Base+0xdc4>
   13e58:	ldr	r3, [pc, #596]	; 140b4 <next@@Base+0xff0>
   13e5c:	add	r3, pc, r3
   13e60:	add	r3, r3, #384	; 0x180
   13e64:	ldrd	r2, [r3]
   13e68:	adds	r2, r2, #1
   13e6c:	adc	r3, r3, #0
   13e70:	ldr	r1, [pc, #576]	; 140b8 <next@@Base+0xff4>
   13e74:	add	r1, pc, r1
   13e78:	add	r1, r1, #384	; 0x180
   13e7c:	strd	r2, [r1]
   13e80:	mov	r0, #1
   13e84:	bl	11978 <exit@plt>
   13e88:	ldr	r3, [pc, #556]	; 140bc <next@@Base+0xff8>
   13e8c:	add	r3, pc, r3
   13e90:	add	r3, r3, #400	; 0x190
   13e94:	ldrd	r2, [r3, #-8]
   13e98:	adds	r2, r2, #1
   13e9c:	adc	r3, r3, #0
   13ea0:	ldr	r1, [pc, #536]	; 140c0 <next@@Base+0xffc>
   13ea4:	add	r1, pc, r1
   13ea8:	add	r1, r1, #400	; 0x190
   13eac:	strd	r2, [r1, #-8]
   13eb0:	mov	r0, #3
   13eb4:	bl	11930 <malloc@plt>
   13eb8:	mov	r3, r0
   13ebc:	str	r3, [fp, #-16]
   13ec0:	ldrb	r2, [fp, #-552]	; 0xfffffdd8
   13ec4:	ldr	r3, [fp, #-16]
   13ec8:	strb	r2, [r3]
   13ecc:	ldr	r3, [fp, #-16]
   13ed0:	add	r3, r3, #1
   13ed4:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   13ed8:	strb	r2, [r3]
   13edc:	ldr	r3, [fp, #-16]
   13ee0:	add	r3, r3, #2
   13ee4:	mov	r2, #0
   13ee8:	strb	r2, [r3]
   13eec:	ldr	r1, [fp, #-16]
   13ef0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ef4:	bl	12824 <init_token_boolean_op@@Base>
   13ef8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13efc:	ldr	r2, [pc, #448]	; 140c4 <next@@Base+0x1000>
   13f00:	add	r2, pc, r2
   13f04:	add	r2, r2, #400	; 0x190
   13f08:	ldrd	r0, [r2]
   13f0c:	adds	r0, r0, #1
   13f10:	adc	r1, r1, #0
   13f14:	ldr	r2, [pc, #428]	; 140c8 <next@@Base+0x1004>
   13f18:	add	r2, pc, r2
   13f1c:	add	r2, r2, #400	; 0x190
   13f20:	strd	r0, [r2]
   13f24:	b	14de4 <next@@Base+0x1d20>
   13f28:	andeq	r8, r1, r0, lsr #30
   13f2c:	andeq	r9, r1, r8, ror fp
   13f30:	andeq	r9, r1, r4, ror #22
   13f34:	andeq	r9, r1, r0, lsl fp
   13f38:	strdeq	r9, [r1], -ip
   13f3c:	ldrdeq	r9, [r1], -ip
   13f40:	andeq	r9, r1, r4, asr #21
   13f44:			; <UNDEFINED> instruction: 0x00019ab0
   13f48:	muleq	r1, r8, sl
   13f4c:	andeq	r9, r1, r4, asr sl
   13f50:	andeq	r9, r1, r0, asr #20
   13f54:	andeq	r9, r1, r8, lsr #20
   13f58:	andeq	r9, r1, r4, lsl sl
   13f5c:	ldrdeq	r9, [r1], -ip
   13f60:	andeq	r9, r1, r8, asr #19
   13f64:	muleq	r1, ip, r9
   13f68:	andeq	r9, r1, r8, lsl #19
   13f6c:	andeq	r9, r1, ip, ror #18
   13f70:	andeq	r9, r1, r8, asr r9
   13f74:	andeq	r9, r1, r0, asr #18
   13f78:	andeq	r9, r1, ip, lsr #18
   13f7c:	andeq	r9, r1, ip, ror #17
   13f80:	ldrdeq	r9, [r1], -r8
   13f84:			; <UNDEFINED> instruction: 0x000198bc
   13f88:	andeq	r9, r1, r8, lsr #17
   13f8c:	andeq	r9, r1, r0, lsl #17
   13f90:	andeq	r9, r1, ip, ror #16
   13f94:	andeq	r9, r1, r0, asr r8
   13f98:	andeq	r9, r1, ip, lsr r8
   13f9c:	andeq	r9, r1, r4, lsl r8
   13fa0:	andeq	r9, r1, r0, lsl #16
   13fa4:	andeq	r9, r1, r4, ror #15
   13fa8:	ldrdeq	r9, [r1], -r0
   13fac:	andeq	r9, r1, r8, lsr #15
   13fb0:	muleq	r1, r4, r7
   13fb4:	andeq	r9, r1, r8, ror r7
   13fb8:	andeq	r9, r1, r4, ror #14
   13fbc:	andeq	r9, r1, ip, lsr r7
   13fc0:	andeq	r9, r1, r8, lsr #14
   13fc4:	andeq	r9, r1, ip, lsl #14
   13fc8:	strdeq	r9, [r1], -r8
   13fcc:	ldrdeq	r9, [r1], -r0
   13fd0:			; <UNDEFINED> instruction: 0x000196bc
   13fd4:	andeq	r9, r1, r0, lsr #13
   13fd8:	andeq	r9, r1, ip, lsl #13
   13fdc:	andeq	r9, r1, ip, asr #12
   13fe0:	andeq	r9, r1, r8, lsr r6
   13fe4:	andeq	r9, r1, ip, lsl r6
   13fe8:	andeq	r9, r1, r8, lsl #12
   13fec:	andeq	r9, r1, r8, asr #11
   13ff0:			; <UNDEFINED> instruction: 0x000195b4
   13ff4:	muleq	r1, r8, r5
   13ff8:	andeq	r9, r1, r4, lsl #11
   13ffc:	andeq	r9, r1, r4, asr #10
   14000:	andeq	r9, r1, r0, lsr r5
   14004:	andeq	r9, r1, r4, lsl r5
   14008:	andeq	r9, r1, r0, lsl #10
   1400c:	andeq	r9, r1, r0, asr #9
   14010:	andeq	r9, r1, ip, lsr #9
   14014:	muleq	r1, r0, r4
   14018:	andeq	r9, r1, ip, ror r4
   1401c:	andeq	r9, r1, r8, lsr #8
   14020:	andeq	r9, r1, r4, lsl r4
   14024:	ldrdeq	r9, [r1], -r4
   14028:	andeq	r9, r1, r0, asr #7
   1402c:	andeq	r9, r1, r4, ror r3
   14030:	andeq	r9, r1, r0, ror #6
   14034:	andeq	r9, r1, r4, asr #6
   14038:	andeq	r9, r1, ip, lsr #6
   1403c:	andeq	r9, r1, r8, lsl r3
   14040:	andeq	r9, r1, r4, lsl #6
   14044:	andeq	r9, r1, ip, ror #5
   14048:	ldrdeq	r9, [r1], -r4
   1404c:	andeq	r9, r1, r0, ror r2
   14050:	andeq	r9, r1, r8, asr r2
   14054:	andeq	r9, r1, r4, lsl r2
   14058:	strdeq	r9, [r1], -ip
   1405c:	andeq	r9, r1, ip, lsr #3
   14060:	muleq	r1, r4, r1
   14064:	andeq	r9, r1, r4, ror r1
   14068:	andeq	r9, r1, ip, asr r1
   1406c:	andeq	r9, r1, ip, lsr r1
   14070:	andeq	r9, r1, r4, lsr #2
   14074:	andeq	r9, r1, ip, asr #1
   14078:	strheq	r9, [r1], -r4
   1407c:	muleq	r1, ip, r0
   14080:	andeq	r9, r1, r4, lsl #1
   14084:	andeq	r9, r1, r8, lsr #32
   14088:	andeq	r9, r1, r0, lsl r0
   1408c:	strdeq	r8, [r1], -r0
   14090:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14094:	andeq	r8, r1, r0, lsl #31
   14098:	andeq	r8, r1, r8, ror #30
   1409c:	andeq	r8, r1, r0, asr pc
   140a0:	andeq	r8, r1, r8, lsr pc
   140a4:	ldrdeq	r8, [r1], -ip
   140a8:	andeq	r8, r1, r4, asr #29
   140ac:	andeq	r8, r1, r4, lsr #29
   140b0:	andeq	r8, r1, ip, lsl #29
   140b4:	andeq	r8, r1, r4, lsr lr
   140b8:	andeq	r8, r1, ip, lsl lr
   140bc:	andeq	r8, r1, r4, lsl #28
   140c0:	andeq	r8, r1, ip, ror #27
   140c4:	muleq	r1, r0, sp
   140c8:	andeq	r8, r1, r8, ror sp
   140cc:	andeq	r8, r1, r0, asr sl
   140d0:	andeq	r8, r1, r8, lsr sl
   140d4:	andeq	r0, r0, r4, lsr #1
   140d8:	strdeq	r7, [r0], -r0
   140dc:	andeq	r8, r1, r8, lsl #20
   140e0:	strdeq	r8, [r1], -r0
   140e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   140e8:	andeq	r8, r1, r0, asr #19
   140ec:	andeq	r8, r1, ip, lsr #19
   140f0:	muleq	r1, r4, r9
   140f4:	andeq	r8, r1, r0, lsl #19
   140f8:	andeq	r8, r1, r8, ror #18
   140fc:	andeq	r8, r1, r0, lsr #18
   14100:	andeq	r8, r1, r8, lsl #18
   14104:	strdeq	r8, [r1], -r4
   14108:	ldrdeq	r8, [r1], -ip
   1410c:			; <UNDEFINED> instruction: 0x000188b8
   14110:	andeq	r8, r1, r0, lsr #17
   14114:	andeq	r8, r1, r0, ror #16
   14118:	andeq	r8, r1, r8, asr #16
   1411c:	andeq	r8, r1, r8, lsr #16
   14120:	andeq	r8, r1, r0, lsl r8
   14124:	andeq	r8, r1, r8, ror #15
   14128:	ldrdeq	r8, [r1], -r0
   1412c:	andeq	r8, r1, r8, lsl #15
   14130:	andeq	r8, r1, r0, ror r7
   14134:	andeq	r8, r1, r8, asr r7
   14138:	andeq	r8, r1, r0, asr #14
   1413c:	andeq	r8, r1, r4, lsl r7
   14140:	strdeq	r8, [r1], -ip
   14144:	andeq	r8, r1, r8, ror #13
   14148:	ldrdeq	r8, [r1], -r0
   1414c:	andeq	r8, r1, r4, ror r6
   14150:	andeq	r8, r1, ip, asr r6
   14154:	andeq	r8, r1, r8, asr #12
   14158:	andeq	r8, r1, r0, lsr r6
   1415c:	andeq	r8, r1, ip, lsl #12
   14160:	strdeq	r8, [r1], -r4
   14164:	ldrdeq	r8, [r1], -ip
   14168:	andeq	r8, r1, r4, asr #11
   1416c:	andeq	r8, r1, ip, ror r5
   14170:	andeq	r8, r1, r4, ror #10
   14174:	andeq	r8, r1, ip, asr #10
   14178:	andeq	r8, r1, r4, lsr r5
   1417c:	andeq	r8, r1, ip, ror #9
   14180:	ldrdeq	r8, [r1], -r4
   14184:			; <UNDEFINED> instruction: 0x000184bc
   14188:	andeq	r8, r1, r4, lsr #9
   1418c:	andeq	r8, r1, r4, lsl #8
   14190:	andeq	r8, r1, ip, ror #7
   14194:	andeq	r8, r1, ip, asr #7
   14198:			; <UNDEFINED> instruction: 0x000183b4
   1419c:	muleq	r1, ip, r3
   141a0:	andeq	r8, r1, r4, lsl #7
   141a4:	andeq	r8, r1, ip, lsr r3
   141a8:	andeq	r8, r1, r4, lsr #6
   141ac:	andeq	r8, r1, ip, lsl #6
   141b0:	strdeq	r8, [r1], -r4
   141b4:	andeq	r8, r1, ip, lsr #5
   141b8:	muleq	r1, r4, r2
   141bc:	andeq	r8, r1, ip, ror r2
   141c0:	andeq	r8, r1, r4, ror #4
   141c4:	andeq	r8, r1, ip, lsl r2
   141c8:	andeq	r8, r1, r4, lsl #4
   141cc:	andeq	r8, r1, ip, ror #3
   141d0:	ldrdeq	r8, [r1], -r4
   141d4:	andeq	r8, r1, ip, lsl #3
   141d8:	andeq	r8, r1, r4, ror r1
   141dc:	andeq	r8, r1, ip, asr r1
   141e0:	andeq	r8, r1, r4, asr #2
   141e4:	andeq	r8, r1, r8, lsl r1
   141e8:	andeq	r8, r1, r0, lsl #2
   141ec:	andeq	r8, r1, r0, ror #1
   141f0:	andeq	r8, r1, r8, asr #1
   141f4:	strheq	r8, [r1], -r0
   141f8:	muleq	r1, r8, r0
   141fc:	andeq	r8, r1, r0, asr r0
   14200:	andeq	r8, r1, r8, lsr r0
   14204:	andeq	r8, r1, r0, lsr #32
   14208:	andeq	r8, r1, r8
   1420c:	andeq	r7, r1, r0, asr #31
   14210:	andeq	r7, r1, r8, lsr #31
   14214:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14218:	andeq	r7, r1, r8, ror pc
   1421c:	andeq	r7, r1, ip, asr #30
   14220:	andeq	r7, r1, r4, lsr pc
   14224:	andeq	r7, r1, r4, lsl pc
   14228:	strdeq	r7, [r1], -ip
   1422c:	ldrdeq	r7, [r1], -r0
   14230:			; <UNDEFINED> instruction: 0x00017eb8
   14234:	andeq	r7, r1, r8, lsr #29
   14238:	muleq	r1, r0, lr
   1423c:	ldr	r3, [pc, #-376]	; 140cc <next@@Base+0x1008>
   14240:	add	r3, pc, r3
   14244:	add	r3, r3, #384	; 0x180
   14248:	ldrd	r2, [r3, #-8]
   1424c:	adds	r2, r2, #1
   14250:	adc	r3, r3, #0
   14254:	ldr	r1, [pc, #-396]	; 140d0 <next@@Base+0x100c>
   14258:	add	r1, pc, r1
   1425c:	add	r1, r1, #384	; 0x180
   14260:	strd	r2, [r1, #-8]
   14264:	ldr	r3, [pc, #-408]	; 140d4 <next@@Base+0x1010>
   14268:	ldr	r3, [r4, r3]
   1426c:	ldr	r3, [r3]
   14270:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14274:	ldr	r1, [pc, #-420]	; 140d8 <next@@Base+0x1014>
   14278:	add	r1, pc, r1
   1427c:	mov	r0, r3
   14280:	bl	1199c <fprintf@plt>
   14284:	ldr	r3, [pc, #-432]	; 140dc <next@@Base+0x1018>
   14288:	add	r3, pc, r3
   1428c:	add	r3, r3, #416	; 0x1a0
   14290:	ldrd	r2, [r3, #-8]
   14294:	adds	r2, r2, #1
   14298:	adc	r3, r3, #0
   1429c:	ldr	r1, [pc, #-452]	; 140e0 <next@@Base+0x101c>
   142a0:	add	r1, pc, r1
   142a4:	add	r1, r1, #416	; 0x1a0
   142a8:	strd	r2, [r1, #-8]
   142ac:	mov	r0, #1
   142b0:	bl	11978 <exit@plt>
   142b4:	ldr	r3, [pc, #-472]	; 140e4 <next@@Base+0x1020>
   142b8:	add	r3, pc, r3
   142bc:	add	r3, r3, #416	; 0x1a0
   142c0:	ldrd	r2, [r3]
   142c4:	adds	r2, r2, #1
   142c8:	adc	r3, r3, #0
   142cc:	ldr	r1, [pc, #-492]	; 140e8 <next@@Base+0x1024>
   142d0:	add	r1, pc, r1
   142d4:	add	r1, r1, #416	; 0x1a0
   142d8:	strd	r2, [r1]
   142dc:	b	14d6c <next@@Base+0x1ca8>
   142e0:	ldr	r3, [pc, #-508]	; 140ec <next@@Base+0x1028>
   142e4:	add	r3, pc, r3
   142e8:	add	r3, r3, #432	; 0x1b0
   142ec:	ldrd	r2, [r3, #-8]
   142f0:	adds	r2, r2, #1
   142f4:	adc	r3, r3, #0
   142f8:	ldr	r1, [pc, #-528]	; 140f0 <next@@Base+0x102c>
   142fc:	add	r1, pc, r1
   14300:	add	r1, r1, #432	; 0x1b0
   14304:	strd	r2, [r1, #-8]
   14308:	b	14360 <next@@Base+0x129c>
   1430c:	ldr	r3, [pc, #-544]	; 140f4 <next@@Base+0x1030>
   14310:	add	r3, pc, r3
   14314:	add	r3, r3, #448	; 0x1c0
   14318:	ldrd	r2, [r3]
   1431c:	adds	r2, r2, #1
   14320:	adc	r3, r3, #0
   14324:	ldr	r1, [pc, #-564]	; 140f8 <next@@Base+0x1034>
   14328:	add	r1, pc, r1
   1432c:	add	r1, r1, #448	; 0x1c0
   14330:	strd	r2, [r1]
   14334:	ldr	r3, [fp, #-20]	; 0xffffffec
   14338:	add	r2, r3, #1
   1433c:	str	r2, [fp, #-20]	; 0xffffffec
   14340:	sub	r2, fp, #12
   14344:	add	r3, r2, r3
   14348:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   1434c:	strb	r2, [r3, #-540]	; 0xfffffde4
   14350:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14354:	bl	12ed8 <get_char@@Base>
   14358:	mov	r3, r0
   1435c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14360:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14364:	cmp	r3, #47	; 0x2f
   14368:	bhi	14398 <next@@Base+0x12d4>
   1436c:	ldr	r3, [pc, #-632]	; 140fc <next@@Base+0x1038>
   14370:	add	r3, pc, r3
   14374:	add	r3, r3, #448	; 0x1c0
   14378:	ldrd	r2, [r3, #-8]
   1437c:	adds	r2, r2, #1
   14380:	adc	r3, r3, #0
   14384:	ldr	r1, [pc, #-652]	; 14100 <next@@Base+0x103c>
   14388:	add	r1, pc, r1
   1438c:	add	r1, r1, #448	; 0x1c0
   14390:	strd	r2, [r1, #-8]
   14394:	b	143cc <next@@Base+0x1308>
   14398:	ldr	r3, [pc, #-668]	; 14104 <next@@Base+0x1040>
   1439c:	add	r3, pc, r3
   143a0:	add	r3, r3, #432	; 0x1b0
   143a4:	ldrd	r2, [r3]
   143a8:	adds	r2, r2, #1
   143ac:	adc	r3, r3, #0
   143b0:	ldr	r1, [pc, #-688]	; 14108 <next@@Base+0x1044>
   143b4:	add	r1, pc, r1
   143b8:	add	r1, r1, #432	; 0x1b0
   143bc:	strd	r2, [r1]
   143c0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   143c4:	cmp	r3, #57	; 0x39
   143c8:	bls	1430c <next@@Base+0x1248>
   143cc:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   143d0:	bl	1304c <push_back_one_char@@Base>
   143d4:	ldr	r3, [pc, #-720]	; 1410c <next@@Base+0x1048>
   143d8:	add	r3, pc, r3
   143dc:	add	r3, r3, #464	; 0x1d0
   143e0:	ldrd	r2, [r3, #-8]
   143e4:	adds	r2, r2, #1
   143e8:	adc	r3, r3, #0
   143ec:	ldr	r1, [pc, #-740]	; 14110 <next@@Base+0x104c>
   143f0:	add	r1, pc, r1
   143f4:	add	r1, r1, #464	; 0x1d0
   143f8:	strd	r2, [r1, #-8]
   143fc:	sub	r2, fp, #552	; 0x228
   14400:	ldr	r3, [fp, #-20]	; 0xffffffec
   14404:	add	r3, r2, r3
   14408:	mov	r2, #0
   1440c:	strb	r2, [r3]
   14410:	mov	r0, #8
   14414:	bl	11930 <malloc@plt>
   14418:	mov	r3, r0
   1441c:	str	r3, [fp, #-32]	; 0xffffffe0
   14420:	sub	r3, fp, #552	; 0x228
   14424:	mov	r0, r3
   14428:	bl	11a2c <atoi@plt>
   1442c:	ldr	r3, [pc, #-800]	; 14114 <next@@Base+0x1050>
   14430:	add	r3, pc, r3
   14434:	add	r3, r3, #464	; 0x1d0
   14438:	ldrd	r2, [r3]
   1443c:	adds	r2, r2, #1
   14440:	adc	r3, r3, #0
   14444:	ldr	r1, [pc, #-820]	; 14118 <next@@Base+0x1054>
   14448:	add	r1, pc, r1
   1444c:	add	r1, r1, #464	; 0x1d0
   14450:	strd	r2, [r1]
   14454:	mov	r1, r0
   14458:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1445c:	bl	12468 <init_token_int_value@@Base>
   14460:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14464:	ldr	r2, [pc, #-848]	; 1411c <next@@Base+0x1058>
   14468:	add	r2, pc, r2
   1446c:	add	r2, r2, #480	; 0x1e0
   14470:	ldrd	r0, [r2, #-8]
   14474:	adds	r0, r0, #1
   14478:	adc	r1, r1, #0
   1447c:	ldr	r2, [pc, #-868]	; 14120 <next@@Base+0x105c>
   14480:	add	r2, pc, r2
   14484:	add	r2, r2, #480	; 0x1e0
   14488:	strd	r0, [r2, #-8]
   1448c:	b	14de4 <next@@Base+0x1d20>
   14490:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14494:	cmp	r3, #102	; 0x66
   14498:	beq	145a4 <next@@Base+0x14e0>
   1449c:	cmp	r3, #110	; 0x6e
   144a0:	bne	14644 <next@@Base+0x1580>
   144a4:	ldr	r3, [pc, #-904]	; 14124 <next@@Base+0x1060>
   144a8:	add	r3, pc, r3
   144ac:	add	r3, r3, #496	; 0x1f0
   144b0:	ldrd	r2, [r3]
   144b4:	adds	r2, r2, #1
   144b8:	adc	r3, r3, #0
   144bc:	ldr	r1, [pc, #-924]	; 14128 <next@@Base+0x1064>
   144c0:	add	r1, pc, r1
   144c4:	add	r1, r1, #496	; 0x1f0
   144c8:	strd	r2, [r1]
   144cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d0:	add	r2, r3, #1
   144d4:	str	r2, [fp, #-20]	; 0xffffffec
   144d8:	sub	r2, fp, #12
   144dc:	add	r3, r2, r3
   144e0:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   144e4:	strb	r2, [r3, #-540]	; 0xfffffde4
   144e8:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   144ec:	bl	12ed8 <get_char@@Base>
   144f0:	mov	r3, r0
   144f4:	strb	r3, [fp, #-25]	; 0xffffffe7
   144f8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   144fc:	cmp	r3, #116	; 0x74
   14500:	beq	14534 <next@@Base+0x1470>
   14504:	ldr	r3, [pc, #-992]	; 1412c <next@@Base+0x1068>
   14508:	add	r3, pc, r3
   1450c:	add	r3, r3, #512	; 0x200
   14510:	ldrd	r2, [r3, #-8]
   14514:	adds	r2, r2, #1
   14518:	adc	r3, r3, #0
   1451c:	ldr	r1, [pc, #-1012]	; 14130 <next@@Base+0x106c>
   14520:	add	r1, pc, r1
   14524:	add	r1, r1, #512	; 0x200
   14528:	strd	r2, [r1, #-8]
   1452c:	mov	r0, #1
   14530:	bl	11978 <exit@plt>
   14534:	ldr	r3, [pc, #-1032]	; 14134 <next@@Base+0x1070>
   14538:	add	r3, pc, r3
   1453c:	add	r3, r3, #512	; 0x200
   14540:	ldrd	r2, [r3]
   14544:	adds	r2, r2, #1
   14548:	adc	r3, r3, #0
   1454c:	ldr	r1, [pc, #-1052]	; 14138 <next@@Base+0x1074>
   14550:	add	r1, pc, r1
   14554:	add	r1, r1, #512	; 0x200
   14558:	strd	r2, [r1]
   1455c:	mov	r0, #4
   14560:	bl	11930 <malloc@plt>
   14564:	mov	r3, r0
   14568:	str	r3, [fp, #-32]	; 0xffffffe0
   1456c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14570:	bl	12414 <init_token_int_type@@Base>
   14574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14578:	ldr	r2, [pc, #-1092]	; 1413c <next@@Base+0x1078>
   1457c:	add	r2, pc, r2
   14580:	add	r2, r2, #528	; 0x210
   14584:	ldrd	r0, [r2, #-8]
   14588:	adds	r0, r0, #1
   1458c:	adc	r1, r1, #0
   14590:	ldr	r2, [pc, #-1112]	; 14140 <next@@Base+0x107c>
   14594:	add	r2, pc, r2
   14598:	add	r2, r2, #528	; 0x210
   1459c:	strd	r0, [r2, #-8]
   145a0:	b	14de4 <next@@Base+0x1d20>
   145a4:	ldr	r3, [pc, #-1128]	; 14144 <next@@Base+0x1080>
   145a8:	add	r3, pc, r3
   145ac:	add	r3, r3, #496	; 0x1f0
   145b0:	ldrd	r2, [r3, #-8]
   145b4:	adds	r2, r2, #1
   145b8:	adc	r3, r3, #0
   145bc:	ldr	r1, [pc, #-1148]	; 14148 <next@@Base+0x1084>
   145c0:	add	r1, pc, r1
   145c4:	add	r1, r1, #496	; 0x1f0
   145c8:	strd	r2, [r1, #-8]
   145cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   145d0:	add	r2, r3, #1
   145d4:	str	r2, [fp, #-20]	; 0xffffffec
   145d8:	sub	r2, fp, #12
   145dc:	add	r3, r2, r3
   145e0:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   145e4:	strb	r2, [r3, #-540]	; 0xfffffde4
   145e8:	sub	r2, fp, #552	; 0x228
   145ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   145f0:	add	r3, r2, r3
   145f4:	mov	r2, #0
   145f8:	strb	r2, [r3]
   145fc:	mov	r0, #4
   14600:	bl	11930 <malloc@plt>
   14604:	mov	r3, r0
   14608:	str	r3, [fp, #-32]	; 0xffffffe0
   1460c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14610:	bl	1277c <init_token_if@@Base>
   14614:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14618:	ldr	r2, [pc, #-1236]	; 1414c <next@@Base+0x1088>
   1461c:	add	r2, pc, r2
   14620:	add	r2, r2, #528	; 0x210
   14624:	ldrd	r0, [r2]
   14628:	adds	r0, r0, #1
   1462c:	adc	r1, r1, #0
   14630:	ldr	r2, [pc, #-1256]	; 14150 <next@@Base+0x108c>
   14634:	add	r2, pc, r2
   14638:	add	r2, r2, #528	; 0x210
   1463c:	strd	r0, [r2]
   14640:	b	14de4 <next@@Base+0x1d20>
   14644:	ldr	r3, [pc, #-1272]	; 14154 <next@@Base+0x1090>
   14648:	add	r3, pc, r3
   1464c:	add	r3, r3, #480	; 0x1e0
   14650:	ldrd	r2, [r3]
   14654:	adds	r2, r2, #1
   14658:	adc	r3, r3, #0
   1465c:	ldr	r1, [pc, #-1292]	; 14158 <next@@Base+0x1094>
   14660:	add	r1, pc, r1
   14664:	add	r1, r1, #480	; 0x1e0
   14668:	strd	r2, [r1]
   1466c:	mov	r0, #1
   14670:	bl	11978 <exit@plt>
   14674:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14678:	cmp	r3, #97	; 0x61
   1467c:	beq	146b0 <next@@Base+0x15ec>
   14680:	ldr	r3, [pc, #-1324]	; 1415c <next@@Base+0x1098>
   14684:	add	r3, pc, r3
   14688:	add	r3, r3, #544	; 0x220
   1468c:	ldrd	r2, [r3, #-8]
   14690:	adds	r2, r2, #1
   14694:	adc	r3, r3, #0
   14698:	ldr	r1, [pc, #-1344]	; 14160 <next@@Base+0x109c>
   1469c:	add	r1, pc, r1
   146a0:	add	r1, r1, #544	; 0x220
   146a4:	strd	r2, [r1, #-8]
   146a8:	mov	r0, #1
   146ac:	bl	11978 <exit@plt>
   146b0:	ldr	r3, [pc, #-1364]	; 14164 <next@@Base+0x10a0>
   146b4:	add	r3, pc, r3
   146b8:	add	r3, r3, #544	; 0x220
   146bc:	ldrd	r2, [r3]
   146c0:	adds	r2, r2, #1
   146c4:	adc	r3, r3, #0
   146c8:	ldr	r1, [pc, #-1384]	; 14168 <next@@Base+0x10a4>
   146cc:	add	r1, pc, r1
   146d0:	add	r1, r1, #544	; 0x220
   146d4:	strd	r2, [r1]
   146d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146dc:	add	r2, r3, #1
   146e0:	str	r2, [fp, #-20]	; 0xffffffec
   146e4:	sub	r2, fp, #12
   146e8:	add	r3, r2, r3
   146ec:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   146f0:	strb	r2, [r3, #-540]	; 0xfffffde4
   146f4:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   146f8:	bl	12ed8 <get_char@@Base>
   146fc:	mov	r3, r0
   14700:	strb	r3, [fp, #-25]	; 0xffffffe7
   14704:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14708:	cmp	r3, #105	; 0x69
   1470c:	beq	14740 <next@@Base+0x167c>
   14710:	ldr	r3, [pc, #-1452]	; 1416c <next@@Base+0x10a8>
   14714:	add	r3, pc, r3
   14718:	add	r3, r3, #560	; 0x230
   1471c:	ldrd	r2, [r3, #-8]
   14720:	adds	r2, r2, #1
   14724:	adc	r3, r3, #0
   14728:	ldr	r1, [pc, #-1472]	; 14170 <next@@Base+0x10ac>
   1472c:	add	r1, pc, r1
   14730:	add	r1, r1, #560	; 0x230
   14734:	strd	r2, [r1, #-8]
   14738:	mov	r0, #1
   1473c:	bl	11978 <exit@plt>
   14740:	ldr	r3, [pc, #-1492]	; 14174 <next@@Base+0x10b0>
   14744:	add	r3, pc, r3
   14748:	add	r3, r3, #560	; 0x230
   1474c:	ldrd	r2, [r3]
   14750:	adds	r2, r2, #1
   14754:	adc	r3, r3, #0
   14758:	ldr	r1, [pc, #-1512]	; 14178 <next@@Base+0x10b4>
   1475c:	add	r1, pc, r1
   14760:	add	r1, r1, #560	; 0x230
   14764:	strd	r2, [r1]
   14768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1476c:	add	r2, r3, #1
   14770:	str	r2, [fp, #-20]	; 0xffffffec
   14774:	sub	r2, fp, #12
   14778:	add	r3, r2, r3
   1477c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14780:	strb	r2, [r3, #-540]	; 0xfffffde4
   14784:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14788:	bl	12ed8 <get_char@@Base>
   1478c:	mov	r3, r0
   14790:	strb	r3, [fp, #-25]	; 0xffffffe7
   14794:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14798:	cmp	r3, #110	; 0x6e
   1479c:	beq	147d0 <next@@Base+0x170c>
   147a0:	ldr	r3, [pc, #-1580]	; 1417c <next@@Base+0x10b8>
   147a4:	add	r3, pc, r3
   147a8:	add	r3, r3, #576	; 0x240
   147ac:	ldrd	r2, [r3, #-8]
   147b0:	adds	r2, r2, #1
   147b4:	adc	r3, r3, #0
   147b8:	ldr	r1, [pc, #-1600]	; 14180 <next@@Base+0x10bc>
   147bc:	add	r1, pc, r1
   147c0:	add	r1, r1, #576	; 0x240
   147c4:	strd	r2, [r1, #-8]
   147c8:	mov	r0, #1
   147cc:	bl	11978 <exit@plt>
   147d0:	ldr	r3, [pc, #-1620]	; 14184 <next@@Base+0x10c0>
   147d4:	add	r3, pc, r3
   147d8:	add	r3, r3, #576	; 0x240
   147dc:	ldrd	r2, [r3]
   147e0:	adds	r2, r2, #1
   147e4:	adc	r3, r3, #0
   147e8:	ldr	r1, [pc, #-1640]	; 14188 <next@@Base+0x10c4>
   147ec:	add	r1, pc, r1
   147f0:	add	r1, r1, #576	; 0x240
   147f4:	strd	r2, [r1]
   147f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   147fc:	add	r2, r3, #1
   14800:	str	r2, [fp, #-20]	; 0xffffffec
   14804:	sub	r2, fp, #12
   14808:	add	r3, r2, r3
   1480c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14810:	strb	r2, [r3, #-540]	; 0xfffffde4
   14814:	sub	r2, fp, #552	; 0x228
   14818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1481c:	add	r3, r2, r3
   14820:	mov	r2, #0
   14824:	strb	r2, [r3]
   14828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1482c:	add	r3, r3, #1
   14830:	mov	r0, r3
   14834:	bl	11930 <malloc@plt>
   14838:	mov	r3, r0
   1483c:	str	r3, [fp, #-16]
   14840:	ldr	r2, [fp, #-20]	; 0xffffffec
   14844:	sub	r3, fp, #552	; 0x228
   14848:	mov	r1, r3
   1484c:	ldr	r0, [fp, #-16]
   14850:	bl	119e4 <strncpy@plt>
   14854:	ldr	r3, [fp, #-20]	; 0xffffffec
   14858:	ldr	r2, [fp, #-16]
   1485c:	add	r3, r2, r3
   14860:	mov	r2, #0
   14864:	strb	r2, [r3]
   14868:	mov	r0, #8
   1486c:	bl	11930 <malloc@plt>
   14870:	mov	r3, r0
   14874:	str	r3, [fp, #-32]	; 0xffffffe0
   14878:	ldr	r1, [fp, #-16]
   1487c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14880:	bl	124cc <init_token_function@@Base>
   14884:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14888:	ldr	r2, [pc, #-1796]	; 1418c <next@@Base+0x10c8>
   1488c:	add	r2, pc, r2
   14890:	add	r2, r2, #592	; 0x250
   14894:	ldrd	r0, [r2, #-8]
   14898:	adds	r0, r0, #1
   1489c:	adc	r1, r1, #0
   148a0:	ldr	r2, [pc, #-1816]	; 14190 <next@@Base+0x10cc>
   148a4:	add	r2, pc, r2
   148a8:	add	r2, r2, #592	; 0x250
   148ac:	strd	r0, [r2, #-8]
   148b0:	b	14de4 <next@@Base+0x1d20>
   148b4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   148b8:	cmp	r3, #101	; 0x65
   148bc:	beq	148f0 <next@@Base+0x182c>
   148c0:	ldr	r3, [pc, #-1844]	; 14194 <next@@Base+0x10d0>
   148c4:	add	r3, pc, r3
   148c8:	add	r3, r3, #592	; 0x250
   148cc:	ldrd	r2, [r3]
   148d0:	adds	r2, r2, #1
   148d4:	adc	r3, r3, #0
   148d8:	ldr	r1, [pc, #-1864]	; 14198 <next@@Base+0x10d4>
   148dc:	add	r1, pc, r1
   148e0:	add	r1, r1, #592	; 0x250
   148e4:	strd	r2, [r1]
   148e8:	mov	r0, #1
   148ec:	bl	11978 <exit@plt>
   148f0:	ldr	r3, [pc, #-1884]	; 1419c <next@@Base+0x10d8>
   148f4:	add	r3, pc, r3
   148f8:	add	r3, r3, #608	; 0x260
   148fc:	ldrd	r2, [r3, #-8]
   14900:	adds	r2, r2, #1
   14904:	adc	r3, r3, #0
   14908:	ldr	r1, [pc, #-1904]	; 141a0 <next@@Base+0x10dc>
   1490c:	add	r1, pc, r1
   14910:	add	r1, r1, #608	; 0x260
   14914:	strd	r2, [r1, #-8]
   14918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1491c:	add	r2, r3, #1
   14920:	str	r2, [fp, #-20]	; 0xffffffec
   14924:	sub	r2, fp, #12
   14928:	add	r3, r2, r3
   1492c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14930:	strb	r2, [r3, #-540]	; 0xfffffde4
   14934:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14938:	bl	12ed8 <get_char@@Base>
   1493c:	mov	r3, r0
   14940:	strb	r3, [fp, #-25]	; 0xffffffe7
   14944:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14948:	cmp	r3, #116	; 0x74
   1494c:	beq	14980 <next@@Base+0x18bc>
   14950:	ldr	r3, [pc, #-1972]	; 141a4 <next@@Base+0x10e0>
   14954:	add	r3, pc, r3
   14958:	add	r3, r3, #608	; 0x260
   1495c:	ldrd	r2, [r3]
   14960:	adds	r2, r2, #1
   14964:	adc	r3, r3, #0
   14968:	ldr	r1, [pc, #-1992]	; 141a8 <next@@Base+0x10e4>
   1496c:	add	r1, pc, r1
   14970:	add	r1, r1, #608	; 0x260
   14974:	strd	r2, [r1]
   14978:	mov	r0, #1
   1497c:	bl	11978 <exit@plt>
   14980:	ldr	r3, [pc, #-2012]	; 141ac <next@@Base+0x10e8>
   14984:	add	r3, pc, r3
   14988:	add	r3, r3, #624	; 0x270
   1498c:	ldrd	r2, [r3, #-8]
   14990:	adds	r2, r2, #1
   14994:	adc	r3, r3, #0
   14998:	ldr	r1, [pc, #-2032]	; 141b0 <next@@Base+0x10ec>
   1499c:	add	r1, pc, r1
   149a0:	add	r1, r1, #624	; 0x270
   149a4:	strd	r2, [r1, #-8]
   149a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   149ac:	add	r2, r3, #1
   149b0:	str	r2, [fp, #-20]	; 0xffffffec
   149b4:	sub	r2, fp, #12
   149b8:	add	r3, r2, r3
   149bc:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   149c0:	strb	r2, [r3, #-540]	; 0xfffffde4
   149c4:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   149c8:	bl	12ed8 <get_char@@Base>
   149cc:	mov	r3, r0
   149d0:	strb	r3, [fp, #-25]	; 0xffffffe7
   149d4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   149d8:	cmp	r3, #117	; 0x75
   149dc:	beq	14a10 <next@@Base+0x194c>
   149e0:	ldr	r3, [pc, #-2100]	; 141b4 <next@@Base+0x10f0>
   149e4:	add	r3, pc, r3
   149e8:	add	r3, r3, #624	; 0x270
   149ec:	ldrd	r2, [r3]
   149f0:	adds	r2, r2, #1
   149f4:	adc	r3, r3, #0
   149f8:	ldr	r1, [pc, #-2120]	; 141b8 <next@@Base+0x10f4>
   149fc:	add	r1, pc, r1
   14a00:	add	r1, r1, #624	; 0x270
   14a04:	strd	r2, [r1]
   14a08:	mov	r0, #1
   14a0c:	bl	11978 <exit@plt>
   14a10:	ldr	r3, [pc, #-2140]	; 141bc <next@@Base+0x10f8>
   14a14:	add	r3, pc, r3
   14a18:	add	r3, r3, #640	; 0x280
   14a1c:	ldrd	r2, [r3, #-8]
   14a20:	adds	r2, r2, #1
   14a24:	adc	r3, r3, #0
   14a28:	ldr	r1, [pc, #-2160]	; 141c0 <next@@Base+0x10fc>
   14a2c:	add	r1, pc, r1
   14a30:	add	r1, r1, #640	; 0x280
   14a34:	strd	r2, [r1, #-8]
   14a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a3c:	add	r2, r3, #1
   14a40:	str	r2, [fp, #-20]	; 0xffffffec
   14a44:	sub	r2, fp, #12
   14a48:	add	r3, r2, r3
   14a4c:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14a50:	strb	r2, [r3, #-540]	; 0xfffffde4
   14a54:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14a58:	bl	12ed8 <get_char@@Base>
   14a5c:	mov	r3, r0
   14a60:	strb	r3, [fp, #-25]	; 0xffffffe7
   14a64:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14a68:	cmp	r3, #114	; 0x72
   14a6c:	beq	14aa0 <next@@Base+0x19dc>
   14a70:	ldr	r3, [pc, #-2228]	; 141c4 <next@@Base+0x1100>
   14a74:	add	r3, pc, r3
   14a78:	add	r3, r3, #640	; 0x280
   14a7c:	ldrd	r2, [r3]
   14a80:	adds	r2, r2, #1
   14a84:	adc	r3, r3, #0
   14a88:	ldr	r1, [pc, #-2248]	; 141c8 <next@@Base+0x1104>
   14a8c:	add	r1, pc, r1
   14a90:	add	r1, r1, #640	; 0x280
   14a94:	strd	r2, [r1]
   14a98:	mov	r0, #1
   14a9c:	bl	11978 <exit@plt>
   14aa0:	ldr	r3, [pc, #-2268]	; 141cc <next@@Base+0x1108>
   14aa4:	add	r3, pc, r3
   14aa8:	add	r3, r3, #656	; 0x290
   14aac:	ldrd	r2, [r3, #-8]
   14ab0:	adds	r2, r2, #1
   14ab4:	adc	r3, r3, #0
   14ab8:	ldr	r1, [pc, #-2288]	; 141d0 <next@@Base+0x110c>
   14abc:	add	r1, pc, r1
   14ac0:	add	r1, r1, #656	; 0x290
   14ac4:	strd	r2, [r1, #-8]
   14ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14acc:	add	r2, r3, #1
   14ad0:	str	r2, [fp, #-20]	; 0xffffffec
   14ad4:	sub	r2, fp, #12
   14ad8:	add	r3, r2, r3
   14adc:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14ae0:	strb	r2, [r3, #-540]	; 0xfffffde4
   14ae4:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14ae8:	bl	12ed8 <get_char@@Base>
   14aec:	mov	r3, r0
   14af0:	strb	r3, [fp, #-25]	; 0xffffffe7
   14af4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14af8:	cmp	r3, #110	; 0x6e
   14afc:	beq	14b30 <next@@Base+0x1a6c>
   14b00:	ldr	r3, [pc, #-2356]	; 141d4 <next@@Base+0x1110>
   14b04:	add	r3, pc, r3
   14b08:	add	r3, r3, #656	; 0x290
   14b0c:	ldrd	r2, [r3]
   14b10:	adds	r2, r2, #1
   14b14:	adc	r3, r3, #0
   14b18:	ldr	r1, [pc, #-2376]	; 141d8 <next@@Base+0x1114>
   14b1c:	add	r1, pc, r1
   14b20:	add	r1, r1, #656	; 0x290
   14b24:	strd	r2, [r1]
   14b28:	mov	r0, #1
   14b2c:	bl	11978 <exit@plt>
   14b30:	ldr	r3, [pc, #-2396]	; 141dc <next@@Base+0x1118>
   14b34:	add	r3, pc, r3
   14b38:	add	r3, r3, #672	; 0x2a0
   14b3c:	ldrd	r2, [r3, #-8]
   14b40:	adds	r2, r2, #1
   14b44:	adc	r3, r3, #0
   14b48:	ldr	r1, [pc, #-2416]	; 141e0 <next@@Base+0x111c>
   14b4c:	add	r1, pc, r1
   14b50:	add	r1, r1, #672	; 0x2a0
   14b54:	strd	r2, [r1, #-8]
   14b58:	mov	r0, #4
   14b5c:	bl	11930 <malloc@plt>
   14b60:	mov	r3, r0
   14b64:	str	r3, [fp, #-32]	; 0xffffffe0
   14b68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14b6c:	bl	12680 <init_token_return@@Base>
   14b70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14b74:	ldr	r2, [pc, #-2456]	; 141e4 <next@@Base+0x1120>
   14b78:	add	r2, pc, r2
   14b7c:	add	r2, r2, #672	; 0x2a0
   14b80:	ldrd	r0, [r2]
   14b84:	adds	r0, r0, #1
   14b88:	adc	r1, r1, #0
   14b8c:	ldr	r2, [pc, #-2476]	; 141e8 <next@@Base+0x1124>
   14b90:	add	r2, pc, r2
   14b94:	add	r2, r2, #672	; 0x2a0
   14b98:	strd	r0, [r2]
   14b9c:	b	14de4 <next@@Base+0x1d20>
   14ba0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14ba4:	cmp	r3, #108	; 0x6c
   14ba8:	beq	14bdc <next@@Base+0x1b18>
   14bac:	ldr	r3, [pc, #-2504]	; 141ec <next@@Base+0x1128>
   14bb0:	add	r3, pc, r3
   14bb4:	add	r3, r3, #688	; 0x2b0
   14bb8:	ldrd	r2, [r3, #-8]
   14bbc:	adds	r2, r2, #1
   14bc0:	adc	r3, r3, #0
   14bc4:	ldr	r1, [pc, #-2524]	; 141f0 <next@@Base+0x112c>
   14bc8:	add	r1, pc, r1
   14bcc:	add	r1, r1, #688	; 0x2b0
   14bd0:	strd	r2, [r1, #-8]
   14bd4:	mov	r0, #1
   14bd8:	bl	11978 <exit@plt>
   14bdc:	ldr	r3, [pc, #-2544]	; 141f4 <next@@Base+0x1130>
   14be0:	add	r3, pc, r3
   14be4:	add	r3, r3, #688	; 0x2b0
   14be8:	ldrd	r2, [r3]
   14bec:	adds	r2, r2, #1
   14bf0:	adc	r3, r3, #0
   14bf4:	ldr	r1, [pc, #-2564]	; 141f8 <next@@Base+0x1134>
   14bf8:	add	r1, pc, r1
   14bfc:	add	r1, r1, #688	; 0x2b0
   14c00:	strd	r2, [r1]
   14c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c08:	add	r2, r3, #1
   14c0c:	str	r2, [fp, #-20]	; 0xffffffec
   14c10:	sub	r2, fp, #12
   14c14:	add	r3, r2, r3
   14c18:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14c1c:	strb	r2, [r3, #-540]	; 0xfffffde4
   14c20:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14c24:	bl	12ed8 <get_char@@Base>
   14c28:	mov	r3, r0
   14c2c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14c30:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14c34:	cmp	r3, #115	; 0x73
   14c38:	beq	14c6c <next@@Base+0x1ba8>
   14c3c:	ldr	r3, [pc, #-2632]	; 141fc <next@@Base+0x1138>
   14c40:	add	r3, pc, r3
   14c44:	add	r3, r3, #704	; 0x2c0
   14c48:	ldrd	r2, [r3, #-8]
   14c4c:	adds	r2, r2, #1
   14c50:	adc	r3, r3, #0
   14c54:	ldr	r1, [pc, #-2652]	; 14200 <next@@Base+0x113c>
   14c58:	add	r1, pc, r1
   14c5c:	add	r1, r1, #704	; 0x2c0
   14c60:	strd	r2, [r1, #-8]
   14c64:	mov	r0, #1
   14c68:	bl	11978 <exit@plt>
   14c6c:	ldr	r3, [pc, #-2672]	; 14204 <next@@Base+0x1140>
   14c70:	add	r3, pc, r3
   14c74:	add	r3, r3, #704	; 0x2c0
   14c78:	ldrd	r2, [r3]
   14c7c:	adds	r2, r2, #1
   14c80:	adc	r3, r3, #0
   14c84:	ldr	r1, [pc, #-2692]	; 14208 <next@@Base+0x1144>
   14c88:	add	r1, pc, r1
   14c8c:	add	r1, r1, #704	; 0x2c0
   14c90:	strd	r2, [r1]
   14c94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c98:	add	r2, r3, #1
   14c9c:	str	r2, [fp, #-20]	; 0xffffffec
   14ca0:	sub	r2, fp, #12
   14ca4:	add	r3, r2, r3
   14ca8:	ldrb	r2, [fp, #-25]	; 0xffffffe7
   14cac:	strb	r2, [r3, #-540]	; 0xfffffde4
   14cb0:	ldr	r0, [fp, #-560]	; 0xfffffdd0
   14cb4:	bl	12ed8 <get_char@@Base>
   14cb8:	mov	r3, r0
   14cbc:	strb	r3, [fp, #-25]	; 0xffffffe7
   14cc0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14cc4:	cmp	r3, #101	; 0x65
   14cc8:	beq	14cfc <next@@Base+0x1c38>
   14ccc:	ldr	r3, [pc, #-2760]	; 1420c <next@@Base+0x1148>
   14cd0:	add	r3, pc, r3
   14cd4:	add	r3, r3, #720	; 0x2d0
   14cd8:	ldrd	r2, [r3, #-8]
   14cdc:	adds	r2, r2, #1
   14ce0:	adc	r3, r3, #0
   14ce4:	ldr	r1, [pc, #-2780]	; 14210 <next@@Base+0x114c>
   14ce8:	add	r1, pc, r1
   14cec:	add	r1, r1, #720	; 0x2d0
   14cf0:	strd	r2, [r1, #-8]
   14cf4:	mov	r0, #1
   14cf8:	bl	11978 <exit@plt>
   14cfc:	ldr	r3, [pc, #-2800]	; 14214 <next@@Base+0x1150>
   14d00:	add	r3, pc, r3
   14d04:	add	r3, r3, #720	; 0x2d0
   14d08:	ldrd	r2, [r3]
   14d0c:	adds	r2, r2, #1
   14d10:	adc	r3, r3, #0
   14d14:	ldr	r1, [pc, #-2820]	; 14218 <next@@Base+0x1154>
   14d18:	add	r1, pc, r1
   14d1c:	add	r1, r1, #720	; 0x2d0
   14d20:	strd	r2, [r1]
   14d24:	mov	r0, #4
   14d28:	bl	11930 <malloc@plt>
   14d2c:	mov	r3, r0
   14d30:	str	r3, [fp, #-32]	; 0xffffffe0
   14d34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d38:	bl	127d0 <init_token_else@@Base>
   14d3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d40:	ldr	r2, [pc, #-2860]	; 1421c <next@@Base+0x1158>
   14d44:	add	r2, pc, r2
   14d48:	add	r2, r2, #736	; 0x2e0
   14d4c:	ldrd	r0, [r2, #-8]
   14d50:	adds	r0, r0, #1
   14d54:	adc	r1, r1, #0
   14d58:	ldr	r2, [pc, #-2880]	; 14220 <next@@Base+0x115c>
   14d5c:	add	r2, pc, r2
   14d60:	add	r2, r2, #736	; 0x2e0
   14d64:	strd	r0, [r2, #-8]
   14d68:	b	14de4 <next@@Base+0x1d20>
   14d6c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14d70:	cmp	r3, #0
   14d74:	bne	131dc <next@@Base+0x118>
   14d78:	ldr	r3, [pc, #-2908]	; 14224 <next@@Base+0x1160>
   14d7c:	add	r3, pc, r3
   14d80:	add	r3, r3, #752	; 0x2f0
   14d84:	ldrd	r2, [r3]
   14d88:	adds	r2, r2, #1
   14d8c:	adc	r3, r3, #0
   14d90:	ldr	r1, [pc, #-2928]	; 14228 <next@@Base+0x1164>
   14d94:	add	r1, pc, r1
   14d98:	add	r1, r1, #752	; 0x2f0
   14d9c:	strd	r2, [r1]
   14da0:	mov	r0, #4
   14da4:	bl	11930 <malloc@plt>
   14da8:	mov	r3, r0
   14dac:	str	r3, [fp, #-32]	; 0xffffffe0
   14db0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14db4:	bl	12728 <init_token_eof@@Base>
   14db8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14dbc:	ldr	r2, [pc, #-2968]	; 1422c <next@@Base+0x1168>
   14dc0:	add	r2, pc, r2
   14dc4:	add	r2, r2, #768	; 0x300
   14dc8:	ldrd	r0, [r2, #-8]
   14dcc:	adds	r0, r0, #1
   14dd0:	adc	r1, r1, #0
   14dd4:	ldr	r2, [pc, #-2988]	; 14230 <next@@Base+0x116c>
   14dd8:	add	r2, pc, r2
   14ddc:	add	r2, r2, #768	; 0x300
   14de0:	strd	r0, [r2, #-8]
   14de4:	ldr	r2, [pc, #-3000]	; 14234 <next@@Base+0x1170>
   14de8:	add	r2, pc, r2
   14dec:	add	r2, r2, #768	; 0x300
   14df0:	ldrd	r0, [r2]
   14df4:	adds	r0, r0, #1
   14df8:	adc	r1, r1, #0
   14dfc:	ldr	r2, [pc, #-3020]	; 14238 <next@@Base+0x1174>
   14e00:	add	r2, pc, r2
   14e04:	add	r2, r2, #768	; 0x300
   14e08:	strd	r0, [r2]
   14e0c:	mov	r0, r3
   14e10:	sub	sp, fp, #8
   14e14:	pop	{r4, fp, pc}
   14e18:	push	{fp, lr}
   14e1c:	add	fp, sp, #4
   14e20:	ldr	r3, [pc, #12]	; 14e34 <next@@Base+0x1d70>
   14e24:	add	r3, pc, r3
   14e28:	mov	r0, r3
   14e2c:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   14e30:	pop	{fp, pc}
   14e34:	andeq	r7, r1, r0, lsr #14

00014e38 <init_ast_base@@Base>:
   14e38:	push	{fp}		; (str fp, [sp, #-4]!)
   14e3c:	add	fp, sp, #0
   14e40:	sub	sp, sp, #20
   14e44:	str	r0, [fp, #-8]
   14e48:	str	r1, [fp, #-12]
   14e4c:	str	r2, [fp, #-16]
   14e50:	ldr	r3, [pc, #64]	; 14e98 <init_ast_base@@Base+0x60>
   14e54:	add	r3, pc, r3
   14e58:	ldrd	r2, [r3]
   14e5c:	adds	r2, r2, #1
   14e60:	adc	r3, r3, #0
   14e64:	ldr	r1, [pc, #48]	; 14e9c <init_ast_base@@Base+0x64>
   14e68:	add	r1, pc, r1
   14e6c:	strd	r2, [r1]
   14e70:	ldr	r3, [fp, #-8]
   14e74:	ldr	r2, [fp, #-12]
   14e78:	str	r2, [r3]
   14e7c:	ldr	r3, [fp, #-8]
   14e80:	ldr	r2, [fp, #-16]
   14e84:	str	r2, [r3, #4]
   14e88:	nop			; (mov r0, r0)
   14e8c:	add	sp, fp, #0
   14e90:	pop	{fp}		; (ldr fp, [sp], #4)
   14e94:	bx	lr
   14e98:	andeq	r8, r1, ip, lsr #7
   14e9c:	muleq	r1, r8, r3

00014ea0 <init_ast_base_single@@Base>:
   14ea0:	push	{fp, lr}
   14ea4:	add	fp, sp, #4
   14ea8:	sub	sp, sp, #8
   14eac:	str	r0, [fp, #-8]
   14eb0:	str	r1, [fp, #-12]
   14eb4:	ldr	r3, [pc, #84]	; 14f10 <init_ast_base_single@@Base+0x70>
   14eb8:	add	r3, pc, r3
   14ebc:	ldrd	r2, [r3]
   14ec0:	adds	r2, r2, #1
   14ec4:	adc	r3, r3, #0
   14ec8:	ldr	r1, [pc, #68]	; 14f14 <init_ast_base_single@@Base+0x74>
   14ecc:	add	r1, pc, r1
   14ed0:	strd	r2, [r1]
   14ed4:	mov	r2, #0
   14ed8:	ldr	r1, [fp, #-12]
   14edc:	ldr	r0, [fp, #-8]
   14ee0:	bl	14e38 <init_ast_base@@Base>
   14ee4:	ldr	r3, [pc, #44]	; 14f18 <init_ast_base_single@@Base+0x78>
   14ee8:	add	r3, pc, r3
   14eec:	ldrd	r2, [r3, #8]
   14ef0:	adds	r2, r2, #1
   14ef4:	adc	r3, r3, #0
   14ef8:	ldr	r1, [pc, #28]	; 14f1c <init_ast_base_single@@Base+0x7c>
   14efc:	add	r1, pc, r1
   14f00:	strd	r2, [r1, #8]
   14f04:	nop			; (mov r0, r0)
   14f08:	sub	sp, fp, #4
   14f0c:	pop	{fp, pc}
   14f10:	andeq	r8, r1, r8, lsr r3
   14f14:	andeq	r8, r1, r4, lsr #6
   14f18:	andeq	r8, r1, r8, lsl #6
   14f1c:	strdeq	r8, [r1], -r4

00014f20 <init_node_id@@Base>:
   14f20:	push	{fp, lr}
   14f24:	add	fp, sp, #4
   14f28:	sub	sp, sp, #8
   14f2c:	str	r0, [fp, #-8]
   14f30:	str	r1, [fp, #-12]
   14f34:	ldr	r3, [pc, #96]	; 14f9c <init_node_id@@Base+0x7c>
   14f38:	add	r3, pc, r3
   14f3c:	ldrd	r2, [r3]
   14f40:	adds	r2, r2, #1
   14f44:	adc	r3, r3, #0
   14f48:	ldr	r1, [pc, #80]	; 14fa0 <init_node_id@@Base+0x80>
   14f4c:	add	r1, pc, r1
   14f50:	strd	r2, [r1]
   14f54:	ldr	r3, [fp, #-8]
   14f58:	mov	r1, #0
   14f5c:	mov	r0, r3
   14f60:	bl	14ea0 <init_ast_base_single@@Base>
   14f64:	ldr	r3, [pc, #56]	; 14fa4 <init_node_id@@Base+0x84>
   14f68:	add	r3, pc, r3
   14f6c:	ldrd	r2, [r3, #8]
   14f70:	adds	r2, r2, #1
   14f74:	adc	r3, r3, #0
   14f78:	ldr	r1, [pc, #40]	; 14fa8 <init_node_id@@Base+0x88>
   14f7c:	add	r1, pc, r1
   14f80:	strd	r2, [r1, #8]
   14f84:	ldr	r3, [fp, #-8]
   14f88:	ldr	r2, [fp, #-12]
   14f8c:	str	r2, [r3, #8]
   14f90:	nop			; (mov r0, r0)
   14f94:	sub	sp, fp, #4
   14f98:	pop	{fp, pc}
   14f9c:	andeq	r8, r1, r8, lsr #5
   14fa0:	muleq	r1, r4, r2
   14fa4:	andeq	r8, r1, r8, ror r2
   14fa8:	andeq	r8, r1, r4, ror #4

00014fac <init_node_int@@Base>:
   14fac:	push	{fp, lr}
   14fb0:	add	fp, sp, #4
   14fb4:	sub	sp, sp, #8
   14fb8:	str	r0, [fp, #-8]
   14fbc:	str	r1, [fp, #-12]
   14fc0:	ldr	r3, [pc, #96]	; 15028 <init_node_int@@Base+0x7c>
   14fc4:	add	r3, pc, r3
   14fc8:	ldrd	r2, [r3]
   14fcc:	adds	r2, r2, #1
   14fd0:	adc	r3, r3, #0
   14fd4:	ldr	r1, [pc, #80]	; 1502c <init_node_int@@Base+0x80>
   14fd8:	add	r1, pc, r1
   14fdc:	strd	r2, [r1]
   14fe0:	ldr	r3, [fp, #-8]
   14fe4:	mov	r1, #1
   14fe8:	mov	r0, r3
   14fec:	bl	14ea0 <init_ast_base_single@@Base>
   14ff0:	ldr	r3, [pc, #56]	; 15030 <init_node_int@@Base+0x84>
   14ff4:	add	r3, pc, r3
   14ff8:	ldrd	r2, [r3, #8]
   14ffc:	adds	r2, r2, #1
   15000:	adc	r3, r3, #0
   15004:	ldr	r1, [pc, #40]	; 15034 <init_node_int@@Base+0x88>
   15008:	add	r1, pc, r1
   1500c:	strd	r2, [r1, #8]
   15010:	ldr	r3, [fp, #-8]
   15014:	ldr	r2, [fp, #-12]
   15018:	str	r2, [r3, #8]
   1501c:	nop			; (mov r0, r0)
   15020:	sub	sp, fp, #4
   15024:	pop	{fp, pc}
   15028:	andeq	r8, r1, ip, lsl #4
   1502c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15030:	ldrdeq	r8, [r1], -ip
   15034:	andeq	r8, r1, r8, asr #3

00015038 <init_node_function@@Base>:
   15038:	push	{fp, lr}
   1503c:	add	fp, sp, #4
   15040:	sub	sp, sp, #16
   15044:	str	r0, [fp, #-8]
   15048:	str	r1, [fp, #-12]
   1504c:	str	r2, [fp, #-16]
   15050:	ldr	r3, [pc, #108]	; 150c4 <init_node_function@@Base+0x8c>
   15054:	add	r3, pc, r3
   15058:	ldrd	r2, [r3]
   1505c:	adds	r2, r2, #1
   15060:	adc	r3, r3, #0
   15064:	ldr	r1, [pc, #92]	; 150c8 <init_node_function@@Base+0x90>
   15068:	add	r1, pc, r1
   1506c:	strd	r2, [r1]
   15070:	ldr	r3, [fp, #-8]
   15074:	mov	r1, #2
   15078:	mov	r0, r3
   1507c:	bl	14ea0 <init_ast_base_single@@Base>
   15080:	ldr	r3, [pc, #68]	; 150cc <init_node_function@@Base+0x94>
   15084:	add	r3, pc, r3
   15088:	ldrd	r2, [r3, #8]
   1508c:	adds	r2, r2, #1
   15090:	adc	r3, r3, #0
   15094:	ldr	r1, [pc, #52]	; 150d0 <init_node_function@@Base+0x98>
   15098:	add	r1, pc, r1
   1509c:	strd	r2, [r1, #8]
   150a0:	ldr	r3, [fp, #-8]
   150a4:	ldr	r2, [fp, #-12]
   150a8:	str	r2, [r3, #8]
   150ac:	ldr	r3, [fp, #-8]
   150b0:	ldr	r2, [fp, #-16]
   150b4:	str	r2, [r3, #12]
   150b8:	nop			; (mov r0, r0)
   150bc:	sub	sp, fp, #4
   150c0:	pop	{fp, pc}
   150c4:	andeq	r8, r1, ip, ror #2
   150c8:	andeq	r8, r1, r8, asr r1
   150cc:	andeq	r8, r1, ip, lsr r1
   150d0:	andeq	r8, r1, r8, lsr #2

000150d4 <init_node_return@@Base>:
   150d4:	push	{fp, lr}
   150d8:	add	fp, sp, #4
   150dc:	sub	sp, sp, #8
   150e0:	str	r0, [fp, #-8]
   150e4:	str	r1, [fp, #-12]
   150e8:	ldr	r3, [pc, #96]	; 15150 <init_node_return@@Base+0x7c>
   150ec:	add	r3, pc, r3
   150f0:	ldrd	r2, [r3]
   150f4:	adds	r2, r2, #1
   150f8:	adc	r3, r3, #0
   150fc:	ldr	r1, [pc, #80]	; 15154 <init_node_return@@Base+0x80>
   15100:	add	r1, pc, r1
   15104:	strd	r2, [r1]
   15108:	ldr	r3, [fp, #-8]
   1510c:	mov	r1, #3
   15110:	mov	r0, r3
   15114:	bl	14ea0 <init_ast_base_single@@Base>
   15118:	ldr	r3, [pc, #56]	; 15158 <init_node_return@@Base+0x84>
   1511c:	add	r3, pc, r3
   15120:	ldrd	r2, [r3, #8]
   15124:	adds	r2, r2, #1
   15128:	adc	r3, r3, #0
   1512c:	ldr	r1, [pc, #40]	; 1515c <init_node_return@@Base+0x88>
   15130:	add	r1, pc, r1
   15134:	strd	r2, [r1, #8]
   15138:	ldr	r3, [fp, #-8]
   1513c:	ldr	r2, [fp, #-12]
   15140:	str	r2, [r3, #8]
   15144:	nop			; (mov r0, r0)
   15148:	sub	sp, fp, #4
   1514c:	pop	{fp, pc}
   15150:	andeq	r8, r1, r4, asr #1
   15154:	strheq	r8, [r1], -r0
   15158:	muleq	r1, r4, r0
   1515c:	andeq	r8, r1, r0, lsl #1

00015160 <init_node_if@@Base>:
   15160:	push	{fp, lr}
   15164:	add	fp, sp, #4
   15168:	sub	sp, sp, #16
   1516c:	str	r0, [fp, #-8]
   15170:	str	r1, [fp, #-12]
   15174:	str	r2, [fp, #-16]
   15178:	str	r3, [fp, #-20]	; 0xffffffec
   1517c:	ldr	r3, [pc, #120]	; 151fc <init_node_if@@Base+0x9c>
   15180:	add	r3, pc, r3
   15184:	ldrd	r2, [r3]
   15188:	adds	r2, r2, #1
   1518c:	adc	r3, r3, #0
   15190:	ldr	r1, [pc, #104]	; 15200 <init_node_if@@Base+0xa0>
   15194:	add	r1, pc, r1
   15198:	strd	r2, [r1]
   1519c:	ldr	r3, [fp, #-8]
   151a0:	mov	r1, #4
   151a4:	mov	r0, r3
   151a8:	bl	14ea0 <init_ast_base_single@@Base>
   151ac:	ldr	r3, [pc, #80]	; 15204 <init_node_if@@Base+0xa4>
   151b0:	add	r3, pc, r3
   151b4:	ldrd	r2, [r3, #8]
   151b8:	adds	r2, r2, #1
   151bc:	adc	r3, r3, #0
   151c0:	ldr	r1, [pc, #64]	; 15208 <init_node_if@@Base+0xa8>
   151c4:	add	r1, pc, r1
   151c8:	strd	r2, [r1, #8]
   151cc:	ldr	r3, [fp, #-8]
   151d0:	ldr	r2, [fp, #-12]
   151d4:	str	r2, [r3, #8]
   151d8:	ldr	r3, [fp, #-8]
   151dc:	ldr	r2, [fp, #-16]
   151e0:	str	r2, [r3, #12]
   151e4:	ldr	r3, [fp, #-8]
   151e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   151ec:	str	r2, [r3, #16]
   151f0:	nop			; (mov r0, r0)
   151f4:	sub	sp, fp, #4
   151f8:	pop	{fp, pc}
   151fc:	andeq	r8, r1, r0, lsr #32
   15200:	andeq	r8, r1, ip
   15204:	strdeq	r7, [r1], -r0
   15208:	ldrdeq	r7, [r1], -ip

0001520c <init_node_boolean_operator@@Base>:
   1520c:	push	{fp, lr}
   15210:	add	fp, sp, #4
   15214:	sub	sp, sp, #16
   15218:	str	r0, [fp, #-8]
   1521c:	str	r1, [fp, #-12]
   15220:	str	r2, [fp, #-16]
   15224:	str	r3, [fp, #-20]	; 0xffffffec
   15228:	ldr	r3, [pc, #132]	; 152b4 <init_node_boolean_operator@@Base+0xa8>
   1522c:	add	r3, pc, r3
   15230:	ldrd	r2, [r3]
   15234:	adds	r2, r2, #1
   15238:	adc	r3, r3, #0
   1523c:	ldr	r1, [pc, #116]	; 152b8 <init_node_boolean_operator@@Base+0xac>
   15240:	add	r1, pc, r1
   15244:	strd	r2, [r1]
   15248:	ldr	r3, [fp, #-8]
   1524c:	mov	r1, #0
   15250:	mov	r0, r3
   15254:	bl	14ea0 <init_ast_base_single@@Base>
   15258:	ldr	r3, [pc, #92]	; 152bc <init_node_boolean_operator@@Base+0xb0>
   1525c:	add	r3, pc, r3
   15260:	ldrd	r2, [r3, #8]
   15264:	adds	r2, r2, #1
   15268:	adc	r3, r3, #0
   1526c:	ldr	r1, [pc, #76]	; 152c0 <init_node_boolean_operator@@Base+0xb4>
   15270:	add	r1, pc, r1
   15274:	strd	r2, [r1, #8]
   15278:	ldr	r3, [fp, #-8]
   1527c:	mov	r2, #5
   15280:	str	r2, [r3]
   15284:	ldr	r3, [fp, #-8]
   15288:	ldr	r2, [fp, #-12]
   1528c:	str	r2, [r3, #16]
   15290:	ldr	r3, [fp, #-8]
   15294:	ldr	r2, [fp, #-16]
   15298:	str	r2, [r3, #8]
   1529c:	ldr	r3, [fp, #-8]
   152a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   152a4:	str	r2, [r3, #12]
   152a8:	nop			; (mov r0, r0)
   152ac:	sub	sp, fp, #4
   152b0:	pop	{fp, pc}
   152b4:	andeq	r7, r1, r4, ror #30
   152b8:	andeq	r7, r1, r0, asr pc
   152bc:	andeq	r7, r1, r4, lsr pc
   152c0:	andeq	r7, r1, r0, lsr #30

000152c4 <free_node@@Base>:
   152c4:	push	{fp, lr}
   152c8:	add	fp, sp, #4
   152cc:	sub	sp, sp, #8
   152d0:	str	r0, [fp, #-8]
   152d4:	ldr	r1, [pc, #640]	; 1555c <free_node@@Base+0x298>
   152d8:	add	r1, pc, r1
   152dc:	ldr	r3, [fp, #-8]
   152e0:	ldr	r3, [r3]
   152e4:	cmp	r3, #5
   152e8:	addls	pc, pc, r3, lsl #2
   152ec:	b	154e8 <free_node@@Base+0x224>
   152f0:	b	15308 <free_node@@Base+0x44>
   152f4:	b	15358 <free_node@@Base+0x94>
   152f8:	b	153a8 <free_node@@Base+0xe4>
   152fc:	b	153f8 <free_node@@Base+0x134>
   15300:	b	15448 <free_node@@Base+0x184>
   15304:	b	15498 <free_node@@Base+0x1d4>
   15308:	ldr	r3, [pc, #592]	; 15560 <free_node@@Base+0x29c>
   1530c:	add	r3, pc, r3
   15310:	ldrd	r2, [r3, #8]
   15314:	adds	r2, r2, #1
   15318:	adc	r3, r3, #0
   1531c:	ldr	r1, [pc, #576]	; 15564 <free_node@@Base+0x2a0>
   15320:	add	r1, pc, r1
   15324:	strd	r2, [r1, #8]
   15328:	ldr	r0, [fp, #-8]
   1532c:	bl	155d8 <free_node_id@@Base>
   15330:	nop			; (mov r0, r0)
   15334:	ldr	r3, [pc, #556]	; 15568 <free_node@@Base+0x2a4>
   15338:	add	r3, pc, r3
   1533c:	ldrd	r2, [r3, #104]	; 0x68
   15340:	adds	r2, r2, #1
   15344:	adc	r3, r3, #0
   15348:	ldr	r1, [pc, #540]	; 1556c <free_node@@Base+0x2a8>
   1534c:	add	r1, pc, r1
   15350:	strd	r2, [r1, #104]	; 0x68
   15354:	b	15550 <free_node@@Base+0x28c>
   15358:	ldr	r3, [pc, #528]	; 15570 <free_node@@Base+0x2ac>
   1535c:	add	r3, pc, r3
   15360:	ldrd	r2, [r3, #16]
   15364:	adds	r2, r2, #1
   15368:	adc	r3, r3, #0
   1536c:	ldr	r1, [pc, #512]	; 15574 <free_node@@Base+0x2b0>
   15370:	add	r1, pc, r1
   15374:	strd	r2, [r1, #16]
   15378:	ldr	r0, [fp, #-8]
   1537c:	bl	15694 <free_node_int@@Base>
   15380:	nop			; (mov r0, r0)
   15384:	ldr	r3, [pc, #492]	; 15578 <free_node@@Base+0x2b4>
   15388:	add	r3, pc, r3
   1538c:	ldrd	r2, [r3, #56]	; 0x38
   15390:	adds	r2, r2, #1
   15394:	adc	r3, r3, #0
   15398:	ldr	r1, [pc, #476]	; 1557c <free_node@@Base+0x2b8>
   1539c:	add	r1, pc, r1
   153a0:	strd	r2, [r1, #56]	; 0x38
   153a4:	b	15550 <free_node@@Base+0x28c>
   153a8:	ldr	r3, [pc, #464]	; 15580 <free_node@@Base+0x2bc>
   153ac:	add	r3, pc, r3
   153b0:	ldrd	r2, [r3, #24]
   153b4:	adds	r2, r2, #1
   153b8:	adc	r3, r3, #0
   153bc:	ldr	r1, [pc, #448]	; 15584 <free_node@@Base+0x2c0>
   153c0:	add	r1, pc, r1
   153c4:	strd	r2, [r1, #24]
   153c8:	ldr	r0, [fp, #-8]
   153cc:	bl	15750 <free_node_function@@Base>
   153d0:	nop			; (mov r0, r0)
   153d4:	ldr	r3, [pc, #428]	; 15588 <free_node@@Base+0x2c4>
   153d8:	add	r3, pc, r3
   153dc:	ldrd	r2, [r3, #64]	; 0x40
   153e0:	adds	r2, r2, #1
   153e4:	adc	r3, r3, #0
   153e8:	ldr	r1, [pc, #412]	; 1558c <free_node@@Base+0x2c8>
   153ec:	add	r1, pc, r1
   153f0:	strd	r2, [r1, #64]	; 0x40
   153f4:	b	15550 <free_node@@Base+0x28c>
   153f8:	ldr	r3, [pc, #400]	; 15590 <free_node@@Base+0x2cc>
   153fc:	add	r3, pc, r3
   15400:	ldrd	r2, [r3, #32]
   15404:	adds	r2, r2, #1
   15408:	adc	r3, r3, #0
   1540c:	ldr	r1, [pc, #384]	; 15594 <free_node@@Base+0x2d0>
   15410:	add	r1, pc, r1
   15414:	strd	r2, [r1, #32]
   15418:	ldr	r0, [fp, #-8]
   1541c:	bl	1581c <free_node_return@@Base>
   15420:	nop			; (mov r0, r0)
   15424:	ldr	r3, [pc, #364]	; 15598 <free_node@@Base+0x2d4>
   15428:	add	r3, pc, r3
   1542c:	ldrd	r2, [r3, #72]	; 0x48
   15430:	adds	r2, r2, #1
   15434:	adc	r3, r3, #0
   15438:	ldr	r1, [pc, #348]	; 1559c <free_node@@Base+0x2d8>
   1543c:	add	r1, pc, r1
   15440:	strd	r2, [r1, #72]	; 0x48
   15444:	b	15550 <free_node@@Base+0x28c>
   15448:	ldr	r3, [pc, #336]	; 155a0 <free_node@@Base+0x2dc>
   1544c:	add	r3, pc, r3
   15450:	ldrd	r2, [r3, #40]	; 0x28
   15454:	adds	r2, r2, #1
   15458:	adc	r3, r3, #0
   1545c:	ldr	r1, [pc, #320]	; 155a4 <free_node@@Base+0x2e0>
   15460:	add	r1, pc, r1
   15464:	strd	r2, [r1, #40]	; 0x28
   15468:	ldr	r0, [fp, #-8]
   1546c:	bl	158d8 <free_node_if@@Base>
   15470:	nop			; (mov r0, r0)
   15474:	ldr	r3, [pc, #300]	; 155a8 <free_node@@Base+0x2e4>
   15478:	add	r3, pc, r3
   1547c:	ldrd	r2, [r3, #80]	; 0x50
   15480:	adds	r2, r2, #1
   15484:	adc	r3, r3, #0
   15488:	ldr	r1, [pc, #284]	; 155ac <free_node@@Base+0x2e8>
   1548c:	add	r1, pc, r1
   15490:	strd	r2, [r1, #80]	; 0x50
   15494:	b	15550 <free_node@@Base+0x28c>
   15498:	ldr	r3, [pc, #272]	; 155b0 <free_node@@Base+0x2ec>
   1549c:	add	r3, pc, r3
   154a0:	ldrd	r2, [r3, #48]	; 0x30
   154a4:	adds	r2, r2, #1
   154a8:	adc	r3, r3, #0
   154ac:	ldr	r1, [pc, #256]	; 155b4 <free_node@@Base+0x2f0>
   154b0:	add	r1, pc, r1
   154b4:	strd	r2, [r1, #48]	; 0x30
   154b8:	ldr	r0, [fp, #-8]
   154bc:	bl	15a3c <free_node_boolean_operator@@Base>
   154c0:	nop			; (mov r0, r0)
   154c4:	ldr	r3, [pc, #236]	; 155b8 <free_node@@Base+0x2f4>
   154c8:	add	r3, pc, r3
   154cc:	ldrd	r2, [r3, #88]	; 0x58
   154d0:	adds	r2, r2, #1
   154d4:	adc	r3, r3, #0
   154d8:	ldr	r1, [pc, #220]	; 155bc <free_node@@Base+0x2f8>
   154dc:	add	r1, pc, r1
   154e0:	strd	r2, [r1, #88]	; 0x58
   154e4:	b	15550 <free_node@@Base+0x28c>
   154e8:	ldr	r3, [pc, #208]	; 155c0 <free_node@@Base+0x2fc>
   154ec:	add	r3, pc, r3
   154f0:	ldrd	r2, [r3]
   154f4:	adds	r2, r2, #1
   154f8:	adc	r3, r3, #0
   154fc:	ldr	r0, [pc, #192]	; 155c4 <free_node@@Base+0x300>
   15500:	add	r0, pc, r0
   15504:	strd	r2, [r0]
   15508:	ldr	r3, [pc, #184]	; 155c8 <free_node@@Base+0x304>
   1550c:	ldr	r3, [r1, r3]
   15510:	ldr	r3, [r3]
   15514:	mov	r2, #31
   15518:	mov	r1, #1
   1551c:	ldr	r0, [pc, #168]	; 155cc <free_node@@Base+0x308>
   15520:	add	r0, pc, r0
   15524:	bl	11900 <fwrite@plt>
   15528:	ldr	r3, [pc, #160]	; 155d0 <free_node@@Base+0x30c>
   1552c:	add	r3, pc, r3
   15530:	ldrd	r2, [r3, #96]	; 0x60
   15534:	adds	r2, r2, #1
   15538:	adc	r3, r3, #0
   1553c:	ldr	r1, [pc, #144]	; 155d4 <free_node@@Base+0x310>
   15540:	add	r1, pc, r1
   15544:	strd	r2, [r1, #96]	; 0x60
   15548:	mov	r0, #1
   1554c:	bl	11978 <exit@plt>
   15550:	nop			; (mov r0, r0)
   15554:	sub	sp, fp, #4
   15558:	pop	{fp, pc}
   1555c:	andeq	r6, r1, r0, lsr #26
   15560:	andeq	r7, r1, r4, lsl lr
   15564:	andeq	r7, r1, r0, lsl #28
   15568:	andeq	r7, r1, r8, ror #27
   1556c:	ldrdeq	r7, [r1], -r4
   15570:	andeq	r7, r1, r4, asr #27
   15574:			; <UNDEFINED> instruction: 0x00017db0
   15578:	muleq	r1, r8, sp
   1557c:	andeq	r7, r1, r4, lsl #27
   15580:	andeq	r7, r1, r4, ror sp
   15584:	andeq	r7, r1, r0, ror #26
   15588:	andeq	r7, r1, r8, asr #26
   1558c:	andeq	r7, r1, r4, lsr sp
   15590:	andeq	r7, r1, r4, lsr #26
   15594:	andeq	r7, r1, r0, lsl sp
   15598:	strdeq	r7, [r1], -r8
   1559c:	andeq	r7, r1, r4, ror #25
   155a0:	ldrdeq	r7, [r1], -r4
   155a4:	andeq	r7, r1, r0, asr #25
   155a8:	andeq	r7, r1, r8, lsr #25
   155ac:	muleq	r1, r4, ip
   155b0:	andeq	r7, r1, r4, lsl #25
   155b4:	andeq	r7, r1, r0, ror ip
   155b8:	andeq	r7, r1, r8, asr ip
   155bc:	andeq	r7, r1, r4, asr #24
   155c0:	andeq	r7, r1, r4, lsr ip
   155c4:	andeq	r7, r1, r0, lsr #24
   155c8:	andeq	r0, r0, r4, lsr #1
   155cc:	ldrdeq	r5, [r0], -r8
   155d0:	strdeq	r7, [r1], -r4
   155d4:	andeq	r7, r1, r0, ror #23

000155d8 <free_node_id@@Base>:
   155d8:	push	{fp, lr}
   155dc:	add	fp, sp, #4
   155e0:	sub	sp, sp, #8
   155e4:	str	r0, [fp, #-8]
   155e8:	ldr	r3, [pc, #140]	; 1567c <free_node_id@@Base+0xa4>
   155ec:	add	r3, pc, r3
   155f0:	ldrd	r2, [r3]
   155f4:	adds	r2, r2, #1
   155f8:	adc	r3, r3, #0
   155fc:	ldr	r1, [pc, #124]	; 15680 <free_node_id@@Base+0xa8>
   15600:	add	r1, pc, r1
   15604:	strd	r2, [r1]
   15608:	ldr	r3, [fp, #-8]
   1560c:	ldr	r3, [r3, #4]
   15610:	cmp	r3, #0
   15614:	beq	15668 <free_node_id@@Base+0x90>
   15618:	ldr	r3, [pc, #100]	; 15684 <free_node_id@@Base+0xac>
   1561c:	add	r3, pc, r3
   15620:	ldrd	r2, [r3, #8]
   15624:	adds	r2, r2, #1
   15628:	adc	r3, r3, #0
   1562c:	ldr	r1, [pc, #84]	; 15688 <free_node_id@@Base+0xb0>
   15630:	add	r1, pc, r1
   15634:	strd	r2, [r1, #8]
   15638:	ldr	r3, [fp, #-8]
   1563c:	ldr	r3, [r3, #4]
   15640:	mov	r0, r3
   15644:	bl	152c4 <free_node@@Base>
   15648:	ldr	r3, [pc, #60]	; 1568c <free_node_id@@Base+0xb4>
   1564c:	add	r3, pc, r3
   15650:	ldrd	r2, [r3, #16]
   15654:	adds	r2, r2, #1
   15658:	adc	r3, r3, #0
   1565c:	ldr	r1, [pc, #44]	; 15690 <free_node_id@@Base+0xb8>
   15660:	add	r1, pc, r1
   15664:	strd	r2, [r1, #16]
   15668:	ldr	r0, [fp, #-8]
   1566c:	bl	118dc <free@plt>
   15670:	nop			; (mov r0, r0)
   15674:	sub	sp, fp, #4
   15678:	pop	{fp, pc}
   1567c:	andeq	r7, r1, ip, lsl fp
   15680:	andeq	r7, r1, r8, lsl #22
   15684:	andeq	r7, r1, ip, ror #21
   15688:	ldrdeq	r7, [r1], -r8
   1568c:			; <UNDEFINED> instruction: 0x00017abc
   15690:	andeq	r7, r1, r8, lsr #21

00015694 <free_node_int@@Base>:
   15694:	push	{fp, lr}
   15698:	add	fp, sp, #4
   1569c:	sub	sp, sp, #8
   156a0:	str	r0, [fp, #-8]
   156a4:	ldr	r3, [pc, #140]	; 15738 <free_node_int@@Base+0xa4>
   156a8:	add	r3, pc, r3
   156ac:	ldrd	r2, [r3]
   156b0:	adds	r2, r2, #1
   156b4:	adc	r3, r3, #0
   156b8:	ldr	r1, [pc, #124]	; 1573c <free_node_int@@Base+0xa8>
   156bc:	add	r1, pc, r1
   156c0:	strd	r2, [r1]
   156c4:	ldr	r3, [fp, #-8]
   156c8:	ldr	r3, [r3, #4]
   156cc:	cmp	r3, #0
   156d0:	beq	15724 <free_node_int@@Base+0x90>
   156d4:	ldr	r3, [pc, #100]	; 15740 <free_node_int@@Base+0xac>
   156d8:	add	r3, pc, r3
   156dc:	ldrd	r2, [r3, #8]
   156e0:	adds	r2, r2, #1
   156e4:	adc	r3, r3, #0
   156e8:	ldr	r1, [pc, #84]	; 15744 <free_node_int@@Base+0xb0>
   156ec:	add	r1, pc, r1
   156f0:	strd	r2, [r1, #8]
   156f4:	ldr	r3, [fp, #-8]
   156f8:	ldr	r3, [r3, #4]
   156fc:	mov	r0, r3
   15700:	bl	152c4 <free_node@@Base>
   15704:	ldr	r3, [pc, #60]	; 15748 <free_node_int@@Base+0xb4>
   15708:	add	r3, pc, r3
   1570c:	ldrd	r2, [r3, #16]
   15710:	adds	r2, r2, #1
   15714:	adc	r3, r3, #0
   15718:	ldr	r1, [pc, #44]	; 1574c <free_node_int@@Base+0xb8>
   1571c:	add	r1, pc, r1
   15720:	strd	r2, [r1, #16]
   15724:	ldr	r0, [fp, #-8]
   15728:	bl	118dc <free@plt>
   1572c:	nop			; (mov r0, r0)
   15730:	sub	sp, fp, #4
   15734:	pop	{fp, pc}
   15738:	andeq	r7, r1, r8, asr #20
   1573c:	andeq	r7, r1, r4, lsr sl
   15740:	andeq	r7, r1, r8, lsl sl
   15744:	andeq	r7, r1, r4, lsl #20
   15748:	andeq	r7, r1, r8, ror #19
   1574c:	ldrdeq	r7, [r1], -r4

00015750 <free_node_function@@Base>:
   15750:	push	{fp, lr}
   15754:	add	fp, sp, #4
   15758:	sub	sp, sp, #8
   1575c:	str	r0, [fp, #-8]
   15760:	ldr	r3, [pc, #156]	; 15804 <free_node_function@@Base+0xb4>
   15764:	add	r3, pc, r3
   15768:	ldrd	r2, [r3]
   1576c:	adds	r2, r2, #1
   15770:	adc	r3, r3, #0
   15774:	ldr	r1, [pc, #140]	; 15808 <free_node_function@@Base+0xb8>
   15778:	add	r1, pc, r1
   1577c:	strd	r2, [r1]
   15780:	ldr	r3, [fp, #-8]
   15784:	ldr	r3, [r3, #4]
   15788:	cmp	r3, #0
   1578c:	beq	157e0 <free_node_function@@Base+0x90>
   15790:	ldr	r3, [pc, #116]	; 1580c <free_node_function@@Base+0xbc>
   15794:	add	r3, pc, r3
   15798:	ldrd	r2, [r3, #8]
   1579c:	adds	r2, r2, #1
   157a0:	adc	r3, r3, #0
   157a4:	ldr	r1, [pc, #100]	; 15810 <free_node_function@@Base+0xc0>
   157a8:	add	r1, pc, r1
   157ac:	strd	r2, [r1, #8]
   157b0:	ldr	r3, [fp, #-8]
   157b4:	ldr	r3, [r3, #4]
   157b8:	mov	r0, r3
   157bc:	bl	152c4 <free_node@@Base>
   157c0:	ldr	r3, [pc, #76]	; 15814 <free_node_function@@Base+0xc4>
   157c4:	add	r3, pc, r3
   157c8:	ldrd	r2, [r3, #16]
   157cc:	adds	r2, r2, #1
   157d0:	adc	r3, r3, #0
   157d4:	ldr	r1, [pc, #60]	; 15818 <free_node_function@@Base+0xc8>
   157d8:	add	r1, pc, r1
   157dc:	strd	r2, [r1, #16]
   157e0:	ldr	r3, [fp, #-8]
   157e4:	ldr	r3, [r3, #8]
   157e8:	mov	r0, r3
   157ec:	bl	118dc <free@plt>
   157f0:	ldr	r0, [fp, #-8]
   157f4:	bl	118dc <free@plt>
   157f8:	nop			; (mov r0, r0)
   157fc:	sub	sp, fp, #4
   15800:	pop	{fp, pc}
   15804:	andeq	r7, r1, r4, ror r9
   15808:	andeq	r7, r1, r0, ror #18
   1580c:	andeq	r7, r1, r4, asr #18
   15810:	andeq	r7, r1, r0, lsr r9
   15814:	andeq	r7, r1, r4, lsl r9
   15818:	andeq	r7, r1, r0, lsl #18

0001581c <free_node_return@@Base>:
   1581c:	push	{fp, lr}
   15820:	add	fp, sp, #4
   15824:	sub	sp, sp, #8
   15828:	str	r0, [fp, #-8]
   1582c:	ldr	r3, [pc, #140]	; 158c0 <free_node_return@@Base+0xa4>
   15830:	add	r3, pc, r3
   15834:	ldrd	r2, [r3]
   15838:	adds	r2, r2, #1
   1583c:	adc	r3, r3, #0
   15840:	ldr	r1, [pc, #124]	; 158c4 <free_node_return@@Base+0xa8>
   15844:	add	r1, pc, r1
   15848:	strd	r2, [r1]
   1584c:	ldr	r3, [fp, #-8]
   15850:	ldr	r3, [r3, #4]
   15854:	cmp	r3, #0
   15858:	beq	158ac <free_node_return@@Base+0x90>
   1585c:	ldr	r3, [pc, #100]	; 158c8 <free_node_return@@Base+0xac>
   15860:	add	r3, pc, r3
   15864:	ldrd	r2, [r3, #8]
   15868:	adds	r2, r2, #1
   1586c:	adc	r3, r3, #0
   15870:	ldr	r1, [pc, #84]	; 158cc <free_node_return@@Base+0xb0>
   15874:	add	r1, pc, r1
   15878:	strd	r2, [r1, #8]
   1587c:	ldr	r3, [fp, #-8]
   15880:	ldr	r3, [r3, #4]
   15884:	mov	r0, r3
   15888:	bl	152c4 <free_node@@Base>
   1588c:	ldr	r3, [pc, #60]	; 158d0 <free_node_return@@Base+0xb4>
   15890:	add	r3, pc, r3
   15894:	ldrd	r2, [r3, #16]
   15898:	adds	r2, r2, #1
   1589c:	adc	r3, r3, #0
   158a0:	ldr	r1, [pc, #44]	; 158d4 <free_node_return@@Base+0xb8>
   158a4:	add	r1, pc, r1
   158a8:	strd	r2, [r1, #16]
   158ac:	ldr	r0, [fp, #-8]
   158b0:	bl	118dc <free@plt>
   158b4:	nop			; (mov r0, r0)
   158b8:	sub	sp, fp, #4
   158bc:	pop	{fp, pc}
   158c0:	muleq	r1, r0, r8
   158c4:	andeq	r7, r1, ip, ror r8
   158c8:	andeq	r7, r1, r0, ror #16
   158cc:	andeq	r7, r1, ip, asr #16
   158d0:	andeq	r7, r1, r0, lsr r8
   158d4:	andeq	r7, r1, ip, lsl r8

000158d8 <free_node_if@@Base>:
   158d8:	push	{fp, lr}
   158dc:	add	fp, sp, #4
   158e0:	sub	sp, sp, #8
   158e4:	str	r0, [fp, #-8]
   158e8:	ldr	r3, [pc, #284]	; 15a0c <free_node_if@@Base+0x134>
   158ec:	add	r3, pc, r3
   158f0:	ldrd	r2, [r3]
   158f4:	adds	r2, r2, #1
   158f8:	adc	r3, r3, #0
   158fc:	ldr	r1, [pc, #268]	; 15a10 <free_node_if@@Base+0x138>
   15900:	add	r1, pc, r1
   15904:	strd	r2, [r1]
   15908:	ldr	r3, [fp, #-8]
   1590c:	ldr	r3, [r3, #4]
   15910:	cmp	r3, #0
   15914:	beq	15968 <free_node_if@@Base+0x90>
   15918:	ldr	r3, [pc, #244]	; 15a14 <free_node_if@@Base+0x13c>
   1591c:	add	r3, pc, r3
   15920:	ldrd	r2, [r3, #8]
   15924:	adds	r2, r2, #1
   15928:	adc	r3, r3, #0
   1592c:	ldr	r1, [pc, #228]	; 15a18 <free_node_if@@Base+0x140>
   15930:	add	r1, pc, r1
   15934:	strd	r2, [r1, #8]
   15938:	ldr	r3, [fp, #-8]
   1593c:	ldr	r3, [r3, #4]
   15940:	mov	r0, r3
   15944:	bl	152c4 <free_node@@Base>
   15948:	ldr	r3, [pc, #204]	; 15a1c <free_node_if@@Base+0x144>
   1594c:	add	r3, pc, r3
   15950:	ldrd	r2, [r3, #16]
   15954:	adds	r2, r2, #1
   15958:	adc	r3, r3, #0
   1595c:	ldr	r1, [pc, #188]	; 15a20 <free_node_if@@Base+0x148>
   15960:	add	r1, pc, r1
   15964:	strd	r2, [r1, #16]
   15968:	ldr	r3, [fp, #-8]
   1596c:	ldr	r3, [r3, #8]
   15970:	mov	r0, r3
   15974:	bl	152c4 <free_node@@Base>
   15978:	ldr	r3, [pc, #164]	; 15a24 <free_node_if@@Base+0x14c>
   1597c:	add	r3, pc, r3
   15980:	ldrd	r2, [r3, #24]
   15984:	adds	r2, r2, #1
   15988:	adc	r3, r3, #0
   1598c:	ldr	r1, [pc, #148]	; 15a28 <free_node_if@@Base+0x150>
   15990:	add	r1, pc, r1
   15994:	strd	r2, [r1, #24]
   15998:	ldr	r3, [fp, #-8]
   1599c:	ldr	r3, [r3, #12]
   159a0:	mov	r0, r3
   159a4:	bl	152c4 <free_node@@Base>
   159a8:	ldr	r3, [pc, #124]	; 15a2c <free_node_if@@Base+0x154>
   159ac:	add	r3, pc, r3
   159b0:	ldrd	r2, [r3, #32]
   159b4:	adds	r2, r2, #1
   159b8:	adc	r3, r3, #0
   159bc:	ldr	r1, [pc, #108]	; 15a30 <free_node_if@@Base+0x158>
   159c0:	add	r1, pc, r1
   159c4:	strd	r2, [r1, #32]
   159c8:	ldr	r3, [fp, #-8]
   159cc:	ldr	r3, [r3, #16]
   159d0:	mov	r0, r3
   159d4:	bl	152c4 <free_node@@Base>
   159d8:	ldr	r3, [pc, #84]	; 15a34 <free_node_if@@Base+0x15c>
   159dc:	add	r3, pc, r3
   159e0:	ldrd	r2, [r3, #40]	; 0x28
   159e4:	adds	r2, r2, #1
   159e8:	adc	r3, r3, #0
   159ec:	ldr	r1, [pc, #68]	; 15a38 <free_node_if@@Base+0x160>
   159f0:	add	r1, pc, r1
   159f4:	strd	r2, [r1, #40]	; 0x28
   159f8:	ldr	r0, [fp, #-8]
   159fc:	bl	118dc <free@plt>
   15a00:	nop			; (mov r0, r0)
   15a04:	sub	sp, fp, #4
   15a08:	pop	{fp, pc}
   15a0c:	andeq	r7, r1, r4, lsr #15
   15a10:	muleq	r1, r0, r7
   15a14:	andeq	r7, r1, r4, ror r7
   15a18:	andeq	r7, r1, r0, ror #14
   15a1c:	andeq	r7, r1, r4, asr #14
   15a20:	andeq	r7, r1, r0, lsr r7
   15a24:	andeq	r7, r1, r4, lsl r7
   15a28:	andeq	r7, r1, r0, lsl #14
   15a2c:	andeq	r7, r1, r4, ror #13
   15a30:	ldrdeq	r7, [r1], -r0
   15a34:			; <UNDEFINED> instruction: 0x000176b4
   15a38:	andeq	r7, r1, r0, lsr #13

00015a3c <free_node_boolean_operator@@Base>:
   15a3c:	push	{fp, lr}
   15a40:	add	fp, sp, #4
   15a44:	sub	sp, sp, #8
   15a48:	str	r0, [fp, #-8]
   15a4c:	ldr	r3, [pc, #236]	; 15b40 <free_node_boolean_operator@@Base+0x104>
   15a50:	add	r3, pc, r3
   15a54:	ldrd	r2, [r3]
   15a58:	adds	r2, r2, #1
   15a5c:	adc	r3, r3, #0
   15a60:	ldr	r1, [pc, #220]	; 15b44 <free_node_boolean_operator@@Base+0x108>
   15a64:	add	r1, pc, r1
   15a68:	strd	r2, [r1]
   15a6c:	ldr	r3, [fp, #-8]
   15a70:	ldr	r3, [r3, #4]
   15a74:	cmp	r3, #0
   15a78:	beq	15acc <free_node_boolean_operator@@Base+0x90>
   15a7c:	ldr	r3, [pc, #196]	; 15b48 <free_node_boolean_operator@@Base+0x10c>
   15a80:	add	r3, pc, r3
   15a84:	ldrd	r2, [r3, #8]
   15a88:	adds	r2, r2, #1
   15a8c:	adc	r3, r3, #0
   15a90:	ldr	r1, [pc, #180]	; 15b4c <free_node_boolean_operator@@Base+0x110>
   15a94:	add	r1, pc, r1
   15a98:	strd	r2, [r1, #8]
   15a9c:	ldr	r3, [fp, #-8]
   15aa0:	ldr	r3, [r3, #4]
   15aa4:	mov	r0, r3
   15aa8:	bl	152c4 <free_node@@Base>
   15aac:	ldr	r3, [pc, #156]	; 15b50 <free_node_boolean_operator@@Base+0x114>
   15ab0:	add	r3, pc, r3
   15ab4:	ldrd	r2, [r3, #16]
   15ab8:	adds	r2, r2, #1
   15abc:	adc	r3, r3, #0
   15ac0:	ldr	r1, [pc, #140]	; 15b54 <free_node_boolean_operator@@Base+0x118>
   15ac4:	add	r1, pc, r1
   15ac8:	strd	r2, [r1, #16]
   15acc:	ldr	r3, [fp, #-8]
   15ad0:	ldr	r3, [r3, #8]
   15ad4:	mov	r0, r3
   15ad8:	bl	152c4 <free_node@@Base>
   15adc:	ldr	r3, [pc, #116]	; 15b58 <free_node_boolean_operator@@Base+0x11c>
   15ae0:	add	r3, pc, r3
   15ae4:	ldrd	r2, [r3, #24]
   15ae8:	adds	r2, r2, #1
   15aec:	adc	r3, r3, #0
   15af0:	ldr	r1, [pc, #100]	; 15b5c <free_node_boolean_operator@@Base+0x120>
   15af4:	add	r1, pc, r1
   15af8:	strd	r2, [r1, #24]
   15afc:	ldr	r3, [fp, #-8]
   15b00:	ldr	r3, [r3, #12]
   15b04:	mov	r0, r3
   15b08:	bl	152c4 <free_node@@Base>
   15b0c:	ldr	r3, [pc, #76]	; 15b60 <free_node_boolean_operator@@Base+0x124>
   15b10:	add	r3, pc, r3
   15b14:	ldrd	r2, [r3, #32]
   15b18:	adds	r2, r2, #1
   15b1c:	adc	r3, r3, #0
   15b20:	ldr	r1, [pc, #60]	; 15b64 <free_node_boolean_operator@@Base+0x128>
   15b24:	add	r1, pc, r1
   15b28:	strd	r2, [r1, #32]
   15b2c:	ldr	r0, [fp, #-8]
   15b30:	bl	118dc <free@plt>
   15b34:	nop			; (mov r0, r0)
   15b38:	sub	sp, fp, #4
   15b3c:	pop	{fp, pc}
   15b40:	andeq	r7, r1, r8, lsl r6
   15b44:	andeq	r7, r1, r4, lsl #12
   15b48:	andeq	r7, r1, r8, ror #11
   15b4c:	ldrdeq	r7, [r1], -r4
   15b50:			; <UNDEFINED> instruction: 0x000175b8
   15b54:	andeq	r7, r1, r4, lsr #11
   15b58:	andeq	r7, r1, r8, lsl #11
   15b5c:	andeq	r7, r1, r4, ror r5
   15b60:	andeq	r7, r1, r8, asr r5
   15b64:	andeq	r7, r1, r4, asr #10

00015b68 <get_boolean_op_value@@Base>:
   15b68:	push	{r4, fp, lr}
   15b6c:	add	fp, sp, #8
   15b70:	sub	sp, sp, #20
   15b74:	str	r0, [fp, #-24]	; 0xffffffe8
   15b78:	ldr	r4, [pc, #940]	; 15f2c <get_boolean_op_value@@Base+0x3c4>
   15b7c:	add	r4, pc, r4
   15b80:	ldr	r3, [pc, #936]	; 15f30 <get_boolean_op_value@@Base+0x3c8>
   15b84:	add	r3, pc, r3
   15b88:	ldrd	r2, [r3]
   15b8c:	adds	r2, r2, #1
   15b90:	adc	r3, r3, #0
   15b94:	ldr	r1, [pc, #920]	; 15f34 <get_boolean_op_value@@Base+0x3cc>
   15b98:	add	r1, pc, r1
   15b9c:	strd	r2, [r1]
   15ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ba4:	ldr	r3, [r3, #4]
   15ba8:	mov	r1, #2
   15bac:	mov	r0, r3
   15bb0:	bl	11a08 <strnlen@plt>
   15bb4:	str	r0, [fp, #-16]
   15bb8:	ldr	r3, [fp, #-16]
   15bbc:	cmp	r3, #2
   15bc0:	bne	15e14 <get_boolean_op_value@@Base+0x2ac>
   15bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bc8:	ldr	r3, [r3, #4]
   15bcc:	mov	r2, #2
   15bd0:	ldr	r1, [pc, #864]	; 15f38 <get_boolean_op_value@@Base+0x3d0>
   15bd4:	add	r1, pc, r1
   15bd8:	mov	r0, r3
   15bdc:	bl	11a44 <strncmp@plt>
   15be0:	mov	r3, r0
   15be4:	cmp	r3, #0
   15be8:	bne	15c14 <get_boolean_op_value@@Base+0xac>
   15bec:	mov	r3, #0
   15bf0:	ldr	r2, [pc, #836]	; 15f3c <get_boolean_op_value@@Base+0x3d4>
   15bf4:	add	r2, pc, r2
   15bf8:	ldrd	r0, [r2, #8]
   15bfc:	adds	r0, r0, #1
   15c00:	adc	r1, r1, #0
   15c04:	ldr	r2, [pc, #820]	; 15f40 <get_boolean_op_value@@Base+0x3d8>
   15c08:	add	r2, pc, r2
   15c0c:	strd	r0, [r2, #8]
   15c10:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c18:	ldr	r3, [r3, #4]
   15c1c:	mov	r2, #2
   15c20:	ldr	r1, [pc, #796]	; 15f44 <get_boolean_op_value@@Base+0x3dc>
   15c24:	add	r1, pc, r1
   15c28:	mov	r0, r3
   15c2c:	bl	11a44 <strncmp@plt>
   15c30:	mov	r3, r0
   15c34:	cmp	r3, #0
   15c38:	bne	15c64 <get_boolean_op_value@@Base+0xfc>
   15c3c:	mov	r3, #1
   15c40:	ldr	r2, [pc, #768]	; 15f48 <get_boolean_op_value@@Base+0x3e0>
   15c44:	add	r2, pc, r2
   15c48:	ldrd	r0, [r2, #16]
   15c4c:	adds	r0, r0, #1
   15c50:	adc	r1, r1, #0
   15c54:	ldr	r2, [pc, #752]	; 15f4c <get_boolean_op_value@@Base+0x3e4>
   15c58:	add	r2, pc, r2
   15c5c:	strd	r0, [r2, #16]
   15c60:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15c64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c68:	ldr	r3, [r3, #4]
   15c6c:	mov	r2, #2
   15c70:	ldr	r1, [pc, #728]	; 15f50 <get_boolean_op_value@@Base+0x3e8>
   15c74:	add	r1, pc, r1
   15c78:	mov	r0, r3
   15c7c:	bl	11a44 <strncmp@plt>
   15c80:	mov	r3, r0
   15c84:	cmp	r3, #0
   15c88:	bne	15cb4 <get_boolean_op_value@@Base+0x14c>
   15c8c:	mov	r3, #2
   15c90:	ldr	r2, [pc, #700]	; 15f54 <get_boolean_op_value@@Base+0x3ec>
   15c94:	add	r2, pc, r2
   15c98:	ldrd	r0, [r2, #24]
   15c9c:	adds	r0, r0, #1
   15ca0:	adc	r1, r1, #0
   15ca4:	ldr	r2, [pc, #684]	; 15f58 <get_boolean_op_value@@Base+0x3f0>
   15ca8:	add	r2, pc, r2
   15cac:	strd	r0, [r2, #24]
   15cb0:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cb8:	ldr	r3, [r3, #4]
   15cbc:	mov	r2, #2
   15cc0:	ldr	r1, [pc, #660]	; 15f5c <get_boolean_op_value@@Base+0x3f4>
   15cc4:	add	r1, pc, r1
   15cc8:	mov	r0, r3
   15ccc:	bl	11a44 <strncmp@plt>
   15cd0:	mov	r3, r0
   15cd4:	cmp	r3, #0
   15cd8:	bne	15d04 <get_boolean_op_value@@Base+0x19c>
   15cdc:	mov	r3, #3
   15ce0:	ldr	r2, [pc, #632]	; 15f60 <get_boolean_op_value@@Base+0x3f8>
   15ce4:	add	r2, pc, r2
   15ce8:	ldrd	r0, [r2, #32]
   15cec:	adds	r0, r0, #1
   15cf0:	adc	r1, r1, #0
   15cf4:	ldr	r2, [pc, #616]	; 15f64 <get_boolean_op_value@@Base+0x3fc>
   15cf8:	add	r2, pc, r2
   15cfc:	strd	r0, [r2, #32]
   15d00:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15d04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d08:	ldr	r3, [r3, #4]
   15d0c:	mov	r2, #2
   15d10:	ldr	r1, [pc, #592]	; 15f68 <get_boolean_op_value@@Base+0x400>
   15d14:	add	r1, pc, r1
   15d18:	mov	r0, r3
   15d1c:	bl	11a44 <strncmp@plt>
   15d20:	mov	r3, r0
   15d24:	cmp	r3, #0
   15d28:	bne	15d54 <get_boolean_op_value@@Base+0x1ec>
   15d2c:	mov	r3, #4
   15d30:	ldr	r2, [pc, #564]	; 15f6c <get_boolean_op_value@@Base+0x404>
   15d34:	add	r2, pc, r2
   15d38:	ldrd	r0, [r2, #40]	; 0x28
   15d3c:	adds	r0, r0, #1
   15d40:	adc	r1, r1, #0
   15d44:	ldr	r2, [pc, #548]	; 15f70 <get_boolean_op_value@@Base+0x408>
   15d48:	add	r2, pc, r2
   15d4c:	strd	r0, [r2, #40]	; 0x28
   15d50:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15d54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d58:	ldr	r3, [r3, #4]
   15d5c:	mov	r2, #2
   15d60:	ldr	r1, [pc, #524]	; 15f74 <get_boolean_op_value@@Base+0x40c>
   15d64:	add	r1, pc, r1
   15d68:	mov	r0, r3
   15d6c:	bl	11a44 <strncmp@plt>
   15d70:	mov	r3, r0
   15d74:	cmp	r3, #0
   15d78:	bne	15da4 <get_boolean_op_value@@Base+0x23c>
   15d7c:	mov	r3, #5
   15d80:	ldr	r2, [pc, #496]	; 15f78 <get_boolean_op_value@@Base+0x410>
   15d84:	add	r2, pc, r2
   15d88:	ldrd	r0, [r2, #56]	; 0x38
   15d8c:	adds	r0, r0, #1
   15d90:	adc	r1, r1, #0
   15d94:	ldr	r2, [pc, #480]	; 15f7c <get_boolean_op_value@@Base+0x414>
   15d98:	add	r2, pc, r2
   15d9c:	strd	r0, [r2, #56]	; 0x38
   15da0:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15da4:	ldr	r3, [pc, #468]	; 15f80 <get_boolean_op_value@@Base+0x418>
   15da8:	add	r3, pc, r3
   15dac:	ldrd	r2, [r3, #48]	; 0x30
   15db0:	adds	r2, r2, #1
   15db4:	adc	r3, r3, #0
   15db8:	ldr	r1, [pc, #452]	; 15f84 <get_boolean_op_value@@Base+0x41c>
   15dbc:	add	r1, pc, r1
   15dc0:	strd	r2, [r1, #48]	; 0x30
   15dc4:	ldr	r3, [pc, #444]	; 15f88 <get_boolean_op_value@@Base+0x420>
   15dc8:	ldr	r3, [r4, r3]
   15dcc:	ldr	r0, [r3]
   15dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dd4:	ldr	r3, [r3, #4]
   15dd8:	mov	r2, r3
   15ddc:	ldr	r3, [pc, #424]	; 15f8c <get_boolean_op_value@@Base+0x424>
   15de0:	add	r3, pc, r3
   15de4:	mov	r1, r3
   15de8:	bl	1199c <fprintf@plt>
   15dec:	ldr	r3, [pc, #412]	; 15f90 <get_boolean_op_value@@Base+0x428>
   15df0:	add	r3, pc, r3
   15df4:	ldrd	r2, [r3, #64]	; 0x40
   15df8:	adds	r2, r2, #1
   15dfc:	adc	r3, r3, #0
   15e00:	ldr	r1, [pc, #396]	; 15f94 <get_boolean_op_value@@Base+0x42c>
   15e04:	add	r1, pc, r1
   15e08:	strd	r2, [r1, #64]	; 0x40
   15e0c:	mov	r0, #1
   15e10:	bl	11978 <exit@plt>
   15e14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e18:	ldr	r3, [r3, #4]
   15e1c:	ldrb	r3, [r3]
   15e20:	cmp	r3, #60	; 0x3c
   15e24:	beq	15e60 <get_boolean_op_value@@Base+0x2f8>
   15e28:	cmp	r3, #62	; 0x3e
   15e2c:	beq	15e88 <get_boolean_op_value@@Base+0x320>
   15e30:	cmp	r3, #33	; 0x21
   15e34:	bne	15eb0 <get_boolean_op_value@@Base+0x348>
   15e38:	mov	r3, #8
   15e3c:	ldr	r2, [pc, #340]	; 15f98 <get_boolean_op_value@@Base+0x430>
   15e40:	add	r2, pc, r2
   15e44:	ldrd	r0, [r2, #80]	; 0x50
   15e48:	adds	r0, r0, #1
   15e4c:	adc	r1, r1, #0
   15e50:	ldr	r2, [pc, #324]	; 15f9c <get_boolean_op_value@@Base+0x434>
   15e54:	add	r2, pc, r2
   15e58:	strd	r0, [r2, #80]	; 0x50
   15e5c:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15e60:	mov	r3, #6
   15e64:	ldr	r2, [pc, #308]	; 15fa0 <get_boolean_op_value@@Base+0x438>
   15e68:	add	r2, pc, r2
   15e6c:	ldrd	r0, [r2, #88]	; 0x58
   15e70:	adds	r0, r0, #1
   15e74:	adc	r1, r1, #0
   15e78:	ldr	r2, [pc, #292]	; 15fa4 <get_boolean_op_value@@Base+0x43c>
   15e7c:	add	r2, pc, r2
   15e80:	strd	r0, [r2, #88]	; 0x58
   15e84:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15e88:	mov	r3, #7
   15e8c:	ldr	r2, [pc, #276]	; 15fa8 <get_boolean_op_value@@Base+0x440>
   15e90:	add	r2, pc, r2
   15e94:	ldrd	r0, [r2, #96]	; 0x60
   15e98:	adds	r0, r0, #1
   15e9c:	adc	r1, r1, #0
   15ea0:	ldr	r2, [pc, #260]	; 15fac <get_boolean_op_value@@Base+0x444>
   15ea4:	add	r2, pc, r2
   15ea8:	strd	r0, [r2, #96]	; 0x60
   15eac:	b	15f20 <get_boolean_op_value@@Base+0x3b8>
   15eb0:	ldr	r3, [pc, #248]	; 15fb0 <get_boolean_op_value@@Base+0x448>
   15eb4:	add	r3, pc, r3
   15eb8:	ldrd	r2, [r3, #72]	; 0x48
   15ebc:	adds	r2, r2, #1
   15ec0:	adc	r3, r3, #0
   15ec4:	ldr	r1, [pc, #232]	; 15fb4 <get_boolean_op_value@@Base+0x44c>
   15ec8:	add	r1, pc, r1
   15ecc:	strd	r2, [r1, #72]	; 0x48
   15ed0:	ldr	r3, [pc, #176]	; 15f88 <get_boolean_op_value@@Base+0x420>
   15ed4:	ldr	r3, [r4, r3]
   15ed8:	ldr	r0, [r3]
   15edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ee0:	ldr	r3, [r3, #4]
   15ee4:	mov	r2, r3
   15ee8:	ldr	r3, [pc, #200]	; 15fb8 <get_boolean_op_value@@Base+0x450>
   15eec:	add	r3, pc, r3
   15ef0:	mov	r1, r3
   15ef4:	bl	1199c <fprintf@plt>
   15ef8:	ldr	r3, [pc, #188]	; 15fbc <get_boolean_op_value@@Base+0x454>
   15efc:	add	r3, pc, r3
   15f00:	ldrd	r2, [r3, #104]	; 0x68
   15f04:	adds	r2, r2, #1
   15f08:	adc	r3, r3, #0
   15f0c:	ldr	r1, [pc, #172]	; 15fc0 <get_boolean_op_value@@Base+0x458>
   15f10:	add	r1, pc, r1
   15f14:	strd	r2, [r1, #104]	; 0x68
   15f18:	mov	r0, #1
   15f1c:	bl	11978 <exit@plt>
   15f20:	mov	r0, r3
   15f24:	sub	sp, fp, #8
   15f28:	pop	{r4, fp, pc}
   15f2c:	andeq	r6, r1, ip, ror r4
   15f30:	andeq	r7, r1, r4, ror r4
   15f34:	andeq	r7, r1, r0, ror #8
   15f38:	andeq	r5, r0, r4, asr #16
   15f3c:	andeq	r7, r1, r4, lsl #8
   15f40:	strdeq	r7, [r1], -r0
   15f44:	strdeq	r5, [r0], -r8
   15f48:			; <UNDEFINED> instruction: 0x000173b4
   15f4c:	andeq	r7, r1, r0, lsr #7
   15f50:	andeq	r5, r0, ip, lsr #15
   15f54:	andeq	r7, r1, r4, ror #6
   15f58:	andeq	r7, r1, r0, asr r3
   15f5c:	andeq	r5, r0, r0, ror #14
   15f60:	andeq	r7, r1, r4, lsl r3
   15f64:	andeq	r7, r1, r0, lsl #6
   15f68:	andeq	r5, r0, r4, lsl r7
   15f6c:	andeq	r7, r1, r4, asr #5
   15f70:			; <UNDEFINED> instruction: 0x000172b0
   15f74:	andeq	r5, r0, r8, asr #13
   15f78:	andeq	r7, r1, r4, ror r2
   15f7c:	andeq	r7, r1, r0, ror #4
   15f80:	andeq	r7, r1, r0, asr r2
   15f84:	andeq	r7, r1, ip, lsr r2
   15f88:	andeq	r0, r0, r4, lsr #1
   15f8c:	andeq	r5, r0, r0, asr r6
   15f90:	andeq	r7, r1, r8, lsl #4
   15f94:	strdeq	r7, [r1], -r4
   15f98:			; <UNDEFINED> instruction: 0x000171b8
   15f9c:	andeq	r7, r1, r4, lsr #3
   15fa0:	muleq	r1, r0, r1
   15fa4:	andeq	r7, r1, ip, ror r1
   15fa8:	andeq	r7, r1, r8, ror #2
   15fac:	andeq	r7, r1, r4, asr r1
   15fb0:	andeq	r7, r1, r4, asr #2
   15fb4:	andeq	r7, r1, r0, lsr r1
   15fb8:	andeq	r5, r0, r4, asr #10
   15fbc:	strdeq	r7, [r1], -ip
   15fc0:	andeq	r7, r1, r8, ror #1
   15fc4:	push	{fp, lr}
   15fc8:	add	fp, sp, #4
   15fcc:	ldr	r3, [pc, #12]	; 15fe0 <get_boolean_op_value@@Base+0x478>
   15fd0:	add	r3, pc, r3
   15fd4:	mov	r0, r3
   15fd8:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   15fdc:	pop	{fp, pc}
   15fe0:	andeq	r6, r1, r4, ror r7

00015fe4 <init_grammar@@Base>:
   15fe4:	push	{fp}		; (str fp, [sp, #-4]!)
   15fe8:	add	fp, sp, #0
   15fec:	sub	sp, sp, #12
   15ff0:	str	r0, [fp, #-8]
   15ff4:	str	r1, [fp, #-12]
   15ff8:	ldr	r3, [pc, #52]	; 16034 <init_grammar@@Base+0x50>
   15ffc:	add	r3, pc, r3
   16000:	ldrd	r2, [r3]
   16004:	adds	r2, r2, #1
   16008:	adc	r3, r3, #0
   1600c:	ldr	r1, [pc, #36]	; 16038 <init_grammar@@Base+0x54>
   16010:	add	r1, pc, r1
   16014:	strd	r2, [r1]
   16018:	ldr	r3, [fp, #-8]
   1601c:	ldr	r2, [fp, #-12]
   16020:	str	r2, [r3]
   16024:	nop			; (mov r0, r0)
   16028:	add	sp, fp, #0
   1602c:	pop	{fp}		; (ldr fp, [sp], #4)
   16030:	bx	lr
   16034:	andeq	r7, r1, ip, asr r5
   16038:	andeq	r7, r1, r8, asr #10

0001603c <destroy_grammar@@Base>:
   1603c:	push	{fp}		; (str fp, [sp, #-4]!)
   16040:	add	fp, sp, #0
   16044:	sub	sp, sp, #12
   16048:	str	r0, [fp, #-8]
   1604c:	ldr	r3, [pc, #40]	; 1607c <destroy_grammar@@Base+0x40>
   16050:	add	r3, pc, r3
   16054:	ldrd	r2, [r3]
   16058:	adds	r2, r2, #1
   1605c:	adc	r3, r3, #0
   16060:	ldr	r1, [pc, #24]	; 16080 <destroy_grammar@@Base+0x44>
   16064:	add	r1, pc, r1
   16068:	strd	r2, [r1]
   1606c:	nop			; (mov r0, r0)
   16070:	add	sp, fp, #0
   16074:	pop	{fp}		; (ldr fp, [sp], #4)
   16078:	bx	lr
   1607c:	andeq	r7, r1, r0, lsl #10
   16080:	andeq	r7, r1, ip, ror #9

00016084 <build_ast@@Base>:
   16084:	push	{fp, lr}
   16088:	add	fp, sp, #4
   1608c:	sub	sp, sp, #8
   16090:	str	r0, [fp, #-8]
   16094:	ldr	r3, [pc, #80]	; 160ec <build_ast@@Base+0x68>
   16098:	add	r3, pc, r3
   1609c:	ldrd	r2, [r3]
   160a0:	adds	r2, r2, #1
   160a4:	adc	r3, r3, #0
   160a8:	ldr	r1, [pc, #64]	; 160f0 <build_ast@@Base+0x6c>
   160ac:	add	r1, pc, r1
   160b0:	strd	r2, [r1]
   160b4:	ldr	r0, [fp, #-8]
   160b8:	bl	160fc <read_function_ast_node@@Base>
   160bc:	ldr	r3, [pc, #48]	; 160f4 <build_ast@@Base+0x70>
   160c0:	add	r3, pc, r3
   160c4:	ldrd	r2, [r3, #8]
   160c8:	adds	r2, r2, #1
   160cc:	adc	r3, r3, #0
   160d0:	ldr	r1, [pc, #32]	; 160f8 <build_ast@@Base+0x74>
   160d4:	add	r1, pc, r1
   160d8:	strd	r2, [r1, #8]
   160dc:	mov	r3, r0
   160e0:	mov	r0, r3
   160e4:	sub	sp, fp, #4
   160e8:	pop	{fp, pc}
   160ec:	andeq	r7, r1, r8, lsr #9
   160f0:	muleq	r1, r4, r4
   160f4:	andeq	r7, r1, r0, lsl #9
   160f8:	andeq	r7, r1, ip, ror #8

000160fc <read_function_ast_node@@Base>:
   160fc:	push	{fp, lr}
   16100:	add	fp, sp, #4
   16104:	sub	sp, sp, #24
   16108:	str	r0, [fp, #-24]	; 0xffffffe8
   1610c:	ldr	r3, [pc, #788]	; 16428 <read_function_ast_node@@Base+0x32c>
   16110:	add	r3, pc, r3
   16114:	ldrd	r2, [r3]
   16118:	adds	r2, r2, #1
   1611c:	adc	r3, r3, #0
   16120:	ldr	r1, [pc, #772]	; 1642c <read_function_ast_node@@Base+0x330>
   16124:	add	r1, pc, r1
   16128:	strd	r2, [r1]
   1612c:	mov	r3, #0
   16130:	str	r3, [fp, #-8]
   16134:	mov	r3, #0
   16138:	str	r3, [fp, #-12]
   1613c:	mov	r3, #0
   16140:	str	r3, [fp, #-16]
   16144:	mov	r3, #0
   16148:	str	r3, [fp, #-20]	; 0xffffffec
   1614c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16150:	ldr	r3, [r3]
   16154:	mov	r0, r3
   16158:	bl	130c4 <next@@Base>
   1615c:	str	r0, [fp, #-16]
   16160:	ldr	r3, [fp, #-16]
   16164:	ldr	r3, [r3]
   16168:	cmp	r3, #0
   1616c:	beq	16198 <read_function_ast_node@@Base+0x9c>
   16170:	mov	r3, #0
   16174:	ldr	r2, [pc, #692]	; 16430 <read_function_ast_node@@Base+0x334>
   16178:	add	r2, pc, r2
   1617c:	ldrd	r0, [r2, #16]
   16180:	adds	r0, r0, #1
   16184:	adc	r1, r1, #0
   16188:	ldr	r2, [pc, #676]	; 16434 <read_function_ast_node@@Base+0x338>
   1618c:	add	r2, pc, r2
   16190:	strd	r0, [r2, #16]
   16194:	b	1641c <read_function_ast_node@@Base+0x320>
   16198:	ldr	r3, [pc, #664]	; 16438 <read_function_ast_node@@Base+0x33c>
   1619c:	add	r3, pc, r3
   161a0:	ldrd	r2, [r3, #8]
   161a4:	adds	r2, r2, #1
   161a8:	adc	r3, r3, #0
   161ac:	ldr	r1, [pc, #648]	; 1643c <read_function_ast_node@@Base+0x340>
   161b0:	add	r1, pc, r1
   161b4:	strd	r2, [r1, #8]
   161b8:	ldr	r0, [fp, #-16]
   161bc:	bl	12888 <free_token_int_type@@Base>
   161c0:	ldr	r3, [pc, #632]	; 16440 <read_function_ast_node@@Base+0x344>
   161c4:	add	r3, pc, r3
   161c8:	ldrd	r2, [r3, #24]
   161cc:	adds	r2, r2, #1
   161d0:	adc	r3, r3, #0
   161d4:	ldr	r1, [pc, #616]	; 16444 <read_function_ast_node@@Base+0x348>
   161d8:	add	r1, pc, r1
   161dc:	strd	r2, [r1, #24]
   161e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161e4:	ldr	r3, [r3]
   161e8:	mov	r0, r3
   161ec:	bl	130c4 <next@@Base>
   161f0:	str	r0, [fp, #-16]
   161f4:	ldr	r3, [fp, #-16]
   161f8:	ldr	r3, [r3]
   161fc:	cmp	r3, #2
   16200:	beq	1622c <read_function_ast_node@@Base+0x130>
   16204:	mov	r3, #0
   16208:	ldr	r2, [pc, #568]	; 16448 <read_function_ast_node@@Base+0x34c>
   1620c:	add	r2, pc, r2
   16210:	ldrd	r0, [r2, #40]	; 0x28
   16214:	adds	r0, r0, #1
   16218:	adc	r1, r1, #0
   1621c:	ldr	r2, [pc, #552]	; 1644c <read_function_ast_node@@Base+0x350>
   16220:	add	r2, pc, r2
   16224:	strd	r0, [r2, #40]	; 0x28
   16228:	b	1641c <read_function_ast_node@@Base+0x320>
   1622c:	ldr	r3, [pc, #540]	; 16450 <read_function_ast_node@@Base+0x354>
   16230:	add	r3, pc, r3
   16234:	ldrd	r2, [r3, #32]
   16238:	adds	r2, r2, #1
   1623c:	adc	r3, r3, #0
   16240:	ldr	r1, [pc, #524]	; 16454 <read_function_ast_node@@Base+0x358>
   16244:	add	r1, pc, r1
   16248:	strd	r2, [r1, #32]
   1624c:	ldr	r3, [fp, #-16]
   16250:	str	r3, [fp, #-20]	; 0xffffffec
   16254:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16258:	ldr	r3, [r3]
   1625c:	mov	r0, r3
   16260:	bl	130c4 <next@@Base>
   16264:	str	r0, [fp, #-16]
   16268:	ldr	r3, [fp, #-16]
   1626c:	ldr	r3, [r3]
   16270:	cmp	r3, #3
   16274:	beq	162a0 <read_function_ast_node@@Base+0x1a4>
   16278:	mov	r3, #0
   1627c:	ldr	r2, [pc, #468]	; 16458 <read_function_ast_node@@Base+0x35c>
   16280:	add	r2, pc, r2
   16284:	ldrd	r0, [r2, #56]	; 0x38
   16288:	adds	r0, r0, #1
   1628c:	adc	r1, r1, #0
   16290:	ldr	r2, [pc, #452]	; 1645c <read_function_ast_node@@Base+0x360>
   16294:	add	r2, pc, r2
   16298:	strd	r0, [r2, #56]	; 0x38
   1629c:	b	1641c <read_function_ast_node@@Base+0x320>
   162a0:	ldr	r3, [pc, #440]	; 16460 <read_function_ast_node@@Base+0x364>
   162a4:	add	r3, pc, r3
   162a8:	ldrd	r2, [r3, #48]	; 0x30
   162ac:	adds	r2, r2, #1
   162b0:	adc	r3, r3, #0
   162b4:	ldr	r1, [pc, #424]	; 16464 <read_function_ast_node@@Base+0x368>
   162b8:	add	r1, pc, r1
   162bc:	strd	r2, [r1, #48]	; 0x30
   162c0:	ldr	r0, [fp, #-16]
   162c4:	bl	1296c <free_token_opar@@Base>
   162c8:	ldr	r3, [pc, #408]	; 16468 <read_function_ast_node@@Base+0x36c>
   162cc:	add	r3, pc, r3
   162d0:	ldrd	r2, [r3, #64]	; 0x40
   162d4:	adds	r2, r2, #1
   162d8:	adc	r3, r3, #0
   162dc:	ldr	r1, [pc, #392]	; 1646c <read_function_ast_node@@Base+0x370>
   162e0:	add	r1, pc, r1
   162e4:	strd	r2, [r1, #64]	; 0x40
   162e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162ec:	ldr	r3, [r3]
   162f0:	mov	r0, r3
   162f4:	bl	130c4 <next@@Base>
   162f8:	str	r0, [fp, #-16]
   162fc:	ldr	r3, [fp, #-16]
   16300:	ldr	r3, [r3]
   16304:	cmp	r3, #4
   16308:	beq	16334 <read_function_ast_node@@Base+0x238>
   1630c:	mov	r3, #0
   16310:	ldr	r2, [pc, #344]	; 16470 <read_function_ast_node@@Base+0x374>
   16314:	add	r2, pc, r2
   16318:	ldrd	r0, [r2, #80]	; 0x50
   1631c:	adds	r0, r0, #1
   16320:	adc	r1, r1, #0
   16324:	ldr	r2, [pc, #328]	; 16474 <read_function_ast_node@@Base+0x378>
   16328:	add	r2, pc, r2
   1632c:	strd	r0, [r2, #80]	; 0x50
   16330:	b	1641c <read_function_ast_node@@Base+0x320>
   16334:	ldr	r3, [pc, #316]	; 16478 <read_function_ast_node@@Base+0x37c>
   16338:	add	r3, pc, r3
   1633c:	ldrd	r2, [r3, #72]	; 0x48
   16340:	adds	r2, r2, #1
   16344:	adc	r3, r3, #0
   16348:	ldr	r1, [pc, #300]	; 1647c <read_function_ast_node@@Base+0x380>
   1634c:	add	r1, pc, r1
   16350:	strd	r2, [r1, #72]	; 0x48
   16354:	ldr	r0, [fp, #-16]
   16358:	bl	129b8 <free_token_cpar@@Base>
   1635c:	ldr	r3, [pc, #284]	; 16480 <read_function_ast_node@@Base+0x384>
   16360:	add	r3, pc, r3
   16364:	ldrd	r2, [r3, #88]	; 0x58
   16368:	adds	r2, r2, #1
   1636c:	adc	r3, r3, #0
   16370:	ldr	r1, [pc, #268]	; 16484 <read_function_ast_node@@Base+0x388>
   16374:	add	r1, pc, r1
   16378:	strd	r2, [r1, #88]	; 0x58
   1637c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16380:	bl	164a0 <read_body@@Base>
   16384:	str	r0, [fp, #-12]
   16388:	ldr	r3, [pc, #248]	; 16488 <read_function_ast_node@@Base+0x38c>
   1638c:	add	r3, pc, r3
   16390:	ldrd	r2, [r3, #96]	; 0x60
   16394:	adds	r2, r2, #1
   16398:	adc	r3, r3, #0
   1639c:	ldr	r1, [pc, #232]	; 1648c <read_function_ast_node@@Base+0x390>
   163a0:	add	r1, pc, r1
   163a4:	strd	r2, [r1, #96]	; 0x60
   163a8:	mov	r0, #16
   163ac:	bl	11930 <malloc@plt>
   163b0:	mov	r3, r0
   163b4:	str	r3, [fp, #-8]
   163b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   163bc:	ldr	r3, [r3, #4]
   163c0:	ldr	r2, [fp, #-12]
   163c4:	mov	r1, r3
   163c8:	ldr	r0, [fp, #-8]
   163cc:	bl	15038 <init_node_function@@Base>
   163d0:	ldr	r3, [pc, #184]	; 16490 <read_function_ast_node@@Base+0x394>
   163d4:	add	r3, pc, r3
   163d8:	ldrd	r2, [r3, #104]	; 0x68
   163dc:	adds	r2, r2, #1
   163e0:	adc	r3, r3, #0
   163e4:	ldr	r1, [pc, #168]	; 16494 <read_function_ast_node@@Base+0x398>
   163e8:	add	r1, pc, r1
   163ec:	strd	r2, [r1, #104]	; 0x68
   163f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   163f4:	bl	12920 <free_token_function@@Base>
   163f8:	ldr	r3, [fp, #-8]
   163fc:	ldr	r2, [pc, #148]	; 16498 <read_function_ast_node@@Base+0x39c>
   16400:	add	r2, pc, r2
   16404:	ldrd	r0, [r2, #112]	; 0x70
   16408:	adds	r0, r0, #1
   1640c:	adc	r1, r1, #0
   16410:	ldr	r2, [pc, #132]	; 1649c <read_function_ast_node@@Base+0x3a0>
   16414:	add	r2, pc, r2
   16418:	strd	r0, [r2, #112]	; 0x70
   1641c:	mov	r0, r3
   16420:	sub	sp, fp, #4
   16424:	pop	{fp, pc}
   16428:			; <UNDEFINED> instruction: 0x000173b8
   1642c:	andeq	r7, r1, r4, lsr #7
   16430:	andeq	r7, r1, r0, asr r3
   16434:	andeq	r7, r1, ip, lsr r3
   16438:	andeq	r7, r1, ip, lsr #6
   1643c:	andeq	r7, r1, r8, lsl r3
   16440:	andeq	r7, r1, r4, lsl #6
   16444:	strdeq	r7, [r1], -r0
   16448:			; <UNDEFINED> instruction: 0x000172bc
   1644c:	andeq	r7, r1, r8, lsr #5
   16450:	muleq	r1, r8, r2
   16454:	andeq	r7, r1, r4, lsl #5
   16458:	andeq	r7, r1, r8, asr #4
   1645c:	andeq	r7, r1, r4, lsr r2
   16460:	andeq	r7, r1, r4, lsr #4
   16464:	andeq	r7, r1, r0, lsl r2
   16468:	strdeq	r7, [r1], -ip
   1646c:	andeq	r7, r1, r8, ror #3
   16470:			; <UNDEFINED> instruction: 0x000171b4
   16474:	andeq	r7, r1, r0, lsr #3
   16478:	muleq	r1, r0, r1
   1647c:	andeq	r7, r1, ip, ror r1
   16480:	andeq	r7, r1, r8, ror #2
   16484:	andeq	r7, r1, r4, asr r1
   16488:	andeq	r7, r1, ip, lsr r1
   1648c:	andeq	r7, r1, r8, lsr #2
   16490:	strdeq	r7, [r1], -r4
   16494:	andeq	r7, r1, r0, ror #1
   16498:	andeq	r7, r1, r8, asr #1
   1649c:	strheq	r7, [r1], -r4

000164a0 <read_body@@Base>:
   164a0:	push	{fp, lr}
   164a4:	add	fp, sp, #4
   164a8:	sub	sp, sp, #24
   164ac:	str	r0, [fp, #-24]	; 0xffffffe8
   164b0:	ldr	r3, [pc, #840]	; 16800 <read_body@@Base+0x360>
   164b4:	add	r3, pc, r3
   164b8:	ldrd	r2, [r3]
   164bc:	adds	r2, r2, #1
   164c0:	adc	r3, r3, #0
   164c4:	ldr	r1, [pc, #824]	; 16804 <read_body@@Base+0x364>
   164c8:	add	r1, pc, r1
   164cc:	strd	r2, [r1]
   164d0:	mov	r3, #0
   164d4:	str	r3, [fp, #-8]
   164d8:	mov	r3, #0
   164dc:	str	r3, [fp, #-12]
   164e0:	mov	r3, #0
   164e4:	str	r3, [fp, #-16]
   164e8:	mov	r3, #0
   164ec:	str	r3, [fp, #-20]	; 0xffffffec
   164f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164f4:	ldr	r3, [r3]
   164f8:	mov	r0, r3
   164fc:	bl	130c4 <next@@Base>
   16500:	str	r0, [fp, #-20]	; 0xffffffec
   16504:	ldr	r3, [fp, #-20]	; 0xffffffec
   16508:	ldr	r3, [r3]
   1650c:	cmp	r3, #5
   16510:	beq	1653c <read_body@@Base+0x9c>
   16514:	mov	r1, #0
   16518:	ldr	r3, [pc, #744]	; 16808 <read_body@@Base+0x368>
   1651c:	add	r3, pc, r3
   16520:	ldrd	r2, [r3, #16]
   16524:	adds	r2, r2, #1
   16528:	adc	r3, r3, #0
   1652c:	ldr	r0, [pc, #728]	; 1680c <read_body@@Base+0x36c>
   16530:	add	r0, pc, r0
   16534:	strd	r2, [r0, #16]
   16538:	b	167f0 <read_body@@Base+0x350>
   1653c:	ldr	r3, [pc, #716]	; 16810 <read_body@@Base+0x370>
   16540:	add	r3, pc, r3
   16544:	ldrd	r2, [r3, #8]
   16548:	adds	r2, r2, #1
   1654c:	adc	r3, r3, #0
   16550:	ldr	r1, [pc, #700]	; 16814 <read_body@@Base+0x374>
   16554:	add	r1, pc, r1
   16558:	strd	r2, [r1, #8]
   1655c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16560:	bl	12a04 <free_token_obra@@Base>
   16564:	ldr	r3, [pc, #684]	; 16818 <read_body@@Base+0x378>
   16568:	add	r3, pc, r3
   1656c:	ldrd	r2, [r3, #24]
   16570:	adds	r2, r2, #1
   16574:	adc	r3, r3, #0
   16578:	ldr	r1, [pc, #668]	; 1681c <read_body@@Base+0x37c>
   1657c:	add	r1, pc, r1
   16580:	strd	r2, [r1, #24]
   16584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16588:	ldr	r3, [r3]
   1658c:	mov	r0, r3
   16590:	bl	130c4 <next@@Base>
   16594:	str	r0, [fp, #-20]	; 0xffffffec
   16598:	nop			; (mov r0, r0)
   1659c:	ldr	r3, [pc, #636]	; 16820 <read_body@@Base+0x380>
   165a0:	add	r3, pc, r3
   165a4:	ldrd	r2, [r3, #32]
   165a8:	adds	r2, r2, #1
   165ac:	adc	r3, r3, #0
   165b0:	ldr	r1, [pc, #620]	; 16824 <read_body@@Base+0x384>
   165b4:	add	r1, pc, r1
   165b8:	strd	r2, [r1, #32]
   165bc:	b	16794 <read_body@@Base+0x2f4>
   165c0:	ldr	r3, [pc, #608]	; 16828 <read_body@@Base+0x388>
   165c4:	add	r3, pc, r3
   165c8:	ldrd	r2, [r3, #104]	; 0x68
   165cc:	adds	r2, r2, #1
   165d0:	adc	r3, r3, #0
   165d4:	ldr	r1, [pc, #592]	; 1682c <read_body@@Base+0x38c>
   165d8:	add	r1, pc, r1
   165dc:	strd	r2, [r1, #104]	; 0x68
   165e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165e4:	ldr	r3, [r3]
   165e8:	cmp	r3, #7
   165ec:	beq	165fc <read_body@@Base+0x15c>
   165f0:	cmp	r3, #10
   165f4:	beq	16678 <read_body@@Base+0x1d8>
   165f8:	b	166d0 <read_body@@Base+0x230>
   165fc:	ldr	r3, [pc, #556]	; 16830 <read_body@@Base+0x390>
   16600:	add	r3, pc, r3
   16604:	ldrd	r2, [r3, #40]	; 0x28
   16608:	adds	r2, r2, #1
   1660c:	adc	r3, r3, #0
   16610:	ldr	r1, [pc, #540]	; 16834 <read_body@@Base+0x394>
   16614:	add	r1, pc, r1
   16618:	strd	r2, [r1, #40]	; 0x28
   1661c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16620:	bl	12a9c <free_token_return@@Base>
   16624:	ldr	r3, [pc, #524]	; 16838 <read_body@@Base+0x398>
   16628:	add	r3, pc, r3
   1662c:	ldrd	r2, [r3, #56]	; 0x38
   16630:	adds	r2, r2, #1
   16634:	adc	r3, r3, #0
   16638:	ldr	r1, [pc, #508]	; 1683c <read_body@@Base+0x39c>
   1663c:	add	r1, pc, r1
   16640:	strd	r2, [r1, #56]	; 0x38
   16644:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16648:	bl	16880 <read_return_expression@@Base>
   1664c:	str	r0, [fp, #-12]
   16650:	nop			; (mov r0, r0)
   16654:	ldr	r3, [pc, #484]	; 16840 <read_body@@Base+0x3a0>
   16658:	add	r3, pc, r3
   1665c:	ldrd	r2, [r3, #80]	; 0x50
   16660:	adds	r2, r2, #1
   16664:	adc	r3, r3, #0
   16668:	ldr	r1, [pc, #468]	; 16844 <read_body@@Base+0x3a4>
   1666c:	add	r1, pc, r1
   16670:	strd	r2, [r1, #80]	; 0x50
   16674:	b	1670c <read_body@@Base+0x26c>
   16678:	ldr	r3, [pc, #456]	; 16848 <read_body@@Base+0x3a8>
   1667c:	add	r3, pc, r3
   16680:	ldrd	r2, [r3, #48]	; 0x30
   16684:	adds	r2, r2, #1
   16688:	adc	r3, r3, #0
   1668c:	ldr	r1, [pc, #440]	; 1684c <read_body@@Base+0x3ac>
   16690:	add	r1, pc, r1
   16694:	strd	r2, [r1, #48]	; 0x30
   16698:	ldr	r0, [fp, #-20]	; 0xffffffec
   1669c:	bl	12b80 <free_token_if@@Base>
   166a0:	ldr	r3, [pc, #424]	; 16850 <read_body@@Base+0x3b0>
   166a4:	add	r3, pc, r3
   166a8:	ldrd	r2, [r3, #64]	; 0x40
   166ac:	adds	r2, r2, #1
   166b0:	adc	r3, r3, #0
   166b4:	ldr	r1, [pc, #408]	; 16854 <read_body@@Base+0x3b4>
   166b8:	add	r1, pc, r1
   166bc:	strd	r2, [r1, #64]	; 0x40
   166c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166c4:	bl	16adc <read_if_statement@@Base>
   166c8:	str	r0, [fp, #-12]
   166cc:	b	1670c <read_body@@Base+0x26c>
   166d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166d4:	ldr	r3, [r3]
   166d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   166dc:	mov	r0, r3
   166e0:	bl	12e58 <push_back@@Base>
   166e4:	ldr	r1, [fp, #-8]
   166e8:	ldr	r3, [pc, #360]	; 16858 <read_body@@Base+0x3b8>
   166ec:	add	r3, pc, r3
   166f0:	ldrd	r2, [r3, #72]	; 0x48
   166f4:	adds	r2, r2, #1
   166f8:	adc	r3, r3, #0
   166fc:	ldr	r0, [pc, #344]	; 1685c <read_body@@Base+0x3bc>
   16700:	add	r0, pc, r0
   16704:	strd	r2, [r0, #72]	; 0x48
   16708:	b	167f0 <read_body@@Base+0x350>
   1670c:	ldr	r3, [fp, #-8]
   16710:	cmp	r3, #0
   16714:	beq	16750 <read_body@@Base+0x2b0>
   16718:	ldr	r3, [fp, #-16]
   1671c:	ldr	r2, [fp, #-12]
   16720:	str	r2, [r3, #4]
   16724:	ldr	r3, [fp, #-12]
   16728:	str	r3, [fp, #-16]
   1672c:	ldr	r3, [pc, #300]	; 16860 <read_body@@Base+0x3c0>
   16730:	add	r3, pc, r3
   16734:	ldrd	r2, [r3, #88]	; 0x58
   16738:	adds	r2, r2, #1
   1673c:	adc	r3, r3, #0
   16740:	ldr	r1, [pc, #284]	; 16864 <read_body@@Base+0x3c4>
   16744:	add	r1, pc, r1
   16748:	strd	r2, [r1, #88]	; 0x58
   1674c:	b	16780 <read_body@@Base+0x2e0>
   16750:	ldr	r3, [fp, #-12]
   16754:	str	r3, [fp, #-8]
   16758:	ldr	r3, [fp, #-12]
   1675c:	str	r3, [fp, #-16]
   16760:	ldr	r3, [pc, #256]	; 16868 <read_body@@Base+0x3c8>
   16764:	add	r3, pc, r3
   16768:	ldrd	r2, [r3, #96]	; 0x60
   1676c:	adds	r2, r2, #1
   16770:	adc	r3, r3, #0
   16774:	ldr	r1, [pc, #240]	; 1686c <read_body@@Base+0x3cc>
   16778:	add	r1, pc, r1
   1677c:	strd	r2, [r1, #96]	; 0x60
   16780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16784:	ldr	r3, [r3]
   16788:	mov	r0, r3
   1678c:	bl	130c4 <next@@Base>
   16790:	str	r0, [fp, #-20]	; 0xffffffec
   16794:	ldr	r3, [fp, #-20]	; 0xffffffec
   16798:	ldr	r3, [r3]
   1679c:	cmp	r3, #6
   167a0:	bne	165c0 <read_body@@Base+0x120>
   167a4:	ldr	r3, [pc, #196]	; 16870 <read_body@@Base+0x3d0>
   167a8:	add	r3, pc, r3
   167ac:	ldrd	r2, [r3, #112]	; 0x70
   167b0:	adds	r2, r2, #1
   167b4:	adc	r3, r3, #0
   167b8:	ldr	r1, [pc, #180]	; 16874 <read_body@@Base+0x3d4>
   167bc:	add	r1, pc, r1
   167c0:	strd	r2, [r1, #112]	; 0x70
   167c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   167c8:	bl	12a50 <free_token_cbra@@Base>
   167cc:	ldr	r1, [fp, #-8]
   167d0:	ldr	r3, [pc, #160]	; 16878 <read_body@@Base+0x3d8>
   167d4:	add	r3, pc, r3
   167d8:	ldrd	r2, [r3, #120]	; 0x78
   167dc:	adds	r2, r2, #1
   167e0:	adc	r3, r3, #0
   167e4:	ldr	r0, [pc, #144]	; 1687c <read_body@@Base+0x3dc>
   167e8:	add	r0, pc, r0
   167ec:	strd	r2, [r0, #120]	; 0x78
   167f0:	mov	r3, r1
   167f4:	mov	r0, r3
   167f8:	sub	sp, fp, #4
   167fc:	pop	{fp, pc}
   16800:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16804:	andeq	r6, r1, r0, lsl #31
   16808:	andeq	r6, r1, ip, lsr #30
   1680c:	andeq	r6, r1, r8, lsl pc
   16810:	andeq	r6, r1, r8, lsl #30
   16814:	strdeq	r6, [r1], -r4
   16818:	andeq	r6, r1, r0, ror #29
   1681c:	andeq	r6, r1, ip, asr #29
   16820:	andeq	r6, r1, r8, lsr #29
   16824:	muleq	r1, r4, lr
   16828:	andeq	r6, r1, r4, lsl #29
   1682c:	andeq	r6, r1, r0, ror lr
   16830:	andeq	r6, r1, r8, asr #28
   16834:	andeq	r6, r1, r4, lsr lr
   16838:	andeq	r6, r1, r0, lsr #28
   1683c:	andeq	r6, r1, ip, lsl #28
   16840:	strdeq	r6, [r1], -r0
   16844:	ldrdeq	r6, [r1], -ip
   16848:	andeq	r6, r1, ip, asr #27
   1684c:			; <UNDEFINED> instruction: 0x00016db8
   16850:	andeq	r6, r1, r4, lsr #27
   16854:	muleq	r1, r0, sp
   16858:	andeq	r6, r1, ip, asr sp
   1685c:	andeq	r6, r1, r8, asr #26
   16860:	andeq	r6, r1, r8, lsl sp
   16864:	andeq	r6, r1, r4, lsl #26
   16868:	andeq	r6, r1, r4, ror #25
   1686c:	ldrdeq	r6, [r1], -r0
   16870:	andeq	r6, r1, r0, lsr #25
   16874:	andeq	r6, r1, ip, lsl #25
   16878:	andeq	r6, r1, r4, ror ip
   1687c:	andeq	r6, r1, r0, ror #24

00016880 <read_return_expression@@Base>:
   16880:	push	{fp, lr}
   16884:	add	fp, sp, #4
   16888:	sub	sp, sp, #24
   1688c:	str	r0, [fp, #-24]	; 0xffffffe8
   16890:	ldr	r3, [pc, #508]	; 16a94 <read_return_expression@@Base+0x214>
   16894:	add	r3, pc, r3
   16898:	ldrd	r2, [r3]
   1689c:	adds	r2, r2, #1
   168a0:	adc	r3, r3, #0
   168a4:	ldr	r1, [pc, #492]	; 16a98 <read_return_expression@@Base+0x218>
   168a8:	add	r1, pc, r1
   168ac:	strd	r2, [r1]
   168b0:	mov	r3, #0
   168b4:	str	r3, [fp, #-8]
   168b8:	mov	r3, #0
   168bc:	str	r3, [fp, #-12]
   168c0:	mov	r3, #0
   168c4:	str	r3, [fp, #-16]
   168c8:	mov	r3, #0
   168cc:	str	r3, [fp, #-20]	; 0xffffffec
   168d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168d4:	ldr	r3, [r3]
   168d8:	mov	r0, r3
   168dc:	bl	130c4 <next@@Base>
   168e0:	str	r0, [fp, #-16]
   168e4:	ldr	r3, [fp, #-16]
   168e8:	ldr	r3, [r3]
   168ec:	cmp	r3, #1
   168f0:	beq	1691c <read_return_expression@@Base+0x9c>
   168f4:	mov	r1, #0
   168f8:	ldr	r3, [pc, #412]	; 16a9c <read_return_expression@@Base+0x21c>
   168fc:	add	r3, pc, r3
   16900:	ldrd	r2, [r3, #16]
   16904:	adds	r2, r2, #1
   16908:	adc	r3, r3, #0
   1690c:	ldr	r0, [pc, #396]	; 16aa0 <read_return_expression@@Base+0x220>
   16910:	add	r0, pc, r0
   16914:	strd	r2, [r0, #16]
   16918:	b	16a84 <read_return_expression@@Base+0x204>
   1691c:	ldr	r3, [pc, #384]	; 16aa4 <read_return_expression@@Base+0x224>
   16920:	add	r3, pc, r3
   16924:	ldrd	r2, [r3, #8]
   16928:	adds	r2, r2, #1
   1692c:	adc	r3, r3, #0
   16930:	ldr	r1, [pc, #368]	; 16aa8 <read_return_expression@@Base+0x228>
   16934:	add	r1, pc, r1
   16938:	strd	r2, [r1, #8]
   1693c:	ldr	r3, [fp, #-16]
   16940:	str	r3, [fp, #-20]	; 0xffffffec
   16944:	mov	r0, #12
   16948:	bl	11930 <malloc@plt>
   1694c:	mov	r3, r0
   16950:	str	r3, [fp, #-12]
   16954:	ldr	r3, [fp, #-20]	; 0xffffffec
   16958:	ldr	r3, [r3, #4]
   1695c:	mov	r1, r3
   16960:	ldr	r0, [fp, #-12]
   16964:	bl	14fac <init_node_int@@Base>
   16968:	ldr	r3, [pc, #316]	; 16aac <read_return_expression@@Base+0x22c>
   1696c:	add	r3, pc, r3
   16970:	ldrd	r2, [r3, #24]
   16974:	adds	r2, r2, #1
   16978:	adc	r3, r3, #0
   1697c:	ldr	r1, [pc, #300]	; 16ab0 <read_return_expression@@Base+0x230>
   16980:	add	r1, pc, r1
   16984:	strd	r2, [r1, #24]
   16988:	ldr	r0, [fp, #-20]	; 0xffffffec
   1698c:	bl	128d4 <free_token_int_value@@Base>
   16990:	ldr	r3, [pc, #284]	; 16ab4 <read_return_expression@@Base+0x234>
   16994:	add	r3, pc, r3
   16998:	ldrd	r2, [r3, #32]
   1699c:	adds	r2, r2, #1
   169a0:	adc	r3, r3, #0
   169a4:	ldr	r1, [pc, #268]	; 16ab8 <read_return_expression@@Base+0x238>
   169a8:	add	r1, pc, r1
   169ac:	strd	r2, [r1, #32]
   169b0:	mov	r0, #12
   169b4:	bl	11930 <malloc@plt>
   169b8:	mov	r3, r0
   169bc:	str	r3, [fp, #-8]
   169c0:	ldr	r1, [fp, #-12]
   169c4:	ldr	r0, [fp, #-8]
   169c8:	bl	150d4 <init_node_return@@Base>
   169cc:	ldr	r3, [pc, #232]	; 16abc <read_return_expression@@Base+0x23c>
   169d0:	add	r3, pc, r3
   169d4:	ldrd	r2, [r3, #40]	; 0x28
   169d8:	adds	r2, r2, #1
   169dc:	adc	r3, r3, #0
   169e0:	ldr	r1, [pc, #216]	; 16ac0 <read_return_expression@@Base+0x240>
   169e4:	add	r1, pc, r1
   169e8:	strd	r2, [r1, #40]	; 0x28
   169ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169f0:	ldr	r3, [r3]
   169f4:	mov	r0, r3
   169f8:	bl	130c4 <next@@Base>
   169fc:	str	r0, [fp, #-16]
   16a00:	ldr	r3, [fp, #-16]
   16a04:	ldr	r3, [r3]
   16a08:	cmp	r3, #8
   16a0c:	beq	16a38 <read_return_expression@@Base+0x1b8>
   16a10:	mov	r1, #0
   16a14:	ldr	r3, [pc, #168]	; 16ac4 <read_return_expression@@Base+0x244>
   16a18:	add	r3, pc, r3
   16a1c:	ldrd	r2, [r3, #56]	; 0x38
   16a20:	adds	r2, r2, #1
   16a24:	adc	r3, r3, #0
   16a28:	ldr	r0, [pc, #152]	; 16ac8 <read_return_expression@@Base+0x248>
   16a2c:	add	r0, pc, r0
   16a30:	strd	r2, [r0, #56]	; 0x38
   16a34:	b	16a84 <read_return_expression@@Base+0x204>
   16a38:	ldr	r3, [pc, #140]	; 16acc <read_return_expression@@Base+0x24c>
   16a3c:	add	r3, pc, r3
   16a40:	ldrd	r2, [r3, #48]	; 0x30
   16a44:	adds	r2, r2, #1
   16a48:	adc	r3, r3, #0
   16a4c:	ldr	r1, [pc, #124]	; 16ad0 <read_return_expression@@Base+0x250>
   16a50:	add	r1, pc, r1
   16a54:	strd	r2, [r1, #48]	; 0x30
   16a58:	ldr	r0, [fp, #-16]
   16a5c:	bl	12ae8 <free_token_semicolon@@Base>
   16a60:	ldr	r1, [fp, #-8]
   16a64:	ldr	r3, [pc, #104]	; 16ad4 <read_return_expression@@Base+0x254>
   16a68:	add	r3, pc, r3
   16a6c:	ldrd	r2, [r3, #64]	; 0x40
   16a70:	adds	r2, r2, #1
   16a74:	adc	r3, r3, #0
   16a78:	ldr	r0, [pc, #88]	; 16ad8 <read_return_expression@@Base+0x258>
   16a7c:	add	r0, pc, r0
   16a80:	strd	r2, [r0, #64]	; 0x40
   16a84:	mov	r3, r1
   16a88:	mov	r0, r3
   16a8c:	sub	sp, fp, #4
   16a90:	pop	{fp, pc}
   16a94:	andeq	r6, r1, ip, ror #22
   16a98:	andeq	r6, r1, r8, asr fp
   16a9c:	andeq	r6, r1, r4, lsl #22
   16aa0:	strdeq	r6, [r1], -r0
   16aa4:	andeq	r6, r1, r0, ror #21
   16aa8:	andeq	r6, r1, ip, asr #21
   16aac:	muleq	r1, r4, sl
   16ab0:	andeq	r6, r1, r0, lsl #21
   16ab4:	andeq	r6, r1, ip, ror #20
   16ab8:	andeq	r6, r1, r8, asr sl
   16abc:	andeq	r6, r1, r0, lsr sl
   16ac0:	andeq	r6, r1, ip, lsl sl
   16ac4:	andeq	r6, r1, r8, ror #19
   16ac8:	ldrdeq	r6, [r1], -r4
   16acc:	andeq	r6, r1, r4, asr #19
   16ad0:			; <UNDEFINED> instruction: 0x000169b0
   16ad4:	muleq	r1, r8, r9
   16ad8:	andeq	r6, r1, r4, lsl #19

00016adc <read_if_statement@@Base>:
   16adc:	push	{fp, lr}
   16ae0:	add	fp, sp, #4
   16ae4:	sub	sp, sp, #32
   16ae8:	str	r0, [fp, #-32]	; 0xffffffe0
   16aec:	ldr	r3, [pc, #628]	; 16d68 <read_if_statement@@Base+0x28c>
   16af0:	add	r3, pc, r3
   16af4:	ldrd	r2, [r3]
   16af8:	adds	r2, r2, #1
   16afc:	adc	r3, r3, #0
   16b00:	ldr	r1, [pc, #612]	; 16d6c <read_if_statement@@Base+0x290>
   16b04:	add	r1, pc, r1
   16b08:	strd	r2, [r1]
   16b0c:	mov	r3, #0
   16b10:	str	r3, [fp, #-12]
   16b14:	mov	r3, #0
   16b18:	str	r3, [fp, #-16]
   16b1c:	mov	r3, #0
   16b20:	str	r3, [fp, #-20]	; 0xffffffec
   16b24:	mov	r3, #0
   16b28:	str	r3, [fp, #-8]
   16b2c:	mov	r3, #0
   16b30:	str	r3, [fp, #-24]	; 0xffffffe8
   16b34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b38:	ldr	r3, [r3]
   16b3c:	mov	r0, r3
   16b40:	bl	130c4 <next@@Base>
   16b44:	str	r0, [fp, #-24]	; 0xffffffe8
   16b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b4c:	ldr	r3, [r3]
   16b50:	cmp	r3, #3
   16b54:	beq	16b80 <read_if_statement@@Base+0xa4>
   16b58:	mov	r0, #0
   16b5c:	ldr	r3, [pc, #524]	; 16d70 <read_if_statement@@Base+0x294>
   16b60:	add	r3, pc, r3
   16b64:	ldrd	r2, [r3, #16]
   16b68:	adds	r2, r2, #1
   16b6c:	adc	r3, r3, #0
   16b70:	ldr	r1, [pc, #508]	; 16d74 <read_if_statement@@Base+0x298>
   16b74:	add	r1, pc, r1
   16b78:	strd	r2, [r1, #16]
   16b7c:	b	16d58 <read_if_statement@@Base+0x27c>
   16b80:	ldr	r3, [pc, #496]	; 16d78 <read_if_statement@@Base+0x29c>
   16b84:	add	r3, pc, r3
   16b88:	ldrd	r2, [r3, #8]
   16b8c:	adds	r2, r2, #1
   16b90:	adc	r3, r3, #0
   16b94:	ldr	r1, [pc, #480]	; 16d7c <read_if_statement@@Base+0x2a0>
   16b98:	add	r1, pc, r1
   16b9c:	strd	r2, [r1, #8]
   16ba0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ba4:	bl	1296c <free_token_opar@@Base>
   16ba8:	ldr	r3, [pc, #464]	; 16d80 <read_if_statement@@Base+0x2a4>
   16bac:	add	r3, pc, r3
   16bb0:	ldrd	r2, [r3, #24]
   16bb4:	adds	r2, r2, #1
   16bb8:	adc	r3, r3, #0
   16bbc:	ldr	r1, [pc, #448]	; 16d84 <read_if_statement@@Base+0x2a8>
   16bc0:	add	r1, pc, r1
   16bc4:	strd	r2, [r1, #24]
   16bc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16bcc:	bl	16dc8 <read_boolean_expression@@Base>
   16bd0:	str	r0, [fp, #-16]
   16bd4:	ldr	r3, [pc, #428]	; 16d88 <read_if_statement@@Base+0x2ac>
   16bd8:	add	r3, pc, r3
   16bdc:	ldrd	r2, [r3, #32]
   16be0:	adds	r2, r2, #1
   16be4:	adc	r3, r3, #0
   16be8:	ldr	r1, [pc, #412]	; 16d8c <read_if_statement@@Base+0x2b0>
   16bec:	add	r1, pc, r1
   16bf0:	strd	r2, [r1, #32]
   16bf4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16bf8:	bl	164a0 <read_body@@Base>
   16bfc:	str	r0, [fp, #-20]	; 0xffffffec
   16c00:	ldr	r3, [pc, #392]	; 16d90 <read_if_statement@@Base+0x2b4>
   16c04:	add	r3, pc, r3
   16c08:	ldrd	r2, [r3, #40]	; 0x28
   16c0c:	adds	r2, r2, #1
   16c10:	adc	r3, r3, #0
   16c14:	ldr	r1, [pc, #376]	; 16d94 <read_if_statement@@Base+0x2b8>
   16c18:	add	r1, pc, r1
   16c1c:	strd	r2, [r1, #40]	; 0x28
   16c20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c24:	ldr	r3, [r3]
   16c28:	mov	r0, r3
   16c2c:	bl	130c4 <next@@Base>
   16c30:	str	r0, [fp, #-24]	; 0xffffffe8
   16c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c38:	ldr	r3, [r3]
   16c3c:	cmp	r3, #11
   16c40:	bne	16cbc <read_if_statement@@Base+0x1e0>
   16c44:	ldr	r3, [pc, #332]	; 16d98 <read_if_statement@@Base+0x2bc>
   16c48:	add	r3, pc, r3
   16c4c:	ldrd	r2, [r3, #48]	; 0x30
   16c50:	adds	r2, r2, #1
   16c54:	adc	r3, r3, #0
   16c58:	ldr	r1, [pc, #316]	; 16d9c <read_if_statement@@Base+0x2c0>
   16c5c:	add	r1, pc, r1
   16c60:	strd	r2, [r1, #48]	; 0x30
   16c64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c68:	bl	12bcc <free_token_else@@Base>
   16c6c:	ldr	r3, [pc, #300]	; 16da0 <read_if_statement@@Base+0x2c4>
   16c70:	add	r3, pc, r3
   16c74:	ldrd	r2, [r3, #64]	; 0x40
   16c78:	adds	r2, r2, #1
   16c7c:	adc	r3, r3, #0
   16c80:	ldr	r1, [pc, #284]	; 16da4 <read_if_statement@@Base+0x2c8>
   16c84:	add	r1, pc, r1
   16c88:	strd	r2, [r1, #64]	; 0x40
   16c8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16c90:	bl	164a0 <read_body@@Base>
   16c94:	str	r0, [fp, #-8]
   16c98:	ldr	r3, [pc, #264]	; 16da8 <read_if_statement@@Base+0x2cc>
   16c9c:	add	r3, pc, r3
   16ca0:	ldrd	r2, [r3, #72]	; 0x48
   16ca4:	adds	r2, r2, #1
   16ca8:	adc	r3, r3, #0
   16cac:	ldr	r1, [pc, #248]	; 16dac <read_if_statement@@Base+0x2d0>
   16cb0:	add	r1, pc, r1
   16cb4:	strd	r2, [r1, #72]	; 0x48
   16cb8:	b	16d10 <read_if_statement@@Base+0x234>
   16cbc:	ldr	r3, [pc, #236]	; 16db0 <read_if_statement@@Base+0x2d4>
   16cc0:	add	r3, pc, r3
   16cc4:	ldrd	r2, [r3, #56]	; 0x38
   16cc8:	adds	r2, r2, #1
   16ccc:	adc	r3, r3, #0
   16cd0:	ldr	r1, [pc, #220]	; 16db4 <read_if_statement@@Base+0x2d8>
   16cd4:	add	r1, pc, r1
   16cd8:	strd	r2, [r1, #56]	; 0x38
   16cdc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ce0:	ldr	r3, [r3]
   16ce4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16ce8:	mov	r0, r3
   16cec:	bl	12e58 <push_back@@Base>
   16cf0:	ldr	r3, [pc, #192]	; 16db8 <read_if_statement@@Base+0x2dc>
   16cf4:	add	r3, pc, r3
   16cf8:	ldrd	r2, [r3, #80]	; 0x50
   16cfc:	adds	r2, r2, #1
   16d00:	adc	r3, r3, #0
   16d04:	ldr	r1, [pc, #176]	; 16dbc <read_if_statement@@Base+0x2e0>
   16d08:	add	r1, pc, r1
   16d0c:	strd	r2, [r1, #80]	; 0x50
   16d10:	mov	r0, #20
   16d14:	bl	11930 <malloc@plt>
   16d18:	mov	r3, r0
   16d1c:	str	r3, [fp, #-12]
   16d20:	ldr	r3, [fp, #-8]
   16d24:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d28:	ldr	r1, [fp, #-16]
   16d2c:	ldr	r0, [fp, #-12]
   16d30:	bl	15160 <init_node_if@@Base>
   16d34:	ldr	r0, [fp, #-12]
   16d38:	ldr	r3, [pc, #128]	; 16dc0 <read_if_statement@@Base+0x2e4>
   16d3c:	add	r3, pc, r3
   16d40:	ldrd	r2, [r3, #88]	; 0x58
   16d44:	adds	r2, r2, #1
   16d48:	adc	r3, r3, #0
   16d4c:	ldr	r1, [pc, #112]	; 16dc4 <read_if_statement@@Base+0x2e8>
   16d50:	add	r1, pc, r1
   16d54:	strd	r2, [r1, #88]	; 0x58
   16d58:	mov	r3, r0
   16d5c:	mov	r0, r3
   16d60:	sub	sp, fp, #4
   16d64:	pop	{fp, pc}
   16d68:			; <UNDEFINED> instruction: 0x000168b0
   16d6c:	muleq	r1, ip, r8
   16d70:	andeq	r6, r1, r0, asr #16
   16d74:	andeq	r6, r1, ip, lsr #16
   16d78:	andeq	r6, r1, ip, lsl r8
   16d7c:	andeq	r6, r1, r8, lsl #16
   16d80:	strdeq	r6, [r1], -r4
   16d84:	andeq	r6, r1, r0, ror #15
   16d88:	andeq	r6, r1, r8, asr #15
   16d8c:			; <UNDEFINED> instruction: 0x000167b4
   16d90:	muleq	r1, ip, r7
   16d94:	andeq	r6, r1, r8, lsl #15
   16d98:	andeq	r6, r1, r8, asr r7
   16d9c:	andeq	r6, r1, r4, asr #14
   16da0:	andeq	r6, r1, r0, lsr r7
   16da4:	andeq	r6, r1, ip, lsl r7
   16da8:	andeq	r6, r1, r4, lsl #14
   16dac:	strdeq	r6, [r1], -r0
   16db0:	andeq	r6, r1, r0, ror #13
   16db4:	andeq	r6, r1, ip, asr #13
   16db8:	andeq	r6, r1, ip, lsr #13
   16dbc:	muleq	r1, r8, r6
   16dc0:	andeq	r6, r1, r4, ror #12
   16dc4:	andeq	r6, r1, r0, asr r6

00016dc8 <read_boolean_expression@@Base>:
   16dc8:	push	{r4, fp, lr}
   16dcc:	add	fp, sp, #8
   16dd0:	sub	sp, sp, #28
   16dd4:	str	r0, [fp, #-32]	; 0xffffffe0
   16dd8:	ldr	r4, [pc, #712]	; 170a8 <read_boolean_expression@@Base+0x2e0>
   16ddc:	add	r4, pc, r4
   16de0:	ldr	r3, [pc, #708]	; 170ac <read_boolean_expression@@Base+0x2e4>
   16de4:	add	r3, pc, r3
   16de8:	ldrd	r2, [r3]
   16dec:	adds	r2, r2, #1
   16df0:	adc	r3, r3, #0
   16df4:	ldr	r1, [pc, #692]	; 170b0 <read_boolean_expression@@Base+0x2e8>
   16df8:	add	r1, pc, r1
   16dfc:	strd	r2, [r1]
   16e00:	mov	r3, #0
   16e04:	str	r3, [fp, #-16]
   16e08:	mov	r3, #0
   16e0c:	str	r3, [fp, #-20]	; 0xffffffec
   16e10:	mov	r3, #0
   16e14:	str	r3, [fp, #-28]	; 0xffffffe4
   16e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e1c:	ldr	r3, [r3]
   16e20:	mov	r0, r3
   16e24:	bl	130c4 <next@@Base>
   16e28:	str	r0, [fp, #-20]	; 0xffffffec
   16e2c:	nop			; (mov r0, r0)
   16e30:	ldr	r3, [pc, #636]	; 170b4 <read_boolean_expression@@Base+0x2ec>
   16e34:	add	r3, pc, r3
   16e38:	ldrd	r2, [r3, #8]
   16e3c:	adds	r2, r2, #1
   16e40:	adc	r3, r3, #0
   16e44:	ldr	r1, [pc, #620]	; 170b8 <read_boolean_expression@@Base+0x2f0>
   16e48:	add	r1, pc, r1
   16e4c:	strd	r2, [r1, #8]
   16e50:	b	1703c <read_boolean_expression@@Base+0x274>
   16e54:	ldr	r3, [pc, #608]	; 170bc <read_boolean_expression@@Base+0x2f4>
   16e58:	add	r3, pc, r3
   16e5c:	ldrd	r2, [r3, #80]	; 0x50
   16e60:	adds	r2, r2, #1
   16e64:	adc	r3, r3, #0
   16e68:	ldr	r1, [pc, #592]	; 170c0 <read_boolean_expression@@Base+0x2f8>
   16e6c:	add	r1, pc, r1
   16e70:	strd	r2, [r1, #80]	; 0x50
   16e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e78:	ldr	r3, [r3]
   16e7c:	cmp	r3, #3
   16e80:	beq	16f80 <read_boolean_expression@@Base+0x1b8>
   16e84:	cmp	r3, #12
   16e88:	beq	16f28 <read_boolean_expression@@Base+0x160>
   16e8c:	cmp	r3, #1
   16e90:	bne	16fe0 <read_boolean_expression@@Base+0x218>
   16e94:	ldr	r3, [pc, #552]	; 170c4 <read_boolean_expression@@Base+0x2fc>
   16e98:	add	r3, pc, r3
   16e9c:	ldrd	r2, [r3, #16]
   16ea0:	adds	r2, r2, #1
   16ea4:	adc	r3, r3, #0
   16ea8:	ldr	r1, [pc, #536]	; 170c8 <read_boolean_expression@@Base+0x300>
   16eac:	add	r1, pc, r1
   16eb0:	strd	r2, [r1, #16]
   16eb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16eb8:	ldr	r3, [r3]
   16ebc:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ec0:	mov	r0, r3
   16ec4:	bl	12e58 <push_back@@Base>
   16ec8:	ldr	r3, [pc, #508]	; 170cc <read_boolean_expression@@Base+0x304>
   16ecc:	add	r3, pc, r3
   16ed0:	ldrd	r2, [r3, #40]	; 0x28
   16ed4:	adds	r2, r2, #1
   16ed8:	adc	r3, r3, #0
   16edc:	ldr	r1, [pc, #492]	; 170d0 <read_boolean_expression@@Base+0x308>
   16ee0:	add	r1, pc, r1
   16ee4:	strd	r2, [r1, #40]	; 0x28
   16ee8:	sub	r2, fp, #28
   16eec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ef0:	ldr	r1, [fp, #-16]
   16ef4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ef8:	bl	1711c <read_single_boolean_expression@@Base>
   16efc:	str	r0, [fp, #-16]
   16f00:	nop			; (mov r0, r0)
   16f04:	ldr	r3, [pc, #456]	; 170d4 <read_boolean_expression@@Base+0x30c>
   16f08:	add	r3, pc, r3
   16f0c:	ldrd	r2, [r3, #72]	; 0x48
   16f10:	adds	r2, r2, #1
   16f14:	adc	r3, r3, #0
   16f18:	ldr	r1, [pc, #440]	; 170d8 <read_boolean_expression@@Base+0x310>
   16f1c:	add	r1, pc, r1
   16f20:	strd	r2, [r1, #72]	; 0x48
   16f24:	b	17028 <read_boolean_expression@@Base+0x260>
   16f28:	ldr	r3, [pc, #428]	; 170dc <read_boolean_expression@@Base+0x314>
   16f2c:	add	r3, pc, r3
   16f30:	ldrd	r2, [r3, #32]
   16f34:	adds	r2, r2, #1
   16f38:	adc	r3, r3, #0
   16f3c:	ldr	r1, [pc, #412]	; 170e0 <read_boolean_expression@@Base+0x318>
   16f40:	add	r1, pc, r1
   16f44:	strd	r2, [r1, #32]
   16f48:	ldr	r0, [fp, #-20]	; 0xffffffec
   16f4c:	bl	15b68 <get_boolean_op_value@@Base>
   16f50:	str	r0, [fp, #-24]	; 0xffffffe8
   16f54:	mov	r3, #1
   16f58:	str	r3, [fp, #-28]	; 0xffffffe4
   16f5c:	ldr	r3, [pc, #384]	; 170e4 <read_boolean_expression@@Base+0x31c>
   16f60:	add	r3, pc, r3
   16f64:	ldrd	r2, [r3, #48]	; 0x30
   16f68:	adds	r2, r2, #1
   16f6c:	adc	r3, r3, #0
   16f70:	ldr	r1, [pc, #368]	; 170e8 <read_boolean_expression@@Base+0x320>
   16f74:	add	r1, pc, r1
   16f78:	strd	r2, [r1, #48]	; 0x30
   16f7c:	b	17028 <read_boolean_expression@@Base+0x260>
   16f80:	ldr	r3, [pc, #356]	; 170ec <read_boolean_expression@@Base+0x324>
   16f84:	add	r3, pc, r3
   16f88:	ldrd	r2, [r3, #24]
   16f8c:	adds	r2, r2, #1
   16f90:	adc	r3, r3, #0
   16f94:	ldr	r1, [pc, #340]	; 170f0 <read_boolean_expression@@Base+0x328>
   16f98:	add	r1, pc, r1
   16f9c:	strd	r2, [r1, #24]
   16fa0:	sub	r2, fp, #28
   16fa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fa8:	ldr	r1, [fp, #-16]
   16fac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16fb0:	bl	1711c <read_single_boolean_expression@@Base>
   16fb4:	str	r0, [fp, #-16]
   16fb8:	nop			; (mov r0, r0)
   16fbc:	ldr	r3, [pc, #304]	; 170f4 <read_boolean_expression@@Base+0x32c>
   16fc0:	add	r3, pc, r3
   16fc4:	ldrd	r2, [r3, #56]	; 0x38
   16fc8:	adds	r2, r2, #1
   16fcc:	adc	r3, r3, #0
   16fd0:	ldr	r1, [pc, #288]	; 170f8 <read_boolean_expression@@Base+0x330>
   16fd4:	add	r1, pc, r1
   16fd8:	strd	r2, [r1, #56]	; 0x38
   16fdc:	b	17028 <read_boolean_expression@@Base+0x260>
   16fe0:	ldr	r3, [pc, #276]	; 170fc <read_boolean_expression@@Base+0x334>
   16fe4:	ldr	r3, [r4, r3]
   16fe8:	ldr	r3, [r3]
   16fec:	mov	r2, #33	; 0x21
   16ff0:	mov	r1, #1
   16ff4:	ldr	r0, [pc, #260]	; 17100 <read_boolean_expression@@Base+0x338>
   16ff8:	add	r0, pc, r0
   16ffc:	bl	11900 <fwrite@plt>
   17000:	ldr	r3, [pc, #252]	; 17104 <read_boolean_expression@@Base+0x33c>
   17004:	add	r3, pc, r3
   17008:	ldrd	r2, [r3, #64]	; 0x40
   1700c:	adds	r2, r2, #1
   17010:	adc	r3, r3, #0
   17014:	ldr	r1, [pc, #236]	; 17108 <read_boolean_expression@@Base+0x340>
   17018:	add	r1, pc, r1
   1701c:	strd	r2, [r1, #64]	; 0x40
   17020:	mov	r0, #1
   17024:	bl	11978 <exit@plt>
   17028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1702c:	ldr	r3, [r3]
   17030:	mov	r0, r3
   17034:	bl	130c4 <next@@Base>
   17038:	str	r0, [fp, #-20]	; 0xffffffec
   1703c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17040:	ldr	r3, [r3]
   17044:	cmp	r3, #4
   17048:	bne	16e54 <read_boolean_expression@@Base+0x8c>
   1704c:	ldr	r3, [pc, #184]	; 1710c <read_boolean_expression@@Base+0x344>
   17050:	add	r3, pc, r3
   17054:	ldrd	r2, [r3, #88]	; 0x58
   17058:	adds	r2, r2, #1
   1705c:	adc	r3, r3, #0
   17060:	ldr	r1, [pc, #168]	; 17110 <read_boolean_expression@@Base+0x348>
   17064:	add	r1, pc, r1
   17068:	strd	r2, [r1, #88]	; 0x58
   1706c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17070:	bl	129b8 <free_token_cpar@@Base>
   17074:	ldr	r0, [fp, #-16]
   17078:	ldr	r3, [pc, #148]	; 17114 <read_boolean_expression@@Base+0x34c>
   1707c:	add	r3, pc, r3
   17080:	ldrd	r2, [r3, #96]	; 0x60
   17084:	adds	r2, r2, #1
   17088:	adc	r3, r3, #0
   1708c:	ldr	r1, [pc, #132]	; 17118 <read_boolean_expression@@Base+0x350>
   17090:	add	r1, pc, r1
   17094:	strd	r2, [r1, #96]	; 0x60
   17098:	mov	r3, r0
   1709c:	mov	r0, r3
   170a0:	sub	sp, fp, #8
   170a4:	pop	{r4, fp, pc}
   170a8:	andeq	r5, r1, ip, lsl r2
   170ac:	andeq	r6, r1, r4, asr r5
   170b0:	andeq	r6, r1, r0, asr #10
   170b4:	andeq	r6, r1, r4, lsl #10
   170b8:	strdeq	r6, [r1], -r0
   170bc:	andeq	r6, r1, r0, ror #9
   170c0:	andeq	r6, r1, ip, asr #9
   170c4:	andeq	r6, r1, r0, lsr #9
   170c8:	andeq	r6, r1, ip, lsl #9
   170cc:	andeq	r6, r1, ip, ror #8
   170d0:	andeq	r6, r1, r8, asr r4
   170d4:	andeq	r6, r1, r0, lsr r4
   170d8:	andeq	r6, r1, ip, lsl r4
   170dc:	andeq	r6, r1, ip, lsl #8
   170e0:	strdeq	r6, [r1], -r8
   170e4:	ldrdeq	r6, [r1], -r8
   170e8:	andeq	r6, r1, r4, asr #7
   170ec:			; <UNDEFINED> instruction: 0x000163b4
   170f0:	andeq	r6, r1, r0, lsr #7
   170f4:	andeq	r6, r1, r8, ror r3
   170f8:	andeq	r6, r1, r4, ror #6
   170fc:	andeq	r0, r0, r4, lsr #1
   17100:	ldrdeq	r4, [r0], -r8
   17104:	andeq	r6, r1, r4, lsr r3
   17108:	andeq	r6, r1, r0, lsr #6
   1710c:	andeq	r6, r1, r8, ror #5
   17110:	ldrdeq	r6, [r1], -r4
   17114:			; <UNDEFINED> instruction: 0x000162bc
   17118:	andeq	r6, r1, r8, lsr #5

0001711c <read_single_boolean_expression@@Base>:
   1711c:	push	{fp, lr}
   17120:	add	fp, sp, #4
   17124:	sub	sp, sp, #40	; 0x28
   17128:	str	r0, [fp, #-32]	; 0xffffffe0
   1712c:	str	r1, [fp, #-36]	; 0xffffffdc
   17130:	str	r2, [fp, #-40]	; 0xffffffd8
   17134:	str	r3, [fp, #-44]	; 0xffffffd4
   17138:	ldr	r1, [pc, #456]	; 17308 <read_single_boolean_expression@@Base+0x1ec>
   1713c:	add	r1, pc, r1
   17140:	mov	r3, #0
   17144:	str	r3, [fp, #-12]
   17148:	mov	r3, #0
   1714c:	str	r3, [fp, #-8]
   17150:	mov	r3, #0
   17154:	str	r3, [fp, #-16]
   17158:	mov	r3, #0
   1715c:	str	r3, [fp, #-20]	; 0xffffffec
   17160:	mov	r3, #0
   17164:	str	r3, [fp, #-24]	; 0xffffffe8
   17168:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1716c:	cmp	r3, #0
   17170:	bne	171a4 <read_single_boolean_expression@@Base+0x88>
   17174:	ldr	r3, [pc, #400]	; 1730c <read_single_boolean_expression@@Base+0x1f0>
   17178:	add	r3, pc, r3
   1717c:	ldrd	r2, [r3]
   17180:	adds	r2, r2, #1
   17184:	adc	r3, r3, #0
   17188:	ldr	r1, [pc, #384]	; 17310 <read_single_boolean_expression@@Base+0x1f4>
   1718c:	add	r1, pc, r1
   17190:	strd	r2, [r1]
   17194:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17198:	bl	1734c <read_boolean_binary_expression@@Base>
   1719c:	str	r0, [fp, #-8]
   171a0:	b	172d4 <read_single_boolean_expression@@Base+0x1b8>
   171a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   171a8:	ldr	r3, [r3]
   171ac:	cmp	r3, #0
   171b0:	beq	17264 <read_single_boolean_expression@@Base+0x148>
   171b4:	ldr	r3, [pc, #344]	; 17314 <read_single_boolean_expression@@Base+0x1f8>
   171b8:	add	r3, pc, r3
   171bc:	ldrd	r2, [r3, #8]
   171c0:	adds	r2, r2, #1
   171c4:	adc	r3, r3, #0
   171c8:	ldr	r1, [pc, #328]	; 17318 <read_single_boolean_expression@@Base+0x1fc>
   171cc:	add	r1, pc, r1
   171d0:	strd	r2, [r1, #8]
   171d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   171d8:	bl	1734c <read_boolean_binary_expression@@Base>
   171dc:	str	r0, [fp, #-16]
   171e0:	ldr	r3, [pc, #308]	; 1731c <read_single_boolean_expression@@Base+0x200>
   171e4:	add	r3, pc, r3
   171e8:	ldrd	r2, [r3, #24]
   171ec:	adds	r2, r2, #1
   171f0:	adc	r3, r3, #0
   171f4:	ldr	r1, [pc, #292]	; 17320 <read_single_boolean_expression@@Base+0x204>
   171f8:	add	r1, pc, r1
   171fc:	strd	r2, [r1, #24]
   17200:	ldr	r3, [fp, #-8]
   17204:	str	r3, [fp, #-20]	; 0xffffffec
   17208:	ldr	r3, [fp, #-16]
   1720c:	str	r3, [fp, #-24]	; 0xffffffe8
   17210:	mov	r0, #20
   17214:	bl	11930 <malloc@plt>
   17218:	mov	r3, r0
   1721c:	str	r3, [fp, #-8]
   17220:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17224:	ldr	r2, [fp, #-20]	; 0xffffffec
   17228:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1722c:	ldr	r0, [fp, #-8]
   17230:	bl	1520c <init_node_boolean_operator@@Base>
   17234:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17238:	mov	r2, #0
   1723c:	str	r2, [r3]
   17240:	ldr	r3, [pc, #220]	; 17324 <read_single_boolean_expression@@Base+0x208>
   17244:	add	r3, pc, r3
   17248:	ldrd	r2, [r3, #32]
   1724c:	adds	r2, r2, #1
   17250:	adc	r3, r3, #0
   17254:	ldr	r1, [pc, #204]	; 17328 <read_single_boolean_expression@@Base+0x20c>
   17258:	add	r1, pc, r1
   1725c:	strd	r2, [r1, #32]
   17260:	b	172d4 <read_single_boolean_expression@@Base+0x1b8>
   17264:	ldr	r3, [pc, #192]	; 1732c <read_single_boolean_expression@@Base+0x210>
   17268:	add	r3, pc, r3
   1726c:	ldrd	r2, [r3, #16]
   17270:	adds	r2, r2, #1
   17274:	adc	r3, r3, #0
   17278:	ldr	r0, [pc, #176]	; 17330 <read_single_boolean_expression@@Base+0x214>
   1727c:	add	r0, pc, r0
   17280:	strd	r2, [r0, #16]
   17284:	ldr	r3, [pc, #168]	; 17334 <read_single_boolean_expression@@Base+0x218>
   17288:	ldr	r3, [r1, r3]
   1728c:	ldr	r0, [r3]
   17290:	ldr	r3, [fp, #-12]
   17294:	ldr	r3, [r3, #4]
   17298:	mov	r2, r3
   1729c:	ldr	r3, [pc, #148]	; 17338 <read_single_boolean_expression@@Base+0x21c>
   172a0:	add	r3, pc, r3
   172a4:	mov	r1, r3
   172a8:	bl	1199c <fprintf@plt>
   172ac:	ldr	r3, [pc, #136]	; 1733c <read_single_boolean_expression@@Base+0x220>
   172b0:	add	r3, pc, r3
   172b4:	ldrd	r2, [r3, #40]	; 0x28
   172b8:	adds	r2, r2, #1
   172bc:	adc	r3, r3, #0
   172c0:	ldr	r1, [pc, #120]	; 17340 <read_single_boolean_expression@@Base+0x224>
   172c4:	add	r1, pc, r1
   172c8:	strd	r2, [r1, #40]	; 0x28
   172cc:	mov	r0, #1
   172d0:	bl	11978 <exit@plt>
   172d4:	ldr	r0, [fp, #-8]
   172d8:	ldr	r3, [pc, #100]	; 17344 <read_single_boolean_expression@@Base+0x228>
   172dc:	add	r3, pc, r3
   172e0:	ldrd	r2, [r3, #48]	; 0x30
   172e4:	adds	r2, r2, #1
   172e8:	adc	r3, r3, #0
   172ec:	ldr	r1, [pc, #84]	; 17348 <read_single_boolean_expression@@Base+0x22c>
   172f0:	add	r1, pc, r1
   172f4:	strd	r2, [r1, #48]	; 0x30
   172f8:	mov	r3, r0
   172fc:	mov	r0, r3
   17300:	sub	sp, fp, #4
   17304:	pop	{fp, pc}
   17308:			; <UNDEFINED> instruction: 0x00014ebc
   1730c:	andeq	r6, r1, r8, lsl #3
   17310:	andeq	r6, r1, r4, ror r1
   17314:	andeq	r6, r1, r8, asr #2
   17318:	andeq	r6, r1, r4, lsr r1
   1731c:	andeq	r6, r1, ip, lsl r1
   17320:	andeq	r6, r1, r8, lsl #2
   17324:	strheq	r6, [r1], -ip
   17328:	andeq	r6, r1, r8, lsr #1
   1732c:	muleq	r1, r8, r0
   17330:	andeq	r6, r1, r4, lsl #1
   17334:	andeq	r0, r0, r4, lsr #1
   17338:	andeq	r4, r0, r4, asr r2
   1733c:	andeq	r6, r1, r0, asr r0
   17340:	andeq	r6, r1, ip, lsr r0
   17344:	andeq	r6, r1, r4, lsr #32
   17348:	andeq	r6, r1, r0, lsl r0

0001734c <read_boolean_binary_expression@@Base>:
   1734c:	push	{fp, lr}
   17350:	add	fp, sp, #4
   17354:	sub	sp, sp, #40	; 0x28
   17358:	str	r0, [fp, #-40]	; 0xffffffd8
   1735c:	ldr	r3, [pc, #1056]	; 17784 <read_boolean_binary_expression@@Base+0x438>
   17360:	add	r3, pc, r3
   17364:	ldrd	r2, [r3]
   17368:	adds	r2, r2, #1
   1736c:	adc	r3, r3, #0
   17370:	ldr	r1, [pc, #1040]	; 17788 <read_boolean_binary_expression@@Base+0x43c>
   17374:	add	r1, pc, r1
   17378:	strd	r2, [r1]
   1737c:	mov	r3, #0
   17380:	str	r3, [fp, #-8]
   17384:	mov	r3, #0
   17388:	str	r3, [fp, #-12]
   1738c:	mov	r3, #0
   17390:	str	r3, [fp, #-16]
   17394:	mov	r3, #0
   17398:	str	r3, [fp, #-20]	; 0xffffffec
   1739c:	mov	r3, #0
   173a0:	str	r3, [fp, #-24]	; 0xffffffe8
   173a4:	mov	r3, #0
   173a8:	str	r3, [fp, #-28]	; 0xffffffe4
   173ac:	mov	r3, #0
   173b0:	str	r3, [fp, #-32]	; 0xffffffe0
   173b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   173b8:	ldr	r3, [r3]
   173bc:	mov	r0, r3
   173c0:	bl	130c4 <next@@Base>
   173c4:	str	r0, [fp, #-24]	; 0xffffffe8
   173c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173cc:	ldr	r3, [r3]
   173d0:	cmp	r3, #1
   173d4:	beq	17494 <read_boolean_binary_expression@@Base+0x148>
   173d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173dc:	ldr	r3, [r3]
   173e0:	cmp	r3, #12
   173e4:	bne	1746c <read_boolean_binary_expression@@Base+0x120>
   173e8:	ldr	r3, [pc, #924]	; 1778c <read_boolean_binary_expression@@Base+0x440>
   173ec:	add	r3, pc, r3
   173f0:	ldrd	r2, [r3, #16]
   173f4:	adds	r2, r2, #1
   173f8:	adc	r3, r3, #0
   173fc:	ldr	r1, [pc, #908]	; 17790 <read_boolean_binary_expression@@Base+0x444>
   17400:	add	r1, pc, r1
   17404:	strd	r2, [r1, #16]
   17408:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1740c:	ldr	r3, [r3]
   17410:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17414:	mov	r0, r3
   17418:	bl	12e58 <push_back@@Base>
   1741c:	ldr	r3, [pc, #880]	; 17794 <read_boolean_binary_expression@@Base+0x448>
   17420:	add	r3, pc, r3
   17424:	ldrd	r2, [r3, #24]
   17428:	adds	r2, r2, #1
   1742c:	adc	r3, r3, #0
   17430:	ldr	r1, [pc, #864]	; 17798 <read_boolean_binary_expression@@Base+0x44c>
   17434:	add	r1, pc, r1
   17438:	strd	r2, [r1, #24]
   1743c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17440:	bl	1781c <read_boolean_unary_expression@@Base>
   17444:	mov	r3, r0
   17448:	ldr	r2, [pc, #844]	; 1779c <read_boolean_binary_expression@@Base+0x450>
   1744c:	add	r2, pc, r2
   17450:	ldrd	r0, [r2, #32]
   17454:	adds	r0, r0, #1
   17458:	adc	r1, r1, #0
   1745c:	ldr	r2, [pc, #828]	; 177a0 <read_boolean_binary_expression@@Base+0x454>
   17460:	add	r2, pc, r2
   17464:	strd	r0, [r2, #32]
   17468:	b	17778 <read_boolean_binary_expression@@Base+0x42c>
   1746c:	mov	r3, #0
   17470:	ldr	r2, [pc, #812]	; 177a4 <read_boolean_binary_expression@@Base+0x458>
   17474:	add	r2, pc, r2
   17478:	ldrd	r0, [r2, #40]	; 0x28
   1747c:	adds	r0, r0, #1
   17480:	adc	r1, r1, #0
   17484:	ldr	r2, [pc, #796]	; 177a8 <read_boolean_binary_expression@@Base+0x45c>
   17488:	add	r2, pc, r2
   1748c:	strd	r0, [r2, #40]	; 0x28
   17490:	b	17778 <read_boolean_binary_expression@@Base+0x42c>
   17494:	ldr	r3, [pc, #784]	; 177ac <read_boolean_binary_expression@@Base+0x460>
   17498:	add	r3, pc, r3
   1749c:	ldrd	r2, [r3, #8]
   174a0:	adds	r2, r2, #1
   174a4:	adc	r3, r3, #0
   174a8:	ldr	r1, [pc, #768]	; 177b0 <read_boolean_binary_expression@@Base+0x464>
   174ac:	add	r1, pc, r1
   174b0:	strd	r2, [r1, #8]
   174b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174b8:	str	r3, [fp, #-28]	; 0xffffffe4
   174bc:	mov	r0, #12
   174c0:	bl	11930 <malloc@plt>
   174c4:	mov	r3, r0
   174c8:	str	r3, [fp, #-12]
   174cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174d0:	ldr	r3, [r3, #4]
   174d4:	mov	r1, r3
   174d8:	ldr	r0, [fp, #-12]
   174dc:	bl	14fac <init_node_int@@Base>
   174e0:	ldr	r3, [pc, #716]	; 177b4 <read_boolean_binary_expression@@Base+0x468>
   174e4:	add	r3, pc, r3
   174e8:	ldrd	r2, [r3, #48]	; 0x30
   174ec:	adds	r2, r2, #1
   174f0:	adc	r3, r3, #0
   174f4:	ldr	r1, [pc, #700]	; 177b8 <read_boolean_binary_expression@@Base+0x46c>
   174f8:	add	r1, pc, r1
   174fc:	strd	r2, [r1, #48]	; 0x30
   17500:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17504:	bl	128d4 <free_token_int_value@@Base>
   17508:	ldr	r3, [pc, #684]	; 177bc <read_boolean_binary_expression@@Base+0x470>
   1750c:	add	r3, pc, r3
   17510:	ldrd	r2, [r3, #56]	; 0x38
   17514:	adds	r2, r2, #1
   17518:	adc	r3, r3, #0
   1751c:	ldr	r1, [pc, #668]	; 177c0 <read_boolean_binary_expression@@Base+0x474>
   17520:	add	r1, pc, r1
   17524:	strd	r2, [r1, #56]	; 0x38
   17528:	ldr	r3, [fp, #-12]
   1752c:	str	r3, [fp, #-16]
   17530:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17534:	ldr	r3, [r3]
   17538:	mov	r0, r3
   1753c:	bl	130c4 <next@@Base>
   17540:	str	r0, [fp, #-24]	; 0xffffffe8
   17544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17548:	ldr	r3, [r3]
   1754c:	cmp	r3, #12
   17550:	beq	175a4 <read_boolean_binary_expression@@Base+0x258>
   17554:	ldr	r3, [pc, #616]	; 177c4 <read_boolean_binary_expression@@Base+0x478>
   17558:	add	r3, pc, r3
   1755c:	ldrd	r2, [r3, #64]	; 0x40
   17560:	adds	r2, r2, #1
   17564:	adc	r3, r3, #0
   17568:	ldr	r1, [pc, #600]	; 177c8 <read_boolean_binary_expression@@Base+0x47c>
   1756c:	add	r1, pc, r1
   17570:	strd	r2, [r1, #64]	; 0x40
   17574:	ldr	r0, [fp, #-16]
   17578:	bl	152c4 <free_node@@Base>
   1757c:	mov	r3, #0
   17580:	ldr	r2, [pc, #580]	; 177cc <read_boolean_binary_expression@@Base+0x480>
   17584:	add	r2, pc, r2
   17588:	ldrd	r0, [r2, #80]	; 0x50
   1758c:	adds	r0, r0, #1
   17590:	adc	r1, r1, #0
   17594:	ldr	r2, [pc, #564]	; 177d0 <read_boolean_binary_expression@@Base+0x484>
   17598:	add	r2, pc, r2
   1759c:	strd	r0, [r2, #80]	; 0x50
   175a0:	b	17778 <read_boolean_binary_expression@@Base+0x42c>
   175a4:	ldr	r3, [pc, #552]	; 177d4 <read_boolean_binary_expression@@Base+0x488>
   175a8:	add	r3, pc, r3
   175ac:	ldrd	r2, [r3, #72]	; 0x48
   175b0:	adds	r2, r2, #1
   175b4:	adc	r3, r3, #0
   175b8:	ldr	r1, [pc, #536]	; 177d8 <read_boolean_binary_expression@@Base+0x48c>
   175bc:	add	r1, pc, r1
   175c0:	strd	r2, [r1, #72]	; 0x48
   175c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c8:	str	r3, [fp, #-32]	; 0xffffffe0
   175cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   175d0:	bl	15b68 <get_boolean_op_value@@Base>
   175d4:	str	r0, [fp, #-36]	; 0xffffffdc
   175d8:	ldr	r3, [pc, #508]	; 177dc <read_boolean_binary_expression@@Base+0x490>
   175dc:	add	r3, pc, r3
   175e0:	ldrd	r2, [r3, #88]	; 0x58
   175e4:	adds	r2, r2, #1
   175e8:	adc	r3, r3, #0
   175ec:	ldr	r1, [pc, #492]	; 177e0 <read_boolean_binary_expression@@Base+0x494>
   175f0:	add	r1, pc, r1
   175f4:	strd	r2, [r1, #88]	; 0x58
   175f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   175fc:	bl	12c18 <free_token_boolean_op@@Base>
   17600:	ldr	r3, [pc, #476]	; 177e4 <read_boolean_binary_expression@@Base+0x498>
   17604:	add	r3, pc, r3
   17608:	ldrd	r2, [r3, #96]	; 0x60
   1760c:	adds	r2, r2, #1
   17610:	adc	r3, r3, #0
   17614:	ldr	r1, [pc, #460]	; 177e8 <read_boolean_binary_expression@@Base+0x49c>
   17618:	add	r1, pc, r1
   1761c:	strd	r2, [r1, #96]	; 0x60
   17620:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17624:	ldr	r3, [r3]
   17628:	mov	r0, r3
   1762c:	bl	130c4 <next@@Base>
   17630:	str	r0, [fp, #-24]	; 0xffffffe8
   17634:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17638:	ldr	r3, [r3]
   1763c:	cmp	r3, #1
   17640:	beq	17694 <read_boolean_binary_expression@@Base+0x348>
   17644:	ldr	r3, [pc, #416]	; 177ec <read_boolean_binary_expression@@Base+0x4a0>
   17648:	add	r3, pc, r3
   1764c:	ldrd	r2, [r3, #104]	; 0x68
   17650:	adds	r2, r2, #1
   17654:	adc	r3, r3, #0
   17658:	ldr	r1, [pc, #400]	; 177f0 <read_boolean_binary_expression@@Base+0x4a4>
   1765c:	add	r1, pc, r1
   17660:	strd	r2, [r1, #104]	; 0x68
   17664:	ldr	r0, [fp, #-16]
   17668:	bl	152c4 <free_node@@Base>
   1766c:	mov	r3, #0
   17670:	ldr	r2, [pc, #380]	; 177f4 <read_boolean_binary_expression@@Base+0x4a8>
   17674:	add	r2, pc, r2
   17678:	ldrd	r0, [r2, #120]	; 0x78
   1767c:	adds	r0, r0, #1
   17680:	adc	r1, r1, #0
   17684:	ldr	r2, [pc, #364]	; 177f8 <read_boolean_binary_expression@@Base+0x4ac>
   17688:	add	r2, pc, r2
   1768c:	strd	r0, [r2, #120]	; 0x78
   17690:	b	17778 <read_boolean_binary_expression@@Base+0x42c>
   17694:	ldr	r3, [pc, #352]	; 177fc <read_boolean_binary_expression@@Base+0x4b0>
   17698:	add	r3, pc, r3
   1769c:	ldrd	r2, [r3, #112]	; 0x70
   176a0:	adds	r2, r2, #1
   176a4:	adc	r3, r3, #0
   176a8:	ldr	r1, [pc, #336]	; 17800 <read_boolean_binary_expression@@Base+0x4b4>
   176ac:	add	r1, pc, r1
   176b0:	strd	r2, [r1, #112]	; 0x70
   176b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176b8:	str	r3, [fp, #-28]	; 0xffffffe4
   176bc:	mov	r0, #12
   176c0:	bl	11930 <malloc@plt>
   176c4:	mov	r3, r0
   176c8:	str	r3, [fp, #-12]
   176cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176d0:	ldr	r3, [r3, #4]
   176d4:	mov	r1, r3
   176d8:	ldr	r0, [fp, #-12]
   176dc:	bl	14fac <init_node_int@@Base>
   176e0:	ldr	r3, [pc, #284]	; 17804 <read_boolean_binary_expression@@Base+0x4b8>
   176e4:	add	r3, pc, r3
   176e8:	ldrd	r2, [r3, #128]	; 0x80
   176ec:	adds	r2, r2, #1
   176f0:	adc	r3, r3, #0
   176f4:	ldr	r1, [pc, #268]	; 17808 <read_boolean_binary_expression@@Base+0x4bc>
   176f8:	add	r1, pc, r1
   176fc:	strd	r2, [r1, #128]	; 0x80
   17700:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17704:	bl	128d4 <free_token_int_value@@Base>
   17708:	ldr	r3, [pc, #252]	; 1780c <read_boolean_binary_expression@@Base+0x4c0>
   1770c:	add	r3, pc, r3
   17710:	ldrd	r2, [r3, #136]	; 0x88
   17714:	adds	r2, r2, #1
   17718:	adc	r3, r3, #0
   1771c:	ldr	r1, [pc, #236]	; 17810 <read_boolean_binary_expression@@Base+0x4c4>
   17720:	add	r1, pc, r1
   17724:	strd	r2, [r1, #136]	; 0x88
   17728:	ldr	r3, [fp, #-12]
   1772c:	str	r3, [fp, #-20]	; 0xffffffec
   17730:	mov	r0, #20
   17734:	bl	11930 <malloc@plt>
   17738:	mov	r3, r0
   1773c:	str	r3, [fp, #-8]
   17740:	ldr	r3, [fp, #-20]	; 0xffffffec
   17744:	ldr	r2, [fp, #-16]
   17748:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1774c:	ldr	r0, [fp, #-8]
   17750:	bl	1520c <init_node_boolean_operator@@Base>
   17754:	ldr	r3, [fp, #-8]
   17758:	ldr	r2, [pc, #180]	; 17814 <read_boolean_binary_expression@@Base+0x4c8>
   1775c:	add	r2, pc, r2
   17760:	ldrd	r0, [r2, #144]	; 0x90
   17764:	adds	r0, r0, #1
   17768:	adc	r1, r1, #0
   1776c:	ldr	r2, [pc, #164]	; 17818 <read_boolean_binary_expression@@Base+0x4cc>
   17770:	add	r2, pc, r2
   17774:	strd	r0, [r2, #144]	; 0x90
   17778:	mov	r0, r3
   1777c:	sub	sp, fp, #4
   17780:	pop	{fp, pc}
   17784:	andeq	r5, r1, r8, lsl #30
   17788:	strdeq	r5, [r1], -r4
   1778c:	andeq	r5, r1, ip, ror lr
   17790:	andeq	r5, r1, r8, ror #28
   17794:	andeq	r5, r1, r8, asr #28
   17798:	andeq	r5, r1, r4, lsr lr
   1779c:	andeq	r5, r1, ip, lsl lr
   177a0:	andeq	r5, r1, r8, lsl #28
   177a4:	strdeq	r5, [r1], -r4
   177a8:	andeq	r5, r1, r0, ror #27
   177ac:	ldrdeq	r5, [r1], -r0
   177b0:			; <UNDEFINED> instruction: 0x00015dbc
   177b4:	andeq	r5, r1, r4, lsl #27
   177b8:	andeq	r5, r1, r0, ror sp
   177bc:	andeq	r5, r1, ip, asr sp
   177c0:	andeq	r5, r1, r8, asr #26
   177c4:	andeq	r5, r1, r0, lsl sp
   177c8:	strdeq	r5, [r1], -ip
   177cc:	andeq	r5, r1, r4, ror #25
   177d0:	ldrdeq	r5, [r1], -r0
   177d4:	andeq	r5, r1, r0, asr #25
   177d8:	andeq	r5, r1, ip, lsr #25
   177dc:	andeq	r5, r1, ip, lsl #25
   177e0:	andeq	r5, r1, r8, ror ip
   177e4:	andeq	r5, r1, r4, ror #24
   177e8:	andeq	r5, r1, r0, asr ip
   177ec:	andeq	r5, r1, r0, lsr #24
   177f0:	andeq	r5, r1, ip, lsl #24
   177f4:	strdeq	r5, [r1], -r4
   177f8:	andeq	r5, r1, r0, ror #23
   177fc:	ldrdeq	r5, [r1], -r0
   17800:			; <UNDEFINED> instruction: 0x00015bbc
   17804:	andeq	r5, r1, r4, lsl #23
   17808:	andeq	r5, r1, r0, ror fp
   1780c:	andeq	r5, r1, ip, asr fp
   17810:	andeq	r5, r1, r8, asr #22
   17814:	andeq	r5, r1, ip, lsl #22
   17818:	strdeq	r5, [r1], -r8

0001781c <read_boolean_unary_expression@@Base>:
   1781c:	push	{fp, lr}
   17820:	add	fp, sp, #4
   17824:	sub	sp, sp, #32
   17828:	str	r0, [fp, #-32]	; 0xffffffe0
   1782c:	ldr	r3, [pc, #656]	; 17ac4 <read_boolean_unary_expression@@Base+0x2a8>
   17830:	add	r3, pc, r3
   17834:	ldrd	r2, [r3]
   17838:	adds	r2, r2, #1
   1783c:	adc	r3, r3, #0
   17840:	ldr	r1, [pc, #640]	; 17ac8 <read_boolean_unary_expression@@Base+0x2ac>
   17844:	add	r1, pc, r1
   17848:	strd	r2, [r1]
   1784c:	mov	r3, #0
   17850:	str	r3, [fp, #-8]
   17854:	mov	r3, #0
   17858:	str	r3, [fp, #-12]
   1785c:	mov	r3, #0
   17860:	str	r3, [fp, #-16]
   17864:	mov	r3, #0
   17868:	str	r3, [fp, #-20]	; 0xffffffec
   1786c:	mov	r3, #0
   17870:	str	r3, [fp, #-24]	; 0xffffffe8
   17874:	mov	r0, #20
   17878:	bl	11930 <malloc@plt>
   1787c:	mov	r3, r0
   17880:	str	r3, [fp, #-8]
   17884:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17888:	ldr	r3, [r3]
   1788c:	mov	r0, r3
   17890:	bl	130c4 <next@@Base>
   17894:	str	r0, [fp, #-20]	; 0xffffffec
   17898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1789c:	ldr	r3, [r3]
   178a0:	cmp	r3, #12
   178a4:	beq	178f8 <read_boolean_unary_expression@@Base+0xdc>
   178a8:	ldr	r3, [pc, #540]	; 17acc <read_boolean_unary_expression@@Base+0x2b0>
   178ac:	add	r3, pc, r3
   178b0:	ldrd	r2, [r3, #8]
   178b4:	adds	r2, r2, #1
   178b8:	adc	r3, r3, #0
   178bc:	ldr	r1, [pc, #524]	; 17ad0 <read_boolean_unary_expression@@Base+0x2b4>
   178c0:	add	r1, pc, r1
   178c4:	strd	r2, [r1, #8]
   178c8:	ldr	r0, [fp, #-8]
   178cc:	bl	15a3c <free_node_boolean_operator@@Base>
   178d0:	mov	r1, #0
   178d4:	ldr	r3, [pc, #504]	; 17ad4 <read_boolean_unary_expression@@Base+0x2b8>
   178d8:	add	r3, pc, r3
   178dc:	ldrd	r2, [r3, #24]
   178e0:	adds	r2, r2, #1
   178e4:	adc	r3, r3, #0
   178e8:	ldr	r0, [pc, #488]	; 17ad8 <read_boolean_unary_expression@@Base+0x2bc>
   178ec:	add	r0, pc, r0
   178f0:	strd	r2, [r0, #24]
   178f4:	b	17ab4 <read_boolean_unary_expression@@Base+0x298>
   178f8:	ldr	r3, [pc, #476]	; 17adc <read_boolean_unary_expression@@Base+0x2c0>
   178fc:	add	r3, pc, r3
   17900:	ldrd	r2, [r3, #16]
   17904:	adds	r2, r2, #1
   17908:	adc	r3, r3, #0
   1790c:	ldr	r1, [pc, #460]	; 17ae0 <read_boolean_unary_expression@@Base+0x2c4>
   17910:	add	r1, pc, r1
   17914:	strd	r2, [r1, #16]
   17918:	ldr	r0, [fp, #-20]	; 0xffffffec
   1791c:	bl	15b68 <get_boolean_op_value@@Base>
   17920:	str	r0, [fp, #-28]	; 0xffffffe4
   17924:	ldr	r3, [pc, #440]	; 17ae4 <read_boolean_unary_expression@@Base+0x2c8>
   17928:	add	r3, pc, r3
   1792c:	ldrd	r2, [r3, #32]
   17930:	adds	r2, r2, #1
   17934:	adc	r3, r3, #0
   17938:	ldr	r1, [pc, #424]	; 17ae8 <read_boolean_unary_expression@@Base+0x2cc>
   1793c:	add	r1, pc, r1
   17940:	strd	r2, [r1, #32]
   17944:	ldr	r0, [fp, #-20]	; 0xffffffec
   17948:	bl	12c18 <free_token_boolean_op@@Base>
   1794c:	ldr	r3, [pc, #408]	; 17aec <read_boolean_unary_expression@@Base+0x2d0>
   17950:	add	r3, pc, r3
   17954:	ldrd	r2, [r3, #40]	; 0x28
   17958:	adds	r2, r2, #1
   1795c:	adc	r3, r3, #0
   17960:	ldr	r1, [pc, #392]	; 17af0 <read_boolean_unary_expression@@Base+0x2d4>
   17964:	add	r1, pc, r1
   17968:	strd	r2, [r1, #40]	; 0x28
   1796c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17970:	ldr	r3, [r3]
   17974:	mov	r0, r3
   17978:	bl	130c4 <next@@Base>
   1797c:	str	r0, [fp, #-20]	; 0xffffffec
   17980:	ldr	r3, [fp, #-20]	; 0xffffffec
   17984:	ldr	r3, [r3]
   17988:	cmp	r3, #1
   1798c:	beq	179e0 <read_boolean_unary_expression@@Base+0x1c4>
   17990:	ldr	r3, [pc, #348]	; 17af4 <read_boolean_unary_expression@@Base+0x2d8>
   17994:	add	r3, pc, r3
   17998:	ldrd	r2, [r3, #48]	; 0x30
   1799c:	adds	r2, r2, #1
   179a0:	adc	r3, r3, #0
   179a4:	ldr	r1, [pc, #332]	; 17af8 <read_boolean_unary_expression@@Base+0x2dc>
   179a8:	add	r1, pc, r1
   179ac:	strd	r2, [r1, #48]	; 0x30
   179b0:	ldr	r0, [fp, #-8]
   179b4:	bl	15a3c <free_node_boolean_operator@@Base>
   179b8:	mov	r1, #0
   179bc:	ldr	r3, [pc, #312]	; 17afc <read_boolean_unary_expression@@Base+0x2e0>
   179c0:	add	r3, pc, r3
   179c4:	ldrd	r2, [r3, #64]	; 0x40
   179c8:	adds	r2, r2, #1
   179cc:	adc	r3, r3, #0
   179d0:	ldr	r0, [pc, #296]	; 17b00 <read_boolean_unary_expression@@Base+0x2e4>
   179d4:	add	r0, pc, r0
   179d8:	strd	r2, [r0, #64]	; 0x40
   179dc:	b	17ab4 <read_boolean_unary_expression@@Base+0x298>
   179e0:	ldr	r3, [pc, #284]	; 17b04 <read_boolean_unary_expression@@Base+0x2e8>
   179e4:	add	r3, pc, r3
   179e8:	ldrd	r2, [r3, #56]	; 0x38
   179ec:	adds	r2, r2, #1
   179f0:	adc	r3, r3, #0
   179f4:	ldr	r1, [pc, #268]	; 17b08 <read_boolean_unary_expression@@Base+0x2ec>
   179f8:	add	r1, pc, r1
   179fc:	strd	r2, [r1, #56]	; 0x38
   17a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a04:	str	r3, [fp, #-24]	; 0xffffffe8
   17a08:	mov	r0, #12
   17a0c:	bl	11930 <malloc@plt>
   17a10:	mov	r3, r0
   17a14:	str	r3, [fp, #-12]
   17a18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a1c:	ldr	r3, [r3, #4]
   17a20:	mov	r1, r3
   17a24:	ldr	r0, [fp, #-12]
   17a28:	bl	14fac <init_node_int@@Base>
   17a2c:	ldr	r3, [pc, #216]	; 17b0c <read_boolean_unary_expression@@Base+0x2f0>
   17a30:	add	r3, pc, r3
   17a34:	ldrd	r2, [r3, #72]	; 0x48
   17a38:	adds	r2, r2, #1
   17a3c:	adc	r3, r3, #0
   17a40:	ldr	r1, [pc, #200]	; 17b10 <read_boolean_unary_expression@@Base+0x2f4>
   17a44:	add	r1, pc, r1
   17a48:	strd	r2, [r1, #72]	; 0x48
   17a4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a50:	bl	128d4 <free_token_int_value@@Base>
   17a54:	ldr	r3, [pc, #184]	; 17b14 <read_boolean_unary_expression@@Base+0x2f8>
   17a58:	add	r3, pc, r3
   17a5c:	ldrd	r2, [r3, #80]	; 0x50
   17a60:	adds	r2, r2, #1
   17a64:	adc	r3, r3, #0
   17a68:	ldr	r1, [pc, #168]	; 17b18 <read_boolean_unary_expression@@Base+0x2fc>
   17a6c:	add	r1, pc, r1
   17a70:	strd	r2, [r1, #80]	; 0x50
   17a74:	ldr	r3, [fp, #-12]
   17a78:	str	r3, [fp, #-16]
   17a7c:	mov	r3, #0
   17a80:	ldr	r2, [fp, #-16]
   17a84:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17a88:	ldr	r0, [fp, #-8]
   17a8c:	bl	1520c <init_node_boolean_operator@@Base>
   17a90:	ldr	r1, [fp, #-8]
   17a94:	ldr	r3, [pc, #128]	; 17b1c <read_boolean_unary_expression@@Base+0x300>
   17a98:	add	r3, pc, r3
   17a9c:	ldrd	r2, [r3, #88]	; 0x58
   17aa0:	adds	r2, r2, #1
   17aa4:	adc	r3, r3, #0
   17aa8:	ldr	r0, [pc, #112]	; 17b20 <read_boolean_unary_expression@@Base+0x304>
   17aac:	add	r0, pc, r0
   17ab0:	strd	r2, [r0, #88]	; 0x58
   17ab4:	mov	r3, r1
   17ab8:	mov	r0, r3
   17abc:	sub	sp, fp, #4
   17ac0:	pop	{fp, pc}
   17ac4:	ldrdeq	r5, [r1], -r8
   17ac8:	andeq	r5, r1, r4, asr #19
   17acc:	andeq	r5, r1, ip, asr r9
   17ad0:	andeq	r5, r1, r8, asr #18
   17ad4:	andeq	r5, r1, r0, lsr r9
   17ad8:	andeq	r5, r1, ip, lsl r9
   17adc:	andeq	r5, r1, ip, lsl #18
   17ae0:	strdeq	r5, [r1], -r8
   17ae4:	andeq	r5, r1, r0, ror #17
   17ae8:	andeq	r5, r1, ip, asr #17
   17aec:			; <UNDEFINED> instruction: 0x000158b8
   17af0:	andeq	r5, r1, r4, lsr #17
   17af4:	andeq	r5, r1, r4, ror r8
   17af8:	andeq	r5, r1, r0, ror #16
   17afc:	andeq	r5, r1, r8, asr #16
   17b00:	andeq	r5, r1, r4, lsr r8
   17b04:	andeq	r5, r1, r4, lsr #16
   17b08:	andeq	r5, r1, r0, lsl r8
   17b0c:	ldrdeq	r5, [r1], -r8
   17b10:	andeq	r5, r1, r4, asr #15
   17b14:			; <UNDEFINED> instruction: 0x000157b0
   17b18:	muleq	r1, ip, r7
   17b1c:	andeq	r5, r1, r0, ror r7
   17b20:	andeq	r5, r1, ip, asr r7
   17b24:	push	{fp, lr}
   17b28:	add	fp, sp, #4
   17b2c:	ldr	r3, [pc, #12]	; 17b40 <read_boolean_unary_expression@@Base+0x324>
   17b30:	add	r3, pc, r3
   17b34:	mov	r0, r3
   17b38:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   17b3c:	pop	{fp, pc}
   17b40:	andeq	r4, r1, r8, lsl #27

00017b44 <init_generator@@Base>:
   17b44:	push	{fp, lr}
   17b48:	add	fp, sp, #4
   17b4c:	sub	sp, sp, #16
   17b50:	str	r0, [fp, #-8]
   17b54:	str	r1, [fp, #-12]
   17b58:	str	r2, [fp, #-16]
   17b5c:	ldr	r3, [pc, #124]	; 17be0 <init_generator@@Base+0x9c>
   17b60:	add	r3, pc, r3
   17b64:	ldrd	r2, [r3]
   17b68:	adds	r2, r2, #1
   17b6c:	adc	r3, r3, #0
   17b70:	ldr	r1, [pc, #108]	; 17be4 <init_generator@@Base+0xa0>
   17b74:	add	r1, pc, r1
   17b78:	strd	r2, [r1]
   17b7c:	ldr	r3, [fp, #-8]
   17b80:	ldr	r2, [fp, #-12]
   17b84:	str	r2, [r3]
   17b88:	ldr	r3, [pc, #88]	; 17be8 <init_generator@@Base+0xa4>
   17b8c:	add	r3, pc, r3
   17b90:	mov	r1, r3
   17b94:	ldr	r0, [fp, #-16]
   17b98:	bl	118d0 <fopen@plt>
   17b9c:	ldr	r3, [pc, #72]	; 17bec <init_generator@@Base+0xa8>
   17ba0:	add	r3, pc, r3
   17ba4:	ldrd	r2, [r3, #8]
   17ba8:	adds	r2, r2, #1
   17bac:	adc	r3, r3, #0
   17bb0:	ldr	r1, [pc, #56]	; 17bf0 <init_generator@@Base+0xac>
   17bb4:	add	r1, pc, r1
   17bb8:	strd	r2, [r1, #8]
   17bbc:	ldr	r3, [fp, #-8]
   17bc0:	str	r0, [r3, #4]
   17bc4:	ldr	r1, [fp, #-8]
   17bc8:	mov	r2, #0
   17bcc:	mov	r3, #0
   17bd0:	strd	r2, [r1, #8]
   17bd4:	nop			; (mov r0, r0)
   17bd8:	sub	sp, fp, #4
   17bdc:	pop	{fp, pc}
   17be0:	andeq	r5, r1, r8, lsr ip
   17be4:	andeq	r5, r1, r4, lsr #24
   17be8:	andeq	r3, r0, ip, lsl #20
   17bec:	strdeq	r5, [r1], -r8
   17bf0:	andeq	r5, r1, r4, ror #23

00017bf4 <destroy_generator@@Base>:
   17bf4:	push	{fp, lr}
   17bf8:	add	fp, sp, #4
   17bfc:	sub	sp, sp, #8
   17c00:	str	r0, [fp, #-8]
   17c04:	ldr	r3, [pc, #84]	; 17c60 <destroy_generator@@Base+0x6c>
   17c08:	add	r3, pc, r3
   17c0c:	ldrd	r2, [r3]
   17c10:	adds	r2, r2, #1
   17c14:	adc	r3, r3, #0
   17c18:	ldr	r1, [pc, #68]	; 17c64 <destroy_generator@@Base+0x70>
   17c1c:	add	r1, pc, r1
   17c20:	strd	r2, [r1]
   17c24:	ldr	r3, [fp, #-8]
   17c28:	ldr	r3, [r3, #4]
   17c2c:	mov	r0, r3
   17c30:	bl	119fc <fclose@plt>
   17c34:	ldr	r3, [pc, #44]	; 17c68 <destroy_generator@@Base+0x74>
   17c38:	add	r3, pc, r3
   17c3c:	ldrd	r2, [r3, #8]
   17c40:	adds	r2, r2, #1
   17c44:	adc	r3, r3, #0
   17c48:	ldr	r1, [pc, #28]	; 17c6c <destroy_generator@@Base+0x78>
   17c4c:	add	r1, pc, r1
   17c50:	strd	r2, [r1, #8]
   17c54:	nop			; (mov r0, r0)
   17c58:	sub	sp, fp, #4
   17c5c:	pop	{fp, pc}
   17c60:	andeq	r5, r1, r0, lsl #23
   17c64:	andeq	r5, r1, ip, ror #22
   17c68:	andeq	r5, r1, r0, asr fp
   17c6c:	andeq	r5, r1, ip, lsr fp

00017c70 <generate_code@@Base>:
   17c70:	push	{fp, lr}
   17c74:	add	fp, sp, #4
   17c78:	sub	sp, sp, #16
   17c7c:	str	r0, [fp, #-16]
   17c80:	ldr	r3, [pc, #180]	; 17d3c <generate_code@@Base+0xcc>
   17c84:	add	r3, pc, r3
   17c88:	ldrd	r2, [r3]
   17c8c:	adds	r2, r2, #1
   17c90:	adc	r3, r3, #0
   17c94:	ldr	r1, [pc, #164]	; 17d40 <generate_code@@Base+0xd0>
   17c98:	add	r1, pc, r1
   17c9c:	strd	r2, [r1]
   17ca0:	mov	r3, #0
   17ca4:	str	r3, [fp, #-8]
   17ca8:	ldr	r3, [fp, #-16]
   17cac:	ldr	r3, [r3]
   17cb0:	mov	r0, r3
   17cb4:	bl	16084 <build_ast@@Base>
   17cb8:	str	r0, [fp, #-8]
   17cbc:	ldr	r3, [pc, #128]	; 17d44 <generate_code@@Base+0xd4>
   17cc0:	add	r3, pc, r3
   17cc4:	ldrd	r2, [r3, #8]
   17cc8:	adds	r2, r2, #1
   17ccc:	adc	r3, r3, #0
   17cd0:	ldr	r1, [pc, #112]	; 17d48 <generate_code@@Base+0xd8>
   17cd4:	add	r1, pc, r1
   17cd8:	strd	r2, [r1, #8]
   17cdc:	ldr	r1, [fp, #-8]
   17ce0:	ldr	r0, [fp, #-16]
   17ce4:	bl	17d5c <__generate_code@@Base>
   17ce8:	ldr	r3, [pc, #92]	; 17d4c <generate_code@@Base+0xdc>
   17cec:	add	r3, pc, r3
   17cf0:	ldrd	r2, [r3, #16]
   17cf4:	adds	r2, r2, #1
   17cf8:	adc	r3, r3, #0
   17cfc:	ldr	r1, [pc, #76]	; 17d50 <generate_code@@Base+0xe0>
   17d00:	add	r1, pc, r1
   17d04:	strd	r2, [r1, #16]
   17d08:	ldr	r0, [fp, #-8]
   17d0c:	bl	152c4 <free_node@@Base>
   17d10:	ldr	r3, [pc, #60]	; 17d54 <generate_code@@Base+0xe4>
   17d14:	add	r3, pc, r3
   17d18:	ldrd	r2, [r3, #24]
   17d1c:	adds	r2, r2, #1
   17d20:	adc	r3, r3, #0
   17d24:	ldr	r1, [pc, #44]	; 17d58 <generate_code@@Base+0xe8>
   17d28:	add	r1, pc, r1
   17d2c:	strd	r2, [r1, #24]
   17d30:	nop			; (mov r0, r0)
   17d34:	sub	sp, fp, #4
   17d38:	pop	{fp, pc}
   17d3c:	andeq	r5, r1, r4, ror #21
   17d40:	ldrdeq	r5, [r1], -r0
   17d44:	andeq	r5, r1, r8, lsr #21
   17d48:	muleq	r1, r4, sl
   17d4c:	andeq	r5, r1, ip, ror sl
   17d50:	andeq	r5, r1, r8, ror #20
   17d54:	andeq	r5, r1, r4, asr sl
   17d58:	andeq	r5, r1, r0, asr #20

00017d5c <__generate_code@@Base>:
   17d5c:	push	{fp, lr}
   17d60:	add	fp, sp, #4
   17d64:	sub	sp, sp, #8
   17d68:	str	r0, [fp, #-8]
   17d6c:	str	r1, [fp, #-12]
   17d70:	ldr	r3, [pc, #140]	; 17e04 <__generate_code@@Base+0xa8>
   17d74:	add	r3, pc, r3
   17d78:	ldrd	r2, [r3]
   17d7c:	adds	r2, r2, #1
   17d80:	adc	r3, r3, #0
   17d84:	ldr	r1, [pc, #124]	; 17e08 <__generate_code@@Base+0xac>
   17d88:	add	r1, pc, r1
   17d8c:	strd	r2, [r1]
   17d90:	ldr	r3, [fp, #-8]
   17d94:	ldr	r3, [r3, #4]
   17d98:	mov	r2, #21
   17d9c:	mov	r1, #1
   17da0:	ldr	r0, [pc, #100]	; 17e0c <__generate_code@@Base+0xb0>
   17da4:	add	r0, pc, r0
   17da8:	bl	11900 <fwrite@plt>
   17dac:	ldr	r3, [pc, #92]	; 17e10 <__generate_code@@Base+0xb4>
   17db0:	add	r3, pc, r3
   17db4:	ldrd	r2, [r3, #8]
   17db8:	adds	r2, r2, #1
   17dbc:	adc	r3, r3, #0
   17dc0:	ldr	r1, [pc, #76]	; 17e14 <__generate_code@@Base+0xb8>
   17dc4:	add	r1, pc, r1
   17dc8:	strd	r2, [r1, #8]
   17dcc:	ldr	r1, [fp, #-12]
   17dd0:	ldr	r0, [fp, #-8]
   17dd4:	bl	17e20 <__generate_code_for_main@@Base>
   17dd8:	ldr	r3, [pc, #56]	; 17e18 <__generate_code@@Base+0xbc>
   17ddc:	add	r3, pc, r3
   17de0:	ldrd	r2, [r3, #16]
   17de4:	adds	r2, r2, #1
   17de8:	adc	r3, r3, #0
   17dec:	ldr	r1, [pc, #40]	; 17e1c <__generate_code@@Base+0xc0>
   17df0:	add	r1, pc, r1
   17df4:	strd	r2, [r1, #16]
   17df8:	nop			; (mov r0, r0)
   17dfc:	sub	sp, fp, #4
   17e00:	pop	{fp, pc}
   17e04:	ldrdeq	r5, [r1], -ip
   17e08:	andeq	r5, r1, r8, asr #19
   17e0c:	strdeq	r3, [r0], -r8
   17e10:	andeq	r5, r1, r0, lsr #19
   17e14:	andeq	r5, r1, ip, lsl #19
   17e18:	andeq	r5, r1, r4, ror r9
   17e1c:	andeq	r5, r1, r0, ror #18

00017e20 <__generate_code_for_main@@Base>:
   17e20:	push	{fp, lr}
   17e24:	add	fp, sp, #4
   17e28:	sub	sp, sp, #8
   17e2c:	str	r0, [fp, #-8]
   17e30:	str	r1, [fp, #-12]
   17e34:	ldr	r1, [pc, #212]	; 17f10 <__generate_code_for_main@@Base+0xf0>
   17e38:	add	r1, pc, r1
   17e3c:	ldr	r3, [fp, #-12]
   17e40:	ldr	r3, [r3]
   17e44:	cmp	r3, #2
   17e48:	bne	17e7c <__generate_code_for_main@@Base+0x5c>
   17e4c:	ldr	r3, [pc, #192]	; 17f14 <__generate_code_for_main@@Base+0xf4>
   17e50:	add	r3, pc, r3
   17e54:	ldrd	r2, [r3, #8]
   17e58:	adds	r2, r2, #1
   17e5c:	adc	r3, r3, #0
   17e60:	ldr	r1, [pc, #176]	; 17f18 <__generate_code_for_main@@Base+0xf8>
   17e64:	add	r1, pc, r1
   17e68:	strd	r2, [r1, #8]
   17e6c:	ldr	r1, [fp, #-12]
   17e70:	ldr	r0, [fp, #-8]
   17e74:	bl	17f3c <__generate_code_for_function@@Base>
   17e78:	b	17ee4 <__generate_code_for_main@@Base+0xc4>
   17e7c:	ldr	r3, [pc, #152]	; 17f1c <__generate_code_for_main@@Base+0xfc>
   17e80:	add	r3, pc, r3
   17e84:	ldrd	r2, [r3]
   17e88:	adds	r2, r2, #1
   17e8c:	adc	r3, r3, #0
   17e90:	ldr	r0, [pc, #136]	; 17f20 <__generate_code_for_main@@Base+0x100>
   17e94:	add	r0, pc, r0
   17e98:	strd	r2, [r0]
   17e9c:	ldr	r3, [pc, #128]	; 17f24 <__generate_code_for_main@@Base+0x104>
   17ea0:	ldr	r3, [r1, r3]
   17ea4:	ldr	r3, [r3]
   17ea8:	mov	r2, #46	; 0x2e
   17eac:	mov	r1, #1
   17eb0:	ldr	r0, [pc, #112]	; 17f28 <__generate_code_for_main@@Base+0x108>
   17eb4:	add	r0, pc, r0
   17eb8:	bl	11900 <fwrite@plt>
   17ebc:	ldr	r3, [pc, #104]	; 17f2c <__generate_code_for_main@@Base+0x10c>
   17ec0:	add	r3, pc, r3
   17ec4:	ldrd	r2, [r3, #16]
   17ec8:	adds	r2, r2, #1
   17ecc:	adc	r3, r3, #0
   17ed0:	ldr	r1, [pc, #88]	; 17f30 <__generate_code_for_main@@Base+0x110>
   17ed4:	add	r1, pc, r1
   17ed8:	strd	r2, [r1, #16]
   17edc:	mov	r0, #1
   17ee0:	bl	11978 <exit@plt>
   17ee4:	ldr	r3, [pc, #72]	; 17f34 <__generate_code_for_main@@Base+0x114>
   17ee8:	add	r3, pc, r3
   17eec:	ldrd	r2, [r3, #24]
   17ef0:	adds	r2, r2, #1
   17ef4:	adc	r3, r3, #0
   17ef8:	ldr	r1, [pc, #56]	; 17f38 <__generate_code_for_main@@Base+0x118>
   17efc:	add	r1, pc, r1
   17f00:	strd	r2, [r1, #24]
   17f04:	nop			; (mov r0, r0)
   17f08:	sub	sp, fp, #4
   17f0c:	pop	{fp, pc}
   17f10:	andeq	r4, r1, r0, asr #3
   17f14:	andeq	r5, r1, r0, ror #17
   17f18:	andeq	r5, r1, ip, asr #17
   17f1c:			; <UNDEFINED> instruction: 0x000158b0
   17f20:	muleq	r1, ip, r8
   17f24:	andeq	r0, r0, r4, lsr #1
   17f28:	andeq	r3, r0, r0, lsl #14
   17f2c:	andeq	r5, r1, r0, ror r8
   17f30:	andeq	r5, r1, ip, asr r8
   17f34:	andeq	r5, r1, r8, asr #16
   17f38:	andeq	r5, r1, r4, lsr r8

00017f3c <__generate_code_for_function@@Base>:
   17f3c:	push	{fp, lr}
   17f40:	add	fp, sp, #4
   17f44:	sub	sp, sp, #8
   17f48:	str	r0, [fp, #-8]
   17f4c:	str	r1, [fp, #-12]
   17f50:	ldr	r3, [pc, #156]	; 17ff4 <__generate_code_for_function@@Base+0xb8>
   17f54:	add	r3, pc, r3
   17f58:	ldrd	r2, [r3]
   17f5c:	adds	r2, r2, #1
   17f60:	adc	r3, r3, #0
   17f64:	ldr	r1, [pc, #140]	; 17ff8 <__generate_code_for_function@@Base+0xbc>
   17f68:	add	r1, pc, r1
   17f6c:	strd	r2, [r1]
   17f70:	ldr	r3, [fp, #-8]
   17f74:	ldr	r0, [r3, #4]
   17f78:	ldr	r3, [fp, #-12]
   17f7c:	ldr	r3, [r3, #8]
   17f80:	mov	r2, r3
   17f84:	ldr	r3, [pc, #112]	; 17ffc <__generate_code_for_function@@Base+0xc0>
   17f88:	add	r3, pc, r3
   17f8c:	mov	r1, r3
   17f90:	bl	1199c <fprintf@plt>
   17f94:	ldr	r3, [pc, #100]	; 18000 <__generate_code_for_function@@Base+0xc4>
   17f98:	add	r3, pc, r3
   17f9c:	ldrd	r2, [r3, #8]
   17fa0:	adds	r2, r2, #1
   17fa4:	adc	r3, r3, #0
   17fa8:	ldr	r1, [pc, #84]	; 18004 <__generate_code_for_function@@Base+0xc8>
   17fac:	add	r1, pc, r1
   17fb0:	strd	r2, [r1, #8]
   17fb4:	ldr	r3, [fp, #-12]
   17fb8:	ldr	r3, [r3, #12]
   17fbc:	mov	r1, r3
   17fc0:	ldr	r0, [fp, #-8]
   17fc4:	bl	18cc4 <__generate_code_for_body@@Base>
   17fc8:	ldr	r3, [pc, #56]	; 18008 <__generate_code_for_function@@Base+0xcc>
   17fcc:	add	r3, pc, r3
   17fd0:	ldrd	r2, [r3, #16]
   17fd4:	adds	r2, r2, #1
   17fd8:	adc	r3, r3, #0
   17fdc:	ldr	r1, [pc, #40]	; 1800c <__generate_code_for_function@@Base+0xd0>
   17fe0:	add	r1, pc, r1
   17fe4:	strd	r2, [r1, #16]
   17fe8:	nop			; (mov r0, r0)
   17fec:	sub	sp, fp, #4
   17ff0:	pop	{fp, pc}
   17ff4:	andeq	r5, r1, r4, asr #15
   17ff8:			; <UNDEFINED> instruction: 0x000157b0
   17ffc:	andeq	r3, r0, ip, asr r6
   18000:	andeq	r5, r1, r0, lsl #15
   18004:	andeq	r5, r1, ip, ror #14
   18008:	andeq	r5, r1, ip, asr #14
   1800c:	andeq	r5, r1, r8, lsr r7

00018010 <__generate_code_for_if@@Base>:
   18010:	push	{fp, lr}
   18014:	add	fp, sp, #4
   18018:	sub	sp, sp, #16
   1801c:	str	r0, [fp, #-16]
   18020:	str	r1, [fp, #-20]	; 0xffffffec
   18024:	ldr	r3, [pc, #332]	; 18178 <__generate_code_for_if@@Base+0x168>
   18028:	add	r3, pc, r3
   1802c:	ldrd	r2, [r3]
   18030:	adds	r2, r2, #1
   18034:	adc	r3, r3, #0
   18038:	ldr	r1, [pc, #316]	; 1817c <__generate_code_for_if@@Base+0x16c>
   1803c:	add	r1, pc, r1
   18040:	strd	r2, [r1]
   18044:	ldr	r3, [fp, #-16]
   18048:	ldrd	r2, [r3, #8]
   1804c:	strd	r2, [fp, #-12]
   18050:	ldr	r3, [fp, #-16]
   18054:	ldrd	r2, [r3, #8]
   18058:	adds	r2, r2, #1
   1805c:	adc	r3, r3, #0
   18060:	ldr	r1, [fp, #-16]
   18064:	strd	r2, [r1, #8]
   18068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1806c:	ldr	r1, [r3, #8]
   18070:	ldrd	r2, [fp, #-12]
   18074:	ldr	r0, [fp, #-16]
   18078:	bl	183fc <__generate_code_for_if_expression@@Base>
   1807c:	ldr	r3, [pc, #252]	; 18180 <__generate_code_for_if@@Base+0x170>
   18080:	add	r3, pc, r3
   18084:	ldrd	r2, [r3, #8]
   18088:	adds	r2, r2, #1
   1808c:	adc	r3, r3, #0
   18090:	ldr	r1, [pc, #236]	; 18184 <__generate_code_for_if@@Base+0x174>
   18094:	add	r1, pc, r1
   18098:	strd	r2, [r1, #8]
   1809c:	ldr	r3, [fp, #-20]	; 0xffffffec
   180a0:	ldr	r3, [r3, #12]
   180a4:	mov	r1, r3
   180a8:	ldr	r0, [fp, #-16]
   180ac:	bl	18cc4 <__generate_code_for_body@@Base>
   180b0:	ldr	r3, [pc, #208]	; 18188 <__generate_code_for_if@@Base+0x178>
   180b4:	add	r3, pc, r3
   180b8:	ldrd	r2, [r3, #16]
   180bc:	adds	r2, r2, #1
   180c0:	adc	r3, r3, #0
   180c4:	ldr	r1, [pc, #192]	; 1818c <__generate_code_for_if@@Base+0x17c>
   180c8:	add	r1, pc, r1
   180cc:	strd	r2, [r1, #16]
   180d0:	ldr	r3, [fp, #-16]
   180d4:	ldr	r0, [r3, #4]
   180d8:	ldrd	r2, [fp, #-12]
   180dc:	ldr	r1, [pc, #172]	; 18190 <__generate_code_for_if@@Base+0x180>
   180e0:	add	r1, pc, r1
   180e4:	bl	1199c <fprintf@plt>
   180e8:	ldr	r3, [pc, #164]	; 18194 <__generate_code_for_if@@Base+0x184>
   180ec:	add	r3, pc, r3
   180f0:	ldrd	r2, [r3, #24]
   180f4:	adds	r2, r2, #1
   180f8:	adc	r3, r3, #0
   180fc:	ldr	r1, [pc, #148]	; 18198 <__generate_code_for_if@@Base+0x188>
   18100:	add	r1, pc, r1
   18104:	strd	r2, [r1, #24]
   18108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1810c:	ldr	r3, [r3, #16]
   18110:	cmp	r3, #0
   18114:	beq	1816c <__generate_code_for_if@@Base+0x15c>
   18118:	ldr	r3, [pc, #124]	; 1819c <__generate_code_for_if@@Base+0x18c>
   1811c:	add	r3, pc, r3
   18120:	ldrd	r2, [r3, #32]
   18124:	adds	r2, r2, #1
   18128:	adc	r3, r3, #0
   1812c:	ldr	r1, [pc, #108]	; 181a0 <__generate_code_for_if@@Base+0x190>
   18130:	add	r1, pc, r1
   18134:	strd	r2, [r1, #32]
   18138:	ldr	r3, [fp, #-20]	; 0xffffffec
   1813c:	ldr	r3, [r3, #16]
   18140:	mov	r1, r3
   18144:	ldr	r0, [fp, #-16]
   18148:	bl	18cc4 <__generate_code_for_body@@Base>
   1814c:	ldr	r3, [pc, #80]	; 181a4 <__generate_code_for_if@@Base+0x194>
   18150:	add	r3, pc, r3
   18154:	ldrd	r2, [r3, #40]	; 0x28
   18158:	adds	r2, r2, #1
   1815c:	adc	r3, r3, #0
   18160:	ldr	r1, [pc, #64]	; 181a8 <__generate_code_for_if@@Base+0x198>
   18164:	add	r1, pc, r1
   18168:	strd	r2, [r1, #40]	; 0x28
   1816c:	nop			; (mov r0, r0)
   18170:	sub	sp, fp, #4
   18174:	pop	{fp, pc}
   18178:	andeq	r5, r1, r0, asr #13
   1817c:	andeq	r5, r1, ip, lsr #13
   18180:	andeq	r5, r1, r8, ror #12
   18184:	andeq	r5, r1, r4, asr r6
   18188:	andeq	r5, r1, r4, lsr r6
   1818c:	andeq	r5, r1, r0, lsr #12
   18190:	andeq	r3, r0, ip, lsl #10
   18194:	strdeq	r5, [r1], -ip
   18198:	andeq	r5, r1, r8, ror #11
   1819c:	andeq	r5, r1, ip, asr #11
   181a0:			; <UNDEFINED> instruction: 0x000155b8
   181a4:	muleq	r1, r8, r5
   181a8:	andeq	r5, r1, r4, lsl #11

000181ac <__generate_code_for_return@@Base>:
   181ac:	push	{r4, fp, lr}
   181b0:	add	fp, sp, #8
   181b4:	sub	sp, sp, #20
   181b8:	str	r0, [fp, #-24]	; 0xffffffe8
   181bc:	str	r1, [fp, #-28]	; 0xffffffe4
   181c0:	ldr	r4, [pc, #344]	; 18320 <__generate_code_for_return@@Base+0x174>
   181c4:	add	r4, pc, r4
   181c8:	ldr	r3, [pc, #340]	; 18324 <__generate_code_for_return@@Base+0x178>
   181cc:	add	r3, pc, r3
   181d0:	ldrd	r2, [r3]
   181d4:	adds	r2, r2, #1
   181d8:	adc	r3, r3, #0
   181dc:	ldr	r1, [pc, #324]	; 18328 <__generate_code_for_return@@Base+0x17c>
   181e0:	add	r1, pc, r1
   181e4:	strd	r2, [r1]
   181e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181ec:	ldr	r3, [r3, #8]
   181f0:	str	r3, [fp, #-16]
   181f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   181f8:	ldr	r3, [r3, #4]
   181fc:	mov	r2, #9
   18200:	mov	r1, #1
   18204:	ldr	r0, [pc, #288]	; 1832c <__generate_code_for_return@@Base+0x180>
   18208:	add	r0, pc, r0
   1820c:	bl	11900 <fwrite@plt>
   18210:	ldr	r3, [fp, #-16]
   18214:	ldr	r3, [r3]
   18218:	cmp	r3, #1
   1821c:	bne	18250 <__generate_code_for_return@@Base+0xa4>
   18220:	ldr	r3, [pc, #264]	; 18330 <__generate_code_for_return@@Base+0x184>
   18224:	add	r3, pc, r3
   18228:	ldrd	r2, [r3, #16]
   1822c:	adds	r2, r2, #1
   18230:	adc	r3, r3, #0
   18234:	ldr	r1, [pc, #248]	; 18334 <__generate_code_for_return@@Base+0x188>
   18238:	add	r1, pc, r1
   1823c:	strd	r2, [r1, #16]
   18240:	ldr	r1, [fp, #-16]
   18244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18248:	bl	18364 <__generate_code_for_int@@Base>
   1824c:	b	182b8 <__generate_code_for_return@@Base+0x10c>
   18250:	ldr	r3, [pc, #224]	; 18338 <__generate_code_for_return@@Base+0x18c>
   18254:	add	r3, pc, r3
   18258:	ldrd	r2, [r3, #8]
   1825c:	adds	r2, r2, #1
   18260:	adc	r3, r3, #0
   18264:	ldr	r1, [pc, #208]	; 1833c <__generate_code_for_return@@Base+0x190>
   18268:	add	r1, pc, r1
   1826c:	strd	r2, [r1, #8]
   18270:	ldr	r3, [pc, #200]	; 18340 <__generate_code_for_return@@Base+0x194>
   18274:	ldr	r3, [r4, r3]
   18278:	ldr	r3, [r3]
   1827c:	mov	r2, #37	; 0x25
   18280:	mov	r1, #1
   18284:	ldr	r0, [pc, #184]	; 18344 <__generate_code_for_return@@Base+0x198>
   18288:	add	r0, pc, r0
   1828c:	bl	11900 <fwrite@plt>
   18290:	ldr	r3, [pc, #176]	; 18348 <__generate_code_for_return@@Base+0x19c>
   18294:	add	r3, pc, r3
   18298:	ldrd	r2, [r3, #24]
   1829c:	adds	r2, r2, #1
   182a0:	adc	r3, r3, #0
   182a4:	ldr	r1, [pc, #160]	; 1834c <__generate_code_for_return@@Base+0x1a0>
   182a8:	add	r1, pc, r1
   182ac:	strd	r2, [r1, #24]
   182b0:	mov	r0, #1
   182b4:	bl	11978 <exit@plt>
   182b8:	ldr	r3, [pc, #144]	; 18350 <__generate_code_for_return@@Base+0x1a4>
   182bc:	add	r3, pc, r3
   182c0:	ldrd	r2, [r3, #32]
   182c4:	adds	r2, r2, #1
   182c8:	adc	r3, r3, #0
   182cc:	ldr	r1, [pc, #128]	; 18354 <__generate_code_for_return@@Base+0x1a8>
   182d0:	add	r1, pc, r1
   182d4:	strd	r2, [r1, #32]
   182d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182dc:	ldr	r3, [r3, #4]
   182e0:	mov	r2, #8
   182e4:	mov	r1, #1
   182e8:	ldr	r0, [pc, #104]	; 18358 <__generate_code_for_return@@Base+0x1ac>
   182ec:	add	r0, pc, r0
   182f0:	bl	11900 <fwrite@plt>
   182f4:	ldr	r3, [pc, #96]	; 1835c <__generate_code_for_return@@Base+0x1b0>
   182f8:	add	r3, pc, r3
   182fc:	ldrd	r2, [r3, #40]	; 0x28
   18300:	adds	r2, r2, #1
   18304:	adc	r3, r3, #0
   18308:	ldr	r1, [pc, #80]	; 18360 <__generate_code_for_return@@Base+0x1b4>
   1830c:	add	r1, pc, r1
   18310:	strd	r2, [r1, #40]	; 0x28
   18314:	nop			; (mov r0, r0)
   18318:	sub	sp, fp, #8
   1831c:	pop	{r4, fp, pc}
   18320:	andeq	r3, r1, r4, lsr lr
   18324:	andeq	r5, r1, ip, ror #9
   18328:	ldrdeq	r5, [r1], -r8
   1832c:	strdeq	r3, [r0], -r4
   18330:	muleq	r1, r4, r4
   18334:	andeq	r5, r1, r0, lsl #9
   18338:	andeq	r5, r1, r4, ror #8
   1833c:	andeq	r5, r1, r0, asr r4
   18340:	andeq	r0, r0, r4, lsr #1
   18344:	andeq	r3, r0, r0, lsl #7
   18348:	andeq	r5, r1, r4, lsr #8
   1834c:	andeq	r5, r1, r0, lsl r4
   18350:	strdeq	r5, [r1], -ip
   18354:	andeq	r5, r1, r8, ror #7
   18358:	andeq	r3, r0, r4, asr #6
   1835c:	andeq	r5, r1, r0, asr #7
   18360:	andeq	r5, r1, ip, lsr #7

00018364 <__generate_code_for_int@@Base>:
   18364:	push	{fp, lr}
   18368:	add	fp, sp, #4
   1836c:	sub	sp, sp, #8
   18370:	str	r0, [fp, #-8]
   18374:	str	r1, [fp, #-12]
   18378:	ldr	r3, [pc, #104]	; 183e8 <__generate_code_for_int@@Base+0x84>
   1837c:	add	r3, pc, r3
   18380:	ldrd	r2, [r3]
   18384:	adds	r2, r2, #1
   18388:	adc	r3, r3, #0
   1838c:	ldr	r1, [pc, #88]	; 183ec <__generate_code_for_int@@Base+0x88>
   18390:	add	r1, pc, r1
   18394:	strd	r2, [r1]
   18398:	ldr	r3, [fp, #-8]
   1839c:	ldr	r0, [r3, #4]
   183a0:	ldr	r3, [fp, #-12]
   183a4:	ldr	r3, [r3, #8]
   183a8:	mov	r2, r3
   183ac:	ldr	r3, [pc, #60]	; 183f0 <__generate_code_for_int@@Base+0x8c>
   183b0:	add	r3, pc, r3
   183b4:	mov	r1, r3
   183b8:	bl	1199c <fprintf@plt>
   183bc:	ldr	r3, [pc, #48]	; 183f4 <__generate_code_for_int@@Base+0x90>
   183c0:	add	r3, pc, r3
   183c4:	ldrd	r2, [r3, #8]
   183c8:	adds	r2, r2, #1
   183cc:	adc	r3, r3, #0
   183d0:	ldr	r1, [pc, #32]	; 183f8 <__generate_code_for_int@@Base+0x94>
   183d4:	add	r1, pc, r1
   183d8:	strd	r2, [r1, #8]
   183dc:	nop			; (mov r0, r0)
   183e0:	sub	sp, fp, #4
   183e4:	pop	{fp, pc}
   183e8:	andeq	r5, r1, ip, lsr #6
   183ec:	andeq	r5, r1, r8, lsl r3
   183f0:	andeq	r3, r0, ip, lsl #5
   183f4:	andeq	r5, r1, r8, ror #5
   183f8:	ldrdeq	r5, [r1], -r4

000183fc <__generate_code_for_if_expression@@Base>:
   183fc:	push	{fp, lr}
   18400:	add	fp, sp, #4
   18404:	sub	sp, sp, #24
   18408:	str	r0, [fp, #-16]
   1840c:	str	r1, [fp, #-20]	; 0xffffffec
   18410:	strd	r2, [fp, #-28]	; 0xffffffe4
   18414:	ldr	r3, [fp, #-20]	; 0xffffffec
   18418:	str	r3, [fp, #-8]
   1841c:	ldr	r3, [fp, #-8]
   18420:	ldr	r3, [r3, #16]
   18424:	cmp	r3, #8
   18428:	bne	18484 <__generate_code_for_if_expression@@Base+0x88>
   1842c:	ldr	r3, [pc, #172]	; 184e0 <__generate_code_for_if_expression@@Base+0xe4>
   18430:	add	r3, pc, r3
   18434:	ldrd	r2, [r3, #8]
   18438:	adds	r2, r2, #1
   1843c:	adc	r3, r3, #0
   18440:	ldr	r1, [pc, #156]	; 184e4 <__generate_code_for_if_expression@@Base+0xe8>
   18444:	add	r1, pc, r1
   18448:	strd	r2, [r1, #8]
   1844c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   18450:	ldr	r1, [fp, #-8]
   18454:	ldr	r0, [fp, #-16]
   18458:	bl	18ac4 <__generate_code_for_unary_boolean_expression@@Base>
   1845c:	nop			; (mov r0, r0)
   18460:	ldr	r3, [pc, #128]	; 184e8 <__generate_code_for_if_expression@@Base+0xec>
   18464:	add	r3, pc, r3
   18468:	ldrd	r2, [r3, #16]
   1846c:	adds	r2, r2, #1
   18470:	adc	r3, r3, #0
   18474:	ldr	r1, [pc, #112]	; 184ec <__generate_code_for_if_expression@@Base+0xf0>
   18478:	add	r1, pc, r1
   1847c:	strd	r2, [r1, #16]
   18480:	b	184d4 <__generate_code_for_if_expression@@Base+0xd8>
   18484:	ldr	r3, [pc, #100]	; 184f0 <__generate_code_for_if_expression@@Base+0xf4>
   18488:	add	r3, pc, r3
   1848c:	ldrd	r2, [r3]
   18490:	adds	r2, r2, #1
   18494:	adc	r3, r3, #0
   18498:	ldr	r1, [pc, #84]	; 184f4 <__generate_code_for_if_expression@@Base+0xf8>
   1849c:	add	r1, pc, r1
   184a0:	strd	r2, [r1]
   184a4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   184a8:	ldr	r1, [fp, #-8]
   184ac:	ldr	r0, [fp, #-16]
   184b0:	bl	18500 <__generate_code_for_binary_boolean_expression@@Base>
   184b4:	ldr	r3, [pc, #60]	; 184f8 <__generate_code_for_if_expression@@Base+0xfc>
   184b8:	add	r3, pc, r3
   184bc:	ldrd	r2, [r3, #24]
   184c0:	adds	r2, r2, #1
   184c4:	adc	r3, r3, #0
   184c8:	ldr	r1, [pc, #44]	; 184fc <__generate_code_for_if_expression@@Base+0x100>
   184cc:	add	r1, pc, r1
   184d0:	strd	r2, [r1, #24]
   184d4:	nop			; (mov r0, r0)
   184d8:	sub	sp, fp, #4
   184dc:	pop	{fp, pc}
   184e0:	andeq	r5, r1, r8, asr r2
   184e4:	andeq	r5, r1, r4, asr #4
   184e8:	andeq	r5, r1, r4, lsr #4
   184ec:	andeq	r5, r1, r0, lsl r2
   184f0:	andeq	r5, r1, r0, lsl #4
   184f4:	andeq	r5, r1, ip, ror #3
   184f8:	ldrdeq	r5, [r1], -r0
   184fc:			; <UNDEFINED> instruction: 0x000151bc

00018500 <__generate_code_for_binary_boolean_expression@@Base>:
   18500:	push	{r4, fp, lr}
   18504:	add	fp, sp, #8
   18508:	sub	sp, sp, #28
   1850c:	str	r0, [fp, #-24]	; 0xffffffe8
   18510:	str	r1, [fp, #-28]	; 0xffffffe4
   18514:	strd	r2, [fp, #-36]	; 0xffffffdc
   18518:	ldr	r4, [pc, #1212]	; 189dc <__generate_code_for_binary_boolean_expression@@Base+0x4dc>
   1851c:	add	r4, pc, r4
   18520:	ldr	r3, [pc, #1208]	; 189e0 <__generate_code_for_binary_boolean_expression@@Base+0x4e0>
   18524:	add	r3, pc, r3
   18528:	ldrd	r2, [r3]
   1852c:	adds	r2, r2, #1
   18530:	adc	r3, r3, #0
   18534:	ldr	r1, [pc, #1192]	; 189e4 <__generate_code_for_binary_boolean_expression@@Base+0x4e4>
   18538:	add	r1, pc, r1
   1853c:	strd	r2, [r1]
   18540:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18544:	ldr	r3, [r3, #8]
   18548:	str	r3, [fp, #-16]
   1854c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18550:	ldr	r3, [r3, #12]
   18554:	str	r3, [fp, #-20]	; 0xffffffec
   18558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1855c:	ldr	r3, [r3, #4]
   18560:	mov	r2, #9
   18564:	mov	r1, #1
   18568:	ldr	r0, [pc, #1144]	; 189e8 <__generate_code_for_binary_boolean_expression@@Base+0x4e8>
   1856c:	add	r0, pc, r0
   18570:	bl	11900 <fwrite@plt>
   18574:	ldr	r3, [pc, #1136]	; 189ec <__generate_code_for_binary_boolean_expression@@Base+0x4ec>
   18578:	add	r3, pc, r3
   1857c:	ldrd	r2, [r3, #8]
   18580:	adds	r2, r2, #1
   18584:	adc	r3, r3, #0
   18588:	ldr	r1, [pc, #1120]	; 189f0 <__generate_code_for_binary_boolean_expression@@Base+0x4f0>
   1858c:	add	r1, pc, r1
   18590:	strd	r2, [r1, #8]
   18594:	ldr	r1, [fp, #-16]
   18598:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1859c:	bl	18364 <__generate_code_for_int@@Base>
   185a0:	ldr	r3, [pc, #1100]	; 189f4 <__generate_code_for_binary_boolean_expression@@Base+0x4f4>
   185a4:	add	r3, pc, r3
   185a8:	ldrd	r2, [r3, #16]
   185ac:	adds	r2, r2, #1
   185b0:	adc	r3, r3, #0
   185b4:	ldr	r1, [pc, #1084]	; 189f8 <__generate_code_for_binary_boolean_expression@@Base+0x4f8>
   185b8:	add	r1, pc, r1
   185bc:	strd	r2, [r1, #16]
   185c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185c4:	ldr	r3, [r3, #4]
   185c8:	mov	r1, r3
   185cc:	mov	r0, #10
   185d0:	bl	11a20 <fputc@plt>
   185d4:	ldr	r3, [pc, #1056]	; 189fc <__generate_code_for_binary_boolean_expression@@Base+0x4fc>
   185d8:	add	r3, pc, r3
   185dc:	ldrd	r2, [r3, #24]
   185e0:	adds	r2, r2, #1
   185e4:	adc	r3, r3, #0
   185e8:	ldr	r1, [pc, #1040]	; 18a00 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   185ec:	add	r1, pc, r1
   185f0:	strd	r2, [r1, #24]
   185f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f8:	ldr	r3, [r3, #4]
   185fc:	mov	r2, #9
   18600:	mov	r1, #1
   18604:	ldr	r0, [pc, #1016]	; 18a04 <__generate_code_for_binary_boolean_expression@@Base+0x504>
   18608:	add	r0, pc, r0
   1860c:	bl	11900 <fwrite@plt>
   18610:	ldr	r3, [pc, #1008]	; 18a08 <__generate_code_for_binary_boolean_expression@@Base+0x508>
   18614:	add	r3, pc, r3
   18618:	ldrd	r2, [r3, #32]
   1861c:	adds	r2, r2, #1
   18620:	adc	r3, r3, #0
   18624:	ldr	r1, [pc, #992]	; 18a0c <__generate_code_for_binary_boolean_expression@@Base+0x50c>
   18628:	add	r1, pc, r1
   1862c:	strd	r2, [r1, #32]
   18630:	ldr	r1, [fp, #-20]	; 0xffffffec
   18634:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18638:	bl	18364 <__generate_code_for_int@@Base>
   1863c:	ldr	r3, [pc, #972]	; 18a10 <__generate_code_for_binary_boolean_expression@@Base+0x510>
   18640:	add	r3, pc, r3
   18644:	ldrd	r2, [r3, #40]	; 0x28
   18648:	adds	r2, r2, #1
   1864c:	adc	r3, r3, #0
   18650:	ldr	r1, [pc, #956]	; 18a14 <__generate_code_for_binary_boolean_expression@@Base+0x514>
   18654:	add	r1, pc, r1
   18658:	strd	r2, [r1, #40]	; 0x28
   1865c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18660:	ldr	r3, [r3, #4]
   18664:	mov	r1, r3
   18668:	mov	r0, #10
   1866c:	bl	11a20 <fputc@plt>
   18670:	ldr	r3, [pc, #928]	; 18a18 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   18674:	add	r3, pc, r3
   18678:	ldrd	r2, [r3, #48]	; 0x30
   1867c:	adds	r2, r2, #1
   18680:	adc	r3, r3, #0
   18684:	ldr	r1, [pc, #912]	; 18a1c <__generate_code_for_binary_boolean_expression@@Base+0x51c>
   18688:	add	r1, pc, r1
   1868c:	strd	r2, [r1, #48]	; 0x30
   18690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18694:	ldr	r3, [r3, #4]
   18698:	mov	r2, #12
   1869c:	mov	r1, #1
   186a0:	ldr	r0, [pc, #888]	; 18a20 <__generate_code_for_binary_boolean_expression@@Base+0x520>
   186a4:	add	r0, pc, r0
   186a8:	bl	11900 <fwrite@plt>
   186ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186b0:	ldr	r3, [r3, #16]
   186b4:	cmp	r3, #7
   186b8:	addls	pc, pc, r3, lsl #2
   186bc:	b	18968 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   186c0:	b	186e0 <__generate_code_for_binary_boolean_expression@@Base+0x1e0>
   186c4:	b	18740 <__generate_code_for_binary_boolean_expression@@Base+0x240>
   186c8:	b	187a0 <__generate_code_for_binary_boolean_expression@@Base+0x2a0>
   186cc:	b	18800 <__generate_code_for_binary_boolean_expression@@Base+0x300>
   186d0:	b	18860 <__generate_code_for_binary_boolean_expression@@Base+0x360>
   186d4:	b	18884 <__generate_code_for_binary_boolean_expression@@Base+0x384>
   186d8:	b	188a8 <__generate_code_for_binary_boolean_expression@@Base+0x3a8>
   186dc:	b	18908 <__generate_code_for_binary_boolean_expression@@Base+0x408>
   186e0:	ldr	r3, [pc, #828]	; 18a24 <__generate_code_for_binary_boolean_expression@@Base+0x524>
   186e4:	add	r3, pc, r3
   186e8:	ldrd	r2, [r3, #64]	; 0x40
   186ec:	adds	r2, r2, #1
   186f0:	adc	r3, r3, #0
   186f4:	ldr	r1, [pc, #812]	; 18a28 <__generate_code_for_binary_boolean_expression@@Base+0x528>
   186f8:	add	r1, pc, r1
   186fc:	strd	r2, [r1, #64]	; 0x40
   18700:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18704:	ldr	r0, [r3, #4]
   18708:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1870c:	ldr	r1, [pc, #792]	; 18a2c <__generate_code_for_binary_boolean_expression@@Base+0x52c>
   18710:	add	r1, pc, r1
   18714:	bl	1199c <fprintf@plt>
   18718:	nop			; (mov r0, r0)
   1871c:	ldr	r3, [pc, #780]	; 18a30 <__generate_code_for_binary_boolean_expression@@Base+0x530>
   18720:	add	r3, pc, r3
   18724:	ldrd	r2, [r3, #176]	; 0xb0
   18728:	adds	r2, r2, #1
   1872c:	adc	r3, r3, #0
   18730:	ldr	r1, [pc, #764]	; 18a34 <__generate_code_for_binary_boolean_expression@@Base+0x534>
   18734:	add	r1, pc, r1
   18738:	strd	r2, [r1, #176]	; 0xb0
   1873c:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18740:	ldr	r3, [pc, #752]	; 18a38 <__generate_code_for_binary_boolean_expression@@Base+0x538>
   18744:	add	r3, pc, r3
   18748:	ldrd	r2, [r3, #72]	; 0x48
   1874c:	adds	r2, r2, #1
   18750:	adc	r3, r3, #0
   18754:	ldr	r1, [pc, #736]	; 18a3c <__generate_code_for_binary_boolean_expression@@Base+0x53c>
   18758:	add	r1, pc, r1
   1875c:	strd	r2, [r1, #72]	; 0x48
   18760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18764:	ldr	r0, [r3, #4]
   18768:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1876c:	ldr	r1, [pc, #716]	; 18a40 <__generate_code_for_binary_boolean_expression@@Base+0x540>
   18770:	add	r1, pc, r1
   18774:	bl	1199c <fprintf@plt>
   18778:	nop			; (mov r0, r0)
   1877c:	ldr	r3, [pc, #704]	; 18a44 <__generate_code_for_binary_boolean_expression@@Base+0x544>
   18780:	add	r3, pc, r3
   18784:	ldrd	r2, [r3, #112]	; 0x70
   18788:	adds	r2, r2, #1
   1878c:	adc	r3, r3, #0
   18790:	ldr	r1, [pc, #688]	; 18a48 <__generate_code_for_binary_boolean_expression@@Base+0x548>
   18794:	add	r1, pc, r1
   18798:	strd	r2, [r1, #112]	; 0x70
   1879c:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   187a0:	ldr	r3, [pc, #676]	; 18a4c <__generate_code_for_binary_boolean_expression@@Base+0x54c>
   187a4:	add	r3, pc, r3
   187a8:	ldrd	r2, [r3, #80]	; 0x50
   187ac:	adds	r2, r2, #1
   187b0:	adc	r3, r3, #0
   187b4:	ldr	r1, [pc, #660]	; 18a50 <__generate_code_for_binary_boolean_expression@@Base+0x550>
   187b8:	add	r1, pc, r1
   187bc:	strd	r2, [r1, #80]	; 0x50
   187c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187c4:	ldr	r0, [r3, #4]
   187c8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   187cc:	ldr	r1, [pc, #640]	; 18a54 <__generate_code_for_binary_boolean_expression@@Base+0x554>
   187d0:	add	r1, pc, r1
   187d4:	bl	1199c <fprintf@plt>
   187d8:	nop			; (mov r0, r0)
   187dc:	ldr	r3, [pc, #628]	; 18a58 <__generate_code_for_binary_boolean_expression@@Base+0x558>
   187e0:	add	r3, pc, r3
   187e4:	ldrd	r2, [r3, #120]	; 0x78
   187e8:	adds	r2, r2, #1
   187ec:	adc	r3, r3, #0
   187f0:	ldr	r1, [pc, #612]	; 18a5c <__generate_code_for_binary_boolean_expression@@Base+0x55c>
   187f4:	add	r1, pc, r1
   187f8:	strd	r2, [r1, #120]	; 0x78
   187fc:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18800:	ldr	r3, [pc, #600]	; 18a60 <__generate_code_for_binary_boolean_expression@@Base+0x560>
   18804:	add	r3, pc, r3
   18808:	ldrd	r2, [r3, #88]	; 0x58
   1880c:	adds	r2, r2, #1
   18810:	adc	r3, r3, #0
   18814:	ldr	r1, [pc, #584]	; 18a64 <__generate_code_for_binary_boolean_expression@@Base+0x564>
   18818:	add	r1, pc, r1
   1881c:	strd	r2, [r1, #88]	; 0x58
   18820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18824:	ldr	r0, [r3, #4]
   18828:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1882c:	ldr	r1, [pc, #564]	; 18a68 <__generate_code_for_binary_boolean_expression@@Base+0x568>
   18830:	add	r1, pc, r1
   18834:	bl	1199c <fprintf@plt>
   18838:	nop			; (mov r0, r0)
   1883c:	ldr	r3, [pc, #552]	; 18a6c <__generate_code_for_binary_boolean_expression@@Base+0x56c>
   18840:	add	r3, pc, r3
   18844:	ldrd	r2, [r3, #128]	; 0x80
   18848:	adds	r2, r2, #1
   1884c:	adc	r3, r3, #0
   18850:	ldr	r1, [pc, #536]	; 18a70 <__generate_code_for_binary_boolean_expression@@Base+0x570>
   18854:	add	r1, pc, r1
   18858:	strd	r2, [r1, #128]	; 0x80
   1885c:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18860:	ldr	r3, [pc, #524]	; 18a74 <__generate_code_for_binary_boolean_expression@@Base+0x574>
   18864:	add	r3, pc, r3
   18868:	ldrd	r2, [r3, #136]	; 0x88
   1886c:	adds	r2, r2, #1
   18870:	adc	r3, r3, #0
   18874:	ldr	r1, [pc, #508]	; 18a78 <__generate_code_for_binary_boolean_expression@@Base+0x578>
   18878:	add	r1, pc, r1
   1887c:	strd	r2, [r1, #136]	; 0x88
   18880:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18884:	ldr	r3, [pc, #496]	; 18a7c <__generate_code_for_binary_boolean_expression@@Base+0x57c>
   18888:	add	r3, pc, r3
   1888c:	ldrd	r2, [r3, #144]	; 0x90
   18890:	adds	r2, r2, #1
   18894:	adc	r3, r3, #0
   18898:	ldr	r1, [pc, #480]	; 18a80 <__generate_code_for_binary_boolean_expression@@Base+0x580>
   1889c:	add	r1, pc, r1
   188a0:	strd	r2, [r1, #144]	; 0x90
   188a4:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   188a8:	ldr	r3, [pc, #468]	; 18a84 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   188ac:	add	r3, pc, r3
   188b0:	ldrd	r2, [r3, #96]	; 0x60
   188b4:	adds	r2, r2, #1
   188b8:	adc	r3, r3, #0
   188bc:	ldr	r1, [pc, #452]	; 18a88 <__generate_code_for_binary_boolean_expression@@Base+0x588>
   188c0:	add	r1, pc, r1
   188c4:	strd	r2, [r1, #96]	; 0x60
   188c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   188cc:	ldr	r0, [r3, #4]
   188d0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   188d4:	ldr	r1, [pc, #432]	; 18a8c <__generate_code_for_binary_boolean_expression@@Base+0x58c>
   188d8:	add	r1, pc, r1
   188dc:	bl	1199c <fprintf@plt>
   188e0:	nop			; (mov r0, r0)
   188e4:	ldr	r3, [pc, #420]	; 18a90 <__generate_code_for_binary_boolean_expression@@Base+0x590>
   188e8:	add	r3, pc, r3
   188ec:	ldrd	r2, [r3, #152]	; 0x98
   188f0:	adds	r2, r2, #1
   188f4:	adc	r3, r3, #0
   188f8:	ldr	r1, [pc, #404]	; 18a94 <__generate_code_for_binary_boolean_expression@@Base+0x594>
   188fc:	add	r1, pc, r1
   18900:	strd	r2, [r1, #152]	; 0x98
   18904:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18908:	ldr	r3, [pc, #392]	; 18a98 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   1890c:	add	r3, pc, r3
   18910:	ldrd	r2, [r3, #104]	; 0x68
   18914:	adds	r2, r2, #1
   18918:	adc	r3, r3, #0
   1891c:	ldr	r1, [pc, #376]	; 18a9c <__generate_code_for_binary_boolean_expression@@Base+0x59c>
   18920:	add	r1, pc, r1
   18924:	strd	r2, [r1, #104]	; 0x68
   18928:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1892c:	ldr	r0, [r3, #4]
   18930:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   18934:	ldr	r1, [pc, #356]	; 18aa0 <__generate_code_for_binary_boolean_expression@@Base+0x5a0>
   18938:	add	r1, pc, r1
   1893c:	bl	1199c <fprintf@plt>
   18940:	nop			; (mov r0, r0)
   18944:	ldr	r3, [pc, #344]	; 18aa4 <__generate_code_for_binary_boolean_expression@@Base+0x5a4>
   18948:	add	r3, pc, r3
   1894c:	ldrd	r2, [r3, #160]	; 0xa0
   18950:	adds	r2, r2, #1
   18954:	adc	r3, r3, #0
   18958:	ldr	r1, [pc, #328]	; 18aa8 <__generate_code_for_binary_boolean_expression@@Base+0x5a8>
   1895c:	add	r1, pc, r1
   18960:	strd	r2, [r1, #160]	; 0xa0
   18964:	b	189d0 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   18968:	ldr	r3, [pc, #316]	; 18aac <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   1896c:	add	r3, pc, r3
   18970:	ldrd	r2, [r3, #56]	; 0x38
   18974:	adds	r2, r2, #1
   18978:	adc	r3, r3, #0
   1897c:	ldr	r1, [pc, #300]	; 18ab0 <__generate_code_for_binary_boolean_expression@@Base+0x5b0>
   18980:	add	r1, pc, r1
   18984:	strd	r2, [r1, #56]	; 0x38
   18988:	ldr	r3, [pc, #292]	; 18ab4 <__generate_code_for_binary_boolean_expression@@Base+0x5b4>
   1898c:	ldr	r3, [r4, r3]
   18990:	ldr	r3, [r3]
   18994:	mov	r2, #31
   18998:	mov	r1, #1
   1899c:	ldr	r0, [pc, #276]	; 18ab8 <__generate_code_for_binary_boolean_expression@@Base+0x5b8>
   189a0:	add	r0, pc, r0
   189a4:	bl	11900 <fwrite@plt>
   189a8:	ldr	r3, [pc, #268]	; 18abc <__generate_code_for_binary_boolean_expression@@Base+0x5bc>
   189ac:	add	r3, pc, r3
   189b0:	ldrd	r2, [r3, #168]	; 0xa8
   189b4:	adds	r2, r2, #1
   189b8:	adc	r3, r3, #0
   189bc:	ldr	r1, [pc, #252]	; 18ac0 <__generate_code_for_binary_boolean_expression@@Base+0x5c0>
   189c0:	add	r1, pc, r1
   189c4:	strd	r2, [r1, #168]	; 0xa8
   189c8:	mov	r0, #1
   189cc:	bl	11978 <exit@plt>
   189d0:	nop			; (mov r0, r0)
   189d4:	sub	sp, fp, #8
   189d8:	pop	{r4, fp, pc}
   189dc:	ldrdeq	r3, [r1], -ip
   189e0:	andeq	r5, r1, ip, lsr #1
   189e4:	muleq	r1, r8, r0
   189e8:	muleq	r0, r0, r0
   189ec:	andeq	r5, r1, r8, asr r0
   189f0:	andeq	r5, r1, r4, asr #32
   189f4:	andeq	r5, r1, ip, lsr #32
   189f8:	andeq	r5, r1, r8, lsl r0
   189fc:	strdeq	r4, [r1], -r8
   18a00:	andeq	r4, r1, r4, ror #31
   18a04:	andeq	r3, r0, r8, lsr r0
   18a08:			; <UNDEFINED> instruction: 0x00014fbc
   18a0c:	andeq	r4, r1, r8, lsr #31
   18a10:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   18a14:	andeq	r4, r1, ip, ror pc
   18a18:	andeq	r4, r1, ip, asr pc
   18a1c:	andeq	r4, r1, r8, asr #30
   18a20:	andeq	r2, r0, r8, lsr #31
   18a24:	andeq	r4, r1, ip, ror #29
   18a28:	ldrdeq	r4, [r1], -r8
   18a2c:	andeq	r2, r0, ip, asr #30
   18a30:			; <UNDEFINED> instruction: 0x00014eb0
   18a34:	muleq	r1, ip, lr
   18a38:	andeq	r4, r1, ip, lsl #29
   18a3c:	andeq	r4, r1, r8, ror lr
   18a40:	andeq	r2, r0, r0, lsl #30
   18a44:	andeq	r4, r1, r0, asr lr
   18a48:	andeq	r4, r1, ip, lsr lr
   18a4c:	andeq	r4, r1, ip, lsr #28
   18a50:	andeq	r4, r1, r8, lsl lr
   18a54:			; <UNDEFINED> instruction: 0x00002eb4
   18a58:	strdeq	r4, [r1], -r0
   18a5c:	ldrdeq	r4, [r1], -ip
   18a60:	andeq	r4, r1, ip, asr #27
   18a64:			; <UNDEFINED> instruction: 0x00014db8
   18a68:	andeq	r2, r0, r8, ror #28
   18a6c:	muleq	r1, r0, sp
   18a70:	andeq	r4, r1, ip, ror sp
   18a74:	andeq	r4, r1, ip, ror #26
   18a78:	andeq	r4, r1, r8, asr sp
   18a7c:	andeq	r4, r1, r8, asr #26
   18a80:	andeq	r4, r1, r4, lsr sp
   18a84:	andeq	r4, r1, r4, lsr #26
   18a88:	andeq	r4, r1, r0, lsl sp
   18a8c:	ldrdeq	r2, [r0], -r4
   18a90:	andeq	r4, r1, r8, ror #25
   18a94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18a98:	andeq	r4, r1, r4, asr #25
   18a9c:			; <UNDEFINED> instruction: 0x00014cb0
   18aa0:	andeq	r2, r0, r8, lsl #27
   18aa4:	andeq	r4, r1, r8, lsl #25
   18aa8:	andeq	r4, r1, r4, ror ip
   18aac:	andeq	r4, r1, r4, ror #24
   18ab0:	andeq	r4, r1, r0, asr ip
   18ab4:	andeq	r0, r0, r4, lsr #1
   18ab8:	andeq	r2, r0, r4, lsr sp
   18abc:	andeq	r4, r1, r4, lsr #24
   18ac0:	andeq	r4, r1, r0, lsl ip

00018ac4 <__generate_code_for_unary_boolean_expression@@Base>:
   18ac4:	push	{r4, fp, lr}
   18ac8:	add	fp, sp, #8
   18acc:	sub	sp, sp, #28
   18ad0:	str	r0, [fp, #-24]	; 0xffffffe8
   18ad4:	str	r1, [fp, #-28]	; 0xffffffe4
   18ad8:	strd	r2, [fp, #-36]	; 0xffffffdc
   18adc:	ldr	r4, [pc, #400]	; 18c74 <__generate_code_for_unary_boolean_expression@@Base+0x1b0>
   18ae0:	add	r4, pc, r4
   18ae4:	ldr	r3, [pc, #396]	; 18c78 <__generate_code_for_unary_boolean_expression@@Base+0x1b4>
   18ae8:	add	r3, pc, r3
   18aec:	ldrd	r2, [r3]
   18af0:	adds	r2, r2, #1
   18af4:	adc	r3, r3, #0
   18af8:	ldr	r1, [pc, #380]	; 18c7c <__generate_code_for_unary_boolean_expression@@Base+0x1b8>
   18afc:	add	r1, pc, r1
   18b00:	strd	r2, [r1]
   18b04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b08:	ldr	r3, [r3, #8]
   18b0c:	str	r3, [fp, #-16]
   18b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b14:	ldr	r3, [r3, #4]
   18b18:	mov	r2, #11
   18b1c:	mov	r1, #1
   18b20:	ldr	r0, [pc, #344]	; 18c80 <__generate_code_for_unary_boolean_expression@@Base+0x1bc>
   18b24:	add	r0, pc, r0
   18b28:	bl	11900 <fwrite@plt>
   18b2c:	ldr	r3, [pc, #336]	; 18c84 <__generate_code_for_unary_boolean_expression@@Base+0x1c0>
   18b30:	add	r3, pc, r3
   18b34:	ldrd	r2, [r3, #8]
   18b38:	adds	r2, r2, #1
   18b3c:	adc	r3, r3, #0
   18b40:	ldr	r1, [pc, #320]	; 18c88 <__generate_code_for_unary_boolean_expression@@Base+0x1c4>
   18b44:	add	r1, pc, r1
   18b48:	strd	r2, [r1, #8]
   18b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b50:	ldr	r3, [r3, #4]
   18b54:	mov	r2, #9
   18b58:	mov	r1, #1
   18b5c:	ldr	r0, [pc, #296]	; 18c8c <__generate_code_for_unary_boolean_expression@@Base+0x1c8>
   18b60:	add	r0, pc, r0
   18b64:	bl	11900 <fwrite@plt>
   18b68:	ldr	r3, [pc, #288]	; 18c90 <__generate_code_for_unary_boolean_expression@@Base+0x1cc>
   18b6c:	add	r3, pc, r3
   18b70:	ldrd	r2, [r3, #16]
   18b74:	adds	r2, r2, #1
   18b78:	adc	r3, r3, #0
   18b7c:	ldr	r1, [pc, #272]	; 18c94 <__generate_code_for_unary_boolean_expression@@Base+0x1d0>
   18b80:	add	r1, pc, r1
   18b84:	strd	r2, [r1, #16]
   18b88:	ldr	r1, [fp, #-16]
   18b8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18b90:	bl	18364 <__generate_code_for_int@@Base>
   18b94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18b98:	ldr	r3, [r3, #16]
   18b9c:	cmp	r3, #8
   18ba0:	bne	18be0 <__generate_code_for_unary_boolean_expression@@Base+0x11c>
   18ba4:	ldr	r3, [pc, #236]	; 18c98 <__generate_code_for_unary_boolean_expression@@Base+0x1d4>
   18ba8:	add	r3, pc, r3
   18bac:	ldrd	r2, [r3, #32]
   18bb0:	adds	r2, r2, #1
   18bb4:	adc	r3, r3, #0
   18bb8:	ldr	r1, [pc, #220]	; 18c9c <__generate_code_for_unary_boolean_expression@@Base+0x1d8>
   18bbc:	add	r1, pc, r1
   18bc0:	strd	r2, [r1, #32]
   18bc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18bc8:	ldr	r0, [r3, #4]
   18bcc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   18bd0:	ldr	r1, [pc, #200]	; 18ca0 <__generate_code_for_unary_boolean_expression@@Base+0x1dc>
   18bd4:	add	r1, pc, r1
   18bd8:	bl	1199c <fprintf@plt>
   18bdc:	b	18c48 <__generate_code_for_unary_boolean_expression@@Base+0x184>
   18be0:	ldr	r3, [pc, #188]	; 18ca4 <__generate_code_for_unary_boolean_expression@@Base+0x1e0>
   18be4:	add	r3, pc, r3
   18be8:	ldrd	r2, [r3, #24]
   18bec:	adds	r2, r2, #1
   18bf0:	adc	r3, r3, #0
   18bf4:	ldr	r1, [pc, #172]	; 18ca8 <__generate_code_for_unary_boolean_expression@@Base+0x1e4>
   18bf8:	add	r1, pc, r1
   18bfc:	strd	r2, [r1, #24]
   18c00:	ldr	r3, [pc, #164]	; 18cac <__generate_code_for_unary_boolean_expression@@Base+0x1e8>
   18c04:	ldr	r3, [r4, r3]
   18c08:	ldr	r3, [r3]
   18c0c:	mov	r2, #31
   18c10:	mov	r1, #1
   18c14:	ldr	r0, [pc, #148]	; 18cb0 <__generate_code_for_unary_boolean_expression@@Base+0x1ec>
   18c18:	add	r0, pc, r0
   18c1c:	bl	11900 <fwrite@plt>
   18c20:	ldr	r3, [pc, #140]	; 18cb4 <__generate_code_for_unary_boolean_expression@@Base+0x1f0>
   18c24:	add	r3, pc, r3
   18c28:	ldrd	r2, [r3, #40]	; 0x28
   18c2c:	adds	r2, r2, #1
   18c30:	adc	r3, r3, #0
   18c34:	ldr	r1, [pc, #124]	; 18cb8 <__generate_code_for_unary_boolean_expression@@Base+0x1f4>
   18c38:	add	r1, pc, r1
   18c3c:	strd	r2, [r1, #40]	; 0x28
   18c40:	mov	r0, #1
   18c44:	bl	11978 <exit@plt>
   18c48:	ldr	r3, [pc, #108]	; 18cbc <__generate_code_for_unary_boolean_expression@@Base+0x1f8>
   18c4c:	add	r3, pc, r3
   18c50:	ldrd	r2, [r3, #48]	; 0x30
   18c54:	adds	r2, r2, #1
   18c58:	adc	r3, r3, #0
   18c5c:	ldr	r1, [pc, #92]	; 18cc0 <__generate_code_for_unary_boolean_expression@@Base+0x1fc>
   18c60:	add	r1, pc, r1
   18c64:	strd	r2, [r1, #48]	; 0x30
   18c68:	nop			; (mov r0, r0)
   18c6c:	sub	sp, fp, #8
   18c70:	pop	{r4, fp, pc}
   18c74:	andeq	r3, r1, r8, lsl r5
   18c78:			; <UNDEFINED> instruction: 0x00014ab0
   18c7c:	muleq	r1, ip, sl
   18c80:	ldrdeq	r2, [r0], -r0
   18c84:	andeq	r4, r1, r8, ror #20
   18c88:	andeq	r4, r1, r4, asr sl
   18c8c:	andeq	r2, r0, r0, ror #21
   18c90:	andeq	r4, r1, ip, lsr #20
   18c94:	andeq	r4, r1, r8, lsl sl
   18c98:	strdeq	r4, [r1], -r0
   18c9c:	ldrdeq	r4, [r1], -ip
   18ca0:	muleq	r0, ip, sl
   18ca4:			; <UNDEFINED> instruction: 0x000149b4
   18ca8:	andeq	r4, r1, r0, lsr #19
   18cac:	andeq	r0, r0, r4, lsr #1
   18cb0:			; <UNDEFINED> instruction: 0x00002abc
   18cb4:	andeq	r4, r1, r4, ror r9
   18cb8:	andeq	r4, r1, r0, ror #18
   18cbc:	andeq	r4, r1, ip, asr #18
   18cc0:	andeq	r4, r1, r8, lsr r9

00018cc4 <__generate_code_for_body@@Base>:
   18cc4:	push	{r4, fp, lr}
   18cc8:	add	fp, sp, #8
   18ccc:	sub	sp, sp, #20
   18cd0:	str	r0, [fp, #-24]	; 0xffffffe8
   18cd4:	str	r1, [fp, #-28]	; 0xffffffe4
   18cd8:	ldr	r4, [pc, #388]	; 18e64 <__generate_code_for_body@@Base+0x1a0>
   18cdc:	add	r4, pc, r4
   18ce0:	mov	r3, #0
   18ce4:	str	r3, [fp, #-16]
   18ce8:	b	18e2c <__generate_code_for_body@@Base+0x168>
   18cec:	ldr	r3, [pc, #372]	; 18e68 <__generate_code_for_body@@Base+0x1a4>
   18cf0:	add	r3, pc, r3
   18cf4:	ldrd	r2, [r3, #40]	; 0x28
   18cf8:	adds	r2, r2, #1
   18cfc:	adc	r3, r3, #0
   18d00:	ldr	r1, [pc, #356]	; 18e6c <__generate_code_for_body@@Base+0x1a8>
   18d04:	add	r1, pc, r1
   18d08:	strd	r2, [r1, #40]	; 0x28
   18d0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d10:	str	r3, [fp, #-16]
   18d14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18d18:	ldr	r3, [r3, #4]
   18d1c:	str	r3, [fp, #-28]	; 0xffffffe4
   18d20:	ldr	r3, [fp, #-16]
   18d24:	ldr	r3, [r3]
   18d28:	cmp	r3, #3
   18d2c:	beq	18d3c <__generate_code_for_body@@Base+0x78>
   18d30:	cmp	r3, #4
   18d34:	beq	18d90 <__generate_code_for_body@@Base+0xcc>
   18d38:	b	18de4 <__generate_code_for_body@@Base+0x120>
   18d3c:	ldr	r3, [pc, #300]	; 18e70 <__generate_code_for_body@@Base+0x1ac>
   18d40:	add	r3, pc, r3
   18d44:	ldrd	r2, [r3]
   18d48:	adds	r2, r2, #1
   18d4c:	adc	r3, r3, #0
   18d50:	ldr	r1, [pc, #284]	; 18e74 <__generate_code_for_body@@Base+0x1b0>
   18d54:	add	r1, pc, r1
   18d58:	strd	r2, [r1]
   18d5c:	ldr	r1, [fp, #-16]
   18d60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18d64:	bl	181ac <__generate_code_for_return@@Base>
   18d68:	nop			; (mov r0, r0)
   18d6c:	ldr	r3, [pc, #260]	; 18e78 <__generate_code_for_body@@Base+0x1b4>
   18d70:	add	r3, pc, r3
   18d74:	ldrd	r2, [r3, #32]
   18d78:	adds	r2, r2, #1
   18d7c:	adc	r3, r3, #0
   18d80:	ldr	r1, [pc, #244]	; 18e7c <__generate_code_for_body@@Base+0x1b8>
   18d84:	add	r1, pc, r1
   18d88:	strd	r2, [r1, #32]
   18d8c:	b	18e2c <__generate_code_for_body@@Base+0x168>
   18d90:	ldr	r3, [pc, #232]	; 18e80 <__generate_code_for_body@@Base+0x1bc>
   18d94:	add	r3, pc, r3
   18d98:	ldrd	r2, [r3, #8]
   18d9c:	adds	r2, r2, #1
   18da0:	adc	r3, r3, #0
   18da4:	ldr	r1, [pc, #216]	; 18e84 <__generate_code_for_body@@Base+0x1c0>
   18da8:	add	r1, pc, r1
   18dac:	strd	r2, [r1, #8]
   18db0:	ldr	r1, [fp, #-16]
   18db4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18db8:	bl	18010 <__generate_code_for_if@@Base>
   18dbc:	nop			; (mov r0, r0)
   18dc0:	ldr	r3, [pc, #192]	; 18e88 <__generate_code_for_body@@Base+0x1c4>
   18dc4:	add	r3, pc, r3
   18dc8:	ldrd	r2, [r3, #16]
   18dcc:	adds	r2, r2, #1
   18dd0:	adc	r3, r3, #0
   18dd4:	ldr	r1, [pc, #176]	; 18e8c <__generate_code_for_body@@Base+0x1c8>
   18dd8:	add	r1, pc, r1
   18ddc:	strd	r2, [r1, #16]
   18de0:	b	18e2c <__generate_code_for_body@@Base+0x168>
   18de4:	ldr	r3, [pc, #164]	; 18e90 <__generate_code_for_body@@Base+0x1cc>
   18de8:	ldr	r3, [r4, r3]
   18dec:	ldr	r3, [r3]
   18df0:	mov	r2, #52	; 0x34
   18df4:	mov	r1, #1
   18df8:	ldr	r0, [pc, #148]	; 18e94 <__generate_code_for_body@@Base+0x1d0>
   18dfc:	add	r0, pc, r0
   18e00:	bl	11900 <fwrite@plt>
   18e04:	ldr	r3, [pc, #140]	; 18e98 <__generate_code_for_body@@Base+0x1d4>
   18e08:	add	r3, pc, r3
   18e0c:	ldrd	r2, [r3, #24]
   18e10:	adds	r2, r2, #1
   18e14:	adc	r3, r3, #0
   18e18:	ldr	r1, [pc, #124]	; 18e9c <__generate_code_for_body@@Base+0x1d8>
   18e1c:	add	r1, pc, r1
   18e20:	strd	r2, [r1, #24]
   18e24:	mov	r0, #1
   18e28:	bl	11978 <exit@plt>
   18e2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18e30:	cmp	r3, #0
   18e34:	bne	18cec <__generate_code_for_body@@Base+0x28>
   18e38:	ldr	r3, [pc, #96]	; 18ea0 <__generate_code_for_body@@Base+0x1dc>
   18e3c:	add	r3, pc, r3
   18e40:	ldrd	r2, [r3, #48]	; 0x30
   18e44:	adds	r2, r2, #1
   18e48:	adc	r3, r3, #0
   18e4c:	ldr	r1, [pc, #80]	; 18ea4 <__generate_code_for_body@@Base+0x1e0>
   18e50:	add	r1, pc, r1
   18e54:	strd	r2, [r1, #48]	; 0x30
   18e58:	nop			; (mov r0, r0)
   18e5c:	sub	sp, fp, #8
   18e60:	pop	{r4, fp, pc}
   18e64:	andeq	r3, r1, ip, lsl r3
   18e68:	andeq	r4, r1, r0, ror r8
   18e6c:	andeq	r4, r1, ip, asr r8
   18e70:	andeq	r4, r1, r0, lsr #16
   18e74:	andeq	r4, r1, ip, lsl #16
   18e78:	strdeq	r4, [r1], -r0
   18e7c:	ldrdeq	r4, [r1], -ip
   18e80:	andeq	r4, r1, ip, asr #15
   18e84:			; <UNDEFINED> instruction: 0x000147b8
   18e88:	muleq	r1, ip, r7
   18e8c:	andeq	r4, r1, r8, lsl #15
   18e90:	andeq	r0, r0, r4, lsr #1
   18e94:	andeq	r2, r0, r4, lsl #18
   18e98:	andeq	r4, r1, r8, asr r7
   18e9c:	andeq	r4, r1, r4, asr #14
   18ea0:	andeq	r4, r1, r4, lsr #14
   18ea4:	andeq	r4, r1, r0, lsl r7
   18ea8:	push	{fp, lr}
   18eac:	add	fp, sp, #4
   18eb0:	ldr	r3, [pc, #12]	; 18ec4 <__generate_code_for_body@@Base+0x200>
   18eb4:	add	r3, pc, r3
   18eb8:	mov	r0, r3
   18ebc:	bl	1adfc <__gcov_sort_n_vals@@Base+0x458>
   18ec0:	pop	{fp, pc}
   18ec4:			; <UNDEFINED> instruction: 0x00013bb0
   18ec8:	b	1a0f4 <__generate_code_for_body@@Base+0x1430>
   18ecc:	push	{r4, r5, r6, lr}
   18ed0:	subs	r5, r1, #0
   18ed4:	popeq	{r4, r5, r6, pc}
   18ed8:	mov	r4, r0
   18edc:	bl	18ec8 <__generate_code_for_body@@Base+0x204>
   18ee0:	ldrd	r2, [r4]
   18ee4:	adds	r0, r0, r2
   18ee8:	adc	r1, r1, r3
   18eec:	subs	r5, r5, #1
   18ef0:	strd	r0, [r4], #8
   18ef4:	bne	18edc <__generate_code_for_body@@Base+0x218>
   18ef8:	pop	{r4, r5, r6, pc}
   18efc:	ldr	r3, [pc, #20]	; 18f18 <__generate_code_for_body@@Base+0x254>
   18f00:	ldr	r2, [pc, #20]	; 18f1c <__generate_code_for_body@@Base+0x258>
   18f04:	add	r3, pc, r3
   18f08:	ldr	r3, [r3, r2]
   18f0c:	ldmib	r3, {r0, r3}
   18f10:	add	r0, r0, r3
   18f14:	bx	lr
   18f18:	strdeq	r3, [r1], -r4
   18f1c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18f20:	ldr	r3, [pc, #28]	; 18f44 <__generate_code_for_body@@Base+0x280>
   18f24:	ldr	r2, [pc, #28]	; 18f48 <__generate_code_for_body@@Base+0x284>
   18f28:	add	r3, pc, r3
   18f2c:	ldr	r3, [r3, r2]
   18f30:	ldr	r2, [r3]
   18f34:	cmp	r2, #0
   18f38:	ldrne	r0, [r3, #20]
   18f3c:	moveq	r0, #1
   18f40:	bx	lr
   18f44:	ldrdeq	r3, [r1], -r0
   18f48:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18f4c:	bx	lr
   18f50:	ldr	ip, [pc, #32]	; 18f78 <__generate_code_for_body@@Base+0x2b4>
   18f54:	mov	r3, #32
   18f58:	teq	r0, r1
   18f5c:	movmi	r2, ip
   18f60:	movpl	r2, #0
   18f64:	subs	r3, r3, #1
   18f68:	lsl	r1, r1, #1
   18f6c:	eor	r0, r2, r0, lsl #1
   18f70:	bne	18f58 <__generate_code_for_body@@Base+0x294>
   18f74:	bx	lr
   18f78:	strbeq	r1, [r1], #3511	; 0xdb7
   18f7c:	ldr	r3, [pc, #76]	; 18fd0 <__generate_code_for_body@@Base+0x30c>
   18f80:	ldr	r1, [pc, #76]	; 18fd4 <__generate_code_for_body@@Base+0x310>
   18f84:	add	r3, pc, r3
   18f88:	push	{r4, r5, r6, lr}
   18f8c:	mov	r5, r0
   18f90:	ldr	r4, [r3, r1]
   18f94:	lsl	r1, r0, #2
   18f98:	mov	r0, r4
   18f9c:	mov	r2, #1
   18fa0:	ldr	r3, [r0], #28
   18fa4:	bl	11900 <fwrite@plt>
   18fa8:	cmp	r0, #1
   18fac:	movne	r3, #1
   18fb0:	ldr	r0, [r4, #8]
   18fb4:	strne	r3, [r4, #20]
   18fb8:	ldr	r3, [r4, #4]
   18fbc:	sub	r0, r0, r5
   18fc0:	add	r3, r3, r5
   18fc4:	str	r3, [r4, #4]
   18fc8:	str	r0, [r4, #8]
   18fcc:	pop	{r4, r5, r6, pc}
   18fd0:	andeq	r3, r1, r4, ror r0
   18fd4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   18fd8:	ldr	r3, [pc, #76]	; 1902c <__generate_code_for_body@@Base+0x368>
   18fdc:	ldr	r2, [pc, #76]	; 19030 <__generate_code_for_body@@Base+0x36c>
   18fe0:	add	r3, pc, r3
   18fe4:	push	{r4, r5, r6, lr}
   18fe8:	mov	r5, r0
   18fec:	ldr	r4, [r3, r2]
   18ff0:	ldr	r3, [r4, #8]
   18ff4:	cmp	r3, #1024	; 0x400
   18ff8:	bcc	19018 <__generate_code_for_body@@Base+0x354>
   18ffc:	mov	r0, #1024	; 0x400
   19000:	bl	18f7c <__generate_code_for_body@@Base+0x2b8>
   19004:	ldr	r3, [r4, #8]
   19008:	cmp	r3, #0
   1900c:	addne	r2, r4, #4096	; 0x1000
   19010:	ldrne	r2, [r2, #28]
   19014:	strne	r2, [r4, #28]
   19018:	add	r0, r3, #7
   1901c:	add	r3, r5, r3
   19020:	str	r3, [r4, #8]
   19024:	add	r0, r4, r0, lsl #2
   19028:	pop	{r4, r5, r6, pc}
   1902c:	andeq	r3, r1, r8, lsl r0
   19030:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   19034:	ldr	r3, [pc, #172]	; 190e8 <__generate_code_for_body@@Base+0x424>
   19038:	ldr	r2, [pc, #172]	; 190ec <__generate_code_for_body@@Base+0x428>
   1903c:	add	r3, pc, r3
   19040:	push	{r4, r5, r6, lr}
   19044:	mov	r5, r0
   19048:	ldr	r4, [r3, r2]
   1904c:	ldr	r3, [r4, #8]
   19050:	ldr	ip, [r4, #12]
   19054:	sub	ip, ip, r3
   19058:	cmp	ip, r0
   1905c:	bcs	190b8 <__generate_code_for_body@@Base+0x3f4>
   19060:	ldr	r2, [r4, #4]
   19064:	cmp	ip, #0
   19068:	add	r2, r2, r3
   1906c:	str	r2, [r4, #4]
   19070:	addne	r2, r4, #28
   19074:	mov	r0, r4
   19078:	ldrne	r3, [r2, r3, lsl #2]
   1907c:	mov	r6, #0
   19080:	strne	r3, [r4, #28]
   19084:	ldr	r3, [r0], #28
   19088:	mov	r2, #4096	; 0x1000
   1908c:	add	r0, r0, ip, lsl #2
   19090:	mov	r1, #1
   19094:	str	ip, [r4, #12]
   19098:	str	r6, [r4, #8]
   1909c:	bl	11918 <fread@plt>
   190a0:	ldr	r3, [r4, #12]
   190a4:	add	r0, r3, r0, lsr #2
   190a8:	cmp	r5, r0
   190ac:	str	r0, [r4, #12]
   190b0:	bhi	190cc <__generate_code_for_body@@Base+0x408>
   190b4:	ldr	r3, [r4, #8]
   190b8:	add	r0, r3, #7
   190bc:	add	r5, r5, r3
   190c0:	add	r0, r4, r0, lsl #2
   190c4:	str	r5, [r4, #8]
   190c8:	pop	{r4, r5, r6, pc}
   190cc:	ldr	r3, [r4, #16]
   190d0:	str	r6, [r4, #12]
   190d4:	add	r5, r5, r3
   190d8:	sub	r5, r5, r0
   190dc:	str	r5, [r4, #16]
   190e0:	mov	r0, r6
   190e4:	pop	{r4, r5, r6, pc}
   190e8:			; <UNDEFINED> instruction: 0x00012fbc
   190ec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   190f0:	push	{r0, r1, r2, r3}
   190f4:	ldr	r3, [pc, #52]	; 19130 <__generate_code_for_body@@Base+0x46c>
   190f8:	ldr	r1, [pc, #52]	; 19134 <__generate_code_for_body@@Base+0x470>
   190fc:	push	{lr}		; (str lr, [sp, #-4]!)
   19100:	add	r3, pc, r3
   19104:	sub	sp, sp, #12
   19108:	add	r2, sp, #20
   1910c:	str	r2, [sp, #4]
   19110:	ldr	r0, [r3, r1]
   19114:	ldr	r1, [sp, #16]
   19118:	ldr	r0, [r0]
   1911c:	bl	11a14 <vfprintf@plt>
   19120:	add	sp, sp, #12
   19124:	pop	{lr}		; (ldr lr, [sp], #4)
   19128:	add	sp, sp, #16
   1912c:	bx	lr
   19130:	strdeq	r2, [r1], -r8
   19134:	andeq	r0, r0, r4, lsr #1
   19138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1913c:	subs	r6, r1, #0
   19140:	beq	1919c <__generate_code_for_body@@Base+0x4d8>
   19144:	cmp	r2, #0
   19148:	movne	r3, #0
   1914c:	mov	r7, r2
   19150:	ldr	r8, [r6]
   19154:	addne	r5, r0, #12
   19158:	movne	r4, r3
   1915c:	beq	1918c <__generate_code_for_body@@Base+0x4c8>
   19160:	ldr	r0, [r5, #4]!
   19164:	add	r2, r6, r3, lsl #3
   19168:	cmp	r0, #0
   1916c:	add	r9, r3, #1
   19170:	add	r4, r4, #1
   19174:	beq	19184 <__generate_code_for_body@@Base+0x4c0>
   19178:	ldr	r0, [r2, #28]
   1917c:	bl	118dc <free@plt>
   19180:	mov	r3, r9
   19184:	cmp	r7, r4
   19188:	bne	19160 <__generate_code_for_body@@Base+0x49c>
   1918c:	mov	r0, r6
   19190:	bl	118dc <free@plt>
   19194:	mov	r0, r8
   19198:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1919c:	mov	r8, r6
   191a0:	b	19194 <__generate_code_for_body@@Base+0x4d0>
   191a4:	push	{r4, r5}
   191a8:	mov	r4, r0
   191ac:	mov	r5, r1
   191b0:	orrs	r3, r4, r5
   191b4:	beq	191f8 <__generate_code_for_body@@Base+0x534>
   191b8:	cmp	r1, #0
   191bc:	clzeq	r1, r0
   191c0:	addeq	r1, r1, #32
   191c4:	clzne	r1, r1
   191c8:	rsb	r3, r1, #63	; 0x3f
   191cc:	cmp	r3, #1
   191d0:	bls	191f8 <__generate_code_for_body@@Base+0x534>
   191d4:	rsb	r2, r1, #61	; 0x3d
   191d8:	rsb	r0, r2, #32
   191dc:	lsr	r3, r4, r2
   191e0:	sub	r2, r2, #32
   191e4:	orr	r3, r3, r5, lsl r0
   191e8:	orr	r3, r3, r5, lsr r2
   191ec:	rsb	r1, r1, #1073741886	; 0x4000003e
   191f0:	and	r0, r3, #3
   191f4:	add	r0, r0, r1, lsl #2
   191f8:	pop	{r4, r5}
   191fc:	bx	lr
   19200:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19204:	mov	r1, r3
   19208:	mov	sl, r0
   1920c:	mov	r0, r2
   19210:	mov	r8, r2
   19214:	mov	r9, r3
   19218:	bl	191a4 <__generate_code_for_body@@Base+0x4e0>
   1921c:	add	r0, r0, r0, lsl #1
   19220:	lsl	r0, r0, #3
   19224:	add	r3, sl, r0
   19228:	ldr	r2, [sl, r0]
   1922c:	ldrd	r4, [r3, #16]
   19230:	ldrd	r6, [r3, #8]
   19234:	add	r2, r2, #1
   19238:	adds	r4, r4, r8
   1923c:	adc	r5, r5, r9
   19240:	cmp	r8, r6
   19244:	sbcs	r1, r9, r7
   19248:	str	r2, [sl, r0]
   1924c:	strd	r4, [r3, #16]
   19250:	strdlt	r8, [r3, #8]
   19254:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19258:	ldr	r3, [r1, #8]
   1925c:	cmp	r3, #0
   19260:	bxeq	lr
   19264:	push	{r4, r5, r6, r7, r8, lr}
   19268:	add	r2, r1, #6016	; 0x1780
   1926c:	mov	r8, r1
   19270:	mov	r7, r0
   19274:	ldrd	r0, [r1, #24]
   19278:	add	r2, r2, #32
   1927c:	mov	r3, r8
   19280:	mov	ip, #0
   19284:	mov	r4, #0
   19288:	mov	r5, #0
   1928c:	str	ip, [r3, #40]	; 0x28
   19290:	strd	r0, [r3, #48]	; 0x30
   19294:	strd	r4, [r3, #56]	; 0x38
   19298:	add	r3, r3, #24
   1929c:	cmp	r2, r3
   192a0:	bne	1928c <__generate_code_for_body@@Base+0x5c8>
   192a4:	cmp	r7, #0
   192a8:	popeq	{r4, r5, r6, r7, r8, pc}
   192ac:	add	r8, r8, #40	; 0x28
   192b0:	ldr	r3, [r7, #16]
   192b4:	cmp	r3, #0
   192b8:	beq	19340 <__generate_code_for_body@@Base+0x67c>
   192bc:	ldr	r2, [r7, #56]	; 0x38
   192c0:	cmp	r2, #0
   192c4:	beq	19340 <__generate_code_for_body@@Base+0x67c>
   192c8:	mov	r6, #0
   192cc:	b	192dc <__generate_code_for_body@@Base+0x618>
   192d0:	add	r6, r6, #1
   192d4:	cmp	r2, r6
   192d8:	beq	19340 <__generate_code_for_body@@Base+0x67c>
   192dc:	ldr	r3, [r7, #60]	; 0x3c
   192e0:	ldr	r4, [r3, r6, lsl #2]
   192e4:	cmp	r4, #0
   192e8:	beq	192d0 <__generate_code_for_body@@Base+0x60c>
   192ec:	ldr	r3, [r4]
   192f0:	cmp	r3, r7
   192f4:	bne	192d0 <__generate_code_for_body@@Base+0x60c>
   192f8:	ldr	r3, [r4, #16]
   192fc:	cmp	r3, #0
   19300:	beq	192d0 <__generate_code_for_body@@Base+0x60c>
   19304:	mov	r5, #0
   19308:	ldr	r2, [r4, #20]
   1930c:	lsl	r3, r5, #3
   19310:	add	r2, r2, r3
   19314:	mov	r0, r8
   19318:	ldrd	r2, [r2]
   1931c:	bl	19200 <__generate_code_for_body@@Base+0x53c>
   19320:	ldr	r3, [r4, #16]
   19324:	add	r5, r5, #1
   19328:	cmp	r3, r5
   1932c:	bhi	19308 <__generate_code_for_body@@Base+0x644>
   19330:	ldr	r2, [r7, #56]	; 0x38
   19334:	add	r6, r6, #1
   19338:	cmp	r2, r6
   1933c:	bne	192dc <__generate_code_for_body@@Base+0x618>
   19340:	ldr	r7, [r7, #4]
   19344:	cmp	r7, #0
   19348:	bne	192b0 <__generate_code_for_body@@Base+0x5ec>
   1934c:	pop	{r4, r5, r6, r7, r8, pc}
   19350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19354:	sub	sp, sp, #12
   19358:	mov	r5, r0
   1935c:	str	r0, [sp, #4]
   19360:	mov	r6, r2
   19364:	str	r2, [sp]
   19368:	mov	r0, r1
   1936c:	mov	r4, r1
   19370:	ldr	r2, [pc, #344]	; 194d0 <__generate_code_for_body@@Base+0x80c>
   19374:	mov	r1, #0
   19378:	bl	119d8 <memset@plt>
   1937c:	subs	r3, r5, #0
   19380:	mov	r5, #0
   19384:	str	r5, [r6]
   19388:	beq	194b4 <__generate_code_for_body@@Base+0x7f0>
   1938c:	mov	r7, r5
   19390:	mov	r9, r5
   19394:	mov	r8, r3
   19398:	ldr	r0, [r8, #12]
   1939c:	bl	11984 <strlen@plt>
   193a0:	cmp	r5, r0
   193a4:	ldrcc	r3, [sp]
   193a8:	strcc	r0, [r3]
   193ac:	mov	r0, r7
   193b0:	ldr	r1, [r8, #8]
   193b4:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   193b8:	ldr	r6, [r8, #56]	; 0x38
   193bc:	mov	r1, r6
   193c0:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   193c4:	cmp	r6, #0
   193c8:	mov	r7, r0
   193cc:	beq	1949c <__generate_code_for_body@@Base+0x7d8>
   193d0:	ldr	r5, [r8, #60]	; 0x3c
   193d4:	add	r6, r5, r6, lsl #2
   193d8:	b	193fc <__generate_code_for_body@@Base+0x738>
   193dc:	mov	r0, r7
   193e0:	mov	r1, r9
   193e4:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   193e8:	mov	r1, r9
   193ec:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   193f0:	mov	r7, r0
   193f4:	cmp	r6, r5
   193f8:	beq	1949c <__generate_code_for_body@@Base+0x7d8>
   193fc:	ldr	fp, [r5], #4
   19400:	cmp	fp, #0
   19404:	beq	193dc <__generate_code_for_body@@Base+0x718>
   19408:	ldr	r3, [fp]
   1940c:	cmp	r3, r8
   19410:	bne	193dc <__generate_code_for_body@@Base+0x718>
   19414:	mov	r0, r7
   19418:	ldr	r1, [fp, #12]
   1941c:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   19420:	ldr	r1, [fp, #8]
   19424:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   19428:	ldr	r3, [r8, #16]
   1942c:	cmp	r3, #0
   19430:	mov	r7, r0
   19434:	beq	193f4 <__generate_code_for_body@@Base+0x730>
   19438:	ldr	sl, [fp, #16]
   1943c:	ldr	r3, [r4, #8]
   19440:	mov	r1, sl
   19444:	add	r3, r3, sl
   19448:	str	r3, [r4, #8]
   1944c:	bl	18f50 <__generate_code_for_body@@Base+0x28c>
   19450:	cmp	sl, #0
   19454:	mov	r7, r0
   19458:	beq	193f4 <__generate_code_for_body@@Base+0x730>
   1945c:	ldr	ip, [fp, #20]
   19460:	ldrd	r2, [r4, #16]
   19464:	add	lr, ip, sl, lsl #3
   19468:	ldrd	r0, [ip]
   1946c:	ldrd	sl, [r4, #24]
   19470:	adds	r2, r2, r0
   19474:	adc	r3, r3, r1
   19478:	strd	r2, [r4, #16]
   1947c:	ldrd	r0, [ip], #8
   19480:	cmp	sl, r0
   19484:	sbcs	sl, fp, r1
   19488:	strdlt	r0, [r4, #24]
   1948c:	cmp	lr, ip
   19490:	bne	19468 <__generate_code_for_body@@Base+0x7a4>
   19494:	cmp	r6, r5
   19498:	bne	193fc <__generate_code_for_body@@Base+0x738>
   1949c:	ldr	r8, [r8, #4]
   194a0:	cmp	r8, #0
   194a4:	beq	194b8 <__generate_code_for_body@@Base+0x7f4>
   194a8:	ldr	r3, [sp]
   194ac:	ldr	r5, [r3]
   194b0:	b	19398 <__generate_code_for_body@@Base+0x6d4>
   194b4:	ldr	r7, [sp, #4]
   194b8:	ldr	r0, [sp, #4]
   194bc:	mov	r1, r4
   194c0:	bl	19258 <__generate_code_for_body@@Base+0x594>
   194c4:	mov	r0, r7
   194c8:	add	sp, sp, #12
   194cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194d0:	andeq	r1, r0, r8, asr #15
   194d4:	push	{r4, r5, r6, lr}
   194d8:	mov	r4, r0
   194dc:	ldr	r0, [pc, #172]	; 19590 <__generate_code_for_body@@Base+0x8cc>
   194e0:	add	r0, pc, r0
   194e4:	bl	11924 <getenv@plt>
   194e8:	subs	r3, r0, #0
   194ec:	beq	194f8 <__generate_code_for_body@@Base+0x834>
   194f0:	bl	11a2c <atoi@plt>
   194f4:	bic	r3, r0, r0, asr #31
   194f8:	ldr	r0, [pc, #148]	; 19594 <__generate_code_for_body@@Base+0x8d0>
   194fc:	str	r3, [r4, #8]
   19500:	add	r0, pc, r0
   19504:	bl	11924 <getenv@plt>
   19508:	subs	r6, r0, #0
   1950c:	beq	19560 <__generate_code_for_body@@Base+0x89c>
   19510:	bl	11984 <strlen@plt>
   19514:	subs	r5, r0, #0
   19518:	beq	19560 <__generate_code_for_body@@Base+0x89c>
   1951c:	sub	r3, r5, #1
   19520:	ldrb	r2, [r6, r3]
   19524:	cmp	r2, #47	; 0x2f
   19528:	beq	19554 <__generate_code_for_body@@Base+0x890>
   1952c:	ldr	r0, [r4, #4]
   19530:	str	r5, [r4, #12]
   19534:	add	r0, r0, #2
   19538:	add	r0, r0, r5
   1953c:	bl	11930 <malloc@plt>
   19540:	mov	r2, r5
   19544:	mov	r1, r6
   19548:	str	r0, [r4]
   1954c:	pop	{r4, r5, r6, lr}
   19550:	b	118e8 <memcpy@plt>
   19554:	cmp	r3, #0
   19558:	movne	r5, r3
   1955c:	bne	1952c <__generate_code_for_body@@Base+0x868>
   19560:	ldr	r3, [r4, #8]
   19564:	cmp	r3, #0
   19568:	ldrne	r6, [pc, #40]	; 19598 <__generate_code_for_body@@Base+0x8d4>
   1956c:	movne	r5, #1
   19570:	addne	r6, pc, r6
   19574:	bne	1952c <__generate_code_for_body@@Base+0x868>
   19578:	ldr	r0, [r4, #4]
   1957c:	str	r3, [r4, #12]
   19580:	add	r0, r0, #2
   19584:	bl	11930 <malloc@plt>
   19588:	str	r0, [r4]
   1958c:	pop	{r4, r5, r6, pc}
   19590:	andeq	r2, r0, r8, asr #5
   19594:			; <UNDEFINED> instruction: 0x000022bc
   19598:	andeq	r2, r0, r4, lsr r2
   1959c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195a0:	sub	sp, sp, #6080	; 0x17c0
   195a4:	sub	sp, sp, #44	; 0x2c
   195a8:	add	r3, sp, #72	; 0x48
   195ac:	mov	r4, r0
   195b0:	str	r0, [sp, #64]	; 0x40
   195b4:	str	r1, [sp, #60]	; 0x3c
   195b8:	mov	r0, r3
   195bc:	ldr	r2, [pc, #1068]	; 199f0 <__generate_code_for_body@@Base+0xd2c>
   195c0:	mov	r1, #0
   195c4:	str	r3, [sp, #68]	; 0x44
   195c8:	bl	119d8 <memset@plt>
   195cc:	add	r3, r4, #6016	; 0x1780
   195d0:	add	r3, r3, #8
   195d4:	add	r2, sp, #2016	; 0x7e0
   195d8:	mov	sl, #251	; 0xfb
   195dc:	add	r2, r2, #8
   195e0:	mov	fp, #0
   195e4:	str	r3, [sp, #56]	; 0x38
   195e8:	add	r3, sp, #72	; 0x48
   195ec:	str	r2, [sp, #44]	; 0x2c
   195f0:	str	r3, [sp, #48]	; 0x30
   195f4:	mov	r2, #0
   195f8:	mov	r3, #0
   195fc:	mov	r5, sl
   19600:	mov	r0, fp
   19604:	strd	r2, [sp, #24]
   19608:	str	sl, [sp, #52]	; 0x34
   1960c:	ldr	r9, [sp, #56]	; 0x38
   19610:	str	r5, [sp, #40]	; 0x28
   19614:	ldr	sl, [sp, #60]	; 0x3c
   19618:	ldrd	r2, [r9, #16]
   1961c:	ldr	r4, [r9]
   19620:	str	r4, [sp, #4]
   19624:	strd	r2, [sp, #8]
   19628:	ldr	r3, [sp, #4]
   1962c:	cmp	r3, #0
   19630:	beq	198dc <__generate_code_for_body@@Base+0xc18>
   19634:	cmp	fp, #0
   19638:	bne	197c0 <__generate_code_for_body@@Base+0xafc>
   1963c:	ldr	r5, [sp, #40]	; 0x28
   19640:	cmp	r5, #0
   19644:	blt	199cc <__generate_code_for_body@@Base+0xd08>
   19648:	add	ip, r5, r5, lsl #1
   1964c:	ldr	fp, [sl, ip, lsl #3]
   19650:	add	ip, sl, ip, lsl #3
   19654:	cmp	fp, #0
   19658:	bne	199c0 <__generate_code_for_body@@Base+0xcfc>
   1965c:	mov	r3, ip
   19660:	ldr	r4, [sp, #4]
   19664:	b	19678 <__generate_code_for_body@@Base+0x9b4>
   19668:	ldr	fp, [r3]
   1966c:	mov	ip, r3
   19670:	cmp	fp, #0
   19674:	bne	199b8 <__generate_code_for_body@@Base+0xcf4>
   19678:	subs	r5, r5, #1
   1967c:	sub	r3, r3, #24
   19680:	bcs	19668 <__generate_code_for_body@@Base+0x9a4>
   19684:	ldr	sl, [sp, #52]	; 0x34
   19688:	mov	r8, r0
   1968c:	mov	r5, r4
   19690:	lsl	r4, sl, #1
   19694:	ldr	r3, [sp, #44]	; 0x2c
   19698:	add	lr, r4, sl
   1969c:	sub	ip, r3, #1952	; 0x7a0
   196a0:	lsl	lr, lr, #3
   196a4:	add	ip, ip, lr
   196a8:	ldrd	r0, [sp, #8]
   196ac:	add	lr, r3, lr
   196b0:	ldrd	r2, [ip, #16]
   196b4:	ldr	r6, [lr, #-1952]	; 0xfffff860
   196b8:	adds	r0, r0, r2
   196bc:	adc	r1, r1, r3
   196c0:	mov	r2, r0
   196c4:	mov	r3, r1
   196c8:	ldrd	r0, [ip, #8]
   196cc:	strd	r2, [ip, #16]
   196d0:	ldr	r3, [sp, #56]	; 0x38
   196d4:	add	r5, r6, r5
   196d8:	str	r5, [lr, #-1952]	; 0xfffff860
   196dc:	orrs	lr, r0, r1
   196e0:	ldrd	r2, [r3, #8]
   196e4:	beq	196f4 <__generate_code_for_body@@Base+0xa30>
   196e8:	cmp	r2, r0
   196ec:	sbcs	r1, r3, r1
   196f0:	bge	19708 <__generate_code_for_body@@Base+0xa44>
   196f4:	ldr	r1, [sp, #44]	; 0x2c
   196f8:	add	r0, r4, sl
   196fc:	sub	r1, r1, #1952	; 0x7a0
   19700:	add	r1, r1, r0, lsl #3
   19704:	strd	r2, [r1, #8]
   19708:	add	lr, r4, sl
   1970c:	ldr	r3, [sp, #68]	; 0x44
   19710:	lsl	lr, lr, #3
   19714:	add	ip, r3, lr
   19718:	ldr	r3, [sp, #64]	; 0x40
   1971c:	add	lr, r3, lr
   19720:	b	19770 <__generate_code_for_body@@Base+0xaac>
   19724:	ldrd	r0, [ip, #-8]
   19728:	ldrd	r2, [lr, #-8]
   1972c:	ldrd	r4, [ip, #-16]
   19730:	adds	r6, r0, r2
   19734:	adc	r7, r1, r3
   19738:	ldr	r2, [lr, #-24]	; 0xffffffe8
   1973c:	ldr	r3, [ip, #-24]	; 0xffffffe8
   19740:	orrs	r1, r4, r5
   19744:	add	r3, r3, r2
   19748:	str	r3, [ip, #-24]	; 0xffffffe8
   1974c:	strd	r6, [ip, #-8]
   19750:	ldrd	r2, [lr, #-16]
   19754:	beq	19764 <__generate_code_for_body@@Base+0xaa0>
   19758:	cmp	r2, r4
   1975c:	sbcs	r1, r3, r5
   19760:	bge	19768 <__generate_code_for_body@@Base+0xaa4>
   19764:	strd	r2, [ip, #-16]
   19768:	sub	ip, ip, #24
   1976c:	sub	lr, lr, #24
   19770:	subs	sl, sl, #1
   19774:	bpl	19724 <__generate_code_for_body@@Base+0xa60>
   19778:	ldr	r3, [sp, #44]	; 0x2c
   1977c:	add	r0, r8, r8, lsl #1
   19780:	sub	r3, r3, #1952	; 0x7a0
   19784:	add	r3, r3, r0, lsl #3
   19788:	ldrd	r6, [sp, #24]
   1978c:	ldrd	r4, [r3, #16]
   19790:	ldr	r1, [sp, #68]	; 0x44
   19794:	ldr	r0, [sp, #64]	; 0x40
   19798:	adds	r6, r6, r4
   1979c:	adc	r7, r7, r5
   197a0:	mov	r4, r6
   197a4:	mov	r5, r7
   197a8:	ldr	r2, [pc, #576]	; 199f0 <__generate_code_for_body@@Base+0xd2c>
   197ac:	strd	r4, [r3, #16]
   197b0:	bl	118e8 <memcpy@plt>
   197b4:	add	sp, sp, #6080	; 0x17c0
   197b8:	add	sp, sp, #44	; 0x2c
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	ldr	r3, [sp, #40]	; 0x28
   197c4:	add	ip, r3, r3, lsl #1
   197c8:	add	ip, sl, ip, lsl #3
   197cc:	ldr	lr, [sp, #4]
   197d0:	cmp	fp, lr
   197d4:	bcc	1994c <__generate_code_for_body@@Base+0xc88>
   197d8:	ldrd	r2, [r9, #8]
   197dc:	ldrd	r0, [ip, #8]
   197e0:	adds	r4, r2, r0
   197e4:	adc	r5, r3, r1
   197e8:	cmp	fp, lr
   197ec:	strd	r4, [sp, #16]
   197f0:	bls	199dc <__generate_code_for_body@@Base+0xd18>
   197f4:	ldrd	r6, [sp, #24]
   197f8:	mov	r2, fp
   197fc:	mov	r3, #0
   19800:	umull	r0, r1, lr, r6
   19804:	mla	r1, lr, r7, r1
   19808:	bl	1aed8 <__gcov_sort_n_vals@@Base+0x534>
   1980c:	mov	r2, r0
   19810:	subs	r0, r6, r2
   19814:	mov	r3, r1
   19818:	sbc	r1, r7, r3
   1981c:	strd	r0, [sp, #24]
   19820:	ldr	r1, [sp, #4]
   19824:	mov	r0, #0
   19828:	sub	fp, fp, r1
   1982c:	mov	r8, r1
   19830:	mov	r1, #0
   19834:	str	r1, [sp, #4]
   19838:	mov	r1, #0
   1983c:	ldrd	r6, [sp, #8]
   19840:	strd	r0, [sp, #8]
   19844:	adds	r4, r2, r6
   19848:	adc	r5, r3, r7
   1984c:	ldrd	r0, [sp, #16]
   19850:	strd	r4, [sp, #32]
   19854:	bl	191a4 <__generate_code_for_body@@Base+0x4e0>
   19858:	ldr	r3, [sp, #48]	; 0x30
   1985c:	ldrd	r4, [sp, #32]
   19860:	add	r1, r0, r0, lsl #1
   19864:	lsl	r1, r1, #3
   19868:	add	ip, r3, r1
   1986c:	ldr	r3, [sp, #44]	; 0x2c
   19870:	ldrd	r6, [ip, #8]
   19874:	add	r1, r3, r1
   19878:	ldrd	r2, [ip, #16]
   1987c:	adds	r2, r2, r4
   19880:	adc	r3, r3, r5
   19884:	strd	r2, [sp, #32]
   19888:	ldrd	r2, [sp, #16]
   1988c:	cmp	r2, r6
   19890:	sbcs	lr, r3, r7
   19894:	movlt	lr, #1
   19898:	movge	lr, #0
   1989c:	orrs	r4, r6, r7
   198a0:	ldr	r4, [r1, #-1952]	; 0xfffff860
   198a4:	orreq	lr, lr, #1
   198a8:	add	r8, r4, r8
   198ac:	ldrd	r4, [sp, #32]
   198b0:	cmp	lr, #0
   198b4:	str	r8, [r1, #-1952]	; 0xfffff860
   198b8:	strd	r4, [ip, #16]
   198bc:	strdne	r2, [ip, #8]
   198c0:	cmp	fp, #0
   198c4:	ldreq	r3, [sp, #40]	; 0x28
   198c8:	subeq	r3, r3, #1
   198cc:	streq	r3, [sp, #40]	; 0x28
   198d0:	ldr	r3, [sp, #4]
   198d4:	cmp	r3, #0
   198d8:	bne	19634 <__generate_code_for_body@@Base+0x970>
   198dc:	ldr	r3, [sp, #52]	; 0x34
   198e0:	ldr	r5, [sp, #40]	; 0x28
   198e4:	sub	r3, r3, #1
   198e8:	str	r3, [sp, #52]	; 0x34
   198ec:	cmn	r3, #1
   198f0:	ldr	r3, [sp, #56]	; 0x38
   198f4:	sub	r3, r3, #24
   198f8:	str	r3, [sp, #56]	; 0x38
   198fc:	bne	1960c <__generate_code_for_body@@Base+0x948>
   19900:	cmp	fp, #0
   19904:	mov	r9, r5
   19908:	subne	r9, r5, #1
   1990c:	cmp	r9, #0
   19910:	mov	r8, r0
   19914:	blt	19778 <__generate_code_for_body@@Base+0xab4>
   19918:	ldr	r2, [sp, #60]	; 0x3c
   1991c:	add	r3, r9, r9, lsl #1
   19920:	sub	r0, r2, #24
   19924:	add	r1, r2, r3, lsl #3
   19928:	ldrd	r2, [sp, #24]
   1992c:	ldrd	r4, [r1, #16]
   19930:	sub	r1, r1, #24
   19934:	adds	r2, r2, r4
   19938:	adc	r3, r3, r5
   1993c:	cmp	r0, r1
   19940:	bne	1992c <__generate_code_for_body@@Base+0xc68>
   19944:	strd	r2, [sp, #24]
   19948:	b	19778 <__generate_code_for_body@@Base+0xab4>
   1994c:	ldrd	r2, [sp, #8]
   19950:	ldrd	r6, [ip, #8]
   19954:	ldrd	r4, [r9, #8]
   19958:	umull	r0, r1, fp, r2
   1995c:	ldr	r8, [sp, #4]
   19960:	adds	r4, r4, r6
   19964:	adc	r5, r5, r7
   19968:	mla	r1, fp, r3, r1
   1996c:	mov	r2, r8
   19970:	mov	r3, #0
   19974:	strd	r4, [sp, #16]
   19978:	bl	1aed8 <__gcov_sort_n_vals@@Base+0x534>
   1997c:	sub	r3, r8, fp
   19980:	str	r3, [sp, #4]
   19984:	ldrd	r2, [sp, #8]
   19988:	mov	r8, fp
   1998c:	mov	fp, #0
   19990:	subs	r2, r2, r0
   19994:	sbc	r3, r3, r1
   19998:	mov	r6, r0
   1999c:	mov	r7, r1
   199a0:	mov	r0, #0
   199a4:	mov	r1, #0
   199a8:	strd	r2, [sp, #8]
   199ac:	ldrd	r2, [sp, #24]
   199b0:	strd	r0, [sp, #24]
   199b4:	b	19844 <__generate_code_for_body@@Base+0xb80>
   199b8:	str	r5, [sp, #40]	; 0x28
   199bc:	str	r4, [sp, #4]
   199c0:	ldrd	r2, [ip, #16]
   199c4:	strd	r2, [sp, #24]
   199c8:	b	197cc <__generate_code_for_body@@Base+0xb08>
   199cc:	ldr	sl, [sp, #52]	; 0x34
   199d0:	mov	r8, r0
   199d4:	ldr	r5, [sp, #4]
   199d8:	b	19690 <__generate_code_for_body@@Base+0x9cc>
   199dc:	mov	r0, #0
   199e0:	mov	r1, #0
   199e4:	ldrd	r2, [sp, #24]
   199e8:	strd	r0, [sp, #24]
   199ec:	b	19820 <__generate_code_for_body@@Base+0xb5c>
   199f0:	andeq	r1, r0, r0, lsr #15
   199f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199f8:	ldrb	r4, [r0]
   199fc:	cmp	r4, #47	; 0x2f
   19a00:	addeq	r5, r0, #1
   19a04:	ldrbeq	r4, [r0, #1]
   19a08:	movne	r5, r0
   19a0c:	cmp	r4, #0
   19a10:	beq	19a64 <__generate_code_for_body@@Base+0xda0>
   19a14:	mov	r6, r0
   19a18:	ldr	sl, [pc, #144]	; 19ab0 <__generate_code_for_body@@Base+0xdec>
   19a1c:	mov	r8, #0
   19a20:	mov	r7, #47	; 0x2f
   19a24:	b	19a34 <__generate_code_for_body@@Base+0xd70>
   19a28:	ldrb	r4, [r5, #1]!
   19a2c:	cmp	r4, #0
   19a30:	beq	19a64 <__generate_code_for_body@@Base+0xda0>
   19a34:	cmp	r4, #47	; 0x2f
   19a38:	bne	19a28 <__generate_code_for_body@@Base+0xd64>
   19a3c:	strb	r8, [r5]
   19a40:	mov	r1, #0
   19a44:	mov	r0, r6
   19a48:	bl	119f0 <access@plt>
   19a4c:	cmn	r0, #1
   19a50:	beq	19a70 <__generate_code_for_body@@Base+0xdac>
   19a54:	strb	r7, [r5]
   19a58:	ldrb	r4, [r5, #1]!
   19a5c:	cmp	r4, #0
   19a60:	bne	19a34 <__generate_code_for_body@@Base+0xd70>
   19a64:	mov	r9, #0
   19a68:	mov	r0, r9
   19a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a70:	mov	r1, sl
   19a74:	mov	r0, r6
   19a78:	bl	119c0 <mkdir@plt>
   19a7c:	cmn	r0, #1
   19a80:	mov	r9, r0
   19a84:	bne	19a54 <__generate_code_for_body@@Base+0xd90>
   19a88:	bl	119a8 <__errno_location@plt>
   19a8c:	ldr	r3, [r0]
   19a90:	cmp	r3, #17
   19a94:	beq	19a54 <__generate_code_for_body@@Base+0xd90>
   19a98:	ldr	r0, [pc, #20]	; 19ab4 <__generate_code_for_body@@Base+0xdf0>
   19a9c:	mov	r1, r6
   19aa0:	add	r0, pc, r0
   19aa4:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   19aa8:	strb	r4, [r5]
   19aac:	b	19a68 <__generate_code_for_body@@Base+0xda4>
   19ab0:	andeq	r0, r0, sp, ror #3
   19ab4:	andeq	r1, r0, r8, lsr #26
   19ab8:	ldr	r3, [pc, #124]	; 19b3c <__generate_code_for_body@@Base+0xe78>
   19abc:	cmp	r1, r3
   19ac0:	beq	19b34 <__generate_code_for_body@@Base+0xe70>
   19ac4:	cmp	r2, #0
   19ac8:	push	{r4, r5, lr}
   19acc:	sub	sp, sp, #12
   19ad0:	ldreq	r2, [r0]
   19ad4:	lsr	r3, r1, #24
   19ad8:	ldr	r0, [pc, #96]	; 19b40 <__generate_code_for_body@@Base+0xe7c>
   19adc:	lsr	r5, r1, #16
   19ae0:	lsr	r4, r1, #8
   19ae4:	strb	r1, [sp, #3]
   19ae8:	strb	r3, [sp]
   19aec:	mov	r1, #53	; 0x35
   19af0:	mov	r3, #42	; 0x2a
   19af4:	mov	lr, #54	; 0x36
   19af8:	mov	ip, #48	; 0x30
   19afc:	strb	r1, [sp, #6]
   19b00:	strb	r3, [sp, #7]
   19b04:	mov	r1, r2
   19b08:	mov	r3, sp
   19b0c:	add	r2, sp, #4
   19b10:	add	r0, pc, r0
   19b14:	strb	r5, [sp, #1]
   19b18:	strb	r4, [sp, #2]
   19b1c:	strb	lr, [sp, #4]
   19b20:	strb	ip, [sp, #5]
   19b24:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   19b28:	mov	r0, #0
   19b2c:	add	sp, sp, #12
   19b30:	pop	{r4, r5, pc}
   19b34:	mov	r0, #1
   19b38:	bx	lr
   19b3c:	ldrtcc	r3, [r0], -sl, lsr #10
   19b40:	andeq	r1, r0, r0, ror #25
   19b44:	ldr	r2, [r2, #16]
   19b48:	push	{r4, r5, r6, lr}
   19b4c:	cmp	r2, #0
   19b50:	mov	r6, r3
   19b54:	ldr	ip, [sp, #16]
   19b58:	beq	19c24 <__generate_code_for_body@@Base+0xf60>
   19b5c:	ldr	r3, [r3, #12]
   19b60:	cmp	r1, #0
   19b64:	addeq	r2, r3, #1
   19b68:	streq	r2, [r6, #12]
   19b6c:	cmp	r3, #0
   19b70:	beq	19bc8 <__generate_code_for_body@@Base+0xf04>
   19b74:	ldrd	r0, [ip, #16]
   19b78:	ldrd	r2, [r6, #16]
   19b7c:	ldrd	r4, [r6, #24]
   19b80:	adds	r2, r2, r0
   19b84:	adc	r3, r3, r1
   19b88:	strd	r2, [r6, #16]
   19b8c:	ldrd	r0, [ip, #24]
   19b90:	cmp	r4, r0
   19b94:	sbcs	r3, r5, r1
   19b98:	blt	19c48 <__generate_code_for_body@@Base+0xf84>
   19b9c:	ldrd	r2, [r6, #32]
   19ba0:	adds	r2, r2, r0
   19ba4:	adc	r3, r3, r1
   19ba8:	strd	r2, [r6, #32]
   19bac:	add	r1, ip, #40	; 0x28
   19bb0:	add	r0, r6, #40	; 0x28
   19bb4:	bl	1959c <__generate_code_for_body@@Base+0x8d8>
   19bb8:	ldr	r3, [sp, #20]
   19bbc:	mov	r0, #0
   19bc0:	str	r3, [r6]
   19bc4:	pop	{r4, r5, r6, pc}
   19bc8:	ldr	r1, [ip, #8]
   19bcc:	ldrd	r2, [r6, #16]
   19bd0:	str	r1, [r6, #8]
   19bd4:	ldrd	r0, [ip, #16]
   19bd8:	ldrd	r4, [r6, #24]
   19bdc:	adds	r2, r2, r0
   19be0:	adc	r3, r3, r1
   19be4:	strd	r2, [r6, #16]
   19be8:	ldrd	r0, [ip, #24]
   19bec:	cmp	r4, r0
   19bf0:	sbcs	r3, r5, r1
   19bf4:	bge	19c64 <__generate_code_for_body@@Base+0xfa0>
   19bf8:	ldrd	r2, [r6, #32]
   19bfc:	strd	r0, [r6, #24]
   19c00:	ldrd	r0, [ip, #24]
   19c04:	adds	r2, r2, r0
   19c08:	adc	r3, r3, r1
   19c0c:	strd	r2, [r6, #32]
   19c10:	add	r1, ip, #40	; 0x28
   19c14:	ldr	r2, [pc, #92]	; 19c78 <__generate_code_for_body@@Base+0xfb4>
   19c18:	add	r0, r6, #40	; 0x28
   19c1c:	bl	118e8 <memcpy@plt>
   19c20:	b	19bb8 <__generate_code_for_body@@Base+0xef4>
   19c24:	ldr	r3, [r3, #12]
   19c28:	cmp	r3, #0
   19c2c:	beq	19bb8 <__generate_code_for_body@@Base+0xef4>
   19c30:	mov	r1, r0
   19c34:	ldr	r0, [pc, #64]	; 19c7c <__generate_code_for_body@@Base+0xfb8>
   19c38:	add	r0, pc, r0
   19c3c:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   19c40:	mvn	r0, #0
   19c44:	pop	{r4, r5, r6, pc}
   19c48:	ldrd	r2, [r6, #32]
   19c4c:	strd	r0, [r6, #24]
   19c50:	ldrd	r0, [ip, #24]
   19c54:	adds	r2, r2, r0
   19c58:	adc	r3, r3, r1
   19c5c:	strd	r2, [r6, #32]
   19c60:	b	19bac <__generate_code_for_body@@Base+0xee8>
   19c64:	ldrd	r2, [r6, #32]
   19c68:	adds	r2, r2, r0
   19c6c:	adc	r3, r3, r1
   19c70:	strd	r2, [r6, #32]
   19c74:	b	19c10 <__generate_code_for_body@@Base+0xf4c>
   19c78:	andeq	r1, r0, r0, lsr #15
   19c7c:	strdeq	r1, [r0], -r0
   19c80:	ldr	ip, [pc, #52]	; 19cbc <__generate_code_for_body@@Base+0xff8>
   19c84:	ldr	r3, [pc, #52]	; 19cc0 <__generate_code_for_body@@Base+0xffc>
   19c88:	add	ip, pc, ip
   19c8c:	push	{r4, lr}
   19c90:	mov	lr, #0
   19c94:	ldr	r3, [ip, r3]
   19c98:	mvn	r4, #0
   19c9c:	mov	r2, lr
   19ca0:	mov	r1, lr
   19ca4:	str	r4, [r3, #24]
   19ca8:	str	lr, [r3, #4]
   19cac:	str	lr, [r3, #8]
   19cb0:	ldr	r0, [r3]
   19cb4:	pop	{r4, lr}
   19cb8:	b	11a38 <fseek@plt>
   19cbc:	andeq	r2, r1, r0, ror r3
   19cc0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   19cc4:	push	{r4, r5, r6, r7, lr}
   19cc8:	sub	sp, sp, #108	; 0x6c
   19ccc:	mov	r4, #0
   19cd0:	mov	r7, r0
   19cd4:	strh	r4, [sp, #2]
   19cd8:	str	r4, [sp, #4]
   19cdc:	str	r4, [sp, #8]
   19ce0:	bl	1196c <getpid@plt>
   19ce4:	ldr	r3, [pc, #240]	; 19ddc <__generate_code_for_body@@Base+0x1118>
   19ce8:	ldr	ip, [pc, #240]	; 19de0 <__generate_code_for_body@@Base+0x111c>
   19cec:	add	r3, pc, r3
   19cf0:	mvn	lr, #0
   19cf4:	mov	r6, #1
   19cf8:	ldr	r2, [pc, #228]	; 19de4 <__generate_code_for_body@@Base+0x1120>
   19cfc:	mov	r1, #66	; 0x42
   19d00:	str	r0, [sp, #12]
   19d04:	ldr	r5, [r3, ip]
   19d08:	mov	r0, r7
   19d0c:	strh	r6, [sp]
   19d10:	str	r4, [r5, #4]
   19d14:	str	r4, [r5, #12]
   19d18:	str	r4, [r5, #8]
   19d1c:	str	r4, [r5, #20]
   19d20:	str	lr, [r5, #16]
   19d24:	bl	11960 <open@plt>
   19d28:	subs	r6, r0, #0
   19d2c:	movlt	r0, r4
   19d30:	blt	19db0 <__generate_code_for_body@@Base+0x10ec>
   19d34:	mov	r7, sp
   19d38:	mov	r4, #7
   19d3c:	mov	r2, r7
   19d40:	mov	r1, r4
   19d44:	mov	r0, r6
   19d48:	bl	119cc <fcntl@plt>
   19d4c:	cmp	r0, #0
   19d50:	beq	19d64 <__generate_code_for_body@@Base+0x10a0>
   19d54:	bl	119a8 <__errno_location@plt>
   19d58:	ldr	r3, [r0]
   19d5c:	cmp	r3, #4
   19d60:	beq	19d3c <__generate_code_for_body@@Base+0x1078>
   19d64:	ldr	r1, [pc, #124]	; 19de8 <__generate_code_for_body@@Base+0x1124>
   19d68:	mov	r0, r6
   19d6c:	add	r1, pc, r1
   19d70:	bl	118ac <fdopen@plt>
   19d74:	mov	r4, r0
   19d78:	cmp	r4, #0
   19d7c:	mov	r0, r6
   19d80:	str	r4, [r5]
   19d84:	beq	19db8 <__generate_code_for_body@@Base+0x10f4>
   19d88:	add	r1, sp, #16
   19d8c:	bl	1b1a4 <__libc_csu_fini@@Base+0x1c>
   19d90:	cmp	r0, #0
   19d94:	blt	19dc4 <__generate_code_for_body@@Base+0x1100>
   19d98:	mov	r4, #1
   19d9c:	ldr	r0, [r5]
   19da0:	mov	r1, #0
   19da4:	str	r4, [r5, #24]
   19da8:	bl	118c4 <setbuf@plt>
   19dac:	mov	r0, r4
   19db0:	add	sp, sp, #108	; 0x6c
   19db4:	pop	{r4, r5, r6, r7, pc}
   19db8:	bl	11a5c <close@plt>
   19dbc:	mov	r0, r4
   19dc0:	b	19db0 <__generate_code_for_body@@Base+0x10ec>
   19dc4:	mov	r4, #0
   19dc8:	ldr	r0, [r5]
   19dcc:	bl	119fc <fclose@plt>
   19dd0:	str	r4, [r5]
   19dd4:	mov	r0, r4
   19dd8:	b	19db0 <__generate_code_for_body@@Base+0x10ec>
   19ddc:	andeq	r2, r1, ip, lsl #6
   19de0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   19de4:			; <UNDEFINED> instruction: 0x000001b6
   19de8:	andeq	r1, r0, r8, ror #21
   19dec:	push	{r4, r5, r6, lr}
   19df0:	mov	r4, r1
   19df4:	ldr	r5, [pc, #244]	; 19ef0 <__generate_code_for_body@@Base+0x122c>
   19df8:	ldr	ip, [r4, #8]
   19dfc:	ldr	lr, [r4, #12]
   19e00:	ldr	r6, [r4]
   19e04:	cmp	ip, #0
   19e08:	mov	r1, r0
   19e0c:	add	r5, pc, r5
   19e10:	add	r0, r6, lr
   19e14:	ble	19e50 <__generate_code_for_body@@Base+0x118c>
   19e18:	ldrb	r3, [r1]
   19e1c:	cmp	r3, #47	; 0x2f
   19e20:	addeq	r2, r1, #1
   19e24:	ldrbeq	r3, [r1, #1]
   19e28:	movne	r2, r1
   19e2c:	cmp	r3, #0
   19e30:	beq	19e50 <__generate_code_for_body@@Base+0x118c>
   19e34:	cmp	r3, #47	; 0x2f
   19e38:	moveq	r1, r2
   19e3c:	ldrb	r3, [r2, #1]!
   19e40:	subeq	ip, ip, #1
   19e44:	cmp	r3, #0
   19e48:	cmpne	ip, #0
   19e4c:	bne	19e34 <__generate_code_for_body@@Base+0x1170>
   19e50:	cmp	lr, #0
   19e54:	beq	19e6c <__generate_code_for_body@@Base+0x11a8>
   19e58:	ldrb	r3, [r1]
   19e5c:	cmp	r3, #47	; 0x2f
   19e60:	addne	r0, r0, #1
   19e64:	movne	r3, #47	; 0x2f
   19e68:	strbne	r3, [r6, lr]
   19e6c:	bl	1190c <strcpy@plt>
   19e70:	ldr	r0, [r4]
   19e74:	bl	19cc4 <__generate_code_for_body@@Base+0x1000>
   19e78:	cmp	r0, #0
   19e7c:	beq	19e88 <__generate_code_for_body@@Base+0x11c4>
   19e80:	mov	r0, #0
   19e84:	pop	{r4, r5, r6, pc}
   19e88:	ldr	r0, [r4]
   19e8c:	bl	199f4 <__generate_code_for_body@@Base+0xd30>
   19e90:	cmp	r0, #0
   19e94:	bne	19ecc <__generate_code_for_body@@Base+0x1208>
   19e98:	ldr	r0, [r4]
   19e9c:	bl	19cc4 <__generate_code_for_body@@Base+0x1000>
   19ea0:	cmp	r0, #0
   19ea4:	bne	19e80 <__generate_code_for_body@@Base+0x11bc>
   19ea8:	ldr	r3, [pc, #68]	; 19ef4 <__generate_code_for_body@@Base+0x1230>
   19eac:	ldr	r1, [pc, #68]	; 19ef8 <__generate_code_for_body@@Base+0x1234>
   19eb0:	ldr	r2, [r4]
   19eb4:	ldr	r3, [r5, r3]
   19eb8:	add	r1, pc, r1
   19ebc:	ldr	r0, [r3]
   19ec0:	bl	1199c <fprintf@plt>
   19ec4:	mvn	r0, #0
   19ec8:	pop	{r4, r5, r6, pc}
   19ecc:	ldr	r3, [pc, #32]	; 19ef4 <__generate_code_for_body@@Base+0x1230>
   19ed0:	ldr	r1, [pc, #36]	; 19efc <__generate_code_for_body@@Base+0x1238>
   19ed4:	ldr	r2, [r4]
   19ed8:	ldr	r3, [r5, r3]
   19edc:	add	r1, pc, r1
   19ee0:	ldr	r0, [r3]
   19ee4:	bl	1199c <fprintf@plt>
   19ee8:	mvn	r0, #0
   19eec:	pop	{r4, r5, r6, pc}
   19ef0:	andeq	r2, r1, ip, ror #3
   19ef4:	andeq	r0, r0, r4, lsr #1
   19ef8:			; <UNDEFINED> instruction: 0x000019b4
   19efc:	andeq	r1, r0, ip, ror r9
   19f00:	ldr	r3, [pc, #96]	; 19f68 <__generate_code_for_body@@Base+0x12a4>
   19f04:	ldr	r2, [pc, #96]	; 19f6c <__generate_code_for_body@@Base+0x12a8>
   19f08:	add	r3, pc, r3
   19f0c:	push	{r4, lr}
   19f10:	ldr	r4, [r3, r2]
   19f14:	ldr	r0, [r4]
   19f18:	cmp	r0, #0
   19f1c:	beq	19f3c <__generate_code_for_body@@Base+0x1278>
   19f20:	ldr	r3, [r4, #8]
   19f24:	cmp	r3, #0
   19f28:	bne	19f4c <__generate_code_for_body@@Base+0x1288>
   19f2c:	bl	119fc <fclose@plt>
   19f30:	mov	r3, #0
   19f34:	str	r3, [r4]
   19f38:	str	r3, [r4, #12]
   19f3c:	mov	r3, #0
   19f40:	str	r3, [r4, #24]
   19f44:	ldr	r0, [r4, #20]
   19f48:	pop	{r4, pc}
   19f4c:	ldr	r2, [r4, #24]
   19f50:	cmp	r2, #0
   19f54:	bge	19f2c <__generate_code_for_body@@Base+0x1268>
   19f58:	mov	r0, r3
   19f5c:	bl	18f7c <__generate_code_for_body@@Base+0x2b8>
   19f60:	ldr	r0, [r4]
   19f64:	b	19f2c <__generate_code_for_body@@Base+0x1268>
   19f68:	strdeq	r2, [r1], -r0
   19f6c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   19f70:	push	{r4, lr}
   19f74:	mov	r4, r0
   19f78:	mov	r0, #1
   19f7c:	bl	18fd8 <__generate_code_for_body@@Base+0x314>
   19f80:	str	r4, [r0]
   19f84:	pop	{r4, pc}
   19f88:	push	{r4, r5, r6, lr}
   19f8c:	mov	r5, r0
   19f90:	mov	r0, #2
   19f94:	mov	r4, r1
   19f98:	bl	18fd8 <__generate_code_for_body@@Base+0x314>
   19f9c:	str	r5, [r0]
   19fa0:	str	r4, [r0, #4]
   19fa4:	pop	{r4, r5, r6, pc}
   19fa8:	push	{r4, r5, r6, lr}
   19fac:	mov	r5, r0
   19fb0:	mov	r0, #2
   19fb4:	mov	r4, r1
   19fb8:	bl	18fd8 <__generate_code_for_body@@Base+0x314>
   19fbc:	str	r5, [r0]
   19fc0:	str	r4, [r0, #4]
   19fc4:	pop	{r4, r5, r6, pc}
   19fc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fcc:	sub	sp, sp, #32
   19fd0:	mov	r7, sp
   19fd4:	mov	r5, r1
   19fd8:	mov	r6, sp
   19fdc:	add	r2, sp, #32
   19fe0:	mov	r3, #0
   19fe4:	str	r3, [r6], #4
   19fe8:	cmp	r2, r6
   19fec:	bne	19fe4 <__generate_code_for_body@@Base+0x1320>
   19ff0:	mov	r8, #0
   19ff4:	mov	r3, r8
   19ff8:	mov	r4, r5
   19ffc:	mov	r1, r5
   1a000:	mov	r9, #1
   1a004:	lsr	r2, r3, #5
   1a008:	ldr	lr, [r1, #40]	; 0x28
   1a00c:	add	ip, sp, #32
   1a010:	cmp	lr, #0
   1a014:	add	r2, ip, r2, lsl #2
   1a018:	and	sl, r3, #31
   1a01c:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   1a020:	add	r3, r3, #1
   1a024:	orrne	ip, ip, r9, lsl sl
   1a028:	addne	r8, r8, #1
   1a02c:	strne	ip, [r2, #-32]	; 0xffffffe0
   1a030:	cmp	r3, #252	; 0xfc
   1a034:	add	r1, r1, #24
   1a038:	bne	1a004 <__generate_code_for_body@@Base+0x1340>
   1a03c:	add	r8, r8, r8, lsl #2
   1a040:	add	r1, r8, #17
   1a044:	bl	19fa8 <__generate_code_for_body@@Base+0x12e4>
   1a048:	ldr	r0, [r5]
   1a04c:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a050:	ldr	r0, [r5, #8]
   1a054:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a058:	ldr	r0, [r5, #12]
   1a05c:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a060:	ldrd	r0, [r5, #16]
   1a064:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a068:	ldrd	r0, [r5, #24]
   1a06c:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a070:	ldrd	r0, [r5, #32]
   1a074:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a078:	ldr	r0, [r7], #4
   1a07c:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a080:	cmp	r7, r6
   1a084:	bne	1a078 <__generate_code_for_body@@Base+0x13b4>
   1a088:	add	r5, r5, #6016	; 0x1780
   1a08c:	add	r5, r5, #32
   1a090:	b	1a0a0 <__generate_code_for_body@@Base+0x13dc>
   1a094:	add	r4, r4, #24
   1a098:	cmp	r4, r5
   1a09c:	beq	1a0cc <__generate_code_for_body@@Base+0x1408>
   1a0a0:	ldr	r0, [r4, #40]	; 0x28
   1a0a4:	cmp	r0, #0
   1a0a8:	beq	1a094 <__generate_code_for_body@@Base+0x13d0>
   1a0ac:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a0b0:	ldrd	r0, [r4, #48]	; 0x30
   1a0b4:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a0b8:	add	r4, r4, #24
   1a0bc:	ldrd	r0, [r4, #32]
   1a0c0:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a0c4:	cmp	r4, r5
   1a0c8:	bne	1a0a0 <__generate_code_for_body@@Base+0x13dc>
   1a0cc:	add	sp, sp, #32
   1a0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0d4:	push	{r4, lr}
   1a0d8:	mov	r0, #1
   1a0dc:	bl	19034 <__generate_code_for_body@@Base+0x370>
   1a0e0:	subs	r3, r0, #0
   1a0e4:	popeq	{r4, pc}
   1a0e8:	ldr	r0, [r3]
   1a0ec:	pop	{r4, lr}
   1a0f0:	b	18f4c <__generate_code_for_body@@Base+0x288>
   1a0f4:	push	{r4, r5, r6, lr}
   1a0f8:	mov	r0, #2
   1a0fc:	bl	19034 <__generate_code_for_body@@Base+0x370>
   1a100:	subs	r3, r0, #0
   1a104:	beq	1a134 <__generate_code_for_body@@Base+0x1470>
   1a108:	ldr	r0, [r3]
   1a10c:	bl	18f4c <__generate_code_for_body@@Base+0x288>
   1a110:	mov	r5, #0
   1a114:	mov	r4, r0
   1a118:	ldr	r0, [r3, #4]
   1a11c:	bl	18f4c <__generate_code_for_body@@Base+0x288>
   1a120:	mov	r2, #0
   1a124:	mov	r3, r0
   1a128:	orr	r1, r3, r5
   1a12c:	orr	r0, r2, r4
   1a130:	pop	{r4, r5, r6, pc}
   1a134:	mov	r0, #0
   1a138:	mov	r1, #0
   1a13c:	pop	{r4, r5, r6, pc}
   1a140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a144:	sub	sp, sp, #28
   1a148:	mov	r4, #0
   1a14c:	str	r1, [sp, #8]
   1a150:	str	r3, [sp, #12]
   1a154:	add	r3, r1, #56	; 0x38
   1a158:	add	r1, r1, #16
   1a15c:	str	r0, [sp, #16]
   1a160:	str	r2, [sp, #20]
   1a164:	ldr	r2, [r3, #-4]!
   1a168:	cmp	r2, #0
   1a16c:	addne	r4, r4, #1
   1a170:	cmp	r3, r1
   1a174:	bne	1a164 <__generate_code_for_body@@Base+0x14a0>
   1a178:	add	r4, r4, #4
   1a17c:	lsl	r4, r4, #3
   1a180:	mov	r0, r4
   1a184:	bl	11930 <malloc@plt>
   1a188:	subs	r8, r0, #0
   1a18c:	beq	1a250 <__generate_code_for_body@@Base+0x158c>
   1a190:	ldr	r3, [sp, #12]
   1a194:	mov	r4, #0
   1a198:	str	r3, [r8, #4]
   1a19c:	str	r4, [r8]
   1a1a0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a1a4:	ldr	r3, [sp, #8]
   1a1a8:	ldr	r5, [pc, #272]	; 1a2c0 <__generate_code_for_body@@Base+0x15fc>
   1a1ac:	add	r6, r3, #12
   1a1b0:	mov	r7, r4
   1a1b4:	str	r0, [r8, #12]
   1a1b8:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a1bc:	str	r0, [r8, #16]
   1a1c0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a1c4:	str	r0, [r8, #20]
   1a1c8:	ldr	r3, [r6, #4]!
   1a1cc:	cmp	r3, #0
   1a1d0:	beq	1a22c <__generate_code_for_body@@Base+0x1568>
   1a1d4:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a1d8:	cmp	r5, r0
   1a1dc:	bne	1a2a4 <__generate_code_for_body@@Base+0x15e0>
   1a1e0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a1e4:	lsr	r9, r0, #1
   1a1e8:	lsl	fp, r9, #3
   1a1ec:	mov	r0, fp
   1a1f0:	bl	11930 <malloc@plt>
   1a1f4:	subs	sl, r0, #0
   1a1f8:	beq	1a2b4 <__generate_code_for_body@@Base+0x15f0>
   1a1fc:	add	r3, r8, r7, lsl #3
   1a200:	cmp	r9, #0
   1a204:	str	r9, [r3, #24]
   1a208:	str	sl, [r3, #28]
   1a20c:	sub	r9, r9, #1
   1a210:	beq	1a228 <__generate_code_for_body@@Base+0x1564>
   1a214:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a218:	sub	r9, r9, #1
   1a21c:	cmn	r9, #1
   1a220:	strd	r0, [sl], #8
   1a224:	bne	1a214 <__generate_code_for_body@@Base+0x1550>
   1a228:	add	r7, r7, #1
   1a22c:	add	r4, r4, #1
   1a230:	cmp	r4, #10
   1a234:	add	r5, r5, #131072	; 0x20000
   1a238:	bne	1a1c8 <__generate_code_for_body@@Base+0x1504>
   1a23c:	ldr	r3, [sp, #20]
   1a240:	mov	r0, r8
   1a244:	str	r8, [r3]
   1a248:	add	sp, sp, #28
   1a24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a250:	mvn	r5, #0
   1a254:	cmp	r4, #0
   1a258:	beq	1a294 <__generate_code_for_body@@Base+0x15d0>
   1a25c:	ldr	r3, [pc, #96]	; 1a2c4 <__generate_code_for_body@@Base+0x1600>
   1a260:	add	r3, pc, r3
   1a264:	ldr	r0, [pc, #92]	; 1a2c8 <__generate_code_for_body@@Base+0x1604>
   1a268:	ldr	r2, [sp, #12]
   1a26c:	ldr	r1, [sp, #16]
   1a270:	str	r4, [sp]
   1a274:	add	r0, pc, r0
   1a278:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1a27c:	mov	r2, r5
   1a280:	mov	r1, r8
   1a284:	ldr	r0, [sp, #8]
   1a288:	add	sp, sp, #28
   1a28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a290:	b	19138 <__generate_code_for_body@@Base+0x474>
   1a294:	ldr	r3, [pc, #48]	; 1a2cc <__generate_code_for_body@@Base+0x1608>
   1a298:	mov	r4, r5
   1a29c:	add	r3, pc, r3
   1a2a0:	b	1a264 <__generate_code_for_body@@Base+0x15a0>
   1a2a4:	ldr	r3, [pc, #36]	; 1a2d0 <__generate_code_for_body@@Base+0x160c>
   1a2a8:	mov	r5, r4
   1a2ac:	add	r3, pc, r3
   1a2b0:	b	1a264 <__generate_code_for_body@@Base+0x15a0>
   1a2b4:	mov	r5, r4
   1a2b8:	mov	r4, fp
   1a2bc:	b	1a254 <__generate_code_for_body@@Base+0x1590>
   1a2c0:			; <UNDEFINED> instruction: 0x01a10000
   1a2c4:	andeq	r1, r0, r8, lsr #12
   1a2c8:	andeq	r1, r0, r8, lsr r6
   1a2cc:	strdeq	r1, [r0], -ip
   1a2d0:	andeq	r1, r0, ip, ror #11
   1a2d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d8:	sub	sp, sp, #44	; 0x2c
   1a2dc:	mov	r9, r0
   1a2e0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a2e4:	mov	r7, #0
   1a2e8:	add	sl, sp, #8
   1a2ec:	mov	r4, sl
   1a2f0:	add	r5, sp, #40	; 0x28
   1a2f4:	str	r0, [r9]
   1a2f8:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a2fc:	str	r0, [r9, #8]
   1a300:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a304:	str	r0, [r9, #12]
   1a308:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a30c:	strd	r0, [r9, #16]
   1a310:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a314:	strd	r0, [r9, #24]
   1a318:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a31c:	ldr	r2, [pc, #244]	; 1a418 <__generate_code_for_body@@Base+0x1754>
   1a320:	strd	r0, [r9, #32]
   1a324:	add	r0, r9, #40	; 0x28
   1a328:	mov	r1, r7
   1a32c:	bl	119d8 <memset@plt>
   1a330:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a334:	str	r0, [r4], #4
   1a338:	bl	1afbc <__gcov_sort_n_vals@@Base+0x618>
   1a33c:	cmp	r5, r4
   1a340:	add	r7, r7, r0
   1a344:	bne	1a330 <__generate_code_for_body@@Base+0x166c>
   1a348:	cmp	r7, #0
   1a34c:	sub	r7, r7, #1
   1a350:	beq	1a404 <__generate_code_for_body@@Base+0x1740>
   1a354:	ldr	r8, [pc, #192]	; 1a41c <__generate_code_for_body@@Base+0x1758>
   1a358:	mov	r4, #0
   1a35c:	ldr	r3, [pc, #188]	; 1a420 <__generate_code_for_body@@Base+0x175c>
   1a360:	add	r8, pc, r8
   1a364:	mov	r5, r4
   1a368:	mov	r6, r4
   1a36c:	add	r3, pc, r3
   1a370:	str	r3, [sp, #4]
   1a374:	cmp	r4, #0
   1a378:	addeq	r6, sl, r5, lsl #2
   1a37c:	beq	1a388 <__generate_code_for_body@@Base+0x16c4>
   1a380:	b	1a3b0 <__generate_code_for_body@@Base+0x16ec>
   1a384:	mov	r5, r3
   1a388:	cmp	r5, #7
   1a38c:	bls	1a398 <__generate_code_for_body@@Base+0x16d4>
   1a390:	mov	r0, r8
   1a394:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1a398:	ldr	r4, [r6], #4
   1a39c:	add	r3, r5, #1
   1a3a0:	cmp	r4, #0
   1a3a4:	beq	1a384 <__generate_code_for_body@@Base+0x16c0>
   1a3a8:	lsl	r6, r5, #5
   1a3ac:	mov	r5, r3
   1a3b0:	tst	r4, #1
   1a3b4:	bne	1a3c8 <__generate_code_for_body@@Base+0x1704>
   1a3b8:	lsr	r4, r4, #1
   1a3bc:	tst	r4, #1
   1a3c0:	add	r6, r6, #1
   1a3c4:	beq	1a3b8 <__generate_code_for_body@@Base+0x16f4>
   1a3c8:	cmp	r6, #251	; 0xfb
   1a3cc:	bhi	1a40c <__generate_code_for_body@@Base+0x1748>
   1a3d0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a3d4:	add	r3, r6, r6, lsl #1
   1a3d8:	sub	r7, r7, #1
   1a3dc:	add	fp, r9, r3, lsl #3
   1a3e0:	lsr	r4, r4, #1
   1a3e4:	add	r6, r6, #1
   1a3e8:	str	r0, [fp, #40]	; 0x28
   1a3ec:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a3f0:	strd	r0, [fp, #48]	; 0x30
   1a3f4:	bl	1a0f4 <__generate_code_for_body@@Base+0x1430>
   1a3f8:	cmn	r7, #1
   1a3fc:	strd	r0, [fp, #56]	; 0x38
   1a400:	bne	1a374 <__generate_code_for_body@@Base+0x16b0>
   1a404:	add	sp, sp, #44	; 0x2c
   1a408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a40c:	ldr	r0, [sp, #4]
   1a410:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1a414:	b	1a3d0 <__generate_code_for_body@@Base+0x170c>
   1a418:	andeq	r1, r0, r0, lsr #15
   1a41c:	andeq	r1, r0, ip, lsr #11
   1a420:	andeq	r1, r0, r4, ror #10
   1a424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a428:	sub	sp, sp, #6080	; 0x17c0
   1a42c:	sub	sp, sp, #28
   1a430:	mov	r4, r1
   1a434:	stmib	sp, {r2, r3}
   1a438:	add	r3, sp, #6144	; 0x1800
   1a43c:	mov	sl, r0
   1a440:	ldr	r7, [r3]
   1a444:	add	r3, sp, #6144	; 0x1800
   1a448:	add	r3, r3, #4
   1a44c:	ldr	r6, [r3]
   1a450:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a454:	add	r3, r4, #12
   1a458:	mov	r2, sl
   1a45c:	str	r3, [sp, #12]
   1a460:	mov	r1, r0
   1a464:	mov	r0, r3
   1a468:	bl	19ab8 <__generate_code_for_body@@Base+0xdf4>
   1a46c:	cmp	r0, #0
   1a470:	beq	1a6f0 <__generate_code_for_body@@Base+0x1a2c>
   1a474:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a478:	ldr	r3, [r4, #8]
   1a47c:	cmp	r0, r3
   1a480:	beq	1a494 <__generate_code_for_body@@Base+0x17d0>
   1a484:	mov	r0, #0
   1a488:	add	sp, sp, #6080	; 0x17c0
   1a48c:	add	sp, sp, #28
   1a490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a494:	ldr	fp, [pc, #628]	; 1a710 <__generate_code_for_body@@Base+0x1a4c>
   1a498:	add	r9, sp, #2000	; 0x7d0
   1a49c:	add	r5, sp, #16
   1a4a0:	add	fp, pc, fp
   1a4a4:	add	r9, r9, #8
   1a4a8:	bl	18efc <__generate_code_for_body@@Base+0x238>
   1a4ac:	str	r0, [r6]
   1a4b0:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a4b4:	cmp	r0, #-1560281088	; 0xa3000000
   1a4b8:	bne	1a55c <__generate_code_for_body@@Base+0x1898>
   1a4bc:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a4c0:	mov	r0, r5
   1a4c4:	bl	1a2d4 <__generate_code_for_body@@Base+0x1610>
   1a4c8:	bl	18f20 <__generate_code_for_body@@Base+0x25c>
   1a4cc:	subs	r8, r0, #0
   1a4d0:	bne	1a690 <__generate_code_for_body@@Base+0x19cc>
   1a4d4:	ldr	r3, [r7]
   1a4d8:	cmp	r3, #0
   1a4dc:	bne	1a528 <__generate_code_for_body@@Base+0x1864>
   1a4e0:	add	r2, sp, #6144	; 0x1800
   1a4e4:	add	r2, r2, #8
   1a4e8:	ldr	r3, [r9, #-1992]	; 0xfffff838
   1a4ec:	ldr	r2, [r2]
   1a4f0:	cmp	r3, r2
   1a4f4:	bne	1a4a8 <__generate_code_for_body@@Base+0x17e4>
   1a4f8:	ldr	r3, [sp, #8]
   1a4fc:	ldr	ip, [r9, #-1984]	; 0xfffff840
   1a500:	ldr	r2, [pc, #524]	; 1a714 <__generate_code_for_body@@Base+0x1a50>
   1a504:	ldr	r3, [r3, #8]
   1a508:	mov	r1, r5
   1a50c:	cmp	ip, r3
   1a510:	ldr	r0, [sp, #4]
   1a514:	bne	1a4a8 <__generate_code_for_body@@Base+0x17e4>
   1a518:	bl	118e8 <memcpy@plt>
   1a51c:	ldr	r3, [r6]
   1a520:	str	r3, [r7]
   1a524:	b	1a4a8 <__generate_code_for_body@@Base+0x17e4>
   1a528:	ldr	r0, [pc, #488]	; 1a718 <__generate_code_for_body@@Base+0x1a54>
   1a52c:	bl	11930 <malloc@plt>
   1a530:	ldr	r2, [pc, #476]	; 1a714 <__generate_code_for_body@@Base+0x1a50>
   1a534:	mov	r1, r5
   1a538:	mov	r3, r0
   1a53c:	str	r0, [fp]
   1a540:	add	r0, r0, #8
   1a544:	str	r3, [sp]
   1a548:	bl	118e8 <memcpy@plt>
   1a54c:	ldr	r3, [sp]
   1a550:	str	r8, [r3]
   1a554:	ldr	fp, [fp]
   1a558:	b	1a4a8 <__generate_code_for_body@@Base+0x17e4>
   1a55c:	ldr	r5, [r4, #56]	; 0x38
   1a560:	cmp	r5, #0
   1a564:	beq	1a6f8 <__generate_code_for_body@@Base+0x1a34>
   1a568:	ldr	r3, [r4, #60]	; 0x3c
   1a56c:	cmp	r0, #16777216	; 0x1000000
   1a570:	ldr	r8, [r3]
   1a574:	bne	1a6c0 <__generate_code_for_body@@Base+0x19fc>
   1a578:	ldr	r6, [pc, #412]	; 1a71c <__generate_code_for_body@@Base+0x1a58>
   1a57c:	mov	r5, #0
   1a580:	add	r6, pc, r6
   1a584:	add	r6, r6, #4
   1a588:	b	1a5cc <__generate_code_for_body@@Base+0x1908>
   1a58c:	mov	r2, r6
   1a590:	mov	r3, r5
   1a594:	mov	r1, r4
   1a598:	mov	r0, sl
   1a59c:	bl	1a140 <__generate_code_for_body@@Base+0x147c>
   1a5a0:	subs	r6, r0, #0
   1a5a4:	beq	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a5a8:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a5ac:	ldr	r3, [r4, #56]	; 0x38
   1a5b0:	add	r5, r5, #1
   1a5b4:	cmp	r3, r5
   1a5b8:	beq	1a6f8 <__generate_code_for_body@@Base+0x1a34>
   1a5bc:	ldr	r3, [r4, #60]	; 0x3c
   1a5c0:	cmp	r0, #16777216	; 0x1000000
   1a5c4:	ldr	r8, [r3, r5, lsl #2]
   1a5c8:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a5cc:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a5d0:	cmp	r0, #0
   1a5d4:	beq	1a5a8 <__generate_code_for_body@@Base+0x18e4>
   1a5d8:	cmp	r0, #3
   1a5dc:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a5e0:	cmp	r8, #0
   1a5e4:	beq	1a58c <__generate_code_for_body@@Base+0x18c8>
   1a5e8:	ldr	r3, [r8]
   1a5ec:	cmp	r4, r3
   1a5f0:	bne	1a58c <__generate_code_for_body@@Base+0x18c8>
   1a5f4:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a5f8:	ldr	r3, [r8, #4]
   1a5fc:	cmp	r0, r3
   1a600:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a604:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a608:	ldr	r3, [r8, #8]
   1a60c:	cmp	r0, r3
   1a610:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a614:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a618:	ldr	r3, [r8, #12]
   1a61c:	cmp	r0, r3
   1a620:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a624:	ldr	r7, [pc, #244]	; 1a720 <__generate_code_for_body@@Base+0x1a5c>
   1a628:	ldr	fp, [sp, #12]
   1a62c:	add	r8, r8, #16
   1a630:	ldr	r9, [fp, #4]!
   1a634:	cmp	r9, #0
   1a638:	beq	1a670 <__generate_code_for_body@@Base+0x19ac>
   1a63c:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a640:	str	r0, [sp]
   1a644:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1a648:	ldr	r3, [sp]
   1a64c:	cmp	r3, r7
   1a650:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a654:	ldr	r3, [r8]
   1a658:	mov	r1, r3
   1a65c:	cmp	r0, r3, lsl #1
   1a660:	bne	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a664:	ldr	r0, [r8, #4]
   1a668:	blx	r9
   1a66c:	add	r8, r8, #8
   1a670:	ldr	r3, [pc, #172]	; 1a724 <__generate_code_for_body@@Base+0x1a60>
   1a674:	add	r7, r7, #131072	; 0x20000
   1a678:	cmp	r7, r3
   1a67c:	bne	1a630 <__generate_code_for_body@@Base+0x196c>
   1a680:	bl	18f20 <__generate_code_for_body@@Base+0x25c>
   1a684:	cmp	r0, #0
   1a688:	beq	1a5a8 <__generate_code_for_body@@Base+0x18e4>
   1a68c:	mov	r8, r0
   1a690:	cmp	r8, #0
   1a694:	blt	1a704 <__generate_code_for_body@@Base+0x1a40>
   1a698:	ldr	r2, [pc, #136]	; 1a728 <__generate_code_for_body@@Base+0x1a64>
   1a69c:	add	r2, pc, r2
   1a6a0:	ldr	r0, [pc, #132]	; 1a72c <__generate_code_for_body@@Base+0x1a68>
   1a6a4:	mov	r1, sl
   1a6a8:	add	r0, pc, r0
   1a6ac:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1a6b0:	mvn	r0, #0
   1a6b4:	add	sp, sp, #6080	; 0x17c0
   1a6b8:	add	sp, sp, #28
   1a6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c0:	mov	r5, #0
   1a6c4:	ldr	r2, [pc, #100]	; 1a730 <__generate_code_for_body@@Base+0x1a6c>
   1a6c8:	ldr	r0, [pc, #100]	; 1a734 <__generate_code_for_body@@Base+0x1a70>
   1a6cc:	mov	r3, r5
   1a6d0:	mov	r1, sl
   1a6d4:	add	r2, pc, r2
   1a6d8:	add	r0, pc, r0
   1a6dc:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1a6e0:	mvn	r0, #0
   1a6e4:	add	sp, sp, #6080	; 0x17c0
   1a6e8:	add	sp, sp, #28
   1a6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6f0:	mvn	r0, #0
   1a6f4:	b	1a488 <__generate_code_for_body@@Base+0x17c4>
   1a6f8:	cmp	r0, #0
   1a6fc:	beq	1a484 <__generate_code_for_body@@Base+0x17c0>
   1a700:	b	1a6c4 <__generate_code_for_body@@Base+0x1a00>
   1a704:	ldr	r2, [pc, #44]	; 1a738 <__generate_code_for_body@@Base+0x1a74>
   1a708:	add	r2, pc, r2
   1a70c:	b	1a6a0 <__generate_code_for_body@@Base+0x19dc>
   1a710:	andeq	r3, r1, r8, lsl #6
   1a714:	andeq	r1, r0, r8, asr #15
   1a718:	ldrdeq	r1, [r0], -r0
   1a71c:	andeq	r3, r1, r8, lsr #4
   1a720:			; <UNDEFINED> instruction: 0x01a10000
   1a724:			; <UNDEFINED> instruction: 0x01b50000
   1a728:			; <UNDEFINED> instruction: 0x000012bc
   1a72c:	andeq	r1, r0, ip, ror #5
   1a730:	andeq	r1, r0, ip, lsl #5
   1a734:	muleq	r0, r4, r2
   1a738:	andeq	r1, r0, r4, asr #4
   1a73c:	ldr	r3, [pc, #68]	; 1a788 <__generate_code_for_body@@Base+0x1ac4>
   1a740:	ldr	r2, [pc, #68]	; 1a78c <__generate_code_for_body@@Base+0x1ac8>
   1a744:	add	r3, pc, r3
   1a748:	push	{r4, r5, r6, lr}
   1a74c:	mov	r5, r0
   1a750:	ldr	r4, [r3, r2]
   1a754:	ldr	r0, [r4, #8]
   1a758:	cmp	r0, #0
   1a75c:	beq	1a764 <__generate_code_for_body@@Base+0x1aa0>
   1a760:	bl	18f7c <__generate_code_for_body@@Base+0x2b8>
   1a764:	lsl	r1, r5, #2
   1a768:	mov	r2, #0
   1a76c:	ldr	r0, [r4]
   1a770:	bl	11a38 <fseek@plt>
   1a774:	ldr	r0, [r4]
   1a778:	bl	118f4 <ftell@plt>
   1a77c:	asr	r0, r0, #2
   1a780:	str	r0, [r4, #4]
   1a784:	pop	{r4, r5, r6, pc}
   1a788:			; <UNDEFINED> instruction: 0x000118b4
   1a78c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a790:	cmp	r2, #0
   1a794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a798:	mov	r9, r0
   1a79c:	sub	sp, sp, #20
   1a7a0:	mov	r5, r1
   1a7a4:	mov	r4, r3
   1a7a8:	beq	1a960 <__generate_code_for_body@@Base+0x1c9c>
   1a7ac:	cmp	r4, #0
   1a7b0:	bne	1a97c <__generate_code_for_body@@Base+0x1cb8>
   1a7b4:	mov	r1, r5
   1a7b8:	ldr	r5, [pc, #456]	; 1a988 <__generate_code_for_body@@Base+0x1cc4>
   1a7bc:	mov	r0, #-1560281088	; 0xa3000000
   1a7c0:	add	r5, pc, r5
   1a7c4:	bl	19fc8 <__generate_code_for_body@@Base+0x1304>
   1a7c8:	ldr	r4, [r5]
   1a7cc:	cmp	r4, #0
   1a7d0:	movne	r6, #-1560281088	; 0xa3000000
   1a7d4:	beq	1a800 <__generate_code_for_body@@Base+0x1b3c>
   1a7d8:	add	r1, r4, #8
   1a7dc:	mov	r0, r6
   1a7e0:	bl	19fc8 <__generate_code_for_body@@Base+0x1304>
   1a7e4:	ldr	r3, [r5]
   1a7e8:	mov	r0, r3
   1a7ec:	ldr	r4, [r3]
   1a7f0:	bl	118dc <free@plt>
   1a7f4:	cmp	r4, #0
   1a7f8:	str	r4, [r5]
   1a7fc:	bne	1a7d8 <__generate_code_for_body@@Base+0x1b14>
   1a800:	ldr	r3, [r9, #56]	; 0x38
   1a804:	cmp	r3, #0
   1a808:	beq	1a944 <__generate_code_for_body@@Base+0x1c80>
   1a80c:	ldr	r3, [pc, #376]	; 1a98c <__generate_code_for_body@@Base+0x1cc8>
   1a810:	ldr	r8, [pc, #376]	; 1a990 <__generate_code_for_body@@Base+0x1ccc>
   1a814:	add	r3, pc, r3
   1a818:	str	r3, [sp, #4]
   1a81c:	ldr	r3, [pc, #368]	; 1a994 <__generate_code_for_body@@Base+0x1cd0>
   1a820:	mov	r7, #0
   1a824:	add	r3, pc, r3
   1a828:	str	r3, [sp, #12]
   1a82c:	b	1a868 <__generate_code_for_body@@Base+0x1ba4>
   1a830:	ldr	r3, [r9, #60]	; 0x3c
   1a834:	ldr	r4, [r3, r7, lsl #2]
   1a838:	cmp	r4, #0
   1a83c:	beq	1a84c <__generate_code_for_body@@Base+0x1b88>
   1a840:	ldr	r3, [r4]
   1a844:	cmp	r9, r3
   1a848:	beq	1a954 <__generate_code_for_body@@Base+0x1c90>
   1a84c:	mov	r1, #0
   1a850:	mov	r0, #16777216	; 0x1000000
   1a854:	bl	19fa8 <__generate_code_for_body@@Base+0x12e4>
   1a858:	ldr	r3, [r9, #56]	; 0x38
   1a85c:	add	r7, r7, #1
   1a860:	cmp	r3, r7
   1a864:	beq	1a944 <__generate_code_for_body@@Base+0x1c80>
   1a868:	ldr	r3, [sp, #4]
   1a86c:	ldr	r4, [r3, #4]
   1a870:	cmp	r4, #0
   1a874:	beq	1a830 <__generate_code_for_body@@Base+0x1b6c>
   1a878:	ldr	r3, [r4, #4]
   1a87c:	cmp	r3, r7
   1a880:	moveq	r3, #1
   1a884:	addeq	r4, r4, #8
   1a888:	streq	r3, [sp, #8]
   1a88c:	bne	1a830 <__generate_code_for_body@@Base+0x1b6c>
   1a890:	mov	r1, #3
   1a894:	mov	r0, #16777216	; 0x1000000
   1a898:	bl	19fa8 <__generate_code_for_body@@Base+0x12e4>
   1a89c:	ldr	r0, [r4, #4]
   1a8a0:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a8a4:	ldr	r0, [r4, #8]
   1a8a8:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a8ac:	ldr	r0, [r4, #12]
   1a8b0:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a8b4:	ldr	r5, [pc, #220]	; 1a998 <__generate_code_for_body@@Base+0x1cd4>
   1a8b8:	add	r4, r4, #16
   1a8bc:	add	r6, r9, #12
   1a8c0:	ldr	r3, [r6, #4]!
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a904 <__generate_code_for_body@@Base+0x1c40>
   1a8cc:	ldr	fp, [r4]
   1a8d0:	mov	r0, r5
   1a8d4:	sub	sl, fp, #1
   1a8d8:	lsl	r1, fp, #1
   1a8dc:	bl	19fa8 <__generate_code_for_body@@Base+0x12e4>
   1a8e0:	cmp	fp, #0
   1a8e4:	ldr	fp, [r4, #4]
   1a8e8:	beq	1a900 <__generate_code_for_body@@Base+0x1c3c>
   1a8ec:	sub	sl, sl, #1
   1a8f0:	ldrd	r0, [fp], #8
   1a8f4:	bl	19f88 <__generate_code_for_body@@Base+0x12c4>
   1a8f8:	cmn	sl, #1
   1a8fc:	bne	1a8ec <__generate_code_for_body@@Base+0x1c28>
   1a900:	add	r4, r4, #8
   1a904:	add	r5, r5, #131072	; 0x20000
   1a908:	cmp	r5, r8
   1a90c:	bne	1a8c0 <__generate_code_for_body@@Base+0x1bfc>
   1a910:	ldr	r3, [sp, #8]
   1a914:	cmp	r3, #0
   1a918:	beq	1a858 <__generate_code_for_body@@Base+0x1b94>
   1a91c:	ldr	r4, [sp, #12]
   1a920:	mov	r2, #10
   1a924:	mov	r0, r9
   1a928:	ldr	r1, [r4, #4]
   1a92c:	bl	19138 <__generate_code_for_body@@Base+0x474>
   1a930:	ldr	r3, [r9, #56]	; 0x38
   1a934:	add	r7, r7, #1
   1a938:	cmp	r3, r7
   1a93c:	str	r0, [r4, #4]
   1a940:	bne	1a868 <__generate_code_for_body@@Base+0x1ba4>
   1a944:	mov	r0, #0
   1a948:	add	sp, sp, #20
   1a94c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a950:	b	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a954:	mov	r3, #0
   1a958:	str	r3, [sp, #8]
   1a95c:	b	1a890 <__generate_code_for_body@@Base+0x1bcc>
   1a960:	ldr	r1, [pc, #52]	; 1a99c <__generate_code_for_body@@Base+0x1cd8>
   1a964:	ldr	r0, [pc, #52]	; 1a9a0 <__generate_code_for_body@@Base+0x1cdc>
   1a968:	bl	19fa8 <__generate_code_for_body@@Base+0x12e4>
   1a96c:	ldr	r0, [r9, #8]
   1a970:	bl	19f70 <__generate_code_for_body@@Base+0x12ac>
   1a974:	cmp	r4, #0
   1a978:	beq	1a7b4 <__generate_code_for_body@@Base+0x1af0>
   1a97c:	mov	r0, r4
   1a980:	bl	1a73c <__generate_code_for_body@@Base+0x1a78>
   1a984:	b	1a7b4 <__generate_code_for_body@@Base+0x1af0>
   1a988:	andeq	r2, r1, r8, ror #31
   1a98c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1a990:			; <UNDEFINED> instruction: 0x01b50000
   1a994:	andeq	r2, r1, r4, lsl #31
   1a998:			; <UNDEFINED> instruction: 0x01a10000
   1a99c:	ldrtcc	r3, [r0], -sl, lsr #10
   1a9a0:	strbvs	r6, [r3, -r1, ror #8]!

0001a9a4 <__gcov_sort_n_vals@@Base>:
   1a9a4:	cmp	r1, #2
   1a9a8:	bxle	lr
   1a9ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9b0:	sub	lr, r1, #3
   1a9b4:	mov	ip, #0
   1a9b8:	lsr	lr, lr, #1
   1a9bc:	add	r1, r0, #8
   1a9c0:	add	lr, r0, lr, lsl #4
   1a9c4:	add	lr, lr, #24
   1a9c8:	ldrd	r4, [r1, #16]
   1a9cc:	ldrd	r6, [r1]
   1a9d0:	ldrd	r8, [r1, #8]
   1a9d4:	mov	r2, ip
   1a9d8:	cmp	r6, r4
   1a9dc:	sbcs	r3, r7, r5
   1a9e0:	mov	fp, ip
   1a9e4:	bge	1aa2c <__gcov_sort_n_vals@@Base+0x88>
   1a9e8:	add	r3, r1, #8
   1a9ec:	mov	sl, #0
   1a9f0:	b	1aa08 <__gcov_sort_n_vals@@Base+0x64>
   1a9f4:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   1a9f8:	sub	r3, r3, #16
   1a9fc:	cmp	r6, r4
   1aa00:	sbcs	r6, r7, r5
   1aa04:	bge	1aa2c <__gcov_sort_n_vals@@Base+0x88>
   1aa08:	ldrd	r6, [r3, #-16]
   1aa0c:	subs	r2, r2, #2
   1aa10:	mov	fp, r2
   1aa14:	strd	r6, [r3]
   1aa18:	ldrd	r6, [r1, sl]
   1aa1c:	sub	sl, sl, #16
   1aa20:	strd	r6, [r3, #8]
   1aa24:	mov	r6, r3
   1aa28:	bpl	1a9f4 <__gcov_sort_n_vals@@Base+0x50>
   1aa2c:	add	fp, fp, #2
   1aa30:	mov	r3, r0
   1aa34:	add	r1, r1, #16
   1aa38:	lsl	fp, fp, #3
   1aa3c:	cmp	lr, r1
   1aa40:	strd	r8, [r3, fp]!
   1aa44:	add	ip, ip, #2
   1aa48:	strd	r4, [r3, #8]
   1aa4c:	bne	1a9c8 <__gcov_sort_n_vals@@Base+0x24>
   1aa50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa54:	push	{r4, r5, r6, r7, r8, lr}
   1aa58:	ldr	r6, [r0]
   1aa5c:	ldr	r4, [pc, #76]	; 1aab0 <__gcov_sort_n_vals@@Base+0x10c>
   1aa60:	smull	r2, r3, r4, r6
   1aa64:	asr	r4, r6, #31
   1aa68:	rsb	r4, r4, r3, asr #1
   1aa6c:	add	r4, r4, r4, lsl #3
   1aa70:	subs	r4, r6, r4
   1aa74:	bne	1aaac <__gcov_sort_n_vals@@Base+0x108>
   1aa78:	cmp	r6, #0
   1aa7c:	ldr	r5, [r0, #4]
   1aa80:	pople	{r4, r5, r6, r7, r8, pc}
   1aa84:	add	r5, r5, #8
   1aa88:	mov	r7, #8
   1aa8c:	mov	r0, r5
   1aa90:	add	r4, r4, #9
   1aa94:	mov	r1, r7
   1aa98:	bl	1a9a4 <__gcov_sort_n_vals@@Base>
   1aa9c:	cmp	r6, r4
   1aaa0:	add	r5, r5, #72	; 0x48
   1aaa4:	bgt	1aa8c <__gcov_sort_n_vals@@Base+0xe8>
   1aaa8:	pop	{r4, r5, r6, r7, r8, pc}
   1aaac:	bl	11a50 <abort@plt>
   1aab0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1aab4:	ldr	r3, [r0, #52]	; 0x34
   1aab8:	cmp	r3, #0
   1aabc:	bxeq	lr
   1aac0:	ldr	ip, [r0, #56]	; 0x38
   1aac4:	cmp	ip, #0
   1aac8:	bxeq	lr
   1aacc:	push	{r4, r5, r6, lr}
   1aad0:	mov	r5, r0
   1aad4:	mov	r4, #0
   1aad8:	add	r6, r0, #12
   1aadc:	ldr	r1, [r5, #60]	; 0x3c
   1aae0:	mov	r2, r6
   1aae4:	mov	r3, #0
   1aae8:	ldr	r0, [r1, r4, lsl #2]
   1aaec:	add	r0, r0, #16
   1aaf0:	ldr	r1, [r2, #4]!
   1aaf4:	cmp	r1, #0
   1aaf8:	beq	1ab08 <__gcov_sort_n_vals@@Base+0x164>
   1aafc:	cmp	r3, #9
   1ab00:	beq	1ab24 <__gcov_sort_n_vals@@Base+0x180>
   1ab04:	add	r0, r0, #8
   1ab08:	add	r3, r3, #1
   1ab0c:	cmp	r3, #10
   1ab10:	bne	1aaf0 <__gcov_sort_n_vals@@Base+0x14c>
   1ab14:	add	r4, r4, #1
   1ab18:	cmp	ip, r4
   1ab1c:	bne	1aadc <__gcov_sort_n_vals@@Base+0x138>
   1ab20:	pop	{r4, r5, r6, pc}
   1ab24:	bl	1aa54 <__gcov_sort_n_vals@@Base+0xb0>
   1ab28:	ldr	ip, [r5, #56]	; 0x38
   1ab2c:	add	r4, r4, #1
   1ab30:	cmp	ip, r4
   1ab34:	bne	1aadc <__gcov_sort_n_vals@@Base+0x138>
   1ab38:	b	1ab20 <__gcov_sort_n_vals@@Base+0x17c>
   1ab3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ab40:	sub	sp, sp, #6080	; 0x17c0
   1ab44:	ldr	ip, [pc, #388]	; 1acd0 <__gcov_sort_n_vals@@Base+0x32c>
   1ab48:	sub	sp, sp, #36	; 0x24
   1ab4c:	add	ip, pc, ip
   1ab50:	add	r5, sp, #2016	; 0x7e0
   1ab54:	mov	r4, r0
   1ab58:	mov	r7, r1
   1ab5c:	mov	r1, #0
   1ab60:	str	r1, [ip, #4]
   1ab64:	str	r1, [ip]
   1ab68:	mov	r8, r2
   1ab6c:	mov	r6, r3
   1ab70:	str	r1, [r5, #-2000]	; 0xfffff830
   1ab74:	str	r1, [r5, #-1996]	; 0xfffff834
   1ab78:	bl	1aab4 <__gcov_sort_n_vals@@Base+0x110>
   1ab7c:	mov	r1, r7
   1ab80:	ldr	r0, [r4, #12]
   1ab84:	bl	19dec <__generate_code_for_body@@Base+0x1128>
   1ab88:	cmn	r0, #1
   1ab8c:	beq	1ac0c <__gcov_sort_n_vals@@Base+0x268>
   1ab90:	bl	1a0d4 <__generate_code_for_body@@Base+0x1410>
   1ab94:	cmp	r0, #0
   1ab98:	beq	1ac18 <__gcov_sort_n_vals@@Base+0x274>
   1ab9c:	ldr	r3, [pc, #304]	; 1acd4 <__gcov_sort_n_vals@@Base+0x330>
   1aba0:	cmp	r0, r3
   1aba4:	beq	1ac70 <__gcov_sort_n_vals@@Base+0x2cc>
   1aba8:	ldr	r0, [pc, #296]	; 1acd8 <__gcov_sort_n_vals@@Base+0x334>
   1abac:	ldr	r1, [r7]
   1abb0:	add	r0, pc, r0
   1abb4:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1abb8:	ldr	r5, [pc, #284]	; 1acdc <__gcov_sort_n_vals@@Base+0x338>
   1abbc:	add	r5, pc, r5
   1abc0:	ldr	r1, [r5, #4]
   1abc4:	cmp	r1, #0
   1abc8:	movne	r6, #10
   1abcc:	beq	1abec <__gcov_sort_n_vals@@Base+0x248>
   1abd0:	mov	r2, r6
   1abd4:	mov	r0, r4
   1abd8:	bl	19138 <__generate_code_for_body@@Base+0x474>
   1abdc:	cmp	r0, #0
   1abe0:	mov	r1, r0
   1abe4:	str	r0, [r5, #4]
   1abe8:	bne	1abd0 <__gcov_sort_n_vals@@Base+0x22c>
   1abec:	bl	19f00 <__generate_code_for_body@@Base+0x123c>
   1abf0:	cmp	r0, #0
   1abf4:	beq	1ac0c <__gcov_sort_n_vals@@Base+0x268>
   1abf8:	blt	1acac <__gcov_sort_n_vals@@Base+0x308>
   1abfc:	ldr	r0, [pc, #220]	; 1ace0 <__gcov_sort_n_vals@@Base+0x33c>
   1ac00:	add	r0, pc, r0
   1ac04:	ldr	r1, [r7]
   1ac08:	bl	190f0 <__generate_code_for_body@@Base+0x42c>
   1ac0c:	add	sp, sp, #6080	; 0x17c0
   1ac10:	add	sp, sp, #36	; 0x24
   1ac14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ac18:	add	r9, sp, #24
   1ac1c:	bl	19c80 <__generate_code_for_body@@Base+0xfbc>
   1ac20:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1ac24:	cmp	r1, #0
   1ac28:	beq	1acb8 <__gcov_sort_n_vals@@Base+0x314>
   1ac2c:	add	r3, sp, #6144	; 0x1800
   1ac30:	ldr	r0, [r7]
   1ac34:	str	r6, [sp, #4]
   1ac38:	ldr	r3, [r3]
   1ac3c:	mov	r1, r8
   1ac40:	str	r3, [sp]
   1ac44:	mov	r2, r4
   1ac48:	mov	r3, r9
   1ac4c:	bl	19b44 <__generate_code_for_body@@Base+0xe80>
   1ac50:	cmn	r0, #1
   1ac54:	beq	1abb8 <__gcov_sort_n_vals@@Base+0x214>
   1ac58:	mov	r1, r9
   1ac5c:	ldr	r3, [r5, #-2000]	; 0xfffff830
   1ac60:	ldr	r2, [r5, #-1996]	; 0xfffff834
   1ac64:	mov	r0, r4
   1ac68:	bl	1a790 <__generate_code_for_body@@Base+0x1acc>
   1ac6c:	b	1abb8 <__gcov_sort_n_vals@@Base+0x214>
   1ac70:	add	r3, sp, #16
   1ac74:	ldr	r0, [r7]
   1ac78:	str	r3, [sp]
   1ac7c:	add	r3, sp, #6144	; 0x1800
   1ac80:	add	r1, sp, #20
   1ac84:	add	r9, sp, #24
   1ac88:	str	r1, [sp, #4]
   1ac8c:	str	r6, [sp, #8]
   1ac90:	mov	r2, r9
   1ac94:	ldr	r3, [r3]
   1ac98:	mov	r1, r4
   1ac9c:	bl	1a424 <__generate_code_for_body@@Base+0x1760>
   1aca0:	cmn	r0, #1
   1aca4:	bne	1ac1c <__gcov_sort_n_vals@@Base+0x278>
   1aca8:	b	1abb8 <__gcov_sort_n_vals@@Base+0x214>
   1acac:	ldr	r0, [pc, #48]	; 1ace4 <__gcov_sort_n_vals@@Base+0x340>
   1acb0:	add	r0, pc, r0
   1acb4:	b	1ac04 <__gcov_sort_n_vals@@Base+0x260>
   1acb8:	ldr	r2, [pc, #40]	; 1ace8 <__gcov_sort_n_vals@@Base+0x344>
   1acbc:	mov	r0, r9
   1acc0:	bl	119d8 <memset@plt>
   1acc4:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1acc8:	str	r3, [r5, #-2000]	; 0xfffff830
   1accc:	b	1ac2c <__gcov_sort_n_vals@@Base+0x288>
   1acd0:	andeq	r2, r1, ip, asr ip
   1acd4:	strbvs	r6, [r3, -r1, ror #8]!
   1acd8:	andeq	r0, r0, ip, lsr lr
   1acdc:	andeq	r2, r1, ip, ror #23
   1ace0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1ace4:	andeq	r0, r0, r0, lsl #26
   1ace8:	andeq	r1, r0, r8, asr #15
   1acec:	push	{r4, r5, r6, r7, r8, lr}
   1acf0:	sub	sp, sp, #6080	; 0x17c0
   1acf4:	sub	sp, sp, #32
   1acf8:	add	r6, sp, #24
   1acfc:	add	r2, sp, #12
   1ad00:	mov	r8, r1
   1ad04:	mov	r1, r6
   1ad08:	mov	r4, r0
   1ad0c:	bl	19350 <__generate_code_for_body@@Base+0x68c>
   1ad10:	add	r5, sp, #8
   1ad14:	mov	r7, r0
   1ad18:	mov	r0, r5
   1ad1c:	bl	194d4 <__generate_code_for_body@@Base+0x810>
   1ad20:	cmp	r4, #0
   1ad24:	beq	1ad4c <__gcov_sort_n_vals@@Base+0x3a8>
   1ad28:	mov	r0, r4
   1ad2c:	str	r6, [sp]
   1ad30:	mov	r3, r7
   1ad34:	mov	r2, r8
   1ad38:	mov	r1, r5
   1ad3c:	bl	1ab3c <__gcov_sort_n_vals@@Base+0x198>
   1ad40:	ldr	r4, [r4, #4]
   1ad44:	cmp	r4, #0
   1ad48:	bne	1ad28 <__gcov_sort_n_vals@@Base+0x384>
   1ad4c:	ldr	r0, [sp, #8]
   1ad50:	bl	118dc <free@plt>
   1ad54:	add	sp, sp, #6080	; 0x17c0
   1ad58:	add	sp, sp, #32
   1ad5c:	pop	{r4, r5, r6, r7, r8, pc}
   1ad60:	ldrb	r1, [r0, #4]
   1ad64:	tst	r1, #1
   1ad68:	bxne	lr
   1ad6c:	push	{r4, lr}
   1ad70:	lsr	r1, r1, #1
   1ad74:	mov	r4, r0
   1ad78:	and	r1, r1, #1
   1ad7c:	ldr	r0, [r0]
   1ad80:	bl	1acec <__gcov_sort_n_vals@@Base+0x348>
   1ad84:	ldrb	r3, [r4, #4]
   1ad88:	orr	r3, r3, #3
   1ad8c:	strb	r3, [r4, #4]
   1ad90:	pop	{r4, pc}
   1ad94:	push	{r4, r5, r6, lr}
   1ad98:	ldr	r4, [pc, #76]	; 1adec <__gcov_sort_n_vals@@Base+0x448>
   1ad9c:	ldr	r5, [pc, #76]	; 1adf0 <__gcov_sort_n_vals@@Base+0x44c>
   1ada0:	add	r4, pc, r4
   1ada4:	mov	r0, r4
   1ada8:	bl	1ad60 <__gcov_sort_n_vals@@Base+0x3bc>
   1adac:	ldr	r3, [r4, #8]
   1adb0:	add	r5, pc, r5
   1adb4:	cmp	r3, #0
   1adb8:	ldrne	r2, [r4, #12]
   1adbc:	strne	r2, [r3, #12]
   1adc0:	ldr	r2, [pc, #44]	; 1adf4 <__gcov_sort_n_vals@@Base+0x450>
   1adc4:	add	r2, pc, r2
   1adc8:	ldr	r2, [r2, #12]
   1adcc:	cmp	r2, #0
   1add0:	beq	1addc <__gcov_sort_n_vals@@Base+0x438>
   1add4:	str	r3, [r2, #8]
   1add8:	pop	{r4, r5, r6, pc}
   1addc:	ldr	r2, [pc, #20]	; 1adf8 <__gcov_sort_n_vals@@Base+0x454>
   1ade0:	ldr	r2, [r5, r2]
   1ade4:	str	r3, [r2, #4]
   1ade8:	pop	{r4, r5, r6, pc}
   1adec:	andeq	r2, r1, r0, lsl sl
   1adf0:	andeq	r1, r1, r8, asr #4
   1adf4:	andeq	r2, r1, ip, ror #19
   1adf8:	andeq	r0, r0, ip, lsr #1
   1adfc:	ldr	r1, [r0]
   1ae00:	push	{r4, r5, r6, lr}
   1ae04:	cmp	r1, #0
   1ae08:	ldr	r5, [pc, #168]	; 1aeb8 <__gcov_sort_n_vals@@Base+0x514>
   1ae0c:	add	r5, pc, r5
   1ae10:	popeq	{r4, r5, r6, pc}
   1ae14:	ldr	r3, [r0, #56]	; 0x38
   1ae18:	cmp	r3, #0
   1ae1c:	popeq	{r4, r5, r6, pc}
   1ae20:	mov	r4, r0
   1ae24:	mov	r2, #0
   1ae28:	add	r0, r0, #12
   1ae2c:	bl	19ab8 <__generate_code_for_body@@Base+0xdf4>
   1ae30:	cmp	r0, #0
   1ae34:	popeq	{r4, r5, r6, pc}
   1ae38:	ldr	r6, [pc, #124]	; 1aebc <__gcov_sort_n_vals@@Base+0x518>
   1ae3c:	add	r6, pc, r6
   1ae40:	ldr	r2, [r6]
   1ae44:	cmp	r2, #0
   1ae48:	beq	1ae60 <__gcov_sort_n_vals@@Base+0x4bc>
   1ae4c:	ldr	r3, [pc, #108]	; 1aec0 <__gcov_sort_n_vals@@Base+0x51c>
   1ae50:	str	r2, [r4, #4]
   1ae54:	add	r3, pc, r3
   1ae58:	str	r4, [r3]
   1ae5c:	pop	{r4, r5, r6, pc}
   1ae60:	ldr	r3, [pc, #92]	; 1aec4 <__gcov_sort_n_vals@@Base+0x520>
   1ae64:	ldr	r2, [pc, #92]	; 1aec8 <__gcov_sort_n_vals@@Base+0x524>
   1ae68:	mov	r0, #12
   1ae6c:	ldr	r5, [r5, r3]
   1ae70:	add	r2, pc, r2
   1ae74:	ldr	r1, [r5]
   1ae78:	bl	19ab8 <__generate_code_for_body@@Base+0xdf4>
   1ae7c:	cmp	r0, #0
   1ae80:	beq	1aea0 <__gcov_sort_n_vals@@Base+0x4fc>
   1ae84:	ldr	r3, [r5, #4]
   1ae88:	cmp	r3, #0
   1ae8c:	str	r3, [r6, #8]
   1ae90:	strne	r6, [r3, #12]
   1ae94:	ldr	r3, [pc, #48]	; 1aecc <__gcov_sort_n_vals@@Base+0x528>
   1ae98:	add	r3, pc, r3
   1ae9c:	str	r3, [r5, #4]
   1aea0:	ldr	r0, [pc, #40]	; 1aed0 <__gcov_sort_n_vals@@Base+0x52c>
   1aea4:	add	r0, pc, r0
   1aea8:	bl	1b18c <__libc_csu_fini@@Base+0x4>
   1aeac:	ldr	r3, [pc, #32]	; 1aed4 <__gcov_sort_n_vals@@Base+0x530>
   1aeb0:	ldr	r2, [pc, r3]
   1aeb4:	b	1ae4c <__gcov_sort_n_vals@@Base+0x4a8>
   1aeb8:	andeq	r1, r1, ip, ror #3
   1aebc:	andeq	r2, r1, r4, ror r9
   1aec0:	andeq	r2, r1, ip, asr r9
   1aec4:	andeq	r0, r0, ip, lsr #1
   1aec8:	andeq	r0, r0, r0, lsr #23
   1aecc:	andeq	r2, r1, r8, lsl r9
   1aed0:			; <UNDEFINED> instruction: 0xfffffee8
   1aed4:	andeq	r2, r1, r0, lsl #18
   1aed8:	cmp	r3, #0
   1aedc:	cmpeq	r2, #0
   1aee0:	bne	1af04 <__gcov_sort_n_vals@@Base+0x560>
   1aee4:	cmp	r1, #0
   1aee8:	movlt	r1, #-2147483648	; 0x80000000
   1aeec:	movlt	r0, #0
   1aef0:	blt	1af00 <__gcov_sort_n_vals@@Base+0x55c>
   1aef4:	cmpeq	r0, #0
   1aef8:	mvnne	r1, #-2147483648	; 0x80000000
   1aefc:	mvnne	r0, #0
   1af00:	b	1afac <__gcov_sort_n_vals@@Base+0x608>
   1af04:	sub	sp, sp, #8
   1af08:	push	{sp, lr}
   1af0c:	cmp	r1, #0
   1af10:	blt	1af30 <__gcov_sort_n_vals@@Base+0x58c>
   1af14:	cmp	r3, #0
   1af18:	blt	1af64 <__gcov_sort_n_vals@@Base+0x5c0>
   1af1c:	bl	1b000 <__gcov_sort_n_vals@@Base+0x65c>
   1af20:	ldr	lr, [sp, #4]
   1af24:	add	sp, sp, #8
   1af28:	pop	{r2, r3}
   1af2c:	bx	lr
   1af30:	rsbs	r0, r0, #0
   1af34:	sbc	r1, r1, r1, lsl #1
   1af38:	cmp	r3, #0
   1af3c:	blt	1af88 <__gcov_sort_n_vals@@Base+0x5e4>
   1af40:	bl	1b000 <__gcov_sort_n_vals@@Base+0x65c>
   1af44:	ldr	lr, [sp, #4]
   1af48:	add	sp, sp, #8
   1af4c:	pop	{r2, r3}
   1af50:	rsbs	r0, r0, #0
   1af54:	sbc	r1, r1, r1, lsl #1
   1af58:	rsbs	r2, r2, #0
   1af5c:	sbc	r3, r3, r3, lsl #1
   1af60:	bx	lr
   1af64:	rsbs	r2, r2, #0
   1af68:	sbc	r3, r3, r3, lsl #1
   1af6c:	bl	1b000 <__gcov_sort_n_vals@@Base+0x65c>
   1af70:	ldr	lr, [sp, #4]
   1af74:	add	sp, sp, #8
   1af78:	pop	{r2, r3}
   1af7c:	rsbs	r0, r0, #0
   1af80:	sbc	r1, r1, r1, lsl #1
   1af84:	bx	lr
   1af88:	rsbs	r2, r2, #0
   1af8c:	sbc	r3, r3, r3, lsl #1
   1af90:	bl	1b000 <__gcov_sort_n_vals@@Base+0x65c>
   1af94:	ldr	lr, [sp, #4]
   1af98:	add	sp, sp, #8
   1af9c:	pop	{r2, r3}
   1afa0:	rsbs	r2, r2, #0
   1afa4:	sbc	r3, r3, r3, lsl #1
   1afa8:	bx	lr
   1afac:	push	{r1, lr}
   1afb0:	mov	r0, #8
   1afb4:	bl	118b8 <raise@plt>
   1afb8:	pop	{r1, pc}
   1afbc:	ldr	r3, [pc, #48]	; 1aff4 <__gcov_sort_n_vals@@Base+0x650>
   1afc0:	ldr	r2, [pc, #48]	; 1aff8 <__gcov_sort_n_vals@@Base+0x654>
   1afc4:	and	r3, r3, r0, lsr #1
   1afc8:	sub	r0, r0, r3
   1afcc:	and	r3, r0, r2
   1afd0:	and	r0, r2, r0, lsr #2
   1afd4:	add	r3, r3, r0
   1afd8:	ldr	r0, [pc, #28]	; 1affc <__gcov_sort_n_vals@@Base+0x658>
   1afdc:	add	r3, r3, r3, lsr #4
   1afe0:	and	r0, r0, r3
   1afe4:	add	r0, r0, r0, lsl #8
   1afe8:	add	r0, r0, r0, lsl #16
   1afec:	lsr	r0, r0, #24
   1aff0:	bx	lr
   1aff4:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1aff8:	teqcc	r3, #-872415232	; 0xcc000000
   1affc:	svceq	0x000f0f0f
   1b000:	cmp	r1, r3
   1b004:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b008:	cmpeq	r0, r2
   1b00c:	mov	r4, r0
   1b010:	mov	r5, r1
   1b014:	ldr	r9, [sp, #28]
   1b018:	movcc	r0, #0
   1b01c:	movcc	r1, #0
   1b020:	bcc	1b118 <__gcov_sort_n_vals@@Base+0x774>
   1b024:	cmp	r3, #0
   1b028:	clzeq	ip, r2
   1b02c:	clzne	ip, r3
   1b030:	addeq	ip, ip, #32
   1b034:	cmp	r5, #0
   1b038:	clzeq	r1, r4
   1b03c:	addeq	r1, r1, #32
   1b040:	clzne	r1, r5
   1b044:	sub	ip, ip, r1
   1b048:	sub	lr, ip, #32
   1b04c:	lsl	r7, r3, ip
   1b050:	rsb	r8, ip, #32
   1b054:	orr	r7, r7, r2, lsl lr
   1b058:	orr	r7, r7, r2, lsr r8
   1b05c:	lsl	r6, r2, ip
   1b060:	cmp	r5, r7
   1b064:	cmpeq	r4, r6
   1b068:	movcc	r0, #0
   1b06c:	movcc	r1, #0
   1b070:	bcc	1b08c <__gcov_sort_n_vals@@Base+0x6e8>
   1b074:	mov	r3, #1
   1b078:	subs	r4, r4, r6
   1b07c:	lsl	r1, r3, lr
   1b080:	lsl	r0, r3, ip
   1b084:	orr	r1, r1, r3, lsr r8
   1b088:	sbc	r5, r5, r7
   1b08c:	cmp	ip, #0
   1b090:	beq	1b118 <__gcov_sort_n_vals@@Base+0x774>
   1b094:	lsrs	r3, r7, #1
   1b098:	rrx	r2, r6
   1b09c:	mov	r6, ip
   1b0a0:	b	1b0c4 <__gcov_sort_n_vals@@Base+0x720>
   1b0a4:	subs	r4, r4, r2
   1b0a8:	sbc	r5, r5, r3
   1b0ac:	adds	r4, r4, r4
   1b0b0:	adc	r5, r5, r5
   1b0b4:	adds	r4, r4, #1
   1b0b8:	adc	r5, r5, #0
   1b0bc:	subs	r6, r6, #1
   1b0c0:	beq	1b0e0 <__gcov_sort_n_vals@@Base+0x73c>
   1b0c4:	cmp	r5, r3
   1b0c8:	cmpeq	r4, r2
   1b0cc:	bcs	1b0a4 <__gcov_sort_n_vals@@Base+0x700>
   1b0d0:	adds	r4, r4, r4
   1b0d4:	adc	r5, r5, r5
   1b0d8:	subs	r6, r6, #1
   1b0dc:	bne	1b0c4 <__gcov_sort_n_vals@@Base+0x720>
   1b0e0:	lsr	r6, r4, ip
   1b0e4:	lsr	r7, r5, ip
   1b0e8:	orr	r6, r6, r5, lsl r8
   1b0ec:	adds	r2, r0, r4
   1b0f0:	orr	r6, r6, r5, lsr lr
   1b0f4:	adc	r3, r1, r5
   1b0f8:	lsl	r1, r7, ip
   1b0fc:	orr	r1, r1, r6, lsl lr
   1b100:	lsl	r0, r6, ip
   1b104:	orr	r1, r1, r6, lsr r8
   1b108:	subs	r0, r2, r0
   1b10c:	mov	r4, r6
   1b110:	mov	r5, r7
   1b114:	sbc	r1, r3, r1
   1b118:	cmp	r9, #0
   1b11c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b120:	strd	r4, [r9]
   1b124:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001b128 <__libc_csu_init@@Base>:
   1b128:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b12c:	mov	r7, r0
   1b130:	ldr	r6, [pc, #72]	; 1b180 <__libc_csu_init@@Base+0x58>
   1b134:	ldr	r5, [pc, #72]	; 1b184 <__libc_csu_init@@Base+0x5c>
   1b138:	add	r6, pc, r6
   1b13c:	add	r5, pc, r5
   1b140:	sub	r6, r6, r5
   1b144:	mov	r8, r1
   1b148:	mov	r9, r2
   1b14c:	bl	1188c <fdopen@plt-0x20>
   1b150:	asrs	r6, r6, #2
   1b154:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b158:	mov	r4, #0
   1b15c:	add	r4, r4, #1
   1b160:	ldr	r3, [r5], #4
   1b164:	mov	r2, r9
   1b168:	mov	r1, r8
   1b16c:	mov	r0, r7
   1b170:	blx	r3
   1b174:	cmp	r6, r4
   1b178:	bne	1b15c <__libc_csu_init@@Base+0x34>
   1b17c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b180:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1b184:			; <UNDEFINED> instruction: 0x00010db0

0001b188 <__libc_csu_fini@@Base>:
   1b188:	bx	lr
   1b18c:	ldr	r3, [pc, #12]	; 1b1a0 <__libc_csu_fini@@Base+0x18>
   1b190:	mov	r1, #0
   1b194:	add	r3, pc, r3
   1b198:	ldr	r2, [r3]
   1b19c:	b	119b4 <__cxa_atexit@plt>
   1b1a0:	andeq	r0, r1, r0, lsr #30
   1b1a4:	mov	r2, r1
   1b1a8:	mov	r1, r0
   1b1ac:	mov	r0, #3
   1b1b0:	b	11948 <__fxstat@plt>

Disassembly of section .fini:

0001b1b4 <.fini>:
   1b1b4:	push	{r3, lr}
   1b1b8:	pop	{r3, pc}
