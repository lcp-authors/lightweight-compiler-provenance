
../repos/stcorp-coda-3a25f25/CMakeFiles/TestEndianess.bin:     file format elf32-littlearm


Disassembly of section .init:

0001052c <.init>:
   1052c:	push	{r3, lr}
   10530:	bl	105ac <_start@@Base+0x3c>
   10534:	pop	{r3, pc}

Disassembly of section .plt:

00010538 <__libc_start_main@plt-0x14>:
   10538:	push	{lr}		; (str lr, [sp, #-4]!)
   1053c:	ldr	lr, [pc, #4]	; 10548 <__libc_start_main@plt-0x4>
   10540:	add	lr, pc, lr
   10544:	ldr	pc, [lr, #8]!
   10548:			; <UNDEFINED> instruction: 0x00010ab8

0001054c <__libc_start_main@plt>:
   1054c:	add	ip, pc, #0, 12
   10550:	add	ip, ip, #16, 20	; 0x10000
   10554:	ldr	pc, [ip, #2744]!	; 0xab8

00010558 <__gmon_start__@plt>:
   10558:	add	ip, pc, #0, 12
   1055c:	add	ip, ip, #16, 20	; 0x10000
   10560:	ldr	pc, [ip, #2736]!	; 0xab0

00010564 <abort@plt>:
   10564:	add	ip, pc, #0, 12
   10568:	add	ip, ip, #16, 20	; 0x10000
   1056c:	ldr	pc, [ip, #2728]!	; 0xaa8

Disassembly of section .text:

00010570 <_start@@Base>:
   10570:	mov	fp, #0
   10574:	mov	lr, #0
   10578:	pop	{r1}		; (ldr r1, [sp], #4)
   1057c:	mov	r2, sp
   10580:	push	{r2}		; (str r2, [sp, #-4]!)
   10584:	push	{r0}		; (str r0, [sp, #-4]!)
   10588:	ldr	ip, [pc, #16]	; 105a0 <_start@@Base+0x30>
   1058c:	push	{ip}		; (str ip, [sp, #-4]!)
   10590:	ldr	r0, [pc, #12]	; 105a4 <_start@@Base+0x34>
   10594:	ldr	r3, [pc, #12]	; 105a8 <_start@@Base+0x38>
   10598:	bl	1054c <__libc_start_main@plt>
   1059c:	bl	10564 <abort@plt>
   105a0:	andeq	r0, r1, r4, asr r7
   105a4:	andeq	r0, r1, r0, ror #12
   105a8:	strdeq	r0, [r1], -r4
   105ac:	ldr	r3, [pc, #20]	; 105c8 <_start@@Base+0x58>
   105b0:	ldr	r2, [pc, #20]	; 105cc <_start@@Base+0x5c>
   105b4:	add	r3, pc, r3
   105b8:	ldr	r2, [r3, r2]
   105bc:	cmp	r2, #0
   105c0:	bxeq	lr
   105c4:	b	10558 <__gmon_start__@plt>
   105c8:	andeq	r0, r1, r4, asr #20
   105cc:	andeq	r0, r0, ip, lsl r0
   105d0:	ldr	r0, [pc, #24]	; 105f0 <_start@@Base+0x80>
   105d4:	ldr	r3, [pc, #24]	; 105f4 <_start@@Base+0x84>
   105d8:	cmp	r3, r0
   105dc:	bxeq	lr
   105e0:	ldr	r3, [pc, #16]	; 105f8 <_start@@Base+0x88>
   105e4:	cmp	r3, #0
   105e8:	bxeq	lr
   105ec:	bx	r3
   105f0:	andeq	r1, r2, ip, lsr #32
   105f4:	andeq	r1, r2, ip, lsr #32
   105f8:	andeq	r0, r0, r0
   105fc:	ldr	r0, [pc, #36]	; 10628 <_start@@Base+0xb8>
   10600:	ldr	r1, [pc, #36]	; 1062c <_start@@Base+0xbc>
   10604:	sub	r1, r1, r0
   10608:	asr	r1, r1, #2
   1060c:	add	r1, r1, r1, lsr #31
   10610:	asrs	r1, r1, #1
   10614:	bxeq	lr
   10618:	ldr	r3, [pc, #16]	; 10630 <_start@@Base+0xc0>
   1061c:	cmp	r3, #0
   10620:	bxeq	lr
   10624:	bx	r3
   10628:	andeq	r1, r2, ip, lsr #32
   1062c:	andeq	r1, r2, ip, lsr #32
   10630:	andeq	r0, r0, r0
   10634:	push	{r4, lr}
   10638:	ldr	r4, [pc, #24]	; 10658 <_start@@Base+0xe8>
   1063c:	ldrb	r3, [r4]
   10640:	cmp	r3, #0
   10644:	popne	{r4, pc}
   10648:	bl	105d0 <_start@@Base+0x60>
   1064c:	mov	r3, #1
   10650:	strb	r3, [r4]
   10654:	pop	{r4, pc}
   10658:	andeq	r1, r2, ip, lsr #32
   1065c:	b	105fc <_start@@Base+0x8c>

00010660 <main@@Base>:
   10660:	push	{fp}		; (str fp, [sp, #-4]!)
   10664:	add	fp, sp, #0
   10668:	sub	sp, sp, #20
   1066c:	str	r0, [fp, #-16]
   10670:	str	r1, [fp, #-20]	; 0xffffffec
   10674:	ldr	r3, [pc, #108]	; 106e8 <main@@Base+0x88>
   10678:	add	r3, pc, r3
   1067c:	mov	r2, #0
   10680:	str	r2, [fp, #-8]
   10684:	ldr	r2, [pc, #96]	; 106ec <main@@Base+0x8c>
   10688:	ldr	r1, [r3, r2]
   1068c:	ldr	r2, [fp, #-16]
   10690:	lsl	r2, r2, #1
   10694:	add	r2, r1, r2
   10698:	ldrh	r2, [r2]
   1069c:	mov	r1, r2
   106a0:	ldr	r2, [fp, #-8]
   106a4:	add	r2, r2, r1
   106a8:	str	r2, [fp, #-8]
   106ac:	ldr	r2, [pc, #60]	; 106f0 <main@@Base+0x90>
   106b0:	ldr	r2, [r3, r2]
   106b4:	ldr	r3, [fp, #-16]
   106b8:	lsl	r3, r3, #1
   106bc:	add	r3, r2, r3
   106c0:	ldrh	r3, [r3]
   106c4:	mov	r2, r3
   106c8:	ldr	r3, [fp, #-8]
   106cc:	add	r3, r3, r2
   106d0:	str	r3, [fp, #-8]
   106d4:	ldr	r3, [fp, #-8]
   106d8:	mov	r0, r3
   106dc:	add	sp, fp, #0
   106e0:	pop	{fp}		; (ldr fp, [sp], #4)
   106e4:	bx	lr
   106e8:	andeq	r0, r1, r0, lsl #19
   106ec:	andeq	r0, r0, r0, lsr #32
   106f0:	andeq	r0, r0, r8, lsl r0

000106f4 <__libc_csu_init@@Base>:
   106f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   106f8:	mov	r7, r0
   106fc:	ldr	r6, [pc, #72]	; 1074c <__libc_csu_init@@Base+0x58>
   10700:	ldr	r5, [pc, #72]	; 10750 <__libc_csu_init@@Base+0x5c>
   10704:	add	r6, pc, r6
   10708:	add	r5, pc, r5
   1070c:	sub	r6, r6, r5
   10710:	mov	r8, r1
   10714:	mov	r9, r2
   10718:	bl	1052c <__libc_start_main@plt-0x20>
   1071c:	asrs	r6, r6, #2
   10720:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10724:	mov	r4, #0
   10728:	add	r4, r4, #1
   1072c:	ldr	r3, [r5], #4
   10730:	mov	r2, r9
   10734:	mov	r1, r8
   10738:	mov	r0, r7
   1073c:	blx	r3
   10740:	cmp	r6, r4
   10744:	bne	10728 <__libc_csu_init@@Base+0x34>
   10748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1074c:	andeq	r0, r1, r8, lsl #16
   10750:	andeq	r0, r1, r0, lsl #16

00010754 <__libc_csu_fini@@Base>:
   10754:	bx	lr

Disassembly of section .fini:

00010758 <.fini>:
   10758:	push	{r3, lr}
   1075c:	pop	{r3, pc}
