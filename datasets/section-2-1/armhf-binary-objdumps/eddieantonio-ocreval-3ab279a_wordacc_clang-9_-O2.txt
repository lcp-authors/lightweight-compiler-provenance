
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	10d34 <__assert_fail@plt+0x48>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r8, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #24, 20	; 0x18000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #24, 20	; 0x18000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #24, 20	; 0x18000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <fopen@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #24, 20	; 0x18000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <free@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #24, 20	; 0x18000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <utf8proc_get_property@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #24, 20	; 0x18000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <fgets@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #24, 20	; 0x18000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <utf8proc_encode_char@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #24, 20	; 0x18000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <strdup@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #24, 20	; 0x18000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <rewind@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #24, 20	; 0x18000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <unlink@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #24, 20	; 0x18000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <utf8proc_tolower@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #24, 20	; 0x18000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <__xstat@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #24, 20	; 0x18000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <fwrite@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #24, 20	; 0x18000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fread@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #24, 20	; 0x18000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <utf8proc_iterate@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #24, 20	; 0x18000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <malloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #24, 20	; 0x18000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__libc_start_main@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #24, 20	; 0x18000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <__sysv_signal@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #24, 20	; 0x18000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <__gmon_start__@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #24, 20	; 0x18000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <getpid@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #24, 20	; 0x18000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <exit@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #24, 20	; 0x18000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <bcmp@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <utf8proc_category@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <strlen@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <fprintf@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <__isoc99_sscanf@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #24, 20	; 0x18000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <fclose@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #24, 20	; 0x18000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <utf8proc_NFC@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #24, 20	; 0x18000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <fputc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #24, 20	; 0x18000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <sprintf@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <utf8proc_errmsg@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fputs@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <strncmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <abort@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <getc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <__assert_fail@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010cf8 <error@@Base-0x1d64>:
   10cf8:	mov	fp, #0
   10cfc:	mov	lr, #0
   10d00:	pop	{r1}		; (ldr r1, [sp], #4)
   10d04:	mov	r2, sp
   10d08:	push	{r2}		; (str r2, [sp, #-4]!)
   10d0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d10:	ldr	ip, [pc, #16]	; 10d28 <__assert_fail@plt+0x3c>
   10d14:	push	{ip}		; (str ip, [sp, #-4]!)
   10d18:	ldr	r0, [pc, #12]	; 10d2c <__assert_fail@plt+0x40>
   10d1c:	ldr	r3, [pc, #12]	; 10d30 <__assert_fail@plt+0x44>
   10d20:	bl	10c08 <__libc_start_main@plt>
   10d24:	bl	10cd4 <abort@plt>
   10d28:	andeq	r4, r1, r0, lsl #20
   10d2c:	andeq	r1, r1, ip, lsr fp
   10d30:	andeq	r4, r1, r0, lsr #19
   10d34:	ldr	r3, [pc, #20]	; 10d50 <__assert_fail@plt+0x64>
   10d38:	ldr	r2, [pc, #20]	; 10d54 <__assert_fail@plt+0x68>
   10d3c:	add	r3, pc, r3
   10d40:	ldr	r2, [r3, r2]
   10d44:	cmp	r2, #0
   10d48:	bxeq	lr
   10d4c:	b	10c20 <__gmon_start__@plt>
   10d50:			; <UNDEFINED> instruction: 0x000182bc
   10d54:	ldrdeq	r0, [r0], -r4
   10d58:	ldr	r0, [pc, #24]	; 10d78 <__assert_fail@plt+0x8c>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <__assert_fail@plt+0x90>
   10d60:	cmp	r3, r0
   10d64:	bxeq	lr
   10d68:	ldr	r3, [pc, #16]	; 10d80 <__assert_fail@plt+0x94>
   10d6c:	cmp	r3, #0
   10d70:	bxeq	lr
   10d74:	bx	r3
   10d78:	andeq	r9, r2, r8, asr #2
   10d7c:	andeq	r9, r2, r8, asr #2
   10d80:	andeq	r0, r0, r0
   10d84:	ldr	r0, [pc, #36]	; 10db0 <__assert_fail@plt+0xc4>
   10d88:	ldr	r1, [pc, #36]	; 10db4 <__assert_fail@plt+0xc8>
   10d8c:	sub	r1, r1, r0
   10d90:	asr	r1, r1, #2
   10d94:	add	r1, r1, r1, lsr #31
   10d98:	asrs	r1, r1, #1
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0xcc>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r9, r2, r8, asr #2
   10db4:	andeq	r9, r2, r8, asr #2
   10db8:	andeq	r0, r0, r0
   10dbc:	push	{r4, lr}
   10dc0:	ldr	r4, [pc, #24]	; 10de0 <__assert_fail@plt+0xf4>
   10dc4:	ldrb	r3, [r4]
   10dc8:	cmp	r3, #0
   10dcc:	popne	{r4, pc}
   10dd0:	bl	10d58 <__assert_fail@plt+0x6c>
   10dd4:	mov	r3, #1
   10dd8:	strb	r3, [r4]
   10ddc:	pop	{r4, pc}
   10de0:	andeq	r9, r2, r8, asr #2
   10de4:	b	10d84 <__assert_fail@plt+0x98>
   10de8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10dec:	add	fp, sp, #24
   10df0:	mov	r9, r0
   10df4:	ldr	r0, [pc, #124]	; 10e78 <__assert_fail@plt+0x18c>
   10df8:	mov	r8, r1
   10dfc:	mov	r1, #4
   10e00:	ldr	r0, [pc, r0]
   10e04:	add	r4, r0, r9, lsl #4
   10e08:	ldr	r0, [r4, #12]
   10e0c:	add	r0, r0, #1
   10e10:	bl	1258c <__assert_fail@plt+0x18a0>
   10e14:	ldr	r1, [r4, #12]
   10e18:	cmp	r1, #1
   10e1c:	blt	10e6c <__assert_fail@plt+0x180>
   10e20:	ldr	ip, [pc, #84]	; 10e7c <__assert_fail@plt+0x190>
   10e24:	rsb	r3, r9, #1
   10e28:	mov	r4, #0
   10e2c:	mov	r2, #0
   10e30:	mov	r7, #0
   10e34:	ldr	ip, [pc, ip]
   10e38:	ldr	r6, [ip, r9, lsl #2]
   10e3c:	add	r7, r7, #1
   10e40:	ldr	r5, [r6, r4]!
   10e44:	add	r4, r4, #8
   10e48:	add	r5, r5, r3
   10e4c:	ldrb	r5, [r5, #12]
   10e50:	cmp	r5, #0
   10e54:	strne	r6, [r0, r2, lsl #2]
   10e58:	addne	r2, r2, #1
   10e5c:	cmp	r7, r1
   10e60:	blt	10e38 <__assert_fail@plt+0x14c>
   10e64:	str	r2, [r8]
   10e68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e6c:	mov	r2, #0
   10e70:	str	r2, [r8]
   10e74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e78:			; <UNDEFINED> instruction: 0x000182b8
   10e7c:	andeq	r8, r1, r8, asr #5
   10e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e84:	add	fp, sp, #28
   10e88:	sub	sp, sp, #4
   10e8c:	mov	sl, r0
   10e90:	ldr	r1, [r0]
   10e94:	ldr	r0, [pc, #668]	; 11138 <__assert_fail@plt+0x44c>
   10e98:	ldr	r0, [pc, r0]
   10e9c:	ldr	r4, [pc, #664]	; 1113c <__assert_fail@plt+0x450>
   10ea0:	ldr	r4, [pc, r4]
   10ea4:	mov	r2, r4
   10ea8:	bl	141ac <error@@Base+0x1750>
   10eac:	ldrb	r0, [r4, #11]
   10eb0:	cmp	r0, #0
   10eb4:	bne	1112c <__assert_fail@plt+0x440>
   10eb8:	ldr	r4, [pc, #640]	; 11140 <__assert_fail@plt+0x454>
   10ebc:	ldr	r4, [pc, r4]
   10ec0:	ldr	r1, [pc, #636]	; 11144 <__assert_fail@plt+0x458>
   10ec4:	ldr	r1, [pc, r1]
   10ec8:	mov	r0, r4
   10ecc:	bl	13958 <error@@Base+0xefc>
   10ed0:	ldr	r0, [r4, #12]
   10ed4:	mov	r1, #8
   10ed8:	add	r0, r0, #1
   10edc:	bl	1258c <__assert_fail@plt+0x18a0>
   10ee0:	ldr	r9, [pc, #608]	; 11148 <__assert_fail@plt+0x45c>
   10ee4:	ldr	r9, [pc, r9]
   10ee8:	ldr	r5, [r4]
   10eec:	cmp	r5, #0
   10ef0:	str	r0, [r9]
   10ef4:	beq	10f68 <__assert_fail@plt+0x27c>
   10ef8:	ldr	r7, [pc, #588]	; 1114c <__assert_fail@plt+0x460>
   10efc:	mov	r8, #0
   10f00:	mov	r4, #1
   10f04:	ldr	r7, [pc, r7]
   10f08:	b	10f28 <__assert_fail@plt+0x23c>
   10f0c:	strb	r4, [r6, #12]
   10f10:	ldr	r0, [r9]
   10f14:	str	r6, [r0, r8]
   10f18:	add	r8, r8, #8
   10f1c:	ldr	r5, [r5, #4]
   10f20:	cmp	r5, #0
   10f24:	beq	10f68 <__assert_fail@plt+0x27c>
   10f28:	ldr	r1, [r5, #8]
   10f2c:	mov	r0, r7
   10f30:	bl	12314 <__assert_fail@plt+0x1628>
   10f34:	mov	r6, r0
   10f38:	cmp	r0, #0
   10f3c:	bne	10f0c <__assert_fail@plt+0x220>
   10f40:	mov	r0, #1
   10f44:	mov	r1, #16
   10f48:	bl	1258c <__assert_fail@plt+0x18a0>
   10f4c:	mov	r6, r0
   10f50:	ldr	r0, [r5, #8]
   10f54:	mov	r1, r6
   10f58:	str	r0, [r6, #8]
   10f5c:	mov	r0, r7
   10f60:	bl	123a4 <__assert_fail@plt+0x16b8>
   10f64:	b	10f0c <__assert_fail@plt+0x220>
   10f68:	ldr	r1, [sl, #4]
   10f6c:	ldr	r0, [pc, #476]	; 11150 <__assert_fail@plt+0x464>
   10f70:	ldr	r0, [pc, r0]
   10f74:	ldr	r2, [pc, #472]	; 11154 <__assert_fail@plt+0x468>
   10f78:	ldr	r2, [pc, r2]
   10f7c:	add	r5, r0, #16
   10f80:	mov	r0, r5
   10f84:	bl	141ac <error@@Base+0x1750>
   10f88:	ldr	sl, [pc, #456]	; 11158 <__assert_fail@plt+0x46c>
   10f8c:	mov	r1, r5
   10f90:	ldr	sl, [pc, sl]
   10f94:	add	r0, sl, #16
   10f98:	bl	13958 <error@@Base+0xefc>
   10f9c:	ldr	r0, [sl, #28]
   10fa0:	mov	r1, #8
   10fa4:	add	r0, r0, #1
   10fa8:	bl	1258c <__assert_fail@plt+0x18a0>
   10fac:	ldr	r7, [sl, #16]
   10fb0:	str	r0, [r9, #4]
   10fb4:	cmp	r7, #0
   10fb8:	beq	1102c <__assert_fail@plt+0x340>
   10fbc:	ldr	r5, [pc, #408]	; 1115c <__assert_fail@plt+0x470>
   10fc0:	mov	r4, #0
   10fc4:	mov	r8, #1
   10fc8:	ldr	r5, [pc, r5]
   10fcc:	b	10fec <__assert_fail@plt+0x300>
   10fd0:	strb	r8, [r6, #13]
   10fd4:	ldr	r0, [r9, #4]
   10fd8:	str	r6, [r0, r4]
   10fdc:	add	r4, r4, #8
   10fe0:	ldr	r7, [r7, #4]
   10fe4:	cmp	r7, #0
   10fe8:	beq	1102c <__assert_fail@plt+0x340>
   10fec:	ldr	r1, [r7, #8]
   10ff0:	mov	r0, r5
   10ff4:	bl	12314 <__assert_fail@plt+0x1628>
   10ff8:	mov	r6, r0
   10ffc:	cmp	r0, #0
   11000:	bne	10fd0 <__assert_fail@plt+0x2e4>
   11004:	mov	r0, #1
   11008:	mov	r1, #16
   1100c:	bl	1258c <__assert_fail@plt+0x18a0>
   11010:	mov	r6, r0
   11014:	ldr	r0, [r7, #8]
   11018:	mov	r1, r6
   1101c:	str	r0, [r6, #8]
   11020:	mov	r0, r5
   11024:	bl	123a4 <__assert_fail@plt+0x16b8>
   11028:	b	10fd0 <__assert_fail@plt+0x2e4>
   1102c:	ldr	r0, [sl, #12]
   11030:	mov	r1, #4
   11034:	add	r0, r0, #1
   11038:	bl	1258c <__assert_fail@plt+0x18a0>
   1103c:	ldr	r1, [sl, #12]
   11040:	cmp	r1, #1
   11044:	blt	110a0 <__assert_fail@plt+0x3b4>
   11048:	mov	r3, #0
   1104c:	mov	r2, #0
   11050:	ldr	r7, [r9]
   11054:	ldr	r6, [r7, r3]!
   11058:	add	r3, r3, #8
   1105c:	ldrb	r6, [r6, #13]
   11060:	cmp	r6, #0
   11064:	strne	r7, [r0, r2, lsl #2]
   11068:	addne	r2, r2, #1
   1106c:	subs	r1, r1, #1
   11070:	bne	11050 <__assert_fail@plt+0x364>
   11074:	ldr	r1, [pc, #228]	; 11160 <__assert_fail@plt+0x474>
   11078:	cmp	r2, #65536	; 0x10000
   1107c:	ldr	r1, [pc, r1]
   11080:	str	r0, [r1]
   11084:	ldr	r0, [pc, #216]	; 11164 <__assert_fail@plt+0x478>
   11088:	ldr	r0, [pc, r0]
   1108c:	str	r2, [r0]
   11090:	blt	110bc <__assert_fail@plt+0x3d0>
   11094:	ldr	r0, [pc, #204]	; 11168 <__assert_fail@plt+0x47c>
   11098:	add	r0, pc, r0
   1109c:	bl	12a5c <error@@Base>
   110a0:	ldr	r1, [pc, #196]	; 1116c <__assert_fail@plt+0x480>
   110a4:	ldr	r1, [pc, r1]
   110a8:	str	r0, [r1]
   110ac:	mov	r1, #0
   110b0:	ldr	r0, [pc, #184]	; 11170 <__assert_fail@plt+0x484>
   110b4:	ldr	r0, [pc, r0]
   110b8:	str	r1, [r0]
   110bc:	ldr	r0, [sl, #28]
   110c0:	mov	r1, #4
   110c4:	add	r0, r0, #1
   110c8:	bl	1258c <__assert_fail@plt+0x18a0>
   110cc:	ldr	r1, [sl, #28]
   110d0:	cmp	r1, #1
   110d4:	blt	11108 <__assert_fail@plt+0x41c>
   110d8:	mov	r3, #0
   110dc:	mov	r2, #0
   110e0:	ldr	r7, [r9, #4]
   110e4:	ldr	r6, [r7, r3]!
   110e8:	add	r3, r3, #8
   110ec:	ldrb	r6, [r6, #12]
   110f0:	cmp	r6, #0
   110f4:	strne	r7, [r0, r2, lsl #2]
   110f8:	addne	r2, r2, #1
   110fc:	subs	r1, r1, #1
   11100:	bne	110e0 <__assert_fail@plt+0x3f4>
   11104:	b	1110c <__assert_fail@plt+0x420>
   11108:	mov	r2, #0
   1110c:	ldr	r1, [pc, #96]	; 11174 <__assert_fail@plt+0x488>
   11110:	ldr	r1, [pc, r1]
   11114:	str	r0, [r1]
   11118:	ldr	r0, [pc, #88]	; 11178 <__assert_fail@plt+0x48c>
   1111c:	ldr	r0, [pc, r0]
   11120:	str	r2, [r0]
   11124:	sub	sp, fp, #28
   11128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1112c:	ldr	r0, [pc, #72]	; 1117c <__assert_fail@plt+0x490>
   11130:	add	r0, pc, r0
   11134:	bl	12a5c <error@@Base>
   11138:	andeq	r8, r1, r0, lsl #4
   1113c:	andeq	r8, r1, r4, lsl r2
   11140:	strdeq	r8, [r1], -ip
   11144:	ldrdeq	r8, [r1], -r4
   11148:	andeq	r8, r1, r8, lsl r2
   1114c:	andeq	r8, r1, r0, asr #3
   11150:	andeq	r8, r1, r8, lsr #2
   11154:	andeq	r8, r1, ip, lsr r1
   11158:	andeq	r8, r1, r8, lsr #2
   1115c:	strdeq	r8, [r1], -ip
   11160:	andeq	r8, r1, ip, rrx
   11164:	andeq	r8, r1, r4, rrx
   11168:	andeq	r3, r0, sl, lsl #19
   1116c:	andeq	r8, r1, r4, asr #32
   11170:	andeq	r8, r1, r8, lsr r0
   11174:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11178:	andeq	r7, r1, ip, lsl #31
   1117c:	ldrdeq	r3, [r0], -r8
   11180:	push	{fp, lr}
   11184:	mov	fp, sp
   11188:	cmp	r1, #0
   1118c:	beq	111fc <__assert_fail@plt+0x510>
   11190:	ldr	r3, [r1, #8]
   11194:	mov	ip, r0
   11198:	mov	r0, #0
   1119c:	rsb	lr, r3, #0
   111a0:	cmp	lr, ip
   111a4:	bge	111c8 <__assert_fail@plt+0x4dc>
   111a8:	sub	lr, ip, #1
   111ac:	add	r0, r3, lr
   111b0:	ldr	r3, [r1, #12]
   111b4:	bic	r0, r0, #1
   111b8:	add	r0, r3, r0
   111bc:	ldrh	r0, [r0]
   111c0:	str	lr, [r2]
   111c4:	ldr	r3, [r1, #8]
   111c8:	cmp	r3, ip
   111cc:	pople	{fp, pc}
   111d0:	ldr	r1, [r1, #12]
   111d4:	add	ip, ip, #1
   111d8:	add	r3, r3, ip
   111dc:	bic	r3, r3, #1
   111e0:	add	r1, r1, r3
   111e4:	ldrh	r1, [r1]
   111e8:	add	r1, r1, #1
   111ec:	cmp	r1, r0
   111f0:	movcs	r0, r1
   111f4:	strcs	ip, [r2]
   111f8:	pop	{fp, pc}
   111fc:	mov	r0, #0
   11200:	pop	{fp, pc}
   11204:	push	{r4, r5, r6, sl, fp, lr}
   11208:	add	fp, sp, #16
   1120c:	ldr	r2, [r1]
   11210:	cmp	r2, #0
   11214:	beq	1125c <__assert_fail@plt+0x570>
   11218:	ldr	r5, [r2, #8]
   1121c:	mov	r3, #0
   11220:	rsb	r4, r5, #0
   11224:	cmp	r4, r0
   11228:	blt	11264 <__assert_fail@plt+0x578>
   1122c:	cmp	r5, r0
   11230:	ble	11284 <__assert_fail@plt+0x598>
   11234:	ldr	r2, [r2, #12]
   11238:	add	r5, r0, r5
   1123c:	add	r5, r5, #1
   11240:	bic	r5, r5, #1
   11244:	add	r2, r2, r5
   11248:	ldrh	r2, [r2]
   1124c:	add	r2, r2, #1
   11250:	cmp	r2, r3
   11254:	movcc	r2, r3
   11258:	b	11288 <__assert_fail@plt+0x59c>
   1125c:	mov	r2, #0
   11260:	b	11288 <__assert_fail@plt+0x59c>
   11264:	ldr	r4, [r2, #12]
   11268:	add	r3, r0, r5
   1126c:	sub	r3, r3, #1
   11270:	bic	r3, r3, #1
   11274:	add	r3, r4, r3
   11278:	ldrh	r3, [r3]
   1127c:	cmp	r5, r0
   11280:	bgt	11234 <__assert_fail@plt+0x548>
   11284:	mov	r2, r3
   11288:	ldr	r3, [pc, #220]	; 1136c <__assert_fail@plt+0x680>
   1128c:	add	r4, r2, r0
   11290:	ldr	r3, [pc, r3]
   11294:	ldr	ip, [r3]
   11298:	ldr	r3, [pc, #208]	; 11370 <__assert_fail@plt+0x684>
   1129c:	ldr	r3, [pc, r3]
   112a0:	ldr	lr, [r3]
   112a4:	cmp	r2, lr
   112a8:	cmplt	r4, ip
   112ac:	blt	11300 <__assert_fail@plt+0x614>
   112b0:	mov	r3, r2
   112b4:	cmp	r3, lr
   112b8:	bne	112cc <__assert_fail@plt+0x5e0>
   112bc:	ldr	r6, [pc, #184]	; 1137c <__assert_fail@plt+0x690>
   112c0:	add	r2, r0, #1
   112c4:	ldr	r6, [pc, r6]
   112c8:	str	r2, [r6]
   112cc:	cmp	r4, ip
   112d0:	bne	112e4 <__assert_fail@plt+0x5f8>
   112d4:	ldr	r6, [pc, #164]	; 11380 <__assert_fail@plt+0x694>
   112d8:	sub	r2, r0, #1
   112dc:	ldr	r6, [pc, r6]
   112e0:	str	r2, [r6]
   112e4:	ldr	r2, [r1, #8]
   112e8:	ldr	r1, [r1, #12]
   112ec:	add	r0, r2, r0
   112f0:	bic	r0, r0, #1
   112f4:	add	r0, r1, r0
   112f8:	strh	r3, [r0]
   112fc:	pop	{r4, r5, r6, sl, fp, pc}
   11300:	ldr	r3, [pc, #108]	; 11374 <__assert_fail@plt+0x688>
   11304:	ldr	r3, [pc, r3]
   11308:	ldr	r3, [r3]
   1130c:	add	r4, r3, r0, lsl #2
   11310:	ldr	r3, [pc, #96]	; 11378 <__assert_fail@plt+0x68c>
   11314:	ldr	r3, [pc, r3]
   11318:	ldr	r5, [r3]
   1131c:	ldr	r3, [r4, r2, lsl #2]
   11320:	ldr	r6, [r5, r2, lsl #2]
   11324:	ldr	r3, [r3]
   11328:	ldr	r6, [r6]
   1132c:	cmp	r6, r3
   11330:	bne	11364 <__assert_fail@plt+0x678>
   11334:	add	r3, r2, #1
   11338:	cmp	r3, lr
   1133c:	bge	11354 <__assert_fail@plt+0x668>
   11340:	add	r2, r0, r2
   11344:	add	r2, r2, #1
   11348:	cmp	r2, ip
   1134c:	mov	r2, r3
   11350:	blt	1131c <__assert_fail@plt+0x630>
   11354:	add	r4, r0, r3
   11358:	cmp	r3, lr
   1135c:	beq	112bc <__assert_fail@plt+0x5d0>
   11360:	b	112cc <__assert_fail@plt+0x5e0>
   11364:	add	r4, r0, r2
   11368:	b	112b0 <__assert_fail@plt+0x5c4>
   1136c:	andeq	r7, r1, r8, lsl lr
   11370:	andeq	r7, r1, r0, asr lr
   11374:	andeq	r7, r1, r0, lsr #27
   11378:	ldrdeq	r7, [r1], -r4
   1137c:	andeq	r7, r1, r0, lsr lr
   11380:	andeq	r7, r1, r8, lsl #28
   11384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11388:	add	fp, sp, #28
   1138c:	sub	sp, sp, #4
   11390:	ldr	r0, [pc, #232]	; 11480 <__assert_fail@plt+0x794>
   11394:	ldr	r0, [pc, r0]
   11398:	ldr	r0, [r0]
   1139c:	ldr	r7, [pc, #224]	; 11484 <__assert_fail@plt+0x798>
   113a0:	ldr	r7, [pc, r7]
   113a4:	str	r0, [r7]
   113a8:	ldr	r9, [pc, #216]	; 11488 <__assert_fail@plt+0x79c>
   113ac:	ldr	r9, [pc, r9]
   113b0:	ldr	r1, [r9]
   113b4:	ldr	r4, [pc, #208]	; 1148c <__assert_fail@plt+0x7a0>
   113b8:	ldr	r4, [pc, r4]
   113bc:	rsb	r2, r1, #0
   113c0:	sub	r0, r0, r1
   113c4:	cmp	r0, r2
   113c8:	str	r2, [r4]
   113cc:	blt	11478 <__assert_fail@plt+0x78c>
   113d0:	ldr	sl, [pc, #184]	; 11490 <__assert_fail@plt+0x7a4>
   113d4:	mvn	r8, #0
   113d8:	ldr	sl, [pc, sl]
   113dc:	b	11400 <__assert_fail@plt+0x714>
   113e0:	ldr	r0, [r9]
   113e4:	ldr	r1, [pc, #168]	; 11494 <__assert_fail@plt+0x7a8>
   113e8:	ldr	r1, [pc, r1]
   113ec:	ldr	r1, [r1]
   113f0:	sub	r0, r1, r0
   113f4:	ldr	r1, [r4]
   113f8:	cmp	r1, r0
   113fc:	bgt	11478 <__assert_fail@plt+0x78c>
   11400:	mov	r0, #1
   11404:	mov	r1, #16
   11408:	mov	r6, r8
   1140c:	bl	1258c <__assert_fail@plt+0x18a0>
   11410:	add	r8, r8, #1
   11414:	mov	r5, r0
   11418:	mov	r1, #2
   1141c:	str	r8, [r0, #8]
   11420:	add	r0, r6, #2
   11424:	bl	1258c <__assert_fail@plt+0x18a0>
   11428:	str	r0, [r5, #12]
   1142c:	mov	r0, sl
   11430:	mov	r1, r5
   11434:	bl	11ea0 <__assert_fail@plt+0x11b4>
   11438:	mvn	r6, r6
   1143c:	cmp	r8, r6
   11440:	bge	11454 <__assert_fail@plt+0x768>
   11444:	b	113e0 <__assert_fail@plt+0x6f4>
   11448:	add	r6, r6, #2
   1144c:	cmp	r6, r8
   11450:	bgt	113e0 <__assert_fail@plt+0x6f4>
   11454:	ldr	r0, [r4]
   11458:	cmp	r6, r0
   1145c:	blt	11448 <__assert_fail@plt+0x75c>
   11460:	ldr	r0, [r7]
   11464:	cmp	r6, r0
   11468:	movle	r0, r6
   1146c:	movle	r1, r5
   11470:	blle	11204 <__assert_fail@plt+0x518>
   11474:	b	11448 <__assert_fail@plt+0x75c>
   11478:	sub	sp, fp, #28
   1147c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11480:	andeq	r7, r1, r4, lsl sp
   11484:	andeq	r7, r1, r4, asr #26
   11488:	andeq	r7, r1, r0, asr #26
   1148c:	andeq	r7, r1, ip, lsr sp
   11490:	andeq	r7, r1, r8, ror #25
   11494:	andeq	r7, r1, r0, asr #25
   11498:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1149c:	add	fp, sp, #24
   114a0:	ldr	r0, [pc, #372]	; 1161c <__assert_fail@plt+0x930>
   114a4:	ldr	r0, [pc, r0]
   114a8:	ldr	r4, [r0, #4]
   114ac:	cmp	r4, #0
   114b0:	beq	11618 <__assert_fail@plt+0x92c>
   114b4:	ldr	r0, [pc, #356]	; 11620 <__assert_fail@plt+0x934>
   114b8:	mov	r2, #1
   114bc:	ldr	r0, [pc, r0]
   114c0:	ldr	r0, [r0]
   114c4:	ldr	r1, [pc, #344]	; 11624 <__assert_fail@plt+0x938>
   114c8:	ldr	r1, [pc, r1]
   114cc:	ldr	r1, [r1]
   114d0:	sub	lr, r1, r0
   114d4:	ldr	r0, [pc, #332]	; 11628 <__assert_fail@plt+0x93c>
   114d8:	ldr	r0, [pc, r0]
   114dc:	ldr	r0, [r0]
   114e0:	sub	ip, r0, #8
   114e4:	sub	r1, r0, #4
   114e8:	b	114f8 <__assert_fail@plt+0x80c>
   114ec:	ldr	r4, [r0]
   114f0:	cmp	r4, #0
   114f4:	beq	11618 <__assert_fail@plt+0x92c>
   114f8:	mov	r0, r4
   114fc:	ldr	r4, [r4]
   11500:	ldr	r3, [r0, #8]
   11504:	ldr	r5, [r0, #12]
   11508:	cmp	r4, #0
   1150c:	add	r3, r3, lr
   11510:	bic	r3, r3, #1
   11514:	add	r3, r5, r3
   11518:	ldrh	r3, [r3]
   1151c:	beq	11590 <__assert_fail@plt+0x8a4>
   11520:	ldr	r5, [r4, #8]
   11524:	mov	r7, #0
   11528:	rsb	r6, r5, #0
   1152c:	cmp	lr, r6
   11530:	mov	r6, lr
   11534:	ble	11550 <__assert_fail@plt+0x864>
   11538:	sub	r6, lr, #1
   1153c:	add	r7, r5, r6
   11540:	bic	r8, r7, #1
   11544:	ldr	r7, [r4, #12]
   11548:	add	r7, r7, r8
   1154c:	ldrh	r7, [r7]
   11550:	cmp	r5, lr
   11554:	ble	115a0 <__assert_fail@plt+0x8b4>
   11558:	add	lr, lr, #1
   1155c:	add	r5, r5, lr
   11560:	bic	r8, r5, #1
   11564:	ldr	r5, [r4, #12]
   11568:	add	r5, r5, r8
   1156c:	ldrh	r5, [r5]
   11570:	add	r5, r5, #1
   11574:	cmp	r5, r7
   11578:	movcs	r6, lr
   1157c:	movcc	r5, r7
   11580:	mov	lr, r6
   11584:	cmp	r5, r3
   11588:	bge	114f0 <__assert_fail@plt+0x804>
   1158c:	b	115b0 <__assert_fail@plt+0x8c4>
   11590:	mov	r5, #0
   11594:	cmp	r5, r3
   11598:	bge	114f0 <__assert_fail@plt+0x804>
   1159c:	b	115b0 <__assert_fail@plt+0x8c4>
   115a0:	mov	lr, r6
   115a4:	mov	r5, r7
   115a8:	cmp	r5, r3
   115ac:	bge	114f0 <__assert_fail@plt+0x804>
   115b0:	mvn	r4, r5
   115b4:	sub	r6, r3, r5
   115b8:	add	r4, r4, r3
   115bc:	ands	r6, r6, #3
   115c0:	beq	115d8 <__assert_fail@plt+0x8ec>
   115c4:	ldr	r7, [r1, r3, lsl #2]
   115c8:	subs	r6, r6, #1
   115cc:	sub	r3, r3, #1
   115d0:	strb	r2, [r7, #4]
   115d4:	bne	115c4 <__assert_fail@plt+0x8d8>
   115d8:	cmp	r4, #3
   115dc:	bcc	114ec <__assert_fail@plt+0x800>
   115e0:	add	r4, ip, r3, lsl #2
   115e4:	ldr	r6, [r4, #4]
   115e8:	sub	r3, r3, #4
   115ec:	cmp	r3, r5
   115f0:	strb	r2, [r6, #4]
   115f4:	ldr	r6, [r4]
   115f8:	strb	r2, [r6, #4]
   115fc:	ldr	r6, [r4, #-4]
   11600:	strb	r2, [r6, #4]
   11604:	ldr	r6, [r4, #-8]
   11608:	sub	r4, r4, #16
   1160c:	strb	r2, [r6, #4]
   11610:	bgt	115e4 <__assert_fail@plt+0x8f8>
   11614:	b	114ec <__assert_fail@plt+0x800>
   11618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1161c:	andeq	r7, r1, ip, lsl ip
   11620:	andeq	r7, r1, r0, lsr ip
   11624:	andeq	r7, r1, r0, ror #23
   11628:	andeq	r7, r1, r0, lsl ip
   1162c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11630:	add	fp, sp, #28
   11634:	sub	sp, sp, #4
   11638:	mov	sl, r2
   1163c:	mov	r9, r1
   11640:	mov	r6, r0
   11644:	bl	124b4 <__assert_fail@plt+0x17c8>
   11648:	movw	r0, #8052	; 0x1f74
   1164c:	ldr	r0, [r6, r0]
   11650:	cmp	r0, #1
   11654:	blt	11710 <__assert_fail@plt+0xa24>
   11658:	ldr	r8, [pc, #184]	; 11718 <__assert_fail@plt+0xa2c>
   1165c:	movw	r0, #8048	; 0x1f70
   11660:	mov	r4, #0
   11664:	add	r5, r6, r0
   11668:	ldr	r8, [pc, r8]
   1166c:	b	11680 <__assert_fail@plt+0x994>
   11670:	ldr	r0, [r5, #4]
   11674:	add	r4, r4, #1
   11678:	cmp	r4, r0
   1167c:	bge	11710 <__assert_fail@plt+0xa24>
   11680:	ldr	r0, [r5]
   11684:	ldr	r0, [r0, r4, lsl #2]
   11688:	ldr	r7, [r0, #12]
   1168c:	ldr	r6, [r0, #16]
   11690:	mov	r0, r8
   11694:	mov	r1, r7
   11698:	mov	r2, r6
   1169c:	bl	12c88 <error@@Base+0x22c>
   116a0:	mov	r0, r9
   116a4:	mov	r1, r7
   116a8:	mov	r2, r6
   116ac:	bl	12c88 <error@@Base+0x22c>
   116b0:	ldr	r0, [r5]
   116b4:	ldr	r0, [r0, r4, lsl #2]
   116b8:	ldr	r0, [r0, #8]
   116bc:	bl	10c5c <strlen@plt>
   116c0:	add	r0, r9, r0, lsl #3
   116c4:	mov	r1, r7
   116c8:	mov	r2, r6
   116cc:	bl	12c88 <error@@Base+0x22c>
   116d0:	cmp	sl, #0
   116d4:	beq	11670 <__assert_fail@plt+0x984>
   116d8:	sub	r0, r7, r6
   116dc:	mov	r1, #1
   116e0:	clz	r0, r0
   116e4:	lsr	r6, r0, #5
   116e8:	mov	r0, sl
   116ec:	mov	r2, r6
   116f0:	bl	12c88 <error@@Base+0x22c>
   116f4:	cmp	r7, #11
   116f8:	mov	r1, #1
   116fc:	mov	r2, r6
   11700:	movge	r7, #11
   11704:	add	r0, sl, r7, lsl #3
   11708:	bl	12c88 <error@@Base+0x22c>
   1170c:	b	11670 <__assert_fail@plt+0x984>
   11710:	sub	sp, fp, #28
   11714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11718:	andeq	r7, r1, ip, ror #20
   1171c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11720:	add	fp, sp, #28
   11724:	sub	sp, sp, #12
   11728:	ldr	r7, [pc, #508]	; 1192c <__assert_fail@plt+0xc40>
   1172c:	ldr	r7, [pc, r7]
   11730:	ldr	r0, [r7, #12]
   11734:	cmp	r0, #1
   11738:	blt	11924 <__assert_fail@plt+0xc38>
   1173c:	ldr	r6, [pc, #492]	; 11930 <__assert_fail@plt+0xc44>
   11740:	mov	r8, #0
   11744:	ldr	r6, [pc, r6]
   11748:	ldr	r9, [pc, #484]	; 11934 <__assert_fail@plt+0xc48>
   1174c:	ldr	r9, [pc, r9]
   11750:	add	r1, r9, #936	; 0x3a8
   11754:	add	r4, r9, #928	; 0x3a0
   11758:	str	r1, [sp, #8]
   1175c:	add	r1, r9, #944	; 0x3b0
   11760:	str	r1, [sp, #4]
   11764:	add	r1, r9, #952	; 0x3b8
   11768:	str	r1, [sp]
   1176c:	cmp	r8, r0
   11770:	blt	11788 <__assert_fail@plt+0xa9c>
   11774:	add	r8, r8, #1
   11778:	cmp	r8, r0
   1177c:	bge	11924 <__assert_fail@plt+0xc38>
   11780:	cmp	r8, r0
   11784:	bge	11774 <__assert_fail@plt+0xa88>
   11788:	ldr	r0, [r6]
   1178c:	mov	r1, #1
   11790:	add	r0, r0, r8, lsl #3
   11794:	ldrb	r0, [r0, #4]
   11798:	and	r5, r0, #1
   1179c:	mov	r0, r4
   117a0:	eor	r2, r5, #1
   117a4:	bl	12c88 <error@@Base+0x22c>
   117a8:	ldr	r0, [r7, #12]
   117ac:	add	sl, r8, #1
   117b0:	cmp	sl, r0
   117b4:	bge	11918 <__assert_fail@plt+0xc2c>
   117b8:	ldr	r0, [r6]
   117bc:	mov	r1, #1
   117c0:	add	r0, r0, sl, lsl #3
   117c4:	ldrb	r0, [r0, #4]
   117c8:	and	r5, r5, r0
   117cc:	ldr	r0, [sp, #8]
   117d0:	eor	r2, r5, #1
   117d4:	bl	12c88 <error@@Base+0x22c>
   117d8:	ldr	r0, [r7, #12]
   117dc:	add	r1, r8, #2
   117e0:	cmp	r1, r0
   117e4:	bge	11918 <__assert_fail@plt+0xc2c>
   117e8:	ldr	r0, [r6]
   117ec:	add	r0, r0, r1, lsl #3
   117f0:	mov	r1, #1
   117f4:	ldrb	r0, [r0, #4]
   117f8:	and	r5, r5, r0
   117fc:	ldr	r0, [sp, #4]
   11800:	eor	r2, r5, #1
   11804:	bl	12c88 <error@@Base+0x22c>
   11808:	ldr	r0, [r7, #12]
   1180c:	add	r1, r8, #3
   11810:	cmp	r1, r0
   11814:	bge	11918 <__assert_fail@plt+0xc2c>
   11818:	ldr	r0, [r6]
   1181c:	add	r0, r0, r1, lsl #3
   11820:	mov	r1, #1
   11824:	ldrb	r0, [r0, #4]
   11828:	and	r5, r5, r0
   1182c:	ldr	r0, [sp]
   11830:	eor	r2, r5, #1
   11834:	bl	12c88 <error@@Base+0x22c>
   11838:	ldr	r0, [r7, #12]
   1183c:	add	r1, r8, #4
   11840:	cmp	r1, r0
   11844:	bge	11918 <__assert_fail@plt+0xc2c>
   11848:	ldr	r0, [r6]
   1184c:	add	r0, r0, r1, lsl #3
   11850:	mov	r1, r9
   11854:	ldrb	r0, [r0, #4]
   11858:	and	r9, r5, r0
   1185c:	mov	r5, r1
   11860:	add	r0, r1, #960	; 0x3c0
   11864:	mov	r1, #1
   11868:	eor	r2, r9, #1
   1186c:	bl	12c88 <error@@Base+0x22c>
   11870:	ldr	r0, [r7, #12]
   11874:	add	r1, r8, #5
   11878:	cmp	r1, r0
   1187c:	bge	11904 <__assert_fail@plt+0xc18>
   11880:	ldr	r0, [r6]
   11884:	add	r0, r0, r1, lsl #3
   11888:	mov	r1, #1
   1188c:	ldrb	r0, [r0, #4]
   11890:	and	r9, r9, r0
   11894:	add	r0, r5, #968	; 0x3c8
   11898:	eor	r2, r9, #1
   1189c:	bl	12c88 <error@@Base+0x22c>
   118a0:	ldr	r0, [r7, #12]
   118a4:	add	r1, r8, #6
   118a8:	cmp	r1, r0
   118ac:	bge	11904 <__assert_fail@plt+0xc18>
   118b0:	ldr	r0, [r6]
   118b4:	add	r0, r0, r1, lsl #3
   118b8:	mov	r1, #1
   118bc:	ldrb	r0, [r0, #4]
   118c0:	and	r9, r9, r0
   118c4:	add	r0, r5, #976	; 0x3d0
   118c8:	eor	r2, r9, #1
   118cc:	bl	12c88 <error@@Base+0x22c>
   118d0:	ldr	r0, [r7, #12]
   118d4:	add	r1, r8, #7
   118d8:	cmp	r1, r0
   118dc:	bge	11904 <__assert_fail@plt+0xc18>
   118e0:	ldr	r0, [r6]
   118e4:	add	r0, r0, r1, lsl #3
   118e8:	mov	r1, #1
   118ec:	ldrb	r0, [r0, #4]
   118f0:	and	r0, r9, r0
   118f4:	eor	r2, r0, #1
   118f8:	add	r0, r5, #984	; 0x3d8
   118fc:	bl	12c88 <error@@Base+0x22c>
   11900:	ldr	r0, [r7, #12]
   11904:	mov	r8, sl
   11908:	mov	r9, r5
   1190c:	cmp	r8, r0
   11910:	blt	11780 <__assert_fail@plt+0xa94>
   11914:	b	11924 <__assert_fail@plt+0xc38>
   11918:	mov	r8, sl
   1191c:	cmp	r8, r0
   11920:	blt	11780 <__assert_fail@plt+0xa94>
   11924:	sub	sp, fp, #28
   11928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1192c:	andeq	r7, r1, ip, lsl #19
   11930:			; <UNDEFINED> instruction: 0x000179b8
   11934:	andeq	r7, r1, r8, lsl #19
   11938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1193c:	add	fp, sp, #28
   11940:	sub	sp, sp, #4
   11944:	ldr	r8, [pc, #480]	; 11b2c <__assert_fail@plt+0xe40>
   11948:	ldr	r8, [pc, r8]
   1194c:	ldr	r0, [r8, #12]
   11950:	cmp	r0, #1
   11954:	blt	119c0 <__assert_fail@plt+0xcd4>
   11958:	ldr	r6, [pc, #464]	; 11b30 <__assert_fail@plt+0xe44>
   1195c:	mov	r5, #0
   11960:	movw	r9, #9048	; 0x2358
   11964:	ldr	r6, [pc, r6]
   11968:	ldr	r7, [pc, #452]	; 11b34 <__assert_fail@plt+0xe48>
   1196c:	ldr	r7, [pc, r7]
   11970:	add	r4, r7, #992	; 0x3e0
   11974:	ldr	r0, [r6]
   11978:	ldr	r0, [r0, r5, lsl #3]
   1197c:	ldr	r0, [r0, #8]
   11980:	bl	12288 <__assert_fail@plt+0x159c>
   11984:	ldr	r2, [r6]
   11988:	cmp	r0, #0
   1198c:	mov	r0, r4
   11990:	addeq	r0, r7, r9
   11994:	ldr	r1, [r2, r5, lsl #3]!
   11998:	ldrb	r2, [r2, #4]
   1199c:	ldr	r1, [r1, #8]
   119a0:	clz	r2, r2
   119a4:	lsr	r3, r2, #5
   119a8:	mov	r2, #1
   119ac:	bl	12c9c <error@@Base+0x240>
   119b0:	ldr	r0, [r8, #12]
   119b4:	add	r5, r5, #1
   119b8:	cmp	r5, r0
   119bc:	blt	11974 <__assert_fail@plt+0xc88>
   119c0:	ldr	r9, [pc, #368]	; 11b38 <__assert_fail@plt+0xe4c>
   119c4:	ldr	r9, [pc, r9]
   119c8:	add	r0, r9, #992	; 0x3e0
   119cc:	bl	124b4 <__assert_fail@plt+0x17c8>
   119d0:	movw	r0, #9044	; 0x2354
   119d4:	ldr	r0, [r9, r0]
   119d8:	cmp	r0, #1
   119dc:	blt	11a54 <__assert_fail@plt+0xd68>
   119e0:	mov	r4, #0
   119e4:	movw	sl, #9040	; 0x2350
   119e8:	add	r5, r9, #8
   119ec:	mov	r8, r9
   119f0:	ldr	r0, [r8, sl]!
   119f4:	ldr	r0, [r0, r4, lsl #2]
   119f8:	ldr	r6, [r0, #12]
   119fc:	ldr	r7, [r0, #16]
   11a00:	mov	r0, r9
   11a04:	mov	r1, r6
   11a08:	mov	r2, r7
   11a0c:	bl	12c88 <error@@Base+0x22c>
   11a10:	mov	r0, r5
   11a14:	mov	r1, r6
   11a18:	mov	r2, r7
   11a1c:	bl	12c88 <error@@Base+0x22c>
   11a20:	ldr	r0, [r8]
   11a24:	ldr	r0, [r0, r4, lsl #2]
   11a28:	ldr	r0, [r0, #8]
   11a2c:	bl	10c5c <strlen@plt>
   11a30:	add	r0, r5, r0, lsl #3
   11a34:	mov	r1, r6
   11a38:	mov	r2, r7
   11a3c:	bl	12c88 <error@@Base+0x22c>
   11a40:	movw	r0, #9044	; 0x2354
   11a44:	add	r4, r4, #1
   11a48:	ldr	r0, [r9, r0]
   11a4c:	cmp	r4, r0
   11a50:	blt	119ec <__assert_fail@plt+0xd00>
   11a54:	movw	r0, #9048	; 0x2358
   11a58:	add	r0, r9, r0
   11a5c:	bl	124b4 <__assert_fail@plt+0x17c8>
   11a60:	movw	r0, #17100	; 0x42cc
   11a64:	ldr	r0, [r9, r0]
   11a68:	cmp	r0, #1
   11a6c:	blt	11b20 <__assert_fail@plt+0xe34>
   11a70:	mov	r5, #0
   11a74:	add	sl, r9, #416	; 0x1a0
   11a78:	add	r6, r9, #824	; 0x338
   11a7c:	movw	r0, #17096	; 0x42c8
   11a80:	mov	r8, r9
   11a84:	ldr	r0, [r9, r0]!
   11a88:	ldr	r0, [r0, r5, lsl #2]
   11a8c:	ldr	r7, [r0, #12]
   11a90:	ldr	r4, [r0, #16]
   11a94:	mov	r0, r8
   11a98:	mov	r1, r7
   11a9c:	mov	r2, r4
   11aa0:	bl	12c88 <error@@Base+0x22c>
   11aa4:	mov	r0, sl
   11aa8:	mov	r1, r7
   11aac:	mov	r2, r4
   11ab0:	bl	12c88 <error@@Base+0x22c>
   11ab4:	ldr	r0, [r9]
   11ab8:	mov	r9, r8
   11abc:	ldr	r0, [r0, r5, lsl #2]
   11ac0:	ldr	r0, [r0, #8]
   11ac4:	bl	10c5c <strlen@plt>
   11ac8:	add	r0, sl, r0, lsl #3
   11acc:	mov	r1, r7
   11ad0:	mov	r2, r4
   11ad4:	bl	12c88 <error@@Base+0x22c>
   11ad8:	sub	r0, r7, r4
   11adc:	mov	r1, #1
   11ae0:	clz	r0, r0
   11ae4:	lsr	r4, r0, #5
   11ae8:	mov	r0, r6
   11aec:	mov	r2, r4
   11af0:	bl	12c88 <error@@Base+0x22c>
   11af4:	cmp	r7, #11
   11af8:	mov	r1, #1
   11afc:	mov	r2, r4
   11b00:	movge	r7, #11
   11b04:	add	r0, r6, r7, lsl #3
   11b08:	bl	12c88 <error@@Base+0x22c>
   11b0c:	movw	r0, #17100	; 0x42cc
   11b10:	add	r5, r5, #1
   11b14:	ldr	r0, [r8, r0]
   11b18:	cmp	r5, r0
   11b1c:	blt	11a7c <__assert_fail@plt+0xd90>
   11b20:	sub	sp, fp, #28
   11b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b28:	b	1171c <__assert_fail@plt+0xa30>
   11b2c:	andeq	r7, r1, r0, ror r7
   11b30:	muleq	r1, r8, r7
   11b34:	andeq	r7, r1, r8, ror #14
   11b38:	andeq	r7, r1, r0, lsl r7
   11b3c:	push	{fp, lr}
   11b40:	mov	fp, sp
   11b44:	sub	sp, sp, #8
   11b48:	str	r0, [sp, #4]
   11b4c:	add	r0, sp, #4
   11b50:	mov	r4, r1
   11b54:	ldr	r3, [pc, #692]	; 11e10 <__assert_fail@plt+0x1124>
   11b58:	ldr	r3, [pc, r3]
   11b5c:	ldr	r2, [pc, #688]	; 11e14 <__assert_fail@plt+0x1128>
   11b60:	add	r2, pc, r2
   11b64:	bl	127d4 <__assert_fail@plt+0x1ae8>
   11b68:	ldr	r0, [sp, #4]
   11b6c:	bic	r0, r0, #1
   11b70:	cmp	r0, #2
   11b74:	bne	11e04 <__assert_fail@plt+0x1118>
   11b78:	ldr	r0, [pc, #664]	; 11e18 <__assert_fail@plt+0x112c>
   11b7c:	ldr	r0, [pc, r0]
   11b80:	ldr	r0, [r0]
   11b84:	bl	120fc <__assert_fail@plt+0x1410>
   11b88:	mov	r0, r4
   11b8c:	str	r4, [sp]
   11b90:	bl	10e80 <__assert_fail@plt+0x194>
   11b94:	ldr	r0, [pc, #640]	; 11e1c <__assert_fail@plt+0x1130>
   11b98:	ldr	r0, [pc, r0]
   11b9c:	ldr	r1, [r0]
   11ba0:	ldr	r4, [pc, #632]	; 11e20 <__assert_fail@plt+0x1134>
   11ba4:	ldr	r4, [pc, r4]
   11ba8:	str	r1, [r4]
   11bac:	ldr	sl, [pc, #624]	; 11e24 <__assert_fail@plt+0x1138>
   11bb0:	ldr	sl, [pc, sl]
   11bb4:	ldr	r2, [sl]
   11bb8:	ldr	r8, [pc, #616]	; 11e28 <__assert_fail@plt+0x113c>
   11bbc:	ldr	r8, [pc, r8]
   11bc0:	rsb	r0, r2, #0
   11bc4:	sub	r3, r1, r2
   11bc8:	cmp	r3, r0
   11bcc:	str	r0, [r8]
   11bd0:	blt	11c7c <__assert_fail@plt+0xf90>
   11bd4:	ldr	r5, [pc, #592]	; 11e2c <__assert_fail@plt+0x1140>
   11bd8:	mvn	r9, #0
   11bdc:	ldr	r5, [pc, r5]
   11be0:	b	11c04 <__assert_fail@plt+0xf18>
   11be4:	ldr	r2, [sl]
   11be8:	ldr	r0, [pc, #576]	; 11e30 <__assert_fail@plt+0x1144>
   11bec:	ldr	r0, [pc, r0]
   11bf0:	ldr	r3, [r8]
   11bf4:	ldr	r1, [r0]
   11bf8:	sub	r0, r1, r2
   11bfc:	cmp	r3, r0
   11c00:	bgt	11c7c <__assert_fail@plt+0xf90>
   11c04:	mov	r0, #1
   11c08:	mov	r1, #16
   11c0c:	mov	r7, r9
   11c10:	bl	1258c <__assert_fail@plt+0x18a0>
   11c14:	add	r9, r9, #1
   11c18:	mov	r6, r0
   11c1c:	mov	r1, #2
   11c20:	str	r9, [r0, #8]
   11c24:	add	r0, r7, #2
   11c28:	bl	1258c <__assert_fail@plt+0x18a0>
   11c2c:	str	r0, [r6, #12]
   11c30:	mov	r0, r5
   11c34:	mov	r1, r6
   11c38:	bl	11ea0 <__assert_fail@plt+0x11b4>
   11c3c:	mvn	r7, r7
   11c40:	cmp	r9, r7
   11c44:	bge	11c58 <__assert_fail@plt+0xf6c>
   11c48:	b	11be4 <__assert_fail@plt+0xef8>
   11c4c:	add	r7, r7, #2
   11c50:	cmp	r7, r9
   11c54:	bgt	11be4 <__assert_fail@plt+0xef8>
   11c58:	ldr	r0, [r8]
   11c5c:	cmp	r7, r0
   11c60:	blt	11c4c <__assert_fail@plt+0xf60>
   11c64:	ldr	r0, [r4]
   11c68:	cmp	r7, r0
   11c6c:	movle	r0, r7
   11c70:	movle	r1, r6
   11c74:	blle	11204 <__assert_fail@plt+0x518>
   11c78:	b	11c4c <__assert_fail@plt+0xf60>
   11c7c:	ldr	r0, [pc, #432]	; 11e34 <__assert_fail@plt+0x1148>
   11c80:	ldr	r0, [pc, r0]
   11c84:	ldr	r0, [r0, #4]
   11c88:	cmp	r0, #0
   11c8c:	beq	11dd8 <__assert_fail@plt+0x10ec>
   11c90:	sub	r4, r1, r2
   11c94:	ldr	r1, [pc, #412]	; 11e38 <__assert_fail@plt+0x114c>
   11c98:	mov	r3, #1
   11c9c:	ldr	r1, [pc, r1]
   11ca0:	ldr	r1, [r1]
   11ca4:	sub	ip, r1, #8
   11ca8:	sub	r2, r1, #4
   11cac:	b	11cb8 <__assert_fail@plt+0xfcc>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11dd8 <__assert_fail@plt+0x10ec>
   11cb8:	mov	r1, r0
   11cbc:	ldr	r0, [r0]
   11cc0:	ldr	r7, [r1, #8]
   11cc4:	ldr	r1, [r1, #12]
   11cc8:	cmp	r0, #0
   11ccc:	add	r7, r7, r4
   11cd0:	bic	r7, r7, #1
   11cd4:	add	r1, r1, r7
   11cd8:	ldrh	r6, [r1]
   11cdc:	beq	11d50 <__assert_fail@plt+0x1064>
   11ce0:	ldr	r5, [r0, #8]
   11ce4:	mov	r1, #0
   11ce8:	rsb	r7, r5, #0
   11cec:	cmp	r4, r7
   11cf0:	mov	r7, r4
   11cf4:	ble	11d10 <__assert_fail@plt+0x1024>
   11cf8:	sub	r7, r4, #1
   11cfc:	add	r1, r5, r7
   11d00:	bic	lr, r1, #1
   11d04:	ldr	r1, [r0, #12]
   11d08:	add	r1, r1, lr
   11d0c:	ldrh	r1, [r1]
   11d10:	cmp	r5, r4
   11d14:	ble	11d60 <__assert_fail@plt+0x1074>
   11d18:	add	r4, r4, #1
   11d1c:	add	r5, r5, r4
   11d20:	bic	lr, r5, #1
   11d24:	ldr	r5, [r0, #12]
   11d28:	add	r5, r5, lr
   11d2c:	ldrh	r5, [r5]
   11d30:	add	r5, r5, #1
   11d34:	cmp	r5, r1
   11d38:	movcs	r7, r4
   11d3c:	movcc	r5, r1
   11d40:	mov	r4, r7
   11d44:	cmp	r5, r6
   11d48:	bge	11cb0 <__assert_fail@plt+0xfc4>
   11d4c:	b	11d70 <__assert_fail@plt+0x1084>
   11d50:	mov	r5, #0
   11d54:	cmp	r5, r6
   11d58:	bge	11cb0 <__assert_fail@plt+0xfc4>
   11d5c:	b	11d70 <__assert_fail@plt+0x1084>
   11d60:	mov	r4, r7
   11d64:	mov	r5, r1
   11d68:	cmp	r5, r6
   11d6c:	bge	11cb0 <__assert_fail@plt+0xfc4>
   11d70:	sub	r7, r6, r5
   11d74:	mvn	r1, r5
   11d78:	add	lr, r1, r6
   11d7c:	ands	r7, r7, #3
   11d80:	beq	11d98 <__assert_fail@plt+0x10ac>
   11d84:	ldr	r1, [r2, r6, lsl #2]
   11d88:	subs	r7, r7, #1
   11d8c:	sub	r6, r6, #1
   11d90:	strb	r3, [r1, #4]
   11d94:	bne	11d84 <__assert_fail@plt+0x1098>
   11d98:	cmp	lr, #3
   11d9c:	bcc	11cb0 <__assert_fail@plt+0xfc4>
   11da0:	add	r1, ip, r6, lsl #2
   11da4:	ldr	r7, [r1, #4]
   11da8:	sub	r6, r6, #4
   11dac:	cmp	r6, r5
   11db0:	strb	r3, [r7, #4]
   11db4:	ldr	r7, [r1]
   11db8:	strb	r3, [r7, #4]
   11dbc:	ldr	r7, [r1, #-4]
   11dc0:	strb	r3, [r7, #4]
   11dc4:	ldr	r7, [r1, #-8]
   11dc8:	sub	r1, r1, #16
   11dcc:	strb	r3, [r7, #4]
   11dd0:	bgt	11da4 <__assert_fail@plt+0x10b8>
   11dd4:	b	11cb0 <__assert_fail@plt+0xfc4>
   11dd8:	bl	11938 <__assert_fail@plt+0xc4c>
   11ddc:	ldr	r0, [sp, #4]
   11de0:	mov	r1, #0
   11de4:	cmp	r0, #3
   11de8:	bne	11df4 <__assert_fail@plt+0x1108>
   11dec:	ldr	r0, [sp]
   11df0:	ldr	r1, [r0, #8]
   11df4:	ldr	r0, [pc, #64]	; 11e3c <__assert_fail@plt+0x1150>
   11df8:	ldr	r0, [pc, r0]
   11dfc:	bl	131c8 <error@@Base+0x76c>
   11e00:	bl	12a18 <__assert_fail@plt+0x1d2c>
   11e04:	ldr	r0, [pc, #52]	; 11e40 <__assert_fail@plt+0x1154>
   11e08:	add	r0, pc, r0
   11e0c:	bl	12a5c <error@@Base>
   11e10:	andeq	r7, r1, r0, ror r5
   11e14:	ldrdeq	r2, [r0], -sl
   11e18:	andeq	r7, r1, r0, lsr r5
   11e1c:	andeq	r7, r1, r0, lsl r5
   11e20:	andeq	r7, r1, r0, asr #10
   11e24:	andeq	r7, r1, ip, lsr r5
   11e28:	andeq	r7, r1, r8, lsr r5
   11e2c:	andeq	r7, r1, r4, ror #9
   11e30:			; <UNDEFINED> instruction: 0x000174bc
   11e34:	andeq	r7, r1, r0, asr #8
   11e38:	andeq	r7, r1, ip, asr #8
   11e3c:	ldrdeq	r7, [r1], -ip
   11e40:	andeq	r2, r0, pc, ror #24
   11e44:	vmov.i32	q8, #0	; 0x00000000
   11e48:	vst1.32	{d16-d17}, [r0]
   11e4c:	bx	lr
   11e50:	push	{r4, r5, fp, lr}
   11e54:	add	fp, sp, #8
   11e58:	mov	r4, r0
   11e5c:	ldr	r0, [r0]
   11e60:	mov	r5, #0
   11e64:	str	r5, [r1]
   11e68:	cmp	r0, #0
   11e6c:	str	r0, [r1, #4]
   11e70:	str	r1, [r4]
   11e74:	addeq	r0, r4, #4
   11e78:	str	r1, [r0]
   11e7c:	ldr	r0, [r4, #8]
   11e80:	cmp	r0, #0
   11e84:	beq	11e90 <__assert_fail@plt+0x11a4>
   11e88:	bl	10b6c <free@plt>
   11e8c:	str	r5, [r4, #8]
   11e90:	ldr	r0, [r4, #12]
   11e94:	add	r0, r0, #1
   11e98:	str	r0, [r4, #12]
   11e9c:	pop	{r4, r5, fp, pc}
   11ea0:	push	{r4, r5, fp, lr}
   11ea4:	add	fp, sp, #8
   11ea8:	mov	r4, r0
   11eac:	ldr	r0, [r0, #4]
   11eb0:	mov	r5, #0
   11eb4:	mov	r2, r4
   11eb8:	cmp	r0, #0
   11ebc:	stm	r1, {r0, r5}
   11ec0:	addne	r2, r0, #4
   11ec4:	str	r1, [r2]
   11ec8:	str	r1, [r4, #4]
   11ecc:	ldr	r0, [r4, #8]
   11ed0:	cmp	r0, #0
   11ed4:	beq	11ee0 <__assert_fail@plt+0x11f4>
   11ed8:	bl	10b6c <free@plt>
   11edc:	str	r5, [r4, #8]
   11ee0:	ldr	r0, [r4, #12]
   11ee4:	add	r0, r0, #1
   11ee8:	str	r0, [r4, #12]
   11eec:	pop	{r4, r5, fp, pc}
   11ef0:	push	{r4, sl, fp, lr}
   11ef4:	add	fp, sp, #8
   11ef8:	mov	r4, r0
   11efc:	ldr	r0, [r2]
   11f00:	mov	r3, r4
   11f04:	cmp	r0, #0
   11f08:	stm	r1, {r0, r2}
   11f0c:	addne	r3, r0, #4
   11f10:	str	r1, [r3]
   11f14:	str	r1, [r2]
   11f18:	ldr	r0, [r4, #8]
   11f1c:	cmp	r0, #0
   11f20:	beq	11f30 <__assert_fail@plt+0x1244>
   11f24:	bl	10b6c <free@plt>
   11f28:	mov	r0, #0
   11f2c:	str	r0, [r4, #8]
   11f30:	ldr	r0, [r4, #12]
   11f34:	add	r0, r0, #1
   11f38:	str	r0, [r4, #12]
   11f3c:	pop	{r4, sl, fp, pc}
   11f40:	push	{r4, sl, fp, lr}
   11f44:	add	fp, sp, #8
   11f48:	mov	r4, r0
   11f4c:	mov	r0, r1
   11f50:	cmp	r1, #0
   11f54:	ldr	r3, [r0, #4]!
   11f58:	moveq	r0, r4
   11f5c:	stm	r2, {r1, r3}
   11f60:	str	r2, [r0]
   11f64:	cmp	r3, #0
   11f68:	addeq	r3, r4, #4
   11f6c:	str	r2, [r3]
   11f70:	ldr	r0, [r4, #8]
   11f74:	cmp	r0, #0
   11f78:	beq	11f88 <__assert_fail@plt+0x129c>
   11f7c:	bl	10b6c <free@plt>
   11f80:	mov	r0, #0
   11f84:	str	r0, [r4, #8]
   11f88:	ldr	r0, [r4, #12]
   11f8c:	add	r0, r0, #1
   11f90:	str	r0, [r4, #12]
   11f94:	pop	{r4, sl, fp, pc}
   11f98:	push	{r4, r5, fp, lr}
   11f9c:	add	fp, sp, #8
   11fa0:	mov	r4, r0
   11fa4:	ldm	r1, {r0, r2}
   11fa8:	cmp	r0, #0
   11fac:	beq	11fbc <__assert_fail@plt+0x12d0>
   11fb0:	str	r2, [r0, #4]
   11fb4:	ldr	r2, [r1, #4]
   11fb8:	b	11fc0 <__assert_fail@plt+0x12d4>
   11fbc:	str	r2, [r4]
   11fc0:	cmp	r2, #0
   11fc4:	mov	r5, #0
   11fc8:	addeq	r2, r4, #4
   11fcc:	str	r0, [r2]
   11fd0:	str	r5, [r1]
   11fd4:	str	r5, [r1, #4]
   11fd8:	ldr	r0, [r4, #8]
   11fdc:	cmp	r0, #0
   11fe0:	beq	11fec <__assert_fail@plt+0x1300>
   11fe4:	bl	10b6c <free@plt>
   11fe8:	str	r5, [r4, #8]
   11fec:	ldr	r0, [r4, #12]
   11ff0:	sub	r0, r0, #1
   11ff4:	str	r0, [r4, #12]
   11ff8:	pop	{r4, r5, fp, pc}
   11ffc:	push	{r4, sl, fp, lr}
   12000:	add	fp, sp, #8
   12004:	mov	r4, r0
   12008:	ldr	r0, [r0, #8]
   1200c:	cmp	r0, #0
   12010:	beq	12018 <__assert_fail@plt+0x132c>
   12014:	pop	{r4, sl, fp, pc}
   12018:	ldr	r0, [r4, #12]
   1201c:	cmp	r0, #0
   12020:	beq	12014 <__assert_fail@plt+0x1328>
   12024:	mov	r1, #4
   12028:	bl	1258c <__assert_fail@plt+0x18a0>
   1202c:	str	r0, [r4, #8]
   12030:	ldr	r1, [r4]
   12034:	cmp	r1, #0
   12038:	beq	12014 <__assert_fail@plt+0x1328>
   1203c:	str	r1, [r0]
   12040:	ldr	r0, [r1, #4]
   12044:	cmp	r0, #0
   12048:	popeq	{r4, sl, fp, pc}
   1204c:	mov	r1, #4
   12050:	ldr	r2, [r4, #8]
   12054:	str	r0, [r2, r1]
   12058:	add	r1, r1, #4
   1205c:	ldr	r0, [r0, #4]
   12060:	cmp	r0, #0
   12064:	bne	12050 <__assert_fail@plt+0x1364>
   12068:	b	12014 <__assert_fail@plt+0x1328>
   1206c:	push	{r4, r5, r6, r7, fp, lr}
   12070:	add	fp, sp, #16
   12074:	ldr	r6, [r0]
   12078:	cmp	r6, #0
   1207c:	beq	120f8 <__assert_fail@plt+0x140c>
   12080:	mov	r4, r1
   12084:	mov	r5, r0
   12088:	mov	r7, #0
   1208c:	b	120b0 <__assert_fail@plt+0x13c4>
   12090:	ldr	r0, [r5, #12]
   12094:	sub	r0, r0, #1
   12098:	str	r0, [r5, #12]
   1209c:	mov	r0, r6
   120a0:	blx	r4
   120a4:	ldr	r6, [r5]
   120a8:	cmp	r6, #0
   120ac:	beq	120f8 <__assert_fail@plt+0x140c>
   120b0:	ldm	r6, {r0, r1}
   120b4:	cmp	r0, #0
   120b8:	beq	120c8 <__assert_fail@plt+0x13dc>
   120bc:	str	r1, [r0, #4]
   120c0:	ldr	r1, [r6, #4]
   120c4:	b	120cc <__assert_fail@plt+0x13e0>
   120c8:	str	r1, [r5]
   120cc:	cmp	r1, #0
   120d0:	addeq	r1, r5, #4
   120d4:	str	r0, [r1]
   120d8:	str	r7, [r6]
   120dc:	str	r7, [r6, #4]
   120e0:	ldr	r0, [r5, #8]
   120e4:	cmp	r0, #0
   120e8:	beq	12090 <__assert_fail@plt+0x13a4>
   120ec:	bl	10b6c <free@plt>
   120f0:	str	r7, [r5, #8]
   120f4:	b	12090 <__assert_fail@plt+0x13a4>
   120f8:	pop	{r4, r5, r6, r7, fp, pc}
   120fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12100:	add	fp, sp, #24
   12104:	ldr	r8, [pc, #332]	; 12258 <__assert_fail@plt+0x156c>
   12108:	mov	r1, r0
   1210c:	add	r8, pc, r8
   12110:	ldrb	r0, [r8]
   12114:	cmp	r0, #1
   12118:	beq	1224c <__assert_fail@plt+0x1560>
   1211c:	cmp	r1, #0
   12120:	beq	121d0 <__assert_fail@plt+0x14e4>
   12124:	ldr	r4, [pc, #316]	; 12268 <__assert_fail@plt+0x157c>
   12128:	ldr	r2, [pc, #316]	; 1226c <__assert_fail@plt+0x1580>
   1212c:	add	r4, pc, r4
   12130:	add	r2, pc, r2
   12134:	mov	r0, r4
   12138:	bl	141ac <error@@Base+0x1750>
   1213c:	ldr	r0, [pc, #300]	; 12270 <__assert_fail@plt+0x1584>
   12140:	mov	r1, r4
   12144:	add	r0, pc, r0
   12148:	bl	13958 <error@@Base+0xefc>
   1214c:	ldr	r1, [pc, #288]	; 12274 <__assert_fail@plt+0x1588>
   12150:	mov	r0, r4
   12154:	ldr	r1, [pc, r1]
   12158:	bl	1206c <__assert_fail@plt+0x1380>
   1215c:	ldr	r7, [pc, #276]	; 12278 <__assert_fail@plt+0x158c>
   12160:	ldr	r7, [pc, r7]
   12164:	cmp	r7, #0
   12168:	beq	12240 <__assert_fail@plt+0x1554>
   1216c:	ldr	r4, [pc, #264]	; 1227c <__assert_fail@plt+0x1590>
   12170:	ldr	r5, [pc, #264]	; 12280 <__assert_fail@plt+0x1594>
   12174:	add	r4, pc, r4
   12178:	add	r5, pc, r5
   1217c:	b	121a8 <__assert_fail@plt+0x14bc>
   12180:	mov	r0, #1
   12184:	mov	r1, #12
   12188:	bl	1258c <__assert_fail@plt+0x18a0>
   1218c:	mov	r1, r0
   12190:	str	r6, [r0, #8]
   12194:	mov	r0, r4
   12198:	bl	123a4 <__assert_fail@plt+0x16b8>
   1219c:	ldr	r7, [r7, #4]
   121a0:	cmp	r7, #0
   121a4:	beq	12240 <__assert_fail@plt+0x1554>
   121a8:	ldr	r6, [r7, #8]
   121ac:	mov	r0, r4
   121b0:	mov	r1, r6
   121b4:	bl	12314 <__assert_fail@plt+0x1628>
   121b8:	cmp	r0, #0
   121bc:	beq	12180 <__assert_fail@plt+0x1494>
   121c0:	mov	r0, r5
   121c4:	mov	r1, r6
   121c8:	bl	12b04 <error@@Base+0xa8>
   121cc:	b	1219c <__assert_fail@plt+0x14b0>
   121d0:	ldr	r5, [pc, #132]	; 1225c <__assert_fail@plt+0x1570>
   121d4:	ldr	r4, [pc, #132]	; 12260 <__assert_fail@plt+0x1574>
   121d8:	ldr	r9, [pc, #132]	; 12264 <__assert_fail@plt+0x1578>
   121dc:	mov	r7, #0
   121e0:	add	r5, pc, r5
   121e4:	add	r4, pc, r4
   121e8:	add	r9, pc, r9
   121ec:	b	12218 <__assert_fail@plt+0x152c>
   121f0:	mov	r0, #1
   121f4:	mov	r1, #12
   121f8:	bl	1258c <__assert_fail@plt+0x18a0>
   121fc:	mov	r1, r0
   12200:	str	r6, [r0, #8]
   12204:	mov	r0, r4
   12208:	bl	123a4 <__assert_fail@plt+0x16b8>
   1220c:	add	r7, r7, #1
   12210:	cmp	r7, #110	; 0x6e
   12214:	beq	12240 <__assert_fail@plt+0x1554>
   12218:	ldr	r6, [r5, r7, lsl #2]
   1221c:	mov	r0, r4
   12220:	mov	r1, r6
   12224:	bl	12314 <__assert_fail@plt+0x1628>
   12228:	cmp	r0, #0
   1222c:	beq	121f0 <__assert_fail@plt+0x1504>
   12230:	mov	r0, r9
   12234:	mov	r1, r6
   12238:	bl	12b04 <error@@Base+0xa8>
   1223c:	b	1220c <__assert_fail@plt+0x1520>
   12240:	mov	r0, #1
   12244:	strb	r0, [r8]
   12248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1224c:	ldr	r0, [pc, #48]	; 12284 <__assert_fail@plt+0x1598>
   12250:	add	r0, pc, r0
   12254:	bl	12a5c <error@@Base>
   12258:	andeq	r7, r1, r8, lsr r0
   1225c:	andeq	r6, r1, r0, ror #22
   12260:	andeq	r6, r1, r4, lsl #31
   12264:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   12268:	andeq	r7, r1, ip, lsl r0
   1226c:	strdeq	r6, [r1], -ip
   12270:	andeq	r7, r1, r4, lsl r0
   12274:	andeq	r6, r1, ip, asr #30
   12278:	strdeq	r6, [r1], -r8
   1227c:	strdeq	r6, [r1], -r4
   12280:	andeq	r2, r0, pc, asr #18
   12284:	andeq	r2, r0, pc, lsr r8
   12288:	push	{fp, lr}
   1228c:	mov	fp, sp
   12290:	mov	r1, r0
   12294:	ldr	r0, [pc, #48]	; 122cc <__assert_fail@plt+0x15e0>
   12298:	add	r0, pc, r0
   1229c:	ldrb	r0, [r0]
   122a0:	cmp	r0, #0
   122a4:	beq	122c0 <__assert_fail@plt+0x15d4>
   122a8:	ldr	r0, [pc, #32]	; 122d0 <__assert_fail@plt+0x15e4>
   122ac:	add	r0, pc, r0
   122b0:	bl	12314 <__assert_fail@plt+0x1628>
   122b4:	cmp	r0, #0
   122b8:	movwne	r0, #1
   122bc:	pop	{fp, pc}
   122c0:	ldr	r0, [pc, #12]	; 122d4 <__assert_fail@plt+0x15e8>
   122c4:	add	r0, pc, r0
   122c8:	bl	12a5c <error@@Base>
   122cc:	andeq	r6, r1, ip, lsr #29
   122d0:			; <UNDEFINED> instruction: 0x00016ebc
   122d4:	andeq	r2, r0, r9, ror #15
   122d8:	push	{r4, r5, r6, sl, fp, lr}
   122dc:	add	fp, sp, #16
   122e0:	mov	r4, r0
   122e4:	movw	r0, #8048	; 0x1f70
   122e8:	movw	r6, #503	; 0x1f7
   122ec:	add	r5, r4, r0
   122f0:	mov	r0, r4
   122f4:	bl	11e44 <__assert_fail@plt+0x1158>
   122f8:	subs	r6, r6, #1
   122fc:	add	r4, r4, #16
   12300:	bne	122f0 <__assert_fail@plt+0x1604>
   12304:	mov	r0, #0
   12308:	str	r0, [r5]
   1230c:	str	r0, [r5, #4]
   12310:	pop	{r4, r5, r6, sl, fp, pc}
   12314:	push	{r4, r5, r6, sl, fp, lr}
   12318:	add	fp, sp, #16
   1231c:	mov	r5, r1
   12320:	ldrb	r1, [r1]
   12324:	mov	r4, #0
   12328:	mov	r2, #0
   1232c:	cmp	r1, #0
   12330:	beq	12364 <__assert_fail@plt+0x1678>
   12334:	add	r3, r5, #1
   12338:	mov	r2, #0
   1233c:	uxtab	r2, r2, r1
   12340:	ldrb	r1, [r3], #1
   12344:	cmp	r1, #0
   12348:	bne	1233c <__assert_fail@plt+0x1650>
   1234c:	movw	r1, #20065	; 0x4e61
   12350:	movt	r1, #33354	; 0x824a
   12354:	umull	r1, r3, r2, r1
   12358:	lsr	r1, r3, #8
   1235c:	movw	r3, #503	; 0x1f7
   12360:	mls	r2, r1, r3, r2
   12364:	ldr	r6, [r0, r2, lsl #4]
   12368:	cmp	r6, #0
   1236c:	beq	12390 <__assert_fail@plt+0x16a4>
   12370:	ldr	r1, [r6, #8]
   12374:	mov	r0, r5
   12378:	bl	10b48 <strcmp@plt>
   1237c:	cmp	r0, #0
   12380:	beq	12398 <__assert_fail@plt+0x16ac>
   12384:	ldr	r6, [r6, #4]
   12388:	cmp	r6, #0
   1238c:	bne	12370 <__assert_fail@plt+0x1684>
   12390:	mov	r0, r4
   12394:	pop	{r4, r5, r6, sl, fp, pc}
   12398:	mov	r4, r6
   1239c:	mov	r0, r4
   123a0:	pop	{r4, r5, r6, sl, fp, pc}
   123a4:	push	{r4, r5, fp, lr}
   123a8:	add	fp, sp, #8
   123ac:	movw	r2, #8048	; 0x1f70
   123b0:	add	r5, r0, r2
   123b4:	ldr	r2, [r1, #8]
   123b8:	ldrb	r3, [r2]
   123bc:	cmp	r3, #0
   123c0:	beq	123f8 <__assert_fail@plt+0x170c>
   123c4:	add	r4, r2, #1
   123c8:	mov	r2, #0
   123cc:	uxtab	r2, r2, r3
   123d0:	ldrb	r3, [r4], #1
   123d4:	cmp	r3, #0
   123d8:	bne	123cc <__assert_fail@plt+0x16e0>
   123dc:	movw	r3, #20065	; 0x4e61
   123e0:	movt	r3, #33354	; 0x824a
   123e4:	umull	r3, r4, r2, r3
   123e8:	lsr	r3, r4, #8
   123ec:	movw	r4, #503	; 0x1f7
   123f0:	mls	r2, r3, r4, r2
   123f4:	b	123fc <__assert_fail@plt+0x1710>
   123f8:	mov	r2, #0
   123fc:	add	r0, r0, r2, lsl #4
   12400:	bl	11e50 <__assert_fail@plt+0x1164>
   12404:	ldr	r0, [r5]
   12408:	cmp	r0, #0
   1240c:	beq	1241c <__assert_fail@plt+0x1730>
   12410:	bl	10b6c <free@plt>
   12414:	mov	r0, #0
   12418:	str	r0, [r5]
   1241c:	ldr	r0, [r5, #4]
   12420:	add	r0, r0, #1
   12424:	str	r0, [r5, #4]
   12428:	pop	{r4, r5, fp, pc}
   1242c:	push	{r4, r5, fp, lr}
   12430:	add	fp, sp, #8
   12434:	movw	r2, #8048	; 0x1f70
   12438:	add	r5, r0, r2
   1243c:	ldr	r2, [r1, #8]
   12440:	ldrb	r3, [r2]
   12444:	cmp	r3, #0
   12448:	beq	12480 <__assert_fail@plt+0x1794>
   1244c:	add	r4, r2, #1
   12450:	mov	r2, #0
   12454:	uxtab	r2, r2, r3
   12458:	ldrb	r3, [r4], #1
   1245c:	cmp	r3, #0
   12460:	bne	12454 <__assert_fail@plt+0x1768>
   12464:	movw	r3, #20065	; 0x4e61
   12468:	movt	r3, #33354	; 0x824a
   1246c:	umull	r3, r4, r2, r3
   12470:	lsr	r3, r4, #8
   12474:	movw	r4, #503	; 0x1f7
   12478:	mls	r2, r3, r4, r2
   1247c:	b	12484 <__assert_fail@plt+0x1798>
   12480:	mov	r2, #0
   12484:	add	r0, r0, r2, lsl #4
   12488:	bl	11f98 <__assert_fail@plt+0x12ac>
   1248c:	ldr	r0, [r5]
   12490:	cmp	r0, #0
   12494:	beq	124a4 <__assert_fail@plt+0x17b8>
   12498:	bl	10b6c <free@plt>
   1249c:	mov	r0, #0
   124a0:	str	r0, [r5]
   124a4:	ldr	r0, [r5, #4]
   124a8:	sub	r0, r0, #1
   124ac:	str	r0, [r5, #4]
   124b0:	pop	{r4, r5, fp, pc}
   124b4:	push	{r4, r5, fp, lr}
   124b8:	add	fp, sp, #8
   124bc:	mov	r4, r0
   124c0:	movw	r0, #8048	; 0x1f70
   124c4:	mov	r5, r4
   124c8:	ldr	r0, [r5, r0]!
   124cc:	cmp	r0, #0
   124d0:	bne	12530 <__assert_fail@plt+0x1844>
   124d4:	ldr	r0, [r5, #4]
   124d8:	cmp	r0, #0
   124dc:	popeq	{r4, r5, fp, pc}
   124e0:	mov	r1, #4
   124e4:	bl	1258c <__assert_fail@plt+0x18a0>
   124e8:	str	r0, [r5]
   124ec:	mov	r0, #0
   124f0:	movw	ip, #503	; 0x1f7
   124f4:	mov	r2, #0
   124f8:	b	12508 <__assert_fail@plt+0x181c>
   124fc:	add	r2, r2, #1
   12500:	cmp	r2, ip
   12504:	beq	12530 <__assert_fail@plt+0x1844>
   12508:	ldr	r3, [r4, r2, lsl #4]
   1250c:	cmp	r3, #0
   12510:	beq	124fc <__assert_fail@plt+0x1810>
   12514:	ldr	r1, [r5]
   12518:	str	r3, [r1, r0, lsl #2]
   1251c:	add	r0, r0, #1
   12520:	ldr	r3, [r3, #4]
   12524:	cmp	r3, #0
   12528:	bne	12514 <__assert_fail@plt+0x1828>
   1252c:	b	124fc <__assert_fail@plt+0x1810>
   12530:	pop	{r4, r5, fp, pc}
   12534:	push	{r4, r5, r6, r7, fp, lr}
   12538:	add	fp, sp, #16
   1253c:	mov	r5, r0
   12540:	movw	r0, #8048	; 0x1f70
   12544:	mov	r4, r1
   12548:	movw	r7, #503	; 0x1f7
   1254c:	add	r6, r5, r0
   12550:	mov	r0, r5
   12554:	mov	r1, r4
   12558:	bl	1206c <__assert_fail@plt+0x1380>
   1255c:	subs	r7, r7, #1
   12560:	add	r5, r5, #16
   12564:	bne	12550 <__assert_fail@plt+0x1864>
   12568:	ldr	r0, [r6]
   1256c:	cmp	r0, #0
   12570:	beq	12580 <__assert_fail@plt+0x1894>
   12574:	bl	10b6c <free@plt>
   12578:	mov	r0, #0
   1257c:	str	r0, [r6]
   12580:	mov	r0, #0
   12584:	str	r0, [r6, #4]
   12588:	pop	{r4, r5, r6, r7, fp, pc}
   1258c:	push	{fp, lr}
   12590:	mov	fp, sp
   12594:	bl	10b3c <calloc@plt>
   12598:	cmp	r0, #0
   1259c:	popne	{fp, pc}
   125a0:	ldr	r0, [pc, #4]	; 125ac <__assert_fail@plt+0x18c0>
   125a4:	add	r0, pc, r0
   125a8:	bl	12a5c <error@@Base>
   125ac:	ldrdeq	r2, [r0], -r7
   125b0:	push	{r4, r5, r6, sl, fp, lr}
   125b4:	add	fp, sp, #16
   125b8:	ldrb	r3, [r0]
   125bc:	ldrb	ip, [r1]
   125c0:	mov	r2, r0
   125c4:	mov	r0, #0
   125c8:	cmp	r3, #0
   125cc:	beq	1260c <__assert_fail@plt+0x1920>
   125d0:	add	r6, r2, #1
   125d4:	add	lr, r1, #1
   125d8:	mov	r2, #0
   125dc:	uxtb	r4, ip
   125e0:	uxtb	r5, r3
   125e4:	cmp	r5, r4
   125e8:	bne	1261c <__assert_fail@plt+0x1930>
   125ec:	ldrb	r3, [r6, r2]
   125f0:	ldrb	ip, [lr, r2]
   125f4:	add	r2, r2, #1
   125f8:	cmp	r3, #0
   125fc:	bne	125dc <__assert_fail@plt+0x18f0>
   12600:	cmp	ip, #0
   12604:	bne	12618 <__assert_fail@plt+0x192c>
   12608:	pop	{r4, r5, r6, sl, fp, pc}
   1260c:	mov	r2, #0
   12610:	cmp	ip, #0
   12614:	beq	12608 <__assert_fail@plt+0x191c>
   12618:	mov	r3, #0
   1261c:	ldrb	r1, [r1, r2]
   12620:	uxtb	r2, r3
   12624:	mov	r0, #1
   12628:	cmp	r2, r1
   1262c:	mvncc	r0, #0
   12630:	pop	{r4, r5, r6, sl, fp, pc}
   12634:	push	{r4, r5, fp, lr}
   12638:	add	fp, sp, #8
   1263c:	mov	r5, r1
   12640:	cmp	r0, #0
   12644:	beq	12678 <__assert_fail@plt+0x198c>
   12648:	mov	r1, r5
   1264c:	mov	r4, r0
   12650:	bl	10b60 <fopen@plt>
   12654:	cmp	r0, #0
   12658:	popne	{r4, r5, fp, pc}
   1265c:	ldrb	r0, [r5]
   12660:	cmp	r0, #119	; 0x77
   12664:	bne	1269c <__assert_fail@plt+0x19b0>
   12668:	ldr	r0, [pc, #72]	; 126b8 <__assert_fail@plt+0x19cc>
   1266c:	mov	r1, r4
   12670:	add	r0, pc, r0
   12674:	bl	12aac <error@@Base+0x50>
   12678:	ldrb	r0, [r5]
   1267c:	ldr	r1, [pc, #40]	; 126ac <__assert_fail@plt+0x19c0>
   12680:	ldr	r1, [pc, r1]
   12684:	ldr	r2, [pc, #36]	; 126b0 <__assert_fail@plt+0x19c4>
   12688:	cmp	r0, #114	; 0x72
   1268c:	ldr	r2, [pc, r2]
   12690:	moveq	r2, r1
   12694:	ldr	r0, [r2]
   12698:	pop	{r4, r5, fp, pc}
   1269c:	ldr	r0, [pc, #16]	; 126b4 <__assert_fail@plt+0x19c8>
   126a0:	mov	r1, r4
   126a4:	add	r0, pc, r0
   126a8:	bl	12aac <error@@Base+0x50>
   126ac:	andeq	r6, r1, r0, ror #20
   126b0:	andeq	r6, r1, r4, ror #20
   126b4:	andeq	r2, r0, r7, lsl #12
   126b8:	andeq	r2, r0, r5, lsr #12
   126bc:	ldr	r1, [pc, #40]	; 126ec <__assert_fail@plt+0x1a00>
   126c0:	ldr	r1, [pc, r1]
   126c4:	ldr	r1, [r1]
   126c8:	cmp	r1, r0
   126cc:	bxeq	lr
   126d0:	ldr	r1, [pc, #24]	; 126f0 <__assert_fail@plt+0x1a04>
   126d4:	ldr	r1, [pc, r1]
   126d8:	ldr	r1, [r1]
   126dc:	cmp	r1, r0
   126e0:	beq	126e8 <__assert_fail@plt+0x19fc>
   126e4:	b	10c80 <fclose@plt>
   126e8:	bx	lr
   126ec:	andeq	r6, r1, r0, lsr #20
   126f0:	andeq	r6, r1, ip, lsl sl
   126f4:	push	{fp, lr}
   126f8:	mov	fp, sp
   126fc:	sub	sp, sp, #88	; 0x58
   12700:	mov	r1, r0
   12704:	mov	r2, sp
   12708:	mov	r0, #3
   1270c:	bl	10bcc <__xstat@plt>
   12710:	clz	r0, r0
   12714:	lsr	r0, r0, #5
   12718:	mov	sp, fp
   1271c:	pop	{fp, pc}
   12720:	push	{r4, r5, fp, lr}
   12724:	add	fp, sp, #8
   12728:	sub	sp, sp, #104	; 0x68
   1272c:	ldr	r0, [pc, #92]	; 12790 <__assert_fail@plt+0x1aa4>
   12730:	add	r0, pc, r0
   12734:	ldrh	r1, [r0]
   12738:	add	r5, r1, #1
   1273c:	strh	r5, [r0]
   12740:	ldr	r0, [pc, #76]	; 12794 <__assert_fail@plt+0x1aa8>
   12744:	ldr	r0, [pc, r0]
   12748:	ldr	r4, [r0]
   1274c:	bl	10c2c <getpid@plt>
   12750:	mov	r3, r0
   12754:	sxth	r0, r5
   12758:	add	r5, sp, #4
   1275c:	mov	r2, r4
   12760:	str	r0, [sp]
   12764:	mov	r0, r5
   12768:	ldr	r1, [pc, #40]	; 12798 <__assert_fail@plt+0x1aac>
   1276c:	add	r1, pc, r1
   12770:	bl	10ca4 <sprintf@plt>
   12774:	mov	r0, r5
   12778:	bl	10b9c <strdup@plt>
   1277c:	mov	r4, r0
   12780:	bl	10bb4 <unlink@plt>
   12784:	mov	r0, r4
   12788:	sub	sp, fp, #8
   1278c:	pop	{r4, r5, fp, pc}
   12790:			; <UNDEFINED> instruction: 0x000189b0
   12794:	andeq	r6, r1, ip, lsl #19
   12798:	andeq	r2, r0, r8, ror #10
   1279c:	push	{r4, sl, fp, lr}
   127a0:	add	fp, sp, #8
   127a4:	mov	r4, r0
   127a8:	bl	10c5c <strlen@plt>
   127ac:	sub	r0, r0, #1
   127b0:	sxth	r0, r0
   127b4:	cmp	r0, #0
   127b8:	bmi	127c8 <__assert_fail@plt+0x1adc>
   127bc:	ldrb	r1, [r4, r0]
   127c0:	cmp	r1, #47	; 0x2f
   127c4:	bne	127ac <__assert_fail@plt+0x1ac0>
   127c8:	add	r0, r0, r4
   127cc:	add	r0, r0, #1
   127d0:	pop	{r4, sl, fp, pc}
   127d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d8:	add	fp, sp, #28
   127dc:	sub	sp, sp, #12
   127e0:	stmib	sp, {r0, r1}
   127e4:	mov	r6, r3
   127e8:	str	r2, [sp]
   127ec:	ldr	r4, [r1]
   127f0:	mov	r0, r4
   127f4:	bl	10c5c <strlen@plt>
   127f8:	sub	r0, r0, #1
   127fc:	sxth	r0, r0
   12800:	cmp	r0, #0
   12804:	bmi	12814 <__assert_fail@plt+0x1b28>
   12808:	ldrb	r1, [r4, r0]
   1280c:	cmp	r1, #47	; 0x2f
   12810:	bne	127f8 <__assert_fail@plt+0x1b0c>
   12814:	ldr	r1, [pc, #484]	; 12a00 <__assert_fail@plt+0x1d14>
   12818:	add	r0, r0, r4
   1281c:	add	r0, r0, #1
   12820:	ldr	r1, [pc, r1]
   12824:	str	r0, [r1]
   12828:	mov	r0, #2
   1282c:	ldr	r4, [pc, #464]	; 12a04 <__assert_fail@plt+0x1d18>
   12830:	add	r4, pc, r4
   12834:	mov	r1, r4
   12838:	bl	10c14 <__sysv_signal@plt>
   1283c:	mov	r0, #15
   12840:	mov	r1, r4
   12844:	bl	10c14 <__sysv_signal@plt>
   12848:	ldr	r0, [sp, #4]
   1284c:	ldr	r5, [r0]
   12850:	cmp	r5, #1
   12854:	bne	1286c <__assert_fail@plt+0x1b80>
   12858:	ldr	r0, [pc, #424]	; 12a08 <__assert_fail@plt+0x1d1c>
   1285c:	ldr	r0, [pc, r0]
   12860:	ldrb	r0, [r0]
   12864:	cmp	r0, #0
   12868:	bne	129e8 <__assert_fail@plt+0x1cfc>
   1286c:	ldr	ip, [sp, #8]
   12870:	mov	r8, #0
   12874:	cmp	r5, #2
   12878:	blt	129c4 <__assert_fail@plt+0x1cd8>
   1287c:	mov	r8, #0
   12880:	mov	r7, #1
   12884:	mov	r9, #1
   12888:	ldr	r4, [ip, r7, lsl #2]
   1288c:	ldrb	r0, [r4]
   12890:	cmp	r0, #45	; 0x2d
   12894:	bne	1296c <__assert_fail@plt+0x1c80>
   12898:	ldrb	sl, [r4, #1]
   1289c:	cmp	sl, #0
   128a0:	beq	1296c <__assert_fail@plt+0x1c80>
   128a4:	mov	r0, r4
   128a8:	bl	10c5c <strlen@plt>
   128ac:	mov	r2, r0
   128b0:	ldr	r0, [pc, #340]	; 12a0c <__assert_fail@plt+0x1d20>
   128b4:	mov	r1, r4
   128b8:	add	r0, pc, r0
   128bc:	bl	10cc8 <strncmp@plt>
   128c0:	cmp	r0, #0
   128c4:	beq	129e8 <__assert_fail@plt+0x1cfc>
   128c8:	ldr	ip, [sp, #8]
   128cc:	add	r1, r7, #1
   128d0:	mov	r0, #0
   128d4:	cmp	r1, r5
   128d8:	ldrlt	r0, [ip, r1, lsl #2]
   128dc:	cmp	r6, #0
   128e0:	ldrbne	r2, [r6]
   128e4:	cmpne	r2, #0
   128e8:	beq	129d8 <__assert_fail@plt+0x1cec>
   128ec:	mov	r1, #0
   128f0:	cmp	sl, r2
   128f4:	beq	1291c <__assert_fail@plt+0x1c30>
   128f8:	mov	r2, #1
   128fc:	sxth	r1, r2
   12900:	add	r3, r1, r1, lsl #1
   12904:	ldrb	r3, [r6, r3, lsl #2]
   12908:	cmp	r3, #0
   1290c:	beq	129d8 <__assert_fail@plt+0x1cec>
   12910:	add	r2, r2, #1
   12914:	cmp	sl, r3
   12918:	bne	128fc <__assert_fail@plt+0x1c10>
   1291c:	add	r1, r1, r1, lsl #1
   12920:	add	r3, r6, r1, lsl #2
   12924:	ldr	r1, [r3, #4]
   12928:	cmp	r1, #0
   1292c:	beq	1298c <__assert_fail@plt+0x1ca0>
   12930:	mov	r2, r4
   12934:	cmp	r0, #0
   12938:	ldrb	r7, [r2, #2]!
   1293c:	cmpeq	r7, #0
   12940:	beq	1298c <__assert_fail@plt+0x1ca0>
   12944:	ldr	r3, [r1]
   12948:	cmp	r3, #0
   1294c:	bne	129f0 <__assert_fail@plt+0x1d04>
   12950:	cmp	r7, #0
   12954:	movne	r0, r2
   12958:	str	r0, [r1]
   1295c:	ldrb	r0, [r2]
   12960:	cmp	r0, #0
   12964:	addeq	r9, r9, #1
   12968:	b	12978 <__assert_fail@plt+0x1c8c>
   1296c:	sxth	r0, r8
   12970:	add	r8, r8, #1
   12974:	str	r4, [ip, r0, lsl #2]
   12978:	add	r9, r9, #1
   1297c:	sxth	r7, r9
   12980:	cmp	r5, r7
   12984:	bgt	12888 <__assert_fail@plt+0x1b9c>
   12988:	b	129c4 <__assert_fail@plt+0x1cd8>
   1298c:	ldr	r0, [r3, #8]
   12990:	cmp	r0, #0
   12994:	beq	129d8 <__assert_fail@plt+0x1cec>
   12998:	ldrb	r1, [r4, #2]
   1299c:	cmp	r1, #0
   129a0:	bne	129d8 <__assert_fail@plt+0x1cec>
   129a4:	ldrb	r1, [r0]
   129a8:	cmp	r1, #0
   129ac:	bne	129f0 <__assert_fail@plt+0x1d04>
   129b0:	mov	r1, #1
   129b4:	strb	r1, [r0]
   129b8:	ldr	r0, [sp, #4]
   129bc:	ldr	r5, [r0]
   129c0:	b	12978 <__assert_fail@plt+0x1c8c>
   129c4:	ldr	r1, [sp, #4]
   129c8:	sxth	r0, r8
   129cc:	str	r0, [r1]
   129d0:	sub	sp, fp, #28
   129d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d8:	ldr	r0, [pc, #52]	; 12a14 <__assert_fail@plt+0x1d28>
   129dc:	mov	r1, r4
   129e0:	add	r0, pc, r0
   129e4:	bl	12aac <error@@Base+0x50>
   129e8:	ldr	r0, [sp]
   129ec:	bl	12b88 <error@@Base+0x12c>
   129f0:	ldr	r0, [pc, #24]	; 12a10 <__assert_fail@plt+0x1d24>
   129f4:	mov	r1, r4
   129f8:	add	r0, pc, r0
   129fc:	bl	12aac <error@@Base+0x50>
   12a00:			; <UNDEFINED> instruction: 0x000168b0
   12a04:	andeq	r0, r0, r8, lsl r3
   12a08:	andeq	r6, r1, r0, asr #16
   12a0c:	andeq	r2, r0, r9, lsr r4
   12a10:	andeq	r2, r0, sp, lsl r3
   12a14:	andeq	r2, r0, r6, lsr #6
   12a18:	push	{fp, lr}
   12a1c:	mov	fp, sp
   12a20:	mov	r0, #0
   12a24:	bl	12a28 <__assert_fail@plt+0x1d3c>
   12a28:	push	{fp, lr}
   12a2c:	mov	fp, sp
   12a30:	mov	r4, r0
   12a34:	ldr	r0, [pc, #28]	; 12a58 <__assert_fail@plt+0x1d6c>
   12a38:	ldr	r0, [pc, r0]
   12a3c:	ldr	r0, [r0]
   12a40:	cmp	r0, #0
   12a44:	beq	12a4c <__assert_fail@plt+0x1d60>
   12a48:	blx	r0
   12a4c:	bl	12be8 <error@@Base+0x18c>
   12a50:	mov	r0, r4
   12a54:	bl	10c38 <exit@plt>
   12a58:	andeq	r6, r1, r0, lsr #13

00012a5c <error@@Base>:
   12a5c:	push	{fp, lr}
   12a60:	mov	fp, sp
   12a64:	mov	r3, r0
   12a68:	ldr	r0, [pc, #44]	; 12a9c <error@@Base+0x40>
   12a6c:	ldr	r0, [pc, r0]
   12a70:	ldr	r2, [r0]
   12a74:	ldr	r0, [pc, #36]	; 12aa0 <error@@Base+0x44>
   12a78:	ldr	r0, [pc, r0]
   12a7c:	ldr	r0, [r0]
   12a80:	ldr	r1, [pc, #28]	; 12aa4 <error@@Base+0x48>
   12a84:	add	r1, pc, r1
   12a88:	bl	10c68 <fprintf@plt>
   12a8c:	ldr	r0, [pc, #20]	; 12aa8 <error@@Base+0x4c>
   12a90:	ldr	r0, [pc, r0]
   12a94:	ldr	r0, [r0]
   12a98:	bl	12a28 <__assert_fail@plt+0x1d3c>
   12a9c:	andeq	r6, r1, r4, ror #12
   12aa0:	andeq	r6, r1, r4, asr #12
   12aa4:	andeq	r2, r0, fp, lsr r2
   12aa8:	andeq	r6, r1, r8, ror #12
   12aac:	push	{fp, lr}
   12ab0:	mov	fp, sp
   12ab4:	sub	sp, sp, #8
   12ab8:	mov	r3, r0
   12abc:	ldr	r0, [pc, #48]	; 12af4 <error@@Base+0x98>
   12ac0:	ldr	r0, [pc, r0]
   12ac4:	ldr	r2, [r0]
   12ac8:	ldr	r0, [pc, #40]	; 12af8 <error@@Base+0x9c>
   12acc:	ldr	r0, [pc, r0]
   12ad0:	str	r1, [sp]
   12ad4:	ldr	r0, [r0]
   12ad8:	ldr	r1, [pc, #28]	; 12afc <error@@Base+0xa0>
   12adc:	add	r1, pc, r1
   12ae0:	bl	10c68 <fprintf@plt>
   12ae4:	ldr	r0, [pc, #20]	; 12b00 <error@@Base+0xa4>
   12ae8:	ldr	r0, [pc, r0]
   12aec:	ldr	r0, [r0]
   12af0:	bl	12a28 <__assert_fail@plt+0x1d3c>
   12af4:	andeq	r6, r1, r0, lsl r6
   12af8:	strdeq	r6, [r1], -r0
   12afc:	andeq	r2, r0, fp, ror #3
   12b00:	andeq	r6, r1, r0, lsl r6
   12b04:	push	{fp, lr}
   12b08:	mov	fp, sp
   12b0c:	sub	sp, sp, #8
   12b10:	mov	r3, r0
   12b14:	ldr	r0, [pc, #40]	; 12b44 <error@@Base+0xe8>
   12b18:	ldr	r0, [pc, r0]
   12b1c:	ldr	r2, [r0]
   12b20:	ldr	r0, [pc, #32]	; 12b48 <error@@Base+0xec>
   12b24:	ldr	r0, [pc, r0]
   12b28:	str	r1, [sp]
   12b2c:	ldr	r0, [r0]
   12b30:	ldr	r1, [pc, #20]	; 12b4c <error@@Base+0xf0>
   12b34:	add	r1, pc, r1
   12b38:	bl	10c68 <fprintf@plt>
   12b3c:	mov	sp, fp
   12b40:	pop	{fp, pc}
   12b44:			; <UNDEFINED> instruction: 0x000165b8
   12b48:	muleq	r1, r8, r5
   12b4c:	muleq	r0, r3, r1
   12b50:	push	{fp, lr}
   12b54:	mov	fp, sp
   12b58:	ldr	r0, [pc, #32]	; 12b80 <error@@Base+0x124>
   12b5c:	add	r0, pc, r0
   12b60:	ldrb	r1, [r0]
   12b64:	cmp	r1, #1
   12b68:	popeq	{fp, pc}
   12b6c:	mov	r1, #1
   12b70:	strb	r1, [r0]
   12b74:	ldr	r0, [pc, #8]	; 12b84 <error@@Base+0x128>
   12b78:	add	r0, pc, r0
   12b7c:	bl	12a5c <error@@Base>
   12b80:	andeq	r8, r1, r6, lsl #11
   12b84:	andeq	r2, r0, sl, ror #2
   12b88:	push	{fp, lr}
   12b8c:	mov	fp, sp
   12b90:	mov	r3, r0
   12b94:	ldr	r0, [pc, #60]	; 12bd8 <error@@Base+0x17c>
   12b98:	ldr	r0, [pc, r0]
   12b9c:	ldr	r0, [r0]
   12ba0:	cmp	r0, #0
   12ba4:	bne	12bd0 <error@@Base+0x174>
   12ba8:	ldr	r0, [pc, #44]	; 12bdc <error@@Base+0x180>
   12bac:	ldr	r0, [pc, r0]
   12bb0:	ldr	r2, [r0]
   12bb4:	ldr	r0, [pc, #36]	; 12be0 <error@@Base+0x184>
   12bb8:	ldr	r0, [pc, r0]
   12bbc:	ldr	r0, [r0]
   12bc0:	ldr	r1, [pc, #28]	; 12be4 <error@@Base+0x188>
   12bc4:	add	r1, pc, r1
   12bc8:	bl	10c68 <fprintf@plt>
   12bcc:	bl	12a18 <__assert_fail@plt+0x1d2c>
   12bd0:	blx	r0
   12bd4:	bl	12a18 <__assert_fail@plt+0x1d2c>
   12bd8:	andeq	r6, r1, r8, lsl r5
   12bdc:	andeq	r6, r1, r4, lsr #10
   12be0:	andeq	r6, r1, r4, lsl #10
   12be4:	andeq	r2, r0, r3, lsr r1
   12be8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bec:	add	fp, sp, #24
   12bf0:	sub	sp, sp, #104	; 0x68
   12bf4:	ldr	r8, [pc, #124]	; 12c78 <error@@Base+0x21c>
   12bf8:	add	r8, pc, r8
   12bfc:	ldrsh	r0, [r8]
   12c00:	cmp	r0, #1
   12c04:	blt	12c70 <error@@Base+0x214>
   12c08:	ldr	r9, [pc, #108]	; 12c7c <error@@Base+0x220>
   12c0c:	mov	r7, #1
   12c10:	add	r4, sp, #4
   12c14:	ldr	r9, [pc, r9]
   12c18:	ldr	r5, [pc, #96]	; 12c80 <error@@Base+0x224>
   12c1c:	add	r5, pc, r5
   12c20:	ldr	r6, [r9]
   12c24:	bl	10c2c <getpid@plt>
   12c28:	mov	r3, r0
   12c2c:	sxth	r0, r7
   12c30:	mov	r1, r5
   12c34:	mov	r2, r6
   12c38:	str	r0, [sp]
   12c3c:	mov	r0, r4
   12c40:	bl	10ca4 <sprintf@plt>
   12c44:	mov	r0, r4
   12c48:	bl	10b9c <strdup@plt>
   12c4c:	mov	r6, r0
   12c50:	bl	10bb4 <unlink@plt>
   12c54:	mov	r0, r6
   12c58:	bl	10b6c <free@plt>
   12c5c:	add	r0, r7, #1
   12c60:	sxth	r7, r0
   12c64:	ldrsh	r0, [r8]
   12c68:	cmp	r7, r0
   12c6c:	ble	12c20 <error@@Base+0x1c4>
   12c70:	sub	sp, fp, #24
   12c74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c78:	andeq	r8, r1, r8, ror #9
   12c7c:			; <UNDEFINED> instruction: 0x000164bc
   12c80:	strheq	r2, [r0], -r8
   12c84:	andeq	r0, r0, r0
   12c88:	ldm	r0, {r3, ip}
   12c8c:	add	r2, ip, r2
   12c90:	add	r1, r3, r1
   12c94:	stm	r0, {r1, r2}
   12c98:	bx	lr
   12c9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ca0:	add	fp, sp, #24
   12ca4:	mov	r8, r3
   12ca8:	mov	r5, r2
   12cac:	mov	r4, r1
   12cb0:	mov	r6, r0
   12cb4:	bl	12314 <__assert_fail@plt+0x1628>
   12cb8:	mov	r7, r0
   12cbc:	cmp	r0, #0
   12cc0:	bne	12cec <error@@Base+0x290>
   12cc4:	mov	r0, #1
   12cc8:	mov	r1, #20
   12ccc:	bl	1258c <__assert_fail@plt+0x18a0>
   12cd0:	mov	r7, r0
   12cd4:	mov	r0, r4
   12cd8:	bl	10b9c <strdup@plt>
   12cdc:	str	r0, [r7, #8]
   12ce0:	mov	r0, r6
   12ce4:	mov	r1, r7
   12ce8:	bl	123a4 <__assert_fail@plt+0x16b8>
   12cec:	ldr	r0, [r7, #12]
   12cf0:	ldr	r1, [r7, #16]
   12cf4:	add	r0, r0, r5
   12cf8:	add	r1, r1, r8
   12cfc:	str	r0, [r7, #12]
   12d00:	str	r1, [r7, #16]
   12d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d08:	push	{r4, r5, r6, r7, fp, lr}
   12d0c:	add	fp, sp, #16
   12d10:	sub	sp, sp, #8
   12d14:	mov	r6, r1
   12d18:	ldr	r1, [pc, #484]	; 12f04 <error@@Base+0x4a8>
   12d1c:	mov	r5, r0
   12d20:	mov	r0, r6
   12d24:	add	r1, pc, r1
   12d28:	bl	12634 <__assert_fail@plt+0x1948>
   12d2c:	mov	r4, r0
   12d30:	ldr	r0, [pc, #464]	; 12f08 <error@@Base+0x4ac>
   12d34:	mov	r1, #99	; 0x63
   12d38:	mov	r2, r4
   12d3c:	add	r0, pc, r0
   12d40:	bl	10b84 <fgets@plt>
   12d44:	cmp	r0, #0
   12d48:	beq	12ee8 <error@@Base+0x48c>
   12d4c:	ldr	r0, [pc, #440]	; 12f0c <error@@Base+0x4b0>
   12d50:	ldr	r1, [pc, #440]	; 12f10 <error@@Base+0x4b4>
   12d54:	mov	r2, #45	; 0x2d
   12d58:	add	r0, pc, r0
   12d5c:	add	r1, pc, r1
   12d60:	bl	10c44 <bcmp@plt>
   12d64:	cmp	r0, #0
   12d68:	bne	12ee8 <error@@Base+0x48c>
   12d6c:	ldr	r0, [pc, #416]	; 12f14 <error@@Base+0x4b8>
   12d70:	mov	r1, #99	; 0x63
   12d74:	mov	r2, r4
   12d78:	add	r0, pc, r0
   12d7c:	bl	10b84 <fgets@plt>
   12d80:	cmp	r0, #0
   12d84:	beq	12ee8 <error@@Base+0x48c>
   12d88:	ldr	r0, [pc, #392]	; 12f18 <error@@Base+0x4bc>
   12d8c:	ldr	r1, [pc, #392]	; 12f1c <error@@Base+0x4c0>
   12d90:	mov	r2, #48	; 0x30
   12d94:	add	r0, pc, r0
   12d98:	add	r1, pc, r1
   12d9c:	bl	10c44 <bcmp@plt>
   12da0:	cmp	r0, #0
   12da4:	bne	12ee8 <error@@Base+0x48c>
   12da8:	ldr	r0, [pc, #368]	; 12f20 <error@@Base+0x4c4>
   12dac:	mov	r1, #99	; 0x63
   12db0:	mov	r2, r4
   12db4:	add	r0, pc, r0
   12db8:	bl	10b84 <fgets@plt>
   12dbc:	cmp	r0, #0
   12dc0:	beq	12ee8 <error@@Base+0x48c>
   12dc4:	ldr	r0, [pc, #344]	; 12f24 <error@@Base+0x4c8>
   12dc8:	ldr	r1, [pc, #344]	; 12f28 <error@@Base+0x4cc>
   12dcc:	add	r2, sp, #4
   12dd0:	add	r0, pc, r0
   12dd4:	add	r1, pc, r1
   12dd8:	bl	10c74 <__isoc99_sscanf@plt>
   12ddc:	cmp	r0, #1
   12de0:	bne	12ee8 <error@@Base+0x48c>
   12de4:	ldr	r0, [pc, #320]	; 12f2c <error@@Base+0x4d0>
   12de8:	mov	r1, #99	; 0x63
   12dec:	mov	r2, r4
   12df0:	add	r0, pc, r0
   12df4:	bl	10b84 <fgets@plt>
   12df8:	cmp	r0, #0
   12dfc:	beq	12ee8 <error@@Base+0x48c>
   12e00:	ldr	r0, [pc, #296]	; 12f30 <error@@Base+0x4d4>
   12e04:	ldr	r1, [pc, #296]	; 12f34 <error@@Base+0x4d8>
   12e08:	mov	r2, sp
   12e0c:	add	r0, pc, r0
   12e10:	add	r1, pc, r1
   12e14:	bl	10c74 <__isoc99_sscanf@plt>
   12e18:	cmp	r0, #1
   12e1c:	bne	12ee8 <error@@Base+0x48c>
   12e20:	ldr	r0, [pc, #272]	; 12f38 <error@@Base+0x4dc>
   12e24:	mov	r1, #99	; 0x63
   12e28:	mov	r2, r4
   12e2c:	add	r0, pc, r0
   12e30:	bl	10b84 <fgets@plt>
   12e34:	cmp	r0, #0
   12e38:	beq	12ee8 <error@@Base+0x48c>
   12e3c:	ldr	r0, [pc, #248]	; 12f3c <error@@Base+0x4e0>
   12e40:	mov	r1, #99	; 0x63
   12e44:	mov	r2, r4
   12e48:	add	r0, pc, r0
   12e4c:	bl	10b84 <fgets@plt>
   12e50:	cmp	r0, #0
   12e54:	beq	12ee8 <error@@Base+0x48c>
   12e58:	ldr	r2, [sp, #4]
   12e5c:	ldm	r5, {r0, r1}
   12e60:	add	r0, r0, r2
   12e64:	ldr	r2, [sp]
   12e68:	add	r1, r1, r2
   12e6c:	stm	r5, {r0, r1}
   12e70:	add	r1, r5, #8
   12e74:	mov	r0, r4
   12e78:	bl	12f48 <error@@Base+0x4ec>
   12e7c:	mov	r7, r0
   12e80:	add	r1, r5, #416	; 0x1a0
   12e84:	mov	r0, r4
   12e88:	bl	12f48 <error@@Base+0x4ec>
   12e8c:	mov	r6, r0
   12e90:	add	r1, r5, #824	; 0x338
   12e94:	mov	r0, r4
   12e98:	bl	12f48 <error@@Base+0x4ec>
   12e9c:	ldr	r0, [sp, #4]
   12ea0:	cmp	r0, #1
   12ea4:	blt	12ed8 <error@@Base+0x47c>
   12ea8:	add	r1, r5, #920	; 0x398
   12eac:	mov	r0, r4
   12eb0:	bl	12f48 <error@@Base+0x4ec>
   12eb4:	cmp	r7, #1
   12eb8:	addge	r1, r5, #992	; 0x3e0
   12ebc:	movge	r0, r4
   12ec0:	blge	13088 <error@@Base+0x62c>
   12ec4:	cmp	r6, #1
   12ec8:	movwge	r0, #9048	; 0x2358
   12ecc:	addge	r1, r5, r0
   12ed0:	movge	r0, r4
   12ed4:	blge	13088 <error@@Base+0x62c>
   12ed8:	mov	r0, r4
   12edc:	bl	126bc <__assert_fail@plt+0x19d0>
   12ee0:	sub	sp, fp, #16
   12ee4:	pop	{r4, r5, r6, r7, fp, pc}
   12ee8:	ldr	r1, [pc, #80]	; 12f40 <error@@Base+0x4e4>
   12eec:	ldr	r0, [pc, #80]	; 12f44 <error@@Base+0x4e8>
   12ef0:	cmp	r6, #0
   12ef4:	add	r1, pc, r1
   12ef8:	movne	r1, r6
   12efc:	add	r0, pc, r0
   12f00:	bl	12aac <error@@Base+0x50>
   12f04:	andeq	r1, r0, r0, lsr #29
   12f08:	andeq	r8, r1, r7, lsr #7
   12f0c:	andeq	r8, r1, fp, lsl #7
   12f10:	andeq	r1, r0, sl, asr #31
   12f14:	andeq	r8, r1, fp, ror #6
   12f18:	andeq	r8, r1, pc, asr #6
   12f1c:	andeq	r5, r0, r0, asr #9
   12f20:	andeq	r8, r1, pc, lsr #6
   12f24:	andeq	r8, r1, r3, lsl r3
   12f28:	andeq	r2, r0, r5
   12f2c:	strdeq	r8, [r1], -r3
   12f30:	ldrdeq	r8, [r1], -r7
   12f34:	andeq	r1, r0, r9, asr #31
   12f38:			; <UNDEFINED> instruction: 0x000182b7
   12f3c:	muleq	r1, fp, r2
   12f40:	andeq	r1, r0, r4, ror lr
   12f44:	andeq	r1, r0, sl, asr lr
   12f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f4c:	add	fp, sp, #28
   12f50:	sub	sp, sp, #12
   12f54:	mov	r5, r0
   12f58:	ldr	r0, [pc, #276]	; 13074 <error@@Base+0x618>
   12f5c:	mov	r4, r1
   12f60:	mov	r1, #99	; 0x63
   12f64:	mov	r2, r5
   12f68:	add	r0, pc, r0
   12f6c:	bl	10b84 <fgets@plt>
   12f70:	mov	r6, #0
   12f74:	cmp	r0, #0
   12f78:	beq	13068 <error@@Base+0x60c>
   12f7c:	ldr	r0, [pc, #244]	; 13078 <error@@Base+0x61c>
   12f80:	mov	r1, #99	; 0x63
   12f84:	mov	r2, r5
   12f88:	add	r0, pc, r0
   12f8c:	bl	10b84 <fgets@plt>
   12f90:	cmp	r0, #0
   12f94:	beq	13068 <error@@Base+0x60c>
   12f98:	ldr	r7, [pc, #220]	; 1307c <error@@Base+0x620>
   12f9c:	mov	r1, #99	; 0x63
   12fa0:	mov	r2, r5
   12fa4:	add	r7, pc, r7
   12fa8:	mov	r0, r7
   12fac:	bl	10b84 <fgets@plt>
   12fb0:	cmp	r0, #0
   12fb4:	beq	13068 <error@@Base+0x60c>
   12fb8:	mov	r6, #0
   12fbc:	add	r9, sp, #8
   12fc0:	add	sl, sp, #4
   12fc4:	add	r8, r7, #29
   12fc8:	b	13028 <error@@Base+0x5cc>
   12fcc:	ldr	r1, [pc, #176]	; 13084 <error@@Base+0x628>
   12fd0:	mov	r0, r8
   12fd4:	mov	r2, #8
   12fd8:	add	r1, pc, r1
   12fdc:	bl	10c44 <bcmp@plt>
   12fe0:	ldr	r1, [sp, #8]
   12fe4:	cmp	r0, #0
   12fe8:	movwne	r0, #11
   12fec:	moveq	r6, r1
   12ff0:	mov	r2, r4
   12ff4:	ldr	r0, [r2, r0, lsl #3]!
   12ff8:	add	r0, r0, r1
   12ffc:	ldr	r1, [sp, #4]
   13000:	str	r0, [r2]
   13004:	ldr	r0, [r2, #4]
   13008:	add	r0, r0, r1
   1300c:	mov	r1, #99	; 0x63
   13010:	str	r0, [r2, #4]
   13014:	mov	r0, r7
   13018:	mov	r2, r5
   1301c:	bl	10b84 <fgets@plt>
   13020:	cmp	r0, #0
   13024:	beq	13068 <error@@Base+0x60c>
   13028:	ldr	r1, [pc, #80]	; 13080 <error@@Base+0x624>
   1302c:	mov	r0, r7
   13030:	mov	r2, r9
   13034:	mov	r3, sl
   13038:	add	r1, pc, r1
   1303c:	bl	10c74 <__isoc99_sscanf@plt>
   13040:	cmp	r0, #2
   13044:	bne	13068 <error@@Base+0x60c>
   13048:	mov	r0, r8
   1304c:	mov	r1, #0
   13050:	mov	r2, #10
   13054:	bl	10b54 <strtol@plt>
   13058:	cmp	r0, #0
   1305c:	beq	12fcc <error@@Base+0x570>
   13060:	ldr	r1, [sp, #8]
   13064:	b	12ff0 <error@@Base+0x594>
   13068:	mov	r0, r6
   1306c:	sub	sp, fp, #28
   13070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13074:	andeq	r8, r1, fp, ror r1
   13078:	andeq	r8, r1, fp, asr r1
   1307c:	andeq	r8, r1, pc, lsr r1
   13080:	muleq	r0, sp, sp
   13084:	strdeq	r1, [r0], -r5
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	add	fp, sp, #28
   13090:	sub	sp, sp, #12
   13094:	mov	r5, r0
   13098:	ldr	r0, [pc, #276]	; 131b4 <error@@Base+0x758>
   1309c:	mov	r4, r1
   130a0:	mov	r1, #99	; 0x63
   130a4:	mov	r2, r5
   130a8:	add	r0, pc, r0
   130ac:	bl	10b84 <fgets@plt>
   130b0:	cmp	r0, #0
   130b4:	beq	131ac <error@@Base+0x750>
   130b8:	ldr	r0, [pc, #248]	; 131b8 <error@@Base+0x75c>
   130bc:	mov	r1, #99	; 0x63
   130c0:	mov	r2, r5
   130c4:	add	r0, pc, r0
   130c8:	bl	10b84 <fgets@plt>
   130cc:	cmp	r0, #0
   130d0:	beq	131ac <error@@Base+0x750>
   130d4:	ldr	r6, [pc, #224]	; 131bc <error@@Base+0x760>
   130d8:	mov	r1, #99	; 0x63
   130dc:	mov	r2, r5
   130e0:	add	r6, pc, r6
   130e4:	mov	r0, r6
   130e8:	bl	10b84 <fgets@plt>
   130ec:	cmp	r0, #0
   130f0:	beq	131ac <error@@Base+0x750>
   130f4:	add	r7, r6, #29
   130f8:	b	1312c <error@@Base+0x6d0>
   130fc:	ldr	r0, [r8, #12]
   13100:	ldr	r1, [r8, #16]
   13104:	mov	r2, r5
   13108:	add	r0, r0, r9
   1310c:	add	r1, r1, sl
   13110:	str	r0, [r8, #12]
   13114:	str	r1, [r8, #16]
   13118:	mov	r0, r6
   1311c:	mov	r1, #99	; 0x63
   13120:	bl	10b84 <fgets@plt>
   13124:	cmp	r0, #0
   13128:	beq	131ac <error@@Base+0x750>
   1312c:	ldr	r1, [pc, #140]	; 131c0 <error@@Base+0x764>
   13130:	mov	r0, r6
   13134:	add	r2, sp, #8
   13138:	add	r3, sp, #4
   1313c:	add	r1, pc, r1
   13140:	bl	10c74 <__isoc99_sscanf@plt>
   13144:	cmp	r0, #2
   13148:	bne	131ac <error@@Base+0x750>
   1314c:	mov	r0, r6
   13150:	bl	10c5c <strlen@plt>
   13154:	ldr	r9, [sp, #8]
   13158:	ldr	sl, [sp, #4]
   1315c:	add	r0, r0, r6
   13160:	mov	r1, #0
   13164:	strb	r1, [r0, #-1]
   13168:	mov	r0, r4
   1316c:	mov	r1, r7
   13170:	bl	12314 <__assert_fail@plt+0x1628>
   13174:	mov	r8, r0
   13178:	cmp	r0, #0
   1317c:	bne	130fc <error@@Base+0x6a0>
   13180:	mov	r0, #1
   13184:	mov	r1, #20
   13188:	bl	1258c <__assert_fail@plt+0x18a0>
   1318c:	mov	r8, r0
   13190:	mov	r0, r7
   13194:	bl	10b9c <strdup@plt>
   13198:	str	r0, [r8, #8]
   1319c:	mov	r0, r4
   131a0:	mov	r1, r8
   131a4:	bl	123a4 <__assert_fail@plt+0x16b8>
   131a8:	b	130fc <error@@Base+0x6a0>
   131ac:	sub	sp, fp, #28
   131b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131b4:	andeq	r8, r1, fp, lsr r0
   131b8:	andeq	r8, r1, pc, lsl r0
   131bc:	andeq	r8, r1, r3
   131c0:	muleq	r0, r9, ip
   131c4:	nop	{0}
   131c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131cc:	add	fp, sp, #24
   131d0:	sub	sp, sp, #8
   131d4:	mov	r2, r1
   131d8:	ldr	r1, [pc, #448]	; 133a0 <error@@Base+0x944>
   131dc:	mov	r5, r0
   131e0:	mov	r0, r2
   131e4:	add	r1, pc, r1
   131e8:	bl	12634 <__assert_fail@plt+0x1948>
   131ec:	ldr	r1, [pc, #432]	; 133a4 <error@@Base+0x948>
   131f0:	ldr	r2, [pc, #432]	; 133a8 <error@@Base+0x94c>
   131f4:	ldr	r3, [pc, #432]	; 133ac <error@@Base+0x950>
   131f8:	mov	r4, r0
   131fc:	add	r1, pc, r1
   13200:	add	r2, pc, r2
   13204:	add	r3, pc, r3
   13208:	bl	10c68 <fprintf@plt>
   1320c:	ldr	r2, [r5]
   13210:	ldr	r1, [pc, #408]	; 133b0 <error@@Base+0x954>
   13214:	mov	r0, r4
   13218:	add	r1, pc, r1
   1321c:	bl	10c68 <fprintf@plt>
   13220:	ldr	r2, [r5, #4]
   13224:	ldr	r1, [pc, #392]	; 133b4 <error@@Base+0x958>
   13228:	mov	r0, r4
   1322c:	add	r1, pc, r1
   13230:	bl	10c68 <fprintf@plt>
   13234:	ldr	r0, [r5]
   13238:	cmp	r0, #0
   1323c:	beq	1327c <error@@Base+0x820>
   13240:	ldr	r1, [r5, #4]
   13244:	vldr	d16, [pc, #332]	; 13398 <error@@Base+0x93c>
   13248:	vmov	s2, r0
   1324c:	sub	r1, r0, r1
   13250:	mov	r0, r4
   13254:	vmov	s0, r1
   13258:	vcvt.f64.s32	d17, s0
   1325c:	vcvt.f64.s32	d18, s2
   13260:	ldr	r1, [pc, #340]	; 133bc <error@@Base+0x960>
   13264:	add	r1, pc, r1
   13268:	vmul.f64	d16, d17, d16
   1326c:	vdiv.f64	d16, d16, d18
   13270:	vmov	r2, r3, d16
   13274:	bl	10c68 <fprintf@plt>
   13278:	b	13294 <error@@Base+0x838>
   1327c:	ldr	r0, [pc, #308]	; 133b8 <error@@Base+0x95c>
   13280:	mov	r1, #8
   13284:	mov	r2, #1
   13288:	mov	r3, r4
   1328c:	add	r0, pc, r0
   13290:	bl	10bd8 <fwrite@plt>
   13294:	ldr	r0, [pc, #292]	; 133c0 <error@@Base+0x964>
   13298:	mov	r1, #12
   1329c:	mov	r2, #1
   132a0:	mov	r3, r4
   132a4:	mov	r7, #1
   132a8:	add	r0, pc, r0
   132ac:	bl	10bd8 <fwrite@plt>
   132b0:	mov	r8, #0
   132b4:	str	r7, [sp, #4]
   132b8:	add	r1, r5, #8
   132bc:	mov	r0, r4
   132c0:	mov	r2, #50	; 0x32
   132c4:	str	r8, [sp]
   132c8:	ldr	r3, [pc, #244]	; 133c4 <error@@Base+0x968>
   132cc:	add	r3, pc, r3
   132d0:	bl	133e0 <error@@Base+0x984>
   132d4:	str	r8, [sp]
   132d8:	str	r7, [sp, #4]
   132dc:	add	r6, r5, #416	; 0x1a0
   132e0:	mov	r0, r4
   132e4:	mov	r2, #50	; 0x32
   132e8:	ldr	r3, [pc, #216]	; 133c8 <error@@Base+0x96c>
   132ec:	mov	r1, r6
   132f0:	add	r3, pc, r3
   132f4:	bl	133e0 <error@@Base+0x984>
   132f8:	str	r7, [sp]
   132fc:	str	r7, [sp, #4]
   13300:	add	r1, r5, #824	; 0x338
   13304:	mov	r0, r4
   13308:	mov	r2, #10
   1330c:	ldr	r3, [pc, #184]	; 133cc <error@@Base+0x970>
   13310:	add	r3, pc, r3
   13314:	bl	133e0 <error@@Base+0x984>
   13318:	ldr	r0, [r5]
   1331c:	cmp	r0, #1
   13320:	blt	13388 <error@@Base+0x92c>
   13324:	str	r8, [sp]
   13328:	str	r8, [sp, #4]
   1332c:	add	r1, r5, #920	; 0x398
   13330:	mov	r0, r4
   13334:	mov	r2, #8
   13338:	ldr	r3, [pc, #144]	; 133d0 <error@@Base+0x974>
   1333c:	add	r3, pc, r3
   13340:	bl	133e0 <error@@Base+0x984>
   13344:	ldr	r0, [r5, #8]
   13348:	cmp	r0, #1
   1334c:	blt	13364 <error@@Base+0x908>
   13350:	ldr	r2, [pc, #124]	; 133d4 <error@@Base+0x978>
   13354:	add	r1, r5, #992	; 0x3e0
   13358:	mov	r0, r4
   1335c:	add	r2, pc, r2
   13360:	bl	137a0 <error@@Base+0xd44>
   13364:	ldr	r0, [r6]
   13368:	cmp	r0, #1
   1336c:	blt	13388 <error@@Base+0x92c>
   13370:	ldr	r2, [pc, #96]	; 133d8 <error@@Base+0x97c>
   13374:	movw	r0, #9048	; 0x2358
   13378:	add	r1, r5, r0
   1337c:	mov	r0, r4
   13380:	add	r2, pc, r2
   13384:	bl	137a0 <error@@Base+0xd44>
   13388:	mov	r0, r4
   1338c:	sub	sp, fp, #24
   13390:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13394:	b	126bc <__assert_fail@plt+0x19d0>
   13398:	andeq	r0, r0, r0
   1339c:	subsmi	r0, r9, r0
   133a0:	andeq	r1, r0, r7, asr #19
   133a4:	andeq	r1, r0, r2, ror fp
   133a8:	andeq	r1, r0, r6, lsr #22
   133ac:	andeq	r5, r0, r4, asr r0
   133b0:	andeq	r1, r0, fp, asr fp
   133b4:	andeq	r1, r0, r5, asr fp
   133b8:	andeq	r1, r0, r1, asr fp
   133bc:	andeq	r1, r0, r2, lsl #23
   133c0:	andeq	r1, r0, pc, ror #21
   133c4:	ldrdeq	r1, [r0], -r8
   133c8:	andeq	r1, r0, r7, asr #21
   133cc:	muleq	r0, lr, sl
   133d0:	andeq	r1, r0, r9, lsl #21
   133d4:	andeq	r1, r0, r8, asr #20
   133d8:	andeq	r1, r0, r7, lsr sl
   133dc:	nop	{0}
   133e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133e4:	add	fp, sp, #28
   133e8:	sub	sp, sp, #4
   133ec:	vpush	{d8}
   133f0:	sub	sp, sp, #8
   133f4:	mov	r5, r1
   133f8:	ldr	r1, [pc, #832]	; 13740 <error@@Base+0xce4>
   133fc:	mov	r8, r2
   13400:	mov	r2, r3
   13404:	mov	r4, r0
   13408:	add	r1, pc, r1
   1340c:	bl	10c68 <fprintf@plt>
   13410:	ldr	r0, [pc, #812]	; 13744 <error@@Base+0xce8>
   13414:	mov	r1, #26
   13418:	mov	r2, #1
   1341c:	mov	r3, r4
   13420:	mov	r7, #1
   13424:	add	r0, pc, r0
   13428:	bl	10bd8 <fwrite@plt>
   1342c:	ldr	r0, [pc, #788]	; 13748 <error@@Base+0xcec>
   13430:	mov	r1, #3
   13434:	mov	r2, #1
   13438:	mov	r3, r4
   1343c:	add	r0, pc, r0
   13440:	bl	10bd8 <fwrite@plt>
   13444:	ldrb	r1, [fp, #8]
   13448:	ldr	r0, [pc, #764]	; 1374c <error@@Base+0xcf0>
   1344c:	ldr	r2, [pc, #764]	; 13750 <error@@Base+0xcf4>
   13450:	str	r1, [sp]
   13454:	cmp	r1, #0
   13458:	add	r0, pc, r0
   1345c:	add	r2, pc, r2
   13460:	ldr	r1, [pc, #748]	; 13754 <error@@Base+0xcf8>
   13464:	movne	r2, r0
   13468:	mov	r0, r4
   1346c:	add	r1, pc, r1
   13470:	bl	10c68 <fprintf@plt>
   13474:	ldr	r1, [fp, #12]
   13478:	lsl	r0, r8, #16
   1347c:	sxth	r6, r8
   13480:	cmp	r0, #65536	; 0x10000
   13484:	str	r1, [sp, #4]
   13488:	blt	13574 <error@@Base+0xb18>
   1348c:	ldr	sl, [pc, #708]	; 13758 <error@@Base+0xcfc>
   13490:	vldr	d8, [pc, #672]	; 13738 <error@@Base+0xcdc>
   13494:	mov	r8, #1
   13498:	add	sl, pc, sl
   1349c:	b	134f0 <error@@Base+0xa94>
   134a0:	ldr	r0, [pc, #704]	; 13768 <error@@Base+0xd0c>
   134a4:	mov	r1, #26
   134a8:	add	r0, pc, r0
   134ac:	mov	r2, #1
   134b0:	mov	r3, r4
   134b4:	bl	10bd8 <fwrite@plt>
   134b8:	ldr	r0, [pc, #684]	; 1376c <error@@Base+0xd10>
   134bc:	mov	r1, #3
   134c0:	mov	r2, #1
   134c4:	mov	r3, r4
   134c8:	add	r0, pc, r0
   134cc:	bl	10bd8 <fwrite@plt>
   134d0:	mov	r0, r4
   134d4:	mov	r1, sl
   134d8:	mov	r2, r7
   134dc:	bl	10c68 <fprintf@plt>
   134e0:	add	r8, r8, #1
   134e4:	sxth	r7, r8
   134e8:	cmp	r6, r7
   134ec:	blt	13574 <error@@Base+0xb18>
   134f0:	mov	r0, r5
   134f4:	ldr	r2, [r0, r7, lsl #3]!
   134f8:	cmp	r2, #1
   134fc:	blt	134e0 <error@@Base+0xa84>
   13500:	cmp	r0, #0
   13504:	beq	134a0 <error@@Base+0xa44>
   13508:	add	r9, r5, r7, lsl #3
   1350c:	mov	r0, r4
   13510:	ldr	r3, [r9, #4]!
   13514:	ldr	r1, [pc, #576]	; 1375c <error@@Base+0xd00>
   13518:	add	r1, pc, r1
   1351c:	bl	10c68 <fprintf@plt>
   13520:	ldr	r0, [r5, r7, lsl #3]
   13524:	cmp	r0, #0
   13528:	beq	13564 <error@@Base+0xb08>
   1352c:	ldr	r1, [r9]
   13530:	vmov	s2, r0
   13534:	sub	r1, r0, r1
   13538:	mov	r0, r4
   1353c:	vmov	s0, r1
   13540:	vcvt.f64.s32	d16, s0
   13544:	vcvt.f64.s32	d17, s2
   13548:	ldr	r1, [pc, #532]	; 13764 <error@@Base+0xd08>
   1354c:	add	r1, pc, r1
   13550:	vmul.f64	d16, d16, d8
   13554:	vdiv.f64	d16, d16, d17
   13558:	vmov	r2, r3, d16
   1355c:	bl	10c68 <fprintf@plt>
   13560:	b	134b8 <error@@Base+0xa5c>
   13564:	ldr	r0, [pc, #500]	; 13760 <error@@Base+0xd04>
   13568:	mov	r1, #8
   1356c:	add	r0, pc, r0
   13570:	b	134ac <error@@Base+0xa50>
   13574:	ldr	r0, [sp]
   13578:	cmp	r0, #0
   1357c:	beq	13650 <error@@Base+0xbf4>
   13580:	add	r7, r6, #1
   13584:	mov	r0, r5
   13588:	ldr	r2, [r0, r7, lsl #3]!
   1358c:	cmp	r2, #1
   13590:	blt	13650 <error@@Base+0xbf4>
   13594:	cmp	r0, #0
   13598:	beq	135fc <error@@Base+0xba0>
   1359c:	add	r8, r5, r7, lsl #3
   135a0:	mov	r0, r4
   135a4:	ldr	r3, [r8, #4]!
   135a8:	ldr	r1, [pc, #448]	; 13770 <error@@Base+0xd14>
   135ac:	add	r1, pc, r1
   135b0:	bl	10c68 <fprintf@plt>
   135b4:	ldr	r0, [r5, r7, lsl #3]
   135b8:	cmp	r0, #0
   135bc:	beq	1360c <error@@Base+0xbb0>
   135c0:	ldr	r1, [r8]
   135c4:	vldr	d16, [pc, #364]	; 13738 <error@@Base+0xcdc>
   135c8:	vmov	s2, r0
   135cc:	sub	r1, r0, r1
   135d0:	mov	r0, r4
   135d4:	vmov	s0, r1
   135d8:	vcvt.f64.s32	d17, s0
   135dc:	vcvt.f64.s32	d18, s2
   135e0:	ldr	r1, [pc, #400]	; 13778 <error@@Base+0xd1c>
   135e4:	add	r1, pc, r1
   135e8:	vmul.f64	d16, d17, d16
   135ec:	vdiv.f64	d16, d16, d18
   135f0:	vmov	r2, r3, d16
   135f4:	bl	10c68 <fprintf@plt>
   135f8:	b	13624 <error@@Base+0xbc8>
   135fc:	ldr	r0, [pc, #376]	; 1377c <error@@Base+0xd20>
   13600:	mov	r1, #26
   13604:	add	r0, pc, r0
   13608:	b	13618 <error@@Base+0xbbc>
   1360c:	ldr	r0, [pc, #352]	; 13774 <error@@Base+0xd18>
   13610:	mov	r1, #8
   13614:	add	r0, pc, r0
   13618:	mov	r2, #1
   1361c:	mov	r3, r4
   13620:	bl	10bd8 <fwrite@plt>
   13624:	ldr	r0, [pc, #340]	; 13780 <error@@Base+0xd24>
   13628:	mov	r1, #3
   1362c:	mov	r2, #1
   13630:	mov	r3, r4
   13634:	add	r0, pc, r0
   13638:	bl	10bd8 <fwrite@plt>
   1363c:	ldr	r1, [pc, #320]	; 13784 <error@@Base+0xd28>
   13640:	mov	r0, r4
   13644:	mov	r2, r6
   13648:	add	r1, pc, r1
   1364c:	bl	10c68 <fprintf@plt>
   13650:	ldr	r0, [sp, #4]
   13654:	tst	r0, #255	; 0xff
   13658:	beq	136c0 <error@@Base+0xc64>
   1365c:	cmp	r5, #0
   13660:	beq	136d0 <error@@Base+0xc74>
   13664:	ldm	r5, {r2, r3}
   13668:	ldr	r1, [pc, #280]	; 13788 <error@@Base+0xd2c>
   1366c:	mov	r0, r4
   13670:	add	r1, pc, r1
   13674:	bl	10c68 <fprintf@plt>
   13678:	ldr	r0, [r5]
   1367c:	cmp	r0, #0
   13680:	beq	136e0 <error@@Base+0xc84>
   13684:	ldr	r1, [r5, #4]
   13688:	vldr	d16, [pc, #168]	; 13738 <error@@Base+0xcdc>
   1368c:	vmov	s2, r0
   13690:	sub	r1, r0, r1
   13694:	mov	r0, r4
   13698:	vmov	s0, r1
   1369c:	vcvt.f64.s32	d17, s0
   136a0:	vcvt.f64.s32	d18, s2
   136a4:	ldr	r1, [pc, #228]	; 13790 <error@@Base+0xd34>
   136a8:	add	r1, pc, r1
   136ac:	vmul.f64	d16, d17, d16
   136b0:	vdiv.f64	d16, d16, d18
   136b4:	vmov	r2, r3, d16
   136b8:	bl	10c68 <fprintf@plt>
   136bc:	b	136f8 <error@@Base+0xc9c>
   136c0:	sub	sp, fp, #40	; 0x28
   136c4:	vpop	{d8}
   136c8:	add	sp, sp, #4
   136cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d0:	ldr	r0, [pc, #188]	; 13794 <error@@Base+0xd38>
   136d4:	mov	r1, #26
   136d8:	add	r0, pc, r0
   136dc:	b	136ec <error@@Base+0xc90>
   136e0:	ldr	r0, [pc, #164]	; 1378c <error@@Base+0xd30>
   136e4:	mov	r1, #8
   136e8:	add	r0, pc, r0
   136ec:	mov	r2, #1
   136f0:	mov	r3, r4
   136f4:	bl	10bd8 <fwrite@plt>
   136f8:	ldr	r0, [pc, #152]	; 13798 <error@@Base+0xd3c>
   136fc:	mov	r1, #3
   13700:	mov	r2, #1
   13704:	mov	r3, r4
   13708:	add	r0, pc, r0
   1370c:	bl	10bd8 <fwrite@plt>
   13710:	ldr	r0, [pc, #132]	; 1379c <error@@Base+0xd40>
   13714:	mov	r1, #7
   13718:	mov	r2, #1
   1371c:	mov	r3, r4
   13720:	add	r0, pc, r0
   13724:	sub	sp, fp, #40	; 0x28
   13728:	vpop	{d8}
   1372c:	add	sp, sp, #4
   13730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13734:	b	10bd8 <fwrite@plt>
   13738:	andeq	r0, r0, r0
   1373c:	subsmi	r0, r9, r0
   13740:	andeq	r1, r0, r4, ror #19
   13744:	strdeq	r1, [r0], -r8
   13748:	strdeq	r1, [r0], -fp
   1374c:	muleq	r0, r9, r9
   13750:	muleq	r0, ip, r9
   13754:	andeq	r1, r0, r1, lsl #19
   13758:	andeq	r1, r0, r7, ror #18
   1375c:	strdeq	r1, [r0], -r9
   13760:	andeq	r1, r0, r1, ror r8
   13764:	muleq	r0, sl, r8
   13768:	andeq	r1, r0, r4, ror r9
   1376c:	andeq	r1, r0, pc, ror #18
   13770:	andeq	r1, r0, r5, ror #16
   13774:	andeq	r1, r0, r9, asr #15
   13778:	andeq	r1, r0, r2, lsl #16
   1377c:	andeq	r1, r0, r8, lsl r8
   13780:	andeq	r1, r0, r3, lsl #16
   13784:	andeq	r1, r0, r0, asr #15
   13788:	andeq	r1, r0, r1, lsr #15
   1378c:	strdeq	r1, [r0], -r5
   13790:	andeq	r1, r0, lr, lsr r7
   13794:	andeq	r1, r0, r4, asr #14
   13798:	andeq	r1, r0, pc, lsr #14
   1379c:	andeq	r1, r0, sp, lsr #13
   137a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137a4:	add	fp, sp, #28
   137a8:	sub	sp, sp, #4
   137ac:	vpush	{d8}
   137b0:	mov	r5, r0
   137b4:	mov	r0, r1
   137b8:	mov	r6, r2
   137bc:	mov	r4, r1
   137c0:	bl	124b4 <__assert_fail@plt+0x17c8>
   137c4:	movw	r0, #8048	; 0x1f70
   137c8:	ldr	r1, [r4, r0]!
   137cc:	ldr	r0, [r4, #4]
   137d0:	ldr	r2, [pc, #336]	; 13928 <error@@Base+0xecc>
   137d4:	add	r2, pc, r2
   137d8:	bl	14814 <error@@Base+0x1db8>
   137dc:	ldr	r1, [pc, #328]	; 1392c <error@@Base+0xed0>
   137e0:	mov	r0, r5
   137e4:	mov	r2, r6
   137e8:	add	r1, pc, r1
   137ec:	bl	10c68 <fprintf@plt>
   137f0:	ldr	r0, [pc, #312]	; 13930 <error@@Base+0xed4>
   137f4:	mov	r1, #26
   137f8:	mov	r2, #1
   137fc:	mov	r3, r5
   13800:	add	r0, pc, r0
   13804:	bl	10bd8 <fwrite@plt>
   13808:	ldr	r0, [pc, #292]	; 13934 <error@@Base+0xed8>
   1380c:	mov	r1, #3
   13810:	mov	r2, #1
   13814:	mov	r3, r5
   13818:	add	r0, pc, r0
   1381c:	bl	10bd8 <fwrite@plt>
   13820:	mov	r0, #10
   13824:	mov	r1, r5
   13828:	bl	10c98 <fputc@plt>
   1382c:	ldr	r0, [r4, #4]
   13830:	cmp	r0, #1
   13834:	blt	13910 <error@@Base+0xeb4>
   13838:	ldr	r9, [pc, #248]	; 13938 <error@@Base+0xedc>
   1383c:	ldr	r7, [pc, #248]	; 1393c <error@@Base+0xee0>
   13840:	ldr	r6, [pc, #248]	; 13940 <error@@Base+0xee4>
   13844:	vldr	d8, [pc, #212]	; 13920 <error@@Base+0xec4>
   13848:	mov	r8, #0
   1384c:	add	r9, pc, r9
   13850:	add	r7, pc, r7
   13854:	add	r6, pc, r6
   13858:	b	138cc <error@@Base+0xe70>
   1385c:	ldr	r1, [sl, #16]
   13860:	vmov	s2, r0
   13864:	sub	r1, r0, r1
   13868:	mov	r0, r5
   1386c:	vmov	s0, r1
   13870:	vcvt.f64.s32	d16, s0
   13874:	vcvt.f64.s32	d17, s2
   13878:	ldr	r1, [pc, #200]	; 13948 <error@@Base+0xeec>
   1387c:	add	r1, pc, r1
   13880:	vmul.f64	d16, d16, d8
   13884:	vdiv.f64	d16, d16, d17
   13888:	vmov	r2, r3, d16
   1388c:	bl	10c68 <fprintf@plt>
   13890:	mov	r0, r7
   13894:	mov	r1, #3
   13898:	mov	r2, #1
   1389c:	mov	r3, r5
   138a0:	bl	10bd8 <fwrite@plt>
   138a4:	ldr	r0, [r4]
   138a8:	mov	r1, r6
   138ac:	ldr	r0, [r0, r8, lsl #2]
   138b0:	ldr	r2, [r0, #8]
   138b4:	mov	r0, r5
   138b8:	bl	10c68 <fprintf@plt>
   138bc:	ldr	r0, [r4, #4]
   138c0:	add	r8, r8, #1
   138c4:	cmp	r8, r0
   138c8:	bge	13910 <error@@Base+0xeb4>
   138cc:	ldr	r0, [r4]
   138d0:	mov	r1, r9
   138d4:	ldr	sl, [r0, r8, lsl #2]
   138d8:	mov	r0, r5
   138dc:	ldr	r2, [sl, #12]
   138e0:	ldr	r3, [sl, #16]
   138e4:	bl	10c68 <fprintf@plt>
   138e8:	ldr	r0, [sl, #12]
   138ec:	cmp	r0, #0
   138f0:	bne	1385c <error@@Base+0xe00>
   138f4:	ldr	r0, [pc, #72]	; 13944 <error@@Base+0xee8>
   138f8:	mov	r1, #8
   138fc:	mov	r2, #1
   13900:	mov	r3, r5
   13904:	add	r0, pc, r0
   13908:	bl	10bd8 <fwrite@plt>
   1390c:	b	13890 <error@@Base+0xe34>
   13910:	vpop	{d8}
   13914:	add	sp, sp, #4
   13918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1391c:	nop	{0}
   13920:	andeq	r0, r0, r0
   13924:	subsmi	r0, r9, r0
   13928:	andeq	r0, r0, r0, ror r1
   1392c:	andeq	r1, r0, r4, lsl #12
   13930:	andeq	r1, r0, ip, lsl r6
   13934:	andeq	r1, r0, pc, lsl r6
   13938:	andeq	r1, r0, r5, asr #11
   1393c:	andeq	r1, r0, r7, ror #11
   13940:	muleq	r0, r9, r5
   13944:	ldrdeq	r1, [r0], -r9
   13948:	andeq	r1, r0, sl, ror #10
   1394c:	ldr	r1, [r1, #8]
   13950:	ldr	r0, [r0, #8]
   13954:	b	125b0 <__assert_fail@plt+0x18c4>
   13958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1395c:	add	fp, sp, #28
   13960:	sub	sp, sp, #28
   13964:	ldr	r8, [r1]
   13968:	str	r0, [sp, #4]
   1396c:	cmp	r8, #0
   13970:	str	r8, [sp, #16]
   13974:	beq	140c4 <error@@Base+0x1668>
   13978:	ldr	sl, [pc, #1964]	; 1412c <error@@Base+0x16d0>
   1397c:	add	r9, sp, #12
   13980:	add	sl, pc, sl
   13984:	mov	r0, #17
   13988:	mov	r1, r8
   1398c:	mov	r7, r9
   13990:	mov	ip, r0
   13994:	mov	lr, #18
   13998:	cmp	r7, #0
   1399c:	beq	13b08 <error@@Base+0x10ac>
   139a0:	mov	r7, r1
   139a4:	ldr	r0, [r7, #12]
   139a8:	mov	r2, #0
   139ac:	movw	r1, #1092	; 0x444
   139b0:	sub	r3, r1, r2
   139b4:	add	r3, r2, r3, lsr #1
   139b8:	add	r4, r3, r3, lsl #1
   139bc:	ldr	r5, [sl, r4, lsl #2]
   139c0:	cmp	r5, r0
   139c4:	bls	139d8 <error@@Base+0xf7c>
   139c8:	sub	r1, r3, #1
   139cc:	cmp	r1, r2
   139d0:	bcs	139b0 <error@@Base+0xf54>
   139d4:	b	13a24 <error@@Base+0xfc8>
   139d8:	add	r2, sl, r4, lsl #2
   139dc:	ldr	r4, [r2, #4]
   139e0:	cmp	r4, r0
   139e4:	bcs	139f8 <error@@Base+0xf9c>
   139e8:	add	r2, r3, #1
   139ec:	cmp	r1, r2
   139f0:	bcs	139b0 <error@@Base+0xf54>
   139f4:	b	13a24 <error@@Base+0xfc8>
   139f8:	ldr	r1, [r2, #8]
   139fc:	orr	r1, r1, #2
   13a00:	cmp	r1, #6
   13a04:	bne	13a24 <error@@Base+0xfc8>
   13a08:	ldr	r7, [r7, #4]
   13a0c:	cmp	r7, #0
   13a10:	bne	139a4 <error@@Base+0xf48>
   13a14:	mov	r2, #18
   13a18:	mov	r9, #18
   13a1c:	mov	r7, #0
   13a20:	b	13b14 <error@@Base+0x10b8>
   13a24:	cmp	r7, #0
   13a28:	beq	13b08 <error@@Base+0x10ac>
   13a2c:	mov	r2, #0
   13a30:	movw	r1, #1092	; 0x444
   13a34:	sub	r3, r1, r2
   13a38:	add	r3, r2, r3, lsr #1
   13a3c:	add	r4, r3, r3, lsl #1
   13a40:	ldr	r5, [sl, r4, lsl #2]
   13a44:	cmp	r5, r0
   13a48:	bls	13a5c <error@@Base+0x1000>
   13a4c:	sub	r1, r3, #1
   13a50:	cmp	r1, r2
   13a54:	bcs	13a34 <error@@Base+0xfd8>
   13a58:	b	13a78 <error@@Base+0x101c>
   13a5c:	add	r2, sl, r4, lsl #2
   13a60:	ldr	r4, [r2, #4]
   13a64:	cmp	r4, r0
   13a68:	bcs	13e40 <error@@Base+0x13e4>
   13a6c:	add	r2, r3, #1
   13a70:	cmp	r1, r2
   13a74:	bcs	13a34 <error@@Base+0xfd8>
   13a78:	mov	r9, #0
   13a7c:	ldr	r6, [r7, #4]
   13a80:	cmp	r6, #0
   13a84:	beq	13c8c <error@@Base+0x1230>
   13a88:	mov	r2, r6
   13a8c:	str	r7, [sp, #8]
   13a90:	ldr	r0, [r2, #12]
   13a94:	mov	r4, #0
   13a98:	movw	r3, #1092	; 0x444
   13a9c:	sub	r7, r3, r4
   13aa0:	add	r7, r4, r7, lsr #1
   13aa4:	add	r5, r7, r7, lsl #1
   13aa8:	ldr	r1, [sl, r5, lsl #2]
   13aac:	cmp	r1, r0
   13ab0:	bls	13ac4 <error@@Base+0x1068>
   13ab4:	sub	r3, r7, #1
   13ab8:	cmp	r3, r4
   13abc:	bcs	13a9c <error@@Base+0x1040>
   13ac0:	b	13b9c <error@@Base+0x1140>
   13ac4:	add	r5, sl, r5, lsl #2
   13ac8:	ldr	r1, [r5, #4]
   13acc:	cmp	r1, r0
   13ad0:	bcs	13ae4 <error@@Base+0x1088>
   13ad4:	add	r4, r7, #1
   13ad8:	cmp	r3, r4
   13adc:	bcs	13a9c <error@@Base+0x1040>
   13ae0:	b	13b9c <error@@Base+0x1140>
   13ae4:	ldr	r1, [r5, #8]
   13ae8:	orr	r1, r1, #2
   13aec:	cmp	r1, #6
   13af0:	bne	13b9c <error@@Base+0x1140>
   13af4:	ldr	r2, [r2, #4]
   13af8:	cmp	r2, #0
   13afc:	bne	13a90 <error@@Base+0x1034>
   13b00:	mov	r2, #18
   13b04:	b	13ca0 <error@@Base+0x1244>
   13b08:	mov	r7, #0
   13b0c:	mov	r2, #18
   13b10:	mov	r9, #18
   13b14:	sub	r0, r2, #1
   13b18:	cmp	r0, #3
   13b1c:	subcs	r0, r9, #1
   13b20:	cmpcs	r0, #3
   13b24:	bcc	13f14 <error@@Base+0x14b8>
   13b28:	orr	r4, r2, #1
   13b2c:	orr	r6, r9, #1
   13b30:	cmp	r4, #9
   13b34:	cmpeq	r6, #9
   13b38:	beq	13b94 <error@@Base+0x1138>
   13b3c:	cmp	r6, #9
   13b40:	bne	13b68 <error@@Base+0x110c>
   13b44:	cmp	r2, #13
   13b48:	bhi	13b68 <error@@Base+0x110c>
   13b4c:	mov	r0, #1
   13b50:	mov	r1, #13312	; 0x3400
   13b54:	tst	r1, r0, lsl r2
   13b58:	beq	13b68 <error@@Base+0x110c>
   13b5c:	orr	r0, lr, #1
   13b60:	cmp	r0, #9
   13b64:	beq	13b94 <error@@Base+0x1138>
   13b68:	orr	r0, ip, #1
   13b6c:	cmp	r0, #9
   13b70:	bne	13bf8 <error@@Base+0x119c>
   13b74:	cmp	r9, #13
   13b78:	bhi	13bf8 <error@@Base+0x119c>
   13b7c:	mov	r0, #1
   13b80:	mov	r1, #13312	; 0x3400
   13b84:	tst	r1, r0, lsl r9
   13b88:	beq	13bf8 <error@@Base+0x119c>
   13b8c:	cmp	r4, #9
   13b90:	bne	13bf8 <error@@Base+0x119c>
   13b94:	mov	r0, r9
   13b98:	b	13e14 <error@@Base+0x13b8>
   13b9c:	cmp	r2, #0
   13ba0:	beq	13c9c <error@@Base+0x1240>
   13ba4:	mov	r3, #0
   13ba8:	movw	r2, #1092	; 0x444
   13bac:	sub	r1, r2, r3
   13bb0:	add	r7, r3, r1, lsr #1
   13bb4:	add	r5, r7, r7, lsl #1
   13bb8:	ldr	r1, [sl, r5, lsl #2]
   13bbc:	cmp	r1, r0
   13bc0:	bls	13bd4 <error@@Base+0x1178>
   13bc4:	sub	r2, r7, #1
   13bc8:	cmp	r2, r3
   13bcc:	bcs	13bac <error@@Base+0x1150>
   13bd0:	b	13c94 <error@@Base+0x1238>
   13bd4:	add	r3, sl, r5, lsl #2
   13bd8:	ldr	r1, [r3, #4]
   13bdc:	cmp	r1, r0
   13be0:	bcs	13e48 <error@@Base+0x13ec>
   13be4:	add	r3, r7, #1
   13be8:	cmp	r2, r3
   13bec:	bcs	13bac <error@@Base+0x1150>
   13bf0:	mov	r2, #0
   13bf4:	b	13ca0 <error@@Base+0x1244>
   13bf8:	cmp	r2, #10
   13bfc:	mov	r0, #8
   13c00:	cmpeq	r9, #8
   13c04:	beq	13e14 <error@@Base+0x13b8>
   13c08:	cmp	lr, #8
   13c0c:	cmpeq	r2, #11
   13c10:	beq	13e24 <error@@Base+0x13c8>
   13c14:	cmp	r2, #8
   13c18:	cmpeq	ip, #8
   13c1c:	beq	13e30 <error@@Base+0x13d4>
   13c20:	cmp	r2, #15
   13c24:	mov	r0, #15
   13c28:	cmpeq	r9, #15
   13c2c:	beq	13e14 <error@@Base+0x13b8>
   13c30:	cmp	r2, #15
   13c34:	cmpeq	r6, #9
   13c38:	beq	13b94 <error@@Base+0x1138>
   13c3c:	cmp	r9, #15
   13c40:	cmpeq	r4, #9
   13c44:	beq	13e14 <error@@Base+0x13b8>
   13c48:	cmp	ip, #15
   13c4c:	cmpeq	r2, #15
   13c50:	beq	13ec8 <error@@Base+0x146c>
   13c54:	cmp	r9, #15
   13c58:	bne	13e50 <error@@Base+0x13f4>
   13c5c:	cmp	lr, #15
   13c60:	bne	13e60 <error@@Base+0x1404>
   13c64:	orr	r3, r2, #2
   13c68:	sub	r1, r2, #10
   13c6c:	sub	r3, r3, #14
   13c70:	clz	r1, r1
   13c74:	clz	r3, r3
   13c78:	lsr	r1, r1, #5
   13c7c:	lsr	r3, r3, #5
   13c80:	orrs	r1, r1, r3
   13c84:	bne	13e14 <error@@Base+0x13b8>
   13c88:	b	13e60 <error@@Base+0x1404>
   13c8c:	mov	r2, #18
   13c90:	b	13b14 <error@@Base+0x10b8>
   13c94:	mov	r2, #0
   13c98:	b	13ca0 <error@@Base+0x1244>
   13c9c:	mov	r2, #18
   13ca0:	ldr	r0, [r6, #12]
   13ca4:	mov	r4, #0
   13ca8:	movw	r3, #1092	; 0x444
   13cac:	sub	r1, r3, r4
   13cb0:	add	r7, r4, r1, lsr #1
   13cb4:	add	r5, r7, r7, lsl #1
   13cb8:	ldr	r1, [sl, r5, lsl #2]
   13cbc:	cmp	r1, r0
   13cc0:	bls	13cd4 <error@@Base+0x1278>
   13cc4:	sub	r3, r7, #1
   13cc8:	cmp	r3, r4
   13ccc:	bcs	13cac <error@@Base+0x1250>
   13cd0:	b	13d20 <error@@Base+0x12c4>
   13cd4:	add	r5, sl, r5, lsl #2
   13cd8:	ldr	r1, [r5, #4]
   13cdc:	cmp	r1, r0
   13ce0:	bcs	13cf4 <error@@Base+0x1298>
   13ce4:	add	r4, r7, #1
   13ce8:	cmp	r3, r4
   13cec:	bcs	13cac <error@@Base+0x1250>
   13cf0:	b	13d20 <error@@Base+0x12c4>
   13cf4:	ldr	r0, [r5, #8]
   13cf8:	orr	r0, r0, #2
   13cfc:	cmp	r0, #6
   13d00:	bne	13d20 <error@@Base+0x12c4>
   13d04:	ldr	r6, [r6, #4]
   13d08:	cmp	r6, #0
   13d0c:	bne	13ca0 <error@@Base+0x1244>
   13d10:	mov	lr, #18
   13d14:	cmp	r9, #1
   13d18:	beq	13e04 <error@@Base+0x13a8>
   13d1c:	b	13efc <error@@Base+0x14a0>
   13d20:	mov	lr, #18
   13d24:	cmp	r6, #0
   13d28:	beq	13dfc <error@@Base+0x13a0>
   13d2c:	ldr	r6, [r6, #4]
   13d30:	cmp	r6, #0
   13d34:	beq	13dfc <error@@Base+0x13a0>
   13d38:	ldr	r0, [r6, #12]
   13d3c:	mov	r3, #0
   13d40:	movw	r4, #1092	; 0x444
   13d44:	sub	r1, r4, r3
   13d48:	add	r7, r3, r1, lsr #1
   13d4c:	add	r5, r7, r7, lsl #1
   13d50:	ldr	r1, [sl, r5, lsl #2]
   13d54:	cmp	r1, r0
   13d58:	bls	13d6c <error@@Base+0x1310>
   13d5c:	sub	r4, r7, #1
   13d60:	cmp	r4, r3
   13d64:	bcs	13d44 <error@@Base+0x12e8>
   13d68:	b	13d9c <error@@Base+0x1340>
   13d6c:	add	r3, sl, r5, lsl #2
   13d70:	ldr	r1, [r3, #4]
   13d74:	cmp	r1, r0
   13d78:	bcs	13d8c <error@@Base+0x1330>
   13d7c:	add	r3, r7, #1
   13d80:	cmp	r4, r3
   13d84:	bcs	13d44 <error@@Base+0x12e8>
   13d88:	b	13d9c <error@@Base+0x1340>
   13d8c:	ldr	r1, [r3, #8]
   13d90:	orr	r1, r1, #2
   13d94:	cmp	r1, #6
   13d98:	beq	13d2c <error@@Base+0x12d0>
   13d9c:	cmp	r6, #0
   13da0:	beq	13dfc <error@@Base+0x13a0>
   13da4:	mov	r4, #0
   13da8:	movw	r6, #1092	; 0x444
   13dac:	sub	r1, r6, r4
   13db0:	add	r3, r4, r1, lsr #1
   13db4:	add	r7, r3, r3, lsl #1
   13db8:	ldr	r1, [sl, r7, lsl #2]
   13dbc:	cmp	r1, r0
   13dc0:	bls	13dd4 <error@@Base+0x1378>
   13dc4:	sub	r6, r3, #1
   13dc8:	cmp	r6, r4
   13dcc:	bcs	13dac <error@@Base+0x1350>
   13dd0:	b	13df8 <error@@Base+0x139c>
   13dd4:	add	r7, sl, r7, lsl #2
   13dd8:	ldr	r1, [r7, #4]
   13ddc:	cmp	r1, r0
   13de0:	bcs	13ef0 <error@@Base+0x1494>
   13de4:	add	r4, r3, #1
   13de8:	mov	lr, #0
   13dec:	cmp	r6, r4
   13df0:	bcs	13dac <error@@Base+0x1350>
   13df4:	b	13dfc <error@@Base+0x13a0>
   13df8:	mov	lr, #0
   13dfc:	cmp	r9, #1
   13e00:	bne	13efc <error@@Base+0x14a0>
   13e04:	ldr	r7, [sp, #8]
   13e08:	mov	r0, #1
   13e0c:	cmp	r2, #2
   13e10:	bne	13b14 <error@@Base+0x10b8>
   13e14:	ldr	r1, [r7, #4]
   13e18:	cmp	r1, #0
   13e1c:	bne	13990 <error@@Base+0xf34>
   13e20:	b	13f14 <error@@Base+0x14b8>
   13e24:	cmp	r9, #8
   13e28:	beq	13e14 <error@@Base+0x13b8>
   13e2c:	b	13c14 <error@@Base+0x11b8>
   13e30:	mov	r0, #11
   13e34:	cmp	r9, #11
   13e38:	beq	13e14 <error@@Base+0x13b8>
   13e3c:	b	13c20 <error@@Base+0x11c4>
   13e40:	ldr	r9, [r2, #8]
   13e44:	b	13a7c <error@@Base+0x1020>
   13e48:	ldr	r2, [r3, #8]
   13e4c:	b	13ca0 <error@@Base+0x1244>
   13e50:	cmp	r2, #7
   13e54:	moveq	r0, #7
   13e58:	cmpeq	r9, #7
   13e5c:	beq	13e14 <error@@Base+0x13b8>
   13e60:	cmp	r2, #16
   13e64:	bne	13e9c <error@@Base+0x1440>
   13e68:	orr	r1, r9, #8
   13e6c:	sub	r0, r6, #9
   13e70:	sub	r1, r1, #15
   13e74:	clz	r0, r0
   13e78:	clz	r1, r1
   13e7c:	lsr	r0, r0, #5
   13e80:	lsr	r1, r1, #5
   13e84:	orr	r0, r1, r0
   13e88:	sub	r1, r9, #16
   13e8c:	clz	r1, r1
   13e90:	lsr	r1, r1, #5
   13e94:	orrs	r0, r1, r0
   13e98:	bne	13b94 <error@@Base+0x1138>
   13e9c:	cmp	r9, #16
   13ea0:	bne	13f04 <error@@Base+0x14a8>
   13ea4:	cmp	r2, #16
   13ea8:	bhi	13f14 <error@@Base+0x14b8>
   13eac:	movw	r3, #33664	; 0x8380
   13eb0:	mov	r1, #1
   13eb4:	mov	r0, #16
   13eb8:	movt	r3, #1
   13ebc:	tst	r3, r1, lsl r2
   13ec0:	bne	13e14 <error@@Base+0x13b8>
   13ec4:	b	13f14 <error@@Base+0x14b8>
   13ec8:	orr	r3, r9, #2
   13ecc:	sub	r1, r9, #10
   13ed0:	sub	r3, r3, #14
   13ed4:	clz	r1, r1
   13ed8:	clz	r3, r3
   13edc:	lsr	r1, r1, #5
   13ee0:	lsr	r3, r3, #5
   13ee4:	orrs	r1, r1, r3
   13ee8:	bne	13b94 <error@@Base+0x1138>
   13eec:	b	13c54 <error@@Base+0x11f8>
   13ef0:	ldr	lr, [r7, #8]
   13ef4:	cmp	r9, #1
   13ef8:	beq	13e04 <error@@Base+0x13a8>
   13efc:	ldr	r7, [sp, #8]
   13f00:	b	13b14 <error@@Base+0x10b8>
   13f04:	cmp	r2, #5
   13f08:	moveq	r0, #5
   13f0c:	cmpeq	r9, #5
   13f10:	beq	13e14 <error@@Base+0x13b8>
   13f14:	cmp	r7, #0
   13f18:	add	r9, sp, #12
   13f1c:	beq	140c4 <error@@Base+0x1668>
   13f20:	ldr	r1, [r7, #4]
   13f24:	cmp	r1, #0
   13f28:	beq	13fb8 <error@@Base+0x155c>
   13f2c:	mov	r0, r1
   13f30:	ldr	r1, [r1, #12]
   13f34:	mov	r4, r7
   13f38:	mov	r3, #0
   13f3c:	movw	r2, #1092	; 0x444
   13f40:	sub	r7, r2, r3
   13f44:	add	r7, r3, r7, lsr #1
   13f48:	add	r6, r7, r7, lsl #1
   13f4c:	ldr	r5, [sl, r6, lsl #2]
   13f50:	cmp	r5, r1
   13f54:	bls	13f68 <error@@Base+0x150c>
   13f58:	sub	r2, r7, #1
   13f5c:	cmp	r2, r3
   13f60:	bcs	13f40 <error@@Base+0x14e4>
   13f64:	b	13fac <error@@Base+0x1550>
   13f68:	add	r3, sl, r6, lsl #2
   13f6c:	ldr	r6, [r3, #4]
   13f70:	cmp	r6, r1
   13f74:	bcs	13f88 <error@@Base+0x152c>
   13f78:	add	r3, r7, #1
   13f7c:	cmp	r2, r3
   13f80:	bcs	13f40 <error@@Base+0x14e4>
   13f84:	b	13fac <error@@Base+0x1550>
   13f88:	ldr	r1, [r3, #8]
   13f8c:	orr	r1, r1, #2
   13f90:	cmp	r1, #6
   13f94:	bne	13fac <error@@Base+0x1550>
   13f98:	ldr	r1, [r0, #4]
   13f9c:	mov	r7, r0
   13fa0:	cmp	r1, #0
   13fa4:	bne	13f2c <error@@Base+0x14d0>
   13fa8:	b	13fbc <error@@Base+0x1560>
   13fac:	cmp	r4, #0
   13fb0:	bne	13fc0 <error@@Base+0x1564>
   13fb4:	b	140c4 <error@@Base+0x1668>
   13fb8:	mov	r0, r7
   13fbc:	mov	r4, r0
   13fc0:	ldr	r0, [r8, #12]
   13fc4:	bl	10b78 <utf8proc_get_property@plt>
   13fc8:	ldrsh	r0, [r0]
   13fcc:	sub	r1, r0, #1
   13fd0:	cmp	r1, #12
   13fd4:	bcs	140b8 <error@@Base+0x165c>
   13fd8:	mov	r5, r4
   13fdc:	ldr	r4, [r4, #4]
   13fe0:	cmp	r4, r8
   13fe4:	beq	14054 <error@@Base+0x15f8>
   13fe8:	mov	r6, #0
   13fec:	mov	r7, r8
   13ff0:	cmp	r7, #0
   13ff4:	beq	140cc <error@@Base+0x1670>
   13ff8:	ldr	r0, [r7, #12]
   13ffc:	mov	r1, r9
   14000:	bl	10b90 <utf8proc_encode_char@plt>
   14004:	cmp	r0, #0
   14008:	beq	140ec <error@@Base+0x1690>
   1400c:	ldr	r7, [r7, #4]
   14010:	add	r6, r0, r6
   14014:	cmp	r7, r4
   14018:	bne	13ff0 <error@@Base+0x1594>
   1401c:	add	r0, r6, #1
   14020:	bl	10bfc <malloc@plt>
   14024:	mov	r6, r0
   14028:	mov	r9, #0
   1402c:	cmp	r8, #0
   14030:	beq	1410c <error@@Base+0x16b0>
   14034:	ldr	r0, [r8, #12]
   14038:	add	r1, r6, r9
   1403c:	bl	10b90 <utf8proc_encode_char@plt>
   14040:	ldr	r8, [r8, #4]
   14044:	add	r9, r0, r9
   14048:	cmp	r8, r4
   1404c:	bne	1402c <error@@Base+0x15d0>
   14050:	b	14064 <error@@Base+0x1608>
   14054:	mov	r0, #1
   14058:	bl	10bfc <malloc@plt>
   1405c:	mov	r6, r0
   14060:	mov	r9, #0
   14064:	mov	r0, #0
   14068:	mov	r1, #12
   1406c:	strb	r0, [r6, r9]
   14070:	mov	r0, #1
   14074:	bl	1258c <__assert_fail@plt+0x18a0>
   14078:	mov	r7, r0
   1407c:	mov	r0, r6
   14080:	bl	10c8c <utf8proc_NFC@plt>
   14084:	str	r0, [r7, #8]
   14088:	ldr	r0, [sp, #4]
   1408c:	mov	r1, r7
   14090:	bl	11ea0 <__assert_fail@plt+0x11b4>
   14094:	mov	r0, r6
   14098:	bl	10b6c <free@plt>
   1409c:	add	r9, sp, #12
   140a0:	mov	r4, r5
   140a4:	ldr	r8, [r4, #4]
   140a8:	cmp	r8, #0
   140ac:	str	r8, [sp, #16]
   140b0:	bne	13984 <error@@Base+0xf28>
   140b4:	b	140c4 <error@@Base+0x1668>
   140b8:	cmp	r0, #29
   140bc:	beq	13fd8 <error@@Base+0x157c>
   140c0:	b	140a4 <error@@Base+0x1648>
   140c4:	sub	sp, fp, #28
   140c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140cc:	ldr	r0, [pc, #92]	; 14130 <error@@Base+0x16d4>
   140d0:	ldr	r1, [pc, #92]	; 14134 <error@@Base+0x16d8>
   140d4:	ldr	r3, [pc, #92]	; 14138 <error@@Base+0x16dc>
   140d8:	mov	r2, #249	; 0xf9
   140dc:	add	r0, pc, r0
   140e0:	add	r1, pc, r1
   140e4:	add	r3, pc, r3
   140e8:	bl	10cec <__assert_fail@plt>
   140ec:	ldr	r0, [pc, #72]	; 1413c <error@@Base+0x16e0>
   140f0:	ldr	r1, [pc, #72]	; 14140 <error@@Base+0x16e4>
   140f4:	ldr	r3, [pc, #72]	; 14144 <error@@Base+0x16e8>
   140f8:	mov	r2, #253	; 0xfd
   140fc:	add	r0, pc, r0
   14100:	add	r1, pc, r1
   14104:	add	r3, pc, r3
   14108:	bl	10cec <__assert_fail@plt>
   1410c:	ldr	r0, [pc, #52]	; 14148 <error@@Base+0x16ec>
   14110:	ldr	r1, [pc, #52]	; 1414c <error@@Base+0x16f0>
   14114:	ldr	r3, [pc, #52]	; 14150 <error@@Base+0x16f4>
   14118:	movw	r2, #269	; 0x10d
   1411c:	add	r0, pc, r0
   14120:	add	r1, pc, r1
   14124:	add	r3, pc, r3
   14128:	bl	10cec <__assert_fail@plt>
   1412c:			; <UNDEFINED> instruction: 0x000014bc
   14130:	andeq	r4, r0, r3, lsr #1
   14134:	muleq	r0, r8, r0
   14138:	andeq	r4, r0, fp, lsr #1
   1413c:	andeq	r4, r0, sp, lsr #1
   14140:	andeq	r4, r0, r8, ror r0
   14144:	andeq	r4, r0, fp, lsl #1
   14148:	andeq	r4, r0, r3, rrx
   1414c:	andeq	r4, r0, r8, asr r0
   14150:	muleq	r0, r8, r0
   14154:	push	{r4, sl, fp, lr}
   14158:	add	fp, sp, #8
   1415c:	mov	r4, r0
   14160:	ldr	r0, [r0, #8]
   14164:	bl	10b6c <free@plt>
   14168:	mov	r0, r4
   1416c:	pop	{r4, sl, fp, lr}
   14170:	b	10b6c <free@plt>
   14174:	push	{r4, r5, r6, sl, fp, lr}
   14178:	add	fp, sp, #16
   1417c:	mov	r5, r1
   14180:	mov	r6, r0
   14184:	mov	r0, #1
   14188:	mov	r1, #16
   1418c:	mov	r4, r2
   14190:	bl	1258c <__assert_fail@plt+0x18a0>
   14194:	str	r4, [r0, #12]
   14198:	mov	r1, r0
   1419c:	strb	r5, [r0, #8]
   141a0:	mov	r0, r6
   141a4:	pop	{r4, r5, r6, sl, fp, lr}
   141a8:	b	11ea0 <__assert_fail@plt+0x11b4>
   141ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b0:	add	fp, sp, #28
   141b4:	sub	sp, sp, #124	; 0x7c
   141b8:	mov	r4, r2
   141bc:	mov	r2, r1
   141c0:	cmp	r1, #0
   141c4:	str	r0, [sp, #16]
   141c8:	bne	141d8 <error@@Base+0x177c>
   141cc:	ldrb	r0, [r4]
   141d0:	cmp	r0, #0
   141d4:	bne	14518 <error@@Base+0x1abc>
   141d8:	ldr	r0, [sp, #16]
   141dc:	ldr	r0, [r0, #4]
   141e0:	str	r0, [sp, #4]
   141e4:	mov	r0, r2
   141e8:	ldr	r1, [pc, #828]	; 1452c <error@@Base+0x1ad0>
   141ec:	add	r1, pc, r1
   141f0:	bl	12634 <__assert_fail@plt+0x1948>
   141f4:	mov	r6, r0
   141f8:	ldrb	r0, [r4]
   141fc:	cmp	r0, #0
   14200:	beq	14248 <error@@Base+0x17ec>
   14204:	add	r0, sp, #20
   14208:	mov	r1, #99	; 0x63
   1420c:	mov	r2, r6
   14210:	bl	10b84 <fgets@plt>
   14214:	cmp	r0, #0
   14218:	beq	14238 <error@@Base+0x17dc>
   1421c:	ldr	r1, [pc, #780]	; 14530 <error@@Base+0x1ad4>
   14220:	add	r0, sp, #20
   14224:	mov	r2, #51	; 0x33
   14228:	add	r1, pc, r1
   1422c:	bl	10c44 <bcmp@plt>
   14230:	cmp	r0, #0
   14234:	beq	144a4 <error@@Base+0x1a48>
   14238:	mov	r0, r6
   1423c:	bl	10ba8 <rewind@plt>
   14240:	mov	r5, #0
   14244:	strb	r5, [r4, #11]
   14248:	ldr	r9, [r4, #4]
   1424c:	ldrb	r8, [r4, #1]
   14250:	mov	r0, r6
   14254:	str	r4, [sp, #8]
   14258:	cmp	r9, #0
   1425c:	movweq	r9, #94	; 0x5e
   14260:	bl	10ce0 <getc@plt>
   14264:	cmn	r0, #1
   14268:	beq	14334 <error@@Base+0x18d8>
   1426c:	add	r1, sp, #20
   14270:	mov	sl, #0
   14274:	sub	r4, fp, #32
   14278:	add	r1, r1, #1
   1427c:	str	r1, [sp, #12]
   14280:	b	142bc <error@@Base+0x1860>
   14284:	mov	r0, #1
   14288:	mov	r1, #16
   1428c:	bl	1258c <__assert_fail@plt+0x18a0>
   14290:	str	r5, [r0, #12]
   14294:	mov	r1, r0
   14298:	strb	sl, [r0, #8]
   1429c:	ldr	r0, [sp, #16]
   142a0:	bl	11ea0 <__assert_fail@plt+0x11b4>
   142a4:	mov	r7, #0
   142a8:	mov	r0, r6
   142ac:	bl	10ce0 <getc@plt>
   142b0:	cmn	r0, #1
   142b4:	mov	sl, r7
   142b8:	beq	14334 <error@@Base+0x18d8>
   142bc:	ldr	r1, [pc, #628]	; 14538 <error@@Base+0x1adc>
   142c0:	ldr	r1, [pc, r1]
   142c4:	add	r1, r1, r0
   142c8:	ldrsb	r5, [r1]
   142cc:	cmp	r5, #0
   142d0:	ble	144f8 <error@@Base+0x1a9c>
   142d4:	cmp	r5, #1
   142d8:	strb	r0, [sp, #20]
   142dc:	beq	14300 <error@@Base+0x18a4>
   142e0:	ldr	r0, [sp, #12]
   142e4:	sub	r7, r5, #1
   142e8:	mov	r1, #1
   142ec:	mov	r3, r6
   142f0:	mov	r2, r7
   142f4:	bl	10be4 <fread@plt>
   142f8:	cmp	r0, r7
   142fc:	bne	1450c <error@@Base+0x1ab0>
   14300:	add	r0, sp, #20
   14304:	mov	r1, #4
   14308:	mov	r2, r4
   1430c:	bl	10bf0 <utf8proc_iterate@plt>
   14310:	cmp	r0, r5
   14314:	bne	14504 <error@@Base+0x1aa8>
   14318:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1431c:	cmp	r8, #0
   14320:	beq	14284 <error@@Base+0x1828>
   14324:	mov	r7, #1
   14328:	cmp	r5, r9
   1432c:	beq	142a8 <error@@Base+0x184c>
   14330:	b	14284 <error@@Base+0x1828>
   14334:	mov	r0, r6
   14338:	bl	126bc <__assert_fail@plt+0x19d0>
   1433c:	ldr	r8, [sp, #8]
   14340:	ldr	r9, [sp, #4]
   14344:	ldrb	r0, [r8, #9]
   14348:	cmp	r0, #0
   1434c:	beq	14460 <error@@Base+0x1a04>
   14350:	cmp	r9, #0
   14354:	ldr	r0, [sp, #16]
   14358:	addne	r0, r9, #4
   1435c:	ldr	r6, [r0]
   14360:	cmp	r6, #0
   14364:	beq	14460 <error@@Base+0x1a04>
   14368:	mov	r5, #32
   1436c:	mov	r7, r6
   14370:	b	14384 <error@@Base+0x1928>
   14374:	str	r5, [r7, #12]
   14378:	ldr	r7, [r7, #4]
   1437c:	cmp	r7, #0
   14380:	beq	143d4 <error@@Base+0x1978>
   14384:	ldr	r4, [r7, #12]
   14388:	mov	r0, r4
   1438c:	bl	10b78 <utf8proc_get_property@plt>
   14390:	cmp	r4, #10
   14394:	ble	143b0 <error@@Base+0x1954>
   14398:	sub	r1, r4, #11
   1439c:	cmp	r1, #3
   143a0:	bcc	14374 <error@@Base+0x1918>
   143a4:	cmp	r4, #160	; 0xa0
   143a8:	beq	14374 <error@@Base+0x1918>
   143ac:	b	143c0 <error@@Base+0x1964>
   143b0:	cmp	r4, #9
   143b4:	beq	14374 <error@@Base+0x1918>
   143b8:	cmp	r4, #10
   143bc:	beq	14378 <error@@Base+0x191c>
   143c0:	ldrsh	r0, [r0]
   143c4:	sub	r0, r0, #23
   143c8:	cmp	r0, #2
   143cc:	strls	r5, [r7, #12]
   143d0:	b	14378 <error@@Base+0x191c>
   143d4:	mov	r4, #0
   143d8:	b	14408 <error@@Base+0x19ac>
   143dc:	tst	r4, #255	; 0xff
   143e0:	cmpne	r5, #0
   143e4:	bne	14434 <error@@Base+0x19d8>
   143e8:	ldr	r0, [sp, #16]
   143ec:	mov	r1, r6
   143f0:	bl	11f98 <__assert_fail@plt+0x12ac>
   143f4:	mov	r0, r6
   143f8:	bl	10b6c <free@plt>
   143fc:	cmp	r5, #0
   14400:	mov	r6, r5
   14404:	beq	14460 <error@@Base+0x1a04>
   14408:	ldr	r1, [r6, #12]
   1440c:	ldr	r5, [r6, #4]
   14410:	cmp	r1, #32
   14414:	beq	143dc <error@@Base+0x1980>
   14418:	subs	r0, r1, #10
   1441c:	movwne	r0, #1
   14420:	tst	r4, #255	; 0xff
   14424:	cmpeq	r1, #10
   14428:	beq	143e8 <error@@Base+0x198c>
   1442c:	mov	r4, r0
   14430:	b	143fc <error@@Base+0x19a0>
   14434:	ldr	r1, [r5, #12]
   14438:	cmp	r1, #10
   1443c:	beq	143e8 <error@@Base+0x198c>
   14440:	mov	r0, #1
   14444:	cmp	r1, #32
   14448:	bne	1442c <error@@Base+0x19d0>
   1444c:	ldrb	r0, [r6, #8]
   14450:	ldrb	r1, [r5, #8]
   14454:	orr	r0, r1, r0
   14458:	strb	r0, [r5, #8]
   1445c:	b	143e8 <error@@Base+0x198c>
   14460:	ldrb	r0, [r8, #10]
   14464:	cmp	r0, #0
   14468:	beq	1449c <error@@Base+0x1a40>
   1446c:	cmp	r9, #0
   14470:	ldr	r0, [sp, #16]
   14474:	addne	r0, r9, #4
   14478:	ldr	r4, [r0]
   1447c:	cmp	r4, #0
   14480:	beq	1449c <error@@Base+0x1a40>
   14484:	ldr	r0, [r4, #12]
   14488:	bl	10bc0 <utf8proc_tolower@plt>
   1448c:	str	r0, [r4, #12]
   14490:	ldr	r4, [r4, #4]
   14494:	cmp	r4, #0
   14498:	bne	14484 <error@@Base+0x1a28>
   1449c:	sub	sp, fp, #28
   144a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	ldr	r8, [pc, #136]	; 14534 <error@@Base+0x1ad8>
   144a8:	mov	r7, #0
   144ac:	add	r9, sp, #20
   144b0:	mov	r5, #1
   144b4:	add	r8, pc, r8
   144b8:	mov	r0, r9
   144bc:	mov	r1, #99	; 0x63
   144c0:	mov	r2, r6
   144c4:	bl	10b84 <fgets@plt>
   144c8:	cmp	r0, #0
   144cc:	beq	14244 <error@@Base+0x17e8>
   144d0:	mov	r0, r9
   144d4:	mov	r1, r8
   144d8:	mov	r2, #56	; 0x38
   144dc:	bl	10c44 <bcmp@plt>
   144e0:	cmp	r0, #0
   144e4:	addeq	r7, r7, #1
   144e8:	uxth	r0, r7
   144ec:	cmp	r0, #2
   144f0:	bcc	144b8 <error@@Base+0x1a5c>
   144f4:	b	14244 <error@@Base+0x17e8>
   144f8:	ldr	r0, [pc, #68]	; 14544 <error@@Base+0x1ae8>
   144fc:	add	r0, pc, r0
   14500:	bl	12a5c <error@@Base>
   14504:	bl	10cb0 <utf8proc_errmsg@plt>
   14508:	bl	12a5c <error@@Base>
   1450c:	ldr	r0, [pc, #52]	; 14548 <error@@Base+0x1aec>
   14510:	add	r0, pc, r0
   14514:	bl	12a5c <error@@Base>
   14518:	ldr	r0, [pc, #28]	; 1453c <error@@Base+0x1ae0>
   1451c:	ldr	r1, [pc, #28]	; 14540 <error@@Base+0x1ae4>
   14520:	add	r0, pc, r0
   14524:	add	r1, pc, r1
   14528:	bl	12aac <error@@Base+0x50>
   1452c:	ldrdeq	r0, [r0], -r8
   14530:	strdeq	r3, [r0], -r0
   14534:	muleq	r0, ip, sp
   14538:	andeq	r4, r1, ip, lsl lr
   1453c:			; <UNDEFINED> instruction: 0x00003cb4
   14540:	andeq	r3, r0, r0, asr #25
   14544:	andeq	r3, r0, ip, lsl #27
   14548:	muleq	r0, r0, sp
   1454c:	push	{fp, lr}
   14550:	mov	fp, sp
   14554:	bl	10b90 <utf8proc_encode_char@plt>
   14558:	cmp	r0, #0
   1455c:	sxtbgt	r0, r0
   14560:	popgt	{fp, pc}
   14564:	ldr	r0, [pc, #4]	; 14570 <error@@Base+0x1b14>
   14568:	add	r0, pc, r0
   1456c:	bl	12a5c <error@@Base>
   14570:	andeq	r3, r0, r6, lsl #25
   14574:	push	{r4, r5, r6, r7, fp, lr}
   14578:	add	fp, sp, #16
   1457c:	mov	r6, r3
   14580:	mov	r4, r2
   14584:	mov	r5, r1
   14588:	tst	r0, #255	; 0xff
   1458c:	beq	145d4 <error@@Base+0x1b78>
   14590:	mov	r0, #94	; 0x5e
   14594:	mov	r1, r4
   14598:	bl	10b90 <utf8proc_encode_char@plt>
   1459c:	cmp	r0, #0
   145a0:	ble	1464c <error@@Base+0x1bf0>
   145a4:	sxtb	r7, r0
   145a8:	cmp	r5, #10
   145ac:	bne	145e0 <error@@Base+0x1b84>
   145b0:	ldr	r0, [pc, #224]	; 14698 <error@@Base+0x1c3c>
   145b4:	ldr	r1, [pc, #224]	; 1469c <error@@Base+0x1c40>
   145b8:	tst	r6, #255	; 0xff
   145bc:	add	r0, pc, r0
   145c0:	add	r1, pc, r1
   145c4:	moveq	r1, r0
   145c8:	add	r0, r4, r7
   145cc:	pop	{r4, r5, r6, r7, fp, lr}
   145d0:	b	10ca4 <sprintf@plt>
   145d4:	mov	r7, #0
   145d8:	cmp	r5, #10
   145dc:	beq	145b0 <error@@Base+0x1b54>
   145e0:	mov	r0, r5
   145e4:	bl	10b78 <utf8proc_get_property@plt>
   145e8:	cmp	r5, #32
   145ec:	beq	14600 <error@@Base+0x1ba4>
   145f0:	ldrsh	r0, [r0]
   145f4:	sub	r1, r0, #1
   145f8:	cmp	r1, #22
   145fc:	bcs	14658 <error@@Base+0x1bfc>
   14600:	mov	r0, r5
   14604:	bl	10c50 <utf8proc_category@plt>
   14608:	sub	r0, r0, #6
   1460c:	cmp	r0, #2
   14610:	bhi	1462c <error@@Base+0x1bd0>
   14614:	add	r1, r4, r7
   14618:	movw	r0, #9676	; 0x25cc
   1461c:	bl	10b90 <utf8proc_encode_char@plt>
   14620:	cmp	r0, #0
   14624:	ble	1464c <error@@Base+0x1bf0>
   14628:	sxtab	r7, r7, r0
   1462c:	add	r1, r4, r7
   14630:	mov	r0, r5
   14634:	bl	10b90 <utf8proc_encode_char@plt>
   14638:	cmp	r0, #0
   1463c:	sxtabgt	r0, r7, r0
   14640:	movgt	r1, #0
   14644:	strbgt	r1, [r4, r0]
   14648:	popgt	{r4, r5, r6, r7, fp, pc}
   1464c:	ldr	r0, [pc, #64]	; 14694 <error@@Base+0x1c38>
   14650:	add	r0, pc, r0
   14654:	bl	12a5c <error@@Base>
   14658:	cmp	r0, #29
   1465c:	beq	14600 <error@@Base+0x1ba4>
   14660:	add	r0, r4, r7
   14664:	cmp	r5, #255	; 0xff
   14668:	bhi	14678 <error@@Base+0x1c1c>
   1466c:	ldr	r1, [pc, #24]	; 1468c <error@@Base+0x1c30>
   14670:	add	r1, pc, r1
   14674:	b	14680 <error@@Base+0x1c24>
   14678:	ldr	r1, [pc, #16]	; 14690 <error@@Base+0x1c34>
   1467c:	add	r1, pc, r1
   14680:	mov	r2, r5
   14684:	pop	{r4, r5, r6, r7, fp, lr}
   14688:	b	10ca4 <sprintf@plt>
   1468c:	muleq	r0, sl, fp
   14690:	muleq	r0, r5, fp
   14694:	muleq	r0, lr, fp
   14698:	andeq	r0, r0, r6, lsl r7
   1469c:	andeq	r3, r0, r5, asr #24
   146a0:	push	{r4, r5, r6, r7, fp, lr}
   146a4:	add	fp, sp, #16
   146a8:	sub	sp, sp, #16
   146ac:	mov	r6, r2
   146b0:	mov	r2, r1
   146b4:	ldr	r1, [pc, #180]	; 14770 <error@@Base+0x1d14>
   146b8:	mov	r5, r0
   146bc:	mov	r0, r2
   146c0:	add	r1, pc, r1
   146c4:	bl	12634 <__assert_fail@plt+0x1948>
   146c8:	mov	r4, r0
   146cc:	cmp	r6, #0
   146d0:	beq	14724 <error@@Base+0x1cc8>
   146d4:	ldr	r0, [pc, #152]	; 14774 <error@@Base+0x1d18>
   146d8:	mov	r1, #55	; 0x37
   146dc:	mov	r2, #1
   146e0:	mov	r3, r4
   146e4:	add	r0, pc, r0
   146e8:	bl	10bd8 <fwrite@plt>
   146ec:	ldr	r7, [pc, #132]	; 14778 <error@@Base+0x1d1c>
   146f0:	mov	r1, #55	; 0x37
   146f4:	mov	r2, #1
   146f8:	mov	r3, r4
   146fc:	add	r7, pc, r7
   14700:	mov	r0, r7
   14704:	bl	10bd8 <fwrite@plt>
   14708:	mov	r0, r4
   1470c:	blx	r6
   14710:	mov	r0, r7
   14714:	mov	r1, #55	; 0x37
   14718:	mov	r2, #1
   1471c:	mov	r3, r4
   14720:	bl	10bd8 <fwrite@plt>
   14724:	ldr	r6, [r5]
   14728:	cmp	r6, #0
   1472c:	beq	14760 <error@@Base+0x1d04>
   14730:	add	r5, sp, #7
   14734:	ldr	r1, [r6, #12]
   14738:	ldrb	r0, [r6, #8]
   1473c:	mov	r2, r5
   14740:	mov	r3, #0
   14744:	bl	14574 <error@@Base+0x1b18>
   14748:	mov	r0, r5
   1474c:	mov	r1, r4
   14750:	bl	10cbc <fputs@plt>
   14754:	ldr	r6, [r6, #4]
   14758:	cmp	r6, #0
   1475c:	bne	14734 <error@@Base+0x1cd8>
   14760:	mov	r0, r4
   14764:	bl	126bc <__assert_fail@plt+0x19d0>
   14768:	sub	sp, fp, #16
   1476c:	pop	{r4, r5, r6, r7, fp, pc}
   14770:	andeq	r0, r0, fp, ror #9
   14774:	andeq	r3, r0, r4, lsr fp
   14778:	andeq	r3, r0, r4, asr fp
   1477c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14780:	add	fp, sp, #28
   14784:	sub	sp, sp, #4
   14788:	mov	r9, #0
   1478c:	mov	sl, r0
   14790:	str	r9, [sp]
   14794:	ldrb	r0, [r1]
   14798:	cmp	r0, #0
   1479c:	beq	147fc <error@@Base+0x1da0>
   147a0:	mov	r4, r1
   147a4:	mov	r8, sp
   147a8:	mov	r7, #1
   147ac:	mov	r0, r4
   147b0:	mvn	r1, #0
   147b4:	mov	r2, r8
   147b8:	bl	10bf0 <utf8proc_iterate@plt>
   147bc:	cmp	r0, #1
   147c0:	blt	14804 <error@@Base+0x1da8>
   147c4:	ldr	r5, [sp]
   147c8:	mov	r6, r0
   147cc:	mov	r0, #1
   147d0:	mov	r1, #16
   147d4:	bl	1258c <__assert_fail@plt+0x18a0>
   147d8:	str	r5, [r0, #12]
   147dc:	mov	r1, r0
   147e0:	strb	r9, [r0, #8]
   147e4:	mov	r0, sl
   147e8:	bl	11ea0 <__assert_fail@plt+0x11b4>
   147ec:	ldrb	r0, [r4, r6]!
   147f0:	cmp	r0, #0
   147f4:	bne	147ac <error@@Base+0x1d50>
   147f8:	b	14808 <error@@Base+0x1dac>
   147fc:	mov	r7, #1
   14800:	b	14808 <error@@Base+0x1dac>
   14804:	mov	r7, #0
   14808:	mov	r0, r7
   1480c:	sub	sp, fp, #28
   14810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14814:	cmp	r0, #2
   14818:	bxlt	lr
   1481c:	ldr	r3, [pc, #28]	; 14840 <error@@Base+0x1de4>
   14820:	add	r3, pc, r3
   14824:	str	r2, [r3]
   14828:	ldr	r2, [pc, #20]	; 14844 <error@@Base+0x1de8>
   1482c:	add	r2, pc, r2
   14830:	str	r1, [r2]
   14834:	sub	r1, r0, #1
   14838:	mov	r0, #0
   1483c:	b	14848 <error@@Base+0x1dec>
   14840:	andeq	r6, r1, ip, lsr #18
   14844:	andeq	r6, r1, ip, lsl r9
   14848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1484c:	add	fp, sp, #24
   14850:	mov	r8, r1
   14854:	mov	r5, r0
   14858:	b	14888 <error@@Base+0x1e2c>
   1485c:	mov	r7, r4
   14860:	ldr	r0, [pc, #308]	; 1499c <error@@Base+0x1f40>
   14864:	ldr	r0, [pc, r0]
   14868:	sub	r1, r4, #1
   1486c:	str	r6, [r0, r4, lsl #2]
   14870:	cmp	r1, r5
   14874:	movgt	r0, r5
   14878:	blgt	14848 <error@@Base+0x1dec>
   1487c:	add	r5, r7, #1
   14880:	cmp	r5, r8
   14884:	bge	1497c <error@@Base+0x1f20>
   14888:	ldr	r0, [pc, #240]	; 14980 <error@@Base+0x1f24>
   1488c:	cmp	r5, r8
   14890:	mov	r4, r8
   14894:	mov	r7, r5
   14898:	ldr	r0, [pc, r0]
   1489c:	ldr	r6, [r0, r5, lsl #2]
   148a0:	bge	14868 <error@@Base+0x1e0c>
   148a4:	mov	r7, r5
   148a8:	mov	r4, r8
   148ac:	cmp	r7, r4
   148b0:	blt	148c8 <error@@Base+0x1e6c>
   148b4:	b	148f8 <error@@Base+0x1e9c>
   148b8:	cmp	r7, r4
   148bc:	bge	14860 <error@@Base+0x1e04>
   148c0:	cmp	r7, r4
   148c4:	bge	148f8 <error@@Base+0x1e9c>
   148c8:	ldr	r0, [pc, #180]	; 14984 <error@@Base+0x1f28>
   148cc:	ldr	r0, [pc, r0]
   148d0:	ldr	r1, [r0, r4, lsl #2]
   148d4:	ldr	r2, [pc, #172]	; 14988 <error@@Base+0x1f2c>
   148d8:	mov	r0, r6
   148dc:	ldr	r2, [pc, r2]
   148e0:	blx	r2
   148e4:	cmn	r0, #1
   148e8:	bgt	148f8 <error@@Base+0x1e9c>
   148ec:	sub	r4, r4, #1
   148f0:	cmp	r7, r4
   148f4:	blt	148c8 <error@@Base+0x1e6c>
   148f8:	cmp	r7, r4
   148fc:	bne	1490c <error@@Base+0x1eb0>
   14900:	cmp	r7, r4
   14904:	blt	14928 <error@@Base+0x1ecc>
   14908:	b	1495c <error@@Base+0x1f00>
   1490c:	ldr	r0, [pc, #120]	; 1498c <error@@Base+0x1f30>
   14910:	ldr	r0, [pc, r0]
   14914:	ldr	r1, [r0, r4, lsl #2]
   14918:	str	r1, [r0, r7, lsl #2]
   1491c:	add	r7, r7, #1
   14920:	cmp	r7, r4
   14924:	bge	1495c <error@@Base+0x1f00>
   14928:	ldr	r0, [pc, #96]	; 14990 <error@@Base+0x1f34>
   1492c:	ldr	r0, [pc, r0]
   14930:	ldr	r1, [r0, r7, lsl #2]
   14934:	ldr	r2, [pc, #88]	; 14994 <error@@Base+0x1f38>
   14938:	mov	r0, r6
   1493c:	ldr	r2, [pc, r2]
   14940:	blx	r2
   14944:	cmp	r0, #1
   14948:	blt	1495c <error@@Base+0x1f00>
   1494c:	add	r7, r7, #1
   14950:	cmp	r4, r7
   14954:	bne	14928 <error@@Base+0x1ecc>
   14958:	b	1485c <error@@Base+0x1e00>
   1495c:	cmp	r7, r4
   14960:	beq	148b8 <error@@Base+0x1e5c>
   14964:	ldr	r0, [pc, #44]	; 14998 <error@@Base+0x1f3c>
   14968:	ldr	r0, [pc, r0]
   1496c:	ldr	r1, [r0, r7, lsl #2]
   14970:	str	r1, [r0, r4, lsl #2]
   14974:	sub	r4, r4, #1
   14978:	b	148b8 <error@@Base+0x1e5c>
   1497c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14980:			; <UNDEFINED> instruction: 0x000168b0
   14984:	andeq	r6, r1, ip, ror r8
   14988:	andeq	r6, r1, r0, ror r8
   1498c:	andeq	r6, r1, r8, lsr r8
   14990:	andeq	r6, r1, ip, lsl r8
   14994:	andeq	r6, r1, r0, lsl r8
   14998:	andeq	r6, r1, r0, ror #15
   1499c:	andeq	r6, r1, r4, ror #17
   149a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149a4:	mov	r7, r0
   149a8:	ldr	r6, [pc, #72]	; 149f8 <error@@Base+0x1f9c>
   149ac:	ldr	r5, [pc, #72]	; 149fc <error@@Base+0x1fa0>
   149b0:	add	r6, pc, r6
   149b4:	add	r5, pc, r5
   149b8:	sub	r6, r6, r5
   149bc:	mov	r8, r1
   149c0:	mov	r9, r2
   149c4:	bl	10b1c <calloc@plt-0x20>
   149c8:	asrs	r6, r6, #2
   149cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149d0:	mov	r4, #0
   149d4:	add	r4, r4, #1
   149d8:	ldr	r3, [r5], #4
   149dc:	mov	r2, r9
   149e0:	mov	r1, r8
   149e4:	mov	r0, r7
   149e8:	blx	r3
   149ec:	cmp	r6, r4
   149f0:	bne	149d4 <error@@Base+0x1f78>
   149f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149f8:	andeq	r4, r1, ip, lsl #7
   149fc:	andeq	r4, r1, r4, lsl #7
   14a00:	bx	lr

Disassembly of section .fini:

00014a04 <.fini>:
   14a04:	push	{r3, lr}
   14a08:	pop	{r3, pc}
