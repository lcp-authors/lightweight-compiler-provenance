
../repos/Snaipe-Mimick-1dc4659/test/mmk_test:     file format elf32-littlearm


Disassembly of section .init:

000111ec <.init>:
   111ec:	push	{r3, lr}
   111f0:	bl	11368 <_start@@Base+0x3c>
   111f4:	pop	{r3, pc}

Disassembly of section .plt:

000111f8 <strstr@plt-0x14>:
   111f8:	push	{lr}		; (str lr, [sp, #-4]!)
   111fc:	ldr	lr, [pc, #4]	; 11208 <strstr@plt-0x4>
   11200:	add	lr, pc, lr
   11204:	ldr	pc, [lr, #8]!
   11208:	strdeq	r4, [r1], -r8

0001120c <strstr@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #20, 20	; 0x14000
   11214:	ldr	pc, [ip, #3576]!	; 0xdf8

00011218 <raise@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #20, 20	; 0x14000
   11220:	ldr	pc, [ip, #3568]!	; 0xdf0

00011224 <strcmp@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #20, 20	; 0x14000
   1122c:	ldr	pc, [ip, #3560]!	; 0xde8

00011230 <mprotect@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #20, 20	; 0x14000
   11238:	ldr	pc, [ip, #3552]!	; 0xde0

0001123c <free@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #20, 20	; 0x14000
   11244:	ldr	pc, [ip, #3544]!	; 0xdd8

00011248 <memcpy@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #20, 20	; 0x14000
   11250:	ldr	pc, [ip, #3536]!	; 0xdd0

00011254 <fn_vv@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #20, 20	; 0x14000
   1125c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011260 <realloc@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #20, 20	; 0x14000
   11268:	ldr	pc, [ip, #3520]!	; 0xdc0

0001126c <fn_ii@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #20, 20	; 0x14000
   11274:	ldr	pc, [ip, #3512]!	; 0xdb8

00011278 <fn_ii_va@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #20, 20	; 0x14000
   11280:	ldr	pc, [ip, #3504]!	; 0xdb0

00011284 <malloc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #20, 20	; 0x14000
   1128c:	ldr	pc, [ip, #3496]!	; 0xda8

00011290 <__libc_start_main@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #20, 20	; 0x14000
   11298:	ldr	pc, [ip, #3488]!	; 0xda0

0001129c <__gmon_start__@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #20, 20	; 0x14000
   112a4:	ldr	pc, [ip, #3480]!	; 0xd98

000112a8 <strlen@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #20, 20	; 0x14000
   112b0:	ldr	pc, [ip, #3472]!	; 0xd90

000112b4 <mmap@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #20, 20	; 0x14000
   112bc:	ldr	pc, [ip, #3464]!	; 0xd88

000112c0 <strchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #20, 20	; 0x14000
   112c8:	ldr	pc, [ip, #3456]!	; 0xd80

000112cc <fprintf@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #20, 20	; 0x14000
   112d4:	ldr	pc, [ip, #3448]!	; 0xd78

000112d8 <__errno_location@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #20, 20	; 0x14000
   112e0:	ldr	pc, [ip, #3440]!	; 0xd70

000112e4 <snprintf@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #20, 20	; 0x14000
   112ec:	ldr	pc, [ip, #3432]!	; 0xd68

000112f0 <memset@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #20, 20	; 0x14000
   112f8:	ldr	pc, [ip, #3424]!	; 0xd60

000112fc <munmap@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #20, 20	; 0x14000
   11304:	ldr	pc, [ip, #3416]!	; 0xd58

00011308 <__tls_get_addr@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #20, 20	; 0x14000
   11310:	ldr	pc, [ip, #3408]!	; 0xd50

00011314 <strncmp@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #20, 20	; 0x14000
   1131c:	ldr	pc, [ip, #3400]!	; 0xd48

00011320 <abort@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #20, 20	; 0x14000
   11328:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

0001132c <_start@@Base>:
   1132c:	mov	fp, #0
   11330:	mov	lr, #0
   11334:	pop	{r1}		; (ldr r1, [sp], #4)
   11338:	mov	r2, sp
   1133c:	push	{r2}		; (str r2, [sp, #-4]!)
   11340:	push	{r0}		; (str r0, [sp, #-4]!)
   11344:	ldr	ip, [pc, #16]	; 1135c <_start@@Base+0x30>
   11348:	push	{ip}		; (str ip, [sp, #-4]!)
   1134c:	ldr	r0, [pc, #12]	; 11360 <_start@@Base+0x34>
   11350:	ldr	r3, [pc, #12]	; 11364 <_start@@Base+0x38>
   11354:	bl	11290 <__libc_start_main@plt>
   11358:	bl	11320 <abort@plt>
   1135c:	andeq	r5, r1, r4, lsr #1
   11360:	andeq	r2, r1, r0, ror r5
   11364:	andeq	r5, r1, r4, asr #32
   11368:	ldr	r3, [pc, #20]	; 11384 <_start@@Base+0x58>
   1136c:	ldr	r2, [pc, #20]	; 11388 <_start@@Base+0x5c>
   11370:	add	r3, pc, r3
   11374:	ldr	r2, [r3, r2]
   11378:	cmp	r2, #0
   1137c:	bxeq	lr
   11380:	b	1129c <__gmon_start__@plt>
   11384:	andeq	r4, r1, r8, lsl #25
   11388:	muleq	r0, r8, r0
   1138c:	ldr	r3, [pc, #28]	; 113b0 <_start@@Base+0x84>
   11390:	ldr	r0, [pc, #28]	; 113b4 <_start@@Base+0x88>
   11394:	sub	r3, r3, r0
   11398:	cmp	r3, #6
   1139c:	bxls	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <_start@@Base+0x8c>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	strheq	r6, [r2], -pc	; <UNPREDICTABLE>
   113b4:	strheq	r6, [r2], -ip
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r1, [pc, #36]	; 113e8 <_start@@Base+0xbc>
   113c0:	ldr	r0, [pc, #36]	; 113ec <_start@@Base+0xc0>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <_start@@Base+0xc4>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	strheq	r6, [r2], -ip
   113ec:	strheq	r6, [r2], -ip
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <_start@@Base+0xec>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	1138c <_start@@Base+0x60>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	strheq	r6, [r2], -ip
   1141c:	ldr	r0, [pc, #40]	; 1144c <_start@@Base+0x120>
   11420:	ldr	r3, [r0]
   11424:	cmp	r3, #0
   11428:	bne	11430 <_start@@Base+0x104>
   1142c:	b	113bc <_start@@Base+0x90>
   11430:	ldr	r3, [pc, #24]	; 11450 <_start@@Base+0x124>
   11434:	cmp	r3, #0
   11438:	beq	1142c <_start@@Base+0x100>
   1143c:	push	{r4, lr}
   11440:	blx	r3
   11444:	pop	{r4, lr}
   11448:	b	113bc <_start@@Base+0x90>
   1144c:	strdeq	r5, [r2], -ip
   11450:	andeq	r0, r0, r0
   11454:	push	{fp, lr}
   11458:	add	fp, sp, #4
   1145c:	sub	sp, sp, #96	; 0x60
   11460:	str	r0, [fp, #-96]	; 0xffffffa0
   11464:	bl	13454 <mmk_matcher_ctx@@Base>
   11468:	str	r0, [fp, #-24]	; 0xffffffe8
   1146c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11470:	cmp	r3, #0
   11474:	beq	116cc <_start@@Base+0x3a0>
   11478:	bl	142ec <mmk_ctx@@Base>
   1147c:	mov	r3, r0
   11480:	mov	r0, r3
   11484:	bl	13ebc <mmk_stub_context@@Base>
   11488:	str	r0, [fp, #-28]	; 0xffffffe4
   1148c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11490:	ldr	r3, [r3]
   11494:	cmp	r3, #0
   11498:	bne	114e8 <_start@@Base+0x1bc>
   1149c:	mov	r0, #44	; 0x2c
   114a0:	bl	14b20 <mmk_malloc@@Base>
   114a4:	str	r0, [fp, #-32]	; 0xffffffe0
   114a8:	bl	14d40 <mmk_when_get_result@@Base>
   114ac:	mov	r2, r0
   114b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   114b4:	add	ip, r3, #8
   114b8:	mov	lr, r2
   114bc:	ldm	lr!, {r0, r1, r2, r3}
   114c0:	stmia	ip!, {r0, r1, r2, r3}
   114c4:	ldr	r3, [lr]
   114c8:	str	r3, [ip]
   114cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   114d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   114d4:	str	r2, [r3, #40]	; 0x28
   114d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   114dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   114e0:	bl	14d74 <mmk_when_impl@@Base>
   114e4:	b	116bc <_start@@Base+0x390>
   114e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ec:	ldr	r3, [r3]
   114f0:	cmp	r3, #1
   114f4:	bne	116bc <_start@@Base+0x390>
   114f8:	mov	r3, #0
   114fc:	str	r3, [fp, #-8]
   11500:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11504:	bl	137d4 <mmk_mock_params_begin@@Base>
   11508:	str	r0, [fp, #-12]
   1150c:	b	11674 <_start@@Base+0x348>
   11510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11514:	str	r3, [fp, #-36]	; 0xffffffdc
   11518:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1151c:	ldr	r3, [r3, #8]
   11520:	cmp	r3, #0
   11524:	beq	11614 <_start@@Base+0x2e8>
   11528:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1152c:	ldr	r3, [r3, #8]
   11530:	str	r3, [fp, #-36]	; 0xffffffdc
   11534:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11538:	ldr	r3, [r3]
   1153c:	cmp	r3, #0
   11540:	beq	11638 <_start@@Base+0x30c>
   11544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11548:	ldr	r3, [r3]
   1154c:	cmp	r3, #0
   11550:	bge	115d4 <_start@@Base+0x2a8>
   11554:	ldr	r3, [fp, #-12]
   11558:	add	r3, r3, #12
   1155c:	sub	r1, fp, #96	; 0x60
   11560:	mov	r2, #4
   11564:	mov	r0, r3
   11568:	bl	148f0 <mmk_memcmp@@Base>
   1156c:	str	r0, [fp, #-40]	; 0xffffffd8
   11570:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11574:	cmp	r3, #0
   11578:	bne	11590 <_start@@Base+0x264>
   1157c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11580:	ldr	r3, [r3]
   11584:	and	r3, r3, #2
   11588:	cmp	r3, #0
   1158c:	beq	11650 <_start@@Base+0x324>
   11590:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11594:	cmp	r3, #0
   11598:	bge	115b0 <_start@@Base+0x284>
   1159c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115a0:	ldr	r3, [r3]
   115a4:	and	r3, r3, #4
   115a8:	cmp	r3, #0
   115ac:	beq	11658 <_start@@Base+0x32c>
   115b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   115b4:	cmp	r3, #0
   115b8:	ble	11638 <_start@@Base+0x30c>
   115bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115c0:	ldr	r3, [r3]
   115c4:	and	r3, r3, #8
   115c8:	cmp	r3, #0
   115cc:	bne	11638 <_start@@Base+0x30c>
   115d0:	b	11664 <_start@@Base+0x338>
   115d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   115d8:	ldr	r3, [r3]
   115dc:	cmp	r3, #1
   115e0:	bne	11638 <_start@@Base+0x30c>
   115e4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   115e8:	bl	134f4 <mmk_matcher_get_predicate@@Base>
   115ec:	str	r0, [fp, #-44]	; 0xffffffd4
   115f0:	ldr	r3, [fp, #-12]
   115f4:	ldr	r2, [r3, #12]
   115f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115fc:	mov	r0, r2
   11600:	blx	r3
   11604:	mov	r3, r0
   11608:	cmp	r3, #0
   1160c:	bne	11638 <_start@@Base+0x30c>
   11610:	b	11664 <_start@@Base+0x338>
   11614:	ldr	r3, [fp, #-12]
   11618:	add	r3, r3, #12
   1161c:	sub	r1, fp, #96	; 0x60
   11620:	mov	r2, #4
   11624:	mov	r0, r3
   11628:	bl	148f0 <mmk_memcmp@@Base>
   1162c:	mov	r3, r0
   11630:	cmp	r3, #0
   11634:	bne	11660 <_start@@Base+0x334>
   11638:	ldr	r3, [fp, #-12]
   1163c:	ldr	r3, [r3]
   11640:	ldr	r2, [fp, #-8]
   11644:	add	r3, r2, r3
   11648:	str	r3, [fp, #-8]
   1164c:	b	11664 <_start@@Base+0x338>
   11650:	nop			; (mov r0, r0)
   11654:	b	11664 <_start@@Base+0x338>
   11658:	nop			; (mov r0, r0)
   1165c:	b	11664 <_start@@Base+0x338>
   11660:	nop			; (mov r0, r0)
   11664:	ldr	r1, [fp, #-12]
   11668:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1166c:	bl	13828 <mmk_mock_params_next@@Base>
   11670:	str	r0, [fp, #-12]
   11674:	ldr	r3, [fp, #-12]
   11678:	cmp	r3, #0
   1167c:	bne	11510 <_start@@Base+0x1e4>
   11680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11684:	str	r3, [fp, #-16]
   11688:	b	116a8 <_start@@Base+0x37c>
   1168c:	ldr	r3, [fp, #-16]
   11690:	ldr	r3, [r3, #8]
   11694:	str	r3, [fp, #-48]	; 0xffffffd0
   11698:	ldr	r0, [fp, #-16]
   1169c:	bl	14b60 <mmk_free@@Base>
   116a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   116a4:	str	r3, [fp, #-16]
   116a8:	ldr	r3, [fp, #-16]
   116ac:	cmp	r3, #0
   116b0:	bne	1168c <_start@@Base+0x360>
   116b4:	ldr	r0, [fp, #-8]
   116b8:	bl	14494 <mmk_verify_set_times@@Base>
   116bc:	ldr	r3, [pc, #648]	; 1194c <_start@@Base+0x620>
   116c0:	add	r3, pc, r3
   116c4:	ldr	r3, [r3]
   116c8:	b	11940 <_start@@Base+0x614>
   116cc:	sub	r3, fp, #88	; 0x58
   116d0:	mov	r2, #0
   116d4:	str	r2, [r3]
   116d8:	str	r2, [r3, #4]
   116dc:	str	r2, [r3, #8]
   116e0:	str	r2, [r3, #12]
   116e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   116e8:	str	r3, [fp, #-76]	; 0xffffffb4
   116ec:	sub	r3, fp, #88	; 0x58
   116f0:	str	r3, [fp, #-52]	; 0xffffffcc
   116f4:	mov	r1, #16
   116f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   116fc:	bl	146b8 <mmk_verify_register_call@@Base>
   11700:	bl	138a0 <mmk_mock_get_params@@Base>
   11704:	str	r0, [fp, #-20]	; 0xffffffec
   11708:	b	11928 <_start@@Base+0x5fc>
   1170c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11710:	str	r3, [fp, #-56]	; 0xffffffc8
   11714:	ldr	r3, [fp, #-20]	; 0xffffffec
   11718:	ldr	r3, [r3]
   1171c:	str	r3, [fp, #-60]	; 0xffffffc4
   11720:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11724:	ldr	r3, [r3, #8]
   11728:	cmp	r3, #0
   1172c:	beq	11814 <_start@@Base+0x4e8>
   11730:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11734:	ldr	r3, [r3, #8]
   11738:	str	r3, [fp, #-60]	; 0xffffffc4
   1173c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11740:	ldr	r3, [r3]
   11744:	cmp	r3, #0
   11748:	beq	11838 <_start@@Base+0x50c>
   1174c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11750:	ldr	r3, [r3]
   11754:	cmp	r3, #0
   11758:	bge	117d8 <_start@@Base+0x4ac>
   1175c:	sub	r1, fp, #96	; 0x60
   11760:	sub	r3, fp, #96	; 0x60
   11764:	mov	r2, #4
   11768:	mov	r0, r3
   1176c:	bl	148f0 <mmk_memcmp@@Base>
   11770:	str	r0, [fp, #-64]	; 0xffffffc0
   11774:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11778:	cmp	r3, #0
   1177c:	bne	11794 <_start@@Base+0x468>
   11780:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11784:	ldr	r3, [r3]
   11788:	and	r3, r3, #2
   1178c:	cmp	r3, #0
   11790:	beq	11910 <_start@@Base+0x5e4>
   11794:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11798:	cmp	r3, #0
   1179c:	bge	117b4 <_start@@Base+0x488>
   117a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117a4:	ldr	r3, [r3]
   117a8:	and	r3, r3, #4
   117ac:	cmp	r3, #0
   117b0:	beq	11910 <_start@@Base+0x5e4>
   117b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   117b8:	cmp	r3, #0
   117bc:	ble	11838 <_start@@Base+0x50c>
   117c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117c4:	ldr	r3, [r3]
   117c8:	and	r3, r3, #8
   117cc:	cmp	r3, #0
   117d0:	bne	11838 <_start@@Base+0x50c>
   117d4:	b	11910 <_start@@Base+0x5e4>
   117d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   117dc:	ldr	r3, [r3]
   117e0:	cmp	r3, #1
   117e4:	bne	11838 <_start@@Base+0x50c>
   117e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   117ec:	bl	134f4 <mmk_matcher_get_predicate@@Base>
   117f0:	str	r0, [fp, #-68]	; 0xffffffbc
   117f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   117f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   117fc:	mov	r0, r2
   11800:	blx	r3
   11804:	mov	r3, r0
   11808:	cmp	r3, #0
   1180c:	bne	11838 <_start@@Base+0x50c>
   11810:	b	1191c <_start@@Base+0x5f0>
   11814:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11818:	add	r1, r3, #40	; 0x28
   1181c:	sub	r3, fp, #96	; 0x60
   11820:	mov	r2, #4
   11824:	mov	r0, r3
   11828:	bl	148f0 <mmk_memcmp@@Base>
   1182c:	mov	r3, r0
   11830:	cmp	r3, #0
   11834:	bne	11918 <_start@@Base+0x5ec>
   11838:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1183c:	ldr	r3, [r3, #12]
   11840:	cmp	r3, #0
   11844:	beq	1185c <_start@@Base+0x530>
   11848:	bl	112d8 <__errno_location@plt>
   1184c:	mov	r2, r0
   11850:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11854:	ldr	r3, [r3, #12]
   11858:	str	r3, [r2]
   1185c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11860:	ldr	r3, [r3, #20]
   11864:	cmp	r3, #0
   11868:	beq	1189c <_start@@Base+0x570>
   1186c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11870:	ldr	r3, [r3, #16]
   11874:	cmp	r3, #0
   11878:	bne	1189c <_start@@Base+0x570>
   1187c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11880:	ldr	r3, [r3, #20]
   11884:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11888:	mov	r0, r2
   1188c:	blx	r3
   11890:	str	r0, [fp, #-72]	; 0xffffffb8
   11894:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11898:	b	11940 <_start@@Base+0x614>
   1189c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118a0:	ldr	r3, [r3, #20]
   118a4:	cmp	r3, #0
   118a8:	beq	118e0 <_start@@Base+0x5b4>
   118ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118b0:	ldr	r3, [r3, #16]
   118b4:	cmp	r3, #0
   118b8:	beq	118e0 <_start@@Base+0x5b4>
   118bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118c0:	ldr	r3, [r3, #20]
   118c4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   118c8:	mov	r0, r2
   118cc:	blx	r3
   118d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118d4:	ldr	r3, [r3, #16]
   118d8:	ldr	r3, [r3]
   118dc:	b	11940 <_start@@Base+0x614>
   118e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118e4:	ldr	r3, [r3, #16]
   118e8:	cmp	r3, #0
   118ec:	beq	11900 <_start@@Base+0x5d4>
   118f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118f4:	ldr	r3, [r3, #16]
   118f8:	ldr	r3, [r3]
   118fc:	b	11940 <_start@@Base+0x614>
   11900:	ldr	r3, [pc, #72]	; 11950 <_start@@Base+0x624>
   11904:	add	r3, pc, r3
   11908:	ldr	r3, [r3]
   1190c:	b	11940 <_start@@Base+0x614>
   11910:	nop			; (mov r0, r0)
   11914:	b	1191c <_start@@Base+0x5f0>
   11918:	nop			; (mov r0, r0)
   1191c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11920:	ldr	r3, [r3, #4]
   11924:	str	r3, [fp, #-20]	; 0xffffffec
   11928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1192c:	cmp	r3, #0
   11930:	bne	1170c <_start@@Base+0x3e0>
   11934:	ldr	r3, [pc, #24]	; 11954 <_start@@Base+0x628>
   11938:	add	r3, pc, r3
   1193c:	ldr	r3, [r3]
   11940:	mov	r0, r3
   11944:	sub	sp, fp, #4
   11948:	pop	{fp, pc}
   1194c:	strdeq	r4, [r1], -ip
   11950:			; <UNDEFINED> instruction: 0x000147b8
   11954:	andeq	r4, r1, r4, lsl #15
   11958:	push	{fp, lr}
   1195c:	add	fp, sp, #4
   11960:	sub	sp, sp, #8
   11964:	str	r0, [fp, #-8]
   11968:	ldr	r3, [pc, #28]	; 1198c <_start@@Base+0x660>
   1196c:	add	r3, pc, r3
   11970:	mov	r1, r3
   11974:	ldr	r0, [fp, #-8]
   11978:	bl	134fc <mmk_mock_create_internal@@Base>
   1197c:	mov	r3, r0
   11980:	mov	r0, r3
   11984:	sub	sp, fp, #4
   11988:	pop	{fp, pc}
   1198c:			; <UNDEFINED> instruction: 0xfffffae0
   11990:	push	{fp, lr}
   11994:	add	fp, sp, #4
   11998:	sub	sp, sp, #64	; 0x40
   1199c:	bl	13454 <mmk_matcher_ctx@@Base>
   119a0:	str	r0, [fp, #-20]	; 0xffffffec
   119a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   119a8:	cmp	r3, #0
   119ac:	beq	11ab8 <_start@@Base+0x78c>
   119b0:	bl	142ec <mmk_ctx@@Base>
   119b4:	mov	r3, r0
   119b8:	mov	r0, r3
   119bc:	bl	13ebc <mmk_stub_context@@Base>
   119c0:	str	r0, [fp, #-24]	; 0xffffffe8
   119c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   119c8:	ldr	r3, [r3]
   119cc:	cmp	r3, #0
   119d0:	bne	11a14 <_start@@Base+0x6e8>
   119d4:	mov	r0, #40	; 0x28
   119d8:	bl	14b20 <mmk_malloc@@Base>
   119dc:	str	r0, [fp, #-28]	; 0xffffffe4
   119e0:	bl	14d40 <mmk_when_get_result@@Base>
   119e4:	mov	r2, r0
   119e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119ec:	add	ip, r3, #8
   119f0:	mov	lr, r2
   119f4:	ldm	lr!, {r0, r1, r2, r3}
   119f8:	stmia	ip!, {r0, r1, r2, r3}
   119fc:	ldr	r3, [lr]
   11a00:	str	r3, [ip]
   11a04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a0c:	bl	14d74 <mmk_when_impl@@Base>
   11a10:	b	11b9c <_start@@Base+0x870>
   11a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a18:	ldr	r3, [r3]
   11a1c:	cmp	r3, #1
   11a20:	bne	11b9c <_start@@Base+0x870>
   11a24:	mov	r3, #0
   11a28:	str	r3, [fp, #-8]
   11a2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a30:	bl	137d4 <mmk_mock_params_begin@@Base>
   11a34:	str	r0, [fp, #-12]
   11a38:	b	11a6c <_start@@Base+0x740>
   11a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a40:	str	r3, [fp, #-32]	; 0xffffffe0
   11a44:	ldr	r3, [fp, #-12]
   11a48:	ldr	r3, [r3]
   11a4c:	ldr	r2, [fp, #-8]
   11a50:	add	r3, r2, r3
   11a54:	str	r3, [fp, #-8]
   11a58:	nop			; (mov r0, r0)
   11a5c:	ldr	r1, [fp, #-12]
   11a60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a64:	bl	13828 <mmk_mock_params_next@@Base>
   11a68:	str	r0, [fp, #-12]
   11a6c:	ldr	r3, [fp, #-12]
   11a70:	cmp	r3, #0
   11a74:	bne	11a3c <_start@@Base+0x710>
   11a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a7c:	str	r3, [fp, #-16]
   11a80:	b	11aa0 <_start@@Base+0x774>
   11a84:	ldr	r3, [fp, #-16]
   11a88:	ldr	r3, [r3, #8]
   11a8c:	str	r3, [fp, #-36]	; 0xffffffdc
   11a90:	ldr	r0, [fp, #-16]
   11a94:	bl	14b60 <mmk_free@@Base>
   11a98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a9c:	str	r3, [fp, #-16]
   11aa0:	ldr	r3, [fp, #-16]
   11aa4:	cmp	r3, #0
   11aa8:	bne	11a84 <_start@@Base+0x758>
   11aac:	ldr	r0, [fp, #-8]
   11ab0:	bl	14494 <mmk_verify_set_times@@Base>
   11ab4:	b	11b9c <_start@@Base+0x870>
   11ab8:	sub	r3, fp, #64	; 0x40
   11abc:	mov	r2, #0
   11ac0:	str	r2, [r3]
   11ac4:	str	r2, [r3, #4]
   11ac8:	str	r2, [r3, #8]
   11acc:	sub	r3, fp, #64	; 0x40
   11ad0:	str	r3, [fp, #-40]	; 0xffffffd8
   11ad4:	mov	r1, #12
   11ad8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11adc:	bl	146b8 <mmk_verify_register_call@@Base>
   11ae0:	bl	138a0 <mmk_mock_get_params@@Base>
   11ae4:	str	r0, [fp, #-44]	; 0xffffffd4
   11ae8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11aec:	cmp	r3, #0
   11af0:	beq	11ba4 <_start@@Base+0x878>
   11af4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11af8:	str	r3, [fp, #-48]	; 0xffffffd0
   11afc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11b00:	ldr	r3, [r3]
   11b04:	str	r3, [fp, #-52]	; 0xffffffcc
   11b08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b0c:	ldr	r3, [r3, #12]
   11b10:	cmp	r3, #0
   11b14:	beq	11b2c <_start@@Base+0x800>
   11b18:	bl	112d8 <__errno_location@plt>
   11b1c:	mov	r2, r0
   11b20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b24:	ldr	r3, [r3, #12]
   11b28:	str	r3, [r2]
   11b2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b30:	ldr	r3, [r3, #20]
   11b34:	cmp	r3, #0
   11b38:	beq	11b5c <_start@@Base+0x830>
   11b3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b40:	ldr	r3, [r3, #16]
   11b44:	cmp	r3, #0
   11b48:	bne	11b5c <_start@@Base+0x830>
   11b4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b50:	ldr	r3, [r3, #20]
   11b54:	blx	r3
   11b58:	b	11ba8 <_start@@Base+0x87c>
   11b5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b60:	ldr	r3, [r3, #20]
   11b64:	cmp	r3, #0
   11b68:	beq	11b8c <_start@@Base+0x860>
   11b6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b70:	ldr	r3, [r3, #16]
   11b74:	cmp	r3, #0
   11b78:	beq	11b8c <_start@@Base+0x860>
   11b7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b80:	ldr	r3, [r3, #20]
   11b84:	blx	r3
   11b88:	b	11ba8 <_start@@Base+0x87c>
   11b8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b90:	ldr	r3, [r3, #16]
   11b94:	cmp	r3, #0
   11b98:	b	11ba8 <_start@@Base+0x87c>
   11b9c:	nop			; (mov r0, r0)
   11ba0:	b	11ba8 <_start@@Base+0x87c>
   11ba4:	nop			; (mov r0, r0)
   11ba8:	sub	sp, fp, #4
   11bac:	pop	{fp, pc}
   11bb0:	push	{fp, lr}
   11bb4:	add	fp, sp, #4
   11bb8:	sub	sp, sp, #8
   11bbc:	str	r0, [fp, #-8]
   11bc0:	ldr	r3, [pc, #28]	; 11be4 <_start@@Base+0x8b8>
   11bc4:	add	r3, pc, r3
   11bc8:	mov	r1, r3
   11bcc:	ldr	r0, [fp, #-8]
   11bd0:	bl	134fc <mmk_mock_create_internal@@Base>
   11bd4:	mov	r3, r0
   11bd8:	mov	r0, r3
   11bdc:	sub	sp, fp, #4
   11be0:	pop	{fp, pc}
   11be4:			; <UNDEFINED> instruction: 0xfffffdc4
   11be8:	push	{r4, fp, lr}
   11bec:	add	fp, sp, #8
   11bf0:	sub	sp, sp, #36	; 0x24
   11bf4:	str	r0, [fp, #-32]	; 0xffffffe0
   11bf8:	str	r1, [fp, #-36]	; 0xffffffdc
   11bfc:	str	r2, [fp, #-40]	; 0xffffffd8
   11c00:	str	r3, [fp, #-44]	; 0xffffffd4
   11c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c08:	cmp	r3, #0
   11c0c:	bgt	11c18 <_start@@Base+0x8ec>
   11c10:	mov	r3, #0
   11c14:	b	11ce8 <_start@@Base+0x9bc>
   11c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c1c:	lsl	r3, r3, #2
   11c20:	mov	r0, r3
   11c24:	bl	14b20 <mmk_malloc@@Base>
   11c28:	str	r0, [fp, #-20]	; 0xffffffec
   11c2c:	mov	r3, #0
   11c30:	str	r3, [fp, #-16]
   11c34:	b	11cbc <_start@@Base+0x990>
   11c38:	ldr	r3, [fp, #-16]
   11c3c:	lsl	r3, r3, #2
   11c40:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c44:	add	r4, r2, r3
   11c48:	mov	r0, #8
   11c4c:	bl	14b20 <mmk_malloc@@Base>
   11c50:	mov	r3, r0
   11c54:	str	r3, [r4]
   11c58:	ldr	r3, [fp, #-16]
   11c5c:	lsl	r3, r3, #2
   11c60:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c64:	add	r3, r2, r3
   11c68:	ldr	r3, [r3]
   11c6c:	mov	r2, #4
   11c70:	str	r2, [r3]
   11c74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c78:	add	r2, r3, #4
   11c7c:	str	r2, [fp, #-36]	; 0xffffffdc
   11c80:	ldr	r3, [r3]
   11c84:	str	r3, [fp, #-24]	; 0xffffffe8
   11c88:	ldr	r3, [fp, #-16]
   11c8c:	lsl	r3, r3, #2
   11c90:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c94:	add	r3, r2, r3
   11c98:	ldr	r3, [r3]
   11c9c:	add	r3, r3, #4
   11ca0:	sub	r1, fp, #24
   11ca4:	mov	r2, #4
   11ca8:	mov	r0, r3
   11cac:	bl	14944 <mmk_memcpy@@Base>
   11cb0:	ldr	r3, [fp, #-16]
   11cb4:	add	r3, r3, #1
   11cb8:	str	r3, [fp, #-16]
   11cbc:	ldr	r2, [fp, #-16]
   11cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11cc4:	cmp	r2, r3
   11cc8:	blt	11c38 <_start@@Base+0x90c>
   11ccc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11cd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11cd4:	str	r2, [r3]
   11cd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11cdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ce0:	str	r2, [r3]
   11ce4:	mov	r3, #1
   11ce8:	mov	r0, r3
   11cec:	sub	sp, fp, #8
   11cf0:	pop	{r4, fp, pc}
   11cf4:	push	{r0, r1, r2, r3}
   11cf8:	push	{r4, fp, lr}
   11cfc:	add	fp, sp, #8
   11d00:	sub	sp, sp, #156	; 0x9c
   11d04:	ldr	r3, [pc, #2032]	; 124fc <_start@@Base+0x11d0>
   11d08:	add	r3, pc, r3
   11d0c:	str	r3, [fp, #-40]	; 0xffffffd8
   11d10:	add	r3, fp, #8
   11d14:	str	r3, [fp, #-136]	; 0xffffff78
   11d18:	bl	13454 <mmk_matcher_ctx@@Base>
   11d1c:	str	r0, [fp, #-44]	; 0xffffffd4
   11d20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d24:	cmp	r3, #0
   11d28:	beq	121fc <_start@@Base+0xed0>
   11d2c:	bl	142ec <mmk_ctx@@Base>
   11d30:	mov	r3, r0
   11d34:	mov	r0, r3
   11d38:	bl	13ebc <mmk_stub_context@@Base>
   11d3c:	str	r0, [fp, #-48]	; 0xffffffd0
   11d40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d44:	ldr	r3, [r3]
   11d48:	cmp	r3, #0
   11d4c:	bne	11df4 <_start@@Base+0xac8>
   11d50:	mov	r0, #44	; 0x2c
   11d54:	bl	14b20 <mmk_malloc@@Base>
   11d58:	str	r0, [fp, #-52]	; 0xffffffcc
   11d5c:	bl	14d40 <mmk_when_get_result@@Base>
   11d60:	mov	r2, r0
   11d64:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d68:	add	ip, r3, #8
   11d6c:	mov	lr, r2
   11d70:	ldm	lr!, {r0, r1, r2, r3}
   11d74:	stmia	ip!, {r0, r1, r2, r3}
   11d78:	ldr	r3, [lr]
   11d7c:	str	r3, [ip]
   11d80:	ldr	r2, [fp, #4]
   11d84:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d88:	str	r2, [r3, #40]	; 0x28
   11d8c:	mov	r3, #0
   11d90:	str	r3, [fp, #-144]	; 0xffffff70
   11d94:	mov	r3, #0
   11d98:	str	r3, [fp, #-148]	; 0xffffff6c
   11d9c:	ldr	r3, [fp, #-136]	; 0xffffff78
   11da0:	str	r3, [fp, #-140]	; 0xffffff74
   11da4:	ldr	r0, [fp, #4]
   11da8:	sub	r3, fp, #148	; 0x94
   11dac:	sub	r2, fp, #144	; 0x90
   11db0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11db4:	ldr	r1, [fp, #-140]	; 0xffffff74
   11db8:	blx	r4
   11dbc:	str	r0, [fp, #-56]	; 0xffffffc8
   11dc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11dc4:	cmp	r3, #0
   11dc8:	beq	11de4 <_start@@Base+0xab8>
   11dcc:	ldr	r2, [fp, #-144]	; 0xffffff70
   11dd0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11dd4:	str	r2, [r3, #32]
   11dd8:	ldr	r2, [fp, #-148]	; 0xffffff6c
   11ddc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11de0:	str	r2, [r3, #36]	; 0x24
   11de4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11de8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11dec:	bl	14d74 <mmk_when_impl@@Base>
   11df0:	b	121ec <_start@@Base+0xec0>
   11df4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11df8:	ldr	r3, [r3]
   11dfc:	cmp	r3, #1
   11e00:	bne	121ec <_start@@Base+0xec0>
   11e04:	mov	r3, #0
   11e08:	str	r3, [fp, #-16]
   11e0c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11e10:	bl	137d4 <mmk_mock_params_begin@@Base>
   11e14:	str	r0, [fp, #-20]	; 0xffffffec
   11e18:	b	121a4 <_start@@Base+0xe78>
   11e1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11e20:	str	r3, [fp, #-24]	; 0xffffffe8
   11e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e28:	ldr	r3, [r3, #8]
   11e2c:	cmp	r3, #0
   11e30:	beq	11f20 <_start@@Base+0xbf4>
   11e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e38:	ldr	r3, [r3, #8]
   11e3c:	str	r3, [fp, #-24]	; 0xffffffe8
   11e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e44:	ldr	r3, [r3]
   11e48:	cmp	r3, #0
   11e4c:	beq	11f44 <_start@@Base+0xc18>
   11e50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e54:	ldr	r3, [r3]
   11e58:	cmp	r3, #0
   11e5c:	bge	11ee0 <_start@@Base+0xbb4>
   11e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e64:	add	r3, r3, #12
   11e68:	mov	r2, #4
   11e6c:	add	r1, fp, #4
   11e70:	mov	r0, r3
   11e74:	bl	148f0 <mmk_memcmp@@Base>
   11e78:	str	r0, [fp, #-60]	; 0xffffffc4
   11e7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e80:	cmp	r3, #0
   11e84:	bne	11e9c <_start@@Base+0xb70>
   11e88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e8c:	ldr	r3, [r3]
   11e90:	and	r3, r3, #2
   11e94:	cmp	r3, #0
   11e98:	beq	12160 <_start@@Base+0xe34>
   11e9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ea0:	cmp	r3, #0
   11ea4:	bge	11ebc <_start@@Base+0xb90>
   11ea8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11eac:	ldr	r3, [r3]
   11eb0:	and	r3, r3, #4
   11eb4:	cmp	r3, #0
   11eb8:	beq	12168 <_start@@Base+0xe3c>
   11ebc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ec0:	cmp	r3, #0
   11ec4:	ble	11f44 <_start@@Base+0xc18>
   11ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ecc:	ldr	r3, [r3]
   11ed0:	and	r3, r3, #8
   11ed4:	cmp	r3, #0
   11ed8:	bne	11f44 <_start@@Base+0xc18>
   11edc:	b	12194 <_start@@Base+0xe68>
   11ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ee4:	ldr	r3, [r3]
   11ee8:	cmp	r3, #1
   11eec:	bne	11f44 <_start@@Base+0xc18>
   11ef0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ef4:	bl	134f4 <mmk_matcher_get_predicate@@Base>
   11ef8:	str	r0, [fp, #-64]	; 0xffffffc0
   11efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f00:	ldr	r2, [r3, #12]
   11f04:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11f08:	mov	r0, r2
   11f0c:	blx	r3
   11f10:	mov	r3, r0
   11f14:	cmp	r3, #0
   11f18:	bne	11f44 <_start@@Base+0xc18>
   11f1c:	b	12194 <_start@@Base+0xe68>
   11f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f24:	add	r3, r3, #12
   11f28:	mov	r2, #4
   11f2c:	add	r1, fp, #4
   11f30:	mov	r0, r3
   11f34:	bl	148f0 <mmk_memcmp@@Base>
   11f38:	mov	r3, r0
   11f3c:	cmp	r3, #0
   11f40:	bne	12170 <_start@@Base+0xe44>
   11f44:	mov	r3, #0
   11f48:	str	r3, [fp, #-152]	; 0xffffff68
   11f4c:	mov	r3, #0
   11f50:	str	r3, [fp, #-156]	; 0xffffff64
   11f54:	ldr	r3, [fp, #-136]	; 0xffffff78
   11f58:	str	r3, [fp, #-140]	; 0xffffff74
   11f5c:	ldr	r0, [fp, #4]
   11f60:	sub	r3, fp, #156	; 0x9c
   11f64:	sub	r2, fp, #152	; 0x98
   11f68:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11f6c:	ldr	r1, [fp, #-140]	; 0xffffff74
   11f70:	blx	r4
   11f74:	str	r0, [fp, #-68]	; 0xffffffbc
   11f78:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11f7c:	cmp	r3, #0
   11f80:	beq	12194 <_start@@Base+0xe68>
   11f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f88:	ldr	r2, [r3, #4]
   11f8c:	ldr	r3, [fp, #-152]	; 0xffffff68
   11f90:	cmp	r2, r3
   11f94:	bne	12194 <_start@@Base+0xe68>
   11f98:	mov	r3, #0
   11f9c:	str	r3, [fp, #-28]	; 0xffffffe4
   11fa0:	b	1212c <_start@@Base+0xe00>
   11fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fa8:	ldr	r2, [r3, #8]
   11fac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fb0:	lsl	r3, r3, #2
   11fb4:	add	r3, r2, r3
   11fb8:	ldr	r3, [r3]
   11fbc:	str	r3, [fp, #-72]	; 0xffffffb8
   11fc0:	ldr	r2, [fp, #-156]	; 0xffffff64
   11fc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11fc8:	lsl	r3, r3, #2
   11fcc:	add	r3, r2, r3
   11fd0:	ldr	r3, [r3]
   11fd4:	str	r3, [fp, #-76]	; 0xffffffb4
   11fd8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11fdc:	ldr	r2, [r3]
   11fe0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11fe4:	ldr	r3, [r3]
   11fe8:	cmp	r2, r3
   11fec:	bne	12178 <_start@@Base+0xe4c>
   11ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ff4:	ldr	r3, [r3, #8]
   11ff8:	cmp	r3, #0
   11ffc:	beq	120ec <_start@@Base+0xdc0>
   12000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12004:	ldr	r3, [r3, #8]
   12008:	str	r3, [fp, #-24]	; 0xffffffe8
   1200c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12010:	ldr	r3, [r3]
   12014:	cmp	r3, #0
   12018:	beq	12118 <_start@@Base+0xdec>
   1201c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12020:	ldr	r3, [r3]
   12024:	cmp	r3, #0
   12028:	bge	120b4 <_start@@Base+0xd88>
   1202c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12030:	add	r0, r3, #4
   12034:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12038:	add	r1, r3, #4
   1203c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12040:	ldr	r3, [r3]
   12044:	mov	r2, r3
   12048:	bl	148f0 <mmk_memcmp@@Base>
   1204c:	str	r0, [fp, #-80]	; 0xffffffb0
   12050:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12054:	cmp	r3, #0
   12058:	bne	12070 <_start@@Base+0xd44>
   1205c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12060:	ldr	r3, [r3]
   12064:	and	r3, r3, #2
   12068:	cmp	r3, #0
   1206c:	beq	12180 <_start@@Base+0xe54>
   12070:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12074:	cmp	r3, #0
   12078:	bge	12090 <_start@@Base+0xd64>
   1207c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12080:	ldr	r3, [r3]
   12084:	and	r3, r3, #4
   12088:	cmp	r3, #0
   1208c:	beq	12188 <_start@@Base+0xe5c>
   12090:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12094:	cmp	r3, #0
   12098:	ble	12118 <_start@@Base+0xdec>
   1209c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120a0:	ldr	r3, [r3]
   120a4:	and	r3, r3, #8
   120a8:	cmp	r3, #0
   120ac:	bne	12118 <_start@@Base+0xdec>
   120b0:	b	12194 <_start@@Base+0xe68>
   120b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   120b8:	ldr	r3, [r3]
   120bc:	cmp	r3, #1
   120c0:	bne	12118 <_start@@Base+0xdec>
   120c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   120c8:	bl	134f4 <mmk_matcher_get_predicate@@Base>
   120cc:	str	r0, [fp, #-84]	; 0xffffffac
   120d0:	ldr	r3, [fp, #-84]	; 0xffffffac
   120d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120d8:	blx	r3
   120dc:	mov	r3, r0
   120e0:	cmp	r3, #0
   120e4:	bne	12118 <_start@@Base+0xdec>
   120e8:	b	12194 <_start@@Base+0xe68>
   120ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
   120f0:	add	r0, r3, #4
   120f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   120f8:	add	r1, r3, #4
   120fc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12100:	ldr	r3, [r3]
   12104:	mov	r2, r3
   12108:	bl	148f0 <mmk_memcmp@@Base>
   1210c:	mov	r3, r0
   12110:	cmp	r3, #0
   12114:	bne	12190 <_start@@Base+0xe64>
   12118:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1211c:	bl	14b60 <mmk_free@@Base>
   12120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12124:	add	r3, r3, #1
   12128:	str	r3, [fp, #-28]	; 0xffffffe4
   1212c:	ldr	r3, [fp, #-152]	; 0xffffff68
   12130:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12134:	cmp	r2, r3
   12138:	bcc	11fa4 <_start@@Base+0xc78>
   1213c:	ldr	r3, [fp, #-156]	; 0xffffff64
   12140:	mov	r0, r3
   12144:	bl	14b60 <mmk_free@@Base>
   12148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1214c:	ldr	r3, [r3]
   12150:	ldr	r2, [fp, #-16]
   12154:	add	r3, r2, r3
   12158:	str	r3, [fp, #-16]
   1215c:	b	12194 <_start@@Base+0xe68>
   12160:	nop			; (mov r0, r0)
   12164:	b	12194 <_start@@Base+0xe68>
   12168:	nop			; (mov r0, r0)
   1216c:	b	12194 <_start@@Base+0xe68>
   12170:	nop			; (mov r0, r0)
   12174:	b	12194 <_start@@Base+0xe68>
   12178:	nop			; (mov r0, r0)
   1217c:	b	12194 <_start@@Base+0xe68>
   12180:	nop			; (mov r0, r0)
   12184:	b	12194 <_start@@Base+0xe68>
   12188:	nop			; (mov r0, r0)
   1218c:	b	12194 <_start@@Base+0xe68>
   12190:	nop			; (mov r0, r0)
   12194:	ldr	r1, [fp, #-20]	; 0xffffffec
   12198:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1219c:	bl	13828 <mmk_mock_params_next@@Base>
   121a0:	str	r0, [fp, #-20]	; 0xffffffec
   121a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   121a8:	cmp	r3, #0
   121ac:	bne	11e1c <_start@@Base+0xaf0>
   121b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   121b4:	str	r3, [fp, #-32]	; 0xffffffe0
   121b8:	b	121d8 <_start@@Base+0xeac>
   121bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121c0:	ldr	r3, [r3, #8]
   121c4:	str	r3, [fp, #-88]	; 0xffffffa8
   121c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   121cc:	bl	14b60 <mmk_free@@Base>
   121d0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   121d4:	str	r3, [fp, #-32]	; 0xffffffe0
   121d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121dc:	cmp	r3, #0
   121e0:	bne	121bc <_start@@Base+0xe90>
   121e4:	ldr	r0, [fp, #-16]
   121e8:	bl	14494 <mmk_verify_set_times@@Base>
   121ec:	ldr	r3, [pc, #780]	; 12500 <_start@@Base+0x11d4>
   121f0:	add	r3, pc, r3
   121f4:	ldr	r3, [r3]
   121f8:	b	124e8 <_start@@Base+0x11bc>
   121fc:	sub	r3, fp, #132	; 0x84
   12200:	mov	r2, #0
   12204:	str	r2, [r3]
   12208:	str	r2, [r3, #4]
   1220c:	str	r2, [r3, #8]
   12210:	str	r2, [r3, #12]
   12214:	ldr	r3, [fp, #4]
   12218:	str	r3, [fp, #-120]	; 0xffffff88
   1221c:	sub	r3, fp, #132	; 0x84
   12220:	str	r3, [fp, #-92]	; 0xffffffa4
   12224:	mov	r3, #0
   12228:	str	r3, [fp, #-160]	; 0xffffff60
   1222c:	mov	r3, #0
   12230:	str	r3, [fp, #-164]	; 0xffffff5c
   12234:	ldr	r3, [fp, #-136]	; 0xffffff78
   12238:	str	r3, [fp, #-140]	; 0xffffff74
   1223c:	ldr	r0, [fp, #4]
   12240:	sub	r3, fp, #164	; 0xa4
   12244:	sub	r2, fp, #160	; 0xa0
   12248:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1224c:	ldr	r1, [fp, #-140]	; 0xffffff74
   12250:	blx	r4
   12254:	str	r0, [fp, #-96]	; 0xffffffa0
   12258:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1225c:	cmp	r3, #0
   12260:	beq	1227c <_start@@Base+0xf50>
   12264:	ldr	r2, [fp, #-160]	; 0xffffff60
   12268:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1226c:	str	r2, [r3, #4]
   12270:	ldr	r2, [fp, #-164]	; 0xffffff5c
   12274:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12278:	str	r2, [r3, #8]
   1227c:	mov	r1, #16
   12280:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12284:	bl	146b8 <mmk_verify_register_call@@Base>
   12288:	bl	138a0 <mmk_mock_get_params@@Base>
   1228c:	str	r0, [fp, #-36]	; 0xffffffdc
   12290:	b	124d0 <_start@@Base+0x11a4>
   12294:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12298:	str	r3, [fp, #-100]	; 0xffffff9c
   1229c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   122a0:	ldr	r3, [r3]
   122a4:	str	r3, [fp, #-104]	; 0xffffff98
   122a8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122ac:	ldr	r3, [r3, #8]
   122b0:	cmp	r3, #0
   122b4:	beq	123a0 <_start@@Base+0x1074>
   122b8:	ldr	r3, [fp, #-104]	; 0xffffff98
   122bc:	ldr	r3, [r3, #8]
   122c0:	str	r3, [fp, #-104]	; 0xffffff98
   122c4:	ldr	r3, [fp, #-104]	; 0xffffff98
   122c8:	ldr	r3, [r3]
   122cc:	cmp	r3, #0
   122d0:	beq	123c8 <_start@@Base+0x109c>
   122d4:	ldr	r3, [fp, #-104]	; 0xffffff98
   122d8:	ldr	r3, [r3]
   122dc:	cmp	r3, #0
   122e0:	bge	12364 <_start@@Base+0x1038>
   122e4:	mov	r2, #4
   122e8:	add	r3, fp, #4
   122ec:	mov	r1, r3
   122f0:	add	r3, fp, #4
   122f4:	mov	r0, r3
   122f8:	bl	148f0 <mmk_memcmp@@Base>
   122fc:	str	r0, [fp, #-108]	; 0xffffff94
   12300:	ldr	r3, [fp, #-108]	; 0xffffff94
   12304:	cmp	r3, #0
   12308:	bne	12320 <_start@@Base+0xff4>
   1230c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12310:	ldr	r3, [r3]
   12314:	and	r3, r3, #2
   12318:	cmp	r3, #0
   1231c:	beq	124b8 <_start@@Base+0x118c>
   12320:	ldr	r3, [fp, #-108]	; 0xffffff94
   12324:	cmp	r3, #0
   12328:	bge	12340 <_start@@Base+0x1014>
   1232c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12330:	ldr	r3, [r3]
   12334:	and	r3, r3, #4
   12338:	cmp	r3, #0
   1233c:	beq	124b8 <_start@@Base+0x118c>
   12340:	ldr	r3, [fp, #-108]	; 0xffffff94
   12344:	cmp	r3, #0
   12348:	ble	123c8 <_start@@Base+0x109c>
   1234c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12350:	ldr	r3, [r3]
   12354:	and	r3, r3, #8
   12358:	cmp	r3, #0
   1235c:	bne	123c8 <_start@@Base+0x109c>
   12360:	b	124b8 <_start@@Base+0x118c>
   12364:	ldr	r3, [fp, #-104]	; 0xffffff98
   12368:	ldr	r3, [r3]
   1236c:	cmp	r3, #1
   12370:	bne	123c8 <_start@@Base+0x109c>
   12374:	ldr	r0, [fp, #-104]	; 0xffffff98
   12378:	bl	134f4 <mmk_matcher_get_predicate@@Base>
   1237c:	str	r0, [fp, #-112]	; 0xffffff90
   12380:	ldr	r2, [fp, #4]
   12384:	ldr	r3, [fp, #-112]	; 0xffffff90
   12388:	mov	r0, r2
   1238c:	blx	r3
   12390:	mov	r3, r0
   12394:	cmp	r3, #0
   12398:	bne	123c8 <_start@@Base+0x109c>
   1239c:	b	124c4 <_start@@Base+0x1198>
   123a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123a4:	add	r3, r3, #40	; 0x28
   123a8:	mov	r2, #4
   123ac:	mov	r1, r3
   123b0:	add	r3, fp, #4
   123b4:	mov	r0, r3
   123b8:	bl	148f0 <mmk_memcmp@@Base>
   123bc:	mov	r3, r0
   123c0:	cmp	r3, #0
   123c4:	bne	124c0 <_start@@Base+0x1194>
   123c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123cc:	ldr	r3, [r3, #12]
   123d0:	cmp	r3, #0
   123d4:	beq	123ec <_start@@Base+0x10c0>
   123d8:	bl	112d8 <__errno_location@plt>
   123dc:	mov	r2, r0
   123e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123e4:	ldr	r3, [r3, #12]
   123e8:	str	r3, [r2]
   123ec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123f0:	ldr	r3, [r3, #20]
   123f4:	cmp	r3, #0
   123f8:	beq	12438 <_start@@Base+0x110c>
   123fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12400:	ldr	r3, [r3, #16]
   12404:	cmp	r3, #0
   12408:	bne	12438 <_start@@Base+0x110c>
   1240c:	ldr	r3, [fp, #-136]	; 0xffffff78
   12410:	str	r3, [fp, #-140]	; 0xffffff74
   12414:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12418:	ldr	r3, [r3, #20]
   1241c:	ldr	r2, [fp, #4]
   12420:	ldr	r1, [fp, #-140]	; 0xffffff74
   12424:	mov	r0, r2
   12428:	blx	r3
   1242c:	str	r0, [fp, #-116]	; 0xffffff8c
   12430:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12434:	b	124e8 <_start@@Base+0x11bc>
   12438:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1243c:	ldr	r3, [r3, #20]
   12440:	cmp	r3, #0
   12444:	beq	12488 <_start@@Base+0x115c>
   12448:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1244c:	ldr	r3, [r3, #16]
   12450:	cmp	r3, #0
   12454:	beq	12488 <_start@@Base+0x115c>
   12458:	ldr	r3, [fp, #-136]	; 0xffffff78
   1245c:	str	r3, [fp, #-140]	; 0xffffff74
   12460:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12464:	ldr	r3, [r3, #20]
   12468:	ldr	r2, [fp, #4]
   1246c:	ldr	r1, [fp, #-140]	; 0xffffff74
   12470:	mov	r0, r2
   12474:	blx	r3
   12478:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1247c:	ldr	r3, [r3, #16]
   12480:	ldr	r3, [r3]
   12484:	b	124e8 <_start@@Base+0x11bc>
   12488:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1248c:	ldr	r3, [r3, #16]
   12490:	cmp	r3, #0
   12494:	beq	124a8 <_start@@Base+0x117c>
   12498:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1249c:	ldr	r3, [r3, #16]
   124a0:	ldr	r3, [r3]
   124a4:	b	124e8 <_start@@Base+0x11bc>
   124a8:	ldr	r3, [pc, #84]	; 12504 <_start@@Base+0x11d8>
   124ac:	add	r3, pc, r3
   124b0:	ldr	r3, [r3]
   124b4:	b	124e8 <_start@@Base+0x11bc>
   124b8:	nop			; (mov r0, r0)
   124bc:	b	124c4 <_start@@Base+0x1198>
   124c0:	nop			; (mov r0, r0)
   124c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124c8:	ldr	r3, [r3, #4]
   124cc:	str	r3, [fp, #-36]	; 0xffffffdc
   124d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124d4:	cmp	r3, #0
   124d8:	bne	12294 <_start@@Base+0xf68>
   124dc:	ldr	r3, [pc, #36]	; 12508 <_start@@Base+0x11dc>
   124e0:	add	r3, pc, r3
   124e4:	ldr	r3, [r3]
   124e8:	mov	r0, r3
   124ec:	sub	sp, fp, #8
   124f0:	pop	{r4, fp, lr}
   124f4:	add	sp, sp, #16
   124f8:	bx	lr
   124fc:			; <UNDEFINED> instruction: 0xfffffed8
   12500:	ldrdeq	r3, [r1], -r0
   12504:	andeq	r3, r1, r4, lsl ip
   12508:	andeq	r3, r1, r0, ror #23
   1250c:	push	{fp, lr}
   12510:	add	fp, sp, #4
   12514:	sub	sp, sp, #8
   12518:	str	r0, [fp, #-8]
   1251c:	ldr	r3, [pc, #28]	; 12540 <_start@@Base+0x1214>
   12520:	add	r3, pc, r3
   12524:	mov	r1, r3
   12528:	ldr	r0, [fp, #-8]
   1252c:	bl	134fc <mmk_mock_create_internal@@Base>
   12530:	mov	r3, r0
   12534:	mov	r0, r3
   12538:	sub	sp, fp, #4
   1253c:	pop	{fp, pc}
   12540:			; <UNDEFINED> instruction: 0xfffff7cc

00012544 <set_valid@@Base>:
   12544:	push	{fp}		; (str fp, [sp, #-4]!)
   12548:	add	fp, sp, #0
   1254c:	ldr	r3, [pc, #24]	; 1256c <set_valid@@Base+0x28>
   12550:	add	r3, pc, r3
   12554:	mov	r2, #1
   12558:	str	r2, [r3]
   1255c:	nop			; (mov r0, r0)
   12560:	add	sp, fp, #0
   12564:	pop	{fp}		; (ldr fp, [sp], #4)
   12568:	bx	lr
   1256c:	andeq	r3, r1, r8, ror #22

00012570 <main@@Base>:
   12570:	push	{r4, fp, lr}
   12574:	add	fp, sp, #8
   12578:	sub	sp, sp, #468	; 0x1d4
   1257c:	ldr	r4, [pc, #2956]	; 13110 <main@@Base+0xba0>
   12580:	add	r4, pc, r4
   12584:	ldr	r3, [pc, #2952]	; 13114 <main@@Base+0xba4>
   12588:	add	r3, pc, r3
   1258c:	mov	r0, r3
   12590:	bl	11bb0 <_start@@Base+0x884>
   12594:	mov	r0, #0
   12598:	bl	133e8 <mmk_matcher_init@@Base>
   1259c:	sub	r3, fp, #468	; 0x1d4
   125a0:	mov	r2, #0
   125a4:	str	r2, [r3]
   125a8:	str	r2, [r3, #4]
   125ac:	str	r2, [r3, #8]
   125b0:	str	r2, [r3, #12]
   125b4:	str	r2, [r3, #16]
   125b8:	ldr	r3, [pc, #2904]	; 13118 <main@@Base+0xba8>
   125bc:	ldr	r3, [r4, r3]
   125c0:	str	r3, [fp, #-456]	; 0xfffffe38
   125c4:	sub	r3, fp, #468	; 0x1d4
   125c8:	mov	r0, r3
   125cc:	bl	14cfc <mmk_when_init@@Base>
   125d0:	bl	11254 <fn_vv@plt>
   125d4:	bl	1342c <mmk_matcher_term@@Base>
   125d8:	mov	r0, #1
   125dc:	bl	133e8 <mmk_matcher_init@@Base>
   125e0:	bl	11254 <fn_vv@plt>
   125e4:	bl	1342c <mmk_matcher_term@@Base>
   125e8:	sub	r3, fp, #448	; 0x1c0
   125ec:	mov	r2, #0
   125f0:	str	r2, [r3]
   125f4:	str	r2, [r3, #4]
   125f8:	str	r2, [r3, #8]
   125fc:	str	r2, [r3, #12]
   12600:	str	r2, [r3, #16]
   12604:	str	r2, [r3, #20]
   12608:	mov	r3, #1
   1260c:	str	r3, [fp, #-448]	; 0xfffffe40
   12610:	mov	r3, #1
   12614:	str	r3, [fp, #-444]	; 0xfffffe44
   12618:	sub	r3, fp, #448	; 0x1c0
   1261c:	mov	r0, r3
   12620:	bl	144d8 <mmk_verify_times@@Base>
   12624:	mov	r3, r0
   12628:	cmp	r3, #0
   1262c:	bne	12664 <main@@Base+0xf4>
   12630:	ldr	r3, [pc, #2788]	; 1311c <main@@Base+0xbac>
   12634:	ldr	r3, [r4, r3]
   12638:	ldr	r0, [r3]
   1263c:	ldr	r3, [pc, #2780]	; 13120 <main@@Base+0xbb0>
   12640:	add	r3, pc, r3
   12644:	str	r3, [sp]
   12648:	mov	r3, #42	; 0x2a
   1264c:	ldr	r2, [pc, #2768]	; 13124 <main@@Base+0xbb4>
   12650:	add	r2, pc, r2
   12654:	ldr	r1, [pc, #2764]	; 13128 <main@@Base+0xbb8>
   12658:	add	r1, pc, r1
   1265c:	bl	112cc <fprintf@plt>
   12660:	bl	11320 <abort@plt>
   12664:	mov	r0, #1
   12668:	bl	133e8 <mmk_matcher_init@@Base>
   1266c:	bl	11254 <fn_vv@plt>
   12670:	bl	1342c <mmk_matcher_term@@Base>
   12674:	sub	r3, fp, #424	; 0x1a8
   12678:	mov	r2, #0
   1267c:	str	r2, [r3]
   12680:	str	r2, [r3, #4]
   12684:	str	r2, [r3, #8]
   12688:	str	r2, [r3, #12]
   1268c:	str	r2, [r3, #16]
   12690:	str	r2, [r3, #20]
   12694:	mov	r3, #1
   12698:	str	r3, [fp, #-424]	; 0xfffffe58
   1269c:	mov	r3, #1
   126a0:	str	r3, [fp, #-412]	; 0xfffffe64
   126a4:	sub	r3, fp, #424	; 0x1a8
   126a8:	mov	r0, r3
   126ac:	bl	144d8 <mmk_verify_times@@Base>
   126b0:	mov	r3, r0
   126b4:	cmp	r3, #0
   126b8:	bne	126f0 <main@@Base+0x180>
   126bc:	ldr	r3, [pc, #2648]	; 1311c <main@@Base+0xbac>
   126c0:	ldr	r3, [r4, r3]
   126c4:	ldr	r0, [r3]
   126c8:	ldr	r3, [pc, #2652]	; 1312c <main@@Base+0xbbc>
   126cc:	add	r3, pc, r3
   126d0:	str	r3, [sp]
   126d4:	mov	r3, #43	; 0x2b
   126d8:	ldr	r2, [pc, #2640]	; 13130 <main@@Base+0xbc0>
   126dc:	add	r2, pc, r2
   126e0:	ldr	r1, [pc, #2636]	; 13134 <main@@Base+0xbc4>
   126e4:	add	r1, pc, r1
   126e8:	bl	112cc <fprintf@plt>
   126ec:	bl	11320 <abort@plt>
   126f0:	mov	r0, #1
   126f4:	bl	133e8 <mmk_matcher_init@@Base>
   126f8:	bl	11254 <fn_vv@plt>
   126fc:	bl	1342c <mmk_matcher_term@@Base>
   12700:	sub	r3, fp, #400	; 0x190
   12704:	mov	r2, #0
   12708:	str	r2, [r3]
   1270c:	str	r2, [r3, #4]
   12710:	str	r2, [r3, #8]
   12714:	str	r2, [r3, #12]
   12718:	str	r2, [r3, #16]
   1271c:	str	r2, [r3, #20]
   12720:	mov	r3, #1
   12724:	str	r3, [fp, #-400]	; 0xfffffe70
   12728:	mov	r3, #1
   1272c:	str	r3, [fp, #-384]	; 0xfffffe80
   12730:	sub	r3, fp, #400	; 0x190
   12734:	mov	r0, r3
   12738:	bl	144d8 <mmk_verify_times@@Base>
   1273c:	mov	r3, r0
   12740:	cmp	r3, #0
   12744:	beq	1277c <main@@Base+0x20c>
   12748:	ldr	r3, [pc, #2508]	; 1311c <main@@Base+0xbac>
   1274c:	ldr	r3, [r4, r3]
   12750:	ldr	r0, [r3]
   12754:	ldr	r3, [pc, #2524]	; 13138 <main@@Base+0xbc8>
   12758:	add	r3, pc, r3
   1275c:	str	r3, [sp]
   12760:	mov	r3, #45	; 0x2d
   12764:	ldr	r2, [pc, #2512]	; 1313c <main@@Base+0xbcc>
   12768:	add	r2, pc, r2
   1276c:	ldr	r1, [pc, #2508]	; 13140 <main@@Base+0xbd0>
   12770:	add	r1, pc, r1
   12774:	bl	112cc <fprintf@plt>
   12778:	bl	11320 <abort@plt>
   1277c:	mov	r0, #1
   12780:	bl	133e8 <mmk_matcher_init@@Base>
   12784:	bl	11254 <fn_vv@plt>
   12788:	bl	1342c <mmk_matcher_term@@Base>
   1278c:	sub	r3, fp, #376	; 0x178
   12790:	mov	r2, #0
   12794:	str	r2, [r3]
   12798:	str	r2, [r3, #4]
   1279c:	str	r2, [r3, #8]
   127a0:	str	r2, [r3, #12]
   127a4:	str	r2, [r3, #16]
   127a8:	str	r2, [r3, #20]
   127ac:	mov	r3, #1
   127b0:	str	r3, [fp, #-376]	; 0xfffffe88
   127b4:	mov	r3, #1
   127b8:	str	r3, [fp, #-368]	; 0xfffffe90
   127bc:	sub	r3, fp, #376	; 0x178
   127c0:	mov	r0, r3
   127c4:	bl	144d8 <mmk_verify_times@@Base>
   127c8:	mov	r3, r0
   127cc:	cmp	r3, #0
   127d0:	beq	12808 <main@@Base+0x298>
   127d4:	ldr	r3, [pc, #2368]	; 1311c <main@@Base+0xbac>
   127d8:	ldr	r3, [r4, r3]
   127dc:	ldr	r0, [r3]
   127e0:	ldr	r3, [pc, #2396]	; 13144 <main@@Base+0xbd4>
   127e4:	add	r3, pc, r3
   127e8:	str	r3, [sp]
   127ec:	mov	r3, #46	; 0x2e
   127f0:	ldr	r2, [pc, #2384]	; 13148 <main@@Base+0xbd8>
   127f4:	add	r2, pc, r2
   127f8:	ldr	r1, [pc, #2380]	; 1314c <main@@Base+0xbdc>
   127fc:	add	r1, pc, r1
   12800:	bl	112cc <fprintf@plt>
   12804:	bl	11320 <abort@plt>
   12808:	mov	r0, #1
   1280c:	bl	133e8 <mmk_matcher_init@@Base>
   12810:	bl	11254 <fn_vv@plt>
   12814:	bl	1342c <mmk_matcher_term@@Base>
   12818:	sub	r3, fp, #352	; 0x160
   1281c:	mov	r2, #0
   12820:	str	r2, [r3]
   12824:	str	r2, [r3, #4]
   12828:	str	r2, [r3, #8]
   1282c:	str	r2, [r3, #12]
   12830:	str	r2, [r3, #16]
   12834:	str	r2, [r3, #20]
   12838:	mov	r3, #1
   1283c:	str	r3, [fp, #-352]	; 0xfffffea0
   12840:	mov	r3, #1
   12844:	str	r3, [fp, #-344]	; 0xfffffea8
   12848:	mov	r3, #1
   1284c:	str	r3, [fp, #-340]	; 0xfffffeac
   12850:	sub	r3, fp, #352	; 0x160
   12854:	mov	r0, r3
   12858:	bl	144d8 <mmk_verify_times@@Base>
   1285c:	mov	r3, r0
   12860:	cmp	r3, #0
   12864:	beq	1289c <main@@Base+0x32c>
   12868:	ldr	r3, [pc, #2220]	; 1311c <main@@Base+0xbac>
   1286c:	ldr	r3, [r4, r3]
   12870:	ldr	r0, [r3]
   12874:	ldr	r3, [pc, #2260]	; 13150 <main@@Base+0xbe0>
   12878:	add	r3, pc, r3
   1287c:	str	r3, [sp]
   12880:	mov	r3, #47	; 0x2f
   12884:	ldr	r2, [pc, #2248]	; 13154 <main@@Base+0xbe4>
   12888:	add	r2, pc, r2
   1288c:	ldr	r1, [pc, #2244]	; 13158 <main@@Base+0xbe8>
   12890:	add	r1, pc, r1
   12894:	bl	112cc <fprintf@plt>
   12898:	bl	11320 <abort@plt>
   1289c:	bl	11254 <fn_vv@plt>
   128a0:	ldr	r3, [pc, #2228]	; 1315c <main@@Base+0xbec>
   128a4:	add	r3, pc, r3
   128a8:	ldr	r3, [r3]
   128ac:	cmp	r3, #0
   128b0:	bne	128e8 <main@@Base+0x378>
   128b4:	ldr	r3, [pc, #2144]	; 1311c <main@@Base+0xbac>
   128b8:	ldr	r3, [r4, r3]
   128bc:	ldr	r0, [r3]
   128c0:	ldr	r3, [pc, #2200]	; 13160 <main@@Base+0xbf0>
   128c4:	add	r3, pc, r3
   128c8:	str	r3, [sp]
   128cc:	mov	r3, #50	; 0x32
   128d0:	ldr	r2, [pc, #2188]	; 13164 <main@@Base+0xbf4>
   128d4:	add	r2, pc, r2
   128d8:	ldr	r1, [pc, #2184]	; 13168 <main@@Base+0xbf8>
   128dc:	add	r1, pc, r1
   128e0:	bl	112cc <fprintf@plt>
   128e4:	bl	11320 <abort@plt>
   128e8:	mov	r0, #1
   128ec:	bl	133e8 <mmk_matcher_init@@Base>
   128f0:	bl	11254 <fn_vv@plt>
   128f4:	bl	1342c <mmk_matcher_term@@Base>
   128f8:	sub	r3, fp, #328	; 0x148
   128fc:	mov	r2, #0
   12900:	str	r2, [r3]
   12904:	str	r2, [r3, #4]
   12908:	str	r2, [r3, #8]
   1290c:	str	r2, [r3, #12]
   12910:	str	r2, [r3, #16]
   12914:	str	r2, [r3, #20]
   12918:	mov	r3, #1
   1291c:	str	r3, [fp, #-328]	; 0xfffffeb8
   12920:	mov	r3, #1
   12924:	str	r3, [fp, #-312]	; 0xfffffec8
   12928:	sub	r3, fp, #328	; 0x148
   1292c:	mov	r0, r3
   12930:	bl	144d8 <mmk_verify_times@@Base>
   12934:	mov	r3, r0
   12938:	cmp	r3, #0
   1293c:	bne	12974 <main@@Base+0x404>
   12940:	ldr	r3, [pc, #2004]	; 1311c <main@@Base+0xbac>
   12944:	ldr	r3, [r4, r3]
   12948:	ldr	r0, [r3]
   1294c:	ldr	r3, [pc, #2072]	; 1316c <main@@Base+0xbfc>
   12950:	add	r3, pc, r3
   12954:	str	r3, [sp]
   12958:	mov	r3, #51	; 0x33
   1295c:	ldr	r2, [pc, #2060]	; 13170 <main@@Base+0xc00>
   12960:	add	r2, pc, r2
   12964:	ldr	r1, [pc, #2056]	; 13174 <main@@Base+0xc04>
   12968:	add	r1, pc, r1
   1296c:	bl	112cc <fprintf@plt>
   12970:	bl	11320 <abort@plt>
   12974:	mov	r0, #1
   12978:	bl	133e8 <mmk_matcher_init@@Base>
   1297c:	bl	11254 <fn_vv@plt>
   12980:	bl	1342c <mmk_matcher_term@@Base>
   12984:	sub	r3, fp, #304	; 0x130
   12988:	mov	r2, #0
   1298c:	str	r2, [r3]
   12990:	str	r2, [r3, #4]
   12994:	str	r2, [r3, #8]
   12998:	str	r2, [r3, #12]
   1299c:	str	r2, [r3, #16]
   129a0:	str	r2, [r3, #20]
   129a4:	mov	r3, #1
   129a8:	str	r3, [fp, #-304]	; 0xfffffed0
   129ac:	mov	r3, #1
   129b0:	str	r3, [fp, #-296]	; 0xfffffed8
   129b4:	sub	r3, fp, #304	; 0x130
   129b8:	mov	r0, r3
   129bc:	bl	144d8 <mmk_verify_times@@Base>
   129c0:	mov	r3, r0
   129c4:	cmp	r3, #0
   129c8:	bne	12a00 <main@@Base+0x490>
   129cc:	ldr	r3, [pc, #1864]	; 1311c <main@@Base+0xbac>
   129d0:	ldr	r3, [r4, r3]
   129d4:	ldr	r0, [r3]
   129d8:	ldr	r3, [pc, #1944]	; 13178 <main@@Base+0xc08>
   129dc:	add	r3, pc, r3
   129e0:	str	r3, [sp]
   129e4:	mov	r3, #52	; 0x34
   129e8:	ldr	r2, [pc, #1932]	; 1317c <main@@Base+0xc0c>
   129ec:	add	r2, pc, r2
   129f0:	ldr	r1, [pc, #1928]	; 13180 <main@@Base+0xc10>
   129f4:	add	r1, pc, r1
   129f8:	bl	112cc <fprintf@plt>
   129fc:	bl	11320 <abort@plt>
   12a00:	mov	r0, #1
   12a04:	bl	133e8 <mmk_matcher_init@@Base>
   12a08:	bl	11254 <fn_vv@plt>
   12a0c:	bl	1342c <mmk_matcher_term@@Base>
   12a10:	sub	r3, fp, #280	; 0x118
   12a14:	mov	r2, #0
   12a18:	str	r2, [r3]
   12a1c:	str	r2, [r3, #4]
   12a20:	str	r2, [r3, #8]
   12a24:	str	r2, [r3, #12]
   12a28:	str	r2, [r3, #16]
   12a2c:	str	r2, [r3, #20]
   12a30:	mov	r3, #1
   12a34:	str	r3, [fp, #-280]	; 0xfffffee8
   12a38:	mov	r3, #1
   12a3c:	str	r3, [fp, #-268]	; 0xfffffef4
   12a40:	sub	r3, fp, #280	; 0x118
   12a44:	mov	r0, r3
   12a48:	bl	144d8 <mmk_verify_times@@Base>
   12a4c:	mov	r3, r0
   12a50:	cmp	r3, #0
   12a54:	bne	12a8c <main@@Base+0x51c>
   12a58:	ldr	r3, [pc, #1724]	; 1311c <main@@Base+0xbac>
   12a5c:	ldr	r3, [r4, r3]
   12a60:	ldr	r0, [r3]
   12a64:	ldr	r3, [pc, #1816]	; 13184 <main@@Base+0xc14>
   12a68:	add	r3, pc, r3
   12a6c:	str	r3, [sp]
   12a70:	mov	r3, #53	; 0x35
   12a74:	ldr	r2, [pc, #1804]	; 13188 <main@@Base+0xc18>
   12a78:	add	r2, pc, r2
   12a7c:	ldr	r1, [pc, #1800]	; 1318c <main@@Base+0xc1c>
   12a80:	add	r1, pc, r1
   12a84:	bl	112cc <fprintf@plt>
   12a88:	bl	11320 <abort@plt>
   12a8c:	mov	r0, #1
   12a90:	bl	133e8 <mmk_matcher_init@@Base>
   12a94:	bl	11254 <fn_vv@plt>
   12a98:	bl	1342c <mmk_matcher_term@@Base>
   12a9c:	sub	r3, fp, #256	; 0x100
   12aa0:	mov	r2, #0
   12aa4:	str	r2, [r3]
   12aa8:	str	r2, [r3, #4]
   12aac:	str	r2, [r3, #8]
   12ab0:	str	r2, [r3, #12]
   12ab4:	str	r2, [r3, #16]
   12ab8:	str	r2, [r3, #20]
   12abc:	mov	r3, #1
   12ac0:	str	r3, [fp, #-256]	; 0xffffff00
   12ac4:	mov	r3, #1
   12ac8:	str	r3, [fp, #-248]	; 0xffffff08
   12acc:	mov	r3, #1
   12ad0:	str	r3, [fp, #-244]	; 0xffffff0c
   12ad4:	sub	r3, fp, #256	; 0x100
   12ad8:	mov	r0, r3
   12adc:	bl	144d8 <mmk_verify_times@@Base>
   12ae0:	mov	r3, r0
   12ae4:	cmp	r3, #0
   12ae8:	bne	12b20 <main@@Base+0x5b0>
   12aec:	ldr	r3, [pc, #1576]	; 1311c <main@@Base+0xbac>
   12af0:	ldr	r3, [r4, r3]
   12af4:	ldr	r0, [r3]
   12af8:	ldr	r3, [pc, #1680]	; 13190 <main@@Base+0xc20>
   12afc:	add	r3, pc, r3
   12b00:	str	r3, [sp]
   12b04:	mov	r3, #54	; 0x36
   12b08:	ldr	r2, [pc, #1668]	; 13194 <main@@Base+0xc24>
   12b0c:	add	r2, pc, r2
   12b10:	ldr	r1, [pc, #1664]	; 13198 <main@@Base+0xc28>
   12b14:	add	r1, pc, r1
   12b18:	bl	112cc <fprintf@plt>
   12b1c:	bl	11320 <abort@plt>
   12b20:	mov	r0, #1
   12b24:	bl	133e8 <mmk_matcher_init@@Base>
   12b28:	bl	11254 <fn_vv@plt>
   12b2c:	bl	1342c <mmk_matcher_term@@Base>
   12b30:	sub	r3, fp, #232	; 0xe8
   12b34:	mov	r2, #0
   12b38:	str	r2, [r3]
   12b3c:	str	r2, [r3, #4]
   12b40:	str	r2, [r3, #8]
   12b44:	str	r2, [r3, #12]
   12b48:	str	r2, [r3, #16]
   12b4c:	str	r2, [r3, #20]
   12b50:	mov	r3, #1
   12b54:	str	r3, [fp, #-232]	; 0xffffff18
   12b58:	mov	r3, #1
   12b5c:	str	r3, [fp, #-228]	; 0xffffff1c
   12b60:	sub	r3, fp, #232	; 0xe8
   12b64:	mov	r0, r3
   12b68:	bl	144d8 <mmk_verify_times@@Base>
   12b6c:	mov	r3, r0
   12b70:	cmp	r3, #0
   12b74:	beq	12bac <main@@Base+0x63c>
   12b78:	ldr	r3, [pc, #1436]	; 1311c <main@@Base+0xbac>
   12b7c:	ldr	r3, [r4, r3]
   12b80:	ldr	r0, [r3]
   12b84:	ldr	r3, [pc, #1552]	; 1319c <main@@Base+0xc2c>
   12b88:	add	r3, pc, r3
   12b8c:	str	r3, [sp]
   12b90:	mov	r3, #55	; 0x37
   12b94:	ldr	r2, [pc, #1540]	; 131a0 <main@@Base+0xc30>
   12b98:	add	r2, pc, r2
   12b9c:	ldr	r1, [pc, #1536]	; 131a4 <main@@Base+0xc34>
   12ba0:	add	r1, pc, r1
   12ba4:	bl	112cc <fprintf@plt>
   12ba8:	bl	11320 <abort@plt>
   12bac:	mov	r0, #1
   12bb0:	bl	133e8 <mmk_matcher_init@@Base>
   12bb4:	bl	11254 <fn_vv@plt>
   12bb8:	bl	1342c <mmk_matcher_term@@Base>
   12bbc:	sub	r3, fp, #208	; 0xd0
   12bc0:	mov	r2, #0
   12bc4:	str	r2, [r3]
   12bc8:	str	r2, [r3, #4]
   12bcc:	str	r2, [r3, #8]
   12bd0:	str	r2, [r3, #12]
   12bd4:	str	r2, [r3, #16]
   12bd8:	str	r2, [r3, #20]
   12bdc:	mov	r3, #1
   12be0:	str	r3, [fp, #-208]	; 0xffffff30
   12be4:	mov	r3, #2
   12be8:	str	r3, [fp, #-192]	; 0xffffff40
   12bec:	sub	r3, fp, #208	; 0xd0
   12bf0:	mov	r0, r3
   12bf4:	bl	144d8 <mmk_verify_times@@Base>
   12bf8:	mov	r3, r0
   12bfc:	cmp	r3, #0
   12c00:	beq	12c38 <main@@Base+0x6c8>
   12c04:	ldr	r3, [pc, #1296]	; 1311c <main@@Base+0xbac>
   12c08:	ldr	r3, [r4, r3]
   12c0c:	ldr	r0, [r3]
   12c10:	ldr	r3, [pc, #1424]	; 131a8 <main@@Base+0xc38>
   12c14:	add	r3, pc, r3
   12c18:	str	r3, [sp]
   12c1c:	mov	r3, #56	; 0x38
   12c20:	ldr	r2, [pc, #1412]	; 131ac <main@@Base+0xc3c>
   12c24:	add	r2, pc, r2
   12c28:	ldr	r1, [pc, #1408]	; 131b0 <main@@Base+0xc40>
   12c2c:	add	r1, pc, r1
   12c30:	bl	112cc <fprintf@plt>
   12c34:	bl	11320 <abort@plt>
   12c38:	mov	r0, #1
   12c3c:	bl	133e8 <mmk_matcher_init@@Base>
   12c40:	bl	11254 <fn_vv@plt>
   12c44:	bl	1342c <mmk_matcher_term@@Base>
   12c48:	sub	r3, fp, #184	; 0xb8
   12c4c:	mov	r2, #0
   12c50:	str	r2, [r3]
   12c54:	str	r2, [r3, #4]
   12c58:	str	r2, [r3, #8]
   12c5c:	str	r2, [r3, #12]
   12c60:	str	r2, [r3, #16]
   12c64:	str	r2, [r3, #20]
   12c68:	mov	r3, #1
   12c6c:	str	r3, [fp, #-184]	; 0xffffff48
   12c70:	mov	r3, #2
   12c74:	str	r3, [fp, #-176]	; 0xffffff50
   12c78:	sub	r3, fp, #184	; 0xb8
   12c7c:	mov	r0, r3
   12c80:	bl	144d8 <mmk_verify_times@@Base>
   12c84:	mov	r3, r0
   12c88:	cmp	r3, #0
   12c8c:	beq	12cc4 <main@@Base+0x754>
   12c90:	ldr	r3, [pc, #1156]	; 1311c <main@@Base+0xbac>
   12c94:	ldr	r3, [r4, r3]
   12c98:	ldr	r0, [r3]
   12c9c:	ldr	r3, [pc, #1296]	; 131b4 <main@@Base+0xc44>
   12ca0:	add	r3, pc, r3
   12ca4:	str	r3, [sp]
   12ca8:	mov	r3, #57	; 0x39
   12cac:	ldr	r2, [pc, #1284]	; 131b8 <main@@Base+0xc48>
   12cb0:	add	r2, pc, r2
   12cb4:	ldr	r1, [pc, #1280]	; 131bc <main@@Base+0xc4c>
   12cb8:	add	r1, pc, r1
   12cbc:	bl	112cc <fprintf@plt>
   12cc0:	bl	11320 <abort@plt>
   12cc4:	ldr	r3, [pc, #1268]	; 131c0 <main@@Base+0xc50>
   12cc8:	ldr	r3, [r4, r3]
   12ccc:	mov	r0, r3
   12cd0:	bl	1339c <mmk_reset@@Base>
   12cd4:	ldr	r3, [pc, #1256]	; 131c4 <main@@Base+0xc54>
   12cd8:	str	r3, [fp, #-16]
   12cdc:	ldr	r3, [pc, #1252]	; 131c8 <main@@Base+0xc58>
   12ce0:	add	r3, pc, r3
   12ce4:	mov	r0, r3
   12ce8:	bl	11958 <_start@@Base+0x62c>
   12cec:	mov	r0, #0
   12cf0:	bl	133e8 <mmk_matcher_init@@Base>
   12cf4:	sub	r3, fp, #160	; 0xa0
   12cf8:	mov	r2, #0
   12cfc:	str	r2, [r3]
   12d00:	str	r2, [r3, #4]
   12d04:	str	r2, [r3, #8]
   12d08:	str	r2, [r3, #12]
   12d0c:	str	r2, [r3, #16]
   12d10:	ldr	r3, [fp, #-16]
   12d14:	str	r3, [fp, #-156]	; 0xffffff64
   12d18:	mov	r3, #1
   12d1c:	str	r3, [fp, #-140]	; 0xffffff74
   12d20:	sub	r3, fp, #140	; 0x8c
   12d24:	str	r3, [fp, #-152]	; 0xffffff68
   12d28:	sub	r3, fp, #160	; 0xa0
   12d2c:	mov	r0, r3
   12d30:	bl	14cfc <mmk_when_init@@Base>
   12d34:	mov	r0, #1
   12d38:	bl	1126c <fn_ii@plt>
   12d3c:	bl	1342c <mmk_matcher_term@@Base>
   12d40:	mov	r0, #1
   12d44:	bl	1126c <fn_ii@plt>
   12d48:	mov	r3, r0
   12d4c:	cmp	r3, #1
   12d50:	bne	12d6c <main@@Base+0x7fc>
   12d54:	bl	112d8 <__errno_location@plt>
   12d58:	mov	r3, r0
   12d5c:	ldr	r2, [r3]
   12d60:	ldr	r3, [fp, #-16]
   12d64:	cmp	r2, r3
   12d68:	beq	12da0 <main@@Base+0x830>
   12d6c:	ldr	r3, [pc, #936]	; 1311c <main@@Base+0xbac>
   12d70:	ldr	r3, [r4, r3]
   12d74:	ldr	r0, [r3]
   12d78:	ldr	r3, [pc, #1100]	; 131cc <main@@Base+0xc5c>
   12d7c:	add	r3, pc, r3
   12d80:	str	r3, [sp]
   12d84:	mov	r3, #64	; 0x40
   12d88:	ldr	r2, [pc, #1088]	; 131d0 <main@@Base+0xc60>
   12d8c:	add	r2, pc, r2
   12d90:	ldr	r1, [pc, #1084]	; 131d4 <main@@Base+0xc64>
   12d94:	add	r1, pc, r1
   12d98:	bl	112cc <fprintf@plt>
   12d9c:	bl	11320 <abort@plt>
   12da0:	mov	r0, #42	; 0x2a
   12da4:	bl	1126c <fn_ii@plt>
   12da8:	mov	r3, r0
   12dac:	cmp	r3, #0
   12db0:	beq	12de8 <main@@Base+0x878>
   12db4:	ldr	r3, [pc, #864]	; 1311c <main@@Base+0xbac>
   12db8:	ldr	r3, [r4, r3]
   12dbc:	ldr	r0, [r3]
   12dc0:	ldr	r3, [pc, #1040]	; 131d8 <main@@Base+0xc68>
   12dc4:	add	r3, pc, r3
   12dc8:	str	r3, [sp]
   12dcc:	mov	r3, #65	; 0x41
   12dd0:	ldr	r2, [pc, #1028]	; 131dc <main@@Base+0xc6c>
   12dd4:	add	r2, pc, r2
   12dd8:	ldr	r1, [pc, #1024]	; 131e0 <main@@Base+0xc70>
   12ddc:	add	r1, pc, r1
   12de0:	bl	112cc <fprintf@plt>
   12de4:	bl	11320 <abort@plt>
   12de8:	mov	r0, #1
   12dec:	bl	133e8 <mmk_matcher_init@@Base>
   12df0:	mov	r1, #0
   12df4:	mov	r0, #0
   12df8:	bl	13478 <mmk_matcher_add@@Base>
   12dfc:	mov	r0, #0
   12e00:	bl	1126c <fn_ii@plt>
   12e04:	bl	1342c <mmk_matcher_term@@Base>
   12e08:	sub	r3, fp, #136	; 0x88
   12e0c:	mov	r2, #0
   12e10:	str	r2, [r3]
   12e14:	str	r2, [r3, #4]
   12e18:	str	r2, [r3, #8]
   12e1c:	str	r2, [r3, #12]
   12e20:	str	r2, [r3, #16]
   12e24:	str	r2, [r3, #20]
   12e28:	mov	r3, #1
   12e2c:	str	r3, [fp, #-136]	; 0xffffff78
   12e30:	mov	r3, #2
   12e34:	str	r3, [fp, #-120]	; 0xffffff88
   12e38:	sub	r3, fp, #136	; 0x88
   12e3c:	mov	r0, r3
   12e40:	bl	144d8 <mmk_verify_times@@Base>
   12e44:	mov	r3, r0
   12e48:	cmp	r3, #0
   12e4c:	bne	12e84 <main@@Base+0x914>
   12e50:	ldr	r3, [pc, #708]	; 1311c <main@@Base+0xbac>
   12e54:	ldr	r3, [r4, r3]
   12e58:	ldr	r0, [r3]
   12e5c:	ldr	r3, [pc, #896]	; 131e4 <main@@Base+0xc74>
   12e60:	add	r3, pc, r3
   12e64:	str	r3, [sp]
   12e68:	mov	r3, #67	; 0x43
   12e6c:	ldr	r2, [pc, #884]	; 131e8 <main@@Base+0xc78>
   12e70:	add	r2, pc, r2
   12e74:	ldr	r1, [pc, #880]	; 131ec <main@@Base+0xc7c>
   12e78:	add	r1, pc, r1
   12e7c:	bl	112cc <fprintf@plt>
   12e80:	bl	11320 <abort@plt>
   12e84:	mov	r0, #1
   12e88:	bl	133e8 <mmk_matcher_init@@Base>
   12e8c:	mov	r0, #1
   12e90:	bl	1126c <fn_ii@plt>
   12e94:	bl	1342c <mmk_matcher_term@@Base>
   12e98:	sub	r3, fp, #112	; 0x70
   12e9c:	mov	r2, #0
   12ea0:	str	r2, [r3]
   12ea4:	str	r2, [r3, #4]
   12ea8:	str	r2, [r3, #8]
   12eac:	str	r2, [r3, #12]
   12eb0:	str	r2, [r3, #16]
   12eb4:	str	r2, [r3, #20]
   12eb8:	mov	r3, #1
   12ebc:	str	r3, [fp, #-112]	; 0xffffff90
   12ec0:	mov	r3, #1
   12ec4:	str	r3, [fp, #-96]	; 0xffffffa0
   12ec8:	sub	r3, fp, #112	; 0x70
   12ecc:	mov	r0, r3
   12ed0:	bl	144d8 <mmk_verify_times@@Base>
   12ed4:	mov	r3, r0
   12ed8:	cmp	r3, #0
   12edc:	bne	12f14 <main@@Base+0x9a4>
   12ee0:	ldr	r3, [pc, #564]	; 1311c <main@@Base+0xbac>
   12ee4:	ldr	r3, [r4, r3]
   12ee8:	ldr	r0, [r3]
   12eec:	ldr	r3, [pc, #764]	; 131f0 <main@@Base+0xc80>
   12ef0:	add	r3, pc, r3
   12ef4:	str	r3, [sp]
   12ef8:	mov	r3, #68	; 0x44
   12efc:	ldr	r2, [pc, #752]	; 131f4 <main@@Base+0xc84>
   12f00:	add	r2, pc, r2
   12f04:	ldr	r1, [pc, #748]	; 131f8 <main@@Base+0xc88>
   12f08:	add	r1, pc, r1
   12f0c:	bl	112cc <fprintf@plt>
   12f10:	bl	11320 <abort@plt>
   12f14:	mov	r0, #1
   12f18:	bl	133e8 <mmk_matcher_init@@Base>
   12f1c:	mov	r0, #42	; 0x2a
   12f20:	bl	1126c <fn_ii@plt>
   12f24:	bl	1342c <mmk_matcher_term@@Base>
   12f28:	sub	r3, fp, #88	; 0x58
   12f2c:	mov	r2, #0
   12f30:	str	r2, [r3]
   12f34:	str	r2, [r3, #4]
   12f38:	str	r2, [r3, #8]
   12f3c:	str	r2, [r3, #12]
   12f40:	str	r2, [r3, #16]
   12f44:	str	r2, [r3, #20]
   12f48:	mov	r3, #1
   12f4c:	str	r3, [fp, #-88]	; 0xffffffa8
   12f50:	mov	r3, #1
   12f54:	str	r3, [fp, #-72]	; 0xffffffb8
   12f58:	sub	r3, fp, #88	; 0x58
   12f5c:	mov	r0, r3
   12f60:	bl	144d8 <mmk_verify_times@@Base>
   12f64:	mov	r3, r0
   12f68:	cmp	r3, #0
   12f6c:	bne	12fa4 <main@@Base+0xa34>
   12f70:	ldr	r3, [pc, #420]	; 1311c <main@@Base+0xbac>
   12f74:	ldr	r3, [r4, r3]
   12f78:	ldr	r0, [r3]
   12f7c:	ldr	r3, [pc, #632]	; 131fc <main@@Base+0xc8c>
   12f80:	add	r3, pc, r3
   12f84:	str	r3, [sp]
   12f88:	mov	r3, #69	; 0x45
   12f8c:	ldr	r2, [pc, #620]	; 13200 <main@@Base+0xc90>
   12f90:	add	r2, pc, r2
   12f94:	ldr	r1, [pc, #616]	; 13204 <main@@Base+0xc94>
   12f98:	add	r1, pc, r1
   12f9c:	bl	112cc <fprintf@plt>
   12fa0:	bl	11320 <abort@plt>
   12fa4:	mov	r0, #1
   12fa8:	bl	133e8 <mmk_matcher_init@@Base>
   12fac:	mov	r0, #12
   12fb0:	bl	1126c <fn_ii@plt>
   12fb4:	bl	1342c <mmk_matcher_term@@Base>
   12fb8:	sub	r3, fp, #64	; 0x40
   12fbc:	mov	r2, #0
   12fc0:	str	r2, [r3]
   12fc4:	str	r2, [r3, #4]
   12fc8:	str	r2, [r3, #8]
   12fcc:	str	r2, [r3, #12]
   12fd0:	str	r2, [r3, #16]
   12fd4:	str	r2, [r3, #20]
   12fd8:	mov	r3, #1
   12fdc:	str	r3, [fp, #-64]	; 0xffffffc0
   12fe0:	mov	r3, #1
   12fe4:	str	r3, [fp, #-60]	; 0xffffffc4
   12fe8:	sub	r3, fp, #64	; 0x40
   12fec:	mov	r0, r3
   12ff0:	bl	144d8 <mmk_verify_times@@Base>
   12ff4:	mov	r3, r0
   12ff8:	cmp	r3, #0
   12ffc:	bne	13034 <main@@Base+0xac4>
   13000:	ldr	r3, [pc, #276]	; 1311c <main@@Base+0xbac>
   13004:	ldr	r3, [r4, r3]
   13008:	ldr	r0, [r3]
   1300c:	ldr	r3, [pc, #500]	; 13208 <main@@Base+0xc98>
   13010:	add	r3, pc, r3
   13014:	str	r3, [sp]
   13018:	mov	r3, #70	; 0x46
   1301c:	ldr	r2, [pc, #488]	; 1320c <main@@Base+0xc9c>
   13020:	add	r2, pc, r2
   13024:	ldr	r1, [pc, #484]	; 13210 <main@@Base+0xca0>
   13028:	add	r1, pc, r1
   1302c:	bl	112cc <fprintf@plt>
   13030:	bl	11320 <abort@plt>
   13034:	ldr	r3, [pc, #472]	; 13214 <main@@Base+0xca4>
   13038:	ldr	r3, [r4, r3]
   1303c:	mov	r0, r3
   13040:	bl	1339c <mmk_reset@@Base>
   13044:	ldr	r3, [pc, #460]	; 13218 <main@@Base+0xca8>
   13048:	add	r3, pc, r3
   1304c:	mov	r0, r3
   13050:	bl	1250c <_start@@Base+0x11e0>
   13054:	mov	r0, #0
   13058:	bl	133e8 <mmk_matcher_init@@Base>
   1305c:	sub	r3, fp, #40	; 0x28
   13060:	mov	r2, #0
   13064:	str	r2, [r3]
   13068:	str	r2, [r3, #4]
   1306c:	str	r2, [r3, #8]
   13070:	str	r2, [r3, #12]
   13074:	str	r2, [r3, #16]
   13078:	mov	r3, #1
   1307c:	str	r3, [fp, #-20]	; 0xffffffec
   13080:	sub	r3, fp, #20
   13084:	str	r3, [fp, #-32]	; 0xffffffe0
   13088:	sub	r3, fp, #40	; 0x28
   1308c:	mov	r0, r3
   13090:	bl	14cfc <mmk_when_init@@Base>
   13094:	mov	r1, #42	; 0x2a
   13098:	mov	r0, #1
   1309c:	bl	11278 <fn_ii_va@plt>
   130a0:	bl	1342c <mmk_matcher_term@@Base>
   130a4:	mov	r1, #42	; 0x2a
   130a8:	mov	r0, #1
   130ac:	bl	11278 <fn_ii_va@plt>
   130b0:	mov	r3, r0
   130b4:	cmp	r3, #1
   130b8:	beq	130f0 <main@@Base+0xb80>
   130bc:	ldr	r3, [pc, #88]	; 1311c <main@@Base+0xbac>
   130c0:	ldr	r3, [r4, r3]
   130c4:	ldr	r0, [r3]
   130c8:	ldr	r3, [pc, #332]	; 1321c <main@@Base+0xcac>
   130cc:	add	r3, pc, r3
   130d0:	str	r3, [sp]
   130d4:	mov	r3, #77	; 0x4d
   130d8:	ldr	r2, [pc, #320]	; 13220 <main@@Base+0xcb0>
   130dc:	add	r2, pc, r2
   130e0:	ldr	r1, [pc, #316]	; 13224 <main@@Base+0xcb4>
   130e4:	add	r1, pc, r1
   130e8:	bl	112cc <fprintf@plt>
   130ec:	bl	11320 <abort@plt>
   130f0:	ldr	r3, [pc, #304]	; 13228 <main@@Base+0xcb8>
   130f4:	ldr	r3, [r4, r3]
   130f8:	mov	r0, r3
   130fc:	bl	1339c <mmk_reset@@Base>
   13100:	mov	r3, #0
   13104:	mov	r0, r3
   13108:	sub	sp, fp, #8
   1310c:	pop	{r4, fp, pc}
   13110:	andeq	r3, r1, r8, ror sl
   13114:	andeq	r2, r0, r4, lsr #22
   13118:	andeq	r0, r0, ip, ror r0
   1311c:	andeq	r0, r0, r4, lsl #1
   13120:	andeq	r2, r0, r4, ror #21
   13124:	andeq	r2, r0, r4, ror #20
   13128:	andeq	r2, r0, ip, lsr #21
   1312c:	andeq	r2, r0, r8, ror sl
   13130:	ldrdeq	r2, [r0], -r8
   13134:	andeq	r2, r0, r0, lsr #20
   13138:	andeq	r2, r0, r0, lsl sl
   1313c:	andeq	r2, r0, ip, asr #18
   13140:	muleq	r0, r4, r9
   13144:	andeq	r2, r0, r8, lsr #19
   13148:	andeq	r2, r0, r0, asr #17
   1314c:	andeq	r2, r0, r8, lsl #18
   13150:	andeq	r2, r0, r8, lsr r9
   13154:	andeq	r2, r0, ip, lsr #16
   13158:	andeq	r2, r0, r4, ror r8
   1315c:	andeq	r3, r1, r4, lsl r8
   13160:	andeq	r2, r0, r0, lsr #18
   13164:	andeq	r2, r0, r0, ror #15
   13168:	andeq	r2, r0, r8, lsr #16
   1316c:	muleq	r0, ip, r8
   13170:	andeq	r2, r0, r4, asr r7
   13174:	muleq	r0, ip, r7
   13178:	andeq	r2, r0, r0, lsr r8
   1317c:	andeq	r2, r0, r8, asr #13
   13180:	andeq	r2, r0, r0, lsl r7
   13184:	ldrdeq	r2, [r0], -ip
   13188:	andeq	r2, r0, ip, lsr r6
   1318c:	andeq	r2, r0, r4, lsl #13
   13190:	andeq	r2, r0, r4, lsr r7
   13194:	andeq	r2, r0, r8, lsr #11
   13198:	strdeq	r2, [r0], -r0
   1319c:	ldrdeq	r2, [r0], -ip
   131a0:	andeq	r2, r0, ip, lsl r5
   131a4:	andeq	r2, r0, r4, ror #10
   131a8:	andeq	r2, r0, r4, ror r6
   131ac:	muleq	r0, r0, r4
   131b0:	ldrdeq	r2, [r0], -r8
   131b4:	andeq	r2, r0, ip, lsl #12
   131b8:	andeq	r2, r0, r4, lsl #8
   131bc:	andeq	r2, r0, ip, asr #8
   131c0:	andeq	r0, r0, r4, ror r0
   131c4:	mrc2	14, 7, pc, cr14, cr14, {7}
   131c8:	strdeq	r2, [r0], -r0
   131cc:	andeq	r2, r0, ip, asr r5
   131d0:	andeq	r2, r0, r8, lsr #6
   131d4:	andeq	r2, r0, r0, ror r3
   131d8:	andeq	r2, r0, r4, lsr r5
   131dc:	andeq	r2, r0, r0, ror #5
   131e0:	andeq	r2, r0, r8, lsr #6
   131e4:	andeq	r2, r0, r8, lsr #9
   131e8:	andeq	r2, r0, r4, asr #4
   131ec:	andeq	r2, r0, ip, lsl #5
   131f0:	andeq	r2, r0, r4, asr #8
   131f4:			; <UNDEFINED> instruction: 0x000021b4
   131f8:	strdeq	r2, [r0], -ip
   131fc:	ldrdeq	r2, [r0], -r8
   13200:	andeq	r2, r0, r4, lsr #2
   13204:	andeq	r2, r0, ip, ror #2
   13208:	andeq	r2, r0, ip, ror #6
   1320c:	muleq	r0, r4, r0
   13210:	ldrdeq	r2, [r0], -ip
   13214:	andeq	r0, r0, r0, lsl #1
   13218:	andeq	r2, r0, r8, asr r3
   1321c:	andeq	r2, r0, r0, ror #5
   13220:	ldrdeq	r1, [r0], -r8
   13224:	andeq	r2, r0, r0, lsr #32
   13228:	andeq	r0, r0, r8, lsl #1

0001322c <mmk_init@@Base>:
   1322c:	push	{r4, fp, lr}
   13230:	add	fp, sp, #8
   13234:	sub	sp, sp, #12
   13238:	ldr	r4, [pc, #164]	; 132e4 <mmk_init@@Base+0xb8>
   1323c:	add	r4, pc, r4
   13240:	ldr	r3, [pc, #160]	; 132e8 <mmk_init@@Base+0xbc>
   13244:	add	r3, pc, r3
   13248:	ldr	r3, [r3]
   1324c:	cmp	r3, #0
   13250:	bne	132d8 <mmk_init@@Base+0xac>
   13254:	bl	13ad8 <plt_init_ctx@@Base>
   13258:	mov	r2, r0
   1325c:	ldr	r3, [pc, #136]	; 132ec <mmk_init@@Base+0xc0>
   13260:	add	r3, pc, r3
   13264:	str	r2, [r3, #4]
   13268:	ldr	r3, [pc, #128]	; 132f0 <mmk_init@@Base+0xc4>
   1326c:	add	r3, pc, r3
   13270:	ldr	r3, [r3, #4]
   13274:	cmn	r3, #1
   13278:	bne	132b0 <mmk_init@@Base+0x84>
   1327c:	ldr	r3, [pc, #112]	; 132f4 <mmk_init@@Base+0xc8>
   13280:	ldr	r3, [r4, r3]
   13284:	ldr	r0, [r3]
   13288:	ldr	r3, [pc, #104]	; 132f8 <mmk_init@@Base+0xcc>
   1328c:	add	r3, pc, r3
   13290:	str	r3, [sp]
   13294:	mov	r3, #45	; 0x2d
   13298:	ldr	r2, [pc, #92]	; 132fc <mmk_init@@Base+0xd0>
   1329c:	add	r2, pc, r2
   132a0:	ldr	r1, [pc, #88]	; 13300 <mmk_init@@Base+0xd4>
   132a4:	add	r1, pc, r1
   132a8:	bl	112cc <fprintf@plt>
   132ac:	bl	11320 <abort@plt>
   132b0:	ldr	r3, [pc, #76]	; 13304 <mmk_init@@Base+0xd8>
   132b4:	add	r3, pc, r3
   132b8:	ldr	r3, [r3, #4]
   132bc:	mov	r0, r3
   132c0:	bl	14b80 <mmk_init_vital_functions@@Base>
   132c4:	ldr	r3, [pc, #60]	; 13308 <mmk_init@@Base+0xdc>
   132c8:	add	r3, pc, r3
   132cc:	mov	r2, #1
   132d0:	str	r2, [r3]
   132d4:	b	132dc <mmk_init@@Base+0xb0>
   132d8:	nop			; (mov r0, r0)
   132dc:	sub	sp, fp, #8
   132e0:	pop	{r4, fp, pc}
   132e4:			; <UNDEFINED> instruction: 0x00012dbc
   132e8:	andeq	r2, r1, r0, lsl #29
   132ec:	andeq	r2, r1, r4, ror #28
   132f0:	andeq	r2, r1, r8, asr lr
   132f4:	andeq	r0, r0, r4, lsl #1
   132f8:	andeq	r2, r0, r8, lsr #3
   132fc:	andeq	r2, r0, r8, lsr #2
   13300:	andeq	r2, r0, r0, ror r1
   13304:	andeq	r2, r1, r0, lsl lr
   13308:	strdeq	r2, [r1], -ip

0001330c <mmk_plt_ctx@@Base>:
   1330c:	push	{fp, lr}
   13310:	add	fp, sp, #4
   13314:	sub	sp, sp, #8
   13318:	ldr	r2, [pc, #96]	; 13380 <mmk_plt_ctx@@Base+0x74>
   1331c:	add	r2, pc, r2
   13320:	ldr	r3, [pc, #92]	; 13384 <mmk_plt_ctx@@Base+0x78>
   13324:	add	r3, pc, r3
   13328:	ldr	r3, [r3]
   1332c:	cmp	r3, #0
   13330:	bne	13368 <mmk_plt_ctx@@Base+0x5c>
   13334:	ldr	r3, [pc, #76]	; 13388 <mmk_plt_ctx@@Base+0x7c>
   13338:	ldr	r3, [r2, r3]
   1333c:	ldr	r0, [r3]
   13340:	ldr	r3, [pc, #68]	; 1338c <mmk_plt_ctx@@Base+0x80>
   13344:	add	r3, pc, r3
   13348:	str	r3, [sp]
   1334c:	mov	r3, #54	; 0x36
   13350:	ldr	r2, [pc, #56]	; 13390 <mmk_plt_ctx@@Base+0x84>
   13354:	add	r2, pc, r2
   13358:	ldr	r1, [pc, #52]	; 13394 <mmk_plt_ctx@@Base+0x88>
   1335c:	add	r1, pc, r1
   13360:	bl	112cc <fprintf@plt>
   13364:	bl	11320 <abort@plt>
   13368:	ldr	r3, [pc, #40]	; 13398 <mmk_plt_ctx@@Base+0x8c>
   1336c:	add	r3, pc, r3
   13370:	ldr	r3, [r3, #4]
   13374:	mov	r0, r3
   13378:	sub	sp, fp, #4
   1337c:	pop	{fp, pc}
   13380:	ldrdeq	r2, [r1], -ip
   13384:	andeq	r2, r1, r0, lsr #27
   13388:	andeq	r0, r0, r4, lsl #1
   1338c:	andeq	r2, r0, r8, lsl #2
   13390:	andeq	r2, r0, r0, ror r0
   13394:	strheq	r2, [r0], -r8
   13398:	andeq	r2, r1, r8, asr sp

0001339c <mmk_reset@@Base>:
   1339c:	push	{fp, lr}
   133a0:	add	fp, sp, #4
   133a4:	sub	sp, sp, #16
   133a8:	str	r0, [fp, #-16]
   133ac:	ldr	r3, [fp, #-16]
   133b0:	cmp	r3, #0
   133b4:	beq	133dc <mmk_reset@@Base+0x40>
   133b8:	ldr	r0, [fp, #-16]
   133bc:	bl	14234 <mmk_ask_ctx@@Base>
   133c0:	str	r0, [fp, #-8]
   133c4:	ldr	r0, [fp, #-8]
   133c8:	bl	13ebc <mmk_stub_context@@Base>
   133cc:	str	r0, [fp, #-12]
   133d0:	ldr	r0, [fp, #-12]
   133d4:	bl	136f8 <mmk_mock_destroy_internal@@Base>
   133d8:	b	133e0 <mmk_reset@@Base+0x44>
   133dc:	nop			; (mov r0, r0)
   133e0:	sub	sp, fp, #4
   133e4:	pop	{fp, pc}

000133e8 <mmk_matcher_init@@Base>:
   133e8:	push	{r4, r5, r6, lr}
   133ec:	mov	r5, r0
   133f0:	mov	r0, #12
   133f4:	bl	14b20 <mmk_malloc@@Base>
   133f8:	mov	r3, #0
   133fc:	mov	r4, r0
   13400:	ldr	r0, [pc, #28]	; 13424 <mmk_matcher_init@@Base+0x3c>
   13404:	str	r3, [r4, #4]
   13408:	str	r3, [r4, #8]
   1340c:	str	r5, [r4]
   13410:	add	r0, pc, r0
   13414:	bl	11308 <__tls_get_addr@plt>
   13418:	ldr	r3, [pc, #8]	; 13428 <mmk_matcher_init@@Base+0x40>
   1341c:	str	r4, [r3, r0]
   13420:	pop	{r4, r5, r6, pc}
   13424:	andeq	r2, r1, r4, asr ip
   13428:	andeq	r0, r0, r0

0001342c <mmk_matcher_term@@Base>:
   1342c:	ldr	r0, [pc, #24]	; 1344c <mmk_matcher_term@@Base+0x20>
   13430:	push	{r4, lr}
   13434:	add	r0, pc, r0
   13438:	bl	11308 <__tls_get_addr@plt>
   1343c:	ldr	r3, [pc, #12]	; 13450 <mmk_matcher_term@@Base+0x24>
   13440:	mov	r2, #0
   13444:	str	r2, [r0, r3]
   13448:	pop	{r4, pc}
   1344c:	andeq	r2, r1, r0, lsr ip
   13450:	andeq	r0, r0, r0

00013454 <mmk_matcher_ctx@@Base>:
   13454:	ldr	r0, [pc, #20]	; 13470 <mmk_matcher_ctx@@Base+0x1c>
   13458:	push	{r4, lr}
   1345c:	add	r0, pc, r0
   13460:	bl	11308 <__tls_get_addr@plt>
   13464:	ldr	r3, [pc, #8]	; 13474 <mmk_matcher_ctx@@Base+0x20>
   13468:	ldr	r0, [r3, r0]
   1346c:	pop	{r4, pc}
   13470:	andeq	r2, r1, r8, lsl #24
   13474:	andeq	r0, r0, r0

00013478 <mmk_matcher_add@@Base>:
   13478:	push	{r4, r5, r6, lr}
   1347c:	mov	r6, r0
   13480:	mov	r0, #12
   13484:	mov	r5, r1
   13488:	bl	14b20 <mmk_malloc@@Base>
   1348c:	mov	r4, r0
   13490:	ldr	r0, [pc, #84]	; 134ec <mmk_matcher_add@@Base+0x74>
   13494:	add	r0, pc, r0
   13498:	bl	11308 <__tls_get_addr@plt>
   1349c:	ldr	r3, [pc, #76]	; 134f0 <mmk_matcher_add@@Base+0x78>
   134a0:	mov	r2, #0
   134a4:	str	r2, [r4, #8]
   134a8:	str	r6, [r4]
   134ac:	str	r5, [r4, #4]
   134b0:	ldr	r2, [r3, r0]
   134b4:	ldr	r3, [r2, #8]
   134b8:	cmp	r3, #0
   134bc:	beq	134cc <mmk_matcher_add@@Base+0x54>
   134c0:	ldr	r1, [r3, #4]
   134c4:	cmp	r5, r1
   134c8:	bhi	134d8 <mmk_matcher_add@@Base+0x60>
   134cc:	str	r3, [r4, #8]
   134d0:	str	r4, [r2, #8]
   134d4:	pop	{r4, r5, r6, pc}
   134d8:	mov	r2, r3
   134dc:	ldr	r3, [r3, #8]
   134e0:	cmp	r3, #0
   134e4:	bne	134c0 <mmk_matcher_add@@Base+0x48>
   134e8:	b	134cc <mmk_matcher_add@@Base+0x54>
   134ec:	ldrdeq	r2, [r1], -r0
   134f0:	andeq	r0, r0, r0

000134f4 <mmk_matcher_get_predicate@@Base>:
   134f4:	add	r0, r0, #12
   134f8:	bx	lr

000134fc <mmk_mock_create_internal@@Base>:
   134fc:	push	{r4, fp, lr}
   13500:	add	fp, sp, #8
   13504:	sub	sp, sp, #44	; 0x2c
   13508:	str	r0, [fp, #-40]	; 0xffffffd8
   1350c:	str	r1, [fp, #-44]	; 0xffffffd4
   13510:	ldr	r4, [pc, #452]	; 136dc <mmk_mock_create_internal@@Base+0x1e0>
   13514:	add	r4, pc, r4
   13518:	bl	1322c <mmk_init@@Base>
   1351c:	mov	r0, #20
   13520:	bl	14b20 <mmk_malloc@@Base>
   13524:	str	r0, [fp, #-20]	; 0xffffffec
   13528:	ldr	r3, [fp, #-20]	; 0xffffffec
   1352c:	cmp	r3, #0
   13530:	bne	13568 <mmk_mock_create_internal@@Base+0x6c>
   13534:	ldr	r3, [pc, #420]	; 136e0 <mmk_mock_create_internal@@Base+0x1e4>
   13538:	ldr	r3, [r4, r3]
   1353c:	ldr	r0, [r3]
   13540:	ldr	r3, [pc, #412]	; 136e4 <mmk_mock_create_internal@@Base+0x1e8>
   13544:	add	r3, pc, r3
   13548:	str	r3, [sp]
   1354c:	mov	r3, #36	; 0x24
   13550:	ldr	r2, [pc, #400]	; 136e8 <mmk_mock_create_internal@@Base+0x1ec>
   13554:	add	r2, pc, r2
   13558:	ldr	r1, [pc, #396]	; 136ec <mmk_mock_create_internal@@Base+0x1f0>
   1355c:	add	r1, pc, r1
   13560:	bl	112cc <fprintf@plt>
   13564:	bl	11320 <abort@plt>
   13568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1356c:	mov	r2, r3
   13570:	mov	r3, #0
   13574:	str	r3, [r2]
   13578:	str	r3, [r2, #4]
   1357c:	str	r3, [r2, #8]
   13580:	str	r3, [r2, #12]
   13584:	str	r3, [r2, #16]
   13588:	mov	r1, #64	; 0x40
   1358c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13590:	bl	14a20 <mmk_strchr@@Base>
   13594:	str	r0, [fp, #-24]	; 0xffffffe8
   13598:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1359c:	cmp	r3, #0
   135a0:	bne	135b4 <mmk_mock_create_internal@@Base+0xb8>
   135a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   135a8:	bl	14acc <mmk_strlen@@Base>
   135ac:	str	r0, [fp, #-16]
   135b0:	b	135c4 <mmk_mock_create_internal@@Base+0xc8>
   135b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   135b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   135bc:	sub	r3, r2, r3
   135c0:	str	r3, [fp, #-16]
   135c4:	ldr	r3, [fp, #-16]
   135c8:	add	r3, r3, #1
   135cc:	mov	r0, r3
   135d0:	bl	14b20 <mmk_malloc@@Base>
   135d4:	str	r0, [fp, #-28]	; 0xffffffe4
   135d8:	ldr	r2, [fp, #-16]
   135dc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   135e0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   135e4:	bl	14a88 <mmk_strncpy@@Base>
   135e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   135ec:	ldr	r3, [fp, #-16]
   135f0:	add	r3, r2, r3
   135f4:	mov	r2, #0
   135f8:	strb	r2, [r3]
   135fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13600:	cmp	r3, #0
   13604:	beq	13630 <mmk_mock_create_internal@@Base+0x134>
   13608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1360c:	add	r3, r3, #1
   13610:	mov	r2, #4
   13614:	ldr	r1, [pc, #212]	; 136f0 <mmk_mock_create_internal@@Base+0x1f4>
   13618:	add	r1, pc, r1
   1361c:	mov	r0, r3
   13620:	bl	1496c <mmk_strneq@@Base>
   13624:	mov	r3, r0
   13628:	cmp	r3, #0
   1362c:	beq	13638 <mmk_mock_create_internal@@Base+0x13c>
   13630:	mov	r3, #1
   13634:	b	1363c <mmk_mock_create_internal@@Base+0x140>
   13638:	mov	r3, #0
   1363c:	str	r3, [fp, #-32]	; 0xffffffe0
   13640:	ldr	r2, [fp, #-20]	; 0xffffffec
   13644:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13648:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1364c:	bl	14124 <mmk_stub_create@@Base>
   13650:	mov	r2, r0
   13654:	ldr	r3, [fp, #-20]	; 0xffffffec
   13658:	str	r2, [r3, #4]
   1365c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13660:	ldr	r3, [r3, #4]
   13664:	cmp	r3, #0
   13668:	bne	13690 <mmk_mock_create_internal@@Base+0x194>
   1366c:	ldr	r3, [pc, #108]	; 136e0 <mmk_mock_create_internal@@Base+0x1e4>
   13670:	ldr	r3, [r4, r3]
   13674:	ldr	r3, [r3]
   13678:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1367c:	ldr	r1, [pc, #112]	; 136f4 <mmk_mock_create_internal@@Base+0x1f8>
   13680:	add	r1, pc, r1
   13684:	mov	r0, r3
   13688:	bl	112cc <fprintf@plt>
   1368c:	bl	11320 <abort@plt>
   13690:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13694:	cmp	r3, #0
   13698:	bne	136bc <mmk_mock_create_internal@@Base+0x1c0>
   1369c:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a0:	ldr	r4, [r3, #4]
   136a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   136a8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   136ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   136b0:	bl	14124 <mmk_stub_create@@Base>
   136b4:	mov	r3, r0
   136b8:	str	r3, [r4, #36]	; 0x24
   136bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   136c0:	bl	14b60 <mmk_free@@Base>
   136c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136c8:	ldr	r3, [r3, #4]
   136cc:	ldr	r3, [r3, #32]
   136d0:	mov	r0, r3
   136d4:	sub	sp, fp, #8
   136d8:	pop	{r4, fp, pc}
   136dc:	andeq	r2, r1, r4, ror #21
   136e0:	andeq	r0, r0, r4, lsl #1
   136e4:	andeq	r1, r0, ip, lsl #31
   136e8:	andeq	r1, r0, ip, lsl #30
   136ec:	andeq	r1, r0, r4, asr pc
   136f0:			; <UNDEFINED> instruction: 0x00001ebc
   136f4:	andeq	r1, r0, ip, asr lr

000136f8 <mmk_mock_destroy_internal@@Base>:
   136f8:	push	{fp, lr}
   136fc:	add	fp, sp, #4
   13700:	sub	sp, sp, #32
   13704:	str	r0, [fp, #-32]	; 0xffffffe0
   13708:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1370c:	ldr	r3, [r3, #4]
   13710:	str	r3, [fp, #-8]
   13714:	b	13734 <mmk_mock_destroy_internal@@Base+0x3c>
   13718:	ldr	r3, [fp, #-8]
   1371c:	ldr	r3, [r3, #36]	; 0x24
   13720:	str	r3, [fp, #-20]	; 0xffffffec
   13724:	ldr	r0, [fp, #-8]
   13728:	bl	14208 <mmk_stub_destroy@@Base>
   1372c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13730:	str	r3, [fp, #-8]
   13734:	ldr	r3, [fp, #-8]
   13738:	cmp	r3, #0
   1373c:	bne	13718 <mmk_mock_destroy_internal@@Base+0x20>
   13740:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13744:	ldr	r3, [r3, #8]
   13748:	mov	r0, r3
   1374c:	bl	14b60 <mmk_free@@Base>
   13750:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13754:	ldr	r3, [r3]
   13758:	str	r3, [fp, #-12]
   1375c:	b	137b4 <mmk_mock_destroy_internal@@Base+0xbc>
   13760:	ldr	r3, [fp, #-12]
   13764:	ldr	r3, [r3, #4]
   13768:	str	r3, [fp, #-24]	; 0xffffffe8
   1376c:	ldr	r3, [fp, #-12]
   13770:	ldr	r3, [r3]
   13774:	str	r3, [fp, #-16]
   13778:	b	13798 <mmk_mock_destroy_internal@@Base+0xa0>
   1377c:	ldr	r3, [fp, #-16]
   13780:	ldr	r3, [r3, #8]
   13784:	str	r3, [fp, #-28]	; 0xffffffe4
   13788:	ldr	r0, [fp, #-16]
   1378c:	bl	14b60 <mmk_free@@Base>
   13790:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13794:	str	r3, [fp, #-16]
   13798:	ldr	r3, [fp, #-16]
   1379c:	cmp	r3, #0
   137a0:	bne	1377c <mmk_mock_destroy_internal@@Base+0x84>
   137a4:	ldr	r0, [fp, #-12]
   137a8:	bl	14b60 <mmk_free@@Base>
   137ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   137b0:	str	r3, [fp, #-12]
   137b4:	ldr	r3, [fp, #-12]
   137b8:	cmp	r3, #0
   137bc:	bne	13760 <mmk_mock_destroy_internal@@Base+0x68>
   137c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   137c4:	bl	14b60 <mmk_free@@Base>
   137c8:	nop			; (mov r0, r0)
   137cc:	sub	sp, fp, #4
   137d0:	pop	{fp, pc}

000137d4 <mmk_mock_params_begin@@Base>:
   137d4:	push	{fp}		; (str fp, [sp, #-4]!)
   137d8:	add	fp, sp, #0
   137dc:	sub	sp, sp, #12
   137e0:	str	r0, [fp, #-8]
   137e4:	ldr	r3, [fp, #-8]
   137e8:	ldr	r3, [r3, #8]
   137ec:	cmp	r3, #0
   137f0:	beq	13804 <mmk_mock_params_begin@@Base+0x30>
   137f4:	ldr	r3, [fp, #-8]
   137f8:	ldr	r3, [r3, #12]
   137fc:	cmp	r3, #0
   13800:	bne	1380c <mmk_mock_params_begin@@Base+0x38>
   13804:	mov	r3, #0
   13808:	b	13818 <mmk_mock_params_begin@@Base+0x44>
   1380c:	ldr	r3, [fp, #-8]
   13810:	ldr	r3, [r3, #8]
   13814:	add	r3, r3, #4
   13818:	mov	r0, r3
   1381c:	add	sp, fp, #0
   13820:	pop	{fp}		; (ldr fp, [sp], #4)
   13824:	bx	lr

00013828 <mmk_mock_params_next@@Base>:
   13828:	push	{fp}		; (str fp, [sp, #-4]!)
   1382c:	add	fp, sp, #0
   13830:	sub	sp, sp, #20
   13834:	str	r0, [fp, #-16]
   13838:	str	r1, [fp, #-20]	; 0xffffffec
   1383c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13840:	str	r3, [fp, #-8]
   13844:	ldr	r3, [fp, #-8]
   13848:	ldr	r3, [r3, #-4]
   1384c:	str	r3, [fp, #-12]
   13850:	ldr	r3, [fp, #-12]
   13854:	add	r3, r3, #4
   13858:	ldr	r2, [fp, #-8]
   1385c:	add	r3, r2, r3
   13860:	str	r3, [fp, #-8]
   13864:	ldr	r3, [fp, #-16]
   13868:	ldr	r2, [r3, #8]
   1386c:	ldr	r3, [fp, #-16]
   13870:	ldr	r3, [r3, #12]
   13874:	add	r2, r2, r3
   13878:	ldr	r3, [fp, #-8]
   1387c:	cmp	r2, r3
   13880:	bhi	1388c <mmk_mock_params_next@@Base+0x64>
   13884:	mov	r3, #0
   13888:	b	13890 <mmk_mock_params_next@@Base+0x68>
   1388c:	ldr	r3, [fp, #-8]
   13890:	mov	r0, r3
   13894:	add	sp, fp, #0
   13898:	pop	{fp}		; (ldr fp, [sp], #4)
   1389c:	bx	lr

000138a0 <mmk_mock_get_params@@Base>:
   138a0:	push	{fp, lr}
   138a4:	add	fp, sp, #4
   138a8:	sub	sp, sp, #8
   138ac:	bl	142ec <mmk_ctx@@Base>
   138b0:	mov	r3, r0
   138b4:	mov	r0, r3
   138b8:	bl	13ebc <mmk_stub_context@@Base>
   138bc:	str	r0, [fp, #-8]
   138c0:	ldr	r3, [fp, #-8]
   138c4:	ldr	r3, [r3]
   138c8:	mov	r0, r3
   138cc:	sub	sp, fp, #4
   138d0:	pop	{fp, pc}
   138d4:	ldr	ip, [r0, #8]
   138d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138dc:	ldr	lr, [ip]
   138e0:	ldr	r7, [r0]
   138e4:	cmp	lr, #0
   138e8:	beq	13a54 <mmk_mock_get_params@@Base+0x1b4>
   138ec:	cmp	lr, #6
   138f0:	mov	r3, ip
   138f4:	bne	13904 <mmk_mock_get_params@@Base+0x64>
   138f8:	b	13aa4 <mmk_mock_get_params@@Base+0x204>
   138fc:	cmp	r5, #6
   13900:	beq	13aa4 <mmk_mock_get_params@@Base+0x204>
   13904:	ldr	r5, [r3, #8]!
   13908:	cmp	r5, #0
   1390c:	bne	138fc <mmk_mock_get_params@@Base+0x5c>
   13910:	mov	r9, #1
   13914:	cmp	lr, #5
   13918:	mov	r3, ip
   1391c:	bne	1392c <mmk_mock_get_params@@Base+0x8c>
   13920:	b	13a8c <mmk_mock_get_params@@Base+0x1ec>
   13924:	cmp	r6, #5
   13928:	beq	13a8c <mmk_mock_get_params@@Base+0x1ec>
   1392c:	ldr	r6, [r3, #8]!
   13930:	cmp	r6, #0
   13934:	bne	13924 <mmk_mock_get_params@@Base+0x84>
   13938:	mov	r9, #1
   1393c:	cmp	lr, #20
   13940:	mov	r2, ip
   13944:	bne	13954 <mmk_mock_get_params@@Base+0xb4>
   13948:	b	13a80 <mmk_mock_get_params@@Base+0x1e0>
   1394c:	cmp	r3, #20
   13950:	beq	13a80 <mmk_mock_get_params@@Base+0x1e0>
   13954:	ldr	r3, [r2, #8]!
   13958:	cmp	r3, #0
   1395c:	bne	1394c <mmk_mock_get_params@@Base+0xac>
   13960:	mov	r2, r3
   13964:	mov	r8, #2
   13968:	cmp	lr, #23
   1396c:	mov	r0, ip
   13970:	bne	13980 <mmk_mock_get_params@@Base+0xe0>
   13974:	b	13a6c <mmk_mock_get_params@@Base+0x1cc>
   13978:	cmp	r3, #23
   1397c:	beq	13a6c <mmk_mock_get_params@@Base+0x1cc>
   13980:	ldr	r3, [r0, #8]!
   13984:	cmp	r3, #0
   13988:	bne	13978 <mmk_mock_get_params@@Base+0xd8>
   1398c:	mov	r4, r3
   13990:	cmp	lr, #2
   13994:	mov	r3, ip
   13998:	bne	139a8 <mmk_mock_get_params@@Base+0x108>
   1399c:	b	13a64 <mmk_mock_get_params@@Base+0x1c4>
   139a0:	cmp	r0, #2
   139a4:	beq	13a64 <mmk_mock_get_params@@Base+0x1c4>
   139a8:	ldr	r0, [r3, #8]!
   139ac:	cmp	r0, #0
   139b0:	bne	139a0 <mmk_mock_get_params@@Base+0x100>
   139b4:	cmp	lr, r8
   139b8:	bne	139c8 <mmk_mock_get_params@@Base+0x128>
   139bc:	b	13a5c <mmk_mock_get_params@@Base+0x1bc>
   139c0:	cmp	r3, r8
   139c4:	beq	13a5c <mmk_mock_get_params@@Base+0x1bc>
   139c8:	ldr	r3, [ip, #8]!
   139cc:	cmp	r3, #0
   139d0:	bne	139c0 <mmk_mock_get_params@@Base+0x120>
   139d4:	mov	r8, r3
   139d8:	cmp	r9, #0
   139dc:	bne	13a54 <mmk_mock_get_params@@Base+0x1b4>
   139e0:	cmp	r4, #0
   139e4:	cmpne	r2, #0
   139e8:	beq	13a54 <mmk_mock_get_params@@Base+0x1b4>
   139ec:	cmp	r8, #0
   139f0:	cmpne	r0, #0
   139f4:	beq	13a54 <mmk_mock_get_params@@Base+0x1b4>
   139f8:	mov	sl, r1
   139fc:	mov	r1, r8
   13a00:	bl	14e28 <mmk_trampoline_end@@Base+0x4>
   13a04:	subs	fp, r0, #0
   13a08:	bne	13a1c <mmk_mock_get_params@@Base+0x17c>
   13a0c:	b	13a54 <mmk_mock_get_params@@Base+0x1b4>
   13a10:	cmp	r9, fp
   13a14:	add	r4, r4, r8
   13a18:	beq	13a54 <mmk_mock_get_params@@Base+0x1b4>
   13a1c:	ldr	r2, [r4, #4]
   13a20:	mov	r1, sl
   13a24:	add	r9, r9, #1
   13a28:	lsr	r2, r2, #8
   13a2c:	ldr	r0, [r5, r2, lsl #4]
   13a30:	add	r0, r6, r0
   13a34:	bl	11224 <strcmp@plt>
   13a38:	cmp	r0, #0
   13a3c:	bne	13a10 <mmk_mock_get_params@@Base+0x170>
   13a40:	ldr	r9, [r4]
   13a44:	cmp	r9, #0
   13a48:	beq	13a54 <mmk_mock_get_params@@Base+0x1b4>
   13a4c:	add	r0, r7, r9
   13a50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a54:	mov	r0, #0
   13a58:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5c:	ldr	r8, [ip, #4]
   13a60:	b	139d8 <mmk_mock_get_params@@Base+0x138>
   13a64:	ldr	r0, [r3, #4]
   13a68:	b	139b4 <mmk_mock_get_params@@Base+0x114>
   13a6c:	ldr	r3, [r0, #4]
   13a70:	cmp	r7, r3
   13a74:	addhi	r4, r7, r3
   13a78:	bhi	13990 <mmk_mock_get_params@@Base+0xf0>
   13a7c:	b	1398c <mmk_mock_get_params@@Base+0xec>
   13a80:	ldr	r2, [r2, #4]
   13a84:	add	r8, r2, #2
   13a88:	b	13968 <mmk_mock_get_params@@Base+0xc8>
   13a8c:	ldr	r6, [r3, #4]
   13a90:	cmp	r7, r6
   13a94:	bhi	13abc <mmk_mock_get_params@@Base+0x21c>
   13a98:	cmp	r6, #0
   13a9c:	orreq	r9, r9, #1
   13aa0:	b	1393c <mmk_mock_get_params@@Base+0x9c>
   13aa4:	ldr	r5, [r3, #4]
   13aa8:	cmp	r7, r5
   13aac:	bhi	13ac8 <mmk_mock_get_params@@Base+0x228>
   13ab0:	clz	r9, r5
   13ab4:	lsr	r9, r9, #5
   13ab8:	b	13914 <mmk_mock_get_params@@Base+0x74>
   13abc:	adds	r6, r7, r6
   13ac0:	orreq	r9, r9, #1
   13ac4:	b	1393c <mmk_mock_get_params@@Base+0x9c>
   13ac8:	adds	r5, r7, r5
   13acc:	moveq	r9, #1
   13ad0:	movne	r9, #0
   13ad4:	b	13914 <mmk_mock_get_params@@Base+0x74>

00013ad8 <plt_init_ctx@@Base>:
   13ad8:	ldr	r3, [pc, #40]	; 13b08 <plt_init_ctx@@Base+0x30>
   13adc:	ldr	r2, [pc, #40]	; 13b0c <plt_init_ctx@@Base+0x34>
   13ae0:	add	r3, pc, r3
   13ae4:	add	r2, pc, r2
   13ae8:	ldr	r0, [r3]
   13aec:	cmn	r0, #1
   13af0:	bxne	lr
   13af4:	ldr	r1, [pc, #20]	; 13b10 <plt_init_ctx@@Base+0x38>
   13af8:	ldr	r2, [r2, r1]
   13afc:	mov	r0, r2
   13b00:	str	r2, [r3]
   13b04:	bx	lr
   13b08:	ldrdeq	r2, [r1], -r0
   13b0c:	andeq	r2, r1, r4, lsl r5
   13b10:	andeq	r0, r0, r8, lsr #1

00013b14 <plt_get_lib@@Base>:
   13b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b18:	subs	r6, r1, #0
   13b1c:	ldr	r4, [pc, #632]	; 13d9c <plt_get_lib@@Base+0x288>
   13b20:	add	fp, sp, #32
   13b24:	mov	r8, r0
   13b28:	sub	sp, sp, #20
   13b2c:	add	r4, pc, r4
   13b30:	beq	13d40 <plt_get_lib@@Base+0x22c>
   13b34:	ldr	r1, [pc, #612]	; 13da0 <plt_get_lib@@Base+0x28c>
   13b38:	mov	r2, #4
   13b3c:	add	r1, pc, r1
   13b40:	mov	r0, r6
   13b44:	bl	11314 <strncmp@plt>
   13b48:	cmp	r0, #0
   13b4c:	moveq	r5, #1
   13b50:	bne	13cac <plt_get_lib@@Base+0x198>
   13b54:	mov	r1, #58	; 0x3a
   13b58:	mov	r0, r6
   13b5c:	bl	112c0 <strchr@plt>
   13b60:	add	r9, r0, #1
   13b64:	mov	r0, r9
   13b68:	bl	112a8 <strlen@plt>
   13b6c:	ldr	r1, [pc, #560]	; 13da4 <plt_get_lib@@Base+0x290>
   13b70:	add	r1, pc, r1
   13b74:	str	r0, [fp, #-44]	; 0xffffffd4
   13b78:	mov	r0, r9
   13b7c:	bl	11224 <strcmp@plt>
   13b80:	mov	r7, r0
   13b84:	ldr	r4, [r8, #4]
   13b88:	cmp	r4, #0
   13b8c:	beq	13c5c <plt_get_lib@@Base+0x148>
   13b90:	ldr	r2, [pc, #528]	; 13da8 <plt_get_lib@@Base+0x294>
   13b94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13b98:	add	r2, pc, r2
   13b9c:	str	r2, [fp, #-52]	; 0xffffffcc
   13ba0:	ldr	r2, [pc, #516]	; 13dac <plt_get_lib@@Base+0x298>
   13ba4:	add	r3, r3, #15
   13ba8:	ldr	r8, [pc, #512]	; 13db0 <plt_get_lib@@Base+0x29c>
   13bac:	add	r2, pc, r2
   13bb0:	bic	r3, r3, #7
   13bb4:	add	r8, pc, r8
   13bb8:	str	r2, [fp, #-40]	; 0xffffffd8
   13bbc:	str	r3, [fp, #-48]	; 0xffffffd0
   13bc0:	b	13be4 <plt_get_lib@@Base+0xd0>
   13bc4:	ldr	r1, [r4, #4]
   13bc8:	mov	r0, r6
   13bcc:	bl	11224 <strcmp@plt>
   13bd0:	cmp	r0, #0
   13bd4:	beq	13c10 <plt_get_lib@@Base+0xfc>
   13bd8:	ldr	r4, [r4, #12]
   13bdc:	cmp	r4, #0
   13be0:	beq	13c5c <plt_get_lib@@Base+0x148>
   13be4:	cmp	r5, #1
   13be8:	beq	13c1c <plt_get_lib@@Base+0x108>
   13bec:	tst	r5, #1
   13bf0:	beq	13bc4 <plt_get_lib@@Base+0xb0>
   13bf4:	cmp	r5, #3
   13bf8:	bne	13bd8 <plt_get_lib@@Base+0xc4>
   13bfc:	mov	r1, r9
   13c00:	mov	r0, r4
   13c04:	bl	138d4 <mmk_mock_get_params@@Base+0x34>
   13c08:	cmp	r0, #0
   13c0c:	beq	13bd8 <plt_get_lib@@Base+0xc4>
   13c10:	mov	r0, r4
   13c14:	sub	sp, fp, #32
   13c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c1c:	cmp	r7, #0
   13c20:	bne	13c6c <plt_get_lib@@Base+0x158>
   13c24:	ldr	sl, [r4, #4]
   13c28:	mov	r1, r8
   13c2c:	mov	r0, sl
   13c30:	bl	1120c <strstr@plt>
   13c34:	cmp	r0, #0
   13c38:	bne	13c10 <plt_get_lib@@Base+0xfc>
   13c3c:	mov	r0, sl
   13c40:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13c44:	bl	1120c <strstr@plt>
   13c48:	cmp	r0, #0
   13c4c:	bne	13c10 <plt_get_lib@@Base+0xfc>
   13c50:	ldr	r4, [r4, #12]
   13c54:	cmp	r4, #0
   13c58:	bne	13be4 <plt_get_lib@@Base+0xd0>
   13c5c:	mov	r4, #0
   13c60:	mov	r0, r4
   13c64:	sub	sp, fp, #32
   13c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c70:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13c74:	mov	sl, sp
   13c78:	sub	sp, sp, r3
   13c7c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c80:	mov	r3, r9
   13c84:	add	r1, r1, #8
   13c88:	mov	r0, sp
   13c8c:	bl	112e4 <snprintf@plt>
   13c90:	ldr	r0, [r4, #4]
   13c94:	mov	r1, sp
   13c98:	bl	1120c <strstr@plt>
   13c9c:	cmp	r0, #0
   13ca0:	bne	13d5c <plt_get_lib@@Base+0x248>
   13ca4:	mov	sp, sl
   13ca8:	b	13bd8 <plt_get_lib@@Base+0xc4>
   13cac:	ldr	r1, [pc, #256]	; 13db4 <plt_get_lib@@Base+0x2a0>
   13cb0:	mov	r2, #5
   13cb4:	add	r1, pc, r1
   13cb8:	mov	r0, r6
   13cbc:	bl	11314 <strncmp@plt>
   13cc0:	cmp	r0, #0
   13cc4:	moveq	r5, #2
   13cc8:	beq	13b54 <plt_get_lib@@Base+0x40>
   13ccc:	ldr	r1, [pc, #228]	; 13db8 <plt_get_lib@@Base+0x2a4>
   13cd0:	mov	r2, #4
   13cd4:	add	r1, pc, r1
   13cd8:	mov	r0, r6
   13cdc:	bl	11314 <strncmp@plt>
   13ce0:	cmp	r0, #0
   13ce4:	moveq	r5, #3
   13ce8:	beq	13b54 <plt_get_lib@@Base+0x40>
   13cec:	ldr	r1, [pc, #200]	; 13dbc <plt_get_lib@@Base+0x2a8>
   13cf0:	mov	r0, r6
   13cf4:	add	r1, pc, r1
   13cf8:	bl	11224 <strcmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	beq	13d64 <plt_get_lib@@Base+0x250>
   13d04:	mov	r1, #58	; 0x3a
   13d08:	mov	r0, r6
   13d0c:	bl	112c0 <strchr@plt>
   13d10:	ldr	r3, [pc, #168]	; 13dc0 <plt_get_lib@@Base+0x2ac>
   13d14:	subs	r2, r0, #0
   13d18:	beq	13d80 <plt_get_lib@@Base+0x26c>
   13d1c:	ldr	r0, [r4, r3]
   13d20:	ldr	r1, [pc, #156]	; 13dc4 <plt_get_lib@@Base+0x2b0>
   13d24:	sub	r2, r2, r6
   13d28:	add	r2, r2, #1
   13d2c:	mov	r3, r6
   13d30:	add	r1, pc, r1
   13d34:	ldr	r0, [r0]
   13d38:	bl	112cc <fprintf@plt>
   13d3c:	bl	11320 <abort@plt>
   13d40:	mov	r5, r6
   13d44:	str	r6, [fp, #-44]	; 0xffffffd4
   13d48:	ldr	r6, [pc, #120]	; 13dc8 <plt_get_lib@@Base+0x2b4>
   13d4c:	mvn	r7, #0
   13d50:	add	r6, pc, r6
   13d54:	mov	r9, r6
   13d58:	b	13b84 <plt_get_lib@@Base+0x70>
   13d5c:	mov	sp, sl
   13d60:	b	13c10 <plt_get_lib@@Base+0xfc>
   13d64:	ldr	r6, [pc, #96]	; 13dcc <plt_get_lib@@Base+0x2b8>
   13d68:	str	r0, [fp, #-44]	; 0xffffffd4
   13d6c:	add	r6, pc, r6
   13d70:	mov	r5, r0
   13d74:	mov	r9, r6
   13d78:	mvn	r7, #0
   13d7c:	b	13b84 <plt_get_lib@@Base+0x70>
   13d80:	ldr	r3, [r4, r3]
   13d84:	ldr	r1, [pc, #68]	; 13dd0 <plt_get_lib@@Base+0x2bc>
   13d88:	mov	r2, r6
   13d8c:	add	r1, pc, r1
   13d90:	ldr	r0, [r3]
   13d94:	bl	112cc <fprintf@plt>
   13d98:	b	13d3c <plt_get_lib@@Base+0x228>
   13d9c:	andeq	r2, r1, ip, asr #9
   13da0:	ldrdeq	r1, [r0], -r4
   13da4:	andeq	r1, r0, ip, lsr #20
   13da8:	strdeq	r1, [r0], -r8
   13dac:	ldrdeq	r1, [r0], -r8
   13db0:	andeq	r1, r0, r4, asr #19
   13db4:	andeq	r1, r0, r4, ror #16
   13db8:	andeq	r1, r0, ip, asr #16
   13dbc:	andeq	r1, r0, r4, lsr r8
   13dc0:	andeq	r0, r0, r4, lsl #1
   13dc4:	andeq	r1, r0, r0, lsl #16
   13dc8:	andeq	r1, r0, r4, asr #17
   13dcc:	andeq	r1, r0, r8, lsr #17
   13dd0:	andeq	r1, r0, r8, asr #15

00013dd4 <plt_get_offsets@@Base>:
   13dd4:	push	{r4, r5, r6, lr}
   13dd8:	mov	r5, r2
   13ddc:	bl	138d4 <mmk_mock_get_params@@Base+0x34>
   13de0:	subs	r4, r0, #0
   13de4:	beq	13e08 <plt_get_offsets@@Base+0x34>
   13de8:	mov	r0, #8
   13dec:	bl	14b20 <mmk_malloc@@Base>
   13df0:	mov	r2, #1
   13df4:	mov	r3, #0
   13df8:	str	r2, [r5]
   13dfc:	str	r4, [r0]
   13e00:	str	r3, [r0, #4]
   13e04:	pop	{r4, r5, r6, pc}
   13e08:	mov	r0, r4
   13e0c:	pop	{r4, r5, r6, pc}

00013e10 <plt_set_offsets@@Base>:
   13e10:	cmp	r1, #0
   13e14:	bxeq	lr
   13e18:	add	r1, r0, r1, lsl #3
   13e1c:	add	r3, r0, #4
   13e20:	push	{lr}		; (str lr, [sp, #-4]!)
   13e24:	add	r0, r0, #8
   13e28:	ldr	ip, [r0, #-4]
   13e2c:	add	r3, r3, #8
   13e30:	cmp	ip, #0
   13e34:	ldr	ip, [r3, #-12]
   13e38:	ldreq	lr, [ip]
   13e3c:	streq	lr, [r0, #-4]
   13e40:	cmp	r0, r1
   13e44:	str	r2, [ip]
   13e48:	bne	13e24 <plt_set_offsets@@Base+0x14>
   13e4c:	pop	{pc}		; (ldr pc, [sp], #4)

00013e50 <plt_reset_offsets@@Base>:
   13e50:	cmp	r1, #0
   13e54:	bxeq	lr
   13e58:	add	r1, r0, r1, lsl #3
   13e5c:	ldr	r2, [r0, #4]
   13e60:	ldr	r3, [r0], #8
   13e64:	cmp	r0, r1
   13e68:	str	r2, [r3]
   13e6c:	bne	13e5c <plt_reset_offsets@@Base+0xc>
   13e70:	bx	lr

00013e74 <plt_get_real_fn@@Base>:
   13e74:	push	{r4, r5, r6, lr}
   13e78:	ldr	r4, [r0, #4]
   13e7c:	cmp	r4, #0
   13e80:	beq	13eb4 <plt_get_real_fn@@Base+0x40>
   13e84:	mov	r5, r1
   13e88:	b	13e98 <plt_get_real_fn@@Base+0x24>
   13e8c:	ldr	r4, [r4, #12]
   13e90:	cmp	r4, #0
   13e94:	beq	13eb4 <plt_get_real_fn@@Base+0x40>
   13e98:	mov	r1, r5
   13e9c:	mov	r0, r4
   13ea0:	bl	138d4 <mmk_mock_get_params@@Base+0x34>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13e8c <plt_get_real_fn@@Base+0x18>
   13eac:	ldr	r0, [r0]
   13eb0:	pop	{r4, r5, r6, pc}
   13eb4:	mov	r0, r4
   13eb8:	pop	{r4, r5, r6, pc}

00013ebc <mmk_stub_context@@Base>:
   13ebc:	push	{fp}		; (str fp, [sp, #-4]!)
   13ec0:	add	fp, sp, #0
   13ec4:	sub	sp, sp, #12
   13ec8:	str	r0, [fp, #-8]
   13ecc:	ldr	r3, [fp, #-8]
   13ed0:	cmp	r3, #0
   13ed4:	bne	13ee0 <mmk_stub_context@@Base+0x24>
   13ed8:	mov	r3, #0
   13edc:	b	13ee8 <mmk_stub_context@@Base+0x2c>
   13ee0:	ldr	r3, [fp, #-8]
   13ee4:	ldr	r3, [r3, #12]
   13ee8:	mov	r0, r3
   13eec:	add	sp, fp, #0
   13ef0:	pop	{fp}		; (ldr fp, [sp], #4)
   13ef4:	bx	lr

00013ef8 <mmk_stub_create_static@@Base>:
   13ef8:	push	{r4, r5, fp, lr}
   13efc:	add	fp, sp, #12
   13f00:	sub	sp, sp, #40	; 0x28
   13f04:	str	r0, [fp, #-40]	; 0xffffffd8
   13f08:	str	r1, [fp, #-44]	; 0xffffffd4
   13f0c:	str	r2, [fp, #-48]	; 0xffffffd0
   13f10:	str	r3, [fp, #-52]	; 0xffffffcc
   13f14:	ldr	r4, [pc, #488]	; 14104 <mmk_stub_create_static@@Base+0x20c>
   13f18:	add	r4, pc, r4
   13f1c:	ldr	r3, [pc, #484]	; 14108 <mmk_stub_create_static@@Base+0x210>
   13f20:	add	r3, pc, r3
   13f24:	mov	r0, r3
   13f28:	bl	11308 <__tls_get_addr@plt>
   13f2c:	mov	r1, r0
   13f30:	ldr	r3, [pc, #468]	; 1410c <mmk_stub_create_static@@Base+0x214>
   13f34:	mov	r2, #0
   13f38:	str	r2, [r1, r3]
   13f3c:	ldr	r3, [pc, #460]	; 14110 <mmk_stub_create_static@@Base+0x218>
   13f40:	add	r3, pc, r3
   13f44:	mov	r0, r3
   13f48:	bl	11308 <__tls_get_addr@plt>
   13f4c:	mov	r1, r0
   13f50:	ldr	r3, [pc, #444]	; 14114 <mmk_stub_create_static@@Base+0x21c>
   13f54:	mov	r2, #0
   13f58:	str	r2, [r1, r3]
   13f5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f60:	bl	14acc <mmk_strlen@@Base>
   13f64:	mov	r3, r0
   13f68:	add	r3, r3, #1
   13f6c:	mov	r0, r3
   13f70:	bl	14b20 <mmk_malloc@@Base>
   13f74:	str	r0, [fp, #-20]	; 0xffffffec
   13f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f7c:	cmp	r3, #0
   13f80:	bne	13f8c <mmk_stub_create_static@@Base+0x94>
   13f84:	mvn	r3, #11
   13f88:	b	140f8 <mmk_stub_create_static@@Base+0x200>
   13f8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13f90:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f94:	bl	14a60 <mmk_strcpy@@Base>
   13f98:	mov	r3, #0
   13f9c:	str	r3, [fp, #-16]
   13fa0:	mov	r1, #64	; 0x40
   13fa4:	ldr	r0, [fp, #-20]	; 0xffffffec
   13fa8:	bl	14a20 <mmk_strchr@@Base>
   13fac:	str	r0, [fp, #-24]	; 0xffffffe8
   13fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fb4:	cmp	r3, #0
   13fb8:	beq	13fd4 <mmk_stub_create_static@@Base+0xdc>
   13fbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fc0:	mov	r2, #0
   13fc4:	strb	r2, [r3]
   13fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fcc:	add	r3, r3, #1
   13fd0:	str	r3, [fp, #-16]
   13fd4:	bl	1330c <mmk_plt_ctx@@Base>
   13fd8:	mov	r3, r0
   13fdc:	ldr	r1, [fp, #-16]
   13fe0:	mov	r0, r3
   13fe4:	bl	13b14 <plt_get_lib@@Base>
   13fe8:	str	r0, [fp, #-28]	; 0xffffffe4
   13fec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13ff0:	cmp	r3, #0
   13ff4:	bne	14000 <mmk_stub_create_static@@Base+0x108>
   13ff8:	mvn	r3, #1
   13ffc:	b	140f8 <mmk_stub_create_static@@Base+0x200>
   14000:	mov	r3, #0
   14004:	str	r3, [fp, #-36]	; 0xffffffdc
   14008:	sub	r3, fp, #36	; 0x24
   1400c:	mov	r2, r3
   14010:	ldr	r1, [fp, #-20]	; 0xffffffec
   14014:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14018:	bl	13dd4 <plt_get_offsets@@Base>
   1401c:	str	r0, [fp, #-32]	; 0xffffffe0
   14020:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14024:	cmp	r3, #0
   14028:	beq	14038 <mmk_stub_create_static@@Base+0x140>
   1402c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14030:	cmp	r3, #0
   14034:	bne	14040 <mmk_stub_create_static@@Base+0x148>
   14038:	mvn	r3, #1
   1403c:	b	140f8 <mmk_stub_create_static@@Base+0x200>
   14040:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14044:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14048:	mov	r0, r3
   1404c:	mov	r3, #40	; 0x28
   14050:	mov	r2, r3
   14054:	mov	r1, #0
   14058:	bl	112f0 <memset@plt>
   1405c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14060:	ldr	r2, [pc, #176]	; 14118 <mmk_stub_create_static@@Base+0x220>
   14064:	ldr	r2, [r4, r2]
   14068:	str	r2, [r3]
   1406c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14070:	ldr	r2, [pc, #164]	; 1411c <mmk_stub_create_static@@Base+0x224>
   14074:	ldr	r2, [r4, r2]
   14078:	str	r2, [r3, #4]
   1407c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14080:	ldr	r2, [pc, #152]	; 14120 <mmk_stub_create_static@@Base+0x228>
   14084:	ldr	r2, [r4, r2]
   14088:	str	r2, [r3, #8]
   1408c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14090:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14094:	str	r2, [r3, #12]
   14098:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1409c:	ldr	r2, [fp, #-20]	; 0xffffffec
   140a0:	str	r2, [r3, #16]
   140a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140a8:	ldr	r2, [fp, #-16]
   140ac:	str	r2, [r3, #20]
   140b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140b8:	str	r2, [r3, #24]
   140bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140c0:	str	r5, [r3, #28]
   140c4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   140c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   140cc:	bl	14364 <create_trampoline@@Base>
   140d0:	mov	r2, r0
   140d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140d8:	str	r2, [r3, #32]
   140dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   140e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140e4:	ldr	r3, [r3, #32]
   140e8:	mov	r2, r3
   140ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140f0:	bl	13e10 <plt_set_offsets@@Base>
   140f4:	mov	r3, #0
   140f8:	mov	r0, r3
   140fc:	sub	sp, fp, #12
   14100:	pop	{r4, r5, fp, pc}
   14104:	andeq	r2, r1, r0, ror #1
   14108:	andeq	r2, r1, r4, asr #2
   1410c:	andeq	r0, r0, r4
   14110:	andeq	r2, r1, r4, lsr #2
   14114:	andeq	r0, r0, r8
   14118:	andeq	r0, r0, ip, lsr #1
   1411c:	muleq	r0, r0, r0
   14120:	muleq	r0, ip, r0

00014124 <mmk_stub_create@@Base>:
   14124:	push	{fp, lr}
   14128:	add	fp, sp, #4
   1412c:	sub	sp, sp, #24
   14130:	str	r0, [fp, #-16]
   14134:	str	r1, [fp, #-20]	; 0xffffffec
   14138:	str	r2, [fp, #-24]	; 0xffffffe8
   1413c:	bl	1322c <mmk_init@@Base>
   14140:	mov	r0, #40	; 0x28
   14144:	bl	14b20 <mmk_malloc@@Base>
   14148:	str	r0, [fp, #-8]
   1414c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14150:	ldr	r2, [fp, #-20]	; 0xffffffec
   14154:	ldr	r1, [fp, #-16]
   14158:	ldr	r0, [fp, #-8]
   1415c:	bl	13ef8 <mmk_stub_create_static@@Base>
   14160:	str	r0, [fp, #-12]
   14164:	ldr	r3, [fp, #-12]
   14168:	cmp	r3, #0
   1416c:	bge	14190 <mmk_stub_create@@Base+0x6c>
   14170:	ldr	r0, [fp, #-8]
   14174:	bl	14b60 <mmk_free@@Base>
   14178:	bl	112d8 <__errno_location@plt>
   1417c:	mov	r2, r0
   14180:	ldr	r3, [fp, #-12]
   14184:	str	r3, [r2]
   14188:	mov	r3, #0
   1418c:	str	r3, [fp, #-8]
   14190:	ldr	r3, [fp, #-8]
   14194:	mov	r0, r3
   14198:	sub	sp, fp, #4
   1419c:	pop	{fp, pc}

000141a0 <mmk_stub_destroy_static@@Base>:
   141a0:	push	{fp, lr}
   141a4:	add	fp, sp, #4
   141a8:	sub	sp, sp, #8
   141ac:	str	r0, [fp, #-8]
   141b0:	ldr	r3, [fp, #-8]
   141b4:	ldr	r2, [r3, #24]
   141b8:	ldr	r3, [fp, #-8]
   141bc:	ldr	r3, [r3, #28]
   141c0:	mov	r1, r3
   141c4:	mov	r0, r2
   141c8:	bl	13e50 <plt_reset_offsets@@Base>
   141cc:	ldr	r3, [fp, #-8]
   141d0:	ldr	r3, [r3, #24]
   141d4:	mov	r0, r3
   141d8:	bl	14b60 <mmk_free@@Base>
   141dc:	ldr	r3, [fp, #-8]
   141e0:	ldr	r3, [r3, #32]
   141e4:	mov	r0, r3
   141e8:	bl	14488 <destroy_trampoline@@Base>
   141ec:	ldr	r3, [fp, #-8]
   141f0:	ldr	r3, [r3, #16]
   141f4:	mov	r0, r3
   141f8:	bl	14b60 <mmk_free@@Base>
   141fc:	nop			; (mov r0, r0)
   14200:	sub	sp, fp, #4
   14204:	pop	{fp, pc}

00014208 <mmk_stub_destroy@@Base>:
   14208:	push	{fp, lr}
   1420c:	add	fp, sp, #4
   14210:	sub	sp, sp, #8
   14214:	str	r0, [fp, #-8]
   14218:	ldr	r0, [fp, #-8]
   1421c:	bl	141a0 <mmk_stub_destroy_static@@Base>
   14220:	ldr	r0, [fp, #-8]
   14224:	bl	14b60 <mmk_free@@Base>
   14228:	nop			; (mov r0, r0)
   1422c:	sub	sp, fp, #4
   14230:	pop	{fp, pc}

00014234 <mmk_ask_ctx@@Base>:
   14234:	push	{fp, lr}
   14238:	add	fp, sp, #4
   1423c:	sub	sp, sp, #8
   14240:	str	r0, [fp, #-8]
   14244:	ldr	r3, [pc, #48]	; 1427c <mmk_ask_ctx@@Base+0x48>
   14248:	add	r3, pc, r3
   1424c:	mov	r0, r3
   14250:	bl	11308 <__tls_get_addr@plt>
   14254:	mov	r1, r0
   14258:	ldr	r3, [pc, #32]	; 14280 <mmk_ask_ctx@@Base+0x4c>
   1425c:	mov	r2, #1
   14260:	str	r2, [r1, r3]
   14264:	ldr	r3, [fp, #-8]
   14268:	blx	r3
   1426c:	mov	r3, r0
   14270:	mov	r0, r3
   14274:	sub	sp, fp, #4
   14278:	pop	{fp, pc}
   1427c:	andeq	r1, r1, ip, lsl lr
   14280:	andeq	r0, r0, r4

00014284 <mmk_ctx_asked@@Base>:
   14284:	push	{fp, lr}
   14288:	add	fp, sp, #4
   1428c:	sub	sp, sp, #8
   14290:	ldr	r3, [pc, #72]	; 142e0 <mmk_ctx_asked@@Base+0x5c>
   14294:	add	r3, pc, r3
   14298:	mov	r0, r3
   1429c:	bl	11308 <__tls_get_addr@plt>
   142a0:	mov	r2, r0
   142a4:	ldr	r3, [pc, #56]	; 142e4 <mmk_ctx_asked@@Base+0x60>
   142a8:	ldr	r3, [r2, r3]
   142ac:	str	r3, [fp, #-8]
   142b0:	ldr	r3, [pc, #48]	; 142e8 <mmk_ctx_asked@@Base+0x64>
   142b4:	add	r3, pc, r3
   142b8:	mov	r0, r3
   142bc:	bl	11308 <__tls_get_addr@plt>
   142c0:	mov	r1, r0
   142c4:	ldr	r3, [pc, #24]	; 142e4 <mmk_ctx_asked@@Base+0x60>
   142c8:	mov	r2, #0
   142cc:	str	r2, [r1, r3]
   142d0:	ldr	r3, [fp, #-8]
   142d4:	mov	r0, r3
   142d8:	sub	sp, fp, #4
   142dc:	pop	{fp, pc}
   142e0:	ldrdeq	r1, [r1], -r0
   142e4:	andeq	r0, r0, r4
   142e8:			; <UNDEFINED> instruction: 0x00011db0

000142ec <mmk_ctx@@Base>:
   142ec:	push	{fp, lr}
   142f0:	add	fp, sp, #4
   142f4:	ldr	r3, [pc, #28]	; 14318 <mmk_ctx@@Base+0x2c>
   142f8:	add	r3, pc, r3
   142fc:	mov	r0, r3
   14300:	bl	11308 <__tls_get_addr@plt>
   14304:	mov	r2, r0
   14308:	ldr	r3, [pc, #12]	; 1431c <mmk_ctx@@Base+0x30>
   1430c:	ldr	r3, [r2, r3]
   14310:	mov	r0, r3
   14314:	pop	{fp, pc}
   14318:	andeq	r1, r1, ip, ror #26
   1431c:	andeq	r0, r0, r8

00014320 <mmk_set_ctx@@Base>:
   14320:	push	{fp, lr}
   14324:	add	fp, sp, #4
   14328:	sub	sp, sp, #8
   1432c:	str	r0, [fp, #-8]
   14330:	ldr	r3, [pc, #36]	; 1435c <mmk_set_ctx@@Base+0x3c>
   14334:	add	r3, pc, r3
   14338:	mov	r0, r3
   1433c:	bl	11308 <__tls_get_addr@plt>
   14340:	mov	r1, r0
   14344:	ldr	r2, [pc, #20]	; 14360 <mmk_set_ctx@@Base+0x40>
   14348:	ldr	r3, [fp, #-8]
   1434c:	str	r3, [r1, r2]
   14350:	nop			; (mov r0, r0)
   14354:	sub	sp, fp, #4
   14358:	pop	{fp, pc}
   1435c:	andeq	r1, r1, r0, lsr sp
   14360:	andeq	r0, r0, r8

00014364 <create_trampoline@@Base>:
   14364:	push	{r4, r5, r6, r7, r8, r9, lr}
   14368:	sub	sp, sp, #12
   1436c:	ldr	r6, [pc, #236]	; 14460 <create_trampoline@@Base+0xfc>
   14370:	ldr	r2, [pc, #236]	; 14464 <create_trampoline@@Base+0x100>
   14374:	ldr	r3, [pc, #236]	; 14468 <create_trampoline@@Base+0x104>
   14378:	add	r6, pc, r6
   1437c:	ldr	r5, [r6, r2]
   14380:	ldr	r8, [r6, r3]
   14384:	sub	r5, r5, r8
   14388:	cmp	r5, #4096	; 0x1000
   1438c:	bcs	143f8 <create_trampoline@@Base+0x94>
   14390:	mvn	r3, #0
   14394:	mov	r7, r0
   14398:	mov	r0, #0
   1439c:	str	r3, [sp]
   143a0:	mov	r9, r1
   143a4:	str	r0, [sp, #4]
   143a8:	mov	r3, #34	; 0x22
   143ac:	mov	r2, #7
   143b0:	mov	r1, #4096	; 0x1000
   143b4:	bl	112b4 <mmap@plt>
   143b8:	cmn	r0, #1
   143bc:	mov	r4, r0
   143c0:	beq	1442c <create_trampoline@@Base+0xc8>
   143c4:	add	r6, r0, #8
   143c8:	stm	r0, {r7, r9}
   143cc:	mov	r2, r5
   143d0:	mov	r1, r8
   143d4:	mov	r0, r6
   143d8:	bl	11248 <memcpy@plt>
   143dc:	mov	r0, r4
   143e0:	mov	r2, #5
   143e4:	mov	r1, #4096	; 0x1000
   143e8:	bl	11230 <mprotect@plt>
   143ec:	mov	r0, r6
   143f0:	add	sp, sp, #12
   143f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   143f8:	ldr	r2, [pc, #108]	; 1446c <create_trampoline@@Base+0x108>
   143fc:	ldr	r1, [pc, #108]	; 14470 <create_trampoline@@Base+0x10c>
   14400:	mov	r3, #45	; 0x2d
   14404:	ldr	r0, [r6, r2]
   14408:	add	r1, pc, r1
   1440c:	str	r1, [sp]
   14410:	ldr	r2, [pc, #92]	; 14474 <create_trampoline@@Base+0x110>
   14414:	ldr	r1, [pc, #92]	; 14478 <create_trampoline@@Base+0x114>
   14418:	add	r2, pc, r2
   1441c:	add	r1, pc, r1
   14420:	ldr	r0, [r0]
   14424:	bl	112cc <fprintf@plt>
   14428:	bl	11320 <abort@plt>
   1442c:	ldr	r2, [pc, #56]	; 1446c <create_trampoline@@Base+0x108>
   14430:	ldr	r1, [pc, #68]	; 1447c <create_trampoline@@Base+0x118>
   14434:	mov	r3, #69	; 0x45
   14438:	ldr	r0, [r6, r2]
   1443c:	add	r1, pc, r1
   14440:	str	r1, [sp]
   14444:	ldr	r2, [pc, #52]	; 14480 <create_trampoline@@Base+0x11c>
   14448:	ldr	r1, [pc, #52]	; 14484 <create_trampoline@@Base+0x120>
   1444c:	add	r2, pc, r2
   14450:	add	r1, pc, r1
   14454:	ldr	r0, [r0]
   14458:	bl	112cc <fprintf@plt>
   1445c:	bl	11320 <abort@plt>
   14460:	andeq	r1, r1, r0, lsl #25
   14464:	andeq	r0, r0, r8, ror r0
   14468:	andeq	r0, r0, ip, lsl #1
   1446c:	andeq	r0, r0, r4, lsl #1
   14470:	andeq	r1, r0, r0, lsl r2
   14474:	andeq	r1, r0, r8, lsl #3
   14478:	ldrdeq	r1, [r0], -ip
   1447c:	strdeq	r1, [r0], -r8
   14480:	andeq	r1, r0, r4, asr r1
   14484:	andeq	r1, r0, r8, lsr #3

00014488 <destroy_trampoline@@Base>:
   14488:	sub	r0, r0, #8
   1448c:	mov	r1, #4096	; 0x1000
   14490:	b	112fc <munmap@plt>

00014494 <mmk_verify_set_times@@Base>:
   14494:	push	{fp, lr}
   14498:	add	fp, sp, #4
   1449c:	sub	sp, sp, #8
   144a0:	str	r0, [fp, #-8]
   144a4:	ldr	r3, [pc, #36]	; 144d0 <mmk_verify_set_times@@Base+0x3c>
   144a8:	add	r3, pc, r3
   144ac:	mov	r0, r3
   144b0:	bl	11308 <__tls_get_addr@plt>
   144b4:	mov	r1, r0
   144b8:	ldr	r2, [pc, #20]	; 144d4 <mmk_verify_set_times@@Base+0x40>
   144bc:	ldr	r3, [fp, #-8]
   144c0:	str	r3, [r1, r2]
   144c4:	nop			; (mov r0, r0)
   144c8:	sub	sp, fp, #4
   144cc:	pop	{fp, pc}
   144d0:			; <UNDEFINED> instruction: 0x00011bbc
   144d4:	andeq	r0, r0, ip

000144d8 <mmk_verify_times@@Base>:
   144d8:	push	{fp, lr}
   144dc:	add	fp, sp, #4
   144e0:	sub	sp, sp, #16
   144e4:	str	r0, [fp, #-16]
   144e8:	ldr	r3, [pc, #264]	; 145f8 <mmk_verify_times@@Base+0x120>
   144ec:	add	r3, pc, r3
   144f0:	mov	r0, r3
   144f4:	bl	11308 <__tls_get_addr@plt>
   144f8:	mov	r2, r0
   144fc:	ldr	r3, [pc, #248]	; 145fc <mmk_verify_times@@Base+0x124>
   14500:	ldr	r3, [r2, r3]
   14504:	str	r3, [fp, #-8]
   14508:	ldr	r3, [fp, #-16]
   1450c:	ldr	r3, [r3, #4]
   14510:	cmp	r3, #0
   14514:	beq	14530 <mmk_verify_times@@Base+0x58>
   14518:	ldr	r3, [fp, #-8]
   1451c:	cmp	r3, #0
   14520:	moveq	r3, #1
   14524:	movne	r3, #0
   14528:	uxtb	r3, r3
   1452c:	b	145ec <mmk_verify_times@@Base+0x114>
   14530:	ldr	r3, [fp, #-16]
   14534:	ldr	r3, [r3, #8]
   14538:	cmp	r3, #0
   1453c:	bne	14550 <mmk_verify_times@@Base+0x78>
   14540:	ldr	r3, [fp, #-16]
   14544:	ldr	r3, [r3, #12]
   14548:	cmp	r3, #0
   1454c:	beq	145a8 <mmk_verify_times@@Base+0xd0>
   14550:	ldr	r3, [fp, #-16]
   14554:	ldr	r3, [r3, #12]
   14558:	cmp	r3, #0
   1455c:	beq	1456c <mmk_verify_times@@Base+0x94>
   14560:	ldr	r3, [fp, #-16]
   14564:	ldr	r3, [r3, #12]
   14568:	b	14570 <mmk_verify_times@@Base+0x98>
   1456c:	ldr	r3, [fp, #-8]
   14570:	str	r3, [fp, #-12]
   14574:	ldr	r3, [fp, #-16]
   14578:	ldr	r2, [r3, #8]
   1457c:	ldr	r3, [fp, #-8]
   14580:	cmp	r2, r3
   14584:	bhi	145a0 <mmk_verify_times@@Base+0xc8>
   14588:	ldr	r2, [fp, #-8]
   1458c:	ldr	r3, [fp, #-12]
   14590:	cmp	r2, r3
   14594:	bhi	145a0 <mmk_verify_times@@Base+0xc8>
   14598:	mov	r3, #1
   1459c:	b	145ec <mmk_verify_times@@Base+0x114>
   145a0:	mov	r3, #0
   145a4:	b	145ec <mmk_verify_times@@Base+0x114>
   145a8:	ldr	r3, [fp, #-16]
   145ac:	ldr	r3, [r3, #20]
   145b0:	cmp	r3, #0
   145b4:	beq	145d0 <mmk_verify_times@@Base+0xf8>
   145b8:	ldr	r3, [fp, #-16]
   145bc:	ldr	r3, [r3, #20]
   145c0:	ldr	r0, [fp, #-8]
   145c4:	blx	r3
   145c8:	mov	r3, r0
   145cc:	b	145ec <mmk_verify_times@@Base+0x114>
   145d0:	ldr	r3, [fp, #-16]
   145d4:	ldr	r2, [r3, #16]
   145d8:	ldr	r3, [fp, #-8]
   145dc:	cmp	r2, r3
   145e0:	moveq	r3, #1
   145e4:	movne	r3, #0
   145e8:	uxtb	r3, r3
   145ec:	mov	r0, r3
   145f0:	sub	sp, fp, #4
   145f4:	pop	{fp, pc}
   145f8:	andeq	r1, r1, r8, ror fp
   145fc:	andeq	r0, r0, ip
   14600:	push	{fp, lr}
   14604:	add	fp, sp, #4
   14608:	sub	sp, sp, #32
   1460c:	str	r0, [fp, #-24]	; 0xffffffe8
   14610:	str	r1, [fp, #-28]	; 0xffffffe4
   14614:	str	r2, [fp, #-32]	; 0xffffffe0
   14618:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1461c:	add	r3, r3, #4
   14620:	str	r3, [fp, #-28]	; 0xffffffe4
   14624:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14628:	sub	r3, r3, #4
   1462c:	str	r3, [fp, #-32]	; 0xffffffe0
   14630:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14634:	bl	137d4 <mmk_mock_params_begin@@Base>
   14638:	str	r0, [fp, #-8]
   1463c:	b	1469c <mmk_verify_times@@Base+0x1c4>
   14640:	ldr	r3, [fp, #-8]
   14644:	add	r3, r3, #4
   14648:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1464c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14650:	mov	r0, r3
   14654:	bl	148f0 <mmk_memcmp@@Base>
   14658:	str	r0, [fp, #-12]
   1465c:	ldr	r3, [fp, #-12]
   14660:	cmp	r3, #0
   14664:	bne	1468c <mmk_verify_times@@Base+0x1b4>
   14668:	ldr	r3, [fp, #-8]
   1466c:	str	r3, [fp, #-16]
   14670:	ldr	r3, [fp, #-16]
   14674:	ldr	r3, [r3]
   14678:	add	r2, r3, #1
   1467c:	ldr	r3, [fp, #-16]
   14680:	str	r2, [r3]
   14684:	mov	r3, #1
   14688:	b	146ac <mmk_verify_times@@Base+0x1d4>
   1468c:	ldr	r1, [fp, #-8]
   14690:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14694:	bl	13828 <mmk_mock_params_next@@Base>
   14698:	str	r0, [fp, #-8]
   1469c:	ldr	r3, [fp, #-8]
   146a0:	cmp	r3, #0
   146a4:	bne	14640 <mmk_verify_times@@Base+0x168>
   146a8:	mov	r3, #0
   146ac:	mov	r0, r3
   146b0:	sub	sp, fp, #4
   146b4:	pop	{fp, pc}

000146b8 <mmk_verify_register_call@@Base>:
   146b8:	push	{r4, fp, lr}
   146bc:	add	fp, sp, #8
   146c0:	sub	sp, sp, #28
   146c4:	str	r0, [fp, #-24]	; 0xffffffe8
   146c8:	str	r1, [fp, #-28]	; 0xffffffe4
   146cc:	ldr	r4, [pc, #508]	; 148d0 <mmk_verify_register_call@@Base+0x218>
   146d0:	add	r4, pc, r4
   146d4:	bl	142ec <mmk_ctx@@Base>
   146d8:	mov	r3, r0
   146dc:	mov	r0, r3
   146e0:	bl	13ebc <mmk_stub_context@@Base>
   146e4:	str	r0, [fp, #-16]
   146e8:	ldr	r3, [fp, #-16]
   146ec:	ldr	r3, [r3, #8]
   146f0:	cmp	r3, #0
   146f4:	bne	1475c <mmk_verify_register_call@@Base+0xa4>
   146f8:	mov	r0, #4096	; 0x1000
   146fc:	bl	14b20 <mmk_malloc@@Base>
   14700:	mov	r2, r0
   14704:	ldr	r3, [fp, #-16]
   14708:	str	r2, [r3, #8]
   1470c:	ldr	r3, [fp, #-16]
   14710:	ldr	r3, [r3, #8]
   14714:	cmp	r3, #0
   14718:	bne	14750 <mmk_verify_register_call@@Base+0x98>
   1471c:	ldr	r3, [pc, #432]	; 148d4 <mmk_verify_register_call@@Base+0x21c>
   14720:	ldr	r3, [r4, r3]
   14724:	ldr	r0, [r3]
   14728:	ldr	r3, [pc, #424]	; 148d8 <mmk_verify_register_call@@Base+0x220>
   1472c:	add	r3, pc, r3
   14730:	str	r3, [sp]
   14734:	mov	r3, #79	; 0x4f
   14738:	ldr	r2, [pc, #412]	; 148dc <mmk_verify_register_call@@Base+0x224>
   1473c:	add	r2, pc, r2
   14740:	ldr	r1, [pc, #408]	; 148e0 <mmk_verify_register_call@@Base+0x228>
   14744:	add	r1, pc, r1
   14748:	bl	112cc <fprintf@plt>
   1474c:	bl	11320 <abort@plt>
   14750:	ldr	r3, [fp, #-16]
   14754:	mov	r2, #4096	; 0x1000
   14758:	str	r2, [r3, #16]
   1475c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14760:	mov	r2, r3
   14764:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14768:	ldr	r0, [fp, #-16]
   1476c:	bl	14600 <mmk_verify_times@@Base+0x128>
   14770:	mov	r3, r0
   14774:	cmp	r3, #0
   14778:	bne	148c4 <mmk_verify_register_call@@Base+0x20c>
   1477c:	ldr	r3, [fp, #-16]
   14780:	ldr	r2, [r3, #12]
   14784:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14788:	add	r3, r2, r3
   1478c:	add	r2, r3, #4
   14790:	ldr	r3, [fp, #-16]
   14794:	ldr	r3, [r3, #16]
   14798:	cmp	r2, r3
   1479c:	bcc	14848 <mmk_verify_register_call@@Base+0x190>
   147a0:	b	147b8 <mmk_verify_register_call@@Base+0x100>
   147a4:	ldr	r3, [fp, #-16]
   147a8:	ldr	r3, [r3, #16]
   147ac:	add	r2, r3, #4096	; 0x1000
   147b0:	ldr	r3, [fp, #-16]
   147b4:	str	r2, [r3, #16]
   147b8:	ldr	r3, [fp, #-16]
   147bc:	ldr	r2, [r3, #12]
   147c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   147c4:	add	r3, r2, r3
   147c8:	add	r2, r3, #4
   147cc:	ldr	r3, [fp, #-16]
   147d0:	ldr	r3, [r3, #16]
   147d4:	cmp	r2, r3
   147d8:	bcs	147a4 <mmk_verify_register_call@@Base+0xec>
   147dc:	ldr	r3, [fp, #-16]
   147e0:	ldr	r2, [r3, #8]
   147e4:	ldr	r3, [fp, #-16]
   147e8:	ldr	r3, [r3, #16]
   147ec:	mov	r1, r3
   147f0:	mov	r0, r2
   147f4:	bl	14b40 <mmk_realloc@@Base>
   147f8:	mov	r2, r0
   147fc:	ldr	r3, [fp, #-16]
   14800:	str	r2, [r3, #8]
   14804:	ldr	r3, [fp, #-16]
   14808:	ldr	r3, [r3, #8]
   1480c:	cmp	r3, #0
   14810:	bne	14848 <mmk_verify_register_call@@Base+0x190>
   14814:	ldr	r3, [pc, #184]	; 148d4 <mmk_verify_register_call@@Base+0x21c>
   14818:	ldr	r3, [r4, r3]
   1481c:	ldr	r0, [r3]
   14820:	ldr	r3, [pc, #188]	; 148e4 <mmk_verify_register_call@@Base+0x22c>
   14824:	add	r3, pc, r3
   14828:	str	r3, [sp]
   1482c:	mov	r3, #91	; 0x5b
   14830:	ldr	r2, [pc, #176]	; 148e8 <mmk_verify_register_call@@Base+0x230>
   14834:	add	r2, pc, r2
   14838:	ldr	r1, [pc, #172]	; 148ec <mmk_verify_register_call@@Base+0x234>
   1483c:	add	r1, pc, r1
   14840:	bl	112cc <fprintf@plt>
   14844:	bl	11320 <abort@plt>
   14848:	ldr	r3, [fp, #-16]
   1484c:	ldr	r2, [r3, #8]
   14850:	ldr	r3, [fp, #-16]
   14854:	ldr	r3, [r3, #12]
   14858:	add	r3, r2, r3
   1485c:	sub	r1, fp, #28
   14860:	mov	r2, #4
   14864:	mov	r0, r3
   14868:	bl	14944 <mmk_memcpy@@Base>
   1486c:	ldr	r3, [fp, #-16]
   14870:	ldr	r2, [r3, #8]
   14874:	ldr	r3, [fp, #-16]
   14878:	ldr	r3, [r3, #12]
   1487c:	add	r3, r3, #4
   14880:	add	r3, r2, r3
   14884:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14888:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1488c:	mov	r0, r3
   14890:	bl	14944 <mmk_memcpy@@Base>
   14894:	str	r0, [fp, #-20]	; 0xffffffec
   14898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1489c:	mov	r2, #1
   148a0:	str	r2, [r3]
   148a4:	ldr	r3, [fp, #-16]
   148a8:	ldr	r2, [r3, #12]
   148ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148b0:	add	r3, r2, r3
   148b4:	add	r2, r3, #4
   148b8:	ldr	r3, [fp, #-16]
   148bc:	str	r2, [r3, #12]
   148c0:	b	148c8 <mmk_verify_register_call@@Base+0x210>
   148c4:	nop			; (mov r0, r0)
   148c8:	sub	sp, fp, #8
   148cc:	pop	{r4, fp, pc}
   148d0:	andeq	r1, r1, r8, lsr #18
   148d4:	andeq	r0, r0, r4, lsl #1
   148d8:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   148dc:	andeq	r0, r0, ip, lsl #30
   148e0:	andeq	r0, r0, r8, asr pc
   148e4:	muleq	r0, r8, lr
   148e8:	andeq	r0, r0, r4, lsl lr
   148ec:	andeq	r0, r0, r0, ror #28

000148f0 <mmk_memcmp@@Base>:
   148f0:	cmp	r2, #0
   148f4:	beq	1492c <mmk_memcmp@@Base+0x3c>
   148f8:	ldrb	ip, [r0]
   148fc:	ldrb	r3, [r1]
   14900:	cmp	r3, ip
   14904:	addeq	r2, r0, r2
   14908:	addeq	r0, r0, #1
   1490c:	beq	14924 <mmk_memcmp@@Base+0x34>
   14910:	b	14934 <mmk_memcmp@@Base+0x44>
   14914:	ldrb	ip, [r0], #1
   14918:	ldrb	r3, [r1, #1]!
   1491c:	cmp	ip, r3
   14920:	bne	14934 <mmk_memcmp@@Base+0x44>
   14924:	cmp	r0, r2
   14928:	bne	14914 <mmk_memcmp@@Base+0x24>
   1492c:	mov	r0, #0
   14930:	bx	lr
   14934:	cmp	ip, r3
   14938:	mvncc	r0, #0
   1493c:	movcs	r0, #1
   14940:	bx	lr

00014944 <mmk_memcpy@@Base>:
   14944:	cmp	r2, #0
   14948:	bxeq	lr
   1494c:	sub	r1, r1, #1
   14950:	add	r2, r0, r2
   14954:	mov	r3, r0
   14958:	ldrb	ip, [r1, #1]!
   1495c:	strb	ip, [r3], #1
   14960:	cmp	r3, r2
   14964:	bne	14958 <mmk_memcpy@@Base+0x14>
   14968:	bx	lr

0001496c <mmk_strneq@@Base>:
   1496c:	ldrb	r3, [r0]
   14970:	cmp	r3, #0
   14974:	beq	14a08 <mmk_strneq@@Base+0x9c>
   14978:	ldrb	ip, [r1]
   1497c:	cmp	ip, #0
   14980:	beq	14a08 <mmk_strneq@@Base+0x9c>
   14984:	cmp	r2, #0
   14988:	beq	149f8 <mmk_strneq@@Base+0x8c>
   1498c:	cmp	ip, r3
   14990:	bne	14a00 <mmk_strneq@@Base+0x94>
   14994:	push	{lr}		; (str lr, [sp, #-4]!)
   14998:	add	r3, r1, #1
   1499c:	b	149bc <mmk_strneq@@Base+0x50>
   149a0:	ldrb	lr, [r3], #1
   149a4:	cmp	lr, #0
   149a8:	beq	149d0 <mmk_strneq@@Base+0x64>
   149ac:	cmp	r2, #0
   149b0:	beq	149e8 <mmk_strneq@@Base+0x7c>
   149b4:	cmp	ip, lr
   149b8:	bne	149f0 <mmk_strneq@@Base+0x84>
   149bc:	ldrb	ip, [r0, #1]!
   149c0:	sub	r2, r2, #1
   149c4:	mov	r1, r3
   149c8:	cmp	ip, #0
   149cc:	bne	149a0 <mmk_strneq@@Base+0x34>
   149d0:	cmp	r2, #0
   149d4:	beq	149e8 <mmk_strneq@@Base+0x7c>
   149d8:	ldrb	r0, [r1]
   149dc:	clz	r0, r0
   149e0:	lsr	r0, r0, #5
   149e4:	pop	{pc}		; (ldr pc, [sp], #4)
   149e8:	mov	r0, #1
   149ec:	pop	{pc}		; (ldr pc, [sp], #4)
   149f0:	mov	r0, #0
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	mov	r0, #1
   149fc:	bx	lr
   14a00:	mov	r0, #0
   14a04:	bx	lr
   14a08:	cmp	r2, #0
   14a0c:	beq	149f8 <mmk_strneq@@Base+0x8c>
   14a10:	ldrb	r0, [r1]
   14a14:	clz	r0, r0
   14a18:	lsr	r0, r0, #5
   14a1c:	bx	lr

00014a20 <mmk_strchr@@Base>:
   14a20:	ldrb	r2, [r0]
   14a24:	cmp	r2, #0
   14a28:	beq	14a54 <mmk_strchr@@Base+0x34>
   14a2c:	cmp	r1, r2
   14a30:	bne	14a40 <mmk_strchr@@Base+0x20>
   14a34:	b	14a5c <mmk_strchr@@Base+0x3c>
   14a38:	cmp	r3, r1
   14a3c:	bxeq	lr
   14a40:	ldrb	r3, [r0, #1]!
   14a44:	cmp	r3, #0
   14a48:	bne	14a38 <mmk_strchr@@Base+0x18>
   14a4c:	mov	r0, r3
   14a50:	bx	lr
   14a54:	mov	r0, r2
   14a58:	bx	lr
   14a5c:	bx	lr

00014a60 <mmk_strcpy@@Base>:
   14a60:	ldrb	r3, [r1]
   14a64:	cmp	r3, #0
   14a68:	beq	14a7c <mmk_strcpy@@Base+0x1c>
   14a6c:	strb	r3, [r0], #1
   14a70:	ldrb	r3, [r1, #1]!
   14a74:	cmp	r3, #0
   14a78:	bne	14a6c <mmk_strcpy@@Base+0xc>
   14a7c:	mov	r3, #0
   14a80:	strb	r3, [r0]
   14a84:	bx	lr

00014a88 <mmk_strncpy@@Base>:
   14a88:	ldrb	ip, [r1]
   14a8c:	cmp	r2, #0
   14a90:	cmpne	ip, #0
   14a94:	beq	14ac0 <mmk_strncpy@@Base+0x38>
   14a98:	strb	ip, [r0], #1
   14a9c:	ldrb	ip, [r1, #1]!
   14aa0:	subs	r2, r2, #1
   14aa4:	movne	r3, #1
   14aa8:	moveq	r3, #0
   14aac:	cmp	ip, #0
   14ab0:	moveq	r3, #0
   14ab4:	andne	r3, r3, #1
   14ab8:	cmp	r3, #0
   14abc:	bne	14a98 <mmk_strncpy@@Base+0x10>
   14ac0:	mov	r3, #0
   14ac4:	strb	r3, [r0]
   14ac8:	bx	lr

00014acc <mmk_strlen@@Base>:
   14acc:	ldrb	r3, [r0]
   14ad0:	cmp	r3, #0
   14ad4:	beq	14aec <mmk_strlen@@Base+0x20>
   14ad8:	mov	r3, #0
   14adc:	ldrb	r2, [r0, #1]!
   14ae0:	add	r3, r3, #1
   14ae4:	cmp	r2, #0
   14ae8:	bne	14adc <mmk_strlen@@Base+0x10>
   14aec:	mov	r0, r3
   14af0:	bx	lr

00014af4 <mmk_isspace@@Base>:
   14af4:	cmp	r0, #9
   14af8:	cmpne	r0, #32
   14afc:	mov	r3, r0
   14b00:	moveq	r0, #1
   14b04:	movne	r0, #0
   14b08:	bxeq	lr
   14b0c:	cmp	r3, #10
   14b10:	cmpne	r3, #13
   14b14:	moveq	r0, #1
   14b18:	movne	r0, #0
   14b1c:	bx	lr

00014b20 <mmk_malloc@@Base>:
   14b20:	ldr	r3, [pc, #16]	; 14b38 <mmk_malloc@@Base+0x18>
   14b24:	ldr	r2, [pc, #16]	; 14b3c <mmk_malloc@@Base+0x1c>
   14b28:	add	r3, pc, r3
   14b2c:	ldr	r3, [r3, r2]
   14b30:	ldr	r3, [r3]
   14b34:	bx	r3
   14b38:	ldrdeq	r1, [r1], -r0
   14b3c:	andeq	r0, r0, r4, lsr #1

00014b40 <mmk_realloc@@Base>:
   14b40:	ldr	r3, [pc, #16]	; 14b58 <mmk_realloc@@Base+0x18>
   14b44:	ldr	r2, [pc, #16]	; 14b5c <mmk_realloc@@Base+0x1c>
   14b48:	add	r3, pc, r3
   14b4c:	ldr	r3, [r3, r2]
   14b50:	ldr	r3, [r3]
   14b54:	bx	r3
   14b58:			; <UNDEFINED> instruction: 0x000114b0
   14b5c:	muleq	r0, r4, r0

00014b60 <mmk_free@@Base>:
   14b60:	ldr	r3, [pc, #16]	; 14b78 <mmk_free@@Base+0x18>
   14b64:	ldr	r2, [pc, #16]	; 14b7c <mmk_free@@Base+0x1c>
   14b68:	add	r3, pc, r3
   14b6c:	ldr	r3, [r3, r2]
   14b70:	ldr	r3, [r3]
   14b74:	bx	r3
   14b78:	muleq	r1, r0, r4
   14b7c:	andeq	r0, r0, r0, lsr #1

00014b80 <mmk_init_vital_functions@@Base>:
   14b80:	push	{r4, r5, lr}
   14b84:	mov	r5, r0
   14b88:	sub	sp, sp, #12
   14b8c:	mov	r0, #0
   14b90:	bl	11284 <malloc@plt>
   14b94:	mov	r1, #0
   14b98:	bl	11260 <realloc@plt>
   14b9c:	bl	1123c <free@plt>
   14ba0:	ldr	r1, [pc, #272]	; 14cb8 <mmk_init_vital_functions@@Base+0x138>
   14ba4:	mov	r0, r5
   14ba8:	add	r1, pc, r1
   14bac:	bl	13e74 <plt_get_real_fn@@Base>
   14bb0:	ldr	r4, [pc, #260]	; 14cbc <mmk_init_vital_functions@@Base+0x13c>
   14bb4:	ldr	r3, [pc, #260]	; 14cc0 <mmk_init_vital_functions@@Base+0x140>
   14bb8:	add	r4, pc, r4
   14bbc:	ldr	r3, [r4, r3]
   14bc0:	cmp	r0, #0
   14bc4:	str	r0, [r3]
   14bc8:	beq	14c1c <mmk_init_vital_functions@@Base+0x9c>
   14bcc:	ldr	r1, [pc, #240]	; 14cc4 <mmk_init_vital_functions@@Base+0x144>
   14bd0:	mov	r0, r5
   14bd4:	add	r1, pc, r1
   14bd8:	bl	13e74 <plt_get_real_fn@@Base>
   14bdc:	ldr	r3, [pc, #228]	; 14cc8 <mmk_init_vital_functions@@Base+0x148>
   14be0:	ldr	r3, [r4, r3]
   14be4:	cmp	r0, #0
   14be8:	str	r0, [r3]
   14bec:	beq	14c84 <mmk_init_vital_functions@@Base+0x104>
   14bf0:	ldr	r1, [pc, #212]	; 14ccc <mmk_init_vital_functions@@Base+0x14c>
   14bf4:	mov	r0, r5
   14bf8:	add	r1, pc, r1
   14bfc:	bl	13e74 <plt_get_real_fn@@Base>
   14c00:	ldr	r3, [pc, #200]	; 14cd0 <mmk_init_vital_functions@@Base+0x150>
   14c04:	ldr	r3, [r4, r3]
   14c08:	cmp	r0, #0
   14c0c:	str	r0, [r3]
   14c10:	beq	14c50 <mmk_init_vital_functions@@Base+0xd0>
   14c14:	add	sp, sp, #12
   14c18:	pop	{r4, r5, pc}
   14c1c:	ldr	r2, [pc, #176]	; 14cd4 <mmk_init_vital_functions@@Base+0x154>
   14c20:	ldr	r1, [pc, #176]	; 14cd8 <mmk_init_vital_functions@@Base+0x158>
   14c24:	mov	r3, #88	; 0x58
   14c28:	ldr	r0, [r4, r2]
   14c2c:	add	r1, pc, r1
   14c30:	str	r1, [sp]
   14c34:	ldr	r2, [pc, #160]	; 14cdc <mmk_init_vital_functions@@Base+0x15c>
   14c38:	ldr	r1, [pc, #160]	; 14ce0 <mmk_init_vital_functions@@Base+0x160>
   14c3c:	add	r2, pc, r2
   14c40:	add	r1, pc, r1
   14c44:	ldr	r0, [r0]
   14c48:	bl	112cc <fprintf@plt>
   14c4c:	bl	11320 <abort@plt>
   14c50:	ldr	r2, [pc, #124]	; 14cd4 <mmk_init_vital_functions@@Base+0x154>
   14c54:	ldr	r1, [pc, #136]	; 14ce4 <mmk_init_vital_functions@@Base+0x164>
   14c58:	mov	r3, #90	; 0x5a
   14c5c:	ldr	r0, [r4, r2]
   14c60:	add	r1, pc, r1
   14c64:	str	r1, [sp]
   14c68:	ldr	r2, [pc, #120]	; 14ce8 <mmk_init_vital_functions@@Base+0x168>
   14c6c:	ldr	r1, [pc, #120]	; 14cec <mmk_init_vital_functions@@Base+0x16c>
   14c70:	add	r2, pc, r2
   14c74:	add	r1, pc, r1
   14c78:	ldr	r0, [r0]
   14c7c:	bl	112cc <fprintf@plt>
   14c80:	bl	11320 <abort@plt>
   14c84:	ldr	r2, [pc, #72]	; 14cd4 <mmk_init_vital_functions@@Base+0x154>
   14c88:	ldr	r1, [pc, #96]	; 14cf0 <mmk_init_vital_functions@@Base+0x170>
   14c8c:	mov	r3, #89	; 0x59
   14c90:	ldr	r0, [r4, r2]
   14c94:	add	r1, pc, r1
   14c98:	str	r1, [sp]
   14c9c:	ldr	r2, [pc, #80]	; 14cf4 <mmk_init_vital_functions@@Base+0x174>
   14ca0:	ldr	r1, [pc, #80]	; 14cf8 <mmk_init_vital_functions@@Base+0x178>
   14ca4:	add	r2, pc, r2
   14ca8:	add	r1, pc, r1
   14cac:	ldr	r0, [r0]
   14cb0:	bl	112cc <fprintf@plt>
   14cb4:	bl	11320 <abort@plt>
   14cb8:	andeq	r0, r0, r4, lsr #22
   14cbc:	andeq	r1, r1, r0, asr #8
   14cc0:	andeq	r0, r0, r4, lsr #1
   14cc4:	andeq	r0, r0, ip, lsl #23
   14cc8:	muleq	r0, r4, r0
   14ccc:	andeq	r0, r0, r8, lsr #23
   14cd0:	andeq	r0, r0, r0, lsr #1
   14cd4:	andeq	r0, r0, r4, lsl #1
   14cd8:	strdeq	r0, [r0], -ip
   14cdc:	muleq	r0, r8, sl
   14ce0:			; <UNDEFINED> instruction: 0x000009b8
   14ce4:	andeq	r0, r0, r8, asr #22
   14ce8:	andeq	r0, r0, r4, ror #20
   14cec:	andeq	r0, r0, r4, lsl #19
   14cf0:	ldrdeq	r0, [r0], -r4
   14cf4:	andeq	r0, r0, r0, lsr sl
   14cf8:	andeq	r0, r0, r0, asr r9

00014cfc <mmk_when_init@@Base>:
   14cfc:	push	{fp, lr}
   14d00:	add	fp, sp, #4
   14d04:	sub	sp, sp, #8
   14d08:	str	r0, [fp, #-8]
   14d0c:	ldr	r3, [pc, #36]	; 14d38 <mmk_when_init@@Base+0x3c>
   14d10:	add	r3, pc, r3
   14d14:	mov	r0, r3
   14d18:	bl	11308 <__tls_get_addr@plt>
   14d1c:	mov	r1, r0
   14d20:	ldr	r2, [pc, #20]	; 14d3c <mmk_when_init@@Base+0x40>
   14d24:	ldr	r3, [fp, #-8]
   14d28:	str	r3, [r1, r2]
   14d2c:	nop			; (mov r0, r0)
   14d30:	sub	sp, fp, #4
   14d34:	pop	{fp, pc}
   14d38:	andeq	r1, r1, r4, asr r3
   14d3c:	andeq	r0, r0, r0, lsl r0

00014d40 <mmk_when_get_result@@Base>:
   14d40:	push	{fp, lr}
   14d44:	add	fp, sp, #4
   14d48:	ldr	r3, [pc, #28]	; 14d6c <mmk_when_get_result@@Base+0x2c>
   14d4c:	add	r3, pc, r3
   14d50:	mov	r0, r3
   14d54:	bl	11308 <__tls_get_addr@plt>
   14d58:	mov	r2, r0
   14d5c:	ldr	r3, [pc, #12]	; 14d70 <mmk_when_get_result@@Base+0x30>
   14d60:	ldr	r3, [r2, r3]
   14d64:	mov	r0, r3
   14d68:	pop	{fp, pc}
   14d6c:	andeq	r1, r1, r8, lsl r3
   14d70:	andeq	r0, r0, r0, lsl r0

00014d74 <mmk_when_impl@@Base>:
   14d74:	push	{fp, lr}
   14d78:	add	fp, sp, #4
   14d7c:	sub	sp, sp, #16
   14d80:	str	r0, [fp, #-16]
   14d84:	str	r1, [fp, #-20]	; 0xffffffec
   14d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d8c:	str	r3, [fp, #-8]
   14d90:	bl	13454 <mmk_matcher_ctx@@Base>
   14d94:	mov	r2, r0
   14d98:	ldr	r3, [fp, #-8]
   14d9c:	str	r2, [r3]
   14da0:	ldr	r3, [fp, #-16]
   14da4:	ldr	r2, [r3]
   14da8:	ldr	r3, [fp, #-8]
   14dac:	str	r2, [r3, #4]
   14db0:	ldr	r3, [fp, #-16]
   14db4:	ldr	r2, [fp, #-8]
   14db8:	str	r2, [r3]
   14dbc:	nop			; (mov r0, r0)
   14dc0:	sub	sp, fp, #4
   14dc4:	pop	{fp, pc}

00014dc8 <mmk_trampoline@@Base>:
   14dc8:	sub	ip, pc, #8
   14dcc:	push	{r0, r1, r2, r3}
   14dd0:	push	{ip, lr}
   14dd4:	ldr	r0, [ip, #-8]
   14dd8:	ldr	ip, [r0, #4]
   14ddc:	blx	ip
   14de0:	pop	{ip, lr}
   14de4:	push	{ip, lr}
   14de8:	ldr	ip, [ip, #-8]
   14dec:	ldr	ip, [ip]
   14df0:	blx	ip
   14df4:	cmp	r0, #0
   14df8:	bne	14e08 <mmk_trampoline@@Base+0x40>
   14dfc:	pop	{ip, lr}
   14e00:	pop	{r0, r1, r2, r3}
   14e04:	ldr	pc, [ip, #-4]
   14e08:	pop	{ip, lr}
   14e0c:	pop	{r0, r1, r2, r3}
   14e10:	push	{ip, lr}
   14e14:	ldr	ip, [ip, #-8]
   14e18:	ldr	ip, [ip, #8]
   14e1c:	blx	ip
   14e20:	pop	{ip, pc}

00014e24 <mmk_trampoline_end@@Base>:
   14e24:	nop			; (mov r0, r0)
   14e28:	subs	r2, r1, #1
   14e2c:	bxeq	lr
   14e30:	bcc	15008 <mmk_trampoline_end@@Base+0x1e4>
   14e34:	cmp	r0, r1
   14e38:	bls	14fec <mmk_trampoline_end@@Base+0x1c8>
   14e3c:	tst	r1, r2
   14e40:	beq	14ff8 <mmk_trampoline_end@@Base+0x1d4>
   14e44:	clz	r3, r0
   14e48:	clz	r2, r1
   14e4c:	sub	r3, r2, r3
   14e50:	rsbs	r3, r3, #31
   14e54:	addne	r3, r3, r3, lsl #1
   14e58:	mov	r2, #0
   14e5c:	addne	pc, pc, r3, lsl #2
   14e60:	nop			; (mov r0, r0)
   14e64:	cmp	r0, r1, lsl #31
   14e68:	adc	r2, r2, r2
   14e6c:	subcs	r0, r0, r1, lsl #31
   14e70:	cmp	r0, r1, lsl #30
   14e74:	adc	r2, r2, r2
   14e78:	subcs	r0, r0, r1, lsl #30
   14e7c:	cmp	r0, r1, lsl #29
   14e80:	adc	r2, r2, r2
   14e84:	subcs	r0, r0, r1, lsl #29
   14e88:	cmp	r0, r1, lsl #28
   14e8c:	adc	r2, r2, r2
   14e90:	subcs	r0, r0, r1, lsl #28
   14e94:	cmp	r0, r1, lsl #27
   14e98:	adc	r2, r2, r2
   14e9c:	subcs	r0, r0, r1, lsl #27
   14ea0:	cmp	r0, r1, lsl #26
   14ea4:	adc	r2, r2, r2
   14ea8:	subcs	r0, r0, r1, lsl #26
   14eac:	cmp	r0, r1, lsl #25
   14eb0:	adc	r2, r2, r2
   14eb4:	subcs	r0, r0, r1, lsl #25
   14eb8:	cmp	r0, r1, lsl #24
   14ebc:	adc	r2, r2, r2
   14ec0:	subcs	r0, r0, r1, lsl #24
   14ec4:	cmp	r0, r1, lsl #23
   14ec8:	adc	r2, r2, r2
   14ecc:	subcs	r0, r0, r1, lsl #23
   14ed0:	cmp	r0, r1, lsl #22
   14ed4:	adc	r2, r2, r2
   14ed8:	subcs	r0, r0, r1, lsl #22
   14edc:	cmp	r0, r1, lsl #21
   14ee0:	adc	r2, r2, r2
   14ee4:	subcs	r0, r0, r1, lsl #21
   14ee8:	cmp	r0, r1, lsl #20
   14eec:	adc	r2, r2, r2
   14ef0:	subcs	r0, r0, r1, lsl #20
   14ef4:	cmp	r0, r1, lsl #19
   14ef8:	adc	r2, r2, r2
   14efc:	subcs	r0, r0, r1, lsl #19
   14f00:	cmp	r0, r1, lsl #18
   14f04:	adc	r2, r2, r2
   14f08:	subcs	r0, r0, r1, lsl #18
   14f0c:	cmp	r0, r1, lsl #17
   14f10:	adc	r2, r2, r2
   14f14:	subcs	r0, r0, r1, lsl #17
   14f18:	cmp	r0, r1, lsl #16
   14f1c:	adc	r2, r2, r2
   14f20:	subcs	r0, r0, r1, lsl #16
   14f24:	cmp	r0, r1, lsl #15
   14f28:	adc	r2, r2, r2
   14f2c:	subcs	r0, r0, r1, lsl #15
   14f30:	cmp	r0, r1, lsl #14
   14f34:	adc	r2, r2, r2
   14f38:	subcs	r0, r0, r1, lsl #14
   14f3c:	cmp	r0, r1, lsl #13
   14f40:	adc	r2, r2, r2
   14f44:	subcs	r0, r0, r1, lsl #13
   14f48:	cmp	r0, r1, lsl #12
   14f4c:	adc	r2, r2, r2
   14f50:	subcs	r0, r0, r1, lsl #12
   14f54:	cmp	r0, r1, lsl #11
   14f58:	adc	r2, r2, r2
   14f5c:	subcs	r0, r0, r1, lsl #11
   14f60:	cmp	r0, r1, lsl #10
   14f64:	adc	r2, r2, r2
   14f68:	subcs	r0, r0, r1, lsl #10
   14f6c:	cmp	r0, r1, lsl #9
   14f70:	adc	r2, r2, r2
   14f74:	subcs	r0, r0, r1, lsl #9
   14f78:	cmp	r0, r1, lsl #8
   14f7c:	adc	r2, r2, r2
   14f80:	subcs	r0, r0, r1, lsl #8
   14f84:	cmp	r0, r1, lsl #7
   14f88:	adc	r2, r2, r2
   14f8c:	subcs	r0, r0, r1, lsl #7
   14f90:	cmp	r0, r1, lsl #6
   14f94:	adc	r2, r2, r2
   14f98:	subcs	r0, r0, r1, lsl #6
   14f9c:	cmp	r0, r1, lsl #5
   14fa0:	adc	r2, r2, r2
   14fa4:	subcs	r0, r0, r1, lsl #5
   14fa8:	cmp	r0, r1, lsl #4
   14fac:	adc	r2, r2, r2
   14fb0:	subcs	r0, r0, r1, lsl #4
   14fb4:	cmp	r0, r1, lsl #3
   14fb8:	adc	r2, r2, r2
   14fbc:	subcs	r0, r0, r1, lsl #3
   14fc0:	cmp	r0, r1, lsl #2
   14fc4:	adc	r2, r2, r2
   14fc8:	subcs	r0, r0, r1, lsl #2
   14fcc:	cmp	r0, r1, lsl #1
   14fd0:	adc	r2, r2, r2
   14fd4:	subcs	r0, r0, r1, lsl #1
   14fd8:	cmp	r0, r1
   14fdc:	adc	r2, r2, r2
   14fe0:	subcs	r0, r0, r1
   14fe4:	mov	r0, r2
   14fe8:	bx	lr
   14fec:	moveq	r0, #1
   14ff0:	movne	r0, #0
   14ff4:	bx	lr
   14ff8:	clz	r2, r1
   14ffc:	rsb	r2, r2, #31
   15000:	lsr	r0, r0, r2
   15004:	bx	lr
   15008:	cmp	r0, #0
   1500c:	mvnne	r0, #0
   15010:	b	15034 <mmk_trampoline_end@@Base+0x210>
   15014:	cmp	r1, #0
   15018:	beq	15008 <mmk_trampoline_end@@Base+0x1e4>
   1501c:	push	{r0, r1, lr}
   15020:	bl	14e28 <mmk_trampoline_end@@Base+0x4>
   15024:	pop	{r1, r2, lr}
   15028:	mul	r3, r2, r0
   1502c:	sub	r1, r1, r3
   15030:	bx	lr
   15034:	push	{r1, lr}
   15038:	mov	r0, #8
   1503c:	bl	11218 <raise@plt>
   15040:	pop	{r1, pc}

00015044 <__libc_csu_init@@Base>:
   15044:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15048:	mov	r7, r0
   1504c:	ldr	r6, [pc, #72]	; 1509c <__libc_csu_init@@Base+0x58>
   15050:	ldr	r5, [pc, #72]	; 150a0 <__libc_csu_init@@Base+0x5c>
   15054:	add	r6, pc, r6
   15058:	add	r5, pc, r5
   1505c:	sub	r6, r6, r5
   15060:	mov	r8, r1
   15064:	mov	r9, r2
   15068:	bl	111ec <strstr@plt-0x20>
   1506c:	asrs	r6, r6, #2
   15070:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15074:	mov	r4, #0
   15078:	add	r4, r4, #1
   1507c:	ldr	r3, [r5], #4
   15080:	mov	r2, r9
   15084:	mov	r1, r8
   15088:	mov	r0, r7
   1508c:	blx	r3
   15090:	cmp	r6, r4
   15094:	bne	15078 <__libc_csu_init@@Base+0x34>
   15098:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1509c:	muleq	r1, ip, lr
   150a0:	muleq	r1, r4, lr

000150a4 <__libc_csu_fini@@Base>:
   150a4:	bx	lr

Disassembly of section .fini:

000150a8 <.fini>:
   150a8:	push	{r3, lr}
   150ac:	pop	{r3, pc}
