
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011ec8 <.init>:
   11ec8:	push	{r3, lr}
   11ecc:	bl	1211c <_start@@Base+0x3c>
   11ed0:	pop	{r3, pc}

Disassembly of section .plt:

00011ed4 <fdopen@plt-0x14>:
   11ed4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ed8:	ldr	lr, [pc, #4]	; 11ee4 <fdopen@plt-0x4>
   11edc:	add	lr, pc, lr
   11ee0:	ldr	pc, [lr, #8]!
   11ee4:	andeq	fp, r1, ip, lsl r1

00011ee8 <fdopen@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #110592	; 0x1b000
   11ef0:	ldr	pc, [ip, #284]!	; 0x11c

00011ef4 <strtol@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #110592	; 0x1b000
   11efc:	ldr	pc, [ip, #276]!	; 0x114

00011f00 <fopen@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #110592	; 0x1b000
   11f08:	ldr	pc, [ip, #268]!	; 0x10c

00011f0c <fflush@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #110592	; 0x1b000
   11f14:	ldr	pc, [ip, #260]!	; 0x104

00011f18 <free@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #110592	; 0x1b000
   11f20:	ldr	pc, [ip, #252]!	; 0xfc

00011f24 <memcpy@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #110592	; 0x1b000
   11f2c:	ldr	pc, [ip, #244]!	; 0xf4

00011f30 <mmap64@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #110592	; 0x1b000
   11f38:	ldr	pc, [ip, #236]!	; 0xec

00011f3c <ftell@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #110592	; 0x1b000
   11f44:	ldr	pc, [ip, #228]!	; 0xe4

00011f48 <uname@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #110592	; 0x1b000
   11f50:	ldr	pc, [ip, #220]!	; 0xdc

00011f54 <strdup@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #110592	; 0x1b000
   11f5c:	ldr	pc, [ip, #212]!	; 0xd4

00011f60 <realloc@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #110592	; 0x1b000
   11f68:	ldr	pc, [ip, #204]!	; 0xcc

00011f6c <fwrite@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #110592	; 0x1b000
   11f74:	ldr	pc, [ip, #196]!	; 0xc4

00011f78 <open64@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #110592	; 0x1b000
   11f80:	ldr	pc, [ip, #188]!	; 0xbc

00011f84 <getenv@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #110592	; 0x1b000
   11f8c:	ldr	pc, [ip, #180]!	; 0xb4

00011f90 <malloc@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #110592	; 0x1b000
   11f98:	ldr	pc, [ip, #172]!	; 0xac

00011f9c <__libc_start_main@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #110592	; 0x1b000
   11fa4:	ldr	pc, [ip, #164]!	; 0xa4

00011fa8 <strerror@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #110592	; 0x1b000
   11fb0:	ldr	pc, [ip, #156]!	; 0x9c

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #110592	; 0x1b000
   11fbc:	ldr	pc, [ip, #148]!	; 0x94

00011fc0 <getpid@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #110592	; 0x1b000
   11fc8:	ldr	pc, [ip, #140]!	; 0x8c

00011fcc <exit@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #110592	; 0x1b000
   11fd4:	ldr	pc, [ip, #132]!	; 0x84

00011fd8 <strlen@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #110592	; 0x1b000
   11fe0:	ldr	pc, [ip, #124]!	; 0x7c

00011fe4 <strchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #110592	; 0x1b000
   11fec:	ldr	pc, [ip, #116]!	; 0x74

00011ff0 <getopt@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #110592	; 0x1b000
   11ff8:	ldr	pc, [ip, #108]!	; 0x6c

00011ffc <fprintf@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #110592	; 0x1b000
   12004:	ldr	pc, [ip, #100]!	; 0x64

00012008 <__errno_location@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #110592	; 0x1b000
   12010:	ldr	pc, [ip, #92]!	; 0x5c

00012014 <__cxa_atexit@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #110592	; 0x1b000
   1201c:	ldr	pc, [ip, #84]!	; 0x54

00012020 <mkdir@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #110592	; 0x1b000
   12028:	ldr	pc, [ip, #76]!	; 0x4c

0001202c <memset@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #110592	; 0x1b000
   12034:	ldr	pc, [ip, #68]!	; 0x44

00012038 <strncpy@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #110592	; 0x1b000
   12040:	ldr	pc, [ip, #60]!	; 0x3c

00012044 <prctl@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #110592	; 0x1b000
   1204c:	ldr	pc, [ip, #52]!	; 0x34

00012050 <fileno@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #110592	; 0x1b000
   12058:	ldr	pc, [ip, #44]!	; 0x2c

0001205c <fclose@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #110592	; 0x1b000
   12064:	ldr	pc, [ip, #36]!	; 0x24

00012068 <strnlen@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #110592	; 0x1b000
   12070:	ldr	pc, [ip, #28]!

00012074 <munmap@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #110592	; 0x1b000
   1207c:	ldr	pc, [ip, #20]!

00012080 <fcntl64@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #110592	; 0x1b000
   12088:	ldr	pc, [ip, #12]!

0001208c <strrchr@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #110592	; 0x1b000
   12094:	ldr	pc, [ip, #4]!

00012098 <fputc@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #106496	; 0x1a000
   120a0:	ldr	pc, [ip, #4092]!	; 0xffc

000120a4 <msync@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #106496	; 0x1a000
   120ac:	ldr	pc, [ip, #4084]!	; 0xff4

000120b0 <fread_unlocked@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #106496	; 0x1a000
   120b8:	ldr	pc, [ip, #4076]!	; 0xfec

000120bc <fseek@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #106496	; 0x1a000
   120c4:	ldr	pc, [ip, #4068]!	; 0xfe4

000120c8 <strncmp@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #106496	; 0x1a000
   120d0:	ldr	pc, [ip, #4060]!	; 0xfdc

000120d4 <abort@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #106496	; 0x1a000
   120dc:	ldr	pc, [ip, #4052]!	; 0xfd4

Disassembly of section .text:

000120e0 <_start@@Base>:
   120e0:	mov	fp, #0
   120e4:	mov	lr, #0
   120e8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ec:	mov	r2, sp
   120f0:	push	{r2}		; (str r2, [sp, #-4]!)
   120f4:	push	{r0}		; (str r0, [sp, #-4]!)
   120f8:	ldr	ip, [pc, #16]	; 12110 <_start@@Base+0x30>
   120fc:	push	{ip}		; (str ip, [sp, #-4]!)
   12100:	ldr	r0, [pc, #12]	; 12114 <_start@@Base+0x34>
   12104:	ldr	r3, [pc, #12]	; 12118 <_start@@Base+0x38>
   12108:	bl	11f9c <__libc_start_main@plt>
   1210c:	bl	120d4 <abort@plt>
   12110:	ldrdeq	sl, [r1], -r8
   12114:	andeq	r2, r1, r0, asr #9
   12118:	andeq	sl, r1, r8, ror lr
   1211c:	ldr	r3, [pc, #20]	; 12138 <_start@@Base+0x58>
   12120:	ldr	r2, [pc, #20]	; 1213c <_start@@Base+0x5c>
   12124:	add	r3, pc, r3
   12128:	ldr	r2, [r3, r2]
   1212c:	cmp	r2, #0
   12130:	bxeq	lr
   12134:	b	11fb4 <__gmon_start__@plt>
   12138:	ldrdeq	sl, [r1], -r4
   1213c:	andeq	r0, r0, r8, asr #1
   12140:	ldr	r0, [pc, #24]	; 12160 <_start@@Base+0x80>
   12144:	ldr	r3, [pc, #24]	; 12164 <_start@@Base+0x84>
   12148:	cmp	r3, r0
   1214c:	bxeq	lr
   12150:	ldr	r3, [pc, #16]	; 12168 <_start@@Base+0x88>
   12154:	cmp	r3, #0
   12158:	bxeq	lr
   1215c:	bx	r3
   12160:	andeq	sp, r2, r0, ror #1
   12164:	andeq	sp, r2, r0, ror #1
   12168:	andeq	r0, r0, r0
   1216c:	ldr	r0, [pc, #36]	; 12198 <_start@@Base+0xb8>
   12170:	ldr	r1, [pc, #36]	; 1219c <_start@@Base+0xbc>
   12174:	sub	r1, r1, r0
   12178:	asr	r1, r1, #2
   1217c:	add	r1, r1, r1, lsr #31
   12180:	asrs	r1, r1, #1
   12184:	bxeq	lr
   12188:	ldr	r3, [pc, #16]	; 121a0 <_start@@Base+0xc0>
   1218c:	cmp	r3, #0
   12190:	bxeq	lr
   12194:	bx	r3
   12198:	andeq	sp, r2, r0, ror #1
   1219c:	andeq	sp, r2, r0, ror #1
   121a0:	andeq	r0, r0, r0
   121a4:	push	{r4, lr}
   121a8:	ldr	r4, [pc, #24]	; 121c8 <_start@@Base+0xe8>
   121ac:	ldrb	r3, [r4]
   121b0:	cmp	r3, #0
   121b4:	popne	{r4, pc}
   121b8:	bl	12140 <_start@@Base+0x60>
   121bc:	mov	r3, #1
   121c0:	strb	r3, [r4]
   121c4:	pop	{r4, pc}
   121c8:	andeq	sp, r2, r0, ror #1
   121cc:	b	1216c <_start@@Base+0x8c>

000121d0 <load_file@@Base>:
   121d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121d4:	add	fp, sp, #24
   121d8:	ldr	r7, [pc, #504]	; 123d8 <load_file@@Base+0x208>
   121dc:	mov	r4, r0
   121e0:	ldr	r0, [pc, #500]	; 123dc <load_file@@Base+0x20c>
   121e4:	ldr	r0, [pc, r0]
   121e8:	add	r7, pc, r7
   121ec:	adds	r0, r0, #1
   121f0:	str	r0, [r7]
   121f4:	ldr	r0, [r7, #4]
   121f8:	adc	r0, r0, #0
   121fc:	str	r0, [r7, #4]
   12200:	mov	r0, r4
   12204:	ldr	r1, [pc, #468]	; 123e0 <load_file@@Base+0x210>
   12208:	add	r1, pc, r1
   1220c:	bl	11f00 <fopen@plt>
   12210:	cmp	r0, #0
   12214:	beq	12250 <load_file@@Base+0x80>
   12218:	mov	r5, r0
   1221c:	ldrd	r0, [r7, #8]
   12220:	mov	r2, #2
   12224:	mov	r6, #0
   12228:	adds	r0, r0, #1
   1222c:	adc	r1, r1, #0
   12230:	strd	r0, [r7, #8]
   12234:	mov	r0, r5
   12238:	mov	r1, #0
   1223c:	bl	120bc <fseek@plt>
   12240:	cmp	r0, #0
   12244:	beq	1225c <load_file@@Base+0x8c>
   12248:	add	r0, r7, #32
   1224c:	b	122fc <load_file@@Base+0x12c>
   12250:	add	r0, r7, #16
   12254:	mov	r6, #0
   12258:	b	12318 <load_file@@Base+0x148>
   1225c:	ldrd	r0, [r7, #24]
   12260:	adds	r0, r0, #1
   12264:	adc	r1, r1, #0
   12268:	strd	r0, [r7, #24]
   1226c:	mov	r0, r5
   12270:	bl	11f3c <ftell@plt>
   12274:	cmn	r0, #1
   12278:	beq	12340 <load_file@@Base+0x170>
   1227c:	mov	r8, r0
   12280:	ldrd	r0, [r7, #48]	; 0x30
   12284:	adds	r0, r0, #1
   12288:	adc	r1, r1, #0
   1228c:	strd	r0, [r7, #48]	; 0x30
   12290:	add	r0, r8, #1
   12294:	bl	11f90 <malloc@plt>
   12298:	mov	r6, r0
   1229c:	mov	r0, r5
   122a0:	mov	r1, #0
   122a4:	mov	r2, #0
   122a8:	bl	120bc <fseek@plt>
   122ac:	cmp	r0, #0
   122b0:	bne	1236c <load_file@@Base+0x19c>
   122b4:	ldrd	r0, [r7, #64]	; 0x40
   122b8:	mov	r2, r8
   122bc:	mov	r3, r5
   122c0:	adds	r0, r0, #1
   122c4:	adc	r1, r1, #0
   122c8:	strd	r0, [r7, #64]	; 0x40
   122cc:	mov	r0, r6
   122d0:	mov	r1, #1
   122d4:	bl	120b0 <fread_unlocked@plt>
   122d8:	cmp	r0, #0
   122dc:	beq	123a4 <load_file@@Base+0x1d4>
   122e0:	ldrd	r2, [r7, #80]	; 0x50
   122e4:	mov	r1, #0
   122e8:	strb	r1, [r6, r0]
   122ec:	add	r0, r7, #88	; 0x58
   122f0:	adds	r2, r2, #1
   122f4:	adc	r3, r3, #0
   122f8:	strd	r2, [r7, #80]	; 0x50
   122fc:	ldrd	r2, [r0]
   12300:	adds	r2, r2, #1
   12304:	adc	r3, r3, #0
   12308:	strd	r2, [r0]
   1230c:	mov	r0, r5
   12310:	bl	1205c <fclose@plt>
   12314:	add	r0, r7, #96	; 0x60
   12318:	ldrd	r2, [r0]
   1231c:	adds	r2, r2, #1
   12320:	adc	r3, r3, #0
   12324:	strd	r2, [r0]
   12328:	ldrd	r0, [r7, #104]	; 0x68
   1232c:	adds	r0, r0, #1
   12330:	adc	r1, r1, #0
   12334:	strd	r0, [r7, #104]	; 0x68
   12338:	mov	r0, r6
   1233c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12340:	ldrd	r0, [r7, #40]	; 0x28
   12344:	adds	r0, r0, #1
   12348:	adc	r1, r1, #0
   1234c:	strd	r0, [r7, #40]	; 0x28
   12350:	mov	r1, #51	; 0x33
   12354:	ldr	r0, [pc, #136]	; 123e4 <load_file@@Base+0x214>
   12358:	ldr	r0, [pc, r0]
   1235c:	ldr	r3, [r0]
   12360:	ldr	r0, [pc, #128]	; 123e8 <load_file@@Base+0x218>
   12364:	add	r0, pc, r0
   12368:	b	12394 <load_file@@Base+0x1c4>
   1236c:	ldrd	r0, [r7, #56]	; 0x38
   12370:	adds	r0, r0, #1
   12374:	adc	r1, r1, #0
   12378:	strd	r0, [r7, #56]	; 0x38
   1237c:	mov	r1, #49	; 0x31
   12380:	ldr	r0, [pc, #100]	; 123ec <load_file@@Base+0x21c>
   12384:	ldr	r0, [pc, r0]
   12388:	ldr	r3, [r0]
   1238c:	ldr	r0, [pc, #92]	; 123f0 <load_file@@Base+0x220>
   12390:	add	r0, pc, r0
   12394:	mov	r2, #1
   12398:	bl	11f6c <fwrite@plt>
   1239c:	mov	r0, #1
   123a0:	bl	11fcc <exit@plt>
   123a4:	ldrd	r0, [r7, #72]	; 0x48
   123a8:	mov	r2, r4
   123ac:	adds	r0, r0, #1
   123b0:	adc	r1, r1, #0
   123b4:	strd	r0, [r7, #72]	; 0x48
   123b8:	ldr	r0, [pc, #52]	; 123f4 <load_file@@Base+0x224>
   123bc:	ldr	r0, [pc, r0]
   123c0:	ldr	r0, [r0]
   123c4:	ldr	r1, [pc, #44]	; 123f8 <load_file@@Base+0x228>
   123c8:	add	r1, pc, r1
   123cc:	bl	11ffc <fprintf@plt>
   123d0:	mov	r0, #1
   123d4:	bl	11fcc <exit@plt>
   123d8:	andeq	sl, r1, r0, lsl #30
   123dc:	andeq	sl, r1, r4, lsl #30
   123e0:	andeq	r9, r0, r1, ror #2
   123e4:	andeq	sl, r1, r4, ror #26
   123e8:	muleq	r0, r4, fp
   123ec:	andeq	sl, r1, r8, lsr sp
   123f0:	muleq	r0, ip, fp
   123f4:	andeq	sl, r1, r0, lsl #26
   123f8:	muleq	r0, r6, fp
   123fc:	nop	{0}

00012400 <my_main@@Base>:
   12400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12404:	add	fp, sp, #24
   12408:	sub	sp, sp, #32
   1240c:	mov	r5, r1
   12410:	ldr	r1, [pc, #152]	; 124b0 <my_main@@Base+0xb0>
   12414:	add	r2, pc, #132	; 0x84
   12418:	vld1.64	{d16-d17}, [r2 :128]
   1241c:	add	r1, pc, r1
   12420:	vld1.64	{d18-d19}, [r1 :128]
   12424:	vadd.i64	q8, q9, q8
   12428:	vst1.64	{d16-d17}, [r1 :128]
   1242c:	bl	121d0 <load_file@@Base>
   12430:	mov	r4, r0
   12434:	add	r8, sp, #20
   12438:	mov	r0, r8
   1243c:	mov	r1, r4
   12440:	bl	13230 <init_lexer@@Base>
   12444:	add	r7, sp, #16
   12448:	mov	r1, r8
   1244c:	mov	r0, r7
   12450:	bl	15f90 <init_grammar@@Base>
   12454:	mov	r6, sp
   12458:	mov	r1, r7
   1245c:	mov	r2, r5
   12460:	mov	r0, r6
   12464:	bl	16fe0 <init_generator@@Base>
   12468:	mov	r0, r6
   1246c:	bl	170a0 <generate_code@@Base>
   12470:	mov	r0, r6
   12474:	bl	17050 <destroy_generator@@Base>
   12478:	mov	r0, r7
   1247c:	bl	15fe0 <destroy_grammar@@Base>
   12480:	mov	r0, r8
   12484:	bl	13280 <destroy_lexer@@Base>
   12488:	mov	r0, r4
   1248c:	bl	11f18 <free@plt>
   12490:	mov	r0, #0
   12494:	sub	sp, fp, #24
   12498:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1249c:	nop	{0}
   124a0:	andeq	r0, r0, r1
   124a4:	andeq	r0, r0, r0
   124a8:	andeq	r0, r0, r1
   124ac:	andeq	r0, r0, r0
   124b0:	andeq	sl, r1, ip, lsr sp
   124b4:	nop	{0}
   124b8:	nop	{0}
   124bc:	nop	{0}

000124c0 <main@@Base>:
   124c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c4:	add	fp, sp, #28
   124c8:	sub	sp, sp, #4
   124cc:	ldr	r7, [pc, #380]	; 12650 <main@@Base+0x190>
   124d0:	mov	r5, r0
   124d4:	add	r0, pc, #356	; 0x164
   124d8:	mov	r4, r1
   124dc:	vld1.64	{d16-d17}, [r0 :128]
   124e0:	mov	r0, r5
   124e4:	add	r7, pc, r7
   124e8:	vld1.64	{d18-d19}, [r7 :128]
   124ec:	vadd.i64	q8, q9, q8
   124f0:	vst1.64	{d16-d17}, [r7 :128]
   124f4:	ldr	r2, [pc, #344]	; 12654 <main@@Base+0x194>
   124f8:	add	r2, pc, r2
   124fc:	bl	11ff0 <getopt@plt>
   12500:	mov	r8, #0
   12504:	cmn	r0, #1
   12508:	beq	12598 <main@@Base+0xd8>
   1250c:	ldr	r9, [pc, #324]	; 12658 <main@@Base+0x198>
   12510:	add	r6, r7, #40	; 0x28
   12514:	add	sl, r7, #48	; 0x30
   12518:	add	r9, pc, r9
   1251c:	b	12558 <main@@Base+0x98>
   12520:	ldrd	r2, [r0]
   12524:	adds	r2, r2, #1
   12528:	adc	r3, r3, #0
   1252c:	strd	r2, [r0]
   12530:	mov	r2, r9
   12534:	ldrd	r0, [r7, #56]	; 0x38
   12538:	adds	r0, r0, #1
   1253c:	adc	r1, r1, #0
   12540:	strd	r0, [r7, #56]	; 0x38
   12544:	mov	r0, r5
   12548:	mov	r1, r4
   1254c:	bl	11ff0 <getopt@plt>
   12550:	cmn	r0, #1
   12554:	beq	12598 <main@@Base+0xd8>
   12558:	ldrd	r2, [r7, #16]
   1255c:	adds	r2, r2, #1
   12560:	adc	r3, r3, #0
   12564:	cmp	r0, #111	; 0x6f
   12568:	mov	r0, r6
   1256c:	strd	r2, [r7, #16]
   12570:	bne	12520 <main@@Base+0x60>
   12574:	ldrd	r0, [r7, #32]
   12578:	adds	r0, r0, #1
   1257c:	adc	r1, r1, #0
   12580:	strd	r0, [r7, #32]
   12584:	ldr	r0, [pc, #208]	; 1265c <main@@Base+0x19c>
   12588:	ldr	r0, [pc, r0]
   1258c:	ldr	r8, [r0]
   12590:	mov	r0, sl
   12594:	b	12520 <main@@Base+0x60>
   12598:	ldrd	r0, [r7, #24]
   1259c:	adds	r0, r0, #1
   125a0:	adc	r1, r1, #0
   125a4:	strd	r0, [r7, #24]
   125a8:	ldr	r0, [pc, #176]	; 12660 <main@@Base+0x1a0>
   125ac:	ldr	r0, [pc, r0]
   125b0:	ldr	r0, [r0]
   125b4:	cmp	r0, r5
   125b8:	bge	12608 <main@@Base+0x148>
   125bc:	ldrd	r2, [r7, #64]	; 0x40
   125c0:	ldr	r6, [r7, #80]	; 0x50
   125c4:	ldr	r1, [r7, #84]	; 0x54
   125c8:	adds	r2, r2, #1
   125cc:	adc	r3, r3, #0
   125d0:	adds	r6, r6, #1
   125d4:	adc	r1, r1, #0
   125d8:	str	r6, [r7, #80]	; 0x50
   125dc:	strd	r2, [r7, #64]	; 0x40
   125e0:	cmp	r8, #0
   125e4:	str	r1, [r7, #84]	; 0x54
   125e8:	ldr	r0, [r4, r0, lsl #2]
   125ec:	ldr	r1, [pc, #112]	; 12664 <main@@Base+0x1a4>
   125f0:	add	r1, pc, r1
   125f4:	movne	r1, r8
   125f8:	bl	12400 <my_main@@Base>
   125fc:	mov	r0, #0
   12600:	sub	sp, fp, #28
   12604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12608:	ldrd	r0, [r7, #72]	; 0x48
   1260c:	mov	r2, #1
   12610:	adds	r0, r0, #1
   12614:	adc	r1, r1, #0
   12618:	strd	r0, [r7, #72]	; 0x48
   1261c:	mov	r1, #45	; 0x2d
   12620:	ldr	r0, [pc, #64]	; 12668 <main@@Base+0x1a8>
   12624:	ldr	r0, [pc, r0]
   12628:	ldr	r3, [r0]
   1262c:	ldr	r0, [pc, #56]	; 1266c <main@@Base+0x1ac>
   12630:	add	r0, pc, r0
   12634:	bl	11f6c <fwrite@plt>
   12638:	mov	r0, #1
   1263c:	bl	11fcc <exit@plt>
   12640:	andeq	r0, r0, r1
   12644:	andeq	r0, r0, r0
   12648:	andeq	r0, r0, r1
   1264c:	andeq	r0, r0, r0
   12650:	andeq	sl, r1, r4, lsl #25
   12654:	andeq	r8, r0, lr, ror sl
   12658:	andeq	r8, r0, lr, asr sl
   1265c:	andeq	sl, r1, ip, lsr fp
   12660:	andeq	sl, r1, ip, lsl #22
   12664:	andeq	r8, r0, r9, lsl #19
   12668:	muleq	r1, r8, sl
   1266c:	andeq	r8, r0, sp, asr #18
   12670:	push	{r4, lr}
   12674:	sub	sp, sp, #8
   12678:	ldr	r0, [pc, #184]	; 12738 <main@@Base+0x278>
   1267c:	ldr	r1, [pc, #184]	; 1273c <main@@Base+0x27c>
   12680:	movw	r4, #61536	; 0xf060
   12684:	movt	r4, #32426	; 0x7eaa
   12688:	mov	r2, r4
   1268c:	add	r0, pc, r0
   12690:	add	r1, pc, r1
   12694:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   12698:	str	r4, [sp]
   1269c:	movw	r2, #54228	; 0xd3d4
   126a0:	mov	r0, #0
   126a4:	mov	r3, #0
   126a8:	ldr	r1, [pc, #144]	; 12740 <main@@Base+0x280>
   126ac:	movt	r2, #56367	; 0xdc2f
   126b0:	add	r1, pc, r1
   126b4:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   126b8:	ldr	r1, [pc, #132]	; 12744 <main@@Base+0x284>
   126bc:	mov	r0, #14
   126c0:	add	r1, pc, r1
   126c4:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   126c8:	str	r4, [sp]
   126cc:	movw	r2, #56469	; 0xdc95
   126d0:	mov	r0, #1
   126d4:	mov	r3, #0
   126d8:	ldr	r1, [pc, #104]	; 12748 <main@@Base+0x288>
   126dc:	movt	r2, #34894	; 0x884e
   126e0:	add	r1, pc, r1
   126e4:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   126e8:	ldr	r1, [pc, #92]	; 1274c <main@@Base+0x28c>
   126ec:	mov	r0, #2
   126f0:	add	r1, pc, r1
   126f4:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   126f8:	str	r4, [sp]
   126fc:	movw	r2, #34236	; 0x85bc
   12700:	mov	r0, #2
   12704:	mov	r3, #0
   12708:	ldr	r1, [pc, #64]	; 12750 <main@@Base+0x290>
   1270c:	movt	r2, #57659	; 0xe13b
   12710:	add	r1, pc, r1
   12714:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   12718:	ldr	r1, [pc, #52]	; 12754 <main@@Base+0x294>
   1271c:	mov	r0, #11
   12720:	add	r1, pc, r1
   12724:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   12728:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   1272c:	add	sp, sp, #8
   12730:	pop	{r4, lr}
   12734:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   12738:	andeq	r8, r0, pc, lsl r9
   1273c:	andeq	r8, r0, r0, lsl #19
   12740:	andeq	r8, r0, r5, ror #18
   12744:	andeq	sl, r1, r8, lsr #20
   12748:	andeq	r8, r0, pc, lsr r9
   1274c:	andeq	sl, r1, r8, ror #20
   12750:	andeq	r9, r0, ip, lsl r2
   12754:	andeq	sl, r1, r8, asr #20
   12758:	push	{fp, lr}
   1275c:	bl	12670 <main@@Base+0x1b0>
   12760:	ldr	r0, [pc, #132]	; 127ec <main@@Base+0x32c>
   12764:	vmov.i32	q8, #0	; 0x00000000
   12768:	mov	r3, #96	; 0x60
   1276c:	add	r0, pc, r0
   12770:	add	r1, r0, #80	; 0x50
   12774:	vst1.64	{d16-d17}, [r1 :128]
   12778:	add	r1, r0, #64	; 0x40
   1277c:	vst1.64	{d16-d17}, [r1 :128]
   12780:	add	r1, r0, #48	; 0x30
   12784:	vst1.64	{d16-d17}, [r1 :128]
   12788:	add	r1, r0, #32
   1278c:	vst1.64	{d16-d17}, [r1 :128]
   12790:	add	r1, r0, #16
   12794:	vst1.64	{d16-d17}, [r1 :128]
   12798:	ldr	r1, [pc, #80]	; 127f0 <main@@Base+0x330>
   1279c:	add	r1, pc, r1
   127a0:	vst1.64	{d16-d17}, [r1 :128]
   127a4:	ldr	r1, [pc, #72]	; 127f4 <main@@Base+0x334>
   127a8:	vst1.64	{d16-d17}, [r0 :128], r3
   127ac:	vst1.64	{d16-d17}, [r0 :128]
   127b0:	mov	r0, #84	; 0x54
   127b4:	add	r1, pc, r1
   127b8:	add	r2, r1, #16
   127bc:	vst1.64	{d16-d17}, [r2 :128]
   127c0:	add	r2, r1, #32
   127c4:	vst1.64	{d16-d17}, [r2 :128]
   127c8:	add	r2, r1, #48	; 0x30
   127cc:	vst1.64	{d16-d17}, [r2 :128]
   127d0:	add	r2, r1, #64	; 0x40
   127d4:	vst1.64	{d16-d17}, [r2 :128]
   127d8:	mov	r2, #0
   127dc:	str	r2, [r1, #80]	; 0x50
   127e0:	vst1.64	{d16-d17}, [r1 :128], r0
   127e4:	str	r2, [r1]
   127e8:	pop	{fp, pc}
   127ec:	andeq	sl, r1, ip, ror r9
   127f0:			; <UNDEFINED> instruction: 0x0001a9bc
   127f4:			; <UNDEFINED> instruction: 0x0001a9b4
   127f8:	ldr	r0, [pc, #12]	; 1280c <main@@Base+0x34c>
   127fc:	ldr	r1, [pc, #12]	; 12810 <main@@Base+0x350>
   12800:	add	r0, pc, r0
   12804:	add	r1, pc, r1
   12808:	b	1a83c <__gcov_flush@@Base+0xb8>
   1280c:			; <UNDEFINED> instruction: 0xfffffe68
   12810:			; <UNDEFINED> instruction: 0xffffff4c
	...

00012820 <init_token_int_type@@Base>:
   12820:	ldr	r1, [pc, #56]	; 12860 <init_token_int_type@@Base+0x40>
   12824:	add	r2, pc, #36	; 0x24
   12828:	vld1.64	{d16-d17}, [r2 :128]
   1282c:	add	r1, pc, r1
   12830:	vld1.64	{d18-d19}, [r1 :128]
   12834:	vadd.i64	q8, q9, q8
   12838:	vst1.64	{d16-d17}, [r1 :128]
   1283c:	mov	r1, #0
   12840:	str	r1, [r0]
   12844:	bx	lr
   12848:	nop	{0}
   1284c:	nop	{0}
   12850:	andeq	r0, r0, r1
   12854:	andeq	r0, r0, r0
   12858:	andeq	r0, r0, r1
   1285c:	andeq	r0, r0, r0
   12860:	muleq	r1, ip, r9
   12864:	nop	{0}
   12868:	nop	{0}
   1286c:	nop	{0}

00012870 <init_token_int_value@@Base>:
   12870:	ldr	r2, [pc, #56]	; 128b0 <init_token_int_value@@Base+0x40>
   12874:	add	r3, pc, #36	; 0x24
   12878:	vld1.64	{d16-d17}, [r3 :128]
   1287c:	add	r2, pc, r2
   12880:	vld1.64	{d18-d19}, [r2 :128]
   12884:	vadd.i64	q8, q9, q8
   12888:	vst1.64	{d16-d17}, [r2 :128]
   1288c:	mov	r2, #1
   12890:	str	r2, [r0]
   12894:	str	r1, [r0, #4]
   12898:	bx	lr
   1289c:	nop	{0}
   128a0:	andeq	r0, r0, r1
   128a4:	andeq	r0, r0, r0
   128a8:	andeq	r0, r0, r1
   128ac:	andeq	r0, r0, r0
   128b0:	andeq	sl, r1, ip, asr r9
   128b4:	nop	{0}
   128b8:	nop	{0}
   128bc:	nop	{0}

000128c0 <init_token_function@@Base>:
   128c0:	ldr	r2, [pc, #56]	; 12900 <init_token_function@@Base+0x40>
   128c4:	add	r3, pc, #36	; 0x24
   128c8:	vld1.64	{d16-d17}, [r3 :128]
   128cc:	add	r2, pc, r2
   128d0:	vld1.64	{d18-d19}, [r2 :128]
   128d4:	vadd.i64	q8, q9, q8
   128d8:	vst1.64	{d16-d17}, [r2 :128]
   128dc:	mov	r2, #2
   128e0:	str	r2, [r0]
   128e4:	str	r1, [r0, #4]
   128e8:	bx	lr
   128ec:	nop	{0}
   128f0:	andeq	r0, r0, r1
   128f4:	andeq	r0, r0, r0
   128f8:	andeq	r0, r0, r1
   128fc:	andeq	r0, r0, r0
   12900:	andeq	sl, r1, ip, lsl r9
   12904:	nop	{0}
   12908:	nop	{0}
   1290c:	nop	{0}

00012910 <init_token_opar@@Base>:
   12910:	ldr	r1, [pc, #56]	; 12950 <init_token_opar@@Base+0x40>
   12914:	add	r2, pc, #36	; 0x24
   12918:	vld1.64	{d16-d17}, [r2 :128]
   1291c:	add	r1, pc, r1
   12920:	vld1.64	{d18-d19}, [r1 :128]
   12924:	vadd.i64	q8, q9, q8
   12928:	vst1.64	{d16-d17}, [r1 :128]
   1292c:	mov	r1, #3
   12930:	str	r1, [r0]
   12934:	bx	lr
   12938:	nop	{0}
   1293c:	nop	{0}
   12940:	andeq	r0, r0, r1
   12944:	andeq	r0, r0, r0
   12948:	andeq	r0, r0, r1
   1294c:	andeq	r0, r0, r0
   12950:	ldrdeq	sl, [r1], -ip
   12954:	nop	{0}
   12958:	nop	{0}
   1295c:	nop	{0}

00012960 <init_token_cpar@@Base>:
   12960:	ldr	r1, [pc, #56]	; 129a0 <init_token_cpar@@Base+0x40>
   12964:	add	r2, pc, #36	; 0x24
   12968:	vld1.64	{d16-d17}, [r2 :128]
   1296c:	add	r1, pc, r1
   12970:	vld1.64	{d18-d19}, [r1 :128]
   12974:	vadd.i64	q8, q9, q8
   12978:	vst1.64	{d16-d17}, [r1 :128]
   1297c:	mov	r1, #4
   12980:	str	r1, [r0]
   12984:	bx	lr
   12988:	nop	{0}
   1298c:	nop	{0}
   12990:	andeq	r0, r0, r1
   12994:	andeq	r0, r0, r0
   12998:	andeq	r0, r0, r1
   1299c:	andeq	r0, r0, r0
   129a0:	muleq	r1, ip, r8
   129a4:	nop	{0}
   129a8:	nop	{0}
   129ac:	nop	{0}

000129b0 <init_token_obra@@Base>:
   129b0:	ldr	r1, [pc, #56]	; 129f0 <init_token_obra@@Base+0x40>
   129b4:	add	r2, pc, #36	; 0x24
   129b8:	vld1.64	{d16-d17}, [r2 :128]
   129bc:	add	r1, pc, r1
   129c0:	vld1.64	{d18-d19}, [r1 :128]
   129c4:	vadd.i64	q8, q9, q8
   129c8:	vst1.64	{d16-d17}, [r1 :128]
   129cc:	mov	r1, #5
   129d0:	str	r1, [r0]
   129d4:	bx	lr
   129d8:	nop	{0}
   129dc:	nop	{0}
   129e0:	andeq	r0, r0, r1
   129e4:	andeq	r0, r0, r0
   129e8:	andeq	r0, r0, r1
   129ec:	andeq	r0, r0, r0
   129f0:	andeq	sl, r1, ip, asr r8
   129f4:	nop	{0}
   129f8:	nop	{0}
   129fc:	nop	{0}

00012a00 <init_token_cbra@@Base>:
   12a00:	ldr	r1, [pc, #56]	; 12a40 <init_token_cbra@@Base+0x40>
   12a04:	add	r2, pc, #36	; 0x24
   12a08:	vld1.64	{d16-d17}, [r2 :128]
   12a0c:	add	r1, pc, r1
   12a10:	vld1.64	{d18-d19}, [r1 :128]
   12a14:	vadd.i64	q8, q9, q8
   12a18:	vst1.64	{d16-d17}, [r1 :128]
   12a1c:	mov	r1, #6
   12a20:	str	r1, [r0]
   12a24:	bx	lr
   12a28:	nop	{0}
   12a2c:	nop	{0}
   12a30:	andeq	r0, r0, r1
   12a34:	andeq	r0, r0, r0
   12a38:	andeq	r0, r0, r1
   12a3c:	andeq	r0, r0, r0
   12a40:	andeq	sl, r1, ip, lsl r8
   12a44:	nop	{0}
   12a48:	nop	{0}
   12a4c:	nop	{0}

00012a50 <init_token_return@@Base>:
   12a50:	ldr	r1, [pc, #56]	; 12a90 <init_token_return@@Base+0x40>
   12a54:	add	r2, pc, #36	; 0x24
   12a58:	vld1.64	{d16-d17}, [r2 :128]
   12a5c:	add	r1, pc, r1
   12a60:	vld1.64	{d18-d19}, [r1 :128]
   12a64:	vadd.i64	q8, q9, q8
   12a68:	vst1.64	{d16-d17}, [r1 :128]
   12a6c:	mov	r1, #7
   12a70:	str	r1, [r0]
   12a74:	bx	lr
   12a78:	nop	{0}
   12a7c:	nop	{0}
   12a80:	andeq	r0, r0, r1
   12a84:	andeq	r0, r0, r0
   12a88:	andeq	r0, r0, r1
   12a8c:	andeq	r0, r0, r0
   12a90:	ldrdeq	sl, [r1], -ip
   12a94:	nop	{0}
   12a98:	nop	{0}
   12a9c:	nop	{0}

00012aa0 <init_token_semicolon@@Base>:
   12aa0:	ldr	r1, [pc, #56]	; 12ae0 <init_token_semicolon@@Base+0x40>
   12aa4:	add	r2, pc, #36	; 0x24
   12aa8:	vld1.64	{d16-d17}, [r2 :128]
   12aac:	add	r1, pc, r1
   12ab0:	vld1.64	{d18-d19}, [r1 :128]
   12ab4:	vadd.i64	q8, q9, q8
   12ab8:	vst1.64	{d16-d17}, [r1 :128]
   12abc:	mov	r1, #8
   12ac0:	str	r1, [r0]
   12ac4:	bx	lr
   12ac8:	nop	{0}
   12acc:	nop	{0}
   12ad0:	andeq	r0, r0, r1
   12ad4:	andeq	r0, r0, r0
   12ad8:	andeq	r0, r0, r1
   12adc:	andeq	r0, r0, r0
   12ae0:	muleq	r1, ip, r7
   12ae4:	nop	{0}
   12ae8:	nop	{0}
   12aec:	nop	{0}

00012af0 <init_token_eof@@Base>:
   12af0:	ldr	r1, [pc, #56]	; 12b30 <init_token_eof@@Base+0x40>
   12af4:	add	r2, pc, #36	; 0x24
   12af8:	vld1.64	{d16-d17}, [r2 :128]
   12afc:	add	r1, pc, r1
   12b00:	vld1.64	{d18-d19}, [r1 :128]
   12b04:	vadd.i64	q8, q9, q8
   12b08:	vst1.64	{d16-d17}, [r1 :128]
   12b0c:	mov	r1, #9
   12b10:	str	r1, [r0]
   12b14:	bx	lr
   12b18:	nop	{0}
   12b1c:	nop	{0}
   12b20:	andeq	r0, r0, r1
   12b24:	andeq	r0, r0, r0
   12b28:	andeq	r0, r0, r1
   12b2c:	andeq	r0, r0, r0
   12b30:	andeq	sl, r1, ip, asr r7
   12b34:	nop	{0}
   12b38:	nop	{0}
   12b3c:	nop	{0}

00012b40 <init_token_if@@Base>:
   12b40:	ldr	r1, [pc, #56]	; 12b80 <init_token_if@@Base+0x40>
   12b44:	add	r2, pc, #36	; 0x24
   12b48:	vld1.64	{d16-d17}, [r2 :128]
   12b4c:	add	r1, pc, r1
   12b50:	vld1.64	{d18-d19}, [r1 :128]
   12b54:	vadd.i64	q8, q9, q8
   12b58:	vst1.64	{d16-d17}, [r1 :128]
   12b5c:	mov	r1, #10
   12b60:	str	r1, [r0]
   12b64:	bx	lr
   12b68:	nop	{0}
   12b6c:	nop	{0}
   12b70:	andeq	r0, r0, r1
   12b74:	andeq	r0, r0, r0
   12b78:	andeq	r0, r0, r1
   12b7c:	andeq	r0, r0, r0
   12b80:	andeq	sl, r1, ip, lsl r7
   12b84:	nop	{0}
   12b88:	nop	{0}
   12b8c:	nop	{0}

00012b90 <init_token_else@@Base>:
   12b90:	ldr	r1, [pc, #56]	; 12bd0 <init_token_else@@Base+0x40>
   12b94:	add	r2, pc, #36	; 0x24
   12b98:	vld1.64	{d16-d17}, [r2 :128]
   12b9c:	add	r1, pc, r1
   12ba0:	vld1.64	{d18-d19}, [r1 :128]
   12ba4:	vadd.i64	q8, q9, q8
   12ba8:	vst1.64	{d16-d17}, [r1 :128]
   12bac:	mov	r1, #11
   12bb0:	str	r1, [r0]
   12bb4:	bx	lr
   12bb8:	nop	{0}
   12bbc:	nop	{0}
   12bc0:	andeq	r0, r0, r1
   12bc4:	andeq	r0, r0, r0
   12bc8:	andeq	r0, r0, r1
   12bcc:	andeq	r0, r0, r0
   12bd0:	ldrdeq	sl, [r1], -ip
   12bd4:	nop	{0}
   12bd8:	nop	{0}
   12bdc:	nop	{0}

00012be0 <init_token_boolean_op@@Base>:
   12be0:	ldr	r2, [pc, #56]	; 12c20 <init_token_boolean_op@@Base+0x40>
   12be4:	add	r3, pc, #36	; 0x24
   12be8:	vld1.64	{d16-d17}, [r3 :128]
   12bec:	add	r2, pc, r2
   12bf0:	vld1.64	{d18-d19}, [r2 :128]
   12bf4:	vadd.i64	q8, q9, q8
   12bf8:	vst1.64	{d16-d17}, [r2 :128]
   12bfc:	mov	r2, #12
   12c00:	str	r2, [r0]
   12c04:	str	r1, [r0, #4]
   12c08:	bx	lr
   12c0c:	nop	{0}
   12c10:	andeq	r0, r0, r1
   12c14:	andeq	r0, r0, r0
   12c18:	andeq	r0, r0, r1
   12c1c:	andeq	r0, r0, r0
   12c20:	muleq	r1, ip, r6
   12c24:	nop	{0}
   12c28:	nop	{0}
   12c2c:	nop	{0}

00012c30 <free_token_int_type@@Base>:
   12c30:	ldr	r1, [pc, #40]	; 12c60 <free_token_int_type@@Base+0x30>
   12c34:	add	r2, pc, #20
   12c38:	vld1.64	{d16-d17}, [r2 :128]
   12c3c:	add	r1, pc, r1
   12c40:	vld1.64	{d18-d19}, [r1 :128]
   12c44:	vadd.i64	q8, q9, q8
   12c48:	vst1.64	{d16-d17}, [r1 :128]
   12c4c:	b	11f18 <free@plt>
   12c50:	andeq	r0, r0, r1
   12c54:	andeq	r0, r0, r0
   12c58:	andeq	r0, r0, r1
   12c5c:	andeq	r0, r0, r0
   12c60:	andeq	sl, r1, ip, asr r6
   12c64:	nop	{0}
   12c68:	nop	{0}
   12c6c:	nop	{0}

00012c70 <free_token_int_value@@Base>:
   12c70:	ldr	r1, [pc, #40]	; 12ca0 <free_token_int_value@@Base+0x30>
   12c74:	add	r2, pc, #20
   12c78:	vld1.64	{d16-d17}, [r2 :128]
   12c7c:	add	r1, pc, r1
   12c80:	vld1.64	{d18-d19}, [r1 :128]
   12c84:	vadd.i64	q8, q9, q8
   12c88:	vst1.64	{d16-d17}, [r1 :128]
   12c8c:	b	11f18 <free@plt>
   12c90:	andeq	r0, r0, r1
   12c94:	andeq	r0, r0, r0
   12c98:	andeq	r0, r0, r1
   12c9c:	andeq	r0, r0, r0
   12ca0:	andeq	sl, r1, ip, lsr #12
   12ca4:	nop	{0}
   12ca8:	nop	{0}
   12cac:	nop	{0}

00012cb0 <free_token_function@@Base>:
   12cb0:	ldr	r1, [pc, #40]	; 12ce0 <free_token_function@@Base+0x30>
   12cb4:	add	r2, pc, #20
   12cb8:	vld1.64	{d16-d17}, [r2 :128]
   12cbc:	add	r1, pc, r1
   12cc0:	vld1.64	{d18-d19}, [r1 :128]
   12cc4:	vadd.i64	q8, q9, q8
   12cc8:	vst1.64	{d16-d17}, [r1 :128]
   12ccc:	b	11f18 <free@plt>
   12cd0:	andeq	r0, r0, r1
   12cd4:	andeq	r0, r0, r0
   12cd8:	andeq	r0, r0, r1
   12cdc:	andeq	r0, r0, r0
   12ce0:	strdeq	sl, [r1], -ip
   12ce4:	nop	{0}
   12ce8:	nop	{0}
   12cec:	nop	{0}

00012cf0 <free_token_opar@@Base>:
   12cf0:	ldr	r1, [pc, #40]	; 12d20 <free_token_opar@@Base+0x30>
   12cf4:	add	r2, pc, #20
   12cf8:	vld1.64	{d16-d17}, [r2 :128]
   12cfc:	add	r1, pc, r1
   12d00:	vld1.64	{d18-d19}, [r1 :128]
   12d04:	vadd.i64	q8, q9, q8
   12d08:	vst1.64	{d16-d17}, [r1 :128]
   12d0c:	b	11f18 <free@plt>
   12d10:	andeq	r0, r0, r1
   12d14:	andeq	r0, r0, r0
   12d18:	andeq	r0, r0, r1
   12d1c:	andeq	r0, r0, r0
   12d20:	andeq	sl, r1, ip, asr #11
   12d24:	nop	{0}
   12d28:	nop	{0}
   12d2c:	nop	{0}

00012d30 <free_token_cpar@@Base>:
   12d30:	ldr	r1, [pc, #40]	; 12d60 <free_token_cpar@@Base+0x30>
   12d34:	add	r2, pc, #20
   12d38:	vld1.64	{d16-d17}, [r2 :128]
   12d3c:	add	r1, pc, r1
   12d40:	vld1.64	{d18-d19}, [r1 :128]
   12d44:	vadd.i64	q8, q9, q8
   12d48:	vst1.64	{d16-d17}, [r1 :128]
   12d4c:	b	11f18 <free@plt>
   12d50:	andeq	r0, r0, r1
   12d54:	andeq	r0, r0, r0
   12d58:	andeq	r0, r0, r1
   12d5c:	andeq	r0, r0, r0
   12d60:	muleq	r1, ip, r5
   12d64:	nop	{0}
   12d68:	nop	{0}
   12d6c:	nop	{0}

00012d70 <free_token_obra@@Base>:
   12d70:	ldr	r1, [pc, #40]	; 12da0 <free_token_obra@@Base+0x30>
   12d74:	add	r2, pc, #20
   12d78:	vld1.64	{d16-d17}, [r2 :128]
   12d7c:	add	r1, pc, r1
   12d80:	vld1.64	{d18-d19}, [r1 :128]
   12d84:	vadd.i64	q8, q9, q8
   12d88:	vst1.64	{d16-d17}, [r1 :128]
   12d8c:	b	11f18 <free@plt>
   12d90:	andeq	r0, r0, r1
   12d94:	andeq	r0, r0, r0
   12d98:	andeq	r0, r0, r1
   12d9c:	andeq	r0, r0, r0
   12da0:	andeq	sl, r1, ip, ror #10
   12da4:	nop	{0}
   12da8:	nop	{0}
   12dac:	nop	{0}

00012db0 <free_token_cbra@@Base>:
   12db0:	ldr	r1, [pc, #40]	; 12de0 <free_token_cbra@@Base+0x30>
   12db4:	add	r2, pc, #20
   12db8:	vld1.64	{d16-d17}, [r2 :128]
   12dbc:	add	r1, pc, r1
   12dc0:	vld1.64	{d18-d19}, [r1 :128]
   12dc4:	vadd.i64	q8, q9, q8
   12dc8:	vst1.64	{d16-d17}, [r1 :128]
   12dcc:	b	11f18 <free@plt>
   12dd0:	andeq	r0, r0, r1
   12dd4:	andeq	r0, r0, r0
   12dd8:	andeq	r0, r0, r1
   12ddc:	andeq	r0, r0, r0
   12de0:	andeq	sl, r1, ip, lsr r5
   12de4:	nop	{0}
   12de8:	nop	{0}
   12dec:	nop	{0}

00012df0 <free_token_return@@Base>:
   12df0:	ldr	r1, [pc, #40]	; 12e20 <free_token_return@@Base+0x30>
   12df4:	add	r2, pc, #20
   12df8:	vld1.64	{d16-d17}, [r2 :128]
   12dfc:	add	r1, pc, r1
   12e00:	vld1.64	{d18-d19}, [r1 :128]
   12e04:	vadd.i64	q8, q9, q8
   12e08:	vst1.64	{d16-d17}, [r1 :128]
   12e0c:	b	11f18 <free@plt>
   12e10:	andeq	r0, r0, r1
   12e14:	andeq	r0, r0, r0
   12e18:	andeq	r0, r0, r1
   12e1c:	andeq	r0, r0, r0
   12e20:	andeq	sl, r1, ip, lsl #10
   12e24:	nop	{0}
   12e28:	nop	{0}
   12e2c:	nop	{0}

00012e30 <free_token_semicolon@@Base>:
   12e30:	ldr	r1, [pc, #40]	; 12e60 <free_token_semicolon@@Base+0x30>
   12e34:	add	r2, pc, #20
   12e38:	vld1.64	{d16-d17}, [r2 :128]
   12e3c:	add	r1, pc, r1
   12e40:	vld1.64	{d18-d19}, [r1 :128]
   12e44:	vadd.i64	q8, q9, q8
   12e48:	vst1.64	{d16-d17}, [r1 :128]
   12e4c:	b	11f18 <free@plt>
   12e50:	andeq	r0, r0, r1
   12e54:	andeq	r0, r0, r0
   12e58:	andeq	r0, r0, r1
   12e5c:	andeq	r0, r0, r0
   12e60:	ldrdeq	sl, [r1], -ip
   12e64:	nop	{0}
   12e68:	nop	{0}
   12e6c:	nop	{0}

00012e70 <free_token_eof@@Base>:
   12e70:	ldr	r1, [pc, #40]	; 12ea0 <free_token_eof@@Base+0x30>
   12e74:	add	r2, pc, #20
   12e78:	vld1.64	{d16-d17}, [r2 :128]
   12e7c:	add	r1, pc, r1
   12e80:	vld1.64	{d18-d19}, [r1 :128]
   12e84:	vadd.i64	q8, q9, q8
   12e88:	vst1.64	{d16-d17}, [r1 :128]
   12e8c:	b	11f18 <free@plt>
   12e90:	andeq	r0, r0, r1
   12e94:	andeq	r0, r0, r0
   12e98:	andeq	r0, r0, r1
   12e9c:	andeq	r0, r0, r0
   12ea0:	andeq	sl, r1, ip, lsr #9
   12ea4:	nop	{0}
   12ea8:	nop	{0}
   12eac:	nop	{0}

00012eb0 <free_token_if@@Base>:
   12eb0:	ldr	r1, [pc, #40]	; 12ee0 <free_token_if@@Base+0x30>
   12eb4:	add	r2, pc, #20
   12eb8:	vld1.64	{d16-d17}, [r2 :128]
   12ebc:	add	r1, pc, r1
   12ec0:	vld1.64	{d18-d19}, [r1 :128]
   12ec4:	vadd.i64	q8, q9, q8
   12ec8:	vst1.64	{d16-d17}, [r1 :128]
   12ecc:	b	11f18 <free@plt>
   12ed0:	andeq	r0, r0, r1
   12ed4:	andeq	r0, r0, r0
   12ed8:	andeq	r0, r0, r1
   12edc:	andeq	r0, r0, r0
   12ee0:	andeq	sl, r1, ip, ror r4
   12ee4:	nop	{0}
   12ee8:	nop	{0}
   12eec:	nop	{0}

00012ef0 <free_token_else@@Base>:
   12ef0:	ldr	r1, [pc, #40]	; 12f20 <free_token_else@@Base+0x30>
   12ef4:	add	r2, pc, #20
   12ef8:	vld1.64	{d16-d17}, [r2 :128]
   12efc:	add	r1, pc, r1
   12f00:	vld1.64	{d18-d19}, [r1 :128]
   12f04:	vadd.i64	q8, q9, q8
   12f08:	vst1.64	{d16-d17}, [r1 :128]
   12f0c:	b	11f18 <free@plt>
   12f10:	andeq	r0, r0, r1
   12f14:	andeq	r0, r0, r0
   12f18:	andeq	r0, r0, r1
   12f1c:	andeq	r0, r0, r0
   12f20:	andeq	sl, r1, ip, asr #8

00012f24 <free_token_boolean_op@@Base>:
   12f24:	push	{r4, r5, fp, lr}
   12f28:	add	fp, sp, #8
   12f2c:	ldr	r5, [pc, #120]	; 12fac <free_token_boolean_op@@Base+0x88>
   12f30:	mov	r4, r0
   12f34:	ldr	r0, [pc, #116]	; 12fb0 <free_token_boolean_op@@Base+0x8c>
   12f38:	ldr	r0, [pc, r0]
   12f3c:	add	r5, pc, r5
   12f40:	adds	r0, r0, #1
   12f44:	str	r0, [r5]
   12f48:	ldr	r0, [r5, #4]
   12f4c:	adc	r0, r0, #0
   12f50:	str	r0, [r5, #4]
   12f54:	ldr	r0, [r4, #4]
   12f58:	cmp	r0, #0
   12f5c:	beq	12f7c <free_token_boolean_op@@Base+0x58>
   12f60:	ldrd	r2, [r5, #8]
   12f64:	adds	r2, r2, #1
   12f68:	adc	r3, r3, #0
   12f6c:	strd	r2, [r5, #8]
   12f70:	bl	11f18 <free@plt>
   12f74:	add	r0, r5, #24
   12f78:	b	12f80 <free_token_boolean_op@@Base+0x5c>
   12f7c:	add	r0, r5, #16
   12f80:	ldrd	r2, [r0]
   12f84:	adds	r2, r2, #1
   12f88:	adc	r3, r3, #0
   12f8c:	strd	r2, [r0]
   12f90:	ldrd	r0, [r5, #32]
   12f94:	adds	r0, r0, #1
   12f98:	adc	r1, r1, #0
   12f9c:	strd	r0, [r5, #32]
   12fa0:	mov	r0, r4
   12fa4:	pop	{r4, r5, fp, lr}
   12fa8:	b	11f18 <free@plt>
   12fac:	andeq	sl, r1, ip, lsl r4
   12fb0:	andeq	sl, r1, r0, lsr #8
   12fb4:	push	{r4, r5, r6, lr}
   12fb8:	sub	sp, sp, #8
   12fbc:	ldr	r0, [pc, #112]	; 13034 <free_token_boolean_op@@Base+0x110>
   12fc0:	ldr	r1, [pc, #112]	; 13038 <free_token_boolean_op@@Base+0x114>
   12fc4:	movw	r2, #23366	; 0x5b46
   12fc8:	movt	r2, #47030	; 0xb7b6
   12fcc:	add	r0, pc, r0
   12fd0:	add	r1, pc, r1
   12fd4:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   12fd8:	ldr	r0, [pc, #92]	; 1303c <free_token_boolean_op@@Base+0x118>
   12fdc:	ldr	r6, [pc, #92]	; 13040 <free_token_boolean_op@@Base+0x11c>
   12fe0:	mov	r5, #0
   12fe4:	add	r0, pc, r0
   12fe8:	add	r6, pc, r6
   12fec:	add	r4, r0, #4
   12ff0:	mov	r3, r6
   12ff4:	ldr	r0, [r3, r5]!
   12ff8:	ldr	r1, [r3, #16]
   12ffc:	str	r1, [sp]
   13000:	ldmib	r3, {r1, r2}
   13004:	ldrb	r3, [r3, #12]
   13008:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   1300c:	ldrd	r0, [r4, #-4]
   13010:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   13014:	add	r5, r5, #20
   13018:	add	r4, r4, #8
   1301c:	cmp	r5, #520	; 0x208
   13020:	bne	12ff0 <free_token_boolean_op@@Base+0xcc>
   13024:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   13028:	add	sp, sp, #8
   1302c:	pop	{r4, r5, r6, lr}
   13030:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   13034:	andeq	r8, r0, fp, asr r0
   13038:	andeq	r8, r0, r0, asr #32
   1303c:	andeq	r9, r1, r4, asr #17
   13040:			; <UNDEFINED> instruction: 0x000196b0
   13044:	push	{fp, lr}
   13048:	bl	12fb4 <free_token_boolean_op@@Base+0x90>
   1304c:	ldr	r0, [pc, #336]	; 131a4 <free_token_boolean_op@@Base+0x280>
   13050:	vmov.i32	q8, #0	; 0x00000000
   13054:	mov	r1, #0
   13058:	add	r0, pc, r0
   1305c:	vst1.64	{d16-d17}, [r0 :128]
   13060:	ldr	r0, [pc, #320]	; 131a8 <free_token_boolean_op@@Base+0x284>
   13064:	add	r0, pc, r0
   13068:	vst1.64	{d16-d17}, [r0 :128]
   1306c:	ldr	r0, [pc, #312]	; 131ac <free_token_boolean_op@@Base+0x288>
   13070:	add	r0, pc, r0
   13074:	vst1.64	{d16-d17}, [r0 :128]
   13078:	ldr	r0, [pc, #304]	; 131b0 <free_token_boolean_op@@Base+0x28c>
   1307c:	add	r0, pc, r0
   13080:	vst1.64	{d16-d17}, [r0 :128]
   13084:	ldr	r0, [pc, #296]	; 131b4 <free_token_boolean_op@@Base+0x290>
   13088:	add	r0, pc, r0
   1308c:	vst1.64	{d16-d17}, [r0 :128]
   13090:	ldr	r0, [pc, #288]	; 131b8 <free_token_boolean_op@@Base+0x294>
   13094:	add	r0, pc, r0
   13098:	vst1.64	{d16-d17}, [r0 :128]
   1309c:	ldr	r0, [pc, #280]	; 131bc <free_token_boolean_op@@Base+0x298>
   130a0:	add	r0, pc, r0
   130a4:	vst1.64	{d16-d17}, [r0 :128]
   130a8:	ldr	r0, [pc, #272]	; 131c0 <free_token_boolean_op@@Base+0x29c>
   130ac:	add	r0, pc, r0
   130b0:	vst1.64	{d16-d17}, [r0 :128]
   130b4:	ldr	r0, [pc, #264]	; 131c4 <free_token_boolean_op@@Base+0x2a0>
   130b8:	add	r0, pc, r0
   130bc:	vst1.64	{d16-d17}, [r0 :128]
   130c0:	ldr	r0, [pc, #256]	; 131c8 <free_token_boolean_op@@Base+0x2a4>
   130c4:	add	r0, pc, r0
   130c8:	vst1.64	{d16-d17}, [r0 :128]
   130cc:	ldr	r0, [pc, #248]	; 131cc <free_token_boolean_op@@Base+0x2a8>
   130d0:	add	r0, pc, r0
   130d4:	vst1.64	{d16-d17}, [r0 :128]
   130d8:	ldr	r0, [pc, #240]	; 131d0 <free_token_boolean_op@@Base+0x2ac>
   130dc:	add	r0, pc, r0
   130e0:	vst1.64	{d16-d17}, [r0 :128]
   130e4:	ldr	r0, [pc, #232]	; 131d4 <free_token_boolean_op@@Base+0x2b0>
   130e8:	add	r0, pc, r0
   130ec:	vst1.64	{d16-d17}, [r0 :128]
   130f0:	ldr	r0, [pc, #224]	; 131d8 <free_token_boolean_op@@Base+0x2b4>
   130f4:	add	r0, pc, r0
   130f8:	vst1.64	{d16-d17}, [r0 :128]
   130fc:	ldr	r0, [pc, #216]	; 131dc <free_token_boolean_op@@Base+0x2b8>
   13100:	add	r0, pc, r0
   13104:	vst1.64	{d16-d17}, [r0 :128]
   13108:	ldr	r0, [pc, #208]	; 131e0 <free_token_boolean_op@@Base+0x2bc>
   1310c:	add	r0, pc, r0
   13110:	vst1.64	{d16-d17}, [r0 :128]
   13114:	ldr	r0, [pc, #200]	; 131e4 <free_token_boolean_op@@Base+0x2c0>
   13118:	add	r0, pc, r0
   1311c:	vst1.64	{d16-d17}, [r0 :128]
   13120:	ldr	r0, [pc, #192]	; 131e8 <free_token_boolean_op@@Base+0x2c4>
   13124:	add	r0, pc, r0
   13128:	vst1.64	{d16-d17}, [r0 :128]
   1312c:	ldr	r0, [pc, #184]	; 131ec <free_token_boolean_op@@Base+0x2c8>
   13130:	add	r0, pc, r0
   13134:	vst1.64	{d16-d17}, [r0 :128]
   13138:	ldr	r0, [pc, #176]	; 131f0 <free_token_boolean_op@@Base+0x2cc>
   1313c:	add	r0, pc, r0
   13140:	vst1.64	{d16-d17}, [r0 :128]
   13144:	ldr	r0, [pc, #168]	; 131f4 <free_token_boolean_op@@Base+0x2d0>
   13148:	add	r0, pc, r0
   1314c:	vst1.64	{d16-d17}, [r0 :128]
   13150:	ldr	r0, [pc, #160]	; 131f8 <free_token_boolean_op@@Base+0x2d4>
   13154:	add	r0, pc, r0
   13158:	vst1.64	{d16-d17}, [r0 :128]
   1315c:	ldr	r0, [pc, #152]	; 131fc <free_token_boolean_op@@Base+0x2d8>
   13160:	add	r0, pc, r0
   13164:	vst1.64	{d16-d17}, [r0 :128]
   13168:	ldr	r0, [pc, #144]	; 13200 <free_token_boolean_op@@Base+0x2dc>
   1316c:	add	r0, pc, r0
   13170:	vst1.64	{d16-d17}, [r0 :128]
   13174:	ldr	r0, [pc, #136]	; 13204 <free_token_boolean_op@@Base+0x2e0>
   13178:	add	r0, pc, r0
   1317c:	vst1.64	{d16-d17}, [r0 :128]
   13180:	ldr	r0, [pc, #128]	; 13208 <free_token_boolean_op@@Base+0x2e4>
   13184:	add	r0, pc, r0
   13188:	add	r2, r0, #16
   1318c:	str	r1, [r0, #32]
   13190:	vst1.64	{d16-d17}, [r2 :128]
   13194:	mov	r2, #36	; 0x24
   13198:	vst1.64	{d16-d17}, [r0 :128], r2
   1319c:	str	r1, [r0]
   131a0:	pop	{fp, pc}
   131a4:	andeq	sl, r1, r0, lsl #3
   131a8:	andeq	sl, r1, r4, ror #2
   131ac:	andeq	sl, r1, r8, ror r1
   131b0:	andeq	sl, r1, ip, ror r1
   131b4:	andeq	sl, r1, r0, lsl #3
   131b8:	andeq	sl, r1, r4, lsl #3
   131bc:	andeq	sl, r1, r8, lsl #3
   131c0:	andeq	sl, r1, ip, lsl #3
   131c4:	muleq	r1, r0, r1
   131c8:	muleq	r1, r4, r1
   131cc:	muleq	r1, r8, r1
   131d0:	muleq	r1, ip, r1
   131d4:	andeq	sl, r1, r0, lsr #3
   131d8:	andeq	sl, r1, r4, lsr #3
   131dc:	andeq	sl, r1, r8, lsr #3
   131e0:	andeq	sl, r1, ip, lsr #3
   131e4:			; <UNDEFINED> instruction: 0x0001a1b0
   131e8:			; <UNDEFINED> instruction: 0x0001a1b4
   131ec:			; <UNDEFINED> instruction: 0x0001a1b8
   131f0:			; <UNDEFINED> instruction: 0x0001a1bc
   131f4:	andeq	sl, r1, r0, asr #3
   131f8:	andeq	sl, r1, r4, asr #3
   131fc:	andeq	sl, r1, r8, asr #3
   13200:	andeq	sl, r1, ip, asr #3
   13204:	ldrdeq	sl, [r1], -r0
   13208:	ldrdeq	sl, [r1], -r4
   1320c:	ldr	r0, [pc, #12]	; 13220 <free_token_boolean_op@@Base+0x2fc>
   13210:	ldr	r1, [pc, #12]	; 13224 <free_token_boolean_op@@Base+0x300>
   13214:	add	r0, pc, r0
   13218:	add	r1, pc, r1
   1321c:	b	1a83c <__gcov_flush@@Base+0xb8>
   13220:			; <UNDEFINED> instruction: 0xfffffd98
   13224:			; <UNDEFINED> instruction: 0xfffffe24
	...

00013230 <init_lexer@@Base>:
   13230:	ldr	r2, [pc, #56]	; 13270 <init_lexer@@Base+0x40>
   13234:	add	r3, pc, #36	; 0x24
   13238:	vld1.64	{d16-d17}, [r3 :128]
   1323c:	add	r2, pc, r2
   13240:	vld1.64	{d18-d19}, [r2 :128]
   13244:	vadd.i64	q8, q9, q8
   13248:	vst1.64	{d16-d17}, [r2 :128]
   1324c:	mov	r2, #0
   13250:	stm	r0, {r1, r2}
   13254:	str	r2, [r0, #8]
   13258:	bx	lr
   1325c:	nop	{0}
   13260:	andeq	r0, r0, r1
   13264:	andeq	r0, r0, r0
   13268:	andeq	r0, r0, r1
   1326c:	andeq	r0, r0, r0
   13270:	andeq	sl, r1, ip, asr #2
   13274:	nop	{0}
   13278:	nop	{0}
   1327c:	nop	{0}

00013280 <destroy_lexer@@Base>:
   13280:	push	{r4, sl, fp, lr}
   13284:	add	fp, sp, #8
   13288:	ldr	r4, [pc, #160]	; 13330 <destroy_lexer@@Base+0xb0>
   1328c:	ldr	r1, [pc, #160]	; 13334 <destroy_lexer@@Base+0xb4>
   13290:	ldr	r1, [pc, r1]
   13294:	add	r4, pc, r4
   13298:	adds	r1, r1, #1
   1329c:	str	r1, [r4]
   132a0:	ldr	r1, [r4, #4]
   132a4:	adc	r1, r1, #0
   132a8:	str	r1, [r4, #4]
   132ac:	ldr	r0, [r0, #4]
   132b0:	cmp	r0, #0
   132b4:	beq	132f0 <destroy_lexer@@Base+0x70>
   132b8:	ldr	r1, [pc, #120]	; 13338 <destroy_lexer@@Base+0xb8>
   132bc:	add	r2, pc, #92	; 0x5c
   132c0:	vld1.64	{d16-d17}, [r2 :128]
   132c4:	ldrd	r2, [r4, #8]
   132c8:	add	r1, pc, r1
   132cc:	vld1.64	{d18-d19}, [r1 :128]
   132d0:	adds	r2, r2, #1
   132d4:	adc	r3, r3, #0
   132d8:	strd	r2, [r4, #8]
   132dc:	vadd.i64	q8, q9, q8
   132e0:	vst1.64	{d16-d17}, [r1 :128]
   132e4:	bl	11f18 <free@plt>
   132e8:	add	r0, r4, #24
   132ec:	b	132f4 <destroy_lexer@@Base+0x74>
   132f0:	add	r0, r4, #16
   132f4:	ldrd	r2, [r0]
   132f8:	adds	r2, r2, #1
   132fc:	adc	r3, r3, #0
   13300:	strd	r2, [r0]
   13304:	ldrd	r0, [r4, #32]
   13308:	adds	r0, r0, #1
   1330c:	adc	r1, r1, #0
   13310:	strd	r0, [r4, #32]
   13314:	pop	{r4, sl, fp, pc}
   13318:	nop	{0}
   1331c:	nop	{0}
   13320:	andeq	r0, r0, r1
   13324:	andeq	r0, r0, r0
   13328:	andeq	r0, r0, r1
   1332c:	andeq	r0, r0, r0
   13330:	andeq	sl, r1, r4, lsl #2
   13334:	andeq	sl, r1, r8, lsl #2
   13338:	andeq	sl, r1, r0, lsl #2
   1333c:	nop	{0}

00013340 <free_stack_base@@Base>:
   13340:	ldr	r1, [pc, #40]	; 13370 <free_stack_base@@Base+0x30>
   13344:	add	r2, pc, #20
   13348:	vld1.64	{d16-d17}, [r2 :128]
   1334c:	add	r1, pc, r1
   13350:	vld1.64	{d18-d19}, [r1 :128]
   13354:	vadd.i64	q8, q9, q8
   13358:	vst1.64	{d16-d17}, [r1 :128]
   1335c:	b	11f18 <free@plt>
   13360:	andeq	r0, r0, r1
   13364:	andeq	r0, r0, r0
   13368:	andeq	r0, r0, r1
   1336c:	andeq	r0, r0, r0
   13370:	andeq	sl, r1, ip, ror r0
   13374:	nop	{0}
   13378:	nop	{0}
   1337c:	nop	{0}

00013380 <push_back@@Base>:
   13380:	push	{r4, r5, fp, lr}
   13384:	add	fp, sp, #8
   13388:	mov	r5, r0
   1338c:	ldr	r0, [pc, #76]	; 133e0 <push_back@@Base+0x60>
   13390:	mov	r4, r1
   13394:	add	r1, pc, #52	; 0x34
   13398:	vld1.64	{d16-d17}, [r1 :128]
   1339c:	add	r0, pc, r0
   133a0:	vld1.64	{d18-d19}, [r0 :128]
   133a4:	vadd.i64	q8, q9, q8
   133a8:	vst1.64	{d16-d17}, [r0 :128]
   133ac:	mov	r0, #8
   133b0:	bl	11f90 <malloc@plt>
   133b4:	ldr	r1, [r5, #4]
   133b8:	stm	r0, {r1, r4}
   133bc:	str	r0, [r5, #4]
   133c0:	pop	{r4, r5, fp, pc}
   133c4:	nop	{0}
   133c8:	nop	{0}
   133cc:	nop	{0}
   133d0:	andeq	r0, r0, r1
   133d4:	andeq	r0, r0, r0
   133d8:	andeq	r0, r0, r1
   133dc:	andeq	r0, r0, r0
   133e0:	andeq	sl, r1, ip, lsr r0
   133e4:	nop	{0}
   133e8:	nop	{0}
   133ec:	nop	{0}

000133f0 <get_char@@Base>:
   133f0:	ldr	r1, [pc, #72]	; 13440 <get_char@@Base+0x50>
   133f4:	add	r2, pc, #52	; 0x34
   133f8:	vld1.64	{d16-d17}, [r2 :128]
   133fc:	add	r1, pc, r1
   13400:	vld1.64	{d18-d19}, [r1 :128]
   13404:	vadd.i64	q8, q9, q8
   13408:	vst1.64	{d16-d17}, [r1 :128]
   1340c:	ldr	r2, [r0, #8]
   13410:	ldr	r1, [r0]
   13414:	add	r3, r2, #1
   13418:	str	r3, [r0, #8]
   1341c:	ldrb	r0, [r1, r2]
   13420:	bx	lr
   13424:	nop	{0}
   13428:	nop	{0}
   1342c:	nop	{0}
   13430:	andeq	r0, r0, r1
   13434:	andeq	r0, r0, r0
   13438:	andeq	r0, r0, r1
   1343c:	andeq	r0, r0, r0
   13440:	andeq	r9, r1, ip, ror #31

00013444 <push_back_chars@@Base>:
   13444:	push	{r4, r5, r6, r7, fp, lr}
   13448:	add	fp, sp, #16
   1344c:	ldr	r2, [pc, #144]	; 134e4 <push_back_chars@@Base+0xa0>
   13450:	ldr	r3, [pc, #144]	; 134e8 <push_back_chars@@Base+0xa4>
   13454:	ldr	r3, [pc, r3]
   13458:	add	r2, pc, r2
   1345c:	adds	r3, r3, #1
   13460:	str	r3, [r2]
   13464:	ldr	r3, [r2, #4]
   13468:	adc	r3, r3, #0
   1346c:	str	r3, [r2, #4]
   13470:	ldr	r3, [r0, #8]
   13474:	cmp	r3, r1
   13478:	bcc	134ac <push_back_chars@@Base+0x68>
   1347c:	ldrd	r4, [r2, #8]
   13480:	ldrd	r6, [r2, #24]
   13484:	sub	r1, r3, r1
   13488:	adds	r4, r4, #1
   1348c:	adc	r5, r5, #0
   13490:	adds	r6, r6, #1
   13494:	adc	r7, r7, #0
   13498:	str	r6, [r2, #24]
   1349c:	strd	r4, [r2, #8]
   134a0:	str	r7, [r2, #28]
   134a4:	str	r1, [r0, #8]
   134a8:	pop	{r4, r5, r6, r7, fp, pc}
   134ac:	ldrd	r0, [r2, #16]
   134b0:	adds	r0, r0, #1
   134b4:	adc	r1, r1, #0
   134b8:	strd	r0, [r2, #16]
   134bc:	mov	r1, #32
   134c0:	mov	r2, #1
   134c4:	ldr	r0, [pc, #32]	; 134ec <push_back_chars@@Base+0xa8>
   134c8:	ldr	r0, [pc, r0]
   134cc:	ldr	r3, [r0]
   134d0:	ldr	r0, [pc, #24]	; 134f0 <push_back_chars@@Base+0xac>
   134d4:	add	r0, pc, r0
   134d8:	bl	11f6c <fwrite@plt>
   134dc:	mov	r0, #1
   134e0:	bl	11fcc <exit@plt>
   134e4:	andeq	r9, r1, r0, lsr #31
   134e8:	andeq	r9, r1, r4, lsr #31
   134ec:	strdeq	r9, [r1], -r4
   134f0:	andeq	r7, r0, r8, lsl #27
   134f4:	nop	{0}
   134f8:	nop	{0}
   134fc:	nop	{0}

00013500 <push_back_one_char@@Base>:
   13500:	push	{r4, r5, r6, r7, fp, lr}
   13504:	add	fp, sp, #16
   13508:	ldr	r2, [pc, #208]	; 135e0 <push_back_one_char@@Base+0xe0>
   1350c:	add	r1, pc, #188	; 0xbc
   13510:	vld1.64	{d16-d17}, [r1 :128]
   13514:	add	r2, pc, r2
   13518:	vld1.64	{d18-d19}, [r2 :128]
   1351c:	ldr	r1, [pc, #192]	; 135e4 <push_back_one_char@@Base+0xe4>
   13520:	ldr	r3, [pc, #192]	; 135e8 <push_back_one_char@@Base+0xe8>
   13524:	ldr	r3, [pc, r3]
   13528:	add	r1, pc, r1
   1352c:	vadd.i64	q8, q9, q8
   13530:	adds	r3, r3, #1
   13534:	vst1.64	{d16-d17}, [r2 :128]
   13538:	str	r3, [r1]
   1353c:	ldr	r3, [r1, #4]
   13540:	adc	r3, r3, #0
   13544:	str	r3, [r1, #4]
   13548:	ldr	r2, [r0, #8]
   1354c:	cmp	r2, #0
   13550:	beq	13584 <push_back_one_char@@Base+0x84>
   13554:	ldrd	r4, [r1, #8]
   13558:	ldrd	r6, [r1, #24]
   1355c:	adds	r4, r4, #1
   13560:	adc	r5, r5, #0
   13564:	adds	r3, r6, #1
   13568:	str	r3, [r1, #24]
   1356c:	adc	r3, r7, #0
   13570:	strd	r4, [r1, #8]
   13574:	str	r3, [r1, #28]
   13578:	sub	r1, r2, #1
   1357c:	str	r1, [r0, #8]
   13580:	pop	{r4, r5, r6, r7, fp, pc}
   13584:	ldr	r0, [r1, #16]
   13588:	ldr	r3, [r1, #20]
   1358c:	mov	r2, #1
   13590:	adds	r0, r0, #1
   13594:	adc	r3, r3, #0
   13598:	str	r0, [r1, #16]
   1359c:	str	r3, [r1, #20]
   135a0:	mov	r1, #32
   135a4:	ldr	r0, [pc, #64]	; 135ec <push_back_one_char@@Base+0xec>
   135a8:	ldr	r0, [pc, r0]
   135ac:	ldr	r3, [r0]
   135b0:	ldr	r0, [pc, #56]	; 135f0 <push_back_one_char@@Base+0xf0>
   135b4:	add	r0, pc, r0
   135b8:	bl	11f6c <fwrite@plt>
   135bc:	mov	r0, #1
   135c0:	bl	11fcc <exit@plt>
   135c4:	nop	{0}
   135c8:	nop	{0}
   135cc:	nop	{0}
   135d0:	andeq	r0, r0, r1
   135d4:	andeq	r0, r0, r0
   135d8:	andeq	r0, r0, r1
   135dc:	andeq	r0, r0, r0
   135e0:	andeq	r9, r1, r4, lsl #30
   135e4:	ldrdeq	r9, [r1], -r0
   135e8:	ldrdeq	r9, [r1], -r4
   135ec:	andeq	r9, r1, r4, lsl fp
   135f0:	andeq	r7, r0, r8, lsr #25
   135f4:	nop	{0}
   135f8:	nop	{0}
   135fc:	nop	{0}

00013600 <next@@Base>:
   13600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13604:	add	fp, sp, #28
   13608:	sub	sp, sp, #524	; 0x20c
   1360c:	ldr	r7, [pc, #3832]	; 1450c <next@@Base+0xf0c>
   13610:	mov	r4, r0
   13614:	ldr	r0, [pc, #3828]	; 14510 <next@@Base+0xf10>
   13618:	ldr	r0, [pc, r0]
   1361c:	add	r7, pc, r7
   13620:	adds	r0, r0, #1
   13624:	str	r0, [r7]
   13628:	ldr	r0, [r7, #4]
   1362c:	adc	r0, r0, #0
   13630:	str	r0, [r7, #4]
   13634:	ldr	r0, [r4, #4]
   13638:	cmp	r0, #0
   1363c:	beq	1368c <next@@Base+0x8c>
   13640:	ldrd	r2, [r7, #8]
   13644:	adds	r2, r2, #1
   13648:	adc	r3, r3, #0
   1364c:	strd	r2, [r7, #8]
   13650:	ldr	r1, [r0]
   13654:	str	r1, [r4, #4]
   13658:	mov	r1, #0
   1365c:	ldr	r6, [r0, #4]
   13660:	str	r1, [r0, #4]
   13664:	ldr	r1, [pc, #4044]	; 14638 <next@@Base+0x1038>
   13668:	add	r2, pc, #1008	; 0x3f0
   1366c:	vld1.64	{d16-d17}, [r2 :128]
   13670:	add	r1, pc, r1
   13674:	vld1.64	{d18-d19}, [r1 :128]
   13678:	vadd.i64	q8, q9, q8
   1367c:	vst1.64	{d16-d17}, [r1 :128]
   13680:	bl	11f18 <free@plt>
   13684:	add	r0, r7, #24
   13688:	b	13b7c <next@@Base+0x57c>
   1368c:	ldr	lr, [pc, #4008]	; 1463c <next@@Base+0x103c>
   13690:	add	r1, pc, #968	; 0x3c8
   13694:	ldrd	r2, [r7, #16]
   13698:	vld1.64	{d16-d17}, [r1 :128]
   1369c:	add	lr, pc, lr
   136a0:	adds	r2, r2, #1
   136a4:	vld1.64	{d18-d19}, [lr :128]
   136a8:	adc	r3, r3, #0
   136ac:	strd	r2, [r7, #16]
   136b0:	vadd.i64	q8, q9, q8
   136b4:	vst1.64	{d16-d17}, [lr :128]
   136b8:	ldr	r2, [r4, #8]
   136bc:	ldr	r1, [r4]
   136c0:	add	r3, r2, #1
   136c4:	str	r3, [r4, #8]
   136c8:	ldrb	r5, [r1, r2]
   136cc:	ldrd	r2, [r7, #32]
   136d0:	adds	r2, r2, #1
   136d4:	adc	r3, r3, #0
   136d8:	cmp	r5, #0
   136dc:	strd	r2, [r7, #32]
   136e0:	beq	13b58 <next@@Base+0x558>
   136e4:	mov	r2, #0
   136e8:	add	r8, r7, #56	; 0x38
   136ec:	add	r9, r7, #112	; 0x70
   136f0:	add	ip, sp, #8
   136f4:	mov	sl, #0
   136f8:	b	13730 <next@@Base+0x130>
   136fc:	mov	r1, r8
   13700:	ldm	r1, {r0, r3}
   13704:	adds	r0, r0, #1
   13708:	adc	r3, r3, #0
   1370c:	stm	r1, {r0, r3}
   13710:	ldr	r0, [r7, #984]	; 0x3d8
   13714:	ldr	r1, [r7, #988]	; 0x3dc
   13718:	adds	r0, r0, #1
   1371c:	adc	r1, r1, #0
   13720:	tst	r5, #255	; 0xff
   13724:	str	r0, [r7, #984]	; 0x3d8
   13728:	str	r1, [r7, #988]	; 0x3dc
   1372c:	beq	13b58 <next@@Base+0x558>
   13730:	ldr	r1, [r7, #40]	; 0x28
   13734:	ldr	r3, [r7, #44]	; 0x2c
   13738:	adds	r1, r1, #1
   1373c:	adc	r3, r3, #0
   13740:	cmp	r2, #5
   13744:	str	r1, [r7, #40]	; 0x28
   13748:	str	r3, [r7, #44]	; 0x2c
   1374c:	bhi	136fc <next@@Base+0xfc>
   13750:	add	r1, pc, #4
   13754:	ldr	r2, [r1, r2, lsl #2]
   13758:	add	pc, r1, r2
   1375c:	andeq	r0, r0, r8, lsl r0
   13760:	andeq	r0, r0, r4, asr r4
   13764:	andeq	r0, r0, r8, lsl r8
   13768:	andeq	r0, r0, ip, lsl #10
   1376c:	andeq	r0, r0, r8, asr #12
   13770:			; <UNDEFINED> instruction: 0x000008bc
   13774:	ldrd	r2, [r7, #64]	; 0x40
   13778:	mov	r1, r9
   1377c:	adds	r2, r2, #1
   13780:	adc	r3, r3, #0
   13784:	strd	r2, [r7, #64]	; 0x40
   13788:	uxtb	r2, r5
   1378c:	cmp	r2, #9
   13790:	beq	137e0 <next@@Base+0x1e0>
   13794:	ldr	r1, [r7, #120]	; 0x78
   13798:	ldr	r3, [r7, #124]	; 0x7c
   1379c:	adds	r1, r1, #1
   137a0:	adc	r3, r3, #0
   137a4:	cmp	r2, #32
   137a8:	str	r1, [r7, #120]	; 0x78
   137ac:	str	r3, [r7, #124]	; 0x7c
   137b0:	bne	137bc <next@@Base+0x1bc>
   137b4:	add	r1, r7, #128	; 0x80
   137b8:	b	137e0 <next@@Base+0x1e0>
   137bc:	ldr	r1, [r7, #136]	; 0x88
   137c0:	ldr	r3, [r7, #140]	; 0x8c
   137c4:	adds	r1, r1, #1
   137c8:	adc	r3, r3, #0
   137cc:	cmp	r2, #10
   137d0:	str	r1, [r7, #136]	; 0x88
   137d4:	str	r3, [r7, #140]	; 0x8c
   137d8:	bne	13828 <next@@Base+0x228>
   137dc:	add	r1, r7, #144	; 0x90
   137e0:	ldrd	r2, [r1]
   137e4:	adds	r2, r2, #1
   137e8:	adc	r3, r3, #0
   137ec:	strd	r2, [r1]
   137f0:	add	r1, pc, #616	; 0x268
   137f4:	vld1.64	{d18-d19}, [lr :128]
   137f8:	vld1.64	{d16-d17}, [r1 :128]
   137fc:	vadd.i64	q8, q9, q8
   13800:	vst1.64	{d16-d17}, [lr :128]
   13804:	ldr	r3, [r4, #8]
   13808:	ldr	r2, [r4]
   1380c:	add	r1, r3, #1
   13810:	add	r5, r2, r3
   13814:	mov	r2, #0
   13818:	str	r1, [r4, #8]
   1381c:	add	r1, r7, #160	; 0xa0
   13820:	ldrb	r5, [r5]
   13824:	b	13700 <next@@Base+0x100>
   13828:	ldr	r1, [r7, #152]	; 0x98
   1382c:	ldr	r3, [r7, #156]	; 0x9c
   13830:	adds	r1, r1, #1
   13834:	adc	r3, r3, #0
   13838:	cmp	r2, #48	; 0x30
   1383c:	str	r1, [r7, #152]	; 0x98
   13840:	str	r3, [r7, #156]	; 0x9c
   13844:	beq	14248 <next@@Base+0xc48>
   13848:	ldr	r1, [r7, #176]	; 0xb0
   1384c:	ldr	r3, [r7, #180]	; 0xb4
   13850:	adds	r1, r1, #1
   13854:	adc	r3, r3, #0
   13858:	cmp	r2, #49	; 0x31
   1385c:	str	r1, [r7, #176]	; 0xb0
   13860:	str	r3, [r7, #180]	; 0xb4
   13864:	bcc	14274 <next@@Base+0xc74>
   13868:	ldr	r1, [r7, #192]	; 0xc0
   1386c:	ldr	r3, [r7, #196]	; 0xc4
   13870:	adds	r1, r1, #1
   13874:	adc	r3, r3, #0
   13878:	cmp	r2, #57	; 0x39
   1387c:	str	r1, [r7, #192]	; 0xc0
   13880:	str	r3, [r7, #196]	; 0xc4
   13884:	bhi	138d4 <next@@Base+0x2d4>
   13888:	add	r1, pc, #464	; 0x1d0
   1388c:	vld1.64	{d18-d19}, [lr :128]
   13890:	ldrd	r2, [r7, #208]	; 0xd0
   13894:	strb	r5, [ip, sl]
   13898:	add	sl, sl, #1
   1389c:	vld1.64	{d16-d17}, [r1 :128]
   138a0:	adds	r2, r2, #1
   138a4:	adc	r3, r3, #0
   138a8:	vadd.i64	q8, q9, q8
   138ac:	strd	r2, [r7, #208]	; 0xd0
   138b0:	vst1.64	{d16-d17}, [lr :128]
   138b4:	ldr	r3, [r4, #8]
   138b8:	ldr	r2, [r4]
   138bc:	add	r1, r3, #1
   138c0:	add	r5, r2, r3
   138c4:	mov	r2, #1
   138c8:	str	r1, [r4, #8]
   138cc:	add	r1, r7, #224	; 0xe0
   138d0:	b	13820 <next@@Base+0x220>
   138d4:	ldrd	r0, [r7, #240]	; 0xf0
   138d8:	ldr	r6, [r7, #216]	; 0xd8
   138dc:	ldr	r3, [r7, #220]	; 0xdc
   138e0:	adds	r0, r0, #1
   138e4:	str	r0, [r7, #240]	; 0xf0
   138e8:	adc	r1, r1, #0
   138ec:	adds	r6, r6, #1
   138f0:	ldr	r0, [r7, #264]	; 0x108
   138f4:	adc	r3, r3, #0
   138f8:	adds	r0, r0, #1
   138fc:	str	r0, [r7, #264]	; 0x108
   13900:	str	r6, [r7, #216]	; 0xd8
   13904:	str	r3, [r7, #220]	; 0xdc
   13908:	str	r1, [r7, #244]	; 0xf4
   1390c:	ldr	r0, [r7, #268]	; 0x10c
   13910:	adc	r0, r0, #0
   13914:	cmp	r2, #123	; 0x7b
   13918:	str	r0, [r7, #268]	; 0x10c
   1391c:	beq	142fc <next@@Base+0xcfc>
   13920:	ldr	r0, [r7, #288]	; 0x120
   13924:	ldr	r1, [r7, #292]	; 0x124
   13928:	adds	r0, r0, #1
   1392c:	adc	r1, r1, #0
   13930:	cmp	r2, #125	; 0x7d
   13934:	str	r0, [r7, #288]	; 0x120
   13938:	str	r1, [r7, #292]	; 0x124
   1393c:	beq	1432c <next@@Base+0xd2c>
   13940:	ldr	r0, [r7, #312]	; 0x138
   13944:	ldr	r1, [r7, #316]	; 0x13c
   13948:	adds	r0, r0, #1
   1394c:	adc	r1, r1, #0
   13950:	cmp	r2, #59	; 0x3b
   13954:	str	r0, [r7, #312]	; 0x138
   13958:	str	r1, [r7, #316]	; 0x13c
   1395c:	beq	1435c <next@@Base+0xd5c>
   13960:	ldr	r0, [r7, #336]	; 0x150
   13964:	ldr	r1, [r7, #340]	; 0x154
   13968:	adds	r0, r0, #1
   1396c:	adc	r1, r1, #0
   13970:	cmp	r2, #101	; 0x65
   13974:	str	r0, [r7, #336]	; 0x150
   13978:	str	r1, [r7, #340]	; 0x154
   1397c:	bne	139d8 <next@@Base+0x3d8>
   13980:	add	r0, pc, #216	; 0xd8
   13984:	vld1.64	{d18-d19}, [lr :128]
   13988:	ldr	r1, [r7, #356]	; 0x164
   1398c:	vld1.64	{d16-d17}, [r0 :128]
   13990:	mov	r0, #101	; 0x65
   13994:	strb	r0, [ip, sl]
   13998:	ldr	r0, [r7, #352]	; 0x160
   1399c:	add	sl, sl, #1
   139a0:	vadd.i64	q8, q9, q8
   139a4:	adds	r0, r0, #1
   139a8:	adc	r1, r1, #0
   139ac:	str	r0, [r7, #352]	; 0x160
   139b0:	str	r1, [r7, #356]	; 0x164
   139b4:	vst1.64	{d16-d17}, [lr :128]
   139b8:	ldr	r2, [r4, #8]
   139bc:	ldr	r0, [r4]
   139c0:	add	r1, r2, #1
   139c4:	add	r5, r0, r2
   139c8:	mov	r2, #5
   139cc:	str	r1, [r4, #8]
   139d0:	add	r1, r7, #368	; 0x170
   139d4:	b	13820 <next@@Base+0x220>
   139d8:	ldr	r0, [r7, #360]	; 0x168
   139dc:	ldr	r1, [r7, #364]	; 0x16c
   139e0:	mov	r3, #109	; 0x6d
   139e4:	mov	r6, #114	; 0x72
   139e8:	adds	r0, r0, #1
   139ec:	adc	r1, r1, #0
   139f0:	cmp	r2, #105	; 0x69
   139f4:	str	r0, [r7, #360]	; 0x168
   139f8:	str	r1, [r7, #364]	; 0x16c
   139fc:	mov	r1, #105	; 0x69
   13a00:	bne	13a70 <next@@Base+0x470>
   13a04:	add	r0, pc, #84	; 0x54
   13a08:	vld1.64	{d18-d19}, [lr :128]
   13a0c:	strb	r1, [ip, sl]
   13a10:	ldr	r1, [r7, #380]	; 0x17c
   13a14:	add	sl, sl, #1
   13a18:	vld1.64	{d16-d17}, [r0 :128]
   13a1c:	ldr	r0, [r7, #376]	; 0x178
   13a20:	adds	r0, r0, #1
   13a24:	vadd.i64	q8, q9, q8
   13a28:	adc	r1, r1, #0
   13a2c:	str	r0, [r7, #376]	; 0x178
   13a30:	str	r1, [r7, #380]	; 0x17c
   13a34:	vst1.64	{d16-d17}, [lr :128]
   13a38:	ldr	r2, [r4, #8]
   13a3c:	ldr	r0, [r4]
   13a40:	add	r1, r2, #1
   13a44:	add	r5, r0, r2
   13a48:	mov	r2, #2
   13a4c:	str	r1, [r4, #8]
   13a50:	add	r1, r7, #392	; 0x188
   13a54:	b	13820 <next@@Base+0x220>
   13a58:	nop	{0}
   13a5c:	nop	{0}
   13a60:	andeq	r0, r0, r1
   13a64:	andeq	r0, r0, r0
   13a68:	andeq	r0, r0, r1
   13a6c:	andeq	r0, r0, r0
   13a70:	ldr	r0, [r7, #384]	; 0x180
   13a74:	ldr	r1, [r7, #388]	; 0x184
   13a78:	adds	r0, r0, #1
   13a7c:	adc	r1, r1, #0
   13a80:	cmp	r2, #109	; 0x6d
   13a84:	str	r0, [r7, #384]	; 0x180
   13a88:	str	r1, [r7, #388]	; 0x184
   13a8c:	bne	13ae4 <next@@Base+0x4e4>
   13a90:	sub	r0, pc, #56	; 0x38
   13a94:	vld1.64	{d18-d19}, [lr :128]
   13a98:	ldr	r1, [r7, #404]	; 0x194
   13a9c:	strb	r3, [ip, sl]
   13aa0:	add	sl, sl, #1
   13aa4:	vld1.64	{d16-d17}, [r0 :128]
   13aa8:	ldr	r0, [r7, #400]	; 0x190
   13aac:	adds	r0, r0, #1
   13ab0:	vadd.i64	q8, q9, q8
   13ab4:	adc	r1, r1, #0
   13ab8:	str	r0, [r7, #400]	; 0x190
   13abc:	str	r1, [r7, #404]	; 0x194
   13ac0:	vst1.64	{d16-d17}, [lr :128]
   13ac4:	ldr	r2, [r4, #8]
   13ac8:	ldr	r0, [r4]
   13acc:	add	r1, r2, #1
   13ad0:	add	r5, r0, r2
   13ad4:	mov	r2, #3
   13ad8:	str	r1, [r4, #8]
   13adc:	add	r1, r7, #416	; 0x1a0
   13ae0:	b	13820 <next@@Base+0x220>
   13ae4:	ldr	r0, [r7, #408]	; 0x198
   13ae8:	ldr	r1, [r7, #412]	; 0x19c
   13aec:	adds	r0, r0, #1
   13af0:	adc	r1, r1, #0
   13af4:	cmp	r2, #114	; 0x72
   13af8:	str	r0, [r7, #408]	; 0x198
   13afc:	str	r1, [r7, #412]	; 0x19c
   13b00:	bne	14714 <next@@Base+0x1114>
   13b04:	sub	r0, pc, #172	; 0xac
   13b08:	vld1.64	{d18-d19}, [lr :128]
   13b0c:	ldr	r1, [r7, #428]	; 0x1ac
   13b10:	strb	r6, [ip, sl]
   13b14:	add	sl, sl, #1
   13b18:	vld1.64	{d16-d17}, [r0 :128]
   13b1c:	ldr	r0, [r7, #424]	; 0x1a8
   13b20:	adds	r0, r0, #1
   13b24:	vadd.i64	q8, q9, q8
   13b28:	adc	r1, r1, #0
   13b2c:	str	r0, [r7, #424]	; 0x1a8
   13b30:	str	r1, [r7, #428]	; 0x1ac
   13b34:	vst1.64	{d16-d17}, [lr :128]
   13b38:	ldr	r2, [r4, #8]
   13b3c:	ldr	r0, [r4]
   13b40:	add	r1, r2, #1
   13b44:	add	r5, r0, r2
   13b48:	mov	r2, #4
   13b4c:	str	r1, [r4, #8]
   13b50:	add	r1, r7, #440	; 0x1b8
   13b54:	b	13820 <next@@Base+0x220>
   13b58:	ldrd	r0, [r7, #48]	; 0x30
   13b5c:	adds	r0, r0, #1
   13b60:	adc	r1, r1, #0
   13b64:	strd	r0, [r7, #48]	; 0x30
   13b68:	mov	r0, #4
   13b6c:	bl	11f90 <malloc@plt>
   13b70:	mov	r6, r0
   13b74:	bl	12af0 <init_token_eof@@Base>
   13b78:	add	r0, r7, #992	; 0x3e0
   13b7c:	ldrd	r2, [r0]
   13b80:	adds	r2, r2, #1
   13b84:	adc	r3, r3, #0
   13b88:	strd	r2, [r0]
   13b8c:	ldr	r0, [r7, #1000]	; 0x3e8
   13b90:	ldr	r1, [r7, #1004]	; 0x3ec
   13b94:	adds	r0, r0, #1
   13b98:	adc	r1, r1, #0
   13b9c:	str	r0, [r7, #1000]	; 0x3e8
   13ba0:	mov	r0, r6
   13ba4:	str	r1, [r7, #1004]	; 0x3ec
   13ba8:	sub	sp, fp, #28
   13bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb0:	ldrd	r2, [r7, #72]	; 0x48
   13bb4:	sub	r1, r5, #48	; 0x30
   13bb8:	uxtb	r1, r1
   13bbc:	adds	r2, r2, #1
   13bc0:	adc	r3, r3, #0
   13bc4:	cmp	r1, #9
   13bc8:	strd	r2, [r7, #72]	; 0x48
   13bcc:	bhi	14120 <next@@Base+0xb20>
   13bd0:	ldr	r1, [lr, #4]
   13bd4:	ldr	r2, [pc, #4068]	; 14bc0 <next@@Base+0x15c0>
   13bd8:	mov	r8, ip
   13bdc:	ldr	r2, [pc, r2]
   13be0:	ldr	r0, [r7, #696]	; 0x2b8
   13be4:	adds	r2, r2, #1
   13be8:	ldr	r3, [r7, #700]	; 0x2bc
   13bec:	strb	r5, [r8, sl]
   13bf0:	add	sl, sl, #1
   13bf4:	adc	r1, r1, #0
   13bf8:	str	r2, [lr]
   13bfc:	str	r1, [lr, #4]
   13c00:	ldr	r6, [lr, #8]
   13c04:	adds	r0, r0, #1
   13c08:	str	r0, [r7, #696]	; 0x2b8
   13c0c:	adc	r0, r3, #0
   13c10:	ldr	r3, [lr, #12]
   13c14:	str	r0, [r7, #700]	; 0x2bc
   13c18:	adds	r6, r6, #1
   13c1c:	str	r6, [lr, #8]
   13c20:	adc	r0, r3, #0
   13c24:	str	r0, [lr, #12]
   13c28:	ldr	r3, [r4, #8]
   13c2c:	ldr	r0, [r4]
   13c30:	add	r6, r3, #1
   13c34:	str	r6, [r4, #8]
   13c38:	ldrb	r5, [r0, r3]
   13c3c:	ldr	r0, [r7, #712]	; 0x2c8
   13c40:	ldr	r3, [r7, #716]	; 0x2cc
   13c44:	adds	r0, r0, #1
   13c48:	str	r0, [r7, #712]	; 0x2c8
   13c4c:	sub	r0, r5, #48	; 0x30
   13c50:	adc	r3, r3, #0
   13c54:	uxtb	r0, r0
   13c58:	str	r3, [r7, #716]	; 0x2cc
   13c5c:	cmp	r0, #10
   13c60:	bcc	13be0 <next@@Base+0x5e0>
   13c64:	b	14124 <next@@Base+0xb24>
   13c68:	ldrd	r0, [r7, #88]	; 0x58
   13c6c:	adds	r0, r0, #1
   13c70:	adc	r1, r1, #0
   13c74:	strd	r0, [r7, #88]	; 0x58
   13c78:	uxtb	r0, r5
   13c7c:	cmp	r0, #97	; 0x61
   13c80:	bne	14a8c <next@@Base+0x148c>
   13c84:	sub	r0, pc, #556	; 0x22c
   13c88:	vld1.64	{d16-d17}, [lr :128]
   13c8c:	ldr	r1, [r7, #796]	; 0x31c
   13c90:	vld1.64	{d18-d19}, [r0 :128]
   13c94:	mov	r0, #97	; 0x61
   13c98:	strb	r0, [ip, sl]
   13c9c:	ldr	r0, [r7, #792]	; 0x318
   13ca0:	vadd.i64	q9, q8, q9
   13ca4:	adds	r0, r0, #1
   13ca8:	adc	r1, r1, #0
   13cac:	str	r0, [r7, #792]	; 0x318
   13cb0:	str	r1, [r7, #796]	; 0x31c
   13cb4:	vst1.64	{d18-d19}, [lr :128]
   13cb8:	ldr	r1, [r4, #8]
   13cbc:	ldr	r0, [r4]
   13cc0:	add	r2, r1, #1
   13cc4:	str	r2, [r4, #8]
   13cc8:	ldrb	r0, [r0, r1]
   13ccc:	cmp	r0, #105	; 0x69
   13cd0:	bne	14aac <next@@Base+0x14ac>
   13cd4:	add	r1, sl, ip
   13cd8:	mov	r0, #105	; 0x69
   13cdc:	ldr	r2, [r7, #812]	; 0x32c
   13ce0:	mov	r5, ip
   13ce4:	strb	r0, [r1, #1]
   13ce8:	vmov.32	r0, d16[0]
   13cec:	adds	r0, r0, #2
   13cf0:	str	r0, [lr]
   13cf4:	vmov.32	r0, d16[1]
   13cf8:	adc	r0, r0, #0
   13cfc:	str	r0, [lr, #4]
   13d00:	ldr	r0, [r7, #808]	; 0x328
   13d04:	adds	r0, r0, #1
   13d08:	str	r0, [r7, #808]	; 0x328
   13d0c:	adc	r0, r2, #0
   13d10:	ldrd	r2, [lr, #8]
   13d14:	str	r0, [r7, #812]	; 0x32c
   13d18:	adds	r2, r2, #1
   13d1c:	adc	r0, r3, #0
   13d20:	str	r2, [lr, #8]
   13d24:	str	r0, [lr, #12]
   13d28:	ldr	r2, [r4, #8]
   13d2c:	ldr	r0, [r4]
   13d30:	add	r3, r2, #1
   13d34:	str	r3, [r4, #8]
   13d38:	ldrb	r0, [r0, r2]
   13d3c:	cmp	r0, #110	; 0x6e
   13d40:	bne	14acc <next@@Base+0x14cc>
   13d44:	mov	r0, #110	; 0x6e
   13d48:	strh	r0, [r1, #2]
   13d4c:	ldr	r0, [r7, #824]	; 0x338
   13d50:	ldr	r1, [r7, #828]	; 0x33c
   13d54:	adds	r0, r0, #1
   13d58:	adc	r1, r1, #0
   13d5c:	str	r0, [r7, #824]	; 0x338
   13d60:	add	r0, sl, #4
   13d64:	str	r1, [r7, #828]	; 0x33c
   13d68:	bl	11f90 <malloc@plt>
   13d6c:	add	r6, sl, #3
   13d70:	mov	r1, r5
   13d74:	mov	r4, r0
   13d78:	mov	r2, r6
   13d7c:	bl	12038 <strncpy@plt>
   13d80:	mov	r0, #0
   13d84:	strb	r0, [r4, r6]
   13d88:	mov	r0, #8
   13d8c:	bl	11f90 <malloc@plt>
   13d90:	mov	r1, r4
   13d94:	mov	r6, r0
   13d98:	bl	128c0 <init_token_function@@Base>
   13d9c:	add	r0, r7, #832	; 0x340
   13da0:	b	13b7c <next@@Base+0x57c>
   13da4:	ldrd	r0, [r7, #96]	; 0x60
   13da8:	adds	r0, r0, #1
   13dac:	adc	r1, r1, #0
   13db0:	strd	r0, [r7, #96]	; 0x60
   13db4:	uxtb	r0, r5
   13db8:	cmp	r0, #101	; 0x65
   13dbc:	bne	14aec <next@@Base+0x14ec>
   13dc0:	sub	r0, pc, #872	; 0x368
   13dc4:	vld1.64	{d16-d17}, [lr :128]
   13dc8:	ldr	r1, [r7, #852]	; 0x354
   13dcc:	vld1.64	{d18-d19}, [r0 :128]
   13dd0:	mov	r0, #101	; 0x65
   13dd4:	strb	r0, [ip, sl]
   13dd8:	ldr	r0, [r7, #848]	; 0x350
   13ddc:	vadd.i64	q9, q8, q9
   13de0:	adds	r0, r0, #1
   13de4:	adc	r1, r1, #0
   13de8:	str	r0, [r7, #848]	; 0x350
   13dec:	str	r1, [r7, #852]	; 0x354
   13df0:	vst1.64	{d18-d19}, [lr :128]
   13df4:	ldr	r1, [r4, #8]
   13df8:	ldr	r0, [r4]
   13dfc:	add	r2, r1, #1
   13e00:	str	r2, [r4, #8]
   13e04:	ldrb	r0, [r0, r1]
   13e08:	cmp	r0, #116	; 0x74
   13e0c:	bne	14b0c <next@@Base+0x150c>
   13e10:	vmov.32	r3, d16[0]
   13e14:	vmov.32	r2, d16[1]
   13e18:	add	r1, sl, ip
   13e1c:	mov	r0, #116	; 0x74
   13e20:	ldr	r6, [r7, #868]	; 0x364
   13e24:	strb	r0, [r1, #1]
   13e28:	adds	r0, r3, #2
   13e2c:	str	r0, [lr]
   13e30:	adc	r0, r2, #0
   13e34:	str	r0, [lr, #4]
   13e38:	ldr	r0, [r7, #864]	; 0x360
   13e3c:	ldr	r5, [lr, #12]
   13e40:	adds	r0, r0, #1
   13e44:	str	r0, [r7, #864]	; 0x360
   13e48:	adc	r0, r6, #0
   13e4c:	ldr	r6, [lr, #8]
   13e50:	str	r0, [r7, #868]	; 0x364
   13e54:	adds	r6, r6, #1
   13e58:	adc	r0, r5, #0
   13e5c:	str	r6, [lr, #8]
   13e60:	str	r0, [lr, #12]
   13e64:	ldr	r6, [r4, #8]
   13e68:	ldr	r0, [r4]
   13e6c:	add	r5, r6, #1
   13e70:	str	r5, [r4, #8]
   13e74:	ldrb	r0, [r0, r6]
   13e78:	cmp	r0, #117	; 0x75
   13e7c:	bne	14b2c <next@@Base+0x152c>
   13e80:	adds	r0, r3, #3
   13e84:	ldr	r6, [r7, #884]	; 0x374
   13e88:	str	r0, [lr]
   13e8c:	mov	r0, #117	; 0x75
   13e90:	strb	r0, [r1, #2]
   13e94:	adc	r0, r2, #0
   13e98:	str	r0, [lr, #4]
   13e9c:	ldr	r0, [r7, #880]	; 0x370
   13ea0:	ldr	r5, [lr, #12]
   13ea4:	adds	r0, r0, #1
   13ea8:	str	r0, [r7, #880]	; 0x370
   13eac:	adc	r0, r6, #0
   13eb0:	ldr	r6, [lr, #8]
   13eb4:	str	r0, [r7, #884]	; 0x374
   13eb8:	adds	r6, r6, #1
   13ebc:	adc	r0, r5, #0
   13ec0:	str	r6, [lr, #8]
   13ec4:	str	r0, [lr, #12]
   13ec8:	ldr	r6, [r4, #8]
   13ecc:	ldr	r0, [r4]
   13ed0:	add	r5, r6, #1
   13ed4:	str	r5, [r4, #8]
   13ed8:	ldrb	r0, [r0, r6]
   13edc:	cmp	r0, #114	; 0x72
   13ee0:	bne	14b4c <next@@Base+0x154c>
   13ee4:	adds	r0, r3, #4
   13ee8:	str	r0, [lr]
   13eec:	mov	r0, #114	; 0x72
   13ef0:	strb	r0, [r1, #3]
   13ef4:	adc	r0, r2, #0
   13ef8:	ldr	r1, [r7, #900]	; 0x384
   13efc:	str	r0, [lr, #4]
   13f00:	ldr	r0, [r7, #896]	; 0x380
   13f04:	ldrd	r2, [lr, #8]
   13f08:	adds	r0, r0, #1
   13f0c:	str	r0, [r7, #896]	; 0x380
   13f10:	adc	r0, r1, #0
   13f14:	adds	r1, r2, #1
   13f18:	str	r0, [r7, #900]	; 0x384
   13f1c:	adc	r0, r3, #0
   13f20:	str	r1, [lr, #8]
   13f24:	str	r0, [lr, #12]
   13f28:	ldr	r1, [r4, #8]
   13f2c:	ldr	r0, [r4]
   13f30:	add	r2, r1, #1
   13f34:	str	r2, [r4, #8]
   13f38:	ldrb	r0, [r0, r1]
   13f3c:	cmp	r0, #110	; 0x6e
   13f40:	bne	14b80 <next@@Base+0x1580>
   13f44:	ldr	r0, [r7, #912]	; 0x390
   13f48:	ldr	r1, [r7, #916]	; 0x394
   13f4c:	adds	r0, r0, #1
   13f50:	adc	r1, r1, #0
   13f54:	str	r0, [r7, #912]	; 0x390
   13f58:	mov	r0, #4
   13f5c:	str	r1, [r7, #916]	; 0x394
   13f60:	bl	11f90 <malloc@plt>
   13f64:	mov	r6, r0
   13f68:	bl	12a50 <init_token_return@@Base>
   13f6c:	add	r0, r7, #920	; 0x398
   13f70:	b	13b7c <next@@Base+0x57c>
   13f74:	ldrd	r0, [r7, #80]	; 0x50
   13f78:	adds	r0, r0, #1
   13f7c:	adc	r1, r1, #0
   13f80:	strd	r0, [r7, #80]	; 0x50
   13f84:	uxtb	r1, r5
   13f88:	cmp	r1, #102	; 0x66
   13f8c:	beq	1420c <next@@Base+0xc0c>
   13f90:	cmp	r1, #110	; 0x6e
   13f94:	bne	14ba0 <next@@Base+0x15a0>
   13f98:	add	r0, pc, #1008	; 0x3f0
   13f9c:	vld1.64	{d18-d19}, [lr :128]
   13fa0:	ldr	r1, [r7, #740]	; 0x2e4
   13fa4:	vld1.64	{d16-d17}, [r0 :128]
   13fa8:	mov	r0, #110	; 0x6e
   13fac:	strb	r0, [ip, sl]
   13fb0:	ldr	r0, [r7, #736]	; 0x2e0
   13fb4:	vadd.i64	q8, q9, q8
   13fb8:	adds	r0, r0, #1
   13fbc:	adc	r1, r1, #0
   13fc0:	str	r0, [r7, #736]	; 0x2e0
   13fc4:	str	r1, [r7, #740]	; 0x2e4
   13fc8:	vst1.64	{d16-d17}, [lr :128]
   13fcc:	ldr	r1, [r4, #8]
   13fd0:	ldr	r0, [r4]
   13fd4:	add	r2, r1, #1
   13fd8:	str	r2, [r4, #8]
   13fdc:	ldrb	r0, [r0, r1]
   13fe0:	cmp	r0, #116	; 0x74
   13fe4:	bne	14c24 <next@@Base+0x1624>
   13fe8:	ldr	r0, [r7, #760]	; 0x2f8
   13fec:	ldr	r1, [r7, #764]	; 0x2fc
   13ff0:	adds	r0, r0, #1
   13ff4:	adc	r1, r1, #0
   13ff8:	str	r0, [r7, #760]	; 0x2f8
   13ffc:	mov	r0, #4
   14000:	str	r1, [r7, #764]	; 0x2fc
   14004:	bl	11f90 <malloc@plt>
   14008:	mov	r6, r0
   1400c:	bl	12820 <init_token_int_type@@Base>
   14010:	add	r0, r7, #768	; 0x300
   14014:	b	13b7c <next@@Base+0x57c>
   14018:	ldrd	r0, [r7, #104]	; 0x68
   1401c:	adds	r0, r0, #1
   14020:	adc	r1, r1, #0
   14024:	strd	r0, [r7, #104]	; 0x68
   14028:	uxtb	r0, r5
   1402c:	cmp	r0, #108	; 0x6c
   14030:	bne	14bc4 <next@@Base+0x15c4>
   14034:	add	r0, pc, #852	; 0x354
   14038:	vld1.64	{d16-d17}, [lr :128]
   1403c:	ldr	r1, [r7, #940]	; 0x3ac
   14040:	vld1.64	{d18-d19}, [r0 :128]
   14044:	mov	r0, #108	; 0x6c
   14048:	strb	r0, [ip, sl]
   1404c:	ldr	r0, [r7, #936]	; 0x3a8
   14050:	vadd.i64	q9, q8, q9
   14054:	adds	r0, r0, #1
   14058:	adc	r1, r1, #0
   1405c:	str	r0, [r7, #936]	; 0x3a8
   14060:	str	r1, [r7, #940]	; 0x3ac
   14064:	vst1.64	{d18-d19}, [lr :128]
   14068:	ldr	r1, [r4, #8]
   1406c:	ldr	r0, [r4]
   14070:	add	r2, r1, #1
   14074:	str	r2, [r4, #8]
   14078:	ldrb	r0, [r0, r1]
   1407c:	cmp	r0, #115	; 0x73
   14080:	bne	14be4 <next@@Base+0x15e4>
   14084:	add	r0, sl, ip
   14088:	mov	r1, #115	; 0x73
   1408c:	strb	r1, [r0, #1]
   14090:	vmov.32	r0, d16[0]
   14094:	ldr	r1, [r7, #956]	; 0x3bc
   14098:	adds	r0, r0, #2
   1409c:	str	r0, [lr]
   140a0:	vmov.32	r0, d16[1]
   140a4:	adc	r0, r0, #0
   140a8:	str	r0, [lr, #4]
   140ac:	ldr	r0, [r7, #952]	; 0x3b8
   140b0:	ldrd	r2, [lr, #8]
   140b4:	adds	r0, r0, #1
   140b8:	str	r0, [r7, #952]	; 0x3b8
   140bc:	adc	r0, r1, #0
   140c0:	adds	r1, r2, #1
   140c4:	str	r0, [r7, #956]	; 0x3bc
   140c8:	adc	r0, r3, #0
   140cc:	str	r1, [lr, #8]
   140d0:	str	r0, [lr, #12]
   140d4:	ldr	r1, [r4, #8]
   140d8:	ldr	r0, [r4]
   140dc:	add	r2, r1, #1
   140e0:	str	r2, [r4, #8]
   140e4:	ldrb	r0, [r0, r1]
   140e8:	cmp	r0, #101	; 0x65
   140ec:	bne	14c04 <next@@Base+0x1604>
   140f0:	ldr	r0, [r7, #968]	; 0x3c8
   140f4:	ldr	r1, [r7, #972]	; 0x3cc
   140f8:	adds	r0, r0, #1
   140fc:	adc	r1, r1, #0
   14100:	str	r0, [r7, #968]	; 0x3c8
   14104:	mov	r0, #4
   14108:	str	r1, [r7, #972]	; 0x3cc
   1410c:	bl	11f90 <malloc@plt>
   14110:	mov	r6, r0
   14114:	bl	12b90 <init_token_else@@Base>
   14118:	add	r0, r7, #976	; 0x3d0
   1411c:	b	13b7c <next@@Base+0x57c>
   14120:	mov	r8, ip
   14124:	ldr	r1, [pc, #3076]	; 14d30 <next@@Base+0x1730>
   14128:	add	r0, pc, #608	; 0x260
   1412c:	vld1.64	{d16-d17}, [r0 :128]
   14130:	add	r1, pc, r1
   14134:	vld1.64	{d18-d19}, [r1 :128]
   14138:	ldr	r0, [pc, #3060]	; 14d34 <next@@Base+0x1734>
   1413c:	ldr	r2, [pc, #3060]	; 14d38 <next@@Base+0x1738>
   14140:	ldr	r2, [pc, r2]
   14144:	add	r0, pc, r0
   14148:	ldr	r3, [r7, #704]	; 0x2c0
   1414c:	ldr	r6, [r7, #708]	; 0x2c4
   14150:	vadd.i64	q8, q9, q8
   14154:	adds	r2, r2, #1
   14158:	vst1.64	{d16-d17}, [r1 :128]
   1415c:	str	r2, [r0]
   14160:	ldr	r2, [r0, #4]
   14164:	adc	r2, r2, #0
   14168:	adds	r3, r3, #1
   1416c:	adc	r1, r6, #0
   14170:	str	r2, [r0, #4]
   14174:	str	r3, [r7, #704]	; 0x2c0
   14178:	str	r1, [r7, #708]	; 0x2c4
   1417c:	ldr	r1, [r4, #8]
   14180:	cmp	r1, #0
   14184:	beq	14a54 <next@@Base+0x1454>
   14188:	ldrd	r2, [r0, #8]
   1418c:	ldr	r6, [r0, #24]
   14190:	ldr	r5, [r0, #28]
   14194:	adds	r2, r2, #1
   14198:	adc	r3, r3, #0
   1419c:	adds	r6, r6, #1
   141a0:	str	r6, [r0, #24]
   141a4:	strd	r2, [r0, #8]
   141a8:	adc	r2, r5, #0
   141ac:	str	r2, [r0, #28]
   141b0:	sub	r0, r1, #1
   141b4:	str	r0, [r4, #8]
   141b8:	mov	r0, #0
   141bc:	strb	r0, [r8, sl]
   141c0:	mov	r0, #8
   141c4:	bl	11f90 <malloc@plt>
   141c8:	mov	r6, r0
   141cc:	ldr	r0, [pc, #2920]	; 14d3c <next@@Base+0x173c>
   141d0:	add	r1, pc, #440	; 0x1b8
   141d4:	mov	r2, #10
   141d8:	vld1.64	{d16-d17}, [r1 :128]
   141dc:	mov	r1, #0
   141e0:	add	r0, pc, r0
   141e4:	vld1.64	{d18-d19}, [r0 :128]
   141e8:	vadd.i64	q8, q9, q8
   141ec:	vst1.64	{d16-d17}, [r0 :128]
   141f0:	mov	r0, r8
   141f4:	bl	11ef4 <strtol@plt>
   141f8:	mov	r1, r0
   141fc:	mov	r0, r6
   14200:	bl	12870 <init_token_int_value@@Base>
   14204:	add	r0, r7, #720	; 0x2d0
   14208:	b	13b7c <next@@Base+0x57c>
   1420c:	add	r0, ip, sl
   14210:	mov	r1, #102	; 0x66
   14214:	strh	r1, [r0]
   14218:	ldr	r0, [r7, #744]	; 0x2e8
   1421c:	ldr	r1, [r7, #748]	; 0x2ec
   14220:	adds	r0, r0, #1
   14224:	adc	r1, r1, #0
   14228:	str	r0, [r7, #744]	; 0x2e8
   1422c:	mov	r0, #4
   14230:	str	r1, [r7, #748]	; 0x2ec
   14234:	bl	11f90 <malloc@plt>
   14238:	mov	r6, r0
   1423c:	bl	12b40 <init_token_if@@Base>
   14240:	add	r0, r7, #776	; 0x308
   14244:	b	13b7c <next@@Base+0x57c>
   14248:	ldrd	r0, [r7, #168]	; 0xa8
   1424c:	adds	r0, r0, #1
   14250:	adc	r1, r1, #0
   14254:	strd	r0, [r7, #168]	; 0xa8
   14258:	mov	r0, #8
   1425c:	bl	11f90 <malloc@plt>
   14260:	mov	r1, #0
   14264:	mov	r6, r0
   14268:	bl	12870 <init_token_int_value@@Base>
   1426c:	add	r0, r7, #184	; 0xb8
   14270:	b	13b7c <next@@Base+0x57c>
   14274:	ldrd	r8, [r7, #200]	; 0xc8
   14278:	adds	r8, r8, #1
   1427c:	adc	r9, r9, #0
   14280:	cmp	r2, #40	; 0x28
   14284:	strd	r8, [r7, #200]	; 0xc8
   14288:	bne	142b4 <next@@Base+0xcb4>
   1428c:	ldrd	r0, [r7, #232]	; 0xe8
   14290:	adds	r0, r0, #1
   14294:	adc	r1, r1, #0
   14298:	strd	r0, [r7, #232]	; 0xe8
   1429c:	mov	r0, #4
   142a0:	bl	11f90 <malloc@plt>
   142a4:	mov	r6, r0
   142a8:	bl	12910 <init_token_opar@@Base>
   142ac:	add	r0, r7, #248	; 0xf8
   142b0:	b	13b7c <next@@Base+0x57c>
   142b4:	ldrd	r8, [r7, #240]	; 0xf0
   142b8:	adds	r8, r8, #1
   142bc:	adc	r9, r9, #0
   142c0:	cmp	r2, #41	; 0x29
   142c4:	strd	r8, [r7, #240]	; 0xf0
   142c8:	bne	143a0 <next@@Base+0xda0>
   142cc:	ldr	r0, [r7, #256]	; 0x100
   142d0:	ldr	r1, [r7, #260]	; 0x104
   142d4:	adds	r0, r0, #1
   142d8:	adc	r1, r1, #0
   142dc:	str	r0, [r7, #256]	; 0x100
   142e0:	mov	r0, #4
   142e4:	str	r1, [r7, #260]	; 0x104
   142e8:	bl	11f90 <malloc@plt>
   142ec:	mov	r6, r0
   142f0:	bl	12960 <init_token_cpar@@Base>
   142f4:	add	r0, r7, #272	; 0x110
   142f8:	b	13b7c <next@@Base+0x57c>
   142fc:	ldr	r0, [r7, #280]	; 0x118
   14300:	ldr	r1, [r7, #284]	; 0x11c
   14304:	adds	r0, r0, #1
   14308:	adc	r1, r1, #0
   1430c:	str	r0, [r7, #280]	; 0x118
   14310:	mov	r0, #4
   14314:	str	r1, [r7, #284]	; 0x11c
   14318:	bl	11f90 <malloc@plt>
   1431c:	mov	r6, r0
   14320:	bl	129b0 <init_token_obra@@Base>
   14324:	add	r0, r7, #296	; 0x128
   14328:	b	13b7c <next@@Base+0x57c>
   1432c:	ldr	r0, [r7, #304]	; 0x130
   14330:	ldr	r1, [r7, #308]	; 0x134
   14334:	adds	r0, r0, #1
   14338:	adc	r1, r1, #0
   1433c:	str	r0, [r7, #304]	; 0x130
   14340:	mov	r0, #4
   14344:	str	r1, [r7, #308]	; 0x134
   14348:	bl	11f90 <malloc@plt>
   1434c:	mov	r6, r0
   14350:	bl	12a00 <init_token_cbra@@Base>
   14354:	add	r0, r7, #320	; 0x140
   14358:	b	13b7c <next@@Base+0x57c>
   1435c:	ldr	r0, [r7, #328]	; 0x148
   14360:	ldr	r1, [r7, #332]	; 0x14c
   14364:	adds	r0, r0, #1
   14368:	adc	r1, r1, #0
   1436c:	str	r0, [r7, #328]	; 0x148
   14370:	mov	r0, #4
   14374:	str	r1, [r7, #332]	; 0x14c
   14378:	bl	11f90 <malloc@plt>
   1437c:	mov	r6, r0
   14380:	bl	12aa0 <init_token_semicolon@@Base>
   14384:	add	r0, r7, #344	; 0x158
   14388:	b	13b7c <next@@Base+0x57c>
   1438c:	nop	{0}
   14390:	andeq	r0, r0, r1
   14394:	andeq	r0, r0, r0
   14398:	andeq	r0, r0, r1
   1439c:	andeq	r0, r0, r0
   143a0:	ldr	r0, [r7, #408]	; 0x198
   143a4:	ldr	r1, [r7, #412]	; 0x19c
   143a8:	ldr	r3, [r7, #384]	; 0x180
   143ac:	ldr	r6, [r7, #388]	; 0x184
   143b0:	adds	r0, r0, #1
   143b4:	adc	r1, r1, #0
   143b8:	adds	r5, r3, #1
   143bc:	adc	r8, r6, #0
   143c0:	ldr	r6, [r7, #360]	; 0x168
   143c4:	str	r1, [sp, #4]
   143c8:	adds	r6, r6, #1
   143cc:	str	r6, [r7, #360]	; 0x168
   143d0:	str	r5, [r7, #384]	; 0x180
   143d4:	str	r0, [r7, #408]	; 0x198
   143d8:	ldr	r0, [r7, #364]	; 0x16c
   143dc:	ldr	r6, [r7, #264]	; 0x108
   143e0:	ldr	r5, [r7, #268]	; 0x10c
   143e4:	ldr	r1, [r7, #288]	; 0x120
   143e8:	ldr	r3, [r7, #292]	; 0x124
   143ec:	adc	r9, r0, #0
   143f0:	ldr	r0, [r7, #336]	; 0x150
   143f4:	adds	r6, r6, #1
   143f8:	adc	r5, r5, #0
   143fc:	adds	r0, r0, #1
   14400:	str	r0, [r7, #336]	; 0x150
   14404:	str	r6, [r7, #264]	; 0x108
   14408:	str	r5, [r7, #268]	; 0x10c
   1440c:	ldr	r0, [r7, #340]	; 0x154
   14410:	ldr	r5, [r7, #312]	; 0x138
   14414:	adc	r0, r0, #0
   14418:	adds	r5, r5, #1
   1441c:	str	r5, [r7, #312]	; 0x138
   14420:	ldr	r5, [r7, #316]	; 0x13c
   14424:	ldr	r6, [r7, #432]	; 0x1b0
   14428:	adc	r5, r5, #0
   1442c:	adds	r1, r1, #1
   14430:	adc	r3, r3, #0
   14434:	adds	r6, r6, #1
   14438:	str	r6, [r7, #432]	; 0x1b0
   1443c:	str	r1, [r7, #288]	; 0x120
   14440:	str	r3, [r7, #292]	; 0x124
   14444:	str	r5, [r7, #316]	; 0x13c
   14448:	str	r0, [r7, #340]	; 0x154
   1444c:	ldr	r0, [sp, #4]
   14450:	str	r9, [r7, #364]	; 0x16c
   14454:	str	r8, [r7, #388]	; 0x184
   14458:	str	r0, [r7, #412]	; 0x19c
   1445c:	ldr	r0, [r7, #436]	; 0x1b4
   14460:	adc	r0, r0, #0
   14464:	cmp	r2, #33	; 0x21
   14468:	str	r0, [r7, #436]	; 0x1b4
   1446c:	bne	14514 <next@@Base+0xf14>
   14470:	sub	r0, pc, #232	; 0xe8
   14474:	vld1.64	{d18-d19}, [lr :128]
   14478:	ldr	r1, [r7, #452]	; 0x1c4
   1447c:	vld1.64	{d16-d17}, [r0 :128]
   14480:	mov	r0, #33	; 0x21
   14484:	strb	r0, [ip, sl]
   14488:	ldr	r0, [r7, #448]	; 0x1c0
   1448c:	vadd.i64	q8, q9, q8
   14490:	adds	r0, r0, #1
   14494:	adc	r1, r1, #0
   14498:	str	r0, [r7, #448]	; 0x1c0
   1449c:	str	r1, [r7, #452]	; 0x1c4
   144a0:	vst1.64	{d16-d17}, [lr :128]
   144a4:	ldr	r1, [r4, #8]
   144a8:	ldr	r0, [r4]
   144ac:	add	r2, r1, #1
   144b0:	str	r2, [r4, #8]
   144b4:	ldrb	r5, [r0, r1]
   144b8:	mov	r0, #8
   144bc:	bl	11f90 <malloc@plt>
   144c0:	mov	r6, r0
   144c4:	cmp	r5, #61	; 0x3d
   144c8:	bne	14640 <next@@Base+0x1040>
   144cc:	ldr	r0, [r7, #472]	; 0x1d8
   144d0:	ldr	r1, [r7, #476]	; 0x1dc
   144d4:	adds	r0, r0, #1
   144d8:	adc	r1, r1, #0
   144dc:	str	r0, [r7, #472]	; 0x1d8
   144e0:	mov	r0, #3
   144e4:	str	r1, [r7, #476]	; 0x1dc
   144e8:	bl	11f90 <malloc@plt>
   144ec:	mov	r1, r0
   144f0:	ldrb	r0, [sp, #8]
   144f4:	mov	r2, #61	; 0x3d
   144f8:	strb	r2, [r1, #1]
   144fc:	add	r2, r1, #2
   14500:	strb	r0, [r1]
   14504:	add	r0, r7, #488	; 0x1e8
   14508:	b	146ec <next@@Base+0x10ec>
   1450c:	andeq	r9, r1, ip, lsl #28
   14510:	andeq	r9, r1, r0, lsl lr
   14514:	ldr	r0, [r7, #584]	; 0x248
   14518:	ldr	r1, [r7, #588]	; 0x24c
   1451c:	ldr	r3, [r7, #528]	; 0x210
   14520:	ldr	r6, [r7, #532]	; 0x214
   14524:	ldr	r5, [r7, #456]	; 0x1c8
   14528:	adds	r0, r0, #1
   1452c:	adc	r8, r1, #0
   14530:	ldr	r1, [r7, #512]	; 0x200
   14534:	adds	r9, r3, #1
   14538:	ldr	r3, [r7, #516]	; 0x204
   1453c:	str	r0, [sp, #4]
   14540:	ldr	r0, [r7, #460]	; 0x1cc
   14544:	adc	r6, r6, #0
   14548:	adds	r1, r1, #1
   1454c:	str	r1, [r7, #512]	; 0x200
   14550:	adc	r1, r3, #0
   14554:	adds	r3, r5, #1
   14558:	ldr	r5, [r7, #624]	; 0x270
   1455c:	adc	r0, r0, #0
   14560:	adds	r5, r5, #1
   14564:	str	r5, [r7, #624]	; 0x270
   14568:	str	r0, [r7, #460]	; 0x1cc
   1456c:	ldr	r0, [sp, #4]
   14570:	str	r3, [r7, #456]	; 0x1c8
   14574:	str	r1, [r7, #516]	; 0x204
   14578:	str	r9, [r7, #528]	; 0x210
   1457c:	str	r6, [r7, #532]	; 0x214
   14580:	str	r8, [r7, #588]	; 0x24c
   14584:	str	r0, [r7, #584]	; 0x248
   14588:	ldr	r0, [r7, #628]	; 0x274
   1458c:	adc	r0, r0, #0
   14590:	cmp	r2, #38	; 0x26
   14594:	str	r0, [r7, #628]	; 0x274
   14598:	bne	14c9c <next@@Base+0x169c>
   1459c:	sub	r0, pc, #532	; 0x214
   145a0:	vld1.64	{d18-d19}, [lr :128]
   145a4:	ldr	r1, [r7, #660]	; 0x294
   145a8:	mov	r5, #38	; 0x26
   145ac:	vld1.64	{d16-d17}, [r0 :128]
   145b0:	ldr	r0, [r7, #656]	; 0x290
   145b4:	strb	r5, [ip, sl]
   145b8:	adds	r0, r0, #1
   145bc:	vadd.i64	q8, q9, q8
   145c0:	adc	r1, r1, #0
   145c4:	str	r0, [r7, #656]	; 0x290
   145c8:	str	r1, [r7, #660]	; 0x294
   145cc:	vst1.64	{d16-d17}, [lr :128]
   145d0:	ldr	r1, [r4, #8]
   145d4:	ldr	r0, [r4]
   145d8:	add	r2, r1, #1
   145dc:	str	r2, [r4, #8]
   145e0:	ldrb	r4, [r0, r1]
   145e4:	mov	r0, #8
   145e8:	bl	11f90 <malloc@plt>
   145ec:	cmp	r4, #38	; 0x26
   145f0:	bne	14c44 <next@@Base+0x1644>
   145f4:	mov	r6, r0
   145f8:	ldr	r0, [r7, #680]	; 0x2a8
   145fc:	ldr	r1, [r7, #684]	; 0x2ac
   14600:	adds	r0, r0, #1
   14604:	adc	r1, r1, #0
   14608:	str	r0, [r7, #680]	; 0x2a8
   1460c:	mov	r0, #3
   14610:	str	r1, [r7, #684]	; 0x2ac
   14614:	bl	11f90 <malloc@plt>
   14618:	mov	r1, r0
   1461c:	ldrb	r0, [sp, #8]
   14620:	strh	r5, [r1, #1]
   14624:	strb	r0, [r1]
   14628:	mov	r0, r6
   1462c:	bl	12be0 <init_token_boolean_op@@Base>
   14630:	add	r0, r7, #688	; 0x2b0
   14634:	b	13b7c <next@@Base+0x57c>
   14638:	andeq	r9, r1, r8, asr sp
   1463c:	andeq	r9, r1, ip, asr #26
   14640:	ldr	r1, [pc, #1736]	; 14d10 <next@@Base+0x1710>
   14644:	sub	r0, pc, #700	; 0x2bc
   14648:	vld1.64	{d16-d17}, [r0 :128]
   1464c:	add	r1, pc, r1
   14650:	vld1.64	{d18-d19}, [r1 :128]
   14654:	ldr	r0, [pc, #1720]	; 14d14 <next@@Base+0x1714>
   14658:	ldr	r2, [pc, #1720]	; 14d18 <next@@Base+0x1718>
   1465c:	ldr	r2, [pc, r2]
   14660:	add	r0, pc, r0
   14664:	ldr	r3, [r7, #464]	; 0x1d0
   14668:	ldr	r5, [r7, #468]	; 0x1d4
   1466c:	vadd.i64	q8, q9, q8
   14670:	adds	r2, r2, #1
   14674:	vst1.64	{d16-d17}, [r1 :128]
   14678:	str	r2, [r0]
   1467c:	ldr	r2, [r0, #4]
   14680:	adc	r2, r2, #0
   14684:	adds	r3, r3, #1
   14688:	adc	r1, r5, #0
   1468c:	str	r2, [r0, #4]
   14690:	str	r3, [r7, #464]	; 0x1d0
   14694:	str	r1, [r7, #468]	; 0x1d4
   14698:	ldr	r1, [r4, #8]
   1469c:	cmp	r1, #0
   146a0:	beq	14a54 <next@@Base+0x1454>
   146a4:	ldrd	r2, [r0, #8]
   146a8:	ldrd	r8, [r0, #24]
   146ac:	adds	r2, r2, #1
   146b0:	adc	r3, r3, #0
   146b4:	adds	r5, r8, #1
   146b8:	str	r5, [r0, #24]
   146bc:	strd	r2, [r0, #8]
   146c0:	adc	r2, r9, #0
   146c4:	str	r2, [r0, #28]
   146c8:	sub	r0, r1, #1
   146cc:	str	r0, [r4, #8]
   146d0:	mov	r0, #2
   146d4:	bl	11f90 <malloc@plt>
   146d8:	mov	r1, r0
   146dc:	ldrb	r0, [sp, #8]
   146e0:	mov	r2, r1
   146e4:	strb	r0, [r2], #1
   146e8:	add	r0, r7, #480	; 0x1e0
   146ec:	mov	r3, #0
   146f0:	strb	r3, [r2]
   146f4:	ldrd	r2, [r0]
   146f8:	adds	r2, r2, #1
   146fc:	adc	r3, r3, #0
   14700:	strd	r2, [r0]
   14704:	mov	r0, r6
   14708:	bl	12be0 <init_token_boolean_op@@Base>
   1470c:	add	r0, r7, #496	; 0x1f0
   14710:	b	13b7c <next@@Base+0x57c>
   14714:	ldr	r0, [r7, #432]	; 0x1b0
   14718:	ldr	r1, [r7, #436]	; 0x1b4
   1471c:	ldr	r3, [r7, #456]	; 0x1c8
   14720:	ldr	r6, [r7, #460]	; 0x1cc
   14724:	adds	r0, r0, #1
   14728:	adc	r1, r1, #0
   1472c:	adds	r3, r3, #1
   14730:	str	r0, [r7, #432]	; 0x1b0
   14734:	adc	r0, r6, #0
   14738:	cmp	r2, #60	; 0x3c
   1473c:	str	r1, [r7, #436]	; 0x1b4
   14740:	str	r3, [r7, #456]	; 0x1c8
   14744:	str	r0, [r7, #460]	; 0x1cc
   14748:	bne	14754 <next@@Base+0x1154>
   1474c:	add	r1, r7, #504	; 0x1f8
   14750:	b	14778 <next@@Base+0x1178>
   14754:	ldr	r0, [r7, #512]	; 0x200
   14758:	ldr	r1, [r7, #516]	; 0x204
   1475c:	adds	r0, r0, #1
   14760:	adc	r1, r1, #0
   14764:	cmp	r2, #62	; 0x3e
   14768:	str	r0, [r7, #512]	; 0x200
   1476c:	str	r1, [r7, #516]	; 0x204
   14770:	bne	148dc <next@@Base+0x12dc>
   14774:	add	r1, r7, #520	; 0x208
   14778:	ldm	r1, {r0, r3}
   1477c:	adds	r0, r0, #1
   14780:	adc	r3, r3, #0
   14784:	stm	r1, {r0, r3}
   14788:	add	r0, pc, #992	; 0x3e0
   1478c:	vld1.64	{d18-d19}, [lr :128]
   14790:	strb	r5, [ip, sl]
   14794:	vld1.64	{d16-d17}, [r0 :128]
   14798:	vadd.i64	q8, q9, q8
   1479c:	vst1.64	{d16-d17}, [lr :128]
   147a0:	ldr	r1, [r4, #8]
   147a4:	ldr	r0, [r4]
   147a8:	add	r2, r1, #1
   147ac:	str	r2, [r4, #8]
   147b0:	ldrb	r5, [r0, r1]
   147b4:	mov	r0, #8
   147b8:	bl	11f90 <malloc@plt>
   147bc:	mov	r6, r0
   147c0:	cmp	r5, #61	; 0x3d
   147c4:	bne	14808 <next@@Base+0x1208>
   147c8:	ldr	r0, [r7, #544]	; 0x220
   147cc:	ldr	r1, [r7, #548]	; 0x224
   147d0:	adds	r0, r0, #1
   147d4:	adc	r1, r1, #0
   147d8:	str	r0, [r7, #544]	; 0x220
   147dc:	mov	r0, #3
   147e0:	str	r1, [r7, #548]	; 0x224
   147e4:	bl	11f90 <malloc@plt>
   147e8:	mov	r1, r0
   147ec:	ldrb	r0, [sp, #8]
   147f0:	mov	r2, #61	; 0x3d
   147f4:	strb	r2, [r1, #1]
   147f8:	add	r2, r1, #2
   147fc:	strb	r0, [r1]
   14800:	add	r0, r7, #560	; 0x230
   14804:	b	148b4 <next@@Base+0x12b4>
   14808:	ldr	r1, [pc, #1292]	; 14d1c <next@@Base+0x171c>
   1480c:	add	r0, pc, #860	; 0x35c
   14810:	vld1.64	{d16-d17}, [r0 :128]
   14814:	add	r1, pc, r1
   14818:	vld1.64	{d18-d19}, [r1 :128]
   1481c:	ldr	r0, [pc, #1276]	; 14d20 <next@@Base+0x1720>
   14820:	ldr	r2, [pc, #1276]	; 14d24 <next@@Base+0x1724>
   14824:	ldr	r2, [pc, r2]
   14828:	add	r0, pc, r0
   1482c:	ldr	r3, [r7, #536]	; 0x218
   14830:	ldr	r5, [r7, #540]	; 0x21c
   14834:	vadd.i64	q8, q9, q8
   14838:	adds	r2, r2, #1
   1483c:	vst1.64	{d16-d17}, [r1 :128]
   14840:	str	r2, [r0]
   14844:	ldr	r2, [r0, #4]
   14848:	adc	r2, r2, #0
   1484c:	adds	r3, r3, #1
   14850:	adc	r1, r5, #0
   14854:	str	r2, [r0, #4]
   14858:	str	r3, [r7, #536]	; 0x218
   1485c:	str	r1, [r7, #540]	; 0x21c
   14860:	ldr	r1, [r4, #8]
   14864:	cmp	r1, #0
   14868:	beq	14a54 <next@@Base+0x1454>
   1486c:	ldrd	r2, [r0, #8]
   14870:	ldrd	r8, [r0, #24]
   14874:	adds	r2, r2, #1
   14878:	adc	r3, r3, #0
   1487c:	adds	r5, r8, #1
   14880:	str	r5, [r0, #24]
   14884:	strd	r2, [r0, #8]
   14888:	adc	r2, r9, #0
   1488c:	str	r2, [r0, #28]
   14890:	sub	r0, r1, #1
   14894:	str	r0, [r4, #8]
   14898:	mov	r0, #2
   1489c:	bl	11f90 <malloc@plt>
   148a0:	mov	r1, r0
   148a4:	ldrb	r0, [sp, #8]
   148a8:	mov	r2, r1
   148ac:	strb	r0, [r2], #1
   148b0:	add	r0, r7, #552	; 0x228
   148b4:	mov	r3, #0
   148b8:	strb	r3, [r2]
   148bc:	ldrd	r2, [r0]
   148c0:	adds	r2, r2, #1
   148c4:	adc	r3, r3, #0
   148c8:	strd	r2, [r0]
   148cc:	mov	r0, r6
   148d0:	bl	12be0 <init_token_boolean_op@@Base>
   148d4:	add	r0, r7, #568	; 0x238
   148d8:	b	13b7c <next@@Base+0x57c>
   148dc:	ldr	r0, [r7, #528]	; 0x210
   148e0:	ldr	r1, [r7, #532]	; 0x214
   148e4:	adds	r0, r0, #1
   148e8:	adc	r1, r1, #0
   148ec:	cmp	r2, #61	; 0x3d
   148f0:	str	r0, [r7, #528]	; 0x210
   148f4:	str	r1, [r7, #532]	; 0x214
   148f8:	bne	14998 <next@@Base+0x1398>
   148fc:	add	r0, pc, #620	; 0x26c
   14900:	vld1.64	{d18-d19}, [lr :128]
   14904:	ldr	r1, [r7, #580]	; 0x244
   14908:	mov	r5, #61	; 0x3d
   1490c:	vld1.64	{d16-d17}, [r0 :128]
   14910:	ldr	r0, [r7, #576]	; 0x240
   14914:	strb	r5, [ip, sl]
   14918:	adds	r0, r0, #1
   1491c:	vadd.i64	q8, q9, q8
   14920:	adc	r1, r1, #0
   14924:	str	r0, [r7, #576]	; 0x240
   14928:	str	r1, [r7, #580]	; 0x244
   1492c:	vst1.64	{d16-d17}, [lr :128]
   14930:	ldr	r1, [r4, #8]
   14934:	ldr	r0, [r4]
   14938:	add	r2, r1, #1
   1493c:	str	r2, [r4, #8]
   14940:	ldrb	r4, [r0, r1]
   14944:	mov	r0, #8
   14948:	bl	11f90 <malloc@plt>
   1494c:	cmp	r4, #61	; 0x3d
   14950:	bne	14c64 <next@@Base+0x1664>
   14954:	mov	r6, r0
   14958:	ldr	r0, [r7, #600]	; 0x258
   1495c:	ldr	r1, [r7, #604]	; 0x25c
   14960:	adds	r0, r0, #1
   14964:	adc	r1, r1, #0
   14968:	str	r0, [r7, #600]	; 0x258
   1496c:	mov	r0, #3
   14970:	str	r1, [r7, #604]	; 0x25c
   14974:	bl	11f90 <malloc@plt>
   14978:	mov	r1, r0
   1497c:	ldrb	r0, [sp, #8]
   14980:	strh	r5, [r1, #1]
   14984:	strb	r0, [r1]
   14988:	mov	r0, r6
   1498c:	bl	12be0 <init_token_boolean_op@@Base>
   14990:	add	r0, r7, #608	; 0x260
   14994:	b	13b7c <next@@Base+0x57c>
   14998:	ldr	r0, [r7, #584]	; 0x248
   1499c:	ldr	r1, [r7, #588]	; 0x24c
   149a0:	adds	r0, r0, #1
   149a4:	adc	r1, r1, #0
   149a8:	cmp	r2, #124	; 0x7c
   149ac:	str	r0, [r7, #584]	; 0x248
   149b0:	str	r1, [r7, #588]	; 0x24c
   149b4:	bne	14c84 <next@@Base+0x1684>
   149b8:	add	r0, pc, #832	; 0x340
   149bc:	vld1.64	{d18-d19}, [lr :128]
   149c0:	ldr	r1, [r7, #620]	; 0x26c
   149c4:	mov	r5, #124	; 0x7c
   149c8:	vld1.64	{d16-d17}, [r0 :128]
   149cc:	ldr	r0, [r7, #616]	; 0x268
   149d0:	strb	r5, [ip, sl]
   149d4:	adds	r0, r0, #1
   149d8:	vadd.i64	q8, q9, q8
   149dc:	adc	r1, r1, #0
   149e0:	str	r0, [r7, #616]	; 0x268
   149e4:	str	r1, [r7, #620]	; 0x26c
   149e8:	vst1.64	{d16-d17}, [lr :128]
   149ec:	ldr	r1, [r4, #8]
   149f0:	ldr	r0, [r4]
   149f4:	add	r2, r1, #1
   149f8:	str	r2, [r4, #8]
   149fc:	ldrb	r4, [r0, r1]
   14a00:	mov	r0, #8
   14a04:	bl	11f90 <malloc@plt>
   14a08:	cmp	r4, #124	; 0x7c
   14a0c:	bne	14cd4 <next@@Base+0x16d4>
   14a10:	mov	r6, r0
   14a14:	ldr	r0, [r7, #640]	; 0x280
   14a18:	ldr	r1, [r7, #644]	; 0x284
   14a1c:	adds	r0, r0, #1
   14a20:	adc	r1, r1, #0
   14a24:	str	r0, [r7, #640]	; 0x280
   14a28:	mov	r0, #3
   14a2c:	str	r1, [r7, #644]	; 0x284
   14a30:	bl	11f90 <malloc@plt>
   14a34:	mov	r1, r0
   14a38:	ldrb	r0, [sp, #8]
   14a3c:	strh	r5, [r1, #1]
   14a40:	strb	r0, [r1]
   14a44:	mov	r0, r6
   14a48:	bl	12be0 <init_token_boolean_op@@Base>
   14a4c:	add	r0, r7, #648	; 0x288
   14a50:	b	13b7c <next@@Base+0x57c>
   14a54:	ldrd	r2, [r0, #16]
   14a58:	mov	r1, #32
   14a5c:	adds	r2, r2, #1
   14a60:	adc	r3, r3, #0
   14a64:	strd	r2, [r0, #16]
   14a68:	mov	r2, #1
   14a6c:	ldr	r0, [pc, #716]	; 14d40 <next@@Base+0x1740>
   14a70:	ldr	r0, [pc, r0]
   14a74:	ldr	r3, [r0]
   14a78:	ldr	r0, [pc, #708]	; 14d44 <next@@Base+0x1744>
   14a7c:	add	r0, pc, r0
   14a80:	bl	11f6c <fwrite@plt>
   14a84:	mov	r0, #1
   14a88:	bl	11fcc <exit@plt>
   14a8c:	ldr	r0, [r7, #784]	; 0x310
   14a90:	ldr	r1, [r7, #788]	; 0x314
   14a94:	adds	r0, r0, #1
   14a98:	adc	r1, r1, #0
   14a9c:	str	r0, [r7, #784]	; 0x310
   14aa0:	mov	r0, #1
   14aa4:	str	r1, [r7, #788]	; 0x314
   14aa8:	bl	11fcc <exit@plt>
   14aac:	ldr	r0, [r7, #800]	; 0x320
   14ab0:	ldr	r1, [r7, #804]	; 0x324
   14ab4:	adds	r0, r0, #1
   14ab8:	adc	r1, r1, #0
   14abc:	str	r0, [r7, #800]	; 0x320
   14ac0:	mov	r0, #1
   14ac4:	str	r1, [r7, #804]	; 0x324
   14ac8:	bl	11fcc <exit@plt>
   14acc:	ldr	r0, [r7, #816]	; 0x330
   14ad0:	ldr	r1, [r7, #820]	; 0x334
   14ad4:	adds	r0, r0, #1
   14ad8:	adc	r1, r1, #0
   14adc:	str	r0, [r7, #816]	; 0x330
   14ae0:	mov	r0, #1
   14ae4:	str	r1, [r7, #820]	; 0x334
   14ae8:	bl	11fcc <exit@plt>
   14aec:	ldr	r0, [r7, #840]	; 0x348
   14af0:	ldr	r1, [r7, #844]	; 0x34c
   14af4:	adds	r0, r0, #1
   14af8:	adc	r1, r1, #0
   14afc:	str	r0, [r7, #840]	; 0x348
   14b00:	mov	r0, #1
   14b04:	str	r1, [r7, #844]	; 0x34c
   14b08:	bl	11fcc <exit@plt>
   14b0c:	ldr	r0, [r7, #856]	; 0x358
   14b10:	ldr	r1, [r7, #860]	; 0x35c
   14b14:	adds	r0, r0, #1
   14b18:	adc	r1, r1, #0
   14b1c:	str	r0, [r7, #856]	; 0x358
   14b20:	mov	r0, #1
   14b24:	str	r1, [r7, #860]	; 0x35c
   14b28:	bl	11fcc <exit@plt>
   14b2c:	ldr	r0, [r7, #872]	; 0x368
   14b30:	ldr	r1, [r7, #876]	; 0x36c
   14b34:	adds	r0, r0, #1
   14b38:	adc	r1, r1, #0
   14b3c:	str	r0, [r7, #872]	; 0x368
   14b40:	mov	r0, #1
   14b44:	str	r1, [r7, #876]	; 0x36c
   14b48:	bl	11fcc <exit@plt>
   14b4c:	ldr	r0, [r7, #888]	; 0x378
   14b50:	ldr	r1, [r7, #892]	; 0x37c
   14b54:	adds	r0, r0, #1
   14b58:	adc	r1, r1, #0
   14b5c:	str	r0, [r7, #888]	; 0x378
   14b60:	mov	r0, #1
   14b64:	str	r1, [r7, #892]	; 0x37c
   14b68:	bl	11fcc <exit@plt>
   14b6c:	nop	{0}
   14b70:	andeq	r0, r0, r1
   14b74:	andeq	r0, r0, r0
   14b78:	andeq	r0, r0, r1
   14b7c:	andeq	r0, r0, r0
   14b80:	ldr	r0, [r7, #904]	; 0x388
   14b84:	ldr	r1, [r7, #908]	; 0x38c
   14b88:	adds	r0, r0, #1
   14b8c:	adc	r1, r1, #0
   14b90:	str	r0, [r7, #904]	; 0x388
   14b94:	mov	r0, #1
   14b98:	str	r1, [r7, #908]	; 0x38c
   14b9c:	bl	11fcc <exit@plt>
   14ba0:	ldr	r0, [r7, #728]	; 0x2d8
   14ba4:	ldr	r1, [r7, #732]	; 0x2dc
   14ba8:	adds	r0, r0, #1
   14bac:	adc	r1, r1, #0
   14bb0:	str	r0, [r7, #728]	; 0x2d8
   14bb4:	mov	r0, #1
   14bb8:	str	r1, [r7, #732]	; 0x2dc
   14bbc:	bl	11fcc <exit@plt>
   14bc0:	andeq	r9, r1, ip, lsl #16
   14bc4:	ldr	r0, [r7, #928]	; 0x3a0
   14bc8:	ldr	r1, [r7, #932]	; 0x3a4
   14bcc:	adds	r0, r0, #1
   14bd0:	adc	r1, r1, #0
   14bd4:	str	r0, [r7, #928]	; 0x3a0
   14bd8:	mov	r0, #1
   14bdc:	str	r1, [r7, #932]	; 0x3a4
   14be0:	bl	11fcc <exit@plt>
   14be4:	ldr	r0, [r7, #944]	; 0x3b0
   14be8:	ldr	r1, [r7, #948]	; 0x3b4
   14bec:	adds	r0, r0, #1
   14bf0:	adc	r1, r1, #0
   14bf4:	str	r0, [r7, #944]	; 0x3b0
   14bf8:	mov	r0, #1
   14bfc:	str	r1, [r7, #948]	; 0x3b4
   14c00:	bl	11fcc <exit@plt>
   14c04:	ldr	r0, [r7, #960]	; 0x3c0
   14c08:	ldr	r1, [r7, #964]	; 0x3c4
   14c0c:	adds	r0, r0, #1
   14c10:	adc	r1, r1, #0
   14c14:	str	r0, [r7, #960]	; 0x3c0
   14c18:	mov	r0, #1
   14c1c:	str	r1, [r7, #964]	; 0x3c4
   14c20:	bl	11fcc <exit@plt>
   14c24:	ldr	r0, [r7, #752]	; 0x2f0
   14c28:	ldr	r1, [r7, #756]	; 0x2f4
   14c2c:	adds	r0, r0, #1
   14c30:	adc	r1, r1, #0
   14c34:	str	r0, [r7, #752]	; 0x2f0
   14c38:	mov	r0, #1
   14c3c:	str	r1, [r7, #756]	; 0x2f4
   14c40:	bl	11fcc <exit@plt>
   14c44:	ldr	r0, [r7, #672]	; 0x2a0
   14c48:	ldr	r1, [r7, #676]	; 0x2a4
   14c4c:	adds	r0, r0, #1
   14c50:	adc	r1, r1, #0
   14c54:	str	r0, [r7, #672]	; 0x2a0
   14c58:	mov	r0, #1
   14c5c:	str	r1, [r7, #676]	; 0x2a4
   14c60:	bl	11fcc <exit@plt>
   14c64:	ldr	r0, [r7, #592]	; 0x250
   14c68:	ldr	r1, [r7, #596]	; 0x254
   14c6c:	adds	r0, r0, #1
   14c70:	adc	r1, r1, #0
   14c74:	str	r0, [r7, #592]	; 0x250
   14c78:	mov	r0, #1
   14c7c:	str	r1, [r7, #596]	; 0x254
   14c80:	bl	11fcc <exit@plt>
   14c84:	ldr	r0, [r7, #624]	; 0x270
   14c88:	ldr	r1, [r7, #628]	; 0x274
   14c8c:	adds	r0, r0, #1
   14c90:	adc	r1, r1, #0
   14c94:	str	r0, [r7, #624]	; 0x270
   14c98:	str	r1, [r7, #628]	; 0x274
   14c9c:	ldr	r0, [r7, #664]	; 0x298
   14ca0:	ldr	r1, [r7, #668]	; 0x29c
   14ca4:	adds	r0, r0, #1
   14ca8:	adc	r1, r1, #0
   14cac:	str	r0, [r7, #664]	; 0x298
   14cb0:	str	r1, [r7, #668]	; 0x29c
   14cb4:	ldr	r0, [pc, #108]	; 14d28 <next@@Base+0x1728>
   14cb8:	ldr	r0, [pc, r0]
   14cbc:	ldr	r0, [r0]
   14cc0:	ldr	r1, [pc, #100]	; 14d2c <next@@Base+0x172c>
   14cc4:	add	r1, pc, r1
   14cc8:	bl	11ffc <fprintf@plt>
   14ccc:	mov	r0, #1
   14cd0:	bl	11fcc <exit@plt>
   14cd4:	ldr	r0, [r7, #632]	; 0x278
   14cd8:	ldr	r1, [r7, #636]	; 0x27c
   14cdc:	adds	r0, r0, #1
   14ce0:	adc	r1, r1, #0
   14ce4:	str	r0, [r7, #632]	; 0x278
   14ce8:	mov	r0, #1
   14cec:	str	r1, [r7, #636]	; 0x27c
   14cf0:	bl	11fcc <exit@plt>
   14cf4:	nop	{0}
   14cf8:	nop	{0}
   14cfc:	nop	{0}
   14d00:	andeq	r0, r0, r1
   14d04:	andeq	r0, r0, r0
   14d08:	andeq	r0, r0, r1
   14d0c:	andeq	r0, r0, r0
   14d10:	andeq	r8, r1, ip, asr #27
   14d14:	muleq	r1, r8, sp
   14d18:	muleq	r1, ip, sp
   14d1c:	andeq	r8, r1, r4, lsl #24
   14d20:	ldrdeq	r8, [r1], -r0
   14d24:	ldrdeq	r8, [r1], -r4
   14d28:	andeq	r8, r1, r4, lsl #8
   14d2c:			; <UNDEFINED> instruction: 0x000065b9
   14d30:	andeq	r9, r1, r8, ror #5
   14d34:			; <UNDEFINED> instruction: 0x000192b4
   14d38:			; <UNDEFINED> instruction: 0x000192b8
   14d3c:	andeq	r9, r1, r8, lsr r6
   14d40:	andeq	r8, r1, ip, asr #12
   14d44:	andeq	r6, r0, r0, ror #15
   14d48:	push	{r4, r5, r6, lr}
   14d4c:	sub	sp, sp, #8
   14d50:	ldr	r0, [pc, #112]	; 14dc8 <next@@Base+0x17c8>
   14d54:	ldr	r1, [pc, #112]	; 14dcc <next@@Base+0x17cc>
   14d58:	movw	r2, #8093	; 0x1f9d
   14d5c:	movt	r2, #48445	; 0xbd3d
   14d60:	add	r0, pc, r0
   14d64:	add	r1, pc, r1
   14d68:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   14d6c:	ldr	r0, [pc, #92]	; 14dd0 <next@@Base+0x17d0>
   14d70:	ldr	r6, [pc, #92]	; 14dd4 <next@@Base+0x17d4>
   14d74:	mov	r5, #0
   14d78:	add	r0, pc, r0
   14d7c:	add	r6, pc, r6
   14d80:	add	r4, r0, #4
   14d84:	mov	r3, r6
   14d88:	ldr	r0, [r3, r5]!
   14d8c:	ldr	r1, [r3, #16]
   14d90:	str	r1, [sp]
   14d94:	ldmib	r3, {r1, r2}
   14d98:	ldrb	r3, [r3, #12]
   14d9c:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   14da0:	ldrd	r0, [r4, #-4]
   14da4:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   14da8:	add	r5, r5, #20
   14dac:	add	r4, r4, #8
   14db0:	cmp	r5, #180	; 0xb4
   14db4:	bne	14d84 <next@@Base+0x1784>
   14db8:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   14dbc:	add	sp, sp, #8
   14dc0:	pop	{r4, r5, r6, lr}
   14dc4:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   14dc8:	andeq	r6, r0, r5, asr #10
   14dcc:	andeq	r6, r0, ip, lsr #5
   14dd0:	andeq	r7, r1, r0, asr #25
   14dd4:	strdeq	r7, [r1], -ip
   14dd8:	push	{fp, lr}
   14ddc:	vpush	{d8-d9}
   14de0:	bl	14d48 <next@@Base+0x1748>
   14de4:	ldr	r0, [pc, #148]	; 14e80 <next@@Base+0x1880>
   14de8:	vmov.i32	q4, #0	; 0x00000000
   14dec:	add	r0, pc, r0
   14df0:	vst1.64	{d8-d9}, [r0 :128]
   14df4:	ldr	r0, [pc, #136]	; 14e84 <next@@Base+0x1884>
   14df8:	add	r0, pc, r0
   14dfc:	add	r1, r0, #16
   14e00:	vst1.64	{d8-d9}, [r1 :128]
   14e04:	mov	r1, #0
   14e08:	str	r1, [r0, #32]
   14e0c:	ldr	r2, [pc, #116]	; 14e88 <next@@Base+0x1888>
   14e10:	add	r2, pc, r2
   14e14:	vst1.64	{d8-d9}, [r2 :128]
   14e18:	ldr	r2, [pc, #108]	; 14e8c <next@@Base+0x188c>
   14e1c:	add	r2, pc, r2
   14e20:	vst1.64	{d8-d9}, [r2 :128]
   14e24:	ldr	r2, [pc, #100]	; 14e90 <next@@Base+0x1890>
   14e28:	add	r2, pc, r2
   14e2c:	vst1.64	{d8-d9}, [r2 :128]
   14e30:	ldr	r2, [pc, #92]	; 14e94 <next@@Base+0x1894>
   14e34:	add	r2, pc, r2
   14e38:	vst1.64	{d8-d9}, [r2 :128]
   14e3c:	mov	r2, #36	; 0x24
   14e40:	vst1.64	{d8-d9}, [r0 :128], r2
   14e44:	mov	r2, #1008	; 0x3f0
   14e48:	str	r1, [r0]
   14e4c:	mov	r1, #0
   14e50:	ldr	r0, [pc, #64]	; 14e98 <next@@Base+0x1898>
   14e54:	add	r0, pc, r0
   14e58:	vst1.64	{d8-d9}, [r0 :128]!
   14e5c:	vst1.64	{d8-d9}, [r0 :128]
   14e60:	ldr	r0, [pc, #52]	; 14e9c <next@@Base+0x189c>
   14e64:	add	r0, pc, r0
   14e68:	bl	1202c <memset@plt>
   14e6c:	ldr	r0, [pc, #44]	; 14ea0 <next@@Base+0x18a0>
   14e70:	add	r0, pc, r0
   14e74:	vst1.64	{d8-d9}, [r0 :128]
   14e78:	vpop	{d8-d9}
   14e7c:	pop	{fp, pc}
   14e80:	muleq	r1, ip, r5
   14e84:	andeq	r8, r1, r0, lsr #11
   14e88:			; <UNDEFINED> instruction: 0x000185b8
   14e8c:			; <UNDEFINED> instruction: 0x000185bc
   14e90:	andeq	r8, r1, r0, asr #11
   14e94:	andeq	r8, r1, r4, ror #11
   14e98:	andeq	r8, r1, r4, lsr #11
   14e9c:	andeq	r8, r1, r4, asr #11
   14ea0:	andeq	r8, r1, r8, lsr #19
   14ea4:	ldr	r0, [pc, #12]	; 14eb8 <next@@Base+0x18b8>
   14ea8:	ldr	r1, [pc, #12]	; 14ebc <next@@Base+0x18bc>
   14eac:	add	r0, pc, r0
   14eb0:	add	r1, pc, r1
   14eb4:	b	1a83c <__gcov_flush@@Base+0xb8>
   14eb8:			; <UNDEFINED> instruction: 0xfffffe94
   14ebc:			; <UNDEFINED> instruction: 0xffffff20

00014ec0 <init_ast_base@@Base>:
   14ec0:	ldr	ip, [pc, #56]	; 14f00 <init_ast_base@@Base+0x40>
   14ec4:	add	r3, pc, #36	; 0x24
   14ec8:	vld1.64	{d16-d17}, [r3 :128]
   14ecc:	add	ip, pc, ip
   14ed0:	vld1.64	{d18-d19}, [ip :128]
   14ed4:	vadd.i64	q8, q9, q8
   14ed8:	vst1.64	{d16-d17}, [ip :128]
   14edc:	stm	r0, {r1, r2}
   14ee0:	bx	lr
   14ee4:	nop	{0}
   14ee8:	nop	{0}
   14eec:	nop	{0}
   14ef0:	andeq	r0, r0, r1
   14ef4:	andeq	r0, r0, r0
   14ef8:	andeq	r0, r0, r1
   14efc:	andeq	r0, r0, r0
   14f00:	andeq	r8, r1, ip, asr r9
   14f04:	nop	{0}
   14f08:	nop	{0}
   14f0c:	nop	{0}

00014f10 <init_ast_base_single@@Base>:
   14f10:	ldr	ip, [pc, #72]	; 14f60 <init_ast_base_single@@Base+0x50>
   14f14:	ldr	r3, [pc, #72]	; 14f64 <init_ast_base_single@@Base+0x54>
   14f18:	add	r2, pc, #48	; 0x30
   14f1c:	vld1.64	{d16-d17}, [r2 :128]
   14f20:	mov	r2, #0
   14f24:	add	ip, pc, ip
   14f28:	add	r3, pc, r3
   14f2c:	vld1.64	{d18-d19}, [r3 :128]
   14f30:	vld1.64	{d20-d21}, [ip :128]
   14f34:	vadd.i64	q9, q9, q8
   14f38:	vadd.i64	q8, q10, q8
   14f3c:	vst1.64	{d18-d19}, [r3 :128]
   14f40:	vst1.64	{d16-d17}, [ip :128]
   14f44:	stm	r0, {r1, r2}
   14f48:	bx	lr
   14f4c:	nop	{0}
   14f50:	andeq	r0, r0, r1
   14f54:	andeq	r0, r0, r0
   14f58:	andeq	r0, r0, r1
   14f5c:	andeq	r0, r0, r0
   14f60:	andeq	r8, r1, r4, lsl #18
   14f64:	andeq	r8, r1, r0, lsl r9
   14f68:	nop	{0}
   14f6c:	nop	{0}

00014f70 <init_node_id@@Base>:
   14f70:	ldr	ip, [pc, #104]	; 14fe0 <init_node_id@@Base+0x70>
   14f74:	add	r3, pc, #84	; 0x54
   14f78:	vld1.64	{d16-d17}, [r3 :128]
   14f7c:	add	ip, pc, ip
   14f80:	vld1.64	{d18-d19}, [ip :128]
   14f84:	ldr	r3, [pc, #88]	; 14fe4 <init_node_id@@Base+0x74>
   14f88:	ldr	r2, [pc, #88]	; 14fe8 <init_node_id@@Base+0x78>
   14f8c:	add	r2, pc, r2
   14f90:	add	r3, pc, r3
   14f94:	vld1.64	{d20-d21}, [r2 :128]
   14f98:	vld1.64	{d22-d23}, [r3 :128]
   14f9c:	vadd.i64	q9, q9, q8
   14fa0:	vst1.64	{d18-d19}, [ip :128]
   14fa4:	vadd.i64	q10, q10, q8
   14fa8:	vadd.i64	q8, q11, q8
   14fac:	vst1.64	{d20-d21}, [r2 :128]
   14fb0:	mov	r2, #0
   14fb4:	vst1.64	{d16-d17}, [r3 :128]
   14fb8:	str	r2, [r0]
   14fbc:	str	r2, [r0, #4]
   14fc0:	str	r1, [r0, #8]
   14fc4:	bx	lr
   14fc8:	nop	{0}
   14fcc:	nop	{0}
   14fd0:	andeq	r0, r0, r1
   14fd4:	andeq	r0, r0, r0
   14fd8:	andeq	r0, r0, r1
   14fdc:	andeq	r0, r0, r0
   14fe0:	andeq	r8, r1, ip, asr #17
   14fe4:	muleq	r1, r8, r8
   14fe8:	andeq	r8, r1, ip, lsr #17
   14fec:	nop	{0}

00014ff0 <init_node_int@@Base>:
   14ff0:	ldr	ip, [pc, #104]	; 15060 <init_node_int@@Base+0x70>
   14ff4:	add	r3, pc, #84	; 0x54
   14ff8:	vld1.64	{d16-d17}, [r3 :128]
   14ffc:	add	ip, pc, ip
   15000:	vld1.64	{d18-d19}, [ip :128]
   15004:	ldr	r3, [pc, #88]	; 15064 <init_node_int@@Base+0x74>
   15008:	ldr	r2, [pc, #88]	; 15068 <init_node_int@@Base+0x78>
   1500c:	add	r3, pc, r3
   15010:	add	r2, pc, r2
   15014:	vld1.64	{d20-d21}, [r2 :128]
   15018:	vld1.64	{d22-d23}, [r3 :128]
   1501c:	vadd.i64	q9, q9, q8
   15020:	vst1.64	{d18-d19}, [ip :128]
   15024:	vadd.i64	q10, q10, q8
   15028:	vadd.i64	q8, q11, q8
   1502c:	vst1.64	{d20-d21}, [r2 :128]
   15030:	vst1.64	{d16-d17}, [r3 :128]
   15034:	mov	r3, #1
   15038:	mov	r2, #0
   1503c:	str	r3, [r0]
   15040:	str	r2, [r0, #4]
   15044:	str	r1, [r0, #8]
   15048:	bx	lr
   1504c:	nop	{0}
   15050:	andeq	r0, r0, r1
   15054:	andeq	r0, r0, r0
   15058:	andeq	r0, r0, r1
   1505c:	andeq	r0, r0, r0
   15060:	andeq	r8, r1, ip, asr r8
   15064:	andeq	r8, r1, ip, lsl r8
   15068:	andeq	r8, r1, r8, lsr #16
   1506c:	nop	{0}

00015070 <init_node_function@@Base>:
   15070:	push	{fp, lr}
   15074:	mov	fp, sp
   15078:	ldr	ip, [pc, #112]	; 150f0 <init_node_function@@Base+0x80>
   1507c:	add	r3, pc, #92	; 0x5c
   15080:	vld1.64	{d16-d17}, [r3 :128]
   15084:	add	ip, pc, ip
   15088:	vld1.64	{d18-d19}, [ip :128]
   1508c:	ldr	lr, [pc, #96]	; 150f4 <init_node_function@@Base+0x84>
   15090:	ldr	r3, [pc, #96]	; 150f8 <init_node_function@@Base+0x88>
   15094:	add	r3, pc, r3
   15098:	add	lr, pc, lr
   1509c:	vld1.64	{d20-d21}, [r3 :128]
   150a0:	vld1.64	{d22-d23}, [lr :128]
   150a4:	vadd.i64	q9, q9, q8
   150a8:	vst1.64	{d18-d19}, [ip :128]
   150ac:	mov	ip, #0
   150b0:	vadd.i64	q10, q10, q8
   150b4:	vadd.i64	q8, q11, q8
   150b8:	vst1.64	{d20-d21}, [r3 :128]
   150bc:	mov	r3, #2
   150c0:	vst1.64	{d16-d17}, [lr :128]
   150c4:	stm	r0, {r3, ip}
   150c8:	str	r1, [r0, #8]
   150cc:	str	r2, [r0, #12]
   150d0:	pop	{fp, pc}
   150d4:	nop	{0}
   150d8:	nop	{0}
   150dc:	nop	{0}
   150e0:	andeq	r0, r0, r1
   150e4:	andeq	r0, r0, r0
   150e8:	andeq	r0, r0, r1
   150ec:	andeq	r0, r0, r0
   150f0:	andeq	r8, r1, r4, ror #15
   150f4:	muleq	r1, r0, r7
   150f8:	andeq	r8, r1, r4, lsr #15
   150fc:	nop	{0}

00015100 <init_node_return@@Base>:
   15100:	ldr	ip, [pc, #104]	; 15170 <init_node_return@@Base+0x70>
   15104:	add	r3, pc, #84	; 0x54
   15108:	vld1.64	{d16-d17}, [r3 :128]
   1510c:	add	ip, pc, ip
   15110:	vld1.64	{d18-d19}, [ip :128]
   15114:	ldr	r3, [pc, #88]	; 15174 <init_node_return@@Base+0x74>
   15118:	ldr	r2, [pc, #88]	; 15178 <init_node_return@@Base+0x78>
   1511c:	add	r3, pc, r3
   15120:	add	r2, pc, r2
   15124:	vld1.64	{d20-d21}, [r2 :128]
   15128:	vld1.64	{d22-d23}, [r3 :128]
   1512c:	vadd.i64	q9, q9, q8
   15130:	vst1.64	{d18-d19}, [ip :128]
   15134:	vadd.i64	q10, q10, q8
   15138:	vadd.i64	q8, q11, q8
   1513c:	vst1.64	{d20-d21}, [r2 :128]
   15140:	vst1.64	{d16-d17}, [r3 :128]
   15144:	mov	r3, #3
   15148:	mov	r2, #0
   1514c:	str	r3, [r0]
   15150:	str	r2, [r0, #4]
   15154:	str	r1, [r0, #8]
   15158:	bx	lr
   1515c:	nop	{0}
   15160:	andeq	r0, r0, r1
   15164:	andeq	r0, r0, r0
   15168:	andeq	r0, r0, r1
   1516c:	andeq	r0, r0, r0
   15170:	andeq	r8, r1, ip, ror #14
   15174:	andeq	r8, r1, ip, lsl #14
   15178:	andeq	r8, r1, r8, lsl r7
   1517c:	nop	{0}

00015180 <init_node_if@@Base>:
   15180:	push	{r4, sl, fp, lr}
   15184:	add	fp, sp, #8
   15188:	ldr	ip, [pc, #96]	; 151f0 <init_node_if@@Base+0x70>
   1518c:	add	lr, pc, #76	; 0x4c
   15190:	vld1.64	{d16-d17}, [lr :128]
   15194:	add	ip, pc, ip
   15198:	vld1.64	{d18-d19}, [ip :128]
   1519c:	ldr	lr, [pc, #80]	; 151f4 <init_node_if@@Base+0x74>
   151a0:	ldr	r4, [pc, #80]	; 151f8 <init_node_if@@Base+0x78>
   151a4:	add	r4, pc, r4
   151a8:	add	lr, pc, lr
   151ac:	vld1.64	{d20-d21}, [r4 :128]
   151b0:	vld1.64	{d22-d23}, [lr :128]
   151b4:	vadd.i64	q9, q9, q8
   151b8:	vst1.64	{d18-d19}, [ip :128]
   151bc:	mov	ip, #0
   151c0:	vadd.i64	q10, q10, q8
   151c4:	vadd.i64	q8, q11, q8
   151c8:	vst1.64	{d20-d21}, [r4 :128]
   151cc:	mov	r4, #4
   151d0:	vst1.64	{d16-d17}, [lr :128]
   151d4:	stmia	r0!, {r4, ip}
   151d8:	stm	r0, {r1, r2, r3}
   151dc:	pop	{r4, sl, fp, pc}
   151e0:	andeq	r0, r0, r1
   151e4:	andeq	r0, r0, r0
   151e8:	andeq	r0, r0, r1
   151ec:	andeq	r0, r0, r0
   151f0:	strdeq	r8, [r1], -r4
   151f4:	andeq	r8, r1, r0, lsl #13
   151f8:	muleq	r1, r4, r6
   151fc:	nop	{0}

00015200 <init_node_boolean_operator@@Base>:
   15200:	push	{r4, sl, fp, lr}
   15204:	add	fp, sp, #8
   15208:	ldr	ip, [pc, #112]	; 15280 <init_node_boolean_operator@@Base+0x80>
   1520c:	add	lr, pc, #92	; 0x5c
   15210:	vld1.64	{d16-d17}, [lr :128]
   15214:	add	ip, pc, ip
   15218:	vld1.64	{d18-d19}, [ip :128]
   1521c:	ldr	lr, [pc, #96]	; 15284 <init_node_boolean_operator@@Base+0x84>
   15220:	ldr	r4, [pc, #96]	; 15288 <init_node_boolean_operator@@Base+0x88>
   15224:	add	r4, pc, r4
   15228:	add	lr, pc, lr
   1522c:	vld1.64	{d20-d21}, [r4 :128]
   15230:	vld1.64	{d22-d23}, [lr :128]
   15234:	vadd.i64	q9, q9, q8
   15238:	vst1.64	{d18-d19}, [ip :128]
   1523c:	mov	ip, #0
   15240:	vadd.i64	q10, q10, q8
   15244:	vadd.i64	q8, q11, q8
   15248:	vst1.64	{d20-d21}, [r4 :128]
   1524c:	mov	r4, #5
   15250:	vst1.64	{d16-d17}, [lr :128]
   15254:	stm	r0, {r4, ip}
   15258:	str	r2, [r0, #8]
   1525c:	str	r3, [r0, #12]
   15260:	str	r1, [r0, #16]
   15264:	pop	{r4, sl, fp, pc}
   15268:	nop	{0}
   1526c:	nop	{0}
   15270:	andeq	r0, r0, r1
   15274:	andeq	r0, r0, r0
   15278:	andeq	r0, r0, r1
   1527c:	andeq	r0, r0, r0
   15280:	andeq	r8, r1, r4, lsl #13
   15284:	andeq	r8, r1, r0, lsl #12
   15288:	andeq	r8, r1, r4, lsl r6

0001528c <free_node@@Base>:
   1528c:	push	{r4, r5, r6, sl, fp, lr}
   15290:	add	fp, sp, #16
   15294:	ldr	r5, [pc, #944]	; 1564c <free_node@@Base+0x3c0>
   15298:	mov	r4, r0
   1529c:	ldr	r0, [pc, #940]	; 15650 <free_node@@Base+0x3c4>
   152a0:	ldr	r0, [pc, r0]
   152a4:	add	r5, pc, r5
   152a8:	adds	r0, r0, #1
   152ac:	str	r0, [r5]
   152b0:	ldr	r0, [r5, #4]
   152b4:	adc	r0, r0, #0
   152b8:	str	r0, [r5, #4]
   152bc:	ldr	r0, [r4]
   152c0:	cmp	r0, #5
   152c4:	bhi	15614 <free_node@@Base+0x388>
   152c8:	add	r1, pc, #4
   152cc:	ldr	r0, [r1, r0, lsl #2]
   152d0:	add	pc, r1, r0
   152d4:	andeq	r0, r0, r8, lsl r0
   152d8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   152dc:	muleq	r0, r4, r0
   152e0:	andeq	r0, r0, ip, asr #2
   152e4:	andeq	r0, r0, r4, ror r0
   152e8:	andeq	r0, r0, r8, lsr #3
   152ec:	ldr	r6, [pc, #864]	; 15654 <free_node@@Base+0x3c8>
   152f0:	ldr	r0, [pc, #864]	; 15658 <free_node@@Base+0x3cc>
   152f4:	ldr	r0, [pc, r0]
   152f8:	add	r6, pc, r6
   152fc:	ldrd	r2, [r5, #16]
   15300:	adds	r0, r0, #1
   15304:	str	r0, [r6]
   15308:	ldr	r0, [r6, #4]
   1530c:	adc	r0, r0, #0
   15310:	adds	r2, r2, #1
   15314:	adc	r3, r3, #0
   15318:	str	r0, [r6, #4]
   1531c:	strd	r2, [r5, #16]
   15320:	ldr	r0, [r4, #4]
   15324:	cmp	r0, #0
   15328:	beq	154d8 <free_node@@Base+0x24c>
   1532c:	ldrd	r2, [r6, #8]
   15330:	adds	r2, r2, #1
   15334:	adc	r3, r3, #0
   15338:	strd	r2, [r6, #8]
   1533c:	bl	1528c <free_node@@Base>
   15340:	add	r0, r6, #24
   15344:	b	154dc <free_node@@Base+0x250>
   15348:	ldrd	r0, [r5, #48]	; 0x30
   1534c:	adds	r0, r0, #1
   15350:	adc	r1, r1, #0
   15354:	strd	r0, [r5, #48]	; 0x30
   15358:	mov	r0, r4
   1535c:	bl	158cc <free_node_if@@Base>
   15360:	add	r0, r5, #96	; 0x60
   15364:	b	155f0 <free_node@@Base+0x364>
   15368:	ldr	r6, [pc, #756]	; 15664 <free_node@@Base+0x3d8>
   1536c:	ldr	r0, [pc, #756]	; 15668 <free_node@@Base+0x3dc>
   15370:	ldr	r0, [pc, r0]
   15374:	add	r6, pc, r6
   15378:	ldrd	r2, [r5, #32]
   1537c:	adds	r0, r0, #1
   15380:	str	r0, [r6]
   15384:	ldr	r0, [r6, #4]
   15388:	adc	r0, r0, #0
   1538c:	adds	r2, r2, #1
   15390:	adc	r3, r3, #0
   15394:	str	r0, [r6, #4]
   15398:	strd	r2, [r5, #32]
   1539c:	ldr	r0, [r4, #4]
   153a0:	cmp	r0, #0
   153a4:	beq	1550c <free_node@@Base+0x280>
   153a8:	ldrd	r2, [r6, #8]
   153ac:	adds	r2, r2, #1
   153b0:	adc	r3, r3, #0
   153b4:	strd	r2, [r6, #8]
   153b8:	bl	1528c <free_node@@Base>
   153bc:	add	r0, r6, #24
   153c0:	b	15510 <free_node@@Base+0x284>
   153c4:	ldr	r6, [pc, #656]	; 1565c <free_node@@Base+0x3d0>
   153c8:	ldr	r0, [pc, #656]	; 15660 <free_node@@Base+0x3d4>
   153cc:	ldr	r0, [pc, r0]
   153d0:	add	r6, pc, r6
   153d4:	ldrd	r2, [r5, #24]
   153d8:	adds	r0, r0, #1
   153dc:	str	r0, [r6]
   153e0:	ldr	r0, [r6, #4]
   153e4:	adc	r0, r0, #0
   153e8:	adds	r2, r2, #1
   153ec:	adc	r3, r3, #0
   153f0:	str	r0, [r6, #4]
   153f4:	strd	r2, [r5, #24]
   153f8:	ldr	r0, [r4, #4]
   153fc:	cmp	r0, #0
   15400:	beq	15548 <free_node@@Base+0x2bc>
   15404:	ldrd	r2, [r6, #8]
   15408:	adds	r2, r2, #1
   1540c:	adc	r3, r3, #0
   15410:	strd	r2, [r6, #8]
   15414:	bl	1528c <free_node@@Base>
   15418:	add	r0, r6, #24
   1541c:	b	1554c <free_node@@Base+0x2c0>
   15420:	ldr	r6, [pc, #580]	; 1566c <free_node@@Base+0x3e0>
   15424:	ldr	r0, [pc, #580]	; 15670 <free_node@@Base+0x3e4>
   15428:	ldr	r0, [pc, r0]
   1542c:	add	r6, pc, r6
   15430:	ldrd	r2, [r5, #40]	; 0x28
   15434:	adds	r0, r0, #1
   15438:	str	r0, [r6]
   1543c:	ldr	r0, [r6, #4]
   15440:	adc	r0, r0, #0
   15444:	adds	r2, r2, #1
   15448:	adc	r3, r3, #0
   1544c:	str	r0, [r6, #4]
   15450:	strd	r2, [r5, #40]	; 0x28
   15454:	ldr	r0, [r4, #4]
   15458:	cmp	r0, #0
   1545c:	beq	1557c <free_node@@Base+0x2f0>
   15460:	ldrd	r2, [r6, #8]
   15464:	adds	r2, r2, #1
   15468:	adc	r3, r3, #0
   1546c:	strd	r2, [r6, #8]
   15470:	bl	1528c <free_node@@Base>
   15474:	add	r0, r6, #24
   15478:	b	15580 <free_node@@Base+0x2f4>
   1547c:	ldr	r6, [pc, #496]	; 15674 <free_node@@Base+0x3e8>
   15480:	ldr	r0, [pc, #496]	; 15678 <free_node@@Base+0x3ec>
   15484:	ldr	r0, [pc, r0]
   15488:	add	r6, pc, r6
   1548c:	ldrd	r2, [r5, #56]	; 0x38
   15490:	adds	r0, r0, #1
   15494:	str	r0, [r6]
   15498:	ldr	r0, [r6, #4]
   1549c:	adc	r0, r0, #0
   154a0:	adds	r2, r2, #1
   154a4:	adc	r3, r3, #0
   154a8:	str	r0, [r6, #4]
   154ac:	strd	r2, [r5, #56]	; 0x38
   154b0:	ldr	r0, [r4, #4]
   154b4:	cmp	r0, #0
   154b8:	beq	155b0 <free_node@@Base+0x324>
   154bc:	ldrd	r2, [r6, #8]
   154c0:	adds	r2, r2, #1
   154c4:	adc	r3, r3, #0
   154c8:	strd	r2, [r6, #8]
   154cc:	bl	1528c <free_node@@Base>
   154d0:	add	r0, r6, #24
   154d4:	b	155b4 <free_node@@Base+0x328>
   154d8:	add	r0, r6, #16
   154dc:	ldrd	r2, [r0]
   154e0:	adds	r2, r2, #1
   154e4:	adc	r3, r3, #0
   154e8:	strd	r2, [r0]
   154ec:	ldrd	r0, [r6, #32]
   154f0:	adds	r0, r0, #1
   154f4:	adc	r1, r1, #0
   154f8:	strd	r0, [r6, #32]
   154fc:	mov	r0, r4
   15500:	bl	11f18 <free@plt>
   15504:	add	r0, r5, #64	; 0x40
   15508:	b	155f0 <free_node@@Base+0x364>
   1550c:	add	r0, r6, #16
   15510:	ldrd	r2, [r0]
   15514:	adds	r2, r2, #1
   15518:	adc	r3, r3, #0
   1551c:	strd	r2, [r0]
   15520:	ldrd	r0, [r6, #32]
   15524:	adds	r0, r0, #1
   15528:	adc	r1, r1, #0
   1552c:	strd	r0, [r6, #32]
   15530:	ldr	r0, [r4, #8]
   15534:	bl	11f18 <free@plt>
   15538:	mov	r0, r4
   1553c:	bl	11f18 <free@plt>
   15540:	add	r0, r5, #80	; 0x50
   15544:	b	155f0 <free_node@@Base+0x364>
   15548:	add	r0, r6, #16
   1554c:	ldrd	r2, [r0]
   15550:	adds	r2, r2, #1
   15554:	adc	r3, r3, #0
   15558:	strd	r2, [r0]
   1555c:	ldrd	r0, [r6, #32]
   15560:	adds	r0, r0, #1
   15564:	adc	r1, r1, #0
   15568:	strd	r0, [r6, #32]
   1556c:	mov	r0, r4
   15570:	bl	11f18 <free@plt>
   15574:	add	r0, r5, #72	; 0x48
   15578:	b	155f0 <free_node@@Base+0x364>
   1557c:	add	r0, r6, #16
   15580:	ldrd	r2, [r0]
   15584:	adds	r2, r2, #1
   15588:	adc	r3, r3, #0
   1558c:	strd	r2, [r0]
   15590:	ldrd	r0, [r6, #32]
   15594:	adds	r0, r0, #1
   15598:	adc	r1, r1, #0
   1559c:	strd	r0, [r6, #32]
   155a0:	mov	r0, r4
   155a4:	bl	11f18 <free@plt>
   155a8:	add	r0, r5, #88	; 0x58
   155ac:	b	155f0 <free_node@@Base+0x364>
   155b0:	add	r0, r6, #16
   155b4:	ldrd	r2, [r0]
   155b8:	adds	r2, r2, #1
   155bc:	adc	r3, r3, #0
   155c0:	strd	r2, [r0]
   155c4:	ldrd	r0, [r6, #32]
   155c8:	adds	r0, r0, #1
   155cc:	adc	r1, r1, #0
   155d0:	strd	r0, [r6, #32]
   155d4:	ldr	r0, [r4, #8]
   155d8:	bl	1528c <free_node@@Base>
   155dc:	ldr	r0, [r4, #12]
   155e0:	bl	1528c <free_node@@Base>
   155e4:	mov	r0, r4
   155e8:	bl	11f18 <free@plt>
   155ec:	add	r0, r5, #104	; 0x68
   155f0:	ldrd	r2, [r0]
   155f4:	adds	r2, r2, #1
   155f8:	adc	r3, r3, #0
   155fc:	strd	r2, [r0]
   15600:	ldrd	r0, [r5, #112]	; 0x70
   15604:	adds	r0, r0, #1
   15608:	adc	r1, r1, #0
   1560c:	strd	r0, [r5, #112]	; 0x70
   15610:	pop	{r4, r5, r6, sl, fp, pc}
   15614:	ldrd	r0, [r5, #8]
   15618:	mov	r2, #1
   1561c:	adds	r0, r0, #1
   15620:	adc	r1, r1, #0
   15624:	strd	r0, [r5, #8]
   15628:	mov	r1, #31
   1562c:	ldr	r0, [pc, #72]	; 1567c <free_node@@Base+0x3f0>
   15630:	ldr	r0, [pc, r0]
   15634:	ldr	r3, [r0]
   15638:	ldr	r0, [pc, #64]	; 15680 <free_node@@Base+0x3f4>
   1563c:	add	r0, pc, r0
   15640:	bl	11f6c <fwrite@plt>
   15644:	mov	r0, #1
   15648:	bl	11fcc <exit@plt>
   1564c:	andeq	r8, r1, r4, lsl #12
   15650:	andeq	r8, r1, r8, lsl #12
   15654:	andeq	r8, r1, r0, lsr r6
   15658:	andeq	r8, r1, r4, lsr r6
   1565c:	andeq	r8, r1, r8, lsl #11
   15660:	andeq	r8, r1, ip, lsl #11
   15664:	andeq	r8, r1, r4, lsl r6
   15668:	andeq	r8, r1, r8, lsl r6
   1566c:	andeq	r8, r1, ip, lsl #11
   15670:	muleq	r1, r0, r5
   15674:	muleq	r1, r0, r5
   15678:	muleq	r1, r4, r5
   1567c:	andeq	r7, r1, ip, lsl #21
   15680:	andeq	r5, r0, r9, lsr sp

00015684 <free_node_id@@Base>:
   15684:	push	{r4, r5, fp, lr}
   15688:	add	fp, sp, #8
   1568c:	ldr	r5, [pc, #120]	; 1570c <free_node_id@@Base+0x88>
   15690:	mov	r4, r0
   15694:	ldr	r0, [pc, #116]	; 15710 <free_node_id@@Base+0x8c>
   15698:	ldr	r0, [pc, r0]
   1569c:	add	r5, pc, r5
   156a0:	adds	r0, r0, #1
   156a4:	str	r0, [r5]
   156a8:	ldr	r0, [r5, #4]
   156ac:	adc	r0, r0, #0
   156b0:	str	r0, [r5, #4]
   156b4:	ldr	r0, [r4, #4]
   156b8:	cmp	r0, #0
   156bc:	beq	156dc <free_node_id@@Base+0x58>
   156c0:	ldrd	r2, [r5, #8]
   156c4:	adds	r2, r2, #1
   156c8:	adc	r3, r3, #0
   156cc:	strd	r2, [r5, #8]
   156d0:	bl	1528c <free_node@@Base>
   156d4:	add	r0, r5, #24
   156d8:	b	156e0 <free_node_id@@Base+0x5c>
   156dc:	add	r0, r5, #16
   156e0:	ldrd	r2, [r0]
   156e4:	adds	r2, r2, #1
   156e8:	adc	r3, r3, #0
   156ec:	strd	r2, [r0]
   156f0:	ldrd	r0, [r5, #32]
   156f4:	adds	r0, r0, #1
   156f8:	adc	r1, r1, #0
   156fc:	strd	r0, [r5, #32]
   15700:	mov	r0, r4
   15704:	pop	{r4, r5, fp, lr}
   15708:	b	11f18 <free@plt>
   1570c:	andeq	r8, r1, ip, lsl #5
   15710:	muleq	r1, r0, r2

00015714 <free_node_int@@Base>:
   15714:	push	{r4, r5, fp, lr}
   15718:	add	fp, sp, #8
   1571c:	ldr	r5, [pc, #120]	; 1579c <free_node_int@@Base+0x88>
   15720:	mov	r4, r0
   15724:	ldr	r0, [pc, #116]	; 157a0 <free_node_int@@Base+0x8c>
   15728:	ldr	r0, [pc, r0]
   1572c:	add	r5, pc, r5
   15730:	adds	r0, r0, #1
   15734:	str	r0, [r5]
   15738:	ldr	r0, [r5, #4]
   1573c:	adc	r0, r0, #0
   15740:	str	r0, [r5, #4]
   15744:	ldr	r0, [r4, #4]
   15748:	cmp	r0, #0
   1574c:	beq	1576c <free_node_int@@Base+0x58>
   15750:	ldrd	r2, [r5, #8]
   15754:	adds	r2, r2, #1
   15758:	adc	r3, r3, #0
   1575c:	strd	r2, [r5, #8]
   15760:	bl	1528c <free_node@@Base>
   15764:	add	r0, r5, #24
   15768:	b	15770 <free_node_int@@Base+0x5c>
   1576c:	add	r0, r5, #16
   15770:	ldrd	r2, [r0]
   15774:	adds	r2, r2, #1
   15778:	adc	r3, r3, #0
   1577c:	strd	r2, [r0]
   15780:	ldrd	r0, [r5, #32]
   15784:	adds	r0, r0, #1
   15788:	adc	r1, r1, #0
   1578c:	strd	r0, [r5, #32]
   15790:	mov	r0, r4
   15794:	pop	{r4, r5, fp, lr}
   15798:	b	11f18 <free@plt>
   1579c:	andeq	r8, r1, ip, lsr #4
   157a0:	andeq	r8, r1, r0, lsr r2

000157a4 <free_node_function@@Base>:
   157a4:	push	{r4, r5, fp, lr}
   157a8:	add	fp, sp, #8
   157ac:	ldr	r5, [pc, #128]	; 15834 <free_node_function@@Base+0x90>
   157b0:	mov	r4, r0
   157b4:	ldr	r0, [pc, #124]	; 15838 <free_node_function@@Base+0x94>
   157b8:	ldr	r0, [pc, r0]
   157bc:	add	r5, pc, r5
   157c0:	adds	r0, r0, #1
   157c4:	str	r0, [r5]
   157c8:	ldr	r0, [r5, #4]
   157cc:	adc	r0, r0, #0
   157d0:	str	r0, [r5, #4]
   157d4:	ldr	r0, [r4, #4]
   157d8:	cmp	r0, #0
   157dc:	beq	157fc <free_node_function@@Base+0x58>
   157e0:	ldrd	r2, [r5, #8]
   157e4:	adds	r2, r2, #1
   157e8:	adc	r3, r3, #0
   157ec:	strd	r2, [r5, #8]
   157f0:	bl	1528c <free_node@@Base>
   157f4:	add	r0, r5, #24
   157f8:	b	15800 <free_node_function@@Base+0x5c>
   157fc:	add	r0, r5, #16
   15800:	ldrd	r2, [r0]
   15804:	adds	r2, r2, #1
   15808:	adc	r3, r3, #0
   1580c:	strd	r2, [r0]
   15810:	ldrd	r0, [r5, #32]
   15814:	adds	r0, r0, #1
   15818:	adc	r1, r1, #0
   1581c:	strd	r0, [r5, #32]
   15820:	ldr	r0, [r4, #8]
   15824:	bl	11f18 <free@plt>
   15828:	mov	r0, r4
   1582c:	pop	{r4, r5, fp, lr}
   15830:	b	11f18 <free@plt>
   15834:	andeq	r8, r1, ip, asr #3
   15838:	ldrdeq	r8, [r1], -r0

0001583c <free_node_return@@Base>:
   1583c:	push	{r4, r5, fp, lr}
   15840:	add	fp, sp, #8
   15844:	ldr	r5, [pc, #120]	; 158c4 <free_node_return@@Base+0x88>
   15848:	mov	r4, r0
   1584c:	ldr	r0, [pc, #116]	; 158c8 <free_node_return@@Base+0x8c>
   15850:	ldr	r0, [pc, r0]
   15854:	add	r5, pc, r5
   15858:	adds	r0, r0, #1
   1585c:	str	r0, [r5]
   15860:	ldr	r0, [r5, #4]
   15864:	adc	r0, r0, #0
   15868:	str	r0, [r5, #4]
   1586c:	ldr	r0, [r4, #4]
   15870:	cmp	r0, #0
   15874:	beq	15894 <free_node_return@@Base+0x58>
   15878:	ldrd	r2, [r5, #8]
   1587c:	adds	r2, r2, #1
   15880:	adc	r3, r3, #0
   15884:	strd	r2, [r5, #8]
   15888:	bl	1528c <free_node@@Base>
   1588c:	add	r0, r5, #24
   15890:	b	15898 <free_node_return@@Base+0x5c>
   15894:	add	r0, r5, #16
   15898:	ldrd	r2, [r0]
   1589c:	adds	r2, r2, #1
   158a0:	adc	r3, r3, #0
   158a4:	strd	r2, [r0]
   158a8:	ldrd	r0, [r5, #32]
   158ac:	adds	r0, r0, #1
   158b0:	adc	r1, r1, #0
   158b4:	strd	r0, [r5, #32]
   158b8:	mov	r0, r4
   158bc:	pop	{r4, r5, fp, lr}
   158c0:	b	11f18 <free@plt>
   158c4:	andeq	r8, r1, r4, ror #2
   158c8:	andeq	r8, r1, r8, ror #2

000158cc <free_node_if@@Base>:
   158cc:	push	{r4, r5, fp, lr}
   158d0:	add	fp, sp, #8
   158d4:	ldr	r5, [pc, #144]	; 1596c <free_node_if@@Base+0xa0>
   158d8:	mov	r4, r0
   158dc:	ldr	r0, [pc, #140]	; 15970 <free_node_if@@Base+0xa4>
   158e0:	ldr	r0, [pc, r0]
   158e4:	add	r5, pc, r5
   158e8:	adds	r0, r0, #1
   158ec:	str	r0, [r5]
   158f0:	ldr	r0, [r5, #4]
   158f4:	adc	r0, r0, #0
   158f8:	str	r0, [r5, #4]
   158fc:	ldr	r0, [r4, #4]
   15900:	cmp	r0, #0
   15904:	beq	15924 <free_node_if@@Base+0x58>
   15908:	ldrd	r2, [r5, #8]
   1590c:	adds	r2, r2, #1
   15910:	adc	r3, r3, #0
   15914:	strd	r2, [r5, #8]
   15918:	bl	1528c <free_node@@Base>
   1591c:	add	r0, r5, #24
   15920:	b	15928 <free_node_if@@Base+0x5c>
   15924:	add	r0, r5, #16
   15928:	ldrd	r2, [r0]
   1592c:	adds	r2, r2, #1
   15930:	adc	r3, r3, #0
   15934:	strd	r2, [r0]
   15938:	ldrd	r0, [r5, #32]
   1593c:	adds	r0, r0, #1
   15940:	adc	r1, r1, #0
   15944:	strd	r0, [r5, #32]
   15948:	ldr	r0, [r4, #8]
   1594c:	bl	1528c <free_node@@Base>
   15950:	ldr	r0, [r4, #12]
   15954:	bl	1528c <free_node@@Base>
   15958:	ldr	r0, [r4, #16]
   1595c:	bl	1528c <free_node@@Base>
   15960:	mov	r0, r4
   15964:	pop	{r4, r5, fp, lr}
   15968:	b	11f18 <free@plt>
   1596c:	andeq	r8, r1, r4, lsl #2
   15970:	andeq	r8, r1, r8, lsl #2

00015974 <free_node_boolean_operator@@Base>:
   15974:	push	{r4, r5, fp, lr}
   15978:	add	fp, sp, #8
   1597c:	ldr	r5, [pc, #136]	; 15a0c <free_node_boolean_operator@@Base+0x98>
   15980:	mov	r4, r0
   15984:	ldr	r0, [pc, #132]	; 15a10 <free_node_boolean_operator@@Base+0x9c>
   15988:	ldr	r0, [pc, r0]
   1598c:	add	r5, pc, r5
   15990:	adds	r0, r0, #1
   15994:	str	r0, [r5]
   15998:	ldr	r0, [r5, #4]
   1599c:	adc	r0, r0, #0
   159a0:	str	r0, [r5, #4]
   159a4:	ldr	r0, [r4, #4]
   159a8:	cmp	r0, #0
   159ac:	beq	159cc <free_node_boolean_operator@@Base+0x58>
   159b0:	ldrd	r2, [r5, #8]
   159b4:	adds	r2, r2, #1
   159b8:	adc	r3, r3, #0
   159bc:	strd	r2, [r5, #8]
   159c0:	bl	1528c <free_node@@Base>
   159c4:	add	r0, r5, #24
   159c8:	b	159d0 <free_node_boolean_operator@@Base+0x5c>
   159cc:	add	r0, r5, #16
   159d0:	ldrd	r2, [r0]
   159d4:	adds	r2, r2, #1
   159d8:	adc	r3, r3, #0
   159dc:	strd	r2, [r0]
   159e0:	ldrd	r0, [r5, #32]
   159e4:	adds	r0, r0, #1
   159e8:	adc	r1, r1, #0
   159ec:	strd	r0, [r5, #32]
   159f0:	ldr	r0, [r4, #8]
   159f4:	bl	1528c <free_node@@Base>
   159f8:	ldr	r0, [r4, #12]
   159fc:	bl	1528c <free_node@@Base>
   15a00:	mov	r0, r4
   15a04:	pop	{r4, r5, fp, lr}
   15a08:	b	11f18 <free@plt>
   15a0c:	andeq	r8, r1, ip, lsl #1
   15a10:	muleq	r1, r0, r0

00015a14 <get_boolean_op_value@@Base>:
   15a14:	push	{r4, r5, r6, sl, fp, lr}
   15a18:	add	fp, sp, #16
   15a1c:	ldr	r6, [pc, #720]	; 15cf4 <get_boolean_op_value@@Base+0x2e0>
   15a20:	ldr	r1, [pc, #720]	; 15cf8 <get_boolean_op_value@@Base+0x2e4>
   15a24:	ldr	r1, [pc, r1]
   15a28:	add	r6, pc, r6
   15a2c:	adds	r1, r1, #1
   15a30:	str	r1, [r6]
   15a34:	ldr	r1, [r6, #4]
   15a38:	adc	r1, r1, #0
   15a3c:	str	r1, [r6, #4]
   15a40:	mov	r1, #2
   15a44:	ldr	r4, [r0, #4]
   15a48:	mov	r0, r4
   15a4c:	bl	12068 <strnlen@plt>
   15a50:	cmp	r0, #2
   15a54:	bne	15b80 <get_boolean_op_value@@Base+0x16c>
   15a58:	ldrd	r0, [r6, #8]
   15a5c:	mov	r2, #2
   15a60:	adds	r0, r0, #1
   15a64:	adc	r1, r1, #0
   15a68:	strd	r0, [r6, #8]
   15a6c:	mov	r0, r4
   15a70:	ldr	r1, [pc, #644]	; 15cfc <get_boolean_op_value@@Base+0x2e8>
   15a74:	add	r1, pc, r1
   15a78:	bl	120c8 <strncmp@plt>
   15a7c:	cmp	r0, #0
   15a80:	beq	15bc8 <get_boolean_op_value@@Base+0x1b4>
   15a84:	ldrd	r0, [r6, #32]
   15a88:	mov	r2, #2
   15a8c:	adds	r0, r0, #1
   15a90:	adc	r1, r1, #0
   15a94:	strd	r0, [r6, #32]
   15a98:	mov	r0, r4
   15a9c:	ldr	r1, [pc, #604]	; 15d00 <get_boolean_op_value@@Base+0x2ec>
   15aa0:	add	r1, pc, r1
   15aa4:	bl	120c8 <strncmp@plt>
   15aa8:	cmp	r0, #0
   15aac:	beq	15c1c <get_boolean_op_value@@Base+0x208>
   15ab0:	ldrd	r0, [r6, #56]	; 0x38
   15ab4:	mov	r2, #2
   15ab8:	mov	r5, #2
   15abc:	adds	r0, r0, #1
   15ac0:	adc	r1, r1, #0
   15ac4:	strd	r0, [r6, #56]	; 0x38
   15ac8:	mov	r0, r4
   15acc:	ldr	r1, [pc, #560]	; 15d04 <get_boolean_op_value@@Base+0x2f0>
   15ad0:	add	r1, pc, r1
   15ad4:	bl	120c8 <strncmp@plt>
   15ad8:	cmp	r0, #0
   15adc:	beq	15c38 <get_boolean_op_value@@Base+0x224>
   15ae0:	ldrd	r0, [r6, #80]	; 0x50
   15ae4:	mov	r2, #2
   15ae8:	adds	r0, r0, #1
   15aec:	adc	r1, r1, #0
   15af0:	strd	r0, [r6, #80]	; 0x50
   15af4:	mov	r0, r4
   15af8:	ldr	r1, [pc, #520]	; 15d08 <get_boolean_op_value@@Base+0x2f4>
   15afc:	add	r1, pc, r1
   15b00:	bl	120c8 <strncmp@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15c50 <get_boolean_op_value@@Base+0x23c>
   15b0c:	ldrd	r0, [r6, #104]	; 0x68
   15b10:	mov	r2, #2
   15b14:	adds	r0, r0, #1
   15b18:	adc	r1, r1, #0
   15b1c:	strd	r0, [r6, #104]	; 0x68
   15b20:	mov	r0, r4
   15b24:	ldr	r1, [pc, #480]	; 15d0c <get_boolean_op_value@@Base+0x2f8>
   15b28:	add	r1, pc, r1
   15b2c:	bl	120c8 <strncmp@plt>
   15b30:	cmp	r0, #0
   15b34:	beq	15c6c <get_boolean_op_value@@Base+0x258>
   15b38:	ldrd	r0, [r6, #128]	; 0x80
   15b3c:	mov	r2, #2
   15b40:	adds	r0, r0, #1
   15b44:	adc	r1, r1, #0
   15b48:	strd	r0, [r6, #128]	; 0x80
   15b4c:	mov	r0, r4
   15b50:	ldr	r1, [pc, #440]	; 15d10 <get_boolean_op_value@@Base+0x2fc>
   15b54:	add	r1, pc, r1
   15b58:	bl	120c8 <strncmp@plt>
   15b5c:	cmp	r0, #0
   15b60:	bne	15ce0 <get_boolean_op_value@@Base+0x2cc>
   15b64:	ldrd	r0, [r6, #144]	; 0x90
   15b68:	mov	r5, #5
   15b6c:	adds	r0, r0, #1
   15b70:	adc	r1, r1, #0
   15b74:	strd	r0, [r6, #144]	; 0x90
   15b78:	add	r0, r6, #160	; 0xa0
   15b7c:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15b80:	ldrd	r0, [r6, #16]
   15b84:	adds	r0, r0, #1
   15b88:	adc	r1, r1, #0
   15b8c:	strd	r0, [r6, #16]
   15b90:	ldrb	r0, [r4]
   15b94:	cmp	r0, #62	; 0x3e
   15b98:	beq	15c00 <get_boolean_op_value@@Base+0x1ec>
   15b9c:	cmp	r0, #60	; 0x3c
   15ba0:	beq	15be4 <get_boolean_op_value@@Base+0x1d0>
   15ba4:	cmp	r0, #33	; 0x21
   15ba8:	bne	15cac <get_boolean_op_value@@Base+0x298>
   15bac:	ldrd	r0, [r6, #176]	; 0xb0
   15bb0:	mov	r5, #8
   15bb4:	adds	r0, r0, #1
   15bb8:	adc	r1, r1, #0
   15bbc:	strd	r0, [r6, #176]	; 0xb0
   15bc0:	add	r0, r6, #200	; 0xc8
   15bc4:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15bc8:	ldrd	r0, [r6, #24]
   15bcc:	mov	r5, #0
   15bd0:	adds	r0, r0, #1
   15bd4:	adc	r1, r1, #0
   15bd8:	strd	r0, [r6, #24]
   15bdc:	add	r0, r6, #40	; 0x28
   15be0:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15be4:	ldrd	r0, [r6, #184]	; 0xb8
   15be8:	mov	r5, #6
   15bec:	adds	r0, r0, #1
   15bf0:	adc	r1, r1, #0
   15bf4:	strd	r0, [r6, #184]	; 0xb8
   15bf8:	add	r0, r6, #208	; 0xd0
   15bfc:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15c00:	ldrd	r0, [r6, #192]	; 0xc0
   15c04:	mov	r5, #7
   15c08:	adds	r0, r0, #1
   15c0c:	adc	r1, r1, #0
   15c10:	strd	r0, [r6, #192]	; 0xc0
   15c14:	add	r0, r6, #216	; 0xd8
   15c18:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15c1c:	ldrd	r0, [r6, #48]	; 0x30
   15c20:	mov	r5, #1
   15c24:	adds	r0, r0, #1
   15c28:	adc	r1, r1, #0
   15c2c:	strd	r0, [r6, #48]	; 0x30
   15c30:	add	r0, r6, #64	; 0x40
   15c34:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15c38:	ldrd	r0, [r6, #72]	; 0x48
   15c3c:	adds	r0, r0, #1
   15c40:	adc	r1, r1, #0
   15c44:	strd	r0, [r6, #72]	; 0x48
   15c48:	add	r0, r6, #88	; 0x58
   15c4c:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15c50:	ldrd	r0, [r6, #96]	; 0x60
   15c54:	mov	r5, #3
   15c58:	adds	r0, r0, #1
   15c5c:	adc	r1, r1, #0
   15c60:	strd	r0, [r6, #96]	; 0x60
   15c64:	add	r0, r6, #112	; 0x70
   15c68:	b	15c84 <get_boolean_op_value@@Base+0x270>
   15c6c:	ldrd	r0, [r6, #120]	; 0x78
   15c70:	mov	r5, #4
   15c74:	adds	r0, r0, #1
   15c78:	adc	r1, r1, #0
   15c7c:	strd	r0, [r6, #120]	; 0x78
   15c80:	add	r0, r6, #136	; 0x88
   15c84:	ldrd	r2, [r0]
   15c88:	adds	r2, r2, #1
   15c8c:	adc	r3, r3, #0
   15c90:	strd	r2, [r0]
   15c94:	ldrd	r0, [r6, #224]	; 0xe0
   15c98:	adds	r0, r0, #1
   15c9c:	adc	r1, r1, #0
   15ca0:	strd	r0, [r6, #224]	; 0xe0
   15ca4:	mov	r0, r5
   15ca8:	pop	{r4, r5, r6, sl, fp, pc}
   15cac:	ldrd	r0, [r6, #168]	; 0xa8
   15cb0:	adds	r0, r0, #1
   15cb4:	adc	r1, r1, #0
   15cb8:	strd	r0, [r6, #168]	; 0xa8
   15cbc:	ldr	r0, [pc, #80]	; 15d14 <get_boolean_op_value@@Base+0x300>
   15cc0:	mov	r2, r4
   15cc4:	ldr	r0, [pc, r0]
   15cc8:	ldr	r0, [r0]
   15ccc:	ldr	r1, [pc, #68]	; 15d18 <get_boolean_op_value@@Base+0x304>
   15cd0:	add	r1, pc, r1
   15cd4:	bl	11ffc <fprintf@plt>
   15cd8:	mov	r0, #1
   15cdc:	bl	11fcc <exit@plt>
   15ce0:	ldrd	r0, [r6, #152]	; 0x98
   15ce4:	adds	r0, r0, #1
   15ce8:	adc	r1, r1, #0
   15cec:	strd	r0, [r6, #152]	; 0x98
   15cf0:	b	15cbc <get_boolean_op_value@@Base+0x2a8>
   15cf4:	andeq	r8, r1, r0, lsr #32
   15cf8:	andeq	r8, r1, r4, lsr #32
   15cfc:	andeq	r5, r0, r1, lsr #18
   15d00:	strdeq	r5, [r0], -r8
   15d04:	andeq	r5, r0, fp, asr #17
   15d08:	andeq	r5, r0, r2, lsr #17
   15d0c:	andeq	r5, r0, r9, ror r8
   15d10:	andeq	r5, r0, r0, asr r8
   15d14:	strdeq	r7, [r1], -r8
   15d18:	ldrdeq	r5, [r0], -r7
   15d1c:	push	{r4, r5, r6, lr}
   15d20:	sub	sp, sp, #8
   15d24:	ldr	r0, [pc, #112]	; 15d9c <get_boolean_op_value@@Base+0x388>
   15d28:	ldr	r1, [pc, #112]	; 15da0 <get_boolean_op_value@@Base+0x38c>
   15d2c:	movw	r2, #31856	; 0x7c70
   15d30:	movt	r2, #15338	; 0x3bea
   15d34:	add	r0, pc, r0
   15d38:	add	r1, pc, r1
   15d3c:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   15d40:	ldr	r0, [pc, #92]	; 15da4 <get_boolean_op_value@@Base+0x390>
   15d44:	ldr	r6, [pc, #92]	; 15da8 <get_boolean_op_value@@Base+0x394>
   15d48:	mov	r5, #0
   15d4c:	add	r0, pc, r0
   15d50:	add	r6, pc, r6
   15d54:	add	r4, r0, #4
   15d58:	mov	r3, r6
   15d5c:	ldr	r0, [r3, r5]!
   15d60:	ldr	r1, [r3, #16]
   15d64:	str	r1, [sp]
   15d68:	ldmib	r3, {r1, r2}
   15d6c:	ldrb	r3, [r3, #12]
   15d70:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   15d74:	ldrd	r0, [r4, #-4]
   15d78:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   15d7c:	add	r5, r5, #20
   15d80:	add	r4, r4, #8
   15d84:	cmp	r5, #320	; 0x140
   15d88:	bne	15d58 <get_boolean_op_value@@Base+0x344>
   15d8c:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   15d90:	add	sp, sp, #8
   15d94:	pop	{r4, r5, r6, lr}
   15d98:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   15d9c:	andeq	r5, r0, r9, lsr #13
   15da0:	ldrdeq	r5, [r0], -r8
   15da4:	andeq	r6, r1, ip, ror lr
   15da8:	andeq	r6, r1, r8, lsr sp
   15dac:	push	{fp, lr}
   15db0:	bl	15d1c <get_boolean_op_value@@Base+0x308>
   15db4:	ldr	ip, [pc, #376]	; 15f34 <get_boolean_op_value@@Base+0x520>
   15db8:	vmov.i32	q8, #0	; 0x00000000
   15dbc:	mov	r0, #36	; 0x24
   15dc0:	mov	r1, #0
   15dc4:	add	ip, pc, ip
   15dc8:	mov	r3, ip
   15dcc:	vst1.64	{d16-d17}, [r3 :128], r0
   15dd0:	str	r1, [r3]
   15dd4:	ldr	r3, [pc, #348]	; 15f38 <get_boolean_op_value@@Base+0x524>
   15dd8:	add	r3, pc, r3
   15ddc:	vst1.64	{d16-d17}, [r3 :128]
   15de0:	ldr	r3, [pc, #340]	; 15f3c <get_boolean_op_value@@Base+0x528>
   15de4:	add	r3, pc, r3
   15de8:	vst1.64	{d16-d17}, [r3 :128]
   15dec:	ldr	r3, [pc, #332]	; 15f40 <get_boolean_op_value@@Base+0x52c>
   15df0:	add	r3, pc, r3
   15df4:	vst1.64	{d16-d17}, [r3 :128]
   15df8:	ldr	r3, [pc, #324]	; 15f44 <get_boolean_op_value@@Base+0x530>
   15dfc:	add	r3, pc, r3
   15e00:	vst1.64	{d16-d17}, [r3 :128]
   15e04:	ldr	r3, [pc, #316]	; 15f48 <get_boolean_op_value@@Base+0x534>
   15e08:	add	r3, pc, r3
   15e0c:	vst1.64	{d16-d17}, [r3 :128]
   15e10:	ldr	r3, [pc, #308]	; 15f4c <get_boolean_op_value@@Base+0x538>
   15e14:	add	r3, pc, r3
   15e18:	vst1.64	{d16-d17}, [r3 :128]
   15e1c:	ldr	r3, [pc, #300]	; 15f50 <get_boolean_op_value@@Base+0x53c>
   15e20:	add	r3, pc, r3
   15e24:	vst1.64	{d16-d17}, [r3 :128]
   15e28:	ldr	r3, [pc, #292]	; 15f54 <get_boolean_op_value@@Base+0x540>
   15e2c:	add	r3, pc, r3
   15e30:	vst1.64	{d16-d17}, [r3 :128]
   15e34:	ldr	r3, [pc, #284]	; 15f58 <get_boolean_op_value@@Base+0x544>
   15e38:	str	r1, [ip, #32]
   15e3c:	add	r3, pc, r3
   15e40:	add	r2, r3, #16
   15e44:	str	r1, [r3, #112]	; 0x70
   15e48:	vst1.64	{d16-d17}, [r2 :128]
   15e4c:	add	r2, r3, #32
   15e50:	vst1.64	{d16-d17}, [r2 :128]
   15e54:	add	r2, r3, #48	; 0x30
   15e58:	vst1.64	{d16-d17}, [r2 :128]
   15e5c:	add	r2, r3, #64	; 0x40
   15e60:	vst1.64	{d16-d17}, [r2 :128]
   15e64:	add	r2, r3, #80	; 0x50
   15e68:	vst1.64	{d16-d17}, [r2 :128]
   15e6c:	add	r2, r3, #96	; 0x60
   15e70:	vst1.64	{d16-d17}, [r2 :128]
   15e74:	add	r2, ip, #16
   15e78:	vst1.64	{d16-d17}, [r2 :128]
   15e7c:	mov	r2, #116	; 0x74
   15e80:	vst1.64	{d16-d17}, [r3 :128], r2
   15e84:	str	r1, [r3]
   15e88:	ldr	r2, [pc, #204]	; 15f5c <get_boolean_op_value@@Base+0x548>
   15e8c:	add	r2, pc, r2
   15e90:	add	r3, r2, #16
   15e94:	str	r1, [r2, #32]
   15e98:	vst1.64	{d16-d17}, [r2 :128], r0
   15e9c:	vst1.64	{d16-d17}, [r3 :128]
   15ea0:	str	r1, [r2]
   15ea4:	ldr	r2, [pc, #180]	; 15f60 <get_boolean_op_value@@Base+0x54c>
   15ea8:	add	r2, pc, r2
   15eac:	mov	r3, r2
   15eb0:	str	r1, [r2, #32]
   15eb4:	vst1.64	{d16-d17}, [r3 :128], r0
   15eb8:	str	r1, [r3]
   15ebc:	add	r3, r2, #16
   15ec0:	vst1.64	{d16-d17}, [r3 :128]
   15ec4:	ldr	r2, [pc, #152]	; 15f64 <get_boolean_op_value@@Base+0x550>
   15ec8:	add	r2, pc, r2
   15ecc:	add	r3, r2, #16
   15ed0:	str	r1, [r2, #32]
   15ed4:	vst1.64	{d16-d17}, [r2 :128], r0
   15ed8:	vst1.64	{d16-d17}, [r3 :128]
   15edc:	str	r1, [r2]
   15ee0:	ldr	r2, [pc, #128]	; 15f68 <get_boolean_op_value@@Base+0x554>
   15ee4:	add	r2, pc, r2
   15ee8:	mov	r3, r2
   15eec:	str	r1, [r2, #32]
   15ef0:	add	r2, r2, #16
   15ef4:	vst1.64	{d16-d17}, [r3 :128], r0
   15ef8:	vst1.64	{d16-d17}, [r2 :128]
   15efc:	str	r1, [r3]
   15f00:	ldr	r2, [pc, #100]	; 15f6c <get_boolean_op_value@@Base+0x558>
   15f04:	add	r2, pc, r2
   15f08:	add	r3, r2, #16
   15f0c:	str	r1, [r2, #32]
   15f10:	vst1.64	{d16-d17}, [r2 :128], r0
   15f14:	str	r1, [r2]
   15f18:	vst1.64	{d16-d17}, [r3 :128]
   15f1c:	mov	r1, #0
   15f20:	mov	r2, #232	; 0xe8
   15f24:	ldr	r0, [pc, #68]	; 15f70 <get_boolean_op_value@@Base+0x55c>
   15f28:	add	r0, pc, r0
   15f2c:	bl	1202c <memset@plt>
   15f30:	pop	{fp, pc}
   15f34:	andeq	r7, r1, r4, ror #22
   15f38:	andeq	r7, r1, r0, ror #20
   15f3c:	andeq	r7, r1, r4, asr #20
   15f40:	andeq	r7, r1, r8, asr sl
   15f44:	andeq	r7, r1, ip, asr sl
   15f48:	andeq	r7, r1, r0, ror #20
   15f4c:	andeq	r7, r1, r4, ror #20
   15f50:	andeq	r7, r1, r8, ror #20
   15f54:	andeq	r7, r1, ip, ror #20
   15f58:	andeq	r7, r1, ip, ror #20
   15f5c:	andeq	r7, r1, ip, asr #21
   15f60:	andeq	r7, r1, r0, ror #21
   15f64:	strdeq	r7, [r1], -r0
   15f68:	andeq	r7, r1, r4, lsl #22
   15f6c:	andeq	r7, r1, r4, lsl fp
   15f70:	andeq	r7, r1, r0, lsr #22
   15f74:	ldr	r0, [pc, #12]	; 15f88 <get_boolean_op_value@@Base+0x574>
   15f78:	ldr	r1, [pc, #12]	; 15f8c <get_boolean_op_value@@Base+0x578>
   15f7c:	add	r0, pc, r0
   15f80:	add	r1, pc, r1
   15f84:	b	1a83c <__gcov_flush@@Base+0xb8>
   15f88:			; <UNDEFINED> instruction: 0xfffffd98
   15f8c:			; <UNDEFINED> instruction: 0xfffffe24

00015f90 <init_grammar@@Base>:
   15f90:	ldr	r2, [pc, #56]	; 15fd0 <init_grammar@@Base+0x40>
   15f94:	add	r3, pc, #36	; 0x24
   15f98:	vld1.64	{d16-d17}, [r3 :128]
   15f9c:	add	r2, pc, r2
   15fa0:	vld1.64	{d18-d19}, [r2 :128]
   15fa4:	vadd.i64	q8, q9, q8
   15fa8:	vst1.64	{d16-d17}, [r2 :128]
   15fac:	str	r1, [r0]
   15fb0:	bx	lr
   15fb4:	nop	{0}
   15fb8:	nop	{0}
   15fbc:	nop	{0}
   15fc0:	andeq	r0, r0, r1
   15fc4:	andeq	r0, r0, r0
   15fc8:	andeq	r0, r0, r1
   15fcc:	andeq	r0, r0, r0
   15fd0:	muleq	r1, ip, fp
   15fd4:	nop	{0}
   15fd8:	nop	{0}
   15fdc:	nop	{0}

00015fe0 <destroy_grammar@@Base>:
   15fe0:	ldr	r0, [pc, #40]	; 16010 <destroy_grammar@@Base+0x30>
   15fe4:	add	r1, pc, #20
   15fe8:	vld1.64	{d16-d17}, [r1 :128]
   15fec:	add	r0, pc, r0
   15ff0:	vld1.64	{d18-d19}, [r0 :128]
   15ff4:	vadd.i64	q8, q9, q8
   15ff8:	vst1.64	{d16-d17}, [r0 :128]
   15ffc:	bx	lr
   16000:	andeq	r0, r0, r1
   16004:	andeq	r0, r0, r0
   16008:	andeq	r0, r0, r1
   1600c:	andeq	r0, r0, r0
   16010:	andeq	r7, r1, ip, asr fp
   16014:	nop	{0}
   16018:	nop	{0}
   1601c:	nop	{0}

00016020 <build_ast@@Base>:
   16020:	ldr	r1, [pc, #40]	; 16050 <build_ast@@Base+0x30>
   16024:	add	r2, pc, #20
   16028:	vld1.64	{d16-d17}, [r2 :128]
   1602c:	add	r1, pc, r1
   16030:	vld1.64	{d18-d19}, [r1 :128]
   16034:	vadd.i64	q8, q9, q8
   16038:	vst1.64	{d16-d17}, [r1 :128]
   1603c:	b	16054 <read_function_ast_node@@Base>
   16040:	andeq	r0, r0, r1
   16044:	andeq	r0, r0, r0
   16048:	andeq	r0, r0, r1
   1604c:	andeq	r0, r0, r0
   16050:	andeq	r7, r1, ip, lsr #22

00016054 <read_function_ast_node@@Base>:
   16054:	push	{r4, r5, r6, r7, fp, lr}
   16058:	add	fp, sp, #16
   1605c:	ldr	r7, [pc, #392]	; 161ec <read_function_ast_node@@Base+0x198>
   16060:	mov	r4, r0
   16064:	ldr	r0, [pc, #388]	; 161f0 <read_function_ast_node@@Base+0x19c>
   16068:	ldr	r0, [pc, r0]
   1606c:	add	r7, pc, r7
   16070:	adds	r0, r0, #1
   16074:	str	r0, [r7]
   16078:	ldr	r0, [r7, #4]
   1607c:	adc	r0, r0, #0
   16080:	str	r0, [r7, #4]
   16084:	ldr	r0, [r4]
   16088:	bl	13600 <next@@Base>
   1608c:	ldr	r1, [r0]
   16090:	cmp	r1, #0
   16094:	beq	160b4 <read_function_ast_node@@Base+0x60>
   16098:	ldrd	r0, [r7, #8]
   1609c:	mov	r4, #0
   160a0:	adds	r0, r0, #1
   160a4:	adc	r1, r1, #0
   160a8:	strd	r0, [r7, #8]
   160ac:	add	r0, r7, #24
   160b0:	b	161c4 <read_function_ast_node@@Base+0x170>
   160b4:	ldrd	r2, [r7, #16]
   160b8:	adds	r2, r2, #1
   160bc:	adc	r3, r3, #0
   160c0:	strd	r2, [r7, #16]
   160c4:	bl	12c30 <free_token_int_type@@Base>
   160c8:	ldr	r0, [r4]
   160cc:	bl	13600 <next@@Base>
   160d0:	mov	r5, r0
   160d4:	ldr	r0, [r0]
   160d8:	cmp	r0, #2
   160dc:	bne	16174 <read_function_ast_node@@Base+0x120>
   160e0:	ldrd	r0, [r7, #40]	; 0x28
   160e4:	adds	r0, r0, #1
   160e8:	adc	r1, r1, #0
   160ec:	strd	r0, [r7, #40]	; 0x28
   160f0:	ldr	r0, [r4]
   160f4:	bl	13600 <next@@Base>
   160f8:	ldr	r1, [r0]
   160fc:	cmp	r1, #3
   16100:	bne	16190 <read_function_ast_node@@Base+0x13c>
   16104:	ldrd	r2, [r7, #64]	; 0x40
   16108:	adds	r2, r2, #1
   1610c:	adc	r3, r3, #0
   16110:	strd	r2, [r7, #64]	; 0x40
   16114:	bl	12cf0 <free_token_opar@@Base>
   16118:	ldr	r0, [r4]
   1611c:	bl	13600 <next@@Base>
   16120:	ldr	r1, [r0]
   16124:	cmp	r1, #4
   16128:	bne	161ac <read_function_ast_node@@Base+0x158>
   1612c:	ldrd	r2, [r7, #88]	; 0x58
   16130:	adds	r2, r2, #1
   16134:	adc	r3, r3, #0
   16138:	strd	r2, [r7, #88]	; 0x58
   1613c:	bl	12d30 <free_token_cpar@@Base>
   16140:	mov	r0, r4
   16144:	bl	161f4 <read_body@@Base>
   16148:	mov	r6, r0
   1614c:	mov	r0, #16
   16150:	bl	11f90 <malloc@plt>
   16154:	ldr	r1, [r5, #4]
   16158:	mov	r2, r6
   1615c:	mov	r4, r0
   16160:	bl	15070 <init_node_function@@Base>
   16164:	mov	r0, r5
   16168:	bl	12cb0 <free_token_function@@Base>
   1616c:	add	r0, r7, #104	; 0x68
   16170:	b	161c4 <read_function_ast_node@@Base+0x170>
   16174:	ldrd	r0, [r7, #32]
   16178:	mov	r4, #0
   1617c:	adds	r0, r0, #1
   16180:	adc	r1, r1, #0
   16184:	strd	r0, [r7, #32]
   16188:	add	r0, r7, #48	; 0x30
   1618c:	b	161c4 <read_function_ast_node@@Base+0x170>
   16190:	ldrd	r0, [r7, #56]	; 0x38
   16194:	mov	r4, #0
   16198:	adds	r0, r0, #1
   1619c:	adc	r1, r1, #0
   161a0:	strd	r0, [r7, #56]	; 0x38
   161a4:	add	r0, r7, #72	; 0x48
   161a8:	b	161c4 <read_function_ast_node@@Base+0x170>
   161ac:	ldrd	r0, [r7, #80]	; 0x50
   161b0:	mov	r4, #0
   161b4:	adds	r0, r0, #1
   161b8:	adc	r1, r1, #0
   161bc:	strd	r0, [r7, #80]	; 0x50
   161c0:	add	r0, r7, #96	; 0x60
   161c4:	ldrd	r2, [r0]
   161c8:	adds	r2, r2, #1
   161cc:	adc	r3, r3, #0
   161d0:	strd	r2, [r0]
   161d4:	ldrd	r0, [r7, #112]	; 0x70
   161d8:	adds	r0, r0, #1
   161dc:	adc	r1, r1, #0
   161e0:	strd	r0, [r7, #112]	; 0x70
   161e4:	mov	r0, r4
   161e8:	pop	{r4, r5, r6, r7, fp, pc}
   161ec:	strdeq	r7, [r1], -ip
   161f0:	andeq	r7, r1, r0, lsl #22

000161f4 <read_body@@Base>:
   161f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f8:	add	fp, sp, #28
   161fc:	sub	sp, sp, #4
   16200:	ldr	r7, [pc, #572]	; 16444 <read_body@@Base+0x250>
   16204:	mov	r4, r0
   16208:	ldr	r0, [pc, #568]	; 16448 <read_body@@Base+0x254>
   1620c:	ldr	r0, [pc, r0]
   16210:	add	r7, pc, r7
   16214:	adds	r0, r0, #1
   16218:	str	r0, [r7]
   1621c:	ldr	r0, [r7, #4]
   16220:	adc	r0, r0, #0
   16224:	str	r0, [r7, #4]
   16228:	ldr	r0, [r4]
   1622c:	bl	13600 <next@@Base>
   16230:	ldr	r1, [r0]
   16234:	cmp	r1, #5
   16238:	bne	163b0 <read_body@@Base+0x1bc>
   1623c:	ldrd	r2, [r7, #16]
   16240:	adds	r2, r2, #1
   16244:	adc	r3, r3, #0
   16248:	strd	r2, [r7, #16]
   1624c:	bl	12d70 <free_token_obra@@Base>
   16250:	ldr	r0, [r4]
   16254:	bl	13600 <next@@Base>
   16258:	mov	r1, r0
   1625c:	ldr	r0, [r7, #32]
   16260:	ldr	r3, [r7, #36]	; 0x24
   16264:	mov	sl, #0
   16268:	adds	r0, r0, #1
   1626c:	adc	r3, r3, #0
   16270:	str	r0, [r7, #32]
   16274:	str	r3, [r7, #36]	; 0x24
   16278:	ldr	r0, [r1]
   1627c:	cmp	r0, #6
   16280:	beq	163cc <read_body@@Base+0x1d8>
   16284:	add	r2, r7, #128	; 0x80
   16288:	mov	r5, #0
   1628c:	add	r9, r7, #88	; 0x58
   16290:	mov	sl, #0
   16294:	str	r2, [sp]
   16298:	b	162f8 <read_body@@Base+0x104>
   1629c:	ldrd	r0, [r7, #112]	; 0x70
   162a0:	mov	sl, r6
   162a4:	adds	r0, r0, #1
   162a8:	adc	r1, r1, #0
   162ac:	strd	r0, [r7, #112]	; 0x70
   162b0:	ldr	r0, [sp]
   162b4:	ldrd	r2, [r0]
   162b8:	adds	r2, r2, #1
   162bc:	adc	r3, r3, #0
   162c0:	strd	r2, [r0]
   162c4:	ldr	r0, [r4]
   162c8:	bl	13600 <next@@Base>
   162cc:	mov	r1, r0
   162d0:	ldr	r0, [r7, #136]	; 0x88
   162d4:	ldr	r3, [r7, #140]	; 0x8c
   162d8:	mov	r5, r6
   162dc:	adds	r0, r0, #1
   162e0:	adc	r3, r3, #0
   162e4:	str	r0, [r7, #136]	; 0x88
   162e8:	str	r3, [r7, #140]	; 0x8c
   162ec:	ldr	r0, [r1]
   162f0:	cmp	r0, #6
   162f4:	beq	163cc <read_body@@Base+0x1d8>
   162f8:	ldrd	r2, [r7, #40]	; 0x28
   162fc:	adds	r2, r2, #1
   16300:	adc	r3, r3, #0
   16304:	cmp	r0, #10
   16308:	strd	r2, [r7, #40]	; 0x28
   1630c:	beq	1634c <read_body@@Base+0x158>
   16310:	cmp	r0, #7
   16314:	bne	163f4 <read_body@@Base+0x200>
   16318:	ldr	r0, [r7, #64]	; 0x40
   1631c:	ldr	r3, [r7, #68]	; 0x44
   16320:	adds	r0, r0, #1
   16324:	str	r0, [r7, #64]	; 0x40
   16328:	adc	r3, r3, #0
   1632c:	mov	r0, r1
   16330:	str	r3, [r7, #68]	; 0x44
   16334:	bl	12df0 <free_token_return@@Base>
   16338:	mov	r0, r4
   1633c:	add	r8, r7, #80	; 0x50
   16340:	bl	1644c <read_return_expression@@Base>
   16344:	mov	r6, r0
   16348:	b	1637c <read_body@@Base+0x188>
   1634c:	ldr	r0, [r7, #72]	; 0x48
   16350:	ldr	r3, [r7, #76]	; 0x4c
   16354:	adds	r0, r0, #1
   16358:	str	r0, [r7, #72]	; 0x48
   1635c:	adc	r3, r3, #0
   16360:	mov	r0, r1
   16364:	str	r3, [r7, #76]	; 0x4c
   16368:	bl	12eb0 <free_token_if@@Base>
   1636c:	mov	r0, r4
   16370:	bl	16568 <read_if_statement@@Base>
   16374:	mov	r6, r0
   16378:	mov	r8, r9
   1637c:	ldrd	r0, [r8]
   16380:	adds	r0, r0, #1
   16384:	adc	r1, r1, #0
   16388:	cmp	sl, #0
   1638c:	strd	r0, [r8]
   16390:	beq	1629c <read_body@@Base+0xa8>
   16394:	ldrd	r0, [r7, #104]	; 0x68
   16398:	adds	r0, r0, #1
   1639c:	adc	r1, r1, #0
   163a0:	strd	r0, [r7, #104]	; 0x68
   163a4:	str	r6, [r5, #4]
   163a8:	add	r0, r7, #120	; 0x78
   163ac:	b	162b4 <read_body@@Base+0xc0>
   163b0:	ldrd	r0, [r7, #8]
   163b4:	mov	sl, #0
   163b8:	adds	r0, r0, #1
   163bc:	adc	r1, r1, #0
   163c0:	strd	r0, [r7, #8]
   163c4:	add	r0, r7, #24
   163c8:	b	16418 <read_body@@Base+0x224>
   163cc:	ldr	r0, [r7, #48]	; 0x30
   163d0:	ldr	r3, [r7, #52]	; 0x34
   163d4:	adds	r0, r0, #1
   163d8:	str	r0, [r7, #48]	; 0x30
   163dc:	adc	r3, r3, #0
   163e0:	mov	r0, r1
   163e4:	str	r3, [r7, #52]	; 0x34
   163e8:	bl	12db0 <free_token_cbra@@Base>
   163ec:	add	r0, r7, #144	; 0x90
   163f0:	b	16418 <read_body@@Base+0x224>
   163f4:	ldr	r0, [r7, #56]	; 0x38
   163f8:	ldr	r3, [r7, #60]	; 0x3c
   163fc:	adds	r0, r0, #1
   16400:	adc	r3, r3, #0
   16404:	str	r0, [r7, #56]	; 0x38
   16408:	str	r3, [r7, #60]	; 0x3c
   1640c:	ldr	r0, [r4]
   16410:	bl	13380 <push_back@@Base>
   16414:	add	r0, r7, #96	; 0x60
   16418:	ldrd	r2, [r0]
   1641c:	adds	r2, r2, #1
   16420:	adc	r3, r3, #0
   16424:	strd	r2, [r0]
   16428:	ldrd	r0, [r7, #152]	; 0x98
   1642c:	adds	r0, r0, #1
   16430:	adc	r1, r1, #0
   16434:	strd	r0, [r7, #152]	; 0x98
   16438:	mov	r0, sl
   1643c:	sub	sp, fp, #28
   16440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16444:	ldrdeq	r7, [r1], -r8
   16448:	ldrdeq	r7, [r1], -ip

0001644c <read_return_expression@@Base>:
   1644c:	push	{r4, r5, r6, r7, fp, lr}
   16450:	add	fp, sp, #16
   16454:	ldr	r7, [pc, #260]	; 16560 <read_return_expression@@Base+0x114>
   16458:	mov	r4, r0
   1645c:	ldr	r0, [pc, #256]	; 16564 <read_return_expression@@Base+0x118>
   16460:	ldr	r0, [pc, r0]
   16464:	add	r7, pc, r7
   16468:	adds	r0, r0, #1
   1646c:	str	r0, [r7]
   16470:	ldr	r0, [r7, #4]
   16474:	adc	r0, r0, #0
   16478:	str	r0, [r7, #4]
   1647c:	ldr	r0, [r4]
   16480:	bl	13600 <next@@Base>
   16484:	mov	r5, r0
   16488:	ldr	r0, [r0]
   1648c:	cmp	r0, #1
   16490:	bne	16504 <read_return_expression@@Base+0xb8>
   16494:	ldrd	r0, [r7, #16]
   16498:	adds	r0, r0, #1
   1649c:	adc	r1, r1, #0
   164a0:	strd	r0, [r7, #16]
   164a4:	mov	r0, #12
   164a8:	bl	11f90 <malloc@plt>
   164ac:	ldr	r1, [r5, #4]
   164b0:	mov	r6, r0
   164b4:	bl	14ff0 <init_node_int@@Base>
   164b8:	mov	r0, r5
   164bc:	bl	12c70 <free_token_int_value@@Base>
   164c0:	mov	r0, #12
   164c4:	bl	11f90 <malloc@plt>
   164c8:	mov	r1, r6
   164cc:	mov	r5, r0
   164d0:	bl	15100 <init_node_return@@Base>
   164d4:	ldr	r0, [r4]
   164d8:	bl	13600 <next@@Base>
   164dc:	ldr	r1, [r0]
   164e0:	cmp	r1, #8
   164e4:	bne	16520 <read_return_expression@@Base+0xd4>
   164e8:	ldrd	r2, [r7, #40]	; 0x28
   164ec:	adds	r2, r2, #1
   164f0:	adc	r3, r3, #0
   164f4:	strd	r2, [r7, #40]	; 0x28
   164f8:	bl	12e30 <free_token_semicolon@@Base>
   164fc:	add	r0, r7, #56	; 0x38
   16500:	b	16538 <read_return_expression@@Base+0xec>
   16504:	ldrd	r0, [r7, #8]
   16508:	mov	r5, #0
   1650c:	adds	r0, r0, #1
   16510:	adc	r1, r1, #0
   16514:	strd	r0, [r7, #8]
   16518:	add	r0, r7, #24
   1651c:	b	16538 <read_return_expression@@Base+0xec>
   16520:	ldrd	r0, [r7, #32]
   16524:	mov	r5, #0
   16528:	adds	r0, r0, #1
   1652c:	adc	r1, r1, #0
   16530:	strd	r0, [r7, #32]
   16534:	add	r0, r7, #48	; 0x30
   16538:	ldrd	r2, [r0]
   1653c:	adds	r2, r2, #1
   16540:	adc	r3, r3, #0
   16544:	strd	r2, [r0]
   16548:	ldrd	r0, [r7, #64]	; 0x40
   1654c:	adds	r0, r0, #1
   16550:	adc	r1, r1, #0
   16554:	strd	r0, [r7, #64]	; 0x40
   16558:	mov	r0, r5
   1655c:	pop	{r4, r5, r6, r7, fp, pc}
   16560:	andeq	r7, r1, r4, lsr #16
   16564:	andeq	r7, r1, r8, lsr #16

00016568 <read_if_statement@@Base>:
   16568:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1656c:	add	fp, sp, #24
   16570:	ldr	r4, [pc, #328]	; 166c0 <read_if_statement@@Base+0x158>
   16574:	mov	r5, r0
   16578:	ldr	r0, [pc, #324]	; 166c4 <read_if_statement@@Base+0x15c>
   1657c:	ldr	r0, [pc, r0]
   16580:	add	r4, pc, r4
   16584:	adds	r0, r0, #1
   16588:	str	r0, [r4]
   1658c:	ldr	r0, [r4, #4]
   16590:	adc	r0, r0, #0
   16594:	str	r0, [r4, #4]
   16598:	ldr	r0, [r5]
   1659c:	bl	13600 <next@@Base>
   165a0:	ldr	r1, [r0]
   165a4:	cmp	r1, #3
   165a8:	bne	16624 <read_if_statement@@Base+0xbc>
   165ac:	ldrd	r2, [r4, #16]
   165b0:	adds	r2, r2, #1
   165b4:	adc	r3, r3, #0
   165b8:	strd	r2, [r4, #16]
   165bc:	bl	12cf0 <free_token_opar@@Base>
   165c0:	mov	r0, r5
   165c4:	bl	166c8 <read_boolean_expression@@Base>
   165c8:	mov	r8, r0
   165cc:	mov	r0, r5
   165d0:	bl	161f4 <read_body@@Base>
   165d4:	mov	r9, r0
   165d8:	ldr	r0, [r5]
   165dc:	bl	13600 <next@@Base>
   165e0:	mov	r1, r0
   165e4:	ldr	r0, [r0]
   165e8:	cmp	r0, #11
   165ec:	bne	16640 <read_if_statement@@Base+0xd8>
   165f0:	ldr	r0, [r4, #32]
   165f4:	ldr	r3, [r4, #36]	; 0x24
   165f8:	adds	r0, r0, #1
   165fc:	str	r0, [r4, #32]
   16600:	adc	r3, r3, #0
   16604:	mov	r0, r1
   16608:	str	r3, [r4, #36]	; 0x24
   1660c:	bl	12ef0 <free_token_else@@Base>
   16610:	mov	r0, r5
   16614:	add	r6, r4, #48	; 0x30
   16618:	bl	161f4 <read_body@@Base>
   1661c:	mov	r7, r0
   16620:	b	16668 <read_if_statement@@Base+0x100>
   16624:	ldrd	r0, [r4, #8]
   16628:	mov	r5, #0
   1662c:	adds	r0, r0, #1
   16630:	adc	r1, r1, #0
   16634:	strd	r0, [r4, #8]
   16638:	add	r0, r4, #24
   1663c:	b	16698 <read_if_statement@@Base+0x130>
   16640:	ldr	r0, [r4, #40]	; 0x28
   16644:	ldr	r3, [r4, #44]	; 0x2c
   16648:	adds	r0, r0, #1
   1664c:	adc	r3, r3, #0
   16650:	str	r0, [r4, #40]	; 0x28
   16654:	str	r3, [r4, #44]	; 0x2c
   16658:	ldr	r0, [r5]
   1665c:	bl	13380 <push_back@@Base>
   16660:	add	r6, r4, #56	; 0x38
   16664:	mov	r7, #0
   16668:	ldrd	r0, [r6]
   1666c:	adds	r0, r0, #1
   16670:	adc	r1, r1, #0
   16674:	strd	r0, [r6]
   16678:	mov	r0, #20
   1667c:	bl	11f90 <malloc@plt>
   16680:	mov	r1, r8
   16684:	mov	r2, r9
   16688:	mov	r3, r7
   1668c:	mov	r5, r0
   16690:	bl	15180 <init_node_if@@Base>
   16694:	add	r0, r4, #64	; 0x40
   16698:	ldrd	r2, [r0]
   1669c:	adds	r2, r2, #1
   166a0:	adc	r3, r3, #0
   166a4:	strd	r2, [r0]
   166a8:	ldrd	r0, [r4, #72]	; 0x48
   166ac:	adds	r0, r0, #1
   166b0:	adc	r1, r1, #0
   166b4:	strd	r0, [r4, #72]	; 0x48
   166b8:	mov	r0, r5
   166bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166c0:	andeq	r7, r1, r8, asr r7
   166c4:	andeq	r7, r1, ip, asr r7

000166c8 <read_boolean_expression@@Base>:
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166cc:	add	fp, sp, #28
   166d0:	sub	sp, sp, #4
   166d4:	ldr	r6, [pc, #492]	; 168c8 <read_boolean_expression@@Base+0x200>
   166d8:	mov	r5, r0
   166dc:	ldr	r0, [pc, #488]	; 168cc <read_boolean_expression@@Base+0x204>
   166e0:	mov	r4, #0
   166e4:	ldr	r0, [pc, r0]
   166e8:	add	r6, pc, r6
   166ec:	str	r4, [sp]
   166f0:	adds	r0, r0, #1
   166f4:	str	r0, [r6]
   166f8:	ldr	r0, [r6, #4]
   166fc:	adc	r0, r0, #0
   16700:	str	r0, [r6, #4]
   16704:	ldr	r0, [r5]
   16708:	bl	13600 <next@@Base>
   1670c:	mov	r1, r0
   16710:	ldr	r0, [r6, #8]
   16714:	ldr	r3, [r6, #12]
   16718:	adds	r0, r0, #1
   1671c:	adc	r3, r3, #0
   16720:	str	r0, [r6, #8]
   16724:	str	r3, [r6, #12]
   16728:	ldr	r0, [r1]
   1672c:	cmp	r0, #4
   16730:	beq	1684c <read_boolean_expression@@Base+0x184>
   16734:	mov	r4, #0
   16738:	mov	r9, #1
   1673c:	add	sl, r6, #72	; 0x48
   16740:	mov	r8, sp
   16744:	b	167b4 <read_boolean_expression@@Base+0xec>
   16748:	ldrd	r0, [r6, #56]	; 0x38
   1674c:	mov	r2, r8
   16750:	mov	r3, r7
   16754:	adds	r0, r0, #1
   16758:	adc	r1, r1, #0
   1675c:	strd	r0, [r6, #56]	; 0x38
   16760:	mov	r0, r5
   16764:	mov	r1, r4
   16768:	bl	168d8 <read_single_boolean_expression@@Base>
   1676c:	mov	r4, r0
   16770:	add	r0, r6, #80	; 0x50
   16774:	ldrd	r2, [r0]
   16778:	adds	r2, r2, #1
   1677c:	adc	r3, r3, #0
   16780:	strd	r2, [r0]
   16784:	ldr	r0, [r5]
   16788:	bl	13600 <next@@Base>
   1678c:	mov	r1, r0
   16790:	ldr	r0, [r6, #88]	; 0x58
   16794:	ldr	r3, [r6, #92]	; 0x5c
   16798:	adds	r0, r0, #1
   1679c:	adc	r3, r3, #0
   167a0:	str	r0, [r6, #88]	; 0x58
   167a4:	str	r3, [r6, #92]	; 0x5c
   167a8:	ldr	r0, [r1]
   167ac:	cmp	r0, #4
   167b0:	beq	1684c <read_boolean_expression@@Base+0x184>
   167b4:	ldrd	r2, [r6, #16]
   167b8:	adds	r2, r2, #1
   167bc:	adc	r3, r3, #0
   167c0:	cmp	r0, #12
   167c4:	strd	r2, [r6, #16]
   167c8:	beq	1681c <read_boolean_expression@@Base+0x154>
   167cc:	cmp	r0, #3
   167d0:	beq	16748 <read_boolean_expression@@Base+0x80>
   167d4:	cmp	r0, #1
   167d8:	bne	16890 <read_boolean_expression@@Base+0x1c8>
   167dc:	ldr	r0, [r6, #40]	; 0x28
   167e0:	ldr	r3, [r6, #44]	; 0x2c
   167e4:	adds	r0, r0, #1
   167e8:	adc	r3, r3, #0
   167ec:	str	r0, [r6, #40]	; 0x28
   167f0:	str	r3, [r6, #44]	; 0x2c
   167f4:	ldr	r0, [r5]
   167f8:	bl	13380 <push_back@@Base>
   167fc:	mov	r0, r5
   16800:	mov	r1, r4
   16804:	mov	r2, r8
   16808:	mov	r3, r7
   1680c:	bl	168d8 <read_single_boolean_expression@@Base>
   16810:	mov	r4, r0
   16814:	add	r0, r6, #64	; 0x40
   16818:	b	16774 <read_boolean_expression@@Base+0xac>
   1681c:	ldr	r0, [r6, #48]	; 0x30
   16820:	ldr	r3, [r6, #52]	; 0x34
   16824:	adds	r0, r0, #1
   16828:	str	r0, [r6, #48]	; 0x30
   1682c:	adc	r3, r3, #0
   16830:	mov	r0, r1
   16834:	str	r3, [r6, #52]	; 0x34
   16838:	bl	15a14 <get_boolean_op_value@@Base>
   1683c:	mov	r7, r0
   16840:	mov	r0, sl
   16844:	str	r9, [sp]
   16848:	b	16774 <read_boolean_expression@@Base+0xac>
   1684c:	ldr	r0, [r6, #24]
   16850:	ldr	r3, [r6, #28]
   16854:	ldr	r2, [r6, #96]	; 0x60
   16858:	ldr	r5, [r6, #100]	; 0x64
   1685c:	adds	r0, r0, #1
   16860:	adc	r3, r3, #0
   16864:	adds	r2, r2, #1
   16868:	str	r2, [r6, #96]	; 0x60
   1686c:	str	r0, [r6, #24]
   16870:	adc	r0, r5, #0
   16874:	str	r3, [r6, #28]
   16878:	str	r0, [r6, #100]	; 0x64
   1687c:	mov	r0, r1
   16880:	bl	12d30 <free_token_cpar@@Base>
   16884:	mov	r0, r4
   16888:	sub	sp, fp, #28
   1688c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16890:	ldrd	r0, [r6, #32]
   16894:	mov	r2, #1
   16898:	adds	r0, r0, #1
   1689c:	adc	r1, r1, #0
   168a0:	strd	r0, [r6, #32]
   168a4:	mov	r1, #33	; 0x21
   168a8:	ldr	r0, [pc, #32]	; 168d0 <read_boolean_expression@@Base+0x208>
   168ac:	ldr	r0, [pc, r0]
   168b0:	ldr	r3, [r0]
   168b4:	ldr	r0, [pc, #24]	; 168d4 <read_boolean_expression@@Base+0x20c>
   168b8:	add	r0, pc, r0
   168bc:	bl	11f6c <fwrite@plt>
   168c0:	mov	r0, #1
   168c4:	bl	11fcc <exit@plt>
   168c8:	andeq	r7, r1, r0, asr #12
   168cc:	andeq	r7, r1, r4, asr #12
   168d0:	andeq	r6, r1, r0, lsl r8
   168d4:	muleq	r0, sl, ip

000168d8 <read_single_boolean_expression@@Base>:
   168d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168dc:	add	fp, sp, #24
   168e0:	ldr	r5, [pc, #264]	; 169f0 <read_single_boolean_expression@@Base+0x118>
   168e4:	mov	r4, r2
   168e8:	ldr	r2, [pc, #260]	; 169f4 <read_single_boolean_expression@@Base+0x11c>
   168ec:	ldr	r2, [pc, r2]
   168f0:	add	r5, pc, r5
   168f4:	adds	r2, r2, #1
   168f8:	str	r2, [r5]
   168fc:	ldr	r2, [r5, #4]
   16900:	adc	r2, r2, #0
   16904:	cmp	r1, #0
   16908:	str	r2, [r5, #4]
   1690c:	beq	16974 <read_single_boolean_expression@@Base+0x9c>
   16910:	mov	r8, r3
   16914:	ldrd	r2, [r5, #16]
   16918:	adds	r2, r2, #1
   1691c:	adc	r3, r3, #0
   16920:	strd	r2, [r5, #16]
   16924:	ldr	r1, [r4]
   16928:	cmp	r1, #0
   1692c:	beq	169b8 <read_single_boolean_expression@@Base+0xe0>
   16930:	ldrd	r2, [r5, #32]
   16934:	adds	r2, r2, #1
   16938:	adc	r3, r3, #0
   1693c:	strd	r2, [r5, #32]
   16940:	bl	16a00 <read_boolean_binary_expression@@Base>
   16944:	mov	r7, r0
   16948:	mov	r0, #20
   1694c:	bl	11f90 <malloc@plt>
   16950:	mov	r1, r8
   16954:	mov	r2, #0
   16958:	mov	r3, r7
   1695c:	mov	r6, r0
   16960:	mov	r9, #0
   16964:	bl	15200 <init_node_boolean_operator@@Base>
   16968:	str	r9, [r4]
   1696c:	add	r4, r5, #48	; 0x30
   16970:	b	16990 <read_single_boolean_expression@@Base+0xb8>
   16974:	ldrd	r2, [r5, #8]
   16978:	add	r4, r5, #24
   1697c:	adds	r2, r2, #1
   16980:	adc	r3, r3, #0
   16984:	strd	r2, [r5, #8]
   16988:	bl	16a00 <read_boolean_binary_expression@@Base>
   1698c:	mov	r6, r0
   16990:	ldrd	r0, [r4]
   16994:	adds	r0, r0, #1
   16998:	adc	r1, r1, #0
   1699c:	strd	r0, [r4]
   169a0:	ldrd	r0, [r5, #56]	; 0x38
   169a4:	adds	r0, r0, #1
   169a8:	adc	r1, r1, #0
   169ac:	strd	r0, [r5, #56]	; 0x38
   169b0:	mov	r0, r6
   169b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169b8:	ldrd	r0, [r5, #40]	; 0x28
   169bc:	adds	r0, r0, #1
   169c0:	adc	r1, r1, #0
   169c4:	strd	r0, [r5, #40]	; 0x28
   169c8:	mov	r1, #4
   169cc:	ldr	r0, [pc, #36]	; 169f8 <read_single_boolean_expression@@Base+0x120>
   169d0:	ldr	r0, [pc, r0]
   169d4:	ldr	r2, [r1]
   169d8:	ldr	r0, [r0]
   169dc:	ldr	r1, [pc, #24]	; 169fc <read_single_boolean_expression@@Base+0x124>
   169e0:	add	r1, pc, r1
   169e4:	bl	11ffc <fprintf@plt>
   169e8:	mov	r0, #1
   169ec:	bl	11fcc <exit@plt>
   169f0:	andeq	r7, r1, r8, lsr #9
   169f4:	andeq	r7, r1, ip, lsr #9
   169f8:	andeq	r6, r1, ip, ror #13
   169fc:	muleq	r0, r4, fp

00016a00 <read_boolean_binary_expression@@Base>:
   16a00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a04:	add	fp, sp, #24
   16a08:	ldr	r4, [pc, #468]	; 16be4 <read_boolean_binary_expression@@Base+0x1e4>
   16a0c:	mov	r5, r0
   16a10:	ldr	r0, [pc, #464]	; 16be8 <read_boolean_binary_expression@@Base+0x1e8>
   16a14:	ldr	r0, [pc, r0]
   16a18:	add	r4, pc, r4
   16a1c:	adds	r0, r0, #1
   16a20:	str	r0, [r4]
   16a24:	ldr	r0, [r4, #4]
   16a28:	adc	r0, r0, #0
   16a2c:	str	r0, [r4, #4]
   16a30:	ldr	r0, [r5]
   16a34:	bl	13600 <next@@Base>
   16a38:	mov	r6, r0
   16a3c:	ldr	r0, [r0]
   16a40:	cmp	r0, #1
   16a44:	bne	16b18 <read_boolean_binary_expression@@Base+0x118>
   16a48:	ldrd	r0, [r4, #16]
   16a4c:	adds	r0, r0, #1
   16a50:	adc	r1, r1, #0
   16a54:	strd	r0, [r4, #16]
   16a58:	mov	r0, #12
   16a5c:	bl	11f90 <malloc@plt>
   16a60:	ldr	r1, [r6, #4]
   16a64:	mov	r8, r0
   16a68:	bl	14ff0 <init_node_int@@Base>
   16a6c:	mov	r0, r6
   16a70:	bl	12c70 <free_token_int_value@@Base>
   16a74:	ldr	r0, [r5]
   16a78:	bl	13600 <next@@Base>
   16a7c:	mov	r7, r0
   16a80:	ldr	r0, [r0]
   16a84:	cmp	r0, #12
   16a88:	bne	16b60 <read_boolean_binary_expression@@Base+0x160>
   16a8c:	ldrd	r0, [r4, #64]	; 0x40
   16a90:	adds	r0, r0, #1
   16a94:	adc	r1, r1, #0
   16a98:	strd	r0, [r4, #64]	; 0x40
   16a9c:	mov	r0, r7
   16aa0:	bl	15a14 <get_boolean_op_value@@Base>
   16aa4:	mov	r6, r0
   16aa8:	mov	r0, r7
   16aac:	bl	12f24 <free_token_boolean_op@@Base>
   16ab0:	ldr	r0, [r5]
   16ab4:	bl	13600 <next@@Base>
   16ab8:	mov	r5, r0
   16abc:	ldr	r0, [r0]
   16ac0:	cmp	r0, #1
   16ac4:	bne	16b9c <read_boolean_binary_expression@@Base+0x19c>
   16ac8:	ldrd	r0, [r4, #88]	; 0x58
   16acc:	adds	r0, r0, #1
   16ad0:	adc	r1, r1, #0
   16ad4:	strd	r0, [r4, #88]	; 0x58
   16ad8:	mov	r0, #12
   16adc:	bl	11f90 <malloc@plt>
   16ae0:	ldr	r1, [r5, #4]
   16ae4:	mov	r7, r0
   16ae8:	bl	14ff0 <init_node_int@@Base>
   16aec:	mov	r0, r5
   16af0:	bl	12c70 <free_token_int_value@@Base>
   16af4:	mov	r0, #20
   16af8:	bl	11f90 <malloc@plt>
   16afc:	mov	r1, r6
   16b00:	mov	r2, r8
   16b04:	mov	r3, r7
   16b08:	mov	r5, r0
   16b0c:	bl	15200 <init_node_boolean_operator@@Base>
   16b10:	add	r6, r4, #104	; 0x68
   16b14:	b	16bbc <read_boolean_binary_expression@@Base+0x1bc>
   16b18:	ldrd	r2, [r4, #8]
   16b1c:	adds	r2, r2, #1
   16b20:	adc	r3, r3, #0
   16b24:	cmp	r0, #12
   16b28:	strd	r2, [r4, #8]
   16b2c:	bne	16b80 <read_boolean_binary_expression@@Base+0x180>
   16b30:	ldrd	r0, [r4, #24]
   16b34:	adds	r0, r0, #1
   16b38:	adc	r1, r1, #0
   16b3c:	strd	r0, [r4, #24]
   16b40:	mov	r1, r6
   16b44:	ldr	r0, [r5]
   16b48:	bl	13380 <push_back@@Base>
   16b4c:	mov	r0, r5
   16b50:	add	r6, r4, #40	; 0x28
   16b54:	bl	16bec <read_boolean_unary_expression@@Base>
   16b58:	mov	r5, r0
   16b5c:	b	16bbc <read_boolean_binary_expression@@Base+0x1bc>
   16b60:	ldrd	r0, [r4, #56]	; 0x38
   16b64:	adds	r0, r0, #1
   16b68:	adc	r1, r1, #0
   16b6c:	strd	r0, [r4, #56]	; 0x38
   16b70:	mov	r0, r8
   16b74:	bl	1528c <free_node@@Base>
   16b78:	add	r6, r4, #72	; 0x48
   16b7c:	b	16bb8 <read_boolean_binary_expression@@Base+0x1b8>
   16b80:	ldrd	r0, [r4, #32]
   16b84:	add	r6, r4, #48	; 0x30
   16b88:	mov	r5, #0
   16b8c:	adds	r0, r0, #1
   16b90:	adc	r1, r1, #0
   16b94:	strd	r0, [r4, #32]
   16b98:	b	16bbc <read_boolean_binary_expression@@Base+0x1bc>
   16b9c:	ldrd	r0, [r4, #80]	; 0x50
   16ba0:	adds	r0, r0, #1
   16ba4:	adc	r1, r1, #0
   16ba8:	strd	r0, [r4, #80]	; 0x50
   16bac:	mov	r0, r8
   16bb0:	bl	1528c <free_node@@Base>
   16bb4:	add	r6, r4, #96	; 0x60
   16bb8:	mov	r5, #0
   16bbc:	ldrd	r0, [r6]
   16bc0:	adds	r0, r0, #1
   16bc4:	adc	r1, r1, #0
   16bc8:	strd	r0, [r6]
   16bcc:	ldrd	r0, [r4, #112]	; 0x70
   16bd0:	adds	r0, r0, #1
   16bd4:	adc	r1, r1, #0
   16bd8:	strd	r0, [r4, #112]	; 0x70
   16bdc:	mov	r0, r5
   16be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16be4:	andeq	r7, r1, r0, asr #7
   16be8:	andeq	r7, r1, r4, asr #7

00016bec <read_boolean_unary_expression@@Base>:
   16bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16bf0:	add	fp, sp, #24
   16bf4:	ldr	r5, [pc, #304]	; 16d2c <read_boolean_unary_expression@@Base+0x140>
   16bf8:	mov	r6, r0
   16bfc:	ldr	r0, [pc, #300]	; 16d30 <read_boolean_unary_expression@@Base+0x144>
   16c00:	ldr	r0, [pc, r0]
   16c04:	add	r5, pc, r5
   16c08:	adds	r0, r0, #1
   16c0c:	str	r0, [r5]
   16c10:	ldr	r0, [r5, #4]
   16c14:	adc	r0, r0, #0
   16c18:	str	r0, [r5, #4]
   16c1c:	mov	r0, #20
   16c20:	bl	11f90 <malloc@plt>
   16c24:	mov	r4, r0
   16c28:	ldr	r0, [r6]
   16c2c:	bl	13600 <next@@Base>
   16c30:	mov	r7, r0
   16c34:	ldr	r0, [r0]
   16c38:	cmp	r0, #12
   16c3c:	bne	16cc4 <read_boolean_unary_expression@@Base+0xd8>
   16c40:	ldrd	r0, [r5, #16]
   16c44:	adds	r0, r0, #1
   16c48:	adc	r1, r1, #0
   16c4c:	strd	r0, [r5, #16]
   16c50:	mov	r0, r7
   16c54:	bl	15a14 <get_boolean_op_value@@Base>
   16c58:	mov	r8, r0
   16c5c:	mov	r0, r7
   16c60:	bl	12f24 <free_token_boolean_op@@Base>
   16c64:	ldr	r0, [r6]
   16c68:	bl	13600 <next@@Base>
   16c6c:	mov	r6, r0
   16c70:	ldr	r0, [r0]
   16c74:	cmp	r0, #1
   16c78:	bne	16ce4 <read_boolean_unary_expression@@Base+0xf8>
   16c7c:	ldrd	r0, [r5, #40]	; 0x28
   16c80:	adds	r0, r0, #1
   16c84:	adc	r1, r1, #0
   16c88:	strd	r0, [r5, #40]	; 0x28
   16c8c:	mov	r0, #12
   16c90:	bl	11f90 <malloc@plt>
   16c94:	ldr	r1, [r6, #4]
   16c98:	mov	r7, r0
   16c9c:	bl	14ff0 <init_node_int@@Base>
   16ca0:	mov	r0, r6
   16ca4:	bl	12c70 <free_token_int_value@@Base>
   16ca8:	mov	r0, r4
   16cac:	mov	r1, r8
   16cb0:	mov	r2, r7
   16cb4:	mov	r3, #0
   16cb8:	bl	15200 <init_node_boolean_operator@@Base>
   16cbc:	add	r0, r5, #56	; 0x38
   16cc0:	b	16d04 <read_boolean_unary_expression@@Base+0x118>
   16cc4:	ldrd	r0, [r5, #8]
   16cc8:	adds	r0, r0, #1
   16ccc:	adc	r1, r1, #0
   16cd0:	strd	r0, [r5, #8]
   16cd4:	mov	r0, r4
   16cd8:	bl	15974 <free_node_boolean_operator@@Base>
   16cdc:	add	r0, r5, #24
   16ce0:	b	16d00 <read_boolean_unary_expression@@Base+0x114>
   16ce4:	ldrd	r0, [r5, #32]
   16ce8:	adds	r0, r0, #1
   16cec:	adc	r1, r1, #0
   16cf0:	strd	r0, [r5, #32]
   16cf4:	mov	r0, r4
   16cf8:	bl	15974 <free_node_boolean_operator@@Base>
   16cfc:	add	r0, r5, #48	; 0x30
   16d00:	mov	r4, #0
   16d04:	ldrd	r2, [r0]
   16d08:	adds	r2, r2, #1
   16d0c:	adc	r3, r3, #0
   16d10:	strd	r2, [r0]
   16d14:	ldrd	r0, [r5, #64]	; 0x40
   16d18:	adds	r0, r0, #1
   16d1c:	adc	r1, r1, #0
   16d20:	strd	r0, [r5, #64]	; 0x40
   16d24:	mov	r0, r4
   16d28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16d2c:	andeq	r7, r1, r4, asr r2
   16d30:	andeq	r7, r1, r8, asr r2
   16d34:	push	{r4, r5, r6, lr}
   16d38:	sub	sp, sp, #8
   16d3c:	ldr	r0, [pc, #112]	; 16db4 <read_boolean_unary_expression@@Base+0x1c8>
   16d40:	ldr	r1, [pc, #112]	; 16db8 <read_boolean_unary_expression@@Base+0x1cc>
   16d44:	movw	r2, #51015	; 0xc747
   16d48:	movt	r2, #42604	; 0xa66c
   16d4c:	add	r0, pc, r0
   16d50:	add	r1, pc, r1
   16d54:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   16d58:	ldr	r0, [pc, #92]	; 16dbc <read_boolean_unary_expression@@Base+0x1d0>
   16d5c:	ldr	r6, [pc, #92]	; 16dc0 <read_boolean_unary_expression@@Base+0x1d4>
   16d60:	mov	r5, #0
   16d64:	add	r0, pc, r0
   16d68:	add	r6, pc, r6
   16d6c:	add	r4, r0, #4
   16d70:	mov	r3, r6
   16d74:	ldr	r0, [r3, r5]!
   16d78:	ldr	r1, [r3, #16]
   16d7c:	str	r1, [sp]
   16d80:	ldmib	r3, {r1, r2}
   16d84:	ldrb	r3, [r3, #12]
   16d88:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   16d8c:	ldrd	r0, [r4, #-4]
   16d90:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   16d94:	add	r5, r5, #20
   16d98:	add	r4, r4, #8
   16d9c:	cmp	r5, #220	; 0xdc
   16da0:	bne	16d70 <read_boolean_unary_expression@@Base+0x184>
   16da4:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   16da8:	add	sp, sp, #8
   16dac:	pop	{r4, r5, r6, lr}
   16db0:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   16db4:	andeq	r4, r0, r0, ror #16
   16db8:	andeq	r4, r0, r0, asr #5
   16dbc:	andeq	r5, r1, r4, asr #31
   16dc0:	andeq	r5, r1, r0, ror #29
   16dc4:	push	{r4, r5, fp, lr}
   16dc8:	vpush	{d8-d9}
   16dcc:	bl	16d34 <read_boolean_unary_expression@@Base+0x148>
   16dd0:	ldr	r0, [pc, #448]	; 16f98 <read_boolean_unary_expression@@Base+0x3ac>
   16dd4:	vmov.i32	q4, #0	; 0x00000000
   16dd8:	mov	r4, #0
   16ddc:	mov	r5, #116	; 0x74
   16de0:	mov	r2, #160	; 0xa0
   16de4:	add	r0, pc, r0
   16de8:	vst1.64	{d8-d9}, [r0 :128]
   16dec:	ldr	r0, [pc, #424]	; 16f9c <read_boolean_unary_expression@@Base+0x3b0>
   16df0:	add	r0, pc, r0
   16df4:	vst1.64	{d8-d9}, [r0 :128]
   16df8:	ldr	r0, [pc, #416]	; 16fa0 <read_boolean_unary_expression@@Base+0x3b4>
   16dfc:	add	r0, pc, r0
   16e00:	vst1.64	{d8-d9}, [r0 :128]
   16e04:	ldr	r0, [pc, #408]	; 16fa4 <read_boolean_unary_expression@@Base+0x3b8>
   16e08:	add	r0, pc, r0
   16e0c:	add	r1, r0, #16
   16e10:	str	r4, [r0, #112]	; 0x70
   16e14:	vst1.64	{d8-d9}, [r1 :128]
   16e18:	add	r1, r0, #32
   16e1c:	vst1.64	{d8-d9}, [r1 :128]
   16e20:	add	r1, r0, #48	; 0x30
   16e24:	vst1.64	{d8-d9}, [r1 :128]
   16e28:	add	r1, r0, #64	; 0x40
   16e2c:	vst1.64	{d8-d9}, [r1 :128]
   16e30:	add	r1, r0, #80	; 0x50
   16e34:	vst1.64	{d8-d9}, [r1 :128]
   16e38:	add	r1, r0, #96	; 0x60
   16e3c:	vst1.64	{d8-d9}, [r0 :128], r5
   16e40:	vst1.64	{d8-d9}, [r1 :128]
   16e44:	str	r4, [r0]
   16e48:	mov	r1, #0
   16e4c:	ldr	r0, [pc, #340]	; 16fa8 <read_boolean_unary_expression@@Base+0x3bc>
   16e50:	add	r0, pc, r0
   16e54:	bl	1202c <memset@plt>
   16e58:	ldr	r1, [pc, #332]	; 16fac <read_boolean_unary_expression@@Base+0x3c0>
   16e5c:	mov	r0, #100	; 0x64
   16e60:	add	r1, pc, r1
   16e64:	mov	r2, r1
   16e68:	vst1.64	{d8-d9}, [r2 :128], r0
   16e6c:	str	r4, [r2]
   16e70:	ldr	r2, [pc, #312]	; 16fb0 <read_boolean_unary_expression@@Base+0x3c4>
   16e74:	add	r2, pc, r2
   16e78:	add	r0, r2, #16
   16e7c:	str	r4, [r2, #64]	; 0x40
   16e80:	vst1.64	{d8-d9}, [r0 :128]
   16e84:	add	r0, r2, #32
   16e88:	vst1.64	{d8-d9}, [r0 :128]
   16e8c:	add	r0, r2, #48	; 0x30
   16e90:	vst1.64	{d8-d9}, [r0 :128]
   16e94:	ldr	r3, [pc, #280]	; 16fb4 <read_boolean_unary_expression@@Base+0x3c8>
   16e98:	str	r4, [r1, #96]	; 0x60
   16e9c:	add	r3, pc, r3
   16ea0:	add	r0, r3, #16
   16ea4:	vst1.64	{d8-d9}, [r0 :128]
   16ea8:	add	r0, r3, #32
   16eac:	vst1.64	{d8-d9}, [r0 :128]
   16eb0:	add	r0, r3, #48	; 0x30
   16eb4:	vst1.64	{d8-d9}, [r0 :128]
   16eb8:	add	r0, r1, #16
   16ebc:	vst1.64	{d8-d9}, [r0 :128]
   16ec0:	add	r0, r1, #32
   16ec4:	vst1.64	{d8-d9}, [r0 :128]
   16ec8:	add	r0, r1, #48	; 0x30
   16ecc:	vst1.64	{d8-d9}, [r0 :128]
   16ed0:	add	r0, r1, #64	; 0x40
   16ed4:	vst1.64	{d8-d9}, [r0 :128]
   16ed8:	add	r0, r1, #80	; 0x50
   16edc:	mov	r1, #64	; 0x40
   16ee0:	vst1.64	{d8-d9}, [r0 :128]
   16ee4:	mov	r0, #68	; 0x44
   16ee8:	vst1.64	{d8-d9}, [r3 :128], r1
   16eec:	vst1.64	{d8-d9}, [r2 :128], r0
   16ef0:	vst1.64	{d8-d9}, [r3 :128]
   16ef4:	str	r4, [r2]
   16ef8:	ldr	r1, [pc, #184]	; 16fb8 <read_boolean_unary_expression@@Base+0x3cc>
   16efc:	add	r1, pc, r1
   16f00:	add	r2, r1, #16
   16f04:	vst1.64	{d8-d9}, [r2 :128]
   16f08:	add	r2, r1, #32
   16f0c:	vst1.64	{d8-d9}, [r2 :128]
   16f10:	mov	r2, #48	; 0x30
   16f14:	vst1.64	{d8-d9}, [r1 :128], r2
   16f18:	vst1.64	{d8-d9}, [r1 :128]
   16f1c:	ldr	r1, [pc, #152]	; 16fbc <read_boolean_unary_expression@@Base+0x3d0>
   16f20:	add	r1, pc, r1
   16f24:	mov	r2, r1
   16f28:	str	r4, [r1, #112]	; 0x70
   16f2c:	vst1.64	{d8-d9}, [r2 :128], r5
   16f30:	str	r4, [r2]
   16f34:	add	r2, r1, #96	; 0x60
   16f38:	vst1.64	{d8-d9}, [r2 :128]
   16f3c:	add	r2, r1, #80	; 0x50
   16f40:	vst1.64	{d8-d9}, [r2 :128]
   16f44:	add	r2, r1, #64	; 0x40
   16f48:	vst1.64	{d8-d9}, [r2 :128]
   16f4c:	add	r2, r1, #48	; 0x30
   16f50:	vst1.64	{d8-d9}, [r2 :128]
   16f54:	add	r2, r1, #32
   16f58:	add	r1, r1, #16
   16f5c:	vst1.64	{d8-d9}, [r2 :128]
   16f60:	vst1.64	{d8-d9}, [r1 :128]
   16f64:	ldr	r1, [pc, #84]	; 16fc0 <read_boolean_unary_expression@@Base+0x3d4>
   16f68:	add	r1, pc, r1
   16f6c:	add	r2, r1, #48	; 0x30
   16f70:	str	r4, [r1, #64]	; 0x40
   16f74:	vst1.64	{d8-d9}, [r2 :128]
   16f78:	add	r2, r1, #32
   16f7c:	vst1.64	{d8-d9}, [r2 :128]
   16f80:	add	r2, r1, #16
   16f84:	vst1.64	{d8-d9}, [r1 :128], r0
   16f88:	vst1.64	{d8-d9}, [r2 :128]
   16f8c:	str	r4, [r1]
   16f90:	vpop	{d8-d9}
   16f94:	pop	{r4, r5, fp, pc}
   16f98:	andeq	r6, r1, r4, ror #26
   16f9c:	andeq	r6, r1, r8, asr #26
   16fa0:	andeq	r6, r1, ip, asr sp
   16fa4:	andeq	r6, r1, r0, ror #26
   16fa8:	muleq	r1, r8, sp
   16fac:	andeq	r6, r1, r8, asr #29
   16fb0:	andeq	r6, r1, r4, lsl lr
   16fb4:	andeq	r6, r1, ip, lsr lr
   16fb8:	muleq	r1, ip, lr
   16fbc:			; <UNDEFINED> instruction: 0x00016eb8
   16fc0:	strdeq	r6, [r1], -r0
   16fc4:	ldr	r0, [pc, #12]	; 16fd8 <read_boolean_unary_expression@@Base+0x3ec>
   16fc8:	ldr	r1, [pc, #12]	; 16fdc <read_boolean_unary_expression@@Base+0x3f0>
   16fcc:	add	r0, pc, r0
   16fd0:	add	r1, pc, r1
   16fd4:	b	1a83c <__gcov_flush@@Base+0xb8>
   16fd8:			; <UNDEFINED> instruction: 0xfffffd60
   16fdc:			; <UNDEFINED> instruction: 0xfffffdec

00016fe0 <init_generator@@Base>:
   16fe0:	push	{r4, sl, fp, lr}
   16fe4:	add	fp, sp, #8
   16fe8:	mov	r4, r0
   16fec:	ldr	r0, [pc, #76]	; 17040 <init_generator@@Base+0x60>
   16ff0:	add	r3, pc, #56	; 0x38
   16ff4:	vld1.64	{d16-d17}, [r3 :128]
   16ff8:	add	r0, pc, r0
   16ffc:	vld1.64	{d18-d19}, [r0 :128]
   17000:	vadd.i64	q8, q9, q8
   17004:	vst1.64	{d16-d17}, [r0 :128]
   17008:	str	r1, [r4]
   1700c:	mov	r0, r2
   17010:	ldr	r1, [pc, #44]	; 17044 <init_generator@@Base+0x64>
   17014:	add	r1, pc, r1
   17018:	bl	11f00 <fopen@plt>
   1701c:	mov	r1, #0
   17020:	stmib	r4, {r0, r1}
   17024:	str	r1, [r4, #12]
   17028:	pop	{r4, sl, fp, pc}
   1702c:	nop	{0}
   17030:	andeq	r0, r0, r1
   17034:	andeq	r0, r0, r0
   17038:	andeq	r0, r0, r1
   1703c:	andeq	r0, r0, r0
   17040:			; <UNDEFINED> instruction: 0x00016eb0
   17044:	andeq	r4, r0, r6, ror #13
   17048:	nop	{0}
   1704c:	nop	{0}

00017050 <destroy_generator@@Base>:
   17050:	ldr	r1, [pc, #56]	; 17090 <destroy_generator@@Base+0x40>
   17054:	add	r2, pc, #36	; 0x24
   17058:	vld1.64	{d16-d17}, [r2 :128]
   1705c:	add	r1, pc, r1
   17060:	vld1.64	{d18-d19}, [r1 :128]
   17064:	vadd.i64	q8, q9, q8
   17068:	vst1.64	{d16-d17}, [r1 :128]
   1706c:	ldr	r0, [r0, #4]
   17070:	b	1205c <fclose@plt>
   17074:	nop	{0}
   17078:	nop	{0}
   1707c:	nop	{0}
   17080:	andeq	r0, r0, r1
   17084:	andeq	r0, r0, r0
   17088:	andeq	r0, r0, r1
   1708c:	andeq	r0, r0, r0
   17090:	andeq	r6, r1, ip, asr lr
   17094:	nop	{0}
   17098:	nop	{0}
   1709c:	nop	{0}

000170a0 <generate_code@@Base>:
   170a0:	push	{r4, r5, fp, lr}
   170a4:	add	fp, sp, #8
   170a8:	vpush	{d8-d9}
   170ac:	mov	r4, r0
   170b0:	ldr	r0, [pc, #120]	; 17130 <generate_code@@Base+0x90>
   170b4:	add	r1, pc, #100	; 0x64
   170b8:	vld1.64	{d8-d9}, [r1 :128]
   170bc:	add	r0, pc, r0
   170c0:	vld1.64	{d16-d17}, [r0 :128]
   170c4:	vadd.i64	q8, q8, q4
   170c8:	vst1.64	{d16-d17}, [r0 :128]
   170cc:	ldr	r0, [r4]
   170d0:	bl	16020 <build_ast@@Base>
   170d4:	mov	r5, r0
   170d8:	ldr	r0, [pc, #84]	; 17134 <generate_code@@Base+0x94>
   170dc:	mov	r1, #21
   170e0:	mov	r2, #1
   170e4:	add	r0, pc, r0
   170e8:	vld1.64	{d16-d17}, [r0 :128]
   170ec:	vadd.i64	q8, q8, q4
   170f0:	vst1.64	{d16-d17}, [r0 :128]
   170f4:	ldr	r3, [r4, #4]
   170f8:	ldr	r0, [pc, #56]	; 17138 <generate_code@@Base+0x98>
   170fc:	add	r0, pc, r0
   17100:	bl	11f6c <fwrite@plt>
   17104:	mov	r0, r4
   17108:	mov	r1, r5
   1710c:	bl	171c0 <__generate_code_for_main@@Base>
   17110:	mov	r0, r5
   17114:	vpop	{d8-d9}
   17118:	pop	{r4, r5, fp, lr}
   1711c:	b	1528c <free_node@@Base>
   17120:	andeq	r0, r0, r1
   17124:	andeq	r0, r0, r0
   17128:	andeq	r0, r0, r1
   1712c:	andeq	r0, r0, r0
   17130:	andeq	r6, r1, ip, lsl #28
   17134:	strdeq	r6, [r1], -r4
   17138:	andeq	r4, r0, r0, lsl #12
   1713c:	nop	{0}

00017140 <__generate_code@@Base>:
   17140:	push	{r4, r5, fp, lr}
   17144:	add	fp, sp, #8
   17148:	mov	r5, r0
   1714c:	ldr	r0, [pc, #92]	; 171b0 <__generate_code@@Base+0x70>
   17150:	mov	r4, r1
   17154:	add	r1, pc, #68	; 0x44
   17158:	mov	r2, #1
   1715c:	vld1.64	{d16-d17}, [r1 :128]
   17160:	mov	r1, #21
   17164:	add	r0, pc, r0
   17168:	vld1.64	{d18-d19}, [r0 :128]
   1716c:	vadd.i64	q8, q9, q8
   17170:	vst1.64	{d16-d17}, [r0 :128]
   17174:	ldr	r3, [r5, #4]
   17178:	ldr	r0, [pc, #52]	; 171b4 <__generate_code@@Base+0x74>
   1717c:	add	r0, pc, r0
   17180:	bl	11f6c <fwrite@plt>
   17184:	mov	r0, r5
   17188:	mov	r1, r4
   1718c:	pop	{r4, r5, fp, lr}
   17190:	b	171c0 <__generate_code_for_main@@Base>
   17194:	nop	{0}
   17198:	nop	{0}
   1719c:	nop	{0}
   171a0:	andeq	r0, r0, r1
   171a4:	andeq	r0, r0, r0
   171a8:	andeq	r0, r0, r1
   171ac:	andeq	r0, r0, r0
   171b0:	andeq	r6, r1, r4, ror sp
   171b4:	andeq	r4, r0, r0, lsl #11
   171b8:	nop	{0}
   171bc:	nop	{0}

000171c0 <__generate_code_for_main@@Base>:
   171c0:	push	{r4, r5, r6, r7, fp, lr}
   171c4:	add	fp, sp, #16
   171c8:	mov	r4, r0
   171cc:	ldr	r0, [pc, #220]	; 172b0 <__generate_code_for_main@@Base+0xf0>
   171d0:	mov	r5, r1
   171d4:	ldr	r1, [pc, #216]	; 172b4 <__generate_code_for_main@@Base+0xf4>
   171d8:	ldr	r1, [pc, r1]
   171dc:	add	r0, pc, r0
   171e0:	adds	r1, r1, #1
   171e4:	str	r1, [r0]
   171e8:	ldr	r1, [r0, #4]
   171ec:	adc	r1, r1, #0
   171f0:	str	r1, [r0, #4]
   171f4:	ldr	r1, [r5]
   171f8:	cmp	r1, #2
   171fc:	bne	17264 <__generate_code_for_main@@Base+0xa4>
   17200:	ldr	r1, [pc, #176]	; 172b8 <__generate_code_for_main@@Base+0xf8>
   17204:	add	r2, pc, #148	; 0x94
   17208:	ldrd	r6, [r0, #24]
   1720c:	vld1.64	{d16-d17}, [r2 :128]
   17210:	ldrd	r2, [r0, #8]
   17214:	add	r1, pc, r1
   17218:	vld1.64	{d18-d19}, [r1 :128]
   1721c:	adds	r2, r2, #1
   17220:	adc	r3, r3, #0
   17224:	adds	r6, r6, #1
   17228:	str	r6, [r0, #24]
   1722c:	strd	r2, [r0, #8]
   17230:	vadd.i64	q8, q9, q8
   17234:	vst1.64	{d16-d17}, [r1 :128]
   17238:	adc	r1, r7, #0
   1723c:	str	r1, [r0, #28]
   17240:	ldr	r2, [r5, #8]
   17244:	ldr	r0, [r4, #4]
   17248:	ldr	r1, [pc, #108]	; 172bc <__generate_code_for_main@@Base+0xfc>
   1724c:	add	r1, pc, r1
   17250:	bl	11ffc <fprintf@plt>
   17254:	ldr	r1, [r5, #12]
   17258:	mov	r0, r4
   1725c:	pop	{r4, r5, r6, r7, fp, lr}
   17260:	b	17340 <__generate_code_for_body@@Base>
   17264:	ldrd	r2, [r0, #16]
   17268:	mov	r1, #46	; 0x2e
   1726c:	adds	r2, r2, #1
   17270:	adc	r3, r3, #0
   17274:	strd	r2, [r0, #16]
   17278:	mov	r2, #1
   1727c:	ldr	r0, [pc, #60]	; 172c0 <__generate_code_for_main@@Base+0x100>
   17280:	ldr	r0, [pc, r0]
   17284:	ldr	r3, [r0]
   17288:	ldr	r0, [pc, #52]	; 172c4 <__generate_code_for_main@@Base+0x104>
   1728c:	add	r0, pc, r0
   17290:	bl	11f6c <fwrite@plt>
   17294:	mov	r0, #1
   17298:	bl	11fcc <exit@plt>
   1729c:	nop	{0}
   172a0:	andeq	r0, r0, r1
   172a4:	andeq	r0, r0, r0
   172a8:	andeq	r0, r0, r1
   172ac:	andeq	r0, r0, r0
   172b0:	andeq	r6, r1, ip, lsl #26
   172b4:	andeq	r6, r1, r0, lsl sp
   172b8:	strdeq	r6, [r1], -r4
   172bc:	strdeq	r4, [r0], -r5
   172c0:	andeq	r5, r1, ip, lsr lr
   172c4:	andeq	r4, r0, r6, lsl #9
   172c8:	nop	{0}
   172cc:	nop	{0}

000172d0 <__generate_code_for_function@@Base>:
   172d0:	push	{r4, r5, fp, lr}
   172d4:	add	fp, sp, #8
   172d8:	mov	r5, r0
   172dc:	ldr	r0, [pc, #76]	; 17330 <__generate_code_for_function@@Base+0x60>
   172e0:	mov	r4, r1
   172e4:	add	r1, pc, #52	; 0x34
   172e8:	vld1.64	{d16-d17}, [r1 :128]
   172ec:	add	r0, pc, r0
   172f0:	vld1.64	{d18-d19}, [r0 :128]
   172f4:	vadd.i64	q8, q9, q8
   172f8:	vst1.64	{d16-d17}, [r0 :128]
   172fc:	ldr	r2, [r4, #8]
   17300:	ldr	r0, [r5, #4]
   17304:	ldr	r1, [pc, #40]	; 17334 <__generate_code_for_function@@Base+0x64>
   17308:	add	r1, pc, r1
   1730c:	bl	11ffc <fprintf@plt>
   17310:	ldr	r1, [r4, #12]
   17314:	mov	r0, r5
   17318:	pop	{r4, r5, fp, lr}
   1731c:	b	17340 <__generate_code_for_body@@Base>
   17320:	andeq	r0, r0, r1
   17324:	andeq	r0, r0, r0
   17328:	andeq	r0, r0, r1
   1732c:	andeq	r0, r0, r0
   17330:	andeq	r6, r1, ip, lsl ip
   17334:	andeq	r4, r0, r9, lsr r4
   17338:	nop	{0}
   1733c:	nop	{0}

00017340 <__generate_code_for_body@@Base>:
   17340:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17344:	add	fp, sp, #24
   17348:	ldr	r5, [pc, #320]	; 17490 <__generate_code_for_body@@Base+0x150>
   1734c:	mov	r4, r0
   17350:	add	r0, pc, #296	; 0x128
   17354:	cmp	r1, #0
   17358:	vld1.64	{d16-d17}, [r0 :128]
   1735c:	add	r5, pc, r5
   17360:	vld1.64	{d18-d19}, [r5 :128]
   17364:	vadd.i64	q8, q9, q8
   17368:	vst1.64	{d16-d17}, [r5 :128]
   1736c:	beq	17420 <__generate_code_for_body@@Base+0xe0>
   17370:	add	r8, r5, #64	; 0x40
   17374:	add	r7, r5, #56	; 0x38
   17378:	b	173cc <__generate_code_for_body@@Base+0x8c>
   1737c:	ldr	r0, [r5, #48]	; 0x30
   17380:	ldr	r3, [r5, #52]	; 0x34
   17384:	adds	r0, r0, #1
   17388:	str	r0, [r5, #48]	; 0x30
   1738c:	adc	r3, r3, #0
   17390:	mov	r0, r4
   17394:	str	r3, [r5, #52]	; 0x34
   17398:	bl	1749c <__generate_code_for_if@@Base>
   1739c:	mov	r0, r8
   173a0:	ldrd	r2, [r0]
   173a4:	adds	r2, r2, #1
   173a8:	adc	r3, r3, #0
   173ac:	strd	r2, [r0]
   173b0:	ldrd	r0, [r5, #72]	; 0x48
   173b4:	adds	r0, r0, #1
   173b8:	adc	r1, r1, #0
   173bc:	cmp	r6, #0
   173c0:	strd	r0, [r5, #72]	; 0x48
   173c4:	mov	r1, r6
   173c8:	beq	17420 <__generate_code_for_body@@Base+0xe0>
   173cc:	ldr	r0, [r5, #16]
   173d0:	ldr	r3, [r5, #20]
   173d4:	adds	r0, r0, #1
   173d8:	adc	r3, r3, #0
   173dc:	str	r0, [r5, #16]
   173e0:	str	r3, [r5, #20]
   173e4:	ldm	r1, {r0, r6}
   173e8:	cmp	r0, #4
   173ec:	beq	1737c <__generate_code_for_body@@Base+0x3c>
   173f0:	cmp	r0, #3
   173f4:	bne	17448 <__generate_code_for_body@@Base+0x108>
   173f8:	ldr	r0, [r5, #40]	; 0x28
   173fc:	ldr	r3, [r5, #44]	; 0x2c
   17400:	adds	r0, r0, #1
   17404:	str	r0, [r5, #40]	; 0x28
   17408:	adc	r3, r3, #0
   1740c:	mov	r0, r4
   17410:	str	r3, [r5, #44]	; 0x2c
   17414:	bl	176d0 <__generate_code_for_return@@Base>
   17418:	mov	r0, r7
   1741c:	b	173a0 <__generate_code_for_body@@Base+0x60>
   17420:	ldrd	r0, [r5, #24]
   17424:	ldrd	r2, [r5, #80]	; 0x50
   17428:	adds	r0, r0, #1
   1742c:	adc	r1, r1, #0
   17430:	adds	r2, r2, #1
   17434:	str	r2, [r5, #80]	; 0x50
   17438:	strd	r0, [r5, #24]
   1743c:	adc	r0, r3, #0
   17440:	str	r0, [r5, #84]	; 0x54
   17444:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17448:	ldrd	r0, [r5, #32]
   1744c:	mov	r2, #1
   17450:	adds	r0, r0, #1
   17454:	adc	r1, r1, #0
   17458:	strd	r0, [r5, #32]
   1745c:	mov	r1, #52	; 0x34
   17460:	ldr	r0, [pc, #44]	; 17494 <__generate_code_for_body@@Base+0x154>
   17464:	ldr	r0, [pc, r0]
   17468:	ldr	r3, [r0]
   1746c:	ldr	r0, [pc, #36]	; 17498 <__generate_code_for_body@@Base+0x158>
   17470:	add	r0, pc, r0
   17474:	bl	11f6c <fwrite@plt>
   17478:	mov	r0, #1
   1747c:	bl	11fcc <exit@plt>
   17480:	andeq	r0, r0, r1
   17484:	andeq	r0, r0, r0
   17488:	andeq	r0, r0, r1
   1748c:	andeq	r0, r0, r0
   17490:			; <UNDEFINED> instruction: 0x00016bbc
   17494:	andeq	r5, r1, r8, asr ip
   17498:	ldrdeq	r4, [r0], -r7

0001749c <__generate_code_for_if@@Base>:
   1749c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   174a0:	add	fp, sp, #24
   174a4:	ldr	r9, [pc, #360]	; 17614 <__generate_code_for_if@@Base+0x178>
   174a8:	mov	r4, r0
   174ac:	ldr	r0, [pc, #356]	; 17618 <__generate_code_for_if@@Base+0x17c>
   174b0:	mov	r5, r1
   174b4:	ldr	r0, [pc, r0]
   174b8:	add	r9, pc, r9
   174bc:	adds	r0, r0, #1
   174c0:	str	r0, [r9]
   174c4:	ldr	r0, [r9, #4]
   174c8:	adc	r0, r0, #0
   174cc:	str	r0, [r9, #4]
   174d0:	ldr	r8, [r4, #8]
   174d4:	ldr	r7, [r4, #12]
   174d8:	adds	r0, r8, #1
   174dc:	adc	r1, r7, #0
   174e0:	strd	r0, [r4, #8]
   174e4:	ldr	r1, [r5, #8]
   174e8:	ldr	r6, [pc, #300]	; 1761c <__generate_code_for_if@@Base+0x180>
   174ec:	ldr	r0, [pc, #300]	; 17620 <__generate_code_for_if@@Base+0x184>
   174f0:	ldr	r0, [pc, r0]
   174f4:	add	r6, pc, r6
   174f8:	adds	r0, r0, #1
   174fc:	str	r0, [r6]
   17500:	ldr	r0, [r6, #4]
   17504:	adc	r0, r0, #0
   17508:	str	r0, [r6, #4]
   1750c:	ldr	r0, [r1, #16]
   17510:	cmp	r0, #8
   17514:	bne	17548 <__generate_code_for_if@@Base+0xac>
   17518:	ldr	r0, [r6, #8]
   1751c:	ldr	r3, [r6, #12]
   17520:	mov	r2, r8
   17524:	adds	r0, r0, #1
   17528:	adc	r3, r3, #0
   1752c:	str	r0, [r6, #8]
   17530:	mov	r0, r4
   17534:	str	r3, [r6, #12]
   17538:	mov	r3, r7
   1753c:	bl	17850 <__generate_code_for_unary_boolean_expression@@Base>
   17540:	add	r0, r6, #24
   17544:	b	17574 <__generate_code_for_if@@Base+0xd8>
   17548:	ldr	r0, [r6, #16]
   1754c:	ldr	r3, [r6, #20]
   17550:	mov	r2, r8
   17554:	adds	r0, r0, #1
   17558:	adc	r3, r3, #0
   1755c:	str	r0, [r6, #16]
   17560:	mov	r0, r4
   17564:	str	r3, [r6, #20]
   17568:	mov	r3, r7
   1756c:	bl	179c0 <__generate_code_for_binary_boolean_expression@@Base>
   17570:	add	r0, r6, #32
   17574:	ldrd	r2, [r0]
   17578:	adds	r2, r2, #1
   1757c:	adc	r3, r3, #0
   17580:	strd	r2, [r0]
   17584:	ldrd	r0, [r6, #40]	; 0x28
   17588:	adds	r0, r0, #1
   1758c:	adc	r1, r1, #0
   17590:	strd	r0, [r6, #40]	; 0x28
   17594:	mov	r0, r4
   17598:	ldr	r1, [r5, #12]
   1759c:	bl	17340 <__generate_code_for_body@@Base>
   175a0:	ldr	r0, [r4, #4]
   175a4:	ldr	r1, [pc, #120]	; 17624 <__generate_code_for_if@@Base+0x188>
   175a8:	mov	r2, r8
   175ac:	mov	r3, r7
   175b0:	add	r1, pc, r1
   175b4:	bl	11ffc <fprintf@plt>
   175b8:	ldr	r1, [r5, #16]
   175bc:	cmp	r1, #0
   175c0:	beq	175ec <__generate_code_for_if@@Base+0x150>
   175c4:	ldr	r0, [r9, #8]
   175c8:	ldr	r3, [r9, #12]
   175cc:	adds	r0, r0, #1
   175d0:	str	r0, [r9, #8]
   175d4:	adc	r3, r3, #0
   175d8:	mov	r0, r4
   175dc:	str	r3, [r9, #12]
   175e0:	bl	17340 <__generate_code_for_body@@Base>
   175e4:	add	r0, r9, #24
   175e8:	b	175f0 <__generate_code_for_if@@Base+0x154>
   175ec:	add	r0, r9, #16
   175f0:	ldrd	r2, [r0]
   175f4:	adds	r2, r2, #1
   175f8:	adc	r3, r3, #0
   175fc:	strd	r2, [r0]
   17600:	ldrd	r0, [r9, #32]
   17604:	adds	r0, r0, #1
   17608:	adc	r1, r1, #0
   1760c:	strd	r0, [r9, #32]
   17610:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17614:	andeq	r6, r1, r0, asr #21
   17618:	andeq	r6, r1, r4, asr #21
   1761c:			; <UNDEFINED> instruction: 0x00016ab4
   17620:			; <UNDEFINED> instruction: 0x00016ab8
   17624:	muleq	r0, r6, r1

00017628 <__generate_code_for_if_expression@@Base>:
   17628:	push	{r4, r5, r7, sl, fp, lr}
   1762c:	add	fp, sp, #16
   17630:	ldr	r5, [pc, #144]	; 176c8 <__generate_code_for_if_expression@@Base+0xa0>
   17634:	ldr	r4, [pc, #144]	; 176cc <__generate_code_for_if_expression@@Base+0xa4>
   17638:	ldr	r4, [pc, r4]
   1763c:	add	r5, pc, r5
   17640:	adds	r4, r4, #1
   17644:	str	r4, [r5]
   17648:	ldr	r4, [r5, #4]
   1764c:	adc	r4, r4, #0
   17650:	str	r4, [r5, #4]
   17654:	ldr	r4, [r1, #16]
   17658:	cmp	r4, #8
   1765c:	bne	17684 <__generate_code_for_if_expression@@Base+0x5c>
   17660:	ldr	r4, [r5, #8]
   17664:	ldr	r7, [r5, #12]
   17668:	adds	r4, r4, #1
   1766c:	adc	r7, r7, #0
   17670:	str	r4, [r5, #8]
   17674:	str	r7, [r5, #12]
   17678:	bl	17850 <__generate_code_for_unary_boolean_expression@@Base>
   1767c:	add	r0, r5, #24
   17680:	b	176a4 <__generate_code_for_if_expression@@Base+0x7c>
   17684:	ldr	r4, [r5, #16]
   17688:	ldr	r7, [r5, #20]
   1768c:	adds	r4, r4, #1
   17690:	adc	r7, r7, #0
   17694:	str	r4, [r5, #16]
   17698:	str	r7, [r5, #20]
   1769c:	bl	179c0 <__generate_code_for_binary_boolean_expression@@Base>
   176a0:	add	r0, r5, #32
   176a4:	ldrd	r2, [r0]
   176a8:	adds	r2, r2, #1
   176ac:	adc	r3, r3, #0
   176b0:	strd	r2, [r0]
   176b4:	ldrd	r0, [r5, #40]	; 0x28
   176b8:	adds	r0, r0, #1
   176bc:	adc	r1, r1, #0
   176c0:	strd	r0, [r5, #40]	; 0x28
   176c4:	pop	{r4, r5, r7, sl, fp, pc}
   176c8:	andeq	r6, r1, ip, ror #18
   176cc:	andeq	r6, r1, r0, ror r9

000176d0 <__generate_code_for_return@@Base>:
   176d0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   176d4:	add	fp, sp, #24
   176d8:	ldr	r5, [pc, #256]	; 177e0 <__generate_code_for_return@@Base+0x110>
   176dc:	mov	r4, r0
   176e0:	ldr	r0, [pc, #252]	; 177e4 <__generate_code_for_return@@Base+0x114>
   176e4:	mov	r2, #1
   176e8:	ldr	r0, [pc, r0]
   176ec:	add	r5, pc, r5
   176f0:	adds	r0, r0, #1
   176f4:	str	r0, [r5]
   176f8:	ldr	r0, [r5, #4]
   176fc:	adc	r0, r0, #0
   17700:	str	r0, [r5, #4]
   17704:	ldr	r6, [r1, #8]
   17708:	ldr	r3, [r4, #4]
   1770c:	ldr	r0, [pc, #212]	; 177e8 <__generate_code_for_return@@Base+0x118>
   17710:	mov	r1, #9
   17714:	add	r0, pc, r0
   17718:	bl	11f6c <fwrite@plt>
   1771c:	ldr	r0, [r6]
   17720:	cmp	r0, #1
   17724:	bne	17798 <__generate_code_for_return@@Base+0xc8>
   17728:	ldr	r0, [pc, #188]	; 177ec <__generate_code_for_return@@Base+0x11c>
   1772c:	add	r1, pc, #156	; 0x9c
   17730:	ldrd	r2, [r5, #8]
   17734:	ldrd	r8, [r5, #24]
   17738:	vld1.64	{d16-d17}, [r1 :128]
   1773c:	add	r0, pc, r0
   17740:	adds	r2, r2, #1
   17744:	vld1.64	{d18-d19}, [r0 :128]
   17748:	adc	r3, r3, #0
   1774c:	adds	r1, r8, #1
   17750:	str	r1, [r5, #24]
   17754:	strd	r2, [r5, #8]
   17758:	vadd.i64	q8, q9, q8
   1775c:	vst1.64	{d16-d17}, [r0 :128]
   17760:	adc	r0, r9, #0
   17764:	str	r0, [r5, #28]
   17768:	ldr	r2, [r6, #8]
   1776c:	ldr	r0, [r4, #4]
   17770:	ldr	r1, [pc, #120]	; 177f0 <__generate_code_for_return@@Base+0x120>
   17774:	add	r1, pc, r1
   17778:	bl	11ffc <fprintf@plt>
   1777c:	ldr	r3, [r4, #4]
   17780:	ldr	r0, [pc, #108]	; 177f4 <__generate_code_for_return@@Base+0x124>
   17784:	mov	r1, #8
   17788:	mov	r2, #1
   1778c:	add	r0, pc, r0
   17790:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   17794:	b	11f6c <fwrite@plt>
   17798:	ldrd	r0, [r5, #16]
   1779c:	mov	r2, #1
   177a0:	adds	r0, r0, #1
   177a4:	adc	r1, r1, #0
   177a8:	strd	r0, [r5, #16]
   177ac:	mov	r1, #37	; 0x25
   177b0:	ldr	r0, [pc, #64]	; 177f8 <__generate_code_for_return@@Base+0x128>
   177b4:	ldr	r0, [pc, r0]
   177b8:	ldr	r3, [r0]
   177bc:	ldr	r0, [pc, #56]	; 177fc <__generate_code_for_return@@Base+0x12c>
   177c0:	add	r0, pc, r0
   177c4:	bl	11f6c <fwrite@plt>
   177c8:	mov	r0, #1
   177cc:	bl	11fcc <exit@plt>
   177d0:	andeq	r0, r0, r1
   177d4:	andeq	r0, r0, r0
   177d8:	andeq	r0, r0, r1
   177dc:	andeq	r0, r0, r0
   177e0:	andeq	r6, r1, ip, ror #17
   177e4:	strdeq	r6, [r1], -r0
   177e8:	andeq	r4, r0, r1, asr #32
   177ec:			; <UNDEFINED> instruction: 0x000168bc
   177f0:	andeq	r4, r0, sl, lsl r0
   177f4:	strdeq	r3, [r0], -r9
   177f8:	andeq	r5, r1, r8, lsl #18
   177fc:	muleq	r0, pc, pc	; <UNPREDICTABLE>

00017800 <__generate_code_for_int@@Base>:
   17800:	ldr	r2, [pc, #56]	; 17840 <__generate_code_for_int@@Base+0x40>
   17804:	add	r3, pc, #36	; 0x24
   17808:	vld1.64	{d16-d17}, [r3 :128]
   1780c:	add	r2, pc, r2
   17810:	vld1.64	{d18-d19}, [r2 :128]
   17814:	vadd.i64	q8, q9, q8
   17818:	vst1.64	{d16-d17}, [r2 :128]
   1781c:	ldr	r2, [r1, #8]
   17820:	ldr	r0, [r0, #4]
   17824:	ldr	r1, [pc, #24]	; 17844 <__generate_code_for_int@@Base+0x44>
   17828:	add	r1, pc, r1
   1782c:	b	11ffc <fprintf@plt>
   17830:	andeq	r0, r0, r1
   17834:	andeq	r0, r0, r0
   17838:	andeq	r0, r0, r1
   1783c:	andeq	r0, r0, r0
   17840:	andeq	r6, r1, ip, ror #15
   17844:	andeq	r3, r0, r6, ror #30
   17848:	nop	{0}
   1784c:	nop	{0}

00017850 <__generate_code_for_unary_boolean_expression@@Base>:
   17850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17854:	add	fp, sp, #24
   17858:	ldr	r4, [pc, #304]	; 17990 <__generate_code_for_unary_boolean_expression@@Base+0x140>
   1785c:	mov	r6, r0
   17860:	ldr	r0, [pc, #300]	; 17994 <__generate_code_for_unary_boolean_expression@@Base+0x144>
   17864:	mov	r8, r3
   17868:	mov	r9, r2
   1786c:	mov	r7, r1
   17870:	mov	r2, #1
   17874:	ldr	r0, [pc, r0]
   17878:	add	r4, pc, r4
   1787c:	adds	r0, r0, #1
   17880:	str	r0, [r4]
   17884:	ldr	r0, [r4, #4]
   17888:	adc	r0, r0, #0
   1788c:	str	r0, [r4, #4]
   17890:	ldr	r5, [r1, #8]
   17894:	ldr	r3, [r6, #4]
   17898:	ldr	r0, [pc, #248]	; 17998 <__generate_code_for_unary_boolean_expression@@Base+0x148>
   1789c:	mov	r1, #11
   178a0:	add	r0, pc, r0
   178a4:	bl	11f6c <fwrite@plt>
   178a8:	ldr	r3, [r6, #4]
   178ac:	ldr	r0, [pc, #232]	; 1799c <__generate_code_for_unary_boolean_expression@@Base+0x14c>
   178b0:	mov	r1, #9
   178b4:	mov	r2, #1
   178b8:	add	r0, pc, r0
   178bc:	bl	11f6c <fwrite@plt>
   178c0:	ldr	r0, [pc, #216]	; 179a0 <__generate_code_for_unary_boolean_expression@@Base+0x150>
   178c4:	add	r1, pc, #180	; 0xb4
   178c8:	vld1.64	{d16-d17}, [r1 :128]
   178cc:	add	r0, pc, r0
   178d0:	vld1.64	{d18-d19}, [r0 :128]
   178d4:	vadd.i64	q8, q9, q8
   178d8:	vst1.64	{d16-d17}, [r0 :128]
   178dc:	ldr	r2, [r5, #8]
   178e0:	ldr	r0, [r6, #4]
   178e4:	ldr	r1, [pc, #184]	; 179a4 <__generate_code_for_unary_boolean_expression@@Base+0x154>
   178e8:	add	r1, pc, r1
   178ec:	bl	11ffc <fprintf@plt>
   178f0:	ldr	r0, [r7, #16]
   178f4:	cmp	r0, #8
   178f8:	bne	1793c <__generate_code_for_unary_boolean_expression@@Base+0xec>
   178fc:	ldrd	r0, [r4, #8]
   17900:	ldrd	r2, [r4, #24]
   17904:	adds	r0, r0, #1
   17908:	adc	r1, r1, #0
   1790c:	adds	r2, r2, #1
   17910:	str	r2, [r4, #24]
   17914:	strd	r0, [r4, #8]
   17918:	adc	r0, r3, #0
   1791c:	mov	r2, r9
   17920:	mov	r3, r8
   17924:	str	r0, [r4, #28]
   17928:	ldr	r0, [r6, #4]
   1792c:	ldr	r1, [pc, #116]	; 179a8 <__generate_code_for_unary_boolean_expression@@Base+0x158>
   17930:	add	r1, pc, r1
   17934:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17938:	b	11ffc <fprintf@plt>
   1793c:	ldrd	r0, [r4, #16]
   17940:	mov	r2, #1
   17944:	adds	r0, r0, #1
   17948:	adc	r1, r1, #0
   1794c:	strd	r0, [r4, #16]
   17950:	mov	r1, #31
   17954:	ldr	r0, [pc, #80]	; 179ac <__generate_code_for_unary_boolean_expression@@Base+0x15c>
   17958:	ldr	r0, [pc, r0]
   1795c:	ldr	r3, [r0]
   17960:	ldr	r0, [pc, #72]	; 179b0 <__generate_code_for_unary_boolean_expression@@Base+0x160>
   17964:	add	r0, pc, r0
   17968:	bl	11f6c <fwrite@plt>
   1796c:	mov	r0, #1
   17970:	bl	11fcc <exit@plt>
   17974:	nop	{0}
   17978:	nop	{0}
   1797c:	nop	{0}
   17980:	andeq	r0, r0, r1
   17984:	andeq	r0, r0, r0
   17988:	andeq	r0, r0, r1
   1798c:	andeq	r0, r0, r0
   17990:	muleq	r1, r0, r7
   17994:	muleq	r1, r4, r7
   17998:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   1799c:	ldrdeq	r3, [r0], -sl
   179a0:	andeq	r6, r1, ip, lsr #14
   179a4:	andeq	r3, r0, r6, lsr #29
   179a8:	andeq	r3, r0, ip, lsl #29
   179ac:	andeq	r5, r1, r4, ror #14
   179b0:			; <UNDEFINED> instruction: 0x00003eb7
   179b4:	nop	{0}
   179b8:	nop	{0}
   179bc:	nop	{0}

000179c0 <__generate_code_for_binary_boolean_expression@@Base>:
   179c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c4:	add	fp, sp, #28
   179c8:	sub	sp, sp, #4
   179cc:	vpush	{d8-d9}
   179d0:	sub	sp, sp, #8
   179d4:	str	r3, [sp, #4]
   179d8:	mov	r6, r0
   179dc:	mov	r9, r2
   179e0:	mov	r7, r1
   179e4:	mov	r2, #1
   179e8:	ldr	sl, [pc, #672]	; 17c90 <__generate_code_for_binary_boolean_expression@@Base+0x2d0>
   179ec:	ldr	r0, [pc, #672]	; 17c94 <__generate_code_for_binary_boolean_expression@@Base+0x2d4>
   179f0:	ldr	r0, [pc, r0]
   179f4:	add	sl, pc, sl
   179f8:	adds	r0, r0, #1
   179fc:	str	r0, [sl]
   17a00:	ldr	r0, [sl, #4]
   17a04:	adc	r0, r0, #0
   17a08:	str	r0, [sl, #4]
   17a0c:	ldr	r4, [r1, #8]
   17a10:	ldr	r5, [r1, #12]
   17a14:	ldr	r3, [r6, #4]
   17a18:	ldr	r0, [pc, #632]	; 17c98 <__generate_code_for_binary_boolean_expression@@Base+0x2d8>
   17a1c:	mov	r1, #9
   17a20:	add	r0, pc, r0
   17a24:	bl	11f6c <fwrite@plt>
   17a28:	add	r0, pc, #592	; 0x250
   17a2c:	ldr	r8, [pc, #616]	; 17c9c <__generate_code_for_binary_boolean_expression@@Base+0x2dc>
   17a30:	vld1.64	{d8-d9}, [r0 :128]
   17a34:	add	r8, pc, r8
   17a38:	vld1.64	{d16-d17}, [r8 :128]
   17a3c:	vadd.i64	q8, q8, q4
   17a40:	vst1.64	{d16-d17}, [r8 :128]
   17a44:	ldr	r2, [r4, #8]
   17a48:	ldr	r0, [r6, #4]
   17a4c:	ldr	r4, [pc, #588]	; 17ca0 <__generate_code_for_binary_boolean_expression@@Base+0x2e0>
   17a50:	add	r4, pc, r4
   17a54:	mov	r1, r4
   17a58:	bl	11ffc <fprintf@plt>
   17a5c:	ldr	r1, [r6, #4]
   17a60:	mov	r0, #10
   17a64:	bl	12098 <fputc@plt>
   17a68:	ldr	r3, [r6, #4]
   17a6c:	ldr	r0, [pc, #560]	; 17ca4 <__generate_code_for_binary_boolean_expression@@Base+0x2e4>
   17a70:	mov	r1, #9
   17a74:	mov	r2, #1
   17a78:	add	r0, pc, r0
   17a7c:	bl	11f6c <fwrite@plt>
   17a80:	vld1.64	{d16-d17}, [r8 :128]
   17a84:	mov	r1, r4
   17a88:	vadd.i64	q8, q8, q4
   17a8c:	vst1.64	{d16-d17}, [r8 :128]
   17a90:	ldr	r2, [r5, #8]
   17a94:	ldr	r0, [r6, #4]
   17a98:	bl	11ffc <fprintf@plt>
   17a9c:	ldr	r1, [r6, #4]
   17aa0:	mov	r0, #10
   17aa4:	bl	12098 <fputc@plt>
   17aa8:	ldr	r3, [r6, #4]
   17aac:	ldr	r0, [pc, #500]	; 17ca8 <__generate_code_for_binary_boolean_expression@@Base+0x2e8>
   17ab0:	mov	r1, #12
   17ab4:	mov	r2, #1
   17ab8:	add	r0, pc, r0
   17abc:	bl	11f6c <fwrite@plt>
   17ac0:	ldr	r1, [r7, #16]
   17ac4:	cmp	r1, #7
   17ac8:	bhi	17c48 <__generate_code_for_binary_boolean_expression@@Base+0x288>
   17acc:	add	r2, pc, #8
   17ad0:	add	r0, sl, #56	; 0x38
   17ad4:	ldr	r1, [r2, r1, lsl #2]
   17ad8:	add	pc, r2, r1
   17adc:	andeq	r0, r0, r0, lsr #32
   17ae0:	andeq	r0, r0, r0, lsl #1
   17ae4:	andeq	r0, r0, r0, asr r0
   17ae8:	andeq	r0, r0, r0, ror #1
   17aec:	andeq	r0, r0, ip, lsr r1
   17af0:	andeq	r0, r0, ip, lsr r1
   17af4:	andeq	r0, r0, r0, lsl r1
   17af8:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17afc:	ldrd	r0, [sl, #16]
   17b00:	mov	r2, r9
   17b04:	adds	r0, r0, #1
   17b08:	adc	r1, r1, #0
   17b0c:	strd	r0, [sl, #16]
   17b10:	ldr	r0, [r6, #4]
   17b14:	ldr	r1, [pc, #428]	; 17cc8 <__generate_code_for_binary_boolean_expression@@Base+0x308>
   17b18:	ldr	r3, [sp, #4]
   17b1c:	add	r1, pc, r1
   17b20:	bl	11ffc <fprintf@plt>
   17b24:	add	r0, sl, #80	; 0x50
   17b28:	b	17c18 <__generate_code_for_binary_boolean_expression@@Base+0x258>
   17b2c:	ldrd	r0, [sl, #32]
   17b30:	mov	r2, r9
   17b34:	adds	r0, r0, #1
   17b38:	adc	r1, r1, #0
   17b3c:	strd	r0, [sl, #32]
   17b40:	ldr	r0, [r6, #4]
   17b44:	ldr	r1, [pc, #356]	; 17cb0 <__generate_code_for_binary_boolean_expression@@Base+0x2f0>
   17b48:	ldr	r3, [sp, #4]
   17b4c:	add	r1, pc, r1
   17b50:	bl	11ffc <fprintf@plt>
   17b54:	add	r0, sl, #96	; 0x60
   17b58:	b	17c18 <__generate_code_for_binary_boolean_expression@@Base+0x258>
   17b5c:	ldrd	r0, [sl, #24]
   17b60:	mov	r2, r9
   17b64:	adds	r0, r0, #1
   17b68:	adc	r1, r1, #0
   17b6c:	strd	r0, [sl, #24]
   17b70:	ldr	r0, [r6, #4]
   17b74:	ldr	r1, [pc, #304]	; 17cac <__generate_code_for_binary_boolean_expression@@Base+0x2ec>
   17b78:	ldr	r3, [sp, #4]
   17b7c:	add	r1, pc, r1
   17b80:	bl	11ffc <fprintf@plt>
   17b84:	add	r0, sl, #88	; 0x58
   17b88:	b	17c18 <__generate_code_for_binary_boolean_expression@@Base+0x258>
   17b8c:	ldrd	r0, [sl, #72]	; 0x48
   17b90:	mov	r2, r9
   17b94:	adds	r0, r0, #1
   17b98:	adc	r1, r1, #0
   17b9c:	strd	r0, [sl, #72]	; 0x48
   17ba0:	ldr	r0, [r6, #4]
   17ba4:	ldr	r1, [pc, #272]	; 17cbc <__generate_code_for_binary_boolean_expression@@Base+0x2fc>
   17ba8:	ldr	r3, [sp, #4]
   17bac:	add	r1, pc, r1
   17bb0:	bl	11ffc <fprintf@plt>
   17bb4:	add	r0, sl, #120	; 0x78
   17bb8:	b	17c18 <__generate_code_for_binary_boolean_expression@@Base+0x258>
   17bbc:	ldrd	r0, [sl, #40]	; 0x28
   17bc0:	mov	r2, r9
   17bc4:	adds	r0, r0, #1
   17bc8:	adc	r1, r1, #0
   17bcc:	strd	r0, [sl, #40]	; 0x28
   17bd0:	ldr	r0, [r6, #4]
   17bd4:	ldr	r1, [pc, #216]	; 17cb4 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   17bd8:	ldr	r3, [sp, #4]
   17bdc:	add	r1, pc, r1
   17be0:	bl	11ffc <fprintf@plt>
   17be4:	add	r0, sl, #104	; 0x68
   17be8:	b	17c18 <__generate_code_for_binary_boolean_expression@@Base+0x258>
   17bec:	ldrd	r0, [sl, #64]	; 0x40
   17bf0:	mov	r2, r9
   17bf4:	adds	r0, r0, #1
   17bf8:	adc	r1, r1, #0
   17bfc:	strd	r0, [sl, #64]	; 0x40
   17c00:	ldr	r0, [r6, #4]
   17c04:	ldr	r1, [pc, #172]	; 17cb8 <__generate_code_for_binary_boolean_expression@@Base+0x2f8>
   17c08:	ldr	r3, [sp, #4]
   17c0c:	add	r1, pc, r1
   17c10:	bl	11ffc <fprintf@plt>
   17c14:	add	r0, sl, #112	; 0x70
   17c18:	ldrd	r2, [r0]
   17c1c:	adds	r2, r2, #1
   17c20:	adc	r3, r3, #0
   17c24:	strd	r2, [r0]
   17c28:	ldrd	r0, [sl, #128]	; 0x80
   17c2c:	adds	r0, r0, #1
   17c30:	adc	r1, r1, #0
   17c34:	strd	r0, [sl, #128]	; 0x80
   17c38:	sub	sp, fp, #48	; 0x30
   17c3c:	vpop	{d8-d9}
   17c40:	add	sp, sp, #4
   17c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c48:	ldrd	r0, [sl, #8]
   17c4c:	mov	r2, #1
   17c50:	adds	r0, r0, #1
   17c54:	adc	r1, r1, #0
   17c58:	strd	r0, [sl, #8]
   17c5c:	mov	r1, #31
   17c60:	ldr	r0, [pc, #88]	; 17cc0 <__generate_code_for_binary_boolean_expression@@Base+0x300>
   17c64:	ldr	r0, [pc, r0]
   17c68:	ldr	r3, [r0]
   17c6c:	ldr	r0, [pc, #80]	; 17cc4 <__generate_code_for_binary_boolean_expression@@Base+0x304>
   17c70:	add	r0, pc, r0
   17c74:	bl	11f6c <fwrite@plt>
   17c78:	mov	r0, #1
   17c7c:	bl	11fcc <exit@plt>
   17c80:	andeq	r0, r0, r1
   17c84:	andeq	r0, r0, r0
   17c88:	andeq	r0, r0, r1
   17c8c:	andeq	r0, r0, r0
   17c90:	andeq	r6, r1, r4, lsr r6
   17c94:	andeq	r6, r1, r8, lsr r6
   17c98:	andeq	r3, r0, r5, lsr sp
   17c9c:	andeq	r6, r1, r4, asr #11
   17ca0:	andeq	r3, r0, lr, lsr sp
   17ca4:	andeq	r3, r0, sl, lsl sp
   17ca8:	andeq	r3, r0, r4, ror #25
   17cac:	andeq	r3, r0, r0, asr #24
   17cb0:	andeq	r3, r0, r3, lsl #25
   17cb4:	andeq	r3, r0, r6, lsl #24
   17cb8:	andeq	r3, r0, r9, ror #23
   17cbc:	andeq	r3, r0, ip, asr ip
   17cc0:	andeq	r5, r1, r8, asr r4
   17cc4:	andeq	r3, r0, fp, lsr #23
   17cc8:	andeq	r3, r0, sp, lsl #25
   17ccc:	push	{r4, r5, r6, lr}
   17cd0:	sub	sp, sp, #8
   17cd4:	ldr	r0, [pc, #112]	; 17d4c <__generate_code_for_binary_boolean_expression@@Base+0x38c>
   17cd8:	ldr	r1, [pc, #112]	; 17d50 <__generate_code_for_binary_boolean_expression@@Base+0x390>
   17cdc:	movw	r2, #35541	; 0x8ad5
   17ce0:	movt	r2, #2116	; 0x844
   17ce4:	add	r0, pc, r0
   17ce8:	add	r1, pc, r1
   17cec:	bl	17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x500>
   17cf0:	ldr	r0, [pc, #92]	; 17d54 <__generate_code_for_binary_boolean_expression@@Base+0x394>
   17cf4:	ldr	r6, [pc, #92]	; 17d58 <__generate_code_for_binary_boolean_expression@@Base+0x398>
   17cf8:	mov	r5, #0
   17cfc:	add	r0, pc, r0
   17d00:	add	r6, pc, r6
   17d04:	add	r4, r0, #4
   17d08:	mov	r3, r6
   17d0c:	ldr	r0, [r3, r5]!
   17d10:	ldr	r1, [r3, #16]
   17d14:	str	r1, [sp]
   17d18:	ldmib	r3, {r1, r2}
   17d1c:	ldrb	r3, [r3, #12]
   17d20:	bl	185e0 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   17d24:	ldrd	r0, [r4, #-4]
   17d28:	bl	18e94 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   17d2c:	add	r5, r5, #20
   17d30:	add	r4, r4, #8
   17d34:	cmp	r5, #260	; 0x104
   17d38:	bne	17d08 <__generate_code_for_binary_boolean_expression@@Base+0x348>
   17d3c:	bl	1961c <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   17d40:	add	sp, sp, #8
   17d44:	pop	{r4, r5, r6, lr}
   17d48:	b	1a388 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   17d4c:	muleq	r0, r8, fp
   17d50:	andeq	r3, r0, r8, lsr #6
   17d54:	muleq	r1, ip, r1
   17d58:	andeq	r5, r1, r8, lsl #1
   17d5c:	push	{fp, lr}
   17d60:	bl	17ccc <__generate_code_for_binary_boolean_expression@@Base+0x30c>
   17d64:	ldr	r0, [pc, #260]	; 17e70 <__generate_code_for_binary_boolean_expression@@Base+0x4b0>
   17d68:	vmov.i32	q8, #0	; 0x00000000
   17d6c:	mov	ip, #0
   17d70:	add	r0, pc, r0
   17d74:	vst1.64	{d16-d17}, [r0 :128]
   17d78:	ldr	r0, [pc, #244]	; 17e74 <__generate_code_for_binary_boolean_expression@@Base+0x4b4>
   17d7c:	add	r0, pc, r0
   17d80:	vst1.64	{d16-d17}, [r0 :128]
   17d84:	ldr	r0, [pc, #236]	; 17e78 <__generate_code_for_binary_boolean_expression@@Base+0x4b8>
   17d88:	add	r0, pc, r0
   17d8c:	vst1.64	{d16-d17}, [r0 :128]
   17d90:	ldr	r0, [pc, #228]	; 17e7c <__generate_code_for_binary_boolean_expression@@Base+0x4bc>
   17d94:	add	r0, pc, r0
   17d98:	vst1.64	{d16-d17}, [r0 :128]
   17d9c:	ldr	r0, [pc, #220]	; 17e80 <__generate_code_for_binary_boolean_expression@@Base+0x4c0>
   17da0:	add	r0, pc, r0
   17da4:	vst1.64	{d16-d17}, [r0 :128]
   17da8:	ldr	r0, [pc, #212]	; 17e84 <__generate_code_for_binary_boolean_expression@@Base+0x4c4>
   17dac:	add	r0, pc, r0
   17db0:	add	r1, r0, #16
   17db4:	str	ip, [r0, #80]	; 0x50
   17db8:	vst1.64	{d16-d17}, [r1 :128]
   17dbc:	add	r1, r0, #32
   17dc0:	vst1.64	{d16-d17}, [r1 :128]
   17dc4:	add	r1, r0, #48	; 0x30
   17dc8:	vst1.64	{d16-d17}, [r1 :128]
   17dcc:	add	r1, r0, #64	; 0x40
   17dd0:	vst1.64	{d16-d17}, [r1 :128]
   17dd4:	ldr	r2, [pc, #172]	; 17e88 <__generate_code_for_binary_boolean_expression@@Base+0x4c8>
   17dd8:	add	r2, pc, r2
   17ddc:	add	r3, r2, #16
   17de0:	str	ip, [r2, #32]
   17de4:	vst1.64	{d16-d17}, [r3 :128]
   17de8:	ldr	r3, [pc, #156]	; 17e8c <__generate_code_for_binary_boolean_expression@@Base+0x4cc>
   17dec:	add	r3, pc, r3
   17df0:	add	r1, r3, #16
   17df4:	vst1.64	{d16-d17}, [r1 :128]
   17df8:	ldr	r1, [pc, #144]	; 17e90 <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   17dfc:	add	r1, pc, r1
   17e00:	vst1.64	{d16-d17}, [r1 :128]!
   17e04:	vst1.64	{d16-d17}, [r1 :128]
   17e08:	mov	r1, #84	; 0x54
   17e0c:	vst1.64	{d16-d17}, [r0 :128], r1
   17e10:	mov	r1, #0
   17e14:	str	ip, [r0]
   17e18:	mov	r0, #36	; 0x24
   17e1c:	vst1.64	{d16-d17}, [r2 :128], r0
   17e20:	mov	r0, #32
   17e24:	vst1.64	{d16-d17}, [r3 :128], r0
   17e28:	str	ip, [r2]
   17e2c:	mov	r2, #136	; 0x88
   17e30:	vst1.64	{d16-d17}, [r3 :128]
   17e34:	ldr	r0, [pc, #88]	; 17e94 <__generate_code_for_binary_boolean_expression@@Base+0x4d4>
   17e38:	add	r0, pc, r0
   17e3c:	vst1.64	{d16-d17}, [r0 :128]!
   17e40:	vst1.64	{d16-d17}, [r0 :128]
   17e44:	ldr	r0, [pc, #76]	; 17e98 <__generate_code_for_binary_boolean_expression@@Base+0x4d8>
   17e48:	add	r0, pc, r0
   17e4c:	vst1.64	{d16-d17}, [r0 :128]
   17e50:	ldr	r0, [pc, #68]	; 17e9c <__generate_code_for_binary_boolean_expression@@Base+0x4dc>
   17e54:	add	r0, pc, r0
   17e58:	vst1.64	{d16-d17}, [r0 :128]!
   17e5c:	vst1.64	{d16-d17}, [r0 :128]
   17e60:	ldr	r0, [pc, #56]	; 17ea0 <__generate_code_for_binary_boolean_expression@@Base+0x4e0>
   17e64:	add	r0, pc, r0
   17e68:	bl	1202c <memset@plt>
   17e6c:	pop	{fp, pc}
   17e70:	andeq	r6, r1, r8, asr #2
   17e74:	andeq	r6, r1, ip, lsr #2
   17e78:	andeq	r6, r1, r0, asr #2
   17e7c:	andeq	r6, r1, r4, asr #2
   17e80:	andeq	r6, r1, r8, ror #2
   17e84:	andeq	r6, r1, ip, ror #2
   17e88:	andeq	r6, r1, r0, lsr #3
   17e8c:			; <UNDEFINED> instruction: 0x000161bc
   17e90:	andeq	r6, r1, ip, ror #1
   17e94:	andeq	r6, r1, r0, lsr #3
   17e98:			; <UNDEFINED> instruction: 0x000161b0
   17e9c:			; <UNDEFINED> instruction: 0x000161b4
   17ea0:	andeq	r6, r1, r4, asr #3
   17ea4:	ldr	r0, [pc, #12]	; 17eb8 <__generate_code_for_binary_boolean_expression@@Base+0x4f8>
   17ea8:	ldr	r1, [pc, #12]	; 17ebc <__generate_code_for_binary_boolean_expression@@Base+0x4fc>
   17eac:	add	r0, pc, r0
   17eb0:	add	r1, pc, r1
   17eb4:	b	1a83c <__gcov_flush@@Base+0xb8>
   17eb8:			; <UNDEFINED> instruction: 0xfffffe18
   17ebc:			; <UNDEFINED> instruction: 0xfffffea4
   17ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec4:	add	fp, sp, #28
   17ec8:	sub	sp, sp, #36	; 0x24
   17ecc:	mov	r9, r1
   17ed0:	mov	r6, r0
   17ed4:	add	r0, sp, #28
   17ed8:	add	r1, sp, #32
   17edc:	mov	r8, r2
   17ee0:	bl	1acd4 <__gcov_flush@@Base+0x550>
   17ee4:	cmp	r0, #0
   17ee8:	beq	17f2c <__generate_code_for_binary_boolean_expression@@Base+0x56c>
   17eec:	mov	r4, r0
   17ef0:	mov	r0, r6
   17ef4:	ldr	r5, [sp, #32]
   17ef8:	bl	11fd8 <strlen@plt>
   17efc:	add	r0, r5, r0
   17f00:	add	r0, r0, #2
   17f04:	bl	11f90 <malloc@plt>
   17f08:	mov	r7, r0
   17f0c:	ldr	r0, [sp, #28]
   17f10:	mov	r1, r6
   17f14:	mov	r2, r4
   17f18:	str	r0, [sp]
   17f1c:	mov	r0, r7
   17f20:	mov	r3, r5
   17f24:	bl	1ad68 <__gcov_flush@@Base+0x5e4>
   17f28:	b	17f38 <__generate_code_for_binary_boolean_expression@@Base+0x578>
   17f2c:	mov	r0, r6
   17f30:	bl	11f54 <strdup@plt>
   17f34:	mov	r7, r0
   17f38:	ldr	r0, [pc, #1492]	; 18514 <__generate_code_for_binary_boolean_expression@@Base+0xb54>
   17f3c:	ldr	r6, [pc, #1492]	; 18518 <__generate_code_for_binary_boolean_expression@@Base+0xb58>
   17f40:	mov	r1, #2
   17f44:	add	r0, pc, r0
   17f48:	add	r6, pc, r6
   17f4c:	str	r7, [r0]
   17f50:	mov	r0, r7
   17f54:	mov	r5, #0
   17f58:	strb	r5, [r6]
   17f5c:	bl	11f78 <open64@plt>
   17f60:	ldr	r4, [pc, #1460]	; 1851c <__generate_code_for_binary_boolean_expression@@Base+0xb5c>
   17f64:	cmn	r0, #1
   17f68:	add	r4, pc, r4
   17f6c:	str	r0, [r4]
   17f70:	beq	17f80 <__generate_code_for_binary_boolean_expression@@Base+0x5c0>
   17f74:	ldr	r6, [pc, #1444]	; 18520 <__generate_code_for_binary_boolean_expression@@Base+0xb60>
   17f78:	add	r6, pc, r6
   17f7c:	b	17fdc <__generate_code_for_binary_boolean_expression@@Base+0x61c>
   17f80:	mov	r0, #1
   17f84:	strb	r0, [r6]
   17f88:	ldr	r0, [pc, #1488]	; 18560 <__generate_code_for_binary_boolean_expression@@Base+0xba0>
   17f8c:	mov	r1, #66	; 0x42
   17f90:	mov	r2, #420	; 0x1a4
   17f94:	ldr	r0, [pc, r0]
   17f98:	bl	11f78 <open64@plt>
   17f9c:	ldr	r6, [pc, #1472]	; 18564 <__generate_code_for_binary_boolean_expression@@Base+0xba4>
   17fa0:	cmn	r0, #1
   17fa4:	str	r0, [r4]
   17fa8:	add	r6, pc, r6
   17fac:	bne	17fdc <__generate_code_for_binary_boolean_expression@@Base+0x61c>
   17fb0:	ldr	r0, [pc, #1456]	; 18568 <__generate_code_for_binary_boolean_expression@@Base+0xba8>
   17fb4:	ldr	r0, [pc, r0]
   17fb8:	bl	1a94c <__gcov_flush@@Base+0x1c8>
   17fbc:	ldr	r0, [pc, #1448]	; 1856c <__generate_code_for_binary_boolean_expression@@Base+0xbac>
   17fc0:	mov	r1, #66	; 0x42
   17fc4:	mov	r2, #420	; 0x1a4
   17fc8:	ldr	r0, [pc, r0]
   17fcc:	bl	11f78 <open64@plt>
   17fd0:	cmn	r0, #1
   17fd4:	str	r0, [r4]
   17fd8:	beq	184cc <__generate_code_for_binary_boolean_expression@@Base+0xb0c>
   17fdc:	str	r9, [sp, #20]
   17fe0:	str	r8, [sp, #24]
   17fe4:	bl	1aa10 <__gcov_flush@@Base+0x28c>
   17fe8:	ldr	r0, [pc, #1332]	; 18524 <__generate_code_for_binary_boolean_expression@@Base+0xb64>
   17fec:	mov	r1, r6
   17ff0:	ldr	r0, [pc, r0]
   17ff4:	bl	11ee8 <fdopen@plt>
   17ff8:	ldr	r7, [pc, #1320]	; 18528 <__generate_code_for_binary_boolean_expression@@Base+0xb68>
   17ffc:	ldr	r9, [pc, #1320]	; 1852c <__generate_code_for_binary_boolean_expression@@Base+0xb6c>
   18000:	ldr	r1, [pc, #1320]	; 18530 <__generate_code_for_binary_boolean_expression@@Base+0xb70>
   18004:	ldr	sl, [pc, #1320]	; 18534 <__generate_code_for_binary_boolean_expression@@Base+0xb74>
   18008:	add	r7, pc, r7
   1800c:	add	r9, pc, r9
   18010:	add	r1, pc, r1
   18014:	add	sl, pc, sl
   18018:	str	r5, [r7]
   1801c:	str	r5, [r7, #4]
   18020:	str	r5, [r9]
   18024:	str	r5, [r9, #4]
   18028:	str	r0, [r1]
   1802c:	str	r5, [sl]
   18030:	ldr	r6, [pc, #1280]	; 18538 <__generate_code_for_binary_boolean_expression@@Base+0xb78>
   18034:	mov	r4, #131072	; 0x20000
   18038:	add	r6, pc, r6
   1803c:	ldrb	r1, [r6]
   18040:	cmp	r1, #0
   18044:	beq	18138 <__generate_code_for_binary_boolean_expression@@Base+0x778>
   18048:	mov	r0, r4
   1804c:	bl	11f90 <malloc@plt>
   18050:	mov	r8, r0
   18054:	strd	r4, [r7]
   18058:	str	r0, [sl]
   1805c:	mov	r0, r8
   18060:	mov	r1, #0
   18064:	mov	r2, #131072	; 0x20000
   18068:	bl	1202c <memset@plt>
   1806c:	ldr	r0, [r9, #4]
   18070:	ldr	r1, [pc, #1284]	; 1857c <__generate_code_for_binary_boolean_expression@@Base+0xbbc>
   18074:	mov	r7, #7
   18078:	orr	r7, r7, #131072	; 0x20000
   1807c:	ldr	r1, [pc, r1]
   18080:	ldr	sl, [pc, #1272]	; 18580 <__generate_code_for_binary_boolean_expression@@Base+0xbc0>
   18084:	adds	r2, r1, #4
   18088:	add	sl, pc, sl
   1808c:	adc	r3, r0, #0
   18090:	ldr	r5, [sl, #4]
   18094:	ldr	r4, [pc, #1256]	; 18584 <__generate_code_for_binary_boolean_expression@@Base+0xbc4>
   18098:	ldr	r4, [pc, r4]
   1809c:	subs	r2, r4, r2
   180a0:	sbcs	r2, r5, r3
   180a4:	bcs	181b8 <__generate_code_for_binary_boolean_expression@@Base+0x7f8>
   180a8:	adds	r1, r7, r1
   180ac:	adc	r0, r0, #0
   180b0:	subs	r1, r1, #4
   180b4:	sbc	r0, r0, #0
   180b8:	mvn	r2, #0
   180bc:	and	r5, r0, r2
   180c0:	mov	r0, #16646144	; 0xfe0000
   180c4:	orr	r0, r0, #-16777216	; 0xff000000
   180c8:	and	r4, r1, r0
   180cc:	mov	r0, r8
   180d0:	mov	r1, r4
   180d4:	bl	11f60 <realloc@plt>
   180d8:	ldr	r1, [pc, #1068]	; 1850c <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   180dc:	strd	r4, [sl]
   180e0:	mov	r3, r0
   180e4:	mov	r7, r1
   180e8:	lsr	r2, r1, #24
   180ec:	ldr	r1, [pc, #1176]	; 1858c <__generate_code_for_binary_boolean_expression@@Base+0xbcc>
   180f0:	ldrb	r6, [r6]
   180f4:	lsr	r4, r7, #16
   180f8:	add	r1, pc, r1
   180fc:	str	r0, [r1]
   18100:	ldr	r1, [r9, #4]
   18104:	ldr	r5, [pc, #1156]	; 18590 <__generate_code_for_binary_boolean_expression@@Base+0xbd0>
   18108:	ldr	r5, [pc, r5]
   1810c:	strb	r7, [r3, r5]!
   18110:	strb	r2, [r3, #3]
   18114:	lsr	r2, r7, #8
   18118:	strb	r2, [r3, #1]
   1811c:	adds	r2, r5, #4
   18120:	adc	ip, r1, #0
   18124:	cmp	r6, #1
   18128:	strb	r4, [r3, #2]
   1812c:	stm	r9, {r2, ip}
   18130:	beq	181fc <__generate_code_for_binary_boolean_expression@@Base+0x83c>
   18134:	b	183b4 <__generate_code_for_binary_boolean_expression@@Base+0x9f4>
   18138:	mov	r1, #0
   1813c:	mov	r2, #2
   18140:	mov	r8, #0
   18144:	bl	120bc <fseek@plt>
   18148:	ldr	r0, [pc, #1004]	; 1853c <__generate_code_for_binary_boolean_expression@@Base+0xb7c>
   1814c:	ldr	r0, [pc, r0]
   18150:	bl	11f3c <ftell@plt>
   18154:	mov	r2, r0
   18158:	ldr	r0, [pc, #992]	; 18540 <__generate_code_for_binary_boolean_expression@@Base+0xb80>
   1815c:	asr	r3, r2, #31
   18160:	add	r0, pc, r0
   18164:	cmp	r2, #0
   18168:	strd	r2, [r0]
   1816c:	beq	1845c <__generate_code_for_binary_boolean_expression@@Base+0xa9c>
   18170:	ldr	r0, [pc, #972]	; 18544 <__generate_code_for_binary_boolean_expression@@Base+0xb84>
   18174:	mov	r1, r2
   18178:	mov	r2, #3
   1817c:	mov	r3, #1
   18180:	ldr	r0, [pc, r0]
   18184:	str	r8, [sp, #8]
   18188:	str	r8, [sp, #12]
   1818c:	str	r0, [sp]
   18190:	mov	r0, #0
   18194:	bl	11f30 <mmap64@plt>
   18198:	cmn	r0, #1
   1819c:	str	r0, [sl]
   181a0:	beq	18424 <__generate_code_for_binary_boolean_expression@@Base+0xa64>
   181a4:	ldrb	r1, [r6]
   181a8:	cmp	r1, #0
   181ac:	beq	18374 <__generate_code_for_binary_boolean_expression@@Base+0x9b4>
   181b0:	mov	r8, r0
   181b4:	b	1806c <__generate_code_for_binary_boolean_expression@@Base+0x6ac>
   181b8:	ldr	r1, [r9, #4]
   181bc:	ldr	r5, [pc, #964]	; 18588 <__generate_code_for_binary_boolean_expression@@Base+0xbc8>
   181c0:	ldr	r0, [pc, #836]	; 1850c <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   181c4:	mov	r6, r8
   181c8:	ldr	r5, [pc, r5]
   181cc:	mov	r7, r0
   181d0:	lsr	r2, r7, #16
   181d4:	strb	r7, [r6, r5]!
   181d8:	lsr	r0, r0, #24
   181dc:	lsr	r3, r7, #8
   181e0:	strb	r2, [r6, #2]
   181e4:	adds	r2, r5, #4
   181e8:	strb	r0, [r6, #3]
   181ec:	strb	r3, [r6, #1]
   181f0:	adc	ip, r1, #0
   181f4:	stm	r9, {r2, ip}
   181f8:	mov	r0, r8
   181fc:	ldr	r7, [sl, #4]
   18200:	ldr	r3, [pc, #908]	; 18594 <__generate_code_for_binary_boolean_expression@@Base+0xbd4>
   18204:	adds	r6, r5, #8
   18208:	adc	r4, r1, #0
   1820c:	ldr	r3, [pc, r3]
   18210:	subs	r3, r3, r6
   18214:	sbcs	r3, r7, r4
   18218:	bcs	182bc <__generate_code_for_binary_boolean_expression@@Base+0x8fc>
   1821c:	mov	r2, #7
   18220:	orr	r2, r2, #131072	; 0x20000
   18224:	adds	r2, r5, r2
   18228:	adc	r1, r1, #0
   1822c:	mvn	r3, #0
   18230:	and	r5, r1, r3
   18234:	mov	r1, #16646144	; 0xfe0000
   18238:	orr	r1, r1, #-16777216	; 0xff000000
   1823c:	and	r4, r2, r1
   18240:	mov	r1, r4
   18244:	bl	11f60 <realloc@plt>
   18248:	strd	r4, [sl]
   1824c:	ldr	r1, [pc, #840]	; 1859c <__generate_code_for_binary_boolean_expression@@Base+0xbdc>
   18250:	mov	r4, r0
   18254:	mov	lr, r9
   18258:	add	r1, pc, r1
   1825c:	str	r0, [r1]
   18260:	ldr	r1, [pc, #824]	; 185a0 <__generate_code_for_binary_boolean_expression@@Base+0xbe0>
   18264:	ldr	r2, [sp, #20]
   18268:	ldr	ip, [r9, #4]
   1826c:	add	r1, pc, r1
   18270:	ldrb	r3, [r1]
   18274:	ldrb	r1, [r2]
   18278:	ldrb	r7, [r2, #1]
   1827c:	ldrb	r6, [r2, #2]
   18280:	ldrb	r5, [r2, #3]
   18284:	ldr	r2, [pc, #792]	; 185a4 <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   18288:	ldr	r2, [pc, r2]
   1828c:	strb	r1, [r4, r2]!
   18290:	strb	r5, [r4, #3]
   18294:	ldr	r5, [sp, #24]
   18298:	strb	r6, [r4, #2]
   1829c:	adds	r6, r2, #4
   182a0:	adc	r1, ip, #0
   182a4:	cmp	r3, #1
   182a8:	str	r6, [lr]
   182ac:	strb	r7, [r4, #1]
   182b0:	str	r1, [lr, #4]
   182b4:	beq	182fc <__generate_code_for_binary_boolean_expression@@Base+0x93c>
   182b8:	b	183f4 <__generate_code_for_binary_boolean_expression@@Base+0xa34>
   182bc:	ldr	r6, [sp, #20]
   182c0:	mov	r5, r0
   182c4:	ldrb	r1, [r6]
   182c8:	ldrb	r3, [r6, #1]
   182cc:	ldrb	r7, [r6, #2]
   182d0:	ldrb	r6, [r6, #3]
   182d4:	strb	r1, [r5, r2]!
   182d8:	strb	r6, [r5, #3]
   182dc:	strb	r3, [r5, #1]
   182e0:	adds	r6, r2, #4
   182e4:	mov	r3, r9
   182e8:	adc	r1, ip, #0
   182ec:	strb	r7, [r5, #2]
   182f0:	str	r6, [r3]
   182f4:	str	r1, [r3, #4]
   182f8:	ldr	r5, [sp, #24]
   182fc:	ldr	r7, [sl, #4]
   18300:	ldr	r4, [pc, #672]	; 185a8 <__generate_code_for_binary_boolean_expression@@Base+0xbe8>
   18304:	adds	r3, r2, #8
   18308:	adc	lr, ip, #0
   1830c:	ldr	r4, [pc, r4]
   18310:	subs	r3, r4, r3
   18314:	sbcs	r3, r7, lr
   18318:	bcs	1836c <__generate_code_for_binary_boolean_expression@@Base+0x9ac>
   1831c:	mov	r1, #7
   18320:	orr	r1, r1, #131072	; 0x20000
   18324:	adds	r1, r2, r1
   18328:	adc	r2, ip, #0
   1832c:	mvn	r3, #0
   18330:	and	r7, r2, r3
   18334:	mov	r2, #16646144	; 0xfe0000
   18338:	orr	r2, r2, #-16777216	; 0xff000000
   1833c:	and	r4, r1, r2
   18340:	mov	r1, r4
   18344:	bl	11f60 <realloc@plt>
   18348:	stm	sl, {r4, r7}
   1834c:	ldr	r1, [r9, #4]
   18350:	ldr	r2, [pc, #596]	; 185ac <__generate_code_for_binary_boolean_expression@@Base+0xbec>
   18354:	mov	lr, r9
   18358:	add	r2, pc, r2
   1835c:	str	r0, [r2]
   18360:	ldr	r6, [pc, #584]	; 185b0 <__generate_code_for_binary_boolean_expression@@Base+0xbf0>
   18364:	ldr	r6, [pc, r6]
   18368:	b	183f4 <__generate_code_for_binary_boolean_expression@@Base+0xa34>
   1836c:	mov	lr, r9
   18370:	b	183f4 <__generate_code_for_binary_boolean_expression@@Base+0xa34>
   18374:	ldr	r6, [r9, #4]
   18378:	ldr	r5, [pc, #536]	; 18598 <__generate_code_for_binary_boolean_expression@@Base+0xbd8>
   1837c:	ldr	r1, [pc, #392]	; 1850c <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   18380:	mov	r4, r0
   18384:	ldr	r5, [pc, r5]
   18388:	mov	r7, r1
   1838c:	lsr	r2, r7, #16
   18390:	strb	r7, [r4, r5]!
   18394:	lsr	r1, r1, #24
   18398:	strb	r2, [r4, #2]
   1839c:	adds	r2, r5, #4
   183a0:	lsr	r3, r7, #8
   183a4:	adc	ip, r6, #0
   183a8:	strb	r1, [r4, #3]
   183ac:	strb	r3, [r4, #1]
   183b0:	stm	r9, {r2, ip}
   183b4:	ldr	r4, [sp, #20]
   183b8:	mov	r5, r0
   183bc:	mov	lr, r9
   183c0:	ldrb	r1, [r4]
   183c4:	ldrb	r6, [r4, #3]
   183c8:	ldrb	r3, [r4, #1]
   183cc:	ldrb	r7, [r4, #2]
   183d0:	strb	r1, [r5, r2]!
   183d4:	strb	r6, [r5, #3]
   183d8:	adds	r6, r2, #4
   183dc:	adc	r1, ip, #0
   183e0:	strb	r7, [r5, #2]
   183e4:	strb	r3, [r5, #1]
   183e8:	str	r6, [lr]
   183ec:	str	r1, [lr, #4]
   183f0:	ldr	r5, [sp, #24]
   183f4:	lsr	r2, r5, #24
   183f8:	strb	r5, [r0, r6]!
   183fc:	lsr	r3, r5, #16
   18400:	lsr	r7, r5, #8
   18404:	strb	r2, [r0, #3]
   18408:	strb	r3, [r0, #2]
   1840c:	strb	r7, [r0, #1]
   18410:	adds	r0, r6, #4
   18414:	adc	r1, r1, #0
   18418:	strd	r0, [lr]
   1841c:	sub	sp, fp, #28
   18420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18424:	bl	12008 <__errno_location@plt>
   18428:	ldr	r1, [pc, #280]	; 18548 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   1842c:	ldr	r1, [pc, r1]
   18430:	ldr	r0, [r0]
   18434:	ldr	r4, [r1]
   18438:	ldr	r5, [pc, #268]	; 1854c <__generate_code_for_binary_boolean_expression@@Base+0xb8c>
   1843c:	ldr	r5, [pc, r5]
   18440:	bl	11fa8 <strerror@plt>
   18444:	ldr	r1, [pc, #260]	; 18550 <__generate_code_for_binary_boolean_expression@@Base+0xb90>
   18448:	mov	r3, r0
   1844c:	mov	r0, r4
   18450:	add	r1, pc, r1
   18454:	mov	r2, r5
   18458:	bl	11ffc <fprintf@plt>
   1845c:	ldr	r0, [pc, #240]	; 18554 <__generate_code_for_binary_boolean_expression@@Base+0xb94>
   18460:	str	r8, [sl]
   18464:	mov	r2, #16646144	; 0xfe0000
   18468:	add	r0, pc, r0
   1846c:	orr	r2, r2, #-16777216	; 0xff000000
   18470:	str	r8, [r0]
   18474:	str	r8, [r0, #4]
   18478:	mov	r0, #1
   1847c:	strb	r0, [r6]
   18480:	ldr	r0, [r9, #4]
   18484:	ldr	r1, [pc, #204]	; 18558 <__generate_code_for_binary_boolean_expression@@Base+0xb98>
   18488:	mvn	r3, #0
   1848c:	eor	r3, r0, r3
   18490:	ldr	r1, [pc, r1]
   18494:	eor	r2, r1, r2
   18498:	orrs	r2, r2, r3
   1849c:	beq	1805c <__generate_code_for_binary_boolean_expression@@Base+0x69c>
   184a0:	ldr	r2, [pc, #104]	; 18510 <__generate_code_for_binary_boolean_expression@@Base+0xb50>
   184a4:	ldr	r7, [pc, #176]	; 1855c <__generate_code_for_binary_boolean_expression@@Base+0xb9c>
   184a8:	adds	r1, r1, r2
   184ac:	mov	r2, #16646144	; 0xfe0000
   184b0:	orr	r2, r2, #-16777216	; 0xff000000
   184b4:	and	r4, r1, r2
   184b8:	adc	r0, r0, #0
   184bc:	mvn	r1, #0
   184c0:	and	r5, r0, r1
   184c4:	add	r7, pc, r7
   184c8:	b	18048 <__generate_code_for_binary_boolean_expression@@Base+0x688>
   184cc:	bl	12008 <__errno_location@plt>
   184d0:	ldr	r1, [pc, #152]	; 18570 <__generate_code_for_binary_boolean_expression@@Base+0xbb0>
   184d4:	ldr	r1, [pc, r1]
   184d8:	ldr	r0, [r0]
   184dc:	ldr	r4, [r1]
   184e0:	ldr	r5, [pc, #140]	; 18574 <__generate_code_for_binary_boolean_expression@@Base+0xbb4>
   184e4:	ldr	r5, [pc, r5]
   184e8:	bl	11fa8 <strerror@plt>
   184ec:	ldr	r1, [pc, #132]	; 18578 <__generate_code_for_binary_boolean_expression@@Base+0xbb8>
   184f0:	mov	r3, r0
   184f4:	mov	r0, r4
   184f8:	add	r1, pc, r1
   184fc:	mov	r2, r5
   18500:	bl	11ffc <fprintf@plt>
   18504:	sub	sp, fp, #28
   18508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1850c:	strbvs	r6, [r3, -r1, ror #8]!
   18510:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   18514:	andeq	r6, r1, ip, ror #2
   18518:	andeq	r6, r1, ip, ror #2
   1851c:	andeq	r5, r1, r8, ror #2
   18520:			; <UNDEFINED> instruction: 0x00003ab6
   18524:	andeq	r5, r1, r0, ror #1
   18528:	strheq	r6, [r1], -r8
   1852c:	strheq	r6, [r1], -ip
   18530:	andeq	r6, r1, r8, lsr #1
   18534:	andeq	r6, r1, r8, lsr #1
   18538:	andeq	r6, r1, ip, ror r0
   1853c:	andeq	r5, r1, ip, ror #30
   18540:	andeq	r5, r1, r0, lsl #31
   18544:	andeq	r4, r1, r0, asr pc
   18548:	muleq	r1, r0, ip
   1854c:	andeq	r5, r1, r4, ror ip
   18550:	andeq	r3, r0, r0, asr #14
   18554:	andeq	r5, r1, r8, asr ip
   18558:	andeq	r5, r1, r8, lsr ip
   1855c:	strdeq	r5, [r1], -ip
   18560:	andeq	r6, r1, ip, lsl r1
   18564:	andeq	r3, r0, sl, lsl #21
   18568:	strdeq	r6, [r1], -ip
   1856c:	andeq	r6, r1, r8, ror #1
   18570:	andeq	r4, r1, r8, ror #23
   18574:	andeq	r5, r1, ip, asr #23
   18578:	andeq	r3, r0, lr, lsr r5
   1857c:	andeq	r6, r1, ip, asr #32
   18580:	andeq	r6, r1, r8, lsr r0
   18584:	andeq	r6, r1, r8, lsr #32
   18588:	andeq	r5, r1, r0, lsl #30
   1858c:	andeq	r5, r1, r4, asr #31
   18590:	andeq	r5, r1, r0, asr #31
   18594:			; <UNDEFINED> instruction: 0x00015eb4
   18598:	andeq	r5, r1, r4, asr #26
   1859c:	andeq	r5, r1, r4, ror #28
   185a0:	andeq	r5, r1, r8, asr #28
   185a4:	andeq	r5, r1, r0, asr #28
   185a8:			; <UNDEFINED> instruction: 0x00015db4
   185ac:	andeq	r5, r1, r4, ror #26
   185b0:	andeq	r5, r1, r4, ror #26
   185b4:	ldr	r0, [r0]
   185b8:	cmn	r0, #1
   185bc:	beq	185dc <__generate_code_for_binary_boolean_expression@@Base+0xc1c>
   185c0:	ldr	r0, [r1, r0, lsl #2]
   185c4:	cmp	r0, #0
   185c8:	bxeq	lr
   185cc:	ldrd	r2, [r0]
   185d0:	adds	r2, r2, #1
   185d4:	adc	r3, r3, #0
   185d8:	strd	r2, [r0]
   185dc:	bx	lr
   185e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e4:	add	fp, sp, #28
   185e8:	sub	sp, sp, #12
   185ec:	ldr	r7, [pc, #2008]	; 18dcc <__generate_code_for_binary_boolean_expression@@Base+0x140c>
   185f0:	mov	sl, #2
   185f4:	cmp	r3, #0
   185f8:	movne	sl, #3
   185fc:	ldr	r7, [pc, r7]
   18600:	cmp	r7, #0
   18604:	beq	18dc4 <__generate_code_for_binary_boolean_expression@@Base+0x1404>
   18608:	stm	sp, {r0, r2, r3}
   1860c:	ldr	r0, [pc, #1980]	; 18dd0 <__generate_code_for_binary_boolean_expression@@Base+0x1410>
   18610:	mov	r5, r1
   18614:	add	r0, pc, r0
   18618:	ldrb	r0, [r0]
   1861c:	ldr	r8, [pc, #1968]	; 18dd4 <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   18620:	cmp	r0, #1
   18624:	add	r8, pc, r8
   18628:	bne	186ac <__generate_code_for_binary_boolean_expression@@Base+0xcec>
   1862c:	ldr	r4, [pc, #1956]	; 18dd8 <__generate_code_for_binary_boolean_expression@@Base+0x1418>
   18630:	ldr	r0, [r8, #4]
   18634:	ldr	r1, [pc, #1952]	; 18ddc <__generate_code_for_binary_boolean_expression@@Base+0x141c>
   18638:	add	r4, pc, r4
   1863c:	ldr	r1, [pc, r1]
   18640:	ldr	r7, [r4, #4]
   18644:	ldr	r6, [pc, #1940]	; 18de0 <__generate_code_for_binary_boolean_expression@@Base+0x1420>
   18648:	adds	r2, r1, #4
   1864c:	adc	r3, r0, #0
   18650:	ldr	r6, [pc, r6]
   18654:	subs	r2, r6, r2
   18658:	sbcs	r2, r7, r3
   1865c:	bcs	186ac <__generate_code_for_binary_boolean_expression@@Base+0xcec>
   18660:	mov	r2, #7
   18664:	orr	r2, r2, #131072	; 0x20000
   18668:	adds	r1, r2, r1
   1866c:	adc	r0, r0, #0
   18670:	subs	r1, r1, #4
   18674:	sbc	r0, r0, #0
   18678:	mvn	r2, #0
   1867c:	and	r7, r0, r2
   18680:	mov	r0, #16646144	; 0xfe0000
   18684:	orr	r0, r0, #-16777216	; 0xff000000
   18688:	ldr	r9, [pc, #1876]	; 18de4 <__generate_code_for_binary_boolean_expression@@Base+0x1424>
   1868c:	and	r6, r1, r0
   18690:	ldr	r0, [pc, #1872]	; 18de8 <__generate_code_for_binary_boolean_expression@@Base+0x1428>
   18694:	mov	r1, r6
   18698:	add	r9, pc, r9
   1869c:	ldr	r0, [pc, r0]
   186a0:	bl	11f60 <realloc@plt>
   186a4:	strd	r6, [r4]
   186a8:	str	r0, [r9]
   186ac:	ldr	r7, [pc, #1848]	; 18dec <__generate_code_for_binary_boolean_expression@@Base+0x142c>
   186b0:	mov	r0, #0
   186b4:	mov	r2, #1
   186b8:	ldr	r7, [pc, r7]
   186bc:	ldr	ip, [pc, #1836]	; 18df0 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   186c0:	adds	r4, r7, #4
   186c4:	ldr	ip, [pc, ip]
   186c8:	ldr	r6, [r8, #4]
   186cc:	mov	r1, ip
   186d0:	adc	r9, r6, #0
   186d4:	strb	r0, [r1, r7]!
   186d8:	cmp	r5, #0
   186dc:	strb	r2, [r1, #3]
   186e0:	strb	r0, [r1, #2]
   186e4:	strb	r0, [r1, #1]
   186e8:	stm	r8, {r4, r9}
   186ec:	mov	r8, r5
   186f0:	beq	1870c <__generate_code_for_binary_boolean_expression@@Base+0xd4c>
   186f4:	mov	r0, r8
   186f8:	mov	r5, ip
   186fc:	bl	11fd8 <strlen@plt>
   18700:	add	r0, sl, r0, lsr #2
   18704:	mov	ip, r5
   18708:	add	sl, r0, #2
   1870c:	ldr	r0, [pc, #1760]	; 18df4 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   18710:	add	r0, pc, r0
   18714:	ldrb	r0, [r0]
   18718:	cmp	r0, #0
   1871c:	beq	187f8 <__generate_code_for_binary_boolean_expression@@Base+0xe38>
   18720:	ldr	lr, [pc, #1748]	; 18dfc <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   18724:	adds	r0, r7, #8
   18728:	adc	r1, r6, #0
   1872c:	add	lr, pc, lr
   18730:	ldr	r2, [lr, #4]
   18734:	ldr	r3, [pc, #1732]	; 18e00 <__generate_code_for_binary_boolean_expression@@Base+0x1440>
   18738:	ldr	r3, [pc, r3]
   1873c:	subs	r0, r3, r0
   18740:	sbcs	r0, r2, r1
   18744:	bcs	18864 <__generate_code_for_binary_boolean_expression@@Base+0xea4>
   18748:	mov	r0, #7
   1874c:	orr	r0, r0, #131072	; 0x20000
   18750:	adds	r0, r7, r0
   18754:	adc	r1, r6, #0
   18758:	mvn	r2, #0
   1875c:	and	r5, r1, r2
   18760:	mov	r1, #16646144	; 0xfe0000
   18764:	orr	r1, r1, #-16777216	; 0xff000000
   18768:	and	r6, r0, r1
   1876c:	ldr	r4, [pc, #1684]	; 18e08 <__generate_code_for_binary_boolean_expression@@Base+0x1448>
   18770:	mov	r0, ip
   18774:	mov	r1, r6
   18778:	add	r4, pc, r4
   1877c:	mov	r7, lr
   18780:	bl	11f60 <realloc@plt>
   18784:	mov	lr, r7
   18788:	mov	ip, r0
   1878c:	str	r6, [lr]
   18790:	str	r5, [lr, #4]
   18794:	str	ip, [r4]
   18798:	ldr	r1, [pc, #1644]	; 18e0c <__generate_code_for_binary_boolean_expression@@Base+0x144c>
   1879c:	lsr	r0, sl, #24
   187a0:	add	r1, pc, r1
   187a4:	lsr	r3, sl, #16
   187a8:	ldrb	r2, [r1]
   187ac:	ldr	r1, [pc, #1628]	; 18e10 <__generate_code_for_binary_boolean_expression@@Base+0x1450>
   187b0:	add	r1, pc, r1
   187b4:	mov	r7, r1
   187b8:	ldr	r9, [r1, #4]
   187bc:	ldr	r4, [pc, #1616]	; 18e14 <__generate_code_for_binary_boolean_expression@@Base+0x1454>
   187c0:	mov	r1, ip
   187c4:	ldr	r4, [pc, r4]
   187c8:	strb	sl, [r1, r4]!
   187cc:	strb	r0, [r1, #3]
   187d0:	lsr	r0, sl, #8
   187d4:	strb	r0, [r1, #1]
   187d8:	adds	r0, r4, #4
   187dc:	strb	r3, [r1, #2]
   187e0:	adc	r1, r9, #0
   187e4:	mov	sl, r7
   187e8:	cmp	r2, #1
   187ec:	strd	r0, [sl]
   187f0:	bne	1882c <__generate_code_for_binary_boolean_expression@@Base+0xe6c>
   187f4:	b	18898 <__generate_code_for_binary_boolean_expression@@Base+0xed8>
   187f8:	mov	r3, ip
   187fc:	lsr	r0, sl, #24
   18800:	strb	sl, [r3, r4]!
   18804:	lsr	r1, sl, #16
   18808:	lsr	r2, sl, #8
   1880c:	strb	r0, [r3, #3]
   18810:	strb	r1, [r3, #2]
   18814:	strb	r2, [r3, #1]
   18818:	ldr	sl, [pc, #1496]	; 18df8 <__generate_code_for_binary_boolean_expression@@Base+0x1438>
   1881c:	adds	r0, r7, #8
   18820:	adc	r1, r6, #0
   18824:	add	sl, pc, sl
   18828:	strd	r0, [sl]
   1882c:	ldr	r5, [sp]
   18830:	mov	r6, ip
   18834:	lsr	r2, r5, #24
   18838:	strb	r5, [r6, r0]!
   1883c:	lsr	r3, r5, #16
   18840:	lsr	r7, r5, #8
   18844:	strb	r2, [r6, #3]
   18848:	strb	r3, [r6, #2]
   1884c:	strb	r7, [r6, #1]
   18850:	adds	r2, r0, #4
   18854:	adc	r3, r1, #0
   18858:	ldmib	sp, {r5, r9}
   1885c:	strd	r2, [sl]
   18860:	b	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x104c>
   18864:	mov	r3, ip
   18868:	lsr	r0, sl, #24
   1886c:	strb	sl, [r3, r4]!
   18870:	lsr	r1, sl, #16
   18874:	lsr	r2, sl, #8
   18878:	strb	r0, [r3, #3]
   1887c:	strb	r1, [r3, #2]
   18880:	strb	r2, [r3, #1]
   18884:	ldr	sl, [pc, #1400]	; 18e04 <__generate_code_for_binary_boolean_expression@@Base+0x1444>
   18888:	adds	r0, r7, #8
   1888c:	adc	r1, r6, #0
   18890:	add	sl, pc, sl
   18894:	strd	r0, [sl]
   18898:	ldr	r7, [lr, #4]
   1889c:	ldr	r6, [pc, #1396]	; 18e18 <__generate_code_for_binary_boolean_expression@@Base+0x1458>
   188a0:	adds	r2, r4, #8
   188a4:	adc	r3, r9, #0
   188a8:	ldr	r6, [pc, r6]
   188ac:	subs	r2, r6, r2
   188b0:	sbcs	r2, r7, r3
   188b4:	bcs	1895c <__generate_code_for_binary_boolean_expression@@Base+0xf9c>
   188b8:	mov	r0, #7
   188bc:	orr	r0, r0, #131072	; 0x20000
   188c0:	adds	r0, r4, r0
   188c4:	adc	r1, r9, #0
   188c8:	mvn	r2, #0
   188cc:	and	r5, r1, r2
   188d0:	mov	r1, #16646144	; 0xfe0000
   188d4:	orr	r1, r1, #-16777216	; 0xff000000
   188d8:	and	r4, r0, r1
   188dc:	ldr	r7, [pc, #1336]	; 18e1c <__generate_code_for_binary_boolean_expression@@Base+0x145c>
   188e0:	mov	r0, ip
   188e4:	mov	r1, r4
   188e8:	add	r7, pc, r7
   188ec:	mov	r6, lr
   188f0:	bl	11f60 <realloc@plt>
   188f4:	mov	lr, r6
   188f8:	str	r0, [r7]
   188fc:	strd	r4, [lr]
   18900:	mov	ip, r0
   18904:	ldr	r6, [sp]
   18908:	ldr	r0, [pc, #1296]	; 18e20 <__generate_code_for_binary_boolean_expression@@Base+0x1460>
   1890c:	ldr	r1, [sl, #4]
   18910:	mov	r3, ip
   18914:	add	r0, pc, r0
   18918:	lsr	r2, r6, #24
   1891c:	ldrb	r7, [r0]
   18920:	ldr	r0, [pc, #1276]	; 18e24 <__generate_code_for_binary_boolean_expression@@Base+0x1464>
   18924:	ldr	r0, [pc, r0]
   18928:	strb	r6, [r3, r0]!
   1892c:	ldmib	sp, {r5, r9}
   18930:	strb	r2, [r3, #3]
   18934:	lsr	r2, r6, #8
   18938:	lsr	r6, r6, #16
   1893c:	strb	r2, [r3, #1]
   18940:	adds	r2, r0, #4
   18944:	strb	r6, [r3, #2]
   18948:	adc	r3, r1, #0
   1894c:	cmp	r7, #1
   18950:	strd	r2, [sl]
   18954:	beq	18990 <__generate_code_for_binary_boolean_expression@@Base+0xfd0>
   18958:	b	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x104c>
   1895c:	ldr	r5, [sp]
   18960:	mov	r6, ip
   18964:	lsr	r2, r5, #24
   18968:	strb	r5, [r6, r0]!
   1896c:	lsr	r3, r5, #16
   18970:	lsr	r7, r5, #8
   18974:	strb	r2, [r6, #3]
   18978:	strb	r3, [r6, #2]
   1897c:	strb	r7, [r6, #1]
   18980:	adds	r2, r0, #4
   18984:	adc	r3, r1, #0
   18988:	ldmib	sp, {r5, r9}
   1898c:	strd	r2, [sl]
   18990:	str	r8, [sp, #8]
   18994:	mov	r8, lr
   18998:	adds	r7, r0, #8
   1899c:	ldr	r6, [r8, #4]
   189a0:	ldr	r4, [pc, #1152]	; 18e28 <__generate_code_for_binary_boolean_expression@@Base+0x1468>
   189a4:	adc	lr, r1, #0
   189a8:	ldr	r4, [pc, r4]
   189ac:	subs	r7, r4, r7
   189b0:	sbcs	r7, r6, lr
   189b4:	bcs	18a08 <__generate_code_for_binary_boolean_expression@@Base+0x1048>
   189b8:	mov	r2, #7
   189bc:	orr	r2, r2, #131072	; 0x20000
   189c0:	adds	r0, r0, r2
   189c4:	adc	r1, r1, #0
   189c8:	mvn	r2, #0
   189cc:	and	r7, r1, r2
   189d0:	mov	r1, #16646144	; 0xfe0000
   189d4:	orr	r1, r1, #-16777216	; 0xff000000
   189d8:	and	r6, r0, r1
   189dc:	ldr	r4, [pc, #1096]	; 18e2c <__generate_code_for_binary_boolean_expression@@Base+0x146c>
   189e0:	mov	r0, ip
   189e4:	mov	r1, r6
   189e8:	add	r4, pc, r4
   189ec:	bl	11f60 <realloc@plt>
   189f0:	strd	r6, [r8]
   189f4:	str	r0, [r4]
   189f8:	ldr	r3, [sl, #4]
   189fc:	ldr	r2, [pc, #1068]	; 18e30 <__generate_code_for_binary_boolean_expression@@Base+0x1470>
   18a00:	mov	ip, r0
   18a04:	ldr	r2, [pc, r2]
   18a08:	ldr	r8, [sp, #8]
   18a0c:	mov	r6, ip
   18a10:	lsr	r7, r5, #8
   18a14:	strb	r5, [r6, r2]!
   18a18:	adds	r4, r2, #4
   18a1c:	lsr	r0, r5, #24
   18a20:	lsr	r1, r5, #16
   18a24:	strb	r7, [r6, #1]
   18a28:	adc	r7, r3, #0
   18a2c:	cmp	r9, #0
   18a30:	strb	r0, [r6, #3]
   18a34:	strb	r1, [r6, #2]
   18a38:	stm	sl, {r4, r7}
   18a3c:	beq	18b10 <__generate_code_for_binary_boolean_expression@@Base+0x1150>
   18a40:	ldr	r0, [pc, #1004]	; 18e34 <__generate_code_for_binary_boolean_expression@@Base+0x1474>
   18a44:	ldr	sl, [fp, #8]
   18a48:	add	r0, pc, r0
   18a4c:	ldrb	r0, [r0]
   18a50:	cmp	r0, #1
   18a54:	bne	18adc <__generate_code_for_binary_boolean_expression@@Base+0x111c>
   18a58:	ldr	r9, [pc, #984]	; 18e38 <__generate_code_for_binary_boolean_expression@@Base+0x1478>
   18a5c:	adds	r0, r2, #8
   18a60:	adc	r1, r3, #0
   18a64:	add	r9, pc, r9
   18a68:	ldr	r6, [r9, #4]
   18a6c:	ldr	r5, [pc, #968]	; 18e3c <__generate_code_for_binary_boolean_expression@@Base+0x147c>
   18a70:	ldr	r5, [pc, r5]
   18a74:	subs	r0, r5, r0
   18a78:	sbcs	r0, r6, r1
   18a7c:	bcs	18adc <__generate_code_for_binary_boolean_expression@@Base+0x111c>
   18a80:	mov	r0, #7
   18a84:	orr	r0, r0, #131072	; 0x20000
   18a88:	adds	r0, r2, r0
   18a8c:	adc	r1, r3, #0
   18a90:	mvn	r2, #0
   18a94:	and	r5, r1, r2
   18a98:	mov	r1, #16646144	; 0xfe0000
   18a9c:	orr	r1, r1, #-16777216	; 0xff000000
   18aa0:	and	r6, r0, r1
   18aa4:	ldr	r4, [pc, #916]	; 18e40 <__generate_code_for_binary_boolean_expression@@Base+0x1480>
   18aa8:	mov	r0, ip
   18aac:	mov	r1, r6
   18ab0:	add	r4, pc, r4
   18ab4:	bl	11f60 <realloc@plt>
   18ab8:	str	r6, [r9]
   18abc:	str	r5, [r9, #4]
   18ac0:	mov	ip, r0
   18ac4:	ldr	r0, [pc, #888]	; 18e44 <__generate_code_for_binary_boolean_expression@@Base+0x1484>
   18ac8:	str	ip, [r4]
   18acc:	add	r0, pc, r0
   18ad0:	ldr	r7, [r0, #4]
   18ad4:	ldr	r4, [pc, #876]	; 18e48 <__generate_code_for_binary_boolean_expression@@Base+0x1488>
   18ad8:	ldr	r4, [pc, r4]
   18adc:	mov	r3, ip
   18ae0:	lsr	r0, sl, #24
   18ae4:	strb	sl, [r3, r4]!
   18ae8:	lsr	r1, sl, #16
   18aec:	lsr	r2, sl, #8
   18af0:	strb	r0, [r3, #3]
   18af4:	strb	r1, [r3, #2]
   18af8:	strb	r2, [r3, #1]
   18afc:	ldr	sl, [pc, #840]	; 18e4c <__generate_code_for_binary_boolean_expression@@Base+0x148c>
   18b00:	adds	r4, r4, #4
   18b04:	adc	r7, r7, #0
   18b08:	add	sl, pc, sl
   18b0c:	stm	sl, {r4, r7}
   18b10:	cmp	r8, #0
   18b14:	beq	18dc4 <__generate_code_for_binary_boolean_expression@@Base+0x1404>
   18b18:	mov	r0, r8
   18b1c:	mov	r9, ip
   18b20:	bl	11fd8 <strlen@plt>
   18b24:	mov	r6, #1
   18b28:	add	r5, r6, r0, lsr #2
   18b2c:	ldr	r0, [pc, #796]	; 18e50 <__generate_code_for_binary_boolean_expression@@Base+0x1490>
   18b30:	add	r0, pc, r0
   18b34:	ldrb	r0, [r0]
   18b38:	cmp	r0, #1
   18b3c:	bne	18be0 <__generate_code_for_binary_boolean_expression@@Base+0x1220>
   18b40:	ldr	sl, [pc, #780]	; 18e54 <__generate_code_for_binary_boolean_expression@@Base+0x1494>
   18b44:	adds	r0, r4, #4
   18b48:	adc	r1, r7, #0
   18b4c:	add	sl, pc, sl
   18b50:	ldr	r2, [sl, #4]
   18b54:	ldr	r3, [pc, #764]	; 18e58 <__generate_code_for_binary_boolean_expression@@Base+0x1498>
   18b58:	ldr	r3, [pc, r3]
   18b5c:	subs	r0, r3, r0
   18b60:	sbcs	r0, r2, r1
   18b64:	bcs	18bf4 <__generate_code_for_binary_boolean_expression@@Base+0x1234>
   18b68:	mov	r0, #0
   18b6c:	str	r0, [sp, #8]
   18b70:	mov	r0, #7
   18b74:	orr	r0, r0, #131072	; 0x20000
   18b78:	adds	r0, r0, r4
   18b7c:	adc	r1, r7, #0
   18b80:	subs	r0, r0, #4
   18b84:	sbc	r1, r1, #0
   18b88:	mvn	r2, #0
   18b8c:	and	r7, r1, r2
   18b90:	mov	r1, #16646144	; 0xfe0000
   18b94:	orr	r1, r1, #-16777216	; 0xff000000
   18b98:	and	r4, r0, r1
   18b9c:	ldr	r6, [pc, #700]	; 18e60 <__generate_code_for_binary_boolean_expression@@Base+0x14a0>
   18ba0:	mov	r0, r9
   18ba4:	mov	r1, r4
   18ba8:	add	r6, pc, r6
   18bac:	bl	11f60 <realloc@plt>
   18bb0:	stm	sl, {r4, r7}
   18bb4:	str	r0, [r6]
   18bb8:	ldr	sl, [pc, #676]	; 18e64 <__generate_code_for_binary_boolean_expression@@Base+0x14a4>
   18bbc:	mov	r3, r0
   18bc0:	add	sl, pc, sl
   18bc4:	ldr	r7, [sl, #4]
   18bc8:	ldr	r0, [pc, #664]	; 18e68 <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   18bcc:	add	r0, pc, r0
   18bd0:	ldrb	r6, [r0]
   18bd4:	ldr	r4, [pc, #656]	; 18e6c <__generate_code_for_binary_boolean_expression@@Base+0x14ac>
   18bd8:	ldr	r4, [pc, r4]
   18bdc:	b	18c08 <__generate_code_for_binary_boolean_expression@@Base+0x1248>
   18be0:	mov	r0, #0
   18be4:	str	r0, [sp, #8]
   18be8:	mov	r6, #0
   18bec:	mov	r3, r9
   18bf0:	b	18c08 <__generate_code_for_binary_boolean_expression@@Base+0x1248>
   18bf4:	mov	r0, #0
   18bf8:	str	r0, [sp, #8]
   18bfc:	ldr	sl, [pc, #600]	; 18e5c <__generate_code_for_binary_boolean_expression@@Base+0x149c>
   18c00:	mov	r3, r9
   18c04:	add	sl, pc, sl
   18c08:	mov	r9, r3
   18c0c:	strb	r5, [r3, r4]!
   18c10:	lsr	r0, r5, #24
   18c14:	adds	r4, r4, #4
   18c18:	lsr	r1, r5, #16
   18c1c:	lsr	r2, r5, #8
   18c20:	strb	r0, [r3, #3]
   18c24:	mov	r0, r8
   18c28:	adc	r5, r7, #0
   18c2c:	strb	r1, [r3, #2]
   18c30:	strb	r2, [r3, #1]
   18c34:	strd	r4, [sl]
   18c38:	bl	11fd8 <strlen@plt>
   18c3c:	mov	r7, r0
   18c40:	cmp	r6, #0
   18c44:	beq	18ce0 <__generate_code_for_binary_boolean_expression@@Base+0x1320>
   18c48:	ldr	r6, [pc, #544]	; 18e70 <__generate_code_for_binary_boolean_expression@@Base+0x14b0>
   18c4c:	adds	r0, r4, r7
   18c50:	adc	r1, r5, #0
   18c54:	add	r6, pc, r6
   18c58:	ldr	r2, [r6, #4]
   18c5c:	ldr	r3, [pc, #528]	; 18e74 <__generate_code_for_binary_boolean_expression@@Base+0x14b4>
   18c60:	ldr	r3, [pc, r3]
   18c64:	subs	r3, r3, r0
   18c68:	sbcs	r2, r2, r1
   18c6c:	bcs	18cd8 <__generate_code_for_binary_boolean_expression@@Base+0x1318>
   18c70:	mov	r2, #7
   18c74:	orr	r2, r2, #131072	; 0x20000
   18c78:	adds	r0, r2, r0
   18c7c:	adc	r1, r1, #0
   18c80:	subs	r0, r0, #8
   18c84:	sbc	r1, r1, #0
   18c88:	mvn	r2, #0
   18c8c:	and	r5, r1, r2
   18c90:	mov	r1, #16646144	; 0xfe0000
   18c94:	orr	r1, r1, #-16777216	; 0xff000000
   18c98:	and	r4, r0, r1
   18c9c:	mov	r0, r9
   18ca0:	mov	r1, r4
   18ca4:	bl	11f60 <realloc@plt>
   18ca8:	strd	r4, [r6]
   18cac:	ldr	r1, [pc, #452]	; 18e78 <__generate_code_for_binary_boolean_expression@@Base+0x14b8>
   18cb0:	ldr	r5, [sl, #4]
   18cb4:	add	r1, pc, r1
   18cb8:	str	r0, [r1]
   18cbc:	ldr	r1, [pc, #440]	; 18e7c <__generate_code_for_binary_boolean_expression@@Base+0x14bc>
   18cc0:	add	r1, pc, r1
   18cc4:	ldrb	r1, [r1]
   18cc8:	str	r1, [sp, #8]
   18ccc:	ldr	r4, [pc, #428]	; 18e80 <__generate_code_for_binary_boolean_expression@@Base+0x14c0>
   18cd0:	ldr	r4, [pc, r4]
   18cd4:	b	18ce4 <__generate_code_for_binary_boolean_expression@@Base+0x1324>
   18cd8:	mov	r0, #1
   18cdc:	str	r0, [sp, #8]
   18ce0:	mov	r0, r9
   18ce4:	mov	r9, r0
   18ce8:	add	r0, r0, r4
   18cec:	mov	r1, r8
   18cf0:	mov	r2, r7
   18cf4:	bl	11f24 <memcpy@plt>
   18cf8:	adds	r6, r4, r7
   18cfc:	mov	r0, r8
   18d00:	adc	r5, r5, #0
   18d04:	str	r6, [sl]
   18d08:	str	r5, [sl, #4]
   18d0c:	bl	11fd8 <strlen@plt>
   18d10:	and	r0, r0, #3
   18d14:	rsb	r4, r0, #4
   18d18:	ldr	r0, [sp, #8]
   18d1c:	cmp	r0, #0
   18d20:	beq	18da8 <__generate_code_for_binary_boolean_expression@@Base+0x13e8>
   18d24:	ldr	r7, [pc, #344]	; 18e84 <__generate_code_for_binary_boolean_expression@@Base+0x14c4>
   18d28:	adds	r0, r6, r4
   18d2c:	adc	r1, r5, #0
   18d30:	add	r7, pc, r7
   18d34:	ldr	r2, [r7, #4]
   18d38:	ldr	r3, [pc, #328]	; 18e88 <__generate_code_for_binary_boolean_expression@@Base+0x14c8>
   18d3c:	ldr	r3, [pc, r3]
   18d40:	subs	r3, r3, r0
   18d44:	sbcs	r2, r2, r1
   18d48:	bcs	18da8 <__generate_code_for_binary_boolean_expression@@Base+0x13e8>
   18d4c:	mov	r2, #7
   18d50:	orr	r2, r2, #131072	; 0x20000
   18d54:	adds	r0, r2, r0
   18d58:	adc	r1, r1, #0
   18d5c:	subs	r0, r0, #8
   18d60:	sbc	r1, r1, #0
   18d64:	mvn	r2, #0
   18d68:	and	r5, r1, r2
   18d6c:	mov	r1, #16646144	; 0xfe0000
   18d70:	orr	r1, r1, #-16777216	; 0xff000000
   18d74:	and	r6, r0, r1
   18d78:	ldr	r8, [pc, #268]	; 18e8c <__generate_code_for_binary_boolean_expression@@Base+0x14cc>
   18d7c:	mov	r0, r9
   18d80:	mov	r1, r6
   18d84:	add	r8, pc, r8
   18d88:	bl	11f60 <realloc@plt>
   18d8c:	str	r6, [r7]
   18d90:	str	r5, [r7, #4]
   18d94:	str	r0, [r8]
   18d98:	ldr	r5, [sl, #4]
   18d9c:	ldr	r6, [pc, #236]	; 18e90 <__generate_code_for_binary_boolean_expression@@Base+0x14d0>
   18da0:	mov	r9, r0
   18da4:	ldr	r6, [pc, r6]
   18da8:	add	r0, r9, r6
   18dac:	mov	r1, #0
   18db0:	mov	r2, r4
   18db4:	bl	1202c <memset@plt>
   18db8:	adds	r0, r6, r4
   18dbc:	adc	r1, r5, #0
   18dc0:	strd	r0, [sl]
   18dc4:	sub	sp, fp, #28
   18dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dcc:			; <UNDEFINED> instruction: 0x00015abc
   18dd0:	andeq	r5, r1, r0, lsr #21
   18dd4:	andeq	r5, r1, r4, lsr #21
   18dd8:	andeq	r5, r1, r8, lsl #21
   18ddc:	andeq	r5, r1, ip, lsl #21
   18de0:	andeq	r5, r1, r0, ror sl
   18de4:	andeq	r5, r1, r4, lsr #20
   18de8:	andeq	r5, r1, r0, lsr #20
   18dec:	andeq	r5, r1, r0, lsl sl
   18df0:	strdeq	r5, [r1], -r8
   18df4:	andeq	r5, r1, r4, lsr #19
   18df8:	andeq	r5, r1, r4, lsr #17
   18dfc:	muleq	r1, r4, r9
   18e00:	andeq	r5, r1, r8, lsl #19
   18e04:	andeq	r5, r1, r8, lsr r8
   18e08:	andeq	r5, r1, r4, asr #18
   18e0c:	andeq	r5, r1, r4, lsl r9
   18e10:	andeq	r5, r1, r8, lsl r9
   18e14:	andeq	r5, r1, r4, lsl #18
   18e18:	andeq	r5, r1, r8, lsl r8
   18e1c:	ldrdeq	r5, [r1], -r4
   18e20:	andeq	r5, r1, r0, lsr #15
   18e24:	andeq	r5, r1, r4, lsr #15
   18e28:	andeq	r5, r1, r8, lsl r7
   18e2c:	ldrdeq	r5, [r1], -r4
   18e30:	andeq	r5, r1, r4, asr #13
   18e34:	andeq	r5, r1, ip, ror #12
   18e38:	andeq	r5, r1, ip, asr r6
   18e3c:	andeq	r5, r1, r0, asr r6
   18e40:	andeq	r5, r1, ip, lsl #12
   18e44:	strdeq	r5, [r1], -ip
   18e48:	strdeq	r5, [r1], -r0
   18e4c:	andeq	r5, r1, r0, asr #11
   18e50:	andeq	r5, r1, r4, lsl #11
   18e54:	andeq	r5, r1, r4, ror r5
   18e58:	andeq	r5, r1, r8, ror #10
   18e5c:	andeq	r5, r1, r4, asr #9
   18e60:	andeq	r5, r1, r4, lsl r5
   18e64:	andeq	r5, r1, r8, lsl #10
   18e68:	andeq	r5, r1, r8, ror #9
   18e6c:	strdeq	r5, [r1], -r0
   18e70:	andeq	r5, r1, ip, ror #8
   18e74:	andeq	r5, r1, r0, ror #8
   18e78:	andeq	r5, r1, r8, lsl #8
   18e7c:	strdeq	r5, [r1], -r4
   18e80:	strdeq	r5, [r1], -r8
   18e84:	muleq	r1, r0, r3
   18e88:	andeq	r5, r1, r4, lsl #7
   18e8c:	andeq	r5, r1, r8, lsr r3
   18e90:	andeq	r5, r1, r4, lsr #6
   18e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e98:	add	fp, sp, #28
   18e9c:	sub	sp, sp, #28
   18ea0:	mov	ip, r0
   18ea4:	ldr	r0, [pc, #1740]	; 19578 <__generate_code_for_binary_boolean_expression@@Base+0x1bb8>
   18ea8:	ldr	r0, [pc, r0]
   18eac:	cmp	r0, #0
   18eb0:	beq	18fcc <__generate_code_for_binary_boolean_expression@@Base+0x160c>
   18eb4:	ldr	r5, [pc, #1728]	; 1957c <__generate_code_for_binary_boolean_expression@@Base+0x1bbc>
   18eb8:	mov	sl, r1
   18ebc:	add	r5, pc, r5
   18ec0:	ldr	r3, [r5, #4]
   18ec4:	ldr	r4, [pc, #1716]	; 19580 <__generate_code_for_binary_boolean_expression@@Base+0x1bc0>
   18ec8:	ldr	r4, [pc, r4]
   18ecc:	ldr	r6, [pc, #1712]	; 19584 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   18ed0:	add	r6, pc, r6
   18ed4:	ldrb	r0, [r6]
   18ed8:	cmp	r0, #0
   18edc:	beq	18fd4 <__generate_code_for_binary_boolean_expression@@Base+0x1614>
   18ee0:	ldr	r8, [pc, #1732]	; 195ac <__generate_code_for_binary_boolean_expression@@Base+0x1bec>
   18ee4:	mov	r5, #10551296	; 0xa10000
   18ee8:	adds	r9, r4, #4
   18eec:	add	r8, pc, r8
   18ef0:	adc	r2, r3, #0
   18ef4:	ldr	r0, [r8, #4]
   18ef8:	ldr	r1, [pc, #1712]	; 195b0 <__generate_code_for_binary_boolean_expression@@Base+0x1bf0>
   18efc:	orr	r5, r5, #16777216	; 0x1000000
   18f00:	ldr	r1, [pc, r1]
   18f04:	subs	r1, r1, r9
   18f08:	sbcs	r0, r0, r2
   18f0c:	bcs	190d8 <__generate_code_for_binary_boolean_expression@@Base+0x1718>
   18f10:	mov	r0, #3
   18f14:	orr	r0, r0, #131072	; 0x20000
   18f18:	adds	r0, r4, r0
   18f1c:	adc	r1, r3, #0
   18f20:	mvn	r2, #0
   18f24:	and	r9, r1, r2
   18f28:	mov	r1, #16646144	; 0xfe0000
   18f2c:	orr	r1, r1, #-16777216	; 0xff000000
   18f30:	and	r4, r0, r1
   18f34:	ldr	r0, [pc, #1664]	; 195bc <__generate_code_for_binary_boolean_expression@@Base+0x1bfc>
   18f38:	mov	r1, r4
   18f3c:	mov	r7, ip
   18f40:	ldr	r0, [pc, r0]
   18f44:	bl	11f60 <realloc@plt>
   18f48:	ldr	ip, [pc, #1648]	; 195c0 <__generate_code_for_binary_boolean_expression@@Base+0x1c00>
   18f4c:	ldr	lr, [pc, #1648]	; 195c4 <__generate_code_for_binary_boolean_expression@@Base+0x1c04>
   18f50:	stm	r8, {r4, r9}
   18f54:	ldr	r1, [pc, #1644]	; 195c8 <__generate_code_for_binary_boolean_expression@@Base+0x1c08>
   18f58:	add	ip, pc, ip
   18f5c:	add	lr, pc, lr
   18f60:	add	r1, pc, r1
   18f64:	mov	r2, r0
   18f68:	str	r2, [r1]
   18f6c:	mov	r6, ip
   18f70:	ldrb	ip, [ip]
   18f74:	ldr	r3, [lr, #4]
   18f78:	ldr	r4, [pc, #1612]	; 195cc <__generate_code_for_binary_boolean_expression@@Base+0x1c0c>
   18f7c:	lsr	r0, r5, #24
   18f80:	mov	r1, r8
   18f84:	ldr	r4, [pc, r4]
   18f88:	str	r2, [sp, #20]
   18f8c:	lsl	r8, r7, #1
   18f90:	strb	r5, [r2, r4]!
   18f94:	adds	r9, r4, #4
   18f98:	strb	r0, [r2, #3]
   18f9c:	lsr	r0, r5, #16
   18fa0:	strb	r0, [r2, #2]
   18fa4:	lsr	r0, r5, #8
   18fa8:	strb	r0, [r2, #1]
   18fac:	adc	r5, r3, #0
   18fb0:	mov	r0, #0
   18fb4:	cmp	ip, #1
   18fb8:	str	r3, [sp, #16]
   18fbc:	str	r9, [lr]
   18fc0:	str	r5, [lr, #4]
   18fc4:	beq	1912c <__generate_code_for_binary_boolean_expression@@Base+0x176c>
   18fc8:	b	19290 <__generate_code_for_binary_boolean_expression@@Base+0x18d0>
   18fcc:	sub	sp, fp, #28
   18fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fd4:	ldr	r0, [pc, #1452]	; 19588 <__generate_code_for_binary_boolean_expression@@Base+0x1bc8>
   18fd8:	mov	r7, r3
   18fdc:	mov	r9, #0
   18fe0:	ldr	r0, [pc, r0]
   18fe4:	str	r0, [sp, #20]
   18fe8:	ldrb	r1, [r0, r4]!
   18fec:	str	r7, [sp, #16]
   18ff0:	ldrb	r2, [r0, #1]
   18ff4:	ldrb	r3, [r0, #2]
   18ff8:	ldrb	r0, [r0, #3]
   18ffc:	orr	r1, r1, r2, lsl #8
   19000:	orr	r1, r1, r3, lsl #16
   19004:	adds	r2, r4, #4
   19008:	orr	r3, r1, r0, lsl #24
   1900c:	adc	r7, r7, #0
   19010:	mov	r1, r5
   19014:	stm	r5, {r2, r7}
   19018:	mov	r5, #10551296	; 0xa10000
   1901c:	orr	r5, r5, #16777216	; 0x1000000
   19020:	cmn	r3, #1
   19024:	beq	191d8 <__generate_code_for_binary_boolean_expression@@Base+0x1818>
   19028:	cmp	r3, r5
   1902c:	bne	191e8 <__generate_code_for_binary_boolean_expression@@Base+0x1828>
   19030:	str	r7, [sp, #8]
   19034:	ldr	r0, [sp, #20]
   19038:	str	r4, [sp, #4]
   1903c:	mov	r8, r5
   19040:	ldr	r3, [r0, r2]
   19044:	ldr	r0, [sp, #16]
   19048:	adds	r5, r4, #8
   1904c:	adc	r9, r0, #0
   19050:	cmn	r3, #1
   19054:	stm	r1, {r5, r9}
   19058:	beq	191f4 <__generate_code_for_binary_boolean_expression@@Base+0x1834>
   1905c:	lsr	r0, r3, #1
   19060:	mov	r7, ip
   19064:	cmp	r0, ip
   19068:	bne	191f4 <__generate_code_for_binary_boolean_expression@@Base+0x1834>
   1906c:	lsl	r0, r7, #3
   19070:	mov	r4, r2
   19074:	bl	11f90 <malloc@plt>
   19078:	cmp	r7, #0
   1907c:	beq	1921c <__generate_code_for_binary_boolean_expression@@Base+0x185c>
   19080:	str	r0, [sp, #12]
   19084:	str	r7, [sp, #24]
   19088:	ldr	r2, [sp, #20]
   1908c:	ldr	r3, [r2, r5]!
   19090:	adds	r5, r5, #8
   19094:	ldr	r2, [r2, #4]
   19098:	str	r3, [r0]
   1909c:	adc	r9, r9, #0
   190a0:	str	r2, [r0, #4]
   190a4:	add	r0, r0, #8
   190a8:	subs	r7, r7, #1
   190ac:	bne	19088 <__generate_code_for_binary_boolean_expression@@Base+0x16c8>
   190b0:	ldr	lr, [pc, #1260]	; 195a4 <__generate_code_for_binary_boolean_expression@@Base+0x1be4>
   190b4:	add	lr, pc, lr
   190b8:	stm	lr, {r5, r9}
   190bc:	ldr	ip, [pc, #1252]	; 195a8 <__generate_code_for_binary_boolean_expression@@Base+0x1be8>
   190c0:	mov	r1, lr
   190c4:	ldr	r0, [sp, #12]
   190c8:	add	ip, pc, ip
   190cc:	mov	r6, ip
   190d0:	ldr	ip, [sp, #24]
   190d4:	b	19238 <__generate_code_for_binary_boolean_expression@@Base+0x1878>
   190d8:	str	r3, [sp, #16]
   190dc:	ldr	r3, [pc, #1232]	; 195b4 <__generate_code_for_binary_boolean_expression@@Base+0x1bf4>
   190e0:	mov	lr, r5
   190e4:	mov	r7, ip
   190e8:	lsr	ip, r5, #16
   190ec:	ldr	r3, [pc, r3]
   190f0:	lsr	r1, r5, #8
   190f4:	str	r3, [sp, #20]
   190f8:	strb	lr, [r3, r4]!
   190fc:	lsr	r0, lr, #24
   19100:	strb	r1, [r3, #1]
   19104:	strb	r0, [r3, #3]
   19108:	strb	ip, [r3, #2]
   1910c:	ldr	lr, [pc, #1188]	; 195b8 <__generate_code_for_binary_boolean_expression@@Base+0x1bf8>
   19110:	lsl	r5, r7, #1
   19114:	add	lr, pc, lr
   19118:	mov	r1, r8
   1911c:	mov	r8, r5
   19120:	str	r9, [lr]
   19124:	str	r2, [lr, #4]
   19128:	mov	r5, r2
   1912c:	str	r8, [sp, #24]
   19130:	mov	r8, r1
   19134:	ldr	r0, [sp, #16]
   19138:	ldr	r2, [r8, #4]
   1913c:	ldr	r3, [pc, #1164]	; 195d0 <__generate_code_for_binary_boolean_expression@@Base+0x1c10>
   19140:	adds	ip, r4, #8
   19144:	adc	r1, r0, #0
   19148:	mov	r0, #0
   1914c:	ldr	r3, [pc, r3]
   19150:	subs	r3, r3, ip
   19154:	sbcs	r1, r2, r1
   19158:	bcs	191d0 <__generate_code_for_binary_boolean_expression@@Base+0x1810>
   1915c:	ldr	r5, [pc, #1136]	; 195d4 <__generate_code_for_binary_boolean_expression@@Base+0x1c14>
   19160:	mov	r0, #3
   19164:	ldr	r1, [sp, #16]
   19168:	orr	r0, r0, #131072	; 0x20000
   1916c:	adds	r0, r0, r4
   19170:	adc	r1, r1, #0
   19174:	adds	r0, r0, #4
   19178:	adc	r1, r1, #0
   1917c:	mvn	r2, #0
   19180:	and	r9, r1, r2
   19184:	mov	r1, #16646144	; 0xfe0000
   19188:	orr	r1, r1, #-16777216	; 0xff000000
   1918c:	and	r4, r0, r1
   19190:	ldr	r0, [sp, #20]
   19194:	mov	r1, r4
   19198:	add	r5, pc, r5
   1919c:	bl	11f60 <realloc@plt>
   191a0:	ldr	ip, [pc, #1072]	; 195d8 <__generate_code_for_binary_boolean_expression@@Base+0x1c18>
   191a4:	ldr	lr, [pc, #1072]	; 195dc <__generate_code_for_binary_boolean_expression@@Base+0x1c1c>
   191a8:	stm	r8, {r4, r9}
   191ac:	add	lr, pc, lr
   191b0:	str	r0, [r5]
   191b4:	str	r0, [sp, #20]
   191b8:	ldr	r5, [lr, #4]
   191bc:	ldr	r9, [pc, #1052]	; 195e0 <__generate_code_for_binary_boolean_expression@@Base+0x1c20>
   191c0:	add	ip, pc, ip
   191c4:	mov	r6, ip
   191c8:	mov	r0, #0
   191cc:	ldr	r9, [pc, r9]
   191d0:	ldr	r8, [sp, #24]
   191d4:	b	19290 <__generate_code_for_binary_boolean_expression@@Base+0x18d0>
   191d8:	mov	r3, r2
   191dc:	ldr	r2, [sp, #16]
   191e0:	mov	r0, #0
   191e4:	b	19250 <__generate_code_for_binary_boolean_expression@@Base+0x1890>
   191e8:	ldr	r1, [pc, #924]	; 1958c <__generate_code_for_binary_boolean_expression@@Base+0x1bcc>
   191ec:	add	r1, pc, r1
   191f0:	b	191fc <__generate_code_for_binary_boolean_expression@@Base+0x183c>
   191f4:	ldr	r1, [pc, #924]	; 19598 <__generate_code_for_binary_boolean_expression@@Base+0x1bd8>
   191f8:	add	r1, pc, r1
   191fc:	ldr	r0, [pc, #908]	; 19590 <__generate_code_for_binary_boolean_expression@@Base+0x1bd0>
   19200:	ldr	r0, [pc, r0]
   19204:	ldr	r0, [r0]
   19208:	ldr	r2, [pc, #900]	; 19594 <__generate_code_for_binary_boolean_expression@@Base+0x1bd4>
   1920c:	ldr	r2, [pc, r2]
   19210:	sub	sp, fp, #28
   19214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19218:	b	11ffc <fprintf@plt>
   1921c:	ldr	lr, [pc, #888]	; 1959c <__generate_code_for_binary_boolean_expression@@Base+0x1bdc>
   19220:	ldr	ip, [pc, #888]	; 195a0 <__generate_code_for_binary_boolean_expression@@Base+0x1be0>
   19224:	add	lr, pc, lr
   19228:	add	ip, pc, ip
   1922c:	mov	r6, ip
   19230:	mov	r1, lr
   19234:	mov	ip, r7
   19238:	mov	r3, r4
   1923c:	ldr	r7, [sp, #8]
   19240:	ldr	r4, [sp, #4]
   19244:	ldr	r2, [sp, #16]
   19248:	mov	r9, #0
   1924c:	mov	r5, r8
   19250:	mov	lr, r1
   19254:	mov	r1, #1
   19258:	str	r4, [lr]
   1925c:	str	r2, [lr, #4]
   19260:	ldr	r2, [sp, #20]
   19264:	lsl	r8, ip, #1
   19268:	strb	r5, [r2, r4]!
   1926c:	mov	r5, r7
   19270:	strb	r1, [r2, #3]
   19274:	mov	r1, #161	; 0xa1
   19278:	strb	r9, [r2, #1]
   1927c:	mov	r9, r3
   19280:	strb	r1, [r2, #2]
   19284:	str	r9, [lr]
   19288:	str	r7, [lr, #4]
   1928c:	mov	r7, ip
   19290:	ldr	r3, [sp, #20]
   19294:	lsr	r1, r8, #16
   19298:	mov	ip, r3
   1929c:	strb	r8, [r3, r9]!
   192a0:	lsr	r4, r8, #24
   192a4:	lsr	r2, r8, #8
   192a8:	adds	r8, r9, #4
   192ac:	strb	r1, [r3, #2]
   192b0:	adc	r1, r5, #0
   192b4:	cmp	r7, #0
   192b8:	strb	r4, [r3, #3]
   192bc:	strb	r2, [r3, #1]
   192c0:	str	r8, [lr]
   192c4:	str	r1, [lr, #4]
   192c8:	str	r7, [sp, #24]
   192cc:	beq	1956c <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   192d0:	ldr	r7, [pc, #780]	; 195e4 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   192d4:	mov	r4, lr
   192d8:	mov	r2, r0
   192dc:	add	r7, pc, r7
   192e0:	str	r0, [sp, #12]
   192e4:	b	19380 <__generate_code_for_binary_boolean_expression@@Base+0x19c0>
   192e8:	mov	r7, ip
   192ec:	lsr	r2, r4, #24
   192f0:	strb	r4, [r7, r8]!
   192f4:	mov	lr, r6
   192f8:	lsr	r9, r4, #16
   192fc:	lsr	r6, r4, #8
   19300:	strb	r2, [r7, #3]
   19304:	adds	r2, r8, #4
   19308:	mov	r4, r0
   1930c:	strb	r9, [r7, #2]
   19310:	mov	r3, ip
   19314:	strb	r6, [r7, #1]
   19318:	adc	r9, r1, #0
   1931c:	stm	r4, {r2, r9}
   19320:	mov	ip, r3
   19324:	lsr	r1, r5, #16
   19328:	strb	r5, [r3, r2]!
   1932c:	lsr	r0, r5, #24
   19330:	lsr	r7, r5, #8
   19334:	adds	r8, r2, #4
   19338:	strb	r1, [r3, #2]
   1933c:	adc	r1, r9, #0
   19340:	strb	r0, [r3, #3]
   19344:	strb	r7, [r3, #1]
   19348:	str	r8, [r4]
   1934c:	str	r1, [r4, #4]
   19350:	ldr	r0, [sp, #24]
   19354:	ldr	r2, [sp, #16]
   19358:	mov	r6, lr
   1935c:	subs	r0, r0, #1
   19360:	str	r0, [sp, #24]
   19364:	ldr	sl, [sp, #20]
   19368:	ldr	r0, [sp, #12]
   1936c:	ldr	r7, [pc, #676]	; 19618 <__generate_code_for_binary_boolean_expression@@Base+0x1c58>
   19370:	add	r2, r2, #8
   19374:	add	sl, sl, #8
   19378:	add	r7, pc, r7
   1937c:	beq	1956c <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   19380:	cmp	r0, #0
   19384:	mov	r0, r4
   19388:	str	r2, [sp, #16]
   1938c:	beq	19398 <__generate_code_for_binary_boolean_expression@@Base+0x19d8>
   19390:	ldrd	r2, [r2]
   19394:	b	193a0 <__generate_code_for_binary_boolean_expression@@Base+0x19e0>
   19398:	mov	r2, #0
   1939c:	mov	r3, #0
   193a0:	ldrd	r4, [sl]
   193a4:	adds	r4, r4, r2
   193a8:	adc	r5, r5, r3
   193ac:	strd	r4, [sl]
   193b0:	ldrb	r2, [r6]
   193b4:	str	sl, [sp, #20]
   193b8:	cmp	r2, #0
   193bc:	beq	192e8 <__generate_code_for_binary_boolean_expression@@Base+0x1928>
   193c0:	ldr	r3, [r7, #4]
   193c4:	ldr	r6, [pc, #540]	; 195e8 <__generate_code_for_binary_boolean_expression@@Base+0x1c28>
   193c8:	adds	r2, r8, #4
   193cc:	adc	r9, r1, #0
   193d0:	ldr	r6, [pc, r6]
   193d4:	subs	r2, r6, r2
   193d8:	sbcs	r2, r3, r9
   193dc:	bcs	19488 <__generate_code_for_binary_boolean_expression@@Base+0x1ac8>
   193e0:	mov	r2, #3
   193e4:	orr	r2, r2, #131072	; 0x20000
   193e8:	adds	r0, r8, r2
   193ec:	adc	r1, r1, #0
   193f0:	mvn	r2, #0
   193f4:	and	r8, r1, r2
   193f8:	mov	r1, #16646144	; 0xfe0000
   193fc:	orr	r1, r1, #-16777216	; 0xff000000
   19400:	and	r6, r0, r1
   19404:	mov	r0, ip
   19408:	mov	r1, r6
   1940c:	bl	11f60 <realloc@plt>
   19410:	ldr	ip, [pc, #468]	; 195ec <__generate_code_for_binary_boolean_expression@@Base+0x1c2c>
   19414:	ldr	lr, [pc, #468]	; 195f0 <__generate_code_for_binary_boolean_expression@@Base+0x1c30>
   19418:	stm	r7, {r6, r8}
   1941c:	mov	r3, r0
   19420:	ldr	r0, [pc, #460]	; 195f4 <__generate_code_for_binary_boolean_expression@@Base+0x1c34>
   19424:	add	lr, pc, lr
   19428:	mov	r9, lr
   1942c:	add	r0, pc, r0
   19430:	add	ip, pc, ip
   19434:	str	r3, [r0]
   19438:	mov	lr, ip
   1943c:	ldrb	ip, [ip]
   19440:	ldr	r1, [r9, #4]
   19444:	ldr	r8, [pc, #428]	; 195f8 <__generate_code_for_binary_boolean_expression@@Base+0x1c38>
   19448:	mov	r7, r3
   1944c:	lsr	r2, r4, #24
   19450:	ldr	r8, [pc, r8]
   19454:	lsr	r6, r4, #16
   19458:	strb	r4, [r7, r8]!
   1945c:	strb	r2, [r7, #3]
   19460:	lsr	r2, r4, #8
   19464:	strb	r2, [r7, #1]
   19468:	adds	r2, r8, #4
   1946c:	mov	r4, r9
   19470:	adc	r9, r1, #0
   19474:	cmp	ip, #1
   19478:	strb	r6, [r7, #2]
   1947c:	stm	r4, {r2, r9}
   19480:	bne	19320 <__generate_code_for_binary_boolean_expression@@Base+0x1960>
   19484:	b	194bc <__generate_code_for_binary_boolean_expression@@Base+0x1afc>
   19488:	mov	r6, ip
   1948c:	lsr	r2, r4, #24
   19490:	strb	r4, [r6, r8]!
   19494:	lsr	r9, r4, #16
   19498:	lsr	r7, r4, #8
   1949c:	strb	r2, [r6, #3]
   194a0:	adds	r2, r8, #4
   194a4:	mov	r4, r0
   194a8:	strb	r9, [r6, #2]
   194ac:	mov	r3, ip
   194b0:	strb	r7, [r6, #1]
   194b4:	adc	r9, r1, #0
   194b8:	stm	r4, {r2, r9}
   194bc:	ldr	lr, [pc, #312]	; 195fc <__generate_code_for_binary_boolean_expression@@Base+0x1c3c>
   194c0:	mov	r0, r4
   194c4:	adds	r7, r8, #8
   194c8:	add	lr, pc, lr
   194cc:	adc	ip, r1, #0
   194d0:	ldr	r4, [lr, #4]
   194d4:	ldr	r6, [pc, #292]	; 19600 <__generate_code_for_binary_boolean_expression@@Base+0x1c40>
   194d8:	ldr	r6, [pc, r6]
   194dc:	subs	r7, r6, r7
   194e0:	sbcs	r7, r4, ip
   194e4:	bcs	1955c <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   194e8:	mov	r2, #3
   194ec:	orr	r2, r2, #131072	; 0x20000
   194f0:	adds	r0, r2, r8
   194f4:	adc	r1, r1, #0
   194f8:	adds	r0, r0, #4
   194fc:	adc	r1, r1, #0
   19500:	mvn	r2, #0
   19504:	and	r7, r1, r2
   19508:	mov	r1, #16646144	; 0xfe0000
   1950c:	orr	r1, r1, #-16777216	; 0xff000000
   19510:	and	r6, r0, r1
   19514:	mov	r0, r3
   19518:	mov	r1, r6
   1951c:	mov	r8, lr
   19520:	bl	11f60 <realloc@plt>
   19524:	ldr	lr, [pc, #220]	; 19608 <__generate_code_for_binary_boolean_expression@@Base+0x1c48>
   19528:	strd	r6, [r8]
   1952c:	mov	r3, r0
   19530:	add	lr, pc, lr
   19534:	mov	r4, lr
   19538:	ldr	r9, [lr, #4]
   1953c:	ldr	r0, [pc, #200]	; 1960c <__generate_code_for_binary_boolean_expression@@Base+0x1c4c>
   19540:	add	r0, pc, r0
   19544:	str	r3, [r0]
   19548:	ldr	r2, [pc, #192]	; 19610 <__generate_code_for_binary_boolean_expression@@Base+0x1c50>
   1954c:	ldr	r2, [pc, r2]
   19550:	ldr	lr, [pc, #188]	; 19614 <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   19554:	add	lr, pc, lr
   19558:	b	19320 <__generate_code_for_binary_boolean_expression@@Base+0x1960>
   1955c:	ldr	lr, [pc, #160]	; 19604 <__generate_code_for_binary_boolean_expression@@Base+0x1c44>
   19560:	mov	r4, r0
   19564:	add	lr, pc, lr
   19568:	b	19320 <__generate_code_for_binary_boolean_expression@@Base+0x1960>
   1956c:	sub	sp, fp, #28
   19570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19574:	b	11f18 <free@plt>
   19578:	andeq	r5, r1, r0, lsl r2
   1957c:	andeq	r5, r1, ip, lsl #4
   19580:	andeq	r5, r1, r0, lsl #4
   19584:	andeq	r5, r1, r4, ror #3
   19588:	ldrdeq	r5, [r1], -ip
   1958c:	andeq	r2, r0, sl, ror #16
   19590:			; <UNDEFINED> instruction: 0x00013ebc
   19594:	andeq	r4, r1, r4, lsr #29
   19598:	andeq	r2, r0, r8, lsr #17
   1959c:	andeq	r4, r1, r4, lsr #29
   195a0:	andeq	r4, r1, ip, lsl #29
   195a4:	andeq	r5, r1, r4, lsl r0
   195a8:	andeq	r4, r1, ip, ror #31
   195ac:	ldrdeq	r5, [r1], -r4
   195b0:	andeq	r5, r1, r0, asr #3
   195b4:	ldrdeq	r4, [r1], -r0
   195b8:			; <UNDEFINED> instruction: 0x00014fb4
   195bc:	andeq	r5, r1, ip, ror r1
   195c0:	andeq	r5, r1, ip, asr r1
   195c4:	andeq	r5, r1, ip, ror #2
   195c8:	andeq	r5, r1, ip, asr r1
   195cc:	andeq	r5, r1, r4, asr #2
   195d0:	andeq	r4, r1, r4, ror pc
   195d4:	andeq	r4, r1, r4, lsr #30
   195d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   195dc:	andeq	r4, r1, ip, lsl pc
   195e0:	strdeq	r4, [r1], -ip
   195e4:	andeq	r4, r1, r4, ror #27
   195e8:	strdeq	r4, [r1], -r0
   195ec:	andeq	r4, r1, r4, lsl #25
   195f0:	andeq	r4, r1, r4, lsr #25
   195f4:	muleq	r1, r0, ip
   195f8:	andeq	r4, r1, r8, ror ip
   195fc:	strdeq	r4, [r1], -r8
   19600:	andeq	r4, r1, r8, ror #23
   19604:	andeq	r4, r1, r0, asr fp
   19608:	muleq	r1, r8, fp
   1960c:	andeq	r4, r1, ip, ror fp
   19610:	andeq	r4, r1, ip, ror fp
   19614:	andeq	r4, r1, r0, ror #22
   19618:	andeq	r4, r1, r8, asr #26
   1961c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19620:	add	fp, sp, #28
   19624:	sub	sp, sp, #4
   19628:	ldr	r0, [pc, #3180]	; 1a29c <__generate_code_for_binary_boolean_expression@@Base+0x28dc>
   1962c:	ldr	r0, [pc, r0]
   19630:	cmp	r0, #0
   19634:	beq	19c90 <__generate_code_for_binary_boolean_expression@@Base+0x22d0>
   19638:	ldr	sl, [pc, #3168]	; 1a2a0 <__generate_code_for_binary_boolean_expression@@Base+0x28e0>
   1963c:	add	sl, pc, sl
   19640:	ldr	r6, [sl, #4]
   19644:	ldr	r5, [pc, #3160]	; 1a2a4 <__generate_code_for_binary_boolean_expression@@Base+0x28e4>
   19648:	ldr	r5, [pc, r5]
   1964c:	ldr	r8, [pc, #3156]	; 1a2a8 <__generate_code_for_binary_boolean_expression@@Base+0x28e8>
   19650:	add	r8, pc, r8
   19654:	ldrb	r0, [r8]
   19658:	cmp	r0, #0
   1965c:	beq	19720 <__generate_code_for_binary_boolean_expression@@Base+0x1d60>
   19660:	ldr	r9, [pc, #3164]	; 1a2c4 <__generate_code_for_binary_boolean_expression@@Base+0x2904>
   19664:	adds	r2, r5, #4
   19668:	adc	ip, r6, #0
   1966c:	add	r9, pc, r9
   19670:	ldr	r0, [r9, #4]
   19674:	ldr	r3, [pc, #3148]	; 1a2c8 <__generate_code_for_binary_boolean_expression@@Base+0x2908>
   19678:	ldr	r3, [pc, r3]
   1967c:	subs	r3, r3, r2
   19680:	sbcs	r0, r0, ip
   19684:	bcs	19774 <__generate_code_for_binary_boolean_expression@@Base+0x1db4>
   19688:	mov	r0, #7
   1968c:	orr	r0, r0, #131072	; 0x20000
   19690:	adds	r0, r0, r5
   19694:	adc	r1, r6, #0
   19698:	subs	r0, r0, #4
   1969c:	sbc	r1, r1, #0
   196a0:	mvn	r2, #0
   196a4:	and	r5, r1, r2
   196a8:	mov	r1, #16646144	; 0xfe0000
   196ac:	orr	r1, r1, #-16777216	; 0xff000000
   196b0:	ldr	r4, [pc, #3096]	; 1a2d0 <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   196b4:	and	r6, r0, r1
   196b8:	ldr	r0, [pc, #3092]	; 1a2d4 <__generate_code_for_binary_boolean_expression@@Base+0x2914>
   196bc:	mov	r1, r6
   196c0:	add	r4, pc, r4
   196c4:	ldr	r0, [pc, r0]
   196c8:	bl	11f60 <realloc@plt>
   196cc:	str	r6, [r9]
   196d0:	str	r5, [r9, #4]
   196d4:	str	r0, [r4]
   196d8:	ldrb	r3, [r8]
   196dc:	ldr	r6, [sl, #4]
   196e0:	ldr	r5, [pc, #3056]	; 1a2d8 <__generate_code_for_binary_boolean_expression@@Base+0x2918>
   196e4:	mov	r2, r0
   196e8:	mov	r1, #0
   196ec:	mov	r7, #161	; 0xa1
   196f0:	ldr	r5, [pc, r5]
   196f4:	strb	r1, [r2, r5]!
   196f8:	strb	r7, [r2, #3]
   196fc:	strb	r1, [r2, #2]
   19700:	strb	r1, [r2, #1]
   19704:	adds	r2, r5, #4
   19708:	adc	ip, r6, #0
   1970c:	mov	r7, #1
   19710:	cmp	r3, #1
   19714:	stm	sl, {r2, ip}
   19718:	beq	1979c <__generate_code_for_binary_boolean_expression@@Base+0x1ddc>
   1971c:	b	19974 <__generate_code_for_binary_boolean_expression@@Base+0x1fb4>
   19720:	ldr	r0, [pc, #2948]	; 1a2ac <__generate_code_for_binary_boolean_expression@@Base+0x28ec>
   19724:	ldr	r0, [pc, r0]
   19728:	mov	r1, r0
   1972c:	ldrb	r2, [r1, r5]!
   19730:	ldrb	r3, [r1, #1]
   19734:	ldrb	r7, [r1, #2]
   19738:	ldrb	r1, [r1, #3]
   1973c:	orr	r2, r2, r3, lsl #8
   19740:	orr	r2, r2, r7, lsl #16
   19744:	orr	r3, r2, r1, lsl #24
   19748:	adds	r2, r5, #4
   1974c:	adc	ip, r6, #0
   19750:	cmp	r3, #-1593835520	; 0xa1000000
   19754:	stm	sl, {r2, ip}
   19758:	beq	19914 <__generate_code_for_binary_boolean_expression@@Base+0x1f54>
   1975c:	mov	r7, #1
   19760:	cmn	r3, #1
   19764:	beq	19954 <__generate_code_for_binary_boolean_expression@@Base+0x1f94>
   19768:	ldr	r1, [pc, #2880]	; 1a2b0 <__generate_code_for_binary_boolean_expression@@Base+0x28f0>
   1976c:	add	r1, pc, r1
   19770:	b	1a054 <__generate_code_for_binary_boolean_expression@@Base+0x2694>
   19774:	ldr	r0, [pc, #2896]	; 1a2cc <__generate_code_for_binary_boolean_expression@@Base+0x290c>
   19778:	mov	r3, #0
   1977c:	mov	r4, #161	; 0xa1
   19780:	ldr	r0, [pc, r0]
   19784:	mov	r7, r0
   19788:	strb	r3, [r7, r5]!
   1978c:	strb	r4, [r7, #3]
   19790:	strb	r3, [r7, #2]
   19794:	strb	r3, [r7, #1]
   19798:	stm	sl, {r2, ip}
   1979c:	ldr	r4, [r9, #4]
   197a0:	ldr	r1, [pc, #2868]	; 1a2dc <__generate_code_for_binary_boolean_expression@@Base+0x291c>
   197a4:	adds	r3, r5, #8
   197a8:	adc	r7, r6, #0
   197ac:	ldr	r1, [pc, r1]
   197b0:	subs	r1, r1, r3
   197b4:	sbcs	r1, r4, r7
   197b8:	bcs	19844 <__generate_code_for_binary_boolean_expression@@Base+0x1e84>
   197bc:	mov	r1, #7
   197c0:	orr	r1, r1, #131072	; 0x20000
   197c4:	adds	r1, r5, r1
   197c8:	adc	r2, r6, #0
   197cc:	mvn	r3, #0
   197d0:	and	r5, r2, r3
   197d4:	mov	r2, #16646144	; 0xfe0000
   197d8:	orr	r2, r2, #-16777216	; 0xff000000
   197dc:	ldr	r4, [pc, #2812]	; 1a2e0 <__generate_code_for_binary_boolean_expression@@Base+0x2920>
   197e0:	and	r6, r1, r2
   197e4:	mov	r1, r6
   197e8:	add	r4, pc, r4
   197ec:	bl	11f60 <realloc@plt>
   197f0:	str	r6, [r9]
   197f4:	str	r5, [r9, #4]
   197f8:	str	r0, [r4]
   197fc:	ldrb	r1, [r8]
   19800:	ldr	ip, [sl, #4]
   19804:	ldr	r2, [pc, #2776]	; 1a2e4 <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   19808:	mov	r7, r0
   1980c:	mov	r3, #9
   19810:	ldr	r2, [pc, r2]
   19814:	strb	r3, [r7, r2]!
   19818:	mov	r3, #0
   1981c:	strb	r3, [r7, #3]
   19820:	strb	r3, [r7, #2]
   19824:	strb	r3, [r7, #1]
   19828:	adds	r3, r2, #4
   1982c:	adc	r5, ip, #0
   19830:	mov	r7, #1
   19834:	cmp	r1, #1
   19838:	stm	sl, {r3, r5}
   1983c:	beq	1986c <__generate_code_for_binary_boolean_expression@@Base+0x1eac>
   19840:	b	1999c <__generate_code_for_binary_boolean_expression@@Base+0x1fdc>
   19844:	mov	r3, r0
   19848:	mov	r1, #9
   1984c:	strb	r1, [r3, r2]!
   19850:	mov	r1, #0
   19854:	strb	r1, [r3, #3]
   19858:	strb	r1, [r3, #2]
   1985c:	strb	r1, [r3, #1]
   19860:	adds	r3, r2, #4
   19864:	adc	r5, ip, #0
   19868:	stm	sl, {r3, r5}
   1986c:	ldr	r6, [r9, #4]
   19870:	ldr	r4, [pc, #2672]	; 1a2e8 <__generate_code_for_binary_boolean_expression@@Base+0x2928>
   19874:	adds	r1, r2, #8
   19878:	adc	r7, ip, #0
   1987c:	ldr	r4, [pc, r4]
   19880:	subs	r1, r4, r1
   19884:	sbcs	r1, r6, r7
   19888:	bcs	19d60 <__generate_code_for_binary_boolean_expression@@Base+0x23a0>
   1988c:	mov	r1, #7
   19890:	orr	r1, r1, #131072	; 0x20000
   19894:	adds	r1, r2, r1
   19898:	adc	r2, ip, #0
   1989c:	mvn	r3, #0
   198a0:	and	r5, r2, r3
   198a4:	mov	r2, #16646144	; 0xfe0000
   198a8:	orr	r2, r2, #-16777216	; 0xff000000
   198ac:	ldr	r4, [pc, #2616]	; 1a2ec <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   198b0:	and	r6, r1, r2
   198b4:	mov	r1, r6
   198b8:	add	r4, pc, r4
   198bc:	bl	11f60 <realloc@plt>
   198c0:	str	r6, [r9]
   198c4:	str	r5, [r9, #4]
   198c8:	str	r0, [r4]
   198cc:	ldrb	r2, [r8]
   198d0:	ldr	r5, [sl, #4]
   198d4:	ldr	r3, [pc, #2580]	; 1a2f0 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   198d8:	mov	r7, r0
   198dc:	mov	r1, #0
   198e0:	ldr	r3, [pc, r3]
   198e4:	adds	r6, r3, #4
   198e8:	strb	r1, [r7, r3]!
   198ec:	str	r6, [sl]
   198f0:	strb	r1, [r7, #3]
   198f4:	strb	r1, [r7, #2]
   198f8:	strb	r1, [r7, #1]
   198fc:	adc	r1, r5, #0
   19900:	mov	r7, #1
   19904:	cmp	r2, #1
   19908:	str	r1, [sl, #4]
   1990c:	bne	199c4 <__generate_code_for_binary_boolean_expression@@Base+0x2004>
   19910:	b	19d88 <__generate_code_for_binary_boolean_expression@@Base+0x23c8>
   19914:	ldr	r3, [r0, r2]
   19918:	adds	r4, r5, #8
   1991c:	adc	r7, r6, #0
   19920:	cmp	r3, #9
   19924:	stm	sl, {r4, r7}
   19928:	bne	1a04c <__generate_code_for_binary_boolean_expression@@Base+0x268c>
   1992c:	ldr	r3, [pc, #2444]	; 1a2c0 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   19930:	adds	r4, r5, #20
   19934:	adc	r7, r6, #0
   19938:	add	r3, pc, r3
   1993c:	add	r6, r5, r0
   19940:	ldrb	r3, [r3]
   19944:	ldr	r6, [r6, #16]
   19948:	stm	sl, {r4, r7}
   1994c:	eor	r3, r3, #1
   19950:	add	r7, r6, r3
   19954:	mov	r6, r0
   19958:	mov	r3, #0
   1995c:	strb	r3, [r6, r5]!
   19960:	mov	r5, #161	; 0xa1
   19964:	strb	r5, [r6, #3]
   19968:	strb	r3, [r6, #2]
   1996c:	strb	r3, [r6, #1]
   19970:	stm	sl, {r2, ip}
   19974:	mov	r3, r0
   19978:	mov	r1, #9
   1997c:	strb	r1, [r3, r2]!
   19980:	mov	r1, #0
   19984:	strb	r1, [r3, #3]
   19988:	strb	r1, [r3, #2]
   1998c:	strb	r1, [r3, #1]
   19990:	adds	r3, r2, #4
   19994:	adc	r5, ip, #0
   19998:	stm	sl, {r3, r5}
   1999c:	mov	r2, r0
   199a0:	mov	r1, #0
   199a4:	strb	r1, [r2, r3]!
   199a8:	adds	r6, r3, #4
   199ac:	strb	r1, [r2, #3]
   199b0:	strb	r1, [r2, #2]
   199b4:	strb	r1, [r2, #1]
   199b8:	adc	r1, r5, #0
   199bc:	str	r6, [sl]
   199c0:	str	r1, [sl, #4]
   199c4:	mov	r3, r0
   199c8:	mov	r2, #0
   199cc:	strb	r2, [r3, r6]!
   199d0:	strb	r2, [r3, #3]
   199d4:	strb	r2, [r3, #2]
   199d8:	strb	r2, [r3, #1]
   199dc:	adds	r2, r6, #4
   199e0:	adc	r3, r1, #0
   199e4:	strd	r2, [sl]
   199e8:	lsr	r1, r7, #24
   199ec:	strb	r7, [r0, r2]!
   199f0:	lsr	r6, r7, #16
   199f4:	lsr	r5, r7, #8
   199f8:	strb	r1, [r0, #3]
   199fc:	strb	r6, [r0, #2]
   19a00:	strb	r5, [r0, #1]
   19a04:	ldrb	r0, [r8]
   19a08:	adds	r4, r2, #4
   19a0c:	adc	r5, r3, #0
   19a10:	cmp	r0, #0
   19a14:	strd	r4, [sl]
   19a18:	beq	19acc <__generate_code_for_binary_boolean_expression@@Base+0x210c>
   19a1c:	ldr	r9, [pc, #2284]	; 1a310 <__generate_code_for_binary_boolean_expression@@Base+0x2950>
   19a20:	adds	r0, r2, #8
   19a24:	adc	r1, r3, #0
   19a28:	add	r9, pc, r9
   19a2c:	ldr	r7, [r9, #4]
   19a30:	ldr	r6, [pc, #2268]	; 1a314 <__generate_code_for_binary_boolean_expression@@Base+0x2954>
   19a34:	ldr	r6, [pc, r6]
   19a38:	subs	r0, r6, r0
   19a3c:	sbcs	r0, r7, r1
   19a40:	bcs	19c98 <__generate_code_for_binary_boolean_expression@@Base+0x22d8>
   19a44:	mov	r0, #7
   19a48:	orr	r0, r0, #131072	; 0x20000
   19a4c:	adds	r0, r2, r0
   19a50:	adc	r1, r3, #0
   19a54:	mvn	r2, #0
   19a58:	and	r5, r1, r2
   19a5c:	mov	r1, #16646144	; 0xfe0000
   19a60:	orr	r1, r1, #-16777216	; 0xff000000
   19a64:	ldr	r4, [pc, #2268]	; 1a348 <__generate_code_for_binary_boolean_expression@@Base+0x2988>
   19a68:	and	r6, r0, r1
   19a6c:	ldr	r0, [pc, #2264]	; 1a34c <__generate_code_for_binary_boolean_expression@@Base+0x298c>
   19a70:	mov	r1, r6
   19a74:	add	r4, pc, r4
   19a78:	ldr	r0, [pc, r0]
   19a7c:	bl	11f60 <realloc@plt>
   19a80:	str	r6, [r9]
   19a84:	str	r5, [r9, #4]
   19a88:	str	r0, [r4]
   19a8c:	ldrb	r1, [r8]
   19a90:	ldr	r5, [sl, #4]
   19a94:	ldr	r4, [pc, #2228]	; 1a350 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   19a98:	mov	r3, r0
   19a9c:	mov	r2, #0
   19aa0:	ldr	r4, [pc, r4]
   19aa4:	strb	r2, [r3, r4]!
   19aa8:	strb	r2, [r3, #3]
   19aac:	strb	r2, [r3, #2]
   19ab0:	strb	r2, [r3, #1]
   19ab4:	adds	r2, r4, #4
   19ab8:	adc	r3, r5, #0
   19abc:	cmp	r1, #0
   19ac0:	strd	r2, [sl]
   19ac4:	beq	19af8 <__generate_code_for_binary_boolean_expression@@Base+0x2138>
   19ac8:	b	19cc4 <__generate_code_for_binary_boolean_expression@@Base+0x2304>
   19acc:	ldr	r0, [pc, #2104]	; 1a30c <__generate_code_for_binary_boolean_expression@@Base+0x294c>
   19ad0:	adds	r2, r2, #8
   19ad4:	mov	r1, #0
   19ad8:	adc	r3, r3, #0
   19adc:	ldr	r0, [pc, r0]
   19ae0:	mov	r7, r0
   19ae4:	strb	r1, [r7, r4]!
   19ae8:	strb	r1, [r7, #3]
   19aec:	strb	r1, [r7, #2]
   19af0:	strb	r1, [r7, #1]
   19af4:	strd	r2, [sl]
   19af8:	mov	r7, r0
   19afc:	mov	r1, #0
   19b00:	strb	r1, [r7, r2]!
   19b04:	strb	r1, [r7, #3]
   19b08:	strb	r1, [r7, #2]
   19b0c:	strb	r1, [r7, #1]
   19b10:	adds	r1, r2, #4
   19b14:	adc	r5, r3, #0
   19b18:	stm	sl, {r1, r5}
   19b1c:	mov	r3, r0
   19b20:	mov	r2, #0
   19b24:	strb	r2, [r3, r1]!
   19b28:	strb	r2, [r3, #3]
   19b2c:	strb	r2, [r3, #2]
   19b30:	strb	r2, [r3, #1]
   19b34:	adds	r2, r1, #4
   19b38:	adc	r3, r5, #0
   19b3c:	strd	r2, [sl]
   19b40:	mov	r7, r0
   19b44:	mov	r1, #0
   19b48:	strb	r1, [r7, r2]!
   19b4c:	strb	r1, [r7, #3]
   19b50:	strb	r1, [r7, #2]
   19b54:	strb	r1, [r7, #1]
   19b58:	adds	r1, r2, #4
   19b5c:	adc	r5, r3, #0
   19b60:	stm	sl, {r1, r5}
   19b64:	mov	r3, r0
   19b68:	mov	r2, #0
   19b6c:	strb	r2, [r3, r1]!
   19b70:	adds	r4, r1, #4
   19b74:	strb	r2, [r3, #3]
   19b78:	strb	r2, [r3, #2]
   19b7c:	strb	r2, [r3, #1]
   19b80:	adc	r3, r5, #0
   19b84:	str	r4, [sl]
   19b88:	str	r3, [sl, #4]
   19b8c:	mov	r2, r0
   19b90:	mov	r1, #0
   19b94:	strb	r1, [r2, r4]!
   19b98:	strb	r1, [r2, #3]
   19b9c:	strb	r1, [r2, #2]
   19ba0:	strb	r1, [r2, #1]
   19ba4:	adds	r2, r4, #4
   19ba8:	adc	r1, r3, #0
   19bac:	str	r2, [sl]
   19bb0:	str	r1, [sl, #4]
   19bb4:	mov	r3, r0
   19bb8:	mov	r4, #0
   19bbc:	strb	r4, [r3, r2]!
   19bc0:	mov	r7, #163	; 0xa3
   19bc4:	strb	r7, [r3, #3]
   19bc8:	strb	r4, [r3, #2]
   19bcc:	strb	r4, [r3, #1]
   19bd0:	ldrb	r7, [r8]
   19bd4:	adds	r6, r2, #4
   19bd8:	adc	r3, r1, #0
   19bdc:	cmp	r7, #1
   19be0:	str	r6, [sl]
   19be4:	str	r3, [sl, #4]
   19be8:	bne	19c5c <__generate_code_for_binary_boolean_expression@@Base+0x229c>
   19bec:	ldr	r8, [pc, #1852]	; 1a330 <__generate_code_for_binary_boolean_expression@@Base+0x2970>
   19bf0:	adds	lr, r2, #8
   19bf4:	adc	ip, r1, #0
   19bf8:	add	r8, pc, r8
   19bfc:	ldr	r5, [r8, #4]
   19c00:	ldr	r7, [pc, #1836]	; 1a334 <__generate_code_for_binary_boolean_expression@@Base+0x2974>
   19c04:	ldr	r7, [pc, r7]
   19c08:	subs	r7, r7, lr
   19c0c:	sbcs	r7, r5, ip
   19c10:	bcs	19c5c <__generate_code_for_binary_boolean_expression@@Base+0x229c>
   19c14:	mov	r3, #7
   19c18:	orr	r3, r3, #131072	; 0x20000
   19c1c:	adds	r2, r2, r3
   19c20:	adc	r1, r1, #0
   19c24:	mvn	r3, #0
   19c28:	and	r7, r1, r3
   19c2c:	mov	r1, #16646144	; 0xfe0000
   19c30:	orr	r1, r1, #-16777216	; 0xff000000
   19c34:	ldr	r5, [pc, #1788]	; 1a338 <__generate_code_for_binary_boolean_expression@@Base+0x2978>
   19c38:	and	r6, r2, r1
   19c3c:	mov	r1, r6
   19c40:	add	r5, pc, r5
   19c44:	bl	11f60 <realloc@plt>
   19c48:	strd	r6, [r8]
   19c4c:	str	r0, [r5]
   19c50:	ldr	r3, [sl, #4]
   19c54:	ldr	r6, [pc, #1760]	; 1a33c <__generate_code_for_binary_boolean_expression@@Base+0x297c>
   19c58:	ldr	r6, [pc, r6]
   19c5c:	ldr	r0, [pc, #1756]	; 1a340 <__generate_code_for_binary_boolean_expression@@Base+0x2980>
   19c60:	ldr	r1, [pc, #1756]	; 1a344 <__generate_code_for_binary_boolean_expression@@Base+0x2984>
   19c64:	adds	r2, r6, #4
   19c68:	add	r0, pc, r0
   19c6c:	adc	r3, r3, #0
   19c70:	ldr	r1, [pc, r1]
   19c74:	strb	r4, [r1, r6]!
   19c78:	strb	r4, [r1, #3]
   19c7c:	strb	r4, [r1, #2]
   19c80:	strb	r4, [r1, #1]
   19c84:	mov	r1, #1
   19c88:	strd	r2, [sl]
   19c8c:	strb	r1, [r0]
   19c90:	sub	sp, fp, #28
   19c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c98:	ldr	r0, [pc, #1656]	; 1a318 <__generate_code_for_binary_boolean_expression@@Base+0x2958>
   19c9c:	adds	r2, r2, #8
   19ca0:	mov	r1, #0
   19ca4:	adc	r3, r3, #0
   19ca8:	ldr	r0, [pc, r0]
   19cac:	mov	r7, r0
   19cb0:	strb	r1, [r7, r4]!
   19cb4:	strb	r1, [r7, #3]
   19cb8:	strb	r1, [r7, #2]
   19cbc:	strb	r1, [r7, #1]
   19cc0:	strd	r2, [sl]
   19cc4:	ldr	r6, [r9, #4]
   19cc8:	ldr	r1, [pc, #1668]	; 1a354 <__generate_code_for_binary_boolean_expression@@Base+0x2994>
   19ccc:	adds	ip, r4, #8
   19cd0:	adc	r7, r5, #0
   19cd4:	ldr	r1, [pc, r1]
   19cd8:	subs	r1, r1, ip
   19cdc:	sbcs	r1, r6, r7
   19ce0:	bcs	19e2c <__generate_code_for_binary_boolean_expression@@Base+0x246c>
   19ce4:	mov	r1, #7
   19ce8:	orr	r1, r1, #131072	; 0x20000
   19cec:	adds	r1, r4, r1
   19cf0:	adc	r2, r5, #0
   19cf4:	mvn	r3, #0
   19cf8:	and	r5, r2, r3
   19cfc:	mov	r2, #16646144	; 0xfe0000
   19d00:	orr	r2, r2, #-16777216	; 0xff000000
   19d04:	ldr	r6, [pc, #1612]	; 1a358 <__generate_code_for_binary_boolean_expression@@Base+0x2998>
   19d08:	and	r4, r1, r2
   19d0c:	mov	r1, r4
   19d10:	add	r6, pc, r6
   19d14:	bl	11f60 <realloc@plt>
   19d18:	str	r0, [r6]
   19d1c:	strd	r4, [r9]
   19d20:	ldrb	r7, [r8]
   19d24:	ldr	r3, [sl, #4]
   19d28:	ldr	r2, [pc, #1580]	; 1a35c <__generate_code_for_binary_boolean_expression@@Base+0x299c>
   19d2c:	mov	r6, r0
   19d30:	mov	r1, #0
   19d34:	ldr	r2, [pc, r2]
   19d38:	strb	r1, [r6, r2]!
   19d3c:	strb	r1, [r6, #3]
   19d40:	strb	r1, [r6, #2]
   19d44:	strb	r1, [r6, #1]
   19d48:	adds	r1, r2, #4
   19d4c:	adc	r5, r3, #0
   19d50:	cmp	r7, #1
   19d54:	stm	sl, {r1, r5}
   19d58:	bne	19b1c <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19d5c:	b	19e50 <__generate_code_for_binary_boolean_expression@@Base+0x2490>
   19d60:	mov	r2, r0
   19d64:	mov	r1, #0
   19d68:	strb	r1, [r2, r3]!
   19d6c:	adds	r6, r3, #4
   19d70:	strb	r1, [r2, #3]
   19d74:	strb	r1, [r2, #2]
   19d78:	strb	r1, [r2, #1]
   19d7c:	adc	r1, r5, #0
   19d80:	str	r6, [sl]
   19d84:	str	r1, [sl, #4]
   19d88:	ldr	r4, [r9, #4]
   19d8c:	ldr	r2, [pc, #1376]	; 1a2f4 <__generate_code_for_binary_boolean_expression@@Base+0x2934>
   19d90:	adds	ip, r3, #8
   19d94:	adc	r7, r5, #0
   19d98:	ldr	r2, [pc, r2]
   19d9c:	subs	r2, r2, ip
   19da0:	sbcs	r2, r4, r7
   19da4:	bcs	19ef0 <__generate_code_for_binary_boolean_expression@@Base+0x2530>
   19da8:	mov	r1, #7
   19dac:	orr	r1, r1, #131072	; 0x20000
   19db0:	adds	r1, r3, r1
   19db4:	adc	r2, r5, #0
   19db8:	mvn	r3, #0
   19dbc:	and	r5, r2, r3
   19dc0:	mov	r2, #16646144	; 0xfe0000
   19dc4:	orr	r2, r2, #-16777216	; 0xff000000
   19dc8:	ldr	r4, [pc, #1320]	; 1a2f8 <__generate_code_for_binary_boolean_expression@@Base+0x2938>
   19dcc:	and	r6, r1, r2
   19dd0:	mov	r1, r6
   19dd4:	add	r4, pc, r4
   19dd8:	bl	11f60 <realloc@plt>
   19ddc:	str	r6, [r9]
   19de0:	str	r5, [r9, #4]
   19de4:	str	r0, [r4]
   19de8:	ldrb	r5, [r8]
   19dec:	ldr	r1, [sl, #4]
   19df0:	ldr	r6, [pc, #1284]	; 1a2fc <__generate_code_for_binary_boolean_expression@@Base+0x293c>
   19df4:	mov	r3, r0
   19df8:	mov	r2, #0
   19dfc:	mov	r7, #1
   19e00:	ldr	r6, [pc, r6]
   19e04:	strb	r2, [r3, r6]!
   19e08:	strb	r2, [r3, #3]
   19e0c:	strb	r2, [r3, #2]
   19e10:	strb	r2, [r3, #1]
   19e14:	adds	r2, r6, #4
   19e18:	adc	r3, r1, #0
   19e1c:	cmp	r5, #1
   19e20:	strd	r2, [sl]
   19e24:	bne	199e8 <__generate_code_for_binary_boolean_expression@@Base+0x2028>
   19e28:	b	19f14 <__generate_code_for_binary_boolean_expression@@Base+0x2554>
   19e2c:	mov	r7, r0
   19e30:	mov	r1, #0
   19e34:	strb	r1, [r7, r2]!
   19e38:	strb	r1, [r7, #3]
   19e3c:	strb	r1, [r7, #2]
   19e40:	strb	r1, [r7, #1]
   19e44:	adds	r1, r2, #4
   19e48:	adc	r5, r3, #0
   19e4c:	stm	sl, {r1, r5}
   19e50:	ldr	r4, [r9, #4]
   19e54:	ldr	r6, [pc, #1284]	; 1a360 <__generate_code_for_binary_boolean_expression@@Base+0x29a0>
   19e58:	adds	r7, r2, #8
   19e5c:	adc	ip, r3, #0
   19e60:	ldr	r6, [pc, r6]
   19e64:	subs	r7, r6, r7
   19e68:	sbcs	r7, r4, ip
   19e6c:	bcs	19f88 <__generate_code_for_binary_boolean_expression@@Base+0x25c8>
   19e70:	mov	r1, #7
   19e74:	orr	r1, r1, #131072	; 0x20000
   19e78:	adds	r1, r2, r1
   19e7c:	adc	r2, r3, #0
   19e80:	mvn	r3, #0
   19e84:	and	r5, r2, r3
   19e88:	mov	r2, #16646144	; 0xfe0000
   19e8c:	orr	r2, r2, #-16777216	; 0xff000000
   19e90:	ldr	r4, [pc, #1228]	; 1a364 <__generate_code_for_binary_boolean_expression@@Base+0x29a4>
   19e94:	and	r6, r1, r2
   19e98:	mov	r1, r6
   19e9c:	add	r4, pc, r4
   19ea0:	bl	11f60 <realloc@plt>
   19ea4:	str	r6, [r9]
   19ea8:	str	r5, [r9, #4]
   19eac:	str	r0, [r4]
   19eb0:	ldrb	r7, [r8]
   19eb4:	ldr	r5, [sl, #4]
   19eb8:	ldr	r1, [pc, #1192]	; 1a368 <__generate_code_for_binary_boolean_expression@@Base+0x29a8>
   19ebc:	mov	r3, r0
   19ec0:	mov	r2, #0
   19ec4:	ldr	r1, [pc, r1]
   19ec8:	strb	r2, [r3, r1]!
   19ecc:	strb	r2, [r3, #3]
   19ed0:	strb	r2, [r3, #2]
   19ed4:	strb	r2, [r3, #1]
   19ed8:	adds	r2, r1, #4
   19edc:	adc	r3, r5, #0
   19ee0:	cmp	r7, #1
   19ee4:	strd	r2, [sl]
   19ee8:	bne	19b40 <__generate_code_for_binary_boolean_expression@@Base+0x2180>
   19eec:	b	19fac <__generate_code_for_binary_boolean_expression@@Base+0x25ec>
   19ef0:	mov	r3, r0
   19ef4:	mov	r2, #0
   19ef8:	strb	r2, [r3, r6]!
   19efc:	strb	r2, [r3, #3]
   19f00:	strb	r2, [r3, #2]
   19f04:	strb	r2, [r3, #1]
   19f08:	adds	r2, r6, #4
   19f0c:	adc	r3, r1, #0
   19f10:	strd	r2, [sl]
   19f14:	ldr	r4, [r9, #4]
   19f18:	ldr	r5, [pc, #992]	; 1a300 <__generate_code_for_binary_boolean_expression@@Base+0x2940>
   19f1c:	adds	lr, r6, #8
   19f20:	adc	ip, r1, #0
   19f24:	mov	r7, #1
   19f28:	ldr	r5, [pc, r5]
   19f2c:	subs	r5, r5, lr
   19f30:	sbcs	r5, r4, ip
   19f34:	bcs	199e8 <__generate_code_for_binary_boolean_expression@@Base+0x2028>
   19f38:	mov	r2, #7
   19f3c:	orr	r2, r2, #131072	; 0x20000
   19f40:	adds	r2, r6, r2
   19f44:	adc	r1, r1, #0
   19f48:	mvn	r3, #0
   19f4c:	and	r5, r1, r3
   19f50:	mov	r1, #16646144	; 0xfe0000
   19f54:	orr	r1, r1, #-16777216	; 0xff000000
   19f58:	ldr	r4, [pc, #932]	; 1a304 <__generate_code_for_binary_boolean_expression@@Base+0x2944>
   19f5c:	and	r6, r2, r1
   19f60:	mov	r1, r6
   19f64:	add	r4, pc, r4
   19f68:	bl	11f60 <realloc@plt>
   19f6c:	str	r6, [r9]
   19f70:	str	r5, [r9, #4]
   19f74:	str	r0, [r4]
   19f78:	ldr	r3, [sl, #4]
   19f7c:	ldr	r2, [pc, #900]	; 1a308 <__generate_code_for_binary_boolean_expression@@Base+0x2948>
   19f80:	ldr	r2, [pc, r2]
   19f84:	b	199e8 <__generate_code_for_binary_boolean_expression@@Base+0x2028>
   19f88:	mov	r3, r0
   19f8c:	mov	r2, #0
   19f90:	strb	r2, [r3, r1]!
   19f94:	strb	r2, [r3, #3]
   19f98:	strb	r2, [r3, #2]
   19f9c:	strb	r2, [r3, #1]
   19fa0:	adds	r2, r1, #4
   19fa4:	adc	r3, r5, #0
   19fa8:	strd	r2, [sl]
   19fac:	ldr	r4, [r9, #4]
   19fb0:	ldr	r6, [pc, #948]	; 1a36c <__generate_code_for_binary_boolean_expression@@Base+0x29ac>
   19fb4:	adds	r7, r1, #8
   19fb8:	adc	ip, r5, #0
   19fbc:	ldr	r6, [pc, r6]
   19fc0:	subs	r7, r6, r7
   19fc4:	sbcs	r7, r4, ip
   19fc8:	bcs	1a074 <__generate_code_for_binary_boolean_expression@@Base+0x26b4>
   19fcc:	mov	r2, #7
   19fd0:	orr	r2, r2, #131072	; 0x20000
   19fd4:	adds	r1, r1, r2
   19fd8:	adc	r2, r5, #0
   19fdc:	mvn	r3, #0
   19fe0:	and	r5, r2, r3
   19fe4:	mov	r2, #16646144	; 0xfe0000
   19fe8:	orr	r2, r2, #-16777216	; 0xff000000
   19fec:	ldr	r4, [pc, #892]	; 1a370 <__generate_code_for_binary_boolean_expression@@Base+0x29b0>
   19ff0:	and	r6, r1, r2
   19ff4:	mov	r1, r6
   19ff8:	add	r4, pc, r4
   19ffc:	bl	11f60 <realloc@plt>
   1a000:	str	r6, [r9]
   1a004:	str	r5, [r9, #4]
   1a008:	str	r0, [r4]
   1a00c:	ldrb	r7, [r8]
   1a010:	ldr	r3, [sl, #4]
   1a014:	ldr	r2, [pc, #856]	; 1a374 <__generate_code_for_binary_boolean_expression@@Base+0x29b4>
   1a018:	mov	r6, r0
   1a01c:	mov	r1, #0
   1a020:	ldr	r2, [pc, r2]
   1a024:	strb	r1, [r6, r2]!
   1a028:	strb	r1, [r6, #3]
   1a02c:	strb	r1, [r6, #2]
   1a030:	strb	r1, [r6, #1]
   1a034:	adds	r1, r2, #4
   1a038:	adc	r5, r3, #0
   1a03c:	cmp	r7, #1
   1a040:	stm	sl, {r1, r5}
   1a044:	bne	19b64 <__generate_code_for_binary_boolean_expression@@Base+0x21a4>
   1a048:	b	1a098 <__generate_code_for_binary_boolean_expression@@Base+0x26d8>
   1a04c:	ldr	r1, [pc, #616]	; 1a2bc <__generate_code_for_binary_boolean_expression@@Base+0x28fc>
   1a050:	add	r1, pc, r1
   1a054:	ldr	r0, [pc, #600]	; 1a2b4 <__generate_code_for_binary_boolean_expression@@Base+0x28f4>
   1a058:	ldr	r0, [pc, r0]
   1a05c:	ldr	r0, [r0]
   1a060:	ldr	r2, [pc, #592]	; 1a2b8 <__generate_code_for_binary_boolean_expression@@Base+0x28f8>
   1a064:	ldr	r2, [pc, r2]
   1a068:	sub	sp, fp, #28
   1a06c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a070:	b	11ffc <fprintf@plt>
   1a074:	mov	r7, r0
   1a078:	mov	r1, #0
   1a07c:	strb	r1, [r7, r2]!
   1a080:	strb	r1, [r7, #3]
   1a084:	strb	r1, [r7, #2]
   1a088:	strb	r1, [r7, #1]
   1a08c:	adds	r1, r2, #4
   1a090:	adc	r5, r3, #0
   1a094:	stm	sl, {r1, r5}
   1a098:	ldr	r4, [r9, #4]
   1a09c:	ldr	r6, [pc, #724]	; 1a378 <__generate_code_for_binary_boolean_expression@@Base+0x29b8>
   1a0a0:	adds	r7, r2, #8
   1a0a4:	adc	ip, r3, #0
   1a0a8:	ldr	r6, [pc, r6]
   1a0ac:	subs	r7, r6, r7
   1a0b0:	sbcs	r7, r4, ip
   1a0b4:	bcs	1a13c <__generate_code_for_binary_boolean_expression@@Base+0x277c>
   1a0b8:	mov	r1, #7
   1a0bc:	orr	r1, r1, #131072	; 0x20000
   1a0c0:	adds	r1, r2, r1
   1a0c4:	adc	r2, r3, #0
   1a0c8:	mvn	r3, #0
   1a0cc:	and	r5, r2, r3
   1a0d0:	mov	r2, #16646144	; 0xfe0000
   1a0d4:	orr	r2, r2, #-16777216	; 0xff000000
   1a0d8:	ldr	r4, [pc, #668]	; 1a37c <__generate_code_for_binary_boolean_expression@@Base+0x29bc>
   1a0dc:	and	r6, r1, r2
   1a0e0:	mov	r1, r6
   1a0e4:	add	r4, pc, r4
   1a0e8:	bl	11f60 <realloc@plt>
   1a0ec:	str	r6, [r9]
   1a0f0:	str	r5, [r9, #4]
   1a0f4:	str	r0, [r4]
   1a0f8:	ldrb	r2, [r8]
   1a0fc:	ldr	r5, [sl, #4]
   1a100:	ldr	r1, [pc, #632]	; 1a380 <__generate_code_for_binary_boolean_expression@@Base+0x29c0>
   1a104:	mov	r7, r0
   1a108:	mov	r3, #0
   1a10c:	ldr	r1, [pc, r1]
   1a110:	adds	r4, r1, #4
   1a114:	strb	r3, [r7, r1]!
   1a118:	str	r4, [sl]
   1a11c:	strb	r3, [r7, #3]
   1a120:	strb	r3, [r7, #2]
   1a124:	strb	r3, [r7, #1]
   1a128:	adc	r3, r5, #0
   1a12c:	cmp	r2, #1
   1a130:	str	r3, [sl, #4]
   1a134:	bne	19b8c <__generate_code_for_binary_boolean_expression@@Base+0x21cc>
   1a138:	b	1a164 <__generate_code_for_binary_boolean_expression@@Base+0x27a4>
   1a13c:	mov	r3, r0
   1a140:	mov	r2, #0
   1a144:	strb	r2, [r3, r1]!
   1a148:	adds	r4, r1, #4
   1a14c:	strb	r2, [r3, #3]
   1a150:	strb	r2, [r3, #2]
   1a154:	strb	r2, [r3, #1]
   1a158:	adc	r3, r5, #0
   1a15c:	str	r4, [sl]
   1a160:	str	r3, [sl, #4]
   1a164:	ldr	r6, [r9, #4]
   1a168:	ldr	r2, [pc, #532]	; 1a384 <__generate_code_for_binary_boolean_expression@@Base+0x29c4>
   1a16c:	adds	ip, r1, #8
   1a170:	adc	r7, r5, #0
   1a174:	ldr	r2, [pc, r2]
   1a178:	subs	r2, r2, ip
   1a17c:	sbcs	r2, r6, r7
   1a180:	bcs	1a208 <__generate_code_for_binary_boolean_expression@@Base+0x2848>
   1a184:	mov	r2, #7
   1a188:	orr	r2, r2, #131072	; 0x20000
   1a18c:	adds	r1, r1, r2
   1a190:	adc	r2, r5, #0
   1a194:	mvn	r3, #0
   1a198:	and	r5, r2, r3
   1a19c:	mov	r2, #16646144	; 0xfe0000
   1a1a0:	orr	r2, r2, #-16777216	; 0xff000000
   1a1a4:	ldr	r4, [pc, #368]	; 1a31c <__generate_code_for_binary_boolean_expression@@Base+0x295c>
   1a1a8:	and	r6, r1, r2
   1a1ac:	mov	r1, r6
   1a1b0:	add	r4, pc, r4
   1a1b4:	bl	11f60 <realloc@plt>
   1a1b8:	str	r6, [r9]
   1a1bc:	str	r5, [r9, #4]
   1a1c0:	str	r0, [r4]
   1a1c4:	ldrb	r7, [r8]
   1a1c8:	ldr	r3, [sl, #4]
   1a1cc:	ldr	r4, [pc, #332]	; 1a320 <__generate_code_for_binary_boolean_expression@@Base+0x2960>
   1a1d0:	mov	r2, r0
   1a1d4:	mov	r1, #0
   1a1d8:	ldr	r4, [pc, r4]
   1a1dc:	strb	r1, [r2, r4]!
   1a1e0:	strb	r1, [r2, #3]
   1a1e4:	strb	r1, [r2, #2]
   1a1e8:	strb	r1, [r2, #1]
   1a1ec:	adds	r2, r4, #4
   1a1f0:	adc	r1, r3, #0
   1a1f4:	cmp	r7, #0
   1a1f8:	str	r2, [sl]
   1a1fc:	str	r1, [sl, #4]
   1a200:	beq	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x21f4>
   1a204:	b	1a230 <__generate_code_for_binary_boolean_expression@@Base+0x2870>
   1a208:	mov	r2, r0
   1a20c:	mov	r1, #0
   1a210:	strb	r1, [r2, r4]!
   1a214:	strb	r1, [r2, #3]
   1a218:	strb	r1, [r2, #2]
   1a21c:	strb	r1, [r2, #1]
   1a220:	adds	r2, r4, #4
   1a224:	adc	r1, r3, #0
   1a228:	str	r2, [sl]
   1a22c:	str	r1, [sl, #4]
   1a230:	ldr	r5, [r9, #4]
   1a234:	ldr	r6, [pc, #232]	; 1a324 <__generate_code_for_binary_boolean_expression@@Base+0x2964>
   1a238:	adds	r7, r4, #8
   1a23c:	adc	ip, r3, #0
   1a240:	ldr	r6, [pc, r6]
   1a244:	subs	r7, r6, r7
   1a248:	sbcs	r7, r5, ip
   1a24c:	bcs	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x21f4>
   1a250:	mov	r1, #7
   1a254:	orr	r1, r1, #131072	; 0x20000
   1a258:	adds	r1, r4, r1
   1a25c:	adc	r2, r3, #0
   1a260:	mvn	r3, #0
   1a264:	and	r7, r2, r3
   1a268:	mov	r2, #16646144	; 0xfe0000
   1a26c:	orr	r2, r2, #-16777216	; 0xff000000
   1a270:	ldr	r5, [pc, #176]	; 1a328 <__generate_code_for_binary_boolean_expression@@Base+0x2968>
   1a274:	and	r6, r1, r2
   1a278:	mov	r1, r6
   1a27c:	add	r5, pc, r5
   1a280:	bl	11f60 <realloc@plt>
   1a284:	strd	r6, [r9]
   1a288:	str	r0, [r5]
   1a28c:	ldr	r1, [sl, #4]
   1a290:	ldr	r2, [pc, #148]	; 1a32c <__generate_code_for_binary_boolean_expression@@Base+0x296c>
   1a294:	ldr	r2, [pc, r2]
   1a298:	b	19bb4 <__generate_code_for_binary_boolean_expression@@Base+0x21f4>
   1a29c:	andeq	r4, r1, ip, lsl #21
   1a2a0:	andeq	r4, r1, ip, lsl #21
   1a2a4:	andeq	r4, r1, r0, lsl #21
   1a2a8:	andeq	r4, r1, r4, ror #20
   1a2ac:	muleq	r1, r8, r9
   1a2b0:	andeq	r2, r0, r8, lsl #7
   1a2b4:	andeq	r3, r1, r4, rrx
   1a2b8:	andeq	r4, r1, ip, asr #32
   1a2bc:	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1a2c0:	muleq	r1, r8, r7
   1a2c4:	andeq	r4, r1, r4, asr sl
   1a2c8:	andeq	r4, r1, r8, asr #20
   1a2cc:	andeq	r4, r1, ip, lsr r9
   1a2d0:	strdeq	r4, [r1], -ip
   1a2d4:	strdeq	r4, [r1], -r8
   1a2d8:	ldrdeq	r4, [r1], -r8
   1a2dc:	andeq	r4, r1, r4, lsl r9
   1a2e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a2e4:			; <UNDEFINED> instruction: 0x000148b8
   1a2e8:	andeq	r4, r1, r4, asr #16
   1a2ec:	andeq	r4, r1, r4, lsl #16
   1a2f0:	andeq	r4, r1, r8, ror #15
   1a2f4:	andeq	r4, r1, r8, lsr #6
   1a2f8:	andeq	r4, r1, r8, ror #5
   1a2fc:	andeq	r4, r1, r8, asr #5
   1a300:	muleq	r1, r8, r1
   1a304:	andeq	r4, r1, r8, asr r1
   1a308:	andeq	r4, r1, r8, asr #2
   1a30c:	andeq	r4, r1, r0, ror #11
   1a310:	muleq	r1, r8, r6
   1a314:	andeq	r4, r1, ip, lsl #13
   1a318:	andeq	r4, r1, r4, lsl r4
   1a31c:	andeq	r3, r1, ip, lsl #30
   1a320:	strdeq	r3, [r1], -r0
   1a324:	andeq	r3, r1, r0, lsl #29
   1a328:	andeq	r3, r1, r0, asr #28
   1a32c:	andeq	r3, r1, r4, lsr lr
   1a330:	andeq	r4, r1, r8, asr #9
   1a334:			; <UNDEFINED> instruction: 0x000144bc
   1a338:	andeq	r4, r1, ip, ror r4
   1a33c:	andeq	r4, r1, r0, ror r4
   1a340:	andeq	r4, r1, r8, ror #8
   1a344:	andeq	r4, r1, ip, asr #8
   1a348:	andeq	r4, r1, r8, asr #12
   1a34c:	andeq	r4, r1, r4, asr #12
   1a350:	andeq	r4, r1, r8, lsr #12
   1a354:	andeq	r4, r1, ip, ror #7
   1a358:	andeq	r4, r1, ip, lsr #7
   1a35c:	muleq	r1, r4, r3
   1a360:	andeq	r4, r1, r0, ror #4
   1a364:	andeq	r4, r1, r0, lsr #4
   1a368:	andeq	r4, r1, r4, lsl #4
   1a36c:	andeq	r4, r1, r4, lsl #2
   1a370:	andeq	r4, r1, r4, asr #1
   1a374:	andeq	r4, r1, r8, lsr #1
   1a378:	andeq	r4, r1, r8, lsl r0
   1a37c:	ldrdeq	r3, [r1], -r8
   1a380:			; <UNDEFINED> instruction: 0x00013fbc
   1a384:	andeq	r3, r1, ip, asr #30
   1a388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a38c:	add	fp, sp, #28
   1a390:	sub	sp, sp, #4
   1a394:	ldr	r0, [pc, #496]	; 1a58c <__generate_code_for_binary_boolean_expression@@Base+0x2bcc>
   1a398:	ldr	r0, [pc, r0]
   1a39c:	cmp	r0, #0
   1a3a0:	beq	1a534 <__generate_code_for_binary_boolean_expression@@Base+0x2b74>
   1a3a4:	ldr	sl, [pc, #484]	; 1a590 <__generate_code_for_binary_boolean_expression@@Base+0x2bd0>
   1a3a8:	mov	r5, #0
   1a3ac:	mov	r1, #0
   1a3b0:	add	sl, pc, sl
   1a3b4:	ldrb	r0, [sl]
   1a3b8:	ldr	r8, [pc, #468]	; 1a594 <__generate_code_for_binary_boolean_expression@@Base+0x2bd4>
   1a3bc:	ldr	r4, [pc, #468]	; 1a598 <__generate_code_for_binary_boolean_expression@@Base+0x2bd8>
   1a3c0:	cmp	r0, #1
   1a3c4:	add	r8, pc, r8
   1a3c8:	add	r4, pc, r4
   1a3cc:	bne	1a448 <__generate_code_for_binary_boolean_expression@@Base+0x2a88>
   1a3d0:	ldr	r9, [pc, #452]	; 1a59c <__generate_code_for_binary_boolean_expression@@Base+0x2bdc>
   1a3d4:	ldr	r0, [r8, #4]
   1a3d8:	ldr	r2, [pc, #448]	; 1a5a0 <__generate_code_for_binary_boolean_expression@@Base+0x2be0>
   1a3dc:	add	r9, pc, r9
   1a3e0:	mov	ip, r4
   1a3e4:	mov	r1, #1
   1a3e8:	ldr	r2, [pc, r2]
   1a3ec:	ldr	r7, [r9, #4]
   1a3f0:	ldr	r4, [pc, #428]	; 1a5a4 <__generate_code_for_binary_boolean_expression@@Base+0x2be4>
   1a3f4:	adds	r3, r2, #8
   1a3f8:	adc	r6, r0, #0
   1a3fc:	ldr	r4, [pc, r4]
   1a400:	subs	r3, r4, r3
   1a404:	mov	r4, ip
   1a408:	sbcs	r3, r7, r6
   1a40c:	bcs	1a448 <__generate_code_for_binary_boolean_expression@@Base+0x2a88>
   1a410:	mov	r1, #7
   1a414:	orr	r1, r1, #131072	; 0x20000
   1a418:	adds	r1, r2, r1
   1a41c:	adc	r7, r0, #0
   1a420:	mov	r0, #16646144	; 0xfe0000
   1a424:	orr	r0, r0, #-16777216	; 0xff000000
   1a428:	and	r6, r1, r0
   1a42c:	ldr	r0, [pc, #372]	; 1a5a8 <__generate_code_for_binary_boolean_expression@@Base+0x2be8>
   1a430:	mov	r1, r6
   1a434:	ldr	r0, [pc, r0]
   1a438:	bl	11f60 <realloc@plt>
   1a43c:	ldrb	r1, [sl]
   1a440:	strd	r6, [r9]
   1a444:	str	r0, [r4]
   1a448:	ldr	r2, [pc, #348]	; 1a5ac <__generate_code_for_binary_boolean_expression@@Base+0x2bec>
   1a44c:	ldr	r2, [pc, r2]
   1a450:	ldr	r0, [pc, #344]	; 1a5b0 <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   1a454:	ldr	r0, [pc, r0]
   1a458:	ldr	r3, [r8, #4]
   1a45c:	mov	r7, r0
   1a460:	strb	r5, [r7, r2]!
   1a464:	adds	r2, r2, #8
   1a468:	adc	r3, r3, #0
   1a46c:	strb	r5, [r7, #5]
   1a470:	strb	r5, [r7, #3]
   1a474:	strb	r5, [r7, #2]
   1a478:	strb	r5, [r7, #1]
   1a47c:	strb	r5, [r7, #4]!
   1a480:	cmp	r1, #0
   1a484:	strb	r5, [r7, #3]
   1a488:	strb	r5, [r7, #2]
   1a48c:	strd	r2, [r8]
   1a490:	beq	1a4b8 <__generate_code_for_binary_boolean_expression@@Base+0x2af8>
   1a494:	ldr	r3, [pc, #280]	; 1a5b4 <__generate_code_for_binary_boolean_expression@@Base+0x2bf4>
   1a498:	mov	r1, r2
   1a49c:	mov	r2, #1
   1a4a0:	ldr	r3, [pc, r3]
   1a4a4:	bl	11f6c <fwrite@plt>
   1a4a8:	ldr	r0, [pc, #264]	; 1a5b8 <__generate_code_for_binary_boolean_expression@@Base+0x2bf8>
   1a4ac:	ldr	r0, [pc, r0]
   1a4b0:	bl	11f18 <free@plt>
   1a4b4:	b	1a4fc <__generate_code_for_binary_boolean_expression@@Base+0x2b3c>
   1a4b8:	ldr	r1, [pc, #252]	; 1a5bc <__generate_code_for_binary_boolean_expression@@Base+0x2bfc>
   1a4bc:	mov	r2, #4
   1a4c0:	ldr	r1, [pc, r1]
   1a4c4:	bl	120a4 <msync@plt>
   1a4c8:	cmn	r0, #1
   1a4cc:	beq	1a548 <__generate_code_for_binary_boolean_expression@@Base+0x2b88>
   1a4d0:	ldr	r1, [pc, #244]	; 1a5cc <__generate_code_for_binary_boolean_expression@@Base+0x2c0c>
   1a4d4:	ldr	r1, [pc, r1]
   1a4d8:	ldr	r0, [pc, #240]	; 1a5d0 <__generate_code_for_binary_boolean_expression@@Base+0x2c10>
   1a4dc:	ldr	r0, [pc, r0]
   1a4e0:	bl	12074 <munmap@plt>
   1a4e4:	ldr	r0, [pc, #232]	; 1a5d4 <__generate_code_for_binary_boolean_expression@@Base+0x2c14>
   1a4e8:	mov	r1, #0
   1a4ec:	str	r1, [r4]
   1a4f0:	add	r0, pc, r0
   1a4f4:	str	r1, [r0]
   1a4f8:	str	r1, [r0, #4]
   1a4fc:	ldr	r0, [pc, #212]	; 1a5d8 <__generate_code_for_binary_boolean_expression@@Base+0x2c18>
   1a500:	ldr	r0, [pc, r0]
   1a504:	bl	11f0c <fflush@plt>
   1a508:	ldr	r0, [pc, #204]	; 1a5dc <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   1a50c:	ldr	r0, [pc, r0]
   1a510:	bl	1aa88 <__gcov_flush@@Base+0x304>
   1a514:	ldr	r0, [pc, #196]	; 1a5e0 <__generate_code_for_binary_boolean_expression@@Base+0x2c20>
   1a518:	ldr	r0, [pc, r0]
   1a51c:	bl	1205c <fclose@plt>
   1a520:	ldr	r0, [pc, #188]	; 1a5e4 <__generate_code_for_binary_boolean_expression@@Base+0x2c24>
   1a524:	mov	r1, #0
   1a528:	str	r1, [r4]
   1a52c:	add	r0, pc, r0
   1a530:	str	r1, [r0]
   1a534:	ldr	r0, [pc, #172]	; 1a5e8 <__generate_code_for_binary_boolean_expression@@Base+0x2c28>
   1a538:	ldr	r0, [pc, r0]
   1a53c:	sub	sp, fp, #28
   1a540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a544:	b	11f18 <free@plt>
   1a548:	bl	12008 <__errno_location@plt>
   1a54c:	ldr	r1, [pc, #108]	; 1a5c0 <__generate_code_for_binary_boolean_expression@@Base+0x2c00>
   1a550:	mov	r6, r4
   1a554:	ldr	r1, [pc, r1]
   1a558:	ldr	r0, [r0]
   1a55c:	ldr	r4, [r1]
   1a560:	ldr	r5, [pc, #92]	; 1a5c4 <__generate_code_for_binary_boolean_expression@@Base+0x2c04>
   1a564:	ldr	r5, [pc, r5]
   1a568:	bl	11fa8 <strerror@plt>
   1a56c:	ldr	r1, [pc, #84]	; 1a5c8 <__generate_code_for_binary_boolean_expression@@Base+0x2c08>
   1a570:	mov	r3, r0
   1a574:	mov	r0, r4
   1a578:	add	r1, pc, r1
   1a57c:	mov	r2, r5
   1a580:	mov	r4, r6
   1a584:	bl	11ffc <fprintf@plt>
   1a588:	b	1a4d0 <__generate_code_for_binary_boolean_expression@@Base+0x2b10>
   1a58c:	andeq	r3, r1, r0, lsr #26
   1a590:	andeq	r3, r1, r4, lsl #26
   1a594:	andeq	r3, r1, r4, lsl #26
   1a598:	strdeq	r3, [r1], -r4
   1a59c:	andeq	r3, r1, r4, ror #25
   1a5a0:	andeq	r3, r1, r0, ror #25
   1a5a4:	andeq	r3, r1, r4, asr #25
   1a5a8:	andeq	r3, r1, r8, lsl #25
   1a5ac:	andeq	r3, r1, ip, ror ip
   1a5b0:	andeq	r3, r1, r8, ror #24
   1a5b4:	andeq	r3, r1, r8, lsl ip
   1a5b8:	andeq	r3, r1, r0, lsl ip
   1a5bc:	andeq	r3, r1, r0, lsr #24
   1a5c0:	andeq	r2, r1, r8, ror #22
   1a5c4:	andeq	r3, r1, ip, asr #22
   1a5c8:	andeq	r1, r0, r7, lsr r6
   1a5cc:	andeq	r3, r1, ip, lsl #24
   1a5d0:	andeq	r3, r1, r0, ror #23
   1a5d4:	strdeq	r3, [r1], -r0
   1a5d8:			; <UNDEFINED> instruction: 0x00013bb8
   1a5dc:	andeq	r2, r1, r4, asr #23
   1a5e0:	andeq	r3, r1, r0, lsr #23
   1a5e4:	andeq	r3, r1, ip, lsl #23
   1a5e8:	andeq	r3, r1, r8, ror fp
   1a5ec:	push	{r4, sl, fp, lr}
   1a5f0:	add	fp, sp, #8
   1a5f4:	mov	r4, r0
   1a5f8:	mov	r0, #12
   1a5fc:	bl	11f90 <malloc@plt>
   1a600:	ldr	r1, [pc, #60]	; 1a644 <__generate_code_for_binary_boolean_expression@@Base+0x2c84>
   1a604:	mov	r2, #0
   1a608:	add	r1, pc, r1
   1a60c:	stm	r0, {r1, r4}
   1a610:	str	r2, [r0, #8]
   1a614:	ldr	r1, [pc, #44]	; 1a648 <__generate_code_for_binary_boolean_expression@@Base+0x2c88>
   1a618:	ldr	r1, [pc, r1]
   1a61c:	mov	r2, r1
   1a620:	ldr	r3, [r2], #4
   1a624:	ldr	r4, [r2]
   1a628:	cmp	r3, #0
   1a62c:	mov	r3, r2
   1a630:	addne	r3, r4, #8
   1a634:	moveq	r2, r1
   1a638:	str	r0, [r3]
   1a63c:	str	r0, [r2]
   1a640:	pop	{r4, sl, fp, pc}
   1a644:	andeq	r3, r1, ip, asr #21
   1a648:	muleq	r1, ip, sl
   1a64c:	push	{r4, r5, fp, lr}
   1a650:	add	fp, sp, #8
   1a654:	ldr	r0, [pc, #64]	; 1a69c <__generate_code_for_binary_boolean_expression@@Base+0x2cdc>
   1a658:	ldr	r0, [pc, r0]
   1a65c:	ldr	r4, [r0]
   1a660:	cmp	r4, #0
   1a664:	beq	1a698 <__generate_code_for_binary_boolean_expression@@Base+0x2cd8>
   1a668:	ldr	r5, [pc, #48]	; 1a6a0 <__generate_code_for_binary_boolean_expression@@Base+0x2ce0>
   1a66c:	add	r5, pc, r5
   1a670:	b	1a680 <__generate_code_for_binary_boolean_expression@@Base+0x2cc0>
   1a674:	ldr	r4, [r4, #8]
   1a678:	cmp	r4, #0
   1a67c:	beq	1a698 <__generate_code_for_binary_boolean_expression@@Base+0x2cd8>
   1a680:	ldr	r0, [r4]
   1a684:	cmp	r0, r5
   1a688:	bne	1a674 <__generate_code_for_binary_boolean_expression@@Base+0x2cb4>
   1a68c:	ldr	r0, [r4, #4]
   1a690:	blx	r0
   1a694:	b	1a674 <__generate_code_for_binary_boolean_expression@@Base+0x2cb4>
   1a698:	pop	{r4, r5, fp, pc}
   1a69c:	andeq	r2, r1, ip, asr sl
   1a6a0:	andeq	r3, r1, r8, ror #20
   1a6a4:	push	{r4, r5, r6, r7, fp, lr}
   1a6a8:	add	fp, sp, #16
   1a6ac:	ldr	r4, [pc, #104]	; 1a71c <__generate_code_for_binary_boolean_expression@@Base+0x2d5c>
   1a6b0:	ldr	r4, [pc, r4]
   1a6b4:	ldr	r0, [r4]
   1a6b8:	cmp	r0, #0
   1a6bc:	beq	1a718 <__generate_code_for_binary_boolean_expression@@Base+0x2d58>
   1a6c0:	ldr	r5, [pc, #88]	; 1a720 <__generate_code_for_binary_boolean_expression@@Base+0x2d60>
   1a6c4:	mov	r6, #0
   1a6c8:	add	r5, pc, r5
   1a6cc:	b	1a700 <__generate_code_for_binary_boolean_expression@@Base+0x2d40>
   1a6d0:	ldr	r1, [r4]
   1a6d4:	cmp	r0, r1
   1a6d8:	streq	r7, [r4]
   1a6dc:	ldr	r1, [r4, #4]
   1a6e0:	cmp	r0, r1
   1a6e4:	streq	r6, [r4, #4]
   1a6e8:	cmp	r6, #0
   1a6ec:	strne	r7, [r6, #8]
   1a6f0:	bl	11f18 <free@plt>
   1a6f4:	mov	r0, r7
   1a6f8:	cmp	r7, #0
   1a6fc:	beq	1a718 <__generate_code_for_binary_boolean_expression@@Base+0x2d58>
   1a700:	ldr	r1, [r0]
   1a704:	ldr	r7, [r0, #8]
   1a708:	cmp	r1, r5
   1a70c:	beq	1a6d0 <__generate_code_for_binary_boolean_expression@@Base+0x2d10>
   1a710:	mov	r6, r0
   1a714:	b	1a6f4 <__generate_code_for_binary_boolean_expression@@Base+0x2d34>
   1a718:	pop	{r4, r5, r6, r7, fp, pc}
   1a71c:	andeq	r2, r1, r4, lsl #20
   1a720:	andeq	r3, r1, ip, lsl #20
   1a724:	push	{r4, sl, fp, lr}
   1a728:	add	fp, sp, #8
   1a72c:	mov	r4, r0
   1a730:	mov	r0, #12
   1a734:	bl	11f90 <malloc@plt>
   1a738:	ldr	r1, [pc, #60]	; 1a77c <__generate_code_for_binary_boolean_expression@@Base+0x2dbc>
   1a73c:	mov	r2, #0
   1a740:	add	r1, pc, r1
   1a744:	stm	r0, {r1, r4}
   1a748:	str	r2, [r0, #8]
   1a74c:	ldr	r1, [pc, #44]	; 1a780 <__generate_code_for_binary_boolean_expression@@Base+0x2dc0>
   1a750:	ldr	r1, [pc, r1]
   1a754:	mov	r2, r1
   1a758:	ldr	r3, [r2], #4
   1a75c:	ldr	r4, [r2]
   1a760:	cmp	r3, #0
   1a764:	mov	r3, r2
   1a768:	addne	r3, r4, #8
   1a76c:	moveq	r2, r1
   1a770:	str	r0, [r3]
   1a774:	str	r0, [r2]
   1a778:	pop	{r4, sl, fp, pc}
   1a77c:	muleq	r1, r4, r9
   1a780:	andeq	r2, r1, r0, ror #18

0001a784 <__gcov_flush@@Base>:
   1a784:	push	{r4, sl, fp, lr}
   1a788:	add	fp, sp, #8
   1a78c:	ldr	r0, [pc, #36]	; 1a7b8 <__gcov_flush@@Base+0x34>
   1a790:	ldr	r0, [pc, r0]
   1a794:	ldr	r4, [r0]
   1a798:	cmp	r4, #0
   1a79c:	beq	1a7b4 <__gcov_flush@@Base+0x30>
   1a7a0:	ldr	r0, [r4, #4]
   1a7a4:	blx	r0
   1a7a8:	ldr	r4, [r4, #8]
   1a7ac:	cmp	r4, #0
   1a7b0:	bne	1a7a0 <__gcov_flush@@Base+0x1c>
   1a7b4:	pop	{r4, sl, fp, pc}
   1a7b8:	andeq	r2, r1, r0, lsr #18
   1a7bc:	push	{r4, r5, r6, r7, fp, lr}
   1a7c0:	add	fp, sp, #16
   1a7c4:	ldr	r4, [pc, #104]	; 1a834 <__gcov_flush@@Base+0xb0>
   1a7c8:	ldr	r4, [pc, r4]
   1a7cc:	ldr	r0, [r4]
   1a7d0:	cmp	r0, #0
   1a7d4:	beq	1a830 <__gcov_flush@@Base+0xac>
   1a7d8:	ldr	r5, [pc, #88]	; 1a838 <__gcov_flush@@Base+0xb4>
   1a7dc:	mov	r6, #0
   1a7e0:	add	r5, pc, r5
   1a7e4:	b	1a818 <__gcov_flush@@Base+0x94>
   1a7e8:	ldr	r1, [r4]
   1a7ec:	cmp	r0, r1
   1a7f0:	streq	r7, [r4]
   1a7f4:	ldr	r1, [r4, #4]
   1a7f8:	cmp	r0, r1
   1a7fc:	streq	r6, [r4, #4]
   1a800:	cmp	r6, #0
   1a804:	strne	r7, [r6, #8]
   1a808:	bl	11f18 <free@plt>
   1a80c:	mov	r0, r7
   1a810:	cmp	r7, #0
   1a814:	beq	1a830 <__gcov_flush@@Base+0xac>
   1a818:	ldr	r1, [r0]
   1a81c:	ldr	r7, [r0, #8]
   1a820:	cmp	r1, r5
   1a824:	beq	1a7e8 <__gcov_flush@@Base+0x64>
   1a828:	mov	r6, r0
   1a82c:	b	1a80c <__gcov_flush@@Base+0x88>
   1a830:	pop	{r4, r5, r6, r7, fp, pc}
   1a834:	andeq	r2, r1, r8, ror #17
   1a838:	strdeq	r3, [r1], -r4
   1a83c:	push	{r4, r5, r6, sl, fp, lr}
   1a840:	add	fp, sp, #16
   1a844:	ldr	r6, [pc, #228]	; 1a930 <__gcov_flush@@Base+0x1ac>
   1a848:	mov	r4, r1
   1a84c:	cmp	r0, #0
   1a850:	add	r6, pc, r6
   1a854:	beq	1a8a0 <__gcov_flush@@Base+0x11c>
   1a858:	mov	r5, r0
   1a85c:	mov	r0, #12
   1a860:	bl	11f90 <malloc@plt>
   1a864:	mov	r1, #0
   1a868:	str	r6, [r0]
   1a86c:	str	r5, [r0, #4]
   1a870:	str	r1, [r0, #8]
   1a874:	ldr	r1, [pc, #184]	; 1a934 <__gcov_flush@@Base+0x1b0>
   1a878:	ldr	r1, [pc, r1]
   1a87c:	mov	r2, r1
   1a880:	ldr	r3, [r2], #4
   1a884:	ldr	r5, [r2]
   1a888:	cmp	r3, #0
   1a88c:	mov	r3, r2
   1a890:	addne	r3, r5, #8
   1a894:	moveq	r2, r1
   1a898:	str	r0, [r3]
   1a89c:	str	r0, [r2]
   1a8a0:	cmp	r4, #0
   1a8a4:	beq	1a8ec <__gcov_flush@@Base+0x168>
   1a8a8:	mov	r0, #12
   1a8ac:	bl	11f90 <malloc@plt>
   1a8b0:	mov	r1, #0
   1a8b4:	str	r6, [r0]
   1a8b8:	str	r4, [r0, #4]
   1a8bc:	str	r1, [r0, #8]
   1a8c0:	ldr	r1, [pc, #112]	; 1a938 <__gcov_flush@@Base+0x1b4>
   1a8c4:	ldr	r1, [pc, r1]
   1a8c8:	mov	r2, r1
   1a8cc:	ldr	r3, [r2], #4
   1a8d0:	ldr	r6, [r2]
   1a8d4:	cmp	r3, #0
   1a8d8:	mov	r3, r2
   1a8dc:	addne	r3, r6, #8
   1a8e0:	moveq	r2, r1
   1a8e4:	str	r0, [r3]
   1a8e8:	str	r0, [r2]
   1a8ec:	ldr	r1, [pc, #72]	; 1a93c <__gcov_flush@@Base+0x1b8>
   1a8f0:	add	r1, pc, r1
   1a8f4:	ldrb	r0, [r1]
   1a8f8:	cmp	r0, #0
   1a8fc:	popne	{r4, r5, r6, sl, fp, pc}
   1a900:	ldr	r0, [pc, #56]	; 1a940 <__gcov_flush@@Base+0x1bc>
   1a904:	mov	r2, #1
   1a908:	strb	r2, [r1]
   1a90c:	add	r0, pc, r0
   1a910:	bl	1aedc <__libc_csu_fini@@Base+0x4>
   1a914:	ldr	r0, [pc, #40]	; 1a944 <__gcov_flush@@Base+0x1c0>
   1a918:	add	r0, pc, r0
   1a91c:	bl	1aedc <__libc_csu_fini@@Base+0x4>
   1a920:	ldr	r0, [pc, #32]	; 1a948 <__gcov_flush@@Base+0x1c4>
   1a924:	add	r0, pc, r0
   1a928:	pop	{r4, r5, r6, sl, fp, lr}
   1a92c:	b	1aedc <__libc_csu_fini@@Base+0x4>
   1a930:	andeq	r3, r1, r4, lsl #17
   1a934:	andeq	r2, r1, ip, lsr r8
   1a938:	andeq	r2, r1, ip, ror #15
   1a93c:	andeq	r3, r1, r8, ror #15
   1a940:			; <UNDEFINED> instruction: 0xfffffea8
   1a944:			; <UNDEFINED> instruction: 0xfffffd84
   1a948:			; <UNDEFINED> instruction: 0xfffffd20
   1a94c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a950:	add	fp, sp, #24
   1a954:	ldr	r7, [pc, #68]	; 1a9a0 <__gcov_flush@@Base+0x21c>
   1a958:	mov	r4, r0
   1a95c:	mov	r5, #1
   1a960:	mov	r8, #0
   1a964:	ldr	r7, [pc, r7]
   1a968:	mov	r6, #47	; 0x2f
   1a96c:	b	1a988 <__gcov_flush@@Base+0x204>
   1a970:	strb	r8, [r4, r5]
   1a974:	ldr	r1, [r7]
   1a978:	mov	r0, r4
   1a97c:	bl	12020 <mkdir@plt>
   1a980:	strb	r6, [r4, r5]
   1a984:	add	r5, r5, #1
   1a988:	ldrb	r0, [r4, r5]
   1a98c:	cmp	r0, #47	; 0x2f
   1a990:	beq	1a970 <__gcov_flush@@Base+0x1ec>
   1a994:	cmp	r0, #0
   1a998:	bne	1a984 <__gcov_flush@@Base+0x200>
   1a99c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a9a0:	andeq	r2, r1, r8, asr #14
   1a9a4:	ldr	r0, [pc, #8]	; 1a9b4 <__gcov_flush@@Base+0x230>
   1a9a8:	ldr	r0, [pc, r0]
   1a9ac:	ldr	r0, [r0]
   1a9b0:	bx	lr
   1a9b4:	andeq	r2, r1, r4, lsl #14
   1a9b8:	ldr	r1, [pc, #8]	; 1a9c8 <__gcov_flush@@Base+0x244>
   1a9bc:	ldr	r1, [pc, r1]
   1a9c0:	str	r0, [r1]
   1a9c4:	bx	lr
   1a9c8:	strdeq	r2, [r1], -r0
   1a9cc:	push	{r4, r5, r6, sl, fp, lr}
   1a9d0:	add	fp, sp, #16
   1a9d4:	sub	sp, sp, #392	; 0x188
   1a9d8:	mov	r6, sp
   1a9dc:	mov	r5, r0
   1a9e0:	mov	r0, r6
   1a9e4:	mov	r4, r1
   1a9e8:	bl	11f48 <uname@plt>
   1a9ec:	cmp	r0, #0
   1a9f0:	bmi	1aa08 <__gcov_flush@@Base+0x284>
   1a9f4:	add	r1, r6, #65	; 0x41
   1a9f8:	mov	r0, r5
   1a9fc:	mov	r2, r4
   1aa00:	bl	12038 <strncpy@plt>
   1aa04:	mov	r0, #0
   1aa08:	sub	sp, fp, #16
   1aa0c:	pop	{r4, r5, r6, sl, fp, pc}
   1aa10:	push	{r4, r5, r6, sl, fp, lr}
   1aa14:	add	fp, sp, #16
   1aa18:	sub	sp, sp, #32
   1aa1c:	mov	r4, #0
   1aa20:	str	r4, [sp, #8]
   1aa24:	strh	r4, [sp, #2]
   1aa28:	mov	r5, r0
   1aa2c:	str	r4, [sp, #12]
   1aa30:	str	r4, [sp, #16]
   1aa34:	str	r4, [sp, #20]
   1aa38:	bl	11fc0 <getpid@plt>
   1aa3c:	mov	r6, sp
   1aa40:	str	r0, [sp, #24]
   1aa44:	mov	r0, #1
   1aa48:	strh	r0, [sp]
   1aa4c:	mov	r0, r5
   1aa50:	mov	r1, #14
   1aa54:	mov	r2, r6
   1aa58:	bl	12080 <fcntl64@plt>
   1aa5c:	cmn	r0, #1
   1aa60:	bne	1aa7c <__gcov_flush@@Base+0x2f8>
   1aa64:	bl	12008 <__errno_location@plt>
   1aa68:	ldr	r0, [r0]
   1aa6c:	cmp	r0, #4
   1aa70:	beq	1aa4c <__gcov_flush@@Base+0x2c8>
   1aa74:	cmp	r0, #37	; 0x25
   1aa78:	mvneq	r4, #0
   1aa7c:	mov	r0, r4
   1aa80:	sub	sp, fp, #16
   1aa84:	pop	{r4, r5, r6, sl, fp, pc}
   1aa88:	push	{r4, r5, r6, sl, fp, lr}
   1aa8c:	add	fp, sp, #16
   1aa90:	sub	sp, sp, #32
   1aa94:	mov	r4, #0
   1aa98:	str	r4, [sp, #8]
   1aa9c:	strh	r4, [sp, #2]
   1aaa0:	mov	r5, r0
   1aaa4:	str	r4, [sp, #12]
   1aaa8:	str	r4, [sp, #16]
   1aaac:	str	r4, [sp, #20]
   1aab0:	bl	11fc0 <getpid@plt>
   1aab4:	mov	r6, sp
   1aab8:	str	r0, [sp, #24]
   1aabc:	mov	r0, #2
   1aac0:	strh	r0, [sp]
   1aac4:	mov	r0, r5
   1aac8:	mov	r1, #14
   1aacc:	mov	r2, r6
   1aad0:	bl	12080 <fcntl64@plt>
   1aad4:	cmn	r0, #1
   1aad8:	bne	1aaf4 <__gcov_flush@@Base+0x370>
   1aadc:	bl	12008 <__errno_location@plt>
   1aae0:	ldr	r0, [r0]
   1aae4:	cmp	r0, #4
   1aae8:	beq	1aac4 <__gcov_flush@@Base+0x340>
   1aaec:	cmp	r0, #37	; 0x25
   1aaf0:	mvneq	r4, #0
   1aaf4:	mov	r0, r4
   1aaf8:	sub	sp, fp, #16
   1aafc:	pop	{r4, r5, r6, sl, fp, pc}
   1ab00:	push	{r4, r5, r6, sl, fp, lr}
   1ab04:	add	fp, sp, #16
   1ab08:	sub	sp, sp, #32
   1ab0c:	bl	12050 <fileno@plt>
   1ab10:	mov	r4, #0
   1ab14:	str	r4, [sp, #8]
   1ab18:	strh	r4, [sp, #2]
   1ab1c:	mov	r5, r0
   1ab20:	str	r4, [sp, #12]
   1ab24:	str	r4, [sp, #16]
   1ab28:	str	r4, [sp, #20]
   1ab2c:	bl	11fc0 <getpid@plt>
   1ab30:	mov	r6, sp
   1ab34:	str	r0, [sp, #24]
   1ab38:	mov	r0, #1
   1ab3c:	strh	r0, [sp]
   1ab40:	mov	r0, r5
   1ab44:	mov	r1, #14
   1ab48:	mov	r2, r6
   1ab4c:	bl	12080 <fcntl64@plt>
   1ab50:	cmn	r0, #1
   1ab54:	bne	1ab70 <__gcov_flush@@Base+0x3ec>
   1ab58:	bl	12008 <__errno_location@plt>
   1ab5c:	ldr	r0, [r0]
   1ab60:	cmp	r0, #4
   1ab64:	beq	1ab40 <__gcov_flush@@Base+0x3bc>
   1ab68:	cmp	r0, #37	; 0x25
   1ab6c:	mvneq	r4, #0
   1ab70:	mov	r0, r4
   1ab74:	sub	sp, fp, #16
   1ab78:	pop	{r4, r5, r6, sl, fp, pc}
   1ab7c:	push	{r4, r5, r6, sl, fp, lr}
   1ab80:	add	fp, sp, #16
   1ab84:	sub	sp, sp, #32
   1ab88:	bl	12050 <fileno@plt>
   1ab8c:	mov	r4, #0
   1ab90:	str	r4, [sp, #8]
   1ab94:	strh	r4, [sp, #2]
   1ab98:	mov	r5, r0
   1ab9c:	str	r4, [sp, #12]
   1aba0:	str	r4, [sp, #16]
   1aba4:	str	r4, [sp, #20]
   1aba8:	bl	11fc0 <getpid@plt>
   1abac:	mov	r6, sp
   1abb0:	str	r0, [sp, #24]
   1abb4:	mov	r0, #2
   1abb8:	strh	r0, [sp]
   1abbc:	mov	r0, r5
   1abc0:	mov	r1, #14
   1abc4:	mov	r2, r6
   1abc8:	bl	12080 <fcntl64@plt>
   1abcc:	cmn	r0, #1
   1abd0:	bne	1abec <__gcov_flush@@Base+0x468>
   1abd4:	bl	12008 <__errno_location@plt>
   1abd8:	ldr	r0, [r0]
   1abdc:	cmp	r0, #4
   1abe0:	beq	1abbc <__gcov_flush@@Base+0x438>
   1abe4:	cmp	r0, #37	; 0x25
   1abe8:	mvneq	r4, #0
   1abec:	mov	r0, r4
   1abf0:	sub	sp, fp, #16
   1abf4:	pop	{r4, r5, r6, sl, fp, pc}
   1abf8:	push	{r4, r5, fp, lr}
   1abfc:	add	fp, sp, #8
   1ac00:	sub	sp, sp, #32
   1ac04:	mov	r2, #182	; 0xb6
   1ac08:	orr	r2, r2, #256	; 0x100
   1ac0c:	mov	r1, #66	; 0x42
   1ac10:	bl	11f78 <open64@plt>
   1ac14:	cmp	r0, #0
   1ac18:	bmi	1ac94 <__gcov_flush@@Base+0x510>
   1ac1c:	mov	r4, r0
   1ac20:	mov	r0, #0
   1ac24:	str	r0, [sp, #8]
   1ac28:	strh	r0, [sp, #2]
   1ac2c:	str	r0, [sp, #12]
   1ac30:	str	r0, [sp, #16]
   1ac34:	str	r0, [sp, #20]
   1ac38:	bl	11fc0 <getpid@plt>
   1ac3c:	mov	r5, sp
   1ac40:	str	r0, [sp, #24]
   1ac44:	mov	r0, #1
   1ac48:	strh	r0, [sp]
   1ac4c:	mov	r0, r4
   1ac50:	mov	r1, #14
   1ac54:	mov	r2, r5
   1ac58:	bl	12080 <fcntl64@plt>
   1ac5c:	cmn	r0, #1
   1ac60:	bne	1ac7c <__gcov_flush@@Base+0x4f8>
   1ac64:	bl	12008 <__errno_location@plt>
   1ac68:	ldr	r0, [r0]
   1ac6c:	cmp	r0, #4
   1ac70:	beq	1ac4c <__gcov_flush@@Base+0x4c8>
   1ac74:	cmp	r0, #37	; 0x25
   1ac78:	beq	1aca0 <__gcov_flush@@Base+0x51c>
   1ac7c:	ldr	r1, [pc, #76]	; 1acd0 <__gcov_flush@@Base+0x54c>
   1ac80:	mov	r0, r4
   1ac84:	add	r1, pc, r1
   1ac88:	bl	11ee8 <fdopen@plt>
   1ac8c:	sub	sp, fp, #8
   1ac90:	pop	{r4, r5, fp, pc}
   1ac94:	mov	r0, #0
   1ac98:	sub	sp, fp, #8
   1ac9c:	pop	{r4, r5, fp, pc}
   1aca0:	ldr	r1, [pc, #28]	; 1acc4 <__gcov_flush@@Base+0x540>
   1aca4:	ldr	r2, [pc, #28]	; 1acc8 <__gcov_flush@@Base+0x544>
   1aca8:	ldr	r0, [pc, #28]	; 1accc <__gcov_flush@@Base+0x548>
   1acac:	add	r1, pc, r1
   1acb0:	add	r2, pc, r2
   1acb4:	ldr	r0, [pc, r0]
   1acb8:	ldr	r0, [r0]
   1acbc:	bl	11ffc <fprintf@plt>
   1acc0:	b	1ac7c <__gcov_flush@@Base+0x4f8>
   1acc4:	andeq	r0, r0, r4, lsr #30
   1acc8:	andeq	r0, r0, r9, ror #30
   1accc:	andeq	r2, r1, r8, lsl #8
   1acd0:	andeq	r0, r0, sl, lsr #27
   1acd4:	push	{r4, r5, r6, sl, fp, lr}
   1acd8:	add	fp, sp, #16
   1acdc:	mov	r6, r0
   1ace0:	ldr	r0, [pc, #120]	; 1ad60 <__gcov_flush@@Base+0x5dc>
   1ace4:	mov	r4, r1
   1ace8:	add	r0, pc, r0
   1acec:	bl	11f84 <getenv@plt>
   1acf0:	mov	r5, r0
   1acf4:	ldr	r0, [pc, #104]	; 1ad64 <__gcov_flush@@Base+0x5e0>
   1acf8:	add	r0, pc, r0
   1acfc:	bl	11f84 <getenv@plt>
   1ad00:	mov	r1, #0
   1ad04:	str	r1, [r4]
   1ad08:	str	r1, [r6]
   1ad0c:	cmp	r5, #0
   1ad10:	ldrbne	r2, [r5]
   1ad14:	cmpne	r2, #0
   1ad18:	bne	1ad24 <__gcov_flush@@Base+0x5a0>
   1ad1c:	mov	r0, r1
   1ad20:	pop	{r4, r5, r6, sl, fp, pc}
   1ad24:	cmp	r0, #0
   1ad28:	beq	1ad40 <__gcov_flush@@Base+0x5bc>
   1ad2c:	mov	r1, #0
   1ad30:	mov	r2, #10
   1ad34:	bl	11ef4 <strtol@plt>
   1ad38:	bic	r0, r0, r0, asr #31
   1ad3c:	b	1ad44 <__gcov_flush@@Base+0x5c0>
   1ad40:	mov	r0, #0
   1ad44:	str	r0, [r6]
   1ad48:	mov	r0, r5
   1ad4c:	bl	11fd8 <strlen@plt>
   1ad50:	mov	r1, r5
   1ad54:	str	r0, [r4]
   1ad58:	mov	r0, r1
   1ad5c:	pop	{r4, r5, r6, sl, fp, pc}
   1ad60:	andeq	r0, r0, pc, asr pc
   1ad64:	andeq	r0, r0, fp, asr pc
   1ad68:	push	{r4, r5, r6, r7, fp, lr}
   1ad6c:	add	fp, sp, #16
   1ad70:	mov	r6, r0
   1ad74:	ldr	r0, [fp, #8]
   1ad78:	mov	r5, r3
   1ad7c:	mov	r7, r2
   1ad80:	mov	r4, r1
   1ad84:	cmp	r0, #1
   1ad88:	blt	1adc0 <__gcov_flush@@Base+0x63c>
   1ad8c:	add	r1, r4, #1
   1ad90:	mov	r2, #0
   1ad94:	b	1adac <__gcov_flush@@Base+0x628>
   1ad98:	add	r2, r2, #1
   1ad9c:	mov	r4, r1
   1ada0:	add	r1, r1, #1
   1ada4:	cmp	r2, r0
   1ada8:	bge	1adc0 <__gcov_flush@@Base+0x63c>
   1adac:	ldrb	r3, [r1]
   1adb0:	cmp	r3, #47	; 0x2f
   1adb4:	beq	1ad98 <__gcov_flush@@Base+0x614>
   1adb8:	cmp	r3, #0
   1adbc:	bne	1ada0 <__gcov_flush@@Base+0x61c>
   1adc0:	mov	r0, r6
   1adc4:	mov	r1, r7
   1adc8:	mov	r2, r5
   1adcc:	bl	11f24 <memcpy@plt>
   1add0:	add	r0, r5, r7
   1add4:	ldrb	r0, [r0, #-1]
   1add8:	cmp	r0, #47	; 0x2f
   1addc:	movne	r0, #47	; 0x2f
   1ade0:	strbne	r0, [r6, r5]
   1ade4:	mov	r0, r4
   1ade8:	addne	r5, r5, #1
   1adec:	add	r5, r6, r5
   1adf0:	bl	11fd8 <strlen@plt>
   1adf4:	add	r2, r0, #1
   1adf8:	mov	r0, r5
   1adfc:	mov	r1, r4
   1ae00:	pop	{r4, r5, r6, r7, fp, lr}
   1ae04:	b	11f24 <memcpy@plt>
   1ae08:	mov	r1, #47	; 0x2f
   1ae0c:	b	11fe4 <strchr@plt>
   1ae10:	mov	r1, #47	; 0x2f
   1ae14:	b	1208c <strrchr@plt>
   1ae18:	push	{fp, lr}
   1ae1c:	mov	fp, sp
   1ae20:	sub	sp, sp, #8
   1ae24:	mov	r0, #0
   1ae28:	str	r0, [sp, #4]
   1ae2c:	add	r1, sp, #4
   1ae30:	mov	r0, #2
   1ae34:	bl	12044 <prctl@plt>
   1ae38:	ldr	r1, [sp, #4]
   1ae3c:	cmp	r0, #0
   1ae40:	cmpeq	r1, #9
   1ae44:	bne	1ae58 <__gcov_flush@@Base+0x6d4>
   1ae48:	mov	r0, #1
   1ae4c:	mov	r1, #0
   1ae50:	bl	12044 <prctl@plt>
   1ae54:	ldr	r1, [sp, #4]
   1ae58:	sub	r0, r1, #9
   1ae5c:	clz	r0, r0
   1ae60:	lsr	r0, r0, #5
   1ae64:	mov	sp, fp
   1ae68:	pop	{fp, pc}
   1ae6c:	mov	r0, #1
   1ae70:	mov	r1, #9
   1ae74:	b	12044 <prctl@plt>

0001ae78 <__libc_csu_init@@Base>:
   1ae78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae7c:	mov	r7, r0
   1ae80:	ldr	r6, [pc, #72]	; 1aed0 <__libc_csu_init@@Base+0x58>
   1ae84:	ldr	r5, [pc, #72]	; 1aed4 <__libc_csu_init@@Base+0x5c>
   1ae88:	add	r6, pc, r6
   1ae8c:	add	r5, pc, r5
   1ae90:	sub	r6, r6, r5
   1ae94:	mov	r8, r1
   1ae98:	mov	r9, r2
   1ae9c:	bl	11ec8 <fdopen@plt-0x20>
   1aea0:	asrs	r6, r6, #2
   1aea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aea8:	mov	r4, #0
   1aeac:	add	r4, r4, #1
   1aeb0:	ldr	r3, [r5], #4
   1aeb4:	mov	r2, r9
   1aeb8:	mov	r1, r8
   1aebc:	mov	r0, r7
   1aec0:	blx	r3
   1aec4:	cmp	r6, r4
   1aec8:	bne	1aeac <__libc_csu_init@@Base+0x34>
   1aecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aed0:	andeq	r1, r1, ip, lsl #16
   1aed4:	andeq	r1, r1, ip, ror #15

0001aed8 <__libc_csu_fini@@Base>:
   1aed8:	bx	lr
   1aedc:	ldr	r3, [pc, #12]	; 1aef0 <__libc_csu_fini@@Base+0x18>
   1aee0:	mov	r1, #0
   1aee4:	add	r3, pc, r3
   1aee8:	ldr	r2, [r3]
   1aeec:	b	12014 <__cxa_atexit@plt>
   1aef0:	andeq	r2, r1, r8, ror #3

Disassembly of section .fini:

0001aef4 <.fini>:
   1aef4:	push	{r3, lr}
   1aef8:	pop	{r3, pc}
