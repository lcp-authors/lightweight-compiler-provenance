
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011fbc <.init>:
   11fbc:	push	{r3, lr}
   11fc0:	bl	120fc <_start@@Base+0x3c>
   11fc4:	pop	{r3, pc}

Disassembly of section .plt:

00011fc8 <printf@plt-0x14>:
   11fc8:	push	{lr}		; (str lr, [sp, #-4]!)
   11fcc:	ldr	lr, [pc, #4]	; 11fd8 <printf@plt-0x4>
   11fd0:	add	lr, pc, lr
   11fd4:	ldr	pc, [lr, #8]!
   11fd8:	andeq	sl, r1, r8, lsr #32

00011fdc <printf@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #106496	; 0x1a000
   11fe4:	ldr	pc, [ip, #40]!	; 0x28

00011fe8 <free@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #106496	; 0x1a000
   11ff0:	ldr	pc, [ip, #32]!

00011ff4 <memcpy@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #106496	; 0x1a000
   11ffc:	ldr	pc, [ip, #24]!

00012000 <memcmp@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #106496	; 0x1a000
   12008:	ldr	pc, [ip, #16]!

0001200c <realloc@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #106496	; 0x1a000
   12014:	ldr	pc, [ip, #8]!

00012018 <fwrite@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #106496	; 0x1a000
   12020:	ldr	pc, [ip, #0]!

00012024 <puts@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #102400	; 0x19000
   1202c:	ldr	pc, [ip, #4088]!	; 0xff8

00012030 <malloc@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #102400	; 0x19000
   12038:	ldr	pc, [ip, #4080]!	; 0xff0

0001203c <__libc_start_main@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #102400	; 0x19000
   12044:	ldr	pc, [ip, #4072]!	; 0xfe8

00012048 <__gmon_start__@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #102400	; 0x19000
   12050:	ldr	pc, [ip, #4064]!	; 0xfe0

00012054 <strlen@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #102400	; 0x19000
   1205c:	ldr	pc, [ip, #4056]!	; 0xfd8

00012060 <fprintf@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #102400	; 0x19000
   12068:	ldr	pc, [ip, #4048]!	; 0xfd0

0001206c <posix_memalign@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #102400	; 0x19000
   12074:	ldr	pc, [ip, #4040]!	; 0xfc8

00012078 <memset@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #102400	; 0x19000
   12080:	ldr	pc, [ip, #4032]!	; 0xfc0

00012084 <strncpy@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #102400	; 0x19000
   1208c:	ldr	pc, [ip, #4024]!	; 0xfb8

00012090 <memchr@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #102400	; 0x19000
   12098:	ldr	pc, [ip, #4016]!	; 0xfb0

0001209c <fputc@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #102400	; 0x19000
   120a4:	ldr	pc, [ip, #4008]!	; 0xfa8

000120a8 <abort@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #102400	; 0x19000
   120b0:	ldr	pc, [ip, #4000]!	; 0xfa0

000120b4 <__assert_fail@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #102400	; 0x19000
   120bc:	ldr	pc, [ip, #3992]!	; 0xf98

Disassembly of section .text:

000120c0 <_start@@Base>:
   120c0:	mov	fp, #0
   120c4:	mov	lr, #0
   120c8:	pop	{r1}		; (ldr r1, [sp], #4)
   120cc:	mov	r2, sp
   120d0:	push	{r2}		; (str r2, [sp, #-4]!)
   120d4:	push	{r0}		; (str r0, [sp, #-4]!)
   120d8:	ldr	ip, [pc, #16]	; 120f0 <_start@@Base+0x30>
   120dc:	push	{ip}		; (str ip, [sp, #-4]!)
   120e0:	ldr	r0, [pc, #12]	; 120f4 <_start@@Base+0x34>
   120e4:	ldr	r3, [pc, #12]	; 120f8 <_start@@Base+0x38>
   120e8:	bl	1203c <__libc_start_main@plt>
   120ec:	bl	120a8 <abort@plt>
   120f0:	andeq	sl, r1, r0, lsr #10
   120f4:	andeq	r3, r1, r4, ror r6
   120f8:	andeq	sl, r1, r0, asr #9
   120fc:	ldr	r3, [pc, #20]	; 12118 <_start@@Base+0x58>
   12100:	ldr	r2, [pc, #20]	; 1211c <_start@@Base+0x5c>
   12104:	add	r3, pc, r3
   12108:	ldr	r2, [r3, r2]
   1210c:	cmp	r2, #0
   12110:	bxeq	lr
   12114:	b	12048 <__gmon_start__@plt>
   12118:	strdeq	r9, [r1], -r4
   1211c:	andeq	r0, r0, r4, rrx
   12120:	ldr	r3, [pc, #28]	; 12144 <_start@@Base+0x84>
   12124:	ldr	r0, [pc, #28]	; 12148 <_start@@Base+0x88>
   12128:	sub	r3, r3, r0
   1212c:	cmp	r3, #6
   12130:	bxls	lr
   12134:	ldr	r3, [pc, #16]	; 1214c <_start@@Base+0x8c>
   12138:	cmp	r3, #0
   1213c:	bxeq	lr
   12140:	bx	r3
   12144:	andeq	ip, r2, r3, lsl #1
   12148:	andeq	ip, r2, r0, lsl #1
   1214c:	andeq	r0, r0, r0
   12150:	ldr	r1, [pc, #36]	; 1217c <_start@@Base+0xbc>
   12154:	ldr	r0, [pc, #36]	; 12180 <_start@@Base+0xc0>
   12158:	sub	r1, r1, r0
   1215c:	asr	r1, r1, #2
   12160:	add	r1, r1, r1, lsr #31
   12164:	asrs	r1, r1, #1
   12168:	bxeq	lr
   1216c:	ldr	r3, [pc, #16]	; 12184 <_start@@Base+0xc4>
   12170:	cmp	r3, #0
   12174:	bxeq	lr
   12178:	bx	r3
   1217c:	andeq	ip, r2, r0, lsl #1
   12180:	andeq	ip, r2, r0, lsl #1
   12184:	andeq	r0, r0, r0
   12188:	push	{r4, lr}
   1218c:	ldr	r4, [pc, #24]	; 121ac <_start@@Base+0xec>
   12190:	ldrb	r3, [r4]
   12194:	cmp	r3, #0
   12198:	popne	{r4, pc}
   1219c:	bl	12120 <_start@@Base+0x60>
   121a0:	mov	r3, #1
   121a4:	strb	r3, [r4]
   121a8:	pop	{r4, pc}
   121ac:	andeq	ip, r2, r0, lsl #1
   121b0:	ldr	r0, [pc, #40]	; 121e0 <_start@@Base+0x120>
   121b4:	ldr	r3, [r0]
   121b8:	cmp	r3, #0
   121bc:	bne	121c4 <_start@@Base+0x104>
   121c0:	b	12150 <_start@@Base+0x90>
   121c4:	ldr	r3, [pc, #24]	; 121e4 <_start@@Base+0x124>
   121c8:	cmp	r3, #0
   121cc:	beq	121c0 <_start@@Base+0x100>
   121d0:	push	{r4, lr}
   121d4:	blx	r3
   121d8:	pop	{r4, lr}
   121dc:	b	12150 <_start@@Base+0x90>
   121e0:	andeq	fp, r2, r4, lsl pc
   121e4:	andeq	r0, r0, r0
   121e8:	push	{fp}		; (str fp, [sp, #-4]!)
   121ec:	add	fp, sp, #0
   121f0:	sub	sp, sp, #12
   121f4:	mov	r3, r0
   121f8:	strb	r3, [fp, #-5]
   121fc:	ldrb	r3, [fp, #-5]
   12200:	mov	r0, r3
   12204:	add	sp, fp, #0
   12208:	pop	{fp}		; (ldr fp, [sp], #4)
   1220c:	bx	lr
   12210:	push	{fp}		; (str fp, [sp, #-4]!)
   12214:	add	fp, sp, #0
   12218:	sub	sp, sp, #12
   1221c:	mov	r3, r0
   12220:	strb	r3, [fp, #-5]
   12224:	ldrb	r3, [fp, #-5]
   12228:	mov	r0, r3
   1222c:	add	sp, fp, #0
   12230:	pop	{fp}		; (ldr fp, [sp], #4)
   12234:	bx	lr
   12238:	push	{fp, lr}
   1223c:	add	fp, sp, #4
   12240:	sub	sp, sp, #8
   12244:	str	r0, [fp, #-8]
   12248:	ldr	r3, [fp, #-8]
   1224c:	ldrb	r3, [r3]
   12250:	mov	r0, r3
   12254:	bl	121e8 <_start@@Base+0x128>
   12258:	mov	r3, r0
   1225c:	mov	r0, r3
   12260:	sub	sp, fp, #4
   12264:	pop	{fp, pc}
   12268:	push	{fp}		; (str fp, [sp, #-4]!)
   1226c:	add	fp, sp, #0
   12270:	sub	sp, sp, #12
   12274:	strd	r0, [fp, #-12]
   12278:	ldrd	r2, [fp, #-12]
   1227c:	mov	r0, r2
   12280:	mov	r1, r3
   12284:	add	sp, fp, #0
   12288:	pop	{fp}		; (ldr fp, [sp], #4)
   1228c:	bx	lr
   12290:	push	{fp}		; (str fp, [sp, #-4]!)
   12294:	add	fp, sp, #0
   12298:	sub	sp, sp, #12
   1229c:	strd	r0, [fp, #-12]
   122a0:	ldrd	r2, [fp, #-12]
   122a4:	mov	r0, r2
   122a8:	mov	r1, r3
   122ac:	add	sp, fp, #0
   122b0:	pop	{fp}		; (ldr fp, [sp], #4)
   122b4:	bx	lr
   122b8:	push	{fp, lr}
   122bc:	add	fp, sp, #4
   122c0:	sub	sp, sp, #8
   122c4:	str	r0, [fp, #-8]
   122c8:	ldr	r3, [fp, #-8]
   122cc:	ldrd	r2, [r3]
   122d0:	mov	r0, r2
   122d4:	mov	r1, r3
   122d8:	bl	12268 <_start@@Base+0x1a8>
   122dc:	mov	r2, r0
   122e0:	mov	r3, r1
   122e4:	mov	r0, r2
   122e8:	mov	r1, r3
   122ec:	sub	sp, fp, #4
   122f0:	pop	{fp, pc}
   122f4:	push	{fp}		; (str fp, [sp, #-4]!)
   122f8:	add	fp, sp, #0
   122fc:	sub	sp, sp, #20
   12300:	vstr	s0, [fp, #-16]
   12304:	ldr	r3, [fp, #-16]
   12308:	str	r3, [fp, #-8]
   1230c:	ldr	r3, [fp, #-8]
   12310:	str	r3, [fp, #-8]
   12314:	ldr	r3, [fp, #-8]
   12318:	vmov	s15, r3
   1231c:	vmov.f32	s0, s15
   12320:	add	sp, fp, #0
   12324:	pop	{fp}		; (ldr fp, [sp], #4)
   12328:	bx	lr
   1232c:	push	{fp, lr}
   12330:	add	fp, sp, #4
   12334:	sub	sp, sp, #8
   12338:	str	r0, [fp, #-8]
   1233c:	ldr	r3, [fp, #-8]
   12340:	vldr	s15, [r3]
   12344:	vmov.f32	s0, s15
   12348:	bl	122f4 <_start@@Base+0x234>
   1234c:	vmov.f32	s15, s0
   12350:	vmov.f32	s0, s15
   12354:	sub	sp, fp, #4
   12358:	pop	{fp, pc}
   1235c:	push	{fp}		; (str fp, [sp, #-4]!)
   12360:	add	fp, sp, #0
   12364:	sub	sp, sp, #12
   12368:	str	r0, [fp, #-8]
   1236c:	ldr	r3, [fp, #-8]
   12370:	mov	r0, r3
   12374:	add	sp, fp, #0
   12378:	pop	{fp}		; (ldr fp, [sp], #4)
   1237c:	bx	lr
   12380:	push	{fp, lr}
   12384:	add	fp, sp, #4
   12388:	sub	sp, sp, #8
   1238c:	str	r0, [fp, #-8]
   12390:	ldr	r3, [fp, #-8]
   12394:	ldr	r3, [r3]
   12398:	mov	r0, r3
   1239c:	bl	1235c <_start@@Base+0x29c>
   123a0:	mov	r3, r0
   123a4:	mov	r0, r3
   123a8:	sub	sp, fp, #4
   123ac:	pop	{fp, pc}
   123b0:	push	{fp}		; (str fp, [sp, #-4]!)
   123b4:	add	fp, sp, #0
   123b8:	sub	sp, sp, #12
   123bc:	str	r0, [fp, #-8]
   123c0:	ldr	r3, [fp, #-8]
   123c4:	mov	r0, r3
   123c8:	add	sp, fp, #0
   123cc:	pop	{fp}		; (ldr fp, [sp], #4)
   123d0:	bx	lr
   123d4:	push	{fp, lr}
   123d8:	add	fp, sp, #4
   123dc:	sub	sp, sp, #8
   123e0:	str	r0, [fp, #-8]
   123e4:	ldr	r3, [fp, #-8]
   123e8:	ldr	r3, [r3]
   123ec:	mov	r0, r3
   123f0:	bl	123b0 <_start@@Base+0x2f0>
   123f4:	mov	r3, r0
   123f8:	mov	r0, r3
   123fc:	sub	sp, fp, #4
   12400:	pop	{fp, pc}
   12404:	push	{fp}		; (str fp, [sp, #-4]!)
   12408:	add	fp, sp, #0
   1240c:	sub	sp, sp, #12
   12410:	mov	r3, r0
   12414:	strh	r3, [fp, #-6]
   12418:	ldrh	r3, [fp, #-6]
   1241c:	mov	r0, r3
   12420:	add	sp, fp, #0
   12424:	pop	{fp}		; (ldr fp, [sp], #4)
   12428:	bx	lr
   1242c:	push	{fp, lr}
   12430:	add	fp, sp, #4
   12434:	sub	sp, sp, #8
   12438:	str	r0, [fp, #-8]
   1243c:	ldr	r3, [fp, #-8]
   12440:	ldrh	r3, [r3]
   12444:	mov	r0, r3
   12448:	bl	12404 <_start@@Base+0x344>
   1244c:	mov	r3, r0
   12450:	mov	r0, r3
   12454:	sub	sp, fp, #4
   12458:	pop	{fp, pc}
   1245c:	push	{fp}		; (str fp, [sp, #-4]!)
   12460:	add	fp, sp, #0
   12464:	sub	sp, sp, #12
   12468:	str	r0, [fp, #-8]
   1246c:	ldr	r3, [fp, #-8]
   12470:	mov	r0, r3
   12474:	add	sp, fp, #0
   12478:	pop	{fp}		; (ldr fp, [sp], #4)
   1247c:	bx	lr
   12480:	push	{fp}		; (str fp, [sp, #-4]!)
   12484:	add	fp, sp, #0
   12488:	sub	sp, sp, #12
   1248c:	str	r0, [fp, #-8]
   12490:	ldr	r3, [fp, #-8]
   12494:	mov	r0, r3
   12498:	add	sp, fp, #0
   1249c:	pop	{fp}		; (ldr fp, [sp], #4)
   124a0:	bx	lr
   124a4:	push	{fp, lr}
   124a8:	add	fp, sp, #4
   124ac:	sub	sp, sp, #8
   124b0:	str	r0, [fp, #-8]
   124b4:	ldr	r3, [fp, #-8]
   124b8:	ldr	r3, [r3]
   124bc:	mov	r0, r3
   124c0:	bl	1245c <_start@@Base+0x39c>
   124c4:	mov	r3, r0
   124c8:	mov	r0, r3
   124cc:	sub	sp, fp, #4
   124d0:	pop	{fp, pc}
   124d4:	push	{fp, lr}
   124d8:	add	fp, sp, #4
   124dc:	sub	sp, sp, #8
   124e0:	str	r0, [fp, #-8]
   124e4:	ldr	r3, [fp, #-8]
   124e8:	cmp	r3, #0
   124ec:	beq	12508 <_start@@Base+0x448>
   124f0:	ldr	r3, [fp, #-8]
   124f4:	sub	r3, r3, #4
   124f8:	mov	r0, r3
   124fc:	bl	12380 <_start@@Base+0x2c0>
   12500:	mov	r3, r0
   12504:	b	1250c <_start@@Base+0x44c>
   12508:	mov	r3, #0
   1250c:	mov	r0, r3
   12510:	sub	sp, fp, #4
   12514:	pop	{fp, pc}
   12518:	push	{fp, lr}
   1251c:	add	fp, sp, #4
   12520:	sub	sp, sp, #8
   12524:	str	r0, [fp, #-8]
   12528:	ldr	r0, [fp, #-8]
   1252c:	bl	124d4 <_start@@Base+0x414>
   12530:	mov	r3, r0
   12534:	mov	r0, r3
   12538:	sub	sp, fp, #4
   1253c:	pop	{fp, pc}
   12540:	push	{fp, lr}
   12544:	add	fp, sp, #4
   12548:	sub	sp, sp, #8
   1254c:	str	r0, [fp, #-8]
   12550:	str	r1, [fp, #-12]
   12554:	ldr	r0, [fp, #-8]
   12558:	bl	124d4 <_start@@Base+0x414>
   1255c:	mov	r2, r0
   12560:	ldr	r3, [fp, #-12]
   12564:	cmp	r2, r3
   12568:	bhi	1258c <_start@@Base+0x4cc>
   1256c:	ldr	r3, [pc, #64]	; 125b4 <_start@@Base+0x4f4>
   12570:	add	r3, pc, r3
   12574:	ldr	r2, [pc, #60]	; 125b8 <_start@@Base+0x4f8>
   12578:	ldr	r1, [pc, #60]	; 125bc <_start@@Base+0x4fc>
   1257c:	add	r1, pc, r1
   12580:	ldr	r0, [pc, #56]	; 125c0 <_start@@Base+0x500>
   12584:	add	r0, pc, r0
   12588:	bl	120b4 <__assert_fail@plt>
   1258c:	ldr	r3, [fp, #-12]
   12590:	lsl	r3, r3, #2
   12594:	ldr	r2, [fp, #-8]
   12598:	add	r3, r2, r3
   1259c:	mov	r0, r3
   125a0:	bl	1232c <_start@@Base+0x26c>
   125a4:	vmov.f32	s15, s0
   125a8:	vmov.f32	s0, s15
   125ac:	sub	sp, fp, #4
   125b0:	pop	{fp, pc}
   125b4:	andeq	r8, r0, r4, lsl #8
   125b8:	muleq	r0, r3, r1
   125bc:			; <UNDEFINED> instruction: 0x00007fb0
   125c0:	andeq	r8, r0, r4, lsr #32
   125c4:	push	{fp, lr}
   125c8:	add	fp, sp, #4
   125cc:	sub	sp, sp, #16
   125d0:	str	r0, [fp, #-16]
   125d4:	str	r1, [fp, #-20]	; 0xffffffec
   125d8:	mov	r3, #0
   125dc:	str	r3, [fp, #-12]
   125e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   125e4:	cmp	r3, #0
   125e8:	bne	125f4 <_start@@Base+0x534>
   125ec:	mov	r3, #1
   125f0:	b	12658 <_start@@Base+0x598>
   125f4:	sub	r3, fp, #12
   125f8:	mov	r2, #4
   125fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   12600:	mov	r0, r3
   12604:	bl	12084 <strncpy@plt>
   12608:	ldr	r3, [fp, #-12]
   1260c:	mov	r0, r3
   12610:	bl	12480 <_start@@Base+0x3c0>
   12614:	mov	r3, r0
   12618:	str	r3, [fp, #-12]
   1261c:	ldr	r3, [fp, #-16]
   12620:	add	r3, r3, #4
   12624:	mov	r0, r3
   12628:	bl	124a4 <_start@@Base+0x3e4>
   1262c:	str	r0, [fp, #-8]
   12630:	ldr	r3, [fp, #-12]
   12634:	cmp	r3, #0
   12638:	beq	1264c <_start@@Base+0x58c>
   1263c:	ldr	r3, [fp, #-12]
   12640:	ldr	r2, [fp, #-8]
   12644:	cmp	r2, r3
   12648:	bne	12654 <_start@@Base+0x594>
   1264c:	mov	r3, #1
   12650:	b	12658 <_start@@Base+0x598>
   12654:	mov	r3, #0
   12658:	mov	r0, r3
   1265c:	sub	sp, fp, #4
   12660:	pop	{fp, pc}
   12664:	push	{fp, lr}
   12668:	add	fp, sp, #4
   1266c:	sub	sp, sp, #16
   12670:	str	r0, [fp, #-16]
   12674:	mov	r3, #0
   12678:	str	r3, [fp, #-8]
   1267c:	ldr	r3, [fp, #-16]
   12680:	cmp	r3, #0
   12684:	beq	126b8 <_start@@Base+0x5f8>
   12688:	ldr	r1, [fp, #-8]
   1268c:	ldr	r0, [fp, #-16]
   12690:	bl	125c4 <_start@@Base+0x504>
   12694:	mov	r3, r0
   12698:	cmp	r3, #0
   1269c:	beq	126b8 <_start@@Base+0x5f8>
   126a0:	ldr	r0, [fp, #-16]
   126a4:	bl	12380 <_start@@Base+0x2c0>
   126a8:	mov	r2, r0
   126ac:	ldr	r3, [fp, #-16]
   126b0:	add	r3, r3, r2
   126b4:	b	126bc <_start@@Base+0x5fc>
   126b8:	mov	r3, #0
   126bc:	mov	r0, r3
   126c0:	sub	sp, fp, #4
   126c4:	pop	{fp, pc}
   126c8:	push	{fp, lr}
   126cc:	add	fp, sp, #4
   126d0:	sub	sp, sp, #16
   126d4:	str	r0, [fp, #-16]
   126d8:	mov	r3, #0
   126dc:	strh	r3, [fp, #-6]
   126e0:	ldr	r3, [fp, #-16]
   126e4:	cmp	r3, #0
   126e8:	bne	1270c <_start@@Base+0x64c>
   126ec:	ldr	r3, [pc, #200]	; 127bc <_start@@Base+0x6fc>
   126f0:	add	r3, pc, r3
   126f4:	mov	r2, #41	; 0x29
   126f8:	ldr	r1, [pc, #192]	; 127c0 <_start@@Base+0x700>
   126fc:	add	r1, pc, r1
   12700:	ldr	r0, [pc, #188]	; 127c4 <_start@@Base+0x704>
   12704:	add	r0, pc, r0
   12708:	bl	120b4 <__assert_fail@plt>
   1270c:	mov	r3, #0
   12710:	strh	r3, [fp, #-8]
   12714:	ldr	r0, [fp, #-16]
   12718:	bl	123d4 <_start@@Base+0x314>
   1271c:	mov	r3, r0
   12720:	rsb	r3, r3, #0
   12724:	ldr	r2, [fp, #-16]
   12728:	add	r3, r2, r3
   1272c:	str	r3, [fp, #-12]
   12730:	ldr	r0, [fp, #-12]
   12734:	bl	1242c <_start@@Base+0x36c>
   12738:	mov	r3, r0
   1273c:	mov	r2, r3
   12740:	ldrh	r3, [fp, #-8]
   12744:	add	r3, r3, #3
   12748:	lsl	r3, r3, #1
   1274c:	cmp	r2, r3
   12750:	bcc	12778 <_start@@Base+0x6b8>
   12754:	ldrh	r3, [fp, #-8]
   12758:	add	r3, r3, #2
   1275c:	lsl	r3, r3, #1
   12760:	ldr	r2, [fp, #-12]
   12764:	add	r3, r2, r3
   12768:	mov	r0, r3
   1276c:	bl	1242c <_start@@Base+0x36c>
   12770:	mov	r3, r0
   12774:	strh	r3, [fp, #-6]
   12778:	ldrh	r3, [fp, #-6]
   1277c:	cmp	r3, #0
   12780:	beq	127a4 <_start@@Base+0x6e4>
   12784:	ldrh	r3, [fp, #-6]
   12788:	ldr	r2, [fp, #-16]
   1278c:	add	r3, r2, r3
   12790:	mov	r0, r3
   12794:	bl	122b8 <_start@@Base+0x1f8>
   12798:	mov	r2, r0
   1279c:	mov	r3, r1
   127a0:	b	127ac <_start@@Base+0x6ec>
   127a4:	mov	r2, #0
   127a8:	mov	r3, #0
   127ac:	mov	r0, r2
   127b0:	mov	r1, r3
   127b4:	sub	sp, fp, #4
   127b8:	pop	{fp, pc}
   127bc:	andeq	r8, r0, ip, asr r2
   127c0:	andeq	r7, r0, r4, ror #29
   127c4:	andeq	r7, r0, r0, asr pc
   127c8:	push	{fp, lr}
   127cc:	add	fp, sp, #4
   127d0:	sub	sp, sp, #16
   127d4:	str	r0, [fp, #-16]
   127d8:	mov	r3, #0
   127dc:	strh	r3, [fp, #-6]
   127e0:	ldr	r3, [fp, #-16]
   127e4:	cmp	r3, #0
   127e8:	bne	1280c <_start@@Base+0x74c>
   127ec:	ldr	r3, [pc, #188]	; 128b0 <_start@@Base+0x7f0>
   127f0:	add	r3, pc, r3
   127f4:	mov	r2, #42	; 0x2a
   127f8:	ldr	r1, [pc, #180]	; 128b4 <_start@@Base+0x7f4>
   127fc:	add	r1, pc, r1
   12800:	ldr	r0, [pc, #176]	; 128b8 <_start@@Base+0x7f8>
   12804:	add	r0, pc, r0
   12808:	bl	120b4 <__assert_fail@plt>
   1280c:	mov	r3, #1
   12810:	strh	r3, [fp, #-8]
   12814:	ldr	r0, [fp, #-16]
   12818:	bl	123d4 <_start@@Base+0x314>
   1281c:	mov	r3, r0
   12820:	rsb	r3, r3, #0
   12824:	ldr	r2, [fp, #-16]
   12828:	add	r3, r2, r3
   1282c:	str	r3, [fp, #-12]
   12830:	ldr	r0, [fp, #-12]
   12834:	bl	1242c <_start@@Base+0x36c>
   12838:	mov	r3, r0
   1283c:	mov	r2, r3
   12840:	ldrh	r3, [fp, #-8]
   12844:	add	r3, r3, #3
   12848:	lsl	r3, r3, #1
   1284c:	cmp	r2, r3
   12850:	bcc	12878 <_start@@Base+0x7b8>
   12854:	ldrh	r3, [fp, #-8]
   12858:	add	r3, r3, #2
   1285c:	lsl	r3, r3, #1
   12860:	ldr	r2, [fp, #-12]
   12864:	add	r3, r2, r3
   12868:	mov	r0, r3
   1286c:	bl	1242c <_start@@Base+0x36c>
   12870:	mov	r3, r0
   12874:	strh	r3, [fp, #-6]
   12878:	ldrh	r3, [fp, #-6]
   1287c:	cmp	r3, #0
   12880:	beq	128a0 <_start@@Base+0x7e0>
   12884:	ldrh	r3, [fp, #-6]
   12888:	ldr	r2, [fp, #-16]
   1288c:	add	r3, r2, r3
   12890:	mov	r0, r3
   12894:	bl	12238 <_start@@Base+0x178>
   12898:	mov	r3, r0
   1289c:	b	128a4 <_start@@Base+0x7e4>
   128a0:	mov	r3, #0
   128a4:	mov	r0, r3
   128a8:	sub	sp, fp, #4
   128ac:	pop	{fp, pc}
   128b0:	andeq	r8, r0, r8, ror #2
   128b4:	andeq	r7, r0, r4, ror #27
   128b8:	andeq	r7, r0, r0, asr lr
   128bc:	push	{fp, lr}
   128c0:	add	fp, sp, #4
   128c4:	sub	sp, sp, #24
   128c8:	str	r0, [fp, #-24]	; 0xffffffe8
   128cc:	mov	r3, #0
   128d0:	strh	r3, [fp, #-6]
   128d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128d8:	cmp	r3, #0
   128dc:	bne	12900 <_start@@Base+0x840>
   128e0:	ldr	r3, [pc, #204]	; 129b4 <_start@@Base+0x8f4>
   128e4:	add	r3, pc, r3
   128e8:	mov	r2, #43	; 0x2b
   128ec:	ldr	r1, [pc, #196]	; 129b8 <_start@@Base+0x8f8>
   128f0:	add	r1, pc, r1
   128f4:	ldr	r0, [pc, #192]	; 129bc <_start@@Base+0x8fc>
   128f8:	add	r0, pc, r0
   128fc:	bl	120b4 <__assert_fail@plt>
   12900:	mov	r3, #2
   12904:	strh	r3, [fp, #-8]
   12908:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1290c:	bl	123d4 <_start@@Base+0x314>
   12910:	mov	r3, r0
   12914:	rsb	r3, r3, #0
   12918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1291c:	add	r3, r2, r3
   12920:	str	r3, [fp, #-12]
   12924:	ldr	r0, [fp, #-12]
   12928:	bl	1242c <_start@@Base+0x36c>
   1292c:	mov	r3, r0
   12930:	mov	r2, r3
   12934:	ldrh	r3, [fp, #-8]
   12938:	add	r3, r3, #3
   1293c:	lsl	r3, r3, #1
   12940:	cmp	r2, r3
   12944:	bcc	1296c <_start@@Base+0x8ac>
   12948:	ldrh	r3, [fp, #-8]
   1294c:	add	r3, r3, #2
   12950:	lsl	r3, r3, #1
   12954:	ldr	r2, [fp, #-12]
   12958:	add	r3, r2, r3
   1295c:	mov	r0, r3
   12960:	bl	1242c <_start@@Base+0x36c>
   12964:	mov	r3, r0
   12968:	strh	r3, [fp, #-6]
   1296c:	ldrh	r3, [fp, #-6]
   12970:	cmp	r3, #0
   12974:	beq	129a4 <_start@@Base+0x8e4>
   12978:	ldrh	r3, [fp, #-6]
   1297c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12980:	add	r3, r2, r3
   12984:	str	r3, [fp, #-16]
   12988:	ldr	r0, [fp, #-16]
   1298c:	bl	12380 <_start@@Base+0x2c0>
   12990:	mov	r3, r0
   12994:	add	r3, r3, #4
   12998:	ldr	r2, [fp, #-16]
   1299c:	add	r3, r2, r3
   129a0:	b	129a8 <_start@@Base+0x8e8>
   129a4:	mov	r3, #0
   129a8:	mov	r0, r3
   129ac:	sub	sp, fp, #4
   129b0:	pop	{fp, pc}
   129b4:	andeq	r8, r0, r0, lsl #1
   129b8:	strdeq	r7, [r0], -r0
   129bc:	andeq	r7, r0, ip, asr sp
   129c0:	push	{fp}		; (str fp, [sp, #-4]!)
   129c4:	add	fp, sp, #0
   129c8:	sub	sp, sp, #12
   129cc:	str	r0, [fp, #-8]
   129d0:	ldr	r3, [fp, #-8]
   129d4:	ldr	r3, [r3, #24]
   129d8:	mov	r0, r3
   129dc:	add	sp, fp, #0
   129e0:	pop	{fp}		; (ldr fp, [sp], #4)
   129e4:	bx	lr
   129e8:	push	{fp}		; (str fp, [sp, #-4]!)
   129ec:	add	fp, sp, #0
   129f0:	sub	sp, sp, #12
   129f4:	str	r0, [fp, #-8]
   129f8:	str	r1, [fp, #-12]
   129fc:	ldr	r3, [fp, #-8]
   12a00:	ldr	r2, [r3]
   12a04:	ldr	r3, [fp, #-8]
   12a08:	ldr	r3, [r3, #4]
   12a0c:	cmp	r2, r3
   12a10:	bne	12a3c <_start@@Base+0x97c>
   12a14:	ldr	r3, [fp, #-12]
   12a18:	cmp	r3, #0
   12a1c:	beq	12a30 <_start@@Base+0x970>
   12a20:	ldr	r3, [fp, #-8]
   12a24:	ldr	r2, [r3, #24]
   12a28:	ldr	r3, [fp, #-12]
   12a2c:	str	r2, [r3]
   12a30:	ldr	r3, [fp, #-8]
   12a34:	ldr	r3, [r3, #8]
   12a38:	b	12a58 <_start@@Base+0x998>
   12a3c:	ldr	r3, [fp, #-12]
   12a40:	cmp	r3, #0
   12a44:	beq	12a54 <_start@@Base+0x994>
   12a48:	ldr	r3, [fp, #-12]
   12a4c:	mov	r2, #0
   12a50:	str	r2, [r3]
   12a54:	mov	r3, #0
   12a58:	mov	r0, r3
   12a5c:	add	sp, fp, #0
   12a60:	pop	{fp}		; (ldr fp, [sp], #4)
   12a64:	bx	lr
   12a68:	push	{fp, lr}
   12a6c:	add	fp, sp, #4
   12a70:	sub	sp, sp, #8
   12a74:	str	r0, [fp, #-8]
   12a78:	mov	r3, r1
   12a7c:	strb	r3, [fp, #-9]
   12a80:	ldrb	r3, [fp, #-9]
   12a84:	mov	r0, r3
   12a88:	bl	12210 <_start@@Base+0x150>
   12a8c:	mov	r3, r0
   12a90:	mov	r2, r3
   12a94:	ldr	r3, [fp, #-8]
   12a98:	strb	r2, [r3]
   12a9c:	ldr	r3, [fp, #-8]
   12aa0:	mov	r0, r3
   12aa4:	sub	sp, fp, #4
   12aa8:	pop	{fp, pc}
   12aac:	push	{fp, lr}
   12ab0:	add	fp, sp, #4
   12ab4:	sub	sp, sp, #16
   12ab8:	str	r0, [fp, #-8]
   12abc:	strd	r2, [fp, #-20]	; 0xffffffec
   12ac0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12ac4:	bl	12290 <_start@@Base+0x1d0>
   12ac8:	mov	r2, r0
   12acc:	mov	r3, r1
   12ad0:	ldr	r1, [fp, #-8]
   12ad4:	strd	r2, [r1]
   12ad8:	ldr	r3, [fp, #-8]
   12adc:	mov	r0, r3
   12ae0:	sub	sp, fp, #4
   12ae4:	pop	{fp, pc}
   12ae8:	push	{fp, lr}
   12aec:	add	fp, sp, #4
   12af0:	sub	sp, sp, #24
   12af4:	str	r0, [fp, #-8]
   12af8:	str	r1, [fp, #-12]
   12afc:	str	r2, [fp, #-16]
   12b00:	mvn	r3, #-1073741824	; 0xc0000000
   12b04:	str	r3, [sp, #4]
   12b08:	mov	r3, #4
   12b0c:	str	r3, [sp]
   12b10:	mov	r3, #4
   12b14:	ldr	r2, [fp, #-16]
   12b18:	ldr	r1, [fp, #-12]
   12b1c:	ldr	r0, [fp, #-8]
   12b20:	bl	176ec <flatcc_builder_create_vector@@Base>
   12b24:	mov	r3, r0
   12b28:	mov	r0, r3
   12b2c:	sub	sp, fp, #4
   12b30:	pop	{fp, pc}
   12b34:	push	{fp, lr}
   12b38:	add	fp, sp, #4
   12b3c:	sub	sp, sp, #8
   12b40:	str	r0, [fp, #-8]
   12b44:	str	r1, [fp, #-12]
   12b48:	mov	r3, #0
   12b4c:	mov	r2, #0
   12b50:	ldr	r1, [fp, #-12]
   12b54:	ldr	r0, [fp, #-8]
   12b58:	bl	15908 <flatcc_builder_start_buffer@@Base>
   12b5c:	mov	r3, r0
   12b60:	mov	r0, r3
   12b64:	sub	sp, fp, #4
   12b68:	pop	{fp, pc}
   12b6c:	push	{fp, lr}
   12b70:	add	fp, sp, #4
   12b74:	sub	sp, sp, #8
   12b78:	str	r0, [fp, #-8]
   12b7c:	str	r1, [fp, #-12]
   12b80:	ldr	r1, [fp, #-12]
   12b84:	ldr	r0, [fp, #-8]
   12b88:	bl	15a60 <flatcc_builder_end_buffer@@Base>
   12b8c:	mov	r3, r0
   12b90:	mov	r0, r3
   12b94:	sub	sp, fp, #4
   12b98:	pop	{fp, pc}
   12b9c:	push	{fp, lr}
   12ba0:	add	fp, sp, #4
   12ba4:	sub	sp, sp, #8
   12ba8:	str	r0, [fp, #-8]
   12bac:	mov	r1, #3
   12bb0:	ldr	r0, [fp, #-8]
   12bb4:	bl	1694c <flatcc_builder_start_table@@Base>
   12bb8:	mov	r3, r0
   12bbc:	mov	r0, r3
   12bc0:	sub	sp, fp, #4
   12bc4:	pop	{fp, pc}
   12bc8:	push	{fp, lr}
   12bcc:	add	fp, sp, #4
   12bd0:	sub	sp, sp, #8
   12bd4:	str	r0, [fp, #-8]
   12bd8:	mov	r2, #0
   12bdc:	ldr	r3, [pc, #80]	; 12c34 <_start@@Base+0xb74>
   12be0:	add	r3, pc, r3
   12be4:	mov	r1, r3
   12be8:	ldr	r0, [fp, #-8]
   12bec:	bl	173c4 <flatcc_builder_check_required@@Base>
   12bf0:	mov	r3, r0
   12bf4:	cmp	r3, #0
   12bf8:	bne	12c1c <_start@@Base+0xb5c>
   12bfc:	ldr	r3, [pc, #52]	; 12c38 <_start@@Base+0xb78>
   12c00:	add	r3, pc, r3
   12c04:	mov	r2, #21
   12c08:	ldr	r1, [pc, #44]	; 12c3c <_start@@Base+0xb7c>
   12c0c:	add	r1, pc, r1
   12c10:	ldr	r0, [pc, #40]	; 12c40 <_start@@Base+0xb80>
   12c14:	add	r0, pc, r0
   12c18:	bl	120b4 <__assert_fail@plt>
   12c1c:	ldr	r0, [fp, #-8]
   12c20:	bl	174b0 <flatcc_builder_end_table@@Base>
   12c24:	mov	r3, r0
   12c28:	mov	r0, r3
   12c2c:	sub	sp, fp, #4
   12c30:	pop	{fp, pc}
   12c34:	muleq	r0, ip, sl
   12c38:	andeq	r7, r0, r4, lsr sp
   12c3c:	andeq	r7, r0, r4, ror sl
   12c40:	andeq	r7, r0, r0, ror #21
   12c44:	push	{fp, lr}
   12c48:	add	fp, sp, #4
   12c4c:	sub	sp, sp, #24
   12c50:	str	r0, [fp, #-16]
   12c54:	strd	r2, [fp, #-28]	; 0xffffffe4
   12c58:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12c5c:	orrs	r3, r2, r3
   12c60:	bne	12c6c <_start@@Base+0xbac>
   12c64:	mov	r3, #0
   12c68:	b	12ca8 <_start@@Base+0xbe8>
   12c6c:	mov	r3, #8
   12c70:	mov	r2, #8
   12c74:	mov	r1, #0
   12c78:	ldr	r0, [fp, #-16]
   12c7c:	bl	18e40 <flatcc_builder_table_add@@Base>
   12c80:	str	r0, [fp, #-8]
   12c84:	ldr	r3, [fp, #-8]
   12c88:	cmp	r3, #0
   12c8c:	bne	12c98 <_start@@Base+0xbd8>
   12c90:	mvn	r3, #0
   12c94:	b	12ca8 <_start@@Base+0xbe8>
   12c98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12c9c:	ldr	r0, [fp, #-8]
   12ca0:	bl	12aac <_start@@Base+0x9ec>
   12ca4:	mov	r3, #0
   12ca8:	mov	r0, r3
   12cac:	sub	sp, fp, #4
   12cb0:	pop	{fp, pc}
   12cb4:	push	{fp, lr}
   12cb8:	add	fp, sp, #4
   12cbc:	sub	sp, sp, #16
   12cc0:	str	r0, [fp, #-16]
   12cc4:	mov	r3, r1
   12cc8:	strb	r3, [fp, #-17]	; 0xffffffef
   12ccc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12cd0:	cmp	r3, #0
   12cd4:	bne	12ce0 <_start@@Base+0xc20>
   12cd8:	mov	r3, #0
   12cdc:	b	12d20 <_start@@Base+0xc60>
   12ce0:	mov	r3, #1
   12ce4:	mov	r2, #1
   12ce8:	mov	r1, #1
   12cec:	ldr	r0, [fp, #-16]
   12cf0:	bl	18e40 <flatcc_builder_table_add@@Base>
   12cf4:	str	r0, [fp, #-8]
   12cf8:	ldr	r3, [fp, #-8]
   12cfc:	cmp	r3, #0
   12d00:	bne	12d0c <_start@@Base+0xc4c>
   12d04:	mvn	r3, #0
   12d08:	b	12d20 <_start@@Base+0xc60>
   12d0c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12d10:	mov	r1, r3
   12d14:	ldr	r0, [fp, #-8]
   12d18:	bl	12a68 <_start@@Base+0x9a8>
   12d1c:	mov	r3, #0
   12d20:	mov	r0, r3
   12d24:	sub	sp, fp, #4
   12d28:	pop	{fp, pc}
   12d2c:	push	{fp, lr}
   12d30:	add	fp, sp, #4
   12d34:	sub	sp, sp, #16
   12d38:	str	r0, [fp, #-16]
   12d3c:	str	r1, [fp, #-20]	; 0xffffffec
   12d40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d44:	cmp	r3, #0
   12d48:	beq	12d7c <_start@@Base+0xcbc>
   12d4c:	mov	r1, #2
   12d50:	ldr	r0, [fp, #-16]
   12d54:	bl	1909c <flatcc_builder_table_add_offset@@Base>
   12d58:	str	r0, [fp, #-8]
   12d5c:	ldr	r3, [fp, #-8]
   12d60:	cmp	r3, #0
   12d64:	beq	12d7c <_start@@Base+0xcbc>
   12d68:	ldr	r3, [fp, #-8]
   12d6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d70:	str	r2, [r3]
   12d74:	mov	r3, #0
   12d78:	b	12d80 <_start@@Base+0xcc0>
   12d7c:	mvn	r3, #0
   12d80:	mov	r0, r3
   12d84:	sub	sp, fp, #4
   12d88:	pop	{fp, pc}
   12d8c:	push	{fp, lr}
   12d90:	add	fp, sp, #4
   12d94:	sub	sp, sp, #16
   12d98:	str	r0, [fp, #-8]
   12d9c:	strd	r2, [fp, #-20]	; 0xffffffec
   12da0:	ldr	r0, [fp, #-8]
   12da4:	bl	12b9c <_start@@Base+0xadc>
   12da8:	mov	r3, r0
   12dac:	cmp	r3, #0
   12db0:	bne	12e00 <_start@@Base+0xd40>
   12db4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12db8:	ldr	r0, [fp, #-8]
   12dbc:	bl	12c44 <_start@@Base+0xb84>
   12dc0:	mov	r3, r0
   12dc4:	cmp	r3, #0
   12dc8:	bne	12e00 <_start@@Base+0xd40>
   12dcc:	ldr	r1, [fp, #8]
   12dd0:	ldr	r0, [fp, #-8]
   12dd4:	bl	12d2c <_start@@Base+0xc6c>
   12dd8:	mov	r3, r0
   12ddc:	cmp	r3, #0
   12de0:	bne	12e00 <_start@@Base+0xd40>
   12de4:	ldrb	r3, [fp, #4]
   12de8:	mov	r1, r3
   12dec:	ldr	r0, [fp, #-8]
   12df0:	bl	12cb4 <_start@@Base+0xbf4>
   12df4:	mov	r3, r0
   12df8:	cmp	r3, #0
   12dfc:	beq	12e08 <_start@@Base+0xd48>
   12e00:	mov	r3, #0
   12e04:	b	12e14 <_start@@Base+0xd54>
   12e08:	ldr	r0, [fp, #-8]
   12e0c:	bl	12bc8 <_start@@Base+0xb08>
   12e10:	mov	r3, r0
   12e14:	mov	r0, r3
   12e18:	sub	sp, fp, #4
   12e1c:	pop	{fp, pc}
   12e20:	push	{fp, lr}
   12e24:	add	fp, sp, #4
   12e28:	sub	sp, sp, #24
   12e2c:	str	r0, [fp, #-8]
   12e30:	strd	r2, [fp, #-20]	; 0xffffffec
   12e34:	mov	r1, #0
   12e38:	ldr	r0, [fp, #-8]
   12e3c:	bl	12b34 <_start@@Base+0xa74>
   12e40:	mov	r3, r0
   12e44:	cmp	r3, #0
   12e48:	beq	12e54 <_start@@Base+0xd94>
   12e4c:	mov	r3, #0
   12e50:	b	12e84 <_start@@Base+0xdc4>
   12e54:	ldr	r3, [fp, #8]
   12e58:	str	r3, [sp, #4]
   12e5c:	ldrb	r3, [fp, #4]
   12e60:	str	r3, [sp]
   12e64:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12e68:	ldr	r0, [fp, #-8]
   12e6c:	bl	12d8c <_start@@Base+0xccc>
   12e70:	mov	r3, r0
   12e74:	mov	r1, r3
   12e78:	ldr	r0, [fp, #-8]
   12e7c:	bl	12b6c <_start@@Base+0xaac>
   12e80:	mov	r3, r0
   12e84:	mov	r0, r3
   12e88:	sub	sp, fp, #4
   12e8c:	pop	{fp, pc}
   12e90:	push	{fp, lr}
   12e94:	add	fp, sp, #4
   12e98:	sub	sp, sp, #48	; 0x30
   12e9c:	str	r0, [fp, #-40]	; 0xffffffd8
   12ea0:	str	r1, [fp, #-44]	; 0xffffffd4
   12ea4:	str	r2, [fp, #-48]	; 0xffffffd0
   12ea8:	str	r3, [fp, #-52]	; 0xffffffcc
   12eac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12eb0:	str	r3, [fp, #-12]
   12eb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12eb8:	cmp	r3, #0
   12ebc:	beq	12ed8 <_start@@Base+0xe18>
   12ec0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12ec4:	ldr	r3, [pc, #440]	; 13084 <_start@@Base+0xfc4>
   12ec8:	add	r3, pc, r3
   12ecc:	mov	r1, r3
   12ed0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ed4:	bl	12060 <fprintf@plt>
   12ed8:	mov	r3, #0
   12edc:	str	r3, [fp, #-8]
   12ee0:	b	13014 <_start@@Base+0xf54>
   12ee4:	ldr	r3, [fp, #-8]
   12ee8:	and	r3, r3, #15
   12eec:	cmp	r3, #0
   12ef0:	bne	12f38 <_start@@Base+0xe78>
   12ef4:	ldr	r3, [fp, #-8]
   12ef8:	cmp	r3, #0
   12efc:	beq	12f1c <_start@@Base+0xe5c>
   12f00:	sub	r3, fp, #32
   12f04:	mov	r2, r3
   12f08:	ldr	r3, [pc, #376]	; 13088 <_start@@Base+0xfc8>
   12f0c:	add	r3, pc, r3
   12f10:	mov	r1, r3
   12f14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f18:	bl	12060 <fprintf@plt>
   12f1c:	ldr	r2, [fp, #-8]
   12f20:	ldr	r3, [pc, #356]	; 1308c <_start@@Base+0xfcc>
   12f24:	add	r3, pc, r3
   12f28:	mov	r1, r3
   12f2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f30:	bl	12060 <fprintf@plt>
   12f34:	b	12f54 <_start@@Base+0xe94>
   12f38:	ldr	r3, [fp, #-8]
   12f3c:	and	r3, r3, #7
   12f40:	cmp	r3, #0
   12f44:	bne	12f54 <_start@@Base+0xe94>
   12f48:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12f4c:	mov	r0, #32
   12f50:	bl	1209c <fputc@plt>
   12f54:	ldr	r2, [fp, #-12]
   12f58:	ldr	r3, [fp, #-8]
   12f5c:	add	r3, r2, r3
   12f60:	ldrb	r3, [r3]
   12f64:	mov	r2, r3
   12f68:	ldr	r3, [pc, #288]	; 13090 <_start@@Base+0xfd0>
   12f6c:	add	r3, pc, r3
   12f70:	mov	r1, r3
   12f74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f78:	bl	12060 <fprintf@plt>
   12f7c:	ldr	r2, [fp, #-12]
   12f80:	ldr	r3, [fp, #-8]
   12f84:	add	r3, r2, r3
   12f88:	ldrb	r3, [r3]
   12f8c:	cmp	r3, #31
   12f90:	bls	12fac <_start@@Base+0xeec>
   12f94:	ldr	r2, [fp, #-12]
   12f98:	ldr	r3, [fp, #-8]
   12f9c:	add	r3, r2, r3
   12fa0:	ldrb	r3, [r3]
   12fa4:	cmp	r3, #126	; 0x7e
   12fa8:	bls	12fc8 <_start@@Base+0xf08>
   12fac:	ldr	r3, [fp, #-8]
   12fb0:	and	r3, r3, #15
   12fb4:	sub	r2, fp, #4
   12fb8:	add	r3, r2, r3
   12fbc:	mov	r2, #46	; 0x2e
   12fc0:	strb	r2, [r3, #-28]	; 0xffffffe4
   12fc4:	b	12fec <_start@@Base+0xf2c>
   12fc8:	ldr	r3, [fp, #-8]
   12fcc:	and	r3, r3, #15
   12fd0:	ldr	r1, [fp, #-12]
   12fd4:	ldr	r2, [fp, #-8]
   12fd8:	add	r2, r1, r2
   12fdc:	ldrb	r2, [r2]
   12fe0:	sub	r1, fp, #4
   12fe4:	add	r3, r1, r3
   12fe8:	strb	r2, [r3, #-28]	; 0xffffffe4
   12fec:	ldr	r3, [fp, #-8]
   12ff0:	and	r3, r3, #15
   12ff4:	add	r3, r3, #1
   12ff8:	sub	r2, fp, #4
   12ffc:	add	r3, r2, r3
   13000:	mov	r2, #0
   13004:	strb	r2, [r3, #-28]	; 0xffffffe4
   13008:	ldr	r3, [fp, #-8]
   1300c:	add	r3, r3, #1
   13010:	str	r3, [fp, #-8]
   13014:	ldr	r2, [fp, #-8]
   13018:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1301c:	cmp	r2, r3
   13020:	bcc	12ee4 <_start@@Base+0xe24>
   13024:	b	1304c <_start@@Base+0xf8c>
   13028:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1302c:	mov	r2, #3
   13030:	mov	r1, #1
   13034:	ldr	r0, [pc, #88]	; 13094 <_start@@Base+0xfd4>
   13038:	add	r0, pc, r0
   1303c:	bl	12018 <fwrite@plt>
   13040:	ldr	r3, [fp, #-8]
   13044:	add	r3, r3, #1
   13048:	str	r3, [fp, #-8]
   1304c:	ldr	r3, [fp, #-8]
   13050:	and	r3, r3, #15
   13054:	cmp	r3, #0
   13058:	bne	13028 <_start@@Base+0xf68>
   1305c:	sub	r3, fp, #32
   13060:	mov	r2, r3
   13064:	ldr	r3, [pc, #44]	; 13098 <_start@@Base+0xfd8>
   13068:	add	r3, pc, r3
   1306c:	mov	r1, r3
   13070:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13074:	bl	12060 <fprintf@plt>
   13078:	nop			; (mov r0, r0)
   1307c:	sub	sp, fp, #4
   13080:	pop	{fp, pc}
   13084:	muleq	r0, r8, r8
   13088:	andeq	r7, r0, ip, asr r8
   1308c:	andeq	r7, r0, ip, asr #16
   13090:	andeq	r7, r0, ip, lsl #16
   13094:	andeq	r7, r0, r8, asr #14
   13098:	andeq	r7, r0, r0, lsl #14

0001309c <dbg_emitter@@Base>:
   1309c:	push	{r4, fp, lr}
   130a0:	add	fp, sp, #8
   130a4:	sub	sp, sp, #28
   130a8:	str	r0, [fp, #-24]	; 0xffffffe8
   130ac:	str	r1, [fp, #-28]	; 0xffffffe4
   130b0:	str	r2, [fp, #-32]	; 0xffffffe0
   130b4:	str	r3, [fp, #-36]	; 0xffffffdc
   130b8:	ldr	r4, [pc, #268]	; 131cc <dbg_emitter@@Base+0x130>
   130bc:	add	r4, pc, r4
   130c0:	ldr	r3, [fp, #4]
   130c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   130c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   130cc:	ldr	r0, [pc, #252]	; 131d0 <dbg_emitter@@Base+0x134>
   130d0:	add	r0, pc, r0
   130d4:	bl	11fdc <printf@plt>
   130d8:	mov	r3, #0
   130dc:	str	r3, [fp, #-16]
   130e0:	b	131ac <dbg_emitter@@Base+0x110>
   130e4:	ldr	r3, [fp, #-16]
   130e8:	lsl	r3, r3, #3
   130ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130f0:	add	r3, r2, r3
   130f4:	ldr	r3, [r3]
   130f8:	ldr	r2, [pc, #212]	; 131d4 <dbg_emitter@@Base+0x138>
   130fc:	ldr	r2, [r4, r2]
   13100:	cmp	r3, r2
   13104:	bne	13134 <dbg_emitter@@Base+0x98>
   13108:	ldr	r3, [fp, #-16]
   1310c:	lsl	r3, r3, #3
   13110:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13114:	add	r3, r2, r3
   13118:	ldr	r3, [r3, #4]
   1311c:	mov	r2, r3
   13120:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13124:	ldr	r3, [pc, #172]	; 131d8 <dbg_emitter@@Base+0x13c>
   13128:	add	r3, pc, r3
   1312c:	mov	r0, r3
   13130:	bl	11fdc <printf@plt>
   13134:	ldr	r3, [fp, #-16]
   13138:	lsl	r3, r3, #3
   1313c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13140:	add	r3, r2, r3
   13144:	ldr	r3, [r3]
   13148:	cmp	r3, #0
   1314c:	bne	1317c <dbg_emitter@@Base+0xe0>
   13150:	ldr	r3, [fp, #-16]
   13154:	lsl	r3, r3, #3
   13158:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1315c:	add	r3, r2, r3
   13160:	ldr	r3, [r3, #4]
   13164:	mov	r2, r3
   13168:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1316c:	ldr	r3, [pc, #104]	; 131dc <dbg_emitter@@Base+0x140>
   13170:	add	r3, pc, r3
   13174:	mov	r0, r3
   13178:	bl	11fdc <printf@plt>
   1317c:	ldr	r3, [fp, #-16]
   13180:	lsl	r3, r3, #3
   13184:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13188:	add	r3, r2, r3
   1318c:	ldr	r3, [r3, #4]
   13190:	mov	r2, r3
   13194:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13198:	add	r3, r3, r2
   1319c:	str	r3, [fp, #-36]	; 0xffffffdc
   131a0:	ldr	r3, [fp, #-16]
   131a4:	add	r3, r3, #1
   131a8:	str	r3, [fp, #-16]
   131ac:	ldr	r2, [fp, #-16]
   131b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131b4:	cmp	r2, r3
   131b8:	blt	130e4 <dbg_emitter@@Base+0x48>
   131bc:	mov	r3, #0
   131c0:	mov	r0, r3
   131c4:	sub	sp, fp, #8
   131c8:	pop	{r4, fp, pc}
   131cc:	andeq	r8, r1, ip, lsr pc
   131d0:			; <UNDEFINED> instruction: 0x000076b4
   131d4:	andeq	r0, r0, r8, asr r0
   131d8:	muleq	r0, r0, r6
   131dc:	andeq	r7, r0, ip, ror #12

000131e0 <debug_test@@Base>:
   131e0:	push	{r4, fp, lr}
   131e4:	add	fp, sp, #8
   131e8:	sub	sp, sp, #292	; 0x124
   131ec:	ldr	r4, [pc, #152]	; 1328c <debug_test@@Base+0xac>
   131f0:	add	r4, pc, r4
   131f4:	sub	r3, fp, #288	; 0x120
   131f8:	mov	r2, #40	; 0x28
   131fc:	mov	r1, #0
   13200:	mov	r0, r3
   13204:	bl	12078 <memset@plt>
   13208:	sub	r3, fp, #248	; 0xf8
   1320c:	str	r3, [fp, #-16]
   13210:	ldr	r3, [pc, #120]	; 13290 <debug_test@@Base+0xb0>
   13214:	add	r3, pc, r3
   13218:	mov	r0, r3
   1321c:	bl	12024 <puts@plt>
   13220:	mov	r3, #0
   13224:	str	r3, [sp]
   13228:	mov	r3, #0
   1322c:	mov	r2, #0
   13230:	ldr	r1, [pc, #92]	; 13294 <debug_test@@Base+0xb4>
   13234:	ldr	r1, [r4, r1]
   13238:	ldr	r0, [fp, #-16]
   1323c:	bl	14320 <flatcc_builder_custom_init@@Base>
   13240:	sub	r3, fp, #288	; 0x120
   13244:	mov	r2, #10
   13248:	mov	r1, r3
   1324c:	ldr	r0, [fp, #-16]
   13250:	bl	12ae8 <_start@@Base+0xa28>
   13254:	mov	r3, r0
   13258:	str	r3, [sp, #4]
   1325c:	mov	r3, #1
   13260:	str	r3, [sp]
   13264:	mov	r2, #42	; 0x2a
   13268:	mov	r3, #0
   1326c:	ldr	r0, [fp, #-16]
   13270:	bl	12e20 <_start@@Base+0xd60>
   13274:	ldr	r0, [fp, #-16]
   13278:	bl	1469c <flatcc_builder_clear@@Base>
   1327c:	mov	r3, #0
   13280:	mov	r0, r3
   13284:	sub	sp, fp, #8
   13288:	pop	{r4, fp, pc}
   1328c:	andeq	r8, r1, r8, lsl #28
   13290:	strdeq	r7, [r0], -r8
   13294:	andeq	r0, r0, ip, asr r0

00013298 <emit_test@@Base>:
   13298:	push	{r4, fp, lr}
   1329c:	add	fp, sp, #8
   132a0:	sub	sp, sp, #356	; 0x164
   132a4:	ldr	r4, [pc, #836]	; 135f0 <emit_test@@Base+0x358>
   132a8:	add	r4, pc, r4
   132ac:	ldr	r3, [pc, #832]	; 135f4 <emit_test@@Base+0x35c>
   132b0:	add	r3, pc, r3
   132b4:	sub	ip, fp, #104	; 0x68
   132b8:	mov	lr, r3
   132bc:	ldm	lr!, {r0, r1, r2, r3}
   132c0:	stmia	ip!, {r0, r1, r2, r3}
   132c4:	ldm	lr!, {r0, r1, r2, r3}
   132c8:	stmia	ip!, {r0, r1, r2, r3}
   132cc:	ldm	lr!, {r0, r1, r2, r3}
   132d0:	stmia	ip!, {r0, r1, r2, r3}
   132d4:	ldm	lr, {r0, r1, r2}
   132d8:	stmia	ip!, {r0, r1}
   132dc:	strh	r2, [ip]
   132e0:	add	ip, ip, #2
   132e4:	lsr	r3, r2, #16
   132e8:	strb	r3, [ip]
   132ec:	ldr	r3, [pc, #772]	; 135f8 <emit_test@@Base+0x360>
   132f0:	add	r3, pc, r3
   132f4:	sub	ip, fp, #356	; 0x164
   132f8:	ldm	r3, {r0, r1, r2, r3}
   132fc:	stm	ip, {r0, r1, r2, r3}
   13300:	sub	r3, fp, #340	; 0x154
   13304:	str	r3, [fp, #-16]
   13308:	ldr	r0, [fp, #-16]
   1330c:	bl	143e8 <flatcc_builder_init@@Base>
   13310:	ldr	r0, [fp, #-16]
   13314:	bl	19894 <flatcc_builder_get_emit_context@@Base>
   13318:	str	r0, [fp, #-20]	; 0xffffffec
   1331c:	sub	r3, fp, #356	; 0x164
   13320:	mov	r2, #4
   13324:	mov	r1, r3
   13328:	ldr	r0, [fp, #-16]
   1332c:	bl	12ae8 <_start@@Base+0xa28>
   13330:	str	r0, [fp, #-24]	; 0xffffffe8
   13334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13338:	str	r3, [sp, #4]
   1333c:	mov	r3, #1
   13340:	str	r3, [sp]
   13344:	mov	r2, #42	; 0x2a
   13348:	mov	r3, #0
   1334c:	ldr	r0, [fp, #-16]
   13350:	bl	12e20 <_start@@Base+0xd60>
   13354:	sub	r3, fp, #108	; 0x6c
   13358:	mov	r1, r3
   1335c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13360:	bl	129e8 <_start@@Base+0x928>
   13364:	str	r0, [fp, #-28]	; 0xffffffe4
   13368:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1336c:	cmp	r3, #0
   13370:	bne	1337c <emit_test@@Base+0xe4>
   13374:	mvn	r3, #0
   13378:	b	135e0 <emit_test@@Base+0x348>
   1337c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13380:	bl	129c0 <_start@@Base+0x900>
   13384:	mov	r2, r0
   13388:	ldr	r3, [fp, #-108]	; 0xffffff94
   1338c:	cmp	r2, r3
   13390:	beq	133b4 <emit_test@@Base+0x11c>
   13394:	ldr	r3, [pc, #608]	; 135fc <emit_test@@Base+0x364>
   13398:	add	r3, pc, r3
   1339c:	mov	r2, #100	; 0x64
   133a0:	ldr	r1, [pc, #600]	; 13600 <emit_test@@Base+0x368>
   133a4:	add	r1, pc, r1
   133a8:	ldr	r0, [pc, #596]	; 13604 <emit_test@@Base+0x36c>
   133ac:	add	r0, pc, r0
   133b0:	bl	120b4 <__assert_fail@plt>
   133b4:	ldr	r0, [fp, #-16]
   133b8:	bl	19378 <flatcc_builder_get_buffer_size@@Base>
   133bc:	mov	r2, r0
   133c0:	ldr	r3, [fp, #-108]	; 0xffffff94
   133c4:	cmp	r2, r3
   133c8:	beq	133ec <emit_test@@Base+0x154>
   133cc:	ldr	r3, [pc, #564]	; 13608 <emit_test@@Base+0x370>
   133d0:	add	r3, pc, r3
   133d4:	mov	r2, #101	; 0x65
   133d8:	ldr	r1, [pc, #556]	; 1360c <emit_test@@Base+0x374>
   133dc:	add	r1, pc, r1
   133e0:	ldr	r0, [pc, #552]	; 13610 <emit_test@@Base+0x378>
   133e4:	add	r0, pc, r0
   133e8:	bl	120b4 <__assert_fail@plt>
   133ec:	ldr	r3, [pc, #544]	; 13614 <emit_test@@Base+0x37c>
   133f0:	ldr	r3, [r4, r3]
   133f4:	ldr	r3, [r3]
   133f8:	ldr	r2, [fp, #-108]	; 0xffffff94
   133fc:	ldr	r1, [pc, #532]	; 13618 <emit_test@@Base+0x380>
   13400:	add	r1, pc, r1
   13404:	mov	r0, r3
   13408:	bl	12060 <fprintf@plt>
   1340c:	ldr	r2, [fp, #-108]	; 0xffffff94
   13410:	ldr	r3, [pc, #508]	; 13614 <emit_test@@Base+0x37c>
   13414:	ldr	r3, [r4, r3]
   13418:	ldr	r3, [r3]
   1341c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13420:	ldr	r0, [pc, #500]	; 1361c <emit_test@@Base+0x384>
   13424:	add	r0, pc, r0
   13428:	bl	12e90 <_start@@Base+0xdd0>
   1342c:	ldr	r3, [fp, #-108]	; 0xffffff94
   13430:	cmp	r3, #58	; 0x3a
   13434:	beq	13458 <emit_test@@Base+0x1c0>
   13438:	ldr	r3, [pc, #480]	; 13620 <emit_test@@Base+0x388>
   1343c:	add	r3, pc, r3
   13440:	mov	r2, #106	; 0x6a
   13444:	ldr	r1, [pc, #472]	; 13624 <emit_test@@Base+0x38c>
   13448:	add	r1, pc, r1
   1344c:	ldr	r0, [pc, #468]	; 13628 <emit_test@@Base+0x390>
   13450:	add	r0, pc, r0
   13454:	bl	120b4 <__assert_fail@plt>
   13458:	ldr	r3, [fp, #-108]	; 0xffffff94
   1345c:	cmp	r3, #58	; 0x3a
   13460:	beq	13484 <emit_test@@Base+0x1ec>
   13464:	ldr	r3, [pc, #448]	; 1362c <emit_test@@Base+0x394>
   13468:	add	r3, pc, r3
   1346c:	mov	r2, #107	; 0x6b
   13470:	ldr	r1, [pc, #440]	; 13630 <emit_test@@Base+0x398>
   13474:	add	r1, pc, r1
   13478:	ldr	r0, [pc, #436]	; 13634 <emit_test@@Base+0x39c>
   1347c:	add	r0, pc, r0
   13480:	bl	120b4 <__assert_fail@plt>
   13484:	ldr	r2, [fp, #-108]	; 0xffffff94
   13488:	sub	r3, fp, #104	; 0x68
   1348c:	mov	r1, r3
   13490:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13494:	bl	12000 <memcmp@plt>
   13498:	mov	r3, r0
   1349c:	cmp	r3, #0
   134a0:	beq	134c4 <emit_test@@Base+0x22c>
   134a4:	ldr	r3, [pc, #396]	; 13638 <emit_test@@Base+0x3a0>
   134a8:	add	r3, pc, r3
   134ac:	mov	r2, #108	; 0x6c
   134b0:	ldr	r1, [pc, #388]	; 1363c <emit_test@@Base+0x3a4>
   134b4:	add	r1, pc, r1
   134b8:	ldr	r0, [pc, #384]	; 13640 <emit_test@@Base+0x3a8>
   134bc:	add	r0, pc, r0
   134c0:	bl	120b4 <__assert_fail@plt>
   134c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   134c8:	bl	12664 <_start@@Base+0x5a4>
   134cc:	str	r0, [fp, #-32]	; 0xffffffe0
   134d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   134d4:	bl	126c8 <_start@@Base+0x608>
   134d8:	mov	r2, r0
   134dc:	mov	r3, r1
   134e0:	strd	r2, [fp, #-44]	; 0xffffffd4
   134e4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   134e8:	cmp	r3, #0
   134ec:	cmpeq	r2, #42	; 0x2a
   134f0:	beq	13514 <emit_test@@Base+0x27c>
   134f4:	ldr	r3, [pc, #328]	; 13644 <emit_test@@Base+0x3ac>
   134f8:	add	r3, pc, r3
   134fc:	mov	r2, #112	; 0x70
   13500:	ldr	r1, [pc, #320]	; 13648 <emit_test@@Base+0x3b0>
   13504:	add	r1, pc, r1
   13508:	ldr	r0, [pc, #316]	; 1364c <emit_test@@Base+0x3b4>
   1350c:	add	r0, pc, r0
   13510:	bl	120b4 <__assert_fail@plt>
   13514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13518:	bl	127c8 <_start@@Base+0x708>
   1351c:	mov	r3, r0
   13520:	cmp	r3, #1
   13524:	beq	13548 <emit_test@@Base+0x2b0>
   13528:	ldr	r3, [pc, #288]	; 13650 <emit_test@@Base+0x3b8>
   1352c:	add	r3, pc, r3
   13530:	mov	r2, #113	; 0x71
   13534:	ldr	r1, [pc, #280]	; 13654 <emit_test@@Base+0x3bc>
   13538:	add	r1, pc, r1
   1353c:	ldr	r0, [pc, #276]	; 13658 <emit_test@@Base+0x3c0>
   13540:	add	r0, pc, r0
   13544:	bl	120b4 <__assert_fail@plt>
   13548:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1354c:	bl	128bc <_start@@Base+0x7fc>
   13550:	mov	r3, r0
   13554:	mov	r0, r3
   13558:	bl	12518 <_start@@Base+0x458>
   1355c:	mov	r3, r0
   13560:	cmp	r3, #4
   13564:	beq	13588 <emit_test@@Base+0x2f0>
   13568:	ldr	r3, [pc, #236]	; 1365c <emit_test@@Base+0x3c4>
   1356c:	add	r3, pc, r3
   13570:	mov	r2, #114	; 0x72
   13574:	ldr	r1, [pc, #228]	; 13660 <emit_test@@Base+0x3c8>
   13578:	add	r1, pc, r1
   1357c:	ldr	r0, [pc, #224]	; 13664 <emit_test@@Base+0x3cc>
   13580:	add	r0, pc, r0
   13584:	bl	120b4 <__assert_fail@plt>
   13588:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1358c:	bl	128bc <_start@@Base+0x7fc>
   13590:	mov	r3, r0
   13594:	mov	r1, #2
   13598:	mov	r0, r3
   1359c:	bl	12540 <_start@@Base+0x480>
   135a0:	vmov.f32	s14, s0
   135a4:	vldr	s15, [pc, #64]	; 135ec <emit_test@@Base+0x354>
   135a8:	vcmp.f32	s14, s15
   135ac:	vmrs	APSR_nzcv, fpscr
   135b0:	beq	135d4 <emit_test@@Base+0x33c>
   135b4:	ldr	r3, [pc, #172]	; 13668 <emit_test@@Base+0x3d0>
   135b8:	add	r3, pc, r3
   135bc:	mov	r2, #115	; 0x73
   135c0:	ldr	r1, [pc, #164]	; 1366c <emit_test@@Base+0x3d4>
   135c4:	add	r1, pc, r1
   135c8:	ldr	r0, [pc, #160]	; 13670 <emit_test@@Base+0x3d8>
   135cc:	add	r0, pc, r0
   135d0:	bl	120b4 <__assert_fail@plt>
   135d4:	ldr	r0, [fp, #-16]
   135d8:	bl	1469c <flatcc_builder_clear@@Base>
   135dc:	mov	r3, #0
   135e0:	mov	r0, r3
   135e4:	sub	sp, fp, #8
   135e8:	pop	{r4, fp, pc}
   135ec:	svccc	0x0099999a
   135f0:	andeq	r8, r1, r0, asr sp
   135f4:	andeq	r7, r0, r8, lsr r6
   135f8:	andeq	r7, r0, r4, lsr r6
   135fc:	andeq	r7, r0, r8, lsr #11
   13600:			; <UNDEFINED> instruction: 0x000074bc
   13604:	andeq	r7, r0, r8, lsl r5
   13608:	andeq	r7, r0, r0, ror r5
   1360c:	andeq	r7, r0, r4, lsl #9
   13610:	andeq	r7, r0, r0, ror #9
   13614:	andeq	r0, r0, r0, rrx
   13618:	andeq	r7, r0, r8, asr #9
   1361c:			; <UNDEFINED> instruction: 0x000074b8
   13620:	andeq	r7, r0, r4, lsl #10
   13624:	andeq	r7, r0, r8, lsl r4
   13628:	andeq	r7, r0, r4, ror r4
   1362c:	ldrdeq	r7, [r0], -r8
   13630:	andeq	r7, r0, ip, ror #7
   13634:	andeq	r7, r0, r8, asr #8
   13638:	muleq	r0, r8, r4
   1363c:	andeq	r7, r0, ip, lsr #7
   13640:	andeq	r7, r0, r8, lsl #8
   13644:	andeq	r7, r0, r8, asr #8
   13648:	andeq	r7, r0, ip, asr r3
   1364c:			; <UNDEFINED> instruction: 0x000073b8
   13650:	andeq	r7, r0, r4, lsl r4
   13654:	andeq	r7, r0, r8, lsr #6
   13658:	andeq	r7, r0, r4, lsl #7
   1365c:	ldrdeq	r7, [r0], -r4
   13660:	andeq	r7, r0, r8, ror #5
   13664:	andeq	r7, r0, r4, asr #6
   13668:	andeq	r7, r0, r8, lsl #7
   1366c:	muleq	r0, ip, r2
   13670:	strdeq	r7, [r0], -r8

00013674 <main@@Base>:
   13674:	push	{fp, lr}
   13678:	add	fp, sp, #4
   1367c:	sub	sp, sp, #16
   13680:	str	r0, [fp, #-16]
   13684:	str	r1, [fp, #-20]	; 0xffffffec
   13688:	mov	r3, #0
   1368c:	str	r3, [fp, #-8]
   13690:	bl	131e0 <debug_test@@Base>
   13694:	mov	r2, r0
   13698:	ldr	r3, [fp, #-8]
   1369c:	orr	r3, r3, r2
   136a0:	str	r3, [fp, #-8]
   136a4:	bl	13298 <emit_test@@Base>
   136a8:	mov	r2, r0
   136ac:	ldr	r3, [fp, #-8]
   136b0:	orr	r3, r3, r2
   136b4:	str	r3, [fp, #-8]
   136b8:	ldr	r3, [fp, #-8]
   136bc:	mov	r0, r3
   136c0:	sub	sp, fp, #4
   136c4:	pop	{fp, pc}
   136c8:	push	{fp, lr}
   136cc:	add	fp, sp, #4
   136d0:	sub	sp, sp, #16
   136d4:	str	r0, [fp, #-16]
   136d8:	str	r1, [fp, #-20]	; 0xffffffec
   136dc:	mov	r3, #0
   136e0:	str	r3, [fp, #-12]
   136e4:	ldr	r3, [fp, #-16]
   136e8:	cmp	r3, #3
   136ec:	bhi	136f8 <main@@Base+0x84>
   136f0:	mov	r3, #4
   136f4:	str	r3, [fp, #-16]
   136f8:	sub	r3, fp, #12
   136fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13700:	ldr	r1, [fp, #-16]
   13704:	mov	r0, r3
   13708:	bl	1206c <posix_memalign@plt>
   1370c:	str	r0, [fp, #-8]
   13710:	ldr	r3, [fp, #-8]
   13714:	cmp	r3, #0
   13718:	beq	1373c <main@@Base+0xc8>
   1371c:	ldr	r3, [fp, #-12]
   13720:	cmp	r3, #0
   13724:	beq	1373c <main@@Base+0xc8>
   13728:	ldr	r3, [fp, #-12]
   1372c:	mov	r0, r3
   13730:	bl	11fe8 <free@plt>
   13734:	mov	r3, #0
   13738:	str	r3, [fp, #-12]
   1373c:	ldr	r3, [fp, #-12]
   13740:	mov	r0, r3
   13744:	sub	sp, fp, #4
   13748:	pop	{fp, pc}
   1374c:	push	{fp}		; (str fp, [sp, #-4]!)
   13750:	add	fp, sp, #0
   13754:	sub	sp, sp, #12
   13758:	str	r0, [fp, #-8]
   1375c:	ldr	r3, [fp, #-8]
   13760:	mov	r0, r3
   13764:	add	sp, fp, #0
   13768:	pop	{fp}		; (ldr fp, [sp], #4)
   1376c:	bx	lr
   13770:	push	{fp}		; (str fp, [sp, #-4]!)
   13774:	add	fp, sp, #0
   13778:	sub	sp, sp, #12
   1377c:	mov	r3, r0
   13780:	strb	r3, [fp, #-5]
   13784:	ldrb	r3, [fp, #-5]
   13788:	mov	r0, r3
   1378c:	add	sp, fp, #0
   13790:	pop	{fp}		; (ldr fp, [sp], #4)
   13794:	bx	lr
   13798:	push	{fp}		; (str fp, [sp, #-4]!)
   1379c:	add	fp, sp, #0
   137a0:	sub	sp, sp, #12
   137a4:	str	r0, [fp, #-8]
   137a8:	ldr	r3, [fp, #-8]
   137ac:	mov	r0, r3
   137b0:	add	sp, fp, #0
   137b4:	pop	{fp}		; (ldr fp, [sp], #4)
   137b8:	bx	lr
   137bc:	push	{fp}		; (str fp, [sp, #-4]!)
   137c0:	add	fp, sp, #0
   137c4:	sub	sp, sp, #12
   137c8:	str	r0, [fp, #-8]
   137cc:	str	r1, [fp, #-12]
   137d0:	ldr	r3, [fp, #-8]
   137d4:	ldr	r2, [r3]
   137d8:	ldr	r3, [fp, #-8]
   137dc:	ldr	r3, [r3, #4]
   137e0:	cmp	r2, r3
   137e4:	bne	13810 <main@@Base+0x19c>
   137e8:	ldr	r3, [fp, #-12]
   137ec:	cmp	r3, #0
   137f0:	beq	13804 <main@@Base+0x190>
   137f4:	ldr	r3, [fp, #-8]
   137f8:	ldr	r2, [r3, #24]
   137fc:	ldr	r3, [fp, #-12]
   13800:	str	r2, [r3]
   13804:	ldr	r3, [fp, #-8]
   13808:	ldr	r3, [r3, #8]
   1380c:	b	1382c <main@@Base+0x1b8>
   13810:	ldr	r3, [fp, #-12]
   13814:	cmp	r3, #0
   13818:	beq	13828 <main@@Base+0x1b4>
   1381c:	ldr	r3, [fp, #-12]
   13820:	mov	r2, #0
   13824:	str	r2, [r3]
   13828:	mov	r3, #0
   1382c:	mov	r0, r3
   13830:	add	sp, fp, #0
   13834:	pop	{fp}		; (ldr fp, [sp], #4)
   13838:	bx	lr
   1383c:	push	{fp, lr}
   13840:	add	fp, sp, #4
   13844:	sub	sp, sp, #16
   13848:	str	r0, [fp, #-16]
   1384c:	str	r1, [fp, #-20]	; 0xffffffec
   13850:	ldr	r2, [fp, #-20]	; 0xffffffec
   13854:	mov	r1, #0
   13858:	ldr	r0, [fp, #-16]
   1385c:	bl	12090 <memchr@plt>
   13860:	str	r0, [fp, #-8]
   13864:	ldr	r3, [fp, #-8]
   13868:	cmp	r3, #0
   1386c:	beq	13880 <main@@Base+0x20c>
   13870:	ldr	r2, [fp, #-8]
   13874:	ldr	r3, [fp, #-16]
   13878:	sub	r3, r2, r3
   1387c:	b	13884 <main@@Base+0x210>
   13880:	ldr	r3, [fp, #-20]	; 0xffffffec
   13884:	mov	r0, r3
   13888:	sub	sp, fp, #4
   1388c:	pop	{fp, pc}

00013890 <flatcc_builder_default_alloc@@Base>:
   13890:	push	{fp, lr}
   13894:	add	fp, sp, #4
   13898:	sub	sp, sp, #24
   1389c:	str	r0, [fp, #-16]
   138a0:	str	r1, [fp, #-20]	; 0xffffffec
   138a4:	str	r2, [fp, #-24]	; 0xffffffe8
   138a8:	str	r3, [fp, #-28]	; 0xffffffe4
   138ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   138b0:	cmp	r3, #0
   138b4:	bne	138f8 <flatcc_builder_default_alloc@@Base+0x68>
   138b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138bc:	ldr	r3, [r3]
   138c0:	cmp	r3, #0
   138c4:	beq	138f0 <flatcc_builder_default_alloc@@Base+0x60>
   138c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138cc:	ldr	r3, [r3]
   138d0:	mov	r0, r3
   138d4:	bl	11fe8 <free@plt>
   138d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138dc:	mov	r2, #0
   138e0:	str	r2, [r3]
   138e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   138e8:	mov	r2, #0
   138ec:	str	r2, [r3, #4]
   138f0:	mov	r3, #0
   138f4:	b	13a4c <flatcc_builder_default_alloc@@Base+0x1bc>
   138f8:	ldr	r3, [fp, #4]
   138fc:	sub	r3, r3, #1
   13900:	cmp	r3, #6
   13904:	addls	pc, pc, r3, lsl #2
   13908:	b	13958 <flatcc_builder_default_alloc@@Base+0xc8>
   1390c:	b	13928 <flatcc_builder_default_alloc@@Base+0x98>
   13910:	b	13958 <flatcc_builder_default_alloc@@Base+0xc8>
   13914:	b	13958 <flatcc_builder_default_alloc@@Base+0xc8>
   13918:	b	13940 <flatcc_builder_default_alloc@@Base+0xb0>
   1391c:	b	13934 <flatcc_builder_default_alloc@@Base+0xa4>
   13920:	b	13958 <flatcc_builder_default_alloc@@Base+0xc8>
   13924:	b	1394c <flatcc_builder_default_alloc@@Base+0xbc>
   13928:	mov	r3, #256	; 0x100
   1392c:	str	r3, [fp, #-8]
   13930:	b	13964 <flatcc_builder_default_alloc@@Base+0xd4>
   13934:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13938:	str	r3, [fp, #-8]
   1393c:	b	13964 <flatcc_builder_default_alloc@@Base+0xd4>
   13940:	mov	r3, #288	; 0x120
   13944:	str	r3, [fp, #-8]
   13948:	b	13964 <flatcc_builder_default_alloc@@Base+0xd4>
   1394c:	mov	r3, #64	; 0x40
   13950:	str	r3, [fp, #-8]
   13954:	b	13964 <flatcc_builder_default_alloc@@Base+0xd4>
   13958:	mov	r3, #32
   1395c:	str	r3, [fp, #-8]
   13960:	nop			; (mov r0, r0)
   13964:	b	13974 <flatcc_builder_default_alloc@@Base+0xe4>
   13968:	ldr	r3, [fp, #-8]
   1396c:	lsl	r3, r3, #1
   13970:	str	r3, [fp, #-8]
   13974:	ldr	r2, [fp, #-8]
   13978:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1397c:	cmp	r2, r3
   13980:	bcc	13968 <flatcc_builder_default_alloc@@Base+0xd8>
   13984:	ldr	r3, [fp, #-20]	; 0xffffffec
   13988:	ldr	r2, [r3, #4]
   1398c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13990:	cmp	r2, r3
   13994:	bcc	139b8 <flatcc_builder_default_alloc@@Base+0x128>
   13998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1399c:	ldr	r3, [r3, #4]
   139a0:	lsr	r2, r3, #1
   139a4:	ldr	r3, [fp, #-8]
   139a8:	cmp	r2, r3
   139ac:	bcc	139b8 <flatcc_builder_default_alloc@@Base+0x128>
   139b0:	mov	r3, #0
   139b4:	b	13a4c <flatcc_builder_default_alloc@@Base+0x1bc>
   139b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139bc:	ldr	r3, [r3]
   139c0:	ldr	r1, [fp, #-8]
   139c4:	mov	r0, r3
   139c8:	bl	1200c <realloc@plt>
   139cc:	str	r0, [fp, #-12]
   139d0:	ldr	r3, [fp, #-12]
   139d4:	cmp	r3, #0
   139d8:	bne	139e4 <flatcc_builder_default_alloc@@Base+0x154>
   139dc:	mvn	r3, #0
   139e0:	b	13a4c <flatcc_builder_default_alloc@@Base+0x1bc>
   139e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   139e8:	cmp	r3, #0
   139ec:	beq	13a30 <flatcc_builder_default_alloc@@Base+0x1a0>
   139f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f4:	ldr	r2, [r3, #4]
   139f8:	ldr	r3, [fp, #-8]
   139fc:	cmp	r2, r3
   13a00:	bcs	13a30 <flatcc_builder_default_alloc@@Base+0x1a0>
   13a04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a08:	ldr	r3, [r3, #4]
   13a0c:	ldr	r2, [fp, #-12]
   13a10:	add	r0, r2, r3
   13a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a18:	ldr	r3, [r3, #4]
   13a1c:	ldr	r2, [fp, #-8]
   13a20:	sub	r3, r2, r3
   13a24:	mov	r2, r3
   13a28:	mov	r1, #0
   13a2c:	bl	12078 <memset@plt>
   13a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a34:	ldr	r2, [fp, #-12]
   13a38:	str	r2, [r3]
   13a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a40:	ldr	r2, [fp, #-8]
   13a44:	str	r2, [r3, #4]
   13a48:	mov	r3, #0
   13a4c:	mov	r0, r3
   13a50:	sub	sp, fp, #4
   13a54:	pop	{fp, pc}
   13a58:	push	{fp}		; (str fp, [sp, #-4]!)
   13a5c:	add	fp, sp, #0
   13a60:	sub	sp, sp, #20
   13a64:	str	r0, [fp, #-16]
   13a68:	str	r1, [fp, #-20]	; 0xffffffec
   13a6c:	ldr	r3, [fp, #-16]
   13a70:	add	r3, r3, #52	; 0x34
   13a74:	add	r3, r3, #8
   13a78:	str	r3, [fp, #-8]
   13a7c:	ldr	r3, [fp, #-16]
   13a80:	ldr	r2, [r3, #60]	; 0x3c
   13a84:	ldr	r3, [fp, #-16]
   13a88:	ldr	r3, [r3, #28]
   13a8c:	add	r2, r2, r3
   13a90:	ldr	r3, [fp, #-16]
   13a94:	str	r2, [r3, #16]
   13a98:	ldr	r3, [fp, #-8]
   13a9c:	ldr	r2, [r3, #4]
   13aa0:	ldr	r3, [fp, #-16]
   13aa4:	ldr	r3, [r3, #28]
   13aa8:	sub	r2, r2, r3
   13aac:	ldr	r3, [fp, #-16]
   13ab0:	str	r2, [r3, #24]
   13ab4:	ldr	r3, [fp, #-16]
   13ab8:	ldr	r2, [r3, #24]
   13abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac0:	cmp	r2, r3
   13ac4:	bls	13ad4 <flatcc_builder_default_alloc@@Base+0x244>
   13ac8:	ldr	r3, [fp, #-16]
   13acc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ad0:	str	r2, [r3, #24]
   13ad4:	ldr	r3, [fp, #-16]
   13ad8:	ldr	r3, [r3, #32]
   13adc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ae0:	str	r2, [r3, #4]
   13ae4:	nop			; (mov r0, r0)
   13ae8:	add	sp, fp, #0
   13aec:	pop	{fp}		; (ldr fp, [sp], #4)
   13af0:	bx	lr
   13af4:	push	{r4, fp, lr}
   13af8:	add	fp, sp, #8
   13afc:	sub	sp, sp, #36	; 0x24
   13b00:	str	r0, [fp, #-24]	; 0xffffffe8
   13b04:	str	r1, [fp, #-28]	; 0xffffffe4
   13b08:	str	r2, [fp, #-32]	; 0xffffffe0
   13b0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b10:	add	r3, r3, #52	; 0x34
   13b14:	add	r3, r3, #8
   13b18:	str	r3, [fp, #-16]
   13b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b20:	ldr	r4, [r3, #48]	; 0x30
   13b24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b28:	ldr	r0, [r3, #40]	; 0x28
   13b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b30:	ldr	r2, [r3, #28]
   13b34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b38:	add	r2, r2, r3
   13b3c:	mov	r3, #1
   13b40:	str	r3, [sp]
   13b44:	mov	r3, #1
   13b48:	ldr	r1, [fp, #-16]
   13b4c:	blx	r4
   13b50:	mov	r3, r0
   13b54:	cmp	r3, #0
   13b58:	beq	13b64 <flatcc_builder_default_alloc@@Base+0x2d4>
   13b5c:	mvn	r3, #0
   13b60:	b	13b74 <flatcc_builder_default_alloc@@Base+0x2e4>
   13b64:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13b68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13b6c:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   13b70:	mov	r3, #0
   13b74:	mov	r0, r3
   13b78:	sub	sp, fp, #8
   13b7c:	pop	{r4, fp, pc}
   13b80:	push	{fp, lr}
   13b84:	add	fp, sp, #4
   13b88:	sub	sp, sp, #16
   13b8c:	str	r0, [fp, #-16]
   13b90:	str	r1, [fp, #-20]	; 0xffffffec
   13b94:	ldr	r3, [fp, #-16]
   13b98:	ldr	r3, [r3, #20]
   13b9c:	str	r3, [fp, #-8]
   13ba0:	ldr	r3, [fp, #-16]
   13ba4:	ldr	r2, [r3, #20]
   13ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bac:	add	r2, r2, r3
   13bb0:	ldr	r3, [fp, #-16]
   13bb4:	str	r2, [r3, #20]
   13bb8:	ldr	r3, [fp, #-16]
   13bbc:	ldr	r2, [r3, #20]
   13bc0:	ldr	r3, [fp, #-16]
   13bc4:	ldr	r3, [r3, #24]
   13bc8:	cmp	r2, r3
   13bcc:	bcc	13c00 <flatcc_builder_default_alloc@@Base+0x370>
   13bd0:	ldr	r3, [fp, #-16]
   13bd4:	ldr	r3, [r3, #20]
   13bd8:	add	r3, r3, #1
   13bdc:	mvn	r2, #3
   13be0:	mov	r1, r3
   13be4:	ldr	r0, [fp, #-16]
   13be8:	bl	13af4 <flatcc_builder_default_alloc@@Base+0x264>
   13bec:	mov	r3, r0
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c00 <flatcc_builder_default_alloc@@Base+0x370>
   13bf8:	mov	r3, #0
   13bfc:	b	13c10 <flatcc_builder_default_alloc@@Base+0x380>
   13c00:	ldr	r3, [fp, #-16]
   13c04:	ldr	r2, [r3, #16]
   13c08:	ldr	r3, [fp, #-8]
   13c0c:	add	r3, r2, r3
   13c10:	mov	r0, r3
   13c14:	sub	sp, fp, #4
   13c18:	pop	{fp, pc}
   13c1c:	push	{fp, lr}
   13c20:	add	fp, sp, #4
   13c24:	sub	sp, sp, #8
   13c28:	str	r0, [fp, #-8]
   13c2c:	str	r1, [fp, #-12]
   13c30:	ldr	r3, [fp, #-8]
   13c34:	ldr	r2, [r3, #20]
   13c38:	ldr	r3, [fp, #-12]
   13c3c:	sub	r2, r2, r3
   13c40:	ldr	r3, [fp, #-8]
   13c44:	str	r2, [r3, #20]
   13c48:	ldr	r3, [fp, #-8]
   13c4c:	ldr	r2, [r3, #16]
   13c50:	ldr	r3, [fp, #-8]
   13c54:	ldr	r3, [r3, #20]
   13c58:	add	r3, r2, r3
   13c5c:	ldr	r2, [fp, #-12]
   13c60:	mov	r1, #0
   13c64:	mov	r0, r3
   13c68:	bl	12078 <memset@plt>
   13c6c:	nop			; (mov r0, r0)
   13c70:	sub	sp, fp, #4
   13c74:	pop	{fp, pc}
   13c78:	push	{fp, lr}
   13c7c:	add	fp, sp, #4
   13c80:	sub	sp, sp, #24
   13c84:	str	r0, [fp, #-16]
   13c88:	str	r1, [fp, #-20]	; 0xffffffec
   13c8c:	str	r2, [fp, #-24]	; 0xffffffe8
   13c90:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13c94:	ldr	r0, [fp, #-16]
   13c98:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   13c9c:	str	r0, [fp, #-8]
   13ca0:	ldr	r3, [fp, #-8]
   13ca4:	cmp	r3, #0
   13ca8:	bne	13cb4 <flatcc_builder_default_alloc@@Base+0x424>
   13cac:	mov	r3, #0
   13cb0:	b	13cc8 <flatcc_builder_default_alloc@@Base+0x438>
   13cb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13cb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   13cbc:	ldr	r0, [fp, #-8]
   13cc0:	bl	11ff4 <memcpy@plt>
   13cc4:	ldr	r3, [fp, #-8]
   13cc8:	mov	r0, r3
   13ccc:	sub	sp, fp, #4
   13cd0:	pop	{fp, pc}
   13cd4:	push	{fp, lr}
   13cd8:	add	fp, sp, #4
   13cdc:	sub	sp, sp, #24
   13ce0:	str	r0, [fp, #-16]
   13ce4:	str	r1, [fp, #-20]	; 0xffffffec
   13ce8:	strh	r2, [fp, #-22]	; 0xffffffea
   13cec:	strh	r3, [fp, #-24]	; 0xffffffe8
   13cf0:	ldr	r3, [fp, #-16]
   13cf4:	ldr	r2, [r3, #20]
   13cf8:	ldrh	r3, [fp, #-22]	; 0xffffffea
   13cfc:	add	r3, r2, r3
   13d00:	sub	r3, r3, #1
   13d04:	ldrh	r2, [fp, #-22]	; 0xffffffea
   13d08:	rsb	r2, r2, #0
   13d0c:	and	r3, r3, r2
   13d10:	str	r3, [fp, #-8]
   13d14:	ldr	r2, [fp, #-8]
   13d18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d1c:	add	r2, r2, r3
   13d20:	ldr	r3, [fp, #-16]
   13d24:	str	r2, [r3, #20]
   13d28:	ldr	r3, [fp, #-16]
   13d2c:	ldr	r2, [r3, #20]
   13d30:	ldr	r3, [fp, #-16]
   13d34:	ldr	r3, [r3, #24]
   13d38:	cmp	r2, r3
   13d3c:	bcc	13d70 <flatcc_builder_default_alloc@@Base+0x4e0>
   13d40:	ldr	r3, [fp, #-16]
   13d44:	ldr	r3, [r3, #20]
   13d48:	add	r3, r3, #1
   13d4c:	ldr	r2, [pc, #136]	; 13ddc <flatcc_builder_default_alloc@@Base+0x54c>
   13d50:	mov	r1, r3
   13d54:	ldr	r0, [fp, #-16]
   13d58:	bl	13af4 <flatcc_builder_default_alloc@@Base+0x264>
   13d5c:	mov	r3, r0
   13d60:	cmp	r3, #0
   13d64:	beq	13d70 <flatcc_builder_default_alloc@@Base+0x4e0>
   13d68:	mov	r3, #0
   13d6c:	b	13dd0 <flatcc_builder_default_alloc@@Base+0x540>
   13d70:	ldr	r3, [fp, #-16]
   13d74:	ldr	r2, [r3, #4]
   13d78:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13d7c:	lsl	r3, r3, #1
   13d80:	add	r3, r2, r3
   13d84:	ldr	r2, [fp, #-8]
   13d88:	uxth	r2, r2
   13d8c:	add	r2, r2, #4
   13d90:	uxth	r2, r2
   13d94:	strh	r2, [r3]
   13d98:	ldr	r3, [fp, #-16]
   13d9c:	ldrh	r3, [r3, #8]
   13da0:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   13da4:	cmp	r2, r3
   13da8:	bcc	13dc0 <flatcc_builder_default_alloc@@Base+0x530>
   13dac:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13db0:	add	r3, r3, #1
   13db4:	uxth	r2, r3
   13db8:	ldr	r3, [fp, #-16]
   13dbc:	strh	r2, [r3, #8]
   13dc0:	ldr	r3, [fp, #-16]
   13dc4:	ldr	r2, [r3, #16]
   13dc8:	ldr	r3, [fp, #-8]
   13dcc:	add	r3, r2, r3
   13dd0:	mov	r0, r3
   13dd4:	sub	sp, fp, #4
   13dd8:	pop	{fp, pc}
   13ddc:	strdeq	pc, [r0], -ip
   13de0:	push	{fp, lr}
   13de4:	add	fp, sp, #4
   13de8:	sub	sp, sp, #16
   13dec:	str	r0, [fp, #-16]
   13df0:	mov	r3, r1
   13df4:	strh	r3, [fp, #-18]	; 0xffffffee
   13df8:	ldr	r3, [fp, #-16]
   13dfc:	ldr	r3, [r3, #20]
   13e00:	add	r3, r3, #3
   13e04:	bic	r3, r3, #3
   13e08:	str	r3, [fp, #-8]
   13e0c:	ldr	r3, [fp, #-8]
   13e10:	add	r2, r3, #4
   13e14:	ldr	r3, [fp, #-16]
   13e18:	str	r2, [r3, #20]
   13e1c:	ldr	r3, [fp, #-16]
   13e20:	ldr	r2, [r3, #20]
   13e24:	ldr	r3, [fp, #-16]
   13e28:	ldr	r3, [r3, #24]
   13e2c:	cmp	r2, r3
   13e30:	bls	13e60 <flatcc_builder_default_alloc@@Base+0x5d0>
   13e34:	ldr	r3, [fp, #-16]
   13e38:	ldr	r3, [r3, #20]
   13e3c:	ldr	r2, [pc, #168]	; 13eec <flatcc_builder_default_alloc@@Base+0x65c>
   13e40:	mov	r1, r3
   13e44:	ldr	r0, [fp, #-16]
   13e48:	bl	13af4 <flatcc_builder_default_alloc@@Base+0x264>
   13e4c:	mov	r3, r0
   13e50:	cmp	r3, #0
   13e54:	beq	13e60 <flatcc_builder_default_alloc@@Base+0x5d0>
   13e58:	mov	r3, #0
   13e5c:	b	13ee0 <flatcc_builder_default_alloc@@Base+0x650>
   13e60:	ldr	r3, [fp, #-16]
   13e64:	ldr	r2, [r3, #4]
   13e68:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13e6c:	lsl	r3, r3, #1
   13e70:	add	r3, r2, r3
   13e74:	ldr	r2, [fp, #-8]
   13e78:	uxth	r2, r2
   13e7c:	add	r2, r2, #4
   13e80:	uxth	r2, r2
   13e84:	strh	r2, [r3]
   13e88:	ldr	r3, [fp, #-16]
   13e8c:	ldrh	r3, [r3, #8]
   13e90:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13e94:	cmp	r2, r3
   13e98:	bcc	13eb0 <flatcc_builder_default_alloc@@Base+0x620>
   13e9c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13ea0:	add	r3, r3, #1
   13ea4:	uxth	r2, r3
   13ea8:	ldr	r3, [fp, #-16]
   13eac:	strh	r2, [r3, #8]
   13eb0:	ldr	r3, [fp, #-16]
   13eb4:	ldr	r3, [r3]
   13eb8:	add	r1, r3, #2
   13ebc:	ldr	r2, [fp, #-16]
   13ec0:	str	r1, [r2]
   13ec4:	ldr	r2, [fp, #-8]
   13ec8:	uxth	r2, r2
   13ecc:	strh	r2, [r3]
   13ed0:	ldr	r3, [fp, #-16]
   13ed4:	ldr	r2, [r3, #16]
   13ed8:	ldr	r3, [fp, #-8]
   13edc:	add	r3, r2, r3
   13ee0:	mov	r0, r3
   13ee4:	sub	sp, fp, #4
   13ee8:	pop	{fp, pc}
   13eec:	strdeq	pc, [r0], -ip
   13ef0:	push	{r4, fp, lr}
   13ef4:	add	fp, sp, #8
   13ef8:	sub	sp, sp, #36	; 0x24
   13efc:	str	r0, [fp, #-24]	; 0xffffffe8
   13f00:	str	r1, [fp, #-28]	; 0xffffffe4
   13f04:	str	r2, [fp, #-32]	; 0xffffffe0
   13f08:	str	r3, [fp, #-36]	; 0xffffffdc
   13f0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f10:	add	r2, r3, #52	; 0x34
   13f14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f18:	lsl	r3, r3, #3
   13f1c:	add	r3, r2, r3
   13f20:	str	r3, [fp, #-16]
   13f24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13f2c:	add	r2, r2, r3
   13f30:	ldr	r3, [fp, #-16]
   13f34:	ldr	r3, [r3, #4]
   13f38:	cmp	r2, r3
   13f3c:	bls	13f9c <flatcc_builder_default_alloc@@Base+0x70c>
   13f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f44:	ldr	r4, [r3, #48]	; 0x30
   13f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f4c:	ldr	r0, [r3, #40]	; 0x28
   13f50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13f58:	add	r2, r2, r3
   13f5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f60:	str	r3, [sp]
   13f64:	ldr	r3, [fp, #4]
   13f68:	ldr	r1, [fp, #-16]
   13f6c:	blx	r4
   13f70:	mov	r3, r0
   13f74:	cmp	r3, #0
   13f78:	beq	13f9c <flatcc_builder_default_alloc@@Base+0x70c>
   13f7c:	ldr	r3, [pc, #56]	; 13fbc <flatcc_builder_default_alloc@@Base+0x72c>
   13f80:	add	r3, pc, r3
   13f84:	mov	r2, #308	; 0x134
   13f88:	ldr	r1, [pc, #48]	; 13fc0 <flatcc_builder_default_alloc@@Base+0x730>
   13f8c:	add	r1, pc, r1
   13f90:	ldr	r0, [pc, #44]	; 13fc4 <flatcc_builder_default_alloc@@Base+0x734>
   13f94:	add	r0, pc, r0
   13f98:	bl	120b4 <__assert_fail@plt>
   13f9c:	ldr	r3, [fp, #-16]
   13fa0:	ldr	r3, [r3]
   13fa4:	mov	r2, r3
   13fa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13fac:	add	r3, r2, r3
   13fb0:	mov	r0, r3
   13fb4:	sub	sp, fp, #8
   13fb8:	pop	{r4, fp, pc}
   13fbc:	andeq	r7, r0, r8, asr #32
   13fc0:	andeq	r6, r0, r8, lsl #24
   13fc4:	andeq	r6, r0, r0, ror #24
   13fc8:	push	{fp, lr}
   13fcc:	add	fp, sp, #4
   13fd0:	sub	sp, sp, #24
   13fd4:	str	r0, [fp, #-16]
   13fd8:	str	r1, [fp, #-20]	; 0xffffffec
   13fdc:	ldr	r3, [fp, #-16]
   13fe0:	ldr	r3, [r3, #32]
   13fe4:	ldr	r2, [r3, #16]
   13fe8:	ldr	r3, [fp, #-16]
   13fec:	ldr	r3, [r3, #32]
   13ff0:	ldrh	r3, [r3, #28]
   13ff4:	lsl	r3, r3, #1
   13ff8:	add	r3, r2, r3
   13ffc:	str	r3, [fp, #-8]
   14000:	ldr	r3, [fp, #-20]	; 0xffffffec
   14004:	add	r3, r3, #2
   14008:	lsl	r3, r3, #1
   1400c:	str	r3, [fp, #-12]
   14010:	mov	r3, #1
   14014:	str	r3, [sp]
   14018:	ldr	r3, [fp, #-12]
   1401c:	ldr	r2, [fp, #-8]
   14020:	mov	r1, #0
   14024:	ldr	r0, [fp, #-16]
   14028:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   1402c:	mov	r2, r0
   14030:	ldr	r3, [fp, #-16]
   14034:	str	r2, [r3, #4]
   14038:	ldr	r3, [fp, #-16]
   1403c:	ldr	r3, [r3, #4]
   14040:	cmp	r3, #0
   14044:	bne	14050 <flatcc_builder_default_alloc@@Base+0x7c0>
   14048:	mvn	r3, #0
   1404c:	b	140c8 <flatcc_builder_default_alloc@@Base+0x838>
   14050:	ldr	r3, [fp, #-16]
   14054:	ldr	r3, [r3, #4]
   14058:	add	r2, r3, #4
   1405c:	ldr	r3, [fp, #-16]
   14060:	str	r2, [r3, #4]
   14064:	ldr	r3, [fp, #-16]
   14068:	ldr	r3, [r3, #32]
   1406c:	ldr	r3, [r3, #20]
   14070:	str	r3, [fp, #-8]
   14074:	ldr	r3, [fp, #-20]	; 0xffffffec
   14078:	lsl	r3, r3, #1
   1407c:	add	r3, r3, #1
   14080:	str	r3, [fp, #-12]
   14084:	mov	r3, #0
   14088:	str	r3, [sp]
   1408c:	ldr	r3, [fp, #-12]
   14090:	ldr	r2, [fp, #-8]
   14094:	mov	r1, #3
   14098:	ldr	r0, [fp, #-16]
   1409c:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   140a0:	mov	r2, r0
   140a4:	ldr	r3, [fp, #-16]
   140a8:	str	r2, [r3]
   140ac:	ldr	r3, [fp, #-16]
   140b0:	ldr	r3, [r3]
   140b4:	cmp	r3, #0
   140b8:	bne	140c4 <flatcc_builder_default_alloc@@Base+0x834>
   140bc:	mvn	r3, #0
   140c0:	b	140c8 <flatcc_builder_default_alloc@@Base+0x838>
   140c4:	mov	r3, #0
   140c8:	mov	r0, r3
   140cc:	sub	sp, fp, #4
   140d0:	pop	{fp, pc}
   140d4:	push	{r4, fp, lr}
   140d8:	add	fp, sp, #8
   140dc:	sub	sp, sp, #36	; 0x24
   140e0:	str	r0, [fp, #-32]	; 0xffffffe0
   140e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   140e8:	add	r3, r3, #52	; 0x34
   140ec:	add	r3, r3, #40	; 0x28
   140f0:	str	r3, [fp, #-24]	; 0xffffffe8
   140f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   140f8:	ldr	r3, [r3, #124]	; 0x7c
   140fc:	cmp	r3, #0
   14100:	beq	14124 <flatcc_builder_default_alloc@@Base+0x894>
   14104:	ldr	r3, [pc, #280]	; 14224 <flatcc_builder_default_alloc@@Base+0x994>
   14108:	add	r3, pc, r3
   1410c:	ldr	r2, [pc, #276]	; 14228 <flatcc_builder_default_alloc@@Base+0x998>
   14110:	ldr	r1, [pc, #276]	; 1422c <flatcc_builder_default_alloc@@Base+0x99c>
   14114:	add	r1, pc, r1
   14118:	ldr	r0, [pc, #272]	; 14230 <flatcc_builder_default_alloc@@Base+0x9a0>
   1411c:	add	r0, pc, r0
   14120:	bl	120b4 <__assert_fail@plt>
   14124:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14128:	ldr	r2, [r3, #124]	; 0x7c
   1412c:	mov	r3, #0
   14130:	str	r3, [sp]
   14134:	mov	r3, #16
   14138:	mov	r1, #6
   1413c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14140:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   14144:	mov	r3, r0
   14148:	cmp	r3, #0
   1414c:	bne	14158 <flatcc_builder_default_alloc@@Base+0x8c8>
   14150:	mvn	r3, #0
   14154:	b	14218 <flatcc_builder_default_alloc@@Base+0x988>
   14158:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1415c:	mov	r2, #16
   14160:	str	r2, [r3, #124]	; 0x7c
   14164:	mov	r3, #256	; 0x100
   14168:	str	r3, [fp, #-16]
   1416c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14170:	ldr	r4, [r3, #48]	; 0x30
   14174:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14178:	ldr	r0, [r3, #40]	; 0x28
   1417c:	mov	r3, #5
   14180:	str	r3, [sp]
   14184:	mov	r3, #1
   14188:	ldr	r2, [fp, #-16]
   1418c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14190:	blx	r4
   14194:	mov	r3, r0
   14198:	cmp	r3, #0
   1419c:	beq	141b4 <flatcc_builder_default_alloc@@Base+0x924>
   141a0:	mvn	r3, #0
   141a4:	b	14218 <flatcc_builder_default_alloc@@Base+0x988>
   141a8:	ldr	r3, [fp, #-16]
   141ac:	lsl	r3, r3, #1
   141b0:	str	r3, [fp, #-16]
   141b4:	ldr	r3, [fp, #-16]
   141b8:	lsl	r2, r3, #1
   141bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   141c0:	ldr	r3, [r3, #4]
   141c4:	cmp	r2, r3
   141c8:	bls	141a8 <flatcc_builder_default_alloc@@Base+0x918>
   141cc:	ldr	r3, [fp, #-16]
   141d0:	lsr	r3, r3, #2
   141d4:	str	r3, [fp, #-16]
   141d8:	mov	r3, #0
   141dc:	str	r3, [fp, #-20]	; 0xffffffec
   141e0:	b	141f0 <flatcc_builder_default_alloc@@Base+0x960>
   141e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   141e8:	add	r3, r3, #1
   141ec:	str	r3, [fp, #-20]	; 0xffffffec
   141f0:	mov	r2, #1
   141f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   141f8:	lsl	r2, r2, r3
   141fc:	ldr	r3, [fp, #-16]
   14200:	cmp	r2, r3
   14204:	bcc	141e4 <flatcc_builder_default_alloc@@Base+0x954>
   14208:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1420c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14210:	str	r2, [r3, #116]	; 0x74
   14214:	mov	r3, #0
   14218:	mov	r0, r3
   1421c:	sub	sp, fp, #8
   14220:	pop	{r4, fp, pc}
   14224:			; <UNDEFINED> instruction: 0x00006eb4
   14228:	andeq	r0, r0, r6, asr r1
   1422c:	andeq	r6, r0, r0, lsl #21
   14230:	ldrdeq	r6, [r0], -ip
   14234:	push	{fp, lr}
   14238:	add	fp, sp, #4
   1423c:	sub	sp, sp, #16
   14240:	str	r0, [fp, #-16]
   14244:	str	r1, [fp, #-20]	; 0xffffffec
   14248:	ldr	r3, [fp, #-16]
   1424c:	ldr	r3, [r3, #116]	; 0x74
   14250:	cmp	r3, #0
   14254:	bne	14274 <flatcc_builder_default_alloc@@Base+0x9e4>
   14258:	ldr	r0, [fp, #-16]
   1425c:	bl	140d4 <flatcc_builder_default_alloc@@Base+0x844>
   14260:	mov	r3, r0
   14264:	cmp	r3, #0
   14268:	beq	14274 <flatcc_builder_default_alloc@@Base+0x9e4>
   1426c:	mov	r3, #0
   14270:	b	142a0 <flatcc_builder_default_alloc@@Base+0xa10>
   14274:	ldr	r3, [fp, #-16]
   14278:	ldr	r3, [r3, #92]	; 0x5c
   1427c:	str	r3, [fp, #-8]
   14280:	ldr	r3, [fp, #-16]
   14284:	ldr	r3, [r3, #116]	; 0x74
   14288:	rsb	r3, r3, #32
   1428c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14290:	lsr	r3, r2, r3
   14294:	lsl	r3, r3, #2
   14298:	ldr	r2, [fp, #-8]
   1429c:	add	r3, r2, r3
   142a0:	mov	r0, r3
   142a4:	sub	sp, fp, #4
   142a8:	pop	{fp, pc}

000142ac <flatcc_builder_flush_vtable_cache@@Base>:
   142ac:	push	{fp, lr}
   142b0:	add	fp, sp, #4
   142b4:	sub	sp, sp, #16
   142b8:	str	r0, [fp, #-16]
   142bc:	ldr	r3, [fp, #-16]
   142c0:	add	r3, r3, #52	; 0x34
   142c4:	add	r3, r3, #40	; 0x28
   142c8:	str	r3, [fp, #-8]
   142cc:	ldr	r3, [fp, #-16]
   142d0:	ldr	r3, [r3, #116]	; 0x74
   142d4:	cmp	r3, #0
   142d8:	beq	14314 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   142dc:	ldr	r3, [fp, #-8]
   142e0:	ldr	r0, [r3]
   142e4:	ldr	r3, [fp, #-8]
   142e8:	ldr	r3, [r3, #4]
   142ec:	mov	r2, r3
   142f0:	mov	r1, #0
   142f4:	bl	12078 <memset@plt>
   142f8:	ldr	r3, [fp, #-16]
   142fc:	mov	r2, #16
   14300:	str	r2, [r3, #124]	; 0x7c
   14304:	ldr	r3, [fp, #-16]
   14308:	mov	r2, #0
   1430c:	str	r2, [r3, #120]	; 0x78
   14310:	b	14318 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   14314:	nop			; (mov r0, r0)
   14318:	sub	sp, fp, #4
   1431c:	pop	{fp, pc}

00014320 <flatcc_builder_custom_init@@Base>:
   14320:	push	{r4, fp, lr}
   14324:	add	fp, sp, #8
   14328:	sub	sp, sp, #20
   1432c:	str	r0, [fp, #-16]
   14330:	str	r1, [fp, #-20]	; 0xffffffec
   14334:	str	r2, [fp, #-24]	; 0xffffffe8
   14338:	str	r3, [fp, #-28]	; 0xffffffe4
   1433c:	ldr	r4, [pc, #152]	; 143dc <flatcc_builder_custom_init@@Base+0xbc>
   14340:	add	r4, pc, r4
   14344:	mov	r2, #232	; 0xe8
   14348:	mov	r1, #0
   1434c:	ldr	r0, [fp, #-16]
   14350:	bl	12078 <memset@plt>
   14354:	ldr	r3, [fp, #-20]	; 0xffffffec
   14358:	cmp	r3, #0
   1435c:	bne	14384 <flatcc_builder_custom_init@@Base+0x64>
   14360:	ldr	r3, [fp, #-16]
   14364:	mov	r2, #1
   14368:	str	r2, [r3, #184]	; 0xb8
   1436c:	ldr	r3, [pc, #108]	; 143e0 <flatcc_builder_custom_init@@Base+0xc0>
   14370:	ldr	r3, [r4, r3]
   14374:	str	r3, [fp, #-20]	; 0xffffffec
   14378:	ldr	r3, [fp, #-16]
   1437c:	add	r3, r3, #188	; 0xbc
   14380:	str	r3, [fp, #-24]	; 0xffffffe8
   14384:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14388:	cmp	r3, #0
   1438c:	bne	1439c <flatcc_builder_custom_init@@Base+0x7c>
   14390:	ldr	r3, [pc, #76]	; 143e4 <flatcc_builder_custom_init@@Base+0xc4>
   14394:	ldr	r3, [r4, r3]
   14398:	str	r3, [fp, #-28]	; 0xffffffe4
   1439c:	ldr	r3, [fp, #-16]
   143a0:	ldr	r2, [fp, #4]
   143a4:	str	r2, [r3, #40]	; 0x28
   143a8:	ldr	r3, [fp, #-16]
   143ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   143b0:	str	r2, [r3, #48]	; 0x30
   143b4:	ldr	r3, [fp, #-16]
   143b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   143bc:	str	r2, [r3, #36]	; 0x24
   143c0:	ldr	r3, [fp, #-16]
   143c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   143c8:	str	r2, [r3, #44]	; 0x2c
   143cc:	mov	r3, #0
   143d0:	mov	r0, r3
   143d4:	sub	sp, fp, #8
   143d8:	pop	{r4, fp, pc}
   143dc:			; <UNDEFINED> instruction: 0x00017cb8
   143e0:	andeq	r0, r0, ip, rrx
   143e4:	andeq	r0, r0, r8, rrx

000143e8 <flatcc_builder_init@@Base>:
   143e8:	push	{fp, lr}
   143ec:	add	fp, sp, #4
   143f0:	sub	sp, sp, #16
   143f4:	str	r0, [fp, #-8]
   143f8:	mov	r3, #0
   143fc:	str	r3, [sp]
   14400:	mov	r3, #0
   14404:	mov	r2, #0
   14408:	mov	r1, #0
   1440c:	ldr	r0, [fp, #-8]
   14410:	bl	14320 <flatcc_builder_custom_init@@Base>
   14414:	mov	r3, r0
   14418:	mov	r0, r3
   1441c:	sub	sp, fp, #4
   14420:	pop	{fp, pc}

00014424 <flatcc_builder_custom_reset@@Base>:
   14424:	push	{r4, fp, lr}
   14428:	add	fp, sp, #8
   1442c:	sub	sp, sp, #36	; 0x24
   14430:	str	r0, [fp, #-24]	; 0xffffffe8
   14434:	str	r1, [fp, #-28]	; 0xffffffe4
   14438:	str	r2, [fp, #-32]	; 0xffffffe0
   1443c:	mov	r3, #0
   14440:	str	r3, [fp, #-16]
   14444:	b	14520 <flatcc_builder_custom_reset@@Base+0xfc>
   14448:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1444c:	add	r2, r3, #52	; 0x34
   14450:	ldr	r3, [fp, #-16]
   14454:	lsl	r3, r3, #3
   14458:	add	r3, r2, r3
   1445c:	str	r3, [fp, #-20]	; 0xffffffec
   14460:	ldr	r3, [fp, #-20]	; 0xffffffec
   14464:	ldr	r3, [r3]
   14468:	cmp	r3, #0
   1446c:	beq	144e4 <flatcc_builder_custom_reset@@Base+0xc0>
   14470:	ldr	r3, [fp, #-16]
   14474:	cmp	r3, #5
   14478:	beq	144c4 <flatcc_builder_custom_reset@@Base+0xa0>
   1447c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14480:	cmp	r3, #0
   14484:	beq	144c4 <flatcc_builder_custom_reset@@Base+0xa0>
   14488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1448c:	ldr	r4, [r3, #48]	; 0x30
   14490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14494:	ldr	r0, [r3, #40]	; 0x28
   14498:	ldr	r3, [fp, #-16]
   1449c:	str	r3, [sp]
   144a0:	mov	r3, #1
   144a4:	mov	r2, #1
   144a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   144ac:	blx	r4
   144b0:	mov	r3, r0
   144b4:	cmp	r3, #0
   144b8:	beq	144c4 <flatcc_builder_custom_reset@@Base+0xa0>
   144bc:	mvn	r3, #0
   144c0:	b	14650 <flatcc_builder_custom_reset@@Base+0x22c>
   144c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c8:	ldr	r0, [r3]
   144cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d0:	ldr	r3, [r3, #4]
   144d4:	mov	r2, r3
   144d8:	mov	r1, #0
   144dc:	bl	12078 <memset@plt>
   144e0:	b	14514 <flatcc_builder_custom_reset@@Base+0xf0>
   144e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144e8:	ldr	r3, [r3, #4]
   144ec:	cmp	r3, #0
   144f0:	beq	14514 <flatcc_builder_custom_reset@@Base+0xf0>
   144f4:	ldr	r3, [pc, #352]	; 1465c <flatcc_builder_custom_reset@@Base+0x238>
   144f8:	add	r3, pc, r3
   144fc:	ldr	r2, [pc, #348]	; 14660 <flatcc_builder_custom_reset@@Base+0x23c>
   14500:	ldr	r1, [pc, #348]	; 14664 <flatcc_builder_custom_reset@@Base+0x240>
   14504:	add	r1, pc, r1
   14508:	ldr	r0, [pc, #344]	; 14668 <flatcc_builder_custom_reset@@Base+0x244>
   1450c:	add	r0, pc, r0
   14510:	bl	120b4 <__assert_fail@plt>
   14514:	ldr	r3, [fp, #-16]
   14518:	add	r3, r3, #1
   1451c:	str	r3, [fp, #-16]
   14520:	ldr	r3, [fp, #-16]
   14524:	cmp	r3, #7
   14528:	ble	14448 <flatcc_builder_custom_reset@@Base+0x24>
   1452c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14530:	mov	r2, #0
   14534:	str	r2, [r3, #120]	; 0x78
   14538:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1453c:	ldr	r3, [r3, #124]	; 0x7c
   14540:	cmp	r3, #0
   14544:	beq	14554 <flatcc_builder_custom_reset@@Base+0x130>
   14548:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1454c:	mov	r2, #16
   14550:	str	r2, [r3, #124]	; 0x7c
   14554:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14558:	mov	r2, #0
   1455c:	strh	r2, [r3, #128]	; 0x80
   14560:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14564:	mov	r2, #0
   14568:	str	r2, [r3, #136]	; 0x88
   1456c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14570:	mov	r2, #0
   14574:	str	r2, [r3, #140]	; 0x8c
   14578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1457c:	mov	r2, #0
   14580:	str	r2, [r3, #156]	; 0x9c
   14584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14588:	mov	r2, #0
   1458c:	str	r2, [r3, #160]	; 0xa0
   14590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14594:	mov	r2, #0
   14598:	str	r2, [r3, #20]
   1459c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145a0:	mov	r2, #0
   145a4:	str	r2, [r3, #24]
   145a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145ac:	mov	r2, #0
   145b0:	str	r2, [r3, #148]	; 0x94
   145b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145b8:	mov	r2, #0
   145bc:	str	r2, [r3, #152]	; 0x98
   145c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145c4:	ldr	r2, [r3, #60]	; 0x3c
   145c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145cc:	str	r2, [r3, #16]
   145d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145d4:	ldr	r2, [r3, #76]	; 0x4c
   145d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145dc:	str	r2, [r3]
   145e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145e4:	ldr	r2, [r3, #52]	; 0x34
   145e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145ec:	str	r2, [r3, #4]
   145f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145f4:	mov	r2, #0
   145f8:	str	r2, [r3, #32]
   145fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14600:	cmp	r3, #0
   14604:	beq	1462c <flatcc_builder_custom_reset@@Base+0x208>
   14608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1460c:	mov	r2, #0
   14610:	str	r2, [r3, #172]	; 0xac
   14614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14618:	mov	r2, #0
   1461c:	str	r2, [r3, #176]	; 0xb0
   14620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14624:	mov	r2, #0
   14628:	str	r2, [r3, #180]	; 0xb4
   1462c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14630:	ldr	r3, [r3, #184]	; 0xb8
   14634:	cmp	r3, #0
   14638:	beq	1464c <flatcc_builder_custom_reset@@Base+0x228>
   1463c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14640:	add	r3, r3, #188	; 0xbc
   14644:	mov	r0, r3
   14648:	bl	19f48 <flatcc_emitter_reset@@Base>
   1464c:	mov	r3, #0
   14650:	mov	r0, r3
   14654:	sub	sp, fp, #8
   14658:	pop	{r4, fp, pc}
   1465c:	andeq	r6, r0, r0, ror #21
   14660:			; <UNDEFINED> instruction: 0x000001b2
   14664:	muleq	r0, r0, r6
   14668:	strdeq	r6, [r0], -ip

0001466c <flatcc_builder_reset@@Base>:
   1466c:	push	{fp, lr}
   14670:	add	fp, sp, #4
   14674:	sub	sp, sp, #8
   14678:	str	r0, [fp, #-8]
   1467c:	mov	r2, #0
   14680:	mov	r1, #0
   14684:	ldr	r0, [fp, #-8]
   14688:	bl	14424 <flatcc_builder_custom_reset@@Base>
   1468c:	mov	r3, r0
   14690:	mov	r0, r3
   14694:	sub	sp, fp, #4
   14698:	pop	{fp, pc}

0001469c <flatcc_builder_clear@@Base>:
   1469c:	push	{r4, fp, lr}
   146a0:	add	fp, sp, #8
   146a4:	sub	sp, sp, #28
   146a8:	str	r0, [fp, #-24]	; 0xffffffe8
   146ac:	mov	r3, #0
   146b0:	str	r3, [fp, #-16]
   146b4:	b	14704 <flatcc_builder_clear@@Base+0x68>
   146b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146bc:	add	r2, r3, #52	; 0x34
   146c0:	ldr	r3, [fp, #-16]
   146c4:	lsl	r3, r3, #3
   146c8:	add	r3, r2, r3
   146cc:	str	r3, [fp, #-20]	; 0xffffffec
   146d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146d4:	ldr	r4, [r3, #48]	; 0x30
   146d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146dc:	ldr	r0, [r3, #40]	; 0x28
   146e0:	ldr	r3, [fp, #-16]
   146e4:	str	r3, [sp]
   146e8:	mov	r3, #0
   146ec:	mov	r2, #0
   146f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   146f4:	blx	r4
   146f8:	ldr	r3, [fp, #-16]
   146fc:	add	r3, r3, #1
   14700:	str	r3, [fp, #-16]
   14704:	ldr	r3, [fp, #-16]
   14708:	cmp	r3, #7
   1470c:	ble	146b8 <flatcc_builder_clear@@Base+0x1c>
   14710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14714:	ldr	r3, [r3, #184]	; 0xb8
   14718:	cmp	r3, #0
   1471c:	beq	14730 <flatcc_builder_clear@@Base+0x94>
   14720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14724:	add	r3, r3, #188	; 0xbc
   14728:	mov	r0, r3
   1472c:	bl	1a0d4 <flatcc_emitter_clear@@Base>
   14730:	mov	r2, #232	; 0xe8
   14734:	mov	r1, #0
   14738:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1473c:	bl	12078 <memset@plt>
   14740:	nop			; (mov r0, r0)
   14744:	sub	sp, fp, #8
   14748:	pop	{r4, fp, pc}
   1474c:	push	{fp}		; (str fp, [sp, #-4]!)
   14750:	add	fp, sp, #0
   14754:	sub	sp, sp, #12
   14758:	str	r0, [fp, #-8]
   1475c:	mov	r3, r1
   14760:	strh	r3, [fp, #-10]
   14764:	ldr	r3, [fp, #-8]
   14768:	ldrh	r3, [r3, #128]	; 0x80
   1476c:	ldrh	r2, [fp, #-10]
   14770:	cmp	r2, r3
   14774:	bls	14784 <flatcc_builder_clear@@Base+0xe8>
   14778:	ldr	r3, [fp, #-8]
   1477c:	ldrh	r2, [fp, #-10]
   14780:	strh	r2, [r3, #128]	; 0x80
   14784:	nop			; (mov r0, r0)
   14788:	add	sp, fp, #0
   1478c:	pop	{fp}		; (ldr fp, [sp], #4)
   14790:	bx	lr
   14794:	push	{fp}		; (str fp, [sp, #-4]!)
   14798:	add	fp, sp, #0
   1479c:	sub	sp, sp, #12
   147a0:	str	r0, [fp, #-8]
   147a4:	mov	r3, r1
   147a8:	strh	r3, [fp, #-10]
   147ac:	ldr	r3, [fp, #-8]
   147b0:	ldrh	r3, [r3]
   147b4:	ldrh	r2, [fp, #-10]
   147b8:	cmp	r2, r3
   147bc:	bls	147cc <flatcc_builder_clear@@Base+0x130>
   147c0:	ldr	r3, [fp, #-8]
   147c4:	ldrh	r2, [fp, #-10]
   147c8:	strh	r2, [r3]
   147cc:	nop			; (mov r0, r0)
   147d0:	add	sp, fp, #0
   147d4:	pop	{fp}		; (ldr fp, [sp], #4)
   147d8:	bx	lr

000147dc <flatcc_builder_enter_user_frame_ptr@@Base>:
   147dc:	push	{fp, lr}
   147e0:	add	fp, sp, #4
   147e4:	sub	sp, sp, #24
   147e8:	str	r0, [fp, #-16]
   147ec:	str	r1, [fp, #-20]	; 0xffffffec
   147f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147f4:	add	r3, r3, #3
   147f8:	bic	r3, r3, #3
   147fc:	add	r3, r3, #4
   14800:	str	r3, [fp, #-20]	; 0xffffffec
   14804:	ldr	r3, [fp, #-16]
   14808:	ldr	r2, [r3, #228]	; 0xe4
   1480c:	mov	r3, #0
   14810:	str	r3, [sp]
   14814:	ldr	r3, [fp, #-20]	; 0xffffffec
   14818:	mov	r1, #7
   1481c:	ldr	r0, [fp, #-16]
   14820:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   14824:	str	r0, [fp, #-8]
   14828:	ldr	r3, [fp, #-8]
   1482c:	cmp	r3, #0
   14830:	bne	1483c <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   14834:	mov	r3, #0
   14838:	b	14894 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   1483c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14840:	mov	r1, #0
   14844:	ldr	r0, [fp, #-8]
   14848:	bl	12078 <memset@plt>
   1484c:	ldr	r3, [fp, #-8]
   14850:	add	r2, r3, #4
   14854:	str	r2, [fp, #-8]
   14858:	ldr	r2, [fp, #-16]
   1485c:	ldr	r2, [r2, #224]	; 0xe0
   14860:	str	r2, [r3]
   14864:	ldr	r3, [fp, #-16]
   14868:	ldr	r3, [r3, #228]	; 0xe4
   1486c:	add	r2, r3, #4
   14870:	ldr	r3, [fp, #-16]
   14874:	str	r2, [r3, #224]	; 0xe0
   14878:	ldr	r3, [fp, #-16]
   1487c:	ldr	r2, [r3, #228]	; 0xe4
   14880:	ldr	r3, [fp, #-20]	; 0xffffffec
   14884:	add	r2, r2, r3
   14888:	ldr	r3, [fp, #-16]
   1488c:	str	r2, [r3, #228]	; 0xe4
   14890:	ldr	r3, [fp, #-8]
   14894:	mov	r0, r3
   14898:	sub	sp, fp, #4
   1489c:	pop	{fp, pc}

000148a0 <flatcc_builder_enter_user_frame@@Base>:
   148a0:	push	{fp, lr}
   148a4:	add	fp, sp, #4
   148a8:	sub	sp, sp, #24
   148ac:	str	r0, [fp, #-16]
   148b0:	str	r1, [fp, #-20]	; 0xffffffec
   148b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   148b8:	add	r3, r3, #3
   148bc:	bic	r3, r3, #3
   148c0:	add	r3, r3, #4
   148c4:	str	r3, [fp, #-20]	; 0xffffffec
   148c8:	ldr	r3, [fp, #-16]
   148cc:	ldr	r2, [r3, #228]	; 0xe4
   148d0:	mov	r3, #0
   148d4:	str	r3, [sp]
   148d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148dc:	mov	r1, #7
   148e0:	ldr	r0, [fp, #-16]
   148e4:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   148e8:	str	r0, [fp, #-8]
   148ec:	ldr	r3, [fp, #-8]
   148f0:	cmp	r3, #0
   148f4:	bne	14900 <flatcc_builder_enter_user_frame@@Base+0x60>
   148f8:	mov	r3, #0
   148fc:	b	1495c <flatcc_builder_enter_user_frame@@Base+0xbc>
   14900:	ldr	r2, [fp, #-20]	; 0xffffffec
   14904:	mov	r1, #0
   14908:	ldr	r0, [fp, #-8]
   1490c:	bl	12078 <memset@plt>
   14910:	ldr	r3, [fp, #-8]
   14914:	add	r2, r3, #4
   14918:	str	r2, [fp, #-8]
   1491c:	ldr	r2, [fp, #-16]
   14920:	ldr	r2, [r2, #224]	; 0xe0
   14924:	str	r2, [r3]
   14928:	ldr	r3, [fp, #-16]
   1492c:	ldr	r3, [r3, #228]	; 0xe4
   14930:	add	r2, r3, #4
   14934:	ldr	r3, [fp, #-16]
   14938:	str	r2, [r3, #224]	; 0xe0
   1493c:	ldr	r3, [fp, #-16]
   14940:	ldr	r2, [r3, #228]	; 0xe4
   14944:	ldr	r3, [fp, #-20]	; 0xffffffec
   14948:	add	r2, r2, r3
   1494c:	ldr	r3, [fp, #-16]
   14950:	str	r2, [r3, #228]	; 0xe4
   14954:	ldr	r3, [fp, #-16]
   14958:	ldr	r3, [r3, #224]	; 0xe0
   1495c:	mov	r0, r3
   14960:	sub	sp, fp, #4
   14964:	pop	{fp, pc}

00014968 <flatcc_builder_exit_user_frame@@Base>:
   14968:	push	{fp, lr}
   1496c:	add	fp, sp, #4
   14970:	sub	sp, sp, #16
   14974:	str	r0, [fp, #-16]
   14978:	ldr	r3, [fp, #-16]
   1497c:	ldr	r3, [r3, #224]	; 0xe0
   14980:	cmp	r3, #0
   14984:	bne	149a8 <flatcc_builder_exit_user_frame@@Base+0x40>
   14988:	ldr	r3, [pc, #104]	; 149f8 <flatcc_builder_exit_user_frame@@Base+0x90>
   1498c:	add	r3, pc, r3
   14990:	ldr	r2, [pc, #100]	; 149fc <flatcc_builder_exit_user_frame@@Base+0x94>
   14994:	ldr	r1, [pc, #100]	; 14a00 <flatcc_builder_exit_user_frame@@Base+0x98>
   14998:	add	r1, pc, r1
   1499c:	ldr	r0, [pc, #96]	; 14a04 <flatcc_builder_exit_user_frame@@Base+0x9c>
   149a0:	add	r0, pc, r0
   149a4:	bl	120b4 <__assert_fail@plt>
   149a8:	ldr	r3, [fp, #-16]
   149ac:	ldr	r2, [r3, #108]	; 0x6c
   149b0:	ldr	r3, [fp, #-16]
   149b4:	ldr	r3, [r3, #224]	; 0xe0
   149b8:	add	r3, r2, r3
   149bc:	str	r3, [fp, #-8]
   149c0:	ldr	r3, [fp, #-16]
   149c4:	ldr	r3, [r3, #224]	; 0xe0
   149c8:	sub	r2, r3, #4
   149cc:	ldr	r3, [fp, #-16]
   149d0:	str	r2, [r3, #228]	; 0xe4
   149d4:	ldr	r3, [fp, #-8]
   149d8:	ldr	r2, [r3, #-4]
   149dc:	ldr	r3, [fp, #-16]
   149e0:	str	r2, [r3, #224]	; 0xe0
   149e4:	ldr	r3, [fp, #-16]
   149e8:	ldr	r3, [r3, #224]	; 0xe0
   149ec:	mov	r0, r3
   149f0:	sub	sp, fp, #4
   149f4:	pop	{fp, pc}
   149f8:	andeq	r6, r0, r8, ror #12
   149fc:	andeq	r0, r0, lr, lsl r2
   14a00:	strdeq	r6, [r0], -ip
   14a04:	andeq	r6, r0, ip, ror r2

00014a08 <flatcc_builder_exit_user_frame_at@@Base>:
   14a08:	push	{fp, lr}
   14a0c:	add	fp, sp, #4
   14a10:	sub	sp, sp, #8
   14a14:	str	r0, [fp, #-8]
   14a18:	str	r1, [fp, #-12]
   14a1c:	ldr	r3, [fp, #-8]
   14a20:	ldr	r2, [r3, #224]	; 0xe0
   14a24:	ldr	r3, [fp, #-12]
   14a28:	cmp	r2, r3
   14a2c:	bcs	14a50 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14a30:	ldr	r3, [pc, #60]	; 14a74 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   14a34:	add	r3, pc, r3
   14a38:	ldr	r2, [pc, #56]	; 14a78 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   14a3c:	ldr	r1, [pc, #56]	; 14a7c <flatcc_builder_exit_user_frame_at@@Base+0x74>
   14a40:	add	r1, pc, r1
   14a44:	ldr	r0, [pc, #52]	; 14a80 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14a48:	add	r0, pc, r0
   14a4c:	bl	120b4 <__assert_fail@plt>
   14a50:	ldr	r3, [fp, #-8]
   14a54:	ldr	r2, [fp, #-12]
   14a58:	str	r2, [r3, #224]	; 0xe0
   14a5c:	ldr	r0, [fp, #-8]
   14a60:	bl	14968 <flatcc_builder_exit_user_frame@@Base>
   14a64:	mov	r3, r0
   14a68:	mov	r0, r3
   14a6c:	sub	sp, fp, #4
   14a70:	pop	{fp, pc}
   14a74:	andeq	r6, r0, r0, ror #11
   14a78:	andeq	r0, r0, r7, lsr #4
   14a7c:	andeq	r6, r0, r4, asr r1
   14a80:	strdeq	r6, [r0], -r0

00014a84 <flatcc_builder_get_current_user_frame@@Base>:
   14a84:	push	{fp}		; (str fp, [sp, #-4]!)
   14a88:	add	fp, sp, #0
   14a8c:	sub	sp, sp, #12
   14a90:	str	r0, [fp, #-8]
   14a94:	ldr	r3, [fp, #-8]
   14a98:	ldr	r3, [r3, #224]	; 0xe0
   14a9c:	mov	r0, r3
   14aa0:	add	sp, fp, #0
   14aa4:	pop	{fp}		; (ldr fp, [sp], #4)
   14aa8:	bx	lr

00014aac <flatcc_builder_get_user_frame_ptr@@Base>:
   14aac:	push	{fp}		; (str fp, [sp, #-4]!)
   14ab0:	add	fp, sp, #0
   14ab4:	sub	sp, sp, #12
   14ab8:	str	r0, [fp, #-8]
   14abc:	str	r1, [fp, #-12]
   14ac0:	ldr	r3, [fp, #-8]
   14ac4:	ldr	r2, [r3, #108]	; 0x6c
   14ac8:	ldr	r3, [fp, #-12]
   14acc:	add	r3, r2, r3
   14ad0:	mov	r0, r3
   14ad4:	add	sp, fp, #0
   14ad8:	pop	{fp}		; (ldr fp, [sp], #4)
   14adc:	bx	lr
   14ae0:	push	{fp, lr}
   14ae4:	add	fp, sp, #4
   14ae8:	sub	sp, sp, #16
   14aec:	str	r0, [fp, #-8]
   14af0:	mov	r3, r1
   14af4:	strh	r3, [fp, #-10]
   14af8:	ldr	r3, [fp, #-8]
   14afc:	ldr	r3, [r3, #156]	; 0x9c
   14b00:	add	r2, r3, #1
   14b04:	ldr	r3, [fp, #-8]
   14b08:	str	r2, [r3, #156]	; 0x9c
   14b0c:	ldr	r3, [fp, #-8]
   14b10:	ldr	r2, [r3, #156]	; 0x9c
   14b14:	ldr	r3, [fp, #-8]
   14b18:	ldr	r3, [r3, #160]	; 0xa0
   14b1c:	cmp	r2, r3
   14b20:	ble	14c10 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   14b24:	ldr	r3, [fp, #-8]
   14b28:	ldr	r3, [r3, #176]	; 0xb0
   14b2c:	cmp	r3, #0
   14b30:	ble	14b54 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   14b34:	ldr	r3, [fp, #-8]
   14b38:	ldr	r2, [r3, #156]	; 0x9c
   14b3c:	ldr	r3, [fp, #-8]
   14b40:	ldr	r3, [r3, #176]	; 0xb0
   14b44:	cmp	r2, r3
   14b48:	ble	14b54 <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   14b4c:	mvn	r3, #0
   14b50:	b	14cb0 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   14b54:	ldr	r3, [fp, #-8]
   14b58:	ldr	r3, [r3, #156]	; 0x9c
   14b5c:	sub	r3, r3, #1
   14b60:	mov	r2, r3
   14b64:	mov	r3, r2
   14b68:	lsl	r3, r3, #3
   14b6c:	add	r3, r3, r2
   14b70:	lsl	r3, r3, #2
   14b74:	mov	r2, r3
   14b78:	mov	r3, #0
   14b7c:	str	r3, [sp]
   14b80:	mov	r3, #36	; 0x24
   14b84:	mov	r1, #4
   14b88:	ldr	r0, [fp, #-8]
   14b8c:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   14b90:	mov	r2, r0
   14b94:	ldr	r3, [fp, #-8]
   14b98:	str	r2, [r3, #32]
   14b9c:	ldr	r3, [fp, #-8]
   14ba0:	ldr	r3, [r3, #32]
   14ba4:	cmp	r3, #0
   14ba8:	bne	14bb4 <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   14bac:	mvn	r3, #0
   14bb0:	b	14cb0 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   14bb4:	ldr	r3, [fp, #-8]
   14bb8:	ldr	r3, [r3, #88]	; 0x58
   14bbc:	ldr	r2, [pc, #248]	; 14cbc <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   14bc0:	umull	r2, r3, r2, r3
   14bc4:	lsr	r3, r3, #3
   14bc8:	mov	r2, r3
   14bcc:	ldr	r3, [fp, #-8]
   14bd0:	str	r2, [r3, #160]	; 0xa0
   14bd4:	ldr	r3, [fp, #-8]
   14bd8:	ldr	r3, [r3, #176]	; 0xb0
   14bdc:	cmp	r3, #0
   14be0:	ble	14c24 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14be4:	ldr	r3, [fp, #-8]
   14be8:	ldr	r2, [r3, #176]	; 0xb0
   14bec:	ldr	r3, [fp, #-8]
   14bf0:	ldr	r3, [r3, #160]	; 0xa0
   14bf4:	cmp	r2, r3
   14bf8:	bge	14c24 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14bfc:	ldr	r3, [fp, #-8]
   14c00:	ldr	r2, [r3, #176]	; 0xb0
   14c04:	ldr	r3, [fp, #-8]
   14c08:	str	r2, [r3, #160]	; 0xa0
   14c0c:	b	14c24 <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   14c10:	ldr	r3, [fp, #-8]
   14c14:	ldr	r3, [r3, #32]
   14c18:	add	r2, r3, #36	; 0x24
   14c1c:	ldr	r3, [fp, #-8]
   14c20:	str	r2, [r3, #32]
   14c24:	ldr	r3, [fp, #-8]
   14c28:	ldr	r3, [r3, #32]
   14c2c:	ldr	r2, [fp, #-8]
   14c30:	ldr	r2, [r2, #20]
   14c34:	str	r2, [r3, #8]
   14c38:	ldr	r3, [fp, #-8]
   14c3c:	ldr	r3, [r3, #32]
   14c40:	ldr	r2, [fp, #-8]
   14c44:	ldrh	r2, [r2, #130]	; 0x82
   14c48:	strh	r2, [r3, #12]
   14c4c:	ldr	r3, [fp, #-8]
   14c50:	ldrh	r2, [fp, #-10]
   14c54:	strh	r2, [r3, #130]	; 0x82
   14c58:	ldr	r3, [fp, #-8]
   14c5c:	ldr	r3, [r3, #32]
   14c60:	ldr	r2, [fp, #-8]
   14c64:	ldr	r2, [r2, #28]
   14c68:	str	r2, [r3]
   14c6c:	ldr	r3, [fp, #-8]
   14c70:	ldr	r3, [r3, #32]
   14c74:	mvn	r2, #3
   14c78:	str	r2, [r3, #4]
   14c7c:	ldr	r3, [fp, #-8]
   14c80:	ldr	r2, [r3, #28]
   14c84:	ldr	r3, [fp, #-8]
   14c88:	ldr	r3, [r3, #20]
   14c8c:	add	r3, r2, r3
   14c90:	add	r3, r3, #7
   14c94:	bic	r2, r3, #7
   14c98:	ldr	r3, [fp, #-8]
   14c9c:	str	r2, [r3, #28]
   14ca0:	ldr	r3, [fp, #-8]
   14ca4:	mov	r2, #0
   14ca8:	str	r2, [r3, #20]
   14cac:	mov	r3, #0
   14cb0:	mov	r0, r3
   14cb4:	sub	sp, fp, #4
   14cb8:	pop	{fp, pc}
   14cbc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   14cc0:	push	{fp, lr}
   14cc4:	add	fp, sp, #4
   14cc8:	sub	sp, sp, #8
   14ccc:	str	r0, [fp, #-8]
   14cd0:	ldr	r3, [fp, #-8]
   14cd4:	ldr	r0, [r3, #16]
   14cd8:	ldr	r3, [fp, #-8]
   14cdc:	ldr	r3, [r3, #20]
   14ce0:	mov	r2, r3
   14ce4:	mov	r1, #0
   14ce8:	bl	12078 <memset@plt>
   14cec:	ldr	r3, [fp, #-8]
   14cf0:	ldr	r3, [r3, #32]
   14cf4:	ldr	r2, [r3, #8]
   14cf8:	ldr	r3, [fp, #-8]
   14cfc:	str	r2, [r3, #20]
   14d00:	ldr	r3, [fp, #-8]
   14d04:	ldr	r3, [r3, #32]
   14d08:	ldr	r2, [r3]
   14d0c:	ldr	r3, [fp, #-8]
   14d10:	str	r2, [r3, #28]
   14d14:	ldr	r3, [fp, #-8]
   14d18:	ldr	r3, [r3, #32]
   14d1c:	ldr	r3, [r3, #4]
   14d20:	mov	r1, r3
   14d24:	ldr	r0, [fp, #-8]
   14d28:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   14d2c:	ldr	r3, [fp, #-8]
   14d30:	ldrh	r3, [r3, #130]	; 0x82
   14d34:	mov	r1, r3
   14d38:	ldr	r0, [fp, #-8]
   14d3c:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   14d40:	ldr	r3, [fp, #-8]
   14d44:	ldr	r3, [r3, #32]
   14d48:	ldrh	r2, [r3, #12]
   14d4c:	ldr	r3, [fp, #-8]
   14d50:	strh	r2, [r3, #130]	; 0x82
   14d54:	ldr	r3, [fp, #-8]
   14d58:	ldr	r3, [r3, #32]
   14d5c:	sub	r2, r3, #36	; 0x24
   14d60:	ldr	r3, [fp, #-8]
   14d64:	str	r2, [r3, #32]
   14d68:	ldr	r3, [fp, #-8]
   14d6c:	ldr	r3, [r3, #156]	; 0x9c
   14d70:	sub	r2, r3, #1
   14d74:	ldr	r3, [fp, #-8]
   14d78:	str	r2, [r3, #156]	; 0x9c
   14d7c:	nop			; (mov r0, r0)
   14d80:	sub	sp, fp, #4
   14d84:	pop	{fp, pc}
   14d88:	push	{fp}		; (str fp, [sp, #-4]!)
   14d8c:	add	fp, sp, #0
   14d90:	sub	sp, sp, #20
   14d94:	str	r0, [fp, #-8]
   14d98:	str	r1, [fp, #-12]
   14d9c:	mov	r3, r2
   14da0:	strh	r3, [fp, #-14]
   14da4:	ldr	r3, [fp, #-8]
   14da8:	ldr	r3, [r3, #136]	; 0x88
   14dac:	mov	r2, r3
   14db0:	ldr	r3, [fp, #-12]
   14db4:	sub	r3, r2, r3
   14db8:	ldrh	r2, [fp, #-14]
   14dbc:	sub	r2, r2, #1
   14dc0:	and	r3, r3, r2
   14dc4:	mov	r0, r3
   14dc8:	add	sp, fp, #0
   14dcc:	pop	{fp}		; (ldr fp, [sp], #4)
   14dd0:	bx	lr
   14dd4:	push	{fp}		; (str fp, [sp, #-4]!)
   14dd8:	add	fp, sp, #0
   14ddc:	sub	sp, sp, #12
   14de0:	str	r0, [fp, #-8]
   14de4:	mov	r3, r1
   14de8:	strh	r3, [fp, #-10]
   14dec:	ldr	r3, [fp, #-8]
   14df0:	ldr	r2, [r3, #140]	; 0x8c
   14df4:	ldrh	r3, [fp, #-10]
   14df8:	sub	r3, r3, #1
   14dfc:	and	r3, r3, r2
   14e00:	mov	r0, r3
   14e04:	add	sp, fp, #0
   14e08:	pop	{fp}		; (ldr fp, [sp], #4)
   14e0c:	bx	lr
   14e10:	push	{r4, fp, lr}
   14e14:	add	fp, sp, #8
   14e18:	sub	sp, sp, #28
   14e1c:	str	r0, [fp, #-24]	; 0xffffffe8
   14e20:	str	r1, [fp, #-28]	; 0xffffffe4
   14e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e28:	ldr	r3, [r3, #136]	; 0x88
   14e2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14e30:	ldr	r2, [r2]
   14e34:	sub	r3, r3, r2
   14e38:	str	r3, [fp, #-16]
   14e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e40:	ldr	r2, [r3, #136]	; 0x88
   14e44:	ldr	r3, [fp, #-16]
   14e48:	cmp	r2, r3
   14e4c:	bgt	14e70 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   14e50:	ldr	r3, [pc, #152]	; 14ef0 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   14e54:	add	r3, pc, r3
   14e58:	ldr	r2, [pc, #148]	; 14ef4 <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   14e5c:	ldr	r1, [pc, #148]	; 14ef8 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   14e60:	add	r1, pc, r1
   14e64:	ldr	r0, [pc, #144]	; 14efc <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   14e68:	add	r0, pc, r0
   14e6c:	bl	120b4 <__assert_fail@plt>
   14e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e74:	ldr	r4, [r3, #44]	; 0x2c
   14e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e7c:	ldr	r0, [r3, #36]	; 0x24
   14e80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e84:	add	r1, r3, #8
   14e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e8c:	ldr	r2, [r3, #4]
   14e90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e94:	ldr	r3, [r3]
   14e98:	str	r3, [sp]
   14e9c:	ldr	r3, [fp, #-16]
   14ea0:	blx	r4
   14ea4:	mov	r3, r0
   14ea8:	cmp	r3, #0
   14eac:	beq	14ed0 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   14eb0:	ldr	r3, [pc, #72]	; 14f00 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   14eb4:	add	r3, pc, r3
   14eb8:	ldr	r2, [pc, #68]	; 14f04 <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   14ebc:	ldr	r1, [pc, #68]	; 14f08 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   14ec0:	add	r1, pc, r1
   14ec4:	ldr	r0, [pc, #64]	; 14f0c <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   14ec8:	add	r0, pc, r0
   14ecc:	bl	120b4 <__assert_fail@plt>
   14ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ed4:	ldr	r2, [fp, #-16]
   14ed8:	str	r2, [r3, #136]	; 0x88
   14edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ee0:	ldr	r3, [r3, #136]	; 0x88
   14ee4:	mov	r0, r3
   14ee8:	sub	sp, fp, #8
   14eec:	pop	{r4, fp, pc}
   14ef0:	andeq	r6, r0, r0, lsl #4
   14ef4:	andeq	r0, r0, r7, lsl #5
   14ef8:	andeq	r5, r0, r4, lsr sp
   14efc:	andeq	r5, r0, ip, lsl #27
   14f00:	andeq	r6, r0, r0, lsr #3
   14f04:	andeq	r0, r0, fp, lsl #5
   14f08:	ldrdeq	r5, [r0], -r4
   14f0c:	andeq	r5, r0, ip, lsr #26
   14f10:	push	{r4, fp, lr}
   14f14:	add	fp, sp, #8
   14f18:	sub	sp, sp, #28
   14f1c:	str	r0, [fp, #-24]	; 0xffffffe8
   14f20:	str	r1, [fp, #-28]	; 0xffffffe4
   14f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f28:	ldr	r3, [r3, #140]	; 0x8c
   14f2c:	str	r3, [fp, #-16]
   14f30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f34:	ldr	r3, [r3]
   14f38:	mov	r2, r3
   14f3c:	ldr	r3, [fp, #-16]
   14f40:	add	r2, r2, r3
   14f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f48:	str	r2, [r3, #140]	; 0x8c
   14f4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f50:	ldr	r2, [r3, #140]	; 0x8c
   14f54:	ldr	r3, [fp, #-16]
   14f58:	cmp	r2, r3
   14f5c:	bge	14f80 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   14f60:	ldr	r3, [pc, #140]	; 14ff4 <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   14f64:	add	r3, pc, r3
   14f68:	ldr	r2, [pc, #136]	; 14ff8 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   14f6c:	ldr	r1, [pc, #136]	; 14ffc <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   14f70:	add	r1, pc, r1
   14f74:	ldr	r0, [pc, #132]	; 15000 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   14f78:	add	r0, pc, r0
   14f7c:	bl	120b4 <__assert_fail@plt>
   14f80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f84:	ldr	r4, [r3, #44]	; 0x2c
   14f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f8c:	ldr	r0, [r3, #36]	; 0x24
   14f90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f94:	add	r1, r3, #8
   14f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f9c:	ldr	r2, [r3, #4]
   14fa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fa4:	ldr	r3, [r3]
   14fa8:	str	r3, [sp]
   14fac:	ldr	r3, [fp, #-16]
   14fb0:	blx	r4
   14fb4:	mov	r3, r0
   14fb8:	cmp	r3, #0
   14fbc:	beq	14fe0 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   14fc0:	ldr	r3, [pc, #60]	; 15004 <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   14fc4:	add	r3, pc, r3
   14fc8:	ldr	r2, [pc, #56]	; 15008 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   14fcc:	ldr	r1, [pc, #56]	; 1500c <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   14fd0:	add	r1, pc, r1
   14fd4:	ldr	r0, [pc, #52]	; 15010 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   14fd8:	add	r0, pc, r0
   14fdc:	bl	120b4 <__assert_fail@plt>
   14fe0:	ldr	r3, [fp, #-16]
   14fe4:	add	r3, r3, #1
   14fe8:	mov	r0, r3
   14fec:	sub	sp, fp, #8
   14ff0:	pop	{r4, fp, pc}
   14ff4:	andeq	r6, r0, r4, ror #1
   14ff8:	andeq	r0, r0, r1, lsr #5
   14ffc:	andeq	r5, r0, r4, lsr #24
   15000:	andeq	r5, r0, ip, ror ip
   15004:	andeq	r6, r0, r4, lsl #1
   15008:	andeq	r0, r0, r5, lsr #5
   1500c:	andeq	r5, r0, r4, asr #23
   15010:	andeq	r5, r0, ip, lsl ip
   15014:	push	{r4, fp, lr}
   15018:	add	fp, sp, #8
   1501c:	sub	sp, sp, #100	; 0x64
   15020:	str	r0, [fp, #-96]	; 0xffffffa0
   15024:	str	r1, [fp, #-100]	; 0xffffff9c
   15028:	str	r3, [fp, #-108]	; 0xffffff94
   1502c:	strh	r2, [fp, #-102]	; 0xffffff9a
   15030:	ldr	r4, [pc, #320]	; 15178 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   15034:	add	r4, pc, r4
   15038:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   1503c:	cmp	r3, #0
   15040:	bne	15068 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   15044:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15048:	ldrh	r3, [r3, #132]	; 0x84
   1504c:	cmp	r3, #0
   15050:	beq	15060 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   15054:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15058:	ldrh	r3, [r3, #132]	; 0x84
   1505c:	b	1506c <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   15060:	mov	r3, #1
   15064:	b	1506c <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   15068:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   1506c:	strh	r3, [fp, #-102]	; 0xffffff9a
   15070:	mov	r1, #4
   15074:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15078:	bl	14794 <flatcc_builder_clear@@Base+0xf8>
   1507c:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15080:	mov	r1, r3
   15084:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15088:	bl	14794 <flatcc_builder_clear@@Base+0xf8>
   1508c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15090:	cmp	r3, #0
   15094:	bne	15168 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15098:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   1509c:	mov	r1, r3
   150a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   150a4:	bl	14dd4 <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   150a8:	str	r0, [fp, #-16]
   150ac:	ldr	r3, [fp, #-16]
   150b0:	cmp	r3, #0
   150b4:	beq	15168 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   150b8:	mov	r3, #0
   150bc:	str	r3, [fp, #-88]	; 0xffffffa8
   150c0:	mov	r3, #0
   150c4:	str	r3, [fp, #-84]	; 0xffffffac
   150c8:	ldr	r3, [fp, #-16]
   150cc:	cmp	r3, #0
   150d0:	beq	1512c <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   150d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150d8:	ldr	r3, [fp, #-16]
   150dc:	add	r3, r2, r3
   150e0:	str	r3, [fp, #-88]	; 0xffffffa8
   150e4:	ldr	r3, [fp, #-84]	; 0xffffffac
   150e8:	add	r3, r3, #1
   150ec:	lsl	r3, r3, #3
   150f0:	sub	r2, fp, #12
   150f4:	add	r3, r2, r3
   150f8:	ldr	r2, [pc, #124]	; 1517c <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   150fc:	ldr	r2, [r4, r2]
   15100:	str	r2, [r3, #-76]	; 0xffffffb4
   15104:	ldr	r3, [fp, #-84]	; 0xffffffac
   15108:	add	r3, r3, #1
   1510c:	lsl	r3, r3, #3
   15110:	sub	r2, fp, #12
   15114:	add	r3, r2, r3
   15118:	ldr	r2, [fp, #-16]
   1511c:	str	r2, [r3, #-72]	; 0xffffffb8
   15120:	ldr	r3, [fp, #-84]	; 0xffffffac
   15124:	add	r3, r3, #1
   15128:	str	r3, [fp, #-84]	; 0xffffffac
   1512c:	sub	r3, fp, #88	; 0x58
   15130:	mov	r1, r3
   15134:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15138:	bl	14f10 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   1513c:	mov	r3, r0
   15140:	cmp	r3, #0
   15144:	bne	15168 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   15148:	ldr	r3, [pc, #48]	; 15180 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   1514c:	add	r3, pc, r3
   15150:	ldr	r2, [pc, #44]	; 15184 <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   15154:	ldr	r1, [pc, #44]	; 15188 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   15158:	add	r1, pc, r1
   1515c:	ldr	r0, [pc, #40]	; 1518c <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   15160:	add	r0, pc, r0
   15164:	bl	120b4 <__assert_fail@plt>
   15168:	mov	r3, #0
   1516c:	mov	r0, r3
   15170:	sub	sp, fp, #8
   15174:	pop	{r4, fp, pc}
   15178:	andeq	r6, r1, r4, asr #31
   1517c:	andeq	r0, r0, r8, asr r0
   15180:	andeq	r5, r0, ip, ror #29
   15184:			; <UNDEFINED> instruction: 0x000002be
   15188:	andeq	r5, r0, ip, lsr sl
   1518c:	muleq	r0, r4, sl

00015190 <flatcc_builder_embed_buffer@@Base>:
   15190:	push	{r4, fp, lr}
   15194:	add	fp, sp, #8
   15198:	sub	sp, sp, #108	; 0x6c
   1519c:	str	r0, [fp, #-104]	; 0xffffff98
   151a0:	str	r2, [fp, #-112]	; 0xffffff90
   151a4:	str	r3, [fp, #-116]	; 0xffffff8c
   151a8:	strh	r1, [fp, #-106]	; 0xffffff96
   151ac:	ldr	r4, [pc, #492]	; 153a0 <flatcc_builder_embed_buffer@@Base+0x210>
   151b0:	add	r4, pc, r4
   151b4:	ldr	r3, [fp, #8]
   151b8:	and	r3, r3, #2
   151bc:	str	r3, [fp, #-16]
   151c0:	ldr	r3, [fp, #-104]	; 0xffffff98
   151c4:	ldr	r3, [r3, #152]	; 0x98
   151c8:	cmp	r3, #0
   151cc:	movne	r3, #1
   151d0:	moveq	r3, #0
   151d4:	uxtb	r3, r3
   151d8:	ldrh	r2, [fp, #-106]	; 0xffffff96
   151dc:	add	r1, fp, #4
   151e0:	ldr	r0, [fp, #-104]	; 0xffffff98
   151e4:	bl	15014 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   151e8:	mov	r3, r0
   151ec:	cmp	r3, #0
   151f0:	beq	151fc <flatcc_builder_embed_buffer@@Base+0x6c>
   151f4:	mov	r3, #0
   151f8:	b	15394 <flatcc_builder_embed_buffer@@Base+0x204>
   151fc:	ldr	r3, [fp, #-16]
   15200:	cmp	r3, #0
   15204:	beq	15210 <flatcc_builder_embed_buffer@@Base+0x80>
   15208:	mov	r2, #4
   1520c:	b	15214 <flatcc_builder_embed_buffer@@Base+0x84>
   15210:	mov	r2, #0
   15214:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15218:	add	r3, r2, r3
   1521c:	ldrh	r2, [fp, #4]
   15220:	mov	r1, r3
   15224:	ldr	r0, [fp, #-104]	; 0xffffff98
   15228:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1522c:	str	r0, [fp, #-20]	; 0xffffffec
   15230:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15234:	ldr	r3, [fp, #-20]	; 0xffffffec
   15238:	add	r3, r2, r3
   1523c:	mov	r0, r3
   15240:	bl	1374c <main@@Base+0xd8>
   15244:	mov	r3, r0
   15248:	str	r3, [fp, #-24]	; 0xffffffe8
   1524c:	mov	r3, #0
   15250:	str	r3, [fp, #-96]	; 0xffffffa0
   15254:	mov	r3, #0
   15258:	str	r3, [fp, #-92]	; 0xffffffa4
   1525c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15260:	ldr	r3, [r3, #152]	; 0x98
   15264:	cmp	r3, #0
   15268:	beq	152bc <flatcc_builder_embed_buffer@@Base+0x12c>
   1526c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15270:	add	r3, r3, #4
   15274:	str	r3, [fp, #-96]	; 0xffffffa0
   15278:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1527c:	add	r3, r3, #1
   15280:	lsl	r3, r3, #3
   15284:	sub	r2, fp, #12
   15288:	add	r3, r2, r3
   1528c:	sub	r2, fp, #24
   15290:	str	r2, [r3, #-84]	; 0xffffffac
   15294:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15298:	add	r3, r3, #1
   1529c:	lsl	r3, r3, #3
   152a0:	sub	r2, fp, #12
   152a4:	add	r3, r2, r3
   152a8:	mov	r2, #4
   152ac:	str	r2, [r3, #-80]	; 0xffffffb0
   152b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152b4:	add	r3, r3, #1
   152b8:	str	r3, [fp, #-92]	; 0xffffffa4
   152bc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   152c0:	cmp	r3, #0
   152c4:	beq	1531c <flatcc_builder_embed_buffer@@Base+0x18c>
   152c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   152cc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   152d0:	add	r3, r2, r3
   152d4:	str	r3, [fp, #-96]	; 0xffffffa0
   152d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152dc:	add	r3, r3, #1
   152e0:	lsl	r3, r3, #3
   152e4:	sub	r2, fp, #12
   152e8:	add	r3, r2, r3
   152ec:	ldr	r2, [fp, #-112]	; 0xffffff90
   152f0:	str	r2, [r3, #-84]	; 0xffffffac
   152f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152f8:	add	r3, r3, #1
   152fc:	lsl	r3, r3, #3
   15300:	sub	r2, fp, #12
   15304:	add	r3, r2, r3
   15308:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1530c:	str	r2, [r3, #-80]	; 0xffffffb0
   15310:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15314:	add	r3, r3, #1
   15318:	str	r3, [fp, #-92]	; 0xffffffa4
   1531c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15320:	cmp	r3, #0
   15324:	beq	15380 <flatcc_builder_embed_buffer@@Base+0x1f0>
   15328:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1532c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15330:	add	r3, r2, r3
   15334:	str	r3, [fp, #-96]	; 0xffffffa0
   15338:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1533c:	add	r3, r3, #1
   15340:	lsl	r3, r3, #3
   15344:	sub	r2, fp, #12
   15348:	add	r3, r2, r3
   1534c:	ldr	r2, [pc, #80]	; 153a4 <flatcc_builder_embed_buffer@@Base+0x214>
   15350:	ldr	r2, [r4, r2]
   15354:	str	r2, [r3, #-84]	; 0xffffffac
   15358:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1535c:	add	r3, r3, #1
   15360:	lsl	r3, r3, #3
   15364:	sub	r2, fp, #12
   15368:	add	r3, r2, r3
   1536c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15370:	str	r2, [r3, #-80]	; 0xffffffb0
   15374:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15378:	add	r3, r3, #1
   1537c:	str	r3, [fp, #-92]	; 0xffffffa4
   15380:	sub	r3, fp, #96	; 0x60
   15384:	mov	r1, r3
   15388:	ldr	r0, [fp, #-104]	; 0xffffff98
   1538c:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15390:	mov	r3, r0
   15394:	mov	r0, r3
   15398:	sub	sp, fp, #8
   1539c:	pop	{r4, fp, pc}
   153a0:	andeq	r6, r1, r8, asr #28
   153a4:	andeq	r0, r0, r8, asr r0

000153a8 <flatcc_builder_create_buffer@@Base>:
   153a8:	push	{r4, fp, lr}
   153ac:	add	fp, sp, #8
   153b0:	sub	sp, sp, #132	; 0x84
   153b4:	str	r0, [fp, #-128]	; 0xffffff80
   153b8:	str	r1, [fp, #-132]	; 0xffffff7c
   153bc:	str	r3, [fp, #-140]	; 0xffffff74
   153c0:	strh	r2, [fp, #-134]	; 0xffffff7a
   153c4:	ldr	r4, [pc, #932]	; 15770 <flatcc_builder_create_buffer@@Base+0x3c8>
   153c8:	add	r4, pc, r4
   153cc:	mov	r3, #0
   153d0:	str	r3, [fp, #-16]
   153d4:	mov	r3, #0
   153d8:	str	r3, [fp, #-120]	; 0xffffff88
   153dc:	ldr	r3, [fp, #8]
   153e0:	and	r3, r3, #1
   153e4:	cmp	r3, #0
   153e8:	movne	r3, #1
   153ec:	moveq	r3, #0
   153f0:	uxtb	r3, r3
   153f4:	str	r3, [fp, #-20]	; 0xffffffec
   153f8:	ldr	r3, [fp, #8]
   153fc:	and	r3, r3, #2
   15400:	cmp	r3, #0
   15404:	movne	r3, #1
   15408:	moveq	r3, #0
   1540c:	uxtb	r3, r3
   15410:	str	r3, [fp, #-24]	; 0xffffffe8
   15414:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   15418:	ldr	r3, [fp, #-20]	; 0xffffffec
   1541c:	add	r1, fp, #4
   15420:	ldr	r0, [fp, #-128]	; 0xffffff80
   15424:	bl	15014 <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   15428:	mov	r3, r0
   1542c:	cmp	r3, #0
   15430:	beq	1543c <flatcc_builder_create_buffer@@Base+0x94>
   15434:	mov	r3, #0
   15438:	b	15764 <flatcc_builder_create_buffer@@Base+0x3bc>
   1543c:	ldrh	r3, [fp, #4]
   15440:	mov	r1, r3
   15444:	ldr	r0, [fp, #-128]	; 0xffffff80
   15448:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   1544c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15450:	cmp	r3, #0
   15454:	beq	1548c <flatcc_builder_create_buffer@@Base+0xe4>
   15458:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1545c:	ldr	r3, [r3]
   15460:	str	r3, [fp, #-120]	; 0xffffff88
   15464:	ldr	r3, [fp, #-120]	; 0xffffff88
   15468:	mov	r0, r3
   1546c:	bl	13798 <main@@Base+0x124>
   15470:	mov	r3, r0
   15474:	str	r3, [fp, #-120]	; 0xffffff88
   15478:	ldr	r3, [fp, #-120]	; 0xffffff88
   1547c:	mov	r0, r3
   15480:	bl	1374c <main@@Base+0xd8>
   15484:	mov	r3, r0
   15488:	str	r3, [fp, #-120]	; 0xffffff88
   1548c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15490:	cmp	r3, #0
   15494:	beq	154a0 <flatcc_builder_create_buffer@@Base+0xf8>
   15498:	mov	r3, #4
   1549c:	b	154a4 <flatcc_builder_create_buffer@@Base+0xfc>
   154a0:	mov	r3, #0
   154a4:	str	r3, [fp, #-16]
   154a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154ac:	cmp	r3, #0
   154b0:	beq	154bc <flatcc_builder_create_buffer@@Base+0x114>
   154b4:	mov	r2, #4
   154b8:	b	154c0 <flatcc_builder_create_buffer@@Base+0x118>
   154bc:	mov	r2, #0
   154c0:	ldr	r3, [fp, #-16]
   154c4:	add	r3, r2, r3
   154c8:	add	r3, r3, #4
   154cc:	ldrh	r2, [fp, #4]
   154d0:	mov	r1, r3
   154d4:	ldr	r0, [fp, #-128]	; 0xffffff80
   154d8:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   154dc:	str	r0, [fp, #-28]	; 0xffffffe4
   154e0:	mov	r3, #0
   154e4:	str	r3, [fp, #-116]	; 0xffffff8c
   154e8:	mov	r3, #0
   154ec:	str	r3, [fp, #-112]	; 0xffffff90
   154f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   154f4:	cmp	r3, #0
   154f8:	bne	15508 <flatcc_builder_create_buffer@@Base+0x160>
   154fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15500:	cmp	r3, #0
   15504:	beq	15558 <flatcc_builder_create_buffer@@Base+0x1b0>
   15508:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1550c:	add	r3, r3, #4
   15510:	str	r3, [fp, #-116]	; 0xffffff8c
   15514:	ldr	r3, [fp, #-112]	; 0xffffff90
   15518:	add	r3, r3, #1
   1551c:	lsl	r3, r3, #3
   15520:	sub	r2, fp, #12
   15524:	add	r3, r2, r3
   15528:	sub	r2, fp, #44	; 0x2c
   1552c:	str	r2, [r3, #-104]	; 0xffffff98
   15530:	ldr	r3, [fp, #-112]	; 0xffffff90
   15534:	add	r3, r3, #1
   15538:	lsl	r3, r3, #3
   1553c:	sub	r2, fp, #12
   15540:	add	r3, r2, r3
   15544:	mov	r2, #4
   15548:	str	r2, [r3, #-100]	; 0xffffff9c
   1554c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15550:	add	r3, r3, #1
   15554:	str	r3, [fp, #-112]	; 0xffffff90
   15558:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1555c:	add	r3, r3, #4
   15560:	str	r3, [fp, #-116]	; 0xffffff8c
   15564:	ldr	r3, [fp, #-112]	; 0xffffff90
   15568:	add	r3, r3, #1
   1556c:	lsl	r3, r3, #3
   15570:	sub	r2, fp, #12
   15574:	add	r3, r2, r3
   15578:	sub	r2, fp, #40	; 0x28
   1557c:	str	r2, [r3, #-104]	; 0xffffff98
   15580:	ldr	r3, [fp, #-112]	; 0xffffff90
   15584:	add	r3, r3, #1
   15588:	lsl	r3, r3, #3
   1558c:	sub	r2, fp, #12
   15590:	add	r3, r2, r3
   15594:	mov	r2, #4
   15598:	str	r2, [r3, #-100]	; 0xffffff9c
   1559c:	ldr	r3, [fp, #-112]	; 0xffffff90
   155a0:	add	r3, r3, #1
   155a4:	str	r3, [fp, #-112]	; 0xffffff90
   155a8:	ldr	r3, [fp, #-16]
   155ac:	cmp	r3, #0
   155b0:	beq	15608 <flatcc_builder_create_buffer@@Base+0x260>
   155b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   155b8:	ldr	r3, [fp, #-16]
   155bc:	add	r3, r2, r3
   155c0:	str	r3, [fp, #-116]	; 0xffffff8c
   155c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   155c8:	add	r3, r3, #1
   155cc:	lsl	r3, r3, #3
   155d0:	sub	r2, fp, #12
   155d4:	add	r3, r2, r3
   155d8:	sub	r2, fp, #120	; 0x78
   155dc:	str	r2, [r3, #-104]	; 0xffffff98
   155e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   155e4:	add	r3, r3, #1
   155e8:	lsl	r3, r3, #3
   155ec:	sub	r2, fp, #12
   155f0:	add	r3, r2, r3
   155f4:	ldr	r2, [fp, #-16]
   155f8:	str	r2, [r3, #-100]	; 0xffffff9c
   155fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   15600:	add	r3, r3, #1
   15604:	str	r3, [fp, #-112]	; 0xffffff90
   15608:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1560c:	cmp	r3, #0
   15610:	beq	1566c <flatcc_builder_create_buffer@@Base+0x2c4>
   15614:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15618:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1561c:	add	r3, r2, r3
   15620:	str	r3, [fp, #-116]	; 0xffffff8c
   15624:	ldr	r3, [fp, #-112]	; 0xffffff90
   15628:	add	r3, r3, #1
   1562c:	lsl	r3, r3, #3
   15630:	sub	r2, fp, #12
   15634:	add	r3, r2, r3
   15638:	ldr	r2, [pc, #308]	; 15774 <flatcc_builder_create_buffer@@Base+0x3cc>
   1563c:	ldr	r2, [r4, r2]
   15640:	str	r2, [r3, #-104]	; 0xffffff98
   15644:	ldr	r3, [fp, #-112]	; 0xffffff90
   15648:	add	r3, r3, #1
   1564c:	lsl	r3, r3, #3
   15650:	sub	r2, fp, #12
   15654:	add	r3, r2, r3
   15658:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1565c:	str	r2, [r3, #-100]	; 0xffffff9c
   15660:	ldr	r3, [fp, #-112]	; 0xffffff90
   15664:	add	r3, r3, #1
   15668:	str	r3, [fp, #-112]	; 0xffffff90
   1566c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15670:	ldr	r3, [r3, #136]	; 0x88
   15674:	mov	r2, r3
   15678:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1567c:	sub	r2, r2, r3
   15680:	ldr	r3, [fp, #-20]	; 0xffffffec
   15684:	cmp	r3, #0
   15688:	bne	15698 <flatcc_builder_create_buffer@@Base+0x2f0>
   1568c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15690:	cmp	r3, #0
   15694:	beq	156a0 <flatcc_builder_create_buffer@@Base+0x2f8>
   15698:	mov	r3, #4
   1569c:	b	156a4 <flatcc_builder_create_buffer@@Base+0x2fc>
   156a0:	mov	r3, #0
   156a4:	add	r3, r2, r3
   156a8:	str	r3, [fp, #-32]	; 0xffffffe0
   156ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b0:	cmp	r3, #0
   156b4:	beq	156e0 <flatcc_builder_create_buffer@@Base+0x338>
   156b8:	ldr	r3, [fp, #-128]	; 0xffffff80
   156bc:	ldr	r3, [r3, #144]	; 0x90
   156c0:	mov	r2, r3
   156c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156c8:	sub	r3, r2, r3
   156cc:	mov	r0, r3
   156d0:	bl	1374c <main@@Base+0xd8>
   156d4:	mov	r3, r0
   156d8:	str	r3, [fp, #-44]	; 0xffffffd4
   156dc:	b	15704 <flatcc_builder_create_buffer@@Base+0x35c>
   156e0:	ldr	r3, [fp, #-128]	; 0xffffff80
   156e4:	ldr	r3, [r3, #140]	; 0x8c
   156e8:	mov	r2, r3
   156ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156f0:	sub	r3, r2, r3
   156f4:	mov	r0, r3
   156f8:	bl	1374c <main@@Base+0xd8>
   156fc:	mov	r3, r0
   15700:	str	r3, [fp, #-44]	; 0xffffffd4
   15704:	ldr	r2, [fp, #-140]	; 0xffffff74
   15708:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1570c:	sub	r3, r2, r3
   15710:	mov	r0, r3
   15714:	bl	1374c <main@@Base+0xd8>
   15718:	mov	r3, r0
   1571c:	str	r3, [fp, #-40]	; 0xffffffd8
   15720:	sub	r3, fp, #116	; 0x74
   15724:	mov	r1, r3
   15728:	ldr	r0, [fp, #-128]	; 0xffffff80
   1572c:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   15730:	str	r0, [fp, #-36]	; 0xffffffdc
   15734:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15738:	cmp	r3, #0
   1573c:	bne	15760 <flatcc_builder_create_buffer@@Base+0x3b8>
   15740:	ldr	r3, [pc, #48]	; 15778 <flatcc_builder_create_buffer@@Base+0x3d0>
   15744:	add	r3, pc, r3
   15748:	mov	r2, #772	; 0x304
   1574c:	ldr	r1, [pc, #40]	; 1577c <flatcc_builder_create_buffer@@Base+0x3d4>
   15750:	add	r1, pc, r1
   15754:	ldr	r0, [pc, #36]	; 15780 <flatcc_builder_create_buffer@@Base+0x3d8>
   15758:	add	r0, pc, r0
   1575c:	bl	120b4 <__assert_fail@plt>
   15760:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15764:	mov	r0, r3
   15768:	sub	sp, fp, #8
   1576c:	pop	{r4, fp, pc}
   15770:	andeq	r6, r1, r0, lsr ip
   15774:	andeq	r0, r0, r8, asr r0
   15778:	andeq	r5, r0, ip, lsl r9
   1577c:	andeq	r5, r0, r4, asr #8
   15780:	muleq	r0, ip, r4

00015784 <flatcc_builder_create_struct@@Base>:
   15784:	push	{r4, fp, lr}
   15788:	add	fp, sp, #8
   1578c:	sub	sp, sp, #100	; 0x64
   15790:	str	r0, [fp, #-96]	; 0xffffffa0
   15794:	str	r1, [fp, #-100]	; 0xffffff9c
   15798:	str	r2, [fp, #-104]	; 0xffffff98
   1579c:	strh	r3, [fp, #-106]	; 0xffffff96
   157a0:	ldr	r4, [pc, #328]	; 158f0 <flatcc_builder_create_struct@@Base+0x16c>
   157a4:	add	r4, pc, r4
   157a8:	ldrh	r3, [fp, #-106]	; 0xffffff96
   157ac:	cmp	r3, #0
   157b0:	bne	157d4 <flatcc_builder_create_struct@@Base+0x50>
   157b4:	ldr	r3, [pc, #312]	; 158f4 <flatcc_builder_create_struct@@Base+0x170>
   157b8:	add	r3, pc, r3
   157bc:	ldr	r2, [pc, #308]	; 158f8 <flatcc_builder_create_struct@@Base+0x174>
   157c0:	ldr	r1, [pc, #308]	; 158fc <flatcc_builder_create_struct@@Base+0x178>
   157c4:	add	r1, pc, r1
   157c8:	ldr	r0, [pc, #304]	; 15900 <flatcc_builder_create_struct@@Base+0x17c>
   157cc:	add	r0, pc, r0
   157d0:	bl	120b4 <__assert_fail@plt>
   157d4:	ldrh	r3, [fp, #-106]	; 0xffffff96
   157d8:	mov	r1, r3
   157dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   157e0:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   157e4:	ldrh	r3, [fp, #-106]	; 0xffffff96
   157e8:	mov	r2, r3
   157ec:	ldr	r1, [fp, #-104]	; 0xffffff98
   157f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   157f4:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   157f8:	str	r0, [fp, #-16]
   157fc:	mov	r3, #0
   15800:	str	r3, [fp, #-88]	; 0xffffffa8
   15804:	mov	r3, #0
   15808:	str	r3, [fp, #-84]	; 0xffffffac
   1580c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15810:	cmp	r3, #0
   15814:	beq	1586c <flatcc_builder_create_struct@@Base+0xe8>
   15818:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1581c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15820:	add	r3, r2, r3
   15824:	str	r3, [fp, #-88]	; 0xffffffa8
   15828:	ldr	r3, [fp, #-84]	; 0xffffffac
   1582c:	add	r3, r3, #1
   15830:	lsl	r3, r3, #3
   15834:	sub	r2, fp, #12
   15838:	add	r3, r2, r3
   1583c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15840:	str	r2, [r3, #-76]	; 0xffffffb4
   15844:	ldr	r3, [fp, #-84]	; 0xffffffac
   15848:	add	r3, r3, #1
   1584c:	lsl	r3, r3, #3
   15850:	sub	r2, fp, #12
   15854:	add	r3, r2, r3
   15858:	ldr	r2, [fp, #-104]	; 0xffffff98
   1585c:	str	r2, [r3, #-72]	; 0xffffffb8
   15860:	ldr	r3, [fp, #-84]	; 0xffffffac
   15864:	add	r3, r3, #1
   15868:	str	r3, [fp, #-84]	; 0xffffffac
   1586c:	ldr	r3, [fp, #-16]
   15870:	cmp	r3, #0
   15874:	beq	158d0 <flatcc_builder_create_struct@@Base+0x14c>
   15878:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1587c:	ldr	r3, [fp, #-16]
   15880:	add	r3, r2, r3
   15884:	str	r3, [fp, #-88]	; 0xffffffa8
   15888:	ldr	r3, [fp, #-84]	; 0xffffffac
   1588c:	add	r3, r3, #1
   15890:	lsl	r3, r3, #3
   15894:	sub	r2, fp, #12
   15898:	add	r3, r2, r3
   1589c:	ldr	r2, [pc, #96]	; 15904 <flatcc_builder_create_struct@@Base+0x180>
   158a0:	ldr	r2, [r4, r2]
   158a4:	str	r2, [r3, #-76]	; 0xffffffb4
   158a8:	ldr	r3, [fp, #-84]	; 0xffffffac
   158ac:	add	r3, r3, #1
   158b0:	lsl	r3, r3, #3
   158b4:	sub	r2, fp, #12
   158b8:	add	r3, r2, r3
   158bc:	ldr	r2, [fp, #-16]
   158c0:	str	r2, [r3, #-72]	; 0xffffffb8
   158c4:	ldr	r3, [fp, #-84]	; 0xffffffac
   158c8:	add	r3, r3, #1
   158cc:	str	r3, [fp, #-84]	; 0xffffffac
   158d0:	sub	r3, fp, #88	; 0x58
   158d4:	mov	r1, r3
   158d8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   158dc:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   158e0:	mov	r3, r0
   158e4:	mov	r0, r3
   158e8:	sub	sp, fp, #8
   158ec:	pop	{r4, fp, pc}
   158f0:	andeq	r6, r1, r4, asr r8
   158f4:	andeq	r5, r0, r8, asr #17
   158f8:	andeq	r0, r0, pc, lsl #6
   158fc:	ldrdeq	r5, [r0], -r0
   15900:	andeq	r5, r0, ip, lsl #9
   15904:	andeq	r0, r0, r8, asr r0

00015908 <flatcc_builder_start_buffer@@Base>:
   15908:	push	{r4, fp, lr}
   1590c:	add	fp, sp, #8
   15910:	sub	sp, sp, #20
   15914:	str	r0, [fp, #-16]
   15918:	str	r1, [fp, #-20]	; 0xffffffec
   1591c:	str	r3, [fp, #-28]	; 0xffffffe4
   15920:	strh	r2, [fp, #-22]	; 0xffffffea
   15924:	ldr	r4, [pc, #300]	; 15a58 <flatcc_builder_start_buffer@@Base+0x150>
   15928:	add	r4, pc, r4
   1592c:	ldr	r3, [fp, #-16]
   15930:	ldrh	r3, [r3, #128]	; 0x80
   15934:	mov	r1, r3
   15938:	ldr	r0, [fp, #-16]
   1593c:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15940:	mov	r3, r0
   15944:	cmp	r3, #0
   15948:	beq	15954 <flatcc_builder_start_buffer@@Base+0x4c>
   1594c:	mvn	r3, #0
   15950:	b	15a4c <flatcc_builder_start_buffer@@Base+0x144>
   15954:	ldr	r3, [fp, #-16]
   15958:	mov	r2, #1
   1595c:	strh	r2, [r3, #128]	; 0x80
   15960:	ldr	r3, [fp, #-16]
   15964:	ldr	r3, [r3, #32]
   15968:	ldr	r2, [fp, #-16]
   1596c:	ldrh	r2, [r2, #132]	; 0x84
   15970:	strh	r2, [r3, #34]	; 0x22
   15974:	ldr	r3, [fp, #-16]
   15978:	ldrh	r2, [fp, #-22]	; 0xffffffea
   1597c:	strh	r2, [r3, #132]	; 0x84
   15980:	ldr	r3, [fp, #-16]
   15984:	ldr	r3, [r3, #32]
   15988:	ldr	r2, [fp, #-16]
   1598c:	ldrh	r2, [r2, #164]	; 0xa4
   15990:	strh	r2, [r3, #32]
   15994:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15998:	uxth	r2, r3
   1599c:	ldr	r3, [fp, #-16]
   159a0:	strh	r2, [r3, #164]	; 0xa4
   159a4:	ldr	r3, [fp, #-16]
   159a8:	ldr	r3, [r3, #32]
   159ac:	ldr	r2, [fp, #-16]
   159b0:	ldr	r2, [r2, #144]	; 0x90
   159b4:	str	r2, [r3, #20]
   159b8:	ldr	r3, [fp, #-16]
   159bc:	ldr	r3, [r3, #32]
   159c0:	ldr	r2, [fp, #-16]
   159c4:	ldr	r2, [r2, #152]	; 0x98
   159c8:	str	r2, [r3, #28]
   159cc:	ldr	r3, [fp, #-16]
   159d0:	ldr	r2, [r3, #136]	; 0x88
   159d4:	ldr	r3, [fp, #-16]
   159d8:	str	r2, [r3, #144]	; 0x90
   159dc:	ldr	r3, [fp, #-16]
   159e0:	ldr	r3, [r3, #148]	; 0x94
   159e4:	add	r1, r3, #1
   159e8:	ldr	r2, [fp, #-16]
   159ec:	str	r1, [r2, #148]	; 0x94
   159f0:	ldr	r2, [fp, #-16]
   159f4:	str	r3, [r2, #152]	; 0x98
   159f8:	ldr	r3, [fp, #-16]
   159fc:	ldr	r3, [r3, #32]
   15a00:	ldr	r2, [fp, #-16]
   15a04:	ldr	r2, [r2, #168]	; 0xa8
   15a08:	str	r2, [r3, #16]
   15a0c:	ldr	r3, [fp, #-16]
   15a10:	add	r2, r3, #168	; 0xa8
   15a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a18:	cmp	r3, #0
   15a1c:	beq	15a28 <flatcc_builder_start_buffer@@Base+0x120>
   15a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a24:	b	15a30 <flatcc_builder_start_buffer@@Base+0x128>
   15a28:	ldr	r3, [pc, #44]	; 15a5c <flatcc_builder_start_buffer@@Base+0x154>
   15a2c:	ldr	r3, [r4, r3]
   15a30:	ldr	r3, [r3]
   15a34:	str	r3, [r2]
   15a38:	ldr	r3, [fp, #-16]
   15a3c:	ldr	r3, [r3, #32]
   15a40:	mov	r2, #1
   15a44:	strh	r2, [r3, #14]
   15a48:	mov	r3, #0
   15a4c:	mov	r0, r3
   15a50:	sub	sp, fp, #8
   15a54:	pop	{r4, fp, pc}
   15a58:	ldrdeq	r6, [r1], -r0
   15a5c:	andeq	r0, r0, r8, asr r0

00015a60 <flatcc_builder_end_buffer@@Base>:
   15a60:	push	{fp, lr}
   15a64:	add	fp, sp, #4
   15a68:	sub	sp, sp, #24
   15a6c:	str	r0, [fp, #-16]
   15a70:	str	r1, [fp, #-20]	; 0xffffffec
   15a74:	ldr	r3, [fp, #-16]
   15a78:	ldrh	r3, [r3, #164]	; 0xa4
   15a7c:	and	r3, r3, #2
   15a80:	str	r3, [fp, #-8]
   15a84:	ldr	r3, [fp, #-16]
   15a88:	ldr	r3, [r3, #152]	; 0x98
   15a8c:	cmp	r3, #0
   15a90:	movne	r3, #1
   15a94:	moveq	r3, #0
   15a98:	uxtb	r3, r3
   15a9c:	mov	r2, r3
   15aa0:	ldr	r3, [fp, #-8]
   15aa4:	orr	r3, r3, r2
   15aa8:	str	r3, [fp, #-8]
   15aac:	ldr	r3, [fp, #-16]
   15ab0:	ldr	r3, [r3, #32]
   15ab4:	ldrh	r3, [r3, #14]
   15ab8:	cmp	r3, #1
   15abc:	beq	15ae0 <flatcc_builder_end_buffer@@Base+0x80>
   15ac0:	ldr	r3, [pc, #224]	; 15ba8 <flatcc_builder_end_buffer@@Base+0x148>
   15ac4:	add	r3, pc, r3
   15ac8:	ldr	r2, [pc, #220]	; 15bac <flatcc_builder_end_buffer@@Base+0x14c>
   15acc:	ldr	r1, [pc, #220]	; 15bb0 <flatcc_builder_end_buffer@@Base+0x150>
   15ad0:	add	r1, pc, r1
   15ad4:	ldr	r0, [pc, #216]	; 15bb4 <flatcc_builder_end_buffer@@Base+0x154>
   15ad8:	add	r0, pc, r0
   15adc:	bl	120b4 <__assert_fail@plt>
   15ae0:	ldr	r3, [fp, #-16]
   15ae4:	ldrh	r3, [r3, #132]	; 0x84
   15ae8:	mov	r1, r3
   15aec:	ldr	r0, [fp, #-16]
   15af0:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   15af4:	ldr	r3, [fp, #-16]
   15af8:	add	r1, r3, #168	; 0xa8
   15afc:	ldr	r3, [fp, #-16]
   15b00:	ldrh	r0, [r3, #132]	; 0x84
   15b04:	ldr	r3, [fp, #-16]
   15b08:	ldrh	r3, [r3, #128]	; 0x80
   15b0c:	ldr	r2, [fp, #-8]
   15b10:	str	r2, [sp, #4]
   15b14:	str	r3, [sp]
   15b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b1c:	mov	r2, r0
   15b20:	ldr	r0, [fp, #-16]
   15b24:	bl	153a8 <flatcc_builder_create_buffer@@Base>
   15b28:	str	r0, [fp, #-12]
   15b2c:	ldr	r3, [fp, #-12]
   15b30:	cmp	r3, #0
   15b34:	bne	15b40 <flatcc_builder_end_buffer@@Base+0xe0>
   15b38:	mov	r3, #0
   15b3c:	b	15b9c <flatcc_builder_end_buffer@@Base+0x13c>
   15b40:	ldr	r3, [fp, #-16]
   15b44:	ldr	r3, [r3, #32]
   15b48:	ldr	r2, [r3, #20]
   15b4c:	ldr	r3, [fp, #-16]
   15b50:	str	r2, [r3, #144]	; 0x90
   15b54:	ldr	r3, [fp, #-16]
   15b58:	ldr	r3, [r3, #32]
   15b5c:	ldr	r2, [r3, #28]
   15b60:	ldr	r3, [fp, #-16]
   15b64:	str	r2, [r3, #152]	; 0x98
   15b68:	ldr	r3, [fp, #-16]
   15b6c:	ldr	r3, [r3, #32]
   15b70:	ldr	r2, [r3, #16]
   15b74:	ldr	r3, [fp, #-16]
   15b78:	str	r2, [r3, #168]	; 0xa8
   15b7c:	ldr	r3, [fp, #-16]
   15b80:	ldr	r3, [r3, #32]
   15b84:	ldrh	r2, [r3, #32]
   15b88:	ldr	r3, [fp, #-16]
   15b8c:	strh	r2, [r3, #164]	; 0xa4
   15b90:	ldr	r0, [fp, #-16]
   15b94:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   15b98:	ldr	r3, [fp, #-12]
   15b9c:	mov	r0, r3
   15ba0:	sub	sp, fp, #4
   15ba4:	pop	{fp, pc}
   15ba8:	ldrdeq	r5, [r0], -ip
   15bac:	andeq	r0, r0, r6, asr #6
   15bb0:	andeq	r5, r0, r4, asr #1
   15bb4:	andeq	r5, r0, ip, lsl #3

00015bb8 <flatcc_builder_start_struct@@Base>:
   15bb8:	push	{fp, lr}
   15bbc:	add	fp, sp, #4
   15bc0:	sub	sp, sp, #16
   15bc4:	str	r0, [fp, #-8]
   15bc8:	str	r1, [fp, #-12]
   15bcc:	mov	r3, r2
   15bd0:	strh	r3, [fp, #-14]
   15bd4:	ldrh	r3, [fp, #-14]
   15bd8:	mov	r1, r3
   15bdc:	ldr	r0, [fp, #-8]
   15be0:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15be4:	mov	r3, r0
   15be8:	cmp	r3, #0
   15bec:	beq	15bf8 <flatcc_builder_start_struct@@Base+0x40>
   15bf0:	mov	r3, #0
   15bf4:	b	15c24 <flatcc_builder_start_struct@@Base+0x6c>
   15bf8:	ldr	r3, [fp, #-8]
   15bfc:	ldr	r3, [r3, #32]
   15c00:	mov	r2, #2
   15c04:	strh	r2, [r3, #14]
   15c08:	mvn	r1, #3
   15c0c:	ldr	r0, [fp, #-8]
   15c10:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   15c14:	ldr	r1, [fp, #-12]
   15c18:	ldr	r0, [fp, #-8]
   15c1c:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   15c20:	mov	r3, r0
   15c24:	mov	r0, r3
   15c28:	sub	sp, fp, #4
   15c2c:	pop	{fp, pc}

00015c30 <flatcc_builder_struct_edit@@Base>:
   15c30:	push	{fp}		; (str fp, [sp, #-4]!)
   15c34:	add	fp, sp, #0
   15c38:	sub	sp, sp, #12
   15c3c:	str	r0, [fp, #-8]
   15c40:	ldr	r3, [fp, #-8]
   15c44:	ldr	r3, [r3, #16]
   15c48:	mov	r0, r3
   15c4c:	add	sp, fp, #0
   15c50:	pop	{fp}		; (ldr fp, [sp], #4)
   15c54:	bx	lr

00015c58 <flatcc_builder_end_struct@@Base>:
   15c58:	push	{fp, lr}
   15c5c:	add	fp, sp, #4
   15c60:	sub	sp, sp, #16
   15c64:	str	r0, [fp, #-16]
   15c68:	ldr	r3, [fp, #-16]
   15c6c:	ldr	r3, [r3, #32]
   15c70:	ldrh	r3, [r3, #14]
   15c74:	cmp	r3, #2
   15c78:	beq	15c9c <flatcc_builder_end_struct@@Base+0x44>
   15c7c:	ldr	r3, [pc, #104]	; 15cec <flatcc_builder_end_struct@@Base+0x94>
   15c80:	add	r3, pc, r3
   15c84:	mov	r2, #872	; 0x368
   15c88:	ldr	r1, [pc, #96]	; 15cf0 <flatcc_builder_end_struct@@Base+0x98>
   15c8c:	add	r1, pc, r1
   15c90:	ldr	r0, [pc, #92]	; 15cf4 <flatcc_builder_end_struct@@Base+0x9c>
   15c94:	add	r0, pc, r0
   15c98:	bl	120b4 <__assert_fail@plt>
   15c9c:	ldr	r3, [fp, #-16]
   15ca0:	ldr	r1, [r3, #16]
   15ca4:	ldr	r3, [fp, #-16]
   15ca8:	ldr	r2, [r3, #20]
   15cac:	ldr	r3, [fp, #-16]
   15cb0:	ldrh	r3, [r3, #130]	; 0x82
   15cb4:	ldr	r0, [fp, #-16]
   15cb8:	bl	15784 <flatcc_builder_create_struct@@Base>
   15cbc:	str	r0, [fp, #-8]
   15cc0:	ldr	r3, [fp, #-8]
   15cc4:	cmp	r3, #0
   15cc8:	bne	15cd4 <flatcc_builder_end_struct@@Base+0x7c>
   15ccc:	mov	r3, #0
   15cd0:	b	15ce0 <flatcc_builder_end_struct@@Base+0x88>
   15cd4:	ldr	r0, [fp, #-16]
   15cd8:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   15cdc:	ldr	r3, [fp, #-8]
   15ce0:	mov	r0, r3
   15ce4:	sub	sp, fp, #4
   15ce8:	pop	{fp, pc}
   15cec:	andeq	r5, r0, ip, lsr r4
   15cf0:	andeq	r4, r0, r8, lsl #30
   15cf4:	strdeq	r4, [r0], -ip
   15cf8:	push	{fp, lr}
   15cfc:	add	fp, sp, #4
   15d00:	sub	sp, sp, #24
   15d04:	str	r0, [fp, #-16]
   15d08:	str	r1, [fp, #-20]	; 0xffffffec
   15d0c:	str	r2, [fp, #-24]	; 0xffffffe8
   15d10:	ldr	r3, [fp, #-16]
   15d14:	ldr	r3, [r3, #32]
   15d18:	ldr	r3, [r3, #20]
   15d1c:	str	r3, [fp, #-8]
   15d20:	ldr	r2, [fp, #-8]
   15d24:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d28:	add	r3, r2, r3
   15d2c:	str	r3, [fp, #-12]
   15d30:	ldr	r2, [fp, #-8]
   15d34:	ldr	r3, [fp, #-12]
   15d38:	cmp	r2, r3
   15d3c:	bhi	15d50 <flatcc_builder_end_struct@@Base+0xf8>
   15d40:	ldr	r2, [fp, #-12]
   15d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d48:	cmp	r2, r3
   15d4c:	bls	15d98 <flatcc_builder_end_struct@@Base+0x140>
   15d50:	ldr	r2, [fp, #-8]
   15d54:	ldr	r3, [fp, #-12]
   15d58:	cmp	r2, r3
   15d5c:	bhi	15d70 <flatcc_builder_end_struct@@Base+0x118>
   15d60:	ldr	r2, [fp, #-12]
   15d64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d68:	cmp	r2, r3
   15d6c:	bls	15d90 <flatcc_builder_end_struct@@Base+0x138>
   15d70:	ldr	r3, [pc, #64]	; 15db8 <flatcc_builder_end_struct@@Base+0x160>
   15d74:	add	r3, pc, r3
   15d78:	mov	r2, #892	; 0x37c
   15d7c:	ldr	r1, [pc, #56]	; 15dbc <flatcc_builder_end_struct@@Base+0x164>
   15d80:	add	r1, pc, r1
   15d84:	ldr	r0, [pc, #52]	; 15dc0 <flatcc_builder_end_struct@@Base+0x168>
   15d88:	add	r0, pc, r0
   15d8c:	bl	120b4 <__assert_fail@plt>
   15d90:	mvn	r3, #0
   15d94:	b	15dac <flatcc_builder_end_struct@@Base+0x154>
   15d98:	ldr	r3, [fp, #-16]
   15d9c:	ldr	r3, [r3, #32]
   15da0:	ldr	r2, [fp, #-12]
   15da4:	str	r2, [r3, #20]
   15da8:	mov	r3, #0
   15dac:	mov	r0, r3
   15db0:	sub	sp, fp, #4
   15db4:	pop	{fp, pc}
   15db8:	andeq	r5, r0, r4, ror #6
   15dbc:	andeq	r4, r0, r4, lsl lr
   15dc0:	andeq	r4, r0, r4, lsr pc

00015dc4 <flatcc_builder_extend_vector@@Base>:
   15dc4:	push	{fp, lr}
   15dc8:	add	fp, sp, #4
   15dcc:	sub	sp, sp, #8
   15dd0:	str	r0, [fp, #-8]
   15dd4:	str	r1, [fp, #-12]
   15dd8:	ldr	r3, [fp, #-8]
   15ddc:	ldr	r3, [r3, #32]
   15de0:	ldr	r3, [r3, #24]
   15de4:	mov	r2, r3
   15de8:	ldr	r1, [fp, #-12]
   15dec:	ldr	r0, [fp, #-8]
   15df0:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   15df4:	mov	r3, r0
   15df8:	cmp	r3, #0
   15dfc:	beq	15e08 <flatcc_builder_extend_vector@@Base+0x44>
   15e00:	mov	r3, #0
   15e04:	b	15e2c <flatcc_builder_extend_vector@@Base+0x68>
   15e08:	ldr	r3, [fp, #-8]
   15e0c:	ldr	r3, [r3, #32]
   15e10:	ldr	r3, [r3, #16]
   15e14:	ldr	r2, [fp, #-12]
   15e18:	mul	r3, r2, r3
   15e1c:	mov	r1, r3
   15e20:	ldr	r0, [fp, #-8]
   15e24:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   15e28:	mov	r3, r0
   15e2c:	mov	r0, r3
   15e30:	sub	sp, fp, #4
   15e34:	pop	{fp, pc}

00015e38 <flatcc_builder_vector_push@@Base>:
   15e38:	push	{fp, lr}
   15e3c:	add	fp, sp, #4
   15e40:	sub	sp, sp, #8
   15e44:	str	r0, [fp, #-8]
   15e48:	str	r1, [fp, #-12]
   15e4c:	ldr	r3, [fp, #-8]
   15e50:	ldr	r3, [r3, #32]
   15e54:	ldrh	r3, [r3, #14]
   15e58:	cmp	r3, #4
   15e5c:	beq	15e80 <flatcc_builder_vector_push@@Base+0x48>
   15e60:	ldr	r3, [pc, #200]	; 15f30 <flatcc_builder_vector_push@@Base+0xf8>
   15e64:	add	r3, pc, r3
   15e68:	ldr	r2, [pc, #196]	; 15f34 <flatcc_builder_vector_push@@Base+0xfc>
   15e6c:	ldr	r1, [pc, #196]	; 15f38 <flatcc_builder_vector_push@@Base+0x100>
   15e70:	add	r1, pc, r1
   15e74:	ldr	r0, [pc, #192]	; 15f3c <flatcc_builder_vector_push@@Base+0x104>
   15e78:	add	r0, pc, r0
   15e7c:	bl	120b4 <__assert_fail@plt>
   15e80:	ldr	r3, [fp, #-8]
   15e84:	ldr	r3, [r3, #32]
   15e88:	ldr	r2, [r3, #20]
   15e8c:	ldr	r3, [fp, #-8]
   15e90:	ldr	r3, [r3, #32]
   15e94:	ldr	r3, [r3, #24]
   15e98:	cmp	r2, r3
   15e9c:	bls	15ee8 <flatcc_builder_vector_push@@Base+0xb0>
   15ea0:	ldr	r3, [fp, #-8]
   15ea4:	ldr	r3, [r3, #32]
   15ea8:	ldr	r2, [r3, #20]
   15eac:	ldr	r3, [fp, #-8]
   15eb0:	ldr	r3, [r3, #32]
   15eb4:	ldr	r3, [r3, #24]
   15eb8:	cmp	r2, r3
   15ebc:	bls	15ee0 <flatcc_builder_vector_push@@Base+0xa8>
   15ec0:	ldr	r3, [pc, #120]	; 15f40 <flatcc_builder_vector_push@@Base+0x108>
   15ec4:	add	r3, pc, r3
   15ec8:	mov	r2, #908	; 0x38c
   15ecc:	ldr	r1, [pc, #112]	; 15f44 <flatcc_builder_vector_push@@Base+0x10c>
   15ed0:	add	r1, pc, r1
   15ed4:	ldr	r0, [pc, #108]	; 15f48 <flatcc_builder_vector_push@@Base+0x110>
   15ed8:	add	r0, pc, r0
   15edc:	bl	120b4 <__assert_fail@plt>
   15ee0:	mov	r3, #0
   15ee4:	b	15f24 <flatcc_builder_vector_push@@Base+0xec>
   15ee8:	ldr	r3, [fp, #-8]
   15eec:	ldr	r3, [r3, #32]
   15ef0:	ldr	r2, [fp, #-8]
   15ef4:	ldr	r2, [r2, #32]
   15ef8:	ldr	r2, [r2, #20]
   15efc:	add	r2, r2, #1
   15f00:	str	r2, [r3, #20]
   15f04:	ldr	r3, [fp, #-8]
   15f08:	ldr	r3, [r3, #32]
   15f0c:	ldr	r3, [r3, #16]
   15f10:	mov	r2, r3
   15f14:	ldr	r1, [fp, #-12]
   15f18:	ldr	r0, [fp, #-8]
   15f1c:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x3e8>
   15f20:	mov	r3, r0
   15f24:	mov	r0, r3
   15f28:	sub	sp, fp, #4
   15f2c:	pop	{fp, pc}
   15f30:	andeq	r5, r0, r8, lsl #5
   15f34:	andeq	r0, r0, fp, lsl #7
   15f38:	andeq	r4, r0, r4, lsr #26
   15f3c:	andeq	r4, r0, r0, ror #28
   15f40:	andeq	r5, r0, r8, lsr #4
   15f44:	andeq	r4, r0, r4, asr #25
   15f48:	andeq	r4, r0, ip, lsr #28

00015f4c <flatcc_builder_append_vector@@Base>:
   15f4c:	push	{fp, lr}
   15f50:	add	fp, sp, #4
   15f54:	sub	sp, sp, #16
   15f58:	str	r0, [fp, #-8]
   15f5c:	str	r1, [fp, #-12]
   15f60:	str	r2, [fp, #-16]
   15f64:	ldr	r3, [fp, #-8]
   15f68:	ldr	r3, [r3, #32]
   15f6c:	ldrh	r3, [r3, #14]
   15f70:	cmp	r3, #4
   15f74:	beq	15f98 <flatcc_builder_append_vector@@Base+0x4c>
   15f78:	ldr	r3, [pc, #124]	; 15ffc <flatcc_builder_append_vector@@Base+0xb0>
   15f7c:	add	r3, pc, r3
   15f80:	ldr	r2, [pc, #120]	; 16000 <flatcc_builder_append_vector@@Base+0xb4>
   15f84:	ldr	r1, [pc, #120]	; 16004 <flatcc_builder_append_vector@@Base+0xb8>
   15f88:	add	r1, pc, r1
   15f8c:	ldr	r0, [pc, #116]	; 16008 <flatcc_builder_append_vector@@Base+0xbc>
   15f90:	add	r0, pc, r0
   15f94:	bl	120b4 <__assert_fail@plt>
   15f98:	ldr	r3, [fp, #-8]
   15f9c:	ldr	r3, [r3, #32]
   15fa0:	ldr	r3, [r3, #24]
   15fa4:	mov	r2, r3
   15fa8:	ldr	r1, [fp, #-16]
   15fac:	ldr	r0, [fp, #-8]
   15fb0:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   15fb4:	mov	r3, r0
   15fb8:	cmp	r3, #0
   15fbc:	beq	15fc8 <flatcc_builder_append_vector@@Base+0x7c>
   15fc0:	mov	r3, #0
   15fc4:	b	15ff0 <flatcc_builder_append_vector@@Base+0xa4>
   15fc8:	ldr	r3, [fp, #-8]
   15fcc:	ldr	r3, [r3, #32]
   15fd0:	ldr	r3, [r3, #16]
   15fd4:	ldr	r2, [fp, #-16]
   15fd8:	mul	r3, r2, r3
   15fdc:	mov	r2, r3
   15fe0:	ldr	r1, [fp, #-12]
   15fe4:	ldr	r0, [fp, #-8]
   15fe8:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x3e8>
   15fec:	mov	r3, r0
   15ff0:	mov	r0, r3
   15ff4:	sub	sp, fp, #4
   15ff8:	pop	{fp, pc}
   15ffc:	andeq	r5, r0, ip, lsl #3
   16000:	muleq	r0, r3, r3
   16004:	andeq	r4, r0, ip, lsl #24
   16008:	andeq	r4, r0, r8, asr #26

0001600c <flatcc_builder_extend_offset_vector@@Base>:
   1600c:	push	{fp, lr}
   16010:	add	fp, sp, #4
   16014:	sub	sp, sp, #8
   16018:	str	r0, [fp, #-8]
   1601c:	str	r1, [fp, #-12]
   16020:	mvn	r2, #-1073741824	; 0xc0000000
   16024:	ldr	r1, [fp, #-12]
   16028:	ldr	r0, [fp, #-8]
   1602c:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   16030:	mov	r3, r0
   16034:	cmp	r3, #0
   16038:	beq	16044 <flatcc_builder_extend_offset_vector@@Base+0x38>
   1603c:	mov	r3, #0
   16040:	b	1605c <flatcc_builder_extend_offset_vector@@Base+0x50>
   16044:	ldr	r3, [fp, #-12]
   16048:	lsl	r3, r3, #2
   1604c:	mov	r1, r3
   16050:	ldr	r0, [fp, #-8]
   16054:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   16058:	mov	r3, r0
   1605c:	mov	r0, r3
   16060:	sub	sp, fp, #4
   16064:	pop	{fp, pc}

00016068 <flatcc_builder_offset_vector_push@@Base>:
   16068:	push	{fp, lr}
   1606c:	add	fp, sp, #4
   16070:	sub	sp, sp, #16
   16074:	str	r0, [fp, #-16]
   16078:	str	r1, [fp, #-20]	; 0xffffffec
   1607c:	ldr	r3, [fp, #-16]
   16080:	ldr	r3, [r3, #32]
   16084:	ldrh	r3, [r3, #14]
   16088:	cmp	r3, #5
   1608c:	beq	160b0 <flatcc_builder_offset_vector_push@@Base+0x48>
   16090:	ldr	r3, [pc, #144]	; 16128 <flatcc_builder_offset_vector_push@@Base+0xc0>
   16094:	add	r3, pc, r3
   16098:	ldr	r2, [pc, #140]	; 1612c <flatcc_builder_offset_vector_push@@Base+0xc4>
   1609c:	ldr	r1, [pc, #140]	; 16130 <flatcc_builder_offset_vector_push@@Base+0xc8>
   160a0:	add	r1, pc, r1
   160a4:	ldr	r0, [pc, #136]	; 16134 <flatcc_builder_offset_vector_push@@Base+0xcc>
   160a8:	add	r0, pc, r0
   160ac:	bl	120b4 <__assert_fail@plt>
   160b0:	ldr	r3, [fp, #-16]
   160b4:	ldr	r3, [r3, #32]
   160b8:	ldr	r3, [r3, #20]
   160bc:	cmn	r3, #-1073741823	; 0xc0000001
   160c0:	bne	160cc <flatcc_builder_offset_vector_push@@Base+0x64>
   160c4:	mov	r3, #0
   160c8:	b	1611c <flatcc_builder_offset_vector_push@@Base+0xb4>
   160cc:	ldr	r3, [fp, #-16]
   160d0:	ldr	r3, [r3, #32]
   160d4:	ldr	r2, [fp, #-16]
   160d8:	ldr	r2, [r2, #32]
   160dc:	ldr	r2, [r2, #20]
   160e0:	add	r2, r2, #1
   160e4:	str	r2, [r3, #20]
   160e8:	mov	r1, #4
   160ec:	ldr	r0, [fp, #-16]
   160f0:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   160f4:	str	r0, [fp, #-8]
   160f8:	ldr	r3, [fp, #-8]
   160fc:	cmp	r3, #0
   16100:	bne	1610c <flatcc_builder_offset_vector_push@@Base+0xa4>
   16104:	mov	r3, #0
   16108:	b	1611c <flatcc_builder_offset_vector_push@@Base+0xb4>
   1610c:	ldr	r3, [fp, #-8]
   16110:	ldr	r2, [fp, #-20]	; 0xffffffec
   16114:	str	r2, [r3]
   16118:	ldr	r3, [fp, #-8]
   1611c:	mov	r0, r3
   16120:	sub	sp, fp, #4
   16124:	pop	{fp, pc}
   16128:	muleq	r0, r4, r0
   1612c:	andeq	r0, r0, r6, lsr #7
   16130:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   16134:	muleq	r0, ip, ip

00016138 <flatcc_builder_append_offset_vector@@Base>:
   16138:	push	{fp, lr}
   1613c:	add	fp, sp, #4
   16140:	sub	sp, sp, #16
   16144:	str	r0, [fp, #-8]
   16148:	str	r1, [fp, #-12]
   1614c:	str	r2, [fp, #-16]
   16150:	ldr	r3, [fp, #-8]
   16154:	ldr	r3, [r3, #32]
   16158:	ldrh	r3, [r3, #14]
   1615c:	cmp	r3, #5
   16160:	beq	16184 <flatcc_builder_append_offset_vector@@Base+0x4c>
   16164:	ldr	r3, [pc, #100]	; 161d0 <flatcc_builder_append_offset_vector@@Base+0x98>
   16168:	add	r3, pc, r3
   1616c:	mov	r2, #948	; 0x3b4
   16170:	ldr	r1, [pc, #92]	; 161d4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   16174:	add	r1, pc, r1
   16178:	ldr	r0, [pc, #88]	; 161d8 <flatcc_builder_append_offset_vector@@Base+0xa0>
   1617c:	add	r0, pc, r0
   16180:	bl	120b4 <__assert_fail@plt>
   16184:	mvn	r2, #-1073741824	; 0xc0000000
   16188:	ldr	r1, [fp, #-16]
   1618c:	ldr	r0, [fp, #-8]
   16190:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   16194:	mov	r3, r0
   16198:	cmp	r3, #0
   1619c:	beq	161a8 <flatcc_builder_append_offset_vector@@Base+0x70>
   161a0:	mov	r3, #0
   161a4:	b	161c4 <flatcc_builder_append_offset_vector@@Base+0x8c>
   161a8:	ldr	r3, [fp, #-16]
   161ac:	lsl	r3, r3, #2
   161b0:	mov	r2, r3
   161b4:	ldr	r1, [fp, #-12]
   161b8:	ldr	r0, [fp, #-8]
   161bc:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x3e8>
   161c0:	mov	r3, r0
   161c4:	mov	r0, r3
   161c8:	sub	sp, fp, #4
   161cc:	pop	{fp, pc}
   161d0:	andeq	r4, r0, r4, ror #31
   161d4:	andeq	r4, r0, r0, lsr #20
   161d8:	andeq	r4, r0, r8, asr #23

000161dc <flatcc_builder_extend_string@@Base>:
   161dc:	push	{fp, lr}
   161e0:	add	fp, sp, #4
   161e4:	sub	sp, sp, #8
   161e8:	str	r0, [fp, #-8]
   161ec:	str	r1, [fp, #-12]
   161f0:	ldr	r3, [fp, #-8]
   161f4:	ldr	r3, [r3, #32]
   161f8:	ldrh	r3, [r3, #14]
   161fc:	cmp	r3, #6
   16200:	beq	16224 <flatcc_builder_extend_string@@Base+0x48>
   16204:	ldr	r3, [pc, #88]	; 16264 <flatcc_builder_extend_string@@Base+0x88>
   16208:	add	r3, pc, r3
   1620c:	ldr	r2, [pc, #84]	; 16268 <flatcc_builder_extend_string@@Base+0x8c>
   16210:	ldr	r1, [pc, #84]	; 1626c <flatcc_builder_extend_string@@Base+0x90>
   16214:	add	r1, pc, r1
   16218:	ldr	r0, [pc, #80]	; 16270 <flatcc_builder_extend_string@@Base+0x94>
   1621c:	add	r0, pc, r0
   16220:	bl	120b4 <__assert_fail@plt>
   16224:	mvn	r2, #0
   16228:	ldr	r1, [fp, #-12]
   1622c:	ldr	r0, [fp, #-8]
   16230:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   16234:	mov	r3, r0
   16238:	cmp	r3, #0
   1623c:	beq	16248 <flatcc_builder_extend_string@@Base+0x6c>
   16240:	mov	r3, #0
   16244:	b	16258 <flatcc_builder_extend_string@@Base+0x7c>
   16248:	ldr	r1, [fp, #-12]
   1624c:	ldr	r0, [fp, #-8]
   16250:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   16254:	mov	r3, r0
   16258:	mov	r0, r3
   1625c:	sub	sp, fp, #4
   16260:	pop	{fp, pc}
   16264:	andeq	r4, r0, r8, ror #30
   16268:			; <UNDEFINED> instruction: 0x000003bd
   1626c:	andeq	r4, r0, r0, lsl #19
   16270:	andeq	r4, r0, ip, asr fp

00016274 <flatcc_builder_append_string@@Base>:
   16274:	push	{fp, lr}
   16278:	add	fp, sp, #4
   1627c:	sub	sp, sp, #16
   16280:	str	r0, [fp, #-8]
   16284:	str	r1, [fp, #-12]
   16288:	str	r2, [fp, #-16]
   1628c:	ldr	r3, [fp, #-8]
   16290:	ldr	r3, [r3, #32]
   16294:	ldrh	r3, [r3, #14]
   16298:	cmp	r3, #6
   1629c:	beq	162c0 <flatcc_builder_append_string@@Base+0x4c>
   162a0:	ldr	r3, [pc, #92]	; 16304 <flatcc_builder_append_string@@Base+0x90>
   162a4:	add	r3, pc, r3
   162a8:	ldr	r2, [pc, #88]	; 16308 <flatcc_builder_append_string@@Base+0x94>
   162ac:	ldr	r1, [pc, #88]	; 1630c <flatcc_builder_append_string@@Base+0x98>
   162b0:	add	r1, pc, r1
   162b4:	ldr	r0, [pc, #84]	; 16310 <flatcc_builder_append_string@@Base+0x9c>
   162b8:	add	r0, pc, r0
   162bc:	bl	120b4 <__assert_fail@plt>
   162c0:	mvn	r2, #0
   162c4:	ldr	r1, [fp, #-16]
   162c8:	ldr	r0, [fp, #-8]
   162cc:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   162d0:	mov	r3, r0
   162d4:	cmp	r3, #0
   162d8:	beq	162e4 <flatcc_builder_append_string@@Base+0x70>
   162dc:	mov	r3, #0
   162e0:	b	162f8 <flatcc_builder_append_string@@Base+0x84>
   162e4:	ldr	r2, [fp, #-16]
   162e8:	ldr	r1, [fp, #-12]
   162ec:	ldr	r0, [fp, #-8]
   162f0:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x3e8>
   162f4:	mov	r3, r0
   162f8:	mov	r0, r3
   162fc:	sub	sp, fp, #4
   16300:	pop	{fp, pc}
   16304:	andeq	r4, r0, ip, ror #29
   16308:	andeq	r0, r0, r6, asr #7
   1630c:	andeq	r4, r0, r4, ror #17
   16310:	andeq	r4, r0, r0, asr #21

00016314 <flatcc_builder_append_string_str@@Base>:
   16314:	push	{fp, lr}
   16318:	add	fp, sp, #4
   1631c:	sub	sp, sp, #8
   16320:	str	r0, [fp, #-8]
   16324:	str	r1, [fp, #-12]
   16328:	ldr	r0, [fp, #-12]
   1632c:	bl	12054 <strlen@plt>
   16330:	mov	r3, r0
   16334:	mov	r2, r3
   16338:	ldr	r1, [fp, #-12]
   1633c:	ldr	r0, [fp, #-8]
   16340:	bl	16274 <flatcc_builder_append_string@@Base>
   16344:	mov	r3, r0
   16348:	mov	r0, r3
   1634c:	sub	sp, fp, #4
   16350:	pop	{fp, pc}

00016354 <flatcc_builder_append_string_strn@@Base>:
   16354:	push	{fp, lr}
   16358:	add	fp, sp, #4
   1635c:	sub	sp, sp, #16
   16360:	str	r0, [fp, #-8]
   16364:	str	r1, [fp, #-12]
   16368:	str	r2, [fp, #-16]
   1636c:	ldr	r1, [fp, #-16]
   16370:	ldr	r0, [fp, #-12]
   16374:	bl	1383c <main@@Base+0x1c8>
   16378:	mov	r3, r0
   1637c:	mov	r2, r3
   16380:	ldr	r1, [fp, #-12]
   16384:	ldr	r0, [fp, #-8]
   16388:	bl	16274 <flatcc_builder_append_string@@Base>
   1638c:	mov	r3, r0
   16390:	mov	r0, r3
   16394:	sub	sp, fp, #4
   16398:	pop	{fp, pc}

0001639c <flatcc_builder_truncate_vector@@Base>:
   1639c:	push	{fp, lr}
   163a0:	add	fp, sp, #4
   163a4:	sub	sp, sp, #8
   163a8:	str	r0, [fp, #-8]
   163ac:	str	r1, [fp, #-12]
   163b0:	ldr	r3, [fp, #-8]
   163b4:	ldr	r3, [r3, #32]
   163b8:	ldrh	r3, [r3, #14]
   163bc:	cmp	r3, #4
   163c0:	beq	163e4 <flatcc_builder_truncate_vector@@Base+0x48>
   163c4:	ldr	r3, [pc, #192]	; 1648c <flatcc_builder_truncate_vector@@Base+0xf0>
   163c8:	add	r3, pc, r3
   163cc:	ldr	r2, [pc, #188]	; 16490 <flatcc_builder_truncate_vector@@Base+0xf4>
   163d0:	ldr	r1, [pc, #188]	; 16494 <flatcc_builder_truncate_vector@@Base+0xf8>
   163d4:	add	r1, pc, r1
   163d8:	ldr	r0, [pc, #184]	; 16498 <flatcc_builder_truncate_vector@@Base+0xfc>
   163dc:	add	r0, pc, r0
   163e0:	bl	120b4 <__assert_fail@plt>
   163e4:	ldr	r3, [fp, #-8]
   163e8:	ldr	r3, [r3, #32]
   163ec:	ldr	r2, [r3, #20]
   163f0:	ldr	r3, [fp, #-12]
   163f4:	cmp	r2, r3
   163f8:	bcs	1643c <flatcc_builder_truncate_vector@@Base+0xa0>
   163fc:	ldr	r3, [fp, #-8]
   16400:	ldr	r3, [r3, #32]
   16404:	ldr	r2, [r3, #20]
   16408:	ldr	r3, [fp, #-12]
   1640c:	cmp	r2, r3
   16410:	bcs	16434 <flatcc_builder_truncate_vector@@Base+0x98>
   16414:	ldr	r3, [pc, #128]	; 1649c <flatcc_builder_truncate_vector@@Base+0x100>
   16418:	add	r3, pc, r3
   1641c:	ldr	r2, [pc, #124]	; 164a0 <flatcc_builder_truncate_vector@@Base+0x104>
   16420:	ldr	r1, [pc, #124]	; 164a4 <flatcc_builder_truncate_vector@@Base+0x108>
   16424:	add	r1, pc, r1
   16428:	ldr	r0, [pc, #120]	; 164a8 <flatcc_builder_truncate_vector@@Base+0x10c>
   1642c:	add	r0, pc, r0
   16430:	bl	120b4 <__assert_fail@plt>
   16434:	mvn	r3, #0
   16438:	b	16480 <flatcc_builder_truncate_vector@@Base+0xe4>
   1643c:	ldr	r3, [fp, #-8]
   16440:	ldr	r3, [r3, #32]
   16444:	ldr	r2, [fp, #-8]
   16448:	ldr	r2, [r2, #32]
   1644c:	ldr	r1, [r2, #20]
   16450:	ldr	r2, [fp, #-12]
   16454:	sub	r2, r1, r2
   16458:	str	r2, [r3, #20]
   1645c:	ldr	r3, [fp, #-8]
   16460:	ldr	r3, [r3, #32]
   16464:	ldr	r3, [r3, #16]
   16468:	ldr	r2, [fp, #-12]
   1646c:	mul	r3, r2, r3
   16470:	mov	r1, r3
   16474:	ldr	r0, [fp, #-8]
   16478:	bl	13c1c <flatcc_builder_default_alloc@@Base+0x38c>
   1647c:	mov	r3, #0
   16480:	mov	r0, r3
   16484:	sub	sp, fp, #4
   16488:	pop	{fp, pc}
   1648c:	andeq	r4, r0, r8, ror #27
   16490:	ldrdeq	r0, [r0], -r9
   16494:	andeq	r4, r0, r0, asr #15
   16498:	strdeq	r4, [r0], -ip
   1649c:	muleq	r0, r8, sp
   164a0:	ldrdeq	r0, [r0], -sl
   164a4:	andeq	r4, r0, r0, ror r7
   164a8:	andeq	r4, r0, r8, ror r9

000164ac <flatcc_builder_truncate_offset_vector@@Base>:
   164ac:	push	{fp, lr}
   164b0:	add	fp, sp, #4
   164b4:	sub	sp, sp, #8
   164b8:	str	r0, [fp, #-8]
   164bc:	str	r1, [fp, #-12]
   164c0:	ldr	r3, [fp, #-8]
   164c4:	ldr	r3, [r3, #32]
   164c8:	ldrh	r3, [r3, #14]
   164cc:	cmp	r3, #5
   164d0:	beq	164f4 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   164d4:	ldr	r3, [pc, #192]	; 1659c <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   164d8:	add	r3, pc, r3
   164dc:	ldr	r2, [pc, #188]	; 165a0 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   164e0:	ldr	r1, [pc, #188]	; 165a4 <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   164e4:	add	r1, pc, r1
   164e8:	ldr	r0, [pc, #184]	; 165a8 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   164ec:	add	r0, pc, r0
   164f0:	bl	120b4 <__assert_fail@plt>
   164f4:	ldr	r3, [fp, #-8]
   164f8:	ldr	r3, [r3, #32]
   164fc:	ldr	r2, [r3, #20]
   16500:	ldr	r3, [fp, #-12]
   16504:	cmp	r2, r3
   16508:	bcs	1654c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   1650c:	ldr	r3, [fp, #-8]
   16510:	ldr	r3, [r3, #32]
   16514:	ldr	r2, [r3, #20]
   16518:	ldr	r3, [fp, #-12]
   1651c:	cmp	r2, r3
   16520:	bcs	16544 <flatcc_builder_truncate_offset_vector@@Base+0x98>
   16524:	ldr	r3, [pc, #128]	; 165ac <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16528:	add	r3, pc, r3
   1652c:	ldr	r2, [pc, #124]	; 165b0 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16530:	ldr	r1, [pc, #124]	; 165b4 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16534:	add	r1, pc, r1
   16538:	ldr	r0, [pc, #120]	; 165b8 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   1653c:	add	r0, pc, r0
   16540:	bl	120b4 <__assert_fail@plt>
   16544:	mvn	r3, #0
   16548:	b	16590 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   1654c:	ldr	r3, [fp, #-8]
   16550:	ldr	r3, [r3, #32]
   16554:	ldr	r2, [fp, #-8]
   16558:	ldr	r2, [r2, #32]
   1655c:	ldr	r1, [r2, #20]
   16560:	ldr	r2, [fp, #-12]
   16564:	sub	r2, r1, r2
   16568:	str	r2, [r3, #20]
   1656c:	ldr	r3, [fp, #-8]
   16570:	ldr	r3, [r3, #32]
   16574:	ldr	r3, [r3, #16]
   16578:	ldr	r2, [fp, #-12]
   1657c:	mul	r3, r2, r3
   16580:	mov	r1, r3
   16584:	ldr	r0, [fp, #-8]
   16588:	bl	13c1c <flatcc_builder_default_alloc@@Base+0x38c>
   1658c:	mov	r3, #0
   16590:	mov	r0, r3
   16594:	sub	sp, fp, #4
   16598:	pop	{fp, pc}
   1659c:	strdeq	r4, [r0], -r8
   165a0:	andeq	r0, r0, r2, ror #7
   165a4:			; <UNDEFINED> instruction: 0x000046b0
   165a8:	andeq	r4, r0, r8, asr r8
   165ac:	andeq	r4, r0, r8, lsr #25
   165b0:	andeq	r0, r0, r3, ror #7
   165b4:	andeq	r4, r0, r0, ror #12
   165b8:	andeq	r4, r0, ip, lsl #17

000165bc <flatcc_builder_truncate_string@@Base>:
   165bc:	push	{fp, lr}
   165c0:	add	fp, sp, #4
   165c4:	sub	sp, sp, #8
   165c8:	str	r0, [fp, #-8]
   165cc:	str	r1, [fp, #-12]
   165d0:	ldr	r3, [fp, #-8]
   165d4:	ldr	r3, [r3, #32]
   165d8:	ldrh	r3, [r3, #14]
   165dc:	cmp	r3, #6
   165e0:	beq	16604 <flatcc_builder_truncate_string@@Base+0x48>
   165e4:	ldr	r3, [pc, #172]	; 16698 <flatcc_builder_truncate_string@@Base+0xdc>
   165e8:	add	r3, pc, r3
   165ec:	ldr	r2, [pc, #168]	; 1669c <flatcc_builder_truncate_string@@Base+0xe0>
   165f0:	ldr	r1, [pc, #168]	; 166a0 <flatcc_builder_truncate_string@@Base+0xe4>
   165f4:	add	r1, pc, r1
   165f8:	ldr	r0, [pc, #164]	; 166a4 <flatcc_builder_truncate_string@@Base+0xe8>
   165fc:	add	r0, pc, r0
   16600:	bl	120b4 <__assert_fail@plt>
   16604:	ldr	r3, [fp, #-8]
   16608:	ldr	r3, [r3, #32]
   1660c:	ldr	r2, [r3, #20]
   16610:	ldr	r3, [fp, #-12]
   16614:	cmp	r2, r3
   16618:	bcs	1665c <flatcc_builder_truncate_string@@Base+0xa0>
   1661c:	ldr	r3, [fp, #-8]
   16620:	ldr	r3, [r3, #32]
   16624:	ldr	r2, [r3, #20]
   16628:	ldr	r3, [fp, #-12]
   1662c:	cmp	r2, r3
   16630:	bcs	16654 <flatcc_builder_truncate_string@@Base+0x98>
   16634:	ldr	r3, [pc, #108]	; 166a8 <flatcc_builder_truncate_string@@Base+0xec>
   16638:	add	r3, pc, r3
   1663c:	mov	r2, #1004	; 0x3ec
   16640:	ldr	r1, [pc, #100]	; 166ac <flatcc_builder_truncate_string@@Base+0xf0>
   16644:	add	r1, pc, r1
   16648:	ldr	r0, [pc, #96]	; 166b0 <flatcc_builder_truncate_string@@Base+0xf4>
   1664c:	add	r0, pc, r0
   16650:	bl	120b4 <__assert_fail@plt>
   16654:	mvn	r3, #0
   16658:	b	1668c <flatcc_builder_truncate_string@@Base+0xd0>
   1665c:	ldr	r3, [fp, #-8]
   16660:	ldr	r3, [r3, #32]
   16664:	ldr	r2, [fp, #-8]
   16668:	ldr	r2, [r2, #32]
   1666c:	ldr	r1, [r2, #20]
   16670:	ldr	r2, [fp, #-12]
   16674:	sub	r2, r1, r2
   16678:	str	r2, [r3, #20]
   1667c:	ldr	r1, [fp, #-12]
   16680:	ldr	r0, [fp, #-8]
   16684:	bl	13c1c <flatcc_builder_default_alloc@@Base+0x38c>
   16688:	mov	r3, #0
   1668c:	mov	r0, r3
   16690:	sub	sp, fp, #4
   16694:	pop	{fp, pc}
   16698:	andeq	r4, r0, r0, lsl ip
   1669c:	andeq	r0, r0, fp, ror #7
   166a0:	andeq	r4, r0, r0, lsr #11
   166a4:	andeq	r4, r0, ip, ror r7
   166a8:	andeq	r4, r0, r0, asr #23
   166ac:	andeq	r4, r0, r0, asr r5
   166b0:			; <UNDEFINED> instruction: 0x000047b8

000166b4 <flatcc_builder_start_vector@@Base>:
   166b4:	push	{fp, lr}
   166b8:	add	fp, sp, #4
   166bc:	sub	sp, sp, #16
   166c0:	str	r0, [fp, #-8]
   166c4:	str	r1, [fp, #-12]
   166c8:	str	r3, [fp, #-20]	; 0xffffffec
   166cc:	strh	r2, [fp, #-14]
   166d0:	sub	r3, fp, #14
   166d4:	mov	r1, #4
   166d8:	mov	r0, r3
   166dc:	bl	14794 <flatcc_builder_clear@@Base+0xf8>
   166e0:	ldrh	r3, [fp, #-14]
   166e4:	mov	r1, r3
   166e8:	ldr	r0, [fp, #-8]
   166ec:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   166f0:	mov	r3, r0
   166f4:	cmp	r3, #0
   166f8:	beq	16704 <flatcc_builder_start_vector@@Base+0x50>
   166fc:	mvn	r3, #0
   16700:	b	16754 <flatcc_builder_start_vector@@Base+0xa0>
   16704:	ldr	r3, [fp, #-8]
   16708:	ldr	r3, [r3, #32]
   1670c:	ldr	r2, [fp, #-12]
   16710:	str	r2, [r3, #16]
   16714:	ldr	r3, [fp, #-8]
   16718:	ldr	r3, [r3, #32]
   1671c:	mov	r2, #0
   16720:	str	r2, [r3, #20]
   16724:	ldr	r3, [fp, #-8]
   16728:	ldr	r3, [r3, #32]
   1672c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16730:	str	r2, [r3, #24]
   16734:	ldr	r3, [fp, #-8]
   16738:	ldr	r3, [r3, #32]
   1673c:	mov	r2, #4
   16740:	strh	r2, [r3, #14]
   16744:	mvn	r1, #3
   16748:	ldr	r0, [fp, #-8]
   1674c:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   16750:	mov	r3, #0
   16754:	mov	r0, r3
   16758:	sub	sp, fp, #4
   1675c:	pop	{fp, pc}

00016760 <flatcc_builder_start_offset_vector@@Base>:
   16760:	push	{fp, lr}
   16764:	add	fp, sp, #4
   16768:	sub	sp, sp, #8
   1676c:	str	r0, [fp, #-8]
   16770:	mov	r1, #4
   16774:	ldr	r0, [fp, #-8]
   16778:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1677c:	mov	r3, r0
   16780:	cmp	r3, #0
   16784:	beq	16790 <flatcc_builder_start_offset_vector@@Base+0x30>
   16788:	mvn	r3, #0
   1678c:	b	167d0 <flatcc_builder_start_offset_vector@@Base+0x70>
   16790:	ldr	r3, [fp, #-8]
   16794:	ldr	r3, [r3, #32]
   16798:	mov	r2, #4
   1679c:	str	r2, [r3, #16]
   167a0:	ldr	r3, [fp, #-8]
   167a4:	ldr	r3, [r3, #32]
   167a8:	mov	r2, #0
   167ac:	str	r2, [r3, #20]
   167b0:	ldr	r3, [fp, #-8]
   167b4:	ldr	r3, [r3, #32]
   167b8:	mov	r2, #5
   167bc:	strh	r2, [r3, #14]
   167c0:	mvn	r1, #3
   167c4:	ldr	r0, [fp, #-8]
   167c8:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   167cc:	mov	r3, #0
   167d0:	mov	r0, r3
   167d4:	sub	sp, fp, #4
   167d8:	pop	{fp, pc}

000167dc <flatcc_builder_create_offset_vector@@Base>:
   167dc:	push	{fp, lr}
   167e0:	add	fp, sp, #4
   167e4:	sub	sp, sp, #24
   167e8:	str	r0, [fp, #-16]
   167ec:	str	r1, [fp, #-20]	; 0xffffffec
   167f0:	str	r2, [fp, #-24]	; 0xffffffe8
   167f4:	ldr	r0, [fp, #-16]
   167f8:	bl	16760 <flatcc_builder_start_offset_vector@@Base>
   167fc:	mov	r3, r0
   16800:	cmp	r3, #0
   16804:	beq	16810 <flatcc_builder_create_offset_vector@@Base+0x34>
   16808:	mov	r3, #0
   1680c:	b	16858 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16810:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16814:	ldr	r0, [fp, #-16]
   16818:	bl	1600c <flatcc_builder_extend_offset_vector@@Base>
   1681c:	str	r0, [fp, #-8]
   16820:	ldr	r3, [fp, #-8]
   16824:	cmp	r3, #0
   16828:	bne	16834 <flatcc_builder_create_offset_vector@@Base+0x58>
   1682c:	mov	r3, #0
   16830:	b	16858 <flatcc_builder_create_offset_vector@@Base+0x7c>
   16834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16838:	lsl	r3, r3, #2
   1683c:	mov	r2, r3
   16840:	ldr	r1, [fp, #-20]	; 0xffffffec
   16844:	ldr	r0, [fp, #-8]
   16848:	bl	11ff4 <memcpy@plt>
   1684c:	ldr	r0, [fp, #-16]
   16850:	bl	17db4 <flatcc_builder_end_offset_vector@@Base>
   16854:	mov	r3, r0
   16858:	mov	r0, r3
   1685c:	sub	sp, fp, #4
   16860:	pop	{fp, pc}

00016864 <flatcc_builder_start_string@@Base>:
   16864:	push	{fp, lr}
   16868:	add	fp, sp, #4
   1686c:	sub	sp, sp, #8
   16870:	str	r0, [fp, #-8]
   16874:	mov	r1, #1
   16878:	ldr	r0, [fp, #-8]
   1687c:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16880:	mov	r3, r0
   16884:	cmp	r3, #0
   16888:	beq	16894 <flatcc_builder_start_string@@Base+0x30>
   1688c:	mvn	r3, #0
   16890:	b	168d4 <flatcc_builder_start_string@@Base+0x70>
   16894:	ldr	r3, [fp, #-8]
   16898:	ldr	r3, [r3, #32]
   1689c:	mov	r2, #1
   168a0:	str	r2, [r3, #16]
   168a4:	ldr	r3, [fp, #-8]
   168a8:	ldr	r3, [r3, #32]
   168ac:	mov	r2, #0
   168b0:	str	r2, [r3, #20]
   168b4:	ldr	r3, [fp, #-8]
   168b8:	ldr	r3, [r3, #32]
   168bc:	mov	r2, #6
   168c0:	strh	r2, [r3, #14]
   168c4:	mvn	r1, #3
   168c8:	ldr	r0, [fp, #-8]
   168cc:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   168d0:	mov	r3, #0
   168d4:	mov	r0, r3
   168d8:	sub	sp, fp, #4
   168dc:	pop	{fp, pc}

000168e0 <flatcc_builder_reserve_table@@Base>:
   168e0:	push	{fp, lr}
   168e4:	add	fp, sp, #4
   168e8:	sub	sp, sp, #8
   168ec:	str	r0, [fp, #-8]
   168f0:	str	r1, [fp, #-12]
   168f4:	ldr	r3, [fp, #-12]
   168f8:	cmp	r3, #0
   168fc:	bge	16920 <flatcc_builder_reserve_table@@Base+0x40>
   16900:	ldr	r3, [pc, #52]	; 1693c <flatcc_builder_reserve_table@@Base+0x5c>
   16904:	add	r3, pc, r3
   16908:	ldr	r2, [pc, #48]	; 16940 <flatcc_builder_reserve_table@@Base+0x60>
   1690c:	ldr	r1, [pc, #48]	; 16944 <flatcc_builder_reserve_table@@Base+0x64>
   16910:	add	r1, pc, r1
   16914:	ldr	r0, [pc, #44]	; 16948 <flatcc_builder_reserve_table@@Base+0x68>
   16918:	add	r0, pc, r0
   1691c:	bl	120b4 <__assert_fail@plt>
   16920:	ldr	r1, [fp, #-12]
   16924:	ldr	r0, [fp, #-8]
   16928:	bl	13fc8 <flatcc_builder_default_alloc@@Base+0x738>
   1692c:	mov	r3, r0
   16930:	mov	r0, r3
   16934:	sub	sp, fp, #4
   16938:	pop	{fp, pc}
   1693c:	andeq	r4, r0, r4, lsl r9
   16940:	andeq	r0, r0, r9, lsr #8
   16944:	andeq	r4, r0, r4, lsl #5
   16948:	andeq	r4, r0, r0, lsl r5

0001694c <flatcc_builder_start_table@@Base>:
   1694c:	push	{fp, lr}
   16950:	add	fp, sp, #4
   16954:	sub	sp, sp, #8
   16958:	str	r0, [fp, #-8]
   1695c:	str	r1, [fp, #-12]
   16960:	mov	r1, #4
   16964:	ldr	r0, [fp, #-8]
   16968:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1696c:	mov	r3, r0
   16970:	cmp	r3, #0
   16974:	beq	16980 <flatcc_builder_start_table@@Base+0x34>
   16978:	mvn	r3, #0
   1697c:	b	16a54 <flatcc_builder_start_table@@Base+0x108>
   16980:	ldr	r3, [fp, #-8]
   16984:	ldr	r3, [r3, #32]
   16988:	ldr	r2, [fp, #-8]
   1698c:	ldr	r2, [r2, #4]
   16990:	mov	r1, r2
   16994:	ldr	r2, [fp, #-8]
   16998:	ldr	r2, [r2, #52]	; 0x34
   1699c:	sub	r2, r1, r2
   169a0:	str	r2, [r3, #16]
   169a4:	ldr	r3, [fp, #-8]
   169a8:	ldr	r3, [r3, #32]
   169ac:	ldr	r2, [fp, #-8]
   169b0:	ldr	r2, [r2]
   169b4:	mov	r1, r2
   169b8:	ldr	r2, [fp, #-8]
   169bc:	ldr	r2, [r2, #76]	; 0x4c
   169c0:	sub	r2, r1, r2
   169c4:	str	r2, [r3, #20]
   169c8:	ldr	r3, [fp, #-8]
   169cc:	ldr	r3, [r3, #32]
   169d0:	ldr	r2, [fp, #-8]
   169d4:	ldr	r2, [r2, #12]
   169d8:	str	r2, [r3, #24]
   169dc:	ldr	r3, [fp, #-8]
   169e0:	ldr	r3, [r3, #32]
   169e4:	ldr	r2, [fp, #-8]
   169e8:	ldrh	r2, [r2, #8]
   169ec:	strh	r2, [r3, #28]
   169f0:	ldr	r3, [fp, #-8]
   169f4:	mov	r2, #0
   169f8:	str	r2, [r3, #12]
   169fc:	ldr	r3, [fp, #-8]
   16a00:	ldr	r2, [pc, #88]	; 16a60 <flatcc_builder_start_table@@Base+0x114>
   16a04:	str	r2, [r3, #12]
   16a08:	ldr	r3, [fp, #-8]
   16a0c:	mov	r2, #0
   16a10:	strh	r2, [r3, #8]
   16a14:	ldr	r3, [fp, #-8]
   16a18:	ldr	r3, [r3, #32]
   16a1c:	mov	r2, #3
   16a20:	strh	r2, [r3, #14]
   16a24:	ldr	r1, [fp, #-12]
   16a28:	ldr	r0, [fp, #-8]
   16a2c:	bl	13fc8 <flatcc_builder_default_alloc@@Base+0x738>
   16a30:	mov	r3, r0
   16a34:	cmp	r3, #0
   16a38:	beq	16a44 <flatcc_builder_start_table@@Base+0xf8>
   16a3c:	mvn	r3, #0
   16a40:	b	16a54 <flatcc_builder_start_table@@Base+0x108>
   16a44:	ldr	r1, [pc, #24]	; 16a64 <flatcc_builder_start_table@@Base+0x118>
   16a48:	ldr	r0, [fp, #-8]
   16a4c:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   16a50:	mov	r3, #0
   16a54:	mov	r0, r3
   16a58:	sub	sp, fp, #4
   16a5c:	pop	{fp, pc}
   16a60:	svccs	0x00693b52
   16a64:	strdeq	pc, [r0], -ip

00016a68 <flatcc_builder_create_vtable@@Base>:
   16a68:	push	{fp, lr}
   16a6c:	add	fp, sp, #4
   16a70:	sub	sp, sp, #96	; 0x60
   16a74:	str	r0, [fp, #-88]	; 0xffffffa8
   16a78:	str	r1, [fp, #-92]	; 0xffffffa4
   16a7c:	mov	r3, r2
   16a80:	strh	r3, [fp, #-94]	; 0xffffffa2
   16a84:	mov	r3, #0
   16a88:	str	r3, [fp, #-80]	; 0xffffffb0
   16a8c:	mov	r3, #0
   16a90:	str	r3, [fp, #-76]	; 0xffffffb4
   16a94:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16a98:	cmp	r3, #0
   16a9c:	beq	16af4 <flatcc_builder_create_vtable@@Base+0x8c>
   16aa0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16aa4:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16aa8:	add	r3, r2, r3
   16aac:	str	r3, [fp, #-80]	; 0xffffffb0
   16ab0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16ab4:	add	r3, r3, #1
   16ab8:	lsl	r3, r3, #3
   16abc:	sub	r2, fp, #4
   16ac0:	add	r3, r2, r3
   16ac4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16ac8:	str	r2, [r3, #-76]	; 0xffffffb4
   16acc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16ad0:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   16ad4:	add	r3, r3, #1
   16ad8:	lsl	r3, r3, #3
   16adc:	sub	r1, fp, #4
   16ae0:	add	r3, r1, r3
   16ae4:	str	r2, [r3, #-72]	; 0xffffffb8
   16ae8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16aec:	add	r3, r3, #1
   16af0:	str	r3, [fp, #-76]	; 0xffffffb4
   16af4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16af8:	ldr	r3, [r3, #152]	; 0x98
   16afc:	cmp	r3, #0
   16b00:	bne	16b3c <flatcc_builder_create_vtable@@Base+0xd4>
   16b04:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16b08:	ldr	r3, [r3, #180]	; 0xb4
   16b0c:	cmp	r3, #0
   16b10:	bne	16b3c <flatcc_builder_create_vtable@@Base+0xd4>
   16b14:	sub	r3, fp, #80	; 0x50
   16b18:	mov	r1, r3
   16b1c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16b20:	bl	14f10 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   16b24:	str	r0, [fp, #-8]
   16b28:	ldr	r3, [fp, #-8]
   16b2c:	cmp	r3, #0
   16b30:	bne	16b70 <flatcc_builder_create_vtable@@Base+0x108>
   16b34:	mov	r3, #0
   16b38:	b	16b74 <flatcc_builder_create_vtable@@Base+0x10c>
   16b3c:	sub	r3, fp, #80	; 0x50
   16b40:	mov	r1, r3
   16b44:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16b48:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   16b4c:	str	r0, [fp, #-8]
   16b50:	ldr	r3, [fp, #-8]
   16b54:	cmp	r3, #0
   16b58:	bne	16b64 <flatcc_builder_create_vtable@@Base+0xfc>
   16b5c:	mov	r3, #0
   16b60:	b	16b74 <flatcc_builder_create_vtable@@Base+0x10c>
   16b64:	ldr	r3, [fp, #-8]
   16b68:	add	r3, r3, #1
   16b6c:	str	r3, [fp, #-8]
   16b70:	ldr	r3, [fp, #-8]
   16b74:	mov	r0, r3
   16b78:	sub	sp, fp, #4
   16b7c:	pop	{fp, pc}

00016b80 <flatcc_builder_create_cached_vtable@@Base>:
   16b80:	push	{fp, lr}
   16b84:	add	fp, sp, #4
   16b88:	sub	sp, sp, #48	; 0x30
   16b8c:	str	r0, [fp, #-32]	; 0xffffffe0
   16b90:	str	r1, [fp, #-36]	; 0xffffffdc
   16b94:	str	r3, [fp, #-44]	; 0xffffffd4
   16b98:	strh	r2, [fp, #-38]	; 0xffffffda
   16b9c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16ba0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16ba4:	bl	14234 <flatcc_builder_default_alloc@@Base+0x9a4>
   16ba8:	str	r0, [fp, #-20]	; 0xffffffec
   16bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bb0:	cmp	r3, #0
   16bb4:	bne	16bc0 <flatcc_builder_create_cached_vtable@@Base+0x40>
   16bb8:	mov	r3, #0
   16bbc:	b	16e84 <flatcc_builder_create_cached_vtable@@Base+0x304>
   16bc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16bc4:	str	r3, [fp, #-12]
   16bc8:	ldr	r3, [fp, #-12]
   16bcc:	ldr	r3, [r3]
   16bd0:	str	r3, [fp, #-16]
   16bd4:	mov	r3, #0
   16bd8:	str	r3, [fp, #-8]
   16bdc:	b	16ce0 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16be0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16be4:	ldr	r2, [r3, #100]	; 0x64
   16be8:	ldr	r3, [fp, #-16]
   16bec:	add	r3, r2, r3
   16bf0:	str	r3, [fp, #-24]	; 0xffffffe8
   16bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bf8:	ldr	r2, [r3, #68]	; 0x44
   16bfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c00:	ldr	r3, [r3, #8]
   16c04:	add	r3, r2, r3
   16c08:	str	r3, [fp, #-28]	; 0xffffffe4
   16c0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c10:	ldrh	r3, [r3]
   16c14:	ldrh	r2, [fp, #-38]	; 0xffffffda
   16c18:	cmp	r2, r3
   16c1c:	bne	16c40 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   16c20:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16c24:	mov	r2, r3
   16c28:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16c2c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16c30:	bl	12000 <memcmp@plt>
   16c34:	mov	r3, r0
   16c38:	cmp	r3, #0
   16c3c:	beq	16c5c <flatcc_builder_create_cached_vtable@@Base+0xdc>
   16c40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c44:	add	r3, r3, #12
   16c48:	str	r3, [fp, #-12]
   16c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c50:	ldr	r3, [r3, #12]
   16c54:	str	r3, [fp, #-16]
   16c58:	b	16ce0 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c60:	ldr	r2, [r3, #4]
   16c64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c68:	ldr	r3, [r3, #152]	; 0x98
   16c6c:	cmp	r2, r3
   16c70:	beq	16c98 <flatcc_builder_create_cached_vtable@@Base+0x118>
   16c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c78:	str	r3, [fp, #-8]
   16c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c80:	add	r3, r3, #12
   16c84:	str	r3, [fp, #-12]
   16c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c8c:	ldr	r3, [r3, #12]
   16c90:	str	r3, [fp, #-16]
   16c94:	b	16ce0 <flatcc_builder_create_cached_vtable@@Base+0x160>
   16c98:	ldr	r2, [fp, #-12]
   16c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca0:	cmp	r2, r3
   16ca4:	beq	16cd4 <flatcc_builder_create_cached_vtable@@Base+0x154>
   16ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cac:	ldr	r2, [r3, #12]
   16cb0:	ldr	r3, [fp, #-12]
   16cb4:	str	r2, [r3]
   16cb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cbc:	ldr	r2, [r3]
   16cc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cc4:	str	r2, [r3, #12]
   16cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ccc:	ldr	r2, [fp, #-16]
   16cd0:	str	r2, [r3]
   16cd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cd8:	ldr	r3, [r3]
   16cdc:	b	16e84 <flatcc_builder_create_cached_vtable@@Base+0x304>
   16ce0:	ldr	r3, [fp, #-16]
   16ce4:	cmp	r3, #0
   16ce8:	bne	16be0 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cf0:	ldr	r2, [r3, #124]	; 0x7c
   16cf4:	mov	r3, #0
   16cf8:	str	r3, [sp]
   16cfc:	mov	r3, #16
   16d00:	mov	r1, #6
   16d04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16d08:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   16d0c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d14:	cmp	r3, #0
   16d18:	bne	16d24 <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   16d1c:	mov	r3, #0
   16d20:	b	16e84 <flatcc_builder_create_cached_vtable@@Base+0x304>
   16d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d28:	ldr	r3, [r3, #124]	; 0x7c
   16d2c:	str	r3, [fp, #-16]
   16d30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d34:	ldr	r3, [r3, #124]	; 0x7c
   16d38:	add	r2, r3, #16
   16d3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d40:	str	r2, [r3, #124]	; 0x7c
   16d44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d48:	ldr	r2, [r3, #152]	; 0x98
   16d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d50:	str	r2, [r3, #4]
   16d54:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d58:	ldr	r2, [r3]
   16d5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d60:	str	r2, [r3, #12]
   16d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d68:	ldr	r2, [fp, #-16]
   16d6c:	str	r2, [r3]
   16d70:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16d74:	mov	r2, r3
   16d78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16d7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16d80:	bl	16a68 <flatcc_builder_create_vtable@@Base>
   16d84:	mov	r2, r0
   16d88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d8c:	str	r2, [r3]
   16d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d94:	ldr	r3, [r3]
   16d98:	cmp	r3, #0
   16d9c:	bne	16da8 <flatcc_builder_create_cached_vtable@@Base+0x228>
   16da0:	mov	r3, #0
   16da4:	b	16e84 <flatcc_builder_create_cached_vtable@@Base+0x304>
   16da8:	ldr	r3, [fp, #-8]
   16dac:	cmp	r3, #0
   16db0:	beq	16dc8 <flatcc_builder_create_cached_vtable@@Base+0x248>
   16db4:	ldr	r3, [fp, #-8]
   16db8:	ldr	r2, [r3, #8]
   16dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dc0:	str	r2, [r3, #8]
   16dc4:	b	16e7c <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   16dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16dcc:	ldr	r3, [r3, #172]	; 0xac
   16dd0:	cmp	r3, #0
   16dd4:	beq	16e04 <flatcc_builder_create_cached_vtable@@Base+0x284>
   16dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ddc:	ldr	r2, [r3, #172]	; 0xac
   16de0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16de4:	ldr	r1, [r3, #120]	; 0x78
   16de8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16dec:	add	r3, r1, r3
   16df0:	cmp	r2, r3
   16df4:	bcs	16e04 <flatcc_builder_create_cached_vtable@@Base+0x284>
   16df8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16dfc:	bl	142ac <flatcc_builder_flush_vtable_cache@@Base>
   16e00:	b	16e7c <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   16e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e08:	ldr	r2, [r3, #120]	; 0x78
   16e0c:	ldrh	r1, [fp, #-38]	; 0xffffffda
   16e10:	mov	r3, #0
   16e14:	str	r3, [sp]
   16e18:	mov	r3, r1
   16e1c:	mov	r1, #2
   16e20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e24:	bl	13ef0 <flatcc_builder_default_alloc@@Base+0x660>
   16e28:	str	r0, [fp, #-28]	; 0xffffffe4
   16e2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e30:	cmp	r3, #0
   16e34:	bne	16e40 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   16e38:	mvn	r3, #0
   16e3c:	b	16e84 <flatcc_builder_create_cached_vtable@@Base+0x304>
   16e40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e44:	ldr	r2, [r3, #120]	; 0x78
   16e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e4c:	str	r2, [r3, #8]
   16e50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e54:	ldr	r2, [r3, #120]	; 0x78
   16e58:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16e5c:	add	r2, r2, r3
   16e60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e64:	str	r2, [r3, #120]	; 0x78
   16e68:	ldrh	r3, [fp, #-38]	; 0xffffffda
   16e6c:	mov	r2, r3
   16e70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16e74:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16e78:	bl	11ff4 <memcpy@plt>
   16e7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e80:	ldr	r3, [r3]
   16e84:	mov	r0, r3
   16e88:	sub	sp, fp, #4
   16e8c:	pop	{fp, pc}

00016e90 <flatcc_builder_create_table@@Base>:
   16e90:	push	{r4, fp, lr}
   16e94:	add	fp, sp, #8
   16e98:	sub	sp, sp, #124	; 0x7c
   16e9c:	str	r0, [fp, #-120]	; 0xffffff88
   16ea0:	str	r1, [fp, #-124]	; 0xffffff84
   16ea4:	str	r2, [fp, #-128]	; 0xffffff80
   16ea8:	strh	r3, [fp, #-130]	; 0xffffff7e
   16eac:	ldr	r4, [pc, #728]	; 1718c <flatcc_builder_create_table@@Base+0x2fc>
   16eb0:	add	r4, pc, r4
   16eb4:	ldr	r3, [fp, #8]
   16eb8:	cmp	r3, #0
   16ebc:	bge	16ee0 <flatcc_builder_create_table@@Base+0x50>
   16ec0:	ldr	r3, [pc, #712]	; 17190 <flatcc_builder_create_table@@Base+0x300>
   16ec4:	add	r3, pc, r3
   16ec8:	ldr	r2, [pc, #708]	; 17194 <flatcc_builder_create_table@@Base+0x304>
   16ecc:	ldr	r1, [pc, #708]	; 17198 <flatcc_builder_create_table@@Base+0x308>
   16ed0:	add	r1, pc, r1
   16ed4:	ldr	r0, [pc, #704]	; 1719c <flatcc_builder_create_table@@Base+0x30c>
   16ed8:	add	r0, pc, r0
   16edc:	bl	120b4 <__assert_fail@plt>
   16ee0:	ldr	r3, [fp, #12]
   16ee4:	and	r3, r3, #1
   16ee8:	cmp	r3, #0
   16eec:	bne	16f10 <flatcc_builder_create_table@@Base+0x80>
   16ef0:	ldr	r3, [pc, #680]	; 171a0 <flatcc_builder_create_table@@Base+0x310>
   16ef4:	add	r3, pc, r3
   16ef8:	ldr	r2, [pc, #676]	; 171a4 <flatcc_builder_create_table@@Base+0x314>
   16efc:	ldr	r1, [pc, #676]	; 171a8 <flatcc_builder_create_table@@Base+0x318>
   16f00:	add	r1, pc, r1
   16f04:	ldr	r0, [pc, #672]	; 171ac <flatcc_builder_create_table@@Base+0x31c>
   16f08:	add	r0, pc, r0
   16f0c:	bl	120b4 <__assert_fail@plt>
   16f10:	sub	r3, fp, #130	; 0x82
   16f14:	mov	r1, #4
   16f18:	mov	r0, r3
   16f1c:	bl	14794 <flatcc_builder_clear@@Base+0xf8>
   16f20:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   16f24:	mov	r1, r3
   16f28:	ldr	r0, [fp, #-120]	; 0xffffff88
   16f2c:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   16f30:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   16f34:	mov	r2, r3
   16f38:	ldr	r1, [fp, #-128]	; 0xffffff80
   16f3c:	ldr	r0, [fp, #-120]	; 0xffffff88
   16f40:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   16f44:	str	r0, [fp, #-20]	; 0xffffffec
   16f48:	ldr	r3, [fp, #-120]	; 0xffffff88
   16f4c:	ldr	r3, [r3, #136]	; 0x88
   16f50:	mov	r1, r3
   16f54:	ldr	r2, [fp, #-20]	; 0xffffffec
   16f58:	ldr	r3, [fp, #-128]	; 0xffffff80
   16f5c:	add	r3, r2, r3
   16f60:	sub	r3, r1, r3
   16f64:	sub	r3, r3, #4
   16f68:	str	r3, [fp, #-24]	; 0xffffffe8
   16f6c:	ldr	r3, [fp, #12]
   16f70:	sub	r3, r3, #1
   16f74:	str	r3, [fp, #-28]	; 0xffffffe4
   16f78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16f7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f80:	sub	r3, r2, r3
   16f84:	str	r3, [fp, #-32]	; 0xffffffe0
   16f88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16f8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f90:	sub	r2, r2, r3
   16f94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f98:	cmp	r2, r3
   16f9c:	beq	16fa8 <flatcc_builder_create_table@@Base+0x118>
   16fa0:	mvn	r3, #0
   16fa4:	b	17180 <flatcc_builder_create_table@@Base+0x2f0>
   16fa8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16fac:	bl	1374c <main@@Base+0xd8>
   16fb0:	mov	r3, r0
   16fb4:	str	r3, [fp, #-44]	; 0xffffffd4
   16fb8:	mov	r3, #0
   16fbc:	str	r3, [fp, #-16]
   16fc0:	b	17038 <flatcc_builder_create_table@@Base+0x1a8>
   16fc4:	ldr	r3, [fp, #-16]
   16fc8:	lsl	r3, r3, #1
   16fcc:	ldr	r2, [fp, #4]
   16fd0:	add	r3, r2, r3
   16fd4:	ldrh	r3, [r3]
   16fd8:	mov	r2, r3
   16fdc:	ldr	r3, [fp, #-124]	; 0xffffff84
   16fe0:	add	r3, r2, r3
   16fe4:	str	r3, [fp, #-36]	; 0xffffffdc
   16fe8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16fec:	ldr	r2, [r3]
   16ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ff4:	sub	r3, r2, r3
   16ff8:	ldr	r2, [fp, #-16]
   16ffc:	lsl	r2, r2, #1
   17000:	ldr	r1, [fp, #4]
   17004:	add	r2, r1, r2
   17008:	ldrh	r2, [r2]
   1700c:	sub	r3, r3, r2
   17010:	sub	r3, r3, #4
   17014:	str	r3, [fp, #-40]	; 0xffffffd8
   17018:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1701c:	bl	1374c <main@@Base+0xd8>
   17020:	mov	r2, r0
   17024:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17028:	str	r2, [r3]
   1702c:	ldr	r3, [fp, #-16]
   17030:	add	r3, r3, #1
   17034:	str	r3, [fp, #-16]
   17038:	ldr	r2, [fp, #-16]
   1703c:	ldr	r3, [fp, #8]
   17040:	cmp	r2, r3
   17044:	blt	16fc4 <flatcc_builder_create_table@@Base+0x134>
   17048:	mov	r3, #0
   1704c:	str	r3, [fp, #-116]	; 0xffffff8c
   17050:	mov	r3, #0
   17054:	str	r3, [fp, #-112]	; 0xffffff90
   17058:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1705c:	add	r3, r3, #4
   17060:	str	r3, [fp, #-116]	; 0xffffff8c
   17064:	ldr	r3, [fp, #-112]	; 0xffffff90
   17068:	add	r3, r3, #1
   1706c:	lsl	r3, r3, #3
   17070:	sub	r2, fp, #12
   17074:	add	r3, r2, r3
   17078:	sub	r2, fp, #44	; 0x2c
   1707c:	str	r2, [r3, #-104]	; 0xffffff98
   17080:	ldr	r3, [fp, #-112]	; 0xffffff90
   17084:	add	r3, r3, #1
   17088:	lsl	r3, r3, #3
   1708c:	sub	r2, fp, #12
   17090:	add	r3, r2, r3
   17094:	mov	r2, #4
   17098:	str	r2, [r3, #-100]	; 0xffffff9c
   1709c:	ldr	r3, [fp, #-112]	; 0xffffff90
   170a0:	add	r3, r3, #1
   170a4:	str	r3, [fp, #-112]	; 0xffffff90
   170a8:	ldr	r3, [fp, #-128]	; 0xffffff80
   170ac:	cmp	r3, #0
   170b0:	beq	17108 <flatcc_builder_create_table@@Base+0x278>
   170b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   170b8:	ldr	r3, [fp, #-128]	; 0xffffff80
   170bc:	add	r3, r2, r3
   170c0:	str	r3, [fp, #-116]	; 0xffffff8c
   170c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   170c8:	add	r3, r3, #1
   170cc:	lsl	r3, r3, #3
   170d0:	sub	r2, fp, #12
   170d4:	add	r3, r2, r3
   170d8:	ldr	r2, [fp, #-124]	; 0xffffff84
   170dc:	str	r2, [r3, #-104]	; 0xffffff98
   170e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   170e4:	add	r3, r3, #1
   170e8:	lsl	r3, r3, #3
   170ec:	sub	r2, fp, #12
   170f0:	add	r3, r2, r3
   170f4:	ldr	r2, [fp, #-128]	; 0xffffff80
   170f8:	str	r2, [r3, #-100]	; 0xffffff9c
   170fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   17100:	add	r3, r3, #1
   17104:	str	r3, [fp, #-112]	; 0xffffff90
   17108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1710c:	cmp	r3, #0
   17110:	beq	1716c <flatcc_builder_create_table@@Base+0x2dc>
   17114:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1711c:	add	r3, r2, r3
   17120:	str	r3, [fp, #-116]	; 0xffffff8c
   17124:	ldr	r3, [fp, #-112]	; 0xffffff90
   17128:	add	r3, r3, #1
   1712c:	lsl	r3, r3, #3
   17130:	sub	r2, fp, #12
   17134:	add	r3, r2, r3
   17138:	ldr	r2, [pc, #112]	; 171b0 <flatcc_builder_create_table@@Base+0x320>
   1713c:	ldr	r2, [r4, r2]
   17140:	str	r2, [r3, #-104]	; 0xffffff98
   17144:	ldr	r3, [fp, #-112]	; 0xffffff90
   17148:	add	r3, r3, #1
   1714c:	lsl	r3, r3, #3
   17150:	sub	r2, fp, #12
   17154:	add	r3, r2, r3
   17158:	ldr	r2, [fp, #-20]	; 0xffffffec
   1715c:	str	r2, [r3, #-100]	; 0xffffff9c
   17160:	ldr	r3, [fp, #-112]	; 0xffffff90
   17164:	add	r3, r3, #1
   17168:	str	r3, [fp, #-112]	; 0xffffff90
   1716c:	sub	r3, fp, #116	; 0x74
   17170:	mov	r1, r3
   17174:	ldr	r0, [fp, #-120]	; 0xffffff88
   17178:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1717c:	mov	r3, r0
   17180:	mov	r0, r3
   17184:	sub	sp, fp, #8
   17188:	pop	{r4, fp, pc}
   1718c:	andeq	r5, r1, r8, asr #2
   17190:	andeq	r4, r0, r4, ror r3
   17194:	ldrdeq	r0, [r0], -r5
   17198:	andeq	r3, r0, r4, asr #25
   1719c:	andeq	r3, r0, ip, asr pc
   171a0:	andeq	r4, r0, r4, asr #6
   171a4:	ldrdeq	r0, [r0], -fp
   171a8:	muleq	r0, r4, ip
   171ac:	andeq	r3, r0, r0, asr #30
   171b0:	andeq	r0, r0, r8, asr r0

000171b4 <flatcc_builder_check_required_field@@Base>:
   171b4:	push	{fp, lr}
   171b8:	add	fp, sp, #4
   171bc:	sub	sp, sp, #8
   171c0:	str	r0, [fp, #-8]
   171c4:	mov	r3, r1
   171c8:	strh	r3, [fp, #-10]
   171cc:	ldr	r3, [fp, #-8]
   171d0:	ldr	r3, [r3, #32]
   171d4:	ldrh	r3, [r3, #14]
   171d8:	cmp	r3, #3
   171dc:	beq	17200 <flatcc_builder_check_required_field@@Base+0x4c>
   171e0:	ldr	r3, [pc, #100]	; 1724c <flatcc_builder_check_required_field@@Base+0x98>
   171e4:	add	r3, pc, r3
   171e8:	ldr	r2, [pc, #96]	; 17250 <flatcc_builder_check_required_field@@Base+0x9c>
   171ec:	ldr	r1, [pc, #96]	; 17254 <flatcc_builder_check_required_field@@Base+0xa0>
   171f0:	add	r1, pc, r1
   171f4:	ldr	r0, [pc, #92]	; 17258 <flatcc_builder_check_required_field@@Base+0xa4>
   171f8:	add	r0, pc, r0
   171fc:	bl	120b4 <__assert_fail@plt>
   17200:	ldr	r3, [fp, #-8]
   17204:	ldrh	r3, [r3, #8]
   17208:	ldrh	r2, [fp, #-10]
   1720c:	cmp	r2, r3
   17210:	bcs	1723c <flatcc_builder_check_required_field@@Base+0x88>
   17214:	ldr	r3, [fp, #-8]
   17218:	ldr	r2, [r3, #4]
   1721c:	ldrh	r3, [fp, #-10]
   17220:	lsl	r3, r3, #1
   17224:	add	r3, r2, r3
   17228:	ldrh	r3, [r3]
   1722c:	cmp	r3, #0
   17230:	beq	1723c <flatcc_builder_check_required_field@@Base+0x88>
   17234:	mov	r3, #1
   17238:	b	17240 <flatcc_builder_check_required_field@@Base+0x8c>
   1723c:	mov	r3, #0
   17240:	mov	r0, r3
   17244:	sub	sp, fp, #4
   17248:	pop	{fp, pc}
   1724c:	andeq	r4, r0, r0, ror r0
   17250:	strdeq	r0, [r0], -r8
   17254:	andeq	r3, r0, r4, lsr #19
   17258:	andeq	r3, r0, ip, asr ip

0001725c <flatcc_builder_check_union_field@@Base>:
   1725c:	push	{fp, lr}
   17260:	add	fp, sp, #4
   17264:	sub	sp, sp, #8
   17268:	str	r0, [fp, #-8]
   1726c:	mov	r3, r1
   17270:	strh	r3, [fp, #-10]
   17274:	ldr	r3, [fp, #-8]
   17278:	ldr	r3, [r3, #32]
   1727c:	ldrh	r3, [r3, #14]
   17280:	cmp	r3, #3
   17284:	beq	172a8 <flatcc_builder_check_union_field@@Base+0x4c>
   17288:	ldr	r3, [pc, #292]	; 173b4 <flatcc_builder_check_union_field@@Base+0x158>
   1728c:	add	r3, pc, r3
   17290:	ldr	r2, [pc, #288]	; 173b8 <flatcc_builder_check_union_field@@Base+0x15c>
   17294:	ldr	r1, [pc, #288]	; 173bc <flatcc_builder_check_union_field@@Base+0x160>
   17298:	add	r1, pc, r1
   1729c:	ldr	r0, [pc, #284]	; 173c0 <flatcc_builder_check_union_field@@Base+0x164>
   172a0:	add	r0, pc, r0
   172a4:	bl	120b4 <__assert_fail@plt>
   172a8:	ldrh	r3, [fp, #-10]
   172ac:	cmp	r3, #0
   172b0:	beq	172c8 <flatcc_builder_check_union_field@@Base+0x6c>
   172b4:	ldr	r3, [fp, #-8]
   172b8:	ldrh	r3, [r3, #8]
   172bc:	ldrh	r2, [fp, #-10]
   172c0:	cmp	r2, r3
   172c4:	bcc	172d0 <flatcc_builder_check_union_field@@Base+0x74>
   172c8:	mov	r3, #0
   172cc:	b	173a8 <flatcc_builder_check_union_field@@Base+0x14c>
   172d0:	ldr	r3, [fp, #-8]
   172d4:	ldr	r2, [r3, #4]
   172d8:	ldrh	r3, [fp, #-10]
   172dc:	sub	r3, r3, #-2147483647	; 0x80000001
   172e0:	lsl	r3, r3, #1
   172e4:	add	r3, r2, r3
   172e8:	ldrh	r3, [r3]
   172ec:	cmp	r3, #0
   172f0:	bne	17320 <flatcc_builder_check_union_field@@Base+0xc4>
   172f4:	ldr	r3, [fp, #-8]
   172f8:	ldr	r2, [r3, #4]
   172fc:	ldrh	r3, [fp, #-10]
   17300:	lsl	r3, r3, #1
   17304:	add	r3, r2, r3
   17308:	ldrh	r3, [r3]
   1730c:	cmp	r3, #0
   17310:	moveq	r3, #1
   17314:	movne	r3, #0
   17318:	uxtb	r3, r3
   1731c:	b	173a8 <flatcc_builder_check_union_field@@Base+0x14c>
   17320:	ldr	r3, [fp, #-8]
   17324:	ldr	r3, [r3, #16]
   17328:	ldr	r2, [fp, #-8]
   1732c:	ldr	r1, [r2, #4]
   17330:	ldrh	r2, [fp, #-10]
   17334:	sub	r2, r2, #-2147483647	; 0x80000001
   17338:	lsl	r2, r2, #1
   1733c:	add	r2, r1, r2
   17340:	ldrh	r2, [r2]
   17344:	add	r3, r3, r2
   17348:	ldrb	r3, [r3]
   1734c:	cmp	r3, #0
   17350:	beq	17380 <flatcc_builder_check_union_field@@Base+0x124>
   17354:	ldr	r3, [fp, #-8]
   17358:	ldr	r2, [r3, #4]
   1735c:	ldrh	r3, [fp, #-10]
   17360:	lsl	r3, r3, #1
   17364:	add	r3, r2, r3
   17368:	ldrh	r3, [r3]
   1736c:	cmp	r3, #0
   17370:	movne	r3, #1
   17374:	moveq	r3, #0
   17378:	uxtb	r3, r3
   1737c:	b	173a8 <flatcc_builder_check_union_field@@Base+0x14c>
   17380:	ldr	r3, [fp, #-8]
   17384:	ldr	r2, [r3, #4]
   17388:	ldrh	r3, [fp, #-10]
   1738c:	lsl	r3, r3, #1
   17390:	add	r3, r2, r3
   17394:	ldrh	r3, [r3]
   17398:	cmp	r3, #0
   1739c:	moveq	r3, #1
   173a0:	movne	r3, #0
   173a4:	uxtb	r3, r3
   173a8:	mov	r0, r3
   173ac:	sub	sp, fp, #4
   173b0:	pop	{fp, pc}
   173b4:	andeq	r3, r0, ip, ror #31
   173b8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   173bc:	strdeq	r3, [r0], -ip
   173c0:			; <UNDEFINED> instruction: 0x00003bb4

000173c4 <flatcc_builder_check_required@@Base>:
   173c4:	push	{fp, lr}
   173c8:	add	fp, sp, #4
   173cc:	sub	sp, sp, #24
   173d0:	str	r0, [fp, #-16]
   173d4:	str	r1, [fp, #-20]	; 0xffffffec
   173d8:	str	r2, [fp, #-24]	; 0xffffffe8
   173dc:	ldr	r3, [fp, #-16]
   173e0:	ldr	r3, [r3, #32]
   173e4:	ldrh	r3, [r3, #14]
   173e8:	cmp	r3, #3
   173ec:	beq	17410 <flatcc_builder_check_required@@Base+0x4c>
   173f0:	ldr	r3, [pc, #168]	; 174a0 <flatcc_builder_check_required@@Base+0xdc>
   173f4:	add	r3, pc, r3
   173f8:	ldr	r2, [pc, #164]	; 174a4 <flatcc_builder_check_required@@Base+0xe0>
   173fc:	ldr	r1, [pc, #164]	; 174a8 <flatcc_builder_check_required@@Base+0xe4>
   17400:	add	r1, pc, r1
   17404:	ldr	r0, [pc, #160]	; 174ac <flatcc_builder_check_required@@Base+0xe8>
   17408:	add	r0, pc, r0
   1740c:	bl	120b4 <__assert_fail@plt>
   17410:	ldr	r3, [fp, #-16]
   17414:	ldrh	r3, [r3, #8]
   17418:	mov	r2, r3
   1741c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17420:	cmp	r2, r3
   17424:	bge	17430 <flatcc_builder_check_required@@Base+0x6c>
   17428:	mov	r3, #0
   1742c:	b	17494 <flatcc_builder_check_required@@Base+0xd0>
   17430:	mov	r3, #0
   17434:	str	r3, [fp, #-8]
   17438:	b	17480 <flatcc_builder_check_required@@Base+0xbc>
   1743c:	ldr	r3, [fp, #-16]
   17440:	ldr	r2, [r3, #4]
   17444:	ldr	r3, [fp, #-8]
   17448:	lsl	r3, r3, #1
   1744c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17450:	add	r3, r1, r3
   17454:	ldrh	r3, [r3]
   17458:	lsl	r3, r3, #1
   1745c:	add	r3, r2, r3
   17460:	ldrh	r3, [r3]
   17464:	cmp	r3, #0
   17468:	bne	17474 <flatcc_builder_check_required@@Base+0xb0>
   1746c:	mov	r3, #0
   17470:	b	17494 <flatcc_builder_check_required@@Base+0xd0>
   17474:	ldr	r3, [fp, #-8]
   17478:	add	r3, r3, #1
   1747c:	str	r3, [fp, #-8]
   17480:	ldr	r2, [fp, #-8]
   17484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17488:	cmp	r2, r3
   1748c:	blt	1743c <flatcc_builder_check_required@@Base+0x78>
   17490:	mov	r3, #1
   17494:	mov	r0, r3
   17498:	sub	sp, fp, #4
   1749c:	pop	{fp, pc}
   174a0:	andeq	r3, r0, r8, lsr #29
   174a4:	andeq	r0, r0, r1, lsl r5
   174a8:	muleq	r0, r4, r7
   174ac:	andeq	r3, r0, ip, asr #20

000174b0 <flatcc_builder_end_table@@Base>:
   174b0:	push	{fp, lr}
   174b4:	add	fp, sp, #4
   174b8:	sub	sp, sp, #48	; 0x30
   174bc:	str	r0, [fp, #-32]	; 0xffffffe0
   174c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174c4:	ldr	r3, [r3, #32]
   174c8:	ldrh	r3, [r3, #14]
   174cc:	cmp	r3, #3
   174d0:	beq	174f4 <flatcc_builder_end_table@@Base+0x44>
   174d4:	ldr	r3, [pc, #508]	; 176d8 <flatcc_builder_end_table@@Base+0x228>
   174d8:	add	r3, pc, r3
   174dc:	ldr	r2, [pc, #504]	; 176dc <flatcc_builder_end_table@@Base+0x22c>
   174e0:	ldr	r1, [pc, #504]	; 176e0 <flatcc_builder_end_table@@Base+0x230>
   174e4:	add	r1, pc, r1
   174e8:	ldr	r0, [pc, #500]	; 176e4 <flatcc_builder_end_table@@Base+0x234>
   174ec:	add	r0, pc, r0
   174f0:	bl	120b4 <__assert_fail@plt>
   174f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174f8:	ldr	r3, [r3, #4]
   174fc:	sub	r3, r3, #4
   17500:	str	r3, [fp, #-8]
   17504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17508:	ldrh	r3, [r3, #8]
   1750c:	add	r3, r3, #2
   17510:	uxth	r3, r3
   17514:	lsl	r3, r3, #1
   17518:	strh	r3, [fp, #-10]
   1751c:	ldr	r3, [fp, #-8]
   17520:	ldrh	r2, [fp, #-10]
   17524:	strh	r2, [r3]
   17528:	ldr	r3, [fp, #-8]
   1752c:	add	r3, r3, #2
   17530:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17534:	ldr	r2, [r2, #20]
   17538:	uxth	r2, r2
   1753c:	add	r2, r2, #4
   17540:	uxth	r2, r2
   17544:	strh	r2, [r3]
   17548:	ldr	r3, [fp, #-8]
   1754c:	ldrh	r3, [r3]
   17550:	mov	r2, r3
   17554:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17558:	ldr	r3, [r3, #12]
   1755c:	eor	r3, r3, r2
   17560:	ldr	r2, [pc, #384]	; 176e8 <flatcc_builder_end_table@@Base+0x238>
   17564:	mul	r3, r2, r3
   17568:	ldr	r2, [fp, #-8]
   1756c:	add	r2, r2, #2
   17570:	ldrh	r2, [r2]
   17574:	eor	r3, r3, r2
   17578:	ldr	r2, [pc, #360]	; 176e8 <flatcc_builder_end_table@@Base+0x238>
   1757c:	mul	r2, r2, r3
   17580:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17584:	str	r2, [r3, #12]
   17588:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1758c:	ldr	r3, [r3, #12]
   17590:	ldrh	r2, [fp, #-10]
   17594:	ldr	r1, [fp, #-8]
   17598:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1759c:	bl	16b80 <flatcc_builder_create_cached_vtable@@Base>
   175a0:	str	r0, [fp, #-16]
   175a4:	ldr	r3, [fp, #-16]
   175a8:	cmp	r3, #0
   175ac:	bne	175b8 <flatcc_builder_end_table@@Base+0x108>
   175b0:	mov	r3, #0
   175b4:	b	176cc <flatcc_builder_end_table@@Base+0x21c>
   175b8:	ldrh	r3, [fp, #-10]
   175bc:	mov	r2, r3
   175c0:	mov	r1, #0
   175c4:	ldr	r0, [fp, #-8]
   175c8:	bl	12078 <memset@plt>
   175cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175d0:	ldr	r2, [r3, #76]	; 0x4c
   175d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175d8:	ldr	r3, [r3, #32]
   175dc:	ldr	r3, [r3, #20]
   175e0:	add	r3, r2, r3
   175e4:	str	r3, [fp, #-20]	; 0xffffffec
   175e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175ec:	ldr	r3, [r3]
   175f0:	mov	r2, r3
   175f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   175f8:	sub	r3, r2, r3
   175fc:	asr	r3, r3, #1
   17600:	str	r3, [fp, #-24]	; 0xffffffe8
   17604:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17608:	ldr	r1, [r3, #16]
   1760c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17610:	ldr	r2, [r3, #20]
   17614:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17618:	ldrh	r0, [r3, #130]	; 0x82
   1761c:	ldr	r3, [fp, #-16]
   17620:	str	r3, [sp, #8]
   17624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17628:	str	r3, [sp, #4]
   1762c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17630:	str	r3, [sp]
   17634:	mov	r3, r0
   17638:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1763c:	bl	16e90 <flatcc_builder_create_table@@Base>
   17640:	str	r0, [fp, #-28]	; 0xffffffe4
   17644:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17648:	cmp	r3, #0
   1764c:	bne	17658 <flatcc_builder_end_table@@Base+0x1a8>
   17650:	mov	r3, #0
   17654:	b	176cc <flatcc_builder_end_table@@Base+0x21c>
   17658:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1765c:	ldr	r3, [r3, #32]
   17660:	ldr	r2, [r3, #24]
   17664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17668:	str	r2, [r3, #12]
   1766c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17670:	ldr	r3, [r3, #32]
   17674:	ldrh	r2, [r3, #28]
   17678:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1767c:	strh	r2, [r3, #8]
   17680:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17684:	ldr	r2, [r3, #52]	; 0x34
   17688:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1768c:	ldr	r3, [r3, #32]
   17690:	ldr	r3, [r3, #16]
   17694:	add	r2, r2, r3
   17698:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1769c:	str	r2, [r3, #4]
   176a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   176a4:	ldr	r2, [r3, #76]	; 0x4c
   176a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   176ac:	ldr	r3, [r3, #32]
   176b0:	ldr	r3, [r3, #20]
   176b4:	add	r2, r2, r3
   176b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   176bc:	str	r2, [r3]
   176c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176c4:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   176c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   176cc:	mov	r0, r3
   176d0:	sub	sp, fp, #4
   176d4:	pop	{fp, pc}
   176d8:	andeq	r3, r0, r4, ror #27
   176dc:	andeq	r0, r0, r5, lsr #10
   176e0:			; <UNDEFINED> instruction: 0x000036b0
   176e4:	andeq	r3, r0, r8, ror #18
   176e8:			; <UNDEFINED> instruction: 0x9e3779b1

000176ec <flatcc_builder_create_vector@@Base>:
   176ec:	push	{r4, fp, lr}
   176f0:	add	fp, sp, #8
   176f4:	sub	sp, sp, #108	; 0x6c
   176f8:	str	r0, [fp, #-104]	; 0xffffff98
   176fc:	str	r1, [fp, #-108]	; 0xffffff94
   17700:	str	r2, [fp, #-112]	; 0xffffff90
   17704:	str	r3, [fp, #-116]	; 0xffffff8c
   17708:	ldr	r4, [pc, #484]	; 178f4 <flatcc_builder_create_vector@@Base+0x208>
   1770c:	add	r4, pc, r4
   17710:	ldr	r2, [fp, #-112]	; 0xffffff90
   17714:	ldr	r3, [fp, #8]
   17718:	cmp	r2, r3
   1771c:	bls	17758 <flatcc_builder_create_vector@@Base+0x6c>
   17720:	ldr	r2, [fp, #-112]	; 0xffffff90
   17724:	ldr	r3, [fp, #8]
   17728:	cmp	r2, r3
   1772c:	bls	17750 <flatcc_builder_create_vector@@Base+0x64>
   17730:	ldr	r3, [pc, #448]	; 178f8 <flatcc_builder_create_vector@@Base+0x20c>
   17734:	add	r3, pc, r3
   17738:	ldr	r2, [pc, #444]	; 178fc <flatcc_builder_create_vector@@Base+0x210>
   1773c:	ldr	r1, [pc, #444]	; 17900 <flatcc_builder_create_vector@@Base+0x214>
   17740:	add	r1, pc, r1
   17744:	ldr	r0, [pc, #440]	; 17904 <flatcc_builder_create_vector@@Base+0x218>
   17748:	add	r0, pc, r0
   1774c:	bl	120b4 <__assert_fail@plt>
   17750:	mov	r3, #0
   17754:	b	178e8 <flatcc_builder_create_vector@@Base+0x1fc>
   17758:	mov	r1, #4
   1775c:	add	r3, fp, #4
   17760:	mov	r0, r3
   17764:	bl	14794 <flatcc_builder_clear@@Base+0xf8>
   17768:	ldrh	r3, [fp, #4]
   1776c:	mov	r1, r3
   17770:	ldr	r0, [fp, #-104]	; 0xffffff98
   17774:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   17778:	ldr	r3, [fp, #-112]	; 0xffffff90
   1777c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17780:	mul	r3, r2, r3
   17784:	str	r3, [fp, #-16]
   17788:	ldr	r0, [fp, #-112]	; 0xffffff90
   1778c:	bl	1374c <main@@Base+0xd8>
   17790:	mov	r3, r0
   17794:	str	r3, [fp, #-24]	; 0xffffffe8
   17798:	ldrh	r3, [fp, #4]
   1779c:	mov	r2, r3
   177a0:	ldr	r1, [fp, #-16]
   177a4:	ldr	r0, [fp, #-104]	; 0xffffff98
   177a8:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   177ac:	str	r0, [fp, #-20]	; 0xffffffec
   177b0:	mov	r3, #0
   177b4:	str	r3, [fp, #-96]	; 0xffffffa0
   177b8:	mov	r3, #0
   177bc:	str	r3, [fp, #-92]	; 0xffffffa4
   177c0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   177c4:	add	r3, r3, #4
   177c8:	str	r3, [fp, #-96]	; 0xffffffa0
   177cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   177d0:	add	r3, r3, #1
   177d4:	lsl	r3, r3, #3
   177d8:	sub	r2, fp, #12
   177dc:	add	r3, r2, r3
   177e0:	sub	r2, fp, #24
   177e4:	str	r2, [r3, #-84]	; 0xffffffac
   177e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   177ec:	add	r3, r3, #1
   177f0:	lsl	r3, r3, #3
   177f4:	sub	r2, fp, #12
   177f8:	add	r3, r2, r3
   177fc:	mov	r2, #4
   17800:	str	r2, [r3, #-80]	; 0xffffffb0
   17804:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17808:	add	r3, r3, #1
   1780c:	str	r3, [fp, #-92]	; 0xffffffa4
   17810:	ldr	r3, [fp, #-16]
   17814:	cmp	r3, #0
   17818:	beq	17870 <flatcc_builder_create_vector@@Base+0x184>
   1781c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17820:	ldr	r3, [fp, #-16]
   17824:	add	r3, r2, r3
   17828:	str	r3, [fp, #-96]	; 0xffffffa0
   1782c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17830:	add	r3, r3, #1
   17834:	lsl	r3, r3, #3
   17838:	sub	r2, fp, #12
   1783c:	add	r3, r2, r3
   17840:	ldr	r2, [fp, #-108]	; 0xffffff94
   17844:	str	r2, [r3, #-84]	; 0xffffffac
   17848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1784c:	add	r3, r3, #1
   17850:	lsl	r3, r3, #3
   17854:	sub	r2, fp, #12
   17858:	add	r3, r2, r3
   1785c:	ldr	r2, [fp, #-16]
   17860:	str	r2, [r3, #-80]	; 0xffffffb0
   17864:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17868:	add	r3, r3, #1
   1786c:	str	r3, [fp, #-92]	; 0xffffffa4
   17870:	ldr	r3, [fp, #-20]	; 0xffffffec
   17874:	cmp	r3, #0
   17878:	beq	178d4 <flatcc_builder_create_vector@@Base+0x1e8>
   1787c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17880:	ldr	r3, [fp, #-20]	; 0xffffffec
   17884:	add	r3, r2, r3
   17888:	str	r3, [fp, #-96]	; 0xffffffa0
   1788c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17890:	add	r3, r3, #1
   17894:	lsl	r3, r3, #3
   17898:	sub	r2, fp, #12
   1789c:	add	r3, r2, r3
   178a0:	ldr	r2, [pc, #96]	; 17908 <flatcc_builder_create_vector@@Base+0x21c>
   178a4:	ldr	r2, [r4, r2]
   178a8:	str	r2, [r3, #-84]	; 0xffffffac
   178ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   178b0:	add	r3, r3, #1
   178b4:	lsl	r3, r3, #3
   178b8:	sub	r2, fp, #12
   178bc:	add	r3, r2, r3
   178c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   178c4:	str	r2, [r3, #-80]	; 0xffffffb0
   178c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   178cc:	add	r3, r3, #1
   178d0:	str	r3, [fp, #-92]	; 0xffffffa4
   178d4:	sub	r3, fp, #96	; 0x60
   178d8:	mov	r1, r3
   178dc:	ldr	r0, [fp, #-104]	; 0xffffff98
   178e0:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   178e4:	mov	r3, r0
   178e8:	mov	r0, r3
   178ec:	sub	sp, fp, #8
   178f0:	pop	{r4, fp, pc}
   178f4:	andeq	r4, r1, ip, ror #17
   178f8:	andeq	r3, r0, r4, lsr #23
   178fc:	andeq	r0, r0, r5, asr r5
   17900:	andeq	r3, r0, r4, asr r4
   17904:	andeq	r3, r0, r8, lsr r7
   17908:	andeq	r0, r0, r8, asr r0

0001790c <flatcc_builder_end_vector@@Base>:
   1790c:	push	{fp, lr}
   17910:	add	fp, sp, #4
   17914:	sub	sp, sp, #24
   17918:	str	r0, [fp, #-16]
   1791c:	ldr	r3, [fp, #-16]
   17920:	ldr	r3, [r3, #32]
   17924:	ldrh	r3, [r3, #14]
   17928:	cmp	r3, #4
   1792c:	beq	17950 <flatcc_builder_end_vector@@Base+0x44>
   17930:	ldr	r3, [pc, #148]	; 179cc <flatcc_builder_end_vector@@Base+0xc0>
   17934:	add	r3, pc, r3
   17938:	ldr	r2, [pc, #144]	; 179d0 <flatcc_builder_end_vector@@Base+0xc4>
   1793c:	ldr	r1, [pc, #144]	; 179d4 <flatcc_builder_end_vector@@Base+0xc8>
   17940:	add	r1, pc, r1
   17944:	ldr	r0, [pc, #140]	; 179d8 <flatcc_builder_end_vector@@Base+0xcc>
   17948:	add	r0, pc, r0
   1794c:	bl	120b4 <__assert_fail@plt>
   17950:	ldr	r3, [fp, #-16]
   17954:	ldr	r1, [r3, #16]
   17958:	ldr	r3, [fp, #-16]
   1795c:	ldr	r3, [r3, #32]
   17960:	ldr	r0, [r3, #20]
   17964:	ldr	r3, [fp, #-16]
   17968:	ldr	r3, [r3, #32]
   1796c:	ldr	ip, [r3, #16]
   17970:	ldr	r3, [fp, #-16]
   17974:	ldrh	r3, [r3, #130]	; 0x82
   17978:	ldr	r2, [fp, #-16]
   1797c:	ldr	r2, [r2, #32]
   17980:	ldr	r2, [r2, #24]
   17984:	str	r2, [sp, #4]
   17988:	str	r3, [sp]
   1798c:	mov	r3, ip
   17990:	mov	r2, r0
   17994:	ldr	r0, [fp, #-16]
   17998:	bl	176ec <flatcc_builder_create_vector@@Base>
   1799c:	str	r0, [fp, #-8]
   179a0:	ldr	r3, [fp, #-8]
   179a4:	cmp	r3, #0
   179a8:	bne	179b4 <flatcc_builder_end_vector@@Base+0xa8>
   179ac:	mov	r3, #0
   179b0:	b	179c0 <flatcc_builder_end_vector@@Base+0xb4>
   179b4:	ldr	r0, [fp, #-16]
   179b8:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   179bc:	ldr	r3, [fp, #-8]
   179c0:	mov	r0, r3
   179c4:	sub	sp, fp, #4
   179c8:	pop	{fp, pc}
   179cc:	andeq	r3, r0, r4, asr #19
   179d0:	andeq	r0, r0, r8, ror r5
   179d4:	andeq	r3, r0, r4, asr r2
   179d8:	muleq	r0, r0, r3

000179dc <flatcc_builder_vector_count@@Base>:
   179dc:	push	{fp}		; (str fp, [sp, #-4]!)
   179e0:	add	fp, sp, #0
   179e4:	sub	sp, sp, #12
   179e8:	str	r0, [fp, #-8]
   179ec:	ldr	r3, [fp, #-8]
   179f0:	ldr	r3, [r3, #32]
   179f4:	ldr	r3, [r3, #20]
   179f8:	mov	r0, r3
   179fc:	add	sp, fp, #0
   17a00:	pop	{fp}		; (ldr fp, [sp], #4)
   17a04:	bx	lr

00017a08 <flatcc_builder_vector_edit@@Base>:
   17a08:	push	{fp}		; (str fp, [sp, #-4]!)
   17a0c:	add	fp, sp, #0
   17a10:	sub	sp, sp, #12
   17a14:	str	r0, [fp, #-8]
   17a18:	ldr	r3, [fp, #-8]
   17a1c:	ldr	r3, [r3, #16]
   17a20:	mov	r0, r3
   17a24:	add	sp, fp, #0
   17a28:	pop	{fp}		; (ldr fp, [sp], #4)
   17a2c:	bx	lr
   17a30:	push	{r4, fp, lr}
   17a34:	add	fp, sp, #8
   17a38:	sub	sp, sp, #116	; 0x74
   17a3c:	str	r0, [fp, #-112]	; 0xffffff90
   17a40:	str	r1, [fp, #-116]	; 0xffffff8c
   17a44:	str	r2, [fp, #-120]	; 0xffffff88
   17a48:	str	r3, [fp, #-124]	; 0xffffff84
   17a4c:	ldr	r4, [pc, #748]	; 17d40 <flatcc_builder_vector_edit@@Base+0x338>
   17a50:	add	r4, pc, r4
   17a54:	ldr	r3, [fp, #-120]	; 0xffffff88
   17a58:	cmn	r3, #-1073741823	; 0xc0000001
   17a5c:	bls	17a68 <flatcc_builder_vector_edit@@Base+0x60>
   17a60:	mov	r3, #0
   17a64:	b	17d34 <flatcc_builder_vector_edit@@Base+0x32c>
   17a68:	mov	r1, #4
   17a6c:	ldr	r0, [fp, #-112]	; 0xffffff90
   17a70:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   17a74:	ldr	r3, [fp, #-120]	; 0xffffff88
   17a78:	lsl	r3, r3, #2
   17a7c:	str	r3, [fp, #-20]	; 0xffffffec
   17a80:	ldr	r0, [fp, #-120]	; 0xffffff88
   17a84:	bl	1374c <main@@Base+0xd8>
   17a88:	mov	r3, r0
   17a8c:	str	r3, [fp, #-36]	; 0xffffffdc
   17a90:	mov	r2, #4
   17a94:	ldr	r1, [fp, #-20]	; 0xffffffec
   17a98:	ldr	r0, [fp, #-112]	; 0xffffff90
   17a9c:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17aa0:	str	r0, [fp, #-24]	; 0xffffffe8
   17aa4:	mov	r3, #0
   17aa8:	str	r3, [fp, #-108]	; 0xffffff94
   17aac:	mov	r3, #0
   17ab0:	str	r3, [fp, #-104]	; 0xffffff98
   17ab4:	ldr	r3, [fp, #-108]	; 0xffffff94
   17ab8:	add	r3, r3, #4
   17abc:	str	r3, [fp, #-108]	; 0xffffff94
   17ac0:	ldr	r3, [fp, #-104]	; 0xffffff98
   17ac4:	add	r3, r3, #1
   17ac8:	lsl	r3, r3, #3
   17acc:	sub	r2, fp, #12
   17ad0:	add	r3, r2, r3
   17ad4:	sub	r2, fp, #36	; 0x24
   17ad8:	str	r2, [r3, #-96]	; 0xffffffa0
   17adc:	ldr	r3, [fp, #-104]	; 0xffffff98
   17ae0:	add	r3, r3, #1
   17ae4:	lsl	r3, r3, #3
   17ae8:	sub	r2, fp, #12
   17aec:	add	r3, r2, r3
   17af0:	mov	r2, #4
   17af4:	str	r2, [r3, #-92]	; 0xffffffa4
   17af8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17afc:	add	r3, r3, #1
   17b00:	str	r3, [fp, #-104]	; 0xffffff98
   17b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b08:	cmp	r3, #0
   17b0c:	beq	17b64 <flatcc_builder_vector_edit@@Base+0x15c>
   17b10:	ldr	r2, [fp, #-108]	; 0xffffff94
   17b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b18:	add	r3, r2, r3
   17b1c:	str	r3, [fp, #-108]	; 0xffffff94
   17b20:	ldr	r3, [fp, #-104]	; 0xffffff98
   17b24:	add	r3, r3, #1
   17b28:	lsl	r3, r3, #3
   17b2c:	sub	r2, fp, #12
   17b30:	add	r3, r2, r3
   17b34:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17b38:	str	r2, [r3, #-96]	; 0xffffffa0
   17b3c:	ldr	r3, [fp, #-104]	; 0xffffff98
   17b40:	add	r3, r3, #1
   17b44:	lsl	r3, r3, #3
   17b48:	sub	r2, fp, #12
   17b4c:	add	r3, r2, r3
   17b50:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b54:	str	r2, [r3, #-92]	; 0xffffffa4
   17b58:	ldr	r3, [fp, #-104]	; 0xffffff98
   17b5c:	add	r3, r3, #1
   17b60:	str	r3, [fp, #-104]	; 0xffffff98
   17b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b68:	cmp	r3, #0
   17b6c:	beq	17bc8 <flatcc_builder_vector_edit@@Base+0x1c0>
   17b70:	ldr	r2, [fp, #-108]	; 0xffffff94
   17b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b78:	add	r3, r2, r3
   17b7c:	str	r3, [fp, #-108]	; 0xffffff94
   17b80:	ldr	r3, [fp, #-104]	; 0xffffff98
   17b84:	add	r3, r3, #1
   17b88:	lsl	r3, r3, #3
   17b8c:	sub	r2, fp, #12
   17b90:	add	r3, r2, r3
   17b94:	ldr	r2, [pc, #424]	; 17d44 <flatcc_builder_vector_edit@@Base+0x33c>
   17b98:	ldr	r2, [r4, r2]
   17b9c:	str	r2, [r3, #-96]	; 0xffffffa0
   17ba0:	ldr	r3, [fp, #-104]	; 0xffffff98
   17ba4:	add	r3, r3, #1
   17ba8:	lsl	r3, r3, #3
   17bac:	sub	r2, fp, #12
   17bb0:	add	r3, r2, r3
   17bb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17bb8:	str	r2, [r3, #-92]	; 0xffffffa4
   17bbc:	ldr	r3, [fp, #-104]	; 0xffffff98
   17bc0:	add	r3, r3, #1
   17bc4:	str	r3, [fp, #-104]	; 0xffffff98
   17bc8:	ldr	r3, [fp, #-112]	; 0xffffff90
   17bcc:	ldr	r3, [r3, #136]	; 0x88
   17bd0:	mov	r2, r3
   17bd4:	ldr	r3, [fp, #-108]	; 0xffffff94
   17bd8:	sub	r3, r2, r3
   17bdc:	str	r3, [fp, #-28]	; 0xffffffe4
   17be0:	mov	r3, #0
   17be4:	str	r3, [fp, #-16]
   17be8:	b	17d10 <flatcc_builder_vector_edit@@Base+0x308>
   17bec:	ldr	r3, [fp, #-16]
   17bf0:	lsl	r3, r3, #2
   17bf4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17bf8:	add	r3, r2, r3
   17bfc:	ldr	r3, [r3]
   17c00:	cmp	r3, #0
   17c04:	beq	17ca0 <flatcc_builder_vector_edit@@Base+0x298>
   17c08:	ldr	r3, [fp, #-16]
   17c0c:	lsl	r3, r3, #2
   17c10:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17c14:	add	r3, r2, r3
   17c18:	ldr	r3, [r3]
   17c1c:	mov	r2, r3
   17c20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17c24:	sub	r2, r2, r3
   17c28:	ldr	r3, [fp, #-16]
   17c2c:	lsl	r3, r3, #2
   17c30:	sub	r3, r2, r3
   17c34:	sub	r3, r3, #4
   17c38:	str	r3, [fp, #-32]	; 0xffffffe0
   17c3c:	ldr	r3, [fp, #-16]
   17c40:	lsl	r3, r3, #2
   17c44:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17c48:	add	r4, r2, r3
   17c4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c50:	bl	1374c <main@@Base+0xd8>
   17c54:	mov	r3, r0
   17c58:	str	r3, [r4]
   17c5c:	ldr	r3, [fp, #-124]	; 0xffffff84
   17c60:	cmp	r3, #0
   17c64:	beq	17d04 <flatcc_builder_vector_edit@@Base+0x2fc>
   17c68:	ldr	r2, [fp, #-124]	; 0xffffff84
   17c6c:	ldr	r3, [fp, #-16]
   17c70:	add	r3, r2, r3
   17c74:	ldrb	r3, [r3]
   17c78:	cmp	r3, #0
   17c7c:	bne	17d04 <flatcc_builder_vector_edit@@Base+0x2fc>
   17c80:	ldr	r3, [pc, #192]	; 17d48 <flatcc_builder_vector_edit@@Base+0x340>
   17c84:	add	r3, pc, r3
   17c88:	ldr	r2, [pc, #188]	; 17d4c <flatcc_builder_vector_edit@@Base+0x344>
   17c8c:	ldr	r1, [pc, #188]	; 17d50 <flatcc_builder_vector_edit@@Base+0x348>
   17c90:	add	r1, pc, r1
   17c94:	ldr	r0, [pc, #184]	; 17d54 <flatcc_builder_vector_edit@@Base+0x34c>
   17c98:	add	r0, pc, r0
   17c9c:	bl	120b4 <__assert_fail@plt>
   17ca0:	ldr	r3, [fp, #-124]	; 0xffffff84
   17ca4:	cmp	r3, #0
   17ca8:	beq	17ce4 <flatcc_builder_vector_edit@@Base+0x2dc>
   17cac:	ldr	r2, [fp, #-124]	; 0xffffff84
   17cb0:	ldr	r3, [fp, #-16]
   17cb4:	add	r3, r2, r3
   17cb8:	ldrb	r3, [r3]
   17cbc:	cmp	r3, #0
   17cc0:	beq	17d04 <flatcc_builder_vector_edit@@Base+0x2fc>
   17cc4:	ldr	r3, [pc, #140]	; 17d58 <flatcc_builder_vector_edit@@Base+0x350>
   17cc8:	add	r3, pc, r3
   17ccc:	ldr	r2, [pc, #136]	; 17d5c <flatcc_builder_vector_edit@@Base+0x354>
   17cd0:	ldr	r1, [pc, #136]	; 17d60 <flatcc_builder_vector_edit@@Base+0x358>
   17cd4:	add	r1, pc, r1
   17cd8:	ldr	r0, [pc, #132]	; 17d64 <flatcc_builder_vector_edit@@Base+0x35c>
   17cdc:	add	r0, pc, r0
   17ce0:	bl	120b4 <__assert_fail@plt>
   17ce4:	ldr	r3, [pc, #124]	; 17d68 <flatcc_builder_vector_edit@@Base+0x360>
   17ce8:	add	r3, pc, r3
   17cec:	ldr	r2, [pc, #120]	; 17d6c <flatcc_builder_vector_edit@@Base+0x364>
   17cf0:	ldr	r1, [pc, #120]	; 17d70 <flatcc_builder_vector_edit@@Base+0x368>
   17cf4:	add	r1, pc, r1
   17cf8:	ldr	r0, [pc, #116]	; 17d74 <flatcc_builder_vector_edit@@Base+0x36c>
   17cfc:	add	r0, pc, r0
   17d00:	bl	120b4 <__assert_fail@plt>
   17d04:	ldr	r3, [fp, #-16]
   17d08:	add	r3, r3, #1
   17d0c:	str	r3, [fp, #-16]
   17d10:	ldr	r2, [fp, #-16]
   17d14:	ldr	r3, [fp, #-120]	; 0xffffff88
   17d18:	cmp	r2, r3
   17d1c:	bcc	17bec <flatcc_builder_vector_edit@@Base+0x1e4>
   17d20:	sub	r3, fp, #108	; 0x6c
   17d24:	mov	r1, r3
   17d28:	ldr	r0, [fp, #-112]	; 0xffffff90
   17d2c:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17d30:	mov	r3, r0
   17d34:	mov	r0, r3
   17d38:	sub	sp, fp, #8
   17d3c:	pop	{r4, fp, pc}
   17d40:	andeq	r4, r1, r8, lsr #11
   17d44:	andeq	r0, r0, r8, asr r0
   17d48:	muleq	r0, r0, r6
   17d4c:			; <UNDEFINED> instruction: 0x000005b1
   17d50:	andeq	r2, r0, r4, lsl #30
   17d54:	strdeq	r3, [r0], -ip
   17d58:	andeq	r3, r0, ip, asr #12
   17d5c:			; <UNDEFINED> instruction: 0x000005b5
   17d60:	andeq	r2, r0, r0, asr #29
   17d64:	andeq	r3, r0, r8, asr #3
   17d68:	andeq	r3, r0, ip, lsr #12
   17d6c:			; <UNDEFINED> instruction: 0x000005b7
   17d70:	andeq	r2, r0, r0, lsr #29
   17d74:	strdeq	r2, [r0], -r8

00017d78 <flatcc_builder_create_offset_vector_direct@@Base>:
   17d78:	push	{fp, lr}
   17d7c:	add	fp, sp, #4
   17d80:	sub	sp, sp, #16
   17d84:	str	r0, [fp, #-8]
   17d88:	str	r1, [fp, #-12]
   17d8c:	str	r2, [fp, #-16]
   17d90:	mov	r3, #0
   17d94:	ldr	r2, [fp, #-16]
   17d98:	ldr	r1, [fp, #-12]
   17d9c:	ldr	r0, [fp, #-8]
   17da0:	bl	17a30 <flatcc_builder_vector_edit@@Base+0x28>
   17da4:	mov	r3, r0
   17da8:	mov	r0, r3
   17dac:	sub	sp, fp, #4
   17db0:	pop	{fp, pc}

00017db4 <flatcc_builder_end_offset_vector@@Base>:
   17db4:	push	{fp, lr}
   17db8:	add	fp, sp, #4
   17dbc:	sub	sp, sp, #16
   17dc0:	str	r0, [fp, #-16]
   17dc4:	ldr	r3, [fp, #-16]
   17dc8:	ldr	r3, [r3, #32]
   17dcc:	ldrh	r3, [r3, #14]
   17dd0:	cmp	r3, #5
   17dd4:	beq	17df8 <flatcc_builder_end_offset_vector@@Base+0x44>
   17dd8:	ldr	r3, [pc, #104]	; 17e48 <flatcc_builder_end_offset_vector@@Base+0x94>
   17ddc:	add	r3, pc, r3
   17de0:	ldr	r2, [pc, #100]	; 17e4c <flatcc_builder_end_offset_vector@@Base+0x98>
   17de4:	ldr	r1, [pc, #100]	; 17e50 <flatcc_builder_end_offset_vector@@Base+0x9c>
   17de8:	add	r1, pc, r1
   17dec:	ldr	r0, [pc, #96]	; 17e54 <flatcc_builder_end_offset_vector@@Base+0xa0>
   17df0:	add	r0, pc, r0
   17df4:	bl	120b4 <__assert_fail@plt>
   17df8:	ldr	r3, [fp, #-16]
   17dfc:	ldr	r1, [r3, #16]
   17e00:	ldr	r3, [fp, #-16]
   17e04:	ldr	r3, [r3, #32]
   17e08:	ldr	r3, [r3, #20]
   17e0c:	mov	r2, r3
   17e10:	ldr	r0, [fp, #-16]
   17e14:	bl	17d78 <flatcc_builder_create_offset_vector_direct@@Base>
   17e18:	str	r0, [fp, #-8]
   17e1c:	ldr	r3, [fp, #-8]
   17e20:	cmp	r3, #0
   17e24:	bne	17e30 <flatcc_builder_end_offset_vector@@Base+0x7c>
   17e28:	mov	r3, #0
   17e2c:	b	17e3c <flatcc_builder_end_offset_vector@@Base+0x88>
   17e30:	ldr	r0, [fp, #-16]
   17e34:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17e38:	ldr	r3, [fp, #-8]
   17e3c:	mov	r0, r3
   17e40:	sub	sp, fp, #4
   17e44:	pop	{fp, pc}
   17e48:	andeq	r3, r0, r8, asr r5
   17e4c:	andeq	r0, r0, r8, asr #11
   17e50:	andeq	r2, r0, ip, lsr #27
   17e54:	andeq	r2, r0, r4, asr pc

00017e58 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17e58:	push	{fp, lr}
   17e5c:	add	fp, sp, #4
   17e60:	sub	sp, sp, #16
   17e64:	str	r0, [fp, #-16]
   17e68:	str	r1, [fp, #-20]	; 0xffffffec
   17e6c:	ldr	r3, [fp, #-16]
   17e70:	ldr	r3, [r3, #32]
   17e74:	ldrh	r3, [r3, #14]
   17e78:	cmp	r3, #5
   17e7c:	beq	17ea0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   17e80:	ldr	r3, [pc, #104]	; 17ef0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17e84:	add	r3, pc, r3
   17e88:	ldr	r2, [pc, #100]	; 17ef4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   17e8c:	ldr	r1, [pc, #100]	; 17ef8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   17e90:	add	r1, pc, r1
   17e94:	ldr	r0, [pc, #96]	; 17efc <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17e98:	add	r0, pc, r0
   17e9c:	bl	120b4 <__assert_fail@plt>
   17ea0:	ldr	r3, [fp, #-16]
   17ea4:	ldr	r1, [r3, #16]
   17ea8:	ldr	r3, [fp, #-16]
   17eac:	ldr	r3, [r3, #32]
   17eb0:	ldr	r2, [r3, #20]
   17eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17eb8:	ldr	r0, [fp, #-16]
   17ebc:	bl	17a30 <flatcc_builder_vector_edit@@Base+0x28>
   17ec0:	str	r0, [fp, #-8]
   17ec4:	ldr	r3, [fp, #-8]
   17ec8:	cmp	r3, #0
   17ecc:	bne	17ed8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   17ed0:	mov	r3, #0
   17ed4:	b	17ee4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   17ed8:	ldr	r0, [fp, #-16]
   17edc:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   17ee0:	ldr	r3, [fp, #-8]
   17ee4:	mov	r0, r3
   17ee8:	sub	sp, fp, #4
   17eec:	pop	{fp, pc}
   17ef0:	ldrdeq	r3, [r0], -r4
   17ef4:	ldrdeq	r0, [r0], -r5
   17ef8:	andeq	r2, r0, r4, lsl #26
   17efc:	andeq	r2, r0, ip, lsr #29

00017f00 <flatcc_builder_offset_vector_edit@@Base>:
   17f00:	push	{fp}		; (str fp, [sp, #-4]!)
   17f04:	add	fp, sp, #0
   17f08:	sub	sp, sp, #12
   17f0c:	str	r0, [fp, #-8]
   17f10:	ldr	r3, [fp, #-8]
   17f14:	ldr	r3, [r3, #16]
   17f18:	mov	r0, r3
   17f1c:	add	sp, fp, #0
   17f20:	pop	{fp}		; (ldr fp, [sp], #4)
   17f24:	bx	lr

00017f28 <flatcc_builder_offset_vector_count@@Base>:
   17f28:	push	{fp}		; (str fp, [sp, #-4]!)
   17f2c:	add	fp, sp, #0
   17f30:	sub	sp, sp, #12
   17f34:	str	r0, [fp, #-8]
   17f38:	ldr	r3, [fp, #-8]
   17f3c:	ldr	r3, [r3, #32]
   17f40:	ldr	r3, [r3, #20]
   17f44:	mov	r0, r3
   17f48:	add	sp, fp, #0
   17f4c:	pop	{fp}		; (ldr fp, [sp], #4)
   17f50:	bx	lr

00017f54 <flatcc_builder_table_add_union@@Base>:
   17f54:	push	{fp, lr}
   17f58:	add	fp, sp, #4
   17f5c:	sub	sp, sp, #24
   17f60:	str	r0, [fp, #-16]
   17f64:	str	r1, [fp, #-20]	; 0xffffffec
   17f68:	sub	r1, fp, #28
   17f6c:	stm	r1, {r2, r3}
   17f70:	ldr	r3, [fp, #-16]
   17f74:	ldr	r3, [r3, #32]
   17f78:	ldrh	r3, [r3, #14]
   17f7c:	cmp	r3, #3
   17f80:	beq	17fa4 <flatcc_builder_table_add_union@@Base+0x50>
   17f84:	ldr	r3, [pc, #352]	; 180ec <flatcc_builder_table_add_union@@Base+0x198>
   17f88:	add	r3, pc, r3
   17f8c:	ldr	r2, [pc, #348]	; 180f0 <flatcc_builder_table_add_union@@Base+0x19c>
   17f90:	ldr	r1, [pc, #348]	; 180f4 <flatcc_builder_table_add_union@@Base+0x1a0>
   17f94:	add	r1, pc, r1
   17f98:	ldr	r0, [pc, #344]	; 180f8 <flatcc_builder_table_add_union@@Base+0x1a4>
   17f9c:	add	r0, pc, r0
   17fa0:	bl	120b4 <__assert_fail@plt>
   17fa4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   17fa8:	cmp	r3, #0
   17fac:	bne	17ffc <flatcc_builder_table_add_union@@Base+0xa8>
   17fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fb4:	cmp	r3, #0
   17fb8:	beq	17ffc <flatcc_builder_table_add_union@@Base+0xa8>
   17fbc:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   17fc0:	cmp	r3, #0
   17fc4:	bne	17ff4 <flatcc_builder_table_add_union@@Base+0xa0>
   17fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fcc:	cmp	r3, #0
   17fd0:	beq	17ff4 <flatcc_builder_table_add_union@@Base+0xa0>
   17fd4:	ldr	r3, [pc, #288]	; 180fc <flatcc_builder_table_add_union@@Base+0x1a8>
   17fd8:	add	r3, pc, r3
   17fdc:	ldr	r2, [pc, #284]	; 18100 <flatcc_builder_table_add_union@@Base+0x1ac>
   17fe0:	ldr	r1, [pc, #284]	; 18104 <flatcc_builder_table_add_union@@Base+0x1b0>
   17fe4:	add	r1, pc, r1
   17fe8:	ldr	r0, [pc, #280]	; 18108 <flatcc_builder_table_add_union@@Base+0x1b4>
   17fec:	add	r0, pc, r0
   17ff0:	bl	120b4 <__assert_fail@plt>
   17ff4:	mvn	r3, #0
   17ff8:	b	180e0 <flatcc_builder_table_add_union@@Base+0x18c>
   17ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18000:	cmp	r3, #0
   18004:	beq	18064 <flatcc_builder_table_add_union@@Base+0x110>
   18008:	ldr	r1, [fp, #-20]	; 0xffffffec
   1800c:	ldr	r0, [fp, #-16]
   18010:	bl	1909c <flatcc_builder_table_add_offset@@Base>
   18014:	str	r0, [fp, #-8]
   18018:	ldr	r3, [fp, #-8]
   1801c:	cmp	r3, #0
   18020:	bne	18058 <flatcc_builder_table_add_union@@Base+0x104>
   18024:	ldr	r3, [fp, #-8]
   18028:	cmp	r3, #0
   1802c:	bne	18050 <flatcc_builder_table_add_union@@Base+0xfc>
   18030:	ldr	r3, [pc, #212]	; 1810c <flatcc_builder_table_add_union@@Base+0x1b8>
   18034:	add	r3, pc, r3
   18038:	ldr	r2, [pc, #208]	; 18110 <flatcc_builder_table_add_union@@Base+0x1bc>
   1803c:	ldr	r1, [pc, #208]	; 18114 <flatcc_builder_table_add_union@@Base+0x1c0>
   18040:	add	r1, pc, r1
   18044:	ldr	r0, [pc, #204]	; 18118 <flatcc_builder_table_add_union@@Base+0x1c4>
   18048:	add	r0, pc, r0
   1804c:	bl	120b4 <__assert_fail@plt>
   18050:	mvn	r3, #0
   18054:	b	180e0 <flatcc_builder_table_add_union@@Base+0x18c>
   18058:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1805c:	ldr	r3, [fp, #-8]
   18060:	str	r2, [r3]
   18064:	ldr	r3, [fp, #-20]	; 0xffffffec
   18068:	sub	r1, r3, #1
   1806c:	mov	r3, #1
   18070:	mov	r2, #1
   18074:	ldr	r0, [fp, #-16]
   18078:	bl	18e40 <flatcc_builder_table_add@@Base>
   1807c:	str	r0, [fp, #-12]
   18080:	ldr	r3, [fp, #-12]
   18084:	cmp	r3, #0
   18088:	bne	180c0 <flatcc_builder_table_add_union@@Base+0x16c>
   1808c:	ldr	r3, [fp, #-12]
   18090:	cmp	r3, #0
   18094:	bne	180b8 <flatcc_builder_table_add_union@@Base+0x164>
   18098:	ldr	r3, [pc, #124]	; 1811c <flatcc_builder_table_add_union@@Base+0x1c8>
   1809c:	add	r3, pc, r3
   180a0:	ldr	r2, [pc, #120]	; 18120 <flatcc_builder_table_add_union@@Base+0x1cc>
   180a4:	ldr	r1, [pc, #120]	; 18124 <flatcc_builder_table_add_union@@Base+0x1d0>
   180a8:	add	r1, pc, r1
   180ac:	ldr	r0, [pc, #116]	; 18128 <flatcc_builder_table_add_union@@Base+0x1d4>
   180b0:	add	r0, pc, r0
   180b4:	bl	120b4 <__assert_fail@plt>
   180b8:	mvn	r3, #0
   180bc:	b	180e0 <flatcc_builder_table_add_union@@Base+0x18c>
   180c0:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   180c4:	mov	r0, r3
   180c8:	bl	13770 <main@@Base+0xfc>
   180cc:	mov	r3, r0
   180d0:	mov	r2, r3
   180d4:	ldr	r3, [fp, #-12]
   180d8:	strb	r2, [r3]
   180dc:	mov	r3, #0
   180e0:	mov	r0, r3
   180e4:	sub	sp, fp, #4
   180e8:	pop	{fp, pc}
   180ec:	strdeq	r3, [r0], -ip
   180f0:	andeq	r0, r0, lr, ror #11
   180f4:	andeq	r2, r0, r0, lsl #24
   180f8:			; <UNDEFINED> instruction: 0x00002eb8
   180fc:	andeq	r3, r0, ip, lsr #7
   18100:	andeq	r0, r0, pc, ror #11
   18104:			; <UNDEFINED> instruction: 0x00002bb0
   18108:	andeq	r2, r0, r8, asr #29
   1810c:	andeq	r3, r0, r0, asr r3
   18110:	strdeq	r0, [r0], -r2
   18114:	andeq	r2, r0, r4, asr fp
   18118:	muleq	r0, r0, lr
   1811c:	andeq	r3, r0, r8, ror #5
   18120:	strdeq	r0, [r0], -r6
   18124:	andeq	r2, r0, ip, ror #21
   18128:	andeq	r2, r0, r4, lsr lr

0001812c <flatcc_builder_table_add_union_vector@@Base>:
   1812c:	push	{fp, lr}
   18130:	add	fp, sp, #4
   18134:	sub	sp, sp, #24
   18138:	str	r0, [fp, #-16]
   1813c:	str	r1, [fp, #-20]	; 0xffffffec
   18140:	sub	r1, fp, #28
   18144:	stm	r1, {r2, r3}
   18148:	ldr	r3, [fp, #-16]
   1814c:	ldr	r3, [r3, #32]
   18150:	ldrh	r3, [r3, #14]
   18154:	cmp	r3, #3
   18158:	beq	1817c <flatcc_builder_table_add_union_vector@@Base+0x50>
   1815c:	ldr	r3, [pc, #396]	; 182f0 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   18160:	add	r3, pc, r3
   18164:	mov	r2, #1536	; 0x600
   18168:	ldr	r1, [pc, #388]	; 182f4 <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   1816c:	add	r1, pc, r1
   18170:	ldr	r0, [pc, #384]	; 182f8 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   18174:	add	r0, pc, r0
   18178:	bl	120b4 <__assert_fail@plt>
   1817c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18180:	cmp	r3, #0
   18184:	moveq	r3, #1
   18188:	movne	r3, #0
   1818c:	uxtb	r2, r3
   18190:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18194:	cmp	r3, #0
   18198:	moveq	r3, #1
   1819c:	movne	r3, #0
   181a0:	uxtb	r3, r3
   181a4:	eor	r3, r3, r2
   181a8:	uxtb	r3, r3
   181ac:	cmp	r3, #0
   181b0:	beq	18214 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   181b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181b8:	cmp	r3, #0
   181bc:	movne	r3, #1
   181c0:	moveq	r3, #0
   181c4:	uxtb	r2, r3
   181c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   181cc:	cmp	r3, #0
   181d0:	moveq	r3, #1
   181d4:	movne	r3, #0
   181d8:	uxtb	r3, r3
   181dc:	eor	r3, r3, r2
   181e0:	uxtb	r3, r3
   181e4:	cmp	r3, #0
   181e8:	bne	1820c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   181ec:	ldr	r3, [pc, #264]	; 182fc <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   181f0:	add	r3, pc, r3
   181f4:	ldr	r2, [pc, #260]	; 18300 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   181f8:	ldr	r1, [pc, #260]	; 18304 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   181fc:	add	r1, pc, r1
   18200:	ldr	r0, [pc, #256]	; 18308 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   18204:	add	r0, pc, r0
   18208:	bl	120b4 <__assert_fail@plt>
   1820c:	mvn	r3, #0
   18210:	b	182e4 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18214:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18218:	cmp	r3, #0
   1821c:	beq	182e0 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18220:	ldr	r3, [fp, #-20]	; 0xffffffec
   18224:	sub	r3, r3, #1
   18228:	mov	r1, r3
   1822c:	ldr	r0, [fp, #-16]
   18230:	bl	1909c <flatcc_builder_table_add_offset@@Base>
   18234:	str	r0, [fp, #-8]
   18238:	ldr	r3, [fp, #-8]
   1823c:	cmp	r3, #0
   18240:	bne	18278 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   18244:	ldr	r3, [fp, #-8]
   18248:	cmp	r3, #0
   1824c:	bne	18270 <flatcc_builder_table_add_union_vector@@Base+0x144>
   18250:	ldr	r3, [pc, #180]	; 1830c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   18254:	add	r3, pc, r3
   18258:	ldr	r2, [pc, #176]	; 18310 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   1825c:	ldr	r1, [pc, #176]	; 18314 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18260:	add	r1, pc, r1
   18264:	ldr	r0, [pc, #172]	; 18318 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   18268:	add	r0, pc, r0
   1826c:	bl	120b4 <__assert_fail@plt>
   18270:	mvn	r3, #0
   18274:	b	182e4 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   18278:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1827c:	ldr	r3, [fp, #-8]
   18280:	str	r2, [r3]
   18284:	ldr	r1, [fp, #-20]	; 0xffffffec
   18288:	ldr	r0, [fp, #-16]
   1828c:	bl	1909c <flatcc_builder_table_add_offset@@Base>
   18290:	str	r0, [fp, #-8]
   18294:	ldr	r3, [fp, #-8]
   18298:	cmp	r3, #0
   1829c:	bne	182d4 <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   182a0:	ldr	r3, [fp, #-8]
   182a4:	cmp	r3, #0
   182a8:	bne	182cc <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   182ac:	ldr	r3, [pc, #104]	; 1831c <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   182b0:	add	r3, pc, r3
   182b4:	ldr	r2, [pc, #100]	; 18320 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   182b8:	ldr	r1, [pc, #100]	; 18324 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   182bc:	add	r1, pc, r1
   182c0:	ldr	r0, [pc, #96]	; 18328 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   182c4:	add	r0, pc, r0
   182c8:	bl	120b4 <__assert_fail@plt>
   182cc:	mvn	r3, #0
   182d0:	b	182e4 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   182d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182d8:	ldr	r3, [fp, #-8]
   182dc:	str	r2, [r3]
   182e0:	mov	r3, #0
   182e4:	mov	r0, r3
   182e8:	sub	sp, fp, #4
   182ec:	pop	{fp, pc}
   182f0:	andeq	r3, r0, r4, asr #4
   182f4:	andeq	r2, r0, r8, lsr #20
   182f8:	andeq	r2, r0, r0, ror #25
   182fc:			; <UNDEFINED> instruction: 0x000031b4
   18300:	andeq	r0, r0, r1, lsl #12
   18304:	muleq	r0, r8, r9
   18308:	andeq	r2, r0, ip, ror #25
   1830c:	andeq	r3, r0, r0, asr r1
   18310:	andeq	r0, r0, r4, lsl #12
   18314:	andeq	r2, r0, r4, lsr r9
   18318:	andeq	r2, r0, r0, ror ip
   1831c:	strdeq	r3, [r0], -r4
   18320:	andeq	r0, r0, r8, lsl #12
   18324:	ldrdeq	r2, [r0], -r8
   18328:	andeq	r2, r0, r4, lsl ip

0001832c <flatcc_builder_create_union_vector@@Base>:
   1832c:	push	{fp, lr}
   18330:	add	fp, sp, #4
   18334:	sub	sp, sp, #48	; 0x30
   18338:	str	r0, [fp, #-32]	; 0xffffffe0
   1833c:	str	r1, [fp, #-36]	; 0xffffffdc
   18340:	str	r2, [fp, #-40]	; 0xffffffd8
   18344:	str	r3, [fp, #-44]	; 0xffffffd4
   18348:	mov	r3, #0
   1834c:	str	r3, [fp, #-24]	; 0xffffffe8
   18350:	mov	r3, #0
   18354:	str	r3, [fp, #-20]	; 0xffffffec
   18358:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1835c:	bl	16760 <flatcc_builder_start_offset_vector@@Base>
   18360:	mov	r3, r0
   18364:	cmp	r3, #0
   18368:	beq	18384 <flatcc_builder_create_union_vector@@Base+0x58>
   1836c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18370:	mov	r2, r3
   18374:	sub	r3, fp, #24
   18378:	ldm	r3, {r0, r1}
   1837c:	stm	r2, {r0, r1}
   18380:	b	184a0 <flatcc_builder_create_union_vector@@Base+0x174>
   18384:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18388:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1838c:	bl	1600c <flatcc_builder_extend_offset_vector@@Base>
   18390:	mov	r3, r0
   18394:	cmp	r3, #0
   18398:	bne	183b4 <flatcc_builder_create_union_vector@@Base+0x88>
   1839c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183a0:	mov	r2, r3
   183a4:	sub	r3, fp, #24
   183a8:	ldm	r3, {r0, r1}
   183ac:	stm	r2, {r0, r1}
   183b0:	b	184a0 <flatcc_builder_create_union_vector@@Base+0x174>
   183b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   183b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   183bc:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   183c0:	str	r0, [fp, #-12]
   183c4:	ldr	r3, [fp, #-12]
   183c8:	cmp	r3, #0
   183cc:	bne	183e8 <flatcc_builder_create_union_vector@@Base+0xbc>
   183d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183d4:	mov	r2, r3
   183d8:	sub	r3, fp, #24
   183dc:	ldm	r3, {r0, r1}
   183e0:	stm	r2, {r0, r1}
   183e4:	b	184a0 <flatcc_builder_create_union_vector@@Base+0x174>
   183e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   183ec:	bl	17f00 <flatcc_builder_offset_vector_edit@@Base>
   183f0:	str	r0, [fp, #-16]
   183f4:	mov	r3, #0
   183f8:	str	r3, [fp, #-8]
   183fc:	b	18458 <flatcc_builder_create_union_vector@@Base+0x12c>
   18400:	ldr	r2, [fp, #-12]
   18404:	ldr	r3, [fp, #-8]
   18408:	add	r3, r2, r3
   1840c:	ldr	r2, [fp, #-8]
   18410:	lsl	r2, r2, #3
   18414:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18418:	add	r2, r1, r2
   1841c:	ldrb	r2, [r2]
   18420:	strb	r2, [r3]
   18424:	ldr	r3, [fp, #-8]
   18428:	lsl	r3, r3, #2
   1842c:	ldr	r2, [fp, #-16]
   18430:	add	r3, r2, r3
   18434:	ldr	r2, [fp, #-8]
   18438:	lsl	r2, r2, #3
   1843c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   18440:	add	r2, r1, r2
   18444:	ldr	r2, [r2, #4]
   18448:	str	r2, [r3]
   1844c:	ldr	r3, [fp, #-8]
   18450:	add	r3, r3, #1
   18454:	str	r3, [fp, #-8]
   18458:	ldr	r2, [fp, #-8]
   1845c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18460:	cmp	r2, r3
   18464:	bcc	18400 <flatcc_builder_create_union_vector@@Base+0xd4>
   18468:	sub	r0, fp, #24
   1846c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18470:	str	r3, [sp]
   18474:	ldr	r3, [fp, #-16]
   18478:	ldr	r2, [fp, #-12]
   1847c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18480:	bl	184ac <flatcc_builder_create_union_vector_direct@@Base>
   18484:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18488:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1848c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18490:	mov	r2, r3
   18494:	sub	r3, fp, #24
   18498:	ldm	r3, {r0, r1}
   1849c:	stm	r2, {r0, r1}
   184a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   184a4:	sub	sp, fp, #4
   184a8:	pop	{fp, pc}

000184ac <flatcc_builder_create_union_vector_direct@@Base>:
   184ac:	push	{fp, lr}
   184b0:	add	fp, sp, #4
   184b4:	sub	sp, sp, #32
   184b8:	str	r0, [fp, #-16]
   184bc:	str	r1, [fp, #-20]	; 0xffffffec
   184c0:	str	r2, [fp, #-24]	; 0xffffffe8
   184c4:	str	r3, [fp, #-28]	; 0xffffffe4
   184c8:	mov	r3, #0
   184cc:	str	r3, [fp, #-12]
   184d0:	mov	r3, #0
   184d4:	str	r3, [fp, #-8]
   184d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184dc:	ldr	r2, [fp, #4]
   184e0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   184e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   184e8:	bl	17a30 <flatcc_builder_vector_edit@@Base+0x28>
   184ec:	mov	r3, r0
   184f0:	str	r3, [fp, #-8]
   184f4:	ldr	r3, [fp, #-8]
   184f8:	cmp	r3, #0
   184fc:	bne	18518 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   18500:	ldr	r3, [fp, #-16]
   18504:	mov	r2, r3
   18508:	sub	r3, fp, #12
   1850c:	ldm	r3, {r0, r1}
   18510:	stm	r2, {r0, r1}
   18514:	b	1857c <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18518:	mvn	r3, #0
   1851c:	str	r3, [sp, #4]
   18520:	mov	r3, #1
   18524:	str	r3, [sp]
   18528:	mov	r3, #1
   1852c:	ldr	r2, [fp, #4]
   18530:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18534:	ldr	r0, [fp, #-20]	; 0xffffffec
   18538:	bl	176ec <flatcc_builder_create_vector@@Base>
   1853c:	mov	r3, r0
   18540:	str	r3, [fp, #-12]
   18544:	ldr	r3, [fp, #-12]
   18548:	cmp	r3, #0
   1854c:	bne	18568 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   18550:	ldr	r3, [fp, #-16]
   18554:	mov	r2, r3
   18558:	sub	r3, fp, #12
   1855c:	ldm	r3, {r0, r1}
   18560:	stm	r2, {r0, r1}
   18564:	b	1857c <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   18568:	ldr	r3, [fp, #-16]
   1856c:	mov	r2, r3
   18570:	sub	r3, fp, #12
   18574:	ldm	r3, {r0, r1}
   18578:	stm	r2, {r0, r1}
   1857c:	ldr	r0, [fp, #-16]
   18580:	sub	sp, fp, #4
   18584:	pop	{fp, pc}

00018588 <flatcc_builder_start_union_vector@@Base>:
   18588:	push	{fp, lr}
   1858c:	add	fp, sp, #4
   18590:	sub	sp, sp, #8
   18594:	str	r0, [fp, #-8]
   18598:	mov	r1, #4
   1859c:	ldr	r0, [fp, #-8]
   185a0:	bl	14ae0 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   185a4:	mov	r3, r0
   185a8:	cmp	r3, #0
   185ac:	beq	185b8 <flatcc_builder_start_union_vector@@Base+0x30>
   185b0:	mvn	r3, #0
   185b4:	b	185f8 <flatcc_builder_start_union_vector@@Base+0x70>
   185b8:	ldr	r3, [fp, #-8]
   185bc:	ldr	r3, [r3, #32]
   185c0:	mov	r2, #8
   185c4:	str	r2, [r3, #16]
   185c8:	ldr	r3, [fp, #-8]
   185cc:	ldr	r3, [r3, #32]
   185d0:	mov	r2, #0
   185d4:	str	r2, [r3, #20]
   185d8:	ldr	r3, [fp, #-8]
   185dc:	ldr	r3, [r3, #32]
   185e0:	mov	r2, #7
   185e4:	strh	r2, [r3, #14]
   185e8:	mvn	r1, #3
   185ec:	ldr	r0, [fp, #-8]
   185f0:	bl	13a58 <flatcc_builder_default_alloc@@Base+0x1c8>
   185f4:	mov	r3, #0
   185f8:	mov	r0, r3
   185fc:	sub	sp, fp, #4
   18600:	pop	{fp, pc}

00018604 <flatcc_builder_end_union_vector@@Base>:
   18604:	push	{fp, lr}
   18608:	add	fp, sp, #4
   1860c:	sub	sp, sp, #48	; 0x30
   18610:	str	r0, [fp, #-40]	; 0xffffffd8
   18614:	str	r1, [fp, #-44]	; 0xffffffd4
   18618:	mov	r3, #0
   1861c:	str	r3, [fp, #-32]	; 0xffffffe0
   18620:	mov	r3, #0
   18624:	str	r3, [fp, #-28]	; 0xffffffe4
   18628:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1862c:	ldr	r3, [r3, #32]
   18630:	ldrh	r3, [r3, #14]
   18634:	cmp	r3, #7
   18638:	beq	1865c <flatcc_builder_end_union_vector@@Base+0x58>
   1863c:	ldr	r3, [pc, #320]	; 18784 <flatcc_builder_end_union_vector@@Base+0x180>
   18640:	add	r3, pc, r3
   18644:	ldr	r2, [pc, #316]	; 18788 <flatcc_builder_end_union_vector@@Base+0x184>
   18648:	ldr	r1, [pc, #316]	; 1878c <flatcc_builder_end_union_vector@@Base+0x188>
   1864c:	add	r1, pc, r1
   18650:	ldr	r0, [pc, #312]	; 18790 <flatcc_builder_end_union_vector@@Base+0x18c>
   18654:	add	r0, pc, r0
   18658:	bl	120b4 <__assert_fail@plt>
   1865c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18660:	bl	187bc <flatcc_builder_union_vector_count@@Base>
   18664:	str	r0, [fp, #-12]
   18668:	ldr	r2, [fp, #-12]
   1866c:	mov	r3, r2
   18670:	lsl	r3, r3, #2
   18674:	add	r3, r3, r2
   18678:	mov	r1, r3
   1867c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18680:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   18684:	str	r0, [fp, #-16]
   18688:	ldr	r3, [fp, #-16]
   1868c:	cmp	r3, #0
   18690:	bne	186ac <flatcc_builder_end_union_vector@@Base+0xa8>
   18694:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18698:	mov	r2, r3
   1869c:	sub	r3, fp, #32
   186a0:	ldm	r3, {r0, r1}
   186a4:	stm	r2, {r0, r1}
   186a8:	b	18778 <flatcc_builder_end_union_vector@@Base+0x174>
   186ac:	ldr	r3, [fp, #-12]
   186b0:	lsl	r3, r3, #2
   186b4:	ldr	r2, [fp, #-16]
   186b8:	add	r3, r2, r3
   186bc:	str	r3, [fp, #-20]	; 0xffffffec
   186c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   186c4:	bl	18794 <flatcc_builder_union_vector_edit@@Base>
   186c8:	str	r0, [fp, #-24]	; 0xffffffe8
   186cc:	mov	r3, #0
   186d0:	str	r3, [fp, #-8]
   186d4:	b	18730 <flatcc_builder_end_union_vector@@Base+0x12c>
   186d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   186dc:	ldr	r3, [fp, #-8]
   186e0:	add	r3, r2, r3
   186e4:	ldr	r2, [fp, #-8]
   186e8:	lsl	r2, r2, #3
   186ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   186f0:	add	r2, r1, r2
   186f4:	ldrb	r2, [r2]
   186f8:	strb	r2, [r3]
   186fc:	ldr	r3, [fp, #-8]
   18700:	lsl	r3, r3, #2
   18704:	ldr	r2, [fp, #-16]
   18708:	add	r3, r2, r3
   1870c:	ldr	r2, [fp, #-8]
   18710:	lsl	r2, r2, #3
   18714:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18718:	add	r2, r1, r2
   1871c:	ldr	r2, [r2, #4]
   18720:	str	r2, [r3]
   18724:	ldr	r3, [fp, #-8]
   18728:	add	r3, r3, #1
   1872c:	str	r3, [fp, #-8]
   18730:	ldr	r2, [fp, #-8]
   18734:	ldr	r3, [fp, #-12]
   18738:	cmp	r2, r3
   1873c:	bcc	186d8 <flatcc_builder_end_union_vector@@Base+0xd4>
   18740:	sub	r0, fp, #32
   18744:	ldr	r3, [fp, #-12]
   18748:	str	r3, [sp]
   1874c:	ldr	r3, [fp, #-16]
   18750:	ldr	r2, [fp, #-20]	; 0xffffffec
   18754:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18758:	bl	184ac <flatcc_builder_create_union_vector_direct@@Base>
   1875c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18760:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18764:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18768:	mov	r2, r3
   1876c:	sub	r3, fp, #32
   18770:	ldm	r3, {r0, r1}
   18774:	stm	r2, {r0, r1}
   18778:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1877c:	sub	sp, fp, #4
   18780:	pop	{fp, pc}
   18784:	andeq	r2, r0, ip, lsl #27
   18788:	andeq	r0, r0, r1, asr r6
   1878c:	andeq	r2, r0, r8, asr #10
   18790:	andeq	r2, r0, r4, asr #17

00018794 <flatcc_builder_union_vector_edit@@Base>:
   18794:	push	{fp}		; (str fp, [sp, #-4]!)
   18798:	add	fp, sp, #0
   1879c:	sub	sp, sp, #12
   187a0:	str	r0, [fp, #-8]
   187a4:	ldr	r3, [fp, #-8]
   187a8:	ldr	r3, [r3, #16]
   187ac:	mov	r0, r3
   187b0:	add	sp, fp, #0
   187b4:	pop	{fp}		; (ldr fp, [sp], #4)
   187b8:	bx	lr

000187bc <flatcc_builder_union_vector_count@@Base>:
   187bc:	push	{fp}		; (str fp, [sp, #-4]!)
   187c0:	add	fp, sp, #0
   187c4:	sub	sp, sp, #12
   187c8:	str	r0, [fp, #-8]
   187cc:	ldr	r3, [fp, #-8]
   187d0:	ldr	r3, [r3, #32]
   187d4:	ldr	r3, [r3, #20]
   187d8:	mov	r0, r3
   187dc:	add	sp, fp, #0
   187e0:	pop	{fp}		; (ldr fp, [sp], #4)
   187e4:	bx	lr

000187e8 <flatcc_builder_extend_union_vector@@Base>:
   187e8:	push	{fp, lr}
   187ec:	add	fp, sp, #4
   187f0:	sub	sp, sp, #8
   187f4:	str	r0, [fp, #-8]
   187f8:	str	r1, [fp, #-12]
   187fc:	mvn	r2, #-536870912	; 0xe0000000
   18800:	ldr	r1, [fp, #-12]
   18804:	ldr	r0, [fp, #-8]
   18808:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   1880c:	mov	r3, r0
   18810:	cmp	r3, #0
   18814:	beq	18820 <flatcc_builder_extend_union_vector@@Base+0x38>
   18818:	mov	r3, #0
   1881c:	b	18838 <flatcc_builder_extend_union_vector@@Base+0x50>
   18820:	ldr	r3, [fp, #-12]
   18824:	lsl	r3, r3, #3
   18828:	mov	r1, r3
   1882c:	ldr	r0, [fp, #-8]
   18830:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   18834:	mov	r3, r0
   18838:	mov	r0, r3
   1883c:	sub	sp, fp, #4
   18840:	pop	{fp, pc}

00018844 <flatcc_builder_truncate_union_vector@@Base>:
   18844:	push	{fp, lr}
   18848:	add	fp, sp, #4
   1884c:	sub	sp, sp, #8
   18850:	str	r0, [fp, #-8]
   18854:	str	r1, [fp, #-12]
   18858:	ldr	r3, [fp, #-8]
   1885c:	ldr	r3, [r3, #32]
   18860:	ldrh	r3, [r3, #14]
   18864:	cmp	r3, #7
   18868:	beq	1888c <flatcc_builder_truncate_union_vector@@Base+0x48>
   1886c:	ldr	r3, [pc, #192]	; 18934 <flatcc_builder_truncate_union_vector@@Base+0xf0>
   18870:	add	r3, pc, r3
   18874:	ldr	r2, [pc, #188]	; 18938 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18878:	ldr	r1, [pc, #188]	; 1893c <flatcc_builder_truncate_union_vector@@Base+0xf8>
   1887c:	add	r1, pc, r1
   18880:	ldr	r0, [pc, #184]	; 18940 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18884:	add	r0, pc, r0
   18888:	bl	120b4 <__assert_fail@plt>
   1888c:	ldr	r3, [fp, #-8]
   18890:	ldr	r3, [r3, #32]
   18894:	ldr	r2, [r3, #20]
   18898:	ldr	r3, [fp, #-12]
   1889c:	cmp	r2, r3
   188a0:	bcs	188e4 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   188a4:	ldr	r3, [fp, #-8]
   188a8:	ldr	r3, [r3, #32]
   188ac:	ldr	r2, [r3, #20]
   188b0:	ldr	r3, [fp, #-12]
   188b4:	cmp	r2, r3
   188b8:	bcs	188dc <flatcc_builder_truncate_union_vector@@Base+0x98>
   188bc:	ldr	r3, [pc, #128]	; 18944 <flatcc_builder_truncate_union_vector@@Base+0x100>
   188c0:	add	r3, pc, r3
   188c4:	ldr	r2, [pc, #124]	; 18948 <flatcc_builder_truncate_union_vector@@Base+0x104>
   188c8:	ldr	r1, [pc, #124]	; 1894c <flatcc_builder_truncate_union_vector@@Base+0x108>
   188cc:	add	r1, pc, r1
   188d0:	ldr	r0, [pc, #120]	; 18950 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   188d4:	add	r0, pc, r0
   188d8:	bl	120b4 <__assert_fail@plt>
   188dc:	mvn	r3, #0
   188e0:	b	18928 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   188e4:	ldr	r3, [fp, #-8]
   188e8:	ldr	r3, [r3, #32]
   188ec:	ldr	r2, [fp, #-8]
   188f0:	ldr	r2, [r2, #32]
   188f4:	ldr	r1, [r2, #20]
   188f8:	ldr	r2, [fp, #-12]
   188fc:	sub	r2, r1, r2
   18900:	str	r2, [r3, #20]
   18904:	ldr	r3, [fp, #-8]
   18908:	ldr	r3, [r3, #32]
   1890c:	ldr	r3, [r3, #16]
   18910:	ldr	r2, [fp, #-12]
   18914:	mul	r3, r2, r3
   18918:	mov	r1, r3
   1891c:	ldr	r0, [fp, #-8]
   18920:	bl	13c1c <flatcc_builder_default_alloc@@Base+0x38c>
   18924:	mov	r3, #0
   18928:	mov	r0, r3
   1892c:	sub	sp, fp, #4
   18930:	pop	{fp, pc}
   18934:	andeq	r2, r0, ip, ror fp
   18938:	andeq	r0, r0, r1, lsl #13
   1893c:	andeq	r2, r0, r8, lsl r3
   18940:	muleq	r0, r4, r6
   18944:	andeq	r2, r0, ip, lsr #22
   18948:	andeq	r0, r0, r2, lsl #13
   1894c:	andeq	r2, r0, r8, asr #5
   18950:	strdeq	r2, [r0], -r4

00018954 <flatcc_builder_union_vector_push@@Base>:
   18954:	push	{fp, lr}
   18958:	add	fp, sp, #4
   1895c:	sub	sp, sp, #24
   18960:	str	r0, [fp, #-16]
   18964:	sub	r3, fp, #24
   18968:	stm	r3, {r1, r2}
   1896c:	ldr	r3, [fp, #-16]
   18970:	ldr	r3, [r3, #32]
   18974:	ldrh	r3, [r3, #14]
   18978:	cmp	r3, #7
   1897c:	beq	189a0 <flatcc_builder_union_vector_push@@Base+0x4c>
   18980:	ldr	r3, [pc, #152]	; 18a20 <flatcc_builder_union_vector_push@@Base+0xcc>
   18984:	add	r3, pc, r3
   18988:	ldr	r2, [pc, #148]	; 18a24 <flatcc_builder_union_vector_push@@Base+0xd0>
   1898c:	ldr	r1, [pc, #148]	; 18a28 <flatcc_builder_union_vector_push@@Base+0xd4>
   18990:	add	r1, pc, r1
   18994:	ldr	r0, [pc, #144]	; 18a2c <flatcc_builder_union_vector_push@@Base+0xd8>
   18998:	add	r0, pc, r0
   1899c:	bl	120b4 <__assert_fail@plt>
   189a0:	ldr	r3, [fp, #-16]
   189a4:	ldr	r3, [r3, #32]
   189a8:	ldr	r3, [r3, #20]
   189ac:	cmn	r3, #-536870911	; 0xe0000001
   189b0:	bne	189bc <flatcc_builder_union_vector_push@@Base+0x68>
   189b4:	mov	r3, #0
   189b8:	b	18a14 <flatcc_builder_union_vector_push@@Base+0xc0>
   189bc:	ldr	r3, [fp, #-16]
   189c0:	ldr	r3, [r3, #32]
   189c4:	ldr	r2, [fp, #-16]
   189c8:	ldr	r2, [r2, #32]
   189cc:	ldr	r2, [r2, #20]
   189d0:	add	r2, r2, #1
   189d4:	str	r2, [r3, #20]
   189d8:	mov	r1, #8
   189dc:	ldr	r0, [fp, #-16]
   189e0:	bl	13b80 <flatcc_builder_default_alloc@@Base+0x2f0>
   189e4:	str	r0, [fp, #-8]
   189e8:	ldr	r3, [fp, #-8]
   189ec:	cmp	r3, #0
   189f0:	bne	189fc <flatcc_builder_union_vector_push@@Base+0xa8>
   189f4:	mov	r3, #0
   189f8:	b	18a14 <flatcc_builder_union_vector_push@@Base+0xc0>
   189fc:	ldr	r3, [fp, #-8]
   18a00:	mov	r2, r3
   18a04:	sub	r3, fp, #24
   18a08:	ldm	r3, {r0, r1}
   18a0c:	stm	r2, {r0, r1}
   18a10:	ldr	r3, [fp, #-8]
   18a14:	mov	r0, r3
   18a18:	sub	sp, fp, #4
   18a1c:	pop	{fp, pc}
   18a20:	muleq	r0, r0, sl
   18a24:	andeq	r0, r0, sp, lsl #13
   18a28:	andeq	r2, r0, r4, lsl #4
   18a2c:	andeq	r2, r0, r0, lsl #11

00018a30 <flatcc_builder_append_union_vector@@Base>:
   18a30:	push	{fp, lr}
   18a34:	add	fp, sp, #4
   18a38:	sub	sp, sp, #16
   18a3c:	str	r0, [fp, #-8]
   18a40:	str	r1, [fp, #-12]
   18a44:	str	r2, [fp, #-16]
   18a48:	ldr	r3, [fp, #-8]
   18a4c:	ldr	r3, [r3, #32]
   18a50:	ldrh	r3, [r3, #14]
   18a54:	cmp	r3, #7
   18a58:	beq	18a7c <flatcc_builder_append_union_vector@@Base+0x4c>
   18a5c:	ldr	r3, [pc, #100]	; 18ac8 <flatcc_builder_append_union_vector@@Base+0x98>
   18a60:	add	r3, pc, r3
   18a64:	ldr	r2, [pc, #96]	; 18acc <flatcc_builder_append_union_vector@@Base+0x9c>
   18a68:	ldr	r1, [pc, #96]	; 18ad0 <flatcc_builder_append_union_vector@@Base+0xa0>
   18a6c:	add	r1, pc, r1
   18a70:	ldr	r0, [pc, #92]	; 18ad4 <flatcc_builder_append_union_vector@@Base+0xa4>
   18a74:	add	r0, pc, r0
   18a78:	bl	120b4 <__assert_fail@plt>
   18a7c:	mvn	r2, #-536870912	; 0xe0000000
   18a80:	ldr	r1, [fp, #-16]
   18a84:	ldr	r0, [fp, #-8]
   18a88:	bl	15cf8 <flatcc_builder_end_struct@@Base+0xa0>
   18a8c:	mov	r3, r0
   18a90:	cmp	r3, #0
   18a94:	beq	18aa0 <flatcc_builder_append_union_vector@@Base+0x70>
   18a98:	mov	r3, #0
   18a9c:	b	18abc <flatcc_builder_append_union_vector@@Base+0x8c>
   18aa0:	ldr	r3, [fp, #-16]
   18aa4:	lsl	r3, r3, #3
   18aa8:	mov	r2, r3
   18aac:	ldr	r1, [fp, #-12]
   18ab0:	ldr	r0, [fp, #-8]
   18ab4:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x3e8>
   18ab8:	mov	r3, r0
   18abc:	mov	r0, r3
   18ac0:	sub	sp, fp, #4
   18ac4:	pop	{fp, pc}
   18ac8:	ldrdeq	r2, [r0], -r8
   18acc:	muleq	r0, ip, r6
   18ad0:	andeq	r2, r0, r8, lsr #2
   18ad4:	andeq	r2, r0, r4, lsr #9

00018ad8 <flatcc_builder_create_string@@Base>:
   18ad8:	push	{r4, fp, lr}
   18adc:	add	fp, sp, #8
   18ae0:	sub	sp, sp, #100	; 0x64
   18ae4:	str	r0, [fp, #-96]	; 0xffffffa0
   18ae8:	str	r1, [fp, #-100]	; 0xffffff9c
   18aec:	str	r2, [fp, #-104]	; 0xffffff98
   18af0:	ldr	r4, [pc, #376]	; 18c70 <flatcc_builder_create_string@@Base+0x198>
   18af4:	add	r4, pc, r4
   18af8:	ldr	r0, [fp, #-104]	; 0xffffff98
   18afc:	bl	1374c <main@@Base+0xd8>
   18b00:	mov	r3, r0
   18b04:	str	r3, [fp, #-20]	; 0xffffffec
   18b08:	ldr	r3, [fp, #-104]	; 0xffffff98
   18b0c:	add	r3, r3, #1
   18b10:	mov	r2, #4
   18b14:	mov	r1, r3
   18b18:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18b1c:	bl	14d88 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   18b20:	mov	r3, r0
   18b24:	add	r3, r3, #1
   18b28:	str	r3, [fp, #-16]
   18b2c:	mov	r3, #0
   18b30:	str	r3, [fp, #-92]	; 0xffffffa4
   18b34:	mov	r3, #0
   18b38:	str	r3, [fp, #-88]	; 0xffffffa8
   18b3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18b40:	add	r3, r3, #4
   18b44:	str	r3, [fp, #-92]	; 0xffffffa4
   18b48:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18b4c:	add	r3, r3, #1
   18b50:	lsl	r3, r3, #3
   18b54:	sub	r2, fp, #12
   18b58:	add	r3, r2, r3
   18b5c:	sub	r2, fp, #20
   18b60:	str	r2, [r3, #-80]	; 0xffffffb0
   18b64:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18b68:	add	r3, r3, #1
   18b6c:	lsl	r3, r3, #3
   18b70:	sub	r2, fp, #12
   18b74:	add	r3, r2, r3
   18b78:	mov	r2, #4
   18b7c:	str	r2, [r3, #-76]	; 0xffffffb4
   18b80:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18b84:	add	r3, r3, #1
   18b88:	str	r3, [fp, #-88]	; 0xffffffa8
   18b8c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18b90:	cmp	r3, #0
   18b94:	beq	18bec <flatcc_builder_create_string@@Base+0x114>
   18b98:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18b9c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18ba0:	add	r3, r2, r3
   18ba4:	str	r3, [fp, #-92]	; 0xffffffa4
   18ba8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18bac:	add	r3, r3, #1
   18bb0:	lsl	r3, r3, #3
   18bb4:	sub	r2, fp, #12
   18bb8:	add	r3, r2, r3
   18bbc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18bc0:	str	r2, [r3, #-80]	; 0xffffffb0
   18bc4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18bc8:	add	r3, r3, #1
   18bcc:	lsl	r3, r3, #3
   18bd0:	sub	r2, fp, #12
   18bd4:	add	r3, r2, r3
   18bd8:	ldr	r2, [fp, #-104]	; 0xffffff98
   18bdc:	str	r2, [r3, #-76]	; 0xffffffb4
   18be0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18be4:	add	r3, r3, #1
   18be8:	str	r3, [fp, #-88]	; 0xffffffa8
   18bec:	ldr	r3, [fp, #-16]
   18bf0:	cmp	r3, #0
   18bf4:	beq	18c50 <flatcc_builder_create_string@@Base+0x178>
   18bf8:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18bfc:	ldr	r3, [fp, #-16]
   18c00:	add	r3, r2, r3
   18c04:	str	r3, [fp, #-92]	; 0xffffffa4
   18c08:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18c0c:	add	r3, r3, #1
   18c10:	lsl	r3, r3, #3
   18c14:	sub	r2, fp, #12
   18c18:	add	r3, r2, r3
   18c1c:	ldr	r2, [pc, #80]	; 18c74 <flatcc_builder_create_string@@Base+0x19c>
   18c20:	ldr	r2, [r4, r2]
   18c24:	str	r2, [r3, #-80]	; 0xffffffb0
   18c28:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18c2c:	add	r3, r3, #1
   18c30:	lsl	r3, r3, #3
   18c34:	sub	r2, fp, #12
   18c38:	add	r3, r2, r3
   18c3c:	ldr	r2, [fp, #-16]
   18c40:	str	r2, [r3, #-76]	; 0xffffffb4
   18c44:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18c48:	add	r3, r3, #1
   18c4c:	str	r3, [fp, #-88]	; 0xffffffa8
   18c50:	sub	r3, fp, #92	; 0x5c
   18c54:	mov	r1, r3
   18c58:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18c5c:	bl	14e10 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   18c60:	mov	r3, r0
   18c64:	mov	r0, r3
   18c68:	sub	sp, fp, #8
   18c6c:	pop	{r4, fp, pc}
   18c70:	andeq	r3, r1, r4, lsl #10
   18c74:	andeq	r0, r0, r8, asr r0

00018c78 <flatcc_builder_create_string_str@@Base>:
   18c78:	push	{fp, lr}
   18c7c:	add	fp, sp, #4
   18c80:	sub	sp, sp, #8
   18c84:	str	r0, [fp, #-8]
   18c88:	str	r1, [fp, #-12]
   18c8c:	ldr	r0, [fp, #-12]
   18c90:	bl	12054 <strlen@plt>
   18c94:	mov	r3, r0
   18c98:	mov	r2, r3
   18c9c:	ldr	r1, [fp, #-12]
   18ca0:	ldr	r0, [fp, #-8]
   18ca4:	bl	18ad8 <flatcc_builder_create_string@@Base>
   18ca8:	mov	r3, r0
   18cac:	mov	r0, r3
   18cb0:	sub	sp, fp, #4
   18cb4:	pop	{fp, pc}

00018cb8 <flatcc_builder_create_string_strn@@Base>:
   18cb8:	push	{fp, lr}
   18cbc:	add	fp, sp, #4
   18cc0:	sub	sp, sp, #16
   18cc4:	str	r0, [fp, #-8]
   18cc8:	str	r1, [fp, #-12]
   18ccc:	str	r2, [fp, #-16]
   18cd0:	ldr	r1, [fp, #-16]
   18cd4:	ldr	r0, [fp, #-12]
   18cd8:	bl	1383c <main@@Base+0x1c8>
   18cdc:	mov	r3, r0
   18ce0:	mov	r2, r3
   18ce4:	ldr	r1, [fp, #-12]
   18ce8:	ldr	r0, [fp, #-8]
   18cec:	bl	18ad8 <flatcc_builder_create_string@@Base>
   18cf0:	mov	r3, r0
   18cf4:	mov	r0, r3
   18cf8:	sub	sp, fp, #4
   18cfc:	pop	{fp, pc}

00018d00 <flatcc_builder_end_string@@Base>:
   18d00:	push	{fp, lr}
   18d04:	add	fp, sp, #4
   18d08:	sub	sp, sp, #16
   18d0c:	str	r0, [fp, #-16]
   18d10:	ldr	r3, [fp, #-16]
   18d14:	ldr	r3, [r3, #32]
   18d18:	ldrh	r3, [r3, #14]
   18d1c:	cmp	r3, #6
   18d20:	beq	18d44 <flatcc_builder_end_string@@Base+0x44>
   18d24:	ldr	r3, [pc, #160]	; 18dcc <flatcc_builder_end_string@@Base+0xcc>
   18d28:	add	r3, pc, r3
   18d2c:	ldr	r2, [pc, #156]	; 18dd0 <flatcc_builder_end_string@@Base+0xd0>
   18d30:	ldr	r1, [pc, #156]	; 18dd4 <flatcc_builder_end_string@@Base+0xd4>
   18d34:	add	r1, pc, r1
   18d38:	ldr	r0, [pc, #152]	; 18dd8 <flatcc_builder_end_string@@Base+0xd8>
   18d3c:	add	r0, pc, r0
   18d40:	bl	120b4 <__assert_fail@plt>
   18d44:	ldr	r3, [fp, #-16]
   18d48:	ldr	r3, [r3, #32]
   18d4c:	ldr	r2, [r3, #20]
   18d50:	ldr	r3, [fp, #-16]
   18d54:	ldr	r3, [r3, #20]
   18d58:	cmp	r2, r3
   18d5c:	beq	18d80 <flatcc_builder_end_string@@Base+0x80>
   18d60:	ldr	r3, [pc, #116]	; 18ddc <flatcc_builder_end_string@@Base+0xdc>
   18d64:	add	r3, pc, r3
   18d68:	ldr	r2, [pc, #112]	; 18de0 <flatcc_builder_end_string@@Base+0xe0>
   18d6c:	ldr	r1, [pc, #112]	; 18de4 <flatcc_builder_end_string@@Base+0xe4>
   18d70:	add	r1, pc, r1
   18d74:	ldr	r0, [pc, #108]	; 18de8 <flatcc_builder_end_string@@Base+0xe8>
   18d78:	add	r0, pc, r0
   18d7c:	bl	120b4 <__assert_fail@plt>
   18d80:	ldr	r3, [fp, #-16]
   18d84:	ldr	r1, [r3, #16]
   18d88:	ldr	r3, [fp, #-16]
   18d8c:	ldr	r3, [r3, #20]
   18d90:	mov	r2, r3
   18d94:	ldr	r0, [fp, #-16]
   18d98:	bl	18ad8 <flatcc_builder_create_string@@Base>
   18d9c:	str	r0, [fp, #-8]
   18da0:	ldr	r3, [fp, #-8]
   18da4:	cmp	r3, #0
   18da8:	bne	18db4 <flatcc_builder_end_string@@Base+0xb4>
   18dac:	mov	r3, #0
   18db0:	b	18dc0 <flatcc_builder_end_string@@Base+0xc0>
   18db4:	ldr	r0, [fp, #-16]
   18db8:	bl	14cc0 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   18dbc:	ldr	r3, [fp, #-8]
   18dc0:	mov	r0, r3
   18dc4:	sub	sp, fp, #4
   18dc8:	pop	{fp, pc}
   18dcc:	andeq	r2, r0, r4, lsr r7
   18dd0:	andeq	r0, r0, r4, asr #13
   18dd4:	andeq	r1, r0, r0, ror #28
   18dd8:	andeq	r2, r0, ip, lsr r0
   18ddc:	strdeq	r2, [r0], -r8
   18de0:	andeq	r0, r0, r5, asr #13
   18de4:	andeq	r1, r0, r4, lsr #28
   18de8:	ldrdeq	r2, [r0], -r4

00018dec <flatcc_builder_string_edit@@Base>:
   18dec:	push	{fp}		; (str fp, [sp, #-4]!)
   18df0:	add	fp, sp, #0
   18df4:	sub	sp, sp, #12
   18df8:	str	r0, [fp, #-8]
   18dfc:	ldr	r3, [fp, #-8]
   18e00:	ldr	r3, [r3, #16]
   18e04:	mov	r0, r3
   18e08:	add	sp, fp, #0
   18e0c:	pop	{fp}		; (ldr fp, [sp], #4)
   18e10:	bx	lr

00018e14 <flatcc_builder_string_len@@Base>:
   18e14:	push	{fp}		; (str fp, [sp, #-4]!)
   18e18:	add	fp, sp, #0
   18e1c:	sub	sp, sp, #12
   18e20:	str	r0, [fp, #-8]
   18e24:	ldr	r3, [fp, #-8]
   18e28:	ldr	r3, [r3, #32]
   18e2c:	ldr	r3, [r3, #20]
   18e30:	mov	r0, r3
   18e34:	add	sp, fp, #0
   18e38:	pop	{fp}		; (ldr fp, [sp], #4)
   18e3c:	bx	lr

00018e40 <flatcc_builder_table_add@@Base>:
   18e40:	push	{fp, lr}
   18e44:	add	fp, sp, #4
   18e48:	sub	sp, sp, #16
   18e4c:	str	r0, [fp, #-8]
   18e50:	str	r1, [fp, #-12]
   18e54:	str	r2, [fp, #-16]
   18e58:	strh	r3, [fp, #-18]	; 0xffffffee
   18e5c:	ldr	r3, [fp, #-8]
   18e60:	ldr	r3, [r3, #32]
   18e64:	ldrh	r3, [r3, #14]
   18e68:	cmp	r3, #3
   18e6c:	beq	18e90 <flatcc_builder_table_add@@Base+0x50>
   18e70:	ldr	r3, [pc, #268]	; 18f84 <flatcc_builder_table_add@@Base+0x144>
   18e74:	add	r3, pc, r3
   18e78:	ldr	r2, [pc, #264]	; 18f88 <flatcc_builder_table_add@@Base+0x148>
   18e7c:	ldr	r1, [pc, #264]	; 18f8c <flatcc_builder_table_add@@Base+0x14c>
   18e80:	add	r1, pc, r1
   18e84:	ldr	r0, [pc, #260]	; 18f90 <flatcc_builder_table_add@@Base+0x150>
   18e88:	add	r0, pc, r0
   18e8c:	bl	120b4 <__assert_fail@plt>
   18e90:	ldr	r3, [fp, #-12]
   18e94:	cmp	r3, #0
   18e98:	blt	18eac <flatcc_builder_table_add@@Base+0x6c>
   18e9c:	ldr	r3, [fp, #-12]
   18ea0:	ldr	r2, [pc, #236]	; 18f94 <flatcc_builder_table_add@@Base+0x154>
   18ea4:	cmp	r3, r2
   18ea8:	ble	18ecc <flatcc_builder_table_add@@Base+0x8c>
   18eac:	ldr	r3, [pc, #228]	; 18f98 <flatcc_builder_table_add@@Base+0x158>
   18eb0:	add	r3, pc, r3
   18eb4:	ldr	r2, [pc, #224]	; 18f9c <flatcc_builder_table_add@@Base+0x15c>
   18eb8:	ldr	r1, [pc, #224]	; 18fa0 <flatcc_builder_table_add@@Base+0x160>
   18ebc:	add	r1, pc, r1
   18ec0:	ldr	r0, [pc, #220]	; 18fa4 <flatcc_builder_table_add@@Base+0x164>
   18ec4:	add	r0, pc, r0
   18ec8:	bl	120b4 <__assert_fail@plt>
   18ecc:	ldr	r3, [fp, #-8]
   18ed0:	ldrh	r3, [r3, #130]	; 0x82
   18ed4:	ldrh	r2, [fp, #-18]	; 0xffffffee
   18ed8:	cmp	r2, r3
   18edc:	bls	18eec <flatcc_builder_table_add@@Base+0xac>
   18ee0:	ldr	r3, [fp, #-8]
   18ee4:	ldrh	r2, [fp, #-18]	; 0xffffffee
   18ee8:	strh	r2, [r3, #130]	; 0x82
   18eec:	ldr	r3, [fp, #-8]
   18ef0:	ldr	r2, [r3, #4]
   18ef4:	ldr	r3, [fp, #-12]
   18ef8:	lsl	r3, r3, #1
   18efc:	add	r3, r2, r3
   18f00:	ldrh	r3, [r3]
   18f04:	cmp	r3, #0
   18f08:	beq	18f2c <flatcc_builder_table_add@@Base+0xec>
   18f0c:	ldr	r3, [pc, #148]	; 18fa8 <flatcc_builder_table_add@@Base+0x168>
   18f10:	add	r3, pc, r3
   18f14:	ldr	r2, [pc, #144]	; 18fac <flatcc_builder_table_add@@Base+0x16c>
   18f18:	ldr	r1, [pc, #144]	; 18fb0 <flatcc_builder_table_add@@Base+0x170>
   18f1c:	add	r1, pc, r1
   18f20:	ldr	r0, [pc, #140]	; 18fb4 <flatcc_builder_table_add@@Base+0x174>
   18f24:	add	r0, pc, r0
   18f28:	bl	120b4 <__assert_fail@plt>
   18f2c:	ldr	r3, [fp, #-8]
   18f30:	ldr	r2, [r3, #12]
   18f34:	ldr	r3, [fp, #-12]
   18f38:	eor	r3, r3, r2
   18f3c:	ldr	r2, [pc, #116]	; 18fb8 <flatcc_builder_table_add@@Base+0x178>
   18f40:	mul	r2, r2, r3
   18f44:	ldr	r3, [fp, #-16]
   18f48:	eor	r3, r3, r2
   18f4c:	ldr	r2, [pc, #100]	; 18fb8 <flatcc_builder_table_add@@Base+0x178>
   18f50:	mul	r2, r2, r3
   18f54:	ldr	r3, [fp, #-8]
   18f58:	str	r2, [r3, #12]
   18f5c:	ldr	r3, [fp, #-12]
   18f60:	uxth	r3, r3
   18f64:	ldrh	r2, [fp, #-18]	; 0xffffffee
   18f68:	ldr	r1, [fp, #-16]
   18f6c:	ldr	r0, [fp, #-8]
   18f70:	bl	13cd4 <flatcc_builder_default_alloc@@Base+0x444>
   18f74:	mov	r3, r0
   18f78:	mov	r0, r3
   18f7c:	sub	sp, fp, #4
   18f80:	pop	{fp, pc}
   18f84:	andeq	r2, r0, r4, lsl #12
   18f88:	andeq	r0, r0, sp, ror #13
   18f8c:	andeq	r1, r0, r4, lsl sp
   18f90:	andeq	r1, r0, ip, asr #31
   18f94:	strdeq	r7, [r0], -ip
   18f98:	andeq	r2, r0, r8, asr #11
   18f9c:	andeq	r0, r0, lr, ror #13
   18fa0:	ldrdeq	r1, [r0], -r8
   18fa4:	andeq	r2, r0, ip, lsr #1
   18fa8:	andeq	r2, r0, r8, ror #10
   18fac:	strdeq	r0, [r0], -r8
   18fb0:	andeq	r1, r0, r8, ror ip
   18fb4:	ldrdeq	r1, [r0], -r0
   18fb8:			; <UNDEFINED> instruction: 0x9e3779b1

00018fbc <flatcc_builder_table_edit@@Base>:
   18fbc:	push	{fp, lr}
   18fc0:	add	fp, sp, #4
   18fc4:	sub	sp, sp, #8
   18fc8:	str	r0, [fp, #-8]
   18fcc:	str	r1, [fp, #-12]
   18fd0:	ldr	r3, [fp, #-8]
   18fd4:	ldr	r3, [r3, #32]
   18fd8:	ldrh	r3, [r3, #14]
   18fdc:	cmp	r3, #3
   18fe0:	beq	19004 <flatcc_builder_table_edit@@Base+0x48>
   18fe4:	ldr	r3, [pc, #64]	; 1902c <flatcc_builder_table_edit@@Base+0x70>
   18fe8:	add	r3, pc, r3
   18fec:	ldr	r2, [pc, #60]	; 19030 <flatcc_builder_table_edit@@Base+0x74>
   18ff0:	ldr	r1, [pc, #60]	; 19034 <flatcc_builder_table_edit@@Base+0x78>
   18ff4:	add	r1, pc, r1
   18ff8:	ldr	r0, [pc, #56]	; 19038 <flatcc_builder_table_edit@@Base+0x7c>
   18ffc:	add	r0, pc, r0
   19000:	bl	120b4 <__assert_fail@plt>
   19004:	ldr	r3, [fp, #-8]
   19008:	ldr	r2, [r3, #16]
   1900c:	ldr	r3, [fp, #-8]
   19010:	ldr	r1, [r3, #20]
   19014:	ldr	r3, [fp, #-12]
   19018:	sub	r3, r1, r3
   1901c:	add	r3, r2, r3
   19020:	mov	r0, r3
   19024:	sub	sp, fp, #4
   19028:	pop	{fp, pc}
   1902c:	andeq	r2, r0, ip, lsr #9
   19030:	andeq	r0, r0, r2, lsl #14
   19034:	andeq	r1, r0, r0, lsr #23
   19038:	andeq	r1, r0, r8, asr lr

0001903c <flatcc_builder_table_add_copy@@Base>:
   1903c:	push	{fp, lr}
   19040:	add	fp, sp, #4
   19044:	sub	sp, sp, #24
   19048:	str	r0, [fp, #-16]
   1904c:	str	r1, [fp, #-20]	; 0xffffffec
   19050:	str	r2, [fp, #-24]	; 0xffffffe8
   19054:	str	r3, [fp, #-28]	; 0xffffffe4
   19058:	ldrh	r3, [fp, #4]
   1905c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19060:	ldr	r1, [fp, #-20]	; 0xffffffec
   19064:	ldr	r0, [fp, #-16]
   19068:	bl	18e40 <flatcc_builder_table_add@@Base>
   1906c:	str	r0, [fp, #-8]
   19070:	ldr	r3, [fp, #-8]
   19074:	cmp	r3, #0
   19078:	beq	1908c <flatcc_builder_table_add_copy@@Base+0x50>
   1907c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19080:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19084:	ldr	r0, [fp, #-8]
   19088:	bl	11ff4 <memcpy@plt>
   1908c:	ldr	r3, [fp, #-8]
   19090:	mov	r0, r3
   19094:	sub	sp, fp, #4
   19098:	pop	{fp, pc}

0001909c <flatcc_builder_table_add_offset@@Base>:
   1909c:	push	{fp, lr}
   190a0:	add	fp, sp, #4
   190a4:	sub	sp, sp, #8
   190a8:	str	r0, [fp, #-8]
   190ac:	str	r1, [fp, #-12]
   190b0:	ldr	r3, [fp, #-8]
   190b4:	ldr	r3, [r3, #32]
   190b8:	ldrh	r3, [r3, #14]
   190bc:	cmp	r3, #3
   190c0:	beq	190e4 <flatcc_builder_table_add_offset@@Base+0x48>
   190c4:	ldr	r3, [pc, #228]	; 191b0 <flatcc_builder_table_add_offset@@Base+0x114>
   190c8:	add	r3, pc, r3
   190cc:	ldr	r2, [pc, #224]	; 191b4 <flatcc_builder_table_add_offset@@Base+0x118>
   190d0:	ldr	r1, [pc, #224]	; 191b8 <flatcc_builder_table_add_offset@@Base+0x11c>
   190d4:	add	r1, pc, r1
   190d8:	ldr	r0, [pc, #220]	; 191bc <flatcc_builder_table_add_offset@@Base+0x120>
   190dc:	add	r0, pc, r0
   190e0:	bl	120b4 <__assert_fail@plt>
   190e4:	ldr	r3, [fp, #-12]
   190e8:	cmp	r3, #0
   190ec:	blt	19100 <flatcc_builder_table_add_offset@@Base+0x64>
   190f0:	ldr	r3, [fp, #-12]
   190f4:	ldr	r2, [pc, #196]	; 191c0 <flatcc_builder_table_add_offset@@Base+0x124>
   190f8:	cmp	r3, r2
   190fc:	ble	19120 <flatcc_builder_table_add_offset@@Base+0x84>
   19100:	ldr	r3, [pc, #188]	; 191c4 <flatcc_builder_table_add_offset@@Base+0x128>
   19104:	add	r3, pc, r3
   19108:	ldr	r2, [pc, #184]	; 191c8 <flatcc_builder_table_add_offset@@Base+0x12c>
   1910c:	ldr	r1, [pc, #184]	; 191cc <flatcc_builder_table_add_offset@@Base+0x130>
   19110:	add	r1, pc, r1
   19114:	ldr	r0, [pc, #180]	; 191d0 <flatcc_builder_table_add_offset@@Base+0x134>
   19118:	add	r0, pc, r0
   1911c:	bl	120b4 <__assert_fail@plt>
   19120:	ldr	r3, [fp, #-8]
   19124:	ldr	r2, [r3, #4]
   19128:	ldr	r3, [fp, #-12]
   1912c:	lsl	r3, r3, #1
   19130:	add	r3, r2, r3
   19134:	ldrh	r3, [r3]
   19138:	cmp	r3, #0
   1913c:	beq	19160 <flatcc_builder_table_add_offset@@Base+0xc4>
   19140:	ldr	r3, [pc, #140]	; 191d4 <flatcc_builder_table_add_offset@@Base+0x138>
   19144:	add	r3, pc, r3
   19148:	ldr	r2, [pc, #136]	; 191d8 <flatcc_builder_table_add_offset@@Base+0x13c>
   1914c:	ldr	r1, [pc, #136]	; 191dc <flatcc_builder_table_add_offset@@Base+0x140>
   19150:	add	r1, pc, r1
   19154:	ldr	r0, [pc, #132]	; 191e0 <flatcc_builder_table_add_offset@@Base+0x144>
   19158:	add	r0, pc, r0
   1915c:	bl	120b4 <__assert_fail@plt>
   19160:	ldr	r3, [fp, #-8]
   19164:	ldr	r2, [r3, #12]
   19168:	ldr	r3, [fp, #-12]
   1916c:	eor	r3, r3, r2
   19170:	ldr	r2, [pc, #108]	; 191e4 <flatcc_builder_table_add_offset@@Base+0x148>
   19174:	mul	r3, r2, r3
   19178:	eor	r3, r3, #4
   1917c:	ldr	r2, [pc, #96]	; 191e4 <flatcc_builder_table_add_offset@@Base+0x148>
   19180:	mul	r2, r2, r3
   19184:	ldr	r3, [fp, #-8]
   19188:	str	r2, [r3, #12]
   1918c:	ldr	r3, [fp, #-12]
   19190:	uxth	r3, r3
   19194:	mov	r1, r3
   19198:	ldr	r0, [fp, #-8]
   1919c:	bl	13de0 <flatcc_builder_default_alloc@@Base+0x550>
   191a0:	mov	r3, r0
   191a4:	mov	r0, r3
   191a8:	sub	sp, fp, #4
   191ac:	pop	{fp, pc}
   191b0:	andeq	r2, r0, r8, ror #7
   191b4:	andeq	r0, r0, r3, lsl r7
   191b8:	andeq	r1, r0, r0, asr #21
   191bc:	andeq	r1, r0, r8, ror sp
   191c0:	strdeq	r7, [r0], -ip
   191c4:	andeq	r2, r0, ip, lsr #7
   191c8:	andeq	r0, r0, r4, lsl r7
   191cc:	andeq	r1, r0, r4, lsl #21
   191d0:	andeq	r1, r0, r8, asr lr
   191d4:	andeq	r2, r0, ip, ror #6
   191d8:	andeq	r0, r0, fp, lsl r7
   191dc:	andeq	r1, r0, r4, asr #20
   191e0:	muleq	r0, ip, sl
   191e4:			; <UNDEFINED> instruction: 0x9e3779b1

000191e8 <flatcc_builder_push_buffer_alignment@@Base>:
   191e8:	push	{fp}		; (str fp, [sp, #-4]!)
   191ec:	add	fp, sp, #0
   191f0:	sub	sp, sp, #20
   191f4:	str	r0, [fp, #-16]
   191f8:	ldr	r3, [fp, #-16]
   191fc:	ldrh	r3, [r3, #128]	; 0x80
   19200:	strh	r3, [fp, #-6]
   19204:	ldr	r3, [fp, #-16]
   19208:	mov	r2, #4
   1920c:	strh	r2, [r3, #128]	; 0x80
   19210:	ldrh	r3, [fp, #-6]
   19214:	mov	r0, r3
   19218:	add	sp, fp, #0
   1921c:	pop	{fp}		; (ldr fp, [sp], #4)
   19220:	bx	lr

00019224 <flatcc_builder_pop_buffer_alignment@@Base>:
   19224:	push	{fp, lr}
   19228:	add	fp, sp, #4
   1922c:	sub	sp, sp, #8
   19230:	str	r0, [fp, #-8]
   19234:	mov	r3, r1
   19238:	strh	r3, [fp, #-10]
   1923c:	ldrh	r3, [fp, #-10]
   19240:	mov	r1, r3
   19244:	ldr	r0, [fp, #-8]
   19248:	bl	1474c <flatcc_builder_clear@@Base+0xb0>
   1924c:	nop			; (mov r0, r0)
   19250:	sub	sp, fp, #4
   19254:	pop	{fp, pc}

00019258 <flatcc_builder_get_buffer_alignment@@Base>:
   19258:	push	{fp}		; (str fp, [sp, #-4]!)
   1925c:	add	fp, sp, #0
   19260:	sub	sp, sp, #12
   19264:	str	r0, [fp, #-8]
   19268:	ldr	r3, [fp, #-8]
   1926c:	ldrh	r3, [r3, #128]	; 0x80
   19270:	mov	r0, r3
   19274:	add	sp, fp, #0
   19278:	pop	{fp}		; (ldr fp, [sp], #4)
   1927c:	bx	lr

00019280 <flatcc_builder_set_vtable_clustering@@Base>:
   19280:	push	{fp}		; (str fp, [sp, #-4]!)
   19284:	add	fp, sp, #0
   19288:	sub	sp, sp, #12
   1928c:	str	r0, [fp, #-8]
   19290:	str	r1, [fp, #-12]
   19294:	ldr	r3, [fp, #-12]
   19298:	cmp	r3, #0
   1929c:	moveq	r3, #1
   192a0:	movne	r3, #0
   192a4:	uxtb	r3, r3
   192a8:	mov	r2, r3
   192ac:	ldr	r3, [fp, #-8]
   192b0:	str	r2, [r3, #180]	; 0xb4
   192b4:	nop			; (mov r0, r0)
   192b8:	add	sp, fp, #0
   192bc:	pop	{fp}		; (ldr fp, [sp], #4)
   192c0:	bx	lr

000192c4 <flatcc_builder_set_block_align@@Base>:
   192c4:	push	{fp}		; (str fp, [sp, #-4]!)
   192c8:	add	fp, sp, #0
   192cc:	sub	sp, sp, #12
   192d0:	str	r0, [fp, #-8]
   192d4:	mov	r3, r1
   192d8:	strh	r3, [fp, #-10]
   192dc:	ldr	r3, [fp, #-8]
   192e0:	ldrh	r2, [fp, #-10]
   192e4:	strh	r2, [r3, #132]	; 0x84
   192e8:	nop			; (mov r0, r0)
   192ec:	add	sp, fp, #0
   192f0:	pop	{fp}		; (ldr fp, [sp], #4)
   192f4:	bx	lr

000192f8 <flatcc_builder_get_level@@Base>:
   192f8:	push	{fp}		; (str fp, [sp, #-4]!)
   192fc:	add	fp, sp, #0
   19300:	sub	sp, sp, #12
   19304:	str	r0, [fp, #-8]
   19308:	ldr	r3, [fp, #-8]
   1930c:	ldr	r3, [r3, #156]	; 0x9c
   19310:	mov	r0, r3
   19314:	add	sp, fp, #0
   19318:	pop	{fp}		; (ldr fp, [sp], #4)
   1931c:	bx	lr

00019320 <flatcc_builder_set_max_level@@Base>:
   19320:	push	{fp}		; (str fp, [sp, #-4]!)
   19324:	add	fp, sp, #0
   19328:	sub	sp, sp, #12
   1932c:	str	r0, [fp, #-8]
   19330:	str	r1, [fp, #-12]
   19334:	ldr	r3, [fp, #-8]
   19338:	ldr	r2, [fp, #-12]
   1933c:	str	r2, [r3, #176]	; 0xb0
   19340:	ldr	r3, [fp, #-8]
   19344:	ldr	r2, [r3, #160]	; 0xa0
   19348:	ldr	r3, [fp, #-8]
   1934c:	ldr	r3, [r3, #176]	; 0xb0
   19350:	cmp	r2, r3
   19354:	bge	19368 <flatcc_builder_set_max_level@@Base+0x48>
   19358:	ldr	r3, [fp, #-8]
   1935c:	ldr	r2, [r3, #176]	; 0xb0
   19360:	ldr	r3, [fp, #-8]
   19364:	str	r2, [r3, #160]	; 0xa0
   19368:	nop			; (mov r0, r0)
   1936c:	add	sp, fp, #0
   19370:	pop	{fp}		; (ldr fp, [sp], #4)
   19374:	bx	lr

00019378 <flatcc_builder_get_buffer_size@@Base>:
   19378:	push	{fp}		; (str fp, [sp, #-4]!)
   1937c:	add	fp, sp, #0
   19380:	sub	sp, sp, #12
   19384:	str	r0, [fp, #-8]
   19388:	ldr	r3, [fp, #-8]
   1938c:	ldr	r2, [r3, #140]	; 0x8c
   19390:	ldr	r3, [fp, #-8]
   19394:	ldr	r3, [r3, #136]	; 0x88
   19398:	sub	r3, r2, r3
   1939c:	mov	r0, r3
   193a0:	add	sp, fp, #0
   193a4:	pop	{fp}		; (ldr fp, [sp], #4)
   193a8:	bx	lr

000193ac <flatcc_builder_get_buffer_start@@Base>:
   193ac:	push	{fp}		; (str fp, [sp, #-4]!)
   193b0:	add	fp, sp, #0
   193b4:	sub	sp, sp, #12
   193b8:	str	r0, [fp, #-8]
   193bc:	ldr	r3, [fp, #-8]
   193c0:	ldr	r3, [r3, #136]	; 0x88
   193c4:	mov	r0, r3
   193c8:	add	sp, fp, #0
   193cc:	pop	{fp}		; (ldr fp, [sp], #4)
   193d0:	bx	lr

000193d4 <flatcc_builder_get_buffer_end@@Base>:
   193d4:	push	{fp}		; (str fp, [sp, #-4]!)
   193d8:	add	fp, sp, #0
   193dc:	sub	sp, sp, #12
   193e0:	str	r0, [fp, #-8]
   193e4:	ldr	r3, [fp, #-8]
   193e8:	ldr	r3, [r3, #140]	; 0x8c
   193ec:	mov	r0, r3
   193f0:	add	sp, fp, #0
   193f4:	pop	{fp}		; (ldr fp, [sp], #4)
   193f8:	bx	lr

000193fc <flatcc_builder_set_vtable_cache_limit@@Base>:
   193fc:	push	{fp}		; (str fp, [sp, #-4]!)
   19400:	add	fp, sp, #0
   19404:	sub	sp, sp, #12
   19408:	str	r0, [fp, #-8]
   1940c:	str	r1, [fp, #-12]
   19410:	ldr	r3, [fp, #-8]
   19414:	ldr	r2, [fp, #-12]
   19418:	str	r2, [r3, #172]	; 0xac
   1941c:	nop			; (mov r0, r0)
   19420:	add	sp, fp, #0
   19424:	pop	{fp}		; (ldr fp, [sp], #4)
   19428:	bx	lr

0001942c <flatcc_builder_set_identifier@@Base>:
   1942c:	push	{fp}		; (str fp, [sp, #-4]!)
   19430:	add	fp, sp, #0
   19434:	sub	sp, sp, #12
   19438:	str	r0, [fp, #-8]
   1943c:	str	r1, [fp, #-12]
   19440:	ldr	r1, [pc, #60]	; 19484 <flatcc_builder_set_identifier@@Base+0x58>
   19444:	add	r1, pc, r1
   19448:	ldr	r3, [fp, #-8]
   1944c:	add	r2, r3, #168	; 0xa8
   19450:	ldr	r3, [fp, #-12]
   19454:	cmp	r3, #0
   19458:	beq	19464 <flatcc_builder_set_identifier@@Base+0x38>
   1945c:	ldr	r3, [fp, #-12]
   19460:	b	1946c <flatcc_builder_set_identifier@@Base+0x40>
   19464:	ldr	r3, [pc, #28]	; 19488 <flatcc_builder_set_identifier@@Base+0x5c>
   19468:	ldr	r3, [r1, r3]
   1946c:	ldr	r3, [r3]
   19470:	str	r3, [r2]
   19474:	nop			; (mov r0, r0)
   19478:	add	sp, fp, #0
   1947c:	pop	{fp}		; (ldr fp, [sp], #4)
   19480:	bx	lr
   19484:			; <UNDEFINED> instruction: 0x00012bb4
   19488:	andeq	r0, r0, r8, asr r0

0001948c <flatcc_builder_get_type@@Base>:
   1948c:	push	{fp}		; (str fp, [sp, #-4]!)
   19490:	add	fp, sp, #0
   19494:	sub	sp, sp, #12
   19498:	str	r0, [fp, #-8]
   1949c:	ldr	r3, [fp, #-8]
   194a0:	ldr	r3, [r3, #32]
   194a4:	cmp	r3, #0
   194a8:	beq	194bc <flatcc_builder_get_type@@Base+0x30>
   194ac:	ldr	r3, [fp, #-8]
   194b0:	ldr	r3, [r3, #32]
   194b4:	ldrh	r3, [r3, #14]
   194b8:	b	194c0 <flatcc_builder_get_type@@Base+0x34>
   194bc:	mov	r3, #0
   194c0:	mov	r0, r3
   194c4:	add	sp, fp, #0
   194c8:	pop	{fp}		; (ldr fp, [sp], #4)
   194cc:	bx	lr

000194d0 <flatcc_builder_get_type_at@@Base>:
   194d0:	push	{fp}		; (str fp, [sp, #-4]!)
   194d4:	add	fp, sp, #0
   194d8:	sub	sp, sp, #12
   194dc:	str	r0, [fp, #-8]
   194e0:	str	r1, [fp, #-12]
   194e4:	ldr	r3, [fp, #-12]
   194e8:	cmp	r3, #0
   194ec:	ble	19504 <flatcc_builder_get_type_at@@Base+0x34>
   194f0:	ldr	r3, [fp, #-8]
   194f4:	ldr	r2, [r3, #156]	; 0x9c
   194f8:	ldr	r3, [fp, #-12]
   194fc:	cmp	r2, r3
   19500:	bge	1950c <flatcc_builder_get_type_at@@Base+0x3c>
   19504:	mov	r3, #0
   19508:	b	19540 <flatcc_builder_get_type_at@@Base+0x70>
   1950c:	ldr	r3, [fp, #-8]
   19510:	ldr	r2, [r3, #32]
   19514:	ldr	r3, [fp, #-8]
   19518:	ldr	r3, [r3, #156]	; 0x9c
   1951c:	ldr	r1, [fp, #-12]
   19520:	sub	r3, r1, r3
   19524:	mov	r1, r3
   19528:	mov	r3, r1
   1952c:	lsl	r3, r3, #3
   19530:	add	r3, r3, r1
   19534:	lsl	r3, r3, #2
   19538:	add	r3, r2, r3
   1953c:	ldrh	r3, [r3, #14]
   19540:	mov	r0, r3
   19544:	add	sp, fp, #0
   19548:	pop	{fp}		; (ldr fp, [sp], #4)
   1954c:	bx	lr

00019550 <flatcc_builder_get_direct_buffer@@Base>:
   19550:	push	{fp, lr}
   19554:	add	fp, sp, #4
   19558:	sub	sp, sp, #8
   1955c:	str	r0, [fp, #-8]
   19560:	str	r1, [fp, #-12]
   19564:	ldr	r3, [fp, #-8]
   19568:	ldr	r3, [r3, #184]	; 0xb8
   1956c:	cmp	r3, #0
   19570:	beq	19590 <flatcc_builder_get_direct_buffer@@Base+0x40>
   19574:	ldr	r3, [fp, #-8]
   19578:	add	r3, r3, #188	; 0xbc
   1957c:	ldr	r1, [fp, #-12]
   19580:	mov	r0, r3
   19584:	bl	137bc <main@@Base+0x148>
   19588:	mov	r3, r0
   1958c:	b	195ac <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19590:	ldr	r3, [fp, #-12]
   19594:	cmp	r3, #0
   19598:	beq	195a8 <flatcc_builder_get_direct_buffer@@Base+0x58>
   1959c:	ldr	r3, [fp, #-12]
   195a0:	mov	r2, #0
   195a4:	str	r2, [r3]
   195a8:	mov	r3, #0
   195ac:	mov	r0, r3
   195b0:	sub	sp, fp, #4
   195b4:	pop	{fp, pc}

000195b8 <flatcc_builder_copy_buffer@@Base>:
   195b8:	push	{fp, lr}
   195bc:	add	fp, sp, #4
   195c0:	sub	sp, sp, #16
   195c4:	str	r0, [fp, #-8]
   195c8:	str	r1, [fp, #-12]
   195cc:	str	r2, [fp, #-16]
   195d0:	ldr	r3, [fp, #-8]
   195d4:	ldr	r3, [r3, #184]	; 0xb8
   195d8:	cmp	r3, #0
   195dc:	bne	195e8 <flatcc_builder_copy_buffer@@Base+0x30>
   195e0:	mov	r3, #0
   195e4:	b	19634 <flatcc_builder_copy_buffer@@Base+0x7c>
   195e8:	ldr	r3, [fp, #-8]
   195ec:	add	r3, r3, #188	; 0xbc
   195f0:	ldr	r2, [fp, #-16]
   195f4:	ldr	r1, [fp, #-12]
   195f8:	mov	r0, r3
   195fc:	bl	1a380 <flatcc_emitter_copy_buffer@@Base>
   19600:	str	r0, [fp, #-12]
   19604:	ldr	r3, [fp, #-12]
   19608:	cmp	r3, #0
   1960c:	bne	19630 <flatcc_builder_copy_buffer@@Base+0x78>
   19610:	ldr	r3, [pc, #40]	; 19640 <flatcc_builder_copy_buffer@@Base+0x88>
   19614:	add	r3, pc, r3
   19618:	ldr	r2, [pc, #36]	; 19644 <flatcc_builder_copy_buffer@@Base+0x8c>
   1961c:	ldr	r1, [pc, #36]	; 19648 <flatcc_builder_copy_buffer@@Base+0x90>
   19620:	add	r1, pc, r1
   19624:	ldr	r0, [pc, #32]	; 1964c <flatcc_builder_copy_buffer@@Base+0x94>
   19628:	add	r0, pc, r0
   1962c:	bl	120b4 <__assert_fail@plt>
   19630:	ldr	r3, [fp, #-12]
   19634:	mov	r0, r3
   19638:	sub	sp, fp, #4
   1963c:	pop	{fp, pc}
   19640:			; <UNDEFINED> instruction: 0x00001ebc
   19644:	andeq	r0, r0, r6, lsl #15
   19648:	andeq	r1, r0, r4, ror r5
   1964c:	andeq	r1, r0, ip, lsl #19

00019650 <flatcc_builder_finalize_buffer@@Base>:
   19650:	push	{fp, lr}
   19654:	add	fp, sp, #4
   19658:	sub	sp, sp, #16
   1965c:	str	r0, [fp, #-16]
   19660:	str	r1, [fp, #-20]	; 0xffffffec
   19664:	ldr	r0, [fp, #-16]
   19668:	bl	19378 <flatcc_builder_get_buffer_size@@Base>
   1966c:	str	r0, [fp, #-8]
   19670:	ldr	r3, [fp, #-20]	; 0xffffffec
   19674:	cmp	r3, #0
   19678:	beq	19688 <flatcc_builder_finalize_buffer@@Base+0x38>
   1967c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19680:	ldr	r2, [fp, #-8]
   19684:	str	r2, [r3]
   19688:	ldr	r0, [fp, #-8]
   1968c:	bl	12030 <malloc@plt>
   19690:	mov	r3, r0
   19694:	str	r3, [fp, #-12]
   19698:	ldr	r3, [fp, #-12]
   1969c:	cmp	r3, #0
   196a0:	bne	196c4 <flatcc_builder_finalize_buffer@@Base+0x74>
   196a4:	ldr	r3, [pc, #136]	; 19734 <flatcc_builder_finalize_buffer@@Base+0xe4>
   196a8:	add	r3, pc, r3
   196ac:	ldr	r2, [pc, #132]	; 19738 <flatcc_builder_finalize_buffer@@Base+0xe8>
   196b0:	ldr	r1, [pc, #132]	; 1973c <flatcc_builder_finalize_buffer@@Base+0xec>
   196b4:	add	r1, pc, r1
   196b8:	ldr	r0, [pc, #128]	; 19740 <flatcc_builder_finalize_buffer@@Base+0xf0>
   196bc:	add	r0, pc, r0
   196c0:	bl	120b4 <__assert_fail@plt>
   196c4:	ldr	r2, [fp, #-8]
   196c8:	ldr	r1, [fp, #-12]
   196cc:	ldr	r0, [fp, #-16]
   196d0:	bl	195b8 <flatcc_builder_copy_buffer@@Base>
   196d4:	mov	r3, r0
   196d8:	cmp	r3, #0
   196dc:	bne	19700 <flatcc_builder_finalize_buffer@@Base+0xb0>
   196e0:	ldr	r3, [pc, #92]	; 19744 <flatcc_builder_finalize_buffer@@Base+0xf4>
   196e4:	add	r3, pc, r3
   196e8:	ldr	r2, [pc, #88]	; 19748 <flatcc_builder_finalize_buffer@@Base+0xf8>
   196ec:	ldr	r1, [pc, #88]	; 1974c <flatcc_builder_finalize_buffer@@Base+0xfc>
   196f0:	add	r1, pc, r1
   196f4:	ldr	r0, [pc, #84]	; 19750 <flatcc_builder_finalize_buffer@@Base+0x100>
   196f8:	add	r0, pc, r0
   196fc:	bl	120b4 <__assert_fail@plt>
   19700:	ldr	r3, [fp, #-12]
   19704:	cmp	r3, #0
   19708:	bne	19724 <flatcc_builder_finalize_buffer@@Base+0xd4>
   1970c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19710:	cmp	r3, #0
   19714:	beq	19724 <flatcc_builder_finalize_buffer@@Base+0xd4>
   19718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1971c:	mov	r2, #0
   19720:	str	r2, [r3]
   19724:	ldr	r3, [fp, #-12]
   19728:	mov	r0, r3
   1972c:	sub	sp, fp, #4
   19730:	pop	{fp, pc}
   19734:	andeq	r1, r0, r4, asr #28
   19738:	muleq	r0, r8, r7
   1973c:	andeq	r1, r0, r0, ror #9
   19740:	andeq	r1, r0, r8, lsr r5
   19744:	andeq	r1, r0, r8, lsl #28
   19748:	muleq	r0, ip, r7
   1974c:	andeq	r1, r0, r4, lsr #9
   19750:	strdeq	r1, [r0], -ip

00019754 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19754:	push	{fp, lr}
   19758:	add	fp, sp, #4
   1975c:	sub	sp, sp, #24
   19760:	str	r0, [fp, #-24]	; 0xffffffe8
   19764:	str	r1, [fp, #-28]	; 0xffffffe4
   19768:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1976c:	bl	19378 <flatcc_builder_get_buffer_size@@Base>
   19770:	str	r0, [fp, #-12]
   19774:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19778:	cmp	r3, #0
   1977c:	beq	1978c <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   19780:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19784:	ldr	r2, [fp, #-12]
   19788:	str	r2, [r3]
   1978c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19790:	bl	19258 <flatcc_builder_get_buffer_alignment@@Base>
   19794:	mov	r3, r0
   19798:	str	r3, [fp, #-16]
   1979c:	ldr	r2, [fp, #-12]
   197a0:	ldr	r3, [fp, #-16]
   197a4:	add	r3, r2, r3
   197a8:	sub	r2, r3, #1
   197ac:	ldr	r3, [fp, #-16]
   197b0:	rsb	r3, r3, #0
   197b4:	and	r3, r3, r2
   197b8:	str	r3, [fp, #-12]
   197bc:	ldr	r1, [fp, #-12]
   197c0:	ldr	r0, [fp, #-16]
   197c4:	bl	136c8 <main@@Base+0x54>
   197c8:	str	r0, [fp, #-8]
   197cc:	ldr	r3, [fp, #-8]
   197d0:	cmp	r3, #0
   197d4:	beq	19808 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   197d8:	ldr	r2, [fp, #-12]
   197dc:	ldr	r1, [fp, #-8]
   197e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197e4:	bl	195b8 <flatcc_builder_copy_buffer@@Base>
   197e8:	mov	r3, r0
   197ec:	cmp	r3, #0
   197f0:	bne	1980c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   197f4:	ldr	r0, [fp, #-8]
   197f8:	bl	11fe8 <free@plt>
   197fc:	mov	r3, #0
   19800:	str	r3, [fp, #-8]
   19804:	b	1980c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19808:	nop			; (mov r0, r0)
   1980c:	ldr	r3, [fp, #-8]
   19810:	cmp	r3, #0
   19814:	bne	19830 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19818:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1981c:	cmp	r3, #0
   19820:	beq	19830 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   19824:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19828:	mov	r2, #0
   1982c:	str	r2, [r3]
   19830:	ldr	r3, [fp, #-8]
   19834:	mov	r0, r3
   19838:	sub	sp, fp, #4
   1983c:	pop	{fp, pc}

00019840 <flatcc_builder_aligned_alloc@@Base>:
   19840:	push	{fp, lr}
   19844:	add	fp, sp, #4
   19848:	sub	sp, sp, #8
   1984c:	str	r0, [fp, #-8]
   19850:	str	r1, [fp, #-12]
   19854:	ldr	r1, [fp, #-12]
   19858:	ldr	r0, [fp, #-8]
   1985c:	bl	136c8 <main@@Base+0x54>
   19860:	mov	r3, r0
   19864:	mov	r0, r3
   19868:	sub	sp, fp, #4
   1986c:	pop	{fp, pc}

00019870 <flatcc_builder_aligned_free@@Base>:
   19870:	push	{fp, lr}
   19874:	add	fp, sp, #4
   19878:	sub	sp, sp, #8
   1987c:	str	r0, [fp, #-8]
   19880:	ldr	r0, [fp, #-8]
   19884:	bl	11fe8 <free@plt>
   19888:	nop			; (mov r0, r0)
   1988c:	sub	sp, fp, #4
   19890:	pop	{fp, pc}

00019894 <flatcc_builder_get_emit_context@@Base>:
   19894:	push	{fp}		; (str fp, [sp, #-4]!)
   19898:	add	fp, sp, #0
   1989c:	sub	sp, sp, #12
   198a0:	str	r0, [fp, #-8]
   198a4:	ldr	r3, [fp, #-8]
   198a8:	ldr	r3, [r3, #36]	; 0x24
   198ac:	mov	r0, r3
   198b0:	add	sp, fp, #0
   198b4:	pop	{fp}		; (ldr fp, [sp], #4)
   198b8:	bx	lr
   198bc:	push	{fp, lr}
   198c0:	add	fp, sp, #4
   198c4:	sub	sp, sp, #16
   198c8:	str	r0, [fp, #-16]
   198cc:	mov	r3, #0
   198d0:	str	r3, [fp, #-8]
   198d4:	ldr	r3, [fp, #-16]
   198d8:	ldr	r3, [r3]
   198dc:	cmp	r3, #0
   198e0:	beq	19938 <flatcc_builder_get_emit_context@@Base+0xa4>
   198e4:	ldr	r3, [fp, #-16]
   198e8:	ldr	r3, [r3]
   198ec:	ldr	r2, [r3, #2948]	; 0xb84
   198f0:	ldr	r3, [fp, #-16]
   198f4:	ldr	r3, [r3, #4]
   198f8:	cmp	r2, r3
   198fc:	beq	19938 <flatcc_builder_get_emit_context@@Base+0xa4>
   19900:	ldr	r3, [fp, #-16]
   19904:	ldr	r3, [r3]
   19908:	ldr	r3, [r3, #2948]	; 0xb84
   1990c:	ldr	r2, [fp, #-16]
   19910:	ldr	r2, [r2]
   19914:	ldr	r2, [r2, #2952]	; 0xb88
   19918:	sub	r2, r2, #2944	; 0xb80
   1991c:	str	r2, [r3, #2952]	; 0xb88
   19920:	ldr	r3, [fp, #-16]
   19924:	ldr	r3, [r3]
   19928:	ldr	r2, [r3, #2948]	; 0xb84
   1992c:	ldr	r3, [fp, #-16]
   19930:	str	r2, [r3]
   19934:	b	19a60 <flatcc_builder_get_emit_context@@Base+0x1cc>
   19938:	ldr	r0, [pc, #368]	; 19ab0 <flatcc_builder_get_emit_context@@Base+0x21c>
   1993c:	bl	12030 <malloc@plt>
   19940:	mov	r3, r0
   19944:	str	r3, [fp, #-8]
   19948:	ldr	r3, [fp, #-8]
   1994c:	cmp	r3, #0
   19950:	bne	1995c <flatcc_builder_get_emit_context@@Base+0xc8>
   19954:	mvn	r3, #0
   19958:	b	19aa4 <flatcc_builder_get_emit_context@@Base+0x210>
   1995c:	ldr	r3, [fp, #-16]
   19960:	ldr	r3, [r3, #28]
   19964:	add	r2, r3, #2944	; 0xb80
   19968:	ldr	r3, [fp, #-16]
   1996c:	str	r2, [r3, #28]
   19970:	ldr	r3, [fp, #-16]
   19974:	ldr	r3, [r3]
   19978:	cmp	r3, #0
   1997c:	beq	199d0 <flatcc_builder_get_emit_context@@Base+0x13c>
   19980:	ldr	r3, [fp, #-16]
   19984:	ldr	r2, [r3, #4]
   19988:	ldr	r3, [fp, #-8]
   1998c:	str	r2, [r3, #2948]	; 0xb84
   19990:	ldr	r3, [fp, #-16]
   19994:	ldr	r2, [r3]
   19998:	ldr	r3, [fp, #-8]
   1999c:	str	r2, [r3, #2944]	; 0xb80
   199a0:	ldr	r3, [fp, #-16]
   199a4:	ldr	r3, [r3]
   199a8:	ldr	r2, [fp, #-8]
   199ac:	str	r2, [r3, #2948]	; 0xb84
   199b0:	ldr	r3, [fp, #-16]
   199b4:	ldr	r3, [r3, #4]
   199b8:	ldr	r2, [fp, #-8]
   199bc:	str	r2, [r3, #2944]	; 0xb80
   199c0:	ldr	r3, [fp, #-16]
   199c4:	ldr	r2, [fp, #-8]
   199c8:	str	r2, [r3]
   199cc:	b	19a60 <flatcc_builder_get_emit_context@@Base+0x1cc>
   199d0:	ldr	r3, [fp, #-16]
   199d4:	ldr	r2, [fp, #-8]
   199d8:	str	r2, [r3]
   199dc:	ldr	r3, [fp, #-16]
   199e0:	ldr	r2, [fp, #-8]
   199e4:	str	r2, [r3, #4]
   199e8:	ldr	r3, [fp, #-8]
   199ec:	ldr	r2, [fp, #-8]
   199f0:	str	r2, [r3, #2944]	; 0xb80
   199f4:	ldr	r3, [fp, #-8]
   199f8:	ldr	r2, [fp, #-8]
   199fc:	str	r2, [r3, #2948]	; 0xb84
   19a00:	ldr	r3, [fp, #-16]
   19a04:	ldr	r3, [r3]
   19a08:	add	r2, r3, #1472	; 0x5c0
   19a0c:	ldr	r3, [fp, #-16]
   19a10:	str	r2, [r3, #8]
   19a14:	ldr	r3, [fp, #-16]
   19a18:	ldr	r2, [r3, #8]
   19a1c:	ldr	r3, [fp, #-16]
   19a20:	str	r2, [r3, #16]
   19a24:	ldr	r3, [fp, #-16]
   19a28:	mov	r2, #1472	; 0x5c0
   19a2c:	str	r2, [r3, #12]
   19a30:	ldr	r3, [fp, #-16]
   19a34:	ldr	r3, [r3, #12]
   19a38:	rsb	r2, r3, #2944	; 0xb80
   19a3c:	ldr	r3, [fp, #-16]
   19a40:	str	r2, [r3, #20]
   19a44:	ldr	r3, [fp, #-16]
   19a48:	ldr	r3, [r3, #12]
   19a4c:	rsb	r2, r3, #0
   19a50:	ldr	r3, [fp, #-8]
   19a54:	str	r2, [r3, #2952]	; 0xb88
   19a58:	mov	r3, #0
   19a5c:	b	19aa4 <flatcc_builder_get_emit_context@@Base+0x210>
   19a60:	ldr	r3, [fp, #-16]
   19a64:	ldr	r3, [r3]
   19a68:	add	r2, r3, #2944	; 0xb80
   19a6c:	ldr	r3, [fp, #-16]
   19a70:	str	r2, [r3, #8]
   19a74:	ldr	r3, [fp, #-16]
   19a78:	mov	r2, #2944	; 0xb80
   19a7c:	str	r2, [r3, #12]
   19a80:	ldr	r3, [fp, #-16]
   19a84:	ldr	r3, [r3]
   19a88:	ldr	r2, [fp, #-16]
   19a8c:	ldr	r2, [r2]
   19a90:	ldr	r2, [r2, #2944]	; 0xb80
   19a94:	ldr	r2, [r2, #2952]	; 0xb88
   19a98:	sub	r2, r2, #2944	; 0xb80
   19a9c:	str	r2, [r3, #2952]	; 0xb88
   19aa0:	mov	r3, #0
   19aa4:	mov	r0, r3
   19aa8:	sub	sp, fp, #4
   19aac:	pop	{fp, pc}
   19ab0:	andeq	r0, r0, ip, lsl #23
   19ab4:	push	{fp, lr}
   19ab8:	add	fp, sp, #4
   19abc:	sub	sp, sp, #16
   19ac0:	str	r0, [fp, #-16]
   19ac4:	mov	r3, #0
   19ac8:	str	r3, [fp, #-8]
   19acc:	ldr	r3, [fp, #-16]
   19ad0:	ldr	r3, [r3, #4]
   19ad4:	cmp	r3, #0
   19ad8:	beq	19b10 <flatcc_builder_get_emit_context@@Base+0x27c>
   19adc:	ldr	r3, [fp, #-16]
   19ae0:	ldr	r3, [r3, #4]
   19ae4:	ldr	r2, [r3, #2944]	; 0xb80
   19ae8:	ldr	r3, [fp, #-16]
   19aec:	ldr	r3, [r3]
   19af0:	cmp	r2, r3
   19af4:	beq	19b10 <flatcc_builder_get_emit_context@@Base+0x27c>
   19af8:	ldr	r3, [fp, #-16]
   19afc:	ldr	r3, [r3, #4]
   19b00:	ldr	r2, [r3, #2944]	; 0xb80
   19b04:	ldr	r3, [fp, #-16]
   19b08:	str	r2, [r3, #4]
   19b0c:	b	19c38 <flatcc_builder_get_emit_context@@Base+0x3a4>
   19b10:	ldr	r0, [pc, #368]	; 19c88 <flatcc_builder_get_emit_context@@Base+0x3f4>
   19b14:	bl	12030 <malloc@plt>
   19b18:	mov	r3, r0
   19b1c:	str	r3, [fp, #-8]
   19b20:	ldr	r3, [fp, #-8]
   19b24:	cmp	r3, #0
   19b28:	bne	19b34 <flatcc_builder_get_emit_context@@Base+0x2a0>
   19b2c:	mvn	r3, #0
   19b30:	b	19c7c <flatcc_builder_get_emit_context@@Base+0x3e8>
   19b34:	ldr	r3, [fp, #-16]
   19b38:	ldr	r3, [r3, #28]
   19b3c:	add	r2, r3, #2944	; 0xb80
   19b40:	ldr	r3, [fp, #-16]
   19b44:	str	r2, [r3, #28]
   19b48:	ldr	r3, [fp, #-16]
   19b4c:	ldr	r3, [r3, #4]
   19b50:	cmp	r3, #0
   19b54:	beq	19ba8 <flatcc_builder_get_emit_context@@Base+0x314>
   19b58:	ldr	r3, [fp, #-16]
   19b5c:	ldr	r2, [r3, #4]
   19b60:	ldr	r3, [fp, #-8]
   19b64:	str	r2, [r3, #2948]	; 0xb84
   19b68:	ldr	r3, [fp, #-16]
   19b6c:	ldr	r2, [r3]
   19b70:	ldr	r3, [fp, #-8]
   19b74:	str	r2, [r3, #2944]	; 0xb80
   19b78:	ldr	r3, [fp, #-16]
   19b7c:	ldr	r3, [r3]
   19b80:	ldr	r2, [fp, #-8]
   19b84:	str	r2, [r3, #2948]	; 0xb84
   19b88:	ldr	r3, [fp, #-16]
   19b8c:	ldr	r3, [r3, #4]
   19b90:	ldr	r2, [fp, #-8]
   19b94:	str	r2, [r3, #2944]	; 0xb80
   19b98:	ldr	r3, [fp, #-16]
   19b9c:	ldr	r2, [fp, #-8]
   19ba0:	str	r2, [r3, #4]
   19ba4:	b	19c38 <flatcc_builder_get_emit_context@@Base+0x3a4>
   19ba8:	ldr	r3, [fp, #-16]
   19bac:	ldr	r2, [fp, #-8]
   19bb0:	str	r2, [r3]
   19bb4:	ldr	r3, [fp, #-16]
   19bb8:	ldr	r2, [fp, #-8]
   19bbc:	str	r2, [r3, #4]
   19bc0:	ldr	r3, [fp, #-8]
   19bc4:	ldr	r2, [fp, #-8]
   19bc8:	str	r2, [r3, #2944]	; 0xb80
   19bcc:	ldr	r3, [fp, #-8]
   19bd0:	ldr	r2, [fp, #-8]
   19bd4:	str	r2, [r3, #2948]	; 0xb84
   19bd8:	ldr	r3, [fp, #-16]
   19bdc:	ldr	r3, [r3]
   19be0:	add	r2, r3, #1472	; 0x5c0
   19be4:	ldr	r3, [fp, #-16]
   19be8:	str	r2, [r3, #8]
   19bec:	ldr	r3, [fp, #-16]
   19bf0:	ldr	r2, [r3, #8]
   19bf4:	ldr	r3, [fp, #-16]
   19bf8:	str	r2, [r3, #16]
   19bfc:	ldr	r3, [fp, #-16]
   19c00:	mov	r2, #1472	; 0x5c0
   19c04:	str	r2, [r3, #12]
   19c08:	ldr	r3, [fp, #-16]
   19c0c:	ldr	r3, [r3, #12]
   19c10:	rsb	r2, r3, #2944	; 0xb80
   19c14:	ldr	r3, [fp, #-16]
   19c18:	str	r2, [r3, #20]
   19c1c:	ldr	r3, [fp, #-16]
   19c20:	ldr	r3, [r3, #12]
   19c24:	rsb	r2, r3, #0
   19c28:	ldr	r3, [fp, #-8]
   19c2c:	str	r2, [r3, #2952]	; 0xb88
   19c30:	mov	r3, #0
   19c34:	b	19c7c <flatcc_builder_get_emit_context@@Base+0x3e8>
   19c38:	ldr	r3, [fp, #-16]
   19c3c:	ldr	r3, [r3, #4]
   19c40:	mov	r2, r3
   19c44:	ldr	r3, [fp, #-16]
   19c48:	str	r2, [r3, #16]
   19c4c:	ldr	r3, [fp, #-16]
   19c50:	mov	r2, #2944	; 0xb80
   19c54:	str	r2, [r3, #20]
   19c58:	ldr	r3, [fp, #-16]
   19c5c:	ldr	r3, [r3, #4]
   19c60:	ldr	r2, [fp, #-16]
   19c64:	ldr	r2, [r2, #4]
   19c68:	ldr	r2, [r2, #2948]	; 0xb84
   19c6c:	ldr	r2, [r2, #2952]	; 0xb88
   19c70:	add	r2, r2, #2944	; 0xb80
   19c74:	str	r2, [r3, #2952]	; 0xb88
   19c78:	mov	r3, #0
   19c7c:	mov	r0, r3
   19c80:	sub	sp, fp, #4
   19c84:	pop	{fp, pc}
   19c88:	andeq	r0, r0, ip, lsl #23
   19c8c:	push	{fp, lr}
   19c90:	add	fp, sp, #4
   19c94:	sub	sp, sp, #24
   19c98:	str	r0, [fp, #-16]
   19c9c:	str	r1, [fp, #-20]	; 0xffffffec
   19ca0:	str	r2, [fp, #-24]	; 0xffffffe8
   19ca4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19cac:	add	r3, r2, r3
   19cb0:	str	r3, [fp, #-20]	; 0xffffffec
   19cb4:	b	19d78 <flatcc_builder_get_emit_context@@Base+0x4e4>
   19cb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19cbc:	str	r3, [fp, #-8]
   19cc0:	ldr	r3, [fp, #-16]
   19cc4:	ldr	r2, [r3, #12]
   19cc8:	ldr	r3, [fp, #-8]
   19ccc:	cmp	r2, r3
   19cd0:	bcs	19d08 <flatcc_builder_get_emit_context@@Base+0x474>
   19cd4:	ldr	r3, [fp, #-16]
   19cd8:	ldr	r3, [r3, #12]
   19cdc:	str	r3, [fp, #-8]
   19ce0:	ldr	r3, [fp, #-8]
   19ce4:	cmp	r3, #0
   19ce8:	bne	19d08 <flatcc_builder_get_emit_context@@Base+0x474>
   19cec:	ldr	r0, [fp, #-16]
   19cf0:	bl	198bc <flatcc_builder_get_emit_context@@Base+0x28>
   19cf4:	mov	r3, r0
   19cf8:	cmp	r3, #0
   19cfc:	beq	19d78 <flatcc_builder_get_emit_context@@Base+0x4e4>
   19d00:	mvn	r3, #0
   19d04:	b	19d88 <flatcc_builder_get_emit_context@@Base+0x4f4>
   19d08:	ldr	r3, [fp, #-16]
   19d0c:	ldr	r2, [r3, #8]
   19d10:	ldr	r3, [fp, #-8]
   19d14:	rsb	r3, r3, #0
   19d18:	add	r2, r2, r3
   19d1c:	ldr	r3, [fp, #-16]
   19d20:	str	r2, [r3, #8]
   19d24:	ldr	r3, [fp, #-16]
   19d28:	ldr	r2, [r3, #12]
   19d2c:	ldr	r3, [fp, #-8]
   19d30:	sub	r2, r2, r3
   19d34:	ldr	r3, [fp, #-16]
   19d38:	str	r2, [r3, #12]
   19d3c:	ldr	r3, [fp, #-8]
   19d40:	rsb	r3, r3, #0
   19d44:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d48:	add	r3, r2, r3
   19d4c:	str	r3, [fp, #-20]	; 0xffffffec
   19d50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19d54:	ldr	r3, [fp, #-8]
   19d58:	sub	r3, r2, r3
   19d5c:	str	r3, [fp, #-24]	; 0xffffffe8
   19d60:	ldr	r3, [fp, #-16]
   19d64:	ldr	r3, [r3, #8]
   19d68:	ldr	r2, [fp, #-8]
   19d6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19d70:	mov	r0, r3
   19d74:	bl	11ff4 <memcpy@plt>
   19d78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19d7c:	cmp	r3, #0
   19d80:	bne	19cb8 <flatcc_builder_get_emit_context@@Base+0x424>
   19d84:	mov	r3, #0
   19d88:	mov	r0, r3
   19d8c:	sub	sp, fp, #4
   19d90:	pop	{fp, pc}
   19d94:	push	{fp, lr}
   19d98:	add	fp, sp, #4
   19d9c:	sub	sp, sp, #24
   19da0:	str	r0, [fp, #-16]
   19da4:	str	r1, [fp, #-20]	; 0xffffffec
   19da8:	str	r2, [fp, #-24]	; 0xffffffe8
   19dac:	b	19e68 <flatcc_builder_get_emit_context@@Base+0x5d4>
   19db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19db4:	str	r3, [fp, #-8]
   19db8:	ldr	r3, [fp, #-16]
   19dbc:	ldr	r2, [r3, #20]
   19dc0:	ldr	r3, [fp, #-8]
   19dc4:	cmp	r2, r3
   19dc8:	bcs	19e00 <flatcc_builder_get_emit_context@@Base+0x56c>
   19dcc:	ldr	r3, [fp, #-16]
   19dd0:	ldr	r3, [r3, #20]
   19dd4:	str	r3, [fp, #-8]
   19dd8:	ldr	r3, [fp, #-8]
   19ddc:	cmp	r3, #0
   19de0:	bne	19e00 <flatcc_builder_get_emit_context@@Base+0x56c>
   19de4:	ldr	r0, [fp, #-16]
   19de8:	bl	19ab4 <flatcc_builder_get_emit_context@@Base+0x220>
   19dec:	mov	r3, r0
   19df0:	cmp	r3, #0
   19df4:	beq	19e68 <flatcc_builder_get_emit_context@@Base+0x5d4>
   19df8:	mvn	r3, #0
   19dfc:	b	19e78 <flatcc_builder_get_emit_context@@Base+0x5e4>
   19e00:	ldr	r3, [fp, #-16]
   19e04:	ldr	r3, [r3, #16]
   19e08:	ldr	r2, [fp, #-8]
   19e0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19e10:	mov	r0, r3
   19e14:	bl	11ff4 <memcpy@plt>
   19e18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19e1c:	ldr	r3, [fp, #-8]
   19e20:	sub	r3, r2, r3
   19e24:	str	r3, [fp, #-24]	; 0xffffffe8
   19e28:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e2c:	ldr	r3, [fp, #-8]
   19e30:	add	r3, r2, r3
   19e34:	str	r3, [fp, #-20]	; 0xffffffec
   19e38:	ldr	r3, [fp, #-16]
   19e3c:	ldr	r2, [r3, #16]
   19e40:	ldr	r3, [fp, #-8]
   19e44:	add	r2, r2, r3
   19e48:	ldr	r3, [fp, #-16]
   19e4c:	str	r2, [r3, #16]
   19e50:	ldr	r3, [fp, #-16]
   19e54:	ldr	r2, [r3, #20]
   19e58:	ldr	r3, [fp, #-8]
   19e5c:	sub	r2, r2, r3
   19e60:	ldr	r3, [fp, #-16]
   19e64:	str	r2, [r3, #20]
   19e68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e6c:	cmp	r3, #0
   19e70:	bne	19db0 <flatcc_builder_get_emit_context@@Base+0x51c>
   19e74:	mov	r3, #0
   19e78:	mov	r0, r3
   19e7c:	sub	sp, fp, #4
   19e80:	pop	{fp, pc}

00019e84 <flatcc_emitter_recycle_page@@Base>:
   19e84:	push	{fp}		; (str fp, [sp, #-4]!)
   19e88:	add	fp, sp, #0
   19e8c:	sub	sp, sp, #12
   19e90:	str	r0, [fp, #-8]
   19e94:	str	r1, [fp, #-12]
   19e98:	ldr	r3, [fp, #-8]
   19e9c:	ldr	r2, [r3]
   19ea0:	ldr	r3, [fp, #-12]
   19ea4:	cmp	r2, r3
   19ea8:	beq	19ec0 <flatcc_emitter_recycle_page@@Base+0x3c>
   19eac:	ldr	r3, [fp, #-8]
   19eb0:	ldr	r2, [r3, #4]
   19eb4:	ldr	r3, [fp, #-12]
   19eb8:	cmp	r2, r3
   19ebc:	bne	19ec8 <flatcc_emitter_recycle_page@@Base+0x44>
   19ec0:	mvn	r3, #0
   19ec4:	b	19f38 <flatcc_emitter_recycle_page@@Base+0xb4>
   19ec8:	ldr	r3, [fp, #-12]
   19ecc:	ldr	r3, [r3, #2944]	; 0xb80
   19ed0:	ldr	r2, [fp, #-12]
   19ed4:	ldr	r2, [r2, #2948]	; 0xb84
   19ed8:	str	r2, [r3, #2948]	; 0xb84
   19edc:	ldr	r3, [fp, #-12]
   19ee0:	ldr	r3, [r3, #2948]	; 0xb84
   19ee4:	ldr	r2, [fp, #-12]
   19ee8:	ldr	r2, [r2, #2944]	; 0xb80
   19eec:	str	r2, [r3, #2944]	; 0xb80
   19ef0:	ldr	r3, [fp, #-8]
   19ef4:	ldr	r3, [r3]
   19ef8:	ldr	r2, [r3, #2948]	; 0xb84
   19efc:	ldr	r3, [fp, #-12]
   19f00:	str	r2, [r3, #2948]	; 0xb84
   19f04:	ldr	r3, [fp, #-8]
   19f08:	ldr	r2, [r3]
   19f0c:	ldr	r3, [fp, #-12]
   19f10:	str	r2, [r3, #2944]	; 0xb80
   19f14:	ldr	r3, [fp, #-12]
   19f18:	ldr	r3, [r3, #2948]	; 0xb84
   19f1c:	ldr	r2, [fp, #-12]
   19f20:	str	r2, [r3, #2944]	; 0xb80
   19f24:	ldr	r3, [fp, #-12]
   19f28:	ldr	r3, [r3, #2944]	; 0xb80
   19f2c:	ldr	r2, [fp, #-12]
   19f30:	str	r2, [r3, #2948]	; 0xb84
   19f34:	mov	r3, #0
   19f38:	mov	r0, r3
   19f3c:	add	sp, fp, #0
   19f40:	pop	{fp}		; (ldr fp, [sp], #4)
   19f44:	bx	lr

00019f48 <flatcc_emitter_reset@@Base>:
   19f48:	push	{fp, lr}
   19f4c:	add	fp, sp, #4
   19f50:	sub	sp, sp, #16
   19f54:	str	r0, [fp, #-16]
   19f58:	ldr	r3, [fp, #-16]
   19f5c:	ldr	r3, [r3]
   19f60:	str	r3, [fp, #-8]
   19f64:	ldr	r3, [fp, #-16]
   19f68:	ldr	r3, [r3]
   19f6c:	cmp	r3, #0
   19f70:	beq	1a0c8 <flatcc_emitter_reset@@Base+0x180>
   19f74:	ldr	r3, [fp, #-16]
   19f78:	ldr	r2, [r3]
   19f7c:	ldr	r3, [fp, #-16]
   19f80:	str	r2, [r3, #4]
   19f84:	ldr	r3, [fp, #-16]
   19f88:	ldr	r3, [r3]
   19f8c:	add	r2, r3, #1472	; 0x5c0
   19f90:	ldr	r3, [fp, #-16]
   19f94:	str	r2, [r3, #8]
   19f98:	ldr	r3, [fp, #-16]
   19f9c:	ldr	r2, [r3, #8]
   19fa0:	ldr	r3, [fp, #-16]
   19fa4:	str	r2, [r3, #16]
   19fa8:	ldr	r3, [fp, #-16]
   19fac:	mov	r2, #1472	; 0x5c0
   19fb0:	str	r2, [r3, #12]
   19fb4:	ldr	r3, [fp, #-16]
   19fb8:	mov	r2, #1472	; 0x5c0
   19fbc:	str	r2, [r3, #20]
   19fc0:	ldr	r3, [fp, #-16]
   19fc4:	ldr	r3, [r3]
   19fc8:	ldr	r2, [fp, #-16]
   19fcc:	ldr	r2, [r2, #12]
   19fd0:	rsb	r2, r2, #0
   19fd4:	str	r2, [r3, #2952]	; 0xb88
   19fd8:	ldr	r3, [fp, #-16]
   19fdc:	ldr	r3, [r3, #32]
   19fe0:	cmp	r3, #0
   19fe4:	bne	19ff8 <flatcc_emitter_reset@@Base+0xb0>
   19fe8:	ldr	r3, [fp, #-16]
   19fec:	ldr	r2, [r3, #24]
   19ff0:	ldr	r3, [fp, #-16]
   19ff4:	str	r2, [r3, #32]
   19ff8:	ldr	r3, [fp, #-16]
   19ffc:	ldr	r2, [r3, #32]
   1a000:	mov	r3, r2
   1a004:	lsl	r3, r3, #1
   1a008:	add	r3, r3, r2
   1a00c:	lsr	r2, r3, #2
   1a010:	ldr	r3, [fp, #-16]
   1a014:	ldr	r3, [r3, #24]
   1a018:	lsr	r3, r3, #2
   1a01c:	add	r2, r2, r3
   1a020:	ldr	r3, [fp, #-16]
   1a024:	str	r2, [r3, #32]
   1a028:	ldr	r3, [fp, #-16]
   1a02c:	mov	r2, #0
   1a030:	str	r2, [r3, #24]
   1a034:	b	1a08c <flatcc_emitter_reset@@Base+0x144>
   1a038:	ldr	r3, [fp, #-16]
   1a03c:	ldr	r3, [r3, #4]
   1a040:	ldr	r3, [r3, #2944]	; 0xb80
   1a044:	str	r3, [fp, #-8]
   1a048:	ldr	r3, [fp, #-16]
   1a04c:	ldr	r3, [r3, #4]
   1a050:	ldr	r2, [fp, #-8]
   1a054:	ldr	r2, [r2, #2944]	; 0xb80
   1a058:	str	r2, [r3, #2944]	; 0xb80
   1a05c:	ldr	r3, [fp, #-8]
   1a060:	ldr	r3, [r3, #2944]	; 0xb80
   1a064:	ldr	r2, [fp, #-16]
   1a068:	ldr	r2, [r2, #4]
   1a06c:	str	r2, [r3, #2948]	; 0xb84
   1a070:	ldr	r0, [fp, #-8]
   1a074:	bl	11fe8 <free@plt>
   1a078:	ldr	r3, [fp, #-16]
   1a07c:	ldr	r3, [r3, #28]
   1a080:	sub	r2, r3, #2944	; 0xb80
   1a084:	ldr	r3, [fp, #-16]
   1a088:	str	r2, [r3, #28]
   1a08c:	ldr	r3, [fp, #-16]
   1a090:	ldr	r3, [r3, #32]
   1a094:	lsl	r2, r3, #1
   1a098:	ldr	r3, [fp, #-16]
   1a09c:	ldr	r3, [r3, #28]
   1a0a0:	cmp	r2, r3
   1a0a4:	bcs	1a0cc <flatcc_emitter_reset@@Base+0x184>
   1a0a8:	ldr	r3, [fp, #-16]
   1a0ac:	ldr	r3, [r3, #4]
   1a0b0:	ldr	r2, [r3, #2944]	; 0xb80
   1a0b4:	ldr	r3, [fp, #-16]
   1a0b8:	ldr	r3, [r3]
   1a0bc:	cmp	r2, r3
   1a0c0:	bne	1a038 <flatcc_emitter_reset@@Base+0xf0>
   1a0c4:	b	1a0cc <flatcc_emitter_reset@@Base+0x184>
   1a0c8:	nop			; (mov r0, r0)
   1a0cc:	sub	sp, fp, #4
   1a0d0:	pop	{fp, pc}

0001a0d4 <flatcc_emitter_clear@@Base>:
   1a0d4:	push	{fp, lr}
   1a0d8:	add	fp, sp, #4
   1a0dc:	sub	sp, sp, #16
   1a0e0:	str	r0, [fp, #-16]
   1a0e4:	ldr	r3, [fp, #-16]
   1a0e8:	ldr	r3, [r3]
   1a0ec:	str	r3, [fp, #-8]
   1a0f0:	ldr	r3, [fp, #-8]
   1a0f4:	cmp	r3, #0
   1a0f8:	beq	1a158 <flatcc_emitter_clear@@Base+0x84>
   1a0fc:	ldr	r3, [fp, #-8]
   1a100:	ldr	r3, [r3, #2948]	; 0xb84
   1a104:	mov	r2, #0
   1a108:	str	r2, [r3, #2944]	; 0xb80
   1a10c:	b	1a12c <flatcc_emitter_clear@@Base+0x58>
   1a110:	ldr	r3, [fp, #-8]
   1a114:	ldr	r3, [r3, #2944]	; 0xb80
   1a118:	str	r3, [fp, #-8]
   1a11c:	ldr	r3, [fp, #-8]
   1a120:	ldr	r3, [r3, #2948]	; 0xb84
   1a124:	mov	r0, r3
   1a128:	bl	11fe8 <free@plt>
   1a12c:	ldr	r3, [fp, #-8]
   1a130:	ldr	r3, [r3, #2944]	; 0xb80
   1a134:	cmp	r3, #0
   1a138:	bne	1a110 <flatcc_emitter_clear@@Base+0x3c>
   1a13c:	ldr	r0, [fp, #-8]
   1a140:	bl	11fe8 <free@plt>
   1a144:	mov	r2, #36	; 0x24
   1a148:	mov	r1, #0
   1a14c:	ldr	r0, [fp, #-16]
   1a150:	bl	12078 <memset@plt>
   1a154:	b	1a15c <flatcc_emitter_clear@@Base+0x88>
   1a158:	nop			; (mov r0, r0)
   1a15c:	sub	sp, fp, #4
   1a160:	pop	{fp, pc}

0001a164 <flatcc_emitter@@Base>:
   1a164:	push	{fp, lr}
   1a168:	add	fp, sp, #4
   1a16c:	sub	sp, sp, #24
   1a170:	str	r0, [fp, #-16]
   1a174:	str	r1, [fp, #-20]	; 0xffffffec
   1a178:	str	r2, [fp, #-24]	; 0xffffffe8
   1a17c:	str	r3, [fp, #-28]	; 0xffffffe4
   1a180:	ldr	r3, [fp, #-16]
   1a184:	str	r3, [fp, #-12]
   1a188:	ldr	r3, [fp, #-12]
   1a18c:	ldr	r2, [r3, #24]
   1a190:	ldr	r3, [fp, #4]
   1a194:	add	r2, r2, r3
   1a198:	ldr	r3, [fp, #-12]
   1a19c:	str	r2, [r3, #24]
   1a1a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1a4:	cmp	r3, #0
   1a1a8:	bge	1a270 <flatcc_emitter@@Base+0x10c>
   1a1ac:	ldr	r3, [fp, #-12]
   1a1b0:	ldr	r2, [r3, #12]
   1a1b4:	ldr	r3, [fp, #4]
   1a1b8:	cmp	r2, r3
   1a1bc:	bcc	1a204 <flatcc_emitter@@Base+0xa0>
   1a1c0:	ldr	r3, [fp, #-12]
   1a1c4:	ldr	r2, [r3, #8]
   1a1c8:	ldr	r3, [fp, #4]
   1a1cc:	rsb	r3, r3, #0
   1a1d0:	add	r2, r2, r3
   1a1d4:	ldr	r3, [fp, #-12]
   1a1d8:	str	r2, [r3, #8]
   1a1dc:	ldr	r3, [fp, #-12]
   1a1e0:	ldr	r2, [r3, #12]
   1a1e4:	ldr	r3, [fp, #4]
   1a1e8:	sub	r2, r2, r3
   1a1ec:	ldr	r3, [fp, #-12]
   1a1f0:	str	r2, [r3, #12]
   1a1f4:	ldr	r3, [fp, #-12]
   1a1f8:	ldr	r3, [r3, #8]
   1a1fc:	str	r3, [fp, #-8]
   1a200:	b	1a31c <flatcc_emitter@@Base+0x1b8>
   1a204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a208:	lsl	r3, r3, #3
   1a20c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a210:	add	r3, r2, r3
   1a214:	str	r3, [fp, #-20]	; 0xffffffec
   1a218:	b	1a258 <flatcc_emitter@@Base+0xf4>
   1a21c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a220:	sub	r3, r3, #8
   1a224:	str	r3, [fp, #-20]	; 0xffffffec
   1a228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a22c:	ldr	r1, [r3]
   1a230:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a234:	ldr	r3, [r3, #4]
   1a238:	mov	r2, r3
   1a23c:	ldr	r0, [fp, #-12]
   1a240:	bl	19c8c <flatcc_builder_get_emit_context@@Base+0x3f8>
   1a244:	mov	r3, r0
   1a248:	cmp	r3, #0
   1a24c:	beq	1a258 <flatcc_emitter@@Base+0xf4>
   1a250:	mvn	r3, #0
   1a254:	b	1a374 <flatcc_emitter@@Base+0x210>
   1a258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a25c:	sub	r2, r3, #1
   1a260:	str	r2, [fp, #-24]	; 0xffffffe8
   1a264:	cmp	r3, #0
   1a268:	bne	1a21c <flatcc_emitter@@Base+0xb8>
   1a26c:	b	1a314 <flatcc_emitter@@Base+0x1b0>
   1a270:	ldr	r3, [fp, #-12]
   1a274:	ldr	r2, [r3, #20]
   1a278:	ldr	r3, [fp, #4]
   1a27c:	cmp	r2, r3
   1a280:	bcc	1a300 <flatcc_emitter@@Base+0x19c>
   1a284:	ldr	r3, [fp, #-12]
   1a288:	ldr	r3, [r3, #16]
   1a28c:	str	r3, [fp, #-8]
   1a290:	ldr	r3, [fp, #-12]
   1a294:	ldr	r2, [r3, #16]
   1a298:	ldr	r3, [fp, #4]
   1a29c:	add	r2, r2, r3
   1a2a0:	ldr	r3, [fp, #-12]
   1a2a4:	str	r2, [r3, #16]
   1a2a8:	ldr	r3, [fp, #-12]
   1a2ac:	ldr	r2, [r3, #20]
   1a2b0:	ldr	r3, [fp, #4]
   1a2b4:	sub	r2, r2, r3
   1a2b8:	ldr	r3, [fp, #-12]
   1a2bc:	str	r2, [r3, #20]
   1a2c0:	b	1a31c <flatcc_emitter@@Base+0x1b8>
   1a2c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2c8:	ldr	r1, [r3]
   1a2cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2d0:	ldr	r3, [r3, #4]
   1a2d4:	mov	r2, r3
   1a2d8:	ldr	r0, [fp, #-12]
   1a2dc:	bl	19d94 <flatcc_builder_get_emit_context@@Base+0x500>
   1a2e0:	mov	r3, r0
   1a2e4:	cmp	r3, #0
   1a2e8:	beq	1a2f4 <flatcc_emitter@@Base+0x190>
   1a2ec:	mvn	r3, #0
   1a2f0:	b	1a374 <flatcc_emitter@@Base+0x210>
   1a2f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2f8:	add	r3, r3, #8
   1a2fc:	str	r3, [fp, #-20]	; 0xffffffec
   1a300:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a304:	sub	r2, r3, #1
   1a308:	str	r2, [fp, #-24]	; 0xffffffe8
   1a30c:	cmp	r3, #0
   1a310:	bne	1a2c4 <flatcc_emitter@@Base+0x160>
   1a314:	mov	r3, #0
   1a318:	b	1a374 <flatcc_emitter@@Base+0x210>
   1a31c:	b	1a35c <flatcc_emitter@@Base+0x1f8>
   1a320:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a324:	ldr	r1, [r3]
   1a328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a32c:	ldr	r3, [r3, #4]
   1a330:	mov	r2, r3
   1a334:	ldr	r0, [fp, #-8]
   1a338:	bl	11ff4 <memcpy@plt>
   1a33c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a340:	ldr	r3, [r3, #4]
   1a344:	ldr	r2, [fp, #-8]
   1a348:	add	r3, r2, r3
   1a34c:	str	r3, [fp, #-8]
   1a350:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a354:	add	r3, r3, #8
   1a358:	str	r3, [fp, #-20]	; 0xffffffec
   1a35c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a360:	sub	r2, r3, #1
   1a364:	str	r2, [fp, #-24]	; 0xffffffe8
   1a368:	cmp	r3, #0
   1a36c:	bne	1a320 <flatcc_emitter@@Base+0x1bc>
   1a370:	mov	r3, #0
   1a374:	mov	r0, r3
   1a378:	sub	sp, fp, #4
   1a37c:	pop	{fp, pc}

0001a380 <flatcc_emitter_copy_buffer@@Base>:
   1a380:	push	{fp, lr}
   1a384:	add	fp, sp, #4
   1a388:	sub	sp, sp, #24
   1a38c:	str	r0, [fp, #-16]
   1a390:	str	r1, [fp, #-20]	; 0xffffffec
   1a394:	str	r2, [fp, #-24]	; 0xffffffe8
   1a398:	ldr	r3, [fp, #-16]
   1a39c:	ldr	r2, [r3, #24]
   1a3a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a3a4:	cmp	r2, r3
   1a3a8:	bls	1a3b4 <flatcc_emitter_copy_buffer@@Base+0x34>
   1a3ac:	mov	r3, #0
   1a3b0:	b	1a4b4 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a3b4:	ldr	r3, [fp, #-16]
   1a3b8:	ldr	r3, [r3]
   1a3bc:	cmp	r3, #0
   1a3c0:	bne	1a3cc <flatcc_emitter_copy_buffer@@Base+0x4c>
   1a3c4:	mov	r3, #0
   1a3c8:	b	1a4b4 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a3cc:	ldr	r3, [fp, #-16]
   1a3d0:	ldr	r2, [r3]
   1a3d4:	ldr	r3, [fp, #-16]
   1a3d8:	ldr	r3, [r3, #4]
   1a3dc:	cmp	r2, r3
   1a3e0:	bne	1a408 <flatcc_emitter_copy_buffer@@Base+0x88>
   1a3e4:	ldr	r3, [fp, #-16]
   1a3e8:	ldr	r1, [r3, #8]
   1a3ec:	ldr	r3, [fp, #-16]
   1a3f0:	ldr	r3, [r3, #24]
   1a3f4:	mov	r2, r3
   1a3f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a3fc:	bl	11ff4 <memcpy@plt>
   1a400:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a404:	b	1a4b4 <flatcc_emitter_copy_buffer@@Base+0x134>
   1a408:	ldr	r3, [fp, #-16]
   1a40c:	ldr	r3, [r3, #12]
   1a410:	rsb	r3, r3, #2944	; 0xb80
   1a414:	str	r3, [fp, #-12]
   1a418:	ldr	r3, [fp, #-16]
   1a41c:	ldr	r3, [r3, #8]
   1a420:	ldr	r2, [fp, #-12]
   1a424:	mov	r1, r3
   1a428:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a42c:	bl	11ff4 <memcpy@plt>
   1a430:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a434:	ldr	r3, [fp, #-12]
   1a438:	add	r3, r2, r3
   1a43c:	str	r3, [fp, #-20]	; 0xffffffec
   1a440:	ldr	r3, [fp, #-16]
   1a444:	ldr	r3, [r3]
   1a448:	ldr	r3, [r3, #2944]	; 0xb80
   1a44c:	str	r3, [fp, #-8]
   1a450:	b	1a480 <flatcc_emitter_copy_buffer@@Base+0x100>
   1a454:	ldr	r3, [fp, #-8]
   1a458:	mov	r2, #2944	; 0xb80
   1a45c:	mov	r1, r3
   1a460:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a464:	bl	11ff4 <memcpy@plt>
   1a468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a46c:	add	r3, r3, #2944	; 0xb80
   1a470:	str	r3, [fp, #-20]	; 0xffffffec
   1a474:	ldr	r3, [fp, #-8]
   1a478:	ldr	r3, [r3, #2944]	; 0xb80
   1a47c:	str	r3, [fp, #-8]
   1a480:	ldr	r3, [fp, #-16]
   1a484:	ldr	r2, [r3, #4]
   1a488:	ldr	r3, [fp, #-8]
   1a48c:	cmp	r2, r3
   1a490:	bne	1a454 <flatcc_emitter_copy_buffer@@Base+0xd4>
   1a494:	ldr	r1, [fp, #-8]
   1a498:	ldr	r3, [fp, #-16]
   1a49c:	ldr	r3, [r3, #20]
   1a4a0:	rsb	r3, r3, #2944	; 0xb80
   1a4a4:	mov	r2, r3
   1a4a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a4ac:	bl	11ff4 <memcpy@plt>
   1a4b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a4b4:	mov	r0, r3
   1a4b8:	sub	sp, fp, #4
   1a4bc:	pop	{fp, pc}

0001a4c0 <__libc_csu_init@@Base>:
   1a4c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a4c4:	mov	r7, r0
   1a4c8:	ldr	r6, [pc, #72]	; 1a518 <__libc_csu_init@@Base+0x58>
   1a4cc:	ldr	r5, [pc, #72]	; 1a51c <__libc_csu_init@@Base+0x5c>
   1a4d0:	add	r6, pc, r6
   1a4d4:	add	r5, pc, r5
   1a4d8:	sub	r6, r6, r5
   1a4dc:	mov	r8, r1
   1a4e0:	mov	r9, r2
   1a4e4:	bl	11fbc <printf@plt-0x20>
   1a4e8:	asrs	r6, r6, #2
   1a4ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4f0:	mov	r4, #0
   1a4f4:	add	r4, r4, #1
   1a4f8:	ldr	r3, [r5], #4
   1a4fc:	mov	r2, r9
   1a500:	mov	r1, r8
   1a504:	mov	r0, r7
   1a508:	blx	r3
   1a50c:	cmp	r6, r4
   1a510:	bne	1a4f4 <__libc_csu_init@@Base+0x34>
   1a514:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a518:	andeq	r1, r1, r8, lsr sl
   1a51c:	andeq	r1, r1, r0, lsr sl

0001a520 <__libc_csu_fini@@Base>:
   1a520:	bx	lr

Disassembly of section .fini:

0001a524 <.fini>:
   1a524:	push	{r3, lr}
   1a528:	pop	{r3, pc}
