
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010a94 <.init>:
   10a94:	push	{r3, lr}
   10a98:	bl	10c8c <__assert_fail@plt+0x4c>
   10a9c:	pop	{r3, pc}

Disassembly of section .plt:

00010aa0 <calloc@plt-0x14>:
   10aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10aa4:	ldr	lr, [pc, #4]	; 10ab0 <calloc@plt-0x4>
   10aa8:	add	lr, pc, lr
   10aac:	ldr	pc, [lr, #8]!
   10ab0:	andeq	r8, r1, r0, asr r5

00010ab4 <calloc@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1360]!	; 0x550

00010ac0 <strcmp@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1352]!	; 0x548

00010acc <printf@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1344]!	; 0x540

00010ad8 <fopen@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1336]!	; 0x538

00010ae4 <free@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1328]!	; 0x530

00010af0 <utf8proc_get_property@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1320]!	; 0x528

00010afc <fgets@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1312]!	; 0x520

00010b08 <utf8proc_encode_char@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1304]!	; 0x518

00010b14 <strdup@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1296]!	; 0x510

00010b20 <rewind@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1288]!	; 0x508

00010b2c <utf8proc_tolower@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1280]!	; 0x500

00010b38 <__xstat@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b44 <fread@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b50 <utf8proc_iterate@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b5c <malloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b68 <__libc_start_main@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b74 <__sysv_signal@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b80 <__gmon_start__@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b8c <exit@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b98 <utf8proc_category@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1208]!	; 0x4b8

00010ba4 <strlen@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1200]!	; 0x4b0

00010bb0 <fprintf@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1192]!	; 0x4a8

00010bbc <__isoc99_sscanf@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1184]!	; 0x4a0

00010bc8 <fclose@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #24, 20	; 0x18000
   10bd0:	ldr	pc, [ip, #1176]!	; 0x498

00010bd4 <utf8proc_NFC@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #24, 20	; 0x18000
   10bdc:	ldr	pc, [ip, #1168]!	; 0x490

00010be0 <fputc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #24, 20	; 0x18000
   10be8:	ldr	pc, [ip, #1160]!	; 0x488

00010bec <sprintf@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #24, 20	; 0x18000
   10bf4:	ldr	pc, [ip, #1152]!	; 0x480

00010bf8 <atoi@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #24, 20	; 0x18000
   10c00:	ldr	pc, [ip, #1144]!	; 0x478

00010c04 <utf8proc_errmsg@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #24, 20	; 0x18000
   10c0c:	ldr	pc, [ip, #1136]!	; 0x470

00010c10 <fputs@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #24, 20	; 0x18000
   10c18:	ldr	pc, [ip, #1128]!	; 0x468

00010c1c <strncmp@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #24, 20	; 0x18000
   10c24:	ldr	pc, [ip, #1120]!	; 0x460

00010c28 <abort@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #24, 20	; 0x18000
   10c30:	ldr	pc, [ip, #1112]!	; 0x458

00010c34 <getc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #24, 20	; 0x18000
   10c3c:	ldr	pc, [ip, #1104]!	; 0x450

00010c40 <__assert_fail@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #1096]!	; 0x448

Disassembly of section .text:

00010c50 <error@@Base-0x17a4>:
   10c50:	mov	fp, #0
   10c54:	mov	lr, #0
   10c58:	pop	{r1}		; (ldr r1, [sp], #4)
   10c5c:	mov	r2, sp
   10c60:	push	{r2}		; (str r2, [sp, #-4]!)
   10c64:	push	{r0}		; (str r0, [sp, #-4]!)
   10c68:	ldr	ip, [pc, #16]	; 10c80 <__assert_fail@plt+0x40>
   10c6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c70:	ldr	r0, [pc, #12]	; 10c84 <__assert_fail@plt+0x44>
   10c74:	ldr	r3, [pc, #12]	; 10c88 <__assert_fail@plt+0x48>
   10c78:	bl	10b68 <__libc_start_main@plt>
   10c7c:	bl	10c28 <abort@plt>
   10c80:	muleq	r1, r4, sp
   10c84:	strdeq	r1, [r1], -r0
   10c88:	andeq	r4, r1, r4, lsr sp
   10c8c:	ldr	r3, [pc, #20]	; 10ca8 <__assert_fail@plt+0x68>
   10c90:	ldr	r2, [pc, #20]	; 10cac <__assert_fail@plt+0x6c>
   10c94:	add	r3, pc, r3
   10c98:	ldr	r2, [r3, r2]
   10c9c:	cmp	r2, #0
   10ca0:	bxeq	lr
   10ca4:	b	10b80 <__gmon_start__@plt>
   10ca8:	andeq	r8, r1, r4, ror #6
   10cac:	andeq	r0, r0, r0, ror #1
   10cb0:	ldr	r0, [pc, #24]	; 10cd0 <__assert_fail@plt+0x90>
   10cb4:	ldr	r3, [pc, #24]	; 10cd4 <__assert_fail@plt+0x94>
   10cb8:	cmp	r3, r0
   10cbc:	bxeq	lr
   10cc0:	ldr	r3, [pc, #16]	; 10cd8 <__assert_fail@plt+0x98>
   10cc4:	cmp	r3, #0
   10cc8:	bxeq	lr
   10ccc:	bx	r3
   10cd0:	andeq	r9, r2, r0, asr r1
   10cd4:	andeq	r9, r2, r0, asr r1
   10cd8:	andeq	r0, r0, r0
   10cdc:	ldr	r0, [pc, #36]	; 10d08 <__assert_fail@plt+0xc8>
   10ce0:	ldr	r1, [pc, #36]	; 10d0c <__assert_fail@plt+0xcc>
   10ce4:	sub	r1, r1, r0
   10ce8:	asr	r1, r1, #2
   10cec:	add	r1, r1, r1, lsr #31
   10cf0:	asrs	r1, r1, #1
   10cf4:	bxeq	lr
   10cf8:	ldr	r3, [pc, #16]	; 10d10 <__assert_fail@plt+0xd0>
   10cfc:	cmp	r3, #0
   10d00:	bxeq	lr
   10d04:	bx	r3
   10d08:	andeq	r9, r2, r0, asr r1
   10d0c:	andeq	r9, r2, r0, asr r1
   10d10:	andeq	r0, r0, r0
   10d14:	push	{r4, lr}
   10d18:	ldr	r4, [pc, #24]	; 10d38 <__assert_fail@plt+0xf8>
   10d1c:	ldrb	r3, [r4]
   10d20:	cmp	r3, #0
   10d24:	popne	{r4, pc}
   10d28:	bl	10cb0 <__assert_fail@plt+0x70>
   10d2c:	mov	r3, #1
   10d30:	strb	r3, [r4]
   10d34:	pop	{r4, pc}
   10d38:	andeq	r9, r2, r0, asr r1
   10d3c:	b	10cdc <__assert_fail@plt+0x9c>
   10d40:	push	{fp, lr}
   10d44:	mov	fp, sp
   10d48:	sub	sp, sp, #16
   10d4c:	ldr	r1, [pc, #244]	; 10e48 <__assert_fail@plt+0x208>
   10d50:	ldr	r1, [pc, r1]
   10d54:	ldr	r2, [pc, #240]	; 10e4c <__assert_fail@plt+0x20c>
   10d58:	ldr	r2, [pc, r2]
   10d5c:	ldr	r3, [pc, #236]	; 10e50 <__assert_fail@plt+0x210>
   10d60:	ldr	r3, [pc, r3]
   10d64:	str	r0, [fp, #-4]
   10d68:	ldr	r0, [fp, #-4]
   10d6c:	str	r0, [sp, #4]
   10d70:	mov	r0, r1
   10d74:	ldr	r1, [sp, #4]
   10d78:	blx	r3
   10d7c:	ldr	r0, [pc, #184]	; 10e3c <__assert_fail@plt+0x1fc>
   10d80:	ldr	r0, [pc, r0]
   10d84:	ldr	r1, [pc, #180]	; 10e40 <__assert_fail@plt+0x200>
   10d88:	ldr	r1, [pc, r1]
   10d8c:	ldr	r2, [pc, #176]	; 10e44 <__assert_fail@plt+0x204>
   10d90:	ldr	r2, [pc, r2]
   10d94:	blx	r2
   10d98:	ldr	r0, [pc, #152]	; 10e38 <__assert_fail@plt+0x1f8>
   10d9c:	ldr	r0, [pc, r0]
   10da0:	ldr	r0, [r0]
   10da4:	str	r0, [sp, #8]
   10da8:	ldr	r0, [sp, #8]
   10dac:	movw	r1, #0
   10db0:	cmp	r0, r1
   10db4:	beq	10df8 <__assert_fail@plt+0x1b8>
   10db8:	ldr	r0, [pc, #172]	; 10e6c <__assert_fail@plt+0x22c>
   10dbc:	ldr	r0, [pc, r0]
   10dc0:	ldr	r1, [pc, #168]	; 10e70 <__assert_fail@plt+0x230>
   10dc4:	ldr	r1, [pc, r1]
   10dc8:	ldr	r2, [sp, #8]
   10dcc:	ldr	r2, [r2, #8]
   10dd0:	str	r1, [sp]
   10dd4:	mov	r1, r2
   10dd8:	movw	r2, #1
   10ddc:	movw	r3, #0
   10de0:	ldr	ip, [sp]
   10de4:	blx	ip
   10de8:	ldr	r0, [sp, #8]
   10dec:	ldr	r0, [r0, #4]
   10df0:	str	r0, [sp, #8]
   10df4:	b	10da8 <__assert_fail@plt+0x168>
   10df8:	ldr	r0, [pc, #96]	; 10e60 <__assert_fail@plt+0x220>
   10dfc:	ldr	r0, [pc, r0]
   10e00:	ldr	r1, [pc, #92]	; 10e64 <__assert_fail@plt+0x224>
   10e04:	ldr	r1, [pc, r1]
   10e08:	ldr	r2, [pc, #88]	; 10e68 <__assert_fail@plt+0x228>
   10e0c:	ldr	r2, [pc, r2]
   10e10:	blx	r2
   10e14:	ldr	r0, [pc, #56]	; 10e54 <__assert_fail@plt+0x214>
   10e18:	ldr	r0, [pc, r0]
   10e1c:	ldr	r1, [pc, #52]	; 10e58 <__assert_fail@plt+0x218>
   10e20:	ldr	r1, [pc, r1]
   10e24:	ldr	r2, [pc, #48]	; 10e5c <__assert_fail@plt+0x21c>
   10e28:	ldr	r2, [pc, r2]
   10e2c:	blx	r2
   10e30:	mov	sp, fp
   10e34:	pop	{fp, pc}
   10e38:	andeq	r8, r1, r4, lsr #6
   10e3c:	andeq	r8, r1, r0, asr #6
   10e40:	andeq	r8, r1, r8, lsl #6
   10e44:	andeq	r8, r1, r0, lsl #7
   10e48:	andeq	r8, r1, r0, asr #6
   10e4c:	andeq	r8, r1, r0, ror #6
   10e50:	muleq	r1, r0, r3
   10e54:	andeq	r8, r1, r8, lsr #5
   10e58:	andeq	r8, r1, r4, ror r2
   10e5c:	strdeq	r8, [r1], -ip
   10e60:	muleq	r1, r4, r2
   10e64:	muleq	r1, r8, r2
   10e68:	andeq	r8, r1, r8, lsl r3
   10e6c:	andeq	r8, r1, r8, asr #6
   10e70:	andeq	r8, r1, r0, asr r3
   10e74:	push	{fp, lr}
   10e78:	mov	fp, sp
   10e7c:	sub	sp, sp, #8
   10e80:	ldr	r2, [pc, #36]	; 10eac <__assert_fail@plt+0x26c>
   10e84:	ldr	r2, [pc, r2]
   10e88:	str	r0, [sp, #4]
   10e8c:	str	r1, [sp]
   10e90:	ldr	r0, [sp, #4]
   10e94:	ldr	r0, [r0, #8]
   10e98:	ldr	r1, [sp]
   10e9c:	ldr	r1, [r1, #8]
   10ea0:	blx	r2
   10ea4:	mov	sp, fp
   10ea8:	pop	{fp, pc}
   10eac:	andeq	r8, r1, ip, ror r2
   10eb0:	push	{fp, lr}
   10eb4:	mov	fp, sp
   10eb8:	sub	sp, sp, #16
   10ebc:	str	r0, [sp, #8]
   10ec0:	str	r1, [sp, #4]
   10ec4:	ldr	r0, [sp, #8]
   10ec8:	ldr	r0, [r0, #12]
   10ecc:	ldr	r1, [sp, #4]
   10ed0:	ldr	r1, [r1, #12]
   10ed4:	cmp	r0, r1
   10ed8:	beq	10ef8 <__assert_fail@plt+0x2b8>
   10edc:	ldr	r0, [sp, #4]
   10ee0:	ldr	r0, [r0, #12]
   10ee4:	ldr	r1, [sp, #8]
   10ee8:	ldr	r1, [r1, #12]
   10eec:	sub	r0, r0, r1
   10ef0:	str	r0, [fp, #-4]
   10ef4:	b	10f08 <__assert_fail@plt+0x2c8>
   10ef8:	ldr	r0, [sp, #8]
   10efc:	ldr	r1, [sp, #4]
   10f00:	bl	10e74 <__assert_fail@plt+0x234>
   10f04:	str	r0, [fp, #-4]
   10f08:	ldr	r0, [fp, #-4]
   10f0c:	mov	sp, fp
   10f10:	pop	{fp, pc}
   10f14:	push	{fp, lr}
   10f18:	mov	fp, sp
   10f1c:	sub	sp, sp, #16
   10f20:	ldr	r0, [pc, #180]	; 10fdc <__assert_fail@plt+0x39c>
   10f24:	add	r0, pc, r0
   10f28:	movw	r1, #0
   10f2c:	str	r1, [sp, #8]
   10f30:	bl	10acc <printf@plt>
   10f34:	movw	r1, #0
   10f38:	str	r1, [fp, #-4]
   10f3c:	ldr	r0, [pc, #156]	; 10fe0 <__assert_fail@plt+0x3a0>
   10f40:	ldr	r0, [pc, r0]
   10f44:	ldr	r1, [fp, #-4]
   10f48:	movw	r2, #8052	; 0x1f74
   10f4c:	add	r0, r0, r2
   10f50:	ldr	r0, [r0]
   10f54:	cmp	r1, r0
   10f58:	bge	10fc4 <__assert_fail@plt+0x384>
   10f5c:	ldr	r0, [pc, #132]	; 10fe8 <__assert_fail@plt+0x3a8>
   10f60:	ldr	r0, [pc, r0]
   10f64:	movw	r1, #8048	; 0x1f70
   10f68:	ldr	r1, [r0, r1]!
   10f6c:	ldr	r2, [fp, #-4]
   10f70:	ldr	r1, [r1, r2, lsl #2]
   10f74:	ldr	r2, [r1, #8]
   10f78:	ldr	r1, [r1, #12]
   10f7c:	ldr	r3, [pc, #104]	; 10fec <__assert_fail@plt+0x3ac>
   10f80:	add	r3, pc, r3
   10f84:	str	r0, [sp, #4]
   10f88:	mov	r0, r3
   10f8c:	bl	10acc <printf@plt>
   10f90:	ldr	r1, [sp, #4]
   10f94:	ldr	r1, [r1]
   10f98:	ldr	r2, [fp, #-4]
   10f9c:	add	r1, r1, r2, lsl #2
   10fa0:	ldr	r1, [r1]
   10fa4:	ldr	r1, [r1, #12]
   10fa8:	ldr	r2, [sp, #8]
   10fac:	add	r1, r2, r1
   10fb0:	str	r1, [sp, #8]
   10fb4:	ldr	r0, [fp, #-4]
   10fb8:	add	r0, r0, #1
   10fbc:	str	r0, [fp, #-4]
   10fc0:	b	10f3c <__assert_fail@plt+0x2fc>
   10fc4:	ldr	r0, [pc, #24]	; 10fe4 <__assert_fail@plt+0x3a4>
   10fc8:	add	r0, pc, r0
   10fcc:	ldr	r1, [sp, #8]
   10fd0:	bl	10acc <printf@plt>
   10fd4:	mov	sp, fp
   10fd8:	pop	{fp, pc}
   10fdc:	andeq	r3, r0, r8, lsl #29
   10fe0:	andeq	r8, r1, r4, asr #3
   10fe4:	strdeq	r3, [r0], -r9
   10fe8:	andeq	r8, r1, r4, lsr #3
   10fec:	andeq	r3, r0, r6, lsr lr
   10ff0:	push	{fp, lr}
   10ff4:	mov	fp, sp
   10ff8:	sub	sp, sp, #24
   10ffc:	ldr	r0, [pc, #228]	; 110e8 <__assert_fail@plt+0x4a8>
   11000:	ldr	r0, [pc, r0]
   11004:	ldr	r1, [pc, #224]	; 110ec <__assert_fail@plt+0x4ac>
   11008:	ldr	r1, [pc, r1]
   1100c:	blx	r1
   11010:	ldr	r0, [pc, #196]	; 110dc <__assert_fail@plt+0x49c>
   11014:	ldr	r0, [pc, r0]
   11018:	ldr	r1, [pc, #192]	; 110e0 <__assert_fail@plt+0x4a0>
   1101c:	ldr	r1, [pc, r1]
   11020:	ldr	r2, [pc, #188]	; 110e4 <__assert_fail@plt+0x4a4>
   11024:	ldr	r2, [pc, r2]
   11028:	movw	r3, #8052	; 0x1f74
   1102c:	add	r3, r2, r3
   11030:	ldr	r3, [r3]
   11034:	movw	ip, #8048	; 0x1f70
   11038:	add	r2, r2, ip
   1103c:	ldr	r2, [r2]
   11040:	str	r0, [fp, #-4]
   11044:	mov	r0, r3
   11048:	str	r1, [fp, #-8]
   1104c:	mov	r1, r2
   11050:	ldr	r2, [fp, #-4]
   11054:	ldr	r3, [fp, #-8]
   11058:	blx	r3
   1105c:	bl	10f14 <__assert_fail@plt+0x2d4>
   11060:	ldr	r0, [pc, #112]	; 110d8 <__assert_fail@plt+0x498>
   11064:	add	r0, pc, r0
   11068:	bl	10acc <printf@plt>
   1106c:	ldr	r1, [pc, #88]	; 110cc <__assert_fail@plt+0x48c>
   11070:	ldr	r1, [pc, r1]
   11074:	ldr	r2, [pc, #84]	; 110d0 <__assert_fail@plt+0x490>
   11078:	ldr	r2, [pc, r2]
   1107c:	ldr	r3, [pc, #80]	; 110d4 <__assert_fail@plt+0x494>
   11080:	ldr	r3, [pc, r3]
   11084:	movw	ip, #8052	; 0x1f74
   11088:	add	ip, r3, ip
   1108c:	ldr	ip, [ip]
   11090:	movw	lr, #8048	; 0x1f70
   11094:	add	r3, r3, lr
   11098:	ldr	r3, [r3]
   1109c:	str	r0, [sp, #12]
   110a0:	mov	r0, ip
   110a4:	str	r1, [sp, #8]
   110a8:	mov	r1, r3
   110ac:	ldr	r3, [sp, #8]
   110b0:	str	r2, [sp, #4]
   110b4:	mov	r2, r3
   110b8:	ldr	ip, [sp, #4]
   110bc:	blx	ip
   110c0:	bl	10f14 <__assert_fail@plt+0x2d4>
   110c4:	mov	sp, fp
   110c8:	pop	{fp, pc}
   110cc:	strheq	r8, [r1], -r0
   110d0:	andeq	r8, r1, r4, asr #32
   110d4:	andeq	r8, r1, r4, lsl #1
   110d8:	andeq	r3, r0, fp, ror #26
   110dc:	andeq	r8, r1, r8, lsl #2
   110e0:	andeq	r8, r1, r0, lsr #1
   110e4:	andeq	r8, r1, r0, ror #1
   110e8:	andeq	r8, r1, r4, lsl #2
   110ec:	andeq	r8, r1, r0, asr #1
   110f0:	push	{fp, lr}
   110f4:	mov	fp, sp
   110f8:	sub	sp, sp, #24
   110fc:	ldr	r2, [pc, #156]	; 111a0 <__assert_fail@plt+0x560>
   11100:	add	r2, pc, r2
   11104:	ldr	r3, [pc, #152]	; 111a4 <__assert_fail@plt+0x564>
   11108:	ldr	r3, [pc, r3]
   1110c:	movw	ip, #0
   11110:	str	ip, [fp, #-4]
   11114:	str	r0, [fp, #-8]
   11118:	str	r1, [sp, #12]
   1111c:	ldr	r1, [sp, #12]
   11120:	sub	r0, fp, #8
   11124:	str	r3, [sp, #4]
   11128:	mov	r3, ip
   1112c:	ldr	ip, [sp, #4]
   11130:	blx	ip
   11134:	ldr	r0, [fp, #-8]
   11138:	cmp	r0, #0
   1113c:	bne	11154 <__assert_fail@plt+0x514>
   11140:	ldr	r0, [pc, #100]	; 111ac <__assert_fail@plt+0x56c>
   11144:	add	r0, pc, r0
   11148:	ldr	r1, [pc, #96]	; 111b0 <__assert_fail@plt+0x570>
   1114c:	ldr	r1, [pc, r1]
   11150:	blx	r1
   11154:	movw	r0, #0
   11158:	str	r0, [sp, #8]
   1115c:	ldr	r0, [sp, #8]
   11160:	ldr	r1, [fp, #-8]
   11164:	cmp	r0, r1
   11168:	bge	11190 <__assert_fail@plt+0x550>
   1116c:	ldr	r0, [sp, #12]
   11170:	ldr	r1, [sp, #8]
   11174:	add	r0, r0, r1, lsl #2
   11178:	ldr	r0, [r0]
   1117c:	bl	10d40 <__assert_fail@plt+0x100>
   11180:	ldr	r0, [sp, #8]
   11184:	add	r0, r0, #1
   11188:	str	r0, [sp, #8]
   1118c:	b	1115c <__assert_fail@plt+0x51c>
   11190:	bl	10ff0 <__assert_fail@plt+0x3b0>
   11194:	ldr	r0, [pc, #12]	; 111a8 <__assert_fail@plt+0x568>
   11198:	ldr	r0, [pc, r0]
   1119c:	blx	r0
   111a0:	ldrdeq	r3, [r0], -r2
   111a4:	andeq	r7, r1, r4, asr #31
   111a8:	andeq	r7, r1, ip, asr pc
   111ac:			; <UNDEFINED> instruction: 0x00003cb2
   111b0:	andeq	r7, r1, r8, asr pc
   111b4:	sub	sp, sp, #4
   111b8:	str	r0, [sp]
   111bc:	ldr	r0, [sp]
   111c0:	movw	r1, #0
   111c4:	str	r1, [r0, #4]
   111c8:	ldr	r0, [sp]
   111cc:	str	r1, [r0]
   111d0:	ldr	r0, [sp]
   111d4:	str	r1, [r0, #8]
   111d8:	ldr	r0, [sp]
   111dc:	str	r1, [r0, #12]
   111e0:	add	sp, sp, #4
   111e4:	bx	lr
   111e8:	push	{fp, lr}
   111ec:	mov	fp, sp
   111f0:	sub	sp, sp, #8
   111f4:	str	r0, [sp, #4]
   111f8:	str	r1, [sp]
   111fc:	ldr	r0, [sp, #4]
   11200:	ldr	r2, [sp]
   11204:	ldr	r1, [sp, #4]
   11208:	ldr	r3, [r1]
   1120c:	movw	r1, #0
   11210:	bl	1121c <__assert_fail@plt+0x5dc>
   11214:	mov	sp, fp
   11218:	pop	{fp, pc}
   1121c:	push	{fp, lr}
   11220:	mov	fp, sp
   11224:	sub	sp, sp, #16
   11228:	str	r0, [fp, #-4]
   1122c:	str	r1, [sp, #8]
   11230:	str	r2, [sp, #4]
   11234:	str	r3, [sp]
   11238:	ldr	r0, [sp, #8]
   1123c:	ldr	r1, [sp, #4]
   11240:	str	r0, [r1]
   11244:	ldr	r0, [sp]
   11248:	ldr	r1, [sp, #4]
   1124c:	str	r0, [r1, #4]
   11250:	ldr	r0, [sp, #8]
   11254:	movw	r1, #0
   11258:	cmp	r0, r1
   1125c:	beq	11270 <__assert_fail@plt+0x630>
   11260:	ldr	r0, [sp, #4]
   11264:	ldr	r1, [sp, #8]
   11268:	str	r0, [r1, #4]
   1126c:	b	1127c <__assert_fail@plt+0x63c>
   11270:	ldr	r0, [sp, #4]
   11274:	ldr	r1, [fp, #-4]
   11278:	str	r0, [r1]
   1127c:	ldr	r0, [sp]
   11280:	movw	r1, #0
   11284:	cmp	r0, r1
   11288:	beq	1129c <__assert_fail@plt+0x65c>
   1128c:	ldr	r0, [sp, #4]
   11290:	ldr	r1, [sp]
   11294:	str	r0, [r1]
   11298:	b	112a8 <__assert_fail@plt+0x668>
   1129c:	ldr	r0, [sp, #4]
   112a0:	ldr	r1, [fp, #-4]
   112a4:	str	r0, [r1, #4]
   112a8:	ldr	r0, [fp, #-4]
   112ac:	bl	11430 <__assert_fail@plt+0x7f0>
   112b0:	ldr	r0, [fp, #-4]
   112b4:	ldr	r1, [r0, #12]
   112b8:	add	r1, r1, #1
   112bc:	str	r1, [r0, #12]
   112c0:	mov	sp, fp
   112c4:	pop	{fp, pc}
   112c8:	push	{fp, lr}
   112cc:	mov	fp, sp
   112d0:	sub	sp, sp, #8
   112d4:	str	r0, [sp, #4]
   112d8:	str	r1, [sp]
   112dc:	ldr	r0, [sp, #4]
   112e0:	ldr	r1, [sp, #4]
   112e4:	ldr	r1, [r1, #4]
   112e8:	ldr	r2, [sp]
   112ec:	movw	r3, #0
   112f0:	bl	1121c <__assert_fail@plt+0x5dc>
   112f4:	mov	sp, fp
   112f8:	pop	{fp, pc}
   112fc:	push	{fp, lr}
   11300:	mov	fp, sp
   11304:	sub	sp, sp, #16
   11308:	str	r0, [fp, #-4]
   1130c:	str	r1, [sp, #8]
   11310:	str	r2, [sp, #4]
   11314:	ldr	r0, [fp, #-4]
   11318:	ldr	r1, [sp, #4]
   1131c:	ldr	r1, [r1]
   11320:	ldr	r2, [sp, #8]
   11324:	ldr	r3, [sp, #4]
   11328:	bl	1121c <__assert_fail@plt+0x5dc>
   1132c:	mov	sp, fp
   11330:	pop	{fp, pc}
   11334:	push	{fp, lr}
   11338:	mov	fp, sp
   1133c:	sub	sp, sp, #16
   11340:	str	r0, [fp, #-4]
   11344:	str	r1, [sp, #8]
   11348:	str	r2, [sp, #4]
   1134c:	ldr	r0, [fp, #-4]
   11350:	ldr	r1, [sp, #8]
   11354:	ldr	r2, [sp, #4]
   11358:	ldr	r3, [sp, #8]
   1135c:	ldr	r3, [r3, #4]
   11360:	bl	1121c <__assert_fail@plt+0x5dc>
   11364:	mov	sp, fp
   11368:	pop	{fp, pc}
   1136c:	push	{fp, lr}
   11370:	mov	fp, sp
   11374:	sub	sp, sp, #8
   11378:	str	r0, [sp, #4]
   1137c:	str	r1, [sp]
   11380:	ldr	r0, [sp]
   11384:	ldr	r0, [r0]
   11388:	movw	r1, #0
   1138c:	cmp	r0, r1
   11390:	beq	113ac <__assert_fail@plt+0x76c>
   11394:	ldr	r0, [sp]
   11398:	ldr	r0, [r0, #4]
   1139c:	ldr	r1, [sp]
   113a0:	ldr	r1, [r1]
   113a4:	str	r0, [r1, #4]
   113a8:	b	113bc <__assert_fail@plt+0x77c>
   113ac:	ldr	r0, [sp]
   113b0:	ldr	r0, [r0, #4]
   113b4:	ldr	r1, [sp, #4]
   113b8:	str	r0, [r1]
   113bc:	ldr	r0, [sp]
   113c0:	ldr	r0, [r0, #4]
   113c4:	movw	r1, #0
   113c8:	cmp	r0, r1
   113cc:	beq	113e8 <__assert_fail@plt+0x7a8>
   113d0:	ldr	r0, [sp]
   113d4:	ldr	r0, [r0]
   113d8:	ldr	r1, [sp]
   113dc:	ldr	r1, [r1, #4]
   113e0:	str	r0, [r1]
   113e4:	b	113f8 <__assert_fail@plt+0x7b8>
   113e8:	ldr	r0, [sp]
   113ec:	ldr	r0, [r0]
   113f0:	ldr	r1, [sp, #4]
   113f4:	str	r0, [r1, #4]
   113f8:	ldr	r0, [sp]
   113fc:	movw	r1, #0
   11400:	str	r1, [r0, #4]
   11404:	ldr	r0, [sp]
   11408:	str	r1, [r0]
   1140c:	ldr	r0, [sp, #4]
   11410:	bl	11430 <__assert_fail@plt+0x7f0>
   11414:	ldr	r0, [sp, #4]
   11418:	ldr	r1, [r0, #12]
   1141c:	mvn	r2, #0
   11420:	add	r1, r1, r2
   11424:	str	r1, [r0, #12]
   11428:	mov	sp, fp
   1142c:	pop	{fp, pc}
   11430:	push	{fp, lr}
   11434:	mov	fp, sp
   11438:	sub	sp, sp, #8
   1143c:	str	r0, [sp, #4]
   11440:	ldr	r0, [sp, #4]
   11444:	ldr	r0, [r0, #8]
   11448:	movw	r1, #0
   1144c:	cmp	r0, r1
   11450:	beq	1146c <__assert_fail@plt+0x82c>
   11454:	ldr	r0, [sp, #4]
   11458:	ldr	r0, [r0, #8]
   1145c:	bl	10ae4 <free@plt>
   11460:	ldr	r0, [sp, #4]
   11464:	movw	r1, #0
   11468:	str	r1, [r0, #8]
   1146c:	mov	sp, fp
   11470:	pop	{fp, pc}
   11474:	push	{fp, lr}
   11478:	mov	fp, sp
   1147c:	sub	sp, sp, #16
   11480:	str	r0, [fp, #-4]
   11484:	movw	r0, #0
   11488:	str	r0, [sp, #4]
   1148c:	ldr	r1, [fp, #-4]
   11490:	ldr	r1, [r1, #8]
   11494:	cmp	r1, r0
   11498:	bne	114ac <__assert_fail@plt+0x86c>
   1149c:	ldr	r0, [fp, #-4]
   114a0:	ldr	r0, [r0, #12]
   114a4:	cmp	r0, #0
   114a8:	bne	114b0 <__assert_fail@plt+0x870>
   114ac:	b	11528 <__assert_fail@plt+0x8e8>
   114b0:	ldr	r0, [pc, #120]	; 11530 <__assert_fail@plt+0x8f0>
   114b4:	ldr	r0, [pc, r0]
   114b8:	ldr	r1, [fp, #-4]
   114bc:	ldr	r1, [r1, #12]
   114c0:	str	r0, [sp]
   114c4:	mov	r0, r1
   114c8:	movw	r1, #4
   114cc:	ldr	r2, [sp]
   114d0:	blx	r2
   114d4:	ldr	r1, [fp, #-4]
   114d8:	str	r0, [r1, #8]
   114dc:	ldr	r0, [fp, #-4]
   114e0:	ldr	r0, [r0]
   114e4:	str	r0, [sp, #8]
   114e8:	ldr	r0, [sp, #8]
   114ec:	movw	r1, #0
   114f0:	cmp	r0, r1
   114f4:	beq	11528 <__assert_fail@plt+0x8e8>
   114f8:	ldr	r0, [sp, #8]
   114fc:	ldr	r1, [fp, #-4]
   11500:	ldr	r1, [r1, #8]
   11504:	ldr	r2, [sp, #4]
   11508:	add	r3, r2, #1
   1150c:	str	r3, [sp, #4]
   11510:	add	r1, r1, r2, lsl #2
   11514:	str	r0, [r1]
   11518:	ldr	r0, [sp, #8]
   1151c:	ldr	r0, [r0, #4]
   11520:	str	r0, [sp, #8]
   11524:	b	114e8 <__assert_fail@plt+0x8a8>
   11528:	mov	sp, fp
   1152c:	pop	{fp, pc}
   11530:	andeq	r7, r1, r8, asr ip
   11534:	push	{fp, lr}
   11538:	mov	fp, sp
   1153c:	sub	sp, sp, #16
   11540:	str	r0, [fp, #-4]
   11544:	str	r1, [sp, #8]
   11548:	ldr	r0, [fp, #-4]
   1154c:	ldr	r0, [r0]
   11550:	movw	r1, #0
   11554:	cmp	r0, r1
   11558:	beq	11590 <__assert_fail@plt+0x950>
   1155c:	ldr	r0, [fp, #-4]
   11560:	ldr	r0, [r0]
   11564:	str	r0, [sp, #4]
   11568:	ldr	r0, [fp, #-4]
   1156c:	ldr	r1, [sp, #4]
   11570:	bl	1136c <__assert_fail@plt+0x72c>
   11574:	ldr	r0, [sp, #8]
   11578:	ldr	r1, [sp, #4]
   1157c:	str	r0, [sp]
   11580:	mov	r0, r1
   11584:	ldr	r1, [sp]
   11588:	blx	r1
   1158c:	b	11548 <__assert_fail@plt+0x908>
   11590:	mov	sp, fp
   11594:	pop	{fp, pc}
   11598:	push	{fp, lr}
   1159c:	mov	fp, sp
   115a0:	sub	sp, sp, #16
   115a4:	str	r0, [fp, #-4]
   115a8:	str	r1, [sp, #8]
   115ac:	str	r2, [sp, #4]
   115b0:	ldr	r0, [fp, #-4]
   115b4:	cmp	r0, #2
   115b8:	bge	115c0 <__assert_fail@plt+0x980>
   115bc:	b	115f0 <__assert_fail@plt+0x9b0>
   115c0:	ldr	r0, [pc, #48]	; 115f8 <__assert_fail@plt+0x9b8>
   115c4:	add	r0, pc, r0
   115c8:	ldr	r1, [pc, #44]	; 115fc <__assert_fail@plt+0x9bc>
   115cc:	add	r1, pc, r1
   115d0:	ldr	r2, [sp, #8]
   115d4:	str	r2, [r1]
   115d8:	ldr	r1, [sp, #4]
   115dc:	str	r1, [r0]
   115e0:	ldr	r0, [fp, #-4]
   115e4:	sub	r1, r0, #1
   115e8:	movw	r0, #0
   115ec:	bl	11600 <__assert_fail@plt+0x9c0>
   115f0:	mov	sp, fp
   115f4:	pop	{fp, pc}
   115f8:	andeq	r7, r1, ip, lsl #23
   115fc:	andeq	r7, r1, r0, lsl #23
   11600:	push	{fp, lr}
   11604:	mov	fp, sp
   11608:	sub	sp, sp, #40	; 0x28
   1160c:	str	r0, [fp, #-4]
   11610:	str	r1, [fp, #-8]
   11614:	ldr	r0, [fp, #-4]
   11618:	str	r0, [fp, #-12]
   1161c:	ldr	r0, [fp, #-8]
   11620:	str	r0, [fp, #-16]
   11624:	ldr	r0, [pc, #500]	; 11820 <__assert_fail@plt+0xbe0>
   11628:	ldr	r0, [pc, r0]
   1162c:	ldr	r1, [fp, #-12]
   11630:	add	r0, r0, r1, lsl #2
   11634:	ldr	r0, [r0]
   11638:	str	r0, [sp, #20]
   1163c:	ldr	r0, [fp, #-12]
   11640:	ldr	r1, [fp, #-16]
   11644:	cmp	r0, r1
   11648:	bge	117b4 <__assert_fail@plt+0xb74>
   1164c:	b	11650 <__assert_fail@plt+0xa10>
   11650:	ldr	r0, [fp, #-12]
   11654:	ldr	r1, [fp, #-16]
   11658:	cmp	r0, r1
   1165c:	movw	r0, #0
   11660:	str	r0, [sp, #16]
   11664:	bge	116ac <__assert_fail@plt+0xa6c>
   11668:	ldr	r0, [pc, #436]	; 11824 <__assert_fail@plt+0xbe4>
   1166c:	ldr	r0, [pc, r0]
   11670:	ldr	r1, [sp, #20]
   11674:	ldr	r2, [pc, #428]	; 11828 <__assert_fail@plt+0xbe8>
   11678:	ldr	r2, [pc, r2]
   1167c:	ldr	r3, [fp, #-16]
   11680:	add	r2, r2, r3, lsl #2
   11684:	ldr	r2, [r2]
   11688:	str	r0, [sp, #12]
   1168c:	mov	r0, r1
   11690:	mov	r1, r2
   11694:	ldr	r2, [sp, #12]
   11698:	blx	r2
   1169c:	cmp	r0, #0
   116a0:	movw	r0, #0
   116a4:	movlt	r0, #1
   116a8:	str	r0, [sp, #16]
   116ac:	ldr	r0, [sp, #16]
   116b0:	tst	r0, #1
   116b4:	beq	116cc <__assert_fail@plt+0xa8c>
   116b8:	ldr	r0, [fp, #-16]
   116bc:	mvn	r1, #0
   116c0:	add	r0, r0, r1
   116c4:	str	r0, [fp, #-16]
   116c8:	b	11650 <__assert_fail@plt+0xa10>
   116cc:	ldr	r0, [fp, #-12]
   116d0:	ldr	r1, [fp, #-16]
   116d4:	cmp	r0, r1
   116d8:	beq	11700 <__assert_fail@plt+0xac0>
   116dc:	ldr	r0, [pc, #328]	; 1182c <__assert_fail@plt+0xbec>
   116e0:	ldr	r0, [pc, r0]
   116e4:	ldr	r1, [fp, #-16]
   116e8:	ldr	r1, [r0, r1, lsl #2]
   116ec:	ldr	r2, [fp, #-12]
   116f0:	add	r3, r2, #1
   116f4:	str	r3, [fp, #-12]
   116f8:	add	r0, r0, r2, lsl #2
   116fc:	str	r1, [r0]
   11700:	b	11704 <__assert_fail@plt+0xac4>
   11704:	ldr	r0, [fp, #-12]
   11708:	ldr	r1, [fp, #-16]
   1170c:	cmp	r0, r1
   11710:	movw	r0, #0
   11714:	str	r0, [sp, #8]
   11718:	bge	11760 <__assert_fail@plt+0xb20>
   1171c:	ldr	r0, [pc, #268]	; 11830 <__assert_fail@plt+0xbf0>
   11720:	ldr	r0, [pc, r0]
   11724:	ldr	r1, [sp, #20]
   11728:	ldr	r2, [pc, #260]	; 11834 <__assert_fail@plt+0xbf4>
   1172c:	ldr	r2, [pc, r2]
   11730:	ldr	r3, [fp, #-12]
   11734:	add	r2, r2, r3, lsl #2
   11738:	ldr	r2, [r2]
   1173c:	str	r0, [sp, #4]
   11740:	mov	r0, r1
   11744:	mov	r1, r2
   11748:	ldr	r2, [sp, #4]
   1174c:	blx	r2
   11750:	cmp	r0, #0
   11754:	movw	r0, #0
   11758:	movgt	r0, #1
   1175c:	str	r0, [sp, #8]
   11760:	ldr	r0, [sp, #8]
   11764:	tst	r0, #1
   11768:	beq	1177c <__assert_fail@plt+0xb3c>
   1176c:	ldr	r0, [fp, #-12]
   11770:	add	r0, r0, #1
   11774:	str	r0, [fp, #-12]
   11778:	b	11704 <__assert_fail@plt+0xac4>
   1177c:	ldr	r0, [fp, #-12]
   11780:	ldr	r1, [fp, #-16]
   11784:	cmp	r0, r1
   11788:	beq	117b0 <__assert_fail@plt+0xb70>
   1178c:	ldr	r0, [pc, #164]	; 11838 <__assert_fail@plt+0xbf8>
   11790:	ldr	r0, [pc, r0]
   11794:	ldr	r1, [fp, #-12]
   11798:	ldr	r1, [r0, r1, lsl #2]
   1179c:	ldr	r2, [fp, #-16]
   117a0:	sub	r3, r2, #1
   117a4:	str	r3, [fp, #-16]
   117a8:	add	r0, r0, r2, lsl #2
   117ac:	str	r1, [r0]
   117b0:	b	1163c <__assert_fail@plt+0x9fc>
   117b4:	ldr	r0, [sp, #20]
   117b8:	ldr	r1, [pc, #124]	; 1183c <__assert_fail@plt+0xbfc>
   117bc:	ldr	r1, [pc, r1]
   117c0:	ldr	r2, [fp, #-16]
   117c4:	add	r1, r1, r2, lsl #2
   117c8:	str	r0, [r1]
   117cc:	ldr	r0, [fp, #-4]
   117d0:	ldr	r1, [fp, #-16]
   117d4:	mvn	r2, #0
   117d8:	add	r1, r1, r2
   117dc:	str	r1, [fp, #-16]
   117e0:	cmp	r0, r1
   117e4:	bge	117f4 <__assert_fail@plt+0xbb4>
   117e8:	ldr	r0, [fp, #-4]
   117ec:	ldr	r1, [fp, #-16]
   117f0:	bl	11600 <__assert_fail@plt+0x9c0>
   117f4:	ldr	r0, [fp, #-12]
   117f8:	add	r0, r0, #1
   117fc:	str	r0, [fp, #-12]
   11800:	ldr	r1, [fp, #-8]
   11804:	cmp	r0, r1
   11808:	bge	11818 <__assert_fail@plt+0xbd8>
   1180c:	ldr	r0, [fp, #-12]
   11810:	ldr	r1, [fp, #-8]
   11814:	bl	11600 <__assert_fail@plt+0x9c0>
   11818:	mov	sp, fp
   1181c:	pop	{fp, pc}
   11820:	andeq	r7, r1, r4, lsr #22
   11824:	andeq	r7, r1, r4, ror #21
   11828:	ldrdeq	r7, [r1], -r4
   1182c:	andeq	r7, r1, ip, ror #20
   11830:	andeq	r7, r1, r0, lsr sl
   11834:	andeq	r7, r1, r0, lsr #20
   11838:			; <UNDEFINED> instruction: 0x000179bc
   1183c:	muleq	r1, r0, r9
   11840:	push	{fp, lr}
   11844:	mov	fp, sp
   11848:	sub	sp, sp, #16
   1184c:	str	r0, [fp, #-4]
   11850:	movw	r0, #0
   11854:	strh	r0, [fp, #-6]
   11858:	ldrsh	r0, [fp, #-6]
   1185c:	movw	r1, #503	; 0x1f7
   11860:	cmp	r0, r1
   11864:	bge	118a0 <__assert_fail@plt+0xc60>
   11868:	ldr	r0, [pc, #92]	; 118cc <__assert_fail@plt+0xc8c>
   1186c:	ldr	r0, [pc, r0]
   11870:	ldr	r1, [fp, #-4]
   11874:	ldrsh	r2, [fp, #-6]
   11878:	add	r1, r1, r2, lsl #4
   1187c:	str	r0, [sp, #4]
   11880:	mov	r0, r1
   11884:	ldr	r1, [sp, #4]
   11888:	blx	r1
   1188c:	ldrh	r0, [fp, #-6]
   11890:	movw	r1, #1
   11894:	add	r0, r0, r1
   11898:	strh	r0, [fp, #-6]
   1189c:	b	11858 <__assert_fail@plt+0xc18>
   118a0:	ldr	r0, [fp, #-4]
   118a4:	movw	r1, #8048	; 0x1f70
   118a8:	add	r0, r0, r1
   118ac:	movw	r1, #0
   118b0:	str	r1, [r0]
   118b4:	ldr	r0, [fp, #-4]
   118b8:	movw	r2, #8052	; 0x1f74
   118bc:	add	r0, r0, r2
   118c0:	str	r1, [r0]
   118c4:	mov	sp, fp
   118c8:	pop	{fp, pc}
   118cc:	muleq	r1, r0, r8
   118d0:	push	{fp, lr}
   118d4:	mov	fp, sp
   118d8:	sub	sp, sp, #24
   118dc:	str	r0, [fp, #-4]
   118e0:	str	r1, [fp, #-8]
   118e4:	ldr	r0, [fp, #-4]
   118e8:	ldr	r1, [fp, #-8]
   118ec:	str	r0, [sp, #8]
   118f0:	mov	r0, r1
   118f4:	bl	11970 <__assert_fail@plt+0xd30>
   118f8:	mov	r1, r0
   118fc:	ldr	r2, [sp, #8]
   11900:	add	r0, r2, r0, lsl #4
   11904:	ldr	r0, [r0]
   11908:	str	r0, [sp, #12]
   1190c:	ldr	r0, [sp, #12]
   11910:	movw	r1, #0
   11914:	cmp	r0, r1
   11918:	movw	r0, #0
   1191c:	str	r0, [sp, #4]
   11920:	beq	11944 <__assert_fail@plt+0xd04>
   11924:	ldr	r0, [fp, #-8]
   11928:	ldr	r1, [sp, #12]
   1192c:	ldr	r1, [r1, #8]
   11930:	bl	10ac0 <strcmp@plt>
   11934:	cmp	r0, #0
   11938:	movw	r0, #0
   1193c:	movne	r0, #1
   11940:	str	r0, [sp, #4]
   11944:	ldr	r0, [sp, #4]
   11948:	tst	r0, #1
   1194c:	beq	11964 <__assert_fail@plt+0xd24>
   11950:	b	11954 <__assert_fail@plt+0xd14>
   11954:	ldr	r0, [sp, #12]
   11958:	ldr	r0, [r0, #4]
   1195c:	str	r0, [sp, #12]
   11960:	b	1190c <__assert_fail@plt+0xccc>
   11964:	ldr	r0, [sp, #12]
   11968:	mov	sp, fp
   1196c:	pop	{fp, pc}
   11970:	sub	sp, sp, #16
   11974:	str	r0, [sp, #12]
   11978:	ldr	r0, [sp, #12]
   1197c:	str	r0, [sp, #8]
   11980:	movw	r0, #0
   11984:	str	r0, [sp]
   11988:	str	r0, [sp, #4]
   1198c:	ldr	r0, [sp, #8]
   11990:	ldr	r1, [sp, #4]
   11994:	add	r0, r0, r1
   11998:	ldrsb	r0, [r0]
   1199c:	cmp	r0, #0
   119a0:	beq	119d0 <__assert_fail@plt+0xd90>
   119a4:	ldr	r0, [sp, #8]
   119a8:	ldr	r1, [sp, #4]
   119ac:	add	r0, r0, r1
   119b0:	ldrb	r0, [r0]
   119b4:	ldr	r1, [sp]
   119b8:	add	r0, r1, r0
   119bc:	str	r0, [sp]
   119c0:	ldr	r0, [sp, #4]
   119c4:	add	r0, r0, #1
   119c8:	str	r0, [sp, #4]
   119cc:	b	1198c <__assert_fail@plt+0xd4c>
   119d0:	ldr	r0, [sp]
   119d4:	movw	r1, #20065	; 0x4e61
   119d8:	movt	r1, #33354	; 0x824a
   119dc:	smmla	r1, r0, r1, r0
   119e0:	asr	r2, r1, #8
   119e4:	add	r1, r2, r1, lsr #31
   119e8:	movw	r2, #503	; 0x1f7
   119ec:	mls	r0, r1, r2, r0
   119f0:	sxth	r0, r0
   119f4:	add	sp, sp, #16
   119f8:	bx	lr
   119fc:	push	{fp, lr}
   11a00:	mov	fp, sp
   11a04:	sub	sp, sp, #24
   11a08:	ldr	r2, [pc, #112]	; 11a80 <__assert_fail@plt+0xe40>
   11a0c:	ldr	r2, [pc, r2]
   11a10:	str	r0, [fp, #-4]
   11a14:	str	r1, [fp, #-8]
   11a18:	ldr	r0, [fp, #-4]
   11a1c:	ldr	r1, [fp, #-8]
   11a20:	ldr	r1, [r1, #8]
   11a24:	str	r0, [sp, #12]
   11a28:	mov	r0, r1
   11a2c:	str	r2, [sp, #8]
   11a30:	bl	11970 <__assert_fail@plt+0xd30>
   11a34:	mov	r1, r0
   11a38:	ldr	r2, [sp, #12]
   11a3c:	add	r0, r2, r0, lsl #4
   11a40:	ldr	r3, [fp, #-8]
   11a44:	str	r1, [sp, #4]
   11a48:	mov	r1, r3
   11a4c:	ldr	r3, [sp, #8]
   11a50:	blx	r3
   11a54:	ldr	r0, [fp, #-4]
   11a58:	bl	11a84 <__assert_fail@plt+0xe44>
   11a5c:	ldr	r0, [fp, #-4]
   11a60:	movw	r1, #8052	; 0x1f74
   11a64:	add	r2, r0, r1
   11a68:	ldr	r2, [r2]
   11a6c:	add	r2, r2, #1
   11a70:	add	r0, r0, r1
   11a74:	str	r2, [r0]
   11a78:	mov	sp, fp
   11a7c:	pop	{fp, pc}
   11a80:	muleq	r1, r4, r6
   11a84:	push	{fp, lr}
   11a88:	mov	fp, sp
   11a8c:	sub	sp, sp, #8
   11a90:	str	r0, [sp, #4]
   11a94:	ldr	r0, [sp, #4]
   11a98:	movw	r1, #8048	; 0x1f70
   11a9c:	add	r0, r0, r1
   11aa0:	ldr	r0, [r0]
   11aa4:	movw	r1, #0
   11aa8:	cmp	r0, r1
   11aac:	beq	11ad8 <__assert_fail@plt+0xe98>
   11ab0:	ldr	r0, [sp, #4]
   11ab4:	movw	r1, #8048	; 0x1f70
   11ab8:	add	r0, r0, r1
   11abc:	ldr	r0, [r0]
   11ac0:	bl	10ae4 <free@plt>
   11ac4:	ldr	r0, [sp, #4]
   11ac8:	movw	r1, #8048	; 0x1f70
   11acc:	add	r0, r0, r1
   11ad0:	movw	r1, #0
   11ad4:	str	r1, [r0]
   11ad8:	mov	sp, fp
   11adc:	pop	{fp, pc}
   11ae0:	push	{fp, lr}
   11ae4:	mov	fp, sp
   11ae8:	sub	sp, sp, #24
   11aec:	ldr	r2, [pc, #116]	; 11b68 <__assert_fail@plt+0xf28>
   11af0:	ldr	r2, [pc, r2]
   11af4:	str	r0, [fp, #-4]
   11af8:	str	r1, [fp, #-8]
   11afc:	ldr	r0, [fp, #-4]
   11b00:	ldr	r1, [fp, #-8]
   11b04:	ldr	r1, [r1, #8]
   11b08:	str	r0, [sp, #12]
   11b0c:	mov	r0, r1
   11b10:	str	r2, [sp, #8]
   11b14:	bl	11970 <__assert_fail@plt+0xd30>
   11b18:	mov	r1, r0
   11b1c:	ldr	r2, [sp, #12]
   11b20:	add	r0, r2, r0, lsl #4
   11b24:	ldr	r3, [fp, #-8]
   11b28:	str	r1, [sp, #4]
   11b2c:	mov	r1, r3
   11b30:	ldr	r3, [sp, #8]
   11b34:	blx	r3
   11b38:	ldr	r0, [fp, #-4]
   11b3c:	bl	11a84 <__assert_fail@plt+0xe44>
   11b40:	ldr	r0, [fp, #-4]
   11b44:	movw	r1, #8052	; 0x1f74
   11b48:	add	r2, r0, r1
   11b4c:	ldr	r2, [r2]
   11b50:	mvn	r3, #0
   11b54:	add	r2, r2, r3
   11b58:	add	r0, r0, r1
   11b5c:	str	r2, [r0]
   11b60:	mov	sp, fp
   11b64:	pop	{fp, pc}
   11b68:	andeq	r7, r1, r8, lsr r6
   11b6c:	push	{fp, lr}
   11b70:	mov	fp, sp
   11b74:	sub	sp, sp, #24
   11b78:	str	r0, [fp, #-4]
   11b7c:	movw	r0, #0
   11b80:	str	r0, [sp, #8]
   11b84:	ldr	r1, [fp, #-4]
   11b88:	movw	r2, #8048	; 0x1f70
   11b8c:	add	r1, r1, r2
   11b90:	ldr	r1, [r1]
   11b94:	cmp	r1, r0
   11b98:	bne	11bb4 <__assert_fail@plt+0xf74>
   11b9c:	ldr	r0, [fp, #-4]
   11ba0:	movw	r1, #8052	; 0x1f74
   11ba4:	add	r0, r0, r1
   11ba8:	ldr	r0, [r0]
   11bac:	cmp	r0, #0
   11bb0:	bne	11bb8 <__assert_fail@plt+0xf78>
   11bb4:	b	11c78 <__assert_fail@plt+0x1038>
   11bb8:	ldr	r0, [pc, #192]	; 11c80 <__assert_fail@plt+0x1040>
   11bbc:	ldr	r0, [pc, r0]
   11bc0:	ldr	r1, [fp, #-4]
   11bc4:	movw	r2, #8052	; 0x1f74
   11bc8:	add	r1, r1, r2
   11bcc:	ldr	r1, [r1]
   11bd0:	str	r0, [sp, #4]
   11bd4:	mov	r0, r1
   11bd8:	movw	r1, #4
   11bdc:	ldr	r2, [sp, #4]
   11be0:	blx	r2
   11be4:	ldr	r1, [fp, #-4]
   11be8:	movw	r2, #8048	; 0x1f70
   11bec:	add	r1, r1, r2
   11bf0:	str	r0, [r1]
   11bf4:	movw	r0, #0
   11bf8:	str	r0, [sp, #12]
   11bfc:	ldr	r0, [sp, #12]
   11c00:	movw	r1, #503	; 0x1f7
   11c04:	cmp	r0, r1
   11c08:	bge	11c78 <__assert_fail@plt+0x1038>
   11c0c:	ldr	r0, [fp, #-4]
   11c10:	ldr	r1, [sp, #12]
   11c14:	add	r0, r0, r1, lsl #4
   11c18:	ldr	r0, [r0]
   11c1c:	str	r0, [fp, #-8]
   11c20:	ldr	r0, [fp, #-8]
   11c24:	movw	r1, #0
   11c28:	cmp	r0, r1
   11c2c:	beq	11c64 <__assert_fail@plt+0x1024>
   11c30:	ldr	r0, [fp, #-8]
   11c34:	ldr	r1, [fp, #-4]
   11c38:	movw	r2, #8048	; 0x1f70
   11c3c:	ldr	r1, [r1, r2]
   11c40:	ldr	r2, [sp, #8]
   11c44:	add	r3, r2, #1
   11c48:	str	r3, [sp, #8]
   11c4c:	add	r1, r1, r2, lsl #2
   11c50:	str	r0, [r1]
   11c54:	ldr	r0, [fp, #-8]
   11c58:	ldr	r0, [r0, #4]
   11c5c:	str	r0, [fp, #-8]
   11c60:	b	11c20 <__assert_fail@plt+0xfe0>
   11c64:	b	11c68 <__assert_fail@plt+0x1028>
   11c68:	ldr	r0, [sp, #12]
   11c6c:	add	r0, r0, #1
   11c70:	str	r0, [sp, #12]
   11c74:	b	11bfc <__assert_fail@plt+0xfbc>
   11c78:	mov	sp, fp
   11c7c:	pop	{fp, pc}
   11c80:	andeq	r7, r1, r0, asr r5
   11c84:	push	{fp, lr}
   11c88:	mov	fp, sp
   11c8c:	sub	sp, sp, #16
   11c90:	str	r0, [fp, #-4]
   11c94:	str	r1, [sp, #8]
   11c98:	movw	r0, #0
   11c9c:	strh	r0, [sp, #6]
   11ca0:	ldrsh	r0, [sp, #6]
   11ca4:	movw	r1, #503	; 0x1f7
   11ca8:	cmp	r0, r1
   11cac:	bge	11cf0 <__assert_fail@plt+0x10b0>
   11cb0:	ldr	r0, [pc, #92]	; 11d14 <__assert_fail@plt+0x10d4>
   11cb4:	ldr	r0, [pc, r0]
   11cb8:	ldr	r1, [fp, #-4]
   11cbc:	ldrsh	r2, [sp, #6]
   11cc0:	add	r1, r1, r2, lsl #4
   11cc4:	ldr	r2, [sp, #8]
   11cc8:	str	r0, [sp]
   11ccc:	mov	r0, r1
   11cd0:	mov	r1, r2
   11cd4:	ldr	r2, [sp]
   11cd8:	blx	r2
   11cdc:	ldrh	r0, [sp, #6]
   11ce0:	movw	r1, #1
   11ce4:	add	r0, r0, r1
   11ce8:	strh	r0, [sp, #6]
   11cec:	b	11ca0 <__assert_fail@plt+0x1060>
   11cf0:	ldr	r0, [fp, #-4]
   11cf4:	bl	11a84 <__assert_fail@plt+0xe44>
   11cf8:	ldr	r0, [fp, #-4]
   11cfc:	movw	r1, #8052	; 0x1f74
   11d00:	add	r0, r0, r1
   11d04:	movw	r1, #0
   11d08:	str	r1, [r0]
   11d0c:	mov	sp, fp
   11d10:	pop	{fp, pc}
   11d14:	andeq	r7, r1, r0, ror r4
   11d18:	push	{fp, lr}
   11d1c:	mov	fp, sp
   11d20:	sub	sp, sp, #16
   11d24:	str	r0, [fp, #-4]
   11d28:	str	r1, [sp, #8]
   11d2c:	ldr	r0, [fp, #-4]
   11d30:	ldr	r1, [sp, #8]
   11d34:	bl	10ab4 <calloc@plt>
   11d38:	str	r0, [sp, #4]
   11d3c:	ldr	r0, [sp, #4]
   11d40:	movw	r1, #0
   11d44:	cmp	r0, r1
   11d48:	bne	11d58 <__assert_fail@plt+0x1118>
   11d4c:	ldr	r0, [pc, #16]	; 11d64 <__assert_fail@plt+0x1124>
   11d50:	add	r0, pc, r0
   11d54:	bl	123f4 <error@@Base>
   11d58:	ldr	r0, [sp, #4]
   11d5c:	mov	sp, fp
   11d60:	pop	{fp, pc}
   11d64:	strheq	r3, [r0], -lr
   11d68:	sub	sp, sp, #20
   11d6c:	str	r0, [sp, #12]
   11d70:	str	r1, [sp, #8]
   11d74:	movw	r0, #0
   11d78:	str	r0, [sp, #4]
   11d7c:	ldr	r0, [sp, #12]
   11d80:	ldr	r1, [sp, #4]
   11d84:	add	r0, r0, r1
   11d88:	ldrb	r0, [r0]
   11d8c:	cmp	r0, #0
   11d90:	movw	r0, #0
   11d94:	str	r0, [sp]
   11d98:	beq	11dcc <__assert_fail@plt+0x118c>
   11d9c:	ldr	r0, [sp, #12]
   11da0:	ldr	r1, [sp, #4]
   11da4:	add	r0, r0, r1
   11da8:	ldrb	r0, [r0]
   11dac:	ldr	r1, [sp, #8]
   11db0:	ldr	r2, [sp, #4]
   11db4:	add	r1, r1, r2
   11db8:	ldrb	r1, [r1]
   11dbc:	cmp	r0, r1
   11dc0:	movw	r0, #0
   11dc4:	moveq	r0, #1
   11dc8:	str	r0, [sp]
   11dcc:	ldr	r0, [sp]
   11dd0:	tst	r0, #1
   11dd4:	beq	11dec <__assert_fail@plt+0x11ac>
   11dd8:	b	11ddc <__assert_fail@plt+0x119c>
   11ddc:	ldr	r0, [sp, #4]
   11de0:	add	r0, r0, #1
   11de4:	str	r0, [sp, #4]
   11de8:	b	11d7c <__assert_fail@plt+0x113c>
   11dec:	ldr	r0, [sp, #12]
   11df0:	ldr	r1, [sp, #4]
   11df4:	add	r0, r0, r1
   11df8:	ldrb	r0, [r0]
   11dfc:	cmp	r0, #0
   11e00:	bne	11e1c <__assert_fail@plt+0x11dc>
   11e04:	ldr	r0, [sp, #8]
   11e08:	ldr	r1, [sp, #4]
   11e0c:	add	r0, r0, r1
   11e10:	ldrb	r0, [r0]
   11e14:	cmp	r0, #0
   11e18:	beq	11e5c <__assert_fail@plt+0x121c>
   11e1c:	ldr	r0, [sp, #12]
   11e20:	ldr	r1, [sp, #4]
   11e24:	add	r0, r0, r1
   11e28:	ldrb	r0, [r0]
   11e2c:	ldr	r1, [sp, #8]
   11e30:	ldr	r2, [sp, #4]
   11e34:	add	r1, r1, r2
   11e38:	ldrb	r1, [r1]
   11e3c:	cmp	r0, r1
   11e40:	movw	r0, #0
   11e44:	movlt	r0, #1
   11e48:	tst	r0, #1
   11e4c:	mvn	r0, #0
   11e50:	moveq	r0, #1
   11e54:	str	r0, [sp, #16]
   11e58:	b	11e64 <__assert_fail@plt+0x1224>
   11e5c:	movw	r0, #0
   11e60:	str	r0, [sp, #16]
   11e64:	ldr	r0, [sp, #16]
   11e68:	add	sp, sp, #20
   11e6c:	bx	lr
   11e70:	push	{fp, lr}
   11e74:	mov	fp, sp
   11e78:	sub	sp, sp, #24
   11e7c:	str	r0, [fp, #-8]
   11e80:	str	r1, [sp, #12]
   11e84:	ldr	r0, [fp, #-8]
   11e88:	movw	r1, #0
   11e8c:	cmp	r0, r1
   11e90:	bne	11ed4 <__assert_fail@plt+0x1294>
   11e94:	ldr	r0, [sp, #12]
   11e98:	ldrb	r0, [r0]
   11e9c:	cmp	r0, #114	; 0x72
   11ea0:	bne	11eb8 <__assert_fail@plt+0x1278>
   11ea4:	ldr	r0, [pc, #148]	; 11f40 <__assert_fail@plt+0x1300>
   11ea8:	ldr	r0, [pc, r0]
   11eac:	ldr	r0, [r0]
   11eb0:	str	r0, [sp, #4]
   11eb4:	b	11ec8 <__assert_fail@plt+0x1288>
   11eb8:	ldr	r0, [pc, #124]	; 11f3c <__assert_fail@plt+0x12fc>
   11ebc:	ldr	r0, [pc, r0]
   11ec0:	ldr	r0, [r0]
   11ec4:	str	r0, [sp, #4]
   11ec8:	ldr	r0, [sp, #4]
   11ecc:	str	r0, [fp, #-4]
   11ed0:	b	11f30 <__assert_fail@plt+0x12f0>
   11ed4:	ldr	r0, [fp, #-8]
   11ed8:	ldr	r1, [sp, #12]
   11edc:	bl	10ad8 <fopen@plt>
   11ee0:	str	r0, [sp, #8]
   11ee4:	ldr	r0, [sp, #8]
   11ee8:	movw	r1, #0
   11eec:	cmp	r0, r1
   11ef0:	beq	11f00 <__assert_fail@plt+0x12c0>
   11ef4:	ldr	r0, [sp, #8]
   11ef8:	str	r0, [fp, #-4]
   11efc:	b	11f30 <__assert_fail@plt+0x12f0>
   11f00:	ldr	r0, [sp, #12]
   11f04:	ldrb	r0, [r0]
   11f08:	cmp	r0, #119	; 0x77
   11f0c:	bne	11f20 <__assert_fail@plt+0x12e0>
   11f10:	ldr	r0, [pc, #48]	; 11f48 <__assert_fail@plt+0x1308>
   11f14:	add	r0, pc, r0
   11f18:	ldr	r1, [fp, #-8]
   11f1c:	bl	12454 <error@@Base+0x60>
   11f20:	ldr	r0, [pc, #28]	; 11f44 <__assert_fail@plt+0x1304>
   11f24:	add	r0, pc, r0
   11f28:	ldr	r1, [fp, #-8]
   11f2c:	bl	12454 <error@@Base+0x60>
   11f30:	ldr	r0, [fp, #-4]
   11f34:	mov	sp, fp
   11f38:	pop	{fp, pc}
   11f3c:	andeq	r7, r1, ip, lsr r2
   11f40:	andeq	r7, r1, r4, asr #4
   11f44:	andeq	r2, r0, sl, lsl pc
   11f48:	andeq	r2, r0, r4, lsl pc
   11f4c:	push	{fp, lr}
   11f50:	mov	fp, sp
   11f54:	sub	sp, sp, #8
   11f58:	ldr	r1, [pc, #60]	; 11f9c <__assert_fail@plt+0x135c>
   11f5c:	ldr	r1, [pc, r1]
   11f60:	str	r0, [sp, #4]
   11f64:	ldr	r0, [sp, #4]
   11f68:	ldr	r1, [r1]
   11f6c:	cmp	r0, r1
   11f70:	beq	11f94 <__assert_fail@plt+0x1354>
   11f74:	ldr	r0, [pc, #36]	; 11fa0 <__assert_fail@plt+0x1360>
   11f78:	ldr	r0, [pc, r0]
   11f7c:	ldr	r1, [sp, #4]
   11f80:	ldr	r0, [r0]
   11f84:	cmp	r1, r0
   11f88:	beq	11f94 <__assert_fail@plt+0x1354>
   11f8c:	ldr	r0, [sp, #4]
   11f90:	bl	10bc8 <fclose@plt>
   11f94:	mov	sp, fp
   11f98:	pop	{fp, pc}
   11f9c:	muleq	r1, r0, r1
   11fa0:	andeq	r7, r1, r0, lsl #3
   11fa4:	push	{fp, lr}
   11fa8:	mov	fp, sp
   11fac:	sub	sp, sp, #96	; 0x60
   11fb0:	str	r0, [fp, #-4]
   11fb4:	ldr	r0, [fp, #-4]
   11fb8:	mov	r1, sp
   11fbc:	bl	14d98 <error@@Base+0x29a4>
   11fc0:	cmp	r0, #0
   11fc4:	movw	r0, #0
   11fc8:	moveq	r0, #1
   11fcc:	tst	r0, #1
   11fd0:	movw	r0, #1
   11fd4:	moveq	r0, #0
   11fd8:	and	r0, r0, #255	; 0xff
   11fdc:	mov	sp, fp
   11fe0:	pop	{fp, pc}
   11fe4:	push	{fp, lr}
   11fe8:	mov	fp, sp
   11fec:	sub	sp, sp, #8
   11ff0:	ldr	r0, [pc, #68]	; 1203c <__assert_fail@plt+0x13fc>
   11ff4:	add	r0, pc, r0
   11ff8:	ldrh	r1, [r0]
   11ffc:	movw	r2, #1
   12000:	add	r1, r1, r2
   12004:	strh	r1, [r0]
   12008:	sxth	r0, r1
   1200c:	bl	12040 <__assert_fail@plt+0x1400>
   12010:	ldr	r1, [pc, #32]	; 12038 <__assert_fail@plt+0x13f8>
   12014:	ldr	r1, [pc, r1]
   12018:	str	r0, [sp, #4]
   1201c:	ldr	r0, [sp, #4]
   12020:	blx	r1
   12024:	ldr	r1, [sp, #4]
   12028:	str	r0, [sp]
   1202c:	mov	r0, r1
   12030:	mov	sp, fp
   12034:	pop	{fp, pc}
   12038:	andeq	r7, r1, r0, lsr #1
   1203c:	andeq	r7, r1, r0, ror #2
   12040:	push	{fp, lr}
   12044:	mov	fp, sp
   12048:	sub	sp, sp, #128	; 0x80
   1204c:	ldr	r1, [pc, #112]	; 120c4 <__assert_fail@plt+0x1484>
   12050:	ldr	r1, [pc, r1]
   12054:	ldr	r2, [pc, #108]	; 120c8 <__assert_fail@plt+0x1488>
   12058:	ldr	r2, [pc, r2]
   1205c:	add	r3, sp, #26
   12060:	strh	r0, [fp, #-2]
   12064:	ldr	r2, [r2]
   12068:	str	r3, [sp, #20]
   1206c:	str	r2, [sp, #16]
   12070:	blx	r1
   12074:	ldr	r1, [pc, #68]	; 120c0 <__assert_fail@plt+0x1480>
   12078:	add	r1, pc, r1
   1207c:	ldrsh	r2, [fp, #-2]
   12080:	ldr	r3, [sp, #20]
   12084:	str	r0, [sp, #12]
   12088:	mov	r0, r3
   1208c:	ldr	ip, [sp, #16]
   12090:	str	r2, [sp, #8]
   12094:	mov	r2, ip
   12098:	ldr	r3, [sp, #12]
   1209c:	ldr	lr, [sp, #8]
   120a0:	str	lr, [sp]
   120a4:	bl	10bec <sprintf@plt>
   120a8:	add	r1, sp, #26
   120ac:	str	r0, [sp, #4]
   120b0:	mov	r0, r1
   120b4:	bl	10b14 <strdup@plt>
   120b8:	mov	sp, fp
   120bc:	pop	{fp, pc}
   120c0:	andeq	r2, r0, pc, ror #27
   120c4:	muleq	r1, r0, r0
   120c8:	andeq	r7, r1, r4, lsl #1
   120cc:	push	{fp, lr}
   120d0:	mov	fp, sp
   120d4:	sub	sp, sp, #16
   120d8:	str	r0, [fp, #-4]
   120dc:	movw	r0, #47	; 0x2f
   120e0:	strb	r0, [fp, #-5]
   120e4:	ldr	r0, [fp, #-4]
   120e8:	bl	10ba4 <strlen@plt>
   120ec:	sub	r0, r0, #1
   120f0:	strh	r0, [sp, #8]
   120f4:	ldrsh	r0, [sp, #8]
   120f8:	cmp	r0, #0
   120fc:	movw	r0, #0
   12100:	str	r0, [sp, #4]
   12104:	blt	1212c <__assert_fail@plt+0x14ec>
   12108:	ldr	r0, [fp, #-4]
   1210c:	ldrsh	r1, [sp, #8]
   12110:	add	r0, r0, r1
   12114:	ldrb	r0, [r0]
   12118:	ldrb	r1, [fp, #-5]
   1211c:	cmp	r0, r1
   12120:	movw	r0, #0
   12124:	movne	r0, #1
   12128:	str	r0, [sp, #4]
   1212c:	ldr	r0, [sp, #4]
   12130:	tst	r0, #1
   12134:	beq	12150 <__assert_fail@plt+0x1510>
   12138:	b	1213c <__assert_fail@plt+0x14fc>
   1213c:	ldrh	r0, [sp, #8]
   12140:	movw	r1, #65535	; 0xffff
   12144:	add	r0, r0, r1
   12148:	strh	r0, [sp, #8]
   1214c:	b	120f4 <__assert_fail@plt+0x14b4>
   12150:	ldr	r0, [fp, #-4]
   12154:	ldrsh	r1, [sp, #8]
   12158:	add	r1, r1, #1
   1215c:	add	r0, r0, r1
   12160:	mov	sp, fp
   12164:	pop	{fp, pc}
   12168:	push	{fp, lr}
   1216c:	mov	fp, sp
   12170:	sub	sp, sp, #16
   12174:	str	r0, [fp, #-4]
   12178:	str	r1, [sp, #8]
   1217c:	str	r2, [sp, #4]
   12180:	str	r3, [sp]
   12184:	ldr	r0, [sp, #8]
   12188:	ldr	r0, [r0]
   1218c:	bl	120cc <__assert_fail@plt+0x148c>
   12190:	ldr	r1, [pc, #36]	; 121bc <__assert_fail@plt+0x157c>
   12194:	ldr	r1, [pc, r1]
   12198:	str	r0, [r1]
   1219c:	bl	12530 <error@@Base+0x13c>
   121a0:	ldr	r0, [fp, #-4]
   121a4:	ldr	r1, [sp, #8]
   121a8:	ldr	r2, [sp, #4]
   121ac:	ldr	r3, [sp]
   121b0:	bl	121c0 <__assert_fail@plt+0x1580>
   121b4:	mov	sp, fp
   121b8:	pop	{fp, pc}
   121bc:	andeq	r6, r1, r8, asr #30
   121c0:	push	{fp, lr}
   121c4:	mov	fp, sp
   121c8:	sub	sp, sp, #48	; 0x30
   121cc:	str	r0, [fp, #-4]
   121d0:	str	r1, [fp, #-8]
   121d4:	str	r2, [fp, #-12]
   121d8:	str	r3, [fp, #-16]
   121dc:	movw	r0, #0
   121e0:	strh	r0, [fp, #-20]	; 0xffffffec
   121e4:	ldr	r0, [fp, #-4]
   121e8:	ldr	r0, [r0]
   121ec:	cmp	r0, #1
   121f0:	bne	12210 <__assert_fail@plt+0x15d0>
   121f4:	ldr	r0, [pc, #404]	; 12390 <__assert_fail@plt+0x1750>
   121f8:	ldr	r0, [pc, r0]
   121fc:	ldrb	r0, [r0]
   12200:	cmp	r0, #0
   12204:	beq	12210 <__assert_fail@plt+0x15d0>
   12208:	ldr	r0, [fp, #-12]
   1220c:	bl	125c8 <error@@Base+0x1d4>
   12210:	movw	r0, #1
   12214:	strh	r0, [fp, #-18]	; 0xffffffee
   12218:	ldrsh	r0, [fp, #-18]	; 0xffffffee
   1221c:	ldr	r1, [fp, #-4]
   12220:	ldr	r1, [r1]
   12224:	cmp	r0, r1
   12228:	bge	1237c <__assert_fail@plt+0x173c>
   1222c:	ldr	r0, [fp, #-8]
   12230:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12234:	add	r0, r0, r1, lsl #2
   12238:	ldr	r0, [r0]
   1223c:	ldrb	r0, [r0]
   12240:	cmp	r0, #45	; 0x2d
   12244:	bne	12344 <__assert_fail@plt+0x1704>
   12248:	ldr	r0, [fp, #-8]
   1224c:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   12250:	add	r0, r0, r1, lsl #2
   12254:	ldr	r0, [r0]
   12258:	ldrb	r0, [r0, #1]
   1225c:	cmp	r0, #0
   12260:	beq	12344 <__assert_fail@plt+0x1704>
   12264:	ldr	r0, [pc, #296]	; 12394 <__assert_fail@plt+0x1754>
   12268:	add	r0, pc, r0
   1226c:	ldr	r1, [fp, #-8]
   12270:	ldrsh	r2, [fp, #-18]	; 0xffffffee
   12274:	ldr	r2, [r1, r2, lsl #2]!
   12278:	ldr	r1, [r1]
   1227c:	str	r0, [sp, #24]
   12280:	mov	r0, r1
   12284:	str	r2, [sp, #20]
   12288:	bl	10ba4 <strlen@plt>
   1228c:	ldr	r1, [sp, #24]
   12290:	str	r0, [sp, #16]
   12294:	mov	r0, r1
   12298:	ldr	r1, [sp, #20]
   1229c:	ldr	r2, [sp, #16]
   122a0:	bl	10c1c <strncmp@plt>
   122a4:	cmp	r0, #0
   122a8:	bne	122b4 <__assert_fail@plt+0x1674>
   122ac:	ldr	r0, [fp, #-12]
   122b0:	bl	125c8 <error@@Base+0x1d4>
   122b4:	ldr	r0, [fp, #-8]
   122b8:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122bc:	add	r0, r0, r1, lsl #2
   122c0:	ldr	r0, [r0]
   122c4:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122c8:	add	r1, r1, #1
   122cc:	ldr	r2, [fp, #-4]
   122d0:	ldr	r2, [r2]
   122d4:	cmp	r1, r2
   122d8:	str	r0, [sp, #12]
   122dc:	bge	122fc <__assert_fail@plt+0x16bc>
   122e0:	ldr	r0, [fp, #-8]
   122e4:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   122e8:	add	r1, r1, #1
   122ec:	add	r0, r0, r1, lsl #2
   122f0:	ldr	r0, [r0]
   122f4:	str	r0, [sp, #8]
   122f8:	b	12308 <__assert_fail@plt+0x16c8>
   122fc:	movw	r0, #0
   12300:	str	r0, [sp, #8]
   12304:	b	12308 <__assert_fail@plt+0x16c8>
   12308:	ldr	r0, [sp, #8]
   1230c:	ldr	r2, [fp, #-16]
   12310:	ldr	r1, [sp, #12]
   12314:	str	r0, [sp, #4]
   12318:	mov	r0, r1
   1231c:	ldr	r1, [sp, #4]
   12320:	bl	12650 <error@@Base+0x25c>
   12324:	sxtb	r0, r0
   12328:	cmp	r0, #0
   1232c:	beq	12340 <__assert_fail@plt+0x1700>
   12330:	ldrh	r0, [fp, #-18]	; 0xffffffee
   12334:	movw	r1, #1
   12338:	add	r0, r0, r1
   1233c:	strh	r0, [fp, #-18]	; 0xffffffee
   12340:	b	12364 <__assert_fail@plt+0x1724>
   12344:	ldr	r0, [fp, #-8]
   12348:	ldrsh	r1, [fp, #-18]	; 0xffffffee
   1234c:	ldr	r1, [r0, r1, lsl #2]
   12350:	ldrsh	r2, [fp, #-20]	; 0xffffffec
   12354:	add	r3, r2, #1
   12358:	strh	r3, [fp, #-20]	; 0xffffffec
   1235c:	add	r0, r0, r2, lsl #2
   12360:	str	r1, [r0]
   12364:	b	12368 <__assert_fail@plt+0x1728>
   12368:	ldrh	r0, [fp, #-18]	; 0xffffffee
   1236c:	movw	r1, #1
   12370:	add	r0, r0, r1
   12374:	strh	r0, [fp, #-18]	; 0xffffffee
   12378:	b	12218 <__assert_fail@plt+0x15d8>
   1237c:	ldrsh	r0, [fp, #-20]	; 0xffffffec
   12380:	ldr	r1, [fp, #-4]
   12384:	str	r0, [r1]
   12388:	mov	sp, fp
   1238c:	pop	{fp, pc}
   12390:	andeq	r6, r1, r0, lsr #29
   12394:	andeq	r2, r0, ip, lsl ip
   12398:	push	{fp, lr}
   1239c:	mov	fp, sp
   123a0:	movw	r0, #0
   123a4:	bl	123a8 <__assert_fail@plt+0x1768>
   123a8:	push	{fp, lr}
   123ac:	mov	fp, sp
   123b0:	sub	sp, sp, #8
   123b4:	ldr	r1, [pc, #48]	; 123ec <__assert_fail@plt+0x17ac>
   123b8:	ldr	r1, [pc, r1]
   123bc:	str	r0, [sp, #4]
   123c0:	ldr	r0, [r1]
   123c4:	movw	r1, #0
   123c8:	cmp	r0, r1
   123cc:	beq	123e0 <__assert_fail@plt+0x17a0>
   123d0:	ldr	r0, [pc, #24]	; 123f0 <__assert_fail@plt+0x17b0>
   123d4:	ldr	r0, [pc, r0]
   123d8:	ldr	r0, [r0]
   123dc:	blx	r0
   123e0:	bl	128c4 <error@@Base+0x4d0>
   123e4:	ldr	r0, [sp, #4]
   123e8:	bl	10b8c <exit@plt>
   123ec:	andeq	r6, r1, ip, lsr #26
   123f0:	andeq	r6, r1, r0, lsl sp

000123f4 <error@@Base>:
   123f4:	push	{fp, lr}
   123f8:	mov	fp, sp
   123fc:	sub	sp, sp, #8
   12400:	ldr	r1, [pc, #64]	; 12448 <error@@Base+0x54>
   12404:	add	r1, pc, r1
   12408:	ldr	r2, [pc, #60]	; 1244c <error@@Base+0x58>
   1240c:	ldr	r2, [pc, r2]
   12410:	ldr	r3, [pc, #56]	; 12450 <error@@Base+0x5c>
   12414:	ldr	r3, [pc, r3]
   12418:	str	r0, [sp, #4]
   1241c:	ldr	r0, [r3]
   12420:	ldr	r2, [r2]
   12424:	ldr	r3, [sp, #4]
   12428:	bl	10bb0 <fprintf@plt>
   1242c:	ldr	r1, [pc, #16]	; 12444 <error@@Base+0x50>
   12430:	ldr	r1, [pc, r1]
   12434:	ldr	r1, [r1]
   12438:	str	r0, [sp]
   1243c:	mov	r0, r1
   12440:	bl	123a8 <__assert_fail@plt+0x1768>
   12444:	ldrdeq	r6, [r1], -r8
   12448:	andeq	r2, r0, lr, asr #20
   1244c:	ldrdeq	r6, [r1], -r0
   12450:			; <UNDEFINED> instruction: 0x00016cb0
   12454:	push	{fp, lr}
   12458:	mov	fp, sp
   1245c:	sub	sp, sp, #24
   12460:	ldr	r2, [pc, #88]	; 124c0 <error@@Base+0xcc>
   12464:	add	r2, pc, r2
   12468:	ldr	r3, [pc, #84]	; 124c4 <error@@Base+0xd0>
   1246c:	ldr	r3, [pc, r3]
   12470:	ldr	ip, [pc, #80]	; 124c8 <error@@Base+0xd4>
   12474:	ldr	ip, [pc, ip]
   12478:	str	r0, [fp, #-4]
   1247c:	str	r1, [fp, #-8]
   12480:	ldr	r0, [ip]
   12484:	ldr	r1, [r3]
   12488:	ldr	r3, [fp, #-4]
   1248c:	ldr	ip, [fp, #-8]
   12490:	str	r1, [sp, #12]
   12494:	mov	r1, r2
   12498:	ldr	r2, [sp, #12]
   1249c:	str	ip, [sp]
   124a0:	bl	10bb0 <fprintf@plt>
   124a4:	ldr	r1, [pc, #16]	; 124bc <error@@Base+0xc8>
   124a8:	ldr	r1, [pc, r1]
   124ac:	ldr	r1, [r1]
   124b0:	str	r0, [sp, #8]
   124b4:	mov	r0, r1
   124b8:	bl	123a8 <__assert_fail@plt+0x1768>
   124bc:	andeq	r6, r1, r0, ror #24
   124c0:	strdeq	r2, [r0], -r6
   124c4:	andeq	r6, r1, r0, ror ip
   124c8:	andeq	r6, r1, r0, asr ip
   124cc:	push	{fp, lr}
   124d0:	mov	fp, sp
   124d4:	sub	sp, sp, #16
   124d8:	ldr	r2, [pc, #68]	; 12524 <error@@Base+0x130>
   124dc:	add	r2, pc, r2
   124e0:	ldr	r3, [pc, #64]	; 12528 <error@@Base+0x134>
   124e4:	ldr	r3, [pc, r3]
   124e8:	ldr	ip, [pc, #60]	; 1252c <error@@Base+0x138>
   124ec:	ldr	ip, [pc, ip]
   124f0:	str	r0, [fp, #-4]
   124f4:	str	r1, [sp, #8]
   124f8:	ldr	r0, [ip]
   124fc:	ldr	r1, [r3]
   12500:	ldr	r3, [fp, #-4]
   12504:	ldr	ip, [sp, #8]
   12508:	str	r1, [sp, #4]
   1250c:	mov	r1, r2
   12510:	ldr	r2, [sp, #4]
   12514:	str	ip, [sp]
   12518:	bl	10bb0 <fprintf@plt>
   1251c:	mov	sp, fp
   12520:	pop	{fp, pc}
   12524:	andeq	r2, r0, lr, ror r9
   12528:	strdeq	r6, [r1], -r8
   1252c:	ldrdeq	r6, [r1], -r8
   12530:	push	{fp, lr}
   12534:	mov	fp, sp
   12538:	sub	sp, sp, #8
   1253c:	ldr	r0, [pc, #44]	; 12570 <error@@Base+0x17c>
   12540:	add	r1, pc, r0
   12544:	movw	r0, #2
   12548:	bl	10b74 <__sysv_signal@plt>
   1254c:	ldr	r1, [pc, #24]	; 1256c <error@@Base+0x178>
   12550:	add	r1, pc, r1
   12554:	movw	r2, #15
   12558:	str	r0, [sp, #4]
   1255c:	mov	r0, r2
   12560:	bl	10b74 <__sysv_signal@plt>
   12564:	mov	sp, fp
   12568:	pop	{fp, pc}
   1256c:	andeq	r0, r0, ip, lsl r0
   12570:	andeq	r0, r0, ip, lsr #32
   12574:	push	{fp, lr}
   12578:	mov	fp, sp
   1257c:	sub	sp, sp, #8
   12580:	ldr	r1, [pc, #52]	; 125bc <error@@Base+0x1c8>
   12584:	add	r1, pc, r1
   12588:	str	r0, [sp, #4]
   1258c:	ldrsb	r0, [r1]
   12590:	cmp	r0, #0
   12594:	beq	125a0 <error@@Base+0x1ac>
   12598:	mov	sp, fp
   1259c:	pop	{fp, pc}
   125a0:	ldr	r0, [pc, #24]	; 125c0 <error@@Base+0x1cc>
   125a4:	add	r0, pc, r0
   125a8:	ldr	r1, [pc, #20]	; 125c4 <error@@Base+0x1d0>
   125ac:	add	r1, pc, r1
   125b0:	movw	r2, #1
   125b4:	strb	r2, [r1]
   125b8:	bl	123f4 <error@@Base>
   125bc:	ldrdeq	r6, [r1], -r2
   125c0:	ldrdeq	r2, [r0], -r1
   125c4:	andeq	r6, r1, sl, lsr #23
   125c8:	push	{fp, lr}
   125cc:	mov	fp, sp
   125d0:	sub	sp, sp, #8
   125d4:	ldr	r1, [pc, #96]	; 1263c <error@@Base+0x248>
   125d8:	ldr	r1, [pc, r1]
   125dc:	str	r0, [sp, #4]
   125e0:	ldr	r0, [r1]
   125e4:	movw	r1, #0
   125e8:	cmp	r0, r1
   125ec:	beq	12604 <error@@Base+0x210>
   125f0:	ldr	r0, [pc, #84]	; 1264c <error@@Base+0x258>
   125f4:	ldr	r0, [pc, r0]
   125f8:	ldr	r0, [r0]
   125fc:	blx	r0
   12600:	b	12638 <error@@Base+0x244>
   12604:	ldr	r0, [pc, #52]	; 12640 <error@@Base+0x24c>
   12608:	add	r1, pc, r0
   1260c:	ldr	r0, [pc, #48]	; 12644 <error@@Base+0x250>
   12610:	ldr	r0, [pc, r0]
   12614:	ldr	r2, [pc, #44]	; 12648 <error@@Base+0x254>
   12618:	ldr	r2, [pc, r2]
   1261c:	ldr	r2, [r2]
   12620:	ldr	r0, [r0]
   12624:	ldr	r3, [sp, #4]
   12628:	str	r0, [sp]
   1262c:	mov	r0, r2
   12630:	ldr	r2, [sp]
   12634:	bl	10bb0 <fprintf@plt>
   12638:	bl	12398 <__assert_fail@plt+0x1758>
   1263c:	ldrdeq	r6, [r1], -r4
   12640:	andeq	r2, r0, r2, lsl #17
   12644:	andeq	r6, r1, ip, asr #21
   12648:	andeq	r6, r1, ip, lsr #21
   1264c:			; <UNDEFINED> instruction: 0x00016ab8
   12650:	push	{fp, lr}
   12654:	mov	fp, sp
   12658:	sub	sp, sp, #32
   1265c:	str	r0, [fp, #-8]
   12660:	str	r1, [fp, #-12]
   12664:	str	r2, [sp, #16]
   12668:	ldr	r0, [sp, #16]
   1266c:	movw	r1, #0
   12670:	cmp	r0, r1
   12674:	bne	1267c <error@@Base+0x288>
   12678:	b	12890 <error@@Base+0x49c>
   1267c:	movw	r0, #0
   12680:	strh	r0, [sp, #14]
   12684:	ldr	r0, [sp, #16]
   12688:	ldrsh	r1, [sp, #14]
   1268c:	movw	r2, #12
   12690:	mul	r1, r1, r2
   12694:	add	r0, r0, r1
   12698:	ldrb	r0, [r0]
   1269c:	cmp	r0, #0
   126a0:	movw	r0, #0
   126a4:	str	r0, [sp, #8]
   126a8:	beq	126dc <error@@Base+0x2e8>
   126ac:	ldr	r0, [fp, #-8]
   126b0:	ldrb	r0, [r0, #1]
   126b4:	ldr	r1, [sp, #16]
   126b8:	ldrsh	r2, [sp, #14]
   126bc:	movw	r3, #12
   126c0:	mul	r2, r2, r3
   126c4:	add	r1, r1, r2
   126c8:	ldrb	r1, [r1]
   126cc:	cmp	r0, r1
   126d0:	movw	r0, #0
   126d4:	movne	r0, #1
   126d8:	str	r0, [sp, #8]
   126dc:	ldr	r0, [sp, #8]
   126e0:	tst	r0, #1
   126e4:	beq	12700 <error@@Base+0x30c>
   126e8:	b	126ec <error@@Base+0x2f8>
   126ec:	ldrh	r0, [sp, #14]
   126f0:	movw	r1, #1
   126f4:	add	r0, r0, r1
   126f8:	strh	r0, [sp, #14]
   126fc:	b	12684 <error@@Base+0x290>
   12700:	ldr	r0, [sp, #16]
   12704:	ldrsh	r1, [sp, #14]
   12708:	movw	r2, #12
   1270c:	mul	r1, r1, r2
   12710:	add	r0, r0, r1
   12714:	ldrsb	r0, [r0]
   12718:	cmp	r0, #0
   1271c:	bne	12724 <error@@Base+0x330>
   12720:	b	12890 <error@@Base+0x49c>
   12724:	ldr	r0, [sp, #16]
   12728:	ldrsh	r1, [sp, #14]
   1272c:	movw	r2, #12
   12730:	mul	r1, r1, r2
   12734:	add	r0, r0, r1
   12738:	ldr	r0, [r0, #4]
   1273c:	movw	r1, #0
   12740:	cmp	r0, r1
   12744:	beq	12804 <error@@Base+0x410>
   12748:	ldr	r0, [fp, #-8]
   1274c:	ldrb	r0, [r0, #2]
   12750:	cmp	r0, #0
   12754:	bne	12768 <error@@Base+0x374>
   12758:	ldr	r0, [fp, #-12]
   1275c:	movw	r1, #0
   12760:	cmp	r0, r1
   12764:	beq	12804 <error@@Base+0x410>
   12768:	ldr	r0, [sp, #16]
   1276c:	ldrsh	r1, [sp, #14]
   12770:	movw	r2, #12
   12774:	mul	r1, r1, r2
   12778:	add	r0, r0, r1
   1277c:	ldr	r0, [r0, #4]
   12780:	ldr	r0, [r0]
   12784:	movw	r1, #0
   12788:	cmp	r0, r1
   1278c:	beq	12794 <error@@Base+0x3a0>
   12790:	b	128a0 <error@@Base+0x4ac>
   12794:	ldr	r0, [fp, #-8]
   12798:	ldrb	r0, [r0, #2]
   1279c:	cmp	r0, #0
   127a0:	beq	127b4 <error@@Base+0x3c0>
   127a4:	ldr	r0, [fp, #-8]
   127a8:	add	r0, r0, #2
   127ac:	str	r0, [sp, #4]
   127b0:	b	127bc <error@@Base+0x3c8>
   127b4:	ldr	r0, [fp, #-12]
   127b8:	str	r0, [sp, #4]
   127bc:	ldr	r0, [sp, #4]
   127c0:	ldr	r1, [sp, #16]
   127c4:	ldrsh	r2, [sp, #14]
   127c8:	movw	r3, #12
   127cc:	mul	r2, r2, r3
   127d0:	add	r1, r1, r2
   127d4:	ldr	r1, [r1, #4]
   127d8:	str	r0, [r1]
   127dc:	ldr	r0, [fp, #-8]
   127e0:	ldrb	r0, [r0, #2]
   127e4:	cmp	r0, #0
   127e8:	movw	r0, #0
   127ec:	movne	r0, #1
   127f0:	tst	r0, #1
   127f4:	movw	r0, #0
   127f8:	moveq	r0, #1
   127fc:	strb	r0, [fp, #-1]
   12800:	b	128b0 <error@@Base+0x4bc>
   12804:	ldr	r0, [sp, #16]
   12808:	ldrsh	r1, [sp, #14]
   1280c:	movw	r2, #12
   12810:	mul	r1, r1, r2
   12814:	add	r0, r0, r1
   12818:	ldr	r0, [r0, #8]
   1281c:	movw	r1, #0
   12820:	cmp	r0, r1
   12824:	beq	1288c <error@@Base+0x498>
   12828:	ldr	r0, [fp, #-8]
   1282c:	ldrsb	r0, [r0, #2]
   12830:	cmp	r0, #0
   12834:	bne	1288c <error@@Base+0x498>
   12838:	ldr	r0, [sp, #16]
   1283c:	ldrsh	r1, [sp, #14]
   12840:	movw	r2, #12
   12844:	mul	r1, r1, r2
   12848:	add	r0, r0, r1
   1284c:	ldr	r0, [r0, #8]
   12850:	ldrsb	r0, [r0]
   12854:	cmp	r0, #0
   12858:	beq	12860 <error@@Base+0x46c>
   1285c:	b	128a0 <error@@Base+0x4ac>
   12860:	ldr	r0, [sp, #16]
   12864:	ldrsh	r1, [sp, #14]
   12868:	movw	r2, #12
   1286c:	mul	r1, r1, r2
   12870:	add	r0, r0, r1
   12874:	ldr	r0, [r0, #8]
   12878:	movw	r1, #1
   1287c:	strb	r1, [r0]
   12880:	movw	r0, #0
   12884:	strb	r0, [fp, #-1]
   12888:	b	128b0 <error@@Base+0x4bc>
   1288c:	b	12890 <error@@Base+0x49c>
   12890:	ldr	r0, [pc, #36]	; 128bc <error@@Base+0x4c8>
   12894:	add	r0, pc, r0
   12898:	ldr	r1, [fp, #-8]
   1289c:	bl	12454 <error@@Base+0x60>
   128a0:	ldr	r0, [pc, #24]	; 128c0 <error@@Base+0x4cc>
   128a4:	add	r0, pc, r0
   128a8:	ldr	r1, [fp, #-8]
   128ac:	bl	12454 <error@@Base+0x60>
   128b0:	ldrb	r0, [fp, #-1]
   128b4:	mov	sp, fp
   128b8:	pop	{fp, pc}
   128bc:	andeq	r2, r0, r5, lsl #12
   128c0:	andeq	r2, r0, r4, lsl #12
   128c4:	push	{fp, lr}
   128c8:	mov	fp, sp
   128cc:	sub	sp, sp, #16
   128d0:	movw	r0, #1
   128d4:	strh	r0, [fp, #-2]
   128d8:	ldr	r0, [pc, #88]	; 12938 <error@@Base+0x544>
   128dc:	add	r0, pc, r0
   128e0:	ldrsh	r1, [fp, #-2]
   128e4:	ldrsh	r0, [r0]
   128e8:	cmp	r1, r0
   128ec:	bgt	12930 <error@@Base+0x53c>
   128f0:	ldrsh	r0, [fp, #-2]
   128f4:	bl	12040 <__assert_fail@plt+0x1400>
   128f8:	ldr	r1, [pc, #60]	; 1293c <error@@Base+0x548>
   128fc:	ldr	r1, [pc, r1]
   12900:	str	r0, [sp, #8]
   12904:	ldr	r0, [sp, #8]
   12908:	blx	r1
   1290c:	ldr	r1, [sp, #8]
   12910:	str	r0, [sp, #4]
   12914:	mov	r0, r1
   12918:	bl	10ae4 <free@plt>
   1291c:	ldrh	r0, [fp, #-2]
   12920:	movw	r1, #1
   12924:	add	r0, r0, r1
   12928:	strh	r0, [fp, #-2]
   1292c:	b	128d8 <error@@Base+0x4e4>
   12930:	mov	sp, fp
   12934:	pop	{fp, pc}
   12938:	andeq	r6, r1, r8, ror r8
   1293c:			; <UNDEFINED> instruction: 0x000167b8
   12940:	sub	sp, sp, #12
   12944:	str	r0, [sp, #8]
   12948:	str	r1, [sp, #4]
   1294c:	str	r2, [sp]
   12950:	ldr	r0, [sp, #4]
   12954:	ldr	r1, [sp, #8]
   12958:	ldr	r2, [r1]
   1295c:	add	r0, r2, r0
   12960:	str	r0, [r1]
   12964:	ldr	r0, [sp]
   12968:	ldr	r1, [sp, #8]
   1296c:	ldr	r2, [r1, #4]
   12970:	add	r0, r2, r0
   12974:	str	r0, [r1, #4]
   12978:	add	sp, sp, #12
   1297c:	bx	lr
   12980:	push	{fp, lr}
   12984:	mov	fp, sp
   12988:	sub	sp, sp, #32
   1298c:	ldr	ip, [pc, #160]	; 12a34 <error@@Base+0x640>
   12990:	ldr	ip, [pc, ip]
   12994:	str	r0, [fp, #-4]
   12998:	str	r1, [fp, #-8]
   1299c:	str	r2, [fp, #-12]
   129a0:	str	r3, [sp, #16]
   129a4:	ldr	r0, [fp, #-4]
   129a8:	ldr	r1, [fp, #-8]
   129ac:	blx	ip
   129b0:	str	r0, [sp, #12]
   129b4:	ldr	r0, [sp, #12]
   129b8:	movw	r1, #0
   129bc:	cmp	r0, r1
   129c0:	bne	12a18 <error@@Base+0x624>
   129c4:	ldr	r0, [pc, #112]	; 12a3c <error@@Base+0x648>
   129c8:	ldr	r0, [pc, r0]
   129cc:	movw	r1, #1
   129d0:	str	r0, [sp, #8]
   129d4:	mov	r0, r1
   129d8:	movw	r1, #20
   129dc:	ldr	r2, [sp, #8]
   129e0:	blx	r2
   129e4:	str	r0, [sp, #12]
   129e8:	ldr	r0, [fp, #-8]
   129ec:	bl	10b14 <strdup@plt>
   129f0:	ldr	r1, [pc, #64]	; 12a38 <error@@Base+0x644>
   129f4:	ldr	r1, [pc, r1]
   129f8:	ldr	r2, [sp, #12]
   129fc:	str	r0, [r2, #8]
   12a00:	ldr	r0, [fp, #-4]
   12a04:	ldr	r2, [sp, #12]
   12a08:	str	r1, [sp, #4]
   12a0c:	mov	r1, r2
   12a10:	ldr	r2, [sp, #4]
   12a14:	blx	r2
   12a18:	ldr	r0, [sp, #12]
   12a1c:	add	r0, r0, #12
   12a20:	ldr	r1, [fp, #-12]
   12a24:	ldr	r2, [sp, #16]
   12a28:	bl	12940 <error@@Base+0x54c>
   12a2c:	mov	sp, fp
   12a30:	pop	{fp, pc}
   12a34:	andeq	r6, r1, r4, asr #14
   12a38:			; <UNDEFINED> instruction: 0x000166b4
   12a3c:	andeq	r6, r1, r4, asr #14
   12a40:	push	{fp, lr}
   12a44:	mov	fp, sp
   12a48:	sub	sp, sp, #40	; 0x28
   12a4c:	ldr	r2, [pc, #504]	; 12c4c <error@@Base+0x858>
   12a50:	add	r2, pc, r2
   12a54:	ldr	r3, [pc, #500]	; 12c50 <error@@Base+0x85c>
   12a58:	ldr	r3, [pc, r3]
   12a5c:	str	r0, [fp, #-4]
   12a60:	str	r1, [fp, #-8]
   12a64:	ldr	r0, [fp, #-8]
   12a68:	mov	r1, r2
   12a6c:	blx	r3
   12a70:	str	r0, [fp, #-12]
   12a74:	ldr	r0, [fp, #-12]
   12a78:	bl	12c74 <error@@Base+0x880>
   12a7c:	and	r0, r0, #255	; 0xff
   12a80:	cmp	r0, #0
   12a84:	beq	12bd8 <error@@Base+0x7e4>
   12a88:	ldr	r0, [pc, #452]	; 12c54 <error@@Base+0x860>
   12a8c:	add	r0, pc, r0
   12a90:	ldr	r1, [pc, #448]	; 12c58 <error@@Base+0x864>
   12a94:	add	r1, pc, r1
   12a98:	movw	r2, #45	; 0x2d
   12a9c:	bl	10c1c <strncmp@plt>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12bd8 <error@@Base+0x7e4>
   12aa8:	ldr	r0, [fp, #-12]
   12aac:	bl	12c74 <error@@Base+0x880>
   12ab0:	and	r0, r0, #255	; 0xff
   12ab4:	cmp	r0, #0
   12ab8:	beq	12bd8 <error@@Base+0x7e4>
   12abc:	ldr	r0, [pc, #424]	; 12c6c <error@@Base+0x878>
   12ac0:	add	r0, pc, r0
   12ac4:	ldr	r1, [pc, #420]	; 12c70 <error@@Base+0x87c>
   12ac8:	add	r1, pc, r1
   12acc:	bl	10ac0 <strcmp@plt>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12bd8 <error@@Base+0x7e4>
   12ad8:	ldr	r0, [fp, #-12]
   12adc:	sub	r1, fp, #16
   12ae0:	bl	12cc8 <error@@Base+0x8d4>
   12ae4:	and	r0, r0, #255	; 0xff
   12ae8:	cmp	r0, #0
   12aec:	beq	12bd8 <error@@Base+0x7e4>
   12af0:	ldr	r0, [fp, #-12]
   12af4:	add	r1, sp, #20
   12af8:	bl	12cc8 <error@@Base+0x8d4>
   12afc:	and	r0, r0, #255	; 0xff
   12b00:	cmp	r0, #0
   12b04:	beq	12bd8 <error@@Base+0x7e4>
   12b08:	ldr	r0, [fp, #-12]
   12b0c:	bl	12c74 <error@@Base+0x880>
   12b10:	and	r0, r0, #255	; 0xff
   12b14:	cmp	r0, #0
   12b18:	beq	12bd8 <error@@Base+0x7e4>
   12b1c:	ldr	r0, [fp, #-12]
   12b20:	bl	12c74 <error@@Base+0x880>
   12b24:	and	r0, r0, #255	; 0xff
   12b28:	cmp	r0, #0
   12b2c:	beq	12bd8 <error@@Base+0x7e4>
   12b30:	ldr	r0, [fp, #-4]
   12b34:	ldr	r1, [fp, #-16]
   12b38:	ldr	r2, [sp, #20]
   12b3c:	bl	12940 <error@@Base+0x54c>
   12b40:	ldr	r0, [fp, #-12]
   12b44:	ldr	r1, [fp, #-4]
   12b48:	add	r1, r1, #8
   12b4c:	bl	12d44 <error@@Base+0x950>
   12b50:	str	r0, [sp, #16]
   12b54:	ldr	r0, [fp, #-12]
   12b58:	ldr	r1, [fp, #-4]
   12b5c:	add	r1, r1, #416	; 0x1a0
   12b60:	bl	12d44 <error@@Base+0x950>
   12b64:	str	r0, [sp, #12]
   12b68:	ldr	r0, [fp, #-12]
   12b6c:	ldr	r1, [fp, #-4]
   12b70:	add	r1, r1, #824	; 0x338
   12b74:	bl	12d44 <error@@Base+0x950>
   12b78:	ldr	r1, [fp, #-16]
   12b7c:	cmp	r1, #0
   12b80:	ble	12bd4 <error@@Base+0x7e0>
   12b84:	ldr	r0, [fp, #-12]
   12b88:	ldr	r1, [fp, #-4]
   12b8c:	add	r1, r1, #920	; 0x398
   12b90:	bl	12d44 <error@@Base+0x950>
   12b94:	ldr	r1, [sp, #16]
   12b98:	cmp	r1, #0
   12b9c:	ble	12bb0 <error@@Base+0x7bc>
   12ba0:	ldr	r0, [fp, #-12]
   12ba4:	ldr	r1, [fp, #-4]
   12ba8:	add	r1, r1, #992	; 0x3e0
   12bac:	bl	12e38 <error@@Base+0xa44>
   12bb0:	ldr	r0, [sp, #12]
   12bb4:	cmp	r0, #0
   12bb8:	ble	12bd0 <error@@Base+0x7dc>
   12bbc:	ldr	r0, [fp, #-12]
   12bc0:	ldr	r1, [fp, #-4]
   12bc4:	movw	r2, #9048	; 0x2358
   12bc8:	add	r1, r1, r2
   12bcc:	bl	12e38 <error@@Base+0xa44>
   12bd0:	b	12bd4 <error@@Base+0x7e0>
   12bd4:	b	12c28 <error@@Base+0x834>
   12bd8:	ldr	r0, [fp, #-8]
   12bdc:	movw	r1, #0
   12be0:	cmp	r0, r1
   12be4:	beq	12bf4 <error@@Base+0x800>
   12be8:	ldr	r0, [fp, #-8]
   12bec:	str	r0, [sp, #8]
   12bf0:	b	12c04 <error@@Base+0x810>
   12bf4:	ldr	r0, [pc, #96]	; 12c5c <error@@Base+0x868>
   12bf8:	add	r0, pc, r0
   12bfc:	str	r0, [sp, #8]
   12c00:	b	12c04 <error@@Base+0x810>
   12c04:	ldr	r0, [sp, #8]
   12c08:	ldr	r1, [pc, #80]	; 12c60 <error@@Base+0x86c>
   12c0c:	add	r1, pc, r1
   12c10:	ldr	r2, [pc, #76]	; 12c64 <error@@Base+0x870>
   12c14:	ldr	r2, [pc, r2]
   12c18:	str	r0, [sp, #4]
   12c1c:	mov	r0, r1
   12c20:	ldr	r1, [sp, #4]
   12c24:	blx	r2
   12c28:	ldr	r0, [pc, #56]	; 12c68 <error@@Base+0x874>
   12c2c:	ldr	r0, [pc, r0]
   12c30:	ldr	r1, [fp, #-12]
   12c34:	str	r0, [sp]
   12c38:	mov	r0, r1
   12c3c:	ldr	r1, [sp]
   12c40:	blx	r1
   12c44:	mov	sp, fp
   12c48:	pop	{fp, pc}
   12c4c:	andeq	r5, r0, r5, lsr sl
   12c50:	andeq	r6, r1, r8, asr r6
   12c54:	andeq	r6, r1, fp, asr #13
   12c58:	andeq	r2, r0, r5, lsr #8
   12c5c:	andeq	r2, r0, r3, lsl #6
   12c60:	ldrdeq	r2, [r0], -sp
   12c64:	andeq	r6, r1, r4, lsl #10
   12c68:	andeq	r6, r1, r0, ror #8
   12c6c:	muleq	r1, r7, r6
   12c70:	andeq	r5, r0, r7, ror r9
   12c74:	push	{fp, lr}
   12c78:	mov	fp, sp
   12c7c:	sub	sp, sp, #8
   12c80:	ldr	r1, [pc, #60]	; 12cc4 <error@@Base+0x8d0>
   12c84:	add	r1, pc, r1
   12c88:	str	r0, [sp, #4]
   12c8c:	ldr	r2, [sp, #4]
   12c90:	mov	r0, r1
   12c94:	movw	r1, #99	; 0x63
   12c98:	bl	10afc <fgets@plt>
   12c9c:	movw	r1, #0
   12ca0:	cmp	r0, r1
   12ca4:	movw	r0, #0
   12ca8:	movne	r0, #1
   12cac:	tst	r0, #1
   12cb0:	movw	r0, #1
   12cb4:	moveq	r0, #0
   12cb8:	and	r0, r0, #255	; 0xff
   12cbc:	mov	sp, fp
   12cc0:	pop	{fp, pc}
   12cc4:	ldrdeq	r6, [r1], -r3
   12cc8:	push	{fp, lr}
   12ccc:	mov	fp, sp
   12cd0:	sub	sp, sp, #16
   12cd4:	str	r0, [fp, #-4]
   12cd8:	str	r1, [sp, #8]
   12cdc:	ldr	r0, [fp, #-4]
   12ce0:	bl	12c74 <error@@Base+0x880>
   12ce4:	and	r0, r0, #255	; 0xff
   12ce8:	cmp	r0, #0
   12cec:	movw	r0, #0
   12cf0:	str	r0, [sp, #4]
   12cf4:	beq	12d20 <error@@Base+0x92c>
   12cf8:	ldr	r0, [pc, #60]	; 12d3c <error@@Base+0x948>
   12cfc:	add	r0, pc, r0
   12d00:	ldr	r1, [pc, #56]	; 12d40 <error@@Base+0x94c>
   12d04:	add	r1, pc, r1
   12d08:	ldr	r2, [sp, #8]
   12d0c:	bl	10bbc <__isoc99_sscanf@plt>
   12d10:	cmp	r0, #1
   12d14:	movw	r0, #0
   12d18:	moveq	r0, #1
   12d1c:	str	r0, [sp, #4]
   12d20:	ldr	r0, [sp, #4]
   12d24:	tst	r0, #1
   12d28:	movw	r0, #1
   12d2c:	moveq	r0, #0
   12d30:	and	r0, r0, #255	; 0xff
   12d34:	mov	sp, fp
   12d38:	pop	{fp, pc}
   12d3c:	andeq	r6, r1, fp, asr r4
   12d40:	andeq	r2, r0, r2, ror #4
   12d44:	push	{fp, lr}
   12d48:	mov	fp, sp
   12d4c:	sub	sp, sp, #24
   12d50:	str	r0, [fp, #-4]
   12d54:	str	r1, [fp, #-8]
   12d58:	movw	r0, #0
   12d5c:	str	r0, [sp]
   12d60:	ldr	r0, [fp, #-4]
   12d64:	bl	12c74 <error@@Base+0x880>
   12d68:	and	r0, r0, #255	; 0xff
   12d6c:	cmp	r0, #0
   12d70:	beq	12e20 <error@@Base+0xa2c>
   12d74:	ldr	r0, [fp, #-4]
   12d78:	bl	12c74 <error@@Base+0x880>
   12d7c:	and	r0, r0, #255	; 0xff
   12d80:	cmp	r0, #0
   12d84:	beq	12e20 <error@@Base+0xa2c>
   12d88:	b	12d8c <error@@Base+0x998>
   12d8c:	ldr	r0, [fp, #-4]
   12d90:	add	r1, sp, #12
   12d94:	add	r2, sp, #8
   12d98:	bl	134d0 <error@@Base+0x10dc>
   12d9c:	sxtb	r0, r0
   12da0:	cmp	r0, #0
   12da4:	beq	12e1c <error@@Base+0xa28>
   12da8:	ldr	r0, [pc, #124]	; 12e2c <error@@Base+0xa38>
   12dac:	add	r0, pc, r0
   12db0:	add	r0, r0, #29
   12db4:	bl	10bf8 <atoi@plt>
   12db8:	str	r0, [sp, #4]
   12dbc:	ldr	r0, [sp, #4]
   12dc0:	cmp	r0, #0
   12dc4:	bne	12e00 <error@@Base+0xa0c>
   12dc8:	ldr	r0, [pc, #96]	; 12e30 <error@@Base+0xa3c>
   12dcc:	add	r0, pc, r0
   12dd0:	add	r0, r0, #29
   12dd4:	ldr	r1, [pc, #88]	; 12e34 <error@@Base+0xa40>
   12dd8:	add	r1, pc, r1
   12ddc:	bl	10ac0 <strcmp@plt>
   12de0:	cmp	r0, #0
   12de4:	bne	12df4 <error@@Base+0xa00>
   12de8:	ldr	r0, [sp, #12]
   12dec:	str	r0, [sp]
   12df0:	b	12dfc <error@@Base+0xa08>
   12df4:	movw	r0, #11
   12df8:	str	r0, [sp, #4]
   12dfc:	b	12e00 <error@@Base+0xa0c>
   12e00:	ldr	r0, [fp, #-8]
   12e04:	ldr	r1, [sp, #4]
   12e08:	add	r0, r0, r1, lsl #3
   12e0c:	ldr	r1, [sp, #12]
   12e10:	ldr	r2, [sp, #8]
   12e14:	bl	12940 <error@@Base+0x54c>
   12e18:	b	12d8c <error@@Base+0x998>
   12e1c:	b	12e20 <error@@Base+0xa2c>
   12e20:	ldr	r0, [sp]
   12e24:	mov	sp, fp
   12e28:	pop	{fp, pc}
   12e2c:	andeq	r6, r1, fp, lsr #7
   12e30:	andeq	r6, r1, fp, lsl #7
   12e34:	andeq	r1, r0, pc, ror #31
   12e38:	push	{fp, lr}
   12e3c:	mov	fp, sp
   12e40:	sub	sp, sp, #24
   12e44:	str	r0, [fp, #-4]
   12e48:	str	r1, [fp, #-8]
   12e4c:	ldr	r0, [fp, #-4]
   12e50:	bl	12c74 <error@@Base+0x880>
   12e54:	and	r0, r0, #255	; 0xff
   12e58:	cmp	r0, #0
   12e5c:	beq	12ee8 <error@@Base+0xaf4>
   12e60:	ldr	r0, [fp, #-4]
   12e64:	bl	12c74 <error@@Base+0x880>
   12e68:	and	r0, r0, #255	; 0xff
   12e6c:	cmp	r0, #0
   12e70:	beq	12ee8 <error@@Base+0xaf4>
   12e74:	b	12e78 <error@@Base+0xa84>
   12e78:	ldr	r0, [fp, #-4]
   12e7c:	add	r1, sp, #12
   12e80:	add	r2, sp, #8
   12e84:	bl	134d0 <error@@Base+0x10dc>
   12e88:	sxtb	r0, r0
   12e8c:	cmp	r0, #0
   12e90:	beq	12ee4 <error@@Base+0xaf0>
   12e94:	ldr	r0, [pc, #84]	; 12ef0 <error@@Base+0xafc>
   12e98:	add	r0, pc, r0
   12e9c:	add	r1, r0, #29
   12ea0:	ldr	r2, [pc, #76]	; 12ef4 <error@@Base+0xb00>
   12ea4:	add	r2, pc, r2
   12ea8:	str	r0, [sp, #4]
   12eac:	mov	r0, r2
   12eb0:	str	r1, [sp]
   12eb4:	bl	10ba4 <strlen@plt>
   12eb8:	sub	r0, r0, #1
   12ebc:	ldr	r1, [sp, #4]
   12ec0:	add	r0, r1, r0
   12ec4:	movw	r2, #0
   12ec8:	strb	r2, [r0]
   12ecc:	ldr	r0, [fp, #-8]
   12ed0:	ldr	r2, [sp, #12]
   12ed4:	ldr	r3, [sp, #8]
   12ed8:	ldr	r1, [sp]
   12edc:	bl	12980 <error@@Base+0x58c>
   12ee0:	b	12e78 <error@@Base+0xa84>
   12ee4:	b	12ee8 <error@@Base+0xaf4>
   12ee8:	mov	sp, fp
   12eec:	pop	{fp, pc}
   12ef0:			; <UNDEFINED> instruction: 0x000162bf
   12ef4:			; <UNDEFINED> instruction: 0x000162b3
   12ef8:	push	{fp, lr}
   12efc:	mov	fp, sp
   12f00:	sub	sp, sp, #40	; 0x28
   12f04:	ldr	r2, [pc, #532]	; 13120 <error@@Base+0xd2c>
   12f08:	add	r2, pc, r2
   12f0c:	ldr	r3, [pc, #528]	; 13124 <error@@Base+0xd30>
   12f10:	ldr	r3, [pc, r3]
   12f14:	str	r0, [fp, #-4]
   12f18:	str	r1, [fp, #-8]
   12f1c:	ldr	r0, [fp, #-8]
   12f20:	mov	r1, r2
   12f24:	blx	r3
   12f28:	ldr	r1, [pc, #484]	; 13114 <error@@Base+0xd20>
   12f2c:	add	r1, pc, r1
   12f30:	ldr	r2, [pc, #480]	; 13118 <error@@Base+0xd24>
   12f34:	add	r2, pc, r2
   12f38:	ldr	r3, [pc, #476]	; 1311c <error@@Base+0xd28>
   12f3c:	add	r3, pc, r3
   12f40:	str	r0, [fp, #-12]
   12f44:	ldr	r0, [fp, #-12]
   12f48:	bl	10bb0 <fprintf@plt>
   12f4c:	ldr	r1, [pc, #444]	; 13110 <error@@Base+0xd1c>
   12f50:	add	r1, pc, r1
   12f54:	ldr	r2, [fp, #-12]
   12f58:	ldr	r3, [fp, #-4]
   12f5c:	ldr	r3, [r3]
   12f60:	str	r0, [fp, #-16]
   12f64:	mov	r0, r2
   12f68:	mov	r2, r3
   12f6c:	bl	10bb0 <fprintf@plt>
   12f70:	ldr	r1, [pc, #404]	; 1310c <error@@Base+0xd18>
   12f74:	add	r1, pc, r1
   12f78:	ldr	r2, [fp, #-12]
   12f7c:	ldr	r3, [fp, #-4]
   12f80:	ldr	r3, [r3, #4]
   12f84:	str	r0, [sp, #20]
   12f88:	mov	r0, r2
   12f8c:	mov	r2, r3
   12f90:	bl	10bb0 <fprintf@plt>
   12f94:	ldr	r1, [fp, #-12]
   12f98:	ldr	r2, [fp, #-4]
   12f9c:	str	r0, [sp, #16]
   12fa0:	mov	r0, r1
   12fa4:	mov	r1, r2
   12fa8:	bl	13138 <error@@Base+0xd44>
   12fac:	ldr	r0, [pc, #340]	; 13108 <error@@Base+0xd14>
   12fb0:	add	r0, pc, r0
   12fb4:	ldr	r1, [fp, #-12]
   12fb8:	bl	10c10 <fputs@plt>
   12fbc:	ldr	r1, [pc, #320]	; 13104 <error@@Base+0xd10>
   12fc0:	add	r3, pc, r1
   12fc4:	ldr	r1, [fp, #-12]
   12fc8:	ldr	r2, [fp, #-4]
   12fcc:	add	r2, r2, #8
   12fd0:	str	r0, [sp, #12]
   12fd4:	mov	r0, r1
   12fd8:	mov	r1, r2
   12fdc:	movw	r2, #50	; 0x32
   12fe0:	movw	ip, #0
   12fe4:	str	ip, [sp]
   12fe8:	movw	ip, #1
   12fec:	str	ip, [sp, #4]
   12ff0:	bl	131d8 <error@@Base+0xde4>
   12ff4:	ldr	r0, [pc, #260]	; 13100 <error@@Base+0xd0c>
   12ff8:	add	r3, pc, r0
   12ffc:	ldr	r0, [fp, #-12]
   13000:	ldr	r1, [fp, #-4]
   13004:	add	r1, r1, #416	; 0x1a0
   13008:	movw	r2, #50	; 0x32
   1300c:	movw	ip, #0
   13010:	str	ip, [sp]
   13014:	movw	ip, #1
   13018:	str	ip, [sp, #4]
   1301c:	bl	131d8 <error@@Base+0xde4>
   13020:	ldr	r0, [pc, #212]	; 130fc <error@@Base+0xd08>
   13024:	add	r3, pc, r0
   13028:	ldr	r0, [fp, #-12]
   1302c:	ldr	r1, [fp, #-4]
   13030:	add	r1, r1, #824	; 0x338
   13034:	movw	r2, #10
   13038:	movw	ip, #1
   1303c:	str	ip, [sp]
   13040:	str	ip, [sp, #4]
   13044:	bl	131d8 <error@@Base+0xde4>
   13048:	ldr	r0, [fp, #-4]
   1304c:	ldr	r0, [r0]
   13050:	cmp	r0, #0
   13054:	ble	130d8 <error@@Base+0xce4>
   13058:	ldr	r0, [pc, #200]	; 13128 <error@@Base+0xd34>
   1305c:	add	r3, pc, r0
   13060:	ldr	r0, [fp, #-12]
   13064:	ldr	r1, [fp, #-4]
   13068:	add	r1, r1, #920	; 0x398
   1306c:	movw	r2, #8
   13070:	movw	ip, #0
   13074:	str	ip, [sp]
   13078:	str	ip, [sp, #4]
   1307c:	bl	131d8 <error@@Base+0xde4>
   13080:	ldr	r0, [fp, #-4]
   13084:	ldr	r0, [r0, #8]
   13088:	cmp	r0, #0
   1308c:	ble	130a8 <error@@Base+0xcb4>
   13090:	ldr	r0, [pc, #148]	; 1312c <error@@Base+0xd38>
   13094:	add	r2, pc, r0
   13098:	ldr	r0, [fp, #-12]
   1309c:	ldr	r1, [fp, #-4]
   130a0:	add	r1, r1, #992	; 0x3e0
   130a4:	bl	1337c <error@@Base+0xf88>
   130a8:	ldr	r0, [fp, #-4]
   130ac:	ldr	r0, [r0, #416]	; 0x1a0
   130b0:	cmp	r0, #0
   130b4:	ble	130d4 <error@@Base+0xce0>
   130b8:	ldr	r0, [pc, #112]	; 13130 <error@@Base+0xd3c>
   130bc:	add	r2, pc, r0
   130c0:	ldr	r0, [fp, #-12]
   130c4:	ldr	r1, [fp, #-4]
   130c8:	movw	r3, #9048	; 0x2358
   130cc:	add	r1, r1, r3
   130d0:	bl	1337c <error@@Base+0xf88>
   130d4:	b	130d8 <error@@Base+0xce4>
   130d8:	ldr	r0, [pc, #84]	; 13134 <error@@Base+0xd40>
   130dc:	ldr	r0, [pc, r0]
   130e0:	ldr	r1, [fp, #-12]
   130e4:	str	r0, [sp, #8]
   130e8:	mov	r0, r1
   130ec:	ldr	r1, [sp, #8]
   130f0:	blx	r1
   130f4:	mov	sp, fp
   130f8:	pop	{fp, pc}
   130fc:	andeq	r1, r0, pc, lsl pc
   13100:	andeq	r1, r0, r4, asr pc
   13104:	andeq	r1, r0, r9, ror pc
   13108:	andeq	r1, r0, ip, ror pc
   1310c:	andeq	r1, r0, r2, lsr #31
   13110:			; <UNDEFINED> instruction: 0x00001fb8
   13114:	ldrdeq	r1, [r0], -r7
   13118:	andeq	r1, r0, r5, lsl #31
   1311c:	andeq	r5, r0, r3, lsl #10
   13120:	strdeq	r1, [r0], -r9
   13124:	andeq	r6, r1, r0, lsr #3
   13128:	strdeq	r1, [r0], -lr
   1312c:	andeq	r1, r0, r5, lsr #29
   13130:	muleq	r0, r0, lr
   13134:			; <UNDEFINED> instruction: 0x00015fb0
   13138:	push	{fp, lr}
   1313c:	mov	fp, sp
   13140:	sub	sp, sp, #8
   13144:	str	r0, [sp, #4]
   13148:	str	r1, [sp]
   1314c:	ldr	r0, [sp]
   13150:	ldr	r0, [r0]
   13154:	cmp	r0, #0
   13158:	bne	13170 <error@@Base+0xd7c>
   1315c:	ldr	r0, [pc, #112]	; 131d4 <error@@Base+0xde0>
   13160:	add	r0, pc, r0
   13164:	ldr	r1, [sp, #4]
   13168:	bl	10c10 <fputs@plt>
   1316c:	b	131bc <error@@Base+0xdc8>
   13170:	ldr	r0, [pc, #88]	; 131d0 <error@@Base+0xddc>
   13174:	add	r1, pc, r0
   13178:	vldr	d16, [pc, #72]	; 131c8 <error@@Base+0xdd4>
   1317c:	ldr	r0, [sp, #4]
   13180:	ldr	r2, [sp]
   13184:	ldr	r2, [r2]
   13188:	ldr	r3, [sp]
   1318c:	ldr	r3, [r3, #4]
   13190:	sub	r2, r2, r3
   13194:	vmov	s0, r2
   13198:	vcvt.f64.s32	d17, s0
   1319c:	vmul.f64	d16, d16, d17
   131a0:	ldr	r2, [sp]
   131a4:	ldr	r2, [r2]
   131a8:	vmov	s0, r2
   131ac:	vcvt.f64.s32	d17, s0
   131b0:	vdiv.f64	d16, d16, d17
   131b4:	vmov	r2, r3, d16
   131b8:	bl	10bb0 <fprintf@plt>
   131bc:	mov	sp, fp
   131c0:	pop	{fp, pc}
   131c4:	nop	{0}
   131c8:	andeq	r0, r0, r0
   131cc:	subsmi	r0, r9, r0
   131d0:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   131d4:	andeq	r1, r0, sl, lsl #28
   131d8:	push	{r4, sl, fp, lr}
   131dc:	add	fp, sp, #8
   131e0:	sub	sp, sp, #24
   131e4:	ldr	ip, [fp, #12]
   131e8:	ldr	lr, [fp, #8]
   131ec:	ldr	r4, [pc, #376]	; 1336c <error@@Base+0xf78>
   131f0:	add	r4, pc, r4
   131f4:	str	r0, [fp, #-12]
   131f8:	str	r1, [sp, #16]
   131fc:	strh	r2, [sp, #14]
   13200:	str	r3, [sp, #8]
   13204:	strb	lr, [sp, #7]
   13208:	strb	ip, [sp, #6]
   1320c:	ldr	r0, [fp, #-12]
   13210:	ldr	r2, [sp, #8]
   13214:	mov	r1, r4
   13218:	bl	10bb0 <fprintf@plt>
   1321c:	ldr	r1, [fp, #-12]
   13220:	str	r0, [sp]
   13224:	mov	r0, r1
   13228:	movw	r1, #0
   1322c:	bl	13554 <error@@Base+0x1160>
   13230:	ldr	r0, [pc, #296]	; 13360 <error@@Base+0xf6c>
   13234:	add	r1, pc, r0
   13238:	ldr	r0, [pc, #292]	; 13364 <error@@Base+0xf70>
   1323c:	add	r0, pc, r0
   13240:	ldr	r2, [pc, #288]	; 13368 <error@@Base+0xf74>
   13244:	add	r2, pc, r2
   13248:	ldr	r3, [fp, #-12]
   1324c:	ldrb	ip, [sp, #7]
   13250:	cmp	ip, #0
   13254:	movw	ip, #0
   13258:	movne	ip, #1
   1325c:	tst	ip, #1
   13260:	movne	r2, r0
   13264:	mov	r0, r3
   13268:	bl	10bb0 <fprintf@plt>
   1326c:	movw	r1, #1
   13270:	strh	r1, [sp, #4]
   13274:	ldrsh	r0, [sp, #4]
   13278:	ldrsh	r1, [sp, #14]
   1327c:	cmp	r0, r1
   13280:	bgt	132dc <error@@Base+0xee8>
   13284:	ldr	r0, [sp, #16]
   13288:	ldrsh	r1, [sp, #4]
   1328c:	add	r0, r0, r1, lsl #3
   13290:	ldr	r0, [r0]
   13294:	cmp	r0, #0
   13298:	ble	132c4 <error@@Base+0xed0>
   1329c:	ldr	r0, [fp, #-12]
   132a0:	ldr	r1, [sp, #16]
   132a4:	ldrsh	r2, [sp, #4]
   132a8:	add	r1, r1, r2, lsl #3
   132ac:	bl	13554 <error@@Base+0x1160>
   132b0:	ldr	r0, [pc, #192]	; 13378 <error@@Base+0xf84>
   132b4:	add	r1, pc, r0
   132b8:	ldr	r0, [fp, #-12]
   132bc:	ldrsh	r2, [sp, #4]
   132c0:	bl	10bb0 <fprintf@plt>
   132c4:	b	132c8 <error@@Base+0xed4>
   132c8:	ldrh	r0, [sp, #4]
   132cc:	movw	r1, #1
   132d0:	add	r0, r0, r1
   132d4:	strh	r0, [sp, #4]
   132d8:	b	13274 <error@@Base+0xe80>
   132dc:	ldrb	r0, [sp, #7]
   132e0:	cmp	r0, #0
   132e4:	beq	13330 <error@@Base+0xf3c>
   132e8:	ldr	r0, [sp, #16]
   132ec:	ldrsh	r1, [sp, #14]
   132f0:	add	r1, r1, #1
   132f4:	add	r0, r0, r1, lsl #3
   132f8:	ldr	r0, [r0]
   132fc:	cmp	r0, #0
   13300:	ble	13330 <error@@Base+0xf3c>
   13304:	ldr	r0, [fp, #-12]
   13308:	ldr	r1, [sp, #16]
   1330c:	ldrsh	r2, [sp, #14]
   13310:	add	r2, r2, #1
   13314:	add	r1, r1, r2, lsl #3
   13318:	bl	13554 <error@@Base+0x1160>
   1331c:	ldr	r0, [pc, #76]	; 13370 <error@@Base+0xf7c>
   13320:	add	r1, pc, r0
   13324:	ldr	r0, [fp, #-12]
   13328:	ldrsh	r2, [sp, #14]
   1332c:	bl	10bb0 <fprintf@plt>
   13330:	ldrsb	r0, [sp, #6]
   13334:	cmp	r0, #0
   13338:	beq	13358 <error@@Base+0xf64>
   1333c:	ldr	r0, [fp, #-12]
   13340:	ldr	r1, [sp, #16]
   13344:	bl	13554 <error@@Base+0x1160>
   13348:	ldr	r0, [pc, #36]	; 13374 <error@@Base+0xf80>
   1334c:	add	r0, pc, r0
   13350:	ldr	r1, [fp, #-12]
   13354:	bl	10c10 <fputs@plt>
   13358:	sub	sp, fp, #8
   1335c:	pop	{r4, sl, fp, pc}
   13360:	andeq	r1, r0, r6, asr #26
   13364:	andeq	r1, r0, r2, asr #26
   13368:	andeq	r1, r0, r1, asr #26
   1336c:	andeq	r1, r0, r9, lsl #27
   13370:	andeq	r1, r0, r5, ror ip
   13374:	andeq	r1, r0, fp, ror sl
   13378:	ldrdeq	r1, [r0], -r8
   1337c:	push	{fp, lr}
   13380:	mov	fp, sp
   13384:	sub	sp, sp, #40	; 0x28
   13388:	ldr	r3, [pc, #312]	; 134c8 <error@@Base+0x10d4>
   1338c:	ldr	r3, [pc, r3]
   13390:	str	r0, [fp, #-4]
   13394:	str	r1, [fp, #-8]
   13398:	str	r2, [fp, #-12]
   1339c:	ldr	r0, [fp, #-8]
   133a0:	blx	r3
   133a4:	ldr	r0, [pc, #276]	; 134c0 <error@@Base+0x10cc>
   133a8:	add	r0, pc, r0
   133ac:	ldr	r1, [pc, #272]	; 134c4 <error@@Base+0x10d0>
   133b0:	ldr	r1, [pc, r1]
   133b4:	ldr	r2, [fp, #-8]
   133b8:	movw	r3, #8052	; 0x1f74
   133bc:	add	r2, r2, r3
   133c0:	ldr	r2, [r2]
   133c4:	ldr	r3, [fp, #-8]
   133c8:	movw	ip, #8048	; 0x1f70
   133cc:	add	r3, r3, ip
   133d0:	ldr	r3, [r3]
   133d4:	str	r0, [sp, #20]
   133d8:	mov	r0, r2
   133dc:	str	r1, [sp, #16]
   133e0:	mov	r1, r3
   133e4:	ldr	r2, [sp, #20]
   133e8:	ldr	r3, [sp, #16]
   133ec:	blx	r3
   133f0:	ldr	r0, [pc, #196]	; 134bc <error@@Base+0x10c8>
   133f4:	add	r1, pc, r0
   133f8:	ldr	r0, [fp, #-4]
   133fc:	ldr	r2, [fp, #-12]
   13400:	bl	10bb0 <fprintf@plt>
   13404:	ldr	r1, [fp, #-4]
   13408:	str	r0, [sp, #12]
   1340c:	mov	r0, r1
   13410:	movw	r1, #0
   13414:	bl	13554 <error@@Base+0x1160>
   13418:	ldr	r1, [fp, #-4]
   1341c:	movw	r0, #10
   13420:	bl	10be0 <fputc@plt>
   13424:	movw	r1, #0
   13428:	str	r1, [fp, #-16]
   1342c:	ldr	r0, [fp, #-16]
   13430:	ldr	r1, [fp, #-8]
   13434:	movw	r2, #8052	; 0x1f74
   13438:	add	r1, r1, r2
   1343c:	ldr	r1, [r1]
   13440:	cmp	r0, r1
   13444:	bge	134b4 <error@@Base+0x10c0>
   13448:	ldr	r0, [pc, #124]	; 134cc <error@@Base+0x10d8>
   1344c:	add	r1, pc, r0
   13450:	ldr	r0, [fp, #-4]
   13454:	ldr	r2, [fp, #-8]
   13458:	movw	r3, #8048	; 0x1f70
   1345c:	ldr	r2, [r2, r3]
   13460:	ldr	ip, [fp, #-16]
   13464:	ldr	r2, [r2, ip, lsl #2]
   13468:	add	r2, r2, #12
   1346c:	str	r1, [sp, #8]
   13470:	mov	r1, r2
   13474:	str	r3, [sp, #4]
   13478:	bl	13554 <error@@Base+0x1160>
   1347c:	ldr	r0, [fp, #-4]
   13480:	ldr	r1, [fp, #-8]
   13484:	ldr	r2, [sp, #4]
   13488:	ldr	r1, [r1, r2]
   1348c:	ldr	r3, [fp, #-16]
   13490:	add	r1, r1, r3, lsl #2
   13494:	ldr	r1, [r1]
   13498:	ldr	r2, [r1, #8]
   1349c:	ldr	r1, [sp, #8]
   134a0:	bl	10bb0 <fprintf@plt>
   134a4:	ldr	r0, [fp, #-16]
   134a8:	add	r0, r0, #1
   134ac:	str	r0, [fp, #-16]
   134b0:	b	1342c <error@@Base+0x1038>
   134b4:	mov	sp, fp
   134b8:	pop	{fp, pc}
   134bc:	andeq	r1, r0, r5, lsl #23
   134c0:	andeq	r0, r0, r8, lsr r2
   134c4:	andeq	r5, r1, ip, lsl #26
   134c8:	andeq	r5, r1, ip, lsr sp
   134cc:	andeq	r1, r0, lr, lsr #22
   134d0:	push	{fp, lr}
   134d4:	mov	fp, sp
   134d8:	sub	sp, sp, #16
   134dc:	str	r0, [fp, #-4]
   134e0:	str	r1, [sp, #8]
   134e4:	str	r2, [sp, #4]
   134e8:	ldr	r0, [fp, #-4]
   134ec:	bl	12c74 <error@@Base+0x880>
   134f0:	and	r0, r0, #255	; 0xff
   134f4:	cmp	r0, #0
   134f8:	movw	r0, #0
   134fc:	str	r0, [sp]
   13500:	beq	13530 <error@@Base+0x113c>
   13504:	ldr	r0, [pc, #64]	; 1354c <error@@Base+0x1158>
   13508:	add	r0, pc, r0
   1350c:	ldr	r1, [pc, #60]	; 13550 <error@@Base+0x115c>
   13510:	add	r1, pc, r1
   13514:	ldr	r2, [sp, #8]
   13518:	ldr	r3, [sp, #4]
   1351c:	bl	10bbc <__isoc99_sscanf@plt>
   13520:	cmp	r0, #2
   13524:	movw	r0, #0
   13528:	moveq	r0, #1
   1352c:	str	r0, [sp]
   13530:	ldr	r0, [sp]
   13534:	tst	r0, #1
   13538:	movw	r0, #1
   1353c:	moveq	r0, #0
   13540:	and	r0, r0, #255	; 0xff
   13544:	mov	sp, fp
   13548:	pop	{fp, pc}
   1354c:	andeq	r5, r1, pc, asr #24
   13550:	andeq	r1, r0, r2, asr sl
   13554:	push	{fp, lr}
   13558:	mov	fp, sp
   1355c:	sub	sp, sp, #16
   13560:	str	r0, [fp, #-4]
   13564:	str	r1, [sp, #8]
   13568:	ldr	r0, [sp, #8]
   1356c:	movw	r1, #0
   13570:	cmp	r0, r1
   13574:	beq	135b4 <error@@Base+0x11c0>
   13578:	ldr	r0, [pc, #96]	; 135e0 <error@@Base+0x11ec>
   1357c:	add	r1, pc, r0
   13580:	ldr	r0, [fp, #-4]
   13584:	ldr	r2, [sp, #8]
   13588:	ldr	r2, [r2]
   1358c:	ldr	r3, [sp, #8]
   13590:	ldr	r3, [r3, #4]
   13594:	bl	10bb0 <fprintf@plt>
   13598:	ldr	r1, [fp, #-4]
   1359c:	ldr	r2, [sp, #8]
   135a0:	str	r0, [sp, #4]
   135a4:	mov	r0, r1
   135a8:	mov	r1, r2
   135ac:	bl	13138 <error@@Base+0xd44>
   135b0:	b	135c4 <error@@Base+0x11d0>
   135b4:	ldr	r0, [pc, #32]	; 135dc <error@@Base+0x11e8>
   135b8:	add	r0, pc, r0
   135bc:	ldr	r1, [fp, #-4]
   135c0:	bl	10c10 <fputs@plt>
   135c4:	ldr	r0, [pc, #24]	; 135e4 <error@@Base+0x11f0>
   135c8:	add	r0, pc, r0
   135cc:	ldr	r1, [fp, #-4]
   135d0:	bl	10c10 <fputs@plt>
   135d4:	mov	sp, fp
   135d8:	pop	{fp, pc}
   135dc:	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   135e0:	andeq	r1, r0, r2, lsr #20
   135e4:	strdeq	r1, [r0], -ip
   135e8:	push	{fp, lr}
   135ec:	mov	fp, sp
   135f0:	sub	sp, sp, #8
   135f4:	ldr	r2, [pc, #36]	; 13620 <error@@Base+0x122c>
   135f8:	ldr	r2, [pc, r2]
   135fc:	str	r0, [sp, #4]
   13600:	str	r1, [sp]
   13604:	ldr	r0, [sp, #4]
   13608:	ldr	r0, [r0, #8]
   1360c:	ldr	r1, [sp]
   13610:	ldr	r1, [r1, #8]
   13614:	blx	r2
   13618:	mov	sp, fp
   1361c:	pop	{fp, pc}
   13620:	andeq	r5, r1, r8, lsl #22
   13624:	push	{fp, lr}
   13628:	mov	fp, sp
   1362c:	sub	sp, sp, #16
   13630:	str	r0, [fp, #-4]
   13634:	str	r1, [sp, #8]
   13638:	ldr	r0, [sp, #8]
   1363c:	ldr	r0, [r0]
   13640:	str	r0, [sp, #4]
   13644:	ldr	r0, [sp, #4]
   13648:	bl	1369c <error@@Base+0x12a8>
   1364c:	str	r0, [sp]
   13650:	movw	r1, #0
   13654:	cmp	r0, r1
   13658:	beq	13694 <error@@Base+0x12a0>
   1365c:	ldr	r0, [sp, #4]
   13660:	ldr	r0, [r0, #12]
   13664:	bl	13acc <error@@Base+0x16d8>
   13668:	sxtb	r0, r0
   1366c:	cmp	r0, #0
   13670:	beq	13684 <error@@Base+0x1290>
   13674:	ldr	r0, [fp, #-4]
   13678:	ldr	r1, [sp, #4]
   1367c:	ldr	r2, [sp]
   13680:	bl	13b34 <error@@Base+0x1740>
   13684:	ldr	r0, [sp]
   13688:	ldr	r0, [r0, #4]
   1368c:	str	r0, [sp, #4]
   13690:	b	13644 <error@@Base+0x1250>
   13694:	mov	sp, fp
   13698:	pop	{fp, pc}
   1369c:	push	{fp, lr}
   136a0:	mov	fp, sp
   136a4:	sub	sp, sp, #48	; 0x30
   136a8:	str	r0, [fp, #-8]
   136ac:	ldr	r0, [fp, #-8]
   136b0:	str	r0, [sp, #28]
   136b4:	add	r0, sp, #24
   136b8:	str	r0, [sp, #20]
   136bc:	movw	r0, #17
   136c0:	str	r0, [sp, #16]
   136c4:	ldr	r0, [fp, #-8]
   136c8:	movw	r1, #0
   136cc:	cmp	r0, r1
   136d0:	bne	136e0 <error@@Base+0x12ec>
   136d4:	movw	r0, #0
   136d8:	str	r0, [fp, #-4]
   136dc:	b	13ac0 <error@@Base+0x16cc>
   136e0:	b	136e4 <error@@Base+0x12f0>
   136e4:	ldr	r0, [sp, #20]
   136e8:	ldr	r0, [r0, #4]
   136ec:	movw	r1, #0
   136f0:	cmp	r0, r1
   136f4:	beq	13ab4 <error@@Base+0x16c0>
   136f8:	ldr	r0, [sp, #20]
   136fc:	bl	13c20 <error@@Base+0x182c>
   13700:	str	r0, [sp, #20]
   13704:	ldr	r0, [sp, #16]
   13708:	str	r0, [sp, #4]
   1370c:	ldr	r0, [sp, #20]
   13710:	bl	13ccc <error@@Base+0x18d8>
   13714:	str	r0, [sp, #16]
   13718:	ldr	r0, [sp, #20]
   1371c:	bl	13c20 <error@@Base+0x182c>
   13720:	bl	13ccc <error@@Base+0x18d8>
   13724:	str	r0, [sp, #12]
   13728:	ldr	r0, [sp, #20]
   1372c:	bl	13d14 <error@@Base+0x1920>
   13730:	bl	13ccc <error@@Base+0x18d8>
   13734:	str	r0, [sp, #8]
   13738:	ldr	r0, [sp, #16]
   1373c:	cmp	r0, #1
   13740:	bne	13754 <error@@Base+0x1360>
   13744:	ldr	r0, [sp, #12]
   13748:	cmp	r0, #2
   1374c:	bne	13754 <error@@Base+0x1360>
   13750:	b	136e4 <error@@Base+0x12f0>
   13754:	ldr	r0, [sp, #16]
   13758:	cmp	r0, #3
   1375c:	beq	13778 <error@@Base+0x1384>
   13760:	ldr	r0, [sp, #16]
   13764:	cmp	r0, #1
   13768:	beq	13778 <error@@Base+0x1384>
   1376c:	ldr	r0, [sp, #16]
   13770:	cmp	r0, #2
   13774:	bne	1377c <error@@Base+0x1388>
   13778:	b	13ab4 <error@@Base+0x16c0>
   1377c:	ldr	r0, [sp, #12]
   13780:	cmp	r0, #3
   13784:	beq	137a0 <error@@Base+0x13ac>
   13788:	ldr	r0, [sp, #12]
   1378c:	cmp	r0, #1
   13790:	beq	137a0 <error@@Base+0x13ac>
   13794:	ldr	r0, [sp, #12]
   13798:	cmp	r0, #2
   1379c:	bne	137a4 <error@@Base+0x13b0>
   137a0:	b	13ab4 <error@@Base+0x16c0>
   137a4:	ldr	r0, [sp, #16]
   137a8:	cmp	r0, #9
   137ac:	beq	137bc <error@@Base+0x13c8>
   137b0:	ldr	r0, [sp, #16]
   137b4:	cmp	r0, #8
   137b8:	bne	137d8 <error@@Base+0x13e4>
   137bc:	ldr	r0, [sp, #12]
   137c0:	cmp	r0, #9
   137c4:	beq	137d4 <error@@Base+0x13e0>
   137c8:	ldr	r0, [sp, #12]
   137cc:	cmp	r0, #8
   137d0:	bne	137d8 <error@@Base+0x13e4>
   137d4:	b	136e4 <error@@Base+0x12f0>
   137d8:	ldr	r0, [sp, #16]
   137dc:	cmp	r0, #9
   137e0:	beq	137f0 <error@@Base+0x13fc>
   137e4:	ldr	r0, [sp, #16]
   137e8:	cmp	r0, #8
   137ec:	bne	13830 <error@@Base+0x143c>
   137f0:	ldr	r0, [sp, #12]
   137f4:	cmp	r0, #13
   137f8:	beq	13814 <error@@Base+0x1420>
   137fc:	ldr	r0, [sp, #12]
   13800:	cmp	r0, #12
   13804:	beq	13814 <error@@Base+0x1420>
   13808:	ldr	r0, [sp, #12]
   1380c:	cmp	r0, #10
   13810:	bne	13830 <error@@Base+0x143c>
   13814:	ldr	r0, [sp, #8]
   13818:	cmp	r0, #9
   1381c:	beq	1382c <error@@Base+0x1438>
   13820:	ldr	r0, [sp, #8]
   13824:	cmp	r0, #8
   13828:	bne	13830 <error@@Base+0x143c>
   1382c:	b	136e4 <error@@Base+0x12f0>
   13830:	ldr	r0, [sp, #4]
   13834:	cmp	r0, #9
   13838:	beq	13848 <error@@Base+0x1454>
   1383c:	ldr	r0, [sp, #4]
   13840:	cmp	r0, #8
   13844:	bne	13888 <error@@Base+0x1494>
   13848:	ldr	r0, [sp, #16]
   1384c:	cmp	r0, #13
   13850:	beq	1386c <error@@Base+0x1478>
   13854:	ldr	r0, [sp, #16]
   13858:	cmp	r0, #12
   1385c:	beq	1386c <error@@Base+0x1478>
   13860:	ldr	r0, [sp, #16]
   13864:	cmp	r0, #10
   13868:	bne	13888 <error@@Base+0x1494>
   1386c:	ldr	r0, [sp, #12]
   13870:	cmp	r0, #9
   13874:	beq	13884 <error@@Base+0x1490>
   13878:	ldr	r0, [sp, #12]
   1387c:	cmp	r0, #8
   13880:	bne	13888 <error@@Base+0x1494>
   13884:	b	136e4 <error@@Base+0x12f0>
   13888:	ldr	r0, [sp, #16]
   1388c:	cmp	r0, #8
   13890:	bne	138a4 <error@@Base+0x14b0>
   13894:	ldr	r0, [sp, #12]
   13898:	cmp	r0, #10
   1389c:	bne	138a4 <error@@Base+0x14b0>
   138a0:	b	136e4 <error@@Base+0x12f0>
   138a4:	ldr	r0, [sp, #16]
   138a8:	cmp	r0, #8
   138ac:	bne	138cc <error@@Base+0x14d8>
   138b0:	ldr	r0, [sp, #12]
   138b4:	cmp	r0, #11
   138b8:	bne	138cc <error@@Base+0x14d8>
   138bc:	ldr	r0, [sp, #8]
   138c0:	cmp	r0, #8
   138c4:	bne	138cc <error@@Base+0x14d8>
   138c8:	b	136e4 <error@@Base+0x12f0>
   138cc:	ldr	r0, [sp, #4]
   138d0:	cmp	r0, #8
   138d4:	bne	138f4 <error@@Base+0x1500>
   138d8:	ldr	r0, [sp, #16]
   138dc:	cmp	r0, #11
   138e0:	bne	138f4 <error@@Base+0x1500>
   138e4:	ldr	r0, [sp, #12]
   138e8:	cmp	r0, #8
   138ec:	bne	138f4 <error@@Base+0x1500>
   138f0:	b	136e4 <error@@Base+0x12f0>
   138f4:	ldr	r0, [sp, #16]
   138f8:	cmp	r0, #15
   138fc:	bne	13910 <error@@Base+0x151c>
   13900:	ldr	r0, [sp, #12]
   13904:	cmp	r0, #15
   13908:	bne	13910 <error@@Base+0x151c>
   1390c:	b	136e4 <error@@Base+0x12f0>
   13910:	ldr	r0, [sp, #16]
   13914:	cmp	r0, #9
   13918:	beq	13928 <error@@Base+0x1534>
   1391c:	ldr	r0, [sp, #16]
   13920:	cmp	r0, #8
   13924:	bne	13938 <error@@Base+0x1544>
   13928:	ldr	r0, [sp, #12]
   1392c:	cmp	r0, #15
   13930:	bne	13938 <error@@Base+0x1544>
   13934:	b	136e4 <error@@Base+0x12f0>
   13938:	ldr	r0, [sp, #16]
   1393c:	cmp	r0, #15
   13940:	bne	13960 <error@@Base+0x156c>
   13944:	ldr	r0, [sp, #12]
   13948:	cmp	r0, #9
   1394c:	beq	1395c <error@@Base+0x1568>
   13950:	ldr	r0, [sp, #12]
   13954:	cmp	r0, #8
   13958:	bne	13960 <error@@Base+0x156c>
   1395c:	b	136e4 <error@@Base+0x12f0>
   13960:	ldr	r0, [sp, #4]
   13964:	cmp	r0, #15
   13968:	bne	139a0 <error@@Base+0x15ac>
   1396c:	ldr	r0, [sp, #16]
   13970:	cmp	r0, #14
   13974:	beq	13990 <error@@Base+0x159c>
   13978:	ldr	r0, [sp, #16]
   1397c:	cmp	r0, #12
   13980:	beq	13990 <error@@Base+0x159c>
   13984:	ldr	r0, [sp, #16]
   13988:	cmp	r0, #10
   1398c:	bne	139a0 <error@@Base+0x15ac>
   13990:	ldr	r0, [sp, #12]
   13994:	cmp	r0, #15
   13998:	bne	139a0 <error@@Base+0x15ac>
   1399c:	b	136e4 <error@@Base+0x12f0>
   139a0:	ldr	r0, [sp, #16]
   139a4:	cmp	r0, #15
   139a8:	bne	139e0 <error@@Base+0x15ec>
   139ac:	ldr	r0, [sp, #12]
   139b0:	cmp	r0, #14
   139b4:	beq	139d0 <error@@Base+0x15dc>
   139b8:	ldr	r0, [sp, #12]
   139bc:	cmp	r0, #12
   139c0:	beq	139d0 <error@@Base+0x15dc>
   139c4:	ldr	r0, [sp, #12]
   139c8:	cmp	r0, #10
   139cc:	bne	139e0 <error@@Base+0x15ec>
   139d0:	ldr	r0, [sp, #8]
   139d4:	cmp	r0, #15
   139d8:	bne	139e0 <error@@Base+0x15ec>
   139dc:	b	136e4 <error@@Base+0x12f0>
   139e0:	ldr	r0, [sp, #16]
   139e4:	cmp	r0, #7
   139e8:	bne	139fc <error@@Base+0x1608>
   139ec:	ldr	r0, [sp, #12]
   139f0:	cmp	r0, #7
   139f4:	bne	139fc <error@@Base+0x1608>
   139f8:	b	136e4 <error@@Base+0x12f0>
   139fc:	ldr	r0, [sp, #16]
   13a00:	cmp	r0, #9
   13a04:	beq	13a38 <error@@Base+0x1644>
   13a08:	ldr	r0, [sp, #16]
   13a0c:	cmp	r0, #8
   13a10:	beq	13a38 <error@@Base+0x1644>
   13a14:	ldr	r0, [sp, #16]
   13a18:	cmp	r0, #15
   13a1c:	beq	13a38 <error@@Base+0x1644>
   13a20:	ldr	r0, [sp, #16]
   13a24:	cmp	r0, #7
   13a28:	beq	13a38 <error@@Base+0x1644>
   13a2c:	ldr	r0, [sp, #16]
   13a30:	cmp	r0, #16
   13a34:	bne	13a48 <error@@Base+0x1654>
   13a38:	ldr	r0, [sp, #12]
   13a3c:	cmp	r0, #16
   13a40:	bne	13a48 <error@@Base+0x1654>
   13a44:	b	136e4 <error@@Base+0x12f0>
   13a48:	ldr	r0, [sp, #16]
   13a4c:	cmp	r0, #16
   13a50:	bne	13a94 <error@@Base+0x16a0>
   13a54:	ldr	r0, [sp, #12]
   13a58:	cmp	r0, #9
   13a5c:	beq	13a90 <error@@Base+0x169c>
   13a60:	ldr	r0, [sp, #12]
   13a64:	cmp	r0, #8
   13a68:	beq	13a90 <error@@Base+0x169c>
   13a6c:	ldr	r0, [sp, #12]
   13a70:	cmp	r0, #15
   13a74:	beq	13a90 <error@@Base+0x169c>
   13a78:	ldr	r0, [sp, #12]
   13a7c:	cmp	r0, #7
   13a80:	beq	13a90 <error@@Base+0x169c>
   13a84:	ldr	r0, [sp, #12]
   13a88:	cmp	r0, #16
   13a8c:	bne	13a94 <error@@Base+0x16a0>
   13a90:	b	136e4 <error@@Base+0x12f0>
   13a94:	ldr	r0, [sp, #16]
   13a98:	cmp	r0, #5
   13a9c:	bne	13ab0 <error@@Base+0x16bc>
   13aa0:	ldr	r0, [sp, #12]
   13aa4:	cmp	r0, #5
   13aa8:	bne	13ab0 <error@@Base+0x16bc>
   13aac:	b	136e4 <error@@Base+0x12f0>
   13ab0:	b	13ab4 <error@@Base+0x16c0>
   13ab4:	ldr	r0, [sp, #20]
   13ab8:	bl	13d38 <error@@Base+0x1944>
   13abc:	str	r0, [fp, #-4]
   13ac0:	ldr	r0, [fp, #-4]
   13ac4:	mov	sp, fp
   13ac8:	pop	{fp, pc}
   13acc:	push	{fp, lr}
   13ad0:	mov	fp, sp
   13ad4:	sub	sp, sp, #16
   13ad8:	str	r0, [sp, #8]
   13adc:	ldr	r0, [sp, #8]
   13ae0:	bl	10af0 <utf8proc_get_property@plt>
   13ae4:	str	r0, [sp, #4]
   13ae8:	ldr	r0, [sp, #4]
   13aec:	ldrsh	r0, [r0]
   13af0:	sub	r1, r0, #1
   13af4:	cmp	r1, #12
   13af8:	str	r0, [sp]
   13afc:	bcc	13b14 <error@@Base+0x1720>
   13b00:	b	13b04 <error@@Base+0x1710>
   13b04:	ldr	r0, [sp]
   13b08:	cmp	r0, #29
   13b0c:	bne	13b20 <error@@Base+0x172c>
   13b10:	b	13b14 <error@@Base+0x1720>
   13b14:	movw	r0, #1
   13b18:	strb	r0, [fp, #-1]
   13b1c:	b	13b28 <error@@Base+0x1734>
   13b20:	movw	r0, #0
   13b24:	strb	r0, [fp, #-1]
   13b28:	ldrb	r0, [fp, #-1]
   13b2c:	mov	sp, fp
   13b30:	pop	{fp, pc}
   13b34:	push	{fp, lr}
   13b38:	mov	fp, sp
   13b3c:	sub	sp, sp, #40	; 0x28
   13b40:	str	r0, [fp, #-4]
   13b44:	str	r1, [fp, #-8]
   13b48:	str	r2, [fp, #-12]
   13b4c:	ldr	r0, [fp, #-12]
   13b50:	ldr	r0, [r0, #4]
   13b54:	str	r0, [sp, #20]
   13b58:	ldr	r0, [fp, #-8]
   13b5c:	ldr	r1, [sp, #20]
   13b60:	bl	13f60 <error@@Base+0x1b6c>
   13b64:	str	r0, [sp, #16]
   13b68:	ldr	r0, [sp, #16]
   13b6c:	add	r0, r0, #1
   13b70:	bl	10b5c <malloc@plt>
   13b74:	str	r0, [sp, #8]
   13b78:	ldr	r0, [sp, #8]
   13b7c:	ldr	r1, [fp, #-8]
   13b80:	ldr	r2, [sp, #20]
   13b84:	bl	14054 <error@@Base+0x1c60>
   13b88:	ldr	r0, [pc, #96]	; 13bf0 <error@@Base+0x17fc>
   13b8c:	ldr	r0, [pc, r0]
   13b90:	movw	r1, #1
   13b94:	str	r0, [sp, #4]
   13b98:	mov	r0, r1
   13b9c:	movw	r1, #12
   13ba0:	ldr	r2, [sp, #4]
   13ba4:	blx	r2
   13ba8:	str	r0, [fp, #-16]
   13bac:	ldr	r0, [sp, #8]
   13bb0:	bl	10bd4 <utf8proc_NFC@plt>
   13bb4:	ldr	r1, [pc, #48]	; 13bec <error@@Base+0x17f8>
   13bb8:	ldr	r1, [pc, r1]
   13bbc:	ldr	r2, [fp, #-16]
   13bc0:	str	r0, [r2, #8]
   13bc4:	ldr	r0, [fp, #-4]
   13bc8:	ldr	r2, [fp, #-16]
   13bcc:	str	r1, [sp]
   13bd0:	mov	r1, r2
   13bd4:	ldr	r2, [sp]
   13bd8:	blx	r2
   13bdc:	ldr	r0, [sp, #8]
   13be0:	bl	10ae4 <free@plt>
   13be4:	mov	sp, fp
   13be8:	pop	{fp, pc}
   13bec:	andeq	r5, r1, r8, lsl r5
   13bf0:	andeq	r5, r1, r0, lsl #11
   13bf4:	push	{fp, lr}
   13bf8:	mov	fp, sp
   13bfc:	sub	sp, sp, #8
   13c00:	str	r0, [sp, #4]
   13c04:	ldr	r0, [sp, #4]
   13c08:	ldr	r0, [r0, #8]
   13c0c:	bl	10ae4 <free@plt>
   13c10:	ldr	r0, [sp, #4]
   13c14:	bl	10ae4 <free@plt>
   13c18:	mov	sp, fp
   13c1c:	pop	{fp, pc}
   13c20:	push	{fp, lr}
   13c24:	mov	fp, sp
   13c28:	sub	sp, sp, #16
   13c2c:	str	r0, [sp, #8]
   13c30:	ldr	r0, [sp, #8]
   13c34:	movw	r1, #0
   13c38:	cmp	r0, r1
   13c3c:	bne	13c4c <error@@Base+0x1858>
   13c40:	movw	r0, #0
   13c44:	str	r0, [fp, #-4]
   13c48:	b	13cc0 <error@@Base+0x18cc>
   13c4c:	b	13c50 <error@@Base+0x185c>
   13c50:	ldr	r0, [sp, #8]
   13c54:	ldr	r0, [r0, #4]
   13c58:	str	r0, [sp, #8]
   13c5c:	ldr	r0, [sp, #8]
   13c60:	movw	r1, #0
   13c64:	cmp	r0, r1
   13c68:	movw	r0, #0
   13c6c:	str	r0, [sp, #4]
   13c70:	beq	13cac <error@@Base+0x18b8>
   13c74:	ldr	r0, [sp, #8]
   13c78:	bl	13ccc <error@@Base+0x18d8>
   13c7c:	cmp	r0, #4
   13c80:	movw	r0, #1
   13c84:	str	r0, [sp]
   13c88:	beq	13ca4 <error@@Base+0x18b0>
   13c8c:	ldr	r0, [sp, #8]
   13c90:	bl	13ccc <error@@Base+0x18d8>
   13c94:	cmp	r0, #6
   13c98:	movw	r0, #0
   13c9c:	moveq	r0, #1
   13ca0:	str	r0, [sp]
   13ca4:	ldr	r0, [sp]
   13ca8:	str	r0, [sp, #4]
   13cac:	ldr	r0, [sp, #4]
   13cb0:	tst	r0, #1
   13cb4:	bne	13c50 <error@@Base+0x185c>
   13cb8:	ldr	r0, [sp, #8]
   13cbc:	str	r0, [fp, #-4]
   13cc0:	ldr	r0, [fp, #-4]
   13cc4:	mov	sp, fp
   13cc8:	pop	{fp, pc}
   13ccc:	push	{fp, lr}
   13cd0:	mov	fp, sp
   13cd4:	sub	sp, sp, #8
   13cd8:	str	r0, [sp]
   13cdc:	ldr	r0, [sp]
   13ce0:	movw	r1, #0
   13ce4:	cmp	r0, r1
   13ce8:	bne	13cf8 <error@@Base+0x1904>
   13cec:	movw	r0, #18
   13cf0:	str	r0, [sp, #4]
   13cf4:	b	13d08 <error@@Base+0x1914>
   13cf8:	ldr	r0, [sp]
   13cfc:	ldr	r0, [r0, #12]
   13d00:	bl	13df4 <error@@Base+0x1a00>
   13d04:	str	r0, [sp, #4]
   13d08:	ldr	r0, [sp, #4]
   13d0c:	mov	sp, fp
   13d10:	pop	{fp, pc}
   13d14:	push	{fp, lr}
   13d18:	mov	fp, sp
   13d1c:	sub	sp, sp, #8
   13d20:	str	r0, [sp, #4]
   13d24:	ldr	r0, [sp, #4]
   13d28:	bl	13c20 <error@@Base+0x182c>
   13d2c:	bl	13c20 <error@@Base+0x182c>
   13d30:	mov	sp, fp
   13d34:	pop	{fp, pc}
   13d38:	push	{fp, lr}
   13d3c:	mov	fp, sp
   13d40:	sub	sp, sp, #16
   13d44:	str	r0, [sp, #8]
   13d48:	ldr	r0, [sp, #8]
   13d4c:	movw	r1, #0
   13d50:	cmp	r0, r1
   13d54:	bne	13d64 <error@@Base+0x1970>
   13d58:	movw	r0, #0
   13d5c:	str	r0, [fp, #-4]
   13d60:	b	13de8 <error@@Base+0x19f4>
   13d64:	b	13d68 <error@@Base+0x1974>
   13d68:	ldr	r0, [sp, #8]
   13d6c:	ldr	r0, [r0, #4]
   13d70:	movw	r1, #0
   13d74:	cmp	r0, r1
   13d78:	movw	r0, #0
   13d7c:	str	r0, [sp, #4]
   13d80:	beq	13dc4 <error@@Base+0x19d0>
   13d84:	ldr	r0, [sp, #8]
   13d88:	ldr	r0, [r0, #4]
   13d8c:	bl	13ccc <error@@Base+0x18d8>
   13d90:	cmp	r0, #4
   13d94:	movw	r0, #1
   13d98:	str	r0, [sp]
   13d9c:	beq	13dbc <error@@Base+0x19c8>
   13da0:	ldr	r0, [sp, #8]
   13da4:	ldr	r0, [r0, #4]
   13da8:	bl	13ccc <error@@Base+0x18d8>
   13dac:	cmp	r0, #6
   13db0:	movw	r0, #0
   13db4:	moveq	r0, #1
   13db8:	str	r0, [sp]
   13dbc:	ldr	r0, [sp]
   13dc0:	str	r0, [sp, #4]
   13dc4:	ldr	r0, [sp, #4]
   13dc8:	tst	r0, #1
   13dcc:	beq	13de0 <error@@Base+0x19ec>
   13dd0:	ldr	r0, [sp, #8]
   13dd4:	ldr	r0, [r0, #4]
   13dd8:	str	r0, [sp, #8]
   13ddc:	b	13d68 <error@@Base+0x1974>
   13de0:	ldr	r0, [sp, #8]
   13de4:	str	r0, [fp, #-4]
   13de8:	ldr	r0, [fp, #-4]
   13dec:	mov	sp, fp
   13df0:	pop	{fp, pc}
   13df4:	push	{fp, lr}
   13df8:	mov	fp, sp
   13dfc:	sub	sp, sp, #8
   13e00:	str	r0, [sp, #4]
   13e04:	movw	r0, #1093	; 0x445
   13e08:	str	r0, [sp]
   13e0c:	ldr	r0, [sp, #4]
   13e10:	movw	r1, #0
   13e14:	movw	r2, #1092	; 0x444
   13e18:	bl	13e24 <error@@Base+0x1a30>
   13e1c:	mov	sp, fp
   13e20:	pop	{fp, pc}
   13e24:	push	{fp, lr}
   13e28:	mov	fp, sp
   13e2c:	sub	sp, sp, #24
   13e30:	str	r0, [fp, #-8]
   13e34:	str	r1, [sp, #12]
   13e38:	str	r2, [sp, #8]
   13e3c:	ldr	r0, [sp, #8]
   13e40:	ldr	r1, [sp, #12]
   13e44:	cmp	r0, r1
   13e48:	bcs	13e58 <error@@Base+0x1a64>
   13e4c:	movw	r0, #0
   13e50:	str	r0, [fp, #-4]
   13e54:	b	13f44 <error@@Base+0x1b50>
   13e58:	ldr	r0, [pc, #240]	; 13f50 <error@@Base+0x1b5c>
   13e5c:	add	r0, pc, r0
   13e60:	ldr	r1, [sp, #12]
   13e64:	ldr	r2, [sp, #8]
   13e68:	sub	r2, r2, r1
   13e6c:	lsr	r2, r2, #1
   13e70:	add	r1, r1, r2
   13e74:	str	r1, [sp, #4]
   13e78:	ldr	r1, [sp, #4]
   13e7c:	movw	r2, #12
   13e80:	mul	r1, r1, r2
   13e84:	add	r0, r0, r1
   13e88:	str	r0, [sp]
   13e8c:	ldr	r0, [fp, #-8]
   13e90:	ldr	r1, [sp]
   13e94:	ldr	r1, [r1]
   13e98:	cmp	r0, r1
   13e9c:	bcs	13ebc <error@@Base+0x1ac8>
   13ea0:	ldr	r0, [fp, #-8]
   13ea4:	ldr	r1, [sp, #12]
   13ea8:	ldr	r2, [sp, #4]
   13eac:	sub	r2, r2, #1
   13eb0:	bl	13e24 <error@@Base+0x1a30>
   13eb4:	str	r0, [fp, #-4]
   13eb8:	b	13f44 <error@@Base+0x1b50>
   13ebc:	ldr	r0, [fp, #-8]
   13ec0:	ldr	r1, [sp]
   13ec4:	ldr	r1, [r1, #4]
   13ec8:	cmp	r0, r1
   13ecc:	bls	13eec <error@@Base+0x1af8>
   13ed0:	ldr	r0, [fp, #-8]
   13ed4:	ldr	r1, [sp, #4]
   13ed8:	add	r1, r1, #1
   13edc:	ldr	r2, [sp, #8]
   13ee0:	bl	13e24 <error@@Base+0x1a30>
   13ee4:	str	r0, [fp, #-4]
   13ee8:	b	13f44 <error@@Base+0x1b50>
   13eec:	ldr	r0, [fp, #-8]
   13ef0:	ldr	r1, [sp]
   13ef4:	ldr	r1, [r1]
   13ef8:	cmp	r0, r1
   13efc:	bcc	13f18 <error@@Base+0x1b24>
   13f00:	ldr	r0, [fp, #-8]
   13f04:	ldr	r1, [sp]
   13f08:	ldr	r1, [r1, #4]
   13f0c:	cmp	r0, r1
   13f10:	bhi	13f18 <error@@Base+0x1b24>
   13f14:	b	13f38 <error@@Base+0x1b44>
   13f18:	ldr	r0, [pc, #52]	; 13f54 <error@@Base+0x1b60>
   13f1c:	add	r0, pc, r0
   13f20:	ldr	r1, [pc, #48]	; 13f58 <error@@Base+0x1b64>
   13f24:	add	r1, pc, r1
   13f28:	ldr	r2, [pc, #44]	; 13f5c <error@@Base+0x1b68>
   13f2c:	add	r3, pc, r2
   13f30:	movw	r2, #63	; 0x3f
   13f34:	bl	10c40 <__assert_fail@plt>
   13f38:	ldr	r0, [sp]
   13f3c:	ldr	r0, [r0, #8]
   13f40:	str	r0, [fp, #-4]
   13f44:	ldr	r0, [fp, #-4]
   13f48:	mov	sp, fp
   13f4c:	pop	{fp, pc}
   13f50:	andeq	r1, r0, ip, ror #2
   13f54:	andeq	r4, r0, r8, ror #7
   13f58:	andeq	r4, r0, r9, lsl r4
   13f5c:	andeq	r4, r0, r8, lsl r4
   13f60:	push	{fp, lr}
   13f64:	mov	fp, sp
   13f68:	sub	sp, sp, #24
   13f6c:	str	r0, [fp, #-4]
   13f70:	str	r1, [fp, #-8]
   13f74:	movw	r0, #0
   13f78:	str	r0, [sp, #8]
   13f7c:	str	r0, [sp, #4]
   13f80:	ldr	r0, [fp, #-4]
   13f84:	str	r0, [sp, #12]
   13f88:	ldr	r0, [sp, #12]
   13f8c:	ldr	r1, [fp, #-8]
   13f90:	cmp	r0, r1
   13f94:	beq	14030 <error@@Base+0x1c3c>
   13f98:	ldr	r0, [sp, #12]
   13f9c:	movw	r1, #0
   13fa0:	cmp	r0, r1
   13fa4:	beq	13fac <error@@Base+0x1bb8>
   13fa8:	b	13fcc <error@@Base+0x1bd8>
   13fac:	ldr	r0, [pc, #136]	; 1403c <error@@Base+0x1c48>
   13fb0:	add	r0, pc, r0
   13fb4:	ldr	r1, [pc, #132]	; 14040 <error@@Base+0x1c4c>
   13fb8:	add	r1, pc, r1
   13fbc:	ldr	r2, [pc, #128]	; 14044 <error@@Base+0x1c50>
   13fc0:	add	r3, pc, r2
   13fc4:	movw	r2, #249	; 0xf9
   13fc8:	bl	10c40 <__assert_fail@plt>
   13fcc:	mov	r1, sp
   13fd0:	ldr	r0, [sp, #12]
   13fd4:	ldr	r0, [r0, #12]
   13fd8:	bl	10b08 <utf8proc_encode_char@plt>
   13fdc:	str	r0, [sp, #4]
   13fe0:	ldr	r0, [sp, #4]
   13fe4:	cmp	r0, #0
   13fe8:	bls	13ff0 <error@@Base+0x1bfc>
   13fec:	b	14010 <error@@Base+0x1c1c>
   13ff0:	ldr	r0, [pc, #80]	; 14048 <error@@Base+0x1c54>
   13ff4:	add	r0, pc, r0
   13ff8:	ldr	r1, [pc, #76]	; 1404c <error@@Base+0x1c58>
   13ffc:	add	r1, pc, r1
   14000:	ldr	r2, [pc, #72]	; 14050 <error@@Base+0x1c5c>
   14004:	add	r3, pc, r2
   14008:	movw	r2, #253	; 0xfd
   1400c:	bl	10c40 <__assert_fail@plt>
   14010:	ldr	r0, [sp, #4]
   14014:	ldr	r1, [sp, #8]
   14018:	add	r0, r1, r0
   1401c:	str	r0, [sp, #8]
   14020:	ldr	r0, [sp, #12]
   14024:	ldr	r0, [r0, #4]
   14028:	str	r0, [sp, #12]
   1402c:	b	13f88 <error@@Base+0x1b94>
   14030:	ldr	r0, [sp, #8]
   14034:	mov	sp, fp
   14038:	pop	{fp, pc}
   1403c:			; <UNDEFINED> instruction: 0x000043b6
   14040:	andeq	r4, r0, r5, lsl #7
   14044:			; <UNDEFINED> instruction: 0x000043b6
   14048:	muleq	r0, ip, r3
   1404c:	andeq	r4, r0, r1, asr #6
   14050:	andeq	r4, r0, r2, ror r3
   14054:	push	{fp, lr}
   14058:	mov	fp, sp
   1405c:	sub	sp, sp, #24
   14060:	str	r0, [fp, #-4]
   14064:	str	r1, [fp, #-8]
   14068:	str	r2, [sp, #12]
   1406c:	movw	r0, #0
   14070:	str	r0, [sp, #4]
   14074:	ldr	r0, [fp, #-8]
   14078:	str	r0, [sp, #8]
   1407c:	ldr	r0, [sp, #8]
   14080:	ldr	r1, [sp, #12]
   14084:	cmp	r0, r1
   14088:	beq	140f4 <error@@Base+0x1d00>
   1408c:	ldr	r0, [sp, #8]
   14090:	movw	r1, #0
   14094:	cmp	r0, r1
   14098:	beq	140a0 <error@@Base+0x1cac>
   1409c:	b	140c0 <error@@Base+0x1ccc>
   140a0:	ldr	r0, [pc, #104]	; 14110 <error@@Base+0x1d1c>
   140a4:	add	r0, pc, r0
   140a8:	ldr	r1, [pc, #100]	; 14114 <error@@Base+0x1d20>
   140ac:	add	r1, pc, r1
   140b0:	ldr	r2, [pc, #96]	; 14118 <error@@Base+0x1d24>
   140b4:	add	r3, pc, r2
   140b8:	movw	r2, #269	; 0x10d
   140bc:	bl	10c40 <__assert_fail@plt>
   140c0:	ldr	r0, [sp, #8]
   140c4:	ldr	r0, [r0, #12]
   140c8:	ldr	r1, [fp, #-4]
   140cc:	ldr	r2, [sp, #4]
   140d0:	add	r1, r1, r2
   140d4:	bl	10b08 <utf8proc_encode_char@plt>
   140d8:	ldr	r1, [sp, #4]
   140dc:	add	r0, r1, r0
   140e0:	str	r0, [sp, #4]
   140e4:	ldr	r0, [sp, #8]
   140e8:	ldr	r0, [r0, #4]
   140ec:	str	r0, [sp, #8]
   140f0:	b	1407c <error@@Base+0x1c88>
   140f4:	ldr	r0, [fp, #-4]
   140f8:	ldr	r1, [sp, #4]
   140fc:	add	r0, r0, r1
   14100:	movw	r1, #0
   14104:	strb	r1, [r0]
   14108:	mov	sp, fp
   1410c:	pop	{fp, pc}
   14110:	andeq	r4, r0, r2, asr #5
   14114:	muleq	r0, r1, r2
   14118:	andeq	r4, r0, pc, ror #5
   1411c:	push	{fp, lr}
   14120:	mov	fp, sp
   14124:	sub	sp, sp, #24
   14128:	ldr	r3, [pc, #96]	; 14190 <error@@Base+0x1d9c>
   1412c:	ldr	r3, [pc, r3]
   14130:	str	r0, [fp, #-4]
   14134:	strb	r1, [fp, #-5]
   14138:	str	r2, [sp, #12]
   1413c:	movw	r0, #1
   14140:	movw	r1, #16
   14144:	blx	r3
   14148:	ldr	r1, [pc, #60]	; 1418c <error@@Base+0x1d98>
   1414c:	ldr	r1, [pc, r1]
   14150:	str	r0, [sp, #8]
   14154:	ldrb	r0, [fp, #-5]
   14158:	ldr	r2, [sp, #8]
   1415c:	strb	r0, [r2, #8]
   14160:	ldr	r0, [sp, #12]
   14164:	ldr	r2, [sp, #8]
   14168:	str	r0, [r2, #12]
   1416c:	ldr	r0, [fp, #-4]
   14170:	ldr	r2, [sp, #8]
   14174:	str	r1, [sp, #4]
   14178:	mov	r1, r2
   1417c:	ldr	r2, [sp, #4]
   14180:	blx	r2
   14184:	mov	sp, fp
   14188:	pop	{fp, pc}
   1418c:	andeq	r4, r1, r4, lsl #31
   14190:	andeq	r4, r1, r0, ror #31
   14194:	push	{fp, lr}
   14198:	mov	fp, sp
   1419c:	sub	sp, sp, #64	; 0x40
   141a0:	str	r0, [fp, #-4]
   141a4:	str	r1, [fp, #-8]
   141a8:	str	r2, [fp, #-12]
   141ac:	ldr	r0, [fp, #-12]
   141b0:	ldrb	r0, [r0]
   141b4:	cmp	r0, #0
   141b8:	beq	141e8 <error@@Base+0x1df4>
   141bc:	ldr	r0, [fp, #-8]
   141c0:	movw	r1, #0
   141c4:	cmp	r0, r1
   141c8:	bne	141e8 <error@@Base+0x1df4>
   141cc:	ldr	r0, [pc, #404]	; 14368 <error@@Base+0x1f74>
   141d0:	add	r0, pc, r0
   141d4:	ldr	r1, [pc, #400]	; 1436c <error@@Base+0x1f78>
   141d8:	add	r1, pc, r1
   141dc:	ldr	r2, [pc, #396]	; 14370 <error@@Base+0x1f7c>
   141e0:	ldr	r2, [pc, r2]
   141e4:	blx	r2
   141e8:	ldr	r0, [pc, #388]	; 14374 <error@@Base+0x1f80>
   141ec:	add	r1, pc, r0
   141f0:	ldr	r0, [pc, #384]	; 14378 <error@@Base+0x1f84>
   141f4:	ldr	r0, [pc, r0]
   141f8:	ldr	r2, [fp, #-4]
   141fc:	ldr	r2, [r2, #4]
   14200:	str	r2, [fp, #-16]
   14204:	ldr	r2, [fp, #-8]
   14208:	str	r0, [fp, #-24]	; 0xffffffe8
   1420c:	mov	r0, r2
   14210:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14214:	blx	r2
   14218:	str	r0, [fp, #-20]	; 0xffffffec
   1421c:	ldr	r0, [fp, #-12]
   14220:	ldrsb	r0, [r0]
   14224:	cmp	r0, #0
   14228:	beq	1423c <error@@Base+0x1e48>
   1422c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14230:	bl	14380 <error@@Base+0x1f8c>
   14234:	ldr	r1, [fp, #-12]
   14238:	strb	r0, [r1, #11]
   1423c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14240:	ldr	r1, [fp, #-4]
   14244:	ldr	r2, [fp, #-12]
   14248:	ldrb	r2, [r2, #1]
   1424c:	ldr	r3, [fp, #-12]
   14250:	ldr	r3, [r3, #4]
   14254:	cmp	r3, #0
   14258:	str	r0, [fp, #-28]	; 0xffffffe4
   1425c:	str	r1, [sp, #32]
   14260:	str	r2, [sp, #28]
   14264:	beq	14278 <error@@Base+0x1e84>
   14268:	ldr	r0, [fp, #-12]
   1426c:	ldr	r0, [r0, #4]
   14270:	str	r0, [sp, #24]
   14274:	b	14284 <error@@Base+0x1e90>
   14278:	movw	r0, #94	; 0x5e
   1427c:	str	r0, [sp, #24]
   14280:	b	14284 <error@@Base+0x1e90>
   14284:	ldr	r0, [sp, #24]
   14288:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1428c:	str	r0, [sp, #20]
   14290:	mov	r0, r1
   14294:	ldr	r1, [sp, #32]
   14298:	ldr	r2, [sp, #28]
   1429c:	ldr	r3, [sp, #20]
   142a0:	bl	14478 <error@@Base+0x2084>
   142a4:	ldr	r0, [pc, #208]	; 1437c <error@@Base+0x1f88>
   142a8:	ldr	r0, [pc, r0]
   142ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   142b0:	str	r0, [sp, #16]
   142b4:	mov	r0, r1
   142b8:	ldr	r1, [sp, #16]
   142bc:	blx	r1
   142c0:	ldr	r0, [fp, #-12]
   142c4:	ldrsb	r0, [r0, #9]
   142c8:	cmp	r0, #0
   142cc:	beq	1431c <error@@Base+0x1f28>
   142d0:	ldr	r0, [fp, #-4]
   142d4:	ldr	r1, [fp, #-16]
   142d8:	movw	r2, #0
   142dc:	cmp	r1, r2
   142e0:	str	r0, [sp, #12]
   142e4:	beq	142f8 <error@@Base+0x1f04>
   142e8:	ldr	r0, [fp, #-16]
   142ec:	ldr	r0, [r0, #4]
   142f0:	str	r0, [sp, #8]
   142f4:	b	14304 <error@@Base+0x1f10>
   142f8:	ldr	r0, [fp, #-4]
   142fc:	ldr	r0, [r0]
   14300:	str	r0, [sp, #8]
   14304:	ldr	r0, [sp, #8]
   14308:	ldr	r1, [sp, #12]
   1430c:	str	r0, [sp, #4]
   14310:	mov	r0, r1
   14314:	ldr	r1, [sp, #4]
   14318:	bl	145f4 <error@@Base+0x2200>
   1431c:	ldr	r0, [fp, #-12]
   14320:	ldrsb	r0, [r0, #10]
   14324:	cmp	r0, #0
   14328:	beq	14360 <error@@Base+0x1f6c>
   1432c:	ldr	r0, [fp, #-16]
   14330:	movw	r1, #0
   14334:	cmp	r0, r1
   14338:	beq	1434c <error@@Base+0x1f58>
   1433c:	ldr	r0, [fp, #-16]
   14340:	ldr	r0, [r0, #4]
   14344:	str	r0, [sp]
   14348:	b	14358 <error@@Base+0x1f64>
   1434c:	ldr	r0, [fp, #-4]
   14350:	ldr	r0, [r0]
   14354:	str	r0, [sp]
   14358:	ldr	r0, [sp]
   1435c:	bl	1479c <error@@Base+0x23a8>
   14360:	mov	sp, fp
   14364:	pop	{fp, pc}
   14368:	andeq	r4, r0, fp, ror #3
   1436c:	strdeq	r4, [r0], -r3
   14370:	andeq	r4, r1, r8, lsr pc
   14374:	muleq	r0, r9, r2
   14378:			; <UNDEFINED> instruction: 0x00014ebc
   1437c:	andeq	r4, r1, r4, ror #27
   14380:	push	{fp, lr}
   14384:	mov	fp, sp
   14388:	sub	sp, sp, #120	; 0x78
   1438c:	add	r1, sp, #12
   14390:	str	r0, [fp, #-8]
   14394:	movw	r0, #0
   14398:	strh	r0, [sp, #10]
   1439c:	ldr	r2, [fp, #-8]
   143a0:	mov	r0, r1
   143a4:	movw	r1, #99	; 0x63
   143a8:	bl	10afc <fgets@plt>
   143ac:	movw	r1, #0
   143b0:	cmp	r0, r1
   143b4:	beq	14454 <error@@Base+0x2060>
   143b8:	ldr	r0, [pc, #176]	; 14470 <error@@Base+0x207c>
   143bc:	add	r1, pc, r0
   143c0:	add	r0, sp, #12
   143c4:	movw	r2, #51	; 0x33
   143c8:	bl	10c1c <strncmp@plt>
   143cc:	cmp	r0, #0
   143d0:	bne	14454 <error@@Base+0x2060>
   143d4:	b	143d8 <error@@Base+0x1fe4>
   143d8:	ldrsh	r0, [sp, #10]
   143dc:	cmp	r0, #2
   143e0:	movw	r0, #0
   143e4:	str	r0, [sp, #4]
   143e8:	bge	14410 <error@@Base+0x201c>
   143ec:	add	r0, sp, #12
   143f0:	ldr	r2, [fp, #-8]
   143f4:	movw	r1, #99	; 0x63
   143f8:	bl	10afc <fgets@plt>
   143fc:	movw	r1, #0
   14400:	cmp	r0, r1
   14404:	movw	r0, #0
   14408:	movne	r0, #1
   1440c:	str	r0, [sp, #4]
   14410:	ldr	r0, [sp, #4]
   14414:	tst	r0, #1
   14418:	beq	14448 <error@@Base+0x2054>
   1441c:	add	r0, sp, #12
   14420:	ldr	r1, [pc, #76]	; 14474 <error@@Base+0x2080>
   14424:	add	r1, pc, r1
   14428:	bl	10ac0 <strcmp@plt>
   1442c:	cmp	r0, #0
   14430:	bne	14444 <error@@Base+0x2050>
   14434:	ldrh	r0, [sp, #10]
   14438:	movw	r1, #1
   1443c:	add	r0, r0, r1
   14440:	strh	r0, [sp, #10]
   14444:	b	143d8 <error@@Base+0x1fe4>
   14448:	movw	r0, #1
   1444c:	strb	r0, [fp, #-1]
   14450:	b	14464 <error@@Base+0x2070>
   14454:	ldr	r0, [fp, #-8]
   14458:	bl	10b20 <rewind@plt>
   1445c:	movw	r0, #0
   14460:	strb	r0, [fp, #-1]
   14464:	ldrb	r0, [fp, #-1]
   14468:	mov	sp, fp
   1446c:	pop	{fp, pc}
   14470:	andeq	r4, r0, r3, asr #32
   14474:	andeq	r4, r0, r3, lsl r0
   14478:	push	{fp, lr}
   1447c:	mov	fp, sp
   14480:	sub	sp, sp, #48	; 0x30
   14484:	str	r0, [fp, #-4]
   14488:	str	r1, [fp, #-8]
   1448c:	strb	r2, [fp, #-9]
   14490:	str	r3, [fp, #-16]
   14494:	movw	r0, #0
   14498:	strb	r0, [fp, #-17]	; 0xffffffef
   1449c:	ldr	r0, [fp, #-4]
   144a0:	bl	10c34 <getc@plt>
   144a4:	str	r0, [sp, #20]
   144a8:	ldr	r0, [sp, #20]
   144ac:	cmn	r0, #1
   144b0:	beq	145d4 <error@@Base+0x21e0>
   144b4:	ldr	r0, [pc, #288]	; 145dc <error@@Base+0x21e8>
   144b8:	ldr	r0, [pc, r0]
   144bc:	ldr	r1, [sp, #20]
   144c0:	add	r0, r0, r1
   144c4:	ldrsb	r0, [r0]
   144c8:	str	r0, [sp, #8]
   144cc:	ldr	r0, [sp, #8]
   144d0:	cmp	r0, #1
   144d4:	bge	144ec <error@@Base+0x20f8>
   144d8:	ldr	r0, [pc, #268]	; 145ec <error@@Base+0x21f8>
   144dc:	add	r0, pc, r0
   144e0:	ldr	r1, [pc, #264]	; 145f0 <error@@Base+0x21fc>
   144e4:	ldr	r1, [pc, r1]
   144e8:	blx	r1
   144ec:	ldr	r0, [sp, #20]
   144f0:	strb	r0, [fp, #-21]	; 0xffffffeb
   144f4:	ldr	r0, [sp, #8]
   144f8:	cmp	r0, #1
   144fc:	ble	1454c <error@@Base+0x2158>
   14500:	sub	r0, fp, #21
   14504:	add	r0, r0, #1
   14508:	ldr	r1, [sp, #8]
   1450c:	sub	r2, r1, #1
   14510:	ldr	r3, [fp, #-4]
   14514:	movw	r1, #1
   14518:	bl	10b44 <fread@plt>
   1451c:	str	r0, [sp, #16]
   14520:	ldr	r0, [sp, #16]
   14524:	ldr	r1, [sp, #8]
   14528:	sub	r1, r1, #1
   1452c:	cmp	r0, r1
   14530:	beq	14548 <error@@Base+0x2154>
   14534:	ldr	r0, [pc, #168]	; 145e4 <error@@Base+0x21f0>
   14538:	add	r0, pc, r0
   1453c:	ldr	r1, [pc, #164]	; 145e8 <error@@Base+0x21f4>
   14540:	ldr	r1, [pc, r1]
   14544:	blx	r1
   14548:	b	1454c <error@@Base+0x2158>
   1454c:	sub	r0, fp, #21
   14550:	movw	r1, #4
   14554:	add	r2, sp, #4
   14558:	bl	10b50 <utf8proc_iterate@plt>
   1455c:	str	r0, [sp, #12]
   14560:	ldr	r0, [sp, #12]
   14564:	ldr	r1, [sp, #8]
   14568:	cmp	r0, r1
   1456c:	beq	14584 <error@@Base+0x2190>
   14570:	ldr	r0, [sp, #12]
   14574:	bl	10c04 <utf8proc_errmsg@plt>
   14578:	ldr	r1, [pc, #96]	; 145e0 <error@@Base+0x21ec>
   1457c:	ldr	r1, [pc, r1]
   14580:	blx	r1
   14584:	ldrb	r0, [fp, #-9]
   14588:	cmp	r0, #0
   1458c:	beq	145ac <error@@Base+0x21b8>
   14590:	ldr	r0, [sp, #4]
   14594:	ldr	r1, [fp, #-16]
   14598:	cmp	r0, r1
   1459c:	bne	145ac <error@@Base+0x21b8>
   145a0:	movw	r0, #1
   145a4:	strb	r0, [fp, #-17]	; 0xffffffef
   145a8:	b	145c4 <error@@Base+0x21d0>
   145ac:	ldr	r0, [fp, #-8]
   145b0:	ldrb	r1, [fp, #-17]	; 0xffffffef
   145b4:	ldr	r2, [sp, #4]
   145b8:	bl	1411c <error@@Base+0x1d28>
   145bc:	movw	r0, #0
   145c0:	strb	r0, [fp, #-17]	; 0xffffffef
   145c4:	ldr	r0, [fp, #-4]
   145c8:	bl	10c34 <getc@plt>
   145cc:	str	r0, [sp, #20]
   145d0:	b	144a8 <error@@Base+0x20b4>
   145d4:	mov	sp, fp
   145d8:	pop	{fp, pc}
   145dc:	andeq	r4, r1, r0, lsr ip
   145e0:	andeq	r4, r1, r8, lsr #22
   145e4:	andeq	r3, r0, pc, asr #30
   145e8:	andeq	r4, r1, r4, ror #22
   145ec:	muleq	r0, r3, pc	; <UNPREDICTABLE>
   145f0:	andeq	r4, r1, r0, asr #23
   145f4:	push	{fp, lr}
   145f8:	mov	fp, sp
   145fc:	sub	sp, sp, #24
   14600:	str	r0, [fp, #-4]
   14604:	str	r1, [fp, #-8]
   14608:	movw	r0, #0
   1460c:	strb	r0, [fp, #-9]
   14610:	ldr	r0, [fp, #-8]
   14614:	str	r0, [sp, #8]
   14618:	ldr	r0, [sp, #8]
   1461c:	movw	r1, #0
   14620:	cmp	r0, r1
   14624:	beq	14660 <error@@Base+0x226c>
   14628:	ldr	r0, [sp, #8]
   1462c:	ldr	r0, [r0, #12]
   14630:	bl	14c80 <error@@Base+0x288c>
   14634:	sxtb	r0, r0
   14638:	cmp	r0, #0
   1463c:	beq	1464c <error@@Base+0x2258>
   14640:	ldr	r0, [sp, #8]
   14644:	movw	r1, #32
   14648:	str	r1, [r0, #12]
   1464c:	b	14650 <error@@Base+0x225c>
   14650:	ldr	r0, [sp, #8]
   14654:	ldr	r0, [r0, #4]
   14658:	str	r0, [sp, #8]
   1465c:	b	14618 <error@@Base+0x2224>
   14660:	ldr	r0, [fp, #-8]
   14664:	str	r0, [sp, #8]
   14668:	ldr	r0, [sp, #8]
   1466c:	movw	r1, #0
   14670:	cmp	r0, r1
   14674:	beq	14790 <error@@Base+0x239c>
   14678:	ldr	r0, [sp, #8]
   1467c:	ldr	r0, [r0, #4]
   14680:	str	r0, [sp, #4]
   14684:	ldr	r0, [sp, #8]
   14688:	ldr	r0, [r0, #12]
   1468c:	cmp	r0, #32
   14690:	bne	146d0 <error@@Base+0x22dc>
   14694:	ldrsb	r0, [fp, #-9]
   14698:	cmp	r0, #0
   1469c:	beq	146ec <error@@Base+0x22f8>
   146a0:	ldr	r0, [sp, #4]
   146a4:	movw	r1, #0
   146a8:	cmp	r0, r1
   146ac:	beq	146ec <error@@Base+0x22f8>
   146b0:	ldr	r0, [sp, #4]
   146b4:	ldr	r0, [r0, #12]
   146b8:	cmp	r0, #32
   146bc:	beq	146ec <error@@Base+0x22f8>
   146c0:	ldr	r0, [sp, #4]
   146c4:	ldr	r0, [r0, #12]
   146c8:	cmp	r0, #10
   146cc:	beq	146ec <error@@Base+0x22f8>
   146d0:	ldr	r0, [sp, #8]
   146d4:	ldr	r0, [r0, #12]
   146d8:	cmp	r0, #10
   146dc:	bne	14760 <error@@Base+0x236c>
   146e0:	ldrsb	r0, [fp, #-9]
   146e4:	cmp	r0, #0
   146e8:	bne	14760 <error@@Base+0x236c>
   146ec:	ldrb	r0, [fp, #-9]
   146f0:	cmp	r0, #0
   146f4:	beq	14730 <error@@Base+0x233c>
   146f8:	ldr	r0, [sp, #4]
   146fc:	movw	r1, #0
   14700:	cmp	r0, r1
   14704:	beq	14730 <error@@Base+0x233c>
   14708:	ldr	r0, [sp, #4]
   1470c:	ldr	r0, [r0, #12]
   14710:	cmp	r0, #32
   14714:	bne	14730 <error@@Base+0x233c>
   14718:	ldr	r0, [sp, #8]
   1471c:	ldrb	r0, [r0, #8]
   14720:	ldr	r1, [sp, #4]
   14724:	ldrb	r2, [r1, #8]
   14728:	orr	r0, r2, r0
   1472c:	strb	r0, [r1, #8]
   14730:	ldr	r0, [pc, #96]	; 14798 <error@@Base+0x23a4>
   14734:	ldr	r0, [pc, r0]
   14738:	ldr	r1, [fp, #-4]
   1473c:	ldr	r2, [sp, #8]
   14740:	str	r0, [sp]
   14744:	mov	r0, r1
   14748:	mov	r1, r2
   1474c:	ldr	r2, [sp]
   14750:	blx	r2
   14754:	ldr	r0, [sp, #8]
   14758:	bl	10ae4 <free@plt>
   1475c:	b	14784 <error@@Base+0x2390>
   14760:	ldr	r0, [sp, #8]
   14764:	ldr	r0, [r0, #12]
   14768:	cmp	r0, #10
   1476c:	movw	r0, #0
   14770:	moveq	r0, #1
   14774:	tst	r0, #1
   14778:	movw	r0, #0
   1477c:	moveq	r0, #1
   14780:	strb	r0, [fp, #-9]
   14784:	ldr	r0, [sp, #4]
   14788:	str	r0, [sp, #8]
   1478c:	b	14668 <error@@Base+0x2274>
   14790:	mov	sp, fp
   14794:	pop	{fp, pc}
   14798:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1479c:	push	{fp, lr}
   147a0:	mov	fp, sp
   147a4:	sub	sp, sp, #8
   147a8:	str	r0, [sp, #4]
   147ac:	ldr	r0, [sp, #4]
   147b0:	str	r0, [sp]
   147b4:	ldr	r0, [sp]
   147b8:	movw	r1, #0
   147bc:	cmp	r0, r1
   147c0:	beq	147e8 <error@@Base+0x23f4>
   147c4:	ldr	r0, [sp]
   147c8:	ldr	r0, [r0, #12]
   147cc:	bl	10b2c <utf8proc_tolower@plt>
   147d0:	ldr	r1, [sp]
   147d4:	str	r0, [r1, #12]
   147d8:	ldr	r0, [sp]
   147dc:	ldr	r0, [r0, #4]
   147e0:	str	r0, [sp]
   147e4:	b	147b4 <error@@Base+0x23c0>
   147e8:	mov	sp, fp
   147ec:	pop	{fp, pc}
   147f0:	push	{fp, lr}
   147f4:	mov	fp, sp
   147f8:	sub	sp, sp, #16
   147fc:	str	r0, [fp, #-4]
   14800:	str	r1, [sp, #8]
   14804:	ldr	r0, [fp, #-4]
   14808:	ldr	r1, [sp, #8]
   1480c:	bl	10b08 <utf8proc_encode_char@plt>
   14810:	str	r0, [sp, #4]
   14814:	ldr	r0, [sp, #4]
   14818:	cmp	r0, #1
   1481c:	bge	14834 <error@@Base+0x2440>
   14820:	ldr	r0, [pc, #28]	; 14844 <error@@Base+0x2450>
   14824:	add	r0, pc, r0
   14828:	ldr	r1, [pc, #24]	; 14848 <error@@Base+0x2454>
   1482c:	ldr	r1, [pc, r1]
   14830:	blx	r1
   14834:	ldr	r0, [sp, #4]
   14838:	sxtb	r0, r0
   1483c:	mov	sp, fp
   14840:	pop	{fp, pc}
   14844:			; <UNDEFINED> instruction: 0x00003bb1
   14848:	andeq	r4, r1, r8, ror r8
   1484c:	push	{fp, lr}
   14850:	mov	fp, sp
   14854:	sub	sp, sp, #24
   14858:	strb	r0, [fp, #-1]
   1485c:	str	r1, [fp, #-8]
   14860:	str	r2, [sp, #12]
   14864:	strb	r3, [sp, #11]
   14868:	movw	r0, #0
   1486c:	strh	r0, [sp, #8]
   14870:	ldr	r0, [sp, #12]
   14874:	str	r0, [sp, #4]
   14878:	ldrsb	r0, [fp, #-1]
   1487c:	cmp	r0, #0
   14880:	beq	148a0 <error@@Base+0x24ac>
   14884:	ldr	r1, [sp, #4]
   14888:	movw	r0, #94	; 0x5e
   1488c:	bl	147f0 <error@@Base+0x23fc>
   14890:	sxtb	r0, r0
   14894:	ldrsh	r1, [sp, #8]
   14898:	add	r0, r1, r0
   1489c:	strh	r0, [sp, #8]
   148a0:	ldr	r0, [fp, #-8]
   148a4:	cmp	r0, #10
   148a8:	bne	148ec <error@@Base+0x24f8>
   148ac:	ldr	r0, [pc, #304]	; 149e4 <error@@Base+0x25f0>
   148b0:	add	r0, pc, r0
   148b4:	ldr	r1, [pc, #300]	; 149e8 <error@@Base+0x25f4>
   148b8:	add	r1, pc, r1
   148bc:	ldr	r2, [sp, #12]
   148c0:	ldrsh	r3, [sp, #8]
   148c4:	add	r2, r2, r3
   148c8:	ldrb	r3, [sp, #11]
   148cc:	cmp	r3, #0
   148d0:	movw	r3, #0
   148d4:	movne	r3, #1
   148d8:	tst	r3, #1
   148dc:	movne	r1, r0
   148e0:	mov	r0, r2
   148e4:	bl	10bec <sprintf@plt>
   148e8:	b	149d4 <error@@Base+0x25e0>
   148ec:	ldr	r0, [fp, #-8]
   148f0:	bl	149ec <error@@Base+0x25f8>
   148f4:	sxtb	r0, r0
   148f8:	cmp	r0, #0
   148fc:	beq	14984 <error@@Base+0x2590>
   14900:	ldr	r0, [fp, #-8]
   14904:	bl	14a6c <error@@Base+0x2678>
   14908:	sxtb	r0, r0
   1490c:	cmp	r0, #0
   14910:	beq	14938 <error@@Base+0x2544>
   14914:	ldr	r0, [sp, #4]
   14918:	ldrsh	r1, [sp, #8]
   1491c:	add	r1, r0, r1
   14920:	movw	r0, #9676	; 0x25cc
   14924:	bl	147f0 <error@@Base+0x23fc>
   14928:	sxtb	r0, r0
   1492c:	ldrsh	r1, [sp, #8]
   14930:	add	r0, r1, r0
   14934:	strh	r0, [sp, #8]
   14938:	ldr	r0, [fp, #-8]
   1493c:	ldr	r1, [sp, #4]
   14940:	ldrsh	r2, [sp, #8]
   14944:	add	r1, r1, r2
   14948:	bl	147f0 <error@@Base+0x23fc>
   1494c:	sxtb	r0, r0
   14950:	ldrsh	r1, [sp, #8]
   14954:	add	r0, r1, r0
   14958:	strh	r0, [sp, #8]
   1495c:	ldr	r0, [sp, #12]
   14960:	ldrh	r1, [sp, #8]
   14964:	movw	r2, #1
   14968:	add	r2, r1, r2
   1496c:	strh	r2, [sp, #8]
   14970:	sxth	r1, r1
   14974:	add	r0, r0, r1
   14978:	movw	r1, #0
   1497c:	strb	r1, [r0]
   14980:	b	149d0 <error@@Base+0x25dc>
   14984:	ldr	r0, [fp, #-8]
   14988:	cmp	r0, #256	; 0x100
   1498c:	bcs	149b0 <error@@Base+0x25bc>
   14990:	ldr	r0, [pc, #72]	; 149e0 <error@@Base+0x25ec>
   14994:	add	r1, pc, r0
   14998:	ldr	r0, [sp, #12]
   1499c:	ldrsh	r2, [sp, #8]
   149a0:	add	r0, r0, r2
   149a4:	ldr	r2, [fp, #-8]
   149a8:	bl	10bec <sprintf@plt>
   149ac:	b	149cc <error@@Base+0x25d8>
   149b0:	ldr	r0, [pc, #36]	; 149dc <error@@Base+0x25e8>
   149b4:	add	r1, pc, r0
   149b8:	ldr	r0, [sp, #12]
   149bc:	ldrsh	r2, [sp, #8]
   149c0:	add	r0, r0, r2
   149c4:	ldr	r2, [fp, #-8]
   149c8:	bl	10bec <sprintf@plt>
   149cc:	b	149d0 <error@@Base+0x25dc>
   149d0:	b	149d4 <error@@Base+0x25e0>
   149d4:	mov	sp, fp
   149d8:	pop	{fp, pc}
   149dc:	andeq	r3, r0, r4, asr #20
   149e0:	andeq	r3, r0, sp, asr sl
   149e4:	andeq	r3, r0, ip, lsr fp
   149e8:	andeq	r0, r0, r8, lsl r5
   149ec:	push	{fp, lr}
   149f0:	mov	fp, sp
   149f4:	sub	sp, sp, #16
   149f8:	str	r0, [sp, #8]
   149fc:	ldr	r0, [sp, #8]
   14a00:	bl	10af0 <utf8proc_get_property@plt>
   14a04:	str	r0, [sp, #4]
   14a08:	ldr	r0, [sp, #8]
   14a0c:	cmp	r0, #32
   14a10:	bne	14a20 <error@@Base+0x262c>
   14a14:	movw	r0, #1
   14a18:	strb	r0, [fp, #-1]
   14a1c:	b	14a60 <error@@Base+0x266c>
   14a20:	ldr	r0, [sp, #4]
   14a24:	ldrsh	r0, [r0]
   14a28:	sub	r1, r0, #1
   14a2c:	cmp	r1, #22
   14a30:	str	r0, [sp]
   14a34:	bcc	14a4c <error@@Base+0x2658>
   14a38:	b	14a3c <error@@Base+0x2648>
   14a3c:	ldr	r0, [sp]
   14a40:	cmp	r0, #29
   14a44:	bne	14a58 <error@@Base+0x2664>
   14a48:	b	14a4c <error@@Base+0x2658>
   14a4c:	movw	r0, #1
   14a50:	strb	r0, [fp, #-1]
   14a54:	b	14a60 <error@@Base+0x266c>
   14a58:	movw	r0, #0
   14a5c:	strb	r0, [fp, #-1]
   14a60:	ldrb	r0, [fp, #-1]
   14a64:	mov	sp, fp
   14a68:	pop	{fp, pc}
   14a6c:	push	{fp, lr}
   14a70:	mov	fp, sp
   14a74:	sub	sp, sp, #8
   14a78:	str	r0, [sp]
   14a7c:	ldr	r0, [sp]
   14a80:	bl	10b98 <utf8proc_category@plt>
   14a84:	sub	r0, r0, #6
   14a88:	cmp	r0, #2
   14a8c:	bhi	14aa0 <error@@Base+0x26ac>
   14a90:	b	14a94 <error@@Base+0x26a0>
   14a94:	movw	r0, #1
   14a98:	strb	r0, [fp, #-1]
   14a9c:	b	14aa8 <error@@Base+0x26b4>
   14aa0:	movw	r0, #0
   14aa4:	strb	r0, [fp, #-1]
   14aa8:	ldrb	r0, [fp, #-1]
   14aac:	mov	sp, fp
   14ab0:	pop	{fp, pc}
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	sub	sp, sp, #48	; 0x30
   14ac0:	ldr	r3, [pc, #252]	; 14bc4 <error@@Base+0x27d0>
   14ac4:	add	r3, pc, r3
   14ac8:	ldr	ip, [pc, #248]	; 14bc8 <error@@Base+0x27d4>
   14acc:	ldr	ip, [pc, ip]
   14ad0:	str	r0, [fp, #-4]
   14ad4:	str	r1, [fp, #-8]
   14ad8:	str	r2, [fp, #-12]
   14adc:	ldr	r0, [fp, #-8]
   14ae0:	mov	r1, r3
   14ae4:	blx	ip
   14ae8:	str	r0, [fp, #-16]
   14aec:	ldr	r0, [fp, #-12]
   14af0:	movw	r1, #0
   14af4:	cmp	r0, r1
   14af8:	beq	14b4c <error@@Base+0x2758>
   14afc:	ldr	r0, [pc, #208]	; 14bd4 <error@@Base+0x27e0>
   14b00:	add	r0, pc, r0
   14b04:	ldr	r1, [fp, #-16]
   14b08:	bl	10c10 <fputs@plt>
   14b0c:	ldr	r1, [pc, #188]	; 14bd0 <error@@Base+0x27dc>
   14b10:	add	r1, pc, r1
   14b14:	ldr	r2, [fp, #-16]
   14b18:	str	r0, [sp, #12]
   14b1c:	mov	r0, r1
   14b20:	mov	r1, r2
   14b24:	bl	10c10 <fputs@plt>
   14b28:	ldr	r1, [fp, #-12]
   14b2c:	ldr	r2, [fp, #-16]
   14b30:	str	r0, [sp, #8]
   14b34:	mov	r0, r2
   14b38:	blx	r1
   14b3c:	ldr	r0, [pc, #136]	; 14bcc <error@@Base+0x27d8>
   14b40:	add	r0, pc, r0
   14b44:	ldr	r1, [fp, #-16]
   14b48:	bl	10c10 <fputs@plt>
   14b4c:	ldr	r0, [fp, #-4]
   14b50:	ldr	r0, [r0]
   14b54:	str	r0, [fp, #-20]	; 0xffffffec
   14b58:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b5c:	movw	r1, #0
   14b60:	cmp	r0, r1
   14b64:	beq	14ba0 <error@@Base+0x27ac>
   14b68:	add	r2, sp, #19
   14b6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b70:	ldrb	r0, [r0, #8]
   14b74:	ldr	r1, [fp, #-20]	; 0xffffffec
   14b78:	ldr	r1, [r1, #12]
   14b7c:	movw	r3, #0
   14b80:	bl	1484c <error@@Base+0x2458>
   14b84:	add	r0, sp, #19
   14b88:	ldr	r1, [fp, #-16]
   14b8c:	bl	10c10 <fputs@plt>
   14b90:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b94:	ldr	r0, [r0, #4]
   14b98:	str	r0, [fp, #-20]	; 0xffffffec
   14b9c:	b	14b58 <error@@Base+0x2764>
   14ba0:	ldr	r0, [pc, #48]	; 14bd8 <error@@Base+0x27e4>
   14ba4:	ldr	r0, [pc, r0]
   14ba8:	ldr	r1, [fp, #-16]
   14bac:	str	r0, [sp, #4]
   14bb0:	mov	r0, r1
   14bb4:	ldr	r1, [sp, #4]
   14bb8:	blx	r1
   14bbc:	mov	sp, fp
   14bc0:	pop	{fp, pc}
   14bc4:	andeq	r0, r0, sp, lsr r4
   14bc8:	andeq	r4, r1, r4, ror #11
   14bcc:	strdeq	r3, [r0], -r7
   14bd0:	andeq	r3, r0, r7, lsr #18
   14bd4:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   14bd8:	andeq	r4, r1, r8, ror #9
   14bdc:	push	{fp, lr}
   14be0:	mov	fp, sp
   14be4:	sub	sp, sp, #24
   14be8:	str	r0, [fp, #-8]
   14bec:	str	r1, [sp, #12]
   14bf0:	ldr	r0, [sp, #12]
   14bf4:	str	r0, [sp, #8]
   14bf8:	movw	r0, #0
   14bfc:	str	r0, [sp, #4]
   14c00:	str	r0, [sp]
   14c04:	ldr	r0, [sp, #12]
   14c08:	str	r0, [sp, #8]
   14c0c:	ldr	r0, [sp, #8]
   14c10:	ldrb	r0, [r0]
   14c14:	cmp	r0, #0
   14c18:	beq	14c6c <error@@Base+0x2878>
   14c1c:	ldr	r0, [sp, #8]
   14c20:	mvn	r1, #0
   14c24:	mov	r2, sp
   14c28:	bl	10b50 <utf8proc_iterate@plt>
   14c2c:	str	r0, [sp, #4]
   14c30:	ldr	r0, [sp, #4]
   14c34:	cmp	r0, #1
   14c38:	bge	14c48 <error@@Base+0x2854>
   14c3c:	movw	r0, #0
   14c40:	strb	r0, [fp, #-1]
   14c44:	b	14c74 <error@@Base+0x2880>
   14c48:	ldr	r0, [fp, #-8]
   14c4c:	ldr	r2, [sp]
   14c50:	movw	r1, #0
   14c54:	bl	1411c <error@@Base+0x1d28>
   14c58:	ldr	r0, [sp, #4]
   14c5c:	ldr	r1, [sp, #8]
   14c60:	add	r0, r1, r0
   14c64:	str	r0, [sp, #8]
   14c68:	b	14c0c <error@@Base+0x2818>
   14c6c:	movw	r0, #1
   14c70:	strb	r0, [fp, #-1]
   14c74:	ldrb	r0, [fp, #-1]
   14c78:	mov	sp, fp
   14c7c:	pop	{fp, pc}
   14c80:	push	{fp, lr}
   14c84:	mov	fp, sp
   14c88:	sub	sp, sp, #16
   14c8c:	str	r0, [sp, #8]
   14c90:	ldr	r0, [sp, #8]
   14c94:	bl	10af0 <utf8proc_get_property@plt>
   14c98:	str	r0, [sp, #4]
   14c9c:	ldr	r0, [sp, #8]
   14ca0:	cmp	r0, #9
   14ca4:	str	r0, [sp]
   14ca8:	beq	14cf0 <error@@Base+0x28fc>
   14cac:	b	14cb0 <error@@Base+0x28bc>
   14cb0:	ldr	r0, [sp]
   14cb4:	cmp	r0, #10
   14cb8:	beq	14ce4 <error@@Base+0x28f0>
   14cbc:	b	14cc0 <error@@Base+0x28cc>
   14cc0:	ldr	r0, [sp]
   14cc4:	sub	r1, r0, #11
   14cc8:	cmp	r1, #3
   14ccc:	bcc	14cf0 <error@@Base+0x28fc>
   14cd0:	b	14cd4 <error@@Base+0x28e0>
   14cd4:	ldr	r0, [sp]
   14cd8:	cmp	r0, #160	; 0xa0
   14cdc:	beq	14cf0 <error@@Base+0x28fc>
   14ce0:	b	14cfc <error@@Base+0x2908>
   14ce4:	movw	r0, #0
   14ce8:	strb	r0, [fp, #-1]
   14cec:	b	14d28 <error@@Base+0x2934>
   14cf0:	movw	r0, #1
   14cf4:	strb	r0, [fp, #-1]
   14cf8:	b	14d28 <error@@Base+0x2934>
   14cfc:	ldr	r0, [sp, #4]
   14d00:	ldrsh	r0, [r0]
   14d04:	sub	r0, r0, #23
   14d08:	cmp	r0, #2
   14d0c:	bhi	14d20 <error@@Base+0x292c>
   14d10:	b	14d14 <error@@Base+0x2920>
   14d14:	movw	r0, #1
   14d18:	strb	r0, [fp, #-1]
   14d1c:	b	14d28 <error@@Base+0x2934>
   14d20:	movw	r0, #0
   14d24:	strb	r0, [fp, #-1]
   14d28:	ldrb	r0, [fp, #-1]
   14d2c:	mov	sp, fp
   14d30:	pop	{fp, pc}
   14d34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d38:	mov	r7, r0
   14d3c:	ldr	r6, [pc, #72]	; 14d8c <error@@Base+0x2998>
   14d40:	ldr	r5, [pc, #72]	; 14d90 <error@@Base+0x299c>
   14d44:	add	r6, pc, r6
   14d48:	add	r5, pc, r5
   14d4c:	sub	r6, r6, r5
   14d50:	mov	r8, r1
   14d54:	mov	r9, r2
   14d58:	bl	10a94 <calloc@plt-0x20>
   14d5c:	asrs	r6, r6, #2
   14d60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d64:	mov	r4, #0
   14d68:	add	r4, r4, #1
   14d6c:	ldr	r3, [r5], #4
   14d70:	mov	r2, r9
   14d74:	mov	r1, r8
   14d78:	mov	r0, r7
   14d7c:	blx	r3
   14d80:	cmp	r6, r4
   14d84:	bne	14d68 <error@@Base+0x2974>
   14d88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d8c:			; <UNDEFINED> instruction: 0x000141b0
   14d90:	andeq	r4, r1, r8, lsr #3
   14d94:	bx	lr
   14d98:	mov	r2, r1
   14d9c:	mov	r1, r0
   14da0:	mov	r0, #3
   14da4:	b	10b38 <__xstat@plt>

Disassembly of section .fini:

00014da8 <.fini>:
   14da8:	push	{r3, lr}
   14dac:	pop	{r3, pc}
