
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011d60 <.init>:
   11d60:	push	{r3, lr}
   11d64:	bl	11f9c <_start@@Base+0x3c>
   11d68:	pop	{r3, pc}

Disassembly of section .plt:

00011d6c <fdopen@plt-0x14>:
   11d6c:	push	{lr}		; (str lr, [sp, #-4]!)
   11d70:	ldr	lr, [pc, #4]	; 11d7c <fdopen@plt-0x4>
   11d74:	add	lr, pc, lr
   11d78:	ldr	pc, [lr, #8]!
   11d7c:	andeq	lr, r1, r4, lsl #5

00011d80 <fdopen@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #122880	; 0x1e000
   11d88:	ldr	pc, [ip, #644]!	; 0x284

00011d8c <setbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #122880	; 0x1e000
   11d94:	ldr	pc, [ip, #636]!	; 0x27c

00011d98 <strtol@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #122880	; 0x1e000
   11da0:	ldr	pc, [ip, #628]!	; 0x274

00011da4 <printf@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #122880	; 0x1e000
   11dac:	ldr	pc, [ip, #620]!	; 0x26c

00011db0 <fflush@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #122880	; 0x1e000
   11db8:	ldr	pc, [ip, #612]!	; 0x264

00011dbc <free@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #122880	; 0x1e000
   11dc4:	ldr	pc, [ip, #604]!	; 0x25c

00011dc8 <memcpy@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #122880	; 0x1e000
   11dd0:	ldr	pc, [ip, #596]!	; 0x254

00011dd4 <mmap64@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #122880	; 0x1e000
   11ddc:	ldr	pc, [ip, #588]!	; 0x24c

00011de0 <ftell@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #122880	; 0x1e000
   11de8:	ldr	pc, [ip, #580]!	; 0x244

00011dec <uname@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #122880	; 0x1e000
   11df4:	ldr	pc, [ip, #572]!	; 0x23c

00011df8 <strdup@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #122880	; 0x1e000
   11e00:	ldr	pc, [ip, #564]!	; 0x234

00011e04 <realloc@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #122880	; 0x1e000
   11e0c:	ldr	pc, [ip, #556]!	; 0x22c

00011e10 <fwrite@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #122880	; 0x1e000
   11e18:	ldr	pc, [ip, #548]!	; 0x224

00011e1c <open64@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #122880	; 0x1e000
   11e24:	ldr	pc, [ip, #540]!	; 0x21c

00011e28 <getenv@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #122880	; 0x1e000
   11e30:	ldr	pc, [ip, #532]!	; 0x214

00011e34 <malloc@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #122880	; 0x1e000
   11e3c:	ldr	pc, [ip, #524]!	; 0x20c

00011e40 <__libc_start_main@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #122880	; 0x1e000
   11e48:	ldr	pc, [ip, #516]!	; 0x204

00011e4c <strerror@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #122880	; 0x1e000
   11e54:	ldr	pc, [ip, #508]!	; 0x1fc

00011e58 <__gmon_start__@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #122880	; 0x1e000
   11e60:	ldr	pc, [ip, #500]!	; 0x1f4

00011e64 <getpid@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #122880	; 0x1e000
   11e6c:	ldr	pc, [ip, #492]!	; 0x1ec

00011e70 <exit@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #122880	; 0x1e000
   11e78:	ldr	pc, [ip, #484]!	; 0x1e4

00011e7c <strlen@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #122880	; 0x1e000
   11e84:	ldr	pc, [ip, #476]!	; 0x1dc

00011e88 <strchr@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #122880	; 0x1e000
   11e90:	ldr	pc, [ip, #468]!	; 0x1d4

00011e94 <fprintf@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #122880	; 0x1e000
   11e9c:	ldr	pc, [ip, #460]!	; 0x1cc

00011ea0 <__errno_location@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #122880	; 0x1e000
   11ea8:	ldr	pc, [ip, #452]!	; 0x1c4

00011eac <__cxa_atexit@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #122880	; 0x1e000
   11eb4:	ldr	pc, [ip, #444]!	; 0x1bc

00011eb8 <mkdir@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #122880	; 0x1e000
   11ec0:	ldr	pc, [ip, #436]!	; 0x1b4

00011ec4 <memset@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #122880	; 0x1e000
   11ecc:	ldr	pc, [ip, #428]!	; 0x1ac

00011ed0 <strncpy@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #122880	; 0x1e000
   11ed8:	ldr	pc, [ip, #420]!	; 0x1a4

00011edc <prctl@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #122880	; 0x1e000
   11ee4:	ldr	pc, [ip, #412]!	; 0x19c

00011ee8 <fclose@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #122880	; 0x1e000
   11ef0:	ldr	pc, [ip, #404]!	; 0x194

00011ef4 <strnlen@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #122880	; 0x1e000
   11efc:	ldr	pc, [ip, #396]!	; 0x18c

00011f00 <munmap@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #122880	; 0x1e000
   11f08:	ldr	pc, [ip, #388]!	; 0x184

00011f0c <fcntl64@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #122880	; 0x1e000
   11f14:	ldr	pc, [ip, #380]!	; 0x17c

00011f18 <strrchr@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #122880	; 0x1e000
   11f20:	ldr	pc, [ip, #372]!	; 0x174

00011f24 <msync@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #122880	; 0x1e000
   11f2c:	ldr	pc, [ip, #364]!	; 0x16c

00011f30 <fseek@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #122880	; 0x1e000
   11f38:	ldr	pc, [ip, #356]!	; 0x164

00011f3c <strncmp@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #122880	; 0x1e000
   11f44:	ldr	pc, [ip, #348]!	; 0x15c

00011f48 <abort@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #122880	; 0x1e000
   11f50:	ldr	pc, [ip, #340]!	; 0x154

00011f54 <__assert_fail@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #122880	; 0x1e000
   11f5c:	ldr	pc, [ip, #332]!	; 0x14c

Disassembly of section .text:

00011f60 <_start@@Base>:
   11f60:	mov	fp, #0
   11f64:	mov	lr, #0
   11f68:	pop	{r1}		; (ldr r1, [sp], #4)
   11f6c:	mov	r2, sp
   11f70:	push	{r2}		; (str r2, [sp, #-4]!)
   11f74:	push	{r0}		; (str r0, [sp, #-4]!)
   11f78:	ldr	ip, [pc, #16]	; 11f90 <_start@@Base+0x30>
   11f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f80:	ldr	r0, [pc, #12]	; 11f94 <_start@@Base+0x34>
   11f84:	ldr	r3, [pc, #12]	; 11f98 <_start@@Base+0x38>
   11f88:	bl	11e40 <__libc_start_main@plt>
   11f8c:	bl	11f48 <abort@plt>
   11f90:	muleq	r1, r4, sp
   11f94:			; <UNDEFINED> instruction: 0x000158bc
   11f98:	andeq	sp, r1, r4, lsr sp
   11f9c:	ldr	r3, [pc, #20]	; 11fb8 <_start@@Base+0x58>
   11fa0:	ldr	r2, [pc, #20]	; 11fbc <_start@@Base+0x5c>
   11fa4:	add	r3, pc, r3
   11fa8:	ldr	r2, [r3, r2]
   11fac:	cmp	r2, #0
   11fb0:	bxeq	lr
   11fb4:	b	11e58 <__gmon_start__@plt>
   11fb8:	andeq	lr, r1, r4, asr r0
   11fbc:	andeq	r0, r0, r4, asr #1
   11fc0:	ldr	r0, [pc, #24]	; 11fe0 <_start@@Base+0x80>
   11fc4:	ldr	r3, [pc, #24]	; 11fe4 <_start@@Base+0x84>
   11fc8:	cmp	r3, r0
   11fcc:	bxeq	lr
   11fd0:	ldr	r3, [pc, #16]	; 11fe8 <_start@@Base+0x88>
   11fd4:	cmp	r3, #0
   11fd8:	bxeq	lr
   11fdc:	bx	r3
   11fe0:	strdeq	r0, [r3], -r8
   11fe4:	strdeq	r0, [r3], -r8
   11fe8:	andeq	r0, r0, r0
   11fec:	ldr	r0, [pc, #36]	; 12018 <_start@@Base+0xb8>
   11ff0:	ldr	r1, [pc, #36]	; 1201c <_start@@Base+0xbc>
   11ff4:	sub	r1, r1, r0
   11ff8:	asr	r1, r1, #2
   11ffc:	add	r1, r1, r1, lsr #31
   12000:	asrs	r1, r1, #1
   12004:	bxeq	lr
   12008:	ldr	r3, [pc, #16]	; 12020 <_start@@Base+0xc0>
   1200c:	cmp	r3, #0
   12010:	bxeq	lr
   12014:	bx	r3
   12018:	strdeq	r0, [r3], -r8
   1201c:	strdeq	r0, [r3], -r8
   12020:	andeq	r0, r0, r0
   12024:	push	{r4, lr}
   12028:	ldr	r4, [pc, #24]	; 12048 <_start@@Base+0xe8>
   1202c:	ldrb	r3, [r4]
   12030:	cmp	r3, #0
   12034:	popne	{r4, pc}
   12038:	bl	11fc0 <_start@@Base+0x60>
   1203c:	mov	r3, #1
   12040:	strb	r3, [r4]
   12044:	pop	{r4, pc}
   12048:	andeq	r0, r3, r0, lsl #2
   1204c:	b	11fec <_start@@Base+0x8c>

00012050 <next@@Base>:
   12050:	push	{fp, lr}
   12054:	mov	fp, sp
   12058:	sub	sp, sp, #24
   1205c:	ldr	r1, [pc, #1016]	; 1245c <next@@Base+0x40c>
   12060:	add	r1, pc, r1
   12064:	ldr	r2, [r1, #4]
   12068:	ldr	r3, [pc, #1008]	; 12460 <next@@Base+0x410>
   1206c:	ldr	r3, [pc, r3]
   12070:	adds	r3, r3, #1
   12074:	adc	r2, r2, #0
   12078:	str	r3, [r1]
   1207c:	str	r2, [r1, #4]
   12080:	str	r0, [sp, #12]
   12084:	ldr	r0, [sp, #12]
   12088:	str	r0, [fp, #-8]
   1208c:	ldr	r1, [pc, #976]	; 12464 <next@@Base+0x414>
   12090:	ldr	r1, [pc, r1]
   12094:	ldr	r2, [fp, #-8]
   12098:	str	r2, [r1]
   1209c:	ldr	r1, [r1, #204]	; 0xcc
   120a0:	mov	r2, #0
   120a4:	cmp	r1, #50	; 0x32
   120a8:	movwcc	r2, #1
   120ac:	mov	r3, #16
   120b0:	cmp	r1, #50	; 0x32
   120b4:	movwcc	r3, #8
   120b8:	ldr	r1, [pc, #936]	; 12468 <next@@Base+0x418>
   120bc:	add	r1, pc, r1
   120c0:	ldr	r3, [r1, r3]!
   120c4:	ldr	ip, [r1, #4]
   120c8:	adds	r3, r3, #1
   120cc:	adc	ip, ip, #0
   120d0:	str	r3, [r1]
   120d4:	str	ip, [r1, #4]
   120d8:	tst	r2, #1
   120dc:	beq	12148 <next@@Base+0xf8>
   120e0:	ldr	r0, [pc, #864]	; 12448 <next@@Base+0x3f8>
   120e4:	ldr	r0, [pc, r0]
   120e8:	add	r0, r0, #4
   120ec:	ldr	r1, [pc, #888]	; 1246c <next@@Base+0x41c>
   120f0:	add	r1, pc, r1
   120f4:	ldr	r2, [r1, #24]
   120f8:	ldr	r3, [r1, #28]
   120fc:	adds	r2, r2, #1
   12100:	adc	r3, r3, #0
   12104:	str	r2, [r1, #24]
   12108:	str	r3, [r1, #28]
   1210c:	ldr	r1, [pc, #860]	; 12470 <next@@Base+0x420>
   12110:	ldr	r1, [pc, r1]
   12114:	ldr	r2, [r1, #204]	; 0xcc
   12118:	add	r1, r1, r2, lsl #2
   1211c:	add	r1, r1, #4
   12120:	ldrb	r2, [fp, #-8]
   12124:	strb	r2, [r1]
   12128:	ldrb	r2, [fp, #-7]
   1212c:	strb	r2, [r1, #1]
   12130:	ldrb	r2, [fp, #-6]
   12134:	strb	r2, [r1, #2]
   12138:	ldrb	r2, [fp, #-5]
   1213c:	strb	r2, [r1, #3]
   12140:	str	r0, [sp, #8]
   12144:	b	1217c <next@@Base+0x12c>
   12148:	ldr	r0, [pc, #756]	; 12444 <next@@Base+0x3f4>
   1214c:	ldr	r0, [pc, r0]
   12150:	ldr	r1, [pc, #796]	; 12474 <next@@Base+0x424>
   12154:	add	r1, pc, r1
   12158:	ldr	r2, [r1, #32]
   1215c:	ldr	r3, [r1, #36]	; 0x24
   12160:	adds	r2, r2, #1
   12164:	adc	r3, r3, #0
   12168:	str	r2, [r1, #32]
   1216c:	str	r3, [r1, #36]	; 0x24
   12170:	ldr	r1, [r0, #212]	; 0xd4
   12174:	add	r1, r1, #1
   12178:	str	r1, [r0, #212]	; 0xd4
   1217c:	ldr	r0, [pc, #756]	; 12478 <next@@Base+0x428>
   12180:	ldr	r0, [pc, r0]
   12184:	ldr	r1, [r0, #204]	; 0xcc
   12188:	add	r1, r1, #1
   1218c:	str	r1, [r0, #204]	; 0xcc
   12190:	ldr	r0, [pc, #740]	; 1247c <next@@Base+0x42c>
   12194:	ldr	r0, [pc, r0]
   12198:	ldr	r0, [r0, #200]	; 0xc8
   1219c:	mov	r1, #0
   121a0:	cmp	r0, #50	; 0x32
   121a4:	movwcc	r1, #1
   121a8:	mov	r2, #48	; 0x30
   121ac:	cmp	r0, #50	; 0x32
   121b0:	movwcc	r2, #40	; 0x28
   121b4:	ldr	r0, [pc, #708]	; 12480 <next@@Base+0x430>
   121b8:	add	r0, pc, r0
   121bc:	ldr	r2, [r0, r2]!
   121c0:	ldr	r3, [r0, #4]
   121c4:	adds	r2, r2, #1
   121c8:	adc	r3, r3, #0
   121cc:	str	r2, [r0]
   121d0:	str	r3, [r0, #4]
   121d4:	tst	r1, #1
   121d8:	beq	1222c <next@@Base+0x1dc>
   121dc:	ldr	r0, [pc, #616]	; 1244c <next@@Base+0x3fc>
   121e0:	ldr	r0, [pc, r0]
   121e4:	ldr	r1, [pc, #612]	; 12450 <next@@Base+0x400>
   121e8:	ldr	r1, [pc, r1]
   121ec:	ldr	r2, [pc, #656]	; 12484 <next@@Base+0x434>
   121f0:	add	r2, pc, r2
   121f4:	ldr	r3, [r2, #56]	; 0x38
   121f8:	ldr	ip, [r2, #60]	; 0x3c
   121fc:	adds	r3, r3, #1
   12200:	adc	ip, ip, #0
   12204:	str	r3, [r2, #56]	; 0x38
   12208:	str	ip, [r2, #60]	; 0x3c
   1220c:	ldr	r2, [pc, #628]	; 12488 <next@@Base+0x438>
   12210:	ldr	r2, [pc, r2]
   12214:	ldr	r3, [r2, #200]	; 0xc8
   12218:	add	ip, r3, #1
   1221c:	str	ip, [r2, #200]	; 0xc8
   12220:	add	r2, r2, r3, lsl #2
   12224:	str	r0, [r2]
   12228:	str	r1, [sp, #4]
   1222c:	ldr	r0, [pc, #600]	; 1248c <next@@Base+0x43c>
   12230:	ldr	r0, [pc, r0]
   12234:	ldr	r0, [r0, #232]	; 0xe8
   12238:	cmp	r0, #0
   1223c:	mov	r1, r0
   12240:	movwne	r1, #1
   12244:	mov	r2, #72	; 0x48
   12248:	cmp	r0, #0
   1224c:	movwne	r2, #64	; 0x40
   12250:	ldr	r0, [pc, #568]	; 12490 <next@@Base+0x440>
   12254:	add	r0, pc, r0
   12258:	ldr	r2, [r0, r2]!
   1225c:	ldr	r3, [r0, #4]
   12260:	adds	r2, r2, #1
   12264:	adc	r3, r3, #0
   12268:	str	r2, [r0]
   1226c:	str	r3, [r0, #4]
   12270:	tst	r1, #1
   12274:	beq	122c0 <next@@Base+0x270>
   12278:	ldr	r0, [pc, #472]	; 12458 <next@@Base+0x408>
   1227c:	ldr	r0, [pc, r0]
   12280:	ldr	r1, [pc, #524]	; 12494 <next@@Base+0x444>
   12284:	add	r1, pc, r1
   12288:	ldr	r2, [r1, #80]	; 0x50
   1228c:	ldr	r3, [r1, #84]	; 0x54
   12290:	adds	r2, r2, #1
   12294:	adc	r3, r3, #0
   12298:	str	r2, [r1, #80]	; 0x50
   1229c:	str	r3, [r1, #84]	; 0x54
   122a0:	ldr	r0, [r0, #232]	; 0xe8
   122a4:	ldr	r1, [fp, #-8]
   122a8:	str	r0, [sp]
   122ac:	mov	r0, r1
   122b0:	ldr	r1, [sp]
   122b4:	blx	r1
   122b8:	str	r0, [fp, #-4]
   122bc:	b	12418 <next@@Base+0x3c8>
   122c0:	ldr	r0, [pc, #464]	; 12498 <next@@Base+0x448>
   122c4:	ldr	r0, [pc, r0]
   122c8:	ldr	r0, [r0, #220]	; 0xdc
   122cc:	cmp	r0, #0
   122d0:	mov	r1, r0
   122d4:	movwne	r1, #1
   122d8:	mov	r2, #96	; 0x60
   122dc:	cmp	r0, #0
   122e0:	movwne	r2, #88	; 0x58
   122e4:	ldr	r0, [pc, #432]	; 1249c <next@@Base+0x44c>
   122e8:	add	r0, pc, r0
   122ec:	ldr	r2, [r0, r2]!
   122f0:	ldr	r3, [r0, #4]
   122f4:	adds	r2, r2, #1
   122f8:	adc	r3, r3, #0
   122fc:	str	r2, [r0]
   12300:	str	r3, [r0, #4]
   12304:	tst	r1, #1
   12308:	beq	123e8 <next@@Base+0x398>
   1230c:	ldr	r0, [pc, #396]	; 124a0 <next@@Base+0x450>
   12310:	ldr	r0, [pc, r0]
   12314:	ldr	r1, [r0, #220]	; 0xdc
   12318:	ldr	r0, [r0, #224]	; 0xe0
   1231c:	mov	r2, #0
   12320:	cmp	r0, r1
   12324:	movwlt	r2, #1
   12328:	mov	r3, #112	; 0x70
   1232c:	cmp	r0, r1
   12330:	movwlt	r3, #104	; 0x68
   12334:	ldr	r0, [pc, #360]	; 124a4 <next@@Base+0x454>
   12338:	add	r0, pc, r0
   1233c:	ldr	r1, [r0, r3]!
   12340:	ldr	r3, [r0, #4]
   12344:	adds	r1, r1, #1
   12348:	adc	r3, r3, #0
   1234c:	str	r1, [r0]
   12350:	str	r3, [r0, #4]
   12354:	tst	r2, #1
   12358:	beq	123a4 <next@@Base+0x354>
   1235c:	ldr	r0, [pc, #324]	; 124a8 <next@@Base+0x458>
   12360:	add	r0, pc, r0
   12364:	ldr	r1, [r0, #120]	; 0x78
   12368:	ldr	r2, [r0, #124]	; 0x7c
   1236c:	adds	r1, r1, #1
   12370:	adc	r2, r2, #0
   12374:	str	r1, [r0, #120]	; 0x78
   12378:	str	r2, [r0, #124]	; 0x7c
   1237c:	ldr	r0, [pc, #296]	; 124ac <next@@Base+0x45c>
   12380:	ldr	r0, [pc, r0]
   12384:	ldr	r1, [r0, #224]	; 0xe0
   12388:	ldr	r2, [r0, #228]	; 0xe4
   1238c:	add	r3, r1, #1
   12390:	str	r3, [r0, #224]	; 0xe0
   12394:	add	r0, r2, r1, lsl #2
   12398:	ldr	r0, [r0]
   1239c:	str	r0, [fp, #-4]
   123a0:	b	12418 <next@@Base+0x3c8>
   123a4:	ldr	r0, [pc, #260]	; 124b0 <next@@Base+0x460>
   123a8:	add	r0, pc, r0
   123ac:	ldr	r1, [r0, #128]	; 0x80
   123b0:	ldr	r2, [r0, #132]	; 0x84
   123b4:	adds	r1, r1, #1
   123b8:	adc	r2, r2, #0
   123bc:	str	r1, [r0, #128]	; 0x80
   123c0:	str	r2, [r0, #132]	; 0x84
   123c4:	ldr	r0, [pc, #232]	; 124b4 <next@@Base+0x464>
   123c8:	ldr	r0, [pc, r0]
   123cc:	ldr	r1, [r0, #220]	; 0xdc
   123d0:	ldr	r0, [r0, #228]	; 0xe4
   123d4:	sub	r1, r1, #1
   123d8:	add	r0, r0, r1, lsl #2
   123dc:	ldr	r0, [r0]
   123e0:	str	r0, [fp, #-4]
   123e4:	b	12418 <next@@Base+0x3c8>
   123e8:	ldr	r0, [pc, #100]	; 12454 <next@@Base+0x404>
   123ec:	ldr	r0, [pc, r0]
   123f0:	ldr	r1, [pc, #192]	; 124b8 <next@@Base+0x468>
   123f4:	add	r1, pc, r1
   123f8:	ldr	r2, [r1, #136]	; 0x88
   123fc:	ldr	r3, [r1, #140]	; 0x8c
   12400:	adds	r2, r2, #1
   12404:	adc	r3, r3, #0
   12408:	str	r2, [r1, #136]	; 0x88
   1240c:	str	r3, [r1, #140]	; 0x8c
   12410:	ldr	r0, [r0, #216]	; 0xd8
   12414:	str	r0, [fp, #-4]
   12418:	ldr	r0, [pc, #156]	; 124bc <next@@Base+0x46c>
   1241c:	add	r0, pc, r0
   12420:	ldr	r1, [r0, #144]	; 0x90
   12424:	ldr	r2, [r0, #148]	; 0x94
   12428:	adds	r1, r1, #1
   1242c:	adc	r2, r2, #0
   12430:	str	r1, [r0, #144]	; 0x90
   12434:	str	r2, [r0, #148]	; 0x94
   12438:	ldr	r0, [fp, #-4]
   1243c:	mov	sp, fp
   12440:	pop	{fp, pc}
   12444:	andeq	sp, r1, r4, ror pc
   12448:	ldrdeq	sp, [r1], -ip
   1244c:	ldrdeq	sp, [r1], -r8
   12450:	andeq	sp, r1, r4, ror #29
   12454:	ldrdeq	sp, [r1], -r4
   12458:	andeq	sp, r1, r4, asr #28
   1245c:	andeq	lr, r1, r8, lsr #1
   12460:	muleq	r1, ip, r0
   12464:	andeq	lr, r1, r0, lsr r0
   12468:	andeq	lr, r1, ip, asr #32
   1246c:	andeq	lr, r1, r8, lsl r0
   12470:			; <UNDEFINED> instruction: 0x0001dfb0
   12474:			; <UNDEFINED> instruction: 0x0001dfb4
   12478:	andeq	sp, r1, r0, asr #30
   1247c:	andeq	sp, r1, r8, lsr pc
   12480:	andeq	sp, r1, r0, asr pc
   12484:	andeq	sp, r1, r8, lsl pc
   12488:			; <UNDEFINED> instruction: 0x0001debc
   1248c:	muleq	r1, r0, lr
   12490:			; <UNDEFINED> instruction: 0x0001deb4
   12494:	andeq	sp, r1, r4, lsl #29
   12498:	strdeq	sp, [r1], -ip
   1249c:	andeq	sp, r1, r0, lsr #28
   124a0:			; <UNDEFINED> instruction: 0x0001ddb0
   124a4:	ldrdeq	sp, [r1], -r0
   124a8:	andeq	sp, r1, r8, lsr #27
   124ac:	andeq	sp, r1, r0, asr #26
   124b0:	andeq	sp, r1, r0, ror #26
   124b4:	strdeq	sp, [r1], -r8
   124b8:	andeq	sp, r1, r4, lsl sp
   124bc:	andeq	sp, r1, ip, ror #25

000124c0 <next_reset@@Base>:
   124c0:	push	{fp, lr}
   124c4:	mov	fp, sp
   124c8:	sub	sp, sp, #8
   124cc:	ldr	r0, [pc, #120]	; 1254c <next_reset@@Base+0x8c>
   124d0:	add	r0, pc, r0
   124d4:	ldr	r1, [r0, #4]
   124d8:	ldr	r2, [pc, #112]	; 12550 <next_reset@@Base+0x90>
   124dc:	ldr	r2, [pc, r2]
   124e0:	adds	r2, r2, #1
   124e4:	adc	r1, r1, #0
   124e8:	str	r2, [r0]
   124ec:	str	r1, [r0, #4]
   124f0:	ldr	r0, [pc, #80]	; 12548 <next_reset@@Base+0x88>
   124f4:	ldr	r0, [pc, r0]
   124f8:	mov	r1, r0
   124fc:	ldr	r2, [pc, #80]	; 12554 <next_reset@@Base+0x94>
   12500:	add	r2, pc, r2
   12504:	ldr	r3, [r2, #8]
   12508:	ldr	ip, [r2, #12]
   1250c:	adds	r3, r3, #1
   12510:	adc	ip, ip, #0
   12514:	str	r3, [r2, #8]
   12518:	str	ip, [r2, #12]
   1251c:	str	r0, [sp, #4]
   12520:	mov	r0, r1
   12524:	movw	r1, #0
   12528:	and	r1, r1, #255	; 0xff
   1252c:	movw	r2, #236	; 0xec
   12530:	bl	11ec4 <memset@plt>
   12534:	movw	r0, #50	; 0x32
   12538:	ldr	r1, [sp, #4]
   1253c:	str	r0, [r1, #208]	; 0xd0
   12540:	mov	sp, fp
   12544:	pop	{fp, pc}
   12548:	andeq	sp, r1, ip, asr #23
   1254c:	ldrdeq	sp, [r1], -r0
   12550:	andeq	sp, r1, r4, asr #25
   12554:	andeq	sp, r1, r0, lsr #25

00012558 <push_back@@Base>:
   12558:	push	{fp, lr}
   1255c:	mov	fp, sp
   12560:	sub	sp, sp, #32
   12564:	ldr	r2, [pc, #700]	; 12828 <push_back@@Base+0x2d0>
   12568:	add	r2, pc, r2
   1256c:	ldr	r3, [r2, #4]
   12570:	ldr	ip, [pc, #692]	; 1282c <push_back@@Base+0x2d4>
   12574:	ldr	ip, [pc, ip]
   12578:	adds	ip, ip, #1
   1257c:	adc	r3, r3, #0
   12580:	str	ip, [r2]
   12584:	str	r3, [r2, #4]
   12588:	str	r0, [fp, #-12]
   1258c:	str	r1, [sp, #16]
   12590:	ldr	r0, [fp, #-12]
   12594:	str	r0, [fp, #-4]
   12598:	ldr	r1, [sp, #16]
   1259c:	str	r1, [fp, #-8]
   125a0:	ldr	r2, [pc, #648]	; 12830 <push_back@@Base+0x2d8>
   125a4:	ldr	r2, [pc, r2]
   125a8:	ldr	r3, [fp, #-4]
   125ac:	str	r3, [r2]
   125b0:	ldr	r3, [fp, #-8]
   125b4:	str	r3, [r2, #204]	; 0xcc
   125b8:	ldr	r2, [r2, #408]	; 0x198
   125bc:	mov	r3, #0
   125c0:	cmp	r2, #50	; 0x32
   125c4:	movwcc	r3, #1
   125c8:	mov	ip, #16
   125cc:	cmp	r2, #50	; 0x32
   125d0:	movwcc	ip, #8
   125d4:	ldr	r2, [pc, #600]	; 12834 <push_back@@Base+0x2dc>
   125d8:	add	r2, pc, r2
   125dc:	ldr	ip, [r2, ip]!
   125e0:	ldr	lr, [r2, #4]
   125e4:	adds	ip, ip, #1
   125e8:	adc	lr, lr, #0
   125ec:	str	ip, [r2]
   125f0:	str	lr, [r2, #4]
   125f4:	tst	r3, #1
   125f8:	beq	12674 <push_back@@Base+0x11c>
   125fc:	ldr	r0, [pc, #532]	; 12818 <push_back@@Base+0x2c0>
   12600:	ldr	r0, [pc, r0]
   12604:	add	r0, r0, #208	; 0xd0
   12608:	ldr	r1, [pc, #552]	; 12838 <push_back@@Base+0x2e0>
   1260c:	add	r1, pc, r1
   12610:	ldr	r2, [r1, #24]
   12614:	ldr	r3, [r1, #28]
   12618:	adds	r2, r2, #1
   1261c:	adc	r3, r3, #0
   12620:	str	r2, [r1, #24]
   12624:	str	r3, [r1, #28]
   12628:	ldr	r1, [pc, #524]	; 1283c <push_back@@Base+0x2e4>
   1262c:	ldr	r1, [pc, r1]
   12630:	ldr	r2, [r1, #408]	; 0x198
   12634:	add	r2, r1, r2, lsl #2
   12638:	ldr	r3, [fp, #-4]
   1263c:	str	r3, [r2, #4]
   12640:	ldr	r2, [r1, #408]	; 0x198
   12644:	add	r1, r1, r2, lsl #2
   12648:	add	r1, r1, #208	; 0xd0
   1264c:	ldrb	r2, [fp, #-8]
   12650:	strb	r2, [r1]
   12654:	ldrb	r2, [fp, #-7]
   12658:	strb	r2, [r1, #1]
   1265c:	ldrb	r2, [fp, #-6]
   12660:	strb	r2, [r1, #2]
   12664:	ldrb	r2, [fp, #-5]
   12668:	strb	r2, [r1, #3]
   1266c:	str	r0, [sp, #12]
   12670:	b	126a8 <push_back@@Base+0x150>
   12674:	ldr	r0, [pc, #408]	; 12814 <push_back@@Base+0x2bc>
   12678:	ldr	r0, [pc, r0]
   1267c:	ldr	r1, [pc, #444]	; 12840 <push_back@@Base+0x2e8>
   12680:	add	r1, pc, r1
   12684:	ldr	r2, [r1, #32]
   12688:	ldr	r3, [r1, #36]	; 0x24
   1268c:	adds	r2, r2, #1
   12690:	adc	r3, r3, #0
   12694:	str	r2, [r1, #32]
   12698:	str	r3, [r1, #36]	; 0x24
   1269c:	ldr	r1, [r0, #416]	; 0x1a0
   126a0:	add	r1, r1, #1
   126a4:	str	r1, [r0, #416]	; 0x1a0
   126a8:	ldr	r0, [pc, #404]	; 12844 <push_back@@Base+0x2ec>
   126ac:	ldr	r0, [pc, r0]
   126b0:	ldr	r1, [r0, #408]	; 0x198
   126b4:	add	r1, r1, #1
   126b8:	str	r1, [r0, #408]	; 0x198
   126bc:	ldr	r0, [pc, #388]	; 12848 <push_back@@Base+0x2f0>
   126c0:	ldr	r0, [pc, r0]
   126c4:	ldr	r0, [r0, #200]	; 0xc8
   126c8:	mov	r1, #0
   126cc:	cmp	r0, #50	; 0x32
   126d0:	movwcc	r1, #1
   126d4:	mov	r2, #48	; 0x30
   126d8:	cmp	r0, #50	; 0x32
   126dc:	movwcc	r2, #40	; 0x28
   126e0:	ldr	r0, [pc, #356]	; 1284c <push_back@@Base+0x2f4>
   126e4:	add	r0, pc, r0
   126e8:	ldr	r2, [r0, r2]!
   126ec:	ldr	r3, [r0, #4]
   126f0:	adds	r2, r2, #1
   126f4:	adc	r3, r3, #0
   126f8:	str	r2, [r0]
   126fc:	str	r3, [r0, #4]
   12700:	tst	r1, #1
   12704:	beq	12758 <push_back@@Base+0x200>
   12708:	ldr	r0, [pc, #268]	; 1281c <push_back@@Base+0x2c4>
   1270c:	ldr	r0, [pc, r0]
   12710:	ldr	r1, [pc, #264]	; 12820 <push_back@@Base+0x2c8>
   12714:	ldr	r1, [pc, r1]
   12718:	ldr	r2, [pc, #304]	; 12850 <push_back@@Base+0x2f8>
   1271c:	add	r2, pc, r2
   12720:	ldr	r3, [r2, #56]	; 0x38
   12724:	ldr	ip, [r2, #60]	; 0x3c
   12728:	adds	r3, r3, #1
   1272c:	adc	ip, ip, #0
   12730:	str	r3, [r2, #56]	; 0x38
   12734:	str	ip, [r2, #60]	; 0x3c
   12738:	ldr	r2, [pc, #276]	; 12854 <push_back@@Base+0x2fc>
   1273c:	ldr	r2, [pc, r2]
   12740:	ldr	r3, [r2, #200]	; 0xc8
   12744:	add	ip, r3, #1
   12748:	str	ip, [r2, #200]	; 0xc8
   1274c:	add	r2, r2, r3, lsl #2
   12750:	str	r0, [r2]
   12754:	str	r1, [sp, #8]
   12758:	ldr	r0, [pc, #248]	; 12858 <push_back@@Base+0x300>
   1275c:	ldr	r0, [pc, r0]
   12760:	ldr	r0, [r0, #420]	; 0x1a4
   12764:	cmp	r0, #0
   12768:	mov	r1, r0
   1276c:	movwne	r1, #1
   12770:	mov	r2, #72	; 0x48
   12774:	cmp	r0, #0
   12778:	movwne	r2, #64	; 0x40
   1277c:	ldr	r0, [pc, #216]	; 1285c <push_back@@Base+0x304>
   12780:	add	r0, pc, r0
   12784:	ldr	r2, [r0, r2]!
   12788:	ldr	r3, [r0, #4]
   1278c:	adds	r2, r2, #1
   12790:	adc	r3, r3, #0
   12794:	str	r2, [r0]
   12798:	str	r3, [r0, #4]
   1279c:	tst	r1, #1
   127a0:	beq	127ec <push_back@@Base+0x294>
   127a4:	ldr	r0, [pc, #120]	; 12824 <push_back@@Base+0x2cc>
   127a8:	ldr	r0, [pc, r0]
   127ac:	ldr	r1, [pc, #172]	; 12860 <push_back@@Base+0x308>
   127b0:	add	r1, pc, r1
   127b4:	ldr	r2, [r1, #80]	; 0x50
   127b8:	ldr	r3, [r1, #84]	; 0x54
   127bc:	adds	r2, r2, #1
   127c0:	adc	r3, r3, #0
   127c4:	str	r2, [r1, #80]	; 0x50
   127c8:	str	r3, [r1, #84]	; 0x54
   127cc:	ldr	r0, [r0, #420]	; 0x1a4
   127d0:	ldr	r1, [fp, #-4]
   127d4:	ldr	r2, [fp, #-8]
   127d8:	str	r0, [sp, #4]
   127dc:	mov	r0, r1
   127e0:	mov	r1, r2
   127e4:	ldr	r2, [sp, #4]
   127e8:	blx	r2
   127ec:	ldr	r0, [pc, #112]	; 12864 <push_back@@Base+0x30c>
   127f0:	add	r0, pc, r0
   127f4:	ldr	r1, [r0, #88]	; 0x58
   127f8:	ldr	r2, [r0, #92]	; 0x5c
   127fc:	adds	r1, r1, #1
   12800:	adc	r2, r2, #0
   12804:	str	r1, [r0, #88]	; 0x58
   12808:	str	r2, [r0, #92]	; 0x5c
   1280c:	mov	sp, fp
   12810:	pop	{fp, pc}
   12814:	andeq	sp, r1, r8, lsr sl
   12818:			; <UNDEFINED> instruction: 0x0001dab0
   1281c:			; <UNDEFINED> instruction: 0x0001d9bc
   12820:			; <UNDEFINED> instruction: 0x0001d9b8
   12824:	andeq	sp, r1, r8, lsl #18
   12828:	andeq	sp, r1, r0, asr ip
   1282c:	andeq	sp, r1, r4, asr #24
   12830:	andeq	sp, r1, ip, lsl #22
   12834:	andeq	sp, r1, r0, ror #23
   12838:	andeq	sp, r1, ip, lsr #23
   1283c:	andeq	sp, r1, r4, lsl #21
   12840:	andeq	sp, r1, r8, lsr fp
   12844:	andeq	sp, r1, r4, lsl #20
   12848:	andeq	sp, r1, ip, lsl #20
   1284c:	ldrdeq	sp, [r1], -r4
   12850:	muleq	r1, ip, sl
   12854:	muleq	r1, r0, r9
   12858:	andeq	sp, r1, r4, asr r9
   1285c:	andeq	sp, r1, r8, lsr sl
   12860:	andeq	sp, r1, r8, lsl #20
   12864:	andeq	sp, r1, r8, asr #19

00012868 <push_back_reset@@Base>:
   12868:	push	{fp, lr}
   1286c:	mov	fp, sp
   12870:	sub	sp, sp, #8
   12874:	ldr	r0, [pc, #120]	; 128f4 <push_back_reset@@Base+0x8c>
   12878:	add	r0, pc, r0
   1287c:	ldr	r1, [r0, #4]
   12880:	ldr	r2, [pc, #112]	; 128f8 <push_back_reset@@Base+0x90>
   12884:	ldr	r2, [pc, r2]
   12888:	adds	r2, r2, #1
   1288c:	adc	r1, r1, #0
   12890:	str	r2, [r0]
   12894:	str	r1, [r0, #4]
   12898:	ldr	r0, [pc, #80]	; 128f0 <push_back_reset@@Base+0x88>
   1289c:	ldr	r0, [pc, r0]
   128a0:	mov	r1, r0
   128a4:	ldr	r2, [pc, #80]	; 128fc <push_back_reset@@Base+0x94>
   128a8:	add	r2, pc, r2
   128ac:	ldr	r3, [r2, #8]
   128b0:	ldr	ip, [r2, #12]
   128b4:	adds	r3, r3, #1
   128b8:	adc	ip, ip, #0
   128bc:	str	r3, [r2, #8]
   128c0:	str	ip, [r2, #12]
   128c4:	str	r0, [sp, #4]
   128c8:	mov	r0, r1
   128cc:	movw	r1, #0
   128d0:	and	r1, r1, #255	; 0xff
   128d4:	movw	r2, #424	; 0x1a8
   128d8:	bl	11ec4 <memset@plt>
   128dc:	movw	r0, #50	; 0x32
   128e0:	ldr	r1, [sp, #4]
   128e4:	str	r0, [r1, #412]	; 0x19c
   128e8:	mov	sp, fp
   128ec:	pop	{fp, pc}
   128f0:	andeq	sp, r1, r4, lsl r8
   128f4:	andeq	sp, r1, r0, lsr #19
   128f8:	muleq	r1, r4, r9
   128fc:	andeq	sp, r1, r0, ror r9

00012900 <setup@@Base>:
   12900:	push	{fp, lr}
   12904:	mov	fp, sp
   12908:	ldr	r0, [pc, #72]	; 12958 <setup@@Base+0x58>
   1290c:	add	r0, pc, r0
   12910:	ldr	r1, [r0, #4]
   12914:	ldr	r2, [pc, #64]	; 1295c <setup@@Base+0x5c>
   12918:	ldr	r2, [pc, r2]
   1291c:	adds	r2, r2, #1
   12920:	adc	r1, r1, #0
   12924:	str	r2, [r0]
   12928:	str	r1, [r0, #4]
   1292c:	ldr	r0, [pc, #44]	; 12960 <setup@@Base+0x60>
   12930:	add	r0, pc, r0
   12934:	ldr	r1, [r0, #8]
   12938:	ldr	r2, [r0, #12]
   1293c:	adds	r1, r1, #1
   12940:	adc	r2, r2, #0
   12944:	str	r1, [r0, #8]
   12948:	str	r2, [r0, #12]
   1294c:	bl	124c0 <next_reset@@Base>
   12950:	bl	12868 <push_back_reset@@Base>
   12954:	pop	{fp, pc}
   12958:	andeq	sp, r1, ip, lsl r9
   1295c:	andeq	sp, r1, r0, lsl r9
   12960:	strdeq	sp, [r1], -r8

00012964 <no_int_as_first_stuff@@Base>:
   12964:	push	{fp, lr}
   12968:	mov	fp, sp
   1296c:	sub	sp, sp, #32
   12970:	ldr	r0, [pc, #440]	; 12b30 <no_int_as_first_stuff@@Base+0x1cc>
   12974:	add	r0, pc, r0
   12978:	ldr	r1, [r0, #4]
   1297c:	ldr	r2, [pc, #432]	; 12b34 <no_int_as_first_stuff@@Base+0x1d0>
   12980:	ldr	r2, [pc, r2]
   12984:	adds	r2, r2, #1
   12988:	adc	r1, r1, #0
   1298c:	str	r2, [r0]
   12990:	str	r1, [r0, #4]
   12994:	add	r0, sp, #16
   12998:	sub	r1, fp, #12
   1299c:	str	r0, [sp, #4]
   129a0:	bl	19060 <init_grammar@@Base>
   129a4:	mov	r0, #0
   129a8:	str	r0, [sp, #12]
   129ac:	mov	r0, #4
   129b0:	bl	11e34 <malloc@plt>
   129b4:	str	r0, [sp, #8]
   129b8:	ldr	r0, [sp, #8]
   129bc:	bl	16774 <init_token_opar@@Base>
   129c0:	ldr	r0, [sp, #8]
   129c4:	ldr	r1, [pc, #364]	; 12b38 <no_int_as_first_stuff@@Base+0x1d4>
   129c8:	ldr	r1, [pc, r1]
   129cc:	str	r0, [r1, #216]	; 0xd8
   129d0:	ldr	r0, [sp, #4]
   129d4:	str	r1, [sp]
   129d8:	bl	191c0 <read_function_ast_node@@Base>
   129dc:	str	r0, [sp, #12]
   129e0:	ldr	r0, [sp]
   129e4:	ldr	r1, [r0, #204]	; 0xcc
   129e8:	sub	lr, r1, #1
   129ec:	clz	lr, lr
   129f0:	lsr	lr, lr, #5
   129f4:	mov	r2, #16
   129f8:	cmp	r1, #1
   129fc:	movweq	r2, #8
   12a00:	ldr	r1, [pc, #308]	; 12b3c <no_int_as_first_stuff@@Base+0x1d8>
   12a04:	add	r1, pc, r1
   12a08:	ldr	r2, [r1, r2]!
   12a0c:	ldr	r3, [r1, #4]
   12a10:	adds	r2, r2, #1
   12a14:	adc	r3, r3, #0
   12a18:	str	r2, [r1]
   12a1c:	str	r3, [r1, #4]
   12a20:	tst	lr, #1
   12a24:	beq	12a4c <no_int_as_first_stuff@@Base+0xe8>
   12a28:	ldr	r0, [pc, #272]	; 12b40 <no_int_as_first_stuff@@Base+0x1dc>
   12a2c:	add	r0, pc, r0
   12a30:	ldr	r1, [r0, #24]
   12a34:	ldr	r2, [r0, #28]
   12a38:	adds	r1, r1, #1
   12a3c:	adc	r2, r2, #0
   12a40:	str	r1, [r0, #24]
   12a44:	str	r2, [r0, #28]
   12a48:	b	12a6c <no_int_as_first_stuff@@Base+0x108>
   12a4c:	ldr	r0, [pc, #196]	; 12b18 <no_int_as_first_stuff@@Base+0x1b4>
   12a50:	add	r0, pc, r0
   12a54:	ldr	r1, [pc, #192]	; 12b1c <no_int_as_first_stuff@@Base+0x1b8>
   12a58:	add	r1, pc, r1
   12a5c:	ldr	r2, [pc, #188]	; 12b20 <no_int_as_first_stuff@@Base+0x1bc>
   12a60:	add	r3, pc, r2
   12a64:	movw	r2, #41	; 0x29
   12a68:	bl	11f54 <__assert_fail@plt>
   12a6c:	ldr	r0, [sp, #12]
   12a70:	clz	r1, r0
   12a74:	lsr	r1, r1, #5
   12a78:	mov	r2, #40	; 0x28
   12a7c:	cmp	r0, #0
   12a80:	movweq	r2, #32
   12a84:	ldr	r0, [pc, #184]	; 12b44 <no_int_as_first_stuff@@Base+0x1e0>
   12a88:	add	r0, pc, r0
   12a8c:	ldr	r2, [r0, r2]!
   12a90:	ldr	r3, [r0, #4]
   12a94:	adds	r2, r2, #1
   12a98:	adc	r3, r3, #0
   12a9c:	str	r2, [r0]
   12aa0:	str	r3, [r0, #4]
   12aa4:	tst	r1, #1
   12aa8:	beq	12ad0 <no_int_as_first_stuff@@Base+0x16c>
   12aac:	ldr	r0, [pc, #148]	; 12b48 <no_int_as_first_stuff@@Base+0x1e4>
   12ab0:	add	r0, pc, r0
   12ab4:	ldr	r1, [r0, #48]	; 0x30
   12ab8:	ldr	r2, [r0, #52]	; 0x34
   12abc:	adds	r1, r1, #1
   12ac0:	adc	r2, r2, #0
   12ac4:	str	r1, [r0, #48]	; 0x30
   12ac8:	str	r2, [r0, #52]	; 0x34
   12acc:	b	12af0 <no_int_as_first_stuff@@Base+0x18c>
   12ad0:	ldr	r0, [pc, #76]	; 12b24 <no_int_as_first_stuff@@Base+0x1c0>
   12ad4:	add	r0, pc, r0
   12ad8:	ldr	r1, [pc, #72]	; 12b28 <no_int_as_first_stuff@@Base+0x1c4>
   12adc:	add	r1, pc, r1
   12ae0:	ldr	r2, [pc, #68]	; 12b2c <no_int_as_first_stuff@@Base+0x1c8>
   12ae4:	add	r3, pc, r2
   12ae8:	movw	r2, #42	; 0x2a
   12aec:	bl	11f54 <__assert_fail@plt>
   12af0:	ldr	r0, [pc, #84]	; 12b4c <no_int_as_first_stuff@@Base+0x1e8>
   12af4:	add	r0, pc, r0
   12af8:	ldr	r1, [r0, #56]	; 0x38
   12afc:	ldr	r2, [r0, #60]	; 0x3c
   12b00:	adds	r1, r1, #1
   12b04:	adc	r2, r2, #0
   12b08:	str	r1, [r0, #56]	; 0x38
   12b0c:	str	r2, [r0, #60]	; 0x3c
   12b10:	mov	sp, fp
   12b14:	pop	{fp, pc}
   12b18:	andeq	fp, r0, ip, ror #6
   12b1c:	andeq	fp, r0, lr, ror r3
   12b20:	ldrdeq	fp, [r0], -r1
   12b24:	andeq	fp, r0, sl, ror r3
   12b28:	strdeq	fp, [r0], -sl
   12b2c:	andeq	fp, r0, sp, asr #6
   12b30:	andeq	sp, r1, r4, asr #17
   12b34:			; <UNDEFINED> instruction: 0x0001d8b8
   12b38:	strdeq	sp, [r1], -r8
   12b3c:	andeq	sp, r1, r4, lsr r8
   12b40:	andeq	sp, r1, ip, lsl #16
   12b44:			; <UNDEFINED> instruction: 0x0001d7b0
   12b48:	andeq	sp, r1, r8, lsl #15
   12b4c:	andeq	sp, r1, r4, asr #14

00012b50 <int_but_not_followed_by_function@@Base>:
   12b50:	push	{fp, lr}
   12b54:	mov	fp, sp
   12b58:	sub	sp, sp, #40	; 0x28
   12b5c:	ldr	r0, [pc, #500]	; 12d58 <int_but_not_followed_by_function@@Base+0x208>
   12b60:	add	r0, pc, r0
   12b64:	ldr	r1, [r0, #4]
   12b68:	ldr	r2, [pc, #492]	; 12d5c <int_but_not_followed_by_function@@Base+0x20c>
   12b6c:	ldr	r2, [pc, r2]
   12b70:	adds	r2, r2, #1
   12b74:	adc	r1, r1, #0
   12b78:	str	r2, [r0]
   12b7c:	str	r1, [r0, #4]
   12b80:	mov	r0, #0
   12b84:	str	r0, [sp, #16]
   12b88:	sub	r0, fp, #16
   12b8c:	sub	r1, fp, #12
   12b90:	str	r0, [sp, #12]
   12b94:	bl	19060 <init_grammar@@Base>
   12b98:	mov	r0, #8
   12b9c:	bl	11e34 <malloc@plt>
   12ba0:	str	r0, [sp, #20]
   12ba4:	mov	r0, #4
   12ba8:	str	r0, [sp, #8]
   12bac:	bl	11e34 <malloc@plt>
   12bb0:	ldr	r1, [sp, #20]
   12bb4:	str	r0, [r1]
   12bb8:	ldr	r0, [sp, #20]
   12bbc:	ldr	r0, [r0]
   12bc0:	bl	165e8 <init_token_int_type@@Base>
   12bc4:	ldr	r0, [sp, #8]
   12bc8:	bl	11e34 <malloc@plt>
   12bcc:	ldr	r1, [sp, #20]
   12bd0:	str	r0, [r1, #4]
   12bd4:	ldr	r0, [sp, #20]
   12bd8:	ldr	r0, [r0, #4]
   12bdc:	bl	16774 <init_token_opar@@Base>
   12be0:	ldr	r0, [sp, #20]
   12be4:	ldr	r1, [pc, #372]	; 12d60 <int_but_not_followed_by_function@@Base+0x210>
   12be8:	ldr	r1, [pc, r1]
   12bec:	str	r0, [r1, #228]	; 0xe4
   12bf0:	mov	r0, #2
   12bf4:	str	r0, [r1, #220]	; 0xdc
   12bf8:	ldr	r0, [sp, #12]
   12bfc:	str	r1, [sp, #4]
   12c00:	bl	191c0 <read_function_ast_node@@Base>
   12c04:	str	r0, [sp, #16]
   12c08:	ldr	r0, [sp, #4]
   12c0c:	ldr	r1, [r0, #204]	; 0xcc
   12c10:	sub	lr, r1, #2
   12c14:	clz	lr, lr
   12c18:	lsr	lr, lr, #5
   12c1c:	mov	r2, #16
   12c20:	cmp	r1, #2
   12c24:	movweq	r2, #8
   12c28:	ldr	r1, [pc, #308]	; 12d64 <int_but_not_followed_by_function@@Base+0x214>
   12c2c:	add	r1, pc, r1
   12c30:	ldr	r2, [r1, r2]!
   12c34:	ldr	r3, [r1, #4]
   12c38:	adds	r2, r2, #1
   12c3c:	adc	r3, r3, #0
   12c40:	str	r2, [r1]
   12c44:	str	r3, [r1, #4]
   12c48:	tst	lr, #1
   12c4c:	beq	12c74 <int_but_not_followed_by_function@@Base+0x124>
   12c50:	ldr	r0, [pc, #272]	; 12d68 <int_but_not_followed_by_function@@Base+0x218>
   12c54:	add	r0, pc, r0
   12c58:	ldr	r1, [r0, #24]
   12c5c:	ldr	r2, [r0, #28]
   12c60:	adds	r1, r1, #1
   12c64:	adc	r2, r2, #0
   12c68:	str	r1, [r0, #24]
   12c6c:	str	r2, [r0, #28]
   12c70:	b	12c94 <int_but_not_followed_by_function@@Base+0x144>
   12c74:	ldr	r0, [pc, #196]	; 12d40 <int_but_not_followed_by_function@@Base+0x1f0>
   12c78:	add	r0, pc, r0
   12c7c:	ldr	r1, [pc, #192]	; 12d44 <int_but_not_followed_by_function@@Base+0x1f4>
   12c80:	add	r1, pc, r1
   12c84:	ldr	r2, [pc, #188]	; 12d48 <int_but_not_followed_by_function@@Base+0x1f8>
   12c88:	add	r3, pc, r2
   12c8c:	movw	r2, #67	; 0x43
   12c90:	bl	11f54 <__assert_fail@plt>
   12c94:	ldr	r0, [sp, #16]
   12c98:	clz	r1, r0
   12c9c:	lsr	r1, r1, #5
   12ca0:	mov	r2, #40	; 0x28
   12ca4:	cmp	r0, #0
   12ca8:	movweq	r2, #32
   12cac:	ldr	r0, [pc, #184]	; 12d6c <int_but_not_followed_by_function@@Base+0x21c>
   12cb0:	add	r0, pc, r0
   12cb4:	ldr	r2, [r0, r2]!
   12cb8:	ldr	r3, [r0, #4]
   12cbc:	adds	r2, r2, #1
   12cc0:	adc	r3, r3, #0
   12cc4:	str	r2, [r0]
   12cc8:	str	r3, [r0, #4]
   12ccc:	tst	r1, #1
   12cd0:	beq	12cf8 <int_but_not_followed_by_function@@Base+0x1a8>
   12cd4:	ldr	r0, [pc, #148]	; 12d70 <int_but_not_followed_by_function@@Base+0x220>
   12cd8:	add	r0, pc, r0
   12cdc:	ldr	r1, [r0, #48]	; 0x30
   12ce0:	ldr	r2, [r0, #52]	; 0x34
   12ce4:	adds	r1, r1, #1
   12ce8:	adc	r2, r2, #0
   12cec:	str	r1, [r0, #48]	; 0x30
   12cf0:	str	r2, [r0, #52]	; 0x34
   12cf4:	b	12d18 <int_but_not_followed_by_function@@Base+0x1c8>
   12cf8:	ldr	r0, [pc, #76]	; 12d4c <int_but_not_followed_by_function@@Base+0x1fc>
   12cfc:	add	r0, pc, r0
   12d00:	ldr	r1, [pc, #72]	; 12d50 <int_but_not_followed_by_function@@Base+0x200>
   12d04:	add	r1, pc, r1
   12d08:	ldr	r2, [pc, #68]	; 12d54 <int_but_not_followed_by_function@@Base+0x204>
   12d0c:	add	r3, pc, r2
   12d10:	movw	r2, #68	; 0x44
   12d14:	bl	11f54 <__assert_fail@plt>
   12d18:	ldr	r0, [pc, #84]	; 12d74 <int_but_not_followed_by_function@@Base+0x224>
   12d1c:	add	r0, pc, r0
   12d20:	ldr	r1, [r0, #56]	; 0x38
   12d24:	ldr	r2, [r0, #60]	; 0x3c
   12d28:	adds	r1, r1, #1
   12d2c:	adc	r2, r2, #0
   12d30:	str	r1, [r0, #56]	; 0x38
   12d34:	str	r2, [r0, #60]	; 0x3c
   12d38:	mov	sp, fp
   12d3c:	pop	{fp, pc}
   12d40:	andeq	fp, r0, r2, ror #3
   12d44:	andeq	fp, r0, r6, asr r1
   12d48:	andeq	fp, r0, ip, ror #3
   12d4c:	andeq	fp, r0, r2, asr r1
   12d50:	ldrdeq	fp, [r0], -r2
   12d54:	andeq	fp, r0, r8, ror #2
   12d58:	andeq	sp, r1, r8, lsl r7
   12d5c:	andeq	sp, r1, ip, lsl #14
   12d60:	ldrdeq	sp, [r1], -r8
   12d64:	andeq	sp, r1, ip, asr #12
   12d68:	andeq	sp, r1, r4, lsr #12
   12d6c:	andeq	sp, r1, r8, asr #11
   12d70:	andeq	sp, r1, r0, lsr #11
   12d74:	andeq	sp, r1, ip, asr r5

00012d78 <boolean_expression_is_read_properly@@Base>:
   12d78:	push	{fp, lr}
   12d7c:	mov	fp, sp
   12d80:	sub	sp, sp, #56	; 0x38
   12d84:	ldr	r0, [pc, #828]	; 130c8 <boolean_expression_is_read_properly@@Base+0x350>
   12d88:	add	r0, pc, r0
   12d8c:	ldr	r1, [r0, #4]
   12d90:	ldr	r2, [pc, #820]	; 130cc <boolean_expression_is_read_properly@@Base+0x354>
   12d94:	ldr	r2, [pc, r2]
   12d98:	adds	r2, r2, #1
   12d9c:	adc	r1, r1, #0
   12da0:	str	r2, [r0]
   12da4:	str	r1, [r0, #4]
   12da8:	mov	r0, #0
   12dac:	str	r0, [fp, #-24]	; 0xffffffe8
   12db0:	str	r0, [sp, #28]
   12db4:	mov	r1, #3
   12db8:	str	r0, [sp, #20]
   12dbc:	mov	r0, r1
   12dc0:	bl	11e34 <malloc@plt>
   12dc4:	str	r0, [sp, #24]
   12dc8:	ldr	r0, [sp, #24]
   12dcc:	mov	r1, #33	; 0x21
   12dd0:	strb	r1, [r0]
   12dd4:	ldr	r0, [sp, #24]
   12dd8:	mov	r1, #61	; 0x3d
   12ddc:	strb	r1, [r0, #1]
   12de0:	ldr	r0, [sp, #24]
   12de4:	ldr	r1, [sp, #20]
   12de8:	strb	r1, [r0, #2]
   12dec:	sub	r0, fp, #16
   12df0:	sub	r1, fp, #12
   12df4:	str	r0, [sp, #16]
   12df8:	bl	19060 <init_grammar@@Base>
   12dfc:	mov	r0, #20
   12e00:	bl	11e34 <malloc@plt>
   12e04:	str	r0, [fp, #-20]	; 0xffffffec
   12e08:	mov	r0, #8
   12e0c:	str	r0, [sp, #12]
   12e10:	bl	11e34 <malloc@plt>
   12e14:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e18:	str	r0, [r1]
   12e1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e20:	ldr	r0, [r0]
   12e24:	mov	r1, #2
   12e28:	str	r1, [sp, #8]
   12e2c:	bl	1665c <init_token_int_value@@Base>
   12e30:	ldr	r0, [sp, #12]
   12e34:	bl	11e34 <malloc@plt>
   12e38:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e3c:	str	r0, [r1, #4]
   12e40:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e44:	ldr	r0, [r0, #4]
   12e48:	ldr	r1, [sp, #8]
   12e4c:	bl	1665c <init_token_int_value@@Base>
   12e50:	ldr	r0, [sp, #12]
   12e54:	bl	11e34 <malloc@plt>
   12e58:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e5c:	str	r0, [r1, #8]
   12e60:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e64:	ldr	r0, [r0, #8]
   12e68:	ldr	r1, [sp, #24]
   12e6c:	bl	16b88 <init_token_boolean_op@@Base>
   12e70:	ldr	r0, [sp, #12]
   12e74:	bl	11e34 <malloc@plt>
   12e78:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e7c:	str	r0, [r1, #12]
   12e80:	ldr	r0, [fp, #-20]	; 0xffffffec
   12e84:	ldr	r0, [r0, #12]
   12e88:	mov	r1, #1
   12e8c:	bl	1665c <init_token_int_value@@Base>
   12e90:	mov	r0, #4
   12e94:	bl	11e34 <malloc@plt>
   12e98:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e9c:	str	r0, [r1, #16]
   12ea0:	ldr	r0, [fp, #-20]	; 0xffffffec
   12ea4:	ldr	r0, [r0, #16]
   12ea8:	bl	167e8 <init_token_cpar@@Base>
   12eac:	ldr	r0, [fp, #-20]	; 0xffffffec
   12eb0:	ldr	r1, [pc, #536]	; 130d0 <boolean_expression_is_read_properly@@Base+0x358>
   12eb4:	ldr	r1, [pc, r1]
   12eb8:	str	r0, [r1, #228]	; 0xe4
   12ebc:	mov	r0, #5
   12ec0:	str	r0, [r1, #220]	; 0xdc
   12ec4:	ldr	r0, [sp, #16]
   12ec8:	str	r1, [sp, #4]
   12ecc:	bl	19d74 <read_boolean_expression@@Base>
   12ed0:	str	r0, [fp, #-24]	; 0xffffffe8
   12ed4:	ldr	r0, [sp, #4]
   12ed8:	ldr	r1, [r0, #204]	; 0xcc
   12edc:	sub	lr, r1, #5
   12ee0:	clz	lr, lr
   12ee4:	lsr	lr, lr, #5
   12ee8:	mov	r2, #16
   12eec:	cmp	r1, #5
   12ef0:	movweq	r2, #8
   12ef4:	ldr	r1, [pc, #472]	; 130d4 <boolean_expression_is_read_properly@@Base+0x35c>
   12ef8:	add	r1, pc, r1
   12efc:	ldr	r2, [r1, r2]!
   12f00:	ldr	r3, [r1, #4]
   12f04:	adds	r2, r2, #1
   12f08:	adc	r3, r3, #0
   12f0c:	str	r2, [r1]
   12f10:	str	r3, [r1, #4]
   12f14:	tst	lr, #1
   12f18:	beq	12f40 <boolean_expression_is_read_properly@@Base+0x1c8>
   12f1c:	ldr	r0, [pc, #436]	; 130d8 <boolean_expression_is_read_properly@@Base+0x360>
   12f20:	add	r0, pc, r0
   12f24:	ldr	r1, [r0, #24]
   12f28:	ldr	r2, [r0, #28]
   12f2c:	adds	r1, r1, #1
   12f30:	adc	r2, r2, #0
   12f34:	str	r1, [r0, #24]
   12f38:	str	r2, [r0, #28]
   12f3c:	b	12f60 <boolean_expression_is_read_properly@@Base+0x1e8>
   12f40:	ldr	r0, [pc, #348]	; 130a4 <boolean_expression_is_read_properly@@Base+0x32c>
   12f44:	add	r0, pc, r0
   12f48:	ldr	r1, [pc, #344]	; 130a8 <boolean_expression_is_read_properly@@Base+0x330>
   12f4c:	add	r1, pc, r1
   12f50:	ldr	r2, [pc, #340]	; 130ac <boolean_expression_is_read_properly@@Base+0x334>
   12f54:	add	r3, pc, r2
   12f58:	movw	r2, #105	; 0x69
   12f5c:	bl	11f54 <__assert_fail@plt>
   12f60:	ldr	r0, [pc, #372]	; 130dc <boolean_expression_is_read_properly@@Base+0x364>
   12f64:	ldr	r0, [pc, r0]
   12f68:	ldr	r0, [r0, #408]	; 0x198
   12f6c:	sub	r1, r0, #1
   12f70:	clz	r1, r1
   12f74:	lsr	r1, r1, #5
   12f78:	mov	r2, #40	; 0x28
   12f7c:	cmp	r0, #1
   12f80:	movweq	r2, #32
   12f84:	ldr	r0, [pc, #340]	; 130e0 <boolean_expression_is_read_properly@@Base+0x368>
   12f88:	add	r0, pc, r0
   12f8c:	ldr	r2, [r0, r2]!
   12f90:	ldr	r3, [r0, #4]
   12f94:	adds	r2, r2, #1
   12f98:	adc	r3, r3, #0
   12f9c:	str	r2, [r0]
   12fa0:	str	r3, [r0, #4]
   12fa4:	tst	r1, #1
   12fa8:	beq	12fd0 <boolean_expression_is_read_properly@@Base+0x258>
   12fac:	ldr	r0, [pc, #304]	; 130e4 <boolean_expression_is_read_properly@@Base+0x36c>
   12fb0:	add	r0, pc, r0
   12fb4:	ldr	r1, [r0, #48]	; 0x30
   12fb8:	ldr	r2, [r0, #52]	; 0x34
   12fbc:	adds	r1, r1, #1
   12fc0:	adc	r2, r2, #0
   12fc4:	str	r1, [r0, #48]	; 0x30
   12fc8:	str	r2, [r0, #52]	; 0x34
   12fcc:	b	12ff0 <boolean_expression_is_read_properly@@Base+0x278>
   12fd0:	ldr	r0, [pc, #216]	; 130b0 <boolean_expression_is_read_properly@@Base+0x338>
   12fd4:	add	r0, pc, r0
   12fd8:	ldr	r1, [pc, #212]	; 130b4 <boolean_expression_is_read_properly@@Base+0x33c>
   12fdc:	add	r1, pc, r1
   12fe0:	ldr	r2, [pc, #208]	; 130b8 <boolean_expression_is_read_properly@@Base+0x340>
   12fe4:	add	r3, pc, r2
   12fe8:	movw	r2, #106	; 0x6a
   12fec:	bl	11f54 <__assert_fail@plt>
   12ff0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12ff4:	ldr	r0, [r0]
   12ff8:	sub	r1, r0, #5
   12ffc:	clz	r1, r1
   13000:	lsr	r1, r1, #5
   13004:	mov	r2, #64	; 0x40
   13008:	cmp	r0, #5
   1300c:	movweq	r2, #56	; 0x38
   13010:	ldr	r0, [pc, #208]	; 130e8 <boolean_expression_is_read_properly@@Base+0x370>
   13014:	add	r0, pc, r0
   13018:	ldr	r2, [r0, r2]!
   1301c:	ldr	r3, [r0, #4]
   13020:	adds	r2, r2, #1
   13024:	adc	r3, r3, #0
   13028:	str	r2, [r0]
   1302c:	str	r3, [r0, #4]
   13030:	tst	r1, #1
   13034:	beq	1305c <boolean_expression_is_read_properly@@Base+0x2e4>
   13038:	ldr	r0, [pc, #172]	; 130ec <boolean_expression_is_read_properly@@Base+0x374>
   1303c:	add	r0, pc, r0
   13040:	ldr	r1, [r0, #72]	; 0x48
   13044:	ldr	r2, [r0, #76]	; 0x4c
   13048:	adds	r1, r1, #1
   1304c:	adc	r2, r2, #0
   13050:	str	r1, [r0, #72]	; 0x48
   13054:	str	r2, [r0, #76]	; 0x4c
   13058:	b	1307c <boolean_expression_is_read_properly@@Base+0x304>
   1305c:	ldr	r0, [pc, #88]	; 130bc <boolean_expression_is_read_properly@@Base+0x344>
   13060:	add	r0, pc, r0
   13064:	ldr	r1, [pc, #84]	; 130c0 <boolean_expression_is_read_properly@@Base+0x348>
   13068:	add	r1, pc, r1
   1306c:	ldr	r2, [pc, #80]	; 130c4 <boolean_expression_is_read_properly@@Base+0x34c>
   13070:	add	r3, pc, r2
   13074:	movw	r2, #107	; 0x6b
   13078:	bl	11f54 <__assert_fail@plt>
   1307c:	ldr	r0, [pc, #108]	; 130f0 <boolean_expression_is_read_properly@@Base+0x378>
   13080:	add	r0, pc, r0
   13084:	ldr	r1, [r0, #80]	; 0x50
   13088:	ldr	r2, [r0, #84]	; 0x54
   1308c:	adds	r1, r1, #1
   13090:	adc	r2, r2, #0
   13094:	str	r1, [r0, #80]	; 0x50
   13098:	str	r2, [r0, #84]	; 0x54
   1309c:	mov	sp, fp
   130a0:	pop	{fp, pc}
   130a4:	andeq	sl, r0, r8, asr pc
   130a8:	andeq	sl, r0, sl, lsl #29
   130ac:	andeq	sl, r0, r2, ror #30
   130b0:	andeq	sl, r0, sp, lsl #30
   130b4:	strdeq	sl, [r0], -sl	; <UNPREDICTABLE>
   130b8:	ldrdeq	sl, [r0], -r2
   130bc:	andeq	sl, r0, r0, lsr #29
   130c0:	andeq	sl, r0, lr, ror #26
   130c4:	andeq	sl, r0, r6, asr #28
   130c8:	andeq	sp, r1, r0, lsr r5
   130cc:	andeq	sp, r1, r4, lsr #10
   130d0:	andeq	sp, r1, ip, lsl #4
   130d4:	andeq	sp, r1, r0, asr #7
   130d8:	muleq	r1, r8, r3
   130dc:	andeq	sp, r1, ip, asr #2
   130e0:	andeq	sp, r1, r0, lsr r3
   130e4:	andeq	sp, r1, r8, lsl #6
   130e8:	andeq	sp, r1, r4, lsr #5
   130ec:	andeq	sp, r1, ip, ror r2
   130f0:	andeq	sp, r1, r8, lsr r2

000130f4 <boolean_expression_complex@@Base>:
   130f4:	push	{fp, lr}
   130f8:	mov	fp, sp
   130fc:	sub	sp, sp, #72	; 0x48
   13100:	ldr	r0, [pc, #916]	; 1349c <boolean_expression_complex@@Base+0x3a8>
   13104:	add	r0, pc, r0
   13108:	ldr	r1, [r0, #4]
   1310c:	ldr	r2, [pc, #908]	; 134a0 <boolean_expression_complex@@Base+0x3ac>
   13110:	ldr	r2, [pc, r2]
   13114:	adds	r2, r2, #1
   13118:	adc	r1, r1, #0
   1311c:	str	r2, [r0]
   13120:	str	r1, [r0, #4]
   13124:	mov	r0, #0
   13128:	str	r0, [fp, #-24]	; 0xffffffe8
   1312c:	str	r0, [fp, #-28]	; 0xffffffe4
   13130:	mov	r1, #3
   13134:	str	r0, [sp, #28]
   13138:	mov	r0, r1
   1313c:	str	r1, [sp, #24]
   13140:	bl	11e34 <malloc@plt>
   13144:	str	r0, [fp, #-32]	; 0xffffffe0
   13148:	ldr	r0, [sp, #24]
   1314c:	bl	11e34 <malloc@plt>
   13150:	str	r0, [sp, #36]	; 0x24
   13154:	ldr	r0, [sp, #24]
   13158:	bl	11e34 <malloc@plt>
   1315c:	str	r0, [sp, #32]
   13160:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13164:	mov	r1, #60	; 0x3c
   13168:	strb	r1, [r0]
   1316c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13170:	mov	r1, #61	; 0x3d
   13174:	strb	r1, [r0, #1]
   13178:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1317c:	ldr	lr, [sp, #28]
   13180:	strb	lr, [r0, #2]
   13184:	ldr	r0, [sp, #36]	; 0x24
   13188:	mov	r2, #38	; 0x26
   1318c:	strb	r2, [r0]
   13190:	ldr	r0, [sp, #36]	; 0x24
   13194:	strb	r2, [r0, #1]
   13198:	ldr	r0, [sp, #36]	; 0x24
   1319c:	strb	lr, [r0, #2]
   131a0:	ldr	r0, [sp, #32]
   131a4:	strb	r1, [r0]
   131a8:	ldr	r0, [sp, #32]
   131ac:	strb	r1, [r0, #1]
   131b0:	ldr	r0, [sp, #32]
   131b4:	strb	lr, [r0, #2]
   131b8:	sub	r0, fp, #16
   131bc:	sub	r1, fp, #12
   131c0:	str	r0, [sp, #20]
   131c4:	bl	19060 <init_grammar@@Base>
   131c8:	mov	r0, #40	; 0x28
   131cc:	bl	11e34 <malloc@plt>
   131d0:	str	r0, [fp, #-20]	; 0xffffffec
   131d4:	mov	r0, #8
   131d8:	str	r0, [sp, #16]
   131dc:	bl	11e34 <malloc@plt>
   131e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   131e4:	str	r0, [r1]
   131e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   131ec:	ldr	r0, [r0]
   131f0:	mov	r1, #2
   131f4:	str	r1, [sp, #12]
   131f8:	bl	1665c <init_token_int_value@@Base>
   131fc:	ldr	r0, [sp, #16]
   13200:	bl	11e34 <malloc@plt>
   13204:	ldr	r1, [fp, #-20]	; 0xffffffec
   13208:	str	r0, [r1, #4]
   1320c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13210:	ldr	r0, [r0, #4]
   13214:	ldr	r1, [sp, #12]
   13218:	bl	1665c <init_token_int_value@@Base>
   1321c:	ldr	r0, [sp, #16]
   13220:	bl	11e34 <malloc@plt>
   13224:	ldr	r1, [fp, #-20]	; 0xffffffec
   13228:	str	r0, [r1, #8]
   1322c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13230:	ldr	r0, [r0, #8]
   13234:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13238:	bl	16b88 <init_token_boolean_op@@Base>
   1323c:	ldr	r0, [sp, #16]
   13240:	bl	11e34 <malloc@plt>
   13244:	ldr	r1, [fp, #-20]	; 0xffffffec
   13248:	str	r0, [r1, #12]
   1324c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13250:	ldr	r0, [r0, #12]
   13254:	mov	r1, #1
   13258:	bl	1665c <init_token_int_value@@Base>
   1325c:	ldr	r0, [sp, #16]
   13260:	bl	11e34 <malloc@plt>
   13264:	ldr	r1, [fp, #-20]	; 0xffffffec
   13268:	str	r0, [r1, #16]
   1326c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13270:	ldr	r0, [r0, #16]
   13274:	ldr	r1, [sp, #36]	; 0x24
   13278:	bl	16b88 <init_token_boolean_op@@Base>
   1327c:	ldr	r0, [sp, #16]
   13280:	bl	11e34 <malloc@plt>
   13284:	ldr	r1, [fp, #-20]	; 0xffffffec
   13288:	str	r0, [r1, #20]
   1328c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13290:	ldr	r0, [r0, #20]
   13294:	mov	r1, #4
   13298:	str	r1, [sp, #8]
   1329c:	bl	1665c <init_token_int_value@@Base>
   132a0:	ldr	r0, [sp, #16]
   132a4:	bl	11e34 <malloc@plt>
   132a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   132ac:	str	r0, [r1, #24]
   132b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   132b4:	ldr	r0, [r0, #24]
   132b8:	ldr	r1, [sp, #8]
   132bc:	bl	1665c <init_token_int_value@@Base>
   132c0:	ldr	r0, [sp, #16]
   132c4:	bl	11e34 <malloc@plt>
   132c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   132cc:	str	r0, [r1, #28]
   132d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   132d4:	ldr	r0, [r0, #28]
   132d8:	ldr	r1, [sp, #32]
   132dc:	bl	16b88 <init_token_boolean_op@@Base>
   132e0:	ldr	r0, [sp, #16]
   132e4:	bl	11e34 <malloc@plt>
   132e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   132ec:	str	r0, [r1, #32]
   132f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   132f4:	ldr	r0, [r0, #32]
   132f8:	ldr	r1, [sp, #8]
   132fc:	bl	1665c <init_token_int_value@@Base>
   13300:	ldr	r0, [sp, #8]
   13304:	bl	11e34 <malloc@plt>
   13308:	ldr	r1, [fp, #-20]	; 0xffffffec
   1330c:	str	r0, [r1, #36]	; 0x24
   13310:	ldr	r0, [fp, #-20]	; 0xffffffec
   13314:	ldr	r0, [r0, #36]	; 0x24
   13318:	bl	167e8 <init_token_cpar@@Base>
   1331c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13320:	ldr	r1, [pc, #380]	; 134a4 <boolean_expression_complex@@Base+0x3b0>
   13324:	ldr	r1, [pc, r1]
   13328:	str	r0, [r1, #228]	; 0xe4
   1332c:	mov	r0, #10
   13330:	str	r0, [r1, #220]	; 0xdc
   13334:	ldr	r0, [sp, #20]
   13338:	str	r1, [sp, #4]
   1333c:	bl	19d74 <read_boolean_expression@@Base>
   13340:	str	r0, [fp, #-24]	; 0xffffffe8
   13344:	ldr	r0, [sp, #4]
   13348:	ldr	r1, [r0, #204]	; 0xcc
   1334c:	sub	r2, r1, #10
   13350:	clz	r2, r2
   13354:	lsr	r2, r2, #5
   13358:	mov	lr, #16
   1335c:	cmp	r1, #10
   13360:	movweq	lr, #8
   13364:	ldr	r1, [pc, #316]	; 134a8 <boolean_expression_complex@@Base+0x3b4>
   13368:	add	r1, pc, r1
   1336c:	ldr	lr, [r1, lr]!
   13370:	ldr	r3, [r1, #4]
   13374:	adds	lr, lr, #1
   13378:	adc	r3, r3, #0
   1337c:	str	lr, [r1]
   13380:	str	r3, [r1, #4]
   13384:	tst	r2, #1
   13388:	beq	133b0 <boolean_expression_complex@@Base+0x2bc>
   1338c:	ldr	r0, [pc, #280]	; 134ac <boolean_expression_complex@@Base+0x3b8>
   13390:	add	r0, pc, r0
   13394:	ldr	r1, [r0, #24]
   13398:	ldr	r2, [r0, #28]
   1339c:	adds	r1, r1, #1
   133a0:	adc	r2, r2, #0
   133a4:	str	r1, [r0, #24]
   133a8:	str	r2, [r0, #28]
   133ac:	b	133d0 <boolean_expression_complex@@Base+0x2dc>
   133b0:	ldr	r0, [pc, #204]	; 13484 <boolean_expression_complex@@Base+0x390>
   133b4:	add	r0, pc, r0
   133b8:	ldr	r1, [pc, #200]	; 13488 <boolean_expression_complex@@Base+0x394>
   133bc:	add	r1, pc, r1
   133c0:	ldr	r2, [pc, #196]	; 1348c <boolean_expression_complex@@Base+0x398>
   133c4:	add	r3, pc, r2
   133c8:	movw	r2, #166	; 0xa6
   133cc:	bl	11f54 <__assert_fail@plt>
   133d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133d4:	ldr	r0, [r0]
   133d8:	sub	r1, r0, #5
   133dc:	clz	r1, r1
   133e0:	lsr	r1, r1, #5
   133e4:	mov	r2, #40	; 0x28
   133e8:	cmp	r0, #5
   133ec:	movweq	r2, #32
   133f0:	ldr	r0, [pc, #184]	; 134b0 <boolean_expression_complex@@Base+0x3bc>
   133f4:	add	r0, pc, r0
   133f8:	ldr	r2, [r0, r2]!
   133fc:	ldr	r3, [r0, #4]
   13400:	adds	r2, r2, #1
   13404:	adc	r3, r3, #0
   13408:	str	r2, [r0]
   1340c:	str	r3, [r0, #4]
   13410:	tst	r1, #1
   13414:	beq	1343c <boolean_expression_complex@@Base+0x348>
   13418:	ldr	r0, [pc, #148]	; 134b4 <boolean_expression_complex@@Base+0x3c0>
   1341c:	add	r0, pc, r0
   13420:	ldr	r1, [r0, #48]	; 0x30
   13424:	ldr	r2, [r0, #52]	; 0x34
   13428:	adds	r1, r1, #1
   1342c:	adc	r2, r2, #0
   13430:	str	r1, [r0, #48]	; 0x30
   13434:	str	r2, [r0, #52]	; 0x34
   13438:	b	1345c <boolean_expression_complex@@Base+0x368>
   1343c:	ldr	r0, [pc, #76]	; 13490 <boolean_expression_complex@@Base+0x39c>
   13440:	add	r0, pc, r0
   13444:	ldr	r1, [pc, #72]	; 13494 <boolean_expression_complex@@Base+0x3a0>
   13448:	add	r1, pc, r1
   1344c:	ldr	r2, [pc, #68]	; 13498 <boolean_expression_complex@@Base+0x3a4>
   13450:	add	r3, pc, r2
   13454:	movw	r2, #167	; 0xa7
   13458:	bl	11f54 <__assert_fail@plt>
   1345c:	ldr	r0, [pc, #84]	; 134b8 <boolean_expression_complex@@Base+0x3c4>
   13460:	add	r0, pc, r0
   13464:	ldr	r1, [r0, #56]	; 0x38
   13468:	ldr	r2, [r0, #60]	; 0x3c
   1346c:	adds	r1, r1, #1
   13470:	adc	r2, r2, #0
   13474:	str	r1, [r0, #56]	; 0x38
   13478:	str	r2, [r0, #60]	; 0x3c
   1347c:	mov	sp, fp
   13480:	pop	{fp, pc}
   13484:	andeq	sl, r0, ip, ror #22
   13488:	andeq	sl, r0, sl, lsl sl
   1348c:	andeq	sl, r0, r7, ror fp
   13490:	andeq	sl, r0, r0, asr #21
   13494:	andeq	sl, r0, lr, lsl #19
   13498:	andeq	sl, r0, fp, ror #21
   1349c:	andeq	sp, r1, r4, lsl r2
   134a0:	andeq	sp, r1, r8, lsl #4
   134a4:	muleq	r1, ip, sp
   134a8:			; <UNDEFINED> instruction: 0x0001cfb0
   134ac:	andeq	ip, r1, r8, lsl #31
   134b0:	andeq	ip, r1, r4, lsr #30
   134b4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   134b8:			; <UNDEFINED> instruction: 0x0001ceb8

000134bc <boolean_binary_operator_is_read_properly@@Base>:
   134bc:	push	{fp, lr}
   134c0:	mov	fp, sp
   134c4:	sub	sp, sp, #56	; 0x38
   134c8:	ldr	r0, [pc, #1084]	; 1390c <boolean_binary_operator_is_read_properly@@Base+0x450>
   134cc:	add	r0, pc, r0
   134d0:	ldr	r1, [r0, #4]
   134d4:	ldr	r2, [pc, #1076]	; 13910 <boolean_binary_operator_is_read_properly@@Base+0x454>
   134d8:	ldr	r2, [pc, r2]
   134dc:	adds	r2, r2, #1
   134e0:	adc	r1, r1, #0
   134e4:	str	r2, [r0]
   134e8:	str	r1, [r0, #4]
   134ec:	mov	r0, #0
   134f0:	str	r0, [fp, #-24]	; 0xffffffe8
   134f4:	str	r0, [sp, #28]
   134f8:	mov	r1, #3
   134fc:	str	r0, [sp, #20]
   13500:	mov	r0, r1
   13504:	str	r1, [sp, #16]
   13508:	bl	11e34 <malloc@plt>
   1350c:	str	r0, [sp, #24]
   13510:	ldr	r0, [sp, #24]
   13514:	mov	r1, #33	; 0x21
   13518:	strb	r1, [r0]
   1351c:	ldr	r0, [sp, #24]
   13520:	mov	r1, #61	; 0x3d
   13524:	strb	r1, [r0, #1]
   13528:	ldr	r0, [sp, #24]
   1352c:	ldr	r1, [sp, #20]
   13530:	strb	r1, [r0, #2]
   13534:	sub	r0, fp, #16
   13538:	sub	r1, fp, #12
   1353c:	str	r0, [sp, #12]
   13540:	bl	19060 <init_grammar@@Base>
   13544:	mov	r0, #12
   13548:	bl	11e34 <malloc@plt>
   1354c:	str	r0, [fp, #-20]	; 0xffffffec
   13550:	mov	r0, #8
   13554:	str	r0, [sp, #8]
   13558:	bl	11e34 <malloc@plt>
   1355c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13560:	str	r0, [r1]
   13564:	ldr	r0, [fp, #-20]	; 0xffffffec
   13568:	ldr	r0, [r0]
   1356c:	mov	r1, #2
   13570:	bl	1665c <init_token_int_value@@Base>
   13574:	ldr	r0, [sp, #8]
   13578:	bl	11e34 <malloc@plt>
   1357c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13580:	str	r0, [r1, #4]
   13584:	ldr	r0, [fp, #-20]	; 0xffffffec
   13588:	ldr	r0, [r0, #4]
   1358c:	ldr	r1, [sp, #24]
   13590:	bl	16b88 <init_token_boolean_op@@Base>
   13594:	ldr	r0, [sp, #8]
   13598:	bl	11e34 <malloc@plt>
   1359c:	ldr	r1, [fp, #-20]	; 0xffffffec
   135a0:	str	r0, [r1, #8]
   135a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   135a8:	ldr	r0, [r0, #8]
   135ac:	mov	r1, #1
   135b0:	bl	1665c <init_token_int_value@@Base>
   135b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   135b8:	ldr	r1, [pc, #852]	; 13914 <boolean_binary_operator_is_read_properly@@Base+0x458>
   135bc:	ldr	r1, [pc, r1]
   135c0:	str	r0, [r1, #228]	; 0xe4
   135c4:	ldr	r0, [sp, #16]
   135c8:	str	r0, [r1, #220]	; 0xdc
   135cc:	ldr	r0, [sp, #12]
   135d0:	str	r1, [sp, #4]
   135d4:	bl	1a2bc <read_boolean_binary_expression@@Base>
   135d8:	str	r0, [fp, #-24]	; 0xffffffe8
   135dc:	ldr	r0, [sp, #4]
   135e0:	ldr	r1, [r0, #204]	; 0xcc
   135e4:	sub	lr, r1, #3
   135e8:	clz	lr, lr
   135ec:	lsr	lr, lr, #5
   135f0:	mov	r2, #16
   135f4:	cmp	r1, #3
   135f8:	movweq	r2, #8
   135fc:	ldr	r1, [pc, #788]	; 13918 <boolean_binary_operator_is_read_properly@@Base+0x45c>
   13600:	add	r1, pc, r1
   13604:	ldr	r2, [r1, r2]!
   13608:	ldr	r3, [r1, #4]
   1360c:	adds	r2, r2, #1
   13610:	adc	r3, r3, #0
   13614:	str	r2, [r1]
   13618:	str	r3, [r1, #4]
   1361c:	tst	lr, #1
   13620:	beq	13648 <boolean_binary_operator_is_read_properly@@Base+0x18c>
   13624:	ldr	r0, [pc, #752]	; 1391c <boolean_binary_operator_is_read_properly@@Base+0x460>
   13628:	add	r0, pc, r0
   1362c:	ldr	r1, [r0, #24]
   13630:	ldr	r2, [r0, #28]
   13634:	adds	r1, r1, #1
   13638:	adc	r2, r2, #0
   1363c:	str	r1, [r0, #24]
   13640:	str	r2, [r0, #28]
   13644:	b	13668 <boolean_binary_operator_is_read_properly@@Base+0x1ac>
   13648:	ldr	r0, [pc, #640]	; 138d0 <boolean_binary_operator_is_read_properly@@Base+0x414>
   1364c:	add	r0, pc, r0
   13650:	ldr	r1, [pc, #636]	; 138d4 <boolean_binary_operator_is_read_properly@@Base+0x418>
   13654:	add	r1, pc, r1
   13658:	ldr	r2, [pc, #632]	; 138d8 <boolean_binary_operator_is_read_properly@@Base+0x41c>
   1365c:	add	r3, pc, r2
   13660:	movw	r2, #200	; 0xc8
   13664:	bl	11f54 <__assert_fail@plt>
   13668:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1366c:	ldr	r0, [r0]
   13670:	sub	r1, r0, #5
   13674:	clz	r1, r1
   13678:	lsr	r1, r1, #5
   1367c:	mov	r2, #40	; 0x28
   13680:	cmp	r0, #5
   13684:	movweq	r2, #32
   13688:	ldr	r0, [pc, #656]	; 13920 <boolean_binary_operator_is_read_properly@@Base+0x464>
   1368c:	add	r0, pc, r0
   13690:	ldr	r2, [r0, r2]!
   13694:	ldr	r3, [r0, #4]
   13698:	adds	r2, r2, #1
   1369c:	adc	r3, r3, #0
   136a0:	str	r2, [r0]
   136a4:	str	r3, [r0, #4]
   136a8:	tst	r1, #1
   136ac:	beq	136d4 <boolean_binary_operator_is_read_properly@@Base+0x218>
   136b0:	ldr	r0, [pc, #620]	; 13924 <boolean_binary_operator_is_read_properly@@Base+0x468>
   136b4:	add	r0, pc, r0
   136b8:	ldr	r1, [r0, #48]	; 0x30
   136bc:	ldr	r2, [r0, #52]	; 0x34
   136c0:	adds	r1, r1, #1
   136c4:	adc	r2, r2, #0
   136c8:	str	r1, [r0, #48]	; 0x30
   136cc:	str	r2, [r0, #52]	; 0x34
   136d0:	b	136f4 <boolean_binary_operator_is_read_properly@@Base+0x238>
   136d4:	ldr	r0, [pc, #512]	; 138dc <boolean_binary_operator_is_read_properly@@Base+0x420>
   136d8:	add	r0, pc, r0
   136dc:	ldr	r1, [pc, #508]	; 138e0 <boolean_binary_operator_is_read_properly@@Base+0x424>
   136e0:	add	r1, pc, r1
   136e4:	ldr	r2, [pc, #504]	; 138e4 <boolean_binary_operator_is_read_properly@@Base+0x428>
   136e8:	add	r3, pc, r2
   136ec:	movw	r2, #201	; 0xc9
   136f0:	bl	11f54 <__assert_fail@plt>
   136f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136f8:	str	r0, [sp, #28]
   136fc:	ldr	r0, [sp, #28]
   13700:	ldr	r0, [r0, #8]
   13704:	ldr	r0, [r0]
   13708:	sub	r1, r0, #1
   1370c:	clz	r1, r1
   13710:	lsr	r1, r1, #5
   13714:	mov	r2, #64	; 0x40
   13718:	cmp	r0, #1
   1371c:	movweq	r2, #56	; 0x38
   13720:	ldr	r0, [pc, #512]	; 13928 <boolean_binary_operator_is_read_properly@@Base+0x46c>
   13724:	add	r0, pc, r0
   13728:	ldr	r2, [r0, r2]!
   1372c:	ldr	r3, [r0, #4]
   13730:	adds	r2, r2, #1
   13734:	adc	r3, r3, #0
   13738:	str	r2, [r0]
   1373c:	str	r3, [r0, #4]
   13740:	tst	r1, #1
   13744:	beq	1376c <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   13748:	ldr	r0, [pc, #476]	; 1392c <boolean_binary_operator_is_read_properly@@Base+0x470>
   1374c:	add	r0, pc, r0
   13750:	ldr	r1, [r0, #72]	; 0x48
   13754:	ldr	r2, [r0, #76]	; 0x4c
   13758:	adds	r1, r1, #1
   1375c:	adc	r2, r2, #0
   13760:	str	r1, [r0, #72]	; 0x48
   13764:	str	r2, [r0, #76]	; 0x4c
   13768:	b	1378c <boolean_binary_operator_is_read_properly@@Base+0x2d0>
   1376c:	ldr	r0, [pc, #372]	; 138e8 <boolean_binary_operator_is_read_properly@@Base+0x42c>
   13770:	add	r0, pc, r0
   13774:	ldr	r1, [pc, #368]	; 138ec <boolean_binary_operator_is_read_properly@@Base+0x430>
   13778:	add	r1, pc, r1
   1377c:	ldr	r2, [pc, #364]	; 138f0 <boolean_binary_operator_is_read_properly@@Base+0x434>
   13780:	add	r3, pc, r2
   13784:	movw	r2, #203	; 0xcb
   13788:	bl	11f54 <__assert_fail@plt>
   1378c:	ldr	r0, [sp, #28]
   13790:	ldr	r0, [r0, #16]
   13794:	sub	r1, r0, #1
   13798:	clz	r1, r1
   1379c:	lsr	r1, r1, #5
   137a0:	mov	r2, #88	; 0x58
   137a4:	cmp	r0, #1
   137a8:	movweq	r2, #80	; 0x50
   137ac:	ldr	r0, [pc, #380]	; 13930 <boolean_binary_operator_is_read_properly@@Base+0x474>
   137b0:	add	r0, pc, r0
   137b4:	ldr	r2, [r0, r2]!
   137b8:	ldr	r3, [r0, #4]
   137bc:	adds	r2, r2, #1
   137c0:	adc	r3, r3, #0
   137c4:	str	r2, [r0]
   137c8:	str	r3, [r0, #4]
   137cc:	tst	r1, #1
   137d0:	beq	137f8 <boolean_binary_operator_is_read_properly@@Base+0x33c>
   137d4:	ldr	r0, [pc, #344]	; 13934 <boolean_binary_operator_is_read_properly@@Base+0x478>
   137d8:	add	r0, pc, r0
   137dc:	ldr	r1, [r0, #96]	; 0x60
   137e0:	ldr	r2, [r0, #100]	; 0x64
   137e4:	adds	r1, r1, #1
   137e8:	adc	r2, r2, #0
   137ec:	str	r1, [r0, #96]	; 0x60
   137f0:	str	r2, [r0, #100]	; 0x64
   137f4:	b	13818 <boolean_binary_operator_is_read_properly@@Base+0x35c>
   137f8:	ldr	r0, [pc, #244]	; 138f4 <boolean_binary_operator_is_read_properly@@Base+0x438>
   137fc:	add	r0, pc, r0
   13800:	ldr	r1, [pc, #240]	; 138f8 <boolean_binary_operator_is_read_properly@@Base+0x43c>
   13804:	add	r1, pc, r1
   13808:	ldr	r2, [pc, #236]	; 138fc <boolean_binary_operator_is_read_properly@@Base+0x440>
   1380c:	add	r3, pc, r2
   13810:	movw	r2, #204	; 0xcc
   13814:	bl	11f54 <__assert_fail@plt>
   13818:	ldr	r0, [sp, #28]
   1381c:	ldr	r0, [r0, #12]
   13820:	ldr	r0, [r0]
   13824:	sub	r1, r0, #1
   13828:	clz	r1, r1
   1382c:	lsr	r1, r1, #5
   13830:	mov	r2, #112	; 0x70
   13834:	cmp	r0, #1
   13838:	movweq	r2, #104	; 0x68
   1383c:	ldr	r0, [pc, #244]	; 13938 <boolean_binary_operator_is_read_properly@@Base+0x47c>
   13840:	add	r0, pc, r0
   13844:	ldr	r2, [r0, r2]!
   13848:	ldr	r3, [r0, #4]
   1384c:	adds	r2, r2, #1
   13850:	adc	r3, r3, #0
   13854:	str	r2, [r0]
   13858:	str	r3, [r0, #4]
   1385c:	tst	r1, #1
   13860:	beq	13888 <boolean_binary_operator_is_read_properly@@Base+0x3cc>
   13864:	ldr	r0, [pc, #208]	; 1393c <boolean_binary_operator_is_read_properly@@Base+0x480>
   13868:	add	r0, pc, r0
   1386c:	ldr	r1, [r0, #120]	; 0x78
   13870:	ldr	r2, [r0, #124]	; 0x7c
   13874:	adds	r1, r1, #1
   13878:	adc	r2, r2, #0
   1387c:	str	r1, [r0, #120]	; 0x78
   13880:	str	r2, [r0, #124]	; 0x7c
   13884:	b	138a8 <boolean_binary_operator_is_read_properly@@Base+0x3ec>
   13888:	ldr	r0, [pc, #112]	; 13900 <boolean_binary_operator_is_read_properly@@Base+0x444>
   1388c:	add	r0, pc, r0
   13890:	ldr	r1, [pc, #108]	; 13904 <boolean_binary_operator_is_read_properly@@Base+0x448>
   13894:	add	r1, pc, r1
   13898:	ldr	r2, [pc, #104]	; 13908 <boolean_binary_operator_is_read_properly@@Base+0x44c>
   1389c:	add	r3, pc, r2
   138a0:	movw	r2, #205	; 0xcd
   138a4:	bl	11f54 <__assert_fail@plt>
   138a8:	ldr	r0, [pc, #144]	; 13940 <boolean_binary_operator_is_read_properly@@Base+0x484>
   138ac:	add	r0, pc, r0
   138b0:	ldr	r1, [r0, #128]	; 0x80
   138b4:	ldr	r2, [r0, #132]	; 0x84
   138b8:	adds	r1, r1, #1
   138bc:	adc	r2, r2, #0
   138c0:	str	r1, [r0, #128]	; 0x80
   138c4:	str	r2, [r0, #132]	; 0x84
   138c8:	mov	sp, fp
   138cc:	pop	{fp, pc}
   138d0:	andeq	sl, r0, r1, lsl r9
   138d4:	andeq	sl, r0, r2, lsl #15
   138d8:	andeq	sl, r0, fp, lsl r9
   138dc:	andeq	sl, r0, r8, lsr #16
   138e0:	strdeq	sl, [r0], -r6
   138e4:	andeq	sl, r0, pc, lsl #17
   138e8:	andeq	sl, r0, r7, lsr r8
   138ec:	andeq	sl, r0, lr, asr r6
   138f0:	strdeq	sl, [r0], -r7
   138f4:	andeq	sl, r0, r6, asr #15
   138f8:	ldrdeq	sl, [r0], -r2
   138fc:	andeq	sl, r0, fp, ror #14
   13900:	andeq	sl, r0, pc, asr #14
   13904:	andeq	sl, r0, r2, asr #10
   13908:	ldrdeq	sl, [r0], -fp
   1390c:	andeq	ip, r1, ip, lsl #29
   13910:	andeq	ip, r1, r0, lsl #29
   13914:	andeq	ip, r1, r4, lsl #22
   13918:	andeq	ip, r1, r8, asr sp
   1391c:	andeq	ip, r1, r0, lsr sp
   13920:	andeq	ip, r1, ip, asr #25
   13924:	andeq	ip, r1, r4, lsr #25
   13928:	andeq	ip, r1, r4, lsr ip
   1392c:	andeq	ip, r1, ip, lsl #24
   13930:	andeq	ip, r1, r8, lsr #23
   13934:	andeq	ip, r1, r0, lsl #23
   13938:	andeq	ip, r1, r8, lsl fp
   1393c:	strdeq	ip, [r1], -r0
   13940:	andeq	ip, r1, ip, lsr #21

00013944 <boolean_unary_operator_is_read_properly@@Base>:
   13944:	push	{fp, lr}
   13948:	mov	fp, sp
   1394c:	sub	sp, sp, #56	; 0x38
   13950:	ldr	r0, [pc, #1032]	; 13d60 <boolean_unary_operator_is_read_properly@@Base+0x41c>
   13954:	add	r0, pc, r0
   13958:	ldr	r1, [r0, #4]
   1395c:	ldr	r2, [pc, #1024]	; 13d64 <boolean_unary_operator_is_read_properly@@Base+0x420>
   13960:	ldr	r2, [pc, r2]
   13964:	adds	r2, r2, #1
   13968:	adc	r1, r1, #0
   1396c:	str	r2, [r0]
   13970:	str	r1, [r0, #4]
   13974:	mov	r0, #0
   13978:	str	r0, [fp, #-24]	; 0xffffffe8
   1397c:	str	r0, [sp, #28]
   13980:	mov	r1, #2
   13984:	str	r0, [sp, #20]
   13988:	mov	r0, r1
   1398c:	str	r1, [sp, #16]
   13990:	bl	11e34 <malloc@plt>
   13994:	str	r0, [sp, #24]
   13998:	ldr	r0, [sp, #24]
   1399c:	mov	r1, #33	; 0x21
   139a0:	strb	r1, [r0]
   139a4:	ldr	r0, [sp, #24]
   139a8:	ldr	r1, [sp, #20]
   139ac:	strb	r1, [r0, #1]
   139b0:	sub	r0, fp, #16
   139b4:	sub	r1, fp, #12
   139b8:	str	r0, [sp, #12]
   139bc:	bl	19060 <init_grammar@@Base>
   139c0:	mov	r0, #8
   139c4:	str	r0, [sp, #8]
   139c8:	bl	11e34 <malloc@plt>
   139cc:	str	r0, [fp, #-20]	; 0xffffffec
   139d0:	ldr	r0, [sp, #8]
   139d4:	bl	11e34 <malloc@plt>
   139d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   139dc:	str	r0, [r1]
   139e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   139e4:	ldr	r0, [r0]
   139e8:	ldr	r1, [sp, #24]
   139ec:	bl	16b88 <init_token_boolean_op@@Base>
   139f0:	ldr	r0, [sp, #8]
   139f4:	bl	11e34 <malloc@plt>
   139f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   139fc:	str	r0, [r1, #4]
   13a00:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a04:	ldr	r0, [r0, #4]
   13a08:	mov	r1, #1
   13a0c:	bl	1665c <init_token_int_value@@Base>
   13a10:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a14:	ldr	r1, [pc, #844]	; 13d68 <boolean_unary_operator_is_read_properly@@Base+0x424>
   13a18:	ldr	r1, [pc, r1]
   13a1c:	str	r0, [r1, #228]	; 0xe4
   13a20:	ldr	r0, [sp, #16]
   13a24:	str	r0, [r1, #220]	; 0xdc
   13a28:	ldr	r0, [sp, #12]
   13a2c:	str	r1, [sp, #4]
   13a30:	bl	1a664 <read_boolean_unary_expression@@Base>
   13a34:	str	r0, [fp, #-24]	; 0xffffffe8
   13a38:	ldr	r0, [sp, #4]
   13a3c:	ldr	r1, [r0, #204]	; 0xcc
   13a40:	sub	lr, r1, #2
   13a44:	clz	lr, lr
   13a48:	lsr	lr, lr, #5
   13a4c:	mov	r2, #16
   13a50:	cmp	r1, #2
   13a54:	movweq	r2, #8
   13a58:	ldr	r1, [pc, #780]	; 13d6c <boolean_unary_operator_is_read_properly@@Base+0x428>
   13a5c:	add	r1, pc, r1
   13a60:	ldr	r2, [r1, r2]!
   13a64:	ldr	r3, [r1, #4]
   13a68:	adds	r2, r2, #1
   13a6c:	adc	r3, r3, #0
   13a70:	str	r2, [r1]
   13a74:	str	r3, [r1, #4]
   13a78:	tst	lr, #1
   13a7c:	beq	13aa4 <boolean_unary_operator_is_read_properly@@Base+0x160>
   13a80:	ldr	r0, [pc, #744]	; 13d70 <boolean_unary_operator_is_read_properly@@Base+0x42c>
   13a84:	add	r0, pc, r0
   13a88:	ldr	r1, [r0, #24]
   13a8c:	ldr	r2, [r0, #28]
   13a90:	adds	r1, r1, #1
   13a94:	adc	r2, r2, #0
   13a98:	str	r1, [r0, #24]
   13a9c:	str	r2, [r0, #28]
   13aa0:	b	13ac4 <boolean_unary_operator_is_read_properly@@Base+0x180>
   13aa4:	ldr	r0, [pc, #632]	; 13d24 <boolean_unary_operator_is_read_properly@@Base+0x3e0>
   13aa8:	add	r0, pc, r0
   13aac:	ldr	r1, [pc, #628]	; 13d28 <boolean_unary_operator_is_read_properly@@Base+0x3e4>
   13ab0:	add	r1, pc, r1
   13ab4:	ldr	r2, [pc, #624]	; 13d2c <boolean_unary_operator_is_read_properly@@Base+0x3e8>
   13ab8:	add	r3, pc, r2
   13abc:	movw	r2, #235	; 0xeb
   13ac0:	bl	11f54 <__assert_fail@plt>
   13ac4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ac8:	ldr	r0, [r0]
   13acc:	sub	r1, r0, #5
   13ad0:	clz	r1, r1
   13ad4:	lsr	r1, r1, #5
   13ad8:	mov	r2, #40	; 0x28
   13adc:	cmp	r0, #5
   13ae0:	movweq	r2, #32
   13ae4:	ldr	r0, [pc, #648]	; 13d74 <boolean_unary_operator_is_read_properly@@Base+0x430>
   13ae8:	add	r0, pc, r0
   13aec:	ldr	r2, [r0, r2]!
   13af0:	ldr	r3, [r0, #4]
   13af4:	adds	r2, r2, #1
   13af8:	adc	r3, r3, #0
   13afc:	str	r2, [r0]
   13b00:	str	r3, [r0, #4]
   13b04:	tst	r1, #1
   13b08:	beq	13b30 <boolean_unary_operator_is_read_properly@@Base+0x1ec>
   13b0c:	ldr	r0, [pc, #612]	; 13d78 <boolean_unary_operator_is_read_properly@@Base+0x434>
   13b10:	add	r0, pc, r0
   13b14:	ldr	r1, [r0, #48]	; 0x30
   13b18:	ldr	r2, [r0, #52]	; 0x34
   13b1c:	adds	r1, r1, #1
   13b20:	adc	r2, r2, #0
   13b24:	str	r1, [r0, #48]	; 0x30
   13b28:	str	r2, [r0, #52]	; 0x34
   13b2c:	b	13b50 <boolean_unary_operator_is_read_properly@@Base+0x20c>
   13b30:	ldr	r0, [pc, #504]	; 13d30 <boolean_unary_operator_is_read_properly@@Base+0x3ec>
   13b34:	add	r0, pc, r0
   13b38:	ldr	r1, [pc, #500]	; 13d34 <boolean_unary_operator_is_read_properly@@Base+0x3f0>
   13b3c:	add	r1, pc, r1
   13b40:	ldr	r2, [pc, #496]	; 13d38 <boolean_unary_operator_is_read_properly@@Base+0x3f4>
   13b44:	add	r3, pc, r2
   13b48:	movw	r2, #236	; 0xec
   13b4c:	bl	11f54 <__assert_fail@plt>
   13b50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13b54:	str	r0, [sp, #28]
   13b58:	ldr	r0, [sp, #28]
   13b5c:	ldr	r0, [r0, #8]
   13b60:	ldr	r0, [r0]
   13b64:	sub	r1, r0, #1
   13b68:	clz	r1, r1
   13b6c:	lsr	r1, r1, #5
   13b70:	mov	r2, #64	; 0x40
   13b74:	cmp	r0, #1
   13b78:	movweq	r2, #56	; 0x38
   13b7c:	ldr	r0, [pc, #504]	; 13d7c <boolean_unary_operator_is_read_properly@@Base+0x438>
   13b80:	add	r0, pc, r0
   13b84:	ldr	r2, [r0, r2]!
   13b88:	ldr	r3, [r0, #4]
   13b8c:	adds	r2, r2, #1
   13b90:	adc	r3, r3, #0
   13b94:	str	r2, [r0]
   13b98:	str	r3, [r0, #4]
   13b9c:	tst	r1, #1
   13ba0:	beq	13bc8 <boolean_unary_operator_is_read_properly@@Base+0x284>
   13ba4:	ldr	r0, [pc, #468]	; 13d80 <boolean_unary_operator_is_read_properly@@Base+0x43c>
   13ba8:	add	r0, pc, r0
   13bac:	ldr	r1, [r0, #72]	; 0x48
   13bb0:	ldr	r2, [r0, #76]	; 0x4c
   13bb4:	adds	r1, r1, #1
   13bb8:	adc	r2, r2, #0
   13bbc:	str	r1, [r0, #72]	; 0x48
   13bc0:	str	r2, [r0, #76]	; 0x4c
   13bc4:	b	13be8 <boolean_unary_operator_is_read_properly@@Base+0x2a4>
   13bc8:	ldr	r0, [pc, #364]	; 13d3c <boolean_unary_operator_is_read_properly@@Base+0x3f8>
   13bcc:	add	r0, pc, r0
   13bd0:	ldr	r1, [pc, #360]	; 13d40 <boolean_unary_operator_is_read_properly@@Base+0x3fc>
   13bd4:	add	r1, pc, r1
   13bd8:	ldr	r2, [pc, #356]	; 13d44 <boolean_unary_operator_is_read_properly@@Base+0x400>
   13bdc:	add	r3, pc, r2
   13be0:	movw	r2, #238	; 0xee
   13be4:	bl	11f54 <__assert_fail@plt>
   13be8:	ldr	r0, [sp, #28]
   13bec:	ldr	r0, [r0, #16]
   13bf0:	sub	r1, r0, #8
   13bf4:	clz	r1, r1
   13bf8:	lsr	r1, r1, #5
   13bfc:	mov	r2, #88	; 0x58
   13c00:	cmp	r0, #8
   13c04:	movweq	r2, #80	; 0x50
   13c08:	ldr	r0, [pc, #372]	; 13d84 <boolean_unary_operator_is_read_properly@@Base+0x440>
   13c0c:	add	r0, pc, r0
   13c10:	ldr	r2, [r0, r2]!
   13c14:	ldr	r3, [r0, #4]
   13c18:	adds	r2, r2, #1
   13c1c:	adc	r3, r3, #0
   13c20:	str	r2, [r0]
   13c24:	str	r3, [r0, #4]
   13c28:	tst	r1, #1
   13c2c:	beq	13c54 <boolean_unary_operator_is_read_properly@@Base+0x310>
   13c30:	ldr	r0, [pc, #336]	; 13d88 <boolean_unary_operator_is_read_properly@@Base+0x444>
   13c34:	add	r0, pc, r0
   13c38:	ldr	r1, [r0, #96]	; 0x60
   13c3c:	ldr	r2, [r0, #100]	; 0x64
   13c40:	adds	r1, r1, #1
   13c44:	adc	r2, r2, #0
   13c48:	str	r1, [r0, #96]	; 0x60
   13c4c:	str	r2, [r0, #100]	; 0x64
   13c50:	b	13c74 <boolean_unary_operator_is_read_properly@@Base+0x330>
   13c54:	ldr	r0, [pc, #236]	; 13d48 <boolean_unary_operator_is_read_properly@@Base+0x404>
   13c58:	add	r0, pc, r0
   13c5c:	ldr	r1, [pc, #232]	; 13d4c <boolean_unary_operator_is_read_properly@@Base+0x408>
   13c60:	add	r1, pc, r1
   13c64:	ldr	r2, [pc, #228]	; 13d50 <boolean_unary_operator_is_read_properly@@Base+0x40c>
   13c68:	add	r3, pc, r2
   13c6c:	movw	r2, #239	; 0xef
   13c70:	bl	11f54 <__assert_fail@plt>
   13c74:	ldr	r0, [sp, #28]
   13c78:	ldr	r0, [r0, #12]
   13c7c:	clz	r1, r0
   13c80:	lsr	r1, r1, #5
   13c84:	mov	r2, #112	; 0x70
   13c88:	cmp	r0, #0
   13c8c:	movweq	r2, #104	; 0x68
   13c90:	ldr	r0, [pc, #244]	; 13d8c <boolean_unary_operator_is_read_properly@@Base+0x448>
   13c94:	add	r0, pc, r0
   13c98:	ldr	r2, [r0, r2]!
   13c9c:	ldr	r3, [r0, #4]
   13ca0:	adds	r2, r2, #1
   13ca4:	adc	r3, r3, #0
   13ca8:	str	r2, [r0]
   13cac:	str	r3, [r0, #4]
   13cb0:	tst	r1, #1
   13cb4:	beq	13cdc <boolean_unary_operator_is_read_properly@@Base+0x398>
   13cb8:	ldr	r0, [pc, #208]	; 13d90 <boolean_unary_operator_is_read_properly@@Base+0x44c>
   13cbc:	add	r0, pc, r0
   13cc0:	ldr	r1, [r0, #120]	; 0x78
   13cc4:	ldr	r2, [r0, #124]	; 0x7c
   13cc8:	adds	r1, r1, #1
   13ccc:	adc	r2, r2, #0
   13cd0:	str	r1, [r0, #120]	; 0x78
   13cd4:	str	r2, [r0, #124]	; 0x7c
   13cd8:	b	13cfc <boolean_unary_operator_is_read_properly@@Base+0x3b8>
   13cdc:	ldr	r0, [pc, #112]	; 13d54 <boolean_unary_operator_is_read_properly@@Base+0x410>
   13ce0:	add	r0, pc, r0
   13ce4:	ldr	r1, [pc, #108]	; 13d58 <boolean_unary_operator_is_read_properly@@Base+0x414>
   13ce8:	add	r1, pc, r1
   13cec:	ldr	r2, [pc, #104]	; 13d5c <boolean_unary_operator_is_read_properly@@Base+0x418>
   13cf0:	add	r3, pc, r2
   13cf4:	movw	r2, #240	; 0xf0
   13cf8:	bl	11f54 <__assert_fail@plt>
   13cfc:	ldr	r0, [pc, #144]	; 13d94 <boolean_unary_operator_is_read_properly@@Base+0x450>
   13d00:	add	r0, pc, r0
   13d04:	ldr	r1, [r0, #128]	; 0x80
   13d08:	ldr	r2, [r0, #132]	; 0x84
   13d0c:	adds	r1, r1, #1
   13d10:	adc	r2, r2, #0
   13d14:	str	r1, [r0, #128]	; 0x80
   13d18:	str	r2, [r0, #132]	; 0x84
   13d1c:	mov	sp, fp
   13d20:	pop	{fp, pc}
   13d24:			; <UNDEFINED> instruction: 0x0000a3b2
   13d28:	andeq	sl, r0, r6, lsr #6
   13d2c:	andeq	sl, r0, pc, lsr r5
   13d30:	andeq	sl, r0, ip, asr #7
   13d34:	muleq	r0, sl, r2
   13d38:			; <UNDEFINED> instruction: 0x0000a4b3
   13d3c:	ldrdeq	sl, [r0], -fp
   13d40:	andeq	sl, r0, r2, lsl #4
   13d44:	andeq	sl, r0, fp, lsl r4
   13d48:	andeq	sl, r0, lr, asr #7
   13d4c:	andeq	sl, r0, r6, ror r1
   13d50:	andeq	sl, r0, pc, lsl #7
   13d54:	andeq	sl, r0, sl, asr r3
   13d58:	andeq	sl, r0, lr, ror #1
   13d5c:	andeq	sl, r0, r7, lsl #6
   13d60:	muleq	r1, r4, sl
   13d64:	andeq	ip, r1, r8, lsl #21
   13d68:	andeq	ip, r1, r8, lsr #13
   13d6c:	andeq	ip, r1, ip, lsl #19
   13d70:	andeq	ip, r1, r4, ror #18
   13d74:	andeq	ip, r1, r0, lsl #18
   13d78:	ldrdeq	ip, [r1], -r8
   13d7c:	andeq	ip, r1, r8, ror #16
   13d80:	andeq	ip, r1, r0, asr #16
   13d84:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13d88:			; <UNDEFINED> instruction: 0x0001c7b4
   13d8c:	andeq	ip, r1, r4, asr r7
   13d90:	andeq	ip, r1, ip, lsr #14
   13d94:	andeq	ip, r1, r8, ror #13

00013d98 <if_statement_only@@Base>:
   13d98:	push	{fp, lr}
   13d9c:	mov	fp, sp
   13da0:	sub	sp, sp, #56	; 0x38
   13da4:	ldr	r0, [pc, #936]	; 14154 <if_statement_only@@Base+0x3bc>
   13da8:	add	r0, pc, r0
   13dac:	ldr	r1, [r0, #4]
   13db0:	ldr	r2, [pc, #928]	; 14158 <if_statement_only@@Base+0x3c0>
   13db4:	ldr	r2, [pc, r2]
   13db8:	adds	r2, r2, #1
   13dbc:	adc	r1, r1, #0
   13dc0:	str	r2, [r0]
   13dc4:	str	r1, [r0, #4]
   13dc8:	mov	r0, #0
   13dcc:	str	r0, [fp, #-24]	; 0xffffffe8
   13dd0:	sub	r1, fp, #16
   13dd4:	sub	r2, fp, #12
   13dd8:	str	r0, [sp, #24]
   13ddc:	mov	r0, r1
   13de0:	str	r1, [sp, #20]
   13de4:	mov	r1, r2
   13de8:	bl	19060 <init_grammar@@Base>
   13dec:	mov	r0, #3
   13df0:	bl	11e34 <malloc@plt>
   13df4:	str	r0, [sp, #28]
   13df8:	ldr	r0, [sp, #28]
   13dfc:	mov	r1, #33	; 0x21
   13e00:	strb	r1, [r0]
   13e04:	ldr	r0, [sp, #28]
   13e08:	mov	r1, #61	; 0x3d
   13e0c:	strb	r1, [r0, #1]
   13e10:	ldr	r0, [sp, #28]
   13e14:	ldr	r1, [sp, #24]
   13e18:	strb	r1, [r0, #2]
   13e1c:	mov	r0, #36	; 0x24
   13e20:	bl	11e34 <malloc@plt>
   13e24:	str	r0, [fp, #-20]	; 0xffffffec
   13e28:	mov	r0, #4
   13e2c:	str	r0, [sp, #16]
   13e30:	bl	11e34 <malloc@plt>
   13e34:	ldr	r1, [fp, #-20]	; 0xffffffec
   13e38:	str	r0, [r1]
   13e3c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r0, [r0]
   13e44:	bl	16774 <init_token_opar@@Base>
   13e48:	mov	r0, #8
   13e4c:	str	r0, [sp, #12]
   13e50:	bl	11e34 <malloc@plt>
   13e54:	ldr	r1, [fp, #-20]	; 0xffffffec
   13e58:	str	r0, [r1, #4]
   13e5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13e60:	ldr	r0, [r0, #4]
   13e64:	mov	r1, #1
   13e68:	str	r1, [sp, #8]
   13e6c:	bl	1665c <init_token_int_value@@Base>
   13e70:	ldr	r0, [sp, #12]
   13e74:	bl	11e34 <malloc@plt>
   13e78:	ldr	r1, [fp, #-20]	; 0xffffffec
   13e7c:	str	r0, [r1, #8]
   13e80:	ldr	r0, [fp, #-20]	; 0xffffffec
   13e84:	ldr	r0, [r0, #8]
   13e88:	ldr	r1, [sp, #8]
   13e8c:	bl	1665c <init_token_int_value@@Base>
   13e90:	ldr	r0, [sp, #12]
   13e94:	bl	11e34 <malloc@plt>
   13e98:	ldr	r1, [fp, #-20]	; 0xffffffec
   13e9c:	str	r0, [r1, #12]
   13ea0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ea4:	ldr	r0, [r0, #12]
   13ea8:	ldr	r1, [sp, #28]
   13eac:	bl	16b88 <init_token_boolean_op@@Base>
   13eb0:	ldr	r0, [sp, #12]
   13eb4:	bl	11e34 <malloc@plt>
   13eb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ebc:	str	r0, [r1, #16]
   13ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ec4:	ldr	r0, [r0, #16]
   13ec8:	ldr	r1, [sp, #8]
   13ecc:	bl	1665c <init_token_int_value@@Base>
   13ed0:	ldr	r0, [sp, #16]
   13ed4:	bl	11e34 <malloc@plt>
   13ed8:	ldr	r1, [fp, #-20]	; 0xffffffec
   13edc:	str	r0, [r1, #20]
   13ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ee4:	ldr	r0, [r0, #20]
   13ee8:	bl	167e8 <init_token_cpar@@Base>
   13eec:	ldr	r0, [sp, #16]
   13ef0:	bl	11e34 <malloc@plt>
   13ef4:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ef8:	str	r0, [r1, #24]
   13efc:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f00:	ldr	r0, [r0, #24]
   13f04:	bl	1685c <init_token_obra@@Base>
   13f08:	ldr	r0, [sp, #16]
   13f0c:	bl	11e34 <malloc@plt>
   13f10:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f14:	str	r0, [r1, #28]
   13f18:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f1c:	ldr	r0, [r0, #28]
   13f20:	bl	168d0 <init_token_cbra@@Base>
   13f24:	ldr	r0, [sp, #16]
   13f28:	bl	11e34 <malloc@plt>
   13f2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f30:	str	r0, [r1, #32]
   13f34:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f38:	ldr	r0, [r0, #32]
   13f3c:	bl	16a2c <init_token_eof@@Base>
   13f40:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f44:	ldr	r1, [pc, #528]	; 1415c <if_statement_only@@Base+0x3c4>
   13f48:	ldr	r1, [pc, r1]
   13f4c:	str	r0, [r1, #228]	; 0xe4
   13f50:	mov	r0, #9
   13f54:	str	r0, [r1, #220]	; 0xdc
   13f58:	ldr	r0, [sp, #20]
   13f5c:	str	r1, [sp, #4]
   13f60:	bl	19b24 <read_if_statement@@Base>
   13f64:	str	r0, [fp, #-24]	; 0xffffffe8
   13f68:	ldr	r0, [sp, #4]
   13f6c:	ldr	r1, [r0, #204]	; 0xcc
   13f70:	sub	r2, r1, #9
   13f74:	clz	r2, r2
   13f78:	lsr	r2, r2, #5
   13f7c:	mov	lr, #16
   13f80:	cmp	r1, #9
   13f84:	movweq	lr, #8
   13f88:	ldr	r1, [pc, #464]	; 14160 <if_statement_only@@Base+0x3c8>
   13f8c:	add	r1, pc, r1
   13f90:	ldr	lr, [r1, lr]!
   13f94:	ldr	r3, [r1, #4]
   13f98:	adds	lr, lr, #1
   13f9c:	adc	r3, r3, #0
   13fa0:	str	lr, [r1]
   13fa4:	str	r3, [r1, #4]
   13fa8:	tst	r2, #1
   13fac:	beq	13fd4 <if_statement_only@@Base+0x23c>
   13fb0:	ldr	r0, [pc, #428]	; 14164 <if_statement_only@@Base+0x3cc>
   13fb4:	add	r0, pc, r0
   13fb8:	ldr	r1, [r0, #24]
   13fbc:	ldr	r2, [r0, #28]
   13fc0:	adds	r1, r1, #1
   13fc4:	adc	r2, r2, #0
   13fc8:	str	r1, [r0, #24]
   13fcc:	str	r2, [r0, #28]
   13fd0:	b	13ff4 <if_statement_only@@Base+0x25c>
   13fd4:	ldr	r0, [pc, #340]	; 14130 <if_statement_only@@Base+0x398>
   13fd8:	add	r0, pc, r0
   13fdc:	ldr	r1, [pc, #336]	; 14134 <if_statement_only@@Base+0x39c>
   13fe0:	add	r1, pc, r1
   13fe4:	ldr	r2, [pc, #332]	; 14138 <if_statement_only@@Base+0x3a0>
   13fe8:	add	r3, pc, r2
   13fec:	movw	r2, #283	; 0x11b
   13ff0:	bl	11f54 <__assert_fail@plt>
   13ff4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ff8:	cmp	r0, #0
   13ffc:	mov	r1, r0
   14000:	movwne	r1, #1
   14004:	mov	r2, #40	; 0x28
   14008:	cmp	r0, #0
   1400c:	movwne	r2, #32
   14010:	ldr	r0, [pc, #336]	; 14168 <if_statement_only@@Base+0x3d0>
   14014:	add	r0, pc, r0
   14018:	ldr	r2, [r0, r2]!
   1401c:	ldr	r3, [r0, #4]
   14020:	adds	r2, r2, #1
   14024:	adc	r3, r3, #0
   14028:	str	r2, [r0]
   1402c:	str	r3, [r0, #4]
   14030:	tst	r1, #1
   14034:	beq	1405c <if_statement_only@@Base+0x2c4>
   14038:	ldr	r0, [pc, #300]	; 1416c <if_statement_only@@Base+0x3d4>
   1403c:	add	r0, pc, r0
   14040:	ldr	r1, [r0, #48]	; 0x30
   14044:	ldr	r2, [r0, #52]	; 0x34
   14048:	adds	r1, r1, #1
   1404c:	adc	r2, r2, #0
   14050:	str	r1, [r0, #48]	; 0x30
   14054:	str	r2, [r0, #52]	; 0x34
   14058:	b	1407c <if_statement_only@@Base+0x2e4>
   1405c:	ldr	r0, [pc, #216]	; 1413c <if_statement_only@@Base+0x3a4>
   14060:	add	r0, pc, r0
   14064:	ldr	r1, [pc, #212]	; 14140 <if_statement_only@@Base+0x3a8>
   14068:	add	r1, pc, r1
   1406c:	ldr	r2, [pc, #208]	; 14144 <if_statement_only@@Base+0x3ac>
   14070:	add	r3, pc, r2
   14074:	movw	r2, #284	; 0x11c
   14078:	bl	11f54 <__assert_fail@plt>
   1407c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14080:	ldr	r0, [r0]
   14084:	sub	r1, r0, #4
   14088:	clz	r1, r1
   1408c:	lsr	r1, r1, #5
   14090:	mov	r2, #64	; 0x40
   14094:	cmp	r0, #4
   14098:	movweq	r2, #56	; 0x38
   1409c:	ldr	r0, [pc, #204]	; 14170 <if_statement_only@@Base+0x3d8>
   140a0:	add	r0, pc, r0
   140a4:	ldr	r2, [r0, r2]!
   140a8:	ldr	r3, [r0, #4]
   140ac:	adds	r2, r2, #1
   140b0:	adc	r3, r3, #0
   140b4:	str	r2, [r0]
   140b8:	str	r3, [r0, #4]
   140bc:	tst	r1, #1
   140c0:	beq	140e8 <if_statement_only@@Base+0x350>
   140c4:	ldr	r0, [pc, #168]	; 14174 <if_statement_only@@Base+0x3dc>
   140c8:	add	r0, pc, r0
   140cc:	ldr	r1, [r0, #72]	; 0x48
   140d0:	ldr	r2, [r0, #76]	; 0x4c
   140d4:	adds	r1, r1, #1
   140d8:	adc	r2, r2, #0
   140dc:	str	r1, [r0, #72]	; 0x48
   140e0:	str	r2, [r0, #76]	; 0x4c
   140e4:	b	14108 <if_statement_only@@Base+0x370>
   140e8:	ldr	r0, [pc, #88]	; 14148 <if_statement_only@@Base+0x3b0>
   140ec:	add	r0, pc, r0
   140f0:	ldr	r1, [pc, #84]	; 1414c <if_statement_only@@Base+0x3b4>
   140f4:	add	r1, pc, r1
   140f8:	ldr	r2, [pc, #80]	; 14150 <if_statement_only@@Base+0x3b8>
   140fc:	add	r3, pc, r2
   14100:	movw	r2, #285	; 0x11d
   14104:	bl	11f54 <__assert_fail@plt>
   14108:	ldr	r0, [pc, #104]	; 14178 <if_statement_only@@Base+0x3e0>
   1410c:	add	r0, pc, r0
   14110:	ldr	r1, [r0, #80]	; 0x50
   14114:	ldr	r2, [r0, #84]	; 0x54
   14118:	adds	r1, r1, #1
   1411c:	adc	r2, r2, #0
   14120:	str	r1, [r0, #80]	; 0x50
   14124:	str	r2, [r0, #84]	; 0x54
   14128:	mov	sp, fp
   1412c:	pop	{fp, pc}
   14130:	andeq	sl, r0, r7, ror r0
   14134:	strdeq	r9, [r0], -r6
   14138:	andeq	sl, r0, r1, lsl #1
   1413c:	andeq	sl, r0, r2, lsr #32
   14140:	andeq	r9, r0, lr, ror #26
   14144:	strdeq	r9, [r0], -r9	; <UNPREDICTABLE>
   14148:	andeq	r9, r0, r2, lsr #31
   1414c:	andeq	r9, r0, r2, ror #25
   14150:	andeq	r9, r0, sp, ror #30
   14154:	ldrdeq	ip, [r1], -r0
   14158:	andeq	ip, r1, r4, asr #13
   1415c:	andeq	ip, r1, r8, ror r1
   14160:	andeq	ip, r1, ip, ror #9
   14164:	andeq	ip, r1, r4, asr #9
   14168:	andeq	ip, r1, r4, ror #8
   1416c:	andeq	ip, r1, ip, lsr r4
   14170:	ldrdeq	ip, [r1], -r8
   14174:			; <UNDEFINED> instruction: 0x0001c3b0
   14178:	andeq	ip, r1, ip, ror #6

0001417c <if_else_statements@@Base>:
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	sub	sp, sp, #56	; 0x38
   14188:	ldr	r0, [pc, #992]	; 14570 <if_else_statements@@Base+0x3f4>
   1418c:	add	r0, pc, r0
   14190:	ldr	r1, [r0, #4]
   14194:	ldr	r2, [pc, #984]	; 14574 <if_else_statements@@Base+0x3f8>
   14198:	ldr	r2, [pc, r2]
   1419c:	adds	r2, r2, #1
   141a0:	adc	r1, r1, #0
   141a4:	str	r2, [r0]
   141a8:	str	r1, [r0, #4]
   141ac:	mov	r0, #0
   141b0:	str	r0, [fp, #-24]	; 0xffffffe8
   141b4:	sub	r1, fp, #16
   141b8:	sub	r2, fp, #12
   141bc:	str	r0, [sp, #24]
   141c0:	mov	r0, r1
   141c4:	str	r1, [sp, #20]
   141c8:	mov	r1, r2
   141cc:	bl	19060 <init_grammar@@Base>
   141d0:	mov	r0, #3
   141d4:	bl	11e34 <malloc@plt>
   141d8:	str	r0, [sp, #28]
   141dc:	ldr	r0, [sp, #28]
   141e0:	mov	r1, #33	; 0x21
   141e4:	strb	r1, [r0]
   141e8:	ldr	r0, [sp, #28]
   141ec:	mov	r1, #61	; 0x3d
   141f0:	strb	r1, [r0, #1]
   141f4:	ldr	r0, [sp, #28]
   141f8:	ldr	r1, [sp, #24]
   141fc:	strb	r1, [r0, #2]
   14200:	mov	r0, #44	; 0x2c
   14204:	bl	11e34 <malloc@plt>
   14208:	str	r0, [fp, #-20]	; 0xffffffec
   1420c:	mov	r0, #4
   14210:	str	r0, [sp, #16]
   14214:	bl	11e34 <malloc@plt>
   14218:	ldr	r1, [fp, #-20]	; 0xffffffec
   1421c:	str	r0, [r1]
   14220:	ldr	r0, [fp, #-20]	; 0xffffffec
   14224:	ldr	r0, [r0]
   14228:	bl	16774 <init_token_opar@@Base>
   1422c:	mov	r0, #8
   14230:	str	r0, [sp, #12]
   14234:	bl	11e34 <malloc@plt>
   14238:	ldr	r1, [fp, #-20]	; 0xffffffec
   1423c:	str	r0, [r1, #4]
   14240:	ldr	r0, [fp, #-20]	; 0xffffffec
   14244:	ldr	r0, [r0, #4]
   14248:	mov	r1, #1
   1424c:	str	r1, [sp, #8]
   14250:	bl	1665c <init_token_int_value@@Base>
   14254:	ldr	r0, [sp, #12]
   14258:	bl	11e34 <malloc@plt>
   1425c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14260:	str	r0, [r1, #8]
   14264:	ldr	r0, [fp, #-20]	; 0xffffffec
   14268:	ldr	r0, [r0, #8]
   1426c:	ldr	r1, [sp, #8]
   14270:	bl	1665c <init_token_int_value@@Base>
   14274:	ldr	r0, [sp, #12]
   14278:	bl	11e34 <malloc@plt>
   1427c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14280:	str	r0, [r1, #12]
   14284:	ldr	r0, [fp, #-20]	; 0xffffffec
   14288:	ldr	r0, [r0, #12]
   1428c:	ldr	r1, [sp, #28]
   14290:	bl	16b88 <init_token_boolean_op@@Base>
   14294:	ldr	r0, [sp, #12]
   14298:	bl	11e34 <malloc@plt>
   1429c:	ldr	r1, [fp, #-20]	; 0xffffffec
   142a0:	str	r0, [r1, #16]
   142a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   142a8:	ldr	r0, [r0, #16]
   142ac:	ldr	r1, [sp, #8]
   142b0:	bl	1665c <init_token_int_value@@Base>
   142b4:	ldr	r0, [sp, #16]
   142b8:	bl	11e34 <malloc@plt>
   142bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   142c0:	str	r0, [r1, #20]
   142c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   142c8:	ldr	r0, [r0, #20]
   142cc:	bl	167e8 <init_token_cpar@@Base>
   142d0:	ldr	r0, [sp, #16]
   142d4:	bl	11e34 <malloc@plt>
   142d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   142dc:	str	r0, [r1, #24]
   142e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   142e4:	ldr	r0, [r0, #24]
   142e8:	bl	1685c <init_token_obra@@Base>
   142ec:	ldr	r0, [sp, #16]
   142f0:	bl	11e34 <malloc@plt>
   142f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   142f8:	str	r0, [r1, #28]
   142fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14300:	ldr	r0, [r0, #28]
   14304:	bl	168d0 <init_token_cbra@@Base>
   14308:	ldr	r0, [sp, #16]
   1430c:	bl	11e34 <malloc@plt>
   14310:	ldr	r1, [fp, #-20]	; 0xffffffec
   14314:	str	r0, [r1, #32]
   14318:	ldr	r0, [fp, #-20]	; 0xffffffec
   1431c:	ldr	r0, [r0, #32]
   14320:	bl	16b14 <init_token_else@@Base>
   14324:	ldr	r0, [sp, #16]
   14328:	bl	11e34 <malloc@plt>
   1432c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14330:	str	r0, [r1, #36]	; 0x24
   14334:	ldr	r0, [fp, #-20]	; 0xffffffec
   14338:	ldr	r0, [r0, #36]	; 0x24
   1433c:	bl	1685c <init_token_obra@@Base>
   14340:	ldr	r0, [sp, #16]
   14344:	bl	11e34 <malloc@plt>
   14348:	ldr	r1, [fp, #-20]	; 0xffffffec
   1434c:	str	r0, [r1, #40]	; 0x28
   14350:	ldr	r0, [fp, #-20]	; 0xffffffec
   14354:	ldr	r0, [r0, #40]	; 0x28
   14358:	bl	168d0 <init_token_cbra@@Base>
   1435c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14360:	ldr	r1, [pc, #528]	; 14578 <if_else_statements@@Base+0x3fc>
   14364:	ldr	r1, [pc, r1]
   14368:	str	r0, [r1, #228]	; 0xe4
   1436c:	mov	r0, #11
   14370:	str	r0, [r1, #220]	; 0xdc
   14374:	ldr	r0, [sp, #20]
   14378:	str	r1, [sp, #4]
   1437c:	bl	19b24 <read_if_statement@@Base>
   14380:	str	r0, [fp, #-24]	; 0xffffffe8
   14384:	ldr	r0, [sp, #4]
   14388:	ldr	r1, [r0, #204]	; 0xcc
   1438c:	sub	r2, r1, #11
   14390:	clz	r2, r2
   14394:	lsr	r2, r2, #5
   14398:	mov	lr, #16
   1439c:	cmp	r1, #11
   143a0:	movweq	lr, #8
   143a4:	ldr	r1, [pc, #464]	; 1457c <if_else_statements@@Base+0x400>
   143a8:	add	r1, pc, r1
   143ac:	ldr	lr, [r1, lr]!
   143b0:	ldr	r3, [r1, #4]
   143b4:	adds	lr, lr, #1
   143b8:	adc	r3, r3, #0
   143bc:	str	lr, [r1]
   143c0:	str	r3, [r1, #4]
   143c4:	tst	r2, #1
   143c8:	beq	143f0 <if_else_statements@@Base+0x274>
   143cc:	ldr	r0, [pc, #428]	; 14580 <if_else_statements@@Base+0x404>
   143d0:	add	r0, pc, r0
   143d4:	ldr	r1, [r0, #24]
   143d8:	ldr	r2, [r0, #28]
   143dc:	adds	r1, r1, #1
   143e0:	adc	r2, r2, #0
   143e4:	str	r1, [r0, #24]
   143e8:	str	r2, [r0, #28]
   143ec:	b	14410 <if_else_statements@@Base+0x294>
   143f0:	ldr	r0, [pc, #340]	; 1454c <if_else_statements@@Base+0x3d0>
   143f4:	add	r0, pc, r0
   143f8:	ldr	r1, [pc, #336]	; 14550 <if_else_statements@@Base+0x3d4>
   143fc:	add	r1, pc, r1
   14400:	ldr	r2, [pc, #332]	; 14554 <if_else_statements@@Base+0x3d8>
   14404:	add	r3, pc, r2
   14408:	movw	r2, #332	; 0x14c
   1440c:	bl	11f54 <__assert_fail@plt>
   14410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14414:	cmp	r0, #0
   14418:	mov	r1, r0
   1441c:	movwne	r1, #1
   14420:	mov	r2, #40	; 0x28
   14424:	cmp	r0, #0
   14428:	movwne	r2, #32
   1442c:	ldr	r0, [pc, #336]	; 14584 <if_else_statements@@Base+0x408>
   14430:	add	r0, pc, r0
   14434:	ldr	r2, [r0, r2]!
   14438:	ldr	r3, [r0, #4]
   1443c:	adds	r2, r2, #1
   14440:	adc	r3, r3, #0
   14444:	str	r2, [r0]
   14448:	str	r3, [r0, #4]
   1444c:	tst	r1, #1
   14450:	beq	14478 <if_else_statements@@Base+0x2fc>
   14454:	ldr	r0, [pc, #300]	; 14588 <if_else_statements@@Base+0x40c>
   14458:	add	r0, pc, r0
   1445c:	ldr	r1, [r0, #48]	; 0x30
   14460:	ldr	r2, [r0, #52]	; 0x34
   14464:	adds	r1, r1, #1
   14468:	adc	r2, r2, #0
   1446c:	str	r1, [r0, #48]	; 0x30
   14470:	str	r2, [r0, #52]	; 0x34
   14474:	b	14498 <if_else_statements@@Base+0x31c>
   14478:	ldr	r0, [pc, #216]	; 14558 <if_else_statements@@Base+0x3dc>
   1447c:	add	r0, pc, r0
   14480:	ldr	r1, [pc, #212]	; 1455c <if_else_statements@@Base+0x3e0>
   14484:	add	r1, pc, r1
   14488:	ldr	r2, [pc, #208]	; 14560 <if_else_statements@@Base+0x3e4>
   1448c:	add	r3, pc, r2
   14490:	movw	r2, #333	; 0x14d
   14494:	bl	11f54 <__assert_fail@plt>
   14498:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1449c:	ldr	r0, [r0]
   144a0:	sub	r1, r0, #4
   144a4:	clz	r1, r1
   144a8:	lsr	r1, r1, #5
   144ac:	mov	r2, #64	; 0x40
   144b0:	cmp	r0, #4
   144b4:	movweq	r2, #56	; 0x38
   144b8:	ldr	r0, [pc, #204]	; 1458c <if_else_statements@@Base+0x410>
   144bc:	add	r0, pc, r0
   144c0:	ldr	r2, [r0, r2]!
   144c4:	ldr	r3, [r0, #4]
   144c8:	adds	r2, r2, #1
   144cc:	adc	r3, r3, #0
   144d0:	str	r2, [r0]
   144d4:	str	r3, [r0, #4]
   144d8:	tst	r1, #1
   144dc:	beq	14504 <if_else_statements@@Base+0x388>
   144e0:	ldr	r0, [pc, #168]	; 14590 <if_else_statements@@Base+0x414>
   144e4:	add	r0, pc, r0
   144e8:	ldr	r1, [r0, #72]	; 0x48
   144ec:	ldr	r2, [r0, #76]	; 0x4c
   144f0:	adds	r1, r1, #1
   144f4:	adc	r2, r2, #0
   144f8:	str	r1, [r0, #72]	; 0x48
   144fc:	str	r2, [r0, #76]	; 0x4c
   14500:	b	14524 <if_else_statements@@Base+0x3a8>
   14504:	ldr	r0, [pc, #88]	; 14564 <if_else_statements@@Base+0x3e8>
   14508:	add	r0, pc, r0
   1450c:	ldr	r1, [pc, #84]	; 14568 <if_else_statements@@Base+0x3ec>
   14510:	add	r1, pc, r1
   14514:	ldr	r2, [pc, #80]	; 1456c <if_else_statements@@Base+0x3f0>
   14518:	add	r3, pc, r2
   1451c:	movw	r2, #334	; 0x14e
   14520:	bl	11f54 <__assert_fail@plt>
   14524:	ldr	r0, [pc, #104]	; 14594 <if_else_statements@@Base+0x418>
   14528:	add	r0, pc, r0
   1452c:	ldr	r1, [r0, #80]	; 0x50
   14530:	ldr	r2, [r0, #84]	; 0x54
   14534:	adds	r1, r1, #1
   14538:	adc	r2, r2, #0
   1453c:	str	r1, [r0, #80]	; 0x50
   14540:	str	r2, [r0, #84]	; 0x54
   14544:	mov	sp, fp
   14548:	pop	{fp, pc}
   1454c:	andeq	r9, r0, ip, lsr #25
   14550:	ldrdeq	r9, [r0], -sl
   14554:			; <UNDEFINED> instruction: 0x00009cb7
   14558:	andeq	r9, r0, r6, lsl #24
   1455c:	andeq	r9, r0, r2, asr r9
   14560:	andeq	r9, r0, pc, lsr #24
   14564:	andeq	r9, r0, r6, lsl #23
   14568:	andeq	r9, r0, r6, asr #17
   1456c:	andeq	r9, r0, r3, lsr #23
   14570:	andeq	ip, r1, ip, asr #6
   14574:	andeq	ip, r1, r0, asr #6
   14578:	andeq	fp, r1, ip, asr sp
   1457c:	andeq	ip, r1, r0, lsr r1
   14580:	andeq	ip, r1, r8, lsl #2
   14584:	andeq	ip, r1, r8, lsr #1
   14588:	andeq	ip, r1, r0, lsl #1
   1458c:	andeq	ip, r1, ip, lsl r0
   14590:	strdeq	fp, [r1], -r4
   14594:			; <UNDEFINED> instruction: 0x0001bfb0

00014598 <body_with_two_returns@@Base>:
   14598:	push	{fp, lr}
   1459c:	mov	fp, sp
   145a0:	sub	sp, sp, #48	; 0x30
   145a4:	ldr	r0, [pc, #1144]	; 14a24 <body_with_two_returns@@Base+0x48c>
   145a8:	add	r0, pc, r0
   145ac:	ldr	r1, [r0, #4]
   145b0:	ldr	r2, [pc, #1136]	; 14a28 <body_with_two_returns@@Base+0x490>
   145b4:	ldr	r2, [pc, r2]
   145b8:	adds	r2, r2, #1
   145bc:	adc	r1, r1, #0
   145c0:	str	r2, [r0]
   145c4:	str	r1, [r0, #4]
   145c8:	mov	r0, #0
   145cc:	str	r0, [sp, #24]
   145d0:	sub	r0, fp, #16
   145d4:	sub	r1, fp, #12
   145d8:	str	r0, [sp, #20]
   145dc:	bl	19060 <init_grammar@@Base>
   145e0:	mov	r0, #32
   145e4:	bl	11e34 <malloc@plt>
   145e8:	str	r0, [fp, #-20]	; 0xffffffec
   145ec:	mov	r0, #4
   145f0:	str	r0, [sp, #16]
   145f4:	bl	11e34 <malloc@plt>
   145f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   145fc:	str	r0, [r1]
   14600:	ldr	r0, [fp, #-20]	; 0xffffffec
   14604:	ldr	r0, [r0]
   14608:	bl	1685c <init_token_obra@@Base>
   1460c:	ldr	r0, [sp, #16]
   14610:	bl	11e34 <malloc@plt>
   14614:	ldr	r1, [fp, #-20]	; 0xffffffec
   14618:	str	r0, [r1, #4]
   1461c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14620:	ldr	r0, [r0, #4]
   14624:	bl	16944 <init_token_return@@Base>
   14628:	mov	r0, #8
   1462c:	str	r0, [sp, #12]
   14630:	bl	11e34 <malloc@plt>
   14634:	ldr	r1, [fp, #-20]	; 0xffffffec
   14638:	str	r0, [r1, #8]
   1463c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14640:	ldr	r0, [r0, #8]
   14644:	mov	r1, #1
   14648:	str	r1, [sp, #8]
   1464c:	bl	1665c <init_token_int_value@@Base>
   14650:	ldr	r0, [sp, #16]
   14654:	bl	11e34 <malloc@plt>
   14658:	ldr	r1, [fp, #-20]	; 0xffffffec
   1465c:	str	r0, [r1, #12]
   14660:	ldr	r0, [fp, #-20]	; 0xffffffec
   14664:	ldr	r0, [r0, #12]
   14668:	bl	169b8 <init_token_semicolon@@Base>
   1466c:	ldr	r0, [sp, #16]
   14670:	bl	11e34 <malloc@plt>
   14674:	ldr	r1, [fp, #-20]	; 0xffffffec
   14678:	str	r0, [r1, #16]
   1467c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14680:	ldr	r0, [r0, #16]
   14684:	bl	16944 <init_token_return@@Base>
   14688:	ldr	r0, [sp, #12]
   1468c:	bl	11e34 <malloc@plt>
   14690:	ldr	r1, [fp, #-20]	; 0xffffffec
   14694:	str	r0, [r1, #20]
   14698:	ldr	r0, [fp, #-20]	; 0xffffffec
   1469c:	ldr	r0, [r0, #20]
   146a0:	ldr	r1, [sp, #8]
   146a4:	bl	1665c <init_token_int_value@@Base>
   146a8:	ldr	r0, [sp, #16]
   146ac:	bl	11e34 <malloc@plt>
   146b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   146b4:	str	r0, [r1, #24]
   146b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   146bc:	ldr	r0, [r0, #24]
   146c0:	bl	169b8 <init_token_semicolon@@Base>
   146c4:	ldr	r0, [sp, #16]
   146c8:	bl	11e34 <malloc@plt>
   146cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   146d0:	str	r0, [r1, #28]
   146d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   146d8:	ldr	r0, [r0, #28]
   146dc:	bl	168d0 <init_token_cbra@@Base>
   146e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   146e4:	ldr	r1, [pc, #832]	; 14a2c <body_with_two_returns@@Base+0x494>
   146e8:	ldr	r1, [pc, r1]
   146ec:	str	r0, [r1, #228]	; 0xe4
   146f0:	ldr	r0, [sp, #12]
   146f4:	str	r0, [r1, #220]	; 0xdc
   146f8:	ldr	r0, [sp, #20]
   146fc:	str	r1, [sp, #4]
   14700:	bl	194f8 <read_body@@Base>
   14704:	str	r0, [sp, #24]
   14708:	ldr	r0, [sp, #4]
   1470c:	ldr	r1, [r0, #204]	; 0xcc
   14710:	sub	lr, r1, #8
   14714:	clz	lr, lr
   14718:	lsr	lr, lr, #5
   1471c:	cmp	r1, #8
   14720:	movwne	r1, #16
   14724:	ldr	r2, [pc, #772]	; 14a30 <body_with_two_returns@@Base+0x498>
   14728:	add	r2, pc, r2
   1472c:	ldr	r1, [r2, r1]!
   14730:	ldr	r3, [r2, #4]
   14734:	adds	r1, r1, #1
   14738:	adc	r3, r3, #0
   1473c:	str	r1, [r2]
   14740:	str	r3, [r2, #4]
   14744:	tst	lr, #1
   14748:	beq	14770 <body_with_two_returns@@Base+0x1d8>
   1474c:	ldr	r0, [pc, #736]	; 14a34 <body_with_two_returns@@Base+0x49c>
   14750:	add	r0, pc, r0
   14754:	ldr	r1, [r0, #24]
   14758:	ldr	r2, [r0, #28]
   1475c:	adds	r1, r1, #1
   14760:	adc	r2, r2, #0
   14764:	str	r1, [r0, #24]
   14768:	str	r2, [r0, #28]
   1476c:	b	14790 <body_with_two_returns@@Base+0x1f8>
   14770:	ldr	r0, [pc, #624]	; 149e8 <body_with_two_returns@@Base+0x450>
   14774:	add	r0, pc, r0
   14778:	ldr	r1, [pc, #620]	; 149ec <body_with_two_returns@@Base+0x454>
   1477c:	add	r1, pc, r1
   14780:	ldr	r2, [pc, #616]	; 149f0 <body_with_two_returns@@Base+0x458>
   14784:	add	r3, pc, r2
   14788:	movw	r2, #371	; 0x173
   1478c:	bl	11f54 <__assert_fail@plt>
   14790:	ldr	r0, [sp, #24]
   14794:	cmp	r0, #0
   14798:	mov	r1, r0
   1479c:	movwne	r1, #1
   147a0:	mov	r2, #40	; 0x28
   147a4:	cmp	r0, #0
   147a8:	movwne	r2, #32
   147ac:	ldr	r0, [pc, #644]	; 14a38 <body_with_two_returns@@Base+0x4a0>
   147b0:	add	r0, pc, r0
   147b4:	ldr	r2, [r0, r2]!
   147b8:	ldr	r3, [r0, #4]
   147bc:	adds	r2, r2, #1
   147c0:	adc	r3, r3, #0
   147c4:	str	r2, [r0]
   147c8:	str	r3, [r0, #4]
   147cc:	tst	r1, #1
   147d0:	beq	147f8 <body_with_two_returns@@Base+0x260>
   147d4:	ldr	r0, [pc, #608]	; 14a3c <body_with_two_returns@@Base+0x4a4>
   147d8:	add	r0, pc, r0
   147dc:	ldr	r1, [r0, #48]	; 0x30
   147e0:	ldr	r2, [r0, #52]	; 0x34
   147e4:	adds	r1, r1, #1
   147e8:	adc	r2, r2, #0
   147ec:	str	r1, [r0, #48]	; 0x30
   147f0:	str	r2, [r0, #52]	; 0x34
   147f4:	b	14818 <body_with_two_returns@@Base+0x280>
   147f8:	ldr	r0, [pc, #500]	; 149f4 <body_with_two_returns@@Base+0x45c>
   147fc:	add	r0, pc, r0
   14800:	ldr	r1, [pc, #496]	; 149f8 <body_with_two_returns@@Base+0x460>
   14804:	add	r1, pc, r1
   14808:	ldr	r2, [pc, #492]	; 149fc <body_with_two_returns@@Base+0x464>
   1480c:	add	r3, pc, r2
   14810:	movw	r2, #372	; 0x174
   14814:	bl	11f54 <__assert_fail@plt>
   14818:	ldr	r0, [sp, #24]
   1481c:	ldr	r0, [r0]
   14820:	sub	r1, r0, #3
   14824:	clz	r1, r1
   14828:	lsr	r1, r1, #5
   1482c:	mov	r2, #64	; 0x40
   14830:	cmp	r0, #3
   14834:	movweq	r2, #56	; 0x38
   14838:	ldr	r0, [pc, #512]	; 14a40 <body_with_two_returns@@Base+0x4a8>
   1483c:	add	r0, pc, r0
   14840:	ldr	r2, [r0, r2]!
   14844:	ldr	r3, [r0, #4]
   14848:	adds	r2, r2, #1
   1484c:	adc	r3, r3, #0
   14850:	str	r2, [r0]
   14854:	str	r3, [r0, #4]
   14858:	tst	r1, #1
   1485c:	beq	14884 <body_with_two_returns@@Base+0x2ec>
   14860:	ldr	r0, [pc, #476]	; 14a44 <body_with_two_returns@@Base+0x4ac>
   14864:	add	r0, pc, r0
   14868:	ldr	r1, [r0, #72]	; 0x48
   1486c:	ldr	r2, [r0, #76]	; 0x4c
   14870:	adds	r1, r1, #1
   14874:	adc	r2, r2, #0
   14878:	str	r1, [r0, #72]	; 0x48
   1487c:	str	r2, [r0, #76]	; 0x4c
   14880:	b	148a4 <body_with_two_returns@@Base+0x30c>
   14884:	ldr	r0, [pc, #372]	; 14a00 <body_with_two_returns@@Base+0x468>
   14888:	add	r0, pc, r0
   1488c:	ldr	r1, [pc, #368]	; 14a04 <body_with_two_returns@@Base+0x46c>
   14890:	add	r1, pc, r1
   14894:	ldr	r2, [pc, #364]	; 14a08 <body_with_two_returns@@Base+0x470>
   14898:	add	r3, pc, r2
   1489c:	movw	r2, #373	; 0x175
   148a0:	bl	11f54 <__assert_fail@plt>
   148a4:	ldr	r0, [sp, #24]
   148a8:	ldr	r0, [r0, #4]
   148ac:	ldr	r0, [r0]
   148b0:	sub	r1, r0, #3
   148b4:	clz	r1, r1
   148b8:	lsr	r1, r1, #5
   148bc:	mov	r2, #88	; 0x58
   148c0:	cmp	r0, #3
   148c4:	movweq	r2, #80	; 0x50
   148c8:	ldr	r0, [pc, #376]	; 14a48 <body_with_two_returns@@Base+0x4b0>
   148cc:	add	r0, pc, r0
   148d0:	ldr	r2, [r0, r2]!
   148d4:	ldr	r3, [r0, #4]
   148d8:	adds	r2, r2, #1
   148dc:	adc	r3, r3, #0
   148e0:	str	r2, [r0]
   148e4:	str	r3, [r0, #4]
   148e8:	tst	r1, #1
   148ec:	beq	14914 <body_with_two_returns@@Base+0x37c>
   148f0:	ldr	r0, [pc, #340]	; 14a4c <body_with_two_returns@@Base+0x4b4>
   148f4:	add	r0, pc, r0
   148f8:	ldr	r1, [r0, #96]	; 0x60
   148fc:	ldr	r2, [r0, #100]	; 0x64
   14900:	adds	r1, r1, #1
   14904:	adc	r2, r2, #0
   14908:	str	r1, [r0, #96]	; 0x60
   1490c:	str	r2, [r0, #100]	; 0x64
   14910:	b	14934 <body_with_two_returns@@Base+0x39c>
   14914:	ldr	r0, [pc, #240]	; 14a0c <body_with_two_returns@@Base+0x474>
   14918:	add	r0, pc, r0
   1491c:	ldr	r1, [pc, #236]	; 14a10 <body_with_two_returns@@Base+0x478>
   14920:	add	r1, pc, r1
   14924:	ldr	r2, [pc, #232]	; 14a14 <body_with_two_returns@@Base+0x47c>
   14928:	add	r3, pc, r2
   1492c:	movw	r2, #374	; 0x176
   14930:	bl	11f54 <__assert_fail@plt>
   14934:	ldr	r0, [sp, #24]
   14938:	ldr	r0, [r0, #4]
   1493c:	ldr	r0, [r0, #4]
   14940:	clz	r1, r0
   14944:	lsr	r1, r1, #5
   14948:	mov	r2, #112	; 0x70
   1494c:	cmp	r0, #0
   14950:	movweq	r2, #104	; 0x68
   14954:	ldr	r0, [pc, #244]	; 14a50 <body_with_two_returns@@Base+0x4b8>
   14958:	add	r0, pc, r0
   1495c:	ldr	r2, [r0, r2]!
   14960:	ldr	r3, [r0, #4]
   14964:	adds	r2, r2, #1
   14968:	adc	r3, r3, #0
   1496c:	str	r2, [r0]
   14970:	str	r3, [r0, #4]
   14974:	tst	r1, #1
   14978:	beq	149a0 <body_with_two_returns@@Base+0x408>
   1497c:	ldr	r0, [pc, #208]	; 14a54 <body_with_two_returns@@Base+0x4bc>
   14980:	add	r0, pc, r0
   14984:	ldr	r1, [r0, #120]	; 0x78
   14988:	ldr	r2, [r0, #124]	; 0x7c
   1498c:	adds	r1, r1, #1
   14990:	adc	r2, r2, #0
   14994:	str	r1, [r0, #120]	; 0x78
   14998:	str	r2, [r0, #124]	; 0x7c
   1499c:	b	149c0 <body_with_two_returns@@Base+0x428>
   149a0:	ldr	r0, [pc, #112]	; 14a18 <body_with_two_returns@@Base+0x480>
   149a4:	add	r0, pc, r0
   149a8:	ldr	r1, [pc, #108]	; 14a1c <body_with_two_returns@@Base+0x484>
   149ac:	add	r1, pc, r1
   149b0:	ldr	r2, [pc, #104]	; 14a20 <body_with_two_returns@@Base+0x488>
   149b4:	add	r3, pc, r2
   149b8:	movw	r2, #375	; 0x177
   149bc:	bl	11f54 <__assert_fail@plt>
   149c0:	ldr	r0, [pc, #144]	; 14a58 <body_with_two_returns@@Base+0x4c0>
   149c4:	add	r0, pc, r0
   149c8:	ldr	r1, [r0, #128]	; 0x80
   149cc:	ldr	r2, [r0, #132]	; 0x84
   149d0:	adds	r1, r1, #1
   149d4:	adc	r2, r2, #0
   149d8:	str	r1, [r0, #128]	; 0x80
   149dc:	str	r2, [r0, #132]	; 0x84
   149e0:	mov	sp, fp
   149e4:	pop	{fp, pc}
   149e8:	andeq	r9, r0, r1, ror #18
   149ec:	andeq	r9, r0, sl, asr r6
   149f0:	andeq	r9, r0, fp, ror #18
   149f4:	andeq	r9, r0, r6, lsl #17
   149f8:	ldrdeq	r9, [r0], -r2
   149fc:	andeq	r9, r0, r3, ror #17
   14a00:	andeq	r9, r0, r4, lsl #17
   14a04:	andeq	r9, r0, r6, asr #10
   14a08:	andeq	r9, r0, r7, asr r8
   14a0c:	andeq	r9, r0, sl, lsl #16
   14a10:			; <UNDEFINED> instruction: 0x000094b6
   14a14:	andeq	r9, r0, r7, asr #15
   14a18:	muleq	r0, sl, r7
   14a1c:	andeq	r9, r0, sl, lsr #8
   14a20:	andeq	r9, r0, fp, lsr r7
   14a24:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14a28:	andeq	fp, r1, r4, lsl #31
   14a2c:	ldrdeq	fp, [r1], -r8
   14a30:	andeq	fp, r1, r0, lsl lr
   14a34:	andeq	fp, r1, r8, ror #27
   14a38:	andeq	fp, r1, r8, lsl #27
   14a3c:	andeq	fp, r1, r0, ror #26
   14a40:	strdeq	fp, [r1], -ip
   14a44:	ldrdeq	fp, [r1], -r4
   14a48:	andeq	fp, r1, ip, ror #24
   14a4c:	andeq	fp, r1, r4, asr #24
   14a50:	andeq	fp, r1, r0, ror #23
   14a54:			; <UNDEFINED> instruction: 0x0001bbb8
   14a58:	andeq	fp, r1, r4, ror fp

00014a5c <body_with_one_return@@Base>:
   14a5c:	push	{fp, lr}
   14a60:	mov	fp, sp
   14a64:	sub	sp, sp, #40	; 0x28
   14a68:	ldr	r0, [pc, #892]	; 14dec <body_with_one_return@@Base+0x390>
   14a6c:	add	r0, pc, r0
   14a70:	ldr	r1, [r0, #4]
   14a74:	ldr	r2, [pc, #884]	; 14df0 <body_with_one_return@@Base+0x394>
   14a78:	ldr	r2, [pc, r2]
   14a7c:	adds	r2, r2, #1
   14a80:	adc	r1, r1, #0
   14a84:	str	r2, [r0]
   14a88:	str	r1, [r0, #4]
   14a8c:	mov	r0, #0
   14a90:	str	r0, [sp, #16]
   14a94:	sub	r0, fp, #16
   14a98:	sub	r1, fp, #12
   14a9c:	str	r0, [sp, #12]
   14aa0:	bl	19060 <init_grammar@@Base>
   14aa4:	mov	r0, #20
   14aa8:	bl	11e34 <malloc@plt>
   14aac:	str	r0, [sp, #20]
   14ab0:	mov	r0, #4
   14ab4:	str	r0, [sp, #8]
   14ab8:	bl	11e34 <malloc@plt>
   14abc:	ldr	r1, [sp, #20]
   14ac0:	str	r0, [r1]
   14ac4:	ldr	r0, [sp, #20]
   14ac8:	ldr	r0, [r0]
   14acc:	bl	1685c <init_token_obra@@Base>
   14ad0:	ldr	r0, [sp, #8]
   14ad4:	bl	11e34 <malloc@plt>
   14ad8:	ldr	r1, [sp, #20]
   14adc:	str	r0, [r1, #4]
   14ae0:	ldr	r0, [sp, #20]
   14ae4:	ldr	r0, [r0, #4]
   14ae8:	bl	16944 <init_token_return@@Base>
   14aec:	mov	r0, #8
   14af0:	bl	11e34 <malloc@plt>
   14af4:	ldr	r1, [sp, #20]
   14af8:	str	r0, [r1, #8]
   14afc:	ldr	r0, [sp, #20]
   14b00:	ldr	r0, [r0, #8]
   14b04:	mov	r1, #1
   14b08:	bl	1665c <init_token_int_value@@Base>
   14b0c:	ldr	r0, [sp, #8]
   14b10:	bl	11e34 <malloc@plt>
   14b14:	ldr	r1, [sp, #20]
   14b18:	str	r0, [r1, #12]
   14b1c:	ldr	r0, [sp, #20]
   14b20:	ldr	r0, [r0, #12]
   14b24:	bl	169b8 <init_token_semicolon@@Base>
   14b28:	ldr	r0, [sp, #8]
   14b2c:	bl	11e34 <malloc@plt>
   14b30:	ldr	r1, [sp, #20]
   14b34:	str	r0, [r1, #16]
   14b38:	ldr	r0, [sp, #20]
   14b3c:	ldr	r0, [r0, #16]
   14b40:	bl	168d0 <init_token_cbra@@Base>
   14b44:	ldr	r0, [sp, #20]
   14b48:	ldr	r1, [pc, #676]	; 14df4 <body_with_one_return@@Base+0x398>
   14b4c:	ldr	r1, [pc, r1]
   14b50:	str	r0, [r1, #228]	; 0xe4
   14b54:	mov	r0, #5
   14b58:	str	r0, [r1, #220]	; 0xdc
   14b5c:	ldr	r0, [sp, #12]
   14b60:	str	r1, [sp, #4]
   14b64:	bl	194f8 <read_body@@Base>
   14b68:	str	r0, [sp, #16]
   14b6c:	ldr	r0, [sp, #4]
   14b70:	ldr	r1, [r0, #204]	; 0xcc
   14b74:	sub	lr, r1, #5
   14b78:	clz	lr, lr
   14b7c:	lsr	lr, lr, #5
   14b80:	mov	r2, #16
   14b84:	cmp	r1, #5
   14b88:	movweq	r2, #8
   14b8c:	ldr	r1, [pc, #612]	; 14df8 <body_with_one_return@@Base+0x39c>
   14b90:	add	r1, pc, r1
   14b94:	ldr	r2, [r1, r2]!
   14b98:	ldr	r3, [r1, #4]
   14b9c:	adds	r2, r2, #1
   14ba0:	adc	r3, r3, #0
   14ba4:	str	r2, [r1]
   14ba8:	str	r3, [r1, #4]
   14bac:	tst	lr, #1
   14bb0:	beq	14bd8 <body_with_one_return@@Base+0x17c>
   14bb4:	ldr	r0, [pc, #576]	; 14dfc <body_with_one_return@@Base+0x3a0>
   14bb8:	add	r0, pc, r0
   14bbc:	ldr	r1, [r0, #24]
   14bc0:	ldr	r2, [r0, #28]
   14bc4:	adds	r1, r1, #1
   14bc8:	adc	r2, r2, #0
   14bcc:	str	r1, [r0, #24]
   14bd0:	str	r2, [r0, #28]
   14bd4:	b	14bf8 <body_with_one_return@@Base+0x19c>
   14bd8:	ldr	r0, [pc, #476]	; 14dbc <body_with_one_return@@Base+0x360>
   14bdc:	add	r0, pc, r0
   14be0:	ldr	r1, [pc, #472]	; 14dc0 <body_with_one_return@@Base+0x364>
   14be4:	add	r1, pc, r1
   14be8:	ldr	r2, [pc, #468]	; 14dc4 <body_with_one_return@@Base+0x368>
   14bec:	add	r3, pc, r2
   14bf0:	movw	r2, #406	; 0x196
   14bf4:	bl	11f54 <__assert_fail@plt>
   14bf8:	ldr	r0, [sp, #16]
   14bfc:	cmp	r0, #0
   14c00:	mov	r1, r0
   14c04:	movwne	r1, #1
   14c08:	mov	r2, #40	; 0x28
   14c0c:	cmp	r0, #0
   14c10:	movwne	r2, #32
   14c14:	ldr	r0, [pc, #484]	; 14e00 <body_with_one_return@@Base+0x3a4>
   14c18:	add	r0, pc, r0
   14c1c:	ldr	r2, [r0, r2]!
   14c20:	ldr	r3, [r0, #4]
   14c24:	adds	r2, r2, #1
   14c28:	adc	r3, r3, #0
   14c2c:	str	r2, [r0]
   14c30:	str	r3, [r0, #4]
   14c34:	tst	r1, #1
   14c38:	beq	14c60 <body_with_one_return@@Base+0x204>
   14c3c:	ldr	r0, [pc, #448]	; 14e04 <body_with_one_return@@Base+0x3a8>
   14c40:	add	r0, pc, r0
   14c44:	ldr	r1, [r0, #48]	; 0x30
   14c48:	ldr	r2, [r0, #52]	; 0x34
   14c4c:	adds	r1, r1, #1
   14c50:	adc	r2, r2, #0
   14c54:	str	r1, [r0, #48]	; 0x30
   14c58:	str	r2, [r0, #52]	; 0x34
   14c5c:	b	14c80 <body_with_one_return@@Base+0x224>
   14c60:	ldr	r0, [pc, #352]	; 14dc8 <body_with_one_return@@Base+0x36c>
   14c64:	add	r0, pc, r0
   14c68:	ldr	r1, [pc, #348]	; 14dcc <body_with_one_return@@Base+0x370>
   14c6c:	add	r1, pc, r1
   14c70:	ldr	r2, [pc, #344]	; 14dd0 <body_with_one_return@@Base+0x374>
   14c74:	add	r3, pc, r2
   14c78:	movw	r2, #407	; 0x197
   14c7c:	bl	11f54 <__assert_fail@plt>
   14c80:	ldr	r0, [sp, #16]
   14c84:	ldr	r0, [r0]
   14c88:	sub	r1, r0, #3
   14c8c:	clz	r1, r1
   14c90:	lsr	r1, r1, #5
   14c94:	mov	r2, #64	; 0x40
   14c98:	cmp	r0, #3
   14c9c:	movweq	r2, #56	; 0x38
   14ca0:	ldr	r0, [pc, #352]	; 14e08 <body_with_one_return@@Base+0x3ac>
   14ca4:	add	r0, pc, r0
   14ca8:	ldr	r2, [r0, r2]!
   14cac:	ldr	r3, [r0, #4]
   14cb0:	adds	r2, r2, #1
   14cb4:	adc	r3, r3, #0
   14cb8:	str	r2, [r0]
   14cbc:	str	r3, [r0, #4]
   14cc0:	tst	r1, #1
   14cc4:	beq	14cec <body_with_one_return@@Base+0x290>
   14cc8:	ldr	r0, [pc, #316]	; 14e0c <body_with_one_return@@Base+0x3b0>
   14ccc:	add	r0, pc, r0
   14cd0:	ldr	r1, [r0, #72]	; 0x48
   14cd4:	ldr	r2, [r0, #76]	; 0x4c
   14cd8:	adds	r1, r1, #1
   14cdc:	adc	r2, r2, #0
   14ce0:	str	r1, [r0, #72]	; 0x48
   14ce4:	str	r2, [r0, #76]	; 0x4c
   14ce8:	b	14d0c <body_with_one_return@@Base+0x2b0>
   14cec:	ldr	r0, [pc, #224]	; 14dd4 <body_with_one_return@@Base+0x378>
   14cf0:	add	r0, pc, r0
   14cf4:	ldr	r1, [pc, #220]	; 14dd8 <body_with_one_return@@Base+0x37c>
   14cf8:	add	r1, pc, r1
   14cfc:	ldr	r2, [pc, #216]	; 14ddc <body_with_one_return@@Base+0x380>
   14d00:	add	r3, pc, r2
   14d04:	movw	r2, #408	; 0x198
   14d08:	bl	11f54 <__assert_fail@plt>
   14d0c:	ldr	r0, [sp, #16]
   14d10:	ldr	r0, [r0, #4]
   14d14:	clz	r1, r0
   14d18:	lsr	r1, r1, #5
   14d1c:	mov	r2, #88	; 0x58
   14d20:	cmp	r0, #0
   14d24:	movweq	r2, #80	; 0x50
   14d28:	ldr	r0, [pc, #224]	; 14e10 <body_with_one_return@@Base+0x3b4>
   14d2c:	add	r0, pc, r0
   14d30:	ldr	r2, [r0, r2]!
   14d34:	ldr	r3, [r0, #4]
   14d38:	adds	r2, r2, #1
   14d3c:	adc	r3, r3, #0
   14d40:	str	r2, [r0]
   14d44:	str	r3, [r0, #4]
   14d48:	tst	r1, #1
   14d4c:	beq	14d74 <body_with_one_return@@Base+0x318>
   14d50:	ldr	r0, [pc, #188]	; 14e14 <body_with_one_return@@Base+0x3b8>
   14d54:	add	r0, pc, r0
   14d58:	ldr	r1, [r0, #96]	; 0x60
   14d5c:	ldr	r2, [r0, #100]	; 0x64
   14d60:	adds	r1, r1, #1
   14d64:	adc	r2, r2, #0
   14d68:	str	r1, [r0, #96]	; 0x60
   14d6c:	str	r2, [r0, #100]	; 0x64
   14d70:	b	14d94 <body_with_one_return@@Base+0x338>
   14d74:	ldr	r0, [pc, #100]	; 14de0 <body_with_one_return@@Base+0x384>
   14d78:	add	r0, pc, r0
   14d7c:	ldr	r1, [pc, #96]	; 14de4 <body_with_one_return@@Base+0x388>
   14d80:	add	r1, pc, r1
   14d84:	ldr	r2, [pc, #92]	; 14de8 <body_with_one_return@@Base+0x38c>
   14d88:	add	r3, pc, r2
   14d8c:	movw	r2, #409	; 0x199
   14d90:	bl	11f54 <__assert_fail@plt>
   14d94:	ldr	r0, [pc, #124]	; 14e18 <body_with_one_return@@Base+0x3bc>
   14d98:	add	r0, pc, r0
   14d9c:	ldr	r1, [r0, #104]	; 0x68
   14da0:	ldr	r2, [r0, #108]	; 0x6c
   14da4:	adds	r1, r1, #1
   14da8:	adc	r2, r2, #0
   14dac:	str	r1, [r0, #104]	; 0x68
   14db0:	str	r2, [r0, #108]	; 0x6c
   14db4:	mov	sp, fp
   14db8:	pop	{fp, pc}
   14dbc:	andeq	r9, r0, r0, asr #5
   14dc0:	strdeq	r9, [r0], -r2
   14dc4:	andeq	r9, r0, sl, ror #10
   14dc8:	andeq	r9, r0, lr, lsl r4
   14dcc:	andeq	r9, r0, sl, ror #2
   14dd0:	andeq	r9, r0, r2, ror #9
   14dd4:	andeq	r9, r0, ip, lsl r4
   14dd8:	ldrdeq	r9, [r0], -lr
   14ddc:	andeq	r9, r0, r6, asr r4
   14de0:	strdeq	r9, [r0], -sl
   14de4:	andeq	r9, r0, r6, asr r0
   14de8:	andeq	r9, r0, lr, asr #7
   14dec:	andeq	fp, r1, ip, asr fp
   14df0:	andeq	fp, r1, r0, asr fp
   14df4:	andeq	fp, r1, r4, ror r5
   14df8:	andeq	fp, r1, r8, lsr sl
   14dfc:	andeq	fp, r1, r0, lsl sl
   14e00:			; <UNDEFINED> instruction: 0x0001b9b0
   14e04:	andeq	fp, r1, r8, lsl #19
   14e08:	andeq	fp, r1, r4, lsr #18
   14e0c:	strdeq	fp, [r1], -ip
   14e10:	muleq	r1, ip, r8
   14e14:	andeq	fp, r1, r4, ror r8
   14e18:	andeq	fp, r1, r0, lsr r8

00014e1c <if_statement_inside_if_statement@@Base>:
   14e1c:	push	{fp, lr}
   14e20:	mov	fp, sp
   14e24:	sub	sp, sp, #64	; 0x40
   14e28:	ldr	r0, [pc, #1272]	; 15328 <if_statement_inside_if_statement@@Base+0x50c>
   14e2c:	add	r0, pc, r0
   14e30:	ldr	r1, [r0, #4]
   14e34:	ldr	r2, [pc, #1264]	; 1532c <if_statement_inside_if_statement@@Base+0x510>
   14e38:	ldr	r2, [pc, r2]
   14e3c:	adds	r2, r2, #1
   14e40:	adc	r1, r1, #0
   14e44:	str	r2, [r0]
   14e48:	str	r1, [r0, #4]
   14e4c:	mov	r0, #0
   14e50:	str	r0, [fp, #-24]	; 0xffffffe8
   14e54:	sub	r1, fp, #16
   14e58:	sub	r2, fp, #12
   14e5c:	str	r0, [sp, #28]
   14e60:	mov	r0, r1
   14e64:	str	r1, [sp, #24]
   14e68:	mov	r1, r2
   14e6c:	bl	19060 <init_grammar@@Base>
   14e70:	mov	r0, #3
   14e74:	str	r0, [sp, #20]
   14e78:	bl	11e34 <malloc@plt>
   14e7c:	str	r0, [fp, #-28]	; 0xffffffe4
   14e80:	ldr	r0, [sp, #20]
   14e84:	bl	11e34 <malloc@plt>
   14e88:	str	r0, [sp, #32]
   14e8c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14e90:	mov	r1, #33	; 0x21
   14e94:	strb	r1, [r0]
   14e98:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14e9c:	mov	r2, #61	; 0x3d
   14ea0:	strb	r2, [r0, #1]
   14ea4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14ea8:	ldr	lr, [sp, #28]
   14eac:	strb	lr, [r0, #2]
   14eb0:	ldr	r0, [sp, #32]
   14eb4:	strb	r1, [r0]
   14eb8:	ldr	r0, [sp, #32]
   14ebc:	strb	r2, [r0, #1]
   14ec0:	ldr	r0, [sp, #32]
   14ec4:	strb	lr, [r0, #2]
   14ec8:	mov	r0, #76	; 0x4c
   14ecc:	bl	11e34 <malloc@plt>
   14ed0:	str	r0, [fp, #-20]	; 0xffffffec
   14ed4:	mov	r0, #4
   14ed8:	str	r0, [sp, #16]
   14edc:	bl	11e34 <malloc@plt>
   14ee0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14ee4:	str	r0, [r1]
   14ee8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14eec:	ldr	r0, [r0]
   14ef0:	bl	16774 <init_token_opar@@Base>
   14ef4:	mov	r0, #8
   14ef8:	str	r0, [sp, #12]
   14efc:	bl	11e34 <malloc@plt>
   14f00:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f04:	str	r0, [r1, #4]
   14f08:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f0c:	ldr	r0, [r0, #4]
   14f10:	mov	r1, #1
   14f14:	str	r1, [sp, #8]
   14f18:	bl	1665c <init_token_int_value@@Base>
   14f1c:	ldr	r0, [sp, #12]
   14f20:	bl	11e34 <malloc@plt>
   14f24:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f28:	str	r0, [r1, #8]
   14f2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f30:	ldr	r0, [r0, #8]
   14f34:	ldr	r1, [sp, #8]
   14f38:	bl	1665c <init_token_int_value@@Base>
   14f3c:	ldr	r0, [sp, #12]
   14f40:	bl	11e34 <malloc@plt>
   14f44:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f48:	str	r0, [r1, #12]
   14f4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f50:	ldr	r0, [r0, #12]
   14f54:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14f58:	bl	16b88 <init_token_boolean_op@@Base>
   14f5c:	ldr	r0, [sp, #12]
   14f60:	bl	11e34 <malloc@plt>
   14f64:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f68:	str	r0, [r1, #16]
   14f6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f70:	ldr	r0, [r0, #16]
   14f74:	ldr	r1, [sp, #8]
   14f78:	bl	1665c <init_token_int_value@@Base>
   14f7c:	ldr	r0, [sp, #16]
   14f80:	bl	11e34 <malloc@plt>
   14f84:	ldr	r1, [fp, #-20]	; 0xffffffec
   14f88:	str	r0, [r1, #20]
   14f8c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f90:	ldr	r0, [r0, #20]
   14f94:	bl	167e8 <init_token_cpar@@Base>
   14f98:	ldr	r0, [sp, #16]
   14f9c:	bl	11e34 <malloc@plt>
   14fa0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14fa4:	str	r0, [r1, #24]
   14fa8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14fac:	ldr	r0, [r0, #24]
   14fb0:	bl	1685c <init_token_obra@@Base>
   14fb4:	ldr	r0, [sp, #16]
   14fb8:	bl	11e34 <malloc@plt>
   14fbc:	ldr	r1, [fp, #-20]	; 0xffffffec
   14fc0:	str	r0, [r1, #28]
   14fc4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14fc8:	ldr	r0, [r0, #28]
   14fcc:	bl	16aa0 <init_token_if@@Base>
   14fd0:	ldr	r0, [sp, #16]
   14fd4:	bl	11e34 <malloc@plt>
   14fd8:	ldr	r1, [fp, #-20]	; 0xffffffec
   14fdc:	str	r0, [r1, #32]
   14fe0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14fe4:	ldr	r0, [r0, #32]
   14fe8:	bl	16774 <init_token_opar@@Base>
   14fec:	ldr	r0, [sp, #12]
   14ff0:	bl	11e34 <malloc@plt>
   14ff4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14ff8:	str	r0, [r1, #36]	; 0x24
   14ffc:	ldr	r0, [fp, #-20]	; 0xffffffec
   15000:	ldr	r0, [r0, #36]	; 0x24
   15004:	ldr	r1, [sp, #8]
   15008:	bl	1665c <init_token_int_value@@Base>
   1500c:	ldr	r0, [sp, #12]
   15010:	bl	11e34 <malloc@plt>
   15014:	ldr	r1, [fp, #-20]	; 0xffffffec
   15018:	str	r0, [r1, #40]	; 0x28
   1501c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15020:	ldr	r0, [r0, #40]	; 0x28
   15024:	ldr	r1, [sp, #8]
   15028:	bl	1665c <init_token_int_value@@Base>
   1502c:	ldr	r0, [sp, #12]
   15030:	bl	11e34 <malloc@plt>
   15034:	ldr	r1, [fp, #-20]	; 0xffffffec
   15038:	str	r0, [r1, #44]	; 0x2c
   1503c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15040:	ldr	r0, [r0, #44]	; 0x2c
   15044:	ldr	r1, [sp, #32]
   15048:	bl	16b88 <init_token_boolean_op@@Base>
   1504c:	ldr	r0, [sp, #12]
   15050:	bl	11e34 <malloc@plt>
   15054:	ldr	r1, [fp, #-20]	; 0xffffffec
   15058:	str	r0, [r1, #48]	; 0x30
   1505c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15060:	ldr	r0, [r0, #48]	; 0x30
   15064:	ldr	r1, [sp, #8]
   15068:	bl	1665c <init_token_int_value@@Base>
   1506c:	ldr	r0, [sp, #16]
   15070:	bl	11e34 <malloc@plt>
   15074:	ldr	r1, [fp, #-20]	; 0xffffffec
   15078:	str	r0, [r1, #52]	; 0x34
   1507c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15080:	ldr	r0, [r0, #52]	; 0x34
   15084:	bl	167e8 <init_token_cpar@@Base>
   15088:	ldr	r0, [sp, #16]
   1508c:	bl	11e34 <malloc@plt>
   15090:	ldr	r1, [fp, #-20]	; 0xffffffec
   15094:	str	r0, [r1, #56]	; 0x38
   15098:	ldr	r0, [fp, #-20]	; 0xffffffec
   1509c:	ldr	r0, [r0, #56]	; 0x38
   150a0:	bl	1685c <init_token_obra@@Base>
   150a4:	ldr	r0, [sp, #16]
   150a8:	bl	11e34 <malloc@plt>
   150ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   150b0:	str	r0, [r1, #60]	; 0x3c
   150b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   150b8:	ldr	r0, [r0, #60]	; 0x3c
   150bc:	bl	168d0 <init_token_cbra@@Base>
   150c0:	ldr	r0, [sp, #16]
   150c4:	bl	11e34 <malloc@plt>
   150c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   150cc:	str	r0, [r1, #64]	; 0x40
   150d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   150d4:	ldr	r0, [r0, #64]	; 0x40
   150d8:	bl	168d0 <init_token_cbra@@Base>
   150dc:	ldr	r0, [sp, #16]
   150e0:	bl	11e34 <malloc@plt>
   150e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   150e8:	str	r0, [r1, #68]	; 0x44
   150ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   150f0:	ldr	r0, [r0, #68]	; 0x44
   150f4:	bl	168d0 <init_token_cbra@@Base>
   150f8:	ldr	r0, [sp, #16]
   150fc:	bl	11e34 <malloc@plt>
   15100:	ldr	r1, [fp, #-20]	; 0xffffffec
   15104:	str	r0, [r1, #72]	; 0x48
   15108:	ldr	r0, [fp, #-20]	; 0xffffffec
   1510c:	ldr	r0, [r0, #72]	; 0x48
   15110:	bl	16a2c <init_token_eof@@Base>
   15114:	ldr	r0, [fp, #-20]	; 0xffffffec
   15118:	ldr	r1, [pc, #528]	; 15330 <if_statement_inside_if_statement@@Base+0x514>
   1511c:	ldr	r1, [pc, r1]
   15120:	str	r0, [r1, #228]	; 0xe4
   15124:	mov	r0, #19
   15128:	str	r0, [r1, #220]	; 0xdc
   1512c:	ldr	r0, [sp, #24]
   15130:	str	r1, [sp, #4]
   15134:	bl	19b24 <read_if_statement@@Base>
   15138:	str	r0, [fp, #-24]	; 0xffffffe8
   1513c:	ldr	r0, [sp, #4]
   15140:	ldr	r1, [r0, #204]	; 0xcc
   15144:	sub	r2, r1, #19
   15148:	clz	r2, r2
   1514c:	lsr	r2, r2, #5
   15150:	mov	lr, #16
   15154:	cmp	r1, #19
   15158:	movweq	lr, #8
   1515c:	ldr	r1, [pc, #464]	; 15334 <if_statement_inside_if_statement@@Base+0x518>
   15160:	add	r1, pc, r1
   15164:	ldr	lr, [r1, lr]!
   15168:	ldr	r3, [r1, #4]
   1516c:	adds	lr, lr, #1
   15170:	adc	r3, r3, #0
   15174:	str	lr, [r1]
   15178:	str	r3, [r1, #4]
   1517c:	tst	r2, #1
   15180:	beq	151a8 <if_statement_inside_if_statement@@Base+0x38c>
   15184:	ldr	r0, [pc, #428]	; 15338 <if_statement_inside_if_statement@@Base+0x51c>
   15188:	add	r0, pc, r0
   1518c:	ldr	r1, [r0, #24]
   15190:	ldr	r2, [r0, #28]
   15194:	adds	r1, r1, #1
   15198:	adc	r2, r2, #0
   1519c:	str	r1, [r0, #24]
   151a0:	str	r2, [r0, #28]
   151a4:	b	151c8 <if_statement_inside_if_statement@@Base+0x3ac>
   151a8:	ldr	r0, [pc, #340]	; 15304 <if_statement_inside_if_statement@@Base+0x4e8>
   151ac:	add	r0, pc, r0
   151b0:	ldr	r1, [pc, #336]	; 15308 <if_statement_inside_if_statement@@Base+0x4ec>
   151b4:	add	r1, pc, r1
   151b8:	ldr	r2, [pc, #332]	; 1530c <if_statement_inside_if_statement@@Base+0x4f0>
   151bc:	add	r3, pc, r2
   151c0:	movw	r2, #480	; 0x1e0
   151c4:	bl	11f54 <__assert_fail@plt>
   151c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151cc:	cmp	r0, #0
   151d0:	mov	r1, r0
   151d4:	movwne	r1, #1
   151d8:	mov	r2, #40	; 0x28
   151dc:	cmp	r0, #0
   151e0:	movwne	r2, #32
   151e4:	ldr	r0, [pc, #336]	; 1533c <if_statement_inside_if_statement@@Base+0x520>
   151e8:	add	r0, pc, r0
   151ec:	ldr	r2, [r0, r2]!
   151f0:	ldr	r3, [r0, #4]
   151f4:	adds	r2, r2, #1
   151f8:	adc	r3, r3, #0
   151fc:	str	r2, [r0]
   15200:	str	r3, [r0, #4]
   15204:	tst	r1, #1
   15208:	beq	15230 <if_statement_inside_if_statement@@Base+0x414>
   1520c:	ldr	r0, [pc, #300]	; 15340 <if_statement_inside_if_statement@@Base+0x524>
   15210:	add	r0, pc, r0
   15214:	ldr	r1, [r0, #48]	; 0x30
   15218:	ldr	r2, [r0, #52]	; 0x34
   1521c:	adds	r1, r1, #1
   15220:	adc	r2, r2, #0
   15224:	str	r1, [r0, #48]	; 0x30
   15228:	str	r2, [r0, #52]	; 0x34
   1522c:	b	15250 <if_statement_inside_if_statement@@Base+0x434>
   15230:	ldr	r0, [pc, #216]	; 15310 <if_statement_inside_if_statement@@Base+0x4f4>
   15234:	add	r0, pc, r0
   15238:	ldr	r1, [pc, #212]	; 15314 <if_statement_inside_if_statement@@Base+0x4f8>
   1523c:	add	r1, pc, r1
   15240:	ldr	r2, [pc, #208]	; 15318 <if_statement_inside_if_statement@@Base+0x4fc>
   15244:	add	r3, pc, r2
   15248:	movw	r2, #481	; 0x1e1
   1524c:	bl	11f54 <__assert_fail@plt>
   15250:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15254:	ldr	r0, [r0]
   15258:	sub	r1, r0, #4
   1525c:	clz	r1, r1
   15260:	lsr	r1, r1, #5
   15264:	mov	r2, #64	; 0x40
   15268:	cmp	r0, #4
   1526c:	movweq	r2, #56	; 0x38
   15270:	ldr	r0, [pc, #204]	; 15344 <if_statement_inside_if_statement@@Base+0x528>
   15274:	add	r0, pc, r0
   15278:	ldr	r2, [r0, r2]!
   1527c:	ldr	r3, [r0, #4]
   15280:	adds	r2, r2, #1
   15284:	adc	r3, r3, #0
   15288:	str	r2, [r0]
   1528c:	str	r3, [r0, #4]
   15290:	tst	r1, #1
   15294:	beq	152bc <if_statement_inside_if_statement@@Base+0x4a0>
   15298:	ldr	r0, [pc, #168]	; 15348 <if_statement_inside_if_statement@@Base+0x52c>
   1529c:	add	r0, pc, r0
   152a0:	ldr	r1, [r0, #72]	; 0x48
   152a4:	ldr	r2, [r0, #76]	; 0x4c
   152a8:	adds	r1, r1, #1
   152ac:	adc	r2, r2, #0
   152b0:	str	r1, [r0, #72]	; 0x48
   152b4:	str	r2, [r0, #76]	; 0x4c
   152b8:	b	152dc <if_statement_inside_if_statement@@Base+0x4c0>
   152bc:	ldr	r0, [pc, #88]	; 1531c <if_statement_inside_if_statement@@Base+0x500>
   152c0:	add	r0, pc, r0
   152c4:	ldr	r1, [pc, #84]	; 15320 <if_statement_inside_if_statement@@Base+0x504>
   152c8:	add	r1, pc, r1
   152cc:	ldr	r2, [pc, #80]	; 15324 <if_statement_inside_if_statement@@Base+0x508>
   152d0:	add	r3, pc, r2
   152d4:	movw	r2, #482	; 0x1e2
   152d8:	bl	11f54 <__assert_fail@plt>
   152dc:	ldr	r0, [pc, #104]	; 1534c <if_statement_inside_if_statement@@Base+0x530>
   152e0:	add	r0, pc, r0
   152e4:	ldr	r1, [r0, #80]	; 0x50
   152e8:	ldr	r2, [r0, #84]	; 0x54
   152ec:	adds	r1, r1, #1
   152f0:	adc	r2, r2, #0
   152f4:	str	r1, [r0, #80]	; 0x50
   152f8:	str	r2, [r0, #84]	; 0x54
   152fc:	mov	sp, fp
   15300:	pop	{fp, pc}
   15304:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   15308:	andeq	r8, r0, r2, lsr #24
   1530c:	andeq	r8, r0, r3, ror #31
   15310:	andeq	r8, r0, lr, asr #28
   15314:	muleq	r0, sl, fp
   15318:	andeq	r8, r0, fp, asr pc
   1531c:	andeq	r8, r0, lr, asr #27
   15320:	andeq	r8, r0, lr, lsl #22
   15324:	andeq	r8, r0, pc, asr #29
   15328:	andeq	fp, r1, ip, lsl #16
   1532c:	andeq	fp, r1, r0, lsl #16
   15330:	andeq	sl, r1, r4, lsr #31
   15334:	ldrdeq	fp, [r1], -r8
   15338:			; <UNDEFINED> instruction: 0x0001b4b0
   1533c:	andeq	fp, r1, r0, asr r4
   15340:	andeq	fp, r1, r8, lsr #8
   15344:	andeq	fp, r1, r4, asr #7
   15348:	muleq	r1, ip, r3
   1534c:	andeq	fp, r1, r8, asr r3

00015350 <if_statement_inside_else_statement@@Base>:
   15350:	push	{fp, lr}
   15354:	mov	fp, sp
   15358:	sub	sp, sp, #64	; 0x40
   1535c:	ldr	r0, [pc, #1328]	; 15894 <if_statement_inside_else_statement@@Base+0x544>
   15360:	add	r0, pc, r0
   15364:	ldr	r1, [r0, #4]
   15368:	ldr	r2, [pc, #1320]	; 15898 <if_statement_inside_else_statement@@Base+0x548>
   1536c:	ldr	r2, [pc, r2]
   15370:	adds	r2, r2, #1
   15374:	adc	r1, r1, #0
   15378:	str	r2, [r0]
   1537c:	str	r1, [r0, #4]
   15380:	mov	r0, #0
   15384:	str	r0, [fp, #-24]	; 0xffffffe8
   15388:	sub	r1, fp, #16
   1538c:	sub	r2, fp, #12
   15390:	str	r0, [sp, #28]
   15394:	mov	r0, r1
   15398:	str	r1, [sp, #24]
   1539c:	mov	r1, r2
   153a0:	bl	19060 <init_grammar@@Base>
   153a4:	mov	r0, #3
   153a8:	str	r0, [sp, #20]
   153ac:	bl	11e34 <malloc@plt>
   153b0:	str	r0, [fp, #-28]	; 0xffffffe4
   153b4:	ldr	r0, [sp, #20]
   153b8:	bl	11e34 <malloc@plt>
   153bc:	str	r0, [sp, #32]
   153c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   153c4:	mov	r1, #33	; 0x21
   153c8:	strb	r1, [r0]
   153cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   153d0:	mov	r2, #61	; 0x3d
   153d4:	strb	r2, [r0, #1]
   153d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   153dc:	ldr	lr, [sp, #28]
   153e0:	strb	lr, [r0, #2]
   153e4:	ldr	r0, [sp, #32]
   153e8:	strb	r1, [r0]
   153ec:	ldr	r0, [sp, #32]
   153f0:	strb	r2, [r0, #1]
   153f4:	ldr	r0, [sp, #32]
   153f8:	strb	lr, [r0, #2]
   153fc:	mov	r0, #84	; 0x54
   15400:	bl	11e34 <malloc@plt>
   15404:	str	r0, [fp, #-20]	; 0xffffffec
   15408:	mov	r0, #4
   1540c:	str	r0, [sp, #16]
   15410:	bl	11e34 <malloc@plt>
   15414:	ldr	r1, [fp, #-20]	; 0xffffffec
   15418:	str	r0, [r1]
   1541c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15420:	ldr	r0, [r0]
   15424:	bl	16774 <init_token_opar@@Base>
   15428:	mov	r0, #8
   1542c:	str	r0, [sp, #12]
   15430:	bl	11e34 <malloc@plt>
   15434:	ldr	r1, [fp, #-20]	; 0xffffffec
   15438:	str	r0, [r1, #4]
   1543c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15440:	ldr	r0, [r0, #4]
   15444:	mov	r1, #1
   15448:	str	r1, [sp, #8]
   1544c:	bl	1665c <init_token_int_value@@Base>
   15450:	ldr	r0, [sp, #12]
   15454:	bl	11e34 <malloc@plt>
   15458:	ldr	r1, [fp, #-20]	; 0xffffffec
   1545c:	str	r0, [r1, #8]
   15460:	ldr	r0, [fp, #-20]	; 0xffffffec
   15464:	ldr	r0, [r0, #8]
   15468:	ldr	r1, [sp, #8]
   1546c:	bl	1665c <init_token_int_value@@Base>
   15470:	ldr	r0, [sp, #12]
   15474:	bl	11e34 <malloc@plt>
   15478:	ldr	r1, [fp, #-20]	; 0xffffffec
   1547c:	str	r0, [r1, #12]
   15480:	ldr	r0, [fp, #-20]	; 0xffffffec
   15484:	ldr	r0, [r0, #12]
   15488:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1548c:	bl	16b88 <init_token_boolean_op@@Base>
   15490:	ldr	r0, [sp, #12]
   15494:	bl	11e34 <malloc@plt>
   15498:	ldr	r1, [fp, #-20]	; 0xffffffec
   1549c:	str	r0, [r1, #16]
   154a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   154a4:	ldr	r0, [r0, #16]
   154a8:	ldr	r1, [sp, #8]
   154ac:	bl	1665c <init_token_int_value@@Base>
   154b0:	ldr	r0, [sp, #16]
   154b4:	bl	11e34 <malloc@plt>
   154b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   154bc:	str	r0, [r1, #20]
   154c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   154c4:	ldr	r0, [r0, #20]
   154c8:	bl	167e8 <init_token_cpar@@Base>
   154cc:	ldr	r0, [sp, #16]
   154d0:	bl	11e34 <malloc@plt>
   154d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   154d8:	str	r0, [r1, #24]
   154dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   154e0:	ldr	r0, [r0, #24]
   154e4:	bl	1685c <init_token_obra@@Base>
   154e8:	ldr	r0, [sp, #16]
   154ec:	bl	11e34 <malloc@plt>
   154f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   154f4:	str	r0, [r1, #28]
   154f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   154fc:	ldr	r0, [r0, #28]
   15500:	bl	168d0 <init_token_cbra@@Base>
   15504:	ldr	r0, [sp, #16]
   15508:	bl	11e34 <malloc@plt>
   1550c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15510:	str	r0, [r1, #32]
   15514:	ldr	r0, [fp, #-20]	; 0xffffffec
   15518:	ldr	r0, [r0, #32]
   1551c:	bl	16b14 <init_token_else@@Base>
   15520:	ldr	r0, [sp, #16]
   15524:	bl	11e34 <malloc@plt>
   15528:	ldr	r1, [fp, #-20]	; 0xffffffec
   1552c:	str	r0, [r1, #36]	; 0x24
   15530:	ldr	r0, [fp, #-20]	; 0xffffffec
   15534:	ldr	r0, [r0, #36]	; 0x24
   15538:	bl	1685c <init_token_obra@@Base>
   1553c:	ldr	r0, [sp, #16]
   15540:	bl	11e34 <malloc@plt>
   15544:	ldr	r1, [fp, #-20]	; 0xffffffec
   15548:	str	r0, [r1, #40]	; 0x28
   1554c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15550:	ldr	r0, [r0, #40]	; 0x28
   15554:	bl	16aa0 <init_token_if@@Base>
   15558:	ldr	r0, [sp, #16]
   1555c:	bl	11e34 <malloc@plt>
   15560:	ldr	r1, [fp, #-20]	; 0xffffffec
   15564:	str	r0, [r1, #44]	; 0x2c
   15568:	ldr	r0, [fp, #-20]	; 0xffffffec
   1556c:	ldr	r0, [r0, #44]	; 0x2c
   15570:	bl	16774 <init_token_opar@@Base>
   15574:	ldr	r0, [sp, #12]
   15578:	bl	11e34 <malloc@plt>
   1557c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15580:	str	r0, [r1, #48]	; 0x30
   15584:	ldr	r0, [fp, #-20]	; 0xffffffec
   15588:	ldr	r0, [r0, #48]	; 0x30
   1558c:	ldr	r1, [sp, #8]
   15590:	bl	1665c <init_token_int_value@@Base>
   15594:	ldr	r0, [sp, #12]
   15598:	bl	11e34 <malloc@plt>
   1559c:	ldr	r1, [fp, #-20]	; 0xffffffec
   155a0:	str	r0, [r1, #52]	; 0x34
   155a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   155a8:	ldr	r0, [r0, #52]	; 0x34
   155ac:	ldr	r1, [sp, #8]
   155b0:	bl	1665c <init_token_int_value@@Base>
   155b4:	ldr	r0, [sp, #12]
   155b8:	bl	11e34 <malloc@plt>
   155bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   155c0:	str	r0, [r1, #56]	; 0x38
   155c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   155c8:	ldr	r0, [r0, #56]	; 0x38
   155cc:	ldr	r1, [sp, #32]
   155d0:	bl	16b88 <init_token_boolean_op@@Base>
   155d4:	ldr	r0, [sp, #12]
   155d8:	bl	11e34 <malloc@plt>
   155dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   155e0:	str	r0, [r1, #60]	; 0x3c
   155e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   155e8:	ldr	r0, [r0, #60]	; 0x3c
   155ec:	ldr	r1, [sp, #8]
   155f0:	bl	1665c <init_token_int_value@@Base>
   155f4:	ldr	r0, [sp, #16]
   155f8:	bl	11e34 <malloc@plt>
   155fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15600:	str	r0, [r1, #64]	; 0x40
   15604:	ldr	r0, [fp, #-20]	; 0xffffffec
   15608:	ldr	r0, [r0, #64]	; 0x40
   1560c:	bl	167e8 <init_token_cpar@@Base>
   15610:	ldr	r0, [sp, #16]
   15614:	bl	11e34 <malloc@plt>
   15618:	ldr	r1, [fp, #-20]	; 0xffffffec
   1561c:	str	r0, [r1, #68]	; 0x44
   15620:	ldr	r0, [fp, #-20]	; 0xffffffec
   15624:	ldr	r0, [r0, #68]	; 0x44
   15628:	bl	1685c <init_token_obra@@Base>
   1562c:	ldr	r0, [sp, #16]
   15630:	bl	11e34 <malloc@plt>
   15634:	ldr	r1, [fp, #-20]	; 0xffffffec
   15638:	str	r0, [r1, #72]	; 0x48
   1563c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15640:	ldr	r0, [r0, #72]	; 0x48
   15644:	bl	168d0 <init_token_cbra@@Base>
   15648:	ldr	r0, [sp, #16]
   1564c:	bl	11e34 <malloc@plt>
   15650:	ldr	r1, [fp, #-20]	; 0xffffffec
   15654:	str	r0, [r1, #76]	; 0x4c
   15658:	ldr	r0, [fp, #-20]	; 0xffffffec
   1565c:	ldr	r0, [r0, #76]	; 0x4c
   15660:	bl	168d0 <init_token_cbra@@Base>
   15664:	ldr	r0, [sp, #16]
   15668:	bl	11e34 <malloc@plt>
   1566c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15670:	str	r0, [r1, #80]	; 0x50
   15674:	ldr	r0, [fp, #-20]	; 0xffffffec
   15678:	ldr	r0, [r0, #80]	; 0x50
   1567c:	bl	168d0 <init_token_cbra@@Base>
   15680:	ldr	r0, [fp, #-20]	; 0xffffffec
   15684:	ldr	r1, [pc, #528]	; 1589c <if_statement_inside_else_statement@@Base+0x54c>
   15688:	ldr	r1, [pc, r1]
   1568c:	str	r0, [r1, #228]	; 0xe4
   15690:	mov	r0, #21
   15694:	str	r0, [r1, #220]	; 0xdc
   15698:	ldr	r0, [sp, #24]
   1569c:	str	r1, [sp, #4]
   156a0:	bl	19b24 <read_if_statement@@Base>
   156a4:	str	r0, [fp, #-24]	; 0xffffffe8
   156a8:	ldr	r0, [sp, #4]
   156ac:	ldr	r1, [r0, #204]	; 0xcc
   156b0:	sub	r2, r1, #21
   156b4:	clz	r2, r2
   156b8:	lsr	r2, r2, #5
   156bc:	mov	lr, #16
   156c0:	cmp	r1, #21
   156c4:	movweq	lr, #8
   156c8:	ldr	r1, [pc, #464]	; 158a0 <if_statement_inside_else_statement@@Base+0x550>
   156cc:	add	r1, pc, r1
   156d0:	ldr	lr, [r1, lr]!
   156d4:	ldr	r3, [r1, #4]
   156d8:	adds	lr, lr, #1
   156dc:	adc	r3, r3, #0
   156e0:	str	lr, [r1]
   156e4:	str	r3, [r1, #4]
   156e8:	tst	r2, #1
   156ec:	beq	15714 <if_statement_inside_else_statement@@Base+0x3c4>
   156f0:	ldr	r0, [pc, #428]	; 158a4 <if_statement_inside_else_statement@@Base+0x554>
   156f4:	add	r0, pc, r0
   156f8:	ldr	r1, [r0, #24]
   156fc:	ldr	r2, [r0, #28]
   15700:	adds	r1, r1, #1
   15704:	adc	r2, r2, #0
   15708:	str	r1, [r0, #24]
   1570c:	str	r2, [r0, #28]
   15710:	b	15734 <if_statement_inside_else_statement@@Base+0x3e4>
   15714:	ldr	r0, [pc, #340]	; 15870 <if_statement_inside_else_statement@@Base+0x520>
   15718:	add	r0, pc, r0
   1571c:	ldr	r1, [pc, #336]	; 15874 <if_statement_inside_else_statement@@Base+0x524>
   15720:	add	r1, pc, r1
   15724:	ldr	r2, [pc, #332]	; 15878 <if_statement_inside_else_statement@@Base+0x528>
   15728:	add	r3, pc, r2
   1572c:	movw	r2, #558	; 0x22e
   15730:	bl	11f54 <__assert_fail@plt>
   15734:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15738:	cmp	r0, #0
   1573c:	mov	r1, r0
   15740:	movwne	r1, #1
   15744:	mov	r2, #40	; 0x28
   15748:	cmp	r0, #0
   1574c:	movwne	r2, #32
   15750:	ldr	r0, [pc, #336]	; 158a8 <if_statement_inside_else_statement@@Base+0x558>
   15754:	add	r0, pc, r0
   15758:	ldr	r2, [r0, r2]!
   1575c:	ldr	r3, [r0, #4]
   15760:	adds	r2, r2, #1
   15764:	adc	r3, r3, #0
   15768:	str	r2, [r0]
   1576c:	str	r3, [r0, #4]
   15770:	tst	r1, #1
   15774:	beq	1579c <if_statement_inside_else_statement@@Base+0x44c>
   15778:	ldr	r0, [pc, #300]	; 158ac <if_statement_inside_else_statement@@Base+0x55c>
   1577c:	add	r0, pc, r0
   15780:	ldr	r1, [r0, #48]	; 0x30
   15784:	ldr	r2, [r0, #52]	; 0x34
   15788:	adds	r1, r1, #1
   1578c:	adc	r2, r2, #0
   15790:	str	r1, [r0, #48]	; 0x30
   15794:	str	r2, [r0, #52]	; 0x34
   15798:	b	157bc <if_statement_inside_else_statement@@Base+0x46c>
   1579c:	ldr	r0, [pc, #216]	; 1587c <if_statement_inside_else_statement@@Base+0x52c>
   157a0:	add	r0, pc, r0
   157a4:	ldr	r1, [pc, #212]	; 15880 <if_statement_inside_else_statement@@Base+0x530>
   157a8:	add	r1, pc, r1
   157ac:	ldr	r2, [pc, #208]	; 15884 <if_statement_inside_else_statement@@Base+0x534>
   157b0:	add	r3, pc, r2
   157b4:	movw	r2, #559	; 0x22f
   157b8:	bl	11f54 <__assert_fail@plt>
   157bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157c0:	ldr	r0, [r0]
   157c4:	sub	r1, r0, #4
   157c8:	clz	r1, r1
   157cc:	lsr	r1, r1, #5
   157d0:	mov	r2, #64	; 0x40
   157d4:	cmp	r0, #4
   157d8:	movweq	r2, #56	; 0x38
   157dc:	ldr	r0, [pc, #204]	; 158b0 <if_statement_inside_else_statement@@Base+0x560>
   157e0:	add	r0, pc, r0
   157e4:	ldr	r2, [r0, r2]!
   157e8:	ldr	r3, [r0, #4]
   157ec:	adds	r2, r2, #1
   157f0:	adc	r3, r3, #0
   157f4:	str	r2, [r0]
   157f8:	str	r3, [r0, #4]
   157fc:	tst	r1, #1
   15800:	beq	15828 <if_statement_inside_else_statement@@Base+0x4d8>
   15804:	ldr	r0, [pc, #168]	; 158b4 <if_statement_inside_else_statement@@Base+0x564>
   15808:	add	r0, pc, r0
   1580c:	ldr	r1, [r0, #72]	; 0x48
   15810:	ldr	r2, [r0, #76]	; 0x4c
   15814:	adds	r1, r1, #1
   15818:	adc	r2, r2, #0
   1581c:	str	r1, [r0, #72]	; 0x48
   15820:	str	r2, [r0, #76]	; 0x4c
   15824:	b	15848 <if_statement_inside_else_statement@@Base+0x4f8>
   15828:	ldr	r0, [pc, #88]	; 15888 <if_statement_inside_else_statement@@Base+0x538>
   1582c:	add	r0, pc, r0
   15830:	ldr	r1, [pc, #84]	; 1588c <if_statement_inside_else_statement@@Base+0x53c>
   15834:	add	r1, pc, r1
   15838:	ldr	r2, [pc, #80]	; 15890 <if_statement_inside_else_statement@@Base+0x540>
   1583c:	add	r3, pc, r2
   15840:	movw	r2, #560	; 0x230
   15844:	bl	11f54 <__assert_fail@plt>
   15848:	ldr	r0, [pc, #104]	; 158b8 <if_statement_inside_else_statement@@Base+0x568>
   1584c:	add	r0, pc, r0
   15850:	ldr	r1, [r0, #80]	; 0x50
   15854:	ldr	r2, [r0, #84]	; 0x54
   15858:	adds	r1, r1, #1
   1585c:	adc	r2, r2, #0
   15860:	str	r1, [r0, #80]	; 0x50
   15864:	str	r2, [r0, #84]	; 0x54
   15868:	mov	sp, fp
   1586c:	pop	{fp, pc}
   15870:	andeq	r8, r0, pc, lsr #21
   15874:			; <UNDEFINED> instruction: 0x000086b6
   15878:			; <UNDEFINED> instruction: 0x00008aba
   1587c:	andeq	r8, r0, r2, ror #17
   15880:	andeq	r8, r0, lr, lsr #12
   15884:	andeq	r8, r0, r2, lsr sl
   15888:	andeq	r8, r0, r2, ror #16
   1588c:	andeq	r8, r0, r2, lsr #11
   15890:	andeq	r8, r0, r6, lsr #19
   15894:	andeq	fp, r1, r8, lsr r3
   15898:	andeq	fp, r1, ip, lsr #6
   1589c:	andeq	sl, r1, r8, lsr sl
   158a0:	andeq	sl, r1, ip, asr #31
   158a4:	andeq	sl, r1, r4, lsr #31
   158a8:	andeq	sl, r1, r4, asr #30
   158ac:	andeq	sl, r1, ip, lsl pc
   158b0:			; <UNDEFINED> instruction: 0x0001aeb8
   158b4:	muleq	r1, r0, lr
   158b8:	andeq	sl, r1, ip, asr #28

000158bc <main@@Base>:
   158bc:	push	{fp, lr}
   158c0:	mov	fp, sp
   158c4:	sub	sp, sp, #128	; 0x80
   158c8:	ldr	r0, [pc, #1316]	; 15df4 <main@@Base+0x538>
   158cc:	add	r0, pc, r0
   158d0:	ldr	r1, [r0, #4]
   158d4:	ldr	r2, [pc, #1308]	; 15df8 <main@@Base+0x53c>
   158d8:	ldr	r2, [pc, r2]
   158dc:	adds	r2, r2, #1
   158e0:	adc	r1, r1, #0
   158e4:	str	r2, [r0]
   158e8:	str	r1, [r0, #4]
   158ec:	ldr	r0, [pc, #1276]	; 15df0 <main@@Base+0x534>
   158f0:	ldr	r0, [pc, r0]
   158f4:	ldr	r1, [pc, #1280]	; 15dfc <main@@Base+0x540>
   158f8:	add	r1, pc, r1
   158fc:	ldr	r2, [r1, #8]
   15900:	ldr	r3, [r1, #12]
   15904:	adds	r2, r2, #1
   15908:	adc	r3, r3, #0
   1590c:	str	r2, [r1, #8]
   15910:	str	r3, [r1, #12]
   15914:	movw	r1, #0
   15918:	str	r1, [fp, #-4]
   1591c:	ldr	r0, [r0]
   15920:	bl	11d8c <setbuf@plt>
   15924:	ldr	r0, [pc, #1212]	; 15de8 <main@@Base+0x52c>
   15928:	add	r1, pc, r0
   1592c:	ldr	r0, [pc, #1208]	; 15dec <main@@Base+0x530>
   15930:	ldr	r0, [pc, r0]
   15934:	ldr	r0, [r0]
   15938:	bl	11e94 <fprintf@plt>
   1593c:	ldr	r1, [pc, #1180]	; 15de0 <main@@Base+0x524>
   15940:	add	r1, pc, r1
   15944:	ldr	r2, [pc, #1176]	; 15de4 <main@@Base+0x528>
   15948:	ldr	r2, [pc, r2]
   1594c:	ldr	r2, [r2]
   15950:	str	r0, [fp, #-8]
   15954:	mov	r0, r2
   15958:	bl	11e94 <fprintf@plt>
   1595c:	ldr	r1, [pc, #1140]	; 15dd8 <main@@Base+0x51c>
   15960:	add	r1, pc, r1
   15964:	ldr	r2, [pc, #1136]	; 15ddc <main@@Base+0x520>
   15968:	ldr	r2, [pc, r2]
   1596c:	ldr	r2, [r2]
   15970:	str	r0, [fp, #-12]
   15974:	mov	r0, r2
   15978:	bl	11e94 <fprintf@plt>
   1597c:	movw	r1, #0
   15980:	str	r0, [fp, #-16]
   15984:	mov	r0, r1
   15988:	bl	11db0 <fflush@plt>
   1598c:	ldr	r1, [pc, #1080]	; 15dcc <main@@Base+0x510>
   15990:	add	r1, pc, r1
   15994:	ldr	r2, [pc, #1076]	; 15dd0 <main@@Base+0x514>
   15998:	add	r2, pc, r2
   1599c:	ldr	r3, [pc, #1072]	; 15dd4 <main@@Base+0x518>
   159a0:	add	r3, pc, r3
   159a4:	str	r0, [fp, #-20]	; 0xffffffec
   159a8:	mov	r0, r1
   159ac:	mov	r1, r2
   159b0:	mov	r2, r3
   159b4:	bl	11da4 <printf@plt>
   159b8:	str	r0, [fp, #-24]	; 0xffffffe8
   159bc:	bl	12900 <setup@@Base>
   159c0:	bl	12964 <no_int_as_first_stuff@@Base>
   159c4:	ldr	r0, [pc, #1020]	; 15dc8 <main@@Base+0x50c>
   159c8:	add	r0, pc, r0
   159cc:	bl	11da4 <printf@plt>
   159d0:	ldr	r1, [pc, #996]	; 15dbc <main@@Base+0x500>
   159d4:	add	r1, pc, r1
   159d8:	ldr	r2, [pc, #992]	; 15dc0 <main@@Base+0x504>
   159dc:	add	r2, pc, r2
   159e0:	ldr	r3, [pc, #988]	; 15dc4 <main@@Base+0x508>
   159e4:	add	r3, pc, r3
   159e8:	str	r0, [fp, #-28]	; 0xffffffe4
   159ec:	mov	r0, r1
   159f0:	mov	r1, r2
   159f4:	mov	r2, r3
   159f8:	bl	11da4 <printf@plt>
   159fc:	str	r0, [fp, #-32]	; 0xffffffe0
   15a00:	bl	12900 <setup@@Base>
   15a04:	bl	12b50 <int_but_not_followed_by_function@@Base>
   15a08:	ldr	r0, [pc, #936]	; 15db8 <main@@Base+0x4fc>
   15a0c:	add	r0, pc, r0
   15a10:	bl	11da4 <printf@plt>
   15a14:	ldr	r1, [pc, #912]	; 15dac <main@@Base+0x4f0>
   15a18:	add	r1, pc, r1
   15a1c:	ldr	r2, [pc, #908]	; 15db0 <main@@Base+0x4f4>
   15a20:	add	r2, pc, r2
   15a24:	ldr	r3, [pc, #904]	; 15db4 <main@@Base+0x4f8>
   15a28:	add	r3, pc, r3
   15a2c:	str	r0, [fp, #-36]	; 0xffffffdc
   15a30:	mov	r0, r1
   15a34:	mov	r1, r2
   15a38:	mov	r2, r3
   15a3c:	bl	11da4 <printf@plt>
   15a40:	str	r0, [fp, #-40]	; 0xffffffd8
   15a44:	bl	12900 <setup@@Base>
   15a48:	bl	13944 <boolean_unary_operator_is_read_properly@@Base>
   15a4c:	ldr	r0, [pc, #852]	; 15da8 <main@@Base+0x4ec>
   15a50:	add	r0, pc, r0
   15a54:	bl	11da4 <printf@plt>
   15a58:	ldr	r1, [pc, #828]	; 15d9c <main@@Base+0x4e0>
   15a5c:	add	r1, pc, r1
   15a60:	ldr	r2, [pc, #824]	; 15da0 <main@@Base+0x4e4>
   15a64:	add	r2, pc, r2
   15a68:	ldr	r3, [pc, #820]	; 15da4 <main@@Base+0x4e8>
   15a6c:	add	r3, pc, r3
   15a70:	str	r0, [fp, #-44]	; 0xffffffd4
   15a74:	mov	r0, r1
   15a78:	mov	r1, r2
   15a7c:	mov	r2, r3
   15a80:	bl	11da4 <printf@plt>
   15a84:	str	r0, [fp, #-48]	; 0xffffffd0
   15a88:	bl	12900 <setup@@Base>
   15a8c:	bl	134bc <boolean_binary_operator_is_read_properly@@Base>
   15a90:	ldr	r0, [pc, #768]	; 15d98 <main@@Base+0x4dc>
   15a94:	add	r0, pc, r0
   15a98:	bl	11da4 <printf@plt>
   15a9c:	ldr	r1, [pc, #744]	; 15d8c <main@@Base+0x4d0>
   15aa0:	add	r1, pc, r1
   15aa4:	ldr	r2, [pc, #740]	; 15d90 <main@@Base+0x4d4>
   15aa8:	add	r2, pc, r2
   15aac:	ldr	r3, [pc, #736]	; 15d94 <main@@Base+0x4d8>
   15ab0:	add	r3, pc, r3
   15ab4:	str	r0, [fp, #-52]	; 0xffffffcc
   15ab8:	mov	r0, r1
   15abc:	mov	r1, r2
   15ac0:	mov	r2, r3
   15ac4:	bl	11da4 <printf@plt>
   15ac8:	str	r0, [fp, #-56]	; 0xffffffc8
   15acc:	bl	12900 <setup@@Base>
   15ad0:	bl	12d78 <boolean_expression_is_read_properly@@Base>
   15ad4:	ldr	r0, [pc, #684]	; 15d88 <main@@Base+0x4cc>
   15ad8:	add	r0, pc, r0
   15adc:	bl	11da4 <printf@plt>
   15ae0:	ldr	r1, [pc, #660]	; 15d7c <main@@Base+0x4c0>
   15ae4:	add	r1, pc, r1
   15ae8:	ldr	r2, [pc, #656]	; 15d80 <main@@Base+0x4c4>
   15aec:	add	r2, pc, r2
   15af0:	ldr	r3, [pc, #652]	; 15d84 <main@@Base+0x4c8>
   15af4:	add	r3, pc, r3
   15af8:	str	r0, [fp, #-60]	; 0xffffffc4
   15afc:	mov	r0, r1
   15b00:	mov	r1, r2
   15b04:	mov	r2, r3
   15b08:	bl	11da4 <printf@plt>
   15b0c:	str	r0, [sp, #64]	; 0x40
   15b10:	bl	12900 <setup@@Base>
   15b14:	bl	130f4 <boolean_expression_complex@@Base>
   15b18:	ldr	r0, [pc, #600]	; 15d78 <main@@Base+0x4bc>
   15b1c:	add	r0, pc, r0
   15b20:	bl	11da4 <printf@plt>
   15b24:	ldr	r1, [pc, #576]	; 15d6c <main@@Base+0x4b0>
   15b28:	add	r1, pc, r1
   15b2c:	ldr	r2, [pc, #572]	; 15d70 <main@@Base+0x4b4>
   15b30:	add	r2, pc, r2
   15b34:	ldr	r3, [pc, #568]	; 15d74 <main@@Base+0x4b8>
   15b38:	add	r3, pc, r3
   15b3c:	str	r0, [sp, #60]	; 0x3c
   15b40:	mov	r0, r1
   15b44:	mov	r1, r2
   15b48:	mov	r2, r3
   15b4c:	bl	11da4 <printf@plt>
   15b50:	str	r0, [sp, #56]	; 0x38
   15b54:	bl	12900 <setup@@Base>
   15b58:	bl	13d98 <if_statement_only@@Base>
   15b5c:	ldr	r0, [pc, #516]	; 15d68 <main@@Base+0x4ac>
   15b60:	add	r0, pc, r0
   15b64:	bl	11da4 <printf@plt>
   15b68:	ldr	r1, [pc, #492]	; 15d5c <main@@Base+0x4a0>
   15b6c:	add	r1, pc, r1
   15b70:	ldr	r2, [pc, #488]	; 15d60 <main@@Base+0x4a4>
   15b74:	add	r2, pc, r2
   15b78:	ldr	r3, [pc, #484]	; 15d64 <main@@Base+0x4a8>
   15b7c:	add	r3, pc, r3
   15b80:	str	r0, [sp, #52]	; 0x34
   15b84:	mov	r0, r1
   15b88:	mov	r1, r2
   15b8c:	mov	r2, r3
   15b90:	bl	11da4 <printf@plt>
   15b94:	str	r0, [sp, #48]	; 0x30
   15b98:	bl	12900 <setup@@Base>
   15b9c:	bl	1417c <if_else_statements@@Base>
   15ba0:	ldr	r0, [pc, #432]	; 15d58 <main@@Base+0x49c>
   15ba4:	add	r0, pc, r0
   15ba8:	bl	11da4 <printf@plt>
   15bac:	ldr	r1, [pc, #408]	; 15d4c <main@@Base+0x490>
   15bb0:	add	r1, pc, r1
   15bb4:	ldr	r2, [pc, #404]	; 15d50 <main@@Base+0x494>
   15bb8:	add	r2, pc, r2
   15bbc:	ldr	r3, [pc, #400]	; 15d54 <main@@Base+0x498>
   15bc0:	add	r3, pc, r3
   15bc4:	str	r0, [sp, #44]	; 0x2c
   15bc8:	mov	r0, r1
   15bcc:	mov	r1, r2
   15bd0:	mov	r2, r3
   15bd4:	bl	11da4 <printf@plt>
   15bd8:	str	r0, [sp, #40]	; 0x28
   15bdc:	bl	12900 <setup@@Base>
   15be0:	bl	14e1c <if_statement_inside_if_statement@@Base>
   15be4:	ldr	r0, [pc, #348]	; 15d48 <main@@Base+0x48c>
   15be8:	add	r0, pc, r0
   15bec:	bl	11da4 <printf@plt>
   15bf0:	ldr	r1, [pc, #324]	; 15d3c <main@@Base+0x480>
   15bf4:	add	r1, pc, r1
   15bf8:	ldr	r2, [pc, #320]	; 15d40 <main@@Base+0x484>
   15bfc:	add	r2, pc, r2
   15c00:	ldr	r3, [pc, #316]	; 15d44 <main@@Base+0x488>
   15c04:	add	r3, pc, r3
   15c08:	str	r0, [sp, #36]	; 0x24
   15c0c:	mov	r0, r1
   15c10:	mov	r1, r2
   15c14:	mov	r2, r3
   15c18:	bl	11da4 <printf@plt>
   15c1c:	str	r0, [sp, #32]
   15c20:	bl	12900 <setup@@Base>
   15c24:	bl	15350 <if_statement_inside_else_statement@@Base>
   15c28:	ldr	r0, [pc, #264]	; 15d38 <main@@Base+0x47c>
   15c2c:	add	r0, pc, r0
   15c30:	bl	11da4 <printf@plt>
   15c34:	ldr	r1, [pc, #240]	; 15d2c <main@@Base+0x470>
   15c38:	add	r1, pc, r1
   15c3c:	ldr	r2, [pc, #236]	; 15d30 <main@@Base+0x474>
   15c40:	add	r2, pc, r2
   15c44:	ldr	r3, [pc, #232]	; 15d34 <main@@Base+0x478>
   15c48:	add	r3, pc, r3
   15c4c:	str	r0, [sp, #28]
   15c50:	mov	r0, r1
   15c54:	mov	r1, r2
   15c58:	mov	r2, r3
   15c5c:	bl	11da4 <printf@plt>
   15c60:	str	r0, [sp, #24]
   15c64:	bl	12900 <setup@@Base>
   15c68:	bl	14a5c <body_with_one_return@@Base>
   15c6c:	ldr	r0, [pc, #180]	; 15d28 <main@@Base+0x46c>
   15c70:	add	r0, pc, r0
   15c74:	bl	11da4 <printf@plt>
   15c78:	ldr	r1, [pc, #156]	; 15d1c <main@@Base+0x460>
   15c7c:	add	r1, pc, r1
   15c80:	ldr	r2, [pc, #152]	; 15d20 <main@@Base+0x464>
   15c84:	add	r2, pc, r2
   15c88:	ldr	r3, [pc, #148]	; 15d24 <main@@Base+0x468>
   15c8c:	add	r3, pc, r3
   15c90:	str	r0, [sp, #20]
   15c94:	mov	r0, r1
   15c98:	mov	r1, r2
   15c9c:	mov	r2, r3
   15ca0:	bl	11da4 <printf@plt>
   15ca4:	str	r0, [sp, #16]
   15ca8:	bl	12900 <setup@@Base>
   15cac:	bl	14598 <body_with_two_returns@@Base>
   15cb0:	ldr	r0, [pc, #96]	; 15d18 <main@@Base+0x45c>
   15cb4:	add	r0, pc, r0
   15cb8:	bl	11da4 <printf@plt>
   15cbc:	ldr	r1, [pc, #80]	; 15d14 <main@@Base+0x458>
   15cc0:	add	r1, pc, r1
   15cc4:	str	r0, [sp, #12]
   15cc8:	mov	r0, r1
   15ccc:	bl	11da4 <printf@plt>
   15cd0:	ldr	r1, [pc, #56]	; 15d10 <main@@Base+0x454>
   15cd4:	add	r1, pc, r1
   15cd8:	str	r0, [sp, #8]
   15cdc:	mov	r0, r1
   15ce0:	bl	11da4 <printf@plt>
   15ce4:	ldr	r1, [pc, #32]	; 15d0c <main@@Base+0x450>
   15ce8:	add	r1, pc, r1
   15cec:	str	r0, [sp, #4]
   15cf0:	mov	r0, r1
   15cf4:	bl	11da4 <printf@plt>
   15cf8:	movw	r1, #0
   15cfc:	str	r0, [sp]
   15d00:	mov	r0, r1
   15d04:	mov	sp, fp
   15d08:	pop	{fp, pc}
   15d0c:	andeq	r8, r0, r3, lsr r5
   15d10:	andeq	r8, r0, sl, ror #13
   15d14:	andeq	r8, r0, lr, ror #13
   15d18:	andeq	r8, r0, fp, lsr #11
   15d1c:	andeq	r8, r0, pc, lsr #11
   15d20:			; <UNDEFINED> instruction: 0x000085b9
   15d24:	andeq	r8, r0, ip, lsl #14
   15d28:	andeq	r8, r0, pc, ror #11
   15d2c:	strdeq	r8, [r0], -r3
   15d30:	strdeq	r8, [r0], -sp
   15d34:	andeq	r8, r0, fp, lsr r7
   15d38:	andeq	r8, r0, r3, lsr r6
   15d3c:	andeq	r8, r0, r7, lsr r6
   15d40:	andeq	r8, r0, r1, asr #12
   15d44:	andeq	r8, r0, ip, asr r7
   15d48:	andeq	r8, r0, r7, ror r6
   15d4c:	andeq	r8, r0, fp, ror r6
   15d50:	andeq	r8, r0, r5, lsl #13
   15d54:	andeq	r8, r0, pc, ror r7
   15d58:			; <UNDEFINED> instruction: 0x000086bb
   15d5c:			; <UNDEFINED> instruction: 0x000086bf
   15d60:	andeq	r8, r0, r9, asr #13
   15d64:			; <UNDEFINED> instruction: 0x000087b0
   15d68:	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   15d6c:	andeq	r8, r0, r3, lsl #14
   15d70:	andeq	r8, r0, sp, lsl #14
   15d74:	andeq	r8, r0, r2, ror #15
   15d78:	andeq	r8, r0, r3, asr #14
   15d7c:	andeq	r8, r0, r7, asr #14
   15d80:	andeq	r8, r0, r1, asr r7
   15d84:	andeq	r8, r0, fp, lsl #16
   15d88:	andeq	r8, r0, r7, lsl #15
   15d8c:	andeq	r8, r0, fp, lsl #15
   15d90:	muleq	r0, r5, r7
   15d94:	andeq	r8, r0, fp, lsr #16
   15d98:	andeq	r8, r0, fp, asr #15
   15d9c:	andeq	r8, r0, pc, asr #15
   15da0:	ldrdeq	r8, [r0], -r9
   15da4:	andeq	r8, r0, r6, asr #16
   15da8:	andeq	r8, r0, pc, lsl #16
   15dac:	andeq	r8, r0, r3, lsl r8
   15db0:	andeq	r8, r0, sp, lsl r8
   15db4:	andeq	r8, r0, r2, ror #16
   15db8:	andeq	r8, r0, r3, asr r8
   15dbc:	andeq	r8, r0, r7, asr r8
   15dc0:	andeq	r8, r0, r1, ror #16
   15dc4:	andeq	r8, r0, r5, lsl #17
   15dc8:	muleq	r0, r7, r8
   15dcc:	muleq	r0, fp, r8
   15dd0:	andeq	r8, r0, r5, lsr #17
   15dd4:	andeq	r8, r0, r9, lsr #17
   15dd8:			; <UNDEFINED> instruction: 0x000088bb
   15ddc:	andeq	sl, r1, ip, asr r7
   15de0:	andeq	r8, r0, ip, asr #17
   15de4:	andeq	sl, r1, ip, ror r7
   15de8:	andeq	r8, r0, r7, lsl #21
   15dec:	muleq	r1, r4, r7
   15df0:	ldrdeq	sl, [r1], -r4
   15df4:	andeq	sl, r1, r4, lsr #28
   15df8:	andeq	sl, r1, r8, lsl lr
   15dfc:	strdeq	sl, [r1], -r8
   15e00:	push	{r4, sl, fp, lr}
   15e04:	add	fp, sp, #8
   15e08:	sub	sp, sp, #40	; 0x28
   15e0c:	movw	r0, #0
   15e10:	str	r0, [fp, #-12]
   15e14:	b	15e18 <main@@Base+0x55c>
   15e18:	ldr	r0, [fp, #-12]
   15e1c:	ldr	r1, [pc, #244]	; 15f18 <main@@Base+0x65c>
   15e20:	add	r1, pc, r1
   15e24:	movw	r2, #24
   15e28:	mul	r2, r0, r2
   15e2c:	add	r1, r1, r2
   15e30:	ldr	r2, [r1]
   15e34:	ldr	r3, [r1, #4]
   15e38:	ldr	ip, [r1, #8]
   15e3c:	str	r0, [fp, #-16]
   15e40:	mov	r0, r2
   15e44:	str	r1, [fp, #-20]	; 0xffffffec
   15e48:	mov	r1, r3
   15e4c:	mov	r2, ip
   15e50:	bl	1ae34 <read_boolean_unary_expression@@Base+0x7d0>
   15e54:	ldr	r0, [fp, #-20]	; 0xffffffec
   15e58:	ldr	r1, [r0, #12]
   15e5c:	ldr	r2, [r0, #16]
   15e60:	ldr	r3, [r0, #20]
   15e64:	movw	ip, #0
   15e68:	cmp	ip, r1
   15e6c:	str	r1, [sp, #24]
   15e70:	str	r2, [sp, #20]
   15e74:	str	r3, [sp, #16]
   15e78:	str	ip, [sp, #12]
   15e7c:	bge	15ef4 <main@@Base+0x638>
   15e80:	ldr	r0, [sp, #12]
   15e84:	add	r1, r0, r0, lsl #2
   15e88:	ldr	r2, [sp, #20]
   15e8c:	ldr	r1, [r2, r1, lsl #2]!
   15e90:	ldr	r3, [r2, #4]
   15e94:	ldr	ip, [r2, #8]
   15e98:	ldr	lr, [r2, #16]
   15e9c:	ldrb	r2, [r2, #12]
   15ea0:	mov	r4, sp
   15ea4:	str	lr, [r4]
   15ea8:	str	r0, [sp, #8]
   15eac:	mov	r0, r1
   15eb0:	mov	r1, r3
   15eb4:	str	r2, [sp, #4]
   15eb8:	mov	r2, ip
   15ebc:	ldr	r3, [sp, #4]
   15ec0:	bl	1b598 <read_boolean_unary_expression@@Base+0xf34>
   15ec4:	ldr	r0, [sp, #16]
   15ec8:	ldr	r1, [sp, #8]
   15ecc:	add	r2, r0, r1, lsl #3
   15ed0:	ldr	r0, [r2]
   15ed4:	ldr	r1, [r2, #4]
   15ed8:	bl	1be4c <read_boolean_unary_expression@@Base+0x17e8>
   15edc:	ldr	r0, [sp, #8]
   15ee0:	add	r1, r0, #1
   15ee4:	ldr	r2, [sp, #24]
   15ee8:	cmp	r1, r2
   15eec:	str	r1, [sp, #12]
   15ef0:	blt	15e80 <main@@Base+0x5c4>
   15ef4:	bl	1c5c8 <read_boolean_unary_expression@@Base+0x1f64>
   15ef8:	bl	1d334 <read_boolean_unary_expression@@Base+0x2cd0>
   15efc:	ldr	lr, [fp, #-16]
   15f00:	add	r0, lr, #1
   15f04:	cmp	r0, #1
   15f08:	str	r0, [fp, #-12]
   15f0c:	blt	15e18 <main@@Base+0x55c>
   15f10:	sub	sp, fp, #8
   15f14:	pop	{r4, sl, fp, pc}
   15f18:	andeq	r9, r1, r8, lsr sl
   15f1c:	push	{fp, lr}
   15f20:	mov	fp, sp
   15f24:	bl	15e00 <main@@Base+0x544>
   15f28:	ldr	lr, [pc, #1608]	; 16578 <main@@Base+0xcbc>
   15f2c:	add	lr, pc, lr
   15f30:	mov	r0, #0
   15f34:	str	r0, [lr, #148]	; 0x94
   15f38:	str	r0, [lr, #144]	; 0x90
   15f3c:	str	r0, [lr, #140]	; 0x8c
   15f40:	str	r0, [lr, #136]	; 0x88
   15f44:	str	r0, [lr, #132]	; 0x84
   15f48:	str	r0, [lr, #128]	; 0x80
   15f4c:	str	r0, [lr, #124]	; 0x7c
   15f50:	str	r0, [lr, #120]	; 0x78
   15f54:	str	r0, [lr, #116]	; 0x74
   15f58:	str	r0, [lr, #112]	; 0x70
   15f5c:	str	r0, [lr, #108]	; 0x6c
   15f60:	str	r0, [lr, #104]	; 0x68
   15f64:	str	r0, [lr, #100]	; 0x64
   15f68:	str	r0, [lr, #96]	; 0x60
   15f6c:	str	r0, [lr, #92]	; 0x5c
   15f70:	str	r0, [lr, #88]	; 0x58
   15f74:	str	r0, [lr, #84]	; 0x54
   15f78:	str	r0, [lr, #80]	; 0x50
   15f7c:	str	r0, [lr, #76]	; 0x4c
   15f80:	str	r0, [lr, #72]	; 0x48
   15f84:	str	r0, [lr, #68]	; 0x44
   15f88:	str	r0, [lr, #64]	; 0x40
   15f8c:	str	r0, [lr, #60]	; 0x3c
   15f90:	str	r0, [lr, #56]	; 0x38
   15f94:	str	r0, [lr, #52]	; 0x34
   15f98:	str	r0, [lr, #48]	; 0x30
   15f9c:	str	r0, [lr, #44]	; 0x2c
   15fa0:	str	r0, [lr, #40]	; 0x28
   15fa4:	str	r0, [lr, #36]	; 0x24
   15fa8:	str	r0, [lr, #32]
   15fac:	str	r0, [lr, #28]
   15fb0:	str	r0, [lr, #24]
   15fb4:	str	r0, [lr, #20]
   15fb8:	str	r0, [lr, #16]
   15fbc:	str	r0, [lr, #12]
   15fc0:	str	r0, [lr, #8]
   15fc4:	str	r0, [lr, #4]
   15fc8:	str	r0, [lr]
   15fcc:	ldr	lr, [pc, #1448]	; 1657c <main@@Base+0xcc0>
   15fd0:	add	lr, pc, lr
   15fd4:	str	r0, [lr, #12]
   15fd8:	str	r0, [lr, #8]
   15fdc:	str	r0, [lr, #4]
   15fe0:	str	r0, [lr]
   15fe4:	ldr	lr, [pc, #1428]	; 16580 <main@@Base+0xcc4>
   15fe8:	add	lr, pc, lr
   15fec:	str	r0, [lr, #92]	; 0x5c
   15ff0:	str	r0, [lr, #88]	; 0x58
   15ff4:	str	r0, [lr, #84]	; 0x54
   15ff8:	str	r0, [lr, #80]	; 0x50
   15ffc:	str	r0, [lr, #76]	; 0x4c
   16000:	str	r0, [lr, #72]	; 0x48
   16004:	str	r0, [lr, #68]	; 0x44
   16008:	str	r0, [lr, #64]	; 0x40
   1600c:	str	r0, [lr, #60]	; 0x3c
   16010:	str	r0, [lr, #56]	; 0x38
   16014:	str	r0, [lr, #52]	; 0x34
   16018:	str	r0, [lr, #48]	; 0x30
   1601c:	str	r0, [lr, #44]	; 0x2c
   16020:	str	r0, [lr, #40]	; 0x28
   16024:	str	r0, [lr, #36]	; 0x24
   16028:	str	r0, [lr, #32]
   1602c:	str	r0, [lr, #28]
   16030:	str	r0, [lr, #24]
   16034:	str	r0, [lr, #20]
   16038:	str	r0, [lr, #16]
   1603c:	str	r0, [lr, #12]
   16040:	str	r0, [lr, #8]
   16044:	str	r0, [lr, #4]
   16048:	str	r0, [lr]
   1604c:	ldr	lr, [pc, #1328]	; 16584 <main@@Base+0xcc8>
   16050:	add	lr, pc, lr
   16054:	str	r0, [lr, #12]
   16058:	str	r0, [lr, #8]
   1605c:	str	r0, [lr, #4]
   16060:	str	r0, [lr]
   16064:	ldr	lr, [pc, #1308]	; 16588 <main@@Base+0xccc>
   16068:	add	lr, pc, lr
   1606c:	str	r0, [lr, #12]
   16070:	str	r0, [lr, #8]
   16074:	str	r0, [lr, #4]
   16078:	str	r0, [lr]
   1607c:	ldr	lr, [pc, #1288]	; 1658c <main@@Base+0xcd0>
   16080:	add	lr, pc, lr
   16084:	str	r0, [lr, #60]	; 0x3c
   16088:	str	r0, [lr, #56]	; 0x38
   1608c:	str	r0, [lr, #52]	; 0x34
   16090:	str	r0, [lr, #48]	; 0x30
   16094:	str	r0, [lr, #44]	; 0x2c
   16098:	str	r0, [lr, #40]	; 0x28
   1609c:	str	r0, [lr, #36]	; 0x24
   160a0:	str	r0, [lr, #32]
   160a4:	str	r0, [lr, #28]
   160a8:	str	r0, [lr, #24]
   160ac:	str	r0, [lr, #20]
   160b0:	str	r0, [lr, #16]
   160b4:	str	r0, [lr, #12]
   160b8:	str	r0, [lr, #8]
   160bc:	str	r0, [lr, #4]
   160c0:	str	r0, [lr]
   160c4:	ldr	lr, [pc, #1220]	; 16590 <main@@Base+0xcd4>
   160c8:	add	lr, pc, lr
   160cc:	str	r0, [lr, #60]	; 0x3c
   160d0:	str	r0, [lr, #56]	; 0x38
   160d4:	str	r0, [lr, #52]	; 0x34
   160d8:	str	r0, [lr, #48]	; 0x30
   160dc:	str	r0, [lr, #44]	; 0x2c
   160e0:	str	r0, [lr, #40]	; 0x28
   160e4:	str	r0, [lr, #36]	; 0x24
   160e8:	str	r0, [lr, #32]
   160ec:	str	r0, [lr, #28]
   160f0:	str	r0, [lr, #24]
   160f4:	str	r0, [lr, #20]
   160f8:	str	r0, [lr, #16]
   160fc:	str	r0, [lr, #12]
   16100:	str	r0, [lr, #8]
   16104:	str	r0, [lr, #4]
   16108:	str	r0, [lr]
   1610c:	ldr	lr, [pc, #1152]	; 16594 <main@@Base+0xcd8>
   16110:	add	lr, pc, lr
   16114:	str	r0, [lr, #84]	; 0x54
   16118:	str	r0, [lr, #80]	; 0x50
   1611c:	str	r0, [lr, #76]	; 0x4c
   16120:	str	r0, [lr, #72]	; 0x48
   16124:	str	r0, [lr, #68]	; 0x44
   16128:	str	r0, [lr, #64]	; 0x40
   1612c:	str	r0, [lr, #60]	; 0x3c
   16130:	str	r0, [lr, #56]	; 0x38
   16134:	str	r0, [lr, #52]	; 0x34
   16138:	str	r0, [lr, #48]	; 0x30
   1613c:	str	r0, [lr, #44]	; 0x2c
   16140:	str	r0, [lr, #40]	; 0x28
   16144:	str	r0, [lr, #36]	; 0x24
   16148:	str	r0, [lr, #32]
   1614c:	str	r0, [lr, #28]
   16150:	str	r0, [lr, #24]
   16154:	str	r0, [lr, #20]
   16158:	str	r0, [lr, #16]
   1615c:	str	r0, [lr, #12]
   16160:	str	r0, [lr, #8]
   16164:	str	r0, [lr, #4]
   16168:	str	r0, [lr]
   1616c:	ldr	lr, [pc, #1060]	; 16598 <main@@Base+0xcdc>
   16170:	add	lr, pc, lr
   16174:	str	r0, [lr, #60]	; 0x3c
   16178:	str	r0, [lr, #56]	; 0x38
   1617c:	str	r0, [lr, #52]	; 0x34
   16180:	str	r0, [lr, #48]	; 0x30
   16184:	str	r0, [lr, #44]	; 0x2c
   16188:	str	r0, [lr, #40]	; 0x28
   1618c:	str	r0, [lr, #36]	; 0x24
   16190:	str	r0, [lr, #32]
   16194:	str	r0, [lr, #28]
   16198:	str	r0, [lr, #24]
   1619c:	str	r0, [lr, #20]
   161a0:	str	r0, [lr, #16]
   161a4:	str	r0, [lr, #12]
   161a8:	str	r0, [lr, #8]
   161ac:	str	r0, [lr, #4]
   161b0:	str	r0, [lr]
   161b4:	ldr	lr, [pc, #992]	; 1659c <main@@Base+0xce0>
   161b8:	add	lr, pc, lr
   161bc:	str	r0, [lr, #132]	; 0x84
   161c0:	str	r0, [lr, #128]	; 0x80
   161c4:	str	r0, [lr, #124]	; 0x7c
   161c8:	str	r0, [lr, #120]	; 0x78
   161cc:	str	r0, [lr, #116]	; 0x74
   161d0:	str	r0, [lr, #112]	; 0x70
   161d4:	str	r0, [lr, #108]	; 0x6c
   161d8:	str	r0, [lr, #104]	; 0x68
   161dc:	str	r0, [lr, #100]	; 0x64
   161e0:	str	r0, [lr, #96]	; 0x60
   161e4:	str	r0, [lr, #92]	; 0x5c
   161e8:	str	r0, [lr, #88]	; 0x58
   161ec:	str	r0, [lr, #84]	; 0x54
   161f0:	str	r0, [lr, #80]	; 0x50
   161f4:	str	r0, [lr, #76]	; 0x4c
   161f8:	str	r0, [lr, #72]	; 0x48
   161fc:	str	r0, [lr, #68]	; 0x44
   16200:	str	r0, [lr, #64]	; 0x40
   16204:	str	r0, [lr, #60]	; 0x3c
   16208:	str	r0, [lr, #56]	; 0x38
   1620c:	str	r0, [lr, #52]	; 0x34
   16210:	str	r0, [lr, #48]	; 0x30
   16214:	str	r0, [lr, #44]	; 0x2c
   16218:	str	r0, [lr, #40]	; 0x28
   1621c:	str	r0, [lr, #36]	; 0x24
   16220:	str	r0, [lr, #32]
   16224:	str	r0, [lr, #28]
   16228:	str	r0, [lr, #24]
   1622c:	str	r0, [lr, #20]
   16230:	str	r0, [lr, #16]
   16234:	str	r0, [lr, #12]
   16238:	str	r0, [lr, #8]
   1623c:	str	r0, [lr, #4]
   16240:	str	r0, [lr]
   16244:	ldr	lr, [pc, #852]	; 165a0 <main@@Base+0xce4>
   16248:	add	lr, pc, lr
   1624c:	str	r0, [lr, #132]	; 0x84
   16250:	str	r0, [lr, #128]	; 0x80
   16254:	str	r0, [lr, #124]	; 0x7c
   16258:	str	r0, [lr, #120]	; 0x78
   1625c:	str	r0, [lr, #116]	; 0x74
   16260:	str	r0, [lr, #112]	; 0x70
   16264:	str	r0, [lr, #108]	; 0x6c
   16268:	str	r0, [lr, #104]	; 0x68
   1626c:	str	r0, [lr, #100]	; 0x64
   16270:	str	r0, [lr, #96]	; 0x60
   16274:	str	r0, [lr, #92]	; 0x5c
   16278:	str	r0, [lr, #88]	; 0x58
   1627c:	str	r0, [lr, #84]	; 0x54
   16280:	str	r0, [lr, #80]	; 0x50
   16284:	str	r0, [lr, #76]	; 0x4c
   16288:	str	r0, [lr, #72]	; 0x48
   1628c:	str	r0, [lr, #68]	; 0x44
   16290:	str	r0, [lr, #64]	; 0x40
   16294:	str	r0, [lr, #60]	; 0x3c
   16298:	str	r0, [lr, #56]	; 0x38
   1629c:	str	r0, [lr, #52]	; 0x34
   162a0:	str	r0, [lr, #48]	; 0x30
   162a4:	str	r0, [lr, #44]	; 0x2c
   162a8:	str	r0, [lr, #40]	; 0x28
   162ac:	str	r0, [lr, #36]	; 0x24
   162b0:	str	r0, [lr, #32]
   162b4:	str	r0, [lr, #28]
   162b8:	str	r0, [lr, #24]
   162bc:	str	r0, [lr, #20]
   162c0:	str	r0, [lr, #16]
   162c4:	str	r0, [lr, #12]
   162c8:	str	r0, [lr, #8]
   162cc:	str	r0, [lr, #4]
   162d0:	str	r0, [lr]
   162d4:	ldr	lr, [pc, #712]	; 165a4 <main@@Base+0xce8>
   162d8:	add	lr, pc, lr
   162dc:	str	r0, [lr, #84]	; 0x54
   162e0:	str	r0, [lr, #80]	; 0x50
   162e4:	str	r0, [lr, #76]	; 0x4c
   162e8:	str	r0, [lr, #72]	; 0x48
   162ec:	str	r0, [lr, #68]	; 0x44
   162f0:	str	r0, [lr, #64]	; 0x40
   162f4:	str	r0, [lr, #60]	; 0x3c
   162f8:	str	r0, [lr, #56]	; 0x38
   162fc:	str	r0, [lr, #52]	; 0x34
   16300:	str	r0, [lr, #48]	; 0x30
   16304:	str	r0, [lr, #44]	; 0x2c
   16308:	str	r0, [lr, #40]	; 0x28
   1630c:	str	r0, [lr, #36]	; 0x24
   16310:	str	r0, [lr, #32]
   16314:	str	r0, [lr, #28]
   16318:	str	r0, [lr, #24]
   1631c:	str	r0, [lr, #20]
   16320:	str	r0, [lr, #16]
   16324:	str	r0, [lr, #12]
   16328:	str	r0, [lr, #8]
   1632c:	str	r0, [lr, #4]
   16330:	str	r0, [lr]
   16334:	ldr	lr, [pc, #620]	; 165a8 <main@@Base+0xcec>
   16338:	add	lr, pc, lr
   1633c:	str	r0, [lr, #84]	; 0x54
   16340:	str	r0, [lr, #80]	; 0x50
   16344:	str	r0, [lr, #76]	; 0x4c
   16348:	str	r0, [lr, #72]	; 0x48
   1634c:	str	r0, [lr, #68]	; 0x44
   16350:	str	r0, [lr, #64]	; 0x40
   16354:	str	r0, [lr, #60]	; 0x3c
   16358:	str	r0, [lr, #56]	; 0x38
   1635c:	str	r0, [lr, #52]	; 0x34
   16360:	str	r0, [lr, #48]	; 0x30
   16364:	str	r0, [lr, #44]	; 0x2c
   16368:	str	r0, [lr, #40]	; 0x28
   1636c:	str	r0, [lr, #36]	; 0x24
   16370:	str	r0, [lr, #32]
   16374:	str	r0, [lr, #28]
   16378:	str	r0, [lr, #24]
   1637c:	str	r0, [lr, #20]
   16380:	str	r0, [lr, #16]
   16384:	str	r0, [lr, #12]
   16388:	str	r0, [lr, #8]
   1638c:	str	r0, [lr, #4]
   16390:	str	r0, [lr]
   16394:	ldr	lr, [pc, #528]	; 165ac <main@@Base+0xcf0>
   16398:	add	lr, pc, lr
   1639c:	str	r0, [lr, #132]	; 0x84
   163a0:	str	r0, [lr, #128]	; 0x80
   163a4:	str	r0, [lr, #124]	; 0x7c
   163a8:	str	r0, [lr, #120]	; 0x78
   163ac:	str	r0, [lr, #116]	; 0x74
   163b0:	str	r0, [lr, #112]	; 0x70
   163b4:	str	r0, [lr, #108]	; 0x6c
   163b8:	str	r0, [lr, #104]	; 0x68
   163bc:	str	r0, [lr, #100]	; 0x64
   163c0:	str	r0, [lr, #96]	; 0x60
   163c4:	str	r0, [lr, #92]	; 0x5c
   163c8:	str	r0, [lr, #88]	; 0x58
   163cc:	str	r0, [lr, #84]	; 0x54
   163d0:	str	r0, [lr, #80]	; 0x50
   163d4:	str	r0, [lr, #76]	; 0x4c
   163d8:	str	r0, [lr, #72]	; 0x48
   163dc:	str	r0, [lr, #68]	; 0x44
   163e0:	str	r0, [lr, #64]	; 0x40
   163e4:	str	r0, [lr, #60]	; 0x3c
   163e8:	str	r0, [lr, #56]	; 0x38
   163ec:	str	r0, [lr, #52]	; 0x34
   163f0:	str	r0, [lr, #48]	; 0x30
   163f4:	str	r0, [lr, #44]	; 0x2c
   163f8:	str	r0, [lr, #40]	; 0x28
   163fc:	str	r0, [lr, #36]	; 0x24
   16400:	str	r0, [lr, #32]
   16404:	str	r0, [lr, #28]
   16408:	str	r0, [lr, #24]
   1640c:	str	r0, [lr, #20]
   16410:	str	r0, [lr, #16]
   16414:	str	r0, [lr, #12]
   16418:	str	r0, [lr, #8]
   1641c:	str	r0, [lr, #4]
   16420:	str	r0, [lr]
   16424:	ldr	lr, [pc, #388]	; 165b0 <main@@Base+0xcf4>
   16428:	add	lr, pc, lr
   1642c:	str	r0, [lr, #108]	; 0x6c
   16430:	str	r0, [lr, #104]	; 0x68
   16434:	str	r0, [lr, #100]	; 0x64
   16438:	str	r0, [lr, #96]	; 0x60
   1643c:	str	r0, [lr, #92]	; 0x5c
   16440:	str	r0, [lr, #88]	; 0x58
   16444:	str	r0, [lr, #84]	; 0x54
   16448:	str	r0, [lr, #80]	; 0x50
   1644c:	str	r0, [lr, #76]	; 0x4c
   16450:	str	r0, [lr, #72]	; 0x48
   16454:	str	r0, [lr, #68]	; 0x44
   16458:	str	r0, [lr, #64]	; 0x40
   1645c:	str	r0, [lr, #60]	; 0x3c
   16460:	str	r0, [lr, #56]	; 0x38
   16464:	str	r0, [lr, #52]	; 0x34
   16468:	str	r0, [lr, #48]	; 0x30
   1646c:	str	r0, [lr, #44]	; 0x2c
   16470:	str	r0, [lr, #40]	; 0x28
   16474:	str	r0, [lr, #36]	; 0x24
   16478:	str	r0, [lr, #32]
   1647c:	str	r0, [lr, #28]
   16480:	str	r0, [lr, #24]
   16484:	str	r0, [lr, #20]
   16488:	str	r0, [lr, #16]
   1648c:	str	r0, [lr, #12]
   16490:	str	r0, [lr, #8]
   16494:	str	r0, [lr, #4]
   16498:	str	r0, [lr]
   1649c:	ldr	lr, [pc, #272]	; 165b4 <main@@Base+0xcf8>
   164a0:	add	lr, pc, lr
   164a4:	str	r0, [lr, #84]	; 0x54
   164a8:	str	r0, [lr, #80]	; 0x50
   164ac:	str	r0, [lr, #76]	; 0x4c
   164b0:	str	r0, [lr, #72]	; 0x48
   164b4:	str	r0, [lr, #68]	; 0x44
   164b8:	str	r0, [lr, #64]	; 0x40
   164bc:	str	r0, [lr, #60]	; 0x3c
   164c0:	str	r0, [lr, #56]	; 0x38
   164c4:	str	r0, [lr, #52]	; 0x34
   164c8:	str	r0, [lr, #48]	; 0x30
   164cc:	str	r0, [lr, #44]	; 0x2c
   164d0:	str	r0, [lr, #40]	; 0x28
   164d4:	str	r0, [lr, #36]	; 0x24
   164d8:	str	r0, [lr, #32]
   164dc:	str	r0, [lr, #28]
   164e0:	str	r0, [lr, #24]
   164e4:	str	r0, [lr, #20]
   164e8:	str	r0, [lr, #16]
   164ec:	str	r0, [lr, #12]
   164f0:	str	r0, [lr, #8]
   164f4:	str	r0, [lr, #4]
   164f8:	str	r0, [lr]
   164fc:	ldr	lr, [pc, #180]	; 165b8 <main@@Base+0xcfc>
   16500:	add	lr, pc, lr
   16504:	str	r0, [lr, #84]	; 0x54
   16508:	str	r0, [lr, #80]	; 0x50
   1650c:	str	r0, [lr, #76]	; 0x4c
   16510:	str	r0, [lr, #72]	; 0x48
   16514:	str	r0, [lr, #68]	; 0x44
   16518:	str	r0, [lr, #64]	; 0x40
   1651c:	str	r0, [lr, #60]	; 0x3c
   16520:	str	r0, [lr, #56]	; 0x38
   16524:	str	r0, [lr, #52]	; 0x34
   16528:	str	r0, [lr, #48]	; 0x30
   1652c:	str	r0, [lr, #44]	; 0x2c
   16530:	str	r0, [lr, #40]	; 0x28
   16534:	str	r0, [lr, #36]	; 0x24
   16538:	str	r0, [lr, #32]
   1653c:	str	r0, [lr, #28]
   16540:	str	r0, [lr, #24]
   16544:	str	r0, [lr, #20]
   16548:	str	r0, [lr, #16]
   1654c:	str	r0, [lr, #12]
   16550:	str	r0, [lr, #8]
   16554:	str	r0, [lr, #4]
   16558:	str	r0, [lr]
   1655c:	ldr	lr, [pc, #88]	; 165bc <main@@Base+0xd00>
   16560:	add	lr, pc, lr
   16564:	str	r0, [lr, #12]
   16568:	str	r0, [lr, #8]
   1656c:	str	r0, [lr, #4]
   16570:	str	r0, [lr]
   16574:	pop	{fp, pc}
   16578:	ldrdeq	sl, [r1], -ip
   1657c:	ldrdeq	sl, [r1], -r0
   16580:	ldrdeq	sl, [r1], -r0
   16584:	andeq	sl, r1, r8, asr #3
   16588:	andeq	sl, r1, r0, asr #3
   1658c:			; <UNDEFINED> instruction: 0x0001a1b8
   16590:			; <UNDEFINED> instruction: 0x0001a1b0
   16594:	andeq	sl, r1, r8, lsr #3
   16598:	andeq	sl, r1, r8, lsr #3
   1659c:	andeq	sl, r1, r0, lsr #3
   165a0:	andeq	sl, r1, r0, lsr #3
   165a4:	andeq	sl, r1, r0, lsr #3
   165a8:	andeq	sl, r1, r0, lsr #3
   165ac:	andeq	sl, r1, r0, lsr #3
   165b0:	andeq	sl, r1, r0, lsr #3
   165b4:	muleq	r1, r8, r1
   165b8:	muleq	r1, r8, r1
   165bc:	muleq	r1, r0, r1
   165c0:	push	{fp, lr}
   165c4:	mov	fp, sp
   165c8:	ldr	r0, [pc, #16]	; 165e0 <main@@Base+0xd24>
   165cc:	add	r0, pc, r0
   165d0:	ldr	r1, [pc, #12]	; 165e4 <main@@Base+0xd28>
   165d4:	add	r1, pc, r1
   165d8:	bl	1d7e4 <__gcov_flush@@Base+0xb4>
   165dc:	pop	{fp, pc}
   165e0:			; <UNDEFINED> instruction: 0xfffff82c
   165e4:			; <UNDEFINED> instruction: 0xfffff940

000165e8 <init_token_int_type@@Base>:
   165e8:	sub	sp, sp, #8
   165ec:	ldr	r1, [pc, #92]	; 16650 <init_token_int_type@@Base+0x68>
   165f0:	add	r1, pc, r1
   165f4:	ldr	r2, [r1, #4]
   165f8:	ldr	r3, [pc, #84]	; 16654 <init_token_int_type@@Base+0x6c>
   165fc:	ldr	r3, [pc, r3]
   16600:	adds	r3, r3, #1
   16604:	adc	r2, r2, #0
   16608:	str	r3, [r1]
   1660c:	str	r2, [r1, #4]
   16610:	str	r0, [sp]
   16614:	ldr	r0, [pc, #60]	; 16658 <init_token_int_type@@Base+0x70>
   16618:	add	r0, pc, r0
   1661c:	ldr	r1, [r0, #8]
   16620:	ldr	r2, [r0, #12]
   16624:	adds	r1, r1, #1
   16628:	adc	r2, r2, #0
   1662c:	str	r1, [r0, #8]
   16630:	str	r2, [r0, #12]
   16634:	ldr	r0, [sp]
   16638:	str	r0, [sp, #4]
   1663c:	ldr	r1, [sp, #4]
   16640:	movw	r2, #0
   16644:	str	r2, [r1]
   16648:	add	sp, sp, #8
   1664c:	bx	lr
   16650:	andeq	sl, r1, r8, lsl r1
   16654:	andeq	sl, r1, ip, lsl #2
   16658:	strdeq	sl, [r1], -r0

0001665c <init_token_int_value@@Base>:
   1665c:	sub	sp, sp, #16
   16660:	ldr	r2, [pc, #116]	; 166dc <init_token_int_value@@Base+0x80>
   16664:	add	r2, pc, r2
   16668:	ldr	r3, [r2, #4]
   1666c:	ldr	ip, [pc, #108]	; 166e0 <init_token_int_value@@Base+0x84>
   16670:	ldr	ip, [pc, ip]
   16674:	adds	ip, ip, #1
   16678:	adc	r3, r3, #0
   1667c:	str	ip, [r2]
   16680:	str	r3, [r2, #4]
   16684:	str	r0, [sp, #4]
   16688:	str	r1, [sp]
   1668c:	ldr	r0, [pc, #80]	; 166e4 <init_token_int_value@@Base+0x88>
   16690:	add	r0, pc, r0
   16694:	ldr	r1, [r0, #8]
   16698:	ldr	r2, [r0, #12]
   1669c:	adds	r1, r1, #1
   166a0:	adc	r2, r2, #0
   166a4:	str	r1, [r0, #8]
   166a8:	str	r2, [r0, #12]
   166ac:	ldr	r0, [sp, #4]
   166b0:	str	r0, [sp, #12]
   166b4:	ldr	r1, [sp]
   166b8:	str	r1, [sp, #8]
   166bc:	ldr	r2, [sp, #12]
   166c0:	movw	r3, #1
   166c4:	str	r3, [r2]
   166c8:	ldr	r2, [sp, #8]
   166cc:	ldr	r3, [sp, #12]
   166d0:	str	r2, [r3, #4]
   166d4:	add	sp, sp, #16
   166d8:	bx	lr
   166dc:	strheq	sl, [r1], -r4
   166e0:	andeq	sl, r1, r8, lsr #1
   166e4:	andeq	sl, r1, r8, lsl #1

000166e8 <init_token_function@@Base>:
   166e8:	sub	sp, sp, #16
   166ec:	ldr	r2, [pc, #116]	; 16768 <init_token_function@@Base+0x80>
   166f0:	add	r2, pc, r2
   166f4:	ldr	r3, [r2, #4]
   166f8:	ldr	ip, [pc, #108]	; 1676c <init_token_function@@Base+0x84>
   166fc:	ldr	ip, [pc, ip]
   16700:	adds	ip, ip, #1
   16704:	adc	r3, r3, #0
   16708:	str	ip, [r2]
   1670c:	str	r3, [r2, #4]
   16710:	str	r0, [sp, #4]
   16714:	str	r1, [sp]
   16718:	ldr	r0, [pc, #80]	; 16770 <init_token_function@@Base+0x88>
   1671c:	add	r0, pc, r0
   16720:	ldr	r1, [r0, #8]
   16724:	ldr	r2, [r0, #12]
   16728:	adds	r1, r1, #1
   1672c:	adc	r2, r2, #0
   16730:	str	r1, [r0, #8]
   16734:	str	r2, [r0, #12]
   16738:	ldr	r0, [sp, #4]
   1673c:	str	r0, [sp, #12]
   16740:	ldr	r1, [sp]
   16744:	str	r1, [sp, #8]
   16748:	ldr	r2, [sp, #12]
   1674c:	movw	r3, #2
   16750:	str	r3, [r2]
   16754:	ldr	r2, [sp, #8]
   16758:	ldr	r3, [sp, #12]
   1675c:	str	r2, [r3, #4]
   16760:	add	sp, sp, #16
   16764:	bx	lr
   16768:	andeq	sl, r1, r8, lsr r0
   1676c:	andeq	sl, r1, ip, lsr #32
   16770:	andeq	sl, r1, ip

00016774 <init_token_opar@@Base>:
   16774:	sub	sp, sp, #8
   16778:	ldr	r1, [pc, #92]	; 167dc <init_token_opar@@Base+0x68>
   1677c:	add	r1, pc, r1
   16780:	ldr	r2, [r1, #4]
   16784:	ldr	r3, [pc, #84]	; 167e0 <init_token_opar@@Base+0x6c>
   16788:	ldr	r3, [pc, r3]
   1678c:	adds	r3, r3, #1
   16790:	adc	r2, r2, #0
   16794:	str	r3, [r1]
   16798:	str	r2, [r1, #4]
   1679c:	str	r0, [sp]
   167a0:	ldr	r0, [pc, #60]	; 167e4 <init_token_opar@@Base+0x70>
   167a4:	add	r0, pc, r0
   167a8:	ldr	r1, [r0, #8]
   167ac:	ldr	r2, [r0, #12]
   167b0:	adds	r1, r1, #1
   167b4:	adc	r2, r2, #0
   167b8:	str	r1, [r0, #8]
   167bc:	str	r2, [r0, #12]
   167c0:	ldr	r0, [sp]
   167c4:	str	r0, [sp, #4]
   167c8:	ldr	r1, [sp, #4]
   167cc:	movw	r2, #3
   167d0:	str	r2, [r1]
   167d4:	add	sp, sp, #8
   167d8:	bx	lr
   167dc:			; <UNDEFINED> instruction: 0x00019fbc
   167e0:			; <UNDEFINED> instruction: 0x00019fb0
   167e4:	muleq	r1, r4, pc	; <UNPREDICTABLE>

000167e8 <init_token_cpar@@Base>:
   167e8:	sub	sp, sp, #8
   167ec:	ldr	r1, [pc, #92]	; 16850 <init_token_cpar@@Base+0x68>
   167f0:	add	r1, pc, r1
   167f4:	ldr	r2, [r1, #4]
   167f8:	ldr	r3, [pc, #84]	; 16854 <init_token_cpar@@Base+0x6c>
   167fc:	ldr	r3, [pc, r3]
   16800:	adds	r3, r3, #1
   16804:	adc	r2, r2, #0
   16808:	str	r3, [r1]
   1680c:	str	r2, [r1, #4]
   16810:	str	r0, [sp]
   16814:	ldr	r0, [pc, #60]	; 16858 <init_token_cpar@@Base+0x70>
   16818:	add	r0, pc, r0
   1681c:	ldr	r1, [r0, #8]
   16820:	ldr	r2, [r0, #12]
   16824:	adds	r1, r1, #1
   16828:	adc	r2, r2, #0
   1682c:	str	r1, [r0, #8]
   16830:	str	r2, [r0, #12]
   16834:	ldr	r0, [sp]
   16838:	str	r0, [sp, #4]
   1683c:	ldr	r1, [sp, #4]
   16840:	movw	r2, #4
   16844:	str	r2, [r1]
   16848:	add	sp, sp, #8
   1684c:	bx	lr
   16850:	andeq	r9, r1, r8, asr pc
   16854:	andeq	r9, r1, ip, asr #30
   16858:	andeq	r9, r1, r0, lsr pc

0001685c <init_token_obra@@Base>:
   1685c:	sub	sp, sp, #8
   16860:	ldr	r1, [pc, #92]	; 168c4 <init_token_obra@@Base+0x68>
   16864:	add	r1, pc, r1
   16868:	ldr	r2, [r1, #4]
   1686c:	ldr	r3, [pc, #84]	; 168c8 <init_token_obra@@Base+0x6c>
   16870:	ldr	r3, [pc, r3]
   16874:	adds	r3, r3, #1
   16878:	adc	r2, r2, #0
   1687c:	str	r3, [r1]
   16880:	str	r2, [r1, #4]
   16884:	str	r0, [sp]
   16888:	ldr	r0, [pc, #60]	; 168cc <init_token_obra@@Base+0x70>
   1688c:	add	r0, pc, r0
   16890:	ldr	r1, [r0, #8]
   16894:	ldr	r2, [r0, #12]
   16898:	adds	r1, r1, #1
   1689c:	adc	r2, r2, #0
   168a0:	str	r1, [r0, #8]
   168a4:	str	r2, [r0, #12]
   168a8:	ldr	r0, [sp]
   168ac:	str	r0, [sp, #4]
   168b0:	ldr	r1, [sp, #4]
   168b4:	movw	r2, #5
   168b8:	str	r2, [r1]
   168bc:	add	sp, sp, #8
   168c0:	bx	lr
   168c4:	strdeq	r9, [r1], -r4
   168c8:	andeq	r9, r1, r8, ror #29
   168cc:	andeq	r9, r1, ip, asr #29

000168d0 <init_token_cbra@@Base>:
   168d0:	sub	sp, sp, #8
   168d4:	ldr	r1, [pc, #92]	; 16938 <init_token_cbra@@Base+0x68>
   168d8:	add	r1, pc, r1
   168dc:	ldr	r2, [r1, #4]
   168e0:	ldr	r3, [pc, #84]	; 1693c <init_token_cbra@@Base+0x6c>
   168e4:	ldr	r3, [pc, r3]
   168e8:	adds	r3, r3, #1
   168ec:	adc	r2, r2, #0
   168f0:	str	r3, [r1]
   168f4:	str	r2, [r1, #4]
   168f8:	str	r0, [sp]
   168fc:	ldr	r0, [pc, #60]	; 16940 <init_token_cbra@@Base+0x70>
   16900:	add	r0, pc, r0
   16904:	ldr	r1, [r0, #8]
   16908:	ldr	r2, [r0, #12]
   1690c:	adds	r1, r1, #1
   16910:	adc	r2, r2, #0
   16914:	str	r1, [r0, #8]
   16918:	str	r2, [r0, #12]
   1691c:	ldr	r0, [sp]
   16920:	str	r0, [sp, #4]
   16924:	ldr	r1, [sp, #4]
   16928:	movw	r2, #6
   1692c:	str	r2, [r1]
   16930:	add	sp, sp, #8
   16934:	bx	lr
   16938:	muleq	r1, r0, lr
   1693c:	andeq	r9, r1, r4, lsl #29
   16940:	andeq	r9, r1, r8, ror #28

00016944 <init_token_return@@Base>:
   16944:	sub	sp, sp, #8
   16948:	ldr	r1, [pc, #92]	; 169ac <init_token_return@@Base+0x68>
   1694c:	add	r1, pc, r1
   16950:	ldr	r2, [r1, #4]
   16954:	ldr	r3, [pc, #84]	; 169b0 <init_token_return@@Base+0x6c>
   16958:	ldr	r3, [pc, r3]
   1695c:	adds	r3, r3, #1
   16960:	adc	r2, r2, #0
   16964:	str	r3, [r1]
   16968:	str	r2, [r1, #4]
   1696c:	str	r0, [sp]
   16970:	ldr	r0, [pc, #60]	; 169b4 <init_token_return@@Base+0x70>
   16974:	add	r0, pc, r0
   16978:	ldr	r1, [r0, #8]
   1697c:	ldr	r2, [r0, #12]
   16980:	adds	r1, r1, #1
   16984:	adc	r2, r2, #0
   16988:	str	r1, [r0, #8]
   1698c:	str	r2, [r0, #12]
   16990:	ldr	r0, [sp]
   16994:	str	r0, [sp, #4]
   16998:	ldr	r1, [sp, #4]
   1699c:	movw	r2, #7
   169a0:	str	r2, [r1]
   169a4:	add	sp, sp, #8
   169a8:	bx	lr
   169ac:	andeq	r9, r1, ip, lsr #28
   169b0:	andeq	r9, r1, r0, lsr #28
   169b4:	andeq	r9, r1, r4, lsl #28

000169b8 <init_token_semicolon@@Base>:
   169b8:	sub	sp, sp, #8
   169bc:	ldr	r1, [pc, #92]	; 16a20 <init_token_semicolon@@Base+0x68>
   169c0:	add	r1, pc, r1
   169c4:	ldr	r2, [r1, #4]
   169c8:	ldr	r3, [pc, #84]	; 16a24 <init_token_semicolon@@Base+0x6c>
   169cc:	ldr	r3, [pc, r3]
   169d0:	adds	r3, r3, #1
   169d4:	adc	r2, r2, #0
   169d8:	str	r3, [r1]
   169dc:	str	r2, [r1, #4]
   169e0:	str	r0, [sp]
   169e4:	ldr	r0, [pc, #60]	; 16a28 <init_token_semicolon@@Base+0x70>
   169e8:	add	r0, pc, r0
   169ec:	ldr	r1, [r0, #8]
   169f0:	ldr	r2, [r0, #12]
   169f4:	adds	r1, r1, #1
   169f8:	adc	r2, r2, #0
   169fc:	str	r1, [r0, #8]
   16a00:	str	r2, [r0, #12]
   16a04:	ldr	r0, [sp]
   16a08:	str	r0, [sp, #4]
   16a0c:	ldr	r1, [sp, #4]
   16a10:	movw	r2, #8
   16a14:	str	r2, [r1]
   16a18:	add	sp, sp, #8
   16a1c:	bx	lr
   16a20:	andeq	r9, r1, r8, asr #27
   16a24:			; <UNDEFINED> instruction: 0x00019dbc
   16a28:	andeq	r9, r1, r0, lsr #27

00016a2c <init_token_eof@@Base>:
   16a2c:	sub	sp, sp, #8
   16a30:	ldr	r1, [pc, #92]	; 16a94 <init_token_eof@@Base+0x68>
   16a34:	add	r1, pc, r1
   16a38:	ldr	r2, [r1, #4]
   16a3c:	ldr	r3, [pc, #84]	; 16a98 <init_token_eof@@Base+0x6c>
   16a40:	ldr	r3, [pc, r3]
   16a44:	adds	r3, r3, #1
   16a48:	adc	r2, r2, #0
   16a4c:	str	r3, [r1]
   16a50:	str	r2, [r1, #4]
   16a54:	str	r0, [sp]
   16a58:	ldr	r0, [pc, #60]	; 16a9c <init_token_eof@@Base+0x70>
   16a5c:	add	r0, pc, r0
   16a60:	ldr	r1, [r0, #8]
   16a64:	ldr	r2, [r0, #12]
   16a68:	adds	r1, r1, #1
   16a6c:	adc	r2, r2, #0
   16a70:	str	r1, [r0, #8]
   16a74:	str	r2, [r0, #12]
   16a78:	ldr	r0, [sp]
   16a7c:	str	r0, [sp, #4]
   16a80:	ldr	r1, [sp, #4]
   16a84:	movw	r2, #9
   16a88:	str	r2, [r1]
   16a8c:	add	sp, sp, #8
   16a90:	bx	lr
   16a94:	andeq	r9, r1, r4, ror #26
   16a98:	andeq	r9, r1, r8, asr sp
   16a9c:	andeq	r9, r1, ip, lsr sp

00016aa0 <init_token_if@@Base>:
   16aa0:	sub	sp, sp, #8
   16aa4:	ldr	r1, [pc, #92]	; 16b08 <init_token_if@@Base+0x68>
   16aa8:	add	r1, pc, r1
   16aac:	ldr	r2, [r1, #4]
   16ab0:	ldr	r3, [pc, #84]	; 16b0c <init_token_if@@Base+0x6c>
   16ab4:	ldr	r3, [pc, r3]
   16ab8:	adds	r3, r3, #1
   16abc:	adc	r2, r2, #0
   16ac0:	str	r3, [r1]
   16ac4:	str	r2, [r1, #4]
   16ac8:	str	r0, [sp]
   16acc:	ldr	r0, [pc, #60]	; 16b10 <init_token_if@@Base+0x70>
   16ad0:	add	r0, pc, r0
   16ad4:	ldr	r1, [r0, #8]
   16ad8:	ldr	r2, [r0, #12]
   16adc:	adds	r1, r1, #1
   16ae0:	adc	r2, r2, #0
   16ae4:	str	r1, [r0, #8]
   16ae8:	str	r2, [r0, #12]
   16aec:	ldr	r0, [sp]
   16af0:	str	r0, [sp, #4]
   16af4:	ldr	r1, [sp, #4]
   16af8:	movw	r2, #10
   16afc:	str	r2, [r1]
   16b00:	add	sp, sp, #8
   16b04:	bx	lr
   16b08:	andeq	r9, r1, r0, lsl #26
   16b0c:	strdeq	r9, [r1], -r4
   16b10:	ldrdeq	r9, [r1], -r8

00016b14 <init_token_else@@Base>:
   16b14:	sub	sp, sp, #8
   16b18:	ldr	r1, [pc, #92]	; 16b7c <init_token_else@@Base+0x68>
   16b1c:	add	r1, pc, r1
   16b20:	ldr	r2, [r1, #4]
   16b24:	ldr	r3, [pc, #84]	; 16b80 <init_token_else@@Base+0x6c>
   16b28:	ldr	r3, [pc, r3]
   16b2c:	adds	r3, r3, #1
   16b30:	adc	r2, r2, #0
   16b34:	str	r3, [r1]
   16b38:	str	r2, [r1, #4]
   16b3c:	str	r0, [sp]
   16b40:	ldr	r0, [pc, #60]	; 16b84 <init_token_else@@Base+0x70>
   16b44:	add	r0, pc, r0
   16b48:	ldr	r1, [r0, #8]
   16b4c:	ldr	r2, [r0, #12]
   16b50:	adds	r1, r1, #1
   16b54:	adc	r2, r2, #0
   16b58:	str	r1, [r0, #8]
   16b5c:	str	r2, [r0, #12]
   16b60:	ldr	r0, [sp]
   16b64:	str	r0, [sp, #4]
   16b68:	ldr	r1, [sp, #4]
   16b6c:	movw	r2, #11
   16b70:	str	r2, [r1]
   16b74:	add	sp, sp, #8
   16b78:	bx	lr
   16b7c:	muleq	r1, ip, ip
   16b80:	muleq	r1, r0, ip
   16b84:	andeq	r9, r1, r4, ror ip

00016b88 <init_token_boolean_op@@Base>:
   16b88:	sub	sp, sp, #16
   16b8c:	ldr	r2, [pc, #116]	; 16c08 <init_token_boolean_op@@Base+0x80>
   16b90:	add	r2, pc, r2
   16b94:	ldr	r3, [r2, #4]
   16b98:	ldr	ip, [pc, #108]	; 16c0c <init_token_boolean_op@@Base+0x84>
   16b9c:	ldr	ip, [pc, ip]
   16ba0:	adds	ip, ip, #1
   16ba4:	adc	r3, r3, #0
   16ba8:	str	ip, [r2]
   16bac:	str	r3, [r2, #4]
   16bb0:	str	r0, [sp, #4]
   16bb4:	str	r1, [sp]
   16bb8:	ldr	r0, [pc, #80]	; 16c10 <init_token_boolean_op@@Base+0x88>
   16bbc:	add	r0, pc, r0
   16bc0:	ldr	r1, [r0, #8]
   16bc4:	ldr	r2, [r0, #12]
   16bc8:	adds	r1, r1, #1
   16bcc:	adc	r2, r2, #0
   16bd0:	str	r1, [r0, #8]
   16bd4:	str	r2, [r0, #12]
   16bd8:	ldr	r0, [sp, #4]
   16bdc:	str	r0, [sp, #12]
   16be0:	ldr	r1, [sp]
   16be4:	str	r1, [sp, #8]
   16be8:	ldr	r2, [sp, #12]
   16bec:	movw	r3, #12
   16bf0:	str	r3, [r2]
   16bf4:	ldr	r2, [sp, #8]
   16bf8:	ldr	r3, [sp, #12]
   16bfc:	str	r2, [r3, #4]
   16c00:	add	sp, sp, #16
   16c04:	bx	lr
   16c08:	andeq	r9, r1, r8, lsr ip
   16c0c:	andeq	r9, r1, ip, lsr #24
   16c10:	andeq	r9, r1, ip, lsl #24

00016c14 <free_token_int_type@@Base>:
   16c14:	push	{fp, lr}
   16c18:	mov	fp, sp
   16c1c:	sub	sp, sp, #8
   16c20:	ldr	r1, [pc, #92]	; 16c84 <free_token_int_type@@Base+0x70>
   16c24:	add	r1, pc, r1
   16c28:	ldr	r2, [r1, #4]
   16c2c:	ldr	r3, [pc, #84]	; 16c88 <free_token_int_type@@Base+0x74>
   16c30:	ldr	r3, [pc, r3]
   16c34:	adds	r3, r3, #1
   16c38:	adc	r2, r2, #0
   16c3c:	str	r3, [r1]
   16c40:	str	r2, [r1, #4]
   16c44:	str	r0, [sp]
   16c48:	ldr	r0, [pc, #60]	; 16c8c <free_token_int_type@@Base+0x78>
   16c4c:	add	r0, pc, r0
   16c50:	ldr	r1, [r0, #8]
   16c54:	ldr	r2, [r0, #12]
   16c58:	adds	r1, r1, #1
   16c5c:	adc	r2, r2, #0
   16c60:	str	r1, [r0, #8]
   16c64:	str	r2, [r0, #12]
   16c68:	ldr	r0, [sp]
   16c6c:	str	r0, [sp, #4]
   16c70:	ldr	r1, [sp, #4]
   16c74:	mov	r0, r1
   16c78:	bl	11dbc <free@plt>
   16c7c:	mov	sp, fp
   16c80:	pop	{fp, pc}
   16c84:			; <UNDEFINED> instruction: 0x00019bb4
   16c88:	andeq	r9, r1, r8, lsr #23
   16c8c:	andeq	r9, r1, ip, lsl #23

00016c90 <free_token_int_value@@Base>:
   16c90:	push	{fp, lr}
   16c94:	mov	fp, sp
   16c98:	sub	sp, sp, #8
   16c9c:	ldr	r1, [pc, #92]	; 16d00 <free_token_int_value@@Base+0x70>
   16ca0:	add	r1, pc, r1
   16ca4:	ldr	r2, [r1, #4]
   16ca8:	ldr	r3, [pc, #84]	; 16d04 <free_token_int_value@@Base+0x74>
   16cac:	ldr	r3, [pc, r3]
   16cb0:	adds	r3, r3, #1
   16cb4:	adc	r2, r2, #0
   16cb8:	str	r3, [r1]
   16cbc:	str	r2, [r1, #4]
   16cc0:	str	r0, [sp]
   16cc4:	ldr	r0, [pc, #60]	; 16d08 <free_token_int_value@@Base+0x78>
   16cc8:	add	r0, pc, r0
   16ccc:	ldr	r1, [r0, #8]
   16cd0:	ldr	r2, [r0, #12]
   16cd4:	adds	r1, r1, #1
   16cd8:	adc	r2, r2, #0
   16cdc:	str	r1, [r0, #8]
   16ce0:	str	r2, [r0, #12]
   16ce4:	ldr	r0, [sp]
   16ce8:	str	r0, [sp, #4]
   16cec:	ldr	r1, [sp, #4]
   16cf0:	mov	r0, r1
   16cf4:	bl	11dbc <free@plt>
   16cf8:	mov	sp, fp
   16cfc:	pop	{fp, pc}
   16d00:	andeq	r9, r1, r8, asr #22
   16d04:	andeq	r9, r1, ip, lsr fp
   16d08:	andeq	r9, r1, r0, lsr #22

00016d0c <free_token_function@@Base>:
   16d0c:	push	{fp, lr}
   16d10:	mov	fp, sp
   16d14:	sub	sp, sp, #8
   16d18:	ldr	r1, [pc, #92]	; 16d7c <free_token_function@@Base+0x70>
   16d1c:	add	r1, pc, r1
   16d20:	ldr	r2, [r1, #4]
   16d24:	ldr	r3, [pc, #84]	; 16d80 <free_token_function@@Base+0x74>
   16d28:	ldr	r3, [pc, r3]
   16d2c:	adds	r3, r3, #1
   16d30:	adc	r2, r2, #0
   16d34:	str	r3, [r1]
   16d38:	str	r2, [r1, #4]
   16d3c:	str	r0, [sp]
   16d40:	ldr	r0, [pc, #60]	; 16d84 <free_token_function@@Base+0x78>
   16d44:	add	r0, pc, r0
   16d48:	ldr	r1, [r0, #8]
   16d4c:	ldr	r2, [r0, #12]
   16d50:	adds	r1, r1, #1
   16d54:	adc	r2, r2, #0
   16d58:	str	r1, [r0, #8]
   16d5c:	str	r2, [r0, #12]
   16d60:	ldr	r0, [sp]
   16d64:	str	r0, [sp, #4]
   16d68:	ldr	r1, [sp, #4]
   16d6c:	mov	r0, r1
   16d70:	bl	11dbc <free@plt>
   16d74:	mov	sp, fp
   16d78:	pop	{fp, pc}
   16d7c:	ldrdeq	r9, [r1], -ip
   16d80:	ldrdeq	r9, [r1], -r0
   16d84:			; <UNDEFINED> instruction: 0x00019ab4

00016d88 <free_token_opar@@Base>:
   16d88:	push	{fp, lr}
   16d8c:	mov	fp, sp
   16d90:	sub	sp, sp, #8
   16d94:	ldr	r1, [pc, #92]	; 16df8 <free_token_opar@@Base+0x70>
   16d98:	add	r1, pc, r1
   16d9c:	ldr	r2, [r1, #4]
   16da0:	ldr	r3, [pc, #84]	; 16dfc <free_token_opar@@Base+0x74>
   16da4:	ldr	r3, [pc, r3]
   16da8:	adds	r3, r3, #1
   16dac:	adc	r2, r2, #0
   16db0:	str	r3, [r1]
   16db4:	str	r2, [r1, #4]
   16db8:	str	r0, [sp]
   16dbc:	ldr	r0, [pc, #60]	; 16e00 <free_token_opar@@Base+0x78>
   16dc0:	add	r0, pc, r0
   16dc4:	ldr	r1, [r0, #8]
   16dc8:	ldr	r2, [r0, #12]
   16dcc:	adds	r1, r1, #1
   16dd0:	adc	r2, r2, #0
   16dd4:	str	r1, [r0, #8]
   16dd8:	str	r2, [r0, #12]
   16ddc:	ldr	r0, [sp]
   16de0:	str	r0, [sp, #4]
   16de4:	ldr	r1, [sp, #4]
   16de8:	mov	r0, r1
   16dec:	bl	11dbc <free@plt>
   16df0:	mov	sp, fp
   16df4:	pop	{fp, pc}
   16df8:	andeq	r9, r1, r0, ror sl
   16dfc:	andeq	r9, r1, r4, ror #20
   16e00:	andeq	r9, r1, r8, asr #20

00016e04 <free_token_cpar@@Base>:
   16e04:	push	{fp, lr}
   16e08:	mov	fp, sp
   16e0c:	sub	sp, sp, #8
   16e10:	ldr	r1, [pc, #92]	; 16e74 <free_token_cpar@@Base+0x70>
   16e14:	add	r1, pc, r1
   16e18:	ldr	r2, [r1, #4]
   16e1c:	ldr	r3, [pc, #84]	; 16e78 <free_token_cpar@@Base+0x74>
   16e20:	ldr	r3, [pc, r3]
   16e24:	adds	r3, r3, #1
   16e28:	adc	r2, r2, #0
   16e2c:	str	r3, [r1]
   16e30:	str	r2, [r1, #4]
   16e34:	str	r0, [sp]
   16e38:	ldr	r0, [pc, #60]	; 16e7c <free_token_cpar@@Base+0x78>
   16e3c:	add	r0, pc, r0
   16e40:	ldr	r1, [r0, #8]
   16e44:	ldr	r2, [r0, #12]
   16e48:	adds	r1, r1, #1
   16e4c:	adc	r2, r2, #0
   16e50:	str	r1, [r0, #8]
   16e54:	str	r2, [r0, #12]
   16e58:	ldr	r0, [sp]
   16e5c:	str	r0, [sp, #4]
   16e60:	ldr	r1, [sp, #4]
   16e64:	mov	r0, r1
   16e68:	bl	11dbc <free@plt>
   16e6c:	mov	sp, fp
   16e70:	pop	{fp, pc}
   16e74:	andeq	r9, r1, r4, lsl #20
   16e78:	strdeq	r9, [r1], -r8
   16e7c:	ldrdeq	r9, [r1], -ip

00016e80 <free_token_obra@@Base>:
   16e80:	push	{fp, lr}
   16e84:	mov	fp, sp
   16e88:	sub	sp, sp, #8
   16e8c:	ldr	r1, [pc, #92]	; 16ef0 <free_token_obra@@Base+0x70>
   16e90:	add	r1, pc, r1
   16e94:	ldr	r2, [r1, #4]
   16e98:	ldr	r3, [pc, #84]	; 16ef4 <free_token_obra@@Base+0x74>
   16e9c:	ldr	r3, [pc, r3]
   16ea0:	adds	r3, r3, #1
   16ea4:	adc	r2, r2, #0
   16ea8:	str	r3, [r1]
   16eac:	str	r2, [r1, #4]
   16eb0:	str	r0, [sp]
   16eb4:	ldr	r0, [pc, #60]	; 16ef8 <free_token_obra@@Base+0x78>
   16eb8:	add	r0, pc, r0
   16ebc:	ldr	r1, [r0, #8]
   16ec0:	ldr	r2, [r0, #12]
   16ec4:	adds	r1, r1, #1
   16ec8:	adc	r2, r2, #0
   16ecc:	str	r1, [r0, #8]
   16ed0:	str	r2, [r0, #12]
   16ed4:	ldr	r0, [sp]
   16ed8:	str	r0, [sp, #4]
   16edc:	ldr	r1, [sp, #4]
   16ee0:	mov	r0, r1
   16ee4:	bl	11dbc <free@plt>
   16ee8:	mov	sp, fp
   16eec:	pop	{fp, pc}
   16ef0:	muleq	r1, r8, r9
   16ef4:	andeq	r9, r1, ip, lsl #19
   16ef8:	andeq	r9, r1, r0, ror r9

00016efc <free_token_cbra@@Base>:
   16efc:	push	{fp, lr}
   16f00:	mov	fp, sp
   16f04:	sub	sp, sp, #8
   16f08:	ldr	r1, [pc, #92]	; 16f6c <free_token_cbra@@Base+0x70>
   16f0c:	add	r1, pc, r1
   16f10:	ldr	r2, [r1, #4]
   16f14:	ldr	r3, [pc, #84]	; 16f70 <free_token_cbra@@Base+0x74>
   16f18:	ldr	r3, [pc, r3]
   16f1c:	adds	r3, r3, #1
   16f20:	adc	r2, r2, #0
   16f24:	str	r3, [r1]
   16f28:	str	r2, [r1, #4]
   16f2c:	str	r0, [sp]
   16f30:	ldr	r0, [pc, #60]	; 16f74 <free_token_cbra@@Base+0x78>
   16f34:	add	r0, pc, r0
   16f38:	ldr	r1, [r0, #8]
   16f3c:	ldr	r2, [r0, #12]
   16f40:	adds	r1, r1, #1
   16f44:	adc	r2, r2, #0
   16f48:	str	r1, [r0, #8]
   16f4c:	str	r2, [r0, #12]
   16f50:	ldr	r0, [sp]
   16f54:	str	r0, [sp, #4]
   16f58:	ldr	r1, [sp, #4]
   16f5c:	mov	r0, r1
   16f60:	bl	11dbc <free@plt>
   16f64:	mov	sp, fp
   16f68:	pop	{fp, pc}
   16f6c:	andeq	r9, r1, ip, lsr #18
   16f70:	andeq	r9, r1, r0, lsr #18
   16f74:	andeq	r9, r1, r4, lsl #18

00016f78 <free_token_return@@Base>:
   16f78:	push	{fp, lr}
   16f7c:	mov	fp, sp
   16f80:	sub	sp, sp, #8
   16f84:	ldr	r1, [pc, #92]	; 16fe8 <free_token_return@@Base+0x70>
   16f88:	add	r1, pc, r1
   16f8c:	ldr	r2, [r1, #4]
   16f90:	ldr	r3, [pc, #84]	; 16fec <free_token_return@@Base+0x74>
   16f94:	ldr	r3, [pc, r3]
   16f98:	adds	r3, r3, #1
   16f9c:	adc	r2, r2, #0
   16fa0:	str	r3, [r1]
   16fa4:	str	r2, [r1, #4]
   16fa8:	str	r0, [sp]
   16fac:	ldr	r0, [pc, #60]	; 16ff0 <free_token_return@@Base+0x78>
   16fb0:	add	r0, pc, r0
   16fb4:	ldr	r1, [r0, #8]
   16fb8:	ldr	r2, [r0, #12]
   16fbc:	adds	r1, r1, #1
   16fc0:	adc	r2, r2, #0
   16fc4:	str	r1, [r0, #8]
   16fc8:	str	r2, [r0, #12]
   16fcc:	ldr	r0, [sp]
   16fd0:	str	r0, [sp, #4]
   16fd4:	ldr	r1, [sp, #4]
   16fd8:	mov	r0, r1
   16fdc:	bl	11dbc <free@plt>
   16fe0:	mov	sp, fp
   16fe4:	pop	{fp, pc}
   16fe8:	andeq	r9, r1, r0, asr #17
   16fec:			; <UNDEFINED> instruction: 0x000198b4
   16ff0:	muleq	r1, r8, r8

00016ff4 <free_token_semicolon@@Base>:
   16ff4:	push	{fp, lr}
   16ff8:	mov	fp, sp
   16ffc:	sub	sp, sp, #8
   17000:	ldr	r1, [pc, #92]	; 17064 <free_token_semicolon@@Base+0x70>
   17004:	add	r1, pc, r1
   17008:	ldr	r2, [r1, #4]
   1700c:	ldr	r3, [pc, #84]	; 17068 <free_token_semicolon@@Base+0x74>
   17010:	ldr	r3, [pc, r3]
   17014:	adds	r3, r3, #1
   17018:	adc	r2, r2, #0
   1701c:	str	r3, [r1]
   17020:	str	r2, [r1, #4]
   17024:	str	r0, [sp]
   17028:	ldr	r0, [pc, #60]	; 1706c <free_token_semicolon@@Base+0x78>
   1702c:	add	r0, pc, r0
   17030:	ldr	r1, [r0, #8]
   17034:	ldr	r2, [r0, #12]
   17038:	adds	r1, r1, #1
   1703c:	adc	r2, r2, #0
   17040:	str	r1, [r0, #8]
   17044:	str	r2, [r0, #12]
   17048:	ldr	r0, [sp]
   1704c:	str	r0, [sp, #4]
   17050:	ldr	r1, [sp, #4]
   17054:	mov	r0, r1
   17058:	bl	11dbc <free@plt>
   1705c:	mov	sp, fp
   17060:	pop	{fp, pc}
   17064:	andeq	r9, r1, r4, asr r8
   17068:	andeq	r9, r1, r8, asr #16
   1706c:	andeq	r9, r1, ip, lsr #16

00017070 <free_token_eof@@Base>:
   17070:	push	{fp, lr}
   17074:	mov	fp, sp
   17078:	sub	sp, sp, #8
   1707c:	ldr	r1, [pc, #92]	; 170e0 <free_token_eof@@Base+0x70>
   17080:	add	r1, pc, r1
   17084:	ldr	r2, [r1, #4]
   17088:	ldr	r3, [pc, #84]	; 170e4 <free_token_eof@@Base+0x74>
   1708c:	ldr	r3, [pc, r3]
   17090:	adds	r3, r3, #1
   17094:	adc	r2, r2, #0
   17098:	str	r3, [r1]
   1709c:	str	r2, [r1, #4]
   170a0:	str	r0, [sp]
   170a4:	ldr	r0, [pc, #60]	; 170e8 <free_token_eof@@Base+0x78>
   170a8:	add	r0, pc, r0
   170ac:	ldr	r1, [r0, #8]
   170b0:	ldr	r2, [r0, #12]
   170b4:	adds	r1, r1, #1
   170b8:	adc	r2, r2, #0
   170bc:	str	r1, [r0, #8]
   170c0:	str	r2, [r0, #12]
   170c4:	ldr	r0, [sp]
   170c8:	str	r0, [sp, #4]
   170cc:	ldr	r1, [sp, #4]
   170d0:	mov	r0, r1
   170d4:	bl	11dbc <free@plt>
   170d8:	mov	sp, fp
   170dc:	pop	{fp, pc}
   170e0:	andeq	r9, r1, r8, ror #15
   170e4:	ldrdeq	r9, [r1], -ip
   170e8:	andeq	r9, r1, r0, asr #15

000170ec <free_token_if@@Base>:
   170ec:	push	{fp, lr}
   170f0:	mov	fp, sp
   170f4:	sub	sp, sp, #8
   170f8:	ldr	r1, [pc, #92]	; 1715c <free_token_if@@Base+0x70>
   170fc:	add	r1, pc, r1
   17100:	ldr	r2, [r1, #4]
   17104:	ldr	r3, [pc, #84]	; 17160 <free_token_if@@Base+0x74>
   17108:	ldr	r3, [pc, r3]
   1710c:	adds	r3, r3, #1
   17110:	adc	r2, r2, #0
   17114:	str	r3, [r1]
   17118:	str	r2, [r1, #4]
   1711c:	str	r0, [sp]
   17120:	ldr	r0, [pc, #60]	; 17164 <free_token_if@@Base+0x78>
   17124:	add	r0, pc, r0
   17128:	ldr	r1, [r0, #8]
   1712c:	ldr	r2, [r0, #12]
   17130:	adds	r1, r1, #1
   17134:	adc	r2, r2, #0
   17138:	str	r1, [r0, #8]
   1713c:	str	r2, [r0, #12]
   17140:	ldr	r0, [sp]
   17144:	str	r0, [sp, #4]
   17148:	ldr	r1, [sp, #4]
   1714c:	mov	r0, r1
   17150:	bl	11dbc <free@plt>
   17154:	mov	sp, fp
   17158:	pop	{fp, pc}
   1715c:	andeq	r9, r1, ip, ror r7
   17160:	andeq	r9, r1, r0, ror r7
   17164:	andeq	r9, r1, r4, asr r7

00017168 <free_token_else@@Base>:
   17168:	push	{fp, lr}
   1716c:	mov	fp, sp
   17170:	sub	sp, sp, #8
   17174:	ldr	r1, [pc, #92]	; 171d8 <free_token_else@@Base+0x70>
   17178:	add	r1, pc, r1
   1717c:	ldr	r2, [r1, #4]
   17180:	ldr	r3, [pc, #84]	; 171dc <free_token_else@@Base+0x74>
   17184:	ldr	r3, [pc, r3]
   17188:	adds	r3, r3, #1
   1718c:	adc	r2, r2, #0
   17190:	str	r3, [r1]
   17194:	str	r2, [r1, #4]
   17198:	str	r0, [sp]
   1719c:	ldr	r0, [pc, #60]	; 171e0 <free_token_else@@Base+0x78>
   171a0:	add	r0, pc, r0
   171a4:	ldr	r1, [r0, #8]
   171a8:	ldr	r2, [r0, #12]
   171ac:	adds	r1, r1, #1
   171b0:	adc	r2, r2, #0
   171b4:	str	r1, [r0, #8]
   171b8:	str	r2, [r0, #12]
   171bc:	ldr	r0, [sp]
   171c0:	str	r0, [sp, #4]
   171c4:	ldr	r1, [sp, #4]
   171c8:	mov	r0, r1
   171cc:	bl	11dbc <free@plt>
   171d0:	mov	sp, fp
   171d4:	pop	{fp, pc}
   171d8:	andeq	r9, r1, r0, lsl r7
   171dc:	andeq	r9, r1, r4, lsl #14
   171e0:	andeq	r9, r1, r8, ror #13

000171e4 <free_token_boolean_op@@Base>:
   171e4:	push	{fp, lr}
   171e8:	mov	fp, sp
   171ec:	sub	sp, sp, #8
   171f0:	ldr	r1, [pc, #204]	; 172c4 <free_token_boolean_op@@Base+0xe0>
   171f4:	add	r1, pc, r1
   171f8:	ldr	r2, [r1, #4]
   171fc:	ldr	r3, [pc, #196]	; 172c8 <free_token_boolean_op@@Base+0xe4>
   17200:	ldr	r3, [pc, r3]
   17204:	adds	r3, r3, #1
   17208:	adc	r2, r2, #0
   1720c:	str	r3, [r1]
   17210:	str	r2, [r1, #4]
   17214:	str	r0, [sp]
   17218:	ldr	r0, [sp]
   1721c:	str	r0, [sp, #4]
   17220:	ldr	r1, [sp, #4]
   17224:	ldr	r1, [r1, #4]
   17228:	cmp	r1, #0
   1722c:	mov	r2, r1
   17230:	movwne	r2, #1
   17234:	mov	r3, #16
   17238:	cmp	r1, #0
   1723c:	movwne	r3, #8
   17240:	ldr	r1, [pc, #132]	; 172cc <free_token_boolean_op@@Base+0xe8>
   17244:	add	r1, pc, r1
   17248:	ldr	r3, [r1, r3]!
   1724c:	ldr	ip, [r1, #4]
   17250:	adds	r3, r3, #1
   17254:	adc	ip, ip, #0
   17258:	str	r3, [r1]
   1725c:	str	ip, [r1, #4]
   17260:	tst	r2, #1
   17264:	beq	17294 <free_token_boolean_op@@Base+0xb0>
   17268:	ldr	r0, [pc, #96]	; 172d0 <free_token_boolean_op@@Base+0xec>
   1726c:	add	r0, pc, r0
   17270:	ldr	r1, [r0, #24]
   17274:	ldr	r2, [r0, #28]
   17278:	adds	r1, r1, #1
   1727c:	adc	r2, r2, #0
   17280:	str	r1, [r0, #24]
   17284:	str	r2, [r0, #28]
   17288:	ldr	r0, [sp, #4]
   1728c:	ldr	r0, [r0, #4]
   17290:	bl	11dbc <free@plt>
   17294:	ldr	r0, [pc, #56]	; 172d4 <free_token_boolean_op@@Base+0xf0>
   17298:	add	r0, pc, r0
   1729c:	ldr	r1, [r0, #32]
   172a0:	ldr	r2, [r0, #36]	; 0x24
   172a4:	adds	r1, r1, #1
   172a8:	adc	r2, r2, #0
   172ac:	str	r1, [r0, #32]
   172b0:	str	r2, [r0, #36]	; 0x24
   172b4:	ldr	r0, [sp, #4]
   172b8:	bl	11dbc <free@plt>
   172bc:	mov	sp, fp
   172c0:	pop	{fp, pc}
   172c4:	andeq	r9, r1, r4, lsr #13
   172c8:	muleq	r1, r8, r6
   172cc:	andeq	r9, r1, r4, asr r6
   172d0:	andeq	r9, r1, ip, lsr #12
   172d4:	andeq	r9, r1, r0, lsl #12
   172d8:	push	{r4, sl, fp, lr}
   172dc:	add	fp, sp, #8
   172e0:	sub	sp, sp, #40	; 0x28
   172e4:	movw	r0, #0
   172e8:	str	r0, [fp, #-12]
   172ec:	b	172f0 <free_token_boolean_op@@Base+0x10c>
   172f0:	ldr	r0, [fp, #-12]
   172f4:	ldr	r1, [pc, #244]	; 173f0 <free_token_boolean_op@@Base+0x20c>
   172f8:	add	r1, pc, r1
   172fc:	movw	r2, #24
   17300:	mul	r2, r0, r2
   17304:	add	r1, r1, r2
   17308:	ldr	r2, [r1]
   1730c:	ldr	r3, [r1, #4]
   17310:	ldr	ip, [r1, #8]
   17314:	str	r0, [fp, #-16]
   17318:	mov	r0, r2
   1731c:	str	r1, [fp, #-20]	; 0xffffffec
   17320:	mov	r1, r3
   17324:	mov	r2, ip
   17328:	bl	1ae34 <read_boolean_unary_expression@@Base+0x7d0>
   1732c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17330:	ldr	r1, [r0, #12]
   17334:	ldr	r2, [r0, #16]
   17338:	ldr	r3, [r0, #20]
   1733c:	movw	ip, #0
   17340:	cmp	ip, r1
   17344:	str	r1, [sp, #24]
   17348:	str	r2, [sp, #20]
   1734c:	str	r3, [sp, #16]
   17350:	str	ip, [sp, #12]
   17354:	bge	173cc <free_token_boolean_op@@Base+0x1e8>
   17358:	ldr	r0, [sp, #12]
   1735c:	add	r1, r0, r0, lsl #2
   17360:	ldr	r2, [sp, #20]
   17364:	ldr	r1, [r2, r1, lsl #2]!
   17368:	ldr	r3, [r2, #4]
   1736c:	ldr	ip, [r2, #8]
   17370:	ldr	lr, [r2, #16]
   17374:	ldrb	r2, [r2, #12]
   17378:	mov	r4, sp
   1737c:	str	lr, [r4]
   17380:	str	r0, [sp, #8]
   17384:	mov	r0, r1
   17388:	mov	r1, r3
   1738c:	str	r2, [sp, #4]
   17390:	mov	r2, ip
   17394:	ldr	r3, [sp, #4]
   17398:	bl	1b598 <read_boolean_unary_expression@@Base+0xf34>
   1739c:	ldr	r0, [sp, #16]
   173a0:	ldr	r1, [sp, #8]
   173a4:	add	r2, r0, r1, lsl #3
   173a8:	ldr	r0, [r2]
   173ac:	ldr	r1, [r2, #4]
   173b0:	bl	1be4c <read_boolean_unary_expression@@Base+0x17e8>
   173b4:	ldr	r0, [sp, #8]
   173b8:	add	r1, r0, #1
   173bc:	ldr	r2, [sp, #24]
   173c0:	cmp	r1, r2
   173c4:	str	r1, [sp, #12]
   173c8:	blt	17358 <free_token_boolean_op@@Base+0x174>
   173cc:	bl	1c5c8 <read_boolean_unary_expression@@Base+0x1f64>
   173d0:	bl	1d334 <read_boolean_unary_expression@@Base+0x2cd0>
   173d4:	ldr	lr, [fp, #-16]
   173d8:	add	r0, lr, #1
   173dc:	cmp	r0, #1
   173e0:	str	r0, [fp, #-12]
   173e4:	blt	172f0 <free_token_boolean_op@@Base+0x10c>
   173e8:	sub	sp, fp, #8
   173ec:	pop	{r4, sl, fp, pc}
   173f0:	andeq	r8, r1, r0, ror #16
   173f4:	push	{fp, lr}
   173f8:	mov	fp, sp
   173fc:	bl	172d8 <free_token_boolean_op@@Base+0xf4>
   17400:	ldr	lr, [pc, #648]	; 17690 <free_token_boolean_op@@Base+0x4ac>
   17404:	add	lr, pc, lr
   17408:	mov	r0, #0
   1740c:	str	r0, [lr, #12]
   17410:	str	r0, [lr, #8]
   17414:	str	r0, [lr, #4]
   17418:	str	r0, [lr]
   1741c:	ldr	lr, [pc, #624]	; 17694 <free_token_boolean_op@@Base+0x4b0>
   17420:	add	lr, pc, lr
   17424:	str	r0, [lr, #12]
   17428:	str	r0, [lr, #8]
   1742c:	str	r0, [lr, #4]
   17430:	str	r0, [lr]
   17434:	ldr	lr, [pc, #604]	; 17698 <free_token_boolean_op@@Base+0x4b4>
   17438:	add	lr, pc, lr
   1743c:	str	r0, [lr, #12]
   17440:	str	r0, [lr, #8]
   17444:	str	r0, [lr, #4]
   17448:	str	r0, [lr]
   1744c:	ldr	lr, [pc, #584]	; 1769c <free_token_boolean_op@@Base+0x4b8>
   17450:	add	lr, pc, lr
   17454:	str	r0, [lr, #12]
   17458:	str	r0, [lr, #8]
   1745c:	str	r0, [lr, #4]
   17460:	str	r0, [lr]
   17464:	ldr	lr, [pc, #564]	; 176a0 <free_token_boolean_op@@Base+0x4bc>
   17468:	add	lr, pc, lr
   1746c:	str	r0, [lr, #12]
   17470:	str	r0, [lr, #8]
   17474:	str	r0, [lr, #4]
   17478:	str	r0, [lr]
   1747c:	ldr	lr, [pc, #544]	; 176a4 <free_token_boolean_op@@Base+0x4c0>
   17480:	add	lr, pc, lr
   17484:	str	r0, [lr, #12]
   17488:	str	r0, [lr, #8]
   1748c:	str	r0, [lr, #4]
   17490:	str	r0, [lr]
   17494:	ldr	lr, [pc, #524]	; 176a8 <free_token_boolean_op@@Base+0x4c4>
   17498:	add	lr, pc, lr
   1749c:	str	r0, [lr, #12]
   174a0:	str	r0, [lr, #8]
   174a4:	str	r0, [lr, #4]
   174a8:	str	r0, [lr]
   174ac:	ldr	lr, [pc, #504]	; 176ac <free_token_boolean_op@@Base+0x4c8>
   174b0:	add	lr, pc, lr
   174b4:	str	r0, [lr, #12]
   174b8:	str	r0, [lr, #8]
   174bc:	str	r0, [lr, #4]
   174c0:	str	r0, [lr]
   174c4:	ldr	lr, [pc, #484]	; 176b0 <free_token_boolean_op@@Base+0x4cc>
   174c8:	add	lr, pc, lr
   174cc:	str	r0, [lr, #12]
   174d0:	str	r0, [lr, #8]
   174d4:	str	r0, [lr, #4]
   174d8:	str	r0, [lr]
   174dc:	ldr	lr, [pc, #464]	; 176b4 <free_token_boolean_op@@Base+0x4d0>
   174e0:	add	lr, pc, lr
   174e4:	str	r0, [lr, #12]
   174e8:	str	r0, [lr, #8]
   174ec:	str	r0, [lr, #4]
   174f0:	str	r0, [lr]
   174f4:	ldr	lr, [pc, #444]	; 176b8 <free_token_boolean_op@@Base+0x4d4>
   174f8:	add	lr, pc, lr
   174fc:	str	r0, [lr, #12]
   17500:	str	r0, [lr, #8]
   17504:	str	r0, [lr, #4]
   17508:	str	r0, [lr]
   1750c:	ldr	lr, [pc, #424]	; 176bc <free_token_boolean_op@@Base+0x4d8>
   17510:	add	lr, pc, lr
   17514:	str	r0, [lr, #12]
   17518:	str	r0, [lr, #8]
   1751c:	str	r0, [lr, #4]
   17520:	str	r0, [lr]
   17524:	ldr	lr, [pc, #404]	; 176c0 <free_token_boolean_op@@Base+0x4dc>
   17528:	add	lr, pc, lr
   1752c:	str	r0, [lr, #12]
   17530:	str	r0, [lr, #8]
   17534:	str	r0, [lr, #4]
   17538:	str	r0, [lr]
   1753c:	ldr	lr, [pc, #384]	; 176c4 <free_token_boolean_op@@Base+0x4e0>
   17540:	add	lr, pc, lr
   17544:	str	r0, [lr, #12]
   17548:	str	r0, [lr, #8]
   1754c:	str	r0, [lr, #4]
   17550:	str	r0, [lr]
   17554:	ldr	lr, [pc, #364]	; 176c8 <free_token_boolean_op@@Base+0x4e4>
   17558:	add	lr, pc, lr
   1755c:	str	r0, [lr, #12]
   17560:	str	r0, [lr, #8]
   17564:	str	r0, [lr, #4]
   17568:	str	r0, [lr]
   1756c:	ldr	lr, [pc, #344]	; 176cc <free_token_boolean_op@@Base+0x4e8>
   17570:	add	lr, pc, lr
   17574:	str	r0, [lr, #12]
   17578:	str	r0, [lr, #8]
   1757c:	str	r0, [lr, #4]
   17580:	str	r0, [lr]
   17584:	ldr	lr, [pc, #324]	; 176d0 <free_token_boolean_op@@Base+0x4ec>
   17588:	add	lr, pc, lr
   1758c:	str	r0, [lr, #12]
   17590:	str	r0, [lr, #8]
   17594:	str	r0, [lr, #4]
   17598:	str	r0, [lr]
   1759c:	ldr	lr, [pc, #304]	; 176d4 <free_token_boolean_op@@Base+0x4f0>
   175a0:	add	lr, pc, lr
   175a4:	str	r0, [lr, #12]
   175a8:	str	r0, [lr, #8]
   175ac:	str	r0, [lr, #4]
   175b0:	str	r0, [lr]
   175b4:	ldr	lr, [pc, #284]	; 176d8 <free_token_boolean_op@@Base+0x4f4>
   175b8:	add	lr, pc, lr
   175bc:	str	r0, [lr, #12]
   175c0:	str	r0, [lr, #8]
   175c4:	str	r0, [lr, #4]
   175c8:	str	r0, [lr]
   175cc:	ldr	lr, [pc, #264]	; 176dc <free_token_boolean_op@@Base+0x4f8>
   175d0:	add	lr, pc, lr
   175d4:	str	r0, [lr, #12]
   175d8:	str	r0, [lr, #8]
   175dc:	str	r0, [lr, #4]
   175e0:	str	r0, [lr]
   175e4:	ldr	lr, [pc, #244]	; 176e0 <free_token_boolean_op@@Base+0x4fc>
   175e8:	add	lr, pc, lr
   175ec:	str	r0, [lr, #12]
   175f0:	str	r0, [lr, #8]
   175f4:	str	r0, [lr, #4]
   175f8:	str	r0, [lr]
   175fc:	ldr	lr, [pc, #224]	; 176e4 <free_token_boolean_op@@Base+0x500>
   17600:	add	lr, pc, lr
   17604:	str	r0, [lr, #12]
   17608:	str	r0, [lr, #8]
   1760c:	str	r0, [lr, #4]
   17610:	str	r0, [lr]
   17614:	ldr	lr, [pc, #204]	; 176e8 <free_token_boolean_op@@Base+0x504>
   17618:	add	lr, pc, lr
   1761c:	str	r0, [lr, #12]
   17620:	str	r0, [lr, #8]
   17624:	str	r0, [lr, #4]
   17628:	str	r0, [lr]
   1762c:	ldr	lr, [pc, #184]	; 176ec <free_token_boolean_op@@Base+0x508>
   17630:	add	lr, pc, lr
   17634:	str	r0, [lr, #12]
   17638:	str	r0, [lr, #8]
   1763c:	str	r0, [lr, #4]
   17640:	str	r0, [lr]
   17644:	ldr	lr, [pc, #164]	; 176f0 <free_token_boolean_op@@Base+0x50c>
   17648:	add	lr, pc, lr
   1764c:	str	r0, [lr, #12]
   17650:	str	r0, [lr, #8]
   17654:	str	r0, [lr, #4]
   17658:	str	r0, [lr]
   1765c:	ldr	lr, [pc, #144]	; 176f4 <free_token_boolean_op@@Base+0x510>
   17660:	add	lr, pc, lr
   17664:	str	r0, [lr, #36]	; 0x24
   17668:	str	r0, [lr, #32]
   1766c:	str	r0, [lr, #28]
   17670:	str	r0, [lr, #24]
   17674:	str	r0, [lr, #20]
   17678:	str	r0, [lr, #16]
   1767c:	str	r0, [lr, #12]
   17680:	str	r0, [lr, #8]
   17684:	str	r0, [lr, #4]
   17688:	str	r0, [lr]
   1768c:	pop	{fp, pc}
   17690:	andeq	r9, r1, r4, lsl #6
   17694:	strdeq	r9, [r1], -r8
   17698:	strdeq	r9, [r1], -r0
   1769c:	andeq	r9, r1, r8, ror #5
   176a0:	andeq	r9, r1, r0, ror #5
   176a4:	ldrdeq	r9, [r1], -r8
   176a8:	ldrdeq	r9, [r1], -r0
   176ac:	andeq	r9, r1, r8, asr #5
   176b0:	andeq	r9, r1, r0, asr #5
   176b4:			; <UNDEFINED> instruction: 0x000192b8
   176b8:			; <UNDEFINED> instruction: 0x000192b0
   176bc:	andeq	r9, r1, r8, lsr #5
   176c0:	andeq	r9, r1, r0, lsr #5
   176c4:	muleq	r1, r8, r2
   176c8:	muleq	r1, r0, r2
   176cc:	andeq	r9, r1, r8, lsl #5
   176d0:	andeq	r9, r1, r0, lsl #5
   176d4:	andeq	r9, r1, r8, ror r2
   176d8:	andeq	r9, r1, r0, ror r2
   176dc:	andeq	r9, r1, r8, ror #4
   176e0:	andeq	r9, r1, r0, ror #4
   176e4:	andeq	r9, r1, r8, asr r2
   176e8:	andeq	r9, r1, r0, asr r2
   176ec:	andeq	r9, r1, r8, asr #4
   176f0:	andeq	r9, r1, r0, asr #4
   176f4:	andeq	r9, r1, r8, lsr r2
   176f8:	push	{fp, lr}
   176fc:	mov	fp, sp
   17700:	ldr	r0, [pc, #16]	; 17718 <free_token_boolean_op@@Base+0x534>
   17704:	add	r0, pc, r0
   17708:	ldr	r1, [pc, #12]	; 1771c <free_token_boolean_op@@Base+0x538>
   1770c:	add	r1, pc, r1
   17710:	bl	1d7e4 <__gcov_flush@@Base+0xb4>
   17714:	pop	{fp, pc}
   17718:			; <UNDEFINED> instruction: 0xfffffbcc
   1771c:			; <UNDEFINED> instruction: 0xfffffce0

00017720 <init_ast_base@@Base>:
   17720:	push	{fp, lr}
   17724:	mov	fp, sp
   17728:	sub	sp, sp, #24
   1772c:	ldr	r3, [pc, #128]	; 177b4 <init_ast_base@@Base+0x94>
   17730:	add	r3, pc, r3
   17734:	ldr	ip, [r3, #4]
   17738:	ldr	lr, [pc, #120]	; 177b8 <init_ast_base@@Base+0x98>
   1773c:	ldr	lr, [pc, lr]
   17740:	adds	lr, lr, #1
   17744:	adc	ip, ip, #0
   17748:	str	lr, [r3]
   1774c:	str	ip, [r3, #4]
   17750:	str	r1, [sp, #8]
   17754:	str	r0, [sp, #4]
   17758:	str	r2, [sp]
   1775c:	ldr	r0, [pc, #88]	; 177bc <init_ast_base@@Base+0x9c>
   17760:	add	r0, pc, r0
   17764:	ldr	r1, [r0, #8]
   17768:	ldr	r2, [r0, #12]
   1776c:	adds	r1, r1, #1
   17770:	adc	r2, r2, #0
   17774:	str	r1, [r0, #8]
   17778:	str	r2, [r0, #12]
   1777c:	ldr	r0, [sp, #4]
   17780:	str	r0, [fp, #-4]
   17784:	ldr	r1, [sp, #8]
   17788:	str	r1, [fp, #-8]
   1778c:	ldr	r2, [sp]
   17790:	str	r2, [sp, #12]
   17794:	ldr	r3, [fp, #-8]
   17798:	ldr	ip, [fp, #-4]
   1779c:	str	r3, [ip]
   177a0:	ldr	r3, [sp, #12]
   177a4:	ldr	ip, [fp, #-4]
   177a8:	str	r3, [ip, #4]
   177ac:	mov	sp, fp
   177b0:	pop	{fp, pc}
   177b4:	muleq	r1, r8, r1
   177b8:	andeq	r9, r1, ip, lsl #3
   177bc:	andeq	r9, r1, r8, ror #2

000177c0 <init_ast_base_single@@Base>:
   177c0:	push	{fp, lr}
   177c4:	mov	fp, sp
   177c8:	sub	sp, sp, #16
   177cc:	ldr	r2, [pc, #108]	; 17840 <init_ast_base_single@@Base+0x80>
   177d0:	add	r2, pc, r2
   177d4:	ldr	r3, [r2, #4]
   177d8:	ldr	ip, [pc, #100]	; 17844 <init_ast_base_single@@Base+0x84>
   177dc:	ldr	ip, [pc, ip]
   177e0:	adds	ip, ip, #1
   177e4:	adc	r3, r3, #0
   177e8:	str	ip, [r2]
   177ec:	str	r3, [r2, #4]
   177f0:	str	r0, [sp, #4]
   177f4:	str	r1, [sp]
   177f8:	ldr	r0, [pc, #72]	; 17848 <init_ast_base_single@@Base+0x88>
   177fc:	add	r0, pc, r0
   17800:	ldr	r1, [r0, #8]
   17804:	ldr	r2, [r0, #12]
   17808:	adds	r1, r1, #1
   1780c:	adc	r2, r2, #0
   17810:	str	r1, [r0, #8]
   17814:	str	r2, [r0, #12]
   17818:	ldr	r0, [sp, #4]
   1781c:	str	r0, [fp, #-4]
   17820:	ldr	r1, [sp]
   17824:	str	r1, [sp, #8]
   17828:	ldr	r0, [fp, #-4]
   1782c:	ldr	r1, [sp, #8]
   17830:	movw	r2, #0
   17834:	bl	17720 <init_ast_base@@Base>
   17838:	mov	sp, fp
   1783c:	pop	{fp, pc}
   17840:	andeq	r9, r1, r8, lsl #2
   17844:	strdeq	r9, [r1], -ip
   17848:	ldrdeq	r9, [r1], -ip

0001784c <init_node_id@@Base>:
   1784c:	push	{fp, lr}
   17850:	mov	fp, sp
   17854:	sub	sp, sp, #16
   17858:	ldr	r2, [pc, #116]	; 178d4 <init_node_id@@Base+0x88>
   1785c:	add	r2, pc, r2
   17860:	ldr	r3, [r2, #4]
   17864:	ldr	ip, [pc, #108]	; 178d8 <init_node_id@@Base+0x8c>
   17868:	ldr	ip, [pc, ip]
   1786c:	adds	ip, ip, #1
   17870:	adc	r3, r3, #0
   17874:	str	ip, [r2]
   17878:	str	r3, [r2, #4]
   1787c:	str	r0, [sp, #4]
   17880:	str	r1, [sp]
   17884:	ldr	r0, [pc, #80]	; 178dc <init_node_id@@Base+0x90>
   17888:	add	r0, pc, r0
   1788c:	ldr	r1, [r0, #8]
   17890:	ldr	r2, [r0, #12]
   17894:	adds	r1, r1, #1
   17898:	adc	r2, r2, #0
   1789c:	str	r1, [r0, #8]
   178a0:	str	r2, [r0, #12]
   178a4:	ldr	r0, [sp, #4]
   178a8:	str	r0, [fp, #-4]
   178ac:	ldr	r1, [sp]
   178b0:	str	r1, [sp, #8]
   178b4:	ldr	r0, [fp, #-4]
   178b8:	movw	r1, #0
   178bc:	bl	177c0 <init_ast_base_single@@Base>
   178c0:	ldr	r0, [sp, #8]
   178c4:	ldr	r1, [fp, #-4]
   178c8:	str	r0, [r1, #8]
   178cc:	mov	sp, fp
   178d0:	pop	{fp, pc}
   178d4:	andeq	r9, r1, ip, lsl #1
   178d8:	andeq	r9, r1, r0, lsl #1
   178dc:	andeq	r9, r1, r0, rrx

000178e0 <init_node_int@@Base>:
   178e0:	push	{fp, lr}
   178e4:	mov	fp, sp
   178e8:	sub	sp, sp, #16
   178ec:	ldr	r2, [pc, #116]	; 17968 <init_node_int@@Base+0x88>
   178f0:	add	r2, pc, r2
   178f4:	ldr	r3, [r2, #4]
   178f8:	ldr	ip, [pc, #108]	; 1796c <init_node_int@@Base+0x8c>
   178fc:	ldr	ip, [pc, ip]
   17900:	adds	ip, ip, #1
   17904:	adc	r3, r3, #0
   17908:	str	ip, [r2]
   1790c:	str	r3, [r2, #4]
   17910:	str	r0, [sp, #4]
   17914:	str	r1, [sp]
   17918:	ldr	r0, [pc, #80]	; 17970 <init_node_int@@Base+0x90>
   1791c:	add	r0, pc, r0
   17920:	ldr	r1, [r0, #8]
   17924:	ldr	r2, [r0, #12]
   17928:	adds	r1, r1, #1
   1792c:	adc	r2, r2, #0
   17930:	str	r1, [r0, #8]
   17934:	str	r2, [r0, #12]
   17938:	ldr	r0, [sp, #4]
   1793c:	str	r0, [fp, #-4]
   17940:	ldr	r1, [sp]
   17944:	str	r1, [sp, #8]
   17948:	ldr	r0, [fp, #-4]
   1794c:	movw	r1, #1
   17950:	bl	177c0 <init_ast_base_single@@Base>
   17954:	ldr	r0, [sp, #8]
   17958:	ldr	r1, [fp, #-4]
   1795c:	str	r0, [r1, #8]
   17960:	mov	sp, fp
   17964:	pop	{fp, pc}
   17968:	andeq	r9, r1, r8
   1796c:	strdeq	r8, [r1], -ip
   17970:	ldrdeq	r8, [r1], -ip

00017974 <init_node_function@@Base>:
   17974:	push	{fp, lr}
   17978:	mov	fp, sp
   1797c:	sub	sp, sp, #24
   17980:	ldr	r3, [pc, #140]	; 17a14 <init_node_function@@Base+0xa0>
   17984:	add	r3, pc, r3
   17988:	ldr	ip, [r3, #4]
   1798c:	ldr	lr, [pc, #132]	; 17a18 <init_node_function@@Base+0xa4>
   17990:	ldr	lr, [pc, lr]
   17994:	adds	lr, lr, #1
   17998:	adc	ip, ip, #0
   1799c:	str	lr, [r3]
   179a0:	str	ip, [r3, #4]
   179a4:	str	r1, [sp, #8]
   179a8:	str	r0, [sp, #4]
   179ac:	str	r2, [sp]
   179b0:	ldr	r0, [pc, #100]	; 17a1c <init_node_function@@Base+0xa8>
   179b4:	add	r0, pc, r0
   179b8:	ldr	r1, [r0, #8]
   179bc:	ldr	r2, [r0, #12]
   179c0:	adds	r1, r1, #1
   179c4:	adc	r2, r2, #0
   179c8:	str	r1, [r0, #8]
   179cc:	str	r2, [r0, #12]
   179d0:	ldr	r0, [sp, #4]
   179d4:	str	r0, [fp, #-4]
   179d8:	ldr	r1, [sp, #8]
   179dc:	str	r1, [fp, #-8]
   179e0:	ldr	r2, [sp]
   179e4:	str	r2, [sp, #12]
   179e8:	ldr	r0, [fp, #-4]
   179ec:	movw	r1, #2
   179f0:	bl	177c0 <init_ast_base_single@@Base>
   179f4:	ldr	r0, [fp, #-8]
   179f8:	ldr	r1, [fp, #-4]
   179fc:	str	r0, [r1, #8]
   17a00:	ldr	r0, [sp, #12]
   17a04:	ldr	r1, [fp, #-4]
   17a08:	str	r0, [r1, #12]
   17a0c:	mov	sp, fp
   17a10:	pop	{fp, pc}
   17a14:	andeq	r8, r1, r4, lsl #31
   17a18:	andeq	r8, r1, r8, ror pc
   17a1c:	andeq	r8, r1, r4, asr pc

00017a20 <init_node_return@@Base>:
   17a20:	push	{fp, lr}
   17a24:	mov	fp, sp
   17a28:	sub	sp, sp, #16
   17a2c:	ldr	r2, [pc, #116]	; 17aa8 <init_node_return@@Base+0x88>
   17a30:	add	r2, pc, r2
   17a34:	ldr	r3, [r2, #4]
   17a38:	ldr	ip, [pc, #108]	; 17aac <init_node_return@@Base+0x8c>
   17a3c:	ldr	ip, [pc, ip]
   17a40:	adds	ip, ip, #1
   17a44:	adc	r3, r3, #0
   17a48:	str	ip, [r2]
   17a4c:	str	r3, [r2, #4]
   17a50:	str	r0, [sp, #4]
   17a54:	str	r1, [sp]
   17a58:	ldr	r0, [pc, #80]	; 17ab0 <init_node_return@@Base+0x90>
   17a5c:	add	r0, pc, r0
   17a60:	ldr	r1, [r0, #8]
   17a64:	ldr	r2, [r0, #12]
   17a68:	adds	r1, r1, #1
   17a6c:	adc	r2, r2, #0
   17a70:	str	r1, [r0, #8]
   17a74:	str	r2, [r0, #12]
   17a78:	ldr	r0, [sp, #4]
   17a7c:	str	r0, [fp, #-4]
   17a80:	ldr	r1, [sp]
   17a84:	str	r1, [sp, #8]
   17a88:	ldr	r0, [fp, #-4]
   17a8c:	movw	r1, #3
   17a90:	bl	177c0 <init_ast_base_single@@Base>
   17a94:	ldr	r0, [sp, #8]
   17a98:	ldr	r1, [fp, #-4]
   17a9c:	str	r0, [r1, #8]
   17aa0:	mov	sp, fp
   17aa4:	pop	{fp, pc}
   17aa8:	andeq	r8, r1, r8, ror #29
   17aac:	ldrdeq	r8, [r1], -ip
   17ab0:			; <UNDEFINED> instruction: 0x00018ebc

00017ab4 <init_node_if@@Base>:
   17ab4:	push	{r4, sl, fp, lr}
   17ab8:	add	fp, sp, #8
   17abc:	sub	sp, sp, #32
   17ac0:	ldr	ip, [pc, #164]	; 17b6c <init_node_if@@Base+0xb8>
   17ac4:	add	ip, pc, ip
   17ac8:	ldr	lr, [ip, #4]
   17acc:	ldr	r4, [pc, #156]	; 17b70 <init_node_if@@Base+0xbc>
   17ad0:	ldr	r4, [pc, r4]
   17ad4:	adds	r4, r4, #1
   17ad8:	adc	lr, lr, #0
   17adc:	str	r4, [ip]
   17ae0:	str	lr, [ip, #4]
   17ae4:	str	r2, [sp, #12]
   17ae8:	str	r1, [sp, #8]
   17aec:	str	r0, [sp, #4]
   17af0:	str	r3, [sp]
   17af4:	ldr	r0, [pc, #120]	; 17b74 <init_node_if@@Base+0xc0>
   17af8:	add	r0, pc, r0
   17afc:	ldr	r1, [r0, #8]
   17b00:	ldr	r2, [r0, #12]
   17b04:	adds	r1, r1, #1
   17b08:	adc	r2, r2, #0
   17b0c:	str	r1, [r0, #8]
   17b10:	str	r2, [r0, #12]
   17b14:	ldr	r0, [sp, #4]
   17b18:	str	r0, [fp, #-12]
   17b1c:	ldr	r1, [sp, #8]
   17b20:	str	r1, [fp, #-16]
   17b24:	ldr	r2, [sp, #12]
   17b28:	str	r2, [sp, #20]
   17b2c:	ldr	r3, [sp]
   17b30:	str	r3, [sp, #16]
   17b34:	ldr	r0, [fp, #-12]
   17b38:	movw	r1, #4
   17b3c:	bl	177c0 <init_ast_base_single@@Base>
   17b40:	ldr	r0, [fp, #-16]
   17b44:	ldr	r1, [fp, #-12]
   17b48:	str	r0, [r1, #8]
   17b4c:	ldr	r0, [sp, #20]
   17b50:	ldr	r1, [fp, #-12]
   17b54:	str	r0, [r1, #12]
   17b58:	ldr	r0, [sp, #16]
   17b5c:	ldr	r1, [fp, #-12]
   17b60:	str	r0, [r1, #16]
   17b64:	sub	sp, fp, #8
   17b68:	pop	{r4, sl, fp, pc}
   17b6c:	andeq	r8, r1, r4, ror #28
   17b70:	andeq	r8, r1, r8, asr lr
   17b74:	andeq	r8, r1, r0, lsr lr

00017b78 <init_node_boolean_operator@@Base>:
   17b78:	push	{r4, sl, fp, lr}
   17b7c:	add	fp, sp, #8
   17b80:	sub	sp, sp, #32
   17b84:	ldr	ip, [pc, #176]	; 17c3c <init_node_boolean_operator@@Base+0xc4>
   17b88:	add	ip, pc, ip
   17b8c:	ldr	lr, [ip, #4]
   17b90:	ldr	r4, [pc, #168]	; 17c40 <init_node_boolean_operator@@Base+0xc8>
   17b94:	ldr	r4, [pc, r4]
   17b98:	adds	r4, r4, #1
   17b9c:	adc	lr, lr, #0
   17ba0:	str	r4, [ip]
   17ba4:	str	lr, [ip, #4]
   17ba8:	str	r2, [sp, #12]
   17bac:	str	r1, [sp, #8]
   17bb0:	str	r0, [sp, #4]
   17bb4:	str	r3, [sp]
   17bb8:	ldr	r0, [pc, #132]	; 17c44 <init_node_boolean_operator@@Base+0xcc>
   17bbc:	add	r0, pc, r0
   17bc0:	ldr	r1, [r0, #8]
   17bc4:	ldr	r2, [r0, #12]
   17bc8:	adds	r1, r1, #1
   17bcc:	adc	r2, r2, #0
   17bd0:	str	r1, [r0, #8]
   17bd4:	str	r2, [r0, #12]
   17bd8:	ldr	r0, [sp, #4]
   17bdc:	str	r0, [fp, #-12]
   17be0:	ldr	r1, [sp, #8]
   17be4:	str	r1, [fp, #-16]
   17be8:	ldr	r2, [sp, #12]
   17bec:	str	r2, [sp, #20]
   17bf0:	ldr	r3, [sp]
   17bf4:	str	r3, [sp, #16]
   17bf8:	ldr	r0, [fp, #-12]
   17bfc:	movw	r1, #0
   17c00:	bl	177c0 <init_ast_base_single@@Base>
   17c04:	ldr	r0, [fp, #-12]
   17c08:	movw	r1, #5
   17c0c:	str	r1, [r0]
   17c10:	ldr	r0, [fp, #-16]
   17c14:	ldr	r1, [fp, #-12]
   17c18:	str	r0, [r1, #16]
   17c1c:	ldr	r0, [sp, #20]
   17c20:	ldr	r1, [fp, #-12]
   17c24:	str	r0, [r1, #8]
   17c28:	ldr	r0, [sp, #16]
   17c2c:	ldr	r1, [fp, #-12]
   17c30:	str	r0, [r1, #12]
   17c34:	sub	sp, fp, #8
   17c38:	pop	{r4, sl, fp, pc}
   17c3c:			; <UNDEFINED> instruction: 0x00018db0
   17c40:	andeq	r8, r1, r4, lsr #27
   17c44:	andeq	r8, r1, ip, ror sp

00017c48 <free_node@@Base>:
   17c48:	push	{fp, lr}
   17c4c:	mov	fp, sp
   17c50:	sub	sp, sp, #16
   17c54:	ldr	r1, [pc, #640]	; 17edc <free_node@@Base+0x294>
   17c58:	add	r1, pc, r1
   17c5c:	ldr	r2, [r1, #4]
   17c60:	ldr	r3, [pc, #632]	; 17ee0 <free_node@@Base+0x298>
   17c64:	ldr	r3, [pc, r3]
   17c68:	adds	r3, r3, #1
   17c6c:	adc	r2, r2, #0
   17c70:	str	r3, [r1]
   17c74:	str	r2, [r1, #4]
   17c78:	str	r0, [sp, #8]
   17c7c:	ldr	r0, [pc, #608]	; 17ee4 <free_node@@Base+0x29c>
   17c80:	add	r0, pc, r0
   17c84:	mov	r1, #0
   17c88:	str	r1, [r0]
   17c8c:	ldr	r0, [sp, #8]
   17c90:	str	r0, [fp, #-4]
   17c94:	ldr	r1, [fp, #-4]
   17c98:	ldr	r1, [r1]
   17c9c:	cmp	r1, #5
   17ca0:	str	r1, [sp, #4]
   17ca4:	bhi	17e68 <free_node@@Base+0x220>
   17ca8:	add	r0, pc, #8
   17cac:	ldr	r1, [sp, #4]
   17cb0:	ldr	r2, [r0, r1, lsl #2]
   17cb4:	add	pc, r0, r2
   17cb8:	andeq	r0, r0, r8, lsl r0
   17cbc:	andeq	r0, r0, ip, asr r0
   17cc0:	andeq	r0, r0, r0, lsr #1
   17cc4:	andeq	r0, r0, r4, ror #1
   17cc8:	andeq	r0, r0, r8, lsr #2
   17ccc:	andeq	r0, r0, ip, ror #2
   17cd0:	ldr	r0, [pc, #528]	; 17ee8 <free_node@@Base+0x2a0>
   17cd4:	add	r0, pc, r0
   17cd8:	add	r1, r0, #4
   17cdc:	ldr	r0, [pc, #520]	; 17eec <free_node@@Base+0x2a4>
   17ce0:	add	r0, pc, r0
   17ce4:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17ce8:	ldr	r0, [pc, #512]	; 17ef0 <free_node@@Base+0x2a8>
   17cec:	add	r0, pc, r0
   17cf0:	ldr	r1, [r0, #64]	; 0x40
   17cf4:	ldr	lr, [r0, #68]	; 0x44
   17cf8:	adds	r1, r1, #1
   17cfc:	adc	lr, lr, #0
   17d00:	str	r1, [r0, #64]	; 0x40
   17d04:	str	lr, [r0, #68]	; 0x44
   17d08:	ldr	r0, [fp, #-4]
   17d0c:	bl	17f34 <free_node_id@@Base>
   17d10:	b	17ea4 <free_node@@Base+0x25c>
   17d14:	ldr	r0, [pc, #472]	; 17ef4 <free_node@@Base+0x2ac>
   17d18:	add	r0, pc, r0
   17d1c:	add	r1, r0, #8
   17d20:	ldr	r0, [pc, #464]	; 17ef8 <free_node@@Base+0x2b0>
   17d24:	add	r0, pc, r0
   17d28:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17d2c:	ldr	r0, [pc, #456]	; 17efc <free_node@@Base+0x2b4>
   17d30:	add	r0, pc, r0
   17d34:	ldr	r1, [r0, #72]	; 0x48
   17d38:	ldr	lr, [r0, #76]	; 0x4c
   17d3c:	adds	r1, r1, #1
   17d40:	adc	lr, lr, #0
   17d44:	str	r1, [r0, #72]	; 0x48
   17d48:	str	lr, [r0, #76]	; 0x4c
   17d4c:	ldr	r0, [fp, #-4]
   17d50:	bl	18028 <free_node_int@@Base>
   17d54:	b	17ea4 <free_node@@Base+0x25c>
   17d58:	ldr	r0, [pc, #416]	; 17f00 <free_node@@Base+0x2b8>
   17d5c:	add	r0, pc, r0
   17d60:	add	r1, r0, #12
   17d64:	ldr	r0, [pc, #408]	; 17f04 <free_node@@Base+0x2bc>
   17d68:	add	r0, pc, r0
   17d6c:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17d70:	ldr	r0, [pc, #400]	; 17f08 <free_node@@Base+0x2c0>
   17d74:	add	r0, pc, r0
   17d78:	ldr	r1, [r0, #80]	; 0x50
   17d7c:	ldr	lr, [r0, #84]	; 0x54
   17d80:	adds	r1, r1, #1
   17d84:	adc	lr, lr, #0
   17d88:	str	r1, [r0, #80]	; 0x50
   17d8c:	str	lr, [r0, #84]	; 0x54
   17d90:	ldr	r0, [fp, #-4]
   17d94:	bl	1811c <free_node_function@@Base>
   17d98:	b	17ea4 <free_node@@Base+0x25c>
   17d9c:	ldr	r0, [pc, #360]	; 17f0c <free_node@@Base+0x2c4>
   17da0:	add	r0, pc, r0
   17da4:	add	r1, r0, #16
   17da8:	ldr	r0, [pc, #352]	; 17f10 <free_node@@Base+0x2c8>
   17dac:	add	r0, pc, r0
   17db0:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17db4:	ldr	r0, [pc, #344]	; 17f14 <free_node@@Base+0x2cc>
   17db8:	add	r0, pc, r0
   17dbc:	ldr	r1, [r0, #88]	; 0x58
   17dc0:	ldr	lr, [r0, #92]	; 0x5c
   17dc4:	adds	r1, r1, #1
   17dc8:	adc	lr, lr, #0
   17dcc:	str	r1, [r0, #88]	; 0x58
   17dd0:	str	lr, [r0, #92]	; 0x5c
   17dd4:	ldr	r0, [fp, #-4]
   17dd8:	bl	1821c <free_node_return@@Base>
   17ddc:	b	17ea4 <free_node@@Base+0x25c>
   17de0:	ldr	r0, [pc, #304]	; 17f18 <free_node@@Base+0x2d0>
   17de4:	add	r0, pc, r0
   17de8:	add	r1, r0, #20
   17dec:	ldr	r0, [pc, #296]	; 17f1c <free_node@@Base+0x2d4>
   17df0:	add	r0, pc, r0
   17df4:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17df8:	ldr	r0, [pc, #288]	; 17f20 <free_node@@Base+0x2d8>
   17dfc:	add	r0, pc, r0
   17e00:	ldr	r1, [r0, #96]	; 0x60
   17e04:	ldr	lr, [r0, #100]	; 0x64
   17e08:	adds	r1, r1, #1
   17e0c:	adc	lr, lr, #0
   17e10:	str	r1, [r0, #96]	; 0x60
   17e14:	str	lr, [r0, #100]	; 0x64
   17e18:	ldr	r0, [fp, #-4]
   17e1c:	bl	18310 <free_node_if@@Base>
   17e20:	b	17ea4 <free_node@@Base+0x25c>
   17e24:	ldr	r0, [pc, #248]	; 17f24 <free_node@@Base+0x2dc>
   17e28:	add	r0, pc, r0
   17e2c:	add	r1, r0, #24
   17e30:	ldr	r0, [pc, #240]	; 17f28 <free_node@@Base+0x2e0>
   17e34:	add	r0, pc, r0
   17e38:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17e3c:	ldr	r0, [pc, #232]	; 17f2c <free_node@@Base+0x2e4>
   17e40:	add	r0, pc, r0
   17e44:	ldr	r1, [r0, #104]	; 0x68
   17e48:	ldr	lr, [r0, #108]	; 0x6c
   17e4c:	adds	r1, r1, #1
   17e50:	adc	lr, lr, #0
   17e54:	str	r1, [r0, #104]	; 0x68
   17e58:	str	lr, [r0, #108]	; 0x6c
   17e5c:	ldr	r0, [fp, #-4]
   17e60:	bl	18428 <free_node_boolean_operator@@Base>
   17e64:	b	17ea4 <free_node@@Base+0x25c>
   17e68:	ldr	r0, [pc, #100]	; 17ed4 <free_node@@Base+0x28c>
   17e6c:	add	r0, pc, r0
   17e70:	ldr	r1, [pc, #96]	; 17ed8 <free_node@@Base+0x290>
   17e74:	add	r1, pc, r1
   17e78:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   17e7c:	ldr	r0, [pc, #72]	; 17ecc <free_node@@Base+0x284>
   17e80:	add	r1, pc, r0
   17e84:	ldr	r0, [pc, #68]	; 17ed0 <free_node@@Base+0x288>
   17e88:	ldr	r0, [pc, r0]
   17e8c:	ldr	r0, [r0]
   17e90:	bl	11e94 <fprintf@plt>
   17e94:	movw	r1, #1
   17e98:	str	r0, [sp]
   17e9c:	mov	r0, r1
   17ea0:	bl	11e70 <exit@plt>
   17ea4:	ldr	r0, [pc, #132]	; 17f30 <free_node@@Base+0x2e8>
   17ea8:	add	r0, pc, r0
   17eac:	ldr	r1, [r0, #112]	; 0x70
   17eb0:	ldr	r2, [r0, #116]	; 0x74
   17eb4:	adds	r1, r1, #1
   17eb8:	adc	r2, r2, #0
   17ebc:	str	r1, [r0, #112]	; 0x70
   17ec0:	str	r2, [r0, #116]	; 0x74
   17ec4:	mov	sp, fp
   17ec8:	pop	{fp, pc}
   17ecc:			; <UNDEFINED> instruction: 0x00006ab8
   17ed0:	andeq	r8, r1, ip, lsr #4
   17ed4:	andeq	r8, r1, ip, ror #4
   17ed8:	andeq	r7, r1, r4, lsl #26
   17edc:	strdeq	r8, [r1], -r0
   17ee0:	andeq	r8, r1, r4, ror #25
   17ee4:	andeq	r8, r1, r8, asr r4
   17ee8:	andeq	r7, r1, r4, lsr #29
   17eec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ef0:	andeq	r8, r1, ip, asr ip
   17ef4:	andeq	r7, r1, r0, ror #28
   17ef8:			; <UNDEFINED> instruction: 0x000183b4
   17efc:	andeq	r8, r1, r8, lsl ip
   17f00:	andeq	r7, r1, ip, lsl lr
   17f04:	andeq	r8, r1, r0, ror r3
   17f08:	ldrdeq	r8, [r1], -r4
   17f0c:	ldrdeq	r7, [r1], -r8
   17f10:	andeq	r8, r1, ip, lsr #6
   17f14:	muleq	r1, r0, fp
   17f18:	muleq	r1, r4, sp
   17f1c:	andeq	r8, r1, r8, ror #5
   17f20:	andeq	r8, r1, ip, asr #22
   17f24:	andeq	r7, r1, r0, asr sp
   17f28:	andeq	r8, r1, r4, lsr #5
   17f2c:	andeq	r8, r1, r8, lsl #22
   17f30:	andeq	r8, r1, r0, lsr #21

00017f34 <free_node_id@@Base>:
   17f34:	push	{fp, lr}
   17f38:	mov	fp, sp
   17f3c:	sub	sp, sp, #8
   17f40:	ldr	r1, [pc, #204]	; 18014 <free_node_id@@Base+0xe0>
   17f44:	add	r1, pc, r1
   17f48:	ldr	r2, [r1, #4]
   17f4c:	ldr	r3, [pc, #196]	; 18018 <free_node_id@@Base+0xe4>
   17f50:	ldr	r3, [pc, r3]
   17f54:	adds	r3, r3, #1
   17f58:	adc	r2, r2, #0
   17f5c:	str	r3, [r1]
   17f60:	str	r2, [r1, #4]
   17f64:	str	r0, [sp]
   17f68:	ldr	r0, [sp]
   17f6c:	str	r0, [sp, #4]
   17f70:	ldr	r1, [sp, #4]
   17f74:	ldr	r1, [r1, #4]
   17f78:	cmp	r1, #0
   17f7c:	mov	r2, r1
   17f80:	movwne	r2, #1
   17f84:	mov	r3, #16
   17f88:	cmp	r1, #0
   17f8c:	movwne	r3, #8
   17f90:	ldr	r1, [pc, #132]	; 1801c <free_node_id@@Base+0xe8>
   17f94:	add	r1, pc, r1
   17f98:	ldr	r3, [r1, r3]!
   17f9c:	ldr	ip, [r1, #4]
   17fa0:	adds	r3, r3, #1
   17fa4:	adc	ip, ip, #0
   17fa8:	str	r3, [r1]
   17fac:	str	ip, [r1, #4]
   17fb0:	tst	r2, #1
   17fb4:	beq	17fe4 <free_node_id@@Base+0xb0>
   17fb8:	ldr	r0, [pc, #96]	; 18020 <free_node_id@@Base+0xec>
   17fbc:	add	r0, pc, r0
   17fc0:	ldr	r1, [r0, #24]
   17fc4:	ldr	r2, [r0, #28]
   17fc8:	adds	r1, r1, #1
   17fcc:	adc	r2, r2, #0
   17fd0:	str	r1, [r0, #24]
   17fd4:	str	r2, [r0, #28]
   17fd8:	ldr	r0, [sp, #4]
   17fdc:	ldr	r0, [r0, #4]
   17fe0:	bl	17c48 <free_node@@Base>
   17fe4:	ldr	r0, [pc, #56]	; 18024 <free_node_id@@Base+0xf0>
   17fe8:	add	r0, pc, r0
   17fec:	ldr	r1, [r0, #32]
   17ff0:	ldr	r2, [r0, #36]	; 0x24
   17ff4:	adds	r1, r1, #1
   17ff8:	adc	r2, r2, #0
   17ffc:	str	r1, [r0, #32]
   18000:	str	r2, [r0, #36]	; 0x24
   18004:	ldr	r0, [sp, #4]
   18008:	bl	11dbc <free@plt>
   1800c:	mov	sp, fp
   18010:	pop	{fp, pc}
   18014:	andeq	r8, r1, r4, lsl #21
   18018:	andeq	r8, r1, r8, ror sl
   1801c:	andeq	r8, r1, r4, lsr sl
   18020:	andeq	r8, r1, ip, lsl #20
   18024:	andeq	r8, r1, r0, ror #19

00018028 <free_node_int@@Base>:
   18028:	push	{fp, lr}
   1802c:	mov	fp, sp
   18030:	sub	sp, sp, #8
   18034:	ldr	r1, [pc, #204]	; 18108 <free_node_int@@Base+0xe0>
   18038:	add	r1, pc, r1
   1803c:	ldr	r2, [r1, #4]
   18040:	ldr	r3, [pc, #196]	; 1810c <free_node_int@@Base+0xe4>
   18044:	ldr	r3, [pc, r3]
   18048:	adds	r3, r3, #1
   1804c:	adc	r2, r2, #0
   18050:	str	r3, [r1]
   18054:	str	r2, [r1, #4]
   18058:	str	r0, [sp]
   1805c:	ldr	r0, [sp]
   18060:	str	r0, [sp, #4]
   18064:	ldr	r1, [sp, #4]
   18068:	ldr	r1, [r1, #4]
   1806c:	cmp	r1, #0
   18070:	mov	r2, r1
   18074:	movwne	r2, #1
   18078:	mov	r3, #16
   1807c:	cmp	r1, #0
   18080:	movwne	r3, #8
   18084:	ldr	r1, [pc, #132]	; 18110 <free_node_int@@Base+0xe8>
   18088:	add	r1, pc, r1
   1808c:	ldr	r3, [r1, r3]!
   18090:	ldr	ip, [r1, #4]
   18094:	adds	r3, r3, #1
   18098:	adc	ip, ip, #0
   1809c:	str	r3, [r1]
   180a0:	str	ip, [r1, #4]
   180a4:	tst	r2, #1
   180a8:	beq	180d8 <free_node_int@@Base+0xb0>
   180ac:	ldr	r0, [pc, #96]	; 18114 <free_node_int@@Base+0xec>
   180b0:	add	r0, pc, r0
   180b4:	ldr	r1, [r0, #24]
   180b8:	ldr	r2, [r0, #28]
   180bc:	adds	r1, r1, #1
   180c0:	adc	r2, r2, #0
   180c4:	str	r1, [r0, #24]
   180c8:	str	r2, [r0, #28]
   180cc:	ldr	r0, [sp, #4]
   180d0:	ldr	r0, [r0, #4]
   180d4:	bl	17c48 <free_node@@Base>
   180d8:	ldr	r0, [pc, #56]	; 18118 <free_node_int@@Base+0xf0>
   180dc:	add	r0, pc, r0
   180e0:	ldr	r1, [r0, #32]
   180e4:	ldr	r2, [r0, #36]	; 0x24
   180e8:	adds	r1, r1, #1
   180ec:	adc	r2, r2, #0
   180f0:	str	r1, [r0, #32]
   180f4:	str	r2, [r0, #36]	; 0x24
   180f8:	ldr	r0, [sp, #4]
   180fc:	bl	11dbc <free@plt>
   18100:	mov	sp, fp
   18104:	pop	{fp, pc}
   18108:	andeq	r8, r1, r0, asr #19
   1810c:			; <UNDEFINED> instruction: 0x000189b4
   18110:	andeq	r8, r1, r0, ror r9
   18114:	andeq	r8, r1, r8, asr #18
   18118:	andeq	r8, r1, ip, lsl r9

0001811c <free_node_function@@Base>:
   1811c:	push	{fp, lr}
   18120:	mov	fp, sp
   18124:	sub	sp, sp, #8
   18128:	ldr	r1, [pc, #216]	; 18208 <free_node_function@@Base+0xec>
   1812c:	add	r1, pc, r1
   18130:	ldr	r2, [r1, #4]
   18134:	ldr	r3, [pc, #208]	; 1820c <free_node_function@@Base+0xf0>
   18138:	ldr	r3, [pc, r3]
   1813c:	adds	r3, r3, #1
   18140:	adc	r2, r2, #0
   18144:	str	r3, [r1]
   18148:	str	r2, [r1, #4]
   1814c:	str	r0, [sp]
   18150:	ldr	r0, [sp]
   18154:	str	r0, [sp, #4]
   18158:	ldr	r1, [sp, #4]
   1815c:	ldr	r1, [r1, #4]
   18160:	cmp	r1, #0
   18164:	mov	r2, r1
   18168:	movwne	r2, #1
   1816c:	mov	r3, #16
   18170:	cmp	r1, #0
   18174:	movwne	r3, #8
   18178:	ldr	r1, [pc, #144]	; 18210 <free_node_function@@Base+0xf4>
   1817c:	add	r1, pc, r1
   18180:	ldr	r3, [r1, r3]!
   18184:	ldr	ip, [r1, #4]
   18188:	adds	r3, r3, #1
   1818c:	adc	ip, ip, #0
   18190:	str	r3, [r1]
   18194:	str	ip, [r1, #4]
   18198:	tst	r2, #1
   1819c:	beq	181cc <free_node_function@@Base+0xb0>
   181a0:	ldr	r0, [pc, #108]	; 18214 <free_node_function@@Base+0xf8>
   181a4:	add	r0, pc, r0
   181a8:	ldr	r1, [r0, #24]
   181ac:	ldr	r2, [r0, #28]
   181b0:	adds	r1, r1, #1
   181b4:	adc	r2, r2, #0
   181b8:	str	r1, [r0, #24]
   181bc:	str	r2, [r0, #28]
   181c0:	ldr	r0, [sp, #4]
   181c4:	ldr	r0, [r0, #4]
   181c8:	bl	17c48 <free_node@@Base>
   181cc:	ldr	r0, [pc, #68]	; 18218 <free_node_function@@Base+0xfc>
   181d0:	add	r0, pc, r0
   181d4:	ldr	r1, [r0, #32]
   181d8:	ldr	r2, [r0, #36]	; 0x24
   181dc:	adds	r1, r1, #1
   181e0:	adc	r2, r2, #0
   181e4:	str	r1, [r0, #32]
   181e8:	str	r2, [r0, #36]	; 0x24
   181ec:	ldr	r0, [sp, #4]
   181f0:	ldr	r0, [r0, #8]
   181f4:	bl	11dbc <free@plt>
   181f8:	ldr	r0, [sp, #4]
   181fc:	bl	11dbc <free@plt>
   18200:	mov	sp, fp
   18204:	pop	{fp, pc}
   18208:	strdeq	r8, [r1], -ip
   1820c:	strdeq	r8, [r1], -r0
   18210:	andeq	r8, r1, ip, lsr #17
   18214:	andeq	r8, r1, r4, lsl #17
   18218:	andeq	r8, r1, r8, asr r8

0001821c <free_node_return@@Base>:
   1821c:	push	{fp, lr}
   18220:	mov	fp, sp
   18224:	sub	sp, sp, #8
   18228:	ldr	r1, [pc, #204]	; 182fc <free_node_return@@Base+0xe0>
   1822c:	add	r1, pc, r1
   18230:	ldr	r2, [r1, #4]
   18234:	ldr	r3, [pc, #196]	; 18300 <free_node_return@@Base+0xe4>
   18238:	ldr	r3, [pc, r3]
   1823c:	adds	r3, r3, #1
   18240:	adc	r2, r2, #0
   18244:	str	r3, [r1]
   18248:	str	r2, [r1, #4]
   1824c:	str	r0, [sp]
   18250:	ldr	r0, [sp]
   18254:	str	r0, [sp, #4]
   18258:	ldr	r1, [sp, #4]
   1825c:	ldr	r1, [r1, #4]
   18260:	cmp	r1, #0
   18264:	mov	r2, r1
   18268:	movwne	r2, #1
   1826c:	mov	r3, #16
   18270:	cmp	r1, #0
   18274:	movwne	r3, #8
   18278:	ldr	r1, [pc, #132]	; 18304 <free_node_return@@Base+0xe8>
   1827c:	add	r1, pc, r1
   18280:	ldr	r3, [r1, r3]!
   18284:	ldr	ip, [r1, #4]
   18288:	adds	r3, r3, #1
   1828c:	adc	ip, ip, #0
   18290:	str	r3, [r1]
   18294:	str	ip, [r1, #4]
   18298:	tst	r2, #1
   1829c:	beq	182cc <free_node_return@@Base+0xb0>
   182a0:	ldr	r0, [pc, #96]	; 18308 <free_node_return@@Base+0xec>
   182a4:	add	r0, pc, r0
   182a8:	ldr	r1, [r0, #24]
   182ac:	ldr	r2, [r0, #28]
   182b0:	adds	r1, r1, #1
   182b4:	adc	r2, r2, #0
   182b8:	str	r1, [r0, #24]
   182bc:	str	r2, [r0, #28]
   182c0:	ldr	r0, [sp, #4]
   182c4:	ldr	r0, [r0, #4]
   182c8:	bl	17c48 <free_node@@Base>
   182cc:	ldr	r0, [pc, #56]	; 1830c <free_node_return@@Base+0xf0>
   182d0:	add	r0, pc, r0
   182d4:	ldr	r1, [r0, #32]
   182d8:	ldr	r2, [r0, #36]	; 0x24
   182dc:	adds	r1, r1, #1
   182e0:	adc	r2, r2, #0
   182e4:	str	r1, [r0, #32]
   182e8:	str	r2, [r0, #36]	; 0x24
   182ec:	ldr	r0, [sp, #4]
   182f0:	bl	11dbc <free@plt>
   182f4:	mov	sp, fp
   182f8:	pop	{fp, pc}
   182fc:	andeq	r8, r1, ip, lsr #16
   18300:	andeq	r8, r1, r0, lsr #16
   18304:	ldrdeq	r8, [r1], -ip
   18308:			; <UNDEFINED> instruction: 0x000187b4
   1830c:	andeq	r8, r1, r8, lsl #15

00018310 <free_node_if@@Base>:
   18310:	push	{fp, lr}
   18314:	mov	fp, sp
   18318:	sub	sp, sp, #8
   1831c:	ldr	r1, [pc, #240]	; 18414 <free_node_if@@Base+0x104>
   18320:	add	r1, pc, r1
   18324:	ldr	r2, [r1, #4]
   18328:	ldr	r3, [pc, #232]	; 18418 <free_node_if@@Base+0x108>
   1832c:	ldr	r3, [pc, r3]
   18330:	adds	r3, r3, #1
   18334:	adc	r2, r2, #0
   18338:	str	r3, [r1]
   1833c:	str	r2, [r1, #4]
   18340:	str	r0, [sp]
   18344:	ldr	r0, [sp]
   18348:	str	r0, [sp, #4]
   1834c:	ldr	r1, [sp, #4]
   18350:	ldr	r1, [r1, #4]
   18354:	cmp	r1, #0
   18358:	mov	r2, r1
   1835c:	movwne	r2, #1
   18360:	mov	r3, #16
   18364:	cmp	r1, #0
   18368:	movwne	r3, #8
   1836c:	ldr	r1, [pc, #168]	; 1841c <free_node_if@@Base+0x10c>
   18370:	add	r1, pc, r1
   18374:	ldr	r3, [r1, r3]!
   18378:	ldr	ip, [r1, #4]
   1837c:	adds	r3, r3, #1
   18380:	adc	ip, ip, #0
   18384:	str	r3, [r1]
   18388:	str	ip, [r1, #4]
   1838c:	tst	r2, #1
   18390:	beq	183c0 <free_node_if@@Base+0xb0>
   18394:	ldr	r0, [pc, #132]	; 18420 <free_node_if@@Base+0x110>
   18398:	add	r0, pc, r0
   1839c:	ldr	r1, [r0, #24]
   183a0:	ldr	r2, [r0, #28]
   183a4:	adds	r1, r1, #1
   183a8:	adc	r2, r2, #0
   183ac:	str	r1, [r0, #24]
   183b0:	str	r2, [r0, #28]
   183b4:	ldr	r0, [sp, #4]
   183b8:	ldr	r0, [r0, #4]
   183bc:	bl	17c48 <free_node@@Base>
   183c0:	ldr	r0, [pc, #92]	; 18424 <free_node_if@@Base+0x114>
   183c4:	add	r0, pc, r0
   183c8:	ldr	r1, [r0, #32]
   183cc:	ldr	r2, [r0, #36]	; 0x24
   183d0:	adds	r1, r1, #1
   183d4:	adc	r2, r2, #0
   183d8:	str	r1, [r0, #32]
   183dc:	str	r2, [r0, #36]	; 0x24
   183e0:	ldr	r0, [sp, #4]
   183e4:	ldr	r0, [r0, #8]
   183e8:	bl	17c48 <free_node@@Base>
   183ec:	ldr	r0, [sp, #4]
   183f0:	ldr	r0, [r0, #12]
   183f4:	bl	17c48 <free_node@@Base>
   183f8:	ldr	r0, [sp, #4]
   183fc:	ldr	r0, [r0, #16]
   18400:	bl	17c48 <free_node@@Base>
   18404:	ldr	r0, [sp, #4]
   18408:	bl	11dbc <free@plt>
   1840c:	mov	sp, fp
   18410:	pop	{fp, pc}
   18414:	andeq	r8, r1, r8, ror #14
   18418:	andeq	r8, r1, ip, asr r7
   1841c:	andeq	r8, r1, r8, lsl r7
   18420:	strdeq	r8, [r1], -r0
   18424:	andeq	r8, r1, r4, asr #13

00018428 <free_node_boolean_operator@@Base>:
   18428:	push	{fp, lr}
   1842c:	mov	fp, sp
   18430:	sub	sp, sp, #8
   18434:	ldr	r1, [pc, #228]	; 18520 <free_node_boolean_operator@@Base+0xf8>
   18438:	add	r1, pc, r1
   1843c:	ldr	r2, [r1, #4]
   18440:	ldr	r3, [pc, #220]	; 18524 <free_node_boolean_operator@@Base+0xfc>
   18444:	ldr	r3, [pc, r3]
   18448:	adds	r3, r3, #1
   1844c:	adc	r2, r2, #0
   18450:	str	r3, [r1]
   18454:	str	r2, [r1, #4]
   18458:	str	r0, [sp]
   1845c:	ldr	r0, [sp]
   18460:	str	r0, [sp, #4]
   18464:	ldr	r1, [sp, #4]
   18468:	ldr	r1, [r1, #4]
   1846c:	cmp	r1, #0
   18470:	mov	r2, r1
   18474:	movwne	r2, #1
   18478:	mov	r3, #16
   1847c:	cmp	r1, #0
   18480:	movwne	r3, #8
   18484:	ldr	r1, [pc, #156]	; 18528 <free_node_boolean_operator@@Base+0x100>
   18488:	add	r1, pc, r1
   1848c:	ldr	r3, [r1, r3]!
   18490:	ldr	ip, [r1, #4]
   18494:	adds	r3, r3, #1
   18498:	adc	ip, ip, #0
   1849c:	str	r3, [r1]
   184a0:	str	ip, [r1, #4]
   184a4:	tst	r2, #1
   184a8:	beq	184d8 <free_node_boolean_operator@@Base+0xb0>
   184ac:	ldr	r0, [pc, #120]	; 1852c <free_node_boolean_operator@@Base+0x104>
   184b0:	add	r0, pc, r0
   184b4:	ldr	r1, [r0, #24]
   184b8:	ldr	r2, [r0, #28]
   184bc:	adds	r1, r1, #1
   184c0:	adc	r2, r2, #0
   184c4:	str	r1, [r0, #24]
   184c8:	str	r2, [r0, #28]
   184cc:	ldr	r0, [sp, #4]
   184d0:	ldr	r0, [r0, #4]
   184d4:	bl	17c48 <free_node@@Base>
   184d8:	ldr	r0, [pc, #80]	; 18530 <free_node_boolean_operator@@Base+0x108>
   184dc:	add	r0, pc, r0
   184e0:	ldr	r1, [r0, #32]
   184e4:	ldr	r2, [r0, #36]	; 0x24
   184e8:	adds	r1, r1, #1
   184ec:	adc	r2, r2, #0
   184f0:	str	r1, [r0, #32]
   184f4:	str	r2, [r0, #36]	; 0x24
   184f8:	ldr	r0, [sp, #4]
   184fc:	ldr	r0, [r0, #8]
   18500:	bl	17c48 <free_node@@Base>
   18504:	ldr	r0, [sp, #4]
   18508:	ldr	r0, [r0, #12]
   1850c:	bl	17c48 <free_node@@Base>
   18510:	ldr	r0, [sp, #4]
   18514:	bl	11dbc <free@plt>
   18518:	mov	sp, fp
   1851c:	pop	{fp, pc}
   18520:	andeq	r8, r1, r0, lsl #13
   18524:	andeq	r8, r1, r4, ror r6
   18528:	andeq	r8, r1, r0, lsr r6
   1852c:	andeq	r8, r1, r8, lsl #12
   18530:	ldrdeq	r8, [r1], -ip

00018534 <get_boolean_op_value@@Base>:
   18534:	push	{fp, lr}
   18538:	mov	fp, sp
   1853c:	sub	sp, sp, #32
   18540:	ldr	r1, [pc, #1364]	; 18a9c <get_boolean_op_value@@Base+0x568>
   18544:	add	r1, pc, r1
   18548:	ldr	r2, [r1, #4]
   1854c:	ldr	r3, [pc, #1356]	; 18aa0 <get_boolean_op_value@@Base+0x56c>
   18550:	ldr	r3, [pc, r3]
   18554:	adds	r3, r3, #1
   18558:	adc	r2, r2, #0
   1855c:	str	r3, [r1]
   18560:	str	r2, [r1, #4]
   18564:	str	r0, [sp, #16]
   18568:	ldr	r0, [sp, #16]
   1856c:	str	r0, [fp, #-8]
   18570:	ldr	r1, [fp, #-8]
   18574:	ldr	r0, [r1, #4]
   18578:	mov	r1, #2
   1857c:	bl	11ef4 <strnlen@plt>
   18580:	str	r0, [fp, #-12]
   18584:	ldr	r0, [fp, #-12]
   18588:	sub	r1, r0, #2
   1858c:	clz	r1, r1
   18590:	lsr	r1, r1, #5
   18594:	mov	lr, #16
   18598:	cmp	r0, #2
   1859c:	movweq	lr, #8
   185a0:	ldr	r0, [pc, #1276]	; 18aa4 <get_boolean_op_value@@Base+0x570>
   185a4:	add	r0, pc, r0
   185a8:	ldr	lr, [r0, lr]!
   185ac:	ldr	r2, [r0, #4]
   185b0:	adds	lr, lr, #1
   185b4:	adc	r2, r2, #0
   185b8:	str	lr, [r0]
   185bc:	str	r2, [r0, #4]
   185c0:	tst	r1, #1
   185c4:	beq	188f8 <get_boolean_op_value@@Base+0x3c4>
   185c8:	ldr	r0, [fp, #-8]
   185cc:	ldr	r0, [r0, #4]
   185d0:	ldr	r1, [pc, #1232]	; 18aa8 <get_boolean_op_value@@Base+0x574>
   185d4:	add	r1, pc, r1
   185d8:	mov	r2, #2
   185dc:	bl	11f3c <strncmp@plt>
   185e0:	clz	r1, r0
   185e4:	lsr	r1, r1, #5
   185e8:	mov	r2, #32
   185ec:	cmp	r0, #0
   185f0:	movweq	r2, #24
   185f4:	ldr	r0, [pc, #1200]	; 18aac <get_boolean_op_value@@Base+0x578>
   185f8:	add	r0, pc, r0
   185fc:	ldr	r2, [r0, r2]!
   18600:	ldr	lr, [r0, #4]
   18604:	adds	r2, r2, #1
   18608:	adc	lr, lr, #0
   1860c:	str	r2, [r0]
   18610:	str	lr, [r0, #4]
   18614:	tst	r1, #1
   18618:	beq	18648 <get_boolean_op_value@@Base+0x114>
   1861c:	ldr	r0, [pc, #1164]	; 18ab0 <get_boolean_op_value@@Base+0x57c>
   18620:	add	r0, pc, r0
   18624:	ldr	r1, [r0, #40]	; 0x28
   18628:	ldr	r2, [r0, #44]	; 0x2c
   1862c:	adds	r1, r1, #1
   18630:	adc	r2, r2, #0
   18634:	str	r1, [r0, #40]	; 0x28
   18638:	str	r2, [r0, #44]	; 0x2c
   1863c:	movw	r0, #0
   18640:	str	r0, [fp, #-4]
   18644:	b	18a58 <get_boolean_op_value@@Base+0x524>
   18648:	ldr	r0, [fp, #-8]
   1864c:	ldr	r0, [r0, #4]
   18650:	ldr	r1, [pc, #1116]	; 18ab4 <get_boolean_op_value@@Base+0x580>
   18654:	add	r1, pc, r1
   18658:	mov	r2, #2
   1865c:	bl	11f3c <strncmp@plt>
   18660:	clz	r1, r0
   18664:	lsr	r1, r1, #5
   18668:	mov	r2, #56	; 0x38
   1866c:	cmp	r0, #0
   18670:	movweq	r2, #48	; 0x30
   18674:	ldr	r0, [pc, #1084]	; 18ab8 <get_boolean_op_value@@Base+0x584>
   18678:	add	r0, pc, r0
   1867c:	ldr	r2, [r0, r2]!
   18680:	ldr	lr, [r0, #4]
   18684:	adds	r2, r2, #1
   18688:	adc	lr, lr, #0
   1868c:	str	r2, [r0]
   18690:	str	lr, [r0, #4]
   18694:	tst	r1, #1
   18698:	beq	186c8 <get_boolean_op_value@@Base+0x194>
   1869c:	ldr	r0, [pc, #1048]	; 18abc <get_boolean_op_value@@Base+0x588>
   186a0:	add	r0, pc, r0
   186a4:	ldr	r1, [r0, #64]	; 0x40
   186a8:	ldr	r2, [r0, #68]	; 0x44
   186ac:	adds	r1, r1, #1
   186b0:	adc	r2, r2, #0
   186b4:	str	r1, [r0, #64]	; 0x40
   186b8:	str	r2, [r0, #68]	; 0x44
   186bc:	movw	r0, #1
   186c0:	str	r0, [fp, #-4]
   186c4:	b	18a58 <get_boolean_op_value@@Base+0x524>
   186c8:	ldr	r0, [fp, #-8]
   186cc:	ldr	r0, [r0, #4]
   186d0:	ldr	r1, [pc, #1000]	; 18ac0 <get_boolean_op_value@@Base+0x58c>
   186d4:	add	r1, pc, r1
   186d8:	mov	r2, #2
   186dc:	bl	11f3c <strncmp@plt>
   186e0:	clz	r1, r0
   186e4:	lsr	r1, r1, #5
   186e8:	mov	r2, #80	; 0x50
   186ec:	cmp	r0, #0
   186f0:	movweq	r2, #72	; 0x48
   186f4:	ldr	r0, [pc, #968]	; 18ac4 <get_boolean_op_value@@Base+0x590>
   186f8:	add	r0, pc, r0
   186fc:	ldr	r2, [r0, r2]!
   18700:	ldr	lr, [r0, #4]
   18704:	adds	r2, r2, #1
   18708:	adc	lr, lr, #0
   1870c:	str	r2, [r0]
   18710:	str	lr, [r0, #4]
   18714:	tst	r1, #1
   18718:	beq	18748 <get_boolean_op_value@@Base+0x214>
   1871c:	ldr	r0, [pc, #932]	; 18ac8 <get_boolean_op_value@@Base+0x594>
   18720:	add	r0, pc, r0
   18724:	ldr	r1, [r0, #88]	; 0x58
   18728:	ldr	r2, [r0, #92]	; 0x5c
   1872c:	adds	r1, r1, #1
   18730:	adc	r2, r2, #0
   18734:	str	r1, [r0, #88]	; 0x58
   18738:	str	r2, [r0, #92]	; 0x5c
   1873c:	movw	r0, #2
   18740:	str	r0, [fp, #-4]
   18744:	b	18a58 <get_boolean_op_value@@Base+0x524>
   18748:	ldr	r0, [fp, #-8]
   1874c:	ldr	r0, [r0, #4]
   18750:	ldr	r1, [pc, #884]	; 18acc <get_boolean_op_value@@Base+0x598>
   18754:	add	r1, pc, r1
   18758:	mov	r2, #2
   1875c:	bl	11f3c <strncmp@plt>
   18760:	clz	r1, r0
   18764:	lsr	r1, r1, #5
   18768:	mov	r2, #104	; 0x68
   1876c:	cmp	r0, #0
   18770:	movweq	r2, #96	; 0x60
   18774:	ldr	r0, [pc, #852]	; 18ad0 <get_boolean_op_value@@Base+0x59c>
   18778:	add	r0, pc, r0
   1877c:	ldr	r2, [r0, r2]!
   18780:	ldr	lr, [r0, #4]
   18784:	adds	r2, r2, #1
   18788:	adc	lr, lr, #0
   1878c:	str	r2, [r0]
   18790:	str	lr, [r0, #4]
   18794:	tst	r1, #1
   18798:	beq	187c8 <get_boolean_op_value@@Base+0x294>
   1879c:	ldr	r0, [pc, #816]	; 18ad4 <get_boolean_op_value@@Base+0x5a0>
   187a0:	add	r0, pc, r0
   187a4:	ldr	r1, [r0, #112]	; 0x70
   187a8:	ldr	r2, [r0, #116]	; 0x74
   187ac:	adds	r1, r1, #1
   187b0:	adc	r2, r2, #0
   187b4:	str	r1, [r0, #112]	; 0x70
   187b8:	str	r2, [r0, #116]	; 0x74
   187bc:	movw	r0, #3
   187c0:	str	r0, [fp, #-4]
   187c4:	b	18a58 <get_boolean_op_value@@Base+0x524>
   187c8:	ldr	r0, [fp, #-8]
   187cc:	ldr	r0, [r0, #4]
   187d0:	ldr	r1, [pc, #768]	; 18ad8 <get_boolean_op_value@@Base+0x5a4>
   187d4:	add	r1, pc, r1
   187d8:	mov	r2, #2
   187dc:	bl	11f3c <strncmp@plt>
   187e0:	clz	r1, r0
   187e4:	lsr	r1, r1, #5
   187e8:	mov	r2, #128	; 0x80
   187ec:	cmp	r0, #0
   187f0:	movweq	r2, #120	; 0x78
   187f4:	ldr	r0, [pc, #736]	; 18adc <get_boolean_op_value@@Base+0x5a8>
   187f8:	add	r0, pc, r0
   187fc:	ldr	r2, [r0, r2]!
   18800:	ldr	lr, [r0, #4]
   18804:	adds	r2, r2, #1
   18808:	adc	lr, lr, #0
   1880c:	str	r2, [r0]
   18810:	str	lr, [r0, #4]
   18814:	tst	r1, #1
   18818:	beq	18848 <get_boolean_op_value@@Base+0x314>
   1881c:	ldr	r0, [pc, #700]	; 18ae0 <get_boolean_op_value@@Base+0x5ac>
   18820:	add	r0, pc, r0
   18824:	ldr	r1, [r0, #136]	; 0x88
   18828:	ldr	r2, [r0, #140]	; 0x8c
   1882c:	adds	r1, r1, #1
   18830:	adc	r2, r2, #0
   18834:	str	r1, [r0, #136]	; 0x88
   18838:	str	r2, [r0, #140]	; 0x8c
   1883c:	movw	r0, #4
   18840:	str	r0, [fp, #-4]
   18844:	b	18a58 <get_boolean_op_value@@Base+0x524>
   18848:	ldr	r0, [fp, #-8]
   1884c:	ldr	r0, [r0, #4]
   18850:	ldr	r1, [pc, #652]	; 18ae4 <get_boolean_op_value@@Base+0x5b0>
   18854:	add	r1, pc, r1
   18858:	mov	r2, #2
   1885c:	bl	11f3c <strncmp@plt>
   18860:	clz	r1, r0
   18864:	lsr	r1, r1, #5
   18868:	mov	r2, #152	; 0x98
   1886c:	cmp	r0, #0
   18870:	movweq	r2, #144	; 0x90
   18874:	ldr	r0, [pc, #620]	; 18ae8 <get_boolean_op_value@@Base+0x5b4>
   18878:	add	r0, pc, r0
   1887c:	ldr	r2, [r0, r2]!
   18880:	ldr	lr, [r0, #4]
   18884:	adds	r2, r2, #1
   18888:	adc	lr, lr, #0
   1888c:	str	r2, [r0]
   18890:	str	lr, [r0, #4]
   18894:	tst	r1, #1
   18898:	beq	188c8 <get_boolean_op_value@@Base+0x394>
   1889c:	ldr	r0, [pc, #584]	; 18aec <get_boolean_op_value@@Base+0x5b8>
   188a0:	add	r0, pc, r0
   188a4:	ldr	r1, [r0, #160]	; 0xa0
   188a8:	ldr	r2, [r0, #164]	; 0xa4
   188ac:	adds	r1, r1, #1
   188b0:	adc	r2, r2, #0
   188b4:	str	r1, [r0, #160]	; 0xa0
   188b8:	str	r2, [r0, #164]	; 0xa4
   188bc:	movw	r0, #5
   188c0:	str	r0, [fp, #-4]
   188c4:	b	18a58 <get_boolean_op_value@@Base+0x524>
   188c8:	ldr	r0, [pc, #452]	; 18a94 <get_boolean_op_value@@Base+0x560>
   188cc:	add	r1, pc, r0
   188d0:	ldr	r0, [pc, #448]	; 18a98 <get_boolean_op_value@@Base+0x564>
   188d4:	ldr	r0, [pc, r0]
   188d8:	ldr	r0, [r0]
   188dc:	ldr	r2, [fp, #-8]
   188e0:	ldr	r2, [r2, #4]
   188e4:	bl	11e94 <fprintf@plt>
   188e8:	movw	r1, #1
   188ec:	str	r0, [sp, #12]
   188f0:	mov	r0, r1
   188f4:	bl	11e70 <exit@plt>
   188f8:	ldr	r0, [pc, #496]	; 18af0 <get_boolean_op_value@@Base+0x5bc>
   188fc:	add	r0, pc, r0
   18900:	mov	r1, #0
   18904:	str	r1, [r0]
   18908:	ldr	r0, [fp, #-8]
   1890c:	ldr	r0, [r0, #4]
   18910:	ldrb	r0, [r0]
   18914:	mov	r1, r0
   18918:	cmp	r0, #33	; 0x21
   1891c:	str	r1, [sp, #8]
   18920:	beq	18948 <get_boolean_op_value@@Base+0x414>
   18924:	b	18928 <get_boolean_op_value@@Base+0x3f4>
   18928:	ldr	r0, [sp, #8]
   1892c:	cmp	r0, #60	; 0x3c
   18930:	beq	1898c <get_boolean_op_value@@Base+0x458>
   18934:	b	18938 <get_boolean_op_value@@Base+0x404>
   18938:	ldr	r0, [sp, #8]
   1893c:	cmp	r0, #62	; 0x3e
   18940:	beq	189d0 <get_boolean_op_value@@Base+0x49c>
   18944:	b	18a14 <get_boolean_op_value@@Base+0x4e0>
   18948:	ldr	r0, [pc, #420]	; 18af4 <get_boolean_op_value@@Base+0x5c0>
   1894c:	add	r0, pc, r0
   18950:	add	r1, r0, #4
   18954:	ldr	r0, [pc, #412]	; 18af8 <get_boolean_op_value@@Base+0x5c4>
   18958:	add	r0, pc, r0
   1895c:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   18960:	ldr	r0, [pc, #404]	; 18afc <get_boolean_op_value@@Base+0x5c8>
   18964:	add	r0, pc, r0
   18968:	ldr	r1, [r0, #200]	; 0xc8
   1896c:	ldr	lr, [r0, #204]	; 0xcc
   18970:	adds	r1, r1, #1
   18974:	adc	lr, lr, #0
   18978:	str	r1, [r0, #200]	; 0xc8
   1897c:	str	lr, [r0, #204]	; 0xcc
   18980:	movw	r0, #8
   18984:	str	r0, [fp, #-4]
   18988:	b	18a58 <get_boolean_op_value@@Base+0x524>
   1898c:	ldr	r0, [pc, #364]	; 18b00 <get_boolean_op_value@@Base+0x5cc>
   18990:	add	r0, pc, r0
   18994:	add	r1, r0, #8
   18998:	ldr	r0, [pc, #356]	; 18b04 <get_boolean_op_value@@Base+0x5d0>
   1899c:	add	r0, pc, r0
   189a0:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   189a4:	ldr	r0, [pc, #348]	; 18b08 <get_boolean_op_value@@Base+0x5d4>
   189a8:	add	r0, pc, r0
   189ac:	ldr	r1, [r0, #208]	; 0xd0
   189b0:	ldr	lr, [r0, #212]	; 0xd4
   189b4:	adds	r1, r1, #1
   189b8:	adc	lr, lr, #0
   189bc:	str	r1, [r0, #208]	; 0xd0
   189c0:	str	lr, [r0, #212]	; 0xd4
   189c4:	movw	r0, #6
   189c8:	str	r0, [fp, #-4]
   189cc:	b	18a58 <get_boolean_op_value@@Base+0x524>
   189d0:	ldr	r0, [pc, #308]	; 18b0c <get_boolean_op_value@@Base+0x5d8>
   189d4:	add	r0, pc, r0
   189d8:	add	r1, r0, #12
   189dc:	ldr	r0, [pc, #300]	; 18b10 <get_boolean_op_value@@Base+0x5dc>
   189e0:	add	r0, pc, r0
   189e4:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   189e8:	ldr	r0, [pc, #292]	; 18b14 <get_boolean_op_value@@Base+0x5e0>
   189ec:	add	r0, pc, r0
   189f0:	ldr	r1, [r0, #216]	; 0xd8
   189f4:	ldr	lr, [r0, #220]	; 0xdc
   189f8:	adds	r1, r1, #1
   189fc:	adc	lr, lr, #0
   18a00:	str	r1, [r0, #216]	; 0xd8
   18a04:	str	lr, [r0, #220]	; 0xdc
   18a08:	movw	r0, #7
   18a0c:	str	r0, [fp, #-4]
   18a10:	b	18a58 <get_boolean_op_value@@Base+0x524>
   18a14:	ldr	r0, [pc, #112]	; 18a8c <get_boolean_op_value@@Base+0x558>
   18a18:	add	r0, pc, r0
   18a1c:	ldr	r1, [pc, #108]	; 18a90 <get_boolean_op_value@@Base+0x55c>
   18a20:	add	r1, pc, r1
   18a24:	bl	18b1c <get_boolean_op_value@@Base+0x5e8>
   18a28:	ldr	r0, [pc, #84]	; 18a84 <get_boolean_op_value@@Base+0x550>
   18a2c:	add	r1, pc, r0
   18a30:	ldr	r0, [pc, #80]	; 18a88 <get_boolean_op_value@@Base+0x554>
   18a34:	ldr	r0, [pc, r0]
   18a38:	ldr	r0, [r0]
   18a3c:	ldr	lr, [fp, #-8]
   18a40:	ldr	r2, [lr, #4]
   18a44:	bl	11e94 <fprintf@plt>
   18a48:	movw	r1, #1
   18a4c:	str	r0, [sp, #4]
   18a50:	mov	r0, r1
   18a54:	bl	11e70 <exit@plt>
   18a58:	ldr	r0, [pc, #184]	; 18b18 <get_boolean_op_value@@Base+0x5e4>
   18a5c:	add	r0, pc, r0
   18a60:	ldr	r1, [r0, #224]	; 0xe0
   18a64:	ldr	r2, [r0, #228]	; 0xe4
   18a68:	adds	r1, r1, #1
   18a6c:	adc	r2, r2, #0
   18a70:	str	r1, [r0, #224]	; 0xe0
   18a74:	str	r2, [r0, #228]	; 0xe4
   18a78:	ldr	r0, [fp, #-4]
   18a7c:	mov	sp, fp
   18a80:	pop	{fp, pc}
   18a84:	andeq	r5, r0, lr, lsr pc
   18a88:	andeq	r7, r1, r0, lsl #13
   18a8c:	andeq	r7, r1, r4, asr #13
   18a90:	andeq	r7, r1, r4, ror r1
   18a94:	muleq	r0, lr, r0
   18a98:	andeq	r7, r1, r0, ror #15
   18a9c:	andeq	r8, r1, r4, lsr #11
   18aa0:	muleq	r1, r8, r5
   18aa4:	andeq	r8, r1, r4, asr #10
   18aa8:	andeq	r6, r0, r4, lsl #7
   18aac:	strdeq	r8, [r1], -r0
   18ab0:	andeq	r8, r1, r8, asr #9
   18ab4:	andeq	r6, r0, r7, lsl #6
   18ab8:	andeq	r8, r1, r0, ror r4
   18abc:	andeq	r8, r1, r8, asr #8
   18ac0:	andeq	r6, r0, sl, lsl #5
   18ac4:	strdeq	r8, [r1], -r0
   18ac8:	andeq	r8, r1, r8, asr #7
   18acc:	andeq	r6, r0, sp, lsl #4
   18ad0:	andeq	r8, r1, r0, ror r3
   18ad4:	andeq	r8, r1, r8, asr #6
   18ad8:	muleq	r0, r0, r1
   18adc:	strdeq	r8, [r1], -r0
   18ae0:	andeq	r8, r1, r8, asr #5
   18ae4:	andeq	r6, r0, r3, lsl r1
   18ae8:	andeq	r8, r1, r0, ror r2
   18aec:	andeq	r8, r1, r8, asr #4
   18af0:	andeq	r7, r1, r0, ror #15
   18af4:	andeq	r7, r1, r8, asr #4
   18af8:	andeq	r7, r1, r4, lsl #15
   18afc:	andeq	r8, r1, r4, lsl #3
   18b00:	andeq	r7, r1, r4, lsl #4
   18b04:	andeq	r7, r1, r0, asr #14
   18b08:	andeq	r8, r1, r0, asr #2
   18b0c:	andeq	r7, r1, r0, asr #3
   18b10:	strdeq	r7, [r1], -ip
   18b14:	strdeq	r8, [r1], -ip
   18b18:	andeq	r8, r1, ip, lsl #1
   18b1c:	sub	sp, sp, #12
   18b20:	ldr	r0, [r0]
   18b24:	cmn	r0, #1
   18b28:	str	r1, [sp, #8]
   18b2c:	str	r0, [sp, #4]
   18b30:	beq	18b70 <get_boolean_op_value@@Base+0x63c>
   18b34:	ldr	r0, [sp, #8]
   18b38:	ldr	r1, [sp, #4]
   18b3c:	add	r2, r0, r1, lsl #2
   18b40:	ldr	r2, [r2]
   18b44:	movw	r3, #0
   18b48:	cmp	r2, r3
   18b4c:	str	r2, [sp]
   18b50:	beq	18b70 <get_boolean_op_value@@Base+0x63c>
   18b54:	ldr	r0, [sp]
   18b58:	ldr	r1, [r0]
   18b5c:	ldr	r2, [r0, #4]
   18b60:	adds	r1, r1, #1
   18b64:	adc	r2, r2, #0
   18b68:	str	r1, [r0]
   18b6c:	str	r2, [r0, #4]
   18b70:	add	sp, sp, #12
   18b74:	bx	lr
   18b78:	push	{r4, sl, fp, lr}
   18b7c:	add	fp, sp, #8
   18b80:	sub	sp, sp, #40	; 0x28
   18b84:	movw	r0, #0
   18b88:	str	r0, [fp, #-12]
   18b8c:	b	18b90 <get_boolean_op_value@@Base+0x65c>
   18b90:	ldr	r0, [fp, #-12]
   18b94:	ldr	r1, [pc, #244]	; 18c90 <get_boolean_op_value@@Base+0x75c>
   18b98:	add	r1, pc, r1
   18b9c:	movw	r2, #24
   18ba0:	mul	r2, r0, r2
   18ba4:	add	r1, r1, r2
   18ba8:	ldr	r2, [r1]
   18bac:	ldr	r3, [r1, #4]
   18bb0:	ldr	ip, [r1, #8]
   18bb4:	str	r0, [fp, #-16]
   18bb8:	mov	r0, r2
   18bbc:	str	r1, [fp, #-20]	; 0xffffffec
   18bc0:	mov	r1, r3
   18bc4:	mov	r2, ip
   18bc8:	bl	1ae34 <read_boolean_unary_expression@@Base+0x7d0>
   18bcc:	ldr	r0, [fp, #-20]	; 0xffffffec
   18bd0:	ldr	r1, [r0, #12]
   18bd4:	ldr	r2, [r0, #16]
   18bd8:	ldr	r3, [r0, #20]
   18bdc:	movw	ip, #0
   18be0:	cmp	ip, r1
   18be4:	str	r1, [sp, #24]
   18be8:	str	r2, [sp, #20]
   18bec:	str	r3, [sp, #16]
   18bf0:	str	ip, [sp, #12]
   18bf4:	bge	18c6c <get_boolean_op_value@@Base+0x738>
   18bf8:	ldr	r0, [sp, #12]
   18bfc:	add	r1, r0, r0, lsl #2
   18c00:	ldr	r2, [sp, #20]
   18c04:	ldr	r1, [r2, r1, lsl #2]!
   18c08:	ldr	r3, [r2, #4]
   18c0c:	ldr	ip, [r2, #8]
   18c10:	ldr	lr, [r2, #16]
   18c14:	ldrb	r2, [r2, #12]
   18c18:	mov	r4, sp
   18c1c:	str	lr, [r4]
   18c20:	str	r0, [sp, #8]
   18c24:	mov	r0, r1
   18c28:	mov	r1, r3
   18c2c:	str	r2, [sp, #4]
   18c30:	mov	r2, ip
   18c34:	ldr	r3, [sp, #4]
   18c38:	bl	1b598 <read_boolean_unary_expression@@Base+0xf34>
   18c3c:	ldr	r0, [sp, #16]
   18c40:	ldr	r1, [sp, #8]
   18c44:	add	r2, r0, r1, lsl #3
   18c48:	ldr	r0, [r2]
   18c4c:	ldr	r1, [r2, #4]
   18c50:	bl	1be4c <read_boolean_unary_expression@@Base+0x17e8>
   18c54:	ldr	r0, [sp, #8]
   18c58:	add	r1, r0, #1
   18c5c:	ldr	r2, [sp, #24]
   18c60:	cmp	r1, r2
   18c64:	str	r1, [sp, #12]
   18c68:	blt	18bf8 <get_boolean_op_value@@Base+0x6c4>
   18c6c:	bl	1c5c8 <read_boolean_unary_expression@@Base+0x1f64>
   18c70:	bl	1d334 <read_boolean_unary_expression@@Base+0x2cd0>
   18c74:	ldr	lr, [fp, #-16]
   18c78:	add	r0, lr, #1
   18c7c:	cmp	r0, #1
   18c80:	str	r0, [fp, #-12]
   18c84:	blt	18b90 <get_boolean_op_value@@Base+0x65c>
   18c88:	sub	sp, fp, #8
   18c8c:	pop	{r4, sl, fp, pc}
   18c90:	ldrdeq	r7, [r1], -r0
   18c94:	push	{fp, lr}
   18c98:	mov	fp, sp
   18c9c:	bl	18b78 <get_boolean_op_value@@Base+0x644>
   18ca0:	ldr	lr, [pc, #848]	; 18ff8 <get_boolean_op_value@@Base+0xac4>
   18ca4:	add	lr, pc, lr
   18ca8:	mov	r0, #0
   18cac:	str	r0, [lr, #12]
   18cb0:	str	r0, [lr, #8]
   18cb4:	str	r0, [lr, #4]
   18cb8:	str	r0, [lr]
   18cbc:	ldr	lr, [pc, #824]	; 18ffc <get_boolean_op_value@@Base+0xac8>
   18cc0:	add	lr, pc, lr
   18cc4:	str	r0, [lr, #12]
   18cc8:	str	r0, [lr, #8]
   18ccc:	str	r0, [lr, #4]
   18cd0:	str	r0, [lr]
   18cd4:	ldr	lr, [pc, #804]	; 19000 <get_boolean_op_value@@Base+0xacc>
   18cd8:	add	lr, pc, lr
   18cdc:	str	r0, [lr, #12]
   18ce0:	str	r0, [lr, #8]
   18ce4:	str	r0, [lr, #4]
   18ce8:	str	r0, [lr]
   18cec:	ldr	lr, [pc, #784]	; 19004 <get_boolean_op_value@@Base+0xad0>
   18cf0:	add	lr, pc, lr
   18cf4:	str	r0, [lr, #12]
   18cf8:	str	r0, [lr, #8]
   18cfc:	str	r0, [lr, #4]
   18d00:	str	r0, [lr]
   18d04:	ldr	lr, [pc, #764]	; 19008 <get_boolean_op_value@@Base+0xad4>
   18d08:	add	lr, pc, lr
   18d0c:	str	r0, [lr, #12]
   18d10:	str	r0, [lr, #8]
   18d14:	str	r0, [lr, #4]
   18d18:	str	r0, [lr]
   18d1c:	ldr	lr, [pc, #744]	; 1900c <get_boolean_op_value@@Base+0xad8>
   18d20:	add	lr, pc, lr
   18d24:	str	r0, [lr, #12]
   18d28:	str	r0, [lr, #8]
   18d2c:	str	r0, [lr, #4]
   18d30:	str	r0, [lr]
   18d34:	ldr	lr, [pc, #724]	; 19010 <get_boolean_op_value@@Base+0xadc>
   18d38:	add	lr, pc, lr
   18d3c:	str	r0, [lr, #12]
   18d40:	str	r0, [lr, #8]
   18d44:	str	r0, [lr, #4]
   18d48:	str	r0, [lr]
   18d4c:	ldr	lr, [pc, #704]	; 19014 <get_boolean_op_value@@Base+0xae0>
   18d50:	add	lr, pc, lr
   18d54:	str	r0, [lr, #12]
   18d58:	str	r0, [lr, #8]
   18d5c:	str	r0, [lr, #4]
   18d60:	str	r0, [lr]
   18d64:	ldr	lr, [pc, #684]	; 19018 <get_boolean_op_value@@Base+0xae4>
   18d68:	add	lr, pc, lr
   18d6c:	str	r0, [lr, #116]	; 0x74
   18d70:	str	r0, [lr, #112]	; 0x70
   18d74:	str	r0, [lr, #108]	; 0x6c
   18d78:	str	r0, [lr, #104]	; 0x68
   18d7c:	str	r0, [lr, #100]	; 0x64
   18d80:	str	r0, [lr, #96]	; 0x60
   18d84:	str	r0, [lr, #92]	; 0x5c
   18d88:	str	r0, [lr, #88]	; 0x58
   18d8c:	str	r0, [lr, #84]	; 0x54
   18d90:	str	r0, [lr, #80]	; 0x50
   18d94:	str	r0, [lr, #76]	; 0x4c
   18d98:	str	r0, [lr, #72]	; 0x48
   18d9c:	str	r0, [lr, #68]	; 0x44
   18da0:	str	r0, [lr, #64]	; 0x40
   18da4:	str	r0, [lr, #60]	; 0x3c
   18da8:	str	r0, [lr, #56]	; 0x38
   18dac:	str	r0, [lr, #52]	; 0x34
   18db0:	str	r0, [lr, #48]	; 0x30
   18db4:	str	r0, [lr, #44]	; 0x2c
   18db8:	str	r0, [lr, #40]	; 0x28
   18dbc:	str	r0, [lr, #36]	; 0x24
   18dc0:	str	r0, [lr, #32]
   18dc4:	str	r0, [lr, #28]
   18dc8:	str	r0, [lr, #24]
   18dcc:	str	r0, [lr, #20]
   18dd0:	str	r0, [lr, #16]
   18dd4:	str	r0, [lr, #12]
   18dd8:	str	r0, [lr, #8]
   18ddc:	str	r0, [lr, #4]
   18de0:	str	r0, [lr]
   18de4:	ldr	lr, [pc, #560]	; 1901c <get_boolean_op_value@@Base+0xae8>
   18de8:	add	lr, pc, lr
   18dec:	str	r0, [lr, #36]	; 0x24
   18df0:	str	r0, [lr, #32]
   18df4:	str	r0, [lr, #28]
   18df8:	str	r0, [lr, #24]
   18dfc:	str	r0, [lr, #20]
   18e00:	str	r0, [lr, #16]
   18e04:	str	r0, [lr, #12]
   18e08:	str	r0, [lr, #8]
   18e0c:	str	r0, [lr, #4]
   18e10:	str	r0, [lr]
   18e14:	ldr	lr, [pc, #516]	; 19020 <get_boolean_op_value@@Base+0xaec>
   18e18:	add	lr, pc, lr
   18e1c:	str	r0, [lr, #36]	; 0x24
   18e20:	str	r0, [lr, #32]
   18e24:	str	r0, [lr, #28]
   18e28:	str	r0, [lr, #24]
   18e2c:	str	r0, [lr, #20]
   18e30:	str	r0, [lr, #16]
   18e34:	str	r0, [lr, #12]
   18e38:	str	r0, [lr, #8]
   18e3c:	str	r0, [lr, #4]
   18e40:	str	r0, [lr]
   18e44:	ldr	lr, [pc, #472]	; 19024 <get_boolean_op_value@@Base+0xaf0>
   18e48:	add	lr, pc, lr
   18e4c:	str	r0, [lr, #36]	; 0x24
   18e50:	str	r0, [lr, #32]
   18e54:	str	r0, [lr, #28]
   18e58:	str	r0, [lr, #24]
   18e5c:	str	r0, [lr, #20]
   18e60:	str	r0, [lr, #16]
   18e64:	str	r0, [lr, #12]
   18e68:	str	r0, [lr, #8]
   18e6c:	str	r0, [lr, #4]
   18e70:	str	r0, [lr]
   18e74:	ldr	lr, [pc, #428]	; 19028 <get_boolean_op_value@@Base+0xaf4>
   18e78:	add	lr, pc, lr
   18e7c:	str	r0, [lr, #36]	; 0x24
   18e80:	str	r0, [lr, #32]
   18e84:	str	r0, [lr, #28]
   18e88:	str	r0, [lr, #24]
   18e8c:	str	r0, [lr, #20]
   18e90:	str	r0, [lr, #16]
   18e94:	str	r0, [lr, #12]
   18e98:	str	r0, [lr, #8]
   18e9c:	str	r0, [lr, #4]
   18ea0:	str	r0, [lr]
   18ea4:	ldr	lr, [pc, #384]	; 1902c <get_boolean_op_value@@Base+0xaf8>
   18ea8:	add	lr, pc, lr
   18eac:	str	r0, [lr, #36]	; 0x24
   18eb0:	str	r0, [lr, #32]
   18eb4:	str	r0, [lr, #28]
   18eb8:	str	r0, [lr, #24]
   18ebc:	str	r0, [lr, #20]
   18ec0:	str	r0, [lr, #16]
   18ec4:	str	r0, [lr, #12]
   18ec8:	str	r0, [lr, #8]
   18ecc:	str	r0, [lr, #4]
   18ed0:	str	r0, [lr]
   18ed4:	ldr	lr, [pc, #340]	; 19030 <get_boolean_op_value@@Base+0xafc>
   18ed8:	add	lr, pc, lr
   18edc:	str	r0, [lr, #36]	; 0x24
   18ee0:	str	r0, [lr, #32]
   18ee4:	str	r0, [lr, #28]
   18ee8:	str	r0, [lr, #24]
   18eec:	str	r0, [lr, #20]
   18ef0:	str	r0, [lr, #16]
   18ef4:	str	r0, [lr, #12]
   18ef8:	str	r0, [lr, #8]
   18efc:	str	r0, [lr, #4]
   18f00:	str	r0, [lr]
   18f04:	ldr	lr, [pc, #296]	; 19034 <get_boolean_op_value@@Base+0xb00>
   18f08:	add	lr, pc, lr
   18f0c:	str	r0, [lr, #228]	; 0xe4
   18f10:	str	r0, [lr, #224]	; 0xe0
   18f14:	str	r0, [lr, #220]	; 0xdc
   18f18:	str	r0, [lr, #216]	; 0xd8
   18f1c:	str	r0, [lr, #212]	; 0xd4
   18f20:	str	r0, [lr, #208]	; 0xd0
   18f24:	str	r0, [lr, #204]	; 0xcc
   18f28:	str	r0, [lr, #200]	; 0xc8
   18f2c:	str	r0, [lr, #196]	; 0xc4
   18f30:	str	r0, [lr, #192]	; 0xc0
   18f34:	str	r0, [lr, #188]	; 0xbc
   18f38:	str	r0, [lr, #184]	; 0xb8
   18f3c:	str	r0, [lr, #180]	; 0xb4
   18f40:	str	r0, [lr, #176]	; 0xb0
   18f44:	str	r0, [lr, #172]	; 0xac
   18f48:	str	r0, [lr, #168]	; 0xa8
   18f4c:	str	r0, [lr, #164]	; 0xa4
   18f50:	str	r0, [lr, #160]	; 0xa0
   18f54:	str	r0, [lr, #156]	; 0x9c
   18f58:	str	r0, [lr, #152]	; 0x98
   18f5c:	str	r0, [lr, #148]	; 0x94
   18f60:	str	r0, [lr, #144]	; 0x90
   18f64:	str	r0, [lr, #140]	; 0x8c
   18f68:	str	r0, [lr, #136]	; 0x88
   18f6c:	str	r0, [lr, #132]	; 0x84
   18f70:	str	r0, [lr, #128]	; 0x80
   18f74:	str	r0, [lr, #124]	; 0x7c
   18f78:	str	r0, [lr, #120]	; 0x78
   18f7c:	str	r0, [lr, #116]	; 0x74
   18f80:	str	r0, [lr, #112]	; 0x70
   18f84:	str	r0, [lr, #108]	; 0x6c
   18f88:	str	r0, [lr, #104]	; 0x68
   18f8c:	str	r0, [lr, #100]	; 0x64
   18f90:	str	r0, [lr, #96]	; 0x60
   18f94:	str	r0, [lr, #92]	; 0x5c
   18f98:	str	r0, [lr, #88]	; 0x58
   18f9c:	str	r0, [lr, #84]	; 0x54
   18fa0:	str	r0, [lr, #80]	; 0x50
   18fa4:	str	r0, [lr, #76]	; 0x4c
   18fa8:	str	r0, [lr, #72]	; 0x48
   18fac:	str	r0, [lr, #68]	; 0x44
   18fb0:	str	r0, [lr, #64]	; 0x40
   18fb4:	str	r0, [lr, #60]	; 0x3c
   18fb8:	str	r0, [lr, #56]	; 0x38
   18fbc:	str	r0, [lr, #52]	; 0x34
   18fc0:	str	r0, [lr, #48]	; 0x30
   18fc4:	str	r0, [lr, #44]	; 0x2c
   18fc8:	str	r0, [lr, #40]	; 0x28
   18fcc:	str	r0, [lr, #36]	; 0x24
   18fd0:	str	r0, [lr, #32]
   18fd4:	str	r0, [lr, #28]
   18fd8:	str	r0, [lr, #24]
   18fdc:	str	r0, [lr, #20]
   18fe0:	str	r0, [lr, #16]
   18fe4:	str	r0, [lr, #12]
   18fe8:	str	r0, [lr, #8]
   18fec:	str	r0, [lr, #4]
   18ff0:	str	r0, [lr]
   18ff4:	pop	{fp, pc}
   18ff8:	andeq	r7, r1, r4, lsr #24
   18ffc:	andeq	r7, r1, r8, lsl ip
   19000:	andeq	r7, r1, r0, lsl ip
   19004:	andeq	r7, r1, r8, lsl #24
   19008:	andeq	r7, r1, r0, lsl #24
   1900c:	strdeq	r7, [r1], -r8
   19010:	strdeq	r7, [r1], -r0
   19014:	andeq	r7, r1, r8, ror #23
   19018:	andeq	r7, r1, r0, ror #23
   1901c:	andeq	r7, r1, r0, ror #23
   19020:	andeq	r7, r1, r0, ror #23
   19024:	andeq	r7, r1, r0, ror #23
   19028:	andeq	r7, r1, r0, ror #23
   1902c:	andeq	r7, r1, r0, ror #23
   19030:	andeq	r7, r1, r0, ror #23
   19034:	andeq	r7, r1, r0, ror #23
   19038:	push	{fp, lr}
   1903c:	mov	fp, sp
   19040:	ldr	r0, [pc, #16]	; 19058 <get_boolean_op_value@@Base+0xb24>
   19044:	add	r0, pc, r0
   19048:	ldr	r1, [pc, #12]	; 1905c <get_boolean_op_value@@Base+0xb28>
   1904c:	add	r1, pc, r1
   19050:	bl	1d7e4 <__gcov_flush@@Base+0xb4>
   19054:	pop	{fp, pc}
   19058:			; <UNDEFINED> instruction: 0xfffffb2c
   1905c:			; <UNDEFINED> instruction: 0xfffffc40

00019060 <init_grammar@@Base>:
   19060:	sub	sp, sp, #16
   19064:	ldr	r2, [pc, #104]	; 190d4 <init_grammar@@Base+0x74>
   19068:	add	r2, pc, r2
   1906c:	ldr	r3, [r2, #4]
   19070:	ldr	ip, [pc, #96]	; 190d8 <init_grammar@@Base+0x78>
   19074:	ldr	ip, [pc, ip]
   19078:	adds	ip, ip, #1
   1907c:	adc	r3, r3, #0
   19080:	str	ip, [r2]
   19084:	str	r3, [r2, #4]
   19088:	str	r0, [sp, #4]
   1908c:	str	r1, [sp]
   19090:	ldr	r0, [pc, #68]	; 190dc <init_grammar@@Base+0x7c>
   19094:	add	r0, pc, r0
   19098:	ldr	r1, [r0, #8]
   1909c:	ldr	r2, [r0, #12]
   190a0:	adds	r1, r1, #1
   190a4:	adc	r2, r2, #0
   190a8:	str	r1, [r0, #8]
   190ac:	str	r2, [r0, #12]
   190b0:	ldr	r0, [sp, #4]
   190b4:	str	r0, [sp, #12]
   190b8:	ldr	r1, [sp]
   190bc:	str	r1, [sp, #8]
   190c0:	ldr	r2, [sp, #8]
   190c4:	ldr	r3, [sp, #12]
   190c8:	str	r2, [r3]
   190cc:	add	sp, sp, #16
   190d0:	bx	lr
   190d4:	andeq	r7, r1, r0, ror fp
   190d8:	andeq	r7, r1, r4, ror #22
   190dc:	andeq	r7, r1, r4, asr #22

000190e0 <destroy_grammar@@Base>:
   190e0:	sub	sp, sp, #8
   190e4:	ldr	r1, [pc, #80]	; 1913c <destroy_grammar@@Base+0x5c>
   190e8:	add	r1, pc, r1
   190ec:	ldr	r2, [r1, #4]
   190f0:	ldr	r3, [pc, #72]	; 19140 <destroy_grammar@@Base+0x60>
   190f4:	ldr	r3, [pc, r3]
   190f8:	adds	r3, r3, #1
   190fc:	adc	r2, r2, #0
   19100:	str	r3, [r1]
   19104:	str	r2, [r1, #4]
   19108:	str	r0, [sp]
   1910c:	ldr	r0, [pc, #48]	; 19144 <destroy_grammar@@Base+0x64>
   19110:	add	r0, pc, r0
   19114:	ldr	r1, [r0, #8]
   19118:	ldr	r2, [r0, #12]
   1911c:	adds	r1, r1, #1
   19120:	adc	r2, r2, #0
   19124:	str	r1, [r0, #8]
   19128:	str	r2, [r0, #12]
   1912c:	ldr	r0, [sp]
   19130:	str	r0, [sp, #4]
   19134:	add	sp, sp, #8
   19138:	bx	lr
   1913c:	andeq	r7, r1, r0, lsl #22
   19140:	strdeq	r7, [r1], -r4
   19144:	ldrdeq	r7, [r1], -r8

00019148 <build_ast@@Base>:
   19148:	push	{fp, lr}
   1914c:	mov	fp, sp
   19150:	sub	sp, sp, #8
   19154:	ldr	r1, [pc, #88]	; 191b4 <build_ast@@Base+0x6c>
   19158:	add	r1, pc, r1
   1915c:	ldr	r2, [r1, #4]
   19160:	ldr	r3, [pc, #80]	; 191b8 <build_ast@@Base+0x70>
   19164:	ldr	r3, [pc, r3]
   19168:	adds	r3, r3, #1
   1916c:	adc	r2, r2, #0
   19170:	str	r3, [r1]
   19174:	str	r2, [r1, #4]
   19178:	str	r0, [sp]
   1917c:	ldr	r0, [pc, #56]	; 191bc <build_ast@@Base+0x74>
   19180:	add	r0, pc, r0
   19184:	ldr	r1, [r0, #8]
   19188:	ldr	r2, [r0, #12]
   1918c:	adds	r1, r1, #1
   19190:	adc	r2, r2, #0
   19194:	str	r1, [r0, #8]
   19198:	str	r2, [r0, #12]
   1919c:	ldr	r0, [sp]
   191a0:	str	r0, [sp, #4]
   191a4:	ldr	r0, [sp, #4]
   191a8:	bl	191c0 <read_function_ast_node@@Base>
   191ac:	mov	sp, fp
   191b0:	pop	{fp, pc}
   191b4:	andeq	r7, r1, r0, lsr #21
   191b8:	muleq	r1, r4, sl
   191bc:	andeq	r7, r1, r8, ror sl

000191c0 <read_function_ast_node@@Base>:
   191c0:	push	{fp, lr}
   191c4:	mov	fp, sp
   191c8:	sub	sp, sp, #32
   191cc:	ldr	r1, [pc, #756]	; 194c8 <read_function_ast_node@@Base+0x308>
   191d0:	add	r1, pc, r1
   191d4:	ldr	r2, [r1, #4]
   191d8:	ldr	r3, [pc, #748]	; 194cc <read_function_ast_node@@Base+0x30c>
   191dc:	ldr	r3, [pc, r3]
   191e0:	adds	r3, r3, #1
   191e4:	adc	r2, r2, #0
   191e8:	str	r3, [r1]
   191ec:	str	r2, [r1, #4]
   191f0:	str	r0, [sp, #4]
   191f4:	ldr	r0, [sp, #4]
   191f8:	str	r0, [fp, #-8]
   191fc:	mov	r1, #0
   19200:	str	r1, [fp, #-12]
   19204:	str	r1, [sp, #16]
   19208:	str	r1, [sp, #12]
   1920c:	str	r1, [sp, #8]
   19210:	ldr	r1, [fp, #-8]
   19214:	ldr	r0, [r1]
   19218:	bl	12050 <next@@Base>
   1921c:	str	r0, [sp, #12]
   19220:	ldr	r0, [sp, #12]
   19224:	ldr	r0, [r0]
   19228:	cmp	r0, #0
   1922c:	mov	r1, r0
   19230:	movwne	r1, #1
   19234:	mov	lr, #16
   19238:	cmp	r0, #0
   1923c:	movwne	lr, #8
   19240:	ldr	r0, [pc, #648]	; 194d0 <read_function_ast_node@@Base+0x310>
   19244:	add	r0, pc, r0
   19248:	ldr	lr, [r0, lr]!
   1924c:	ldr	r2, [r0, #4]
   19250:	adds	lr, lr, #1
   19254:	adc	r2, r2, #0
   19258:	str	lr, [r0]
   1925c:	str	r2, [r0, #4]
   19260:	tst	r1, #1
   19264:	beq	19294 <read_function_ast_node@@Base+0xd4>
   19268:	ldr	r0, [pc, #612]	; 194d4 <read_function_ast_node@@Base+0x314>
   1926c:	add	r0, pc, r0
   19270:	ldr	r1, [r0, #24]
   19274:	ldr	r2, [r0, #28]
   19278:	adds	r1, r1, #1
   1927c:	adc	r2, r2, #0
   19280:	str	r1, [r0, #24]
   19284:	str	r2, [r0, #28]
   19288:	movw	r0, #0
   1928c:	str	r0, [fp, #-4]
   19290:	b	1949c <read_function_ast_node@@Base+0x2dc>
   19294:	ldr	r0, [sp, #12]
   19298:	bl	16c14 <free_token_int_type@@Base>
   1929c:	ldr	r0, [fp, #-8]
   192a0:	ldr	r0, [r0]
   192a4:	bl	12050 <next@@Base>
   192a8:	str	r0, [sp, #12]
   192ac:	ldr	r0, [sp, #12]
   192b0:	ldr	r0, [r0]
   192b4:	sub	lr, r0, #2
   192b8:	cmp	r0, #2
   192bc:	movwne	lr, #1
   192c0:	mov	r1, #40	; 0x28
   192c4:	cmp	r0, #2
   192c8:	movwne	r1, #32
   192cc:	ldr	r0, [pc, #516]	; 194d8 <read_function_ast_node@@Base+0x318>
   192d0:	add	r0, pc, r0
   192d4:	ldr	r1, [r0, r1]!
   192d8:	ldr	r2, [r0, #4]
   192dc:	adds	r1, r1, #1
   192e0:	adc	r2, r2, #0
   192e4:	str	r1, [r0]
   192e8:	str	r2, [r0, #4]
   192ec:	tst	lr, #1
   192f0:	beq	19320 <read_function_ast_node@@Base+0x160>
   192f4:	ldr	r0, [pc, #480]	; 194dc <read_function_ast_node@@Base+0x31c>
   192f8:	add	r0, pc, r0
   192fc:	ldr	r1, [r0, #48]	; 0x30
   19300:	ldr	r2, [r0, #52]	; 0x34
   19304:	adds	r1, r1, #1
   19308:	adc	r2, r2, #0
   1930c:	str	r1, [r0, #48]	; 0x30
   19310:	str	r2, [r0, #52]	; 0x34
   19314:	movw	r0, #0
   19318:	str	r0, [fp, #-4]
   1931c:	b	1949c <read_function_ast_node@@Base+0x2dc>
   19320:	ldr	r0, [sp, #12]
   19324:	str	r0, [sp, #8]
   19328:	ldr	r0, [fp, #-8]
   1932c:	ldr	r0, [r0]
   19330:	bl	12050 <next@@Base>
   19334:	str	r0, [sp, #12]
   19338:	ldr	r0, [sp, #12]
   1933c:	ldr	r0, [r0]
   19340:	sub	lr, r0, #3
   19344:	cmp	r0, #3
   19348:	movwne	lr, #1
   1934c:	mov	r1, #64	; 0x40
   19350:	cmp	r0, #3
   19354:	movwne	r1, #56	; 0x38
   19358:	ldr	r0, [pc, #384]	; 194e0 <read_function_ast_node@@Base+0x320>
   1935c:	add	r0, pc, r0
   19360:	ldr	r1, [r0, r1]!
   19364:	ldr	r2, [r0, #4]
   19368:	adds	r1, r1, #1
   1936c:	adc	r2, r2, #0
   19370:	str	r1, [r0]
   19374:	str	r2, [r0, #4]
   19378:	tst	lr, #1
   1937c:	beq	193ac <read_function_ast_node@@Base+0x1ec>
   19380:	ldr	r0, [pc, #348]	; 194e4 <read_function_ast_node@@Base+0x324>
   19384:	add	r0, pc, r0
   19388:	ldr	r1, [r0, #72]	; 0x48
   1938c:	ldr	r2, [r0, #76]	; 0x4c
   19390:	adds	r1, r1, #1
   19394:	adc	r2, r2, #0
   19398:	str	r1, [r0, #72]	; 0x48
   1939c:	str	r2, [r0, #76]	; 0x4c
   193a0:	movw	r0, #0
   193a4:	str	r0, [fp, #-4]
   193a8:	b	1949c <read_function_ast_node@@Base+0x2dc>
   193ac:	ldr	r0, [sp, #12]
   193b0:	bl	16d88 <free_token_opar@@Base>
   193b4:	ldr	r0, [fp, #-8]
   193b8:	ldr	r0, [r0]
   193bc:	bl	12050 <next@@Base>
   193c0:	str	r0, [sp, #12]
   193c4:	ldr	r0, [sp, #12]
   193c8:	ldr	r0, [r0]
   193cc:	sub	lr, r0, #4
   193d0:	cmp	r0, #4
   193d4:	movwne	lr, #1
   193d8:	mov	r1, #88	; 0x58
   193dc:	cmp	r0, #4
   193e0:	movwne	r1, #80	; 0x50
   193e4:	ldr	r0, [pc, #252]	; 194e8 <read_function_ast_node@@Base+0x328>
   193e8:	add	r0, pc, r0
   193ec:	ldr	r1, [r0, r1]!
   193f0:	ldr	r2, [r0, #4]
   193f4:	adds	r1, r1, #1
   193f8:	adc	r2, r2, #0
   193fc:	str	r1, [r0]
   19400:	str	r2, [r0, #4]
   19404:	tst	lr, #1
   19408:	beq	19438 <read_function_ast_node@@Base+0x278>
   1940c:	ldr	r0, [pc, #216]	; 194ec <read_function_ast_node@@Base+0x32c>
   19410:	add	r0, pc, r0
   19414:	ldr	r1, [r0, #96]	; 0x60
   19418:	ldr	r2, [r0, #100]	; 0x64
   1941c:	adds	r1, r1, #1
   19420:	adc	r2, r2, #0
   19424:	str	r1, [r0, #96]	; 0x60
   19428:	str	r2, [r0, #100]	; 0x64
   1942c:	movw	r0, #0
   19430:	str	r0, [fp, #-4]
   19434:	b	1949c <read_function_ast_node@@Base+0x2dc>
   19438:	ldr	r0, [pc, #176]	; 194f0 <read_function_ast_node@@Base+0x330>
   1943c:	add	r0, pc, r0
   19440:	ldr	r1, [r0, #104]	; 0x68
   19444:	ldr	r2, [r0, #108]	; 0x6c
   19448:	adds	r1, r1, #1
   1944c:	adc	r2, r2, #0
   19450:	str	r1, [r0, #104]	; 0x68
   19454:	str	r2, [r0, #108]	; 0x6c
   19458:	ldr	r0, [sp, #12]
   1945c:	bl	16e04 <free_token_cpar@@Base>
   19460:	ldr	r0, [fp, #-8]
   19464:	bl	194f8 <read_body@@Base>
   19468:	str	r0, [sp, #16]
   1946c:	movw	r0, #16
   19470:	bl	11e34 <malloc@plt>
   19474:	str	r0, [fp, #-12]
   19478:	ldr	r0, [fp, #-12]
   1947c:	ldr	r1, [sp, #8]
   19480:	ldr	r1, [r1, #4]
   19484:	ldr	r2, [sp, #16]
   19488:	bl	17974 <init_node_function@@Base>
   1948c:	ldr	r0, [sp, #8]
   19490:	bl	16d0c <free_token_function@@Base>
   19494:	ldr	r0, [fp, #-12]
   19498:	str	r0, [fp, #-4]
   1949c:	ldr	r0, [pc, #80]	; 194f4 <read_function_ast_node@@Base+0x334>
   194a0:	add	r0, pc, r0
   194a4:	ldr	r1, [r0, #112]	; 0x70
   194a8:	ldr	r2, [r0, #116]	; 0x74
   194ac:	adds	r1, r1, #1
   194b0:	adc	r2, r2, #0
   194b4:	str	r1, [r0, #112]	; 0x70
   194b8:	str	r2, [r0, #116]	; 0x74
   194bc:	ldr	r0, [fp, #-4]
   194c0:	mov	sp, fp
   194c4:	pop	{fp, pc}
   194c8:	andeq	r7, r1, r8, lsr sl
   194cc:	andeq	r7, r1, ip, lsr #20
   194d0:	andeq	r7, r1, r4, asr #19
   194d4:	muleq	r1, ip, r9
   194d8:	andeq	r7, r1, r8, lsr r9
   194dc:	andeq	r7, r1, r0, lsl r9
   194e0:	andeq	r7, r1, ip, lsr #17
   194e4:	andeq	r7, r1, r4, lsl #17
   194e8:	andeq	r7, r1, r0, lsr #16
   194ec:	strdeq	r7, [r1], -r8
   194f0:	andeq	r7, r1, ip, asr #15
   194f4:	andeq	r7, r1, r8, ror #14

000194f8 <read_body@@Base>:
   194f8:	push	{fp, lr}
   194fc:	mov	fp, sp
   19500:	sub	sp, sp, #32
   19504:	ldr	r1, [pc, #932]	; 198b0 <read_body@@Base+0x3b8>
   19508:	add	r1, pc, r1
   1950c:	ldr	r2, [r1, #4]
   19510:	ldr	r3, [pc, #924]	; 198b4 <read_body@@Base+0x3bc>
   19514:	ldr	r3, [pc, r3]
   19518:	adds	r3, r3, #1
   1951c:	adc	r2, r2, #0
   19520:	str	r3, [r1]
   19524:	str	r2, [r1, #4]
   19528:	str	r0, [sp, #4]
   1952c:	ldr	r0, [sp, #4]
   19530:	str	r0, [fp, #-8]
   19534:	mov	r1, #0
   19538:	str	r1, [fp, #-12]
   1953c:	str	r1, [sp, #16]
   19540:	str	r1, [sp, #12]
   19544:	str	r1, [sp, #8]
   19548:	ldr	r1, [fp, #-8]
   1954c:	ldr	r0, [r1]
   19550:	bl	12050 <next@@Base>
   19554:	str	r0, [sp, #8]
   19558:	ldr	r0, [sp, #8]
   1955c:	ldr	r0, [r0]
   19560:	sub	r1, r0, #5
   19564:	cmp	r0, #5
   19568:	movwne	r1, #1
   1956c:	mov	lr, #16
   19570:	cmp	r0, #5
   19574:	movwne	lr, #8
   19578:	ldr	r0, [pc, #824]	; 198b8 <read_body@@Base+0x3c0>
   1957c:	add	r0, pc, r0
   19580:	ldr	lr, [r0, lr]!
   19584:	ldr	r2, [r0, #4]
   19588:	adds	lr, lr, #1
   1958c:	adc	r2, r2, #0
   19590:	str	lr, [r0]
   19594:	str	r2, [r0, #4]
   19598:	tst	r1, #1
   1959c:	beq	195cc <read_body@@Base+0xd4>
   195a0:	ldr	r0, [pc, #788]	; 198bc <read_body@@Base+0x3c4>
   195a4:	add	r0, pc, r0
   195a8:	ldr	r1, [r0, #24]
   195ac:	ldr	r2, [r0, #28]
   195b0:	adds	r1, r1, #1
   195b4:	adc	r2, r2, #0
   195b8:	str	r1, [r0, #24]
   195bc:	str	r2, [r0, #28]
   195c0:	movw	r0, #0
   195c4:	str	r0, [fp, #-4]
   195c8:	b	19884 <read_body@@Base+0x38c>
   195cc:	ldr	r0, [pc, #748]	; 198c0 <read_body@@Base+0x3c8>
   195d0:	add	r0, pc, r0
   195d4:	ldr	r1, [r0, #32]
   195d8:	ldr	r2, [r0, #36]	; 0x24
   195dc:	adds	r1, r1, #1
   195e0:	adc	r2, r2, #0
   195e4:	str	r1, [r0, #32]
   195e8:	str	r2, [r0, #36]	; 0x24
   195ec:	ldr	r0, [sp, #8]
   195f0:	bl	16e80 <free_token_obra@@Base>
   195f4:	ldr	r0, [fp, #-8]
   195f8:	ldr	r0, [r0]
   195fc:	bl	12050 <next@@Base>
   19600:	str	r0, [sp, #8]
   19604:	ldr	r0, [sp, #8]
   19608:	ldr	r0, [r0]
   1960c:	sub	r1, r0, #6
   19610:	cmp	r0, #6
   19614:	movwne	r1, #1
   19618:	mov	r2, #48	; 0x30
   1961c:	cmp	r0, #6
   19620:	movwne	r2, #40	; 0x28
   19624:	ldr	r0, [pc, #664]	; 198c4 <read_body@@Base+0x3cc>
   19628:	add	r0, pc, r0
   1962c:	ldr	r2, [r0, r2]!
   19630:	ldr	r3, [r0, #4]
   19634:	adds	r2, r2, #1
   19638:	adc	r3, r3, #0
   1963c:	str	r2, [r0]
   19640:	str	r3, [r0, #4]
   19644:	tst	r1, #1
   19648:	beq	19854 <read_body@@Base+0x35c>
   1964c:	ldr	r0, [pc, #628]	; 198c8 <read_body@@Base+0x3d0>
   19650:	add	r0, pc, r0
   19654:	mov	r1, #0
   19658:	str	r1, [r0]
   1965c:	ldr	r0, [sp, #8]
   19660:	ldr	r0, [r0]
   19664:	cmp	r0, #7
   19668:	str	r0, [sp]
   1966c:	beq	19684 <read_body@@Base+0x18c>
   19670:	b	19674 <read_body@@Base+0x17c>
   19674:	ldr	r0, [sp]
   19678:	cmp	r0, #10
   1967c:	beq	196d4 <read_body@@Base+0x1dc>
   19680:	b	19724 <read_body@@Base+0x22c>
   19684:	ldr	r0, [pc, #576]	; 198cc <read_body@@Base+0x3d4>
   19688:	add	r0, pc, r0
   1968c:	add	r1, r0, #4
   19690:	ldr	r0, [pc, #568]	; 198d0 <read_body@@Base+0x3d8>
   19694:	add	r0, pc, r0
   19698:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   1969c:	ldr	r0, [pc, #560]	; 198d4 <read_body@@Base+0x3dc>
   196a0:	add	r0, pc, r0
   196a4:	ldr	r1, [r0, #80]	; 0x50
   196a8:	ldr	lr, [r0, #84]	; 0x54
   196ac:	adds	r1, r1, #1
   196b0:	adc	lr, lr, #0
   196b4:	str	r1, [r0, #80]	; 0x50
   196b8:	str	lr, [r0, #84]	; 0x54
   196bc:	ldr	r0, [sp, #8]
   196c0:	bl	16f78 <free_token_return@@Base>
   196c4:	ldr	r0, [fp, #-8]
   196c8:	bl	19908 <read_return_expression@@Base>
   196cc:	str	r0, [sp, #16]
   196d0:	b	19774 <read_body@@Base+0x27c>
   196d4:	ldr	r0, [pc, #508]	; 198d8 <read_body@@Base+0x3e0>
   196d8:	add	r0, pc, r0
   196dc:	add	r1, r0, #8
   196e0:	ldr	r0, [pc, #500]	; 198dc <read_body@@Base+0x3e4>
   196e4:	add	r0, pc, r0
   196e8:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   196ec:	ldr	r0, [pc, #492]	; 198e0 <read_body@@Base+0x3e8>
   196f0:	add	r0, pc, r0
   196f4:	ldr	r1, [r0, #88]	; 0x58
   196f8:	ldr	lr, [r0, #92]	; 0x5c
   196fc:	adds	r1, r1, #1
   19700:	adc	lr, lr, #0
   19704:	str	r1, [r0, #88]	; 0x58
   19708:	str	lr, [r0, #92]	; 0x5c
   1970c:	ldr	r0, [sp, #8]
   19710:	bl	170ec <free_token_if@@Base>
   19714:	ldr	r0, [fp, #-8]
   19718:	bl	19b24 <read_if_statement@@Base>
   1971c:	str	r0, [sp, #16]
   19720:	b	19774 <read_body@@Base+0x27c>
   19724:	ldr	r0, [pc, #440]	; 198e4 <read_body@@Base+0x3ec>
   19728:	add	r0, pc, r0
   1972c:	ldr	r1, [pc, #436]	; 198e8 <read_body@@Base+0x3f0>
   19730:	add	r1, pc, r1
   19734:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   19738:	ldr	r0, [pc, #428]	; 198ec <read_body@@Base+0x3f4>
   1973c:	add	r0, pc, r0
   19740:	ldr	r1, [r0, #96]	; 0x60
   19744:	ldr	lr, [r0, #100]	; 0x64
   19748:	adds	r1, r1, #1
   1974c:	adc	lr, lr, #0
   19750:	str	r1, [r0, #96]	; 0x60
   19754:	str	lr, [r0, #100]	; 0x64
   19758:	ldr	r0, [fp, #-8]
   1975c:	ldr	r0, [r0]
   19760:	ldr	r1, [sp, #8]
   19764:	bl	12558 <push_back@@Base>
   19768:	ldr	r0, [fp, #-12]
   1976c:	str	r0, [fp, #-4]
   19770:	b	19884 <read_body@@Base+0x38c>
   19774:	ldr	r0, [fp, #-12]
   19778:	cmp	r0, #0
   1977c:	mov	r1, r0
   19780:	movwne	r1, #1
   19784:	mov	r2, #112	; 0x70
   19788:	cmp	r0, #0
   1978c:	movwne	r2, #104	; 0x68
   19790:	ldr	r0, [pc, #344]	; 198f0 <read_body@@Base+0x3f8>
   19794:	add	r0, pc, r0
   19798:	ldr	r2, [r0, r2]!
   1979c:	ldr	r3, [r0, #4]
   197a0:	adds	r2, r2, #1
   197a4:	adc	r3, r3, #0
   197a8:	str	r2, [r0]
   197ac:	str	r3, [r0, #4]
   197b0:	tst	r1, #1
   197b4:	beq	197f0 <read_body@@Base+0x2f8>
   197b8:	ldr	r0, [pc, #308]	; 198f4 <read_body@@Base+0x3fc>
   197bc:	add	r0, pc, r0
   197c0:	ldr	r1, [r0, #120]	; 0x78
   197c4:	ldr	r2, [r0, #124]	; 0x7c
   197c8:	adds	r1, r1, #1
   197cc:	adc	r2, r2, #0
   197d0:	str	r1, [r0, #120]	; 0x78
   197d4:	str	r2, [r0, #124]	; 0x7c
   197d8:	ldr	r0, [sp, #16]
   197dc:	ldr	r1, [sp, #12]
   197e0:	str	r0, [r1, #4]
   197e4:	ldr	r0, [sp, #16]
   197e8:	str	r0, [sp, #12]
   197ec:	b	19820 <read_body@@Base+0x328>
   197f0:	ldr	r0, [pc, #256]	; 198f8 <read_body@@Base+0x400>
   197f4:	add	r0, pc, r0
   197f8:	ldr	r1, [r0, #128]	; 0x80
   197fc:	ldr	r2, [r0, #132]	; 0x84
   19800:	adds	r1, r1, #1
   19804:	adc	r2, r2, #0
   19808:	str	r1, [r0, #128]	; 0x80
   1980c:	str	r2, [r0, #132]	; 0x84
   19810:	ldr	r0, [sp, #16]
   19814:	str	r0, [fp, #-12]
   19818:	ldr	r0, [sp, #16]
   1981c:	str	r0, [sp, #12]
   19820:	ldr	r0, [pc, #212]	; 198fc <read_body@@Base+0x404>
   19824:	add	r0, pc, r0
   19828:	ldr	r1, [r0, #136]	; 0x88
   1982c:	ldr	r2, [r0, #140]	; 0x8c
   19830:	adds	r1, r1, #1
   19834:	adc	r2, r2, #0
   19838:	str	r1, [r0, #136]	; 0x88
   1983c:	str	r2, [r0, #140]	; 0x8c
   19840:	ldr	r0, [fp, #-8]
   19844:	ldr	r0, [r0]
   19848:	bl	12050 <next@@Base>
   1984c:	str	r0, [sp, #8]
   19850:	b	19604 <read_body@@Base+0x10c>
   19854:	ldr	r0, [pc, #164]	; 19900 <read_body@@Base+0x408>
   19858:	add	r0, pc, r0
   1985c:	ldr	r1, [r0, #144]	; 0x90
   19860:	ldr	r2, [r0, #148]	; 0x94
   19864:	adds	r1, r1, #1
   19868:	adc	r2, r2, #0
   1986c:	str	r1, [r0, #144]	; 0x90
   19870:	str	r2, [r0, #148]	; 0x94
   19874:	ldr	r0, [sp, #8]
   19878:	bl	16efc <free_token_cbra@@Base>
   1987c:	ldr	r0, [fp, #-12]
   19880:	str	r0, [fp, #-4]
   19884:	ldr	r0, [pc, #120]	; 19904 <read_body@@Base+0x40c>
   19888:	add	r0, pc, r0
   1988c:	ldr	r1, [r0, #152]	; 0x98
   19890:	ldr	r2, [r0, #156]	; 0x9c
   19894:	adds	r1, r1, #1
   19898:	adc	r2, r2, #0
   1989c:	str	r1, [r0, #152]	; 0x98
   198a0:	str	r2, [r0, #156]	; 0x9c
   198a4:	ldr	r0, [fp, #-4]
   198a8:	mov	sp, fp
   198ac:	pop	{fp, pc}
   198b0:	andeq	r7, r1, r0, lsl #15
   198b4:	andeq	r7, r1, r4, ror r7
   198b8:	andeq	r7, r1, ip, lsl #14
   198bc:	andeq	r7, r1, r4, ror #13
   198c0:			; <UNDEFINED> instruction: 0x000176b8
   198c4:	andeq	r7, r1, r0, ror #12
   198c8:	muleq	r1, r0, sl
   198cc:	andeq	r6, r1, r0, lsl #14
   198d0:	andeq	r6, r1, ip, asr #20
   198d4:	andeq	r7, r1, r8, ror #11
   198d8:			; <UNDEFINED> instruction: 0x000166b0
   198dc:	strdeq	r6, [r1], -ip
   198e0:	muleq	r1, r8, r5
   198e4:			; <UNDEFINED> instruction: 0x000169b8
   198e8:	andeq	r6, r1, r8, asr r6
   198ec:	andeq	r7, r1, ip, asr #10
   198f0:	strdeq	r7, [r1], -r4
   198f4:	andeq	r7, r1, ip, asr #9
   198f8:	muleq	r1, r4, r4
   198fc:	andeq	r7, r1, r4, ror #8
   19900:	andeq	r7, r1, r0, lsr r4
   19904:	andeq	r7, r1, r0, lsl #8

00019908 <read_return_expression@@Base>:
   19908:	push	{fp, lr}
   1990c:	mov	fp, sp
   19910:	sub	sp, sp, #32
   19914:	ldr	r1, [pc, #488]	; 19b04 <read_return_expression@@Base+0x1fc>
   19918:	add	r1, pc, r1
   1991c:	ldr	r2, [r1, #4]
   19920:	ldr	r3, [pc, #480]	; 19b08 <read_return_expression@@Base+0x200>
   19924:	ldr	r3, [pc, r3]
   19928:	adds	r3, r3, #1
   1992c:	adc	r2, r2, #0
   19930:	str	r3, [r1]
   19934:	str	r2, [r1, #4]
   19938:	str	r0, [sp, #4]
   1993c:	ldr	r0, [sp, #4]
   19940:	str	r0, [fp, #-8]
   19944:	mov	r1, #0
   19948:	str	r1, [fp, #-12]
   1994c:	str	r1, [sp, #16]
   19950:	str	r1, [sp, #12]
   19954:	str	r1, [sp, #8]
   19958:	ldr	r1, [fp, #-8]
   1995c:	ldr	r0, [r1]
   19960:	bl	12050 <next@@Base>
   19964:	str	r0, [sp, #12]
   19968:	ldr	r0, [sp, #12]
   1996c:	ldr	r0, [r0]
   19970:	sub	r1, r0, #1
   19974:	cmp	r0, #1
   19978:	movwne	r1, #1
   1997c:	mov	lr, #16
   19980:	cmp	r0, #1
   19984:	movwne	lr, #8
   19988:	ldr	r0, [pc, #380]	; 19b0c <read_return_expression@@Base+0x204>
   1998c:	add	r0, pc, r0
   19990:	ldr	lr, [r0, lr]!
   19994:	ldr	r2, [r0, #4]
   19998:	adds	lr, lr, #1
   1999c:	adc	r2, r2, #0
   199a0:	str	lr, [r0]
   199a4:	str	r2, [r0, #4]
   199a8:	tst	r1, #1
   199ac:	beq	199dc <read_return_expression@@Base+0xd4>
   199b0:	ldr	r0, [pc, #344]	; 19b10 <read_return_expression@@Base+0x208>
   199b4:	add	r0, pc, r0
   199b8:	ldr	r1, [r0, #24]
   199bc:	ldr	r2, [r0, #28]
   199c0:	adds	r1, r1, #1
   199c4:	adc	r2, r2, #0
   199c8:	str	r1, [r0, #24]
   199cc:	str	r2, [r0, #28]
   199d0:	movw	r0, #0
   199d4:	str	r0, [fp, #-4]
   199d8:	b	19ad8 <read_return_expression@@Base+0x1d0>
   199dc:	ldr	r0, [sp, #12]
   199e0:	str	r0, [sp, #8]
   199e4:	mov	r0, #12
   199e8:	str	r0, [sp]
   199ec:	bl	11e34 <malloc@plt>
   199f0:	str	r0, [sp, #16]
   199f4:	ldr	r0, [sp, #16]
   199f8:	ldr	lr, [sp, #8]
   199fc:	ldr	r1, [lr, #4]
   19a00:	bl	178e0 <init_node_int@@Base>
   19a04:	ldr	r0, [sp, #8]
   19a08:	bl	16c90 <free_token_int_value@@Base>
   19a0c:	ldr	r0, [sp]
   19a10:	bl	11e34 <malloc@plt>
   19a14:	str	r0, [fp, #-12]
   19a18:	ldr	r0, [fp, #-12]
   19a1c:	ldr	r1, [sp, #16]
   19a20:	bl	17a20 <init_node_return@@Base>
   19a24:	ldr	r0, [fp, #-8]
   19a28:	ldr	r0, [r0]
   19a2c:	bl	12050 <next@@Base>
   19a30:	str	r0, [sp, #12]
   19a34:	ldr	r0, [sp, #12]
   19a38:	ldr	r0, [r0]
   19a3c:	sub	r1, r0, #8
   19a40:	cmp	r0, #8
   19a44:	movwne	r1, #1
   19a48:	mov	lr, #40	; 0x28
   19a4c:	cmp	r0, #8
   19a50:	movwne	lr, #32
   19a54:	ldr	r0, [pc, #184]	; 19b14 <read_return_expression@@Base+0x20c>
   19a58:	add	r0, pc, r0
   19a5c:	ldr	lr, [r0, lr]!
   19a60:	ldr	r2, [r0, #4]
   19a64:	adds	lr, lr, #1
   19a68:	adc	r2, r2, #0
   19a6c:	str	lr, [r0]
   19a70:	str	r2, [r0, #4]
   19a74:	tst	r1, #1
   19a78:	beq	19aa8 <read_return_expression@@Base+0x1a0>
   19a7c:	ldr	r0, [pc, #148]	; 19b18 <read_return_expression@@Base+0x210>
   19a80:	add	r0, pc, r0
   19a84:	ldr	r1, [r0, #48]	; 0x30
   19a88:	ldr	r2, [r0, #52]	; 0x34
   19a8c:	adds	r1, r1, #1
   19a90:	adc	r2, r2, #0
   19a94:	str	r1, [r0, #48]	; 0x30
   19a98:	str	r2, [r0, #52]	; 0x34
   19a9c:	movw	r0, #0
   19aa0:	str	r0, [fp, #-4]
   19aa4:	b	19ad8 <read_return_expression@@Base+0x1d0>
   19aa8:	ldr	r0, [pc, #108]	; 19b1c <read_return_expression@@Base+0x214>
   19aac:	add	r0, pc, r0
   19ab0:	ldr	r1, [r0, #56]	; 0x38
   19ab4:	ldr	r2, [r0, #60]	; 0x3c
   19ab8:	adds	r1, r1, #1
   19abc:	adc	r2, r2, #0
   19ac0:	str	r1, [r0, #56]	; 0x38
   19ac4:	str	r2, [r0, #60]	; 0x3c
   19ac8:	ldr	r0, [sp, #12]
   19acc:	bl	16ff4 <free_token_semicolon@@Base>
   19ad0:	ldr	r0, [fp, #-12]
   19ad4:	str	r0, [fp, #-4]
   19ad8:	ldr	r0, [pc, #64]	; 19b20 <read_return_expression@@Base+0x218>
   19adc:	add	r0, pc, r0
   19ae0:	ldr	r1, [r0, #64]	; 0x40
   19ae4:	ldr	r2, [r0, #68]	; 0x44
   19ae8:	adds	r1, r1, #1
   19aec:	adc	r2, r2, #0
   19af0:	str	r1, [r0, #64]	; 0x40
   19af4:	str	r2, [r0, #68]	; 0x44
   19af8:	ldr	r0, [fp, #-4]
   19afc:	mov	sp, fp
   19b00:	pop	{fp, pc}
   19b04:	andeq	r7, r1, r0, lsl r4
   19b08:	andeq	r7, r1, r4, lsl #8
   19b0c:	muleq	r1, ip, r3
   19b10:	andeq	r7, r1, r4, ror r3
   19b14:	ldrdeq	r7, [r1], -r0
   19b18:	andeq	r7, r1, r8, lsr #5
   19b1c:	andeq	r7, r1, ip, ror r2
   19b20:	andeq	r7, r1, ip, asr #4

00019b24 <read_if_statement@@Base>:
   19b24:	push	{fp, lr}
   19b28:	mov	fp, sp
   19b2c:	sub	sp, sp, #32
   19b30:	ldr	r1, [pc, #536]	; 19d50 <read_if_statement@@Base+0x22c>
   19b34:	add	r1, pc, r1
   19b38:	ldr	r2, [r1, #4]
   19b3c:	ldr	r3, [pc, #528]	; 19d54 <read_if_statement@@Base+0x230>
   19b40:	ldr	r3, [pc, r3]
   19b44:	adds	r3, r3, #1
   19b48:	adc	r2, r2, #0
   19b4c:	str	r3, [r1]
   19b50:	str	r2, [r1, #4]
   19b54:	str	r0, [sp]
   19b58:	ldr	r0, [sp]
   19b5c:	str	r0, [fp, #-8]
   19b60:	mov	r1, #0
   19b64:	str	r1, [fp, #-12]
   19b68:	str	r1, [sp, #16]
   19b6c:	str	r1, [sp, #12]
   19b70:	str	r1, [sp, #8]
   19b74:	str	r1, [sp, #4]
   19b78:	ldr	r1, [fp, #-8]
   19b7c:	ldr	r0, [r1]
   19b80:	bl	12050 <next@@Base>
   19b84:	str	r0, [sp, #4]
   19b88:	ldr	r0, [sp, #4]
   19b8c:	ldr	r0, [r0]
   19b90:	sub	r1, r0, #3
   19b94:	cmp	r0, #3
   19b98:	movwne	r1, #1
   19b9c:	mov	lr, #16
   19ba0:	cmp	r0, #3
   19ba4:	movwne	lr, #8
   19ba8:	ldr	r0, [pc, #424]	; 19d58 <read_if_statement@@Base+0x234>
   19bac:	add	r0, pc, r0
   19bb0:	ldr	lr, [r0, lr]!
   19bb4:	ldr	r2, [r0, #4]
   19bb8:	adds	lr, lr, #1
   19bbc:	adc	r2, r2, #0
   19bc0:	str	lr, [r0]
   19bc4:	str	r2, [r0, #4]
   19bc8:	tst	r1, #1
   19bcc:	beq	19bfc <read_if_statement@@Base+0xd8>
   19bd0:	ldr	r0, [pc, #388]	; 19d5c <read_if_statement@@Base+0x238>
   19bd4:	add	r0, pc, r0
   19bd8:	ldr	r1, [r0, #24]
   19bdc:	ldr	r2, [r0, #28]
   19be0:	adds	r1, r1, #1
   19be4:	adc	r2, r2, #0
   19be8:	str	r1, [r0, #24]
   19bec:	str	r2, [r0, #28]
   19bf0:	movw	r0, #0
   19bf4:	str	r0, [fp, #-4]
   19bf8:	b	19d24 <read_if_statement@@Base+0x200>
   19bfc:	ldr	r0, [sp, #4]
   19c00:	bl	16d88 <free_token_opar@@Base>
   19c04:	ldr	r0, [fp, #-8]
   19c08:	bl	19d74 <read_boolean_expression@@Base>
   19c0c:	str	r0, [sp, #16]
   19c10:	ldr	r0, [fp, #-8]
   19c14:	bl	194f8 <read_body@@Base>
   19c18:	str	r0, [sp, #12]
   19c1c:	ldr	r0, [fp, #-8]
   19c20:	ldr	r0, [r0]
   19c24:	bl	12050 <next@@Base>
   19c28:	str	r0, [sp, #4]
   19c2c:	ldr	r0, [sp, #4]
   19c30:	ldr	r0, [r0]
   19c34:	sub	lr, r0, #11
   19c38:	clz	lr, lr
   19c3c:	lsr	lr, lr, #5
   19c40:	mov	r1, #40	; 0x28
   19c44:	cmp	r0, #11
   19c48:	movweq	r1, #32
   19c4c:	ldr	r0, [pc, #268]	; 19d60 <read_if_statement@@Base+0x23c>
   19c50:	add	r0, pc, r0
   19c54:	ldr	r1, [r0, r1]!
   19c58:	ldr	r2, [r0, #4]
   19c5c:	adds	r1, r1, #1
   19c60:	adc	r2, r2, #0
   19c64:	str	r1, [r0]
   19c68:	str	r2, [r0, #4]
   19c6c:	tst	lr, #1
   19c70:	beq	19cac <read_if_statement@@Base+0x188>
   19c74:	ldr	r0, [pc, #232]	; 19d64 <read_if_statement@@Base+0x240>
   19c78:	add	r0, pc, r0
   19c7c:	ldr	r1, [r0, #48]	; 0x30
   19c80:	ldr	r2, [r0, #52]	; 0x34
   19c84:	adds	r1, r1, #1
   19c88:	adc	r2, r2, #0
   19c8c:	str	r1, [r0, #48]	; 0x30
   19c90:	str	r2, [r0, #52]	; 0x34
   19c94:	ldr	r0, [sp, #4]
   19c98:	bl	17168 <free_token_else@@Base>
   19c9c:	ldr	r0, [fp, #-8]
   19ca0:	bl	194f8 <read_body@@Base>
   19ca4:	str	r0, [sp, #8]
   19ca8:	b	19cdc <read_if_statement@@Base+0x1b8>
   19cac:	ldr	r0, [pc, #180]	; 19d68 <read_if_statement@@Base+0x244>
   19cb0:	add	r0, pc, r0
   19cb4:	ldr	r1, [r0, #56]	; 0x38
   19cb8:	ldr	r2, [r0, #60]	; 0x3c
   19cbc:	adds	r1, r1, #1
   19cc0:	adc	r2, r2, #0
   19cc4:	str	r1, [r0, #56]	; 0x38
   19cc8:	str	r2, [r0, #60]	; 0x3c
   19ccc:	ldr	r0, [fp, #-8]
   19cd0:	ldr	r0, [r0]
   19cd4:	ldr	r1, [sp, #4]
   19cd8:	bl	12558 <push_back@@Base>
   19cdc:	ldr	r0, [pc, #136]	; 19d6c <read_if_statement@@Base+0x248>
   19ce0:	add	r0, pc, r0
   19ce4:	ldr	r1, [r0, #64]	; 0x40
   19ce8:	ldr	r2, [r0, #68]	; 0x44
   19cec:	adds	r1, r1, #1
   19cf0:	adc	r2, r2, #0
   19cf4:	str	r1, [r0, #64]	; 0x40
   19cf8:	str	r2, [r0, #68]	; 0x44
   19cfc:	movw	r0, #20
   19d00:	bl	11e34 <malloc@plt>
   19d04:	str	r0, [fp, #-12]
   19d08:	ldr	r0, [fp, #-12]
   19d0c:	ldr	r1, [sp, #16]
   19d10:	ldr	r2, [sp, #12]
   19d14:	ldr	r3, [sp, #8]
   19d18:	bl	17ab4 <init_node_if@@Base>
   19d1c:	ldr	r0, [fp, #-12]
   19d20:	str	r0, [fp, #-4]
   19d24:	ldr	r0, [pc, #68]	; 19d70 <read_if_statement@@Base+0x24c>
   19d28:	add	r0, pc, r0
   19d2c:	ldr	r1, [r0, #72]	; 0x48
   19d30:	ldr	r2, [r0, #76]	; 0x4c
   19d34:	adds	r1, r1, #1
   19d38:	adc	r2, r2, #0
   19d3c:	str	r1, [r0, #72]	; 0x48
   19d40:	str	r2, [r0, #76]	; 0x4c
   19d44:	ldr	r0, [fp, #-4]
   19d48:	mov	sp, fp
   19d4c:	pop	{fp, pc}
   19d50:	andeq	r7, r1, r4, asr #4
   19d54:	andeq	r7, r1, r8, lsr r2
   19d58:	andeq	r7, r1, ip, asr #3
   19d5c:	andeq	r7, r1, r4, lsr #3
   19d60:	andeq	r7, r1, r8, lsr #2
   19d64:	andeq	r7, r1, r0, lsl #2
   19d68:	andeq	r7, r1, r8, asr #1
   19d6c:	muleq	r1, r8, r0
   19d70:	andeq	r7, r1, r0, asr r0

00019d74 <read_boolean_expression@@Base>:
   19d74:	push	{fp, lr}
   19d78:	mov	fp, sp
   19d7c:	sub	sp, sp, #32
   19d80:	ldr	r1, [pc, #692]	; 1a03c <read_boolean_expression@@Base+0x2c8>
   19d84:	add	r1, pc, r1
   19d88:	ldr	r2, [r1, #4]
   19d8c:	ldr	r3, [pc, #684]	; 1a040 <read_boolean_expression@@Base+0x2cc>
   19d90:	ldr	r3, [pc, r3]
   19d94:	adds	r3, r3, #1
   19d98:	adc	r2, r2, #0
   19d9c:	str	r3, [r1]
   19da0:	str	r2, [r1, #4]
   19da4:	str	r0, [sp, #8]
   19da8:	ldr	r0, [pc, #660]	; 1a044 <read_boolean_expression@@Base+0x2d0>
   19dac:	add	r0, pc, r0
   19db0:	ldr	r1, [r0, #8]
   19db4:	ldr	r2, [r0, #12]
   19db8:	adds	r1, r1, #1
   19dbc:	adc	r2, r2, #0
   19dc0:	str	r1, [r0, #8]
   19dc4:	str	r2, [r0, #12]
   19dc8:	ldr	r0, [sp, #8]
   19dcc:	str	r0, [fp, #-4]
   19dd0:	movw	r1, #0
   19dd4:	str	r1, [fp, #-8]
   19dd8:	str	r1, [fp, #-12]
   19ddc:	str	r1, [sp, #12]
   19de0:	ldr	r1, [fp, #-4]
   19de4:	ldr	r0, [r1]
   19de8:	bl	12050 <next@@Base>
   19dec:	str	r0, [fp, #-12]
   19df0:	ldr	r0, [fp, #-12]
   19df4:	ldr	r0, [r0]
   19df8:	sub	r1, r0, #4
   19dfc:	cmp	r0, #4
   19e00:	movwne	r1, #1
   19e04:	mov	r2, #24
   19e08:	cmp	r0, #4
   19e0c:	movwne	r2, #16
   19e10:	ldr	r0, [pc, #560]	; 1a048 <read_boolean_expression@@Base+0x2d4>
   19e14:	add	r0, pc, r0
   19e18:	ldr	r2, [r0, r2]!
   19e1c:	ldr	r3, [r0, #4]
   19e20:	adds	r2, r2, #1
   19e24:	adc	r3, r3, #0
   19e28:	str	r2, [r0]
   19e2c:	str	r3, [r0, #4]
   19e30:	tst	r1, #1
   19e34:	beq	19ff8 <read_boolean_expression@@Base+0x284>
   19e38:	ldr	r0, [pc, #524]	; 1a04c <read_boolean_expression@@Base+0x2d8>
   19e3c:	add	r0, pc, r0
   19e40:	mov	r1, #0
   19e44:	str	r1, [r0]
   19e48:	ldr	r0, [fp, #-12]
   19e4c:	ldr	r0, [r0]
   19e50:	cmp	r0, #1
   19e54:	str	r0, [sp, #4]
   19e58:	beq	19e80 <read_boolean_expression@@Base+0x10c>
   19e5c:	b	19e60 <read_boolean_expression@@Base+0xec>
   19e60:	ldr	r0, [sp, #4]
   19e64:	cmp	r0, #3
   19e68:	beq	19f34 <read_boolean_expression@@Base+0x1c0>
   19e6c:	b	19e70 <read_boolean_expression@@Base+0xfc>
   19e70:	ldr	r0, [sp, #4]
   19e74:	cmp	r0, #12
   19e78:	beq	19ee4 <read_boolean_expression@@Base+0x170>
   19e7c:	b	19f88 <read_boolean_expression@@Base+0x214>
   19e80:	ldr	r0, [pc, #456]	; 1a050 <read_boolean_expression@@Base+0x2dc>
   19e84:	add	r0, pc, r0
   19e88:	add	r1, r0, #4
   19e8c:	ldr	r0, [pc, #448]	; 1a054 <read_boolean_expression@@Base+0x2e0>
   19e90:	add	r0, pc, r0
   19e94:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   19e98:	ldr	r0, [pc, #440]	; 1a058 <read_boolean_expression@@Base+0x2e4>
   19e9c:	add	r0, pc, r0
   19ea0:	ldr	r1, [r0, #64]	; 0x40
   19ea4:	ldr	lr, [r0, #68]	; 0x44
   19ea8:	adds	r1, r1, #1
   19eac:	adc	lr, lr, #0
   19eb0:	str	r1, [r0, #64]	; 0x40
   19eb4:	str	lr, [r0, #68]	; 0x44
   19eb8:	ldr	r0, [fp, #-4]
   19ebc:	ldr	r0, [r0]
   19ec0:	ldr	r1, [fp, #-12]
   19ec4:	bl	12558 <push_back@@Base>
   19ec8:	ldr	r0, [fp, #-4]
   19ecc:	ldr	r1, [fp, #-8]
   19ed0:	ldr	r3, [sp, #16]
   19ed4:	add	r2, sp, #12
   19ed8:	bl	1a07c <read_single_boolean_expression@@Base>
   19edc:	str	r0, [fp, #-8]
   19ee0:	b	19fc4 <read_boolean_expression@@Base+0x250>
   19ee4:	ldr	r0, [pc, #368]	; 1a05c <read_boolean_expression@@Base+0x2e8>
   19ee8:	add	r0, pc, r0
   19eec:	add	r1, r0, #8
   19ef0:	ldr	r0, [pc, #360]	; 1a060 <read_boolean_expression@@Base+0x2ec>
   19ef4:	add	r0, pc, r0
   19ef8:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   19efc:	ldr	r0, [pc, #352]	; 1a064 <read_boolean_expression@@Base+0x2f0>
   19f00:	add	r0, pc, r0
   19f04:	ldr	r1, [r0, #72]	; 0x48
   19f08:	ldr	lr, [r0, #76]	; 0x4c
   19f0c:	adds	r1, r1, #1
   19f10:	adc	lr, lr, #0
   19f14:	str	r1, [r0, #72]	; 0x48
   19f18:	str	lr, [r0, #76]	; 0x4c
   19f1c:	ldr	r0, [fp, #-12]
   19f20:	bl	18534 <get_boolean_op_value@@Base>
   19f24:	str	r0, [sp, #16]
   19f28:	movw	r0, #1
   19f2c:	str	r0, [sp, #12]
   19f30:	b	19fc4 <read_boolean_expression@@Base+0x250>
   19f34:	ldr	r0, [pc, #300]	; 1a068 <read_boolean_expression@@Base+0x2f4>
   19f38:	add	r0, pc, r0
   19f3c:	add	r1, r0, #12
   19f40:	ldr	r0, [pc, #292]	; 1a06c <read_boolean_expression@@Base+0x2f8>
   19f44:	add	r0, pc, r0
   19f48:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   19f4c:	ldr	r0, [pc, #284]	; 1a070 <read_boolean_expression@@Base+0x2fc>
   19f50:	add	r0, pc, r0
   19f54:	ldr	r1, [r0, #80]	; 0x50
   19f58:	ldr	lr, [r0, #84]	; 0x54
   19f5c:	adds	r1, r1, #1
   19f60:	adc	lr, lr, #0
   19f64:	str	r1, [r0, #80]	; 0x50
   19f68:	str	lr, [r0, #84]	; 0x54
   19f6c:	ldr	r0, [fp, #-4]
   19f70:	ldr	r1, [fp, #-8]
   19f74:	ldr	r3, [sp, #16]
   19f78:	add	r2, sp, #12
   19f7c:	bl	1a07c <read_single_boolean_expression@@Base>
   19f80:	str	r0, [fp, #-8]
   19f84:	b	19fc4 <read_boolean_expression@@Base+0x250>
   19f88:	ldr	r0, [pc, #164]	; 1a034 <read_boolean_expression@@Base+0x2c0>
   19f8c:	add	r0, pc, r0
   19f90:	ldr	r1, [pc, #160]	; 1a038 <read_boolean_expression@@Base+0x2c4>
   19f94:	add	r1, pc, r1
   19f98:	bl	1a8ac <read_boolean_unary_expression@@Base+0x248>
   19f9c:	ldr	r0, [pc, #136]	; 1a02c <read_boolean_expression@@Base+0x2b8>
   19fa0:	add	r1, pc, r0
   19fa4:	ldr	r0, [pc, #132]	; 1a030 <read_boolean_expression@@Base+0x2bc>
   19fa8:	ldr	r0, [pc, r0]
   19fac:	ldr	r0, [r0]
   19fb0:	bl	11e94 <fprintf@plt>
   19fb4:	movw	r1, #1
   19fb8:	str	r0, [sp]
   19fbc:	mov	r0, r1
   19fc0:	bl	11e70 <exit@plt>
   19fc4:	ldr	r0, [pc, #168]	; 1a074 <read_boolean_expression@@Base+0x300>
   19fc8:	add	r0, pc, r0
   19fcc:	ldr	r1, [r0, #88]	; 0x58
   19fd0:	ldr	r2, [r0, #92]	; 0x5c
   19fd4:	adds	r1, r1, #1
   19fd8:	adc	r2, r2, #0
   19fdc:	str	r1, [r0, #88]	; 0x58
   19fe0:	str	r2, [r0, #92]	; 0x5c
   19fe4:	ldr	r0, [fp, #-4]
   19fe8:	ldr	r0, [r0]
   19fec:	bl	12050 <next@@Base>
   19ff0:	str	r0, [fp, #-12]
   19ff4:	b	19df0 <read_boolean_expression@@Base+0x7c>
   19ff8:	ldr	r0, [pc, #120]	; 1a078 <read_boolean_expression@@Base+0x304>
   19ffc:	add	r0, pc, r0
   1a000:	ldr	r1, [r0, #96]	; 0x60
   1a004:	ldr	r2, [r0, #100]	; 0x64
   1a008:	adds	r1, r1, #1
   1a00c:	adc	r2, r2, #0
   1a010:	str	r1, [r0, #96]	; 0x60
   1a014:	str	r2, [r0, #100]	; 0x64
   1a018:	ldr	r0, [fp, #-12]
   1a01c:	bl	16e04 <free_token_cpar@@Base>
   1a020:	ldr	r0, [fp, #-8]
   1a024:	mov	sp, fp
   1a028:	pop	{fp, pc}
   1a02c:	andeq	r4, r0, sp, asr #23
   1a030:	andeq	r6, r1, ip, lsl #2
   1a034:	andeq	r6, r1, r8, asr r1
   1a038:	andeq	r5, r1, r0, lsl #28
   1a03c:	andeq	r7, r1, r4, asr #32
   1a040:	andeq	r7, r1, r8, lsr r0
   1a044:	andeq	r7, r1, ip, lsl r0
   1a048:			; <UNDEFINED> instruction: 0x00016fb4
   1a04c:	andeq	r6, r1, r8, lsr #5
   1a050:	andeq	r5, r1, r0, lsl pc
   1a054:	andeq	r6, r1, r4, asr r2
   1a058:	andeq	r6, r1, ip, lsr #30
   1a05c:	andeq	r5, r1, ip, lsr #29
   1a060:	strdeq	r6, [r1], -r0
   1a064:	andeq	r6, r1, r8, asr #29
   1a068:	andeq	r5, r1, ip, asr lr
   1a06c:	andeq	r6, r1, r0, lsr #3
   1a070:	andeq	r6, r1, r8, ror lr
   1a074:	andeq	r6, r1, r0, lsl #28
   1a078:	andeq	r6, r1, ip, asr #27

0001a07c <read_single_boolean_expression@@Base>:
   1a07c:	push	{r4, r5, fp, lr}
   1a080:	add	fp, sp, #8
   1a084:	sub	sp, sp, #56	; 0x38
   1a088:	ldr	ip, [pc, #524]	; 1a29c <read_single_boolean_expression@@Base+0x220>
   1a08c:	add	ip, pc, ip
   1a090:	ldr	lr, [ip, #4]
   1a094:	ldr	r4, [pc, #516]	; 1a2a0 <read_single_boolean_expression@@Base+0x224>
   1a098:	ldr	r4, [pc, r4]
   1a09c:	adds	r4, r4, #1
   1a0a0:	adc	lr, lr, #0
   1a0a4:	str	r4, [ip]
   1a0a8:	str	lr, [ip, #4]
   1a0ac:	str	r2, [sp, #16]
   1a0b0:	str	r1, [sp, #12]
   1a0b4:	str	r0, [sp, #8]
   1a0b8:	str	r3, [sp, #4]
   1a0bc:	ldr	r0, [sp, #8]
   1a0c0:	str	r0, [fp, #-12]
   1a0c4:	ldr	r1, [sp, #12]
   1a0c8:	str	r1, [fp, #-16]
   1a0cc:	ldr	r2, [sp, #16]
   1a0d0:	str	r2, [fp, #-20]	; 0xffffffec
   1a0d4:	ldr	r3, [sp, #4]
   1a0d8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a0dc:	mov	ip, #0
   1a0e0:	str	ip, [fp, #-28]	; 0xffffffe4
   1a0e4:	str	ip, [sp, #32]
   1a0e8:	str	ip, [sp, #28]
   1a0ec:	str	ip, [sp, #24]
   1a0f0:	str	ip, [sp, #20]
   1a0f4:	ldr	ip, [fp, #-16]
   1a0f8:	clz	lr, ip
   1a0fc:	lsr	lr, lr, #5
   1a100:	mov	r4, #16
   1a104:	cmp	ip, #0
   1a108:	movweq	r4, #8
   1a10c:	ldr	ip, [pc, #400]	; 1a2a4 <read_single_boolean_expression@@Base+0x228>
   1a110:	add	ip, pc, ip
   1a114:	ldr	r4, [ip, r4]!
   1a118:	ldr	r5, [ip, #4]
   1a11c:	adds	r4, r4, #1
   1a120:	adc	r5, r5, #0
   1a124:	str	r4, [ip]
   1a128:	str	r5, [ip, #4]
   1a12c:	tst	lr, #1
   1a130:	beq	1a164 <read_single_boolean_expression@@Base+0xe8>
   1a134:	ldr	r0, [pc, #364]	; 1a2a8 <read_single_boolean_expression@@Base+0x22c>
   1a138:	add	r0, pc, r0
   1a13c:	ldr	r1, [r0, #24]
   1a140:	ldr	r2, [r0, #28]
   1a144:	adds	r1, r1, #1
   1a148:	adc	r2, r2, #0
   1a14c:	str	r1, [r0, #24]
   1a150:	str	r2, [r0, #28]
   1a154:	ldr	r0, [fp, #-12]
   1a158:	bl	1a2bc <read_boolean_binary_expression@@Base>
   1a15c:	str	r0, [sp, #32]
   1a160:	b	1a268 <read_single_boolean_expression@@Base+0x1ec>
   1a164:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a168:	ldr	r0, [r0]
   1a16c:	cmp	r0, #0
   1a170:	mov	r1, r0
   1a174:	movwne	r1, #1
   1a178:	mov	r2, #40	; 0x28
   1a17c:	cmp	r0, #0
   1a180:	movwne	r2, #32
   1a184:	ldr	r0, [pc, #288]	; 1a2ac <read_single_boolean_expression@@Base+0x230>
   1a188:	add	r0, pc, r0
   1a18c:	ldr	r2, [r0, r2]!
   1a190:	ldr	r3, [r0, #4]
   1a194:	adds	r2, r2, #1
   1a198:	adc	r3, r3, #0
   1a19c:	str	r2, [r0]
   1a1a0:	str	r3, [r0, #4]
   1a1a4:	tst	r1, #1
   1a1a8:	beq	1a218 <read_single_boolean_expression@@Base+0x19c>
   1a1ac:	ldr	r0, [pc, #252]	; 1a2b0 <read_single_boolean_expression@@Base+0x234>
   1a1b0:	add	r0, pc, r0
   1a1b4:	ldr	r1, [r0, #48]	; 0x30
   1a1b8:	ldr	r2, [r0, #52]	; 0x34
   1a1bc:	adds	r1, r1, #1
   1a1c0:	adc	r2, r2, #0
   1a1c4:	str	r1, [r0, #48]	; 0x30
   1a1c8:	str	r2, [r0, #52]	; 0x34
   1a1cc:	ldr	r0, [fp, #-12]
   1a1d0:	bl	1a2bc <read_boolean_binary_expression@@Base>
   1a1d4:	str	r0, [sp, #28]
   1a1d8:	ldr	r0, [sp, #32]
   1a1dc:	str	r0, [sp, #24]
   1a1e0:	ldr	r0, [sp, #28]
   1a1e4:	str	r0, [sp, #20]
   1a1e8:	movw	r0, #20
   1a1ec:	bl	11e34 <malloc@plt>
   1a1f0:	str	r0, [sp, #32]
   1a1f4:	ldr	r0, [sp, #32]
   1a1f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a1fc:	ldr	r2, [sp, #24]
   1a200:	ldr	r3, [sp, #20]
   1a204:	bl	17b78 <init_node_boolean_operator@@Base>
   1a208:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a20c:	movw	r1, #0
   1a210:	str	r1, [r0]
   1a214:	b	1a248 <read_single_boolean_expression@@Base+0x1cc>
   1a218:	ldr	r0, [pc, #116]	; 1a294 <read_single_boolean_expression@@Base+0x218>
   1a21c:	add	r1, pc, r0
   1a220:	ldr	r0, [pc, #112]	; 1a298 <read_single_boolean_expression@@Base+0x21c>
   1a224:	ldr	r0, [pc, r0]
   1a228:	ldr	r0, [r0]
   1a22c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a230:	ldr	r2, [r2, #4]
   1a234:	bl	11e94 <fprintf@plt>
   1a238:	movw	r1, #1
   1a23c:	str	r0, [sp]
   1a240:	mov	r0, r1
   1a244:	bl	11e70 <exit@plt>
   1a248:	ldr	r0, [pc, #100]	; 1a2b4 <read_single_boolean_expression@@Base+0x238>
   1a24c:	add	r0, pc, r0
   1a250:	ldr	r1, [r0, #56]	; 0x38
   1a254:	ldr	r2, [r0, #60]	; 0x3c
   1a258:	adds	r1, r1, #1
   1a25c:	adc	r2, r2, #0
   1a260:	str	r1, [r0, #56]	; 0x38
   1a264:	str	r2, [r0, #60]	; 0x3c
   1a268:	ldr	r0, [pc, #72]	; 1a2b8 <read_single_boolean_expression@@Base+0x23c>
   1a26c:	add	r0, pc, r0
   1a270:	ldr	r1, [r0, #64]	; 0x40
   1a274:	ldr	r2, [r0, #68]	; 0x44
   1a278:	adds	r1, r1, #1
   1a27c:	adc	r2, r2, #0
   1a280:	str	r1, [r0, #64]	; 0x40
   1a284:	str	r2, [r0, #68]	; 0x44
   1a288:	ldr	r0, [sp, #32]
   1a28c:	sub	sp, fp, #8
   1a290:	pop	{r4, r5, fp, pc}
   1a294:	andeq	r4, r0, r3, ror r9
   1a298:	muleq	r1, r0, lr
   1a29c:	andeq	r6, r1, ip, lsr #27
   1a2a0:	andeq	r6, r1, r0, lsr #27
   1a2a4:	andeq	r6, r1, r8, lsr #26
   1a2a8:	andeq	r6, r1, r0, lsl #26
   1a2ac:			; <UNDEFINED> instruction: 0x00016cb0
   1a2b0:	andeq	r6, r1, r8, lsl #25
   1a2b4:	andeq	r6, r1, ip, ror #23
   1a2b8:	andeq	r6, r1, ip, asr #23

0001a2bc <read_boolean_binary_expression@@Base>:
   1a2bc:	push	{fp, lr}
   1a2c0:	mov	fp, sp
   1a2c4:	sub	sp, sp, #48	; 0x30
   1a2c8:	ldr	r1, [pc, #868]	; 1a634 <read_boolean_binary_expression@@Base+0x378>
   1a2cc:	add	r1, pc, r1
   1a2d0:	ldr	r2, [r1, #4]
   1a2d4:	ldr	r3, [pc, #860]	; 1a638 <read_boolean_binary_expression@@Base+0x37c>
   1a2d8:	ldr	r3, [pc, r3]
   1a2dc:	adds	r3, r3, #1
   1a2e0:	adc	r2, r2, #0
   1a2e4:	str	r3, [r1]
   1a2e8:	str	r2, [r1, #4]
   1a2ec:	str	r0, [sp, #4]
   1a2f0:	ldr	r0, [sp, #4]
   1a2f4:	str	r0, [fp, #-8]
   1a2f8:	mov	r1, #0
   1a2fc:	str	r1, [fp, #-12]
   1a300:	str	r1, [fp, #-16]
   1a304:	str	r1, [fp, #-20]	; 0xffffffec
   1a308:	str	r1, [sp, #24]
   1a30c:	str	r1, [sp, #20]
   1a310:	str	r1, [sp, #16]
   1a314:	str	r1, [sp, #12]
   1a318:	ldr	r1, [fp, #-8]
   1a31c:	ldr	r0, [r1]
   1a320:	bl	12050 <next@@Base>
   1a324:	str	r0, [sp, #20]
   1a328:	ldr	r0, [sp, #20]
   1a32c:	ldr	r0, [r0]
   1a330:	sub	r1, r0, #1
   1a334:	cmp	r0, #1
   1a338:	movwne	r1, #1
   1a33c:	mov	lr, #16
   1a340:	cmp	r0, #1
   1a344:	movwne	lr, #8
   1a348:	ldr	r0, [pc, #748]	; 1a63c <read_boolean_binary_expression@@Base+0x380>
   1a34c:	add	r0, pc, r0
   1a350:	ldr	lr, [r0, lr]!
   1a354:	ldr	r2, [r0, #4]
   1a358:	adds	lr, lr, #1
   1a35c:	adc	r2, r2, #0
   1a360:	str	lr, [r0]
   1a364:	str	r2, [r0, #4]
   1a368:	tst	r1, #1
   1a36c:	beq	1a424 <read_boolean_binary_expression@@Base+0x168>
   1a370:	ldr	r0, [sp, #20]
   1a374:	ldr	r0, [r0]
   1a378:	sub	r1, r0, #12
   1a37c:	clz	r1, r1
   1a380:	lsr	r1, r1, #5
   1a384:	mov	r2, #32
   1a388:	cmp	r0, #12
   1a38c:	movweq	r2, #24
   1a390:	ldr	r0, [pc, #680]	; 1a640 <read_boolean_binary_expression@@Base+0x384>
   1a394:	add	r0, pc, r0
   1a398:	ldr	r2, [r0, r2]!
   1a39c:	ldr	r3, [r0, #4]
   1a3a0:	adds	r2, r2, #1
   1a3a4:	adc	r3, r3, #0
   1a3a8:	str	r2, [r0]
   1a3ac:	str	r3, [r0, #4]
   1a3b0:	tst	r1, #1
   1a3b4:	beq	1a3f8 <read_boolean_binary_expression@@Base+0x13c>
   1a3b8:	ldr	r0, [pc, #644]	; 1a644 <read_boolean_binary_expression@@Base+0x388>
   1a3bc:	add	r0, pc, r0
   1a3c0:	ldr	r1, [r0, #40]	; 0x28
   1a3c4:	ldr	r2, [r0, #44]	; 0x2c
   1a3c8:	adds	r1, r1, #1
   1a3cc:	adc	r2, r2, #0
   1a3d0:	str	r1, [r0, #40]	; 0x28
   1a3d4:	str	r2, [r0, #44]	; 0x2c
   1a3d8:	ldr	r0, [fp, #-8]
   1a3dc:	ldr	r0, [r0]
   1a3e0:	ldr	r1, [sp, #20]
   1a3e4:	bl	12558 <push_back@@Base>
   1a3e8:	ldr	r0, [fp, #-8]
   1a3ec:	bl	1a664 <read_boolean_unary_expression@@Base>
   1a3f0:	str	r0, [fp, #-4]
   1a3f4:	b	1a608 <read_boolean_binary_expression@@Base+0x34c>
   1a3f8:	ldr	r0, [pc, #584]	; 1a648 <read_boolean_binary_expression@@Base+0x38c>
   1a3fc:	add	r0, pc, r0
   1a400:	ldr	r1, [r0, #48]	; 0x30
   1a404:	ldr	r2, [r0, #52]	; 0x34
   1a408:	adds	r1, r1, #1
   1a40c:	adc	r2, r2, #0
   1a410:	str	r1, [r0, #48]	; 0x30
   1a414:	str	r2, [r0, #52]	; 0x34
   1a418:	movw	r0, #0
   1a41c:	str	r0, [fp, #-4]
   1a420:	b	1a608 <read_boolean_binary_expression@@Base+0x34c>
   1a424:	ldr	r0, [sp, #20]
   1a428:	str	r0, [sp, #16]
   1a42c:	mov	r0, #12
   1a430:	bl	11e34 <malloc@plt>
   1a434:	str	r0, [fp, #-16]
   1a438:	ldr	r0, [fp, #-16]
   1a43c:	ldr	lr, [sp, #16]
   1a440:	ldr	r1, [lr, #4]
   1a444:	bl	178e0 <init_node_int@@Base>
   1a448:	ldr	r0, [sp, #16]
   1a44c:	bl	16c90 <free_token_int_value@@Base>
   1a450:	ldr	r0, [fp, #-16]
   1a454:	str	r0, [fp, #-20]	; 0xffffffec
   1a458:	ldr	r0, [fp, #-8]
   1a45c:	ldr	r0, [r0]
   1a460:	bl	12050 <next@@Base>
   1a464:	str	r0, [sp, #20]
   1a468:	ldr	r0, [sp, #20]
   1a46c:	ldr	r0, [r0]
   1a470:	sub	r1, r0, #12
   1a474:	cmp	r0, #12
   1a478:	movwne	r1, #1
   1a47c:	mov	lr, #64	; 0x40
   1a480:	cmp	r0, #12
   1a484:	movwne	lr, #56	; 0x38
   1a488:	ldr	r0, [pc, #444]	; 1a64c <read_boolean_binary_expression@@Base+0x390>
   1a48c:	add	r0, pc, r0
   1a490:	ldr	lr, [r0, lr]!
   1a494:	ldr	r2, [r0, #4]
   1a498:	adds	lr, lr, #1
   1a49c:	adc	r2, r2, #0
   1a4a0:	str	lr, [r0]
   1a4a4:	str	r2, [r0, #4]
   1a4a8:	tst	r1, #1
   1a4ac:	beq	1a4e4 <read_boolean_binary_expression@@Base+0x228>
   1a4b0:	ldr	r0, [pc, #408]	; 1a650 <read_boolean_binary_expression@@Base+0x394>
   1a4b4:	add	r0, pc, r0
   1a4b8:	ldr	r1, [r0, #72]	; 0x48
   1a4bc:	ldr	r2, [r0, #76]	; 0x4c
   1a4c0:	adds	r1, r1, #1
   1a4c4:	adc	r2, r2, #0
   1a4c8:	str	r1, [r0, #72]	; 0x48
   1a4cc:	str	r2, [r0, #76]	; 0x4c
   1a4d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a4d4:	bl	17c48 <free_node@@Base>
   1a4d8:	movw	r0, #0
   1a4dc:	str	r0, [fp, #-4]
   1a4e0:	b	1a608 <read_boolean_binary_expression@@Base+0x34c>
   1a4e4:	ldr	r0, [sp, #20]
   1a4e8:	str	r0, [sp, #12]
   1a4ec:	ldr	r0, [sp, #12]
   1a4f0:	bl	18534 <get_boolean_op_value@@Base>
   1a4f4:	str	r0, [sp, #8]
   1a4f8:	ldr	r0, [sp, #12]
   1a4fc:	bl	171e4 <free_token_boolean_op@@Base>
   1a500:	ldr	r0, [fp, #-8]
   1a504:	ldr	r0, [r0]
   1a508:	bl	12050 <next@@Base>
   1a50c:	str	r0, [sp, #20]
   1a510:	ldr	r0, [sp, #20]
   1a514:	ldr	r0, [r0]
   1a518:	sub	lr, r0, #1
   1a51c:	cmp	r0, #1
   1a520:	movwne	lr, #1
   1a524:	mov	r1, #88	; 0x58
   1a528:	cmp	r0, #1
   1a52c:	movwne	r1, #80	; 0x50
   1a530:	ldr	r0, [pc, #284]	; 1a654 <read_boolean_binary_expression@@Base+0x398>
   1a534:	add	r0, pc, r0
   1a538:	ldr	r1, [r0, r1]!
   1a53c:	ldr	r2, [r0, #4]
   1a540:	adds	r1, r1, #1
   1a544:	adc	r2, r2, #0
   1a548:	str	r1, [r0]
   1a54c:	str	r2, [r0, #4]
   1a550:	tst	lr, #1
   1a554:	beq	1a58c <read_boolean_binary_expression@@Base+0x2d0>
   1a558:	ldr	r0, [pc, #248]	; 1a658 <read_boolean_binary_expression@@Base+0x39c>
   1a55c:	add	r0, pc, r0
   1a560:	ldr	r1, [r0, #96]	; 0x60
   1a564:	ldr	r2, [r0, #100]	; 0x64
   1a568:	adds	r1, r1, #1
   1a56c:	adc	r2, r2, #0
   1a570:	str	r1, [r0, #96]	; 0x60
   1a574:	str	r2, [r0, #100]	; 0x64
   1a578:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a57c:	bl	17c48 <free_node@@Base>
   1a580:	movw	r0, #0
   1a584:	str	r0, [fp, #-4]
   1a588:	b	1a608 <read_boolean_binary_expression@@Base+0x34c>
   1a58c:	ldr	r0, [pc, #200]	; 1a65c <read_boolean_binary_expression@@Base+0x3a0>
   1a590:	add	r0, pc, r0
   1a594:	ldr	r1, [r0, #104]	; 0x68
   1a598:	ldr	r2, [r0, #108]	; 0x6c
   1a59c:	adds	r1, r1, #1
   1a5a0:	adc	r2, r2, #0
   1a5a4:	str	r1, [r0, #104]	; 0x68
   1a5a8:	str	r2, [r0, #108]	; 0x6c
   1a5ac:	ldr	r0, [sp, #20]
   1a5b0:	str	r0, [sp, #16]
   1a5b4:	movw	r0, #12
   1a5b8:	bl	11e34 <malloc@plt>
   1a5bc:	str	r0, [fp, #-16]
   1a5c0:	ldr	r0, [fp, #-16]
   1a5c4:	ldr	r1, [sp, #16]
   1a5c8:	ldr	r1, [r1, #4]
   1a5cc:	bl	178e0 <init_node_int@@Base>
   1a5d0:	ldr	r0, [sp, #16]
   1a5d4:	bl	16c90 <free_token_int_value@@Base>
   1a5d8:	ldr	r0, [fp, #-16]
   1a5dc:	str	r0, [sp, #24]
   1a5e0:	movw	r0, #20
   1a5e4:	bl	11e34 <malloc@plt>
   1a5e8:	str	r0, [fp, #-12]
   1a5ec:	ldr	r0, [fp, #-12]
   1a5f0:	ldr	r1, [sp, #8]
   1a5f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a5f8:	ldr	r3, [sp, #24]
   1a5fc:	bl	17b78 <init_node_boolean_operator@@Base>
   1a600:	ldr	r0, [fp, #-12]
   1a604:	str	r0, [fp, #-4]
   1a608:	ldr	r0, [pc, #80]	; 1a660 <read_boolean_binary_expression@@Base+0x3a4>
   1a60c:	add	r0, pc, r0
   1a610:	ldr	r1, [r0, #112]	; 0x70
   1a614:	ldr	r2, [r0, #116]	; 0x74
   1a618:	adds	r1, r1, #1
   1a61c:	adc	r2, r2, #0
   1a620:	str	r1, [r0, #112]	; 0x70
   1a624:	str	r2, [r0, #116]	; 0x74
   1a628:	ldr	r0, [fp, #-4]
   1a62c:	mov	sp, fp
   1a630:	pop	{fp, pc}
   1a634:			; <UNDEFINED> instruction: 0x00016bbc
   1a638:			; <UNDEFINED> instruction: 0x00016bb0
   1a63c:	andeq	r6, r1, ip, lsr fp
   1a640:	strdeq	r6, [r1], -r4
   1a644:	andeq	r6, r1, ip, asr #21
   1a648:	andeq	r6, r1, ip, lsl #21
   1a64c:	strdeq	r6, [r1], -ip
   1a650:	ldrdeq	r6, [r1], -r4
   1a654:	andeq	r6, r1, r4, asr r9
   1a658:	andeq	r6, r1, ip, lsr #18
   1a65c:	strdeq	r6, [r1], -r8
   1a660:	andeq	r6, r1, ip, ror r8

0001a664 <read_boolean_unary_expression@@Base>:
   1a664:	push	{fp, lr}
   1a668:	mov	fp, sp
   1a66c:	sub	sp, sp, #40	; 0x28
   1a670:	ldr	r1, [pc, #532]	; 1a88c <read_boolean_unary_expression@@Base+0x228>
   1a674:	add	r1, pc, r1
   1a678:	ldr	r2, [r1, #4]
   1a67c:	ldr	r3, [pc, #524]	; 1a890 <read_boolean_unary_expression@@Base+0x22c>
   1a680:	ldr	r3, [pc, r3]
   1a684:	adds	r3, r3, #1
   1a688:	adc	r2, r2, #0
   1a68c:	str	r3, [r1]
   1a690:	str	r2, [r1, #4]
   1a694:	str	r0, [sp, #4]
   1a698:	ldr	r0, [sp, #4]
   1a69c:	str	r0, [fp, #-8]
   1a6a0:	mov	r1, #0
   1a6a4:	str	r1, [fp, #-12]
   1a6a8:	str	r1, [fp, #-16]
   1a6ac:	str	r1, [sp, #20]
   1a6b0:	str	r1, [sp, #16]
   1a6b4:	str	r1, [sp, #12]
   1a6b8:	mov	r0, #20
   1a6bc:	bl	11e34 <malloc@plt>
   1a6c0:	str	r0, [fp, #-12]
   1a6c4:	ldr	r0, [fp, #-8]
   1a6c8:	ldr	r0, [r0]
   1a6cc:	bl	12050 <next@@Base>
   1a6d0:	str	r0, [sp, #16]
   1a6d4:	ldr	r0, [sp, #16]
   1a6d8:	ldr	r0, [r0]
   1a6dc:	sub	r1, r0, #12
   1a6e0:	cmp	r0, #12
   1a6e4:	movwne	r1, #1
   1a6e8:	mov	lr, #16
   1a6ec:	cmp	r0, #12
   1a6f0:	movwne	lr, #8
   1a6f4:	ldr	r0, [pc, #408]	; 1a894 <read_boolean_unary_expression@@Base+0x230>
   1a6f8:	add	r0, pc, r0
   1a6fc:	ldr	lr, [r0, lr]!
   1a700:	ldr	r2, [r0, #4]
   1a704:	adds	lr, lr, #1
   1a708:	adc	r2, r2, #0
   1a70c:	str	lr, [r0]
   1a710:	str	r2, [r0, #4]
   1a714:	tst	r1, #1
   1a718:	beq	1a750 <read_boolean_unary_expression@@Base+0xec>
   1a71c:	ldr	r0, [pc, #372]	; 1a898 <read_boolean_unary_expression@@Base+0x234>
   1a720:	add	r0, pc, r0
   1a724:	ldr	r1, [r0, #24]
   1a728:	ldr	r2, [r0, #28]
   1a72c:	adds	r1, r1, #1
   1a730:	adc	r2, r2, #0
   1a734:	str	r1, [r0, #24]
   1a738:	str	r2, [r0, #28]
   1a73c:	ldr	r0, [fp, #-12]
   1a740:	bl	18428 <free_node_boolean_operator@@Base>
   1a744:	movw	r0, #0
   1a748:	str	r0, [fp, #-4]
   1a74c:	b	1a860 <read_boolean_unary_expression@@Base+0x1fc>
   1a750:	ldr	r0, [sp, #16]
   1a754:	bl	18534 <get_boolean_op_value@@Base>
   1a758:	str	r0, [sp, #8]
   1a75c:	ldr	r0, [sp, #16]
   1a760:	bl	171e4 <free_token_boolean_op@@Base>
   1a764:	ldr	r0, [fp, #-8]
   1a768:	ldr	r0, [r0]
   1a76c:	bl	12050 <next@@Base>
   1a770:	str	r0, [sp, #16]
   1a774:	ldr	r0, [sp, #16]
   1a778:	ldr	r0, [r0]
   1a77c:	sub	lr, r0, #1
   1a780:	cmp	r0, #1
   1a784:	movwne	lr, #1
   1a788:	mov	r1, #40	; 0x28
   1a78c:	cmp	r0, #1
   1a790:	movwne	r1, #32
   1a794:	ldr	r0, [pc, #256]	; 1a89c <read_boolean_unary_expression@@Base+0x238>
   1a798:	add	r0, pc, r0
   1a79c:	ldr	r1, [r0, r1]!
   1a7a0:	ldr	r2, [r0, #4]
   1a7a4:	adds	r1, r1, #1
   1a7a8:	adc	r2, r2, #0
   1a7ac:	str	r1, [r0]
   1a7b0:	str	r2, [r0, #4]
   1a7b4:	tst	lr, #1
   1a7b8:	beq	1a7f0 <read_boolean_unary_expression@@Base+0x18c>
   1a7bc:	ldr	r0, [pc, #220]	; 1a8a0 <read_boolean_unary_expression@@Base+0x23c>
   1a7c0:	add	r0, pc, r0
   1a7c4:	ldr	r1, [r0, #48]	; 0x30
   1a7c8:	ldr	r2, [r0, #52]	; 0x34
   1a7cc:	adds	r1, r1, #1
   1a7d0:	adc	r2, r2, #0
   1a7d4:	str	r1, [r0, #48]	; 0x30
   1a7d8:	str	r2, [r0, #52]	; 0x34
   1a7dc:	ldr	r0, [fp, #-12]
   1a7e0:	bl	18428 <free_node_boolean_operator@@Base>
   1a7e4:	movw	r0, #0
   1a7e8:	str	r0, [fp, #-4]
   1a7ec:	b	1a860 <read_boolean_unary_expression@@Base+0x1fc>
   1a7f0:	ldr	r0, [pc, #172]	; 1a8a4 <read_boolean_unary_expression@@Base+0x240>
   1a7f4:	add	r0, pc, r0
   1a7f8:	ldr	r1, [r0, #56]	; 0x38
   1a7fc:	ldr	r2, [r0, #60]	; 0x3c
   1a800:	adds	r1, r1, #1
   1a804:	adc	r2, r2, #0
   1a808:	str	r1, [r0, #56]	; 0x38
   1a80c:	str	r2, [r0, #60]	; 0x3c
   1a810:	ldr	r0, [sp, #16]
   1a814:	str	r0, [sp, #12]
   1a818:	movw	r0, #12
   1a81c:	bl	11e34 <malloc@plt>
   1a820:	str	r0, [fp, #-16]
   1a824:	ldr	r0, [fp, #-16]
   1a828:	ldr	r1, [sp, #12]
   1a82c:	ldr	r1, [r1, #4]
   1a830:	bl	178e0 <init_node_int@@Base>
   1a834:	ldr	r0, [sp, #12]
   1a838:	bl	16c90 <free_token_int_value@@Base>
   1a83c:	ldr	r0, [fp, #-16]
   1a840:	str	r0, [sp, #20]
   1a844:	ldr	r0, [fp, #-12]
   1a848:	ldr	r1, [sp, #8]
   1a84c:	ldr	r2, [sp, #20]
   1a850:	movw	r3, #0
   1a854:	bl	17b78 <init_node_boolean_operator@@Base>
   1a858:	ldr	r0, [fp, #-12]
   1a85c:	str	r0, [fp, #-4]
   1a860:	ldr	r0, [pc, #64]	; 1a8a8 <read_boolean_unary_expression@@Base+0x244>
   1a864:	add	r0, pc, r0
   1a868:	ldr	r1, [r0, #64]	; 0x40
   1a86c:	ldr	r2, [r0, #68]	; 0x44
   1a870:	adds	r1, r1, #1
   1a874:	adc	r2, r2, #0
   1a878:	str	r1, [r0, #64]	; 0x40
   1a87c:	str	r2, [r0, #68]	; 0x44
   1a880:	ldr	r0, [fp, #-4]
   1a884:	mov	sp, fp
   1a888:	pop	{fp, pc}
   1a88c:	muleq	r1, r4, r8
   1a890:	andeq	r6, r1, r8, lsl #17
   1a894:	andeq	r6, r1, r0, lsl r8
   1a898:	andeq	r6, r1, r8, ror #15
   1a89c:	andeq	r6, r1, r0, ror r7
   1a8a0:	andeq	r6, r1, r8, asr #14
   1a8a4:	andeq	r6, r1, r4, lsl r7
   1a8a8:	andeq	r6, r1, r4, lsr #13
   1a8ac:	sub	sp, sp, #12
   1a8b0:	ldr	r0, [r0]
   1a8b4:	cmn	r0, #1
   1a8b8:	str	r1, [sp, #8]
   1a8bc:	str	r0, [sp, #4]
   1a8c0:	beq	1a900 <read_boolean_unary_expression@@Base+0x29c>
   1a8c4:	ldr	r0, [sp, #8]
   1a8c8:	ldr	r1, [sp, #4]
   1a8cc:	add	r2, r0, r1, lsl #2
   1a8d0:	ldr	r2, [r2]
   1a8d4:	movw	r3, #0
   1a8d8:	cmp	r2, r3
   1a8dc:	str	r2, [sp]
   1a8e0:	beq	1a900 <read_boolean_unary_expression@@Base+0x29c>
   1a8e4:	ldr	r0, [sp]
   1a8e8:	ldr	r1, [r0]
   1a8ec:	ldr	r2, [r0, #4]
   1a8f0:	adds	r1, r1, #1
   1a8f4:	adc	r2, r2, #0
   1a8f8:	str	r1, [r0]
   1a8fc:	str	r2, [r0, #4]
   1a900:	add	sp, sp, #12
   1a904:	bx	lr
   1a908:	push	{r4, sl, fp, lr}
   1a90c:	add	fp, sp, #8
   1a910:	sub	sp, sp, #40	; 0x28
   1a914:	movw	r0, #0
   1a918:	str	r0, [fp, #-12]
   1a91c:	b	1a920 <read_boolean_unary_expression@@Base+0x2bc>
   1a920:	ldr	r0, [fp, #-12]
   1a924:	ldr	r1, [pc, #244]	; 1aa20 <read_boolean_unary_expression@@Base+0x3bc>
   1a928:	add	r1, pc, r1
   1a92c:	movw	r2, #24
   1a930:	mul	r2, r0, r2
   1a934:	add	r1, r1, r2
   1a938:	ldr	r2, [r1]
   1a93c:	ldr	r3, [r1, #4]
   1a940:	ldr	ip, [r1, #8]
   1a944:	str	r0, [fp, #-16]
   1a948:	mov	r0, r2
   1a94c:	str	r1, [fp, #-20]	; 0xffffffec
   1a950:	mov	r1, r3
   1a954:	mov	r2, ip
   1a958:	bl	1ae34 <read_boolean_unary_expression@@Base+0x7d0>
   1a95c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a960:	ldr	r1, [r0, #12]
   1a964:	ldr	r2, [r0, #16]
   1a968:	ldr	r3, [r0, #20]
   1a96c:	movw	ip, #0
   1a970:	cmp	ip, r1
   1a974:	str	r1, [sp, #24]
   1a978:	str	r2, [sp, #20]
   1a97c:	str	r3, [sp, #16]
   1a980:	str	ip, [sp, #12]
   1a984:	bge	1a9fc <read_boolean_unary_expression@@Base+0x398>
   1a988:	ldr	r0, [sp, #12]
   1a98c:	add	r1, r0, r0, lsl #2
   1a990:	ldr	r2, [sp, #20]
   1a994:	ldr	r1, [r2, r1, lsl #2]!
   1a998:	ldr	r3, [r2, #4]
   1a99c:	ldr	ip, [r2, #8]
   1a9a0:	ldr	lr, [r2, #16]
   1a9a4:	ldrb	r2, [r2, #12]
   1a9a8:	mov	r4, sp
   1a9ac:	str	lr, [r4]
   1a9b0:	str	r0, [sp, #8]
   1a9b4:	mov	r0, r1
   1a9b8:	mov	r1, r3
   1a9bc:	str	r2, [sp, #4]
   1a9c0:	mov	r2, ip
   1a9c4:	ldr	r3, [sp, #4]
   1a9c8:	bl	1b598 <read_boolean_unary_expression@@Base+0xf34>
   1a9cc:	ldr	r0, [sp, #16]
   1a9d0:	ldr	r1, [sp, #8]
   1a9d4:	add	r2, r0, r1, lsl #3
   1a9d8:	ldr	r0, [r2]
   1a9dc:	ldr	r1, [r2, #4]
   1a9e0:	bl	1be4c <read_boolean_unary_expression@@Base+0x17e8>
   1a9e4:	ldr	r0, [sp, #8]
   1a9e8:	add	r1, r0, #1
   1a9ec:	ldr	r2, [sp, #24]
   1a9f0:	cmp	r1, r2
   1a9f4:	str	r1, [sp, #12]
   1a9f8:	blt	1a988 <read_boolean_unary_expression@@Base+0x324>
   1a9fc:	bl	1c5c8 <read_boolean_unary_expression@@Base+0x1f64>
   1aa00:	bl	1d334 <read_boolean_unary_expression@@Base+0x2cd0>
   1aa04:	ldr	lr, [fp, #-16]
   1aa08:	add	r0, lr, #1
   1aa0c:	cmp	r0, #1
   1aa10:	str	r0, [fp, #-12]
   1aa14:	blt	1a920 <read_boolean_unary_expression@@Base+0x2bc>
   1aa18:	sub	sp, fp, #8
   1aa1c:	pop	{r4, sl, fp, pc}
   1aa20:	andeq	r5, r1, r0, asr #11
   1aa24:	push	{fp, lr}
   1aa28:	mov	fp, sp
   1aa2c:	bl	1a908 <read_boolean_unary_expression@@Base+0x2a4>
   1aa30:	ldr	lr, [pc, #936]	; 1ade0 <read_boolean_unary_expression@@Base+0x77c>
   1aa34:	add	lr, pc, lr
   1aa38:	mov	r0, #0
   1aa3c:	str	r0, [lr, #12]
   1aa40:	str	r0, [lr, #8]
   1aa44:	str	r0, [lr, #4]
   1aa48:	str	r0, [lr]
   1aa4c:	ldr	lr, [pc, #912]	; 1ade4 <read_boolean_unary_expression@@Base+0x780>
   1aa50:	add	lr, pc, lr
   1aa54:	str	r0, [lr, #12]
   1aa58:	str	r0, [lr, #8]
   1aa5c:	str	r0, [lr, #4]
   1aa60:	str	r0, [lr]
   1aa64:	ldr	lr, [pc, #892]	; 1ade8 <read_boolean_unary_expression@@Base+0x784>
   1aa68:	add	lr, pc, lr
   1aa6c:	str	r0, [lr, #12]
   1aa70:	str	r0, [lr, #8]
   1aa74:	str	r0, [lr, #4]
   1aa78:	str	r0, [lr]
   1aa7c:	ldr	lr, [pc, #872]	; 1adec <read_boolean_unary_expression@@Base+0x788>
   1aa80:	add	lr, pc, lr
   1aa84:	str	r0, [lr, #116]	; 0x74
   1aa88:	str	r0, [lr, #112]	; 0x70
   1aa8c:	str	r0, [lr, #108]	; 0x6c
   1aa90:	str	r0, [lr, #104]	; 0x68
   1aa94:	str	r0, [lr, #100]	; 0x64
   1aa98:	str	r0, [lr, #96]	; 0x60
   1aa9c:	str	r0, [lr, #92]	; 0x5c
   1aaa0:	str	r0, [lr, #88]	; 0x58
   1aaa4:	str	r0, [lr, #84]	; 0x54
   1aaa8:	str	r0, [lr, #80]	; 0x50
   1aaac:	str	r0, [lr, #76]	; 0x4c
   1aab0:	str	r0, [lr, #72]	; 0x48
   1aab4:	str	r0, [lr, #68]	; 0x44
   1aab8:	str	r0, [lr, #64]	; 0x40
   1aabc:	str	r0, [lr, #60]	; 0x3c
   1aac0:	str	r0, [lr, #56]	; 0x38
   1aac4:	str	r0, [lr, #52]	; 0x34
   1aac8:	str	r0, [lr, #48]	; 0x30
   1aacc:	str	r0, [lr, #44]	; 0x2c
   1aad0:	str	r0, [lr, #40]	; 0x28
   1aad4:	str	r0, [lr, #36]	; 0x24
   1aad8:	str	r0, [lr, #32]
   1aadc:	str	r0, [lr, #28]
   1aae0:	str	r0, [lr, #24]
   1aae4:	str	r0, [lr, #20]
   1aae8:	str	r0, [lr, #16]
   1aaec:	str	r0, [lr, #12]
   1aaf0:	str	r0, [lr, #8]
   1aaf4:	str	r0, [lr, #4]
   1aaf8:	str	r0, [lr]
   1aafc:	ldr	lr, [pc, #748]	; 1adf0 <read_boolean_unary_expression@@Base+0x78c>
   1ab00:	add	lr, pc, lr
   1ab04:	str	r0, [lr, #156]	; 0x9c
   1ab08:	str	r0, [lr, #152]	; 0x98
   1ab0c:	str	r0, [lr, #148]	; 0x94
   1ab10:	str	r0, [lr, #144]	; 0x90
   1ab14:	str	r0, [lr, #140]	; 0x8c
   1ab18:	str	r0, [lr, #136]	; 0x88
   1ab1c:	str	r0, [lr, #132]	; 0x84
   1ab20:	str	r0, [lr, #128]	; 0x80
   1ab24:	str	r0, [lr, #124]	; 0x7c
   1ab28:	str	r0, [lr, #120]	; 0x78
   1ab2c:	str	r0, [lr, #116]	; 0x74
   1ab30:	str	r0, [lr, #112]	; 0x70
   1ab34:	str	r0, [lr, #108]	; 0x6c
   1ab38:	str	r0, [lr, #104]	; 0x68
   1ab3c:	str	r0, [lr, #100]	; 0x64
   1ab40:	str	r0, [lr, #96]	; 0x60
   1ab44:	str	r0, [lr, #92]	; 0x5c
   1ab48:	str	r0, [lr, #88]	; 0x58
   1ab4c:	str	r0, [lr, #84]	; 0x54
   1ab50:	str	r0, [lr, #80]	; 0x50
   1ab54:	str	r0, [lr, #76]	; 0x4c
   1ab58:	str	r0, [lr, #72]	; 0x48
   1ab5c:	str	r0, [lr, #68]	; 0x44
   1ab60:	str	r0, [lr, #64]	; 0x40
   1ab64:	str	r0, [lr, #60]	; 0x3c
   1ab68:	str	r0, [lr, #56]	; 0x38
   1ab6c:	str	r0, [lr, #52]	; 0x34
   1ab70:	str	r0, [lr, #48]	; 0x30
   1ab74:	str	r0, [lr, #44]	; 0x2c
   1ab78:	str	r0, [lr, #40]	; 0x28
   1ab7c:	str	r0, [lr, #36]	; 0x24
   1ab80:	str	r0, [lr, #32]
   1ab84:	str	r0, [lr, #28]
   1ab88:	str	r0, [lr, #24]
   1ab8c:	str	r0, [lr, #20]
   1ab90:	str	r0, [lr, #16]
   1ab94:	str	r0, [lr, #12]
   1ab98:	str	r0, [lr, #8]
   1ab9c:	str	r0, [lr, #4]
   1aba0:	str	r0, [lr]
   1aba4:	ldr	lr, [pc, #584]	; 1adf4 <read_boolean_unary_expression@@Base+0x790>
   1aba8:	add	lr, pc, lr
   1abac:	str	r0, [lr, #68]	; 0x44
   1abb0:	str	r0, [lr, #64]	; 0x40
   1abb4:	str	r0, [lr, #60]	; 0x3c
   1abb8:	str	r0, [lr, #56]	; 0x38
   1abbc:	str	r0, [lr, #52]	; 0x34
   1abc0:	str	r0, [lr, #48]	; 0x30
   1abc4:	str	r0, [lr, #44]	; 0x2c
   1abc8:	str	r0, [lr, #40]	; 0x28
   1abcc:	str	r0, [lr, #36]	; 0x24
   1abd0:	str	r0, [lr, #32]
   1abd4:	str	r0, [lr, #28]
   1abd8:	str	r0, [lr, #24]
   1abdc:	str	r0, [lr, #20]
   1abe0:	str	r0, [lr, #16]
   1abe4:	str	r0, [lr, #12]
   1abe8:	str	r0, [lr, #8]
   1abec:	str	r0, [lr, #4]
   1abf0:	str	r0, [lr]
   1abf4:	ldr	lr, [pc, #508]	; 1adf8 <read_boolean_unary_expression@@Base+0x794>
   1abf8:	add	lr, pc, lr
   1abfc:	str	r0, [lr, #76]	; 0x4c
   1ac00:	str	r0, [lr, #72]	; 0x48
   1ac04:	str	r0, [lr, #68]	; 0x44
   1ac08:	str	r0, [lr, #64]	; 0x40
   1ac0c:	str	r0, [lr, #60]	; 0x3c
   1ac10:	str	r0, [lr, #56]	; 0x38
   1ac14:	str	r0, [lr, #52]	; 0x34
   1ac18:	str	r0, [lr, #48]	; 0x30
   1ac1c:	str	r0, [lr, #44]	; 0x2c
   1ac20:	str	r0, [lr, #40]	; 0x28
   1ac24:	str	r0, [lr, #36]	; 0x24
   1ac28:	str	r0, [lr, #32]
   1ac2c:	str	r0, [lr, #28]
   1ac30:	str	r0, [lr, #24]
   1ac34:	str	r0, [lr, #20]
   1ac38:	str	r0, [lr, #16]
   1ac3c:	str	r0, [lr, #12]
   1ac40:	str	r0, [lr, #8]
   1ac44:	str	r0, [lr, #4]
   1ac48:	str	r0, [lr]
   1ac4c:	ldr	lr, [pc, #424]	; 1adfc <read_boolean_unary_expression@@Base+0x798>
   1ac50:	add	lr, pc, lr
   1ac54:	str	r0, [lr, #100]	; 0x64
   1ac58:	str	r0, [lr, #96]	; 0x60
   1ac5c:	str	r0, [lr, #92]	; 0x5c
   1ac60:	str	r0, [lr, #88]	; 0x58
   1ac64:	str	r0, [lr, #84]	; 0x54
   1ac68:	str	r0, [lr, #80]	; 0x50
   1ac6c:	str	r0, [lr, #76]	; 0x4c
   1ac70:	str	r0, [lr, #72]	; 0x48
   1ac74:	str	r0, [lr, #68]	; 0x44
   1ac78:	str	r0, [lr, #64]	; 0x40
   1ac7c:	str	r0, [lr, #60]	; 0x3c
   1ac80:	str	r0, [lr, #56]	; 0x38
   1ac84:	str	r0, [lr, #52]	; 0x34
   1ac88:	str	r0, [lr, #48]	; 0x30
   1ac8c:	str	r0, [lr, #44]	; 0x2c
   1ac90:	str	r0, [lr, #40]	; 0x28
   1ac94:	str	r0, [lr, #36]	; 0x24
   1ac98:	str	r0, [lr, #32]
   1ac9c:	str	r0, [lr, #28]
   1aca0:	str	r0, [lr, #24]
   1aca4:	str	r0, [lr, #20]
   1aca8:	str	r0, [lr, #16]
   1acac:	str	r0, [lr, #12]
   1acb0:	str	r0, [lr, #8]
   1acb4:	str	r0, [lr, #4]
   1acb8:	str	r0, [lr]
   1acbc:	ldr	lr, [pc, #316]	; 1ae00 <read_boolean_unary_expression@@Base+0x79c>
   1acc0:	add	lr, pc, lr
   1acc4:	str	r0, [lr, #68]	; 0x44
   1acc8:	str	r0, [lr, #64]	; 0x40
   1accc:	str	r0, [lr, #60]	; 0x3c
   1acd0:	str	r0, [lr, #56]	; 0x38
   1acd4:	str	r0, [lr, #52]	; 0x34
   1acd8:	str	r0, [lr, #48]	; 0x30
   1acdc:	str	r0, [lr, #44]	; 0x2c
   1ace0:	str	r0, [lr, #40]	; 0x28
   1ace4:	str	r0, [lr, #36]	; 0x24
   1ace8:	str	r0, [lr, #32]
   1acec:	str	r0, [lr, #28]
   1acf0:	str	r0, [lr, #24]
   1acf4:	str	r0, [lr, #20]
   1acf8:	str	r0, [lr, #16]
   1acfc:	str	r0, [lr, #12]
   1ad00:	str	r0, [lr, #8]
   1ad04:	str	r0, [lr, #4]
   1ad08:	str	r0, [lr]
   1ad0c:	ldr	lr, [pc, #240]	; 1ae04 <read_boolean_unary_expression@@Base+0x7a0>
   1ad10:	add	lr, pc, lr
   1ad14:	str	r0, [lr, #116]	; 0x74
   1ad18:	str	r0, [lr, #112]	; 0x70
   1ad1c:	str	r0, [lr, #108]	; 0x6c
   1ad20:	str	r0, [lr, #104]	; 0x68
   1ad24:	str	r0, [lr, #100]	; 0x64
   1ad28:	str	r0, [lr, #96]	; 0x60
   1ad2c:	str	r0, [lr, #92]	; 0x5c
   1ad30:	str	r0, [lr, #88]	; 0x58
   1ad34:	str	r0, [lr, #84]	; 0x54
   1ad38:	str	r0, [lr, #80]	; 0x50
   1ad3c:	str	r0, [lr, #76]	; 0x4c
   1ad40:	str	r0, [lr, #72]	; 0x48
   1ad44:	str	r0, [lr, #68]	; 0x44
   1ad48:	str	r0, [lr, #64]	; 0x40
   1ad4c:	str	r0, [lr, #60]	; 0x3c
   1ad50:	str	r0, [lr, #56]	; 0x38
   1ad54:	str	r0, [lr, #52]	; 0x34
   1ad58:	str	r0, [lr, #48]	; 0x30
   1ad5c:	str	r0, [lr, #44]	; 0x2c
   1ad60:	str	r0, [lr, #40]	; 0x28
   1ad64:	str	r0, [lr, #36]	; 0x24
   1ad68:	str	r0, [lr, #32]
   1ad6c:	str	r0, [lr, #28]
   1ad70:	str	r0, [lr, #24]
   1ad74:	str	r0, [lr, #20]
   1ad78:	str	r0, [lr, #16]
   1ad7c:	str	r0, [lr, #12]
   1ad80:	str	r0, [lr, #8]
   1ad84:	str	r0, [lr, #4]
   1ad88:	str	r0, [lr]
   1ad8c:	ldr	lr, [pc, #116]	; 1ae08 <read_boolean_unary_expression@@Base+0x7a4>
   1ad90:	add	lr, pc, lr
   1ad94:	str	r0, [lr, #68]	; 0x44
   1ad98:	str	r0, [lr, #64]	; 0x40
   1ad9c:	str	r0, [lr, #60]	; 0x3c
   1ada0:	str	r0, [lr, #56]	; 0x38
   1ada4:	str	r0, [lr, #52]	; 0x34
   1ada8:	str	r0, [lr, #48]	; 0x30
   1adac:	str	r0, [lr, #44]	; 0x2c
   1adb0:	str	r0, [lr, #40]	; 0x28
   1adb4:	str	r0, [lr, #36]	; 0x24
   1adb8:	str	r0, [lr, #32]
   1adbc:	str	r0, [lr, #28]
   1adc0:	str	r0, [lr, #24]
   1adc4:	str	r0, [lr, #20]
   1adc8:	str	r0, [lr, #16]
   1adcc:	str	r0, [lr, #12]
   1add0:	str	r0, [lr, #8]
   1add4:	str	r0, [lr, #4]
   1add8:	str	r0, [lr]
   1addc:	pop	{fp, pc}
   1ade0:	andeq	r6, r1, r4, lsr #3
   1ade4:	muleq	r1, r8, r1
   1ade8:	muleq	r1, r0, r1
   1adec:	andeq	r6, r1, r8, lsl #3
   1adf0:	andeq	r6, r1, r8, lsl #3
   1adf4:	andeq	r6, r1, r0, lsl #3
   1adf8:	andeq	r6, r1, r0, lsl #3
   1adfc:	andeq	r6, r1, r8, ror r1
   1ae00:	andeq	r6, r1, r8, ror r1
   1ae04:	andeq	r6, r1, r8, ror r1
   1ae08:	andeq	r6, r1, r8, ror r1
   1ae0c:	push	{fp, lr}
   1ae10:	mov	fp, sp
   1ae14:	ldr	r0, [pc, #16]	; 1ae2c <read_boolean_unary_expression@@Base+0x7c8>
   1ae18:	add	r0, pc, r0
   1ae1c:	ldr	r1, [pc, #12]	; 1ae30 <read_boolean_unary_expression@@Base+0x7cc>
   1ae20:	add	r1, pc, r1
   1ae24:	bl	1d7e4 <__gcov_flush@@Base+0xb4>
   1ae28:	pop	{fp, pc}
   1ae2c:			; <UNDEFINED> instruction: 0xfffffae8
   1ae30:			; <UNDEFINED> instruction: 0xfffffbfc
   1ae34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae38:	add	fp, sp, #28
   1ae3c:	sub	sp, sp, #36	; 0x24
   1ae40:	mov	r9, r1
   1ae44:	mov	r6, r0
   1ae48:	add	r0, sp, #28
   1ae4c:	add	r1, sp, #32
   1ae50:	mov	r8, r2
   1ae54:	bl	1db90 <__gcov_flush@@Base+0x460>
   1ae58:	cmp	r0, #0
   1ae5c:	beq	1aea0 <read_boolean_unary_expression@@Base+0x83c>
   1ae60:	mov	r4, r0
   1ae64:	mov	r0, r6
   1ae68:	ldr	r5, [sp, #32]
   1ae6c:	bl	11e7c <strlen@plt>
   1ae70:	add	r0, r5, r0
   1ae74:	add	r0, r0, #2
   1ae78:	bl	11e34 <malloc@plt>
   1ae7c:	mov	r7, r0
   1ae80:	ldr	r0, [sp, #28]
   1ae84:	mov	r1, r6
   1ae88:	mov	r2, r4
   1ae8c:	str	r0, [sp]
   1ae90:	mov	r0, r7
   1ae94:	mov	r3, r5
   1ae98:	bl	1dc24 <__gcov_flush@@Base+0x4f4>
   1ae9c:	b	1aeac <read_boolean_unary_expression@@Base+0x848>
   1aea0:	mov	r0, r6
   1aea4:	bl	11df8 <strdup@plt>
   1aea8:	mov	r7, r0
   1aeac:	ldr	r0, [pc, #1548]	; 1b4c0 <read_boolean_unary_expression@@Base+0xe5c>
   1aeb0:	ldr	r6, [pc, #1548]	; 1b4c4 <read_boolean_unary_expression@@Base+0xe60>
   1aeb4:	mov	r1, #2
   1aeb8:	add	r0, pc, r0
   1aebc:	add	r6, pc, r6
   1aec0:	str	r7, [r0]
   1aec4:	mov	r0, r7
   1aec8:	mov	r4, #0
   1aecc:	strb	r4, [r6]
   1aed0:	bl	11e1c <open64@plt>
   1aed4:	ldr	r5, [pc, #1516]	; 1b4c8 <read_boolean_unary_expression@@Base+0xe64>
   1aed8:	cmn	r0, #1
   1aedc:	add	r5, pc, r5
   1aee0:	str	r0, [r5]
   1aee4:	beq	1aef4 <read_boolean_unary_expression@@Base+0x890>
   1aee8:	ldr	r6, [pc, #1500]	; 1b4cc <read_boolean_unary_expression@@Base+0xe68>
   1aeec:	add	r6, pc, r6
   1aef0:	b	1af50 <read_boolean_unary_expression@@Base+0x8ec>
   1aef4:	mov	r0, #1
   1aef8:	strb	r0, [r6]
   1aefc:	ldr	r0, [pc, #1508]	; 1b4e8 <read_boolean_unary_expression@@Base+0xe84>
   1af00:	mov	r1, #66	; 0x42
   1af04:	mov	r2, #420	; 0x1a4
   1af08:	ldr	r0, [pc, r0]
   1af0c:	bl	11e1c <open64@plt>
   1af10:	ldr	r6, [pc, #1492]	; 1b4ec <read_boolean_unary_expression@@Base+0xe88>
   1af14:	cmn	r0, #1
   1af18:	str	r0, [r5]
   1af1c:	add	r6, pc, r6
   1af20:	bne	1af50 <read_boolean_unary_expression@@Base+0x8ec>
   1af24:	ldr	r0, [pc, #1476]	; 1b4f0 <read_boolean_unary_expression@@Base+0xe8c>
   1af28:	ldr	r0, [pc, r0]
   1af2c:	bl	1d8f8 <__gcov_flush@@Base+0x1c8>
   1af30:	ldr	r0, [pc, #1468]	; 1b4f4 <read_boolean_unary_expression@@Base+0xe90>
   1af34:	mov	r1, #66	; 0x42
   1af38:	mov	r2, #420	; 0x1a4
   1af3c:	ldr	r0, [pc, r0]
   1af40:	bl	11e1c <open64@plt>
   1af44:	cmn	r0, #1
   1af48:	str	r0, [r5]
   1af4c:	beq	1b478 <read_boolean_unary_expression@@Base+0xe14>
   1af50:	str	r9, [sp, #20]
   1af54:	bl	1d9c4 <__gcov_flush@@Base+0x294>
   1af58:	ldr	r0, [pc, #1392]	; 1b4d0 <read_boolean_unary_expression@@Base+0xe6c>
   1af5c:	mov	r1, r6
   1af60:	ldr	r0, [pc, r0]
   1af64:	bl	11d80 <fdopen@plt>
   1af68:	ldr	r5, [pc, #1380]	; 1b4d4 <read_boolean_unary_expression@@Base+0xe70>
   1af6c:	ldr	r9, [pc, #1380]	; 1b4d8 <read_boolean_unary_expression@@Base+0xe74>
   1af70:	ldr	r1, [pc, #1380]	; 1b4dc <read_boolean_unary_expression@@Base+0xe78>
   1af74:	ldr	sl, [pc, #1380]	; 1b4e0 <read_boolean_unary_expression@@Base+0xe7c>
   1af78:	add	r5, pc, r5
   1af7c:	add	r9, pc, r9
   1af80:	add	r1, pc, r1
   1af84:	add	sl, pc, sl
   1af88:	str	r4, [r5]
   1af8c:	str	r4, [r5, #4]
   1af90:	str	r4, [r9]
   1af94:	str	r4, [r9, #4]
   1af98:	str	r0, [r1]
   1af9c:	str	r4, [sl]
   1afa0:	ldr	r6, [pc, #1340]	; 1b4e4 <read_boolean_unary_expression@@Base+0xe80>
   1afa4:	ldr	r2, [pc, #1292]	; 1b4b8 <read_boolean_unary_expression@@Base+0xe54>
   1afa8:	str	r8, [sp, #24]
   1afac:	add	r6, pc, r6
   1afb0:	ldrb	r1, [r6]
   1afb4:	mov	r6, r2
   1afb8:	cmp	r1, #1
   1afbc:	bne	1afe4 <read_boolean_unary_expression@@Base+0x980>
   1afc0:	mov	r0, #131072	; 0x20000
   1afc4:	mov	r4, #131072	; 0x20000
   1afc8:	bl	11e34 <malloc@plt>
   1afcc:	mov	r1, #0
   1afd0:	str	r4, [r5]
   1afd4:	str	r1, [r5, #4]
   1afd8:	mov	r8, r0
   1afdc:	str	r0, [sl]
   1afe0:	b	1b174 <read_boolean_unary_expression@@Base+0xb10>
   1afe4:	mov	r1, #0
   1afe8:	mov	r2, #2
   1afec:	mov	r8, #0
   1aff0:	bl	11f30 <fseek@plt>
   1aff4:	ldr	r0, [pc, #1288]	; 1b504 <read_boolean_unary_expression@@Base+0xea0>
   1aff8:	ldr	r0, [pc, r0]
   1affc:	bl	11de0 <ftell@plt>
   1b000:	mov	r2, r0
   1b004:	ldr	r0, [pc, #1276]	; 1b508 <read_boolean_unary_expression@@Base+0xea4>
   1b008:	asr	r3, r2, #31
   1b00c:	add	r0, pc, r0
   1b010:	cmp	r2, #0
   1b014:	strd	r2, [r0]
   1b018:	beq	1b0e8 <read_boolean_unary_expression@@Base+0xa84>
   1b01c:	ldr	r0, [pc, #1256]	; 1b50c <read_boolean_unary_expression@@Base+0xea8>
   1b020:	mov	r1, r2
   1b024:	mov	r2, #3
   1b028:	mov	r3, #1
   1b02c:	ldr	r0, [pc, r0]
   1b030:	str	r8, [sp, #8]
   1b034:	str	r8, [sp, #12]
   1b038:	str	r0, [sp]
   1b03c:	mov	r0, #0
   1b040:	bl	11dd4 <mmap64@plt>
   1b044:	ldr	r1, [pc, #1220]	; 1b510 <read_boolean_unary_expression@@Base+0xeac>
   1b048:	cmn	r0, #1
   1b04c:	add	r1, pc, r1
   1b050:	str	r0, [r1]
   1b054:	beq	1b0b0 <read_boolean_unary_expression@@Base+0xa4c>
   1b058:	ldr	r1, [pc, #1232]	; 1b530 <read_boolean_unary_expression@@Base+0xecc>
   1b05c:	add	r1, pc, r1
   1b060:	ldrb	r1, [r1]
   1b064:	cmp	r1, #0
   1b068:	beq	1b074 <read_boolean_unary_expression@@Base+0xa10>
   1b06c:	mov	r8, r0
   1b070:	b	1b180 <read_boolean_unary_expression@@Base+0xb1c>
   1b074:	ldr	ip, [r9, #4]
   1b078:	ldr	r5, [pc, #1236]	; 1b554 <read_boolean_unary_expression@@Base+0xef0>
   1b07c:	mov	r4, r0
   1b080:	lsr	r2, r6, #16
   1b084:	ldr	r5, [pc, r5]
   1b088:	lsr	r1, r6, #24
   1b08c:	lsr	r3, r6, #8
   1b090:	strb	r6, [r4, r5]!
   1b094:	strb	r2, [r4, #2]
   1b098:	adds	r2, r5, #4
   1b09c:	adc	ip, ip, #0
   1b0a0:	strb	r1, [r4, #3]
   1b0a4:	strb	r3, [r4, #1]
   1b0a8:	stm	r9, {r2, ip}
   1b0ac:	b	1b248 <read_boolean_unary_expression@@Base+0xbe4>
   1b0b0:	bl	11ea0 <__errno_location@plt>
   1b0b4:	ldr	r1, [pc, #1112]	; 1b514 <read_boolean_unary_expression@@Base+0xeb0>
   1b0b8:	ldr	r1, [pc, r1]
   1b0bc:	ldr	r0, [r0]
   1b0c0:	ldr	r4, [r1]
   1b0c4:	ldr	r7, [pc, #1100]	; 1b518 <read_boolean_unary_expression@@Base+0xeb4>
   1b0c8:	ldr	r7, [pc, r7]
   1b0cc:	bl	11e4c <strerror@plt>
   1b0d0:	ldr	r1, [pc, #1092]	; 1b51c <read_boolean_unary_expression@@Base+0xeb8>
   1b0d4:	mov	r3, r0
   1b0d8:	mov	r0, r4
   1b0dc:	add	r1, pc, r1
   1b0e0:	mov	r2, r7
   1b0e4:	bl	11e94 <fprintf@plt>
   1b0e8:	str	r8, [r5]
   1b0ec:	str	r8, [r5, #4]
   1b0f0:	ldr	r0, [pc, #1064]	; 1b520 <read_boolean_unary_expression@@Base+0xebc>
   1b0f4:	mov	r2, #16646144	; 0xfe0000
   1b0f8:	orr	r2, r2, #-16777216	; 0xff000000
   1b0fc:	add	r0, pc, r0
   1b100:	mvn	r3, #0
   1b104:	str	r8, [r0]
   1b108:	ldr	r1, [pc, #1044]	; 1b524 <read_boolean_unary_expression@@Base+0xec0>
   1b10c:	mov	r0, #1
   1b110:	add	r1, pc, r1
   1b114:	strb	r0, [r1]
   1b118:	ldr	r0, [r9, #4]
   1b11c:	ldr	r1, [pc, #1028]	; 1b528 <read_boolean_unary_expression@@Base+0xec4>
   1b120:	eor	r3, r0, r3
   1b124:	ldr	r1, [pc, r1]
   1b128:	eor	r2, r1, r2
   1b12c:	orrs	r2, r2, r3
   1b130:	beq	1b170 <read_boolean_unary_expression@@Base+0xb0c>
   1b134:	ldr	r2, [pc, #896]	; 1b4bc <read_boolean_unary_expression@@Base+0xe58>
   1b138:	adds	r1, r1, r2
   1b13c:	adc	r0, r0, #0
   1b140:	mvn	r2, #0
   1b144:	and	r7, r0, r2
   1b148:	mov	r0, #16646144	; 0xfe0000
   1b14c:	orr	r0, r0, #-16777216	; 0xff000000
   1b150:	and	r4, r1, r0
   1b154:	mov	r0, r4
   1b158:	bl	11e34 <malloc@plt>
   1b15c:	stm	r5, {r4, r7}
   1b160:	mov	r8, r0
   1b164:	ldr	r0, [pc, #960]	; 1b52c <read_boolean_unary_expression@@Base+0xec8>
   1b168:	add	r0, pc, r0
   1b16c:	str	r8, [r0]
   1b170:	mov	r0, r8
   1b174:	mov	r1, #0
   1b178:	mov	r2, #131072	; 0x20000
   1b17c:	bl	11ec4 <memset@plt>
   1b180:	ldr	r0, [r9, #4]
   1b184:	ldr	r1, [pc, #936]	; 1b534 <read_boolean_unary_expression@@Base+0xed0>
   1b188:	mov	sl, r5
   1b18c:	mov	r7, #7
   1b190:	orr	r7, r7, #131072	; 0x20000
   1b194:	ldr	r1, [pc, r1]
   1b198:	ldr	r4, [r5, #4]
   1b19c:	ldr	r5, [pc, #916]	; 1b538 <read_boolean_unary_expression@@Base+0xed4>
   1b1a0:	adds	r2, r1, #4
   1b1a4:	adc	r3, r0, #0
   1b1a8:	ldr	r5, [pc, r5]
   1b1ac:	subs	r2, r5, r2
   1b1b0:	sbcs	r2, r4, r3
   1b1b4:	bcs	1b28c <read_boolean_unary_expression@@Base+0xc28>
   1b1b8:	adds	r1, r1, r7
   1b1bc:	adc	r0, r0, #0
   1b1c0:	subs	r1, r1, #4
   1b1c4:	sbc	r0, r0, #0
   1b1c8:	mvn	r2, #0
   1b1cc:	and	r5, r0, r2
   1b1d0:	mov	r0, #16646144	; 0xfe0000
   1b1d4:	orr	r0, r0, #-16777216	; 0xff000000
   1b1d8:	and	r4, r1, r0
   1b1dc:	mov	r0, r8
   1b1e0:	mov	r1, r4
   1b1e4:	bl	11e04 <realloc@plt>
   1b1e8:	strd	r4, [sl]
   1b1ec:	ldr	r1, [pc, #844]	; 1b540 <read_boolean_unary_expression@@Base+0xedc>
   1b1f0:	mov	r7, r6
   1b1f4:	lsr	r2, r6, #24
   1b1f8:	add	r1, pc, r1
   1b1fc:	mov	r3, r0
   1b200:	str	r0, [r1]
   1b204:	ldr	r6, [pc, #824]	; 1b544 <read_boolean_unary_expression@@Base+0xee0>
   1b208:	ldr	r1, [r9, #4]
   1b20c:	lsr	r5, r7, #16
   1b210:	add	r6, pc, r6
   1b214:	ldrb	r6, [r6]
   1b218:	ldr	r4, [pc, #808]	; 1b548 <read_boolean_unary_expression@@Base+0xee4>
   1b21c:	ldr	r4, [pc, r4]
   1b220:	strb	r7, [r3, r4]!
   1b224:	strb	r2, [r3, #3]
   1b228:	lsr	r2, r7, #8
   1b22c:	strb	r2, [r3, #1]
   1b230:	adds	r2, r4, #4
   1b234:	adc	ip, r1, #0
   1b238:	cmp	r6, #1
   1b23c:	strb	r5, [r3, #2]
   1b240:	stm	r9, {r2, ip}
   1b244:	beq	1b2cc <read_boolean_unary_expression@@Base+0xc68>
   1b248:	ldr	r4, [sp, #20]
   1b24c:	mov	r5, r0
   1b250:	mov	lr, r9
   1b254:	ldrb	r1, [r4]
   1b258:	ldrb	r3, [r4, #1]
   1b25c:	ldrb	r7, [r4, #2]
   1b260:	ldrb	r6, [r4, #3]
   1b264:	strb	r1, [r5, r2]!
   1b268:	adds	r4, r2, #4
   1b26c:	adc	r1, ip, #0
   1b270:	strb	r6, [r5, #3]
   1b274:	strb	r7, [r5, #2]
   1b278:	strb	r3, [r5, #1]
   1b27c:	str	r4, [lr]
   1b280:	str	r1, [lr, #4]
   1b284:	ldr	r6, [sp, #24]
   1b288:	b	1b448 <read_boolean_unary_expression@@Base+0xde4>
   1b28c:	ldr	r1, [r9, #4]
   1b290:	ldr	r4, [pc, #676]	; 1b53c <read_boolean_unary_expression@@Base+0xed8>
   1b294:	mov	r5, r6
   1b298:	lsr	r0, r6, #24
   1b29c:	ldr	r4, [pc, r4]
   1b2a0:	lsr	r2, r6, #16
   1b2a4:	lsr	r3, r6, #8
   1b2a8:	mov	r6, r8
   1b2ac:	strb	r5, [r6, r4]!
   1b2b0:	strb	r2, [r6, #2]
   1b2b4:	adds	r2, r4, #4
   1b2b8:	adc	ip, r1, #0
   1b2bc:	strb	r0, [r6, #3]
   1b2c0:	strb	r3, [r6, #1]
   1b2c4:	stm	r9, {r2, ip}
   1b2c8:	mov	r0, r8
   1b2cc:	ldr	r7, [sl, #4]
   1b2d0:	ldr	r3, [pc, #628]	; 1b54c <read_boolean_unary_expression@@Base+0xee8>
   1b2d4:	adds	r6, r4, #8
   1b2d8:	mov	r8, r9
   1b2dc:	adc	r5, r1, #0
   1b2e0:	ldr	r3, [pc, r3]
   1b2e4:	mov	r9, sl
   1b2e8:	subs	r3, r3, r6
   1b2ec:	sbcs	r3, r7, r5
   1b2f0:	bcs	1b394 <read_boolean_unary_expression@@Base+0xd30>
   1b2f4:	mov	r2, #7
   1b2f8:	orr	r2, r2, #131072	; 0x20000
   1b2fc:	adds	r2, r4, r2
   1b300:	adc	r4, r1, #0
   1b304:	mov	r1, #16646144	; 0xfe0000
   1b308:	orr	r1, r1, #-16777216	; 0xff000000
   1b30c:	and	r6, r2, r1
   1b310:	mov	r1, r6
   1b314:	bl	11e04 <realloc@plt>
   1b318:	ldr	sl, [pc, #568]	; 1b558 <read_boolean_unary_expression@@Base+0xef4>
   1b31c:	mvn	r1, #0
   1b320:	and	r7, r4, r1
   1b324:	add	sl, pc, sl
   1b328:	strd	r6, [r9]
   1b32c:	str	r0, [sl]
   1b330:	ldr	r1, [pc, #548]	; 1b55c <read_boolean_unary_expression@@Base+0xef8>
   1b334:	ldr	r2, [sp, #20]
   1b338:	ldr	ip, [r8, #4]
   1b33c:	add	r1, pc, r1
   1b340:	mov	lr, r8
   1b344:	ldrb	r3, [r1]
   1b348:	ldrb	r1, [r2]
   1b34c:	ldrb	r7, [r2, #1]
   1b350:	ldrb	r6, [r2, #2]
   1b354:	ldrb	r5, [r2, #3]
   1b358:	ldr	r2, [pc, #512]	; 1b560 <read_boolean_unary_expression@@Base+0xefc>
   1b35c:	ldr	r2, [pc, r2]
   1b360:	adds	r4, r2, #4
   1b364:	strb	r1, [r0, r2]
   1b368:	add	r1, r0, r2
   1b36c:	strb	r5, [r1, #3]
   1b370:	strb	r6, [r1, #2]
   1b374:	strb	r7, [r1, #1]
   1b378:	adc	r1, ip, #0
   1b37c:	str	r4, [lr]
   1b380:	str	r1, [lr, #4]
   1b384:	ldr	r6, [sp, #24]
   1b388:	cmp	r3, #1
   1b38c:	beq	1b3dc <read_boolean_unary_expression@@Base+0xd78>
   1b390:	b	1b448 <read_boolean_unary_expression@@Base+0xde4>
   1b394:	ldr	r6, [sp, #20]
   1b398:	mov	r5, r0
   1b39c:	adds	r4, r2, #4
   1b3a0:	ldrb	r1, [r6]
   1b3a4:	ldrb	r3, [r6, #1]
   1b3a8:	ldrb	r7, [r6, #2]
   1b3ac:	ldrb	r6, [r6, #3]
   1b3b0:	strb	r1, [r5, r2]!
   1b3b4:	adc	r1, ip, #0
   1b3b8:	strb	r3, [r5, #1]
   1b3bc:	mov	r3, r8
   1b3c0:	strb	r6, [r5, #3]
   1b3c4:	strb	r7, [r5, #2]
   1b3c8:	str	r4, [r3]
   1b3cc:	str	r1, [r3, #4]
   1b3d0:	ldr	r6, [sp, #24]
   1b3d4:	ldr	sl, [pc, #372]	; 1b550 <read_boolean_unary_expression@@Base+0xeec>
   1b3d8:	add	sl, pc, sl
   1b3dc:	ldr	r7, [r9, #4]
   1b3e0:	ldr	r5, [pc, #380]	; 1b564 <read_boolean_unary_expression@@Base+0xf00>
   1b3e4:	adds	r3, r2, #8
   1b3e8:	adc	lr, ip, #0
   1b3ec:	ldr	r5, [pc, r5]
   1b3f0:	subs	r3, r5, r3
   1b3f4:	sbcs	r3, r7, lr
   1b3f8:	bcs	1b444 <read_boolean_unary_expression@@Base+0xde0>
   1b3fc:	mov	r1, #7
   1b400:	orr	r1, r1, #131072	; 0x20000
   1b404:	adds	r1, r2, r1
   1b408:	adc	r2, ip, #0
   1b40c:	mvn	r3, #0
   1b410:	and	r5, r2, r3
   1b414:	mov	r2, #16646144	; 0xfe0000
   1b418:	orr	r2, r2, #-16777216	; 0xff000000
   1b41c:	and	r4, r1, r2
   1b420:	mov	r1, r4
   1b424:	bl	11e04 <realloc@plt>
   1b428:	strd	r4, [r9]
   1b42c:	str	r0, [sl]
   1b430:	ldr	r1, [r8, #4]
   1b434:	ldr	r4, [pc, #300]	; 1b568 <read_boolean_unary_expression@@Base+0xf04>
   1b438:	mov	lr, r8
   1b43c:	ldr	r4, [pc, r4]
   1b440:	b	1b448 <read_boolean_unary_expression@@Base+0xde4>
   1b444:	mov	lr, r8
   1b448:	lsr	r2, r6, #24
   1b44c:	strb	r6, [r0, r4]!
   1b450:	lsr	r3, r6, #16
   1b454:	lsr	r7, r6, #8
   1b458:	strb	r2, [r0, #3]
   1b45c:	strb	r3, [r0, #2]
   1b460:	strb	r7, [r0, #1]
   1b464:	adds	r0, r4, #4
   1b468:	adc	r1, r1, #0
   1b46c:	strd	r0, [lr]
   1b470:	sub	sp, fp, #28
   1b474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b478:	bl	11ea0 <__errno_location@plt>
   1b47c:	ldr	r1, [pc, #116]	; 1b4f8 <read_boolean_unary_expression@@Base+0xe94>
   1b480:	ldr	r1, [pc, r1]
   1b484:	ldr	r0, [r0]
   1b488:	ldr	r4, [r1]
   1b48c:	ldr	r5, [pc, #104]	; 1b4fc <read_boolean_unary_expression@@Base+0xe98>
   1b490:	ldr	r5, [pc, r5]
   1b494:	bl	11e4c <strerror@plt>
   1b498:	ldr	r1, [pc, #96]	; 1b500 <read_boolean_unary_expression@@Base+0xe9c>
   1b49c:	mov	r3, r0
   1b4a0:	mov	r0, r4
   1b4a4:	add	r1, pc, r1
   1b4a8:	mov	r2, r5
   1b4ac:	bl	11e94 <fprintf@plt>
   1b4b0:	sub	sp, fp, #28
   1b4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b8:	strbvs	r6, [r3, -r1, ror #8]!
   1b4bc:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1b4c0:	muleq	r1, r8, r0
   1b4c4:	muleq	r1, r8, r0
   1b4c8:	andeq	r5, r1, ip, lsl #4
   1b4cc:	andeq	r3, r0, ip, ror #28
   1b4d0:	andeq	r5, r1, r8, lsl #3
   1b4d4:	andeq	r5, r1, r8, ror #31
   1b4d8:	andeq	r5, r1, ip, ror #31
   1b4dc:	ldrdeq	r5, [r1], -r8
   1b4e0:	ldrdeq	r5, [r1], -r8
   1b4e4:	andeq	r5, r1, r8, lsr #31
   1b4e8:	andeq	r6, r1, r8, asr #32
   1b4ec:	andeq	r3, r0, r0, asr #28
   1b4f0:	andeq	r6, r1, r8, lsr #32
   1b4f4:	andeq	r6, r1, r4, lsl r0
   1b4f8:	andeq	r4, r1, r4, lsr ip
   1b4fc:	andeq	r5, r1, r0, asr #21
   1b500:			; <UNDEFINED> instruction: 0x000038bc
   1b504:	andeq	r5, r1, r0, ror #30
   1b508:	andeq	r5, r1, r4, ror pc
   1b50c:	strheq	r5, [r1], -ip
   1b510:	andeq	r5, r1, r0, lsl pc
   1b514:	strdeq	r4, [r1], -ip
   1b518:	andeq	r5, r1, r8, lsl #29
   1b51c:	ldrdeq	r3, [r0], -lr
   1b520:	andeq	r5, r1, r0, ror #28
   1b524:	andeq	r5, r1, r4, asr #28
   1b528:	andeq	r5, r1, r4, asr #28
   1b52c:	strdeq	r5, [r1], -r4
   1b530:	strdeq	r5, [r1], -r8
   1b534:	ldrdeq	r5, [r1], -r4
   1b538:			; <UNDEFINED> instruction: 0x00015db8
   1b53c:	andeq	r5, r1, ip, asr #25
   1b540:	andeq	r5, r1, r4, ror #26
   1b544:	andeq	r5, r1, r4, asr #26
   1b548:	andeq	r5, r1, ip, asr #26
   1b54c:	andeq	r5, r1, r0, lsl #25
   1b550:	andeq	r5, r1, r4, lsl #23
   1b554:	andeq	r5, r1, r4, ror #29
   1b558:	andeq	r5, r1, r8, lsr ip
   1b55c:	andeq	r5, r1, r8, lsl ip
   1b560:	andeq	r5, r1, ip, lsl #24
   1b564:	andeq	r5, r1, r4, ror fp
   1b568:	andeq	r5, r1, ip, lsr #22
   1b56c:	ldr	r0, [r0]
   1b570:	cmn	r0, #1
   1b574:	beq	1b594 <read_boolean_unary_expression@@Base+0xf30>
   1b578:	ldr	r0, [r1, r0, lsl #2]
   1b57c:	cmp	r0, #0
   1b580:	bxeq	lr
   1b584:	ldrd	r2, [r0]
   1b588:	adds	r2, r2, #1
   1b58c:	adc	r3, r3, #0
   1b590:	strd	r2, [r0]
   1b594:	bx	lr
   1b598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b59c:	add	fp, sp, #28
   1b5a0:	sub	sp, sp, #12
   1b5a4:	mov	r9, r0
   1b5a8:	ldr	r0, [pc, #2000]	; 1bd80 <read_boolean_unary_expression@@Base+0x171c>
   1b5ac:	mov	sl, #2
   1b5b0:	cmp	r3, #0
   1b5b4:	movne	sl, #3
   1b5b8:	ldr	r0, [pc, r0]
   1b5bc:	cmp	r0, #0
   1b5c0:	beq	1bd78 <read_boolean_unary_expression@@Base+0x1714>
   1b5c4:	stm	sp, {r2, r3}
   1b5c8:	ldr	r0, [pc, #1972]	; 1bd84 <read_boolean_unary_expression@@Base+0x1720>
   1b5cc:	str	r1, [sp, #8]
   1b5d0:	add	r0, pc, r0
   1b5d4:	ldrb	r0, [r0]
   1b5d8:	cmp	r0, #1
   1b5dc:	bne	1b66c <read_boolean_unary_expression@@Base+0x1008>
   1b5e0:	ldr	r0, [pc, #1952]	; 1bd88 <read_boolean_unary_expression@@Base+0x1724>
   1b5e4:	ldr	r4, [pc, #1952]	; 1bd8c <read_boolean_unary_expression@@Base+0x1728>
   1b5e8:	add	r0, pc, r0
   1b5ec:	add	r4, pc, r4
   1b5f0:	ldr	r0, [r0, #4]
   1b5f4:	ldr	r5, [pc, #1940]	; 1bd90 <read_boolean_unary_expression@@Base+0x172c>
   1b5f8:	ldr	r5, [pc, r5]
   1b5fc:	ldr	r7, [r4, #4]
   1b600:	ldr	r6, [pc, #1932]	; 1bd94 <read_boolean_unary_expression@@Base+0x1730>
   1b604:	adds	r2, r5, #4
   1b608:	adc	r3, r0, #0
   1b60c:	ldr	r6, [pc, r6]
   1b610:	subs	r2, r6, r2
   1b614:	sbcs	r2, r7, r3
   1b618:	bcs	1b66c <read_boolean_unary_expression@@Base+0x1008>
   1b61c:	mov	r2, #7
   1b620:	orr	r2, r2, #131072	; 0x20000
   1b624:	adds	r1, r5, r2
   1b628:	adc	r0, r0, #0
   1b62c:	subs	r1, r1, #4
   1b630:	sbc	r0, r0, #0
   1b634:	mvn	r2, #0
   1b638:	and	r7, r0, r2
   1b63c:	mov	r0, #16646144	; 0xfe0000
   1b640:	orr	r0, r0, #-16777216	; 0xff000000
   1b644:	ldr	r8, [pc, #1868]	; 1bd98 <read_boolean_unary_expression@@Base+0x1734>
   1b648:	and	r6, r1, r0
   1b64c:	ldr	r0, [pc, #1864]	; 1bd9c <read_boolean_unary_expression@@Base+0x1738>
   1b650:	mov	r1, r6
   1b654:	add	r8, pc, r8
   1b658:	ldr	r0, [pc, r0]
   1b65c:	bl	11e04 <realloc@plt>
   1b660:	ldr	r1, [sp, #8]
   1b664:	strd	r6, [r4]
   1b668:	str	r0, [r8]
   1b66c:	ldr	r3, [pc, #1836]	; 1bda0 <read_boolean_unary_expression@@Base+0x173c>
   1b670:	ldr	r7, [pc, #1836]	; 1bda4 <read_boolean_unary_expression@@Base+0x1740>
   1b674:	mov	r0, #0
   1b678:	add	r3, pc, r3
   1b67c:	mov	r2, #1
   1b680:	ldr	r7, [pc, r7]
   1b684:	ldr	r8, [pc, #1820]	; 1bda8 <read_boolean_unary_expression@@Base+0x1744>
   1b688:	adds	r4, r7, #4
   1b68c:	ldr	r8, [pc, r8]
   1b690:	ldr	r6, [r3, #4]
   1b694:	mov	r5, r8
   1b698:	strb	r0, [r5, r7]!
   1b69c:	strb	r2, [r5, #3]
   1b6a0:	strb	r0, [r5, #2]
   1b6a4:	strb	r0, [r5, #1]
   1b6a8:	adc	r5, r6, #0
   1b6ac:	cmp	r1, #0
   1b6b0:	strd	r4, [r3]
   1b6b4:	beq	1b6c8 <read_boolean_unary_expression@@Base+0x1064>
   1b6b8:	mov	r0, r1
   1b6bc:	bl	11e7c <strlen@plt>
   1b6c0:	add	r0, sl, r0, lsr #2
   1b6c4:	add	sl, r0, #2
   1b6c8:	ldr	r0, [pc, #1756]	; 1bdac <read_boolean_unary_expression@@Base+0x1748>
   1b6cc:	add	r0, pc, r0
   1b6d0:	ldrb	r0, [r0]
   1b6d4:	cmp	r0, #0
   1b6d8:	beq	1b7b8 <read_boolean_unary_expression@@Base+0x1154>
   1b6dc:	ldr	lr, [pc, #1744]	; 1bdb4 <read_boolean_unary_expression@@Base+0x1750>
   1b6e0:	adds	r0, r7, #8
   1b6e4:	adc	r1, r6, #0
   1b6e8:	add	lr, pc, lr
   1b6ec:	ldr	r2, [lr, #4]
   1b6f0:	ldr	r3, [pc, #1728]	; 1bdb8 <read_boolean_unary_expression@@Base+0x1754>
   1b6f4:	ldr	r3, [pc, r3]
   1b6f8:	subs	r0, r3, r0
   1b6fc:	sbcs	r0, r2, r1
   1b700:	bcs	1ba08 <read_boolean_unary_expression@@Base+0x13a4>
   1b704:	mov	r0, #7
   1b708:	orr	r0, r0, #131072	; 0x20000
   1b70c:	adds	r0, r7, r0
   1b710:	adc	r1, r6, #0
   1b714:	mvn	r2, #0
   1b718:	and	r5, r1, r2
   1b71c:	mov	r1, #16646144	; 0xfe0000
   1b720:	orr	r1, r1, #-16777216	; 0xff000000
   1b724:	and	r6, r0, r1
   1b728:	ldr	r4, [pc, #1680]	; 1bdc0 <read_boolean_unary_expression@@Base+0x175c>
   1b72c:	mov	r0, r8
   1b730:	mov	r1, r6
   1b734:	add	r4, pc, r4
   1b738:	mov	r7, lr
   1b73c:	bl	11e04 <realloc@plt>
   1b740:	mov	lr, r7
   1b744:	mov	r8, r0
   1b748:	str	r6, [lr]
   1b74c:	str	r5, [lr, #4]
   1b750:	str	r8, [r4]
   1b754:	ldr	r1, [pc, #1640]	; 1bdc4 <read_boolean_unary_expression@@Base+0x1760>
   1b758:	lsr	r0, sl, #24
   1b75c:	add	r1, pc, r1
   1b760:	lsr	r3, sl, #16
   1b764:	ldrb	r2, [r1]
   1b768:	ldr	r1, [pc, #1624]	; 1bdc8 <read_boolean_unary_expression@@Base+0x1764>
   1b76c:	add	r1, pc, r1
   1b770:	mov	r7, r1
   1b774:	ldr	r5, [r1, #4]
   1b778:	ldr	r4, [pc, #1612]	; 1bdcc <read_boolean_unary_expression@@Base+0x1768>
   1b77c:	mov	r1, r8
   1b780:	ldr	r4, [pc, r4]
   1b784:	strb	sl, [r1, r4]!
   1b788:	ldr	ip, [sp, #8]
   1b78c:	strb	r0, [r1, #3]
   1b790:	lsr	r0, sl, #8
   1b794:	strb	r0, [r1, #1]
   1b798:	adds	r0, r4, #4
   1b79c:	strb	r3, [r1, #2]
   1b7a0:	adc	r1, r5, #0
   1b7a4:	mov	sl, r7
   1b7a8:	cmp	r2, #1
   1b7ac:	strd	r0, [sl]
   1b7b0:	bne	1b7f0 <read_boolean_unary_expression@@Base+0x118c>
   1b7b4:	b	1ba40 <read_boolean_unary_expression@@Base+0x13dc>
   1b7b8:	mov	r3, r8
   1b7bc:	lsr	r0, sl, #24
   1b7c0:	strb	sl, [r3, r4]!
   1b7c4:	lsr	r1, sl, #16
   1b7c8:	lsr	r2, sl, #8
   1b7cc:	strb	r0, [r3, #3]
   1b7d0:	strb	r1, [r3, #2]
   1b7d4:	strb	r2, [r3, #1]
   1b7d8:	ldr	sl, [pc, #1488]	; 1bdb0 <read_boolean_unary_expression@@Base+0x174c>
   1b7dc:	ldr	ip, [sp, #8]
   1b7e0:	adds	r0, r7, #8
   1b7e4:	adc	r1, r6, #0
   1b7e8:	add	sl, pc, sl
   1b7ec:	strd	r0, [sl]
   1b7f0:	mov	r6, r8
   1b7f4:	lsr	r2, r9, #24
   1b7f8:	strb	r9, [r6, r0]!
   1b7fc:	lsr	r3, r9, #16
   1b800:	strb	r2, [r6, #3]
   1b804:	adds	r2, r0, #4
   1b808:	lsr	r7, r9, #8
   1b80c:	strb	r3, [r6, #2]
   1b810:	adc	r3, r1, #0
   1b814:	strb	r7, [r6, #1]
   1b818:	strd	r2, [sl]
   1b81c:	ldr	r5, [sp]
   1b820:	mov	r6, r8
   1b824:	adds	r4, r2, #4
   1b828:	lsr	r7, r5, #8
   1b82c:	strb	r5, [r6, r2]!
   1b830:	lsr	r0, r5, #24
   1b834:	lsr	r1, r5, #16
   1b838:	strb	r7, [r6, #1]
   1b83c:	adc	r7, r3, #0
   1b840:	strb	r0, [r6, #3]
   1b844:	strb	r1, [r6, #2]
   1b848:	stm	sl, {r4, r7}
   1b84c:	ldr	r0, [sp, #4]
   1b850:	cmp	r0, #0
   1b854:	beq	1b92c <read_boolean_unary_expression@@Base+0x12c8>
   1b858:	ldr	r0, [pc, #1420]	; 1bdec <read_boolean_unary_expression@@Base+0x1788>
   1b85c:	ldr	sl, [fp, #8]
   1b860:	add	r0, pc, r0
   1b864:	ldrb	r0, [r0]
   1b868:	cmp	r0, #1
   1b86c:	bne	1b8f8 <read_boolean_unary_expression@@Base+0x1294>
   1b870:	ldr	r9, [pc, #1400]	; 1bdf0 <read_boolean_unary_expression@@Base+0x178c>
   1b874:	adds	r0, r2, #8
   1b878:	adc	r1, r3, #0
   1b87c:	add	r9, pc, r9
   1b880:	ldr	r6, [r9, #4]
   1b884:	ldr	r5, [pc, #1384]	; 1bdf4 <read_boolean_unary_expression@@Base+0x1790>
   1b888:	ldr	r5, [pc, r5]
   1b88c:	subs	r0, r5, r0
   1b890:	sbcs	r0, r6, r1
   1b894:	bcs	1b8f8 <read_boolean_unary_expression@@Base+0x1294>
   1b898:	mov	r0, #7
   1b89c:	orr	r0, r0, #131072	; 0x20000
   1b8a0:	adds	r0, r2, r0
   1b8a4:	adc	r1, r3, #0
   1b8a8:	mvn	r2, #0
   1b8ac:	and	r5, r1, r2
   1b8b0:	mov	r1, #16646144	; 0xfe0000
   1b8b4:	orr	r1, r1, #-16777216	; 0xff000000
   1b8b8:	and	r6, r0, r1
   1b8bc:	ldr	r4, [pc, #1332]	; 1bdf8 <read_boolean_unary_expression@@Base+0x1794>
   1b8c0:	mov	r0, r8
   1b8c4:	mov	r1, r6
   1b8c8:	add	r4, pc, r4
   1b8cc:	bl	11e04 <realloc@plt>
   1b8d0:	ldr	ip, [sp, #8]
   1b8d4:	str	r6, [r9]
   1b8d8:	str	r5, [r9, #4]
   1b8dc:	mov	r8, r0
   1b8e0:	ldr	r0, [pc, #1300]	; 1bdfc <read_boolean_unary_expression@@Base+0x1798>
   1b8e4:	str	r8, [r4]
   1b8e8:	add	r0, pc, r0
   1b8ec:	ldr	r7, [r0, #4]
   1b8f0:	ldr	r4, [pc, #1288]	; 1be00 <read_boolean_unary_expression@@Base+0x179c>
   1b8f4:	ldr	r4, [pc, r4]
   1b8f8:	mov	r3, r8
   1b8fc:	lsr	r0, sl, #24
   1b900:	strb	sl, [r3, r4]!
   1b904:	lsr	r1, sl, #16
   1b908:	lsr	r2, sl, #8
   1b90c:	strb	r0, [r3, #3]
   1b910:	strb	r1, [r3, #2]
   1b914:	strb	r2, [r3, #1]
   1b918:	ldr	sl, [pc, #1252]	; 1be04 <read_boolean_unary_expression@@Base+0x17a0>
   1b91c:	adds	r4, r4, #4
   1b920:	adc	r7, r7, #0
   1b924:	add	sl, pc, sl
   1b928:	stm	sl, {r4, r7}
   1b92c:	cmp	ip, #0
   1b930:	beq	1bd78 <read_boolean_unary_expression@@Base+0x1714>
   1b934:	mov	r0, ip
   1b938:	bl	11e7c <strlen@plt>
   1b93c:	mov	r9, #1
   1b940:	add	r5, r9, r0, lsr #2
   1b944:	ldr	r0, [pc, #1212]	; 1be08 <read_boolean_unary_expression@@Base+0x17a4>
   1b948:	add	r0, pc, r0
   1b94c:	ldrb	r0, [r0]
   1b950:	cmp	r0, #1
   1b954:	bne	1b9f8 <read_boolean_unary_expression@@Base+0x1394>
   1b958:	ldr	sl, [pc, #1196]	; 1be0c <read_boolean_unary_expression@@Base+0x17a8>
   1b95c:	adds	r0, r4, #4
   1b960:	adc	r1, r7, #0
   1b964:	add	sl, pc, sl
   1b968:	ldr	r2, [sl, #4]
   1b96c:	ldr	r3, [pc, #1180]	; 1be10 <read_boolean_unary_expression@@Base+0x17ac>
   1b970:	ldr	r3, [pc, r3]
   1b974:	subs	r0, r3, r0
   1b978:	sbcs	r0, r2, r1
   1b97c:	bcs	1bbac <read_boolean_unary_expression@@Base+0x1548>
   1b980:	mov	r0, #0
   1b984:	str	r0, [sp, #4]
   1b988:	mov	r0, #7
   1b98c:	orr	r0, r0, #131072	; 0x20000
   1b990:	adds	r0, r4, r0
   1b994:	adc	r1, r7, #0
   1b998:	subs	r0, r0, #4
   1b99c:	sbc	r1, r1, #0
   1b9a0:	mvn	r2, #0
   1b9a4:	and	r7, r1, r2
   1b9a8:	mov	r1, #16646144	; 0xfe0000
   1b9ac:	orr	r1, r1, #-16777216	; 0xff000000
   1b9b0:	and	r4, r0, r1
   1b9b4:	ldr	r6, [pc, #1116]	; 1be18 <read_boolean_unary_expression@@Base+0x17b4>
   1b9b8:	mov	r0, r8
   1b9bc:	mov	r1, r4
   1b9c0:	add	r6, pc, r6
   1b9c4:	bl	11e04 <realloc@plt>
   1b9c8:	stm	sl, {r4, r7}
   1b9cc:	str	r0, [r6]
   1b9d0:	ldr	sl, [pc, #1092]	; 1be1c <read_boolean_unary_expression@@Base+0x17b8>
   1b9d4:	mov	r8, r0
   1b9d8:	add	sl, pc, sl
   1b9dc:	ldr	r7, [sl, #4]
   1b9e0:	ldr	r0, [pc, #1080]	; 1be20 <read_boolean_unary_expression@@Base+0x17bc>
   1b9e4:	add	r0, pc, r0
   1b9e8:	ldrb	r9, [r0]
   1b9ec:	ldr	r4, [pc, #1072]	; 1be24 <read_boolean_unary_expression@@Base+0x17c0>
   1b9f0:	ldr	r4, [pc, r4]
   1b9f4:	b	1bbbc <read_boolean_unary_expression@@Base+0x1558>
   1b9f8:	mov	r0, #0
   1b9fc:	str	r0, [sp, #4]
   1ba00:	mov	r9, #0
   1ba04:	b	1bbbc <read_boolean_unary_expression@@Base+0x1558>
   1ba08:	mov	r3, r8
   1ba0c:	lsr	r0, sl, #24
   1ba10:	strb	sl, [r3, r4]!
   1ba14:	lsr	r1, sl, #16
   1ba18:	lsr	r2, sl, #8
   1ba1c:	strb	r0, [r3, #3]
   1ba20:	strb	r1, [r3, #2]
   1ba24:	strb	r2, [r3, #1]
   1ba28:	ldr	sl, [pc, #908]	; 1bdbc <read_boolean_unary_expression@@Base+0x1758>
   1ba2c:	adds	r0, r7, #8
   1ba30:	adc	r1, r6, #0
   1ba34:	add	sl, pc, sl
   1ba38:	ldr	ip, [sp, #8]
   1ba3c:	strd	r0, [sl]
   1ba40:	ldr	r7, [lr, #4]
   1ba44:	ldr	r6, [pc, #900]	; 1bdd0 <read_boolean_unary_expression@@Base+0x176c>
   1ba48:	adds	r2, r4, #8
   1ba4c:	adc	r3, r5, #0
   1ba50:	ldr	r6, [pc, r6]
   1ba54:	subs	r2, r6, r2
   1ba58:	sbcs	r2, r7, r3
   1ba5c:	bcs	1bb00 <read_boolean_unary_expression@@Base+0x149c>
   1ba60:	mov	r0, #7
   1ba64:	orr	r0, r0, #131072	; 0x20000
   1ba68:	adds	r0, r4, r0
   1ba6c:	adc	r1, r5, #0
   1ba70:	mvn	r2, #0
   1ba74:	and	r5, r1, r2
   1ba78:	mov	r1, #16646144	; 0xfe0000
   1ba7c:	orr	r1, r1, #-16777216	; 0xff000000
   1ba80:	and	r4, r0, r1
   1ba84:	ldr	r6, [pc, #840]	; 1bdd4 <read_boolean_unary_expression@@Base+0x1770>
   1ba88:	mov	r0, r8
   1ba8c:	mov	r1, r4
   1ba90:	add	r6, pc, r6
   1ba94:	mov	r7, lr
   1ba98:	bl	11e04 <realloc@plt>
   1ba9c:	mov	lr, r7
   1baa0:	str	r0, [r6]
   1baa4:	strd	r4, [lr]
   1baa8:	mov	r8, r0
   1baac:	ldr	ip, [sp, #8]
   1bab0:	ldr	r0, [pc, #800]	; 1bdd8 <read_boolean_unary_expression@@Base+0x1774>
   1bab4:	ldr	r1, [sl, #4]
   1bab8:	mov	r3, r8
   1babc:	add	r0, pc, r0
   1bac0:	lsr	r2, r9, #24
   1bac4:	ldrb	r7, [r0]
   1bac8:	ldr	r0, [pc, #780]	; 1bddc <read_boolean_unary_expression@@Base+0x1778>
   1bacc:	lsr	r6, r9, #16
   1bad0:	ldr	r0, [pc, r0]
   1bad4:	strb	r9, [r3, r0]!
   1bad8:	strb	r2, [r3, #3]
   1badc:	lsr	r2, r9, #8
   1bae0:	strb	r2, [r3, #1]
   1bae4:	adds	r2, r0, #4
   1bae8:	strb	r6, [r3, #2]
   1baec:	adc	r3, r1, #0
   1baf0:	cmp	r7, #1
   1baf4:	strd	r2, [sl]
   1baf8:	bne	1b81c <read_boolean_unary_expression@@Base+0x11b8>
   1bafc:	b	1bb2c <read_boolean_unary_expression@@Base+0x14c8>
   1bb00:	mov	r6, r8
   1bb04:	lsr	r2, r9, #24
   1bb08:	strb	r9, [r6, r0]!
   1bb0c:	lsr	r3, r9, #16
   1bb10:	strb	r2, [r6, #3]
   1bb14:	adds	r2, r0, #4
   1bb18:	lsr	r7, r9, #8
   1bb1c:	strb	r3, [r6, #2]
   1bb20:	adc	r3, r1, #0
   1bb24:	strb	r7, [r6, #1]
   1bb28:	strd	r2, [sl]
   1bb2c:	ldr	r5, [lr, #4]
   1bb30:	ldr	r4, [pc, #680]	; 1bde0 <read_boolean_unary_expression@@Base+0x177c>
   1bb34:	adds	r7, r0, #8
   1bb38:	adc	r6, r1, #0
   1bb3c:	ldr	r4, [pc, r4]
   1bb40:	subs	r7, r4, r7
   1bb44:	sbcs	r7, r5, r6
   1bb48:	bcs	1b81c <read_boolean_unary_expression@@Base+0x11b8>
   1bb4c:	mov	r2, #7
   1bb50:	orr	r2, r2, #131072	; 0x20000
   1bb54:	adds	r0, r0, r2
   1bb58:	adc	r1, r1, #0
   1bb5c:	mvn	r2, #0
   1bb60:	and	r5, r1, r2
   1bb64:	mov	r1, #16646144	; 0xfe0000
   1bb68:	orr	r1, r1, #-16777216	; 0xff000000
   1bb6c:	and	r6, r0, r1
   1bb70:	ldr	r4, [pc, #620]	; 1bde4 <read_boolean_unary_expression@@Base+0x1780>
   1bb74:	mov	r0, r8
   1bb78:	mov	r1, r6
   1bb7c:	add	r4, pc, r4
   1bb80:	mov	r7, lr
   1bb84:	bl	11e04 <realloc@plt>
   1bb88:	ldr	ip, [sp, #8]
   1bb8c:	str	r6, [r7]
   1bb90:	str	r5, [r7, #4]
   1bb94:	str	r0, [r4]
   1bb98:	ldr	r3, [sl, #4]
   1bb9c:	ldr	r2, [pc, #580]	; 1bde8 <read_boolean_unary_expression@@Base+0x1784>
   1bba0:	mov	r8, r0
   1bba4:	ldr	r2, [pc, r2]
   1bba8:	b	1b81c <read_boolean_unary_expression@@Base+0x11b8>
   1bbac:	mov	r0, #0
   1bbb0:	str	r0, [sp, #4]
   1bbb4:	ldr	sl, [pc, #600]	; 1be14 <read_boolean_unary_expression@@Base+0x17b0>
   1bbb8:	add	sl, pc, sl
   1bbbc:	mov	r3, r8
   1bbc0:	ldr	r0, [sp, #8]
   1bbc4:	strb	r5, [r3, r4]!
   1bbc8:	adds	r4, r4, #4
   1bbcc:	lsr	r6, r5, #24
   1bbd0:	lsr	r1, r5, #16
   1bbd4:	lsr	r2, r5, #8
   1bbd8:	adc	r5, r7, #0
   1bbdc:	strb	r6, [r3, #3]
   1bbe0:	strb	r1, [r3, #2]
   1bbe4:	strb	r2, [r3, #1]
   1bbe8:	strd	r4, [sl]
   1bbec:	bl	11e7c <strlen@plt>
   1bbf0:	mov	r7, r0
   1bbf4:	cmp	r9, #0
   1bbf8:	beq	1bc98 <read_boolean_unary_expression@@Base+0x1634>
   1bbfc:	ldr	r6, [pc, #548]	; 1be28 <read_boolean_unary_expression@@Base+0x17c4>
   1bc00:	adds	r0, r4, r7
   1bc04:	adc	r1, r5, #0
   1bc08:	add	r6, pc, r6
   1bc0c:	ldr	r2, [r6, #4]
   1bc10:	ldr	r3, [pc, #532]	; 1be2c <read_boolean_unary_expression@@Base+0x17c8>
   1bc14:	ldr	r3, [pc, r3]
   1bc18:	subs	r3, r3, r0
   1bc1c:	sbcs	r2, r2, r1
   1bc20:	bcs	1bc90 <read_boolean_unary_expression@@Base+0x162c>
   1bc24:	mov	r2, #7
   1bc28:	orr	r2, r2, #131072	; 0x20000
   1bc2c:	adds	r0, r0, r2
   1bc30:	adc	r1, r1, #0
   1bc34:	subs	r0, r0, #8
   1bc38:	sbc	r1, r1, #0
   1bc3c:	mvn	r2, #0
   1bc40:	and	r5, r1, r2
   1bc44:	mov	r1, #16646144	; 0xfe0000
   1bc48:	orr	r1, r1, #-16777216	; 0xff000000
   1bc4c:	and	r4, r0, r1
   1bc50:	ldr	r9, [pc, #472]	; 1be30 <read_boolean_unary_expression@@Base+0x17cc>
   1bc54:	mov	r0, r8
   1bc58:	mov	r1, r4
   1bc5c:	add	r9, pc, r9
   1bc60:	bl	11e04 <realloc@plt>
   1bc64:	strd	r4, [r6]
   1bc68:	str	r0, [r9]
   1bc6c:	mov	r8, r0
   1bc70:	ldr	r5, [sl, #4]
   1bc74:	ldr	r0, [pc, #440]	; 1be34 <read_boolean_unary_expression@@Base+0x17d0>
   1bc78:	add	r0, pc, r0
   1bc7c:	ldrb	r0, [r0]
   1bc80:	str	r0, [sp, #4]
   1bc84:	ldr	r4, [pc, #428]	; 1be38 <read_boolean_unary_expression@@Base+0x17d4>
   1bc88:	ldr	r4, [pc, r4]
   1bc8c:	b	1bc98 <read_boolean_unary_expression@@Base+0x1634>
   1bc90:	mov	r0, #1
   1bc94:	str	r0, [sp, #4]
   1bc98:	ldr	r9, [sp, #8]
   1bc9c:	add	r0, r8, r4
   1bca0:	mov	r2, r7
   1bca4:	mov	r1, r9
   1bca8:	bl	11dc8 <memcpy@plt>
   1bcac:	adds	r6, r4, r7
   1bcb0:	mov	r0, r9
   1bcb4:	adc	r5, r5, #0
   1bcb8:	str	r6, [sl]
   1bcbc:	str	r5, [sl, #4]
   1bcc0:	bl	11e7c <strlen@plt>
   1bcc4:	and	r0, r0, #3
   1bcc8:	rsb	r4, r0, #4
   1bccc:	ldr	r0, [sp, #4]
   1bcd0:	cmp	r0, #0
   1bcd4:	beq	1bd5c <read_boolean_unary_expression@@Base+0x16f8>
   1bcd8:	ldr	r7, [pc, #348]	; 1be3c <read_boolean_unary_expression@@Base+0x17d8>
   1bcdc:	adds	r0, r6, r4
   1bce0:	adc	r1, r5, #0
   1bce4:	add	r7, pc, r7
   1bce8:	ldr	r2, [r7, #4]
   1bcec:	ldr	r3, [pc, #332]	; 1be40 <read_boolean_unary_expression@@Base+0x17dc>
   1bcf0:	ldr	r3, [pc, r3]
   1bcf4:	subs	r3, r3, r0
   1bcf8:	sbcs	r2, r2, r1
   1bcfc:	bcs	1bd5c <read_boolean_unary_expression@@Base+0x16f8>
   1bd00:	mov	r2, #7
   1bd04:	orr	r2, r2, #131072	; 0x20000
   1bd08:	adds	r0, r0, r2
   1bd0c:	adc	r1, r1, #0
   1bd10:	subs	r0, r0, #8
   1bd14:	sbc	r1, r1, #0
   1bd18:	mvn	r2, #0
   1bd1c:	and	r5, r1, r2
   1bd20:	mov	r1, #16646144	; 0xfe0000
   1bd24:	orr	r1, r1, #-16777216	; 0xff000000
   1bd28:	and	r6, r0, r1
   1bd2c:	ldr	r9, [pc, #272]	; 1be44 <read_boolean_unary_expression@@Base+0x17e0>
   1bd30:	mov	r0, r8
   1bd34:	mov	r1, r6
   1bd38:	add	r9, pc, r9
   1bd3c:	bl	11e04 <realloc@plt>
   1bd40:	str	r6, [r7]
   1bd44:	str	r5, [r7, #4]
   1bd48:	str	r0, [r9]
   1bd4c:	ldr	r5, [sl, #4]
   1bd50:	ldr	r6, [pc, #240]	; 1be48 <read_boolean_unary_expression@@Base+0x17e4>
   1bd54:	mov	r8, r0
   1bd58:	ldr	r6, [pc, r6]
   1bd5c:	add	r0, r8, r6
   1bd60:	mov	r1, #0
   1bd64:	mov	r2, r4
   1bd68:	bl	11ec4 <memset@plt>
   1bd6c:	adds	r0, r6, r4
   1bd70:	adc	r1, r5, #0
   1bd74:	strd	r0, [sl]
   1bd78:	sub	sp, fp, #28
   1bd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd80:	andeq	r5, r1, r0, lsr #19
   1bd84:	andeq	r5, r1, r4, lsl #19
   1bd88:	andeq	r5, r1, r0, lsl #19
   1bd8c:	andeq	r5, r1, r4, ror r9
   1bd90:	andeq	r5, r1, r0, ror r9
   1bd94:	andeq	r5, r1, r4, asr r9
   1bd98:	andeq	r5, r1, r8, lsl #18
   1bd9c:	andeq	r5, r1, r4, lsl #18
   1bda0:	strdeq	r5, [r1], -r0
   1bda4:	andeq	r5, r1, r8, ror #17
   1bda8:	ldrdeq	r5, [r1], -r0
   1bdac:	andeq	r5, r1, r8, lsl #17
   1bdb0:	andeq	r5, r1, r0, lsl #15
   1bdb4:	andeq	r5, r1, r8, ror r8
   1bdb8:	andeq	r5, r1, ip, ror #16
   1bdbc:	andeq	r5, r1, r4, lsr r5
   1bdc0:	andeq	r5, r1, r8, lsr #16
   1bdc4:	strdeq	r5, [r1], -r8
   1bdc8:	strdeq	r5, [r1], -ip
   1bdcc:	andeq	r5, r1, r8, ror #15
   1bdd0:	andeq	r5, r1, r0, lsl r5
   1bdd4:	andeq	r5, r1, ip, asr #9
   1bdd8:	muleq	r1, r8, r4
   1bddc:	muleq	r1, r8, r4
   1bde0:	andeq	r5, r1, r4, lsr #8
   1bde4:	andeq	r5, r1, r0, ror #7
   1bde8:	andeq	r5, r1, r4, asr #7
   1bdec:	strdeq	r5, [r1], -r4
   1bdf0:	andeq	r5, r1, r4, ror #13
   1bdf4:	ldrdeq	r5, [r1], -r8
   1bdf8:	muleq	r1, r4, r6
   1bdfc:	andeq	r5, r1, r0, lsl #13
   1be00:	andeq	r5, r1, r4, ror r6
   1be04:	andeq	r5, r1, r4, asr #12
   1be08:	andeq	r5, r1, ip, lsl #12
   1be0c:	strdeq	r5, [r1], -ip
   1be10:	strdeq	r5, [r1], -r0
   1be14:			; <UNDEFINED> instruction: 0x000153b0
   1be18:	muleq	r1, ip, r5
   1be1c:	muleq	r1, r0, r5
   1be20:	andeq	r5, r1, r0, ror r5
   1be24:	andeq	r5, r1, r8, ror r5
   1be28:	andeq	r5, r1, r8, asr r3
   1be2c:	andeq	r5, r1, ip, asr #6
   1be30:	andeq	r5, r1, r0, lsl #6
   1be34:	ldrdeq	r5, [r1], -ip
   1be38:	andeq	r5, r1, r0, ror #5
   1be3c:	andeq	r5, r1, ip, ror r2
   1be40:	andeq	r5, r1, r0, ror r2
   1be44:	andeq	r5, r1, r4, lsr #4
   1be48:	andeq	r5, r1, r0, lsl r2
   1be4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be50:	add	fp, sp, #28
   1be54:	sub	sp, sp, #28
   1be58:	mov	ip, r0
   1be5c:	ldr	r0, [pc, #1728]	; 1c524 <read_boolean_unary_expression@@Base+0x1ec0>
   1be60:	ldr	r0, [pc, r0]
   1be64:	cmp	r0, #0
   1be68:	beq	1bf84 <read_boolean_unary_expression@@Base+0x1920>
   1be6c:	ldr	r2, [pc, #1716]	; 1c528 <read_boolean_unary_expression@@Base+0x1ec4>
   1be70:	mov	sl, r1
   1be74:	add	r2, pc, r2
   1be78:	ldr	r3, [r2, #4]
   1be7c:	ldr	r4, [pc, #1704]	; 1c52c <read_boolean_unary_expression@@Base+0x1ec8>
   1be80:	ldr	r4, [pc, r4]
   1be84:	ldr	r6, [pc, #1700]	; 1c530 <read_boolean_unary_expression@@Base+0x1ecc>
   1be88:	add	r6, pc, r6
   1be8c:	ldrb	r0, [r6]
   1be90:	cmp	r0, #0
   1be94:	beq	1bf8c <read_boolean_unary_expression@@Base+0x1928>
   1be98:	ldr	r8, [pc, #1720]	; 1c558 <read_boolean_unary_expression@@Base+0x1ef4>
   1be9c:	mov	r5, #10551296	; 0xa10000
   1bea0:	adds	r9, r4, #4
   1bea4:	add	r8, pc, r8
   1bea8:	adc	r2, r3, #0
   1beac:	ldr	r0, [r8, #4]
   1beb0:	ldr	r1, [pc, #1700]	; 1c55c <read_boolean_unary_expression@@Base+0x1ef8>
   1beb4:	orr	r5, r5, #16777216	; 0x1000000
   1beb8:	ldr	r1, [pc, r1]
   1bebc:	subs	r1, r1, r9
   1bec0:	sbcs	r0, r0, r2
   1bec4:	bcs	1c09c <read_boolean_unary_expression@@Base+0x1a38>
   1bec8:	mov	r0, #3
   1becc:	orr	r0, r0, #131072	; 0x20000
   1bed0:	adds	r0, r4, r0
   1bed4:	adc	r1, r3, #0
   1bed8:	mvn	r2, #0
   1bedc:	and	r9, r1, r2
   1bee0:	mov	r1, #16646144	; 0xfe0000
   1bee4:	orr	r1, r1, #-16777216	; 0xff000000
   1bee8:	and	r4, r0, r1
   1beec:	ldr	r0, [pc, #1652]	; 1c568 <read_boolean_unary_expression@@Base+0x1f04>
   1bef0:	mov	r1, r4
   1bef4:	mov	r7, ip
   1bef8:	ldr	r0, [pc, r0]
   1befc:	bl	11e04 <realloc@plt>
   1bf00:	ldr	ip, [pc, #1636]	; 1c56c <read_boolean_unary_expression@@Base+0x1f08>
   1bf04:	ldr	lr, [pc, #1636]	; 1c570 <read_boolean_unary_expression@@Base+0x1f0c>
   1bf08:	stm	r8, {r4, r9}
   1bf0c:	ldr	r1, [pc, #1632]	; 1c574 <read_boolean_unary_expression@@Base+0x1f10>
   1bf10:	add	ip, pc, ip
   1bf14:	add	lr, pc, lr
   1bf18:	add	r1, pc, r1
   1bf1c:	mov	r2, r0
   1bf20:	str	r2, [r1]
   1bf24:	mov	r6, ip
   1bf28:	ldrb	ip, [ip]
   1bf2c:	ldr	r3, [lr, #4]
   1bf30:	ldr	r4, [pc, #1600]	; 1c578 <read_boolean_unary_expression@@Base+0x1f14>
   1bf34:	lsr	r0, r5, #24
   1bf38:	mov	r1, r8
   1bf3c:	ldr	r4, [pc, r4]
   1bf40:	str	r2, [sp, #20]
   1bf44:	lsl	r8, r7, #1
   1bf48:	strb	r5, [r2, r4]!
   1bf4c:	adds	r9, r4, #4
   1bf50:	strb	r0, [r2, #3]
   1bf54:	lsr	r0, r5, #16
   1bf58:	strb	r0, [r2, #2]
   1bf5c:	lsr	r0, r5, #8
   1bf60:	strb	r0, [r2, #1]
   1bf64:	adc	r5, r3, #0
   1bf68:	mov	r0, #0
   1bf6c:	cmp	ip, #1
   1bf70:	str	r3, [sp, #16]
   1bf74:	str	r9, [lr]
   1bf78:	str	r5, [lr, #4]
   1bf7c:	beq	1c0f0 <read_boolean_unary_expression@@Base+0x1a8c>
   1bf80:	b	1c240 <read_boolean_unary_expression@@Base+0x1bdc>
   1bf84:	sub	sp, fp, #28
   1bf88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf8c:	ldr	r0, [pc, #1440]	; 1c534 <read_boolean_unary_expression@@Base+0x1ed0>
   1bf90:	mov	r7, r3
   1bf94:	adds	r9, r4, #4
   1bf98:	mov	lr, r2
   1bf9c:	ldr	r0, [pc, r0]
   1bfa0:	str	r0, [sp, #20]
   1bfa4:	ldrb	r1, [r0, r4]!
   1bfa8:	str	r7, [sp, #16]
   1bfac:	ldrb	r5, [r0, #1]
   1bfb0:	ldrb	r3, [r0, #2]
   1bfb4:	ldrb	r0, [r0, #3]
   1bfb8:	orr	r1, r1, r5, lsl #8
   1bfbc:	orr	r1, r1, r3, lsl #16
   1bfc0:	orr	r3, r1, r0, lsl #24
   1bfc4:	adc	r5, r7, #0
   1bfc8:	mov	r7, #0
   1bfcc:	cmn	r3, #1
   1bfd0:	str	r9, [r2]
   1bfd4:	str	r5, [r2, #4]
   1bfd8:	beq	1c19c <read_boolean_unary_expression@@Base+0x1b38>
   1bfdc:	mov	r0, #10551296	; 0xa10000
   1bfe0:	orr	r0, r0, #16777216	; 0x1000000
   1bfe4:	cmp	r3, r0
   1bfe8:	bne	1c1a8 <read_boolean_unary_expression@@Base+0x1b44>
   1bfec:	str	r5, [sp, #8]
   1bff0:	ldr	r0, [sp, #20]
   1bff4:	str	r4, [sp, #4]
   1bff8:	adds	r5, r4, #8
   1bffc:	ldr	r3, [r0, r9]
   1c000:	ldr	r0, [sp, #16]
   1c004:	mov	r1, r9
   1c008:	adc	r9, r0, #0
   1c00c:	cmn	r3, #1
   1c010:	stm	lr, {r5, r9}
   1c014:	beq	1c1b4 <read_boolean_unary_expression@@Base+0x1b50>
   1c018:	lsr	r0, r3, #1
   1c01c:	mov	r7, ip
   1c020:	cmp	r0, ip
   1c024:	bne	1c1b4 <read_boolean_unary_expression@@Base+0x1b50>
   1c028:	lsl	r0, r7, #3
   1c02c:	mov	r4, r1
   1c030:	bl	11e34 <malloc@plt>
   1c034:	mov	r1, r0
   1c038:	cmp	r7, #0
   1c03c:	beq	1c1dc <read_boolean_unary_expression@@Base+0x1b78>
   1c040:	mov	r0, r7
   1c044:	str	r7, [sp, #24]
   1c048:	str	r1, [sp, #12]
   1c04c:	ldr	r2, [sp, #20]
   1c050:	ldr	r3, [r2, r5]!
   1c054:	adds	r5, r5, #8
   1c058:	ldr	r2, [r2, #4]
   1c05c:	str	r3, [r1]
   1c060:	adc	r9, r9, #0
   1c064:	str	r2, [r1, #4]
   1c068:	subs	r0, r0, #1
   1c06c:	add	r1, r1, #8
   1c070:	bne	1c04c <read_boolean_unary_expression@@Base+0x19e8>
   1c074:	ldr	lr, [pc, #1236]	; 1c550 <read_boolean_unary_expression@@Base+0x1eec>
   1c078:	add	lr, pc, lr
   1c07c:	mov	r0, lr
   1c080:	stm	r0, {r5, r9}
   1c084:	ldr	ip, [pc, #1224]	; 1c554 <read_boolean_unary_expression@@Base+0x1ef0>
   1c088:	ldr	r0, [sp, #12]
   1c08c:	add	ip, pc, ip
   1c090:	mov	r6, ip
   1c094:	ldr	ip, [sp, #24]
   1c098:	b	1c1f8 <read_boolean_unary_expression@@Base+0x1b94>
   1c09c:	str	r3, [sp, #16]
   1c0a0:	ldr	r3, [pc, #1208]	; 1c560 <read_boolean_unary_expression@@Base+0x1efc>
   1c0a4:	mov	lr, r5
   1c0a8:	mov	r7, ip
   1c0ac:	lsr	ip, r5, #16
   1c0b0:	ldr	r3, [pc, r3]
   1c0b4:	lsr	r1, r5, #8
   1c0b8:	str	r3, [sp, #20]
   1c0bc:	strb	lr, [r3, r4]!
   1c0c0:	lsr	r0, lr, #24
   1c0c4:	strb	r1, [r3, #1]
   1c0c8:	strb	r0, [r3, #3]
   1c0cc:	strb	ip, [r3, #2]
   1c0d0:	ldr	lr, [pc, #1164]	; 1c564 <read_boolean_unary_expression@@Base+0x1f00>
   1c0d4:	lsl	r5, r7, #1
   1c0d8:	add	lr, pc, lr
   1c0dc:	mov	r1, r8
   1c0e0:	mov	r8, r5
   1c0e4:	str	r9, [lr]
   1c0e8:	str	r2, [lr, #4]
   1c0ec:	mov	r5, r2
   1c0f0:	str	r8, [sp, #24]
   1c0f4:	mov	r8, r1
   1c0f8:	ldr	r0, [sp, #16]
   1c0fc:	ldr	r2, [r8, #4]
   1c100:	ldr	r3, [pc, #1140]	; 1c57c <read_boolean_unary_expression@@Base+0x1f18>
   1c104:	adds	ip, r4, #8
   1c108:	adc	r1, r0, #0
   1c10c:	mov	r0, #0
   1c110:	ldr	r3, [pc, r3]
   1c114:	subs	r3, r3, ip
   1c118:	sbcs	r1, r2, r1
   1c11c:	bcs	1c194 <read_boolean_unary_expression@@Base+0x1b30>
   1c120:	ldr	r5, [pc, #1112]	; 1c580 <read_boolean_unary_expression@@Base+0x1f1c>
   1c124:	mov	r0, #3
   1c128:	ldr	r1, [sp, #16]
   1c12c:	orr	r0, r0, #131072	; 0x20000
   1c130:	adds	r0, r4, r0
   1c134:	adc	r1, r1, #0
   1c138:	adds	r0, r0, #4
   1c13c:	adc	r1, r1, #0
   1c140:	mvn	r2, #0
   1c144:	and	r9, r1, r2
   1c148:	mov	r1, #16646144	; 0xfe0000
   1c14c:	orr	r1, r1, #-16777216	; 0xff000000
   1c150:	and	r4, r0, r1
   1c154:	ldr	r0, [sp, #20]
   1c158:	mov	r1, r4
   1c15c:	add	r5, pc, r5
   1c160:	bl	11e04 <realloc@plt>
   1c164:	ldr	ip, [pc, #1048]	; 1c584 <read_boolean_unary_expression@@Base+0x1f20>
   1c168:	ldr	lr, [pc, #1048]	; 1c588 <read_boolean_unary_expression@@Base+0x1f24>
   1c16c:	stm	r8, {r4, r9}
   1c170:	add	lr, pc, lr
   1c174:	str	r0, [r5]
   1c178:	str	r0, [sp, #20]
   1c17c:	ldr	r5, [lr, #4]
   1c180:	ldr	r9, [pc, #1028]	; 1c58c <read_boolean_unary_expression@@Base+0x1f28>
   1c184:	add	ip, pc, ip
   1c188:	mov	r6, ip
   1c18c:	mov	r0, #0
   1c190:	ldr	r9, [pc, r9]
   1c194:	ldr	r8, [sp, #24]
   1c198:	b	1c240 <read_boolean_unary_expression@@Base+0x1bdc>
   1c19c:	ldr	r1, [sp, #16]
   1c1a0:	mov	r0, #0
   1c1a4:	b	1c20c <read_boolean_unary_expression@@Base+0x1ba8>
   1c1a8:	ldr	r1, [pc, #904]	; 1c538 <read_boolean_unary_expression@@Base+0x1ed4>
   1c1ac:	add	r1, pc, r1
   1c1b0:	b	1c1bc <read_boolean_unary_expression@@Base+0x1b58>
   1c1b4:	ldr	r1, [pc, #904]	; 1c544 <read_boolean_unary_expression@@Base+0x1ee0>
   1c1b8:	add	r1, pc, r1
   1c1bc:	ldr	r0, [pc, #888]	; 1c53c <read_boolean_unary_expression@@Base+0x1ed8>
   1c1c0:	ldr	r0, [pc, r0]
   1c1c4:	ldr	r0, [r0]
   1c1c8:	ldr	r2, [pc, #880]	; 1c540 <read_boolean_unary_expression@@Base+0x1edc>
   1c1cc:	ldr	r2, [pc, r2]
   1c1d0:	sub	sp, fp, #28
   1c1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1d8:	b	11e94 <fprintf@plt>
   1c1dc:	ldr	lr, [pc, #868]	; 1c548 <read_boolean_unary_expression@@Base+0x1ee4>
   1c1e0:	ldr	ip, [pc, #868]	; 1c54c <read_boolean_unary_expression@@Base+0x1ee8>
   1c1e4:	mov	r0, r1
   1c1e8:	add	lr, pc, lr
   1c1ec:	add	ip, pc, ip
   1c1f0:	mov	r6, ip
   1c1f4:	mov	ip, r7
   1c1f8:	mov	r9, r4
   1c1fc:	ldr	r5, [sp, #8]
   1c200:	ldr	r4, [sp, #4]
   1c204:	ldr	r1, [sp, #16]
   1c208:	mov	r7, #0
   1c20c:	str	r4, [lr]
   1c210:	str	r1, [lr, #4]
   1c214:	ldr	r2, [sp, #20]
   1c218:	mov	r1, #1
   1c21c:	lsl	r8, ip, #1
   1c220:	strb	r7, [r2, r4]!
   1c224:	strb	r1, [r2, #3]
   1c228:	mov	r1, #161	; 0xa1
   1c22c:	strb	r7, [r2, #1]
   1c230:	strb	r1, [r2, #2]
   1c234:	str	r9, [lr]
   1c238:	str	r5, [lr, #4]
   1c23c:	mov	r7, ip
   1c240:	ldr	r3, [sp, #20]
   1c244:	lsr	r1, r8, #16
   1c248:	mov	ip, r3
   1c24c:	strb	r8, [r3, r9]!
   1c250:	lsr	r4, r8, #24
   1c254:	lsr	r2, r8, #8
   1c258:	adds	r8, r9, #4
   1c25c:	strb	r1, [r3, #2]
   1c260:	adc	r1, r5, #0
   1c264:	cmp	r7, #0
   1c268:	strb	r4, [r3, #3]
   1c26c:	strb	r2, [r3, #1]
   1c270:	str	r8, [lr]
   1c274:	str	r1, [lr, #4]
   1c278:	str	r7, [sp, #24]
   1c27c:	beq	1c518 <read_boolean_unary_expression@@Base+0x1eb4>
   1c280:	ldr	r7, [pc, #776]	; 1c590 <read_boolean_unary_expression@@Base+0x1f2c>
   1c284:	mov	r4, lr
   1c288:	mov	r2, r0
   1c28c:	add	r7, pc, r7
   1c290:	str	r0, [sp, #12]
   1c294:	cmp	r0, #0
   1c298:	mov	r0, r4
   1c29c:	str	r2, [sp, #16]
   1c2a0:	beq	1c2ac <read_boolean_unary_expression@@Base+0x1c48>
   1c2a4:	ldrd	r2, [r2]
   1c2a8:	b	1c2b4 <read_boolean_unary_expression@@Base+0x1c50>
   1c2ac:	mov	r2, #0
   1c2b0:	mov	r3, #0
   1c2b4:	ldrd	r4, [sl]
   1c2b8:	adds	r4, r4, r2
   1c2bc:	adc	r5, r5, r3
   1c2c0:	strd	r4, [sl]
   1c2c4:	ldrb	r2, [r6]
   1c2c8:	str	sl, [sp, #20]
   1c2cc:	cmp	r2, #0
   1c2d0:	beq	1c39c <read_boolean_unary_expression@@Base+0x1d38>
   1c2d4:	ldr	r3, [r7, #4]
   1c2d8:	ldr	r6, [pc, #692]	; 1c594 <read_boolean_unary_expression@@Base+0x1f30>
   1c2dc:	adds	r2, r8, #4
   1c2e0:	adc	r9, r1, #0
   1c2e4:	ldr	r6, [pc, r6]
   1c2e8:	subs	r2, r6, r2
   1c2ec:	sbcs	r2, r3, r9
   1c2f0:	bcs	1c3d8 <read_boolean_unary_expression@@Base+0x1d74>
   1c2f4:	mov	r2, #3
   1c2f8:	orr	r2, r2, #131072	; 0x20000
   1c2fc:	adds	r0, r8, r2
   1c300:	adc	r1, r1, #0
   1c304:	mvn	r2, #0
   1c308:	and	r8, r1, r2
   1c30c:	mov	r1, #16646144	; 0xfe0000
   1c310:	orr	r1, r1, #-16777216	; 0xff000000
   1c314:	and	r6, r0, r1
   1c318:	mov	r0, ip
   1c31c:	mov	r1, r6
   1c320:	bl	11e04 <realloc@plt>
   1c324:	ldr	ip, [pc, #620]	; 1c598 <read_boolean_unary_expression@@Base+0x1f34>
   1c328:	ldr	lr, [pc, #620]	; 1c59c <read_boolean_unary_expression@@Base+0x1f38>
   1c32c:	stm	r7, {r6, r8}
   1c330:	mov	r3, r0
   1c334:	ldr	r0, [pc, #612]	; 1c5a0 <read_boolean_unary_expression@@Base+0x1f3c>
   1c338:	add	lr, pc, lr
   1c33c:	mov	r9, lr
   1c340:	add	r0, pc, r0
   1c344:	add	ip, pc, ip
   1c348:	str	r3, [r0]
   1c34c:	mov	lr, ip
   1c350:	ldrb	ip, [ip]
   1c354:	ldr	r1, [r9, #4]
   1c358:	ldr	r8, [pc, #580]	; 1c5a4 <read_boolean_unary_expression@@Base+0x1f40>
   1c35c:	mov	r7, r3
   1c360:	lsr	r2, r4, #24
   1c364:	ldr	r8, [pc, r8]
   1c368:	lsr	r6, r4, #16
   1c36c:	strb	r4, [r7, r8]!
   1c370:	strb	r2, [r7, #3]
   1c374:	lsr	r2, r4, #8
   1c378:	strb	r2, [r7, #1]
   1c37c:	adds	r2, r8, #4
   1c380:	mov	r4, r9
   1c384:	adc	r9, r1, #0
   1c388:	cmp	ip, #1
   1c38c:	strb	r6, [r7, #2]
   1c390:	stm	r4, {r2, r9}
   1c394:	beq	1c40c <read_boolean_unary_expression@@Base+0x1da8>
   1c398:	b	1c4b8 <read_boolean_unary_expression@@Base+0x1e54>
   1c39c:	mov	r7, ip
   1c3a0:	lsr	r2, r4, #24
   1c3a4:	strb	r4, [r7, r8]!
   1c3a8:	lsr	r9, r4, #16
   1c3ac:	strb	r2, [r7, #3]
   1c3b0:	adds	r2, r8, #4
   1c3b4:	mov	lr, r6
   1c3b8:	lsr	r6, r4, #8
   1c3bc:	strb	r9, [r7, #2]
   1c3c0:	adc	r9, r1, #0
   1c3c4:	mov	r4, r0
   1c3c8:	strb	r6, [r7, #1]
   1c3cc:	mov	r3, ip
   1c3d0:	stm	r4, {r2, r9}
   1c3d4:	b	1c4b8 <read_boolean_unary_expression@@Base+0x1e54>
   1c3d8:	mov	r6, ip
   1c3dc:	lsr	r2, r4, #24
   1c3e0:	strb	r4, [r6, r8]!
   1c3e4:	lsr	r9, r4, #16
   1c3e8:	strb	r2, [r6, #3]
   1c3ec:	adds	r2, r8, #4
   1c3f0:	lsr	r7, r4, #8
   1c3f4:	strb	r9, [r6, #2]
   1c3f8:	adc	r9, r1, #0
   1c3fc:	mov	r4, r0
   1c400:	strb	r7, [r6, #1]
   1c404:	mov	r3, ip
   1c408:	stm	r4, {r2, r9}
   1c40c:	ldr	lr, [pc, #404]	; 1c5a8 <read_boolean_unary_expression@@Base+0x1f44>
   1c410:	mov	r0, r4
   1c414:	adds	r7, r8, #8
   1c418:	add	lr, pc, lr
   1c41c:	adc	ip, r1, #0
   1c420:	ldr	r4, [lr, #4]
   1c424:	ldr	r6, [pc, #384]	; 1c5ac <read_boolean_unary_expression@@Base+0x1f48>
   1c428:	ldr	r6, [pc, r6]
   1c42c:	subs	r7, r6, r7
   1c430:	sbcs	r7, r4, ip
   1c434:	bcs	1c4ac <read_boolean_unary_expression@@Base+0x1e48>
   1c438:	mov	r2, #3
   1c43c:	orr	r2, r2, #131072	; 0x20000
   1c440:	adds	r0, r8, r2
   1c444:	adc	r1, r1, #0
   1c448:	adds	r0, r0, #4
   1c44c:	adc	r1, r1, #0
   1c450:	mvn	r2, #0
   1c454:	and	r7, r1, r2
   1c458:	mov	r1, #16646144	; 0xfe0000
   1c45c:	orr	r1, r1, #-16777216	; 0xff000000
   1c460:	and	r6, r0, r1
   1c464:	mov	r0, r3
   1c468:	mov	r1, r6
   1c46c:	mov	r8, lr
   1c470:	bl	11e04 <realloc@plt>
   1c474:	ldr	lr, [pc, #312]	; 1c5b4 <read_boolean_unary_expression@@Base+0x1f50>
   1c478:	strd	r6, [r8]
   1c47c:	mov	r3, r0
   1c480:	add	lr, pc, lr
   1c484:	mov	r4, lr
   1c488:	ldr	r9, [lr, #4]
   1c48c:	ldr	r0, [pc, #292]	; 1c5b8 <read_boolean_unary_expression@@Base+0x1f54>
   1c490:	add	r0, pc, r0
   1c494:	str	r3, [r0]
   1c498:	ldr	r2, [pc, #284]	; 1c5bc <read_boolean_unary_expression@@Base+0x1f58>
   1c49c:	ldr	r2, [pc, r2]
   1c4a0:	ldr	lr, [pc, #280]	; 1c5c0 <read_boolean_unary_expression@@Base+0x1f5c>
   1c4a4:	add	lr, pc, lr
   1c4a8:	b	1c4b8 <read_boolean_unary_expression@@Base+0x1e54>
   1c4ac:	ldr	lr, [pc, #252]	; 1c5b0 <read_boolean_unary_expression@@Base+0x1f4c>
   1c4b0:	mov	r4, r0
   1c4b4:	add	lr, pc, lr
   1c4b8:	mov	ip, r3
   1c4bc:	lsr	r1, r5, #16
   1c4c0:	strb	r5, [r3, r2]!
   1c4c4:	lsr	r0, r5, #24
   1c4c8:	lsr	r7, r5, #8
   1c4cc:	adds	r8, r2, #4
   1c4d0:	strb	r1, [r3, #2]
   1c4d4:	adc	r1, r9, #0
   1c4d8:	strb	r0, [r3, #3]
   1c4dc:	strb	r7, [r3, #1]
   1c4e0:	str	r8, [r4]
   1c4e4:	str	r1, [r4, #4]
   1c4e8:	ldr	r0, [sp, #24]
   1c4ec:	mov	r6, lr
   1c4f0:	subs	r0, r0, #1
   1c4f4:	str	r0, [sp, #24]
   1c4f8:	ldr	sl, [sp, #20]
   1c4fc:	ldr	r2, [sp, #16]
   1c500:	ldr	r0, [sp, #12]
   1c504:	ldr	r7, [pc, #184]	; 1c5c4 <read_boolean_unary_expression@@Base+0x1f60>
   1c508:	add	sl, sl, #8
   1c50c:	add	r2, r2, #8
   1c510:	add	r7, pc, r7
   1c514:	bne	1c294 <read_boolean_unary_expression@@Base+0x1c30>
   1c518:	sub	sp, fp, #28
   1c51c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c520:	b	11dbc <free@plt>
   1c524:	strdeq	r5, [r1], -r8
   1c528:	strdeq	r5, [r1], -r4
   1c52c:	andeq	r5, r1, r8, ror #1
   1c530:	andeq	r5, r1, ip, asr #1
   1c534:	andeq	r4, r1, r0, asr #31
   1c538:	ldrdeq	r2, [r0], -r4
   1c53c:	strdeq	r3, [r1], -r4
   1c540:	andeq	r4, r1, r4, lsl #27
   1c544:	andeq	r2, r0, r2, lsl ip
   1c548:	andeq	r4, r1, r0, lsl #27
   1c54c:	andeq	r4, r1, r8, ror #26
   1c550:	strdeq	r4, [r1], -r0
   1c554:	andeq	r4, r1, r8, asr #29
   1c558:	strheq	r5, [r1], -ip
   1c55c:	andeq	r5, r1, r8, lsr #1
   1c560:	andeq	r4, r1, ip, lsr #29
   1c564:	muleq	r1, r0, lr
   1c568:	andeq	r5, r1, r4, rrx
   1c56c:	andeq	r5, r1, r4, asr #32
   1c570:	andeq	r5, r1, r4, asr r0
   1c574:	andeq	r5, r1, r4, asr #32
   1c578:	andeq	r5, r1, ip, lsr #32
   1c57c:	andeq	r4, r1, r0, asr lr
   1c580:	andeq	r4, r1, r0, lsl #28
   1c584:	ldrdeq	r4, [r1], -r0
   1c588:	strdeq	r4, [r1], -r8
   1c58c:	ldrdeq	r4, [r1], -r8
   1c590:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c594:	andeq	r4, r1, ip, ror ip
   1c598:	andeq	r4, r1, r0, lsl ip
   1c59c:	andeq	r4, r1, r0, lsr ip
   1c5a0:	andeq	r4, r1, ip, lsl ip
   1c5a4:	andeq	r4, r1, r4, lsl #24
   1c5a8:	andeq	r4, r1, r8, asr #22
   1c5ac:	andeq	r4, r1, r8, lsr fp
   1c5b0:	andeq	r4, r1, r0, lsr #21
   1c5b4:	andeq	r4, r1, r8, ror #21
   1c5b8:	andeq	r4, r1, ip, asr #21
   1c5bc:	andeq	r4, r1, ip, asr #21
   1c5c0:			; <UNDEFINED> instruction: 0x00014ab0
   1c5c4:	andeq	r4, r1, r0, asr sl
   1c5c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5cc:	add	fp, sp, #28
   1c5d0:	sub	sp, sp, #4
   1c5d4:	ldr	r0, [pc, #3180]	; 1d248 <read_boolean_unary_expression@@Base+0x2be4>
   1c5d8:	ldr	r0, [pc, r0]
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1cc3c <read_boolean_unary_expression@@Base+0x25d8>
   1c5e4:	ldr	sl, [pc, #3168]	; 1d24c <read_boolean_unary_expression@@Base+0x2be8>
   1c5e8:	add	sl, pc, sl
   1c5ec:	ldr	r6, [sl, #4]
   1c5f0:	ldr	r5, [pc, #3160]	; 1d250 <read_boolean_unary_expression@@Base+0x2bec>
   1c5f4:	ldr	r5, [pc, r5]
   1c5f8:	ldr	r8, [pc, #3156]	; 1d254 <read_boolean_unary_expression@@Base+0x2bf0>
   1c5fc:	add	r8, pc, r8
   1c600:	ldrb	r0, [r8]
   1c604:	cmp	r0, #0
   1c608:	beq	1c6cc <read_boolean_unary_expression@@Base+0x2068>
   1c60c:	ldr	r9, [pc, #3164]	; 1d270 <read_boolean_unary_expression@@Base+0x2c0c>
   1c610:	adds	r2, r5, #4
   1c614:	adc	ip, r6, #0
   1c618:	add	r9, pc, r9
   1c61c:	ldr	r0, [r9, #4]
   1c620:	ldr	r3, [pc, #3148]	; 1d274 <read_boolean_unary_expression@@Base+0x2c10>
   1c624:	ldr	r3, [pc, r3]
   1c628:	subs	r3, r3, r2
   1c62c:	sbcs	r0, r0, ip
   1c630:	bcs	1c720 <read_boolean_unary_expression@@Base+0x20bc>
   1c634:	mov	r0, #7
   1c638:	orr	r0, r0, #131072	; 0x20000
   1c63c:	adds	r0, r5, r0
   1c640:	adc	r1, r6, #0
   1c644:	subs	r0, r0, #4
   1c648:	sbc	r1, r1, #0
   1c64c:	mvn	r2, #0
   1c650:	and	r5, r1, r2
   1c654:	mov	r1, #16646144	; 0xfe0000
   1c658:	orr	r1, r1, #-16777216	; 0xff000000
   1c65c:	ldr	r4, [pc, #3096]	; 1d27c <read_boolean_unary_expression@@Base+0x2c18>
   1c660:	and	r6, r0, r1
   1c664:	ldr	r0, [pc, #3092]	; 1d280 <read_boolean_unary_expression@@Base+0x2c1c>
   1c668:	mov	r1, r6
   1c66c:	add	r4, pc, r4
   1c670:	ldr	r0, [pc, r0]
   1c674:	bl	11e04 <realloc@plt>
   1c678:	str	r6, [r9]
   1c67c:	str	r5, [r9, #4]
   1c680:	str	r0, [r4]
   1c684:	ldrb	r3, [r8]
   1c688:	ldr	r6, [sl, #4]
   1c68c:	ldr	r5, [pc, #3056]	; 1d284 <read_boolean_unary_expression@@Base+0x2c20>
   1c690:	mov	r2, r0
   1c694:	mov	r1, #0
   1c698:	mov	r7, #161	; 0xa1
   1c69c:	ldr	r5, [pc, r5]
   1c6a0:	strb	r1, [r2, r5]!
   1c6a4:	strb	r7, [r2, #3]
   1c6a8:	strb	r1, [r2, #2]
   1c6ac:	strb	r1, [r2, #1]
   1c6b0:	adds	r2, r5, #4
   1c6b4:	adc	ip, r6, #0
   1c6b8:	mov	r7, #1
   1c6bc:	cmp	r3, #1
   1c6c0:	stm	sl, {r2, ip}
   1c6c4:	beq	1c748 <read_boolean_unary_expression@@Base+0x20e4>
   1c6c8:	b	1c920 <read_boolean_unary_expression@@Base+0x22bc>
   1c6cc:	ldr	r0, [pc, #2948]	; 1d258 <read_boolean_unary_expression@@Base+0x2bf4>
   1c6d0:	ldr	r0, [pc, r0]
   1c6d4:	mov	r1, r0
   1c6d8:	ldrb	r2, [r1, r5]!
   1c6dc:	ldrb	r3, [r1, #1]
   1c6e0:	ldrb	r7, [r1, #2]
   1c6e4:	ldrb	r1, [r1, #3]
   1c6e8:	orr	r2, r2, r3, lsl #8
   1c6ec:	orr	r2, r2, r7, lsl #16
   1c6f0:	orr	r3, r2, r1, lsl #24
   1c6f4:	adds	r2, r5, #4
   1c6f8:	adc	ip, r6, #0
   1c6fc:	cmp	r3, #-1593835520	; 0xa1000000
   1c700:	stm	sl, {r2, ip}
   1c704:	beq	1c8c0 <read_boolean_unary_expression@@Base+0x225c>
   1c708:	mov	r7, #1
   1c70c:	cmn	r3, #1
   1c710:	beq	1c900 <read_boolean_unary_expression@@Base+0x229c>
   1c714:	ldr	r1, [pc, #2880]	; 1d25c <read_boolean_unary_expression@@Base+0x2bf8>
   1c718:	add	r1, pc, r1
   1c71c:	b	1d000 <read_boolean_unary_expression@@Base+0x299c>
   1c720:	ldr	r0, [pc, #2896]	; 1d278 <read_boolean_unary_expression@@Base+0x2c14>
   1c724:	mov	r3, #0
   1c728:	mov	r4, #161	; 0xa1
   1c72c:	ldr	r0, [pc, r0]
   1c730:	mov	r7, r0
   1c734:	strb	r3, [r7, r5]!
   1c738:	strb	r4, [r7, #3]
   1c73c:	strb	r3, [r7, #2]
   1c740:	strb	r3, [r7, #1]
   1c744:	stm	sl, {r2, ip}
   1c748:	ldr	r4, [r9, #4]
   1c74c:	ldr	r1, [pc, #2868]	; 1d288 <read_boolean_unary_expression@@Base+0x2c24>
   1c750:	adds	r3, r5, #8
   1c754:	adc	r7, r6, #0
   1c758:	ldr	r1, [pc, r1]
   1c75c:	subs	r1, r1, r3
   1c760:	sbcs	r1, r4, r7
   1c764:	bcs	1c7f0 <read_boolean_unary_expression@@Base+0x218c>
   1c768:	mov	r1, #7
   1c76c:	orr	r1, r1, #131072	; 0x20000
   1c770:	adds	r1, r5, r1
   1c774:	adc	r2, r6, #0
   1c778:	mvn	r3, #0
   1c77c:	and	r5, r2, r3
   1c780:	mov	r2, #16646144	; 0xfe0000
   1c784:	orr	r2, r2, #-16777216	; 0xff000000
   1c788:	ldr	r4, [pc, #2812]	; 1d28c <read_boolean_unary_expression@@Base+0x2c28>
   1c78c:	and	r6, r1, r2
   1c790:	mov	r1, r6
   1c794:	add	r4, pc, r4
   1c798:	bl	11e04 <realloc@plt>
   1c79c:	str	r6, [r9]
   1c7a0:	str	r5, [r9, #4]
   1c7a4:	str	r0, [r4]
   1c7a8:	ldrb	r1, [r8]
   1c7ac:	ldr	ip, [sl, #4]
   1c7b0:	ldr	r2, [pc, #2776]	; 1d290 <read_boolean_unary_expression@@Base+0x2c2c>
   1c7b4:	mov	r7, r0
   1c7b8:	mov	r3, #9
   1c7bc:	ldr	r2, [pc, r2]
   1c7c0:	strb	r3, [r7, r2]!
   1c7c4:	mov	r3, #0
   1c7c8:	strb	r3, [r7, #3]
   1c7cc:	strb	r3, [r7, #2]
   1c7d0:	strb	r3, [r7, #1]
   1c7d4:	adds	r3, r2, #4
   1c7d8:	adc	r5, ip, #0
   1c7dc:	mov	r7, #1
   1c7e0:	cmp	r1, #1
   1c7e4:	stm	sl, {r3, r5}
   1c7e8:	beq	1c818 <read_boolean_unary_expression@@Base+0x21b4>
   1c7ec:	b	1c948 <read_boolean_unary_expression@@Base+0x22e4>
   1c7f0:	mov	r3, r0
   1c7f4:	mov	r1, #9
   1c7f8:	strb	r1, [r3, r2]!
   1c7fc:	mov	r1, #0
   1c800:	strb	r1, [r3, #3]
   1c804:	strb	r1, [r3, #2]
   1c808:	strb	r1, [r3, #1]
   1c80c:	adds	r3, r2, #4
   1c810:	adc	r5, ip, #0
   1c814:	stm	sl, {r3, r5}
   1c818:	ldr	r6, [r9, #4]
   1c81c:	ldr	r4, [pc, #2672]	; 1d294 <read_boolean_unary_expression@@Base+0x2c30>
   1c820:	adds	r1, r2, #8
   1c824:	adc	r7, ip, #0
   1c828:	ldr	r4, [pc, r4]
   1c82c:	subs	r1, r4, r1
   1c830:	sbcs	r1, r6, r7
   1c834:	bcs	1cd0c <read_boolean_unary_expression@@Base+0x26a8>
   1c838:	mov	r1, #7
   1c83c:	orr	r1, r1, #131072	; 0x20000
   1c840:	adds	r1, r2, r1
   1c844:	adc	r2, ip, #0
   1c848:	mvn	r3, #0
   1c84c:	and	r5, r2, r3
   1c850:	mov	r2, #16646144	; 0xfe0000
   1c854:	orr	r2, r2, #-16777216	; 0xff000000
   1c858:	ldr	r4, [pc, #2616]	; 1d298 <read_boolean_unary_expression@@Base+0x2c34>
   1c85c:	and	r6, r1, r2
   1c860:	mov	r1, r6
   1c864:	add	r4, pc, r4
   1c868:	bl	11e04 <realloc@plt>
   1c86c:	str	r6, [r9]
   1c870:	str	r5, [r9, #4]
   1c874:	str	r0, [r4]
   1c878:	ldrb	r2, [r8]
   1c87c:	ldr	r5, [sl, #4]
   1c880:	ldr	r3, [pc, #2580]	; 1d29c <read_boolean_unary_expression@@Base+0x2c38>
   1c884:	mov	r7, r0
   1c888:	mov	r1, #0
   1c88c:	ldr	r3, [pc, r3]
   1c890:	adds	r6, r3, #4
   1c894:	strb	r1, [r7, r3]!
   1c898:	strb	r1, [r7, #3]
   1c89c:	strb	r1, [r7, #2]
   1c8a0:	strb	r1, [r7, #1]
   1c8a4:	adc	r1, r5, #0
   1c8a8:	mov	r7, #1
   1c8ac:	cmp	r2, #1
   1c8b0:	str	r6, [sl]
   1c8b4:	str	r1, [sl, #4]
   1c8b8:	bne	1c970 <read_boolean_unary_expression@@Base+0x230c>
   1c8bc:	b	1cd34 <read_boolean_unary_expression@@Base+0x26d0>
   1c8c0:	ldr	r3, [r0, r2]
   1c8c4:	adds	r4, r5, #8
   1c8c8:	adc	r7, r6, #0
   1c8cc:	cmp	r3, #9
   1c8d0:	stm	sl, {r4, r7}
   1c8d4:	bne	1cff8 <read_boolean_unary_expression@@Base+0x2994>
   1c8d8:	ldr	r3, [pc, #2444]	; 1d26c <read_boolean_unary_expression@@Base+0x2c08>
   1c8dc:	adds	r4, r5, #20
   1c8e0:	adc	r7, r6, #0
   1c8e4:	add	r3, pc, r3
   1c8e8:	add	r6, r0, r5
   1c8ec:	ldrb	r3, [r3]
   1c8f0:	ldr	r6, [r6, #16]
   1c8f4:	stm	sl, {r4, r7}
   1c8f8:	eor	r3, r3, #1
   1c8fc:	add	r7, r6, r3
   1c900:	mov	r6, r0
   1c904:	mov	r3, #0
   1c908:	strb	r3, [r6, r5]!
   1c90c:	mov	r5, #161	; 0xa1
   1c910:	strb	r5, [r6, #3]
   1c914:	strb	r3, [r6, #2]
   1c918:	strb	r3, [r6, #1]
   1c91c:	stm	sl, {r2, ip}
   1c920:	mov	r3, r0
   1c924:	mov	r1, #9
   1c928:	strb	r1, [r3, r2]!
   1c92c:	mov	r1, #0
   1c930:	strb	r1, [r3, #3]
   1c934:	strb	r1, [r3, #2]
   1c938:	strb	r1, [r3, #1]
   1c93c:	adds	r3, r2, #4
   1c940:	adc	r5, ip, #0
   1c944:	stm	sl, {r3, r5}
   1c948:	mov	r2, r0
   1c94c:	mov	r1, #0
   1c950:	strb	r1, [r2, r3]!
   1c954:	adds	r6, r3, #4
   1c958:	strb	r1, [r2, #3]
   1c95c:	strb	r1, [r2, #2]
   1c960:	strb	r1, [r2, #1]
   1c964:	adc	r1, r5, #0
   1c968:	str	r6, [sl]
   1c96c:	str	r1, [sl, #4]
   1c970:	mov	r3, r0
   1c974:	mov	r2, #0
   1c978:	strb	r2, [r3, r6]!
   1c97c:	strb	r2, [r3, #3]
   1c980:	strb	r2, [r3, #2]
   1c984:	strb	r2, [r3, #1]
   1c988:	adds	r2, r6, #4
   1c98c:	adc	r3, r1, #0
   1c990:	strd	r2, [sl]
   1c994:	lsr	r1, r7, #24
   1c998:	strb	r7, [r0, r2]!
   1c99c:	lsr	r6, r7, #16
   1c9a0:	lsr	r5, r7, #8
   1c9a4:	strb	r1, [r0, #3]
   1c9a8:	strb	r6, [r0, #2]
   1c9ac:	strb	r5, [r0, #1]
   1c9b0:	ldrb	r0, [r8]
   1c9b4:	adds	r4, r2, #4
   1c9b8:	adc	r5, r3, #0
   1c9bc:	cmp	r0, #0
   1c9c0:	strd	r4, [sl]
   1c9c4:	beq	1ca78 <read_boolean_unary_expression@@Base+0x2414>
   1c9c8:	ldr	r9, [pc, #2284]	; 1d2bc <read_boolean_unary_expression@@Base+0x2c58>
   1c9cc:	adds	r0, r2, #8
   1c9d0:	adc	r1, r3, #0
   1c9d4:	add	r9, pc, r9
   1c9d8:	ldr	r7, [r9, #4]
   1c9dc:	ldr	r6, [pc, #2268]	; 1d2c0 <read_boolean_unary_expression@@Base+0x2c5c>
   1c9e0:	ldr	r6, [pc, r6]
   1c9e4:	subs	r0, r6, r0
   1c9e8:	sbcs	r0, r7, r1
   1c9ec:	bcs	1cc44 <read_boolean_unary_expression@@Base+0x25e0>
   1c9f0:	mov	r0, #7
   1c9f4:	orr	r0, r0, #131072	; 0x20000
   1c9f8:	adds	r0, r2, r0
   1c9fc:	adc	r1, r3, #0
   1ca00:	mvn	r2, #0
   1ca04:	and	r5, r1, r2
   1ca08:	mov	r1, #16646144	; 0xfe0000
   1ca0c:	orr	r1, r1, #-16777216	; 0xff000000
   1ca10:	ldr	r4, [pc, #2268]	; 1d2f4 <read_boolean_unary_expression@@Base+0x2c90>
   1ca14:	and	r6, r0, r1
   1ca18:	ldr	r0, [pc, #2264]	; 1d2f8 <read_boolean_unary_expression@@Base+0x2c94>
   1ca1c:	mov	r1, r6
   1ca20:	add	r4, pc, r4
   1ca24:	ldr	r0, [pc, r0]
   1ca28:	bl	11e04 <realloc@plt>
   1ca2c:	str	r6, [r9]
   1ca30:	str	r5, [r9, #4]
   1ca34:	str	r0, [r4]
   1ca38:	ldrb	r1, [r8]
   1ca3c:	ldr	r5, [sl, #4]
   1ca40:	ldr	r4, [pc, #2228]	; 1d2fc <read_boolean_unary_expression@@Base+0x2c98>
   1ca44:	mov	r3, r0
   1ca48:	mov	r2, #0
   1ca4c:	ldr	r4, [pc, r4]
   1ca50:	strb	r2, [r3, r4]!
   1ca54:	strb	r2, [r3, #3]
   1ca58:	strb	r2, [r3, #2]
   1ca5c:	strb	r2, [r3, #1]
   1ca60:	adds	r2, r4, #4
   1ca64:	adc	r3, r5, #0
   1ca68:	cmp	r1, #0
   1ca6c:	strd	r2, [sl]
   1ca70:	beq	1caa4 <read_boolean_unary_expression@@Base+0x2440>
   1ca74:	b	1cc70 <read_boolean_unary_expression@@Base+0x260c>
   1ca78:	ldr	r0, [pc, #2104]	; 1d2b8 <read_boolean_unary_expression@@Base+0x2c54>
   1ca7c:	adds	r2, r2, #8
   1ca80:	mov	r1, #0
   1ca84:	adc	r3, r3, #0
   1ca88:	ldr	r0, [pc, r0]
   1ca8c:	mov	r7, r0
   1ca90:	strb	r1, [r7, r4]!
   1ca94:	strb	r1, [r7, #3]
   1ca98:	strb	r1, [r7, #2]
   1ca9c:	strb	r1, [r7, #1]
   1caa0:	strd	r2, [sl]
   1caa4:	mov	r7, r0
   1caa8:	mov	r1, #0
   1caac:	strb	r1, [r7, r2]!
   1cab0:	strb	r1, [r7, #3]
   1cab4:	strb	r1, [r7, #2]
   1cab8:	strb	r1, [r7, #1]
   1cabc:	adds	r1, r2, #4
   1cac0:	adc	r5, r3, #0
   1cac4:	stm	sl, {r1, r5}
   1cac8:	mov	r3, r0
   1cacc:	mov	r2, #0
   1cad0:	strb	r2, [r3, r1]!
   1cad4:	strb	r2, [r3, #3]
   1cad8:	strb	r2, [r3, #2]
   1cadc:	strb	r2, [r3, #1]
   1cae0:	adds	r2, r1, #4
   1cae4:	adc	r3, r5, #0
   1cae8:	strd	r2, [sl]
   1caec:	mov	r7, r0
   1caf0:	mov	r1, #0
   1caf4:	strb	r1, [r7, r2]!
   1caf8:	strb	r1, [r7, #3]
   1cafc:	strb	r1, [r7, #2]
   1cb00:	strb	r1, [r7, #1]
   1cb04:	adds	r1, r2, #4
   1cb08:	adc	r5, r3, #0
   1cb0c:	stm	sl, {r1, r5}
   1cb10:	mov	r3, r0
   1cb14:	mov	r2, #0
   1cb18:	strb	r2, [r3, r1]!
   1cb1c:	adds	r4, r1, #4
   1cb20:	strb	r2, [r3, #3]
   1cb24:	strb	r2, [r3, #2]
   1cb28:	strb	r2, [r3, #1]
   1cb2c:	adc	r3, r5, #0
   1cb30:	str	r4, [sl]
   1cb34:	str	r3, [sl, #4]
   1cb38:	mov	r2, r0
   1cb3c:	mov	r1, #0
   1cb40:	strb	r1, [r2, r4]!
   1cb44:	strb	r1, [r2, #3]
   1cb48:	strb	r1, [r2, #2]
   1cb4c:	strb	r1, [r2, #1]
   1cb50:	adds	r2, r4, #4
   1cb54:	adc	r1, r3, #0
   1cb58:	str	r2, [sl]
   1cb5c:	str	r1, [sl, #4]
   1cb60:	mov	r3, r0
   1cb64:	mov	r4, #0
   1cb68:	strb	r4, [r3, r2]!
   1cb6c:	mov	r7, #163	; 0xa3
   1cb70:	strb	r7, [r3, #3]
   1cb74:	strb	r4, [r3, #2]
   1cb78:	strb	r4, [r3, #1]
   1cb7c:	ldrb	r7, [r8]
   1cb80:	adds	r6, r2, #4
   1cb84:	adc	r3, r1, #0
   1cb88:	cmp	r7, #1
   1cb8c:	str	r6, [sl]
   1cb90:	str	r3, [sl, #4]
   1cb94:	bne	1cc08 <read_boolean_unary_expression@@Base+0x25a4>
   1cb98:	ldr	r8, [pc, #1852]	; 1d2dc <read_boolean_unary_expression@@Base+0x2c78>
   1cb9c:	adds	lr, r2, #8
   1cba0:	adc	ip, r1, #0
   1cba4:	add	r8, pc, r8
   1cba8:	ldr	r5, [r8, #4]
   1cbac:	ldr	r7, [pc, #1836]	; 1d2e0 <read_boolean_unary_expression@@Base+0x2c7c>
   1cbb0:	ldr	r7, [pc, r7]
   1cbb4:	subs	r7, r7, lr
   1cbb8:	sbcs	r7, r5, ip
   1cbbc:	bcs	1cc08 <read_boolean_unary_expression@@Base+0x25a4>
   1cbc0:	mov	r3, #7
   1cbc4:	orr	r3, r3, #131072	; 0x20000
   1cbc8:	adds	r2, r2, r3
   1cbcc:	adc	r1, r1, #0
   1cbd0:	mvn	r3, #0
   1cbd4:	and	r7, r1, r3
   1cbd8:	mov	r1, #16646144	; 0xfe0000
   1cbdc:	orr	r1, r1, #-16777216	; 0xff000000
   1cbe0:	ldr	r5, [pc, #1788]	; 1d2e4 <read_boolean_unary_expression@@Base+0x2c80>
   1cbe4:	and	r6, r2, r1
   1cbe8:	mov	r1, r6
   1cbec:	add	r5, pc, r5
   1cbf0:	bl	11e04 <realloc@plt>
   1cbf4:	strd	r6, [r8]
   1cbf8:	str	r0, [r5]
   1cbfc:	ldr	r3, [sl, #4]
   1cc00:	ldr	r6, [pc, #1760]	; 1d2e8 <read_boolean_unary_expression@@Base+0x2c84>
   1cc04:	ldr	r6, [pc, r6]
   1cc08:	ldr	r0, [pc, #1756]	; 1d2ec <read_boolean_unary_expression@@Base+0x2c88>
   1cc0c:	ldr	r1, [pc, #1756]	; 1d2f0 <read_boolean_unary_expression@@Base+0x2c8c>
   1cc10:	adds	r2, r6, #4
   1cc14:	add	r0, pc, r0
   1cc18:	adc	r3, r3, #0
   1cc1c:	ldr	r1, [pc, r1]
   1cc20:	strb	r4, [r1, r6]!
   1cc24:	strb	r4, [r1, #3]
   1cc28:	strb	r4, [r1, #2]
   1cc2c:	strb	r4, [r1, #1]
   1cc30:	mov	r1, #1
   1cc34:	strd	r2, [sl]
   1cc38:	strb	r1, [r0]
   1cc3c:	sub	sp, fp, #28
   1cc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc44:	ldr	r0, [pc, #1656]	; 1d2c4 <read_boolean_unary_expression@@Base+0x2c60>
   1cc48:	adds	r2, r2, #8
   1cc4c:	mov	r1, #0
   1cc50:	adc	r3, r3, #0
   1cc54:	ldr	r0, [pc, r0]
   1cc58:	mov	r7, r0
   1cc5c:	strb	r1, [r7, r4]!
   1cc60:	strb	r1, [r7, #3]
   1cc64:	strb	r1, [r7, #2]
   1cc68:	strb	r1, [r7, #1]
   1cc6c:	strd	r2, [sl]
   1cc70:	ldr	r6, [r9, #4]
   1cc74:	ldr	r1, [pc, #1668]	; 1d300 <read_boolean_unary_expression@@Base+0x2c9c>
   1cc78:	adds	ip, r4, #8
   1cc7c:	adc	r7, r5, #0
   1cc80:	ldr	r1, [pc, r1]
   1cc84:	subs	r1, r1, ip
   1cc88:	sbcs	r1, r6, r7
   1cc8c:	bcs	1cdd8 <read_boolean_unary_expression@@Base+0x2774>
   1cc90:	mov	r1, #7
   1cc94:	orr	r1, r1, #131072	; 0x20000
   1cc98:	adds	r1, r4, r1
   1cc9c:	adc	r2, r5, #0
   1cca0:	mvn	r3, #0
   1cca4:	and	r5, r2, r3
   1cca8:	mov	r2, #16646144	; 0xfe0000
   1ccac:	orr	r2, r2, #-16777216	; 0xff000000
   1ccb0:	ldr	r6, [pc, #1612]	; 1d304 <read_boolean_unary_expression@@Base+0x2ca0>
   1ccb4:	and	r4, r1, r2
   1ccb8:	mov	r1, r4
   1ccbc:	add	r6, pc, r6
   1ccc0:	bl	11e04 <realloc@plt>
   1ccc4:	str	r0, [r6]
   1ccc8:	strd	r4, [r9]
   1cccc:	ldrb	r7, [r8]
   1ccd0:	ldr	r3, [sl, #4]
   1ccd4:	ldr	r2, [pc, #1580]	; 1d308 <read_boolean_unary_expression@@Base+0x2ca4>
   1ccd8:	mov	r6, r0
   1ccdc:	mov	r1, #0
   1cce0:	ldr	r2, [pc, r2]
   1cce4:	strb	r1, [r6, r2]!
   1cce8:	strb	r1, [r6, #3]
   1ccec:	strb	r1, [r6, #2]
   1ccf0:	strb	r1, [r6, #1]
   1ccf4:	adds	r1, r2, #4
   1ccf8:	adc	r5, r3, #0
   1ccfc:	cmp	r7, #1
   1cd00:	stm	sl, {r1, r5}
   1cd04:	bne	1cac8 <read_boolean_unary_expression@@Base+0x2464>
   1cd08:	b	1cdfc <read_boolean_unary_expression@@Base+0x2798>
   1cd0c:	mov	r2, r0
   1cd10:	mov	r1, #0
   1cd14:	strb	r1, [r2, r3]!
   1cd18:	adds	r6, r3, #4
   1cd1c:	strb	r1, [r2, #3]
   1cd20:	strb	r1, [r2, #2]
   1cd24:	strb	r1, [r2, #1]
   1cd28:	adc	r1, r5, #0
   1cd2c:	str	r6, [sl]
   1cd30:	str	r1, [sl, #4]
   1cd34:	ldr	r4, [r9, #4]
   1cd38:	ldr	r2, [pc, #1376]	; 1d2a0 <read_boolean_unary_expression@@Base+0x2c3c>
   1cd3c:	adds	ip, r3, #8
   1cd40:	adc	r7, r5, #0
   1cd44:	ldr	r2, [pc, r2]
   1cd48:	subs	r2, r2, ip
   1cd4c:	sbcs	r2, r4, r7
   1cd50:	bcs	1ce9c <read_boolean_unary_expression@@Base+0x2838>
   1cd54:	mov	r1, #7
   1cd58:	orr	r1, r1, #131072	; 0x20000
   1cd5c:	adds	r1, r3, r1
   1cd60:	adc	r2, r5, #0
   1cd64:	mvn	r3, #0
   1cd68:	and	r5, r2, r3
   1cd6c:	mov	r2, #16646144	; 0xfe0000
   1cd70:	orr	r2, r2, #-16777216	; 0xff000000
   1cd74:	ldr	r4, [pc, #1320]	; 1d2a4 <read_boolean_unary_expression@@Base+0x2c40>
   1cd78:	and	r6, r1, r2
   1cd7c:	mov	r1, r6
   1cd80:	add	r4, pc, r4
   1cd84:	bl	11e04 <realloc@plt>
   1cd88:	str	r6, [r9]
   1cd8c:	str	r5, [r9, #4]
   1cd90:	str	r0, [r4]
   1cd94:	ldrb	r5, [r8]
   1cd98:	ldr	r1, [sl, #4]
   1cd9c:	ldr	r6, [pc, #1284]	; 1d2a8 <read_boolean_unary_expression@@Base+0x2c44>
   1cda0:	mov	r3, r0
   1cda4:	mov	r2, #0
   1cda8:	mov	r7, #1
   1cdac:	ldr	r6, [pc, r6]
   1cdb0:	strb	r2, [r3, r6]!
   1cdb4:	strb	r2, [r3, #3]
   1cdb8:	strb	r2, [r3, #2]
   1cdbc:	strb	r2, [r3, #1]
   1cdc0:	adds	r2, r6, #4
   1cdc4:	adc	r3, r1, #0
   1cdc8:	cmp	r5, #1
   1cdcc:	strd	r2, [sl]
   1cdd0:	bne	1c994 <read_boolean_unary_expression@@Base+0x2330>
   1cdd4:	b	1cec0 <read_boolean_unary_expression@@Base+0x285c>
   1cdd8:	mov	r7, r0
   1cddc:	mov	r1, #0
   1cde0:	strb	r1, [r7, r2]!
   1cde4:	strb	r1, [r7, #3]
   1cde8:	strb	r1, [r7, #2]
   1cdec:	strb	r1, [r7, #1]
   1cdf0:	adds	r1, r2, #4
   1cdf4:	adc	r5, r3, #0
   1cdf8:	stm	sl, {r1, r5}
   1cdfc:	ldr	r4, [r9, #4]
   1ce00:	ldr	r6, [pc, #1284]	; 1d30c <read_boolean_unary_expression@@Base+0x2ca8>
   1ce04:	adds	r7, r2, #8
   1ce08:	adc	ip, r3, #0
   1ce0c:	ldr	r6, [pc, r6]
   1ce10:	subs	r7, r6, r7
   1ce14:	sbcs	r7, r4, ip
   1ce18:	bcs	1cf34 <read_boolean_unary_expression@@Base+0x28d0>
   1ce1c:	mov	r1, #7
   1ce20:	orr	r1, r1, #131072	; 0x20000
   1ce24:	adds	r1, r2, r1
   1ce28:	adc	r2, r3, #0
   1ce2c:	mvn	r3, #0
   1ce30:	and	r5, r2, r3
   1ce34:	mov	r2, #16646144	; 0xfe0000
   1ce38:	orr	r2, r2, #-16777216	; 0xff000000
   1ce3c:	ldr	r4, [pc, #1228]	; 1d310 <read_boolean_unary_expression@@Base+0x2cac>
   1ce40:	and	r6, r1, r2
   1ce44:	mov	r1, r6
   1ce48:	add	r4, pc, r4
   1ce4c:	bl	11e04 <realloc@plt>
   1ce50:	str	r6, [r9]
   1ce54:	str	r5, [r9, #4]
   1ce58:	str	r0, [r4]
   1ce5c:	ldrb	r7, [r8]
   1ce60:	ldr	r5, [sl, #4]
   1ce64:	ldr	r1, [pc, #1192]	; 1d314 <read_boolean_unary_expression@@Base+0x2cb0>
   1ce68:	mov	r3, r0
   1ce6c:	mov	r2, #0
   1ce70:	ldr	r1, [pc, r1]
   1ce74:	strb	r2, [r3, r1]!
   1ce78:	strb	r2, [r3, #3]
   1ce7c:	strb	r2, [r3, #2]
   1ce80:	strb	r2, [r3, #1]
   1ce84:	adds	r2, r1, #4
   1ce88:	adc	r3, r5, #0
   1ce8c:	cmp	r7, #1
   1ce90:	strd	r2, [sl]
   1ce94:	bne	1caec <read_boolean_unary_expression@@Base+0x2488>
   1ce98:	b	1cf58 <read_boolean_unary_expression@@Base+0x28f4>
   1ce9c:	mov	r3, r0
   1cea0:	mov	r2, #0
   1cea4:	strb	r2, [r3, r6]!
   1cea8:	strb	r2, [r3, #3]
   1ceac:	strb	r2, [r3, #2]
   1ceb0:	strb	r2, [r3, #1]
   1ceb4:	adds	r2, r6, #4
   1ceb8:	adc	r3, r1, #0
   1cebc:	strd	r2, [sl]
   1cec0:	ldr	r4, [r9, #4]
   1cec4:	ldr	r5, [pc, #992]	; 1d2ac <read_boolean_unary_expression@@Base+0x2c48>
   1cec8:	adds	lr, r6, #8
   1cecc:	adc	ip, r1, #0
   1ced0:	mov	r7, #1
   1ced4:	ldr	r5, [pc, r5]
   1ced8:	subs	r5, r5, lr
   1cedc:	sbcs	r5, r4, ip
   1cee0:	bcs	1c994 <read_boolean_unary_expression@@Base+0x2330>
   1cee4:	mov	r2, #7
   1cee8:	orr	r2, r2, #131072	; 0x20000
   1ceec:	adds	r2, r6, r2
   1cef0:	adc	r1, r1, #0
   1cef4:	mvn	r3, #0
   1cef8:	and	r5, r1, r3
   1cefc:	mov	r1, #16646144	; 0xfe0000
   1cf00:	orr	r1, r1, #-16777216	; 0xff000000
   1cf04:	ldr	r4, [pc, #932]	; 1d2b0 <read_boolean_unary_expression@@Base+0x2c4c>
   1cf08:	and	r6, r2, r1
   1cf0c:	mov	r1, r6
   1cf10:	add	r4, pc, r4
   1cf14:	bl	11e04 <realloc@plt>
   1cf18:	str	r6, [r9]
   1cf1c:	str	r5, [r9, #4]
   1cf20:	str	r0, [r4]
   1cf24:	ldr	r3, [sl, #4]
   1cf28:	ldr	r2, [pc, #900]	; 1d2b4 <read_boolean_unary_expression@@Base+0x2c50>
   1cf2c:	ldr	r2, [pc, r2]
   1cf30:	b	1c994 <read_boolean_unary_expression@@Base+0x2330>
   1cf34:	mov	r3, r0
   1cf38:	mov	r2, #0
   1cf3c:	strb	r2, [r3, r1]!
   1cf40:	strb	r2, [r3, #3]
   1cf44:	strb	r2, [r3, #2]
   1cf48:	strb	r2, [r3, #1]
   1cf4c:	adds	r2, r1, #4
   1cf50:	adc	r3, r5, #0
   1cf54:	strd	r2, [sl]
   1cf58:	ldr	r4, [r9, #4]
   1cf5c:	ldr	r6, [pc, #948]	; 1d318 <read_boolean_unary_expression@@Base+0x2cb4>
   1cf60:	adds	r7, r1, #8
   1cf64:	adc	ip, r5, #0
   1cf68:	ldr	r6, [pc, r6]
   1cf6c:	subs	r7, r6, r7
   1cf70:	sbcs	r7, r4, ip
   1cf74:	bcs	1d020 <read_boolean_unary_expression@@Base+0x29bc>
   1cf78:	mov	r2, #7
   1cf7c:	orr	r2, r2, #131072	; 0x20000
   1cf80:	adds	r1, r1, r2
   1cf84:	adc	r2, r5, #0
   1cf88:	mvn	r3, #0
   1cf8c:	and	r5, r2, r3
   1cf90:	mov	r2, #16646144	; 0xfe0000
   1cf94:	orr	r2, r2, #-16777216	; 0xff000000
   1cf98:	ldr	r4, [pc, #892]	; 1d31c <read_boolean_unary_expression@@Base+0x2cb8>
   1cf9c:	and	r6, r1, r2
   1cfa0:	mov	r1, r6
   1cfa4:	add	r4, pc, r4
   1cfa8:	bl	11e04 <realloc@plt>
   1cfac:	str	r6, [r9]
   1cfb0:	str	r5, [r9, #4]
   1cfb4:	str	r0, [r4]
   1cfb8:	ldrb	r7, [r8]
   1cfbc:	ldr	r3, [sl, #4]
   1cfc0:	ldr	r2, [pc, #856]	; 1d320 <read_boolean_unary_expression@@Base+0x2cbc>
   1cfc4:	mov	r6, r0
   1cfc8:	mov	r1, #0
   1cfcc:	ldr	r2, [pc, r2]
   1cfd0:	strb	r1, [r6, r2]!
   1cfd4:	strb	r1, [r6, #3]
   1cfd8:	strb	r1, [r6, #2]
   1cfdc:	strb	r1, [r6, #1]
   1cfe0:	adds	r1, r2, #4
   1cfe4:	adc	r5, r3, #0
   1cfe8:	cmp	r7, #1
   1cfec:	stm	sl, {r1, r5}
   1cff0:	bne	1cb10 <read_boolean_unary_expression@@Base+0x24ac>
   1cff4:	b	1d044 <read_boolean_unary_expression@@Base+0x29e0>
   1cff8:	ldr	r1, [pc, #616]	; 1d268 <read_boolean_unary_expression@@Base+0x2c04>
   1cffc:	add	r1, pc, r1
   1d000:	ldr	r0, [pc, #600]	; 1d260 <read_boolean_unary_expression@@Base+0x2bfc>
   1d004:	ldr	r0, [pc, r0]
   1d008:	ldr	r0, [r0]
   1d00c:	ldr	r2, [pc, #592]	; 1d264 <read_boolean_unary_expression@@Base+0x2c00>
   1d010:	ldr	r2, [pc, r2]
   1d014:	sub	sp, fp, #28
   1d018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d01c:	b	11e94 <fprintf@plt>
   1d020:	mov	r7, r0
   1d024:	mov	r1, #0
   1d028:	strb	r1, [r7, r2]!
   1d02c:	strb	r1, [r7, #3]
   1d030:	strb	r1, [r7, #2]
   1d034:	strb	r1, [r7, #1]
   1d038:	adds	r1, r2, #4
   1d03c:	adc	r5, r3, #0
   1d040:	stm	sl, {r1, r5}
   1d044:	ldr	r4, [r9, #4]
   1d048:	ldr	r6, [pc, #724]	; 1d324 <read_boolean_unary_expression@@Base+0x2cc0>
   1d04c:	adds	r7, r2, #8
   1d050:	adc	ip, r3, #0
   1d054:	ldr	r6, [pc, r6]
   1d058:	subs	r7, r6, r7
   1d05c:	sbcs	r7, r4, ip
   1d060:	bcs	1d0e8 <read_boolean_unary_expression@@Base+0x2a84>
   1d064:	mov	r1, #7
   1d068:	orr	r1, r1, #131072	; 0x20000
   1d06c:	adds	r1, r2, r1
   1d070:	adc	r2, r3, #0
   1d074:	mvn	r3, #0
   1d078:	and	r5, r2, r3
   1d07c:	mov	r2, #16646144	; 0xfe0000
   1d080:	orr	r2, r2, #-16777216	; 0xff000000
   1d084:	ldr	r4, [pc, #668]	; 1d328 <read_boolean_unary_expression@@Base+0x2cc4>
   1d088:	and	r6, r1, r2
   1d08c:	mov	r1, r6
   1d090:	add	r4, pc, r4
   1d094:	bl	11e04 <realloc@plt>
   1d098:	str	r6, [r9]
   1d09c:	str	r5, [r9, #4]
   1d0a0:	str	r0, [r4]
   1d0a4:	ldrb	r2, [r8]
   1d0a8:	ldr	r5, [sl, #4]
   1d0ac:	ldr	r1, [pc, #632]	; 1d32c <read_boolean_unary_expression@@Base+0x2cc8>
   1d0b0:	mov	r7, r0
   1d0b4:	mov	r3, #0
   1d0b8:	ldr	r1, [pc, r1]
   1d0bc:	adds	r4, r1, #4
   1d0c0:	strb	r3, [r7, r1]!
   1d0c4:	strb	r3, [r7, #3]
   1d0c8:	strb	r3, [r7, #2]
   1d0cc:	strb	r3, [r7, #1]
   1d0d0:	adc	r3, r5, #0
   1d0d4:	cmp	r2, #1
   1d0d8:	str	r4, [sl]
   1d0dc:	str	r3, [sl, #4]
   1d0e0:	bne	1cb38 <read_boolean_unary_expression@@Base+0x24d4>
   1d0e4:	b	1d110 <read_boolean_unary_expression@@Base+0x2aac>
   1d0e8:	mov	r3, r0
   1d0ec:	mov	r2, #0
   1d0f0:	strb	r2, [r3, r1]!
   1d0f4:	adds	r4, r1, #4
   1d0f8:	strb	r2, [r3, #3]
   1d0fc:	strb	r2, [r3, #2]
   1d100:	strb	r2, [r3, #1]
   1d104:	adc	r3, r5, #0
   1d108:	str	r4, [sl]
   1d10c:	str	r3, [sl, #4]
   1d110:	ldr	r6, [r9, #4]
   1d114:	ldr	r2, [pc, #532]	; 1d330 <read_boolean_unary_expression@@Base+0x2ccc>
   1d118:	adds	ip, r1, #8
   1d11c:	adc	r7, r5, #0
   1d120:	ldr	r2, [pc, r2]
   1d124:	subs	r2, r2, ip
   1d128:	sbcs	r2, r6, r7
   1d12c:	bcs	1d1b4 <read_boolean_unary_expression@@Base+0x2b50>
   1d130:	mov	r2, #7
   1d134:	orr	r2, r2, #131072	; 0x20000
   1d138:	adds	r1, r1, r2
   1d13c:	adc	r2, r5, #0
   1d140:	mvn	r3, #0
   1d144:	and	r5, r2, r3
   1d148:	mov	r2, #16646144	; 0xfe0000
   1d14c:	orr	r2, r2, #-16777216	; 0xff000000
   1d150:	ldr	r4, [pc, #368]	; 1d2c8 <read_boolean_unary_expression@@Base+0x2c64>
   1d154:	and	r6, r1, r2
   1d158:	mov	r1, r6
   1d15c:	add	r4, pc, r4
   1d160:	bl	11e04 <realloc@plt>
   1d164:	str	r6, [r9]
   1d168:	str	r5, [r9, #4]
   1d16c:	str	r0, [r4]
   1d170:	ldrb	r7, [r8]
   1d174:	ldr	r3, [sl, #4]
   1d178:	ldr	r4, [pc, #332]	; 1d2cc <read_boolean_unary_expression@@Base+0x2c68>
   1d17c:	mov	r2, r0
   1d180:	mov	r1, #0
   1d184:	ldr	r4, [pc, r4]
   1d188:	strb	r1, [r2, r4]!
   1d18c:	strb	r1, [r2, #3]
   1d190:	strb	r1, [r2, #2]
   1d194:	strb	r1, [r2, #1]
   1d198:	adds	r2, r4, #4
   1d19c:	adc	r1, r3, #0
   1d1a0:	cmp	r7, #0
   1d1a4:	str	r2, [sl]
   1d1a8:	str	r1, [sl, #4]
   1d1ac:	beq	1cb60 <read_boolean_unary_expression@@Base+0x24fc>
   1d1b0:	b	1d1dc <read_boolean_unary_expression@@Base+0x2b78>
   1d1b4:	mov	r2, r0
   1d1b8:	mov	r1, #0
   1d1bc:	strb	r1, [r2, r4]!
   1d1c0:	strb	r1, [r2, #3]
   1d1c4:	strb	r1, [r2, #2]
   1d1c8:	strb	r1, [r2, #1]
   1d1cc:	adds	r2, r4, #4
   1d1d0:	adc	r1, r3, #0
   1d1d4:	str	r2, [sl]
   1d1d8:	str	r1, [sl, #4]
   1d1dc:	ldr	r5, [r9, #4]
   1d1e0:	ldr	r6, [pc, #232]	; 1d2d0 <read_boolean_unary_expression@@Base+0x2c6c>
   1d1e4:	adds	r7, r4, #8
   1d1e8:	adc	ip, r3, #0
   1d1ec:	ldr	r6, [pc, r6]
   1d1f0:	subs	r7, r6, r7
   1d1f4:	sbcs	r7, r5, ip
   1d1f8:	bcs	1cb60 <read_boolean_unary_expression@@Base+0x24fc>
   1d1fc:	mov	r1, #7
   1d200:	orr	r1, r1, #131072	; 0x20000
   1d204:	adds	r1, r4, r1
   1d208:	adc	r2, r3, #0
   1d20c:	mvn	r3, #0
   1d210:	and	r7, r2, r3
   1d214:	mov	r2, #16646144	; 0xfe0000
   1d218:	orr	r2, r2, #-16777216	; 0xff000000
   1d21c:	ldr	r5, [pc, #176]	; 1d2d4 <read_boolean_unary_expression@@Base+0x2c70>
   1d220:	and	r6, r1, r2
   1d224:	mov	r1, r6
   1d228:	add	r5, pc, r5
   1d22c:	bl	11e04 <realloc@plt>
   1d230:	strd	r6, [r9]
   1d234:	str	r0, [r5]
   1d238:	ldr	r1, [sl, #4]
   1d23c:	ldr	r2, [pc, #148]	; 1d2d8 <read_boolean_unary_expression@@Base+0x2c74>
   1d240:	ldr	r2, [pc, r2]
   1d244:	b	1cb60 <read_boolean_unary_expression@@Base+0x24fc>
   1d248:	andeq	r4, r1, r0, lsl #19
   1d24c:	andeq	r4, r1, r0, lsl #19
   1d250:	andeq	r4, r1, r4, ror r9
   1d254:	andeq	r4, r1, r8, asr r9
   1d258:	andeq	r4, r1, ip, lsl #17
   1d25c:	andeq	r2, r0, r6, lsl #14
   1d260:	strheq	r3, [r1], -r0
   1d264:	andeq	r3, r1, r0, asr #30
   1d268:	andeq	r1, r0, pc, ror #28
   1d26c:	andeq	r4, r1, ip, lsl #13
   1d270:	andeq	r4, r1, r8, asr #18
   1d274:	andeq	r4, r1, ip, lsr r9
   1d278:	andeq	r4, r1, r0, lsr r8
   1d27c:	strdeq	r4, [r1], -r0
   1d280:	andeq	r4, r1, ip, ror #17
   1d284:	andeq	r4, r1, ip, asr #17
   1d288:	andeq	r4, r1, r8, lsl #16
   1d28c:	andeq	r4, r1, r8, asr #15
   1d290:	andeq	r4, r1, ip, lsr #15
   1d294:	andeq	r4, r1, r8, lsr r7
   1d298:	strdeq	r4, [r1], -r8
   1d29c:	ldrdeq	r4, [r1], -ip
   1d2a0:	andeq	r4, r1, ip, lsl r2
   1d2a4:	ldrdeq	r4, [r1], -ip
   1d2a8:			; <UNDEFINED> instruction: 0x000141bc
   1d2ac:	andeq	r4, r1, ip, lsl #1
   1d2b0:	andeq	r4, r1, ip, asr #32
   1d2b4:	andeq	r4, r1, ip, lsr r0
   1d2b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d2bc:	andeq	r4, r1, ip, lsl #11
   1d2c0:	andeq	r4, r1, r0, lsl #11
   1d2c4:	andeq	r4, r1, r8, lsl #6
   1d2c8:	andeq	r3, r1, r0, lsl #28
   1d2cc:	andeq	r3, r1, r4, ror #27
   1d2d0:	andeq	r3, r1, r4, ror sp
   1d2d4:	andeq	r3, r1, r4, lsr sp
   1d2d8:	andeq	r3, r1, r8, lsr #26
   1d2dc:			; <UNDEFINED> instruction: 0x000143bc
   1d2e0:			; <UNDEFINED> instruction: 0x000143b0
   1d2e4:	andeq	r4, r1, r0, ror r3
   1d2e8:	andeq	r4, r1, r4, ror #6
   1d2ec:	andeq	r4, r1, ip, asr r3
   1d2f0:	andeq	r4, r1, r0, asr #6
   1d2f4:	andeq	r4, r1, ip, lsr r5
   1d2f8:	andeq	r4, r1, r8, lsr r5
   1d2fc:	andeq	r4, r1, ip, lsl r5
   1d300:	andeq	r4, r1, r0, ror #5
   1d304:	andeq	r4, r1, r0, lsr #5
   1d308:	andeq	r4, r1, r8, lsl #5
   1d30c:	andeq	r4, r1, r4, asr r1
   1d310:	andeq	r4, r1, r4, lsl r1
   1d314:	strdeq	r4, [r1], -r8
   1d318:	strdeq	r3, [r1], -r8
   1d31c:			; <UNDEFINED> instruction: 0x00013fb8
   1d320:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1d324:	andeq	r3, r1, ip, lsl #30
   1d328:	andeq	r3, r1, ip, asr #29
   1d32c:			; <UNDEFINED> instruction: 0x00013eb0
   1d330:	andeq	r3, r1, r0, asr #28
   1d334:	ldr	r0, [pc, #508]	; 1d538 <read_boolean_unary_expression@@Base+0x2ed4>
   1d338:	ldr	r0, [pc, r0]
   1d33c:	cmp	r0, #0
   1d340:	beq	1d4f0 <read_boolean_unary_expression@@Base+0x2e8c>
   1d344:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d348:	add	fp, sp, #24
   1d34c:	ldr	r9, [pc, #488]	; 1d53c <read_boolean_unary_expression@@Base+0x2ed8>
   1d350:	mov	r4, #0
   1d354:	mov	r1, #0
   1d358:	add	r9, pc, r9
   1d35c:	ldrb	r0, [r9]
   1d360:	cmp	r0, #1
   1d364:	bne	1d3e8 <read_boolean_unary_expression@@Base+0x2d84>
   1d368:	ldr	r0, [pc, #464]	; 1d540 <read_boolean_unary_expression@@Base+0x2edc>
   1d36c:	ldr	r8, [pc, #464]	; 1d544 <read_boolean_unary_expression@@Base+0x2ee0>
   1d370:	mov	r1, #1
   1d374:	add	r0, pc, r0
   1d378:	add	r8, pc, r8
   1d37c:	ldr	r0, [r0, #4]
   1d380:	ldr	r2, [pc, #448]	; 1d548 <read_boolean_unary_expression@@Base+0x2ee4>
   1d384:	ldr	r2, [pc, r2]
   1d388:	ldr	r7, [r8, #4]
   1d38c:	ldr	r5, [pc, #440]	; 1d54c <read_boolean_unary_expression@@Base+0x2ee8>
   1d390:	adds	r3, r2, #8
   1d394:	adc	r6, r0, #0
   1d398:	ldr	r5, [pc, r5]
   1d39c:	subs	r3, r5, r3
   1d3a0:	sbcs	r3, r7, r6
   1d3a4:	bcs	1d3e8 <read_boolean_unary_expression@@Base+0x2d84>
   1d3a8:	mov	r1, #7
   1d3ac:	orr	r1, r1, #131072	; 0x20000
   1d3b0:	adds	r1, r2, r1
   1d3b4:	adc	r7, r0, #0
   1d3b8:	mov	r0, #16646144	; 0xfe0000
   1d3bc:	orr	r0, r0, #-16777216	; 0xff000000
   1d3c0:	ldr	r5, [pc, #392]	; 1d550 <read_boolean_unary_expression@@Base+0x2eec>
   1d3c4:	and	r6, r1, r0
   1d3c8:	ldr	r0, [pc, #388]	; 1d554 <read_boolean_unary_expression@@Base+0x2ef0>
   1d3cc:	mov	r1, r6
   1d3d0:	add	r5, pc, r5
   1d3d4:	ldr	r0, [pc, r0]
   1d3d8:	bl	11e04 <realloc@plt>
   1d3dc:	ldrb	r1, [r9]
   1d3e0:	strd	r6, [r8]
   1d3e4:	str	r0, [r5]
   1d3e8:	ldr	r3, [pc, #360]	; 1d558 <read_boolean_unary_expression@@Base+0x2ef4>
   1d3ec:	ldr	r2, [pc, #360]	; 1d55c <read_boolean_unary_expression@@Base+0x2ef8>
   1d3f0:	add	r3, pc, r3
   1d3f4:	ldr	r2, [pc, r2]
   1d3f8:	ldr	r0, [pc, #352]	; 1d560 <read_boolean_unary_expression@@Base+0x2efc>
   1d3fc:	ldr	r0, [pc, r0]
   1d400:	ldr	r7, [r3, #4]
   1d404:	mov	r6, r0
   1d408:	strb	r4, [r6, r2]!
   1d40c:	adds	r2, r2, #8
   1d410:	adc	r5, r7, #0
   1d414:	strb	r4, [r6, #5]
   1d418:	strb	r4, [r6, #3]
   1d41c:	strb	r4, [r6, #2]
   1d420:	strb	r4, [r6, #1]
   1d424:	strb	r4, [r6, #4]!
   1d428:	cmp	r1, #0
   1d42c:	strb	r4, [r6, #3]
   1d430:	strb	r4, [r6, #2]
   1d434:	stm	r3, {r2, r5}
   1d438:	beq	1d460 <read_boolean_unary_expression@@Base+0x2dfc>
   1d43c:	ldr	r3, [pc, #288]	; 1d564 <read_boolean_unary_expression@@Base+0x2f00>
   1d440:	mov	r1, r2
   1d444:	mov	r2, #1
   1d448:	ldr	r3, [pc, r3]
   1d44c:	bl	11e10 <fwrite@plt>
   1d450:	ldr	r0, [pc, #272]	; 1d568 <read_boolean_unary_expression@@Base+0x2f04>
   1d454:	ldr	r0, [pc, r0]
   1d458:	bl	11dbc <free@plt>
   1d45c:	b	1d4ac <read_boolean_unary_expression@@Base+0x2e48>
   1d460:	ldr	r1, [pc, #260]	; 1d56c <read_boolean_unary_expression@@Base+0x2f08>
   1d464:	mov	r2, #4
   1d468:	ldr	r1, [pc, r1]
   1d46c:	bl	11f24 <msync@plt>
   1d470:	cmn	r0, #1
   1d474:	beq	1d4fc <read_boolean_unary_expression@@Base+0x2e98>
   1d478:	ldr	r1, [pc, #252]	; 1d57c <read_boolean_unary_expression@@Base+0x2f18>
   1d47c:	ldr	r1, [pc, r1]
   1d480:	ldr	r0, [pc, #248]	; 1d580 <read_boolean_unary_expression@@Base+0x2f1c>
   1d484:	ldr	r0, [pc, r0]
   1d488:	bl	11f00 <munmap@plt>
   1d48c:	ldr	r0, [pc, #240]	; 1d584 <read_boolean_unary_expression@@Base+0x2f20>
   1d490:	ldr	r1, [pc, #240]	; 1d588 <read_boolean_unary_expression@@Base+0x2f24>
   1d494:	mov	r2, #0
   1d498:	add	r0, pc, r0
   1d49c:	add	r1, pc, r1
   1d4a0:	str	r2, [r0]
   1d4a4:	str	r2, [r0, #4]
   1d4a8:	str	r2, [r1]
   1d4ac:	ldr	r0, [pc, #216]	; 1d58c <read_boolean_unary_expression@@Base+0x2f28>
   1d4b0:	ldr	r0, [pc, r0]
   1d4b4:	bl	11db0 <fflush@plt>
   1d4b8:	ldr	r0, [pc, #208]	; 1d590 <read_boolean_unary_expression@@Base+0x2f2c>
   1d4bc:	ldr	r0, [pc, r0]
   1d4c0:	bl	1da3c <__gcov_flush@@Base+0x30c>
   1d4c4:	ldr	r0, [pc, #200]	; 1d594 <read_boolean_unary_expression@@Base+0x2f30>
   1d4c8:	ldr	r0, [pc, r0]
   1d4cc:	bl	11ee8 <fclose@plt>
   1d4d0:	ldr	r0, [pc, #192]	; 1d598 <read_boolean_unary_expression@@Base+0x2f34>
   1d4d4:	ldr	r1, [pc, #192]	; 1d59c <read_boolean_unary_expression@@Base+0x2f38>
   1d4d8:	mov	r2, #0
   1d4dc:	add	r0, pc, r0
   1d4e0:	add	r1, pc, r1
   1d4e4:	str	r2, [r0]
   1d4e8:	str	r2, [r1]
   1d4ec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d4f0:	ldr	r0, [pc, #168]	; 1d5a0 <read_boolean_unary_expression@@Base+0x2f3c>
   1d4f4:	ldr	r0, [pc, r0]
   1d4f8:	b	11dbc <free@plt>
   1d4fc:	bl	11ea0 <__errno_location@plt>
   1d500:	ldr	r1, [pc, #104]	; 1d570 <read_boolean_unary_expression@@Base+0x2f0c>
   1d504:	ldr	r1, [pc, r1]
   1d508:	ldr	r0, [r0]
   1d50c:	ldr	r4, [r1]
   1d510:	ldr	r5, [pc, #92]	; 1d574 <read_boolean_unary_expression@@Base+0x2f10>
   1d514:	ldr	r5, [pc, r5]
   1d518:	bl	11e4c <strerror@plt>
   1d51c:	ldr	r1, [pc, #84]	; 1d578 <read_boolean_unary_expression@@Base+0x2f14>
   1d520:	mov	r3, r0
   1d524:	mov	r0, r4
   1d528:	add	r1, pc, r1
   1d52c:	mov	r2, r5
   1d530:	bl	11e94 <fprintf@plt>
   1d534:	b	1d478 <read_boolean_unary_expression@@Base+0x2e14>
   1d538:	andeq	r3, r1, r0, lsr #24
   1d53c:	strdeq	r3, [r1], -ip
   1d540:	strdeq	r3, [r1], -r4
   1d544:	andeq	r3, r1, r8, ror #23
   1d548:	andeq	r3, r1, r4, ror #23
   1d54c:	andeq	r3, r1, r8, asr #23
   1d550:	andeq	r3, r1, ip, lsl #23
   1d554:	andeq	r3, r1, r8, lsl #23
   1d558:	andeq	r3, r1, r8, ror fp
   1d55c:	andeq	r3, r1, r4, ror fp
   1d560:	andeq	r3, r1, r0, ror #22
   1d564:	andeq	r3, r1, r0, lsl fp
   1d568:	andeq	r3, r1, r8, lsl #22
   1d56c:	andeq	r3, r1, r8, lsl fp
   1d570:			; <UNDEFINED> instruction: 0x00012bb0
   1d574:	andeq	r3, r1, ip, lsr sl
   1d578:			; <UNDEFINED> instruction: 0x000019b1
   1d57c:	andeq	r3, r1, r4, lsl #22
   1d580:	ldrdeq	r3, [r1], -r8
   1d584:	andeq	r3, r1, r8, ror #21
   1d588:	andeq	r3, r1, r0, asr #21
   1d58c:	andeq	r3, r1, r8, lsr #21
   1d590:	andeq	r2, r1, ip, lsr #24
   1d594:	muleq	r1, r0, sl
   1d598:	andeq	r3, r1, ip, ror sl
   1d59c:	andeq	r3, r1, ip, ror sl
   1d5a0:	andeq	r3, r1, ip, asr sl
   1d5a4:	push	{r4, sl, fp, lr}
   1d5a8:	add	fp, sp, #8
   1d5ac:	mov	r4, r0
   1d5b0:	mov	r0, #12
   1d5b4:	bl	11e34 <malloc@plt>
   1d5b8:	ldr	r1, [pc, #60]	; 1d5fc <read_boolean_unary_expression@@Base+0x2f98>
   1d5bc:	mov	r2, #0
   1d5c0:	add	r1, pc, r1
   1d5c4:	stm	r0, {r1, r4}
   1d5c8:	str	r2, [r0, #8]
   1d5cc:	ldr	r1, [pc, #44]	; 1d600 <read_boolean_unary_expression@@Base+0x2f9c>
   1d5d0:	ldr	r1, [pc, r1]
   1d5d4:	mov	r2, r1
   1d5d8:	ldr	r3, [r2], #4
   1d5dc:	ldr	r4, [r2]
   1d5e0:	cmp	r3, #0
   1d5e4:	mov	r3, r2
   1d5e8:	addne	r3, r4, #8
   1d5ec:	moveq	r2, r1
   1d5f0:	str	r0, [r3]
   1d5f4:	str	r0, [r2]
   1d5f8:	pop	{r4, sl, fp, pc}
   1d5fc:			; <UNDEFINED> instruction: 0x000139b4
   1d600:	ldrdeq	r2, [r1], -ip
   1d604:	push	{r4, r5, fp, lr}
   1d608:	add	fp, sp, #8
   1d60c:	ldr	r0, [pc, #56]	; 1d64c <read_boolean_unary_expression@@Base+0x2fe8>
   1d610:	ldr	r0, [pc, r0]
   1d614:	ldr	r4, [r0]
   1d618:	cmp	r4, #0
   1d61c:	beq	1d648 <read_boolean_unary_expression@@Base+0x2fe4>
   1d620:	ldr	r5, [pc, #40]	; 1d650 <read_boolean_unary_expression@@Base+0x2fec>
   1d624:	add	r5, pc, r5
   1d628:	ldr	r0, [r4]
   1d62c:	cmp	r0, r5
   1d630:	bne	1d63c <read_boolean_unary_expression@@Base+0x2fd8>
   1d634:	ldr	r0, [r4, #4]
   1d638:	blx	r0
   1d63c:	ldr	r4, [r4, #8]
   1d640:	cmp	r4, #0
   1d644:	bne	1d628 <read_boolean_unary_expression@@Base+0x2fc4>
   1d648:	pop	{r4, r5, fp, pc}
   1d64c:	muleq	r1, ip, sl
   1d650:	andeq	r3, r1, r0, asr r9
   1d654:	push	{r4, r5, r6, r7, fp, lr}
   1d658:	add	fp, sp, #16
   1d65c:	ldr	r4, [pc, #100]	; 1d6c8 <read_boolean_unary_expression@@Base+0x3064>
   1d660:	ldr	r4, [pc, r4]
   1d664:	ldr	r0, [r4]
   1d668:	cmp	r0, #0
   1d66c:	beq	1d6c4 <read_boolean_unary_expression@@Base+0x3060>
   1d670:	ldr	r5, [pc, #84]	; 1d6cc <read_boolean_unary_expression@@Base+0x3068>
   1d674:	mov	r6, #0
   1d678:	add	r5, pc, r5
   1d67c:	ldr	r1, [r0]
   1d680:	ldr	r7, [r0, #8]
   1d684:	cmp	r1, r5
   1d688:	beq	1d694 <read_boolean_unary_expression@@Base+0x3030>
   1d68c:	mov	r6, r0
   1d690:	b	1d6b8 <read_boolean_unary_expression@@Base+0x3054>
   1d694:	ldr	r1, [r4]
   1d698:	cmp	r0, r1
   1d69c:	streq	r7, [r4]
   1d6a0:	ldr	r1, [r4, #4]
   1d6a4:	cmp	r0, r1
   1d6a8:	streq	r6, [r4, #4]
   1d6ac:	cmp	r6, #0
   1d6b0:	strne	r7, [r6, #8]
   1d6b4:	bl	11dbc <free@plt>
   1d6b8:	mov	r0, r7
   1d6bc:	cmp	r7, #0
   1d6c0:	bne	1d67c <read_boolean_unary_expression@@Base+0x3018>
   1d6c4:	pop	{r4, r5, r6, r7, fp, pc}
   1d6c8:	andeq	r2, r1, ip, asr #20
   1d6cc:	strdeq	r3, [r1], -ip
   1d6d0:	push	{r4, sl, fp, lr}
   1d6d4:	add	fp, sp, #8
   1d6d8:	mov	r4, r0
   1d6dc:	mov	r0, #12
   1d6e0:	bl	11e34 <malloc@plt>
   1d6e4:	ldr	r1, [pc, #60]	; 1d728 <read_boolean_unary_expression@@Base+0x30c4>
   1d6e8:	mov	r2, #0
   1d6ec:	add	r1, pc, r1
   1d6f0:	stm	r0, {r1, r4}
   1d6f4:	str	r2, [r0, #8]
   1d6f8:	ldr	r1, [pc, #44]	; 1d72c <read_boolean_unary_expression@@Base+0x30c8>
   1d6fc:	ldr	r1, [pc, r1]
   1d700:	mov	r2, r1
   1d704:	ldr	r3, [r2], #4
   1d708:	ldr	r4, [r2]
   1d70c:	cmp	r3, #0
   1d710:	mov	r3, r2
   1d714:	addne	r3, r4, #8
   1d718:	moveq	r2, r1
   1d71c:	str	r0, [r3]
   1d720:	str	r0, [r2]
   1d724:	pop	{r4, sl, fp, pc}
   1d728:	andeq	r3, r1, r8, lsl #17
   1d72c:	andeq	r2, r1, ip, lsr #19

0001d730 <__gcov_flush@@Base>:
   1d730:	push	{r4, sl, fp, lr}
   1d734:	add	fp, sp, #8
   1d738:	ldr	r0, [pc, #36]	; 1d764 <__gcov_flush@@Base+0x34>
   1d73c:	ldr	r0, [pc, r0]
   1d740:	ldr	r4, [r0]
   1d744:	cmp	r4, #0
   1d748:	beq	1d760 <__gcov_flush@@Base+0x30>
   1d74c:	ldr	r0, [r4, #4]
   1d750:	blx	r0
   1d754:	ldr	r4, [r4, #8]
   1d758:	cmp	r4, #0
   1d75c:	bne	1d74c <__gcov_flush@@Base+0x1c>
   1d760:	pop	{r4, sl, fp, pc}
   1d764:	andeq	r2, r1, ip, ror #18
   1d768:	push	{r4, r5, r6, r7, fp, lr}
   1d76c:	add	fp, sp, #16
   1d770:	ldr	r4, [pc, #100]	; 1d7dc <__gcov_flush@@Base+0xac>
   1d774:	ldr	r4, [pc, r4]
   1d778:	ldr	r0, [r4]
   1d77c:	cmp	r0, #0
   1d780:	beq	1d7d8 <__gcov_flush@@Base+0xa8>
   1d784:	ldr	r5, [pc, #84]	; 1d7e0 <__gcov_flush@@Base+0xb0>
   1d788:	mov	r6, #0
   1d78c:	add	r5, pc, r5
   1d790:	ldr	r1, [r0]
   1d794:	ldr	r7, [r0, #8]
   1d798:	cmp	r1, r5
   1d79c:	beq	1d7a8 <__gcov_flush@@Base+0x78>
   1d7a0:	mov	r6, r0
   1d7a4:	b	1d7cc <__gcov_flush@@Base+0x9c>
   1d7a8:	ldr	r1, [r4]
   1d7ac:	cmp	r0, r1
   1d7b0:	streq	r7, [r4]
   1d7b4:	ldr	r1, [r4, #4]
   1d7b8:	cmp	r0, r1
   1d7bc:	streq	r6, [r4, #4]
   1d7c0:	cmp	r6, #0
   1d7c4:	strne	r7, [r6, #8]
   1d7c8:	bl	11dbc <free@plt>
   1d7cc:	mov	r0, r7
   1d7d0:	cmp	r7, #0
   1d7d4:	bne	1d790 <__gcov_flush@@Base+0x60>
   1d7d8:	pop	{r4, r5, r6, r7, fp, pc}
   1d7dc:	andeq	r2, r1, r4, lsr r9
   1d7e0:	andeq	r3, r1, r8, ror #15
   1d7e4:	push	{r4, r5, fp, lr}
   1d7e8:	add	fp, sp, #8
   1d7ec:	mov	r4, r1
   1d7f0:	cmp	r0, #0
   1d7f4:	beq	1d844 <__gcov_flush@@Base+0x114>
   1d7f8:	mov	r5, r0
   1d7fc:	mov	r0, #12
   1d800:	bl	11e34 <malloc@plt>
   1d804:	ldr	r1, [pc, #204]	; 1d8d8 <__gcov_flush@@Base+0x1a8>
   1d808:	mov	r2, #0
   1d80c:	add	r1, pc, r1
   1d810:	stm	r0, {r1, r5}
   1d814:	str	r2, [r0, #8]
   1d818:	ldr	r1, [pc, #188]	; 1d8dc <__gcov_flush@@Base+0x1ac>
   1d81c:	ldr	r1, [pc, r1]
   1d820:	mov	r2, r1
   1d824:	ldr	r3, [r2], #4
   1d828:	ldr	r5, [r2]
   1d82c:	cmp	r3, #0
   1d830:	mov	r3, r2
   1d834:	addne	r3, r5, #8
   1d838:	moveq	r2, r1
   1d83c:	str	r0, [r3]
   1d840:	str	r0, [r2]
   1d844:	cmp	r4, #0
   1d848:	beq	1d894 <__gcov_flush@@Base+0x164>
   1d84c:	mov	r0, #12
   1d850:	bl	11e34 <malloc@plt>
   1d854:	ldr	r1, [pc, #132]	; 1d8e0 <__gcov_flush@@Base+0x1b0>
   1d858:	mov	r2, #0
   1d85c:	add	r1, pc, r1
   1d860:	stm	r0, {r1, r4}
   1d864:	str	r2, [r0, #8]
   1d868:	ldr	r1, [pc, #116]	; 1d8e4 <__gcov_flush@@Base+0x1b4>
   1d86c:	ldr	r1, [pc, r1]
   1d870:	mov	r2, r1
   1d874:	ldr	r3, [r2], #4
   1d878:	ldr	r5, [r2]
   1d87c:	cmp	r3, #0
   1d880:	mov	r3, r2
   1d884:	addne	r3, r5, #8
   1d888:	moveq	r2, r1
   1d88c:	str	r0, [r3]
   1d890:	str	r0, [r2]
   1d894:	ldr	r1, [pc, #76]	; 1d8e8 <__gcov_flush@@Base+0x1b8>
   1d898:	add	r1, pc, r1
   1d89c:	ldrb	r0, [r1]
   1d8a0:	cmp	r0, #0
   1d8a4:	popne	{r4, r5, fp, pc}
   1d8a8:	ldr	r0, [pc, #60]	; 1d8ec <__gcov_flush@@Base+0x1bc>
   1d8ac:	mov	r2, #1
   1d8b0:	strb	r2, [r1]
   1d8b4:	add	r0, pc, r0
   1d8b8:	bl	1dd98 <__libc_csu_fini@@Base+0x4>
   1d8bc:	ldr	r0, [pc, #44]	; 1d8f0 <__gcov_flush@@Base+0x1c0>
   1d8c0:	add	r0, pc, r0
   1d8c4:	bl	1dd98 <__libc_csu_fini@@Base+0x4>
   1d8c8:	ldr	r0, [pc, #36]	; 1d8f4 <__gcov_flush@@Base+0x1c4>
   1d8cc:	add	r0, pc, r0
   1d8d0:	pop	{r4, r5, fp, lr}
   1d8d4:	b	1dd98 <__libc_csu_fini@@Base+0x4>
   1d8d8:	andeq	r3, r1, r8, ror #14
   1d8dc:	muleq	r1, r0, r8
   1d8e0:	andeq	r3, r1, r8, lsl r7
   1d8e4:	andeq	r2, r1, ip, lsr r8
   1d8e8:	andeq	r3, r1, r0, ror #13
   1d8ec:			; <UNDEFINED> instruction: 0xfffffeac
   1d8f0:			; <UNDEFINED> instruction: 0xfffffd8c
   1d8f4:			; <UNDEFINED> instruction: 0xfffffd30
   1d8f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d8fc:	add	fp, sp, #24
   1d900:	ldr	r7, [pc, #76]	; 1d954 <__gcov_flush@@Base+0x224>
   1d904:	mov	r4, r0
   1d908:	mov	r5, #1
   1d90c:	mov	r8, #0
   1d910:	ldr	r7, [pc, r7]
   1d914:	mov	r6, #47	; 0x2f
   1d918:	b	1d920 <__gcov_flush@@Base+0x1f0>
   1d91c:	add	r5, r5, #1
   1d920:	ldrb	r0, [r4, r5]
   1d924:	cmp	r0, #47	; 0x2f
   1d928:	beq	1d938 <__gcov_flush@@Base+0x208>
   1d92c:	cmp	r0, #0
   1d930:	bne	1d91c <__gcov_flush@@Base+0x1ec>
   1d934:	b	1d950 <__gcov_flush@@Base+0x220>
   1d938:	strb	r8, [r4, r5]
   1d93c:	ldr	r1, [r7]
   1d940:	mov	r0, r4
   1d944:	bl	11eb8 <mkdir@plt>
   1d948:	strb	r6, [r4, r5]
   1d94c:	b	1d91c <__gcov_flush@@Base+0x1ec>
   1d950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d954:	muleq	r1, r4, r7
   1d958:	ldr	r0, [pc, #8]	; 1d968 <__gcov_flush@@Base+0x238>
   1d95c:	ldr	r0, [pc, r0]
   1d960:	ldr	r0, [r0]
   1d964:	bx	lr
   1d968:	andeq	r2, r1, r8, asr #14
   1d96c:	ldr	r1, [pc, #8]	; 1d97c <__gcov_flush@@Base+0x24c>
   1d970:	ldr	r1, [pc, r1]
   1d974:	str	r0, [r1]
   1d978:	bx	lr
   1d97c:	andeq	r2, r1, r4, lsr r7
   1d980:	push	{r4, r5, r6, sl, fp, lr}
   1d984:	add	fp, sp, #16
   1d988:	sub	sp, sp, #392	; 0x188
   1d98c:	mov	r6, sp
   1d990:	mov	r5, r0
   1d994:	mov	r0, r6
   1d998:	mov	r4, r1
   1d99c:	bl	11dec <uname@plt>
   1d9a0:	cmp	r0, #0
   1d9a4:	blt	1d9bc <__gcov_flush@@Base+0x28c>
   1d9a8:	add	r1, r6, #65	; 0x41
   1d9ac:	mov	r0, r5
   1d9b0:	mov	r2, r4
   1d9b4:	bl	11ed0 <strncpy@plt>
   1d9b8:	mov	r0, #0
   1d9bc:	sub	sp, fp, #16
   1d9c0:	pop	{r4, r5, r6, sl, fp, pc}
   1d9c4:	push	{r4, r5, r6, sl, fp, lr}
   1d9c8:	add	fp, sp, #16
   1d9cc:	sub	sp, sp, #32
   1d9d0:	mov	r4, #0
   1d9d4:	mov	r5, r0
   1d9d8:	str	r4, [sp, #20]
   1d9dc:	str	r4, [sp, #16]
   1d9e0:	str	r4, [sp, #12]
   1d9e4:	str	r4, [sp, #8]
   1d9e8:	strh	r4, [sp, #2]
   1d9ec:	bl	11e64 <getpid@plt>
   1d9f0:	mov	r6, sp
   1d9f4:	str	r0, [sp, #24]
   1d9f8:	mov	r0, #1
   1d9fc:	strh	r0, [sp]
   1da00:	mov	r0, r5
   1da04:	mov	r1, #14
   1da08:	mov	r2, r6
   1da0c:	bl	11f0c <fcntl64@plt>
   1da10:	cmn	r0, #1
   1da14:	bne	1da30 <__gcov_flush@@Base+0x300>
   1da18:	bl	11ea0 <__errno_location@plt>
   1da1c:	ldr	r0, [r0]
   1da20:	cmp	r0, #4
   1da24:	beq	1da00 <__gcov_flush@@Base+0x2d0>
   1da28:	cmp	r0, #37	; 0x25
   1da2c:	mvneq	r4, #0
   1da30:	mov	r0, r4
   1da34:	sub	sp, fp, #16
   1da38:	pop	{r4, r5, r6, sl, fp, pc}
   1da3c:	push	{r4, r5, r6, sl, fp, lr}
   1da40:	add	fp, sp, #16
   1da44:	sub	sp, sp, #32
   1da48:	mov	r4, #0
   1da4c:	mov	r5, r0
   1da50:	str	r4, [sp, #20]
   1da54:	str	r4, [sp, #16]
   1da58:	str	r4, [sp, #12]
   1da5c:	str	r4, [sp, #8]
   1da60:	strh	r4, [sp, #2]
   1da64:	bl	11e64 <getpid@plt>
   1da68:	mov	r6, sp
   1da6c:	str	r0, [sp, #24]
   1da70:	mov	r0, #2
   1da74:	strh	r0, [sp]
   1da78:	mov	r0, r5
   1da7c:	mov	r1, #14
   1da80:	mov	r2, r6
   1da84:	bl	11f0c <fcntl64@plt>
   1da88:	cmn	r0, #1
   1da8c:	bne	1daa8 <__gcov_flush@@Base+0x378>
   1da90:	bl	11ea0 <__errno_location@plt>
   1da94:	ldr	r0, [r0]
   1da98:	cmp	r0, #4
   1da9c:	beq	1da78 <__gcov_flush@@Base+0x348>
   1daa0:	cmp	r0, #37	; 0x25
   1daa4:	mvneq	r4, #0
   1daa8:	mov	r0, r4
   1daac:	sub	sp, fp, #16
   1dab0:	pop	{r4, r5, r6, sl, fp, pc}
   1dab4:	push	{r4, r5, fp, lr}
   1dab8:	add	fp, sp, #8
   1dabc:	sub	sp, sp, #32
   1dac0:	mov	r2, #182	; 0xb6
   1dac4:	orr	r2, r2, #256	; 0x100
   1dac8:	mov	r1, #66	; 0x42
   1dacc:	bl	11e1c <open64@plt>
   1dad0:	cmp	r0, #0
   1dad4:	blt	1db50 <__gcov_flush@@Base+0x420>
   1dad8:	mov	r4, r0
   1dadc:	mov	r0, #0
   1dae0:	str	r0, [sp, #20]
   1dae4:	str	r0, [sp, #16]
   1dae8:	str	r0, [sp, #12]
   1daec:	str	r0, [sp, #8]
   1daf0:	strh	r0, [sp, #2]
   1daf4:	bl	11e64 <getpid@plt>
   1daf8:	mov	r5, sp
   1dafc:	str	r0, [sp, #24]
   1db00:	mov	r0, #1
   1db04:	strh	r0, [sp]
   1db08:	mov	r0, r4
   1db0c:	mov	r1, #14
   1db10:	mov	r2, r5
   1db14:	bl	11f0c <fcntl64@plt>
   1db18:	cmn	r0, #1
   1db1c:	bne	1db38 <__gcov_flush@@Base+0x408>
   1db20:	bl	11ea0 <__errno_location@plt>
   1db24:	ldr	r0, [r0]
   1db28:	cmp	r0, #4
   1db2c:	beq	1db08 <__gcov_flush@@Base+0x3d8>
   1db30:	cmp	r0, #37	; 0x25
   1db34:	beq	1db5c <__gcov_flush@@Base+0x42c>
   1db38:	ldr	r1, [pc, #76]	; 1db8c <__gcov_flush@@Base+0x45c>
   1db3c:	mov	r0, r4
   1db40:	add	r1, pc, r1
   1db44:	bl	11d80 <fdopen@plt>
   1db48:	sub	sp, fp, #8
   1db4c:	pop	{r4, r5, fp, pc}
   1db50:	mov	r0, #0
   1db54:	sub	sp, fp, #8
   1db58:	pop	{r4, r5, fp, pc}
   1db5c:	ldr	r1, [pc, #28]	; 1db80 <__gcov_flush@@Base+0x450>
   1db60:	ldr	r2, [pc, #28]	; 1db84 <__gcov_flush@@Base+0x454>
   1db64:	ldr	r0, [pc, #28]	; 1db88 <__gcov_flush@@Base+0x458>
   1db68:	add	r1, pc, r1
   1db6c:	add	r2, pc, r2
   1db70:	ldr	r0, [pc, r0]
   1db74:	ldr	r0, [r0]
   1db78:	bl	11e94 <fprintf@plt>
   1db7c:	b	1db38 <__gcov_flush@@Base+0x408>
   1db80:	muleq	r0, r2, r3
   1db84:	ldrdeq	r1, [r0], -r7
   1db88:	andeq	r2, r1, r4, asr #10
   1db8c:	andeq	r1, r0, r8, lsl r2
   1db90:	push	{r4, r5, r6, sl, fp, lr}
   1db94:	add	fp, sp, #16
   1db98:	mov	r6, r0
   1db9c:	ldr	r0, [pc, #120]	; 1dc1c <__gcov_flush@@Base+0x4ec>
   1dba0:	mov	r4, r1
   1dba4:	add	r0, pc, r0
   1dba8:	bl	11e28 <getenv@plt>
   1dbac:	mov	r5, r0
   1dbb0:	ldr	r0, [pc, #104]	; 1dc20 <__gcov_flush@@Base+0x4f0>
   1dbb4:	add	r0, pc, r0
   1dbb8:	bl	11e28 <getenv@plt>
   1dbbc:	mov	r1, #0
   1dbc0:	str	r1, [r4]
   1dbc4:	str	r1, [r6]
   1dbc8:	cmp	r5, #0
   1dbcc:	ldrbne	r2, [r5]
   1dbd0:	cmpne	r2, #0
   1dbd4:	bne	1dbe0 <__gcov_flush@@Base+0x4b0>
   1dbd8:	mov	r0, r1
   1dbdc:	pop	{r4, r5, r6, sl, fp, pc}
   1dbe0:	cmp	r0, #0
   1dbe4:	beq	1dbfc <__gcov_flush@@Base+0x4cc>
   1dbe8:	mov	r1, #0
   1dbec:	mov	r2, #10
   1dbf0:	bl	11d98 <strtol@plt>
   1dbf4:	bic	r0, r0, r0, asr #31
   1dbf8:	b	1dc00 <__gcov_flush@@Base+0x4d0>
   1dbfc:	mov	r0, #0
   1dc00:	str	r0, [r6]
   1dc04:	mov	r0, r5
   1dc08:	bl	11e7c <strlen@plt>
   1dc0c:	mov	r1, r5
   1dc10:	str	r0, [r4]
   1dc14:	mov	r0, r1
   1dc18:	pop	{r4, r5, r6, sl, fp, pc}
   1dc1c:	andeq	r1, r0, sp, asr #7
   1dc20:	andeq	r1, r0, r9, asr #7
   1dc24:	push	{r4, r5, r6, r7, fp, lr}
   1dc28:	add	fp, sp, #16
   1dc2c:	mov	r6, r0
   1dc30:	ldr	r0, [fp, #8]
   1dc34:	mov	r5, r3
   1dc38:	mov	r7, r2
   1dc3c:	mov	r4, r1
   1dc40:	cmp	r0, #1
   1dc44:	blt	1dc7c <__gcov_flush@@Base+0x54c>
   1dc48:	add	r1, r4, #1
   1dc4c:	mov	r2, #0
   1dc50:	ldrb	r3, [r1]
   1dc54:	cmp	r3, #47	; 0x2f
   1dc58:	beq	1dc68 <__gcov_flush@@Base+0x538>
   1dc5c:	cmp	r3, #0
   1dc60:	bne	1dc70 <__gcov_flush@@Base+0x540>
   1dc64:	b	1dc7c <__gcov_flush@@Base+0x54c>
   1dc68:	add	r2, r2, #1
   1dc6c:	mov	r4, r1
   1dc70:	add	r1, r1, #1
   1dc74:	cmp	r2, r0
   1dc78:	blt	1dc50 <__gcov_flush@@Base+0x520>
   1dc7c:	mov	r0, r6
   1dc80:	mov	r1, r7
   1dc84:	mov	r2, r5
   1dc88:	bl	11dc8 <memcpy@plt>
   1dc8c:	add	r0, r7, r5
   1dc90:	ldrb	r0, [r0, #-1]
   1dc94:	cmp	r0, #47	; 0x2f
   1dc98:	movne	r0, #47	; 0x2f
   1dc9c:	strbne	r0, [r6, r5]
   1dca0:	mov	r0, r4
   1dca4:	addne	r5, r5, #1
   1dca8:	add	r5, r6, r5
   1dcac:	bl	11e7c <strlen@plt>
   1dcb0:	add	r2, r0, #1
   1dcb4:	mov	r0, r5
   1dcb8:	mov	r1, r4
   1dcbc:	pop	{r4, r5, r6, r7, fp, lr}
   1dcc0:	b	11dc8 <memcpy@plt>
   1dcc4:	mov	r1, #47	; 0x2f
   1dcc8:	b	11e88 <strchr@plt>
   1dccc:	mov	r1, #47	; 0x2f
   1dcd0:	b	11f18 <strrchr@plt>
   1dcd4:	push	{fp, lr}
   1dcd8:	mov	fp, sp
   1dcdc:	sub	sp, sp, #8
   1dce0:	mov	r0, #0
   1dce4:	str	r0, [sp, #4]
   1dce8:	add	r1, sp, #4
   1dcec:	mov	r0, #2
   1dcf0:	bl	11edc <prctl@plt>
   1dcf4:	ldr	r1, [sp, #4]
   1dcf8:	cmp	r0, #0
   1dcfc:	cmpeq	r1, #9
   1dd00:	bne	1dd14 <__gcov_flush@@Base+0x5e4>
   1dd04:	mov	r0, #1
   1dd08:	mov	r1, #0
   1dd0c:	bl	11edc <prctl@plt>
   1dd10:	ldr	r1, [sp, #4]
   1dd14:	sub	r0, r1, #9
   1dd18:	clz	r0, r0
   1dd1c:	lsr	r0, r0, #5
   1dd20:	mov	sp, fp
   1dd24:	pop	{fp, pc}
   1dd28:	mov	r0, #1
   1dd2c:	mov	r1, #9
   1dd30:	b	11edc <prctl@plt>

0001dd34 <__libc_csu_init@@Base>:
   1dd34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dd38:	mov	r7, r0
   1dd3c:	ldr	r6, [pc, #72]	; 1dd8c <__libc_csu_init@@Base+0x58>
   1dd40:	ldr	r5, [pc, #72]	; 1dd90 <__libc_csu_init@@Base+0x5c>
   1dd44:	add	r6, pc, r6
   1dd48:	add	r5, pc, r5
   1dd4c:	sub	r6, r6, r5
   1dd50:	mov	r8, r1
   1dd54:	mov	r9, r2
   1dd58:	bl	11d60 <fdopen@plt-0x20>
   1dd5c:	asrs	r6, r6, #2
   1dd60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd64:	mov	r4, #0
   1dd68:	add	r4, r4, #1
   1dd6c:	ldr	r3, [r5], #4
   1dd70:	mov	r2, r9
   1dd74:	mov	r1, r8
   1dd78:	mov	r0, r7
   1dd7c:	blx	r3
   1dd80:	cmp	r6, r4
   1dd84:	bne	1dd68 <__libc_csu_init@@Base+0x34>
   1dd88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd8c:	andeq	r1, r1, r0, lsl r9
   1dd90:	strdeq	r1, [r1], -r8

0001dd94 <__libc_csu_fini@@Base>:
   1dd94:	bx	lr
   1dd98:	ldr	r3, [pc, #12]	; 1ddac <__libc_csu_fini@@Base+0x18>
   1dd9c:	mov	r1, #0
   1dda0:	add	r3, pc, r3
   1dda4:	ldr	r2, [r3]
   1dda8:	b	11eac <__cxa_atexit@plt>
   1ddac:	andeq	r2, r1, r4, lsr r3

Disassembly of section .fini:

0001ddb0 <.fini>:
   1ddb0:	push	{r3, lr}
   1ddb4:	pop	{r3, pc}
