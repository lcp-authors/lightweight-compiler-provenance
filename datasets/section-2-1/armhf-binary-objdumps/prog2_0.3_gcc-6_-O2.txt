
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105f0 <.init>:
   105f0:	push	{r3, lr}
   105f4:	bl	1079c <_start@@Base+0x3c>
   105f8:	pop	{r3, pc}

Disassembly of section .plt:

000105fc <printf@plt-0x14>:
   105fc:	push	{lr}		; (str lr, [sp, #-4]!)
   10600:	ldr	lr, [pc, #4]	; 1060c <printf@plt-0x4>
   10604:	add	lr, pc, lr
   10608:	ldr	pc, [lr, #8]!
   1060c:	strdeq	r0, [r1], -r4

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2540]!	; 0x9ec

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2532]!	; 0x9e4

00010634 <putchar@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2524]!	; 0x9dc

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010658 <main@@Base>:
   10658:	push	{r4, r5, r6, r7, r8, r9, lr}
   1065c:	sub	sp, sp, #44	; 0x2c
   10660:	ldr	r8, [pc, #220]	; 10744 <main@@Base+0xec>
   10664:	ldr	r7, [pc, #220]	; 10748 <main@@Base+0xf0>
   10668:	mov	r9, sp
   1066c:	add	r8, pc, r8
   10670:	add	r7, pc, r7
   10674:	mov	r5, sp
   10678:	mov	r6, sp
   1067c:	mov	r4, #0
   10680:	add	r4, r4, #1
   10684:	mov	r1, r4
   10688:	mov	r0, r8
   1068c:	bl	10610 <printf@plt>
   10690:	mov	r1, r6
   10694:	mov	r0, r7
   10698:	bl	10640 <__isoc99_scanf@plt>
   1069c:	cmp	r4, #10
   106a0:	add	r6, r6, #4
   106a4:	bne	10680 <main@@Base+0x28>
   106a8:	mov	r0, r9
   106ac:	bl	10888 <avg@@Base>
   106b0:	ldr	r0, [pc, #148]	; 1074c <main@@Base+0xf4>
   106b4:	ldr	r6, [pc, #148]	; 10750 <main@@Base+0xf8>
   106b8:	add	r0, pc, r0
   106bc:	add	r6, pc, r6
   106c0:	add	r4, sp, #40	; 0x28
   106c4:	vcvt.f64.f32	d7, s0
   106c8:	vmov	r2, r3, d7
   106cc:	bl	10610 <printf@plt>
   106d0:	mov	r0, r9
   106d4:	bl	108b4 <max@@Base>
   106d8:	ldr	r0, [pc, #116]	; 10754 <main@@Base+0xfc>
   106dc:	add	r0, pc, r0
   106e0:	vcvt.f64.f32	d7, s0
   106e4:	vmov	r2, r3, d7
   106e8:	bl	10610 <printf@plt>
   106ec:	mov	r0, r9
   106f0:	bl	108d8 <min@@Base>
   106f4:	ldr	r0, [pc, #92]	; 10758 <main@@Base+0x100>
   106f8:	add	r0, pc, r0
   106fc:	vcvt.f64.f32	d7, s0
   10700:	vmov	r2, r3, d7
   10704:	bl	10610 <printf@plt>
   10708:	ldr	r0, [pc, #76]	; 1075c <main@@Base+0x104>
   1070c:	add	r0, pc, r0
   10710:	bl	10610 <printf@plt>
   10714:	vldmia	r5!, {s15}
   10718:	mov	r0, r6
   1071c:	vcvt.f64.f32	d7, s15
   10720:	vmov	r2, r3, d7
   10724:	bl	10610 <printf@plt>
   10728:	cmp	r5, r4
   1072c:	bne	10714 <main@@Base+0xbc>
   10730:	mov	r0, #10
   10734:	bl	10634 <putchar@plt>
   10738:	mov	r0, #0
   1073c:	add	sp, sp, #44	; 0x2c
   10740:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10744:	strdeq	r0, [r0], -r8
   10748:	andeq	r0, r0, ip, lsl #6
   1074c:	andeq	r0, r0, r8, asr #5
   10750:	strdeq	r0, [r0], -ip
   10754:			; <UNDEFINED> instruction: 0x000002b4
   10758:	andeq	r0, r0, r8, lsr #5
   1075c:	andeq	r0, r0, r4, lsr #5

00010760 <_start@@Base>:
   10760:	mov	fp, #0
   10764:	mov	lr, #0
   10768:	pop	{r1}		; (ldr r1, [sp], #4)
   1076c:	mov	r2, sp
   10770:	push	{r2}		; (str r2, [sp, #-4]!)
   10774:	push	{r0}		; (str r0, [sp, #-4]!)
   10778:	ldr	ip, [pc, #16]	; 10790 <_start@@Base+0x30>
   1077c:	push	{ip}		; (str ip, [sp, #-4]!)
   10780:	ldr	r0, [pc, #12]	; 10794 <_start@@Base+0x34>
   10784:	ldr	r3, [pc, #12]	; 10798 <_start@@Base+0x38>
   10788:	bl	1061c <__libc_start_main@plt>
   1078c:	bl	1064c <abort@plt>
   10790:	andeq	r0, r1, ip, asr r9
   10794:	andeq	r0, r1, r8, asr r6
   10798:	strdeq	r0, [r1], -ip
   1079c:	ldr	r3, [pc, #20]	; 107b8 <_start@@Base+0x58>
   107a0:	ldr	r2, [pc, #20]	; 107bc <_start@@Base+0x5c>
   107a4:	add	r3, pc, r3
   107a8:	ldr	r2, [r3, r2]
   107ac:	cmp	r2, #0
   107b0:	bxeq	lr
   107b4:	b	10628 <__gmon_start__@plt>
   107b8:	andeq	r0, r1, r4, asr r8
   107bc:	andeq	r0, r0, r4, lsr #32
   107c0:	ldr	r3, [pc, #28]	; 107e4 <_start@@Base+0x84>
   107c4:	ldr	r0, [pc, #28]	; 107e8 <_start@@Base+0x88>
   107c8:	sub	r3, r3, r0
   107cc:	cmp	r3, #6
   107d0:	bxls	lr
   107d4:	ldr	r3, [pc, #16]	; 107ec <_start@@Base+0x8c>
   107d8:	cmp	r3, #0
   107dc:	bxeq	lr
   107e0:	bx	r3
   107e4:	andeq	r1, r2, r3, lsr r0
   107e8:	andeq	r1, r2, r0, lsr r0
   107ec:	andeq	r0, r0, r0
   107f0:	ldr	r1, [pc, #36]	; 1081c <_start@@Base+0xbc>
   107f4:	ldr	r0, [pc, #36]	; 10820 <_start@@Base+0xc0>
   107f8:	sub	r1, r1, r0
   107fc:	asr	r1, r1, #2
   10800:	add	r1, r1, r1, lsr #31
   10804:	asrs	r1, r1, #1
   10808:	bxeq	lr
   1080c:	ldr	r3, [pc, #16]	; 10824 <_start@@Base+0xc4>
   10810:	cmp	r3, #0
   10814:	bxeq	lr
   10818:	bx	r3
   1081c:	andeq	r1, r2, r0, lsr r0
   10820:	andeq	r1, r2, r0, lsr r0
   10824:	andeq	r0, r0, r0
   10828:	push	{r4, lr}
   1082c:	ldr	r4, [pc, #24]	; 1084c <_start@@Base+0xec>
   10830:	ldrb	r3, [r4]
   10834:	cmp	r3, #0
   10838:	popne	{r4, pc}
   1083c:	bl	107c0 <_start@@Base+0x60>
   10840:	mov	r3, #1
   10844:	strb	r3, [r4]
   10848:	pop	{r4, pc}
   1084c:	andeq	r1, r2, r0, lsr r0
   10850:	ldr	r0, [pc, #40]	; 10880 <_start@@Base+0x120>
   10854:	ldr	r3, [r0]
   10858:	cmp	r3, #0
   1085c:	bne	10864 <_start@@Base+0x104>
   10860:	b	107f0 <_start@@Base+0x90>
   10864:	ldr	r3, [pc, #24]	; 10884 <_start@@Base+0x124>
   10868:	cmp	r3, #0
   1086c:	beq	10860 <_start@@Base+0x100>
   10870:	push	{r4, lr}
   10874:	blx	r3
   10878:	pop	{r4, lr}
   1087c:	b	107f0 <_start@@Base+0x90>
   10880:	andeq	r0, r2, r4, lsl pc
   10884:	andeq	r0, r0, r0

00010888 <avg@@Base>:
   10888:	vldr	s15, [pc, #28]	; 108ac <avg@@Base+0x24>
   1088c:	add	r3, r0, #40	; 0x28
   10890:	vldmia	r0!, {s14}
   10894:	cmp	r0, r3
   10898:	vadd.f32	s15, s15, s14
   1089c:	bne	10890 <avg@@Base+0x8>
   108a0:	vldr	s0, [pc, #8]	; 108b0 <avg@@Base+0x28>
   108a4:	vdiv.f32	s0, s15, s0
   108a8:	bx	lr
   108ac:	andeq	r0, r0, r0
   108b0:			; <UNDEFINED> instruction: 0x41200000

000108b4 <max@@Base>:
   108b4:	add	r3, r0, #40	; 0x28
   108b8:	vldmia	r0!, {s0}
   108bc:	vldmia	r0!, {s15}
   108c0:	vcmp.f32	s15, s0
   108c4:	vmrs	APSR_nzcv, fpscr
   108c8:	vmovgt.f32	s0, s15
   108cc:	cmp	r0, r3
   108d0:	bne	108bc <max@@Base+0x8>
   108d4:	bx	lr

000108d8 <min@@Base>:
   108d8:	add	r3, r0, #40	; 0x28
   108dc:	vldmia	r0!, {s0}
   108e0:	vldmia	r0!, {s15}
   108e4:	vcmp.f32	s15, s0
   108e8:	vmrs	APSR_nzcv, fpscr
   108ec:	vmovmi.f32	s0, s15
   108f0:	cmp	r0, r3
   108f4:	bne	108e0 <min@@Base+0x8>
   108f8:	bx	lr

000108fc <__libc_csu_init@@Base>:
   108fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10900:	mov	r7, r0
   10904:	ldr	r6, [pc, #72]	; 10954 <__libc_csu_init@@Base+0x58>
   10908:	ldr	r5, [pc, #72]	; 10958 <__libc_csu_init@@Base+0x5c>
   1090c:	add	r6, pc, r6
   10910:	add	r5, pc, r5
   10914:	sub	r6, r6, r5
   10918:	mov	r8, r1
   1091c:	mov	r9, r2
   10920:	bl	105f0 <printf@plt-0x20>
   10924:	asrs	r6, r6, #2
   10928:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1092c:	mov	r4, #0
   10930:	add	r4, r4, #1
   10934:	ldr	r3, [r5], #4
   10938:	mov	r2, r9
   1093c:	mov	r1, r8
   10940:	mov	r0, r7
   10944:	blx	r3
   10948:	cmp	r6, r4
   1094c:	bne	10930 <__libc_csu_init@@Base+0x34>
   10950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10954:	strdeq	r0, [r1], -ip
   10958:	strdeq	r0, [r1], -r4

0001095c <__libc_csu_fini@@Base>:
   1095c:	bx	lr

Disassembly of section .fini:

00010960 <.fini>:
   10960:	push	{r3, lr}
   10964:	pop	{r3, pc}
